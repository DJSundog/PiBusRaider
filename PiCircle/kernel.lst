
kernel.elf:     file format elf32-littlearm


Disassembly of section .init:

00008000 <_start>:
    8000:	e10f0000 	mrs	r0, CPSR
    8004:	e220001a 	eor	r0, r0, #26
    8008:	e310001f 	tst	r0, #31
    800c:	e3c0001f 	bic	r0, r0, #31
    8010:	e38000d3 	orr	r0, r0, #211	; 0xd3
    8014:	1a000004 	bne	802c <_start+0x2c>
    8018:	e3800c01 	orr	r0, r0, #256	; 0x100
    801c:	e28fe00c 	add	lr, pc, #12
    8020:	e16ff000 	msr	SPSR_fsxc, r0
    8024:	e12ef30e 	.word	0xe12ef30e
    8028:	e160006e 	.word	0xe160006e
    802c:	e121f000 	msr	CPSR_c, r0
    8030:	e3a00000 	mov	r0, #0
    8034:	ee0c0f10 	mcr	15, 0, r0, cr12, cr0, {0}
    8038:	f1020011 	cps	#17
    803c:	e3a0d709 	mov	sp, #2359296	; 0x240000
    8040:	f1020012 	cps	#18
    8044:	e3a0d98e 	mov	sp, #2326528	; 0x238000
    8048:	f1020017 	cps	#23
    804c:	e3a0d823 	mov	sp, #2293760	; 0x230000
    8050:	f102001b 	cps	#27
    8054:	e3a0d823 	mov	sp, #2293760	; 0x230000
    8058:	f102001f 	cps	#31
    805c:	e3a0d98a 	mov	sp, #2260992	; 0x228000
    8060:	ea002270 	b	10a28 <sysinit>

Disassembly of section .text:

00008068 <main>:
    8068:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    806c:	e24ddb97 	sub	sp, sp, #154624	; 0x25c00
    8070:	e24dd0c4 	sub	sp, sp, #196	; 0xc4
    8074:	e1a0000d 	mov	r0, sp
    8078:	eb000009 	bl	80a4 <CKernel::CKernel()>
    807c:	e1a0000d 	mov	r0, sp
    8080:	eb00003f 	bl	8184 <CKernel::Initialize()>
    8084:	e3500000 	cmp	r0, #0
    8088:	0a000004 	beq	80a0 <main+0x38>
    808c:	e1a0000d 	mov	r0, sp
    8090:	eb000080 	bl	8298 <CKernel::Run()>
    8094:	e3500002 	cmp	r0, #2
    8098:	1a000000 	bne	80a0 <main+0x38>
    809c:	eb002256 	bl	109fc <reboot>
    80a0:	eb002252 	bl	109f0 <halt>

000080a4 <CKernel::CKernel()>:
    80a4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    80a8:	e1a04000 	mov	r4, r0
    80ac:	e3a01001 	mov	r1, #1
    80b0:	e280700c 	add	r7, r0, #12
    80b4:	e2845018 	add	r5, r4, #24
    80b8:	eb0028e8 	bl	12460 <CMemorySystem::CMemorySystem(bool)>
    80bc:	e1a00007 	mov	r0, r7
    80c0:	eb0009f5 	bl	a89c <CActLED::CActLED()>
    80c4:	e2846e87 	add	r6, r4, #2160	; 0x870
    80c8:	e1a00005 	mov	r0, r5
    80cc:	eb001254 	bl	ca24 <CKernelOptions::CKernelOptions()>
    80d0:	e1a00006 	mov	r0, r6
    80d4:	eb000ba4 	bl	af6c <CDeviceNameService::CDeviceNameService()>
    80d8:	e1a00005 	mov	r0, r5
    80dc:	eb001217 	bl	c940 <CKernelOptions::GetWidth() const>
    80e0:	e1a08000 	mov	r8, r0
    80e4:	e1a00005 	mov	r0, r5
    80e8:	eb001216 	bl	c948 <CKernelOptions::GetHeight() const>
    80ec:	e2845b82 	add	r5, r4, #133120	; 0x20800
    80f0:	e3a03000 	mov	r3, #0
    80f4:	e1a02000 	mov	r2, r0
    80f8:	e1a01008 	mov	r1, r8
    80fc:	e2860008 	add	r0, r6, #8
    8100:	eb001698 	bl	db68 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool)>
    8104:	e2856f6b 	add	r6, r5, #428	; 0x1ac
    8108:	e2840e8d 	add	r0, r4, #2256	; 0x8d0
    810c:	e1a01006 	mov	r1, r6
    8110:	e3a02000 	mov	r2, #0
    8114:	e2800004 	add	r0, r0, #4
    8118:	eb001b47 	bl	ee3c <CSerialDevice::CSerialDevice(CInterruptSystem*, bool)>
    811c:	e2855ffb 	add	r5, r5, #1004	; 0x3ec
    8120:	e1a00006 	mov	r0, r6
    8124:	eb001070 	bl	c2ec <CInterruptSystem::CInterruptSystem()>
    8128:	e2848b83 	add	r8, r4, #134144	; 0x20c00
    812c:	e1a01006 	mov	r1, r6
    8130:	e1a00005 	mov	r0, r5
    8134:	eb002275 	bl	10b10 <CTimer::CTimer(CInterruptSystem*)>
    8138:	e1a02005 	mov	r2, r5
    813c:	e3a01004 	mov	r1, #4
    8140:	e2880018 	add	r0, r8, #24
    8144:	eb00133c 	bl	ce3c <CLogger::CLogger(unsigned int, CTimer*)>
    8148:	e3a02000 	mov	r2, #0
    814c:	e2843802 	add	r3, r4, #131072	; 0x20000
    8150:	e5c32d10 	strb	r2, [r3, #3344]	; 0xd10
    8154:	e2880f45 	add	r0, r8, #276	; 0x114
    8158:	eb0003d7 	bl	90bc <BusRaider::BusRaider()>
    815c:	e59fc01c 	ldr	ip, [pc, #28]	; 8180 <CKernel::CKernel()+0xdc>
    8160:	e1a00007 	mov	r0, r7
    8164:	e3a03f7d 	mov	r3, #500	; 0x1f4
    8168:	e3a020c8 	mov	r2, #200	; 0xc8
    816c:	e3a01005 	mov	r1, #5
    8170:	e58c4000 	str	r4, [ip]
    8174:	eb000a23 	bl	aa08 <CActLED::Blink(unsigned int, unsigned int, unsigned int)>
    8178:	e1a00004 	mov	r0, r4
    817c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8180:	00016624 	.word	0x00016624

00008184 <CKernel::Initialize()>:
    8184:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8188:	e2805b82 	add	r5, r0, #133120	; 0x20800
    818c:	e1a04000 	mov	r4, r0
    8190:	e2850f6b 	add	r0, r5, #428	; 0x1ac
    8194:	eb001067 	bl	c338 <CInterruptSystem::Initialize()>
    8198:	e3500000 	cmp	r0, #0
    819c:	1a000001 	bne	81a8 <CKernel::Initialize()+0x24>
    81a0:	e3a00000 	mov	r0, #0
    81a4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    81a8:	e2847e87 	add	r7, r4, #2160	; 0x870
    81ac:	e2870008 	add	r0, r7, #8
    81b0:	eb001a1d 	bl	ea2c <CScreenDevice::Initialize()>
    81b4:	e3500000 	cmp	r0, #0
    81b8:	0afffff8 	beq	81a0 <CKernel::Initialize()+0x1c>
    81bc:	e2846e8d 	add	r6, r4, #2256	; 0x8d0
    81c0:	e2866004 	add	r6, r6, #4
    81c4:	e1a00006 	mov	r0, r6
    81c8:	e59f1044 	ldr	r1, [pc, #68]	; 8214 <CKernel::Initialize()+0x90>
    81cc:	eb001b4b 	bl	ef00 <CSerialDevice::Initialize(unsigned int)>
    81d0:	e3500000 	cmp	r0, #0
    81d4:	0afffff1 	beq	81a0 <CKernel::Initialize()+0x1c>
    81d8:	e2840018 	add	r0, r4, #24
    81dc:	eb0011db 	bl	c950 <CKernelOptions::GetLogDevice() const>
    81e0:	e3a02000 	mov	r2, #0
    81e4:	e1a01000 	mov	r1, r0
    81e8:	e1a00007 	mov	r0, r7
    81ec:	eb000c08 	bl	b214 <CDeviceNameService::GetDevice(char const*, bool)>
    81f0:	e2840b83 	add	r0, r4, #134144	; 0x20c00
    81f4:	e1a01006 	mov	r1, r6
    81f8:	e2800018 	add	r0, r0, #24
    81fc:	eb0014f6 	bl	d5dc <CLogger::Initialize(CDevice*)>
    8200:	e3500000 	cmp	r0, #0
    8204:	0affffe5 	beq	81a0 <CKernel::Initialize()+0x1c>
    8208:	e2850ffb 	add	r0, r5, #1004	; 0x3ec
    820c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    8210:	ea002521 	b	1169c <CTimer::Initialize()>
    8214:	0001c200 	.word	0x0001c200

00008218 <CKernel::~CKernel()>:
    8218:	e92d4070 	push	{r4, r5, r6, lr}
    821c:	e3a02000 	mov	r2, #0
    8220:	e1a04000 	mov	r4, r0
    8224:	e59f3068 	ldr	r3, [pc, #104]	; 8294 <CKernel::~CKernel()+0x7c>
    8228:	e2806b83 	add	r6, r0, #134144	; 0x20c00
    822c:	e2860f45 	add	r0, r6, #276	; 0x114
    8230:	e5832000 	str	r2, [r3]
    8234:	e2845b82 	add	r5, r4, #133120	; 0x20800
    8238:	eb0003b1 	bl	9104 <BusRaider::~BusRaider()>
    823c:	e2860018 	add	r0, r6, #24
    8240:	eb001313 	bl	ce94 <CLogger::~CLogger()>
    8244:	e2850ffb 	add	r0, r5, #1004	; 0x3ec
    8248:	eb002252 	bl	10b98 <CTimer::~CTimer()>
    824c:	e2850f6b 	add	r0, r5, #428	; 0x1ac
    8250:	eb001033 	bl	c324 <CInterruptSystem::~CInterruptSystem()>
    8254:	e2840e8d 	add	r0, r4, #2256	; 0x8d0
    8258:	e2845e87 	add	r5, r4, #2160	; 0x870
    825c:	e2800004 	add	r0, r0, #4
    8260:	eb001d7b 	bl	f854 <CSerialDevice::~CSerialDevice()>
    8264:	e2850008 	add	r0, r5, #8
    8268:	eb0015f1 	bl	da34 <CScreenDevice::~CScreenDevice()>
    826c:	e1a00005 	mov	r0, r5
    8270:	eb000b50 	bl	afb8 <CDeviceNameService::~CDeviceNameService()>
    8274:	e2840018 	add	r0, r4, #24
    8278:	eb0011ab 	bl	c92c <CKernelOptions::~CKernelOptions()>
    827c:	e284000c 	add	r0, r4, #12
    8280:	eb000966 	bl	a820 <CActLED::~CActLED()>
    8284:	e1a00004 	mov	r0, r4
    8288:	eb002800 	bl	12290 <CMemorySystem::~CMemorySystem()>
    828c:	e1a00004 	mov	r0, r4
    8290:	e8bd8070 	pop	{r4, r5, r6, pc}
    8294:	00016624 	.word	0x00016624

00008298 <CKernel::Run()>:
    8298:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    829c:	e3a09000 	mov	r9, #0
    82a0:	e1a08009 	mov	r8, r9
    82a4:	e24ddb01 	sub	sp, sp, #1024	; 0x400
    82a8:	e280bb83 	add	fp, r0, #134144	; 0x20c00
    82ac:	e24dd004 	sub	sp, sp, #4
    82b0:	e2804b82 	add	r4, r0, #133120	; 0x20800
    82b4:	e2805e8d 	add	r5, r0, #2256	; 0x8d0
    82b8:	e28b3018 	add	r3, fp, #24
    82bc:	e2844ffb 	add	r4, r4, #1004	; 0x3ec
    82c0:	e2855004 	add	r5, r5, #4
    82c4:	e58d3014 	str	r3, [sp, #20]
    82c8:	e1a00004 	mov	r0, r4
    82cc:	eb00229c 	bl	10d44 <CTimer::GetTicks() const>
    82d0:	e3a06000 	mov	r6, #0
    82d4:	e2807f7d 	add	r7, r0, #500	; 0x1f4
    82d8:	e28baf45 	add	sl, fp, #276	; 0x114
    82dc:	e3a02ffa 	mov	r2, #1000	; 0x3e8
    82e0:	e28d1018 	add	r1, sp, #24
    82e4:	e1a00005 	mov	r0, r5
    82e8:	eb001a5f 	bl	ec6c <CSerialDevice::Read(void*, unsigned int)>
    82ec:	e2503000 	subs	r3, r0, #0
    82f0:	da000005 	ble	830c <CKernel::Run()+0x74>
    82f4:	e1a02003 	mov	r2, r3
    82f8:	e28d1018 	add	r1, sp, #24
    82fc:	e1a0000a 	mov	r0, sl
    8300:	e0888003 	add	r8, r8, r3
    8304:	e0866003 	add	r6, r6, r3
    8308:	eb00038e 	bl	9148 <BusRaider::handleSerialRxBuffer(unsigned char const*, int)>
    830c:	e1a00004 	mov	r0, r4
    8310:	eb00228b 	bl	10d44 <CTimer::GetTicks() const>
    8314:	e1500007 	cmp	r0, r7
    8318:	9affffef 	bls	82dc <CKernel::Run()+0x44>
    831c:	e28d0018 	add	r0, sp, #24
    8320:	eb001db7 	bl	fa04 <CString::CString()>
    8324:	e59f3090 	ldr	r3, [pc, #144]	; 83bc <CKernel::Run()+0x124>
    8328:	e3a02003 	mov	r2, #3
    832c:	e59f108c 	ldr	r1, [pc, #140]	; 83c0 <CKernel::Run()+0x128>
    8330:	e59d0014 	ldr	r0, [sp, #20]
    8334:	eb00149c 	bl	d5ac <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8338:	e1a00004 	mov	r0, r4
    833c:	eb002280 	bl	10d44 <CTimer::GetTicks() const>
    8340:	e2899001 	add	r9, r9, #1
    8344:	e3a03003 	mov	r3, #3
    8348:	e1a02009 	mov	r2, r9
    834c:	e59f1070 	ldr	r1, [pc, #112]	; 83c4 <CKernel::Run()+0x12c>
    8350:	e58d0008 	str	r0, [sp, #8]
    8354:	e88d0140 	stm	sp, {r6, r8}
    8358:	e28d0018 	add	r0, sp, #24
    835c:	eb002196 	bl	109bc <CString::Format(char const*, ...)>
    8360:	e28d0018 	add	r0, sp, #24
    8364:	eb001dbc 	bl	fa5c <CString::operator char const*() const>
    8368:	e1a06000 	mov	r6, r0
    836c:	e28d0018 	add	r0, sp, #24
    8370:	eb001de7 	bl	fb14 <CString::GetLength() const>
    8374:	e1a01006 	mov	r1, r6
    8378:	e1a02000 	mov	r2, r0
    837c:	e1a00005 	mov	r0, r5
    8380:	eb001c35 	bl	f45c <CSerialDevice::Write(void const*, unsigned int)>
    8384:	e28d0018 	add	r0, sp, #24
    8388:	eb001d6a 	bl	f938 <CString::~CString()>
    838c:	e3590003 	cmp	r9, #3
    8390:	1affffcc 	bne	82c8 <CKernel::Run()+0x30>
    8394:	e3a0200b 	mov	r2, #11
    8398:	e59f1028 	ldr	r1, [pc, #40]	; 83c8 <CKernel::Run()+0x130>
    839c:	e1a00005 	mov	r0, r5
    83a0:	eb001c2d 	bl	f45c <CSerialDevice::Write(void const*, unsigned int)>
    83a4:	e3a00ffa 	mov	r0, #1000	; 0x3e8
    83a8:	eb0024f3 	bl	1177c <CTimer::SimpleMsDelay(unsigned int)>
    83ac:	e3a00002 	mov	r0, #2
    83b0:	e28ddb01 	add	sp, sp, #1024	; 0x400
    83b4:	e28dd004 	add	sp, sp, #4
    83b8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    83bc:	00013f94 	.word	0x00013f94
    83c0:	00013f8c 	.word	0x00013f8c
    83c4:	00013fa0 	.word	0x00013fa0
    83c8:	00013fe4 	.word	0x00013fe4

000083cc <CRdSerialDevice::Read(void*, unsigned int)>:
    83cc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    83d0:	e2516000 	subs	r6, r1, #0
    83d4:	e1a04000 	mov	r4, r0
    83d8:	e1a05002 	mov	r5, r2
    83dc:	0a000059 	beq	8548 <CRdSerialDevice::Read(void*, unsigned int)+0x17c>
    83e0:	e59430a4 	ldr	r3, [r4, #164]	; 0xa4
    83e4:	e3530000 	cmp	r3, #0
    83e8:	0a000033 	beq	84bc <CRdSerialDevice::Read(void*, unsigned int)+0xf0>
    83ec:	e2847a01 	add	r7, r4, #4096	; 0x1000
    83f0:	e59700d0 	ldr	r0, [r7, #208]	; 0xd0
    83f4:	e3500000 	cmp	r0, #0
    83f8:	1a00002a 	bne	84a8 <CRdSerialDevice::Read(void*, unsigned int)+0xdc>
    83fc:	e59438b4 	ldr	r3, [r4, #2228]	; 0x8b4
    8400:	e3530000 	cmp	r3, #0
    8404:	ba00001f 	blt	8488 <CRdSerialDevice::Read(void*, unsigned int)+0xbc>
    8408:	e3550000 	cmp	r5, #0
    840c:	0a000020 	beq	8494 <CRdSerialDevice::Read(void*, unsigned int)+0xc8>
    8410:	e59438ac 	ldr	r3, [r4, #2220]	; 0x8ac
    8414:	e59428b0 	ldr	r2, [r4, #2224]	; 0x8b0
    8418:	e1520003 	cmp	r2, r3
    841c:	0a000054 	beq	8574 <CRdSerialDevice::Read(void*, unsigned int)+0x1a8>
    8420:	e0862005 	add	r2, r6, r5
    8424:	e1a01006 	mov	r1, r6
    8428:	e59fc154 	ldr	ip, [pc, #340]	; 8584 <CRdSerialDevice::Read(void*, unsigned int)+0x1b8>
    842c:	ea000003 	b	8440 <CRdSerialDevice::Read(void*, unsigned int)+0x74>
    8430:	e59408ac 	ldr	r0, [r4, #2220]	; 0x8ac
    8434:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
    8438:	e1500003 	cmp	r0, r3
    843c:	0a000014 	beq	8494 <CRdSerialDevice::Read(void*, unsigned int)+0xc8>
    8440:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
    8444:	e2830001 	add	r0, r3, #1
    8448:	e58408b0 	str	r0, [r4, #2224]	; 0x8b0
    844c:	e0843003 	add	r3, r4, r3
    8450:	e5d330aa 	ldrb	r3, [r3, #170]	; 0xaa
    8454:	e4c13001 	strb	r3, [r1], #1
    8458:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
    845c:	e1510002 	cmp	r1, r2
    8460:	e003300c 	and	r3, r3, ip
    8464:	e58438b0 	str	r3, [r4, #2224]	; 0x8b0
    8468:	e0415006 	sub	r5, r1, r6
    846c:	1affffef 	bne	8430 <CRdSerialDevice::Read(void*, unsigned int)+0x64>
    8470:	e59730d0 	ldr	r3, [r7, #208]	; 0xd0
    8474:	e3530000 	cmp	r3, #0
    8478:	0a000008 	beq	84a0 <CRdSerialDevice::Read(void*, unsigned int)+0xd4>
    847c:	eb002897 	bl	126e0 <LeaveCritical>
    8480:	e1a00005 	mov	r0, r5
    8484:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8488:	e3a03000 	mov	r3, #0
    848c:	e59458b4 	ldr	r5, [r4, #2228]	; 0x8b4
    8490:	e58438b4 	str	r3, [r4, #2228]	; 0x8b4
    8494:	e59730d0 	ldr	r3, [r7, #208]	; 0xd0
    8498:	e3530000 	cmp	r3, #0
    849c:	1afffff6 	bne	847c <CRdSerialDevice::Read(void*, unsigned int)+0xb0>
    84a0:	e1a00005 	mov	r0, r5
    84a4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    84a8:	eb00285f 	bl	1262c <EnterCritical>
    84ac:	e59438b4 	ldr	r3, [r4, #2228]	; 0x8b4
    84b0:	e3530000 	cmp	r3, #0
    84b4:	aaffffd3 	bge	8408 <CRdSerialDevice::Read(void*, unsigned int)+0x3c>
    84b8:	eafffff2 	b	8488 <CRdSerialDevice::Read(void*, unsigned int)+0xbc>
    84bc:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    84c0:	e3550000 	cmp	r5, #0
    84c4:	0a00001b 	beq	8538 <CRdSerialDevice::Read(void*, unsigned int)+0x16c>
    84c8:	e59f00b8 	ldr	r0, [pc, #184]	; 8588 <CRdSerialDevice::Read(void*, unsigned int)+0x1bc>
    84cc:	e5902018 	ldr	r2, [r0, #24]
    84d0:	e3120010 	tst	r2, #16
    84d4:	1a000028 	bne	857c <CRdSerialDevice::Read(void*, unsigned int)+0x1b0>
    84d8:	e5903000 	ldr	r3, [r0]
    84dc:	e3130b01 	tst	r3, #1024	; 0x400
    84e0:	1a00001d 	bne	855c <CRdSerialDevice::Read(void*, unsigned int)+0x190>
    84e4:	e3130b02 	tst	r3, #2048	; 0x800
    84e8:	1a00001d 	bne	8564 <CRdSerialDevice::Read(void*, unsigned int)+0x198>
    84ec:	e3130c01 	tst	r3, #256	; 0x100
    84f0:	00862005 	addeq	r2, r6, r5
    84f4:	01a01006 	moveq	r1, r6
    84f8:	0a00000a 	beq	8528 <CRdSerialDevice::Read(void*, unsigned int)+0x15c>
    84fc:	ea00001a 	b	856c <CRdSerialDevice::Read(void*, unsigned int)+0x1a0>
    8500:	e5903018 	ldr	r3, [r0, #24]
    8504:	e3130010 	tst	r3, #16
    8508:	1a00000a 	bne	8538 <CRdSerialDevice::Read(void*, unsigned int)+0x16c>
    850c:	e5903000 	ldr	r3, [r0]
    8510:	e3130b01 	tst	r3, #1024	; 0x400
    8514:	1a000010 	bne	855c <CRdSerialDevice::Read(void*, unsigned int)+0x190>
    8518:	e3130b02 	tst	r3, #2048	; 0x800
    851c:	1a000010 	bne	8564 <CRdSerialDevice::Read(void*, unsigned int)+0x198>
    8520:	e3130c01 	tst	r3, #256	; 0x100
    8524:	1a000010 	bne	856c <CRdSerialDevice::Read(void*, unsigned int)+0x1a0>
    8528:	e4c13001 	strb	r3, [r1], #1
    852c:	e1510002 	cmp	r1, r2
    8530:	e0415006 	sub	r5, r1, r6
    8534:	1afffff1 	bne	8500 <CRdSerialDevice::Read(void*, unsigned int)+0x134>
    8538:	e3a03000 	mov	r3, #0
    853c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    8540:	e1a00005 	mov	r0, r5
    8544:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8548:	e59f203c 	ldr	r2, [pc, #60]	; 858c <CRdSerialDevice::Read(void*, unsigned int)+0x1c0>
    854c:	e59f103c 	ldr	r1, [pc, #60]	; 8590 <CRdSerialDevice::Read(void*, unsigned int)+0x1c4>
    8550:	e59f003c 	ldr	r0, [pc, #60]	; 8594 <CRdSerialDevice::Read(void*, unsigned int)+0x1c8>
    8554:	eb000942 	bl	aa64 <assertion_failed>
    8558:	eaffffa0 	b	83e0 <CRdSerialDevice::Read(void*, unsigned int)+0x14>
    855c:	e3e05000 	mvn	r5, #0
    8560:	eafffff4 	b	8538 <CRdSerialDevice::Read(void*, unsigned int)+0x16c>
    8564:	e3e05001 	mvn	r5, #1
    8568:	eafffff2 	b	8538 <CRdSerialDevice::Read(void*, unsigned int)+0x16c>
    856c:	e3e05002 	mvn	r5, #2
    8570:	eafffff0 	b	8538 <CRdSerialDevice::Read(void*, unsigned int)+0x16c>
    8574:	e3a05000 	mov	r5, #0
    8578:	eaffffc5 	b	8494 <CRdSerialDevice::Read(void*, unsigned int)+0xc8>
    857c:	e1a05003 	mov	r5, r3
    8580:	eaffffec 	b	8538 <CRdSerialDevice::Read(void*, unsigned int)+0x16c>
    8584:	000007ff 	.word	0x000007ff
    8588:	20201000 	.word	0x20201000
    858c:	00000101 	.word	0x00000101
    8590:	0001400c 	.word	0x0001400c
    8594:	00014020 	.word	0x00014020

00008598 <CRdSerialDevice::CRdSerialDevice(CInterruptSystem*, bool)>:
    8598:	e92d4070 	push	{r4, r5, r6, lr}
    859c:	e1a04000 	mov	r4, r0
    85a0:	e1a05002 	mov	r5, r2
    85a4:	e1a06001 	mov	r6, r1
    85a8:	eb000a6b 	bl	af5c <CDevice::CDevice()>
    85ac:	e1a00004 	mov	r0, r4
    85b0:	e3a03000 	mov	r3, #0
    85b4:	e59f1098 	ldr	r1, [pc, #152]	; 8654 <CRdSerialDevice::CRdSerialDevice(CInterruptSystem*, bool)+0xbc>
    85b8:	e1a02003 	mov	r2, r3
    85bc:	e4801004 	str	r1, [r0], #4
    85c0:	e3a01020 	mov	r1, #32
    85c4:	eb000ed2 	bl	c114 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    85c8:	e3a03000 	mov	r3, #0
    85cc:	e284002c 	add	r0, r4, #44	; 0x2c
    85d0:	e1a02003 	mov	r2, r3
    85d4:	e3a01021 	mov	r1, #33	; 0x21
    85d8:	eb000ecd 	bl	c114 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    85dc:	e2840054 	add	r0, r4, #84	; 0x54
    85e0:	e3a03000 	mov	r3, #0
    85e4:	e3a02004 	mov	r2, #4
    85e8:	e3a0100e 	mov	r1, #14
    85ec:	eb000ec8 	bl	c114 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    85f0:	e284007c 	add	r0, r4, #124	; 0x7c
    85f4:	e3a03000 	mov	r3, #0
    85f8:	e3a02004 	mov	r2, #4
    85fc:	e3a0100f 	mov	r1, #15
    8600:	eb000ec3 	bl	c114 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    8604:	e3550000 	cmp	r5, #0
    8608:	e3a03000 	mov	r3, #0
    860c:	e3a01001 	mov	r1, #1
    8610:	13a0c002 	movne	ip, #2
    8614:	03a0c001 	moveq	ip, #1
    8618:	e2842a01 	add	r2, r4, #4096	; 0x1000
    861c:	e58438ac 	str	r3, [r4, #2220]	; 0x8ac
    8620:	e58460a4 	str	r6, [r4, #164]	; 0xa4
    8624:	e58438b0 	str	r3, [r4, #2224]	; 0x8b0
    8628:	e5c450a8 	strb	r5, [r4, #168]	; 0xa8
    862c:	e5c430a9 	strb	r3, [r4, #169]	; 0xa9
    8630:	e58438b4 	str	r3, [r4, #2228]	; 0x8b4
    8634:	e1a00004 	mov	r0, r4
    8638:	e58230b8 	str	r3, [r2, #184]	; 0xb8
    863c:	e582c0d0 	str	ip, [r2, #208]	; 0xd0
    8640:	e58230c4 	str	r3, [r2, #196]	; 0xc4
    8644:	e58230bc 	str	r3, [r2, #188]	; 0xbc
    8648:	e58210c0 	str	r1, [r2, #192]	; 0xc0
    864c:	e58210d4 	str	r1, [r2, #212]	; 0xd4
    8650:	e8bd8070 	pop	{r4, r5, r6, pc}
    8654:	00013ff8 	.word	0x00013ff8

00008658 <CRdSerialDevice::Initialize(unsigned int)>:
    8658:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    865c:	e1a08001 	mov	r8, r1
    8660:	e1a04000 	mov	r4, r0
    8664:	eb0014e4 	bl	d9fc <CMachineInfo::Get()>
    8668:	e3a01002 	mov	r1, #2
    866c:	eb001482 	bl	d87c <CMachineInfo::GetClockRate(unsigned int) const>
    8670:	e2505000 	subs	r5, r0, #0
    8674:	e2487f4b 	sub	r7, r8, #300	; 0x12c
    8678:	e1a06208 	lsl	r6, r8, #4
    867c:	0a000045 	beq	8798 <CRdSerialDevice::Initialize(unsigned int)+0x140>
    8680:	e59f3158 	ldr	r3, [pc, #344]	; 87e0 <CRdSerialDevice::Initialize(unsigned int)+0x188>
    8684:	e1570003 	cmp	r7, r3
    8688:	8a00003d 	bhi	8784 <CRdSerialDevice::Initialize(unsigned int)+0x12c>
    868c:	e1a01006 	mov	r1, r6
    8690:	e1a00005 	mov	r0, r5
    8694:	eb00081b 	bl	a708 <__udivsi3>
    8698:	e59f3144 	ldr	r3, [pc, #324]	; 87e4 <CRdSerialDevice::Initialize(unsigned int)+0x18c>
    869c:	e2402001 	sub	r2, r0, #1
    86a0:	e1520003 	cmp	r2, r3
    86a4:	e1a07000 	mov	r7, r0
    86a8:	8a000042 	bhi	87b8 <CRdSerialDevice::Initialize(unsigned int)+0x160>
    86ac:	e1a00005 	mov	r0, r5
    86b0:	e1a01006 	mov	r1, r6
    86b4:	eb000850 	bl	a7fc <__aeabi_uidivmod>
    86b8:	e1a00181 	lsl	r0, r1, #3
    86bc:	e1a01008 	mov	r1, r8
    86c0:	eb000810 	bl	a708 <__udivsi3>
    86c4:	e2005001 	and	r5, r0, #1
    86c8:	e08550a0 	add	r5, r5, r0, lsr #1
    86cc:	e355003f 	cmp	r5, #63	; 0x3f
    86d0:	8a00003d 	bhi	87cc <CRdSerialDevice::Initialize(unsigned int)+0x174>
    86d4:	e59400a4 	ldr	r0, [r4, #164]	; 0xa4
    86d8:	e3500000 	cmp	r0, #0
    86dc:	0a000008 	beq	8704 <CRdSerialDevice::Initialize(unsigned int)+0xac>
    86e0:	e5d430a8 	ldrb	r3, [r4, #168]	; 0xa8
    86e4:	e59f20fc 	ldr	r2, [pc, #252]	; 87e8 <CRdSerialDevice::Initialize(unsigned int)+0x190>
    86e8:	e3530000 	cmp	r3, #0
    86ec:	e3a01039 	mov	r1, #57	; 0x39
    86f0:	e1a03004 	mov	r3, r4
    86f4:	0a000020 	beq	877c <CRdSerialDevice::Initialize(unsigned int)+0x124>
    86f8:	eb000fd6 	bl	c658 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>
    86fc:	e3a03001 	mov	r3, #1
    8700:	e5c430a9 	strb	r3, [r4, #169]	; 0xa9
    8704:	e3a02000 	mov	r2, #0
    8708:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
    870c:	e59f30d8 	ldr	r3, [pc, #216]	; 87ec <CRdSerialDevice::Initialize(unsigned int)+0x194>
    8710:	e59f10d8 	ldr	r1, [pc, #216]	; 87f0 <CRdSerialDevice::Initialize(unsigned int)+0x198>
    8714:	e5832038 	str	r2, [r3, #56]	; 0x38
    8718:	e5831044 	str	r1, [r3, #68]	; 0x44
    871c:	e5837024 	str	r7, [r3, #36]	; 0x24
    8720:	e5835028 	str	r5, [r3, #40]	; 0x28
    8724:	e59420a4 	ldr	r2, [r4, #164]	; 0xa4
    8728:	e3a05000 	mov	r5, #0
    872c:	e3520000 	cmp	r2, #0
    8730:	13a02e45 	movne	r2, #1104	; 0x450
    8734:	03a02060 	moveq	r2, #96	; 0x60
    8738:	13a00009 	movne	r0, #9
    873c:	13a01070 	movne	r1, #112	; 0x70
    8740:	15830034 	strne	r0, [r3, #52]	; 0x34
    8744:	0583202c 	streq	r2, [r3, #44]	; 0x2c
    8748:	1583102c 	strne	r1, [r3, #44]	; 0x2c
    874c:	15832038 	strne	r2, [r3, #56]	; 0x38
    8750:	e59f3094 	ldr	r3, [pc, #148]	; 87ec <CRdSerialDevice::Initialize(unsigned int)+0x194>
    8754:	e59f2098 	ldr	r2, [pc, #152]	; 87f4 <CRdSerialDevice::Initialize(unsigned int)+0x19c>
    8758:	e5832030 	str	r2, [r3, #48]	; 0x30
    875c:	ee075fba 	mcr	15, 0, r5, cr7, cr10, {5}
    8760:	eb000aee 	bl	b320 <CDeviceNameService::Get()>
    8764:	e1a03005 	mov	r3, r5
    8768:	e1a02004 	mov	r2, r4
    876c:	e59f1084 	ldr	r1, [pc, #132]	; 87f8 <CRdSerialDevice::Initialize(unsigned int)+0x1a0>
    8770:	eb000a2a 	bl	b020 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
    8774:	e3a00001 	mov	r0, #1
    8778:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    877c:	eb000f48 	bl	c4a4 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    8780:	eaffffdd 	b	86fc <CRdSerialDevice::Initialize(unsigned int)+0xa4>
    8784:	e3a0208c 	mov	r2, #140	; 0x8c
    8788:	e59f106c 	ldr	r1, [pc, #108]	; 87fc <CRdSerialDevice::Initialize(unsigned int)+0x1a4>
    878c:	e59f006c 	ldr	r0, [pc, #108]	; 8800 <CRdSerialDevice::Initialize(unsigned int)+0x1a8>
    8790:	eb0008b3 	bl	aa64 <assertion_failed>
    8794:	eaffffbc 	b	868c <CRdSerialDevice::Initialize(unsigned int)+0x34>
    8798:	e3a0208a 	mov	r2, #138	; 0x8a
    879c:	e59f1058 	ldr	r1, [pc, #88]	; 87fc <CRdSerialDevice::Initialize(unsigned int)+0x1a4>
    87a0:	e59f005c 	ldr	r0, [pc, #92]	; 8804 <CRdSerialDevice::Initialize(unsigned int)+0x1ac>
    87a4:	eb0008ae 	bl	aa64 <assertion_failed>
    87a8:	e59f3030 	ldr	r3, [pc, #48]	; 87e0 <CRdSerialDevice::Initialize(unsigned int)+0x188>
    87ac:	e1570003 	cmp	r7, r3
    87b0:	91a07005 	movls	r7, r5
    87b4:	8afffff2 	bhi	8784 <CRdSerialDevice::Initialize(unsigned int)+0x12c>
    87b8:	e3a0208f 	mov	r2, #143	; 0x8f
    87bc:	e59f1038 	ldr	r1, [pc, #56]	; 87fc <CRdSerialDevice::Initialize(unsigned int)+0x1a4>
    87c0:	e59f0040 	ldr	r0, [pc, #64]	; 8808 <CRdSerialDevice::Initialize(unsigned int)+0x1b0>
    87c4:	eb0008a6 	bl	aa64 <assertion_failed>
    87c8:	eaffffb7 	b	86ac <CRdSerialDevice::Initialize(unsigned int)+0x54>
    87cc:	e3a02092 	mov	r2, #146	; 0x92
    87d0:	e59f1024 	ldr	r1, [pc, #36]	; 87fc <CRdSerialDevice::Initialize(unsigned int)+0x1a4>
    87d4:	e59f0030 	ldr	r0, [pc, #48]	; 880c <CRdSerialDevice::Initialize(unsigned int)+0x1b4>
    87d8:	eb0008a1 	bl	aa64 <assertion_failed>
    87dc:	eaffffbc 	b	86d4 <CRdSerialDevice::Initialize(unsigned int)+0x7c>
    87e0:	003d07d4 	.word	0x003d07d4
    87e4:	0000fffe 	.word	0x0000fffe
    87e8:	00008f68 	.word	0x00008f68
    87ec:	20201000 	.word	0x20201000
    87f0:	000007ff 	.word	0x000007ff
    87f4:	00000301 	.word	0x00000301
    87f8:	000140a0 	.word	0x000140a0
    87fc:	0001400c 	.word	0x0001400c
    8800:	0001403c 	.word	0x0001403c
    8804:	0001402c 	.word	0x0001402c
    8808:	00014068 	.word	0x00014068
    880c:	0001408c 	.word	0x0001408c

00008810 <CRdSerialDevice::GetOptions() const>:
    8810:	e2800a01 	add	r0, r0, #4096	; 0x1000
    8814:	e59000c0 	ldr	r0, [r0, #192]	; 0xc0
    8818:	e12fff1e 	bx	lr

0000881c <CRdSerialDevice::SetOptions(unsigned int)>:
    881c:	e2800a01 	add	r0, r0, #4096	; 0x1000
    8820:	e58010c0 	str	r1, [r0, #192]	; 0xc0
    8824:	e12fff1e 	bx	lr

00008828 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())>:
    8828:	e92d4070 	push	{r4, r5, r6, lr}
    882c:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
    8830:	e1a04000 	mov	r4, r0
    8834:	e3530000 	cmp	r3, #0
    8838:	e1a05001 	mov	r5, r1
    883c:	e1a06002 	mov	r6, r2
    8840:	0a00001d 	beq	88bc <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x94>
    8844:	e2844a01 	add	r4, r4, #4096	; 0x1000
    8848:	e59430c4 	ldr	r3, [r4, #196]	; 0xc4
    884c:	e3530000 	cmp	r3, #0
    8850:	0a000003 	beq	8864 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x3c>
    8854:	e59f2088 	ldr	r2, [pc, #136]	; 88e4 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xbc>
    8858:	e59f1088 	ldr	r1, [pc, #136]	; 88e8 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc0>
    885c:	e59f0088 	ldr	r0, [pc, #136]	; 88ec <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc4>
    8860:	eb00087f 	bl	aa64 <assertion_failed>
    8864:	e3550000 	cmp	r5, #0
    8868:	0a000018 	beq	88d0 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xa8>
    886c:	e1d530d0 	ldrsb	r3, [r5]
    8870:	e3530000 	cmp	r3, #0
    8874:	0a000005 	beq	8890 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x68>
    8878:	e3560000 	cmp	r6, #0
    887c:	0a000009 	beq	88a8 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x80>
    8880:	e58460cc 	str	r6, [r4, #204]	; 0xcc
    8884:	e58450c8 	str	r5, [r4, #200]	; 0xc8
    8888:	e58450c4 	str	r5, [r4, #196]	; 0xc4
    888c:	e8bd8070 	pop	{r4, r5, r6, pc}
    8890:	e3a02f57 	mov	r2, #348	; 0x15c
    8894:	e59f104c 	ldr	r1, [pc, #76]	; 88e8 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc0>
    8898:	e59f0050 	ldr	r0, [pc, #80]	; 88f0 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc8>
    889c:	eb000870 	bl	aa64 <assertion_failed>
    88a0:	e3560000 	cmp	r6, #0
    88a4:	1afffff5 	bne	8880 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x58>
    88a8:	e59f2044 	ldr	r2, [pc, #68]	; 88f4 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xcc>
    88ac:	e59f1034 	ldr	r1, [pc, #52]	; 88e8 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc0>
    88b0:	e59f0040 	ldr	r0, [pc, #64]	; 88f8 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xd0>
    88b4:	eb00086a 	bl	aa64 <assertion_failed>
    88b8:	eafffff0 	b	8880 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x58>
    88bc:	e3a02f56 	mov	r2, #344	; 0x158
    88c0:	e59f1020 	ldr	r1, [pc, #32]	; 88e8 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc0>
    88c4:	e59f0030 	ldr	r0, [pc, #48]	; 88fc <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xd4>
    88c8:	eb000865 	bl	aa64 <assertion_failed>
    88cc:	eaffffdc 	b	8844 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x1c>
    88d0:	e59f2028 	ldr	r2, [pc, #40]	; 8900 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xd8>
    88d4:	e59f100c 	ldr	r1, [pc, #12]	; 88e8 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc0>
    88d8:	e59f0024 	ldr	r0, [pc, #36]	; 8904 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xdc>
    88dc:	eb000860 	bl	aa64 <assertion_failed>
    88e0:	eaffffe1 	b	886c <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x44>
    88e4:	00000159 	.word	0x00000159
    88e8:	0001400c 	.word	0x0001400c
    88ec:	000140c0 	.word	0x000140c0
    88f0:	000140dc 	.word	0x000140dc
    88f4:	0000015d 	.word	0x0000015d
    88f8:	00014b84 	.word	0x00014b84
    88fc:	000140a8 	.word	0x000140a8
    8900:	0000015b 	.word	0x0000015b
    8904:	000140d0 	.word	0x000140d0

00008908 <CRdSerialDevice::AvailableForWrite()>:
    8908:	e92d4010 	push	{r4, lr}
    890c:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
    8910:	e1a04000 	mov	r4, r0
    8914:	e3530000 	cmp	r3, #0
    8918:	0a000014 	beq	8970 <CRdSerialDevice::AvailableForWrite()+0x68>
    891c:	e2844a01 	add	r4, r4, #4096	; 0x1000
    8920:	e59400d0 	ldr	r0, [r4, #208]	; 0xd0
    8924:	e3500000 	cmp	r0, #0
    8928:	1a00000d 	bne	8964 <CRdSerialDevice::AvailableForWrite()+0x5c>
    892c:	e59420bc 	ldr	r2, [r4, #188]	; 0xbc
    8930:	e59430b8 	ldr	r3, [r4, #184]	; 0xb8
    8934:	e1520003 	cmp	r2, r3
    8938:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    893c:	e59420b8 	ldr	r2, [r4, #184]	; 0xb8
    8940:	92834e7f 	addls	r4, r3, #2032	; 0x7f0
    8944:	9284400f 	addls	r4, r4, #15
    8948:	82434001 	subhi	r4, r3, #1
    894c:	e3500000 	cmp	r0, #0
    8950:	e0444002 	sub	r4, r4, r2
    8954:	0a000000 	beq	895c <CRdSerialDevice::AvailableForWrite()+0x54>
    8958:	eb002760 	bl	126e0 <LeaveCritical>
    895c:	e1a00004 	mov	r0, r4
    8960:	e8bd8010 	pop	{r4, pc}
    8964:	eb002730 	bl	1262c <EnterCritical>
    8968:	e59400d0 	ldr	r0, [r4, #208]	; 0xd0
    896c:	eaffffee 	b	892c <CRdSerialDevice::AvailableForWrite()+0x24>
    8970:	e59f200c 	ldr	r2, [pc, #12]	; 8984 <CRdSerialDevice::AvailableForWrite()+0x7c>
    8974:	e59f100c 	ldr	r1, [pc, #12]	; 8988 <CRdSerialDevice::AvailableForWrite()+0x80>
    8978:	e59f000c 	ldr	r0, [pc, #12]	; 898c <CRdSerialDevice::AvailableForWrite()+0x84>
    897c:	eb000838 	bl	aa64 <assertion_failed>
    8980:	eaffffe5 	b	891c <CRdSerialDevice::AvailableForWrite()+0x14>
    8984:	00000167 	.word	0x00000167
    8988:	0001400c 	.word	0x0001400c
    898c:	000140a8 	.word	0x000140a8

00008990 <CRdSerialDevice::AvailableForRead()>:
    8990:	e92d4070 	push	{r4, r5, r6, lr}
    8994:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
    8998:	e1a04000 	mov	r4, r0
    899c:	e3530000 	cmp	r3, #0
    89a0:	0a000014 	beq	89f8 <CRdSerialDevice::AvailableForRead()+0x68>
    89a4:	e2845a01 	add	r5, r4, #4096	; 0x1000
    89a8:	e59500d0 	ldr	r0, [r5, #208]	; 0xd0
    89ac:	e3500000 	cmp	r0, #0
    89b0:	1a00000d 	bne	89ec <CRdSerialDevice::AvailableForRead()+0x5c>
    89b4:	e59428ac 	ldr	r2, [r4, #2220]	; 0x8ac
    89b8:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
    89bc:	e1520003 	cmp	r2, r3
    89c0:	e59438ac 	ldr	r3, [r4, #2220]	; 0x8ac
    89c4:	359428b0 	ldrcc	r2, [r4, #2224]	; 0x8b0
    89c8:	259448b0 	ldrcs	r4, [r4, #2224]	; 0x8b0
    89cc:	32834b02 	addcc	r4, r3, #2048	; 0x800
    89d0:	30444002 	subcc	r4, r4, r2
    89d4:	20434004 	subcs	r4, r3, r4
    89d8:	e3500000 	cmp	r0, #0
    89dc:	0a000000 	beq	89e4 <CRdSerialDevice::AvailableForRead()+0x54>
    89e0:	eb00273e 	bl	126e0 <LeaveCritical>
    89e4:	e1a00004 	mov	r0, r4
    89e8:	e8bd8070 	pop	{r4, r5, r6, pc}
    89ec:	eb00270e 	bl	1262c <EnterCritical>
    89f0:	e59500d0 	ldr	r0, [r5, #208]	; 0xd0
    89f4:	eaffffee 	b	89b4 <CRdSerialDevice::AvailableForRead()+0x24>
    89f8:	e3a02f5f 	mov	r2, #380	; 0x17c
    89fc:	e59f1008 	ldr	r1, [pc, #8]	; 8a0c <CRdSerialDevice::AvailableForRead()+0x7c>
    8a00:	e59f0008 	ldr	r0, [pc, #8]	; 8a10 <CRdSerialDevice::AvailableForRead()+0x80>
    8a04:	eb000816 	bl	aa64 <assertion_failed>
    8a08:	eaffffe5 	b	89a4 <CRdSerialDevice::AvailableForRead()+0x14>
    8a0c:	0001400c 	.word	0x0001400c
    8a10:	000140a8 	.word	0x000140a8

00008a14 <CRdSerialDevice::Peek()>:
    8a14:	e92d4070 	push	{r4, r5, r6, lr}
    8a18:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
    8a1c:	e1a04000 	mov	r4, r0
    8a20:	e3530000 	cmp	r3, #0
    8a24:	0a00001b 	beq	8a98 <CRdSerialDevice::Peek()+0x84>
    8a28:	e2845a01 	add	r5, r4, #4096	; 0x1000
    8a2c:	e59500d0 	ldr	r0, [r5, #208]	; 0xd0
    8a30:	e3500000 	cmp	r0, #0
    8a34:	1a000008 	bne	8a5c <CRdSerialDevice::Peek()+0x48>
    8a38:	e59428ac 	ldr	r2, [r4, #2220]	; 0x8ac
    8a3c:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
    8a40:	e1520003 	cmp	r2, r3
    8a44:	0a000018 	beq	8aac <CRdSerialDevice::Peek()+0x98>
    8a48:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
    8a4c:	e0844003 	add	r4, r4, r3
    8a50:	e5d440aa 	ldrb	r4, [r4, #170]	; 0xaa
    8a54:	e1a00004 	mov	r0, r4
    8a58:	e8bd8070 	pop	{r4, r5, r6, pc}
    8a5c:	eb0026f2 	bl	1262c <EnterCritical>
    8a60:	e59428ac 	ldr	r2, [r4, #2220]	; 0x8ac
    8a64:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
    8a68:	e1520003 	cmp	r2, r3
    8a6c:	159438b0 	ldrne	r3, [r4, #2224]	; 0x8b0
    8a70:	059520d0 	ldreq	r2, [r5, #208]	; 0xd0
    8a74:	159520d0 	ldrne	r2, [r5, #208]	; 0xd0
    8a78:	10844003 	addne	r4, r4, r3
    8a7c:	03e04000 	mvneq	r4, #0
    8a80:	15d440aa 	ldrbne	r4, [r4, #170]	; 0xaa
    8a84:	e3520000 	cmp	r2, #0
    8a88:	0afffff1 	beq	8a54 <CRdSerialDevice::Peek()+0x40>
    8a8c:	eb002713 	bl	126e0 <LeaveCritical>
    8a90:	e1a00004 	mov	r0, r4
    8a94:	e8bd8070 	pop	{r4, r5, r6, pc}
    8a98:	e59f2014 	ldr	r2, [pc, #20]	; 8ab4 <CRdSerialDevice::Peek()+0xa0>
    8a9c:	e59f1014 	ldr	r1, [pc, #20]	; 8ab8 <CRdSerialDevice::Peek()+0xa4>
    8aa0:	e59f0014 	ldr	r0, [pc, #20]	; 8abc <CRdSerialDevice::Peek()+0xa8>
    8aa4:	eb0007ee 	bl	aa64 <assertion_failed>
    8aa8:	eaffffde 	b	8a28 <CRdSerialDevice::Peek()+0x14>
    8aac:	e3e04000 	mvn	r4, #0
    8ab0:	eaffffe7 	b	8a54 <CRdSerialDevice::Peek()+0x40>
    8ab4:	00000191 	.word	0x00000191
    8ab8:	0001400c 	.word	0x0001400c
    8abc:	000140a8 	.word	0x000140a8

00008ac0 <CRdSerialDevice::Flush()>:
    8ac0:	e3a03000 	mov	r3, #0
    8ac4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    8ac8:	e59f2010 	ldr	r2, [pc, #16]	; 8ae0 <CRdSerialDevice::Flush()+0x20>
    8acc:	e5923018 	ldr	r3, [r2, #24]
    8ad0:	e2133008 	ands	r3, r3, #8
    8ad4:	1afffffc 	bne	8acc <CRdSerialDevice::Flush()+0xc>
    8ad8:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    8adc:	e12fff1e 	bx	lr
    8ae0:	20201000 	.word	0x20201000

00008ae4 <CRdSerialDevice::Write(unsigned char)>:
    8ae4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8ae8:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
    8aec:	e3530000 	cmp	r3, #0
    8af0:	0a000027 	beq	8b94 <CRdSerialDevice::Write(unsigned char)+0xb0>
    8af4:	e2805a01 	add	r5, r0, #4096	; 0x1000
    8af8:	e59520d0 	ldr	r2, [r5, #208]	; 0xd0
    8afc:	e1a06001 	mov	r6, r1
    8b00:	e3520000 	cmp	r2, #0
    8b04:	e1a04000 	mov	r4, r0
    8b08:	1a000015 	bne	8b64 <CRdSerialDevice::Write(unsigned char)+0x80>
    8b0c:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
    8b10:	e59510bc 	ldr	r1, [r5, #188]	; 0xbc
    8b14:	e2833001 	add	r3, r3, #1
    8b18:	e1a03a83 	lsl	r3, r3, #21
    8b1c:	e1a03aa3 	lsr	r3, r3, #21
    8b20:	e1530001 	cmp	r3, r1
    8b24:	0a000024 	beq	8bbc <CRdSerialDevice::Write(unsigned char)+0xd8>
    8b28:	e3a07001 	mov	r7, #1
    8b2c:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
    8b30:	e0840003 	add	r0, r4, r3
    8b34:	e0833007 	add	r3, r3, r7
    8b38:	e58530b8 	str	r3, [r5, #184]	; 0xb8
    8b3c:	e5c068b8 	strb	r6, [r0, #2232]	; 0x8b8
    8b40:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
    8b44:	e1a03a83 	lsl	r3, r3, #21
    8b48:	e1a03aa3 	lsr	r3, r3, #21
    8b4c:	e58530b8 	str	r3, [r5, #184]	; 0xb8
    8b50:	e3520000 	cmp	r2, #0
    8b54:	0a000000 	beq	8b5c <CRdSerialDevice::Write(unsigned char)+0x78>
    8b58:	eb0026e0 	bl	126e0 <LeaveCritical>
    8b5c:	e1a00007 	mov	r0, r7
    8b60:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8b64:	e1a00002 	mov	r0, r2
    8b68:	eb0026af 	bl	1262c <EnterCritical>
    8b6c:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
    8b70:	e59520bc 	ldr	r2, [r5, #188]	; 0xbc
    8b74:	e2833001 	add	r3, r3, #1
    8b78:	e1a03a83 	lsl	r3, r3, #21
    8b7c:	e1a03aa3 	lsr	r3, r3, #21
    8b80:	e1530002 	cmp	r3, r2
    8b84:	03a07000 	moveq	r7, #0
    8b88:	e59520d0 	ldr	r2, [r5, #208]	; 0xd0
    8b8c:	1affffe5 	bne	8b28 <CRdSerialDevice::Write(unsigned char)+0x44>
    8b90:	eaffffee 	b	8b50 <CRdSerialDevice::Write(unsigned char)+0x6c>
    8b94:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    8b98:	e59f2028 	ldr	r2, [pc, #40]	; 8bc8 <CRdSerialDevice::Write(unsigned char)+0xe4>
    8b9c:	e5923018 	ldr	r3, [r2, #24]
    8ba0:	e2133020 	ands	r3, r3, #32
    8ba4:	1afffffc 	bne	8b9c <CRdSerialDevice::Write(unsigned char)+0xb8>
    8ba8:	e5821000 	str	r1, [r2]
    8bac:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    8bb0:	e3a07001 	mov	r7, #1
    8bb4:	e1a00007 	mov	r0, r7
    8bb8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8bbc:	e1a07002 	mov	r7, r2
    8bc0:	e1a00007 	mov	r0, r7
    8bc4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8bc8:	20201000 	.word	0x20201000

00008bcc <CRdSerialDevice::Write(void const*, unsigned int)>:
    8bcc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8bd0:	e2806a01 	add	r6, r0, #4096	; 0x1000
    8bd4:	e1a07000 	mov	r7, r0
    8bd8:	e59600d4 	ldr	r0, [r6, #212]	; 0xd4
    8bdc:	e1a04001 	mov	r4, r1
    8be0:	e3500000 	cmp	r0, #0
    8be4:	e1a08002 	mov	r8, r2
    8be8:	1a000052 	bne	8d38 <CRdSerialDevice::Write(void const*, unsigned int)+0x16c>
    8bec:	e3540000 	cmp	r4, #0
    8bf0:	0a000053 	beq	8d44 <CRdSerialDevice::Write(void const*, unsigned int)+0x178>
    8bf4:	e3580000 	cmp	r8, #0
    8bf8:	0a00005b 	beq	8d6c <CRdSerialDevice::Write(void const*, unsigned int)+0x1a0>
    8bfc:	e3a05000 	mov	r5, #0
    8c00:	e2444001 	sub	r4, r4, #1
    8c04:	ea000002 	b	8c14 <CRdSerialDevice::Write(void const*, unsigned int)+0x48>
    8c08:	e2855001 	add	r5, r5, #1
    8c0c:	e1550008 	cmp	r5, r8
    8c10:	0a00000f 	beq	8c54 <CRdSerialDevice::Write(void const*, unsigned int)+0x88>
    8c14:	e5f41001 	ldrb	r1, [r4, #1]!
    8c18:	e1a00007 	mov	r0, r7
    8c1c:	ebffffb0 	bl	8ae4 <CRdSerialDevice::Write(unsigned char)>
    8c20:	e3500000 	cmp	r0, #0
    8c24:	0a00000a 	beq	8c54 <CRdSerialDevice::Write(void const*, unsigned int)+0x88>
    8c28:	e5d43000 	ldrb	r3, [r4]
    8c2c:	e353000a 	cmp	r3, #10
    8c30:	1afffff4 	bne	8c08 <CRdSerialDevice::Write(void const*, unsigned int)+0x3c>
    8c34:	e59630c0 	ldr	r3, [r6, #192]	; 0xc0
    8c38:	e3130001 	tst	r3, #1
    8c3c:	0afffff1 	beq	8c08 <CRdSerialDevice::Write(void const*, unsigned int)+0x3c>
    8c40:	e3a0100d 	mov	r1, #13
    8c44:	e1a00007 	mov	r0, r7
    8c48:	ebffffa5 	bl	8ae4 <CRdSerialDevice::Write(unsigned char)>
    8c4c:	e3500000 	cmp	r0, #0
    8c50:	1affffec 	bne	8c08 <CRdSerialDevice::Write(void const*, unsigned int)+0x3c>
    8c54:	e59630d4 	ldr	r3, [r6, #212]	; 0xd4
    8c58:	e3530000 	cmp	r3, #0
    8c5c:	1a000033 	bne	8d30 <CRdSerialDevice::Write(void const*, unsigned int)+0x164>
    8c60:	e59730a4 	ldr	r3, [r7, #164]	; 0xa4
    8c64:	e3530000 	cmp	r3, #0
    8c68:	0a000028 	beq	8d10 <CRdSerialDevice::Write(void const*, unsigned int)+0x144>
    8c6c:	e59600d0 	ldr	r0, [r6, #208]	; 0xd0
    8c70:	e3500000 	cmp	r0, #0
    8c74:	1a000027 	bne	8d18 <CRdSerialDevice::Write(void const*, unsigned int)+0x14c>
    8c78:	e59630b8 	ldr	r3, [r6, #184]	; 0xb8
    8c7c:	e59620bc 	ldr	r2, [r6, #188]	; 0xbc
    8c80:	e1520003 	cmp	r2, r3
    8c84:	0a000021 	beq	8d10 <CRdSerialDevice::Write(void const*, unsigned int)+0x144>
    8c88:	e3a03000 	mov	r3, #0
    8c8c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    8c90:	e59630b8 	ldr	r3, [r6, #184]	; 0xb8
    8c94:	e59620bc 	ldr	r2, [r6, #188]	; 0xbc
    8c98:	e1520003 	cmp	r2, r3
    8c9c:	0a000015 	beq	8cf8 <CRdSerialDevice::Write(void const*, unsigned int)+0x12c>
    8ca0:	e59f20cc 	ldr	r2, [pc, #204]	; 8d74 <CRdSerialDevice::Write(void const*, unsigned int)+0x1a8>
    8ca4:	e5923018 	ldr	r3, [r2, #24]
    8ca8:	e3130020 	tst	r3, #32
    8cac:	1a000029 	bne	8d58 <CRdSerialDevice::Write(void const*, unsigned int)+0x18c>
    8cb0:	e59f00c0 	ldr	r0, [pc, #192]	; 8d78 <CRdSerialDevice::Write(void const*, unsigned int)+0x1ac>
    8cb4:	ea000002 	b	8cc4 <CRdSerialDevice::Write(void const*, unsigned int)+0xf8>
    8cb8:	e5923018 	ldr	r3, [r2, #24]
    8cbc:	e3130020 	tst	r3, #32
    8cc0:	1a000024 	bne	8d58 <CRdSerialDevice::Write(void const*, unsigned int)+0x18c>
    8cc4:	e59630bc 	ldr	r3, [r6, #188]	; 0xbc
    8cc8:	e2831001 	add	r1, r3, #1
    8ccc:	e58610bc 	str	r1, [r6, #188]	; 0xbc
    8cd0:	e0873003 	add	r3, r7, r3
    8cd4:	e5d338b8 	ldrb	r3, [r3, #2232]	; 0x8b8
    8cd8:	e5823000 	str	r3, [r2]
    8cdc:	e59630bc 	ldr	r3, [r6, #188]	; 0xbc
    8ce0:	e0033000 	and	r3, r3, r0
    8ce4:	e58630bc 	str	r3, [r6, #188]	; 0xbc
    8ce8:	e59610b8 	ldr	r1, [r6, #184]	; 0xb8
    8cec:	e59630bc 	ldr	r3, [r6, #188]	; 0xbc
    8cf0:	e1510003 	cmp	r1, r3
    8cf4:	1affffef 	bne	8cb8 <CRdSerialDevice::Write(void const*, unsigned int)+0xec>
    8cf8:	e3a03000 	mov	r3, #0
    8cfc:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    8d00:	e59630d0 	ldr	r3, [r6, #208]	; 0xd0
    8d04:	e3530000 	cmp	r3, #0
    8d08:	0a000000 	beq	8d10 <CRdSerialDevice::Write(void const*, unsigned int)+0x144>
    8d0c:	eb002673 	bl	126e0 <LeaveCritical>
    8d10:	e1a00005 	mov	r0, r5
    8d14:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8d18:	eb002643 	bl	1262c <EnterCritical>
    8d1c:	e59620b8 	ldr	r2, [r6, #184]	; 0xb8
    8d20:	e59630bc 	ldr	r3, [r6, #188]	; 0xbc
    8d24:	e1520003 	cmp	r2, r3
    8d28:	1affffd6 	bne	8c88 <CRdSerialDevice::Write(void const*, unsigned int)+0xbc>
    8d2c:	eafffff3 	b	8d00 <CRdSerialDevice::Write(void const*, unsigned int)+0x134>
    8d30:	eb00266a 	bl	126e0 <LeaveCritical>
    8d34:	eaffffc9 	b	8c60 <CRdSerialDevice::Write(void const*, unsigned int)+0x94>
    8d38:	eb00263b 	bl	1262c <EnterCritical>
    8d3c:	e3540000 	cmp	r4, #0
    8d40:	1affffab 	bne	8bf4 <CRdSerialDevice::Write(void const*, unsigned int)+0x28>
    8d44:	e3a020c3 	mov	r2, #195	; 0xc3
    8d48:	e59f102c 	ldr	r1, [pc, #44]	; 8d7c <CRdSerialDevice::Write(void const*, unsigned int)+0x1b0>
    8d4c:	e59f002c 	ldr	r0, [pc, #44]	; 8d80 <CRdSerialDevice::Write(void const*, unsigned int)+0x1b4>
    8d50:	eb000743 	bl	aa64 <assertion_failed>
    8d54:	eaffffa6 	b	8bf4 <CRdSerialDevice::Write(void const*, unsigned int)+0x28>
    8d58:	e59f2014 	ldr	r2, [pc, #20]	; 8d74 <CRdSerialDevice::Write(void const*, unsigned int)+0x1a8>
    8d5c:	e5923038 	ldr	r3, [r2, #56]	; 0x38
    8d60:	e3833020 	orr	r3, r3, #32
    8d64:	e5823038 	str	r3, [r2, #56]	; 0x38
    8d68:	eaffffe2 	b	8cf8 <CRdSerialDevice::Write(void const*, unsigned int)+0x12c>
    8d6c:	e1a05008 	mov	r5, r8
    8d70:	eaffffb7 	b	8c54 <CRdSerialDevice::Write(void const*, unsigned int)+0x88>
    8d74:	20201000 	.word	0x20201000
    8d78:	000007ff 	.word	0x000007ff
    8d7c:	0001400c 	.word	0x0001400c
    8d80:	00014020 	.word	0x00014020

00008d84 <CRdSerialDevice::InterruptHandler()>:
    8d84:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    8d88:	e2804a01 	add	r4, r0, #4096	; 0x1000
    8d8c:	e1a05000 	mov	r5, r0
    8d90:	e59400d0 	ldr	r0, [r4, #208]	; 0xd0
    8d94:	e3500000 	cmp	r0, #0
    8d98:	1a00006a 	bne	8f48 <CRdSerialDevice::InterruptHandler()+0x1c4>
    8d9c:	e3a06000 	mov	r6, #0
    8da0:	ee076f9a 	mcr	15, 0, r6, cr7, cr10, {4}
    8da4:	e59f31b4 	ldr	r3, [pc, #436]	; 8f60 <CRdSerialDevice::InterruptHandler()+0x1dc>
    8da8:	e3e07002 	mvn	r7, #2
    8dac:	e1a01003 	mov	r1, r3
    8db0:	e3e0c001 	mvn	ip, #1
    8db4:	e3e0e000 	mvn	lr, #0
    8db8:	e5932040 	ldr	r2, [r3, #64]	; 0x40
    8dbc:	e59f01a0 	ldr	r0, [pc, #416]	; 8f64 <CRdSerialDevice::InterruptHandler()+0x1e0>
    8dc0:	e5832044 	str	r2, [r3, #68]	; 0x44
    8dc4:	e5913018 	ldr	r3, [r1, #24]
    8dc8:	e3130010 	tst	r3, #16
    8dcc:	1a000024 	bne	8e64 <CRdSerialDevice::InterruptHandler()+0xe0>
    8dd0:	e5912000 	ldr	r2, [r1]
    8dd4:	e3120b01 	tst	r2, #1024	; 0x400
    8dd8:	0a000045 	beq	8ef4 <CRdSerialDevice::InterruptHandler()+0x170>
    8ddc:	e59538b4 	ldr	r3, [r5, #2228]	; 0x8b4
    8de0:	e3530000 	cmp	r3, #0
    8de4:	0585e8b4 	streq	lr, [r5, #2228]	; 0x8b4
    8de8:	e59480c4 	ldr	r8, [r4, #196]	; 0xc4
    8dec:	e3580000 	cmp	r8, #0
    8df0:	0a00000a 	beq	8e20 <CRdSerialDevice::InterruptHandler()+0x9c>
    8df4:	e59490c8 	ldr	r9, [r4, #200]	; 0xc8
    8df8:	e6af3072 	sxtb	r3, r2
    8dfc:	e1d9a0d0 	ldrsb	sl, [r9]
    8e00:	e15a0003 	cmp	sl, r3
    8e04:	158480c8 	strne	r8, [r4, #200]	; 0xc8
    8e08:	1a000004 	bne	8e20 <CRdSerialDevice::InterruptHandler()+0x9c>
    8e0c:	e2893001 	add	r3, r9, #1
    8e10:	e58430c8 	str	r3, [r4, #200]	; 0xc8
    8e14:	e1d930d1 	ldrsb	r3, [r9, #1]
    8e18:	e3530000 	cmp	r3, #0
    8e1c:	03a06001 	moveq	r6, #1
    8e20:	e59538ac 	ldr	r3, [r5, #2220]	; 0x8ac
    8e24:	e59588b0 	ldr	r8, [r5, #2224]	; 0x8b0
    8e28:	e2833001 	add	r3, r3, #1
    8e2c:	e0033000 	and	r3, r3, r0
    8e30:	e1530008 	cmp	r3, r8
    8e34:	0a000034 	beq	8f0c <CRdSerialDevice::InterruptHandler()+0x188>
    8e38:	e59538ac 	ldr	r3, [r5, #2220]	; 0x8ac
    8e3c:	e2838001 	add	r8, r3, #1
    8e40:	e0853003 	add	r3, r5, r3
    8e44:	e58588ac 	str	r8, [r5, #2220]	; 0x8ac
    8e48:	e5c320aa 	strb	r2, [r3, #170]	; 0xaa
    8e4c:	e59538ac 	ldr	r3, [r5, #2220]	; 0x8ac
    8e50:	e0033000 	and	r3, r3, r0
    8e54:	e58538ac 	str	r3, [r5, #2220]	; 0x8ac
    8e58:	e5913018 	ldr	r3, [r1, #24]
    8e5c:	e3130010 	tst	r3, #16
    8e60:	0affffda 	beq	8dd0 <CRdSerialDevice::InterruptHandler()+0x4c>
    8e64:	e5913018 	ldr	r3, [r1, #24]
    8e68:	e3130020 	tst	r3, #32
    8e6c:	1a000016 	bne	8ecc <CRdSerialDevice::InterruptHandler()+0x148>
    8e70:	e59430b8 	ldr	r3, [r4, #184]	; 0xb8
    8e74:	e59420bc 	ldr	r2, [r4, #188]	; 0xbc
    8e78:	e1520003 	cmp	r2, r3
    8e7c:	0a00002c 	beq	8f34 <CRdSerialDevice::InterruptHandler()+0x1b0>
    8e80:	e59f20d8 	ldr	r2, [pc, #216]	; 8f60 <CRdSerialDevice::InterruptHandler()+0x1dc>
    8e84:	e59f00d8 	ldr	r0, [pc, #216]	; 8f64 <CRdSerialDevice::InterruptHandler()+0x1e0>
    8e88:	ea000003 	b	8e9c <CRdSerialDevice::InterruptHandler()+0x118>
    8e8c:	e59410b8 	ldr	r1, [r4, #184]	; 0xb8
    8e90:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    8e94:	e1510003 	cmp	r1, r3
    8e98:	0a000025 	beq	8f34 <CRdSerialDevice::InterruptHandler()+0x1b0>
    8e9c:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    8ea0:	e2831001 	add	r1, r3, #1
    8ea4:	e58410bc 	str	r1, [r4, #188]	; 0xbc
    8ea8:	e0853003 	add	r3, r5, r3
    8eac:	e5d338b8 	ldrb	r3, [r3, #2232]	; 0x8b8
    8eb0:	e5823000 	str	r3, [r2]
    8eb4:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    8eb8:	e0033000 	and	r3, r3, r0
    8ebc:	e58430bc 	str	r3, [r4, #188]	; 0xbc
    8ec0:	e5923018 	ldr	r3, [r2, #24]
    8ec4:	e3130020 	tst	r3, #32
    8ec8:	0affffef 	beq	8e8c <CRdSerialDevice::InterruptHandler()+0x108>
    8ecc:	e3a03000 	mov	r3, #0
    8ed0:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    8ed4:	e59430d0 	ldr	r3, [r4, #208]	; 0xd0
    8ed8:	e3530000 	cmp	r3, #0
    8edc:	1a00001b 	bne	8f50 <CRdSerialDevice::InterruptHandler()+0x1cc>
    8ee0:	e3560000 	cmp	r6, #0
    8ee4:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    8ee8:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
    8eec:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    8ef0:	e12fff13 	bx	r3
    8ef4:	e3120b02 	tst	r2, #2048	; 0x800
    8ef8:	0a000007 	beq	8f1c <CRdSerialDevice::InterruptHandler()+0x198>
    8efc:	e59538b4 	ldr	r3, [r5, #2228]	; 0x8b4
    8f00:	e3530000 	cmp	r3, #0
    8f04:	0585c8b4 	streq	ip, [r5, #2228]	; 0x8b4
    8f08:	eaffffb6 	b	8de8 <CRdSerialDevice::InterruptHandler()+0x64>
    8f0c:	e59538b4 	ldr	r3, [r5, #2228]	; 0x8b4
    8f10:	e3530000 	cmp	r3, #0
    8f14:	0585c8b4 	streq	ip, [r5, #2228]	; 0x8b4
    8f18:	eaffffa9 	b	8dc4 <CRdSerialDevice::InterruptHandler()+0x40>
    8f1c:	e3120c01 	tst	r2, #256	; 0x100
    8f20:	0affffb0 	beq	8de8 <CRdSerialDevice::InterruptHandler()+0x64>
    8f24:	e59538b4 	ldr	r3, [r5, #2228]	; 0x8b4
    8f28:	e3530000 	cmp	r3, #0
    8f2c:	058578b4 	streq	r7, [r5, #2228]	; 0x8b4
    8f30:	eaffffac 	b	8de8 <CRdSerialDevice::InterruptHandler()+0x64>
    8f34:	e59f2024 	ldr	r2, [pc, #36]	; 8f60 <CRdSerialDevice::InterruptHandler()+0x1dc>
    8f38:	e5923038 	ldr	r3, [r2, #56]	; 0x38
    8f3c:	e3c33020 	bic	r3, r3, #32
    8f40:	e5823038 	str	r3, [r2, #56]	; 0x38
    8f44:	eaffffe0 	b	8ecc <CRdSerialDevice::InterruptHandler()+0x148>
    8f48:	eb0025b7 	bl	1262c <EnterCritical>
    8f4c:	eaffff92 	b	8d9c <CRdSerialDevice::InterruptHandler()+0x18>
    8f50:	eb0025e2 	bl	126e0 <LeaveCritical>
    8f54:	e3560000 	cmp	r6, #0
    8f58:	1affffe2 	bne	8ee8 <CRdSerialDevice::InterruptHandler()+0x164>
    8f5c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    8f60:	20201000 	.word	0x20201000
    8f64:	000007ff 	.word	0x000007ff

00008f68 <CRdSerialDevice::InterruptStub(void*)>:
    8f68:	e92d4010 	push	{r4, lr}
    8f6c:	e2504000 	subs	r4, r0, #0
    8f70:	0a000002 	beq	8f80 <CRdSerialDevice::InterruptStub(void*)+0x18>
    8f74:	e1a00004 	mov	r0, r4
    8f78:	e8bd4010 	pop	{r4, lr}
    8f7c:	eaffff80 	b	8d84 <CRdSerialDevice::InterruptHandler()>
    8f80:	e59f0014 	ldr	r0, [pc, #20]	; 8f9c <CRdSerialDevice::InterruptStub(void*)+0x34>
    8f84:	e59f2014 	ldr	r2, [pc, #20]	; 8fa0 <CRdSerialDevice::InterruptStub(void*)+0x38>
    8f88:	e59f1014 	ldr	r1, [pc, #20]	; 8fa4 <CRdSerialDevice::InterruptStub(void*)+0x3c>
    8f8c:	eb0006b4 	bl	aa64 <assertion_failed>
    8f90:	e1a00004 	mov	r0, r4
    8f94:	e8bd4010 	pop	{r4, lr}
    8f98:	eaffff79 	b	8d84 <CRdSerialDevice::InterruptHandler()>
    8f9c:	000140ec 	.word	0x000140ec
    8fa0:	0000022e 	.word	0x0000022e
    8fa4:	0001400c 	.word	0x0001400c

00008fa8 <CRdSerialDevice::~CRdSerialDevice()>:
    8fa8:	e59f20a4 	ldr	r2, [pc, #164]	; 9054 <CRdSerialDevice::~CRdSerialDevice()+0xac>
    8fac:	e92d4010 	push	{r4, lr}
    8fb0:	e3a03000 	mov	r3, #0
    8fb4:	e1a04000 	mov	r4, r0
    8fb8:	e5802000 	str	r2, [r0]
    8fbc:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    8fc0:	e59f2090 	ldr	r2, [pc, #144]	; 9058 <CRdSerialDevice::~CRdSerialDevice()+0xb0>
    8fc4:	e5823038 	str	r3, [r2, #56]	; 0x38
    8fc8:	e5823030 	str	r3, [r2, #48]	; 0x30
    8fcc:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    8fd0:	e5d030a9 	ldrb	r3, [r0, #169]	; 0xa9
    8fd4:	e3530000 	cmp	r3, #0
    8fd8:	0a000006 	beq	8ff8 <CRdSerialDevice::~CRdSerialDevice()+0x50>
    8fdc:	e59000a4 	ldr	r0, [r0, #164]	; 0xa4
    8fe0:	e3500000 	cmp	r0, #0
    8fe4:	0a000014 	beq	903c <CRdSerialDevice::~CRdSerialDevice()+0x94>
    8fe8:	e5d430a8 	ldrb	r3, [r4, #168]	; 0xa8
    8fec:	e3530000 	cmp	r3, #0
    8ff0:	0a00000e 	beq	9030 <CRdSerialDevice::~CRdSerialDevice()+0x88>
    8ff4:	eb000cea 	bl	c3a4 <CInterruptSystem::DisconnectFIQ()>
    8ff8:	e3a03000 	mov	r3, #0
    8ffc:	e284007c 	add	r0, r4, #124	; 0x7c
    9000:	e58430a4 	str	r3, [r4, #164]	; 0xa4
    9004:	eb000965 	bl	b5a0 <CGPIOPin::~CGPIOPin()>
    9008:	e2840054 	add	r0, r4, #84	; 0x54
    900c:	eb000963 	bl	b5a0 <CGPIOPin::~CGPIOPin()>
    9010:	e284002c 	add	r0, r4, #44	; 0x2c
    9014:	eb000961 	bl	b5a0 <CGPIOPin::~CGPIOPin()>
    9018:	e2840004 	add	r0, r4, #4
    901c:	eb00095f 	bl	b5a0 <CGPIOPin::~CGPIOPin()>
    9020:	e1a00004 	mov	r0, r4
    9024:	eb0007c0 	bl	af2c <CDevice::~CDevice()>
    9028:	e1a00004 	mov	r0, r4
    902c:	e8bd8010 	pop	{r4, pc}
    9030:	e3a01039 	mov	r1, #57	; 0x39
    9034:	eb000d55 	bl	c590 <CInterruptSystem::DisconnectIRQ(unsigned int)>
    9038:	eaffffee 	b	8ff8 <CRdSerialDevice::~CRdSerialDevice()+0x50>
    903c:	e59f0018 	ldr	r0, [pc, #24]	; 905c <CRdSerialDevice::~CRdSerialDevice()+0xb4>
    9040:	e3a02079 	mov	r2, #121	; 0x79
    9044:	e59f1014 	ldr	r1, [pc, #20]	; 9060 <CRdSerialDevice::~CRdSerialDevice()+0xb8>
    9048:	eb000685 	bl	aa64 <assertion_failed>
    904c:	e59400a4 	ldr	r0, [r4, #164]	; 0xa4
    9050:	eaffffe4 	b	8fe8 <CRdSerialDevice::~CRdSerialDevice()+0x40>
    9054:	00013ff8 	.word	0x00013ff8
    9058:	20201000 	.word	0x20201000
    905c:	000140a8 	.word	0x000140a8
    9060:	0001400c 	.word	0x0001400c

00009064 <CRdSerialDevice::~CRdSerialDevice()>:
    9064:	e92d4010 	push	{r4, lr}
    9068:	e1a04000 	mov	r4, r0
    906c:	ebffffcd 	bl	8fa8 <CRdSerialDevice::~CRdSerialDevice()>
    9070:	e1a00004 	mov	r0, r4
    9074:	e59f1008 	ldr	r1, [pc, #8]	; 9084 <CRdSerialDevice::~CRdSerialDevice()+0x20>
    9078:	eb0025c9 	bl	127a4 <operator delete(void*, unsigned int)>
    907c:	e1a00004 	mov	r0, r4
    9080:	e8bd8010 	pop	{r4, pc}
    9084:	000010d8 	.word	0x000010d8

00009088 <BusRaider::static_putBytesToSerial(unsigned char const*, int)>:
    9088:	e12fff1e 	bx	lr

0000908c <BusRaider::static_doChangeMachine(char const*)>:
    908c:	e59f201c 	ldr	r2, [pc, #28]	; 90b0 <BusRaider::static_doChangeMachine(char const*)+0x24>
    9090:	e5922000 	ldr	r2, [r2]
    9094:	e3520000 	cmp	r2, #0
    9098:	012fff1e 	bxeq	lr
    909c:	e1a03000 	mov	r3, r0
    90a0:	e59f200c 	ldr	r2, [pc, #12]	; 90b4 <BusRaider::static_doChangeMachine(char const*)+0x28>
    90a4:	e3a01003 	mov	r1, #3
    90a8:	e59f0008 	ldr	r0, [pc, #8]	; 90b8 <BusRaider::static_doChangeMachine(char const*)+0x2c>
    90ac:	ea000026 	b	914c <LogWrite(char const*, unsigned int, char const*, ...)>
    90b0:	00016628 	.word	0x00016628
    90b4:	00014104 	.word	0x00014104
    90b8:	000140f8 	.word	0x000140f8

000090bc <BusRaider::BusRaider()>:
    90bc:	e92d4010 	push	{r4, lr}
    90c0:	e1a04000 	mov	r4, r0
    90c4:	eb00032b 	bl	9d78 <CommandHandler::CommandHandler()>
    90c8:	e59f0020 	ldr	r0, [pc, #32]	; 90f0 <BusRaider::BusRaider()+0x34>
    90cc:	e59f1020 	ldr	r1, [pc, #32]	; 90f4 <BusRaider::BusRaider()+0x38>
    90d0:	e59fc020 	ldr	ip, [pc, #32]	; 90f8 <BusRaider::BusRaider()+0x3c>
    90d4:	e59f3020 	ldr	r3, [pc, #32]	; 90fc <BusRaider::BusRaider()+0x40>
    90d8:	e59f2020 	ldr	r2, [pc, #32]	; 9100 <BusRaider::BusRaider()+0x44>
    90dc:	e5804000 	str	r4, [r0]
    90e0:	e581c000 	str	ip, [r1]
    90e4:	e1a00004 	mov	r0, r4
    90e8:	e5832000 	str	r2, [r3]
    90ec:	e8bd8010 	pop	{r4, pc}
    90f0:	00016628 	.word	0x00016628
    90f4:	00016630 	.word	0x00016630
    90f8:	00009088 	.word	0x00009088
    90fc:	00016634 	.word	0x00016634
    9100:	0000908c 	.word	0x0000908c

00009104 <BusRaider::~BusRaider()>:
    9104:	e92d4010 	push	{r4, lr}
    9108:	e3a02000 	mov	r2, #0
    910c:	e1a04000 	mov	r4, r0
    9110:	e59f300c 	ldr	r3, [pc, #12]	; 9124 <BusRaider::~BusRaider()+0x20>
    9114:	e5832000 	str	r2, [r3]
    9118:	eb000331 	bl	9de4 <CommandHandler::~CommandHandler()>
    911c:	e1a00004 	mov	r0, r4
    9120:	e8bd8010 	pop	{r4, pc}
    9124:	00016628 	.word	0x00016628

00009128 <BusRaider::putBytesToSerial(unsigned char const*, int)>:
    9128:	e12fff1e 	bx	lr

0000912c <BusRaider::doChangeMachine(char const*)>:
    912c:	e1a03001 	mov	r3, r1
    9130:	e59f2008 	ldr	r2, [pc, #8]	; 9140 <BusRaider::doChangeMachine(char const*)+0x14>
    9134:	e3a01003 	mov	r1, #3
    9138:	e59f0004 	ldr	r0, [pc, #4]	; 9144 <BusRaider::doChangeMachine(char const*)+0x18>
    913c:	ea000002 	b	914c <LogWrite(char const*, unsigned int, char const*, ...)>
    9140:	00014104 	.word	0x00014104
    9144:	000140f8 	.word	0x000140f8

00009148 <BusRaider::handleSerialRxBuffer(unsigned char const*, int)>:
    9148:	ea000326 	b	9de8 <CommandHandler::handleBuffer(unsigned char const*, int)>

0000914c <LogWrite(char const*, unsigned int, char const*, ...)>:
    914c:	e92d000c 	push	{r2, r3}
    9150:	e92d4030 	push	{r4, r5, lr}
    9154:	e24dd014 	sub	sp, sp, #20
    9158:	e1a05000 	mov	r5, r0
    915c:	e1a04001 	mov	r4, r1
    9160:	eb000f68 	bl	cf08 <CLogger::Get()>
    9164:	e3500000 	cmp	r0, #0
    9168:	0a00000d 	beq	91a4 <LogWrite(char const*, unsigned int, char const*, ...)+0x58>
    916c:	e2441002 	sub	r1, r4, #2
    9170:	e3510002 	cmp	r1, #2
    9174:	83a04001 	movhi	r4, #1
    9178:	959f3034 	ldrls	r3, [pc, #52]	; 91b4 <LogWrite(char const*, unsigned int, char const*, ...)+0x68>
    917c:	97d34001 	ldrbls	r4, [r3, r1]
    9180:	e28d3024 	add	r3, sp, #36	; 0x24
    9184:	e58d300c 	str	r3, [sp, #12]
    9188:	eb000f5e 	bl	cf08 <CLogger::Get()>
    918c:	e59d300c 	ldr	r3, [sp, #12]
    9190:	e1a02004 	mov	r2, r4
    9194:	e58d3000 	str	r3, [sp]
    9198:	e1a01005 	mov	r1, r5
    919c:	e59d3020 	ldr	r3, [sp, #32]
    91a0:	eb001084 	bl	d3b8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
    91a4:	e28dd014 	add	sp, sp, #20
    91a8:	e8bd4030 	pop	{r4, r5, lr}
    91ac:	e28dd008 	add	sp, sp, #8
    91b0:	e12fff1e 	bx	lr
    91b4:	0001411c 	.word	0x0001411c

000091b8 <strlcat(char*, char const*, unsigned int)>:
    91b8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    91bc:	e1a04002 	mov	r4, r2
    91c0:	e1a07001 	mov	r7, r1
    91c4:	e1a06000 	mov	r6, r0
    91c8:	eb0021d3 	bl	1191c <strlen>
    91cc:	e2442001 	sub	r2, r4, #1
    91d0:	e0524000 	subs	r4, r2, r0
    91d4:	e1a05000 	mov	r5, r0
    91d8:	0a00000a 	beq	9208 <strlcat(char*, char const*, unsigned int)+0x50>
    91dc:	e1a00007 	mov	r0, r7
    91e0:	eb0021cd 	bl	1191c <strlen>
    91e4:	e1540000 	cmp	r4, r0
    91e8:	21a04000 	movcs	r4, r0
    91ec:	e1a01007 	mov	r1, r7
    91f0:	e0860005 	add	r0, r6, r5
    91f4:	e1a02004 	mov	r2, r4
    91f8:	eb002319 	bl	11e64 <memcpy>
    91fc:	e3a03000 	mov	r3, #0
    9200:	e0855004 	add	r5, r5, r4
    9204:	e7c63005 	strb	r3, [r6, r5]
    9208:	e1a00005 	mov	r0, r5
    920c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00009210 <strlcpy(char*, char const*, unsigned int)>:
    9210:	e92d4070 	push	{r4, r5, r6, lr}
    9214:	e1a05000 	mov	r5, r0
    9218:	e1a04002 	mov	r4, r2
    921c:	e1a00001 	mov	r0, r1
    9220:	e1a06001 	mov	r6, r1
    9224:	eb0021bc 	bl	1191c <strlen>
    9228:	e2444001 	sub	r4, r4, #1
    922c:	e1540000 	cmp	r4, r0
    9230:	21a04000 	movcs	r4, r0
    9234:	e1a01006 	mov	r1, r6
    9238:	e1a02004 	mov	r2, r4
    923c:	e1a00005 	mov	r0, r5
    9240:	eb002307 	bl	11e64 <memcpy>
    9244:	e3a03000 	mov	r3, #0
    9248:	e1a00004 	mov	r0, r4
    924c:	e7c53004 	strb	r3, [r5, r4]
    9250:	e8bd8070 	pop	{r4, r5, r6, pc}

00009254 <jsonGetValueForKey(char const*, char const*, char*, int)>:
    9254:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    9258:	e1a07001 	mov	r7, r1
    925c:	e24ddf56 	sub	sp, sp, #344	; 0x158
    9260:	e1a08000 	mov	r8, r0
    9264:	e28d000c 	add	r0, sp, #12
    9268:	e1a0a002 	mov	sl, r2
    926c:	e1a09003 	mov	r9, r3
    9270:	eb00003d 	bl	936c <JSMNR_init(JSMNR_parser*)>
    9274:	e1a00007 	mov	r0, r7
    9278:	eb0021a7 	bl	1191c <strlen>
    927c:	e3a04014 	mov	r4, #20
    9280:	e1a02000 	mov	r2, r0
    9284:	e1a01007 	mov	r1, r7
    9288:	e28d000c 	add	r0, sp, #12
    928c:	e58d4000 	str	r4, [sp]
    9290:	e28d3018 	add	r3, sp, #24
    9294:	eb00005e 	bl	9414 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)>
    9298:	e2506000 	subs	r6, r0, #0
    929c:	ba000024 	blt	9334 <jsonGetValueForKey(char const*, char const*, char*, int)+0xe0>
    92a0:	128d4018 	addne	r4, sp, #24
    92a4:	13a05000 	movne	r5, #0
    92a8:	1a000003 	bne	92bc <jsonGetValueForKey(char const*, char const*, char*, int)+0x68>
    92ac:	ea00001d 	b	9328 <jsonGetValueForKey(char const*, char const*, char*, int)+0xd4>
    92b0:	e1560005 	cmp	r6, r5
    92b4:	e2844010 	add	r4, r4, #16
    92b8:	0a00001a 	beq	9328 <jsonGetValueForKey(char const*, char const*, char*, int)+0xd4>
    92bc:	e5d42000 	ldrb	r2, [r4]
    92c0:	e2855001 	add	r5, r5, #1
    92c4:	e3520003 	cmp	r2, #3
    92c8:	1afffff8 	bne	92b0 <jsonGetValueForKey(char const*, char const*, char*, int)+0x5c>
    92cc:	e1a00008 	mov	r0, r8
    92d0:	eb002191 	bl	1191c <strlen>
    92d4:	e994000a 	ldmib	r4, {r1, r3}
    92d8:	e0433001 	sub	r3, r3, r1
    92dc:	e1500003 	cmp	r0, r3
    92e0:	1afffff2 	bne	92b0 <jsonGetValueForKey(char const*, char const*, char*, int)+0x5c>
    92e4:	e1a02000 	mov	r2, r0
    92e8:	e0870001 	add	r0, r7, r1
    92ec:	e1a01008 	mov	r1, r8
    92f0:	eb0021e2 	bl	11a80 <strncmp>
    92f4:	e3500000 	cmp	r0, #0
    92f8:	1affffec 	bne	92b0 <jsonGetValueForKey(char const*, char const*, char*, int)+0x5c>
    92fc:	e5941014 	ldr	r1, [r4, #20]
    9300:	e5942018 	ldr	r2, [r4, #24]
    9304:	e0422001 	sub	r2, r2, r1
    9308:	e1520009 	cmp	r2, r9
    930c:	aa000005 	bge	9328 <jsonGetValueForKey(char const*, char const*, char*, int)+0xd4>
    9310:	e2822001 	add	r2, r2, #1
    9314:	e0871001 	add	r1, r7, r1
    9318:	e1a0000a 	mov	r0, sl
    931c:	ebffffbb 	bl	9210 <strlcpy(char*, char const*, unsigned int)>
    9320:	e3a00001 	mov	r0, #1
    9324:	ea000000 	b	932c <jsonGetValueForKey(char const*, char const*, char*, int)+0xd8>
    9328:	e3a00000 	mov	r0, #0
    932c:	e28ddf56 	add	sp, sp, #344	; 0x158
    9330:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    9334:	e1a00007 	mov	r0, r7
    9338:	eb002177 	bl	1191c <strlen>
    933c:	e58d4000 	str	r4, [sp]
    9340:	e58d0004 	str	r0, [sp, #4]
    9344:	e1a03006 	mov	r3, r6
    9348:	e59f2014 	ldr	r2, [pc, #20]	; 9364 <jsonGetValueForKey(char const*, char const*, char*, int)+0x110>
    934c:	e3a01004 	mov	r1, #4
    9350:	e59f0010 	ldr	r0, [pc, #16]	; 9368 <jsonGetValueForKey(char const*, char const*, char*, int)+0x114>
    9354:	ebffff7c 	bl	914c <LogWrite(char const*, unsigned int, char const*, ...)>
    9358:	e3a00000 	mov	r0, #0
    935c:	e28ddf56 	add	sp, sp, #344	; 0x158
    9360:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    9364:	00014120 	.word	0x00014120
    9368:	0001414c 	.word	0x0001414c

0000936c <JSMNR_init(JSMNR_parser*)>:
    936c:	e3a03000 	mov	r3, #0
    9370:	e3e02000 	mvn	r2, #0
    9374:	e5803000 	str	r3, [r0]
    9378:	e5802008 	str	r2, [r0, #8]
    937c:	e5803004 	str	r3, [r0, #4]
    9380:	e12fff1e 	bx	lr

00009384 <JSMNR_logLongStr(char const*, char const*, bool)>:
    9384:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    9388:	e2526000 	subs	r6, r2, #0
    938c:	e24dd05c 	sub	sp, sp, #92	; 0x5c
    9390:	e1a02000 	mov	r2, r0
    9394:	e1a05001 	mov	r5, r1
    9398:	0a000018 	beq	9400 <JSMNR_logLongStr(char const*, char const*, bool)+0x7c>
    939c:	e3a01003 	mov	r1, #3
    93a0:	e59f0068 	ldr	r0, [pc, #104]	; 9410 <JSMNR_logLongStr(char const*, char const*, bool)+0x8c>
    93a4:	ebffff68 	bl	914c <LogWrite(char const*, unsigned int, char const*, ...)>
    93a8:	e3a04000 	mov	r4, #0
    93ac:	e59f705c 	ldr	r7, [pc, #92]	; 9410 <JSMNR_logLongStr(char const*, char const*, bool)+0x8c>
    93b0:	ea00000b 	b	93e4 <JSMNR_logLongStr(char const*, char const*, bool)+0x60>
    93b4:	e3a02051 	mov	r2, #81	; 0x51
    93b8:	e28d0004 	add	r0, sp, #4
    93bc:	ebffff93 	bl	9210 <strlcpy(char*, char const*, unsigned int)>
    93c0:	e3a03000 	mov	r3, #0
    93c4:	e1560003 	cmp	r6, r3
    93c8:	e28d2004 	add	r2, sp, #4
    93cc:	13a01003 	movne	r1, #3
    93d0:	03a01004 	moveq	r1, #4
    93d4:	e1a00007 	mov	r0, r7
    93d8:	e5cd3054 	strb	r3, [sp, #84]	; 0x54
    93dc:	ebffff5a 	bl	914c <LogWrite(char const*, unsigned int, char const*, ...)>
    93e0:	e2844050 	add	r4, r4, #80	; 0x50
    93e4:	e1a00005 	mov	r0, r5
    93e8:	eb00214b 	bl	1191c <strlen>
    93ec:	e1500004 	cmp	r0, r4
    93f0:	e0851004 	add	r1, r5, r4
    93f4:	8affffee 	bhi	93b4 <JSMNR_logLongStr(char const*, char const*, bool)+0x30>
    93f8:	e28dd05c 	add	sp, sp, #92	; 0x5c
    93fc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    9400:	e3a01004 	mov	r1, #4
    9404:	e59f0004 	ldr	r0, [pc, #4]	; 9410 <JSMNR_logLongStr(char const*, char const*, bool)+0x8c>
    9408:	ebffff4f 	bl	914c <LogWrite(char const*, unsigned int, char const*, ...)>
    940c:	eaffffe5 	b	93a8 <JSMNR_logLongStr(char const*, char const*, bool)+0x24>
    9410:	00014154 	.word	0x00014154

00009414 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)>:
    9414:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9418:	e5905000 	ldr	r5, [r0]
    941c:	e24dd01c 	sub	sp, sp, #28
    9420:	e1520005 	cmp	r2, r5
    9424:	e58d3010 	str	r3, [sp, #16]
    9428:	e5908004 	ldr	r8, [r0, #4]
    942c:	9a0000bc 	bls	9724 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x310>
    9430:	e1a07003 	mov	r7, r3
    9434:	e19130d5 	ldrsb	r3, [r1, r5]
    9438:	e081e005 	add	lr, r1, r5
    943c:	e3530000 	cmp	r3, #0
    9440:	0a0000b7 	beq	9724 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x310>
    9444:	e1a04000 	mov	r4, r0
    9448:	e58d0014 	str	r0, [sp, #20]
    944c:	e1a06001 	mov	r6, r1
    9450:	e59d0040 	ldr	r0, [sp, #64]	; 0x40
    9454:	ea000010 	b	949c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x88>
    9458:	e353005d 	cmp	r3, #93	; 0x5d
    945c:	0a0000ca 	beq	978c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x378>
    9460:	ca0000c5 	bgt	977c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x368>
    9464:	e353003a 	cmp	r3, #58	; 0x3a
    9468:	1a00013f 	bne	996c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x558>
    946c:	e5943004 	ldr	r3, [r4, #4]
    9470:	e594e000 	ldr	lr, [r4]
    9474:	e2433001 	sub	r3, r3, #1
    9478:	e5843008 	str	r3, [r4, #8]
    947c:	e28e5001 	add	r5, lr, #1
    9480:	e1550002 	cmp	r5, r2
    9484:	e5845000 	str	r5, [r4]
    9488:	2a0000a4 	bcs	9720 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x30c>
    948c:	e19630d5 	ldrsb	r3, [r6, r5]
    9490:	e086e005 	add	lr, r6, r5
    9494:	e3530000 	cmp	r3, #0
    9498:	0a0000a0 	beq	9720 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x30c>
    949c:	e353002c 	cmp	r3, #44	; 0x2c
    94a0:	0a00014f 	beq	99e4 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x5d0>
    94a4:	caffffeb 	bgt	9458 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x44>
    94a8:	e353000d 	cmp	r3, #13
    94ac:	0a000096 	beq	970c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x2f8>
    94b0:	da0000e4 	ble	9848 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x434>
    94b4:	e3530020 	cmp	r3, #32
    94b8:	0a000093 	beq	970c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x2f8>
    94bc:	e3530022 	cmp	r3, #34	; 0x22
    94c0:	1a0000e3 	bne	9854 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x440>
    94c4:	e2859001 	add	r9, r5, #1
    94c8:	e1520009 	cmp	r2, r9
    94cc:	e5849000 	str	r9, [r4]
    94d0:	e1a01009 	mov	r1, r9
    94d4:	9a0000d6 	bls	9834 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x420>
    94d8:	e19630d9 	ldrsb	r3, [r6, r9]
    94dc:	e3530000 	cmp	r3, #0
    94e0:	1a000008 	bne	9508 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0xf4>
    94e4:	ea0000d2 	b	9834 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x420>
    94e8:	e594e000 	ldr	lr, [r4]
    94ec:	e28e1001 	add	r1, lr, #1
    94f0:	e1520001 	cmp	r2, r1
    94f4:	e5841000 	str	r1, [r4]
    94f8:	9a0000cd 	bls	9834 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x420>
    94fc:	e19630d1 	ldrsb	r3, [r6, r1]
    9500:	e3530000 	cmp	r3, #0
    9504:	0a0000ca 	beq	9834 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x420>
    9508:	e3530022 	cmp	r3, #34	; 0x22
    950c:	0a000168 	beq	9ab4 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x6a0>
    9510:	e353005c 	cmp	r3, #92	; 0x5c
    9514:	1afffff3 	bne	94e8 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0xd4>
    9518:	e281e001 	add	lr, r1, #1
    951c:	e152000e 	cmp	r2, lr
    9520:	9afffff0 	bls	94e8 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0xd4>
    9524:	e584e000 	str	lr, [r4]
    9528:	e19630de 	ldrsb	r3, [r6, lr]
    952c:	e086a00e 	add	sl, r6, lr
    9530:	e243c022 	sub	ip, r3, #34	; 0x22
    9534:	e35c0053 	cmp	ip, #83	; 0x53
    9538:	979ff10c 	ldrls	pc, [pc, ip, lsl #2]
    953c:	ea00006d 	b	96f8 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x2e4>
    9540:	000094ec 	.word	0x000094ec
    9544:	000096f8 	.word	0x000096f8
    9548:	000096f8 	.word	0x000096f8
    954c:	000096f8 	.word	0x000096f8
    9550:	000096f8 	.word	0x000096f8
    9554:	000096f8 	.word	0x000096f8
    9558:	000096f8 	.word	0x000096f8
    955c:	000096f8 	.word	0x000096f8
    9560:	000096f8 	.word	0x000096f8
    9564:	000096f8 	.word	0x000096f8
    9568:	000096f8 	.word	0x000096f8
    956c:	000096f8 	.word	0x000096f8
    9570:	000096f8 	.word	0x000096f8
    9574:	000094ec 	.word	0x000094ec
    9578:	000096f8 	.word	0x000096f8
    957c:	000096f8 	.word	0x000096f8
    9580:	000096f8 	.word	0x000096f8
    9584:	000096f8 	.word	0x000096f8
    9588:	000096f8 	.word	0x000096f8
    958c:	000096f8 	.word	0x000096f8
    9590:	000096f8 	.word	0x000096f8
    9594:	000096f8 	.word	0x000096f8
    9598:	000096f8 	.word	0x000096f8
    959c:	000096f8 	.word	0x000096f8
    95a0:	000096f8 	.word	0x000096f8
    95a4:	000096f8 	.word	0x000096f8
    95a8:	000096f8 	.word	0x000096f8
    95ac:	000096f8 	.word	0x000096f8
    95b0:	000096f8 	.word	0x000096f8
    95b4:	000096f8 	.word	0x000096f8
    95b8:	000096f8 	.word	0x000096f8
    95bc:	000096f8 	.word	0x000096f8
    95c0:	000096f8 	.word	0x000096f8
    95c4:	000096f8 	.word	0x000096f8
    95c8:	000096f8 	.word	0x000096f8
    95cc:	000096f8 	.word	0x000096f8
    95d0:	000096f8 	.word	0x000096f8
    95d4:	000096f8 	.word	0x000096f8
    95d8:	000096f8 	.word	0x000096f8
    95dc:	000096f8 	.word	0x000096f8
    95e0:	000096f8 	.word	0x000096f8
    95e4:	000096f8 	.word	0x000096f8
    95e8:	000096f8 	.word	0x000096f8
    95ec:	000096f8 	.word	0x000096f8
    95f0:	000096f8 	.word	0x000096f8
    95f4:	000096f8 	.word	0x000096f8
    95f8:	000096f8 	.word	0x000096f8
    95fc:	000096f8 	.word	0x000096f8
    9600:	000096f8 	.word	0x000096f8
    9604:	000096f8 	.word	0x000096f8
    9608:	000096f8 	.word	0x000096f8
    960c:	000096f8 	.word	0x000096f8
    9610:	000096f8 	.word	0x000096f8
    9614:	000096f8 	.word	0x000096f8
    9618:	000096f8 	.word	0x000096f8
    961c:	000096f8 	.word	0x000096f8
    9620:	000096f8 	.word	0x000096f8
    9624:	000096f8 	.word	0x000096f8
    9628:	000094ec 	.word	0x000094ec
    962c:	000096f8 	.word	0x000096f8
    9630:	000096f8 	.word	0x000096f8
    9634:	000096f8 	.word	0x000096f8
    9638:	000096f8 	.word	0x000096f8
    963c:	000096f8 	.word	0x000096f8
    9640:	000094ec 	.word	0x000094ec
    9644:	000096f8 	.word	0x000096f8
    9648:	000096f8 	.word	0x000096f8
    964c:	000096f8 	.word	0x000096f8
    9650:	000094ec 	.word	0x000094ec
    9654:	000096f8 	.word	0x000096f8
    9658:	000096f8 	.word	0x000096f8
    965c:	000096f8 	.word	0x000096f8
    9660:	000096f8 	.word	0x000096f8
    9664:	000096f8 	.word	0x000096f8
    9668:	000096f8 	.word	0x000096f8
    966c:	000096f8 	.word	0x000096f8
    9670:	000094ec 	.word	0x000094ec
    9674:	000096f8 	.word	0x000096f8
    9678:	000096f8 	.word	0x000096f8
    967c:	000096f8 	.word	0x000096f8
    9680:	000094ec 	.word	0x000094ec
    9684:	000096f8 	.word	0x000096f8
    9688:	000094ec 	.word	0x000094ec
    968c:	00009690 	.word	0x00009690
    9690:	e281e002 	add	lr, r1, #2
    9694:	e584e000 	str	lr, [r4]
    9698:	e2811006 	add	r1, r1, #6
    969c:	e152000e 	cmp	r2, lr
    96a0:	0a00005e 	beq	9820 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x40c>
    96a4:	e1fa30d1 	ldrsb	r3, [sl, #1]!
    96a8:	e6efc073 	uxtb	ip, r3
    96ac:	e3ccb020 	bic	fp, ip, #32
    96b0:	e3530000 	cmp	r3, #0
    96b4:	e24cc030 	sub	ip, ip, #48	; 0x30
    96b8:	e24bb041 	sub	fp, fp, #65	; 0x41
    96bc:	0a000057 	beq	9820 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x40c>
    96c0:	e35c0009 	cmp	ip, #9
    96c4:	9a000051 	bls	9810 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x3fc>
    96c8:	e35b0005 	cmp	fp, #5
    96cc:	9a00004f 	bls	9810 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x3fc>
    96d0:	e59f247c 	ldr	r2, [pc, #1148]	; 9b54 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x740>
    96d4:	e58de000 	str	lr, [sp]
    96d8:	e3e08001 	mvn	r8, #1
    96dc:	e3a01004 	mov	r1, #4
    96e0:	e59f0470 	ldr	r0, [pc, #1136]	; 9b58 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x744>
    96e4:	ebfffe98 	bl	914c <LogWrite(char const*, unsigned int, char const*, ...)>
    96e8:	e5845000 	str	r5, [r4]
    96ec:	e1a00008 	mov	r0, r8
    96f0:	e28dd01c 	add	sp, sp, #28
    96f4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    96f8:	e58de000 	str	lr, [sp]
    96fc:	e59f2458 	ldr	r2, [pc, #1112]	; 9b5c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x748>
    9700:	eafffff4 	b	96d8 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x2c4>
    9704:	e3710001 	cmn	r1, #1
    9708:	0a000033 	beq	97dc <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x3c8>
    970c:	e594e000 	ldr	lr, [r4]
    9710:	e28e5001 	add	r5, lr, #1
    9714:	e1550002 	cmp	r5, r2
    9718:	e5845000 	str	r5, [r4]
    971c:	3affff5a 	bcc	948c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x78>
    9720:	e59d0014 	ldr	r0, [sp, #20]
    9724:	e59d1010 	ldr	r1, [sp, #16]
    9728:	e3510000 	cmp	r1, #0
    972c:	0affffee 	beq	96ec <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x2d8>
    9730:	e5903004 	ldr	r3, [r0, #4]
    9734:	e2532001 	subs	r2, r3, #1
    9738:	4affffeb 	bmi	96ec <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x2d8>
    973c:	e0813203 	add	r3, r1, r3, lsl #4
    9740:	ea000002 	b	9750 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x33c>
    9744:	e3720001 	cmn	r2, #1
    9748:	e2433010 	sub	r3, r3, #16
    974c:	0affffe6 	beq	96ec <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x2d8>
    9750:	e513100c 	ldr	r1, [r3, #-12]
    9754:	e2422001 	sub	r2, r2, #1
    9758:	e3710001 	cmn	r1, #1
    975c:	0afffff8 	beq	9744 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x330>
    9760:	e5131008 	ldr	r1, [r3, #-8]
    9764:	e3710001 	cmn	r1, #1
    9768:	1afffff5 	bne	9744 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x330>
    976c:	e3e08002 	mvn	r8, #2
    9770:	e1a00008 	mov	r0, r8
    9774:	e28dd01c 	add	sp, sp, #28
    9778:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    977c:	e353007b 	cmp	r3, #123	; 0x7b
    9780:	0a00007b 	beq	9974 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x560>
    9784:	e353007d 	cmp	r3, #125	; 0x7d
    9788:	1a000031 	bne	9854 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x440>
    978c:	e3570000 	cmp	r7, #0
    9790:	0affffdd 	beq	970c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x2f8>
    9794:	e594a004 	ldr	sl, [r4, #4]
    9798:	e353007d 	cmp	r3, #125	; 0x7d
    979c:	13a0b002 	movne	fp, #2
    97a0:	03a0b001 	moveq	fp, #1
    97a4:	e25a1001 	subs	r1, sl, #1
    97a8:	4affffd5 	bmi	9704 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x2f0>
    97ac:	e24ac21f 	sub	ip, sl, #-268435455	; 0xf0000001
    97b0:	e087c20c 	add	ip, r7, ip, lsl #4
    97b4:	e59c3004 	ldr	r3, [ip, #4]
    97b8:	e3730001 	cmn	r3, #1
    97bc:	0a000002 	beq	97cc <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x3b8>
    97c0:	e59c9008 	ldr	r9, [ip, #8]
    97c4:	e3790001 	cmn	r9, #1
    97c8:	0a0000a4 	beq	9a60 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x64c>
    97cc:	e2411001 	sub	r1, r1, #1
    97d0:	e3710001 	cmn	r1, #1
    97d4:	e24cc010 	sub	ip, ip, #16
    97d8:	1afffff5 	bne	97b4 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x3a0>
    97dc:	e1de30d0 	ldrsb	r3, [lr]
    97e0:	e59f2378 	ldr	r2, [pc, #888]	; 9b60 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x74c>
    97e4:	e88d0c08 	stm	sp, {r3, sl, fp}
    97e8:	e3a01003 	mov	r1, #3
    97ec:	e1a03005 	mov	r3, r5
    97f0:	e59f0360 	ldr	r0, [pc, #864]	; 9b58 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x744>
    97f4:	ebfffe54 	bl	914c <LogWrite(char const*, unsigned int, char const*, ...)>
    97f8:	e1a01006 	mov	r1, r6
    97fc:	e3a02001 	mov	r2, #1
    9800:	e59f035c 	ldr	r0, [pc, #860]	; 9b64 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x750>
    9804:	ebfffede 	bl	9384 <JSMNR_logLongStr(char const*, char const*, bool)>
    9808:	e3e08001 	mvn	r8, #1
    980c:	eaffffb6 	b	96ec <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x2d8>
    9810:	e28ee001 	add	lr, lr, #1
    9814:	e15e0001 	cmp	lr, r1
    9818:	e584e000 	str	lr, [r4]
    981c:	1affff9e 	bne	969c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x288>
    9820:	e24ee001 	sub	lr, lr, #1
    9824:	e28e1001 	add	r1, lr, #1
    9828:	e1520001 	cmp	r2, r1
    982c:	e5841000 	str	r1, [r4]
    9830:	8affff31 	bhi	94fc <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0xe8>
    9834:	e3e08002 	mvn	r8, #2
    9838:	e1a00008 	mov	r0, r8
    983c:	e5845000 	str	r5, [r4]
    9840:	e28dd01c 	add	sp, sp, #28
    9844:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9848:	e2433009 	sub	r3, r3, #9
    984c:	e3530001 	cmp	r3, #1
    9850:	9affffad 	bls	970c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x2f8>
    9854:	e5941000 	ldr	r1, [r4]
    9858:	e1520001 	cmp	r2, r1
    985c:	9a00001d 	bls	98d8 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x4c4>
    9860:	e19630d1 	ldrsb	r3, [r6, r1]
    9864:	e086e001 	add	lr, r6, r1
    9868:	e3530000 	cmp	r3, #0
    986c:	1a000011 	bne	98b8 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x4a4>
    9870:	ea000018 	b	98d8 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x4c4>
    9874:	e3530009 	cmp	r3, #9
    9878:	ba000003 	blt	988c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x478>
    987c:	e353000a 	cmp	r3, #10
    9880:	da000014 	ble	98d8 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x4c4>
    9884:	e353000d 	cmp	r3, #13
    9888:	0a000012 	beq	98d8 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x4c4>
    988c:	e243c020 	sub	ip, r3, #32
    9890:	e6efc07c 	uxtb	ip, ip
    9894:	e35c005e 	cmp	ip, #94	; 0x5e
    9898:	8a000030 	bhi	9960 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x54c>
    989c:	e2811001 	add	r1, r1, #1
    98a0:	e1520001 	cmp	r2, r1
    98a4:	e5841000 	str	r1, [r4]
    98a8:	0a00000a 	beq	98d8 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x4c4>
    98ac:	e1fe30d1 	ldrsb	r3, [lr, #1]!
    98b0:	e3530000 	cmp	r3, #0
    98b4:	0a000007 	beq	98d8 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x4c4>
    98b8:	e3530020 	cmp	r3, #32
    98bc:	0a000005 	beq	98d8 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x4c4>
    98c0:	daffffeb 	ble	9874 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x460>
    98c4:	e353003a 	cmp	r3, #58	; 0x3a
    98c8:	0a000002 	beq	98d8 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x4c4>
    98cc:	ca00001b 	bgt	9940 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x52c>
    98d0:	e353002c 	cmp	r3, #44	; 0x2c
    98d4:	1affffec 	bne	988c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x478>
    98d8:	e3570000 	cmp	r7, #0
    98dc:	0241e001 	subeq	lr, r1, #1
    98e0:	02888001 	addeq	r8, r8, #1
    98e4:	0afffee4 	beq	947c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x68>
    98e8:	e594c004 	ldr	ip, [r4, #4]
    98ec:	e150000c 	cmp	r0, ip
    98f0:	9a00008c 	bls	9b28 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x714>
    98f4:	e28ce001 	add	lr, ip, #1
    98f8:	e584e004 	str	lr, [r4, #4]
    98fc:	e3a0e000 	mov	lr, #0
    9900:	e087920c 	add	r9, r7, ip, lsl #4
    9904:	e5943008 	ldr	r3, [r4, #8]
    9908:	e589e00c 	str	lr, [r9, #12]
    990c:	e3a0e004 	mov	lr, #4
    9910:	e3730001 	cmn	r3, #1
    9914:	10873203 	addne	r3, r7, r3, lsl #4
    9918:	e7c7e20c 	strb	lr, [r7, ip, lsl #4]
    991c:	e5891008 	str	r1, [r9, #8]
    9920:	e241e001 	sub	lr, r1, #1
    9924:	1593100c 	ldrne	r1, [r3, #12]
    9928:	e5895004 	str	r5, [r9, #4]
    992c:	12811001 	addne	r1, r1, #1
    9930:	e584e000 	str	lr, [r4]
    9934:	e2888001 	add	r8, r8, #1
    9938:	1583100c 	strne	r1, [r3, #12]
    993c:	eafffece 	b	947c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x68>
    9940:	e353005d 	cmp	r3, #93	; 0x5d
    9944:	0affffe3 	beq	98d8 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x4c4>
    9948:	e353007d 	cmp	r3, #125	; 0x7d
    994c:	0affffe1 	beq	98d8 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x4c4>
    9950:	e243c020 	sub	ip, r3, #32
    9954:	e6efc07c 	uxtb	ip, ip
    9958:	e35c005e 	cmp	ip, #94	; 0x5e
    995c:	9affffce 	bls	989c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x488>
    9960:	e58d1000 	str	r1, [sp]
    9964:	e59f21fc 	ldr	r2, [pc, #508]	; 9b68 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x754>
    9968:	eaffff5a 	b	96d8 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x2c4>
    996c:	e353005b 	cmp	r3, #91	; 0x5b
    9970:	1affffb7 	bne	9854 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x440>
    9974:	e3570000 	cmp	r7, #0
    9978:	e2888001 	add	r8, r8, #1
    997c:	0affff62 	beq	970c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x2f8>
    9980:	e5941004 	ldr	r1, [r4, #4]
    9984:	e1500001 	cmp	r0, r1
    9988:	9a000064 	bls	9b20 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x70c>
    998c:	e2819001 	add	r9, r1, #1
    9990:	e5849004 	str	r9, [r4, #4]
    9994:	e3e09000 	mvn	r9, #0
    9998:	e087c201 	add	ip, r7, r1, lsl #4
    999c:	e594e008 	ldr	lr, [r4, #8]
    99a0:	e58c9004 	str	r9, [ip, #4]
    99a4:	e58c9008 	str	r9, [ip, #8]
    99a8:	e3a09000 	mov	r9, #0
    99ac:	e37e0001 	cmn	lr, #1
    99b0:	e58c900c 	str	r9, [ip, #12]
    99b4:	1087e20e 	addne	lr, r7, lr, lsl #4
    99b8:	159e900c 	ldrne	r9, [lr, #12]
    99bc:	12899001 	addne	r9, r9, #1
    99c0:	158e900c 	strne	r9, [lr, #12]
    99c4:	e353007b 	cmp	r3, #123	; 0x7b
    99c8:	13a03002 	movne	r3, #2
    99cc:	03a03001 	moveq	r3, #1
    99d0:	e594e000 	ldr	lr, [r4]
    99d4:	e7c73201 	strb	r3, [r7, r1, lsl #4]
    99d8:	e58c5004 	str	r5, [ip, #4]
    99dc:	e5841008 	str	r1, [r4, #8]
    99e0:	eafffea5 	b	947c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x68>
    99e4:	e3570000 	cmp	r7, #0
    99e8:	e594e000 	ldr	lr, [r4]
    99ec:	0afffea2 	beq	947c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x68>
    99f0:	e5943008 	ldr	r3, [r4, #8]
    99f4:	e3730001 	cmn	r3, #1
    99f8:	0afffe9f 	beq	947c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x68>
    99fc:	e7d73203 	ldrb	r3, [r7, r3, lsl #4]
    9a00:	e2433001 	sub	r3, r3, #1
    9a04:	e3530001 	cmp	r3, #1
    9a08:	9afffe9b 	bls	947c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x68>
    9a0c:	e5943004 	ldr	r3, [r4, #4]
    9a10:	e253c001 	subs	ip, r3, #1
    9a14:	4afffe98 	bmi	947c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x68>
    9a18:	e0873203 	add	r3, r7, r3, lsl #4
    9a1c:	ea000003 	b	9a30 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x61c>
    9a20:	e24cc001 	sub	ip, ip, #1
    9a24:	e37c0001 	cmn	ip, #1
    9a28:	e2433010 	sub	r3, r3, #16
    9a2c:	0afffe92 	beq	947c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x68>
    9a30:	e5531010 	ldrb	r1, [r3, #-16]
    9a34:	e2411001 	sub	r1, r1, #1
    9a38:	e3510001 	cmp	r1, #1
    9a3c:	8afffff7 	bhi	9a20 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x60c>
    9a40:	e513100c 	ldr	r1, [r3, #-12]
    9a44:	e3710001 	cmn	r1, #1
    9a48:	0afffff4 	beq	9a20 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x60c>
    9a4c:	e5131008 	ldr	r1, [r3, #-8]
    9a50:	e3710001 	cmn	r1, #1
    9a54:	1afffff1 	bne	9a20 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x60c>
    9a58:	e584c008 	str	ip, [r4, #8]
    9a5c:	eafffe86 	b	947c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x68>
    9a60:	e5dce000 	ldrb	lr, [ip]
    9a64:	e15e000b 	cmp	lr, fp
    9a68:	1a000031 	bne	9b34 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x720>
    9a6c:	e2855001 	add	r5, r5, #1
    9a70:	e5849008 	str	r9, [r4, #8]
    9a74:	e594e000 	ldr	lr, [r4]
    9a78:	e0873201 	add	r3, r7, r1, lsl #4
    9a7c:	e58c5008 	str	r5, [ip, #8]
    9a80:	ea000003 	b	9a94 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x680>
    9a84:	e2411001 	sub	r1, r1, #1
    9a88:	e3710001 	cmn	r1, #1
    9a8c:	e2433010 	sub	r3, r3, #16
    9a90:	0afffe79 	beq	947c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x68>
    9a94:	e593c004 	ldr	ip, [r3, #4]
    9a98:	e37c0001 	cmn	ip, #1
    9a9c:	0afffff8 	beq	9a84 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x670>
    9aa0:	e593c008 	ldr	ip, [r3, #8]
    9aa4:	e37c0001 	cmn	ip, #1
    9aa8:	1afffff5 	bne	9a84 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x670>
    9aac:	e5841008 	str	r1, [r4, #8]
    9ab0:	eafffe71 	b	947c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x68>
    9ab4:	e3570000 	cmp	r7, #0
    9ab8:	0a000015 	beq	9b14 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x700>
    9abc:	e594c004 	ldr	ip, [r4, #4]
    9ac0:	e150000c 	cmp	r0, ip
    9ac4:	9a000017 	bls	9b28 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x714>
    9ac8:	e3a05000 	mov	r5, #0
    9acc:	e28ce001 	add	lr, ip, #1
    9ad0:	e584e004 	str	lr, [r4, #4]
    9ad4:	e087e20c 	add	lr, r7, ip, lsl #4
    9ad8:	e5943008 	ldr	r3, [r4, #8]
    9adc:	e58e500c 	str	r5, [lr, #12]
    9ae0:	e3a05003 	mov	r5, #3
    9ae4:	e3730001 	cmn	r3, #1
    9ae8:	e7c7520c 	strb	r5, [r7, ip, lsl #4]
    9aec:	e2888001 	add	r8, r8, #1
    9af0:	e58e9004 	str	r9, [lr, #4]
    9af4:	e58e1008 	str	r1, [lr, #8]
    9af8:	0affff03 	beq	970c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x2f8>
    9afc:	e0873203 	add	r3, r7, r3, lsl #4
    9b00:	e593100c 	ldr	r1, [r3, #12]
    9b04:	e594e000 	ldr	lr, [r4]
    9b08:	e2811001 	add	r1, r1, #1
    9b0c:	e583100c 	str	r1, [r3, #12]
    9b10:	eafffe59 	b	947c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x68>
    9b14:	e2888001 	add	r8, r8, #1
    9b18:	e594e000 	ldr	lr, [r4]
    9b1c:	eafffe56 	b	947c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x68>
    9b20:	e3e08000 	mvn	r8, #0
    9b24:	eafffef0 	b	96ec <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x2d8>
    9b28:	e5845000 	str	r5, [r4]
    9b2c:	e3e08000 	mvn	r8, #0
    9b30:	eafffeed 	b	96ec <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x2d8>
    9b34:	e58db004 	str	fp, [sp, #4]
    9b38:	e58de000 	str	lr, [sp]
    9b3c:	e59f2028 	ldr	r2, [pc, #40]	; 9b6c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x758>
    9b40:	e3a01003 	mov	r1, #3
    9b44:	e59f000c 	ldr	r0, [pc, #12]	; 9b58 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x744>
    9b48:	ebfffd7f 	bl	914c <LogWrite(char const*, unsigned int, char const*, ...)>
    9b4c:	e3e08001 	mvn	r8, #1
    9b50:	eafffee5 	b	96ec <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x2d8>
    9b54:	000141d4 	.word	0x000141d4
    9b58:	00014154 	.word	0x00014154
    9b5c:	000141fc 	.word	0x000141fc
    9b60:	0001417c 	.word	0x0001417c
    9b64:	000141c0 	.word	0x000141c0
    9b68:	00014224 	.word	0x00014224
    9b6c:	0001415c 	.word	0x0001415c

00009b70 <OTAUpdate::performUpdate(unsigned char*, int)>:
    9b70:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    9b74:	e59f911c 	ldr	r9, [pc, #284]	; 9c98 <OTAUpdate::performUpdate(unsigned char*, int)+0x128>
    9b78:	e24dd008 	sub	sp, sp, #8
    9b7c:	e5995000 	ldr	r5, [r9]
    9b80:	e1a0a000 	mov	sl, r0
    9b84:	e2855050 	add	r5, r5, #80	; 0x50
    9b88:	e0856001 	add	r6, r5, r1
    9b8c:	e1a00006 	mov	r0, r6
    9b90:	e1a07001 	mov	r7, r1
    9b94:	eb0022ff 	bl	12798 <operator new[](unsigned int)>
    9b98:	e1a05000 	mov	r5, r0
    9b9c:	e5992000 	ldr	r2, [r9]
    9ba0:	e59f10f4 	ldr	r1, [pc, #244]	; 9c9c <OTAUpdate::performUpdate(unsigned char*, int)+0x12c>
    9ba4:	eb0020ae 	bl	11e64 <memcpy>
    9ba8:	e5998000 	ldr	r8, [r9]
    9bac:	e1a02007 	mov	r2, r7
    9bb0:	e0858008 	add	r8, r5, r8
    9bb4:	e1a0100a 	mov	r1, sl
    9bb8:	e1a00008 	mov	r0, r8
    9bbc:	eb0020a8 	bl	11e64 <memcpy>
    9bc0:	e5992000 	ldr	r2, [r9]
    9bc4:	e59f40d4 	ldr	r4, [pc, #212]	; 9ca0 <OTAUpdate::performUpdate(unsigned char*, int)+0x130>
    9bc8:	e0872002 	add	r2, r7, r2
    9bcc:	e1a03005 	mov	r3, r5
    9bd0:	e58d2000 	str	r2, [sp]
    9bd4:	e1a00004 	mov	r0, r4
    9bd8:	e59f20c4 	ldr	r2, [pc, #196]	; 9ca4 <OTAUpdate::performUpdate(unsigned char*, int)+0x134>
    9bdc:	e3a01004 	mov	r1, #4
    9be0:	ebfffd59 	bl	914c <LogWrite(char const*, unsigned int, char const*, ...)>
    9be4:	e1a00004 	mov	r0, r4
    9be8:	e59f20b8 	ldr	r2, [pc, #184]	; 9ca8 <OTAUpdate::performUpdate(unsigned char*, int)+0x138>
    9bec:	e3a01004 	mov	r1, #4
    9bf0:	ebfffd55 	bl	914c <LogWrite(char const*, unsigned int, char const*, ...)>
    9bf4:	e1a02004 	mov	r2, r4
    9bf8:	e1a0000a 	mov	r0, sl
    9bfc:	e3a01080 	mov	r1, #128	; 0x80
    9c00:	eb00045a 	bl	ad70 <debug_hexdump(void const*, unsigned int, char const*)>
    9c04:	e1a00004 	mov	r0, r4
    9c08:	e59f209c 	ldr	r2, [pc, #156]	; 9cac <OTAUpdate::performUpdate(unsigned char*, int)+0x13c>
    9c0c:	e3a01004 	mov	r1, #4
    9c10:	ebfffd4d 	bl	914c <LogWrite(char const*, unsigned int, char const*, ...)>
    9c14:	e1a02004 	mov	r2, r4
    9c18:	e3a01080 	mov	r1, #128	; 0x80
    9c1c:	e3a00902 	mov	r0, #32768	; 0x8000
    9c20:	eb000452 	bl	ad70 <debug_hexdump(void const*, unsigned int, char const*)>
    9c24:	e1a00004 	mov	r0, r4
    9c28:	e59f2080 	ldr	r2, [pc, #128]	; 9cb0 <OTAUpdate::performUpdate(unsigned char*, int)+0x140>
    9c2c:	e3a01004 	mov	r1, #4
    9c30:	ebfffd45 	bl	914c <LogWrite(char const*, unsigned int, char const*, ...)>
    9c34:	e1a02004 	mov	r2, r4
    9c38:	e1a00005 	mov	r0, r5
    9c3c:	e3a01080 	mov	r1, #128	; 0x80
    9c40:	eb00044a 	bl	ad70 <debug_hexdump(void const*, unsigned int, char const*)>
    9c44:	e3a03000 	mov	r3, #0
    9c48:	e59f2064 	ldr	r2, [pc, #100]	; 9cb4 <OTAUpdate::performUpdate(unsigned char*, int)+0x144>
    9c4c:	e3a01004 	mov	r1, #4
    9c50:	e1a00004 	mov	r0, r4
    9c54:	ebfffd3c 	bl	914c <LogWrite(char const*, unsigned int, char const*, ...)>
    9c58:	e3a00f7d 	mov	r0, #500	; 0x1f4
    9c5c:	eb001ec6 	bl	1177c <CTimer::SimpleMsDelay(unsigned int)>
    9c60:	eb0022c3 	bl	12774 <SyncDataAndInstructionCache>
    9c64:	e3a03902 	mov	r3, #32768	; 0x8000
    9c68:	e0855006 	add	r5, r5, r6
    9c6c:	e1a01008 	mov	r1, r8
    9c70:	e1a02007 	mov	r2, r7
    9c74:	e1a00003 	mov	r0, r3
    9c78:	e58d5000 	str	r5, [sp]
    9c7c:	eb00001d 	bl	9cf8 <lowlevBlockCopyExecRelocatable>
    9c80:	e1a00004 	mov	r0, r4
    9c84:	e3a01004 	mov	r1, #4
    9c88:	e59f2028 	ldr	r2, [pc, #40]	; 9cb8 <OTAUpdate::performUpdate(unsigned char*, int)+0x148>
    9c8c:	e28dd008 	add	sp, sp, #8
    9c90:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    9c94:	eafffd2c 	b	914c <LogWrite(char const*, unsigned int, char const*, ...)>
    9c98:	00009d08 	.word	0x00009d08
    9c9c:	00009cf8 	.word	0x00009cf8
    9ca0:	0001424c 	.word	0x0001424c
    9ca4:	00014258 	.word	0x00014258
    9ca8:	0001427c 	.word	0x0001427c
    9cac:	00014284 	.word	0x00014284
    9cb0:	0001428c 	.word	0x0001428c
    9cb4:	00014298 	.word	0x00014298
    9cb8:	000142b4 	.word	0x000142b4

00009cbc <lowlevDisableIRQ>:
    9cbc:	f10c0080 	cpsid	i
    9cc0:	e12fff1e 	bx	lr

00009cc4 <lowlevEnableIRQ>:
    9cc4:	f1080080 	cpsie	i
    9cc8:	e12fff1e 	bx	lr

00009ccc <lowlevDisableFIQ>:
    9ccc:	f10c0040 	cpsid	f
    9cd0:	e12fff1e 	bx	lr

00009cd4 <lowlevEnableFIQ>:
    9cd4:	f1080040 	cpsie	f
    9cd8:	e12fff1e 	bx	lr

00009cdc <lowlevCycleDelay>:
    9cdc:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
    9ce0:	e1a00000 	nop			; (mov r0, r0)
    9ce4:	e1a000c0 	asr	r0, r0, #1

00009ce8 <loopit>:
    9ce8:	e2500001 	subs	r0, r0, #1
    9cec:	1afffffd 	bne	9ce8 <loopit>
    9cf0:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
    9cf4:	e12fff1e 	bx	lr

00009cf8 <lowlevBlockCopyExecRelocatable>:
    9cf8:	e59f0030 	ldr	r0, [pc, #48]	; 9d30 <lowlevStoreAbs8+0x14>
    9cfc:	e3a01902 	mov	r1, #32768	; 0x8000
    9d00:	e5801000 	str	r1, [r0]
    9d04:	e12fff1e 	bx	lr

00009d08 <lowlevBlockCopyExecRelocatableLen>:
    9d08:	00000010 	.word	0x00000010
    9d0c:	e12fff1e 	bx	lr

00009d10 <lowlevGoto>:
    9d10:	e1a00000 	nop			; (mov r0, r0)
    9d14:	e12fff10 	bx	r0
    9d18:	e12fff1e 	bx	lr

00009d1c <lowlevStoreAbs8>:
    9d1c:	e1a00000 	nop			; (mov r0, r0)
    9d20:	e1a01001 	mov	r1, r1
    9d24:	e5c01000 	strb	r1, [r0]
    9d28:	e12fff1e 	bx	lr
    9d2c:	e12fff1e 	bx	lr
    9d30:	20200020 	.word	0x20200020

00009d34 <CommandHandler::static_hdlcPutCh(unsigned char)>:
    9d34:	e59f3038 	ldr	r3, [pc, #56]	; 9d74 <CommandHandler::static_hdlcPutCh(unsigned char)+0x40>
    9d38:	e5932000 	ldr	r2, [r3]
    9d3c:	e3520000 	cmp	r2, #0
    9d40:	012fff1e 	bxeq	lr
    9d44:	e5932004 	ldr	r2, [r3, #4]
    9d48:	e3520000 	cmp	r2, #0
    9d4c:	012fff1e 	bxeq	lr
    9d50:	e1a03000 	mov	r3, r0
    9d54:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    9d58:	e24dd00c 	sub	sp, sp, #12
    9d5c:	e28d0008 	add	r0, sp, #8
    9d60:	e5603004 	strb	r3, [r0, #-4]!
    9d64:	e3a01001 	mov	r1, #1
    9d68:	e12fff32 	blx	r2
    9d6c:	e28dd00c 	add	sp, sp, #12
    9d70:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    9d74:	0001662c 	.word	0x0001662c

00009d78 <CommandHandler::CommandHandler()>:
    9d78:	e92d4030 	push	{r4, r5, lr}
    9d7c:	e3a04000 	mov	r4, #0
    9d80:	e1a05000 	mov	r5, r0
    9d84:	e24dd00c 	sub	sp, sp, #12
    9d88:	e58d4000 	str	r4, [sp]
    9d8c:	e3a03001 	mov	r3, #1
    9d90:	e59f2040 	ldr	r2, [pc, #64]	; 9dd8 <CommandHandler::CommandHandler()+0x60>
    9d94:	e59f1040 	ldr	r1, [pc, #64]	; 9ddc <CommandHandler::CommandHandler()+0x64>
    9d98:	e2800008 	add	r0, r0, #8
    9d9c:	eb000172 	bl	a36c <MiniHDLC::MiniHDLC(void (*)(unsigned char), void (*)(unsigned char const*, int), bool, bool)>
    9da0:	e1a00005 	mov	r0, r5
    9da4:	e59f2034 	ldr	r2, [pc, #52]	; 9de0 <CommandHandler::CommandHandler()+0x68>
    9da8:	e2853901 	add	r3, r5, #16384	; 0x4000
    9dac:	e5834f9c 	str	r4, [r3, #3996]	; 0xf9c
    9db0:	e5834fa0 	str	r4, [r3, #4000]	; 0xfa0
    9db4:	e5834fa4 	str	r4, [r3, #4004]	; 0xfa4
    9db8:	e5834fa8 	str	r4, [r3, #4008]	; 0xfa8
    9dbc:	e5824004 	str	r4, [r2, #4]
    9dc0:	e5824008 	str	r4, [r2, #8]
    9dc4:	e5825000 	str	r5, [r2]
    9dc8:	e5854004 	str	r4, [r5, #4]
    9dcc:	e5854000 	str	r4, [r5]
    9dd0:	e28dd00c 	add	sp, sp, #12
    9dd4:	e8bd8030 	pop	{r4, r5, pc}
    9dd8:	0000a2b8 	.word	0x0000a2b8
    9ddc:	00009d34 	.word	0x00009d34
    9de0:	0001662c 	.word	0x0001662c

00009de4 <CommandHandler::~CommandHandler()>:
    9de4:	e12fff1e 	bx	lr

00009de8 <CommandHandler::handleBuffer(unsigned char const*, int)>:
    9de8:	e2800008 	add	r0, r0, #8
    9dec:	ea0001b9 	b	a4d8 <MiniHDLC::handleBuffer(unsigned char const*, int)>

00009df0 <CommandHandler::hdlcPutCh(unsigned char)>:
    9df0:	e59f3028 	ldr	r3, [pc, #40]	; 9e20 <CommandHandler::hdlcPutCh(unsigned char)+0x30>
    9df4:	e5933004 	ldr	r3, [r3, #4]
    9df8:	e3530000 	cmp	r3, #0
    9dfc:	012fff1e 	bxeq	lr
    9e00:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    9e04:	e24dd00c 	sub	sp, sp, #12
    9e08:	e28d0008 	add	r0, sp, #8
    9e0c:	e5601004 	strb	r1, [r0, #-4]!
    9e10:	e3a01001 	mov	r1, #1
    9e14:	e12fff33 	blx	r3
    9e18:	e28dd00c 	add	sp, sp, #12
    9e1c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    9e20:	0001662c 	.word	0x0001662c

00009e24 <CommandHandler::handleFileStart(char const*, unsigned char const*, int)>:
    9e24:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9e28:	e2804c4e 	add	r4, r0, #19968	; 0x4e00
    9e2c:	e2846044 	add	r6, r4, #68	; 0x44
    9e30:	e24dd018 	sub	sp, sp, #24
    9e34:	e1a05000 	mov	r5, r0
    9e38:	e1a02006 	mov	r2, r6
    9e3c:	e3a03064 	mov	r3, #100	; 0x64
    9e40:	e59f011c 	ldr	r0, [pc, #284]	; 9f64 <CommandHandler::handleFileStart(char const*, unsigned char const*, int)+0x140>
    9e44:	e1a07001 	mov	r7, r1
    9e48:	ebfffd01 	bl	9254 <jsonGetValueForKey(char const*, char const*, char*, int)>
    9e4c:	e3500000 	cmp	r0, #0
    9e50:	1a000001 	bne	9e5c <CommandHandler::handleFileStart(char const*, unsigned char const*, int)+0x38>
    9e54:	e28dd018 	add	sp, sp, #24
    9e58:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9e5c:	e2855901 	add	r5, r5, #16384	; 0x4000
    9e60:	e5952f9c 	ldr	r2, [r5, #3996]	; 0xf9c
    9e64:	e1a03006 	mov	r3, r6
    9e68:	e58d2000 	str	r2, [sp]
    9e6c:	e3a01003 	mov	r1, #3
    9e70:	e59f20f0 	ldr	r2, [pc, #240]	; 9f68 <CommandHandler::handleFileStart(char const*, unsigned char const*, int)+0x144>
    9e74:	e59f00f0 	ldr	r0, [pc, #240]	; 9f6c <CommandHandler::handleFileStart(char const*, unsigned char const*, int)+0x148>
    9e78:	ebfffcb3 	bl	914c <LogWrite(char const*, unsigned int, char const*, ...)>
    9e7c:	e3a03028 	mov	r3, #40	; 0x28
    9e80:	e28420a9 	add	r2, r4, #169	; 0xa9
    9e84:	e1a01007 	mov	r1, r7
    9e88:	e59f00e0 	ldr	r0, [pc, #224]	; 9f70 <CommandHandler::handleFileStart(char const*, unsigned char const*, int)+0x14c>
    9e8c:	ebfffcf0 	bl	9254 <jsonGetValueForKey(char const*, char const*, char*, int)>
    9e90:	e3500000 	cmp	r0, #0
    9e94:	0affffee 	beq	9e54 <CommandHandler::handleFileStart(char const*, unsigned char const*, int)+0x30>
    9e98:	e1a03006 	mov	r3, r6
    9e9c:	e59f20d0 	ldr	r2, [pc, #208]	; 9f74 <CommandHandler::handleFileStart(char const*, unsigned char const*, int)+0x150>
    9ea0:	e3a01003 	mov	r1, #3
    9ea4:	e59f00c0 	ldr	r0, [pc, #192]	; 9f6c <CommandHandler::handleFileStart(char const*, unsigned char const*, int)+0x148>
    9ea8:	ebfffca7 	bl	914c <LogWrite(char const*, unsigned int, char const*, ...)>
    9eac:	e28d200c 	add	r2, sp, #12
    9eb0:	e3a0300a 	mov	r3, #10
    9eb4:	e1a01007 	mov	r1, r7
    9eb8:	e59f00b8 	ldr	r0, [pc, #184]	; 9f78 <CommandHandler::handleFileStart(char const*, unsigned char const*, int)+0x154>
    9ebc:	ebfffce4 	bl	9254 <jsonGetValueForKey(char const*, char const*, char*, int)>
    9ec0:	e3500000 	cmp	r0, #0
    9ec4:	0affffe2 	beq	9e54 <CommandHandler::handleFileStart(char const*, unsigned char const*, int)+0x30>
    9ec8:	e28d300c 	add	r3, sp, #12
    9ecc:	e59f20a8 	ldr	r2, [pc, #168]	; 9f7c <CommandHandler::handleFileStart(char const*, unsigned char const*, int)+0x158>
    9ed0:	e3a01003 	mov	r1, #3
    9ed4:	e59f0090 	ldr	r0, [pc, #144]	; 9f6c <CommandHandler::handleFileStart(char const*, unsigned char const*, int)+0x148>
    9ed8:	ebfffc9b 	bl	914c <LogWrite(char const*, unsigned int, char const*, ...)>
    9edc:	e28d000c 	add	r0, sp, #12
    9ee0:	e3a0200a 	mov	r2, #10
    9ee4:	e3a01000 	mov	r1, #0
    9ee8:	eb001f7b 	bl	11cdc <strtoul>
    9eec:	e2508000 	subs	r8, r0, #0
    9ef0:	daffffd7 	ble	9e54 <CommandHandler::handleFileStart(char const*, unsigned char const*, int)+0x30>
    9ef4:	e1a03008 	mov	r3, r8
    9ef8:	e59f2080 	ldr	r2, [pc, #128]	; 9f80 <CommandHandler::handleFileStart(char const*, unsigned char const*, int)+0x15c>
    9efc:	e3a01003 	mov	r1, #3
    9f00:	e59f0064 	ldr	r0, [pc, #100]	; 9f6c <CommandHandler::handleFileStart(char const*, unsigned char const*, int)+0x148>
    9f04:	ebfffc90 	bl	914c <LogWrite(char const*, unsigned int, char const*, ...)>
    9f08:	e1a01007 	mov	r1, r7
    9f0c:	e28400d2 	add	r0, r4, #210	; 0xd2
    9f10:	e3a020c8 	mov	r2, #200	; 0xc8
    9f14:	ebfffcbd 	bl	9210 <strlcpy(char*, char const*, unsigned int)>
    9f18:	e5950f9c 	ldr	r0, [r5, #3996]	; 0xf9c
    9f1c:	e3500000 	cmp	r0, #0
    9f20:	0a000000 	beq	9f28 <CommandHandler::handleFileStart(char const*, unsigned char const*, int)+0x104>
    9f24:	eb00221d 	bl	127a0 <operator delete[](void*)>
    9f28:	e1a00008 	mov	r0, r8
    9f2c:	eb002219 	bl	12798 <operator new[](unsigned int)>
    9f30:	e3a02000 	mov	r2, #0
    9f34:	e5850f9c 	str	r0, [r5, #3996]	; 0xf9c
    9f38:	e1a03006 	mov	r3, r6
    9f3c:	e58d0000 	str	r0, [sp]
    9f40:	e3a01003 	mov	r1, #3
    9f44:	e5858fa0 	str	r8, [r5, #4000]	; 0xfa0
    9f48:	e59f001c 	ldr	r0, [pc, #28]	; 9f6c <CommandHandler::handleFileStart(char const*, unsigned char const*, int)+0x148>
    9f4c:	e58d8004 	str	r8, [sp, #4]
    9f50:	e5852fa4 	str	r2, [r5, #4004]	; 0xfa4
    9f54:	e5852fa8 	str	r2, [r5, #4008]	; 0xfa8
    9f58:	e59f2024 	ldr	r2, [pc, #36]	; 9f84 <CommandHandler::handleFileStart(char const*, unsigned char const*, int)+0x160>
    9f5c:	ebfffc7a 	bl	914c <LogWrite(char const*, unsigned int, char const*, ...)>
    9f60:	eaffffbb 	b	9e54 <CommandHandler::handleFileStart(char const*, unsigned char const*, int)+0x30>
    9f64:	000142d0 	.word	0x000142d0
    9f68:	000142dc 	.word	0x000142dc
    9f6c:	000142c0 	.word	0x000142c0
    9f70:	000142f8 	.word	0x000142f8
    9f74:	00014304 	.word	0x00014304
    9f78:	00014318 	.word	0x00014318
    9f7c:	00014320 	.word	0x00014320
    9f80:	00014338 	.word	0x00014338
    9f84:	0001434c 	.word	0x0001434c

00009f88 <CommandHandler::handleFileBlock(char const*, unsigned char const*, int)>:
    9f88:	e92d4070 	push	{r4, r5, r6, lr}
    9f8c:	e2806901 	add	r6, r0, #16384	; 0x4000
    9f90:	e5960f9c 	ldr	r0, [r6, #3996]	; 0xf9c
    9f94:	e24dd018 	sub	sp, sp, #24
    9f98:	e3500000 	cmp	r0, #0
    9f9c:	0a000007 	beq	9fc0 <CommandHandler::handleFileBlock(char const*, unsigned char const*, int)+0x38>
    9fa0:	e1a05003 	mov	r5, r3
    9fa4:	e1a04002 	mov	r4, r2
    9fa8:	e3a0300a 	mov	r3, #10
    9fac:	e28d200c 	add	r2, sp, #12
    9fb0:	e59f007c 	ldr	r0, [pc, #124]	; a034 <CommandHandler::handleFileBlock(char const*, unsigned char const*, int)+0xac>
    9fb4:	ebfffca6 	bl	9254 <jsonGetValueForKey(char const*, char const*, char*, int)>
    9fb8:	e3500000 	cmp	r0, #0
    9fbc:	1a000001 	bne	9fc8 <CommandHandler::handleFileBlock(char const*, unsigned char const*, int)+0x40>
    9fc0:	e28dd018 	add	sp, sp, #24
    9fc4:	e8bd8070 	pop	{r4, r5, r6, pc}
    9fc8:	e28d000c 	add	r0, sp, #12
    9fcc:	e3a0200a 	mov	r2, #10
    9fd0:	e3a01000 	mov	r1, #0
    9fd4:	eb001f40 	bl	11cdc <strtoul>
    9fd8:	e3500000 	cmp	r0, #0
    9fdc:	bafffff7 	blt	9fc0 <CommandHandler::handleFileBlock(char const*, unsigned char const*, int)+0x38>
    9fe0:	e5963fa0 	ldr	r3, [r6, #4000]	; 0xfa0
    9fe4:	e0802005 	add	r2, r0, r5
    9fe8:	e1520003 	cmp	r2, r3
    9fec:	cafffff3 	bgt	9fc0 <CommandHandler::handleFileBlock(char const*, unsigned char const*, int)+0x38>
    9ff0:	e5963f9c 	ldr	r3, [r6, #3996]	; 0xf9c
    9ff4:	e1a01004 	mov	r1, r4
    9ff8:	e1a02005 	mov	r2, r5
    9ffc:	e0830000 	add	r0, r3, r0
    a000:	eb001f97 	bl	11e64 <memcpy>
    a004:	e5963fa4 	ldr	r3, [r6, #4004]	; 0xfa4
    a008:	e5961fa8 	ldr	r1, [r6, #4008]	; 0xfa8
    a00c:	e0853003 	add	r3, r5, r3
    a010:	e2811001 	add	r1, r1, #1
    a014:	e5861fa8 	str	r1, [r6, #4008]	; 0xfa8
    a018:	e5863fa4 	str	r3, [r6, #4004]	; 0xfa4
    a01c:	e59f2014 	ldr	r2, [pc, #20]	; a038 <CommandHandler::handleFileBlock(char const*, unsigned char const*, int)+0xb0>
    a020:	e58d1000 	str	r1, [sp]
    a024:	e59f0010 	ldr	r0, [pc, #16]	; a03c <CommandHandler::handleFileBlock(char const*, unsigned char const*, int)+0xb4>
    a028:	e3a01004 	mov	r1, #4
    a02c:	ebfffc46 	bl	914c <LogWrite(char const*, unsigned int, char const*, ...)>
    a030:	eaffffe2 	b	9fc0 <CommandHandler::handleFileBlock(char const*, unsigned char const*, int)+0x38>
    a034:	00014374 	.word	0x00014374
    a038:	0001437c 	.word	0x0001437c
    a03c:	000142c0 	.word	0x000142c0

0000a040 <CommandHandler::handleFileEnd(char const*, unsigned char const*, int)>:
    a040:	e92d4070 	push	{r4, r5, r6, lr}
    a044:	e2805901 	add	r5, r0, #16384	; 0x4000
    a048:	e5953f9c 	ldr	r3, [r5, #3996]	; 0xf9c
    a04c:	e24dd018 	sub	sp, sp, #24
    a050:	e3530000 	cmp	r3, #0
    a054:	0a000006 	beq	a074 <CommandHandler::handleFileEnd(char const*, unsigned char const*, int)+0x34>
    a058:	e1a04000 	mov	r4, r0
    a05c:	e28d200c 	add	r2, sp, #12
    a060:	e3a0300a 	mov	r3, #10
    a064:	e59f00ac 	ldr	r0, [pc, #172]	; a118 <CommandHandler::handleFileEnd(char const*, unsigned char const*, int)+0xd8>
    a068:	ebfffc79 	bl	9254 <jsonGetValueForKey(char const*, char const*, char*, int)>
    a06c:	e3500000 	cmp	r0, #0
    a070:	1a000001 	bne	a07c <CommandHandler::handleFileEnd(char const*, unsigned char const*, int)+0x3c>
    a074:	e28dd018 	add	sp, sp, #24
    a078:	e8bd8070 	pop	{r4, r5, r6, pc}
    a07c:	e3a0200a 	mov	r2, #10
    a080:	e28d000c 	add	r0, sp, #12
    a084:	e3a01000 	mov	r1, #0
    a088:	eb001f13 	bl	11cdc <strtoul>
    a08c:	e5952fa8 	ldr	r2, [r5, #4008]	; 0xfa8
    a090:	e2844c4e 	add	r4, r4, #19968	; 0x4e00
    a094:	e1520000 	cmp	r2, r0
    a098:	e2846044 	add	r6, r4, #68	; 0x44
    a09c:	0a000008 	beq	a0c4 <CommandHandler::handleFileEnd(char const*, unsigned char const*, int)+0x84>
    a0a0:	e58d0004 	str	r0, [sp, #4]
    a0a4:	e58d2000 	str	r2, [sp]
    a0a8:	e1a03006 	mov	r3, r6
    a0ac:	e59f2068 	ldr	r2, [pc, #104]	; a11c <CommandHandler::handleFileEnd(char const*, unsigned char const*, int)+0xdc>
    a0b0:	e3a01002 	mov	r1, #2
    a0b4:	e59f0064 	ldr	r0, [pc, #100]	; a120 <CommandHandler::handleFileEnd(char const*, unsigned char const*, int)+0xe0>
    a0b8:	ebfffc23 	bl	914c <LogWrite(char const*, unsigned int, char const*, ...)>
    a0bc:	e28dd018 	add	sp, sp, #24
    a0c0:	e8bd8070 	pop	{r4, r5, r6, pc}
    a0c4:	e28400a9 	add	r0, r4, #169	; 0xa9
    a0c8:	e59f1054 	ldr	r1, [pc, #84]	; a124 <CommandHandler::handleFileEnd(char const*, unsigned char const*, int)+0xe4>
    a0cc:	eb001e37 	bl	119b0 <strcasecmp>
    a0d0:	e5952fa4 	ldr	r2, [r5, #4004]	; 0xfa4
    a0d4:	e3500000 	cmp	r0, #0
    a0d8:	e1a03006 	mov	r3, r6
    a0dc:	e58d2000 	str	r2, [sp]
    a0e0:	1a000007 	bne	a104 <CommandHandler::handleFileEnd(char const*, unsigned char const*, int)+0xc4>
    a0e4:	e59f203c 	ldr	r2, [pc, #60]	; a128 <CommandHandler::handleFileEnd(char const*, unsigned char const*, int)+0xe8>
    a0e8:	e3a01004 	mov	r1, #4
    a0ec:	e59f002c 	ldr	r0, [pc, #44]	; a120 <CommandHandler::handleFileEnd(char const*, unsigned char const*, int)+0xe0>
    a0f0:	ebfffc15 	bl	914c <LogWrite(char const*, unsigned int, char const*, ...)>
    a0f4:	e5951fa4 	ldr	r1, [r5, #4004]	; 0xfa4
    a0f8:	e5950f9c 	ldr	r0, [r5, #3996]	; 0xf9c
    a0fc:	ebfffe9b 	bl	9b70 <OTAUpdate::performUpdate(unsigned char*, int)>
    a100:	eaffffdb 	b	a074 <CommandHandler::handleFileEnd(char const*, unsigned char const*, int)+0x34>
    a104:	e59f2020 	ldr	r2, [pc, #32]	; a12c <CommandHandler::handleFileEnd(char const*, unsigned char const*, int)+0xec>
    a108:	e3a01004 	mov	r1, #4
    a10c:	e59f000c 	ldr	r0, [pc, #12]	; a120 <CommandHandler::handleFileEnd(char const*, unsigned char const*, int)+0xe0>
    a110:	ebfffc0d 	bl	914c <LogWrite(char const*, unsigned int, char const*, ...)>
    a114:	eaffffd6 	b	a074 <CommandHandler::handleFileEnd(char const*, unsigned char const*, int)+0x34>
    a118:	00014398 	.word	0x00014398
    a11c:	000143a4 	.word	0x000143a4
    a120:	000142c0 	.word	0x000142c0
    a124:	000143d0 	.word	0x000143d0
    a128:	000143dc 	.word	0x000143dc
    a12c:	00014408 	.word	0x00014408

0000a130 <CommandHandler::processCommand(char const*, unsigned char const*, int)>:
    a130:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    a134:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    a138:	e1a05000 	mov	r5, r0
    a13c:	e1a06002 	mov	r6, r2
    a140:	e1a07003 	mov	r7, r3
    a144:	e28d2008 	add	r2, sp, #8
    a148:	e3a0301e 	mov	r3, #30
    a14c:	e59f00c8 	ldr	r0, [pc, #200]	; a21c <CommandHandler::processCommand(char const*, unsigned char const*, int)+0xec>
    a150:	e1a04001 	mov	r4, r1
    a154:	ebfffc3e 	bl	9254 <jsonGetValueForKey(char const*, char const*, char*, int)>
    a158:	e3500000 	cmp	r0, #0
    a15c:	1a000001 	bne	a168 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x38>
    a160:	e28dd02c 	add	sp, sp, #44	; 0x2c
    a164:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    a168:	e28d3008 	add	r3, sp, #8
    a16c:	e58d3000 	str	r3, [sp]
    a170:	e59f20a8 	ldr	r2, [pc, #168]	; a220 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0xf0>
    a174:	e1a03004 	mov	r3, r4
    a178:	e3a01003 	mov	r1, #3
    a17c:	e59f00a0 	ldr	r0, [pc, #160]	; a224 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0xf4>
    a180:	ebfffbf1 	bl	914c <LogWrite(char const*, unsigned int, char const*, ...)>
    a184:	e59f109c 	ldr	r1, [pc, #156]	; a228 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0xf8>
    a188:	e28d0008 	add	r0, sp, #8
    a18c:	eb001e07 	bl	119b0 <strcasecmp>
    a190:	e3500000 	cmp	r0, #0
    a194:	0a00000a 	beq	a1c4 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x94>
    a198:	e59f108c 	ldr	r1, [pc, #140]	; a22c <CommandHandler::processCommand(char const*, unsigned char const*, int)+0xfc>
    a19c:	e28d0008 	add	r0, sp, #8
    a1a0:	eb001e02 	bl	119b0 <strcasecmp>
    a1a4:	e3500000 	cmp	r0, #0
    a1a8:	1a000010 	bne	a1f0 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0xc0>
    a1ac:	e1a03007 	mov	r3, r7
    a1b0:	e1a02006 	mov	r2, r6
    a1b4:	e1a01004 	mov	r1, r4
    a1b8:	e1a00005 	mov	r0, r5
    a1bc:	ebffff71 	bl	9f88 <CommandHandler::handleFileBlock(char const*, unsigned char const*, int)>
    a1c0:	eaffffe6 	b	a160 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x30>
    a1c4:	e59f2064 	ldr	r2, [pc, #100]	; a230 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x100>
    a1c8:	e3a01003 	mov	r1, #3
    a1cc:	e59f0050 	ldr	r0, [pc, #80]	; a224 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0xf4>
    a1d0:	ebfffbdd 	bl	914c <LogWrite(char const*, unsigned int, char const*, ...)>
    a1d4:	e1a03007 	mov	r3, r7
    a1d8:	e1a02006 	mov	r2, r6
    a1dc:	e1a01004 	mov	r1, r4
    a1e0:	e1a00005 	mov	r0, r5
    a1e4:	ebffff0e 	bl	9e24 <CommandHandler::handleFileStart(char const*, unsigned char const*, int)>
    a1e8:	e28dd02c 	add	sp, sp, #44	; 0x2c
    a1ec:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    a1f0:	e28d0008 	add	r0, sp, #8
    a1f4:	e59f1038 	ldr	r1, [pc, #56]	; a234 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x104>
    a1f8:	eb001dec 	bl	119b0 <strcasecmp>
    a1fc:	e3500000 	cmp	r0, #0
    a200:	1affffd6 	bne	a160 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x30>
    a204:	e1a03007 	mov	r3, r7
    a208:	e1a02006 	mov	r2, r6
    a20c:	e1a01004 	mov	r1, r4
    a210:	e1a00005 	mov	r0, r5
    a214:	ebffff89 	bl	a040 <CommandHandler::handleFileEnd(char const*, unsigned char const*, int)>
    a218:	eaffffd0 	b	a160 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x30>
    a21c:	00014420 	.word	0x00014420
    a220:	00014428 	.word	0x00014428
    a224:	000142c0 	.word	0x000142c0
    a228:	0001444c 	.word	0x0001444c
    a22c:	00014470 	.word	0x00014470
    a230:	00014454 	.word	0x00014454
    a234:	00014478 	.word	0x00014478

0000a238 <CommandHandler::hdlcFrameRx(unsigned char const*, int)>:
    a238:	e92d4070 	push	{r4, r5, r6, lr}
    a23c:	e1a04002 	mov	r4, r2
    a240:	e1c020d0 	ldrd	r2, [r0]
    a244:	e1a06001 	mov	r6, r1
    a248:	e24dd0d8 	sub	sp, sp, #216	; 0xd8
    a24c:	e0843003 	add	r3, r4, r3
    a250:	e2822001 	add	r2, r2, #1
    a254:	e1c020f0 	strd	r2, [r0]
    a258:	e1a05000 	mov	r5, r0
    a25c:	e58d2000 	str	r2, [sp]
    a260:	e3a01003 	mov	r1, #3
    a264:	e59f2044 	ldr	r2, [pc, #68]	; a2b0 <CommandHandler::hdlcFrameRx(unsigned char const*, int)+0x78>
    a268:	e59f0044 	ldr	r0, [pc, #68]	; a2b4 <CommandHandler::hdlcFrameRx(unsigned char const*, int)+0x7c>
    a26c:	ebfffbb6 	bl	914c <LogWrite(char const*, unsigned int, char const*, ...)>
    a270:	e1a01006 	mov	r1, r6
    a274:	e3a020c8 	mov	r2, #200	; 0xc8
    a278:	e28d000c 	add	r0, sp, #12
    a27c:	ebfffbe3 	bl	9210 <strlcpy(char*, char const*, unsigned int)>
    a280:	e28d000c 	add	r0, sp, #12
    a284:	eb001da4 	bl	1191c <strlen>
    a288:	e0443000 	sub	r3, r4, r0
    a28c:	e2802001 	add	r2, r0, #1
    a290:	e2433001 	sub	r3, r3, #1
    a294:	e0862002 	add	r2, r6, r2
    a298:	e1c33fc3 	bic	r3, r3, r3, asr #31
    a29c:	e28d100c 	add	r1, sp, #12
    a2a0:	e1a00005 	mov	r0, r5
    a2a4:	ebffffa1 	bl	a130 <CommandHandler::processCommand(char const*, unsigned char const*, int)>
    a2a8:	e28dd0d8 	add	sp, sp, #216	; 0xd8
    a2ac:	e8bd8070 	pop	{r4, r5, r6, pc}
    a2b0:	00014480 	.word	0x00014480
    a2b4:	000142c0 	.word	0x000142c0

0000a2b8 <CommandHandler::static_hdlcFrameRx(unsigned char const*, int)>:
    a2b8:	e59f3018 	ldr	r3, [pc, #24]	; a2d8 <CommandHandler::static_hdlcFrameRx(unsigned char const*, int)+0x20>
    a2bc:	e5933000 	ldr	r3, [r3]
    a2c0:	e3530000 	cmp	r3, #0
    a2c4:	012fff1e 	bxeq	lr
    a2c8:	e1a02001 	mov	r2, r1
    a2cc:	e1a01000 	mov	r1, r0
    a2d0:	e1a00003 	mov	r0, r3
    a2d4:	eaffffd7 	b	a238 <CommandHandler::hdlcFrameRx(unsigned char const*, int)>
    a2d8:	0001662c 	.word	0x0001662c

0000a2dc <CommandHandler::service()>:
    a2dc:	e12fff1e 	bx	lr

0000a2e0 <MiniHDLC::handleChar(unsigned char) [clone .part.0]>:
    a2e0:	e92d4010 	push	{r4, lr}
    a2e4:	e5903004 	ldr	r3, [r0, #4]
    a2e8:	e1a04000 	mov	r4, r0
    a2ec:	e3530001 	cmp	r3, #1
    a2f0:	da00000d 	ble	a32c <MiniHDLC::handleChar(unsigned char) [clone .part.0]+0x4c>
    a2f4:	e5d02001 	ldrb	r2, [r0, #1]
    a2f8:	e2431002 	sub	r1, r3, #2
    a2fc:	e0803003 	add	r3, r0, r3
    a300:	e0800001 	add	r0, r0, r1
    a304:	e3520000 	cmp	r2, #0
    a308:	e5d33017 	ldrb	r3, [r3, #23]
    a30c:	e5d02018 	ldrb	r2, [r0, #24]
    a310:	01823403 	orreq	r3, r2, r3, lsl #8
    a314:	11833402 	orrne	r3, r3, r2, lsl #8
    a318:	e6bf3073 	sxth	r3, r3
    a31c:	e1d420b8 	ldrh	r2, [r4, #8]
    a320:	e6ff3073 	uxth	r3, r3
    a324:	e1520003 	cmp	r2, r3
    a328:	0a000005 	beq	a344 <MiniHDLC::handleChar(unsigned char) [clone .part.0]+0x64>
    a32c:	e3a03000 	mov	r3, #0
    a330:	e3e02000 	mvn	r2, #0
    a334:	e5c4300a 	strb	r3, [r4, #10]
    a338:	e5843004 	str	r3, [r4, #4]
    a33c:	e1c420b8 	strh	r2, [r4, #8]
    a340:	e8bd8010 	pop	{r4, pc}
    a344:	e3a02000 	mov	r2, #0
    a348:	e59f3018 	ldr	r3, [pc, #24]	; a368 <MiniHDLC::handleChar(unsigned char) [clone .part.0]+0x88>
    a34c:	e5c02018 	strb	r2, [r0, #24]
    a350:	e5933000 	ldr	r3, [r3]
    a354:	e1530002 	cmp	r3, r2
    a358:	0afffff3 	beq	a32c <MiniHDLC::handleChar(unsigned char) [clone .part.0]+0x4c>
    a35c:	e2840018 	add	r0, r4, #24
    a360:	e12fff33 	blx	r3
    a364:	eafffff0 	b	a32c <MiniHDLC::handleChar(unsigned char) [clone .part.0]+0x4c>
    a368:	00016638 	.word	0x00016638

0000a36c <MiniHDLC::MiniHDLC(void (*)(unsigned char), void (*)(unsigned char const*, int), bool, bool)>:
    a36c:	e92d4030 	push	{r4, r5, lr}
    a370:	e3a0e000 	mov	lr, #0
    a374:	e3e05000 	mvn	r5, #0
    a378:	e59f4030 	ldr	r4, [pc, #48]	; a3b0 <MiniHDLC::MiniHDLC(void (*)(unsigned char), void (*)(unsigned char const*, int), bool, bool)+0x44>
    a37c:	e1c050b8 	strh	r5, [r0, #8]
    a380:	e5842000 	str	r2, [r4]
    a384:	e5dd200c 	ldrb	r2, [sp, #12]
    a388:	e5841004 	str	r1, [r4, #4]
    a38c:	e580e004 	str	lr, [r0, #4]
    a390:	e5c03001 	strb	r3, [r0, #1]
    a394:	e5c02000 	strb	r2, [r0]
    a398:	e5c0e00a 	strb	lr, [r0, #10]
    a39c:	e5c0e00b 	strb	lr, [r0, #11]
    a3a0:	e5c0e00c 	strb	lr, [r0, #12]
    a3a4:	e580e010 	str	lr, [r0, #16]
    a3a8:	e580e014 	str	lr, [r0, #20]
    a3ac:	e8bd8030 	pop	{r4, r5, pc}
    a3b0:	00016638 	.word	0x00016638

0000a3b4 <MiniHDLC::handleChar(unsigned char)>:
    a3b4:	e351007e 	cmp	r1, #126	; 0x7e
    a3b8:	e1a03000 	mov	r3, r0
    a3bc:	0a00001e 	beq	a43c <MiniHDLC::handleChar(unsigned char)+0x88>
    a3c0:	e5d0200a 	ldrb	r2, [r0, #10]
    a3c4:	e3520000 	cmp	r2, #0
    a3c8:	1a000017 	bne	a42c <MiniHDLC::handleChar(unsigned char)+0x78>
    a3cc:	e351007d 	cmp	r1, #125	; 0x7d
    a3d0:	0a00001a 	beq	a440 <MiniHDLC::handleChar(unsigned char)+0x8c>
    a3d4:	e5932004 	ldr	r2, [r3, #4]
    a3d8:	e0830002 	add	r0, r3, r2
    a3dc:	e3520001 	cmp	r2, #1
    a3e0:	e5c01018 	strb	r1, [r0, #24]
    a3e4:	da000007 	ble	a408 <MiniHDLC::handleChar(unsigned char)+0x54>
    a3e8:	e5d01016 	ldrb	r1, [r0, #22]
    a3ec:	e1d300b8 	ldrh	r0, [r3, #8]
    a3f0:	e59fc054 	ldr	ip, [pc, #84]	; a44c <MiniHDLC::handleChar(unsigned char)+0x98>
    a3f4:	e0211420 	eor	r1, r1, r0, lsr #8
    a3f8:	e1a01081 	lsl	r1, r1, #1
    a3fc:	e19c10b1 	ldrh	r1, [ip, r1]
    a400:	e0211400 	eor	r1, r1, r0, lsl #8
    a404:	e1c310b8 	strh	r1, [r3, #8]
    a408:	e59f1040 	ldr	r1, [pc, #64]	; a450 <MiniHDLC::handleChar(unsigned char)+0x9c>
    a40c:	e2822001 	add	r2, r2, #1
    a410:	e1520001 	cmp	r2, r1
    a414:	03a01000 	moveq	r1, #0
    a418:	03e02000 	mvneq	r2, #0
    a41c:	15832004 	strne	r2, [r3, #4]
    a420:	05831004 	streq	r1, [r3, #4]
    a424:	01c320b8 	strheq	r2, [r3, #8]
    a428:	e12fff1e 	bx	lr
    a42c:	e3a02000 	mov	r2, #0
    a430:	e2211020 	eor	r1, r1, #32
    a434:	e5c0200a 	strb	r2, [r0, #10]
    a438:	eaffffe5 	b	a3d4 <MiniHDLC::handleChar(unsigned char)+0x20>
    a43c:	eaffffa7 	b	a2e0 <MiniHDLC::handleChar(unsigned char) [clone .part.0]>
    a440:	e3a02001 	mov	r2, #1
    a444:	e5c0200a 	strb	r2, [r0, #10]
    a448:	e12fff1e 	bx	lr
    a44c:	00014498 	.word	0x00014498
    a450:	00004e20 	.word	0x00004e20

0000a454 <MiniHDLC::handleBit(unsigned char)>:
    a454:	e3510000 	cmp	r1, #0
    a458:	13e0107f 	mvnne	r1, #127	; 0x7f
    a45c:	e5d0300b 	ldrb	r3, [r0, #11]
    a460:	e92d4010 	push	{r4, lr}
    a464:	e1a030a3 	lsr	r3, r3, #1
    a468:	11833001 	orrne	r3, r3, r1
    a46c:	e6ef3073 	uxtb	r3, r3
    a470:	e353007e 	cmp	r3, #126	; 0x7e
    a474:	e1a04000 	mov	r4, r0
    a478:	e5c0300b 	strb	r3, [r0, #11]
    a47c:	0a000010 	beq	a4c4 <MiniHDLC::handleBit(unsigned char)+0x70>
    a480:	e20330fc 	and	r3, r3, #252	; 0xfc
    a484:	e353007c 	cmp	r3, #124	; 0x7c
    a488:	08bd8010 	popeq	{r4, pc}
    a48c:	e5d0200c 	ldrb	r2, [r0, #12]
    a490:	e5903010 	ldr	r3, [r0, #16]
    a494:	e18110a2 	orr	r1, r1, r2, lsr #1
    a498:	e2833001 	add	r3, r3, #1
    a49c:	e6ef1071 	uxtb	r1, r1
    a4a0:	e3530008 	cmp	r3, #8
    a4a4:	e5c0100c 	strb	r1, [r0, #12]
    a4a8:	e5803010 	str	r3, [r0, #16]
    a4ac:	18bd8010 	popne	{r4, pc}
    a4b0:	ebffffbf 	bl	a3b4 <MiniHDLC::handleChar(unsigned char)>
    a4b4:	e3a03000 	mov	r3, #0
    a4b8:	e5c4300c 	strb	r3, [r4, #12]
    a4bc:	e5843010 	str	r3, [r4, #16]
    a4c0:	e8bd8010 	pop	{r4, pc}
    a4c4:	ebffff85 	bl	a2e0 <MiniHDLC::handleChar(unsigned char) [clone .part.0]>
    a4c8:	e3a03000 	mov	r3, #0
    a4cc:	e5c4300c 	strb	r3, [r4, #12]
    a4d0:	e5843010 	str	r3, [r4, #16]
    a4d4:	e8bd8010 	pop	{r4, pc}

0000a4d8 <MiniHDLC::handleBuffer(unsigned char const*, int)>:
    a4d8:	e92d4070 	push	{r4, r5, r6, lr}
    a4dc:	e2525000 	subs	r5, r2, #0
    a4e0:	d8bd8070 	pople	{r4, r5, r6, pc}
    a4e4:	e1a06000 	mov	r6, r0
    a4e8:	e2414001 	sub	r4, r1, #1
    a4ec:	e0845005 	add	r5, r4, r5
    a4f0:	e5f41001 	ldrb	r1, [r4, #1]!
    a4f4:	e1a00006 	mov	r0, r6
    a4f8:	ebffffad 	bl	a3b4 <MiniHDLC::handleChar(unsigned char)>
    a4fc:	e1540005 	cmp	r4, r5
    a500:	1afffffa 	bne	a4f0 <MiniHDLC::handleBuffer(unsigned char const*, int)+0x18>
    a504:	e8bd8070 	pop	{r4, r5, r6, pc}

0000a508 <MiniHDLC::crcUpdateCCITT(unsigned short, unsigned char)>:
    a508:	e59f3014 	ldr	r3, [pc, #20]	; a524 <MiniHDLC::crcUpdateCCITT(unsigned short, unsigned char)+0x1c>
    a50c:	e0222421 	eor	r2, r2, r1, lsr #8
    a510:	e1a02082 	lsl	r2, r2, #1
    a514:	e19300b2 	ldrh	r0, [r3, r2]
    a518:	e0200401 	eor	r0, r0, r1, lsl #8
    a51c:	e6ff0070 	uxth	r0, r0
    a520:	e12fff1e 	bx	lr
    a524:	00014498 	.word	0x00014498

0000a528 <MiniHDLC::sendChar(unsigned char)>:
    a528:	e92d4070 	push	{r4, r5, r6, lr}
    a52c:	e5d03000 	ldrb	r3, [r0]
    a530:	e59f6048 	ldr	r6, [pc, #72]	; a580 <MiniHDLC::sendChar(unsigned char)+0x58>
    a534:	e3530000 	cmp	r3, #0
    a538:	e1a04001 	mov	r4, r1
    a53c:	e5963004 	ldr	r3, [r6, #4]
    a540:	0a000009 	beq	a56c <MiniHDLC::sendChar(unsigned char)+0x44>
    a544:	e3a05008 	mov	r5, #8
    a548:	e3530000 	cmp	r3, #0
    a54c:	e2040001 	and	r0, r4, #1
    a550:	0a000000 	beq	a558 <MiniHDLC::sendChar(unsigned char)+0x30>
    a554:	e12fff33 	blx	r3
    a558:	e2555001 	subs	r5, r5, #1
    a55c:	e1a040a4 	lsr	r4, r4, #1
    a560:	08bd8070 	popeq	{r4, r5, r6, pc}
    a564:	e5963004 	ldr	r3, [r6, #4]
    a568:	eafffff6 	b	a548 <MiniHDLC::sendChar(unsigned char)+0x20>
    a56c:	e3530000 	cmp	r3, #0
    a570:	08bd8070 	popeq	{r4, r5, r6, pc}
    a574:	e1a00001 	mov	r0, r1
    a578:	e8bd4070 	pop	{r4, r5, r6, lr}
    a57c:	e12fff13 	bx	r3
    a580:	00016638 	.word	0x00016638

0000a584 <MiniHDLC::sendCharWithStuffing(unsigned char)>:
    a584:	e5d03000 	ldrb	r3, [r0]
    a588:	e3530000 	cmp	r3, #0
    a58c:	0a00001f 	beq	a610 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x8c>
    a590:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    a594:	e1a09000 	mov	r9, r0
    a598:	e1a04001 	mov	r4, r1
    a59c:	e3a05008 	mov	r5, #8
    a5a0:	e3a08000 	mov	r8, #0
    a5a4:	e59f7068 	ldr	r7, [pc, #104]	; a614 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x90>
    a5a8:	ea000007 	b	a5cc <MiniHDLC::sendCharWithStuffing(unsigned char)+0x48>
    a5ac:	e5993014 	ldr	r3, [r9, #20]
    a5b0:	e2833001 	add	r3, r3, #1
    a5b4:	e3530005 	cmp	r3, #5
    a5b8:	e5893014 	str	r3, [r9, #20]
    a5bc:	0a00000c 	beq	a5f4 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x70>
    a5c0:	e2555001 	subs	r5, r5, #1
    a5c4:	e1a040a4 	lsr	r4, r4, #1
    a5c8:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    a5cc:	e5973004 	ldr	r3, [r7, #4]
    a5d0:	e2046001 	and	r6, r4, #1
    a5d4:	e3530000 	cmp	r3, #0
    a5d8:	0a000001 	beq	a5e4 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x60>
    a5dc:	e1a00006 	mov	r0, r6
    a5e0:	e12fff33 	blx	r3
    a5e4:	e3560000 	cmp	r6, #0
    a5e8:	1affffef 	bne	a5ac <MiniHDLC::sendCharWithStuffing(unsigned char)+0x28>
    a5ec:	e5898014 	str	r8, [r9, #20]
    a5f0:	eafffff2 	b	a5c0 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x3c>
    a5f4:	e5973004 	ldr	r3, [r7, #4]
    a5f8:	e3530000 	cmp	r3, #0
    a5fc:	0afffffa 	beq	a5ec <MiniHDLC::sendCharWithStuffing(unsigned char)+0x68>
    a600:	e3a00000 	mov	r0, #0
    a604:	e12fff33 	blx	r3
    a608:	e5898014 	str	r8, [r9, #20]
    a60c:	eaffffeb 	b	a5c0 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x3c>
    a610:	eaffffc4 	b	a528 <MiniHDLC::sendChar(unsigned char)>
    a614:	00016638 	.word	0x00016638

0000a618 <MiniHDLC::sendEscaped(unsigned char)>:
    a618:	e241307d 	sub	r3, r1, #125	; 0x7d
    a61c:	e3530001 	cmp	r3, #1
    a620:	e92d4070 	push	{r4, r5, r6, lr}
    a624:	e1a04001 	mov	r4, r1
    a628:	e1a05000 	mov	r5, r0
    a62c:	9a000003 	bls	a640 <MiniHDLC::sendEscaped(unsigned char)+0x28>
    a630:	e1a01004 	mov	r1, r4
    a634:	e1a00005 	mov	r0, r5
    a638:	e8bd4070 	pop	{r4, r5, r6, lr}
    a63c:	eaffffd0 	b	a584 <MiniHDLC::sendCharWithStuffing(unsigned char)>
    a640:	e3a0107d 	mov	r1, #125	; 0x7d
    a644:	e2244020 	eor	r4, r4, #32
    a648:	ebffffcd 	bl	a584 <MiniHDLC::sendCharWithStuffing(unsigned char)>
    a64c:	e1a01004 	mov	r1, r4
    a650:	e1a00005 	mov	r0, r5
    a654:	e8bd4070 	pop	{r4, r5, r6, lr}
    a658:	eaffffc9 	b	a584 <MiniHDLC::sendCharWithStuffing(unsigned char)>

0000a65c <MiniHDLC::sendFrame(unsigned char const*, int)>:
    a65c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a660:	e1a06002 	mov	r6, r2
    a664:	e1a08001 	mov	r8, r1
    a668:	e3a0107e 	mov	r1, #126	; 0x7e
    a66c:	e1a05000 	mov	r5, r0
    a670:	ebffffac 	bl	a528 <MiniHDLC::sendChar(unsigned char)>
    a674:	e3560000 	cmp	r6, #0
    a678:	0a00001d 	beq	a6f4 <MiniHDLC::sendFrame(unsigned char const*, int)+0x98>
    a67c:	e59fc07c 	ldr	ip, [pc, #124]	; a700 <MiniHDLC::sendFrame(unsigned char const*, int)+0xa4>
    a680:	e59f707c 	ldr	r7, [pc, #124]	; a704 <MiniHDLC::sendFrame(unsigned char const*, int)+0xa8>
    a684:	e0886006 	add	r6, r8, r6
    a688:	e4d81001 	ldrb	r1, [r8], #1
    a68c:	e1a00005 	mov	r0, r5
    a690:	e021342c 	eor	r3, r1, ip, lsr #8
    a694:	e1a03083 	lsl	r3, r3, #1
    a698:	e19740b3 	ldrh	r4, [r7, r3]
    a69c:	e024440c 	eor	r4, r4, ip, lsl #8
    a6a0:	e6bf4074 	sxth	r4, r4
    a6a4:	ebffffdb 	bl	a618 <MiniHDLC::sendEscaped(unsigned char)>
    a6a8:	e1580006 	cmp	r8, r6
    a6ac:	e6ffc074 	uxth	ip, r4
    a6b0:	1afffff4 	bne	a688 <MiniHDLC::sendFrame(unsigned char const*, int)+0x2c>
    a6b4:	e6ef1074 	uxtb	r1, r4
    a6b8:	e1a0c42c 	lsr	ip, ip, #8
    a6bc:	e5d53001 	ldrb	r3, [r5, #1]
    a6c0:	e1a00005 	mov	r0, r5
    a6c4:	e3530000 	cmp	r3, #0
    a6c8:	11a06001 	movne	r6, r1
    a6cc:	01a0600c 	moveq	r6, ip
    a6d0:	11a0100c 	movne	r1, ip
    a6d4:	ebffffcf 	bl	a618 <MiniHDLC::sendEscaped(unsigned char)>
    a6d8:	e1a01006 	mov	r1, r6
    a6dc:	e1a00005 	mov	r0, r5
    a6e0:	ebffffcc 	bl	a618 <MiniHDLC::sendEscaped(unsigned char)>
    a6e4:	e1a00005 	mov	r0, r5
    a6e8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    a6ec:	e3a0107e 	mov	r1, #126	; 0x7e
    a6f0:	eaffff8c 	b	a528 <MiniHDLC::sendChar(unsigned char)>
    a6f4:	e3a0c0ff 	mov	ip, #255	; 0xff
    a6f8:	e1a0100c 	mov	r1, ip
    a6fc:	eaffffee 	b	a6bc <MiniHDLC::sendFrame(unsigned char const*, int)+0x60>
    a700:	0000ffff 	.word	0x0000ffff
    a704:	00014498 	.word	0x00014498

0000a708 <__udivsi3>:
    a708:	e2512001 	subs	r2, r1, #1
    a70c:	012fff1e 	bxeq	lr
    a710:	3a000036 	bcc	a7f0 <__udivsi3+0xe8>
    a714:	e1500001 	cmp	r0, r1
    a718:	9a000022 	bls	a7a8 <__udivsi3+0xa0>
    a71c:	e1110002 	tst	r1, r2
    a720:	0a000023 	beq	a7b4 <__udivsi3+0xac>
    a724:	e311020e 	tst	r1, #-536870912	; 0xe0000000
    a728:	01a01181 	lsleq	r1, r1, #3
    a72c:	03a03008 	moveq	r3, #8
    a730:	13a03001 	movne	r3, #1
    a734:	e3510201 	cmp	r1, #268435456	; 0x10000000
    a738:	31510000 	cmpcc	r1, r0
    a73c:	31a01201 	lslcc	r1, r1, #4
    a740:	31a03203 	lslcc	r3, r3, #4
    a744:	3afffffa 	bcc	a734 <__udivsi3+0x2c>
    a748:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    a74c:	31510000 	cmpcc	r1, r0
    a750:	31a01081 	lslcc	r1, r1, #1
    a754:	31a03083 	lslcc	r3, r3, #1
    a758:	3afffffa 	bcc	a748 <__udivsi3+0x40>
    a75c:	e3a02000 	mov	r2, #0
    a760:	e1500001 	cmp	r0, r1
    a764:	20400001 	subcs	r0, r0, r1
    a768:	21822003 	orrcs	r2, r2, r3
    a76c:	e15000a1 	cmp	r0, r1, lsr #1
    a770:	204000a1 	subcs	r0, r0, r1, lsr #1
    a774:	218220a3 	orrcs	r2, r2, r3, lsr #1
    a778:	e1500121 	cmp	r0, r1, lsr #2
    a77c:	20400121 	subcs	r0, r0, r1, lsr #2
    a780:	21822123 	orrcs	r2, r2, r3, lsr #2
    a784:	e15001a1 	cmp	r0, r1, lsr #3
    a788:	204001a1 	subcs	r0, r0, r1, lsr #3
    a78c:	218221a3 	orrcs	r2, r2, r3, lsr #3
    a790:	e3500000 	cmp	r0, #0
    a794:	11b03223 	lsrsne	r3, r3, #4
    a798:	11a01221 	lsrne	r1, r1, #4
    a79c:	1affffef 	bne	a760 <__udivsi3+0x58>
    a7a0:	e1a00002 	mov	r0, r2
    a7a4:	e12fff1e 	bx	lr
    a7a8:	03a00001 	moveq	r0, #1
    a7ac:	13a00000 	movne	r0, #0
    a7b0:	e12fff1e 	bx	lr
    a7b4:	e3510801 	cmp	r1, #65536	; 0x10000
    a7b8:	21a01821 	lsrcs	r1, r1, #16
    a7bc:	23a02010 	movcs	r2, #16
    a7c0:	33a02000 	movcc	r2, #0
    a7c4:	e3510c01 	cmp	r1, #256	; 0x100
    a7c8:	21a01421 	lsrcs	r1, r1, #8
    a7cc:	22822008 	addcs	r2, r2, #8
    a7d0:	e3510010 	cmp	r1, #16
    a7d4:	21a01221 	lsrcs	r1, r1, #4
    a7d8:	22822004 	addcs	r2, r2, #4
    a7dc:	e3510004 	cmp	r1, #4
    a7e0:	82822003 	addhi	r2, r2, #3
    a7e4:	908220a1 	addls	r2, r2, r1, lsr #1
    a7e8:	e1a00230 	lsr	r0, r0, r2
    a7ec:	e12fff1e 	bx	lr
    a7f0:	e3500000 	cmp	r0, #0
    a7f4:	13e00000 	mvnne	r0, #0
    a7f8:	ea000007 	b	a81c <__aeabi_idiv0>

0000a7fc <__aeabi_uidivmod>:
    a7fc:	e3510000 	cmp	r1, #0
    a800:	0afffffa 	beq	a7f0 <__udivsi3+0xe8>
    a804:	e92d4003 	push	{r0, r1, lr}
    a808:	ebffffbe 	bl	a708 <__udivsi3>
    a80c:	e8bd4006 	pop	{r1, r2, lr}
    a810:	e0030092 	mul	r3, r2, r0
    a814:	e0411003 	sub	r1, r1, r3
    a818:	e12fff1e 	bx	lr

0000a81c <__aeabi_idiv0>:
    a81c:	e12fff1e 	bx	lr

0000a820 <CActLED::~CActLED()>:
    a820:	e3a02000 	mov	r2, #0
    a824:	e59f3004 	ldr	r3, [pc, #4]	; a830 <CActLED::~CActLED()+0x10>
    a828:	e5832000 	str	r2, [r3]
    a82c:	e12fff1e 	bx	lr
    a830:	00016640 	.word	0x00016640

0000a834 <CActLED::On()>:
    a834:	e5903000 	ldr	r3, [r0]
    a838:	e3530000 	cmp	r3, #0
    a83c:	0a000002 	beq	a84c <CActLED::On()+0x18>
    a840:	e5d01008 	ldrb	r1, [r0, #8]
    a844:	e1a00003 	mov	r0, r3
    a848:	ea00038f 	b	b68c <CGPIOPin::Write(unsigned int)>
    a84c:	e5903004 	ldr	r3, [r0, #4]
    a850:	e3530000 	cmp	r3, #0
    a854:	012fff1e 	bxeq	lr
    a858:	e5d01008 	ldrb	r1, [r0, #8]
    a85c:	e1a00003 	mov	r0, r3
    a860:	ea001e17 	b	120c4 <CVirtualGPIOPin::Write(unsigned int)>

0000a864 <CActLED::Off()>:
    a864:	e5903000 	ldr	r3, [r0]
    a868:	e3530000 	cmp	r3, #0
    a86c:	0a000003 	beq	a880 <CActLED::Off()+0x1c>
    a870:	e5d01008 	ldrb	r1, [r0, #8]
    a874:	e1a00003 	mov	r0, r3
    a878:	e2211001 	eor	r1, r1, #1
    a87c:	ea000382 	b	b68c <CGPIOPin::Write(unsigned int)>
    a880:	e5903004 	ldr	r3, [r0, #4]
    a884:	e3530000 	cmp	r3, #0
    a888:	012fff1e 	bxeq	lr
    a88c:	e5d01008 	ldrb	r1, [r0, #8]
    a890:	e1a00003 	mov	r0, r3
    a894:	e2211001 	eor	r1, r1, #1
    a898:	ea001e09 	b	120c4 <CVirtualGPIOPin::Write(unsigned int)>

0000a89c <CActLED::CActLED()>:
    a89c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    a8a0:	e3a05000 	mov	r5, #0
    a8a4:	e1a04000 	mov	r4, r0
    a8a8:	e24dd024 	sub	sp, sp, #36	; 0x24
    a8ac:	e59f314c 	ldr	r3, [pc, #332]	; aa00 <CActLED::CActLED()+0x164>
    a8b0:	e5805000 	str	r5, [r0]
    a8b4:	e5805004 	str	r5, [r0, #4]
    a8b8:	e28d000c 	add	r0, sp, #12
    a8bc:	e5834000 	str	r4, [r3]
    a8c0:	eb00008b 	bl	aaf4 <CBcmPropertyTags::CBcmPropertyTags()>
    a8c4:	e3a03010 	mov	r3, #16
    a8c8:	e58d5000 	str	r5, [sp]
    a8cc:	e28d000c 	add	r0, sp, #12
    a8d0:	e08d2003 	add	r2, sp, r3
    a8d4:	e59f1128 	ldr	r1, [pc, #296]	; aa04 <CActLED::CActLED()+0x168>
    a8d8:	eb0000dc 	bl	ac50 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    a8dc:	e2506000 	subs	r6, r0, #0
    a8e0:	0a00001f 	beq	a964 <CActLED::CActLED()+0xc8>
    a8e4:	e59d301c 	ldr	r3, [sp, #28]
    a8e8:	e3130502 	tst	r3, #8388608	; 0x800000
    a8ec:	0a000021 	beq	a978 <CActLED::CActLED()+0xdc>
    a8f0:	e1a03223 	lsr	r3, r3, #4
    a8f4:	e6ef3073 	uxtb	r3, r3
    a8f8:	e243200d 	sub	r2, r3, #13
    a8fc:	e3530008 	cmp	r3, #8
    a900:	13520001 	cmpne	r2, #1
    a904:	93a01001 	movls	r1, #1
    a908:	83a01000 	movhi	r1, #0
    a90c:	e353000c 	cmp	r3, #12
    a910:	13530009 	cmpne	r3, #9
    a914:	03a06001 	moveq	r6, #1
    a918:	13a06000 	movne	r6, #0
    a91c:	e3530001 	cmp	r3, #1
    a920:	9a000017 	bls	a984 <CActLED::CActLED()+0xe8>
    a924:	e3510000 	cmp	r1, #0
    a928:	0a00002a 	beq	a9d8 <CActLED::CActLED()+0x13c>
    a92c:	e3520001 	cmp	r2, #1
    a930:	8a000020 	bhi	a9b8 <CActLED::CActLED()+0x11c>
    a934:	e3a00028 	mov	r0, #40	; 0x28
    a938:	eb001f95 	bl	12794 <operator new(unsigned int)>
    a93c:	e3a02001 	mov	r2, #1
    a940:	e1a07000 	mov	r7, r0
    a944:	e1a03005 	mov	r3, r5
    a948:	e3a0101d 	mov	r1, #29
    a94c:	e0266002 	eor	r6, r6, r2
    a950:	eb0005ef 	bl	c114 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    a954:	e5847000 	str	r7, [r4]
    a958:	e5c46008 	strb	r6, [r4, #8]
    a95c:	e1a00004 	mov	r0, r4
    a960:	ebffffbf 	bl	a864 <CActLED::Off()>
    a964:	e28d000c 	add	r0, sp, #12
    a968:	eb000067 	bl	ab0c <CBcmPropertyTags::~CBcmPropertyTags()>
    a96c:	e1a00004 	mov	r0, r4
    a970:	e28dd024 	add	sp, sp, #36	; 0x24
    a974:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    a978:	e6ff3073 	uxth	r3, r3
    a97c:	e353000f 	cmp	r3, #15
    a980:	8a000015 	bhi	a9dc <CActLED::CActLED()+0x140>
    a984:	e3a00028 	mov	r0, #40	; 0x28
    a988:	eb001f81 	bl	12794 <operator new(unsigned int)>
    a98c:	e3a03000 	mov	r3, #0
    a990:	e3a02001 	mov	r2, #1
    a994:	e3a01010 	mov	r1, #16
    a998:	e1a05000 	mov	r5, r0
    a99c:	eb0005dc 	bl	c114 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    a9a0:	e3a03000 	mov	r3, #0
    a9a4:	e5845000 	str	r5, [r4]
    a9a8:	e5c43008 	strb	r3, [r4, #8]
    a9ac:	e1a00004 	mov	r0, r4
    a9b0:	ebffffab 	bl	a864 <CActLED::Off()>
    a9b4:	eaffffea 	b	a964 <CActLED::CActLED()+0xc8>
    a9b8:	e3a00010 	mov	r0, #16
    a9bc:	eb001f74 	bl	12794 <operator new(unsigned int)>
    a9c0:	e1a07000 	mov	r7, r0
    a9c4:	e1a01005 	mov	r1, r5
    a9c8:	eb001d6c 	bl	11f80 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)>
    a9cc:	e2266001 	eor	r6, r6, #1
    a9d0:	e5847004 	str	r7, [r4, #4]
    a9d4:	eaffffdf 	b	a958 <CActLED::CActLED()+0xbc>
    a9d8:	e2266001 	eor	r6, r6, #1
    a9dc:	e3a00028 	mov	r0, #40	; 0x28
    a9e0:	eb001f6b 	bl	12794 <operator new(unsigned int)>
    a9e4:	e1a05000 	mov	r5, r0
    a9e8:	e3a03000 	mov	r3, #0
    a9ec:	e3a02001 	mov	r2, #1
    a9f0:	e3a0102f 	mov	r1, #47	; 0x2f
    a9f4:	eb0005c6 	bl	c114 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    a9f8:	e5845000 	str	r5, [r4]
    a9fc:	eaffffd5 	b	a958 <CActLED::CActLED()+0xbc>
    aa00:	00016640 	.word	0x00016640
    aa04:	00010002 	.word	0x00010002

0000aa08 <CActLED::Blink(unsigned int, unsigned int, unsigned int)>:
    aa08:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    aa0c:	e2516000 	subs	r6, r1, #0
    aa10:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    aa14:	e1a08003 	mov	r8, r3
    aa18:	e1a07002 	mov	r7, r2
    aa1c:	e1a05000 	mov	r5, r0
    aa20:	e3a04001 	mov	r4, #1
    aa24:	e1a00005 	mov	r0, r5
    aa28:	ebffff81 	bl	a834 <CActLED::On()>
    aa2c:	e1a00007 	mov	r0, r7
    aa30:	eb001b51 	bl	1177c <CTimer::SimpleMsDelay(unsigned int)>
    aa34:	e1a00005 	mov	r0, r5
    aa38:	ebffff89 	bl	a864 <CActLED::Off()>
    aa3c:	e2844001 	add	r4, r4, #1
    aa40:	e1a00008 	mov	r0, r8
    aa44:	eb001b4c 	bl	1177c <CTimer::SimpleMsDelay(unsigned int)>
    aa48:	e1560004 	cmp	r6, r4
    aa4c:	2afffff4 	bcs	aa24 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x1c>
    aa50:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000aa54 <CActLED::Get()>:
    aa54:	e59f3004 	ldr	r3, [pc, #4]	; aa60 <CActLED::Get()+0xc>
    aa58:	e5930000 	ldr	r0, [r3]
    aa5c:	e12fff1e 	bx	lr
    aa60:	00016640 	.word	0x00016640

0000aa64 <assertion_failed>:
    aa64:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    aa68:	e1a05000 	mov	r5, r0
    aa6c:	e24dd01c 	sub	sp, sp, #28
    aa70:	e1a06001 	mov	r6, r1
    aa74:	e1a07002 	mov	r7, r2
    aa78:	e1a0400d 	mov	r4, sp
    aa7c:	eb00072a 	bl	c72c <CInterruptSystem::DisableFIQ()>
    aa80:	f1080040 	cpsie	f
    aa84:	e28d0008 	add	r0, sp, #8
    aa88:	eb0013dd 	bl	fa04 <CString::CString()>
    aa8c:	e1a03007 	mov	r3, r7
    aa90:	e1a02006 	mov	r2, r6
    aa94:	e28d0008 	add	r0, sp, #8
    aa98:	e59f104c 	ldr	r1, [pc, #76]	; aaec <assertion_failed+0x88>
    aa9c:	eb0017c6 	bl	109bc <CString::Format(char const*, ...)>
    aaa0:	e28d0008 	add	r0, sp, #8
    aaa4:	eb0013ec 	bl	fa5c <CString::operator char const*() const>
    aaa8:	e1a01000 	mov	r1, r0
    aaac:	e1a00004 	mov	r0, r4
    aab0:	eb0000f4 	bl	ae88 <debug_stacktrace(unsigned int const*, char const*)>
    aab4:	eb000913 	bl	cf08 <CLogger::Get()>
    aab8:	e1a04000 	mov	r4, r0
    aabc:	e28d0008 	add	r0, sp, #8
    aac0:	eb0013e5 	bl	fa5c <CString::operator char const*() const>
    aac4:	e59f3024 	ldr	r3, [pc, #36]	; aaf0 <assertion_failed+0x8c>
    aac8:	e1a01000 	mov	r1, r0
    aacc:	e3a02000 	mov	r2, #0
    aad0:	e1a00004 	mov	r0, r4
    aad4:	e58d5000 	str	r5, [sp]
    aad8:	eb000ab3 	bl	d5ac <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    aadc:	e28d0008 	add	r0, sp, #8
    aae0:	eb001394 	bl	f938 <CString::~CString()>
    aae4:	e28dd01c 	add	sp, sp, #28
    aae8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    aaec:	00014698 	.word	0x00014698
    aaf0:	000146a0 	.word	0x000146a0

0000aaf4 <CBcmPropertyTags::CBcmPropertyTags()>:
    aaf4:	e92d4010 	push	{r4, lr}
    aaf8:	e1a04000 	mov	r4, r0
    aafc:	e3a01008 	mov	r1, #8
    ab00:	eb0021cf 	bl	13244 <CBcmMailBox::CBcmMailBox(unsigned int)>
    ab04:	e1a00004 	mov	r0, r4
    ab08:	e8bd8010 	pop	{r4, pc}

0000ab0c <CBcmPropertyTags::~CBcmPropertyTags()>:
    ab0c:	e92d4010 	push	{r4, lr}
    ab10:	e1a04000 	mov	r4, r0
    ab14:	eb0021cc 	bl	1324c <CBcmMailBox::~CBcmMailBox()>
    ab18:	e1a00004 	mov	r0, r4
    ab1c:	e8bd8010 	pop	{r4, pc}

0000ab20 <CBcmPropertyTags::GetTags(void*, unsigned int)>:
    ab20:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    ab24:	e2519000 	subs	r9, r1, #0
    ab28:	e1a0a000 	mov	sl, r0
    ab2c:	e1a07002 	mov	r7, r2
    ab30:	0a00003d 	beq	ac2c <CBcmPropertyTags::GetTags(void*, unsigned int)+0x10c>
    ab34:	e357000f 	cmp	r7, #15
    ab38:	9a000036 	bls	ac18 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xf8>
    ab3c:	e287600c 	add	r6, r7, #12
    ab40:	e3160003 	tst	r6, #3
    ab44:	1a00002e 	bne	ac04 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xe4>
    ab48:	e3a00000 	mov	r0, #0
    ab4c:	eb001e7f 	bl	12550 <CMemorySystem::GetCoherentPage(unsigned int)>
    ab50:	e3a05000 	mov	r5, #0
    ab54:	e1a04000 	mov	r4, r0
    ab58:	e1a01426 	lsr	r1, r6, #8
    ab5c:	e1a02826 	lsr	r2, r6, #16
    ab60:	e1a03c26 	lsr	r3, r6, #24
    ab64:	e2808008 	add	r8, r0, #8
    ab68:	e5c06000 	strb	r6, [r0]
    ab6c:	e5c01001 	strb	r1, [r0, #1]
    ab70:	e5c02002 	strb	r2, [r0, #2]
    ab74:	e5c03003 	strb	r3, [r0, #3]
    ab78:	e1a02007 	mov	r2, r7
    ab7c:	e1a00008 	mov	r0, r8
    ab80:	e5c45004 	strb	r5, [r4, #4]
    ab84:	e5c45005 	strb	r5, [r4, #5]
    ab88:	e5c45006 	strb	r5, [r4, #6]
    ab8c:	e5c45007 	strb	r5, [r4, #7]
    ab90:	e1a01009 	mov	r1, r9
    ab94:	eb001cb2 	bl	11e64 <memcpy>
    ab98:	e7885007 	str	r5, [r8, r7]
    ab9c:	ee075f9a 	mcr	15, 0, r5, cr7, cr10, {4}
    aba0:	e3c46103 	bic	r6, r4, #-1073741824	; 0xc0000000
    aba4:	e3866101 	orr	r6, r6, #1073741824	; 0x40000000
    aba8:	e1a0000a 	mov	r0, sl
    abac:	e1a01006 	mov	r1, r6
    abb0:	eb0021d5 	bl	1330c <CBcmMailBox::WriteRead(unsigned int)>
    abb4:	e1560000 	cmp	r6, r0
    abb8:	0a000001 	beq	abc4 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xa4>
    abbc:	e3a00000 	mov	r0, #0
    abc0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    abc4:	ee075fba 	mcr	15, 0, r5, cr7, cr10, {5}
    abc8:	e5d42005 	ldrb	r2, [r4, #5]
    abcc:	e5d43004 	ldrb	r3, [r4, #4]
    abd0:	e5d41006 	ldrb	r1, [r4, #6]
    abd4:	e1833402 	orr	r3, r3, r2, lsl #8
    abd8:	e5d42007 	ldrb	r2, [r4, #7]
    abdc:	e1833801 	orr	r3, r3, r1, lsl #16
    abe0:	e1833c02 	orr	r3, r3, r2, lsl #24
    abe4:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
    abe8:	1afffff3 	bne	abbc <CBcmPropertyTags::GetTags(void*, unsigned int)+0x9c>
    abec:	e1a02007 	mov	r2, r7
    abf0:	e1a01008 	mov	r1, r8
    abf4:	e1a00009 	mov	r0, r9
    abf8:	eb001c99 	bl	11e64 <memcpy>
    abfc:	e3a00001 	mov	r0, #1
    ac00:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    ac04:	e3a02053 	mov	r2, #83	; 0x53
    ac08:	e59f1030 	ldr	r1, [pc, #48]	; ac40 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x120>
    ac0c:	e59f0030 	ldr	r0, [pc, #48]	; ac44 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x124>
    ac10:	ebffff93 	bl	aa64 <assertion_failed>
    ac14:	eaffffcb 	b	ab48 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x28>
    ac18:	e3a02051 	mov	r2, #81	; 0x51
    ac1c:	e59f101c 	ldr	r1, [pc, #28]	; ac40 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x120>
    ac20:	e59f0020 	ldr	r0, [pc, #32]	; ac48 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x128>
    ac24:	ebffff8e 	bl	aa64 <assertion_failed>
    ac28:	eaffffc3 	b	ab3c <CBcmPropertyTags::GetTags(void*, unsigned int)+0x1c>
    ac2c:	e3a02050 	mov	r2, #80	; 0x50
    ac30:	e59f1008 	ldr	r1, [pc, #8]	; ac40 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x120>
    ac34:	e59f0010 	ldr	r0, [pc, #16]	; ac4c <CBcmPropertyTags::GetTags(void*, unsigned int)+0x12c>
    ac38:	ebffff89 	bl	aa64 <assertion_failed>
    ac3c:	eaffffbc 	b	ab34 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x14>
    ac40:	000146b8 	.word	0x000146b8
    ac44:	00014704 	.word	0x00014704
    ac48:	000146d8 	.word	0x000146d8
    ac4c:	000146cc 	.word	0x000146cc

0000ac50 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>:
    ac50:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    ac54:	e2524000 	subs	r4, r2, #0
    ac58:	e1a08000 	mov	r8, r0
    ac5c:	e1a06001 	mov	r6, r1
    ac60:	e1a07003 	mov	r7, r3
    ac64:	e59d5018 	ldr	r5, [sp, #24]
    ac68:	0a000038 	beq	ad50 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x100>
    ac6c:	e357000f 	cmp	r7, #15
    ac70:	9a000031 	bls	ad3c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xec>
    ac74:	e3c52102 	bic	r2, r5, #-2147483648	; 0x80000000
    ac78:	e247100c 	sub	r1, r7, #12
    ac7c:	e1a03422 	lsr	r3, r2, #8
    ac80:	e1a0c822 	lsr	ip, r2, #16
    ac84:	e5c43009 	strb	r3, [r4, #9]
    ac88:	e1a03421 	lsr	r3, r1, #8
    ac8c:	e1a0e821 	lsr	lr, r1, #16
    ac90:	e5c42008 	strb	r2, [r4, #8]
    ac94:	e5c46000 	strb	r6, [r4]
    ac98:	e1a02c22 	lsr	r2, r2, #24
    ac9c:	e5c4c00a 	strb	ip, [r4, #10]
    aca0:	e5c41004 	strb	r1, [r4, #4]
    aca4:	e1a0cc21 	lsr	ip, r1, #24
    aca8:	e5c43005 	strb	r3, [r4, #5]
    acac:	e1a01426 	lsr	r1, r6, #8
    acb0:	e1a03826 	lsr	r3, r6, #16
    acb4:	e1a06c26 	lsr	r6, r6, #24
    acb8:	e5c4200b 	strb	r2, [r4, #11]
    acbc:	e5c41001 	strb	r1, [r4, #1]
    acc0:	e1a00008 	mov	r0, r8
    acc4:	e1a02007 	mov	r2, r7
    acc8:	e5c4e006 	strb	lr, [r4, #6]
    accc:	e5c4c007 	strb	ip, [r4, #7]
    acd0:	e5c43002 	strb	r3, [r4, #2]
    acd4:	e5c46003 	strb	r6, [r4, #3]
    acd8:	e1a01004 	mov	r1, r4
    acdc:	ebffff8f 	bl	ab20 <CBcmPropertyTags::GetTags(void*, unsigned int)>
    ace0:	e3500000 	cmp	r0, #0
    ace4:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    ace8:	e5d43009 	ldrb	r3, [r4, #9]
    acec:	e5d40008 	ldrb	r0, [r4, #8]
    acf0:	e5d4200a 	ldrb	r2, [r4, #10]
    acf4:	e1800403 	orr	r0, r0, r3, lsl #8
    acf8:	e5d4300b 	ldrb	r3, [r4, #11]
    acfc:	e1800802 	orr	r0, r0, r2, lsl #16
    ad00:	e1900c03 	orrs	r0, r0, r3, lsl #24
    ad04:	4a000001 	bmi	ad10 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xc0>
    ad08:	e3a00000 	mov	r0, #0
    ad0c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ad10:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
    ad14:	e1a01420 	lsr	r1, r0, #8
    ad18:	e1a02820 	lsr	r2, r0, #16
    ad1c:	e1a03c20 	lsr	r3, r0, #24
    ad20:	e5c40008 	strb	r0, [r4, #8]
    ad24:	e2900000 	adds	r0, r0, #0
    ad28:	e5c41009 	strb	r1, [r4, #9]
    ad2c:	e5c4200a 	strb	r2, [r4, #10]
    ad30:	e5c4300b 	strb	r3, [r4, #11]
    ad34:	13a00001 	movne	r0, #1
    ad38:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ad3c:	e3a02034 	mov	r2, #52	; 0x34
    ad40:	e59f101c 	ldr	r1, [pc, #28]	; ad64 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x114>
    ad44:	e59f001c 	ldr	r0, [pc, #28]	; ad68 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x118>
    ad48:	ebffff45 	bl	aa64 <assertion_failed>
    ad4c:	eaffffc8 	b	ac74 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x24>
    ad50:	e3a02033 	mov	r2, #51	; 0x33
    ad54:	e59f1008 	ldr	r1, [pc, #8]	; ad64 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x114>
    ad58:	e59f000c 	ldr	r0, [pc, #12]	; ad6c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x11c>
    ad5c:	ebffff40 	bl	aa64 <assertion_failed>
    ad60:	eaffffc1 	b	ac6c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x1c>
    ad64:	000146b8 	.word	0x000146b8
    ad68:	00014728 	.word	0x00014728
    ad6c:	0001471c 	.word	0x0001471c

0000ad70 <debug_hexdump(void const*, unsigned int, char const*)>:
    ad70:	e3520000 	cmp	r2, #0
    ad74:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ad78:	e1a05001 	mov	r5, r1
    ad7c:	e59f60f4 	ldr	r6, [pc, #244]	; ae78 <debug_hexdump(void const*, unsigned int, char const*)+0x108>
    ad80:	e1a04000 	mov	r4, r0
    ad84:	11a06002 	movne	r6, r2
    ad88:	e24dd04c 	sub	sp, sp, #76	; 0x4c
    ad8c:	eb00085d 	bl	cf08 <CLogger::Get()>
    ad90:	e58d4004 	str	r4, [sp, #4]
    ad94:	e58d5000 	str	r5, [sp]
    ad98:	e1a01006 	mov	r1, r6
    ad9c:	e59f30d8 	ldr	r3, [pc, #216]	; ae7c <debug_hexdump(void const*, unsigned int, char const*)+0x10c>
    ada0:	e3a02004 	mov	r2, #4
    ada4:	eb000a00 	bl	d5ac <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ada8:	e3550000 	cmp	r5, #0
    adac:	0a00002b 	beq	ae60 <debug_hexdump(void const*, unsigned int, char const*)+0xf0>
    adb0:	e3a09004 	mov	r9, #4
    adb4:	e59f80c4 	ldr	r8, [pc, #196]	; ae80 <debug_hexdump(void const*, unsigned int, char const*)+0x110>
    adb8:	e59f70c4 	ldr	r7, [pc, #196]	; ae84 <debug_hexdump(void const*, unsigned int, char const*)+0x114>
    adbc:	eb000851 	bl	cf08 <CLogger::Get()>
    adc0:	e5d4a00f 	ldrb	sl, [r4, #15]
    adc4:	e5d4e00e 	ldrb	lr, [r4, #14]
    adc8:	e5d4c00d 	ldrb	ip, [r4, #13]
    adcc:	e5d4300c 	ldrb	r3, [r4, #12]
    add0:	e5d4200b 	ldrb	r2, [r4, #11]
    add4:	e5d4100a 	ldrb	r1, [r4, #10]
    add8:	e5d4b009 	ldrb	fp, [r4, #9]
    addc:	e58da040 	str	sl, [sp, #64]	; 0x40
    ade0:	e5d4a008 	ldrb	sl, [r4, #8]
    ade4:	e58de03c 	str	lr, [sp, #60]	; 0x3c
    ade8:	e5d4e007 	ldrb	lr, [r4, #7]
    adec:	e58dc038 	str	ip, [sp, #56]	; 0x38
    adf0:	e5d4c006 	ldrb	ip, [r4, #6]
    adf4:	e58d3034 	str	r3, [sp, #52]	; 0x34
    adf8:	e5d43005 	ldrb	r3, [r4, #5]
    adfc:	e58d2030 	str	r2, [sp, #48]	; 0x30
    ae00:	e5d42004 	ldrb	r2, [r4, #4]
    ae04:	e58d102c 	str	r1, [sp, #44]	; 0x2c
    ae08:	e5d41003 	ldrb	r1, [r4, #3]
    ae0c:	e58db028 	str	fp, [sp, #40]	; 0x28
    ae10:	e5d4b002 	ldrb	fp, [r4, #2]
    ae14:	e58da024 	str	sl, [sp, #36]	; 0x24
    ae18:	e5d4a001 	ldrb	sl, [r4, #1]
    ae1c:	e58de020 	str	lr, [sp, #32]
    ae20:	e5d4e000 	ldrb	lr, [r4]
    ae24:	e58dc01c 	str	ip, [sp, #28]
    ae28:	e58d3018 	str	r3, [sp, #24]
    ae2c:	e004c008 	and	ip, r4, r8
    ae30:	e58d2014 	str	r2, [sp, #20]
    ae34:	e58d1010 	str	r1, [sp, #16]
    ae38:	e1a03007 	mov	r3, r7
    ae3c:	e1a02009 	mov	r2, r9
    ae40:	e1a01006 	mov	r1, r6
    ae44:	e58db00c 	str	fp, [sp, #12]
    ae48:	e58da008 	str	sl, [sp, #8]
    ae4c:	e88d5000 	stm	sp, {ip, lr}
    ae50:	eb0009d5 	bl	d5ac <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ae54:	e355000f 	cmp	r5, #15
    ae58:	e2844010 	add	r4, r4, #16
    ae5c:	8a000001 	bhi	ae68 <debug_hexdump(void const*, unsigned int, char const*)+0xf8>
    ae60:	e28dd04c 	add	sp, sp, #76	; 0x4c
    ae64:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ae68:	e2555010 	subs	r5, r5, #16
    ae6c:	1affffd2 	bne	adbc <debug_hexdump(void const*, unsigned int, char const*)+0x4c>
    ae70:	e28dd04c 	add	sp, sp, #76	; 0x4c
    ae74:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ae78:	00014750 	.word	0x00014750
    ae7c:	00014758 	.word	0x00014758
    ae80:	0000ffff 	.word	0x0000ffff
    ae84:	00014780 	.word	0x00014780

0000ae88 <debug_stacktrace(unsigned int const*, char const*)>:
    ae88:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    ae8c:	e3510000 	cmp	r1, #0
    ae90:	e59f8084 	ldr	r8, [pc, #132]	; af1c <debug_stacktrace(unsigned int const*, char const*)+0x94>
    ae94:	e24dd008 	sub	sp, sp, #8
    ae98:	e1a05000 	mov	r5, r0
    ae9c:	11a08001 	movne	r8, r1
    aea0:	e3a04000 	mov	r4, #0
    aea4:	e3a0a004 	mov	sl, #4
    aea8:	e59f6070 	ldr	r6, [pc, #112]	; af20 <debug_stacktrace(unsigned int const*, char const*)+0x98>
    aeac:	e59f7070 	ldr	r7, [pc, #112]	; af24 <debug_stacktrace(unsigned int const*, char const*)+0x9c>
    aeb0:	e59f9070 	ldr	r9, [pc, #112]	; af28 <debug_stacktrace(unsigned int const*, char const*)+0xa0>
    aeb4:	ea000003 	b	aec8 <debug_stacktrace(unsigned int const*, char const*)+0x40>
    aeb8:	e2844001 	add	r4, r4, #1
    aebc:	e3540040 	cmp	r4, #64	; 0x40
    aec0:	e2855004 	add	r5, r5, #4
    aec4:	0a000012 	beq	af14 <debug_stacktrace(unsigned int const*, char const*)+0x8c>
    aec8:	e5953000 	ldr	r3, [r5]
    aecc:	e1530006 	cmp	r3, r6
    aed0:	9afffff8 	bls	aeb8 <debug_stacktrace(unsigned int const*, char const*)+0x30>
    aed4:	e1530007 	cmp	r3, r7
    aed8:	2afffff6 	bcs	aeb8 <debug_stacktrace(unsigned int const*, char const*)+0x30>
    aedc:	e3130003 	tst	r3, #3
    aee0:	1afffff4 	bne	aeb8 <debug_stacktrace(unsigned int const*, char const*)+0x30>
    aee4:	eb000807 	bl	cf08 <CLogger::Get()>
    aee8:	e5953000 	ldr	r3, [r5]
    aeec:	e1a0200a 	mov	r2, sl
    aef0:	e58d4000 	str	r4, [sp]
    aef4:	e58d3004 	str	r3, [sp, #4]
    aef8:	e1a01008 	mov	r1, r8
    aefc:	e1a03009 	mov	r3, r9
    af00:	e2844001 	add	r4, r4, #1
    af04:	eb0009a8 	bl	d5ac <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    af08:	e3540040 	cmp	r4, #64	; 0x40
    af0c:	e2855004 	add	r5, r5, #4
    af10:	1affffec 	bne	aec8 <debug_stacktrace(unsigned int const*, char const*)+0x40>
    af14:	e28dd008 	add	sp, sp, #8
    af18:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    af1c:	00014750 	.word	0x00014750
    af20:	00007fff 	.word	0x00007fff
    af24:	00013f8c 	.word	0x00013f8c
    af28:	000147d8 	.word	0x000147d8

0000af2c <CDevice::~CDevice()>:
    af2c:	e12fff1e 	bx	lr

0000af30 <CDevice::Read(void*, unsigned int)>:
    af30:	e3e00000 	mvn	r0, #0
    af34:	e12fff1e 	bx	lr

0000af38 <CDevice::Seek(unsigned long long)>:
    af38:	e3e00000 	mvn	r0, #0
    af3c:	e3e01000 	mvn	r1, #0
    af40:	e12fff1e 	bx	lr

0000af44 <CDevice::~CDevice()>:
    af44:	e92d4010 	push	{r4, lr}
    af48:	e1a04000 	mov	r4, r0
    af4c:	e3a01004 	mov	r1, #4
    af50:	eb001e13 	bl	127a4 <operator delete(void*, unsigned int)>
    af54:	e1a00004 	mov	r0, r4
    af58:	e8bd8010 	pop	{r4, pc}

0000af5c <CDevice::CDevice()>:
    af5c:	e59f3004 	ldr	r3, [pc, #4]	; af68 <CDevice::CDevice()+0xc>
    af60:	e5803000 	str	r3, [r0]
    af64:	e12fff1e 	bx	lr
    af68:	000147f4 	.word	0x000147f4

0000af6c <CDeviceNameService::CDeviceNameService()>:
    af6c:	e3a03000 	mov	r3, #0
    af70:	e92d4070 	push	{r4, r5, r6, lr}
    af74:	e59f5030 	ldr	r5, [pc, #48]	; afac <CDeviceNameService::CDeviceNameService()+0x40>
    af78:	e1a04000 	mov	r4, r0
    af7c:	e5952000 	ldr	r2, [r5]
    af80:	e5803000 	str	r3, [r0]
    af84:	e1520003 	cmp	r2, r3
    af88:	e5803004 	str	r3, [r0, #4]
    af8c:	0a000003 	beq	afa0 <CDeviceNameService::CDeviceNameService()+0x34>
    af90:	e3a0201f 	mov	r2, #31
    af94:	e59f1014 	ldr	r1, [pc, #20]	; afb0 <CDeviceNameService::CDeviceNameService()+0x44>
    af98:	e59f0014 	ldr	r0, [pc, #20]	; afb4 <CDeviceNameService::CDeviceNameService()+0x48>
    af9c:	ebfffeb0 	bl	aa64 <assertion_failed>
    afa0:	e5854000 	str	r4, [r5]
    afa4:	e1a00004 	mov	r0, r4
    afa8:	e8bd8070 	pop	{r4, r5, r6, pc}
    afac:	00016644 	.word	0x00016644
    afb0:	00014808 	.word	0x00014808
    afb4:	00014820 	.word	0x00014820

0000afb8 <CDeviceNameService::~CDeviceNameService()>:
    afb8:	e5903000 	ldr	r3, [r0]
    afbc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    afc0:	e3530000 	cmp	r3, #0
    afc4:	e1a05000 	mov	r5, r0
    afc8:	0a00000e 	beq	b008 <CDeviceNameService::~CDeviceNameService()+0x50>
    afcc:	e3a06000 	mov	r6, #0
    afd0:	e3a07010 	mov	r7, #16
    afd4:	e5930004 	ldr	r0, [r3, #4]
    afd8:	e5934000 	ldr	r4, [r3]
    afdc:	e3500000 	cmp	r0, #0
    afe0:	0a000000 	beq	afe8 <CDeviceNameService::~CDeviceNameService()+0x30>
    afe4:	eb001ded 	bl	127a0 <operator delete[](void*)>
    afe8:	e5950000 	ldr	r0, [r5]
    afec:	e1a01007 	mov	r1, r7
    aff0:	e5806004 	str	r6, [r0, #4]
    aff4:	e5806008 	str	r6, [r0, #8]
    aff8:	eb001de9 	bl	127a4 <operator delete(void*, unsigned int)>
    affc:	e2543000 	subs	r3, r4, #0
    b000:	e5854000 	str	r4, [r5]
    b004:	1afffff2 	bne	afd4 <CDeviceNameService::~CDeviceNameService()+0x1c>
    b008:	e3a02000 	mov	r2, #0
    b00c:	e59f3008 	ldr	r3, [pc, #8]	; b01c <CDeviceNameService::~CDeviceNameService()+0x64>
    b010:	e1a00005 	mov	r0, r5
    b014:	e5832000 	str	r2, [r3]
    b018:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    b01c:	00016644 	.word	0x00016644

0000b020 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>:
    b020:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b024:	e1a05000 	mov	r5, r0
    b028:	e5900004 	ldr	r0, [r0, #4]
    b02c:	e1a06001 	mov	r6, r1
    b030:	e3500000 	cmp	r0, #0
    b034:	e1a07002 	mov	r7, r2
    b038:	e1a08003 	mov	r8, r3
    b03c:	1a000017 	bne	b0a0 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x80>
    b040:	e3a00010 	mov	r0, #16
    b044:	eb001dd2 	bl	12794 <operator new(unsigned int)>
    b048:	e3560000 	cmp	r6, #0
    b04c:	e1a04000 	mov	r4, r0
    b050:	0a000019 	beq	b0bc <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x9c>
    b054:	e1a00006 	mov	r0, r6
    b058:	eb001a2f 	bl	1191c <strlen>
    b05c:	e2800001 	add	r0, r0, #1
    b060:	eb001dcc 	bl	12798 <operator new[](unsigned int)>
    b064:	e1a01006 	mov	r1, r6
    b068:	e5840004 	str	r0, [r4, #4]
    b06c:	eb001aa8 	bl	11b14 <strcpy>
    b070:	e3570000 	cmp	r7, #0
    b074:	0a00000b 	beq	b0a8 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x88>
    b078:	e5952004 	ldr	r2, [r5, #4]
    b07c:	e5953000 	ldr	r3, [r5]
    b080:	e3520000 	cmp	r2, #0
    b084:	e5847008 	str	r7, [r4, #8]
    b088:	e5c4800c 	strb	r8, [r4, #12]
    b08c:	e5843000 	str	r3, [r4]
    b090:	e5854000 	str	r4, [r5]
    b094:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    b098:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    b09c:	ea001d8f 	b	126e0 <LeaveCritical>
    b0a0:	eb001d61 	bl	1262c <EnterCritical>
    b0a4:	eaffffe5 	b	b040 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x20>
    b0a8:	e3a02040 	mov	r2, #64	; 0x40
    b0ac:	e59f101c 	ldr	r1, [pc, #28]	; b0d0 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xb0>
    b0b0:	e59f001c 	ldr	r0, [pc, #28]	; b0d4 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xb4>
    b0b4:	ebfffe6a 	bl	aa64 <assertion_failed>
    b0b8:	eaffffee 	b	b078 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x58>
    b0bc:	e3a0203b 	mov	r2, #59	; 0x3b
    b0c0:	e59f1008 	ldr	r1, [pc, #8]	; b0d0 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xb0>
    b0c4:	e59f000c 	ldr	r0, [pc, #12]	; b0d8 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xb8>
    b0c8:	ebfffe65 	bl	aa64 <assertion_failed>
    b0cc:	eaffffe0 	b	b054 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x34>
    b0d0:	00014808 	.word	0x00014808
    b0d4:	00014838 	.word	0x00014838
    b0d8:	0001482c 	.word	0x0001482c

0000b0dc <CDeviceNameService::RemoveDevice(char const*, bool)>:
    b0dc:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b0e0:	e2516000 	subs	r6, r1, #0
    b0e4:	e1a08000 	mov	r8, r0
    b0e8:	e1a07002 	mov	r7, r2
    b0ec:	0a000040 	beq	b1f4 <CDeviceNameService::RemoveDevice(char const*, bool)+0x118>
    b0f0:	e5980004 	ldr	r0, [r8, #4]
    b0f4:	e3500000 	cmp	r0, #0
    b0f8:	1a00002e 	bne	b1b8 <CDeviceNameService::RemoveDevice(char const*, bool)+0xdc>
    b0fc:	e5984000 	ldr	r4, [r8]
    b100:	e3540000 	cmp	r4, #0
    b104:	0a000039 	beq	b1f0 <CDeviceNameService::RemoveDevice(char const*, bool)+0x114>
    b108:	e3a05000 	mov	r5, #0
    b10c:	e3a0b05e 	mov	fp, #94	; 0x5e
    b110:	e59fa0f0 	ldr	sl, [pc, #240]	; b208 <CDeviceNameService::RemoveDevice(char const*, bool)+0x12c>
    b114:	e59f90f0 	ldr	r9, [pc, #240]	; b20c <CDeviceNameService::RemoveDevice(char const*, bool)+0x130>
    b118:	ea00000b 	b	b14c <CDeviceNameService::RemoveDevice(char const*, bool)+0x70>
    b11c:	e1a00006 	mov	r0, r6
    b120:	eb001a07 	bl	11944 <strcmp>
    b124:	e3500000 	cmp	r0, #0
    b128:	1a000002 	bne	b138 <CDeviceNameService::RemoveDevice(char const*, bool)+0x5c>
    b12c:	e5d4300c 	ldrb	r3, [r4, #12]
    b130:	e1530007 	cmp	r3, r7
    b134:	0a00000d 	beq	b170 <CDeviceNameService::RemoveDevice(char const*, bool)+0x94>
    b138:	e5943000 	ldr	r3, [r4]
    b13c:	e1a05004 	mov	r5, r4
    b140:	e3530000 	cmp	r3, #0
    b144:	0a00001f 	beq	b1c8 <CDeviceNameService::RemoveDevice(char const*, bool)+0xec>
    b148:	e1a04003 	mov	r4, r3
    b14c:	e5941004 	ldr	r1, [r4, #4]
    b150:	e3510000 	cmp	r1, #0
    b154:	1afffff0 	bne	b11c <CDeviceNameService::RemoveDevice(char const*, bool)+0x40>
    b158:	e1a0100a 	mov	r1, sl
    b15c:	e1a0200b 	mov	r2, fp
    b160:	e1a00009 	mov	r0, r9
    b164:	ebfffe3e 	bl	aa64 <assertion_failed>
    b168:	e5941004 	ldr	r1, [r4, #4]
    b16c:	eaffffea 	b	b11c <CDeviceNameService::RemoveDevice(char const*, bool)+0x40>
    b170:	e3550000 	cmp	r5, #0
    b174:	0a00001a 	beq	b1e4 <CDeviceNameService::RemoveDevice(char const*, bool)+0x108>
    b178:	e5943000 	ldr	r3, [r4]
    b17c:	e5853000 	str	r3, [r5]
    b180:	e5983004 	ldr	r3, [r8, #4]
    b184:	e3530000 	cmp	r3, #0
    b188:	1a000013 	bne	b1dc <CDeviceNameService::RemoveDevice(char const*, bool)+0x100>
    b18c:	e5940004 	ldr	r0, [r4, #4]
    b190:	e3500000 	cmp	r0, #0
    b194:	0a000000 	beq	b19c <CDeviceNameService::RemoveDevice(char const*, bool)+0xc0>
    b198:	eb001d80 	bl	127a0 <operator delete[](void*)>
    b19c:	e3a03000 	mov	r3, #0
    b1a0:	e1a00004 	mov	r0, r4
    b1a4:	e5843004 	str	r3, [r4, #4]
    b1a8:	e5843008 	str	r3, [r4, #8]
    b1ac:	e3a01010 	mov	r1, #16
    b1b0:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b1b4:	ea001d7a 	b	127a4 <operator delete(void*, unsigned int)>
    b1b8:	eb001d1b 	bl	1262c <EnterCritical>
    b1bc:	e5984000 	ldr	r4, [r8]
    b1c0:	e3540000 	cmp	r4, #0
    b1c4:	1affffcf 	bne	b108 <CDeviceNameService::RemoveDevice(char const*, bool)+0x2c>
    b1c8:	e5983004 	ldr	r3, [r8, #4]
    b1cc:	e3530000 	cmp	r3, #0
    b1d0:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b1d4:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b1d8:	ea001d40 	b	126e0 <LeaveCritical>
    b1dc:	eb001d3f 	bl	126e0 <LeaveCritical>
    b1e0:	eaffffe9 	b	b18c <CDeviceNameService::RemoveDevice(char const*, bool)+0xb0>
    b1e4:	e5943000 	ldr	r3, [r4]
    b1e8:	e5883000 	str	r3, [r8]
    b1ec:	eaffffe3 	b	b180 <CDeviceNameService::RemoveDevice(char const*, bool)+0xa4>
    b1f0:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b1f4:	e3a02056 	mov	r2, #86	; 0x56
    b1f8:	e59f1008 	ldr	r1, [pc, #8]	; b208 <CDeviceNameService::RemoveDevice(char const*, bool)+0x12c>
    b1fc:	e59f000c 	ldr	r0, [pc, #12]	; b210 <CDeviceNameService::RemoveDevice(char const*, bool)+0x134>
    b200:	ebfffe17 	bl	aa64 <assertion_failed>
    b204:	eaffffb9 	b	b0f0 <CDeviceNameService::RemoveDevice(char const*, bool)+0x14>
    b208:	00014808 	.word	0x00014808
    b20c:	00014848 	.word	0x00014848
    b210:	0001482c 	.word	0x0001482c

0000b214 <CDeviceNameService::GetDevice(char const*, bool)>:
    b214:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    b218:	e2515000 	subs	r5, r1, #0
    b21c:	e1a07000 	mov	r7, r0
    b220:	e1a06002 	mov	r6, r2
    b224:	0a000034 	beq	b2fc <CDeviceNameService::GetDevice(char const*, bool)+0xe8>
    b228:	e5970004 	ldr	r0, [r7, #4]
    b22c:	e3500000 	cmp	r0, #0
    b230:	1a000019 	bne	b29c <CDeviceNameService::GetDevice(char const*, bool)+0x88>
    b234:	e5974000 	ldr	r4, [r7]
    b238:	e3540000 	cmp	r4, #0
    b23c:	0a00001e 	beq	b2bc <CDeviceNameService::GetDevice(char const*, bool)+0xa8>
    b240:	e3a0a092 	mov	sl, #146	; 0x92
    b244:	e59f90c4 	ldr	r9, [pc, #196]	; b310 <CDeviceNameService::GetDevice(char const*, bool)+0xfc>
    b248:	e59f80c4 	ldr	r8, [pc, #196]	; b314 <CDeviceNameService::GetDevice(char const*, bool)+0x100>
    b24c:	ea000009 	b	b278 <CDeviceNameService::GetDevice(char const*, bool)+0x64>
    b250:	e1a00005 	mov	r0, r5
    b254:	eb0019ba 	bl	11944 <strcmp>
    b258:	e3500000 	cmp	r0, #0
    b25c:	1a000002 	bne	b26c <CDeviceNameService::GetDevice(char const*, bool)+0x58>
    b260:	e5d4300c 	ldrb	r3, [r4, #12]
    b264:	e1530006 	cmp	r3, r6
    b268:	0a000016 	beq	b2c8 <CDeviceNameService::GetDevice(char const*, bool)+0xb4>
    b26c:	e5944000 	ldr	r4, [r4]
    b270:	e3540000 	cmp	r4, #0
    b274:	0a00000c 	beq	b2ac <CDeviceNameService::GetDevice(char const*, bool)+0x98>
    b278:	e5941004 	ldr	r1, [r4, #4]
    b27c:	e3510000 	cmp	r1, #0
    b280:	1afffff2 	bne	b250 <CDeviceNameService::GetDevice(char const*, bool)+0x3c>
    b284:	e1a01009 	mov	r1, r9
    b288:	e1a0200a 	mov	r2, sl
    b28c:	e1a00008 	mov	r0, r8
    b290:	ebfffdf3 	bl	aa64 <assertion_failed>
    b294:	e5941004 	ldr	r1, [r4, #4]
    b298:	eaffffec 	b	b250 <CDeviceNameService::GetDevice(char const*, bool)+0x3c>
    b29c:	eb001ce2 	bl	1262c <EnterCritical>
    b2a0:	e5974000 	ldr	r4, [r7]
    b2a4:	e3540000 	cmp	r4, #0
    b2a8:	1affffe4 	bne	b240 <CDeviceNameService::GetDevice(char const*, bool)+0x2c>
    b2ac:	e5973004 	ldr	r3, [r7, #4]
    b2b0:	e3530000 	cmp	r3, #0
    b2b4:	0a000000 	beq	b2bc <CDeviceNameService::GetDevice(char const*, bool)+0xa8>
    b2b8:	eb001d08 	bl	126e0 <LeaveCritical>
    b2bc:	e3a04000 	mov	r4, #0
    b2c0:	e1a00004 	mov	r0, r4
    b2c4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    b2c8:	e5973004 	ldr	r3, [r7, #4]
    b2cc:	e5944008 	ldr	r4, [r4, #8]
    b2d0:	e3530000 	cmp	r3, #0
    b2d4:	1a000006 	bne	b2f4 <CDeviceNameService::GetDevice(char const*, bool)+0xe0>
    b2d8:	e3540000 	cmp	r4, #0
    b2dc:	1afffff7 	bne	b2c0 <CDeviceNameService::GetDevice(char const*, bool)+0xac>
    b2e0:	e3a0209a 	mov	r2, #154	; 0x9a
    b2e4:	e59f1024 	ldr	r1, [pc, #36]	; b310 <CDeviceNameService::GetDevice(char const*, bool)+0xfc>
    b2e8:	e59f0028 	ldr	r0, [pc, #40]	; b318 <CDeviceNameService::GetDevice(char const*, bool)+0x104>
    b2ec:	ebfffddc 	bl	aa64 <assertion_failed>
    b2f0:	eafffff2 	b	b2c0 <CDeviceNameService::GetDevice(char const*, bool)+0xac>
    b2f4:	eb001cf9 	bl	126e0 <LeaveCritical>
    b2f8:	eafffff6 	b	b2d8 <CDeviceNameService::GetDevice(char const*, bool)+0xc4>
    b2fc:	e3a0208b 	mov	r2, #139	; 0x8b
    b300:	e59f1008 	ldr	r1, [pc, #8]	; b310 <CDeviceNameService::GetDevice(char const*, bool)+0xfc>
    b304:	e59f0010 	ldr	r0, [pc, #16]	; b31c <CDeviceNameService::GetDevice(char const*, bool)+0x108>
    b308:	ebfffdd5 	bl	aa64 <assertion_failed>
    b30c:	eaffffc5 	b	b228 <CDeviceNameService::GetDevice(char const*, bool)+0x14>
    b310:	00014808 	.word	0x00014808
    b314:	00014848 	.word	0x00014848
    b318:	0001485c 	.word	0x0001485c
    b31c:	0001482c 	.word	0x0001482c

0000b320 <CDeviceNameService::Get()>:
    b320:	e92d4010 	push	{r4, lr}
    b324:	e59f4020 	ldr	r4, [pc, #32]	; b34c <CDeviceNameService::Get()+0x2c>
    b328:	e5940000 	ldr	r0, [r4]
    b32c:	e3500000 	cmp	r0, #0
    b330:	18bd8010 	popne	{r4, pc}
    b334:	e3a020cc 	mov	r2, #204	; 0xcc
    b338:	e59f1010 	ldr	r1, [pc, #16]	; b350 <CDeviceNameService::Get()+0x30>
    b33c:	e59f0010 	ldr	r0, [pc, #16]	; b354 <CDeviceNameService::Get()+0x34>
    b340:	ebfffdc7 	bl	aa64 <assertion_failed>
    b344:	e5940000 	ldr	r0, [r4]
    b348:	e8bd8010 	pop	{r4, pc}
    b34c:	00016644 	.word	0x00016644
    b350:	00014808 	.word	0x00014808
    b354:	0001486c 	.word	0x0001486c

0000b358 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>:
    b358:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b35c:	e1a07001 	mov	r7, r1
    b360:	e1a08002 	mov	r8, r2
    b364:	e24dd010 	sub	sp, sp, #16
    b368:	e1a04000 	mov	r4, r0
    b36c:	e1a0000d 	mov	r0, sp
    b370:	e1a05003 	mov	r5, r3
    b374:	e5dd6028 	ldrb	r6, [sp, #40]	; 0x28
    b378:	eb0011a1 	bl	fa04 <CString::CString()>
    b37c:	e1a03008 	mov	r3, r8
    b380:	e1a02007 	mov	r2, r7
    b384:	e1a0000d 	mov	r0, sp
    b388:	e59f102c 	ldr	r1, [pc, #44]	; b3bc <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)+0x64>
    b38c:	eb00158a 	bl	109bc <CString::Format(char const*, ...)>
    b390:	e1a0000d 	mov	r0, sp
    b394:	eb0011b0 	bl	fa5c <CString::operator char const*() const>
    b398:	e1a03006 	mov	r3, r6
    b39c:	e1a01000 	mov	r1, r0
    b3a0:	e1a02005 	mov	r2, r5
    b3a4:	e1a00004 	mov	r0, r4
    b3a8:	ebffff1c 	bl	b020 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
    b3ac:	e1a0000d 	mov	r0, sp
    b3b0:	eb001160 	bl	f938 <CString::~CString()>
    b3b4:	e28dd010 	add	sp, sp, #16
    b3b8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    b3bc:	00014878 	.word	0x00014878

0000b3c0 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>:
    b3c0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    b3c4:	e1a06001 	mov	r6, r1
    b3c8:	e1a07002 	mov	r7, r2
    b3cc:	e24dd014 	sub	sp, sp, #20
    b3d0:	e1a04000 	mov	r4, r0
    b3d4:	e1a0000d 	mov	r0, sp
    b3d8:	e1a05003 	mov	r5, r3
    b3dc:	eb001188 	bl	fa04 <CString::CString()>
    b3e0:	e1a03007 	mov	r3, r7
    b3e4:	e1a02006 	mov	r2, r6
    b3e8:	e1a0000d 	mov	r0, sp
    b3ec:	e59f1028 	ldr	r1, [pc, #40]	; b41c <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)+0x5c>
    b3f0:	eb001571 	bl	109bc <CString::Format(char const*, ...)>
    b3f4:	e1a0000d 	mov	r0, sp
    b3f8:	eb001197 	bl	fa5c <CString::operator char const*() const>
    b3fc:	e1a02005 	mov	r2, r5
    b400:	e1a01000 	mov	r1, r0
    b404:	e1a00004 	mov	r0, r4
    b408:	ebffff33 	bl	b0dc <CDeviceNameService::RemoveDevice(char const*, bool)>
    b40c:	e1a0000d 	mov	r0, sp
    b410:	eb001148 	bl	f938 <CString::~CString()>
    b414:	e28dd014 	add	sp, sp, #20
    b418:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    b41c:	00014878 	.word	0x00014878

0000b420 <CDeviceNameService::GetDevice(char const*, unsigned int, bool)>:
    b420:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    b424:	e1a06001 	mov	r6, r1
    b428:	e1a07002 	mov	r7, r2
    b42c:	e24dd014 	sub	sp, sp, #20
    b430:	e1a04000 	mov	r4, r0
    b434:	e1a0000d 	mov	r0, sp
    b438:	e1a05003 	mov	r5, r3
    b43c:	eb001170 	bl	fa04 <CString::CString()>
    b440:	e1a03007 	mov	r3, r7
    b444:	e1a02006 	mov	r2, r6
    b448:	e1a0000d 	mov	r0, sp
    b44c:	e59f1030 	ldr	r1, [pc, #48]	; b484 <CDeviceNameService::GetDevice(char const*, unsigned int, bool)+0x64>
    b450:	eb001559 	bl	109bc <CString::Format(char const*, ...)>
    b454:	e1a0000d 	mov	r0, sp
    b458:	eb00117f 	bl	fa5c <CString::operator char const*() const>
    b45c:	e1a02005 	mov	r2, r5
    b460:	e1a01000 	mov	r1, r0
    b464:	e1a00004 	mov	r0, r4
    b468:	ebffff69 	bl	b214 <CDeviceNameService::GetDevice(char const*, bool)>
    b46c:	e1a04000 	mov	r4, r0
    b470:	e1a0000d 	mov	r0, sp
    b474:	eb00112f 	bl	f938 <CString::~CString()>
    b478:	e1a00004 	mov	r0, r4
    b47c:	e28dd014 	add	sp, sp, #20
    b480:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    b484:	00014878 	.word	0x00014878

0000b488 <CDeviceNameService::ListDevices(CDevice*)>:
    b488:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b48c:	e2516000 	subs	r6, r1, #0
    b490:	e24dd01c 	sub	sp, sp, #28
    b494:	e1a04000 	mov	r4, r0
    b498:	0a000036 	beq	b578 <CDeviceNameService::ListDevices(CDevice*)+0xf0>
    b49c:	e5944000 	ldr	r4, [r4]
    b4a0:	e3540000 	cmp	r4, #0
    b4a4:	0a00002b 	beq	b558 <CDeviceNameService::ListDevices(CDevice*)+0xd0>
    b4a8:	e3a05000 	mov	r5, #0
    b4ac:	e3a0b0b9 	mov	fp, #185	; 0xb9
    b4b0:	e59f80d4 	ldr	r8, [pc, #212]	; b58c <CDeviceNameService::ListDevices(CDevice*)+0x104>
    b4b4:	e28d0008 	add	r0, sp, #8
    b4b8:	eb001151 	bl	fa04 <CString::CString()>
    b4bc:	e5943004 	ldr	r3, [r4, #4]
    b4c0:	e2855001 	add	r5, r5, #1
    b4c4:	e3530000 	cmp	r3, #0
    b4c8:	0a000024 	beq	b560 <CDeviceNameService::ListDevices(CDevice*)+0xd8>
    b4cc:	e2157003 	ands	r7, r5, #3
    b4d0:	13a01020 	movne	r1, #32
    b4d4:	03a0100a 	moveq	r1, #10
    b4d8:	e5d4200c 	ldrb	r2, [r4, #12]
    b4dc:	e28d0008 	add	r0, sp, #8
    b4e0:	e3520000 	cmp	r2, #0
    b4e4:	03a02063 	moveq	r2, #99	; 0x63
    b4e8:	13a02062 	movne	r2, #98	; 0x62
    b4ec:	e58d1000 	str	r1, [sp]
    b4f0:	e1a01008 	mov	r1, r8
    b4f4:	eb001530 	bl	109bc <CString::Format(char const*, ...)>
    b4f8:	e5963000 	ldr	r3, [r6]
    b4fc:	e28d0008 	add	r0, sp, #8
    b500:	e593900c 	ldr	r9, [r3, #12]
    b504:	eb001154 	bl	fa5c <CString::operator char const*() const>
    b508:	e1a0a000 	mov	sl, r0
    b50c:	e28d0008 	add	r0, sp, #8
    b510:	eb00117f 	bl	fb14 <CString::GetLength() const>
    b514:	e1a0100a 	mov	r1, sl
    b518:	e1a02000 	mov	r2, r0
    b51c:	e1a00006 	mov	r0, r6
    b520:	e12fff39 	blx	r9
    b524:	e5944000 	ldr	r4, [r4]
    b528:	e28d0008 	add	r0, sp, #8
    b52c:	eb001101 	bl	f938 <CString::~CString()>
    b530:	e3540000 	cmp	r4, #0
    b534:	1affffde 	bne	b4b4 <CDeviceNameService::ListDevices(CDevice*)+0x2c>
    b538:	e3570000 	cmp	r7, #0
    b53c:	0a000005 	beq	b558 <CDeviceNameService::ListDevices(CDevice*)+0xd0>
    b540:	e5963000 	ldr	r3, [r6]
    b544:	e1a00006 	mov	r0, r6
    b548:	e593300c 	ldr	r3, [r3, #12]
    b54c:	e3a02001 	mov	r2, #1
    b550:	e59f1038 	ldr	r1, [pc, #56]	; b590 <CDeviceNameService::ListDevices(CDevice*)+0x108>
    b554:	e12fff33 	blx	r3
    b558:	e28dd01c 	add	sp, sp, #28
    b55c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b560:	e1a0200b 	mov	r2, fp
    b564:	e59f1028 	ldr	r1, [pc, #40]	; b594 <CDeviceNameService::ListDevices(CDevice*)+0x10c>
    b568:	e59f0028 	ldr	r0, [pc, #40]	; b598 <CDeviceNameService::ListDevices(CDevice*)+0x110>
    b56c:	ebfffd3c 	bl	aa64 <assertion_failed>
    b570:	e5943004 	ldr	r3, [r4, #4]
    b574:	eaffffd4 	b	b4cc <CDeviceNameService::ListDevices(CDevice*)+0x44>
    b578:	e3a020b0 	mov	r2, #176	; 0xb0
    b57c:	e59f1010 	ldr	r1, [pc, #16]	; b594 <CDeviceNameService::ListDevices(CDevice*)+0x10c>
    b580:	e59f0014 	ldr	r0, [pc, #20]	; b59c <CDeviceNameService::ListDevices(CDevice*)+0x114>
    b584:	ebfffd36 	bl	aa64 <assertion_failed>
    b588:	eaffffc3 	b	b49c <CDeviceNameService::ListDevices(CDevice*)+0x14>
    b58c:	00014890 	.word	0x00014890
    b590:	0001489c 	.word	0x0001489c
    b594:	00014808 	.word	0x00014808
    b598:	00014848 	.word	0x00014848
    b59c:	00014880 	.word	0x00014880

0000b5a0 <CGPIOPin::~CGPIOPin()>:
    b5a0:	e12fff1e 	bx	lr

0000b5a4 <CGPIOPin::~CGPIOPin()>:
    b5a4:	e92d4010 	push	{r4, lr}
    b5a8:	e1a04000 	mov	r4, r0
    b5ac:	e3a01028 	mov	r1, #40	; 0x28
    b5b0:	eb001c7b 	bl	127a4 <operator delete(void*, unsigned int)>
    b5b4:	e1a00004 	mov	r0, r4
    b5b8:	e8bd8010 	pop	{r4, pc}

0000b5bc <CGPIOPin::CGPIOPin()>:
    b5bc:	e92d4010 	push	{r4, lr}
    b5c0:	e3a01000 	mov	r1, #0
    b5c4:	e3a02006 	mov	r2, #6
    b5c8:	e3a04036 	mov	r4, #54	; 0x36
    b5cc:	e3a0c00a 	mov	ip, #10
    b5d0:	e59fe01c 	ldr	lr, [pc, #28]	; b5f4 <CGPIOPin::CGPIOPin()+0x38>
    b5d4:	e5804004 	str	r4, [r0, #4]
    b5d8:	e580e000 	str	lr, [r0]
    b5dc:	e5c0c010 	strb	ip, [r0, #16]
    b5e0:	e5801018 	str	r1, [r0, #24]
    b5e4:	e580101c 	str	r1, [r0, #28]
    b5e8:	e5c02024 	strb	r2, [r0, #36]	; 0x24
    b5ec:	e5c02025 	strb	r2, [r0, #37]	; 0x25
    b5f0:	e8bd8010 	pop	{r4, pc}
    b5f4:	000148a8 	.word	0x000148a8

0000b5f8 <CGPIOPin::AssignPin(unsigned int)>:
    b5f8:	e5903004 	ldr	r3, [r0, #4]
    b5fc:	e92d4070 	push	{r4, r5, r6, lr}
    b600:	e3530036 	cmp	r3, #54	; 0x36
    b604:	e1a05000 	mov	r5, r0
    b608:	e1a04001 	mov	r4, r1
    b60c:	0a000003 	beq	b620 <CGPIOPin::AssignPin(unsigned int)+0x28>
    b610:	e3a02040 	mov	r2, #64	; 0x40
    b614:	e59f1064 	ldr	r1, [pc, #100]	; b680 <CGPIOPin::AssignPin(unsigned int)+0x88>
    b618:	e59f0064 	ldr	r0, [pc, #100]	; b684 <CGPIOPin::AssignPin(unsigned int)+0x8c>
    b61c:	ebfffd10 	bl	aa64 <assertion_failed>
    b620:	e3540035 	cmp	r4, #53	; 0x35
    b624:	e5854004 	str	r4, [r5, #4]
    b628:	8a000007 	bhi	b64c <CGPIOPin::AssignPin(unsigned int)+0x54>
    b62c:	e3a03001 	mov	r3, #1
    b630:	e204201f 	and	r2, r4, #31
    b634:	e1a042a4 	lsr	r4, r4, #5
    b638:	e1a03213 	lsl	r3, r3, r2
    b63c:	e1a04104 	lsl	r4, r4, #2
    b640:	e585300c 	str	r3, [r5, #12]
    b644:	e5854008 	str	r4, [r5, #8]
    b648:	e8bd8070 	pop	{r4, r5, r6, pc}
    b64c:	eb0008ea 	bl	d9fc <CMachineInfo::Get()>
    b650:	e6ef1074 	uxtb	r1, r4
    b654:	eb0008bb 	bl	d948 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>
    b658:	e3500035 	cmp	r0, #53	; 0x35
    b65c:	e1a04000 	mov	r4, r0
    b660:	e5850004 	str	r0, [r5, #4]
    b664:	9afffff0 	bls	b62c <CGPIOPin::AssignPin(unsigned int)+0x34>
    b668:	e3a02047 	mov	r2, #71	; 0x47
    b66c:	e59f100c 	ldr	r1, [pc, #12]	; b680 <CGPIOPin::AssignPin(unsigned int)+0x88>
    b670:	e59f0010 	ldr	r0, [pc, #16]	; b688 <CGPIOPin::AssignPin(unsigned int)+0x90>
    b674:	ebfffcfa 	bl	aa64 <assertion_failed>
    b678:	e5954004 	ldr	r4, [r5, #4]
    b67c:	eaffffea 	b	b62c <CGPIOPin::AssignPin(unsigned int)+0x34>
    b680:	000148c8 	.word	0x000148c8
    b684:	000148d4 	.word	0x000148d4
    b688:	000148e8 	.word	0x000148e8

0000b68c <CGPIOPin::Write(unsigned int)>:
    b68c:	e5903004 	ldr	r3, [r0, #4]
    b690:	e92d4070 	push	{r4, r5, r6, lr}
    b694:	e3530035 	cmp	r3, #53	; 0x35
    b698:	e1a04000 	mov	r4, r0
    b69c:	e1a05001 	mov	r5, r1
    b6a0:	8a00001e 	bhi	b720 <CGPIOPin::Write(unsigned int)+0x94>
    b6a4:	e5d43010 	ldrb	r3, [r4, #16]
    b6a8:	e3530003 	cmp	r3, #3
    b6ac:	ca000016 	bgt	b70c <CGPIOPin::Write(unsigned int)+0x80>
    b6b0:	e3a03000 	mov	r3, #0
    b6b4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    b6b8:	e3550001 	cmp	r5, #1
    b6bc:	9a00000b 	bls	b6f0 <CGPIOPin::Write(unsigned int)+0x64>
    b6c0:	e3a02098 	mov	r2, #152	; 0x98
    b6c4:	e59f1068 	ldr	r1, [pc, #104]	; b734 <CGPIOPin::Write(unsigned int)+0xa8>
    b6c8:	e59f0068 	ldr	r0, [pc, #104]	; b738 <CGPIOPin::Write(unsigned int)+0xac>
    b6cc:	ebfffce4 	bl	aa64 <assertion_failed>
    b6d0:	e5845014 	str	r5, [r4, #20]
    b6d4:	e59f5060 	ldr	r5, [pc, #96]	; b73c <CGPIOPin::Write(unsigned int)+0xb0>
    b6d8:	e594100c 	ldr	r1, [r4, #12]
    b6dc:	e5942008 	ldr	r2, [r4, #8]
    b6e0:	e3a03000 	mov	r3, #0
    b6e4:	e7851002 	str	r1, [r5, r2]
    b6e8:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    b6ec:	e8bd8070 	pop	{r4, r5, r6, pc}
    b6f0:	e59f3044 	ldr	r3, [pc, #68]	; b73c <CGPIOPin::Write(unsigned int)+0xb0>
    b6f4:	e59f2044 	ldr	r2, [pc, #68]	; b740 <CGPIOPin::Write(unsigned int)+0xb4>
    b6f8:	e3550000 	cmp	r5, #0
    b6fc:	e5845014 	str	r5, [r4, #20]
    b700:	11a05003 	movne	r5, r3
    b704:	01a05002 	moveq	r5, r2
    b708:	eafffff2 	b	b6d8 <CGPIOPin::Write(unsigned int)+0x4c>
    b70c:	e3a02094 	mov	r2, #148	; 0x94
    b710:	e59f101c 	ldr	r1, [pc, #28]	; b734 <CGPIOPin::Write(unsigned int)+0xa8>
    b714:	e59f0028 	ldr	r0, [pc, #40]	; b744 <CGPIOPin::Write(unsigned int)+0xb8>
    b718:	ebfffcd1 	bl	aa64 <assertion_failed>
    b71c:	eaffffe3 	b	b6b0 <CGPIOPin::Write(unsigned int)+0x24>
    b720:	e3a02091 	mov	r2, #145	; 0x91
    b724:	e59f1008 	ldr	r1, [pc, #8]	; b734 <CGPIOPin::Write(unsigned int)+0xa8>
    b728:	e59f0018 	ldr	r0, [pc, #24]	; b748 <CGPIOPin::Write(unsigned int)+0xbc>
    b72c:	ebfffccc 	bl	aa64 <assertion_failed>
    b730:	eaffffdb 	b	b6a4 <CGPIOPin::Write(unsigned int)+0x18>
    b734:	000148c8 	.word	0x000148c8
    b738:	00014920 	.word	0x00014920
    b73c:	2020001c 	.word	0x2020001c
    b740:	20200028 	.word	0x20200028
    b744:	000148fc 	.word	0x000148fc
    b748:	000148e8 	.word	0x000148e8

0000b74c <CGPIOPin::Read() const>:
    b74c:	e5903004 	ldr	r3, [r0, #4]
    b750:	e92d4010 	push	{r4, lr}
    b754:	e3530035 	cmp	r3, #53	; 0x35
    b758:	e1a04000 	mov	r4, r0
    b75c:	8a000013 	bhi	b7b0 <CGPIOPin::Read() const+0x64>
    b760:	e5d43010 	ldrb	r3, [r4, #16]
    b764:	e2432002 	sub	r2, r3, #2
    b768:	e3530000 	cmp	r3, #0
    b76c:	13520001 	cmpne	r2, #1
    b770:	9a000003 	bls	b784 <CGPIOPin::Read() const+0x38>
    b774:	e3a020a8 	mov	r2, #168	; 0xa8
    b778:	e59f1044 	ldr	r1, [pc, #68]	; b7c4 <CGPIOPin::Read() const+0x78>
    b77c:	e59f0044 	ldr	r0, [pc, #68]	; b7c8 <CGPIOPin::Read() const+0x7c>
    b780:	ebfffcb7 	bl	aa64 <assertion_failed>
    b784:	e3a03000 	mov	r3, #0
    b788:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    b78c:	e59f1038 	ldr	r1, [pc, #56]	; b7cc <CGPIOPin::Read() const+0x80>
    b790:	e5940008 	ldr	r0, [r4, #8]
    b794:	e594200c 	ldr	r2, [r4, #12]
    b798:	e7901001 	ldr	r1, [r0, r1]
    b79c:	e1110002 	tst	r1, r2
    b7a0:	13a00001 	movne	r0, #1
    b7a4:	01a00003 	moveq	r0, r3
    b7a8:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    b7ac:	e8bd8010 	pop	{r4, pc}
    b7b0:	e3a020a4 	mov	r2, #164	; 0xa4
    b7b4:	e59f1008 	ldr	r1, [pc, #8]	; b7c4 <CGPIOPin::Read() const+0x78>
    b7b8:	e59f0010 	ldr	r0, [pc, #16]	; b7d0 <CGPIOPin::Read() const+0x84>
    b7bc:	ebfffca8 	bl	aa64 <assertion_failed>
    b7c0:	eaffffe6 	b	b760 <CGPIOPin::Read() const+0x14>
    b7c4:	000148c8 	.word	0x000148c8
    b7c8:	00014940 	.word	0x00014940
    b7cc:	20200034 	.word	0x20200034
    b7d0:	000148e8 	.word	0x000148e8

0000b7d4 <CGPIOPin::Invert()>:
    b7d4:	e5d03010 	ldrb	r3, [r0, #16]
    b7d8:	e92d4010 	push	{r4, lr}
    b7dc:	e3530001 	cmp	r3, #1
    b7e0:	e1a04000 	mov	r4, r0
    b7e4:	0a000003 	beq	b7f8 <CGPIOPin::Invert()+0x24>
    b7e8:	e3a020b5 	mov	r2, #181	; 0xb5
    b7ec:	e59f1018 	ldr	r1, [pc, #24]	; b80c <CGPIOPin::Invert()+0x38>
    b7f0:	e59f0018 	ldr	r0, [pc, #24]	; b810 <CGPIOPin::Invert()+0x3c>
    b7f4:	ebfffc9a 	bl	aa64 <assertion_failed>
    b7f8:	e5941014 	ldr	r1, [r4, #20]
    b7fc:	e1a00004 	mov	r0, r4
    b800:	e8bd4010 	pop	{r4, lr}
    b804:	e2211001 	eor	r1, r1, #1
    b808:	eaffff9f 	b	b68c <CGPIOPin::Write(unsigned int)>
    b80c:	000148c8 	.word	0x000148c8
    b810:	0001499c 	.word	0x0001499c

0000b814 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)>:
    b814:	e5d03010 	ldrb	r3, [r0, #16]
    b818:	e92d4070 	push	{r4, r5, r6, lr}
    b81c:	e1a05001 	mov	r5, r1
    b820:	e2431002 	sub	r1, r3, #2
    b824:	e3530000 	cmp	r3, #0
    b828:	13510001 	cmpne	r1, #1
    b82c:	e1a04000 	mov	r4, r0
    b830:	e1a06002 	mov	r6, r2
    b834:	9a000003 	bls	b848 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x34>
    b838:	e3a020be 	mov	r2, #190	; 0xbe
    b83c:	e59f10b4 	ldr	r1, [pc, #180]	; b8f8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe4>
    b840:	e59f00b4 	ldr	r0, [pc, #180]	; b8fc <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe8>
    b844:	ebfffc86 	bl	aa64 <assertion_failed>
    b848:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    b84c:	e3530006 	cmp	r3, #6
    b850:	0a000003 	beq	b864 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x50>
    b854:	e3a020c0 	mov	r2, #192	; 0xc0
    b858:	e59f1098 	ldr	r1, [pc, #152]	; b8f8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe4>
    b85c:	e59f009c 	ldr	r0, [pc, #156]	; b900 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xec>
    b860:	ebfffc7f 	bl	aa64 <assertion_failed>
    b864:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    b868:	e3530006 	cmp	r3, #6
    b86c:	0a000003 	beq	b880 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x6c>
    b870:	e3a020c1 	mov	r2, #193	; 0xc1
    b874:	e59f107c 	ldr	r1, [pc, #124]	; b8f8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe4>
    b878:	e59f0084 	ldr	r0, [pc, #132]	; b904 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xf0>
    b87c:	ebfffc78 	bl	aa64 <assertion_failed>
    b880:	e3550000 	cmp	r5, #0
    b884:	0a000016 	beq	b8e4 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xd0>
    b888:	e594301c 	ldr	r3, [r4, #28]
    b88c:	e3530000 	cmp	r3, #0
    b890:	0a000003 	beq	b8a4 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x90>
    b894:	e3a020c4 	mov	r2, #196	; 0xc4
    b898:	e59f1058 	ldr	r1, [pc, #88]	; b8f8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe4>
    b89c:	e59f0064 	ldr	r0, [pc, #100]	; b908 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xf4>
    b8a0:	ebfffc6f 	bl	aa64 <assertion_failed>
    b8a4:	e5940018 	ldr	r0, [r4, #24]
    b8a8:	e584501c 	str	r5, [r4, #28]
    b8ac:	e3500000 	cmp	r0, #0
    b8b0:	e5846020 	str	r6, [r4, #32]
    b8b4:	0a000002 	beq	b8c4 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xb0>
    b8b8:	e1a01004 	mov	r1, r4
    b8bc:	e8bd4070 	pop	{r4, r5, r6, lr}
    b8c0:	ea001f3f 	b	135c4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
    b8c4:	e59f102c 	ldr	r1, [pc, #44]	; b8f8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe4>
    b8c8:	e59f003c 	ldr	r0, [pc, #60]	; b90c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xf8>
    b8cc:	e3a020c9 	mov	r2, #201	; 0xc9
    b8d0:	ebfffc63 	bl	aa64 <assertion_failed>
    b8d4:	e5940018 	ldr	r0, [r4, #24]
    b8d8:	e1a01004 	mov	r1, r4
    b8dc:	e8bd4070 	pop	{r4, r5, r6, lr}
    b8e0:	ea001f37 	b	135c4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
    b8e4:	e3a020c3 	mov	r2, #195	; 0xc3
    b8e8:	e59f1008 	ldr	r1, [pc, #8]	; b8f8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe4>
    b8ec:	e59f001c 	ldr	r0, [pc, #28]	; b910 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xfc>
    b8f0:	ebfffc5b 	bl	aa64 <assertion_failed>
    b8f4:	eaffffe3 	b	b888 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x74>
    b8f8:	000148c8 	.word	0x000148c8
    b8fc:	00014940 	.word	0x00014940
    b900:	000149b8 	.word	0x000149b8
    b904:	000149dc 	.word	0x000149dc
    b908:	00014a04 	.word	0x00014a04
    b90c:	00014a14 	.word	0x00014a14
    b910:	00014b84 	.word	0x00014b84

0000b914 <CGPIOPin::DisconnectInterrupt()>:
    b914:	e5d03010 	ldrb	r3, [r0, #16]
    b918:	e92d4010 	push	{r4, lr}
    b91c:	e2432002 	sub	r2, r3, #2
    b920:	e3530000 	cmp	r3, #0
    b924:	13520001 	cmpne	r2, #1
    b928:	e1a04000 	mov	r4, r0
    b92c:	9a000003 	bls	b940 <CGPIOPin::DisconnectInterrupt()+0x2c>
    b930:	e3a020d1 	mov	r2, #209	; 0xd1
    b934:	e59f109c 	ldr	r1, [pc, #156]	; b9d8 <CGPIOPin::DisconnectInterrupt()+0xc4>
    b938:	e59f009c 	ldr	r0, [pc, #156]	; b9dc <CGPIOPin::DisconnectInterrupt()+0xc8>
    b93c:	ebfffc48 	bl	aa64 <assertion_failed>
    b940:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    b944:	e3530006 	cmp	r3, #6
    b948:	0a000003 	beq	b95c <CGPIOPin::DisconnectInterrupt()+0x48>
    b94c:	e3a020d3 	mov	r2, #211	; 0xd3
    b950:	e59f1080 	ldr	r1, [pc, #128]	; b9d8 <CGPIOPin::DisconnectInterrupt()+0xc4>
    b954:	e59f0084 	ldr	r0, [pc, #132]	; b9e0 <CGPIOPin::DisconnectInterrupt()+0xcc>
    b958:	ebfffc41 	bl	aa64 <assertion_failed>
    b95c:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    b960:	e3530006 	cmp	r3, #6
    b964:	0a000003 	beq	b978 <CGPIOPin::DisconnectInterrupt()+0x64>
    b968:	e3a020d4 	mov	r2, #212	; 0xd4
    b96c:	e59f1064 	ldr	r1, [pc, #100]	; b9d8 <CGPIOPin::DisconnectInterrupt()+0xc4>
    b970:	e59f006c 	ldr	r0, [pc, #108]	; b9e4 <CGPIOPin::DisconnectInterrupt()+0xd0>
    b974:	ebfffc3a 	bl	aa64 <assertion_failed>
    b978:	e594301c 	ldr	r3, [r4, #28]
    b97c:	e3530000 	cmp	r3, #0
    b980:	0a00000f 	beq	b9c4 <CGPIOPin::DisconnectInterrupt()+0xb0>
    b984:	e3a03000 	mov	r3, #0
    b988:	e5940018 	ldr	r0, [r4, #24]
    b98c:	e584301c 	str	r3, [r4, #28]
    b990:	e1500003 	cmp	r0, r3
    b994:	0a000002 	beq	b9a4 <CGPIOPin::DisconnectInterrupt()+0x90>
    b998:	e1a01004 	mov	r1, r4
    b99c:	e8bd4010 	pop	{r4, lr}
    b9a0:	ea001f30 	b	13668 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
    b9a4:	e59f102c 	ldr	r1, [pc, #44]	; b9d8 <CGPIOPin::DisconnectInterrupt()+0xc4>
    b9a8:	e59f0038 	ldr	r0, [pc, #56]	; b9e8 <CGPIOPin::DisconnectInterrupt()+0xd4>
    b9ac:	e3a020d9 	mov	r2, #217	; 0xd9
    b9b0:	ebfffc2b 	bl	aa64 <assertion_failed>
    b9b4:	e5940018 	ldr	r0, [r4, #24]
    b9b8:	e1a01004 	mov	r1, r4
    b9bc:	e8bd4010 	pop	{r4, lr}
    b9c0:	ea001f28 	b	13668 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
    b9c4:	e3a020d6 	mov	r2, #214	; 0xd6
    b9c8:	e59f1008 	ldr	r1, [pc, #8]	; b9d8 <CGPIOPin::DisconnectInterrupt()+0xc4>
    b9cc:	e59f0018 	ldr	r0, [pc, #24]	; b9ec <CGPIOPin::DisconnectInterrupt()+0xd8>
    b9d0:	ebfffc23 	bl	aa64 <assertion_failed>
    b9d4:	eaffffea 	b	b984 <CGPIOPin::DisconnectInterrupt()+0x70>
    b9d8:	000148c8 	.word	0x000148c8
    b9dc:	00014940 	.word	0x00014940
    b9e0:	000149b8 	.word	0x000149b8
    b9e4:	000149dc 	.word	0x000149dc
    b9e8:	00014a14 	.word	0x00014a14
    b9ec:	00014a24 	.word	0x00014a24

0000b9f0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)>:
    b9f0:	e5d03010 	ldrb	r3, [r0, #16]
    b9f4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b9f8:	e2432002 	sub	r2, r3, #2
    b9fc:	e3530000 	cmp	r3, #0
    ba00:	13520001 	cmpne	r2, #1
    ba04:	e1a04000 	mov	r4, r0
    ba08:	e1a05001 	mov	r5, r1
    ba0c:	9a000003 	bls	ba20 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x30>
    ba10:	e3a020e1 	mov	r2, #225	; 0xe1
    ba14:	e59f10d8 	ldr	r1, [pc, #216]	; baf4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x104>
    ba18:	e59f00d8 	ldr	r0, [pc, #216]	; baf8 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x108>
    ba1c:	ebfffc10 	bl	aa64 <assertion_failed>
    ba20:	e594301c 	ldr	r3, [r4, #28]
    ba24:	e3530000 	cmp	r3, #0
    ba28:	0a00002c 	beq	bae0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf0>
    ba2c:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    ba30:	e3530006 	cmp	r3, #6
    ba34:	0a000003 	beq	ba48 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x58>
    ba38:	e3a020e4 	mov	r2, #228	; 0xe4
    ba3c:	e59f10b0 	ldr	r1, [pc, #176]	; baf4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x104>
    ba40:	e59f00b4 	ldr	r0, [pc, #180]	; bafc <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x10c>
    ba44:	ebfffc06 	bl	aa64 <assertion_failed>
    ba48:	e3550005 	cmp	r5, #5
    ba4c:	ca000017 	bgt	bab0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xc0>
    ba50:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    ba54:	e1530005 	cmp	r3, r5
    ba58:	0a00001b 	beq	bacc <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xdc>
    ba5c:	e59f709c 	ldr	r7, [pc, #156]	; bb00 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x110>
    ba60:	e5942008 	ldr	r2, [r4, #8]
    ba64:	e5970000 	ldr	r0, [r7]
    ba68:	e59f6094 	ldr	r6, [pc, #148]	; bb04 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x114>
    ba6c:	e0853085 	add	r3, r5, r5, lsl #1
    ba70:	e3500000 	cmp	r0, #0
    ba74:	e5c45024 	strb	r5, [r4, #36]	; 0x24
    ba78:	e0826006 	add	r6, r2, r6
    ba7c:	e1a05103 	lsl	r5, r3, #2
    ba80:	1a000008 	bne	baa8 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xb8>
    ba84:	e594200c 	ldr	r2, [r4, #12]
    ba88:	e7963005 	ldr	r3, [r6, r5]
    ba8c:	e1833002 	orr	r3, r3, r2
    ba90:	e7863005 	str	r3, [r6, r5]
    ba94:	e5973000 	ldr	r3, [r7]
    ba98:	e3530000 	cmp	r3, #0
    ba9c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    baa0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    baa4:	ea001b0d 	b	126e0 <LeaveCritical>
    baa8:	eb001adf 	bl	1262c <EnterCritical>
    baac:	eafffff4 	b	ba84 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x94>
    bab0:	e3a020e5 	mov	r2, #229	; 0xe5
    bab4:	e59f1038 	ldr	r1, [pc, #56]	; baf4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x104>
    bab8:	e59f0048 	ldr	r0, [pc, #72]	; bb08 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x118>
    babc:	ebfffbe8 	bl	aa64 <assertion_failed>
    bac0:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    bac4:	e1530005 	cmp	r3, r5
    bac8:	1affffe3 	bne	ba5c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x6c>
    bacc:	e3a020e6 	mov	r2, #230	; 0xe6
    bad0:	e59f101c 	ldr	r1, [pc, #28]	; baf4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x104>
    bad4:	e59f0030 	ldr	r0, [pc, #48]	; bb0c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x11c>
    bad8:	ebfffbe1 	bl	aa64 <assertion_failed>
    badc:	eaffffde 	b	ba5c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x6c>
    bae0:	e3a020e2 	mov	r2, #226	; 0xe2
    bae4:	e59f1008 	ldr	r1, [pc, #8]	; baf4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x104>
    bae8:	e59f0020 	ldr	r0, [pc, #32]	; bb10 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x120>
    baec:	ebfffbdc 	bl	aa64 <assertion_failed>
    baf0:	eaffffcd 	b	ba2c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x3c>
    baf4:	000148c8 	.word	0x000148c8
    baf8:	00014940 	.word	0x00014940
    bafc:	000149b8 	.word	0x000149b8
    bb00:	00016648 	.word	0x00016648
    bb04:	2020004c 	.word	0x2020004c
    bb08:	00014a34 	.word	0x00014a34
    bb0c:	00014a58 	.word	0x00014a58
    bb10:	00014a24 	.word	0x00014a24

0000bb14 <CGPIOPin::DisableInterrupt()>:
    bb14:	e5d03010 	ldrb	r3, [r0, #16]
    bb18:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    bb1c:	e2432002 	sub	r2, r3, #2
    bb20:	e3530000 	cmp	r3, #0
    bb24:	13520001 	cmpne	r2, #1
    bb28:	e1a05000 	mov	r5, r0
    bb2c:	9a000003 	bls	bb40 <CGPIOPin::DisableInterrupt()+0x2c>
    bb30:	e3a020f7 	mov	r2, #247	; 0xf7
    bb34:	e59f1080 	ldr	r1, [pc, #128]	; bbbc <CGPIOPin::DisableInterrupt()+0xa8>
    bb38:	e59f0080 	ldr	r0, [pc, #128]	; bbc0 <CGPIOPin::DisableInterrupt()+0xac>
    bb3c:	ebfffbc8 	bl	aa64 <assertion_failed>
    bb40:	e5d53024 	ldrb	r3, [r5, #36]	; 0x24
    bb44:	e3530005 	cmp	r3, #5
    bb48:	ca000015 	bgt	bba4 <CGPIOPin::DisableInterrupt()+0x90>
    bb4c:	e59f7070 	ldr	r7, [pc, #112]	; bbc4 <CGPIOPin::DisableInterrupt()+0xb0>
    bb50:	e5952008 	ldr	r2, [r5, #8]
    bb54:	e5970000 	ldr	r0, [r7]
    bb58:	e59f6068 	ldr	r6, [pc, #104]	; bbc8 <CGPIOPin::DisableInterrupt()+0xb4>
    bb5c:	e0833083 	add	r3, r3, r3, lsl #1
    bb60:	e3500000 	cmp	r0, #0
    bb64:	e1a04103 	lsl	r4, r3, #2
    bb68:	e0826006 	add	r6, r2, r6
    bb6c:	1a00000a 	bne	bb9c <CGPIOPin::DisableInterrupt()+0x88>
    bb70:	e7963004 	ldr	r3, [r6, r4]
    bb74:	e595200c 	ldr	r2, [r5, #12]
    bb78:	e1c33002 	bic	r3, r3, r2
    bb7c:	e7863004 	str	r3, [r6, r4]
    bb80:	e5973000 	ldr	r3, [r7]
    bb84:	e3530000 	cmp	r3, #0
    bb88:	0a000000 	beq	bb90 <CGPIOPin::DisableInterrupt()+0x7c>
    bb8c:	eb001ad3 	bl	126e0 <LeaveCritical>
    bb90:	e3a03006 	mov	r3, #6
    bb94:	e5c53024 	strb	r3, [r5, #36]	; 0x24
    bb98:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    bb9c:	eb001aa2 	bl	1262c <EnterCritical>
    bba0:	eafffff2 	b	bb70 <CGPIOPin::DisableInterrupt()+0x5c>
    bba4:	e3a020f9 	mov	r2, #249	; 0xf9
    bba8:	e59f100c 	ldr	r1, [pc, #12]	; bbbc <CGPIOPin::DisableInterrupt()+0xa8>
    bbac:	e59f0018 	ldr	r0, [pc, #24]	; bbcc <CGPIOPin::DisableInterrupt()+0xb8>
    bbb0:	ebfffbab 	bl	aa64 <assertion_failed>
    bbb4:	e5d53024 	ldrb	r3, [r5, #36]	; 0x24
    bbb8:	eaffffe3 	b	bb4c <CGPIOPin::DisableInterrupt()+0x38>
    bbbc:	000148c8 	.word	0x000148c8
    bbc0:	00014940 	.word	0x00014940
    bbc4:	00016648 	.word	0x00016648
    bbc8:	2020004c 	.word	0x2020004c
    bbcc:	00014a74 	.word	0x00014a74

0000bbd0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)>:
    bbd0:	e5d03010 	ldrb	r3, [r0, #16]
    bbd4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    bbd8:	e2432002 	sub	r2, r3, #2
    bbdc:	e3530000 	cmp	r3, #0
    bbe0:	13520001 	cmpne	r2, #1
    bbe4:	e1a04000 	mov	r4, r0
    bbe8:	e1a05001 	mov	r5, r1
    bbec:	9a000003 	bls	bc00 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x30>
    bbf0:	e59f20dc 	ldr	r2, [pc, #220]	; bcd4 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x104>
    bbf4:	e59f10dc 	ldr	r1, [pc, #220]	; bcd8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x108>
    bbf8:	e59f00dc 	ldr	r0, [pc, #220]	; bcdc <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x10c>
    bbfc:	ebfffb98 	bl	aa64 <assertion_failed>
    bc00:	e594301c 	ldr	r3, [r4, #28]
    bc04:	e3530000 	cmp	r3, #0
    bc08:	0a00002c 	beq	bcc0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf0>
    bc0c:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    bc10:	e3530006 	cmp	r3, #6
    bc14:	0a000003 	beq	bc28 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x58>
    bc18:	e59f20c0 	ldr	r2, [pc, #192]	; bce0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x110>
    bc1c:	e59f10b4 	ldr	r1, [pc, #180]	; bcd8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x108>
    bc20:	e59f00bc 	ldr	r0, [pc, #188]	; bce4 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x114>
    bc24:	ebfffb8e 	bl	aa64 <assertion_failed>
    bc28:	e3550005 	cmp	r5, #5
    bc2c:	ca000017 	bgt	bc90 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xc0>
    bc30:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    bc34:	e1530005 	cmp	r3, r5
    bc38:	0a00001b 	beq	bcac <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xdc>
    bc3c:	e59f70a4 	ldr	r7, [pc, #164]	; bce8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x118>
    bc40:	e5942008 	ldr	r2, [r4, #8]
    bc44:	e5970000 	ldr	r0, [r7]
    bc48:	e59f609c 	ldr	r6, [pc, #156]	; bcec <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x11c>
    bc4c:	e0853085 	add	r3, r5, r5, lsl #1
    bc50:	e3500000 	cmp	r0, #0
    bc54:	e5c45025 	strb	r5, [r4, #37]	; 0x25
    bc58:	e0826006 	add	r6, r2, r6
    bc5c:	e1a05103 	lsl	r5, r3, #2
    bc60:	1a000008 	bne	bc88 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xb8>
    bc64:	e594200c 	ldr	r2, [r4, #12]
    bc68:	e7963005 	ldr	r3, [r6, r5]
    bc6c:	e1833002 	orr	r3, r3, r2
    bc70:	e7863005 	str	r3, [r6, r5]
    bc74:	e5973000 	ldr	r3, [r7]
    bc78:	e3530000 	cmp	r3, #0
    bc7c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    bc80:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    bc84:	ea001a95 	b	126e0 <LeaveCritical>
    bc88:	eb001a67 	bl	1262c <EnterCritical>
    bc8c:	eafffff4 	b	bc64 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x94>
    bc90:	e59f2058 	ldr	r2, [pc, #88]	; bcf0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x120>
    bc94:	e59f103c 	ldr	r1, [pc, #60]	; bcd8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x108>
    bc98:	e59f0054 	ldr	r0, [pc, #84]	; bcf4 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x124>
    bc9c:	ebfffb70 	bl	aa64 <assertion_failed>
    bca0:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    bca4:	e1530005 	cmp	r3, r5
    bca8:	1affffe3 	bne	bc3c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x6c>
    bcac:	e59f2044 	ldr	r2, [pc, #68]	; bcf8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x128>
    bcb0:	e59f1020 	ldr	r1, [pc, #32]	; bcd8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x108>
    bcb4:	e59f0040 	ldr	r0, [pc, #64]	; bcfc <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x12c>
    bcb8:	ebfffb69 	bl	aa64 <assertion_failed>
    bcbc:	eaffffde 	b	bc3c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x6c>
    bcc0:	e59f2038 	ldr	r2, [pc, #56]	; bd00 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x130>
    bcc4:	e59f100c 	ldr	r1, [pc, #12]	; bcd8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x108>
    bcc8:	e59f0034 	ldr	r0, [pc, #52]	; bd04 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x134>
    bccc:	ebfffb64 	bl	aa64 <assertion_failed>
    bcd0:	eaffffcd 	b	bc0c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x3c>
    bcd4:	0000010a 	.word	0x0000010a
    bcd8:	000148c8 	.word	0x000148c8
    bcdc:	00014940 	.word	0x00014940
    bce0:	0000010d 	.word	0x0000010d
    bce4:	000149dc 	.word	0x000149dc
    bce8:	00016648 	.word	0x00016648
    bcec:	2020004c 	.word	0x2020004c
    bcf0:	0000010e 	.word	0x0000010e
    bcf4:	00014a34 	.word	0x00014a34
    bcf8:	0000010f 	.word	0x0000010f
    bcfc:	00014a98 	.word	0x00014a98
    bd00:	0000010b 	.word	0x0000010b
    bd04:	00014a24 	.word	0x00014a24

0000bd08 <CGPIOPin::DisableInterrupt2()>:
    bd08:	e5d03010 	ldrb	r3, [r0, #16]
    bd0c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    bd10:	e2432002 	sub	r2, r3, #2
    bd14:	e3530000 	cmp	r3, #0
    bd18:	13520001 	cmpne	r2, #1
    bd1c:	e1a05000 	mov	r5, r0
    bd20:	9a000003 	bls	bd34 <CGPIOPin::DisableInterrupt2()+0x2c>
    bd24:	e3a02e12 	mov	r2, #288	; 0x120
    bd28:	e59f1080 	ldr	r1, [pc, #128]	; bdb0 <CGPIOPin::DisableInterrupt2()+0xa8>
    bd2c:	e59f0080 	ldr	r0, [pc, #128]	; bdb4 <CGPIOPin::DisableInterrupt2()+0xac>
    bd30:	ebfffb4b 	bl	aa64 <assertion_failed>
    bd34:	e5d53025 	ldrb	r3, [r5, #37]	; 0x25
    bd38:	e3530005 	cmp	r3, #5
    bd3c:	ca000015 	bgt	bd98 <CGPIOPin::DisableInterrupt2()+0x90>
    bd40:	e59f7070 	ldr	r7, [pc, #112]	; bdb8 <CGPIOPin::DisableInterrupt2()+0xb0>
    bd44:	e5952008 	ldr	r2, [r5, #8]
    bd48:	e5970000 	ldr	r0, [r7]
    bd4c:	e59f6068 	ldr	r6, [pc, #104]	; bdbc <CGPIOPin::DisableInterrupt2()+0xb4>
    bd50:	e0833083 	add	r3, r3, r3, lsl #1
    bd54:	e3500000 	cmp	r0, #0
    bd58:	e1a04103 	lsl	r4, r3, #2
    bd5c:	e0826006 	add	r6, r2, r6
    bd60:	1a00000a 	bne	bd90 <CGPIOPin::DisableInterrupt2()+0x88>
    bd64:	e7963004 	ldr	r3, [r6, r4]
    bd68:	e595200c 	ldr	r2, [r5, #12]
    bd6c:	e1c33002 	bic	r3, r3, r2
    bd70:	e7863004 	str	r3, [r6, r4]
    bd74:	e5973000 	ldr	r3, [r7]
    bd78:	e3530000 	cmp	r3, #0
    bd7c:	0a000000 	beq	bd84 <CGPIOPin::DisableInterrupt2()+0x7c>
    bd80:	eb001a56 	bl	126e0 <LeaveCritical>
    bd84:	e3a03006 	mov	r3, #6
    bd88:	e5c53025 	strb	r3, [r5, #37]	; 0x25
    bd8c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    bd90:	eb001a25 	bl	1262c <EnterCritical>
    bd94:	eafffff2 	b	bd64 <CGPIOPin::DisableInterrupt2()+0x5c>
    bd98:	e59f2020 	ldr	r2, [pc, #32]	; bdc0 <CGPIOPin::DisableInterrupt2()+0xb8>
    bd9c:	e59f100c 	ldr	r1, [pc, #12]	; bdb0 <CGPIOPin::DisableInterrupt2()+0xa8>
    bda0:	e59f001c 	ldr	r0, [pc, #28]	; bdc4 <CGPIOPin::DisableInterrupt2()+0xbc>
    bda4:	ebfffb2e 	bl	aa64 <assertion_failed>
    bda8:	e5d53025 	ldrb	r3, [r5, #37]	; 0x25
    bdac:	eaffffe3 	b	bd40 <CGPIOPin::DisableInterrupt2()+0x38>
    bdb0:	000148c8 	.word	0x000148c8
    bdb4:	00014940 	.word	0x00014940
    bdb8:	00016648 	.word	0x00016648
    bdbc:	2020004c 	.word	0x2020004c
    bdc0:	00000122 	.word	0x00000122
    bdc4:	00014ab4 	.word	0x00014ab4

0000bdc8 <CGPIOPin::ReadAll()>:
    bdc8:	e59f3004 	ldr	r3, [pc, #4]	; bdd4 <CGPIOPin::ReadAll()+0xc>
    bdcc:	e5930034 	ldr	r0, [r3, #52]	; 0x34
    bdd0:	e12fff1e 	bx	lr
    bdd4:	20200000 	.word	0x20200000

0000bdd8 <CGPIOPin::SetPullUpMode(unsigned int)>:
    bdd8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    bddc:	e1a08000 	mov	r8, r0
    bde0:	e59f4078 	ldr	r4, [pc, #120]	; be60 <CGPIOPin::SetPullUpMode(unsigned int)+0x88>
    bde4:	e1a09001 	mov	r9, r1
    bde8:	e5940000 	ldr	r0, [r4]
    bdec:	e5986008 	ldr	r6, [r8, #8]
    bdf0:	e3500000 	cmp	r0, #0
    bdf4:	e59f5068 	ldr	r5, [pc, #104]	; be64 <CGPIOPin::SetPullUpMode(unsigned int)+0x8c>
    bdf8:	1a000016 	bne	be58 <CGPIOPin::SetPullUpMode(unsigned int)+0x80>
    bdfc:	e3590002 	cmp	r9, #2
    be00:	8a00000f 	bhi	be44 <CGPIOPin::SetPullUpMode(unsigned int)+0x6c>
    be04:	e59f705c 	ldr	r7, [pc, #92]	; be68 <CGPIOPin::SetPullUpMode(unsigned int)+0x90>
    be08:	e3a00005 	mov	r0, #5
    be0c:	e5879094 	str	r9, [r7, #148]	; 0x94
    be10:	eb001660 	bl	11798 <CTimer::SimpleusDelay(unsigned int)>
    be14:	e598300c 	ldr	r3, [r8, #12]
    be18:	e3a00005 	mov	r0, #5
    be1c:	e7863005 	str	r3, [r6, r5]
    be20:	eb00165c 	bl	11798 <CTimer::SimpleusDelay(unsigned int)>
    be24:	e3a03000 	mov	r3, #0
    be28:	e5873094 	str	r3, [r7, #148]	; 0x94
    be2c:	e7863005 	str	r3, [r6, r5]
    be30:	e5943000 	ldr	r3, [r4]
    be34:	e3530000 	cmp	r3, #0
    be38:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    be3c:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    be40:	ea001a26 	b	126e0 <LeaveCritical>
    be44:	e59f2020 	ldr	r2, [pc, #32]	; be6c <CGPIOPin::SetPullUpMode(unsigned int)+0x94>
    be48:	e59f1020 	ldr	r1, [pc, #32]	; be70 <CGPIOPin::SetPullUpMode(unsigned int)+0x98>
    be4c:	e59f0020 	ldr	r0, [pc, #32]	; be74 <CGPIOPin::SetPullUpMode(unsigned int)+0x9c>
    be50:	ebfffb03 	bl	aa64 <assertion_failed>
    be54:	eaffffea 	b	be04 <CGPIOPin::SetPullUpMode(unsigned int)+0x2c>
    be58:	eb0019f3 	bl	1262c <EnterCritical>
    be5c:	eaffffe6 	b	bdfc <CGPIOPin::SetPullUpMode(unsigned int)+0x24>
    be60:	00016648 	.word	0x00016648
    be64:	20200098 	.word	0x20200098
    be68:	20200000 	.word	0x20200000
    be6c:	0000013b 	.word	0x0000013b
    be70:	000148c8 	.word	0x000148c8
    be74:	00014ad8 	.word	0x00014ad8

0000be78 <CGPIOPin::SetAlternateFunction(unsigned int)>:
    be78:	e5902004 	ldr	r2, [r0, #4]
    be7c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    be80:	e3520035 	cmp	r2, #53	; 0x35
    be84:	e1a06001 	mov	r6, r1
    be88:	8a000022 	bhi	bf18 <CGPIOPin::SetAlternateFunction(unsigned int)+0xa0>
    be8c:	e59f30a0 	ldr	r3, [pc, #160]	; bf34 <CGPIOPin::SetAlternateFunction(unsigned int)+0xbc>
    be90:	e3560005 	cmp	r6, #5
    be94:	e0831293 	umull	r1, r3, r3, r2
    be98:	e1a031a3 	lsr	r3, r3, #3
    be9c:	e2835302 	add	r5, r3, #134217728	; 0x8000000
    bea0:	e0833103 	add	r3, r3, r3, lsl #2
    bea4:	e2855702 	add	r5, r5, #524288	; 0x80000
    bea8:	e0423083 	sub	r3, r2, r3, lsl #1
    beac:	e1a05105 	lsl	r5, r5, #2
    beb0:	e0834083 	add	r4, r3, r3, lsl #1
    beb4:	8a000012 	bhi	bf04 <CGPIOPin::SetAlternateFunction(unsigned int)+0x8c>
    beb8:	e59f7078 	ldr	r7, [pc, #120]	; bf38 <CGPIOPin::SetAlternateFunction(unsigned int)+0xc0>
    bebc:	e5970000 	ldr	r0, [r7]
    bec0:	e3500000 	cmp	r0, #0
    bec4:	1a00000c 	bne	befc <CGPIOPin::SetAlternateFunction(unsigned int)+0x84>
    bec8:	e3a01007 	mov	r1, #7
    becc:	e59f3068 	ldr	r3, [pc, #104]	; bf3c <CGPIOPin::SetAlternateFunction(unsigned int)+0xc4>
    bed0:	e5952000 	ldr	r2, [r5]
    bed4:	e0836106 	add	r6, r3, r6, lsl #2
    bed8:	e5963010 	ldr	r3, [r6, #16]
    bedc:	e1c22411 	bic	r2, r2, r1, lsl r4
    bee0:	e1824413 	orr	r4, r2, r3, lsl r4
    bee4:	e5854000 	str	r4, [r5]
    bee8:	e5973000 	ldr	r3, [r7]
    beec:	e3530000 	cmp	r3, #0
    bef0:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    bef4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    bef8:	ea0019f8 	b	126e0 <LeaveCritical>
    befc:	eb0019ca 	bl	1262c <EnterCritical>
    bf00:	eafffff0 	b	bec8 <CGPIOPin::SetAlternateFunction(unsigned int)+0x50>
    bf04:	e3a02f53 	mov	r2, #332	; 0x14c
    bf08:	e59f1030 	ldr	r1, [pc, #48]	; bf40 <CGPIOPin::SetAlternateFunction(unsigned int)+0xc8>
    bf0c:	e59f0030 	ldr	r0, [pc, #48]	; bf44 <CGPIOPin::SetAlternateFunction(unsigned int)+0xcc>
    bf10:	ebfffad3 	bl	aa64 <assertion_failed>
    bf14:	eaffffe7 	b	beb8 <CGPIOPin::SetAlternateFunction(unsigned int)+0x40>
    bf18:	e1a04000 	mov	r4, r0
    bf1c:	e3a02f52 	mov	r2, #328	; 0x148
    bf20:	e59f1018 	ldr	r1, [pc, #24]	; bf40 <CGPIOPin::SetAlternateFunction(unsigned int)+0xc8>
    bf24:	e59f001c 	ldr	r0, [pc, #28]	; bf48 <CGPIOPin::SetAlternateFunction(unsigned int)+0xd0>
    bf28:	ebfffacd 	bl	aa64 <assertion_failed>
    bf2c:	e5942004 	ldr	r2, [r4, #4]
    bf30:	eaffffd5 	b	be8c <CGPIOPin::SetAlternateFunction(unsigned int)+0x14>
    bf34:	cccccccd 	.word	0xcccccccd
    bf38:	00016648 	.word	0x00016648
    bf3c:	000148a0 	.word	0x000148a0
    bf40:	000148c8 	.word	0x000148c8
    bf44:	00014ae4 	.word	0x00014ae4
    bf48:	000148e8 	.word	0x000148e8

0000bf4c <CGPIOPin::SetMode(TGPIOMode, bool)>:
    bf4c:	e3510009 	cmp	r1, #9
    bf50:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    bf54:	e1a05001 	mov	r5, r1
    bf58:	e1a04000 	mov	r4, r0
    bf5c:	e1a06002 	mov	r6, r2
    bf60:	ca00003f 	bgt	c064 <CGPIOPin::SetMode(TGPIOMode, bool)+0x118>
    bf64:	e5c45010 	strb	r5, [r4, #16]
    bf68:	e3a02000 	mov	r2, #0
    bf6c:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
    bf70:	e5d43010 	ldrb	r3, [r4, #16]
    bf74:	e2431004 	sub	r1, r3, #4
    bf78:	e6ef0071 	uxtb	r0, r1
    bf7c:	e3500005 	cmp	r0, #5
    bf80:	9a000030 	bls	c048 <CGPIOPin::SetMode(TGPIOMode, bool)+0xfc>
    bf84:	e3530001 	cmp	r3, #1
    bf88:	13a03000 	movne	r3, #0
    bf8c:	02063001 	andeq	r3, r6, #1
    bf90:	e3530000 	cmp	r3, #0
    bf94:	1a000055 	bne	c0f0 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1a4>
    bf98:	e5943004 	ldr	r3, [r4, #4]
    bf9c:	e3530035 	cmp	r3, #53	; 0x35
    bfa0:	8a00003a 	bhi	c090 <CGPIOPin::SetMode(TGPIOMode, bool)+0x144>
    bfa4:	e59f5154 	ldr	r5, [pc, #340]	; c100 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1b4>
    bfa8:	e59f8154 	ldr	r8, [pc, #340]	; c104 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1b8>
    bfac:	e0852395 	umull	r2, r5, r5, r3
    bfb0:	e5980000 	ldr	r0, [r8]
    bfb4:	e1a051a5 	lsr	r5, r5, #3
    bfb8:	e2857302 	add	r7, r5, #134217728	; 0x8000000
    bfbc:	e0855105 	add	r5, r5, r5, lsl #2
    bfc0:	e2877702 	add	r7, r7, #524288	; 0x80000
    bfc4:	e0435085 	sub	r5, r3, r5, lsl #1
    bfc8:	e3500000 	cmp	r0, #0
    bfcc:	e1a07107 	lsl	r7, r7, #2
    bfd0:	e0855085 	add	r5, r5, r5, lsl #1
    bfd4:	1a000033 	bne	c0a8 <CGPIOPin::SetMode(TGPIOMode, bool)+0x15c>
    bfd8:	e5d42010 	ldrb	r2, [r4, #16]
    bfdc:	e3a01007 	mov	r1, #7
    bfe0:	e2422001 	sub	r2, r2, #1
    bfe4:	e16f2f12 	clz	r2, r2
    bfe8:	e5973000 	ldr	r3, [r7]
    bfec:	e1a022a2 	lsr	r2, r2, #5
    bff0:	e1c33511 	bic	r3, r3, r1, lsl r5
    bff4:	e1835512 	orr	r5, r3, r2, lsl r5
    bff8:	e5875000 	str	r5, [r7]
    bffc:	e5983000 	ldr	r3, [r8]
    c000:	e3530000 	cmp	r3, #0
    c004:	1a000029 	bne	c0b0 <CGPIOPin::SetMode(TGPIOMode, bool)+0x164>
    c008:	e3560000 	cmp	r6, #0
    c00c:	0a00000a 	beq	c03c <CGPIOPin::SetMode(TGPIOMode, bool)+0xf0>
    c010:	e5d43010 	ldrb	r3, [r4, #16]
    c014:	e3530003 	cmp	r3, #3
    c018:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    c01c:	ea000006 	b	c03c <CGPIOPin::SetMode(TGPIOMode, bool)+0xf0>
    c020:	0000c0e0 	.word	0x0000c0e0
    c024:	0000c0d0 	.word	0x0000c0d0
    c028:	0000c0c0 	.word	0x0000c0c0
    c02c:	0000c030 	.word	0x0000c030
    c030:	e1a00004 	mov	r0, r4
    c034:	e3a01001 	mov	r1, #1
    c038:	ebffff66 	bl	bdd8 <CGPIOPin::SetPullUpMode(unsigned int)>
    c03c:	e3a03000 	mov	r3, #0
    c040:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    c044:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    c048:	e1560002 	cmp	r6, r2
    c04c:	1a000009 	bne	c078 <CGPIOPin::SetMode(TGPIOMode, bool)+0x12c>
    c050:	e1a00004 	mov	r0, r4
    c054:	ebffff87 	bl	be78 <CGPIOPin::SetAlternateFunction(unsigned int)>
    c058:	e3a03000 	mov	r3, #0
    c05c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    c060:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    c064:	e3a0204f 	mov	r2, #79	; 0x4f
    c068:	e59f1098 	ldr	r1, [pc, #152]	; c108 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1bc>
    c06c:	e59f0098 	ldr	r0, [pc, #152]	; c10c <CGPIOPin::SetMode(TGPIOMode, bool)+0x1c0>
    c070:	ebfffa7b 	bl	aa64 <assertion_failed>
    c074:	eaffffba 	b	bf64 <CGPIOPin::SetMode(TGPIOMode, bool)+0x18>
    c078:	e1a01002 	mov	r1, r2
    c07c:	e1a00004 	mov	r0, r4
    c080:	ebffff54 	bl	bdd8 <CGPIOPin::SetPullUpMode(unsigned int)>
    c084:	e5d43010 	ldrb	r3, [r4, #16]
    c088:	e2431004 	sub	r1, r3, #4
    c08c:	eaffffef 	b	c050 <CGPIOPin::SetMode(TGPIOMode, bool)+0x104>
    c090:	e3a02068 	mov	r2, #104	; 0x68
    c094:	e59f106c 	ldr	r1, [pc, #108]	; c108 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1bc>
    c098:	e59f0070 	ldr	r0, [pc, #112]	; c110 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1c4>
    c09c:	ebfffa70 	bl	aa64 <assertion_failed>
    c0a0:	e5943004 	ldr	r3, [r4, #4]
    c0a4:	eaffffbe 	b	bfa4 <CGPIOPin::SetMode(TGPIOMode, bool)+0x58>
    c0a8:	eb00195f 	bl	1262c <EnterCritical>
    c0ac:	eaffffc9 	b	bfd8 <CGPIOPin::SetMode(TGPIOMode, bool)+0x8c>
    c0b0:	eb00198a 	bl	126e0 <LeaveCritical>
    c0b4:	e3560000 	cmp	r6, #0
    c0b8:	0affffdf 	beq	c03c <CGPIOPin::SetMode(TGPIOMode, bool)+0xf0>
    c0bc:	eaffffd3 	b	c010 <CGPIOPin::SetMode(TGPIOMode, bool)+0xc4>
    c0c0:	e1a00004 	mov	r0, r4
    c0c4:	e3a01002 	mov	r1, #2
    c0c8:	ebffff42 	bl	bdd8 <CGPIOPin::SetPullUpMode(unsigned int)>
    c0cc:	eaffffda 	b	c03c <CGPIOPin::SetMode(TGPIOMode, bool)+0xf0>
    c0d0:	e1a00004 	mov	r0, r4
    c0d4:	e3a01000 	mov	r1, #0
    c0d8:	ebfffd6b 	bl	b68c <CGPIOPin::Write(unsigned int)>
    c0dc:	eaffffd6 	b	c03c <CGPIOPin::SetMode(TGPIOMode, bool)+0xf0>
    c0e0:	e1a00004 	mov	r0, r4
    c0e4:	e3a01000 	mov	r1, #0
    c0e8:	ebffff3a 	bl	bdd8 <CGPIOPin::SetPullUpMode(unsigned int)>
    c0ec:	eaffffd2 	b	c03c <CGPIOPin::SetMode(TGPIOMode, bool)+0xf0>
    c0f0:	e1a01002 	mov	r1, r2
    c0f4:	e1a00004 	mov	r0, r4
    c0f8:	ebffff36 	bl	bdd8 <CGPIOPin::SetPullUpMode(unsigned int)>
    c0fc:	eaffffa5 	b	bf98 <CGPIOPin::SetMode(TGPIOMode, bool)+0x4c>
    c100:	cccccccd 	.word	0xcccccccd
    c104:	00016648 	.word	0x00016648
    c108:	000148c8 	.word	0x000148c8
    c10c:	00014af4 	.word	0x00014af4
    c110:	000148e8 	.word	0x000148e8

0000c114 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>:
    c114:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c118:	e3a0c006 	mov	ip, #6
    c11c:	e3a0e000 	mov	lr, #0
    c120:	e3a07036 	mov	r7, #54	; 0x36
    c124:	e3a0600a 	mov	r6, #10
    c128:	e1a04000 	mov	r4, r0
    c12c:	e1a05002 	mov	r5, r2
    c130:	e5803018 	str	r3, [r0, #24]
    c134:	e59f302c 	ldr	r3, [pc, #44]	; c168 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x54>
    c138:	e580e01c 	str	lr, [r0, #28]
    c13c:	e8800088 	stm	r0, {r3, r7}
    c140:	e5c0c024 	strb	ip, [r0, #36]	; 0x24
    c144:	e5c0c025 	strb	ip, [r0, #37]	; 0x25
    c148:	e5c06010 	strb	r6, [r0, #16]
    c14c:	ebfffd29 	bl	b5f8 <CGPIOPin::AssignPin(unsigned int)>
    c150:	e1a00004 	mov	r0, r4
    c154:	e1a01005 	mov	r1, r5
    c158:	e3a02001 	mov	r2, #1
    c15c:	ebffff7a 	bl	bf4c <CGPIOPin::SetMode(TGPIOMode, bool)>
    c160:	e1a00004 	mov	r0, r4
    c164:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    c168:	000148a8 	.word	0x000148a8

0000c16c <CGPIOPin::InterruptHandler()>:
    c16c:	e5d03010 	ldrb	r3, [r0, #16]
    c170:	e92d4010 	push	{r4, lr}
    c174:	e2432002 	sub	r2, r3, #2
    c178:	e3530000 	cmp	r3, #0
    c17c:	13520001 	cmpne	r2, #1
    c180:	e1a04000 	mov	r4, r0
    c184:	9a000003 	bls	c198 <CGPIOPin::InterruptHandler()+0x2c>
    c188:	e59f2074 	ldr	r2, [pc, #116]	; c204 <CGPIOPin::InterruptHandler()+0x98>
    c18c:	e59f1074 	ldr	r1, [pc, #116]	; c208 <CGPIOPin::InterruptHandler()+0x9c>
    c190:	e59f0074 	ldr	r0, [pc, #116]	; c20c <CGPIOPin::InterruptHandler()+0xa0>
    c194:	ebfffa32 	bl	aa64 <assertion_failed>
    c198:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    c19c:	e3530005 	cmp	r3, #5
    c1a0:	da000002 	ble	c1b0 <CGPIOPin::InterruptHandler()+0x44>
    c1a4:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    c1a8:	e3530005 	cmp	r3, #5
    c1ac:	ca000005 	bgt	c1c8 <CGPIOPin::InterruptHandler()+0x5c>
    c1b0:	e594301c 	ldr	r3, [r4, #28]
    c1b4:	e3530000 	cmp	r3, #0
    c1b8:	0a000009 	beq	c1e4 <CGPIOPin::InterruptHandler()+0x78>
    c1bc:	e5940020 	ldr	r0, [r4, #32]
    c1c0:	e8bd4010 	pop	{r4, lr}
    c1c4:	e12fff13 	bx	r3
    c1c8:	e59f2040 	ldr	r2, [pc, #64]	; c210 <CGPIOPin::InterruptHandler()+0xa4>
    c1cc:	e59f1034 	ldr	r1, [pc, #52]	; c208 <CGPIOPin::InterruptHandler()+0x9c>
    c1d0:	e59f003c 	ldr	r0, [pc, #60]	; c214 <CGPIOPin::InterruptHandler()+0xa8>
    c1d4:	ebfffa22 	bl	aa64 <assertion_failed>
    c1d8:	e594301c 	ldr	r3, [r4, #28]
    c1dc:	e3530000 	cmp	r3, #0
    c1e0:	1afffff5 	bne	c1bc <CGPIOPin::InterruptHandler()+0x50>
    c1e4:	e59f002c 	ldr	r0, [pc, #44]	; c218 <CGPIOPin::InterruptHandler()+0xac>
    c1e8:	e59f202c 	ldr	r2, [pc, #44]	; c21c <CGPIOPin::InterruptHandler()+0xb0>
    c1ec:	e59f1014 	ldr	r1, [pc, #20]	; c208 <CGPIOPin::InterruptHandler()+0x9c>
    c1f0:	ebfffa1b 	bl	aa64 <assertion_failed>
    c1f4:	e594301c 	ldr	r3, [r4, #28]
    c1f8:	e5940020 	ldr	r0, [r4, #32]
    c1fc:	e8bd4010 	pop	{r4, lr}
    c200:	e12fff13 	bx	r3
    c204:	0000015b 	.word	0x0000015b
    c208:	000148c8 	.word	0x000148c8
    c20c:	00014940 	.word	0x00014940
    c210:	0000015d 	.word	0x0000015d
    c214:	00014b0c 	.word	0x00014b0c
    c218:	00014a24 	.word	0x00014a24
    c21c:	0000015f 	.word	0x0000015f

0000c220 <CGPIOPin::DisableAllInterrupts(unsigned int)>:
    c220:	e3500035 	cmp	r0, #53	; 0x35
    c224:	e92d4070 	push	{r4, r5, r6, lr}
    c228:	e1a05000 	mov	r5, r0
    c22c:	8a00001e 	bhi	c2ac <CGPIOPin::DisableAllInterrupts(unsigned int)+0x8c>
    c230:	e3a02001 	mov	r2, #1
    c234:	e59f6084 	ldr	r6, [pc, #132]	; c2c0 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xa0>
    c238:	e59f4084 	ldr	r4, [pc, #132]	; c2c4 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xa4>
    c23c:	e5960000 	ldr	r0, [r6]
    c240:	e08442a5 	add	r4, r4, r5, lsr #5
    c244:	e3500000 	cmp	r0, #0
    c248:	e205501f 	and	r5, r5, #31
    c24c:	e1a04104 	lsl	r4, r4, #2
    c250:	e1a05512 	lsl	r5, r2, r5
    c254:	1a00000f 	bne	c298 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x78>
    c258:	e59f3068 	ldr	r3, [pc, #104]	; c2c8 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xa8>
    c25c:	e1540003 	cmp	r4, r3
    c260:	8a00000b 	bhi	c294 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x74>
    c264:	e1e02005 	mvn	r2, r5
    c268:	e59f1058 	ldr	r1, [pc, #88]	; c2c8 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xa8>
    c26c:	e5943000 	ldr	r3, [r4]
    c270:	e0033002 	and	r3, r3, r2
    c274:	e484300c 	str	r3, [r4], #12
    c278:	e1540001 	cmp	r4, r1
    c27c:	9afffffa 	bls	c26c <CGPIOPin::DisableAllInterrupts(unsigned int)+0x4c>
    c280:	e5963000 	ldr	r3, [r6]
    c284:	e3530000 	cmp	r3, #0
    c288:	08bd8070 	popeq	{r4, r5, r6, pc}
    c28c:	e8bd4070 	pop	{r4, r5, r6, lr}
    c290:	ea001912 	b	126e0 <LeaveCritical>
    c294:	e8bd8070 	pop	{r4, r5, r6, pc}
    c298:	eb0018e3 	bl	1262c <EnterCritical>
    c29c:	e59f3024 	ldr	r3, [pc, #36]	; c2c8 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xa8>
    c2a0:	e1540003 	cmp	r4, r3
    c2a4:	9affffee 	bls	c264 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x44>
    c2a8:	eafffff4 	b	c280 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x60>
    c2ac:	e59f2018 	ldr	r2, [pc, #24]	; c2cc <CGPIOPin::DisableAllInterrupts(unsigned int)+0xac>
    c2b0:	e59f1018 	ldr	r1, [pc, #24]	; c2d0 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xb0>
    c2b4:	e59f0018 	ldr	r0, [pc, #24]	; c2d4 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xb4>
    c2b8:	ebfff9e9 	bl	aa64 <assertion_failed>
    c2bc:	eaffffdb 	b	c230 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x10>
    c2c0:	00016648 	.word	0x00016648
    c2c4:	08080013 	.word	0x08080013
    c2c8:	2020008b 	.word	0x2020008b
    c2cc:	00000165 	.word	0x00000165
    c2d0:	000148c8 	.word	0x000148c8
    c2d4:	00014b58 	.word	0x00014b58

0000c2d8 <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE>:
    c2d8:	e3a02001 	mov	r2, #1
    c2dc:	e59f3004 	ldr	r3, [pc, #4]	; c2e8 <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE+0x10>
    c2e0:	e5832000 	str	r2, [r3]
    c2e4:	e12fff1e 	bx	lr
    c2e8:	00016648 	.word	0x00016648

0000c2ec <CInterruptSystem::CInterruptSystem()>:
    c2ec:	e1a0c000 	mov	ip, r0
    c2f0:	e2802f47 	add	r2, r0, #284	; 0x11c
    c2f4:	e1a00002 	mov	r0, r2
    c2f8:	e3a01000 	mov	r1, #0
    c2fc:	e24c3004 	sub	r3, ip, #4
    c300:	e5a31004 	str	r1, [r3, #4]!
    c304:	e1530000 	cmp	r3, r0
    c308:	e5a21004 	str	r1, [r2, #4]!
    c30c:	1afffffb 	bne	c300 <CInterruptSystem::CInterruptSystem()+0x14>
    c310:	e59f3008 	ldr	r3, [pc, #8]	; c320 <CInterruptSystem::CInterruptSystem()+0x34>
    c314:	e1a0000c 	mov	r0, ip
    c318:	e583c000 	str	ip, [r3]
    c31c:	e12fff1e 	bx	lr
    c320:	0001664c 	.word	0x0001664c

0000c324 <CInterruptSystem::~CInterruptSystem()>:
    c324:	e3a02000 	mov	r2, #0
    c328:	e59f3004 	ldr	r3, [pc, #4]	; c334 <CInterruptSystem::~CInterruptSystem()+0x10>
    c32c:	e5832000 	str	r2, [r3]
    c330:	e12fff1e 	bx	lr
    c334:	0001664c 	.word	0x0001664c

0000c338 <CInterruptSystem::Initialize()>:
    c338:	e92d4010 	push	{r4, lr}
    c33c:	e3a04000 	mov	r4, #0
    c340:	e59f2050 	ldr	r2, [pc, #80]	; c398 <CInterruptSystem::Initialize()+0x60>
    c344:	e59f3050 	ldr	r3, [pc, #80]	; c39c <CInterruptSystem::Initialize()+0x64>
    c348:	e1a02142 	asr	r2, r2, #2
    c34c:	e1a03143 	asr	r3, r3, #2
    c350:	e2422002 	sub	r2, r2, #2
    c354:	e2433002 	sub	r3, r3, #2
    c358:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
    c35c:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
    c360:	e5842018 	str	r2, [r4, #24]
    c364:	e584301c 	str	r3, [r4, #28]
    c368:	eb001901 	bl	12774 <SyncDataAndInstructionCache>
    c36c:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
    c370:	e3e02000 	mvn	r2, #0
    c374:	e59f3024 	ldr	r3, [pc, #36]	; c3a0 <CInterruptSystem::Initialize()+0x68>
    c378:	e583420c 	str	r4, [r3, #524]	; 0x20c
    c37c:	e583221c 	str	r2, [r3, #540]	; 0x21c
    c380:	e5832220 	str	r2, [r3, #544]	; 0x220
    c384:	e5832224 	str	r2, [r3, #548]	; 0x224
    c388:	ee074fba 	mcr	15, 0, r4, cr7, cr10, {5}
    c38c:	f1080080 	cpsie	i
    c390:	e3a00001 	mov	r0, #1
    c394:	e8bd8010 	pop	{r4, pc}
    c398:	00012208 	.word	0x00012208
    c39c:	00012214 	.word	0x00012214
    c3a0:	2000b000 	.word	0x2000b000

0000c3a4 <CInterruptSystem::DisconnectFIQ()>:
    c3a4:	e92d4010 	push	{r4, lr}
    c3a8:	e59f4068 	ldr	r4, [pc, #104]	; c418 <CInterruptSystem::DisconnectFIQ()+0x74>
    c3ac:	e5d42001 	ldrb	r2, [r4, #1]
    c3b0:	e5d43000 	ldrb	r3, [r4]
    c3b4:	e5d41002 	ldrb	r1, [r4, #2]
    c3b8:	e1833402 	orr	r3, r3, r2, lsl #8
    c3bc:	e5d42003 	ldrb	r2, [r4, #3]
    c3c0:	e1833801 	orr	r3, r3, r1, lsl #16
    c3c4:	e1933c02 	orrs	r3, r3, r2, lsl #24
    c3c8:	0a00000d 	beq	c404 <CInterruptSystem::DisconnectFIQ()+0x60>
    c3cc:	e3a03000 	mov	r3, #0
    c3d0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    c3d4:	e59f2040 	ldr	r2, [pc, #64]	; c41c <CInterruptSystem::DisconnectFIQ()+0x78>
    c3d8:	e582320c 	str	r3, [r2, #524]	; 0x20c
    c3dc:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    c3e0:	e5c43000 	strb	r3, [r4]
    c3e4:	e5c43001 	strb	r3, [r4, #1]
    c3e8:	e5c43002 	strb	r3, [r4, #2]
    c3ec:	e5c43003 	strb	r3, [r4, #3]
    c3f0:	e5c43004 	strb	r3, [r4, #4]
    c3f4:	e5c43005 	strb	r3, [r4, #5]
    c3f8:	e5c43006 	strb	r3, [r4, #6]
    c3fc:	e5c43007 	strb	r3, [r4, #7]
    c400:	e8bd8010 	pop	{r4, pc}
    c404:	e3a02086 	mov	r2, #134	; 0x86
    c408:	e59f1010 	ldr	r1, [pc, #16]	; c420 <CInterruptSystem::DisconnectFIQ()+0x7c>
    c40c:	e59f0010 	ldr	r0, [pc, #16]	; c424 <CInterruptSystem::DisconnectFIQ()+0x80>
    c410:	ebfff993 	bl	aa64 <assertion_failed>
    c414:	eaffffec 	b	c3cc <CInterruptSystem::DisconnectFIQ()+0x28>
    c418:	00016554 	.word	0x00016554
    c41c:	2000b000 	.word	0x2000b000
    c420:	00014b6c 	.word	0x00014b6c
    c424:	00014b7c 	.word	0x00014b7c

0000c428 <CInterruptSystem::EnableIRQ(unsigned int)>:
    c428:	e92d4010 	push	{r4, lr}
    c42c:	e3a03000 	mov	r3, #0
    c430:	e1a04000 	mov	r4, r0
    c434:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    c438:	e3500047 	cmp	r0, #71	; 0x47
    c43c:	8a00000d 	bhi	c478 <CInterruptSystem::EnableIRQ(unsigned int)+0x50>
    c440:	e350001f 	cmp	r0, #31
    c444:	8a000007 	bhi	c468 <CInterruptSystem::EnableIRQ(unsigned int)+0x40>
    c448:	e59f2040 	ldr	r2, [pc, #64]	; c490 <CInterruptSystem::EnableIRQ(unsigned int)+0x68>
    c44c:	e3a03001 	mov	r3, #1
    c450:	e204401f 	and	r4, r4, #31
    c454:	e1a04413 	lsl	r4, r3, r4
    c458:	e5824000 	str	r4, [r2]
    c45c:	e3a03000 	mov	r3, #0
    c460:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    c464:	e8bd8010 	pop	{r4, pc}
    c468:	e350003f 	cmp	r0, #63	; 0x3f
    c46c:	959f2020 	ldrls	r2, [pc, #32]	; c494 <CInterruptSystem::EnableIRQ(unsigned int)+0x6c>
    c470:	859f2020 	ldrhi	r2, [pc, #32]	; c498 <CInterruptSystem::EnableIRQ(unsigned int)+0x70>
    c474:	eafffff4 	b	c44c <CInterruptSystem::EnableIRQ(unsigned int)+0x24>
    c478:	e3a02092 	mov	r2, #146	; 0x92
    c47c:	e59f1018 	ldr	r1, [pc, #24]	; c49c <CInterruptSystem::EnableIRQ(unsigned int)+0x74>
    c480:	e59f0018 	ldr	r0, [pc, #24]	; c4a0 <CInterruptSystem::EnableIRQ(unsigned int)+0x78>
    c484:	ebfff976 	bl	aa64 <assertion_failed>
    c488:	e59f2008 	ldr	r2, [pc, #8]	; c498 <CInterruptSystem::EnableIRQ(unsigned int)+0x70>
    c48c:	eaffffee 	b	c44c <CInterruptSystem::EnableIRQ(unsigned int)+0x24>
    c490:	2000b210 	.word	0x2000b210
    c494:	2000b214 	.word	0x2000b214
    c498:	2000b218 	.word	0x2000b218
    c49c:	00014b6c 	.word	0x00014b6c
    c4a0:	00014b94 	.word	0x00014b94

0000c4a4 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>:
    c4a4:	e3510047 	cmp	r1, #71	; 0x47
    c4a8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c4ac:	e1a04001 	mov	r4, r1
    c4b0:	e1a05000 	mov	r5, r0
    c4b4:	e1a08002 	mov	r8, r2
    c4b8:	e1a07003 	mov	r7, r3
    c4bc:	8a00000c 	bhi	c4f4 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x50>
    c4c0:	e7953104 	ldr	r3, [r5, r4, lsl #2]
    c4c4:	e0856104 	add	r6, r5, r4, lsl #2
    c4c8:	e3530000 	cmp	r3, #0
    c4cc:	0a000003 	beq	c4e0 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x3c>
    c4d0:	e3a02062 	mov	r2, #98	; 0x62
    c4d4:	e59f102c 	ldr	r1, [pc, #44]	; c508 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x64>
    c4d8:	e59f002c 	ldr	r0, [pc, #44]	; c50c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x68>
    c4dc:	ebfff960 	bl	aa64 <assertion_failed>
    c4e0:	e7858104 	str	r8, [r5, r4, lsl #2]
    c4e4:	e1a00004 	mov	r0, r4
    c4e8:	e5867120 	str	r7, [r6, #288]	; 0x120
    c4ec:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    c4f0:	eaffffcc 	b	c428 <CInterruptSystem::EnableIRQ(unsigned int)>
    c4f4:	e3a02061 	mov	r2, #97	; 0x61
    c4f8:	e59f1008 	ldr	r1, [pc, #8]	; c508 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x64>
    c4fc:	e59f000c 	ldr	r0, [pc, #12]	; c510 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x6c>
    c500:	ebfff957 	bl	aa64 <assertion_failed>
    c504:	eaffffed 	b	c4c0 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x1c>
    c508:	00014b6c 	.word	0x00014b6c
    c50c:	00014ba8 	.word	0x00014ba8
    c510:	00014b94 	.word	0x00014b94

0000c514 <CInterruptSystem::DisableIRQ(unsigned int)>:
    c514:	e92d4010 	push	{r4, lr}
    c518:	e3a03000 	mov	r3, #0
    c51c:	e1a04000 	mov	r4, r0
    c520:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    c524:	e3500047 	cmp	r0, #71	; 0x47
    c528:	8a00000d 	bhi	c564 <CInterruptSystem::DisableIRQ(unsigned int)+0x50>
    c52c:	e350001f 	cmp	r0, #31
    c530:	8a000007 	bhi	c554 <CInterruptSystem::DisableIRQ(unsigned int)+0x40>
    c534:	e59f2040 	ldr	r2, [pc, #64]	; c57c <CInterruptSystem::DisableIRQ(unsigned int)+0x68>
    c538:	e3a03001 	mov	r3, #1
    c53c:	e204401f 	and	r4, r4, #31
    c540:	e1a04413 	lsl	r4, r3, r4
    c544:	e5824000 	str	r4, [r2]
    c548:	e3a03000 	mov	r3, #0
    c54c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    c550:	e8bd8010 	pop	{r4, pc}
    c554:	e350003f 	cmp	r0, #63	; 0x3f
    c558:	959f2020 	ldrls	r2, [pc, #32]	; c580 <CInterruptSystem::DisableIRQ(unsigned int)+0x6c>
    c55c:	859f2020 	ldrhi	r2, [pc, #32]	; c584 <CInterruptSystem::DisableIRQ(unsigned int)+0x70>
    c560:	eafffff4 	b	c538 <CInterruptSystem::DisableIRQ(unsigned int)+0x24>
    c564:	e3a0209d 	mov	r2, #157	; 0x9d
    c568:	e59f1018 	ldr	r1, [pc, #24]	; c588 <CInterruptSystem::DisableIRQ(unsigned int)+0x74>
    c56c:	e59f0018 	ldr	r0, [pc, #24]	; c58c <CInterruptSystem::DisableIRQ(unsigned int)+0x78>
    c570:	ebfff93b 	bl	aa64 <assertion_failed>
    c574:	e59f2008 	ldr	r2, [pc, #8]	; c584 <CInterruptSystem::DisableIRQ(unsigned int)+0x70>
    c578:	eaffffee 	b	c538 <CInterruptSystem::DisableIRQ(unsigned int)+0x24>
    c57c:	2000b21c 	.word	0x2000b21c
    c580:	2000b220 	.word	0x2000b220
    c584:	2000b224 	.word	0x2000b224
    c588:	00014b6c 	.word	0x00014b6c
    c58c:	00014b94 	.word	0x00014b94

0000c590 <CInterruptSystem::DisconnectIRQ(unsigned int)>:
    c590:	e3510047 	cmp	r1, #71	; 0x47
    c594:	e92d4070 	push	{r4, r5, r6, lr}
    c598:	e1a04001 	mov	r4, r1
    c59c:	e1a05000 	mov	r5, r0
    c5a0:	8a000009 	bhi	c5cc <CInterruptSystem::DisconnectIRQ(unsigned int)+0x3c>
    c5a4:	e7953104 	ldr	r3, [r5, r4, lsl #2]
    c5a8:	e0856104 	add	r6, r5, r4, lsl #2
    c5ac:	e3530000 	cmp	r3, #0
    c5b0:	0a00000d 	beq	c5ec <CInterruptSystem::DisconnectIRQ(unsigned int)+0x5c>
    c5b4:	e1a00004 	mov	r0, r4
    c5b8:	ebffffd5 	bl	c514 <CInterruptSystem::DisableIRQ(unsigned int)>
    c5bc:	e3a03000 	mov	r3, #0
    c5c0:	e7853104 	str	r3, [r5, r4, lsl #2]
    c5c4:	e5863120 	str	r3, [r6, #288]	; 0x120
    c5c8:	e8bd8070 	pop	{r4, r5, r6, pc}
    c5cc:	e3a0206c 	mov	r2, #108	; 0x6c
    c5d0:	e59f1028 	ldr	r1, [pc, #40]	; c600 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x70>
    c5d4:	e59f0028 	ldr	r0, [pc, #40]	; c604 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x74>
    c5d8:	ebfff921 	bl	aa64 <assertion_failed>
    c5dc:	e7953104 	ldr	r3, [r5, r4, lsl #2]
    c5e0:	e0856104 	add	r6, r5, r4, lsl #2
    c5e4:	e3530000 	cmp	r3, #0
    c5e8:	1afffff1 	bne	c5b4 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x24>
    c5ec:	e3a0206d 	mov	r2, #109	; 0x6d
    c5f0:	e59f1008 	ldr	r1, [pc, #8]	; c600 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x70>
    c5f4:	e59f000c 	ldr	r0, [pc, #12]	; c608 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x78>
    c5f8:	ebfff919 	bl	aa64 <assertion_failed>
    c5fc:	eaffffec 	b	c5b4 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x24>
    c600:	00014b6c 	.word	0x00014b6c
    c604:	00014b94 	.word	0x00014b94
    c608:	00014bc4 	.word	0x00014bc4

0000c60c <CInterruptSystem::EnableFIQ(unsigned int)>:
    c60c:	e92d4010 	push	{r4, lr}
    c610:	e3a03000 	mov	r3, #0
    c614:	e1a04000 	mov	r4, r0
    c618:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    c61c:	e3500047 	cmp	r0, #71	; 0x47
    c620:	9a000003 	bls	c634 <CInterruptSystem::EnableFIQ(unsigned int)+0x28>
    c624:	e3a020a8 	mov	r2, #168	; 0xa8
    c628:	e59f101c 	ldr	r1, [pc, #28]	; c64c <CInterruptSystem::EnableFIQ(unsigned int)+0x40>
    c62c:	e59f001c 	ldr	r0, [pc, #28]	; c650 <CInterruptSystem::EnableFIQ(unsigned int)+0x44>
    c630:	ebfff90b 	bl	aa64 <assertion_failed>
    c634:	e59f3018 	ldr	r3, [pc, #24]	; c654 <CInterruptSystem::EnableFIQ(unsigned int)+0x48>
    c638:	e3844080 	orr	r4, r4, #128	; 0x80
    c63c:	e583420c 	str	r4, [r3, #524]	; 0x20c
    c640:	e3a03000 	mov	r3, #0
    c644:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    c648:	e8bd8010 	pop	{r4, pc}
    c64c:	00014b6c 	.word	0x00014b6c
    c650:	00014be0 	.word	0x00014be0
    c654:	2000b000 	.word	0x2000b000

0000c658 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>:
    c658:	e3510047 	cmp	r1, #71	; 0x47
    c65c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c660:	e1a07001 	mov	r7, r1
    c664:	e1a06002 	mov	r6, r2
    c668:	e1a05003 	mov	r5, r3
    c66c:	8a00001f 	bhi	c6f0 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x98>
    c670:	e3560000 	cmp	r6, #0
    c674:	0a000022 	beq	c704 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xac>
    c678:	e59f4098 	ldr	r4, [pc, #152]	; c718 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc0>
    c67c:	e5d42001 	ldrb	r2, [r4, #1]
    c680:	e5d43000 	ldrb	r3, [r4]
    c684:	e5d41002 	ldrb	r1, [r4, #2]
    c688:	e1833402 	orr	r3, r3, r2, lsl #8
    c68c:	e5d42003 	ldrb	r2, [r4, #3]
    c690:	e1833801 	orr	r3, r3, r1, lsl #16
    c694:	e1933c02 	orrs	r3, r3, r2, lsl #24
    c698:	0a000003 	beq	c6ac <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x54>
    c69c:	e3a0207c 	mov	r2, #124	; 0x7c
    c6a0:	e59f1074 	ldr	r1, [pc, #116]	; c71c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc4>
    c6a4:	e59f0074 	ldr	r0, [pc, #116]	; c720 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc8>
    c6a8:	ebfff8ed 	bl	aa64 <assertion_failed>
    c6ac:	e1a0e426 	lsr	lr, r6, #8
    c6b0:	e1a0c826 	lsr	ip, r6, #16
    c6b4:	e1a01c26 	lsr	r1, r6, #24
    c6b8:	e1a02425 	lsr	r2, r5, #8
    c6bc:	e1a03825 	lsr	r3, r5, #16
    c6c0:	e5c45004 	strb	r5, [r4, #4]
    c6c4:	e1a05c25 	lsr	r5, r5, #24
    c6c8:	e1a00007 	mov	r0, r7
    c6cc:	e5c46000 	strb	r6, [r4]
    c6d0:	e5c4e001 	strb	lr, [r4, #1]
    c6d4:	e5c4c002 	strb	ip, [r4, #2]
    c6d8:	e5c41003 	strb	r1, [r4, #3]
    c6dc:	e5c42005 	strb	r2, [r4, #5]
    c6e0:	e5c43006 	strb	r3, [r4, #6]
    c6e4:	e5c45007 	strb	r5, [r4, #7]
    c6e8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    c6ec:	eaffffc6 	b	c60c <CInterruptSystem::EnableFIQ(unsigned int)>
    c6f0:	e3a0207a 	mov	r2, #122	; 0x7a
    c6f4:	e59f1020 	ldr	r1, [pc, #32]	; c71c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc4>
    c6f8:	e59f0024 	ldr	r0, [pc, #36]	; c724 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xcc>
    c6fc:	ebfff8d8 	bl	aa64 <assertion_failed>
    c700:	eaffffda 	b	c670 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x18>
    c704:	e3a0207b 	mov	r2, #123	; 0x7b
    c708:	e59f100c 	ldr	r1, [pc, #12]	; c71c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc4>
    c70c:	e59f0014 	ldr	r0, [pc, #20]	; c728 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xd0>
    c710:	ebfff8d3 	bl	aa64 <assertion_failed>
    c714:	eaffffd7 	b	c678 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x20>
    c718:	00016554 	.word	0x00016554
    c71c:	00014b6c 	.word	0x00014b6c
    c720:	00014bf4 	.word	0x00014bf4
    c724:	00014be0 	.word	0x00014be0
    c728:	00014b84 	.word	0x00014b84

0000c72c <CInterruptSystem::DisableFIQ()>:
    c72c:	e3a03000 	mov	r3, #0
    c730:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    c734:	e59f2008 	ldr	r2, [pc, #8]	; c744 <CInterruptSystem::DisableFIQ()+0x18>
    c738:	e582320c 	str	r3, [r2, #524]	; 0x20c
    c73c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    c740:	e12fff1e 	bx	lr
    c744:	2000b000 	.word	0x2000b000

0000c748 <CInterruptSystem::Get()>:
    c748:	e92d4010 	push	{r4, lr}
    c74c:	e59f4020 	ldr	r4, [pc, #32]	; c774 <CInterruptSystem::Get()+0x2c>
    c750:	e5940000 	ldr	r0, [r4]
    c754:	e3500000 	cmp	r0, #0
    c758:	18bd8010 	popne	{r4, pc}
    c75c:	e3a020ba 	mov	r2, #186	; 0xba
    c760:	e59f1010 	ldr	r1, [pc, #16]	; c778 <CInterruptSystem::Get()+0x30>
    c764:	e59f0010 	ldr	r0, [pc, #16]	; c77c <CInterruptSystem::Get()+0x34>
    c768:	ebfff8bd 	bl	aa64 <assertion_failed>
    c76c:	e5940000 	ldr	r0, [r4]
    c770:	e8bd8010 	pop	{r4, pc}
    c774:	0001664c 	.word	0x0001664c
    c778:	00014b6c 	.word	0x00014b6c
    c77c:	00014c0c 	.word	0x00014c0c

0000c780 <CInterruptSystem::CallIRQHandler(unsigned int)>:
    c780:	e3510047 	cmp	r1, #71	; 0x47
    c784:	e92d4070 	push	{r4, r5, r6, lr}
    c788:	e1a06001 	mov	r6, r1
    c78c:	e1a05000 	mov	r5, r0
    c790:	8a000007 	bhi	c7b4 <CInterruptSystem::CallIRQHandler(unsigned int)+0x34>
    c794:	e7954106 	ldr	r4, [r5, r6, lsl #2]
    c798:	e0855106 	add	r5, r5, r6, lsl #2
    c79c:	e3540000 	cmp	r4, #0
    c7a0:	0a00000b 	beq	c7d4 <CInterruptSystem::CallIRQHandler(unsigned int)+0x54>
    c7a4:	e5950120 	ldr	r0, [r5, #288]	; 0x120
    c7a8:	e12fff34 	blx	r4
    c7ac:	e3a00001 	mov	r0, #1
    c7b0:	e8bd8070 	pop	{r4, r5, r6, pc}
    c7b4:	e3a020c0 	mov	r2, #192	; 0xc0
    c7b8:	e59f1024 	ldr	r1, [pc, #36]	; c7e4 <CInterruptSystem::CallIRQHandler(unsigned int)+0x64>
    c7bc:	e59f0024 	ldr	r0, [pc, #36]	; c7e8 <CInterruptSystem::CallIRQHandler(unsigned int)+0x68>
    c7c0:	ebfff8a7 	bl	aa64 <assertion_failed>
    c7c4:	e7954106 	ldr	r4, [r5, r6, lsl #2]
    c7c8:	e0855106 	add	r5, r5, r6, lsl #2
    c7cc:	e3540000 	cmp	r4, #0
    c7d0:	1afffff3 	bne	c7a4 <CInterruptSystem::CallIRQHandler(unsigned int)+0x24>
    c7d4:	e1a00006 	mov	r0, r6
    c7d8:	ebffff4d 	bl	c514 <CInterruptSystem::DisableIRQ(unsigned int)>
    c7dc:	e1a00004 	mov	r0, r4
    c7e0:	e8bd8070 	pop	{r4, r5, r6, pc}
    c7e4:	00014b6c 	.word	0x00014b6c
    c7e8:	00014b94 	.word	0x00014b94

0000c7ec <CInterruptSystem::InterruptHandler()>:
    c7ec:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c7f0:	e59f70a8 	ldr	r7, [pc, #168]	; c8a0 <CInterruptSystem::InterruptHandler()+0xb4>
    c7f4:	e24dd010 	sub	sp, sp, #16
    c7f8:	e5973000 	ldr	r3, [r7]
    c7fc:	e3530000 	cmp	r3, #0
    c800:	0a000021 	beq	c88c <CInterruptSystem::InterruptHandler()+0xa0>
    c804:	e3a06000 	mov	r6, #0
    c808:	ee076f9a 	mcr	15, 0, r6, cr7, cr10, {4}
    c80c:	e59f3090 	ldr	r3, [pc, #144]	; c8a4 <CInterruptSystem::InterruptHandler()+0xb8>
    c810:	e5932204 	ldr	r2, [r3, #516]	; 0x204
    c814:	e58d2004 	str	r2, [sp, #4]
    c818:	e5932208 	ldr	r2, [r3, #520]	; 0x208
    c81c:	e58d2008 	str	r2, [sp, #8]
    c820:	e5933200 	ldr	r3, [r3, #512]	; 0x200
    c824:	e6ef3073 	uxtb	r3, r3
    c828:	e58d300c 	str	r3, [sp, #12]
    c82c:	ee076fba 	mcr	15, 0, r6, cr7, cr10, {5}
    c830:	e28d8004 	add	r8, sp, #4
    c834:	e4984004 	ldr	r4, [r8], #4
    c838:	e3540000 	cmp	r4, #0
    c83c:	0a00000d 	beq	c878 <CInterruptSystem::InterruptHandler()+0x8c>
    c840:	e1a05006 	mov	r5, r6
    c844:	ea000002 	b	c854 <CInterruptSystem::InterruptHandler()+0x68>
    c848:	e1b040a4 	lsrs	r4, r4, #1
    c84c:	e2855001 	add	r5, r5, #1
    c850:	0a000008 	beq	c878 <CInterruptSystem::InterruptHandler()+0x8c>
    c854:	e3140001 	tst	r4, #1
    c858:	0afffffa 	beq	c848 <CInterruptSystem::InterruptHandler()+0x5c>
    c85c:	e1a01005 	mov	r1, r5
    c860:	e5970000 	ldr	r0, [r7]
    c864:	ebffffc5 	bl	c780 <CInterruptSystem::CallIRQHandler(unsigned int)>
    c868:	e3500000 	cmp	r0, #0
    c86c:	0afffff5 	beq	c848 <CInterruptSystem::InterruptHandler()+0x5c>
    c870:	e28dd010 	add	sp, sp, #16
    c874:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    c878:	e2866020 	add	r6, r6, #32
    c87c:	e3560060 	cmp	r6, #96	; 0x60
    c880:	1affffeb 	bne	c834 <CInterruptSystem::InterruptHandler()+0x48>
    c884:	e28dd010 	add	sp, sp, #16
    c888:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    c88c:	e3a020d3 	mov	r2, #211	; 0xd3
    c890:	e59f1010 	ldr	r1, [pc, #16]	; c8a8 <CInterruptSystem::InterruptHandler()+0xbc>
    c894:	e59f0010 	ldr	r0, [pc, #16]	; c8ac <CInterruptSystem::InterruptHandler()+0xc0>
    c898:	ebfff871 	bl	aa64 <assertion_failed>
    c89c:	eaffffd8 	b	c804 <CInterruptSystem::InterruptHandler()+0x18>
    c8a0:	0001664c 	.word	0x0001664c
    c8a4:	2000b000 	.word	0x2000b000
    c8a8:	00014b6c 	.word	0x00014b6c
    c8ac:	00014c0c 	.word	0x00014c0c

0000c8b0 <InterruptHandler>:
    c8b0:	e92d4010 	push	{r4, lr}
    c8b4:	e3a04000 	mov	r4, #0
    c8b8:	ee074fba 	mcr	15, 0, r4, cr7, cr10, {5}
    c8bc:	ebffffca 	bl	c7ec <CInterruptSystem::InterruptHandler()>
    c8c0:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
    c8c4:	e8bd8010 	pop	{r4, pc}

0000c8c8 <CKernelOptions::GetDecimal(char*) [clone .part.0]>:
    c8c8:	e3a01000 	mov	r1, #0
    c8cc:	ea00000a 	b	c8fc <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x34>
    c8d0:	e3520009 	cmp	r2, #9
    c8d4:	8a000011 	bhi	c920 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x58>
    c8d8:	e3730001 	cmn	r3, #1
    c8dc:	13a02000 	movne	r2, #0
    c8e0:	03a02001 	moveq	r2, #1
    c8e4:	e1510003 	cmp	r1, r3
    c8e8:	91a01002 	movls	r1, r2
    c8ec:	83821001 	orrhi	r1, r2, #1
    c8f0:	e3510000 	cmp	r1, #0
    c8f4:	1a000009 	bne	c920 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x58>
    c8f8:	e1a01003 	mov	r1, r3
    c8fc:	e0d0c0d1 	ldrsb	ip, [r0], #1
    c900:	e0813101 	add	r3, r1, r1, lsl #2
    c904:	e24c2030 	sub	r2, ip, #48	; 0x30
    c908:	e35c0000 	cmp	ip, #0
    c90c:	e0823083 	add	r3, r2, r3, lsl #1
    c910:	e6ef2072 	uxtb	r2, r2
    c914:	1affffed 	bne	c8d0 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x8>
    c918:	e1a00001 	mov	r0, r1
    c91c:	e12fff1e 	bx	lr
    c920:	e3e01000 	mvn	r1, #0
    c924:	e1a00001 	mov	r0, r1
    c928:	e12fff1e 	bx	lr

0000c92c <CKernelOptions::~CKernelOptions()>:
    c92c:	e3a02000 	mov	r2, #0
    c930:	e59f3004 	ldr	r3, [pc, #4]	; c93c <CKernelOptions::~CKernelOptions()+0x10>
    c934:	e5832000 	str	r2, [r3]
    c938:	e12fff1e 	bx	lr
    c93c:	00016650 	.word	0x00016650

0000c940 <CKernelOptions::GetWidth() const>:
    c940:	e5900810 	ldr	r0, [r0, #2064]	; 0x810
    c944:	e12fff1e 	bx	lr

0000c948 <CKernelOptions::GetHeight() const>:
    c948:	e5900814 	ldr	r0, [r0, #2068]	; 0x814
    c94c:	e12fff1e 	bx	lr

0000c950 <CKernelOptions::GetLogDevice() const>:
    c950:	e2800e81 	add	r0, r0, #2064	; 0x810
    c954:	e2800008 	add	r0, r0, #8
    c958:	e12fff1e 	bx	lr

0000c95c <CKernelOptions::GetLogLevel() const>:
    c95c:	e590082c 	ldr	r0, [r0, #2092]	; 0x82c
    c960:	e12fff1e 	bx	lr

0000c964 <CKernelOptions::GetKeyMap() const>:
    c964:	e2800e83 	add	r0, r0, #2096	; 0x830
    c968:	e12fff1e 	bx	lr

0000c96c <CKernelOptions::GetUSBPowerDelay() const>:
    c96c:	e5900834 	ldr	r0, [r0, #2100]	; 0x834
    c970:	e12fff1e 	bx	lr

0000c974 <CKernelOptions::GetSoundDevice() const>:
    c974:	e2800e83 	add	r0, r0, #2096	; 0x830
    c978:	e2800008 	add	r0, r0, #8
    c97c:	e12fff1e 	bx	lr

0000c980 <CKernelOptions::GetSoundOption() const>:
    c980:	e590084c 	ldr	r0, [r0, #2124]	; 0x84c
    c984:	e12fff1e 	bx	lr

0000c988 <CKernelOptions::GetCPUSpeed() const>:
    c988:	e5d00850 	ldrb	r0, [r0, #2128]	; 0x850
    c98c:	e12fff1e 	bx	lr

0000c990 <CKernelOptions::GetSoCMaxTemp() const>:
    c990:	e5900854 	ldr	r0, [r0, #2132]	; 0x854
    c994:	e12fff1e 	bx	lr

0000c998 <CKernelOptions::Get()>:
    c998:	e59f3004 	ldr	r3, [pc, #4]	; c9a4 <CKernelOptions::Get()+0xc>
    c99c:	e5930000 	ldr	r0, [r3]
    c9a0:	e12fff1e 	bx	lr
    c9a4:	00016650 	.word	0x00016650

0000c9a8 <CKernelOptions::GetToken()>:
    c9a8:	e590380c 	ldr	r3, [r0, #2060]	; 0x80c
    c9ac:	e1d320d0 	ldrsb	r2, [r3]
    c9b0:	e3520000 	cmp	r2, #0
    c9b4:	1a000005 	bne	c9d0 <CKernelOptions::GetToken()+0x28>
    c9b8:	ea000016 	b	ca18 <CKernelOptions::GetToken()+0x70>
    c9bc:	e2833001 	add	r3, r3, #1
    c9c0:	e580380c 	str	r3, [r0, #2060]	; 0x80c
    c9c4:	e1d320d0 	ldrsb	r2, [r3]
    c9c8:	e3520000 	cmp	r2, #0
    c9cc:	0a000011 	beq	ca18 <CKernelOptions::GetToken()+0x70>
    c9d0:	e3520020 	cmp	r2, #32
    c9d4:	0afffff8 	beq	c9bc <CKernelOptions::GetToken()+0x14>
    c9d8:	e1a02003 	mov	r2, r3
    c9dc:	ea000000 	b	c9e4 <CKernelOptions::GetToken()+0x3c>
    c9e0:	e1a02001 	mov	r2, r1
    c9e4:	e2821001 	add	r1, r2, #1
    c9e8:	e580180c 	str	r1, [r0, #2060]	; 0x80c
    c9ec:	e1d2c0d1 	ldrsb	ip, [r2, #1]
    c9f0:	e35c0000 	cmp	ip, #0
    c9f4:	0a000008 	beq	ca1c <CKernelOptions::GetToken()+0x74>
    c9f8:	e35c0020 	cmp	ip, #32
    c9fc:	1afffff7 	bne	c9e0 <CKernelOptions::GetToken()+0x38>
    ca00:	e3a0c000 	mov	ip, #0
    ca04:	e2822002 	add	r2, r2, #2
    ca08:	e580280c 	str	r2, [r0, #2060]	; 0x80c
    ca0c:	e5c1c000 	strb	ip, [r1]
    ca10:	e1a00003 	mov	r0, r3
    ca14:	e12fff1e 	bx	lr
    ca18:	e3a03000 	mov	r3, #0
    ca1c:	e1a00003 	mov	r0, r3
    ca20:	e12fff1e 	bx	lr

0000ca24 <CKernelOptions::CKernelOptions()>:
    ca24:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ca28:	e3a02004 	mov	r2, #4
    ca2c:	e1a04000 	mov	r4, r0
    ca30:	e3a05000 	mov	r5, #0
    ca34:	e3a0303c 	mov	r3, #60	; 0x3c
    ca38:	e2807e81 	add	r7, r0, #2064	; 0x810
    ca3c:	e2877008 	add	r7, r7, #8
    ca40:	e580282c 	str	r2, [r0, #2092]	; 0x82c
    ca44:	e5803854 	str	r3, [r0, #2132]	; 0x854
    ca48:	e24dd014 	sub	sp, sp, #20
    ca4c:	e59f1348 	ldr	r1, [pc, #840]	; cd9c <CKernelOptions::CKernelOptions()+0x378>
    ca50:	e1a00007 	mov	r0, r7
    ca54:	e5845810 	str	r5, [r4, #2064]	; 0x810
    ca58:	e5845814 	str	r5, [r4, #2068]	; 0x814
    ca5c:	e5845834 	str	r5, [r4, #2100]	; 0x834
    ca60:	e584584c 	str	r5, [r4, #2124]	; 0x84c
    ca64:	e5c45850 	strb	r5, [r4, #2128]	; 0x850
    ca68:	e2849e83 	add	r9, r4, #2096	; 0x830
    ca6c:	eb001428 	bl	11b14 <strcpy>
    ca70:	e59f1328 	ldr	r1, [pc, #808]	; cda0 <CKernelOptions::CKernelOptions()+0x37c>
    ca74:	e1a00009 	mov	r0, r9
    ca78:	eb001425 	bl	11b14 <strcpy>
    ca7c:	e59f3320 	ldr	r3, [pc, #800]	; cda4 <CKernelOptions::CKernelOptions()+0x380>
    ca80:	e5c45838 	strb	r5, [r4, #2104]	; 0x838
    ca84:	e28d000c 	add	r0, sp, #12
    ca88:	e5834000 	str	r4, [r3]
    ca8c:	ebfff818 	bl	aaf4 <CBcmPropertyTags::CBcmPropertyTags()>
    ca90:	e58d5000 	str	r5, [sp]
    ca94:	e1a02004 	mov	r2, r4
    ca98:	e28d000c 	add	r0, sp, #12
    ca9c:	e59f3304 	ldr	r3, [pc, #772]	; cda8 <CKernelOptions::CKernelOptions()+0x384>
    caa0:	e59f1304 	ldr	r1, [pc, #772]	; cdac <CKernelOptions::CKernelOptions()+0x388>
    caa4:	ebfff869 	bl	ac50 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    caa8:	e1500005 	cmp	r0, r5
    caac:	0a000037 	beq	cb90 <CKernelOptions::CKernelOptions()+0x16c>
    cab0:	e5943008 	ldr	r3, [r4, #8]
    cab4:	e3530b02 	cmp	r3, #2048	; 0x800
    cab8:	2a000034 	bcs	cb90 <CKernelOptions::CKernelOptions()+0x16c>
    cabc:	e0843003 	add	r3, r4, r3
    cac0:	e284200c 	add	r2, r4, #12
    cac4:	e59f82e4 	ldr	r8, [pc, #740]	; cdb0 <CKernelOptions::CKernelOptions()+0x38c>
    cac8:	e59fa2e4 	ldr	sl, [pc, #740]	; cdb4 <CKernelOptions::CKernelOptions()+0x390>
    cacc:	e5c3500c 	strb	r5, [r3, #12]
    cad0:	e584280c 	str	r2, [r4, #2060]	; 0x80c
    cad4:	e1a00004 	mov	r0, r4
    cad8:	ebffffb2 	bl	c9a8 <CKernelOptions::GetToken()>
    cadc:	e2506000 	subs	r6, r0, #0
    cae0:	0a00002a 	beq	cb90 <CKernelOptions::CKernelOptions()+0x16c>
    cae4:	e1d630d0 	ldrsb	r3, [r6]
    cae8:	e3530000 	cmp	r3, #0
    caec:	0a000008 	beq	cb14 <CKernelOptions::CKernelOptions()+0xf0>
    caf0:	e353003d 	cmp	r3, #61	; 0x3d
    caf4:	e1a05006 	mov	r5, r6
    caf8:	1a000002 	bne	cb08 <CKernelOptions::CKernelOptions()+0xe4>
    cafc:	ea000028 	b	cba4 <CKernelOptions::CKernelOptions()+0x180>
    cb00:	e353003d 	cmp	r3, #61	; 0x3d
    cb04:	0a000026 	beq	cba4 <CKernelOptions::CKernelOptions()+0x180>
    cb08:	e1f530d1 	ldrsb	r3, [r5, #1]!
    cb0c:	e3530000 	cmp	r3, #0
    cb10:	1afffffa 	bne	cb00 <CKernelOptions::CKernelOptions()+0xdc>
    cb14:	e1a01008 	mov	r1, r8
    cb18:	e1a00006 	mov	r0, r6
    cb1c:	eb001388 	bl	11944 <strcmp>
    cb20:	e3500000 	cmp	r0, #0
    cb24:	0affffea 	beq	cad4 <CKernelOptions::CKernelOptions()+0xb0>
    cb28:	e1a0100a 	mov	r1, sl
    cb2c:	e1a00006 	mov	r0, r6
    cb30:	eb001383 	bl	11944 <strcmp>
    cb34:	e3500000 	cmp	r0, #0
    cb38:	13a0b000 	movne	fp, #0
    cb3c:	0affffe4 	beq	cad4 <CKernelOptions::CKernelOptions()+0xb0>
    cb40:	e59f1270 	ldr	r1, [pc, #624]	; cdb8 <CKernelOptions::CKernelOptions()+0x394>
    cb44:	e1a00006 	mov	r0, r6
    cb48:	eb00137d 	bl	11944 <strcmp>
    cb4c:	e2505000 	subs	r5, r0, #0
    cb50:	0a000027 	beq	cbf4 <CKernelOptions::CKernelOptions()+0x1d0>
    cb54:	e59f1260 	ldr	r1, [pc, #608]	; cdbc <CKernelOptions::CKernelOptions()+0x398>
    cb58:	e1a00006 	mov	r0, r6
    cb5c:	eb001378 	bl	11944 <strcmp>
    cb60:	e3500000 	cmp	r0, #0
    cb64:	1a000028 	bne	cc0c <CKernelOptions::CKernelOptions()+0x1e8>
    cb68:	e35b0000 	cmp	fp, #0
    cb6c:	0affffd8 	beq	cad4 <CKernelOptions::CKernelOptions()+0xb0>
    cb70:	e1db30d0 	ldrsb	r3, [fp]
    cb74:	e3530000 	cmp	r3, #0
    cb78:	0affffd5 	beq	cad4 <CKernelOptions::CKernelOptions()+0xb0>
    cb7c:	e1a0000b 	mov	r0, fp
    cb80:	ebffff50 	bl	c8c8 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    cb84:	e3500004 	cmp	r0, #4
    cb88:	9584082c 	strls	r0, [r4, #2092]	; 0x82c
    cb8c:	eaffffd0 	b	cad4 <CKernelOptions::CKernelOptions()+0xb0>
    cb90:	e28d000c 	add	r0, sp, #12
    cb94:	ebfff7dc 	bl	ab0c <CBcmPropertyTags::~CBcmPropertyTags()>
    cb98:	e1a00004 	mov	r0, r4
    cb9c:	e28dd014 	add	sp, sp, #20
    cba0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cba4:	e3a03000 	mov	r3, #0
    cba8:	e1a01008 	mov	r1, r8
    cbac:	e5c53000 	strb	r3, [r5]
    cbb0:	e1a00006 	mov	r0, r6
    cbb4:	eb001362 	bl	11944 <strcmp>
    cbb8:	e3500000 	cmp	r0, #0
    cbbc:	e285b001 	add	fp, r5, #1
    cbc0:	1a000047 	bne	cce4 <CKernelOptions::CKernelOptions()+0x2c0>
    cbc4:	e35b0000 	cmp	fp, #0
    cbc8:	0affffc1 	beq	cad4 <CKernelOptions::CKernelOptions()+0xb0>
    cbcc:	e1d530d1 	ldrsb	r3, [r5, #1]
    cbd0:	e3530000 	cmp	r3, #0
    cbd4:	0affffbe 	beq	cad4 <CKernelOptions::CKernelOptions()+0xb0>
    cbd8:	e1a0000b 	mov	r0, fp
    cbdc:	ebffff39 	bl	c8c8 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    cbe0:	e59f31d8 	ldr	r3, [pc, #472]	; cdc0 <CKernelOptions::CKernelOptions()+0x39c>
    cbe4:	e2402d0a 	sub	r2, r0, #640	; 0x280
    cbe8:	e1520003 	cmp	r2, r3
    cbec:	95840810 	strls	r0, [r4, #2064]	; 0x810
    cbf0:	eaffffb7 	b	cad4 <CKernelOptions::CKernelOptions()+0xb0>
    cbf4:	e1a0100b 	mov	r1, fp
    cbf8:	e3a02013 	mov	r2, #19
    cbfc:	e1a00007 	mov	r0, r7
    cc00:	eb0013ce 	bl	11b40 <strncpy>
    cc04:	e5c4582b 	strb	r5, [r4, #2091]	; 0x82b
    cc08:	eaffffb1 	b	cad4 <CKernelOptions::CKernelOptions()+0xb0>
    cc0c:	e59f11b0 	ldr	r1, [pc, #432]	; cdc4 <CKernelOptions::CKernelOptions()+0x3a0>
    cc10:	e1a00006 	mov	r0, r6
    cc14:	eb00134a 	bl	11944 <strcmp>
    cc18:	e2505000 	subs	r5, r0, #0
    cc1c:	1a000005 	bne	cc38 <CKernelOptions::CKernelOptions()+0x214>
    cc20:	e1a0100b 	mov	r1, fp
    cc24:	e3a02002 	mov	r2, #2
    cc28:	e1a00009 	mov	r0, r9
    cc2c:	eb0013c3 	bl	11b40 <strncpy>
    cc30:	e5c45832 	strb	r5, [r4, #2098]	; 0x832
    cc34:	eaffffa6 	b	cad4 <CKernelOptions::CKernelOptions()+0xb0>
    cc38:	e59f1188 	ldr	r1, [pc, #392]	; cdc8 <CKernelOptions::CKernelOptions()+0x3a4>
    cc3c:	e1a00006 	mov	r0, r6
    cc40:	eb00133f 	bl	11944 <strcmp>
    cc44:	e3500000 	cmp	r0, #0
    cc48:	1a00000b 	bne	cc7c <CKernelOptions::CKernelOptions()+0x258>
    cc4c:	e35b0000 	cmp	fp, #0
    cc50:	0affff9f 	beq	cad4 <CKernelOptions::CKernelOptions()+0xb0>
    cc54:	e1db30d0 	ldrsb	r3, [fp]
    cc58:	e3530000 	cmp	r3, #0
    cc5c:	0affff9c 	beq	cad4 <CKernelOptions::CKernelOptions()+0xb0>
    cc60:	e1a0000b 	mov	r0, fp
    cc64:	ebffff17 	bl	c8c8 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    cc68:	e59f315c 	ldr	r3, [pc, #348]	; cdcc <CKernelOptions::CKernelOptions()+0x3a8>
    cc6c:	e24020c8 	sub	r2, r0, #200	; 0xc8
    cc70:	e1520003 	cmp	r2, r3
    cc74:	95840834 	strls	r0, [r4, #2100]	; 0x834
    cc78:	eaffff95 	b	cad4 <CKernelOptions::CKernelOptions()+0xb0>
    cc7c:	e59f114c 	ldr	r1, [pc, #332]	; cdd0 <CKernelOptions::CKernelOptions()+0x3ac>
    cc80:	e1a00006 	mov	r0, r6
    cc84:	eb00132e 	bl	11944 <strcmp>
    cc88:	e2505000 	subs	r5, r0, #0
    cc8c:	1a000005 	bne	cca8 <CKernelOptions::CKernelOptions()+0x284>
    cc90:	e1a0100b 	mov	r1, fp
    cc94:	e3a02013 	mov	r2, #19
    cc98:	e2890008 	add	r0, r9, #8
    cc9c:	eb0013a7 	bl	11b40 <strncpy>
    cca0:	e5c4584b 	strb	r5, [r4, #2123]	; 0x84b
    cca4:	eaffff8a 	b	cad4 <CKernelOptions::CKernelOptions()+0xb0>
    cca8:	e59f1124 	ldr	r1, [pc, #292]	; cdd4 <CKernelOptions::CKernelOptions()+0x3b0>
    ccac:	e1a00006 	mov	r0, r6
    ccb0:	eb001323 	bl	11944 <strcmp>
    ccb4:	e3500000 	cmp	r0, #0
    ccb8:	1a000019 	bne	cd24 <CKernelOptions::CKernelOptions()+0x300>
    ccbc:	e35b0000 	cmp	fp, #0
    ccc0:	0affff83 	beq	cad4 <CKernelOptions::CKernelOptions()+0xb0>
    ccc4:	e1db30d0 	ldrsb	r3, [fp]
    ccc8:	e3530000 	cmp	r3, #0
    cccc:	0affff80 	beq	cad4 <CKernelOptions::CKernelOptions()+0xb0>
    ccd0:	e1a0000b 	mov	r0, fp
    ccd4:	ebfffefb 	bl	c8c8 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    ccd8:	e3500002 	cmp	r0, #2
    ccdc:	9584084c 	strls	r0, [r4, #2124]	; 0x84c
    cce0:	eaffff7b 	b	cad4 <CKernelOptions::CKernelOptions()+0xb0>
    cce4:	e1a0100a 	mov	r1, sl
    cce8:	e1a00006 	mov	r0, r6
    ccec:	eb001314 	bl	11944 <strcmp>
    ccf0:	e3500000 	cmp	r0, #0
    ccf4:	1affff91 	bne	cb40 <CKernelOptions::CKernelOptions()+0x11c>
    ccf8:	e35b0000 	cmp	fp, #0
    ccfc:	0affff74 	beq	cad4 <CKernelOptions::CKernelOptions()+0xb0>
    cd00:	e1d530d1 	ldrsb	r3, [r5, #1]
    cd04:	e3530000 	cmp	r3, #0
    cd08:	0affff71 	beq	cad4 <CKernelOptions::CKernelOptions()+0xb0>
    cd0c:	e1a0000b 	mov	r0, fp
    cd10:	ebfffeec 	bl	c8c8 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    cd14:	e2403e1e 	sub	r3, r0, #480	; 0x1e0
    cd18:	e3530f96 	cmp	r3, #600	; 0x258
    cd1c:	95840814 	strls	r0, [r4, #2068]	; 0x814
    cd20:	eaffff6b 	b	cad4 <CKernelOptions::CKernelOptions()+0xb0>
    cd24:	e59f10ac 	ldr	r1, [pc, #172]	; cdd8 <CKernelOptions::CKernelOptions()+0x3b4>
    cd28:	e1a00006 	mov	r0, r6
    cd2c:	eb001304 	bl	11944 <strcmp>
    cd30:	e3500000 	cmp	r0, #0
    cd34:	1a000006 	bne	cd54 <CKernelOptions::CKernelOptions()+0x330>
    cd38:	e1a0000b 	mov	r0, fp
    cd3c:	e59f1098 	ldr	r1, [pc, #152]	; cddc <CKernelOptions::CKernelOptions()+0x3b8>
    cd40:	eb0012ff 	bl	11944 <strcmp>
    cd44:	e3500000 	cmp	r0, #0
    cd48:	03a03001 	moveq	r3, #1
    cd4c:	05c43850 	strbeq	r3, [r4, #2128]	; 0x850
    cd50:	eaffff5f 	b	cad4 <CKernelOptions::CKernelOptions()+0xb0>
    cd54:	e1a00006 	mov	r0, r6
    cd58:	e59f1080 	ldr	r1, [pc, #128]	; cde0 <CKernelOptions::CKernelOptions()+0x3bc>
    cd5c:	eb0012f8 	bl	11944 <strcmp>
    cd60:	e2903000 	adds	r3, r0, #0
    cd64:	13a03001 	movne	r3, #1
    cd68:	e35b0000 	cmp	fp, #0
    cd6c:	03833001 	orreq	r3, r3, #1
    cd70:	e3530000 	cmp	r3, #0
    cd74:	1affff56 	bne	cad4 <CKernelOptions::CKernelOptions()+0xb0>
    cd78:	e1db30d0 	ldrsb	r3, [fp]
    cd7c:	e3530000 	cmp	r3, #0
    cd80:	0affff53 	beq	cad4 <CKernelOptions::CKernelOptions()+0xb0>
    cd84:	e1a0000b 	mov	r0, fp
    cd88:	ebfffece 	bl	c8c8 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    cd8c:	e2403028 	sub	r3, r0, #40	; 0x28
    cd90:	e3530026 	cmp	r3, #38	; 0x26
    cd94:	95840854 	strls	r0, [r4, #2132]	; 0x854
    cd98:	eaffff4d 	b	cad4 <CKernelOptions::CKernelOptions()+0xb0>
    cd9c:	00014c1c 	.word	0x00014c1c
    cda0:	00014c24 	.word	0x00014c24
    cda4:	00016650 	.word	0x00016650
    cda8:	0000080c 	.word	0x0000080c
    cdac:	00050001 	.word	0x00050001
    cdb0:	00014c90 	.word	0x00014c90
    cdb4:	00014c28 	.word	0x00014c28
    cdb8:	00014c30 	.word	0x00014c30
    cdbc:	00014c38 	.word	0x00014c38
    cdc0:	0000053c 	.word	0x0000053c
    cdc4:	00014c44 	.word	0x00014c44
    cdc8:	00014c4c 	.word	0x00014c4c
    cdcc:	00001e78 	.word	0x00001e78
    cdd0:	00014c5c 	.word	0x00014c5c
    cdd4:	00014c68 	.word	0x00014c68
    cdd8:	00014c74 	.word	0x00014c74
    cddc:	00014c7c 	.word	0x00014c7c
    cde0:	00014c84 	.word	0x00014c84

0000cde4 <CKernelOptions::GetOptionValue(char*)>:
    cde4:	e1d030d0 	ldrsb	r3, [r0]
    cde8:	e3530000 	cmp	r3, #0
    cdec:	1a000003 	bne	ce00 <CKernelOptions::GetOptionValue(char*)+0x1c>
    cdf0:	ea000007 	b	ce14 <CKernelOptions::GetOptionValue(char*)+0x30>
    cdf4:	e1f030d1 	ldrsb	r3, [r0, #1]!
    cdf8:	e3530000 	cmp	r3, #0
    cdfc:	0a000004 	beq	ce14 <CKernelOptions::GetOptionValue(char*)+0x30>
    ce00:	e353003d 	cmp	r3, #61	; 0x3d
    ce04:	1afffffa 	bne	cdf4 <CKernelOptions::GetOptionValue(char*)+0x10>
    ce08:	e3a02000 	mov	r2, #0
    ce0c:	e2803001 	add	r3, r0, #1
    ce10:	e5c02000 	strb	r2, [r0]
    ce14:	e1a00003 	mov	r0, r3
    ce18:	e12fff1e 	bx	lr

0000ce1c <CKernelOptions::GetDecimal(char*)>:
    ce1c:	e2503000 	subs	r3, r0, #0
    ce20:	0a000002 	beq	ce30 <CKernelOptions::GetDecimal(char*)+0x14>
    ce24:	e1d330d0 	ldrsb	r3, [r3]
    ce28:	e3530000 	cmp	r3, #0
    ce2c:	1a000001 	bne	ce38 <CKernelOptions::GetDecimal(char*)+0x1c>
    ce30:	e3e00000 	mvn	r0, #0
    ce34:	e12fff1e 	bx	lr
    ce38:	eafffea2 	b	c8c8 <CKernelOptions::GetDecimal(char*) [clone .part.0]>

0000ce3c <CLogger::CLogger(unsigned int, CTimer*)>:
    ce3c:	e92d4010 	push	{r4, lr}
    ce40:	e3a03000 	mov	r3, #0
    ce44:	e1a04000 	mov	r4, r0
    ce48:	e3a00001 	mov	r0, #1
    ce4c:	e884000e 	stm	r4, {r1, r2, r3}
    ce50:	e584300c 	str	r3, [r4, #12]
    ce54:	e5843010 	str	r3, [r4, #16]
    ce58:	e5843014 	str	r3, [r4, #20]
    ce5c:	e58430e4 	str	r3, [r4, #228]	; 0xe4
    ce60:	e58430e8 	str	r3, [r4, #232]	; 0xe8
    ce64:	e58430f0 	str	r3, [r4, #240]	; 0xf0
    ce68:	e58430f4 	str	r3, [r4, #244]	; 0xf4
    ce6c:	e5840018 	str	r0, [r4, #24]
    ce70:	e58400ec 	str	r0, [r4, #236]	; 0xec
    ce74:	e3a00901 	mov	r0, #16384	; 0x4000
    ce78:	eb001646 	bl	12798 <operator new[](unsigned int)>
    ce7c:	e59f300c 	ldr	r3, [pc, #12]	; ce90 <CLogger::CLogger(unsigned int, CTimer*)+0x54>
    ce80:	e584000c 	str	r0, [r4, #12]
    ce84:	e5834000 	str	r4, [r3]
    ce88:	e1a00004 	mov	r0, r4
    ce8c:	e8bd8010 	pop	{r4, pc}
    ce90:	00016654 	.word	0x00016654

0000ce94 <CLogger::~CLogger()>:
    ce94:	e3a02000 	mov	r2, #0
    ce98:	e59f1064 	ldr	r1, [pc, #100]	; cf04 <CLogger::~CLogger()+0x70>
    ce9c:	e92d4070 	push	{r4, r5, r6, lr}
    cea0:	e59030e8 	ldr	r3, [r0, #232]	; 0xe8
    cea4:	e1a04000 	mov	r4, r0
    cea8:	e1a06002 	mov	r6, r2
    ceac:	e3a05f42 	mov	r5, #264	; 0x108
    ceb0:	e5812000 	str	r2, [r1]
    ceb4:	ea000008 	b	cedc <CLogger::~CLogger()+0x48>
    ceb8:	e591001c 	ldr	r0, [r1, #28]
    cebc:	e1a01005 	mov	r1, r5
    cec0:	eb001637 	bl	127a4 <operator delete(void*, unsigned int)>
    cec4:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
    cec8:	e2833001 	add	r3, r3, #1
    cecc:	e3530032 	cmp	r3, #50	; 0x32
    ced0:	e58430e8 	str	r3, [r4, #232]	; 0xe8
    ced4:	03a03000 	moveq	r3, #0
    ced8:	058460e8 	streq	r6, [r4, #232]	; 0xe8
    cedc:	e59420e4 	ldr	r2, [r4, #228]	; 0xe4
    cee0:	e0841103 	add	r1, r4, r3, lsl #2
    cee4:	e1520003 	cmp	r2, r3
    cee8:	1afffff2 	bne	ceb8 <CLogger::~CLogger()+0x24>
    ceec:	e594000c 	ldr	r0, [r4, #12]
    cef0:	e3500000 	cmp	r0, #0
    cef4:	0a000000 	beq	cefc <CLogger::~CLogger()+0x68>
    cef8:	eb001628 	bl	127a0 <operator delete[](void*)>
    cefc:	e1a00004 	mov	r0, r4
    cf00:	e8bd8070 	pop	{r4, r5, r6, pc}
    cf04:	00016654 	.word	0x00016654

0000cf08 <CLogger::Get()>:
    cf08:	e59f3004 	ldr	r3, [pc, #4]	; cf14 <CLogger::Get()+0xc>
    cf0c:	e5930000 	ldr	r0, [r3]
    cf10:	e12fff1e 	bx	lr
    cf14:	00016654 	.word	0x00016654

0000cf18 <CLogger::Write(char const*)>:
    cf18:	e92d4070 	push	{r4, r5, r6, lr}
    cf1c:	e1a04000 	mov	r4, r0
    cf20:	e1a00001 	mov	r0, r1
    cf24:	e1a05001 	mov	r5, r1
    cf28:	eb00127b 	bl	1191c <strlen>
    cf2c:	e1a06000 	mov	r6, r0
    cf30:	e5940008 	ldr	r0, [r4, #8]
    cf34:	e1a02006 	mov	r2, r6
    cf38:	e5903000 	ldr	r3, [r0]
    cf3c:	e1a01005 	mov	r1, r5
    cf40:	e593300c 	ldr	r3, [r3, #12]
    cf44:	e12fff33 	blx	r3
    cf48:	e5940018 	ldr	r0, [r4, #24]
    cf4c:	e3500000 	cmp	r0, #0
    cf50:	1a000018 	bne	cfb8 <CLogger::Write(char const*)+0xa0>
    cf54:	e59f2064 	ldr	r2, [pc, #100]	; cfc0 <CLogger::Write(char const*)+0xa8>
    cf58:	e0850006 	add	r0, r5, r6
    cf5c:	e1550000 	cmp	r5, r0
    cf60:	0a00000f 	beq	cfa4 <CLogger::Write(char const*)+0x8c>
    cf64:	e0d510d1 	ldrsb	r1, [r5], #1
    cf68:	e351000d 	cmp	r1, #13
    cf6c:	0afffffa 	beq	cf5c <CLogger::Write(char const*)+0x44>
    cf70:	e594c010 	ldr	ip, [r4, #16]
    cf74:	e594e00c 	ldr	lr, [r4, #12]
    cf78:	e7ce100c 	strb	r1, [lr, ip]
    cf7c:	e5943010 	ldr	r3, [r4, #16]
    cf80:	e5941014 	ldr	r1, [r4, #20]
    cf84:	e2833001 	add	r3, r3, #1
    cf88:	e0033002 	and	r3, r3, r2
    cf8c:	e1530001 	cmp	r3, r1
    cf90:	e5843010 	str	r3, [r4, #16]
    cf94:	1afffff0 	bne	cf5c <CLogger::Write(char const*)+0x44>
    cf98:	e2433001 	sub	r3, r3, #1
    cf9c:	e0033002 	and	r3, r3, r2
    cfa0:	e5843010 	str	r3, [r4, #16]
    cfa4:	e5943018 	ldr	r3, [r4, #24]
    cfa8:	e3530000 	cmp	r3, #0
    cfac:	08bd8070 	popeq	{r4, r5, r6, pc}
    cfb0:	e8bd4070 	pop	{r4, r5, r6, lr}
    cfb4:	ea0015c9 	b	126e0 <LeaveCritical>
    cfb8:	eb00159b 	bl	1262c <EnterCritical>
    cfbc:	eaffffe4 	b	cf54 <CLogger::Write(char const*)+0x3c>
    cfc0:	00003fff 	.word	0x00003fff

0000cfc4 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)>:
    cfc4:	e590c000 	ldr	ip, [r0]
    cfc8:	e152000c 	cmp	r2, ip
    cfcc:	812fff1e 	bxhi	lr
    cfd0:	e92d4070 	push	{r4, r5, r6, lr}
    cfd4:	e1a05003 	mov	r5, r3
    cfd8:	e3a03000 	mov	r3, #0
    cfdc:	e24dd0c8 	sub	sp, sp, #200	; 0xc8
    cfe0:	e1520003 	cmp	r2, r3
    cfe4:	e1a04000 	mov	r4, r0
    cfe8:	e5cd3000 	strb	r3, [sp]
    cfec:	0a00000f 	beq	d030 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x6c>
    cff0:	e1a0000d 	mov	r0, sp
    cff4:	eb0012e4 	bl	11b8c <strcat>
    cff8:	e1a0000d 	mov	r0, sp
    cffc:	e59f1088 	ldr	r1, [pc, #136]	; d08c <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xc8>
    d000:	eb0012e1 	bl	11b8c <strcat>
    d004:	e1a01005 	mov	r1, r5
    d008:	e1a0000d 	mov	r0, sp
    d00c:	eb0012de 	bl	11b8c <strcat>
    d010:	e1a0000d 	mov	r0, sp
    d014:	e59f1074 	ldr	r1, [pc, #116]	; d090 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xcc>
    d018:	eb0012db 	bl	11b8c <strcat>
    d01c:	e1a0100d 	mov	r1, sp
    d020:	e1a00004 	mov	r0, r4
    d024:	ebffffbb 	bl	cf18 <CLogger::Write(char const*)>
    d028:	e28dd0c8 	add	sp, sp, #200	; 0xc8
    d02c:	e8bd8070 	pop	{r4, r5, r6, pc}
    d030:	e1a06001 	mov	r6, r1
    d034:	e1a0000d 	mov	r0, sp
    d038:	e59f1054 	ldr	r1, [pc, #84]	; d094 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd0>
    d03c:	eb0012b4 	bl	11b14 <strcpy>
    d040:	e1a01006 	mov	r1, r6
    d044:	e1a0000d 	mov	r0, sp
    d048:	eb0012cf 	bl	11b8c <strcat>
    d04c:	e59f1038 	ldr	r1, [pc, #56]	; d08c <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xc8>
    d050:	e1a0000d 	mov	r0, sp
    d054:	eb0012cc 	bl	11b8c <strcat>
    d058:	e1a01005 	mov	r1, r5
    d05c:	e1a0000d 	mov	r0, sp
    d060:	eb0012c9 	bl	11b8c <strcat>
    d064:	e59f102c 	ldr	r1, [pc, #44]	; d098 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd4>
    d068:	e1a0000d 	mov	r0, sp
    d06c:	eb0012c6 	bl	11b8c <strcat>
    d070:	e59f1018 	ldr	r1, [pc, #24]	; d090 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xcc>
    d074:	e1a0000d 	mov	r0, sp
    d078:	eb0012c3 	bl	11b8c <strcat>
    d07c:	e1a0100d 	mov	r1, sp
    d080:	e1a00004 	mov	r0, r4
    d084:	ebffffa3 	bl	cf18 <CLogger::Write(char const*)>
    d088:	eb000e58 	bl	109f0 <halt>
    d08c:	00014ca0 	.word	0x00014ca0
    d090:	0001489c 	.word	0x0001489c
    d094:	00014c98 	.word	0x00014c98
    d098:	00014ca4 	.word	0x00014ca4

0000d09c <CLogger::Read(void*, unsigned int)>:
    d09c:	e92d4070 	push	{r4, r5, r6, lr}
    d0a0:	e1a04000 	mov	r4, r0
    d0a4:	e5900018 	ldr	r0, [r0, #24]
    d0a8:	e1a05001 	mov	r5, r1
    d0ac:	e3500000 	cmp	r0, #0
    d0b0:	e1a06002 	mov	r6, r2
    d0b4:	1a00001c 	bne	d12c <CLogger::Read(void*, unsigned int)+0x90>
    d0b8:	e5942010 	ldr	r2, [r4, #16]
    d0bc:	e5943014 	ldr	r3, [r4, #20]
    d0c0:	e1520003 	cmp	r2, r3
    d0c4:	0a000021 	beq	d150 <CLogger::Read(void*, unsigned int)+0xb4>
    d0c8:	e1a01005 	mov	r1, r5
    d0cc:	e59f2088 	ldr	r2, [pc, #136]	; d15c <CLogger::Read(void*, unsigned int)+0xc0>
    d0d0:	e3a05000 	mov	r5, #0
    d0d4:	ea00000a 	b	d104 <CLogger::Read(void*, unsigned int)+0x68>
    d0d8:	e594000c 	ldr	r0, [r4, #12]
    d0dc:	e2855001 	add	r5, r5, #1
    d0e0:	e19030d3 	ldrsb	r3, [r0, r3]
    d0e4:	e4c13001 	strb	r3, [r1], #1
    d0e8:	e5943014 	ldr	r3, [r4, #20]
    d0ec:	e5940010 	ldr	r0, [r4, #16]
    d0f0:	e2833001 	add	r3, r3, #1
    d0f4:	e0033002 	and	r3, r3, r2
    d0f8:	e1530000 	cmp	r3, r0
    d0fc:	e5843014 	str	r3, [r4, #20]
    d100:	0a000001 	beq	d10c <CLogger::Read(void*, unsigned int)+0x70>
    d104:	e1550006 	cmp	r5, r6
    d108:	1afffff2 	bne	d0d8 <CLogger::Read(void*, unsigned int)+0x3c>
    d10c:	e5943018 	ldr	r3, [r4, #24]
    d110:	e3530000 	cmp	r3, #0
    d114:	1a000001 	bne	d120 <CLogger::Read(void*, unsigned int)+0x84>
    d118:	e1a00005 	mov	r0, r5
    d11c:	e8bd8070 	pop	{r4, r5, r6, pc}
    d120:	eb00156e 	bl	126e0 <LeaveCritical>
    d124:	e1a00005 	mov	r0, r5
    d128:	e8bd8070 	pop	{r4, r5, r6, pc}
    d12c:	eb00153e 	bl	1262c <EnterCritical>
    d130:	e5942010 	ldr	r2, [r4, #16]
    d134:	e5943014 	ldr	r3, [r4, #20]
    d138:	e1520003 	cmp	r2, r3
    d13c:	1affffe1 	bne	d0c8 <CLogger::Read(void*, unsigned int)+0x2c>
    d140:	e5943018 	ldr	r3, [r4, #24]
    d144:	e3530000 	cmp	r3, #0
    d148:	0a000000 	beq	d150 <CLogger::Read(void*, unsigned int)+0xb4>
    d14c:	eb001563 	bl	126e0 <LeaveCritical>
    d150:	e3e05000 	mvn	r5, #0
    d154:	e1a00005 	mov	r0, r5
    d158:	e8bd8070 	pop	{r4, r5, r6, pc}
    d15c:	00003fff 	.word	0x00003fff

0000d160 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>:
    d160:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    d164:	e1a05000 	mov	r5, r0
    d168:	e24dd00c 	sub	sp, sp, #12
    d16c:	e3a00f42 	mov	r0, #264	; 0x108
    d170:	e1a07003 	mov	r7, r3
    d174:	e1a09002 	mov	r9, r2
    d178:	e1a08001 	mov	r8, r1
    d17c:	eb001584 	bl	12794 <operator new(unsigned int)>
    d180:	e3a06000 	mov	r6, #0
    d184:	e1a04000 	mov	r4, r0
    d188:	e1a01008 	mov	r1, r8
    d18c:	e3a02032 	mov	r2, #50	; 0x32
    d190:	e4c09001 	strb	r9, [r0], #1
    d194:	eb001269 	bl	11b40 <strncpy>
    d198:	e1a01007 	mov	r1, r7
    d19c:	e2840033 	add	r0, r4, #51	; 0x33
    d1a0:	e3a020c8 	mov	r2, #200	; 0xc8
    d1a4:	e5c46032 	strb	r6, [r4, #50]	; 0x32
    d1a8:	eb001264 	bl	11b40 <strncpy>
    d1ac:	e5950004 	ldr	r0, [r5, #4]
    d1b0:	e5c460fa 	strb	r6, [r4, #250]	; 0xfa
    d1b4:	e1500006 	cmp	r0, r6
    d1b8:	0a000004 	beq	d1d0 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x70>
    d1bc:	e28d2004 	add	r2, sp, #4
    d1c0:	e1a0100d 	mov	r1, sp
    d1c4:	eb000ee4 	bl	10d5c <CTimer::GetLocalTime(unsigned int*, unsigned int*)>
    d1c8:	e1500006 	cmp	r0, r6
    d1cc:	1a000021 	bne	d258 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xf8>
    d1d0:	e3a03000 	mov	r3, #0
    d1d4:	e59500ec 	ldr	r0, [r5, #236]	; 0xec
    d1d8:	e58430fc 	str	r3, [r4, #252]	; 0xfc
    d1dc:	e3500000 	cmp	r0, #0
    d1e0:	e5843100 	str	r3, [r4, #256]	; 0x100
    d1e4:	e5843104 	str	r3, [r4, #260]	; 0x104
    d1e8:	1a000027 	bne	d28c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x12c>
    d1ec:	e59520e4 	ldr	r2, [r5, #228]	; 0xe4
    d1f0:	e2823001 	add	r3, r2, #1
    d1f4:	e3530032 	cmp	r3, #50	; 0x32
    d1f8:	e0852102 	add	r2, r5, r2, lsl #2
    d1fc:	e582401c 	str	r4, [r2, #28]
    d200:	03a02000 	moveq	r2, #0
    d204:	01a03002 	moveq	r3, r2
    d208:	058520e4 	streq	r2, [r5, #228]	; 0xe4
    d20c:	e59520e8 	ldr	r2, [r5, #232]	; 0xe8
    d210:	158530e4 	strne	r3, [r5, #228]	; 0xe4
    d214:	e1520003 	cmp	r2, r3
    d218:	0a00001e 	beq	d298 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x138>
    d21c:	e3500000 	cmp	r0, #0
    d220:	13a04000 	movne	r4, #0
    d224:	0a000005 	beq	d240 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xe0>
    d228:	eb00152c 	bl	126e0 <LeaveCritical>
    d22c:	e3540000 	cmp	r4, #0
    d230:	0a000002 	beq	d240 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xe0>
    d234:	e1a00004 	mov	r0, r4
    d238:	e3a01f42 	mov	r1, #264	; 0x108
    d23c:	eb001558 	bl	127a4 <operator delete(void*, unsigned int)>
    d240:	e59530f0 	ldr	r3, [r5, #240]	; 0xf0
    d244:	e3530000 	cmp	r3, #0
    d248:	0a000000 	beq	d250 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xf0>
    d24c:	e12fff33 	blx	r3
    d250:	e28dd00c 	add	sp, sp, #12
    d254:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    d258:	e59d3004 	ldr	r3, [sp, #4]
    d25c:	e59f105c 	ldr	r1, [pc, #92]	; d2c0 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x160>
    d260:	e59d2000 	ldr	r2, [sp]
    d264:	e0831391 	umull	r1, r3, r1, r3
    d268:	e1a036a3 	lsr	r3, r3, #13
    d26c:	e5950004 	ldr	r0, [r5, #4]
    d270:	e5843100 	str	r3, [r4, #256]	; 0x100
    d274:	e58420fc 	str	r2, [r4, #252]	; 0xfc
    d278:	eb000e89 	bl	10ca4 <CTimer::GetTimeZone() const>
    d27c:	e5840104 	str	r0, [r4, #260]	; 0x104
    d280:	e59500ec 	ldr	r0, [r5, #236]	; 0xec
    d284:	e3500000 	cmp	r0, #0
    d288:	0affffd7 	beq	d1ec <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x8c>
    d28c:	eb0014e6 	bl	1262c <EnterCritical>
    d290:	e59500ec 	ldr	r0, [r5, #236]	; 0xec
    d294:	eaffffd4 	b	d1ec <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x8c>
    d298:	e2832001 	add	r2, r3, #1
    d29c:	e3520032 	cmp	r2, #50	; 0x32
    d2a0:	e0853103 	add	r3, r5, r3, lsl #2
    d2a4:	e593401c 	ldr	r4, [r3, #28]
    d2a8:	03a03000 	moveq	r3, #0
    d2ac:	158520e8 	strne	r2, [r5, #232]	; 0xe8
    d2b0:	058530e8 	streq	r3, [r5, #232]	; 0xe8
    d2b4:	e3500000 	cmp	r0, #0
    d2b8:	0affffdb 	beq	d22c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xcc>
    d2bc:	eaffffd9 	b	d228 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xc8>
    d2c0:	d1b71759 	.word	0xd1b71759

0000d2c4 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)>:
    d2c4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d2c8:	e1a04000 	mov	r4, r0
    d2cc:	e59000ec 	ldr	r0, [r0, #236]	; 0xec
    d2d0:	e1a07001 	mov	r7, r1
    d2d4:	e3500000 	cmp	r0, #0
    d2d8:	e1a08002 	mov	r8, r2
    d2dc:	e1a06003 	mov	r6, r3
    d2e0:	1a000022 	bne	d370 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xac>
    d2e4:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
    d2e8:	e59420e4 	ldr	r2, [r4, #228]	; 0xe4
    d2ec:	e1530002 	cmp	r3, r2
    d2f0:	0a000028 	beq	d398 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xd4>
    d2f4:	e283c001 	add	ip, r3, #1
    d2f8:	e35c0032 	cmp	ip, #50	; 0x32
    d2fc:	e0843103 	add	r3, r4, r3, lsl #2
    d300:	e593501c 	ldr	r5, [r3, #28]
    d304:	03a03000 	moveq	r3, #0
    d308:	1584c0e8 	strne	ip, [r4, #232]	; 0xe8
    d30c:	058430e8 	streq	r3, [r4, #232]	; 0xe8
    d310:	e3500000 	cmp	r0, #0
    d314:	1a000021 	bne	d3a0 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xdc>
    d318:	e1a01005 	mov	r1, r5
    d31c:	e4d12001 	ldrb	r2, [r1], #1
    d320:	e1a00008 	mov	r0, r8
    d324:	e5c72000 	strb	r2, [r7]
    d328:	eb0011f9 	bl	11b14 <strcpy>
    d32c:	e2851033 	add	r1, r5, #51	; 0x33
    d330:	e1a00006 	mov	r0, r6
    d334:	eb0011f6 	bl	11b14 <strcpy>
    d338:	e59520fc 	ldr	r2, [r5, #252]	; 0xfc
    d33c:	e59d1018 	ldr	r1, [sp, #24]
    d340:	e5953100 	ldr	r3, [r5, #256]	; 0x100
    d344:	e5812000 	str	r2, [r1]
    d348:	e59d201c 	ldr	r2, [sp, #28]
    d34c:	e1a00005 	mov	r0, r5
    d350:	e5823000 	str	r3, [r2]
    d354:	e5953104 	ldr	r3, [r5, #260]	; 0x104
    d358:	e59d2020 	ldr	r2, [sp, #32]
    d35c:	e3a01f42 	mov	r1, #264	; 0x108
    d360:	e5823000 	str	r3, [r2]
    d364:	eb00150e 	bl	127a4 <operator delete(void*, unsigned int)>
    d368:	e3a00001 	mov	r0, #1
    d36c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    d370:	eb0014ad 	bl	1262c <EnterCritical>
    d374:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
    d378:	e59420e4 	ldr	r2, [r4, #228]	; 0xe4
    d37c:	e1520003 	cmp	r2, r3
    d380:	159400ec 	ldrne	r0, [r4, #236]	; 0xec
    d384:	1affffda 	bne	d2f4 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x30>
    d388:	e59430ec 	ldr	r3, [r4, #236]	; 0xec
    d38c:	e3530000 	cmp	r3, #0
    d390:	0a000000 	beq	d398 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xd4>
    d394:	eb0014d1 	bl	126e0 <LeaveCritical>
    d398:	e3a00000 	mov	r0, #0
    d39c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    d3a0:	eb0014ce 	bl	126e0 <LeaveCritical>
    d3a4:	eaffffdb 	b	d318 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x54>

0000d3a8 <CLogger::RegisterEventNotificationHandler(void (*)())>:
    d3a8:	e58010f0 	str	r1, [r0, #240]	; 0xf0
    d3ac:	e12fff1e 	bx	lr

0000d3b0 <CLogger::RegisterPanicHandler(void (*)())>:
    d3b0:	e58010f4 	str	r1, [r0, #244]	; 0xf4
    d3b4:	e12fff1e 	bx	lr

0000d3b8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>:
    d3b8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    d3bc:	e1a07003 	mov	r7, r3
    d3c0:	e24dd024 	sub	sp, sp, #36	; 0x24
    d3c4:	e1a04000 	mov	r4, r0
    d3c8:	e1a0000d 	mov	r0, sp
    d3cc:	e1a05002 	mov	r5, r2
    d3d0:	e1a06001 	mov	r6, r1
    d3d4:	eb00098a 	bl	fa04 <CString::CString()>
    d3d8:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
    d3dc:	e1a01007 	mov	r1, r7
    d3e0:	e1a0000d 	mov	r0, sp
    d3e4:	eb000b53 	bl	10138 <CString::FormatV(char const*, std::__va_list)>
    d3e8:	e1a0000d 	mov	r0, sp
    d3ec:	eb00099a 	bl	fa5c <CString::operator char const*() const>
    d3f0:	e1a02005 	mov	r2, r5
    d3f4:	e1a03000 	mov	r3, r0
    d3f8:	e1a01006 	mov	r1, r6
    d3fc:	e1a00004 	mov	r0, r4
    d400:	ebffff56 	bl	d160 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>
    d404:	e5943000 	ldr	r3, [r4]
    d408:	e1550003 	cmp	r5, r3
    d40c:	8a00002c 	bhi	d4c4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x10c>
    d410:	e28d0010 	add	r0, sp, #16
    d414:	eb00097a 	bl	fa04 <CString::CString()>
    d418:	e3550000 	cmp	r5, #0
    d41c:	0a00002c 	beq	d4d4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x11c>
    d420:	e5940004 	ldr	r0, [r4, #4]
    d424:	e3500000 	cmp	r0, #0
    d428:	0a00004a 	beq	d558 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1a0>
    d42c:	eb000ebb 	bl	10f20 <CTimer::GetTimeString()>
    d430:	e2507000 	subs	r7, r0, #0
    d434:	0a000047 	beq	d558 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1a0>
    d438:	e1a00007 	mov	r0, r7
    d43c:	eb000986 	bl	fa5c <CString::operator char const*() const>
    d440:	e1a01000 	mov	r1, r0
    d444:	e28d0010 	add	r0, sp, #16
    d448:	eb0009b5 	bl	fb24 <CString::Append(char const*)>
    d44c:	e59f1144 	ldr	r1, [pc, #324]	; d598 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e0>
    d450:	e28d0010 	add	r0, sp, #16
    d454:	eb0009b2 	bl	fb24 <CString::Append(char const*)>
    d458:	e5973000 	ldr	r3, [r7]
    d45c:	e1a00007 	mov	r0, r7
    d460:	e5933004 	ldr	r3, [r3, #4]
    d464:	e12fff33 	blx	r3
    d468:	e1a01006 	mov	r1, r6
    d46c:	e28d0010 	add	r0, sp, #16
    d470:	eb0009ab 	bl	fb24 <CString::Append(char const*)>
    d474:	e59f1120 	ldr	r1, [pc, #288]	; d59c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e4>
    d478:	e28d0010 	add	r0, sp, #16
    d47c:	eb0009a8 	bl	fb24 <CString::Append(char const*)>
    d480:	e1a0000d 	mov	r0, sp
    d484:	eb000974 	bl	fa5c <CString::operator char const*() const>
    d488:	e1a01000 	mov	r1, r0
    d48c:	e28d0010 	add	r0, sp, #16
    d490:	eb0009a3 	bl	fb24 <CString::Append(char const*)>
    d494:	e3550000 	cmp	r5, #0
    d498:	0a00001e 	beq	d518 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x160>
    d49c:	e59f10fc 	ldr	r1, [pc, #252]	; d5a0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e8>
    d4a0:	e28d0010 	add	r0, sp, #16
    d4a4:	eb00099e 	bl	fb24 <CString::Append(char const*)>
    d4a8:	e28d0010 	add	r0, sp, #16
    d4ac:	eb00096a 	bl	fa5c <CString::operator char const*() const>
    d4b0:	e1a01000 	mov	r1, r0
    d4b4:	e1a00004 	mov	r0, r4
    d4b8:	ebfffe96 	bl	cf18 <CLogger::Write(char const*)>
    d4bc:	e28d0010 	add	r0, sp, #16
    d4c0:	eb00091c 	bl	f938 <CString::~CString()>
    d4c4:	e1a0000d 	mov	r0, sp
    d4c8:	eb00091a 	bl	f938 <CString::~CString()>
    d4cc:	e28dd024 	add	sp, sp, #36	; 0x24
    d4d0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    d4d4:	e59f10c8 	ldr	r1, [pc, #200]	; d5a4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1ec>
    d4d8:	e28d0010 	add	r0, sp, #16
    d4dc:	eb000964 	bl	fa74 <CString::operator=(char const*)>
    d4e0:	e5940004 	ldr	r0, [r4, #4]
    d4e4:	e3500000 	cmp	r0, #0
    d4e8:	1a000026 	bne	d588 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1d0>
    d4ec:	e1a01006 	mov	r1, r6
    d4f0:	e28d0010 	add	r0, sp, #16
    d4f4:	eb00098a 	bl	fb24 <CString::Append(char const*)>
    d4f8:	e59f109c 	ldr	r1, [pc, #156]	; d59c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e4>
    d4fc:	e28d0010 	add	r0, sp, #16
    d500:	eb000987 	bl	fb24 <CString::Append(char const*)>
    d504:	e1a0000d 	mov	r0, sp
    d508:	eb000953 	bl	fa5c <CString::operator char const*() const>
    d50c:	e1a01000 	mov	r1, r0
    d510:	e28d0010 	add	r0, sp, #16
    d514:	eb000982 	bl	fb24 <CString::Append(char const*)>
    d518:	e59f1088 	ldr	r1, [pc, #136]	; d5a8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1f0>
    d51c:	e28d0010 	add	r0, sp, #16
    d520:	eb00097f 	bl	fb24 <CString::Append(char const*)>
    d524:	e59f1074 	ldr	r1, [pc, #116]	; d5a0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e8>
    d528:	e28d0010 	add	r0, sp, #16
    d52c:	eb00097c 	bl	fb24 <CString::Append(char const*)>
    d530:	e28d0010 	add	r0, sp, #16
    d534:	eb000948 	bl	fa5c <CString::operator char const*() const>
    d538:	e1a01000 	mov	r1, r0
    d53c:	e1a00004 	mov	r0, r4
    d540:	ebfffe74 	bl	cf18 <CLogger::Write(char const*)>
    d544:	e59430f4 	ldr	r3, [r4, #244]	; 0xf4
    d548:	e3530000 	cmp	r3, #0
    d54c:	0a000000 	beq	d554 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x19c>
    d550:	e12fff33 	blx	r3
    d554:	eb000d25 	bl	109f0 <halt>
    d558:	e1a01006 	mov	r1, r6
    d55c:	e28d0010 	add	r0, sp, #16
    d560:	eb00096f 	bl	fb24 <CString::Append(char const*)>
    d564:	e59f1030 	ldr	r1, [pc, #48]	; d59c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e4>
    d568:	e28d0010 	add	r0, sp, #16
    d56c:	eb00096c 	bl	fb24 <CString::Append(char const*)>
    d570:	e1a0000d 	mov	r0, sp
    d574:	eb000938 	bl	fa5c <CString::operator char const*() const>
    d578:	e1a01000 	mov	r1, r0
    d57c:	e28d0010 	add	r0, sp, #16
    d580:	eb000967 	bl	fb24 <CString::Append(char const*)>
    d584:	eaffffc4 	b	d49c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xe4>
    d588:	eb000e64 	bl	10f20 <CTimer::GetTimeString()>
    d58c:	e2507000 	subs	r7, r0, #0
    d590:	1affffa8 	bne	d438 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x80>
    d594:	eaffffd4 	b	d4ec <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x134>
    d598:	00014cac 	.word	0x00014cac
    d59c:	00014ca0 	.word	0x00014ca0
    d5a0:	0001489c 	.word	0x0001489c
    d5a4:	00014c98 	.word	0x00014c98
    d5a8:	00014ca4 	.word	0x00014ca4

0000d5ac <CLogger::Write(char const*, TLogSeverity, char const*, ...)>:
    d5ac:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)
    d5b0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    d5b4:	e24dd010 	sub	sp, sp, #16
    d5b8:	e28dc018 	add	ip, sp, #24
    d5bc:	e58dc000 	str	ip, [sp]
    d5c0:	e59d3014 	ldr	r3, [sp, #20]
    d5c4:	e58dc00c 	str	ip, [sp, #12]
    d5c8:	ebffff7a 	bl	d3b8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
    d5cc:	e28dd010 	add	sp, sp, #16
    d5d0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    d5d4:	e28dd004 	add	sp, sp, #4
    d5d8:	e12fff1e 	bx	lr

0000d5dc <CLogger::Initialize(CDevice*)>:
    d5dc:	e92d4010 	push	{r4, lr}
    d5e0:	e5801008 	str	r1, [r0, #8]
    d5e4:	e24dd008 	sub	sp, sp, #8
    d5e8:	e1a04000 	mov	r4, r0
    d5ec:	eb000102 	bl	d9fc <CMachineInfo::Get()>
    d5f0:	eb00008b 	bl	d824 <CMachineInfo::GetMachineName() const>
    d5f4:	e59f301c 	ldr	r3, [pc, #28]	; d618 <CLogger::Initialize(CDevice*)+0x3c>
    d5f8:	e58d0000 	str	r0, [sp]
    d5fc:	e3a02003 	mov	r2, #3
    d600:	e1a00004 	mov	r0, r4
    d604:	e59f1010 	ldr	r1, [pc, #16]	; d61c <CLogger::Initialize(CDevice*)+0x40>
    d608:	ebffffe7 	bl	d5ac <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    d60c:	e3a00001 	mov	r0, #1
    d610:	e28dd008 	add	sp, sp, #8
    d614:	e8bd8010 	pop	{r4, pc}
    d618:	00014cb0 	.word	0x00014cb0
    d61c:	00014cc8 	.word	0x00014cc8

0000d620 <CMachineInfo::CMachineInfo()>:
    d620:	e3a03000 	mov	r3, #0
    d624:	e92d4030 	push	{r4, r5, lr}
    d628:	e3a01003 	mov	r1, #3
    d62c:	e1a04000 	mov	r4, r0
    d630:	e3a0000e 	mov	r0, #14
    d634:	e59f21a8 	ldr	r2, [pc, #424]	; d7e4 <CMachineInfo::CMachineInfo()+0x1c4>
    d638:	e24dd024 	sub	sp, sp, #36	; 0x24
    d63c:	e5925000 	ldr	r5, [r2]
    d640:	e5c40004 	strb	r0, [r4, #4]
    d644:	e1550003 	cmp	r5, r3
    d648:	e5c41010 	strb	r1, [r4, #16]
    d64c:	e5843000 	str	r3, [r4]
    d650:	e5843008 	str	r3, [r4, #8]
    d654:	e584300c 	str	r3, [r4, #12]
    d658:	e5843014 	str	r3, [r4, #20]
    d65c:	0a00000e 	beq	d69c <CMachineInfo::CMachineInfo()+0x7c>
    d660:	e595e000 	ldr	lr, [r5]
    d664:	e5d5c004 	ldrb	ip, [r5, #4]
    d668:	e5950008 	ldr	r0, [r5, #8]
    d66c:	e595100c 	ldr	r1, [r5, #12]
    d670:	e5d52010 	ldrb	r2, [r5, #16]
    d674:	e5953014 	ldr	r3, [r5, #20]
    d678:	e584e000 	str	lr, [r4]
    d67c:	e5c4c004 	strb	ip, [r4, #4]
    d680:	e5840008 	str	r0, [r4, #8]
    d684:	e584100c 	str	r1, [r4, #12]
    d688:	e5c42010 	strb	r2, [r4, #16]
    d68c:	e5843014 	str	r3, [r4, #20]
    d690:	e1a00004 	mov	r0, r4
    d694:	e28dd024 	add	sp, sp, #36	; 0x24
    d698:	e8bd8030 	pop	{r4, r5, pc}
    d69c:	e28d000c 	add	r0, sp, #12
    d6a0:	e5824000 	str	r4, [r2]
    d6a4:	ebfff512 	bl	aaf4 <CBcmPropertyTags::CBcmPropertyTags()>
    d6a8:	e3a03010 	mov	r3, #16
    d6ac:	e58d5000 	str	r5, [sp]
    d6b0:	e28d000c 	add	r0, sp, #12
    d6b4:	e08d2003 	add	r2, sp, r3
    d6b8:	e59f1128 	ldr	r1, [pc, #296]	; d7e8 <CMachineInfo::CMachineInfo()+0x1c8>
    d6bc:	ebfff563 	bl	ac50 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    d6c0:	e3500000 	cmp	r0, #0
    d6c4:	0a00000c 	beq	d6fc <CMachineInfo::CMachineInfo()+0xdc>
    d6c8:	e59d101c 	ldr	r1, [sp, #28]
    d6cc:	e2113502 	ands	r3, r1, #8388608	; 0x800000
    d6d0:	e5841000 	str	r1, [r4]
    d6d4:	1a00000b 	bne	d708 <CMachineInfo::CMachineInfo()+0xe8>
    d6d8:	e3a02002 	mov	r2, #2
    d6dc:	e59f0108 	ldr	r0, [pc, #264]	; d7ec <CMachineInfo::CMachineInfo()+0x1cc>
    d6e0:	ea000000 	b	d6e8 <CMachineInfo::CMachineInfo()+0xc8>
    d6e4:	e7902203 	ldr	r2, [r0, r3, lsl #4]
    d6e8:	e1510002 	cmp	r1, r2
    d6ec:	0a000012 	beq	d73c <CMachineInfo::CMachineInfo()+0x11c>
    d6f0:	e2833001 	add	r3, r3, #1
    d6f4:	e3530011 	cmp	r3, #17
    d6f8:	1afffff9 	bne	d6e4 <CMachineInfo::CMachineInfo()+0xc4>
    d6fc:	e28d000c 	add	r0, sp, #12
    d700:	ebfff501 	bl	ab0c <CBcmPropertyTags::~CBcmPropertyTags()>
    d704:	eaffffe1 	b	d690 <CMachineInfo::CMachineInfo()+0x70>
    d708:	e1a00221 	lsr	r0, r1, #4
    d70c:	e1a03005 	mov	r3, r5
    d710:	e59f20d8 	ldr	r2, [pc, #216]	; d7f0 <CMachineInfo::CMachineInfo()+0x1d0>
    d714:	e6ef0070 	uxtb	r0, r0
    d718:	ea000000 	b	d720 <CMachineInfo::CMachineInfo()+0x100>
    d71c:	e512500c 	ldr	r5, [r2, #-12]
    d720:	e1550000 	cmp	r5, r0
    d724:	0a000011 	beq	d770 <CMachineInfo::CMachineInfo()+0x150>
    d728:	e2833001 	add	r3, r3, #1
    d72c:	e353000c 	cmp	r3, #12
    d730:	e282200c 	add	r2, r2, #12
    d734:	1afffff8 	bne	d71c <CMachineInfo::CMachineInfo()+0xfc>
    d738:	eaffffef 	b	d6fc <CMachineInfo::CMachineInfo()+0xdc>
    d73c:	e3a00001 	mov	r0, #1
    d740:	e3a01000 	mov	r1, #0
    d744:	e59f20a8 	ldr	r2, [pc, #168]	; d7f4 <CMachineInfo::CMachineInfo()+0x1d4>
    d748:	e5840008 	str	r0, [r4, #8]
    d74c:	e0823203 	add	r3, r2, r3, lsl #4
    d750:	e5d30094 	ldrb	r0, [r3, #148]	; 0x94
    d754:	e5932098 	ldr	r2, [r3, #152]	; 0x98
    d758:	e593309c 	ldr	r3, [r3, #156]	; 0x9c
    d75c:	e5c40004 	strb	r0, [r4, #4]
    d760:	e584200c 	str	r2, [r4, #12]
    d764:	e5843014 	str	r3, [r4, #20]
    d768:	e5c41010 	strb	r1, [r4, #16]
    d76c:	eaffffe2 	b	d6fc <CMachineInfo::CMachineInfo()+0xdc>
    d770:	e3a0cc01 	mov	ip, #256	; 0x100
    d774:	e59f2078 	ldr	r2, [pc, #120]	; d7f4 <CMachineInfo::CMachineInfo()+0x1d4>
    d778:	e0833083 	add	r3, r3, r3, lsl #1
    d77c:	e0823103 	add	r3, r2, r3, lsl #2
    d780:	e1a00621 	lsr	r0, r1, #12
    d784:	e1a02a21 	lsr	r2, r1, #20
    d788:	e2022007 	and	r2, r2, #7
    d78c:	e200000f 	and	r0, r0, #15
    d790:	e5d3e004 	ldrb	lr, [r3, #4]
    d794:	e3500002 	cmp	r0, #2
    d798:	e5935008 	ldr	r5, [r3, #8]
    d79c:	e201300f 	and	r3, r1, #15
    d7a0:	e1a0121c 	lsl	r1, ip, r2
    d7a4:	e5841014 	str	r1, [r4, #20]
    d7a8:	83a01003 	movhi	r1, #3
    d7ac:	e5c40010 	strb	r0, [r4, #16]
    d7b0:	85c41010 	strbhi	r1, [r4, #16]
    d7b4:	e3520000 	cmp	r2, #0
    d7b8:	035e0003 	cmpeq	lr, #3
    d7bc:	e2833001 	add	r3, r3, #1
    d7c0:	e5c4e004 	strb	lr, [r4, #4]
    d7c4:	e5845008 	str	r5, [r4, #8]
    d7c8:	e584300c 	str	r3, [r4, #12]
    d7cc:	1affffca 	bne	d6fc <CMachineInfo::CMachineInfo()+0xdc>
    d7d0:	e3530001 	cmp	r3, #1
    d7d4:	13a03002 	movne	r3, #2
    d7d8:	03a03001 	moveq	r3, #1
    d7dc:	e5c43004 	strb	r3, [r4, #4]
    d7e0:	eaffffc5 	b	d6fc <CMachineInfo::CMachineInfo()+0xdc>
    d7e4:	00016658 	.word	0x00016658
    d7e8:	00010002 	.word	0x00010002
    d7ec:	00014d60 	.word	0x00014d60
    d7f0:	00014cdc 	.word	0x00014cdc
    d7f4:	00014cd0 	.word	0x00014cd0

0000d7f8 <CMachineInfo::~CMachineInfo()>:
    d7f8:	e3a0200e 	mov	r2, #14
    d7fc:	e59f3014 	ldr	r3, [pc, #20]	; d818 <CMachineInfo::~CMachineInfo()+0x20>
    d800:	e5c02004 	strb	r2, [r0, #4]
    d804:	e5932000 	ldr	r2, [r3]
    d808:	e1500002 	cmp	r0, r2
    d80c:	03a02000 	moveq	r2, #0
    d810:	05832000 	streq	r2, [r3]
    d814:	e12fff1e 	bx	lr
    d818:	00016658 	.word	0x00016658

0000d81c <CMachineInfo::GetMachineModel() const>:
    d81c:	e5d00004 	ldrb	r0, [r0, #4]
    d820:	e12fff1e 	bx	lr

0000d824 <CMachineInfo::GetMachineName() const>:
    d824:	e5d02004 	ldrb	r2, [r0, #4]
    d828:	e59f3008 	ldr	r3, [pc, #8]	; d838 <CMachineInfo::GetMachineName() const+0x14>
    d82c:	e0833102 	add	r3, r3, r2, lsl #2
    d830:	e59301a0 	ldr	r0, [r3, #416]	; 0x1a0
    d834:	e12fff1e 	bx	lr
    d838:	00014cd0 	.word	0x00014cd0

0000d83c <CMachineInfo::GetModelMajor() const>:
    d83c:	e5900008 	ldr	r0, [r0, #8]
    d840:	e12fff1e 	bx	lr

0000d844 <CMachineInfo::GetModelRevision() const>:
    d844:	e590000c 	ldr	r0, [r0, #12]
    d848:	e12fff1e 	bx	lr

0000d84c <CMachineInfo::GetSoCType() const>:
    d84c:	e5d00010 	ldrb	r0, [r0, #16]
    d850:	e12fff1e 	bx	lr

0000d854 <CMachineInfo::GetRAMSize() const>:
    d854:	e5900014 	ldr	r0, [r0, #20]
    d858:	e12fff1e 	bx	lr

0000d85c <CMachineInfo::GetSoCName() const>:
    d85c:	e5d02010 	ldrb	r2, [r0, #16]
    d860:	e59f3008 	ldr	r3, [pc, #8]	; d870 <CMachineInfo::GetSoCName() const+0x14>
    d864:	e0833102 	add	r3, r3, r2, lsl #2
    d868:	e59301dc 	ldr	r0, [r3, #476]	; 0x1dc
    d86c:	e12fff1e 	bx	lr
    d870:	00014cd0 	.word	0x00014cd0

0000d874 <CMachineInfo::GetRevisionRaw() const>:
    d874:	e5900000 	ldr	r0, [r0]
    d878:	e12fff1e 	bx	lr

0000d87c <CMachineInfo::GetClockRate(unsigned int) const>:
    d87c:	e92d4070 	push	{r4, r5, r6, lr}
    d880:	e24dd020 	sub	sp, sp, #32
    d884:	e1a06000 	mov	r6, r0
    d888:	e28d0008 	add	r0, sp, #8
    d88c:	e1a05001 	mov	r5, r1
    d890:	ebfff497 	bl	aaf4 <CBcmPropertyTags::CBcmPropertyTags()>
    d894:	e3a03004 	mov	r3, #4
    d898:	e28d0008 	add	r0, sp, #8
    d89c:	e58d3000 	str	r3, [sp]
    d8a0:	e28d200c 	add	r2, sp, #12
    d8a4:	e3a03014 	mov	r3, #20
    d8a8:	e59f1078 	ldr	r1, [pc, #120]	; d928 <CMachineInfo::GetClockRate(unsigned int) const+0xac>
    d8ac:	e58d5018 	str	r5, [sp, #24]
    d8b0:	ebfff4e6 	bl	ac50 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    d8b4:	e2504000 	subs	r4, r0, #0
    d8b8:	1a00000e 	bne	d8f8 <CMachineInfo::GetClockRate(unsigned int) const+0x7c>
    d8bc:	e3550002 	cmp	r5, #2
    d8c0:	0a00000e 	beq	d900 <CMachineInfo::GetClockRate(unsigned int) const+0x84>
    d8c4:	e3550004 	cmp	r5, #4
    d8c8:	0a000010 	beq	d910 <CMachineInfo::GetClockRate(unsigned int) const+0x94>
    d8cc:	e3550001 	cmp	r5, #1
    d8d0:	0a00000c 	beq	d908 <CMachineInfo::GetClockRate(unsigned int) const+0x8c>
    d8d4:	e59f2050 	ldr	r2, [pc, #80]	; d92c <CMachineInfo::GetClockRate(unsigned int) const+0xb0>
    d8d8:	e59f1050 	ldr	r1, [pc, #80]	; d930 <CMachineInfo::GetClockRate(unsigned int) const+0xb4>
    d8dc:	e59f0050 	ldr	r0, [pc, #80]	; d934 <CMachineInfo::GetClockRate(unsigned int) const+0xb8>
    d8e0:	ebfff45f 	bl	aa64 <assertion_failed>
    d8e4:	e28d0008 	add	r0, sp, #8
    d8e8:	ebfff487 	bl	ab0c <CBcmPropertyTags::~CBcmPropertyTags()>
    d8ec:	e1a00004 	mov	r0, r4
    d8f0:	e28dd020 	add	sp, sp, #32
    d8f4:	e8bd8070 	pop	{r4, r5, r6, pc}
    d8f8:	e59d401c 	ldr	r4, [sp, #28]
    d8fc:	eafffff8 	b	d8e4 <CMachineInfo::GetClockRate(unsigned int) const+0x68>
    d900:	e59f4030 	ldr	r4, [pc, #48]	; d938 <CMachineInfo::GetClockRate(unsigned int) const+0xbc>
    d904:	eafffff6 	b	d8e4 <CMachineInfo::GetClockRate(unsigned int) const+0x68>
    d908:	e59f402c 	ldr	r4, [pc, #44]	; d93c <CMachineInfo::GetClockRate(unsigned int) const+0xc0>
    d90c:	eafffff4 	b	d8e4 <CMachineInfo::GetClockRate(unsigned int) const+0x68>
    d910:	e5962008 	ldr	r2, [r6, #8]
    d914:	e59f3024 	ldr	r3, [pc, #36]	; d940 <CMachineInfo::GetClockRate(unsigned int) const+0xc4>
    d918:	e3520002 	cmp	r2, #2
    d91c:	e59f4020 	ldr	r4, [pc, #32]	; d944 <CMachineInfo::GetClockRate(unsigned int) const+0xc8>
    d920:	81a04003 	movhi	r4, r3
    d924:	eaffffee 	b	d8e4 <CMachineInfo::GetClockRate(unsigned int) const+0x68>
    d928:	00030002 	.word	0x00030002
    d92c:	00000115 	.word	0x00000115
    d930:	00014ebc 	.word	0x00014ebc
    d934:	00014bdc 	.word	0x00014bdc
    d938:	02dc6c00 	.word	0x02dc6c00
    d93c:	05f5e100 	.word	0x05f5e100
    d940:	11e1a300 	.word	0x11e1a300
    d944:	0ee6b280 	.word	0x0ee6b280

0000d948 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>:
    d948:	e3510036 	cmp	r1, #54	; 0x36
    d94c:	0a00000d 	beq	d988 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x40>
    d950:	e3510037 	cmp	r1, #55	; 0x37
    d954:	1a000004 	bne	d96c <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x24>
    d958:	e5d00004 	ldrb	r0, [r0, #4]
    d95c:	e3500003 	cmp	r0, #3
    d960:	c3a00028 	movgt	r0, #40	; 0x28
    d964:	d3a0002d 	movle	r0, #45	; 0x2d
    d968:	e12fff1e 	bx	lr
    d96c:	e92d4010 	push	{r4, lr}
    d970:	e59f2038 	ldr	r2, [pc, #56]	; d9b0 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x68>
    d974:	e59f1038 	ldr	r1, [pc, #56]	; d9b4 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x6c>
    d978:	e59f0038 	ldr	r0, [pc, #56]	; d9b8 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x70>
    d97c:	ebfff438 	bl	aa64 <assertion_failed>
    d980:	e3a00000 	mov	r0, #0
    d984:	e8bd8010 	pop	{r4, pc}
    d988:	e5d03004 	ldrb	r3, [r0, #4]
    d98c:	e3530003 	cmp	r3, #3
    d990:	ca000001 	bgt	d99c <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x54>
    d994:	e3a00028 	mov	r0, #40	; 0x28
    d998:	e12fff1e 	bx	lr
    d99c:	e5900008 	ldr	r0, [r0, #8]
    d9a0:	e3500002 	cmp	r0, #2
    d9a4:	93a0002d 	movls	r0, #45	; 0x2d
    d9a8:	83a00029 	movhi	r0, #41	; 0x29
    d9ac:	e12fff1e 	bx	lr
    d9b0:	0000014e 	.word	0x0000014e
    d9b4:	00014ebc 	.word	0x00014ebc
    d9b8:	00014bdc 	.word	0x00014bdc

0000d9bc <CMachineInfo::GetDevice(TDeviceId) const>:
    d9bc:	e3510000 	cmp	r1, #0
    d9c0:	1a000003 	bne	d9d4 <CMachineInfo::GetDevice(TDeviceId) const+0x18>
    d9c4:	e5d00004 	ldrb	r0, [r0, #4]
    d9c8:	e2500001 	subs	r0, r0, #1
    d9cc:	13a00001 	movne	r0, #1
    d9d0:	e12fff1e 	bx	lr
    d9d4:	e92d4010 	push	{r4, lr}
    d9d8:	e59f2010 	ldr	r2, [pc, #16]	; d9f0 <CMachineInfo::GetDevice(TDeviceId) const+0x34>
    d9dc:	e59f1010 	ldr	r1, [pc, #16]	; d9f4 <CMachineInfo::GetDevice(TDeviceId) const+0x38>
    d9e0:	e59f0010 	ldr	r0, [pc, #16]	; d9f8 <CMachineInfo::GetDevice(TDeviceId) const+0x3c>
    d9e4:	ebfff41e 	bl	aa64 <assertion_failed>
    d9e8:	e3a00000 	mov	r0, #0
    d9ec:	e8bd8010 	pop	{r4, pc}
    d9f0:	00000167 	.word	0x00000167
    d9f4:	00014ebc 	.word	0x00014ebc
    d9f8:	00014bdc 	.word	0x00014bdc

0000d9fc <CMachineInfo::Get()>:
    d9fc:	e92d4010 	push	{r4, lr}
    da00:	e59f4020 	ldr	r4, [pc, #32]	; da28 <CMachineInfo::Get()+0x2c>
    da04:	e5940000 	ldr	r0, [r4]
    da08:	e3500000 	cmp	r0, #0
    da0c:	18bd8010 	popne	{r4, pc}
    da10:	e3a02e17 	mov	r2, #368	; 0x170
    da14:	e59f1010 	ldr	r1, [pc, #16]	; da2c <CMachineInfo::Get()+0x30>
    da18:	e59f0010 	ldr	r0, [pc, #16]	; da30 <CMachineInfo::Get()+0x34>
    da1c:	ebfff410 	bl	aa64 <assertion_failed>
    da20:	e5940000 	ldr	r0, [r4]
    da24:	e8bd8010 	pop	{r4, pc}
    da28:	00016658 	.word	0x00016658
    da2c:	00014ebc 	.word	0x00014ebc
    da30:	00014c0c 	.word	0x00014c0c

0000da34 <CScreenDevice::~CScreenDevice()>:
    da34:	e5d0200c 	ldrb	r2, [r0, #12]
    da38:	e59f3068 	ldr	r3, [pc, #104]	; daa8 <CScreenDevice::~CScreenDevice()+0x74>
    da3c:	e3520000 	cmp	r2, #0
    da40:	e92d4070 	push	{r4, r5, r6, lr}
    da44:	e1a04000 	mov	r4, r0
    da48:	e5803000 	str	r3, [r0]
    da4c:	0a000003 	beq	da60 <CScreenDevice::~CScreenDevice()+0x2c>
    da50:	e5900018 	ldr	r0, [r0, #24]
    da54:	e3500000 	cmp	r0, #0
    da58:	0a000000 	beq	da60 <CScreenDevice::~CScreenDevice()+0x2c>
    da5c:	eb00134f 	bl	127a0 <operator delete[](void*)>
    da60:	e3a03000 	mov	r3, #0
    da64:	e5945010 	ldr	r5, [r4, #16]
    da68:	e5843018 	str	r3, [r4, #24]
    da6c:	e1550003 	cmp	r5, r3
    da70:	0a000004 	beq	da88 <CScreenDevice::~CScreenDevice()+0x54>
    da74:	e1a00005 	mov	r0, r5
    da78:	eb001550 	bl	12fc0 <CBcmFrameBuffer::~CBcmFrameBuffer()>
    da7c:	e1a00005 	mov	r0, r5
    da80:	e3a01094 	mov	r1, #148	; 0x94
    da84:	eb001346 	bl	127a4 <operator delete(void*, unsigned int)>
    da88:	e3a03000 	mov	r3, #0
    da8c:	e2840014 	add	r0, r4, #20
    da90:	e5843010 	str	r3, [r4, #16]
    da94:	eb001651 	bl	133e0 <CCharGenerator::~CCharGenerator()>
    da98:	e1a00004 	mov	r0, r4
    da9c:	ebfff522 	bl	af2c <CDevice::~CDevice()>
    daa0:	e1a00004 	mov	r0, r4
    daa4:	e8bd8070 	pop	{r4, r5, r6, pc}
    daa8:	00015010 	.word	0x00015010

0000daac <CScreenDevice::~CScreenDevice()>:
    daac:	e92d4010 	push	{r4, lr}
    dab0:	e1a04000 	mov	r4, r0
    dab4:	ebffffde 	bl	da34 <CScreenDevice::~CScreenDevice()>
    dab8:	e1a00004 	mov	r0, r4
    dabc:	e3a0105c 	mov	r1, #92	; 0x5c
    dac0:	eb001337 	bl	127a4 <operator delete(void*, unsigned int)>
    dac4:	e1a00004 	mov	r0, r4
    dac8:	e8bd8010 	pop	{r4, pc}

0000dacc <CScreenDevice::InvertCursor() [clone .part.6]>:
    dacc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    dad0:	e2806014 	add	r6, r0, #20
    dad4:	e1a05000 	mov	r5, r0
    dad8:	e1a00006 	mov	r0, r6
    dadc:	eb001644 	bl	133f4 <CCharGenerator::GetUnderline() const>
    dae0:	e3a08000 	mov	r8, #0
    dae4:	e1a07000 	mov	r7, r0
    dae8:	e1a00006 	mov	r0, r6
    daec:	eb00163e 	bl	133ec <CCharGenerator::GetCharHeight() const>
    daf0:	e1500007 	cmp	r0, r7
    daf4:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
    daf8:	e3a04000 	mov	r4, #0
    dafc:	ea000013 	b	db50 <CScreenDevice::InvertCursor() [clone .part.6]+0x84>
    db00:	e595303c 	ldr	r3, [r5, #60]	; 0x3c
    db04:	e5952024 	ldr	r2, [r5, #36]	; 0x24
    db08:	e0843003 	add	r3, r4, r3
    db0c:	e1530002 	cmp	r3, r2
    db10:	2a00000d 	bcs	db4c <CScreenDevice::InvertCursor() [clone .part.6]+0x80>
    db14:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    db18:	e5951028 	ldr	r1, [r5, #40]	; 0x28
    db1c:	e0872002 	add	r2, r7, r2
    db20:	e1520001 	cmp	r2, r1
    db24:	2a000008 	bcs	db4c <CScreenDevice::InvertCursor() [clone .part.6]+0x80>
    db28:	e5950020 	ldr	r0, [r5, #32]
    db2c:	e5951018 	ldr	r1, [r5, #24]
    db30:	e0233290 	mla	r3, r0, r2, r3
    db34:	e1a03083 	lsl	r3, r3, #1
    db38:	e19120b3 	ldrh	r2, [r1, r3]
    db3c:	e3520000 	cmp	r2, #0
    db40:	01d524b6 	ldrheq	r2, [r5, #70]	; 0x46
    db44:	118180b3 	strhne	r8, [r1, r3]
    db48:	018120b3 	strheq	r2, [r1, r3]
    db4c:	e2844001 	add	r4, r4, #1
    db50:	e1a00006 	mov	r0, r6
    db54:	eb001622 	bl	133e4 <CCharGenerator::GetCharWidth() const>
    db58:	e1500004 	cmp	r0, r4
    db5c:	8affffe7 	bhi	db00 <CScreenDevice::InvertCursor() [clone .part.6]+0x34>
    db60:	e2877001 	add	r7, r7, #1
    db64:	eaffffdf 	b	dae8 <CScreenDevice::InvertCursor() [clone .part.6]+0x1c>

0000db68 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool)>:
    db68:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    db6c:	e1a04000 	mov	r4, r0
    db70:	e3a05000 	mov	r5, #0
    db74:	e1a07002 	mov	r7, r2
    db78:	e1a06003 	mov	r6, r3
    db7c:	e1a08001 	mov	r8, r1
    db80:	ebfff4f5 	bl	af5c <CDevice::CDevice()>
    db84:	e59f0050 	ldr	r0, [pc, #80]	; dbdc <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool)+0x74>
    db88:	e5848004 	str	r8, [r4, #4]
    db8c:	e5840000 	str	r0, [r4]
    db90:	e5847008 	str	r7, [r4, #8]
    db94:	e5c4600c 	strb	r6, [r4, #12]
    db98:	e5845010 	str	r5, [r4, #16]
    db9c:	e2840014 	add	r0, r4, #20
    dba0:	eb00160b 	bl	133d4 <CCharGenerator::CCharGenerator()>
    dba4:	e3a03001 	mov	r3, #1
    dba8:	e3e02020 	mvn	r2, #32
    dbac:	e5845018 	str	r5, [r4, #24]
    dbb0:	e5845030 	str	r5, [r4, #48]	; 0x30
    dbb4:	e5845034 	str	r5, [r4, #52]	; 0x34
    dbb8:	e584503c 	str	r5, [r4, #60]	; 0x3c
    dbbc:	e5845040 	str	r5, [r4, #64]	; 0x40
    dbc0:	e5c45048 	strb	r5, [r4, #72]	; 0x48
    dbc4:	e5c45054 	strb	r5, [r4, #84]	; 0x54
    dbc8:	e1c424b6 	strh	r2, [r4, #70]	; 0x46
    dbcc:	e5c43044 	strb	r3, [r4, #68]	; 0x44
    dbd0:	e5843058 	str	r3, [r4, #88]	; 0x58
    dbd4:	e1a00004 	mov	r0, r4
    dbd8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    dbdc:	00015010 	.word	0x00015010

0000dbe0 <CScreenDevice::GetWidth() const>:
    dbe0:	e5900024 	ldr	r0, [r0, #36]	; 0x24
    dbe4:	e12fff1e 	bx	lr

0000dbe8 <CScreenDevice::GetHeight() const>:
    dbe8:	e5900028 	ldr	r0, [r0, #40]	; 0x28
    dbec:	e12fff1e 	bx	lr

0000dbf0 <CScreenDevice::GetColumns() const>:
    dbf0:	e92d4010 	push	{r4, lr}
    dbf4:	e2800014 	add	r0, r0, #20
    dbf8:	e5904010 	ldr	r4, [r0, #16]
    dbfc:	eb0015f8 	bl	133e4 <CCharGenerator::GetCharWidth() const>
    dc00:	e1a01000 	mov	r1, r0
    dc04:	e1a00004 	mov	r0, r4
    dc08:	ebfff2be 	bl	a708 <__udivsi3>
    dc0c:	e8bd8010 	pop	{r4, pc}

0000dc10 <CScreenDevice::GetRows() const>:
    dc10:	e92d4010 	push	{r4, lr}
    dc14:	e2800014 	add	r0, r0, #20
    dc18:	e5904018 	ldr	r4, [r0, #24]
    dc1c:	eb0015f2 	bl	133ec <CCharGenerator::GetCharHeight() const>
    dc20:	e1a01000 	mov	r1, r0
    dc24:	e1a00004 	mov	r0, r4
    dc28:	ebfff2b6 	bl	a708 <__udivsi3>
    dc2c:	e8bd8010 	pop	{r4, pc}

0000dc30 <CScreenDevice::GetStatus()>:
    dc30:	e591c018 	ldr	ip, [r1, #24]
    dc34:	e591201c 	ldr	r2, [r1, #28]
    dc38:	e92d4070 	push	{r4, r5, r6, lr}
    dc3c:	e580c000 	str	ip, [r0]
    dc40:	e5915030 	ldr	r5, [r1, #48]	; 0x30
    dc44:	e5914034 	ldr	r4, [r1, #52]	; 0x34
    dc48:	e591e038 	ldr	lr, [r1, #56]	; 0x38
    dc4c:	e591c03c 	ldr	ip, [r1, #60]	; 0x3c
    dc50:	e5802004 	str	r2, [r0, #4]
    dc54:	e5912040 	ldr	r2, [r1, #64]	; 0x40
    dc58:	e5805008 	str	r5, [r0, #8]
    dc5c:	e5d16044 	ldrb	r6, [r1, #68]	; 0x44
    dc60:	e580400c 	str	r4, [r0, #12]
    dc64:	e1d154b6 	ldrh	r5, [r1, #70]	; 0x46
    dc68:	e580e010 	str	lr, [r0, #16]
    dc6c:	e5d14048 	ldrb	r4, [r1, #72]	; 0x48
    dc70:	e580c014 	str	ip, [r0, #20]
    dc74:	e591e04c 	ldr	lr, [r1, #76]	; 0x4c
    dc78:	e5802018 	str	r2, [r0, #24]
    dc7c:	e591c050 	ldr	ip, [r1, #80]	; 0x50
    dc80:	e5d12054 	ldrb	r2, [r1, #84]	; 0x54
    dc84:	e5c0601c 	strb	r6, [r0, #28]
    dc88:	e1c051be 	strh	r5, [r0, #30]
    dc8c:	e5c04020 	strb	r4, [r0, #32]
    dc90:	e580e024 	str	lr, [r0, #36]	; 0x24
    dc94:	e580c028 	str	ip, [r0, #40]	; 0x28
    dc98:	e5c0202c 	strb	r2, [r0, #44]	; 0x2c
    dc9c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000dca0 <CScreenDevice::SetStatus(TScreenStatus const&)>:
    dca0:	e590201c 	ldr	r2, [r0, #28]
    dca4:	e5913004 	ldr	r3, [r1, #4]
    dca8:	e1520003 	cmp	r2, r3
    dcac:	0a000001 	beq	dcb8 <CScreenDevice::SetStatus(TScreenStatus const&)+0x18>
    dcb0:	e3a00000 	mov	r0, #0
    dcb4:	e12fff1e 	bx	lr
    dcb8:	e590c020 	ldr	ip, [r0, #32]
    dcbc:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    dcc0:	e15c0003 	cmp	ip, r3
    dcc4:	1afffff9 	bne	dcb0 <CScreenDevice::SetStatus(TScreenStatus const&)+0x10>
    dcc8:	e92d4070 	push	{r4, r5, r6, lr}
    dccc:	e1a04000 	mov	r4, r0
    dcd0:	e5900058 	ldr	r0, [r0, #88]	; 0x58
    dcd4:	e1a05001 	mov	r5, r1
    dcd8:	e3500000 	cmp	r0, #0
    dcdc:	1a000023 	bne	dd70 <CScreenDevice::SetStatus(TScreenStatus const&)+0xd0>
    dce0:	e5d43054 	ldrb	r3, [r4, #84]	; 0x54
    dce4:	e3530000 	cmp	r3, #0
    dce8:	1a000002 	bne	dcf8 <CScreenDevice::SetStatus(TScreenStatus const&)+0x58>
    dcec:	e5d1302c 	ldrb	r3, [r1, #44]	; 0x2c
    dcf0:	e3530000 	cmp	r3, #0
    dcf4:	0a000001 	beq	dd00 <CScreenDevice::SetStatus(TScreenStatus const&)+0x60>
    dcf8:	e3a00000 	mov	r0, #0
    dcfc:	e8bd8070 	pop	{r4, r5, r6, pc}
    dd00:	e5951000 	ldr	r1, [r5]
    dd04:	e5940018 	ldr	r0, [r4, #24]
    dd08:	eb001055 	bl	11e64 <memcpy>
    dd0c:	e5940058 	ldr	r0, [r4, #88]	; 0x58
    dd10:	e2851008 	add	r1, r5, #8
    dd14:	e891004e 	ldm	r1, {r1, r2, r3, r6}
    dd18:	e595e018 	ldr	lr, [r5, #24]
    dd1c:	e5d5c01c 	ldrb	ip, [r5, #28]
    dd20:	e3500000 	cmp	r0, #0
    dd24:	e5841030 	str	r1, [r4, #48]	; 0x30
    dd28:	e1d501be 	ldrh	r0, [r5, #30]
    dd2c:	e5d51020 	ldrb	r1, [r5, #32]
    dd30:	e5842034 	str	r2, [r4, #52]	; 0x34
    dd34:	e5843038 	str	r3, [r4, #56]	; 0x38
    dd38:	e5952024 	ldr	r2, [r5, #36]	; 0x24
    dd3c:	e5953028 	ldr	r3, [r5, #40]	; 0x28
    dd40:	e584603c 	str	r6, [r4, #60]	; 0x3c
    dd44:	e584e040 	str	lr, [r4, #64]	; 0x40
    dd48:	e5c4c044 	strb	ip, [r4, #68]	; 0x44
    dd4c:	e1c404b6 	strh	r0, [r4, #70]	; 0x46
    dd50:	e5c41048 	strb	r1, [r4, #72]	; 0x48
    dd54:	e584204c 	str	r2, [r4, #76]	; 0x4c
    dd58:	e5843050 	str	r3, [r4, #80]	; 0x50
    dd5c:	1a000010 	bne	dda4 <CScreenDevice::SetStatus(TScreenStatus const&)+0x104>
    dd60:	e3a03000 	mov	r3, #0
    dd64:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    dd68:	e3a00001 	mov	r0, #1
    dd6c:	e8bd8070 	pop	{r4, r5, r6, pc}
    dd70:	eb00122d 	bl	1262c <EnterCritical>
    dd74:	e5d43054 	ldrb	r3, [r4, #84]	; 0x54
    dd78:	e3530000 	cmp	r3, #0
    dd7c:	1a000003 	bne	dd90 <CScreenDevice::SetStatus(TScreenStatus const&)+0xf0>
    dd80:	e5d5302c 	ldrb	r3, [r5, #44]	; 0x2c
    dd84:	e3530000 	cmp	r3, #0
    dd88:	0594201c 	ldreq	r2, [r4, #28]
    dd8c:	0affffdb 	beq	dd00 <CScreenDevice::SetStatus(TScreenStatus const&)+0x60>
    dd90:	e5943058 	ldr	r3, [r4, #88]	; 0x58
    dd94:	e3530000 	cmp	r3, #0
    dd98:	0affffd6 	beq	dcf8 <CScreenDevice::SetStatus(TScreenStatus const&)+0x58>
    dd9c:	eb00124f 	bl	126e0 <LeaveCritical>
    dda0:	eaffffd4 	b	dcf8 <CScreenDevice::SetStatus(TScreenStatus const&)+0x58>
    dda4:	eb00124d 	bl	126e0 <LeaveCritical>
    dda8:	eaffffec 	b	dd60 <CScreenDevice::SetStatus(TScreenStatus const&)+0xc0>

0000ddac <CScreenDevice::CarriageReturn()>:
    ddac:	e3a03000 	mov	r3, #0
    ddb0:	e580303c 	str	r3, [r0, #60]	; 0x3c
    ddb4:	e12fff1e 	bx	lr

0000ddb8 <CScreenDevice::CursorHome()>:
    ddb8:	e3a02000 	mov	r2, #0
    ddbc:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    ddc0:	e580203c 	str	r2, [r0, #60]	; 0x3c
    ddc4:	e5803040 	str	r3, [r0, #64]	; 0x40
    ddc8:	e12fff1e 	bx	lr

0000ddcc <CScreenDevice::CursorLeft()>:
    ddcc:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    ddd0:	e92d4070 	push	{r4, r5, r6, lr}
    ddd4:	e3530000 	cmp	r3, #0
    ddd8:	e1a04000 	mov	r4, r0
    dddc:	1a00000f 	bne	de20 <CScreenDevice::CursorLeft()+0x54>
    dde0:	e5902040 	ldr	r2, [r0, #64]	; 0x40
    dde4:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    dde8:	e1520003 	cmp	r2, r3
    ddec:	98bd8070 	popls	{r4, r5, r6, pc}
    ddf0:	e2806014 	add	r6, r0, #20
    ddf4:	e1a00006 	mov	r0, r6
    ddf8:	e5945024 	ldr	r5, [r4, #36]	; 0x24
    ddfc:	eb001578 	bl	133e4 <CCharGenerator::GetCharWidth() const>
    de00:	e0450000 	sub	r0, r5, r0
    de04:	e584003c 	str	r0, [r4, #60]	; 0x3c
    de08:	e1a00006 	mov	r0, r6
    de0c:	eb001576 	bl	133ec <CCharGenerator::GetCharHeight() const>
    de10:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    de14:	e0430000 	sub	r0, r3, r0
    de18:	e5840040 	str	r0, [r4, #64]	; 0x40
    de1c:	e8bd8070 	pop	{r4, r5, r6, pc}
    de20:	e2800014 	add	r0, r0, #20
    de24:	eb00156e 	bl	133e4 <CCharGenerator::GetCharWidth() const>
    de28:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    de2c:	e0430000 	sub	r0, r3, r0
    de30:	e584003c 	str	r0, [r4, #60]	; 0x3c
    de34:	e8bd8070 	pop	{r4, r5, r6, pc}

0000de38 <CScreenDevice::CursorMove(unsigned int, unsigned int)>:
    de38:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    de3c:	e2806014 	add	r6, r0, #20
    de40:	e1a04002 	mov	r4, r2
    de44:	e1a05000 	mov	r5, r0
    de48:	e1a00006 	mov	r0, r6
    de4c:	e1a07001 	mov	r7, r1
    de50:	eb001563 	bl	133e4 <CCharGenerator::GetCharWidth() const>
    de54:	e2444001 	sub	r4, r4, #1
    de58:	e0040490 	mul	r4, r0, r4
    de5c:	e1a00006 	mov	r0, r6
    de60:	eb001561 	bl	133ec <CCharGenerator::GetCharHeight() const>
    de64:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    de68:	e1540003 	cmp	r4, r3
    de6c:	28bd81f0 	popcs	{r4, r5, r6, r7, r8, pc}
    de70:	e2477001 	sub	r7, r7, #1
    de74:	e0000790 	mul	r0, r0, r7
    de78:	e5953034 	ldr	r3, [r5, #52]	; 0x34
    de7c:	e1500003 	cmp	r0, r3
    de80:	38bd81f0 	popcc	{r4, r5, r6, r7, r8, pc}
    de84:	e5953038 	ldr	r3, [r5, #56]	; 0x38
    de88:	e1500003 	cmp	r0, r3
    de8c:	3585403c 	strcc	r4, [r5, #60]	; 0x3c
    de90:	35850040 	strcc	r0, [r5, #64]	; 0x40
    de94:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000de98 <CScreenDevice::CursorUp()>:
    de98:	e5902040 	ldr	r2, [r0, #64]	; 0x40
    de9c:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    dea0:	e1520003 	cmp	r2, r3
    dea4:	912fff1e 	bxls	lr
    dea8:	e92d4010 	push	{r4, lr}
    deac:	e1a04000 	mov	r4, r0
    deb0:	e2800014 	add	r0, r0, #20
    deb4:	eb00154c 	bl	133ec <CCharGenerator::GetCharHeight() const>
    deb8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    debc:	e0430000 	sub	r0, r3, r0
    dec0:	e5840040 	str	r0, [r4, #64]	; 0x40
    dec4:	e8bd8010 	pop	{r4, pc}

0000dec8 <CScreenDevice::DeleteChars(unsigned int)>:
    dec8:	e12fff1e 	bx	lr

0000decc <CScreenDevice::DeleteLines(unsigned int)>:
    decc:	e12fff1e 	bx	lr

0000ded0 <CScreenDevice::InsertLines(unsigned int)>:
    ded0:	e12fff1e 	bx	lr

0000ded4 <CScreenDevice::InsertMode(bool)>:
    ded4:	e5c01048 	strb	r1, [r0, #72]	; 0x48
    ded8:	e12fff1e 	bx	lr

0000dedc <CScreenDevice::ReverseScroll()>:
    dedc:	e12fff1e 	bx	lr

0000dee0 <CScreenDevice::SetCursorMode(bool)>:
    dee0:	e5c01044 	strb	r1, [r0, #68]	; 0x44
    dee4:	e12fff1e 	bx	lr

0000dee8 <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>:
    dee8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    deec:	e2807014 	add	r7, r0, #20
    def0:	e1a06000 	mov	r6, r0
    def4:	e1a04001 	mov	r4, r1
    def8:	e1a00007 	mov	r0, r7
    defc:	e1a05002 	mov	r5, r2
    df00:	eb001539 	bl	133ec <CCharGenerator::GetCharHeight() const>
    df04:	e2444001 	sub	r4, r4, #1
    df08:	e0040490 	mul	r4, r0, r4
    df0c:	e1a00007 	mov	r0, r7
    df10:	eb001535 	bl	133ec <CCharGenerator::GetCharHeight() const>
    df14:	e0000095 	mul	r0, r5, r0
    df18:	e596202c 	ldr	r2, [r6, #44]	; 0x2c
    df1c:	e3500000 	cmp	r0, #0
    df20:	11540002 	cmpne	r4, r2
    df24:	33a03001 	movcc	r3, #1
    df28:	23a03000 	movcs	r3, #0
    df2c:	e1500002 	cmp	r0, r2
    df30:	83a03000 	movhi	r3, #0
    df34:	92033001 	andls	r3, r3, #1
    df38:	e1540000 	cmp	r4, r0
    df3c:	23a03000 	movcs	r3, #0
    df40:	32033001 	andcc	r3, r3, #1
    df44:	e3530000 	cmp	r3, #0
    df48:	e3a03000 	mov	r3, #0
    df4c:	05964034 	ldreq	r4, [r6, #52]	; 0x34
    df50:	15864034 	strne	r4, [r6, #52]	; 0x34
    df54:	15860038 	strne	r0, [r6, #56]	; 0x38
    df58:	e5864040 	str	r4, [r6, #64]	; 0x40
    df5c:	e586303c 	str	r3, [r6, #60]	; 0x3c
    df60:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000df64 <CScreenDevice::SetStandoutMode(unsigned int)>:
    df64:	e351001b 	cmp	r1, #27
    df68:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
    df6c:	ea00001d 	b	dfe8 <CScreenDevice::SetStandoutMode(unsigned int)+0x84>
    df70:	0000dff8 	.word	0x0000dff8
    df74:	0000dfec 	.word	0x0000dfec
    df78:	0000dfe0 	.word	0x0000dfe0
    df7c:	0000dfe8 	.word	0x0000dfe8
    df80:	0000dfe8 	.word	0x0000dfe8
    df84:	0000dfe8 	.word	0x0000dfe8
    df88:	0000dfe8 	.word	0x0000dfe8
    df8c:	0000dfe8 	.word	0x0000dfe8
    df90:	0000dfe8 	.word	0x0000dfe8
    df94:	0000dfe8 	.word	0x0000dfe8
    df98:	0000dfe8 	.word	0x0000dfe8
    df9c:	0000dfe8 	.word	0x0000dfe8
    dfa0:	0000dfe8 	.word	0x0000dfe8
    dfa4:	0000dfe8 	.word	0x0000dfe8
    dfa8:	0000dfe8 	.word	0x0000dfe8
    dfac:	0000dfe8 	.word	0x0000dfe8
    dfb0:	0000dfe8 	.word	0x0000dfe8
    dfb4:	0000dfe8 	.word	0x0000dfe8
    dfb8:	0000dfe8 	.word	0x0000dfe8
    dfbc:	0000dfe8 	.word	0x0000dfe8
    dfc0:	0000dfe8 	.word	0x0000dfe8
    dfc4:	0000dfe8 	.word	0x0000dfe8
    dfc8:	0000dfe8 	.word	0x0000dfe8
    dfcc:	0000dfe8 	.word	0x0000dfe8
    dfd0:	0000dfe8 	.word	0x0000dfe8
    dfd4:	0000dfe8 	.word	0x0000dfe8
    dfd8:	0000dfe8 	.word	0x0000dfe8
    dfdc:	0000dff8 	.word	0x0000dff8
    dfe0:	e3a0301f 	mov	r3, #31
    dfe4:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
    dfe8:	e12fff1e 	bx	lr
    dfec:	e3a03b3e 	mov	r3, #63488	; 0xf800
    dff0:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
    dff4:	e12fff1e 	bx	lr
    dff8:	e3e03020 	mvn	r3, #32
    dffc:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
    e000:	e12fff1e 	bx	lr

0000e004 <CScreenDevice::Scroll()>:
    e004:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    e008:	e1a07000 	mov	r7, r0
    e00c:	e2800014 	add	r0, r0, #20
    e010:	eb0014f5 	bl	133ec <CCharGenerator::GetCharHeight() const>
    e014:	e5973034 	ldr	r3, [r7, #52]	; 0x34
    e018:	e5974038 	ldr	r4, [r7, #56]	; 0x38
    e01c:	e5975020 	ldr	r5, [r7, #32]
    e020:	e0444003 	sub	r4, r4, r3
    e024:	e1a02085 	lsl	r2, r5, #1
    e028:	e0444000 	sub	r4, r4, r0
    e02c:	e0040492 	mul	r4, r2, r4
    e030:	e0050395 	mul	r5, r5, r3
    e034:	e5978018 	ldr	r8, [r7, #24]
    e038:	e3540000 	cmp	r4, #0
    e03c:	e1a06000 	mov	r6, r0
    e040:	e0885085 	add	r5, r8, r5, lsl #1
    e044:	1a000007 	bne	e068 <CScreenDevice::Scroll()+0x64>
    e048:	e0020692 	mul	r2, r2, r6
    e04c:	e1b02122 	lsrs	r2, r2, #2
    e050:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    e054:	e1a00005 	mov	r0, r5
    e058:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    e05c:	e1a02102 	lsl	r2, r2, #2
    e060:	e3a01000 	mov	r1, #0
    e064:	ea000e0c 	b	1189c <memset>
    e068:	e0803003 	add	r3, r0, r3
    e06c:	e0288392 	mla	r8, r2, r3, r8
    e070:	e3c4900f 	bic	r9, r4, #15
    e074:	e1a01008 	mov	r1, r8
    e078:	e1a02009 	mov	r2, r9
    e07c:	e1a00005 	mov	r0, r5
    e080:	eb000f77 	bl	11e64 <memcpy>
    e084:	e204200e 	and	r2, r4, #14
    e088:	e0850009 	add	r0, r5, r9
    e08c:	e0881009 	add	r1, r8, r9
    e090:	eb000f73 	bl	11e64 <memcpy>
    e094:	e5972020 	ldr	r2, [r7, #32]
    e098:	e3c44003 	bic	r4, r4, #3
    e09c:	e1a02082 	lsl	r2, r2, #1
    e0a0:	e0855004 	add	r5, r5, r4
    e0a4:	eaffffe7 	b	e048 <CScreenDevice::Scroll()+0x44>

0000e0a8 <CScreenDevice::CursorDown()>:
    e0a8:	e92d4070 	push	{r4, r5, r6, lr}
    e0ac:	e1a04000 	mov	r4, r0
    e0b0:	e2805014 	add	r5, r0, #20
    e0b4:	e1a00005 	mov	r0, r5
    e0b8:	eb0014cb 	bl	133ec <CCharGenerator::GetCharHeight() const>
    e0bc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    e0c0:	e5942038 	ldr	r2, [r4, #56]	; 0x38
    e0c4:	e0800003 	add	r0, r0, r3
    e0c8:	e1500002 	cmp	r0, r2
    e0cc:	e5840040 	str	r0, [r4, #64]	; 0x40
    e0d0:	38bd8070 	popcc	{r4, r5, r6, pc}
    e0d4:	e1a00004 	mov	r0, r4
    e0d8:	ebffffc9 	bl	e004 <CScreenDevice::Scroll()>
    e0dc:	e1a00005 	mov	r0, r5
    e0e0:	eb0014c1 	bl	133ec <CCharGenerator::GetCharHeight() const>
    e0e4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    e0e8:	e0430000 	sub	r0, r3, r0
    e0ec:	e5840040 	str	r0, [r4, #64]	; 0x40
    e0f0:	e8bd8070 	pop	{r4, r5, r6, pc}

0000e0f4 <CScreenDevice::NewLine()>:
    e0f4:	e3a02000 	mov	r2, #0
    e0f8:	e580203c 	str	r2, [r0, #60]	; 0x3c
    e0fc:	eaffffe9 	b	e0a8 <CScreenDevice::CursorDown()>

0000e100 <CScreenDevice::CursorRight()>:
    e100:	e92d4010 	push	{r4, lr}
    e104:	e1a04000 	mov	r4, r0
    e108:	e2800014 	add	r0, r0, #20
    e10c:	eb0014b4 	bl	133e4 <CCharGenerator::GetCharWidth() const>
    e110:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    e114:	e5942024 	ldr	r2, [r4, #36]	; 0x24
    e118:	e0800003 	add	r0, r0, r3
    e11c:	e1500002 	cmp	r0, r2
    e120:	e584003c 	str	r0, [r4, #60]	; 0x3c
    e124:	38bd8010 	popcc	{r4, pc}
    e128:	e3a03000 	mov	r3, #0
    e12c:	e1a00004 	mov	r0, r4
    e130:	e584303c 	str	r3, [r4, #60]	; 0x3c
    e134:	e8bd4010 	pop	{r4, lr}
    e138:	eaffffda 	b	e0a8 <CScreenDevice::CursorDown()>

0000e13c <CScreenDevice::Tabulator()>:
    e13c:	e92d4070 	push	{r4, r5, r6, lr}
    e140:	e1a05000 	mov	r5, r0
    e144:	e2800014 	add	r0, r0, #20
    e148:	eb0014a5 	bl	133e4 <CCharGenerator::GetCharWidth() const>
    e14c:	e595303c 	ldr	r3, [r5, #60]	; 0x3c
    e150:	e1a04180 	lsl	r4, r0, #3
    e154:	e0840003 	add	r0, r4, r3
    e158:	e1a01004 	mov	r1, r4
    e15c:	ebfff169 	bl	a708 <__udivsi3>
    e160:	e0000094 	mul	r0, r4, r0
    e164:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    e168:	e585003c 	str	r0, [r5, #60]	; 0x3c
    e16c:	e1500003 	cmp	r0, r3
    e170:	38bd8070 	popcc	{r4, r5, r6, pc}
    e174:	e3a03000 	mov	r3, #0
    e178:	e1a00005 	mov	r0, r5
    e17c:	e585303c 	str	r3, [r5, #60]	; 0x3c
    e180:	e8bd4070 	pop	{r4, r5, r6, lr}
    e184:	eaffffc7 	b	e0a8 <CScreenDevice::CursorDown()>

0000e188 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>:
    e188:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e18c:	e2806014 	add	r6, r0, #20
    e190:	e24dd00c 	sub	sp, sp, #12
    e194:	e1a07000 	mov	r7, r0
    e198:	e1a00006 	mov	r0, r6
    e19c:	e1a0a001 	mov	sl, r1
    e1a0:	e1a09002 	mov	r9, r2
    e1a4:	e58d3004 	str	r3, [sp, #4]
    e1a8:	e3a08000 	mov	r8, #0
    e1ac:	e1ddb3b0 	ldrh	fp, [sp, #48]	; 0x30
    e1b0:	eb00148d 	bl	133ec <CCharGenerator::GetCharHeight() const>
    e1b4:	e1580000 	cmp	r8, r0
    e1b8:	2a000025 	bcs	e254 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xcc>
    e1bc:	e59d3004 	ldr	r3, [sp, #4]
    e1c0:	e3a04000 	mov	r4, #0
    e1c4:	e0883003 	add	r3, r8, r3
    e1c8:	e58d3000 	str	r3, [sp]
    e1cc:	ea000000 	b	e1d4 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x4c>
    e1d0:	e2844001 	add	r4, r4, #1
    e1d4:	e1a00006 	mov	r0, r6
    e1d8:	eb001481 	bl	133e4 <CCharGenerator::GetCharWidth() const>
    e1dc:	e1540000 	cmp	r4, r0
    e1e0:	e0845009 	add	r5, r4, r9
    e1e4:	2a000015 	bcs	e240 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xb8>
    e1e8:	e1a03008 	mov	r3, r8
    e1ec:	e1a02004 	mov	r2, r4
    e1f0:	e1a0100a 	mov	r1, sl
    e1f4:	e1a00006 	mov	r0, r6
    e1f8:	eb00147f 	bl	133fc <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>
    e1fc:	e5973024 	ldr	r3, [r7, #36]	; 0x24
    e200:	e3500000 	cmp	r0, #0
    e204:	11a0000b 	movne	r0, fp
    e208:	03a00000 	moveq	r0, #0
    e20c:	e1550003 	cmp	r5, r3
    e210:	2affffee 	bcs	e1d0 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x48>
    e214:	e5973028 	ldr	r3, [r7, #40]	; 0x28
    e218:	e59d2000 	ldr	r2, [sp]
    e21c:	e1520003 	cmp	r2, r3
    e220:	2affffea 	bcs	e1d0 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x48>
    e224:	e5973020 	ldr	r3, [r7, #32]
    e228:	e59d1000 	ldr	r1, [sp]
    e22c:	e5972018 	ldr	r2, [r7, #24]
    e230:	e0255193 	mla	r5, r3, r1, r5
    e234:	e1a05085 	lsl	r5, r5, #1
    e238:	e18200b5 	strh	r0, [r2, r5]
    e23c:	eaffffe3 	b	e1d0 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x48>
    e240:	e1a00006 	mov	r0, r6
    e244:	eb001468 	bl	133ec <CCharGenerator::GetCharHeight() const>
    e248:	e2888001 	add	r8, r8, #1
    e24c:	e1580000 	cmp	r8, r0
    e250:	3affffd9 	bcc	e1bc <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x34>
    e254:	e28dd00c 	add	sp, sp, #12
    e258:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000e25c <CScreenDevice::DisplayChar(char)>:
    e25c:	e6ef3071 	uxtb	r3, r1
    e260:	e353001f 	cmp	r3, #31
    e264:	912fff1e 	bxls	lr
    e268:	e92d4010 	push	{r4, lr}
    e26c:	e1a04000 	mov	r4, r0
    e270:	e1d0c4b6 	ldrh	ip, [r0, #70]	; 0x46
    e274:	e24dd008 	sub	sp, sp, #8
    e278:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    e27c:	e590203c 	ldr	r2, [r0, #60]	; 0x3c
    e280:	e58dc000 	str	ip, [sp]
    e284:	ebffffbf 	bl	e188 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
    e288:	e1a00004 	mov	r0, r4
    e28c:	e28dd008 	add	sp, sp, #8
    e290:	e8bd4010 	pop	{r4, lr}
    e294:	eaffff99 	b	e100 <CScreenDevice::CursorRight()>

0000e298 <CScreenDevice::EraseChar(unsigned int, unsigned int)>:
    e298:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e29c:	e3a08000 	mov	r8, #0
    e2a0:	e1a0b000 	mov	fp, r0
    e2a4:	e1a06001 	mov	r6, r1
    e2a8:	e1a0a002 	mov	sl, r2
    e2ac:	e1a09008 	mov	r9, r8
    e2b0:	e2805014 	add	r5, r0, #20
    e2b4:	e1a00005 	mov	r0, r5
    e2b8:	eb00144b 	bl	133ec <CCharGenerator::GetCharHeight() const>
    e2bc:	e1580000 	cmp	r8, r0
    e2c0:	28bd8ff8 	popcs	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e2c4:	e3a04000 	mov	r4, #0
    e2c8:	e088700a 	add	r7, r8, sl
    e2cc:	e1a00005 	mov	r0, r5
    e2d0:	eb001443 	bl	133e4 <CCharGenerator::GetCharWidth() const>
    e2d4:	e1540000 	cmp	r4, r0
    e2d8:	e0843006 	add	r3, r4, r6
    e2dc:	2a00000c 	bcs	e314 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x7c>
    e2e0:	e59b2024 	ldr	r2, [fp, #36]	; 0x24
    e2e4:	e2844001 	add	r4, r4, #1
    e2e8:	e1530002 	cmp	r3, r2
    e2ec:	2afffff6 	bcs	e2cc <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x34>
    e2f0:	e59b2028 	ldr	r2, [fp, #40]	; 0x28
    e2f4:	e1570002 	cmp	r7, r2
    e2f8:	2afffff3 	bcs	e2cc <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x34>
    e2fc:	e59b2020 	ldr	r2, [fp, #32]
    e300:	e59b1018 	ldr	r1, [fp, #24]
    e304:	e0233792 	mla	r3, r2, r7, r3
    e308:	e1a03083 	lsl	r3, r3, #1
    e30c:	e18190b3 	strh	r9, [r1, r3]
    e310:	eaffffed 	b	e2cc <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x34>
    e314:	e2888001 	add	r8, r8, #1
    e318:	eaffffe5 	b	e2b4 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x1c>

0000e31c <CScreenDevice::ClearLineEnd()>:
    e31c:	e92d4070 	push	{r4, r5, r6, lr}
    e320:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    e324:	e590403c 	ldr	r4, [r0, #60]	; 0x3c
    e328:	e1540003 	cmp	r4, r3
    e32c:	28bd8070 	popcs	{r4, r5, r6, pc}
    e330:	e1a05000 	mov	r5, r0
    e334:	e2806014 	add	r6, r0, #20
    e338:	e1a01004 	mov	r1, r4
    e33c:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    e340:	e1a00005 	mov	r0, r5
    e344:	ebffffd3 	bl	e298 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    e348:	e1a00006 	mov	r0, r6
    e34c:	eb001424 	bl	133e4 <CCharGenerator::GetCharWidth() const>
    e350:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    e354:	e0844000 	add	r4, r4, r0
    e358:	e1530004 	cmp	r3, r4
    e35c:	8afffff5 	bhi	e338 <CScreenDevice::ClearLineEnd()+0x1c>
    e360:	e8bd8070 	pop	{r4, r5, r6, pc}

0000e364 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>:
    e364:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    e368:	e1a05000 	mov	r5, r0
    e36c:	e2807014 	add	r7, r0, #20
    e370:	e1a00007 	mov	r0, r7
    e374:	e1a06001 	mov	r6, r1
    e378:	e595403c 	ldr	r4, [r5, #60]	; 0x3c
    e37c:	eb001418 	bl	133e4 <CCharGenerator::GetCharWidth() const>
    e380:	e0204096 	mla	r0, r6, r0, r4
    e384:	e5956024 	ldr	r6, [r5, #36]	; 0x24
    e388:	e595403c 	ldr	r4, [r5, #60]	; 0x3c
    e38c:	e1500006 	cmp	r0, r6
    e390:	31a06000 	movcc	r6, r0
    e394:	e1540006 	cmp	r4, r6
    e398:	28bd81f0 	popcs	{r4, r5, r6, r7, r8, pc}
    e39c:	e1a01004 	mov	r1, r4
    e3a0:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    e3a4:	e1a00005 	mov	r0, r5
    e3a8:	ebffffba 	bl	e298 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    e3ac:	e1a00007 	mov	r0, r7
    e3b0:	eb00140b 	bl	133e4 <CCharGenerator::GetCharWidth() const>
    e3b4:	e0844000 	add	r4, r4, r0
    e3b8:	e1540006 	cmp	r4, r6
    e3bc:	3afffff6 	bcc	e39c <CScreenDevice::EraseChars(unsigned int) [clone .part.4]+0x38>
    e3c0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000e3c4 <CScreenDevice::EraseChars(unsigned int)>:
    e3c4:	e3510000 	cmp	r1, #0
    e3c8:	012fff1e 	bxeq	lr
    e3cc:	eaffffe4 	b	e364 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>

0000e3d0 <CScreenDevice::ClearDisplayEnd()>:
    e3d0:	e92d4070 	push	{r4, r5, r6, lr}
    e3d4:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    e3d8:	e590403c 	ldr	r4, [r0, #60]	; 0x3c
    e3dc:	e1a05000 	mov	r5, r0
    e3e0:	e1540003 	cmp	r4, r3
    e3e4:	e2806014 	add	r6, r0, #20
    e3e8:	2a000009 	bcs	e414 <CScreenDevice::ClearDisplayEnd()+0x44>
    e3ec:	e1a01004 	mov	r1, r4
    e3f0:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    e3f4:	e1a00005 	mov	r0, r5
    e3f8:	ebffffa6 	bl	e298 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    e3fc:	e1a00006 	mov	r0, r6
    e400:	eb0013f7 	bl	133e4 <CCharGenerator::GetCharWidth() const>
    e404:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    e408:	e0844000 	add	r4, r4, r0
    e40c:	e1530004 	cmp	r3, r4
    e410:	8afffff5 	bhi	e3ec <CScreenDevice::ClearDisplayEnd()+0x1c>
    e414:	e1a00006 	mov	r0, r6
    e418:	e5954040 	ldr	r4, [r5, #64]	; 0x40
    e41c:	eb0013f2 	bl	133ec <CCharGenerator::GetCharHeight() const>
    e420:	e5953020 	ldr	r3, [r5, #32]
    e424:	e0840000 	add	r0, r4, r0
    e428:	e0000093 	mul	r0, r3, r0
    e42c:	e595201c 	ldr	r2, [r5, #28]
    e430:	e5953018 	ldr	r3, [r5, #24]
    e434:	e07020a2 	rsbs	r2, r0, r2, lsr #1
    e438:	0a000004 	beq	e450 <CScreenDevice::ClearDisplayEnd()+0x80>
    e43c:	e8bd4070 	pop	{r4, r5, r6, lr}
    e440:	e1a02082 	lsl	r2, r2, #1
    e444:	e0830080 	add	r0, r3, r0, lsl #1
    e448:	e3a01000 	mov	r1, #0
    e44c:	ea000d12 	b	1189c <memset>
    e450:	e8bd8070 	pop	{r4, r5, r6, pc}

0000e454 <CScreenDevice::Write(char)>:
    e454:	e92d4010 	push	{r4, lr}
    e458:	e5903030 	ldr	r3, [r0, #48]	; 0x30
    e45c:	e24dd008 	sub	sp, sp, #8
    e460:	e1a04000 	mov	r4, r0
    e464:	e3530007 	cmp	r3, #7
    e468:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    e46c:	ea000010 	b	e4b4 <CScreenDevice::Write(char)+0x60>
    e470:	0000e500 	.word	0x0000e500
    e474:	0000e560 	.word	0x0000e560
    e478:	0000e57c 	.word	0x0000e57c
    e47c:	0000e5d4 	.word	0x0000e5d4
    e480:	0000e6b0 	.word	0x0000e6b0
    e484:	0000e6d0 	.word	0x0000e6d0
    e488:	0000e6f0 	.word	0x0000e6f0
    e48c:	0000e4c4 	.word	0x0000e4c4
    e490:	e5902034 	ldr	r2, [r0, #52]	; 0x34
    e494:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    e498:	e1520003 	cmp	r2, r3
    e49c:	2a000004 	bcs	e4b4 <CScreenDevice::Write(char)+0x60>
    e4a0:	e2800014 	add	r0, r0, #20
    e4a4:	eb0013d0 	bl	133ec <CCharGenerator::GetCharHeight() const>
    e4a8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    e4ac:	e0433000 	sub	r3, r3, r0
    e4b0:	e5843040 	str	r3, [r4, #64]	; 0x40
    e4b4:	e3a03000 	mov	r3, #0
    e4b8:	e5843030 	str	r3, [r4, #48]	; 0x30
    e4bc:	e28dd008 	add	sp, sp, #8
    e4c0:	e8bd8010 	pop	{r4, pc}
    e4c4:	e3510068 	cmp	r1, #104	; 0x68
    e4c8:	0a000097 	beq	e72c <CScreenDevice::Write(char)+0x2d8>
    e4cc:	e351006c 	cmp	r1, #108	; 0x6c
    e4d0:	0a000095 	beq	e72c <CScreenDevice::Write(char)+0x2d8>
    e4d4:	e2411030 	sub	r1, r1, #48	; 0x30
    e4d8:	e6ef3071 	uxtb	r3, r1
    e4dc:	e3530009 	cmp	r3, #9
    e4e0:	8afffff3 	bhi	e4b4 <CScreenDevice::Write(char)+0x60>
    e4e4:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    e4e8:	e0833103 	add	r3, r3, r3, lsl #2
    e4ec:	e0811083 	add	r1, r1, r3, lsl #1
    e4f0:	e3510063 	cmp	r1, #99	; 0x63
    e4f4:	e584104c 	str	r1, [r4, #76]	; 0x4c
    e4f8:	8affffed 	bhi	e4b4 <CScreenDevice::Write(char)+0x60>
    e4fc:	eaffffee 	b	e4bc <CScreenDevice::Write(char)+0x68>
    e500:	e2413008 	sub	r3, r1, #8
    e504:	e3530013 	cmp	r3, #19
    e508:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    e50c:	ea0000d3 	b	e860 <CScreenDevice::Write(char)+0x40c>
    e510:	0000e798 	.word	0x0000e798
    e514:	0000e78c 	.word	0x0000e78c
    e518:	0000e778 	.word	0x0000e778
    e51c:	0000e860 	.word	0x0000e860
    e520:	0000e860 	.word	0x0000e860
    e524:	0000e76c 	.word	0x0000e76c
    e528:	0000e860 	.word	0x0000e860
    e52c:	0000e860 	.word	0x0000e860
    e530:	0000e860 	.word	0x0000e860
    e534:	0000e860 	.word	0x0000e860
    e538:	0000e860 	.word	0x0000e860
    e53c:	0000e860 	.word	0x0000e860
    e540:	0000e860 	.word	0x0000e860
    e544:	0000e860 	.word	0x0000e860
    e548:	0000e860 	.word	0x0000e860
    e54c:	0000e860 	.word	0x0000e860
    e550:	0000e860 	.word	0x0000e860
    e554:	0000e860 	.word	0x0000e860
    e558:	0000e860 	.word	0x0000e860
    e55c:	0000e760 	.word	0x0000e760
    e560:	e351004d 	cmp	r1, #77	; 0x4d
    e564:	0affffd2 	beq	e4b4 <CScreenDevice::Write(char)+0x60>
    e568:	e351005b 	cmp	r1, #91	; 0x5b
    e56c:	03a03002 	moveq	r3, #2
    e570:	05803030 	streq	r3, [r0, #48]	; 0x30
    e574:	0affffd0 	beq	e4bc <CScreenDevice::Write(char)+0x68>
    e578:	eaffffcd 	b	e4b4 <CScreenDevice::Write(char)+0x60>
    e57c:	e241303f 	sub	r3, r1, #63	; 0x3f
    e580:	e3530011 	cmp	r3, #17
    e584:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    e588:	ea0000de 	b	e908 <CScreenDevice::Write(char)+0x4b4>
    e58c:	0000e8bc 	.word	0x0000e8bc
    e590:	0000e908 	.word	0x0000e908
    e594:	0000e490 	.word	0x0000e490
    e598:	0000e8e8 	.word	0x0000e8e8
    e59c:	0000e8d8 	.word	0x0000e8d8
    e5a0:	0000e8c8 	.word	0x0000e8c8
    e5a4:	0000e908 	.word	0x0000e908
    e5a8:	0000e908 	.word	0x0000e908
    e5ac:	0000e908 	.word	0x0000e908
    e5b0:	0000e8a4 	.word	0x0000e8a4
    e5b4:	0000e908 	.word	0x0000e908
    e5b8:	0000e894 	.word	0x0000e894
    e5bc:	0000e8f8 	.word	0x0000e8f8
    e5c0:	0000e4b4 	.word	0x0000e4b4
    e5c4:	0000e4b4 	.word	0x0000e4b4
    e5c8:	0000e908 	.word	0x0000e908
    e5cc:	0000e908 	.word	0x0000e908
    e5d0:	0000e4b4 	.word	0x0000e4b4
    e5d4:	e241303b 	sub	r3, r1, #59	; 0x3b
    e5d8:	e3530032 	cmp	r3, #50	; 0x32
    e5dc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    e5e0:	eaffffbb 	b	e4d4 <CScreenDevice::Write(char)+0x80>
    e5e4:	0000e854 	.word	0x0000e854
    e5e8:	0000e4d4 	.word	0x0000e4d4
    e5ec:	0000e4d4 	.word	0x0000e4d4
    e5f0:	0000e4d4 	.word	0x0000e4d4
    e5f4:	0000e4d4 	.word	0x0000e4d4
    e5f8:	0000e4d4 	.word	0x0000e4d4
    e5fc:	0000e4d4 	.word	0x0000e4d4
    e600:	0000e4d4 	.word	0x0000e4d4
    e604:	0000e4d4 	.word	0x0000e4d4
    e608:	0000e4d4 	.word	0x0000e4d4
    e60c:	0000e4d4 	.word	0x0000e4d4
    e610:	0000e4d4 	.word	0x0000e4d4
    e614:	0000e4d4 	.word	0x0000e4d4
    e618:	0000e4d4 	.word	0x0000e4d4
    e61c:	0000e4d4 	.word	0x0000e4d4
    e620:	0000e4d4 	.word	0x0000e4d4
    e624:	0000e4d4 	.word	0x0000e4d4
    e628:	0000e4b4 	.word	0x0000e4b4
    e62c:	0000e4b4 	.word	0x0000e4b4
    e630:	0000e4d4 	.word	0x0000e4d4
    e634:	0000e4d4 	.word	0x0000e4d4
    e638:	0000e4b4 	.word	0x0000e4b4
    e63c:	0000e4d4 	.word	0x0000e4d4
    e640:	0000e4d4 	.word	0x0000e4d4
    e644:	0000e4d4 	.word	0x0000e4d4
    e648:	0000e4d4 	.word	0x0000e4d4
    e64c:	0000e4d4 	.word	0x0000e4d4
    e650:	0000e4d4 	.word	0x0000e4d4
    e654:	0000e4d4 	.word	0x0000e4d4
    e658:	0000e7a4 	.word	0x0000e7a4
    e65c:	0000e4d4 	.word	0x0000e4d4
    e660:	0000e4d4 	.word	0x0000e4d4
    e664:	0000e4d4 	.word	0x0000e4d4
    e668:	0000e4d4 	.word	0x0000e4d4
    e66c:	0000e4d4 	.word	0x0000e4d4
    e670:	0000e4d4 	.word	0x0000e4d4
    e674:	0000e4d4 	.word	0x0000e4d4
    e678:	0000e4d4 	.word	0x0000e4d4
    e67c:	0000e4d4 	.word	0x0000e4d4
    e680:	0000e4d4 	.word	0x0000e4d4
    e684:	0000e4d4 	.word	0x0000e4d4
    e688:	0000e4d4 	.word	0x0000e4d4
    e68c:	0000e4d4 	.word	0x0000e4d4
    e690:	0000e4d4 	.word	0x0000e4d4
    e694:	0000e4d4 	.word	0x0000e4d4
    e698:	0000e7b8 	.word	0x0000e7b8
    e69c:	0000e4d4 	.word	0x0000e4d4
    e6a0:	0000e4d4 	.word	0x0000e4d4
    e6a4:	0000e4d4 	.word	0x0000e4d4
    e6a8:	0000e7b8 	.word	0x0000e7b8
    e6ac:	0000e7d4 	.word	0x0000e7d4
    e6b0:	e2411030 	sub	r1, r1, #48	; 0x30
    e6b4:	e6ef3071 	uxtb	r3, r1
    e6b8:	e3530009 	cmp	r3, #9
    e6bc:	8affff7c 	bhi	e4b4 <CScreenDevice::Write(char)+0x60>
    e6c0:	e3a03007 	mov	r3, #7
    e6c4:	e580104c 	str	r1, [r0, #76]	; 0x4c
    e6c8:	e5803030 	str	r3, [r0, #48]	; 0x30
    e6cc:	eaffff7a 	b	e4bc <CScreenDevice::Write(char)+0x68>
    e6d0:	e2411030 	sub	r1, r1, #48	; 0x30
    e6d4:	e6ef3071 	uxtb	r3, r1
    e6d8:	e3530009 	cmp	r3, #9
    e6dc:	8affff74 	bhi	e4b4 <CScreenDevice::Write(char)+0x60>
    e6e0:	e3a03006 	mov	r3, #6
    e6e4:	e5801050 	str	r1, [r0, #80]	; 0x50
    e6e8:	e5803030 	str	r3, [r0, #48]	; 0x30
    e6ec:	eaffff72 	b	e4bc <CScreenDevice::Write(char)+0x68>
    e6f0:	e3510048 	cmp	r1, #72	; 0x48
    e6f4:	0a000094 	beq	e94c <CScreenDevice::Write(char)+0x4f8>
    e6f8:	e3510072 	cmp	r1, #114	; 0x72
    e6fc:	0a000011 	beq	e748 <CScreenDevice::Write(char)+0x2f4>
    e700:	e2411030 	sub	r1, r1, #48	; 0x30
    e704:	e6ef3071 	uxtb	r3, r1
    e708:	e3530009 	cmp	r3, #9
    e70c:	8affff68 	bhi	e4b4 <CScreenDevice::Write(char)+0x60>
    e710:	e5903050 	ldr	r3, [r0, #80]	; 0x50
    e714:	e0833103 	add	r3, r3, r3, lsl #2
    e718:	e0811083 	add	r1, r1, r3, lsl #1
    e71c:	e35100c7 	cmp	r1, #199	; 0xc7
    e720:	e5801050 	str	r1, [r0, #80]	; 0x50
    e724:	8affff62 	bhi	e4b4 <CScreenDevice::Write(char)+0x60>
    e728:	eaffff63 	b	e4bc <CScreenDevice::Write(char)+0x68>
    e72c:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    e730:	e3530019 	cmp	r3, #25
    e734:	02411068 	subeq	r1, r1, #104	; 0x68
    e738:	016f1f11 	clzeq	r1, r1
    e73c:	01a012a1 	lsreq	r1, r1, #5
    e740:	05c41044 	strbeq	r1, [r4, #68]	; 0x44
    e744:	eaffff5a 	b	e4b4 <CScreenDevice::Write(char)+0x60>
    e748:	e5902050 	ldr	r2, [r0, #80]	; 0x50
    e74c:	e590104c 	ldr	r1, [r0, #76]	; 0x4c
    e750:	ebfffde4 	bl	dee8 <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>
    e754:	e3a03000 	mov	r3, #0
    e758:	e5843030 	str	r3, [r4, #48]	; 0x30
    e75c:	eaffff56 	b	e4bc <CScreenDevice::Write(char)+0x68>
    e760:	e3a03001 	mov	r3, #1
    e764:	e5803030 	str	r3, [r0, #48]	; 0x30
    e768:	eaffff53 	b	e4bc <CScreenDevice::Write(char)+0x68>
    e76c:	e3a03000 	mov	r3, #0
    e770:	e580303c 	str	r3, [r0, #60]	; 0x3c
    e774:	eaffff50 	b	e4bc <CScreenDevice::Write(char)+0x68>
    e778:	e3a03000 	mov	r3, #0
    e77c:	e580303c 	str	r3, [r0, #60]	; 0x3c
    e780:	e28dd008 	add	sp, sp, #8
    e784:	e8bd4010 	pop	{r4, lr}
    e788:	eafffe46 	b	e0a8 <CScreenDevice::CursorDown()>
    e78c:	e28dd008 	add	sp, sp, #8
    e790:	e8bd4010 	pop	{r4, lr}
    e794:	eafffe68 	b	e13c <CScreenDevice::Tabulator()>
    e798:	e28dd008 	add	sp, sp, #8
    e79c:	e8bd4010 	pop	{r4, lr}
    e7a0:	eafffd89 	b	ddcc <CScreenDevice::CursorLeft()>
    e7a4:	e590104c 	ldr	r1, [r0, #76]	; 0x4c
    e7a8:	e3510000 	cmp	r1, #0
    e7ac:	0affff40 	beq	e4b4 <CScreenDevice::Write(char)+0x60>
    e7b0:	ebfffeeb 	bl	e364 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>
    e7b4:	eaffff3e 	b	e4b4 <CScreenDevice::Write(char)+0x60>
    e7b8:	e590304c 	ldr	r3, [r0, #76]	; 0x4c
    e7bc:	e3530004 	cmp	r3, #4
    e7c0:	02411068 	subeq	r1, r1, #104	; 0x68
    e7c4:	016f1f11 	clzeq	r1, r1
    e7c8:	01a012a1 	lsreq	r1, r1, #5
    e7cc:	05c01048 	strbeq	r1, [r0, #72]	; 0x48
    e7d0:	eaffff37 	b	e4b4 <CScreenDevice::Write(char)+0x60>
    e7d4:	e590304c 	ldr	r3, [r0, #76]	; 0x4c
    e7d8:	e353001b 	cmp	r3, #27
    e7dc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    e7e0:	eaffff33 	b	e4b4 <CScreenDevice::Write(char)+0x60>
    e7e4:	0000e940 	.word	0x0000e940
    e7e8:	0000e934 	.word	0x0000e934
    e7ec:	0000e928 	.word	0x0000e928
    e7f0:	0000e4b4 	.word	0x0000e4b4
    e7f4:	0000e4b4 	.word	0x0000e4b4
    e7f8:	0000e4b4 	.word	0x0000e4b4
    e7fc:	0000e4b4 	.word	0x0000e4b4
    e800:	0000e4b4 	.word	0x0000e4b4
    e804:	0000e4b4 	.word	0x0000e4b4
    e808:	0000e4b4 	.word	0x0000e4b4
    e80c:	0000e4b4 	.word	0x0000e4b4
    e810:	0000e4b4 	.word	0x0000e4b4
    e814:	0000e4b4 	.word	0x0000e4b4
    e818:	0000e4b4 	.word	0x0000e4b4
    e81c:	0000e4b4 	.word	0x0000e4b4
    e820:	0000e4b4 	.word	0x0000e4b4
    e824:	0000e4b4 	.word	0x0000e4b4
    e828:	0000e4b4 	.word	0x0000e4b4
    e82c:	0000e4b4 	.word	0x0000e4b4
    e830:	0000e4b4 	.word	0x0000e4b4
    e834:	0000e4b4 	.word	0x0000e4b4
    e838:	0000e4b4 	.word	0x0000e4b4
    e83c:	0000e4b4 	.word	0x0000e4b4
    e840:	0000e4b4 	.word	0x0000e4b4
    e844:	0000e4b4 	.word	0x0000e4b4
    e848:	0000e4b4 	.word	0x0000e4b4
    e84c:	0000e4b4 	.word	0x0000e4b4
    e850:	0000e940 	.word	0x0000e940
    e854:	e3a03005 	mov	r3, #5
    e858:	e5803030 	str	r3, [r0, #48]	; 0x30
    e85c:	eaffff16 	b	e4bc <CScreenDevice::Write(char)+0x68>
    e860:	e6ef3071 	uxtb	r3, r1
    e864:	e353001f 	cmp	r3, #31
    e868:	9affff13 	bls	e4bc <CScreenDevice::Write(char)+0x68>
    e86c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    e870:	e590203c 	ldr	r2, [r0, #60]	; 0x3c
    e874:	e1d004b6 	ldrh	r0, [r0, #70]	; 0x46
    e878:	e58d0000 	str	r0, [sp]
    e87c:	e1a00004 	mov	r0, r4
    e880:	ebfffe40 	bl	e188 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
    e884:	e1a00004 	mov	r0, r4
    e888:	e28dd008 	add	sp, sp, #8
    e88c:	e8bd4010 	pop	{r4, lr}
    e890:	eafffe1a 	b	e100 <CScreenDevice::CursorRight()>
    e894:	ebfffecd 	bl	e3d0 <CScreenDevice::ClearDisplayEnd()>
    e898:	e3a03000 	mov	r3, #0
    e89c:	e5843030 	str	r3, [r4, #48]	; 0x30
    e8a0:	eaffff05 	b	e4bc <CScreenDevice::Write(char)+0x68>
    e8a4:	e3a03000 	mov	r3, #0
    e8a8:	e5902034 	ldr	r2, [r0, #52]	; 0x34
    e8ac:	e580303c 	str	r3, [r0, #60]	; 0x3c
    e8b0:	e5803030 	str	r3, [r0, #48]	; 0x30
    e8b4:	e5802040 	str	r2, [r0, #64]	; 0x40
    e8b8:	eafffeff 	b	e4bc <CScreenDevice::Write(char)+0x68>
    e8bc:	e3a03004 	mov	r3, #4
    e8c0:	e5803030 	str	r3, [r0, #48]	; 0x30
    e8c4:	eafffefc 	b	e4bc <CScreenDevice::Write(char)+0x68>
    e8c8:	ebfffd3f 	bl	ddcc <CScreenDevice::CursorLeft()>
    e8cc:	e3a03000 	mov	r3, #0
    e8d0:	e5843030 	str	r3, [r4, #48]	; 0x30
    e8d4:	eafffef8 	b	e4bc <CScreenDevice::Write(char)+0x68>
    e8d8:	ebfffe08 	bl	e100 <CScreenDevice::CursorRight()>
    e8dc:	e3a03000 	mov	r3, #0
    e8e0:	e5843030 	str	r3, [r4, #48]	; 0x30
    e8e4:	eafffef4 	b	e4bc <CScreenDevice::Write(char)+0x68>
    e8e8:	ebfffdee 	bl	e0a8 <CScreenDevice::CursorDown()>
    e8ec:	e3a03000 	mov	r3, #0
    e8f0:	e5843030 	str	r3, [r4, #48]	; 0x30
    e8f4:	eafffef0 	b	e4bc <CScreenDevice::Write(char)+0x68>
    e8f8:	ebfffe87 	bl	e31c <CScreenDevice::ClearLineEnd()>
    e8fc:	e3a03000 	mov	r3, #0
    e900:	e5843030 	str	r3, [r4, #48]	; 0x30
    e904:	eafffeec 	b	e4bc <CScreenDevice::Write(char)+0x68>
    e908:	e2411030 	sub	r1, r1, #48	; 0x30
    e90c:	e6ef3071 	uxtb	r3, r1
    e910:	e3530009 	cmp	r3, #9
    e914:	8afffee6 	bhi	e4b4 <CScreenDevice::Write(char)+0x60>
    e918:	e3a03003 	mov	r3, #3
    e91c:	e580104c 	str	r1, [r0, #76]	; 0x4c
    e920:	e5803030 	str	r3, [r0, #48]	; 0x30
    e924:	eafffee4 	b	e4bc <CScreenDevice::Write(char)+0x68>
    e928:	e3a0301f 	mov	r3, #31
    e92c:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
    e930:	eafffedf 	b	e4b4 <CScreenDevice::Write(char)+0x60>
    e934:	e3a03b3e 	mov	r3, #63488	; 0xf800
    e938:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
    e93c:	eafffedc 	b	e4b4 <CScreenDevice::Write(char)+0x60>
    e940:	e3e03020 	mvn	r3, #32
    e944:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
    e948:	eafffed9 	b	e4b4 <CScreenDevice::Write(char)+0x60>
    e94c:	e5902050 	ldr	r2, [r0, #80]	; 0x50
    e950:	e590104c 	ldr	r1, [r0, #76]	; 0x4c
    e954:	ebfffd37 	bl	de38 <CScreenDevice::CursorMove(unsigned int, unsigned int)>
    e958:	e3a03000 	mov	r3, #0
    e95c:	e5843030 	str	r3, [r4, #48]	; 0x30
    e960:	eafffed5 	b	e4bc <CScreenDevice::Write(char)+0x68>

0000e964 <CScreenDevice::Write(void const*, unsigned int)>:
    e964:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    e968:	e1a05000 	mov	r5, r0
    e96c:	e5900058 	ldr	r0, [r0, #88]	; 0x58
    e970:	e1a07001 	mov	r7, r1
    e974:	e3500000 	cmp	r0, #0
    e978:	e1a04002 	mov	r4, r2
    e97c:	1a000028 	bne	ea24 <CScreenDevice::Write(void const*, unsigned int)+0xc0>
    e980:	e3a02001 	mov	r2, #1
    e984:	e5d53044 	ldrb	r3, [r5, #68]	; 0x44
    e988:	e5c52054 	strb	r2, [r5, #84]	; 0x54
    e98c:	e3530000 	cmp	r3, #0
    e990:	1a00001c 	bne	ea08 <CScreenDevice::Write(void const*, unsigned int)+0xa4>
    e994:	e3540000 	cmp	r4, #0
    e998:	e2446001 	sub	r6, r4, #1
    e99c:	01a06004 	moveq	r6, r4
    e9a0:	0a00000b 	beq	e9d4 <CScreenDevice::Write(void const*, unsigned int)+0x70>
    e9a4:	e1a04007 	mov	r4, r7
    e9a8:	e0d410d1 	ldrsb	r1, [r4], #1
    e9ac:	e1a00005 	mov	r0, r5
    e9b0:	ebfffea7 	bl	e454 <CScreenDevice::Write(char)>
    e9b4:	e2643001 	rsb	r3, r4, #1
    e9b8:	e0833006 	add	r3, r3, r6
    e9bc:	e1770003 	cmn	r7, r3
    e9c0:	1afffff8 	bne	e9a8 <CScreenDevice::Write(void const*, unsigned int)+0x44>
    e9c4:	e2866001 	add	r6, r6, #1
    e9c8:	e5d53044 	ldrb	r3, [r5, #68]	; 0x44
    e9cc:	e3530000 	cmp	r3, #0
    e9d0:	1a000009 	bne	e9fc <CScreenDevice::Write(void const*, unsigned int)+0x98>
    e9d4:	e3a02000 	mov	r2, #0
    e9d8:	e5953058 	ldr	r3, [r5, #88]	; 0x58
    e9dc:	e5c52054 	strb	r2, [r5, #84]	; 0x54
    e9e0:	e1530002 	cmp	r3, r2
    e9e4:	0a000000 	beq	e9ec <CScreenDevice::Write(void const*, unsigned int)+0x88>
    e9e8:	eb000f3c 	bl	126e0 <LeaveCritical>
    e9ec:	e3a03000 	mov	r3, #0
    e9f0:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    e9f4:	e1a00006 	mov	r0, r6
    e9f8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e9fc:	e1a00005 	mov	r0, r5
    ea00:	ebfffc31 	bl	dacc <CScreenDevice::InvertCursor() [clone .part.6]>
    ea04:	eafffff2 	b	e9d4 <CScreenDevice::Write(void const*, unsigned int)+0x70>
    ea08:	e1a00005 	mov	r0, r5
    ea0c:	ebfffc2e 	bl	dacc <CScreenDevice::InvertCursor() [clone .part.6]>
    ea10:	e3540000 	cmp	r4, #0
    ea14:	e2446001 	sub	r6, r4, #1
    ea18:	1affffe1 	bne	e9a4 <CScreenDevice::Write(void const*, unsigned int)+0x40>
    ea1c:	e1a06004 	mov	r6, r4
    ea20:	eaffffe8 	b	e9c8 <CScreenDevice::Write(void const*, unsigned int)+0x64>
    ea24:	eb000f00 	bl	1262c <EnterCritical>
    ea28:	eaffffd4 	b	e980 <CScreenDevice::Write(void const*, unsigned int)+0x1c>

0000ea2c <CScreenDevice::Initialize()>:
    ea2c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    ea30:	e5d0500c 	ldrb	r5, [r0, #12]
    ea34:	e24dd00c 	sub	sp, sp, #12
    ea38:	e3550000 	cmp	r5, #0
    ea3c:	e1a04000 	mov	r4, r0
    ea40:	0a00002a 	beq	eaf0 <CScreenDevice::Initialize()+0xc4>
    ea44:	e5903004 	ldr	r3, [r0, #4]
    ea48:	e5902008 	ldr	r2, [r0, #8]
    ea4c:	e5803024 	str	r3, [r0, #36]	; 0x24
    ea50:	e0000392 	mul	r0, r2, r3
    ea54:	e370010f 	cmn	r0, #-1073741821	; 0xc0000003
    ea58:	e1a00080 	lsl	r0, r0, #1
    ea5c:	e584001c 	str	r0, [r4, #28]
    ea60:	e5843020 	str	r3, [r4, #32]
    ea64:	23e00000 	mvncs	r0, #0
    ea68:	e5842028 	str	r2, [r4, #40]	; 0x28
    ea6c:	eb000f49 	bl	12798 <operator new[](unsigned int)>
    ea70:	e5947028 	ldr	r7, [r4, #40]	; 0x28
    ea74:	e5840018 	str	r0, [r4, #24]
    ea78:	e2846014 	add	r6, r4, #20
    ea7c:	e1a00006 	mov	r0, r6
    ea80:	eb001259 	bl	133ec <CCharGenerator::GetCharHeight() const>
    ea84:	e1a01000 	mov	r1, r0
    ea88:	e1a00007 	mov	r0, r7
    ea8c:	ebffef1d 	bl	a708 <__udivsi3>
    ea90:	e1a05000 	mov	r5, r0
    ea94:	e1a00006 	mov	r0, r6
    ea98:	eb001253 	bl	133ec <CCharGenerator::GetCharHeight() const>
    ea9c:	e3a02000 	mov	r2, #0
    eaa0:	e0000590 	mul	r0, r0, r5
    eaa4:	e5943034 	ldr	r3, [r4, #52]	; 0x34
    eaa8:	e584002c 	str	r0, [r4, #44]	; 0x2c
    eaac:	e5840038 	str	r0, [r4, #56]	; 0x38
    eab0:	e5843040 	str	r3, [r4, #64]	; 0x40
    eab4:	e584203c 	str	r2, [r4, #60]	; 0x3c
    eab8:	e1a00004 	mov	r0, r4
    eabc:	ebfffe43 	bl	e3d0 <CScreenDevice::ClearDisplayEnd()>
    eac0:	e5d43044 	ldrb	r3, [r4, #68]	; 0x44
    eac4:	e3530000 	cmp	r3, #0
    eac8:	1a00002f 	bne	eb8c <CScreenDevice::Initialize()+0x160>
    eacc:	ebfff213 	bl	b320 <CDeviceNameService::Get()>
    ead0:	e1a02004 	mov	r2, r4
    ead4:	e3a03000 	mov	r3, #0
    ead8:	e59f10b8 	ldr	r1, [pc, #184]	; eb98 <CScreenDevice::Initialize()+0x16c>
    eadc:	ebfff14f 	bl	b020 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
    eae0:	e3a05001 	mov	r5, #1
    eae4:	e1a00005 	mov	r0, r5
    eae8:	e28dd00c 	add	sp, sp, #12
    eaec:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    eaf0:	e3a00094 	mov	r0, #148	; 0x94
    eaf4:	eb000f26 	bl	12794 <operator new(unsigned int)>
    eaf8:	e9940006 	ldmib	r4, {r1, r2}
    eafc:	e1a06000 	mov	r6, r0
    eb00:	e3a03010 	mov	r3, #16
    eb04:	e58d5004 	str	r5, [sp, #4]
    eb08:	e58d5000 	str	r5, [sp]
    eb0c:	eb0010dd 	bl	12e88 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    eb10:	e5846010 	str	r6, [r4, #16]
    eb14:	e1a00006 	mov	r0, r6
    eb18:	eb001153 	bl	1306c <CBcmFrameBuffer::Initialize()>
    eb1c:	e3500000 	cmp	r0, #0
    eb20:	0affffef 	beq	eae4 <CScreenDevice::Initialize()+0xb8>
    eb24:	e5940010 	ldr	r0, [r4, #16]
    eb28:	eb001189 	bl	13154 <CBcmFrameBuffer::GetDepth() const>
    eb2c:	e3500010 	cmp	r0, #16
    eb30:	1affffeb 	bne	eae4 <CScreenDevice::Initialize()+0xb8>
    eb34:	e5940010 	ldr	r0, [r4, #16]
    eb38:	eb001187 	bl	1315c <CBcmFrameBuffer::GetBuffer() const>
    eb3c:	e5840018 	str	r0, [r4, #24]
    eb40:	e5940010 	ldr	r0, [r4, #16]
    eb44:	eb001186 	bl	13164 <CBcmFrameBuffer::GetSize() const>
    eb48:	e584001c 	str	r0, [r4, #28]
    eb4c:	e5940010 	ldr	r0, [r4, #16]
    eb50:	eb00117d 	bl	1314c <CBcmFrameBuffer::GetPitch() const>
    eb54:	e5840020 	str	r0, [r4, #32]
    eb58:	e5940010 	ldr	r0, [r4, #16]
    eb5c:	eb001172 	bl	1312c <CBcmFrameBuffer::GetWidth() const>
    eb60:	e5840024 	str	r0, [r4, #36]	; 0x24
    eb64:	e5940010 	ldr	r0, [r4, #16]
    eb68:	eb001171 	bl	13134 <CBcmFrameBuffer::GetHeight() const>
    eb6c:	e5943020 	ldr	r3, [r4, #32]
    eb70:	e1a07000 	mov	r7, r0
    eb74:	e3130003 	tst	r3, #3
    eb78:	01a030a3 	lsreq	r3, r3, #1
    eb7c:	e5840028 	str	r0, [r4, #40]	; 0x28
    eb80:	05843020 	streq	r3, [r4, #32]
    eb84:	0affffbb 	beq	ea78 <CScreenDevice::Initialize()+0x4c>
    eb88:	eaffffd5 	b	eae4 <CScreenDevice::Initialize()+0xb8>
    eb8c:	e1a00004 	mov	r0, r4
    eb90:	ebfffbcd 	bl	dacc <CScreenDevice::InvertCursor() [clone .part.6]>
    eb94:	eaffffcc 	b	eacc <CScreenDevice::Initialize()+0xa0>
    eb98:	00014c1c 	.word	0x00014c1c

0000eb9c <CScreenDevice::InvertCursor()>:
    eb9c:	e5d03044 	ldrb	r3, [r0, #68]	; 0x44
    eba0:	e3530000 	cmp	r3, #0
    eba4:	012fff1e 	bxeq	lr
    eba8:	eafffbc7 	b	dacc <CScreenDevice::InvertCursor() [clone .part.6]>

0000ebac <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)>:
    ebac:	e590c024 	ldr	ip, [r0, #36]	; 0x24
    ebb0:	e15c0001 	cmp	ip, r1
    ebb4:	912fff1e 	bxls	lr
    ebb8:	e590c028 	ldr	ip, [r0, #40]	; 0x28
    ebbc:	e15c0002 	cmp	ip, r2
    ebc0:	8590c020 	ldrhi	ip, [r0, #32]
    ebc4:	85900018 	ldrhi	r0, [r0, #24]
    ebc8:	8022129c 	mlahi	r2, ip, r2, r1
    ebcc:	81a02082 	lslhi	r2, r2, #1
    ebd0:	818030b2 	strhhi	r3, [r0, r2]
    ebd4:	e12fff1e 	bx	lr

0000ebd8 <CScreenDevice::GetPixel(unsigned int, unsigned int)>:
    ebd8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    ebdc:	e1530001 	cmp	r3, r1
    ebe0:	9a000008 	bls	ec08 <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x30>
    ebe4:	e5903028 	ldr	r3, [r0, #40]	; 0x28
    ebe8:	e1530002 	cmp	r3, r2
    ebec:	9a000005 	bls	ec08 <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x30>
    ebf0:	e590c020 	ldr	ip, [r0, #32]
    ebf4:	e5903018 	ldr	r3, [r0, #24]
    ebf8:	e022129c 	mla	r2, ip, r2, r1
    ebfc:	e1a02082 	lsl	r2, r2, #1
    ec00:	e19300b2 	ldrh	r0, [r3, r2]
    ec04:	e12fff1e 	bx	lr
    ec08:	e3a00000 	mov	r0, #0
    ec0c:	e12fff1e 	bx	lr

0000ec10 <CScreenDevice::Rotor(unsigned int, unsigned int)>:
    ec10:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    ec14:	e1a05000 	mov	r5, r0
    ec18:	e24dd00c 	sub	sp, sp, #12
    ec1c:	e1a04001 	mov	r4, r1
    ec20:	e2800014 	add	r0, r0, #20
    ec24:	e1a06002 	mov	r6, r2
    ec28:	e5957024 	ldr	r7, [r5, #36]	; 0x24
    ec2c:	eb0011ec 	bl	133e4 <CCharGenerator::GetCharWidth() const>
    ec30:	e3a0cb3e 	mov	ip, #63488	; 0xf800
    ec34:	e2044003 	and	r4, r4, #3
    ec38:	e0200094 	mla	r0, r4, r0, r0
    ec3c:	e59f3024 	ldr	r3, [pc, #36]	; ec68 <CScreenDevice::Rotor(unsigned int, unsigned int)+0x58>
    ec40:	e2066003 	and	r6, r6, #3
    ec44:	e0833006 	add	r3, r3, r6
    ec48:	e1d311dc 	ldrsb	r1, [r3, #28]
    ec4c:	e0472000 	sub	r2, r7, r0
    ec50:	e58dc000 	str	ip, [sp]
    ec54:	e1a00005 	mov	r0, r5
    ec58:	e3a03000 	mov	r3, #0
    ec5c:	ebfffd49 	bl	e188 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
    ec60:	e28dd00c 	add	sp, sp, #12
    ec64:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    ec68:	00015008 	.word	0x00015008

0000ec6c <CSerialDevice::Read(void*, unsigned int)>:
    ec6c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    ec70:	e2514000 	subs	r4, r1, #0
    ec74:	e1a05000 	mov	r5, r0
    ec78:	e1a08002 	mov	r8, r2
    ec7c:	0a00005a 	beq	edec <CSerialDevice::Read(void*, unsigned int)+0x180>
    ec80:	e59530a4 	ldr	r3, [r5, #164]	; 0xa4
    ec84:	e3530000 	cmp	r3, #0
    ec88:	0a000034 	beq	ed60 <CSerialDevice::Read(void*, unsigned int)+0xf4>
    ec8c:	e2856802 	add	r6, r5, #131072	; 0x20000
    ec90:	e59600d0 	ldr	r0, [r6, #208]	; 0xd0
    ec94:	e3500000 	cmp	r0, #0
    ec98:	1a000022 	bne	ed28 <CSerialDevice::Read(void*, unsigned int)+0xbc>
    ec9c:	e2853801 	add	r3, r5, #65536	; 0x10000
    eca0:	e59320b4 	ldr	r2, [r3, #180]	; 0xb4
    eca4:	e3520000 	cmp	r2, #0
    eca8:	ba000023 	blt	ed3c <CSerialDevice::Read(void*, unsigned int)+0xd0>
    ecac:	e3580000 	cmp	r8, #0
    ecb0:	0a000017 	beq	ed14 <CSerialDevice::Read(void*, unsigned int)+0xa8>
    ecb4:	e59320ac 	ldr	r2, [r3, #172]	; 0xac
    ecb8:	e59310b0 	ldr	r1, [r3, #176]	; 0xb0
    ecbc:	e1510002 	cmp	r1, r2
    ecc0:	0a000054 	beq	ee18 <CSerialDevice::Read(void*, unsigned int)+0x1ac>
    ecc4:	e0842008 	add	r2, r4, r8
    ecc8:	e1a0c004 	mov	ip, r4
    eccc:	e59fe154 	ldr	lr, [pc, #340]	; ee28 <CSerialDevice::Read(void*, unsigned int)+0x1bc>
    ecd0:	ea000003 	b	ece4 <CSerialDevice::Read(void*, unsigned int)+0x78>
    ecd4:	e59370ac 	ldr	r7, [r3, #172]	; 0xac
    ecd8:	e59310b0 	ldr	r1, [r3, #176]	; 0xb0
    ecdc:	e1570001 	cmp	r7, r1
    ece0:	0a00000b 	beq	ed14 <CSerialDevice::Read(void*, unsigned int)+0xa8>
    ece4:	e59310b0 	ldr	r1, [r3, #176]	; 0xb0
    ece8:	e2810001 	add	r0, r1, #1
    ecec:	e58300b0 	str	r0, [r3, #176]	; 0xb0
    ecf0:	e0851001 	add	r1, r5, r1
    ecf4:	e5d110aa 	ldrb	r1, [r1, #170]	; 0xaa
    ecf8:	e4cc1001 	strb	r1, [ip], #1
    ecfc:	e59310b0 	ldr	r1, [r3, #176]	; 0xb0
    ed00:	e15c0002 	cmp	ip, r2
    ed04:	e001100e 	and	r1, r1, lr
    ed08:	e58310b0 	str	r1, [r3, #176]	; 0xb0
    ed0c:	e04c8004 	sub	r8, ip, r4
    ed10:	1affffef 	bne	ecd4 <CSerialDevice::Read(void*, unsigned int)+0x68>
    ed14:	e59630d0 	ldr	r3, [r6, #208]	; 0xd0
    ed18:	e3530000 	cmp	r3, #0
    ed1c:	1a00000c 	bne	ed54 <CSerialDevice::Read(void*, unsigned int)+0xe8>
    ed20:	e1a00008 	mov	r0, r8
    ed24:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ed28:	eb000e3f 	bl	1262c <EnterCritical>
    ed2c:	e2853801 	add	r3, r5, #65536	; 0x10000
    ed30:	e59320b4 	ldr	r2, [r3, #180]	; 0xb4
    ed34:	e3520000 	cmp	r2, #0
    ed38:	aaffffdb 	bge	ecac <CSerialDevice::Read(void*, unsigned int)+0x40>
    ed3c:	e3a02000 	mov	r2, #0
    ed40:	e59380b4 	ldr	r8, [r3, #180]	; 0xb4
    ed44:	e58320b4 	str	r2, [r3, #180]	; 0xb4
    ed48:	e59630d0 	ldr	r3, [r6, #208]	; 0xd0
    ed4c:	e3530000 	cmp	r3, #0
    ed50:	0afffff2 	beq	ed20 <CSerialDevice::Read(void*, unsigned int)+0xb4>
    ed54:	eb000e61 	bl	126e0 <LeaveCritical>
    ed58:	e1a00008 	mov	r0, r8
    ed5c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ed60:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    ed64:	e3580000 	cmp	r8, #0
    ed68:	0a00001b 	beq	eddc <CSerialDevice::Read(void*, unsigned int)+0x170>
    ed6c:	e59fc0b8 	ldr	ip, [pc, #184]	; ee2c <CSerialDevice::Read(void*, unsigned int)+0x1c0>
    ed70:	e59c2018 	ldr	r2, [ip, #24]
    ed74:	e3120010 	tst	r2, #16
    ed78:	1a000028 	bne	ee20 <CSerialDevice::Read(void*, unsigned int)+0x1b4>
    ed7c:	e59c3000 	ldr	r3, [ip]
    ed80:	e3130b01 	tst	r3, #1024	; 0x400
    ed84:	1a00001d 	bne	ee00 <CSerialDevice::Read(void*, unsigned int)+0x194>
    ed88:	e3130b02 	tst	r3, #2048	; 0x800
    ed8c:	1a00001d 	bne	ee08 <CSerialDevice::Read(void*, unsigned int)+0x19c>
    ed90:	e3130c01 	tst	r3, #256	; 0x100
    ed94:	1a00001d 	bne	ee10 <CSerialDevice::Read(void*, unsigned int)+0x1a4>
    ed98:	e0842008 	add	r2, r4, r8
    ed9c:	e1a01004 	mov	r1, r4
    eda0:	ea000009 	b	edcc <CSerialDevice::Read(void*, unsigned int)+0x160>
    eda4:	e59c3018 	ldr	r3, [ip, #24]
    eda8:	e3130010 	tst	r3, #16
    edac:	1a00000a 	bne	eddc <CSerialDevice::Read(void*, unsigned int)+0x170>
    edb0:	e59c3000 	ldr	r3, [ip]
    edb4:	e3130b01 	tst	r3, #1024	; 0x400
    edb8:	1a000010 	bne	ee00 <CSerialDevice::Read(void*, unsigned int)+0x194>
    edbc:	e3130b02 	tst	r3, #2048	; 0x800
    edc0:	1a000010 	bne	ee08 <CSerialDevice::Read(void*, unsigned int)+0x19c>
    edc4:	e3130c01 	tst	r3, #256	; 0x100
    edc8:	1a000010 	bne	ee10 <CSerialDevice::Read(void*, unsigned int)+0x1a4>
    edcc:	e4c13001 	strb	r3, [r1], #1
    edd0:	e1510002 	cmp	r1, r2
    edd4:	e0418004 	sub	r8, r1, r4
    edd8:	1afffff1 	bne	eda4 <CSerialDevice::Read(void*, unsigned int)+0x138>
    eddc:	e3a03000 	mov	r3, #0
    ede0:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    ede4:	e1a00008 	mov	r0, r8
    ede8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    edec:	e59f203c 	ldr	r2, [pc, #60]	; ee30 <CSerialDevice::Read(void*, unsigned int)+0x1c4>
    edf0:	e59f103c 	ldr	r1, [pc, #60]	; ee34 <CSerialDevice::Read(void*, unsigned int)+0x1c8>
    edf4:	e59f003c 	ldr	r0, [pc, #60]	; ee38 <CSerialDevice::Read(void*, unsigned int)+0x1cc>
    edf8:	ebffef19 	bl	aa64 <assertion_failed>
    edfc:	eaffff9f 	b	ec80 <CSerialDevice::Read(void*, unsigned int)+0x14>
    ee00:	e3e08000 	mvn	r8, #0
    ee04:	eafffff4 	b	eddc <CSerialDevice::Read(void*, unsigned int)+0x170>
    ee08:	e3e08001 	mvn	r8, #1
    ee0c:	eafffff2 	b	eddc <CSerialDevice::Read(void*, unsigned int)+0x170>
    ee10:	e3e08002 	mvn	r8, #2
    ee14:	eafffff0 	b	eddc <CSerialDevice::Read(void*, unsigned int)+0x170>
    ee18:	e3a08000 	mov	r8, #0
    ee1c:	eaffffbc 	b	ed14 <CSerialDevice::Read(void*, unsigned int)+0xa8>
    ee20:	e1a08003 	mov	r8, r3
    ee24:	eaffffec 	b	eddc <CSerialDevice::Read(void*, unsigned int)+0x170>
    ee28:	0000ffff 	.word	0x0000ffff
    ee2c:	20201000 	.word	0x20201000
    ee30:	00000101 	.word	0x00000101
    ee34:	00015048 	.word	0x00015048
    ee38:	00014020 	.word	0x00014020

0000ee3c <CSerialDevice::CSerialDevice(CInterruptSystem*, bool)>:
    ee3c:	e92d4070 	push	{r4, r5, r6, lr}
    ee40:	e1a04000 	mov	r4, r0
    ee44:	e1a05002 	mov	r5, r2
    ee48:	e1a06001 	mov	r6, r1
    ee4c:	ebfff042 	bl	af5c <CDevice::CDevice()>
    ee50:	e1a00004 	mov	r0, r4
    ee54:	e3a03000 	mov	r3, #0
    ee58:	e59f109c 	ldr	r1, [pc, #156]	; eefc <CSerialDevice::CSerialDevice(CInterruptSystem*, bool)+0xc0>
    ee5c:	e1a02003 	mov	r2, r3
    ee60:	e4801004 	str	r1, [r0], #4
    ee64:	e3a01020 	mov	r1, #32
    ee68:	ebfff4a9 	bl	c114 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    ee6c:	e3a03000 	mov	r3, #0
    ee70:	e284002c 	add	r0, r4, #44	; 0x2c
    ee74:	e1a02003 	mov	r2, r3
    ee78:	e3a01021 	mov	r1, #33	; 0x21
    ee7c:	ebfff4a4 	bl	c114 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    ee80:	e2840054 	add	r0, r4, #84	; 0x54
    ee84:	e3a03000 	mov	r3, #0
    ee88:	e3a02004 	mov	r2, #4
    ee8c:	e3a0100e 	mov	r1, #14
    ee90:	ebfff49f 	bl	c114 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    ee94:	e284007c 	add	r0, r4, #124	; 0x7c
    ee98:	e3a03000 	mov	r3, #0
    ee9c:	e3a02004 	mov	r2, #4
    eea0:	e3a0100f 	mov	r1, #15
    eea4:	ebfff49a 	bl	c114 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    eea8:	e3550000 	cmp	r5, #0
    eeac:	e3a03000 	mov	r3, #0
    eeb0:	e3a0c001 	mov	ip, #1
    eeb4:	13a0e002 	movne	lr, #2
    eeb8:	03a0e001 	moveq	lr, #1
    eebc:	e2842802 	add	r2, r4, #131072	; 0x20000
    eec0:	e2841801 	add	r1, r4, #65536	; 0x10000
    eec4:	e58460a4 	str	r6, [r4, #164]	; 0xa4
    eec8:	e5c450a8 	strb	r5, [r4, #168]	; 0xa8
    eecc:	e5c430a9 	strb	r3, [r4, #169]	; 0xa9
    eed0:	e1a00004 	mov	r0, r4
    eed4:	e58130ac 	str	r3, [r1, #172]	; 0xac
    eed8:	e58130b0 	str	r3, [r1, #176]	; 0xb0
    eedc:	e58130b4 	str	r3, [r1, #180]	; 0xb4
    eee0:	e58230b8 	str	r3, [r2, #184]	; 0xb8
    eee4:	e582e0d0 	str	lr, [r2, #208]	; 0xd0
    eee8:	e58230c4 	str	r3, [r2, #196]	; 0xc4
    eeec:	e58230bc 	str	r3, [r2, #188]	; 0xbc
    eef0:	e582c0c0 	str	ip, [r2, #192]	; 0xc0
    eef4:	e582c0d4 	str	ip, [r2, #212]	; 0xd4
    eef8:	e8bd8070 	pop	{r4, r5, r6, pc}
    eefc:	00015034 	.word	0x00015034

0000ef00 <CSerialDevice::Initialize(unsigned int)>:
    ef00:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    ef04:	e1a07001 	mov	r7, r1
    ef08:	e1a04000 	mov	r4, r0
    ef0c:	ebfffaba 	bl	d9fc <CMachineInfo::Get()>
    ef10:	e3a01002 	mov	r1, #2
    ef14:	ebfffa58 	bl	d87c <CMachineInfo::GetClockRate(unsigned int) const>
    ef18:	e2508000 	subs	r8, r0, #0
    ef1c:	0a000051 	beq	f068 <CSerialDevice::Initialize(unsigned int)+0x168>
    ef20:	e59f3154 	ldr	r3, [pc, #340]	; f07c <CSerialDevice::Initialize(unsigned int)+0x17c>
    ef24:	e2472f4b 	sub	r2, r7, #300	; 0x12c
    ef28:	e1520003 	cmp	r2, r3
    ef2c:	8a000048 	bhi	f054 <CSerialDevice::Initialize(unsigned int)+0x154>
    ef30:	e1a05207 	lsl	r5, r7, #4
    ef34:	e1a01005 	mov	r1, r5
    ef38:	e1a00008 	mov	r0, r8
    ef3c:	ebffedf1 	bl	a708 <__udivsi3>
    ef40:	e59f3138 	ldr	r3, [pc, #312]	; f080 <CSerialDevice::Initialize(unsigned int)+0x180>
    ef44:	e2402001 	sub	r2, r0, #1
    ef48:	e1520003 	cmp	r2, r3
    ef4c:	e1a06000 	mov	r6, r0
    ef50:	8a00003a 	bhi	f040 <CSerialDevice::Initialize(unsigned int)+0x140>
    ef54:	e1a01005 	mov	r1, r5
    ef58:	e1a00008 	mov	r0, r8
    ef5c:	ebffee26 	bl	a7fc <__aeabi_uidivmod>
    ef60:	e1a00181 	lsl	r0, r1, #3
    ef64:	e1a01007 	mov	r1, r7
    ef68:	ebffede6 	bl	a708 <__udivsi3>
    ef6c:	e2005001 	and	r5, r0, #1
    ef70:	e08550a0 	add	r5, r5, r0, lsr #1
    ef74:	e355003f 	cmp	r5, #63	; 0x3f
    ef78:	8a00002b 	bhi	f02c <CSerialDevice::Initialize(unsigned int)+0x12c>
    ef7c:	e59400a4 	ldr	r0, [r4, #164]	; 0xa4
    ef80:	e3500000 	cmp	r0, #0
    ef84:	0a000008 	beq	efac <CSerialDevice::Initialize(unsigned int)+0xac>
    ef88:	e5d430a8 	ldrb	r3, [r4, #168]	; 0xa8
    ef8c:	e59f20f0 	ldr	r2, [pc, #240]	; f084 <CSerialDevice::Initialize(unsigned int)+0x184>
    ef90:	e3530000 	cmp	r3, #0
    ef94:	e3a01039 	mov	r1, #57	; 0x39
    ef98:	e1a03004 	mov	r3, r4
    ef9c:	0a000020 	beq	f024 <CSerialDevice::Initialize(unsigned int)+0x124>
    efa0:	ebfff5ac 	bl	c658 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>
    efa4:	e3a03001 	mov	r3, #1
    efa8:	e5c430a9 	strb	r3, [r4, #169]	; 0xa9
    efac:	e3a02000 	mov	r2, #0
    efb0:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
    efb4:	e59400a4 	ldr	r0, [r4, #164]	; 0xa4
    efb8:	e59f30c8 	ldr	r3, [pc, #200]	; f088 <CSerialDevice::Initialize(unsigned int)+0x188>
    efbc:	e59f10c8 	ldr	r1, [pc, #200]	; f08c <CSerialDevice::Initialize(unsigned int)+0x18c>
    efc0:	e1500002 	cmp	r0, r2
    efc4:	e5832038 	str	r2, [r3, #56]	; 0x38
    efc8:	13a00009 	movne	r0, #9
    efcc:	e5831044 	str	r1, [r3, #68]	; 0x44
    efd0:	13a02e45 	movne	r2, #1104	; 0x450
    efd4:	03a02060 	moveq	r2, #96	; 0x60
    efd8:	13a01070 	movne	r1, #112	; 0x70
    efdc:	e5836024 	str	r6, [r3, #36]	; 0x24
    efe0:	e5835028 	str	r5, [r3, #40]	; 0x28
    efe4:	15830034 	strne	r0, [r3, #52]	; 0x34
    efe8:	0583202c 	streq	r2, [r3, #44]	; 0x2c
    efec:	1583102c 	strne	r1, [r3, #44]	; 0x2c
    eff0:	15832038 	strne	r2, [r3, #56]	; 0x38
    eff4:	e59f308c 	ldr	r3, [pc, #140]	; f088 <CSerialDevice::Initialize(unsigned int)+0x188>
    eff8:	e59f2090 	ldr	r2, [pc, #144]	; f090 <CSerialDevice::Initialize(unsigned int)+0x190>
    effc:	e3a05000 	mov	r5, #0
    f000:	e5832030 	str	r2, [r3, #48]	; 0x30
    f004:	ee075fba 	mcr	15, 0, r5, cr7, cr10, {5}
    f008:	ebfff0c4 	bl	b320 <CDeviceNameService::Get()>
    f00c:	e1a03005 	mov	r3, r5
    f010:	e1a02004 	mov	r2, r4
    f014:	e59f1078 	ldr	r1, [pc, #120]	; f094 <CSerialDevice::Initialize(unsigned int)+0x194>
    f018:	ebfff000 	bl	b020 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
    f01c:	e3a00001 	mov	r0, #1
    f020:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f024:	ebfff51e 	bl	c4a4 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    f028:	eaffffdd 	b	efa4 <CSerialDevice::Initialize(unsigned int)+0xa4>
    f02c:	e3a02092 	mov	r2, #146	; 0x92
    f030:	e59f1060 	ldr	r1, [pc, #96]	; f098 <CSerialDevice::Initialize(unsigned int)+0x198>
    f034:	e59f0060 	ldr	r0, [pc, #96]	; f09c <CSerialDevice::Initialize(unsigned int)+0x19c>
    f038:	ebffee89 	bl	aa64 <assertion_failed>
    f03c:	eaffffce 	b	ef7c <CSerialDevice::Initialize(unsigned int)+0x7c>
    f040:	e3a0208f 	mov	r2, #143	; 0x8f
    f044:	e59f104c 	ldr	r1, [pc, #76]	; f098 <CSerialDevice::Initialize(unsigned int)+0x198>
    f048:	e59f0050 	ldr	r0, [pc, #80]	; f0a0 <CSerialDevice::Initialize(unsigned int)+0x1a0>
    f04c:	ebffee84 	bl	aa64 <assertion_failed>
    f050:	eaffffbf 	b	ef54 <CSerialDevice::Initialize(unsigned int)+0x54>
    f054:	e3a0208c 	mov	r2, #140	; 0x8c
    f058:	e59f1038 	ldr	r1, [pc, #56]	; f098 <CSerialDevice::Initialize(unsigned int)+0x198>
    f05c:	e59f0040 	ldr	r0, [pc, #64]	; f0a4 <CSerialDevice::Initialize(unsigned int)+0x1a4>
    f060:	ebffee7f 	bl	aa64 <assertion_failed>
    f064:	eaffffb1 	b	ef30 <CSerialDevice::Initialize(unsigned int)+0x30>
    f068:	e3a0208a 	mov	r2, #138	; 0x8a
    f06c:	e59f1024 	ldr	r1, [pc, #36]	; f098 <CSerialDevice::Initialize(unsigned int)+0x198>
    f070:	e59f0030 	ldr	r0, [pc, #48]	; f0a8 <CSerialDevice::Initialize(unsigned int)+0x1a8>
    f074:	ebffee7a 	bl	aa64 <assertion_failed>
    f078:	eaffffa8 	b	ef20 <CSerialDevice::Initialize(unsigned int)+0x20>
    f07c:	003d07d4 	.word	0x003d07d4
    f080:	0000fffe 	.word	0x0000fffe
    f084:	0000f814 	.word	0x0000f814
    f088:	20201000 	.word	0x20201000
    f08c:	000007ff 	.word	0x000007ff
    f090:	00000301 	.word	0x00000301
    f094:	000140a0 	.word	0x000140a0
    f098:	00015048 	.word	0x00015048
    f09c:	0001408c 	.word	0x0001408c
    f0a0:	00014068 	.word	0x00014068
    f0a4:	0001403c 	.word	0x0001403c
    f0a8:	0001402c 	.word	0x0001402c

0000f0ac <CSerialDevice::GetOptions() const>:
    f0ac:	e2800802 	add	r0, r0, #131072	; 0x20000
    f0b0:	e59000c0 	ldr	r0, [r0, #192]	; 0xc0
    f0b4:	e12fff1e 	bx	lr

0000f0b8 <CSerialDevice::SetOptions(unsigned int)>:
    f0b8:	e2800802 	add	r0, r0, #131072	; 0x20000
    f0bc:	e58010c0 	str	r1, [r0, #192]	; 0xc0
    f0c0:	e12fff1e 	bx	lr

0000f0c4 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())>:
    f0c4:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
    f0c8:	e92d4070 	push	{r4, r5, r6, lr}
    f0cc:	e3530000 	cmp	r3, #0
    f0d0:	e1a04000 	mov	r4, r0
    f0d4:	e1a05001 	mov	r5, r1
    f0d8:	e1a06002 	mov	r6, r2
    f0dc:	0a00001d 	beq	f158 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x94>
    f0e0:	e2844802 	add	r4, r4, #131072	; 0x20000
    f0e4:	e59430c4 	ldr	r3, [r4, #196]	; 0xc4
    f0e8:	e3530000 	cmp	r3, #0
    f0ec:	0a000003 	beq	f100 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x3c>
    f0f0:	e59f2088 	ldr	r2, [pc, #136]	; f180 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xbc>
    f0f4:	e59f1088 	ldr	r1, [pc, #136]	; f184 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc0>
    f0f8:	e59f0088 	ldr	r0, [pc, #136]	; f188 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc4>
    f0fc:	ebffee58 	bl	aa64 <assertion_failed>
    f100:	e3550000 	cmp	r5, #0
    f104:	0a000018 	beq	f16c <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xa8>
    f108:	e1d530d0 	ldrsb	r3, [r5]
    f10c:	e3530000 	cmp	r3, #0
    f110:	0a000005 	beq	f12c <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x68>
    f114:	e3560000 	cmp	r6, #0
    f118:	0a000009 	beq	f144 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x80>
    f11c:	e58460cc 	str	r6, [r4, #204]	; 0xcc
    f120:	e58450c8 	str	r5, [r4, #200]	; 0xc8
    f124:	e58450c4 	str	r5, [r4, #196]	; 0xc4
    f128:	e8bd8070 	pop	{r4, r5, r6, pc}
    f12c:	e3a02f57 	mov	r2, #348	; 0x15c
    f130:	e59f104c 	ldr	r1, [pc, #76]	; f184 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc0>
    f134:	e59f0050 	ldr	r0, [pc, #80]	; f18c <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc8>
    f138:	ebffee49 	bl	aa64 <assertion_failed>
    f13c:	e3560000 	cmp	r6, #0
    f140:	1afffff5 	bne	f11c <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x58>
    f144:	e59f2044 	ldr	r2, [pc, #68]	; f190 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xcc>
    f148:	e59f1034 	ldr	r1, [pc, #52]	; f184 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc0>
    f14c:	e59f0040 	ldr	r0, [pc, #64]	; f194 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xd0>
    f150:	ebffee43 	bl	aa64 <assertion_failed>
    f154:	eafffff0 	b	f11c <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x58>
    f158:	e3a02f56 	mov	r2, #344	; 0x158
    f15c:	e59f1020 	ldr	r1, [pc, #32]	; f184 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc0>
    f160:	e59f0030 	ldr	r0, [pc, #48]	; f198 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xd4>
    f164:	ebffee3e 	bl	aa64 <assertion_failed>
    f168:	eaffffdc 	b	f0e0 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x1c>
    f16c:	e59f2028 	ldr	r2, [pc, #40]	; f19c <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xd8>
    f170:	e59f100c 	ldr	r1, [pc, #12]	; f184 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc0>
    f174:	e59f0024 	ldr	r0, [pc, #36]	; f1a0 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xdc>
    f178:	ebffee39 	bl	aa64 <assertion_failed>
    f17c:	eaffffe1 	b	f108 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x44>
    f180:	00000159 	.word	0x00000159
    f184:	00015048 	.word	0x00015048
    f188:	000140c0 	.word	0x000140c0
    f18c:	000140dc 	.word	0x000140dc
    f190:	0000015d 	.word	0x0000015d
    f194:	00014b84 	.word	0x00014b84
    f198:	000140a8 	.word	0x000140a8
    f19c:	0000015b 	.word	0x0000015b
    f1a0:	000140d0 	.word	0x000140d0

0000f1a4 <CSerialDevice::AvailableForWrite()>:
    f1a4:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
    f1a8:	e92d4010 	push	{r4, lr}
    f1ac:	e3530000 	cmp	r3, #0
    f1b0:	e1a04000 	mov	r4, r0
    f1b4:	0a000014 	beq	f20c <CSerialDevice::AvailableForWrite()+0x68>
    f1b8:	e2844802 	add	r4, r4, #131072	; 0x20000
    f1bc:	e59400d0 	ldr	r0, [r4, #208]	; 0xd0
    f1c0:	e3500000 	cmp	r0, #0
    f1c4:	1a00000d 	bne	f200 <CSerialDevice::AvailableForWrite()+0x5c>
    f1c8:	e59420bc 	ldr	r2, [r4, #188]	; 0xbc
    f1cc:	e59430b8 	ldr	r3, [r4, #184]	; 0xb8
    f1d0:	e1520003 	cmp	r2, r3
    f1d4:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    f1d8:	e59420b8 	ldr	r2, [r4, #184]	; 0xb8
    f1dc:	92834cff 	addls	r4, r3, #65280	; 0xff00
    f1e0:	928440ff 	addls	r4, r4, #255	; 0xff
    f1e4:	82434001 	subhi	r4, r3, #1
    f1e8:	e3500000 	cmp	r0, #0
    f1ec:	e0444002 	sub	r4, r4, r2
    f1f0:	0a000000 	beq	f1f8 <CSerialDevice::AvailableForWrite()+0x54>
    f1f4:	eb000d39 	bl	126e0 <LeaveCritical>
    f1f8:	e1a00004 	mov	r0, r4
    f1fc:	e8bd8010 	pop	{r4, pc}
    f200:	eb000d09 	bl	1262c <EnterCritical>
    f204:	e59400d0 	ldr	r0, [r4, #208]	; 0xd0
    f208:	eaffffee 	b	f1c8 <CSerialDevice::AvailableForWrite()+0x24>
    f20c:	e59f200c 	ldr	r2, [pc, #12]	; f220 <CSerialDevice::AvailableForWrite()+0x7c>
    f210:	e59f100c 	ldr	r1, [pc, #12]	; f224 <CSerialDevice::AvailableForWrite()+0x80>
    f214:	e59f000c 	ldr	r0, [pc, #12]	; f228 <CSerialDevice::AvailableForWrite()+0x84>
    f218:	ebffee11 	bl	aa64 <assertion_failed>
    f21c:	eaffffe5 	b	f1b8 <CSerialDevice::AvailableForWrite()+0x14>
    f220:	00000167 	.word	0x00000167
    f224:	00015048 	.word	0x00015048
    f228:	000140a8 	.word	0x000140a8

0000f22c <CSerialDevice::AvailableForRead()>:
    f22c:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
    f230:	e92d4070 	push	{r4, r5, r6, lr}
    f234:	e3530000 	cmp	r3, #0
    f238:	e1a04000 	mov	r4, r0
    f23c:	0a000013 	beq	f290 <CSerialDevice::AvailableForRead()+0x64>
    f240:	e2845802 	add	r5, r4, #131072	; 0x20000
    f244:	e59500d0 	ldr	r0, [r5, #208]	; 0xd0
    f248:	e3500000 	cmp	r0, #0
    f24c:	1a00000c 	bne	f284 <CSerialDevice::AvailableForRead()+0x58>
    f250:	e2843801 	add	r3, r4, #65536	; 0x10000
    f254:	e59310ac 	ldr	r1, [r3, #172]	; 0xac
    f258:	e59320b0 	ldr	r2, [r3, #176]	; 0xb0
    f25c:	e59340ac 	ldr	r4, [r3, #172]	; 0xac
    f260:	e1510002 	cmp	r1, r2
    f264:	e59330b0 	ldr	r3, [r3, #176]	; 0xb0
    f268:	32844801 	addcc	r4, r4, #65536	; 0x10000
    f26c:	e3500000 	cmp	r0, #0
    f270:	e0444003 	sub	r4, r4, r3
    f274:	0a000000 	beq	f27c <CSerialDevice::AvailableForRead()+0x50>
    f278:	eb000d18 	bl	126e0 <LeaveCritical>
    f27c:	e1a00004 	mov	r0, r4
    f280:	e8bd8070 	pop	{r4, r5, r6, pc}
    f284:	eb000ce8 	bl	1262c <EnterCritical>
    f288:	e59500d0 	ldr	r0, [r5, #208]	; 0xd0
    f28c:	eaffffef 	b	f250 <CSerialDevice::AvailableForRead()+0x24>
    f290:	e3a02f5f 	mov	r2, #380	; 0x17c
    f294:	e59f1008 	ldr	r1, [pc, #8]	; f2a4 <CSerialDevice::AvailableForRead()+0x78>
    f298:	e59f0008 	ldr	r0, [pc, #8]	; f2a8 <CSerialDevice::AvailableForRead()+0x7c>
    f29c:	ebffedf0 	bl	aa64 <assertion_failed>
    f2a0:	eaffffe6 	b	f240 <CSerialDevice::AvailableForRead()+0x14>
    f2a4:	00015048 	.word	0x00015048
    f2a8:	000140a8 	.word	0x000140a8

0000f2ac <CSerialDevice::Peek()>:
    f2ac:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
    f2b0:	e92d4070 	push	{r4, r5, r6, lr}
    f2b4:	e3530000 	cmp	r3, #0
    f2b8:	e1a04000 	mov	r4, r0
    f2bc:	0a00001a 	beq	f32c <CSerialDevice::Peek()+0x80>
    f2c0:	e2845802 	add	r5, r4, #131072	; 0x20000
    f2c4:	e59520d0 	ldr	r2, [r5, #208]	; 0xd0
    f2c8:	e3520000 	cmp	r2, #0
    f2cc:	1a00000c 	bne	f304 <CSerialDevice::Peek()+0x58>
    f2d0:	e2843801 	add	r3, r4, #65536	; 0x10000
    f2d4:	e59300ac 	ldr	r0, [r3, #172]	; 0xac
    f2d8:	e59310b0 	ldr	r1, [r3, #176]	; 0xb0
    f2dc:	e1500001 	cmp	r0, r1
    f2e0:	0a000016 	beq	f340 <CSerialDevice::Peek()+0x94>
    f2e4:	e59330b0 	ldr	r3, [r3, #176]	; 0xb0
    f2e8:	e0844003 	add	r4, r4, r3
    f2ec:	e5d440aa 	ldrb	r4, [r4, #170]	; 0xaa
    f2f0:	e3520000 	cmp	r2, #0
    f2f4:	0a000000 	beq	f2fc <CSerialDevice::Peek()+0x50>
    f2f8:	eb000cf8 	bl	126e0 <LeaveCritical>
    f2fc:	e1a00004 	mov	r0, r4
    f300:	e8bd8070 	pop	{r4, r5, r6, pc}
    f304:	e1a00002 	mov	r0, r2
    f308:	eb000cc7 	bl	1262c <EnterCritical>
    f30c:	e2843801 	add	r3, r4, #65536	; 0x10000
    f310:	e59310ac 	ldr	r1, [r3, #172]	; 0xac
    f314:	e59320b0 	ldr	r2, [r3, #176]	; 0xb0
    f318:	e1510002 	cmp	r1, r2
    f31c:	03e04000 	mvneq	r4, #0
    f320:	e59520d0 	ldr	r2, [r5, #208]	; 0xd0
    f324:	1affffee 	bne	f2e4 <CSerialDevice::Peek()+0x38>
    f328:	eafffff0 	b	f2f0 <CSerialDevice::Peek()+0x44>
    f32c:	e59f2014 	ldr	r2, [pc, #20]	; f348 <CSerialDevice::Peek()+0x9c>
    f330:	e59f1014 	ldr	r1, [pc, #20]	; f34c <CSerialDevice::Peek()+0xa0>
    f334:	e59f0014 	ldr	r0, [pc, #20]	; f350 <CSerialDevice::Peek()+0xa4>
    f338:	ebffedc9 	bl	aa64 <assertion_failed>
    f33c:	eaffffdf 	b	f2c0 <CSerialDevice::Peek()+0x14>
    f340:	e3e04000 	mvn	r4, #0
    f344:	eaffffec 	b	f2fc <CSerialDevice::Peek()+0x50>
    f348:	00000191 	.word	0x00000191
    f34c:	00015048 	.word	0x00015048
    f350:	000140a8 	.word	0x000140a8

0000f354 <CSerialDevice::Flush()>:
    f354:	e3a03000 	mov	r3, #0
    f358:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    f35c:	e59f2010 	ldr	r2, [pc, #16]	; f374 <CSerialDevice::Flush()+0x20>
    f360:	e5923018 	ldr	r3, [r2, #24]
    f364:	e2133008 	ands	r3, r3, #8
    f368:	1afffffc 	bne	f360 <CSerialDevice::Flush()+0xc>
    f36c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    f370:	e12fff1e 	bx	lr
    f374:	20201000 	.word	0x20201000

0000f378 <CSerialDevice::Write(unsigned char)>:
    f378:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
    f37c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    f380:	e3530000 	cmp	r3, #0
    f384:	0a000029 	beq	f430 <CSerialDevice::Write(unsigned char)+0xb8>
    f388:	e2805802 	add	r5, r0, #131072	; 0x20000
    f38c:	e1a04000 	mov	r4, r0
    f390:	e59500d0 	ldr	r0, [r5, #208]	; 0xd0
    f394:	e1a06001 	mov	r6, r1
    f398:	e3500000 	cmp	r0, #0
    f39c:	1a000016 	bne	f3fc <CSerialDevice::Write(unsigned char)+0x84>
    f3a0:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
    f3a4:	e59510bc 	ldr	r1, [r5, #188]	; 0xbc
    f3a8:	e2833001 	add	r3, r3, #1
    f3ac:	e6ff3073 	uxth	r3, r3
    f3b0:	e1530001 	cmp	r3, r1
    f3b4:	0a00001a 	beq	f424 <CSerialDevice::Write(unsigned char)+0xac>
    f3b8:	e3a07001 	mov	r7, #1
    f3bc:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
    f3c0:	e0844003 	add	r4, r4, r3
    f3c4:	e2844801 	add	r4, r4, #65536	; 0x10000
    f3c8:	e0833007 	add	r3, r3, r7
    f3cc:	e58530b8 	str	r3, [r5, #184]	; 0xb8
    f3d0:	e5c460b8 	strb	r6, [r4, #184]	; 0xb8
    f3d4:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
    f3d8:	e6ff3073 	uxth	r3, r3
    f3dc:	e58530b8 	str	r3, [r5, #184]	; 0xb8
    f3e0:	e3500000 	cmp	r0, #0
    f3e4:	1a000001 	bne	f3f0 <CSerialDevice::Write(unsigned char)+0x78>
    f3e8:	e1a00007 	mov	r0, r7
    f3ec:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f3f0:	eb000cba 	bl	126e0 <LeaveCritical>
    f3f4:	e1a00007 	mov	r0, r7
    f3f8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f3fc:	eb000c8a 	bl	1262c <EnterCritical>
    f400:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
    f404:	e59520bc 	ldr	r2, [r5, #188]	; 0xbc
    f408:	e2833001 	add	r3, r3, #1
    f40c:	e6ff3073 	uxth	r3, r3
    f410:	e1530002 	cmp	r3, r2
    f414:	e59500d0 	ldr	r0, [r5, #208]	; 0xd0
    f418:	03a07000 	moveq	r7, #0
    f41c:	1affffe5 	bne	f3b8 <CSerialDevice::Write(unsigned char)+0x40>
    f420:	eaffffee 	b	f3e0 <CSerialDevice::Write(unsigned char)+0x68>
    f424:	e1a07000 	mov	r7, r0
    f428:	e1a00007 	mov	r0, r7
    f42c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f430:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    f434:	e59f201c 	ldr	r2, [pc, #28]	; f458 <CSerialDevice::Write(unsigned char)+0xe0>
    f438:	e5923018 	ldr	r3, [r2, #24]
    f43c:	e2133020 	ands	r3, r3, #32
    f440:	1afffffc 	bne	f438 <CSerialDevice::Write(unsigned char)+0xc0>
    f444:	e5821000 	str	r1, [r2]
    f448:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    f44c:	e3a07001 	mov	r7, #1
    f450:	e1a00007 	mov	r0, r7
    f454:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f458:	20201000 	.word	0x20201000

0000f45c <CSerialDevice::Write(void const*, unsigned int)>:
    f45c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    f460:	e2804802 	add	r4, r0, #131072	; 0x20000
    f464:	e1a07000 	mov	r7, r0
    f468:	e59400d4 	ldr	r0, [r4, #212]	; 0xd4
    f46c:	e1a05001 	mov	r5, r1
    f470:	e3500000 	cmp	r0, #0
    f474:	e1a08002 	mov	r8, r2
    f478:	1a000054 	bne	f5d0 <CSerialDevice::Write(void const*, unsigned int)+0x174>
    f47c:	e3550000 	cmp	r5, #0
    f480:	0a00005a 	beq	f5f0 <CSerialDevice::Write(void const*, unsigned int)+0x194>
    f484:	e3580000 	cmp	r8, #0
    f488:	0a00005d 	beq	f604 <CSerialDevice::Write(void const*, unsigned int)+0x1a8>
    f48c:	e3a06000 	mov	r6, #0
    f490:	e3a0900d 	mov	r9, #13
    f494:	ea000002 	b	f4a4 <CSerialDevice::Write(void const*, unsigned int)+0x48>
    f498:	e2866001 	add	r6, r6, #1
    f49c:	e1560008 	cmp	r6, r8
    f4a0:	0a00000f 	beq	f4e4 <CSerialDevice::Write(void const*, unsigned int)+0x88>
    f4a4:	e5d51000 	ldrb	r1, [r5]
    f4a8:	e1a00007 	mov	r0, r7
    f4ac:	ebffffb1 	bl	f378 <CSerialDevice::Write(unsigned char)>
    f4b0:	e3500000 	cmp	r0, #0
    f4b4:	0a00000a 	beq	f4e4 <CSerialDevice::Write(void const*, unsigned int)+0x88>
    f4b8:	e4d53001 	ldrb	r3, [r5], #1
    f4bc:	e353000a 	cmp	r3, #10
    f4c0:	1afffff4 	bne	f498 <CSerialDevice::Write(void const*, unsigned int)+0x3c>
    f4c4:	e59430c0 	ldr	r3, [r4, #192]	; 0xc0
    f4c8:	e3130001 	tst	r3, #1
    f4cc:	0afffff1 	beq	f498 <CSerialDevice::Write(void const*, unsigned int)+0x3c>
    f4d0:	e1a01009 	mov	r1, r9
    f4d4:	e1a00007 	mov	r0, r7
    f4d8:	ebffffa6 	bl	f378 <CSerialDevice::Write(unsigned char)>
    f4dc:	e3500000 	cmp	r0, #0
    f4e0:	1affffec 	bne	f498 <CSerialDevice::Write(void const*, unsigned int)+0x3c>
    f4e4:	e59430d4 	ldr	r3, [r4, #212]	; 0xd4
    f4e8:	e3530000 	cmp	r3, #0
    f4ec:	1a000035 	bne	f5c8 <CSerialDevice::Write(void const*, unsigned int)+0x16c>
    f4f0:	e59730a4 	ldr	r3, [r7, #164]	; 0xa4
    f4f4:	e3530000 	cmp	r3, #0
    f4f8:	0a000028 	beq	f5a0 <CSerialDevice::Write(void const*, unsigned int)+0x144>
    f4fc:	e59400d0 	ldr	r0, [r4, #208]	; 0xd0
    f500:	e3500000 	cmp	r0, #0
    f504:	1a000033 	bne	f5d8 <CSerialDevice::Write(void const*, unsigned int)+0x17c>
    f508:	e59420b8 	ldr	r2, [r4, #184]	; 0xb8
    f50c:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    f510:	e1520003 	cmp	r2, r3
    f514:	0a000021 	beq	f5a0 <CSerialDevice::Write(void const*, unsigned int)+0x144>
    f518:	e3a03000 	mov	r3, #0
    f51c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    f520:	e59430b8 	ldr	r3, [r4, #184]	; 0xb8
    f524:	e59420bc 	ldr	r2, [r4, #188]	; 0xbc
    f528:	e1520003 	cmp	r2, r3
    f52c:	0a000016 	beq	f58c <CSerialDevice::Write(void const*, unsigned int)+0x130>
    f530:	e59f20d4 	ldr	r2, [pc, #212]	; f60c <CSerialDevice::Write(void const*, unsigned int)+0x1b0>
    f534:	e5923018 	ldr	r3, [r2, #24]
    f538:	e3130020 	tst	r3, #32
    f53c:	1a00001c 	bne	f5b4 <CSerialDevice::Write(void const*, unsigned int)+0x158>
    f540:	e59f00c8 	ldr	r0, [pc, #200]	; f610 <CSerialDevice::Write(void const*, unsigned int)+0x1b4>
    f544:	ea000002 	b	f554 <CSerialDevice::Write(void const*, unsigned int)+0xf8>
    f548:	e5923018 	ldr	r3, [r2, #24]
    f54c:	e3130020 	tst	r3, #32
    f550:	1a000017 	bne	f5b4 <CSerialDevice::Write(void const*, unsigned int)+0x158>
    f554:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    f558:	e2831001 	add	r1, r3, #1
    f55c:	e0873003 	add	r3, r7, r3
    f560:	e58410bc 	str	r1, [r4, #188]	; 0xbc
    f564:	e2833801 	add	r3, r3, #65536	; 0x10000
    f568:	e5d330b8 	ldrb	r3, [r3, #184]	; 0xb8
    f56c:	e5823000 	str	r3, [r2]
    f570:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    f574:	e0033000 	and	r3, r3, r0
    f578:	e58430bc 	str	r3, [r4, #188]	; 0xbc
    f57c:	e59410b8 	ldr	r1, [r4, #184]	; 0xb8
    f580:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    f584:	e1510003 	cmp	r1, r3
    f588:	1affffee 	bne	f548 <CSerialDevice::Write(void const*, unsigned int)+0xec>
    f58c:	e3a03000 	mov	r3, #0
    f590:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    f594:	e59430d0 	ldr	r3, [r4, #208]	; 0xd0
    f598:	e3530000 	cmp	r3, #0
    f59c:	1a000001 	bne	f5a8 <CSerialDevice::Write(void const*, unsigned int)+0x14c>
    f5a0:	e1a00006 	mov	r0, r6
    f5a4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    f5a8:	eb000c4c 	bl	126e0 <LeaveCritical>
    f5ac:	e1a00006 	mov	r0, r6
    f5b0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    f5b4:	e59f2050 	ldr	r2, [pc, #80]	; f60c <CSerialDevice::Write(void const*, unsigned int)+0x1b0>
    f5b8:	e5923038 	ldr	r3, [r2, #56]	; 0x38
    f5bc:	e3833020 	orr	r3, r3, #32
    f5c0:	e5823038 	str	r3, [r2, #56]	; 0x38
    f5c4:	eafffff0 	b	f58c <CSerialDevice::Write(void const*, unsigned int)+0x130>
    f5c8:	eb000c44 	bl	126e0 <LeaveCritical>
    f5cc:	eaffffc7 	b	f4f0 <CSerialDevice::Write(void const*, unsigned int)+0x94>
    f5d0:	eb000c15 	bl	1262c <EnterCritical>
    f5d4:	eaffffa8 	b	f47c <CSerialDevice::Write(void const*, unsigned int)+0x20>
    f5d8:	eb000c13 	bl	1262c <EnterCritical>
    f5dc:	e59420b8 	ldr	r2, [r4, #184]	; 0xb8
    f5e0:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    f5e4:	e1520003 	cmp	r2, r3
    f5e8:	1affffca 	bne	f518 <CSerialDevice::Write(void const*, unsigned int)+0xbc>
    f5ec:	eaffffe8 	b	f594 <CSerialDevice::Write(void const*, unsigned int)+0x138>
    f5f0:	e3a020c3 	mov	r2, #195	; 0xc3
    f5f4:	e59f1018 	ldr	r1, [pc, #24]	; f614 <CSerialDevice::Write(void const*, unsigned int)+0x1b8>
    f5f8:	e59f0018 	ldr	r0, [pc, #24]	; f618 <CSerialDevice::Write(void const*, unsigned int)+0x1bc>
    f5fc:	ebffed18 	bl	aa64 <assertion_failed>
    f600:	eaffff9f 	b	f484 <CSerialDevice::Write(void const*, unsigned int)+0x28>
    f604:	e1a06008 	mov	r6, r8
    f608:	eaffffb5 	b	f4e4 <CSerialDevice::Write(void const*, unsigned int)+0x88>
    f60c:	20201000 	.word	0x20201000
    f610:	0000ffff 	.word	0x0000ffff
    f614:	00015048 	.word	0x00015048
    f618:	00014020 	.word	0x00014020

0000f61c <CSerialDevice::InterruptHandler()>:
    f61c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f620:	e2804802 	add	r4, r0, #131072	; 0x20000
    f624:	e1a05000 	mov	r5, r0
    f628:	e59400d0 	ldr	r0, [r4, #208]	; 0xd0
    f62c:	e24dd004 	sub	sp, sp, #4
    f630:	e3500000 	cmp	r0, #0
    f634:	1a000070 	bne	f7fc <CSerialDevice::InterruptHandler()+0x1e0>
    f638:	e3a06000 	mov	r6, #0
    f63c:	ee076f9a 	mcr	15, 0, r6, cr7, cr10, {4}
    f640:	e59f21c4 	ldr	r2, [pc, #452]	; f80c <CSerialDevice::InterruptHandler()+0x1f0>
    f644:	e3e08002 	mvn	r8, #2
    f648:	e1a00002 	mov	r0, r2
    f64c:	e3e0e001 	mvn	lr, #1
    f650:	e3e07000 	mvn	r7, #0
    f654:	e5921040 	ldr	r1, [r2, #64]	; 0x40
    f658:	e59fc1b0 	ldr	ip, [pc, #432]	; f810 <CSerialDevice::InterruptHandler()+0x1f4>
    f65c:	e2853801 	add	r3, r5, #65536	; 0x10000
    f660:	e5821044 	str	r1, [r2, #68]	; 0x44
    f664:	e5902018 	ldr	r2, [r0, #24]
    f668:	e3120010 	tst	r2, #16
    f66c:	1a00001f 	bne	f6f0 <CSerialDevice::InterruptHandler()+0xd4>
    f670:	e5901000 	ldr	r1, [r0]
    f674:	e3110b01 	tst	r1, #1024	; 0x400
    f678:	0a000040 	beq	f780 <CSerialDevice::InterruptHandler()+0x164>
    f67c:	e59320b4 	ldr	r2, [r3, #180]	; 0xb4
    f680:	e3520000 	cmp	r2, #0
    f684:	058370b4 	streq	r7, [r3, #180]	; 0xb4
    f688:	e59490c4 	ldr	r9, [r4, #196]	; 0xc4
    f68c:	e3590000 	cmp	r9, #0
    f690:	0a000005 	beq	f6ac <CSerialDevice::InterruptHandler()+0x90>
    f694:	e594a0c8 	ldr	sl, [r4, #200]	; 0xc8
    f698:	e6af2071 	sxtb	r2, r1
    f69c:	e1dab0d0 	ldrsb	fp, [sl]
    f6a0:	e15b0002 	cmp	fp, r2
    f6a4:	158490c8 	strne	r9, [r4, #200]	; 0xc8
    f6a8:	0a000044 	beq	f7c0 <CSerialDevice::InterruptHandler()+0x1a4>
    f6ac:	e59320ac 	ldr	r2, [r3, #172]	; 0xac
    f6b0:	e59390b0 	ldr	r9, [r3, #176]	; 0xb0
    f6b4:	e2822001 	add	r2, r2, #1
    f6b8:	e002200c 	and	r2, r2, ip
    f6bc:	e1520009 	cmp	r2, r9
    f6c0:	0a000034 	beq	f798 <CSerialDevice::InterruptHandler()+0x17c>
    f6c4:	e59320ac 	ldr	r2, [r3, #172]	; 0xac
    f6c8:	e2829001 	add	r9, r2, #1
    f6cc:	e0852002 	add	r2, r5, r2
    f6d0:	e58390ac 	str	r9, [r3, #172]	; 0xac
    f6d4:	e5c210aa 	strb	r1, [r2, #170]	; 0xaa
    f6d8:	e59320ac 	ldr	r2, [r3, #172]	; 0xac
    f6dc:	e002200c 	and	r2, r2, ip
    f6e0:	e58320ac 	str	r2, [r3, #172]	; 0xac
    f6e4:	e5902018 	ldr	r2, [r0, #24]
    f6e8:	e3120010 	tst	r2, #16
    f6ec:	0affffdf 	beq	f670 <CSerialDevice::InterruptHandler()+0x54>
    f6f0:	e5903018 	ldr	r3, [r0, #24]
    f6f4:	e3130020 	tst	r3, #32
    f6f8:	1a000017 	bne	f75c <CSerialDevice::InterruptHandler()+0x140>
    f6fc:	e59420b8 	ldr	r2, [r4, #184]	; 0xb8
    f700:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    f704:	e1520003 	cmp	r2, r3
    f708:	0a000032 	beq	f7d8 <CSerialDevice::InterruptHandler()+0x1bc>
    f70c:	e59f20f8 	ldr	r2, [pc, #248]	; f80c <CSerialDevice::InterruptHandler()+0x1f0>
    f710:	e59f00f8 	ldr	r0, [pc, #248]	; f810 <CSerialDevice::InterruptHandler()+0x1f4>
    f714:	ea000003 	b	f728 <CSerialDevice::InterruptHandler()+0x10c>
    f718:	e59410b8 	ldr	r1, [r4, #184]	; 0xb8
    f71c:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    f720:	e1510003 	cmp	r1, r3
    f724:	0a00002b 	beq	f7d8 <CSerialDevice::InterruptHandler()+0x1bc>
    f728:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    f72c:	e2831001 	add	r1, r3, #1
    f730:	e0853003 	add	r3, r5, r3
    f734:	e58410bc 	str	r1, [r4, #188]	; 0xbc
    f738:	e2833801 	add	r3, r3, #65536	; 0x10000
    f73c:	e5d330b8 	ldrb	r3, [r3, #184]	; 0xb8
    f740:	e5823000 	str	r3, [r2]
    f744:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    f748:	e0033000 	and	r3, r3, r0
    f74c:	e58430bc 	str	r3, [r4, #188]	; 0xbc
    f750:	e5923018 	ldr	r3, [r2, #24]
    f754:	e3130020 	tst	r3, #32
    f758:	0affffee 	beq	f718 <CSerialDevice::InterruptHandler()+0xfc>
    f75c:	e3a03000 	mov	r3, #0
    f760:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    f764:	e59430d0 	ldr	r3, [r4, #208]	; 0xd0
    f768:	e3530000 	cmp	r3, #0
    f76c:	1a000024 	bne	f804 <CSerialDevice::InterruptHandler()+0x1e8>
    f770:	e3560000 	cmp	r6, #0
    f774:	1a00001c 	bne	f7ec <CSerialDevice::InterruptHandler()+0x1d0>
    f778:	e28dd004 	add	sp, sp, #4
    f77c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f780:	e3110b02 	tst	r1, #2048	; 0x800
    f784:	0a000007 	beq	f7a8 <CSerialDevice::InterruptHandler()+0x18c>
    f788:	e59320b4 	ldr	r2, [r3, #180]	; 0xb4
    f78c:	e3520000 	cmp	r2, #0
    f790:	0583e0b4 	streq	lr, [r3, #180]	; 0xb4
    f794:	eaffffbb 	b	f688 <CSerialDevice::InterruptHandler()+0x6c>
    f798:	e59320b4 	ldr	r2, [r3, #180]	; 0xb4
    f79c:	e3520000 	cmp	r2, #0
    f7a0:	0583e0b4 	streq	lr, [r3, #180]	; 0xb4
    f7a4:	eaffffae 	b	f664 <CSerialDevice::InterruptHandler()+0x48>
    f7a8:	e3110c01 	tst	r1, #256	; 0x100
    f7ac:	0affffb5 	beq	f688 <CSerialDevice::InterruptHandler()+0x6c>
    f7b0:	e59320b4 	ldr	r2, [r3, #180]	; 0xb4
    f7b4:	e3520000 	cmp	r2, #0
    f7b8:	058380b4 	streq	r8, [r3, #180]	; 0xb4
    f7bc:	eaffffb1 	b	f688 <CSerialDevice::InterruptHandler()+0x6c>
    f7c0:	e28a2001 	add	r2, sl, #1
    f7c4:	e58420c8 	str	r2, [r4, #200]	; 0xc8
    f7c8:	e1da20d1 	ldrsb	r2, [sl, #1]
    f7cc:	e3520000 	cmp	r2, #0
    f7d0:	03a06001 	moveq	r6, #1
    f7d4:	eaffffb4 	b	f6ac <CSerialDevice::InterruptHandler()+0x90>
    f7d8:	e59f202c 	ldr	r2, [pc, #44]	; f80c <CSerialDevice::InterruptHandler()+0x1f0>
    f7dc:	e5923038 	ldr	r3, [r2, #56]	; 0x38
    f7e0:	e3c33020 	bic	r3, r3, #32
    f7e4:	e5823038 	str	r3, [r2, #56]	; 0x38
    f7e8:	eaffffdb 	b	f75c <CSerialDevice::InterruptHandler()+0x140>
    f7ec:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
    f7f0:	e28dd004 	add	sp, sp, #4
    f7f4:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f7f8:	e12fff13 	bx	r3
    f7fc:	eb000b8a 	bl	1262c <EnterCritical>
    f800:	eaffff8c 	b	f638 <CSerialDevice::InterruptHandler()+0x1c>
    f804:	eb000bb5 	bl	126e0 <LeaveCritical>
    f808:	eaffffd8 	b	f770 <CSerialDevice::InterruptHandler()+0x154>
    f80c:	20201000 	.word	0x20201000
    f810:	0000ffff 	.word	0x0000ffff

0000f814 <CSerialDevice::InterruptStub(void*)>:
    f814:	e92d4010 	push	{r4, lr}
    f818:	e2504000 	subs	r4, r0, #0
    f81c:	0a000002 	beq	f82c <CSerialDevice::InterruptStub(void*)+0x18>
    f820:	e1a00004 	mov	r0, r4
    f824:	e8bd4010 	pop	{r4, lr}
    f828:	eaffff7b 	b	f61c <CSerialDevice::InterruptHandler()>
    f82c:	e59f0014 	ldr	r0, [pc, #20]	; f848 <CSerialDevice::InterruptStub(void*)+0x34>
    f830:	e59f2014 	ldr	r2, [pc, #20]	; f84c <CSerialDevice::InterruptStub(void*)+0x38>
    f834:	e59f1014 	ldr	r1, [pc, #20]	; f850 <CSerialDevice::InterruptStub(void*)+0x3c>
    f838:	ebffec89 	bl	aa64 <assertion_failed>
    f83c:	e1a00004 	mov	r0, r4
    f840:	e8bd4010 	pop	{r4, lr}
    f844:	eaffff74 	b	f61c <CSerialDevice::InterruptHandler()>
    f848:	000140ec 	.word	0x000140ec
    f84c:	0000022e 	.word	0x0000022e
    f850:	00015048 	.word	0x00015048

0000f854 <CSerialDevice::~CSerialDevice()>:
    f854:	e59f20a4 	ldr	r2, [pc, #164]	; f900 <CSerialDevice::~CSerialDevice()+0xac>
    f858:	e92d4010 	push	{r4, lr}
    f85c:	e3a03000 	mov	r3, #0
    f860:	e1a04000 	mov	r4, r0
    f864:	e5802000 	str	r2, [r0]
    f868:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    f86c:	e59f2090 	ldr	r2, [pc, #144]	; f904 <CSerialDevice::~CSerialDevice()+0xb0>
    f870:	e5823038 	str	r3, [r2, #56]	; 0x38
    f874:	e5823030 	str	r3, [r2, #48]	; 0x30
    f878:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    f87c:	e5d030a9 	ldrb	r3, [r0, #169]	; 0xa9
    f880:	e3530000 	cmp	r3, #0
    f884:	0a000006 	beq	f8a4 <CSerialDevice::~CSerialDevice()+0x50>
    f888:	e59000a4 	ldr	r0, [r0, #164]	; 0xa4
    f88c:	e3500000 	cmp	r0, #0
    f890:	0a000014 	beq	f8e8 <CSerialDevice::~CSerialDevice()+0x94>
    f894:	e5d430a8 	ldrb	r3, [r4, #168]	; 0xa8
    f898:	e3530000 	cmp	r3, #0
    f89c:	0a00000e 	beq	f8dc <CSerialDevice::~CSerialDevice()+0x88>
    f8a0:	ebfff2bf 	bl	c3a4 <CInterruptSystem::DisconnectFIQ()>
    f8a4:	e3a03000 	mov	r3, #0
    f8a8:	e284007c 	add	r0, r4, #124	; 0x7c
    f8ac:	e58430a4 	str	r3, [r4, #164]	; 0xa4
    f8b0:	ebffef3a 	bl	b5a0 <CGPIOPin::~CGPIOPin()>
    f8b4:	e2840054 	add	r0, r4, #84	; 0x54
    f8b8:	ebffef38 	bl	b5a0 <CGPIOPin::~CGPIOPin()>
    f8bc:	e284002c 	add	r0, r4, #44	; 0x2c
    f8c0:	ebffef36 	bl	b5a0 <CGPIOPin::~CGPIOPin()>
    f8c4:	e2840004 	add	r0, r4, #4
    f8c8:	ebffef34 	bl	b5a0 <CGPIOPin::~CGPIOPin()>
    f8cc:	e1a00004 	mov	r0, r4
    f8d0:	ebffed95 	bl	af2c <CDevice::~CDevice()>
    f8d4:	e1a00004 	mov	r0, r4
    f8d8:	e8bd8010 	pop	{r4, pc}
    f8dc:	e3a01039 	mov	r1, #57	; 0x39
    f8e0:	ebfff32a 	bl	c590 <CInterruptSystem::DisconnectIRQ(unsigned int)>
    f8e4:	eaffffee 	b	f8a4 <CSerialDevice::~CSerialDevice()+0x50>
    f8e8:	e59f0018 	ldr	r0, [pc, #24]	; f908 <CSerialDevice::~CSerialDevice()+0xb4>
    f8ec:	e3a02079 	mov	r2, #121	; 0x79
    f8f0:	e59f1014 	ldr	r1, [pc, #20]	; f90c <CSerialDevice::~CSerialDevice()+0xb8>
    f8f4:	ebffec5a 	bl	aa64 <assertion_failed>
    f8f8:	e59400a4 	ldr	r0, [r4, #164]	; 0xa4
    f8fc:	eaffffe4 	b	f894 <CSerialDevice::~CSerialDevice()+0x40>
    f900:	00015034 	.word	0x00015034
    f904:	20201000 	.word	0x20201000
    f908:	000140a8 	.word	0x000140a8
    f90c:	00015048 	.word	0x00015048

0000f910 <CSerialDevice::~CSerialDevice()>:
    f910:	e92d4010 	push	{r4, lr}
    f914:	e1a04000 	mov	r4, r0
    f918:	ebffffcd 	bl	f854 <CSerialDevice::~CSerialDevice()>
    f91c:	e1a00004 	mov	r0, r4
    f920:	e59f1008 	ldr	r1, [pc, #8]	; f930 <CSerialDevice::~CSerialDevice()+0x20>
    f924:	eb000b9e 	bl	127a4 <operator delete(void*, unsigned int)>
    f928:	e1a00004 	mov	r0, r4
    f92c:	e8bd8010 	pop	{r4, pc}
    f930:	000200d8 	.word	0x000200d8
    f934:	00000000 	.word	0x00000000

0000f938 <CString::~CString()>:
    f938:	e92d4010 	push	{r4, lr}
    f93c:	e1a04000 	mov	r4, r0
    f940:	e5900004 	ldr	r0, [r0, #4]
    f944:	e59f3014 	ldr	r3, [pc, #20]	; f960 <CString::~CString()+0x28>
    f948:	e3500000 	cmp	r0, #0
    f94c:	e5843000 	str	r3, [r4]
    f950:	0a000000 	beq	f958 <CString::~CString()+0x20>
    f954:	eb000b91 	bl	127a0 <operator delete[](void*)>
    f958:	e1a00004 	mov	r0, r4
    f95c:	e8bd8010 	pop	{r4, pc}
    f960:	0001505c 	.word	0x0001505c

0000f964 <CString::~CString()>:
    f964:	e92d4010 	push	{r4, lr}
    f968:	e1a04000 	mov	r4, r0
    f96c:	e5900004 	ldr	r0, [r0, #4]
    f970:	e59f3020 	ldr	r3, [pc, #32]	; f998 <CString::~CString()+0x34>
    f974:	e3500000 	cmp	r0, #0
    f978:	e5843000 	str	r3, [r4]
    f97c:	0a000000 	beq	f984 <CString::~CString()+0x20>
    f980:	eb000b86 	bl	127a0 <operator delete[](void*)>
    f984:	e1a00004 	mov	r0, r4
    f988:	e3a01010 	mov	r1, #16
    f98c:	eb000b84 	bl	127a4 <operator delete(void*, unsigned int)>
    f990:	e1a00004 	mov	r0, r4
    f994:	e8bd8010 	pop	{r4, pc}
    f998:	0001505c 	.word	0x0001505c

0000f99c <CString::ReserveSpace(unsigned int) [clone .part.0]>:
    f99c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    f9a0:	e990002c 	ldmib	r0, {r2, r3, r5}
    f9a4:	e0455002 	sub	r5, r5, r2
    f9a8:	e0851001 	add	r1, r5, r1
    f9ac:	e2812001 	add	r2, r1, #1
    f9b0:	e1520003 	cmp	r2, r3
    f9b4:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
    f9b8:	e1a04000 	mov	r4, r0
    f9bc:	e2816041 	add	r6, r1, #65	; 0x41
    f9c0:	e1a00006 	mov	r0, r6
    f9c4:	eb000b73 	bl	12798 <operator new[](unsigned int)>
    f9c8:	e3a02000 	mov	r2, #0
    f9cc:	e594300c 	ldr	r3, [r4, #12]
    f9d0:	e1a07000 	mov	r7, r0
    f9d4:	e5c32000 	strb	r2, [r3]
    f9d8:	e5941004 	ldr	r1, [r4, #4]
    f9dc:	eb00084c 	bl	11b14 <strcpy>
    f9e0:	e5940004 	ldr	r0, [r4, #4]
    f9e4:	e3500000 	cmp	r0, #0
    f9e8:	0a000000 	beq	f9f0 <CString::ReserveSpace(unsigned int) [clone .part.0]+0x54>
    f9ec:	eb000b6b 	bl	127a0 <operator delete[](void*)>
    f9f0:	e0875005 	add	r5, r7, r5
    f9f4:	e584500c 	str	r5, [r4, #12]
    f9f8:	e5847004 	str	r7, [r4, #4]
    f9fc:	e5846008 	str	r6, [r4, #8]
    fa00:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000fa04 <CString::CString()>:
    fa04:	e3a02000 	mov	r2, #0
    fa08:	e59f1008 	ldr	r1, [pc, #8]	; fa18 <CString::CString()+0x14>
    fa0c:	e5802008 	str	r2, [r0, #8]
    fa10:	e8800006 	stm	r0, {r1, r2}
    fa14:	e12fff1e 	bx	lr
    fa18:	0001505c 	.word	0x0001505c

0000fa1c <CString::CString(char const*)>:
    fa1c:	e92d4070 	push	{r4, r5, r6, lr}
    fa20:	e1a04000 	mov	r4, r0
    fa24:	e59f302c 	ldr	r3, [pc, #44]	; fa58 <CString::CString(char const*)+0x3c>
    fa28:	e1a00001 	mov	r0, r1
    fa2c:	e5843000 	str	r3, [r4]
    fa30:	e1a05001 	mov	r5, r1
    fa34:	eb0007b8 	bl	1191c <strlen>
    fa38:	e2800001 	add	r0, r0, #1
    fa3c:	e5840008 	str	r0, [r4, #8]
    fa40:	eb000b54 	bl	12798 <operator new[](unsigned int)>
    fa44:	e1a01005 	mov	r1, r5
    fa48:	e5840004 	str	r0, [r4, #4]
    fa4c:	eb000830 	bl	11b14 <strcpy>
    fa50:	e1a00004 	mov	r0, r4
    fa54:	e8bd8070 	pop	{r4, r5, r6, pc}
    fa58:	0001505c 	.word	0x0001505c

0000fa5c <CString::operator char const*() const>:
    fa5c:	e5900004 	ldr	r0, [r0, #4]
    fa60:	e59f3008 	ldr	r3, [pc, #8]	; fa70 <CString::operator char const*() const+0x14>
    fa64:	e3500000 	cmp	r0, #0
    fa68:	01a00003 	moveq	r0, r3
    fa6c:	e12fff1e 	bx	lr
    fa70:	000152f8 	.word	0x000152f8

0000fa74 <CString::operator=(char const*)>:
    fa74:	e92d4070 	push	{r4, r5, r6, lr}
    fa78:	e1a04000 	mov	r4, r0
    fa7c:	e5900004 	ldr	r0, [r0, #4]
    fa80:	e1a05001 	mov	r5, r1
    fa84:	e3500000 	cmp	r0, #0
    fa88:	0a000000 	beq	fa90 <CString::operator=(char const*)+0x1c>
    fa8c:	eb000b43 	bl	127a0 <operator delete[](void*)>
    fa90:	e1a00005 	mov	r0, r5
    fa94:	eb0007a0 	bl	1191c <strlen>
    fa98:	e2800001 	add	r0, r0, #1
    fa9c:	e5840008 	str	r0, [r4, #8]
    faa0:	eb000b3c 	bl	12798 <operator new[](unsigned int)>
    faa4:	e1a01005 	mov	r1, r5
    faa8:	e5840004 	str	r0, [r4, #4]
    faac:	eb000818 	bl	11b14 <strcpy>
    fab0:	e5940004 	ldr	r0, [r4, #4]
    fab4:	e8bd8070 	pop	{r4, r5, r6, pc}

0000fab8 <CString::operator=(CString const&)>:
    fab8:	e92d4070 	push	{r4, r5, r6, lr}
    fabc:	e1a04000 	mov	r4, r0
    fac0:	e5900004 	ldr	r0, [r0, #4]
    fac4:	e1a06001 	mov	r6, r1
    fac8:	e3500000 	cmp	r0, #0
    facc:	0a000000 	beq	fad4 <CString::operator=(CString const&)+0x1c>
    fad0:	eb000b32 	bl	127a0 <operator delete[](void*)>
    fad4:	e5960004 	ldr	r0, [r6, #4]
    fad8:	e59f5030 	ldr	r5, [pc, #48]	; fb10 <CString::operator=(CString const&)+0x58>
    fadc:	e3500000 	cmp	r0, #0
    fae0:	01a00005 	moveq	r0, r5
    fae4:	eb00078c 	bl	1191c <strlen>
    fae8:	e2800001 	add	r0, r0, #1
    faec:	e5840008 	str	r0, [r4, #8]
    faf0:	eb000b28 	bl	12798 <operator new[](unsigned int)>
    faf4:	e5840004 	str	r0, [r4, #4]
    faf8:	e5961004 	ldr	r1, [r6, #4]
    fafc:	e3510000 	cmp	r1, #0
    fb00:	01a01005 	moveq	r1, r5
    fb04:	eb000802 	bl	11b14 <strcpy>
    fb08:	e1a00004 	mov	r0, r4
    fb0c:	e8bd8070 	pop	{r4, r5, r6, pc}
    fb10:	000152f8 	.word	0x000152f8

0000fb14 <CString::GetLength() const>:
    fb14:	e5900004 	ldr	r0, [r0, #4]
    fb18:	e3500000 	cmp	r0, #0
    fb1c:	012fff1e 	bxeq	lr
    fb20:	ea00077d 	b	1191c <strlen>

0000fb24 <CString::Append(char const*)>:
    fb24:	e92d4070 	push	{r4, r5, r6, lr}
    fb28:	e3a03001 	mov	r3, #1
    fb2c:	e1a04000 	mov	r4, r0
    fb30:	e5900004 	ldr	r0, [r0, #4]
    fb34:	e1a06001 	mov	r6, r1
    fb38:	e3500000 	cmp	r0, #0
    fb3c:	e5843008 	str	r3, [r4, #8]
    fb40:	0a000003 	beq	fb54 <CString::Append(char const*)+0x30>
    fb44:	eb000774 	bl	1191c <strlen>
    fb48:	e5943008 	ldr	r3, [r4, #8]
    fb4c:	e0830000 	add	r0, r3, r0
    fb50:	e5840008 	str	r0, [r4, #8]
    fb54:	e1a00006 	mov	r0, r6
    fb58:	eb00076f 	bl	1191c <strlen>
    fb5c:	e5943008 	ldr	r3, [r4, #8]
    fb60:	e0800003 	add	r0, r0, r3
    fb64:	e5840008 	str	r0, [r4, #8]
    fb68:	eb000b0a 	bl	12798 <operator new[](unsigned int)>
    fb6c:	e5941004 	ldr	r1, [r4, #4]
    fb70:	e1a05000 	mov	r5, r0
    fb74:	e3510000 	cmp	r1, #0
    fb78:	05c01000 	strbeq	r1, [r0]
    fb7c:	0a000004 	beq	fb94 <CString::Append(char const*)+0x70>
    fb80:	eb0007e3 	bl	11b14 <strcpy>
    fb84:	e5940004 	ldr	r0, [r4, #4]
    fb88:	e3500000 	cmp	r0, #0
    fb8c:	0a000000 	beq	fb94 <CString::Append(char const*)+0x70>
    fb90:	eb000b02 	bl	127a0 <operator delete[](void*)>
    fb94:	e1a01006 	mov	r1, r6
    fb98:	e1a00005 	mov	r0, r5
    fb9c:	eb0007fa 	bl	11b8c <strcat>
    fba0:	e5845004 	str	r5, [r4, #4]
    fba4:	e8bd8070 	pop	{r4, r5, r6, pc}

0000fba8 <CString::Compare(char const*) const>:
    fba8:	e5900004 	ldr	r0, [r0, #4]
    fbac:	ea000764 	b	11944 <strcmp>

0000fbb0 <CString::Find(char) const>:
    fbb0:	e5902004 	ldr	r2, [r0, #4]
    fbb4:	e1d230d0 	ldrsb	r3, [r2]
    fbb8:	e3530000 	cmp	r3, #0
    fbbc:	0a000009 	beq	fbe8 <CString::Find(char) const+0x38>
    fbc0:	e1510003 	cmp	r1, r3
    fbc4:	e3a00000 	mov	r0, #0
    fbc8:	1a000002 	bne	fbd8 <CString::Find(char) const+0x28>
    fbcc:	ea000007 	b	fbf0 <CString::Find(char) const+0x40>
    fbd0:	e1530001 	cmp	r3, r1
    fbd4:	012fff1e 	bxeq	lr
    fbd8:	e1f230d1 	ldrsb	r3, [r2, #1]!
    fbdc:	e2800001 	add	r0, r0, #1
    fbe0:	e3530000 	cmp	r3, #0
    fbe4:	1afffff9 	bne	fbd0 <CString::Find(char) const+0x20>
    fbe8:	e3e00000 	mvn	r0, #0
    fbec:	e12fff1e 	bx	lr
    fbf0:	e12fff1e 	bx	lr

0000fbf4 <CString::PutChar(char, unsigned int)>:
    fbf4:	e92d4070 	push	{r4, r5, r6, lr}
    fbf8:	e2524000 	subs	r4, r2, #0
    fbfc:	08bd8070 	popeq	{r4, r5, r6, pc}
    fc00:	e1a06001 	mov	r6, r1
    fc04:	e1a01004 	mov	r1, r4
    fc08:	e1a05000 	mov	r5, r0
    fc0c:	ebffff62 	bl	f99c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    fc10:	e2443001 	sub	r3, r4, #1
    fc14:	e595200c 	ldr	r2, [r5, #12]
    fc18:	e2433001 	sub	r3, r3, #1
    fc1c:	e2820001 	add	r0, r2, #1
    fc20:	e3730001 	cmn	r3, #1
    fc24:	e585000c 	str	r0, [r5, #12]
    fc28:	e5c26000 	strb	r6, [r2]
    fc2c:	1afffff8 	bne	fc14 <CString::PutChar(char, unsigned int)+0x20>
    fc30:	e8bd8070 	pop	{r4, r5, r6, pc}

0000fc34 <CString::PutString(char const*)>:
    fc34:	e92d4070 	push	{r4, r5, r6, lr}
    fc38:	e1a04000 	mov	r4, r0
    fc3c:	e1a00001 	mov	r0, r1
    fc40:	e1a05001 	mov	r5, r1
    fc44:	eb000734 	bl	1191c <strlen>
    fc48:	e2506000 	subs	r6, r0, #0
    fc4c:	0a000002 	beq	fc5c <CString::PutString(char const*)+0x28>
    fc50:	e1a01006 	mov	r1, r6
    fc54:	e1a00004 	mov	r0, r4
    fc58:	ebffff4f 	bl	f99c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    fc5c:	e1a01005 	mov	r1, r5
    fc60:	e594000c 	ldr	r0, [r4, #12]
    fc64:	eb0007aa 	bl	11b14 <strcpy>
    fc68:	e594100c 	ldr	r1, [r4, #12]
    fc6c:	e0811006 	add	r1, r1, r6
    fc70:	e584100c 	str	r1, [r4, #12]
    fc74:	e8bd8070 	pop	{r4, r5, r6, pc}

0000fc78 <CString::Replace(char const*, char const*)>:
    fc78:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fc7c:	e1d180d0 	ldrsb	r8, [r1]
    fc80:	e24dd014 	sub	sp, sp, #20
    fc84:	e3580000 	cmp	r8, #0
    fc88:	1a000002 	bne	fc98 <CString::Replace(char const*, char const*)+0x20>
    fc8c:	e1a00008 	mov	r0, r8
    fc90:	e28dd014 	add	sp, sp, #20
    fc94:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fc98:	e1a0a000 	mov	sl, r0
    fc9c:	e1a07001 	mov	r7, r1
    fca0:	e5901004 	ldr	r1, [r0, #4]
    fca4:	e1a0000d 	mov	r0, sp
    fca8:	e1a09002 	mov	r9, r2
    fcac:	ebffff5a 	bl	fa1c <CString::CString(char const*)>
    fcb0:	e59a0004 	ldr	r0, [sl, #4]
    fcb4:	e3500000 	cmp	r0, #0
    fcb8:	0a000000 	beq	fcc0 <CString::Replace(char const*, char const*)+0x48>
    fcbc:	eb000ab7 	bl	127a0 <operator delete[](void*)>
    fcc0:	e3a00040 	mov	r0, #64	; 0x40
    fcc4:	e58a0008 	str	r0, [sl, #8]
    fcc8:	eb000ab2 	bl	12798 <operator new[](unsigned int)>
    fccc:	e3a08000 	mov	r8, #0
    fcd0:	e3a06001 	mov	r6, #1
    fcd4:	e59d4004 	ldr	r4, [sp, #4]
    fcd8:	e58a0004 	str	r0, [sl, #4]
    fcdc:	e58a000c 	str	r0, [sl, #12]
    fce0:	e1d710d0 	ldrsb	r1, [r7]
    fce4:	e1a00004 	mov	r0, r4
    fce8:	eb0007b8 	bl	11bd0 <strchr>
    fcec:	e2505000 	subs	r5, r0, #0
    fcf0:	0a00002d 	beq	fdac <CString::Replace(char const*, char const*)+0x134>
    fcf4:	e1540005 	cmp	r4, r5
    fcf8:	2a000039 	bcs	fde4 <CString::Replace(char const*, char const*)+0x16c>
    fcfc:	e1a01006 	mov	r1, r6
    fd00:	e1a0000a 	mov	r0, sl
    fd04:	e0d4b0d1 	ldrsb	fp, [r4], #1
    fd08:	ebffff23 	bl	f99c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    fd0c:	e59a300c 	ldr	r3, [sl, #12]
    fd10:	e1550004 	cmp	r5, r4
    fd14:	e2832001 	add	r2, r3, #1
    fd18:	e58a200c 	str	r2, [sl, #12]
    fd1c:	e5c3b000 	strb	fp, [r3]
    fd20:	1afffff5 	bne	fcfc <CString::Replace(char const*, char const*)+0x84>
    fd24:	e1a0c005 	mov	ip, r5
    fd28:	e2854001 	add	r4, r5, #1
    fd2c:	e1d730d1 	ldrsb	r3, [r7, #1]
    fd30:	e2871001 	add	r1, r7, #1
    fd34:	e3530000 	cmp	r3, #0
    fd38:	0a00000c 	beq	fd70 <CString::Replace(char const*, char const*)+0xf8>
    fd3c:	e1d520d1 	ldrsb	r2, [r5, #1]
    fd40:	e1520003 	cmp	r2, r3
    fd44:	1a00000e 	bne	fd84 <CString::Replace(char const*, char const*)+0x10c>
    fd48:	e2853002 	add	r3, r5, #2
    fd4c:	ea000003 	b	fd60 <CString::Replace(char const*, char const*)+0xe8>
    fd50:	e1d400d0 	ldrsb	r0, [r4]
    fd54:	e2833001 	add	r3, r3, #1
    fd58:	e1500002 	cmp	r0, r2
    fd5c:	1a000008 	bne	fd84 <CString::Replace(char const*, char const*)+0x10c>
    fd60:	e1f120d1 	ldrsb	r2, [r1, #1]!
    fd64:	e1a04003 	mov	r4, r3
    fd68:	e3520000 	cmp	r2, #0
    fd6c:	1afffff7 	bne	fd50 <CString::Replace(char const*, char const*)+0xd8>
    fd70:	e1a01009 	mov	r1, r9
    fd74:	e1a0000a 	mov	r0, sl
    fd78:	e2888001 	add	r8, r8, #1
    fd7c:	ebffffac 	bl	fc34 <CString::PutString(char const*)>
    fd80:	eaffffd6 	b	fce0 <CString::Replace(char const*, char const*)+0x68>
    fd84:	e1a01006 	mov	r1, r6
    fd88:	e1a0000a 	mov	r0, sl
    fd8c:	e1dc50d0 	ldrsb	r5, [ip]
    fd90:	e28c4001 	add	r4, ip, #1
    fd94:	ebffff00 	bl	f99c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    fd98:	e59a300c 	ldr	r3, [sl, #12]
    fd9c:	e2832001 	add	r2, r3, #1
    fda0:	e58a200c 	str	r2, [sl, #12]
    fda4:	e5c35000 	strb	r5, [r3]
    fda8:	eaffffcc 	b	fce0 <CString::Replace(char const*, char const*)+0x68>
    fdac:	e1a0000a 	mov	r0, sl
    fdb0:	e1a01004 	mov	r1, r4
    fdb4:	ebffff9e 	bl	fc34 <CString::PutString(char const*)>
    fdb8:	e59a200c 	ldr	r2, [sl, #12]
    fdbc:	e59f302c 	ldr	r3, [pc, #44]	; fdf0 <CString::Replace(char const*, char const*)+0x178>
    fdc0:	e5c25000 	strb	r5, [r2]
    fdc4:	e59d0004 	ldr	r0, [sp, #4]
    fdc8:	e58d3000 	str	r3, [sp]
    fdcc:	e3500000 	cmp	r0, #0
    fdd0:	0affffad 	beq	fc8c <CString::Replace(char const*, char const*)+0x14>
    fdd4:	eb000a71 	bl	127a0 <operator delete[](void*)>
    fdd8:	e1a00008 	mov	r0, r8
    fddc:	e28dd014 	add	sp, sp, #20
    fde0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fde4:	e1a0c004 	mov	ip, r4
    fde8:	e2854001 	add	r4, r5, #1
    fdec:	eaffffce 	b	fd2c <CString::Replace(char const*, char const*)+0xb4>
    fdf0:	0001505c 	.word	0x0001505c

0000fdf4 <CString::ReserveSpace(unsigned int)>:
    fdf4:	e3510000 	cmp	r1, #0
    fdf8:	012fff1e 	bxeq	lr
    fdfc:	eafffee6 	b	f99c <CString::ReserveSpace(unsigned int) [clone .part.0]>

0000fe00 <CString::ntoa(char*, unsigned long, unsigned int, bool)>:
    fe00:	e1510002 	cmp	r1, r2
    fe04:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    fe08:	e1a05001 	mov	r5, r1
    fe0c:	e1a07002 	mov	r7, r2
    fe10:	e1a09000 	mov	r9, r0
    fe14:	e1a08003 	mov	r8, r3
    fe18:	23a0a001 	movcs	sl, #1
    fe1c:	3a000022 	bcc	feac <CString::ntoa(char*, unsigned long, unsigned int, bool)+0xac>
    fe20:	e00a0a97 	mul	sl, r7, sl
    fe24:	e1a00005 	mov	r0, r5
    fe28:	e1a0100a 	mov	r1, sl
    fe2c:	ebffea35 	bl	a708 <__udivsi3>
    fe30:	e1500007 	cmp	r0, r7
    fe34:	e1a04000 	mov	r4, r0
    fe38:	2afffff8 	bcs	fe20 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x20>
    fe3c:	e3580000 	cmp	r8, #0
    fe40:	13a08037 	movne	r8, #55	; 0x37
    fe44:	03a08057 	moveq	r8, #87	; 0x57
    fe48:	e1a06009 	mov	r6, r9
    fe4c:	ea000003 	b	fe60 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x60>
    fe50:	e1a0100a 	mov	r1, sl
    fe54:	e1a00005 	mov	r0, r5
    fe58:	ebffea2a 	bl	a708 <__udivsi3>
    fe5c:	e1a04000 	mov	r4, r0
    fe60:	e1a00005 	mov	r0, r5
    fe64:	e1a0100a 	mov	r1, sl
    fe68:	ebffea63 	bl	a7fc <__aeabi_uidivmod>
    fe6c:	e3540009 	cmp	r4, #9
    fe70:	e2843030 	add	r3, r4, #48	; 0x30
    fe74:	80884004 	addhi	r4, r8, r4
    fe78:	96af4073 	sxtbls	r4, r3
    fe7c:	86af4074 	sxtbhi	r4, r4
    fe80:	e2866001 	add	r6, r6, #1
    fe84:	e1a0000a 	mov	r0, sl
    fe88:	e1a05001 	mov	r5, r1
    fe8c:	e5464001 	strb	r4, [r6, #-1]
    fe90:	e1a01007 	mov	r1, r7
    fe94:	ebffea1b 	bl	a708 <__udivsi3>
    fe98:	e250a000 	subs	sl, r0, #0
    fe9c:	1affffeb 	bne	fe50 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x50>
    fea0:	e5c6a000 	strb	sl, [r6]
    fea4:	e1a00009 	mov	r0, r9
    fea8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    feac:	e1a04001 	mov	r4, r1
    feb0:	e3a0a001 	mov	sl, #1
    feb4:	eaffffe0 	b	fe3c <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x3c>

0000feb8 <CString::ftoa(char*, double, unsigned int)>:
    feb8:	eeb50bc0 	vcmpe.f64	d0, #0.0
    febc:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    fec0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fec4:	ed9f7b95 	vldr	d7, [pc, #596]	; 10120 <CString::ftoa(char*, double, unsigned int)+0x268>
    fec8:	ed2d8b02 	vpush	{d8}
    fecc:	eeb08b40 	vmov.f64	d8, d0
    fed0:	4eb18b40 	vnegmi.f64	d8, d0
    fed4:	43a0302d 	movmi	r3, #45	; 0x2d
    fed8:	eeb48bc7 	vcmpe.f64	d8, d7
    fedc:	45c03000 	strbmi	r3, [r0]
    fee0:	4280b001 	addmi	fp, r0, #1
    fee4:	51a0b000 	movpl	fp, r0
    fee8:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    feec:	e24dd01c 	sub	sp, sp, #28
    fef0:	e1a0a000 	mov	sl, r0
    fef4:	e58d1004 	str	r1, [sp, #4]
    fef8:	ca000079 	bgt	100e4 <CString::ftoa(char*, double, unsigned int)+0x22c>
    fefc:	eefc7bc8 	vcvt.u32.f64	s15, d8
    ff00:	ee177a90 	vmov	r7, s15
    ff04:	e3570009 	cmp	r7, #9
    ff08:	83a04001 	movhi	r4, #1
    ff0c:	9a00007b 	bls	10100 <CString::ftoa(char*, double, unsigned int)+0x248>
    ff10:	e0844104 	add	r4, r4, r4, lsl #2
    ff14:	e1a04084 	lsl	r4, r4, #1
    ff18:	e1a01004 	mov	r1, r4
    ff1c:	e1a00007 	mov	r0, r7
    ff20:	ebffe9f8 	bl	a708 <__udivsi3>
    ff24:	e3500009 	cmp	r0, #9
    ff28:	e1a05000 	mov	r5, r0
    ff2c:	8afffff7 	bhi	ff10 <CString::ftoa(char*, double, unsigned int)+0x58>
    ff30:	e1a0600b 	mov	r6, fp
    ff34:	e1a09007 	mov	r9, r7
    ff38:	e59f81f0 	ldr	r8, [pc, #496]	; 10130 <CString::ftoa(char*, double, unsigned int)+0x278>
    ff3c:	ea000003 	b	ff50 <CString::ftoa(char*, double, unsigned int)+0x98>
    ff40:	e1a01004 	mov	r1, r4
    ff44:	e1a00009 	mov	r0, r9
    ff48:	ebffe9ee 	bl	a708 <__udivsi3>
    ff4c:	e1a05000 	mov	r5, r0
    ff50:	e1a00009 	mov	r0, r9
    ff54:	e1a01004 	mov	r1, r4
    ff58:	ebffea27 	bl	a7fc <__aeabi_uidivmod>
    ff5c:	e0843498 	umull	r3, r4, r8, r4
    ff60:	e3550009 	cmp	r5, #9
    ff64:	e2852030 	add	r2, r5, #48	; 0x30
    ff68:	82855057 	addhi	r5, r5, #87	; 0x57
    ff6c:	96af5072 	sxtbls	r5, r2
    ff70:	86af5075 	sxtbhi	r5, r5
    ff74:	e2866001 	add	r6, r6, #1
    ff78:	e1b041a4 	lsrs	r4, r4, #3
    ff7c:	e1a09001 	mov	r9, r1
    ff80:	e5465001 	strb	r5, [r6, #-1]
    ff84:	1affffed 	bne	ff40 <CString::ftoa(char*, double, unsigned int)+0x88>
    ff88:	e59d3004 	ldr	r3, [sp, #4]
    ff8c:	e5c64000 	strb	r4, [r6]
    ff90:	e3530000 	cmp	r3, #0
    ff94:	1a000003 	bne	ffa8 <CString::ftoa(char*, double, unsigned int)+0xf0>
    ff98:	e1a0000a 	mov	r0, sl
    ff9c:	e28dd01c 	add	sp, sp, #28
    ffa0:	ecbd8b02 	vpop	{d8}
    ffa4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ffa8:	e1a0000b 	mov	r0, fp
    ffac:	eb00065a 	bl	1191c <strlen>
    ffb0:	e59d3004 	ldr	r3, [sp, #4]
    ffb4:	e08b2000 	add	r2, fp, r0
    ffb8:	e3530009 	cmp	r3, #9
    ffbc:	31a09003 	movcc	r9, r3
    ffc0:	23a09009 	movcs	r9, #9
    ffc4:	e3a0302e 	mov	r3, #46	; 0x2e
    ffc8:	e3590001 	cmp	r9, #1
    ffcc:	e7cb3000 	strb	r3, [fp, r0]
    ffd0:	e58d2004 	str	r2, [sp, #4]
    ffd4:	e282b001 	add	fp, r2, #1
    ffd8:	0a00004e 	beq	10118 <CString::ftoa(char*, double, unsigned int)+0x260>
    ffdc:	e3a02002 	mov	r2, #2
    ffe0:	e3a0300a 	mov	r3, #10
    ffe4:	e2822001 	add	r2, r2, #1
    ffe8:	e0833103 	add	r3, r3, r3, lsl #2
    ffec:	e1520009 	cmp	r2, r9
    fff0:	e1a03083 	lsl	r3, r3, #1
    fff4:	9afffffa 	bls	ffe4 <CString::ftoa(char*, double, unsigned int)+0x12c>
    fff8:	ee073a90 	vmov	s15, r3
    fffc:	eeb87b67 	vcvt.f64.u32	d7, s15
   10000:	ee067a90 	vmov	s13, r7
   10004:	eeb86b66 	vcvt.f64.u32	d6, s13
   10008:	ee386b46 	vsub.f64	d6, d8, d6
   1000c:	ee267b07 	vmul.f64	d7, d6, d7
   10010:	eefc7bc7 	vcvt.u32.f64	s15, d7
   10014:	ee178a90 	vmov	r8, s15
   10018:	e3580009 	cmp	r8, #9
   1001c:	83a04001 	movhi	r4, #1
   10020:	9a000039 	bls	1010c <CString::ftoa(char*, double, unsigned int)+0x254>
   10024:	e0844104 	add	r4, r4, r4, lsl #2
   10028:	e1a04084 	lsl	r4, r4, #1
   1002c:	e1a01004 	mov	r1, r4
   10030:	e1a00008 	mov	r0, r8
   10034:	ebffe9b3 	bl	a708 <__udivsi3>
   10038:	e3500009 	cmp	r0, #9
   1003c:	e1a05000 	mov	r5, r0
   10040:	8afffff7 	bhi	10024 <CString::ftoa(char*, double, unsigned int)+0x16c>
   10044:	e28d600c 	add	r6, sp, #12
   10048:	e59f70e0 	ldr	r7, [pc, #224]	; 10130 <CString::ftoa(char*, double, unsigned int)+0x278>
   1004c:	ea000003 	b	10060 <CString::ftoa(char*, double, unsigned int)+0x1a8>
   10050:	e1a01004 	mov	r1, r4
   10054:	e1a00008 	mov	r0, r8
   10058:	ebffe9aa 	bl	a708 <__udivsi3>
   1005c:	e1a05000 	mov	r5, r0
   10060:	e1a00008 	mov	r0, r8
   10064:	e1a01004 	mov	r1, r4
   10068:	ebffe9e3 	bl	a7fc <__aeabi_uidivmod>
   1006c:	e0843497 	umull	r3, r4, r7, r4
   10070:	e3550009 	cmp	r5, #9
   10074:	e2852030 	add	r2, r5, #48	; 0x30
   10078:	82855057 	addhi	r5, r5, #87	; 0x57
   1007c:	96af5072 	sxtbls	r5, r2
   10080:	86af5075 	sxtbhi	r5, r5
   10084:	e2866001 	add	r6, r6, #1
   10088:	e1b041a4 	lsrs	r4, r4, #3
   1008c:	e1a08001 	mov	r8, r1
   10090:	e5465001 	strb	r5, [r6, #-1]
   10094:	1affffed 	bne	10050 <CString::ftoa(char*, double, unsigned int)+0x198>
   10098:	e28d000c 	add	r0, sp, #12
   1009c:	e5c64000 	strb	r4, [r6]
   100a0:	eb00061d 	bl	1191c <strlen>
   100a4:	e0599000 	subs	r9, r9, r0
   100a8:	0a000006 	beq	100c8 <CString::ftoa(char*, double, unsigned int)+0x210>
   100ac:	e3a02030 	mov	r2, #48	; 0x30
   100b0:	e59d8004 	ldr	r8, [sp, #4]
   100b4:	e0883009 	add	r3, r8, r9
   100b8:	e5e82001 	strb	r2, [r8, #1]!
   100bc:	e1580003 	cmp	r8, r3
   100c0:	1afffffc 	bne	100b8 <CString::ftoa(char*, double, unsigned int)+0x200>
   100c4:	e08bb009 	add	fp, fp, r9
   100c8:	e28d100c 	add	r1, sp, #12
   100cc:	e1a0000b 	mov	r0, fp
   100d0:	eb00068f 	bl	11b14 <strcpy>
   100d4:	e1a0000a 	mov	r0, sl
   100d8:	e28dd01c 	add	sp, sp, #28
   100dc:	ecbd8b02 	vpop	{d8}
   100e0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   100e4:	e1a0000b 	mov	r0, fp
   100e8:	e59f1044 	ldr	r1, [pc, #68]	; 10134 <CString::ftoa(char*, double, unsigned int)+0x27c>
   100ec:	eb000688 	bl	11b14 <strcpy>
   100f0:	e1a0000a 	mov	r0, sl
   100f4:	e28dd01c 	add	sp, sp, #28
   100f8:	ecbd8b02 	vpop	{d8}
   100fc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10100:	ee175a90 	vmov	r5, s15
   10104:	e3a04001 	mov	r4, #1
   10108:	eaffff88 	b	ff30 <CString::ftoa(char*, double, unsigned int)+0x78>
   1010c:	ee175a90 	vmov	r5, s15
   10110:	e3a04001 	mov	r4, #1
   10114:	eaffffca 	b	10044 <CString::ftoa(char*, double, unsigned int)+0x18c>
   10118:	ed9f7b02 	vldr	d7, [pc, #8]	; 10128 <CString::ftoa(char*, double, unsigned int)+0x270>
   1011c:	eaffffb7 	b	10000 <CString::ftoa(char*, double, unsigned int)+0x148>
   10120:	ffe00000 	.word	0xffe00000
   10124:	41efffff 	.word	0x41efffff
   10128:	00000000 	.word	0x00000000
   1012c:	40240000 	.word	0x40240000
   10130:	cccccccd 	.word	0xcccccccd
   10134:	00015064 	.word	0x00015064

00010138 <CString::FormatV(char const*, std::__va_list)>:
   10138:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1013c:	e1a0b000 	mov	fp, r0
   10140:	e5900004 	ldr	r0, [r0, #4]
   10144:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   10148:	e3500000 	cmp	r0, #0
   1014c:	e1a05001 	mov	r5, r1
   10150:	e58d2000 	str	r2, [sp]
   10154:	0a000000 	beq	1015c <CString::FormatV(char const*, std::__va_list)+0x24>
   10158:	eb000990 	bl	127a0 <operator delete[](void*)>
   1015c:	e3a00040 	mov	r0, #64	; 0x40
   10160:	e58b0008 	str	r0, [fp, #8]
   10164:	eb00098b 	bl	12798 <operator new[](unsigned int)>
   10168:	e58b0004 	str	r0, [fp, #4]
   1016c:	e58b000c 	str	r0, [fp, #12]
   10170:	e1d540d0 	ldrsb	r4, [r5]
   10174:	e3540000 	cmp	r4, #0
   10178:	0a0000a2 	beq	10408 <CString::FormatV(char const*, std::__va_list)+0x2d0>
   1017c:	e3540025 	cmp	r4, #37	; 0x25
   10180:	13a01001 	movne	r1, #1
   10184:	11a0000b 	movne	r0, fp
   10188:	1a000152 	bne	106d8 <CString::FormatV(char const*, std::__va_list)+0x5a0>
   1018c:	e1d560d1 	ldrsb	r6, [r5, #1]
   10190:	e3560025 	cmp	r6, #37	; 0x25
   10194:	0a000165 	beq	10730 <CString::FormatV(char const*, std::__va_list)+0x5f8>
   10198:	e356002d 	cmp	r6, #45	; 0x2d
   1019c:	03a03001 	moveq	r3, #1
   101a0:	13a03000 	movne	r3, #0
   101a4:	01d560d2 	ldrsbeq	r6, [r5, #2]
   101a8:	158d3004 	strne	r3, [sp, #4]
   101ac:	058d3004 	streq	r3, [sp, #4]
   101b0:	02855002 	addeq	r5, r5, #2
   101b4:	12855001 	addne	r5, r5, #1
   101b8:	e3560030 	cmp	r6, #48	; 0x30
   101bc:	03a03001 	moveq	r3, #1
   101c0:	13a03000 	movne	r3, #0
   101c4:	01d560d1 	ldrsbeq	r6, [r5, #1]
   101c8:	058d3008 	streq	r3, [sp, #8]
   101cc:	00855003 	addeq	r5, r5, r3
   101d0:	158d3008 	strne	r3, [sp, #8]
   101d4:	e2463030 	sub	r3, r6, #48	; 0x30
   101d8:	e6ef3073 	uxtb	r3, r3
   101dc:	e3530009 	cmp	r3, #9
   101e0:	e3a04000 	mov	r4, #0
   101e4:	8a000007 	bhi	10208 <CString::FormatV(char const*, std::__va_list)+0xd0>
   101e8:	e0844104 	add	r4, r4, r4, lsl #2
   101ec:	e0864084 	add	r4, r6, r4, lsl #1
   101f0:	e1f560d1 	ldrsb	r6, [r5, #1]!
   101f4:	e2444030 	sub	r4, r4, #48	; 0x30
   101f8:	e2463030 	sub	r3, r6, #48	; 0x30
   101fc:	e6ef3073 	uxtb	r3, r3
   10200:	e3530009 	cmp	r3, #9
   10204:	9afffff7 	bls	101e8 <CString::FormatV(char const*, std::__va_list)+0xb0>
   10208:	e356002e 	cmp	r6, #46	; 0x2e
   1020c:	0a000137 	beq	106f0 <CString::FormatV(char const*, std::__va_list)+0x5b8>
   10210:	e3a01006 	mov	r1, #6
   10214:	e1d570d0 	ldrsb	r7, [r5]
   10218:	e357006c 	cmp	r7, #108	; 0x6c
   1021c:	03a02001 	moveq	r2, #1
   10220:	01d570d1 	ldrsbeq	r7, [r5, #1]
   10224:	00855002 	addeq	r5, r5, r2
   10228:	e2473058 	sub	r3, r7, #88	; 0x58
   1022c:	e3530020 	cmp	r3, #32
   10230:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   10234:	ea00011c 	b	106ac <CString::FormatV(char const*, std::__va_list)+0x574>
   10238:	00010628 	.word	0x00010628
   1023c:	000106ac 	.word	0x000106ac
   10240:	000106ac 	.word	0x000106ac
   10244:	000106ac 	.word	0x000106ac
   10248:	000106ac 	.word	0x000106ac
   1024c:	000106ac 	.word	0x000106ac
   10250:	000106ac 	.word	0x000106ac
   10254:	000106ac 	.word	0x000106ac
   10258:	000106ac 	.word	0x000106ac
   1025c:	000106ac 	.word	0x000106ac
   10260:	000106ac 	.word	0x000106ac
   10264:	000105b4 	.word	0x000105b4
   10268:	00010490 	.word	0x00010490
   1026c:	000106ac 	.word	0x000106ac
   10270:	00010418 	.word	0x00010418
   10274:	000106ac 	.word	0x000106ac
   10278:	000106ac 	.word	0x000106ac
   1027c:	00010490 	.word	0x00010490
   10280:	000106ac 	.word	0x000106ac
   10284:	000106ac 	.word	0x000106ac
   10288:	000106ac 	.word	0x000106ac
   1028c:	000106ac 	.word	0x000106ac
   10290:	000106ac 	.word	0x000106ac
   10294:	000102bc 	.word	0x000102bc
   10298:	00010628 	.word	0x00010628
   1029c:	000106ac 	.word	0x000106ac
   102a0:	000106ac 	.word	0x000106ac
   102a4:	00010638 	.word	0x00010638
   102a8:	000106ac 	.word	0x000106ac
   102ac:	00010630 	.word	0x00010630
   102b0:	000106ac 	.word	0x000106ac
   102b4:	000106ac 	.word	0x000106ac
   102b8:	00010628 	.word	0x00010628
   102bc:	e3a09008 	mov	r9, #8
   102c0:	e59d3000 	ldr	r3, [sp]
   102c4:	e5936000 	ldr	r6, [r3]
   102c8:	e2833004 	add	r3, r3, #4
   102cc:	e1560009 	cmp	r6, r9
   102d0:	e58d3000 	str	r3, [sp]
   102d4:	23a0a001 	movcs	sl, #1
   102d8:	3a0001aa 	bcc	10988 <CString::FormatV(char const*, std::__va_list)+0x850>
   102dc:	e00a0a99 	mul	sl, r9, sl
   102e0:	e1a00006 	mov	r0, r6
   102e4:	e1a0100a 	mov	r1, sl
   102e8:	ebffe906 	bl	a708 <__udivsi3>
   102ec:	e1590000 	cmp	r9, r0
   102f0:	9afffff9 	bls	102dc <CString::FormatV(char const*, std::__va_list)+0x1a4>
   102f4:	e1a03000 	mov	r3, r0
   102f8:	e3570058 	cmp	r7, #88	; 0x58
   102fc:	13a07057 	movne	r7, #87	; 0x57
   10300:	03a07037 	moveq	r7, #55	; 0x37
   10304:	e1a02005 	mov	r2, r5
   10308:	e58d400c 	str	r4, [sp, #12]
   1030c:	e1a0500a 	mov	r5, sl
   10310:	e1a04007 	mov	r4, r7
   10314:	e28d8010 	add	r8, sp, #16
   10318:	e1a07006 	mov	r7, r6
   1031c:	e1a0a002 	mov	sl, r2
   10320:	e1a06003 	mov	r6, r3
   10324:	ea000003 	b	10338 <CString::FormatV(char const*, std::__va_list)+0x200>
   10328:	e1a01005 	mov	r1, r5
   1032c:	e1a00007 	mov	r0, r7
   10330:	ebffe8f4 	bl	a708 <__udivsi3>
   10334:	e1a06000 	mov	r6, r0
   10338:	e1a00007 	mov	r0, r7
   1033c:	e1a01005 	mov	r1, r5
   10340:	ebffe92d 	bl	a7fc <__aeabi_uidivmod>
   10344:	e3560009 	cmp	r6, #9
   10348:	e2862030 	add	r2, r6, #48	; 0x30
   1034c:	80846006 	addhi	r6, r4, r6
   10350:	96af6072 	sxtbls	r6, r2
   10354:	86af6076 	sxtbhi	r6, r6
   10358:	e2888001 	add	r8, r8, #1
   1035c:	e1a00005 	mov	r0, r5
   10360:	e1a07001 	mov	r7, r1
   10364:	e5486001 	strb	r6, [r8, #-1]
   10368:	e1a01009 	mov	r1, r9
   1036c:	ebffe8e5 	bl	a708 <__udivsi3>
   10370:	e2505000 	subs	r5, r0, #0
   10374:	1affffeb 	bne	10328 <CString::FormatV(char const*, std::__va_list)+0x1f0>
   10378:	e1a0300a 	mov	r3, sl
   1037c:	e1a0a005 	mov	sl, r5
   10380:	e28d0010 	add	r0, sp, #16
   10384:	e5c8a000 	strb	sl, [r8]
   10388:	e1a05003 	mov	r5, r3
   1038c:	e59d400c 	ldr	r4, [sp, #12]
   10390:	eb000561 	bl	1191c <strlen>
   10394:	e59d3004 	ldr	r3, [sp, #4]
   10398:	e1a06000 	mov	r6, r0
   1039c:	e3530000 	cmp	r3, #0
   103a0:	1a0000eb 	bne	10754 <CString::FormatV(char const*, std::__va_list)+0x61c>
   103a4:	e1500004 	cmp	r0, r4
   103a8:	2a00000f 	bcs	103ec <CString::FormatV(char const*, std::__va_list)+0x2b4>
   103ac:	e59d3008 	ldr	r3, [sp, #8]
   103b0:	e0444000 	sub	r4, r4, r0
   103b4:	e3530000 	cmp	r3, #0
   103b8:	e1a01004 	mov	r1, r4
   103bc:	e1a0000b 	mov	r0, fp
   103c0:	03a07020 	moveq	r7, #32
   103c4:	13a07030 	movne	r7, #48	; 0x30
   103c8:	ebfffd73 	bl	f99c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   103cc:	e2443001 	sub	r3, r4, #1
   103d0:	e59b200c 	ldr	r2, [fp, #12]
   103d4:	e2433001 	sub	r3, r3, #1
   103d8:	e2821001 	add	r1, r2, #1
   103dc:	e3730001 	cmn	r3, #1
   103e0:	e58b100c 	str	r1, [fp, #12]
   103e4:	e5c27000 	strb	r7, [r2]
   103e8:	1afffff8 	bne	103d0 <CString::FormatV(char const*, std::__va_list)+0x298>
   103ec:	e28d1010 	add	r1, sp, #16
   103f0:	e1a0000b 	mov	r0, fp
   103f4:	ebfffe0e 	bl	fc34 <CString::PutString(char const*)>
   103f8:	e2855001 	add	r5, r5, #1
   103fc:	e1d540d0 	ldrsb	r4, [r5]
   10400:	e3540000 	cmp	r4, #0
   10404:	1affff5c 	bne	1017c <CString::FormatV(char const*, std::__va_list)+0x44>
   10408:	e59b300c 	ldr	r3, [fp, #12]
   1040c:	e5c34000 	strb	r4, [r3]
   10410:	e28dd02c 	add	sp, sp, #44	; 0x2c
   10414:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10418:	e59d3000 	ldr	r3, [sp]
   1041c:	e28d0010 	add	r0, sp, #16
   10420:	e2833007 	add	r3, r3, #7
   10424:	e3c33007 	bic	r3, r3, #7
   10428:	ed930b00 	vldr	d0, [r3]
   1042c:	e2833008 	add	r3, r3, #8
   10430:	e58d3000 	str	r3, [sp]
   10434:	ebfffe9f 	bl	feb8 <CString::ftoa(char*, double, unsigned int)>
   10438:	e28d0010 	add	r0, sp, #16
   1043c:	eb000536 	bl	1191c <strlen>
   10440:	e59d3004 	ldr	r3, [sp, #4]
   10444:	e1a06000 	mov	r6, r0
   10448:	e3530000 	cmp	r3, #0
   1044c:	1a000108 	bne	10874 <CString::FormatV(char const*, std::__va_list)+0x73c>
   10450:	e1500004 	cmp	r0, r4
   10454:	2affffe4 	bcs	103ec <CString::FormatV(char const*, std::__va_list)+0x2b4>
   10458:	e0444000 	sub	r4, r4, r0
   1045c:	e1a01004 	mov	r1, r4
   10460:	e1a0000b 	mov	r0, fp
   10464:	ebfffd4c 	bl	f99c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   10468:	e2443001 	sub	r3, r4, #1
   1046c:	e59b200c 	ldr	r2, [fp, #12]
   10470:	e2433001 	sub	r3, r3, #1
   10474:	e2821001 	add	r1, r2, #1
   10478:	e58b100c 	str	r1, [fp, #12]
   1047c:	e3a01020 	mov	r1, #32
   10480:	e3730001 	cmn	r3, #1
   10484:	e5c21000 	strb	r1, [r2]
   10488:	1afffff7 	bne	1046c <CString::FormatV(char const*, std::__va_list)+0x334>
   1048c:	eaffffd6 	b	103ec <CString::FormatV(char const*, std::__va_list)+0x2b4>
   10490:	e59d3000 	ldr	r3, [sp]
   10494:	e5936000 	ldr	r6, [r3]
   10498:	e2833004 	add	r3, r3, #4
   1049c:	e3560000 	cmp	r6, #0
   104a0:	b3a08001 	movlt	r8, #1
   104a4:	a3a08000 	movge	r8, #0
   104a8:	e58d3000 	str	r3, [sp]
   104ac:	b1a03008 	movlt	r3, r8
   104b0:	b2666000 	rsblt	r6, r6, #0
   104b4:	b58d300c 	strlt	r3, [sp, #12]
   104b8:	a58d800c 	strge	r8, [sp, #12]
   104bc:	e3560009 	cmp	r6, #9
   104c0:	e1a07006 	mov	r7, r6
   104c4:	c3a0a001 	movgt	sl, #1
   104c8:	da00012b 	ble	1097c <CString::FormatV(char const*, std::__va_list)+0x844>
   104cc:	e08aa10a 	add	sl, sl, sl, lsl #2
   104d0:	e1a0a08a 	lsl	sl, sl, #1
   104d4:	e1a0100a 	mov	r1, sl
   104d8:	e1a00006 	mov	r0, r6
   104dc:	ebffe889 	bl	a708 <__udivsi3>
   104e0:	e3500009 	cmp	r0, #9
   104e4:	8afffff8 	bhi	104cc <CString::FormatV(char const*, std::__va_list)+0x394>
   104e8:	e1a09000 	mov	r9, r0
   104ec:	e28d6010 	add	r6, sp, #16
   104f0:	ea000003 	b	10504 <CString::FormatV(char const*, std::__va_list)+0x3cc>
   104f4:	e1a0100a 	mov	r1, sl
   104f8:	e1a00007 	mov	r0, r7
   104fc:	ebffe881 	bl	a708 <__udivsi3>
   10500:	e1a09000 	mov	r9, r0
   10504:	e1a00007 	mov	r0, r7
   10508:	e1a0100a 	mov	r1, sl
   1050c:	ebffe8ba 	bl	a7fc <__aeabi_uidivmod>
   10510:	e3590009 	cmp	r9, #9
   10514:	e2893030 	add	r3, r9, #48	; 0x30
   10518:	96af9073 	sxtbls	r9, r3
   1051c:	e59f3494 	ldr	r3, [pc, #1172]	; 109b8 <CString::FormatV(char const*, std::__va_list)+0x880>
   10520:	82899057 	addhi	r9, r9, #87	; 0x57
   10524:	e08a3a93 	umull	r3, sl, r3, sl
   10528:	86af9079 	sxtbhi	r9, r9
   1052c:	e2866001 	add	r6, r6, #1
   10530:	e1b0a1aa 	lsrs	sl, sl, #3
   10534:	e1a07001 	mov	r7, r1
   10538:	e5469001 	strb	r9, [r6, #-1]
   1053c:	1affffec 	bne	104f4 <CString::FormatV(char const*, std::__va_list)+0x3bc>
   10540:	e28d0010 	add	r0, sp, #16
   10544:	e5c6a000 	strb	sl, [r6]
   10548:	eb0004f3 	bl	1191c <strlen>
   1054c:	e59d3004 	ldr	r3, [sp, #4]
   10550:	e0888000 	add	r8, r8, r0
   10554:	e3530000 	cmp	r3, #0
   10558:	0a000090 	beq	107a0 <CString::FormatV(char const*, std::__va_list)+0x668>
   1055c:	e59d300c 	ldr	r3, [sp, #12]
   10560:	e3530000 	cmp	r3, #0
   10564:	1a0000fb 	bne	10958 <CString::FormatV(char const*, std::__va_list)+0x820>
   10568:	e28d1010 	add	r1, sp, #16
   1056c:	e1a0000b 	mov	r0, fp
   10570:	ebfffdaf 	bl	fc34 <CString::PutString(char const*)>
   10574:	e1580004 	cmp	r8, r4
   10578:	2affff9e 	bcs	103f8 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   1057c:	e0444008 	sub	r4, r4, r8
   10580:	e1a01004 	mov	r1, r4
   10584:	e1a0000b 	mov	r0, fp
   10588:	ebfffd03 	bl	f99c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   1058c:	e2443001 	sub	r3, r4, #1
   10590:	e59b200c 	ldr	r2, [fp, #12]
   10594:	e2433001 	sub	r3, r3, #1
   10598:	e2821001 	add	r1, r2, #1
   1059c:	e58b100c 	str	r1, [fp, #12]
   105a0:	e3a01020 	mov	r1, #32
   105a4:	e3730001 	cmn	r3, #1
   105a8:	e5c21000 	strb	r1, [r2]
   105ac:	1afffff7 	bne	10590 <CString::FormatV(char const*, std::__va_list)+0x458>
   105b0:	eaffff90 	b	103f8 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   105b4:	e59d3004 	ldr	r3, [sp, #4]
   105b8:	e3530000 	cmp	r3, #0
   105bc:	e59d3000 	ldr	r3, [sp]
   105c0:	e2836004 	add	r6, r3, #4
   105c4:	e1d370d0 	ldrsb	r7, [r3]
   105c8:	1a000092 	bne	10818 <CString::FormatV(char const*, std::__va_list)+0x6e0>
   105cc:	e3540001 	cmp	r4, #1
   105d0:	9a00000b 	bls	10604 <CString::FormatV(char const*, std::__va_list)+0x4cc>
   105d4:	e2441001 	sub	r1, r4, #1
   105d8:	e1a0000b 	mov	r0, fp
   105dc:	ebfffcee 	bl	f99c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   105e0:	e2444002 	sub	r4, r4, #2
   105e4:	e59b300c 	ldr	r3, [fp, #12]
   105e8:	e2444001 	sub	r4, r4, #1
   105ec:	e2832001 	add	r2, r3, #1
   105f0:	e58b200c 	str	r2, [fp, #12]
   105f4:	e3a02020 	mov	r2, #32
   105f8:	e3740001 	cmn	r4, #1
   105fc:	e5c32000 	strb	r2, [r3]
   10600:	1afffff7 	bne	105e4 <CString::FormatV(char const*, std::__va_list)+0x4ac>
   10604:	e3a01001 	mov	r1, #1
   10608:	e1a0000b 	mov	r0, fp
   1060c:	ebfffce2 	bl	f99c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   10610:	e59b300c 	ldr	r3, [fp, #12]
   10614:	e58d6000 	str	r6, [sp]
   10618:	e2832001 	add	r2, r3, #1
   1061c:	e58b200c 	str	r2, [fp, #12]
   10620:	e5c37000 	strb	r7, [r3]
   10624:	eaffff73 	b	103f8 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   10628:	e3a09010 	mov	r9, #16
   1062c:	eaffff23 	b	102c0 <CString::FormatV(char const*, std::__va_list)+0x188>
   10630:	e3a0900a 	mov	r9, #10
   10634:	eaffff21 	b	102c0 <CString::FormatV(char const*, std::__va_list)+0x188>
   10638:	e59d3000 	ldr	r3, [sp]
   1063c:	e5938000 	ldr	r8, [r3]
   10640:	e2836004 	add	r6, r3, #4
   10644:	e1a00008 	mov	r0, r8
   10648:	eb0004b3 	bl	1191c <strlen>
   1064c:	e59d3004 	ldr	r3, [sp, #4]
   10650:	e1a07000 	mov	r7, r0
   10654:	e3530000 	cmp	r3, #0
   10658:	1a000098 	bne	108c0 <CString::FormatV(char const*, std::__va_list)+0x788>
   1065c:	e1500004 	cmp	r0, r4
   10660:	2a00000c 	bcs	10698 <CString::FormatV(char const*, std::__va_list)+0x560>
   10664:	e0444000 	sub	r4, r4, r0
   10668:	e1a01004 	mov	r1, r4
   1066c:	e1a0000b 	mov	r0, fp
   10670:	ebfffcc9 	bl	f99c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   10674:	e2443001 	sub	r3, r4, #1
   10678:	e59b200c 	ldr	r2, [fp, #12]
   1067c:	e2433001 	sub	r3, r3, #1
   10680:	e2821001 	add	r1, r2, #1
   10684:	e58b100c 	str	r1, [fp, #12]
   10688:	e3a01020 	mov	r1, #32
   1068c:	e3730001 	cmn	r3, #1
   10690:	e5c21000 	strb	r1, [r2]
   10694:	1afffff7 	bne	10678 <CString::FormatV(char const*, std::__va_list)+0x540>
   10698:	e1a01008 	mov	r1, r8
   1069c:	e1a0000b 	mov	r0, fp
   106a0:	e58d6000 	str	r6, [sp]
   106a4:	ebfffd62 	bl	fc34 <CString::PutString(char const*)>
   106a8:	eaffff52 	b	103f8 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   106ac:	e3a01001 	mov	r1, #1
   106b0:	e1a0000b 	mov	r0, fp
   106b4:	ebfffcb8 	bl	f99c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   106b8:	e3a01001 	mov	r1, #1
   106bc:	e59b300c 	ldr	r3, [fp, #12]
   106c0:	e1a0000b 	mov	r0, fp
   106c4:	e0832001 	add	r2, r3, r1
   106c8:	e58b200c 	str	r2, [fp, #12]
   106cc:	e3a02025 	mov	r2, #37	; 0x25
   106d0:	e5c32000 	strb	r2, [r3]
   106d4:	e1d540d0 	ldrsb	r4, [r5]
   106d8:	ebfffcaf 	bl	f99c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   106dc:	e59b300c 	ldr	r3, [fp, #12]
   106e0:	e2832001 	add	r2, r3, #1
   106e4:	e58b200c 	str	r2, [fp, #12]
   106e8:	e5c34000 	strb	r4, [r3]
   106ec:	eaffff41 	b	103f8 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   106f0:	e1d570d1 	ldrsb	r7, [r5, #1]
   106f4:	e3a01000 	mov	r1, #0
   106f8:	e2473030 	sub	r3, r7, #48	; 0x30
   106fc:	e6ef3073 	uxtb	r3, r3
   10700:	e3530009 	cmp	r3, #9
   10704:	e2855001 	add	r5, r5, #1
   10708:	8afffec2 	bhi	10218 <CString::FormatV(char const*, std::__va_list)+0xe0>
   1070c:	e0811101 	add	r1, r1, r1, lsl #2
   10710:	e0871081 	add	r1, r7, r1, lsl #1
   10714:	e1f570d1 	ldrsb	r7, [r5, #1]!
   10718:	e2411030 	sub	r1, r1, #48	; 0x30
   1071c:	e2473030 	sub	r3, r7, #48	; 0x30
   10720:	e6ef3073 	uxtb	r3, r3
   10724:	e3530009 	cmp	r3, #9
   10728:	9afffff7 	bls	1070c <CString::FormatV(char const*, std::__va_list)+0x5d4>
   1072c:	eafffeb9 	b	10218 <CString::FormatV(char const*, std::__va_list)+0xe0>
   10730:	e3a01001 	mov	r1, #1
   10734:	e1a0000b 	mov	r0, fp
   10738:	ebfffc97 	bl	f99c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   1073c:	e59b300c 	ldr	r3, [fp, #12]
   10740:	e2855002 	add	r5, r5, #2
   10744:	e2832001 	add	r2, r3, #1
   10748:	e58b200c 	str	r2, [fp, #12]
   1074c:	e5c36000 	strb	r6, [r3]
   10750:	eafffe86 	b	10170 <CString::FormatV(char const*, std::__va_list)+0x38>
   10754:	e28d1010 	add	r1, sp, #16
   10758:	e1a0000b 	mov	r0, fp
   1075c:	ebfffd34 	bl	fc34 <CString::PutString(char const*)>
   10760:	e1560004 	cmp	r6, r4
   10764:	2affff23 	bcs	103f8 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   10768:	e0444006 	sub	r4, r4, r6
   1076c:	e1a01004 	mov	r1, r4
   10770:	e1a0000b 	mov	r0, fp
   10774:	ebfffc88 	bl	f99c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   10778:	e2443001 	sub	r3, r4, #1
   1077c:	e59b200c 	ldr	r2, [fp, #12]
   10780:	e2433001 	sub	r3, r3, #1
   10784:	e2821001 	add	r1, r2, #1
   10788:	e58b100c 	str	r1, [fp, #12]
   1078c:	e3a01020 	mov	r1, #32
   10790:	e3730001 	cmn	r3, #1
   10794:	e5c21000 	strb	r1, [r2]
   10798:	1afffff7 	bne	1077c <CString::FormatV(char const*, std::__va_list)+0x644>
   1079c:	eaffff15 	b	103f8 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   107a0:	e59d3008 	ldr	r3, [sp, #8]
   107a4:	e3530000 	cmp	r3, #0
   107a8:	1a000057 	bne	1090c <CString::FormatV(char const*, std::__va_list)+0x7d4>
   107ac:	e1580004 	cmp	r8, r4
   107b0:	2a00000c 	bcs	107e8 <CString::FormatV(char const*, std::__va_list)+0x6b0>
   107b4:	e0444008 	sub	r4, r4, r8
   107b8:	e1a01004 	mov	r1, r4
   107bc:	e1a0000b 	mov	r0, fp
   107c0:	ebfffc75 	bl	f99c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   107c4:	e2443001 	sub	r3, r4, #1
   107c8:	e59b200c 	ldr	r2, [fp, #12]
   107cc:	e2433001 	sub	r3, r3, #1
   107d0:	e2821001 	add	r1, r2, #1
   107d4:	e58b100c 	str	r1, [fp, #12]
   107d8:	e3a01020 	mov	r1, #32
   107dc:	e3730001 	cmn	r3, #1
   107e0:	e5c21000 	strb	r1, [r2]
   107e4:	1afffff7 	bne	107c8 <CString::FormatV(char const*, std::__va_list)+0x690>
   107e8:	e59d300c 	ldr	r3, [sp, #12]
   107ec:	e3530000 	cmp	r3, #0
   107f0:	0afffefd 	beq	103ec <CString::FormatV(char const*, std::__va_list)+0x2b4>
   107f4:	e3a01001 	mov	r1, #1
   107f8:	e1a0000b 	mov	r0, fp
   107fc:	ebfffc66 	bl	f99c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   10800:	e3a0202d 	mov	r2, #45	; 0x2d
   10804:	e59b300c 	ldr	r3, [fp, #12]
   10808:	e2831001 	add	r1, r3, #1
   1080c:	e58b100c 	str	r1, [fp, #12]
   10810:	e5c32000 	strb	r2, [r3]
   10814:	eafffef4 	b	103ec <CString::FormatV(char const*, std::__va_list)+0x2b4>
   10818:	e3a01001 	mov	r1, #1
   1081c:	e1a0000b 	mov	r0, fp
   10820:	ebfffc5d 	bl	f99c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   10824:	e59b300c 	ldr	r3, [fp, #12]
   10828:	e3540001 	cmp	r4, #1
   1082c:	e2832001 	add	r2, r3, #1
   10830:	e58b200c 	str	r2, [fp, #12]
   10834:	e5c37000 	strb	r7, [r3]
   10838:	9a00000b 	bls	1086c <CString::FormatV(char const*, std::__va_list)+0x734>
   1083c:	e2441001 	sub	r1, r4, #1
   10840:	e1a0000b 	mov	r0, fp
   10844:	ebfffc54 	bl	f99c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   10848:	e2444002 	sub	r4, r4, #2
   1084c:	e59b300c 	ldr	r3, [fp, #12]
   10850:	e2444001 	sub	r4, r4, #1
   10854:	e2832001 	add	r2, r3, #1
   10858:	e58b200c 	str	r2, [fp, #12]
   1085c:	e3a02020 	mov	r2, #32
   10860:	e3740001 	cmn	r4, #1
   10864:	e5c32000 	strb	r2, [r3]
   10868:	1afffff7 	bne	1084c <CString::FormatV(char const*, std::__va_list)+0x714>
   1086c:	e58d6000 	str	r6, [sp]
   10870:	eafffee0 	b	103f8 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   10874:	e28d1010 	add	r1, sp, #16
   10878:	e1a0000b 	mov	r0, fp
   1087c:	ebfffcec 	bl	fc34 <CString::PutString(char const*)>
   10880:	e1560004 	cmp	r6, r4
   10884:	2afffedb 	bcs	103f8 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   10888:	e0444006 	sub	r4, r4, r6
   1088c:	e1a01004 	mov	r1, r4
   10890:	e1a0000b 	mov	r0, fp
   10894:	ebfffc40 	bl	f99c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   10898:	e2443001 	sub	r3, r4, #1
   1089c:	e59b200c 	ldr	r2, [fp, #12]
   108a0:	e2433001 	sub	r3, r3, #1
   108a4:	e2821001 	add	r1, r2, #1
   108a8:	e58b100c 	str	r1, [fp, #12]
   108ac:	e3a01020 	mov	r1, #32
   108b0:	e3730001 	cmn	r3, #1
   108b4:	e5c21000 	strb	r1, [r2]
   108b8:	1afffff7 	bne	1089c <CString::FormatV(char const*, std::__va_list)+0x764>
   108bc:	eafffecd 	b	103f8 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   108c0:	e1a01008 	mov	r1, r8
   108c4:	e1a0000b 	mov	r0, fp
   108c8:	ebfffcd9 	bl	fc34 <CString::PutString(char const*)>
   108cc:	e1570004 	cmp	r7, r4
   108d0:	2affffe5 	bcs	1086c <CString::FormatV(char const*, std::__va_list)+0x734>
   108d4:	e0444007 	sub	r4, r4, r7
   108d8:	e1a01004 	mov	r1, r4
   108dc:	e1a0000b 	mov	r0, fp
   108e0:	ebfffc2d 	bl	f99c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   108e4:	e2443001 	sub	r3, r4, #1
   108e8:	e59b200c 	ldr	r2, [fp, #12]
   108ec:	e2433001 	sub	r3, r3, #1
   108f0:	e2821001 	add	r1, r2, #1
   108f4:	e58b100c 	str	r1, [fp, #12]
   108f8:	e3a01020 	mov	r1, #32
   108fc:	e3730001 	cmn	r3, #1
   10900:	e5c21000 	strb	r1, [r2]
   10904:	1afffff7 	bne	108e8 <CString::FormatV(char const*, std::__va_list)+0x7b0>
   10908:	eaffffd7 	b	1086c <CString::FormatV(char const*, std::__va_list)+0x734>
   1090c:	e59d300c 	ldr	r3, [sp, #12]
   10910:	e3530000 	cmp	r3, #0
   10914:	1a00001e 	bne	10994 <CString::FormatV(char const*, std::__va_list)+0x85c>
   10918:	e1580004 	cmp	r8, r4
   1091c:	2afffeb2 	bcs	103ec <CString::FormatV(char const*, std::__va_list)+0x2b4>
   10920:	e0444008 	sub	r4, r4, r8
   10924:	e1a0000b 	mov	r0, fp
   10928:	e1a01004 	mov	r1, r4
   1092c:	ebfffc1a 	bl	f99c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   10930:	e3a00030 	mov	r0, #48	; 0x30
   10934:	e2443001 	sub	r3, r4, #1
   10938:	e59b200c 	ldr	r2, [fp, #12]
   1093c:	e2433001 	sub	r3, r3, #1
   10940:	e2821001 	add	r1, r2, #1
   10944:	e3730001 	cmn	r3, #1
   10948:	e58b100c 	str	r1, [fp, #12]
   1094c:	e5c20000 	strb	r0, [r2]
   10950:	1afffff8 	bne	10938 <CString::FormatV(char const*, std::__va_list)+0x800>
   10954:	eafffea4 	b	103ec <CString::FormatV(char const*, std::__va_list)+0x2b4>
   10958:	e3a01001 	mov	r1, #1
   1095c:	e1a0000b 	mov	r0, fp
   10960:	ebfffc0d 	bl	f99c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   10964:	e3a0202d 	mov	r2, #45	; 0x2d
   10968:	e59b300c 	ldr	r3, [fp, #12]
   1096c:	e2831001 	add	r1, r3, #1
   10970:	e58b100c 	str	r1, [fp, #12]
   10974:	e5c32000 	strb	r2, [r3]
   10978:	eafffefa 	b	10568 <CString::FormatV(char const*, std::__va_list)+0x430>
   1097c:	e1a09006 	mov	r9, r6
   10980:	e3a0a001 	mov	sl, #1
   10984:	eafffed8 	b	104ec <CString::FormatV(char const*, std::__va_list)+0x3b4>
   10988:	e1a03006 	mov	r3, r6
   1098c:	e3a0a001 	mov	sl, #1
   10990:	eafffe58 	b	102f8 <CString::FormatV(char const*, std::__va_list)+0x1c0>
   10994:	e3a01001 	mov	r1, #1
   10998:	e1a0000b 	mov	r0, fp
   1099c:	ebfffbfe 	bl	f99c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   109a0:	e3a0202d 	mov	r2, #45	; 0x2d
   109a4:	e59b300c 	ldr	r3, [fp, #12]
   109a8:	e2831001 	add	r1, r3, #1
   109ac:	e58b100c 	str	r1, [fp, #12]
   109b0:	e5c32000 	strb	r2, [r3]
   109b4:	eaffffd7 	b	10918 <CString::FormatV(char const*, std::__va_list)+0x7e0>
   109b8:	cccccccd 	.word	0xcccccccd

000109bc <CString::Format(char const*, ...)>:
   109bc:	e92d000e 	push	{r1, r2, r3}
   109c0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   109c4:	e24dd008 	sub	sp, sp, #8
   109c8:	e28d3010 	add	r3, sp, #16
   109cc:	e1a02003 	mov	r2, r3
   109d0:	e59d100c 	ldr	r1, [sp, #12]
   109d4:	e58d3004 	str	r3, [sp, #4]
   109d8:	ebfffdd6 	bl	10138 <CString::FormatV(char const*, std::__va_list)>
   109dc:	e28dd008 	add	sp, sp, #8
   109e0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   109e4:	e28dd00c 	add	sp, sp, #12
   109e8:	e12fff1e 	bx	lr

000109ec <__aeabi_atexit>:
   109ec:	e12fff1e 	bx	lr

000109f0 <halt>:
   109f0:	f10c0080 	cpsid	i
   109f4:	f10c0040 	cpsid	f
   109f8:	eafffffe 	b	109f8 <halt+0x8>

000109fc <reboot>:
   109fc:	e3a03000 	mov	r3, #0
   10a00:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   10a04:	e59f3010 	ldr	r3, [pc, #16]	; 10a1c <reboot+0x20>
   10a08:	e59f1010 	ldr	r1, [pc, #16]	; 10a20 <reboot+0x24>
   10a0c:	e59f2010 	ldr	r2, [pc, #16]	; 10a24 <reboot+0x28>
   10a10:	e5831024 	str	r1, [r3, #36]	; 0x24
   10a14:	e583201c 	str	r2, [r3, #28]
   10a18:	eafffffe 	b	10a18 <reboot+0x1c>
   10a1c:	20100000 	.word	0x20100000
   10a20:	5a000001 	.word	0x5a000001
   10a24:	5a000020 	.word	0x5a000020

00010a28 <sysinit>:
   10a28:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   10a2c:	e24dd01c 	sub	sp, sp, #28
   10a30:	f1080040 	cpsie	f
   10a34:	ee113f50 	mrc	15, 0, r3, cr1, cr0, {2}
   10a38:	e383360f 	orr	r3, r3, #15728640	; 0xf00000
   10a3c:	ee013f50 	mcr	15, 0, r3, cr1, cr0, {2}
   10a40:	e3a02000 	mov	r2, #0
   10a44:	ee072f95 	mcr	15, 0, r2, cr7, cr5, {4}
   10a48:	e3a03101 	mov	r3, #1073741824	; 0x40000000
   10a4c:	eee83a10 	vmsr	fpexc, r3
   10a50:	e3a03402 	mov	r3, #33554432	; 0x2000000
   10a54:	eee13a10 	vmsr	fpscr, r3
   10a58:	e59f3068 	ldr	r3, [pc, #104]	; 10ac8 <sysinit+0xa0>
   10a5c:	e59f1068 	ldr	r1, [pc, #104]	; 10acc <sysinit+0xa4>
   10a60:	e1530001 	cmp	r3, r1
   10a64:	2a000002 	bcs	10a74 <sysinit+0x4c>
   10a68:	e4c32001 	strb	r2, [r3], #1
   10a6c:	e1530001 	cmp	r3, r1
   10a70:	1afffffc 	bne	10a68 <sysinit+0x40>
   10a74:	e1a0000d 	mov	r0, sp
   10a78:	ebfff2e8 	bl	d620 <CMachineInfo::CMachineInfo()>
   10a7c:	e59f504c 	ldr	r5, [pc, #76]	; 10ad0 <sysinit+0xa8>
   10a80:	e59f304c 	ldr	r3, [pc, #76]	; 10ad4 <sysinit+0xac>
   10a84:	e1550003 	cmp	r5, r3
   10a88:	2a000009 	bcs	10ab4 <sysinit+0x8c>
   10a8c:	e1e06005 	mvn	r6, r5
   10a90:	e3a04000 	mov	r4, #0
   10a94:	e0866003 	add	r6, r6, r3
   10a98:	e1a06126 	lsr	r6, r6, #2
   10a9c:	e2866001 	add	r6, r6, #1
   10aa0:	e2844001 	add	r4, r4, #1
   10aa4:	e4953004 	ldr	r3, [r5], #4
   10aa8:	e12fff33 	blx	r3
   10aac:	e1540006 	cmp	r4, r6
   10ab0:	1afffffa 	bne	10aa0 <sysinit+0x78>
   10ab4:	ebffdd6b 	bl	8068 <main>
   10ab8:	e3500001 	cmp	r0, #1
   10abc:	0a000000 	beq	10ac4 <sysinit+0x9c>
   10ac0:	ebffffca 	bl	109f0 <halt>
   10ac4:	ebffffcc 	bl	109fc <reboot>
   10ac8:	00016624 	.word	0x00016624
   10acc:	000166e8 	.word	0x000166e8
   10ad0:	00016514 	.word	0x00016514
   10ad4:	00016524 	.word	0x00016524

00010ad8 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]>:
   10ad8:	e2800001 	add	r0, r0, #1
   10adc:	e3a03000 	mov	r3, #0
   10ae0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   10ae4:	e59f3020 	ldr	r3, [pc, #32]	; 10b0c <CTimer::SimpleusDelay(unsigned int) [clone .part.0]+0x34>
   10ae8:	e1a01003 	mov	r1, r3
   10aec:	e5932004 	ldr	r2, [r3, #4]
   10af0:	e5913004 	ldr	r3, [r1, #4]
   10af4:	e0433002 	sub	r3, r3, r2
   10af8:	e1500003 	cmp	r0, r3
   10afc:	8afffffb 	bhi	10af0 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]+0x18>
   10b00:	e3a03000 	mov	r3, #0
   10b04:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   10b08:	e12fff1e 	bx	lr
   10b0c:	20003000 	.word	0x20003000

00010b10 <CTimer::CTimer(CInterruptSystem*)>:
   10b10:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   10b14:	e3a05000 	mov	r5, #0
   10b18:	e3a07001 	mov	r7, #1
   10b1c:	e1a04000 	mov	r4, r0
   10b20:	e59f605c 	ldr	r6, [pc, #92]	; 10b84 <CTimer::CTimer(CInterruptSystem*)+0x74>
   10b24:	e5805004 	str	r5, [r0, #4]
   10b28:	e5801000 	str	r1, [r0]
   10b2c:	e5805008 	str	r5, [r0, #8]
   10b30:	e5805014 	str	r5, [r0, #20]
   10b34:	e5807010 	str	r7, [r0, #16]
   10b38:	e580500c 	str	r5, [r0, #12]
   10b3c:	e2800018 	add	r0, r0, #24
   10b40:	eb000b32 	bl	13810 <CPtrList::CPtrList()>
   10b44:	e5961000 	ldr	r1, [r6]
   10b48:	e59f2038 	ldr	r2, [pc, #56]	; 10b88 <CTimer::CTimer(CInterruptSystem*)+0x78>
   10b4c:	e59f3038 	ldr	r3, [pc, #56]	; 10b8c <CTimer::CTimer(CInterruptSystem*)+0x7c>
   10b50:	e1510005 	cmp	r1, r5
   10b54:	e584701c 	str	r7, [r4, #28]
   10b58:	e5845028 	str	r5, [r4, #40]	; 0x28
   10b5c:	e5842020 	str	r2, [r4, #32]
   10b60:	e5843024 	str	r3, [r4, #36]	; 0x24
   10b64:	0a000003 	beq	10b78 <CTimer::CTimer(CInterruptSystem*)+0x68>
   10b68:	e3a0203d 	mov	r2, #61	; 0x3d
   10b6c:	e59f101c 	ldr	r1, [pc, #28]	; 10b90 <CTimer::CTimer(CInterruptSystem*)+0x80>
   10b70:	e59f001c 	ldr	r0, [pc, #28]	; 10b94 <CTimer::CTimer(CInterruptSystem*)+0x84>
   10b74:	ebffe7ba 	bl	aa64 <assertion_failed>
   10b78:	e5864000 	str	r4, [r6]
   10b7c:	e1a00004 	mov	r0, r4
   10b80:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   10b84:	00016660 	.word	0x00016660
   10b88:	00055730 	.word	0x00055730
   10b8c:	0000015e 	.word	0x0000015e
   10b90:	000150a8 	.word	0x000150a8
   10b94:	000150b4 	.word	0x000150b4

00010b98 <CTimer::~CTimer()>:
   10b98:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10b9c:	e1a0a000 	mov	sl, r0
   10ba0:	e5900000 	ldr	r0, [r0]
   10ba4:	e3500000 	cmp	r0, #0
   10ba8:	0a000028 	beq	10c50 <CTimer::~CTimer()+0xb8>
   10bac:	e3a01003 	mov	r1, #3
   10bb0:	ebffee76 	bl	c590 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   10bb4:	e3a0904b 	mov	r9, #75	; 0x4b
   10bb8:	e59f70a8 	ldr	r7, [pc, #168]	; 10c68 <CTimer::~CTimer()+0xd0>
   10bbc:	e59f60a8 	ldr	r6, [pc, #168]	; 10c6c <CTimer::~CTimer()+0xd4>
   10bc0:	e59f80a8 	ldr	r8, [pc, #168]	; 10c70 <CTimer::~CTimer()+0xd8>
   10bc4:	e28a4018 	add	r4, sl, #24
   10bc8:	ea000011 	b	10c14 <CTimer::~CTimer()+0x7c>
   10bcc:	e1a01005 	mov	r1, r5
   10bd0:	e1a00004 	mov	r0, r4
   10bd4:	eb000b35 	bl	138b0 <CPtrList::GetPtr(TPtrListElement*)>
   10bd8:	e250b000 	subs	fp, r0, #0
   10bdc:	0a000016 	beq	10c3c <CTimer::~CTimer()+0xa4>
   10be0:	e59b3000 	ldr	r3, [fp]
   10be4:	e1530006 	cmp	r3, r6
   10be8:	0a000003 	beq	10bfc <CTimer::~CTimer()+0x64>
   10bec:	e1a02009 	mov	r2, r9
   10bf0:	e1a01007 	mov	r1, r7
   10bf4:	e1a00008 	mov	r0, r8
   10bf8:	ebffe799 	bl	aa64 <assertion_failed>
   10bfc:	e1a01005 	mov	r1, r5
   10c00:	e1a00004 	mov	r0, r4
   10c04:	eb000bbe 	bl	13b04 <CPtrList::Remove(TPtrListElement*)>
   10c08:	e1a0000b 	mov	r0, fp
   10c0c:	e3a01014 	mov	r1, #20
   10c10:	eb0006e3 	bl	127a4 <operator delete(void*, unsigned int)>
   10c14:	e1a00004 	mov	r0, r4
   10c18:	eb000b0c 	bl	13850 <CPtrList::GetFirst()>
   10c1c:	e2505000 	subs	r5, r0, #0
   10c20:	1affffe9 	bne	10bcc <CTimer::~CTimer()+0x34>
   10c24:	e59f3048 	ldr	r3, [pc, #72]	; 10c74 <CTimer::~CTimer()+0xdc>
   10c28:	e1a00004 	mov	r0, r4
   10c2c:	e5835000 	str	r5, [r3]
   10c30:	eb000af9 	bl	1381c <CPtrList::~CPtrList()>
   10c34:	e1a0000a 	mov	r0, sl
   10c38:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10c3c:	e3a0204a 	mov	r2, #74	; 0x4a
   10c40:	e1a01007 	mov	r1, r7
   10c44:	e59f002c 	ldr	r0, [pc, #44]	; 10c78 <CTimer::~CTimer()+0xe0>
   10c48:	ebffe785 	bl	aa64 <assertion_failed>
   10c4c:	eaffffe3 	b	10be0 <CTimer::~CTimer()+0x48>
   10c50:	e59f0024 	ldr	r0, [pc, #36]	; 10c7c <CTimer::~CTimer()+0xe4>
   10c54:	e3a02043 	mov	r2, #67	; 0x43
   10c58:	e59f1008 	ldr	r1, [pc, #8]	; 10c68 <CTimer::~CTimer()+0xd0>
   10c5c:	ebffe780 	bl	aa64 <assertion_failed>
   10c60:	e59a0000 	ldr	r0, [sl]
   10c64:	eaffffd0 	b	10bac <CTimer::~CTimer()+0x14>
   10c68:	000150a8 	.word	0x000150a8
   10c6c:	4b544d43 	.word	0x4b544d43
   10c70:	000150d0 	.word	0x000150d0
   10c74:	00016660 	.word	0x00016660
   10c78:	000150c4 	.word	0x000150c4
   10c7c:	000140a8 	.word	0x000140a8

00010c80 <CTimer::SetTimeZone(int)>:
   10c80:	e59f2018 	ldr	r2, [pc, #24]	; 10ca0 <CTimer::SetTimeZone(int)+0x20>
   10c84:	e2813e59 	add	r3, r1, #1424	; 0x590
   10c88:	e283300f 	add	r3, r3, #15
   10c8c:	e1530002 	cmp	r3, r2
   10c90:	95801014 	strls	r1, [r0, #20]
   10c94:	93a00001 	movls	r0, #1
   10c98:	83a00000 	movhi	r0, #0
   10c9c:	e12fff1e 	bx	lr
   10ca0:	00000b3e 	.word	0x00000b3e

00010ca4 <CTimer::GetTimeZone() const>:
   10ca4:	e5900014 	ldr	r0, [r0, #20]
   10ca8:	e12fff1e 	bx	lr

00010cac <CTimer::SetTime(unsigned int, bool)>:
   10cac:	e3520000 	cmp	r2, #0
   10cb0:	e92d4070 	push	{r4, r5, r6, lr}
   10cb4:	e1a04000 	mov	r4, r0
   10cb8:	e1a05001 	mov	r5, r1
   10cbc:	1a000004 	bne	10cd4 <CTimer::SetTime(unsigned int, bool)+0x28>
   10cc0:	e5903014 	ldr	r3, [r0, #20]
   10cc4:	e0633203 	rsb	r3, r3, r3, lsl #4
   10cc8:	e1b03103 	lsls	r3, r3, #2
   10ccc:	4a00000e 	bmi	10d0c <CTimer::SetTime(unsigned int, bool)+0x60>
   10cd0:	e0855003 	add	r5, r5, r3
   10cd4:	e5940010 	ldr	r0, [r4, #16]
   10cd8:	e3500000 	cmp	r0, #0
   10cdc:	1a000002 	bne	10cec <CTimer::SetTime(unsigned int, bool)+0x40>
   10ce0:	e3a00001 	mov	r0, #1
   10ce4:	e584500c 	str	r5, [r4, #12]
   10ce8:	e8bd8070 	pop	{r4, r5, r6, pc}
   10cec:	eb00064e 	bl	1262c <EnterCritical>
   10cf0:	e5943010 	ldr	r3, [r4, #16]
   10cf4:	e584500c 	str	r5, [r4, #12]
   10cf8:	e3530000 	cmp	r3, #0
   10cfc:	0a000007 	beq	10d20 <CTimer::SetTime(unsigned int, bool)+0x74>
   10d00:	eb000676 	bl	126e0 <LeaveCritical>
   10d04:	e3a00001 	mov	r0, #1
   10d08:	e8bd8070 	pop	{r4, r5, r6, pc}
   10d0c:	e2631000 	rsb	r1, r3, #0
   10d10:	e1510005 	cmp	r1, r5
   10d14:	daffffed 	ble	10cd0 <CTimer::SetTime(unsigned int, bool)+0x24>
   10d18:	e1a00002 	mov	r0, r2
   10d1c:	e8bd8070 	pop	{r4, r5, r6, pc}
   10d20:	e3a00001 	mov	r0, #1
   10d24:	e8bd8070 	pop	{r4, r5, r6, pc}

00010d28 <CTimer::GetClockTicks()>:
   10d28:	e3a03000 	mov	r3, #0
   10d2c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   10d30:	e59f2008 	ldr	r2, [pc, #8]	; 10d40 <CTimer::GetClockTicks()+0x18>
   10d34:	e5920004 	ldr	r0, [r2, #4]
   10d38:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   10d3c:	e12fff1e 	bx	lr
   10d40:	20003000 	.word	0x20003000

00010d44 <CTimer::GetTicks() const>:
   10d44:	e5900004 	ldr	r0, [r0, #4]
   10d48:	e12fff1e 	bx	lr

00010d4c <CTimer::GetUptime() const>:
   10d4c:	e5900008 	ldr	r0, [r0, #8]
   10d50:	e12fff1e 	bx	lr

00010d54 <CTimer::GetTime() const>:
   10d54:	e590000c 	ldr	r0, [r0, #12]
   10d58:	e12fff1e 	bx	lr

00010d5c <CTimer::GetLocalTime(unsigned int*, unsigned int*)>:
   10d5c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   10d60:	e1a04000 	mov	r4, r0
   10d64:	e5900010 	ldr	r0, [r0, #16]
   10d68:	e1a06001 	mov	r6, r1
   10d6c:	e3500000 	cmp	r0, #0
   10d70:	e1a05002 	mov	r5, r2
   10d74:	1a000011 	bne	10dc0 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x64>
   10d78:	e594700c 	ldr	r7, [r4, #12]
   10d7c:	e5944004 	ldr	r4, [r4, #4]
   10d80:	e3560000 	cmp	r6, #0
   10d84:	0a00001a 	beq	10df4 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x98>
   10d88:	e3550000 	cmp	r5, #0
   10d8c:	e5867000 	str	r7, [r6]
   10d90:	0a000012 	beq	10de0 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x84>
   10d94:	e3a03064 	mov	r3, #100	; 0x64
   10d98:	e59f2068 	ldr	r2, [pc, #104]	; 10e08 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xac>
   10d9c:	e59f1068 	ldr	r1, [pc, #104]	; 10e0c <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb0>
   10da0:	e0820492 	umull	r0, r2, r2, r4
   10da4:	e1a022a2 	lsr	r2, r2, #5
   10da8:	e0030293 	mul	r3, r3, r2
   10dac:	e0443003 	sub	r3, r4, r3
   10db0:	e0030391 	mul	r3, r1, r3
   10db4:	e3a00001 	mov	r0, #1
   10db8:	e5853000 	str	r3, [r5]
   10dbc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   10dc0:	eb000619 	bl	1262c <EnterCritical>
   10dc4:	e5943010 	ldr	r3, [r4, #16]
   10dc8:	e594700c 	ldr	r7, [r4, #12]
   10dcc:	e3530000 	cmp	r3, #0
   10dd0:	e5944004 	ldr	r4, [r4, #4]
   10dd4:	0affffe9 	beq	10d80 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x24>
   10dd8:	eb000640 	bl	126e0 <LeaveCritical>
   10ddc:	eaffffe7 	b	10d80 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x24>
   10de0:	e3a020dd 	mov	r2, #221	; 0xdd
   10de4:	e59f1024 	ldr	r1, [pc, #36]	; 10e10 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb4>
   10de8:	e59f0024 	ldr	r0, [pc, #36]	; 10e14 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb8>
   10dec:	ebffe71c 	bl	aa64 <assertion_failed>
   10df0:	eaffffe7 	b	10d94 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x38>
   10df4:	e3a020da 	mov	r2, #218	; 0xda
   10df8:	e59f1010 	ldr	r1, [pc, #16]	; 10e10 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb4>
   10dfc:	e59f0014 	ldr	r0, [pc, #20]	; 10e18 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xbc>
   10e00:	ebffe717 	bl	aa64 <assertion_failed>
   10e04:	eaffffdf 	b	10d88 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x2c>
   10e08:	51eb851f 	.word	0x51eb851f
   10e0c:	00002710 	.word	0x00002710
   10e10:	000150a8 	.word	0x000150a8
   10e14:	00015108 	.word	0x00015108
   10e18:	000150f8 	.word	0x000150f8

00010e1c <CTimer::GetUniversalTime() const>:
   10e1c:	e5903014 	ldr	r3, [r0, #20]
   10e20:	e590000c 	ldr	r0, [r0, #12]
   10e24:	e0633203 	rsb	r3, r3, r3, lsl #4
   10e28:	e1a03103 	lsl	r3, r3, #2
   10e2c:	e1530000 	cmp	r3, r0
   10e30:	d0400003 	suble	r0, r0, r3
   10e34:	c3a00000 	movgt	r0, #0
   10e38:	e12fff1e 	bx	lr

00010e3c <CTimer::GetUniversalTime(unsigned int*, unsigned int*)>:
   10e3c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10e40:	e1a05000 	mov	r5, r0
   10e44:	e5900010 	ldr	r0, [r0, #16]
   10e48:	e1a09001 	mov	r9, r1
   10e4c:	e3500000 	cmp	r0, #0
   10e50:	e1a07002 	mov	r7, r2
   10e54:	1a000019 	bne	10ec0 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x84>
   10e58:	e595600c 	ldr	r6, [r5, #12]
   10e5c:	e5958004 	ldr	r8, [r5, #4]
   10e60:	e5953014 	ldr	r3, [r5, #20]
   10e64:	e0633203 	rsb	r3, r3, r3, lsl #4
   10e68:	e1a04103 	lsl	r4, r3, #2
   10e6c:	e1540006 	cmp	r4, r6
   10e70:	ca000010 	bgt	10eb8 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x7c>
   10e74:	e3590000 	cmp	r9, #0
   10e78:	0a00001d 	beq	10ef4 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xb8>
   10e7c:	e0464004 	sub	r4, r6, r4
   10e80:	e3570000 	cmp	r7, #0
   10e84:	e5894000 	str	r4, [r9]
   10e88:	0a000014 	beq	10ee0 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xa4>
   10e8c:	e3a03064 	mov	r3, #100	; 0x64
   10e90:	e59f2070 	ldr	r2, [pc, #112]	; 10f08 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xcc>
   10e94:	e59f1070 	ldr	r1, [pc, #112]	; 10f0c <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd0>
   10e98:	e0820892 	umull	r0, r2, r2, r8
   10e9c:	e1a022a2 	lsr	r2, r2, #5
   10ea0:	e0030293 	mul	r3, r3, r2
   10ea4:	e0483003 	sub	r3, r8, r3
   10ea8:	e0030391 	mul	r3, r1, r3
   10eac:	e3a00001 	mov	r0, #1
   10eb0:	e5873000 	str	r3, [r7]
   10eb4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10eb8:	e3a00000 	mov	r0, #0
   10ebc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10ec0:	eb0005d9 	bl	1262c <EnterCritical>
   10ec4:	e5953010 	ldr	r3, [r5, #16]
   10ec8:	e595600c 	ldr	r6, [r5, #12]
   10ecc:	e3530000 	cmp	r3, #0
   10ed0:	e5958004 	ldr	r8, [r5, #4]
   10ed4:	0affffe1 	beq	10e60 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x24>
   10ed8:	eb000600 	bl	126e0 <LeaveCritical>
   10edc:	eaffffdf 	b	10e60 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x24>
   10ee0:	e59f2028 	ldr	r2, [pc, #40]	; 10f10 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd4>
   10ee4:	e59f1028 	ldr	r1, [pc, #40]	; 10f14 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd8>
   10ee8:	e59f0028 	ldr	r0, [pc, #40]	; 10f18 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xdc>
   10eec:	ebffe6dc 	bl	aa64 <assertion_failed>
   10ef0:	eaffffe5 	b	10e8c <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x50>
   10ef4:	e3a020ff 	mov	r2, #255	; 0xff
   10ef8:	e59f1014 	ldr	r1, [pc, #20]	; 10f14 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd8>
   10efc:	e59f0018 	ldr	r0, [pc, #24]	; 10f1c <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xe0>
   10f00:	ebffe6d7 	bl	aa64 <assertion_failed>
   10f04:	eaffffdc 	b	10e7c <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x40>
   10f08:	51eb851f 	.word	0x51eb851f
   10f0c:	00002710 	.word	0x00002710
   10f10:	00000102 	.word	0x00000102
   10f14:	000150a8 	.word	0x000150a8
   10f18:	00015108 	.word	0x00015108
   10f1c:	000150f8 	.word	0x000150f8

00010f20 <CTimer::GetTimeString()>:
   10f20:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f24:	e1a05000 	mov	r5, r0
   10f28:	e5900010 	ldr	r0, [r0, #16]
   10f2c:	e24dd014 	sub	sp, sp, #20
   10f30:	e3500000 	cmp	r0, #0
   10f34:	1a000065 	bne	110d0 <CTimer::GetTimeString()+0x1b0>
   10f38:	e595400c 	ldr	r4, [r5, #12]
   10f3c:	e5959004 	ldr	r9, [r5, #4]
   10f40:	e1940009 	orrs	r0, r4, r9
   10f44:	0a00003e 	beq	11044 <CTimer::GetTimeString()+0x124>
   10f48:	e59f61a0 	ldr	r6, [pc, #416]	; 110f0 <CTimer::GetTimeString()+0x1d0>
   10f4c:	e59f81a0 	ldr	r8, [pc, #416]	; 110f4 <CTimer::GetTimeString()+0x1d4>
   10f50:	e0873496 	umull	r3, r7, r6, r4
   10f54:	e1a072a7 	lsr	r7, r7, #5
   10f58:	e0863796 	umull	r3, r6, r6, r7
   10f5c:	e59f3194 	ldr	r3, [pc, #404]	; 110f8 <CTimer::GetTimeString()+0x1d8>
   10f60:	e0882498 	umull	r2, r8, r8, r4
   10f64:	e0832493 	umull	r2, r3, r3, r4
   10f68:	e1a062a6 	lsr	r6, r6, #5
   10f6c:	e0666206 	rsb	r6, r6, r6, lsl #4
   10f70:	e0672207 	rsb	r2, r7, r7, lsl #4
   10f74:	e0476106 	sub	r6, r7, r6, lsl #2
   10f78:	e3a0a064 	mov	sl, #100	; 0x64
   10f7c:	e0447102 	sub	r7, r4, r2, lsl #2
   10f80:	e3a0be19 	mov	fp, #400	; 0x190
   10f84:	e59f5170 	ldr	r5, [pc, #368]	; 110fc <CTimer::GetTimeString()+0x1dc>
   10f88:	e59fe170 	ldr	lr, [pc, #368]	; 11100 <CTimer::GetTimeString()+0x1e0>
   10f8c:	e59fc170 	ldr	ip, [pc, #368]	; 11104 <CTimer::GetTimeString()+0x1e4>
   10f90:	e59f0170 	ldr	r0, [pc, #368]	; 11108 <CTimer::GetTimeString()+0x1e8>
   10f94:	e1a085a8 	lsr	r8, r8, #11
   10f98:	e1a04823 	lsr	r4, r3, #16
   10f9c:	ea00000a 	b	10fcc <CTimer::GetTimeString()+0xac>
   10fa0:	e001019b 	mul	r1, fp, r1
   10fa4:	e0451001 	sub	r1, r5, r1
   10fa8:	e16f1f11 	clz	r1, r1
   10fac:	e1a012a1 	lsr	r1, r1, #5
   10fb0:	e3510000 	cmp	r1, #0
   10fb4:	01a0300c 	moveq	r3, ip
   10fb8:	11a03000 	movne	r3, r0
   10fbc:	e1540003 	cmp	r4, r3
   10fc0:	3a000021 	bcc	1104c <CTimer::GetTimeString()+0x12c>
   10fc4:	e0444003 	sub	r4, r4, r3
   10fc8:	e2855001 	add	r5, r5, #1
   10fcc:	e081359e 	umull	r3, r1, lr, r5
   10fd0:	e1a032a1 	lsr	r3, r1, #5
   10fd4:	e003039a 	mul	r3, sl, r3
   10fd8:	e1550003 	cmp	r5, r3
   10fdc:	e1a013a1 	lsr	r1, r1, #7
   10fe0:	0affffee 	beq	10fa0 <CTimer::GetTimeString()+0x80>
   10fe4:	e3150003 	tst	r5, #3
   10fe8:	03a01001 	moveq	r1, #1
   10fec:	13a01000 	movne	r1, #0
   10ff0:	eaffffee 	b	10fb0 <CTimer::GetTimeString()+0x90>
   10ff4:	e3a03064 	mov	r3, #100	; 0x64
   10ff8:	e59fb100 	ldr	fp, [pc, #256]	; 11100 <CTimer::GetTimeString()+0x1e0>
   10ffc:	e3a00010 	mov	r0, #16
   11000:	e08b299b 	umull	r2, fp, fp, r9
   11004:	e1a0b2ab 	lsr	fp, fp, #5
   11008:	e00b0b93 	mul	fp, r3, fp
   1100c:	eb0005e0 	bl	12794 <operator new(unsigned int)>
   11010:	e049b00b 	sub	fp, r9, fp
   11014:	e1a09000 	mov	r9, r0
   11018:	ebfffa79 	bl	fa04 <CString::CString()>
   1101c:	e59f30e8 	ldr	r3, [pc, #232]	; 1110c <CTimer::GetTimeString()+0x1ec>
   11020:	e1550003 	cmp	r5, r3
   11024:	8a000018 	bhi	1108c <CTimer::GetTimeString()+0x16c>
   11028:	e1a00009 	mov	r0, r9
   1102c:	e88d0880 	stm	sp, {r7, fp}
   11030:	e1a03006 	mov	r3, r6
   11034:	e1a02008 	mov	r2, r8
   11038:	e59f10d0 	ldr	r1, [pc, #208]	; 11110 <CTimer::GetTimeString()+0x1f0>
   1103c:	ebfffe5e 	bl	109bc <CString::Format(char const*, ...)>
   11040:	e1a00009 	mov	r0, r9
   11044:	e28dd014 	add	sp, sp, #20
   11048:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1104c:	e3a0a000 	mov	sl, #0
   11050:	e3a0001d 	mov	r0, #29
   11054:	e59f20b8 	ldr	r2, [pc, #184]	; 11114 <CTimer::GetTimeString()+0x1f4>
   11058:	ea000004 	b	11070 <CTimer::GetTimeString()+0x150>
   1105c:	e1a03000 	mov	r3, r0
   11060:	e1540003 	cmp	r4, r3
   11064:	3affffe2 	bcc	10ff4 <CTimer::GetTimeString()+0xd4>
   11068:	e0444003 	sub	r4, r4, r3
   1106c:	e28aa001 	add	sl, sl, #1
   11070:	e35a0001 	cmp	sl, #1
   11074:	13a03000 	movne	r3, #0
   11078:	02013001 	andeq	r3, r1, #1
   1107c:	e3530000 	cmp	r3, #0
   11080:	1afffff5 	bne	1105c <CTimer::GetTimeString()+0x13c>
   11084:	e792310a 	ldr	r3, [r2, sl, lsl #2]
   11088:	eafffff4 	b	11060 <CTimer::GetTimeString()+0x140>
   1108c:	e59f3084 	ldr	r3, [pc, #132]	; 11118 <CTimer::GetTimeString()+0x1f8>
   11090:	e58db00c 	str	fp, [sp, #12]
   11094:	e0832893 	umull	r2, r3, r3, r8
   11098:	e1a03223 	lsr	r3, r3, #4
   1109c:	e0833083 	add	r3, r3, r3, lsl #1
   110a0:	e59f2074 	ldr	r2, [pc, #116]	; 1111c <CTimer::GetTimeString()+0x1fc>
   110a4:	e0488183 	sub	r8, r8, r3, lsl #3
   110a8:	e792210a 	ldr	r2, [r2, sl, lsl #2]
   110ac:	e1a00009 	mov	r0, r9
   110b0:	e98d00c0 	stmib	sp, {r6, r7}
   110b4:	e2843001 	add	r3, r4, #1
   110b8:	e58d8000 	str	r8, [sp]
   110bc:	e59f105c 	ldr	r1, [pc, #92]	; 11120 <CTimer::GetTimeString()+0x200>
   110c0:	ebfffe3d 	bl	109bc <CString::Format(char const*, ...)>
   110c4:	e1a00009 	mov	r0, r9
   110c8:	e28dd014 	add	sp, sp, #20
   110cc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   110d0:	eb000555 	bl	1262c <EnterCritical>
   110d4:	e5953010 	ldr	r3, [r5, #16]
   110d8:	e595400c 	ldr	r4, [r5, #12]
   110dc:	e3530000 	cmp	r3, #0
   110e0:	e5959004 	ldr	r9, [r5, #4]
   110e4:	0affff95 	beq	10f40 <CTimer::GetTimeString()+0x20>
   110e8:	eb00057c 	bl	126e0 <LeaveCritical>
   110ec:	eaffff93 	b	10f40 <CTimer::GetTimeString()+0x20>
   110f0:	88888889 	.word	0x88888889
   110f4:	91a2b3c5 	.word	0x91a2b3c5
   110f8:	c22e4507 	.word	0xc22e4507
   110fc:	000007b2 	.word	0x000007b2
   11100:	51eb851f 	.word	0x51eb851f
   11104:	0000016d 	.word	0x0000016d
   11108:	0000016e 	.word	0x0000016e
   1110c:	000007b7 	.word	0x000007b7
   11110:	00015138 	.word	0x00015138
   11114:	00015070 	.word	0x00015070
   11118:	aaaaaaab 	.word	0xaaaaaaab
   1111c:	00016524 	.word	0x00016524
   11120:	0001511c 	.word	0x0001511c

00011124 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>:
   11124:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11128:	e1a09000 	mov	r9, r0
   1112c:	e24dd00c 	sub	sp, sp, #12
   11130:	e58d0004 	str	r0, [sp, #4]
   11134:	e1a04002 	mov	r4, r2
   11138:	e3a00014 	mov	r0, #20
   1113c:	e1a06001 	mov	r6, r1
   11140:	e1a07003 	mov	r7, r3
   11144:	e59d5030 	ldr	r5, [sp, #48]	; 0x30
   11148:	eb000591 	bl	12794 <operator new(unsigned int)>
   1114c:	e5991004 	ldr	r1, [r9, #4]
   11150:	e3540000 	cmp	r4, #0
   11154:	e1a08000 	mov	r8, r0
   11158:	e0816006 	add	r6, r1, r6
   1115c:	0a00003d 	beq	11258 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x134>
   11160:	e59d3004 	ldr	r3, [sp, #4]
   11164:	e59f2100 	ldr	r2, [pc, #256]	; 1126c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x148>
   11168:	e593001c 	ldr	r0, [r3, #28]
   1116c:	e98800d0 	stmib	r8, {r4, r6, r7}
   11170:	e3500000 	cmp	r0, #0
   11174:	e5885010 	str	r5, [r8, #16]
   11178:	e5882000 	str	r2, [r8]
   1117c:	1a000033 	bne	11250 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x12c>
   11180:	e59d3004 	ldr	r3, [sp, #4]
   11184:	e2835018 	add	r5, r3, #24
   11188:	e1a00005 	mov	r0, r5
   1118c:	eb0009af 	bl	13850 <CPtrList::GetFirst()>
   11190:	e2504000 	subs	r4, r0, #0
   11194:	0a000028 	beq	1123c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x118>
   11198:	e59f90d0 	ldr	r9, [pc, #208]	; 11270 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x14c>
   1119c:	e59f70c8 	ldr	r7, [pc, #200]	; 1126c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x148>
   111a0:	e59fb0cc 	ldr	fp, [pc, #204]	; 11274 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x150>
   111a4:	ea000010 	b	111ec <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xc8>
   111a8:	e59a3000 	ldr	r3, [sl]
   111ac:	e1530007 	cmp	r3, r7
   111b0:	0a000003 	beq	111c4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xa0>
   111b4:	e1a0200b 	mov	r2, fp
   111b8:	e1a01009 	mov	r1, r9
   111bc:	e59f00b4 	ldr	r0, [pc, #180]	; 11278 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x154>
   111c0:	ebffe627 	bl	aa64 <assertion_failed>
   111c4:	e59a3008 	ldr	r3, [sl, #8]
   111c8:	e1a01004 	mov	r1, r4
   111cc:	e0433006 	sub	r3, r3, r6
   111d0:	e3530000 	cmp	r3, #0
   111d4:	e1a00005 	mov	r0, r5
   111d8:	ca00000d 	bgt	11214 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xf0>
   111dc:	eb00099d 	bl	13858 <CPtrList::GetNext(TPtrListElement*)>
   111e0:	e3500000 	cmp	r0, #0
   111e4:	0a000014 	beq	1123c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x118>
   111e8:	e1a04000 	mov	r4, r0
   111ec:	e1a01004 	mov	r1, r4
   111f0:	e1a00005 	mov	r0, r5
   111f4:	eb0009ad 	bl	138b0 <CPtrList::GetPtr(TPtrListElement*)>
   111f8:	e250a000 	subs	sl, r0, #0
   111fc:	1affffe9 	bne	111a8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x84>
   11200:	e59f2074 	ldr	r2, [pc, #116]	; 1127c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x158>
   11204:	e1a01009 	mov	r1, r9
   11208:	e59f0070 	ldr	r0, [pc, #112]	; 11280 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x15c>
   1120c:	ebffe614 	bl	aa64 <assertion_failed>
   11210:	eaffffe4 	b	111a8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x84>
   11214:	e1a02008 	mov	r2, r8
   11218:	eb0009ba 	bl	13908 <CPtrList::InsertBefore(TPtrListElement*, void*)>
   1121c:	e59d3004 	ldr	r3, [sp, #4]
   11220:	e593301c 	ldr	r3, [r3, #28]
   11224:	e3530000 	cmp	r3, #0
   11228:	0a000000 	beq	11230 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x10c>
   1122c:	eb00052b 	bl	126e0 <LeaveCritical>
   11230:	e1a00008 	mov	r0, r8
   11234:	e28dd00c 	add	sp, sp, #12
   11238:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1123c:	e1a01004 	mov	r1, r4
   11240:	e1a00005 	mov	r0, r5
   11244:	e1a02008 	mov	r2, r8
   11248:	eb0009ef 	bl	13a0c <CPtrList::InsertAfter(TPtrListElement*, void*)>
   1124c:	eafffff2 	b	1121c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xf8>
   11250:	eb0004f5 	bl	1262c <EnterCritical>
   11254:	eaffffc9 	b	11180 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x5c>
   11258:	e59f2024 	ldr	r2, [pc, #36]	; 11284 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x160>
   1125c:	e59f100c 	ldr	r1, [pc, #12]	; 11270 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x14c>
   11260:	e59f0020 	ldr	r0, [pc, #32]	; 11288 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x164>
   11264:	ebffe5fe 	bl	aa64 <assertion_failed>
   11268:	eaffffbc 	b	11160 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x3c>
   1126c:	4b544d43 	.word	0x4b544d43
   11270:	000150a8 	.word	0x000150a8
   11274:	0000016a 	.word	0x0000016a
   11278:	0001515c 	.word	0x0001515c
   1127c:	00000169 	.word	0x00000169
   11280:	0001514c 	.word	0x0001514c
   11284:	00000159 	.word	0x00000159
   11288:	00014b84 	.word	0x00014b84

0001128c <CTimer::CancelKernelTimer(unsigned int)>:
   1128c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   11290:	e2514000 	subs	r4, r1, #0
   11294:	e1a05000 	mov	r5, r0
   11298:	0a00001f 	beq	1131c <CTimer::CancelKernelTimer(unsigned int)+0x90>
   1129c:	e595001c 	ldr	r0, [r5, #28]
   112a0:	e3500000 	cmp	r0, #0
   112a4:	1a00001a 	bne	11314 <CTimer::CancelKernelTimer(unsigned int)+0x88>
   112a8:	e2856018 	add	r6, r5, #24
   112ac:	e1a00006 	mov	r0, r6
   112b0:	e1a01004 	mov	r1, r4
   112b4:	eb000a65 	bl	13c50 <CPtrList::Find(void*)>
   112b8:	e2507000 	subs	r7, r0, #0
   112bc:	0a00000f 	beq	11300 <CTimer::CancelKernelTimer(unsigned int)+0x74>
   112c0:	e59f3068 	ldr	r3, [pc, #104]	; 11330 <CTimer::CancelKernelTimer(unsigned int)+0xa4>
   112c4:	e5942000 	ldr	r2, [r4]
   112c8:	e1520003 	cmp	r2, r3
   112cc:	0a000003 	beq	112e0 <CTimer::CancelKernelTimer(unsigned int)+0x54>
   112d0:	e59f205c 	ldr	r2, [pc, #92]	; 11334 <CTimer::CancelKernelTimer(unsigned int)+0xa8>
   112d4:	e59f105c 	ldr	r1, [pc, #92]	; 11338 <CTimer::CancelKernelTimer(unsigned int)+0xac>
   112d8:	e59f005c 	ldr	r0, [pc, #92]	; 1133c <CTimer::CancelKernelTimer(unsigned int)+0xb0>
   112dc:	ebffe5e0 	bl	aa64 <assertion_failed>
   112e0:	e1a01007 	mov	r1, r7
   112e4:	e1a00006 	mov	r0, r6
   112e8:	eb000a05 	bl	13b04 <CPtrList::Remove(TPtrListElement*)>
   112ec:	e3a03000 	mov	r3, #0
   112f0:	e1a00004 	mov	r0, r4
   112f4:	e5843000 	str	r3, [r4]
   112f8:	e3a01014 	mov	r1, #20
   112fc:	eb000528 	bl	127a4 <operator delete(void*, unsigned int)>
   11300:	e595301c 	ldr	r3, [r5, #28]
   11304:	e3530000 	cmp	r3, #0
   11308:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   1130c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   11310:	ea0004f2 	b	126e0 <LeaveCritical>
   11314:	eb0004c4 	bl	1262c <EnterCritical>
   11318:	eaffffe2 	b	112a8 <CTimer::CancelKernelTimer(unsigned int)+0x1c>
   1131c:	e59f201c 	ldr	r2, [pc, #28]	; 11340 <CTimer::CancelKernelTimer(unsigned int)+0xb4>
   11320:	e59f1010 	ldr	r1, [pc, #16]	; 11338 <CTimer::CancelKernelTimer(unsigned int)+0xac>
   11324:	e59f0018 	ldr	r0, [pc, #24]	; 11344 <CTimer::CancelKernelTimer(unsigned int)+0xb8>
   11328:	ebffe5cd 	bl	aa64 <assertion_failed>
   1132c:	eaffffda 	b	1129c <CTimer::CancelKernelTimer(unsigned int)+0x10>
   11330:	4b544d43 	.word	0x4b544d43
   11334:	0000018d 	.word	0x0000018d
   11338:	000150a8 	.word	0x000150a8
   1133c:	000150d0 	.word	0x000150d0
   11340:	00000186 	.word	0x00000186
   11344:	000150c4 	.word	0x000150c4

00011348 <CTimer::PollKernelTimers()>:
   11348:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1134c:	e1a05000 	mov	r5, r0
   11350:	e590001c 	ldr	r0, [r0, #28]
   11354:	e3500000 	cmp	r0, #0
   11358:	1a00004a 	bne	11488 <CTimer::PollKernelTimers()+0x140>
   1135c:	e2856018 	add	r6, r5, #24
   11360:	e1a00006 	mov	r0, r6
   11364:	eb000939 	bl	13850 <CPtrList::GetFirst()>
   11368:	e2504000 	subs	r4, r0, #0
   1136c:	0a00003b 	beq	11460 <CTimer::PollKernelTimers()+0x118>
   11370:	e59f9118 	ldr	r9, [pc, #280]	; 11490 <CTimer::PollKernelTimers()+0x148>
   11374:	e59f8118 	ldr	r8, [pc, #280]	; 11494 <CTimer::PollKernelTimers()+0x14c>
   11378:	e59fa118 	ldr	sl, [pc, #280]	; 11498 <CTimer::PollKernelTimers()+0x150>
   1137c:	ea000010 	b	113c4 <CTimer::PollKernelTimers()+0x7c>
   11380:	e5974004 	ldr	r4, [r7, #4]
   11384:	e3540000 	cmp	r4, #0
   11388:	0a00002c 	beq	11440 <CTimer::PollKernelTimers()+0xf8>
   1138c:	e5972010 	ldr	r2, [r7, #16]
   11390:	e597100c 	ldr	r1, [r7, #12]
   11394:	e1a00007 	mov	r0, r7
   11398:	e12fff34 	blx	r4
   1139c:	e3a03000 	mov	r3, #0
   113a0:	e1a00007 	mov	r0, r7
   113a4:	e5873000 	str	r3, [r7]
   113a8:	e3a01014 	mov	r1, #20
   113ac:	eb0004fc 	bl	127a4 <operator delete(void*, unsigned int)>
   113b0:	e595001c 	ldr	r0, [r5, #28]
   113b4:	e3500000 	cmp	r0, #0
   113b8:	1a000025 	bne	11454 <CTimer::PollKernelTimers()+0x10c>
   113bc:	e25b4000 	subs	r4, fp, #0
   113c0:	0a000026 	beq	11460 <CTimer::PollKernelTimers()+0x118>
   113c4:	e1a01004 	mov	r1, r4
   113c8:	e1a00006 	mov	r0, r6
   113cc:	eb000937 	bl	138b0 <CPtrList::GetPtr(TPtrListElement*)>
   113d0:	e2507000 	subs	r7, r0, #0
   113d4:	0a000026 	beq	11474 <CTimer::PollKernelTimers()+0x12c>
   113d8:	e5973000 	ldr	r3, [r7]
   113dc:	e1530008 	cmp	r3, r8
   113e0:	0a000003 	beq	113f4 <CTimer::PollKernelTimers()+0xac>
   113e4:	e59f20b0 	ldr	r2, [pc, #176]	; 1149c <CTimer::PollKernelTimers()+0x154>
   113e8:	e1a01009 	mov	r1, r9
   113ec:	e1a0000a 	mov	r0, sl
   113f0:	ebffe59b 	bl	aa64 <assertion_failed>
   113f4:	e5952004 	ldr	r2, [r5, #4]
   113f8:	e5973008 	ldr	r3, [r7, #8]
   113fc:	e0433002 	sub	r3, r3, r2
   11400:	e3530000 	cmp	r3, #0
   11404:	ca000015 	bgt	11460 <CTimer::PollKernelTimers()+0x118>
   11408:	e1a01004 	mov	r1, r4
   1140c:	e1a00006 	mov	r0, r6
   11410:	eb000910 	bl	13858 <CPtrList::GetNext(TPtrListElement*)>
   11414:	e1a01004 	mov	r1, r4
   11418:	e1a0b000 	mov	fp, r0
   1141c:	e1a00006 	mov	r0, r6
   11420:	eb0009b7 	bl	13b04 <CPtrList::Remove(TPtrListElement*)>
   11424:	e595301c 	ldr	r3, [r5, #28]
   11428:	e3530000 	cmp	r3, #0
   1142c:	0affffd3 	beq	11380 <CTimer::PollKernelTimers()+0x38>
   11430:	eb0004aa 	bl	126e0 <LeaveCritical>
   11434:	e5974004 	ldr	r4, [r7, #4]
   11438:	e3540000 	cmp	r4, #0
   1143c:	1affffd2 	bne	1138c <CTimer::PollKernelTimers()+0x44>
   11440:	e59f2058 	ldr	r2, [pc, #88]	; 114a0 <CTimer::PollKernelTimers()+0x158>
   11444:	e1a01009 	mov	r1, r9
   11448:	e59f0054 	ldr	r0, [pc, #84]	; 114a4 <CTimer::PollKernelTimers()+0x15c>
   1144c:	ebffe584 	bl	aa64 <assertion_failed>
   11450:	eaffffcd 	b	1138c <CTimer::PollKernelTimers()+0x44>
   11454:	eb000474 	bl	1262c <EnterCritical>
   11458:	e25b4000 	subs	r4, fp, #0
   1145c:	1affffd8 	bne	113c4 <CTimer::PollKernelTimers()+0x7c>
   11460:	e595301c 	ldr	r3, [r5, #28]
   11464:	e3530000 	cmp	r3, #0
   11468:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1146c:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11470:	ea00049a 	b	126e0 <LeaveCritical>
   11474:	e59f202c 	ldr	r2, [pc, #44]	; 114a8 <CTimer::PollKernelTimers()+0x160>
   11478:	e1a01009 	mov	r1, r9
   1147c:	e59f0028 	ldr	r0, [pc, #40]	; 114ac <CTimer::PollKernelTimers()+0x164>
   11480:	ebffe577 	bl	aa64 <assertion_failed>
   11484:	eaffffd3 	b	113d8 <CTimer::PollKernelTimers()+0x90>
   11488:	eb000467 	bl	1262c <EnterCritical>
   1148c:	eaffffb2 	b	1135c <CTimer::PollKernelTimers()+0x14>
   11490:	000150a8 	.word	0x000150a8
   11494:	4b544d43 	.word	0x4b544d43
   11498:	000150d0 	.word	0x000150d0
   1149c:	000001a3 	.word	0x000001a3
   114a0:	000001b1 	.word	0x000001b1
   114a4:	00014b84 	.word	0x00014b84
   114a8:	000001a2 	.word	0x000001a2
   114ac:	000150c4 	.word	0x000150c4

000114b0 <CTimer::InterruptHandler()>:
   114b0:	e92d4010 	push	{r4, lr}
   114b4:	e3a03000 	mov	r3, #0
   114b8:	e1a04000 	mov	r4, r0
   114bc:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   114c0:	e59f20e4 	ldr	r2, [pc, #228]	; 115ac <CTimer::InterruptHandler()+0xfc>
   114c4:	e5923018 	ldr	r3, [r2, #24]
   114c8:	e2833c27 	add	r3, r3, #9984	; 0x2700
   114cc:	e2833010 	add	r3, r3, #16
   114d0:	e5823018 	str	r3, [r2, #24]
   114d4:	e5921004 	ldr	r1, [r2, #4]
   114d8:	e1530001 	cmp	r3, r1
   114dc:	e3a01008 	mov	r1, #8
   114e0:	35923004 	ldrcc	r3, [r2, #4]
   114e4:	32833c27 	addcc	r3, r3, #9984	; 0x2700
   114e8:	32833010 	addcc	r3, r3, #16
   114ec:	35823018 	strcc	r3, [r2, #24]
   114f0:	e59f20b4 	ldr	r2, [pc, #180]	; 115ac <CTimer::InterruptHandler()+0xfc>
   114f4:	e3a03000 	mov	r3, #0
   114f8:	e5821000 	str	r1, [r2]
   114fc:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   11500:	e5900010 	ldr	r0, [r0, #16]
   11504:	e1500003 	cmp	r0, r3
   11508:	1a00001a 	bne	11578 <CTimer::InterruptHandler()+0xc8>
   1150c:	e3a01064 	mov	r1, #100	; 0x64
   11510:	e5942004 	ldr	r2, [r4, #4]
   11514:	e59f3094 	ldr	r3, [pc, #148]	; 115b0 <CTimer::InterruptHandler()+0x100>
   11518:	e2822001 	add	r2, r2, #1
   1151c:	e0830293 	umull	r0, r3, r3, r2
   11520:	e1a032a3 	lsr	r3, r3, #5
   11524:	e0030391 	mul	r3, r1, r3
   11528:	e0523003 	subs	r3, r2, r3
   1152c:	e5842004 	str	r2, [r4, #4]
   11530:	1a000007 	bne	11554 <CTimer::InterruptHandler()+0xa4>
   11534:	e5942008 	ldr	r2, [r4, #8]
   11538:	e2822001 	add	r2, r2, #1
   1153c:	e5842008 	str	r2, [r4, #8]
   11540:	e594200c 	ldr	r2, [r4, #12]
   11544:	e2822001 	add	r2, r2, #1
   11548:	e584200c 	str	r2, [r4, #12]
   1154c:	e3530000 	cmp	r3, #0
   11550:	1a000006 	bne	11570 <CTimer::InterruptHandler()+0xc0>
   11554:	e1a00004 	mov	r0, r4
   11558:	ebffff7a 	bl	11348 <CTimer::PollKernelTimers()>
   1155c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   11560:	e3530000 	cmp	r3, #0
   11564:	08bd8010 	popeq	{r4, pc}
   11568:	e8bd4010 	pop	{r4, lr}
   1156c:	e12fff13 	bx	r3
   11570:	eb00045a 	bl	126e0 <LeaveCritical>
   11574:	eafffff6 	b	11554 <CTimer::InterruptHandler()+0xa4>
   11578:	eb00042b 	bl	1262c <EnterCritical>
   1157c:	e3a01064 	mov	r1, #100	; 0x64
   11580:	e5943004 	ldr	r3, [r4, #4]
   11584:	e59f2024 	ldr	r2, [pc, #36]	; 115b0 <CTimer::InterruptHandler()+0x100>
   11588:	e2833001 	add	r3, r3, #1
   1158c:	e0820392 	umull	r0, r2, r2, r3
   11590:	e1a022a2 	lsr	r2, r2, #5
   11594:	e0020291 	mul	r2, r1, r2
   11598:	e1530002 	cmp	r3, r2
   1159c:	e5843004 	str	r3, [r4, #4]
   115a0:	e5943010 	ldr	r3, [r4, #16]
   115a4:	1affffe8 	bne	1154c <CTimer::InterruptHandler()+0x9c>
   115a8:	eaffffe1 	b	11534 <CTimer::InterruptHandler()+0x84>
   115ac:	20003000 	.word	0x20003000
   115b0:	51eb851f 	.word	0x51eb851f

000115b4 <CTimer::InterruptHandler(void*)>:
   115b4:	e92d4010 	push	{r4, lr}
   115b8:	e2504000 	subs	r4, r0, #0
   115bc:	0a000002 	beq	115cc <CTimer::InterruptHandler(void*)+0x18>
   115c0:	e1a00004 	mov	r0, r4
   115c4:	e8bd4010 	pop	{r4, lr}
   115c8:	eaffffb8 	b	114b0 <CTimer::InterruptHandler()>
   115cc:	e59f0014 	ldr	r0, [pc, #20]	; 115e8 <CTimer::InterruptHandler(void*)+0x34>
   115d0:	e59f2014 	ldr	r2, [pc, #20]	; 115ec <CTimer::InterruptHandler(void*)+0x38>
   115d4:	e59f1014 	ldr	r1, [pc, #20]	; 115f0 <CTimer::InterruptHandler(void*)+0x3c>
   115d8:	ebffe521 	bl	aa64 <assertion_failed>
   115dc:	e1a00004 	mov	r0, r4
   115e0:	e8bd4010 	pop	{r4, lr}
   115e4:	eaffffb1 	b	114b0 <CTimer::InterruptHandler()>
   115e8:	000140ec 	.word	0x000140ec
   115ec:	000001ea 	.word	0x000001ea
   115f0:	000150a8 	.word	0x000150a8

000115f4 <CTimer::TuneMsDelay()>:
   115f4:	e92d4070 	push	{r4, r5, r6, lr}
   115f8:	e1a05000 	mov	r5, r0
   115fc:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   11600:	e5953020 	ldr	r3, [r5, #32]
   11604:	e24dd008 	sub	sp, sp, #8
   11608:	e0000390 	mul	r0, r0, r3
   1160c:	e5954004 	ldr	r4, [r5, #4]
   11610:	eb00079a 	bl	13480 <DelayLoop>
   11614:	e5951004 	ldr	r1, [r5, #4]
   11618:	e59f0068 	ldr	r0, [pc, #104]	; 11688 <CTimer::TuneMsDelay()+0x94>
   1161c:	e0411004 	sub	r1, r1, r4
   11620:	ebffe438 	bl	a708 <__udivsi3>
   11624:	e5953020 	ldr	r3, [r5, #32]
   11628:	e59f405c 	ldr	r4, [pc, #92]	; 1168c <CTimer::TuneMsDelay()+0x98>
   1162c:	e0030093 	mul	r3, r3, r0
   11630:	e0832394 	umull	r2, r3, r4, r3
   11634:	e59f1054 	ldr	r1, [pc, #84]	; 11690 <CTimer::TuneMsDelay()+0x9c>
   11638:	e1a032a3 	lsr	r3, r3, #5
   1163c:	e2832f7d 	add	r2, r3, #500	; 0x1f4
   11640:	e0821291 	umull	r1, r2, r1, r2
   11644:	e1a06000 	mov	r6, r0
   11648:	e1a02322 	lsr	r2, r2, #6
   1164c:	e5852024 	str	r2, [r5, #36]	; 0x24
   11650:	e5853020 	str	r3, [r5, #32]
   11654:	ebffee2b 	bl	cf08 <CLogger::Get()>
   11658:	e3a03064 	mov	r3, #100	; 0x64
   1165c:	e0842694 	umull	r2, r4, r4, r6
   11660:	e1a042a4 	lsr	r4, r4, #5
   11664:	e0030493 	mul	r3, r3, r4
   11668:	e0466003 	sub	r6, r6, r3
   1166c:	e88d0050 	stm	sp, {r4, r6}
   11670:	e59f301c 	ldr	r3, [pc, #28]	; 11694 <CTimer::TuneMsDelay()+0xa0>
   11674:	e3a02003 	mov	r2, #3
   11678:	e59f1018 	ldr	r1, [pc, #24]	; 11698 <CTimer::TuneMsDelay()+0xa4>
   1167c:	ebffefca 	bl	d5ac <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11680:	e28dd008 	add	sp, sp, #8
   11684:	e8bd8070 	pop	{r4, r5, r6, pc}
   11688:	00002710 	.word	0x00002710
   1168c:	51eb851f 	.word	0x51eb851f
   11690:	10624dd3 	.word	0x10624dd3
   11694:	00015184 	.word	0x00015184
   11698:	000150a0 	.word	0x000150a0

0001169c <CTimer::Initialize()>:
   1169c:	e92d4070 	push	{r4, r5, r6, lr}
   116a0:	e1a04000 	mov	r4, r0
   116a4:	e5900000 	ldr	r0, [r0]
   116a8:	e3500000 	cmp	r0, #0
   116ac:	0a000011 	beq	116f8 <CTimer::Initialize()+0x5c>
   116b0:	e1a03004 	mov	r3, r4
   116b4:	e59f2054 	ldr	r2, [pc, #84]	; 11710 <CTimer::Initialize()+0x74>
   116b8:	e3a01003 	mov	r1, #3
   116bc:	ebffeb78 	bl	c4a4 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   116c0:	e3a05000 	mov	r5, #0
   116c4:	ee075f9a 	mcr	15, 0, r5, cr7, cr10, {4}
   116c8:	e59f2044 	ldr	r2, [pc, #68]	; 11714 <CTimer::Initialize()+0x78>
   116cc:	e59f3044 	ldr	r3, [pc, #68]	; 11718 <CTimer::Initialize()+0x7c>
   116d0:	e1a00004 	mov	r0, r4
   116d4:	e5823004 	str	r3, [r2, #4]
   116d8:	e5923004 	ldr	r3, [r2, #4]
   116dc:	e2833c27 	add	r3, r3, #9984	; 0x2700
   116e0:	e2833010 	add	r3, r3, #16
   116e4:	e5823018 	str	r3, [r2, #24]
   116e8:	ebffffc1 	bl	115f4 <CTimer::TuneMsDelay()>
   116ec:	ee075fba 	mcr	15, 0, r5, cr7, cr10, {5}
   116f0:	e3a00001 	mov	r0, #1
   116f4:	e8bd8070 	pop	{r4, r5, r6, pc}
   116f8:	e59f001c 	ldr	r0, [pc, #28]	; 1171c <CTimer::Initialize()+0x80>
   116fc:	e3a02057 	mov	r2, #87	; 0x57
   11700:	e59f1018 	ldr	r1, [pc, #24]	; 11720 <CTimer::Initialize()+0x84>
   11704:	ebffe4d6 	bl	aa64 <assertion_failed>
   11708:	e5940000 	ldr	r0, [r4]
   1170c:	eaffffe7 	b	116b0 <CTimer::Initialize()+0x14>
   11710:	000115b4 	.word	0x000115b4
   11714:	20003000 	.word	0x20003000
   11718:	fe363c80 	.word	0xfe363c80
   1171c:	000140a8 	.word	0x000140a8
   11720:	000150a8 	.word	0x000150a8

00011724 <CTimer::RegisterPeriodicHandler(void (*)())>:
   11724:	e5903028 	ldr	r3, [r0, #40]	; 0x28
   11728:	e92d4070 	push	{r4, r5, r6, lr}
   1172c:	e3530000 	cmp	r3, #0
   11730:	e1a04000 	mov	r4, r0
   11734:	e1a05001 	mov	r5, r1
   11738:	0a000003 	beq	1174c <CTimer::RegisterPeriodicHandler(void (*)())+0x28>
   1173c:	e3a02c02 	mov	r2, #512	; 0x200
   11740:	e59f1024 	ldr	r1, [pc, #36]	; 1176c <CTimer::RegisterPeriodicHandler(void (*)())+0x48>
   11744:	e59f0024 	ldr	r0, [pc, #36]	; 11770 <CTimer::RegisterPeriodicHandler(void (*)())+0x4c>
   11748:	ebffe4c5 	bl	aa64 <assertion_failed>
   1174c:	e3550000 	cmp	r5, #0
   11750:	e5845028 	str	r5, [r4, #40]	; 0x28
   11754:	18bd8070 	popne	{r4, r5, r6, pc}
   11758:	e59f2014 	ldr	r2, [pc, #20]	; 11774 <CTimer::RegisterPeriodicHandler(void (*)())+0x50>
   1175c:	e59f1008 	ldr	r1, [pc, #8]	; 1176c <CTimer::RegisterPeriodicHandler(void (*)())+0x48>
   11760:	e59f0010 	ldr	r0, [pc, #16]	; 11778 <CTimer::RegisterPeriodicHandler(void (*)())+0x54>
   11764:	e8bd4070 	pop	{r4, r5, r6, lr}
   11768:	eaffe4bd 	b	aa64 <assertion_failed>
   1176c:	000150a8 	.word	0x000150a8
   11770:	0001519c 	.word	0x0001519c
   11774:	00000202 	.word	0x00000202
   11778:	000151b4 	.word	0x000151b4

0001177c <CTimer::SimpleMsDelay(unsigned int)>:
   1177c:	e3500000 	cmp	r0, #0
   11780:	012fff1e 	bxeq	lr
   11784:	e3a03ffa 	mov	r3, #1000	; 0x3e8
   11788:	e0000093 	mul	r0, r3, r0
   1178c:	e3500000 	cmp	r0, #0
   11790:	012fff1e 	bxeq	lr
   11794:	eafffccf 	b	10ad8 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]>

00011798 <CTimer::SimpleusDelay(unsigned int)>:
   11798:	e3500000 	cmp	r0, #0
   1179c:	012fff1e 	bxeq	lr
   117a0:	eafffccc 	b	10ad8 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]>

000117a4 <CTimer::IsLeapYear(unsigned int)>:
   117a4:	e3a02064 	mov	r2, #100	; 0x64
   117a8:	e59f303c 	ldr	r3, [pc, #60]	; 117ec <CTimer::IsLeapYear(unsigned int)+0x48>
   117ac:	e0831093 	umull	r1, r3, r3, r0
   117b0:	e1a012a3 	lsr	r1, r3, #5
   117b4:	e0020192 	mul	r2, r2, r1
   117b8:	e1500002 	cmp	r0, r2
   117bc:	0a000003 	beq	117d0 <CTimer::IsLeapYear(unsigned int)+0x2c>
   117c0:	e3100003 	tst	r0, #3
   117c4:	03a00001 	moveq	r0, #1
   117c8:	13a00000 	movne	r0, #0
   117cc:	e12fff1e 	bx	lr
   117d0:	e3a02e19 	mov	r2, #400	; 0x190
   117d4:	e1a033a3 	lsr	r3, r3, #7
   117d8:	e0030392 	mul	r3, r2, r3
   117dc:	e0400003 	sub	r0, r0, r3
   117e0:	e16f0f10 	clz	r0, r0
   117e4:	e1a002a0 	lsr	r0, r0, #5
   117e8:	e12fff1e 	bx	lr
   117ec:	51eb851f 	.word	0x51eb851f

000117f0 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)>:
   117f0:	e3500001 	cmp	r0, #1
   117f4:	0a000002 	beq	11804 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x14>
   117f8:	e59f3058 	ldr	r3, [pc, #88]	; 11858 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x68>
   117fc:	e7930100 	ldr	r0, [r3, r0, lsl #2]
   11800:	e12fff1e 	bx	lr
   11804:	e3a02064 	mov	r2, #100	; 0x64
   11808:	e59f304c 	ldr	r3, [pc, #76]	; 1185c <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x6c>
   1180c:	e083c193 	umull	ip, r3, r3, r1
   11810:	e1a0c2a3 	lsr	ip, r3, #5
   11814:	e0020c92 	mul	r2, r2, ip
   11818:	e1510002 	cmp	r1, r2
   1181c:	0a000006 	beq	1183c <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x4c>
   11820:	e3110003 	tst	r1, #3
   11824:	03a01001 	moveq	r1, #1
   11828:	13a01000 	movne	r1, #0
   1182c:	e3510000 	cmp	r1, #0
   11830:	0afffff0 	beq	117f8 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x8>
   11834:	e3a0001d 	mov	r0, #29
   11838:	e12fff1e 	bx	lr
   1183c:	e3a02e19 	mov	r2, #400	; 0x190
   11840:	e1a033a3 	lsr	r3, r3, #7
   11844:	e0030392 	mul	r3, r2, r3
   11848:	e0411003 	sub	r1, r1, r3
   1184c:	e16f1f11 	clz	r1, r1
   11850:	e1a012a1 	lsr	r1, r1, #5
   11854:	eafffff4 	b	1182c <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x3c>
   11858:	00015070 	.word	0x00015070
   1185c:	51eb851f 	.word	0x51eb851f

00011860 <CTimer::Get()>:
   11860:	e92d4010 	push	{r4, lr}
   11864:	e59f4020 	ldr	r4, [pc, #32]	; 1188c <CTimer::Get()+0x2c>
   11868:	e5940000 	ldr	r0, [r4]
   1186c:	e3500000 	cmp	r0, #0
   11870:	18bd8010 	popne	{r4, pc}
   11874:	e59f2014 	ldr	r2, [pc, #20]	; 11890 <CTimer::Get()+0x30>
   11878:	e59f1014 	ldr	r1, [pc, #20]	; 11894 <CTimer::Get()+0x34>
   1187c:	e59f0014 	ldr	r0, [pc, #20]	; 11898 <CTimer::Get()+0x38>
   11880:	ebffe477 	bl	aa64 <assertion_failed>
   11884:	e5940000 	ldr	r0, [r4]
   11888:	e8bd8010 	pop	{r4, pc}
   1188c:	00016660 	.word	0x00016660
   11890:	0000023e 	.word	0x0000023e
   11894:	000150a8 	.word	0x000150a8
   11898:	00014c0c 	.word	0x00014c0c

0001189c <memset>:
   1189c:	e3520000 	cmp	r2, #0
   118a0:	012fff1e 	bxeq	lr
   118a4:	e1a03000 	mov	r3, r0
   118a8:	e6af1071 	sxtb	r1, r1
   118ac:	e0802002 	add	r2, r0, r2
   118b0:	e4c31001 	strb	r1, [r3], #1
   118b4:	e1530002 	cmp	r3, r2
   118b8:	1afffffc 	bne	118b0 <memset+0x14>
   118bc:	e12fff1e 	bx	lr

000118c0 <memcmp>:
   118c0:	e3520000 	cmp	r2, #0
   118c4:	0a00000e 	beq	11904 <memcmp+0x44>
   118c8:	e5d0c000 	ldrb	ip, [r0]
   118cc:	e5d13000 	ldrb	r3, [r1]
   118d0:	e15c0003 	cmp	ip, r3
   118d4:	ca00000c 	bgt	1190c <memcmp+0x4c>
   118d8:	ba00000d 	blt	11914 <memcmp+0x54>
   118dc:	e0812002 	add	r2, r1, r2
   118e0:	e2811001 	add	r1, r1, #1
   118e4:	ea000004 	b	118fc <memcmp+0x3c>
   118e8:	e5f0c001 	ldrb	ip, [r0, #1]!
   118ec:	e4d13001 	ldrb	r3, [r1], #1
   118f0:	e15c0003 	cmp	ip, r3
   118f4:	ca000004 	bgt	1190c <memcmp+0x4c>
   118f8:	ba000005 	blt	11914 <memcmp+0x54>
   118fc:	e1510002 	cmp	r1, r2
   11900:	1afffff8 	bne	118e8 <memcmp+0x28>
   11904:	e3a00000 	mov	r0, #0
   11908:	e12fff1e 	bx	lr
   1190c:	e3a00001 	mov	r0, #1
   11910:	e12fff1e 	bx	lr
   11914:	e3e00000 	mvn	r0, #0
   11918:	e12fff1e 	bx	lr

0001191c <strlen>:
   1191c:	e1d010d0 	ldrsb	r1, [r0]
   11920:	e2803001 	add	r3, r0, #1
   11924:	e3510000 	cmp	r1, #0
   11928:	0a000003 	beq	1193c <strlen+0x20>
   1192c:	e0431000 	sub	r1, r3, r0
   11930:	e0d320d1 	ldrsb	r2, [r3], #1
   11934:	e3520000 	cmp	r2, #0
   11938:	1afffffb 	bne	1192c <strlen+0x10>
   1193c:	e1a00001 	mov	r0, r1
   11940:	e12fff1e 	bx	lr

00011944 <strcmp>:
   11944:	e1d030d0 	ldrsb	r3, [r0]
   11948:	e1d120d0 	ldrsb	r2, [r1]
   1194c:	e3530000 	cmp	r3, #0
   11950:	1a000007 	bne	11974 <strcmp+0x30>
   11954:	ea000008 	b	1197c <strcmp+0x38>
   11958:	e1530002 	cmp	r3, r2
   1195c:	ca00000b 	bgt	11990 <strcmp+0x4c>
   11960:	ba00000c 	blt	11998 <strcmp+0x54>
   11964:	e1f030d1 	ldrsb	r3, [r0, #1]!
   11968:	e3530000 	cmp	r3, #0
   1196c:	0a00000b 	beq	119a0 <strcmp+0x5c>
   11970:	e1f120d1 	ldrsb	r2, [r1, #1]!
   11974:	e3520000 	cmp	r2, #0
   11978:	1afffff6 	bne	11958 <strcmp+0x14>
   1197c:	e1530002 	cmp	r3, r2
   11980:	ca000002 	bgt	11990 <strcmp+0x4c>
   11984:	b3e00000 	mvnlt	r0, #0
   11988:	a3a00000 	movge	r0, #0
   1198c:	e12fff1e 	bx	lr
   11990:	e3a00001 	mov	r0, #1
   11994:	e12fff1e 	bx	lr
   11998:	e3e00000 	mvn	r0, #0
   1199c:	e12fff1e 	bx	lr
   119a0:	e1d120d1 	ldrsb	r2, [r1, #1]
   119a4:	e1530002 	cmp	r3, r2
   119a8:	dafffff5 	ble	11984 <strcmp+0x40>
   119ac:	eafffff7 	b	11990 <strcmp+0x4c>

000119b0 <strcasecmp>:
   119b0:	e2400001 	sub	r0, r0, #1
   119b4:	e1f030d1 	ldrsb	r3, [r0, #1]!
   119b8:	e2432061 	sub	r2, r3, #97	; 0x61
   119bc:	e3520019 	cmp	r2, #25
   119c0:	92433020 	subls	r3, r3, #32
   119c4:	e3530000 	cmp	r3, #0
   119c8:	0a00001f 	beq	11a4c <strcasecmp+0x9c>
   119cc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   119d0:	e0d120d1 	ldrsb	r2, [r1], #1
   119d4:	e242c061 	sub	ip, r2, #97	; 0x61
   119d8:	e35c0019 	cmp	ip, #25
   119dc:	81a0e002 	movhi	lr, r2
   119e0:	9242e020 	subls	lr, r2, #32
   119e4:	e35e0000 	cmp	lr, #0
   119e8:	1a000006 	bne	11a08 <strcasecmp+0x58>
   119ec:	e35c0019 	cmp	ip, #25
   119f0:	92422020 	subls	r2, r2, #32
   119f4:	e1530002 	cmp	r3, r2
   119f8:	ca000011 	bgt	11a44 <strcasecmp+0x94>
   119fc:	b3e00000 	mvnlt	r0, #0
   11a00:	a3a00000 	movge	r0, #0
   11a04:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   11a08:	e153000e 	cmp	r3, lr
   11a0c:	ca00000c 	bgt	11a44 <strcasecmp+0x94>
   11a10:	ba000016 	blt	11a70 <strcasecmp+0xc0>
   11a14:	e1f030d1 	ldrsb	r3, [r0, #1]!
   11a18:	e2432061 	sub	r2, r3, #97	; 0x61
   11a1c:	e3520019 	cmp	r2, #25
   11a20:	92433020 	subls	r3, r3, #32
   11a24:	e3530000 	cmp	r3, #0
   11a28:	1affffe8 	bne	119d0 <strcasecmp+0x20>
   11a2c:	e1d120d0 	ldrsb	r2, [r1]
   11a30:	e242c061 	sub	ip, r2, #97	; 0x61
   11a34:	e35c0019 	cmp	ip, #25
   11a38:	92422020 	subls	r2, r2, #32
   11a3c:	e1530002 	cmp	r3, r2
   11a40:	daffffed 	ble	119fc <strcasecmp+0x4c>
   11a44:	e3a00001 	mov	r0, #1
   11a48:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   11a4c:	e1d120d0 	ldrsb	r2, [r1]
   11a50:	e242c061 	sub	ip, r2, #97	; 0x61
   11a54:	e35c0019 	cmp	ip, #25
   11a58:	92422020 	subls	r2, r2, #32
   11a5c:	e1530002 	cmp	r3, r2
   11a60:	ca000004 	bgt	11a78 <strcasecmp+0xc8>
   11a64:	b3e00000 	mvnlt	r0, #0
   11a68:	a3a00000 	movge	r0, #0
   11a6c:	e12fff1e 	bx	lr
   11a70:	e3e00000 	mvn	r0, #0
   11a74:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   11a78:	e3a00001 	mov	r0, #1
   11a7c:	e12fff1e 	bx	lr

00011a80 <strncmp>:
   11a80:	e3520000 	cmp	r2, #0
   11a84:	0a000016 	beq	11ae4 <strncmp+0x64>
   11a88:	e1d030d0 	ldrsb	r3, [r0]
   11a8c:	e1d1c0d0 	ldrsb	ip, [r1]
   11a90:	e3530000 	cmp	r3, #0
   11a94:	0a000015 	beq	11af0 <strncmp+0x70>
   11a98:	e35c0000 	cmp	ip, #0
   11a9c:	0a000013 	beq	11af0 <strncmp+0x70>
   11aa0:	e15c0003 	cmp	ip, r3
   11aa4:	ba000016 	blt	11b04 <strncmp+0x84>
   11aa8:	d0802002 	addle	r2, r0, r2
   11aac:	d2800001 	addle	r0, r0, #1
   11ab0:	da000009 	ble	11adc <strncmp+0x5c>
   11ab4:	ea000014 	b	11b0c <strncmp+0x8c>
   11ab8:	e0d030d1 	ldrsb	r3, [r0], #1
   11abc:	e3530000 	cmp	r3, #0
   11ac0:	0a000009 	beq	11aec <strncmp+0x6c>
   11ac4:	e1f1c0d1 	ldrsb	ip, [r1, #1]!
   11ac8:	e35c0000 	cmp	ip, #0
   11acc:	0a000007 	beq	11af0 <strncmp+0x70>
   11ad0:	e153000c 	cmp	r3, ip
   11ad4:	ca00000a 	bgt	11b04 <strncmp+0x84>
   11ad8:	ba00000b 	blt	11b0c <strncmp+0x8c>
   11adc:	e1500002 	cmp	r0, r2
   11ae0:	1afffff4 	bne	11ab8 <strncmp+0x38>
   11ae4:	e3a00000 	mov	r0, #0
   11ae8:	e12fff1e 	bx	lr
   11aec:	e1d1c0d1 	ldrsb	ip, [r1, #1]
   11af0:	e153000c 	cmp	r3, ip
   11af4:	ca000002 	bgt	11b04 <strncmp+0x84>
   11af8:	b3e00000 	mvnlt	r0, #0
   11afc:	a3a00000 	movge	r0, #0
   11b00:	e12fff1e 	bx	lr
   11b04:	e3a00001 	mov	r0, #1
   11b08:	e12fff1e 	bx	lr
   11b0c:	e3e00000 	mvn	r0, #0
   11b10:	e12fff1e 	bx	lr

00011b14 <strcpy>:
   11b14:	e1d130d0 	ldrsb	r3, [r1]
   11b18:	e1a02000 	mov	r2, r0
   11b1c:	e3530000 	cmp	r3, #0
   11b20:	0a000003 	beq	11b34 <strcpy+0x20>
   11b24:	e4c23001 	strb	r3, [r2], #1
   11b28:	e1f130d1 	ldrsb	r3, [r1, #1]!
   11b2c:	e3530000 	cmp	r3, #0
   11b30:	1afffffb 	bne	11b24 <strcpy+0x10>
   11b34:	e3a03000 	mov	r3, #0
   11b38:	e5c23000 	strb	r3, [r2]
   11b3c:	e12fff1e 	bx	lr

00011b40 <strncpy>:
   11b40:	e3520000 	cmp	r2, #0
   11b44:	012fff1e 	bxeq	lr
   11b48:	e1d1c0d0 	ldrsb	ip, [r1]
   11b4c:	e35c0000 	cmp	ip, #0
   11b50:	0a000009 	beq	11b7c <strncpy+0x3c>
   11b54:	e0802002 	add	r2, r0, r2
   11b58:	e1a03000 	mov	r3, r0
   11b5c:	ea000002 	b	11b6c <strncpy+0x2c>
   11b60:	e1f1c0d1 	ldrsb	ip, [r1, #1]!
   11b64:	e35c0000 	cmp	ip, #0
   11b68:	0a000004 	beq	11b80 <strncpy+0x40>
   11b6c:	e4c3c001 	strb	ip, [r3], #1
   11b70:	e1530002 	cmp	r3, r2
   11b74:	1afffff9 	bne	11b60 <strncpy+0x20>
   11b78:	e12fff1e 	bx	lr
   11b7c:	e1a03000 	mov	r3, r0
   11b80:	e3a02000 	mov	r2, #0
   11b84:	e5c32000 	strb	r2, [r3]
   11b88:	e12fff1e 	bx	lr

00011b8c <strcat>:
   11b8c:	e1d030d0 	ldrsb	r3, [r0]
   11b90:	e3530000 	cmp	r3, #0
   11b94:	e1a03000 	mov	r3, r0
   11b98:	0a000002 	beq	11ba8 <strcat+0x1c>
   11b9c:	e1f320d1 	ldrsb	r2, [r3, #1]!
   11ba0:	e3520000 	cmp	r2, #0
   11ba4:	1afffffc 	bne	11b9c <strcat+0x10>
   11ba8:	e1d120d0 	ldrsb	r2, [r1]
   11bac:	e3520000 	cmp	r2, #0
   11bb0:	0a000003 	beq	11bc4 <strcat+0x38>
   11bb4:	e4c32001 	strb	r2, [r3], #1
   11bb8:	e1f120d1 	ldrsb	r2, [r1, #1]!
   11bbc:	e3520000 	cmp	r2, #0
   11bc0:	1afffffb 	bne	11bb4 <strcat+0x28>
   11bc4:	e3a02000 	mov	r2, #0
   11bc8:	e5c32000 	strb	r2, [r3]
   11bcc:	e12fff1e 	bx	lr

00011bd0 <strchr>:
   11bd0:	e1d020d0 	ldrsb	r2, [r0]
   11bd4:	e3520000 	cmp	r2, #0
   11bd8:	0a000009 	beq	11c04 <strchr+0x34>
   11bdc:	e1510002 	cmp	r1, r2
   11be0:	1a000002 	bne	11bf0 <strchr+0x20>
   11be4:	ea000008 	b	11c0c <strchr+0x3c>
   11be8:	e1530001 	cmp	r3, r1
   11bec:	012fff1e 	bxeq	lr
   11bf0:	e1f030d1 	ldrsb	r3, [r0, #1]!
   11bf4:	e3530000 	cmp	r3, #0
   11bf8:	1afffffa 	bne	11be8 <strchr+0x18>
   11bfc:	e1a00003 	mov	r0, r3
   11c00:	e12fff1e 	bx	lr
   11c04:	e1a00002 	mov	r0, r2
   11c08:	e12fff1e 	bx	lr
   11c0c:	e12fff1e 	bx	lr

00011c10 <strtok_r>:
   11c10:	e3500000 	cmp	r0, #0
   11c14:	0a00002c 	beq	11ccc <strtok_r+0xbc>
   11c18:	e92d4030 	push	{r4, r5, lr}
   11c1c:	e1d0e0d0 	ldrsb	lr, [r0]
   11c20:	e35e0000 	cmp	lr, #0
   11c24:	11d140d0 	ldrsbne	r4, [r1]
   11c28:	0a000024 	beq	11cc0 <strtok_r+0xb0>
   11c2c:	e3540000 	cmp	r4, #0
   11c30:	0a000008 	beq	11c58 <strtok_r+0x48>
   11c34:	e15e0004 	cmp	lr, r4
   11c38:	0a000019 	beq	11ca4 <strtok_r+0x94>
   11c3c:	e1a0c001 	mov	ip, r1
   11c40:	ea000001 	b	11c4c <strtok_r+0x3c>
   11c44:	e15e0003 	cmp	lr, r3
   11c48:	0a000015 	beq	11ca4 <strtok_r+0x94>
   11c4c:	e1fc30d1 	ldrsb	r3, [ip, #1]!
   11c50:	e3530000 	cmp	r3, #0
   11c54:	1afffffa 	bne	11c44 <strtok_r+0x34>
   11c58:	e35e0000 	cmp	lr, #0
   11c5c:	0a000017 	beq	11cc0 <strtok_r+0xb0>
   11c60:	e1a05000 	mov	r5, r0
   11c64:	e3540000 	cmp	r4, #0
   11c68:	0a000008 	beq	11c90 <strtok_r+0x80>
   11c6c:	e15e0004 	cmp	lr, r4
   11c70:	0a00000d 	beq	11cac <strtok_r+0x9c>
   11c74:	e1a0c001 	mov	ip, r1
   11c78:	ea000001 	b	11c84 <strtok_r+0x74>
   11c7c:	e15e0003 	cmp	lr, r3
   11c80:	0a000009 	beq	11cac <strtok_r+0x9c>
   11c84:	e1fc30d1 	ldrsb	r3, [ip, #1]!
   11c88:	e3530000 	cmp	r3, #0
   11c8c:	1afffffa 	bne	11c7c <strtok_r+0x6c>
   11c90:	e1f5e0d1 	ldrsb	lr, [r5, #1]!
   11c94:	e35e0000 	cmp	lr, #0
   11c98:	1afffff1 	bne	11c64 <strtok_r+0x54>
   11c9c:	e5825000 	str	r5, [r2]
   11ca0:	e8bd8030 	pop	{r4, r5, pc}
   11ca4:	e1f0e0d1 	ldrsb	lr, [r0, #1]!
   11ca8:	eaffffdf 	b	11c2c <strtok_r+0x1c>
   11cac:	e3a03000 	mov	r3, #0
   11cb0:	e2855001 	add	r5, r5, #1
   11cb4:	e5453001 	strb	r3, [r5, #-1]
   11cb8:	e5825000 	str	r5, [r2]
   11cbc:	e8bd8030 	pop	{r4, r5, pc}
   11cc0:	e3a00000 	mov	r0, #0
   11cc4:	e5820000 	str	r0, [r2]
   11cc8:	e8bd8030 	pop	{r4, r5, pc}
   11ccc:	e5920000 	ldr	r0, [r2]
   11cd0:	e3500000 	cmp	r0, #0
   11cd4:	1affffcf 	bne	11c18 <strtok_r+0x8>
   11cd8:	e12fff1e 	bx	lr

00011cdc <strtoul>:
   11cdc:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   11ce0:	e3510000 	cmp	r1, #0
   11ce4:	e2425002 	sub	r5, r2, #2
   11ce8:	15810000 	strne	r0, [r1]
   11cec:	e3520000 	cmp	r2, #0
   11cf0:	13550022 	cmpne	r5, #34	; 0x22
   11cf4:	e3c2e010 	bic	lr, r2, #16
   11cf8:	83a05001 	movhi	r5, #1
   11cfc:	93a05000 	movls	r5, #0
   11d00:	8a000037 	bhi	11de4 <strtoul+0x108>
   11d04:	e1d0c0d0 	ldrsb	ip, [r0]
   11d08:	e1a04000 	mov	r4, r0
   11d0c:	e24c3009 	sub	r3, ip, #9
   11d10:	e35c0020 	cmp	ip, #32
   11d14:	e2800001 	add	r0, r0, #1
   11d18:	e6ef3073 	uxtb	r3, r3
   11d1c:	0afffff8 	beq	11d04 <strtoul+0x28>
   11d20:	e3530004 	cmp	r3, #4
   11d24:	9afffff6 	bls	11d04 <strtoul+0x28>
   11d28:	e35c002b 	cmp	ip, #43	; 0x2b
   11d2c:	0a00002e 	beq	11dec <strtoul+0x110>
   11d30:	e35c002d 	cmp	ip, #45	; 0x2d
   11d34:	01d4c0d1 	ldrsbeq	ip, [r4, #1]
   11d38:	03a07001 	moveq	r7, #1
   11d3c:	01a04000 	moveq	r4, r0
   11d40:	13a07000 	movne	r7, #0
   11d44:	e35c0030 	cmp	ip, #48	; 0x30
   11d48:	0a00002c 	beq	11e00 <strtoul+0x124>
   11d4c:	e3520000 	cmp	r2, #0
   11d50:	03a0200a 	moveq	r2, #10
   11d54:	e35c002f 	cmp	ip, #47	; 0x2f
   11d58:	e1a0300c 	mov	r3, ip
   11d5c:	da00001d 	ble	11dd8 <strtoul+0xfc>
   11d60:	e3a0e000 	mov	lr, #0
   11d64:	e3a05001 	mov	r5, #1
   11d68:	e1a0600e 	mov	r6, lr
   11d6c:	ea000008 	b	11d94 <strtoul+0xb8>
   11d70:	e020329e 	mla	r0, lr, r2, r3
   11d74:	e150000e 	cmp	r0, lr
   11d78:	3a000029 	bcc	11e24 <strtoul+0x148>
   11d7c:	e1f430d1 	ldrsb	r3, [r4, #1]!
   11d80:	e1a05006 	mov	r5, r6
   11d84:	e353002f 	cmp	r3, #47	; 0x2f
   11d88:	e1a0c003 	mov	ip, r3
   11d8c:	da000029 	ble	11e38 <strtoul+0x15c>
   11d90:	e1a0e000 	mov	lr, r0
   11d94:	e24cc061 	sub	ip, ip, #97	; 0x61
   11d98:	e35c0019 	cmp	ip, #25
   11d9c:	92433020 	subls	r3, r3, #32
   11da0:	e3530040 	cmp	r3, #64	; 0x40
   11da4:	c2433007 	subgt	r3, r3, #7
   11da8:	e2433030 	sub	r3, r3, #48	; 0x30
   11dac:	e1520003 	cmp	r2, r3
   11db0:	caffffee 	bgt	11d70 <strtoul+0x94>
   11db4:	e1a0000e 	mov	r0, lr
   11db8:	e2255001 	eor	r5, r5, #1
   11dbc:	e3510000 	cmp	r1, #0
   11dc0:	e0055007 	and	r5, r5, r7
   11dc4:	0a000000 	beq	11dcc <strtoul+0xf0>
   11dc8:	e5814000 	str	r4, [r1]
   11dcc:	e3550000 	cmp	r5, #0
   11dd0:	12600000 	rsbne	r0, r0, #0
   11dd4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   11dd8:	e3510000 	cmp	r1, #0
   11ddc:	13a00000 	movne	r0, #0
   11de0:	1afffff8 	bne	11dc8 <strtoul+0xec>
   11de4:	e3a00000 	mov	r0, #0
   11de8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   11dec:	e1d4c0d1 	ldrsb	ip, [r4, #1]
   11df0:	e3a07000 	mov	r7, #0
   11df4:	e35c0030 	cmp	ip, #48	; 0x30
   11df8:	e1a04000 	mov	r4, r0
   11dfc:	1affffd2 	bne	11d4c <strtoul+0x70>
   11e00:	e1d4c0d1 	ldrsb	ip, [r4, #1]
   11e04:	e2840001 	add	r0, r4, #1
   11e08:	e3cc3020 	bic	r3, ip, #32
   11e0c:	e3530058 	cmp	r3, #88	; 0x58
   11e10:	0a00000a 	beq	11e40 <strtoul+0x164>
   11e14:	e3520000 	cmp	r2, #0
   11e18:	e1a04000 	mov	r4, r0
   11e1c:	03a02008 	moveq	r2, #8
   11e20:	eaffffcb 	b	11d54 <strtoul+0x78>
   11e24:	e3510000 	cmp	r1, #0
   11e28:	0a00000a 	beq	11e58 <strtoul+0x17c>
   11e2c:	e5814000 	str	r4, [r1]
   11e30:	e3e00000 	mvn	r0, #0
   11e34:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   11e38:	e3a05001 	mov	r5, #1
   11e3c:	eaffffde 	b	11dbc <strtoul+0xe0>
   11e40:	e35e0000 	cmp	lr, #0
   11e44:	1affffe6 	bne	11de4 <strtoul+0x108>
   11e48:	e1d4c0d2 	ldrsb	ip, [r4, #2]
   11e4c:	e3a02010 	mov	r2, #16
   11e50:	e2844002 	add	r4, r4, #2
   11e54:	eaffffbe 	b	11d54 <strtoul+0x78>
   11e58:	e3e00000 	mvn	r0, #0
   11e5c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00011e60 <char2int>:
   11e60:	e12fff1e 	bx	lr

00011e64 <memcpy>:
   11e64:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
   11e68:	e352007f 	cmp	r2, #127	; 0x7f
   11e6c:	9a00000b 	bls	11ea0 <memcpy+0x3c>
   11e70:	e3110003 	tst	r1, #3
   11e74:	1a000009 	bne	11ea0 <memcpy+0x3c>
   11e78:	e3100003 	tst	r0, #3
   11e7c:	1a000007 	bne	11ea0 <memcpy+0x3c>
   11e80:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
   11e84:	e8b107f8 	ldm	r1!, {r3, r4, r5, r6, r7, r8, r9, sl}
   11e88:	e2422020 	sub	r2, r2, #32
   11e8c:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
   11e90:	f5d1f040 	pld	[r1, #64]	; 0x40
   11e94:	e352001f 	cmp	r2, #31
   11e98:	8afffff9 	bhi	11e84 <memcpy+0x20>
   11e9c:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
   11ea0:	e3520000 	cmp	r2, #0
   11ea4:	0a000003 	beq	11eb8 <memcpy+0x54>
   11ea8:	e4d13001 	ldrb	r3, [r1], #1
   11eac:	e2522001 	subs	r2, r2, #1
   11eb0:	e4c03001 	strb	r3, [r0], #1
   11eb4:	1afffffb 	bne	11ea8 <memcpy+0x44>
   11eb8:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
   11ebc:	e12fff1e 	bx	lr

00011ec0 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
   11ec0:	e12fff1e 	bx	lr

00011ec4 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
   11ec4:	e92d4010 	push	{r4, lr}
   11ec8:	e1a04000 	mov	r4, r0
   11ecc:	e3a01010 	mov	r1, #16
   11ed0:	eb000233 	bl	127a4 <operator delete(void*, unsigned int)>
   11ed4:	e1a00004 	mov	r0, r4
   11ed8:	e8bd8010 	pop	{r4, pc}

00011edc <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]>:
   11edc:	e92d4070 	push	{r4, r5, r6, lr}
   11ee0:	e59f5094 	ldr	r5, [pc, #148]	; 11f7c <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0xa0>
   11ee4:	e1a04000 	mov	r4, r0
   11ee8:	e5950000 	ldr	r0, [r5]
   11eec:	e1a06001 	mov	r6, r1
   11ef0:	e3500000 	cmp	r0, #0
   11ef4:	1a00001a 	bne	11f64 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x88>
   11ef8:	e1d400bc 	ldrh	r0, [r4, #12]
   11efc:	e1d430be 	ldrh	r3, [r4, #14]
   11f00:	e5846008 	str	r6, [r4, #8]
   11f04:	e0402003 	sub	r2, r0, r3
   11f08:	e6bf2072 	sxth	r2, r2
   11f0c:	e3520000 	cmp	r2, #0
   11f10:	da00000c 	ble	11f48 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x6c>
   11f14:	e3560000 	cmp	r6, #0
   11f18:	1a00000c 	bne	11f50 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x74>
   11f1c:	e2833001 	add	r3, r3, #1
   11f20:	e6ff3073 	uxth	r3, r3
   11f24:	e1c430be 	strh	r3, [r4, #14]
   11f28:	e5941004 	ldr	r1, [r4, #4]
   11f2c:	e5952004 	ldr	r2, [r5, #4]
   11f30:	e1833800 	orr	r3, r3, r0, lsl #16
   11f34:	e7823101 	str	r3, [r2, r1, lsl #2]
   11f38:	e5953000 	ldr	r3, [r5]
   11f3c:	e3530000 	cmp	r3, #0
   11f40:	1a000005 	bne	11f5c <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x80>
   11f44:	e8bd8070 	pop	{r4, r5, r6, pc}
   11f48:	e3560000 	cmp	r6, #0
   11f4c:	1a000006 	bne	11f6c <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x90>
   11f50:	e5953000 	ldr	r3, [r5]
   11f54:	e3530000 	cmp	r3, #0
   11f58:	08bd8070 	popeq	{r4, r5, r6, pc}
   11f5c:	e8bd4070 	pop	{r4, r5, r6, lr}
   11f60:	ea0001de 	b	126e0 <LeaveCritical>
   11f64:	eb0001b0 	bl	1262c <EnterCritical>
   11f68:	eaffffe2 	b	11ef8 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x1c>
   11f6c:	e2800001 	add	r0, r0, #1
   11f70:	e6ff0070 	uxth	r0, r0
   11f74:	e1c400bc 	strh	r0, [r4, #12]
   11f78:	eaffffea 	b	11f28 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x4c>
   11f7c:	00016664 	.word	0x00016664

00011f80 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)>:
   11f80:	e3a03000 	mov	r3, #0
   11f84:	e92d4030 	push	{r4, r5, lr}
   11f88:	e59f2124 	ldr	r2, [pc, #292]	; 120b4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x134>
   11f8c:	e3510001 	cmp	r1, #1
   11f90:	e24dd024 	sub	sp, sp, #36	; 0x24
   11f94:	e1a04000 	mov	r4, r0
   11f98:	e5801004 	str	r1, [r0, #4]
   11f9c:	e5802000 	str	r2, [r0]
   11fa0:	e1c030bc 	strh	r3, [r0, #12]
   11fa4:	e1c030be 	strh	r3, [r0, #14]
   11fa8:	9a000002 	bls	11fb8 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x38>
   11fac:	e1a00004 	mov	r0, r4
   11fb0:	e28dd024 	add	sp, sp, #36	; 0x24
   11fb4:	e8bd8030 	pop	{r4, r5, pc}
   11fb8:	e59f50f8 	ldr	r5, [pc, #248]	; 120b8 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x138>
   11fbc:	e5950000 	ldr	r0, [r5]
   11fc0:	e1500003 	cmp	r0, r3
   11fc4:	1a00002c 	bne	1207c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0xfc>
   11fc8:	e5953004 	ldr	r3, [r5, #4]
   11fcc:	e3530000 	cmp	r3, #0
   11fd0:	0a000011 	beq	1201c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x9c>
   11fd4:	e3a01000 	mov	r1, #0
   11fd8:	e5942004 	ldr	r2, [r4, #4]
   11fdc:	e7831102 	str	r1, [r3, r2, lsl #2]
   11fe0:	e5953000 	ldr	r3, [r5]
   11fe4:	e3530000 	cmp	r3, #0
   11fe8:	1a000009 	bne	12014 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x94>
   11fec:	e5943004 	ldr	r3, [r4, #4]
   11ff0:	e3530001 	cmp	r3, #1
   11ff4:	8affffec 	bhi	11fac <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x2c>
   11ff8:	e5953004 	ldr	r3, [r5, #4]
   11ffc:	e3530000 	cmp	r3, #0
   12000:	0affffe9 	beq	11fac <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x2c>
   12004:	e3a01000 	mov	r1, #0
   12008:	e1a00004 	mov	r0, r4
   1200c:	ebffffb2 	bl	11edc <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]>
   12010:	eaffffe5 	b	11fac <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x2c>
   12014:	eb0001b1 	bl	126e0 <LeaveCritical>
   12018:	eafffff3 	b	11fec <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x6c>
   1201c:	e3a00001 	mov	r0, #1
   12020:	eb00014a 	bl	12550 <CMemorySystem::GetCoherentPage(unsigned int)>
   12024:	e5850004 	str	r0, [r5, #4]
   12028:	e28d000c 	add	r0, sp, #12
   1202c:	ebffe2b0 	bl	aaf4 <CBcmPropertyTags::CBcmPropertyTags()>
   12030:	e3a03004 	mov	r3, #4
   12034:	e595c004 	ldr	ip, [r5, #4]
   12038:	e58d3000 	str	r3, [sp]
   1203c:	e3ccc103 	bic	ip, ip, #-1073741824	; 0xc0000000
   12040:	e38cc101 	orr	ip, ip, #1073741824	; 0x40000000
   12044:	e28d000c 	add	r0, sp, #12
   12048:	e28d2010 	add	r2, sp, #16
   1204c:	e3a03010 	mov	r3, #16
   12050:	e59f1064 	ldr	r1, [pc, #100]	; 120bc <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x13c>
   12054:	e58dc01c 	str	ip, [sp, #28]
   12058:	ebffe2fc 	bl	ac50 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   1205c:	e3500000 	cmp	r0, #0
   12060:	0a000007 	beq	12084 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x104>
   12064:	e28d000c 	add	r0, sp, #12
   12068:	ebffe2a7 	bl	ab0c <CBcmPropertyTags::~CBcmPropertyTags()>
   1206c:	e5953004 	ldr	r3, [r5, #4]
   12070:	e3530000 	cmp	r3, #0
   12074:	0affffd9 	beq	11fe0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x60>
   12078:	eaffffd5 	b	11fd4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x54>
   1207c:	eb00016a 	bl	1262c <EnterCritical>
   12080:	eaffffd0 	b	11fc8 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x48>
   12084:	e3a03010 	mov	r3, #16
   12088:	e58d0000 	str	r0, [sp]
   1208c:	e28d2010 	add	r2, sp, #16
   12090:	e59f1028 	ldr	r1, [pc, #40]	; 120c0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x140>
   12094:	e28d000c 	add	r0, sp, #12
   12098:	ebffe2ec 	bl	ac50 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   1209c:	e3500000 	cmp	r0, #0
   120a0:	159d301c 	ldrne	r3, [sp, #28]
   120a4:	05850004 	streq	r0, [r5, #4]
   120a8:	13c33103 	bicne	r3, r3, #-1073741824	; 0xc0000000
   120ac:	15853004 	strne	r3, [r5, #4]
   120b0:	eaffffeb 	b	12064 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0xe4>
   120b4:	00015204 	.word	0x00015204
   120b8:	00016664 	.word	0x00016664
   120bc:	00048020 	.word	0x00048020
   120c0:	00040010 	.word	0x00040010

000120c4 <CVirtualGPIOPin::Write(unsigned int)>:
   120c4:	e5902004 	ldr	r2, [r0, #4]
   120c8:	e1a03001 	mov	r3, r1
   120cc:	e3520001 	cmp	r2, #1
   120d0:	812fff1e 	bxhi	lr
   120d4:	e3510001 	cmp	r1, #1
   120d8:	93a03000 	movls	r3, #0
   120dc:	83a03001 	movhi	r3, #1
   120e0:	e59f2014 	ldr	r2, [pc, #20]	; 120fc <CVirtualGPIOPin::Write(unsigned int)+0x38>
   120e4:	e5922004 	ldr	r2, [r2, #4]
   120e8:	e3520000 	cmp	r2, #0
   120ec:	03833001 	orreq	r3, r3, #1
   120f0:	e3530000 	cmp	r3, #0
   120f4:	112fff1e 	bxne	lr
   120f8:	eaffff77 	b	11edc <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]>
   120fc:	00016664 	.word	0x00016664

00012100 <CVirtualGPIOPin::Invert()>:
   12100:	e5901008 	ldr	r1, [r0, #8]
   12104:	e2211001 	eor	r1, r1, #1
   12108:	eaffffed 	b	120c4 <CVirtualGPIOPin::Write(unsigned int)>

0001210c <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE>:
   1210c:	e3a02000 	mov	r2, #0
   12110:	e59f3004 	ldr	r3, [pc, #4]	; 1211c <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE+0x10>
   12114:	e5832000 	str	r2, [r3]
   12118:	e12fff1e 	bx	lr
   1211c:	00016664 	.word	0x00016664

00012120 <UndefinedInstructionInternal>:
   12120:	e24ee004 	sub	lr, lr, #4
   12124:	e92d4000 	stmfd	sp!, {lr}
   12128:	e14fe000 	mrs	lr, SPSR
   1212c:	e92d4000 	stmfd	sp!, {lr}
   12130:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   12134:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   12138:	e1a0100d 	mov	r1, sp
   1213c:	f1020012 	cps	#18
   12140:	e1a0200d 	mov	r2, sp
   12144:	e1a0300e 	mov	r3, lr
   12148:	f1020011 	cps	#17
   1214c:	e1a0400d 	mov	r4, sp
   12150:	e1a0500e 	mov	r5, lr
   12154:	f102001f 	cps	#31
   12158:	e1a0d001 	mov	sp, r1
   1215c:	e92d003c 	push	{r2, r3, r4, r5}
   12160:	e1a0100d 	mov	r1, sp
   12164:	e3a00001 	mov	r0, #1
   12168:	ea00075a 	b	13ed8 <ExceptionHandler>

0001216c <PrefetchAbortStub>:
   1216c:	e24ee004 	sub	lr, lr, #4
   12170:	e92d4000 	stmfd	sp!, {lr}
   12174:	e14fe000 	mrs	lr, SPSR
   12178:	e92d4000 	stmfd	sp!, {lr}
   1217c:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   12180:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   12184:	e1a0100d 	mov	r1, sp
   12188:	f1020012 	cps	#18
   1218c:	e1a0200d 	mov	r2, sp
   12190:	e1a0300e 	mov	r3, lr
   12194:	f1020011 	cps	#17
   12198:	e1a0400d 	mov	r4, sp
   1219c:	e1a0500e 	mov	r5, lr
   121a0:	f102001f 	cps	#31
   121a4:	e1a0d001 	mov	sp, r1
   121a8:	e92d003c 	push	{r2, r3, r4, r5}
   121ac:	e1a0100d 	mov	r1, sp
   121b0:	e3a00002 	mov	r0, #2
   121b4:	ea000747 	b	13ed8 <ExceptionHandler>

000121b8 <DataAbortStub>:
   121b8:	e24ee008 	sub	lr, lr, #8
   121bc:	e92d4000 	stmfd	sp!, {lr}
   121c0:	e14fe000 	mrs	lr, SPSR
   121c4:	e92d4000 	stmfd	sp!, {lr}
   121c8:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   121cc:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   121d0:	e1a0100d 	mov	r1, sp
   121d4:	f1020012 	cps	#18
   121d8:	e1a0200d 	mov	r2, sp
   121dc:	e1a0300e 	mov	r3, lr
   121e0:	f1020011 	cps	#17
   121e4:	e1a0400d 	mov	r4, sp
   121e8:	e1a0500e 	mov	r5, lr
   121ec:	f102001f 	cps	#31
   121f0:	e1a0d001 	mov	sp, r1
   121f4:	e92d003c 	push	{r2, r3, r4, r5}
   121f8:	e1a0100d 	mov	r1, sp
   121fc:	e3a00003 	mov	r0, #3
   12200:	ea000734 	b	13ed8 <ExceptionHandler>

00012204 <UndefinedInstructionStub>:
   12204:	e92d4001 	push	{r0, lr}
   12208:	eef80a10 	vmrs	r0, fpexc
   1220c:	e3100102 	tst	r0, #-2147483648	; 0x80000000
   12210:	0affffc2 	beq	12120 <UndefinedInstructionInternal>
   12214:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
   12218:	eee80a10 	vmsr	fpexc, r0
   1221c:	e8fd8001 	ldm	sp!, {r0, pc}^

00012220 <IRQStub>:
   12220:	e24ee004 	sub	lr, lr, #4
   12224:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
   12228:	ebffe9a0 	bl	c8b0 <InterruptHandler>
   1222c:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^

00012230 <FIQStub>:
   12230:	e24ee004 	sub	lr, lr, #4
   12234:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
   12238:	e3a03000 	mov	r3, #0
   1223c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   12240:	e59f2040 	ldr	r2, [pc, #64]	; 12288 <FIQStub+0x58>
   12244:	e5921000 	ldr	r1, [r2]
   12248:	e3510000 	cmp	r1, #0
   1224c:	0a000004 	beq	12264 <FIQStub+0x34>
   12250:	e5920004 	ldr	r0, [r2, #4]
   12254:	e12fff31 	blx	r1
   12258:	e3a03000 	mov	r3, #0
   1225c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   12260:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^
   12264:	e3a03000 	mov	r3, #0
   12268:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   1226c:	e59f1018 	ldr	r1, [pc, #24]	; 1228c <FIQStub+0x5c>
   12270:	e3a00000 	mov	r0, #0
   12274:	e5810000 	str	r0, [r1]
   12278:	e3a03000 	mov	r3, #0
   1227c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   12280:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   12284:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^
   12288:	00016554 	.word	0x00016554
   1228c:	2000b20c 	.word	0x2000b20c

00012290 <CMemorySystem::~CMemorySystem()>:
   12290:	e59f3068 	ldr	r3, [pc, #104]	; 12300 <CMemorySystem::~CMemorySystem()+0x70>
   12294:	e92d4070 	push	{r4, r5, r6, lr}
   12298:	e5932000 	ldr	r2, [r3]
   1229c:	e1a04000 	mov	r4, r0
   122a0:	e1520000 	cmp	r2, r0
   122a4:	0a000001 	beq	122b0 <CMemorySystem::~CMemorySystem()+0x20>
   122a8:	e1a00004 	mov	r0, r4
   122ac:	e8bd8070 	pop	{r4, r5, r6, pc}
   122b0:	e3a02000 	mov	r2, #0
   122b4:	e5d01000 	ldrb	r1, [r0]
   122b8:	e5832000 	str	r2, [r3]
   122bc:	e1510002 	cmp	r1, r2
   122c0:	0a000004 	beq	122d8 <CMemorySystem::~CMemorySystem()+0x48>
   122c4:	ee111f10 	mrc	15, 0, r1, cr1, cr0, {0}
   122c8:	e59f3034 	ldr	r3, [pc, #52]	; 12304 <CMemorySystem::~CMemorySystem()+0x74>
   122cc:	e0033001 	and	r3, r3, r1
   122d0:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
   122d4:	ee082f17 	mcr	15, 0, r2, cr8, cr7, {0}
   122d8:	e5945008 	ldr	r5, [r4, #8]
   122dc:	e3550000 	cmp	r5, #0
   122e0:	0afffff0 	beq	122a8 <CMemorySystem::~CMemorySystem()+0x18>
   122e4:	e1a00005 	mov	r0, r5
   122e8:	eb0000c5 	bl	12604 <CPageTable::~CPageTable()>
   122ec:	e1a00005 	mov	r0, r5
   122f0:	e3a01004 	mov	r1, #4
   122f4:	eb00012a 	bl	127a4 <operator delete(void*, unsigned int)>
   122f8:	e1a00004 	mov	r0, r4
   122fc:	e8bd8070 	pop	{r4, r5, r6, pc}
   12300:	0001666c 	.word	0x0001666c
   12304:	ff7fe7fa 	.word	0xff7fe7fa

00012308 <CMemorySystem::GetMemSize() const>:
   12308:	e92d4010 	push	{r4, lr}
   1230c:	e59f402c 	ldr	r4, [pc, #44]	; 12340 <CMemorySystem::GetMemSize() const+0x38>
   12310:	e5943000 	ldr	r3, [r4]
   12314:	e3530000 	cmp	r3, #0
   12318:	0a000001 	beq	12324 <CMemorySystem::GetMemSize() const+0x1c>
   1231c:	e5930004 	ldr	r0, [r3, #4]
   12320:	e8bd8010 	pop	{r4, pc}
   12324:	e3a02082 	mov	r2, #130	; 0x82
   12328:	e59f1014 	ldr	r1, [pc, #20]	; 12344 <CMemorySystem::GetMemSize() const+0x3c>
   1232c:	e59f0014 	ldr	r0, [pc, #20]	; 12348 <CMemorySystem::GetMemSize() const+0x40>
   12330:	ebffe1cb 	bl	aa64 <assertion_failed>
   12334:	e5943000 	ldr	r3, [r4]
   12338:	e5930004 	ldr	r0, [r3, #4]
   1233c:	e8bd8010 	pop	{r4, pc}
   12340:	0001666c 	.word	0x0001666c
   12344:	0001520c 	.word	0x0001520c
   12348:	00014c0c 	.word	0x00014c0c

0001234c <CMemorySystem::Get()>:
   1234c:	e92d4010 	push	{r4, lr}
   12350:	e59f4020 	ldr	r4, [pc, #32]	; 12378 <CMemorySystem::Get()+0x2c>
   12354:	e5940000 	ldr	r0, [r4]
   12358:	e3500000 	cmp	r0, #0
   1235c:	18bd8010 	popne	{r4, pc}
   12360:	e3a02088 	mov	r2, #136	; 0x88
   12364:	e59f1010 	ldr	r1, [pc, #16]	; 1237c <CMemorySystem::Get()+0x30>
   12368:	e59f0010 	ldr	r0, [pc, #16]	; 12380 <CMemorySystem::Get()+0x34>
   1236c:	ebffe1bc 	bl	aa64 <assertion_failed>
   12370:	e5940000 	ldr	r0, [r4]
   12374:	e8bd8010 	pop	{r4, pc}
   12378:	0001666c 	.word	0x0001666c
   1237c:	0001520c 	.word	0x0001520c
   12380:	00014c0c 	.word	0x00014c0c

00012384 <CMemorySystem::EnableMMU()>:
   12384:	e5d03000 	ldrb	r3, [r0]
   12388:	e92d4010 	push	{r4, lr}
   1238c:	e3530000 	cmp	r3, #0
   12390:	e1a04000 	mov	r4, r0
   12394:	0a00001c 	beq	1240c <CMemorySystem::EnableMMU()+0x88>
   12398:	ee113f30 	mrc	15, 0, r3, cr1, cr0, {1}
   1239c:	e3833040 	orr	r3, r3, #64	; 0x40
   123a0:	ee013f30 	mcr	15, 0, r3, cr1, cr0, {1}
   123a4:	ee103f70 	mrc	15, 0, r3, cr0, cr0, {3}
   123a8:	e3130001 	tst	r3, #1
   123ac:	1a00001b 	bne	12420 <CMemorySystem::EnableMMU()+0x9c>
   123b0:	e3a03000 	mov	r3, #0
   123b4:	ee023f50 	mcr	15, 0, r3, cr2, cr0, {2}
   123b8:	e5940008 	ldr	r0, [r4, #8]
   123bc:	e1500003 	cmp	r0, r3
   123c0:	0a00001b 	beq	12434 <CMemorySystem::EnableMMU()+0xb0>
   123c4:	eb00008f 	bl	12608 <CPageTable::GetBaseAddress() const>
   123c8:	ee020f10 	mcr	15, 0, r0, cr2, cr0, {0}
   123cc:	e3a03001 	mov	r3, #1
   123d0:	ee033f10 	mcr	15, 0, r3, cr3, cr0, {0}
   123d4:	e3a03000 	mov	r3, #0
   123d8:	ee073f16 	mcr	15, 0, r3, cr7, cr6, {0}
   123dc:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   123e0:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   123e4:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   123e8:	ee083f17 	mcr	15, 0, r3, cr8, cr7, {0}
   123ec:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   123f0:	ee073f95 	mcr	15, 0, r3, cr7, cr5, {4}
   123f4:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
   123f8:	e59f204c 	ldr	r2, [pc, #76]	; 1244c <CMemorySystem::EnableMMU()+0xc8>
   123fc:	e3c33002 	bic	r3, r3, #2
   12400:	e1832002 	orr	r2, r3, r2
   12404:	ee012f10 	mcr	15, 0, r2, cr1, cr0, {0}
   12408:	e8bd8010 	pop	{r4, pc}
   1240c:	e3a0208e 	mov	r2, #142	; 0x8e
   12410:	e59f1038 	ldr	r1, [pc, #56]	; 12450 <CMemorySystem::EnableMMU()+0xcc>
   12414:	e59f0038 	ldr	r0, [pc, #56]	; 12454 <CMemorySystem::EnableMMU()+0xd0>
   12418:	ebffe191 	bl	aa64 <assertion_failed>
   1241c:	eaffffdd 	b	12398 <CMemorySystem::EnableMMU()+0x14>
   12420:	e3a0209b 	mov	r2, #155	; 0x9b
   12424:	e59f1024 	ldr	r1, [pc, #36]	; 12450 <CMemorySystem::EnableMMU()+0xcc>
   12428:	e59f0028 	ldr	r0, [pc, #40]	; 12458 <CMemorySystem::EnableMMU()+0xd4>
   1242c:	ebffe18c 	bl	aa64 <assertion_failed>
   12430:	eaffffde 	b	123b0 <CMemorySystem::EnableMMU()+0x2c>
   12434:	e59f0020 	ldr	r0, [pc, #32]	; 1245c <CMemorySystem::EnableMMU()+0xd8>
   12438:	e3a020a1 	mov	r2, #161	; 0xa1
   1243c:	e59f100c 	ldr	r1, [pc, #12]	; 12450 <CMemorySystem::EnableMMU()+0xcc>
   12440:	ebffe187 	bl	aa64 <assertion_failed>
   12444:	e5940008 	ldr	r0, [r4, #8]
   12448:	eaffffdd 	b	123c4 <CMemorySystem::EnableMMU()+0x40>
   1244c:	00c01805 	.word	0x00c01805
   12450:	0001520c 	.word	0x0001520c
   12454:	00015218 	.word	0x00015218
   12458:	00015228 	.word	0x00015228
   1245c:	00015254 	.word	0x00015254

00012460 <CMemorySystem::CMemorySystem(bool)>:
   12460:	e3a03000 	mov	r3, #0
   12464:	e92d4030 	push	{r4, r5, lr}
   12468:	e59f20d0 	ldr	r2, [pc, #208]	; 12540 <CMemorySystem::CMemorySystem(bool)+0xe0>
   1246c:	e24dd024 	sub	sp, sp, #36	; 0x24
   12470:	e5925000 	ldr	r5, [r2]
   12474:	e1a04000 	mov	r4, r0
   12478:	e1550003 	cmp	r5, r3
   1247c:	e5c01000 	strb	r1, [r0]
   12480:	e5803004 	str	r3, [r0, #4]
   12484:	e5803008 	str	r3, [r0, #8]
   12488:	0a000002 	beq	12498 <CMemorySystem::CMemorySystem(bool)+0x38>
   1248c:	e1a00004 	mov	r0, r4
   12490:	e28dd024 	add	sp, sp, #36	; 0x24
   12494:	e8bd8030 	pop	{r4, r5, pc}
   12498:	e28d0008 	add	r0, sp, #8
   1249c:	e5824000 	str	r4, [r2]
   124a0:	ebffe193 	bl	aaf4 <CBcmPropertyTags::CBcmPropertyTags()>
   124a4:	e58d5000 	str	r5, [sp]
   124a8:	e28d0008 	add	r0, sp, #8
   124ac:	e3a03014 	mov	r3, #20
   124b0:	e28d200c 	add	r2, sp, #12
   124b4:	e59f1088 	ldr	r1, [pc, #136]	; 12544 <CMemorySystem::CMemorySystem(bool)+0xe4>
   124b8:	ebffe1e4 	bl	ac50 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   124bc:	e3500000 	cmp	r0, #0
   124c0:	0a000018 	beq	12528 <CMemorySystem::CMemorySystem(bool)+0xc8>
   124c4:	e59d0018 	ldr	r0, [sp, #24]
   124c8:	e3500000 	cmp	r0, #0
   124cc:	0a000019 	beq	12538 <CMemorySystem::CMemorySystem(bool)+0xd8>
   124d0:	e59f1070 	ldr	r1, [pc, #112]	; 12548 <CMemorySystem::CMemorySystem(bool)+0xe8>
   124d4:	e59f0070 	ldr	r0, [pc, #112]	; 1254c <CMemorySystem::CMemorySystem(bool)+0xec>
   124d8:	e3a02047 	mov	r2, #71	; 0x47
   124dc:	ebffe160 	bl	aa64 <assertion_failed>
   124e0:	e59d101c 	ldr	r1, [sp, #28]
   124e4:	e59d0018 	ldr	r0, [sp, #24]
   124e8:	e5841004 	str	r1, [r4, #4]
   124ec:	eb0000ae 	bl	127ac <mem_init>
   124f0:	e5d43000 	ldrb	r3, [r4]
   124f4:	e3530000 	cmp	r3, #0
   124f8:	0a000007 	beq	1251c <CMemorySystem::CMemorySystem(bool)+0xbc>
   124fc:	e3a00004 	mov	r0, #4
   12500:	eb0000a3 	bl	12794 <operator new(unsigned int)>
   12504:	e1a05000 	mov	r5, r0
   12508:	e5941004 	ldr	r1, [r4, #4]
   1250c:	eb000012 	bl	1255c <CPageTable::CPageTable(unsigned int)>
   12510:	e5845008 	str	r5, [r4, #8]
   12514:	e1a00004 	mov	r0, r4
   12518:	ebffff99 	bl	12384 <CMemorySystem::EnableMMU()>
   1251c:	e28d0008 	add	r0, sp, #8
   12520:	ebffe179 	bl	ab0c <CBcmPropertyTags::~CBcmPropertyTags()>
   12524:	eaffffd8 	b	1248c <CMemorySystem::CMemorySystem(bool)+0x2c>
   12528:	e3a01303 	mov	r1, #201326592	; 0xc000000
   1252c:	e58d0018 	str	r0, [sp, #24]
   12530:	e58d101c 	str	r1, [sp, #28]
   12534:	eaffffeb 	b	124e8 <CMemorySystem::CMemorySystem(bool)+0x88>
   12538:	e59d101c 	ldr	r1, [sp, #28]
   1253c:	eaffffe9 	b	124e8 <CMemorySystem::CMemorySystem(bool)+0x88>
   12540:	0001666c 	.word	0x0001666c
   12544:	00010005 	.word	0x00010005
   12548:	0001520c 	.word	0x0001520c
   1254c:	00015268 	.word	0x00015268

00012550 <CMemorySystem::GetCoherentPage(unsigned int)>:
   12550:	e1a00600 	lsl	r0, r0, #12
   12554:	e2800501 	add	r0, r0, #4194304	; 0x400000
   12558:	e12fff1e 	bx	lr

0001255c <CPageTable::CPageTable(unsigned int)>:
   1255c:	e3a02709 	mov	r2, #2359296	; 0x240000
   12560:	e3a03000 	mov	r3, #0
   12564:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   12568:	e59fc074 	ldr	ip, [pc, #116]	; 125e4 <CPageTable::CPageTable(unsigned int)+0x88>
   1256c:	e59f4074 	ldr	r4, [pc, #116]	; 125e8 <CPageTable::CPageTable(unsigned int)+0x8c>
   12570:	e59f5074 	ldr	r5, [pc, #116]	; 125ec <CPageTable::CPageTable(unsigned int)+0x90>
   12574:	e59f9074 	ldr	r9, [pc, #116]	; 125f0 <CPageTable::CPageTable(unsigned int)+0x94>
   12578:	e59f8074 	ldr	r8, [pc, #116]	; 125f4 <CPageTable::CPageTable(unsigned int)+0x98>
   1257c:	e59f7074 	ldr	r7, [pc, #116]	; 125f8 <CPageTable::CPageTable(unsigned int)+0x9c>
   12580:	e59f6074 	ldr	r6, [pc, #116]	; 125fc <CPageTable::CPageTable(unsigned int)+0xa0>
   12584:	e59fe074 	ldr	lr, [pc, #116]	; 12600 <CPageTable::CPageTable(unsigned int)+0xa4>
   12588:	e5802000 	str	r2, [r0]
   1258c:	e1530004 	cmp	r3, r4
   12590:	31a02005 	movcc	r2, r5
   12594:	3a000007 	bcc	125b8 <CPageTable::CPageTable(unsigned int)+0x5c>
   12598:	e3530501 	cmp	r3, #4194304	; 0x400000
   1259c:	0a00000e 	beq	125dc <CPageTable::CPageTable(unsigned int)+0x80>
   125a0:	e1510003 	cmp	r1, r3
   125a4:	81a02008 	movhi	r2, r8
   125a8:	8a000002 	bhi	125b8 <CPageTable::CPageTable(unsigned int)+0x5c>
   125ac:	e1530007 	cmp	r3, r7
   125b0:	91a02006 	movls	r2, r6
   125b4:	83a02000 	movhi	r2, #0
   125b8:	e1822003 	orr	r2, r2, r3
   125bc:	e5ac2004 	str	r2, [ip, #4]!
   125c0:	e15c000e 	cmp	ip, lr
   125c4:	e2833601 	add	r3, r3, #1048576	; 0x100000
   125c8:	1affffef 	bne	1258c <CPageTable::CPageTable(unsigned int)+0x30>
   125cc:	e3a03000 	mov	r3, #0
   125d0:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
   125d4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   125d8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   125dc:	e1a02009 	mov	r2, r9
   125e0:	eafffff4 	b	125b8 <CPageTable::CPageTable(unsigned int)+0x5c>
   125e4:	0023fffc 	.word	0x0023fffc
   125e8:	00013f8c 	.word	0x00013f8c
   125ec:	0000040e 	.word	0x0000040e
   125f0:	00010412 	.word	0x00010412
   125f4:	0000041e 	.word	0x0000041e
   125f8:	20fffffe 	.word	0x20fffffe
   125fc:	00010416 	.word	0x00010416
   12600:	00243ffc 	.word	0x00243ffc

00012604 <CPageTable::~CPageTable()>:
   12604:	e12fff1e 	bx	lr

00012608 <CPageTable::GetBaseAddress() const>:
   12608:	e5900000 	ldr	r0, [r0]
   1260c:	e3800001 	orr	r0, r0, #1
   12610:	e12fff1e 	bx	lr

00012614 <CurrentExecutionLevel>:
   12614:	e10f0000 	mrs	r0, CPSR
   12618:	e3100040 	tst	r0, #64	; 0x40
   1261c:	01a003a0 	lsreq	r0, r0, #7
   12620:	02000001 	andeq	r0, r0, #1
   12624:	13a00002 	movne	r0, #2
   12628:	e12fff1e 	bx	lr

0001262c <EnterCritical>:
   1262c:	e2403001 	sub	r3, r0, #1
   12630:	e3530001 	cmp	r3, #1
   12634:	e92d4070 	push	{r4, r5, r6, lr}
   12638:	e1a05000 	mov	r5, r0
   1263c:	9a000003 	bls	12650 <EnterCritical+0x24>
   12640:	e3a02064 	mov	r2, #100	; 0x64
   12644:	e59f1080 	ldr	r1, [pc, #128]	; 126cc <EnterCritical+0xa0>
   12648:	e59f0080 	ldr	r0, [pc, #128]	; 126d0 <EnterCritical+0xa4>
   1264c:	ebffe104 	bl	aa64 <assertion_failed>
   12650:	e10f6000 	mrs	r6, CPSR
   12654:	e3550002 	cmp	r5, #2
   12658:	0a000001 	beq	12664 <EnterCritical+0x38>
   1265c:	e3160040 	tst	r6, #64	; 0x40
   12660:	1a000014 	bne	126b8 <EnterCritical+0x8c>
   12664:	f10c00c0 	cpsid	if
   12668:	e59f4064 	ldr	r4, [pc, #100]	; 126d4 <EnterCritical+0xa8>
   1266c:	e5943000 	ldr	r3, [r4]
   12670:	e3530013 	cmp	r3, #19
   12674:	8a00000a 	bhi	126a4 <EnterCritical+0x78>
   12678:	e5943000 	ldr	r3, [r4]
   1267c:	e3550001 	cmp	r5, #1
   12680:	e2832001 	add	r2, r3, #1
   12684:	e0843103 	add	r3, r4, r3, lsl #2
   12688:	e5842000 	str	r2, [r4]
   1268c:	e5836004 	str	r6, [r3, #4]
   12690:	1a000000 	bne	12698 <EnterCritical+0x6c>
   12694:	f1080040 	cpsie	f
   12698:	e3a03000 	mov	r3, #0
   1269c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   126a0:	e8bd8070 	pop	{r4, r5, r6, pc}
   126a4:	e3a0206e 	mov	r2, #110	; 0x6e
   126a8:	e59f101c 	ldr	r1, [pc, #28]	; 126cc <EnterCritical+0xa0>
   126ac:	e59f0024 	ldr	r0, [pc, #36]	; 126d8 <EnterCritical+0xac>
   126b0:	ebffe0eb 	bl	aa64 <assertion_failed>
   126b4:	eaffffef 	b	12678 <EnterCritical+0x4c>
   126b8:	e3a0206a 	mov	r2, #106	; 0x6a
   126bc:	e59f1008 	ldr	r1, [pc, #8]	; 126cc <EnterCritical+0xa0>
   126c0:	e59f0014 	ldr	r0, [pc, #20]	; 126dc <EnterCritical+0xb0>
   126c4:	ebffe0e6 	bl	aa64 <assertion_failed>
   126c8:	eaffffe5 	b	12664 <EnterCritical+0x38>
   126cc:	00015284 	.word	0x00015284
   126d0:	00015294 	.word	0x00015294
   126d4:	00016670 	.word	0x00016670
   126d8:	000152fc 	.word	0x000152fc
   126dc:	000152cc 	.word	0x000152cc

000126e0 <LeaveCritical>:
   126e0:	e92d4010 	push	{r4, lr}
   126e4:	e3a03000 	mov	r3, #0
   126e8:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   126ec:	f10c0040 	cpsid	f
   126f0:	e59f4034 	ldr	r4, [pc, #52]	; 1272c <LeaveCritical+0x4c>
   126f4:	e5943000 	ldr	r3, [r4]
   126f8:	e3530000 	cmp	r3, #0
   126fc:	1a000003 	bne	12710 <LeaveCritical+0x30>
   12700:	e3a0207f 	mov	r2, #127	; 0x7f
   12704:	e59f1024 	ldr	r1, [pc, #36]	; 12730 <LeaveCritical+0x50>
   12708:	e59f0024 	ldr	r0, [pc, #36]	; 12734 <LeaveCritical+0x54>
   1270c:	ebffe0d4 	bl	aa64 <assertion_failed>
   12710:	e5943000 	ldr	r3, [r4]
   12714:	e2433001 	sub	r3, r3, #1
   12718:	e5843000 	str	r3, [r4]
   1271c:	e0844103 	add	r4, r4, r3, lsl #2
   12720:	e5943004 	ldr	r3, [r4, #4]
   12724:	e121f003 	msr	CPSR_c, r3
   12728:	e8bd8010 	pop	{r4, pc}
   1272c:	00016670 	.word	0x00016670
   12730:	00015284 	.word	0x00015284
   12734:	00015324 	.word	0x00015324

00012738 <CleanAndInvalidateDataCacheRange>:
   12738:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
   1273c:	e2813020 	add	r3, r1, #32
   12740:	e353001f 	cmp	r3, #31
   12744:	82800020 	addhi	r0, r0, #32
   12748:	83c1101f 	bichi	r1, r1, #31
   1274c:	80801001 	addhi	r1, r0, r1
   12750:	8a000001 	bhi	1275c <CleanAndInvalidateDataCacheRange+0x24>
   12754:	ea000003 	b	12768 <CleanAndInvalidateDataCacheRange+0x30>
   12758:	e2800020 	add	r0, r0, #32
   1275c:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
   12760:	e1510000 	cmp	r1, r0
   12764:	1afffffb 	bne	12758 <CleanAndInvalidateDataCacheRange+0x20>
   12768:	e3a03000 	mov	r3, #0
   1276c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   12770:	e12fff1e 	bx	lr

00012774 <SyncDataAndInstructionCache>:
   12774:	e3a03000 	mov	r3, #0
   12778:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
   1277c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   12780:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   12784:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   12788:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   1278c:	ee073f95 	mcr	15, 0, r3, cr7, cr5, {4}
   12790:	e12fff1e 	bx	lr

00012794 <operator new(unsigned int)>:
   12794:	ea00001d 	b	12810 <malloc>

00012798 <operator new[](unsigned int)>:
   12798:	ea00001c 	b	12810 <malloc>

0001279c <operator delete(void*)>:
   1279c:	ea000099 	b	12a08 <free>

000127a0 <operator delete[](void*)>:
   127a0:	ea000098 	b	12a08 <free>

000127a4 <operator delete(void*, unsigned int)>:
   127a4:	ea000097 	b	12a08 <free>

000127a8 <operator delete[](void*, unsigned int)>:
   127a8:	ea000096 	b	12a08 <free>

000127ac <mem_init>:
   127ac:	e3500605 	cmp	r0, #5242880	; 0x500000
   127b0:	21a0c000 	movcs	ip, r0
   127b4:	33a0c605 	movcc	ip, #5242880	; 0x500000
   127b8:	e0801001 	add	r1, r0, r1
   127bc:	e24139ff 	sub	r3, r1, #4177920	; 0x3fc000
   127c0:	e2433a03 	sub	r3, r3, #12288	; 0x3000
   127c4:	e59f2018 	ldr	r2, [pc, #24]	; 127e4 <mem_init+0x38>
   127c8:	e3c33eff 	bic	r3, r3, #4080	; 0xff0
   127cc:	e2410501 	sub	r0, r1, #4194304	; 0x400000
   127d0:	e3c3300f 	bic	r3, r3, #15
   127d4:	e582c000 	str	ip, [r2]
   127d8:	e582100c 	str	r1, [r2, #12]
   127dc:	e9820009 	stmib	r2, {r0, r3}
   127e0:	e12fff1e 	bx	lr
   127e4:	000166c4 	.word	0x000166c4

000127e8 <mem_get_size>:
   127e8:	e59f301c 	ldr	r3, [pc, #28]	; 1280c <mem_get_size+0x24>
   127ec:	e5930004 	ldr	r0, [r3, #4]
   127f0:	e5931000 	ldr	r1, [r3]
   127f4:	e593200c 	ldr	r2, [r3, #12]
   127f8:	e5933008 	ldr	r3, [r3, #8]
   127fc:	e0400001 	sub	r0, r0, r1
   12800:	e0423003 	sub	r3, r2, r3
   12804:	e0800003 	add	r0, r0, r3
   12808:	e12fff1e 	bx	lr
   1280c:	000166c4 	.word	0x000166c4

00012810 <malloc>:
   12810:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   12814:	e59f71c8 	ldr	r7, [pc, #456]	; 129e4 <malloc+0x1d4>
   12818:	e1a05000 	mov	r5, r0
   1281c:	e5973000 	ldr	r3, [r7]
   12820:	e3530000 	cmp	r3, #0
   12824:	0a000069 	beq	129d0 <malloc+0x1c0>
   12828:	e5970010 	ldr	r0, [r7, #16]
   1282c:	e3500000 	cmp	r0, #0
   12830:	1a000057 	bne	12994 <malloc+0x184>
   12834:	e59f21ac 	ldr	r2, [pc, #428]	; 129e8 <malloc+0x1d8>
   12838:	e5923000 	ldr	r3, [r2]
   1283c:	e3530000 	cmp	r3, #0
   12840:	0a000008 	beq	12868 <malloc+0x58>
   12844:	e1550003 	cmp	r5, r3
   12848:	e1a04002 	mov	r4, r2
   1284c:	8a000002 	bhi	1285c <malloc+0x4c>
   12850:	ea000024 	b	128e8 <malloc+0xd8>
   12854:	e1530005 	cmp	r3, r5
   12858:	2a000022 	bcs	128e8 <malloc+0xd8>
   1285c:	e5b43008 	ldr	r3, [r4, #8]!
   12860:	e3530000 	cmp	r3, #0
   12864:	1afffffa 	bne	12854 <malloc+0x44>
   12868:	e5976000 	ldr	r6, [r7]
   1286c:	e285301f 	add	r3, r5, #31
   12870:	e3c3300f 	bic	r3, r3, #15
   12874:	e0863003 	add	r3, r6, r3
   12878:	e1560003 	cmp	r6, r3
   1287c:	2a000046 	bcs	1299c <malloc+0x18c>
   12880:	e5971004 	ldr	r1, [r7, #4]
   12884:	e5920040 	ldr	r0, [r2, #64]	; 0x40
   12888:	e0411000 	sub	r1, r1, r0
   1288c:	e1530001 	cmp	r3, r1
   12890:	8a000041 	bhi	1299c <malloc+0x18c>
   12894:	e3a0e043 	mov	lr, #67	; 0x43
   12898:	e3a0c04d 	mov	ip, #77	; 0x4d
   1289c:	e3a0004c 	mov	r0, #76	; 0x4c
   128a0:	e3a01042 	mov	r1, #66	; 0x42
   128a4:	e5873000 	str	r3, [r7]
   128a8:	e1a03825 	lsr	r3, r5, #16
   128ac:	e5c63006 	strb	r3, [r6, #6]
   128b0:	e5973010 	ldr	r3, [r7, #16]
   128b4:	e1a02425 	lsr	r2, r5, #8
   128b8:	e5c65004 	strb	r5, [r6, #4]
   128bc:	e3530000 	cmp	r3, #0
   128c0:	e1a05c25 	lsr	r5, r5, #24
   128c4:	e5c6e000 	strb	lr, [r6]
   128c8:	e5c6c001 	strb	ip, [r6, #1]
   128cc:	e5c60002 	strb	r0, [r6, #2]
   128d0:	e5c61003 	strb	r1, [r6, #3]
   128d4:	e5c62005 	strb	r2, [r6, #5]
   128d8:	e5c65007 	strb	r5, [r6, #7]
   128dc:	0a00001e 	beq	1295c <malloc+0x14c>
   128e0:	ebffff7e 	bl	126e0 <LeaveCritical>
   128e4:	ea00001c 	b	1295c <malloc+0x14c>
   128e8:	e5946004 	ldr	r6, [r4, #4]
   128ec:	e3560000 	cmp	r6, #0
   128f0:	01a05003 	moveq	r5, r3
   128f4:	0affffdb 	beq	12868 <malloc+0x58>
   128f8:	e5d61001 	ldrb	r1, [r6, #1]
   128fc:	e5d63000 	ldrb	r3, [r6]
   12900:	e5d62002 	ldrb	r2, [r6, #2]
   12904:	e1833401 	orr	r3, r3, r1, lsl #8
   12908:	e5d61003 	ldrb	r1, [r6, #3]
   1290c:	e1833802 	orr	r3, r3, r2, lsl #16
   12910:	e59f20d4 	ldr	r2, [pc, #212]	; 129ec <malloc+0x1dc>
   12914:	e1833c01 	orr	r3, r3, r1, lsl #24
   12918:	e1530002 	cmp	r3, r2
   1291c:	0a000003 	beq	12930 <malloc+0x120>
   12920:	e3a0208a 	mov	r2, #138	; 0x8a
   12924:	e59f10c4 	ldr	r1, [pc, #196]	; 129f0 <malloc+0x1e0>
   12928:	e59f00c4 	ldr	r0, [pc, #196]	; 129f4 <malloc+0x1e4>
   1292c:	ebffe04c 	bl	aa64 <assertion_failed>
   12930:	e5d62009 	ldrb	r2, [r6, #9]
   12934:	e5d63008 	ldrb	r3, [r6, #8]
   12938:	e5d6100a 	ldrb	r1, [r6, #10]
   1293c:	e1833402 	orr	r3, r3, r2, lsl #8
   12940:	e5d6200b 	ldrb	r2, [r6, #11]
   12944:	e1833801 	orr	r3, r3, r1, lsl #16
   12948:	e1833c02 	orr	r3, r3, r2, lsl #24
   1294c:	e5843004 	str	r3, [r4, #4]
   12950:	e5973010 	ldr	r3, [r7, #16]
   12954:	e3530000 	cmp	r3, #0
   12958:	1affffe0 	bne	128e0 <malloc+0xd0>
   1295c:	e3a03000 	mov	r3, #0
   12960:	e2864010 	add	r4, r6, #16
   12964:	e314000f 	tst	r4, #15
   12968:	e5c63008 	strb	r3, [r6, #8]
   1296c:	e5c63009 	strb	r3, [r6, #9]
   12970:	e5c6300a 	strb	r3, [r6, #10]
   12974:	e5c6300b 	strb	r3, [r6, #11]
   12978:	0a000003 	beq	1298c <malloc+0x17c>
   1297c:	e3a020b3 	mov	r2, #179	; 0xb3
   12980:	e59f1068 	ldr	r1, [pc, #104]	; 129f0 <malloc+0x1e0>
   12984:	e59f006c 	ldr	r0, [pc, #108]	; 129f8 <malloc+0x1e8>
   12988:	ebffe035 	bl	aa64 <assertion_failed>
   1298c:	e1a00004 	mov	r0, r4
   12990:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   12994:	ebffff24 	bl	1262c <EnterCritical>
   12998:	eaffffa5 	b	12834 <malloc+0x24>
   1299c:	e3a01000 	mov	r1, #0
   129a0:	e5973010 	ldr	r3, [r7, #16]
   129a4:	e5821040 	str	r1, [r2, #64]	; 0x40
   129a8:	e1530001 	cmp	r3, r1
   129ac:	0a000000 	beq	129b4 <malloc+0x1a4>
   129b0:	ebffff4a 	bl	126e0 <LeaveCritical>
   129b4:	ebffe953 	bl	cf08 <CLogger::Get()>
   129b8:	e59f303c 	ldr	r3, [pc, #60]	; 129fc <malloc+0x1ec>
   129bc:	e3a02000 	mov	r2, #0
   129c0:	e59f1038 	ldr	r1, [pc, #56]	; 12a00 <malloc+0x1f0>
   129c4:	ebffeaf8 	bl	d5ac <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   129c8:	e3a04000 	mov	r4, #0
   129cc:	eaffffee 	b	1298c <malloc+0x17c>
   129d0:	e3a02070 	mov	r2, #112	; 0x70
   129d4:	e59f1014 	ldr	r1, [pc, #20]	; 129f0 <malloc+0x1e0>
   129d8:	e59f0024 	ldr	r0, [pc, #36]	; 12a04 <malloc+0x1f4>
   129dc:	ebffe020 	bl	aa64 <assertion_failed>
   129e0:	eaffff90 	b	12828 <malloc+0x18>
   129e4:	000166c4 	.word	0x000166c4
   129e8:	0001655c 	.word	0x0001655c
   129ec:	424c4d43 	.word	0x424c4d43
   129f0:	0001533c 	.word	0x0001533c
   129f4:	0001535c 	.word	0x0001535c
   129f8:	00015398 	.word	0x00015398
   129fc:	00015380 	.word	0x00015380
   12a00:	00015390 	.word	0x00015390
   12a04:	00015348 	.word	0x00015348

00012a08 <free>:
   12a08:	e3500000 	cmp	r0, #0
   12a0c:	012fff1e 	bxeq	lr
   12a10:	e92d4070 	push	{r4, r5, r6, lr}
   12a14:	e2405010 	sub	r5, r0, #16
   12a18:	e5d51001 	ldrb	r1, [r5, #1]
   12a1c:	e5503010 	ldrb	r3, [r0, #-16]
   12a20:	e5d52002 	ldrb	r2, [r5, #2]
   12a24:	e1833401 	orr	r3, r3, r1, lsl #8
   12a28:	e5d51003 	ldrb	r1, [r5, #3]
   12a2c:	e1833802 	orr	r3, r3, r2, lsl #16
   12a30:	e59f20dc 	ldr	r2, [pc, #220]	; 12b14 <free+0x10c>
   12a34:	e1833c01 	orr	r3, r3, r1, lsl #24
   12a38:	e1530002 	cmp	r3, r2
   12a3c:	0a000003 	beq	12a50 <free+0x48>
   12a40:	e3a020c0 	mov	r2, #192	; 0xc0
   12a44:	e59f10cc 	ldr	r1, [pc, #204]	; 12b18 <free+0x110>
   12a48:	e59f00cc 	ldr	r0, [pc, #204]	; 12b1c <free+0x114>
   12a4c:	ebffe004 	bl	aa64 <assertion_failed>
   12a50:	e59f40c8 	ldr	r4, [pc, #200]	; 12b20 <free+0x118>
   12a54:	e5943000 	ldr	r3, [r4]
   12a58:	e3530000 	cmp	r3, #0
   12a5c:	08bd8070 	popeq	{r4, r5, r6, pc}
   12a60:	e5d51005 	ldrb	r1, [r5, #5]
   12a64:	e5d52004 	ldrb	r2, [r5, #4]
   12a68:	e5d50006 	ldrb	r0, [r5, #6]
   12a6c:	e1822401 	orr	r2, r2, r1, lsl #8
   12a70:	e5d51007 	ldrb	r1, [r5, #7]
   12a74:	e1822800 	orr	r2, r2, r0, lsl #16
   12a78:	e1822c01 	orr	r2, r2, r1, lsl #24
   12a7c:	e1520003 	cmp	r2, r3
   12a80:	1a000002 	bne	12a90 <free+0x88>
   12a84:	ea000005 	b	12aa0 <free+0x98>
   12a88:	e1530002 	cmp	r3, r2
   12a8c:	0a000003 	beq	12aa0 <free+0x98>
   12a90:	e5b43008 	ldr	r3, [r4, #8]!
   12a94:	e3530000 	cmp	r3, #0
   12a98:	1afffffa 	bne	12a88 <free+0x80>
   12a9c:	e8bd8070 	pop	{r4, r5, r6, pc}
   12aa0:	e59f607c 	ldr	r6, [pc, #124]	; 12b24 <free+0x11c>
   12aa4:	e5960010 	ldr	r0, [r6, #16]
   12aa8:	e3500000 	cmp	r0, #0
   12aac:	1a000009 	bne	12ad8 <free+0xd0>
   12ab0:	e5d40004 	ldrb	r0, [r4, #4]
   12ab4:	e5d41005 	ldrb	r1, [r4, #5]
   12ab8:	e5d42006 	ldrb	r2, [r4, #6]
   12abc:	e5d43007 	ldrb	r3, [r4, #7]
   12ac0:	e5c50008 	strb	r0, [r5, #8]
   12ac4:	e5c51009 	strb	r1, [r5, #9]
   12ac8:	e5c5200a 	strb	r2, [r5, #10]
   12acc:	e5c5300b 	strb	r3, [r5, #11]
   12ad0:	e5845004 	str	r5, [r4, #4]
   12ad4:	e8bd8070 	pop	{r4, r5, r6, pc}
   12ad8:	ebfffed3 	bl	1262c <EnterCritical>
   12adc:	e596c010 	ldr	ip, [r6, #16]
   12ae0:	e5d40004 	ldrb	r0, [r4, #4]
   12ae4:	e5d41005 	ldrb	r1, [r4, #5]
   12ae8:	e5d42006 	ldrb	r2, [r4, #6]
   12aec:	e5d43007 	ldrb	r3, [r4, #7]
   12af0:	e35c0000 	cmp	ip, #0
   12af4:	e5c50008 	strb	r0, [r5, #8]
   12af8:	e5c51009 	strb	r1, [r5, #9]
   12afc:	e5c5200a 	strb	r2, [r5, #10]
   12b00:	e5c5300b 	strb	r3, [r5, #11]
   12b04:	e5845004 	str	r5, [r4, #4]
   12b08:	08bd8070 	popeq	{r4, r5, r6, pc}
   12b0c:	e8bd4070 	pop	{r4, r5, r6, lr}
   12b10:	eafffef2 	b	126e0 <LeaveCritical>
   12b14:	424c4d43 	.word	0x424c4d43
   12b18:	0001533c 	.word	0x0001533c
   12b1c:	0001535c 	.word	0x0001535c
   12b20:	0001655c 	.word	0x0001655c
   12b24:	000166c4 	.word	0x000166c4

00012b28 <calloc>:
   12b28:	e92d4070 	push	{r4, r5, r6, lr}
   12b2c:	e0040190 	mul	r4, r0, r1
   12b30:	e3540000 	cmp	r4, #0
   12b34:	03a04001 	moveq	r4, #1
   12b38:	e1540000 	cmp	r4, r0
   12b3c:	3a000008 	bcc	12b64 <calloc+0x3c>
   12b40:	e1a00004 	mov	r0, r4
   12b44:	ebffff31 	bl	12810 <malloc>
   12b48:	e2505000 	subs	r5, r0, #0
   12b4c:	0a000002 	beq	12b5c <calloc+0x34>
   12b50:	e1a02004 	mov	r2, r4
   12b54:	e3a01000 	mov	r1, #0
   12b58:	ebfffb4f 	bl	1189c <memset>
   12b5c:	e1a00005 	mov	r0, r5
   12b60:	e8bd8070 	pop	{r4, r5, r6, pc}
   12b64:	e3a020e2 	mov	r2, #226	; 0xe2
   12b68:	e59f1008 	ldr	r1, [pc, #8]	; 12b78 <calloc+0x50>
   12b6c:	e59f0008 	ldr	r0, [pc, #8]	; 12b7c <calloc+0x54>
   12b70:	ebffdfbb 	bl	aa64 <assertion_failed>
   12b74:	eafffff1 	b	12b40 <calloc+0x18>
   12b78:	0001533c 	.word	0x0001533c
   12b7c:	000153c4 	.word	0x000153c4

00012b80 <realloc>:
   12b80:	e92d4070 	push	{r4, r5, r6, lr}
   12b84:	e2505000 	subs	r5, r0, #0
   12b88:	e1a06001 	mov	r6, r1
   12b8c:	0a00002d 	beq	12c48 <realloc+0xc8>
   12b90:	e3510000 	cmp	r1, #0
   12b94:	0a000027 	beq	12c38 <realloc+0xb8>
   12b98:	e2454010 	sub	r4, r5, #16
   12b9c:	e5d41001 	ldrb	r1, [r4, #1]
   12ba0:	e5553010 	ldrb	r3, [r5, #-16]
   12ba4:	e5d42002 	ldrb	r2, [r4, #2]
   12ba8:	e1833401 	orr	r3, r3, r1, lsl #8
   12bac:	e5d41003 	ldrb	r1, [r4, #3]
   12bb0:	e1833802 	orr	r3, r3, r2, lsl #16
   12bb4:	e59f20a0 	ldr	r2, [pc, #160]	; 12c5c <realloc+0xdc>
   12bb8:	e1833c01 	orr	r3, r3, r1, lsl #24
   12bbc:	e1530002 	cmp	r3, r2
   12bc0:	0a000003 	beq	12bd4 <realloc+0x54>
   12bc4:	e3a020fc 	mov	r2, #252	; 0xfc
   12bc8:	e59f1090 	ldr	r1, [pc, #144]	; 12c60 <realloc+0xe0>
   12bcc:	e59f0090 	ldr	r0, [pc, #144]	; 12c64 <realloc+0xe4>
   12bd0:	ebffdfa3 	bl	aa64 <assertion_failed>
   12bd4:	e5d42005 	ldrb	r2, [r4, #5]
   12bd8:	e5d43004 	ldrb	r3, [r4, #4]
   12bdc:	e5d41006 	ldrb	r1, [r4, #6]
   12be0:	e1833402 	orr	r3, r3, r2, lsl #8
   12be4:	e5d42007 	ldrb	r2, [r4, #7]
   12be8:	e1833801 	orr	r3, r3, r1, lsl #16
   12bec:	e1833c02 	orr	r3, r3, r2, lsl #24
   12bf0:	e1560003 	cmp	r6, r3
   12bf4:	8a000001 	bhi	12c00 <realloc+0x80>
   12bf8:	e1a00005 	mov	r0, r5
   12bfc:	e8bd8070 	pop	{r4, r5, r6, pc}
   12c00:	e1a00006 	mov	r0, r6
   12c04:	ebffff01 	bl	12810 <malloc>
   12c08:	e2506000 	subs	r6, r0, #0
   12c0c:	0a000010 	beq	12c54 <realloc+0xd4>
   12c10:	e5d42005 	ldrb	r2, [r4, #5]
   12c14:	e5d43004 	ldrb	r3, [r4, #4]
   12c18:	e5d41006 	ldrb	r1, [r4, #6]
   12c1c:	e1833402 	orr	r3, r3, r2, lsl #8
   12c20:	e5d42007 	ldrb	r2, [r4, #7]
   12c24:	e1833801 	orr	r3, r3, r1, lsl #16
   12c28:	e1832c02 	orr	r2, r3, r2, lsl #24
   12c2c:	e1a01005 	mov	r1, r5
   12c30:	ebfffc8b 	bl	11e64 <memcpy>
   12c34:	e1a00005 	mov	r0, r5
   12c38:	e1a05006 	mov	r5, r6
   12c3c:	ebffff71 	bl	12a08 <free>
   12c40:	e1a00005 	mov	r0, r5
   12c44:	e8bd8070 	pop	{r4, r5, r6, pc}
   12c48:	e1a00001 	mov	r0, r1
   12c4c:	e8bd4070 	pop	{r4, r5, r6, lr}
   12c50:	eafffeee 	b	12810 <malloc>
   12c54:	e1a05006 	mov	r5, r6
   12c58:	eaffffe6 	b	12bf8 <realloc+0x78>
   12c5c:	424c4d43 	.word	0x424c4d43
   12c60:	0001533c 	.word	0x0001533c
   12c64:	0001535c 	.word	0x0001535c

00012c68 <palloc>:
   12c68:	e92d4070 	push	{r4, r5, r6, lr}
   12c6c:	e59f50c4 	ldr	r5, [pc, #196]	; 12d38 <palloc+0xd0>
   12c70:	e5953008 	ldr	r3, [r5, #8]
   12c74:	e3530000 	cmp	r3, #0
   12c78:	0a000029 	beq	12d24 <palloc+0xbc>
   12c7c:	e5950014 	ldr	r0, [r5, #20]
   12c80:	e3500000 	cmp	r0, #0
   12c84:	1a000016 	bne	12ce4 <palloc+0x7c>
   12c88:	e5954018 	ldr	r4, [r5, #24]
   12c8c:	e3540000 	cmp	r4, #0
   12c90:	0a000017 	beq	12cf4 <palloc+0x8c>
   12c94:	e59f30a0 	ldr	r3, [pc, #160]	; 12d3c <palloc+0xd4>
   12c98:	e5942000 	ldr	r2, [r4]
   12c9c:	e1520003 	cmp	r2, r3
   12ca0:	0a000003 	beq	12cb4 <palloc+0x4c>
   12ca4:	e59f2094 	ldr	r2, [pc, #148]	; 12d40 <palloc+0xd8>
   12ca8:	e59f1094 	ldr	r1, [pc, #148]	; 12d44 <palloc+0xdc>
   12cac:	e59f0094 	ldr	r0, [pc, #148]	; 12d48 <palloc+0xe0>
   12cb0:	ebffdf6b 	bl	aa64 <assertion_failed>
   12cb4:	e3a02000 	mov	r2, #0
   12cb8:	e5943004 	ldr	r3, [r4, #4]
   12cbc:	e5842000 	str	r2, [r4]
   12cc0:	e5853018 	str	r3, [r5, #24]
   12cc4:	e5953014 	ldr	r3, [r5, #20]
   12cc8:	e3530000 	cmp	r3, #0
   12ccc:	1a000001 	bne	12cd8 <palloc+0x70>
   12cd0:	e1a00004 	mov	r0, r4
   12cd4:	e8bd8070 	pop	{r4, r5, r6, pc}
   12cd8:	ebfffe80 	bl	126e0 <LeaveCritical>
   12cdc:	e1a00004 	mov	r0, r4
   12ce0:	e8bd8070 	pop	{r4, r5, r6, pc}
   12ce4:	ebfffe50 	bl	1262c <EnterCritical>
   12ce8:	e5954018 	ldr	r4, [r5, #24]
   12cec:	e3540000 	cmp	r4, #0
   12cf0:	1affffe7 	bne	12c94 <palloc+0x2c>
   12cf4:	e5954008 	ldr	r4, [r5, #8]
   12cf8:	e595200c 	ldr	r2, [r5, #12]
   12cfc:	e2843a01 	add	r3, r4, #4096	; 0x1000
   12d00:	e1530002 	cmp	r3, r2
   12d04:	e5853008 	str	r3, [r5, #8]
   12d08:	9affffed 	bls	12cc4 <palloc+0x5c>
   12d0c:	e5954014 	ldr	r4, [r5, #20]
   12d10:	e3540000 	cmp	r4, #0
   12d14:	0affffed 	beq	12cd0 <palloc+0x68>
   12d18:	ebfffe70 	bl	126e0 <LeaveCritical>
   12d1c:	e3a00000 	mov	r0, #0
   12d20:	e8bd8070 	pop	{r4, r5, r6, pc}
   12d24:	e59f2020 	ldr	r2, [pc, #32]	; 12d4c <palloc+0xe4>
   12d28:	e59f1014 	ldr	r1, [pc, #20]	; 12d44 <palloc+0xdc>
   12d2c:	e59f001c 	ldr	r0, [pc, #28]	; 12d50 <palloc+0xe8>
   12d30:	ebffdf4b 	bl	aa64 <assertion_failed>
   12d34:	eaffffd0 	b	12c7c <palloc+0x14>
   12d38:	000166c4 	.word	0x000166c4
   12d3c:	50474d43 	.word	0x50474d43
   12d40:	0000011f 	.word	0x0000011f
   12d44:	0001533c 	.word	0x0001533c
   12d48:	000153ec 	.word	0x000153ec
   12d4c:	00000111 	.word	0x00000111
   12d50:	000153d8 	.word	0x000153d8

00012d54 <pfree>:
   12d54:	e92d4070 	push	{r4, r5, r6, lr}
   12d58:	e2504000 	subs	r4, r0, #0
   12d5c:	08bd8070 	popeq	{r4, r5, r6, pc}
   12d60:	e59f5044 	ldr	r5, [pc, #68]	; 12dac <pfree+0x58>
   12d64:	e5950014 	ldr	r0, [r5, #20]
   12d68:	e3500000 	cmp	r0, #0
   12d6c:	1a000004 	bne	12d84 <pfree+0x30>
   12d70:	e5952018 	ldr	r2, [r5, #24]
   12d74:	e59f1034 	ldr	r1, [pc, #52]	; 12db0 <pfree+0x5c>
   12d78:	e5854018 	str	r4, [r5, #24]
   12d7c:	e8840006 	stm	r4, {r1, r2}
   12d80:	e8bd8070 	pop	{r4, r5, r6, pc}
   12d84:	ebfffe28 	bl	1262c <EnterCritical>
   12d88:	e5951014 	ldr	r1, [r5, #20]
   12d8c:	e5953018 	ldr	r3, [r5, #24]
   12d90:	e59f2018 	ldr	r2, [pc, #24]	; 12db0 <pfree+0x5c>
   12d94:	e3510000 	cmp	r1, #0
   12d98:	e884000c 	stm	r4, {r2, r3}
   12d9c:	e5854018 	str	r4, [r5, #24]
   12da0:	08bd8070 	popeq	{r4, r5, r6, pc}
   12da4:	e8bd4070 	pop	{r4, r5, r6, lr}
   12da8:	eafffe4c 	b	126e0 <LeaveCritical>
   12dac:	000166c4 	.word	0x000166c4
   12db0:	50474d43 	.word	0x50474d43

00012db4 <_GLOBAL__sub_I_mem_init>:
   12db4:	e3a02001 	mov	r2, #1
   12db8:	e59f3008 	ldr	r3, [pc, #8]	; 12dc8 <_GLOBAL__sub_I_mem_init+0x14>
   12dbc:	e5832010 	str	r2, [r3, #16]
   12dc0:	e5832014 	str	r2, [r3, #20]
   12dc4:	e12fff1e 	bx	lr
   12dc8:	000166c4 	.word	0x000166c4

00012dcc <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>:
   12dcc:	e3a02000 	mov	r2, #0
   12dd0:	e3a01001 	mov	r1, #1
   12dd4:	e92d4030 	push	{r4, r5, lr}
   12dd8:	e1a04000 	mov	r4, r0
   12ddc:	e5903020 	ldr	r3, [r0, #32]
   12de0:	e24dd014 	sub	sp, sp, #20
   12de4:	e5c31011 	strb	r1, [r3, #17]
   12de8:	e5c3200c 	strb	r2, [r3, #12]
   12dec:	e5c3200d 	strb	r2, [r3, #13]
   12df0:	e5c3200e 	strb	r2, [r3, #14]
   12df4:	e5c3200f 	strb	r2, [r3, #15]
   12df8:	e5c32010 	strb	r2, [r3, #16]
   12dfc:	e5c32012 	strb	r2, [r3, #18]
   12e00:	e5c32013 	strb	r2, [r3, #19]
   12e04:	e28d000c 	add	r0, sp, #12
   12e08:	ebffdf39 	bl	aaf4 <CBcmPropertyTags::CBcmPropertyTags()>
   12e0c:	e59f306c 	ldr	r3, [pc, #108]	; 12e80 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0xb4>
   12e10:	e5942020 	ldr	r2, [r4, #32]
   12e14:	e28d000c 	add	r0, sp, #12
   12e18:	e58d3000 	str	r3, [sp]
   12e1c:	e59f1060 	ldr	r1, [pc, #96]	; 12e84 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0xb8>
   12e20:	e283300c 	add	r3, r3, #12
   12e24:	ebffdf89 	bl	ac50 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   12e28:	e2505000 	subs	r5, r0, #0
   12e2c:	0a000008 	beq	12e54 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x88>
   12e30:	e5942020 	ldr	r2, [r4, #32]
   12e34:	e5d2300c 	ldrb	r3, [r2, #12]
   12e38:	e5d2000d 	ldrb	r0, [r2, #13]
   12e3c:	e5d2100e 	ldrb	r1, [r2, #14]
   12e40:	e1833400 	orr	r3, r3, r0, lsl #8
   12e44:	e5d2200f 	ldrb	r2, [r2, #15]
   12e48:	e1833801 	orr	r3, r3, r1, lsl #16
   12e4c:	e1933c02 	orrs	r3, r3, r2, lsl #24
   12e50:	0a000005 	beq	12e6c <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0xa0>
   12e54:	e3a05000 	mov	r5, #0
   12e58:	e28d000c 	add	r0, sp, #12
   12e5c:	ebffdf2a 	bl	ab0c <CBcmPropertyTags::~CBcmPropertyTags()>
   12e60:	e1a00005 	mov	r0, r5
   12e64:	e28dd014 	add	sp, sp, #20
   12e68:	e8bd8030 	pop	{r4, r5, pc}
   12e6c:	e28d000c 	add	r0, sp, #12
   12e70:	ebffdf25 	bl	ab0c <CBcmPropertyTags::~CBcmPropertyTags()>
   12e74:	e1a00005 	mov	r0, r5
   12e78:	e28dd014 	add	sp, sp, #20
   12e7c:	e8bd8030 	pop	{r4, r5, pc}
   12e80:	00000408 	.word	0x00000408
   12e84:	0004800b 	.word	0x0004800b

00012e88 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
   12e88:	e92d4030 	push	{r4, r5, lr}
   12e8c:	e3510000 	cmp	r1, #0
   12e90:	13520000 	cmpne	r2, #0
   12e94:	e1a04000 	mov	r4, r0
   12e98:	e3a05000 	mov	r5, #0
   12e9c:	e24dd024 	sub	sp, sp, #36	; 0x24
   12ea0:	e59dc034 	ldr	ip, [sp, #52]	; 0x34
   12ea4:	e59d0030 	ldr	r0, [sp, #48]	; 0x30
   12ea8:	e8840006 	stm	r4, {r1, r2}
   12eac:	e5843010 	str	r3, [r4, #16]
   12eb0:	e584c00c 	str	ip, [r4, #12]
   12eb4:	e5840008 	str	r0, [r4, #8]
   12eb8:	e5845014 	str	r5, [r4, #20]
   12ebc:	e5845018 	str	r5, [r4, #24]
   12ec0:	e584501c 	str	r5, [r4, #28]
   12ec4:	e5845020 	str	r5, [r4, #32]
   12ec8:	1a000010 	bne	12f10 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x88>
   12ecc:	e28d0008 	add	r0, sp, #8
   12ed0:	ebffdf07 	bl	aaf4 <CBcmPropertyTags::CBcmPropertyTags()>
   12ed4:	e58d5000 	str	r5, [sp]
   12ed8:	e28d0008 	add	r0, sp, #8
   12edc:	e3a03014 	mov	r3, #20
   12ee0:	e28d200c 	add	r2, sp, #12
   12ee4:	e59f10c8 	ldr	r1, [pc, #200]	; 12fb4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x12c>
   12ee8:	ebffdf58 	bl	ac50 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   12eec:	e1500005 	cmp	r0, r5
   12ef0:	1a000026 	bne	12f90 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x108>
   12ef4:	e3a02d0a 	mov	r2, #640	; 0x280
   12ef8:	e3a03e1e 	mov	r3, #480	; 0x1e0
   12efc:	e884000c 	stm	r4, {r2, r3}
   12f00:	e28d0008 	add	r0, sp, #8
   12f04:	ebffdf00 	bl	ab0c <CBcmPropertyTags::~CBcmPropertyTags()>
   12f08:	e5940008 	ldr	r0, [r4, #8]
   12f0c:	e5943010 	ldr	r3, [r4, #16]
   12f10:	e3500000 	cmp	r0, #0
   12f14:	0a000019 	beq	12f80 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xf8>
   12f18:	e594200c 	ldr	r2, [r4, #12]
   12f1c:	e3520000 	cmp	r2, #0
   12f20:	0a000016 	beq	12f80 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xf8>
   12f24:	e3530008 	cmp	r3, #8
   12f28:	8a000006 	bhi	12f48 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xc0>
   12f2c:	e59f0084 	ldr	r0, [pc, #132]	; 12fb8 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x130>
   12f30:	ebfffe18 	bl	12798 <operator new[](unsigned int)>
   12f34:	e3a02b01 	mov	r2, #1024	; 0x400
   12f38:	e5840020 	str	r0, [r4, #32]
   12f3c:	e3a01000 	mov	r1, #0
   12f40:	e2800014 	add	r0, r0, #20
   12f44:	ebfffa54 	bl	1189c <memset>
   12f48:	e3a02070 	mov	r2, #112	; 0x70
   12f4c:	e59f1068 	ldr	r1, [pc, #104]	; 12fbc <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x134>
   12f50:	e2840024 	add	r0, r4, #36	; 0x24
   12f54:	ebfffbc2 	bl	11e64 <memcpy>
   12f58:	e994000f 	ldmib	r4, {r0, r1, r2, r3}
   12f5c:	e5840034 	str	r0, [r4, #52]	; 0x34
   12f60:	e1a00004 	mov	r0, r4
   12f64:	e594c000 	ldr	ip, [r4]
   12f68:	e5841044 	str	r1, [r4, #68]	; 0x44
   12f6c:	e584c030 	str	ip, [r4, #48]	; 0x30
   12f70:	e5842048 	str	r2, [r4, #72]	; 0x48
   12f74:	e5843058 	str	r3, [r4, #88]	; 0x58
   12f78:	e28dd024 	add	sp, sp, #36	; 0x24
   12f7c:	e8bd8030 	pop	{r4, r5, pc}
   12f80:	e8940006 	ldm	r4, {r1, r2}
   12f84:	e5841008 	str	r1, [r4, #8]
   12f88:	e584200c 	str	r2, [r4, #12]
   12f8c:	eaffffe4 	b	12f24 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x9c>
   12f90:	e59d2018 	ldr	r2, [sp, #24]
   12f94:	e59d301c 	ldr	r3, [sp, #28]
   12f98:	e2420d0a 	sub	r0, r2, #640	; 0x280
   12f9c:	e2431e1e 	sub	r1, r3, #480	; 0x1e0
   12fa0:	e3510f96 	cmp	r1, #600	; 0x258
   12fa4:	93500c05 	cmpls	r0, #1280	; 0x500
   12fa8:	e884000c 	stm	r4, {r2, r3}
   12fac:	9affffd3 	bls	12f00 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x78>
   12fb0:	eaffffcf 	b	12ef4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
   12fb4:	00040003 	.word	0x00040003
   12fb8:	00000414 	.word	0x00000414
   12fbc:	000165a0 	.word	0x000165a0

00012fc0 <CBcmFrameBuffer::~CBcmFrameBuffer()>:
   12fc0:	e92d4010 	push	{r4, lr}
   12fc4:	e1a04000 	mov	r4, r0
   12fc8:	e3a01014 	mov	r1, #20
   12fcc:	e5900020 	ldr	r0, [r0, #32]
   12fd0:	ebfffdf3 	bl	127a4 <operator delete(void*, unsigned int)>
   12fd4:	e1a00004 	mov	r0, r4
   12fd8:	e8bd8010 	pop	{r4, pc}

00012fdc <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)>:
   12fdc:	e5903010 	ldr	r3, [r0, #16]
   12fe0:	e3530008 	cmp	r3, #8
   12fe4:	812fff1e 	bxhi	lr
   12fe8:	e1a03982 	lsl	r3, r2, #19
   12fec:	e1a0c5a2 	lsr	ip, r2, #11
   12ff0:	e203373e 	and	r3, r3, #16252928	; 0xf80000
   12ff4:	e183318c 	orr	r3, r3, ip, lsl #3
   12ff8:	e1a02282 	lsl	r2, r2, #5
   12ffc:	e5900020 	ldr	r0, [r0, #32]
   13000:	e38334ff 	orr	r3, r3, #-16777216	; 0xff000000
   13004:	e2022b3f 	and	r2, r2, #64512	; 0xfc00
   13008:	e1822003 	orr	r2, r2, r3
   1300c:	e2811004 	add	r1, r1, #4
   13010:	e0801101 	add	r1, r0, r1, lsl #2
   13014:	e1a0c422 	lsr	ip, r2, #8
   13018:	e1a00822 	lsr	r0, r2, #16
   1301c:	e1a03c22 	lsr	r3, r2, #24
   13020:	e5c12004 	strb	r2, [r1, #4]
   13024:	e5c1c005 	strb	ip, [r1, #5]
   13028:	e5c10006 	strb	r0, [r1, #6]
   1302c:	e5c13007 	strb	r3, [r1, #7]
   13030:	e12fff1e 	bx	lr

00013034 <CBcmFrameBuffer::SetPalette32(unsigned char, unsigned int)>:
   13034:	e5903010 	ldr	r3, [r0, #16]
   13038:	e3530008 	cmp	r3, #8
   1303c:	812fff1e 	bxhi	lr
   13040:	e5903020 	ldr	r3, [r0, #32]
   13044:	e2811004 	add	r1, r1, #4
   13048:	e0831101 	add	r1, r3, r1, lsl #2
   1304c:	e1a0c422 	lsr	ip, r2, #8
   13050:	e1a00822 	lsr	r0, r2, #16
   13054:	e1a03c22 	lsr	r3, r2, #24
   13058:	e5c12004 	strb	r2, [r1, #4]
   1305c:	e5c1c005 	strb	ip, [r1, #5]
   13060:	e5c10006 	strb	r0, [r1, #6]
   13064:	e5c13007 	strb	r3, [r1, #7]
   13068:	e12fff1e 	bx	lr

0001306c <CBcmFrameBuffer::Initialize()>:
   1306c:	e92d4030 	push	{r4, r5, lr}
   13070:	e1a04000 	mov	r4, r0
   13074:	e24dd00c 	sub	sp, sp, #12
   13078:	e28d0004 	add	r0, sp, #4
   1307c:	ebffde9c 	bl	aaf4 <CBcmPropertyTags::CBcmPropertyTags()>
   13080:	e2841024 	add	r1, r4, #36	; 0x24
   13084:	e28d0004 	add	r0, sp, #4
   13088:	e3a02070 	mov	r2, #112	; 0x70
   1308c:	ebffdea3 	bl	ab20 <CBcmPropertyTags::GetTags(void*, unsigned int)>
   13090:	e2505000 	subs	r5, r0, #0
   13094:	0a00001f 	beq	13118 <CBcmFrameBuffer::Initialize()+0xac>
   13098:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   1309c:	e3530000 	cmp	r3, #0
   130a0:	0a00001b 	beq	13114 <CBcmFrameBuffer::Initialize()+0xa8>
   130a4:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   130a8:	e3530000 	cmp	r3, #0
   130ac:	0a000018 	beq	13114 <CBcmFrameBuffer::Initialize()+0xa8>
   130b0:	e5943044 	ldr	r3, [r4, #68]	; 0x44
   130b4:	e3530000 	cmp	r3, #0
   130b8:	0a000015 	beq	13114 <CBcmFrameBuffer::Initialize()+0xa8>
   130bc:	e5943048 	ldr	r3, [r4, #72]	; 0x48
   130c0:	e3530000 	cmp	r3, #0
   130c4:	0a000012 	beq	13114 <CBcmFrameBuffer::Initialize()+0xa8>
   130c8:	e5943058 	ldr	r3, [r4, #88]	; 0x58
   130cc:	e3530000 	cmp	r3, #0
   130d0:	0a00000f 	beq	13114 <CBcmFrameBuffer::Initialize()+0xa8>
   130d4:	e594307c 	ldr	r3, [r4, #124]	; 0x7c
   130d8:	e3530000 	cmp	r3, #0
   130dc:	0a00000c 	beq	13114 <CBcmFrameBuffer::Initialize()+0xa8>
   130e0:	e5940010 	ldr	r0, [r4, #16]
   130e4:	e5941080 	ldr	r1, [r4, #128]	; 0x80
   130e8:	e5942090 	ldr	r2, [r4, #144]	; 0x90
   130ec:	e3c33103 	bic	r3, r3, #-1073741824	; 0xc0000000
   130f0:	e3500008 	cmp	r0, #8
   130f4:	e5843014 	str	r3, [r4, #20]
   130f8:	e5841018 	str	r1, [r4, #24]
   130fc:	e584201c 	str	r2, [r4, #28]
   13100:	8a000004 	bhi	13118 <CBcmFrameBuffer::Initialize()+0xac>
   13104:	e1a00004 	mov	r0, r4
   13108:	ebffff2f 	bl	12dcc <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>
   1310c:	e1a05000 	mov	r5, r0
   13110:	ea000000 	b	13118 <CBcmFrameBuffer::Initialize()+0xac>
   13114:	e1a05003 	mov	r5, r3
   13118:	e28d0004 	add	r0, sp, #4
   1311c:	ebffde7a 	bl	ab0c <CBcmPropertyTags::~CBcmPropertyTags()>
   13120:	e1a00005 	mov	r0, r5
   13124:	e28dd00c 	add	sp, sp, #12
   13128:	e8bd8030 	pop	{r4, r5, pc}

0001312c <CBcmFrameBuffer::GetWidth() const>:
   1312c:	e5900000 	ldr	r0, [r0]
   13130:	e12fff1e 	bx	lr

00013134 <CBcmFrameBuffer::GetHeight() const>:
   13134:	e5900004 	ldr	r0, [r0, #4]
   13138:	e12fff1e 	bx	lr

0001313c <CBcmFrameBuffer::GetVirtWidth() const>:
   1313c:	e5900008 	ldr	r0, [r0, #8]
   13140:	e12fff1e 	bx	lr

00013144 <CBcmFrameBuffer::GetVirtHeight() const>:
   13144:	e590000c 	ldr	r0, [r0, #12]
   13148:	e12fff1e 	bx	lr

0001314c <CBcmFrameBuffer::GetPitch() const>:
   1314c:	e590001c 	ldr	r0, [r0, #28]
   13150:	e12fff1e 	bx	lr

00013154 <CBcmFrameBuffer::GetDepth() const>:
   13154:	e5900010 	ldr	r0, [r0, #16]
   13158:	e12fff1e 	bx	lr

0001315c <CBcmFrameBuffer::GetBuffer() const>:
   1315c:	e5900014 	ldr	r0, [r0, #20]
   13160:	e12fff1e 	bx	lr

00013164 <CBcmFrameBuffer::GetSize() const>:
   13164:	e5900018 	ldr	r0, [r0, #24]
   13168:	e12fff1e 	bx	lr

0001316c <CBcmFrameBuffer::UpdatePalette()>:
   1316c:	e5903010 	ldr	r3, [r0, #16]
   13170:	e3530008 	cmp	r3, #8
   13174:	9a000001 	bls	13180 <CBcmFrameBuffer::UpdatePalette()+0x14>
   13178:	e3a00001 	mov	r0, #1
   1317c:	e12fff1e 	bx	lr
   13180:	eaffff11 	b	12dcc <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>

00013184 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)>:
   13184:	e92d4070 	push	{r4, r5, r6, lr}
   13188:	e24dd020 	sub	sp, sp, #32
   1318c:	e28d0008 	add	r0, sp, #8
   13190:	e1a05001 	mov	r5, r1
   13194:	e1a06002 	mov	r6, r2
   13198:	ebffde55 	bl	aaf4 <CBcmPropertyTags::CBcmPropertyTags()>
   1319c:	e3a03008 	mov	r3, #8
   131a0:	e28d200c 	add	r2, sp, #12
   131a4:	e08d0003 	add	r0, sp, r3
   131a8:	e58d3000 	str	r3, [sp]
   131ac:	e59f1044 	ldr	r1, [pc, #68]	; 131f8 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x74>
   131b0:	e3a03014 	mov	r3, #20
   131b4:	e58d5018 	str	r5, [sp, #24]
   131b8:	e58d601c 	str	r6, [sp, #28]
   131bc:	ebffdea3 	bl	ac50 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   131c0:	e2504000 	subs	r4, r0, #0
   131c4:	0a000006 	beq	131e4 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x60>
   131c8:	e59d3018 	ldr	r3, [sp, #24]
   131cc:	e1550003 	cmp	r5, r3
   131d0:	059d401c 	ldreq	r4, [sp, #28]
   131d4:	13a04000 	movne	r4, #0
   131d8:	00444006 	subeq	r4, r4, r6
   131dc:	016f4f14 	clzeq	r4, r4
   131e0:	01a042a4 	lsreq	r4, r4, #5
   131e4:	e28d0008 	add	r0, sp, #8
   131e8:	ebffde47 	bl	ab0c <CBcmPropertyTags::~CBcmPropertyTags()>
   131ec:	e1a00004 	mov	r0, r4
   131f0:	e28dd020 	add	sp, sp, #32
   131f4:	e8bd8070 	pop	{r4, r5, r6, pc}
   131f8:	00048009 	.word	0x00048009

000131fc <CBcmFrameBuffer::WaitForVerticalSync()>:
   131fc:	e92d4010 	push	{r4, lr}
   13200:	e24dd020 	sub	sp, sp, #32
   13204:	e28d000c 	add	r0, sp, #12
   13208:	ebffde39 	bl	aaf4 <CBcmPropertyTags::CBcmPropertyTags()>
   1320c:	e3a03000 	mov	r3, #0
   13210:	e58d3000 	str	r3, [sp]
   13214:	e3a03010 	mov	r3, #16
   13218:	e59f1020 	ldr	r1, [pc, #32]	; 13240 <CBcmFrameBuffer::WaitForVerticalSync()+0x44>
   1321c:	e08d2003 	add	r2, sp, r3
   13220:	e28d000c 	add	r0, sp, #12
   13224:	ebffde89 	bl	ac50 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   13228:	e1a04000 	mov	r4, r0
   1322c:	e28d000c 	add	r0, sp, #12
   13230:	ebffde35 	bl	ab0c <CBcmPropertyTags::~CBcmPropertyTags()>
   13234:	e1a00004 	mov	r0, r4
   13238:	e28dd020 	add	sp, sp, #32
   1323c:	e8bd8010 	pop	{r4, pc}
   13240:	0004800e 	.word	0x0004800e

00013244 <CBcmMailBox::CBcmMailBox(unsigned int)>:
   13244:	e5801000 	str	r1, [r0]
   13248:	e12fff1e 	bx	lr

0001324c <CBcmMailBox::~CBcmMailBox()>:
   1324c:	e12fff1e 	bx	lr

00013250 <CBcmMailBox::Flush()>:
   13250:	e92d4070 	push	{r4, r5, r6, lr}
   13254:	e59f4028 	ldr	r4, [pc, #40]	; 13284 <CBcmMailBox::Flush()+0x34>
   13258:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   1325c:	e3130101 	tst	r3, #1073741824	; 0x40000000
   13260:	18bd8070 	popne	{r4, r5, r6, pc}
   13264:	e3a05014 	mov	r5, #20
   13268:	e1a00005 	mov	r0, r5
   1326c:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
   13270:	ebfff941 	bl	1177c <CTimer::SimpleMsDelay(unsigned int)>
   13274:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   13278:	e3130101 	tst	r3, #1073741824	; 0x40000000
   1327c:	0afffff9 	beq	13268 <CBcmMailBox::Flush()+0x18>
   13280:	e8bd8070 	pop	{r4, r5, r6, pc}
   13284:	2000b000 	.word	0x2000b000

00013288 <CBcmMailBox::Read()>:
   13288:	e5901000 	ldr	r1, [r0]
   1328c:	e59f2020 	ldr	r2, [pc, #32]	; 132b4 <CBcmMailBox::Read()+0x2c>
   13290:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   13294:	e3130101 	tst	r3, #1073741824	; 0x40000000
   13298:	1afffffc 	bne	13290 <CBcmMailBox::Read()+0x8>
   1329c:	e5920880 	ldr	r0, [r2, #2176]	; 0x880
   132a0:	e200300f 	and	r3, r0, #15
   132a4:	e1510003 	cmp	r1, r3
   132a8:	1afffff8 	bne	13290 <CBcmMailBox::Read()+0x8>
   132ac:	e3c0000f 	bic	r0, r0, #15
   132b0:	e12fff1e 	bx	lr
   132b4:	2000b000 	.word	0x2000b000

000132b8 <CBcmMailBox::Write(unsigned int)>:
   132b8:	e92d4070 	push	{r4, r5, r6, lr}
   132bc:	e1a05000 	mov	r5, r0
   132c0:	e1a04001 	mov	r4, r1
   132c4:	e59f2034 	ldr	r2, [pc, #52]	; 13300 <CBcmMailBox::Write(unsigned int)+0x48>
   132c8:	e59238b8 	ldr	r3, [r2, #2232]	; 0x8b8
   132cc:	e3530000 	cmp	r3, #0
   132d0:	bafffffc 	blt	132c8 <CBcmMailBox::Write(unsigned int)+0x10>
   132d4:	e314000f 	tst	r4, #15
   132d8:	0a000003 	beq	132ec <CBcmMailBox::Write(unsigned int)+0x34>
   132dc:	e3a0205b 	mov	r2, #91	; 0x5b
   132e0:	e59f101c 	ldr	r1, [pc, #28]	; 13304 <CBcmMailBox::Write(unsigned int)+0x4c>
   132e4:	e59f001c 	ldr	r0, [pc, #28]	; 13308 <CBcmMailBox::Write(unsigned int)+0x50>
   132e8:	ebffdddd 	bl	aa64 <assertion_failed>
   132ec:	e5952000 	ldr	r2, [r5]
   132f0:	e59f3008 	ldr	r3, [pc, #8]	; 13300 <CBcmMailBox::Write(unsigned int)+0x48>
   132f4:	e1844002 	orr	r4, r4, r2
   132f8:	e58348a0 	str	r4, [r3, #2208]	; 0x8a0
   132fc:	e8bd8070 	pop	{r4, r5, r6, pc}
   13300:	2000b000 	.word	0x2000b000
   13304:	00015410 	.word	0x00015410
   13308:	00015420 	.word	0x00015420

0001330c <CBcmMailBox::WriteRead(unsigned int)>:
   1330c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   13310:	e3a03000 	mov	r3, #0
   13314:	e1a07000 	mov	r7, r0
   13318:	e1a08001 	mov	r8, r1
   1331c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   13320:	e59f5090 	ldr	r5, [pc, #144]	; 133b8 <CBcmMailBox::WriteRead(unsigned int)+0xac>
   13324:	e5950000 	ldr	r0, [r5]
   13328:	e1500003 	cmp	r0, r3
   1332c:	1a00001f 	bne	133b0 <CBcmMailBox::WriteRead(unsigned int)+0xa4>
   13330:	e59f4084 	ldr	r4, [pc, #132]	; 133bc <CBcmMailBox::WriteRead(unsigned int)+0xb0>
   13334:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   13338:	e3130101 	tst	r3, #1073741824	; 0x40000000
   1333c:	1a000006 	bne	1335c <CBcmMailBox::WriteRead(unsigned int)+0x50>
   13340:	e3a06014 	mov	r6, #20
   13344:	e1a00006 	mov	r0, r6
   13348:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
   1334c:	ebfff90a 	bl	1177c <CTimer::SimpleMsDelay(unsigned int)>
   13350:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   13354:	e3130101 	tst	r3, #1073741824	; 0x40000000
   13358:	0afffff9 	beq	13344 <CBcmMailBox::WriteRead(unsigned int)+0x38>
   1335c:	e1a00007 	mov	r0, r7
   13360:	e1a01008 	mov	r1, r8
   13364:	ebffffd3 	bl	132b8 <CBcmMailBox::Write(unsigned int)>
   13368:	e5970000 	ldr	r0, [r7]
   1336c:	e59f2048 	ldr	r2, [pc, #72]	; 133bc <CBcmMailBox::WriteRead(unsigned int)+0xb0>
   13370:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   13374:	e3130101 	tst	r3, #1073741824	; 0x40000000
   13378:	1afffffc 	bne	13370 <CBcmMailBox::WriteRead(unsigned int)+0x64>
   1337c:	e5923880 	ldr	r3, [r2, #2176]	; 0x880
   13380:	e203100f 	and	r1, r3, #15
   13384:	e1510000 	cmp	r1, r0
   13388:	1afffff8 	bne	13370 <CBcmMailBox::WriteRead(unsigned int)+0x64>
   1338c:	e5952000 	ldr	r2, [r5]
   13390:	e3c3400f 	bic	r4, r3, #15
   13394:	e3520000 	cmp	r2, #0
   13398:	0a000000 	beq	133a0 <CBcmMailBox::WriteRead(unsigned int)+0x94>
   1339c:	ebfffccf 	bl	126e0 <LeaveCritical>
   133a0:	e3a03000 	mov	r3, #0
   133a4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   133a8:	e1a00004 	mov	r0, r4
   133ac:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   133b0:	ebfffc9d 	bl	1262c <EnterCritical>
   133b4:	eaffffdd 	b	13330 <CBcmMailBox::WriteRead(unsigned int)+0x24>
   133b8:	000166e0 	.word	0x000166e0
   133bc:	2000b000 	.word	0x2000b000

000133c0 <_GLOBAL__sub_I__ZN11CBcmMailBox10s_SpinLockE>:
   133c0:	e3a02000 	mov	r2, #0
   133c4:	e59f3004 	ldr	r3, [pc, #4]	; 133d0 <_GLOBAL__sub_I__ZN11CBcmMailBox10s_SpinLockE+0x10>
   133c8:	e5832000 	str	r2, [r3]
   133cc:	e12fff1e 	bx	lr
   133d0:	000166e0 	.word	0x000166e0

000133d4 <CCharGenerator::CCharGenerator()>:
   133d4:	e3a03008 	mov	r3, #8
   133d8:	e5803000 	str	r3, [r0]
   133dc:	e12fff1e 	bx	lr

000133e0 <CCharGenerator::~CCharGenerator()>:
   133e0:	e12fff1e 	bx	lr

000133e4 <CCharGenerator::GetCharWidth() const>:
   133e4:	e5900000 	ldr	r0, [r0]
   133e8:	e12fff1e 	bx	lr

000133ec <CCharGenerator::GetCharHeight() const>:
   133ec:	e3a00013 	mov	r0, #19
   133f0:	e12fff1e 	bx	lr

000133f4 <CCharGenerator::GetUnderline() const>:
   133f4:	e3a00010 	mov	r0, #16
   133f8:	e12fff1e 	bx	lr

000133fc <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>:
   133fc:	e6ef1071 	uxtb	r1, r1
   13400:	e92d4070 	push	{r4, r5, r6, lr}
   13404:	e2414021 	sub	r4, r1, #33	; 0x21
   13408:	e35400de 	cmp	r4, #222	; 0xde
   1340c:	8a00000e 	bhi	1344c <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x50>
   13410:	e1a06003 	mov	r6, r3
   13414:	e5903000 	ldr	r3, [r0]
   13418:	e1a05002 	mov	r5, r2
   1341c:	e1530002 	cmp	r3, r2
   13420:	9a00000b 	bls	13454 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x58>
   13424:	e356000f 	cmp	r6, #15
   13428:	8a000007 	bhi	1344c <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x50>
   1342c:	e3a02080 	mov	r2, #128	; 0x80
   13430:	e59f1038 	ldr	r1, [pc, #56]	; 13470 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x74>
   13434:	e0814204 	add	r4, r1, r4, lsl #4
   13438:	e7d43006 	ldrb	r3, [r4, r6]
   1343c:	e0133552 	ands	r3, r3, r2, asr r5
   13440:	13a00001 	movne	r0, #1
   13444:	03a00000 	moveq	r0, #0
   13448:	e8bd8070 	pop	{r4, r5, r6, pc}
   1344c:	e3a00000 	mov	r0, #0
   13450:	e8bd8070 	pop	{r4, r5, r6, pc}
   13454:	e3a0204e 	mov	r2, #78	; 0x4e
   13458:	e59f1014 	ldr	r1, [pc, #20]	; 13474 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x78>
   1345c:	e59f0014 	ldr	r0, [pc, #20]	; 13478 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x7c>
   13460:	ebffdd7f 	bl	aa64 <assertion_failed>
   13464:	e356000f 	cmp	r6, #15
   13468:	9affffef 	bls	1342c <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x30>
   1346c:	eafffff6 	b	1344c <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x50>
   13470:	00015434 	.word	0x00015434
   13474:	00016224 	.word	0x00016224
   13478:	00016238 	.word	0x00016238
   1347c:	00000000 	.word	0x00000000

00013480 <DelayLoop>:
   13480:	e2500001 	subs	r0, r0, #1
   13484:	8afffffd 	bhi	13480 <DelayLoop>
   13488:	e1a0f00e 	mov	pc, lr

0001348c <CGPIOManager::CGPIOManager(CInterruptSystem*)>:
   1348c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   13490:	e3a0e000 	mov	lr, #0
   13494:	e1a03000 	mov	r3, r0
   13498:	e1a0c00e 	mov	ip, lr
   1349c:	e5801000 	str	r1, [r0]
   134a0:	e28020dc 	add	r2, r0, #220	; 0xdc
   134a4:	e5e3e004 	strb	lr, [r3, #4]!
   134a8:	e5a3c004 	str	ip, [r3, #4]!
   134ac:	e1530002 	cmp	r3, r2
   134b0:	1afffffc 	bne	134a8 <CGPIOManager::CGPIOManager(CInterruptSystem*)+0x1c>
   134b4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

000134b8 <CGPIOManager::~CGPIOManager()>:
   134b8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   134bc:	e1a09000 	mov	r9, r0
   134c0:	e3a0802c 	mov	r8, #44	; 0x2c
   134c4:	e59f706c 	ldr	r7, [pc, #108]	; 13538 <CGPIOManager::~CGPIOManager()+0x80>
   134c8:	e59f606c 	ldr	r6, [pc, #108]	; 1353c <CGPIOManager::~CGPIOManager()+0x84>
   134cc:	e2804004 	add	r4, r0, #4
   134d0:	e28050dc 	add	r5, r0, #220	; 0xdc
   134d4:	e5b43004 	ldr	r3, [r4, #4]!
   134d8:	e3530000 	cmp	r3, #0
   134dc:	0a000003 	beq	134f0 <CGPIOManager::~CGPIOManager()+0x38>
   134e0:	e1a02008 	mov	r2, r8
   134e4:	e1a01007 	mov	r1, r7
   134e8:	e1a00006 	mov	r0, r6
   134ec:	ebffdd5c 	bl	aa64 <assertion_failed>
   134f0:	e1540005 	cmp	r4, r5
   134f4:	1afffff6 	bne	134d4 <CGPIOManager::~CGPIOManager()+0x1c>
   134f8:	e5d93004 	ldrb	r3, [r9, #4]
   134fc:	e3530000 	cmp	r3, #0
   13500:	0a000004 	beq	13518 <CGPIOManager::~CGPIOManager()+0x60>
   13504:	e5990000 	ldr	r0, [r9]
   13508:	e3500000 	cmp	r0, #0
   1350c:	0a000003 	beq	13520 <CGPIOManager::~CGPIOManager()+0x68>
   13510:	e3a01034 	mov	r1, #52	; 0x34
   13514:	ebffe41d 	bl	c590 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   13518:	e1a00009 	mov	r0, r9
   1351c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13520:	e59f0018 	ldr	r0, [pc, #24]	; 13540 <CGPIOManager::~CGPIOManager()+0x88>
   13524:	e3a02032 	mov	r2, #50	; 0x32
   13528:	e59f1008 	ldr	r1, [pc, #8]	; 13538 <CGPIOManager::~CGPIOManager()+0x80>
   1352c:	ebffdd4c 	bl	aa64 <assertion_failed>
   13530:	e5990000 	ldr	r0, [r9]
   13534:	eafffff5 	b	13510 <CGPIOManager::~CGPIOManager()+0x58>
   13538:	00016250 	.word	0x00016250
   1353c:	00016260 	.word	0x00016260
   13540:	00016274 	.word	0x00016274

00013544 <CGPIOManager::Initialize()>:
   13544:	e5d03004 	ldrb	r3, [r0, #4]
   13548:	e92d4010 	push	{r4, lr}
   1354c:	e3530000 	cmp	r3, #0
   13550:	e1a04000 	mov	r4, r0
   13554:	1a000009 	bne	13580 <CGPIOManager::Initialize()+0x3c>
   13558:	e5940000 	ldr	r0, [r4]
   1355c:	e3500000 	cmp	r0, #0
   13560:	0a00000d 	beq	1359c <CGPIOManager::Initialize()+0x58>
   13564:	e1a03004 	mov	r3, r4
   13568:	e59f2044 	ldr	r2, [pc, #68]	; 135b4 <CGPIOManager::Initialize()+0x70>
   1356c:	e3a01034 	mov	r1, #52	; 0x34
   13570:	ebffe3cb 	bl	c4a4 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   13574:	e3a00001 	mov	r0, #1
   13578:	e5c40004 	strb	r0, [r4, #4]
   1357c:	e8bd8010 	pop	{r4, pc}
   13580:	e59f0030 	ldr	r0, [pc, #48]	; 135b8 <CGPIOManager::Initialize()+0x74>
   13584:	e3a0203b 	mov	r2, #59	; 0x3b
   13588:	e59f102c 	ldr	r1, [pc, #44]	; 135bc <CGPIOManager::Initialize()+0x78>
   1358c:	ebffdd34 	bl	aa64 <assertion_failed>
   13590:	e5940000 	ldr	r0, [r4]
   13594:	e3500000 	cmp	r0, #0
   13598:	1afffff1 	bne	13564 <CGPIOManager::Initialize()+0x20>
   1359c:	e59f001c 	ldr	r0, [pc, #28]	; 135c0 <CGPIOManager::Initialize()+0x7c>
   135a0:	e3a0203c 	mov	r2, #60	; 0x3c
   135a4:	e59f1010 	ldr	r1, [pc, #16]	; 135bc <CGPIOManager::Initialize()+0x78>
   135a8:	ebffdd2d 	bl	aa64 <assertion_failed>
   135ac:	e5940000 	ldr	r0, [r4]
   135b0:	eaffffeb 	b	13564 <CGPIOManager::Initialize()+0x20>
   135b4:	000137d4 	.word	0x000137d4
   135b8:	00016288 	.word	0x00016288
   135bc:	00016250 	.word	0x00016250
   135c0:	00016274 	.word	0x00016274

000135c4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>:
   135c4:	e5d03004 	ldrb	r3, [r0, #4]
   135c8:	e92d4070 	push	{r4, r5, r6, lr}
   135cc:	e3530000 	cmp	r3, #0
   135d0:	e1a04000 	mov	r4, r0
   135d4:	e1a05001 	mov	r5, r1
   135d8:	0a00000e 	beq	13618 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x54>
   135dc:	e3550000 	cmp	r5, #0
   135e0:	0a000016 	beq	13640 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x7c>
   135e4:	e5956004 	ldr	r6, [r5, #4]
   135e8:	e3560035 	cmp	r6, #53	; 0x35
   135ec:	8a00000e 	bhi	1362c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x68>
   135f0:	e0844106 	add	r4, r4, r6, lsl #2
   135f4:	e5943008 	ldr	r3, [r4, #8]
   135f8:	e3530000 	cmp	r3, #0
   135fc:	0a000003 	beq	13610 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x4c>
   13600:	e3a0204b 	mov	r2, #75	; 0x4b
   13604:	e59f1048 	ldr	r1, [pc, #72]	; 13654 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x90>
   13608:	e59f0048 	ldr	r0, [pc, #72]	; 13658 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x94>
   1360c:	ebffdd14 	bl	aa64 <assertion_failed>
   13610:	e5845008 	str	r5, [r4, #8]
   13614:	e8bd8070 	pop	{r4, r5, r6, pc}
   13618:	e3a02045 	mov	r2, #69	; 0x45
   1361c:	e59f1030 	ldr	r1, [pc, #48]	; 13654 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x90>
   13620:	e59f0034 	ldr	r0, [pc, #52]	; 1365c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x98>
   13624:	ebffdd0e 	bl	aa64 <assertion_failed>
   13628:	eaffffeb 	b	135dc <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x18>
   1362c:	e3a02049 	mov	r2, #73	; 0x49
   13630:	e59f101c 	ldr	r1, [pc, #28]	; 13654 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x90>
   13634:	e59f0024 	ldr	r0, [pc, #36]	; 13660 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x9c>
   13638:	ebffdd09 	bl	aa64 <assertion_failed>
   1363c:	eaffffeb 	b	135f0 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x2c>
   13640:	e3a02047 	mov	r2, #71	; 0x47
   13644:	e59f1008 	ldr	r1, [pc, #8]	; 13654 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x90>
   13648:	e59f0014 	ldr	r0, [pc, #20]	; 13664 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0xa0>
   1364c:	ebffdd04 	bl	aa64 <assertion_failed>
   13650:	eaffffe3 	b	135e4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x20>
   13654:	00016250 	.word	0x00016250
   13658:	00016260 	.word	0x00016260
   1365c:	0001629c 	.word	0x0001629c
   13660:	00014b58 	.word	0x00014b58
   13664:	000162ac 	.word	0x000162ac

00013668 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>:
   13668:	e5d03004 	ldrb	r3, [r0, #4]
   1366c:	e92d4070 	push	{r4, r5, r6, lr}
   13670:	e3530000 	cmp	r3, #0
   13674:	e1a04000 	mov	r4, r0
   13678:	e1a05001 	mov	r5, r1
   1367c:	0a00000b 	beq	136b0 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x48>
   13680:	e3550000 	cmp	r5, #0
   13684:	0a00001b 	beq	136f8 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x90>
   13688:	e5955004 	ldr	r5, [r5, #4]
   1368c:	e3550035 	cmp	r5, #53	; 0x35
   13690:	8a00000b 	bhi	136c4 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x5c>
   13694:	e0844105 	add	r4, r4, r5, lsl #2
   13698:	e5943008 	ldr	r3, [r4, #8]
   1369c:	e3530000 	cmp	r3, #0
   136a0:	0a00000f 	beq	136e4 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x7c>
   136a4:	e3a03000 	mov	r3, #0
   136a8:	e5843008 	str	r3, [r4, #8]
   136ac:	e8bd8070 	pop	{r4, r5, r6, pc}
   136b0:	e3a02052 	mov	r2, #82	; 0x52
   136b4:	e59f1050 	ldr	r1, [pc, #80]	; 1370c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xa4>
   136b8:	e59f0050 	ldr	r0, [pc, #80]	; 13710 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xa8>
   136bc:	ebffdce8 	bl	aa64 <assertion_failed>
   136c0:	eaffffee 	b	13680 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x18>
   136c4:	e3a02056 	mov	r2, #86	; 0x56
   136c8:	e59f103c 	ldr	r1, [pc, #60]	; 1370c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xa4>
   136cc:	e59f0040 	ldr	r0, [pc, #64]	; 13714 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xac>
   136d0:	e0844105 	add	r4, r4, r5, lsl #2
   136d4:	ebffdce2 	bl	aa64 <assertion_failed>
   136d8:	e5943008 	ldr	r3, [r4, #8]
   136dc:	e3530000 	cmp	r3, #0
   136e0:	1affffef 	bne	136a4 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x3c>
   136e4:	e3a02058 	mov	r2, #88	; 0x58
   136e8:	e59f101c 	ldr	r1, [pc, #28]	; 1370c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xa4>
   136ec:	e59f0024 	ldr	r0, [pc, #36]	; 13718 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xb0>
   136f0:	ebffdcdb 	bl	aa64 <assertion_failed>
   136f4:	eaffffea 	b	136a4 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x3c>
   136f8:	e3a02054 	mov	r2, #84	; 0x54
   136fc:	e59f1008 	ldr	r1, [pc, #8]	; 1370c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xa4>
   13700:	e59f0014 	ldr	r0, [pc, #20]	; 1371c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xb4>
   13704:	ebffdcd6 	bl	aa64 <assertion_failed>
   13708:	eaffffde 	b	13688 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x20>
   1370c:	00016250 	.word	0x00016250
   13710:	0001629c 	.word	0x0001629c
   13714:	00014b58 	.word	0x00014b58
   13718:	000162b8 	.word	0x000162b8
   1371c:	000162ac 	.word	0x000162ac

00013720 <CGPIOManager::InterruptHandler()>:
   13720:	e5d03004 	ldrb	r3, [r0, #4]
   13724:	e92d4070 	push	{r4, r5, r6, lr}
   13728:	e3530000 	cmp	r3, #0
   1372c:	e1a05000 	mov	r5, r0
   13730:	0a00001b 	beq	137a4 <CGPIOManager::InterruptHandler()+0x84>
   13734:	e3a04000 	mov	r4, #0
   13738:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   1373c:	e59f2080 	ldr	r2, [pc, #128]	; 137c4 <CGPIOManager::InterruptHandler()+0xa4>
   13740:	e5923040 	ldr	r3, [r2, #64]	; 0x40
   13744:	ea000005 	b	13760 <CGPIOManager::InterruptHandler()+0x40>
   13748:	e2844001 	add	r4, r4, #1
   1374c:	e314001f 	tst	r4, #31
   13750:	11a030a3 	lsrne	r3, r3, #1
   13754:	05923044 	ldreq	r3, [r2, #68]	; 0x44
   13758:	e3540036 	cmp	r4, #54	; 0x36
   1375c:	0a00000d 	beq	13798 <CGPIOManager::InterruptHandler()+0x78>
   13760:	e3130001 	tst	r3, #1
   13764:	0afffff7 	beq	13748 <CGPIOManager::InterruptHandler()+0x28>
   13768:	e3a03001 	mov	r3, #1
   1376c:	e2842002 	add	r2, r4, #2
   13770:	e7950102 	ldr	r0, [r5, r2, lsl #2]
   13774:	e204501f 	and	r5, r4, #31
   13778:	e3500000 	cmp	r0, #0
   1377c:	e1a05513 	lsl	r5, r3, r5
   13780:	0a00000c 	beq	137b8 <CGPIOManager::InterruptHandler()+0x98>
   13784:	ebffe278 	bl	c16c <CGPIOPin::InterruptHandler()>
   13788:	e59f3038 	ldr	r3, [pc, #56]	; 137c8 <CGPIOManager::InterruptHandler()+0xa8>
   1378c:	e08342a4 	add	r4, r3, r4, lsr #5
   13790:	e1a04104 	lsl	r4, r4, #2
   13794:	e5845000 	str	r5, [r4]
   13798:	e3a03000 	mov	r3, #0
   1379c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   137a0:	e8bd8070 	pop	{r4, r5, r6, pc}
   137a4:	e3a0205e 	mov	r2, #94	; 0x5e
   137a8:	e59f101c 	ldr	r1, [pc, #28]	; 137cc <CGPIOManager::InterruptHandler()+0xac>
   137ac:	e59f001c 	ldr	r0, [pc, #28]	; 137d0 <CGPIOManager::InterruptHandler()+0xb0>
   137b0:	ebffdcab 	bl	aa64 <assertion_failed>
   137b4:	eaffffde 	b	13734 <CGPIOManager::InterruptHandler()+0x14>
   137b8:	e1a00004 	mov	r0, r4
   137bc:	ebffe297 	bl	c220 <CGPIOPin::DisableAllInterrupts(unsigned int)>
   137c0:	eafffff0 	b	13788 <CGPIOManager::InterruptHandler()+0x68>
   137c4:	20200000 	.word	0x20200000
   137c8:	08080010 	.word	0x08080010
   137cc:	00016250 	.word	0x00016250
   137d0:	0001629c 	.word	0x0001629c

000137d4 <CGPIOManager::InterruptStub(void*)>:
   137d4:	e92d4010 	push	{r4, lr}
   137d8:	e2504000 	subs	r4, r0, #0
   137dc:	0a000002 	beq	137ec <CGPIOManager::InterruptStub(void*)+0x18>
   137e0:	e1a00004 	mov	r0, r4
   137e4:	e8bd4010 	pop	{r4, lr}
   137e8:	eaffffcc 	b	13720 <CGPIOManager::InterruptHandler()>
   137ec:	e59f0014 	ldr	r0, [pc, #20]	; 13808 <CGPIOManager::InterruptStub(void*)+0x34>
   137f0:	e3a0208a 	mov	r2, #138	; 0x8a
   137f4:	e59f1010 	ldr	r1, [pc, #16]	; 1380c <CGPIOManager::InterruptStub(void*)+0x38>
   137f8:	ebffdc99 	bl	aa64 <assertion_failed>
   137fc:	e1a00004 	mov	r0, r4
   13800:	e8bd4010 	pop	{r4, lr}
   13804:	eaffffc5 	b	13720 <CGPIOManager::InterruptHandler()>
   13808:	000162cc 	.word	0x000162cc
   1380c:	00016250 	.word	0x00016250

00013810 <CPtrList::CPtrList()>:
   13810:	e3a02000 	mov	r2, #0
   13814:	e5802000 	str	r2, [r0]
   13818:	e12fff1e 	bx	lr

0001381c <CPtrList::~CPtrList()>:
   1381c:	e5903000 	ldr	r3, [r0]
   13820:	e92d4010 	push	{r4, lr}
   13824:	e3530000 	cmp	r3, #0
   13828:	e1a04000 	mov	r4, r0
   1382c:	0a000003 	beq	13840 <CPtrList::~CPtrList()+0x24>
   13830:	e3a0202a 	mov	r2, #42	; 0x2a
   13834:	e59f100c 	ldr	r1, [pc, #12]	; 13848 <CPtrList::~CPtrList()+0x2c>
   13838:	e59f000c 	ldr	r0, [pc, #12]	; 1384c <CPtrList::~CPtrList()+0x30>
   1383c:	ebffdc88 	bl	aa64 <assertion_failed>
   13840:	e1a00004 	mov	r0, r4
   13844:	e8bd8010 	pop	{r4, pc}
   13848:	000162d8 	.word	0x000162d8
   1384c:	000162e4 	.word	0x000162e4

00013850 <CPtrList::GetFirst()>:
   13850:	e5900000 	ldr	r0, [r0]
   13854:	e12fff1e 	bx	lr

00013858 <CPtrList::GetNext(TPtrListElement*)>:
   13858:	e92d4010 	push	{r4, lr}
   1385c:	e2514000 	subs	r4, r1, #0
   13860:	0a000009 	beq	1388c <CPtrList::GetNext(TPtrListElement*)+0x34>
   13864:	e59f3034 	ldr	r3, [pc, #52]	; 138a0 <CPtrList::GetNext(TPtrListElement*)+0x48>
   13868:	e5942000 	ldr	r2, [r4]
   1386c:	e1520003 	cmp	r2, r3
   13870:	0a000003 	beq	13884 <CPtrList::GetNext(TPtrListElement*)+0x2c>
   13874:	e3a02035 	mov	r2, #53	; 0x35
   13878:	e59f1024 	ldr	r1, [pc, #36]	; 138a4 <CPtrList::GetNext(TPtrListElement*)+0x4c>
   1387c:	e59f0024 	ldr	r0, [pc, #36]	; 138a8 <CPtrList::GetNext(TPtrListElement*)+0x50>
   13880:	ebffdc77 	bl	aa64 <assertion_failed>
   13884:	e5940008 	ldr	r0, [r4, #8]
   13888:	e8bd8010 	pop	{r4, pc}
   1388c:	e3a02034 	mov	r2, #52	; 0x34
   13890:	e59f100c 	ldr	r1, [pc, #12]	; 138a4 <CPtrList::GetNext(TPtrListElement*)+0x4c>
   13894:	e59f0010 	ldr	r0, [pc, #16]	; 138ac <CPtrList::GetNext(TPtrListElement*)+0x54>
   13898:	ebffdc71 	bl	aa64 <assertion_failed>
   1389c:	eafffff0 	b	13864 <CPtrList::GetNext(TPtrListElement*)+0xc>
   138a0:	504c4d43 	.word	0x504c4d43
   138a4:	000162d8 	.word	0x000162d8
   138a8:	00016304 	.word	0x00016304
   138ac:	000162f4 	.word	0x000162f4

000138b0 <CPtrList::GetPtr(TPtrListElement*)>:
   138b0:	e92d4010 	push	{r4, lr}
   138b4:	e2514000 	subs	r4, r1, #0
   138b8:	0a000009 	beq	138e4 <CPtrList::GetPtr(TPtrListElement*)+0x34>
   138bc:	e59f3034 	ldr	r3, [pc, #52]	; 138f8 <CPtrList::GetPtr(TPtrListElement*)+0x48>
   138c0:	e5942000 	ldr	r2, [r4]
   138c4:	e1520003 	cmp	r2, r3
   138c8:	0a000003 	beq	138dc <CPtrList::GetPtr(TPtrListElement*)+0x2c>
   138cc:	e3a0203d 	mov	r2, #61	; 0x3d
   138d0:	e59f1024 	ldr	r1, [pc, #36]	; 138fc <CPtrList::GetPtr(TPtrListElement*)+0x4c>
   138d4:	e59f0024 	ldr	r0, [pc, #36]	; 13900 <CPtrList::GetPtr(TPtrListElement*)+0x50>
   138d8:	ebffdc61 	bl	aa64 <assertion_failed>
   138dc:	e594000c 	ldr	r0, [r4, #12]
   138e0:	e8bd8010 	pop	{r4, pc}
   138e4:	e3a0203c 	mov	r2, #60	; 0x3c
   138e8:	e59f100c 	ldr	r1, [pc, #12]	; 138fc <CPtrList::GetPtr(TPtrListElement*)+0x4c>
   138ec:	e59f0010 	ldr	r0, [pc, #16]	; 13904 <CPtrList::GetPtr(TPtrListElement*)+0x54>
   138f0:	ebffdc5b 	bl	aa64 <assertion_failed>
   138f4:	eafffff0 	b	138bc <CPtrList::GetPtr(TPtrListElement*)+0xc>
   138f8:	504c4d43 	.word	0x504c4d43
   138fc:	000162d8 	.word	0x000162d8
   13900:	00016304 	.word	0x00016304
   13904:	000162f4 	.word	0x000162f4

00013908 <CPtrList::InsertBefore(TPtrListElement*, void*)>:
   13908:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1390c:	e1a06000 	mov	r6, r0
   13910:	e3a00010 	mov	r0, #16
   13914:	e1a07002 	mov	r7, r2
   13918:	e1a04001 	mov	r4, r1
   1391c:	ebfffb9c 	bl	12794 <operator new(unsigned int)>
   13920:	e5962000 	ldr	r2, [r6]
   13924:	e59f30c8 	ldr	r3, [pc, #200]	; 139f4 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xec>
   13928:	e3520000 	cmp	r2, #0
   1392c:	e1a05000 	mov	r5, r0
   13930:	e580700c 	str	r7, [r0, #12]
   13934:	e5803000 	str	r3, [r0]
   13938:	0a000023 	beq	139cc <CPtrList::InsertBefore(TPtrListElement*, void*)+0xc4>
   1393c:	e3540000 	cmp	r4, #0
   13940:	0a000026 	beq	139e0 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd8>
   13944:	e59f30a8 	ldr	r3, [pc, #168]	; 139f4 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xec>
   13948:	e5942000 	ldr	r2, [r4]
   1394c:	e1520003 	cmp	r2, r3
   13950:	0a000003 	beq	13964 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x5c>
   13954:	e3a0204e 	mov	r2, #78	; 0x4e
   13958:	e59f1098 	ldr	r1, [pc, #152]	; 139f8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf0>
   1395c:	e59f0098 	ldr	r0, [pc, #152]	; 139fc <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf4>
   13960:	ebffdc3f 	bl	aa64 <assertion_failed>
   13964:	e5963000 	ldr	r3, [r6]
   13968:	e1540003 	cmp	r4, r3
   1396c:	0a000010 	beq	139b4 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xac>
   13970:	e5943004 	ldr	r3, [r4, #4]
   13974:	e5854008 	str	r4, [r5, #8]
   13978:	e3530000 	cmp	r3, #0
   1397c:	e5853004 	str	r3, [r5, #4]
   13980:	0a000009 	beq	139ac <CPtrList::InsertBefore(TPtrListElement*, void*)+0xa4>
   13984:	e59f2068 	ldr	r2, [pc, #104]	; 139f4 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xec>
   13988:	e5931000 	ldr	r1, [r3]
   1398c:	e1510002 	cmp	r1, r2
   13990:	0a000004 	beq	139a8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xa0>
   13994:	e3a02060 	mov	r2, #96	; 0x60
   13998:	e59f1058 	ldr	r1, [pc, #88]	; 139f8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf0>
   1399c:	e59f005c 	ldr	r0, [pc, #92]	; 13a00 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf8>
   139a0:	ebffdc2f 	bl	aa64 <assertion_failed>
   139a4:	e5943004 	ldr	r3, [r4, #4]
   139a8:	e5835008 	str	r5, [r3, #8]
   139ac:	e5845004 	str	r5, [r4, #4]
   139b0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   139b4:	e3a03000 	mov	r3, #0
   139b8:	e5845004 	str	r5, [r4, #4]
   139bc:	e5854008 	str	r4, [r5, #8]
   139c0:	e5865000 	str	r5, [r6]
   139c4:	e5853004 	str	r3, [r5, #4]
   139c8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   139cc:	e3a0204c 	mov	r2, #76	; 0x4c
   139d0:	e59f1020 	ldr	r1, [pc, #32]	; 139f8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf0>
   139d4:	e59f0028 	ldr	r0, [pc, #40]	; 13a04 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xfc>
   139d8:	ebffdc21 	bl	aa64 <assertion_failed>
   139dc:	eaffffd6 	b	1393c <CPtrList::InsertBefore(TPtrListElement*, void*)+0x34>
   139e0:	e3a0204d 	mov	r2, #77	; 0x4d
   139e4:	e59f100c 	ldr	r1, [pc, #12]	; 139f8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf0>
   139e8:	e59f0018 	ldr	r0, [pc, #24]	; 13a08 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x100>
   139ec:	ebffdc1c 	bl	aa64 <assertion_failed>
   139f0:	eaffffd3 	b	13944 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x3c>
   139f4:	504c4d43 	.word	0x504c4d43
   139f8:	000162d8 	.word	0x000162d8
   139fc:	00016344 	.word	0x00016344
   13a00:	00016368 	.word	0x00016368
   13a04:	00016328 	.word	0x00016328
   13a08:	00016338 	.word	0x00016338

00013a0c <CPtrList::InsertAfter(TPtrListElement*, void*)>:
   13a0c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   13a10:	e1a06000 	mov	r6, r0
   13a14:	e1a05001 	mov	r5, r1
   13a18:	e3a00010 	mov	r0, #16
   13a1c:	e1a07002 	mov	r7, r2
   13a20:	ebfffb5b 	bl	12794 <operator new(unsigned int)>
   13a24:	e59f30c0 	ldr	r3, [pc, #192]	; 13aec <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe0>
   13a28:	e3550000 	cmp	r5, #0
   13a2c:	e5803000 	str	r3, [r0]
   13a30:	e1a04000 	mov	r4, r0
   13a34:	e580700c 	str	r7, [r0, #12]
   13a38:	e5963000 	ldr	r3, [r6]
   13a3c:	0a00001a 	beq	13aac <CPtrList::InsertAfter(TPtrListElement*, void*)+0xa0>
   13a40:	e3530000 	cmp	r3, #0
   13a44:	0a000023 	beq	13ad8 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xcc>
   13a48:	e59f309c 	ldr	r3, [pc, #156]	; 13aec <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe0>
   13a4c:	e5952000 	ldr	r2, [r5]
   13a50:	e1520003 	cmp	r2, r3
   13a54:	0a000003 	beq	13a68 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x5c>
   13a58:	e3a0207e 	mov	r2, #126	; 0x7e
   13a5c:	e59f108c 	ldr	r1, [pc, #140]	; 13af0 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe4>
   13a60:	e59f008c 	ldr	r0, [pc, #140]	; 13af4 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe8>
   13a64:	ebffdbfe 	bl	aa64 <assertion_failed>
   13a68:	e5953008 	ldr	r3, [r5, #8]
   13a6c:	e5845004 	str	r5, [r4, #4]
   13a70:	e3530000 	cmp	r3, #0
   13a74:	e5843008 	str	r3, [r4, #8]
   13a78:	0a000009 	beq	13aa4 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x98>
   13a7c:	e59f2068 	ldr	r2, [pc, #104]	; 13aec <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe0>
   13a80:	e5931000 	ldr	r1, [r3]
   13a84:	e1510002 	cmp	r1, r2
   13a88:	0a000004 	beq	13aa0 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x94>
   13a8c:	e3a02085 	mov	r2, #133	; 0x85
   13a90:	e59f1058 	ldr	r1, [pc, #88]	; 13af0 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe4>
   13a94:	e59f005c 	ldr	r0, [pc, #92]	; 13af8 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xec>
   13a98:	ebffdbf1 	bl	aa64 <assertion_failed>
   13a9c:	e5953008 	ldr	r3, [r5, #8]
   13aa0:	e5834004 	str	r4, [r3, #4]
   13aa4:	e5854008 	str	r4, [r5, #8]
   13aa8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   13aac:	e3530000 	cmp	r3, #0
   13ab0:	0a000003 	beq	13ac4 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xb8>
   13ab4:	e3a02074 	mov	r2, #116	; 0x74
   13ab8:	e59f1030 	ldr	r1, [pc, #48]	; 13af0 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe4>
   13abc:	e59f0038 	ldr	r0, [pc, #56]	; 13afc <CPtrList::InsertAfter(TPtrListElement*, void*)+0xf0>
   13ac0:	ebffdbe7 	bl	aa64 <assertion_failed>
   13ac4:	e3a03000 	mov	r3, #0
   13ac8:	e5864000 	str	r4, [r6]
   13acc:	e5843004 	str	r3, [r4, #4]
   13ad0:	e5843008 	str	r3, [r4, #8]
   13ad4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   13ad8:	e3a0207d 	mov	r2, #125	; 0x7d
   13adc:	e59f100c 	ldr	r1, [pc, #12]	; 13af0 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe4>
   13ae0:	e59f0018 	ldr	r0, [pc, #24]	; 13b00 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xf4>
   13ae4:	ebffdbde 	bl	aa64 <assertion_failed>
   13ae8:	eaffffd6 	b	13a48 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x3c>
   13aec:	504c4d43 	.word	0x504c4d43
   13af0:	000162d8 	.word	0x000162d8
   13af4:	00016390 	.word	0x00016390
   13af8:	000163b4 	.word	0x000163b4
   13afc:	000162e4 	.word	0x000162e4
   13b00:	00016328 	.word	0x00016328

00013b04 <CPtrList::Remove(TPtrListElement*)>:
   13b04:	e92d4070 	push	{r4, r5, r6, lr}
   13b08:	e2514000 	subs	r4, r1, #0
   13b0c:	e1a05000 	mov	r5, r0
   13b10:	0a00003c 	beq	13c08 <CPtrList::Remove(TPtrListElement*)+0x104>
   13b14:	e59f3118 	ldr	r3, [pc, #280]	; 13c34 <CPtrList::Remove(TPtrListElement*)+0x130>
   13b18:	e5942000 	ldr	r2, [r4]
   13b1c:	e1520003 	cmp	r2, r3
   13b20:	0a000003 	beq	13b34 <CPtrList::Remove(TPtrListElement*)+0x30>
   13b24:	e3a02090 	mov	r2, #144	; 0x90
   13b28:	e59f1108 	ldr	r1, [pc, #264]	; 13c38 <CPtrList::Remove(TPtrListElement*)+0x134>
   13b2c:	e59f0108 	ldr	r0, [pc, #264]	; 13c3c <CPtrList::Remove(TPtrListElement*)+0x138>
   13b30:	ebffdbcb 	bl	aa64 <assertion_failed>
   13b34:	e5953000 	ldr	r3, [r5]
   13b38:	e1540003 	cmp	r4, r3
   13b3c:	0a000021 	beq	13bc8 <CPtrList::Remove(TPtrListElement*)+0xc4>
   13b40:	e5943004 	ldr	r3, [r4, #4]
   13b44:	e3530000 	cmp	r3, #0
   13b48:	0a000033 	beq	13c1c <CPtrList::Remove(TPtrListElement*)+0x118>
   13b4c:	e59f20e0 	ldr	r2, [pc, #224]	; 13c34 <CPtrList::Remove(TPtrListElement*)+0x130>
   13b50:	e5931000 	ldr	r1, [r3]
   13b54:	e1510002 	cmp	r1, r2
   13b58:	0a000004 	beq	13b70 <CPtrList::Remove(TPtrListElement*)+0x6c>
   13b5c:	e3a0209f 	mov	r2, #159	; 0x9f
   13b60:	e59f10d0 	ldr	r1, [pc, #208]	; 13c38 <CPtrList::Remove(TPtrListElement*)+0x134>
   13b64:	e59f00d4 	ldr	r0, [pc, #212]	; 13c40 <CPtrList::Remove(TPtrListElement*)+0x13c>
   13b68:	ebffdbbd 	bl	aa64 <assertion_failed>
   13b6c:	e5943004 	ldr	r3, [r4, #4]
   13b70:	e5942008 	ldr	r2, [r4, #8]
   13b74:	e5832008 	str	r2, [r3, #8]
   13b78:	e5942008 	ldr	r2, [r4, #8]
   13b7c:	e3520000 	cmp	r2, #0
   13b80:	0a00000a 	beq	13bb0 <CPtrList::Remove(TPtrListElement*)+0xac>
   13b84:	e59f10a8 	ldr	r1, [pc, #168]	; 13c34 <CPtrList::Remove(TPtrListElement*)+0x130>
   13b88:	e5920000 	ldr	r0, [r2]
   13b8c:	e1500001 	cmp	r0, r1
   13b90:	0a000005 	beq	13bac <CPtrList::Remove(TPtrListElement*)+0xa8>
   13b94:	e3a020a4 	mov	r2, #164	; 0xa4
   13b98:	e59f1098 	ldr	r1, [pc, #152]	; 13c38 <CPtrList::Remove(TPtrListElement*)+0x134>
   13b9c:	e59f00a0 	ldr	r0, [pc, #160]	; 13c44 <CPtrList::Remove(TPtrListElement*)+0x140>
   13ba0:	ebffdbaf 	bl	aa64 <assertion_failed>
   13ba4:	e5942008 	ldr	r2, [r4, #8]
   13ba8:	e5943004 	ldr	r3, [r4, #4]
   13bac:	e5823004 	str	r3, [r2, #4]
   13bb0:	e3a03000 	mov	r3, #0
   13bb4:	e1a00004 	mov	r0, r4
   13bb8:	e5843000 	str	r3, [r4]
   13bbc:	e3a01010 	mov	r1, #16
   13bc0:	e8bd4070 	pop	{r4, r5, r6, lr}
   13bc4:	eafffaf6 	b	127a4 <operator delete(void*, unsigned int)>
   13bc8:	e5943008 	ldr	r3, [r4, #8]
   13bcc:	e3530000 	cmp	r3, #0
   13bd0:	e5853000 	str	r3, [r5]
   13bd4:	0afffff5 	beq	13bb0 <CPtrList::Remove(TPtrListElement*)+0xac>
   13bd8:	e59f2054 	ldr	r2, [pc, #84]	; 13c34 <CPtrList::Remove(TPtrListElement*)+0x130>
   13bdc:	e5931000 	ldr	r1, [r3]
   13be0:	e1510002 	cmp	r1, r2
   13be4:	0a000004 	beq	13bfc <CPtrList::Remove(TPtrListElement*)+0xf8>
   13be8:	e3a02098 	mov	r2, #152	; 0x98
   13bec:	e59f1044 	ldr	r1, [pc, #68]	; 13c38 <CPtrList::Remove(TPtrListElement*)+0x134>
   13bf0:	e59f004c 	ldr	r0, [pc, #76]	; 13c44 <CPtrList::Remove(TPtrListElement*)+0x140>
   13bf4:	ebffdb9a 	bl	aa64 <assertion_failed>
   13bf8:	e5943008 	ldr	r3, [r4, #8]
   13bfc:	e3a02000 	mov	r2, #0
   13c00:	e5832004 	str	r2, [r3, #4]
   13c04:	eaffffe9 	b	13bb0 <CPtrList::Remove(TPtrListElement*)+0xac>
   13c08:	e3a0208f 	mov	r2, #143	; 0x8f
   13c0c:	e59f1024 	ldr	r1, [pc, #36]	; 13c38 <CPtrList::Remove(TPtrListElement*)+0x134>
   13c10:	e59f0030 	ldr	r0, [pc, #48]	; 13c48 <CPtrList::Remove(TPtrListElement*)+0x144>
   13c14:	ebffdb92 	bl	aa64 <assertion_failed>
   13c18:	eaffffbd 	b	13b14 <CPtrList::Remove(TPtrListElement*)+0x10>
   13c1c:	e3a0209e 	mov	r2, #158	; 0x9e
   13c20:	e59f1010 	ldr	r1, [pc, #16]	; 13c38 <CPtrList::Remove(TPtrListElement*)+0x134>
   13c24:	e59f0020 	ldr	r0, [pc, #32]	; 13c4c <CPtrList::Remove(TPtrListElement*)+0x148>
   13c28:	ebffdb8d 	bl	aa64 <assertion_failed>
   13c2c:	e5943004 	ldr	r3, [r4, #4]
   13c30:	eaffffc5 	b	13b4c <CPtrList::Remove(TPtrListElement*)+0x48>
   13c34:	504c4d43 	.word	0x504c4d43
   13c38:	000162d8 	.word	0x000162d8
   13c3c:	00016304 	.word	0x00016304
   13c40:	00016424 	.word	0x00016424
   13c44:	000163e0 	.word	0x000163e0
   13c48:	000162f4 	.word	0x000162f4
   13c4c:	0001640c 	.word	0x0001640c

00013c50 <CPtrList::Find(void*)>:
   13c50:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13c54:	e5904000 	ldr	r4, [r0]
   13c58:	e3540000 	cmp	r4, #0
   13c5c:	0a000014 	beq	13cb4 <CPtrList::Find(void*)+0x64>
   13c60:	e1a05001 	mov	r5, r1
   13c64:	e3a090b3 	mov	r9, #179	; 0xb3
   13c68:	e59f6050 	ldr	r6, [pc, #80]	; 13cc0 <CPtrList::Find(void*)+0x70>
   13c6c:	e59f8050 	ldr	r8, [pc, #80]	; 13cc4 <CPtrList::Find(void*)+0x74>
   13c70:	e59f7050 	ldr	r7, [pc, #80]	; 13cc8 <CPtrList::Find(void*)+0x78>
   13c74:	ea000002 	b	13c84 <CPtrList::Find(void*)+0x34>
   13c78:	e5944008 	ldr	r4, [r4, #8]
   13c7c:	e3540000 	cmp	r4, #0
   13c80:	0a00000b 	beq	13cb4 <CPtrList::Find(void*)+0x64>
   13c84:	e5943000 	ldr	r3, [r4]
   13c88:	e1530006 	cmp	r3, r6
   13c8c:	0a000003 	beq	13ca0 <CPtrList::Find(void*)+0x50>
   13c90:	e1a02009 	mov	r2, r9
   13c94:	e1a01008 	mov	r1, r8
   13c98:	e1a00007 	mov	r0, r7
   13c9c:	ebffdb70 	bl	aa64 <assertion_failed>
   13ca0:	e594300c 	ldr	r3, [r4, #12]
   13ca4:	e1530005 	cmp	r3, r5
   13ca8:	1afffff2 	bne	13c78 <CPtrList::Find(void*)+0x28>
   13cac:	e1a00004 	mov	r0, r4
   13cb0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13cb4:	e3a04000 	mov	r4, #0
   13cb8:	e1a00004 	mov	r0, r4
   13cbc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13cc0:	504c4d43 	.word	0x504c4d43
   13cc4:	000162d8 	.word	0x000162d8
   13cc8:	00016304 	.word	0x00016304

00013ccc <CExceptionHandler::CExceptionHandler()>:
   13ccc:	e92d4070 	push	{r4, r5, r6, lr}
   13cd0:	e59f506c 	ldr	r5, [pc, #108]	; 13d44 <CExceptionHandler::CExceptionHandler()+0x78>
   13cd4:	e1a04000 	mov	r4, r0
   13cd8:	e5953000 	ldr	r3, [r5]
   13cdc:	e3530000 	cmp	r3, #0
   13ce0:	0a000003 	beq	13cf4 <CExceptionHandler::CExceptionHandler()+0x28>
   13ce4:	e3a02030 	mov	r2, #48	; 0x30
   13ce8:	e59f1058 	ldr	r1, [pc, #88]	; 13d48 <CExceptionHandler::CExceptionHandler()+0x7c>
   13cec:	e59f0058 	ldr	r0, [pc, #88]	; 13d4c <CExceptionHandler::CExceptionHandler()+0x80>
   13cf0:	ebffdb5b 	bl	aa64 <assertion_failed>
   13cf4:	e3a00000 	mov	r0, #0
   13cf8:	e59f1050 	ldr	r1, [pc, #80]	; 13d50 <CExceptionHandler::CExceptionHandler()+0x84>
   13cfc:	e59f2050 	ldr	r2, [pc, #80]	; 13d54 <CExceptionHandler::CExceptionHandler()+0x88>
   13d00:	e59f3050 	ldr	r3, [pc, #80]	; 13d58 <CExceptionHandler::CExceptionHandler()+0x8c>
   13d04:	e1a01141 	asr	r1, r1, #2
   13d08:	e1a02142 	asr	r2, r2, #2
   13d0c:	e1a03143 	asr	r3, r3, #2
   13d10:	e2411002 	sub	r1, r1, #2
   13d14:	e2422002 	sub	r2, r2, #2
   13d18:	e2433002 	sub	r3, r3, #2
   13d1c:	e38114ea 	orr	r1, r1, #-369098752	; 0xea000000
   13d20:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
   13d24:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
   13d28:	e5854000 	str	r4, [r5]
   13d2c:	e5801004 	str	r1, [r0, #4]
   13d30:	e580200c 	str	r2, [r0, #12]
   13d34:	e5803010 	str	r3, [r0, #16]
   13d38:	ebfffa8d 	bl	12774 <SyncDataAndInstructionCache>
   13d3c:	e1a00004 	mov	r0, r4
   13d40:	e8bd8070 	pop	{r4, r5, r6, pc}
   13d44:	000166e4 	.word	0x000166e4
   13d48:	00016458 	.word	0x00016458
   13d4c:	000150b4 	.word	0x000150b4
   13d50:	00012200 	.word	0x00012200
   13d54:	00012160 	.word	0x00012160
   13d58:	000121a8 	.word	0x000121a8

00013d5c <CExceptionHandler::~CExceptionHandler()>:
   13d5c:	e3a02000 	mov	r2, #0
   13d60:	e59f3004 	ldr	r3, [pc, #4]	; 13d6c <CExceptionHandler::~CExceptionHandler()+0x10>
   13d64:	e5832000 	str	r2, [r3]
   13d68:	e12fff1e 	bx	lr
   13d6c:	000166e4 	.word	0x000166e4

00013d70 <CExceptionHandler::Throw(unsigned int)>:
   13d70:	e92d4010 	push	{r4, lr}
   13d74:	e1a04001 	mov	r4, r1
   13d78:	e24dd008 	sub	sp, sp, #8
   13d7c:	ebffe461 	bl	cf08 <CLogger::Get()>
   13d80:	e59f201c 	ldr	r2, [pc, #28]	; 13da4 <CExceptionHandler::Throw(unsigned int)+0x34>
   13d84:	e59f301c 	ldr	r3, [pc, #28]	; 13da8 <CExceptionHandler::Throw(unsigned int)+0x38>
   13d88:	e7921104 	ldr	r1, [r2, r4, lsl #2]
   13d8c:	e3a02000 	mov	r2, #0
   13d90:	e58d1000 	str	r1, [sp]
   13d94:	e59f1010 	ldr	r1, [pc, #16]	; 13dac <CExceptionHandler::Throw(unsigned int)+0x3c>
   13d98:	ebffe603 	bl	d5ac <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13d9c:	e28dd008 	add	sp, sp, #8
   13da0:	e8bd8010 	pop	{r4, pc}
   13da4:	00016610 	.word	0x00016610
   13da8:	00016470 	.word	0x00016470
   13dac:	00016450 	.word	0x00016450

00013db0 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>:
   13db0:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   13db4:	e3510002 	cmp	r1, #2
   13db8:	e24dd024 	sub	sp, sp, #36	; 0x24
   13dbc:	e1a05001 	mov	r5, r1
   13dc0:	e1a04002 	mov	r4, r2
   13dc4:	0a000028 	beq	13e6c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xbc>
   13dc8:	e3510003 	cmp	r1, #3
   13dcc:	0a000020 	beq	13e54 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xa4>
   13dd0:	e3a08000 	mov	r8, #0
   13dd4:	e1a09008 	mov	r9, r8
   13dd8:	e3540000 	cmp	r4, #0
   13ddc:	0a000025 	beq	13e78 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xc8>
   13de0:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   13de4:	e5947048 	ldr	r7, [r4, #72]	; 0x48
   13de8:	e203301f 	and	r3, r3, #31
   13dec:	e3530011 	cmp	r3, #17
   13df0:	e5946044 	ldr	r6, [r4, #68]	; 0x44
   13df4:	0a000019 	beq	13e60 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xb0>
   13df8:	e3530012 	cmp	r3, #18
   13dfc:	089400c0 	ldmeq	r4, {r6, r7}
   13e00:	e59f1084 	ldr	r1, [pc, #132]	; 13e8c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xdc>
   13e04:	e1a00006 	mov	r0, r6
   13e08:	ebffdc1e 	bl	ae88 <debug_stacktrace(unsigned int const*, char const*)>
   13e0c:	ebffe43d 	bl	cf08 <CLogger::Get()>
   13e10:	e59f3078 	ldr	r3, [pc, #120]	; 13e90 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe0>
   13e14:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
   13e18:	e7931105 	ldr	r1, [r3, r5, lsl #2]
   13e1c:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   13e20:	e58d1000 	str	r1, [sp]
   13e24:	e58d2018 	str	r2, [sp, #24]
   13e28:	e58d3004 	str	r3, [sp, #4]
   13e2c:	e58d7014 	str	r7, [sp, #20]
   13e30:	e58d6010 	str	r6, [sp, #16]
   13e34:	e58d800c 	str	r8, [sp, #12]
   13e38:	e58d9008 	str	r9, [sp, #8]
   13e3c:	e59f3050 	ldr	r3, [pc, #80]	; 13e94 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe4>
   13e40:	e3a02000 	mov	r2, #0
   13e44:	e59f1040 	ldr	r1, [pc, #64]	; 13e8c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xdc>
   13e48:	ebffe5d7 	bl	d5ac <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13e4c:	e28dd024 	add	sp, sp, #36	; 0x24
   13e50:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   13e54:	ee159f10 	mrc	15, 0, r9, cr5, cr0, {0}
   13e58:	ee168f10 	mrc	15, 0, r8, cr6, cr0, {0}
   13e5c:	eaffffdd 	b	13dd8 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x28>
   13e60:	e594700c 	ldr	r7, [r4, #12]
   13e64:	e5946008 	ldr	r6, [r4, #8]
   13e68:	eaffffe4 	b	13e00 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x50>
   13e6c:	ee159f30 	mrc	15, 0, r9, cr5, cr0, {1}
   13e70:	ee168f50 	mrc	15, 0, r8, cr6, cr0, {2}
   13e74:	eaffffd7 	b	13dd8 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x28>
   13e78:	e3a02069 	mov	r2, #105	; 0x69
   13e7c:	e59f1014 	ldr	r1, [pc, #20]	; 13e98 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe8>
   13e80:	e59f0014 	ldr	r0, [pc, #20]	; 13e9c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xec>
   13e84:	ebffdaf6 	bl	aa64 <assertion_failed>
   13e88:	eaffffd4 	b	13de0 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x30>
   13e8c:	00016450 	.word	0x00016450
   13e90:	00016610 	.word	0x00016610
   13e94:	0001648c 	.word	0x0001648c
   13e98:	00016458 	.word	0x00016458
   13e9c:	00016480 	.word	0x00016480

00013ea0 <CExceptionHandler::Get()>:
   13ea0:	e92d4010 	push	{r4, lr}
   13ea4:	e59f4020 	ldr	r4, [pc, #32]	; 13ecc <CExceptionHandler::Get()+0x2c>
   13ea8:	e5940000 	ldr	r0, [r4]
   13eac:	e3500000 	cmp	r0, #0
   13eb0:	18bd8010 	popne	{r4, pc}
   13eb4:	e3a02087 	mov	r2, #135	; 0x87
   13eb8:	e59f1010 	ldr	r1, [pc, #16]	; 13ed0 <CExceptionHandler::Get()+0x30>
   13ebc:	e59f0010 	ldr	r0, [pc, #16]	; 13ed4 <CExceptionHandler::Get()+0x34>
   13ec0:	ebffdae7 	bl	aa64 <assertion_failed>
   13ec4:	e5940000 	ldr	r0, [r4]
   13ec8:	e8bd8010 	pop	{r4, pc}
   13ecc:	000166e4 	.word	0x000166e4
   13ed0:	00016458 	.word	0x00016458
   13ed4:	00014c0c 	.word	0x00014c0c

00013ed8 <ExceptionHandler>:
   13ed8:	e92d4070 	push	{r4, r5, r6, lr}
   13edc:	e3a03000 	mov	r3, #0
   13ee0:	e1a05000 	mov	r5, r0
   13ee4:	e1a06001 	mov	r6, r1
   13ee8:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   13eec:	ebffe20e 	bl	c72c <CInterruptSystem::DisableFIQ()>
   13ef0:	f1080040 	cpsie	f
   13ef4:	e59f403c 	ldr	r4, [pc, #60]	; 13f38 <ExceptionHandler+0x60>
   13ef8:	e5940000 	ldr	r0, [r4]
   13efc:	e3500000 	cmp	r0, #0
   13f00:	0a000003 	beq	13f14 <ExceptionHandler+0x3c>
   13f04:	e1a02006 	mov	r2, r6
   13f08:	e1a01005 	mov	r1, r5
   13f0c:	e8bd4070 	pop	{r4, r5, r6, lr}
   13f10:	eaffffa6 	b	13db0 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>
   13f14:	e3a02087 	mov	r2, #135	; 0x87
   13f18:	e59f101c 	ldr	r1, [pc, #28]	; 13f3c <ExceptionHandler+0x64>
   13f1c:	e59f001c 	ldr	r0, [pc, #28]	; 13f40 <ExceptionHandler+0x68>
   13f20:	ebffdacf 	bl	aa64 <assertion_failed>
   13f24:	e5940000 	ldr	r0, [r4]
   13f28:	e1a02006 	mov	r2, r6
   13f2c:	e1a01005 	mov	r1, r5
   13f30:	e8bd4070 	pop	{r4, r5, r6, lr}
   13f34:	eaffff9d 	b	13db0 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>
   13f38:	000166e4 	.word	0x000166e4
   13f3c:	00016458 	.word	0x00016458
   13f40:	00014c0c 	.word	0x00014c0c

00013f44 <raise>:
   13f44:	e92d4010 	push	{r4, lr}
   13f48:	e59f4030 	ldr	r4, [pc, #48]	; 13f80 <raise+0x3c>
   13f4c:	e5940000 	ldr	r0, [r4]
   13f50:	e3500000 	cmp	r0, #0
   13f54:	0a000003 	beq	13f68 <raise+0x24>
   13f58:	e3a01004 	mov	r1, #4
   13f5c:	ebffff83 	bl	13d70 <CExceptionHandler::Throw(unsigned int)>
   13f60:	e3a00000 	mov	r0, #0
   13f64:	e8bd8010 	pop	{r4, pc}
   13f68:	e59f0014 	ldr	r0, [pc, #20]	; 13f84 <raise+0x40>
   13f6c:	e3a02087 	mov	r2, #135	; 0x87
   13f70:	e59f1010 	ldr	r1, [pc, #16]	; 13f88 <raise+0x44>
   13f74:	ebffdaba 	bl	aa64 <assertion_failed>
   13f78:	e5940000 	ldr	r0, [r4]
   13f7c:	eafffff5 	b	13f58 <raise+0x14>
   13f80:	000166e4 	.word	0x000166e4
   13f84:	00014c0c 	.word	0x00014c0c
   13f88:	00016458 	.word	0x00016458
