
kernel.elf:     file format elf32-littlearm


Disassembly of section .init:

00008000 <_start>:
    8000:	e10f0000 	mrs	r0, CPSR
    8004:	e220001a 	eor	r0, r0, #26
    8008:	e310001f 	tst	r0, #31
    800c:	e3c0001f 	bic	r0, r0, #31
    8010:	e38000d3 	orr	r0, r0, #211	; 0xd3
    8014:	1a000004 	bne	802c <_start+0x2c>
    8018:	e3800c01 	orr	r0, r0, #256	; 0x100
    801c:	e28fe00c 	add	lr, pc, #12
    8020:	e16ff000 	msr	SPSR_fsxc, r0
    8024:	e12ef30e 	.word	0xe12ef30e
    8028:	e160006e 	.word	0xe160006e
    802c:	e121f000 	msr	CPSR_c, r0
    8030:	e3a00000 	mov	r0, #0
    8034:	ee0c0f10 	mcr	15, 0, r0, cr12, cr0, {0}
    8038:	f1020011 	cps	#17
    803c:	e3a0d709 	mov	sp, #2359296	; 0x240000
    8040:	f1020012 	cps	#18
    8044:	e3a0d98e 	mov	sp, #2326528	; 0x238000
    8048:	f1020017 	cps	#23
    804c:	e3a0d823 	mov	sp, #2293760	; 0x230000
    8050:	f102001b 	cps	#27
    8054:	e3a0d823 	mov	sp, #2293760	; 0x230000
    8058:	f102001f 	cps	#31
    805c:	e3a0d98a 	mov	sp, #2260992	; 0x228000
    8060:	ea00633e 	b	20d60 <sysinit>

Disassembly of section .text:

00008068 <main>:
    8068:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    806c:	e24ddc45 	sub	sp, sp, #17664	; 0x4500
    8070:	e24dd0fc 	sub	sp, sp, #252	; 0xfc
    8074:	e28d300c 	add	r3, sp, #12
    8078:	e1a00003 	mov	r0, r3
    807c:	e58d3004 	str	r3, [sp, #4]
    8080:	eb00008e 	bl	82c0 <CKernel::CKernel()>
    8084:	e59d0004 	ldr	r0, [sp, #4]
    8088:	eb0000d3 	bl	83dc <CKernel::Initialize()>
    808c:	e3500000 	cmp	r0, #0
    8090:	0a000004 	beq	80a8 <main+0x40>
    8094:	e59d0004 	ldr	r0, [sp, #4]
    8098:	eb000146 	bl	85b8 <CKernel::Run()>
    809c:	e3500002 	cmp	r0, #2
    80a0:	1a000000 	bne	80a8 <main+0x40>
    80a4:	eb006322 	bl	20d34 <reboot>
    80a8:	eb00631e 	bl	20d28 <halt>

000080ac <DoChangeMachine(char const*)>:
    80ac:	e12fff1e 	bx	lr

000080b0 <CKernel::ShutdownHandler()>:
    80b0:	e92d4010 	push	{r4, lr}
    80b4:	e59f4030 	ldr	r4, [pc, #48]	; 80ec <CKernel::ShutdownHandler()+0x3c>
    80b8:	e5943000 	ldr	r3, [r4]
    80bc:	e3530000 	cmp	r3, #0
    80c0:	0a000003 	beq	80d4 <CKernel::ShutdownHandler()+0x24>
    80c4:	e3a02002 	mov	r2, #2
    80c8:	e2833802 	add	r3, r3, #131072	; 0x20000
    80cc:	e5c32d90 	strb	r2, [r3, #3472]	; 0xd90
    80d0:	e8bd8010 	pop	{r4, pc}
    80d4:	e3a020d4 	mov	r2, #212	; 0xd4
    80d8:	e59f1010 	ldr	r1, [pc, #16]	; 80f0 <CKernel::ShutdownHandler()+0x40>
    80dc:	e59f0010 	ldr	r0, [pc, #16]	; 80f4 <CKernel::ShutdownHandler()+0x44>
    80e0:	eb004a64 	bl	1aa78 <assertion_failed>
    80e4:	e5943000 	ldr	r3, [r4]
    80e8:	eafffff5 	b	80c4 <CKernel::ShutdownHandler()+0x14>
    80ec:	0002b8f4 	.word	0x0002b8f4
    80f0:	000243fc 	.word	0x000243fc
    80f4:	0002440c 	.word	0x0002440c

000080f8 <CKernel::KeyPressedHandler(char const*)>:
    80f8:	e92d4070 	push	{r4, r5, r6, lr}
    80fc:	e59f4068 	ldr	r4, [pc, #104]	; 816c <CKernel::KeyPressedHandler(char const*)+0x74>
    8100:	e1a06000 	mov	r6, r0
    8104:	e5940000 	ldr	r0, [r4]
    8108:	e24dd010 	sub	sp, sp, #16
    810c:	e3500000 	cmp	r0, #0
    8110:	0a00000f 	beq	8154 <CKernel::KeyPressedHandler(char const*)+0x5c>
    8114:	e3a03001 	mov	r3, #1
    8118:	e3a0e000 	mov	lr, #0
    811c:	e3a05041 	mov	r5, #65	; 0x41
    8120:	e5d6c000 	ldrb	ip, [r6]
    8124:	e5941004 	ldr	r1, [r4, #4]
    8128:	e28d2010 	add	r2, sp, #16
    812c:	e2800a22 	add	r0, r0, #139264	; 0x22000
    8130:	e1cd50bc 	strh	r5, [sp, #12]
    8134:	e2800f52 	add	r0, r0, #328	; 0x148
    8138:	e562c004 	strb	ip, [r2, #-4]!
    813c:	e081c003 	add	ip, r1, r3
    8140:	e88d4008 	stm	sp, {r3, lr}
    8144:	e584c004 	str	ip, [r4, #4]
    8148:	eb000399 	bl	8fb4 <BusRaider::blockWrite(unsigned long, unsigned char const*, unsigned long, int, int)>
    814c:	e28dd010 	add	sp, sp, #16
    8150:	e8bd8070 	pop	{r4, r5, r6, pc}
    8154:	e59f0014 	ldr	r0, [pc, #20]	; 8170 <CKernel::KeyPressedHandler(char const*)+0x78>
    8158:	e3a020cb 	mov	r2, #203	; 0xcb
    815c:	e59f1010 	ldr	r1, [pc, #16]	; 8174 <CKernel::KeyPressedHandler(char const*)+0x7c>
    8160:	eb004a44 	bl	1aa78 <assertion_failed>
    8164:	e5940000 	ldr	r0, [r4]
    8168:	eaffffe9 	b	8114 <CKernel::KeyPressedHandler(char const*)+0x1c>
    816c:	0002b8f4 	.word	0x0002b8f4
    8170:	0002440c 	.word	0x0002440c
    8174:	000243fc 	.word	0x000243fc

00008178 <pinRawWrite(int, bool)>:
    8178:	e3510000 	cmp	r1, #0
    817c:	e3a03001 	mov	r3, #1
    8180:	0a000008 	beq	81a8 <pinRawWrite(int, bool)+0x30>
    8184:	e350001f 	cmp	r0, #31
    8188:	c2400020 	subgt	r0, r0, #32
    818c:	d59f2038 	ldrle	r2, [pc, #56]	; 81cc <pinRawWrite(int, bool)+0x54>
    8190:	c59f2034 	ldrgt	r2, [pc, #52]	; 81cc <pinRawWrite(int, bool)+0x54>
    8194:	d1a00013 	lslle	r0, r3, r0
    8198:	c1a00013 	lslgt	r0, r3, r0
    819c:	d582001c 	strle	r0, [r2, #28]
    81a0:	c5820020 	strgt	r0, [r2, #32]
    81a4:	e12fff1e 	bx	lr
    81a8:	e350001f 	cmp	r0, #31
    81ac:	c2400020 	subgt	r0, r0, #32
    81b0:	d59f2014 	ldrle	r2, [pc, #20]	; 81cc <pinRawWrite(int, bool)+0x54>
    81b4:	c59f2010 	ldrgt	r2, [pc, #16]	; 81cc <pinRawWrite(int, bool)+0x54>
    81b8:	d1a00013 	lslle	r0, r3, r0
    81bc:	c1a00013 	lslgt	r0, r3, r0
    81c0:	d5820028 	strle	r0, [r2, #40]	; 0x28
    81c4:	c582002c 	strgt	r0, [r2, #44]	; 0x2c
    81c8:	e12fff1e 	bx	lr
    81cc:	20200000 	.word	0x20200000

000081d0 <pinRawMode(int, bool, bool)>:
    81d0:	e3510000 	cmp	r1, #0
    81d4:	e92d4070 	push	{r4, r5, r6, lr}
    81d8:	e1a04000 	mov	r4, r0
    81dc:	0a00000f 	beq	8220 <pinRawMode(int, bool, bool)+0x50>
    81e0:	e3a00007 	mov	r0, #7
    81e4:	e59f1094 	ldr	r1, [pc, #148]	; 8280 <pinRawMode(int, bool, bool)+0xb0>
    81e8:	e1a02fc4 	asr	r2, r4, #31
    81ec:	e0c13491 	smull	r3, r1, r1, r4
    81f0:	e0622141 	rsb	r2, r2, r1, asr #2
    81f4:	e2821302 	add	r1, r2, #134217728	; 0x8000000
    81f8:	e2811702 	add	r1, r1, #524288	; 0x80000
    81fc:	e0822102 	add	r2, r2, r2, lsl #2
    8200:	e1a01101 	lsl	r1, r1, #2
    8204:	e0443082 	sub	r3, r4, r2, lsl #1
    8208:	e0833083 	add	r3, r3, r3, lsl #1
    820c:	e5912000 	ldr	r2, [r1]
    8210:	e6ef3073 	uxtb	r3, r3
    8214:	e1c23310 	bic	r3, r2, r0, lsl r3
    8218:	e5813000 	str	r3, [r1]
    821c:	e8bd8070 	pop	{r4, r5, r6, pc}
    8220:	e1a01002 	mov	r1, r2
    8224:	e1a05002 	mov	r5, r2
    8228:	ebffffd2 	bl	8178 <pinRawWrite(int, bool)>
    822c:	e3a01001 	mov	r1, #1
    8230:	e3a00007 	mov	r0, #7
    8234:	e59f2044 	ldr	r2, [pc, #68]	; 8280 <pinRawMode(int, bool, bool)+0xb0>
    8238:	e1a03fc4 	asr	r3, r4, #31
    823c:	e0c2c492 	smull	ip, r2, r2, r4
    8240:	e0633142 	rsb	r3, r3, r2, asr #2
    8244:	e283c302 	add	ip, r3, #134217728	; 0x8000000
    8248:	e28cc702 	add	ip, ip, #524288	; 0x80000
    824c:	e0833103 	add	r3, r3, r3, lsl #2
    8250:	e0443113 	sub	r3, r4, r3, lsl r1
    8254:	e1a0c10c 	lsl	ip, ip, #2
    8258:	e0833113 	add	r3, r3, r3, lsl r1
    825c:	e59c2000 	ldr	r2, [ip]
    8260:	e6ef3073 	uxtb	r3, r3
    8264:	e1c22310 	bic	r2, r2, r0, lsl r3
    8268:	e1823311 	orr	r3, r2, r1, lsl r3
    826c:	e1a00004 	mov	r0, r4
    8270:	e1a01005 	mov	r1, r5
    8274:	e8bd4070 	pop	{r4, r5, r6, lr}
    8278:	e58c3000 	str	r3, [ip]
    827c:	eaffffbd 	b	8178 <pinRawWrite(int, bool)>
    8280:	66666667 	.word	0x66666667

00008284 <pinRawRead(int)>:
    8284:	e350001f 	cmp	r0, #31
    8288:	d59f301c 	ldrle	r3, [pc, #28]	; 82ac <pinRawRead(int)+0x28>
    828c:	c59f2018 	ldrgt	r2, [pc, #24]	; 82ac <pinRawRead(int)+0x28>
    8290:	c2403020 	subgt	r3, r0, #32
    8294:	d5933034 	ldrle	r3, [r3, #52]	; 0x34
    8298:	c5920038 	ldrgt	r0, [r2, #56]	; 0x38
    829c:	d1a00033 	lsrle	r0, r3, r0
    82a0:	c1a00330 	lsrgt	r0, r0, r3
    82a4:	e2000001 	and	r0, r0, #1
    82a8:	e12fff1e 	bx	lr
    82ac:	20200000 	.word	0x20200000

000082b0 <micros()>:
    82b0:	e59f3004 	ldr	r3, [pc, #4]	; 82bc <micros()+0xc>
    82b4:	e5930004 	ldr	r0, [r3, #4]
    82b8:	e12fff1e 	bx	lr
    82bc:	20003000 	.word	0x20003000

000082c0 <CKernel::CKernel()>:
    82c0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    82c4:	e1a04000 	mov	r4, r0
    82c8:	eb0050d6 	bl	1c628 <CInterruptSystem::CInterruptSystem()>
    82cc:	e2848f93 	add	r8, r4, #588	; 0x24c
    82d0:	e3a01001 	mov	r1, #1
    82d4:	e2840d09 	add	r0, r4, #576	; 0x240
    82d8:	eb0069de 	bl	22a58 <CMemorySystem::CMemorySystem(bool)>
    82dc:	e2846f96 	add	r6, r4, #600	; 0x258
    82e0:	e1a00008 	mov	r0, r8
    82e4:	eb004971 	bl	1a8b0 <CActLED::CActLED()>
    82e8:	e2845eab 	add	r5, r4, #2736	; 0xab0
    82ec:	e1a00006 	mov	r0, r6
    82f0:	eb00529a 	bl	1cd60 <CKernelOptions::CKernelOptions()>
    82f4:	e1a00005 	mov	r0, r5
    82f8:	eb004bea 	bl	1b2a8 <CDeviceNameService::CDeviceNameService()>
    82fc:	e1a00006 	mov	r0, r6
    8300:	eb00525d 	bl	1cc7c <CKernelOptions::GetWidth() const>
    8304:	e1a07000 	mov	r7, r0
    8308:	e1a00006 	mov	r0, r6
    830c:	eb00525c 	bl	1cc84 <CKernelOptions::GetHeight() const>
    8310:	e3a03000 	mov	r3, #0
    8314:	e1a01007 	mov	r1, r7
    8318:	e1a02000 	mov	r2, r0
    831c:	e2850008 	add	r0, r5, #8
    8320:	eb0056df 	bl	1dea4 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool)>
    8324:	eb0051d6 	bl	1ca84 <CInterruptSystem::Get()>
    8328:	e2845eb1 	add	r5, r4, #2832	; 0xb10
    832c:	e2855004 	add	r5, r5, #4
    8330:	e3a02000 	mov	r2, #0
    8334:	e1a01000 	mov	r1, r0
    8338:	e2849b82 	add	r9, r4, #133120	; 0x20800
    833c:	e1a00005 	mov	r0, r5
    8340:	eb005b8c 	bl	1f178 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool)>
    8344:	e2897e3f 	add	r7, r9, #1008	; 0x3f0
    8348:	e2890ffb 	add	r0, r9, #1004	; 0x3ec
    834c:	eb006841 	bl	22458 <CExceptionHandler::CExceptionHandler()>
    8350:	e1a01004 	mov	r1, r4
    8354:	e1a00007 	mov	r0, r7
    8358:	eb0062ba 	bl	20e48 <CTimer::CTimer(CInterruptSystem*)>
    835c:	e1a00006 	mov	r0, r6
    8360:	eb00524c 	bl	1cc98 <CKernelOptions::GetLogLevel() const>
    8364:	e2846b83 	add	r6, r4, #134144	; 0x20c00
    8368:	e1a01000 	mov	r1, r0
    836c:	e1a02007 	mov	r2, r7
    8370:	e286001c 	add	r0, r6, #28
    8374:	eb00537f 	bl	1d178 <CLogger::CLogger(unsigned int, CTimer*)>
    8378:	e1a02007 	mov	r2, r7
    837c:	e1a01004 	mov	r1, r4
    8380:	e2860f45 	add	r0, r6, #276	; 0x114
    8384:	eb0007d9 	bl	a2f0 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)>
    8388:	e3a02000 	mov	r2, #0
    838c:	e2843802 	add	r3, r4, #131072	; 0x20000
    8390:	e1a01005 	mov	r1, r5
    8394:	e5c32d90 	strb	r2, [r3, #3472]	; 0xd90
    8398:	e2860f65 	add	r0, r6, #404	; 0x194
    839c:	e59f2030 	ldr	r2, [pc, #48]	; 83d4 <CKernel::CKernel()+0x114>
    83a0:	eb000744 	bl	a0b8 <CommandHandler::CommandHandler(CSerialDevice&, void (*)(char const*))>
    83a4:	e2840a22 	add	r0, r4, #139264	; 0x22000
    83a8:	e2800f52 	add	r0, r0, #328	; 0x148
    83ac:	eb000180 	bl	89b4 <BusRaider::BusRaider()>
    83b0:	e59fc020 	ldr	ip, [pc, #32]	; 83d8 <CKernel::CKernel()+0x118>
    83b4:	e1a00008 	mov	r0, r8
    83b8:	e3a03f7d 	mov	r3, #500	; 0x1f4
    83bc:	e3a020c8 	mov	r2, #200	; 0xc8
    83c0:	e3a01005 	mov	r1, #5
    83c4:	e58c4000 	str	r4, [ip]
    83c8:	eb004993 	bl	1aa1c <CActLED::Blink(unsigned int, unsigned int, unsigned int)>
    83cc:	e1a00004 	mov	r0, r4
    83d0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    83d4:	000080ac 	.word	0x000080ac
    83d8:	0002b8f4 	.word	0x0002b8f4

000083dc <CKernel::Initialize()>:
    83dc:	e92d4070 	push	{r4, r5, r6, lr}
    83e0:	e1a04000 	mov	r4, r0
    83e4:	eb0050a2 	bl	1c674 <CInterruptSystem::Initialize()>
    83e8:	e3500000 	cmp	r0, #0
    83ec:	1a000001 	bne	83f8 <CKernel::Initialize()+0x1c>
    83f0:	e3a00000 	mov	r0, #0
    83f4:	e8bd8070 	pop	{r4, r5, r6, pc}
    83f8:	e2845eab 	add	r5, r4, #2736	; 0xab0
    83fc:	e2856008 	add	r6, r5, #8
    8400:	e1a00006 	mov	r0, r6
    8404:	eb005a57 	bl	1ed68 <CScreenDevice::Initialize()>
    8408:	e3500000 	cmp	r0, #0
    840c:	0afffff7 	beq	83f0 <CKernel::Initialize()+0x14>
    8410:	e2840eb1 	add	r0, r4, #2832	; 0xb10
    8414:	e2800004 	add	r0, r0, #4
    8418:	e59f1060 	ldr	r1, [pc, #96]	; 8480 <CKernel::Initialize()+0xa4>
    841c:	eb005b86 	bl	1f23c <CSerialDevice::Initialize(unsigned int)>
    8420:	e3500000 	cmp	r0, #0
    8424:	0afffff1 	beq	83f0 <CKernel::Initialize()+0x14>
    8428:	e2840f96 	add	r0, r4, #600	; 0x258
    842c:	eb005216 	bl	1cc8c <CKernelOptions::GetLogDevice() const>
    8430:	e3a02000 	mov	r2, #0
    8434:	e1a01000 	mov	r1, r0
    8438:	e1a00005 	mov	r0, r5
    843c:	eb004c43 	bl	1b550 <CDeviceNameService::GetDevice(char const*, bool)>
    8440:	e2845b83 	add	r5, r4, #134144	; 0x20c00
    8444:	e3500000 	cmp	r0, #0
    8448:	11a01000 	movne	r1, r0
    844c:	01a01006 	moveq	r1, r6
    8450:	e285001c 	add	r0, r5, #28
    8454:	eb00552f 	bl	1d918 <CLogger::Initialize(CDevice*)>
    8458:	e3500000 	cmp	r0, #0
    845c:	0affffe3 	beq	83f0 <CKernel::Initialize()+0x14>
    8460:	e2840b82 	add	r0, r4, #133120	; 0x20800
    8464:	e2800e3f 	add	r0, r0, #1008	; 0x3f0
    8468:	eb006559 	bl	219d4 <CTimer::Initialize()>
    846c:	e3500000 	cmp	r0, #0
    8470:	0affffde 	beq	83f0 <CKernel::Initialize()+0x14>
    8474:	e2850f45 	add	r0, r5, #276	; 0x114
    8478:	e8bd4070 	pop	{r4, r5, r6, lr}
    847c:	ea000fd4 	b	c3d4 <CDWHCIDevice::Initialize()>
    8480:	0001c200 	.word	0x0001c200

00008484 <CKernel::testTiming(int)>:
    8484:	e3a02000 	mov	r2, #0
    8488:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    848c:	e1a08000 	mov	r8, r0
    8490:	e24dd014 	sub	sp, sp, #20
    8494:	e1a07001 	mov	r7, r1
    8498:	e3a00007 	mov	r0, #7
    849c:	e1a01002 	mov	r1, r2
    84a0:	ebffff4a 	bl	81d0 <pinRawMode(int, bool, bool)>
    84a4:	e3a02000 	mov	r2, #0
    84a8:	e3a00008 	mov	r0, #8
    84ac:	e1a01002 	mov	r1, r2
    84b0:	ebffff46 	bl	81d0 <pinRawMode(int, bool, bool)>
    84b4:	e59f30ec 	ldr	r3, [pc, #236]	; 85a8 <CKernel::testTiming(int)+0x124>
    84b8:	e59f20ec 	ldr	r2, [pc, #236]	; 85ac <CKernel::testTiming(int)+0x128>
    84bc:	e1a05003 	mov	r5, r3
    84c0:	e5933004 	ldr	r3, [r3, #4]
    84c4:	e2888eab 	add	r8, r8, #2736	; 0xab0
    84c8:	e58d3004 	str	r3, [sp, #4]
    84cc:	e59d3004 	ldr	r3, [sp, #4]
    84d0:	e3a04000 	mov	r4, #0
    84d4:	e0273792 	mla	r7, r2, r7, r3
    84d8:	e59d3004 	ldr	r3, [sp, #4]
    84dc:	e3a0a080 	mov	sl, #128	; 0x80
    84e0:	e59f60c8 	ldr	r6, [pc, #200]	; 85b0 <CKernel::testTiming(int)+0x12c>
    84e4:	e59f90c8 	ldr	r9, [pc, #200]	; 85b4 <CKernel::testTiming(int)+0x130>
    84e8:	e2888008 	add	r8, r8, #8
    84ec:	e58d3008 	str	r3, [sp, #8]
    84f0:	ea000002 	b	8500 <CKernel::testTiming(int)+0x7c>
    84f4:	e1520007 	cmp	r2, r7
    84f8:	8a00001e 	bhi	8578 <CKernel::testTiming(int)+0xf4>
    84fc:	e58d2004 	str	r2, [sp, #4]
    8500:	e5953004 	ldr	r3, [r5, #4]
    8504:	e3540000 	cmp	r4, #0
    8508:	1586a01c 	strne	sl, [r6, #28]
    850c:	0586a028 	streq	sl, [r6, #40]	; 0x28
    8510:	e58d300c 	str	r3, [sp, #12]
    8514:	e59d200c 	ldr	r2, [sp, #12]
    8518:	e59d3004 	ldr	r3, [sp, #4]
    851c:	e2244001 	eor	r4, r4, #1
    8520:	e1520003 	cmp	r2, r3
    8524:	9a000004 	bls	853c <CKernel::testTiming(int)+0xb8>
    8528:	e59d300c 	ldr	r3, [sp, #12]
    852c:	e59d2004 	ldr	r2, [sp, #4]
    8530:	e0433002 	sub	r3, r3, r2
    8534:	e3530005 	cmp	r3, #5
    8538:	8a000010 	bhi	8580 <CKernel::testTiming(int)+0xfc>
    853c:	e59d3008 	ldr	r3, [sp, #8]
    8540:	e5952004 	ldr	r2, [r5, #4]
    8544:	e283393d 	add	r3, r3, #999424	; 0xf4000
    8548:	e2833d09 	add	r3, r3, #576	; 0x240
    854c:	e1530002 	cmp	r3, r2
    8550:	2affffe7 	bcs	84f4 <CKernel::testTiming(int)+0x70>
    8554:	e3a02001 	mov	r2, #1
    8558:	e1a01009 	mov	r1, r9
    855c:	e1a00008 	mov	r0, r8
    8560:	eb0059ce 	bl	1eca0 <CScreenDevice::Write(void const*, unsigned int)>
    8564:	e5953004 	ldr	r3, [r5, #4]
    8568:	e58d3008 	str	r3, [sp, #8]
    856c:	e5952004 	ldr	r2, [r5, #4]
    8570:	e1520007 	cmp	r2, r7
    8574:	9affffe0 	bls	84fc <CKernel::testTiming(int)+0x78>
    8578:	e28dd014 	add	sp, sp, #20
    857c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8580:	e3a0bc01 	mov	fp, #256	; 0x100
    8584:	e3a0000a 	mov	r0, #10
    8588:	e586b01c 	str	fp, [r6, #28]
    858c:	e586b01c 	str	fp, [r6, #28]
    8590:	eb00654e 	bl	21ad0 <CTimer::SimpleusDelay(unsigned int)>
    8594:	e586b028 	str	fp, [r6, #40]	; 0x28
    8598:	e3a0000a 	mov	r0, #10
    859c:	e586b028 	str	fp, [r6, #40]	; 0x28
    85a0:	eb00654a 	bl	21ad0 <CTimer::SimpleusDelay(unsigned int)>
    85a4:	eaffffe4 	b	853c <CKernel::testTiming(int)+0xb8>
    85a8:	20003000 	.word	0x20003000
    85ac:	000f4240 	.word	0x000f4240
    85b0:	20200000 	.word	0x20200000
    85b4:	0002441c 	.word	0x0002441c

000085b8 <CKernel::Run()>:
    85b8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    85bc:	e2805eab 	add	r5, r0, #2736	; 0xab0
    85c0:	e2854008 	add	r4, r5, #8
    85c4:	e2807b83 	add	r7, r0, #134144	; 0x20c00
    85c8:	e24dd0bc 	sub	sp, sp, #188	; 0xbc
    85cc:	e3a02008 	mov	r2, #8
    85d0:	e59f1174 	ldr	r1, [pc, #372]	; 874c <CKernel::Run()+0x194>
    85d4:	e1a06000 	mov	r6, r0
    85d8:	e287901c 	add	r9, r7, #28
    85dc:	e1a00004 	mov	r0, r4
    85e0:	eb0059ae 	bl	1eca0 <CScreenDevice::Write(void const*, unsigned int)>
    85e4:	e1a00009 	mov	r0, r9
    85e8:	e59f3160 	ldr	r3, [pc, #352]	; 8750 <CKernel::Run()+0x198>
    85ec:	e3a02003 	mov	r2, #3
    85f0:	e59f115c 	ldr	r1, [pc, #348]	; 8754 <CKernel::Run()+0x19c>
    85f4:	eb0054bb 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    85f8:	e1a00005 	mov	r0, r5
    85fc:	e3a02000 	mov	r2, #0
    8600:	e59f1150 	ldr	r1, [pc, #336]	; 8758 <CKernel::Run()+0x1a0>
    8604:	eb004bd1 	bl	1b550 <CDeviceNameService::GetDevice(char const*, bool)>
    8608:	e2505000 	subs	r5, r0, #0
    860c:	0a000046 	beq	872c <CKernel::Run()+0x174>
    8610:	e59f1144 	ldr	r1, [pc, #324]	; 875c <CKernel::Run()+0x1a4>
    8614:	eb002455 	bl	11770 <CUSBKeyboardDevice::RegisterShutdownHandler(void (*)())>
    8618:	e1a00005 	mov	r0, r5
    861c:	e59f113c 	ldr	r1, [pc, #316]	; 8760 <CKernel::Run()+0x1a8>
    8620:	eb00244e 	bl	11760 <CUSBKeyboardDevice::RegisterKeyPressedHandler(void (*)(char const*))>
    8624:	e59f3138 	ldr	r3, [pc, #312]	; 8764 <CKernel::Run()+0x1ac>
    8628:	e3a02003 	mov	r2, #3
    862c:	e59f1120 	ldr	r1, [pc, #288]	; 8754 <CKernel::Run()+0x19c>
    8630:	e1a00009 	mov	r0, r9
    8634:	eb0054ab 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8638:	e28d0064 	add	r0, sp, #100	; 0x64
    863c:	eb00053d 	bl	9b38 <TargetFonts::TargetFonts()>
    8640:	e28d0064 	add	r0, sp, #100	; 0x64
    8644:	e59f111c 	ldr	r1, [pc, #284]	; 8768 <CKernel::Run()+0x1b0>
    8648:	eb00053e 	bl	9b48 <TargetFonts::addFont(TargetFont*)>
    864c:	e1a01004 	mov	r1, r4
    8650:	e28d2064 	add	r2, sp, #100	; 0x64
    8654:	e28d002c 	add	r0, sp, #44	; 0x2c
    8658:	eb000482 	bl	9868 <TargetScreen::TargetScreen(CScreenDevice&, TargetFonts&)>
    865c:	e3a08000 	mov	r8, #0
    8660:	e3e02000 	mvn	r2, #0
    8664:	e3a03002 	mov	r3, #2
    8668:	e3a04b3e 	mov	r4, #63488	; 0xf800
    866c:	e3a0e010 	mov	lr, #16
    8670:	e59fc0f4 	ldr	ip, [pc, #244]	; 876c <CKernel::Run()+0x1b4>
    8674:	e58d2024 	str	r2, [sp, #36]	; 0x24
    8678:	e58d2020 	str	r2, [sp, #32]
    867c:	e58d301c 	str	r3, [sp, #28]
    8680:	e58d3018 	str	r3, [sp, #24]
    8684:	e58d4008 	str	r4, [sp, #8]
    8688:	e3a03040 	mov	r3, #64	; 0x40
    868c:	e28d002c 	add	r0, sp, #44	; 0x2c
    8690:	e58d8014 	str	r8, [sp, #20]
    8694:	e58d8010 	str	r8, [sp, #16]
    8698:	e58d800c 	str	r8, [sp, #12]
    869c:	e1a02008 	mov	r2, r8
    86a0:	e1a01008 	mov	r1, r8
    86a4:	e58de000 	str	lr, [sp]
    86a8:	e58dc004 	str	ip, [sp, #4]
    86ac:	eb000471 	bl	9878 <TargetScreen::setup(int, int, int, int, char const*, unsigned short, unsigned short, int, int, int, int, int, int)>
    86b0:	e59f30b8 	ldr	r3, [pc, #184]	; 8770 <CKernel::Run()+0x1b8>
    86b4:	e3a0b003 	mov	fp, #3
    86b8:	e1a05003 	mov	r5, r3
    86bc:	e5933004 	ldr	r3, [r3, #4]
    86c0:	e59fa0ac 	ldr	sl, [pc, #172]	; 8774 <CKernel::Run()+0x1bc>
    86c4:	e283493d 	add	r4, r3, #999424	; 0xf4000
    86c8:	e2877f65 	add	r7, r7, #404	; 0x194
    86cc:	e2866802 	add	r6, r6, #131072	; 0x20000
    86d0:	e2844d09 	add	r4, r4, #576	; 0x240
    86d4:	ea000002 	b	86e4 <CKernel::Run()+0x12c>
    86d8:	e1a00007 	mov	r0, r7
    86dc:	eb00069d 	bl	a158 <CommandHandler::service()>
    86e0:	e5953004 	ldr	r3, [r5, #4]
    86e4:	e1530004 	cmp	r3, r4
    86e8:	9afffffa 	bls	86d8 <CKernel::Run()+0x120>
    86ec:	e5961d9c 	ldr	r1, [r6, #3484]	; 0xd9c
    86f0:	e5962d94 	ldr	r2, [r6, #3476]	; 0xd94
    86f4:	e5963d98 	ldr	r3, [r6, #3480]	; 0xd98
    86f8:	e1a00009 	mov	r0, r9
    86fc:	e58d1008 	str	r1, [sp, #8]
    8700:	e58d2004 	str	r2, [sp, #4]
    8704:	e58d3000 	str	r3, [sp]
    8708:	e1a0200b 	mov	r2, fp
    870c:	e1a0300a 	mov	r3, sl
    8710:	e59f103c 	ldr	r1, [pc, #60]	; 8754 <CKernel::Run()+0x19c>
    8714:	eb005473 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8718:	e5954004 	ldr	r4, [r5, #4]
    871c:	e5868d98 	str	r8, [r6, #3480]	; 0xd98
    8720:	e284493d 	add	r4, r4, #999424	; 0xf4000
    8724:	e2844d09 	add	r4, r4, #576	; 0x240
    8728:	eaffffea 	b	86d8 <CKernel::Run()+0x120>
    872c:	e1a00009 	mov	r0, r9
    8730:	e59f3040 	ldr	r3, [pc, #64]	; 8778 <CKernel::Run()+0x1c0>
    8734:	e3a02001 	mov	r2, #1
    8738:	e59f1014 	ldr	r1, [pc, #20]	; 8754 <CKernel::Run()+0x19c>
    873c:	eb005469 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8740:	e3a00001 	mov	r0, #1
    8744:	e28dd0bc 	add	sp, sp, #188	; 0xbc
    8748:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    874c:	00024420 	.word	0x00024420
    8750:	0002442c 	.word	0x0002442c
    8754:	000243f4 	.word	0x000243f4
    8758:	00024450 	.word	0x00024450
    875c:	000080b0 	.word	0x000080b0
    8760:	000080f8 	.word	0x000080f8
    8764:	0002446c 	.word	0x0002446c
    8768:	0002b900 	.word	0x0002b900
    876c:	00024484 	.word	0x00024484
    8770:	20003000 	.word	0x20003000
    8774:	00024490 	.word	0x00024490
    8778:	00024458 	.word	0x00024458

0000877c <CKernel::~CKernel()>:
    877c:	e92d4070 	push	{r4, r5, r6, lr}
    8780:	e1a04000 	mov	r4, r0
    8784:	e3a02000 	mov	r2, #0
    8788:	e59f3084 	ldr	r3, [pc, #132]	; 8814 <CKernel::~CKernel()+0x98>
    878c:	e2800a22 	add	r0, r0, #139264	; 0x22000
    8790:	e2845b83 	add	r5, r4, #134144	; 0x20c00
    8794:	e2800f52 	add	r0, r0, #328	; 0x148
    8798:	e5832000 	str	r2, [r3]
    879c:	eb0003b8 	bl	9684 <BusRaider::~BusRaider()>
    87a0:	e2850f65 	add	r0, r5, #404	; 0x194
    87a4:	eb00065a 	bl	a114 <CommandHandler::~CommandHandler()>
    87a8:	e2850f45 	add	r0, r5, #276	; 0x114
    87ac:	eb00069b 	bl	a220 <CDWHCIDevice::~CDWHCIDevice()>
    87b0:	e2846b82 	add	r6, r4, #133120	; 0x20800
    87b4:	e285001c 	add	r0, r5, #28
    87b8:	eb005284 	bl	1d1d0 <CLogger::~CLogger()>
    87bc:	e2860e3f 	add	r0, r6, #1008	; 0x3f0
    87c0:	eb0061c2 	bl	20ed0 <CTimer::~CTimer()>
    87c4:	e2860ffb 	add	r0, r6, #1004	; 0x3ec
    87c8:	eb006746 	bl	224e8 <CExceptionHandler::~CExceptionHandler()>
    87cc:	e2840eb1 	add	r0, r4, #2832	; 0xb10
    87d0:	e2845eab 	add	r5, r4, #2736	; 0xab0
    87d4:	e2800004 	add	r0, r0, #4
    87d8:	eb005cec 	bl	1fb90 <CSerialDevice::~CSerialDevice()>
    87dc:	e2850008 	add	r0, r5, #8
    87e0:	eb005562 	bl	1dd70 <CScreenDevice::~CScreenDevice()>
    87e4:	e1a00005 	mov	r0, r5
    87e8:	eb004ac1 	bl	1b2f4 <CDeviceNameService::~CDeviceNameService()>
    87ec:	e2840f96 	add	r0, r4, #600	; 0x258
    87f0:	eb00511c 	bl	1cc68 <CKernelOptions::~CKernelOptions()>
    87f4:	e2840f93 	add	r0, r4, #588	; 0x24c
    87f8:	eb00480d 	bl	1a834 <CActLED::~CActLED()>
    87fc:	e2840d09 	add	r0, r4, #576	; 0x240
    8800:	eb006820 	bl	22888 <CMemorySystem::~CMemorySystem()>
    8804:	e1a00004 	mov	r0, r4
    8808:	eb004f94 	bl	1c660 <CInterruptSystem::~CInterruptSystem()>
    880c:	e1a00004 	mov	r0, r4
    8810:	e8bd8070 	pop	{r4, r5, r6, pc}
    8814:	0002b8f4 	.word	0x0002b8f4

00008818 <CKernel::KeyStatusHandlerRaw(unsigned char, unsigned char const*)>:
    8818:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    881c:	e59f60dc 	ldr	r6, [pc, #220]	; 8900 <CKernel::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0xe8>
    8820:	e24dd024 	sub	sp, sp, #36	; 0x24
    8824:	e5963000 	ldr	r3, [r6]
    8828:	e1a05000 	mov	r5, r0
    882c:	e3530000 	cmp	r3, #0
    8830:	e1a04001 	mov	r4, r1
    8834:	0a00002c 	beq	88ec <CKernel::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0xd4>
    8838:	e1a0000d 	mov	r0, sp
    883c:	eb005d3e 	bl	1fd3c <CString::CString()>
    8840:	e1a02005 	mov	r2, r5
    8844:	e1a0000d 	mov	r0, sp
    8848:	e59f10b4 	ldr	r1, [pc, #180]	; 8904 <CKernel::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0xec>
    884c:	eb006128 	bl	20cf4 <CString::Format(char const*, ...)>
    8850:	e59f70b0 	ldr	r7, [pc, #176]	; 8908 <CKernel::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0xf0>
    8854:	e2845006 	add	r5, r4, #6
    8858:	ea000002 	b	8868 <CKernel::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0x50>
    885c:	e2844001 	add	r4, r4, #1
    8860:	e1540005 	cmp	r4, r5
    8864:	0a000012 	beq	88b4 <CKernel::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0x9c>
    8868:	e5d43000 	ldrb	r3, [r4]
    886c:	e3530000 	cmp	r3, #0
    8870:	0afffff9 	beq	885c <CKernel::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0x44>
    8874:	e28d0010 	add	r0, sp, #16
    8878:	eb005d2f 	bl	1fd3c <CString::CString()>
    887c:	e5d42000 	ldrb	r2, [r4]
    8880:	e1a01007 	mov	r1, r7
    8884:	e28d0010 	add	r0, sp, #16
    8888:	eb006119 	bl	20cf4 <CString::Format(char const*, ...)>
    888c:	e28d0010 	add	r0, sp, #16
    8890:	eb005d3f 	bl	1fd94 <CString::operator char const*() const>
    8894:	e1a01000 	mov	r1, r0
    8898:	e1a0000d 	mov	r0, sp
    889c:	eb005d6e 	bl	1fe5c <CString::Append(char const*)>
    88a0:	e2844001 	add	r4, r4, #1
    88a4:	e28d0010 	add	r0, sp, #16
    88a8:	eb005cf0 	bl	1fc70 <CString::~CString()>
    88ac:	e1540005 	cmp	r4, r5
    88b0:	1affffec 	bne	8868 <CKernel::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0x50>
    88b4:	e1a0000d 	mov	r0, sp
    88b8:	e5964000 	ldr	r4, [r6]
    88bc:	eb005d34 	bl	1fd94 <CString::operator char const*() const>
    88c0:	e2844b83 	add	r4, r4, #134144	; 0x20c00
    88c4:	e284401c 	add	r4, r4, #28
    88c8:	e1a03000 	mov	r3, r0
    88cc:	e3a02003 	mov	r2, #3
    88d0:	e1a00004 	mov	r0, r4
    88d4:	e59f1030 	ldr	r1, [pc, #48]	; 890c <CKernel::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0xf4>
    88d8:	eb005402 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    88dc:	e1a0000d 	mov	r0, sp
    88e0:	eb005ce2 	bl	1fc70 <CString::~CString()>
    88e4:	e28dd024 	add	sp, sp, #36	; 0x24
    88e8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    88ec:	e3a020da 	mov	r2, #218	; 0xda
    88f0:	e59f1018 	ldr	r1, [pc, #24]	; 8910 <CKernel::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0xf8>
    88f4:	e59f0018 	ldr	r0, [pc, #24]	; 8914 <CKernel::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0xfc>
    88f8:	eb00485e 	bl	1aa78 <assertion_failed>
    88fc:	eaffffcd 	b	8838 <CKernel::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0x20>
    8900:	0002b8f4 	.word	0x0002b8f4
    8904:	000244ac 	.word	0x000244ac
    8908:	00026410 	.word	0x00026410
    890c:	000243f4 	.word	0x000243f4
    8910:	000243fc 	.word	0x000243fc
    8914:	0002440c 	.word	0x0002440c

00008918 <lowlevCycleDelay>:
    8918:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
    891c:	e1a00000 	nop			; (mov r0, r0)
    8920:	e1a000c0 	asr	r0, r0, #1

00008924 <loopit>:
    8924:	e2500001 	subs	r0, r0, #1
    8928:	1afffffd 	bne	8924 <loopit>
    892c:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
    8930:	e12fff1e 	bx	lr

00008934 <lowlevBlockCopyExecRelocatable>:
    8934:	e1a00000 	nop			; (mov r0, r0)
    8938:	e1a01001 	mov	r1, r1
    893c:	e1a02002 	mov	r2, r2
    8940:	e1a03003 	mov	r3, r3
    8944:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)

00008948 <blockCopyExecRelocatableLoop>:
    8948:	e4d13001 	ldrb	r3, [r1], #1
    894c:	e4c03001 	strb	r3, [r0], #1
    8950:	e2522001 	subs	r2, r2, #1
    8954:	aafffffb 	bge	8948 <blockCopyExecRelocatableLoop>
    8958:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    895c:	e12fff10 	bx	r0

00008960 <lowlevBlockCopyExecRelocatableLen>:
    8960:	0000002c 	.word	0x0000002c
    8964:	e12fff1e 	bx	lr

00008968 <lowlevGoto>:
    8968:	e1a00000 	nop			; (mov r0, r0)
    896c:	e12fff10 	bx	r0
    8970:	e12fff1e 	bx	lr

00008974 <lowlevStoreAbs8>:
    8974:	e1a00000 	nop			; (mov r0, r0)
    8978:	e1a01001 	mov	r1, r1
    897c:	e5c01000 	strb	r1, [r0]
    8980:	e12fff1e 	bx	lr
    8984:	e12fff1e 	bx	lr

00008988 <BusRaider::pinRawWrite(int, bool) [clone .part.0]>:
    8988:	e3a03001 	mov	r3, #1
    898c:	e350001f 	cmp	r0, #31
    8990:	c2400020 	subgt	r0, r0, #32
    8994:	d59f2014 	ldrle	r2, [pc, #20]	; 89b0 <BusRaider::pinRawWrite(int, bool) [clone .part.0]+0x28>
    8998:	c59f2010 	ldrgt	r2, [pc, #16]	; 89b0 <BusRaider::pinRawWrite(int, bool) [clone .part.0]+0x28>
    899c:	d1a00013 	lslle	r0, r3, r0
    89a0:	c1a00013 	lslgt	r0, r3, r0
    89a4:	d582001c 	strle	r0, [r2, #28]
    89a8:	c5820020 	strgt	r0, [r2, #32]
    89ac:	e12fff1e 	bx	lr
    89b0:	20200000 	.word	0x20200000

000089b4 <BusRaider::BusRaider()>:
    89b4:	e92d4070 	push	{r4, r5, r6, lr}
    89b8:	e3a03000 	mov	r3, #0
    89bc:	e1a05000 	mov	r5, r0
    89c0:	e2800014 	add	r0, r0, #20
    89c4:	e5c53005 	strb	r3, [r5, #5]
    89c8:	eb004bca 	bl	1b8f8 <CGPIOPin::CGPIOPin()>
    89cc:	e285003c 	add	r0, r5, #60	; 0x3c
    89d0:	eb004bc8 	bl	1b8f8 <CGPIOPin::CGPIOPin()>
    89d4:	e2850064 	add	r0, r5, #100	; 0x64
    89d8:	eb004bc6 	bl	1b8f8 <CGPIOPin::CGPIOPin()>
    89dc:	e285008c 	add	r0, r5, #140	; 0x8c
    89e0:	eb004bc4 	bl	1b8f8 <CGPIOPin::CGPIOPin()>
    89e4:	e28500b4 	add	r0, r5, #180	; 0xb4
    89e8:	eb004bc2 	bl	1b8f8 <CGPIOPin::CGPIOPin()>
    89ec:	e28540dc 	add	r4, r5, #220	; 0xdc
    89f0:	e2856f87 	add	r6, r5, #540	; 0x21c
    89f4:	e1a00004 	mov	r0, r4
    89f8:	e2844028 	add	r4, r4, #40	; 0x28
    89fc:	eb004bbd 	bl	1b8f8 <CGPIOPin::CGPIOPin()>
    8a00:	e1540006 	cmp	r4, r6
    8a04:	1afffffa 	bne	89f4 <BusRaider::BusRaider()+0x40>
    8a08:	e1a00004 	mov	r0, r4
    8a0c:	eb004bb9 	bl	1b8f8 <CGPIOPin::CGPIOPin()>
    8a10:	e2850f91 	add	r0, r5, #580	; 0x244
    8a14:	eb004bb7 	bl	1b8f8 <CGPIOPin::CGPIOPin()>
    8a18:	e2850f9b 	add	r0, r5, #620	; 0x26c
    8a1c:	eb004bb5 	bl	1b8f8 <CGPIOPin::CGPIOPin()>
    8a20:	e2850fa5 	add	r0, r5, #660	; 0x294
    8a24:	eb004bb3 	bl	1b8f8 <CGPIOPin::CGPIOPin()>
    8a28:	e2850faf 	add	r0, r5, #700	; 0x2bc
    8a2c:	eb004bb1 	bl	1b8f8 <CGPIOPin::CGPIOPin()>
    8a30:	e2850fb9 	add	r0, r5, #740	; 0x2e4
    8a34:	eb004baf 	bl	1b8f8 <CGPIOPin::CGPIOPin()>
    8a38:	e2850fc3 	add	r0, r5, #780	; 0x30c
    8a3c:	eb004bad 	bl	1b8f8 <CGPIOPin::CGPIOPin()>
    8a40:	e2850fcd 	add	r0, r5, #820	; 0x334
    8a44:	eb004bab 	bl	1b8f8 <CGPIOPin::CGPIOPin()>
    8a48:	e2850fd7 	add	r0, r5, #860	; 0x35c
    8a4c:	eb004ba9 	bl	1b8f8 <CGPIOPin::CGPIOPin()>
    8a50:	e2850fe1 	add	r0, r5, #900	; 0x384
    8a54:	eb004ba7 	bl	1b8f8 <CGPIOPin::CGPIOPin()>
    8a58:	e2850feb 	add	r0, r5, #940	; 0x3ac
    8a5c:	eb004ba5 	bl	1b8f8 <CGPIOPin::CGPIOPin()>
    8a60:	e3a03000 	mov	r3, #0
    8a64:	e1a00005 	mov	r0, r5
    8a68:	e5853000 	str	r3, [r5]
    8a6c:	e5c53004 	strb	r3, [r5, #4]
    8a70:	e5853008 	str	r3, [r5, #8]
    8a74:	e585300c 	str	r3, [r5, #12]
    8a78:	e5853010 	str	r3, [r5, #16]
    8a7c:	e8bd8070 	pop	{r4, r5, r6, pc}

00008a80 <BusRaider::hostReset()>:
    8a80:	e92d4070 	push	{r4, r5, r6, lr}
    8a84:	e1a05000 	mov	r5, r0
    8a88:	eb004ff6 	bl	1ca68 <CInterruptSystem::DisableFIQ()>
    8a8c:	e3a02c0e 	mov	r2, #3584	; 0xe00
    8a90:	e3a03c0a 	mov	r3, #2560	; 0xa00
    8a94:	e59f4048 	ldr	r4, [pc, #72]	; 8ae4 <BusRaider::hostReset()+0x64>
    8a98:	e3a00064 	mov	r0, #100	; 0x64
    8a9c:	e5842028 	str	r2, [r4, #40]	; 0x28
    8aa0:	e584301c 	str	r3, [r4, #28]
    8aa4:	eb006409 	bl	21ad0 <CTimer::SimpleusDelay(unsigned int)>
    8aa8:	e3a01a03 	mov	r1, #12288	; 0x3000
    8aac:	e3e03000 	mvn	r3, #0
    8ab0:	e5d50004 	ldrb	r0, [r5, #4]
    8ab4:	e5952000 	ldr	r2, [r5]
    8ab8:	e3500000 	cmp	r0, #0
    8abc:	e5841028 	str	r1, [r4, #40]	; 0x28
    8ac0:	e584201c 	str	r2, [r4, #28]
    8ac4:	e5843040 	str	r3, [r4, #64]	; 0x40
    8ac8:	0a000001 	beq	8ad4 <BusRaider::hostReset()+0x54>
    8acc:	e3a00000 	mov	r0, #0
    8ad0:	eb004f9c 	bl	1c948 <CInterruptSystem::EnableFIQ(unsigned int)>
    8ad4:	e3a02c0e 	mov	r2, #3584	; 0xe00
    8ad8:	e59f3004 	ldr	r3, [pc, #4]	; 8ae4 <BusRaider::hostReset()+0x64>
    8adc:	e5832028 	str	r2, [r3, #40]	; 0x28
    8ae0:	e8bd8070 	pop	{r4, r5, r6, pc}
    8ae4:	20200000 	.word	0x20200000

00008ae8 <BusRaider::hostResetHold()>:
    8ae8:	e92d4010 	push	{r4, lr}
    8aec:	eb004fdd 	bl	1ca68 <CInterruptSystem::DisableFIQ()>
    8af0:	e3a01c0e 	mov	r1, #3584	; 0xe00
    8af4:	e3a02c0a 	mov	r2, #2560	; 0xa00
    8af8:	e59f3008 	ldr	r3, [pc, #8]	; 8b08 <BusRaider::hostResetHold()+0x20>
    8afc:	e5831028 	str	r1, [r3, #40]	; 0x28
    8b00:	e583201c 	str	r2, [r3, #28]
    8b04:	e8bd8010 	pop	{r4, pc}
    8b08:	20200000 	.word	0x20200000

00008b0c <BusRaider::hostNMI()>:
    8b0c:	e92d4070 	push	{r4, r5, r6, lr}
    8b10:	e3a03b03 	mov	r3, #3072	; 0xc00
    8b14:	e3a05c0e 	mov	r5, #3584	; 0xe00
    8b18:	e59f4014 	ldr	r4, [pc, #20]	; 8b34 <BusRaider::hostNMI()+0x28>
    8b1c:	e3a0000a 	mov	r0, #10
    8b20:	e5845028 	str	r5, [r4, #40]	; 0x28
    8b24:	e584301c 	str	r3, [r4, #28]
    8b28:	eb0063e8 	bl	21ad0 <CTimer::SimpleusDelay(unsigned int)>
    8b2c:	e5845028 	str	r5, [r4, #40]	; 0x28
    8b30:	e8bd8070 	pop	{r4, r5, r6, pc}
    8b34:	20200000 	.word	0x20200000

00008b38 <BusRaider::hostIRQ()>:
    8b38:	e92d4070 	push	{r4, r5, r6, lr}
    8b3c:	e3a03b01 	mov	r3, #1024	; 0x400
    8b40:	e3a05c0e 	mov	r5, #3584	; 0xe00
    8b44:	e59f4014 	ldr	r4, [pc, #20]	; 8b60 <BusRaider::hostIRQ()+0x28>
    8b48:	e3a0000a 	mov	r0, #10
    8b4c:	e5845028 	str	r5, [r4, #40]	; 0x28
    8b50:	e584301c 	str	r3, [r4, #28]
    8b54:	eb0063dd 	bl	21ad0 <CTimer::SimpleusDelay(unsigned int)>
    8b58:	e5845028 	str	r5, [r4, #40]	; 0x28
    8b5c:	e8bd8070 	pop	{r4, r5, r6, pc}
    8b60:	20200000 	.word	0x20200000

00008b64 <BusRaider::controlRequestBus()>:
    8b64:	e3a00040 	mov	r0, #64	; 0x40
    8b68:	e3a01702 	mov	r1, #524288	; 0x80000
    8b6c:	e59f3014 	ldr	r3, [pc, #20]	; 8b88 <BusRaider::controlRequestBus()+0x24>
    8b70:	e5932008 	ldr	r2, [r3, #8]
    8b74:	e20224ff 	and	r2, r2, #-16777216	; 0xff000000
    8b78:	e5832008 	str	r2, [r3, #8]
    8b7c:	e583001c 	str	r0, [r3, #28]
    8b80:	e5831028 	str	r1, [r3, #40]	; 0x28
    8b84:	e12fff1e 	bx	lr
    8b88:	20200000 	.word	0x20200000

00008b8c <BusRaider::controlBusAcknowledged()>:
    8b8c:	e59f300c 	ldr	r3, [pc, #12]	; 8ba0 <BusRaider::controlBusAcknowledged()+0x14>
    8b90:	e5930034 	ldr	r0, [r3, #52]	; 0x34
    8b94:	e1e00120 	mvn	r0, r0, lsr #2
    8b98:	e2000001 	and	r0, r0, #1
    8b9c:	e12fff1e 	bx	lr
    8ba0:	20200000 	.word	0x20200000

00008ba4 <BusRaider::controlTake()>:
    8ba4:	e92d4010 	push	{r4, lr}
    8ba8:	e3a04001 	mov	r4, #1
    8bac:	eb004fad 	bl	1ca68 <CInterruptSystem::DisableFIQ()>
    8bb0:	e3a0e002 	mov	lr, #2
    8bb4:	e3a00008 	mov	r0, #8
    8bb8:	e3a0c701 	mov	ip, #262144	; 0x40000
    8bbc:	e3a01802 	mov	r1, #131072	; 0x20000
    8bc0:	e59f3064 	ldr	r3, [pc, #100]	; 8c2c <BusRaider::controlTake()+0x88>
    8bc4:	e583401c 	str	r4, [r3, #28]
    8bc8:	e5932000 	ldr	r2, [r3]
    8bcc:	e3c22007 	bic	r2, r2, #7
    8bd0:	e1822004 	orr	r2, r2, r4
    8bd4:	e5832000 	str	r2, [r3]
    8bd8:	e583401c 	str	r4, [r3, #28]
    8bdc:	e583e01c 	str	lr, [r3, #28]
    8be0:	e5932000 	ldr	r2, [r3]
    8be4:	e3c22038 	bic	r2, r2, #56	; 0x38
    8be8:	e1822000 	orr	r2, r2, r0
    8bec:	e5832000 	str	r2, [r3]
    8bf0:	e583e01c 	str	lr, [r3, #28]
    8bf4:	e583c01c 	str	ip, [r3, #28]
    8bf8:	e5932004 	ldr	r2, [r3, #4]
    8bfc:	e3c22407 	bic	r2, r2, #117440512	; 0x7000000
    8c00:	e3822401 	orr	r2, r2, #16777216	; 0x1000000
    8c04:	e5832004 	str	r2, [r3, #4]
    8c08:	e583c01c 	str	ip, [r3, #28]
    8c0c:	e583101c 	str	r1, [r3, #28]
    8c10:	e5932004 	ldr	r2, [r3, #4]
    8c14:	e3c2260e 	bic	r2, r2, #14680064	; 0xe00000
    8c18:	e3822602 	orr	r2, r2, #2097152	; 0x200000
    8c1c:	e5832004 	str	r2, [r3, #4]
    8c20:	e583101c 	str	r1, [r3, #28]
    8c24:	e5830028 	str	r0, [r3, #40]	; 0x28
    8c28:	e8bd8010 	pop	{r4, pc}
    8c2c:	20200000 	.word	0x20200000

00008c30 <BusRaider::controlRelease(bool)>:
    8c30:	e3a0c008 	mov	ip, #8
    8c34:	e59f3094 	ldr	r3, [pc, #148]	; 8cd0 <BusRaider::controlRelease(bool)+0xa0>
    8c38:	e92d4070 	push	{r4, r5, r6, lr}
    8c3c:	e5932000 	ldr	r2, [r3]
    8c40:	e5d00004 	ldrb	r0, [r0, #4]
    8c44:	e3c22007 	bic	r2, r2, #7
    8c48:	e5832000 	str	r2, [r3]
    8c4c:	e5932000 	ldr	r2, [r3]
    8c50:	e3500000 	cmp	r0, #0
    8c54:	e3c22038 	bic	r2, r2, #56	; 0x38
    8c58:	e5832000 	str	r2, [r3]
    8c5c:	e5932004 	ldr	r2, [r3, #4]
    8c60:	e1a04001 	mov	r4, r1
    8c64:	e3c22407 	bic	r2, r2, #117440512	; 0x7000000
    8c68:	e5832004 	str	r2, [r3, #4]
    8c6c:	e5932004 	ldr	r2, [r3, #4]
    8c70:	e3c2260e 	bic	r2, r2, #14680064	; 0xe00000
    8c74:	e5832004 	str	r2, [r3, #4]
    8c78:	e583c01c 	str	ip, [r3, #28]
    8c7c:	1a000010 	bne	8cc4 <BusRaider::controlRelease(bool)+0x94>
    8c80:	e3540000 	cmp	r4, #0
    8c84:	1a000003 	bne	8c98 <BusRaider::controlRelease(bool)+0x68>
    8c88:	e3a02702 	mov	r2, #524288	; 0x80000
    8c8c:	e59f303c 	ldr	r3, [pc, #60]	; 8cd0 <BusRaider::controlRelease(bool)+0xa0>
    8c90:	e583201c 	str	r2, [r3, #28]
    8c94:	e8bd8070 	pop	{r4, r5, r6, pc}
    8c98:	e3a05c0e 	mov	r5, #3584	; 0xe00
    8c9c:	e3a02c0a 	mov	r2, #2560	; 0xa00
    8ca0:	e3a03702 	mov	r3, #524288	; 0x80000
    8ca4:	e59f4024 	ldr	r4, [pc, #36]	; 8cd0 <BusRaider::controlRelease(bool)+0xa0>
    8ca8:	e3a0000a 	mov	r0, #10
    8cac:	e5845028 	str	r5, [r4, #40]	; 0x28
    8cb0:	e584201c 	str	r2, [r4, #28]
    8cb4:	e584301c 	str	r3, [r4, #28]
    8cb8:	eb006384 	bl	21ad0 <CTimer::SimpleusDelay(unsigned int)>
    8cbc:	e5845028 	str	r5, [r4, #40]	; 0x28
    8cc0:	e8bd8070 	pop	{r4, r5, r6, pc}
    8cc4:	e3a00000 	mov	r0, #0
    8cc8:	eb004f1e 	bl	1c948 <CInterruptSystem::EnableFIQ(unsigned int)>
    8ccc:	eaffffeb 	b	8c80 <BusRaider::controlRelease(bool)+0x50>
    8cd0:	20200000 	.word	0x20200000

00008cd4 <BusRaider::controlReqAndTake()>:
    8cd4:	e3a0c040 	mov	ip, #64	; 0x40
    8cd8:	e3a01702 	mov	r1, #524288	; 0x80000
    8cdc:	e59f307c 	ldr	r3, [pc, #124]	; 8d60 <BusRaider::controlReqAndTake()+0x8c>
    8ce0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8ce4:	e5932008 	ldr	r2, [r3, #8]
    8ce8:	e1a07000 	mov	r7, r0
    8cec:	e20224ff 	and	r2, r2, #-16777216	; 0xff000000
    8cf0:	e5832008 	str	r2, [r3, #8]
    8cf4:	e1a05003 	mov	r5, r3
    8cf8:	e583c01c 	str	ip, [r3, #28]
    8cfc:	e3a04064 	mov	r4, #100	; 0x64
    8d00:	e3a06001 	mov	r6, #1
    8d04:	e5831028 	str	r1, [r3, #40]	; 0x28
    8d08:	ea000003 	b	8d1c <BusRaider::controlReqAndTake()+0x48>
    8d0c:	e1a00006 	mov	r0, r6
    8d10:	eb00636e 	bl	21ad0 <CTimer::SimpleusDelay(unsigned int)>
    8d14:	e2544001 	subs	r4, r4, #1
    8d18:	0a000002 	beq	8d28 <BusRaider::controlReqAndTake()+0x54>
    8d1c:	e5953034 	ldr	r3, [r5, #52]	; 0x34
    8d20:	e3130004 	tst	r3, #4
    8d24:	1afffff8 	bne	8d0c <BusRaider::controlReqAndTake()+0x38>
    8d28:	e59f3030 	ldr	r3, [pc, #48]	; 8d60 <BusRaider::controlReqAndTake()+0x8c>
    8d2c:	e5933034 	ldr	r3, [r3, #52]	; 0x34
    8d30:	e1a03123 	lsr	r3, r3, #2
    8d34:	e2134001 	ands	r4, r3, #1
    8d38:	0a000004 	beq	8d50 <BusRaider::controlReqAndTake()+0x7c>
    8d3c:	e1a00007 	mov	r0, r7
    8d40:	e3a01000 	mov	r1, #0
    8d44:	ebffffb9 	bl	8c30 <BusRaider::controlRelease(bool)>
    8d48:	e3a00002 	mov	r0, #2
    8d4c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8d50:	e1a00007 	mov	r0, r7
    8d54:	ebffff92 	bl	8ba4 <BusRaider::controlTake()>
    8d58:	e1a00004 	mov	r0, r4
    8d5c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8d60:	20200000 	.word	0x20200000

00008d64 <BusRaider::addrLowSet(unsigned long)>:
    8d64:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    8d68:	e3a00f7d 	mov	r0, #500	; 0x1f4
    8d6c:	e59fa060 	ldr	sl, [pc, #96]	; 8dd4 <BusRaider::addrLowSet(unsigned long)+0x70>
    8d70:	e1a08001 	mov	r8, r1
    8d74:	e3a09c0e 	mov	r9, #3584	; 0xe00
    8d78:	ebfffee6 	bl	8918 <lowlevCycleDelay>
    8d7c:	e3a05f7d 	mov	r5, #500	; 0x1f4
    8d80:	e3a03b02 	mov	r3, #2048	; 0x800
    8d84:	e3a04000 	mov	r4, #0
    8d88:	e1a0700a 	mov	r7, sl
    8d8c:	e3a06801 	mov	r6, #65536	; 0x10000
    8d90:	e58a9028 	str	r9, [sl, #40]	; 0x28
    8d94:	e1a00005 	mov	r0, r5
    8d98:	e58a301c 	str	r3, [sl, #28]
    8d9c:	e6ef8078 	uxtb	r8, r8
    8da0:	ebfffedc 	bl	8918 <lowlevCycleDelay>
    8da4:	e2888001 	add	r8, r8, #1
    8da8:	e58a9028 	str	r9, [sl, #40]	; 0x28
    8dac:	e1a00005 	mov	r0, r5
    8db0:	e587601c 	str	r6, [r7, #28]
    8db4:	ebfffed7 	bl	8918 <lowlevCycleDelay>
    8db8:	e2844001 	add	r4, r4, #1
    8dbc:	e5876028 	str	r6, [r7, #40]	; 0x28
    8dc0:	e1a00005 	mov	r0, r5
    8dc4:	ebfffed3 	bl	8918 <lowlevCycleDelay>
    8dc8:	e1540008 	cmp	r4, r8
    8dcc:	1afffff6 	bne	8dac <BusRaider::addrLowSet(unsigned long)+0x48>
    8dd0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    8dd4:	20200000 	.word	0x20200000

00008dd8 <BusRaider::addrLowInc()>:
    8dd8:	e92d4070 	push	{r4, r5, r6, lr}
    8ddc:	e3a05801 	mov	r5, #65536	; 0x10000
    8de0:	e59f4018 	ldr	r4, [pc, #24]	; 8e00 <BusRaider::addrLowInc()+0x28>
    8de4:	e3a00f7d 	mov	r0, #500	; 0x1f4
    8de8:	e584501c 	str	r5, [r4, #28]
    8dec:	ebfffec9 	bl	8918 <lowlevCycleDelay>
    8df0:	e5845028 	str	r5, [r4, #40]	; 0x28
    8df4:	e3a00f7d 	mov	r0, #500	; 0x1f4
    8df8:	e8bd4070 	pop	{r4, r5, r6, lr}
    8dfc:	eafffec5 	b	8918 <lowlevCycleDelay>
    8e00:	20200000 	.word	0x20200000

00008e04 <BusRaider::addrHighSet(unsigned long)>:
    8e04:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    8e08:	e1a05001 	mov	r5, r1
    8e0c:	e3a06009 	mov	r6, #9
    8e10:	e3a09c0e 	mov	r9, #3584	; 0xe00
    8e14:	e3a08f7d 	mov	r8, #500	; 0x1f4
    8e18:	e3a07080 	mov	r7, #128	; 0x80
    8e1c:	e59f4044 	ldr	r4, [pc, #68]	; 8e68 <BusRaider::addrHighSet(unsigned long)+0x64>
    8e20:	e2153080 	ands	r3, r5, #128	; 0x80
    8e24:	e5849028 	str	r9, [r4, #40]	; 0x28
    8e28:	e1a00008 	mov	r0, r8
    8e2c:	1584901c 	strne	r9, [r4, #28]
    8e30:	0584301c 	streq	r3, [r4, #28]
    8e34:	ebfffeb7 	bl	8918 <lowlevCycleDelay>
    8e38:	e584701c 	str	r7, [r4, #28]
    8e3c:	e1a00008 	mov	r0, r8
    8e40:	ebfffeb4 	bl	8918 <lowlevCycleDelay>
    8e44:	e2566001 	subs	r6, r6, #1
    8e48:	e1a05085 	lsl	r5, r5, #1
    8e4c:	e5847028 	str	r7, [r4, #40]	; 0x28
    8e50:	1afffff2 	bne	8e20 <BusRaider::addrHighSet(unsigned long)+0x1c>
    8e54:	e3a00f7d 	mov	r0, #500	; 0x1f4
    8e58:	ebfffeae 	bl	8918 <lowlevCycleDelay>
    8e5c:	e3a03c0e 	mov	r3, #3584	; 0xe00
    8e60:	e5843028 	str	r3, [r4, #40]	; 0x28
    8e64:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    8e68:	20200000 	.word	0x20200000

00008e6c <BusRaider::addrSet(unsigned int)>:
    8e6c:	e92d4070 	push	{r4, r5, r6, lr}
    8e70:	e1a04001 	mov	r4, r1
    8e74:	e1a05000 	mov	r5, r0
    8e78:	e1a01421 	lsr	r1, r1, #8
    8e7c:	ebffffe0 	bl	8e04 <BusRaider::addrHighSet(unsigned long)>
    8e80:	e6ef1074 	uxtb	r1, r4
    8e84:	e1a00005 	mov	r0, r5
    8e88:	e8bd4070 	pop	{r4, r5, r6, lr}
    8e8c:	eaffffb4 	b	8d64 <BusRaider::addrLowSet(unsigned long)>

00008e90 <BusRaider::byteWrite(unsigned long, int)>:
    8e90:	e1a01a01 	lsl	r1, r1, #20
    8e94:	e20116ff 	and	r1, r1, #267386880	; 0xff00000
    8e98:	e1e00001 	mvn	r0, r1
    8e9c:	e59f3074 	ldr	r3, [pc, #116]	; 8f18 <BusRaider::byteWrite(unsigned long, int)+0x88>
    8ea0:	e20006ff 	and	r0, r0, #267386880	; 0xff00000
    8ea4:	e3520000 	cmp	r2, #0
    8ea8:	e92d4010 	push	{r4, lr}
    8eac:	e583101c 	str	r1, [r3, #28]
    8eb0:	e5830028 	str	r0, [r3, #40]	; 0x28
    8eb4:	0a00000d 	beq	8ef0 <BusRaider::byteWrite(unsigned long, int)+0x60>
    8eb8:	e3a02802 	mov	r2, #131072	; 0x20000
    8ebc:	e3a01c02 	mov	r1, #512	; 0x200
    8ec0:	e59fc054 	ldr	ip, [pc, #84]	; 8f1c <BusRaider::byteWrite(unsigned long, int)+0x8c>
    8ec4:	e3a00f7d 	mov	r0, #500	; 0x1f4
    8ec8:	e583c028 	str	ip, [r3, #40]	; 0x28
    8ecc:	e583101c 	str	r1, [r3, #28]
    8ed0:	e5832028 	str	r2, [r3, #40]	; 0x28
    8ed4:	ebfffe8f 	bl	8918 <lowlevCycleDelay>
    8ed8:	e59f2040 	ldr	r2, [pc, #64]	; 8f20 <BusRaider::byteWrite(unsigned long, int)+0x90>
    8edc:	e3a01c0e 	mov	r1, #3584	; 0xe00
    8ee0:	e59f3030 	ldr	r3, [pc, #48]	; 8f18 <BusRaider::byteWrite(unsigned long, int)+0x88>
    8ee4:	e583201c 	str	r2, [r3, #28]
    8ee8:	e5831028 	str	r1, [r3, #40]	; 0x28
    8eec:	e8bd8010 	pop	{r4, pc}
    8ef0:	e3a02802 	mov	r2, #131072	; 0x20000
    8ef4:	e3a01c02 	mov	r1, #512	; 0x200
    8ef8:	e59fc024 	ldr	ip, [pc, #36]	; 8f24 <BusRaider::byteWrite(unsigned long, int)+0x94>
    8efc:	e3a00f7d 	mov	r0, #500	; 0x1f4
    8f00:	e583c028 	str	ip, [r3, #40]	; 0x28
    8f04:	e583101c 	str	r1, [r3, #28]
    8f08:	e5832028 	str	r2, [r3, #40]	; 0x28
    8f0c:	ebfffe81 	bl	8918 <lowlevCycleDelay>
    8f10:	e59f2010 	ldr	r2, [pc, #16]	; 8f28 <BusRaider::byteWrite(unsigned long, int)+0x98>
    8f14:	eafffff0 	b	8edc <BusRaider::byteWrite(unsigned long, int)+0x4c>
    8f18:	20200000 	.word	0x20200000
    8f1c:	00000e42 	.word	0x00000e42
    8f20:	00020042 	.word	0x00020042
    8f24:	00000e41 	.word	0x00000e41
    8f28:	00020041 	.word	0x00020041

00008f2c <BusRaider::byteRead(int)>:
    8f2c:	e3510000 	cmp	r1, #0
    8f30:	e92d4010 	push	{r4, lr}
    8f34:	e3a03c02 	mov	r3, #512	; 0x200
    8f38:	e59f4060 	ldr	r4, [pc, #96]	; 8fa0 <BusRaider::byteRead(int)+0x74>
    8f3c:	1a00000d 	bne	8f78 <BusRaider::byteRead(int)+0x4c>
    8f40:	e59f205c 	ldr	r2, [pc, #92]	; 8fa4 <BusRaider::byteRead(int)+0x78>
    8f44:	e3a00f7d 	mov	r0, #500	; 0x1f4
    8f48:	e5842028 	str	r2, [r4, #40]	; 0x28
    8f4c:	e584301c 	str	r3, [r4, #28]
    8f50:	ebfffe70 	bl	8918 <lowlevCycleDelay>
    8f54:	e5940034 	ldr	r0, [r4, #52]	; 0x34
    8f58:	e59f2048 	ldr	r2, [pc, #72]	; 8fa8 <BusRaider::byteRead(int)+0x7c>
    8f5c:	e1a00a20 	lsr	r0, r0, #20
    8f60:	e6ef0070 	uxtb	r0, r0
    8f64:	e3a01c0e 	mov	r1, #3584	; 0xe00
    8f68:	e59f3030 	ldr	r3, [pc, #48]	; 8fa0 <BusRaider::byteRead(int)+0x74>
    8f6c:	e583201c 	str	r2, [r3, #28]
    8f70:	e5831028 	str	r1, [r3, #40]	; 0x28
    8f74:	e8bd8010 	pop	{r4, pc}
    8f78:	e59f202c 	ldr	r2, [pc, #44]	; 8fac <BusRaider::byteRead(int)+0x80>
    8f7c:	e3a00f7d 	mov	r0, #500	; 0x1f4
    8f80:	e5842028 	str	r2, [r4, #40]	; 0x28
    8f84:	e584301c 	str	r3, [r4, #28]
    8f88:	ebfffe62 	bl	8918 <lowlevCycleDelay>
    8f8c:	e5940034 	ldr	r0, [r4, #52]	; 0x34
    8f90:	e59f2018 	ldr	r2, [pc, #24]	; 8fb0 <BusRaider::byteRead(int)+0x84>
    8f94:	e1a00a20 	lsr	r0, r0, #20
    8f98:	e6ef0070 	uxtb	r0, r0
    8f9c:	eafffff0 	b	8f64 <BusRaider::byteRead(int)+0x38>
    8fa0:	20200000 	.word	0x20200000
    8fa4:	00040e01 	.word	0x00040e01
    8fa8:	00040001 	.word	0x00040001
    8fac:	00040e02 	.word	0x00040e02
    8fb0:	00040002 	.word	0x00040002

00008fb4 <BusRaider::blockWrite(unsigned long, unsigned char const*, unsigned long, int, int)>:
    8fb4:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8fb8:	e1a09002 	mov	r9, r2
    8fbc:	e59d2028 	ldr	r2, [sp, #40]	; 0x28
    8fc0:	e1a0a003 	mov	sl, r3
    8fc4:	e3520000 	cmp	r2, #0
    8fc8:	e1a07000 	mov	r7, r0
    8fcc:	e1a08001 	mov	r8, r1
    8fd0:	0a000034 	beq	90a8 <BusRaider::blockWrite(unsigned long, unsigned char const*, unsigned long, int, int)+0xf4>
    8fd4:	ebffff3e 	bl	8cd4 <BusRaider::controlReqAndTake()>
    8fd8:	e3500000 	cmp	r0, #0
    8fdc:	1a00004a 	bne	910c <BusRaider::blockWrite(unsigned long, unsigned char const*, unsigned long, int, int)+0x158>
    8fe0:	e59f4128 	ldr	r4, [pc, #296]	; 9110 <BusRaider::blockWrite(unsigned long, unsigned char const*, unsigned long, int, int)+0x15c>
    8fe4:	e1a01008 	mov	r1, r8
    8fe8:	e5943008 	ldr	r3, [r4, #8]
    8fec:	e1a00007 	mov	r0, r7
    8ff0:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
    8ff4:	e5843008 	str	r3, [r4, #8]
    8ff8:	ebffff9b 	bl	8e6c <BusRaider::addrSet(unsigned int)>
    8ffc:	e5942008 	ldr	r2, [r4, #8]
    9000:	e59f310c 	ldr	r3, [pc, #268]	; 9114 <BusRaider::blockWrite(unsigned long, unsigned char const*, unsigned long, int, int)+0x160>
    9004:	e20224ff 	and	r2, r2, #-16777216	; 0xff000000
    9008:	e1823003 	orr	r3, r2, r3
    900c:	e35a0000 	cmp	sl, #0
    9010:	e5843008 	str	r3, [r4, #8]
    9014:	0a000034 	beq	90ec <BusRaider::blockWrite(unsigned long, unsigned char const*, unsigned long, int, int)+0x138>
    9018:	e1a0b009 	mov	fp, r9
    901c:	e3a06801 	mov	r6, #65536	; 0x10000
    9020:	e3a05f7d 	mov	r5, #500	; 0x1f4
    9024:	e59f40e4 	ldr	r4, [pc, #228]	; 9110 <BusRaider::blockWrite(unsigned long, unsigned char const*, unsigned long, int, int)+0x15c>
    9028:	e0488009 	sub	r8, r8, r9
    902c:	ea000002 	b	903c <BusRaider::blockWrite(unsigned long, unsigned char const*, unsigned long, int, int)+0x88>
    9030:	e04b2009 	sub	r2, fp, r9
    9034:	e152000a 	cmp	r2, sl
    9038:	2a000011 	bcs	9084 <BusRaider::blockWrite(unsigned long, unsigned char const*, unsigned long, int, int)+0xd0>
    903c:	e4db1001 	ldrb	r1, [fp], #1
    9040:	e59d202c 	ldr	r2, [sp, #44]	; 0x2c
    9044:	e1a00007 	mov	r0, r7
    9048:	ebffff90 	bl	8e90 <BusRaider::byteWrite(unsigned long, int)>
    904c:	e1a00005 	mov	r0, r5
    9050:	e584601c 	str	r6, [r4, #28]
    9054:	ebfffe2f 	bl	8918 <lowlevCycleDelay>
    9058:	e5846028 	str	r6, [r4, #40]	; 0x28
    905c:	e1a00005 	mov	r0, r5
    9060:	ebfffe2c 	bl	8918 <lowlevCycleDelay>
    9064:	e08b1008 	add	r1, fp, r8
    9068:	e31100ff 	tst	r1, #255	; 0xff
    906c:	1affffef 	bne	9030 <BusRaider::blockWrite(unsigned long, unsigned char const*, unsigned long, int, int)+0x7c>
    9070:	e1a00007 	mov	r0, r7
    9074:	ebffff7c 	bl	8e6c <BusRaider::addrSet(unsigned int)>
    9078:	e04b2009 	sub	r2, fp, r9
    907c:	e152000a 	cmp	r2, sl
    9080:	3affffed 	bcc	903c <BusRaider::blockWrite(unsigned long, unsigned char const*, unsigned long, int, int)+0x88>
    9084:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
    9088:	e59f2080 	ldr	r2, [pc, #128]	; 9110 <BusRaider::blockWrite(unsigned long, unsigned char const*, unsigned long, int, int)+0x15c>
    908c:	e3530000 	cmp	r3, #0
    9090:	e5923008 	ldr	r3, [r2, #8]
    9094:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
    9098:	e5823008 	str	r3, [r2, #8]
    909c:	1a000015 	bne	90f8 <BusRaider::blockWrite(unsigned long, unsigned char const*, unsigned long, int, int)+0x144>
    90a0:	e3a00000 	mov	r0, #0
    90a4:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    90a8:	e59f4060 	ldr	r4, [pc, #96]	; 9110 <BusRaider::blockWrite(unsigned long, unsigned char const*, unsigned long, int, int)+0x15c>
    90ac:	e5943008 	ldr	r3, [r4, #8]
    90b0:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
    90b4:	e5843008 	str	r3, [r4, #8]
    90b8:	ebffff6b 	bl	8e6c <BusRaider::addrSet(unsigned int)>
    90bc:	e5942008 	ldr	r2, [r4, #8]
    90c0:	e59f304c 	ldr	r3, [pc, #76]	; 9114 <BusRaider::blockWrite(unsigned long, unsigned char const*, unsigned long, int, int)+0x160>
    90c4:	e20224ff 	and	r2, r2, #-16777216	; 0xff000000
    90c8:	e1823003 	orr	r3, r2, r3
    90cc:	e35a0000 	cmp	sl, #0
    90d0:	e5843008 	str	r3, [r4, #8]
    90d4:	1affffcf 	bne	9018 <BusRaider::blockWrite(unsigned long, unsigned char const*, unsigned long, int, int)+0x64>
    90d8:	e5943008 	ldr	r3, [r4, #8]
    90dc:	e1a0000a 	mov	r0, sl
    90e0:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
    90e4:	e5843008 	str	r3, [r4, #8]
    90e8:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    90ec:	e5943008 	ldr	r3, [r4, #8]
    90f0:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
    90f4:	e5843008 	str	r3, [r4, #8]
    90f8:	e1a00007 	mov	r0, r7
    90fc:	e3a01000 	mov	r1, #0
    9100:	ebfffeca 	bl	8c30 <BusRaider::controlRelease(bool)>
    9104:	e3a00000 	mov	r0, #0
    9108:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    910c:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9110:	20200000 	.word	0x20200000
    9114:	00249249 	.word	0x00249249

00009118 <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)>:
    9118:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    911c:	e24dd00c 	sub	sp, sp, #12
    9120:	e1a07002 	mov	r7, r2
    9124:	e59d2030 	ldr	r2, [sp, #48]	; 0x30
    9128:	e1a09003 	mov	r9, r3
    912c:	e3520000 	cmp	r2, #0
    9130:	e58d0004 	str	r0, [sp, #4]
    9134:	e1a06001 	mov	r6, r1
    9138:	0a00003d 	beq	9234 <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0x11c>
    913c:	ebfffee4 	bl	8cd4 <BusRaider::controlReqAndTake()>
    9140:	e3500000 	cmp	r0, #0
    9144:	1a000038 	bne	922c <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0x114>
    9148:	e59f4134 	ldr	r4, [pc, #308]	; 9284 <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0x16c>
    914c:	e59d0004 	ldr	r0, [sp, #4]
    9150:	e5943008 	ldr	r3, [r4, #8]
    9154:	e1a01006 	mov	r1, r6
    9158:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
    915c:	e5843008 	str	r3, [r4, #8]
    9160:	ebffff41 	bl	8e6c <BusRaider::addrSet(unsigned int)>
    9164:	e3a03c02 	mov	r3, #512	; 0x200
    9168:	e3590000 	cmp	r9, #0
    916c:	e584301c 	str	r3, [r4, #28]
    9170:	0a00003c 	beq	9268 <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0x150>
    9174:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
    9178:	e0466007 	sub	r6, r6, r7
    917c:	e3530000 	cmp	r3, #0
    9180:	e1a03006 	mov	r3, r6
    9184:	e59f20fc 	ldr	r2, [pc, #252]	; 9288 <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0x170>
    9188:	e59f80fc 	ldr	r8, [pc, #252]	; 928c <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0x174>
    918c:	e3a05f7d 	mov	r5, #500	; 0x1f4
    9190:	01a08002 	moveq	r8, r2
    9194:	e3a0b801 	mov	fp, #65536	; 0x10000
    9198:	e59f40e4 	ldr	r4, [pc, #228]	; 9284 <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0x16c>
    919c:	e1a06007 	mov	r6, r7
    91a0:	e1a0a003 	mov	sl, r3
    91a4:	ea000002 	b	91b4 <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0x9c>
    91a8:	e0462007 	sub	r2, r6, r7
    91ac:	e1520009 	cmp	r2, r9
    91b0:	2a000016 	bcs	9210 <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0xf8>
    91b4:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
    91b8:	e3530000 	cmp	r3, #0
    91bc:	159f30cc 	ldrne	r3, [pc, #204]	; 9290 <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0x178>
    91c0:	059f30cc 	ldreq	r3, [pc, #204]	; 9294 <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0x17c>
    91c4:	e5843028 	str	r3, [r4, #40]	; 0x28
    91c8:	e1a00005 	mov	r0, r5
    91cc:	ebfffdd1 	bl	8918 <lowlevCycleDelay>
    91d0:	e5942034 	ldr	r2, [r4, #52]	; 0x34
    91d4:	e2866001 	add	r6, r6, #1
    91d8:	e1a02a22 	lsr	r2, r2, #20
    91dc:	e5462001 	strb	r2, [r6, #-1]
    91e0:	e1a00005 	mov	r0, r5
    91e4:	e584801c 	str	r8, [r4, #28]
    91e8:	ebfffdca 	bl	8918 <lowlevCycleDelay>
    91ec:	e086100a 	add	r1, r6, sl
    91f0:	e31100ff 	tst	r1, #255	; 0xff
    91f4:	e584b028 	str	fp, [r4, #40]	; 0x28
    91f8:	1affffea 	bne	91a8 <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0x90>
    91fc:	e59d0004 	ldr	r0, [sp, #4]
    9200:	ebffff19 	bl	8e6c <BusRaider::addrSet(unsigned int)>
    9204:	e0462007 	sub	r2, r6, r7
    9208:	e1520009 	cmp	r2, r9
    920c:	3affffe8 	bcc	91b4 <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0x9c>
    9210:	e3a02c0e 	mov	r2, #3584	; 0xe00
    9214:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
    9218:	e59f3064 	ldr	r3, [pc, #100]	; 9284 <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0x16c>
    921c:	e3510000 	cmp	r1, #0
    9220:	e5832028 	str	r2, [r3, #40]	; 0x28
    9224:	1a000011 	bne	9270 <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0x158>
    9228:	e3a00000 	mov	r0, #0
    922c:	e28dd00c 	add	sp, sp, #12
    9230:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9234:	e59f4048 	ldr	r4, [pc, #72]	; 9284 <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0x16c>
    9238:	e5943008 	ldr	r3, [r4, #8]
    923c:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
    9240:	e5843008 	str	r3, [r4, #8]
    9244:	ebffff08 	bl	8e6c <BusRaider::addrSet(unsigned int)>
    9248:	e3a03c02 	mov	r3, #512	; 0x200
    924c:	e3590000 	cmp	r9, #0
    9250:	e584301c 	str	r3, [r4, #28]
    9254:	1affffc6 	bne	9174 <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0x5c>
    9258:	e3a03c0e 	mov	r3, #3584	; 0xe00
    925c:	e1a00009 	mov	r0, r9
    9260:	e5843028 	str	r3, [r4, #40]	; 0x28
    9264:	eafffff0 	b	922c <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0x114>
    9268:	e3a03c0e 	mov	r3, #3584	; 0xe00
    926c:	e5843028 	str	r3, [r4, #40]	; 0x28
    9270:	e59d0004 	ldr	r0, [sp, #4]
    9274:	e3a01000 	mov	r1, #0
    9278:	ebfffe6c 	bl	8c30 <BusRaider::controlRelease(bool)>
    927c:	e3a00000 	mov	r0, #0
    9280:	eaffffe9 	b	922c <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0x114>
    9284:	20200000 	.word	0x20200000
    9288:	00050001 	.word	0x00050001
    928c:	00050002 	.word	0x00050002
    9290:	00040002 	.word	0x00040002
    9294:	00040001 	.word	0x00040001

00009298 <BusRaider::muxSet(int)>:
    9298:	e3a02c0e 	mov	r2, #3584	; 0xe00
    929c:	e59f300c 	ldr	r3, [pc, #12]	; 92b0 <BusRaider::muxSet(int)+0x18>
    92a0:	e1a01481 	lsl	r1, r1, #9
    92a4:	e5832028 	str	r2, [r3, #40]	; 0x28
    92a8:	e583101c 	str	r1, [r3, #28]
    92ac:	e12fff1e 	bx	lr
    92b0:	20200000 	.word	0x20200000

000092b4 <BusRaider::muxClear()>:
    92b4:	e3a02c0e 	mov	r2, #3584	; 0xe00
    92b8:	e59f3004 	ldr	r3, [pc, #4]	; 92c4 <BusRaider::muxClear()+0x10>
    92bc:	e5832028 	str	r2, [r3, #40]	; 0x28
    92c0:	e12fff1e 	bx	lr
    92c4:	20200000 	.word	0x20200000

000092c8 <BusRaider::waitIntClear()>:
    92c8:	e3e02000 	mvn	r2, #0
    92cc:	e59f3004 	ldr	r3, [pc, #4]	; 92d8 <BusRaider::waitIntClear()+0x10>
    92d0:	e5832040 	str	r2, [r3, #64]	; 0x40
    92d4:	e12fff1e 	bx	lr
    92d8:	20200000 	.word	0x20200000

000092dc <BusRaider::waitIntDisable()>:
    92dc:	ea004de1 	b	1ca68 <CInterruptSystem::DisableFIQ()>

000092e0 <BusRaider::waitIntEnable()>:
    92e0:	e3a00000 	mov	r0, #0
    92e4:	ea004d97 	b	1c948 <CInterruptSystem::EnableFIQ(unsigned int)>

000092e8 <BusRaider::pibSetOut()>:
    92e8:	e59f1014 	ldr	r1, [pc, #20]	; 9304 <BusRaider::pibSetOut()+0x1c>
    92ec:	e59f3014 	ldr	r3, [pc, #20]	; 9308 <BusRaider::pibSetOut()+0x20>
    92f0:	e5912008 	ldr	r2, [r1, #8]
    92f4:	e20224ff 	and	r2, r2, #-16777216	; 0xff000000
    92f8:	e1823003 	orr	r3, r2, r3
    92fc:	e5813008 	str	r3, [r1, #8]
    9300:	e12fff1e 	bx	lr
    9304:	20200000 	.word	0x20200000
    9308:	00249249 	.word	0x00249249

0000930c <BusRaider::pibSetIn()>:
    930c:	e59f200c 	ldr	r2, [pc, #12]	; 9320 <BusRaider::pibSetIn()+0x14>
    9310:	e5923008 	ldr	r3, [r2, #8]
    9314:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
    9318:	e5823008 	str	r3, [r2, #8]
    931c:	e12fff1e 	bx	lr
    9320:	20200000 	.word	0x20200000

00009324 <BusRaider::pibSetValue(unsigned char)>:
    9324:	e1a01a01 	lsl	r1, r1, #20
    9328:	e1e03001 	mvn	r3, r1
    932c:	e59f200c 	ldr	r2, [pc, #12]	; 9340 <BusRaider::pibSetValue(unsigned char)+0x1c>
    9330:	e20336ff 	and	r3, r3, #267386880	; 0xff00000
    9334:	e582101c 	str	r1, [r2, #28]
    9338:	e5823028 	str	r3, [r2, #40]	; 0x28
    933c:	e12fff1e 	bx	lr
    9340:	20200000 	.word	0x20200000

00009344 <BusRaider::pibGetValue()>:
    9344:	e59f300c 	ldr	r3, [pc, #12]	; 9358 <BusRaider::pibGetValue()+0x14>
    9348:	e5930034 	ldr	r0, [r3, #52]	; 0x34
    934c:	e1a00a20 	lsr	r0, r0, #20
    9350:	e6ef0070 	uxtb	r0, r0
    9354:	e12fff1e 	bx	lr
    9358:	20200000 	.word	0x20200000

0000935c <BusRaider::pinRawMode(int, bool, bool)>:
    935c:	e3520000 	cmp	r2, #0
    9360:	1a000028 	bne	9408 <BusRaider::pinRawMode(int, bool, bool)+0xac>
    9364:	e3530000 	cmp	r3, #0
    9368:	e92d4010 	push	{r4, lr}
    936c:	e1a04003 	mov	r4, r3
    9370:	1a000034 	bne	9448 <BusRaider::pinRawMode(int, bool, bool)+0xec>
    9374:	e3a03001 	mov	r3, #1
    9378:	e351001f 	cmp	r1, #31
    937c:	d59f20dc 	ldrle	r2, [pc, #220]	; 9460 <BusRaider::pinRawMode(int, bool, bool)+0x104>
    9380:	c2410020 	subgt	r0, r1, #32
    9384:	c59f20d4 	ldrgt	r2, [pc, #212]	; 9460 <BusRaider::pinRawMode(int, bool, bool)+0x104>
    9388:	d1a03113 	lslle	r3, r3, r1
    938c:	c1a03013 	lslgt	r3, r3, r0
    9390:	d5823028 	strle	r3, [r2, #40]	; 0x28
    9394:	c582302c 	strgt	r3, [r2, #44]	; 0x2c
    9398:	e3a03001 	mov	r3, #1
    939c:	e3a0c007 	mov	ip, #7
    93a0:	e59f00bc 	ldr	r0, [pc, #188]	; 9464 <BusRaider::pinRawMode(int, bool, bool)+0x108>
    93a4:	e1a02fc1 	asr	r2, r1, #31
    93a8:	e0c0e190 	smull	lr, r0, r0, r1
    93ac:	e0622140 	rsb	r2, r2, r0, asr #2
    93b0:	e2820302 	add	r0, r2, #134217728	; 0x8000000
    93b4:	e2800702 	add	r0, r0, #524288	; 0x80000
    93b8:	e0822102 	add	r2, r2, r2, lsl #2
    93bc:	e1a00100 	lsl	r0, r0, #2
    93c0:	e0412312 	sub	r2, r1, r2, lsl r3
    93c4:	e590e000 	ldr	lr, [r0]
    93c8:	e0822312 	add	r2, r2, r2, lsl r3
    93cc:	e6ef2072 	uxtb	r2, r2
    93d0:	e1cec21c 	bic	ip, lr, ip, lsl r2
    93d4:	e18c2213 	orr	r2, ip, r3, lsl r2
    93d8:	e3540000 	cmp	r4, #0
    93dc:	e5802000 	str	r2, [r0]
    93e0:	1a00001b 	bne	9454 <BusRaider::pinRawMode(int, bool, bool)+0xf8>
    93e4:	e351001f 	cmp	r1, #31
    93e8:	d59f2070 	ldrle	r2, [pc, #112]	; 9460 <BusRaider::pinRawMode(int, bool, bool)+0x104>
    93ec:	c2411020 	subgt	r1, r1, #32
    93f0:	c59f2068 	ldrgt	r2, [pc, #104]	; 9460 <BusRaider::pinRawMode(int, bool, bool)+0x104>
    93f4:	d1a01113 	lslle	r1, r3, r1
    93f8:	c1a03113 	lslgt	r3, r3, r1
    93fc:	d5821028 	strle	r1, [r2, #40]	; 0x28
    9400:	c582302c 	strgt	r3, [r2, #44]	; 0x2c
    9404:	e8bd8010 	pop	{r4, pc}
    9408:	e3a00007 	mov	r0, #7
    940c:	e59f2050 	ldr	r2, [pc, #80]	; 9464 <BusRaider::pinRawMode(int, bool, bool)+0x108>
    9410:	e1a03fc1 	asr	r3, r1, #31
    9414:	e0c2c192 	smull	ip, r2, r2, r1
    9418:	e0633142 	rsb	r3, r3, r2, asr #2
    941c:	e2832302 	add	r2, r3, #134217728	; 0x8000000
    9420:	e2822702 	add	r2, r2, #524288	; 0x80000
    9424:	e0833103 	add	r3, r3, r3, lsl #2
    9428:	e1a02102 	lsl	r2, r2, #2
    942c:	e0411083 	sub	r1, r1, r3, lsl #1
    9430:	e0811081 	add	r1, r1, r1, lsl #1
    9434:	e5923000 	ldr	r3, [r2]
    9438:	e6ef1071 	uxtb	r1, r1
    943c:	e1c31110 	bic	r1, r3, r0, lsl r1
    9440:	e5821000 	str	r1, [r2]
    9444:	e12fff1e 	bx	lr
    9448:	e1a00001 	mov	r0, r1
    944c:	ebfffd4d 	bl	8988 <BusRaider::pinRawWrite(int, bool) [clone .part.0]>
    9450:	eaffffd0 	b	9398 <BusRaider::pinRawMode(int, bool, bool)+0x3c>
    9454:	e1a00001 	mov	r0, r1
    9458:	e8bd4010 	pop	{r4, lr}
    945c:	eafffd49 	b	8988 <BusRaider::pinRawWrite(int, bool) [clone .part.0]>
    9460:	20200000 	.word	0x20200000
    9464:	66666667 	.word	0x66666667

00009468 <BusRaider::setPinOut(CGPIOPin&, int, bool)>:
    9468:	e1a01002 	mov	r1, r2
    946c:	e3a02000 	mov	r2, #0
    9470:	eaffffb9 	b	935c <BusRaider::pinRawMode(int, bool, bool)>

00009474 <BusRaider::setPinIn(CGPIOPin&, int)>:
    9474:	e1a01002 	mov	r1, r2
    9478:	e3a03000 	mov	r3, #0
    947c:	e3a02001 	mov	r2, #1
    9480:	eaffffb5 	b	935c <BusRaider::pinRawMode(int, bool, bool)>

00009484 <BusRaider::init()>:
    9484:	e92d4070 	push	{r4, r5, r6, lr}
    9488:	e1a04000 	mov	r4, r0
    948c:	eb004d75 	bl	1ca68 <CInterruptSystem::DisableFIQ()>
    9490:	e3a03000 	mov	r3, #0
    9494:	e1a00004 	mov	r0, r4
    9498:	e1a02003 	mov	r2, r3
    949c:	e3a0100b 	mov	r1, #11
    94a0:	ebffffad 	bl	935c <BusRaider::pinRawMode(int, bool, bool)>
    94a4:	e3a03000 	mov	r3, #0
    94a8:	e1a00004 	mov	r0, r4
    94ac:	e1a02003 	mov	r2, r3
    94b0:	e3a01009 	mov	r1, #9
    94b4:	ebffffa8 	bl	935c <BusRaider::pinRawMode(int, bool, bool)>
    94b8:	e3a03000 	mov	r3, #0
    94bc:	e1a00004 	mov	r0, r4
    94c0:	e1a02003 	mov	r2, r3
    94c4:	e3a0100a 	mov	r1, #10
    94c8:	ebffffa3 	bl	935c <BusRaider::pinRawMode(int, bool, bool)>
    94cc:	e1a00004 	mov	r0, r4
    94d0:	e3a03001 	mov	r3, #1
    94d4:	e3a02000 	mov	r2, #0
    94d8:	e3a01013 	mov	r1, #19
    94dc:	ebffff9e 	bl	935c <BusRaider::pinRawMode(int, bool, bool)>
    94e0:	e3a03000 	mov	r3, #0
    94e4:	e59fc130 	ldr	ip, [pc, #304]	; 961c <BusRaider::init()+0x198>
    94e8:	e1a05003 	mov	r5, r3
    94ec:	e59c2000 	ldr	r2, [ip]
    94f0:	e1a00004 	mov	r0, r4
    94f4:	e3c22d07 	bic	r2, r2, #448	; 0x1c0
    94f8:	e58c2000 	str	r2, [ip]
    94fc:	e59c1008 	ldr	r1, [ip, #8]
    9500:	e1a02003 	mov	r2, r3
    9504:	e3c11007 	bic	r1, r1, #7
    9508:	e58c1008 	str	r1, [ip, #8]
    950c:	e59ce008 	ldr	lr, [ip, #8]
    9510:	e3a0100d 	mov	r1, #13
    9514:	e3cee038 	bic	lr, lr, #56	; 0x38
    9518:	e58ce008 	str	lr, [ip, #8]
    951c:	e59ce008 	ldr	lr, [ip, #8]
    9520:	e3ceed07 	bic	lr, lr, #448	; 0x1c0
    9524:	e58ce008 	str	lr, [ip, #8]
    9528:	e59ce008 	ldr	lr, [ip, #8]
    952c:	e3ceec0e 	bic	lr, lr, #3584	; 0xe00
    9530:	e58ce008 	str	lr, [ip, #8]
    9534:	e59ce008 	ldr	lr, [ip, #8]
    9538:	e3ceea07 	bic	lr, lr, #28672	; 0x7000
    953c:	e58ce008 	str	lr, [ip, #8]
    9540:	e59ce008 	ldr	lr, [ip, #8]
    9544:	e3cee90e 	bic	lr, lr, #229376	; 0x38000
    9548:	e58ce008 	str	lr, [ip, #8]
    954c:	e59ce008 	ldr	lr, [ip, #8]
    9550:	e3cee707 	bic	lr, lr, #1835008	; 0x1c0000
    9554:	e58ce008 	str	lr, [ip, #8]
    9558:	e59ce008 	ldr	lr, [ip, #8]
    955c:	e3cee60e 	bic	lr, lr, #14680064	; 0xe00000
    9560:	e58ce008 	str	lr, [ip, #8]
    9564:	e59ce000 	ldr	lr, [ip]
    9568:	e3cee007 	bic	lr, lr, #7
    956c:	e58ce000 	str	lr, [ip]
    9570:	e59ce000 	ldr	lr, [ip]
    9574:	e3cee038 	bic	lr, lr, #56	; 0x38
    9578:	e58ce000 	str	lr, [ip]
    957c:	e59ce004 	ldr	lr, [ip, #4]
    9580:	e3cee407 	bic	lr, lr, #117440512	; 0x7000000
    9584:	e58ce004 	str	lr, [ip, #4]
    9588:	e59ce004 	ldr	lr, [ip, #4]
    958c:	e3cee60e 	bic	lr, lr, #14680064	; 0xe00000
    9590:	e58ce004 	str	lr, [ip, #4]
    9594:	ebffff70 	bl	935c <BusRaider::pinRawMode(int, bool, bool)>
    9598:	e1a03005 	mov	r3, r5
    959c:	e1a00004 	mov	r0, r4
    95a0:	e1a02005 	mov	r2, r5
    95a4:	e3a0100c 	mov	r1, #12
    95a8:	ebffff6b 	bl	935c <BusRaider::pinRawMode(int, bool, bool)>
    95ac:	e1a02005 	mov	r2, r5
    95b0:	e1a00004 	mov	r0, r4
    95b4:	e5845000 	str	r5, [r4]
    95b8:	e3a03001 	mov	r3, #1
    95bc:	e3a01003 	mov	r1, #3
    95c0:	ebffff65 	bl	935c <BusRaider::pinRawMode(int, bool, bool)>
    95c4:	e1a03005 	mov	r3, r5
    95c8:	e1a02005 	mov	r2, r5
    95cc:	e1a00004 	mov	r0, r4
    95d0:	e3a01007 	mov	r1, #7
    95d4:	ebffff60 	bl	935c <BusRaider::pinRawMode(int, bool, bool)>
    95d8:	e1a03005 	mov	r3, r5
    95dc:	e1a02005 	mov	r2, r5
    95e0:	e1a00004 	mov	r0, r4
    95e4:	e3a01010 	mov	r1, #16
    95e8:	ebffff5b 	bl	935c <BusRaider::pinRawMode(int, bool, bool)>
    95ec:	e1a02005 	mov	r2, r5
    95f0:	e1a00004 	mov	r0, r4
    95f4:	e3a03001 	mov	r3, #1
    95f8:	e3a01006 	mov	r1, #6
    95fc:	ebffff56 	bl	935c <BusRaider::pinRawMode(int, bool, bool)>
    9600:	e5c45004 	strb	r5, [r4, #4]
    9604:	e1a00004 	mov	r0, r4
    9608:	e1a03005 	mov	r3, r5
    960c:	e1a02005 	mov	r2, r5
    9610:	e8bd4070 	pop	{r4, r5, r6, lr}
    9614:	e3a01008 	mov	r1, #8
    9618:	eaffff4f 	b	935c <BusRaider::pinRawMode(int, bool, bool)>
    961c:	20200000 	.word	0x20200000

00009620 <BusRaider::pinRawWrite(int, bool)>:
    9620:	e3520000 	cmp	r2, #0
    9624:	0a000001 	beq	9630 <BusRaider::pinRawWrite(int, bool)+0x10>
    9628:	e1a00001 	mov	r0, r1
    962c:	eafffcd5 	b	8988 <BusRaider::pinRawWrite(int, bool) [clone .part.0]>
    9630:	e351001f 	cmp	r1, #31
    9634:	d3a00001 	movle	r0, #1
    9638:	c3a03001 	movgt	r3, #1
    963c:	c2411020 	subgt	r1, r1, #32
    9640:	d59f3014 	ldrle	r3, [pc, #20]	; 965c <BusRaider::pinRawWrite(int, bool)+0x3c>
    9644:	c59f2010 	ldrgt	r2, [pc, #16]	; 965c <BusRaider::pinRawWrite(int, bool)+0x3c>
    9648:	d1a01110 	lslle	r1, r0, r1
    964c:	c1a01113 	lslgt	r1, r3, r1
    9650:	d5831028 	strle	r1, [r3, #40]	; 0x28
    9654:	c582102c 	strgt	r1, [r2, #44]	; 0x2c
    9658:	e12fff1e 	bx	lr
    965c:	20200000 	.word	0x20200000

00009660 <BusRaider::pinRawRead(int)>:
    9660:	e59f3018 	ldr	r3, [pc, #24]	; 9680 <BusRaider::pinRawRead(int)+0x20>
    9664:	e351001f 	cmp	r1, #31
    9668:	d5930034 	ldrle	r0, [r3, #52]	; 0x34
    966c:	c5930038 	ldrgt	r0, [r3, #56]	; 0x38
    9670:	c2411020 	subgt	r1, r1, #32
    9674:	e1a00130 	lsr	r0, r0, r1
    9678:	e2000001 	and	r0, r0, #1
    967c:	e12fff1e 	bx	lr
    9680:	20200000 	.word	0x20200000

00009684 <BusRaider::~BusRaider()>:
    9684:	e92d4070 	push	{r4, r5, r6, lr}
    9688:	e1a05000 	mov	r5, r0
    968c:	e2800feb 	add	r0, r0, #940	; 0x3ac
    9690:	eb004891 	bl	1b8dc <CGPIOPin::~CGPIOPin()>
    9694:	e2850fe1 	add	r0, r5, #900	; 0x384
    9698:	eb00488f 	bl	1b8dc <CGPIOPin::~CGPIOPin()>
    969c:	e2850fd7 	add	r0, r5, #860	; 0x35c
    96a0:	eb00488d 	bl	1b8dc <CGPIOPin::~CGPIOPin()>
    96a4:	e2850fcd 	add	r0, r5, #820	; 0x334
    96a8:	eb00488b 	bl	1b8dc <CGPIOPin::~CGPIOPin()>
    96ac:	e2850fc3 	add	r0, r5, #780	; 0x30c
    96b0:	eb004889 	bl	1b8dc <CGPIOPin::~CGPIOPin()>
    96b4:	e2850fb9 	add	r0, r5, #740	; 0x2e4
    96b8:	eb004887 	bl	1b8dc <CGPIOPin::~CGPIOPin()>
    96bc:	e2850faf 	add	r0, r5, #700	; 0x2bc
    96c0:	eb004885 	bl	1b8dc <CGPIOPin::~CGPIOPin()>
    96c4:	e2850fa5 	add	r0, r5, #660	; 0x294
    96c8:	eb004883 	bl	1b8dc <CGPIOPin::~CGPIOPin()>
    96cc:	e2850f9b 	add	r0, r5, #620	; 0x26c
    96d0:	eb004881 	bl	1b8dc <CGPIOPin::~CGPIOPin()>
    96d4:	e2854f87 	add	r4, r5, #540	; 0x21c
    96d8:	e2850f91 	add	r0, r5, #580	; 0x244
    96dc:	eb00487e 	bl	1b8dc <CGPIOPin::~CGPIOPin()>
    96e0:	e1a00004 	mov	r0, r4
    96e4:	eb00487c 	bl	1b8dc <CGPIOPin::~CGPIOPin()>
    96e8:	e28560dc 	add	r6, r5, #220	; 0xdc
    96ec:	e5343028 	ldr	r3, [r4, #-40]!	; 0xffffffd8
    96f0:	e5933000 	ldr	r3, [r3]
    96f4:	e1a00004 	mov	r0, r4
    96f8:	e12fff33 	blx	r3
    96fc:	e1560004 	cmp	r6, r4
    9700:	1afffff9 	bne	96ec <BusRaider::~BusRaider()+0x68>
    9704:	e28500b4 	add	r0, r5, #180	; 0xb4
    9708:	e285408c 	add	r4, r5, #140	; 0x8c
    970c:	eb004872 	bl	1b8dc <CGPIOPin::~CGPIOPin()>
    9710:	e1a00004 	mov	r0, r4
    9714:	eb004870 	bl	1b8dc <CGPIOPin::~CGPIOPin()>
    9718:	e2856014 	add	r6, r5, #20
    971c:	e5343028 	ldr	r3, [r4, #-40]!	; 0xffffffd8
    9720:	e5933000 	ldr	r3, [r3]
    9724:	e1a00004 	mov	r0, r4
    9728:	e12fff33 	blx	r3
    972c:	e1560004 	cmp	r6, r4
    9730:	1afffff9 	bne	971c <BusRaider::~BusRaider()+0x98>
    9734:	e1a00005 	mov	r0, r5
    9738:	e8bd8070 	pop	{r4, r5, r6, pc}

0000973c <TargetMemory::clear()>:
    973c:	e3a0c000 	mov	ip, #0
    9740:	e1a0100c 	mov	r1, ip
    9744:	e2803801 	add	r3, r0, #65536	; 0x10000
    9748:	e2802b41 	add	r2, r0, #66560	; 0x10400
    974c:	e583c640 	str	ip, [r3, #1600]	; 0x640
    9750:	e2822f91 	add	r2, r2, #580	; 0x244
    9754:	e2833004 	add	r3, r3, #4
    9758:	e4831008 	str	r1, [r3], #8
    975c:	e1530002 	cmp	r3, r2
    9760:	1afffffc 	bne	9758 <TargetMemory::clear()+0x1c>
    9764:	e3a01000 	mov	r1, #0
    9768:	e2802cff 	add	r2, r0, #65280	; 0xff00
    976c:	e28220ff 	add	r2, r2, #255	; 0xff
    9770:	e2403001 	sub	r3, r0, #1
    9774:	e5e31001 	strb	r1, [r3, #1]!
    9778:	e1520003 	cmp	r2, r3
    977c:	1afffffc 	bne	9774 <TargetMemory::clear()+0x38>
    9780:	e12fff1e 	bx	lr

00009784 <TargetMemory::dataBlockStore(unsigned long, unsigned char const*, unsigned long)>:
    9784:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    9788:	e2807801 	add	r7, r0, #65536	; 0x10000
    978c:	e5976640 	ldr	r6, [r7, #1600]	; 0x640
    9790:	e3560000 	cmp	r6, #0
    9794:	da000012 	ble	97e4 <TargetMemory::dataBlockStore(unsigned long, unsigned char const*, unsigned long)+0x60>
    9798:	e5975004 	ldr	r5, [r7, #4]
    979c:	e597c000 	ldr	ip, [r7]
    97a0:	e085c00c 	add	ip, r5, ip
    97a4:	e151000c 	cmp	r1, ip
    97a8:	13a04000 	movne	r4, #0
    97ac:	1287c008 	addne	ip, r7, #8
    97b0:	1a000006 	bne	97d0 <TargetMemory::dataBlockStore(unsigned long, unsigned char const*, unsigned long)+0x4c>
    97b4:	ea00001c 	b	982c <TargetMemory::dataBlockStore(unsigned long, unsigned char const*, unsigned long)+0xa8>
    97b8:	e59c5004 	ldr	r5, [ip, #4]
    97bc:	e59ce000 	ldr	lr, [ip]
    97c0:	e28cc008 	add	ip, ip, #8
    97c4:	e085e00e 	add	lr, r5, lr
    97c8:	e15e0001 	cmp	lr, r1
    97cc:	0a000017 	beq	9830 <TargetMemory::dataBlockStore(unsigned long, unsigned char const*, unsigned long)+0xac>
    97d0:	e2844001 	add	r4, r4, #1
    97d4:	e1540006 	cmp	r4, r6
    97d8:	1afffff6 	bne	97b8 <TargetMemory::dataBlockStore(unsigned long, unsigned char const*, unsigned long)+0x34>
    97dc:	e35600c7 	cmp	r6, #199	; 0xc7
    97e0:	ca000010 	bgt	9828 <TargetMemory::dataBlockStore(unsigned long, unsigned char const*, unsigned long)+0xa4>
    97e4:	e080c186 	add	ip, r0, r6, lsl #3
    97e8:	e28cc801 	add	ip, ip, #65536	; 0x10000
    97ec:	e2866001 	add	r6, r6, #1
    97f0:	e88c000a 	stm	ip, {r1, r3}
    97f4:	e5876640 	str	r6, [r7, #1600]	; 0x640
    97f8:	e3530000 	cmp	r3, #0
    97fc:	159fc044 	ldrne	ip, [pc, #68]	; 9848 <TargetMemory::dataBlockStore(unsigned long, unsigned char const*, unsigned long)+0xc4>
    9800:	10813003 	addne	r3, r1, r3
    9804:	0a00000e 	beq	9844 <TargetMemory::dataBlockStore(unsigned long, unsigned char const*, unsigned long)+0xc0>
    9808:	e151000c 	cmp	r1, ip
    980c:	95d2e000 	ldrbls	lr, [r2]
    9810:	e2822001 	add	r2, r2, #1
    9814:	97c0e001 	strbls	lr, [r0, r1]
    9818:	e2811001 	add	r1, r1, #1
    981c:	e1510003 	cmp	r1, r3
    9820:	1afffff8 	bne	9808 <TargetMemory::dataBlockStore(unsigned long, unsigned char const*, unsigned long)+0x84>
    9824:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    9828:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    982c:	e3a04000 	mov	r4, #0
    9830:	e2844a02 	add	r4, r4, #8192	; 0x2000
    9834:	e0804184 	add	r4, r0, r4, lsl #3
    9838:	e0835005 	add	r5, r3, r5
    983c:	e5845004 	str	r5, [r4, #4]
    9840:	eaffffec 	b	97f8 <TargetMemory::dataBlockStore(unsigned long, unsigned char const*, unsigned long)+0x74>
    9844:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    9848:	0000ffff 	.word	0x0000ffff

0000984c <TargetMemory::getNumBlocks()>:
    984c:	e2800801 	add	r0, r0, #65536	; 0x10000
    9850:	e5900640 	ldr	r0, [r0, #1600]	; 0x640
    9854:	e12fff1e 	bx	lr

00009858 <TargetMemory::getMemoryBlock(int)>:
    9858:	e2811a02 	add	r1, r1, #8192	; 0x2000
    985c:	e0800181 	add	r0, r0, r1, lsl #3
    9860:	e12fff1e 	bx	lr

00009864 <TargetMemory::memoryPtr()>:
    9864:	e12fff1e 	bx	lr

00009868 <TargetScreen::TargetScreen(CScreenDevice&, TargetFonts&)>:
    9868:	e3a0c000 	mov	ip, #0
    986c:	e8801006 	stm	r0, {r1, r2, ip}
    9870:	e12fff1e 	bx	lr

00009874 <TargetScreen::~TargetScreen()>:
    9874:	e12fff1e 	bx	lr

00009878 <TargetScreen::setup(int, int, int, int, char const*, unsigned short, unsigned short, int, int, int, int, int, int)>:
    9878:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    987c:	e1a04000 	mov	r4, r0
    9880:	e1a0b001 	mov	fp, r1
    9884:	e5900004 	ldr	r0, [r0, #4]
    9888:	e59d102c 	ldr	r1, [sp, #44]	; 0x2c
    988c:	e1a0a002 	mov	sl, r2
    9890:	e1a09003 	mov	r9, r3
    9894:	e1dd73b0 	ldrh	r7, [sp, #48]	; 0x30
    9898:	e1dd83b4 	ldrh	r8, [sp, #52]	; 0x34
    989c:	e59d5048 	ldr	r5, [sp, #72]	; 0x48
    98a0:	e59d604c 	ldr	r6, [sp, #76]	; 0x4c
    98a4:	eb0000ad 	bl	9b60 <TargetFonts::getFont(char const*)>
    98a8:	e3500000 	cmp	r0, #0
    98ac:	e5840008 	str	r0, [r4, #8]
    98b0:	0a000025 	beq	994c <TargetScreen::setup(int, int, int, int, char const*, unsigned short, unsigned short, int, int, int, int, int, int)+0xd4>
    98b4:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
    98b8:	e3750001 	cmn	r5, #1
    98bc:	e584b00c 	str	fp, [r4, #12]
    98c0:	e584a010 	str	sl, [r4, #16]
    98c4:	e5849014 	str	r9, [r4, #20]
    98c8:	e5843018 	str	r3, [r4, #24]
    98cc:	e584501c 	str	r5, [r4, #28]
    98d0:	0a000013 	beq	9924 <TargetScreen::setup(int, int, int, int, char const*, unsigned short, unsigned short, int, int, int, int, int, int)+0xac>
    98d4:	e3760001 	cmn	r6, #1
    98d8:	e5846020 	str	r6, [r4, #32]
    98dc:	0a00000a 	beq	990c <TargetScreen::setup(int, int, int, int, char const*, unsigned short, unsigned short, int, int, int, int, int, int)+0x94>
    98e0:	e59d3040 	ldr	r3, [sp, #64]	; 0x40
    98e4:	e1c472bc 	strh	r7, [r4, #44]	; 0x2c
    98e8:	e5843024 	str	r3, [r4, #36]	; 0x24
    98ec:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
    98f0:	e1c482be 	strh	r8, [r4, #46]	; 0x2e
    98f4:	e5843028 	str	r3, [r4, #40]	; 0x28
    98f8:	e59d3038 	ldr	r3, [sp, #56]	; 0x38
    98fc:	e5843030 	str	r3, [r4, #48]	; 0x30
    9900:	e59d303c 	ldr	r3, [sp, #60]	; 0x3c
    9904:	e5843034 	str	r3, [r4, #52]	; 0x34
    9908:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    990c:	e5943008 	ldr	r3, [r4, #8]
    9910:	e3530000 	cmp	r3, #0
    9914:	0afffff1 	beq	98e0 <TargetScreen::setup(int, int, int, int, char const*, unsigned short, unsigned short, int, int, int, int, int, int)+0x68>
    9918:	e5933008 	ldr	r3, [r3, #8]
    991c:	e5843020 	str	r3, [r4, #32]
    9920:	eaffffee 	b	98e0 <TargetScreen::setup(int, int, int, int, char const*, unsigned short, unsigned short, int, int, int, int, int, int)+0x68>
    9924:	e5943008 	ldr	r3, [r4, #8]
    9928:	e3530000 	cmp	r3, #0
    992c:	05846020 	streq	r6, [r4, #32]
    9930:	0affffea 	beq	98e0 <TargetScreen::setup(int, int, int, int, char const*, unsigned short, unsigned short, int, int, int, int, int, int)+0x68>
    9934:	e5932004 	ldr	r2, [r3, #4]
    9938:	e3760001 	cmn	r6, #1
    993c:	e584201c 	str	r2, [r4, #28]
    9940:	e5846020 	str	r6, [r4, #32]
    9944:	1affffe5 	bne	98e0 <TargetScreen::setup(int, int, int, int, char const*, unsigned short, unsigned short, int, int, int, int, int, int)+0x68>
    9948:	eafffff2 	b	9918 <TargetScreen::setup(int, int, int, int, char const*, unsigned short, unsigned short, int, int, int, int, int, int)+0xa0>
    994c:	e3a0201b 	mov	r2, #27
    9950:	e59f1008 	ldr	r1, [pc, #8]	; 9960 <TargetScreen::setup(int, int, int, int, char const*, unsigned short, unsigned short, int, int, int, int, int, int)+0xe8>
    9954:	e59f0008 	ldr	r0, [pc, #8]	; 9964 <TargetScreen::setup(int, int, int, int, char const*, unsigned short, unsigned short, int, int, int, int, int, int)+0xec>
    9958:	eb004446 	bl	1aa78 <assertion_failed>
    995c:	eaffffd4 	b	98b4 <TargetScreen::setup(int, int, int, int, char const*, unsigned short, unsigned short, int, int, int, int, int, int)+0x3c>
    9960:	000244c8 	.word	0x000244c8
    9964:	000244e4 	.word	0x000244e4

00009968 <TargetScreen::putChar(int, int, int)>:
    9968:	e590c008 	ldr	ip, [r0, #8]
    996c:	e35c0000 	cmp	ip, #0
    9970:	012fff1e 	bxeq	lr
    9974:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9978:	e590c01c 	ldr	ip, [r0, #28]
    997c:	e590e020 	ldr	lr, [r0, #32]
    9980:	e0020c92 	mul	r2, r2, ip
    9984:	e00a0e93 	mul	sl, r3, lr
    9988:	e590b024 	ldr	fp, [r0, #36]	; 0x24
    998c:	e5903028 	ldr	r3, [r0, #40]	; 0x28
    9990:	e35e0000 	cmp	lr, #0
    9994:	e24dd00c 	sub	sp, sp, #12
    9998:	e00b029b 	mul	fp, fp, r2
    999c:	e00a0a93 	mul	sl, r3, sl
    99a0:	da000052 	ble	9af0 <TargetScreen::putChar(int, int, int)+0x188>
    99a4:	e1a05000 	mov	r5, r0
    99a8:	e3a09000 	mov	r9, #0
    99ac:	e6ef2071 	uxtb	r2, r1
    99b0:	e58d2004 	str	r2, [sp, #4]
    99b4:	e35c0000 	cmp	ip, #0
    99b8:	c3a07000 	movgt	r7, #0
    99bc:	da000048 	ble	9ae4 <TargetScreen::putChar(int, int, int)+0x17c>
    99c0:	e5954008 	ldr	r4, [r5, #8]
    99c4:	e59d0004 	ldr	r0, [sp, #4]
    99c8:	e5942014 	ldr	r2, [r4, #20]
    99cc:	e1a01000 	mov	r1, r0
    99d0:	e1520000 	cmp	r2, r0
    99d4:	ca000024 	bgt	9a6c <TargetScreen::putChar(int, int, int)+0x104>
    99d8:	e5941018 	ldr	r1, [r4, #24]
    99dc:	e1510000 	cmp	r1, r0
    99e0:	ba000021 	blt	9a6c <TargetScreen::putChar(int, int, int)+0x104>
    99e4:	e594301c 	ldr	r3, [r4, #28]
    99e8:	e0406002 	sub	r6, r0, r2
    99ec:	e1560003 	cmp	r6, r3
    99f0:	e1a01000 	mov	r1, r0
    99f4:	aa000047 	bge	9b18 <TargetScreen::putChar(int, int, int)+0x1b0>
    99f8:	e5943004 	ldr	r3, [r4, #4]
    99fc:	e1530007 	cmp	r3, r7
    9a00:	da00003f 	ble	9b04 <TargetScreen::putChar(int, int, int)+0x19c>
    9a04:	e5943008 	ldr	r3, [r4, #8]
    9a08:	e1530009 	cmp	r3, r9
    9a0c:	da000015 	ble	9a68 <TargetScreen::putChar(int, int, int)+0x100>
    9a10:	e5943010 	ldr	r3, [r4, #16]
    9a14:	e5942020 	ldr	r2, [r4, #32]
    9a18:	e3570007 	cmp	r7, #7
    9a1c:	e0222693 	mla	r2, r3, r6, r2
    9a20:	e594300c 	ldr	r3, [r4, #12]
    9a24:	e1a061c7 	asr	r6, r7, #3
    9a28:	e0262693 	mla	r6, r3, r6, r2
    9a2c:	e0030399 	mul	r3, r9, r3
    9a30:	e7d61003 	ldrb	r1, [r6, r3]
    9a34:	c3a03000 	movgt	r3, #0
    9a38:	d5943004 	ldrle	r3, [r4, #4]
    9a3c:	e2072007 	and	r2, r7, #7
    9a40:	d1a00fc3 	asrle	r0, r3, #31
    9a44:	d1a00ea0 	lsrle	r0, r0, #29
    9a48:	d0833000 	addle	r3, r3, r0
    9a4c:	d2033007 	andle	r3, r3, #7
    9a50:	d0433000 	suble	r3, r3, r0
    9a54:	d2633008 	rsble	r3, r3, #8
    9a58:	e0823003 	add	r3, r2, r3
    9a5c:	e3a02080 	mov	r2, #128	; 0x80
    9a60:	e0113352 	ands	r3, r1, r2, asr r3
    9a64:	1a000023 	bne	9af8 <TargetScreen::putChar(int, int, int)+0x190>
    9a68:	e5953028 	ldr	r3, [r5, #40]	; 0x28
    9a6c:	e1d582be 	ldrh	r8, [r5, #46]	; 0x2e
    9a70:	e3530000 	cmp	r3, #0
    9a74:	e1a02003 	mov	r2, r3
    9a78:	c3a06000 	movgt	r6, #0
    9a7c:	c5951024 	ldrgt	r1, [r5, #36]	; 0x24
    9a80:	da000012 	ble	9ad0 <TargetScreen::putChar(int, int, int)+0x168>
    9a84:	e3510000 	cmp	r1, #0
    9a88:	da00000d 	ble	9ac4 <TargetScreen::putChar(int, int, int)+0x15c>
    9a8c:	e3a04000 	mov	r4, #0
    9a90:	e022a992 	mla	r2, r2, r9, sl
    9a94:	e021b791 	mla	r1, r1, r7, fp
    9a98:	e0822006 	add	r2, r2, r6
    9a9c:	e0811004 	add	r1, r1, r4
    9aa0:	e1a03008 	mov	r3, r8
    9aa4:	e5950000 	ldr	r0, [r5]
    9aa8:	eb00550e 	bl	1eee8 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)>
    9aac:	e5951024 	ldr	r1, [r5, #36]	; 0x24
    9ab0:	e2844001 	add	r4, r4, #1
    9ab4:	e1510004 	cmp	r1, r4
    9ab8:	e5952028 	ldr	r2, [r5, #40]	; 0x28
    9abc:	cafffff3 	bgt	9a90 <TargetScreen::putChar(int, int, int)+0x128>
    9ac0:	e1a03002 	mov	r3, r2
    9ac4:	e2866001 	add	r6, r6, #1
    9ac8:	e1560003 	cmp	r6, r3
    9acc:	baffffec 	blt	9a84 <TargetScreen::putChar(int, int, int)+0x11c>
    9ad0:	e595c01c 	ldr	ip, [r5, #28]
    9ad4:	e2877001 	add	r7, r7, #1
    9ad8:	e15c0007 	cmp	ip, r7
    9adc:	caffffb7 	bgt	99c0 <TargetScreen::putChar(int, int, int)+0x58>
    9ae0:	e595e020 	ldr	lr, [r5, #32]
    9ae4:	e2899001 	add	r9, r9, #1
    9ae8:	e15e0009 	cmp	lr, r9
    9aec:	caffffb0 	bgt	99b4 <TargetScreen::putChar(int, int, int)+0x4c>
    9af0:	e28dd00c 	add	sp, sp, #12
    9af4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9af8:	e1d582bc 	ldrh	r8, [r5, #44]	; 0x2c
    9afc:	e5953028 	ldr	r3, [r5, #40]	; 0x28
    9b00:	eaffffda 	b	9a70 <TargetScreen::putChar(int, int, int)+0x108>
    9b04:	e3a0202f 	mov	r2, #47	; 0x2f
    9b08:	e59f101c 	ldr	r1, [pc, #28]	; 9b2c <TargetScreen::putChar(int, int, int)+0x1c4>
    9b0c:	e59f001c 	ldr	r0, [pc, #28]	; 9b30 <TargetScreen::putChar(int, int, int)+0x1c8>
    9b10:	eb0043d8 	bl	1aa78 <assertion_failed>
    9b14:	eaffffba 	b	9a04 <TargetScreen::putChar(int, int, int)+0x9c>
    9b18:	e3a0202e 	mov	r2, #46	; 0x2e
    9b1c:	e59f1008 	ldr	r1, [pc, #8]	; 9b2c <TargetScreen::putChar(int, int, int)+0x1c4>
    9b20:	e59f000c 	ldr	r0, [pc, #12]	; 9b34 <TargetScreen::putChar(int, int, int)+0x1cc>
    9b24:	eb0043d3 	bl	1aa78 <assertion_failed>
    9b28:	eaffffb2 	b	99f8 <TargetScreen::putChar(int, int, int)+0x90>
    9b2c:	000244f4 	.word	0x000244f4
    9b30:	00024520 	.word	0x00024520
    9b34:	0002450c 	.word	0x0002450c

00009b38 <TargetFonts::TargetFonts()>:
    9b38:	e3a02000 	mov	r2, #0
    9b3c:	e5802050 	str	r2, [r0, #80]	; 0x50
    9b40:	e12fff1e 	bx	lr

00009b44 <TargetFonts::~TargetFonts()>:
    9b44:	e12fff1e 	bx	lr

00009b48 <TargetFonts::addFont(TargetFont*)>:
    9b48:	e5903050 	ldr	r3, [r0, #80]	; 0x50
    9b4c:	e3530013 	cmp	r3, #19
    9b50:	d2832001 	addle	r2, r3, #1
    9b54:	d5802050 	strle	r2, [r0, #80]	; 0x50
    9b58:	d7801103 	strle	r1, [r0, r3, lsl #2]
    9b5c:	e12fff1e 	bx	lr

00009b60 <TargetFonts::getFont(char const*)>:
    9b60:	e5903050 	ldr	r3, [r0, #80]	; 0x50
    9b64:	e3530000 	cmp	r3, #0
    9b68:	da000013 	ble	9bbc <TargetFonts::getFont(char const*)+0x5c>
    9b6c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9b70:	e1a07001 	mov	r7, r1
    9b74:	e1a06000 	mov	r6, r0
    9b78:	e3a04000 	mov	r4, #0
    9b7c:	e2405004 	sub	r5, r0, #4
    9b80:	ea000003 	b	9b94 <TargetFonts::getFont(char const*)+0x34>
    9b84:	e5963050 	ldr	r3, [r6, #80]	; 0x50
    9b88:	e2844001 	add	r4, r4, #1
    9b8c:	e1530004 	cmp	r3, r4
    9b90:	da000007 	ble	9bb4 <TargetFonts::getFont(char const*)+0x54>
    9b94:	e5b53004 	ldr	r3, [r5, #4]!
    9b98:	e1a01007 	mov	r1, r7
    9b9c:	e5930000 	ldr	r0, [r3]
    9ba0:	eb006035 	bl	21c7c <strcmp>
    9ba4:	e3500000 	cmp	r0, #0
    9ba8:	1afffff5 	bne	9b84 <TargetFonts::getFont(char const*)+0x24>
    9bac:	e7960104 	ldr	r0, [r6, r4, lsl #2]
    9bb0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9bb4:	e3a00000 	mov	r0, #0
    9bb8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9bbc:	e3a00000 	mov	r0, #0
    9bc0:	e12fff1e 	bx	lr

00009bc4 <_GLOBAL__sub_I___pTRS80Level1FontBin>:
    9bc4:	e3a01006 	mov	r1, #6
    9bc8:	e92d4030 	push	{r4, r5, lr}
    9bcc:	e3a02008 	mov	r2, #8
    9bd0:	e3a04001 	mov	r4, #1
    9bd4:	e3a0e000 	mov	lr, #0
    9bd8:	e3a0c0ff 	mov	ip, #255	; 0xff
    9bdc:	e3a00c01 	mov	r0, #256	; 0x100
    9be0:	e59f302c 	ldr	r3, [pc, #44]	; 9c14 <_GLOBAL__sub_I___pTRS80Level1FontBin+0x50>
    9be4:	e59f502c 	ldr	r5, [pc, #44]	; 9c18 <_GLOBAL__sub_I___pTRS80Level1FontBin+0x54>
    9be8:	e5831004 	str	r1, [r3, #4]
    9bec:	e59f1028 	ldr	r1, [pc, #40]	; 9c1c <_GLOBAL__sub_I___pTRS80Level1FontBin+0x58>
    9bf0:	e5835000 	str	r5, [r3]
    9bf4:	e583400c 	str	r4, [r3, #12]
    9bf8:	e583e014 	str	lr, [r3, #20]
    9bfc:	e583c018 	str	ip, [r3, #24]
    9c00:	e583001c 	str	r0, [r3, #28]
    9c04:	e5831020 	str	r1, [r3, #32]
    9c08:	e5832008 	str	r2, [r3, #8]
    9c0c:	e5832010 	str	r2, [r3, #16]
    9c10:	e8bd8030 	pop	{r4, r5, pc}
    9c14:	0002b900 	.word	0x0002b900
    9c18:	00024484 	.word	0x00024484
    9c1c:	0002aebc 	.word	0x0002aebc

00009c20 <MiniHDLC::handleChar(unsigned char) [clone .part.0]>:
    9c20:	e5903004 	ldr	r3, [r0, #4]
    9c24:	e92d4010 	push	{r4, lr}
    9c28:	e3530001 	cmp	r3, #1
    9c2c:	e1a04000 	mov	r4, r0
    9c30:	da00000d 	ble	9c6c <MiniHDLC::handleChar(unsigned char) [clone .part.0]+0x4c>
    9c34:	e5d02001 	ldrb	r2, [r0, #1]
    9c38:	e2431002 	sub	r1, r3, #2
    9c3c:	e0803003 	add	r3, r0, r3
    9c40:	e0800001 	add	r0, r0, r1
    9c44:	e3520000 	cmp	r2, #0
    9c48:	e5d33017 	ldrb	r3, [r3, #23]
    9c4c:	e5d02018 	ldrb	r2, [r0, #24]
    9c50:	01823403 	orreq	r3, r2, r3, lsl #8
    9c54:	11833402 	orrne	r3, r3, r2, lsl #8
    9c58:	e6bf3073 	sxth	r3, r3
    9c5c:	e1d420b8 	ldrh	r2, [r4, #8]
    9c60:	e6ff3073 	uxth	r3, r3
    9c64:	e1520003 	cmp	r2, r3
    9c68:	0a000005 	beq	9c84 <MiniHDLC::handleChar(unsigned char) [clone .part.0]+0x64>
    9c6c:	e3a03000 	mov	r3, #0
    9c70:	e3e02000 	mvn	r2, #0
    9c74:	e5c4300a 	strb	r3, [r4, #10]
    9c78:	e5843004 	str	r3, [r4, #4]
    9c7c:	e1c420b8 	strh	r2, [r4, #8]
    9c80:	e8bd8010 	pop	{r4, pc}
    9c84:	e3a02000 	mov	r2, #0
    9c88:	e59f3018 	ldr	r3, [pc, #24]	; 9ca8 <MiniHDLC::handleChar(unsigned char) [clone .part.0]+0x88>
    9c8c:	e5c02018 	strb	r2, [r0, #24]
    9c90:	e5933000 	ldr	r3, [r3]
    9c94:	e1530002 	cmp	r3, r2
    9c98:	0afffff3 	beq	9c6c <MiniHDLC::handleChar(unsigned char) [clone .part.0]+0x4c>
    9c9c:	e2840018 	add	r0, r4, #24
    9ca0:	e12fff33 	blx	r3
    9ca4:	eafffff0 	b	9c6c <MiniHDLC::handleChar(unsigned char) [clone .part.0]+0x4c>
    9ca8:	0002b924 	.word	0x0002b924

00009cac <MiniHDLC::MiniHDLC(void (*)(unsigned char), void (*)(unsigned char const*, int), bool, bool)>:
    9cac:	e92d4030 	push	{r4, r5, lr}
    9cb0:	e3e05000 	mvn	r5, #0
    9cb4:	e3a0e000 	mov	lr, #0
    9cb8:	e59f4030 	ldr	r4, [pc, #48]	; 9cf0 <MiniHDLC::MiniHDLC(void (*)(unsigned char), void (*)(unsigned char const*, int), bool, bool)+0x44>
    9cbc:	e1c050b8 	strh	r5, [r0, #8]
    9cc0:	e5dd500c 	ldrb	r5, [sp, #12]
    9cc4:	e5841004 	str	r1, [r4, #4]
    9cc8:	e5842000 	str	r2, [r4]
    9ccc:	e580e004 	str	lr, [r0, #4]
    9cd0:	e5c03001 	strb	r3, [r0, #1]
    9cd4:	e5c05000 	strb	r5, [r0]
    9cd8:	e5c0e00a 	strb	lr, [r0, #10]
    9cdc:	e5c0e00b 	strb	lr, [r0, #11]
    9ce0:	e5c0e00c 	strb	lr, [r0, #12]
    9ce4:	e580e010 	str	lr, [r0, #16]
    9ce8:	e580e014 	str	lr, [r0, #20]
    9cec:	e8bd8030 	pop	{r4, r5, pc}
    9cf0:	0002b924 	.word	0x0002b924

00009cf4 <MiniHDLC::handleChar(unsigned char)>:
    9cf4:	e351007e 	cmp	r1, #126	; 0x7e
    9cf8:	e1a03000 	mov	r3, r0
    9cfc:	0a00001e 	beq	9d7c <MiniHDLC::handleChar(unsigned char)+0x88>
    9d00:	e5d0200a 	ldrb	r2, [r0, #10]
    9d04:	e3520000 	cmp	r2, #0
    9d08:	1a000017 	bne	9d6c <MiniHDLC::handleChar(unsigned char)+0x78>
    9d0c:	e351007d 	cmp	r1, #125	; 0x7d
    9d10:	0a00001a 	beq	9d80 <MiniHDLC::handleChar(unsigned char)+0x8c>
    9d14:	e5932004 	ldr	r2, [r3, #4]
    9d18:	e0830002 	add	r0, r3, r2
    9d1c:	e3520001 	cmp	r2, #1
    9d20:	e5c01018 	strb	r1, [r0, #24]
    9d24:	da000007 	ble	9d48 <MiniHDLC::handleChar(unsigned char)+0x54>
    9d28:	e5d01016 	ldrb	r1, [r0, #22]
    9d2c:	e1d300b8 	ldrh	r0, [r3, #8]
    9d30:	e59fc054 	ldr	ip, [pc, #84]	; 9d8c <MiniHDLC::handleChar(unsigned char)+0x98>
    9d34:	e0211420 	eor	r1, r1, r0, lsr #8
    9d38:	e1a01081 	lsl	r1, r1, #1
    9d3c:	e19c10b1 	ldrh	r1, [ip, r1]
    9d40:	e0211400 	eor	r1, r1, r0, lsl #8
    9d44:	e1c310b8 	strh	r1, [r3, #8]
    9d48:	e59f1040 	ldr	r1, [pc, #64]	; 9d90 <MiniHDLC::handleChar(unsigned char)+0x9c>
    9d4c:	e2822001 	add	r2, r2, #1
    9d50:	e1520001 	cmp	r2, r1
    9d54:	03a01000 	moveq	r1, #0
    9d58:	03e02000 	mvneq	r2, #0
    9d5c:	15832004 	strne	r2, [r3, #4]
    9d60:	05831004 	streq	r1, [r3, #4]
    9d64:	01c320b8 	strheq	r2, [r3, #8]
    9d68:	e12fff1e 	bx	lr
    9d6c:	e3a02000 	mov	r2, #0
    9d70:	e2211020 	eor	r1, r1, #32
    9d74:	e5c0200a 	strb	r2, [r0, #10]
    9d78:	eaffffe5 	b	9d14 <MiniHDLC::handleChar(unsigned char)+0x20>
    9d7c:	eaffffa7 	b	9c20 <MiniHDLC::handleChar(unsigned char) [clone .part.0]>
    9d80:	e3a02001 	mov	r2, #1
    9d84:	e5c0200a 	strb	r2, [r0, #10]
    9d88:	e12fff1e 	bx	lr
    9d8c:	00024530 	.word	0x00024530
    9d90:	00001388 	.word	0x00001388

00009d94 <MiniHDLC::handleBit(unsigned char)>:
    9d94:	e3510000 	cmp	r1, #0
    9d98:	13e0107f 	mvnne	r1, #127	; 0x7f
    9d9c:	03a01000 	moveq	r1, #0
    9da0:	e5d0300b 	ldrb	r3, [r0, #11]
    9da4:	e92d4010 	push	{r4, lr}
    9da8:	e18130a3 	orr	r3, r1, r3, lsr #1
    9dac:	e6ef3073 	uxtb	r3, r3
    9db0:	e353007e 	cmp	r3, #126	; 0x7e
    9db4:	e1a04000 	mov	r4, r0
    9db8:	e5c0300b 	strb	r3, [r0, #11]
    9dbc:	0a000010 	beq	9e04 <MiniHDLC::handleBit(unsigned char)+0x70>
    9dc0:	e20330fc 	and	r3, r3, #252	; 0xfc
    9dc4:	e353007c 	cmp	r3, #124	; 0x7c
    9dc8:	08bd8010 	popeq	{r4, pc}
    9dcc:	e5d0200c 	ldrb	r2, [r0, #12]
    9dd0:	e5903010 	ldr	r3, [r0, #16]
    9dd4:	e18110a2 	orr	r1, r1, r2, lsr #1
    9dd8:	e2833001 	add	r3, r3, #1
    9ddc:	e6ef1071 	uxtb	r1, r1
    9de0:	e3530008 	cmp	r3, #8
    9de4:	e5c0100c 	strb	r1, [r0, #12]
    9de8:	e5803010 	str	r3, [r0, #16]
    9dec:	18bd8010 	popne	{r4, pc}
    9df0:	ebffffbf 	bl	9cf4 <MiniHDLC::handleChar(unsigned char)>
    9df4:	e3a03000 	mov	r3, #0
    9df8:	e5c4300c 	strb	r3, [r4, #12]
    9dfc:	e5843010 	str	r3, [r4, #16]
    9e00:	e8bd8010 	pop	{r4, pc}
    9e04:	ebffff85 	bl	9c20 <MiniHDLC::handleChar(unsigned char) [clone .part.0]>
    9e08:	e3a03000 	mov	r3, #0
    9e0c:	e5c4300c 	strb	r3, [r4, #12]
    9e10:	e5843010 	str	r3, [r4, #16]
    9e14:	e8bd8010 	pop	{r4, pc}

00009e18 <MiniHDLC::handleBuffer(unsigned char*, int)>:
    9e18:	e92d4070 	push	{r4, r5, r6, lr}
    9e1c:	e2525000 	subs	r5, r2, #0
    9e20:	d8bd8070 	pople	{r4, r5, r6, pc}
    9e24:	e1a06000 	mov	r6, r0
    9e28:	e1a04001 	mov	r4, r1
    9e2c:	e0815005 	add	r5, r1, r5
    9e30:	e4d41001 	ldrb	r1, [r4], #1
    9e34:	e1a00006 	mov	r0, r6
    9e38:	ebffffad 	bl	9cf4 <MiniHDLC::handleChar(unsigned char)>
    9e3c:	e1540005 	cmp	r4, r5
    9e40:	1afffffa 	bne	9e30 <MiniHDLC::handleBuffer(unsigned char*, int)+0x18>
    9e44:	e8bd8070 	pop	{r4, r5, r6, pc}

00009e48 <MiniHDLC::crcUpdateCCITT(unsigned short, unsigned char)>:
    9e48:	e59f3014 	ldr	r3, [pc, #20]	; 9e64 <MiniHDLC::crcUpdateCCITT(unsigned short, unsigned char)+0x1c>
    9e4c:	e0222421 	eor	r2, r2, r1, lsr #8
    9e50:	e1a02082 	lsl	r2, r2, #1
    9e54:	e19300b2 	ldrh	r0, [r3, r2]
    9e58:	e0200401 	eor	r0, r0, r1, lsl #8
    9e5c:	e6ff0070 	uxth	r0, r0
    9e60:	e12fff1e 	bx	lr
    9e64:	00024530 	.word	0x00024530

00009e68 <MiniHDLC::sendChar(unsigned char)>:
    9e68:	e5d03000 	ldrb	r3, [r0]
    9e6c:	e92d4070 	push	{r4, r5, r6, lr}
    9e70:	e3530000 	cmp	r3, #0
    9e74:	e1a04001 	mov	r4, r1
    9e78:	0a00000a 	beq	9ea8 <MiniHDLC::sendChar(unsigned char)+0x40>
    9e7c:	e3a05008 	mov	r5, #8
    9e80:	e59f603c 	ldr	r6, [pc, #60]	; 9ec4 <MiniHDLC::sendChar(unsigned char)+0x5c>
    9e84:	e5963004 	ldr	r3, [r6, #4]
    9e88:	e2040001 	and	r0, r4, #1
    9e8c:	e3530000 	cmp	r3, #0
    9e90:	0a000000 	beq	9e98 <MiniHDLC::sendChar(unsigned char)+0x30>
    9e94:	e12fff33 	blx	r3
    9e98:	e2555001 	subs	r5, r5, #1
    9e9c:	e1a040a4 	lsr	r4, r4, #1
    9ea0:	1afffff7 	bne	9e84 <MiniHDLC::sendChar(unsigned char)+0x1c>
    9ea4:	e8bd8070 	pop	{r4, r5, r6, pc}
    9ea8:	e59f3014 	ldr	r3, [pc, #20]	; 9ec4 <MiniHDLC::sendChar(unsigned char)+0x5c>
    9eac:	e5933004 	ldr	r3, [r3, #4]
    9eb0:	e3530000 	cmp	r3, #0
    9eb4:	08bd8070 	popeq	{r4, r5, r6, pc}
    9eb8:	e1a00001 	mov	r0, r1
    9ebc:	e8bd4070 	pop	{r4, r5, r6, lr}
    9ec0:	e12fff13 	bx	r3
    9ec4:	0002b924 	.word	0x0002b924

00009ec8 <MiniHDLC::sendCharWithStuffing(unsigned char)>:
    9ec8:	e5d03000 	ldrb	r3, [r0]
    9ecc:	e3530000 	cmp	r3, #0
    9ed0:	0a000022 	beq	9f60 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x98>
    9ed4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    9ed8:	e1a09000 	mov	r9, r0
    9edc:	e1a04001 	mov	r4, r1
    9ee0:	e3a05008 	mov	r5, #8
    9ee4:	e3a08000 	mov	r8, #0
    9ee8:	e59f7074 	ldr	r7, [pc, #116]	; 9f64 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x9c>
    9eec:	ea000007 	b	9f10 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x48>
    9ef0:	e5993014 	ldr	r3, [r9, #20]
    9ef4:	e2833001 	add	r3, r3, #1
    9ef8:	e3530005 	cmp	r3, #5
    9efc:	e5893014 	str	r3, [r9, #20]
    9f00:	0a00000f 	beq	9f44 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x7c>
    9f04:	e2555001 	subs	r5, r5, #1
    9f08:	e1a040a4 	lsr	r4, r4, #1
    9f0c:	0a00000b 	beq	9f40 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x78>
    9f10:	e5973004 	ldr	r3, [r7, #4]
    9f14:	e2046001 	and	r6, r4, #1
    9f18:	e3530000 	cmp	r3, #0
    9f1c:	0a000001 	beq	9f28 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x60>
    9f20:	e1a00006 	mov	r0, r6
    9f24:	e12fff33 	blx	r3
    9f28:	e3560000 	cmp	r6, #0
    9f2c:	1affffef 	bne	9ef0 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x28>
    9f30:	e5898014 	str	r8, [r9, #20]
    9f34:	e2555001 	subs	r5, r5, #1
    9f38:	e1a040a4 	lsr	r4, r4, #1
    9f3c:	1afffff3 	bne	9f10 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x48>
    9f40:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    9f44:	e5973004 	ldr	r3, [r7, #4]
    9f48:	e3530000 	cmp	r3, #0
    9f4c:	0afffff7 	beq	9f30 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x68>
    9f50:	e1a00008 	mov	r0, r8
    9f54:	e12fff33 	blx	r3
    9f58:	e5898014 	str	r8, [r9, #20]
    9f5c:	eafffff4 	b	9f34 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x6c>
    9f60:	eaffffc0 	b	9e68 <MiniHDLC::sendChar(unsigned char)>
    9f64:	0002b924 	.word	0x0002b924

00009f68 <MiniHDLC::sendEscaped(unsigned char)>:
    9f68:	e241307d 	sub	r3, r1, #125	; 0x7d
    9f6c:	e3530001 	cmp	r3, #1
    9f70:	e92d4070 	push	{r4, r5, r6, lr}
    9f74:	e1a04001 	mov	r4, r1
    9f78:	e1a05000 	mov	r5, r0
    9f7c:	9a000003 	bls	9f90 <MiniHDLC::sendEscaped(unsigned char)+0x28>
    9f80:	e1a01004 	mov	r1, r4
    9f84:	e1a00005 	mov	r0, r5
    9f88:	e8bd4070 	pop	{r4, r5, r6, lr}
    9f8c:	eaffffcd 	b	9ec8 <MiniHDLC::sendCharWithStuffing(unsigned char)>
    9f90:	e3a0107d 	mov	r1, #125	; 0x7d
    9f94:	e2244020 	eor	r4, r4, #32
    9f98:	ebffffca 	bl	9ec8 <MiniHDLC::sendCharWithStuffing(unsigned char)>
    9f9c:	e1a01004 	mov	r1, r4
    9fa0:	e1a00005 	mov	r0, r5
    9fa4:	e8bd4070 	pop	{r4, r5, r6, lr}
    9fa8:	eaffffc6 	b	9ec8 <MiniHDLC::sendCharWithStuffing(unsigned char)>

00009fac <MiniHDLC::sendFrame(unsigned char const*, int)>:
    9fac:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9fb0:	e1a08002 	mov	r8, r2
    9fb4:	e1a05001 	mov	r5, r1
    9fb8:	e3a0107e 	mov	r1, #126	; 0x7e
    9fbc:	e1a06000 	mov	r6, r0
    9fc0:	ebffffa8 	bl	9e68 <MiniHDLC::sendChar(unsigned char)>
    9fc4:	e3580000 	cmp	r8, #0
    9fc8:	0a00001c 	beq	a040 <MiniHDLC::sendFrame(unsigned char const*, int)+0x94>
    9fcc:	e59fc078 	ldr	ip, [pc, #120]	; a04c <MiniHDLC::sendFrame(unsigned char const*, int)+0xa0>
    9fd0:	e59f7078 	ldr	r7, [pc, #120]	; a050 <MiniHDLC::sendFrame(unsigned char const*, int)+0xa4>
    9fd4:	e4d51001 	ldrb	r1, [r5], #1
    9fd8:	e1a00006 	mov	r0, r6
    9fdc:	e021342c 	eor	r3, r1, ip, lsr #8
    9fe0:	e1a03083 	lsl	r3, r3, #1
    9fe4:	e19740b3 	ldrh	r4, [r7, r3]
    9fe8:	e024440c 	eor	r4, r4, ip, lsl #8
    9fec:	e6bf4074 	sxth	r4, r4
    9ff0:	ebffffdc 	bl	9f68 <MiniHDLC::sendEscaped(unsigned char)>
    9ff4:	e2588001 	subs	r8, r8, #1
    9ff8:	e6ffc074 	uxth	ip, r4
    9ffc:	1afffff4 	bne	9fd4 <MiniHDLC::sendFrame(unsigned char const*, int)+0x28>
    a000:	e6ef1074 	uxtb	r1, r4
    a004:	e1a0c42c 	lsr	ip, ip, #8
    a008:	e5d63001 	ldrb	r3, [r6, #1]
    a00c:	e1a00006 	mov	r0, r6
    a010:	e3530000 	cmp	r3, #0
    a014:	11a05001 	movne	r5, r1
    a018:	01a0500c 	moveq	r5, ip
    a01c:	11a0100c 	movne	r1, ip
    a020:	ebffffd0 	bl	9f68 <MiniHDLC::sendEscaped(unsigned char)>
    a024:	e1a01005 	mov	r1, r5
    a028:	e1a00006 	mov	r0, r6
    a02c:	ebffffcd 	bl	9f68 <MiniHDLC::sendEscaped(unsigned char)>
    a030:	e1a00006 	mov	r0, r6
    a034:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    a038:	e3a0107e 	mov	r1, #126	; 0x7e
    a03c:	eaffff89 	b	9e68 <MiniHDLC::sendChar(unsigned char)>
    a040:	e3a0c0ff 	mov	ip, #255	; 0xff
    a044:	e1a0100c 	mov	r1, ip
    a048:	eaffffee 	b	a008 <MiniHDLC::sendFrame(unsigned char const*, int)+0x5c>
    a04c:	0000ffff 	.word	0x0000ffff
    a050:	00024530 	.word	0x00024530

0000a054 <CommandHandler::static_hdlcPutCh(unsigned char)>:
    a054:	e59f3038 	ldr	r3, [pc, #56]	; a094 <CommandHandler::static_hdlcPutCh(unsigned char)+0x40>
    a058:	e5932000 	ldr	r2, [r3]
    a05c:	e3520000 	cmp	r2, #0
    a060:	012fff1e 	bxeq	lr
    a064:	e1a03000 	mov	r3, r0
    a068:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a06c:	e24dd00c 	sub	sp, sp, #12
    a070:	e28d1008 	add	r1, sp, #8
    a074:	e592000c 	ldr	r0, [r2, #12]
    a078:	e5613004 	strb	r3, [r1, #-4]!
    a07c:	e5903000 	ldr	r3, [r0]
    a080:	e3a02001 	mov	r2, #1
    a084:	e593300c 	ldr	r3, [r3, #12]
    a088:	e12fff33 	blx	r3
    a08c:	e28dd00c 	add	sp, sp, #12
    a090:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    a094:	0002b92c 	.word	0x0002b92c

0000a098 <CommandHandler::static_hdlcFrameRx(unsigned char const*, int)>:
    a098:	e59f3014 	ldr	r3, [pc, #20]	; a0b4 <CommandHandler::static_hdlcFrameRx(unsigned char const*, int)+0x1c>
    a09c:	e5933000 	ldr	r3, [r3]
    a0a0:	e3530000 	cmp	r3, #0
    a0a4:	15932008 	ldrne	r2, [r3, #8]
    a0a8:	10821001 	addne	r1, r2, r1
    a0ac:	15831008 	strne	r1, [r3, #8]
    a0b0:	e12fff1e 	bx	lr
    a0b4:	0002b92c 	.word	0x0002b92c

0000a0b8 <CommandHandler::CommandHandler(CSerialDevice&, void (*)(char const*))>:
    a0b8:	e92d4070 	push	{r4, r5, r6, lr}
    a0bc:	e3a05000 	mov	r5, #0
    a0c0:	e1a04000 	mov	r4, r0
    a0c4:	e24dd008 	sub	sp, sp, #8
    a0c8:	e580100c 	str	r1, [r0, #12]
    a0cc:	e1a06002 	mov	r6, r2
    a0d0:	e58d5000 	str	r5, [sp]
    a0d4:	e3a03001 	mov	r3, #1
    a0d8:	e59f2028 	ldr	r2, [pc, #40]	; a108 <CommandHandler::CommandHandler(CSerialDevice&, void (*)(char const*))+0x50>
    a0dc:	e59f1028 	ldr	r1, [pc, #40]	; a10c <CommandHandler::CommandHandler(CSerialDevice&, void (*)(char const*))+0x54>
    a0e0:	e2800010 	add	r0, r0, #16
    a0e4:	ebfffef0 	bl	9cac <MiniHDLC::MiniHDLC(void (*)(unsigned char), void (*)(unsigned char const*, int), bool, bool)>
    a0e8:	e1a00004 	mov	r0, r4
    a0ec:	e59f301c 	ldr	r3, [pc, #28]	; a110 <CommandHandler::CommandHandler(CSerialDevice&, void (*)(char const*))+0x58>
    a0f0:	e5845004 	str	r5, [r4, #4]
    a0f4:	e8830050 	stm	r3, {r4, r6}
    a0f8:	e5845008 	str	r5, [r4, #8]
    a0fc:	e5845000 	str	r5, [r4]
    a100:	e28dd008 	add	sp, sp, #8
    a104:	e8bd8070 	pop	{r4, r5, r6, pc}
    a108:	0000a098 	.word	0x0000a098
    a10c:	0000a054 	.word	0x0000a054
    a110:	0002b92c 	.word	0x0002b92c

0000a114 <CommandHandler::~CommandHandler()>:
    a114:	e12fff1e 	bx	lr

0000a118 <CommandHandler::hdlcPutCh(unsigned char)>:
    a118:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a11c:	e24dd00c 	sub	sp, sp, #12
    a120:	e28d3008 	add	r3, sp, #8
    a124:	e590000c 	ldr	r0, [r0, #12]
    a128:	e5631004 	strb	r1, [r3, #-4]!
    a12c:	e5902000 	ldr	r2, [r0]
    a130:	e1a01003 	mov	r1, r3
    a134:	e592300c 	ldr	r3, [r2, #12]
    a138:	e3a02001 	mov	r2, #1
    a13c:	e12fff33 	blx	r3
    a140:	e28dd00c 	add	sp, sp, #12
    a144:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000a148 <CommandHandler::hdlcFrameRx(unsigned char const*, int)>:
    a148:	e5903008 	ldr	r3, [r0, #8]
    a14c:	e0832002 	add	r2, r3, r2
    a150:	e5802008 	str	r2, [r0, #8]
    a154:	e12fff1e 	bx	lr

0000a158 <CommandHandler::service()>:
    a158:	e92d4010 	push	{r4, lr}
    a15c:	e1a04000 	mov	r4, r0
    a160:	e590000c 	ldr	r0, [r0, #12]
    a164:	e24ddc27 	sub	sp, sp, #9984	; 0x2700
    a168:	e24dd018 	sub	sp, sp, #24
    a16c:	e5903000 	ldr	r3, [r0]
    a170:	e28d2008 	add	r2, sp, #8
    a174:	e58d2004 	str	r2, [sp, #4]
    a178:	e1a01002 	mov	r1, r2
    a17c:	e5933008 	ldr	r3, [r3, #8]
    a180:	e59f2034 	ldr	r2, [pc, #52]	; a1bc <CommandHandler::service()+0x64>
    a184:	e12fff33 	blx	r3
    a188:	e1a02000 	mov	r2, r0
    a18c:	e1a00004 	mov	r0, r4
    a190:	e5941004 	ldr	r1, [r4, #4]
    a194:	e5943000 	ldr	r3, [r4]
    a198:	e0811002 	add	r1, r1, r2
    a19c:	e0833002 	add	r3, r3, r2
    a1a0:	e5841004 	str	r1, [r4, #4]
    a1a4:	e4803010 	str	r3, [r0], #16
    a1a8:	e59d1004 	ldr	r1, [sp, #4]
    a1ac:	ebffff19 	bl	9e18 <MiniHDLC::handleBuffer(unsigned char*, int)>
    a1b0:	e28ddc27 	add	sp, sp, #9984	; 0x2700
    a1b4:	e28dd018 	add	sp, sp, #24
    a1b8:	e8bd8010 	pop	{r4, pc}
    a1bc:	00002710 	.word	0x00002710

0000a1c0 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)>:
    a1c0:	e92d4070 	push	{r4, r5, r6, lr}
    a1c4:	e2524000 	subs	r4, r2, #0
    a1c8:	e1a05001 	mov	r5, r1
    a1cc:	0a000009 	beq	a1f8 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x38>
    a1d0:	e355000f 	cmp	r5, #15
    a1d4:	9a000003 	bls	a1e8 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x28>
    a1d8:	e59f202c 	ldr	r2, [pc, #44]	; a20c <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x4c>
    a1dc:	e59f102c 	ldr	r1, [pc, #44]	; a210 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x50>
    a1e0:	e59f002c 	ldr	r0, [pc, #44]	; a214 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x54>
    a1e4:	eb004223 	bl	1aa78 <assertion_failed>
    a1e8:	e3a03000 	mov	r3, #0
    a1ec:	e0844005 	add	r4, r4, r5
    a1f0:	e5c4305c 	strb	r3, [r4, #92]	; 0x5c
    a1f4:	e8bd8070 	pop	{r4, r5, r6, pc}
    a1f8:	e59f2018 	ldr	r2, [pc, #24]	; a218 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x58>
    a1fc:	e59f100c 	ldr	r1, [pc, #12]	; a210 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x50>
    a200:	e59f0014 	ldr	r0, [pc, #20]	; a21c <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x5c>
    a204:	eb00421b 	bl	1aa78 <assertion_failed>
    a208:	eafffff0 	b	a1d0 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x10>
    a20c:	00000269 	.word	0x00000269
    a210:	00024754 	.word	0x00024754
    a214:	00024770 	.word	0x00024770
    a218:	00000266 	.word	0x00000266
    a21c:	00024764 	.word	0x00024764

0000a220 <CDWHCIDevice::~CDWHCIDevice()>:
    a220:	e3a03000 	mov	r3, #0
    a224:	e92d4010 	push	{r4, lr}
    a228:	e1a04000 	mov	r4, r0
    a22c:	e59f201c 	ldr	r2, [pc, #28]	; a250 <CDWHCIDevice::~CDWHCIDevice()+0x30>
    a230:	e5803008 	str	r3, [r0, #8]
    a234:	e880000c 	stm	r0, {r2, r3}
    a238:	e2800074 	add	r0, r0, #116	; 0x74
    a23c:	eb001dd8 	bl	119a4 <CDWHCIRootPort::~CDWHCIRootPort()>
    a240:	e1a00004 	mov	r0, r4
    a244:	eb001221 	bl	ead0 <CUSBHostController::~CUSBHostController()>
    a248:	e1a00004 	mov	r0, r4
    a24c:	e8bd8010 	pop	{r4, pc}
    a250:	00024738 	.word	0x00024738

0000a254 <CDWHCIDevice::~CDWHCIDevice()>:
    a254:	e3a03000 	mov	r3, #0
    a258:	e92d4010 	push	{r4, lr}
    a25c:	e1a04000 	mov	r4, r0
    a260:	e59f2028 	ldr	r2, [pc, #40]	; a290 <CDWHCIDevice::~CDWHCIDevice()+0x3c>
    a264:	e5803008 	str	r3, [r0, #8]
    a268:	e880000c 	stm	r0, {r2, r3}
    a26c:	e2800074 	add	r0, r0, #116	; 0x74
    a270:	eb001dcb 	bl	119a4 <CDWHCIRootPort::~CDWHCIRootPort()>
    a274:	e1a00004 	mov	r0, r4
    a278:	eb001214 	bl	ead0 <CUSBHostController::~CUSBHostController()>
    a27c:	e1a00004 	mov	r0, r4
    a280:	e3a0107c 	mov	r1, #124	; 0x7c
    a284:	eb0062c4 	bl	22d9c <operator delete(void*, unsigned int)>
    a288:	e1a00004 	mov	r0, r4
    a28c:	e8bd8010 	pop	{r4, pc}
    a290:	00024738 	.word	0x00024738

0000a294 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>:
    a294:	e92d4030 	push	{r4, r5, lr}
    a298:	e24dd01c 	sub	sp, sp, #28
    a29c:	e1a05000 	mov	r5, r0
    a2a0:	e28d000c 	add	r0, sp, #12
    a2a4:	eb000967 	bl	c848 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a2a8:	e3a03000 	mov	r3, #0
    a2ac:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    a2b0:	eb004be3 	bl	1d244 <CLogger::Get()>
    a2b4:	e1a04000 	mov	r4, r0
    a2b8:	e28d000c 	add	r0, sp, #12
    a2bc:	eb00096a 	bl	c86c <CDWHCIRegister::Read()>
    a2c0:	e59f3020 	ldr	r3, [pc, #32]	; a2e8 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]+0x54>
    a2c4:	e88d0021 	stm	sp, {r0, r5}
    a2c8:	e3a02004 	mov	r2, #4
    a2cc:	e1a00004 	mov	r0, r4
    a2d0:	e59f1014 	ldr	r1, [pc, #20]	; a2ec <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]+0x58>
    a2d4:	eb004d83 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    a2d8:	e28d000c 	add	r0, sp, #12
    a2dc:	eb000961 	bl	c868 <CDWHCIRegister::~CDWHCIRegister()>
    a2e0:	e28dd01c 	add	sp, sp, #28
    a2e4:	e8bd8030 	pop	{r4, r5, pc}
    a2e8:	00024790 	.word	0x00024790
    a2ec:	00024748 	.word	0x00024748

0000a2f0 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)>:
    a2f0:	e92d4070 	push	{r4, r5, r6, lr}
    a2f4:	e1a04000 	mov	r4, r0
    a2f8:	e1a06001 	mov	r6, r1
    a2fc:	e1a05002 	mov	r5, r2
    a300:	eb0011ee 	bl	eac0 <CUSBHostController::CUSBHostController()>
    a304:	e3a03000 	mov	r3, #0
    a308:	e3a00001 	mov	r0, #1
    a30c:	e59fc0a8 	ldr	ip, [pc, #168]	; a3bc <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xcc>
    a310:	e5843010 	str	r3, [r4, #16]
    a314:	e584300c 	str	r3, [r4, #12]
    a318:	e584306c 	str	r3, [r4, #108]	; 0x6c
    a31c:	e5843070 	str	r3, [r4, #112]	; 0x70
    a320:	e5840014 	str	r0, [r4, #20]
    a324:	e5840058 	str	r0, [r4, #88]	; 0x58
    a328:	e5846004 	str	r6, [r4, #4]
    a32c:	e5845008 	str	r5, [r4, #8]
    a330:	e584c000 	str	ip, [r4]
    a334:	e1a01004 	mov	r1, r4
    a338:	e2840074 	add	r0, r4, #116	; 0x74
    a33c:	eb001d88 	bl	11964 <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)>
    a340:	e5943004 	ldr	r3, [r4, #4]
    a344:	e3530000 	cmp	r3, #0
    a348:	0a000011 	beq	a394 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xa4>
    a34c:	e5943008 	ldr	r3, [r4, #8]
    a350:	e3530000 	cmp	r3, #0
    a354:	0a000013 	beq	a3a8 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xb8>
    a358:	e3a01000 	mov	r1, #0
    a35c:	e2843014 	add	r3, r4, #20
    a360:	e2842054 	add	r2, r4, #84	; 0x54
    a364:	e5a31004 	str	r1, [r3, #4]!
    a368:	e1520003 	cmp	r2, r3
    a36c:	1afffffc 	bne	a364 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0x74>
    a370:	e3a03000 	mov	r3, #0
    a374:	e1a01003 	mov	r1, r3
    a378:	e0842003 	add	r2, r4, r3
    a37c:	e2833001 	add	r3, r3, #1
    a380:	e3530010 	cmp	r3, #16
    a384:	e5c2105c 	strb	r1, [r2, #92]	; 0x5c
    a388:	1afffffa 	bne	a378 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0x88>
    a38c:	e1a00004 	mov	r0, r4
    a390:	e8bd8070 	pop	{r4, r5, r6, pc}
    a394:	e3a02048 	mov	r2, #72	; 0x48
    a398:	e59f1020 	ldr	r1, [pc, #32]	; a3c0 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xd0>
    a39c:	e59f0020 	ldr	r0, [pc, #32]	; a3c4 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xd4>
    a3a0:	eb0041b4 	bl	1aa78 <assertion_failed>
    a3a4:	eaffffe8 	b	a34c <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0x5c>
    a3a8:	e3a02049 	mov	r2, #73	; 0x49
    a3ac:	e59f100c 	ldr	r1, [pc, #12]	; a3c0 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xd0>
    a3b0:	e59f0010 	ldr	r0, [pc, #16]	; a3c8 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xd8>
    a3b4:	eb0041af 	bl	1aa78 <assertion_failed>
    a3b8:	eaffffe6 	b	a358 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0x68>
    a3bc:	00024738 	.word	0x00024738
    a3c0:	00024754 	.word	0x00024754
    a3c4:	0002479c 	.word	0x0002479c
    a3c8:	000247b4 	.word	0x000247b4

0000a3cc <CDWHCIDevice::GetPortSpeed()>:
    a3cc:	e92d4010 	push	{r4, lr}
    a3d0:	e24dd010 	sub	sp, sp, #16
    a3d4:	e59f103c 	ldr	r1, [pc, #60]	; a418 <CDWHCIDevice::GetPortSpeed()+0x4c>
    a3d8:	e28d0004 	add	r0, sp, #4
    a3dc:	eb000919 	bl	c848 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a3e0:	e28d0004 	add	r0, sp, #4
    a3e4:	eb000920 	bl	c86c <CDWHCIRegister::Read()>
    a3e8:	e1a008a0 	lsr	r0, r0, #17
    a3ec:	e2000003 	and	r0, r0, #3
    a3f0:	e3500003 	cmp	r0, #3
    a3f4:	01a04000 	moveq	r4, r0
    a3f8:	159f301c 	ldrne	r3, [pc, #28]	; a41c <CDWHCIDevice::GetPortSpeed()+0x50>
    a3fc:	10830000 	addne	r0, r3, r0
    a400:	15d04020 	ldrbne	r4, [r0, #32]
    a404:	e28d0004 	add	r0, sp, #4
    a408:	eb000916 	bl	c868 <CDWHCIRegister::~CDWHCIRegister()>
    a40c:	e1a00004 	mov	r0, r4
    a410:	e28dd010 	add	sp, sp, #16
    a414:	e8bd8010 	pop	{r4, pc}
    a418:	20980440 	.word	0x20980440
    a41c:	00024730 	.word	0x00024730

0000a420 <CDWHCIDevice::OvercurrentDetected()>:
    a420:	e92d4010 	push	{r4, lr}
    a424:	e24dd010 	sub	sp, sp, #16
    a428:	e59f1028 	ldr	r1, [pc, #40]	; a458 <CDWHCIDevice::OvercurrentDetected()+0x38>
    a42c:	e28d0004 	add	r0, sp, #4
    a430:	eb000904 	bl	c848 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a434:	e28d0004 	add	r0, sp, #4
    a438:	eb00090b 	bl	c86c <CDWHCIRegister::Read()>
    a43c:	e1a04000 	mov	r4, r0
    a440:	e28d0004 	add	r0, sp, #4
    a444:	eb000907 	bl	c868 <CDWHCIRegister::~CDWHCIRegister()>
    a448:	e1a00224 	lsr	r0, r4, #4
    a44c:	e2000001 	and	r0, r0, #1
    a450:	e28dd010 	add	sp, sp, #16
    a454:	e8bd8010 	pop	{r4, pc}
    a458:	20980440 	.word	0x20980440

0000a45c <CDWHCIDevice::DisableRootPort()>:
    a45c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a460:	e24dd014 	sub	sp, sp, #20
    a464:	e59f1030 	ldr	r1, [pc, #48]	; a49c <CDWHCIDevice::DisableRootPort()+0x40>
    a468:	e28d0004 	add	r0, sp, #4
    a46c:	eb0008f5 	bl	c848 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a470:	e28d0004 	add	r0, sp, #4
    a474:	eb0008fc 	bl	c86c <CDWHCIRegister::Read()>
    a478:	e3e01a01 	mvn	r1, #4096	; 0x1000
    a47c:	e28d0004 	add	r0, sp, #4
    a480:	eb000931 	bl	c94c <CDWHCIRegister::And(unsigned int)>
    a484:	e28d0004 	add	r0, sp, #4
    a488:	eb0008fe 	bl	c888 <CDWHCIRegister::Write()>
    a48c:	e28d0004 	add	r0, sp, #4
    a490:	eb0008f4 	bl	c868 <CDWHCIRegister::~CDWHCIRegister()>
    a494:	e28dd014 	add	sp, sp, #20
    a498:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    a49c:	20980440 	.word	0x20980440

0000a4a0 <CDWHCIDevice::PowerOn()>:
    a4a0:	e92d4030 	push	{r4, r5, lr}
    a4a4:	e24dd024 	sub	sp, sp, #36	; 0x24
    a4a8:	e28d0008 	add	r0, sp, #8
    a4ac:	e3a05000 	mov	r5, #0
    a4b0:	eb004194 	bl	1ab08 <CBcmPropertyTags::CBcmPropertyTags()>
    a4b4:	e3a0c003 	mov	ip, #3
    a4b8:	e28d0008 	add	r0, sp, #8
    a4bc:	e58d5000 	str	r5, [sp]
    a4c0:	e3a03014 	mov	r3, #20
    a4c4:	e28d200c 	add	r2, sp, #12
    a4c8:	e59f1034 	ldr	r1, [pc, #52]	; a504 <CDWHCIDevice::PowerOn()+0x64>
    a4cc:	e58dc018 	str	ip, [sp, #24]
    a4d0:	e58dc01c 	str	ip, [sp, #28]
    a4d4:	eb0041e2 	bl	1ac64 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    a4d8:	e2504000 	subs	r4, r0, #0
    a4dc:	0a000003 	beq	a4f0 <CDWHCIDevice::PowerOn()+0x50>
    a4e0:	e59d401c 	ldr	r4, [sp, #28]
    a4e4:	e3140002 	tst	r4, #2
    a4e8:	11a04005 	movne	r4, r5
    a4ec:	02044001 	andeq	r4, r4, #1
    a4f0:	e28d0008 	add	r0, sp, #8
    a4f4:	eb004189 	bl	1ab20 <CBcmPropertyTags::~CBcmPropertyTags()>
    a4f8:	e1a00004 	mov	r0, r4
    a4fc:	e28dd024 	add	sp, sp, #36	; 0x24
    a500:	e8bd8030 	pop	{r4, r5, pc}
    a504:	00028001 	.word	0x00028001

0000a508 <CDWHCIDevice::EnableGlobalInterrupts()>:
    a508:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a50c:	e24dd014 	sub	sp, sp, #20
    a510:	e59f1030 	ldr	r1, [pc, #48]	; a548 <CDWHCIDevice::EnableGlobalInterrupts()+0x40>
    a514:	e28d0004 	add	r0, sp, #4
    a518:	eb0008ca 	bl	c848 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a51c:	e28d0004 	add	r0, sp, #4
    a520:	eb0008d1 	bl	c86c <CDWHCIRegister::Read()>
    a524:	e3a01001 	mov	r1, #1
    a528:	e28d0004 	add	r0, sp, #4
    a52c:	eb000916 	bl	c98c <CDWHCIRegister::Or(unsigned int)>
    a530:	e28d0004 	add	r0, sp, #4
    a534:	eb0008d3 	bl	c888 <CDWHCIRegister::Write()>
    a538:	e28d0004 	add	r0, sp, #4
    a53c:	eb0008c9 	bl	c868 <CDWHCIRegister::~CDWHCIRegister()>
    a540:	e28dd014 	add	sp, sp, #20
    a544:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    a548:	20980008 	.word	0x20980008

0000a54c <CDWHCIDevice::EnableCommonInterrupts()>:
    a54c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a550:	e24dd014 	sub	sp, sp, #20
    a554:	e59f1024 	ldr	r1, [pc, #36]	; a580 <CDWHCIDevice::EnableCommonInterrupts()+0x34>
    a558:	e28d0004 	add	r0, sp, #4
    a55c:	eb0008b9 	bl	c848 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a560:	e28d0004 	add	r0, sp, #4
    a564:	eb00094f 	bl	caa8 <CDWHCIRegister::SetAll()>
    a568:	e28d0004 	add	r0, sp, #4
    a56c:	eb0008c5 	bl	c888 <CDWHCIRegister::Write()>
    a570:	e28d0004 	add	r0, sp, #4
    a574:	eb0008bb 	bl	c868 <CDWHCIRegister::~CDWHCIRegister()>
    a578:	e28dd014 	add	sp, sp, #20
    a57c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    a580:	20980014 	.word	0x20980014

0000a584 <CDWHCIDevice::EnableHostInterrupts()>:
    a584:	e92d4010 	push	{r4, lr}
    a588:	e1a04000 	mov	r4, r0
    a58c:	e24dd010 	sub	sp, sp, #16
    a590:	e3a02000 	mov	r2, #0
    a594:	e59f1040 	ldr	r1, [pc, #64]	; a5dc <CDWHCIDevice::EnableHostInterrupts()+0x58>
    a598:	e28d0004 	add	r0, sp, #4
    a59c:	eb0008ad 	bl	c858 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    a5a0:	e28d0004 	add	r0, sp, #4
    a5a4:	eb0008b7 	bl	c888 <CDWHCIRegister::Write()>
    a5a8:	e1a00004 	mov	r0, r4
    a5ac:	ebffffe6 	bl	a54c <CDWHCIDevice::EnableCommonInterrupts()>
    a5b0:	e28d0004 	add	r0, sp, #4
    a5b4:	eb0008ac 	bl	c86c <CDWHCIRegister::Read()>
    a5b8:	e3a01402 	mov	r1, #33554432	; 0x2000000
    a5bc:	e28d0004 	add	r0, sp, #4
    a5c0:	eb0008f1 	bl	c98c <CDWHCIRegister::Or(unsigned int)>
    a5c4:	e28d0004 	add	r0, sp, #4
    a5c8:	eb0008ae 	bl	c888 <CDWHCIRegister::Write()>
    a5cc:	e28d0004 	add	r0, sp, #4
    a5d0:	eb0008a4 	bl	c868 <CDWHCIRegister::~CDWHCIRegister()>
    a5d4:	e28dd010 	add	sp, sp, #16
    a5d8:	e8bd8010 	pop	{r4, pc}
    a5dc:	20980018 	.word	0x20980018

0000a5e0 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)>:
    a5e0:	e92d4030 	push	{r4, r5, lr}
    a5e4:	e1a04000 	mov	r4, r0
    a5e8:	e24dd014 	sub	sp, sp, #20
    a5ec:	e1a05001 	mov	r5, r1
    a5f0:	e28d0004 	add	r0, sp, #4
    a5f4:	e59f1054 	ldr	r1, [pc, #84]	; a650 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)+0x70>
    a5f8:	eb000892 	bl	c848 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a5fc:	e5940058 	ldr	r0, [r4, #88]	; 0x58
    a600:	e3500000 	cmp	r0, #0
    a604:	1a00000f 	bne	a648 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)+0x68>
    a608:	e28d0004 	add	r0, sp, #4
    a60c:	eb000896 	bl	c86c <CDWHCIRegister::Read()>
    a610:	e3a01001 	mov	r1, #1
    a614:	e28d0004 	add	r0, sp, #4
    a618:	e1a01511 	lsl	r1, r1, r5
    a61c:	eb0008da 	bl	c98c <CDWHCIRegister::Or(unsigned int)>
    a620:	e28d0004 	add	r0, sp, #4
    a624:	eb000897 	bl	c888 <CDWHCIRegister::Write()>
    a628:	e5943058 	ldr	r3, [r4, #88]	; 0x58
    a62c:	e3530000 	cmp	r3, #0
    a630:	0a000000 	beq	a638 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)+0x58>
    a634:	eb0061a7 	bl	22cd8 <LeaveCritical>
    a638:	e28d0004 	add	r0, sp, #4
    a63c:	eb000889 	bl	c868 <CDWHCIRegister::~CDWHCIRegister()>
    a640:	e28dd014 	add	sp, sp, #20
    a644:	e8bd8030 	pop	{r4, r5, pc}
    a648:	eb006175 	bl	22c24 <EnterCritical>
    a64c:	eaffffed 	b	a608 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)+0x28>
    a650:	20980418 	.word	0x20980418

0000a654 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>:
    a654:	e92d4030 	push	{r4, r5, lr}
    a658:	e1a04000 	mov	r4, r0
    a65c:	e24dd014 	sub	sp, sp, #20
    a660:	e1a05001 	mov	r5, r1
    a664:	e28d0004 	add	r0, sp, #4
    a668:	e59f1054 	ldr	r1, [pc, #84]	; a6c4 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)+0x70>
    a66c:	eb000875 	bl	c848 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a670:	e5940058 	ldr	r0, [r4, #88]	; 0x58
    a674:	e3500000 	cmp	r0, #0
    a678:	1a00000f 	bne	a6bc <CDWHCIDevice::DisableChannelInterrupt(unsigned int)+0x68>
    a67c:	e28d0004 	add	r0, sp, #4
    a680:	eb000879 	bl	c86c <CDWHCIRegister::Read()>
    a684:	e3a01001 	mov	r1, #1
    a688:	e28d0004 	add	r0, sp, #4
    a68c:	e1e01511 	mvn	r1, r1, lsl r5
    a690:	eb0008ad 	bl	c94c <CDWHCIRegister::And(unsigned int)>
    a694:	e28d0004 	add	r0, sp, #4
    a698:	eb00087a 	bl	c888 <CDWHCIRegister::Write()>
    a69c:	e5943058 	ldr	r3, [r4, #88]	; 0x58
    a6a0:	e3530000 	cmp	r3, #0
    a6a4:	0a000000 	beq	a6ac <CDWHCIDevice::DisableChannelInterrupt(unsigned int)+0x58>
    a6a8:	eb00618a 	bl	22cd8 <LeaveCritical>
    a6ac:	e28d0004 	add	r0, sp, #4
    a6b0:	eb00086c 	bl	c868 <CDWHCIRegister::~CDWHCIRegister()>
    a6b4:	e28dd014 	add	sp, sp, #20
    a6b8:	e8bd8030 	pop	{r4, r5, pc}
    a6bc:	eb006158 	bl	22c24 <EnterCritical>
    a6c0:	eaffffed 	b	a67c <CDWHCIDevice::DisableChannelInterrupt(unsigned int)+0x28>
    a6c4:	20980418 	.word	0x20980418

0000a6c8 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)>:
    a6c8:	e92d4070 	push	{r4, r5, r6, lr}
    a6cc:	e2514000 	subs	r4, r1, #0
    a6d0:	e24dd048 	sub	sp, sp, #72	; 0x48
    a6d4:	e1a06000 	mov	r6, r0
    a6d8:	0a0000de 	beq	aa58 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x390>
    a6dc:	e1a00004 	mov	r0, r4
    a6e0:	eb0009b0 	bl	cda8 <CDWHCITransferStageData::GetChannelNumber() const>
    a6e4:	e596300c 	ldr	r3, [r6, #12]
    a6e8:	e1a05000 	mov	r5, r0
    a6ec:	e1500003 	cmp	r0, r3
    a6f0:	2a0000cf 	bcs	aa34 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x36c>
    a6f4:	e3a01001 	mov	r1, #1
    a6f8:	e1a00004 	mov	r0, r4
    a6fc:	eb0009a3 	bl	cd90 <CDWHCITransferStageData::SetSubState(unsigned int)>
    a700:	e59f1364 	ldr	r1, [pc, #868]	; aa6c <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3a4>
    a704:	e1a05285 	lsl	r5, r5, #5
    a708:	e0851001 	add	r1, r5, r1
    a70c:	e1a0000d 	mov	r0, sp
    a710:	eb00084c 	bl	c848 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a714:	e1a0000d 	mov	r0, sp
    a718:	eb0008e2 	bl	caa8 <CDWHCIRegister::SetAll()>
    a71c:	e1a0000d 	mov	r0, sp
    a720:	eb000858 	bl	c888 <CDWHCIRegister::Write()>
    a724:	e59f1344 	ldr	r1, [pc, #836]	; aa70 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3a8>
    a728:	e3a02000 	mov	r2, #0
    a72c:	e0851001 	add	r1, r5, r1
    a730:	e28d000c 	add	r0, sp, #12
    a734:	eb000847 	bl	c858 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    a738:	e1a00004 	mov	r0, r4
    a73c:	eb000af5 	bl	d318 <CDWHCITransferStageData::GetBytesToTransfer() const>
    a740:	e3c014ff 	bic	r1, r0, #-16777216	; 0xff000000
    a744:	e3c1173e 	bic	r1, r1, #16252928	; 0xf80000
    a748:	e28d000c 	add	r0, sp, #12
    a74c:	eb00088e 	bl	c98c <CDWHCIRegister::Or(unsigned int)>
    a750:	e1a00004 	mov	r0, r4
    a754:	eb000af1 	bl	d320 <CDWHCITransferStageData::GetPacketsToTransfer() const>
    a758:	e59f1314 	ldr	r1, [pc, #788]	; aa74 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3ac>
    a75c:	e0011980 	and	r1, r1, r0, lsl #19
    a760:	e28d000c 	add	r0, sp, #12
    a764:	eb000888 	bl	c98c <CDWHCIRegister::Or(unsigned int)>
    a768:	e1a00004 	mov	r0, r4
    a76c:	eb000ab3 	bl	d240 <CDWHCITransferStageData::GetPID() const>
    a770:	e1a01e80 	lsl	r1, r0, #29
    a774:	e28d000c 	add	r0, sp, #12
    a778:	eb000883 	bl	c98c <CDWHCIRegister::Or(unsigned int)>
    a77c:	e28d000c 	add	r0, sp, #12
    a780:	eb000840 	bl	c888 <CDWHCIRegister::Write()>
    a784:	e1a00004 	mov	r0, r4
    a788:	eb000ad1 	bl	d2d4 <CDWHCITransferStageData::GetDMAAddress() const>
    a78c:	e59f12e4 	ldr	r1, [pc, #740]	; aa78 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3b0>
    a790:	e3c02103 	bic	r2, r0, #-1073741824	; 0xc0000000
    a794:	e3822101 	orr	r2, r2, #1073741824	; 0x40000000
    a798:	e0851001 	add	r1, r5, r1
    a79c:	e28d0018 	add	r0, sp, #24
    a7a0:	eb00082c 	bl	c858 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    a7a4:	e28d0018 	add	r0, sp, #24
    a7a8:	eb000836 	bl	c888 <CDWHCIRegister::Write()>
    a7ac:	e1a00004 	mov	r0, r4
    a7b0:	eb000ac7 	bl	d2d4 <CDWHCITransferStageData::GetDMAAddress() const>
    a7b4:	e1a06000 	mov	r6, r0
    a7b8:	e1a00004 	mov	r0, r4
    a7bc:	eb000ad5 	bl	d318 <CDWHCITransferStageData::GetBytesToTransfer() const>
    a7c0:	e1a01000 	mov	r1, r0
    a7c4:	e1a00006 	mov	r0, r6
    a7c8:	eb006158 	bl	22d30 <CleanAndInvalidateDataCacheRange>
    a7cc:	e59f12a8 	ldr	r1, [pc, #680]	; aa7c <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3b4>
    a7d0:	e3a02000 	mov	r2, #0
    a7d4:	e0851001 	add	r1, r5, r1
    a7d8:	e28d0024 	add	r0, sp, #36	; 0x24
    a7dc:	eb00081d 	bl	c858 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    a7e0:	e1a00004 	mov	r0, r4
    a7e4:	eb000acf 	bl	d328 <CDWHCITransferStageData::IsSplit() const>
    a7e8:	e3500000 	cmp	r0, #0
    a7ec:	1a000079 	bne	a9d8 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x310>
    a7f0:	e28d0024 	add	r0, sp, #36	; 0x24
    a7f4:	eb000823 	bl	c888 <CDWHCIRegister::Write()>
    a7f8:	e59f1280 	ldr	r1, [pc, #640]	; aa80 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3b8>
    a7fc:	e28d0030 	add	r0, sp, #48	; 0x30
    a800:	e0851001 	add	r1, r5, r1
    a804:	eb00080f 	bl	c848 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a808:	e28d0030 	add	r0, sp, #48	; 0x30
    a80c:	eb000816 	bl	c86c <CDWHCIRegister::Read()>
    a810:	e59f126c 	ldr	r1, [pc, #620]	; aa84 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3bc>
    a814:	e28d0030 	add	r0, sp, #48	; 0x30
    a818:	eb00084b 	bl	c94c <CDWHCIRegister::And(unsigned int)>
    a81c:	e1a00004 	mov	r0, r4
    a820:	eb000a82 	bl	d230 <CDWHCITransferStageData::GetMaxPacketSize() const>
    a824:	e1a01a80 	lsl	r1, r0, #21
    a828:	e1a01aa1 	lsr	r1, r1, #21
    a82c:	e28d0030 	add	r0, sp, #48	; 0x30
    a830:	eb000855 	bl	c98c <CDWHCIRegister::Or(unsigned int)>
    a834:	e28d0030 	add	r0, sp, #48	; 0x30
    a838:	e3e01603 	mvn	r1, #3145728	; 0x300000
    a83c:	eb000842 	bl	c94c <CDWHCIRegister::And(unsigned int)>
    a840:	e28d0030 	add	r0, sp, #48	; 0x30
    a844:	e3a01601 	mov	r1, #1048576	; 0x100000
    a848:	eb00084f 	bl	c98c <CDWHCIRegister::Or(unsigned int)>
    a84c:	e1a00004 	mov	r0, r4
    a850:	eb000a9b 	bl	d2c4 <CDWHCITransferStageData::IsDirectionIn() const>
    a854:	e3500000 	cmp	r0, #0
    a858:	0a000056 	beq	a9b8 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x2f0>
    a85c:	e3a01902 	mov	r1, #32768	; 0x8000
    a860:	e28d0030 	add	r0, sp, #48	; 0x30
    a864:	eb000848 	bl	c98c <CDWHCIRegister::Or(unsigned int)>
    a868:	e1a00004 	mov	r0, r4
    a86c:	eb000a71 	bl	d238 <CDWHCITransferStageData::GetSpeed() const>
    a870:	e3500000 	cmp	r0, #0
    a874:	1a00004b 	bne	a9a8 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x2e0>
    a878:	e3a01802 	mov	r1, #131072	; 0x20000
    a87c:	e28d0030 	add	r0, sp, #48	; 0x30
    a880:	eb000841 	bl	c98c <CDWHCIRegister::Or(unsigned int)>
    a884:	e3e0157f 	mvn	r1, #532676608	; 0x1fc00000
    a888:	e28d0030 	add	r0, sp, #48	; 0x30
    a88c:	eb00082e 	bl	c94c <CDWHCIRegister::And(unsigned int)>
    a890:	e1a00004 	mov	r0, r4
    a894:	eb000a21 	bl	d120 <CDWHCITransferStageData::GetDeviceAddress() const>
    a898:	e1a01b00 	lsl	r1, r0, #22
    a89c:	e28d0030 	add	r0, sp, #48	; 0x30
    a8a0:	eb000839 	bl	c98c <CDWHCIRegister::Or(unsigned int)>
    a8a4:	e3e01703 	mvn	r1, #786432	; 0xc0000
    a8a8:	e28d0030 	add	r0, sp, #48	; 0x30
    a8ac:	eb000826 	bl	c94c <CDWHCIRegister::And(unsigned int)>
    a8b0:	e1a00004 	mov	r0, r4
    a8b4:	eb000a2b 	bl	d168 <CDWHCITransferStageData::GetEndpointType() const>
    a8b8:	e1a01900 	lsl	r1, r0, #18
    a8bc:	e28d0030 	add	r0, sp, #48	; 0x30
    a8c0:	eb000831 	bl	c98c <CDWHCIRegister::Or(unsigned int)>
    a8c4:	e3e01b1e 	mvn	r1, #30720	; 0x7800
    a8c8:	e28d0030 	add	r0, sp, #48	; 0x30
    a8cc:	eb00081e 	bl	c94c <CDWHCIRegister::And(unsigned int)>
    a8d0:	e1a00004 	mov	r0, r4
    a8d4:	eb000a43 	bl	d1e8 <CDWHCITransferStageData::GetEndpointNumber() const>
    a8d8:	e1a01580 	lsl	r1, r0, #11
    a8dc:	e28d0030 	add	r0, sp, #48	; 0x30
    a8e0:	eb000829 	bl	c98c <CDWHCIRegister::Or(unsigned int)>
    a8e4:	e1a00004 	mov	r0, r4
    a8e8:	eb000b1f 	bl	d56c <CDWHCITransferStageData::GetFrameScheduler() const>
    a8ec:	e2506000 	subs	r6, r0, #0
    a8f0:	0a00000b 	beq	a924 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x25c>
    a8f4:	e5963000 	ldr	r3, [r6]
    a8f8:	e5933014 	ldr	r3, [r3, #20]
    a8fc:	e12fff33 	blx	r3
    a900:	e5963000 	ldr	r3, [r6]
    a904:	e1a00006 	mov	r0, r6
    a908:	e5933018 	ldr	r3, [r3, #24]
    a90c:	e12fff33 	blx	r3
    a910:	e3500000 	cmp	r0, #0
    a914:	1a00002b 	bne	a9c8 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x300>
    a918:	e3e01202 	mvn	r1, #536870912	; 0x20000000
    a91c:	e28d0030 	add	r0, sp, #48	; 0x30
    a920:	eb000809 	bl	c94c <CDWHCIRegister::And(unsigned int)>
    a924:	e59f115c 	ldr	r1, [pc, #348]	; aa88 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3c0>
    a928:	e28d003c 	add	r0, sp, #60	; 0x3c
    a92c:	e0851001 	add	r1, r5, r1
    a930:	eb0007c4 	bl	c848 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a934:	e1a00004 	mov	r0, r4
    a938:	eb000ac4 	bl	d450 <CDWHCITransferStageData::GetStatusMask() const>
    a93c:	e1a01000 	mov	r1, r0
    a940:	e28d003c 	add	r0, sp, #60	; 0x3c
    a944:	eb0007eb 	bl	c8f8 <CDWHCIRegister::Set(unsigned int)>
    a948:	e28d003c 	add	r0, sp, #60	; 0x3c
    a94c:	eb0007cd 	bl	c888 <CDWHCIRegister::Write()>
    a950:	e28d0030 	add	r0, sp, #48	; 0x30
    a954:	e3a01102 	mov	r1, #-2147483648	; 0x80000000
    a958:	eb00080b 	bl	c98c <CDWHCIRegister::Or(unsigned int)>
    a95c:	e3e01101 	mvn	r1, #1073741824	; 0x40000000
    a960:	e28d0030 	add	r0, sp, #48	; 0x30
    a964:	eb0007f8 	bl	c94c <CDWHCIRegister::And(unsigned int)>
    a968:	e28d0030 	add	r0, sp, #48	; 0x30
    a96c:	eb0007c5 	bl	c888 <CDWHCIRegister::Write()>
    a970:	e28d003c 	add	r0, sp, #60	; 0x3c
    a974:	eb0007bb 	bl	c868 <CDWHCIRegister::~CDWHCIRegister()>
    a978:	e28d0030 	add	r0, sp, #48	; 0x30
    a97c:	eb0007b9 	bl	c868 <CDWHCIRegister::~CDWHCIRegister()>
    a980:	e28d0024 	add	r0, sp, #36	; 0x24
    a984:	eb0007b7 	bl	c868 <CDWHCIRegister::~CDWHCIRegister()>
    a988:	e28d0018 	add	r0, sp, #24
    a98c:	eb0007b5 	bl	c868 <CDWHCIRegister::~CDWHCIRegister()>
    a990:	e28d000c 	add	r0, sp, #12
    a994:	eb0007b3 	bl	c868 <CDWHCIRegister::~CDWHCIRegister()>
    a998:	e1a0000d 	mov	r0, sp
    a99c:	eb0007b1 	bl	c868 <CDWHCIRegister::~CDWHCIRegister()>
    a9a0:	e28dd048 	add	sp, sp, #72	; 0x48
    a9a4:	e8bd8070 	pop	{r4, r5, r6, pc}
    a9a8:	e3e01802 	mvn	r1, #131072	; 0x20000
    a9ac:	e28d0030 	add	r0, sp, #48	; 0x30
    a9b0:	eb0007e5 	bl	c94c <CDWHCIRegister::And(unsigned int)>
    a9b4:	eaffffb2 	b	a884 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x1bc>
    a9b8:	e3e01902 	mvn	r1, #32768	; 0x8000
    a9bc:	e28d0030 	add	r0, sp, #48	; 0x30
    a9c0:	eb0007e1 	bl	c94c <CDWHCIRegister::And(unsigned int)>
    a9c4:	eaffffa7 	b	a868 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x1a0>
    a9c8:	e3a01202 	mov	r1, #536870912	; 0x20000000
    a9cc:	e28d0030 	add	r0, sp, #48	; 0x30
    a9d0:	eb0007ed 	bl	c98c <CDWHCIRegister::Or(unsigned int)>
    a9d4:	eaffffd2 	b	a924 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x25c>
    a9d8:	e1a00004 	mov	r0, r4
    a9dc:	eb000a7d 	bl	d3d8 <CDWHCITransferStageData::GetHubPortAddress() const>
    a9e0:	e1a01000 	mov	r1, r0
    a9e4:	e28d0024 	add	r0, sp, #36	; 0x24
    a9e8:	eb0007e7 	bl	c98c <CDWHCIRegister::Or(unsigned int)>
    a9ec:	e1a00004 	mov	r0, r4
    a9f0:	eb000a5c 	bl	d368 <CDWHCITransferStageData::GetHubAddress() const>
    a9f4:	e1a01380 	lsl	r1, r0, #7
    a9f8:	e28d0024 	add	r0, sp, #36	; 0x24
    a9fc:	eb0007e2 	bl	c98c <CDWHCIRegister::Or(unsigned int)>
    aa00:	e1a00004 	mov	r0, r4
    aa04:	eb000a8f 	bl	d448 <CDWHCITransferStageData::GetSplitPosition() const>
    aa08:	e1a01700 	lsl	r1, r0, #14
    aa0c:	e28d0024 	add	r0, sp, #36	; 0x24
    aa10:	eb0007dd 	bl	c98c <CDWHCIRegister::Or(unsigned int)>
    aa14:	e1a00004 	mov	r0, r4
    aa18:	eb000a44 	bl	d330 <CDWHCITransferStageData::IsSplitComplete() const>
    aa1c:	e3500000 	cmp	r0, #0
    aa20:	1a000008 	bne	aa48 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x380>
    aa24:	e3a01102 	mov	r1, #-2147483648	; 0x80000000
    aa28:	e28d0024 	add	r0, sp, #36	; 0x24
    aa2c:	eb0007d6 	bl	c98c <CDWHCIRegister::Or(unsigned int)>
    aa30:	eaffff6e 	b	a7f0 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x128>
    aa34:	e59f2050 	ldr	r2, [pc, #80]	; aa8c <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3c4>
    aa38:	e59f1050 	ldr	r1, [pc, #80]	; aa90 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3c8>
    aa3c:	e59f0050 	ldr	r0, [pc, #80]	; aa94 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3cc>
    aa40:	eb00400c 	bl	1aa78 <assertion_failed>
    aa44:	eaffff2a 	b	a6f4 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x2c>
    aa48:	e3a01801 	mov	r1, #65536	; 0x10000
    aa4c:	e28d0024 	add	r0, sp, #36	; 0x24
    aa50:	eb0007cd 	bl	c98c <CDWHCIRegister::Or(unsigned int)>
    aa54:	eafffff2 	b	aa24 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x35c>
    aa58:	e59f2038 	ldr	r2, [pc, #56]	; aa98 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3d0>
    aa5c:	e59f102c 	ldr	r1, [pc, #44]	; aa90 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3c8>
    aa60:	e59f0034 	ldr	r0, [pc, #52]	; aa9c <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3d4>
    aa64:	eb004003 	bl	1aa78 <assertion_failed>
    aa68:	eaffff1b 	b	a6dc <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x14>
    aa6c:	20980508 	.word	0x20980508
    aa70:	20980510 	.word	0x20980510
    aa74:	1ff80000 	.word	0x1ff80000
    aa78:	20980514 	.word	0x20980514
    aa7c:	20980504 	.word	0x20980504
    aa80:	20980500 	.word	0x20980500
    aa84:	fffff800 	.word	0xfffff800
    aa88:	2098050c 	.word	0x2098050c
    aa8c:	0000030b 	.word	0x0000030b
    aa90:	00024754 	.word	0x00024754
    aa94:	000247d4 	.word	0x000247d4
    aa98:	00000309 	.word	0x00000309
    aa9c:	000247c4 	.word	0x000247c4

0000aaa0 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>:
    aaa0:	e92d4070 	push	{r4, r5, r6, lr}
    aaa4:	e2515000 	subs	r5, r1, #0
    aaa8:	e24dd018 	sub	sp, sp, #24
    aaac:	e1a06000 	mov	r6, r0
    aab0:	0a000037 	beq	ab94 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0xf4>
    aab4:	e1a00005 	mov	r0, r5
    aab8:	eb0008ba 	bl	cda8 <CDWHCITransferStageData::GetChannelNumber() const>
    aabc:	e596300c 	ldr	r3, [r6, #12]
    aac0:	e1a04000 	mov	r4, r0
    aac4:	e1500003 	cmp	r0, r3
    aac8:	2a00002c 	bcs	ab80 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0xe0>
    aacc:	e59f10d4 	ldr	r1, [pc, #212]	; aba8 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x108>
    aad0:	e1a0000d 	mov	r0, sp
    aad4:	e0841001 	add	r1, r4, r1
    aad8:	e1a04281 	lsl	r4, r1, #5
    aadc:	e1a01004 	mov	r1, r4
    aae0:	eb000758 	bl	c848 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    aae4:	e1a0000d 	mov	r0, sp
    aae8:	eb00075f 	bl	c86c <CDWHCIRegister::Read()>
    aaec:	e1a0000d 	mov	r0, sp
    aaf0:	e3a01102 	mov	r1, #-2147483648	; 0x80000000
    aaf4:	eb000783 	bl	c908 <CDWHCIRegister::IsSet(unsigned int) const>
    aaf8:	e3500000 	cmp	r0, #0
    aafc:	1a000006 	bne	ab1c <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x7c>
    ab00:	e1a01005 	mov	r1, r5
    ab04:	e1a00006 	mov	r0, r6
    ab08:	ebfffeee 	bl	a6c8 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)>
    ab0c:	e1a0000d 	mov	r0, sp
    ab10:	eb000754 	bl	c868 <CDWHCIRegister::~CDWHCIRegister()>
    ab14:	e28dd018 	add	sp, sp, #24
    ab18:	e8bd8070 	pop	{r4, r5, r6, pc}
    ab1c:	e1a00005 	mov	r0, r5
    ab20:	e3a01000 	mov	r1, #0
    ab24:	eb000899 	bl	cd90 <CDWHCITransferStageData::SetSubState(unsigned int)>
    ab28:	e1a0000d 	mov	r0, sp
    ab2c:	e3e01102 	mvn	r1, #-2147483648	; 0x80000000
    ab30:	eb000785 	bl	c94c <CDWHCIRegister::And(unsigned int)>
    ab34:	e3a01101 	mov	r1, #1073741824	; 0x40000000
    ab38:	e1a0000d 	mov	r0, sp
    ab3c:	eb000792 	bl	c98c <CDWHCIRegister::Or(unsigned int)>
    ab40:	e1a0000d 	mov	r0, sp
    ab44:	eb00074f 	bl	c888 <CDWHCIRegister::Write()>
    ab48:	e284100c 	add	r1, r4, #12
    ab4c:	e28d000c 	add	r0, sp, #12
    ab50:	eb00073c 	bl	c848 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    ab54:	e3a01002 	mov	r1, #2
    ab58:	e28d000c 	add	r0, sp, #12
    ab5c:	eb000765 	bl	c8f8 <CDWHCIRegister::Set(unsigned int)>
    ab60:	e28d000c 	add	r0, sp, #12
    ab64:	eb000747 	bl	c888 <CDWHCIRegister::Write()>
    ab68:	e28d000c 	add	r0, sp, #12
    ab6c:	eb00073d 	bl	c868 <CDWHCIRegister::~CDWHCIRegister()>
    ab70:	e1a0000d 	mov	r0, sp
    ab74:	eb00073b 	bl	c868 <CDWHCIRegister::~CDWHCIRegister()>
    ab78:	e28dd018 	add	sp, sp, #24
    ab7c:	e8bd8070 	pop	{r4, r5, r6, pc}
    ab80:	e3a02e2f 	mov	r2, #752	; 0x2f0
    ab84:	e59f1020 	ldr	r1, [pc, #32]	; abac <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x10c>
    ab88:	e59f0020 	ldr	r0, [pc, #32]	; abb0 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x110>
    ab8c:	eb003fb9 	bl	1aa78 <assertion_failed>
    ab90:	eaffffcd 	b	aacc <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x2c>
    ab94:	e59f2018 	ldr	r2, [pc, #24]	; abb4 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x114>
    ab98:	e59f100c 	ldr	r1, [pc, #12]	; abac <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x10c>
    ab9c:	e59f0014 	ldr	r0, [pc, #20]	; abb8 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x118>
    aba0:	eb003fb4 	bl	1aa78 <assertion_failed>
    aba4:	eaffffc2 	b	aab4 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x14>
    aba8:	0104c028 	.word	0x0104c028
    abac:	00024754 	.word	0x00024754
    abb0:	000247d4 	.word	0x000247d4
    abb4:	000002ee 	.word	0x000002ee
    abb8:	000247c4 	.word	0x000247c4

0000abbc <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)>:
    abbc:	e92d4070 	push	{r4, r5, r6, lr}
    abc0:	e3a03000 	mov	r3, #0
    abc4:	e1a05000 	mov	r5, r0
    abc8:	e1a04001 	mov	r4, r1
    abcc:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    abd0:	e1510003 	cmp	r1, r3
    abd4:	0a00001f 	beq	ac58 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0x9c>
    abd8:	e1a00004 	mov	r0, r4
    abdc:	eb000869 	bl	cd88 <CDWHCITransferStageData::GetState() const>
    abe0:	e3500003 	cmp	r0, #3
    abe4:	0a000003 	beq	abf8 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0x3c>
    abe8:	e59f207c 	ldr	r2, [pc, #124]	; ac6c <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0xb0>
    abec:	e59f107c 	ldr	r1, [pc, #124]	; ac70 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0xb4>
    abf0:	e59f007c 	ldr	r0, [pc, #124]	; ac74 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0xb8>
    abf4:	eb003f9f 	bl	1aa78 <assertion_failed>
    abf8:	e1a00004 	mov	r0, r4
    abfc:	eb0009c9 	bl	d328 <CDWHCITransferStageData::IsSplit() const>
    ac00:	e2501000 	subs	r1, r0, #0
    ac04:	1a000007 	bne	ac28 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0x6c>
    ac08:	e1a00004 	mov	r0, r4
    ac0c:	eb00085b 	bl	cd80 <CDWHCITransferStageData::SetState(unsigned int)>
    ac10:	e1a01004 	mov	r1, r4
    ac14:	e1a00005 	mov	r0, r5
    ac18:	ebffffa0 	bl	aaa0 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>
    ac1c:	e3a03000 	mov	r3, #0
    ac20:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    ac24:	e8bd8070 	pop	{r4, r5, r6, pc}
    ac28:	e1a00004 	mov	r0, r4
    ac2c:	e3a01001 	mov	r1, #1
    ac30:	eb000852 	bl	cd80 <CDWHCITransferStageData::SetState(unsigned int)>
    ac34:	e3a01000 	mov	r1, #0
    ac38:	e1a00004 	mov	r0, r4
    ac3c:	eb000841 	bl	cd48 <CDWHCITransferStageData::SetSplitComplete(bool)>
    ac40:	e1a00004 	mov	r0, r4
    ac44:	eb000a48 	bl	d56c <CDWHCITransferStageData::GetFrameScheduler() const>
    ac48:	e5903000 	ldr	r3, [r0]
    ac4c:	e5933008 	ldr	r3, [r3, #8]
    ac50:	e12fff33 	blx	r3
    ac54:	eaffffed 	b	ac10 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0x54>
    ac58:	e59f2018 	ldr	r2, [pc, #24]	; ac78 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0xbc>
    ac5c:	e59f100c 	ldr	r1, [pc, #12]	; ac70 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0xb4>
    ac60:	e59f0014 	ldr	r0, [pc, #20]	; ac7c <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0xc0>
    ac64:	eb003f83 	bl	1aa78 <assertion_failed>
    ac68:	eaffffda 	b	abd8 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0x1c>
    ac6c:	000004ef 	.word	0x000004ef
    ac70:	00024754 	.word	0x00024754
    ac74:	000247ec 	.word	0x000247ec
    ac78:	000004ee 	.word	0x000004ee
    ac7c:	000247c4 	.word	0x000247c4

0000ac80 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)>:
    ac80:	e92d4070 	push	{r4, r5, r6, lr}
    ac84:	e2525000 	subs	r5, r2, #0
    ac88:	e1a04001 	mov	r4, r1
    ac8c:	0a00000d 	beq	acc8 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x48>
    ac90:	e3540000 	cmp	r4, #0
    ac94:	0a000003 	beq	aca8 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x28>
    ac98:	e1a01004 	mov	r1, r4
    ac9c:	e1a00005 	mov	r0, r5
    aca0:	e8bd4070 	pop	{r4, r5, r6, lr}
    aca4:	eaffffc4 	b	abbc <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)>
    aca8:	e59f102c 	ldr	r1, [pc, #44]	; acdc <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x5c>
    acac:	e59f002c 	ldr	r0, [pc, #44]	; ace0 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x60>
    acb0:	e59f202c 	ldr	r2, [pc, #44]	; ace4 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x64>
    acb4:	eb003f6f 	bl	1aa78 <assertion_failed>
    acb8:	e1a01004 	mov	r1, r4
    acbc:	e1a00005 	mov	r0, r5
    acc0:	e8bd4070 	pop	{r4, r5, r6, lr}
    acc4:	eaffffbc 	b	abbc <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)>
    acc8:	e59f2018 	ldr	r2, [pc, #24]	; ace8 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x68>
    accc:	e59f1008 	ldr	r1, [pc, #8]	; acdc <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x5c>
    acd0:	e59f0014 	ldr	r0, [pc, #20]	; acec <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x6c>
    acd4:	eb003f67 	bl	1aa78 <assertion_failed>
    acd8:	eaffffec 	b	ac90 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x10>
    acdc:	00024754 	.word	0x00024754
    ace0:	00024820 	.word	0x00024820
    ace4:	00000508 	.word	0x00000508
    ace8:	00000505 	.word	0x00000505
    acec:	00024764 	.word	0x00024764

0000acf0 <CDWHCIDevice::AllocateChannel()>:
    acf0:	e92d4010 	push	{r4, lr}
    acf4:	e590c014 	ldr	ip, [r0, #20]
    acf8:	e24dd008 	sub	sp, sp, #8
    acfc:	e35c0000 	cmp	ip, #0
    ad00:	e1a04000 	mov	r4, r0
    ad04:	1a000014 	bne	ad5c <CDWHCIDevice::AllocateChannel()+0x6c>
    ad08:	e590100c 	ldr	r1, [r0, #12]
    ad0c:	e3510000 	cmp	r1, #0
    ad10:	0a00000e 	beq	ad50 <CDWHCIDevice::AllocateChannel()+0x60>
    ad14:	e5903010 	ldr	r3, [r0, #16]
    ad18:	e2130001 	ands	r0, r3, #1
    ad1c:	0a000025 	beq	adb8 <CDWHCIDevice::AllocateChannel()+0xc8>
    ad20:	e3a00000 	mov	r0, #0
    ad24:	e3a03001 	mov	r3, #1
    ad28:	ea000002 	b	ad38 <CDWHCIDevice::AllocateChannel()+0x48>
    ad2c:	e5942010 	ldr	r2, [r4, #16]
    ad30:	e1120003 	tst	r2, r3
    ad34:	0a000013 	beq	ad88 <CDWHCIDevice::AllocateChannel()+0x98>
    ad38:	e2800001 	add	r0, r0, #1
    ad3c:	e1500001 	cmp	r0, r1
    ad40:	e1a03083 	lsl	r3, r3, #1
    ad44:	3afffff8 	bcc	ad2c <CDWHCIDevice::AllocateChannel()+0x3c>
    ad48:	e35c0000 	cmp	ip, #0
    ad4c:	1a000017 	bne	adb0 <CDWHCIDevice::AllocateChannel()+0xc0>
    ad50:	e3a00010 	mov	r0, #16
    ad54:	e28dd008 	add	sp, sp, #8
    ad58:	e8bd8010 	pop	{r4, pc}
    ad5c:	e1a0000c 	mov	r0, ip
    ad60:	eb005faf 	bl	22c24 <EnterCritical>
    ad64:	e594100c 	ldr	r1, [r4, #12]
    ad68:	e3510000 	cmp	r1, #0
    ad6c:	0594c014 	ldreq	ip, [r4, #20]
    ad70:	0afffff4 	beq	ad48 <CDWHCIDevice::AllocateChannel()+0x58>
    ad74:	e5943010 	ldr	r3, [r4, #16]
    ad78:	e594c014 	ldr	ip, [r4, #20]
    ad7c:	e2130001 	ands	r0, r3, #1
    ad80:	1affffe6 	bne	ad20 <CDWHCIDevice::AllocateChannel()+0x30>
    ad84:	e3a03001 	mov	r3, #1
    ad88:	e5942010 	ldr	r2, [r4, #16]
    ad8c:	e35c0000 	cmp	ip, #0
    ad90:	e1823003 	orr	r3, r2, r3
    ad94:	e5843010 	str	r3, [r4, #16]
    ad98:	0affffed 	beq	ad54 <CDWHCIDevice::AllocateChannel()+0x64>
    ad9c:	e58d0004 	str	r0, [sp, #4]
    ada0:	eb005fcc 	bl	22cd8 <LeaveCritical>
    ada4:	e59d0004 	ldr	r0, [sp, #4]
    ada8:	e28dd008 	add	sp, sp, #8
    adac:	e8bd8010 	pop	{r4, pc}
    adb0:	eb005fc8 	bl	22cd8 <LeaveCritical>
    adb4:	eaffffe5 	b	ad50 <CDWHCIDevice::AllocateChannel()+0x60>
    adb8:	e5943010 	ldr	r3, [r4, #16]
    adbc:	e3833001 	orr	r3, r3, #1
    adc0:	e5843010 	str	r3, [r4, #16]
    adc4:	eaffffe2 	b	ad54 <CDWHCIDevice::AllocateChannel()+0x64>

0000adc8 <CDWHCIDevice::FreeChannel(unsigned int)>:
    adc8:	e590300c 	ldr	r3, [r0, #12]
    adcc:	e92d4070 	push	{r4, r5, r6, lr}
    add0:	e1530001 	cmp	r3, r1
    add4:	e1a04000 	mov	r4, r0
    add8:	e1a06001 	mov	r6, r1
    addc:	9a000016 	bls	ae3c <CDWHCIDevice::FreeChannel(unsigned int)+0x74>
    ade0:	e3a05001 	mov	r5, #1
    ade4:	e5940014 	ldr	r0, [r4, #20]
    ade8:	e1a05615 	lsl	r5, r5, r6
    adec:	e3500000 	cmp	r0, #0
    adf0:	1a00000f 	bne	ae34 <CDWHCIDevice::FreeChannel(unsigned int)+0x6c>
    adf4:	e5943010 	ldr	r3, [r4, #16]
    adf8:	e1150003 	tst	r5, r3
    adfc:	0a000007 	beq	ae20 <CDWHCIDevice::FreeChannel(unsigned int)+0x58>
    ae00:	e5943010 	ldr	r3, [r4, #16]
    ae04:	e5942014 	ldr	r2, [r4, #20]
    ae08:	e1c35005 	bic	r5, r3, r5
    ae0c:	e3520000 	cmp	r2, #0
    ae10:	e5845010 	str	r5, [r4, #16]
    ae14:	08bd8070 	popeq	{r4, r5, r6, pc}
    ae18:	e8bd4070 	pop	{r4, r5, r6, lr}
    ae1c:	ea005fad 	b	22cd8 <LeaveCritical>
    ae20:	e59f2028 	ldr	r2, [pc, #40]	; ae50 <CDWHCIDevice::FreeChannel(unsigned int)+0x88>
    ae24:	e59f1028 	ldr	r1, [pc, #40]	; ae54 <CDWHCIDevice::FreeChannel(unsigned int)+0x8c>
    ae28:	e59f0028 	ldr	r0, [pc, #40]	; ae58 <CDWHCIDevice::FreeChannel(unsigned int)+0x90>
    ae2c:	eb003f11 	bl	1aa78 <assertion_failed>
    ae30:	eafffff2 	b	ae00 <CDWHCIDevice::FreeChannel(unsigned int)+0x38>
    ae34:	eb005f7a 	bl	22c24 <EnterCritical>
    ae38:	eaffffed 	b	adf4 <CDWHCIDevice::FreeChannel(unsigned int)+0x2c>
    ae3c:	e59f2018 	ldr	r2, [pc, #24]	; ae5c <CDWHCIDevice::FreeChannel(unsigned int)+0x94>
    ae40:	e59f100c 	ldr	r1, [pc, #12]	; ae54 <CDWHCIDevice::FreeChannel(unsigned int)+0x8c>
    ae44:	e59f0014 	ldr	r0, [pc, #20]	; ae60 <CDWHCIDevice::FreeChannel(unsigned int)+0x98>
    ae48:	eb003f0a 	bl	1aa78 <assertion_failed>
    ae4c:	eaffffe3 	b	ade0 <CDWHCIDevice::FreeChannel(unsigned int)+0x18>
    ae50:	0000052e 	.word	0x0000052e
    ae54:	00024754 	.word	0x00024754
    ae58:	0002482c 	.word	0x0002482c
    ae5c:	00000529 	.word	0x00000529
    ae60:	000247d4 	.word	0x000247d4

0000ae64 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)>:
    ae64:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    ae68:	e2517000 	subs	r7, r1, #0
    ae6c:	e24dd00c 	sub	sp, sp, #12
    ae70:	e1a04000 	mov	r4, r0
    ae74:	e1a08002 	mov	r8, r2
    ae78:	e1a09003 	mov	r9, r3
    ae7c:	0a000048 	beq	afa4 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x140>
    ae80:	e1a00004 	mov	r0, r4
    ae84:	ebffff99 	bl	acf0 <CDWHCIDevice::AllocateChannel()>
    ae88:	e594300c 	ldr	r3, [r4, #12]
    ae8c:	e1a05000 	mov	r5, r0
    ae90:	e1500003 	cmp	r0, r3
    ae94:	23a07000 	movcs	r7, #0
    ae98:	3a000002 	bcc	aea8 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x44>
    ae9c:	e1a00007 	mov	r0, r7
    aea0:	e28dd00c 	add	sp, sp, #12
    aea4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    aea8:	e3a00054 	mov	r0, #84	; 0x54
    aeac:	eb0009b0 	bl	d574 <CDWHCITransferStageData::operator new(unsigned int)>
    aeb0:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
    aeb4:	e58d9000 	str	r9, [sp]
    aeb8:	e58d3004 	str	r3, [sp, #4]
    aebc:	e1a02007 	mov	r2, r7
    aec0:	e1a03008 	mov	r3, r8
    aec4:	e1a01005 	mov	r1, r5
    aec8:	e0848105 	add	r8, r4, r5, lsl #2
    aecc:	e1a06000 	mov	r6, r0
    aed0:	eb0007ca 	bl	ce00 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)>
    aed4:	e5983018 	ldr	r3, [r8, #24]
    aed8:	e3530000 	cmp	r3, #0
    aedc:	0a000003 	beq	aef0 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x8c>
    aee0:	e59f20d0 	ldr	r2, [pc, #208]	; afb8 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x154>
    aee4:	e59f10d0 	ldr	r1, [pc, #208]	; afbc <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x158>
    aee8:	e59f00d0 	ldr	r0, [pc, #208]	; afc0 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x15c>
    aeec:	eb003ee1 	bl	1aa78 <assertion_failed>
    aef0:	e1a01005 	mov	r1, r5
    aef4:	e1a00004 	mov	r0, r4
    aef8:	e5886018 	str	r6, [r8, #24]
    aefc:	ebfffdb7 	bl	a5e0 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)>
    af00:	e1a00006 	mov	r0, r6
    af04:	eb000907 	bl	d328 <CDWHCITransferStageData::IsSplit() const>
    af08:	e2501000 	subs	r1, r0, #0
    af0c:	e1a00006 	mov	r0, r6
    af10:	1a000007 	bne	af34 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0xd0>
    af14:	eb000799 	bl	cd80 <CDWHCITransferStageData::SetState(unsigned int)>
    af18:	e3a07001 	mov	r7, #1
    af1c:	e1a00004 	mov	r0, r4
    af20:	e1a01006 	mov	r1, r6
    af24:	ebfffedd 	bl	aaa0 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>
    af28:	e1a00007 	mov	r0, r7
    af2c:	e28dd00c 	add	sp, sp, #12
    af30:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    af34:	eb000799 	bl	cda0 <CDWHCITransferStageData::BeginSplitCycle()>
    af38:	e2507000 	subs	r7, r0, #0
    af3c:	1a00000c 	bne	af74 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x110>
    af40:	e1a01005 	mov	r1, r5
    af44:	e1a00004 	mov	r0, r4
    af48:	ebfffdc1 	bl	a654 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    af4c:	e1a00006 	mov	r0, r6
    af50:	eb0006fa 	bl	cb40 <CDWHCITransferStageData::~CDWHCITransferStageData()>
    af54:	e1a00006 	mov	r0, r6
    af58:	e3a01054 	mov	r1, #84	; 0x54
    af5c:	eb00099d 	bl	d5d8 <CDWHCITransferStageData::operator delete(void*, unsigned int)>
    af60:	e5887018 	str	r7, [r8, #24]
    af64:	e1a01005 	mov	r1, r5
    af68:	e1a00004 	mov	r0, r4
    af6c:	ebffff95 	bl	adc8 <CDWHCIDevice::FreeChannel(unsigned int)>
    af70:	eaffffc9 	b	ae9c <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x38>
    af74:	e1a00006 	mov	r0, r6
    af78:	e3a01001 	mov	r1, #1
    af7c:	eb00077f 	bl	cd80 <CDWHCITransferStageData::SetState(unsigned int)>
    af80:	e3a01000 	mov	r1, #0
    af84:	e1a00006 	mov	r0, r6
    af88:	eb00076e 	bl	cd48 <CDWHCITransferStageData::SetSplitComplete(bool)>
    af8c:	e1a00006 	mov	r0, r6
    af90:	eb000975 	bl	d56c <CDWHCITransferStageData::GetFrameScheduler() const>
    af94:	e5903000 	ldr	r3, [r0]
    af98:	e5933008 	ldr	r3, [r3, #8]
    af9c:	e12fff33 	blx	r3
    afa0:	eaffffdc 	b	af18 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0xb4>
    afa4:	e59f2018 	ldr	r2, [pc, #24]	; afc4 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x160>
    afa8:	e59f100c 	ldr	r1, [pc, #12]	; afbc <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x158>
    afac:	e59f0014 	ldr	r0, [pc, #20]	; afc8 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x164>
    afb0:	eb003eb0 	bl	1aa78 <assertion_failed>
    afb4:	eaffffb1 	b	ae80 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x1c>
    afb8:	00000282 	.word	0x00000282
    afbc:	00024754 	.word	0x00024754
    afc0:	0002485c 	.word	0x0002485c
    afc4:	00000271 	.word	0x00000271
    afc8:	00024850 	.word	0x00024850

0000afcc <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)>:
    afcc:	e92d4070 	push	{r4, r5, r6, lr}
    afd0:	e3a03000 	mov	r3, #0
    afd4:	e24dd008 	sub	sp, sp, #8
    afd8:	e1a05000 	mov	r5, r0
    afdc:	e1a04001 	mov	r4, r1
    afe0:	e1a06002 	mov	r6, r2
    afe4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    afe8:	e1510003 	cmp	r1, r3
    afec:	0a000025 	beq	b088 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xbc>
    aff0:	e1a00004 	mov	r0, r4
    aff4:	eb000f61 	bl	ed80 <CUSBRequest::GetEndpoint() const>
    aff8:	eb000e4a 	bl	e928 <CUSBEndpoint::GetType() const>
    affc:	e3500001 	cmp	r0, #1
    b000:	0a000008 	beq	b028 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0x5c>
    b004:	e1a00004 	mov	r0, r4
    b008:	eb000f5c 	bl	ed80 <CUSBRequest::GetEndpoint() const>
    b00c:	eb000e45 	bl	e928 <CUSBEndpoint::GetType() const>
    b010:	e3500002 	cmp	r0, #2
    b014:	0a000003 	beq	b028 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0x5c>
    b018:	e3a020e8 	mov	r2, #232	; 0xe8
    b01c:	e59f1078 	ldr	r1, [pc, #120]	; b09c <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xd0>
    b020:	e59f0078 	ldr	r0, [pc, #120]	; b0a0 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xd4>
    b024:	eb003e93 	bl	1aa78 <assertion_failed>
    b028:	e1a00004 	mov	r0, r4
    b02c:	eb000fa0 	bl	eeb4 <CUSBRequest::GetBufLen() const>
    b030:	e3500000 	cmp	r0, #0
    b034:	1a000003 	bne	b048 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0x7c>
    b038:	e3a020e9 	mov	r2, #233	; 0xe9
    b03c:	e59f1058 	ldr	r1, [pc, #88]	; b09c <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xd0>
    b040:	e59f005c 	ldr	r0, [pc, #92]	; b0a4 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xd8>
    b044:	eb003e8b 	bl	1aa78 <assertion_failed>
    b048:	e3a01000 	mov	r1, #0
    b04c:	e1a00004 	mov	r0, r4
    b050:	eb000f5a 	bl	edc0 <CUSBRequest::SetStatus(int)>
    b054:	e1a00004 	mov	r0, r4
    b058:	eb000f48 	bl	ed80 <CUSBRequest::GetEndpoint() const>
    b05c:	eb000e33 	bl	e930 <CUSBEndpoint::IsDirectionIn() const>
    b060:	e58d6000 	str	r6, [sp]
    b064:	e1a02000 	mov	r2, r0
    b068:	e1a01004 	mov	r1, r4
    b06c:	e1a00005 	mov	r0, r5
    b070:	e3a03000 	mov	r3, #0
    b074:	ebffff7a 	bl	ae64 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)>
    b078:	e3a03000 	mov	r3, #0
    b07c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    b080:	e28dd008 	add	sp, sp, #8
    b084:	e8bd8070 	pop	{r4, r5, r6, pc}
    b088:	e3a020e6 	mov	r2, #230	; 0xe6
    b08c:	e59f1008 	ldr	r1, [pc, #8]	; b09c <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xd0>
    b090:	e59f0010 	ldr	r0, [pc, #16]	; b0a8 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xdc>
    b094:	eb003e77 	bl	1aa78 <assertion_failed>
    b098:	eaffffd4 	b	aff0 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0x24>
    b09c:	00024754 	.word	0x00024754
    b0a0:	00024878 	.word	0x00024878
    b0a4:	000248ec 	.word	0x000248ec
    b0a8:	00024850 	.word	0x00024850

0000b0ac <CDWHCIDevice::ChannelInterruptHandler(unsigned int)>:
    b0ac:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    b0b0:	e0807101 	add	r7, r0, r1, lsl #2
    b0b4:	e5974018 	ldr	r4, [r7, #24]
    b0b8:	e24dd020 	sub	sp, sp, #32
    b0bc:	e3540000 	cmp	r4, #0
    b0c0:	e1a05000 	mov	r5, r0
    b0c4:	e1a06001 	mov	r6, r1
    b0c8:	0a0000cd 	beq	b404 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x358>
    b0cc:	e1a00004 	mov	r0, r4
    b0d0:	eb000915 	bl	d52c <CDWHCITransferStageData::GetURB() const>
    b0d4:	e2508000 	subs	r8, r0, #0
    b0d8:	0a0000ce 	beq	b418 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x36c>
    b0dc:	e1a00004 	mov	r0, r4
    b0e0:	eb00072c 	bl	cd98 <CDWHCITransferStageData::GetSubState() const>
    b0e4:	e3500000 	cmp	r0, #0
    b0e8:	0a00005f 	beq	b26c <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x1c0>
    b0ec:	e3500001 	cmp	r0, #1
    b0f0:	0a00002e 	beq	b1b0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x104>
    b0f4:	e59f24a4 	ldr	r2, [pc, #1188]	; b5a0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x4f4>
    b0f8:	e59f14a4 	ldr	r1, [pc, #1188]	; b5a4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x4f8>
    b0fc:	e59f04a4 	ldr	r0, [pc, #1188]	; b5a8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x4fc>
    b100:	eb003e5c 	bl	1aa78 <assertion_failed>
    b104:	e1a00004 	mov	r0, r4
    b108:	eb00071e 	bl	cd88 <CDWHCITransferStageData::GetState() const>
    b10c:	e3500001 	cmp	r0, #1
    b110:	e1a09000 	mov	r9, r0
    b114:	0a000078 	beq	b2fc <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x250>
    b118:	3a000068 	bcc	b2c0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x214>
    b11c:	e3500002 	cmp	r0, #2
    b120:	1a000056 	bne	b280 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x1d4>
    b124:	e1a00004 	mov	r0, r4
    b128:	eb0008d5 	bl	d484 <CDWHCITransferStageData::GetTransactionStatus() const>
    b12c:	e59f3478 	ldr	r3, [pc, #1144]	; b5ac <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x500>
    b130:	e1a09000 	mov	r9, r0
    b134:	e0033000 	and	r3, r3, r0
    b138:	e3530000 	cmp	r3, #0
    b13c:	0a00007d 	beq	b338 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x28c>
    b140:	eb00483f 	bl	1d244 <CLogger::Get()>
    b144:	e59f1464 	ldr	r1, [pc, #1124]	; b5b0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x504>
    b148:	e58d9000 	str	r9, [sp]
    b14c:	e59f3460 	ldr	r3, [pc, #1120]	; b5b4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x508>
    b150:	e3a02001 	mov	r2, #1
    b154:	eb0049e3 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b158:	e3a01000 	mov	r1, #0
    b15c:	e1a00008 	mov	r0, r8
    b160:	eb000f16 	bl	edc0 <CUSBRequest::SetStatus(int)>
    b164:	e1a01006 	mov	r1, r6
    b168:	e1a00005 	mov	r0, r5
    b16c:	ebfffd38 	bl	a654 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    b170:	e3540000 	cmp	r4, #0
    b174:	0a000004 	beq	b18c <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0xe0>
    b178:	e1a00004 	mov	r0, r4
    b17c:	eb00066f 	bl	cb40 <CDWHCITransferStageData::~CDWHCITransferStageData()>
    b180:	e1a00004 	mov	r0, r4
    b184:	e3a01054 	mov	r1, #84	; 0x54
    b188:	eb000912 	bl	d5d8 <CDWHCITransferStageData::operator delete(void*, unsigned int)>
    b18c:	e3a03000 	mov	r3, #0
    b190:	e1a01006 	mov	r1, r6
    b194:	e1a00005 	mov	r0, r5
    b198:	e5873018 	str	r3, [r7, #24]
    b19c:	ebffff09 	bl	adc8 <CDWHCIDevice::FreeChannel(unsigned int)>
    b1a0:	e1a00008 	mov	r0, r8
    b1a4:	eb000f4f 	bl	eee8 <CUSBRequest::CallCompletionRoutine()>
    b1a8:	e28dd020 	add	sp, sp, #32
    b1ac:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    b1b0:	e1a00004 	mov	r0, r4
    b1b4:	eb000846 	bl	d2d4 <CDWHCITransferStageData::GetDMAAddress() const>
    b1b8:	e1a09000 	mov	r9, r0
    b1bc:	e1a00004 	mov	r0, r4
    b1c0:	eb000854 	bl	d318 <CDWHCITransferStageData::GetBytesToTransfer() const>
    b1c4:	e1a01000 	mov	r1, r0
    b1c8:	e1a00009 	mov	r0, r9
    b1cc:	eb005ed7 	bl	22d30 <CleanAndInvalidateDataCacheRange>
    b1d0:	e59f13e0 	ldr	r1, [pc, #992]	; b5b8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x50c>
    b1d4:	e1a09286 	lsl	r9, r6, #5
    b1d8:	e0891001 	add	r1, r9, r1
    b1dc:	e28d0008 	add	r0, sp, #8
    b1e0:	eb000598 	bl	c848 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b1e4:	e28d0008 	add	r0, sp, #8
    b1e8:	eb00059f 	bl	c86c <CDWHCIRegister::Read()>
    b1ec:	e59f13c8 	ldr	r1, [pc, #968]	; b5bc <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x510>
    b1f0:	e28d0014 	add	r0, sp, #20
    b1f4:	e0891001 	add	r1, r9, r1
    b1f8:	eb000592 	bl	c848 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b1fc:	e28d0014 	add	r0, sp, #20
    b200:	eb000599 	bl	c86c <CDWHCIRegister::Read()>
    b204:	e3500002 	cmp	r0, #2
    b208:	0a000087 	beq	b42c <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x380>
    b20c:	e1a00004 	mov	r0, r4
    b210:	eb0006e6 	bl	cdb0 <CDWHCITransferStageData::IsPeriodic() const>
    b214:	e3500000 	cmp	r0, #0
    b218:	1a00001e 	bne	b298 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x1ec>
    b21c:	e28d0014 	add	r0, sp, #20
    b220:	eb000591 	bl	c86c <CDWHCIRegister::Read()>
    b224:	e1a0a000 	mov	sl, r0
    b228:	e28d0008 	add	r0, sp, #8
    b22c:	eb0005a4 	bl	c8c4 <CDWHCIRegister::Get() const>
    b230:	e1a09000 	mov	r9, r0
    b234:	e28d0008 	add	r0, sp, #8
    b238:	eb0005a1 	bl	c8c4 <CDWHCIRegister::Get() const>
    b23c:	e59f237c 	ldr	r2, [pc, #892]	; b5c0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x514>
    b240:	e3c034ff 	bic	r3, r0, #-16777216	; 0xff000000
    b244:	e3c3373e 	bic	r3, r3, #16252928	; 0xf80000
    b248:	e1a0100a 	mov	r1, sl
    b24c:	e00229a9 	and	r2, r2, r9, lsr #19
    b250:	e1a00004 	mov	r0, r4
    b254:	eb00064c 	bl	cb8c <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)>
    b258:	e28d0014 	add	r0, sp, #20
    b25c:	eb000581 	bl	c868 <CDWHCIRegister::~CDWHCIRegister()>
    b260:	e28d0008 	add	r0, sp, #8
    b264:	eb00057f 	bl	c868 <CDWHCIRegister::~CDWHCIRegister()>
    b268:	eaffffa5 	b	b104 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x58>
    b26c:	e1a01004 	mov	r1, r4
    b270:	e1a00005 	mov	r0, r5
    b274:	ebfffd13 	bl	a6c8 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)>
    b278:	e28dd020 	add	sp, sp, #32
    b27c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    b280:	e59f233c 	ldr	r2, [pc, #828]	; b5c4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x518>
    b284:	e59f1318 	ldr	r1, [pc, #792]	; b5a4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x4f8>
    b288:	e59f0318 	ldr	r0, [pc, #792]	; b5a8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x4fc>
    b28c:	eb003df9 	bl	1aa78 <assertion_failed>
    b290:	e28dd020 	add	sp, sp, #32
    b294:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    b298:	e28d0008 	add	r0, sp, #8
    b29c:	eb000588 	bl	c8c4 <CDWHCIRegister::Get() const>
    b2a0:	e2200206 	eor	r0, r0, #1610612736	; 0x60000000
    b2a4:	e3100206 	tst	r0, #1610612736	; 0x60000000
    b2a8:	1affffdb 	bne	b21c <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x170>
    b2ac:	e59f2314 	ldr	r2, [pc, #788]	; b5c8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x51c>
    b2b0:	e59f12ec 	ldr	r1, [pc, #748]	; b5a4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x4f8>
    b2b4:	e59f0310 	ldr	r0, [pc, #784]	; b5cc <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x520>
    b2b8:	eb003dee 	bl	1aa78 <assertion_failed>
    b2bc:	eaffffd6 	b	b21c <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x170>
    b2c0:	e1a00004 	mov	r0, r4
    b2c4:	eb00086e 	bl	d484 <CDWHCITransferStageData::GetTransactionStatus() const>
    b2c8:	e59f92dc 	ldr	r9, [pc, #732]	; b5ac <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x500>
    b2cc:	e1a0a000 	mov	sl, r0
    b2d0:	e0099000 	and	r9, r9, r0
    b2d4:	e3590000 	cmp	r9, #0
    b2d8:	1a00006e 	bne	b498 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x3ec>
    b2dc:	e3100050 	tst	r0, #80	; 0x50
    b2e0:	1a000085 	bne	b4fc <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x450>
    b2e4:	e1a00004 	mov	r0, r4
    b2e8:	eb0007f7 	bl	d2cc <CDWHCITransferStageData::IsStatusStage() const>
    b2ec:	e3500000 	cmp	r0, #0
    b2f0:	0a00009a 	beq	b560 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x4b4>
    b2f4:	e3a01001 	mov	r1, #1
    b2f8:	eaffff97 	b	b15c <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0xb0>
    b2fc:	e1a00004 	mov	r0, r4
    b300:	eb00085f 	bl	d484 <CDWHCITransferStageData::GetTransactionStatus() const>
    b304:	e59f32c4 	ldr	r3, [pc, #708]	; b5d0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x524>
    b308:	e1a0a000 	mov	sl, r0
    b30c:	e0033000 	and	r3, r3, r0
    b310:	e3530000 	cmp	r3, #0
    b314:	0a00002d 	beq	b3d0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x324>
    b318:	eb0047c9 	bl	1d244 <CLogger::Get()>
    b31c:	e59f128c 	ldr	r1, [pc, #652]	; b5b0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x504>
    b320:	e58da000 	str	sl, [sp]
    b324:	e1a02009 	mov	r2, r9
    b328:	e59f3284 	ldr	r3, [pc, #644]	; b5b4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x508>
    b32c:	eb00496d 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b330:	e3a01000 	mov	r1, #0
    b334:	eaffff88 	b	b15c <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0xb0>
    b338:	e1a00004 	mov	r0, r4
    b33c:	eb00088a 	bl	d56c <CDWHCITransferStageData::GetFrameScheduler() const>
    b340:	e5903000 	ldr	r3, [r0]
    b344:	e1a01009 	mov	r1, r9
    b348:	e5933010 	ldr	r3, [r3, #16]
    b34c:	e12fff33 	blx	r3
    b350:	e1a00004 	mov	r0, r4
    b354:	eb000884 	bl	d56c <CDWHCITransferStageData::GetFrameScheduler() const>
    b358:	e5903000 	ldr	r3, [r0]
    b35c:	e593300c 	ldr	r3, [r3, #12]
    b360:	e12fff33 	blx	r3
    b364:	e3500000 	cmp	r0, #0
    b368:	1a00005f 	bne	b4ec <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x440>
    b36c:	e1a00004 	mov	r0, r4
    b370:	eb000854 	bl	d4c8 <CDWHCITransferStageData::IsStageComplete() const>
    b374:	e2509000 	subs	r9, r0, #0
    b378:	1a000033 	bne	b44c <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x3a0>
    b37c:	e1a00004 	mov	r0, r4
    b380:	eb000686 	bl	cda0 <CDWHCITransferStageData::BeginSplitCycle()>
    b384:	e2501000 	subs	r1, r0, #0
    b388:	0affff73 	beq	b15c <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0xb0>
    b38c:	e1a00004 	mov	r0, r4
    b390:	eb000686 	bl	cdb0 <CDWHCITransferStageData::IsPeriodic() const>
    b394:	e250a000 	subs	sl, r0, #0
    b398:	0a000048 	beq	b4c0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x414>
    b39c:	e1a00004 	mov	r0, r4
    b3a0:	eb000851 	bl	d4ec <CDWHCITransferStageData::IsTimeout() const>
    b3a4:	e3500000 	cmp	r0, #0
    b3a8:	0a000072 	beq	b578 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x4cc>
    b3ac:	e1a01006 	mov	r1, r6
    b3b0:	e1a00005 	mov	r0, r5
    b3b4:	ebfffca6 	bl	a654 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    b3b8:	e1a01009 	mov	r1, r9
    b3bc:	e1a00008 	mov	r0, r8
    b3c0:	eb000e7e 	bl	edc0 <CUSBRequest::SetStatus(int)>
    b3c4:	e3540000 	cmp	r4, #0
    b3c8:	1affff6a 	bne	b178 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0xcc>
    b3cc:	eaffff6e 	b	b18c <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0xe0>
    b3d0:	e1a00004 	mov	r0, r4
    b3d4:	eb000864 	bl	d56c <CDWHCITransferStageData::GetFrameScheduler() const>
    b3d8:	e5903000 	ldr	r3, [r0]
    b3dc:	e1a0100a 	mov	r1, sl
    b3e0:	e5933010 	ldr	r3, [r3, #16]
    b3e4:	e12fff33 	blx	r3
    b3e8:	e1a00004 	mov	r0, r4
    b3ec:	e3a01002 	mov	r1, #2
    b3f0:	eb000662 	bl	cd80 <CDWHCITransferStageData::SetState(unsigned int)>
    b3f4:	e1a01009 	mov	r1, r9
    b3f8:	e1a00004 	mov	r0, r4
    b3fc:	eb000651 	bl	cd48 <CDWHCITransferStageData::SetSplitComplete(bool)>
    b400:	eaffffd2 	b	b350 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x2a4>
    b404:	e59f21c8 	ldr	r2, [pc, #456]	; b5d4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x528>
    b408:	e59f1194 	ldr	r1, [pc, #404]	; b5a4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x4f8>
    b40c:	e59f01c4 	ldr	r0, [pc, #452]	; b5d8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x52c>
    b410:	eb003d98 	bl	1aa78 <assertion_failed>
    b414:	eaffff2c 	b	b0cc <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x20>
    b418:	e59f21bc 	ldr	r2, [pc, #444]	; b5dc <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x530>
    b41c:	e59f1180 	ldr	r1, [pc, #384]	; b5a4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x4f8>
    b420:	e59f01b8 	ldr	r0, [pc, #440]	; b5e0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x534>
    b424:	eb003d93 	bl	1aa78 <assertion_failed>
    b428:	eaffff2b 	b	b0dc <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x30>
    b42c:	e1a01004 	mov	r1, r4
    b430:	e1a00005 	mov	r0, r5
    b434:	ebfffd99 	bl	aaa0 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>
    b438:	e28d0014 	add	r0, sp, #20
    b43c:	eb000509 	bl	c868 <CDWHCIRegister::~CDWHCIRegister()>
    b440:	e28d0008 	add	r0, sp, #8
    b444:	eb000507 	bl	c868 <CDWHCIRegister::~CDWHCIRegister()>
    b448:	eaffff8a 	b	b278 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x1cc>
    b44c:	e1a01006 	mov	r1, r6
    b450:	e1a00005 	mov	r0, r5
    b454:	ebfffc7e 	bl	a654 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    b458:	e1a00004 	mov	r0, r4
    b45c:	eb00079a 	bl	d2cc <CDWHCITransferStageData::IsStatusStage() const>
    b460:	e3500000 	cmp	r0, #0
    b464:	0a000005 	beq	b480 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x3d4>
    b468:	e3a01001 	mov	r1, #1
    b46c:	e1a00008 	mov	r0, r8
    b470:	eb000e52 	bl	edc0 <CUSBRequest::SetStatus(int)>
    b474:	e3540000 	cmp	r4, #0
    b478:	1affff3e 	bne	b178 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0xcc>
    b47c:	eaffff42 	b	b18c <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0xe0>
    b480:	e1a00004 	mov	r0, r4
    b484:	eb000813 	bl	d4d8 <CDWHCITransferStageData::GetResultLen() const>
    b488:	e1a01000 	mov	r1, r0
    b48c:	e1a00008 	mov	r0, r8
    b490:	eb000e4c 	bl	edc8 <CUSBRequest::SetResultLen(unsigned int)>
    b494:	eafffff3 	b	b468 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x3bc>
    b498:	eb004769 	bl	1d244 <CLogger::Get()>
    b49c:	e58da000 	str	sl, [sp]
    b4a0:	e59f310c 	ldr	r3, [pc, #268]	; b5b4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x508>
    b4a4:	e3a02001 	mov	r2, #1
    b4a8:	e59f1100 	ldr	r1, [pc, #256]	; b5b0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x504>
    b4ac:	eb00490d 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b4b0:	e3a01000 	mov	r1, #0
    b4b4:	e1a00008 	mov	r0, r8
    b4b8:	eb000e40 	bl	edc0 <CUSBRequest::SetStatus(int)>
    b4bc:	eaffff28 	b	b164 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0xb8>
    b4c0:	e3a01001 	mov	r1, #1
    b4c4:	e1a00004 	mov	r0, r4
    b4c8:	eb00062c 	bl	cd80 <CDWHCITransferStageData::SetState(unsigned int)>
    b4cc:	e1a0100a 	mov	r1, sl
    b4d0:	e1a00004 	mov	r0, r4
    b4d4:	eb00061b 	bl	cd48 <CDWHCITransferStageData::SetSplitComplete(bool)>
    b4d8:	e1a00004 	mov	r0, r4
    b4dc:	eb000822 	bl	d56c <CDWHCITransferStageData::GetFrameScheduler() const>
    b4e0:	e5903000 	ldr	r3, [r0]
    b4e4:	e5933008 	ldr	r3, [r3, #8]
    b4e8:	e12fff33 	blx	r3
    b4ec:	e1a01004 	mov	r1, r4
    b4f0:	e1a00005 	mov	r0, r5
    b4f4:	ebfffd69 	bl	aaa0 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>
    b4f8:	eaffff5e 	b	b278 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x1cc>
    b4fc:	e1a00004 	mov	r0, r4
    b500:	eb00062a 	bl	cdb0 <CDWHCITransferStageData::IsPeriodic() const>
    b504:	e3500000 	cmp	r0, #0
    b508:	0affff75 	beq	b2e4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x238>
    b50c:	e1a00004 	mov	r0, r4
    b510:	eb0007f5 	bl	d4ec <CDWHCITransferStageData::IsTimeout() const>
    b514:	e3500000 	cmp	r0, #0
    b518:	1affffe4 	bne	b4b0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x404>
    b51c:	e3a01003 	mov	r1, #3
    b520:	e1a00004 	mov	r0, r4
    b524:	eb000615 	bl	cd80 <CDWHCITransferStageData::SetState(unsigned int)>
    b528:	e1a00008 	mov	r0, r8
    b52c:	eb000e13 	bl	ed80 <CUSBRequest::GetEndpoint() const>
    b530:	eb000d04 	bl	e948 <CUSBEndpoint::GetInterval() const>
    b534:	e3a01064 	mov	r1, #100	; 0x64
    b538:	e0010091 	mul	r1, r1, r0
    b53c:	e59f30a0 	ldr	r3, [pc, #160]	; b5e4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x538>
    b540:	e0813391 	umull	r3, r1, r1, r3
    b544:	e5950008 	ldr	r0, [r5, #8]
    b548:	e1a03004 	mov	r3, r4
    b54c:	e58d5000 	str	r5, [sp]
    b550:	e1a01321 	lsr	r1, r1, #6
    b554:	e59f208c 	ldr	r2, [pc, #140]	; b5e8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x53c>
    b558:	eb0057bf 	bl	2145c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
    b55c:	eaffff45 	b	b278 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x1cc>
    b560:	e1a00004 	mov	r0, r4
    b564:	eb0007db 	bl	d4d8 <CDWHCITransferStageData::GetResultLen() const>
    b568:	e1a01000 	mov	r1, r0
    b56c:	e1a00008 	mov	r0, r8
    b570:	eb000e14 	bl	edc8 <CUSBRequest::SetResultLen(unsigned int)>
    b574:	eaffff5e 	b	b2f4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x248>
    b578:	e3a01003 	mov	r1, #3
    b57c:	e1a00004 	mov	r0, r4
    b580:	eb0005fe 	bl	cd80 <CDWHCITransferStageData::SetState(unsigned int)>
    b584:	e1a00008 	mov	r0, r8
    b588:	eb000dfc 	bl	ed80 <CUSBRequest::GetEndpoint() const>
    b58c:	eb000ced 	bl	e948 <CUSBEndpoint::GetInterval() const>
    b590:	e3a03064 	mov	r3, #100	; 0x64
    b594:	e59f1048 	ldr	r1, [pc, #72]	; b5e4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x538>
    b598:	e0030093 	mul	r3, r3, r0
    b59c:	eaffffe7 	b	b540 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x494>
    b5a0:	000003a1 	.word	0x000003a1
    b5a4:	00024754 	.word	0x00024754
    b5a8:	00025034 	.word	0x00025034
    b5ac:	0000078c 	.word	0x0000078c
    b5b0:	00024748 	.word	0x00024748
    b5b4:	0002497c 	.word	0x0002497c
    b5b8:	20980510 	.word	0x20980510
    b5bc:	20980508 	.word	0x20980508
    b5c0:	000003ff 	.word	0x000003ff
    b5c4:	00000482 	.word	0x00000482
    b5c8:	00000399 	.word	0x00000399
    b5cc:	00024904 	.word	0x00024904
    b5d0:	000007dc 	.word	0x000007dc
    b5d4:	00000377 	.word	0x00000377
    b5d8:	000247c4 	.word	0x000247c4
    b5dc:	00000379 	.word	0x00000379
    b5e0:	00024850 	.word	0x00024850
    b5e4:	10624dd3 	.word	0x10624dd3
    b5e8:	0000ac80 	.word	0x0000ac80

0000b5ec <CDWHCIDevice::InterruptHandler()>:
    b5ec:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b5f0:	e1a07000 	mov	r7, r0
    b5f4:	e24dd028 	sub	sp, sp, #40	; 0x28
    b5f8:	e3a04000 	mov	r4, #0
    b5fc:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
    b600:	e59f10d8 	ldr	r1, [pc, #216]	; b6e0 <CDWHCIDevice::InterruptHandler()+0xf4>
    b604:	e28d0004 	add	r0, sp, #4
    b608:	eb00048e 	bl	c848 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b60c:	e28d0004 	add	r0, sp, #4
    b610:	eb000495 	bl	c86c <CDWHCIRegister::Read()>
    b614:	e28d0004 	add	r0, sp, #4
    b618:	eb0004a9 	bl	c8c4 <CDWHCIRegister::Get() const>
    b61c:	e3100402 	tst	r0, #33554432	; 0x2000000
    b620:	1a000007 	bne	b644 <CDWHCIDevice::InterruptHandler()+0x58>
    b624:	e28d0004 	add	r0, sp, #4
    b628:	eb000496 	bl	c888 <CDWHCIRegister::Write()>
    b62c:	e3a03000 	mov	r3, #0
    b630:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    b634:	e28d0004 	add	r0, sp, #4
    b638:	eb00048a 	bl	c868 <CDWHCIRegister::~CDWHCIRegister()>
    b63c:	e28dd028 	add	sp, sp, #40	; 0x28
    b640:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    b644:	e59f1098 	ldr	r1, [pc, #152]	; b6e4 <CDWHCIDevice::InterruptHandler()+0xf8>
    b648:	e28d0010 	add	r0, sp, #16
    b64c:	eb00047d 	bl	c848 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b650:	e28d0010 	add	r0, sp, #16
    b654:	eb000484 	bl	c86c <CDWHCIRegister::Read()>
    b658:	e28d0010 	add	r0, sp, #16
    b65c:	eb000489 	bl	c888 <CDWHCIRegister::Write()>
    b660:	e597300c 	ldr	r3, [r7, #12]
    b664:	e1530004 	cmp	r3, r4
    b668:	0a000019 	beq	b6d4 <CDWHCIDevice::InterruptHandler()+0xe8>
    b66c:	e3a05001 	mov	r5, #1
    b670:	e1a08004 	mov	r8, r4
    b674:	e59f606c 	ldr	r6, [pc, #108]	; b6e8 <CDWHCIDevice::InterruptHandler()+0xfc>
    b678:	ea000005 	b	b694 <CDWHCIDevice::InterruptHandler()+0xa8>
    b67c:	e597300c 	ldr	r3, [r7, #12]
    b680:	e2844001 	add	r4, r4, #1
    b684:	e1530004 	cmp	r3, r4
    b688:	e1a05085 	lsl	r5, r5, #1
    b68c:	e2866020 	add	r6, r6, #32
    b690:	9a00000f 	bls	b6d4 <CDWHCIDevice::InterruptHandler()+0xe8>
    b694:	e28d0010 	add	r0, sp, #16
    b698:	eb000489 	bl	c8c4 <CDWHCIRegister::Get() const>
    b69c:	e1100005 	tst	r0, r5
    b6a0:	0afffff5 	beq	b67c <CDWHCIDevice::InterruptHandler()+0x90>
    b6a4:	e1a02008 	mov	r2, r8
    b6a8:	e1a01006 	mov	r1, r6
    b6ac:	e28d001c 	add	r0, sp, #28
    b6b0:	eb000468 	bl	c858 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    b6b4:	e28d001c 	add	r0, sp, #28
    b6b8:	eb000472 	bl	c888 <CDWHCIRegister::Write()>
    b6bc:	e1a00007 	mov	r0, r7
    b6c0:	e1a01004 	mov	r1, r4
    b6c4:	ebfffe78 	bl	b0ac <CDWHCIDevice::ChannelInterruptHandler(unsigned int)>
    b6c8:	e28d001c 	add	r0, sp, #28
    b6cc:	eb000465 	bl	c868 <CDWHCIRegister::~CDWHCIRegister()>
    b6d0:	eaffffe9 	b	b67c <CDWHCIDevice::InterruptHandler()+0x90>
    b6d4:	e28d0010 	add	r0, sp, #16
    b6d8:	eb000462 	bl	c868 <CDWHCIRegister::~CDWHCIRegister()>
    b6dc:	eaffffd0 	b	b624 <CDWHCIDevice::InterruptHandler()+0x38>
    b6e0:	20980014 	.word	0x20980014
    b6e4:	20980414 	.word	0x20980414
    b6e8:	2098050c 	.word	0x2098050c

0000b6ec <CDWHCIDevice::InterruptStub(void*)>:
    b6ec:	e92d4010 	push	{r4, lr}
    b6f0:	e2504000 	subs	r4, r0, #0
    b6f4:	0a000002 	beq	b704 <CDWHCIDevice::InterruptStub(void*)+0x18>
    b6f8:	e1a00004 	mov	r0, r4
    b6fc:	e8bd4010 	pop	{r4, lr}
    b700:	eaffffb9 	b	b5ec <CDWHCIDevice::InterruptHandler()>
    b704:	e59f0014 	ldr	r0, [pc, #20]	; b720 <CDWHCIDevice::InterruptStub(void*)+0x34>
    b708:	e59f2014 	ldr	r2, [pc, #20]	; b724 <CDWHCIDevice::InterruptStub(void*)+0x38>
    b70c:	e59f1014 	ldr	r1, [pc, #20]	; b728 <CDWHCIDevice::InterruptStub(void*)+0x3c>
    b710:	eb003cd8 	bl	1aa78 <assertion_failed>
    b714:	e1a00004 	mov	r0, r4
    b718:	e8bd4010 	pop	{r4, lr}
    b71c:	eaffffb2 	b	b5ec <CDWHCIDevice::InterruptHandler()>
    b720:	00024764 	.word	0x00024764
    b724:	000004e3 	.word	0x000004e3
    b728:	00024754 	.word	0x00024754

0000b72c <CDWHCIDevice::AllocateWaitBlock()>:
    b72c:	e92d4070 	push	{r4, r5, r6, lr}
    b730:	e1a05000 	mov	r5, r0
    b734:	e5900070 	ldr	r0, [r0, #112]	; 0x70
    b738:	e3500000 	cmp	r0, #0
    b73c:	1a000014 	bne	b794 <CDWHCIDevice::AllocateWaitBlock()+0x68>
    b740:	e3a04000 	mov	r4, #0
    b744:	e3a03001 	mov	r3, #1
    b748:	e595206c 	ldr	r2, [r5, #108]	; 0x6c
    b74c:	e1120003 	tst	r2, r3
    b750:	0a000007 	beq	b774 <CDWHCIDevice::AllocateWaitBlock()+0x48>
    b754:	e2844001 	add	r4, r4, #1
    b758:	e3540010 	cmp	r4, #16
    b75c:	e1a03083 	lsl	r3, r3, #1
    b760:	1afffff8 	bne	b748 <CDWHCIDevice::AllocateWaitBlock()+0x1c>
    b764:	e3500000 	cmp	r0, #0
    b768:	1a000006 	bne	b788 <CDWHCIDevice::AllocateWaitBlock()+0x5c>
    b76c:	e1a00004 	mov	r0, r4
    b770:	e8bd8070 	pop	{r4, r5, r6, pc}
    b774:	e595206c 	ldr	r2, [r5, #108]	; 0x6c
    b778:	e3500000 	cmp	r0, #0
    b77c:	e1823003 	orr	r3, r2, r3
    b780:	e585306c 	str	r3, [r5, #108]	; 0x6c
    b784:	0afffff8 	beq	b76c <CDWHCIDevice::AllocateWaitBlock()+0x40>
    b788:	eb005d52 	bl	22cd8 <LeaveCritical>
    b78c:	e1a00004 	mov	r0, r4
    b790:	e8bd8070 	pop	{r4, r5, r6, pc}
    b794:	eb005d22 	bl	22c24 <EnterCritical>
    b798:	e5950070 	ldr	r0, [r5, #112]	; 0x70
    b79c:	eaffffe7 	b	b740 <CDWHCIDevice::AllocateWaitBlock()+0x14>

0000b7a0 <CDWHCIDevice::FreeWaitBlock(unsigned int)>:
    b7a0:	e351000f 	cmp	r1, #15
    b7a4:	e92d4070 	push	{r4, r5, r6, lr}
    b7a8:	e1a06001 	mov	r6, r1
    b7ac:	e1a04000 	mov	r4, r0
    b7b0:	8a000016 	bhi	b810 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x70>
    b7b4:	e3a05001 	mov	r5, #1
    b7b8:	e5940070 	ldr	r0, [r4, #112]	; 0x70
    b7bc:	e1a05615 	lsl	r5, r5, r6
    b7c0:	e3500000 	cmp	r0, #0
    b7c4:	1a00000f 	bne	b808 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x68>
    b7c8:	e594306c 	ldr	r3, [r4, #108]	; 0x6c
    b7cc:	e1150003 	tst	r5, r3
    b7d0:	0a000007 	beq	b7f4 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x54>
    b7d4:	e594306c 	ldr	r3, [r4, #108]	; 0x6c
    b7d8:	e5942070 	ldr	r2, [r4, #112]	; 0x70
    b7dc:	e1c35005 	bic	r5, r3, r5
    b7e0:	e3520000 	cmp	r2, #0
    b7e4:	e584506c 	str	r5, [r4, #108]	; 0x6c
    b7e8:	08bd8070 	popeq	{r4, r5, r6, pc}
    b7ec:	e8bd4070 	pop	{r4, r5, r6, lr}
    b7f0:	ea005d38 	b	22cd8 <LeaveCritical>
    b7f4:	e59f2028 	ldr	r2, [pc, #40]	; b824 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x84>
    b7f8:	e59f1028 	ldr	r1, [pc, #40]	; b828 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x88>
    b7fc:	e59f0028 	ldr	r0, [pc, #40]	; b82c <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x8c>
    b800:	eb003c9c 	bl	1aa78 <assertion_failed>
    b804:	eafffff2 	b	b7d4 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x34>
    b808:	eb005d05 	bl	22c24 <EnterCritical>
    b80c:	eaffffed 	b	b7c8 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x28>
    b810:	e59f2018 	ldr	r2, [pc, #24]	; b830 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x90>
    b814:	e59f100c 	ldr	r1, [pc, #12]	; b828 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x88>
    b818:	e59f0014 	ldr	r0, [pc, #20]	; b834 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x94>
    b81c:	eb003c95 	bl	1aa78 <assertion_failed>
    b820:	eaffffe3 	b	b7b4 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x14>
    b824:	00000553 	.word	0x00000553
    b828:	00024754 	.word	0x00024754
    b82c:	000249a0 	.word	0x000249a0
    b830:	0000054e 	.word	0x0000054e
    b834:	00024770 	.word	0x00024770

0000b838 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>:
    b838:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    b83c:	e24dd00c 	sub	sp, sp, #12
    b840:	e1a08002 	mov	r8, r2
    b844:	e1a07001 	mov	r7, r1
    b848:	e1a09003 	mov	r9, r3
    b84c:	e1a06000 	mov	r6, r0
    b850:	ebffffb5 	bl	b72c <CDWHCIDevice::AllocateWaitBlock()>
    b854:	e350000f 	cmp	r0, #15
    b858:	83a08000 	movhi	r8, #0
    b85c:	8a000020 	bhi	b8e4 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0xac>
    b860:	e3570000 	cmp	r7, #0
    b864:	e1a05000 	mov	r5, r0
    b868:	0a00002c 	beq	b920 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0xe8>
    b86c:	e1a03006 	mov	r3, r6
    b870:	e1a02005 	mov	r2, r5
    b874:	e59f10b8 	ldr	r1, [pc, #184]	; b934 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0xfc>
    b878:	e1a00007 	mov	r0, r7
    b87c:	e0864005 	add	r4, r6, r5
    b880:	eb000d8d 	bl	eebc <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
    b884:	e5d4305c 	ldrb	r3, [r4, #92]	; 0x5c
    b888:	e3530000 	cmp	r3, #0
    b88c:	1a000017 	bne	b8f0 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0xb8>
    b890:	e3a01001 	mov	r1, #1
    b894:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
    b898:	e1a02008 	mov	r2, r8
    b89c:	e58d3000 	str	r3, [sp]
    b8a0:	e1a00006 	mov	r0, r6
    b8a4:	e5c4105c 	strb	r1, [r4, #92]	; 0x5c
    b8a8:	e1a03009 	mov	r3, r9
    b8ac:	e1a01007 	mov	r1, r7
    b8b0:	ebfffd6b 	bl	ae64 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)>
    b8b4:	e2508000 	subs	r8, r0, #0
    b8b8:	0a000011 	beq	b904 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0xcc>
    b8bc:	e5d4305c 	ldrb	r3, [r4, #92]	; 0x5c
    b8c0:	e3530000 	cmp	r3, #0
    b8c4:	1afffffc 	bne	b8bc <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x84>
    b8c8:	e1a01005 	mov	r1, r5
    b8cc:	e1a00006 	mov	r0, r6
    b8d0:	ebffffb2 	bl	b7a0 <CDWHCIDevice::FreeWaitBlock(unsigned int)>
    b8d4:	e1a00007 	mov	r0, r7
    b8d8:	eb000d3c 	bl	edd0 <CUSBRequest::GetStatus() const>
    b8dc:	e2908000 	adds	r8, r0, #0
    b8e0:	13a08001 	movne	r8, #1
    b8e4:	e1a00008 	mov	r0, r8
    b8e8:	e28dd00c 	add	sp, sp, #12
    b8ec:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    b8f0:	e59f2040 	ldr	r2, [pc, #64]	; b938 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x100>
    b8f4:	e59f1040 	ldr	r1, [pc, #64]	; b93c <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x104>
    b8f8:	e59f0040 	ldr	r0, [pc, #64]	; b940 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x108>
    b8fc:	eb003c5d 	bl	1aa78 <assertion_failed>
    b900:	eaffffe2 	b	b890 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x58>
    b904:	e1a00006 	mov	r0, r6
    b908:	e5c4805c 	strb	r8, [r4, #92]	; 0x5c
    b90c:	e1a01005 	mov	r1, r5
    b910:	ebffffa2 	bl	b7a0 <CDWHCIDevice::FreeWaitBlock(unsigned int)>
    b914:	e1a00008 	mov	r0, r8
    b918:	e28dd00c 	add	sp, sp, #12
    b91c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    b920:	e59f201c 	ldr	r2, [pc, #28]	; b944 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x10c>
    b924:	e59f1010 	ldr	r1, [pc, #16]	; b93c <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x104>
    b928:	e59f0018 	ldr	r0, [pc, #24]	; b948 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x110>
    b92c:	eb003c51 	bl	1aa78 <assertion_failed>
    b930:	eaffffcd 	b	b86c <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x34>
    b934:	0000a1c0 	.word	0x0000a1c0
    b938:	0000024e 	.word	0x0000024e
    b93c:	00024754 	.word	0x00024754
    b940:	000249c8 	.word	0x000249c8
    b944:	0000024b 	.word	0x0000024b
    b948:	00024850 	.word	0x00024850

0000b94c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)>:
    b94c:	e92d4070 	push	{r4, r5, r6, lr}
    b950:	e3a03000 	mov	r3, #0
    b954:	e24dd008 	sub	sp, sp, #8
    b958:	e1a05000 	mov	r5, r0
    b95c:	e1a04001 	mov	r4, r1
    b960:	e1a06002 	mov	r6, r2
    b964:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    b968:	e1510003 	cmp	r1, r3
    b96c:	0a00008e 	beq	bbac <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x260>
    b970:	e3a01000 	mov	r1, #0
    b974:	e1a00004 	mov	r0, r4
    b978:	eb000d10 	bl	edc0 <CUSBRequest::SetStatus(int)>
    b97c:	e1a00004 	mov	r0, r4
    b980:	eb000cfe 	bl	ed80 <CUSBRequest::GetEndpoint() const>
    b984:	eb000be7 	bl	e928 <CUSBEndpoint::GetType() const>
    b988:	e3500000 	cmp	r0, #0
    b98c:	1a000035 	bne	ba68 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x11c>
    b990:	e3560000 	cmp	r6, #0
    b994:	1a000054 	bne	baec <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x1a0>
    b998:	e1a00004 	mov	r0, r4
    b99c:	eb000d1a 	bl	ee0c <CUSBRequest::GetSetupData()>
    b9a0:	e2506000 	subs	r6, r0, #0
    b9a4:	0a00008a 	beq	bbd4 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x288>
    b9a8:	e1d630d0 	ldrsb	r3, [r6]
    b9ac:	e1a00004 	mov	r0, r4
    b9b0:	e3530000 	cmp	r3, #0
    b9b4:	ba00005a 	blt	bb24 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x1d8>
    b9b8:	eb000d3d 	bl	eeb4 <CUSBRequest::GetBufLen() const>
    b9bc:	e2506000 	subs	r6, r0, #0
    b9c0:	1a00000a 	bne	b9f0 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa4>
    b9c4:	e58d6000 	str	r6, [sp]
    b9c8:	e1a03006 	mov	r3, r6
    b9cc:	e1a02006 	mov	r2, r6
    b9d0:	e1a01004 	mov	r1, r4
    b9d4:	e1a00005 	mov	r0, r5
    b9d8:	ebffff96 	bl	b838 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    b9dc:	e3500000 	cmp	r0, #0
    b9e0:	1a000046 	bne	bb00 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x1b4>
    b9e4:	e3a00000 	mov	r0, #0
    b9e8:	e28dd008 	add	sp, sp, #8
    b9ec:	e8bd8070 	pop	{r4, r5, r6, pc}
    b9f0:	e3a06000 	mov	r6, #0
    b9f4:	e1a01004 	mov	r1, r4
    b9f8:	e58d6000 	str	r6, [sp]
    b9fc:	e1a03006 	mov	r3, r6
    ba00:	e1a02006 	mov	r2, r6
    ba04:	e1a00005 	mov	r0, r5
    ba08:	ebffff8a 	bl	b838 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    ba0c:	e1500006 	cmp	r0, r6
    ba10:	0afffff3 	beq	b9e4 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x98>
    ba14:	e58d6000 	str	r6, [sp]
    ba18:	e1a03006 	mov	r3, r6
    ba1c:	e1a02006 	mov	r2, r6
    ba20:	e1a01004 	mov	r1, r4
    ba24:	e1a00005 	mov	r0, r5
    ba28:	ebffff82 	bl	b838 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    ba2c:	e1500006 	cmp	r0, r6
    ba30:	0affffeb 	beq	b9e4 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x98>
    ba34:	e3a03001 	mov	r3, #1
    ba38:	e58d6000 	str	r6, [sp]
    ba3c:	e1a01004 	mov	r1, r4
    ba40:	e1a00005 	mov	r0, r5
    ba44:	e1a02003 	mov	r2, r3
    ba48:	ebffff7a 	bl	b838 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    ba4c:	e1500006 	cmp	r0, r6
    ba50:	0affffe3 	beq	b9e4 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x98>
    ba54:	e3a03000 	mov	r3, #0
    ba58:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    ba5c:	e3a00001 	mov	r0, #1
    ba60:	e28dd008 	add	sp, sp, #8
    ba64:	e8bd8070 	pop	{r4, r5, r6, pc}
    ba68:	e1a00004 	mov	r0, r4
    ba6c:	eb000cc3 	bl	ed80 <CUSBRequest::GetEndpoint() const>
    ba70:	eb000bac 	bl	e928 <CUSBEndpoint::GetType() const>
    ba74:	e3500001 	cmp	r0, #1
    ba78:	0a000008 	beq	baa0 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x154>
    ba7c:	e1a00004 	mov	r0, r4
    ba80:	eb000cbe 	bl	ed80 <CUSBRequest::GetEndpoint() const>
    ba84:	eb000ba7 	bl	e928 <CUSBEndpoint::GetType() const>
    ba88:	e3500002 	cmp	r0, #2
    ba8c:	0a000003 	beq	baa0 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x154>
    ba90:	e3a020d4 	mov	r2, #212	; 0xd4
    ba94:	e59f114c 	ldr	r1, [pc, #332]	; bbe8 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x29c>
    ba98:	e59f014c 	ldr	r0, [pc, #332]	; bbec <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x2a0>
    ba9c:	eb003bf5 	bl	1aa78 <assertion_failed>
    baa0:	e1a00004 	mov	r0, r4
    baa4:	eb000d02 	bl	eeb4 <CUSBRequest::GetBufLen() const>
    baa8:	e3500000 	cmp	r0, #0
    baac:	0a000039 	beq	bb98 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x24c>
    bab0:	e1a00004 	mov	r0, r4
    bab4:	eb000cb1 	bl	ed80 <CUSBRequest::GetEndpoint() const>
    bab8:	eb000b9c 	bl	e930 <CUSBEndpoint::IsDirectionIn() const>
    babc:	e58d6000 	str	r6, [sp]
    bac0:	e1a02000 	mov	r2, r0
    bac4:	e1a01004 	mov	r1, r4
    bac8:	e1a00005 	mov	r0, r5
    bacc:	e3a03000 	mov	r3, #0
    bad0:	ebffff58 	bl	b838 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    bad4:	e3500000 	cmp	r0, #0
    bad8:	0affffc1 	beq	b9e4 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x98>
    badc:	e3a03000 	mov	r3, #0
    bae0:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    bae4:	e3a00001 	mov	r0, #1
    bae8:	eaffffdc 	b	ba60 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x114>
    baec:	e3a020ac 	mov	r2, #172	; 0xac
    baf0:	e59f10f0 	ldr	r1, [pc, #240]	; bbe8 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x29c>
    baf4:	e59f00f4 	ldr	r0, [pc, #244]	; bbf0 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x2a4>
    baf8:	eb003bde 	bl	1aa78 <assertion_failed>
    bafc:	eaffffa5 	b	b998 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x4c>
    bb00:	e3a03001 	mov	r3, #1
    bb04:	e58d6000 	str	r6, [sp]
    bb08:	e1a01004 	mov	r1, r4
    bb0c:	e1a00005 	mov	r0, r5
    bb10:	e1a02003 	mov	r2, r3
    bb14:	ebffff47 	bl	b838 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    bb18:	e3500000 	cmp	r0, #0
    bb1c:	1affffcc 	bne	ba54 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x108>
    bb20:	eaffffaf 	b	b9e4 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x98>
    bb24:	eb000ce2 	bl	eeb4 <CUSBRequest::GetBufLen() const>
    bb28:	e3500000 	cmp	r0, #0
    bb2c:	0a000023 	beq	bbc0 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x274>
    bb30:	e3a06000 	mov	r6, #0
    bb34:	e1a01004 	mov	r1, r4
    bb38:	e58d6000 	str	r6, [sp]
    bb3c:	e1a03006 	mov	r3, r6
    bb40:	e1a02006 	mov	r2, r6
    bb44:	e1a00005 	mov	r0, r5
    bb48:	ebffff3a 	bl	b838 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    bb4c:	e1500006 	cmp	r0, r6
    bb50:	0affffa3 	beq	b9e4 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x98>
    bb54:	e58d6000 	str	r6, [sp]
    bb58:	e1a03006 	mov	r3, r6
    bb5c:	e3a02001 	mov	r2, #1
    bb60:	e1a01004 	mov	r1, r4
    bb64:	e1a00005 	mov	r0, r5
    bb68:	ebffff32 	bl	b838 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    bb6c:	e3500000 	cmp	r0, #0
    bb70:	0affff9b 	beq	b9e4 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x98>
    bb74:	e58d6000 	str	r6, [sp]
    bb78:	e1a02006 	mov	r2, r6
    bb7c:	e1a01004 	mov	r1, r4
    bb80:	e1a00005 	mov	r0, r5
    bb84:	e3a03001 	mov	r3, #1
    bb88:	ebffff2a 	bl	b838 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    bb8c:	e3500000 	cmp	r0, #0
    bb90:	0affff93 	beq	b9e4 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x98>
    bb94:	eaffffae 	b	ba54 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x108>
    bb98:	e3a020d5 	mov	r2, #213	; 0xd5
    bb9c:	e59f1044 	ldr	r1, [pc, #68]	; bbe8 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x29c>
    bba0:	e59f004c 	ldr	r0, [pc, #76]	; bbf4 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x2a8>
    bba4:	eb003bb3 	bl	1aa78 <assertion_failed>
    bba8:	eaffffc0 	b	bab0 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x164>
    bbac:	e3a020a6 	mov	r2, #166	; 0xa6
    bbb0:	e59f1030 	ldr	r1, [pc, #48]	; bbe8 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x29c>
    bbb4:	e59f003c 	ldr	r0, [pc, #60]	; bbf8 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x2ac>
    bbb8:	eb003bae 	bl	1aa78 <assertion_failed>
    bbbc:	eaffff6b 	b	b970 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x24>
    bbc0:	e3a020b3 	mov	r2, #179	; 0xb3
    bbc4:	e59f101c 	ldr	r1, [pc, #28]	; bbe8 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x29c>
    bbc8:	e59f0024 	ldr	r0, [pc, #36]	; bbf4 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x2a8>
    bbcc:	eb003ba9 	bl	1aa78 <assertion_failed>
    bbd0:	eaffffd6 	b	bb30 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x1e4>
    bbd4:	e3a020af 	mov	r2, #175	; 0xaf
    bbd8:	e59f1008 	ldr	r1, [pc, #8]	; bbe8 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x29c>
    bbdc:	e59f0018 	ldr	r0, [pc, #24]	; bbfc <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x2b0>
    bbe0:	eb003ba4 	bl	1aa78 <assertion_failed>
    bbe4:	eaffff6f 	b	b9a8 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x5c>
    bbe8:	00024754 	.word	0x00024754
    bbec:	00024878 	.word	0x00024878
    bbf0:	000249e0 	.word	0x000249e0
    bbf4:	000248ec 	.word	0x000248ec
    bbf8:	00024850 	.word	0x00024850
    bbfc:	00024a00 	.word	0x00024a00

0000bc00 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>:
    bc00:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bc04:	e2516000 	subs	r6, r1, #0
    bc08:	e1a08000 	mov	r8, r0
    bc0c:	e1a05002 	mov	r5, r2
    bc10:	e1a09003 	mov	r9, r3
    bc14:	e59d4028 	ldr	r4, [sp, #40]	; 0x28
    bc18:	0a00002b 	beq	bccc <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xcc>
    bc1c:	e3550000 	cmp	r5, #0
    bc20:	0a000024 	beq	bcb8 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xb8>
    bc24:	e3540000 	cmp	r4, #0
    bc28:	0a00001d 	beq	bca4 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xa4>
    bc2c:	e3a07001 	mov	r7, #1
    bc30:	e59fb0a8 	ldr	fp, [pc, #168]	; bce0 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xe0>
    bc34:	e029a007 	eor	sl, r9, r7
    bc38:	ea000003 	b	bc4c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x4c>
    bc3c:	e1a00007 	mov	r0, r7
    bc40:	eb00579b 	bl	21ab4 <CTimer::SimpleMsDelay(unsigned int)>
    bc44:	e2544001 	subs	r4, r4, #1
    bc48:	0a000011 	beq	bc94 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x94>
    bc4c:	e1a00006 	mov	r0, r6
    bc50:	eb000305 	bl	c86c <CDWHCIRegister::Read()>
    bc54:	e1150000 	tst	r5, r0
    bc58:	11a0300a 	movne	r3, sl
    bc5c:	01a03009 	moveq	r3, r9
    bc60:	e3530000 	cmp	r3, #0
    bc64:	0a00000c 	beq	bc9c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x9c>
    bc68:	e5983008 	ldr	r3, [r8, #8]
    bc6c:	e3530000 	cmp	r3, #0
    bc70:	1afffff1 	bne	bc3c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x3c>
    bc74:	e1a0200b 	mov	r2, fp
    bc78:	e59f1064 	ldr	r1, [pc, #100]	; bce4 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xe4>
    bc7c:	e59f0064 	ldr	r0, [pc, #100]	; bce8 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xe8>
    bc80:	eb003b7c 	bl	1aa78 <assertion_failed>
    bc84:	e1a00007 	mov	r0, r7
    bc88:	eb005789 	bl	21ab4 <CTimer::SimpleMsDelay(unsigned int)>
    bc8c:	e2544001 	subs	r4, r4, #1
    bc90:	1affffed 	bne	bc4c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x4c>
    bc94:	e1a00004 	mov	r0, r4
    bc98:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bc9c:	e3a00001 	mov	r0, #1
    bca0:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bca4:	e3a02e56 	mov	r2, #1376	; 0x560
    bca8:	e59f1034 	ldr	r1, [pc, #52]	; bce4 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xe4>
    bcac:	e59f0038 	ldr	r0, [pc, #56]	; bcec <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xec>
    bcb0:	eb003b70 	bl	1aa78 <assertion_failed>
    bcb4:	eaffffdc 	b	bc2c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x2c>
    bcb8:	e59f2030 	ldr	r2, [pc, #48]	; bcf0 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xf0>
    bcbc:	e59f1020 	ldr	r1, [pc, #32]	; bce4 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xe4>
    bcc0:	e59f002c 	ldr	r0, [pc, #44]	; bcf4 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xf4>
    bcc4:	eb003b6b 	bl	1aa78 <assertion_failed>
    bcc8:	eaffffd5 	b	bc24 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x24>
    bccc:	e59f2024 	ldr	r2, [pc, #36]	; bcf8 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xf8>
    bcd0:	e59f100c 	ldr	r1, [pc, #12]	; bce4 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xe4>
    bcd4:	e59f0020 	ldr	r0, [pc, #32]	; bcfc <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xfc>
    bcd8:	eb003b66 	bl	1aa78 <assertion_failed>
    bcdc:	eaffffce 	b	bc1c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x1c>
    bce0:	00000564 	.word	0x00000564
    bce4:	00024754 	.word	0x00024754
    bce8:	000247b4 	.word	0x000247b4
    bcec:	00024a28 	.word	0x00024a28
    bcf0:	0000055f 	.word	0x0000055f
    bcf4:	00024a1c 	.word	0x00024a1c
    bcf8:	0000055e 	.word	0x0000055e
    bcfc:	00024a0c 	.word	0x00024a0c

0000bd00 <CDWHCIDevice::EnableRootPort()>:
    bd00:	e92d4030 	push	{r4, r5, lr}
    bd04:	e24dd01c 	sub	sp, sp, #28
    bd08:	e1a05000 	mov	r5, r0
    bd0c:	e59f10a4 	ldr	r1, [pc, #164]	; bdb8 <CDWHCIDevice::EnableRootPort()+0xb8>
    bd10:	e28d000c 	add	r0, sp, #12
    bd14:	eb0002cb 	bl	c848 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    bd18:	e3a04014 	mov	r4, #20
    bd1c:	e3a03001 	mov	r3, #1
    bd20:	e1a00005 	mov	r0, r5
    bd24:	e28d100c 	add	r1, sp, #12
    bd28:	e58d4000 	str	r4, [sp]
    bd2c:	e1a02003 	mov	r2, r3
    bd30:	ebffffb2 	bl	bc00 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>
    bd34:	e2505000 	subs	r5, r0, #0
    bd38:	0a000019 	beq	bda4 <CDWHCIDevice::EnableRootPort()+0xa4>
    bd3c:	e3a00064 	mov	r0, #100	; 0x64
    bd40:	eb00575b 	bl	21ab4 <CTimer::SimpleMsDelay(unsigned int)>
    bd44:	e28d000c 	add	r0, sp, #12
    bd48:	eb0002c7 	bl	c86c <CDWHCIRegister::Read()>
    bd4c:	e3e0102e 	mvn	r1, #46	; 0x2e
    bd50:	e28d000c 	add	r0, sp, #12
    bd54:	eb0002fc 	bl	c94c <CDWHCIRegister::And(unsigned int)>
    bd58:	e3a01c01 	mov	r1, #256	; 0x100
    bd5c:	e28d000c 	add	r0, sp, #12
    bd60:	eb000309 	bl	c98c <CDWHCIRegister::Or(unsigned int)>
    bd64:	e28d000c 	add	r0, sp, #12
    bd68:	eb0002c6 	bl	c888 <CDWHCIRegister::Write()>
    bd6c:	e3a00032 	mov	r0, #50	; 0x32
    bd70:	eb00574f 	bl	21ab4 <CTimer::SimpleMsDelay(unsigned int)>
    bd74:	e28d000c 	add	r0, sp, #12
    bd78:	eb0002bb 	bl	c86c <CDWHCIRegister::Read()>
    bd7c:	e3e0102e 	mvn	r1, #46	; 0x2e
    bd80:	e28d000c 	add	r0, sp, #12
    bd84:	eb0002f0 	bl	c94c <CDWHCIRegister::And(unsigned int)>
    bd88:	e3e01c01 	mvn	r1, #256	; 0x100
    bd8c:	e28d000c 	add	r0, sp, #12
    bd90:	eb0002ed 	bl	c94c <CDWHCIRegister::And(unsigned int)>
    bd94:	e28d000c 	add	r0, sp, #12
    bd98:	eb0002ba 	bl	c888 <CDWHCIRegister::Write()>
    bd9c:	e1a00004 	mov	r0, r4
    bda0:	eb005743 	bl	21ab4 <CTimer::SimpleMsDelay(unsigned int)>
    bda4:	e28d000c 	add	r0, sp, #12
    bda8:	eb0002ae 	bl	c868 <CDWHCIRegister::~CDWHCIRegister()>
    bdac:	e1a00005 	mov	r0, r5
    bdb0:	e28dd01c 	add	sp, sp, #28
    bdb4:	e8bd8030 	pop	{r4, r5, pc}
    bdb8:	20980440 	.word	0x20980440

0000bdbc <CDWHCIDevice::Reset()>:
    bdbc:	e92d4030 	push	{r4, r5, lr}
    bdc0:	e1a04000 	mov	r4, r0
    bdc4:	e3a05064 	mov	r5, #100	; 0x64
    bdc8:	e24dd01c 	sub	sp, sp, #28
    bdcc:	e3a02000 	mov	r2, #0
    bdd0:	e59f1080 	ldr	r1, [pc, #128]	; be58 <CDWHCIDevice::Reset()+0x9c>
    bdd4:	e28d000c 	add	r0, sp, #12
    bdd8:	eb00029e 	bl	c858 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    bddc:	e28d100c 	add	r1, sp, #12
    bde0:	e1a00004 	mov	r0, r4
    bde4:	e58d5000 	str	r5, [sp]
    bde8:	e3a03001 	mov	r3, #1
    bdec:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
    bdf0:	ebffff82 	bl	bc00 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>
    bdf4:	e3500000 	cmp	r0, #0
    bdf8:	1a000005 	bne	be14 <CDWHCIDevice::Reset()+0x58>
    bdfc:	e3a04000 	mov	r4, #0
    be00:	e28d000c 	add	r0, sp, #12
    be04:	eb000297 	bl	c868 <CDWHCIRegister::~CDWHCIRegister()>
    be08:	e1a00004 	mov	r0, r4
    be0c:	e28dd01c 	add	sp, sp, #28
    be10:	e8bd8030 	pop	{r4, r5, pc}
    be14:	e3a01001 	mov	r1, #1
    be18:	e28d000c 	add	r0, sp, #12
    be1c:	eb0002da 	bl	c98c <CDWHCIRegister::Or(unsigned int)>
    be20:	e28d000c 	add	r0, sp, #12
    be24:	eb000297 	bl	c888 <CDWHCIRegister::Write()>
    be28:	e3a0300a 	mov	r3, #10
    be2c:	e1a00004 	mov	r0, r4
    be30:	e58d3000 	str	r3, [sp]
    be34:	e3a02001 	mov	r2, #1
    be38:	e3a03000 	mov	r3, #0
    be3c:	e28d100c 	add	r1, sp, #12
    be40:	ebffff6e 	bl	bc00 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>
    be44:	e2504000 	subs	r4, r0, #0
    be48:	0affffeb 	beq	bdfc <CDWHCIDevice::Reset()+0x40>
    be4c:	e1a00005 	mov	r0, r5
    be50:	eb005717 	bl	21ab4 <CTimer::SimpleMsDelay(unsigned int)>
    be54:	eaffffe9 	b	be00 <CDWHCIDevice::Reset()+0x44>
    be58:	20980010 	.word	0x20980010

0000be5c <CDWHCIDevice::InitCore()>:
    be5c:	e92d4030 	push	{r4, r5, lr}
    be60:	e1a04000 	mov	r4, r0
    be64:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    be68:	e59f1218 	ldr	r1, [pc, #536]	; c088 <CDWHCIDevice::InitCore()+0x22c>
    be6c:	e28d0004 	add	r0, sp, #4
    be70:	eb000274 	bl	c848 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    be74:	e28d0004 	add	r0, sp, #4
    be78:	eb00027b 	bl	c86c <CDWHCIRegister::Read()>
    be7c:	e28d0004 	add	r0, sp, #4
    be80:	e3e01601 	mvn	r1, #1048576	; 0x100000
    be84:	eb0002b0 	bl	c94c <CDWHCIRegister::And(unsigned int)>
    be88:	e3e01501 	mvn	r1, #4194304	; 0x400000
    be8c:	e28d0004 	add	r0, sp, #4
    be90:	eb0002ad 	bl	c94c <CDWHCIRegister::And(unsigned int)>
    be94:	e28d0004 	add	r0, sp, #4
    be98:	eb00027a 	bl	c888 <CDWHCIRegister::Write()>
    be9c:	e1a00004 	mov	r0, r4
    bea0:	ebffffc5 	bl	bdbc <CDWHCIDevice::Reset()>
    bea4:	e2505000 	subs	r5, r0, #0
    bea8:	0a000059 	beq	c014 <CDWHCIDevice::InitCore()+0x1b8>
    beac:	e28d0004 	add	r0, sp, #4
    beb0:	eb00026d 	bl	c86c <CDWHCIRegister::Read()>
    beb4:	e3e01010 	mvn	r1, #16
    beb8:	e28d0004 	add	r0, sp, #4
    bebc:	eb0002a2 	bl	c94c <CDWHCIRegister::And(unsigned int)>
    bec0:	e3e01008 	mvn	r1, #8
    bec4:	e28d0004 	add	r0, sp, #4
    bec8:	eb00029f 	bl	c94c <CDWHCIRegister::And(unsigned int)>
    becc:	e28d0004 	add	r0, sp, #4
    bed0:	eb00026c 	bl	c888 <CDWHCIRegister::Write()>
    bed4:	e59f11b0 	ldr	r1, [pc, #432]	; c08c <CDWHCIDevice::InitCore()+0x230>
    bed8:	e28d0010 	add	r0, sp, #16
    bedc:	eb000259 	bl	c848 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    bee0:	e28d0010 	add	r0, sp, #16
    bee4:	eb000260 	bl	c86c <CDWHCIRegister::Read()>
    bee8:	e28d0010 	add	r0, sp, #16
    beec:	eb000274 	bl	c8c4 <CDWHCIRegister::Get() const>
    bef0:	e1a001a0 	lsr	r0, r0, #3
    bef4:	e2000003 	and	r0, r0, #3
    bef8:	e3500002 	cmp	r0, #2
    befc:	0a000003 	beq	bf10 <CDWHCIDevice::InitCore()+0xb4>
    bf00:	e59f2188 	ldr	r2, [pc, #392]	; c090 <CDWHCIDevice::InitCore()+0x234>
    bf04:	e59f1188 	ldr	r1, [pc, #392]	; c094 <CDWHCIDevice::InitCore()+0x238>
    bf08:	e59f0188 	ldr	r0, [pc, #392]	; c098 <CDWHCIDevice::InitCore()+0x23c>
    bf0c:	eb003ad9 	bl	1aa78 <assertion_failed>
    bf10:	e28d0004 	add	r0, sp, #4
    bf14:	eb000254 	bl	c86c <CDWHCIRegister::Read()>
    bf18:	e28d0010 	add	r0, sp, #16
    bf1c:	eb000268 	bl	c8c4 <CDWHCIRegister::Get() const>
    bf20:	e1a00320 	lsr	r0, r0, #6
    bf24:	e2000003 	and	r0, r0, #3
    bf28:	e3500002 	cmp	r0, #2
    bf2c:	0a000048 	beq	c054 <CDWHCIDevice::InitCore()+0x1f8>
    bf30:	e3e01802 	mvn	r1, #131072	; 0x20000
    bf34:	e28d0004 	add	r0, sp, #4
    bf38:	eb000283 	bl	c94c <CDWHCIRegister::And(unsigned int)>
    bf3c:	e3e01702 	mvn	r1, #524288	; 0x80000
    bf40:	e28d0004 	add	r0, sp, #4
    bf44:	eb000280 	bl	c94c <CDWHCIRegister::And(unsigned int)>
    bf48:	e28d0004 	add	r0, sp, #4
    bf4c:	eb00024d 	bl	c888 <CDWHCIRegister::Write()>
    bf50:	e594300c 	ldr	r3, [r4, #12]
    bf54:	e3530000 	cmp	r3, #0
    bf58:	1a000038 	bne	c040 <CDWHCIDevice::InitCore()+0x1e4>
    bf5c:	e28d0010 	add	r0, sp, #16
    bf60:	eb000257 	bl	c8c4 <CDWHCIRegister::Get() const>
    bf64:	e1a00720 	lsr	r0, r0, #14
    bf68:	e200000f 	and	r0, r0, #15
    bf6c:	e2403003 	sub	r3, r0, #3
    bf70:	e353000c 	cmp	r3, #12
    bf74:	e2800001 	add	r0, r0, #1
    bf78:	e584000c 	str	r0, [r4, #12]
    bf7c:	8a00002a 	bhi	c02c <CDWHCIDevice::InitCore()+0x1d0>
    bf80:	e59f1114 	ldr	r1, [pc, #276]	; c09c <CDWHCIDevice::InitCore()+0x240>
    bf84:	e28d001c 	add	r0, sp, #28
    bf88:	eb00022e 	bl	c848 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    bf8c:	e28d001c 	add	r0, sp, #28
    bf90:	eb000235 	bl	c86c <CDWHCIRegister::Read()>
    bf94:	e28d001c 	add	r0, sp, #28
    bf98:	e3a01020 	mov	r1, #32
    bf9c:	eb00027a 	bl	c98c <CDWHCIRegister::Or(unsigned int)>
    bfa0:	e28d001c 	add	r0, sp, #28
    bfa4:	e3a01010 	mov	r1, #16
    bfa8:	eb000277 	bl	c98c <CDWHCIRegister::Or(unsigned int)>
    bfac:	e3e01006 	mvn	r1, #6
    bfb0:	e28d001c 	add	r0, sp, #28
    bfb4:	eb000264 	bl	c94c <CDWHCIRegister::And(unsigned int)>
    bfb8:	e28d001c 	add	r0, sp, #28
    bfbc:	eb000231 	bl	c888 <CDWHCIRegister::Write()>
    bfc0:	e28d0004 	add	r0, sp, #4
    bfc4:	eb000228 	bl	c86c <CDWHCIRegister::Read()>
    bfc8:	e3e01c02 	mvn	r1, #512	; 0x200
    bfcc:	e28d0004 	add	r0, sp, #4
    bfd0:	eb00025d 	bl	c94c <CDWHCIRegister::And(unsigned int)>
    bfd4:	e3e01c01 	mvn	r1, #256	; 0x100
    bfd8:	e28d0004 	add	r0, sp, #4
    bfdc:	eb00025a 	bl	c94c <CDWHCIRegister::And(unsigned int)>
    bfe0:	e28d0004 	add	r0, sp, #4
    bfe4:	eb000227 	bl	c888 <CDWHCIRegister::Write()>
    bfe8:	e1a00004 	mov	r0, r4
    bfec:	ebfff956 	bl	a54c <CDWHCIDevice::EnableCommonInterrupts()>
    bff0:	e28d001c 	add	r0, sp, #28
    bff4:	eb00021b 	bl	c868 <CDWHCIRegister::~CDWHCIRegister()>
    bff8:	e28d0010 	add	r0, sp, #16
    bffc:	eb000219 	bl	c868 <CDWHCIRegister::~CDWHCIRegister()>
    c000:	e28d0004 	add	r0, sp, #4
    c004:	eb000217 	bl	c868 <CDWHCIRegister::~CDWHCIRegister()>
    c008:	e1a00005 	mov	r0, r5
    c00c:	e28dd02c 	add	sp, sp, #44	; 0x2c
    c010:	e8bd8030 	pop	{r4, r5, pc}
    c014:	eb00448a 	bl	1d244 <CLogger::Get()>
    c018:	e59f3080 	ldr	r3, [pc, #128]	; c0a0 <CDWHCIDevice::InitCore()+0x244>
    c01c:	e3a02001 	mov	r2, #1
    c020:	e59f107c 	ldr	r1, [pc, #124]	; c0a4 <CDWHCIDevice::InitCore()+0x248>
    c024:	eb00462f 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c028:	eafffff4 	b	c000 <CDWHCIDevice::InitCore()+0x1a4>
    c02c:	e59f2074 	ldr	r2, [pc, #116]	; c0a8 <CDWHCIDevice::InitCore()+0x24c>
    c030:	e59f105c 	ldr	r1, [pc, #92]	; c094 <CDWHCIDevice::InitCore()+0x238>
    c034:	e59f0070 	ldr	r0, [pc, #112]	; c0ac <CDWHCIDevice::InitCore()+0x250>
    c038:	eb003a8e 	bl	1aa78 <assertion_failed>
    c03c:	eaffffcf 	b	bf80 <CDWHCIDevice::InitCore()+0x124>
    c040:	e59f2068 	ldr	r2, [pc, #104]	; c0b0 <CDWHCIDevice::InitCore()+0x254>
    c044:	e59f1048 	ldr	r1, [pc, #72]	; c094 <CDWHCIDevice::InitCore()+0x238>
    c048:	e59f0064 	ldr	r0, [pc, #100]	; c0b4 <CDWHCIDevice::InitCore()+0x258>
    c04c:	eb003a89 	bl	1aa78 <assertion_failed>
    c050:	eaffffc1 	b	bf5c <CDWHCIDevice::InitCore()+0x100>
    c054:	e28d0010 	add	r0, sp, #16
    c058:	eb000219 	bl	c8c4 <CDWHCIRegister::Get() const>
    c05c:	e1a00420 	lsr	r0, r0, #8
    c060:	e2000003 	and	r0, r0, #3
    c064:	e3500001 	cmp	r0, #1
    c068:	1affffb0 	bne	bf30 <CDWHCIDevice::InitCore()+0xd4>
    c06c:	e28d0004 	add	r0, sp, #4
    c070:	e3a01802 	mov	r1, #131072	; 0x20000
    c074:	eb000244 	bl	c98c <CDWHCIRegister::Or(unsigned int)>
    c078:	e3a01702 	mov	r1, #524288	; 0x80000
    c07c:	e28d0004 	add	r0, sp, #4
    c080:	eb000241 	bl	c98c <CDWHCIRegister::Or(unsigned int)>
    c084:	eaffffaf 	b	bf48 <CDWHCIDevice::InitCore()+0xec>
    c088:	2098000c 	.word	0x2098000c
    c08c:	20980048 	.word	0x20980048
    c090:	0000013b 	.word	0x0000013b
    c094:	00024754 	.word	0x00024754
    c098:	00024a48 	.word	0x00024a48
    c09c:	20980008 	.word	0x20980008
    c0a0:	00024a38 	.word	0x00024a38
    c0a4:	00024748 	.word	0x00024748
    c0a8:	0000014d 	.word	0x0000014d
    c0ac:	00024a94 	.word	0x00024a94
    c0b0:	0000014b 	.word	0x0000014b
    c0b4:	00024a80 	.word	0x00024a80

0000c0b8 <CDWHCIDevice::FlushTxFIFO(unsigned int)>:
    c0b8:	e92d4030 	push	{r4, r5, lr}
    c0bc:	e1a05001 	mov	r5, r1
    c0c0:	e24dd01c 	sub	sp, sp, #28
    c0c4:	e3a02000 	mov	r2, #0
    c0c8:	e1a04000 	mov	r4, r0
    c0cc:	e59f107c 	ldr	r1, [pc, #124]	; c150 <CDWHCIDevice::FlushTxFIFO(unsigned int)+0x98>
    c0d0:	e28d000c 	add	r0, sp, #12
    c0d4:	eb0001df 	bl	c858 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    c0d8:	e28d000c 	add	r0, sp, #12
    c0dc:	e3a01020 	mov	r1, #32
    c0e0:	eb000229 	bl	c98c <CDWHCIRegister::Or(unsigned int)>
    c0e4:	e28d000c 	add	r0, sp, #12
    c0e8:	e3e01d1f 	mvn	r1, #1984	; 0x7c0
    c0ec:	eb000216 	bl	c94c <CDWHCIRegister::And(unsigned int)>
    c0f0:	e1a01305 	lsl	r1, r5, #6
    c0f4:	e28d000c 	add	r0, sp, #12
    c0f8:	eb000223 	bl	c98c <CDWHCIRegister::Or(unsigned int)>
    c0fc:	e28d000c 	add	r0, sp, #12
    c100:	eb0001e0 	bl	c888 <CDWHCIRegister::Write()>
    c104:	e3a0300a 	mov	r3, #10
    c108:	e1a00004 	mov	r0, r4
    c10c:	e58d3000 	str	r3, [sp]
    c110:	e28d100c 	add	r1, sp, #12
    c114:	e3a03000 	mov	r3, #0
    c118:	e3a02020 	mov	r2, #32
    c11c:	ebfffeb7 	bl	bc00 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>
    c120:	e3500000 	cmp	r0, #0
    c124:	1a000003 	bne	c138 <CDWHCIDevice::FlushTxFIFO(unsigned int)+0x80>
    c128:	e28d000c 	add	r0, sp, #12
    c12c:	eb0001cd 	bl	c868 <CDWHCIRegister::~CDWHCIRegister()>
    c130:	e28dd01c 	add	sp, sp, #28
    c134:	e8bd8030 	pop	{r4, r5, pc}
    c138:	e3a00001 	mov	r0, #1
    c13c:	eb005663 	bl	21ad0 <CTimer::SimpleusDelay(unsigned int)>
    c140:	e28d000c 	add	r0, sp, #12
    c144:	eb0001c7 	bl	c868 <CDWHCIRegister::~CDWHCIRegister()>
    c148:	e28dd01c 	add	sp, sp, #28
    c14c:	e8bd8030 	pop	{r4, r5, pc}
    c150:	20980010 	.word	0x20980010

0000c154 <CDWHCIDevice::FlushRxFIFO()>:
    c154:	e92d4010 	push	{r4, lr}
    c158:	e24dd018 	sub	sp, sp, #24
    c15c:	e3a02000 	mov	r2, #0
    c160:	e1a04000 	mov	r4, r0
    c164:	e59f1064 	ldr	r1, [pc, #100]	; c1d0 <CDWHCIDevice::FlushRxFIFO()+0x7c>
    c168:	e28d000c 	add	r0, sp, #12
    c16c:	eb0001b9 	bl	c858 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    c170:	e3a01010 	mov	r1, #16
    c174:	e28d000c 	add	r0, sp, #12
    c178:	eb000203 	bl	c98c <CDWHCIRegister::Or(unsigned int)>
    c17c:	e28d000c 	add	r0, sp, #12
    c180:	eb0001c0 	bl	c888 <CDWHCIRegister::Write()>
    c184:	e3a0300a 	mov	r3, #10
    c188:	e1a00004 	mov	r0, r4
    c18c:	e58d3000 	str	r3, [sp]
    c190:	e28d100c 	add	r1, sp, #12
    c194:	e3a03000 	mov	r3, #0
    c198:	e3a02010 	mov	r2, #16
    c19c:	ebfffe97 	bl	bc00 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>
    c1a0:	e3500000 	cmp	r0, #0
    c1a4:	1a000003 	bne	c1b8 <CDWHCIDevice::FlushRxFIFO()+0x64>
    c1a8:	e28d000c 	add	r0, sp, #12
    c1ac:	eb0001ad 	bl	c868 <CDWHCIRegister::~CDWHCIRegister()>
    c1b0:	e28dd018 	add	sp, sp, #24
    c1b4:	e8bd8010 	pop	{r4, pc}
    c1b8:	e3a00001 	mov	r0, #1
    c1bc:	eb005643 	bl	21ad0 <CTimer::SimpleusDelay(unsigned int)>
    c1c0:	e28d000c 	add	r0, sp, #12
    c1c4:	eb0001a7 	bl	c868 <CDWHCIRegister::~CDWHCIRegister()>
    c1c8:	e28dd018 	add	sp, sp, #24
    c1cc:	e8bd8010 	pop	{r4, pc}
    c1d0:	20980010 	.word	0x20980010

0000c1d4 <CDWHCIDevice::InitHost()>:
    c1d4:	e92d4010 	push	{r4, lr}
    c1d8:	e24dd068 	sub	sp, sp, #104	; 0x68
    c1dc:	e3a02000 	mov	r2, #0
    c1e0:	e59f11cc 	ldr	r1, [pc, #460]	; c3b4 <CDWHCIDevice::InitHost()+0x1e0>
    c1e4:	e1a04000 	mov	r4, r0
    c1e8:	e28d0008 	add	r0, sp, #8
    c1ec:	eb000199 	bl	c858 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    c1f0:	e28d0008 	add	r0, sp, #8
    c1f4:	eb0001a3 	bl	c888 <CDWHCIRegister::Write()>
    c1f8:	e59f11b8 	ldr	r1, [pc, #440]	; c3b8 <CDWHCIDevice::InitHost()+0x1e4>
    c1fc:	e28d0014 	add	r0, sp, #20
    c200:	eb000190 	bl	c848 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    c204:	e28d0014 	add	r0, sp, #20
    c208:	eb000197 	bl	c86c <CDWHCIRegister::Read()>
    c20c:	e28d0014 	add	r0, sp, #20
    c210:	e3e01003 	mvn	r1, #3
    c214:	eb0001cc 	bl	c94c <CDWHCIRegister::And(unsigned int)>
    c218:	e59f119c 	ldr	r1, [pc, #412]	; c3bc <CDWHCIDevice::InitHost()+0x1e8>
    c21c:	e28d0020 	add	r0, sp, #32
    c220:	eb000188 	bl	c848 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    c224:	e59f1194 	ldr	r1, [pc, #404]	; c3c0 <CDWHCIDevice::InitHost()+0x1ec>
    c228:	e28d002c 	add	r0, sp, #44	; 0x2c
    c22c:	eb000185 	bl	c848 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    c230:	e28d0020 	add	r0, sp, #32
    c234:	eb00018c 	bl	c86c <CDWHCIRegister::Read()>
    c238:	e1a00320 	lsr	r0, r0, #6
    c23c:	e2000003 	and	r0, r0, #3
    c240:	e3500002 	cmp	r0, #2
    c244:	0a00004d 	beq	c380 <CDWHCIDevice::InitHost()+0x1ac>
    c248:	e3a01000 	mov	r1, #0
    c24c:	e28d0014 	add	r0, sp, #20
    c250:	eb0001cd 	bl	c98c <CDWHCIRegister::Or(unsigned int)>
    c254:	e28d0014 	add	r0, sp, #20
    c258:	eb00018a 	bl	c888 <CDWHCIRegister::Write()>
    c25c:	e3a02b01 	mov	r2, #1024	; 0x400
    c260:	e59f115c 	ldr	r1, [pc, #348]	; c3c4 <CDWHCIDevice::InitHost()+0x1f0>
    c264:	e28d0038 	add	r0, sp, #56	; 0x38
    c268:	eb00017a 	bl	c858 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    c26c:	e28d0038 	add	r0, sp, #56	; 0x38
    c270:	eb000184 	bl	c888 <CDWHCIRegister::Write()>
    c274:	e3a02000 	mov	r2, #0
    c278:	e59f1148 	ldr	r1, [pc, #328]	; c3c8 <CDWHCIDevice::InitHost()+0x1f4>
    c27c:	e28d0044 	add	r0, sp, #68	; 0x44
    c280:	eb000174 	bl	c858 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    c284:	e28d0044 	add	r0, sp, #68	; 0x44
    c288:	e3a01b01 	mov	r1, #1024	; 0x400
    c28c:	eb0001be 	bl	c98c <CDWHCIRegister::Or(unsigned int)>
    c290:	e3a01301 	mov	r1, #67108864	; 0x4000000
    c294:	e28d0044 	add	r0, sp, #68	; 0x44
    c298:	eb0001bb 	bl	c98c <CDWHCIRegister::Or(unsigned int)>
    c29c:	e28d0044 	add	r0, sp, #68	; 0x44
    c2a0:	eb000178 	bl	c888 <CDWHCIRegister::Write()>
    c2a4:	e3a02000 	mov	r2, #0
    c2a8:	e59f111c 	ldr	r1, [pc, #284]	; c3cc <CDWHCIDevice::InitHost()+0x1f8>
    c2ac:	e28d0050 	add	r0, sp, #80	; 0x50
    c2b0:	eb000168 	bl	c858 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    c2b4:	e28d0050 	add	r0, sp, #80	; 0x50
    c2b8:	e3a01b02 	mov	r1, #2048	; 0x800
    c2bc:	eb0001b2 	bl	c98c <CDWHCIRegister::Or(unsigned int)>
    c2c0:	e3a01301 	mov	r1, #67108864	; 0x4000000
    c2c4:	e28d0050 	add	r0, sp, #80	; 0x50
    c2c8:	eb0001af 	bl	c98c <CDWHCIRegister::Or(unsigned int)>
    c2cc:	e28d0050 	add	r0, sp, #80	; 0x50
    c2d0:	eb00016c 	bl	c888 <CDWHCIRegister::Write()>
    c2d4:	e3a01010 	mov	r1, #16
    c2d8:	e1a00004 	mov	r0, r4
    c2dc:	ebffff75 	bl	c0b8 <CDWHCIDevice::FlushTxFIFO(unsigned int)>
    c2e0:	e1a00004 	mov	r0, r4
    c2e4:	ebffff9a 	bl	c154 <CDWHCIDevice::FlushRxFIFO()>
    c2e8:	e59f10e0 	ldr	r1, [pc, #224]	; c3d0 <CDWHCIDevice::InitHost()+0x1fc>
    c2ec:	e28d005c 	add	r0, sp, #92	; 0x5c
    c2f0:	eb000154 	bl	c848 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    c2f4:	e28d005c 	add	r0, sp, #92	; 0x5c
    c2f8:	eb00015b 	bl	c86c <CDWHCIRegister::Read()>
    c2fc:	e28d005c 	add	r0, sp, #92	; 0x5c
    c300:	e3e0102e 	mvn	r1, #46	; 0x2e
    c304:	eb000190 	bl	c94c <CDWHCIRegister::And(unsigned int)>
    c308:	e28d005c 	add	r0, sp, #92	; 0x5c
    c30c:	eb00016c 	bl	c8c4 <CDWHCIRegister::Get() const>
    c310:	e3100a01 	tst	r0, #4096	; 0x1000
    c314:	1a000004 	bne	c32c <CDWHCIDevice::InitHost()+0x158>
    c318:	e28d005c 	add	r0, sp, #92	; 0x5c
    c31c:	e3a01a01 	mov	r1, #4096	; 0x1000
    c320:	eb000199 	bl	c98c <CDWHCIRegister::Or(unsigned int)>
    c324:	e28d005c 	add	r0, sp, #92	; 0x5c
    c328:	eb000156 	bl	c888 <CDWHCIRegister::Write()>
    c32c:	e1a00004 	mov	r0, r4
    c330:	ebfff893 	bl	a584 <CDWHCIDevice::EnableHostInterrupts()>
    c334:	e28d005c 	add	r0, sp, #92	; 0x5c
    c338:	eb00014a 	bl	c868 <CDWHCIRegister::~CDWHCIRegister()>
    c33c:	e28d0050 	add	r0, sp, #80	; 0x50
    c340:	eb000148 	bl	c868 <CDWHCIRegister::~CDWHCIRegister()>
    c344:	e28d0044 	add	r0, sp, #68	; 0x44
    c348:	eb000146 	bl	c868 <CDWHCIRegister::~CDWHCIRegister()>
    c34c:	e28d0038 	add	r0, sp, #56	; 0x38
    c350:	eb000144 	bl	c868 <CDWHCIRegister::~CDWHCIRegister()>
    c354:	e28d002c 	add	r0, sp, #44	; 0x2c
    c358:	eb000142 	bl	c868 <CDWHCIRegister::~CDWHCIRegister()>
    c35c:	e28d0020 	add	r0, sp, #32
    c360:	eb000140 	bl	c868 <CDWHCIRegister::~CDWHCIRegister()>
    c364:	e28d0014 	add	r0, sp, #20
    c368:	eb00013e 	bl	c868 <CDWHCIRegister::~CDWHCIRegister()>
    c36c:	e28d0008 	add	r0, sp, #8
    c370:	eb00013c 	bl	c868 <CDWHCIRegister::~CDWHCIRegister()>
    c374:	e3a00001 	mov	r0, #1
    c378:	e28dd068 	add	sp, sp, #104	; 0x68
    c37c:	e8bd8010 	pop	{r4, pc}
    c380:	e28d0020 	add	r0, sp, #32
    c384:	eb00014e 	bl	c8c4 <CDWHCIRegister::Get() const>
    c388:	e1a01420 	lsr	r1, r0, #8
    c38c:	e2011003 	and	r1, r1, #3
    c390:	e3510001 	cmp	r1, #1
    c394:	1affffab 	bne	c248 <CDWHCIDevice::InitHost()+0x74>
    c398:	e28d002c 	add	r0, sp, #44	; 0x2c
    c39c:	e58d1004 	str	r1, [sp, #4]
    c3a0:	eb000131 	bl	c86c <CDWHCIRegister::Read()>
    c3a4:	e3100802 	tst	r0, #131072	; 0x20000
    c3a8:	e59d1004 	ldr	r1, [sp, #4]
    c3ac:	1affffa6 	bne	c24c <CDWHCIDevice::InitHost()+0x78>
    c3b0:	eaffffa4 	b	c248 <CDWHCIDevice::InitHost()+0x74>
    c3b4:	20980e00 	.word	0x20980e00
    c3b8:	20980400 	.word	0x20980400
    c3bc:	20980048 	.word	0x20980048
    c3c0:	2098000c 	.word	0x2098000c
    c3c4:	20980024 	.word	0x20980024
    c3c8:	20980028 	.word	0x20980028
    c3cc:	20980100 	.word	0x20980100
    c3d0:	20980440 	.word	0x20980440

0000c3d4 <CDWHCIDevice::Initialize()>:
    c3d4:	e92d4070 	push	{r4, r5, r6, lr}
    c3d8:	e3a01001 	mov	r1, #1
    c3dc:	e24dd020 	sub	sp, sp, #32
    c3e0:	e1a04000 	mov	r4, r0
    c3e4:	e3a00020 	mov	r0, #32
    c3e8:	eb000b1f 	bl	f06c <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)>
    c3ec:	e3a01001 	mov	r1, #1
    c3f0:	e3a00010 	mov	r0, #16
    c3f4:	eb0004ab 	bl	d6a8 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)>
    c3f8:	e3a01001 	mov	r1, #1
    c3fc:	e3a00010 	mov	r0, #16
    c400:	eb00130e 	bl	11040 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)>
    c404:	e3a01001 	mov	r1, #1
    c408:	e3a00010 	mov	r0, #16
    c40c:	eb00142f 	bl	114d0 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)>
    c410:	e3a01001 	mov	r1, #1
    c414:	e3a00010 	mov	r0, #16
    c418:	eb002419 	bl	15484 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)>
    c41c:	e3a03000 	mov	r3, #0
    c420:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    c424:	e5943004 	ldr	r3, [r4, #4]
    c428:	e3530000 	cmp	r3, #0
    c42c:	0a00004d 	beq	c568 <CDWHCIDevice::Initialize()+0x194>
    c430:	e5943008 	ldr	r3, [r4, #8]
    c434:	e3530000 	cmp	r3, #0
    c438:	0a00004f 	beq	c57c <CDWHCIDevice::Initialize()+0x1a8>
    c43c:	e59f11c4 	ldr	r1, [pc, #452]	; c608 <CDWHCIDevice::Initialize()+0x234>
    c440:	e28d0008 	add	r0, sp, #8
    c444:	eb0000ff 	bl	c848 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    c448:	e28d0008 	add	r0, sp, #8
    c44c:	eb000106 	bl	c86c <CDWHCIRegister::Read()>
    c450:	e59f31b4 	ldr	r3, [pc, #436]	; c60c <CDWHCIDevice::Initialize()+0x238>
    c454:	e1500003 	cmp	r0, r3
    c458:	0a00000f 	beq	c49c <CDWHCIDevice::Initialize()+0xc8>
    c45c:	eb004378 	bl	1d244 <CLogger::Get()>
    c460:	e1a04000 	mov	r4, r0
    c464:	e28d0008 	add	r0, sp, #8
    c468:	eb000115 	bl	c8c4 <CDWHCIRegister::Get() const>
    c46c:	e59f319c 	ldr	r3, [pc, #412]	; c610 <CDWHCIDevice::Initialize()+0x23c>
    c470:	e58d0000 	str	r0, [sp]
    c474:	e3a02001 	mov	r2, #1
    c478:	e1a00004 	mov	r0, r4
    c47c:	e59f1190 	ldr	r1, [pc, #400]	; c614 <CDWHCIDevice::Initialize()+0x240>
    c480:	eb004518 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c484:	e3a05000 	mov	r5, #0
    c488:	e28d0008 	add	r0, sp, #8
    c48c:	eb0000f5 	bl	c868 <CDWHCIRegister::~CDWHCIRegister()>
    c490:	e1a00005 	mov	r0, r5
    c494:	e28dd020 	add	sp, sp, #32
    c498:	e8bd8070 	pop	{r4, r5, r6, pc}
    c49c:	e1a00004 	mov	r0, r4
    c4a0:	ebfff7fe 	bl	a4a0 <CDWHCIDevice::PowerOn()>
    c4a4:	e2505000 	subs	r5, r0, #0
    c4a8:	0a000028 	beq	c550 <CDWHCIDevice::Initialize()+0x17c>
    c4ac:	e59f1164 	ldr	r1, [pc, #356]	; c618 <CDWHCIDevice::Initialize()+0x244>
    c4b0:	e28d0014 	add	r0, sp, #20
    c4b4:	eb0000e3 	bl	c848 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    c4b8:	e28d0014 	add	r0, sp, #20
    c4bc:	eb0000ea 	bl	c86c <CDWHCIRegister::Read()>
    c4c0:	e28d0014 	add	r0, sp, #20
    c4c4:	e3e01001 	mvn	r1, #1
    c4c8:	eb00011f 	bl	c94c <CDWHCIRegister::And(unsigned int)>
    c4cc:	e28d0014 	add	r0, sp, #20
    c4d0:	eb0000ec 	bl	c888 <CDWHCIRegister::Write()>
    c4d4:	e5940004 	ldr	r0, [r4, #4]
    c4d8:	e3500000 	cmp	r0, #0
    c4dc:	0a00003c 	beq	c5d4 <CDWHCIDevice::Initialize()+0x200>
    c4e0:	e1a03004 	mov	r3, r4
    c4e4:	e59f2130 	ldr	r2, [pc, #304]	; c61c <CDWHCIDevice::Initialize()+0x248>
    c4e8:	e3a01009 	mov	r1, #9
    c4ec:	eb0040bb 	bl	1c7e0 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    c4f0:	e1a00004 	mov	r0, r4
    c4f4:	ebfffe58 	bl	be5c <CDWHCIDevice::InitCore()>
    c4f8:	e2505000 	subs	r5, r0, #0
    c4fc:	0a00000d 	beq	c538 <CDWHCIDevice::Initialize()+0x164>
    c500:	e1a00004 	mov	r0, r4
    c504:	ebfff7ff 	bl	a508 <CDWHCIDevice::EnableGlobalInterrupts()>
    c508:	e1a00004 	mov	r0, r4
    c50c:	ebffff30 	bl	c1d4 <CDWHCIDevice::InitHost()>
    c510:	e2505000 	subs	r5, r0, #0
    c514:	1a00001d 	bne	c590 <CDWHCIDevice::Initialize()+0x1bc>
    c518:	eb004349 	bl	1d244 <CLogger::Get()>
    c51c:	e59f30fc 	ldr	r3, [pc, #252]	; c620 <CDWHCIDevice::Initialize()+0x24c>
    c520:	e3a02001 	mov	r2, #1
    c524:	e59f10e8 	ldr	r1, [pc, #232]	; c614 <CDWHCIDevice::Initialize()+0x240>
    c528:	eb0044ee 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c52c:	e28d0014 	add	r0, sp, #20
    c530:	eb0000cc 	bl	c868 <CDWHCIRegister::~CDWHCIRegister()>
    c534:	eaffffd3 	b	c488 <CDWHCIDevice::Initialize()+0xb4>
    c538:	eb004341 	bl	1d244 <CLogger::Get()>
    c53c:	e59f30e0 	ldr	r3, [pc, #224]	; c624 <CDWHCIDevice::Initialize()+0x250>
    c540:	e3a02001 	mov	r2, #1
    c544:	e59f10c8 	ldr	r1, [pc, #200]	; c614 <CDWHCIDevice::Initialize()+0x240>
    c548:	eb0044e6 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c54c:	eafffff6 	b	c52c <CDWHCIDevice::Initialize()+0x158>
    c550:	eb00433b 	bl	1d244 <CLogger::Get()>
    c554:	e59f30cc 	ldr	r3, [pc, #204]	; c628 <CDWHCIDevice::Initialize()+0x254>
    c558:	e3a02001 	mov	r2, #1
    c55c:	e59f10b0 	ldr	r1, [pc, #176]	; c614 <CDWHCIDevice::Initialize()+0x240>
    c560:	eb0044e0 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c564:	eaffffc7 	b	c488 <CDWHCIDevice::Initialize()+0xb4>
    c568:	e3a02067 	mov	r2, #103	; 0x67
    c56c:	e59f10b8 	ldr	r1, [pc, #184]	; c62c <CDWHCIDevice::Initialize()+0x258>
    c570:	e59f00b8 	ldr	r0, [pc, #184]	; c630 <CDWHCIDevice::Initialize()+0x25c>
    c574:	eb00393f 	bl	1aa78 <assertion_failed>
    c578:	eaffffac 	b	c430 <CDWHCIDevice::Initialize()+0x5c>
    c57c:	e3a02068 	mov	r2, #104	; 0x68
    c580:	e59f10a4 	ldr	r1, [pc, #164]	; c62c <CDWHCIDevice::Initialize()+0x258>
    c584:	e59f00a8 	ldr	r0, [pc, #168]	; c634 <CDWHCIDevice::Initialize()+0x260>
    c588:	eb00393a 	bl	1aa78 <assertion_failed>
    c58c:	eaffffaa 	b	c43c <CDWHCIDevice::Initialize()+0x68>
    c590:	e1a00004 	mov	r0, r4
    c594:	ebfffdd9 	bl	bd00 <CDWHCIDevice::EnableRootPort()>
    c598:	e2506000 	subs	r6, r0, #0
    c59c:	0a000006 	beq	c5bc <CDWHCIDevice::Initialize()+0x1e8>
    c5a0:	e2840074 	add	r0, r4, #116	; 0x74
    c5a4:	eb001508 	bl	119cc <CDWHCIRootPort::Initialize()>
    c5a8:	e2505000 	subs	r5, r0, #0
    c5ac:	0a00000e 	beq	c5ec <CDWHCIDevice::Initialize()+0x218>
    c5b0:	e3a03000 	mov	r3, #0
    c5b4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    c5b8:	eaffffdb 	b	c52c <CDWHCIDevice::Initialize()+0x158>
    c5bc:	eb004320 	bl	1d244 <CLogger::Get()>
    c5c0:	e59f3070 	ldr	r3, [pc, #112]	; c638 <CDWHCIDevice::Initialize()+0x264>
    c5c4:	e3a02002 	mov	r2, #2
    c5c8:	e59f1044 	ldr	r1, [pc, #68]	; c614 <CDWHCIDevice::Initialize()+0x240>
    c5cc:	eb0044c5 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c5d0:	eaffffd5 	b	c52c <CDWHCIDevice::Initialize()+0x158>
    c5d4:	e59f0054 	ldr	r0, [pc, #84]	; c630 <CDWHCIDevice::Initialize()+0x25c>
    c5d8:	e3a0207d 	mov	r2, #125	; 0x7d
    c5dc:	e59f1048 	ldr	r1, [pc, #72]	; c62c <CDWHCIDevice::Initialize()+0x258>
    c5e0:	eb003924 	bl	1aa78 <assertion_failed>
    c5e4:	e5940004 	ldr	r0, [r4, #4]
    c5e8:	eaffffbc 	b	c4e0 <CDWHCIDevice::Initialize()+0x10c>
    c5ec:	eb004314 	bl	1d244 <CLogger::Get()>
    c5f0:	e59f3044 	ldr	r3, [pc, #68]	; c63c <CDWHCIDevice::Initialize()+0x268>
    c5f4:	e3a02002 	mov	r2, #2
    c5f8:	e59f1014 	ldr	r1, [pc, #20]	; c614 <CDWHCIDevice::Initialize()+0x240>
    c5fc:	e1a05006 	mov	r5, r6
    c600:	eb0044b8 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c604:	eaffffc8 	b	c52c <CDWHCIDevice::Initialize()+0x158>
    c608:	20980040 	.word	0x20980040
    c60c:	4f54280a 	.word	0x4f54280a
    c610:	00024acc 	.word	0x00024acc
    c614:	00024748 	.word	0x00024748
    c618:	20980008 	.word	0x20980008
    c61c:	0000b6ec 	.word	0x0000b6ec
    c620:	00024b0c 	.word	0x00024b0c
    c624:	00024af4 	.word	0x00024af4
    c628:	00024ae4 	.word	0x00024ae4
    c62c:	00024754 	.word	0x00024754
    c630:	0002479c 	.word	0x0002479c
    c634:	000247b4 	.word	0x000247b4
    c638:	00024b24 	.word	0x00024b24
    c63c:	00024b48 	.word	0x00024b48

0000c640 <CDWHCIDevice::DumpRegister(char const*, unsigned int)>:
    c640:	e92d4030 	push	{r4, r5, lr}
    c644:	e24dd01c 	sub	sp, sp, #28
    c648:	e1a05001 	mov	r5, r1
    c64c:	e28d000c 	add	r0, sp, #12
    c650:	e1a01002 	mov	r1, r2
    c654:	eb00007b 	bl	c848 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    c658:	e3a03000 	mov	r3, #0
    c65c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    c660:	eb0042f7 	bl	1d244 <CLogger::Get()>
    c664:	e1a04000 	mov	r4, r0
    c668:	e28d000c 	add	r0, sp, #12
    c66c:	eb00007e 	bl	c86c <CDWHCIRegister::Read()>
    c670:	e59f3020 	ldr	r3, [pc, #32]	; c698 <CDWHCIDevice::DumpRegister(char const*, unsigned int)+0x58>
    c674:	e88d0021 	stm	sp, {r0, r5}
    c678:	e3a02004 	mov	r2, #4
    c67c:	e1a00004 	mov	r0, r4
    c680:	e59f1014 	ldr	r1, [pc, #20]	; c69c <CDWHCIDevice::DumpRegister(char const*, unsigned int)+0x5c>
    c684:	eb004497 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c688:	e28d000c 	add	r0, sp, #12
    c68c:	eb000075 	bl	c868 <CDWHCIRegister::~CDWHCIRegister()>
    c690:	e28dd01c 	add	sp, sp, #28
    c694:	e8bd8030 	pop	{r4, r5, pc}
    c698:	00024790 	.word	0x00024790
    c69c:	00024748 	.word	0x00024748

0000c6a0 <CDWHCIDevice::DumpStatus(unsigned int)>:
    c6a0:	e92d4070 	push	{r4, r5, r6, lr}
    c6a4:	e1a05001 	mov	r5, r1
    c6a8:	e59f0104 	ldr	r0, [pc, #260]	; c7b4 <CDWHCIDevice::DumpStatus(unsigned int)+0x114>
    c6ac:	e59f1104 	ldr	r1, [pc, #260]	; c7b8 <CDWHCIDevice::DumpStatus(unsigned int)+0x118>
    c6b0:	ebfff6f7 	bl	a294 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c6b4:	e59f1100 	ldr	r1, [pc, #256]	; c7bc <CDWHCIDevice::DumpStatus(unsigned int)+0x11c>
    c6b8:	e59f0100 	ldr	r0, [pc, #256]	; c7c0 <CDWHCIDevice::DumpStatus(unsigned int)+0x120>
    c6bc:	ebfff6f4 	bl	a294 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c6c0:	e59f10fc 	ldr	r1, [pc, #252]	; c7c4 <CDWHCIDevice::DumpStatus(unsigned int)+0x124>
    c6c4:	e59f00fc 	ldr	r0, [pc, #252]	; c7c8 <CDWHCIDevice::DumpStatus(unsigned int)+0x128>
    c6c8:	ebfff6f1 	bl	a294 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c6cc:	e59f10f8 	ldr	r1, [pc, #248]	; c7cc <CDWHCIDevice::DumpStatus(unsigned int)+0x12c>
    c6d0:	e59f00f8 	ldr	r0, [pc, #248]	; c7d0 <CDWHCIDevice::DumpStatus(unsigned int)+0x130>
    c6d4:	ebfff6ee 	bl	a294 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c6d8:	e59f10f4 	ldr	r1, [pc, #244]	; c7d4 <CDWHCIDevice::DumpStatus(unsigned int)+0x134>
    c6dc:	e59f00f4 	ldr	r0, [pc, #244]	; c7d8 <CDWHCIDevice::DumpStatus(unsigned int)+0x138>
    c6e0:	ebfff6eb 	bl	a294 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c6e4:	e59f10f0 	ldr	r1, [pc, #240]	; c7dc <CDWHCIDevice::DumpStatus(unsigned int)+0x13c>
    c6e8:	e59f00f0 	ldr	r0, [pc, #240]	; c7e0 <CDWHCIDevice::DumpStatus(unsigned int)+0x140>
    c6ec:	ebfff6e8 	bl	a294 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c6f0:	e59f10ec 	ldr	r1, [pc, #236]	; c7e4 <CDWHCIDevice::DumpStatus(unsigned int)+0x144>
    c6f4:	e59f00ec 	ldr	r0, [pc, #236]	; c7e8 <CDWHCIDevice::DumpStatus(unsigned int)+0x148>
    c6f8:	ebfff6e5 	bl	a294 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c6fc:	e59f10e8 	ldr	r1, [pc, #232]	; c7ec <CDWHCIDevice::DumpStatus(unsigned int)+0x14c>
    c700:	e59f00e8 	ldr	r0, [pc, #232]	; c7f0 <CDWHCIDevice::DumpStatus(unsigned int)+0x150>
    c704:	ebfff6e2 	bl	a294 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c708:	e59f10e4 	ldr	r1, [pc, #228]	; c7f4 <CDWHCIDevice::DumpStatus(unsigned int)+0x154>
    c70c:	e59f00e4 	ldr	r0, [pc, #228]	; c7f8 <CDWHCIDevice::DumpStatus(unsigned int)+0x158>
    c710:	ebfff6df 	bl	a294 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c714:	e59f10e0 	ldr	r1, [pc, #224]	; c7fc <CDWHCIDevice::DumpStatus(unsigned int)+0x15c>
    c718:	e59f00e0 	ldr	r0, [pc, #224]	; c800 <CDWHCIDevice::DumpStatus(unsigned int)+0x160>
    c71c:	ebfff6dc 	bl	a294 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c720:	e59f10dc 	ldr	r1, [pc, #220]	; c804 <CDWHCIDevice::DumpStatus(unsigned int)+0x164>
    c724:	e59f00dc 	ldr	r0, [pc, #220]	; c808 <CDWHCIDevice::DumpStatus(unsigned int)+0x168>
    c728:	ebfff6d9 	bl	a294 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c72c:	e59f40d8 	ldr	r4, [pc, #216]	; c80c <CDWHCIDevice::DumpStatus(unsigned int)+0x16c>
    c730:	e59f10d8 	ldr	r1, [pc, #216]	; c810 <CDWHCIDevice::DumpStatus(unsigned int)+0x170>
    c734:	e59f00d8 	ldr	r0, [pc, #216]	; c814 <CDWHCIDevice::DumpStatus(unsigned int)+0x174>
    c738:	ebfff6d5 	bl	a294 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c73c:	e59f10d4 	ldr	r1, [pc, #212]	; c818 <CDWHCIDevice::DumpStatus(unsigned int)+0x178>
    c740:	e59f00d4 	ldr	r0, [pc, #212]	; c81c <CDWHCIDevice::DumpStatus(unsigned int)+0x17c>
    c744:	ebfff6d2 	bl	a294 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c748:	e0854004 	add	r4, r5, r4
    c74c:	e59f10cc 	ldr	r1, [pc, #204]	; c820 <CDWHCIDevice::DumpStatus(unsigned int)+0x180>
    c750:	e59f00cc 	ldr	r0, [pc, #204]	; c824 <CDWHCIDevice::DumpStatus(unsigned int)+0x184>
    c754:	e1a04284 	lsl	r4, r4, #5
    c758:	ebfff6cd 	bl	a294 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c75c:	e59f10c4 	ldr	r1, [pc, #196]	; c828 <CDWHCIDevice::DumpStatus(unsigned int)+0x188>
    c760:	e59f00c4 	ldr	r0, [pc, #196]	; c82c <CDWHCIDevice::DumpStatus(unsigned int)+0x18c>
    c764:	ebfff6ca 	bl	a294 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c768:	e1a01004 	mov	r1, r4
    c76c:	e59f00bc 	ldr	r0, [pc, #188]	; c830 <CDWHCIDevice::DumpStatus(unsigned int)+0x190>
    c770:	ebfff6c7 	bl	a294 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c774:	e2841004 	add	r1, r4, #4
    c778:	e59f00b4 	ldr	r0, [pc, #180]	; c834 <CDWHCIDevice::DumpStatus(unsigned int)+0x194>
    c77c:	ebfff6c4 	bl	a294 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c780:	e2841008 	add	r1, r4, #8
    c784:	e59f00ac 	ldr	r0, [pc, #172]	; c838 <CDWHCIDevice::DumpStatus(unsigned int)+0x198>
    c788:	ebfff6c1 	bl	a294 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c78c:	e284100c 	add	r1, r4, #12
    c790:	e59f00a4 	ldr	r0, [pc, #164]	; c83c <CDWHCIDevice::DumpStatus(unsigned int)+0x19c>
    c794:	ebfff6be 	bl	a294 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c798:	e2841010 	add	r1, r4, #16
    c79c:	e59f009c 	ldr	r0, [pc, #156]	; c840 <CDWHCIDevice::DumpStatus(unsigned int)+0x1a0>
    c7a0:	ebfff6bb 	bl	a294 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c7a4:	e2841014 	add	r1, r4, #20
    c7a8:	e59f0094 	ldr	r0, [pc, #148]	; c844 <CDWHCIDevice::DumpStatus(unsigned int)+0x1a4>
    c7ac:	e8bd4070 	pop	{r4, r5, r6, lr}
    c7b0:	eafff6b7 	b	a294 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c7b4:	00024b64 	.word	0x00024b64
    c7b8:	20980000 	.word	0x20980000
    c7bc:	20980008 	.word	0x20980008
    c7c0:	00024b70 	.word	0x00024b70
    c7c4:	2098000c 	.word	0x2098000c
    c7c8:	00024b78 	.word	0x00024b78
    c7cc:	20980010 	.word	0x20980010
    c7d0:	00024b80 	.word	0x00024b80
    c7d4:	20980014 	.word	0x20980014
    c7d8:	00024b88 	.word	0x00024b88
    c7dc:	20980018 	.word	0x20980018
    c7e0:	00024b94 	.word	0x00024b94
    c7e4:	20980024 	.word	0x20980024
    c7e8:	00024ba0 	.word	0x00024ba0
    c7ec:	20980028 	.word	0x20980028
    c7f0:	00024bac 	.word	0x00024bac
    c7f4:	2098002c 	.word	0x2098002c
    c7f8:	00024bc0 	.word	0x00024bc0
    c7fc:	20980100 	.word	0x20980100
    c800:	00024bd0 	.word	0x00024bd0
    c804:	20980400 	.word	0x20980400
    c808:	00024be8 	.word	0x00024be8
    c80c:	0104c028 	.word	0x0104c028
    c810:	20980410 	.word	0x20980410
    c814:	00024bf4 	.word	0x00024bf4
    c818:	20980414 	.word	0x20980414
    c81c:	00024c0c 	.word	0x00024c0c
    c820:	20980418 	.word	0x20980418
    c824:	00024c20 	.word	0x00024c20
    c828:	20980440 	.word	0x20980440
    c82c:	00024c38 	.word	0x00024c38
    c830:	00024c44 	.word	0x00024c44
    c834:	00024c5c 	.word	0x00024c5c
    c838:	00024c74 	.word	0x00024c74
    c83c:	00024c88 	.word	0x00024c88
    c840:	00024ca0 	.word	0x00024ca0
    c844:	00024cb8 	.word	0x00024cb8

0000c848 <CDWHCIRegister::CDWHCIRegister(unsigned int)>:
    c848:	e3a02000 	mov	r2, #0
    c84c:	e5801004 	str	r1, [r0, #4]
    c850:	e5c02000 	strb	r2, [r0]
    c854:	e12fff1e 	bx	lr

0000c858 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>:
    c858:	e3a0c001 	mov	ip, #1
    c85c:	e9800006 	stmib	r0, {r1, r2}
    c860:	e5c0c000 	strb	ip, [r0]
    c864:	e12fff1e 	bx	lr

0000c868 <CDWHCIRegister::~CDWHCIRegister()>:
    c868:	e12fff1e 	bx	lr

0000c86c <CDWHCIRegister::Read()>:
    c86c:	e1a03000 	mov	r3, r0
    c870:	e3a02001 	mov	r2, #1
    c874:	e5901004 	ldr	r1, [r0, #4]
    c878:	e5910000 	ldr	r0, [r1]
    c87c:	e5c32000 	strb	r2, [r3]
    c880:	e5830008 	str	r0, [r3, #8]
    c884:	e12fff1e 	bx	lr

0000c888 <CDWHCIRegister::Write()>:
    c888:	e5d03000 	ldrb	r3, [r0]
    c88c:	e92d4010 	push	{r4, lr}
    c890:	e3530000 	cmp	r3, #0
    c894:	e1a04000 	mov	r4, r0
    c898:	1a000003 	bne	c8ac <CDWHCIRegister::Write()+0x24>
    c89c:	e3a02035 	mov	r2, #53	; 0x35
    c8a0:	e59f1014 	ldr	r1, [pc, #20]	; c8bc <CDWHCIRegister::Write()+0x34>
    c8a4:	e59f0014 	ldr	r0, [pc, #20]	; c8c0 <CDWHCIRegister::Write()+0x38>
    c8a8:	eb003872 	bl	1aa78 <assertion_failed>
    c8ac:	e5942008 	ldr	r2, [r4, #8]
    c8b0:	e5943004 	ldr	r3, [r4, #4]
    c8b4:	e5832000 	str	r2, [r3]
    c8b8:	e8bd8010 	pop	{r4, pc}
    c8bc:	00024cd0 	.word	0x00024cd0
    c8c0:	00024ce4 	.word	0x00024ce4

0000c8c4 <CDWHCIRegister::Get() const>:
    c8c4:	e5d03000 	ldrb	r3, [r0]
    c8c8:	e92d4010 	push	{r4, lr}
    c8cc:	e3530000 	cmp	r3, #0
    c8d0:	e1a04000 	mov	r4, r0
    c8d4:	1a000003 	bne	c8e8 <CDWHCIRegister::Get() const+0x24>
    c8d8:	e3a0203b 	mov	r2, #59	; 0x3b
    c8dc:	e59f100c 	ldr	r1, [pc, #12]	; c8f0 <CDWHCIRegister::Get() const+0x2c>
    c8e0:	e59f000c 	ldr	r0, [pc, #12]	; c8f4 <CDWHCIRegister::Get() const+0x30>
    c8e4:	eb003863 	bl	1aa78 <assertion_failed>
    c8e8:	e5940008 	ldr	r0, [r4, #8]
    c8ec:	e8bd8010 	pop	{r4, pc}
    c8f0:	00024cd0 	.word	0x00024cd0
    c8f4:	00024ce4 	.word	0x00024ce4

0000c8f8 <CDWHCIRegister::Set(unsigned int)>:
    c8f8:	e3a03001 	mov	r3, #1
    c8fc:	e5801008 	str	r1, [r0, #8]
    c900:	e5c03000 	strb	r3, [r0]
    c904:	e12fff1e 	bx	lr

0000c908 <CDWHCIRegister::IsSet(unsigned int) const>:
    c908:	e5d03000 	ldrb	r3, [r0]
    c90c:	e92d4070 	push	{r4, r5, r6, lr}
    c910:	e3530000 	cmp	r3, #0
    c914:	e1a04000 	mov	r4, r0
    c918:	e1a05001 	mov	r5, r1
    c91c:	1a000003 	bne	c930 <CDWHCIRegister::IsSet(unsigned int) const+0x28>
    c920:	e3a02047 	mov	r2, #71	; 0x47
    c924:	e59f1018 	ldr	r1, [pc, #24]	; c944 <CDWHCIRegister::IsSet(unsigned int) const+0x3c>
    c928:	e59f0018 	ldr	r0, [pc, #24]	; c948 <CDWHCIRegister::IsSet(unsigned int) const+0x40>
    c92c:	eb003851 	bl	1aa78 <assertion_failed>
    c930:	e5943008 	ldr	r3, [r4, #8]
    c934:	e1150003 	tst	r5, r3
    c938:	13a00001 	movne	r0, #1
    c93c:	03a00000 	moveq	r0, #0
    c940:	e8bd8070 	pop	{r4, r5, r6, pc}
    c944:	00024cd0 	.word	0x00024cd0
    c948:	00024ce4 	.word	0x00024ce4

0000c94c <CDWHCIRegister::And(unsigned int)>:
    c94c:	e5d03000 	ldrb	r3, [r0]
    c950:	e92d4070 	push	{r4, r5, r6, lr}
    c954:	e3530000 	cmp	r3, #0
    c958:	e1a04000 	mov	r4, r0
    c95c:	e1a05001 	mov	r5, r1
    c960:	1a000003 	bne	c974 <CDWHCIRegister::And(unsigned int)+0x28>
    c964:	e3a0204d 	mov	r2, #77	; 0x4d
    c968:	e59f1014 	ldr	r1, [pc, #20]	; c984 <CDWHCIRegister::And(unsigned int)+0x38>
    c96c:	e59f0014 	ldr	r0, [pc, #20]	; c988 <CDWHCIRegister::And(unsigned int)+0x3c>
    c970:	eb003840 	bl	1aa78 <assertion_failed>
    c974:	e5941008 	ldr	r1, [r4, #8]
    c978:	e0011005 	and	r1, r1, r5
    c97c:	e5841008 	str	r1, [r4, #8]
    c980:	e8bd8070 	pop	{r4, r5, r6, pc}
    c984:	00024cd0 	.word	0x00024cd0
    c988:	00024ce4 	.word	0x00024ce4

0000c98c <CDWHCIRegister::Or(unsigned int)>:
    c98c:	e5d03000 	ldrb	r3, [r0]
    c990:	e92d4070 	push	{r4, r5, r6, lr}
    c994:	e3530000 	cmp	r3, #0
    c998:	e1a04000 	mov	r4, r0
    c99c:	e1a05001 	mov	r5, r1
    c9a0:	1a000003 	bne	c9b4 <CDWHCIRegister::Or(unsigned int)+0x28>
    c9a4:	e3a02053 	mov	r2, #83	; 0x53
    c9a8:	e59f1014 	ldr	r1, [pc, #20]	; c9c4 <CDWHCIRegister::Or(unsigned int)+0x38>
    c9ac:	e59f0014 	ldr	r0, [pc, #20]	; c9c8 <CDWHCIRegister::Or(unsigned int)+0x3c>
    c9b0:	eb003830 	bl	1aa78 <assertion_failed>
    c9b4:	e5941008 	ldr	r1, [r4, #8]
    c9b8:	e1811005 	orr	r1, r1, r5
    c9bc:	e5841008 	str	r1, [r4, #8]
    c9c0:	e8bd8070 	pop	{r4, r5, r6, pc}
    c9c4:	00024cd0 	.word	0x00024cd0
    c9c8:	00024ce4 	.word	0x00024ce4

0000c9cc <CDWHCIRegister::ClearBit(unsigned int)>:
    c9cc:	e5d03000 	ldrb	r3, [r0]
    c9d0:	e92d4070 	push	{r4, r5, r6, lr}
    c9d4:	e3530000 	cmp	r3, #0
    c9d8:	e1a04000 	mov	r4, r0
    c9dc:	e1a05001 	mov	r5, r1
    c9e0:	0a00000a 	beq	ca10 <CDWHCIRegister::ClearBit(unsigned int)+0x44>
    c9e4:	e355001f 	cmp	r5, #31
    c9e8:	9a000003 	bls	c9fc <CDWHCIRegister::ClearBit(unsigned int)+0x30>
    c9ec:	e3a0205a 	mov	r2, #90	; 0x5a
    c9f0:	e59f102c 	ldr	r1, [pc, #44]	; ca24 <CDWHCIRegister::ClearBit(unsigned int)+0x58>
    c9f4:	e59f002c 	ldr	r0, [pc, #44]	; ca28 <CDWHCIRegister::ClearBit(unsigned int)+0x5c>
    c9f8:	eb00381e 	bl	1aa78 <assertion_failed>
    c9fc:	e3a03001 	mov	r3, #1
    ca00:	e5941008 	ldr	r1, [r4, #8]
    ca04:	e1c11513 	bic	r1, r1, r3, lsl r5
    ca08:	e5841008 	str	r1, [r4, #8]
    ca0c:	e8bd8070 	pop	{r4, r5, r6, pc}
    ca10:	e3a02059 	mov	r2, #89	; 0x59
    ca14:	e59f1008 	ldr	r1, [pc, #8]	; ca24 <CDWHCIRegister::ClearBit(unsigned int)+0x58>
    ca18:	e59f000c 	ldr	r0, [pc, #12]	; ca2c <CDWHCIRegister::ClearBit(unsigned int)+0x60>
    ca1c:	eb003815 	bl	1aa78 <assertion_failed>
    ca20:	eaffffef 	b	c9e4 <CDWHCIRegister::ClearBit(unsigned int)+0x18>
    ca24:	00024cd0 	.word	0x00024cd0
    ca28:	00024cf0 	.word	0x00024cf0
    ca2c:	00024ce4 	.word	0x00024ce4

0000ca30 <CDWHCIRegister::SetBit(unsigned int)>:
    ca30:	e5d03000 	ldrb	r3, [r0]
    ca34:	e92d4070 	push	{r4, r5, r6, lr}
    ca38:	e3530000 	cmp	r3, #0
    ca3c:	e1a04000 	mov	r4, r0
    ca40:	e1a05001 	mov	r5, r1
    ca44:	0a00000a 	beq	ca74 <CDWHCIRegister::SetBit(unsigned int)+0x44>
    ca48:	e355001f 	cmp	r5, #31
    ca4c:	9a000003 	bls	ca60 <CDWHCIRegister::SetBit(unsigned int)+0x30>
    ca50:	e3a02061 	mov	r2, #97	; 0x61
    ca54:	e59f102c 	ldr	r1, [pc, #44]	; ca88 <CDWHCIRegister::SetBit(unsigned int)+0x58>
    ca58:	e59f002c 	ldr	r0, [pc, #44]	; ca8c <CDWHCIRegister::SetBit(unsigned int)+0x5c>
    ca5c:	eb003805 	bl	1aa78 <assertion_failed>
    ca60:	e3a03001 	mov	r3, #1
    ca64:	e5941008 	ldr	r1, [r4, #8]
    ca68:	e1811513 	orr	r1, r1, r3, lsl r5
    ca6c:	e5841008 	str	r1, [r4, #8]
    ca70:	e8bd8070 	pop	{r4, r5, r6, pc}
    ca74:	e3a02060 	mov	r2, #96	; 0x60
    ca78:	e59f1008 	ldr	r1, [pc, #8]	; ca88 <CDWHCIRegister::SetBit(unsigned int)+0x58>
    ca7c:	e59f000c 	ldr	r0, [pc, #12]	; ca90 <CDWHCIRegister::SetBit(unsigned int)+0x60>
    ca80:	eb0037fc 	bl	1aa78 <assertion_failed>
    ca84:	eaffffef 	b	ca48 <CDWHCIRegister::SetBit(unsigned int)+0x18>
    ca88:	00024cd0 	.word	0x00024cd0
    ca8c:	00024cf0 	.word	0x00024cf0
    ca90:	00024ce4 	.word	0x00024ce4

0000ca94 <CDWHCIRegister::ClearAll()>:
    ca94:	e3a02000 	mov	r2, #0
    ca98:	e3a03001 	mov	r3, #1
    ca9c:	e5802008 	str	r2, [r0, #8]
    caa0:	e5c03000 	strb	r3, [r0]
    caa4:	e12fff1e 	bx	lr

0000caa8 <CDWHCIRegister::SetAll()>:
    caa8:	e3e02000 	mvn	r2, #0
    caac:	e3a03001 	mov	r3, #1
    cab0:	e5802008 	str	r2, [r0, #8]
    cab4:	e5c03000 	strb	r3, [r0]
    cab8:	e12fff1e 	bx	lr

0000cabc <CDWHCIRegister::Dump() const>:
    cabc:	e92d4010 	push	{r4, lr}
    cac0:	e5d03000 	ldrb	r3, [r0]
    cac4:	e24dd008 	sub	sp, sp, #8
    cac8:	e3530000 	cmp	r3, #0
    cacc:	e1a04000 	mov	r4, r0
    cad0:	1a00000a 	bne	cb00 <CDWHCIRegister::Dump() const+0x44>
    cad4:	eb0041da 	bl	1d244 <CLogger::Get()>
    cad8:	e5942004 	ldr	r2, [r4, #4]
    cadc:	e59f3050 	ldr	r3, [pc, #80]	; cb34 <CDWHCIRegister::Dump() const+0x78>
    cae0:	e1a02a02 	lsl	r2, r2, #20
    cae4:	e1a02a22 	lsr	r2, r2, #20
    cae8:	e58d2000 	str	r2, [sp]
    caec:	e59f1044 	ldr	r1, [pc, #68]	; cb38 <CDWHCIRegister::Dump() const+0x7c>
    caf0:	e3a02004 	mov	r2, #4
    caf4:	eb00437b 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    caf8:	e28dd008 	add	sp, sp, #8
    cafc:	e8bd8010 	pop	{r4, pc}
    cb00:	eb0041cf 	bl	1d244 <CLogger::Get()>
    cb04:	e5943004 	ldr	r3, [r4, #4]
    cb08:	e5942008 	ldr	r2, [r4, #8]
    cb0c:	e1a03a03 	lsl	r3, r3, #20
    cb10:	e1a03a23 	lsr	r3, r3, #20
    cb14:	e58d3000 	str	r3, [sp]
    cb18:	e58d2004 	str	r2, [sp, #4]
    cb1c:	e59f3018 	ldr	r3, [pc, #24]	; cb3c <CDWHCIRegister::Dump() const+0x80>
    cb20:	e3a02004 	mov	r2, #4
    cb24:	e59f100c 	ldr	r1, [pc, #12]	; cb38 <CDWHCIRegister::Dump() const+0x7c>
    cb28:	eb00436e 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    cb2c:	e28dd008 	add	sp, sp, #8
    cb30:	e8bd8010 	pop	{r4, pc}
    cb34:	00024d30 	.word	0x00024d30
    cb38:	00024d28 	.word	0x00024d28
    cb3c:	00024d0c 	.word	0x00024d0c

0000cb40 <CDWHCITransferStageData::~CDWHCITransferStageData()>:
    cb40:	e92d4010 	push	{r4, lr}
    cb44:	e1a04000 	mov	r4, r0
    cb48:	e5900050 	ldr	r0, [r0, #80]	; 0x50
    cb4c:	e3500000 	cmp	r0, #0
    cb50:	0a000002 	beq	cb60 <CDWHCITransferStageData::~CDWHCITransferStageData()+0x20>
    cb54:	e5903000 	ldr	r3, [r0]
    cb58:	e5933004 	ldr	r3, [r3, #4]
    cb5c:	e12fff33 	blx	r3
    cb60:	e3a03000 	mov	r3, #0
    cb64:	e5940044 	ldr	r0, [r4, #68]	; 0x44
    cb68:	e5843050 	str	r3, [r4, #80]	; 0x50
    cb6c:	e1500003 	cmp	r0, r3
    cb70:	e5843048 	str	r3, [r4, #72]	; 0x48
    cb74:	0a000000 	beq	cb7c <CDWHCITransferStageData::~CDWHCITransferStageData()+0x3c>
    cb78:	eb005886 	bl	22d98 <operator delete[](void*)>
    cb7c:	e1a00004 	mov	r0, r4
    cb80:	e8bd8010 	pop	{r4, pc}

0000cb84 <CDWHCITransferStageData::SetChannelNumber(unsigned int)>:
    cb84:	e5801000 	str	r1, [r0]
    cb88:	e12fff1e 	bx	lr

0000cb8c <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)>:
    cb8c:	e92d4070 	push	{r4, r5, r6, lr}
    cb90:	e1a04000 	mov	r4, r0
    cb94:	e59f0194 	ldr	r0, [pc, #404]	; cd30 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x1a4>
    cb98:	e5841040 	str	r1, [r4, #64]	; 0x40
    cb9c:	e0000001 	and	r0, r0, r1
    cba0:	e3500000 	cmp	r0, #0
    cba4:	0a000006 	beq	cbc4 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x38>
    cba8:	e3110010 	tst	r1, #16
    cbac:	08bd8070 	popeq	{r4, r5, r6, pc}
    cbb0:	e5940004 	ldr	r0, [r4, #4]
    cbb4:	eb0008e0 	bl	ef3c <CUSBRequest::IsCompleteOnNAK() const>
    cbb8:	e3500000 	cmp	r0, #0
    cbbc:	1a000041 	bne	ccc8 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x13c>
    cbc0:	e8bd8070 	pop	{r4, r5, r6, pc}
    cbc4:	e5d40010 	ldrb	r0, [r4, #16]
    cbc8:	e5945030 	ldr	r5, [r4, #48]	; 0x30
    cbcc:	e594102c 	ldr	r1, [r4, #44]	; 0x2c
    cbd0:	e3500000 	cmp	r0, #0
    cbd4:	e0455002 	sub	r5, r5, r2
    cbd8:	e0413003 	sub	r3, r1, r3
    cbdc:	1a000018 	bne	cc44 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0xb8>
    cbe0:	e5941034 	ldr	r1, [r4, #52]	; 0x34
    cbe4:	e5942048 	ldr	r2, [r4, #72]	; 0x48
    cbe8:	e0811003 	add	r1, r1, r3
    cbec:	e0823003 	add	r3, r2, r3
    cbf0:	e5841034 	str	r1, [r4, #52]	; 0x34
    cbf4:	e5843048 	str	r3, [r4, #72]	; 0x48
    cbf8:	e5d42009 	ldrb	r2, [r4, #9]
    cbfc:	e1a01005 	mov	r1, r5
    cc00:	e5940018 	ldr	r0, [r4, #24]
    cc04:	eb00076e 	bl	e9c4 <CUSBEndpoint::SkipPID(unsigned int, bool)>
    cc08:	e5942028 	ldr	r2, [r4, #40]	; 0x28
    cc0c:	e1550002 	cmp	r5, r2
    cc10:	8a000026 	bhi	ccb0 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x124>
    cc14:	e5940024 	ldr	r0, [r4, #36]	; 0x24
    cc18:	e5941034 	ldr	r1, [r4, #52]	; 0x34
    cc1c:	e594c02c 	ldr	ip, [r4, #44]	; 0x2c
    cc20:	e0403001 	sub	r3, r0, r1
    cc24:	e0422005 	sub	r2, r2, r5
    cc28:	e153000c 	cmp	r3, ip
    cc2c:	e5842028 	str	r2, [r4, #40]	; 0x28
    cc30:	28bd8070 	popcs	{r4, r5, r6, pc}
    cc34:	e1500001 	cmp	r0, r1
    cc38:	3a000034 	bcc	cd10 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x184>
    cc3c:	e584302c 	str	r3, [r4, #44]	; 0x2c
    cc40:	e8bd8070 	pop	{r4, r5, r6, pc}
    cc44:	e5d40011 	ldrb	r0, [r4, #17]
    cc48:	e3530000 	cmp	r3, #0
    cc4c:	13a02000 	movne	r2, #0
    cc50:	02002001 	andeq	r2, r0, #1
    cc54:	e3520000 	cmp	r2, #0
    cc58:	0a000009 	beq	cc84 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0xf8>
    cc5c:	e3510000 	cmp	r1, #0
    cc60:	15941020 	ldrne	r1, [r4, #32]
    cc64:	10010591 	mulne	r1, r1, r5
    cc68:	e5942034 	ldr	r2, [r4, #52]	; 0x34
    cc6c:	e5943048 	ldr	r3, [r4, #72]	; 0x48
    cc70:	e0822001 	add	r2, r2, r1
    cc74:	e0831001 	add	r1, r3, r1
    cc78:	e5842034 	str	r2, [r4, #52]	; 0x34
    cc7c:	e5841048 	str	r1, [r4, #72]	; 0x48
    cc80:	eaffffdc 	b	cbf8 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x6c>
    cc84:	e5941034 	ldr	r1, [r4, #52]	; 0x34
    cc88:	e5942048 	ldr	r2, [r4, #72]	; 0x48
    cc8c:	e0811003 	add	r1, r1, r3
    cc90:	e3500000 	cmp	r0, #0
    cc94:	e0823003 	add	r3, r2, r3
    cc98:	e5841034 	str	r1, [r4, #52]	; 0x34
    cc9c:	e5843048 	str	r3, [r4, #72]	; 0x48
    cca0:	1affffd4 	bne	cbf8 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x6c>
    cca4:	e5942028 	ldr	r2, [r4, #40]	; 0x28
    cca8:	e1550002 	cmp	r5, r2
    ccac:	9affffd8 	bls	cc14 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x88>
    ccb0:	e3a020d6 	mov	r2, #214	; 0xd6
    ccb4:	e59f1078 	ldr	r1, [pc, #120]	; cd34 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x1a8>
    ccb8:	e59f0078 	ldr	r0, [pc, #120]	; cd38 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x1ac>
    ccbc:	eb00376d 	bl	1aa78 <assertion_failed>
    ccc0:	e5942028 	ldr	r2, [r4, #40]	; 0x28
    ccc4:	eaffffd2 	b	cc14 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x88>
    ccc8:	e5940018 	ldr	r0, [r4, #24]
    cccc:	eb000715 	bl	e928 <CUSBEndpoint::GetType() const>
    ccd0:	e3500001 	cmp	r0, #1
    ccd4:	0a000003 	beq	cce8 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x15c>
    ccd8:	e3a020b9 	mov	r2, #185	; 0xb9
    ccdc:	e59f1050 	ldr	r1, [pc, #80]	; cd34 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x1a8>
    cce0:	e59f0054 	ldr	r0, [pc, #84]	; cd3c <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x1b0>
    cce4:	eb003763 	bl	1aa78 <assertion_failed>
    cce8:	e5d43008 	ldrb	r3, [r4, #8]
    ccec:	e3530000 	cmp	r3, #0
    ccf0:	1a000003 	bne	cd04 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x178>
    ccf4:	e3a020ba 	mov	r2, #186	; 0xba
    ccf8:	e59f1034 	ldr	r1, [pc, #52]	; cd34 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x1a8>
    ccfc:	e59f003c 	ldr	r0, [pc, #60]	; cd40 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x1b4>
    cd00:	eb00375c 	bl	1aa78 <assertion_failed>
    cd04:	e3a03000 	mov	r3, #0
    cd08:	e5843028 	str	r3, [r4, #40]	; 0x28
    cd0c:	e8bd8070 	pop	{r4, r5, r6, pc}
    cd10:	e3a020dc 	mov	r2, #220	; 0xdc
    cd14:	e59f1018 	ldr	r1, [pc, #24]	; cd34 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x1a8>
    cd18:	e59f0024 	ldr	r0, [pc, #36]	; cd44 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x1b8>
    cd1c:	eb003755 	bl	1aa78 <assertion_failed>
    cd20:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    cd24:	e5942034 	ldr	r2, [r4, #52]	; 0x34
    cd28:	e0433002 	sub	r3, r3, r2
    cd2c:	eaffffc2 	b	cc3c <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0xb0>
    cd30:	000007dc 	.word	0x000007dc
    cd34:	00024d50 	.word	0x00024d50
    cd38:	00024d9c 	.word	0x00024d9c
    cd3c:	00024d68 	.word	0x00024d68
    cd40:	00024d94 	.word	0x00024d94
    cd44:	00024dc0 	.word	0x00024dc0

0000cd48 <CDWHCITransferStageData::SetSplitComplete(bool)>:
    cd48:	e5d03010 	ldrb	r3, [r0, #16]
    cd4c:	e92d4070 	push	{r4, r5, r6, lr}
    cd50:	e3530000 	cmp	r3, #0
    cd54:	e1a04000 	mov	r4, r0
    cd58:	e1a05001 	mov	r5, r1
    cd5c:	1a000003 	bne	cd70 <CDWHCITransferStageData::SetSplitComplete(bool)+0x28>
    cd60:	e3a020e3 	mov	r2, #227	; 0xe3
    cd64:	e59f100c 	ldr	r1, [pc, #12]	; cd78 <CDWHCITransferStageData::SetSplitComplete(bool)+0x30>
    cd68:	e59f000c 	ldr	r0, [pc, #12]	; cd7c <CDWHCITransferStageData::SetSplitComplete(bool)+0x34>
    cd6c:	eb003741 	bl	1aa78 <assertion_failed>
    cd70:	e5c45011 	strb	r5, [r4, #17]
    cd74:	e8bd8070 	pop	{r4, r5, r6, pc}
    cd78:	00024d50 	.word	0x00024d50
    cd7c:	00024dec 	.word	0x00024dec

0000cd80 <CDWHCITransferStageData::SetState(unsigned int)>:
    cd80:	e5801038 	str	r1, [r0, #56]	; 0x38
    cd84:	e12fff1e 	bx	lr

0000cd88 <CDWHCITransferStageData::GetState() const>:
    cd88:	e5900038 	ldr	r0, [r0, #56]	; 0x38
    cd8c:	e12fff1e 	bx	lr

0000cd90 <CDWHCITransferStageData::SetSubState(unsigned int)>:
    cd90:	e580103c 	str	r1, [r0, #60]	; 0x3c
    cd94:	e12fff1e 	bx	lr

0000cd98 <CDWHCITransferStageData::GetSubState() const>:
    cd98:	e590003c 	ldr	r0, [r0, #60]	; 0x3c
    cd9c:	e12fff1e 	bx	lr

0000cda0 <CDWHCITransferStageData::BeginSplitCycle()>:
    cda0:	e3a00001 	mov	r0, #1
    cda4:	e12fff1e 	bx	lr

0000cda8 <CDWHCITransferStageData::GetChannelNumber() const>:
    cda8:	e5900000 	ldr	r0, [r0]
    cdac:	e12fff1e 	bx	lr

0000cdb0 <CDWHCITransferStageData::IsPeriodic() const>:
    cdb0:	e92d4010 	push	{r4, lr}
    cdb4:	e1a04000 	mov	r4, r0
    cdb8:	e5900018 	ldr	r0, [r0, #24]
    cdbc:	e3500000 	cmp	r0, #0
    cdc0:	0a000006 	beq	cde0 <CDWHCITransferStageData::IsPeriodic() const+0x30>
    cdc4:	eb0006d7 	bl	e928 <CUSBEndpoint::GetType() const>
    cdc8:	e2400002 	sub	r0, r0, #2
    cdcc:	e6ef0070 	uxtb	r0, r0
    cdd0:	e3500001 	cmp	r0, #1
    cdd4:	83a00000 	movhi	r0, #0
    cdd8:	93a00001 	movls	r0, #1
    cddc:	e8bd8010 	pop	{r4, pc}
    cde0:	e59f0010 	ldr	r0, [pc, #16]	; cdf8 <CDWHCITransferStageData::IsPeriodic() const+0x48>
    cde4:	e3a02f42 	mov	r2, #264	; 0x108
    cde8:	e59f100c 	ldr	r1, [pc, #12]	; cdfc <CDWHCITransferStageData::IsPeriodic() const+0x4c>
    cdec:	eb003721 	bl	1aa78 <assertion_failed>
    cdf0:	e5940018 	ldr	r0, [r4, #24]
    cdf4:	eafffff2 	b	cdc4 <CDWHCITransferStageData::IsPeriodic() const+0x14>
    cdf8:	00024e00 	.word	0x00024e00
    cdfc:	00024d50 	.word	0x00024d50

0000ce00 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)>:
    ce00:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    ce04:	e1a05002 	mov	r5, r2
    ce08:	e3a02000 	mov	r2, #0
    ce0c:	e5dd6018 	ldrb	r6, [sp, #24]
    ce10:	e1550002 	cmp	r5, r2
    ce14:	e1a04000 	mov	r4, r0
    ce18:	e8800022 	stm	r0, {r1, r5}
    ce1c:	e5c03008 	strb	r3, [r0, #8]
    ce20:	e5c06009 	strb	r6, [r0, #9]
    ce24:	e580200c 	str	r2, [r0, #12]
    ce28:	e5c02011 	strb	r2, [r0, #17]
    ce2c:	e5802034 	str	r2, [r0, #52]	; 0x34
    ce30:	e5802038 	str	r2, [r0, #56]	; 0x38
    ce34:	e580203c 	str	r2, [r0, #60]	; 0x3c
    ce38:	e5802040 	str	r2, [r0, #64]	; 0x40
    ce3c:	e5802044 	str	r2, [r0, #68]	; 0x44
    ce40:	e580204c 	str	r2, [r0, #76]	; 0x4c
    ce44:	e5802050 	str	r2, [r0, #80]	; 0x50
    ce48:	e59d701c 	ldr	r7, [sp, #28]
    ce4c:	0a000098 	beq	d0b4 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2b4>
    ce50:	e1a00005 	mov	r0, r5
    ce54:	eb0007c9 	bl	ed80 <CUSBRequest::GetEndpoint() const>
    ce58:	e3500000 	cmp	r0, #0
    ce5c:	e5840018 	str	r0, [r4, #24]
    ce60:	0a000098 	beq	d0c8 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2c8>
    ce64:	eb00069d 	bl	e8e0 <CUSBEndpoint::GetDevice() const>
    ce68:	e3500000 	cmp	r0, #0
    ce6c:	e5840014 	str	r0, [r4, #20]
    ce70:	0a00009a 	beq	d0e0 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2e0>
    ce74:	eb00033d 	bl	db70 <CUSBDevice::GetSpeed() const>
    ce78:	e5c4001c 	strb	r0, [r4, #28]
    ce7c:	e5940018 	ldr	r0, [r4, #24]
    ce80:	eb0006ae 	bl	e940 <CUSBEndpoint::GetMaxPacketSize() const>
    ce84:	e5840020 	str	r0, [r4, #32]
    ce88:	e5940014 	ldr	r0, [r4, #20]
    ce8c:	eb000339 	bl	db78 <CUSBDevice::IsSplit() const>
    ce90:	e3560000 	cmp	r6, #0
    ce94:	e5c40010 	strb	r0, [r4, #16]
    ce98:	0a00004f 	beq	cfdc <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x1dc>
    ce9c:	e5943044 	ldr	r3, [r4, #68]	; 0x44
    cea0:	e3530000 	cmp	r3, #0
    cea4:	0a000003 	beq	ceb8 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0xb8>
    cea8:	e3a02061 	mov	r2, #97	; 0x61
    ceac:	e59f1244 	ldr	r1, [pc, #580]	; d0f8 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2f8>
    ceb0:	e59f0244 	ldr	r0, [pc, #580]	; d0fc <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2fc>
    ceb4:	eb0036ef 	bl	1aa78 <assertion_failed>
    ceb8:	e3a00004 	mov	r0, #4
    cebc:	eb0057b3 	bl	22d90 <operator new[](unsigned int)>
    cec0:	e3a02000 	mov	r2, #0
    cec4:	e3a03001 	mov	r3, #1
    cec8:	e5840044 	str	r0, [r4, #68]	; 0x44
    cecc:	e5840048 	str	r0, [r4, #72]	; 0x48
    ced0:	e5842024 	str	r2, [r4, #36]	; 0x24
    ced4:	e584202c 	str	r2, [r4, #44]	; 0x2c
    ced8:	e5843028 	str	r3, [r4, #40]	; 0x28
    cedc:	e5843030 	str	r3, [r4, #48]	; 0x30
    cee0:	e3100003 	tst	r0, #3
    cee4:	1a00005f 	bne	d068 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x268>
    cee8:	e5d43010 	ldrb	r3, [r4, #16]
    ceec:	e3530000 	cmp	r3, #0
    cef0:	0a00000c 	beq	cf28 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x128>
    cef4:	e1a00004 	mov	r0, r4
    cef8:	ebffffac 	bl	cdb0 <CDWHCITransferStageData::IsPeriodic() const>
    cefc:	e3500000 	cmp	r0, #0
    cf00:	0a00002f 	beq	cfc4 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x1c4>
    cf04:	e3a00014 	mov	r0, #20
    cf08:	eb001120 	bl	11390 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)>
    cf0c:	e1a05000 	mov	r5, r0
    cf10:	eb001108 	bl	11338 <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()>
    cf14:	e5845050 	str	r5, [r4, #80]	; 0x50
    cf18:	e3570000 	cmp	r7, #0
    cf1c:	1a000013 	bne	cf70 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x170>
    cf20:	e1a00004 	mov	r0, r4
    cf24:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    cf28:	e5940014 	ldr	r0, [r4, #20]
    cf2c:	eb000313 	bl	db80 <CUSBDevice::GetHubAddress() const>
    cf30:	e3500000 	cmp	r0, #0
    cf34:	1afffff7 	bne	cf18 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x118>
    cf38:	e5d4301c 	ldrb	r3, [r4, #28]
    cf3c:	e3530002 	cmp	r3, #2
    cf40:	0afffff4 	beq	cf18 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x118>
    cf44:	e1a00004 	mov	r0, r4
    cf48:	ebffff98 	bl	cdb0 <CDWHCITransferStageData::IsPeriodic() const>
    cf4c:	e1a06000 	mov	r6, r0
    cf50:	e3a00008 	mov	r0, #8
    cf54:	eb0020fa 	bl	15344 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)>
    cf58:	e1a05000 	mov	r5, r0
    cf5c:	e1a01006 	mov	r1, r6
    cf60:	eb0020f0 	bl	15328 <CDWHCIFrameSchedulerNoSplit::CDWHCIFrameSchedulerNoSplit(bool)>
    cf64:	e3570000 	cmp	r7, #0
    cf68:	e5845050 	str	r5, [r4, #80]	; 0x50
    cf6c:	0affffeb 	beq	cf20 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x120>
    cf70:	e5940018 	ldr	r0, [r4, #24]
    cf74:	eb00066b 	bl	e928 <CUSBEndpoint::GetType() const>
    cf78:	e3500002 	cmp	r0, #2
    cf7c:	0a000003 	beq	cf90 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x190>
    cf80:	e3a02088 	mov	r2, #136	; 0x88
    cf84:	e59f116c 	ldr	r1, [pc, #364]	; d0f8 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2f8>
    cf88:	e59f0170 	ldr	r0, [pc, #368]	; d100 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x300>
    cf8c:	eb0036b9 	bl	1aa78 <assertion_failed>
    cf90:	e3a03064 	mov	r3, #100	; 0x64
    cf94:	e0030793 	mul	r3, r3, r7
    cf98:	e59f2164 	ldr	r2, [pc, #356]	; d104 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x304>
    cf9c:	e0832392 	umull	r2, r3, r2, r3
    cfa0:	e1a03323 	lsr	r3, r3, #6
    cfa4:	e3530000 	cmp	r3, #0
    cfa8:	e584300c 	str	r3, [r4, #12]
    cfac:	0a00003b 	beq	d0a0 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2a0>
    cfb0:	eb0052f8 	bl	21b98 <CTimer::Get()>
    cfb4:	eb005030 	bl	2107c <CTimer::GetTicks() const>
    cfb8:	e584004c 	str	r0, [r4, #76]	; 0x4c
    cfbc:	e1a00004 	mov	r0, r4
    cfc0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    cfc4:	e3a00010 	mov	r0, #16
    cfc8:	eb000fcc 	bl	10f00 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)>
    cfcc:	e1a05000 	mov	r5, r0
    cfd0:	eb000fb6 	bl	10eb0 <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()>
    cfd4:	e5845050 	str	r5, [r4, #80]	; 0x50
    cfd8:	eaffffce 	b	cf18 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x118>
    cfdc:	e1a01006 	mov	r1, r6
    cfe0:	e5940018 	ldr	r0, [r4, #24]
    cfe4:	eb000664 	bl	e97c <CUSBEndpoint::GetNextPID(bool)>
    cfe8:	e3500000 	cmp	r0, #0
    cfec:	e1a00005 	mov	r0, r5
    cff0:	0a000021 	beq	d07c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x27c>
    cff4:	eb00079b 	bl	ee68 <CUSBRequest::GetBuffer()>
    cff8:	e5840048 	str	r0, [r4, #72]	; 0x48
    cffc:	e1a00005 	mov	r0, r5
    d000:	eb0007ab 	bl	eeb4 <CUSBRequest::GetBufLen() const>
    d004:	e1a05000 	mov	r5, r0
    d008:	e5840024 	str	r0, [r4, #36]	; 0x24
    d00c:	e5946020 	ldr	r6, [r4, #32]
    d010:	e2460001 	sub	r0, r6, #1
    d014:	e0800005 	add	r0, r0, r5
    d018:	e1a01006 	mov	r1, r6
    d01c:	eb005cae 	bl	242dc <__aeabi_uidiv>
    d020:	e5d43010 	ldrb	r3, [r4, #16]
    d024:	e5840028 	str	r0, [r4, #40]	; 0x28
    d028:	e3530000 	cmp	r3, #0
    d02c:	0a000017 	beq	d090 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x290>
    d030:	e1560005 	cmp	r6, r5
    d034:	31a05006 	movcc	r5, r6
    d038:	e3a03001 	mov	r3, #1
    d03c:	e5940048 	ldr	r0, [r4, #72]	; 0x48
    d040:	e584502c 	str	r5, [r4, #44]	; 0x2c
    d044:	e5843030 	str	r3, [r4, #48]	; 0x30
    d048:	e3500000 	cmp	r0, #0
    d04c:	1affffa3 	bne	cee0 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0xe0>
    d050:	e59f00b0 	ldr	r0, [pc, #176]	; d108 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x308>
    d054:	e3a0206c 	mov	r2, #108	; 0x6c
    d058:	e59f1098 	ldr	r1, [pc, #152]	; d0f8 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2f8>
    d05c:	eb003685 	bl	1aa78 <assertion_failed>
    d060:	e5940048 	ldr	r0, [r4, #72]	; 0x48
    d064:	eaffff9d 	b	cee0 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0xe0>
    d068:	e3a0206d 	mov	r2, #109	; 0x6d
    d06c:	e59f1084 	ldr	r1, [pc, #132]	; d0f8 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2f8>
    d070:	e59f0094 	ldr	r0, [pc, #148]	; d10c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x30c>
    d074:	eb00367f 	bl	1aa78 <assertion_failed>
    d078:	eaffff9a 	b	cee8 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0xe8>
    d07c:	eb000762 	bl	ee0c <CUSBRequest::GetSetupData()>
    d080:	e3a05008 	mov	r5, #8
    d084:	e5840048 	str	r0, [r4, #72]	; 0x48
    d088:	e5845024 	str	r5, [r4, #36]	; 0x24
    d08c:	eaffffde 	b	d00c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x20c>
    d090:	e5840030 	str	r0, [r4, #48]	; 0x30
    d094:	e584502c 	str	r5, [r4, #44]	; 0x2c
    d098:	e5940048 	ldr	r0, [r4, #72]	; 0x48
    d09c:	eaffffe9 	b	d048 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x248>
    d0a0:	e3a0208b 	mov	r2, #139	; 0x8b
    d0a4:	e59f104c 	ldr	r1, [pc, #76]	; d0f8 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2f8>
    d0a8:	e59f0060 	ldr	r0, [pc, #96]	; d110 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x310>
    d0ac:	eb003671 	bl	1aa78 <assertion_failed>
    d0b0:	eaffffbe 	b	cfb0 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x1b0>
    d0b4:	e3a02031 	mov	r2, #49	; 0x31
    d0b8:	e59f1038 	ldr	r1, [pc, #56]	; d0f8 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2f8>
    d0bc:	e59f0050 	ldr	r0, [pc, #80]	; d114 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x314>
    d0c0:	eb00366c 	bl	1aa78 <assertion_failed>
    d0c4:	eaffff61 	b	ce50 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x50>
    d0c8:	e59f0048 	ldr	r0, [pc, #72]	; d118 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x318>
    d0cc:	e3a02034 	mov	r2, #52	; 0x34
    d0d0:	e59f1020 	ldr	r1, [pc, #32]	; d0f8 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2f8>
    d0d4:	eb003667 	bl	1aa78 <assertion_failed>
    d0d8:	e5940018 	ldr	r0, [r4, #24]
    d0dc:	eaffff60 	b	ce64 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x64>
    d0e0:	e59f0034 	ldr	r0, [pc, #52]	; d11c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x31c>
    d0e4:	e3a02036 	mov	r2, #54	; 0x36
    d0e8:	e59f1008 	ldr	r1, [pc, #8]	; d0f8 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2f8>
    d0ec:	eb003661 	bl	1aa78 <assertion_failed>
    d0f0:	e5940014 	ldr	r0, [r4, #20]
    d0f4:	eaffff5e 	b	ce74 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x74>
    d0f8:	00024d50 	.word	0x00024d50
    d0fc:	00024e30 	.word	0x00024e30
    d100:	00024e84 	.word	0x00024e84
    d104:	10624dd3 	.word	0x10624dd3
    d108:	00024e44 	.word	0x00024e44
    d10c:	00024e5c 	.word	0x00024e5c
    d110:	00024eb8 	.word	0x00024eb8
    d114:	00024e14 	.word	0x00024e14
    d118:	00024e00 	.word	0x00024e00
    d11c:	00024e20 	.word	0x00024e20

0000d120 <CDWHCITransferStageData::GetDeviceAddress() const>:
    d120:	e5903014 	ldr	r3, [r0, #20]
    d124:	e3530000 	cmp	r3, #0
    d128:	0a000001 	beq	d134 <CDWHCITransferStageData::GetDeviceAddress() const+0x14>
    d12c:	e1a00003 	mov	r0, r3
    d130:	ea00028c 	b	db68 <CUSBDevice::GetAddress() const>
    d134:	e92d4010 	push	{r4, lr}
    d138:	e1a04000 	mov	r4, r0
    d13c:	e59f2018 	ldr	r2, [pc, #24]	; d15c <CDWHCITransferStageData::GetDeviceAddress() const+0x3c>
    d140:	e59f0018 	ldr	r0, [pc, #24]	; d160 <CDWHCITransferStageData::GetDeviceAddress() const+0x40>
    d144:	e59f1018 	ldr	r1, [pc, #24]	; d164 <CDWHCITransferStageData::GetDeviceAddress() const+0x44>
    d148:	eb00364a 	bl	1aa78 <assertion_failed>
    d14c:	e5943014 	ldr	r3, [r4, #20]
    d150:	e8bd4010 	pop	{r4, lr}
    d154:	e1a00003 	mov	r0, r3
    d158:	ea000282 	b	db68 <CUSBDevice::GetAddress() const>
    d15c:	00000111 	.word	0x00000111
    d160:	00024e20 	.word	0x00024e20
    d164:	00024d50 	.word	0x00024d50

0000d168 <CDWHCITransferStageData::GetEndpointType() const>:
    d168:	e92d4010 	push	{r4, lr}
    d16c:	e1a04000 	mov	r4, r0
    d170:	e5900018 	ldr	r0, [r0, #24]
    d174:	e3500000 	cmp	r0, #0
    d178:	0a00000f 	beq	d1bc <CDWHCITransferStageData::GetEndpointType() const+0x54>
    d17c:	eb0005e9 	bl	e928 <CUSBEndpoint::GetType() const>
    d180:	e3500001 	cmp	r0, #1
    d184:	0a00000a 	beq	d1b4 <CDWHCITransferStageData::GetEndpointType() const+0x4c>
    d188:	3a000007 	bcc	d1ac <CDWHCITransferStageData::GetEndpointType() const+0x44>
    d18c:	e3500002 	cmp	r0, #2
    d190:	1a000001 	bne	d19c <CDWHCITransferStageData::GetEndpointType() const+0x34>
    d194:	e3a00003 	mov	r0, #3
    d198:	e8bd8010 	pop	{r4, pc}
    d19c:	e59f2030 	ldr	r2, [pc, #48]	; d1d4 <CDWHCITransferStageData::GetEndpointType() const+0x6c>
    d1a0:	e59f1030 	ldr	r1, [pc, #48]	; d1d8 <CDWHCITransferStageData::GetEndpointType() const+0x70>
    d1a4:	e59f0030 	ldr	r0, [pc, #48]	; d1dc <CDWHCITransferStageData::GetEndpointType() const+0x74>
    d1a8:	eb003632 	bl	1aa78 <assertion_failed>
    d1ac:	e3a00000 	mov	r0, #0
    d1b0:	e8bd8010 	pop	{r4, pc}
    d1b4:	e3a00002 	mov	r0, #2
    d1b8:	e8bd8010 	pop	{r4, pc}
    d1bc:	e59f001c 	ldr	r0, [pc, #28]	; d1e0 <CDWHCITransferStageData::GetEndpointType() const+0x78>
    d1c0:	e59f201c 	ldr	r2, [pc, #28]	; d1e4 <CDWHCITransferStageData::GetEndpointType() const+0x7c>
    d1c4:	e59f100c 	ldr	r1, [pc, #12]	; d1d8 <CDWHCITransferStageData::GetEndpointType() const+0x70>
    d1c8:	eb00362a 	bl	1aa78 <assertion_failed>
    d1cc:	e5940018 	ldr	r0, [r4, #24]
    d1d0:	eaffffe9 	b	d17c <CDWHCITransferStageData::GetEndpointType() const+0x14>
    d1d4:	0000012a 	.word	0x0000012a
    d1d8:	00024d50 	.word	0x00024d50
    d1dc:	00025034 	.word	0x00025034
    d1e0:	00024e00 	.word	0x00024e00
    d1e4:	00000117 	.word	0x00000117

0000d1e8 <CDWHCITransferStageData::GetEndpointNumber() const>:
    d1e8:	e5903018 	ldr	r3, [r0, #24]
    d1ec:	e3530000 	cmp	r3, #0
    d1f0:	0a000001 	beq	d1fc <CDWHCITransferStageData::GetEndpointNumber() const+0x14>
    d1f4:	e1a00003 	mov	r0, r3
    d1f8:	ea0005c8 	b	e920 <CUSBEndpoint::GetNumber() const>
    d1fc:	e92d4010 	push	{r4, lr}
    d200:	e1a04000 	mov	r4, r0
    d204:	e59f2018 	ldr	r2, [pc, #24]	; d224 <CDWHCITransferStageData::GetEndpointNumber() const+0x3c>
    d208:	e59f0018 	ldr	r0, [pc, #24]	; d228 <CDWHCITransferStageData::GetEndpointNumber() const+0x40>
    d20c:	e59f1018 	ldr	r1, [pc, #24]	; d22c <CDWHCITransferStageData::GetEndpointNumber() const+0x44>
    d210:	eb003618 	bl	1aa78 <assertion_failed>
    d214:	e5943018 	ldr	r3, [r4, #24]
    d218:	e8bd4010 	pop	{r4, lr}
    d21c:	e1a00003 	mov	r0, r3
    d220:	ea0005be 	b	e920 <CUSBEndpoint::GetNumber() const>
    d224:	00000133 	.word	0x00000133
    d228:	00024e00 	.word	0x00024e00
    d22c:	00024d50 	.word	0x00024d50

0000d230 <CDWHCITransferStageData::GetMaxPacketSize() const>:
    d230:	e5900020 	ldr	r0, [r0, #32]
    d234:	e12fff1e 	bx	lr

0000d238 <CDWHCITransferStageData::GetSpeed() const>:
    d238:	e5d0001c 	ldrb	r0, [r0, #28]
    d23c:	e12fff1e 	bx	lr

0000d240 <CDWHCITransferStageData::GetPID() const>:
    d240:	e92d4010 	push	{r4, lr}
    d244:	e1a04000 	mov	r4, r0
    d248:	e5900018 	ldr	r0, [r0, #24]
    d24c:	e3500000 	cmp	r0, #0
    d250:	0a000010 	beq	d298 <CDWHCITransferStageData::GetPID() const+0x58>
    d254:	e5d41009 	ldrb	r1, [r4, #9]
    d258:	eb0005c7 	bl	e97c <CUSBEndpoint::GetNextPID(bool)>
    d25c:	e3500001 	cmp	r0, #1
    d260:	0a00000a 	beq	d290 <CDWHCITransferStageData::GetPID() const+0x50>
    d264:	3a000007 	bcc	d288 <CDWHCITransferStageData::GetPID() const+0x48>
    d268:	e3500002 	cmp	r0, #2
    d26c:	08bd8010 	popeq	{r4, pc}
    d270:	e59f2038 	ldr	r2, [pc, #56]	; d2b0 <CDWHCITransferStageData::GetPID() const+0x70>
    d274:	e59f1038 	ldr	r1, [pc, #56]	; d2b4 <CDWHCITransferStageData::GetPID() const+0x74>
    d278:	e59f0038 	ldr	r0, [pc, #56]	; d2b8 <CDWHCITransferStageData::GetPID() const+0x78>
    d27c:	eb0035fd 	bl	1aa78 <assertion_failed>
    d280:	e3a00000 	mov	r0, #0
    d284:	e8bd8010 	pop	{r4, pc}
    d288:	e3a00003 	mov	r0, #3
    d28c:	e8bd8010 	pop	{r4, pc}
    d290:	e3a00000 	mov	r0, #0
    d294:	e8bd8010 	pop	{r4, pc}
    d298:	e59f001c 	ldr	r0, [pc, #28]	; d2bc <CDWHCITransferStageData::GetPID() const+0x7c>
    d29c:	e59f201c 	ldr	r2, [pc, #28]	; d2c0 <CDWHCITransferStageData::GetPID() const+0x80>
    d2a0:	e59f100c 	ldr	r1, [pc, #12]	; d2b4 <CDWHCITransferStageData::GetPID() const+0x74>
    d2a4:	eb0035f3 	bl	1aa78 <assertion_failed>
    d2a8:	e5940018 	ldr	r0, [r4, #24]
    d2ac:	eaffffe8 	b	d254 <CDWHCITransferStageData::GetPID() const+0x14>
    d2b0:	00000156 	.word	0x00000156
    d2b4:	00024d50 	.word	0x00024d50
    d2b8:	00025034 	.word	0x00025034
    d2bc:	00024e00 	.word	0x00024e00
    d2c0:	00000143 	.word	0x00000143

0000d2c4 <CDWHCITransferStageData::IsDirectionIn() const>:
    d2c4:	e5d00008 	ldrb	r0, [r0, #8]
    d2c8:	e12fff1e 	bx	lr

0000d2cc <CDWHCITransferStageData::IsStatusStage() const>:
    d2cc:	e5d00009 	ldrb	r0, [r0, #9]
    d2d0:	e12fff1e 	bx	lr

0000d2d4 <CDWHCITransferStageData::GetDMAAddress() const>:
    d2d4:	e5903048 	ldr	r3, [r0, #72]	; 0x48
    d2d8:	e3530000 	cmp	r3, #0
    d2dc:	0a000001 	beq	d2e8 <CDWHCITransferStageData::GetDMAAddress() const+0x14>
    d2e0:	e1a00003 	mov	r0, r3
    d2e4:	e12fff1e 	bx	lr
    d2e8:	e92d4010 	push	{r4, lr}
    d2ec:	e1a04000 	mov	r4, r0
    d2f0:	e59f2014 	ldr	r2, [pc, #20]	; d30c <CDWHCITransferStageData::GetDMAAddress() const+0x38>
    d2f4:	e59f1014 	ldr	r1, [pc, #20]	; d310 <CDWHCITransferStageData::GetDMAAddress() const+0x3c>
    d2f8:	e59f0014 	ldr	r0, [pc, #20]	; d314 <CDWHCITransferStageData::GetDMAAddress() const+0x40>
    d2fc:	eb0035dd 	bl	1aa78 <assertion_failed>
    d300:	e5943048 	ldr	r3, [r4, #72]	; 0x48
    d304:	e1a00003 	mov	r0, r3
    d308:	e8bd8010 	pop	{r4, pc}
    d30c:	00000169 	.word	0x00000169
    d310:	00024d50 	.word	0x00024d50
    d314:	00024e44 	.word	0x00024e44

0000d318 <CDWHCITransferStageData::GetBytesToTransfer() const>:
    d318:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    d31c:	e12fff1e 	bx	lr

0000d320 <CDWHCITransferStageData::GetPacketsToTransfer() const>:
    d320:	e5900030 	ldr	r0, [r0, #48]	; 0x30
    d324:	e12fff1e 	bx	lr

0000d328 <CDWHCITransferStageData::IsSplit() const>:
    d328:	e5d00010 	ldrb	r0, [r0, #16]
    d32c:	e12fff1e 	bx	lr

0000d330 <CDWHCITransferStageData::IsSplitComplete() const>:
    d330:	e5d03010 	ldrb	r3, [r0, #16]
    d334:	e92d4010 	push	{r4, lr}
    d338:	e3530000 	cmp	r3, #0
    d33c:	e1a04000 	mov	r4, r0
    d340:	1a000003 	bne	d354 <CDWHCITransferStageData::IsSplitComplete() const+0x24>
    d344:	e59f2010 	ldr	r2, [pc, #16]	; d35c <CDWHCITransferStageData::IsSplitComplete() const+0x2c>
    d348:	e59f1010 	ldr	r1, [pc, #16]	; d360 <CDWHCITransferStageData::IsSplitComplete() const+0x30>
    d34c:	e59f0010 	ldr	r0, [pc, #16]	; d364 <CDWHCITransferStageData::IsSplitComplete() const+0x34>
    d350:	eb0035c8 	bl	1aa78 <assertion_failed>
    d354:	e5d40011 	ldrb	r0, [r4, #17]
    d358:	e8bd8010 	pop	{r4, pc}
    d35c:	0000017f 	.word	0x0000017f
    d360:	00024d50 	.word	0x00024d50
    d364:	00024dec 	.word	0x00024dec

0000d368 <CDWHCITransferStageData::GetHubAddress() const>:
    d368:	e5d03010 	ldrb	r3, [r0, #16]
    d36c:	e92d4010 	push	{r4, lr}
    d370:	e3530000 	cmp	r3, #0
    d374:	e1a04000 	mov	r4, r0
    d378:	0a000004 	beq	d390 <CDWHCITransferStageData::GetHubAddress() const+0x28>
    d37c:	e5940014 	ldr	r0, [r4, #20]
    d380:	e3500000 	cmp	r0, #0
    d384:	0a000008 	beq	d3ac <CDWHCITransferStageData::GetHubAddress() const+0x44>
    d388:	e8bd4010 	pop	{r4, lr}
    d38c:	ea0001fb 	b	db80 <CUSBDevice::GetHubAddress() const>
    d390:	e59f0030 	ldr	r0, [pc, #48]	; d3c8 <CDWHCITransferStageData::GetHubAddress() const+0x60>
    d394:	e59f2030 	ldr	r2, [pc, #48]	; d3cc <CDWHCITransferStageData::GetHubAddress() const+0x64>
    d398:	e59f1030 	ldr	r1, [pc, #48]	; d3d0 <CDWHCITransferStageData::GetHubAddress() const+0x68>
    d39c:	eb0035b5 	bl	1aa78 <assertion_failed>
    d3a0:	e5940014 	ldr	r0, [r4, #20]
    d3a4:	e3500000 	cmp	r0, #0
    d3a8:	1afffff6 	bne	d388 <CDWHCITransferStageData::GetHubAddress() const+0x20>
    d3ac:	e59f0020 	ldr	r0, [pc, #32]	; d3d4 <CDWHCITransferStageData::GetHubAddress() const+0x6c>
    d3b0:	e3a02f62 	mov	r2, #392	; 0x188
    d3b4:	e59f1014 	ldr	r1, [pc, #20]	; d3d0 <CDWHCITransferStageData::GetHubAddress() const+0x68>
    d3b8:	eb0035ae 	bl	1aa78 <assertion_failed>
    d3bc:	e5940014 	ldr	r0, [r4, #20]
    d3c0:	e8bd4010 	pop	{r4, lr}
    d3c4:	ea0001ed 	b	db80 <CUSBDevice::GetHubAddress() const>
    d3c8:	00024dec 	.word	0x00024dec
    d3cc:	00000186 	.word	0x00000186
    d3d0:	00024d50 	.word	0x00024d50
    d3d4:	00024e20 	.word	0x00024e20

0000d3d8 <CDWHCITransferStageData::GetHubPortAddress() const>:
    d3d8:	e5d03010 	ldrb	r3, [r0, #16]
    d3dc:	e92d4010 	push	{r4, lr}
    d3e0:	e3530000 	cmp	r3, #0
    d3e4:	e1a04000 	mov	r4, r0
    d3e8:	0a000004 	beq	d400 <CDWHCITransferStageData::GetHubPortAddress() const+0x28>
    d3ec:	e5940014 	ldr	r0, [r4, #20]
    d3f0:	e3500000 	cmp	r0, #0
    d3f4:	0a000008 	beq	d41c <CDWHCITransferStageData::GetHubPortAddress() const+0x44>
    d3f8:	e8bd4010 	pop	{r4, lr}
    d3fc:	ea0001e1 	b	db88 <CUSBDevice::GetHubPortNumber() const>
    d400:	e59f0030 	ldr	r0, [pc, #48]	; d438 <CDWHCITransferStageData::GetHubPortAddress() const+0x60>
    d404:	e59f2030 	ldr	r2, [pc, #48]	; d43c <CDWHCITransferStageData::GetHubPortAddress() const+0x64>
    d408:	e59f1030 	ldr	r1, [pc, #48]	; d440 <CDWHCITransferStageData::GetHubPortAddress() const+0x68>
    d40c:	eb003599 	bl	1aa78 <assertion_failed>
    d410:	e5940014 	ldr	r0, [r4, #20]
    d414:	e3500000 	cmp	r0, #0
    d418:	1afffff6 	bne	d3f8 <CDWHCITransferStageData::GetHubPortAddress() const+0x20>
    d41c:	e59f0020 	ldr	r0, [pc, #32]	; d444 <CDWHCITransferStageData::GetHubPortAddress() const+0x6c>
    d420:	e3a02e19 	mov	r2, #400	; 0x190
    d424:	e59f1014 	ldr	r1, [pc, #20]	; d440 <CDWHCITransferStageData::GetHubPortAddress() const+0x68>
    d428:	eb003592 	bl	1aa78 <assertion_failed>
    d42c:	e5940014 	ldr	r0, [r4, #20]
    d430:	e8bd4010 	pop	{r4, lr}
    d434:	ea0001d3 	b	db88 <CUSBDevice::GetHubPortNumber() const>
    d438:	00024dec 	.word	0x00024dec
    d43c:	0000018e 	.word	0x0000018e
    d440:	00024d50 	.word	0x00024d50
    d444:	00024e20 	.word	0x00024e20

0000d448 <CDWHCITransferStageData::GetSplitPosition() const>:
    d448:	e3a00003 	mov	r0, #3
    d44c:	e12fff1e 	bx	lr

0000d450 <CDWHCITransferStageData::GetStatusMask() const>:
    d450:	e5d03010 	ldrb	r3, [r0, #16]
    d454:	e3530000 	cmp	r3, #0
    d458:	0a000001 	beq	d464 <CDWHCITransferStageData::GetStatusMask() const+0x14>
    d45c:	e59f0018 	ldr	r0, [pc, #24]	; d47c <CDWHCITransferStageData::GetStatusMask() const+0x2c>
    d460:	e12fff1e 	bx	lr
    d464:	e92d4010 	push	{r4, lr}
    d468:	ebfffe50 	bl	cdb0 <CDWHCITransferStageData::IsPeriodic() const>
    d46c:	e3500000 	cmp	r0, #0
    d470:	059f0008 	ldreq	r0, [pc, #8]	; d480 <CDWHCITransferStageData::GetStatusMask() const+0x30>
    d474:	159f0000 	ldrne	r0, [pc]	; d47c <CDWHCITransferStageData::GetStatusMask() const+0x2c>
    d478:	e8bd8010 	pop	{r4, pc}
    d47c:	000007ff 	.word	0x000007ff
    d480:	0000078f 	.word	0x0000078f

0000d484 <CDWHCITransferStageData::GetTransactionStatus() const>:
    d484:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    d488:	e3530000 	cmp	r3, #0
    d48c:	0a000001 	beq	d498 <CDWHCITransferStageData::GetTransactionStatus() const+0x14>
    d490:	e1a00003 	mov	r0, r3
    d494:	e12fff1e 	bx	lr
    d498:	e92d4010 	push	{r4, lr}
    d49c:	e1a04000 	mov	r4, r0
    d4a0:	e59f2014 	ldr	r2, [pc, #20]	; d4bc <CDWHCITransferStageData::GetTransactionStatus() const+0x38>
    d4a4:	e59f1014 	ldr	r1, [pc, #20]	; d4c0 <CDWHCITransferStageData::GetTransactionStatus() const+0x3c>
    d4a8:	e59f0014 	ldr	r0, [pc, #20]	; d4c4 <CDWHCITransferStageData::GetTransactionStatus() const+0x40>
    d4ac:	eb003571 	bl	1aa78 <assertion_failed>
    d4b0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    d4b4:	e1a00003 	mov	r0, r3
    d4b8:	e8bd8010 	pop	{r4, pc}
    d4bc:	000001ad 	.word	0x000001ad
    d4c0:	00024d50 	.word	0x00024d50
    d4c4:	00024ecc 	.word	0x00024ecc

0000d4c8 <CDWHCITransferStageData::IsStageComplete() const>:
    d4c8:	e5900028 	ldr	r0, [r0, #40]	; 0x28
    d4cc:	e16f0f10 	clz	r0, r0
    d4d0:	e1a002a0 	lsr	r0, r0, #5
    d4d4:	e12fff1e 	bx	lr

0000d4d8 <CDWHCITransferStageData::GetResultLen() const>:
    d4d8:	e5902034 	ldr	r2, [r0, #52]	; 0x34
    d4dc:	e5900024 	ldr	r0, [r0, #36]	; 0x24
    d4e0:	e1520000 	cmp	r2, r0
    d4e4:	31a00002 	movcc	r0, r2
    d4e8:	e12fff1e 	bx	lr

0000d4ec <CDWHCITransferStageData::IsTimeout() const>:
    d4ec:	e590300c 	ldr	r3, [r0, #12]
    d4f0:	e3530000 	cmp	r3, #0
    d4f4:	1a000001 	bne	d500 <CDWHCITransferStageData::IsTimeout() const+0x14>
    d4f8:	e1a00003 	mov	r0, r3
    d4fc:	e12fff1e 	bx	lr
    d500:	e92d4010 	push	{r4, lr}
    d504:	e1a04000 	mov	r4, r0
    d508:	eb0051a2 	bl	21b98 <CTimer::Get()>
    d50c:	eb004eda 	bl	2107c <CTimer::GetTicks() const>
    d510:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    d514:	e594200c 	ldr	r2, [r4, #12]
    d518:	e0400003 	sub	r0, r0, r3
    d51c:	e1500002 	cmp	r0, r2
    d520:	33a00000 	movcc	r0, #0
    d524:	23a00001 	movcs	r0, #1
    d528:	e8bd8010 	pop	{r4, pc}

0000d52c <CDWHCITransferStageData::GetURB() const>:
    d52c:	e5903004 	ldr	r3, [r0, #4]
    d530:	e3530000 	cmp	r3, #0
    d534:	0a000001 	beq	d540 <CDWHCITransferStageData::GetURB() const+0x14>
    d538:	e1a00003 	mov	r0, r3
    d53c:	e12fff1e 	bx	lr
    d540:	e92d4010 	push	{r4, lr}
    d544:	e1a04000 	mov	r4, r0
    d548:	e3a02f73 	mov	r2, #460	; 0x1cc
    d54c:	e59f1010 	ldr	r1, [pc, #16]	; d564 <CDWHCITransferStageData::GetURB() const+0x38>
    d550:	e59f0010 	ldr	r0, [pc, #16]	; d568 <CDWHCITransferStageData::GetURB() const+0x3c>
    d554:	eb003547 	bl	1aa78 <assertion_failed>
    d558:	e5943004 	ldr	r3, [r4, #4]
    d55c:	e1a00003 	mov	r0, r3
    d560:	e8bd8010 	pop	{r4, pc}
    d564:	00024d50 	.word	0x00024d50
    d568:	00024e14 	.word	0x00024e14

0000d56c <CDWHCITransferStageData::GetFrameScheduler() const>:
    d56c:	e5900050 	ldr	r0, [r0, #80]	; 0x50
    d570:	e12fff1e 	bx	lr

0000d574 <CDWHCITransferStageData::operator new(unsigned int)>:
    d574:	e3500054 	cmp	r0, #84	; 0x54
    d578:	e92d4010 	push	{r4, lr}
    d57c:	0a000003 	beq	d590 <CDWHCITransferStageData::operator new(unsigned int)+0x1c>
    d580:	e59f203c 	ldr	r2, [pc, #60]	; d5c4 <CDWHCITransferStageData::operator new(unsigned int)+0x50>
    d584:	e59f103c 	ldr	r1, [pc, #60]	; d5c8 <CDWHCITransferStageData::operator new(unsigned int)+0x54>
    d588:	e59f003c 	ldr	r0, [pc, #60]	; d5cc <CDWHCITransferStageData::operator new(unsigned int)+0x58>
    d58c:	eb003539 	bl	1aa78 <assertion_failed>
    d590:	e59f4038 	ldr	r4, [pc, #56]	; d5d0 <CDWHCITransferStageData::operator new(unsigned int)+0x5c>
    d594:	e5940000 	ldr	r0, [r4]
    d598:	e3500000 	cmp	r0, #0
    d59c:	0a000001 	beq	d5a8 <CDWHCITransferStageData::operator new(unsigned int)+0x34>
    d5a0:	e8bd4010 	pop	{r4, lr}
    d5a4:	ea003651 	b	1aef0 <CClassAllocator::Allocate()>
    d5a8:	e59f0024 	ldr	r0, [pc, #36]	; d5d4 <CDWHCITransferStageData::operator new(unsigned int)+0x60>
    d5ac:	e59f2010 	ldr	r2, [pc, #16]	; d5c4 <CDWHCITransferStageData::operator new(unsigned int)+0x50>
    d5b0:	e59f1010 	ldr	r1, [pc, #16]	; d5c8 <CDWHCITransferStageData::operator new(unsigned int)+0x54>
    d5b4:	eb00352f 	bl	1aa78 <assertion_failed>
    d5b8:	e5940000 	ldr	r0, [r4]
    d5bc:	e8bd4010 	pop	{r4, lr}
    d5c0:	ea00364a 	b	1aef0 <CClassAllocator::Allocate()>
    d5c4:	000001d5 	.word	0x000001d5
    d5c8:	00024d50 	.word	0x00024d50
    d5cc:	00024ee8 	.word	0x00024ee8
    d5d0:	0002b938 	.word	0x0002b938
    d5d4:	00024f14 	.word	0x00024f14

0000d5d8 <CDWHCITransferStageData::operator delete(void*, unsigned int)>:
    d5d8:	e3510054 	cmp	r1, #84	; 0x54
    d5dc:	e92d4070 	push	{r4, r5, r6, lr}
    d5e0:	e1a05000 	mov	r5, r0
    d5e4:	0a000003 	beq	d5f8 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x20>
    d5e8:	e59f2044 	ldr	r2, [pc, #68]	; d634 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x5c>
    d5ec:	e59f1044 	ldr	r1, [pc, #68]	; d638 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x60>
    d5f0:	e59f0044 	ldr	r0, [pc, #68]	; d63c <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x64>
    d5f4:	eb00351f 	bl	1aa78 <assertion_failed>
    d5f8:	e59f4040 	ldr	r4, [pc, #64]	; d640 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x68>
    d5fc:	e5940000 	ldr	r0, [r4]
    d600:	e3500000 	cmp	r0, #0
    d604:	0a000002 	beq	d614 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x3c>
    d608:	e1a01005 	mov	r1, r5
    d60c:	e8bd4070 	pop	{r4, r5, r6, lr}
    d610:	ea003671 	b	1afdc <CClassAllocator::Free(void*)>
    d614:	e59f101c 	ldr	r1, [pc, #28]	; d638 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x60>
    d618:	e59f0024 	ldr	r0, [pc, #36]	; d644 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x6c>
    d61c:	e59f2010 	ldr	r2, [pc, #16]	; d634 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x5c>
    d620:	eb003514 	bl	1aa78 <assertion_failed>
    d624:	e5940000 	ldr	r0, [r4]
    d628:	e1a01005 	mov	r1, r5
    d62c:	e8bd4070 	pop	{r4, r5, r6, lr}
    d630:	ea003669 	b	1afdc <CClassAllocator::Free(void*)>
    d634:	000001d5 	.word	0x000001d5
    d638:	00024d50 	.word	0x00024d50
    d63c:	00024ee8 	.word	0x00024ee8
    d640:	0002b938 	.word	0x0002b938
    d644:	00024f14 	.word	0x00024f14

0000d648 <CDWHCITransferStageData::InitAllocator(unsigned int)>:
    d648:	e92d4070 	push	{r4, r5, r6, lr}
    d64c:	e59f4040 	ldr	r4, [pc, #64]	; d694 <CDWHCITransferStageData::InitAllocator(unsigned int)+0x4c>
    d650:	e1a06000 	mov	r6, r0
    d654:	e5943000 	ldr	r3, [r4]
    d658:	e3530000 	cmp	r3, #0
    d65c:	0a000003 	beq	d670 <CDWHCITransferStageData::InitAllocator(unsigned int)+0x28>
    d660:	e59f2030 	ldr	r2, [pc, #48]	; d698 <CDWHCITransferStageData::InitAllocator(unsigned int)+0x50>
    d664:	e59f1030 	ldr	r1, [pc, #48]	; d69c <CDWHCITransferStageData::InitAllocator(unsigned int)+0x54>
    d668:	e59f0030 	ldr	r0, [pc, #48]	; d6a0 <CDWHCITransferStageData::InitAllocator(unsigned int)+0x58>
    d66c:	eb003501 	bl	1aa78 <assertion_failed>
    d670:	e3a0001c 	mov	r0, #28
    d674:	eb0055c4 	bl	22d8c <operator new(unsigned int)>
    d678:	e1a05000 	mov	r5, r0
    d67c:	e1a02006 	mov	r2, r6
    d680:	e59f301c 	ldr	r3, [pc, #28]	; d6a4 <CDWHCITransferStageData::InitAllocator(unsigned int)+0x5c>
    d684:	e3a01054 	mov	r1, #84	; 0x54
    d688:	eb0035ff 	bl	1ae8c <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
    d68c:	e5845000 	str	r5, [r4]
    d690:	e8bd8070 	pop	{r4, r5, r6, pc}
    d694:	0002b938 	.word	0x0002b938
    d698:	000001d5 	.word	0x000001d5
    d69c:	00024d50 	.word	0x00024d50
    d6a0:	00024f28 	.word	0x00024f28
    d6a4:	00024f3c 	.word	0x00024f3c

0000d6a8 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)>:
    d6a8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    d6ac:	e59f4054 	ldr	r4, [pc, #84]	; d708 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)+0x60>
    d6b0:	e24dd00c 	sub	sp, sp, #12
    d6b4:	e5943000 	ldr	r3, [r4]
    d6b8:	e1a06000 	mov	r6, r0
    d6bc:	e3530000 	cmp	r3, #0
    d6c0:	e1a07001 	mov	r7, r1
    d6c4:	0a000003 	beq	d6d8 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)+0x30>
    d6c8:	e59f203c 	ldr	r2, [pc, #60]	; d70c <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)+0x64>
    d6cc:	e59f103c 	ldr	r1, [pc, #60]	; d710 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)+0x68>
    d6d0:	e59f003c 	ldr	r0, [pc, #60]	; d714 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)+0x6c>
    d6d4:	eb0034e7 	bl	1aa78 <assertion_failed>
    d6d8:	e3a0001c 	mov	r0, #28
    d6dc:	eb0055aa 	bl	22d8c <operator new(unsigned int)>
    d6e0:	e59f1030 	ldr	r1, [pc, #48]	; d718 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)+0x70>
    d6e4:	e1a03007 	mov	r3, r7
    d6e8:	e58d1000 	str	r1, [sp]
    d6ec:	e1a02006 	mov	r2, r6
    d6f0:	e3a01054 	mov	r1, #84	; 0x54
    d6f4:	e1a05000 	mov	r5, r0
    d6f8:	eb0035ef 	bl	1aebc <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
    d6fc:	e5845000 	str	r5, [r4]
    d700:	e28dd00c 	add	sp, sp, #12
    d704:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    d708:	0002b938 	.word	0x0002b938
    d70c:	000001d5 	.word	0x000001d5
    d710:	00024d50 	.word	0x00024d50
    d714:	00024f28 	.word	0x00024f28
    d718:	00024f3c 	.word	0x00024f3c

0000d71c <CUSBDevice::~CUSBDevice()>:
    d71c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d720:	e1a04000 	mov	r4, r0
    d724:	e1a07000 	mov	r7, r0
    d728:	e3a06000 	mov	r6, #0
    d72c:	e59f3098 	ldr	r3, [pc, #152]	; d7cc <CUSBDevice::~CUSBDevice()+0xb0>
    d730:	e2805044 	add	r5, r0, #68	; 0x44
    d734:	e484301c 	str	r3, [r4], #28
    d738:	e5940004 	ldr	r0, [r4, #4]
    d73c:	e3500000 	cmp	r0, #0
    d740:	0a000002 	beq	d750 <CUSBDevice::~CUSBDevice()+0x34>
    d744:	e5903000 	ldr	r3, [r0]
    d748:	e5933004 	ldr	r3, [r3, #4]
    d74c:	e12fff33 	blx	r3
    d750:	e5a46004 	str	r6, [r4, #4]!
    d754:	e1540005 	cmp	r4, r5
    d758:	1afffff6 	bne	d738 <CUSBDevice::~CUSBDevice()+0x1c>
    d75c:	e597401c 	ldr	r4, [r7, #28]
    d760:	e3540000 	cmp	r4, #0
    d764:	0a000004 	beq	d77c <CUSBDevice::~CUSBDevice()+0x60>
    d768:	e1a00004 	mov	r0, r4
    d76c:	eb002595 	bl	16dc8 <CUSBConfigurationParser::~CUSBConfigurationParser()>
    d770:	e1a00004 	mov	r0, r4
    d774:	e3a0101c 	mov	r1, #28
    d778:	eb005587 	bl	22d9c <operator delete(void*, unsigned int)>
    d77c:	e3a04000 	mov	r4, #0
    d780:	e3a01009 	mov	r1, #9
    d784:	e5970018 	ldr	r0, [r7, #24]
    d788:	e587401c 	str	r4, [r7, #28]
    d78c:	eb005582 	bl	22d9c <operator delete(void*, unsigned int)>
    d790:	e5874018 	str	r4, [r7, #24]
    d794:	e3a01012 	mov	r1, #18
    d798:	e5970014 	ldr	r0, [r7, #20]
    d79c:	eb00557e 	bl	22d9c <operator delete(void*, unsigned int)>
    d7a0:	e597500c 	ldr	r5, [r7, #12]
    d7a4:	e5874014 	str	r4, [r7, #20]
    d7a8:	e1550004 	cmp	r5, r4
    d7ac:	0a000004 	beq	d7c4 <CUSBDevice::~CUSBDevice()+0xa8>
    d7b0:	e1a00005 	mov	r0, r5
    d7b4:	eb000448 	bl	e8dc <CUSBEndpoint::~CUSBEndpoint()>
    d7b8:	e1a00005 	mov	r0, r5
    d7bc:	e3a01014 	mov	r1, #20
    d7c0:	eb005575 	bl	22d9c <operator delete(void*, unsigned int)>
    d7c4:	e1a00007 	mov	r0, r7
    d7c8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    d7cc:	00024f5c 	.word	0x00024f5c

0000d7d0 <CUSBDevice::~CUSBDevice()>:
    d7d0:	e92d4010 	push	{r4, lr}
    d7d4:	e1a04000 	mov	r4, r0
    d7d8:	ebffffcf 	bl	d71c <CUSBDevice::~CUSBDevice()>
    d7dc:	e1a00004 	mov	r0, r4
    d7e0:	e3a01048 	mov	r1, #72	; 0x48
    d7e4:	eb00556c 	bl	22d9c <operator delete(void*, unsigned int)>
    d7e8:	e1a00004 	mov	r0, r4
    d7ec:	e8bd8010 	pop	{r4, pc}

0000d7f0 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, bool, unsigned char, unsigned char)>:
    d7f0:	e92d4070 	push	{r4, r5, r6, lr}
    d7f4:	e1a04000 	mov	r4, r0
    d7f8:	e3a00000 	mov	r0, #0
    d7fc:	e59fe0bc 	ldr	lr, [pc, #188]	; d8c0 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, bool, unsigned char, unsigned char)+0xd0>
    d800:	e5ddc010 	ldrb	ip, [sp, #16]
    d804:	e5dd5014 	ldrb	r5, [sp, #20]
    d808:	e1510000 	cmp	r1, r0
    d80c:	e5841004 	str	r1, [r4, #4]
    d810:	e5c42009 	strb	r2, [r4, #9]
    d814:	e5c43010 	strb	r3, [r4, #16]
    d818:	e584e000 	str	lr, [r4]
    d81c:	e5c4c011 	strb	ip, [r4, #17]
    d820:	e5c40008 	strb	r0, [r4, #8]
    d824:	e584000c 	str	r0, [r4, #12]
    d828:	e5840014 	str	r0, [r4, #20]
    d82c:	e5840018 	str	r0, [r4, #24]
    d830:	e584001c 	str	r0, [r4, #28]
    d834:	e5c45012 	strb	r5, [r4, #18]
    d838:	0a000014 	beq	d890 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, bool, unsigned char, unsigned char)+0xa0>
    d83c:	e3a00014 	mov	r0, #20
    d840:	eb005551 	bl	22d8c <operator new(unsigned int)>
    d844:	e1a06000 	mov	r6, r0
    d848:	e1a01004 	mov	r1, r4
    d84c:	eb000378 	bl	e634 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)>
    d850:	e3550000 	cmp	r5, #0
    d854:	e584600c 	str	r6, [r4, #12]
    d858:	0a000007 	beq	d87c <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, bool, unsigned char, unsigned char)+0x8c>
    d85c:	e3a01000 	mov	r1, #0
    d860:	e284301c 	add	r3, r4, #28
    d864:	e2842044 	add	r2, r4, #68	; 0x44
    d868:	e5a31004 	str	r1, [r3, #4]!
    d86c:	e1520003 	cmp	r2, r3
    d870:	1afffffc 	bne	d868 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, bool, unsigned char, unsigned char)+0x78>
    d874:	e1a00004 	mov	r0, r4
    d878:	e8bd8070 	pop	{r4, r5, r6, pc}
    d87c:	e3a02037 	mov	r2, #55	; 0x37
    d880:	e59f103c 	ldr	r1, [pc, #60]	; d8c4 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, bool, unsigned char, unsigned char)+0xd4>
    d884:	e59f003c 	ldr	r0, [pc, #60]	; d8c8 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, bool, unsigned char, unsigned char)+0xd8>
    d888:	eb00347a 	bl	1aa78 <assertion_failed>
    d88c:	eafffff2 	b	d85c <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, bool, unsigned char, unsigned char)+0x6c>
    d890:	e3a02031 	mov	r2, #49	; 0x31
    d894:	e59f1028 	ldr	r1, [pc, #40]	; d8c4 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, bool, unsigned char, unsigned char)+0xd4>
    d898:	e59f002c 	ldr	r0, [pc, #44]	; d8cc <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, bool, unsigned char, unsigned char)+0xdc>
    d89c:	eb003475 	bl	1aa78 <assertion_failed>
    d8a0:	e594300c 	ldr	r3, [r4, #12]
    d8a4:	e3530000 	cmp	r3, #0
    d8a8:	0affffe3 	beq	d83c <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, bool, unsigned char, unsigned char)+0x4c>
    d8ac:	e3a02033 	mov	r2, #51	; 0x33
    d8b0:	e59f100c 	ldr	r1, [pc, #12]	; d8c4 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, bool, unsigned char, unsigned char)+0xd4>
    d8b4:	e59f0014 	ldr	r0, [pc, #20]	; d8d0 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, bool, unsigned char, unsigned char)+0xe0>
    d8b8:	eb00346e 	bl	1aa78 <assertion_failed>
    d8bc:	eaffffde 	b	d83c <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, bool, unsigned char, unsigned char)+0x4c>
    d8c0:	00024f5c 	.word	0x00024f5c
    d8c4:	00024f74 	.word	0x00024f74
    d8c8:	00024fa8 	.word	0x00024fa8
    d8cc:	00024f84 	.word	0x00024f84
    d8d0:	00024f94 	.word	0x00024f94

0000d8d4 <CUSBDevice::GetName(TDeviceNameSelector) const>:
    d8d4:	e92d4070 	push	{r4, r5, r6, lr}
    d8d8:	e1a06000 	mov	r6, r0
    d8dc:	e24dd008 	sub	sp, sp, #8
    d8e0:	e3a00010 	mov	r0, #16
    d8e4:	e1a05001 	mov	r5, r1
    d8e8:	eb005527 	bl	22d8c <operator new(unsigned int)>
    d8ec:	e1a04000 	mov	r4, r0
    d8f0:	eb004911 	bl	1fd3c <CString::CString()>
    d8f4:	e3550000 	cmp	r5, #0
    d8f8:	0a00001a 	beq	d968 <CUSBDevice::GetName(TDeviceNameSelector) const+0x94>
    d8fc:	e3550001 	cmp	r5, #1
    d900:	0a000009 	beq	d92c <CUSBDevice::GetName(TDeviceNameSelector) const+0x58>
    d904:	e3a02e1a 	mov	r2, #416	; 0x1a0
    d908:	e59f10c4 	ldr	r1, [pc, #196]	; d9d4 <CUSBDevice::GetName(TDeviceNameSelector) const+0x100>
    d90c:	e59f00c4 	ldr	r0, [pc, #196]	; d9d8 <CUSBDevice::GetName(TDeviceNameSelector) const+0x104>
    d910:	eb003458 	bl	1aa78 <assertion_failed>
    d914:	e59f10c0 	ldr	r1, [pc, #192]	; d9dc <CUSBDevice::GetName(TDeviceNameSelector) const+0x108>
    d918:	e1a00004 	mov	r0, r4
    d91c:	eb004922 	bl	1fdac <CString::operator=(char const*)>
    d920:	e1a00004 	mov	r0, r4
    d924:	e28dd008 	add	sp, sp, #8
    d928:	e8bd8070 	pop	{r4, r5, r6, pc}
    d92c:	e5961014 	ldr	r1, [r6, #20]
    d930:	e3510000 	cmp	r1, #0
    d934:	0a000020 	beq	d9bc <CUSBDevice::GetName(TDeviceNameSelector) const+0xe8>
    d938:	e5d12004 	ldrb	r2, [r1, #4]
    d93c:	e2423001 	sub	r3, r2, #1
    d940:	e6ef3073 	uxtb	r3, r3
    d944:	e35300fd 	cmp	r3, #253	; 0xfd
    d948:	8afffff1 	bhi	d914 <CUSBDevice::GetName(TDeviceNameSelector) const+0x40>
    d94c:	e5d13005 	ldrb	r3, [r1, #5]
    d950:	e5d11006 	ldrb	r1, [r1, #6]
    d954:	e1a00004 	mov	r0, r4
    d958:	e58d1000 	str	r1, [sp]
    d95c:	e59f107c 	ldr	r1, [pc, #124]	; d9e0 <CUSBDevice::GetName(TDeviceNameSelector) const+0x10c>
    d960:	eb004ce3 	bl	20cf4 <CString::Format(char const*, ...)>
    d964:	eaffffed 	b	d920 <CUSBDevice::GetName(TDeviceNameSelector) const+0x4c>
    d968:	e5961014 	ldr	r1, [r6, #20]
    d96c:	e3510000 	cmp	r1, #0
    d970:	0a00000b 	beq	d9a4 <CUSBDevice::GetName(TDeviceNameSelector) const+0xd0>
    d974:	e5d1000b 	ldrb	r0, [r1, #11]
    d978:	e5d1300a 	ldrb	r3, [r1, #10]
    d97c:	e5d12008 	ldrb	r2, [r1, #8]
    d980:	e5d11009 	ldrb	r1, [r1, #9]
    d984:	e1833400 	orr	r3, r3, r0, lsl #8
    d988:	e1822401 	orr	r2, r2, r1, lsl #8
    d98c:	e1a00004 	mov	r0, r4
    d990:	e59f104c 	ldr	r1, [pc, #76]	; d9e4 <CUSBDevice::GetName(TDeviceNameSelector) const+0x110>
    d994:	eb004cd6 	bl	20cf4 <CString::Format(char const*, ...)>
    d998:	e1a00004 	mov	r0, r4
    d99c:	e28dd008 	add	sp, sp, #8
    d9a0:	e8bd8070 	pop	{r4, r5, r6, pc}
    d9a4:	e59f1028 	ldr	r1, [pc, #40]	; d9d4 <CUSBDevice::GetName(TDeviceNameSelector) const+0x100>
    d9a8:	e3a02f63 	mov	r2, #396	; 0x18c
    d9ac:	e59f0034 	ldr	r0, [pc, #52]	; d9e8 <CUSBDevice::GetName(TDeviceNameSelector) const+0x114>
    d9b0:	eb003430 	bl	1aa78 <assertion_failed>
    d9b4:	e5961014 	ldr	r1, [r6, #20]
    d9b8:	eaffffed 	b	d974 <CUSBDevice::GetName(TDeviceNameSelector) const+0xa0>
    d9bc:	e59f1010 	ldr	r1, [pc, #16]	; d9d4 <CUSBDevice::GetName(TDeviceNameSelector) const+0x100>
    d9c0:	e59f2024 	ldr	r2, [pc, #36]	; d9ec <CUSBDevice::GetName(TDeviceNameSelector) const+0x118>
    d9c4:	e59f001c 	ldr	r0, [pc, #28]	; d9e8 <CUSBDevice::GetName(TDeviceNameSelector) const+0x114>
    d9c8:	eb00342a 	bl	1aa78 <assertion_failed>
    d9cc:	e5961014 	ldr	r1, [r6, #20]
    d9d0:	eaffffd8 	b	d938 <CUSBDevice::GetName(TDeviceNameSelector) const+0x64>
    d9d4:	00024f74 	.word	0x00024f74
    d9d8:	00025034 	.word	0x00025034
    d9dc:	00024fec 	.word	0x00024fec
    d9e0:	00024fe0 	.word	0x00024fe0
    d9e4:	00024fd4 	.word	0x00024fd4
    d9e8:	00024fc0 	.word	0x00024fc0
    d9ec:	00000193 	.word	0x00000193

0000d9f0 <CUSBDevice::GetNames() const>:
    d9f0:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d9f4:	e1a07000 	mov	r7, r0
    d9f8:	e3a00010 	mov	r0, #16
    d9fc:	eb0054e2 	bl	22d8c <operator new(unsigned int)>
    da00:	e3a04000 	mov	r4, #0
    da04:	e1a06000 	mov	r6, r0
    da08:	e1a0b004 	mov	fp, r4
    da0c:	eb0048ca 	bl	1fd3c <CString::CString()>
    da10:	e59f8104 	ldr	r8, [pc, #260]	; db1c <CUSBDevice::GetNames() const+0x12c>
    da14:	e59f9104 	ldr	r9, [pc, #260]	; db20 <CUSBDevice::GetNames() const+0x130>
    da18:	e59fa104 	ldr	sl, [pc, #260]	; db24 <CUSBDevice::GetNames() const+0x134>
    da1c:	e6ef1074 	uxtb	r1, r4
    da20:	e1a00007 	mov	r0, r7
    da24:	ebffffaa 	bl	d8d4 <CUSBDevice::GetName(TDeviceNameSelector) const>
    da28:	e2505000 	subs	r5, r0, #0
    da2c:	0a000028 	beq	dad4 <CUSBDevice::GetNames() const+0xe4>
    da30:	e1a01008 	mov	r1, r8
    da34:	eb004929 	bl	1fee0 <CString::Compare(char const*) const>
    da38:	e3500000 	cmp	r0, #0
    da3c:	1a00000f 	bne	da80 <CUSBDevice::GetNames() const+0x90>
    da40:	e5953000 	ldr	r3, [r5]
    da44:	e1a00005 	mov	r0, r5
    da48:	e5933004 	ldr	r3, [r3, #4]
    da4c:	e12fff33 	blx	r3
    da50:	e2844001 	add	r4, r4, #1
    da54:	e3540002 	cmp	r4, #2
    da58:	1affffef 	bne	da1c <CUSBDevice::GetNames() const+0x2c>
    da5c:	e1a00006 	mov	r0, r6
    da60:	eb0048f9 	bl	1fe4c <CString::GetLength() const>
    da64:	e3500000 	cmp	r0, #0
    da68:	1a000002 	bne	da78 <CUSBDevice::GetNames() const+0x88>
    da6c:	e59f10a8 	ldr	r1, [pc, #168]	; db1c <CUSBDevice::GetNames() const+0x12c>
    da70:	e1a00006 	mov	r0, r6
    da74:	eb0048cc 	bl	1fdac <CString::operator=(char const*)>
    da78:	e1a00006 	mov	r0, r6
    da7c:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    da80:	e1a00006 	mov	r0, r6
    da84:	eb0048f0 	bl	1fe4c <CString::GetLength() const>
    da88:	e3500000 	cmp	r0, #0
    da8c:	0a00000a 	beq	dabc <CUSBDevice::GetNames() const+0xcc>
    da90:	e1a01009 	mov	r1, r9
    da94:	e1a00006 	mov	r0, r6
    da98:	eb0048ef 	bl	1fe5c <CString::Append(char const*)>
    da9c:	e1a00005 	mov	r0, r5
    daa0:	eb0048bb 	bl	1fd94 <CString::operator char const*() const>
    daa4:	e1a01000 	mov	r1, r0
    daa8:	e1a00006 	mov	r0, r6
    daac:	eb0048ea 	bl	1fe5c <CString::Append(char const*)>
    dab0:	e3550000 	cmp	r5, #0
    dab4:	0affffe5 	beq	da50 <CUSBDevice::GetNames() const+0x60>
    dab8:	eaffffe0 	b	da40 <CUSBDevice::GetNames() const+0x50>
    dabc:	e1a00005 	mov	r0, r5
    dac0:	eb0048b3 	bl	1fd94 <CString::operator char const*() const>
    dac4:	e1a01000 	mov	r1, r0
    dac8:	e1a00006 	mov	r0, r6
    dacc:	eb0048e2 	bl	1fe5c <CString::Append(char const*)>
    dad0:	eaffffda 	b	da40 <CUSBDevice::GetNames() const+0x50>
    dad4:	e1a0200a 	mov	r2, sl
    dad8:	e59f1048 	ldr	r1, [pc, #72]	; db28 <CUSBDevice::GetNames() const+0x138>
    dadc:	e59f0048 	ldr	r0, [pc, #72]	; db2c <CUSBDevice::GetNames() const+0x13c>
    dae0:	eb0033e4 	bl	1aa78 <assertion_failed>
    dae4:	e1a01008 	mov	r1, r8
    dae8:	e1a0000b 	mov	r0, fp
    daec:	eb0048fb 	bl	1fee0 <CString::Compare(char const*) const>
    daf0:	e3500000 	cmp	r0, #0
    daf4:	0affffd5 	beq	da50 <CUSBDevice::GetNames() const+0x60>
    daf8:	e1a00006 	mov	r0, r6
    dafc:	eb0048d2 	bl	1fe4c <CString::GetLength() const>
    db00:	e3500000 	cmp	r0, #0
    db04:	1affffe1 	bne	da90 <CUSBDevice::GetNames() const+0xa0>
    db08:	eb0048a1 	bl	1fd94 <CString::operator char const*() const>
    db0c:	e1a01000 	mov	r1, r0
    db10:	e1a00006 	mov	r0, r6
    db14:	eb0048d0 	bl	1fe5c <CString::Append(char const*)>
    db18:	eaffffcc 	b	da50 <CUSBDevice::GetNames() const+0x60>
    db1c:	00024fec 	.word	0x00024fec
    db20:	00025000 	.word	0x00025000
    db24:	000001b1 	.word	0x000001b1
    db28:	00024f74 	.word	0x00024f74
    db2c:	00024ff4 	.word	0x00024ff4

0000db30 <CUSBDevice::SetAddress(unsigned char)>:
    db30:	e351007f 	cmp	r1, #127	; 0x7f
    db34:	e92d4070 	push	{r4, r5, r6, lr}
    db38:	e1a04001 	mov	r4, r1
    db3c:	e1a05000 	mov	r5, r0
    db40:	da000003 	ble	db54 <CUSBDevice::SetAddress(unsigned char)+0x24>
    db44:	e59f2010 	ldr	r2, [pc, #16]	; db5c <CUSBDevice::SetAddress(unsigned char)+0x2c>
    db48:	e59f1010 	ldr	r1, [pc, #16]	; db60 <CUSBDevice::SetAddress(unsigned char)+0x30>
    db4c:	e59f0010 	ldr	r0, [pc, #16]	; db64 <CUSBDevice::SetAddress(unsigned char)+0x34>
    db50:	eb0033c8 	bl	1aa78 <assertion_failed>
    db54:	e5c54008 	strb	r4, [r5, #8]
    db58:	e8bd8070 	pop	{r4, r5, r6, pc}
    db5c:	000001ca 	.word	0x000001ca
    db60:	00024f74 	.word	0x00024f74
    db64:	00025004 	.word	0x00025004

0000db68 <CUSBDevice::GetAddress() const>:
    db68:	e5d00008 	ldrb	r0, [r0, #8]
    db6c:	e12fff1e 	bx	lr

0000db70 <CUSBDevice::GetSpeed() const>:
    db70:	e5d00009 	ldrb	r0, [r0, #9]
    db74:	e12fff1e 	bx	lr

0000db78 <CUSBDevice::IsSplit() const>:
    db78:	e5d00010 	ldrb	r0, [r0, #16]
    db7c:	e12fff1e 	bx	lr

0000db80 <CUSBDevice::GetHubAddress() const>:
    db80:	e5d00011 	ldrb	r0, [r0, #17]
    db84:	e12fff1e 	bx	lr

0000db88 <CUSBDevice::GetHubPortNumber() const>:
    db88:	e5d00012 	ldrb	r0, [r0, #18]
    db8c:	e12fff1e 	bx	lr

0000db90 <CUSBDevice::GetEndpoint0() const>:
    db90:	e590300c 	ldr	r3, [r0, #12]
    db94:	e3530000 	cmp	r3, #0
    db98:	0a000001 	beq	dba4 <CUSBDevice::GetEndpoint0() const+0x14>
    db9c:	e1a00003 	mov	r0, r3
    dba0:	e12fff1e 	bx	lr
    dba4:	e92d4010 	push	{r4, lr}
    dba8:	e1a04000 	mov	r4, r0
    dbac:	e59f2014 	ldr	r2, [pc, #20]	; dbc8 <CUSBDevice::GetEndpoint0() const+0x38>
    dbb0:	e59f1014 	ldr	r1, [pc, #20]	; dbcc <CUSBDevice::GetEndpoint0() const+0x3c>
    dbb4:	e59f0014 	ldr	r0, [pc, #20]	; dbd0 <CUSBDevice::GetEndpoint0() const+0x40>
    dbb8:	eb0033ae 	bl	1aa78 <assertion_failed>
    dbbc:	e594300c 	ldr	r3, [r4, #12]
    dbc0:	e1a00003 	mov	r0, r3
    dbc4:	e8bd8010 	pop	{r4, pc}
    dbc8:	000001eb 	.word	0x000001eb
    dbcc:	00024f74 	.word	0x00024f74
    dbd0:	00025024 	.word	0x00025024

0000dbd4 <CUSBDevice::GetHost() const>:
    dbd4:	e5903004 	ldr	r3, [r0, #4]
    dbd8:	e3530000 	cmp	r3, #0
    dbdc:	0a000001 	beq	dbe8 <CUSBDevice::GetHost() const+0x14>
    dbe0:	e1a00003 	mov	r0, r3
    dbe4:	e12fff1e 	bx	lr
    dbe8:	e92d4010 	push	{r4, lr}
    dbec:	e1a04000 	mov	r4, r0
    dbf0:	e59f2014 	ldr	r2, [pc, #20]	; dc0c <CUSBDevice::GetHost() const+0x38>
    dbf4:	e59f1014 	ldr	r1, [pc, #20]	; dc10 <CUSBDevice::GetHost() const+0x3c>
    dbf8:	e59f0014 	ldr	r0, [pc, #20]	; dc14 <CUSBDevice::GetHost() const+0x40>
    dbfc:	eb00339d 	bl	1aa78 <assertion_failed>
    dc00:	e5943004 	ldr	r3, [r4, #4]
    dc04:	e1a00003 	mov	r0, r3
    dc08:	e8bd8010 	pop	{r4, pc}
    dc0c:	000001f1 	.word	0x000001f1
    dc10:	00024f74 	.word	0x00024f74
    dc14:	00024f84 	.word	0x00024f84

0000dc18 <CUSBDevice::GetDeviceDescriptor() const>:
    dc18:	e5903014 	ldr	r3, [r0, #20]
    dc1c:	e3530000 	cmp	r3, #0
    dc20:	0a000001 	beq	dc2c <CUSBDevice::GetDeviceDescriptor() const+0x14>
    dc24:	e1a00003 	mov	r0, r3
    dc28:	e12fff1e 	bx	lr
    dc2c:	e92d4010 	push	{r4, lr}
    dc30:	e1a04000 	mov	r4, r0
    dc34:	e59f2014 	ldr	r2, [pc, #20]	; dc50 <CUSBDevice::GetDeviceDescriptor() const+0x38>
    dc38:	e59f1014 	ldr	r1, [pc, #20]	; dc54 <CUSBDevice::GetDeviceDescriptor() const+0x3c>
    dc3c:	e59f0014 	ldr	r0, [pc, #20]	; dc58 <CUSBDevice::GetDeviceDescriptor() const+0x40>
    dc40:	eb00338c 	bl	1aa78 <assertion_failed>
    dc44:	e5943014 	ldr	r3, [r4, #20]
    dc48:	e1a00003 	mov	r0, r3
    dc4c:	e8bd8010 	pop	{r4, pc}
    dc50:	000001f7 	.word	0x000001f7
    dc54:	00024f74 	.word	0x00024f74
    dc58:	00024fc0 	.word	0x00024fc0

0000dc5c <CUSBDevice::GetConfigurationDescriptor() const>:
    dc5c:	e5903018 	ldr	r3, [r0, #24]
    dc60:	e3530000 	cmp	r3, #0
    dc64:	0a000001 	beq	dc70 <CUSBDevice::GetConfigurationDescriptor() const+0x14>
    dc68:	e1a00003 	mov	r0, r3
    dc6c:	e12fff1e 	bx	lr
    dc70:	e92d4010 	push	{r4, lr}
    dc74:	e1a04000 	mov	r4, r0
    dc78:	e59f2014 	ldr	r2, [pc, #20]	; dc94 <CUSBDevice::GetConfigurationDescriptor() const+0x38>
    dc7c:	e59f1014 	ldr	r1, [pc, #20]	; dc98 <CUSBDevice::GetConfigurationDescriptor() const+0x3c>
    dc80:	e59f0014 	ldr	r0, [pc, #20]	; dc9c <CUSBDevice::GetConfigurationDescriptor() const+0x40>
    dc84:	eb00337b 	bl	1aa78 <assertion_failed>
    dc88:	e5943018 	ldr	r3, [r4, #24]
    dc8c:	e1a00003 	mov	r0, r3
    dc90:	e8bd8010 	pop	{r4, pc}
    dc94:	000001fd 	.word	0x000001fd
    dc98:	00024f74 	.word	0x00024f74
    dc9c:	00025038 	.word	0x00025038

0000dca0 <CUSBDevice::GetDescriptor(unsigned char)>:
    dca0:	e92d4070 	push	{r4, r5, r6, lr}
    dca4:	e1a04000 	mov	r4, r0
    dca8:	e590001c 	ldr	r0, [r0, #28]
    dcac:	e1a05001 	mov	r5, r1
    dcb0:	e3500000 	cmp	r0, #0
    dcb4:	0a000002 	beq	dcc4 <CUSBDevice::GetDescriptor(unsigned char)+0x24>
    dcb8:	e1a01005 	mov	r1, r5
    dcbc:	e8bd4070 	pop	{r4, r5, r6, lr}
    dcc0:	ea002443 	b	16dd4 <CUSBConfigurationParser::GetDescriptor(unsigned char)>
    dcc4:	e59f1018 	ldr	r1, [pc, #24]	; dce4 <CUSBDevice::GetDescriptor(unsigned char)+0x44>
    dcc8:	e59f0018 	ldr	r0, [pc, #24]	; dce8 <CUSBDevice::GetDescriptor(unsigned char)+0x48>
    dccc:	e59f2018 	ldr	r2, [pc, #24]	; dcec <CUSBDevice::GetDescriptor(unsigned char)+0x4c>
    dcd0:	eb003368 	bl	1aa78 <assertion_failed>
    dcd4:	e594001c 	ldr	r0, [r4, #28]
    dcd8:	e1a01005 	mov	r1, r5
    dcdc:	e8bd4070 	pop	{r4, r5, r6, lr}
    dce0:	ea00243b 	b	16dd4 <CUSBConfigurationParser::GetDescriptor(unsigned char)>
    dce4:	00024f74 	.word	0x00024f74
    dce8:	0002504c 	.word	0x0002504c
    dcec:	00000203 	.word	0x00000203

0000dcf0 <CUSBDevice::ConfigurationError(char const*) const>:
    dcf0:	e92d4070 	push	{r4, r5, r6, lr}
    dcf4:	e1a04000 	mov	r4, r0
    dcf8:	e590001c 	ldr	r0, [r0, #28]
    dcfc:	e1a05001 	mov	r5, r1
    dd00:	e3500000 	cmp	r0, #0
    dd04:	0a000002 	beq	dd14 <CUSBDevice::ConfigurationError(char const*) const+0x24>
    dd08:	e1a01005 	mov	r1, r5
    dd0c:	e8bd4070 	pop	{r4, r5, r6, lr}
    dd10:	ea00247d 	b	16f0c <CUSBConfigurationParser::Error(char const*) const>
    dd14:	e59f1018 	ldr	r1, [pc, #24]	; dd34 <CUSBDevice::ConfigurationError(char const*) const+0x44>
    dd18:	e59f0018 	ldr	r0, [pc, #24]	; dd38 <CUSBDevice::ConfigurationError(char const*) const+0x48>
    dd1c:	e59f2018 	ldr	r2, [pc, #24]	; dd3c <CUSBDevice::ConfigurationError(char const*) const+0x4c>
    dd20:	eb003354 	bl	1aa78 <assertion_failed>
    dd24:	e594001c 	ldr	r0, [r4, #28]
    dd28:	e1a01005 	mov	r1, r5
    dd2c:	e8bd4070 	pop	{r4, r5, r6, lr}
    dd30:	ea002475 	b	16f0c <CUSBConfigurationParser::Error(char const*) const>
    dd34:	00024f74 	.word	0x00024f74
    dd38:	0002504c 	.word	0x0002504c
    dd3c:	00000209 	.word	0x00000209

0000dd40 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>:
    dd40:	e92d000c 	push	{r2, r3}
    dd44:	e92d4070 	push	{r4, r5, r6, lr}
    dd48:	e24dd020 	sub	sp, sp, #32
    dd4c:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
    dd50:	e1a05000 	mov	r5, r0
    dd54:	e3540000 	cmp	r4, #0
    dd58:	e1a06001 	mov	r6, r1
    dd5c:	0a00001b 	beq	ddd0 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0x90>
    dd60:	e28d0010 	add	r0, sp, #16
    dd64:	eb0047f4 	bl	1fd3c <CString::CString()>
    dd68:	e5d52012 	ldrb	r2, [r5, #18]
    dd6c:	e5d53011 	ldrb	r3, [r5, #17]
    dd70:	e59f106c 	ldr	r1, [pc, #108]	; dde4 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0xa4>
    dd74:	e28d0010 	add	r0, sp, #16
    dd78:	e58d2000 	str	r2, [sp]
    dd7c:	e59f2064 	ldr	r2, [pc, #100]	; dde8 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0xa8>
    dd80:	eb004bdb 	bl	20cf4 <CString::Format(char const*, ...)>
    dd84:	e28d3034 	add	r3, sp, #52	; 0x34
    dd88:	e58d300c 	str	r3, [sp, #12]
    dd8c:	eb003d2c 	bl	1d244 <CLogger::Get()>
    dd90:	e1a05000 	mov	r5, r0
    dd94:	e28d0010 	add	r0, sp, #16
    dd98:	eb0047fd 	bl	1fd94 <CString::operator char const*() const>
    dd9c:	e59dc00c 	ldr	ip, [sp, #12]
    dda0:	e1a01000 	mov	r1, r0
    dda4:	e1a03004 	mov	r3, r4
    dda8:	e1a00005 	mov	r0, r5
    ddac:	e1a02006 	mov	r2, r6
    ddb0:	e58dc000 	str	ip, [sp]
    ddb4:	eb003e4e 	bl	1d6f4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
    ddb8:	e28d0010 	add	r0, sp, #16
    ddbc:	eb0047ab 	bl	1fc70 <CString::~CString()>
    ddc0:	e28dd020 	add	sp, sp, #32
    ddc4:	e8bd4070 	pop	{r4, r5, r6, lr}
    ddc8:	e28dd008 	add	sp, sp, #8
    ddcc:	e12fff1e 	bx	lr
    ddd0:	e59f2014 	ldr	r2, [pc, #20]	; ddec <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0xac>
    ddd4:	e59f1014 	ldr	r1, [pc, #20]	; ddf0 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0xb0>
    ddd8:	e59f0014 	ldr	r0, [pc, #20]	; ddf4 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0xb4>
    dddc:	eb003325 	bl	1aa78 <assertion_failed>
    dde0:	eaffffde 	b	dd60 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0x20>
    dde4:	00025074 	.word	0x00025074
    dde8:	00024f6c 	.word	0x00024f6c
    ddec:	0000020f 	.word	0x0000020f
    ddf0:	00024f74 	.word	0x00024f74
    ddf4:	00025064 	.word	0x00025064

0000ddf8 <CUSBDevice::Initialize()>:
    ddf8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ddfc:	e5903014 	ldr	r3, [r0, #20]
    de00:	e24dd014 	sub	sp, sp, #20
    de04:	e3530000 	cmp	r3, #0
    de08:	e1a04000 	mov	r4, r0
    de0c:	0a000003 	beq	de20 <CUSBDevice::Initialize()+0x28>
    de10:	e3a02061 	mov	r2, #97	; 0x61
    de14:	e59f168c 	ldr	r1, [pc, #1676]	; e4a8 <CUSBDevice::Initialize()+0x6b0>
    de18:	e59f068c 	ldr	r0, [pc, #1676]	; e4ac <CUSBDevice::Initialize()+0x6b4>
    de1c:	eb003315 	bl	1aa78 <assertion_failed>
    de20:	e3a00012 	mov	r0, #18
    de24:	eb0053d8 	bl	22d8c <operator new(unsigned int)>
    de28:	e5943004 	ldr	r3, [r4, #4]
    de2c:	e5840014 	str	r0, [r4, #20]
    de30:	e3530000 	cmp	r3, #0
    de34:	0a000080 	beq	e03c <CUSBDevice::Initialize()+0x244>
    de38:	e594100c 	ldr	r1, [r4, #12]
    de3c:	e3510000 	cmp	r1, #0
    de40:	0a000082 	beq	e050 <CUSBDevice::Initialize()+0x258>
    de44:	e3a06000 	mov	r6, #0
    de48:	e3a0c008 	mov	ip, #8
    de4c:	e3a05080 	mov	r5, #128	; 0x80
    de50:	e5942014 	ldr	r2, [r4, #20]
    de54:	e5940004 	ldr	r0, [r4, #4]
    de58:	e1a03006 	mov	r3, r6
    de5c:	e88d1004 	stm	sp, {r2, ip}
    de60:	e58d600c 	str	r6, [sp, #12]
    de64:	e58d5008 	str	r5, [sp, #8]
    de68:	e3a02001 	mov	r2, #1
    de6c:	eb000350 	bl	ebb4 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    de70:	e3500008 	cmp	r0, #8
    de74:	1a000012 	bne	dec4 <CUSBDevice::Initialize()+0xcc>
    de78:	e5943014 	ldr	r3, [r4, #20]
    de7c:	e5d37000 	ldrb	r7, [r3]
    de80:	e3570012 	cmp	r7, #18
    de84:	1a000002 	bne	de94 <CUSBDevice::Initialize()+0x9c>
    de88:	e5d38001 	ldrb	r8, [r3, #1]
    de8c:	e3580001 	cmp	r8, #1
    de90:	0a000017 	beq	def4 <CUSBDevice::Initialize()+0xfc>
    de94:	e3a05000 	mov	r5, #0
    de98:	e59f2610 	ldr	r2, [pc, #1552]	; e4b0 <CUSBDevice::Initialize()+0x6b8>
    de9c:	e3a01001 	mov	r1, #1
    dea0:	e1a00004 	mov	r0, r4
    dea4:	ebffffa5 	bl	dd40 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    dea8:	e3a01012 	mov	r1, #18
    deac:	e5940014 	ldr	r0, [r4, #20]
    deb0:	eb0053b9 	bl	22d9c <operator delete(void*, unsigned int)>
    deb4:	e5845014 	str	r5, [r4, #20]
    deb8:	e1a00005 	mov	r0, r5
    debc:	e28dd014 	add	sp, sp, #20
    dec0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dec4:	e3a01001 	mov	r1, #1
    dec8:	e59f25e4 	ldr	r2, [pc, #1508]	; e4b4 <CUSBDevice::Initialize()+0x6bc>
    decc:	e1a05006 	mov	r5, r6
    ded0:	e1a00004 	mov	r0, r4
    ded4:	ebffff99 	bl	dd40 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    ded8:	e5940014 	ldr	r0, [r4, #20]
    dedc:	e3a01012 	mov	r1, #18
    dee0:	eb0053ad 	bl	22d9c <operator delete(void*, unsigned int)>
    dee4:	e1a00005 	mov	r0, r5
    dee8:	e5846014 	str	r6, [r4, #20]
    deec:	e28dd014 	add	sp, sp, #20
    def0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    def4:	e5d31007 	ldrb	r1, [r3, #7]
    def8:	e594000c 	ldr	r0, [r4, #12]
    defc:	eb00028d 	bl	e938 <CUSBEndpoint::SetMaxPacketSize(unsigned int)>
    df00:	e5943014 	ldr	r3, [r4, #20]
    df04:	e594100c 	ldr	r1, [r4, #12]
    df08:	e5940004 	ldr	r0, [r4, #4]
    df0c:	e1a02008 	mov	r2, r8
    df10:	e88d0088 	stm	sp, {r3, r7}
    df14:	e58d600c 	str	r6, [sp, #12]
    df18:	e58d5008 	str	r5, [sp, #8]
    df1c:	e1a03006 	mov	r3, r6
    df20:	eb000323 	bl	ebb4 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    df24:	e3500012 	cmp	r0, #18
    df28:	1a00004e 	bne	e068 <CUSBDevice::Initialize()+0x270>
    df2c:	e59f3584 	ldr	r3, [pc, #1412]	; e4b8 <CUSBDevice::Initialize()+0x6c0>
    df30:	e5d37000 	ldrb	r7, [r3]
    df34:	e2872001 	add	r2, r7, #1
    df38:	e357007f 	cmp	r7, #127	; 0x7f
    df3c:	e5c32000 	strb	r2, [r3]
    df40:	ca00004b 	bgt	e074 <CUSBDevice::Initialize()+0x27c>
    df44:	e1a02007 	mov	r2, r7
    df48:	e594100c 	ldr	r1, [r4, #12]
    df4c:	e5940004 	ldr	r0, [r4, #4]
    df50:	eb000325 	bl	ebec <CUSBHostController::SetAddress(CUSBEndpoint*, unsigned char)>
    df54:	e2505000 	subs	r5, r0, #0
    df58:	0a000055 	beq	e0b4 <CUSBDevice::Initialize()+0x2bc>
    df5c:	e5943018 	ldr	r3, [r4, #24]
    df60:	e5c47008 	strb	r7, [r4, #8]
    df64:	e3530000 	cmp	r3, #0
    df68:	0a000003 	beq	df7c <CUSBDevice::Initialize()+0x184>
    df6c:	e3a020a5 	mov	r2, #165	; 0xa5
    df70:	e59f1530 	ldr	r1, [pc, #1328]	; e4a8 <CUSBDevice::Initialize()+0x6b0>
    df74:	e59f0540 	ldr	r0, [pc, #1344]	; e4bc <CUSBDevice::Initialize()+0x6c4>
    df78:	eb0032be 	bl	1aa78 <assertion_failed>
    df7c:	e3a00009 	mov	r0, #9
    df80:	eb005381 	bl	22d8c <operator new(unsigned int)>
    df84:	e5942014 	ldr	r2, [r4, #20]
    df88:	e5840018 	str	r0, [r4, #24]
    df8c:	e5d23008 	ldrb	r3, [r2, #8]
    df90:	e5d2c009 	ldrb	ip, [r2, #9]
    df94:	e59f1524 	ldr	r1, [pc, #1316]	; e4c0 <CUSBDevice::Initialize()+0x6c8>
    df98:	e183340c 	orr	r3, r3, ip, lsl #8
    df9c:	e1530001 	cmp	r3, r1
    dfa0:	05d2500a 	ldrbeq	r5, [r2, #10]
    dfa4:	05d2200b 	ldrbeq	r2, [r2, #11]
    dfa8:	059f3514 	ldreq	r3, [pc, #1300]	; e4c4 <CUSBDevice::Initialize()+0x6cc>
    dfac:	01855402 	orreq	r5, r5, r2, lsl #8
    dfb0:	00455003 	subeq	r5, r5, r3
    dfb4:	016f5f15 	clzeq	r5, r5
    dfb8:	13a05000 	movne	r5, #0
    dfbc:	e3a07009 	mov	r7, #9
    dfc0:	e3a06000 	mov	r6, #0
    dfc4:	e3a08080 	mov	r8, #128	; 0x80
    dfc8:	e5943004 	ldr	r3, [r4, #4]
    dfcc:	01a052a5 	lsreq	r5, r5, #5
    dfd0:	e594100c 	ldr	r1, [r4, #12]
    dfd4:	e3a02002 	mov	r2, #2
    dfd8:	e58d0000 	str	r0, [sp]
    dfdc:	e58d600c 	str	r6, [sp, #12]
    dfe0:	e1a00003 	mov	r0, r3
    dfe4:	e98d0180 	stmib	sp, {r7, r8}
    dfe8:	e1a03005 	mov	r3, r5
    dfec:	eb0002f0 	bl	ebb4 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    dff0:	e1500007 	cmp	r0, r7
    dff4:	1a000024 	bne	e08c <CUSBDevice::Initialize()+0x294>
    dff8:	e5940018 	ldr	r0, [r4, #24]
    dffc:	e5d07000 	ldrb	r7, [r0]
    e000:	e3570009 	cmp	r7, #9
    e004:	1a000002 	bne	e014 <CUSBDevice::Initialize()+0x21c>
    e008:	e5d09001 	ldrb	r9, [r0, #1]
    e00c:	e3590002 	cmp	r9, #2
    e010:	0a00002d 	beq	e0cc <CUSBDevice::Initialize()+0x2d4>
    e014:	e3a05000 	mov	r5, #0
    e018:	e59f24a8 	ldr	r2, [pc, #1192]	; e4c8 <CUSBDevice::Initialize()+0x6d0>
    e01c:	e3a01001 	mov	r1, #1
    e020:	e1a00004 	mov	r0, r4
    e024:	ebffff45 	bl	dd40 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    e028:	e3a01009 	mov	r1, #9
    e02c:	e5940018 	ldr	r0, [r4, #24]
    e030:	eb005359 	bl	22d9c <operator delete(void*, unsigned int)>
    e034:	e5845018 	str	r5, [r4, #24]
    e038:	eaffff9e 	b	deb8 <CUSBDevice::Initialize()+0xc0>
    e03c:	e3a02065 	mov	r2, #101	; 0x65
    e040:	e59f1460 	ldr	r1, [pc, #1120]	; e4a8 <CUSBDevice::Initialize()+0x6b0>
    e044:	e59f0480 	ldr	r0, [pc, #1152]	; e4cc <CUSBDevice::Initialize()+0x6d4>
    e048:	eb00328a 	bl	1aa78 <assertion_failed>
    e04c:	eaffff79 	b	de38 <CUSBDevice::Initialize()+0x40>
    e050:	e59f1450 	ldr	r1, [pc, #1104]	; e4a8 <CUSBDevice::Initialize()+0x6b0>
    e054:	e3a02066 	mov	r2, #102	; 0x66
    e058:	e59f0470 	ldr	r0, [pc, #1136]	; e4d0 <CUSBDevice::Initialize()+0x6d8>
    e05c:	eb003285 	bl	1aa78 <assertion_failed>
    e060:	e594100c 	ldr	r1, [r4, #12]
    e064:	eaffff76 	b	de44 <CUSBDevice::Initialize()+0x4c>
    e068:	e1a01008 	mov	r1, r8
    e06c:	e59f2460 	ldr	r2, [pc, #1120]	; e4d4 <CUSBDevice::Initialize()+0x6dc>
    e070:	eaffff95 	b	decc <CUSBDevice::Initialize()+0xd4>
    e074:	e1a01008 	mov	r1, r8
    e078:	e1a00004 	mov	r0, r4
    e07c:	e59f2454 	ldr	r2, [pc, #1108]	; e4d8 <CUSBDevice::Initialize()+0x6e0>
    e080:	e1a05006 	mov	r5, r6
    e084:	ebffff2d 	bl	dd40 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    e088:	eaffff8a 	b	deb8 <CUSBDevice::Initialize()+0xc0>
    e08c:	e59f2448 	ldr	r2, [pc, #1096]	; e4dc <CUSBDevice::Initialize()+0x6e4>
    e090:	e3a01001 	mov	r1, #1
    e094:	e1a00004 	mov	r0, r4
    e098:	ebffff28 	bl	dd40 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    e09c:	e1a01007 	mov	r1, r7
    e0a0:	e5940018 	ldr	r0, [r4, #24]
    e0a4:	eb00533c 	bl	22d9c <operator delete(void*, unsigned int)>
    e0a8:	e1a05006 	mov	r5, r6
    e0ac:	e5846018 	str	r6, [r4, #24]
    e0b0:	eaffff80 	b	deb8 <CUSBDevice::Initialize()+0xc0>
    e0b4:	e1a03007 	mov	r3, r7
    e0b8:	e1a01008 	mov	r1, r8
    e0bc:	e1a00004 	mov	r0, r4
    e0c0:	e59f2418 	ldr	r2, [pc, #1048]	; e4e0 <CUSBDevice::Initialize()+0x6e8>
    e0c4:	ebffff1d 	bl	dd40 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    e0c8:	eaffff7a 	b	deb8 <CUSBDevice::Initialize()+0xc0>
    e0cc:	e5d0a002 	ldrb	sl, [r0, #2]
    e0d0:	e5d03003 	ldrb	r3, [r0, #3]
    e0d4:	e18aa403 	orr	sl, sl, r3, lsl #8
    e0d8:	e35a0c02 	cmp	sl, #512	; 0x200
    e0dc:	caffffcc 	bgt	e014 <CUSBDevice::Initialize()+0x21c>
    e0e0:	e1a01007 	mov	r1, r7
    e0e4:	eb00532c 	bl	22d9c <operator delete(void*, unsigned int)>
    e0e8:	e1a0000a 	mov	r0, sl
    e0ec:	eb005327 	bl	22d90 <operator new[](unsigned int)>
    e0f0:	e1a03000 	mov	r3, r0
    e0f4:	e594100c 	ldr	r1, [r4, #12]
    e0f8:	e5843018 	str	r3, [r4, #24]
    e0fc:	e5940004 	ldr	r0, [r4, #4]
    e100:	e1a02009 	mov	r2, r9
    e104:	e58d3000 	str	r3, [sp]
    e108:	e58d600c 	str	r6, [sp, #12]
    e10c:	e58d8008 	str	r8, [sp, #8]
    e110:	e58da004 	str	sl, [sp, #4]
    e114:	e1a03005 	mov	r3, r5
    e118:	eb0002a5 	bl	ebb4 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    e11c:	e15a0000 	cmp	sl, r0
    e120:	1a000098 	bne	e388 <CUSBDevice::Initialize()+0x590>
    e124:	e594301c 	ldr	r3, [r4, #28]
    e128:	e3530000 	cmp	r3, #0
    e12c:	0a000003 	beq	e140 <CUSBDevice::Initialize()+0x348>
    e130:	e3a020e3 	mov	r2, #227	; 0xe3
    e134:	e59f136c 	ldr	r1, [pc, #876]	; e4a8 <CUSBDevice::Initialize()+0x6b0>
    e138:	e59f03a4 	ldr	r0, [pc, #932]	; e4e4 <CUSBDevice::Initialize()+0x6ec>
    e13c:	eb00324d 	bl	1aa78 <assertion_failed>
    e140:	e3a0001c 	mov	r0, #28
    e144:	eb005310 	bl	22d8c <operator new(unsigned int)>
    e148:	e1a05000 	mov	r5, r0
    e14c:	e1a0200a 	mov	r2, sl
    e150:	e5941018 	ldr	r1, [r4, #24]
    e154:	eb0022a9 	bl	16c00 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)>
    e158:	e584501c 	str	r5, [r4, #28]
    e15c:	e1a00005 	mov	r0, r5
    e160:	eb002319 	bl	16dcc <CUSBConfigurationParser::IsValid() const>
    e164:	e2505000 	subs	r5, r0, #0
    e168:	e1a00004 	mov	r0, r4
    e16c:	0a000087 	beq	e390 <CUSBDevice::Initialize()+0x598>
    e170:	ebfffe1e 	bl	d9f0 <CUSBDevice::GetNames() const>
    e174:	e2506000 	subs	r6, r0, #0
    e178:	0a00009c 	beq	e3f0 <CUSBDevice::Initialize()+0x5f8>
    e17c:	eb004704 	bl	1fd94 <CString::operator char const*() const>
    e180:	e59f2360 	ldr	r2, [pc, #864]	; e4e8 <CUSBDevice::Initialize()+0x6f0>
    e184:	e1a03000 	mov	r3, r0
    e188:	e3a01003 	mov	r1, #3
    e18c:	e1a00004 	mov	r0, r4
    e190:	ebfffeea 	bl	dd40 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    e194:	e5963000 	ldr	r3, [r6]
    e198:	e1a00006 	mov	r0, r6
    e19c:	e5933004 	ldr	r3, [r3, #4]
    e1a0:	e12fff33 	blx	r3
    e1a4:	e3a09000 	mov	r9, #0
    e1a8:	e1a08009 	mov	r8, r9
    e1ac:	e59fb338 	ldr	fp, [pc, #824]	; e4ec <CUSBDevice::Initialize()+0x6f4>
    e1b0:	e3a01004 	mov	r1, #4
    e1b4:	e594001c 	ldr	r0, [r4, #28]
    e1b8:	eb002305 	bl	16dd4 <CUSBConfigurationParser::GetDescriptor(unsigned char)>
    e1bc:	e3500000 	cmp	r0, #0
    e1c0:	0a000075 	beq	e39c <CUSBDevice::Initialize()+0x5a4>
    e1c4:	e5d06002 	ldrb	r6, [r0, #2]
    e1c8:	e1560009 	cmp	r6, r9
    e1cc:	ca000007 	bgt	e1f0 <CUSBDevice::Initialize()+0x3f8>
    e1d0:	e1590006 	cmp	r9, r6
    e1d4:	0a000005 	beq	e1f0 <CUSBDevice::Initialize()+0x3f8>
    e1d8:	e5d03003 	ldrb	r3, [r0, #3]
    e1dc:	e1a0200b 	mov	r2, fp
    e1e0:	e3a01004 	mov	r1, #4
    e1e4:	e1a00004 	mov	r0, r4
    e1e8:	ebfffed4 	bl	dd40 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    e1ec:	eaffffef 	b	e1b0 <CUSBDevice::Initialize()+0x3b8>
    e1f0:	e594301c 	ldr	r3, [r4, #28]
    e1f4:	e3530000 	cmp	r3, #0
    e1f8:	0a00006f 	beq	e3bc <CUSBDevice::Initialize()+0x5c4>
    e1fc:	e0847108 	add	r7, r4, r8, lsl #2
    e200:	e5973020 	ldr	r3, [r7, #32]
    e204:	e3530000 	cmp	r3, #0
    e208:	0a00003a 	beq	e2f8 <CUSBDevice::Initialize()+0x500>
    e20c:	e59f22dc 	ldr	r2, [pc, #732]	; e4f0 <CUSBDevice::Initialize()+0x6f8>
    e210:	e59f1290 	ldr	r1, [pc, #656]	; e4a8 <CUSBDevice::Initialize()+0x6b0>
    e214:	e59f02d8 	ldr	r0, [pc, #728]	; e4f4 <CUSBDevice::Initialize()+0x6fc>
    e218:	eb003216 	bl	1aa78 <assertion_failed>
    e21c:	e3a00010 	mov	r0, #16
    e220:	eb0052d9 	bl	22d8c <operator new(unsigned int)>
    e224:	e1a09000 	mov	r9, r0
    e228:	e594201c 	ldr	r2, [r4, #28]
    e22c:	e1a01004 	mov	r1, r4
    e230:	eb001a61 	bl	14bbc <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)>
    e234:	e1a00009 	mov	r0, r9
    e238:	e5879020 	str	r9, [r7, #32]
    e23c:	e5903000 	ldr	r3, [r0]
    e240:	e5933014 	ldr	r3, [r3, #20]
    e244:	e12fff33 	blx	r3
    e248:	e250a000 	subs	sl, r0, #0
    e24c:	0a00001b 	beq	e2c0 <CUSBDevice::Initialize()+0x4c8>
    e250:	e3580000 	cmp	r8, #0
    e254:	0a000030 	beq	e31c <CUSBDevice::Initialize()+0x524>
    e258:	e5970020 	ldr	r0, [r7, #32]
    e25c:	eb001ac7 	bl	14d80 <CUSBFunction::GetInterfaceName() const>
    e260:	e2509000 	subs	r9, r0, #0
    e264:	0a000077 	beq	e448 <CUSBDevice::Initialize()+0x650>
    e268:	e59f1288 	ldr	r1, [pc, #648]	; e4f8 <CUSBDevice::Initialize()+0x700>
    e26c:	eb00471b 	bl	1fee0 <CString::Compare(char const*) const>
    e270:	e3500000 	cmp	r0, #0
    e274:	1a00007c 	bne	e46c <CUSBDevice::Initialize()+0x674>
    e278:	e5993000 	ldr	r3, [r9]
    e27c:	e1a00009 	mov	r0, r9
    e280:	e5933004 	ldr	r3, [r3, #4]
    e284:	e12fff33 	blx	r3
    e288:	e5970020 	ldr	r0, [r7, #32]
    e28c:	e3500000 	cmp	r0, #0
    e290:	0a000004 	beq	e2a8 <CUSBDevice::Initialize()+0x4b0>
    e294:	e5903000 	ldr	r3, [r0]
    e298:	e5933004 	ldr	r3, [r3, #4]
    e29c:	e12fff33 	blx	r3
    e2a0:	e3a03000 	mov	r3, #0
    e2a4:	e5873020 	str	r3, [r7, #32]
    e2a8:	e59f224c 	ldr	r2, [pc, #588]	; e4fc <CUSBDevice::Initialize()+0x704>
    e2ac:	e3a01002 	mov	r1, #2
    e2b0:	e1a00004 	mov	r0, r4
    e2b4:	e1a09006 	mov	r9, r6
    e2b8:	ebfffea0 	bl	dd40 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    e2bc:	eaffffbb 	b	e1b0 <CUSBDevice::Initialize()+0x3b8>
    e2c0:	e1a00004 	mov	r0, r4
    e2c4:	e59f2234 	ldr	r2, [pc, #564]	; e500 <CUSBDevice::Initialize()+0x708>
    e2c8:	e3a01001 	mov	r1, #1
    e2cc:	ebfffe9b 	bl	dd40 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    e2d0:	e5970020 	ldr	r0, [r7, #32]
    e2d4:	e3500000 	cmp	r0, #0
    e2d8:	0a000002 	beq	e2e8 <CUSBDevice::Initialize()+0x4f0>
    e2dc:	e5903000 	ldr	r3, [r0]
    e2e0:	e5933004 	ldr	r3, [r3, #4]
    e2e4:	e12fff33 	blx	r3
    e2e8:	e3a03000 	mov	r3, #0
    e2ec:	e1a09006 	mov	r9, r6
    e2f0:	e5873020 	str	r3, [r7, #32]
    e2f4:	eaffffad 	b	e1b0 <CUSBDevice::Initialize()+0x3b8>
    e2f8:	e3a00010 	mov	r0, #16
    e2fc:	eb0052a2 	bl	22d8c <operator new(unsigned int)>
    e300:	e1a09000 	mov	r9, r0
    e304:	e594201c 	ldr	r2, [r4, #28]
    e308:	e1a01004 	mov	r1, r4
    e30c:	eb001a2a 	bl	14bbc <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)>
    e310:	e5879020 	str	r9, [r7, #32]
    e314:	e1a00009 	mov	r0, r9
    e318:	eaffffc7 	b	e23c <CUSBDevice::Initialize()+0x444>
    e31c:	e1a01008 	mov	r1, r8
    e320:	e1a00004 	mov	r0, r4
    e324:	e5949020 	ldr	r9, [r4, #32]
    e328:	ebfffd69 	bl	d8d4 <CUSBDevice::GetName(TDeviceNameSelector) const>
    e32c:	e1a01000 	mov	r1, r0
    e330:	e1a00009 	mov	r0, r9
    e334:	eb000368 	bl	f0dc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>
    e338:	e2509000 	subs	r9, r0, #0
    e33c:	0a000037 	beq	e420 <CUSBDevice::Initialize()+0x628>
    e340:	e5940020 	ldr	r0, [r4, #32]
    e344:	e3500000 	cmp	r0, #0
    e348:	0a00000b 	beq	e37c <CUSBDevice::Initialize()+0x584>
    e34c:	e5903000 	ldr	r3, [r0]
    e350:	e5933004 	ldr	r3, [r3, #4]
    e354:	e12fff33 	blx	r3
    e358:	e3590000 	cmp	r9, #0
    e35c:	0a000021 	beq	e3e8 <CUSBDevice::Initialize()+0x5f0>
    e360:	e2888001 	add	r8, r8, #1
    e364:	e358000a 	cmp	r8, #10
    e368:	e5879020 	str	r9, [r7, #32]
    e36c:	0a000017 	beq	e3d0 <CUSBDevice::Initialize()+0x5d8>
    e370:	e2866001 	add	r6, r6, #1
    e374:	e6ef9076 	uxtb	r9, r6
    e378:	eaffff8c 	b	e1b0 <CUSBDevice::Initialize()+0x3b8>
    e37c:	e5849020 	str	r9, [r4, #32]
    e380:	e3a08001 	mov	r8, #1
    e384:	eafffff9 	b	e370 <CUSBDevice::Initialize()+0x578>
    e388:	e59f2174 	ldr	r2, [pc, #372]	; e504 <CUSBDevice::Initialize()+0x70c>
    e38c:	eaffff3f 	b	e090 <CUSBDevice::Initialize()+0x298>
    e390:	e59f1170 	ldr	r1, [pc, #368]	; e508 <CUSBDevice::Initialize()+0x710>
    e394:	ebfffe55 	bl	dcf0 <CUSBDevice::ConfigurationError(char const*) const>
    e398:	eafffec6 	b	deb8 <CUSBDevice::Initialize()+0xc0>
    e39c:	e3580000 	cmp	r8, #0
    e3a0:	1afffec4 	bne	deb8 <CUSBDevice::Initialize()+0xc0>
    e3a4:	e1a00004 	mov	r0, r4
    e3a8:	e59f215c 	ldr	r2, [pc, #348]	; e50c <CUSBDevice::Initialize()+0x714>
    e3ac:	e3a01002 	mov	r1, #2
    e3b0:	e1a05008 	mov	r5, r8
    e3b4:	ebfffe61 	bl	dd40 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    e3b8:	eafffebe 	b	deb8 <CUSBDevice::Initialize()+0xc0>
    e3bc:	e59f214c 	ldr	r2, [pc, #332]	; e510 <CUSBDevice::Initialize()+0x718>
    e3c0:	e59f10e0 	ldr	r1, [pc, #224]	; e4a8 <CUSBDevice::Initialize()+0x6b0>
    e3c4:	e59f0148 	ldr	r0, [pc, #328]	; e514 <CUSBDevice::Initialize()+0x71c>
    e3c8:	eb0031aa 	bl	1aa78 <assertion_failed>
    e3cc:	eaffff8a 	b	e1fc <CUSBDevice::Initialize()+0x404>
    e3d0:	e1a00004 	mov	r0, r4
    e3d4:	e59f213c 	ldr	r2, [pc, #316]	; e518 <CUSBDevice::Initialize()+0x720>
    e3d8:	e3a01002 	mov	r1, #2
    e3dc:	e1a0500a 	mov	r5, sl
    e3e0:	ebfffe56 	bl	dd40 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    e3e4:	eafffeb3 	b	deb8 <CUSBDevice::Initialize()+0xc0>
    e3e8:	e5879020 	str	r9, [r7, #32]
    e3ec:	eaffffad 	b	e2a8 <CUSBDevice::Initialize()+0x4b0>
    e3f0:	e3a020ef 	mov	r2, #239	; 0xef
    e3f4:	e59f10ac 	ldr	r1, [pc, #172]	; e4a8 <CUSBDevice::Initialize()+0x6b0>
    e3f8:	e59f011c 	ldr	r0, [pc, #284]	; e51c <CUSBDevice::Initialize()+0x724>
    e3fc:	eb00319d 	bl	1aa78 <assertion_failed>
    e400:	e1a00006 	mov	r0, r6
    e404:	eb004662 	bl	1fd94 <CString::operator char const*() const>
    e408:	e59f20d8 	ldr	r2, [pc, #216]	; e4e8 <CUSBDevice::Initialize()+0x6f0>
    e40c:	e1a03000 	mov	r3, r0
    e410:	e3a01003 	mov	r1, #3
    e414:	e1a00004 	mov	r0, r4
    e418:	ebfffe48 	bl	dd40 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    e41c:	eaffff60 	b	e1a4 <CUSBDevice::Initialize()+0x3ac>
    e420:	e3a01001 	mov	r1, #1
    e424:	e1a00004 	mov	r0, r4
    e428:	e5949020 	ldr	r9, [r4, #32]
    e42c:	ebfffd28 	bl	d8d4 <CUSBDevice::GetName(TDeviceNameSelector) const>
    e430:	e1a01000 	mov	r1, r0
    e434:	e1a00009 	mov	r0, r9
    e438:	eb000327 	bl	f0dc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>
    e43c:	e2509000 	subs	r9, r0, #0
    e440:	0affff84 	beq	e258 <CUSBDevice::Initialize()+0x460>
    e444:	eaffffbd 	b	e340 <CUSBDevice::Initialize()+0x548>
    e448:	e59f20d0 	ldr	r2, [pc, #208]	; e520 <CUSBDevice::Initialize()+0x728>
    e44c:	e59f1054 	ldr	r1, [pc, #84]	; e4a8 <CUSBDevice::Initialize()+0x6b0>
    e450:	e59f00cc 	ldr	r0, [pc, #204]	; e524 <CUSBDevice::Initialize()+0x72c>
    e454:	eb003187 	bl	1aa78 <assertion_failed>
    e458:	e59f1098 	ldr	r1, [pc, #152]	; e4f8 <CUSBDevice::Initialize()+0x700>
    e45c:	e1a00009 	mov	r0, r9
    e460:	eb00469e 	bl	1fee0 <CString::Compare(char const*) const>
    e464:	e3500000 	cmp	r0, #0
    e468:	0affff86 	beq	e288 <CUSBDevice::Initialize()+0x490>
    e46c:	e1a00009 	mov	r0, r9
    e470:	eb004647 	bl	1fd94 <CString::operator char const*() const>
    e474:	e59f20ac 	ldr	r2, [pc, #172]	; e528 <CUSBDevice::Initialize()+0x730>
    e478:	e1a03000 	mov	r3, r0
    e47c:	e3a01003 	mov	r1, #3
    e480:	e1a00004 	mov	r0, r4
    e484:	ebfffe2d 	bl	dd40 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    e488:	e1a01009 	mov	r1, r9
    e48c:	e5970020 	ldr	r0, [r7, #32]
    e490:	eb000311 	bl	f0dc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>
    e494:	e1a09000 	mov	r9, r0
    e498:	e5970020 	ldr	r0, [r7, #32]
    e49c:	e3500000 	cmp	r0, #0
    e4a0:	1affffa9 	bne	e34c <CUSBDevice::Initialize()+0x554>
    e4a4:	eaffffab 	b	e358 <CUSBDevice::Initialize()+0x560>
    e4a8:	00024f74 	.word	0x00024f74
    e4ac:	0002507c 	.word	0x0002507c
    e4b0:	000250b8 	.word	0x000250b8
    e4b4:	00025090 	.word	0x00025090
    e4b8:	0002b6bc 	.word	0x0002b6bc
    e4bc:	00025120 	.word	0x00025120
    e4c0:	00000525 	.word	0x00000525
    e4c4:	0000a4a2 	.word	0x0000a4a2
    e4c8:	00025160 	.word	0x00025160
    e4cc:	00024f84 	.word	0x00024f84
    e4d0:	00025024 	.word	0x00025024
    e4d4:	000250d4 	.word	0x000250d4
    e4d8:	000250f4 	.word	0x000250f4
    e4dc:	00025134 	.word	0x00025134
    e4e0:	00025108 	.word	0x00025108
    e4e4:	000251a8 	.word	0x000251a8
    e4e8:	000251cc 	.word	0x000251cc
    e4ec:	000251dc 	.word	0x000251dc
    e4f0:	00000113 	.word	0x00000113
    e4f4:	000251fc 	.word	0x000251fc
    e4f8:	00024fec 	.word	0x00024fec
    e4fc:	00025248 	.word	0x00025248
    e500:	00025218 	.word	0x00025218
    e504:	00025184 	.word	0x00025184
    e508:	00024f6c 	.word	0x00024f6c
    e50c:	00025284 	.word	0x00025284
    e510:	00000112 	.word	0x00000112
    e514:	0002504c 	.word	0x0002504c
    e518:	00025264 	.word	0x00025264
    e51c:	000251c0 	.word	0x000251c0
    e520:	0000012f 	.word	0x0000012f
    e524:	00024ff4 	.word	0x00024ff4
    e528:	00025234 	.word	0x00025234

0000e52c <CUSBDevice::Configure()>:
    e52c:	e5903004 	ldr	r3, [r0, #4]
    e530:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    e534:	e3530000 	cmp	r3, #0
    e538:	e1a05000 	mov	r5, r0
    e53c:	0a00002c 	beq	e5f4 <CUSBDevice::Configure()+0xc8>
    e540:	e595300c 	ldr	r3, [r5, #12]
    e544:	e3530000 	cmp	r3, #0
    e548:	0a00002e 	beq	e608 <CUSBDevice::Configure()+0xdc>
    e54c:	e5956018 	ldr	r6, [r5, #24]
    e550:	e3560000 	cmp	r6, #0
    e554:	0a00001c 	beq	e5cc <CUSBDevice::Configure()+0xa0>
    e558:	e5d62005 	ldrb	r2, [r6, #5]
    e55c:	e595100c 	ldr	r1, [r5, #12]
    e560:	e5950004 	ldr	r0, [r5, #4]
    e564:	eb0001b3 	bl	ec38 <CUSBHostController::SetConfiguration(CUSBEndpoint*, unsigned char)>
    e568:	e2506000 	subs	r6, r0, #0
    e56c:	0a000018 	beq	e5d4 <CUSBDevice::Configure()+0xa8>
    e570:	e3a06000 	mov	r6, #0
    e574:	e1a07006 	mov	r7, r6
    e578:	e2854020 	add	r4, r5, #32
    e57c:	e2855048 	add	r5, r5, #72	; 0x48
    e580:	e5940000 	ldr	r0, [r4]
    e584:	e3500000 	cmp	r0, #0
    e588:	0a00000c 	beq	e5c0 <CUSBDevice::Configure()+0x94>
    e58c:	e5903000 	ldr	r3, [r0]
    e590:	e5933018 	ldr	r3, [r3, #24]
    e594:	e12fff33 	blx	r3
    e598:	e3500000 	cmp	r0, #0
    e59c:	11a06000 	movne	r6, r0
    e5a0:	1a000006 	bne	e5c0 <CUSBDevice::Configure()+0x94>
    e5a4:	e5940000 	ldr	r0, [r4]
    e5a8:	e3500000 	cmp	r0, #0
    e5ac:	0a000002 	beq	e5bc <CUSBDevice::Configure()+0x90>
    e5b0:	e5903000 	ldr	r3, [r0]
    e5b4:	e5933004 	ldr	r3, [r3, #4]
    e5b8:	e12fff33 	blx	r3
    e5bc:	e5847000 	str	r7, [r4]
    e5c0:	e2844004 	add	r4, r4, #4
    e5c4:	e1550004 	cmp	r5, r4
    e5c8:	1affffec 	bne	e580 <CUSBDevice::Configure()+0x54>
    e5cc:	e1a00006 	mov	r0, r6
    e5d0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e5d4:	e5953018 	ldr	r3, [r5, #24]
    e5d8:	e1a00005 	mov	r0, r5
    e5dc:	e5d33005 	ldrb	r3, [r3, #5]
    e5e0:	e59f2034 	ldr	r2, [pc, #52]	; e61c <CUSBDevice::Configure()+0xf0>
    e5e4:	e3a01001 	mov	r1, #1
    e5e8:	ebfffdd4 	bl	dd40 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    e5ec:	e1a00006 	mov	r0, r6
    e5f0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e5f4:	e59f2024 	ldr	r2, [pc, #36]	; e620 <CUSBDevice::Configure()+0xf4>
    e5f8:	e59f1024 	ldr	r1, [pc, #36]	; e624 <CUSBDevice::Configure()+0xf8>
    e5fc:	e59f0024 	ldr	r0, [pc, #36]	; e628 <CUSBDevice::Configure()+0xfc>
    e600:	eb00311c 	bl	1aa78 <assertion_failed>
    e604:	eaffffcd 	b	e540 <CUSBDevice::Configure()+0x14>
    e608:	e59f201c 	ldr	r2, [pc, #28]	; e62c <CUSBDevice::Configure()+0x100>
    e60c:	e59f1010 	ldr	r1, [pc, #16]	; e624 <CUSBDevice::Configure()+0xf8>
    e610:	e59f0018 	ldr	r0, [pc, #24]	; e630 <CUSBDevice::Configure()+0x104>
    e614:	eb003117 	bl	1aa78 <assertion_failed>
    e618:	eaffffcb 	b	e54c <CUSBDevice::Configure()+0x20>
    e61c:	000252a8 	.word	0x000252a8
    e620:	0000015e 	.word	0x0000015e
    e624:	00024f74 	.word	0x00024f74
    e628:	00024f84 	.word	0x00024f84
    e62c:	0000015f 	.word	0x0000015f
    e630:	00025024 	.word	0x00025024

0000e634 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)>:
    e634:	e3a03000 	mov	r3, #0
    e638:	e92d4010 	push	{r4, lr}
    e63c:	e3a02001 	mov	r2, #1
    e640:	e1a04000 	mov	r4, r0
    e644:	e3a00008 	mov	r0, #8
    e648:	e1510003 	cmp	r1, r3
    e64c:	e5841000 	str	r1, [r4]
    e650:	e5840008 	str	r0, [r4, #8]
    e654:	e584200c 	str	r2, [r4, #12]
    e658:	e5c43004 	strb	r3, [r4, #4]
    e65c:	e5c43005 	strb	r3, [r4, #5]
    e660:	e5c43006 	strb	r3, [r4, #6]
    e664:	e5c43010 	strb	r3, [r4, #16]
    e668:	0a000001 	beq	e674 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)+0x40>
    e66c:	e1a00004 	mov	r0, r4
    e670:	e8bd8010 	pop	{r4, pc}
    e674:	e3a02021 	mov	r2, #33	; 0x21
    e678:	e59f100c 	ldr	r1, [pc, #12]	; e68c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)+0x58>
    e67c:	e59f000c 	ldr	r0, [pc, #12]	; e690 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)+0x5c>
    e680:	eb0030fc 	bl	1aa78 <assertion_failed>
    e684:	e1a00004 	mov	r0, r4
    e688:	e8bd8010 	pop	{r4, pc}
    e68c:	000252c8 	.word	0x000252c8
    e690:	00024e20 	.word	0x00024e20

0000e694 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>:
    e694:	e3a03001 	mov	r3, #1
    e698:	e3510000 	cmp	r1, #0
    e69c:	e92d4070 	push	{r4, r5, r6, lr}
    e6a0:	e1a04000 	mov	r4, r0
    e6a4:	e5801000 	str	r1, [r0]
    e6a8:	e1a05002 	mov	r5, r2
    e6ac:	e580300c 	str	r3, [r0, #12]
    e6b0:	0a00005b 	beq	e824 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x190>
    e6b4:	e3550000 	cmp	r5, #0
    e6b8:	0a000054 	beq	e810 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x17c>
    e6bc:	e5d53000 	ldrb	r3, [r5]
    e6c0:	e3530006 	cmp	r3, #6
    e6c4:	9a00003b 	bls	e7b8 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x124>
    e6c8:	e5d53001 	ldrb	r3, [r5, #1]
    e6cc:	e3530005 	cmp	r3, #5
    e6d0:	0a000003 	beq	e6e4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x50>
    e6d4:	e3a0202c 	mov	r2, #44	; 0x2c
    e6d8:	e59f1158 	ldr	r1, [pc, #344]	; e838 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x1a4>
    e6dc:	e59f0158 	ldr	r0, [pc, #344]	; e83c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x1a8>
    e6e0:	eb0030e4 	bl	1aa78 <assertion_failed>
    e6e4:	e5d53003 	ldrb	r3, [r5, #3]
    e6e8:	e2033003 	and	r3, r3, #3
    e6ec:	e3530002 	cmp	r3, #2
    e6f0:	0a000022 	beq	e780 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xec>
    e6f4:	e3530003 	cmp	r3, #3
    e6f8:	1a00001a 	bne	e768 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xd4>
    e6fc:	e3a03002 	mov	r3, #2
    e700:	e3a06001 	mov	r6, #1
    e704:	e5c43005 	strb	r3, [r4, #5]
    e708:	e5c46010 	strb	r6, [r4, #16]
    e70c:	e5d53002 	ldrb	r3, [r5, #2]
    e710:	e203200f 	and	r2, r3, #15
    e714:	e1a033a3 	lsr	r3, r3, #7
    e718:	e5c42004 	strb	r2, [r4, #4]
    e71c:	e5c43006 	strb	r3, [r4, #6]
    e720:	e5d53004 	ldrb	r3, [r5, #4]
    e724:	e5d52005 	ldrb	r2, [r5, #5]
    e728:	e1833402 	orr	r3, r3, r2, lsl #8
    e72c:	e5843008 	str	r3, [r4, #8]
    e730:	e5d55006 	ldrb	r5, [r5, #6]
    e734:	e3550000 	cmp	r5, #0
    e738:	0a00002e 	beq	e7f8 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x164>
    e73c:	e5940000 	ldr	r0, [r4]
    e740:	ebfffd0a 	bl	db70 <CUSBDevice::GetSpeed() const>
    e744:	e3500002 	cmp	r0, #2
    e748:	0a00001f 	beq	e7cc <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x138>
    e74c:	e584500c 	str	r5, [r4, #12]
    e750:	e3550013 	cmp	r5, #19
    e754:	8a000007 	bhi	e778 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xe4>
    e758:	e3a03014 	mov	r3, #20
    e75c:	e1a00004 	mov	r0, r4
    e760:	e584300c 	str	r3, [r4, #12]
    e764:	e8bd8070 	pop	{r4, r5, r6, pc}
    e768:	e3a0203b 	mov	r2, #59	; 0x3b
    e76c:	e59f10c4 	ldr	r1, [pc, #196]	; e838 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x1a4>
    e770:	e59f00c8 	ldr	r0, [pc, #200]	; e840 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x1ac>
    e774:	eb0030bf 	bl	1aa78 <assertion_failed>
    e778:	e1a00004 	mov	r0, r4
    e77c:	e8bd8070 	pop	{r4, r5, r6, pc}
    e780:	e3a03001 	mov	r3, #1
    e784:	e5c43005 	strb	r3, [r4, #5]
    e788:	e5c43010 	strb	r3, [r4, #16]
    e78c:	e5d53002 	ldrb	r3, [r5, #2]
    e790:	e1a00004 	mov	r0, r4
    e794:	e203200f 	and	r2, r3, #15
    e798:	e1a033a3 	lsr	r3, r3, #7
    e79c:	e5c42004 	strb	r2, [r4, #4]
    e7a0:	e5c43006 	strb	r3, [r4, #6]
    e7a4:	e5d53004 	ldrb	r3, [r5, #4]
    e7a8:	e5d52005 	ldrb	r2, [r5, #5]
    e7ac:	e1833402 	orr	r3, r3, r2, lsl #8
    e7b0:	e5843008 	str	r3, [r4, #8]
    e7b4:	e8bd8070 	pop	{r4, r5, r6, pc}
    e7b8:	e3a0202b 	mov	r2, #43	; 0x2b
    e7bc:	e59f1074 	ldr	r1, [pc, #116]	; e838 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x1a4>
    e7c0:	e59f007c 	ldr	r0, [pc, #124]	; e844 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x1b0>
    e7c4:	eb0030ab 	bl	1aa78 <assertion_failed>
    e7c8:	eaffffbe 	b	e6c8 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x34>
    e7cc:	e3550010 	cmp	r5, #16
    e7d0:	c3a03a01 	movgt	r3, #4096	; 0x1000
    e7d4:	c584300c 	strgt	r3, [r4, #12]
    e7d8:	caffffe6 	bgt	e778 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xe4>
    e7dc:	e2453001 	sub	r3, r5, #1
    e7e0:	e1a05316 	lsl	r5, r6, r3
    e7e4:	e1a051a5 	lsr	r5, r5, #3
    e7e8:	e3550000 	cmp	r5, #0
    e7ec:	e584500c 	str	r5, [r4, #12]
    e7f0:	0affffd8 	beq	e758 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xc4>
    e7f4:	eaffffd5 	b	e750 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xbc>
    e7f8:	e5940000 	ldr	r0, [r4]
    e7fc:	ebfffcdb 	bl	db70 <CUSBDevice::GetSpeed() const>
    e800:	e3500002 	cmp	r0, #2
    e804:	11a05006 	movne	r5, r6
    e808:	1affffcf 	bne	e74c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xb8>
    e80c:	eaffffd1 	b	e758 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xc4>
    e810:	e3a0202a 	mov	r2, #42	; 0x2a
    e814:	e59f101c 	ldr	r1, [pc, #28]	; e838 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x1a4>
    e818:	e59f0028 	ldr	r0, [pc, #40]	; e848 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x1b4>
    e81c:	eb003095 	bl	1aa78 <assertion_failed>
    e820:	eaffffa5 	b	e6bc <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x28>
    e824:	e3a02028 	mov	r2, #40	; 0x28
    e828:	e59f1008 	ldr	r1, [pc, #8]	; e838 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x1a4>
    e82c:	e59f0018 	ldr	r0, [pc, #24]	; e84c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x1b8>
    e830:	eb003090 	bl	1aa78 <assertion_failed>
    e834:	eaffff9e 	b	e6b4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x20>
    e838:	000252c8 	.word	0x000252c8
    e83c:	00025304 	.word	0x00025304
    e840:	00025034 	.word	0x00025034
    e844:	000252e4 	.word	0x000252e4
    e848:	000252d8 	.word	0x000252d8
    e84c:	00024e20 	.word	0x00024e20

0000e850 <CUSBEndpoint::CUSBEndpoint(CUSBEndpoint*, CUSBDevice*)>:
    e850:	e92d4070 	push	{r4, r5, r6, lr}
    e854:	e2515000 	subs	r5, r1, #0
    e858:	e1a04000 	mov	r4, r0
    e85c:	e1a06002 	mov	r6, r2
    e860:	0a000015 	beq	e8bc <CUSBEndpoint::CUSBEndpoint(CUSBEndpoint*, CUSBDevice*)+0x6c>
    e864:	e3560000 	cmp	r6, #0
    e868:	e5846000 	str	r6, [r4]
    e86c:	0a00000d 	beq	e8a8 <CUSBEndpoint::CUSBEndpoint(CUSBEndpoint*, CUSBDevice*)+0x58>
    e870:	e5d53004 	ldrb	r3, [r5, #4]
    e874:	e1a00004 	mov	r0, r4
    e878:	e5c43004 	strb	r3, [r4, #4]
    e87c:	e5d5e005 	ldrb	lr, [r5, #5]
    e880:	e5d5c006 	ldrb	ip, [r5, #6]
    e884:	e5951008 	ldr	r1, [r5, #8]
    e888:	e595200c 	ldr	r2, [r5, #12]
    e88c:	e5d53010 	ldrb	r3, [r5, #16]
    e890:	e5c4e005 	strb	lr, [r4, #5]
    e894:	e5c4c006 	strb	ip, [r4, #6]
    e898:	e5841008 	str	r1, [r4, #8]
    e89c:	e584200c 	str	r2, [r4, #12]
    e8a0:	e5c43010 	strb	r3, [r4, #16]
    e8a4:	e8bd8070 	pop	{r4, r5, r6, pc}
    e8a8:	e3a02070 	mov	r2, #112	; 0x70
    e8ac:	e59f101c 	ldr	r1, [pc, #28]	; e8d0 <CUSBEndpoint::CUSBEndpoint(CUSBEndpoint*, CUSBDevice*)+0x80>
    e8b0:	e59f001c 	ldr	r0, [pc, #28]	; e8d4 <CUSBEndpoint::CUSBEndpoint(CUSBEndpoint*, CUSBDevice*)+0x84>
    e8b4:	eb00306f 	bl	1aa78 <assertion_failed>
    e8b8:	eaffffec 	b	e870 <CUSBEndpoint::CUSBEndpoint(CUSBEndpoint*, CUSBDevice*)+0x20>
    e8bc:	e3a0206d 	mov	r2, #109	; 0x6d
    e8c0:	e59f1008 	ldr	r1, [pc, #8]	; e8d0 <CUSBEndpoint::CUSBEndpoint(CUSBEndpoint*, CUSBDevice*)+0x80>
    e8c4:	e59f000c 	ldr	r0, [pc, #12]	; e8d8 <CUSBEndpoint::CUSBEndpoint(CUSBEndpoint*, CUSBDevice*)+0x88>
    e8c8:	eb00306a 	bl	1aa78 <assertion_failed>
    e8cc:	eaffffe4 	b	e864 <CUSBEndpoint::CUSBEndpoint(CUSBEndpoint*, CUSBDevice*)+0x14>
    e8d0:	000252c8 	.word	0x000252c8
    e8d4:	00024e20 	.word	0x00024e20
    e8d8:	00025334 	.word	0x00025334

0000e8dc <CUSBEndpoint::~CUSBEndpoint()>:
    e8dc:	e12fff1e 	bx	lr

0000e8e0 <CUSBEndpoint::GetDevice() const>:
    e8e0:	e5903000 	ldr	r3, [r0]
    e8e4:	e3530000 	cmp	r3, #0
    e8e8:	0a000001 	beq	e8f4 <CUSBEndpoint::GetDevice() const+0x14>
    e8ec:	e1a00003 	mov	r0, r3
    e8f0:	e12fff1e 	bx	lr
    e8f4:	e92d4010 	push	{r4, lr}
    e8f8:	e1a04000 	mov	r4, r0
    e8fc:	e3a02081 	mov	r2, #129	; 0x81
    e900:	e59f1010 	ldr	r1, [pc, #16]	; e918 <CUSBEndpoint::GetDevice() const+0x38>
    e904:	e59f0010 	ldr	r0, [pc, #16]	; e91c <CUSBEndpoint::GetDevice() const+0x3c>
    e908:	eb00305a 	bl	1aa78 <assertion_failed>
    e90c:	e5943000 	ldr	r3, [r4]
    e910:	e1a00003 	mov	r0, r3
    e914:	e8bd8010 	pop	{r4, pc}
    e918:	000252c8 	.word	0x000252c8
    e91c:	00024e20 	.word	0x00024e20

0000e920 <CUSBEndpoint::GetNumber() const>:
    e920:	e5d00004 	ldrb	r0, [r0, #4]
    e924:	e12fff1e 	bx	lr

0000e928 <CUSBEndpoint::GetType() const>:
    e928:	e5d00005 	ldrb	r0, [r0, #5]
    e92c:	e12fff1e 	bx	lr

0000e930 <CUSBEndpoint::IsDirectionIn() const>:
    e930:	e5d00006 	ldrb	r0, [r0, #6]
    e934:	e12fff1e 	bx	lr

0000e938 <CUSBEndpoint::SetMaxPacketSize(unsigned int)>:
    e938:	e5801008 	str	r1, [r0, #8]
    e93c:	e12fff1e 	bx	lr

0000e940 <CUSBEndpoint::GetMaxPacketSize() const>:
    e940:	e5900008 	ldr	r0, [r0, #8]
    e944:	e12fff1e 	bx	lr

0000e948 <CUSBEndpoint::GetInterval() const>:
    e948:	e5d03005 	ldrb	r3, [r0, #5]
    e94c:	e92d4010 	push	{r4, lr}
    e950:	e3530002 	cmp	r3, #2
    e954:	e1a04000 	mov	r4, r0
    e958:	0a000003 	beq	e96c <CUSBEndpoint::GetInterval() const+0x24>
    e95c:	e3a020a0 	mov	r2, #160	; 0xa0
    e960:	e59f100c 	ldr	r1, [pc, #12]	; e974 <CUSBEndpoint::GetInterval() const+0x2c>
    e964:	e59f000c 	ldr	r0, [pc, #12]	; e978 <CUSBEndpoint::GetInterval() const+0x30>
    e968:	eb003042 	bl	1aa78 <assertion_failed>
    e96c:	e594000c 	ldr	r0, [r4, #12]
    e970:	e8bd8010 	pop	{r4, pc}
    e974:	000252c8 	.word	0x000252c8
    e978:	00025344 	.word	0x00025344

0000e97c <CUSBEndpoint::GetNextPID(bool)>:
    e97c:	e3510000 	cmp	r1, #0
    e980:	0a000004 	beq	e998 <CUSBEndpoint::GetNextPID(bool)+0x1c>
    e984:	e5d03005 	ldrb	r3, [r0, #5]
    e988:	e3530000 	cmp	r3, #0
    e98c:	1a000003 	bne	e9a0 <CUSBEndpoint::GetNextPID(bool)+0x24>
    e990:	e3a00002 	mov	r0, #2
    e994:	e12fff1e 	bx	lr
    e998:	e5d00010 	ldrb	r0, [r0, #16]
    e99c:	e12fff1e 	bx	lr
    e9a0:	e92d4010 	push	{r4, lr}
    e9a4:	e3a020a9 	mov	r2, #169	; 0xa9
    e9a8:	e59f100c 	ldr	r1, [pc, #12]	; e9bc <CUSBEndpoint::GetNextPID(bool)+0x40>
    e9ac:	e59f000c 	ldr	r0, [pc, #12]	; e9c0 <CUSBEndpoint::GetNextPID(bool)+0x44>
    e9b0:	eb003030 	bl	1aa78 <assertion_failed>
    e9b4:	e3a00002 	mov	r0, #2
    e9b8:	e8bd8010 	pop	{r4, pc}
    e9bc:	000252c8 	.word	0x000252c8
    e9c0:	00025364 	.word	0x00025364

0000e9c4 <CUSBEndpoint::SkipPID(unsigned int, bool)>:
    e9c4:	e5d03005 	ldrb	r3, [r0, #5]
    e9c8:	e92d4070 	push	{r4, r5, r6, lr}
    e9cc:	e3530002 	cmp	r3, #2
    e9d0:	e1a04000 	mov	r4, r0
    e9d4:	e1a06001 	mov	r6, r1
    e9d8:	e1a05002 	mov	r5, r2
    e9dc:	8a000011 	bhi	ea28 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x64>
    e9e0:	e3550000 	cmp	r5, #0
    e9e4:	1a000009 	bne	ea10 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x4c>
    e9e8:	e5d43010 	ldrb	r3, [r4, #16]
    e9ec:	e3530001 	cmp	r3, #1
    e9f0:	0a00001b 	beq	ea64 <CUSBEndpoint::SkipPID(unsigned int, bool)+0xa0>
    e9f4:	3a00001c 	bcc	ea6c <CUSBEndpoint::SkipPID(unsigned int, bool)+0xa8>
    e9f8:	e3530002 	cmp	r3, #2
    e9fc:	1a000013 	bne	ea50 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x8c>
    ea00:	e3160001 	tst	r6, #1
    ea04:	13a03001 	movne	r3, #1
    ea08:	15c43010 	strbne	r3, [r4, #16]
    ea0c:	e8bd8070 	pop	{r4, r5, r6, pc}
    ea10:	e5d43005 	ldrb	r3, [r4, #5]
    ea14:	e3530000 	cmp	r3, #0
    ea18:	1a000007 	bne	ea3c <CUSBEndpoint::SkipPID(unsigned int, bool)+0x78>
    ea1c:	e3a03000 	mov	r3, #0
    ea20:	e5c43010 	strb	r3, [r4, #16]
    ea24:	e8bd8070 	pop	{r4, r5, r6, pc}
    ea28:	e3a020b5 	mov	r2, #181	; 0xb5
    ea2c:	e59f1044 	ldr	r1, [pc, #68]	; ea78 <CUSBEndpoint::SkipPID(unsigned int, bool)+0xb4>
    ea30:	e59f0044 	ldr	r0, [pc, #68]	; ea7c <CUSBEndpoint::SkipPID(unsigned int, bool)+0xb8>
    ea34:	eb00300f 	bl	1aa78 <assertion_failed>
    ea38:	eaffffe8 	b	e9e0 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x1c>
    ea3c:	e3a020d4 	mov	r2, #212	; 0xd4
    ea40:	e59f1030 	ldr	r1, [pc, #48]	; ea78 <CUSBEndpoint::SkipPID(unsigned int, bool)+0xb4>
    ea44:	e59f0034 	ldr	r0, [pc, #52]	; ea80 <CUSBEndpoint::SkipPID(unsigned int, bool)+0xbc>
    ea48:	eb00300a 	bl	1aa78 <assertion_failed>
    ea4c:	eafffff2 	b	ea1c <CUSBEndpoint::SkipPID(unsigned int, bool)+0x58>
    ea50:	e3a020ce 	mov	r2, #206	; 0xce
    ea54:	e8bd4070 	pop	{r4, r5, r6, lr}
    ea58:	e59f1018 	ldr	r1, [pc, #24]	; ea78 <CUSBEndpoint::SkipPID(unsigned int, bool)+0xb4>
    ea5c:	e59f0020 	ldr	r0, [pc, #32]	; ea84 <CUSBEndpoint::SkipPID(unsigned int, bool)+0xc0>
    ea60:	ea003004 	b	1aa78 <assertion_failed>
    ea64:	e3160001 	tst	r6, #1
    ea68:	08bd8070 	popeq	{r4, r5, r6, pc}
    ea6c:	e3a03002 	mov	r3, #2
    ea70:	e5c43010 	strb	r3, [r4, #16]
    ea74:	e8bd8070 	pop	{r4, r5, r6, pc}
    ea78:	000252c8 	.word	0x000252c8
    ea7c:	00025384 	.word	0x00025384
    ea80:	00025364 	.word	0x00025364
    ea84:	00025034 	.word	0x00025034

0000ea88 <CUSBEndpoint::ResetPID()>:
    ea88:	e5d03005 	ldrb	r3, [r0, #5]
    ea8c:	e92d4010 	push	{r4, lr}
    ea90:	e3530001 	cmp	r3, #1
    ea94:	e1a04000 	mov	r4, r0
    ea98:	0a000003 	beq	eaac <CUSBEndpoint::ResetPID()+0x24>
    ea9c:	e3a020dc 	mov	r2, #220	; 0xdc
    eaa0:	e59f1010 	ldr	r1, [pc, #16]	; eab8 <CUSBEndpoint::ResetPID()+0x30>
    eaa4:	e59f0010 	ldr	r0, [pc, #16]	; eabc <CUSBEndpoint::ResetPID()+0x34>
    eaa8:	eb002ff2 	bl	1aa78 <assertion_failed>
    eaac:	e3a03001 	mov	r3, #1
    eab0:	e5c43010 	strb	r3, [r4, #16]
    eab4:	e8bd8010 	pop	{r4, pc}
    eab8:	000252c8 	.word	0x000252c8
    eabc:	000253e4 	.word	0x000253e4

0000eac0 <CUSBHostController::CUSBHostController()>:
    eac0:	e59f3004 	ldr	r3, [pc, #4]	; eacc <CUSBHostController::CUSBHostController()+0xc>
    eac4:	e5803000 	str	r3, [r0]
    eac8:	e12fff1e 	bx	lr
    eacc:	00025408 	.word	0x00025408

0000ead0 <CUSBHostController::~CUSBHostController()>:
    ead0:	e12fff1e 	bx	lr

0000ead4 <CUSBHostController::~CUSBHostController()>:
    ead4:	e92d4010 	push	{r4, lr}
    ead8:	e1a04000 	mov	r4, r0
    eadc:	e3a01004 	mov	r1, #4
    eae0:	eb0050ad 	bl	22d9c <operator delete(void*, unsigned int)>
    eae4:	e1a00004 	mov	r0, r4
    eae8:	e8bd8010 	pop	{r4, pc}

0000eaec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>:
    eaec:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eaf0:	e1a06000 	mov	r6, r0
    eaf4:	e24dd034 	sub	sp, sp, #52	; 0x34
    eaf8:	e3a00008 	mov	r0, #8
    eafc:	e1dd56b4 	ldrh	r5, [sp, #100]	; 0x64
    eb00:	e1a0a002 	mov	sl, r2
    eb04:	e1a09003 	mov	r9, r3
    eb08:	e1dd85b8 	ldrh	r8, [sp, #88]	; 0x58
    eb0c:	e1dd75bc 	ldrh	r7, [sp, #92]	; 0x5c
    eb10:	e1a0b001 	mov	fp, r1
    eb14:	eb00509c 	bl	22d8c <operator new(unsigned int)>
    eb18:	e1a04000 	mov	r4, r0
    eb1c:	e58d0000 	str	r0, [sp]
    eb20:	e1a02428 	lsr	r2, r8, #8
    eb24:	e5c0a000 	strb	sl, [r0]
    eb28:	e5c09001 	strb	r9, [r0, #1]
    eb2c:	e1a00427 	lsr	r0, r7, #8
    eb30:	e1a0c425 	lsr	ip, r5, #8
    eb34:	e1a0100b 	mov	r1, fp
    eb38:	e5c42003 	strb	r2, [r4, #3]
    eb3c:	e1a03005 	mov	r3, r5
    eb40:	e59d2060 	ldr	r2, [sp, #96]	; 0x60
    eb44:	e5c40005 	strb	r0, [r4, #5]
    eb48:	e28d0008 	add	r0, sp, #8
    eb4c:	e5c4c007 	strb	ip, [r4, #7]
    eb50:	e5c48002 	strb	r8, [r4, #2]
    eb54:	e5c47004 	strb	r7, [r4, #4]
    eb58:	e5c45006 	strb	r5, [r4, #6]
    eb5c:	eb000061 	bl	ece8 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
    eb60:	e5963000 	ldr	r3, [r6]
    eb64:	e1a00006 	mov	r0, r6
    eb68:	e5933008 	ldr	r3, [r3, #8]
    eb6c:	e28d1008 	add	r1, sp, #8
    eb70:	e3a02000 	mov	r2, #0
    eb74:	e12fff33 	blx	r3
    eb78:	e3500000 	cmp	r0, #0
    eb7c:	0a00000a 	beq	ebac <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)+0xc0>
    eb80:	e28d0008 	add	r0, sp, #8
    eb84:	eb000093 	bl	edd8 <CUSBRequest::GetResultLength() const>
    eb88:	e1a05000 	mov	r5, r0
    eb8c:	e1a00004 	mov	r0, r4
    eb90:	e3a01008 	mov	r1, #8
    eb94:	eb005080 	bl	22d9c <operator delete(void*, unsigned int)>
    eb98:	e28d0008 	add	r0, sp, #8
    eb9c:	eb000076 	bl	ed7c <CUSBRequest::~CUSBRequest()>
    eba0:	e1a00005 	mov	r0, r5
    eba4:	e28dd034 	add	sp, sp, #52	; 0x34
    eba8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ebac:	e3e05000 	mvn	r5, #0
    ebb0:	eafffff5 	b	eb8c <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)+0xa0>

0000ebb4 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>:
    ebb4:	e92d4030 	push	{r4, r5, lr}
    ebb8:	e59d500c 	ldr	r5, [sp, #12]
    ebbc:	e5dd4014 	ldrb	r4, [sp, #20]
    ebc0:	e1dde1b8 	ldrh	lr, [sp, #24]
    ebc4:	e1ddc1b0 	ldrh	ip, [sp, #16]
    ebc8:	e1833402 	orr	r3, r3, r2, lsl #8
    ebcc:	e58d300c 	str	r3, [sp, #12]
    ebd0:	e58d5014 	str	r5, [sp, #20]
    ebd4:	e1a02004 	mov	r2, r4
    ebd8:	e58de010 	str	lr, [sp, #16]
    ebdc:	e58dc018 	str	ip, [sp, #24]
    ebe0:	e3a03006 	mov	r3, #6
    ebe4:	e8bd4030 	pop	{r4, r5, lr}
    ebe8:	eaffffbf 	b	eaec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>

0000ebec <CUSBHostController::SetAddress(CUSBEndpoint*, unsigned char)>:
    ebec:	e92d4010 	push	{r4, lr}
    ebf0:	e3a04000 	mov	r4, #0
    ebf4:	e24dd010 	sub	sp, sp, #16
    ebf8:	e58d2000 	str	r2, [sp]
    ebfc:	e58d400c 	str	r4, [sp, #12]
    ec00:	e58d4008 	str	r4, [sp, #8]
    ec04:	e58d4004 	str	r4, [sp, #4]
    ec08:	e1a02004 	mov	r2, r4
    ec0c:	e3a03005 	mov	r3, #5
    ec10:	ebffffb5 	bl	eaec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    ec14:	e1500004 	cmp	r0, r4
    ec18:	b1a00004 	movlt	r0, r4
    ec1c:	ba000003 	blt	ec30 <CUSBHostController::SetAddress(CUSBEndpoint*, unsigned char)+0x44>
    ec20:	eb004bdc 	bl	21b98 <CTimer::Get()>
    ec24:	e3a00032 	mov	r0, #50	; 0x32
    ec28:	eb004ba1 	bl	21ab4 <CTimer::SimpleMsDelay(unsigned int)>
    ec2c:	e3a00001 	mov	r0, #1
    ec30:	e28dd010 	add	sp, sp, #16
    ec34:	e8bd8010 	pop	{r4, pc}

0000ec38 <CUSBHostController::SetConfiguration(CUSBEndpoint*, unsigned char)>:
    ec38:	e92d4010 	push	{r4, lr}
    ec3c:	e3a04000 	mov	r4, #0
    ec40:	e24dd010 	sub	sp, sp, #16
    ec44:	e58d2000 	str	r2, [sp]
    ec48:	e58d400c 	str	r4, [sp, #12]
    ec4c:	e58d4008 	str	r4, [sp, #8]
    ec50:	e58d4004 	str	r4, [sp, #4]
    ec54:	e1a02004 	mov	r2, r4
    ec58:	e3a03009 	mov	r3, #9
    ec5c:	ebffffa2 	bl	eaec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    ec60:	e1500004 	cmp	r0, r4
    ec64:	b1a00004 	movlt	r0, r4
    ec68:	ba000003 	blt	ec7c <CUSBHostController::SetConfiguration(CUSBEndpoint*, unsigned char)+0x44>
    ec6c:	eb004bc9 	bl	21b98 <CTimer::Get()>
    ec70:	e3a00032 	mov	r0, #50	; 0x32
    ec74:	eb004b8e 	bl	21ab4 <CTimer::SimpleMsDelay(unsigned int)>
    ec78:	e3a00001 	mov	r0, #1
    ec7c:	e28dd010 	add	sp, sp, #16
    ec80:	e8bd8010 	pop	{r4, pc}

0000ec84 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>:
    ec84:	e3a0c000 	mov	ip, #0
    ec88:	e92d4010 	push	{r4, lr}
    ec8c:	e1a04000 	mov	r4, r0
    ec90:	e24dd030 	sub	sp, sp, #48	; 0x30
    ec94:	e58dc000 	str	ip, [sp]
    ec98:	e28d0008 	add	r0, sp, #8
    ec9c:	eb000011 	bl	ece8 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
    eca0:	e5943000 	ldr	r3, [r4]
    eca4:	e1a00004 	mov	r0, r4
    eca8:	e5933008 	ldr	r3, [r3, #8]
    ecac:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
    ecb0:	e28d1008 	add	r1, sp, #8
    ecb4:	e12fff33 	blx	r3
    ecb8:	e3500000 	cmp	r0, #0
    ecbc:	0a000007 	beq	ece0 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)+0x5c>
    ecc0:	e28d0008 	add	r0, sp, #8
    ecc4:	eb000043 	bl	edd8 <CUSBRequest::GetResultLength() const>
    ecc8:	e1a04000 	mov	r4, r0
    eccc:	e28d0008 	add	r0, sp, #8
    ecd0:	eb000029 	bl	ed7c <CUSBRequest::~CUSBRequest()>
    ecd4:	e1a00004 	mov	r0, r4
    ecd8:	e28dd030 	add	sp, sp, #48	; 0x30
    ecdc:	e8bd8010 	pop	{r4, pc}
    ece0:	e3e04000 	mvn	r4, #0
    ece4:	eafffff8 	b	eccc <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)+0x48>

0000ece8 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>:
    ece8:	e92d4010 	push	{r4, lr}
    ecec:	e1a04000 	mov	r4, r0
    ecf0:	e3a00000 	mov	r0, #0
    ecf4:	e59dc008 	ldr	ip, [sp, #8]
    ecf8:	e1510000 	cmp	r1, r0
    ecfc:	e5841000 	str	r1, [r4]
    ed00:	e584300c 	str	r3, [r4, #12]
    ed04:	e5842008 	str	r2, [r4, #8]
    ed08:	e584c004 	str	ip, [r4, #4]
    ed0c:	e5840010 	str	r0, [r4, #16]
    ed10:	e5840014 	str	r0, [r4, #20]
    ed14:	e5840018 	str	r0, [r4, #24]
    ed18:	e584001c 	str	r0, [r4, #28]
    ed1c:	e5840020 	str	r0, [r4, #32]
    ed20:	e5c40024 	strb	r0, [r4, #36]	; 0x24
    ed24:	0a00000b 	beq	ed58 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x70>
    ed28:	e3520000 	cmp	r2, #0
    ed2c:	0a000001 	beq	ed38 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x50>
    ed30:	e1a00004 	mov	r0, r4
    ed34:	e8bd8010 	pop	{r4, pc}
    ed38:	e594300c 	ldr	r3, [r4, #12]
    ed3c:	e3530000 	cmp	r3, #0
    ed40:	0afffffa 	beq	ed30 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x48>
    ed44:	e3a02024 	mov	r2, #36	; 0x24
    ed48:	e59f1020 	ldr	r1, [pc, #32]	; ed70 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x88>
    ed4c:	e59f0020 	ldr	r0, [pc, #32]	; ed74 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x8c>
    ed50:	eb002f48 	bl	1aa78 <assertion_failed>
    ed54:	eafffff5 	b	ed30 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x48>
    ed58:	e3a02023 	mov	r2, #35	; 0x23
    ed5c:	e59f100c 	ldr	r1, [pc, #12]	; ed70 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x88>
    ed60:	e59f0010 	ldr	r0, [pc, #16]	; ed78 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x90>
    ed64:	eb002f43 	bl	1aa78 <assertion_failed>
    ed68:	e5942008 	ldr	r2, [r4, #8]
    ed6c:	eaffffed 	b	ed28 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x40>
    ed70:	00025418 	.word	0x00025418
    ed74:	00025428 	.word	0x00025428
    ed78:	00024e00 	.word	0x00024e00

0000ed7c <CUSBRequest::~CUSBRequest()>:
    ed7c:	e12fff1e 	bx	lr

0000ed80 <CUSBRequest::GetEndpoint() const>:
    ed80:	e5903000 	ldr	r3, [r0]
    ed84:	e3530000 	cmp	r3, #0
    ed88:	0a000001 	beq	ed94 <CUSBRequest::GetEndpoint() const+0x14>
    ed8c:	e1a00003 	mov	r0, r3
    ed90:	e12fff1e 	bx	lr
    ed94:	e92d4010 	push	{r4, lr}
    ed98:	e1a04000 	mov	r4, r0
    ed9c:	e3a02031 	mov	r2, #49	; 0x31
    eda0:	e59f1010 	ldr	r1, [pc, #16]	; edb8 <CUSBRequest::GetEndpoint() const+0x38>
    eda4:	e59f0010 	ldr	r0, [pc, #16]	; edbc <CUSBRequest::GetEndpoint() const+0x3c>
    eda8:	eb002f32 	bl	1aa78 <assertion_failed>
    edac:	e5943000 	ldr	r3, [r4]
    edb0:	e1a00003 	mov	r0, r3
    edb4:	e8bd8010 	pop	{r4, pc}
    edb8:	00025418 	.word	0x00025418
    edbc:	00024e00 	.word	0x00024e00

0000edc0 <CUSBRequest::SetStatus(int)>:
    edc0:	e5801010 	str	r1, [r0, #16]
    edc4:	e12fff1e 	bx	lr

0000edc8 <CUSBRequest::SetResultLen(unsigned int)>:
    edc8:	e5801014 	str	r1, [r0, #20]
    edcc:	e12fff1e 	bx	lr

0000edd0 <CUSBRequest::GetStatus() const>:
    edd0:	e5900010 	ldr	r0, [r0, #16]
    edd4:	e12fff1e 	bx	lr

0000edd8 <CUSBRequest::GetResultLength() const>:
    edd8:	e5903010 	ldr	r3, [r0, #16]
    eddc:	e92d4010 	push	{r4, lr}
    ede0:	e3530000 	cmp	r3, #0
    ede4:	e1a04000 	mov	r4, r0
    ede8:	1a000003 	bne	edfc <CUSBRequest::GetResultLength() const+0x24>
    edec:	e3a02046 	mov	r2, #70	; 0x46
    edf0:	e59f100c 	ldr	r1, [pc, #12]	; ee04 <CUSBRequest::GetResultLength() const+0x2c>
    edf4:	e59f000c 	ldr	r0, [pc, #12]	; ee08 <CUSBRequest::GetResultLength() const+0x30>
    edf8:	eb002f1e 	bl	1aa78 <assertion_failed>
    edfc:	e5940014 	ldr	r0, [r4, #20]
    ee00:	e8bd8010 	pop	{r4, pc}
    ee04:	00025418 	.word	0x00025418
    ee08:	0002544c 	.word	0x0002544c

0000ee0c <CUSBRequest::GetSetupData()>:
    ee0c:	e92d4010 	push	{r4, lr}
    ee10:	e1a04000 	mov	r4, r0
    ee14:	e5900000 	ldr	r0, [r0]
    ee18:	ebfffec2 	bl	e928 <CUSBEndpoint::GetType() const>
    ee1c:	e3500000 	cmp	r0, #0
    ee20:	1a000008 	bne	ee48 <CUSBRequest::GetSetupData()+0x3c>
    ee24:	e5940004 	ldr	r0, [r4, #4]
    ee28:	e3500000 	cmp	r0, #0
    ee2c:	18bd8010 	popne	{r4, pc}
    ee30:	e3a0204e 	mov	r2, #78	; 0x4e
    ee34:	e59f1020 	ldr	r1, [pc, #32]	; ee5c <CUSBRequest::GetSetupData()+0x50>
    ee38:	e59f0020 	ldr	r0, [pc, #32]	; ee60 <CUSBRequest::GetSetupData()+0x54>
    ee3c:	eb002f0d 	bl	1aa78 <assertion_failed>
    ee40:	e5940004 	ldr	r0, [r4, #4]
    ee44:	e8bd8010 	pop	{r4, pc}
    ee48:	e3a0204d 	mov	r2, #77	; 0x4d
    ee4c:	e59f1008 	ldr	r1, [pc, #8]	; ee5c <CUSBRequest::GetSetupData()+0x50>
    ee50:	e59f000c 	ldr	r0, [pc, #12]	; ee64 <CUSBRequest::GetSetupData()+0x58>
    ee54:	eb002f07 	bl	1aa78 <assertion_failed>
    ee58:	eafffff1 	b	ee24 <CUSBRequest::GetSetupData()+0x18>
    ee5c:	00025418 	.word	0x00025418
    ee60:	00025488 	.word	0x00025488
    ee64:	00025458 	.word	0x00025458

0000ee68 <CUSBRequest::GetBuffer()>:
    ee68:	e5903008 	ldr	r3, [r0, #8]
    ee6c:	e3530000 	cmp	r3, #0
    ee70:	0a000001 	beq	ee7c <CUSBRequest::GetBuffer()+0x14>
    ee74:	e1a00003 	mov	r0, r3
    ee78:	e12fff1e 	bx	lr
    ee7c:	e590200c 	ldr	r2, [r0, #12]
    ee80:	e3520000 	cmp	r2, #0
    ee84:	0afffffa 	beq	ee74 <CUSBRequest::GetBuffer()+0xc>
    ee88:	e92d4010 	push	{r4, lr}
    ee8c:	e1a04000 	mov	r4, r0
    ee90:	e3a02056 	mov	r2, #86	; 0x56
    ee94:	e59f1010 	ldr	r1, [pc, #16]	; eeac <CUSBRequest::GetBuffer()+0x44>
    ee98:	e59f0010 	ldr	r0, [pc, #16]	; eeb0 <CUSBRequest::GetBuffer()+0x48>
    ee9c:	eb002ef5 	bl	1aa78 <assertion_failed>
    eea0:	e5943008 	ldr	r3, [r4, #8]
    eea4:	e1a00003 	mov	r0, r3
    eea8:	e8bd8010 	pop	{r4, pc}
    eeac:	00025418 	.word	0x00025418
    eeb0:	00025428 	.word	0x00025428

0000eeb4 <CUSBRequest::GetBufLen() const>:
    eeb4:	e590000c 	ldr	r0, [r0, #12]
    eeb8:	e12fff1e 	bx	lr

0000eebc <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>:
    eebc:	e3510000 	cmp	r1, #0
    eec0:	e5801018 	str	r1, [r0, #24]
    eec4:	e580201c 	str	r2, [r0, #28]
    eec8:	e5803020 	str	r3, [r0, #32]
    eecc:	112fff1e 	bxne	lr
    eed0:	e3a02066 	mov	r2, #102	; 0x66
    eed4:	e59f1004 	ldr	r1, [pc, #4]	; eee0 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)+0x24>
    eed8:	e59f0004 	ldr	r0, [pc, #4]	; eee4 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)+0x28>
    eedc:	ea002ee5 	b	1aa78 <assertion_failed>
    eee0:	00025418 	.word	0x00025418
    eee4:	0002549c 	.word	0x0002549c

0000eee8 <CUSBRequest::CallCompletionRoutine()>:
    eee8:	e5903018 	ldr	r3, [r0, #24]
    eeec:	e92d4010 	push	{r4, lr}
    eef0:	e3530000 	cmp	r3, #0
    eef4:	e1a04000 	mov	r4, r0
    eef8:	0a000004 	beq	ef10 <CUSBRequest::CallCompletionRoutine()+0x28>
    eefc:	e5942020 	ldr	r2, [r4, #32]
    ef00:	e594101c 	ldr	r1, [r4, #28]
    ef04:	e1a00004 	mov	r0, r4
    ef08:	e8bd4010 	pop	{r4, lr}
    ef0c:	e12fff13 	bx	r3
    ef10:	e3a0206b 	mov	r2, #107	; 0x6b
    ef14:	e59f100c 	ldr	r1, [pc, #12]	; ef28 <CUSBRequest::CallCompletionRoutine()+0x40>
    ef18:	e59f000c 	ldr	r0, [pc, #12]	; ef2c <CUSBRequest::CallCompletionRoutine()+0x44>
    ef1c:	eb002ed5 	bl	1aa78 <assertion_failed>
    ef20:	e5943018 	ldr	r3, [r4, #24]
    ef24:	eafffff4 	b	eefc <CUSBRequest::CallCompletionRoutine()+0x14>
    ef28:	00025418 	.word	0x00025418
    ef2c:	0002549c 	.word	0x0002549c

0000ef30 <CUSBRequest::SetCompleteOnNAK()>:
    ef30:	e3a03001 	mov	r3, #1
    ef34:	e5c03024 	strb	r3, [r0, #36]	; 0x24
    ef38:	e12fff1e 	bx	lr

0000ef3c <CUSBRequest::IsCompleteOnNAK() const>:
    ef3c:	e5d00024 	ldrb	r0, [r0, #36]	; 0x24
    ef40:	e12fff1e 	bx	lr

0000ef44 <CUSBRequest::operator new(unsigned int)>:
    ef44:	e3500028 	cmp	r0, #40	; 0x28
    ef48:	e92d4010 	push	{r4, lr}
    ef4c:	0a000003 	beq	ef60 <CUSBRequest::operator new(unsigned int)+0x1c>
    ef50:	e3a0207a 	mov	r2, #122	; 0x7a
    ef54:	e59f1038 	ldr	r1, [pc, #56]	; ef94 <CUSBRequest::operator new(unsigned int)+0x50>
    ef58:	e59f0038 	ldr	r0, [pc, #56]	; ef98 <CUSBRequest::operator new(unsigned int)+0x54>
    ef5c:	eb002ec5 	bl	1aa78 <assertion_failed>
    ef60:	e59f4034 	ldr	r4, [pc, #52]	; ef9c <CUSBRequest::operator new(unsigned int)+0x58>
    ef64:	e5940000 	ldr	r0, [r4]
    ef68:	e3500000 	cmp	r0, #0
    ef6c:	0a000001 	beq	ef78 <CUSBRequest::operator new(unsigned int)+0x34>
    ef70:	e8bd4010 	pop	{r4, lr}
    ef74:	ea002fdd 	b	1aef0 <CClassAllocator::Allocate()>
    ef78:	e59f0020 	ldr	r0, [pc, #32]	; efa0 <CUSBRequest::operator new(unsigned int)+0x5c>
    ef7c:	e3a0207a 	mov	r2, #122	; 0x7a
    ef80:	e59f100c 	ldr	r1, [pc, #12]	; ef94 <CUSBRequest::operator new(unsigned int)+0x50>
    ef84:	eb002ebb 	bl	1aa78 <assertion_failed>
    ef88:	e5940000 	ldr	r0, [r4]
    ef8c:	e8bd4010 	pop	{r4, lr}
    ef90:	ea002fd6 	b	1aef0 <CClassAllocator::Allocate()>
    ef94:	00025418 	.word	0x00025418
    ef98:	000254b8 	.word	0x000254b8
    ef9c:	0002b93c 	.word	0x0002b93c
    efa0:	00024f14 	.word	0x00024f14

0000efa4 <CUSBRequest::operator delete(void*, unsigned int)>:
    efa4:	e3510028 	cmp	r1, #40	; 0x28
    efa8:	e92d4070 	push	{r4, r5, r6, lr}
    efac:	e1a05000 	mov	r5, r0
    efb0:	0a000003 	beq	efc4 <CUSBRequest::operator delete(void*, unsigned int)+0x20>
    efb4:	e3a0207a 	mov	r2, #122	; 0x7a
    efb8:	e59f1040 	ldr	r1, [pc, #64]	; f000 <CUSBRequest::operator delete(void*, unsigned int)+0x5c>
    efbc:	e59f0040 	ldr	r0, [pc, #64]	; f004 <CUSBRequest::operator delete(void*, unsigned int)+0x60>
    efc0:	eb002eac 	bl	1aa78 <assertion_failed>
    efc4:	e59f403c 	ldr	r4, [pc, #60]	; f008 <CUSBRequest::operator delete(void*, unsigned int)+0x64>
    efc8:	e5940000 	ldr	r0, [r4]
    efcc:	e3500000 	cmp	r0, #0
    efd0:	0a000002 	beq	efe0 <CUSBRequest::operator delete(void*, unsigned int)+0x3c>
    efd4:	e1a01005 	mov	r1, r5
    efd8:	e8bd4070 	pop	{r4, r5, r6, lr}
    efdc:	ea002ffe 	b	1afdc <CClassAllocator::Free(void*)>
    efe0:	e59f1018 	ldr	r1, [pc, #24]	; f000 <CUSBRequest::operator delete(void*, unsigned int)+0x5c>
    efe4:	e59f0020 	ldr	r0, [pc, #32]	; f00c <CUSBRequest::operator delete(void*, unsigned int)+0x68>
    efe8:	e3a0207a 	mov	r2, #122	; 0x7a
    efec:	eb002ea1 	bl	1aa78 <assertion_failed>
    eff0:	e5940000 	ldr	r0, [r4]
    eff4:	e1a01005 	mov	r1, r5
    eff8:	e8bd4070 	pop	{r4, r5, r6, lr}
    effc:	ea002ff6 	b	1afdc <CClassAllocator::Free(void*)>
    f000:	00025418 	.word	0x00025418
    f004:	000254b8 	.word	0x000254b8
    f008:	0002b93c 	.word	0x0002b93c
    f00c:	00024f14 	.word	0x00024f14

0000f010 <CUSBRequest::InitAllocator(unsigned int)>:
    f010:	e92d4070 	push	{r4, r5, r6, lr}
    f014:	e59f4040 	ldr	r4, [pc, #64]	; f05c <CUSBRequest::InitAllocator(unsigned int)+0x4c>
    f018:	e1a06000 	mov	r6, r0
    f01c:	e5943000 	ldr	r3, [r4]
    f020:	e3530000 	cmp	r3, #0
    f024:	0a000003 	beq	f038 <CUSBRequest::InitAllocator(unsigned int)+0x28>
    f028:	e3a0207a 	mov	r2, #122	; 0x7a
    f02c:	e59f102c 	ldr	r1, [pc, #44]	; f060 <CUSBRequest::InitAllocator(unsigned int)+0x50>
    f030:	e59f002c 	ldr	r0, [pc, #44]	; f064 <CUSBRequest::InitAllocator(unsigned int)+0x54>
    f034:	eb002e8f 	bl	1aa78 <assertion_failed>
    f038:	e3a0001c 	mov	r0, #28
    f03c:	eb004f52 	bl	22d8c <operator new(unsigned int)>
    f040:	e1a05000 	mov	r5, r0
    f044:	e1a02006 	mov	r2, r6
    f048:	e59f3018 	ldr	r3, [pc, #24]	; f068 <CUSBRequest::InitAllocator(unsigned int)+0x58>
    f04c:	e3a01028 	mov	r1, #40	; 0x28
    f050:	eb002f8d 	bl	1ae8c <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
    f054:	e5845000 	str	r5, [r4]
    f058:	e8bd8070 	pop	{r4, r5, r6, pc}
    f05c:	0002b93c 	.word	0x0002b93c
    f060:	00025418 	.word	0x00025418
    f064:	00024f28 	.word	0x00024f28
    f068:	000254d8 	.word	0x000254d8

0000f06c <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)>:
    f06c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    f070:	e59f4054 	ldr	r4, [pc, #84]	; f0cc <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)+0x60>
    f074:	e24dd00c 	sub	sp, sp, #12
    f078:	e5943000 	ldr	r3, [r4]
    f07c:	e1a06000 	mov	r6, r0
    f080:	e3530000 	cmp	r3, #0
    f084:	e1a07001 	mov	r7, r1
    f088:	0a000003 	beq	f09c <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)+0x30>
    f08c:	e3a0207a 	mov	r2, #122	; 0x7a
    f090:	e59f1038 	ldr	r1, [pc, #56]	; f0d0 <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)+0x64>
    f094:	e59f0038 	ldr	r0, [pc, #56]	; f0d4 <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)+0x68>
    f098:	eb002e76 	bl	1aa78 <assertion_failed>
    f09c:	e3a0001c 	mov	r0, #28
    f0a0:	eb004f39 	bl	22d8c <operator new(unsigned int)>
    f0a4:	e59f102c 	ldr	r1, [pc, #44]	; f0d8 <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)+0x6c>
    f0a8:	e1a03007 	mov	r3, r7
    f0ac:	e58d1000 	str	r1, [sp]
    f0b0:	e1a02006 	mov	r2, r6
    f0b4:	e3a01028 	mov	r1, #40	; 0x28
    f0b8:	e1a05000 	mov	r5, r0
    f0bc:	eb002f7e 	bl	1aebc <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
    f0c0:	e5845000 	str	r5, [r4]
    f0c4:	e28dd00c 	add	sp, sp, #12
    f0c8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    f0cc:	0002b93c 	.word	0x0002b93c
    f0d0:	00025418 	.word	0x00025418
    f0d4:	00024f28 	.word	0x00024f28
    f0d8:	000254d8 	.word	0x000254d8

0000f0dc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>:
    f0dc:	e92d4070 	push	{r4, r5, r6, lr}
    f0e0:	e2506000 	subs	r6, r0, #0
    f0e4:	e1a04001 	mov	r4, r1
    f0e8:	0a000043 	beq	f1fc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x120>
    f0ec:	e3540000 	cmp	r4, #0
    f0f0:	0a000046 	beq	f210 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x134>
    f0f4:	e59f13e0 	ldr	r1, [pc, #992]	; f4dc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x400>
    f0f8:	e1a00004 	mov	r0, r4
    f0fc:	eb004377 	bl	1fee0 <CString::Compare(char const*) const>
    f100:	e3500000 	cmp	r0, #0
    f104:	1a000016 	bne	f164 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x88>
    f108:	e3a00058 	mov	r0, #88	; 0x58
    f10c:	eb004f1e 	bl	22d8c <operator new(unsigned int)>
    f110:	e1a01006 	mov	r1, r6
    f114:	e1a05000 	mov	r5, r0
    f118:	eb00013a 	bl	f608 <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)>
    f11c:	e1a00005 	mov	r0, r5
    f120:	eb001741 	bl	14e2c <CUSBFunction::GetDevice() const>
    f124:	e1a06000 	mov	r6, r0
    f128:	e1a00004 	mov	r0, r4
    f12c:	eb004318 	bl	1fd94 <CString::operator char const*() const>
    f130:	e59f23a8 	ldr	r2, [pc, #936]	; f4e0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x404>
    f134:	e1a03000 	mov	r3, r0
    f138:	e3a01003 	mov	r1, #3
    f13c:	e1a00006 	mov	r0, r6
    f140:	ebfffafe 	bl	dd40 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    f144:	e3540000 	cmp	r4, #0
    f148:	0a000003 	beq	f15c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x80>
    f14c:	e5943000 	ldr	r3, [r4]
    f150:	e1a00004 	mov	r0, r4
    f154:	e5933004 	ldr	r3, [r3, #4]
    f158:	e12fff33 	blx	r3
    f15c:	e1a00005 	mov	r0, r5
    f160:	e8bd8070 	pop	{r4, r5, r6, pc}
    f164:	e59f1378 	ldr	r1, [pc, #888]	; f4e4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x408>
    f168:	e1a00004 	mov	r0, r4
    f16c:	eb00435b 	bl	1fee0 <CString::Compare(char const*) const>
    f170:	e3500000 	cmp	r0, #0
    f174:	0affffe3 	beq	f108 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x2c>
    f178:	e59f1368 	ldr	r1, [pc, #872]	; f4e8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40c>
    f17c:	e1a00004 	mov	r0, r4
    f180:	eb004356 	bl	1fee0 <CString::Compare(char const*) const>
    f184:	e3500000 	cmp	r0, #0
    f188:	1a000005 	bne	f1a4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0xc8>
    f18c:	e3a00030 	mov	r0, #48	; 0x30
    f190:	eb004efd 	bl	22d8c <operator new(unsigned int)>
    f194:	e1a01006 	mov	r1, r6
    f198:	e1a05000 	mov	r5, r0
    f19c:	eb0003cd 	bl	100d8 <CUSBBulkOnlyMassStorageDevice::CUSBBulkOnlyMassStorageDevice(CUSBFunction*)>
    f1a0:	eaffffdd 	b	f11c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    f1a4:	e59f1340 	ldr	r1, [pc, #832]	; f4ec <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x410>
    f1a8:	e1a00004 	mov	r0, r4
    f1ac:	eb00434b 	bl	1fee0 <CString::Compare(char const*) const>
    f1b0:	e3500000 	cmp	r0, #0
    f1b4:	0a00000a 	beq	f1e4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x108>
    f1b8:	e59f1330 	ldr	r1, [pc, #816]	; f4f0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x414>
    f1bc:	e1a00004 	mov	r0, r4
    f1c0:	eb004346 	bl	1fee0 <CString::Compare(char const*) const>
    f1c4:	e3500000 	cmp	r0, #0
    f1c8:	1a000015 	bne	f224 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x148>
    f1cc:	e3a00030 	mov	r0, #48	; 0x30
    f1d0:	eb004eed 	bl	22d8c <operator new(unsigned int)>
    f1d4:	e1a01006 	mov	r1, r6
    f1d8:	e1a05000 	mov	r5, r0
    f1dc:	eb000d08 	bl	12604 <CUSBMouseDevice::CUSBMouseDevice(CUSBFunction*)>
    f1e0:	eaffffcd 	b	f11c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    f1e4:	e3a00e45 	mov	r0, #1104	; 0x450
    f1e8:	eb004ee7 	bl	22d8c <operator new(unsigned int)>
    f1ec:	e1a01006 	mov	r1, r6
    f1f0:	e1a05000 	mov	r5, r0
    f1f4:	eb000947 	bl	11718 <CUSBKeyboardDevice::CUSBKeyboardDevice(CUSBFunction*)>
    f1f8:	eaffffc7 	b	f11c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    f1fc:	e3a0202b 	mov	r2, #43	; 0x2b
    f200:	e59f12ec 	ldr	r1, [pc, #748]	; f4f4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x418>
    f204:	e59f02ec 	ldr	r0, [pc, #748]	; f4f8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x41c>
    f208:	eb002e1a 	bl	1aa78 <assertion_failed>
    f20c:	eaffffb6 	b	f0ec <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x10>
    f210:	e3a0202c 	mov	r2, #44	; 0x2c
    f214:	e59f12d8 	ldr	r1, [pc, #728]	; f4f4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x418>
    f218:	e59f02dc 	ldr	r0, [pc, #732]	; f4fc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x420>
    f21c:	eb002e15 	bl	1aa78 <assertion_failed>
    f220:	eaffffb3 	b	f0f4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x18>
    f224:	e59f12d4 	ldr	r1, [pc, #724]	; f500 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x424>
    f228:	e1a00004 	mov	r0, r4
    f22c:	eb00432b 	bl	1fee0 <CString::Compare(char const*) const>
    f230:	e3500000 	cmp	r0, #0
    f234:	0a00000a 	beq	f264 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x188>
    f238:	e59f12c4 	ldr	r1, [pc, #708]	; f504 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x428>
    f23c:	e1a00004 	mov	r0, r4
    f240:	eb004326 	bl	1fee0 <CString::Compare(char const*) const>
    f244:	e3500000 	cmp	r0, #0
    f248:	1a00000c 	bne	f280 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x1a4>
    f24c:	e3a00f5b 	mov	r0, #364	; 0x16c
    f250:	eb004ecd 	bl	22d8c <operator new(unsigned int)>
    f254:	e1a01006 	mov	r1, r6
    f258:	e1a05000 	mov	r5, r0
    f25c:	eb000f77 	bl	13040 <CUSBGamePadPS3Device::CUSBGamePadPS3Device(CUSBFunction*)>
    f260:	eaffffad 	b	f11c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    f264:	e3a00f4f 	mov	r0, #316	; 0x13c
    f268:	eb004ec7 	bl	22d8c <operator new(unsigned int)>
    f26c:	e1a01006 	mov	r1, r6
    f270:	e3a02001 	mov	r2, #1
    f274:	e1a05000 	mov	r5, r0
    f278:	eb000d04 	bl	12690 <CUSBGamePadStandardDevice::CUSBGamePadStandardDevice(CUSBFunction*, bool)>
    f27c:	eaffffa6 	b	f11c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    f280:	e59f1280 	ldr	r1, [pc, #640]	; f508 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x42c>
    f284:	e1a00004 	mov	r0, r4
    f288:	eb004314 	bl	1fee0 <CString::Compare(char const*) const>
    f28c:	e3500000 	cmp	r0, #0
    f290:	1a000005 	bne	f2ac <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x1d0>
    f294:	e3a00f53 	mov	r0, #332	; 0x14c
    f298:	eb004ebb 	bl	22d8c <operator new(unsigned int)>
    f29c:	e1a01006 	mov	r1, r6
    f2a0:	e1a05000 	mov	r5, r0
    f2a4:	eb0010ca 	bl	135d4 <CUSBGamePadPS4Device::CUSBGamePadPS4Device(CUSBFunction*)>
    f2a8:	eaffff9b 	b	f11c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    f2ac:	e59f1258 	ldr	r1, [pc, #600]	; f50c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x430>
    f2b0:	e1a00004 	mov	r0, r4
    f2b4:	eb004309 	bl	1fee0 <CString::Compare(char const*) const>
    f2b8:	e3500000 	cmp	r0, #0
    f2bc:	0afffff4 	beq	f294 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x1b8>
    f2c0:	e59f1248 	ldr	r1, [pc, #584]	; f510 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x434>
    f2c4:	e1a00004 	mov	r0, r4
    f2c8:	eb004304 	bl	1fee0 <CString::Compare(char const*) const>
    f2cc:	e3500000 	cmp	r0, #0
    f2d0:	1a000005 	bne	f2ec <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x210>
    f2d4:	e3a00e13 	mov	r0, #304	; 0x130
    f2d8:	eb004eab 	bl	22d8c <operator new(unsigned int)>
    f2dc:	e1a01006 	mov	r1, r6
    f2e0:	e1a05000 	mov	r5, r0
    f2e4:	eb00130c 	bl	13f1c <CUSBGamePadXbox360Device::CUSBGamePadXbox360Device(CUSBFunction*)>
    f2e8:	eaffff8b 	b	f11c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    f2ec:	e59f1220 	ldr	r1, [pc, #544]	; f514 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x438>
    f2f0:	e1a00004 	mov	r0, r4
    f2f4:	eb0042f9 	bl	1fee0 <CString::Compare(char const*) const>
    f2f8:	e3500000 	cmp	r0, #0
    f2fc:	0afffff4 	beq	f2d4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x1f8>
    f300:	e59f1210 	ldr	r1, [pc, #528]	; f518 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x43c>
    f304:	e1a00004 	mov	r0, r4
    f308:	eb0042f4 	bl	1fee0 <CString::Compare(char const*) const>
    f30c:	e3500000 	cmp	r0, #0
    f310:	1a000005 	bne	f32c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x250>
    f314:	e3a00f4d 	mov	r0, #308	; 0x134
    f318:	eb004e9b 	bl	22d8c <operator new(unsigned int)>
    f31c:	e1a01006 	mov	r1, r6
    f320:	e1a05000 	mov	r5, r0
    f324:	eb001417 	bl	14388 <CUSBGamePadXboxOneDevice::CUSBGamePadXboxOneDevice(CUSBFunction*)>
    f328:	eaffff7b 	b	f11c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    f32c:	e59f11e8 	ldr	r1, [pc, #488]	; f51c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x440>
    f330:	e1a00004 	mov	r0, r4
    f334:	eb0042e9 	bl	1fee0 <CString::Compare(char const*) const>
    f338:	e3500000 	cmp	r0, #0
    f33c:	0afffff4 	beq	f314 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x238>
    f340:	e59f11d8 	ldr	r1, [pc, #472]	; f520 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x444>
    f344:	e1a00004 	mov	r0, r4
    f348:	eb0042e4 	bl	1fee0 <CString::Compare(char const*) const>
    f34c:	e3500000 	cmp	r0, #0
    f350:	0affffef 	beq	f314 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x238>
    f354:	e59f11c8 	ldr	r1, [pc, #456]	; f524 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x448>
    f358:	e1a00004 	mov	r0, r4
    f35c:	eb0042df 	bl	1fee0 <CString::Compare(char const*) const>
    f360:	e3500000 	cmp	r0, #0
    f364:	0affffea 	beq	f314 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x238>
    f368:	e59f11b8 	ldr	r1, [pc, #440]	; f528 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x44c>
    f36c:	e1a00004 	mov	r0, r4
    f370:	eb0042da 	bl	1fee0 <CString::Compare(char const*) const>
    f374:	e3500000 	cmp	r0, #0
    f378:	1a000005 	bne	f394 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x2b8>
    f37c:	e3a00f4d 	mov	r0, #308	; 0x134
    f380:	eb004e81 	bl	22d8c <operator new(unsigned int)>
    f384:	e1a01006 	mov	r1, r6
    f388:	e1a05000 	mov	r5, r0
    f38c:	eb001526 	bl	1482c <CUSBGamePadSwitchProDevice::CUSBGamePadSwitchProDevice(CUSBFunction*)>
    f390:	eaffff61 	b	f11c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    f394:	e59f1190 	ldr	r1, [pc, #400]	; f52c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x450>
    f398:	e1a00004 	mov	r0, r4
    f39c:	eb0042cf 	bl	1fee0 <CString::Compare(char const*) const>
    f3a0:	e3500000 	cmp	r0, #0
    f3a4:	1a000005 	bne	f3c0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x2e4>
    f3a8:	e3a0001c 	mov	r0, #28
    f3ac:	eb004e76 	bl	22d8c <operator new(unsigned int)>
    f3b0:	e1a01006 	mov	r1, r6
    f3b4:	e1a05000 	mov	r5, r0
    f3b8:	eb00189d 	bl	15634 <CUSBPrinterDevice::CUSBPrinterDevice(CUSBFunction*)>
    f3bc:	eaffff56 	b	f11c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    f3c0:	e59f1168 	ldr	r1, [pc, #360]	; f530 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x454>
    f3c4:	e1a00004 	mov	r0, r4
    f3c8:	eb0042c4 	bl	1fee0 <CString::Compare(char const*) const>
    f3cc:	e3500000 	cmp	r0, #0
    f3d0:	0afffff4 	beq	f3a8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x2cc>
    f3d4:	e59f1158 	ldr	r1, [pc, #344]	; f534 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x458>
    f3d8:	e1a00004 	mov	r0, r4
    f3dc:	eb0042bf 	bl	1fee0 <CString::Compare(char const*) const>
    f3e0:	e3500000 	cmp	r0, #0
    f3e4:	1a000005 	bne	f400 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x324>
    f3e8:	e3a00020 	mov	r0, #32
    f3ec:	eb004e66 	bl	22d8c <operator new(unsigned int)>
    f3f0:	e1a01006 	mov	r1, r6
    f3f4:	e1a05000 	mov	r5, r0
    f3f8:	eb002109 	bl	17824 <CSMSC951xDevice::CSMSC951xDevice(CUSBFunction*)>
    f3fc:	eaffff46 	b	f11c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    f400:	e59f1130 	ldr	r1, [pc, #304]	; f538 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x45c>
    f404:	e1a00004 	mov	r0, r4
    f408:	eb0042b4 	bl	1fee0 <CString::Compare(char const*) const>
    f40c:	e3500000 	cmp	r0, #0
    f410:	1a000005 	bne	f42c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x350>
    f414:	e3a00020 	mov	r0, #32
    f418:	eb004e5b 	bl	22d8c <operator new(unsigned int)>
    f41c:	e1a01006 	mov	r1, r6
    f420:	e1a05000 	mov	r5, r0
    f424:	eb0023da 	bl	18394 <CLAN7800Device::CLAN7800Device(CUSBFunction*)>
    f428:	eaffff3b 	b	f11c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    f42c:	e59f1108 	ldr	r1, [pc, #264]	; f53c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x460>
    f430:	e1a00004 	mov	r0, r4
    f434:	eb0042a9 	bl	1fee0 <CString::Compare(char const*) const>
    f438:	e3500000 	cmp	r0, #0
    f43c:	1a000005 	bne	f458 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x37c>
    f440:	e3a00028 	mov	r0, #40	; 0x28
    f444:	eb004e50 	bl	22d8c <operator new(unsigned int)>
    f448:	e1a01006 	mov	r1, r6
    f44c:	e1a05000 	mov	r5, r0
    f450:	eb001941 	bl	1595c <CUSBBluetoothDevice::CUSBBluetoothDevice(CUSBFunction*)>
    f454:	eaffff30 	b	f11c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    f458:	e59f10e0 	ldr	r1, [pc, #224]	; f540 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x464>
    f45c:	e1a00004 	mov	r0, r4
    f460:	eb00429e 	bl	1fee0 <CString::Compare(char const*) const>
    f464:	e3500000 	cmp	r0, #0
    f468:	0afffff4 	beq	f440 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x364>
    f46c:	e59f10d0 	ldr	r1, [pc, #208]	; f544 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x468>
    f470:	e1a00004 	mov	r0, r4
    f474:	eb004299 	bl	1fee0 <CString::Compare(char const*) const>
    f478:	e3500000 	cmp	r0, #0
    f47c:	1a000005 	bne	f498 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x3bc>
    f480:	e3a00028 	mov	r0, #40	; 0x28
    f484:	eb004e40 	bl	22d8c <operator new(unsigned int)>
    f488:	e1a01006 	mov	r1, r6
    f48c:	e1a05000 	mov	r5, r0
    f490:	eb001abd 	bl	15f8c <CUSBMIDIDevice::CUSBMIDIDevice(CUSBFunction*)>
    f494:	eaffff20 	b	f11c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    f498:	e59f10a8 	ldr	r1, [pc, #168]	; f548 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x46c>
    f49c:	e1a00004 	mov	r0, r4
    f4a0:	eb00428e 	bl	1fee0 <CString::Compare(char const*) const>
    f4a4:	e3500000 	cmp	r0, #0
    f4a8:	0afffff4 	beq	f480 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x3a4>
    f4ac:	e59f1098 	ldr	r1, [pc, #152]	; f54c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x470>
    f4b0:	e1a00004 	mov	r0, r4
    f4b4:	eb004289 	bl	1fee0 <CString::Compare(char const*) const>
    f4b8:	e3500000 	cmp	r0, #0
    f4bc:	13a05000 	movne	r5, #0
    f4c0:	1affff1f 	bne	f144 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x68>
    f4c4:	e3a00020 	mov	r0, #32
    f4c8:	eb004e2f 	bl	22d8c <operator new(unsigned int)>
    f4cc:	e1a01006 	mov	r1, r6
    f4d0:	e1a05000 	mov	r5, r0
    f4d4:	eb001ce9 	bl	16880 <CUSBCDCEthernetDevice::CUSBCDCEthernetDevice(CUSBFunction*)>
    f4d8:	eaffff0f 	b	f11c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    f4dc:	0002550c 	.word	0x0002550c
    f4e0:	00025638 	.word	0x00025638
    f4e4:	00025518 	.word	0x00025518
    f4e8:	000255e4 	.word	0x000255e4
    f4ec:	00025524 	.word	0x00025524
    f4f0:	00025530 	.word	0x00025530
    f4f4:	000254e4 	.word	0x000254e4
    f4f8:	000254fc 	.word	0x000254fc
    f4fc:	00024ff4 	.word	0x00024ff4
    f500:	0002553c 	.word	0x0002553c
    f504:	00025548 	.word	0x00025548
    f508:	00025554 	.word	0x00025554
    f50c:	00025560 	.word	0x00025560
    f510:	000255f0 	.word	0x000255f0
    f514:	0002556c 	.word	0x0002556c
    f518:	000255fc 	.word	0x000255fc
    f51c:	00025578 	.word	0x00025578
    f520:	00025584 	.word	0x00025584
    f524:	00025590 	.word	0x00025590
    f528:	00025608 	.word	0x00025608
    f52c:	0002559c 	.word	0x0002559c
    f530:	000255a8 	.word	0x000255a8
    f534:	00025614 	.word	0x00025614
    f538:	000255b4 	.word	0x000255b4
    f53c:	000255c0 	.word	0x000255c0
    f540:	000255cc 	.word	0x000255cc
    f544:	00025620 	.word	0x00025620
    f548:	000255d8 	.word	0x000255d8
    f54c:	0002562c 	.word	0x0002562c

0000f550 <CUSBStandardHub::~CUSBStandardHub()>:
    f550:	e5902014 	ldr	r2, [r0, #20]
    f554:	e59f3088 	ldr	r3, [pc, #136]	; f5e4 <CUSBStandardHub::~CUSBStandardHub()+0x94>
    f558:	e3520000 	cmp	r2, #0
    f55c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    f560:	e1a07000 	mov	r7, r0
    f564:	e5803000 	str	r3, [r0]
    f568:	0a000013 	beq	f5bc <CUSBStandardHub::~CUSBStandardHub()+0x6c>
    f56c:	e3a04000 	mov	r4, #0
    f570:	e3a09004 	mov	r9, #4
    f574:	e1a08004 	mov	r8, r4
    f578:	e2805014 	add	r5, r0, #20
    f57c:	e2806034 	add	r6, r0, #52	; 0x34
    f580:	e5960004 	ldr	r0, [r6, #4]
    f584:	e1a01009 	mov	r1, r9
    f588:	eb004e03 	bl	22d9c <operator delete(void*, unsigned int)>
    f58c:	e5950004 	ldr	r0, [r5, #4]
    f590:	e2844001 	add	r4, r4, #1
    f594:	e3500000 	cmp	r0, #0
    f598:	e5a68004 	str	r8, [r6, #4]!
    f59c:	0a000002 	beq	f5ac <CUSBStandardHub::~CUSBStandardHub()+0x5c>
    f5a0:	e5903000 	ldr	r3, [r0]
    f5a4:	e5933004 	ldr	r3, [r3, #4]
    f5a8:	e12fff33 	blx	r3
    f5ac:	e5973014 	ldr	r3, [r7, #20]
    f5b0:	e5a58004 	str	r8, [r5, #4]!
    f5b4:	e1530004 	cmp	r3, r4
    f5b8:	8afffff0 	bhi	f580 <CUSBStandardHub::~CUSBStandardHub()+0x30>
    f5bc:	e3a04000 	mov	r4, #0
    f5c0:	e3a01009 	mov	r1, #9
    f5c4:	e5970010 	ldr	r0, [r7, #16]
    f5c8:	e5874014 	str	r4, [r7, #20]
    f5cc:	eb004df2 	bl	22d9c <operator delete(void*, unsigned int)>
    f5d0:	e5874010 	str	r4, [r7, #16]
    f5d4:	e1a00007 	mov	r0, r7
    f5d8:	eb001559 	bl	14b44 <CUSBFunction::~CUSBFunction()>
    f5dc:	e1a00007 	mov	r0, r7
    f5e0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    f5e4:	0002565c 	.word	0x0002565c

0000f5e8 <CUSBStandardHub::~CUSBStandardHub()>:
    f5e8:	e92d4010 	push	{r4, lr}
    f5ec:	e1a04000 	mov	r4, r0
    f5f0:	ebffffd6 	bl	f550 <CUSBStandardHub::~CUSBStandardHub()>
    f5f4:	e1a00004 	mov	r0, r4
    f5f8:	e3a01058 	mov	r1, #88	; 0x58
    f5fc:	eb004de6 	bl	22d9c <operator delete(void*, unsigned int)>
    f600:	e1a00004 	mov	r0, r4
    f604:	e8bd8010 	pop	{r4, pc}

0000f608 <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)>:
    f608:	e92d4010 	push	{r4, lr}
    f60c:	e1a04000 	mov	r4, r0
    f610:	eb001599 	bl	14c7c <CUSBFunction::CUSBFunction(CUSBFunction*)>
    f614:	e3a03000 	mov	r3, #0
    f618:	e2840038 	add	r0, r4, #56	; 0x38
    f61c:	e1a01000 	mov	r1, r0
    f620:	e59fc028 	ldr	ip, [pc, #40]	; f650 <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)+0x48>
    f624:	e1a02003 	mov	r2, r3
    f628:	e5843010 	str	r3, [r4, #16]
    f62c:	e5843014 	str	r3, [r4, #20]
    f630:	e584c000 	str	ip, [r4]
    f634:	e2843018 	add	r3, r4, #24
    f638:	e4832004 	str	r2, [r3], #4
    f63c:	e1530000 	cmp	r3, r0
    f640:	e4812004 	str	r2, [r1], #4
    f644:	1afffffb 	bne	f638 <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)+0x30>
    f648:	e1a00004 	mov	r0, r4
    f64c:	e8bd8010 	pop	{r4, pc}
    f650:	0002565c 	.word	0x0002565c

0000f654 <CUSBStandardHub::EnumeratePorts()>:
    f654:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f658:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    f65c:	e1a06000 	mov	r6, r0
    f660:	eb001612 	bl	14eb0 <CUSBFunction::GetHost() const>
    f664:	e250b000 	subs	fp, r0, #0
    f668:	0a0001a7 	beq	fd0c <CUSBStandardHub::EnumeratePorts()+0x6b8>
    f66c:	e1a00006 	mov	r0, r6
    f670:	eb0015fd 	bl	14e6c <CUSBFunction::GetEndpoint0() const>
    f674:	e250a000 	subs	sl, r0, #0
    f678:	0a0001a8 	beq	fd20 <CUSBStandardHub::EnumeratePorts()+0x6cc>
    f67c:	e5963014 	ldr	r3, [r6, #20]
    f680:	e3530000 	cmp	r3, #0
    f684:	0a000020 	beq	f70c <CUSBStandardHub::EnumeratePorts()+0xb8>
    f688:	e3a03000 	mov	r3, #0
    f68c:	e3a08008 	mov	r8, #8
    f690:	e1a04003 	mov	r4, r3
    f694:	e3a07003 	mov	r7, #3
    f698:	e3a05023 	mov	r5, #35	; 0x23
    f69c:	e1a09003 	mov	r9, r3
    f6a0:	ea000002 	b	f6b0 <CUSBStandardHub::EnumeratePorts()+0x5c>
    f6a4:	e5963014 	ldr	r3, [r6, #20]
    f6a8:	e1530009 	cmp	r3, r9
    f6ac:	9a00001d 	bls	f728 <CUSBStandardHub::EnumeratePorts()+0xd4>
    f6b0:	e2899001 	add	r9, r9, #1
    f6b4:	e6ff3079 	uxth	r3, r9
    f6b8:	e58d3004 	str	r3, [sp, #4]
    f6bc:	e58d400c 	str	r4, [sp, #12]
    f6c0:	e58d4008 	str	r4, [sp, #8]
    f6c4:	e58d8000 	str	r8, [sp]
    f6c8:	e1a03007 	mov	r3, r7
    f6cc:	e1a02005 	mov	r2, r5
    f6d0:	e1a0100a 	mov	r1, sl
    f6d4:	e1a0000b 	mov	r0, fp
    f6d8:	ebfffd03 	bl	eaec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    f6dc:	e3500000 	cmp	r0, #0
    f6e0:	aaffffef 	bge	f6a4 <CUSBStandardHub::EnumeratePorts()+0x50>
    f6e4:	eb0036d6 	bl	1d244 <CLogger::Get()>
    f6e8:	e58d9000 	str	r9, [sp]
    f6ec:	e59f36b0 	ldr	r3, [pc, #1712]	; fda4 <CUSBStandardHub::EnumeratePorts()+0x750>
    f6f0:	e3a02001 	mov	r2, #1
    f6f4:	e59f16ac 	ldr	r1, [pc, #1708]	; fda8 <CUSBStandardHub::EnumeratePorts()+0x754>
    f6f8:	eb00387a 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f6fc:	e3a09000 	mov	r9, #0
    f700:	e1a00009 	mov	r0, r9
    f704:	e28dd02c 	add	sp, sp, #44	; 0x2c
    f708:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f70c:	e3a02091 	mov	r2, #145	; 0x91
    f710:	e59f1694 	ldr	r1, [pc, #1684]	; fdac <CUSBStandardHub::EnumeratePorts()+0x758>
    f714:	e59f0694 	ldr	r0, [pc, #1684]	; fdb0 <CUSBStandardHub::EnumeratePorts()+0x75c>
    f718:	eb002cd6 	bl	1aa78 <assertion_failed>
    f71c:	e5963014 	ldr	r3, [r6, #20]
    f720:	e3530000 	cmp	r3, #0
    f724:	1affffd7 	bne	f688 <CUSBStandardHub::EnumeratePorts()+0x34>
    f728:	eb003569 	bl	1ccd4 <CKernelOptions::Get()>
    f72c:	e3500000 	cmp	r0, #0
    f730:	0a000097 	beq	f994 <CUSBStandardHub::EnumeratePorts()+0x340>
    f734:	eb00355b 	bl	1cca8 <CKernelOptions::GetUSBPowerDelay() const>
    f738:	e2504000 	subs	r4, r0, #0
    f73c:	0a000094 	beq	f994 <CUSBStandardHub::EnumeratePorts()+0x340>
    f740:	eb004914 	bl	21b98 <CTimer::Get()>
    f744:	e1a00004 	mov	r0, r4
    f748:	eb0048d9 	bl	21ab4 <CTimer::SimpleMsDelay(unsigned int)>
    f74c:	e5963014 	ldr	r3, [r6, #20]
    f750:	e3530000 	cmp	r3, #0
    f754:	0a0000a1 	beq	f9e0 <CUSBStandardHub::EnumeratePorts()+0x38c>
    f758:	e2863018 	add	r3, r6, #24
    f75c:	e58d3024 	str	r3, [sp, #36]	; 0x24
    f760:	e1a09003 	mov	r9, r3
    f764:	e3a04001 	mov	r4, #1
    f768:	e59f863c 	ldr	r8, [pc, #1596]	; fdac <CUSBStandardHub::EnumeratePorts()+0x758>
    f76c:	e2865034 	add	r5, r6, #52	; 0x34
    f770:	ea00000a 	b	f7a0 <CUSBStandardHub::EnumeratePorts()+0x14c>
    f774:	eb0036b2 	bl	1d244 <CLogger::Get()>
    f778:	e58d4000 	str	r4, [sp]
    f77c:	e59f3630 	ldr	r3, [pc, #1584]	; fdb4 <CUSBStandardHub::EnumeratePorts()+0x760>
    f780:	e3a02001 	mov	r2, #1
    f784:	e59f161c 	ldr	r1, [pc, #1564]	; fda8 <CUSBStandardHub::EnumeratePorts()+0x754>
    f788:	eb003856 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f78c:	e5963014 	ldr	r3, [r6, #20]
    f790:	e2899004 	add	r9, r9, #4
    f794:	e1530004 	cmp	r3, r4
    f798:	e2844001 	add	r4, r4, #1
    f79c:	9a0000c8 	bls	fac4 <CUSBStandardHub::EnumeratePorts()+0x470>
    f7a0:	e5953004 	ldr	r3, [r5, #4]
    f7a4:	e3530000 	cmp	r3, #0
    f7a8:	0a000003 	beq	f7bc <CUSBStandardHub::EnumeratePorts()+0x168>
    f7ac:	e3a020b1 	mov	r2, #177	; 0xb1
    f7b0:	e1a01008 	mov	r1, r8
    f7b4:	e59f05fc 	ldr	r0, [pc, #1532]	; fdb8 <CUSBStandardHub::EnumeratePorts()+0x764>
    f7b8:	eb002cae 	bl	1aa78 <assertion_failed>
    f7bc:	e3a00004 	mov	r0, #4
    f7c0:	eb004d71 	bl	22d8c <operator new(unsigned int)>
    f7c4:	e3a02004 	mov	r2, #4
    f7c8:	e3a03000 	mov	r3, #0
    f7cc:	e6ff7074 	uxth	r7, r4
    f7d0:	e5a50004 	str	r0, [r5, #4]!
    f7d4:	e1a0100a 	mov	r1, sl
    f7d8:	e58d0008 	str	r0, [sp, #8]
    f7dc:	e58d200c 	str	r2, [sp, #12]
    f7e0:	e88d0088 	stm	sp, {r3, r7}
    f7e4:	e3a020a3 	mov	r2, #163	; 0xa3
    f7e8:	e1a0000b 	mov	r0, fp
    f7ec:	ebfffcbe 	bl	eaec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    f7f0:	e3500004 	cmp	r0, #4
    f7f4:	1affffde 	bne	f774 <CUSBStandardHub::EnumeratePorts()+0x120>
    f7f8:	e5952000 	ldr	r2, [r5]
    f7fc:	e5d23000 	ldrb	r3, [r2]
    f800:	e5d22001 	ldrb	r2, [r2, #1]
    f804:	e1833402 	orr	r3, r3, r2, lsl #8
    f808:	e3130c01 	tst	r3, #256	; 0x100
    f80c:	0a000062 	beq	f99c <CUSBStandardHub::EnumeratePorts()+0x348>
    f810:	e3130001 	tst	r3, #1
    f814:	0affffdc 	beq	f78c <CUSBStandardHub::EnumeratePorts()+0x138>
    f818:	e3a03000 	mov	r3, #0
    f81c:	e58d300c 	str	r3, [sp, #12]
    f820:	e58d3008 	str	r3, [sp, #8]
    f824:	e3a03004 	mov	r3, #4
    f828:	e58d7004 	str	r7, [sp, #4]
    f82c:	e58d3000 	str	r3, [sp]
    f830:	e3a02023 	mov	r2, #35	; 0x23
    f834:	e3a03003 	mov	r3, #3
    f838:	e1a0100a 	mov	r1, sl
    f83c:	e1a0000b 	mov	r0, fp
    f840:	ebfffca9 	bl	eaec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    f844:	e3500000 	cmp	r0, #0
    f848:	ba00005c 	blt	f9c0 <CUSBStandardHub::EnumeratePorts()+0x36c>
    f84c:	eb0048d1 	bl	21b98 <CTimer::Get()>
    f850:	e3a00064 	mov	r0, #100	; 0x64
    f854:	eb004896 	bl	21ab4 <CTimer::SimpleMsDelay(unsigned int)>
    f858:	e3a02004 	mov	r2, #4
    f85c:	e5953000 	ldr	r3, [r5]
    f860:	e58d200c 	str	r2, [sp, #12]
    f864:	e3a02000 	mov	r2, #0
    f868:	e58d3008 	str	r3, [sp, #8]
    f86c:	e58d2000 	str	r2, [sp]
    f870:	e1a03002 	mov	r3, r2
    f874:	e58d7004 	str	r7, [sp, #4]
    f878:	e3a020a3 	mov	r2, #163	; 0xa3
    f87c:	e1a0100a 	mov	r1, sl
    f880:	e1a0000b 	mov	r0, fp
    f884:	ebfffc98 	bl	eaec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    f888:	e3500004 	cmp	r0, #4
    f88c:	1a00012d 	bne	fd48 <CUSBStandardHub::EnumeratePorts()+0x6f4>
    f890:	e5952000 	ldr	r2, [r5]
    f894:	e5d23000 	ldrb	r3, [r2]
    f898:	e5d22001 	ldrb	r2, [r2, #1]
    f89c:	e1833402 	orr	r3, r3, r2, lsl #8
    f8a0:	e3130002 	tst	r3, #2
    f8a4:	0a0000b2 	beq	fb74 <CUSBStandardHub::EnumeratePorts()+0x520>
    f8a8:	e2132008 	ands	r2, r3, #8
    f8ac:	1a000127 	bne	fd50 <CUSBStandardHub::EnumeratePorts()+0x6fc>
    f8b0:	e3130c02 	tst	r3, #512	; 0x200
    f8b4:	158d2020 	strne	r2, [sp, #32]
    f8b8:	1a000003 	bne	f8cc <CUSBStandardHub::EnumeratePorts()+0x278>
    f8bc:	e3130b01 	tst	r3, #1024	; 0x400
    f8c0:	03a03001 	moveq	r3, #1
    f8c4:	13a03002 	movne	r3, #2
    f8c8:	e58d3020 	str	r3, [sp, #32]
    f8cc:	e1a00006 	mov	r0, r6
    f8d0:	eb001555 	bl	14e2c <CUSBFunction::GetDevice() const>
    f8d4:	e2507000 	subs	r7, r0, #0
    f8d8:	0a000115 	beq	fd34 <CUSBStandardHub::EnumeratePorts()+0x6e0>
    f8dc:	e1a00007 	mov	r0, r7
    f8e0:	ebfff8a4 	bl	db78 <CUSBDevice::IsSplit() const>
    f8e4:	e58d0014 	str	r0, [sp, #20]
    f8e8:	e1a00007 	mov	r0, r7
    f8ec:	ebfff8a3 	bl	db80 <CUSBDevice::GetHubAddress() const>
    f8f0:	e58d0018 	str	r0, [sp, #24]
    f8f4:	e1a00007 	mov	r0, r7
    f8f8:	ebfff8a2 	bl	db88 <CUSBDevice::GetHubPortNumber() const>
    f8fc:	e59d3014 	ldr	r3, [sp, #20]
    f900:	e58d001c 	str	r0, [sp, #28]
    f904:	e3530000 	cmp	r3, #0
    f908:	0a0000a0 	beq	fb90 <CUSBStandardHub::EnumeratePorts()+0x53c>
    f90c:	e5993000 	ldr	r3, [r9]
    f910:	e3530000 	cmp	r3, #0
    f914:	0a000003 	beq	f928 <CUSBStandardHub::EnumeratePorts()+0x2d4>
    f918:	e59f249c 	ldr	r2, [pc, #1180]	; fdbc <CUSBStandardHub::EnumeratePorts()+0x768>
    f91c:	e1a01008 	mov	r1, r8
    f920:	e59f0498 	ldr	r0, [pc, #1176]	; fdc0 <CUSBStandardHub::EnumeratePorts()+0x76c>
    f924:	eb002c53 	bl	1aa78 <assertion_failed>
    f928:	e3a00048 	mov	r0, #72	; 0x48
    f92c:	eb004d16 	bl	22d8c <operator new(unsigned int)>
    f930:	e1a07000 	mov	r7, r0
    f934:	e59d301c 	ldr	r3, [sp, #28]
    f938:	e59d2020 	ldr	r2, [sp, #32]
    f93c:	e58d3004 	str	r3, [sp, #4]
    f940:	e59d3018 	ldr	r3, [sp, #24]
    f944:	e1a0100b 	mov	r1, fp
    f948:	e58d3000 	str	r3, [sp]
    f94c:	e59d3014 	ldr	r3, [sp, #20]
    f950:	ebfff7a6 	bl	d7f0 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, bool, unsigned char, unsigned char)>
    f954:	e1a00007 	mov	r0, r7
    f958:	e5897000 	str	r7, [r9]
    f95c:	e5903000 	ldr	r3, [r0]
    f960:	e5933008 	ldr	r3, [r3, #8]
    f964:	e12fff33 	blx	r3
    f968:	e3500000 	cmp	r0, #0
    f96c:	1affff86 	bne	f78c <CUSBStandardHub::EnumeratePorts()+0x138>
    f970:	e5990000 	ldr	r0, [r9]
    f974:	e3500000 	cmp	r0, #0
    f978:	0a000002 	beq	f988 <CUSBStandardHub::EnumeratePorts()+0x334>
    f97c:	e5903000 	ldr	r3, [r0]
    f980:	e5933004 	ldr	r3, [r3, #4]
    f984:	e12fff33 	blx	r3
    f988:	e3a03000 	mov	r3, #0
    f98c:	e5893000 	str	r3, [r9]
    f990:	eaffff7d 	b	f78c <CUSBStandardHub::EnumeratePorts()+0x138>
    f994:	e59f4428 	ldr	r4, [pc, #1064]	; fdc4 <CUSBStandardHub::EnumeratePorts()+0x770>
    f998:	eaffff68 	b	f740 <CUSBStandardHub::EnumeratePorts()+0xec>
    f99c:	e3a020bf 	mov	r2, #191	; 0xbf
    f9a0:	e1a01008 	mov	r1, r8
    f9a4:	e59f041c 	ldr	r0, [pc, #1052]	; fdc8 <CUSBStandardHub::EnumeratePorts()+0x774>
    f9a8:	eb002c32 	bl	1aa78 <assertion_failed>
    f9ac:	e5952000 	ldr	r2, [r5]
    f9b0:	e5d23000 	ldrb	r3, [r2]
    f9b4:	e5d22001 	ldrb	r2, [r2, #1]
    f9b8:	e1833402 	orr	r3, r3, r2, lsl #8
    f9bc:	eaffff93 	b	f810 <CUSBStandardHub::EnumeratePorts()+0x1bc>
    f9c0:	eb00361f 	bl	1d244 <CLogger::Get()>
    f9c4:	e58d4000 	str	r4, [sp]
    f9c8:	e59f33fc 	ldr	r3, [pc, #1020]	; fdcc <CUSBStandardHub::EnumeratePorts()+0x778>
    f9cc:	e3a02001 	mov	r2, #1
    f9d0:	e59f13d0 	ldr	r1, [pc, #976]	; fda8 <CUSBStandardHub::EnumeratePorts()+0x754>
    f9d4:	eb0037c3 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f9d8:	eaffff6b 	b	f78c <CUSBStandardHub::EnumeratePorts()+0x138>
    f9dc:	e59db014 	ldr	fp, [sp, #20]
    f9e0:	e3a00004 	mov	r0, #4
    f9e4:	eb004ce8 	bl	22d8c <operator new(unsigned int)>
    f9e8:	e3a09000 	mov	r9, #0
    f9ec:	e3a04004 	mov	r4, #4
    f9f0:	e58d0014 	str	r0, [sp, #20]
    f9f4:	e58d0008 	str	r0, [sp, #8]
    f9f8:	e58d400c 	str	r4, [sp, #12]
    f9fc:	e58d9004 	str	r9, [sp, #4]
    fa00:	e58d9000 	str	r9, [sp]
    fa04:	e1a03009 	mov	r3, r9
    fa08:	e3a020a0 	mov	r2, #160	; 0xa0
    fa0c:	e1a0100a 	mov	r1, sl
    fa10:	e1a0000b 	mov	r0, fp
    fa14:	ebfffc34 	bl	eaec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    fa18:	e1500004 	cmp	r0, r4
    fa1c:	e1a05000 	mov	r5, r0
    fa20:	1a0000a0 	bne	fca8 <CUSBStandardHub::EnumeratePorts()+0x654>
    fa24:	e59d3014 	ldr	r3, [sp, #20]
    fa28:	e5d37000 	ldrb	r7, [r3]
    fa2c:	e2177002 	ands	r7, r7, #2
    fa30:	0a000068 	beq	fbd8 <CUSBStandardHub::EnumeratePorts()+0x584>
    fa34:	e5963014 	ldr	r3, [r6, #20]
    fa38:	e3530000 	cmp	r3, #0
    fa3c:	0a000014 	beq	fa94 <CUSBStandardHub::EnumeratePorts()+0x440>
    fa40:	e3a05001 	mov	r5, #1
    fa44:	e1a04009 	mov	r4, r9
    fa48:	e3a08008 	mov	r8, #8
    fa4c:	e1a09005 	mov	r9, r5
    fa50:	e3a07023 	mov	r7, #35	; 0x23
    fa54:	ea000000 	b	fa5c <CUSBStandardHub::EnumeratePorts()+0x408>
    fa58:	e1a05002 	mov	r5, r2
    fa5c:	e6ff3075 	uxth	r3, r5
    fa60:	e58d3004 	str	r3, [sp, #4]
    fa64:	e1a02007 	mov	r2, r7
    fa68:	e1a03009 	mov	r3, r9
    fa6c:	e58d400c 	str	r4, [sp, #12]
    fa70:	e58d4008 	str	r4, [sp, #8]
    fa74:	e58d8000 	str	r8, [sp]
    fa78:	e1a0100a 	mov	r1, sl
    fa7c:	e1a0000b 	mov	r0, fp
    fa80:	ebfffc19 	bl	eaec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    fa84:	e5963014 	ldr	r3, [r6, #20]
    fa88:	e2852001 	add	r2, r5, #1
    fa8c:	e1550003 	cmp	r5, r3
    fa90:	3afffff0 	bcc	fa58 <CUSBStandardHub::EnumeratePorts()+0x404>
    fa94:	e3a09000 	mov	r9, #0
    fa98:	eb0035e9 	bl	1d244 <CLogger::Get()>
    fa9c:	e59f332c 	ldr	r3, [pc, #812]	; fdd0 <CUSBStandardHub::EnumeratePorts()+0x77c>
    faa0:	e3a02001 	mov	r2, #1
    faa4:	e59f12fc 	ldr	r1, [pc, #764]	; fda8 <CUSBStandardHub::EnumeratePorts()+0x754>
    faa8:	eb00378e 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    faac:	e59d0014 	ldr	r0, [sp, #20]
    fab0:	e3a01004 	mov	r1, #4
    fab4:	eb004cb8 	bl	22d9c <operator delete(void*, unsigned int)>
    fab8:	e1a00009 	mov	r0, r9
    fabc:	e28dd02c 	add	sp, sp, #44	; 0x2c
    fac0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fac4:	e3530000 	cmp	r3, #0
    fac8:	0affffc4 	beq	f9e0 <CUSBStandardHub::EnumeratePorts()+0x38c>
    facc:	e58db014 	str	fp, [sp, #20]
    fad0:	e3a04001 	mov	r4, #1
    fad4:	e59f52cc 	ldr	r5, [pc, #716]	; fda8 <CUSBStandardHub::EnumeratePorts()+0x754>
    fad8:	e59f92f4 	ldr	r9, [pc, #756]	; fdd4 <CUSBStandardHub::EnumeratePorts()+0x780>
    fadc:	e3a08002 	mov	r8, #2
    fae0:	e3a07000 	mov	r7, #0
    fae4:	e59db024 	ldr	fp, [sp, #36]	; 0x24
    fae8:	ea000011 	b	fb34 <CUSBStandardHub::EnumeratePorts()+0x4e0>
    faec:	eb0035d4 	bl	1d244 <CLogger::Get()>
    faf0:	e58d4000 	str	r4, [sp]
    faf4:	e1a03009 	mov	r3, r9
    faf8:	e1a02008 	mov	r2, r8
    fafc:	e1a01005 	mov	r1, r5
    fb00:	eb003778 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fb04:	e59b0000 	ldr	r0, [fp]
    fb08:	e3500000 	cmp	r0, #0
    fb0c:	0a000002 	beq	fb1c <CUSBStandardHub::EnumeratePorts()+0x4c8>
    fb10:	e5903000 	ldr	r3, [r0]
    fb14:	e5933004 	ldr	r3, [r3, #4]
    fb18:	e12fff33 	blx	r3
    fb1c:	e5963014 	ldr	r3, [r6, #20]
    fb20:	e58b7000 	str	r7, [fp]
    fb24:	e1530004 	cmp	r3, r4
    fb28:	e28bb004 	add	fp, fp, #4
    fb2c:	e2844001 	add	r4, r4, #1
    fb30:	9affffa9 	bls	f9dc <CUSBStandardHub::EnumeratePorts()+0x388>
    fb34:	e59b0000 	ldr	r0, [fp]
    fb38:	e3500000 	cmp	r0, #0
    fb3c:	0afffff8 	beq	fb24 <CUSBStandardHub::EnumeratePorts()+0x4d0>
    fb40:	e5903000 	ldr	r3, [r0]
    fb44:	e593300c 	ldr	r3, [r3, #12]
    fb48:	e12fff33 	blx	r3
    fb4c:	e3500000 	cmp	r0, #0
    fb50:	0affffe5 	beq	faec <CUSBStandardHub::EnumeratePorts()+0x498>
    fb54:	eb0035ba 	bl	1d244 <CLogger::Get()>
    fb58:	e59f3278 	ldr	r3, [pc, #632]	; fdd8 <CUSBStandardHub::EnumeratePorts()+0x784>
    fb5c:	e58d4000 	str	r4, [sp]
    fb60:	e3a02004 	mov	r2, #4
    fb64:	e1a01005 	mov	r1, r5
    fb68:	eb00375e 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fb6c:	e5963014 	ldr	r3, [r6, #20]
    fb70:	eaffffeb 	b	fb24 <CUSBStandardHub::EnumeratePorts()+0x4d0>
    fb74:	eb0035b2 	bl	1d244 <CLogger::Get()>
    fb78:	e58d4000 	str	r4, [sp]
    fb7c:	e59f3258 	ldr	r3, [pc, #600]	; fddc <CUSBStandardHub::EnumeratePorts()+0x788>
    fb80:	e3a02001 	mov	r2, #1
    fb84:	e59f121c 	ldr	r1, [pc, #540]	; fda8 <CUSBStandardHub::EnumeratePorts()+0x754>
    fb88:	eb003756 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fb8c:	eafffefe 	b	f78c <CUSBStandardHub::EnumeratePorts()+0x138>
    fb90:	e1a00007 	mov	r0, r7
    fb94:	ebfff7f5 	bl	db70 <CUSBDevice::GetSpeed() const>
    fb98:	e3500002 	cmp	r0, #2
    fb9c:	1affff5a 	bne	f90c <CUSBStandardHub::EnumeratePorts()+0x2b8>
    fba0:	e59d3020 	ldr	r3, [sp, #32]
    fba4:	e3530002 	cmp	r3, #2
    fba8:	0affff57 	beq	f90c <CUSBStandardHub::EnumeratePorts()+0x2b8>
    fbac:	e1a00007 	mov	r0, r7
    fbb0:	ebfff7ec 	bl	db68 <CUSBDevice::GetAddress() const>
    fbb4:	e5993000 	ldr	r3, [r9]
    fbb8:	e6ef2074 	uxtb	r2, r4
    fbbc:	e3530000 	cmp	r3, #0
    fbc0:	e58d0018 	str	r0, [sp, #24]
    fbc4:	e58d201c 	str	r2, [sp, #28]
    fbc8:	0a000041 	beq	fcd4 <CUSBStandardHub::EnumeratePorts()+0x680>
    fbcc:	e3a03001 	mov	r3, #1
    fbd0:	e58d3014 	str	r3, [sp, #20]
    fbd4:	eaffff4f 	b	f918 <CUSBStandardHub::EnumeratePorts()+0x2c4>
    fbd8:	e59d0014 	ldr	r0, [sp, #20]
    fbdc:	e1a01005 	mov	r1, r5
    fbe0:	eb004c6d 	bl	22d9c <operator delete(void*, unsigned int)>
    fbe4:	e5963014 	ldr	r3, [r6, #20]
    fbe8:	e3530000 	cmp	r3, #0
    fbec:	0a00006a 	beq	fd9c <CUSBStandardHub::EnumeratePorts()+0x748>
    fbf0:	e3a04001 	mov	r4, #1
    fbf4:	e58d5014 	str	r5, [sp, #20]
    fbf8:	e1a09004 	mov	r9, r4
    fbfc:	e2865038 	add	r5, r6, #56	; 0x38
    fc00:	ea000004 	b	fc18 <CUSBStandardHub::EnumeratePorts()+0x5c4>
    fc04:	e5963014 	ldr	r3, [r6, #20]
    fc08:	e2855004 	add	r5, r5, #4
    fc0c:	e1530004 	cmp	r3, r4
    fc10:	e2844001 	add	r4, r4, #1
    fc14:	9afffeb9 	bls	f700 <CUSBStandardHub::EnumeratePorts()+0xac>
    fc18:	e5953000 	ldr	r3, [r5]
    fc1c:	e59d2014 	ldr	r2, [sp, #20]
    fc20:	e6ff8074 	uxth	r8, r4
    fc24:	e58d200c 	str	r2, [sp, #12]
    fc28:	e58d3008 	str	r3, [sp, #8]
    fc2c:	e58d7000 	str	r7, [sp]
    fc30:	e58d8004 	str	r8, [sp, #4]
    fc34:	e3a03000 	mov	r3, #0
    fc38:	e3a020a3 	mov	r2, #163	; 0xa3
    fc3c:	e1a0100a 	mov	r1, sl
    fc40:	e1a0000b 	mov	r0, fp
    fc44:	ebfffba8 	bl	eaec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    fc48:	e3500004 	cmp	r0, #4
    fc4c:	1affffec 	bne	fc04 <CUSBStandardHub::EnumeratePorts()+0x5b0>
    fc50:	e5953000 	ldr	r3, [r5]
    fc54:	e5d33000 	ldrb	r3, [r3]
    fc58:	e3130008 	tst	r3, #8
    fc5c:	0affffe8 	beq	fc04 <CUSBStandardHub::EnumeratePorts()+0x5b0>
    fc60:	e3a03008 	mov	r3, #8
    fc64:	e3a02023 	mov	r2, #35	; 0x23
    fc68:	e1a0100a 	mov	r1, sl
    fc6c:	e58d3000 	str	r3, [sp]
    fc70:	e58d700c 	str	r7, [sp, #12]
    fc74:	e3a03001 	mov	r3, #1
    fc78:	e58d7008 	str	r7, [sp, #8]
    fc7c:	e58d8004 	str	r8, [sp, #4]
    fc80:	e1a0000b 	mov	r0, fp
    fc84:	ebfffb98 	bl	eaec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    fc88:	eb00356d 	bl	1d244 <CLogger::Get()>
    fc8c:	e58d4000 	str	r4, [sp]
    fc90:	e59f3148 	ldr	r3, [pc, #328]	; fde0 <CUSBStandardHub::EnumeratePorts()+0x78c>
    fc94:	e3a02001 	mov	r2, #1
    fc98:	e59f1108 	ldr	r1, [pc, #264]	; fda8 <CUSBStandardHub::EnumeratePorts()+0x754>
    fc9c:	eb003711 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fca0:	e1a09007 	mov	r9, r7
    fca4:	eaffffd6 	b	fc04 <CUSBStandardHub::EnumeratePorts()+0x5b0>
    fca8:	eb003565 	bl	1d244 <CLogger::Get()>
    fcac:	e59f3130 	ldr	r3, [pc, #304]	; fde4 <CUSBStandardHub::EnumeratePorts()+0x790>
    fcb0:	e3a02001 	mov	r2, #1
    fcb4:	e59f10ec 	ldr	r1, [pc, #236]	; fda8 <CUSBStandardHub::EnumeratePorts()+0x754>
    fcb8:	eb00370a 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fcbc:	e59d0014 	ldr	r0, [sp, #20]
    fcc0:	e1a01004 	mov	r1, r4
    fcc4:	eb004c34 	bl	22d9c <operator delete(void*, unsigned int)>
    fcc8:	e1a00009 	mov	r0, r9
    fccc:	e28dd02c 	add	sp, sp, #44	; 0x2c
    fcd0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fcd4:	e3a00048 	mov	r0, #72	; 0x48
    fcd8:	eb004c2b 	bl	22d8c <operator new(unsigned int)>
    fcdc:	e1a07000 	mov	r7, r0
    fce0:	e6ef3074 	uxtb	r3, r4
    fce4:	e58d3004 	str	r3, [sp, #4]
    fce8:	e59d3018 	ldr	r3, [sp, #24]
    fcec:	e59d2020 	ldr	r2, [sp, #32]
    fcf0:	e58d3000 	str	r3, [sp]
    fcf4:	e1a0100b 	mov	r1, fp
    fcf8:	e3a03001 	mov	r3, #1
    fcfc:	ebfff6bb 	bl	d7f0 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, bool, unsigned char, unsigned char)>
    fd00:	e5897000 	str	r7, [r9]
    fd04:	e1a00007 	mov	r0, r7
    fd08:	eaffff13 	b	f95c <CUSBStandardHub::EnumeratePorts()+0x308>
    fd0c:	e3a0208c 	mov	r2, #140	; 0x8c
    fd10:	e59f1094 	ldr	r1, [pc, #148]	; fdac <CUSBStandardHub::EnumeratePorts()+0x758>
    fd14:	e59f00cc 	ldr	r0, [pc, #204]	; fde8 <CUSBStandardHub::EnumeratePorts()+0x794>
    fd18:	eb002b56 	bl	1aa78 <assertion_failed>
    fd1c:	eafffe52 	b	f66c <CUSBStandardHub::EnumeratePorts()+0x18>
    fd20:	e3a0208f 	mov	r2, #143	; 0x8f
    fd24:	e59f1080 	ldr	r1, [pc, #128]	; fdac <CUSBStandardHub::EnumeratePorts()+0x758>
    fd28:	e59f00bc 	ldr	r0, [pc, #188]	; fdec <CUSBStandardHub::EnumeratePorts()+0x798>
    fd2c:	eb002b51 	bl	1aa78 <assertion_failed>
    fd30:	eafffe51 	b	f67c <CUSBStandardHub::EnumeratePorts()+0x28>
    fd34:	e3a020fd 	mov	r2, #253	; 0xfd
    fd38:	e1a01008 	mov	r1, r8
    fd3c:	e59f00ac 	ldr	r0, [pc, #172]	; fdf0 <CUSBStandardHub::EnumeratePorts()+0x79c>
    fd40:	eb002b4c 	bl	1aa78 <assertion_failed>
    fd44:	eafffee4 	b	f8dc <CUSBStandardHub::EnumeratePorts()+0x288>
    fd48:	e3a09000 	mov	r9, #0
    fd4c:	eafffe6b 	b	f700 <CUSBStandardHub::EnumeratePorts()+0xac>
    fd50:	e3a02000 	mov	r2, #0
    fd54:	e3a03008 	mov	r3, #8
    fd58:	e1a0100a 	mov	r1, sl
    fd5c:	e58d200c 	str	r2, [sp, #12]
    fd60:	e58d2008 	str	r2, [sp, #8]
    fd64:	e58d3000 	str	r3, [sp]
    fd68:	e3a02023 	mov	r2, #35	; 0x23
    fd6c:	e3a03001 	mov	r3, #1
    fd70:	e58d7004 	str	r7, [sp, #4]
    fd74:	e1a0000b 	mov	r0, fp
    fd78:	ebfffb5b 	bl	eaec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    fd7c:	eb003530 	bl	1d244 <CLogger::Get()>
    fd80:	e58d4000 	str	r4, [sp]
    fd84:	e59f3054 	ldr	r3, [pc, #84]	; fde0 <CUSBStandardHub::EnumeratePorts()+0x78c>
    fd88:	e3a02001 	mov	r2, #1
    fd8c:	e59f1014 	ldr	r1, [pc, #20]	; fda8 <CUSBStandardHub::EnumeratePorts()+0x754>
    fd90:	e3a09000 	mov	r9, #0
    fd94:	eb0036d3 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fd98:	eafffe58 	b	f700 <CUSBStandardHub::EnumeratePorts()+0xac>
    fd9c:	e3a09001 	mov	r9, #1
    fda0:	eafffe56 	b	f700 <CUSBStandardHub::EnumeratePorts()+0xac>
    fda4:	000256c0 	.word	0x000256c0
    fda8:	00025678 	.word	0x00025678
    fdac:	00025680 	.word	0x00025680
    fdb0:	000256b0 	.word	0x000256b0
    fdb4:	000256f0 	.word	0x000256f0
    fdb8:	000256d8 	.word	0x000256d8
    fdbc:	0000010e 	.word	0x0000010e
    fdc0:	000257a8 	.word	0x000257a8
    fdc4:	000001fe 	.word	0x000001fe
    fdc8:	00025710 	.word	0x00025710
    fdcc:	00025744 	.word	0x00025744
    fdd0:	00025818 	.word	0x00025818
    fdd4:	000257c0 	.word	0x000257c0
    fdd8:	000257e4 	.word	0x000257e4
    fddc:	0002575c 	.word	0x0002575c
    fde0:	00025774 	.word	0x00025774
    fde4:	00025800 	.word	0x00025800
    fde8:	00025694 	.word	0x00025694
    fdec:	000256a0 	.word	0x000256a0
    fdf0:	00025798 	.word	0x00025798

0000fdf4 <CUSBStandardHub::Configure()>:
    fdf4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    fdf8:	e24dd024 	sub	sp, sp, #36	; 0x24
    fdfc:	e1a04000 	mov	r4, r0
    fe00:	eb0013f9 	bl	14dec <CUSBFunction::GetNumEndpoints() const>
    fe04:	e3500001 	cmp	r0, #1
    fe08:	0a000006 	beq	fe28 <CUSBStandardHub::Configure()+0x34>
    fe0c:	e1a00004 	mov	r0, r4
    fe10:	e59f11d0 	ldr	r1, [pc, #464]	; ffe8 <CUSBStandardHub::Configure()+0x1f4>
    fe14:	eb00147a 	bl	15004 <CUSBFunction::ConfigurationError(char const*) const>
    fe18:	e3a05000 	mov	r5, #0
    fe1c:	e1a00005 	mov	r0, r5
    fe20:	e28dd024 	add	sp, sp, #36	; 0x24
    fe24:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    fe28:	e1a06000 	mov	r6, r0
    fe2c:	e3a01005 	mov	r1, #5
    fe30:	e1a00004 	mov	r0, r4
    fe34:	eb00145f 	bl	14fb8 <CUSBFunction::GetDescriptor(unsigned char)>
    fe38:	e3500000 	cmp	r0, #0
    fe3c:	0afffff2 	beq	fe0c <CUSBStandardHub::Configure()+0x18>
    fe40:	e1d030d2 	ldrsb	r3, [r0, #2]
    fe44:	e3530000 	cmp	r3, #0
    fe48:	aaffffef 	bge	fe0c <CUSBStandardHub::Configure()+0x18>
    fe4c:	e5d03003 	ldrb	r3, [r0, #3]
    fe50:	e203303f 	and	r3, r3, #63	; 0x3f
    fe54:	e3530003 	cmp	r3, #3
    fe58:	1affffeb 	bne	fe0c <CUSBStandardHub::Configure()+0x18>
    fe5c:	e1a00004 	mov	r0, r4
    fe60:	eb001423 	bl	14ef4 <CUSBFunction::Configure()>
    fe64:	e2505000 	subs	r5, r0, #0
    fe68:	0a000045 	beq	ff84 <CUSBStandardHub::Configure()+0x190>
    fe6c:	e5943010 	ldr	r3, [r4, #16]
    fe70:	e3530000 	cmp	r3, #0
    fe74:	0a000003 	beq	fe88 <CUSBStandardHub::Configure()+0x94>
    fe78:	e3a0205a 	mov	r2, #90	; 0x5a
    fe7c:	e59f1168 	ldr	r1, [pc, #360]	; ffec <CUSBStandardHub::Configure()+0x1f8>
    fe80:	e59f0168 	ldr	r0, [pc, #360]	; fff0 <CUSBStandardHub::Configure()+0x1fc>
    fe84:	eb002afb 	bl	1aa78 <assertion_failed>
    fe88:	e3a00009 	mov	r0, #9
    fe8c:	eb004bbe 	bl	22d8c <operator new(unsigned int)>
    fe90:	e5840010 	str	r0, [r4, #16]
    fe94:	e1a00004 	mov	r0, r4
    fe98:	eb001404 	bl	14eb0 <CUSBFunction::GetHost() const>
    fe9c:	e1a07000 	mov	r7, r0
    fea0:	e1a00004 	mov	r0, r4
    fea4:	eb0013f0 	bl	14e6c <CUSBFunction::GetEndpoint0() const>
    fea8:	e3a06000 	mov	r6, #0
    feac:	e3a0c0a0 	mov	ip, #160	; 0xa0
    feb0:	e3a05009 	mov	r5, #9
    feb4:	e5942010 	ldr	r2, [r4, #16]
    feb8:	e1a01000 	mov	r1, r0
    febc:	e88d1024 	stm	sp, {r2, r5, ip}
    fec0:	e1a00007 	mov	r0, r7
    fec4:	e58d600c 	str	r6, [sp, #12]
    fec8:	e1a03006 	mov	r3, r6
    fecc:	e3a02029 	mov	r2, #41	; 0x29
    fed0:	ebfffb37 	bl	ebb4 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    fed4:	e1500005 	cmp	r0, r5
    fed8:	e1a07000 	mov	r7, r0
    fedc:	1a00001d 	bne	ff58 <CUSBStandardHub::Configure()+0x164>
    fee0:	e5943010 	ldr	r3, [r4, #16]
    fee4:	e5d33002 	ldrb	r3, [r3, #2]
    fee8:	e3530008 	cmp	r3, #8
    feec:	e5843014 	str	r3, [r4, #20]
    fef0:	8a000029 	bhi	ff9c <CUSBStandardHub::Configure()+0x1a8>
    fef4:	e28d0010 	add	r0, sp, #16
    fef8:	eb003f8f 	bl	1fd3c <CString::CString()>
    fefc:	e59f30f0 	ldr	r3, [pc, #240]	; fff4 <CUSBStandardHub::Configure()+0x200>
    ff00:	e59f10f0 	ldr	r1, [pc, #240]	; fff8 <CUSBStandardHub::Configure()+0x204>
    ff04:	e5932000 	ldr	r2, [r3]
    ff08:	e28d0010 	add	r0, sp, #16
    ff0c:	e282c001 	add	ip, r2, #1
    ff10:	e583c000 	str	ip, [r3]
    ff14:	eb004376 	bl	20cf4 <CString::Format(char const*, ...)>
    ff18:	eb002dcf 	bl	1b65c <CDeviceNameService::Get()>
    ff1c:	e1a05000 	mov	r5, r0
    ff20:	e28d0010 	add	r0, sp, #16
    ff24:	eb003f9a 	bl	1fd94 <CString::operator char const*() const>
    ff28:	e1a03006 	mov	r3, r6
    ff2c:	e1a01000 	mov	r1, r0
    ff30:	e1a02004 	mov	r2, r4
    ff34:	e1a00005 	mov	r0, r5
    ff38:	eb002d07 	bl	1b35c <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
    ff3c:	e1a00004 	mov	r0, r4
    ff40:	ebfffdc3 	bl	f654 <CUSBStandardHub::EnumeratePorts()>
    ff44:	e2505000 	subs	r5, r0, #0
    ff48:	0a000020 	beq	ffd0 <CUSBStandardHub::Configure()+0x1dc>
    ff4c:	e28d0010 	add	r0, sp, #16
    ff50:	eb003f46 	bl	1fc70 <CString::~CString()>
    ff54:	eaffffb0 	b	fe1c <CUSBStandardHub::Configure()+0x28>
    ff58:	eb0034b9 	bl	1d244 <CLogger::Get()>
    ff5c:	e59f3098 	ldr	r3, [pc, #152]	; fffc <CUSBStandardHub::Configure()+0x208>
    ff60:	e3a02001 	mov	r2, #1
    ff64:	e59f107c 	ldr	r1, [pc, #124]	; ffe8 <CUSBStandardHub::Configure()+0x1f4>
    ff68:	eb00365e 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ff6c:	e1a01005 	mov	r1, r5
    ff70:	e5940010 	ldr	r0, [r4, #16]
    ff74:	eb004b88 	bl	22d9c <operator delete(void*, unsigned int)>
    ff78:	e1a05006 	mov	r5, r6
    ff7c:	e5846010 	str	r6, [r4, #16]
    ff80:	eaffffa5 	b	fe1c <CUSBStandardHub::Configure()+0x28>
    ff84:	eb0034ae 	bl	1d244 <CLogger::Get()>
    ff88:	e1a02006 	mov	r2, r6
    ff8c:	e59f306c 	ldr	r3, [pc, #108]	; 10000 <CUSBStandardHub::Configure()+0x20c>
    ff90:	e59f1050 	ldr	r1, [pc, #80]	; ffe8 <CUSBStandardHub::Configure()+0x1f4>
    ff94:	eb003653 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ff98:	eaffff9f 	b	fe1c <CUSBStandardHub::Configure()+0x28>
    ff9c:	eb0034a8 	bl	1d244 <CLogger::Get()>
    ffa0:	e5942014 	ldr	r2, [r4, #20]
    ffa4:	e59f3058 	ldr	r3, [pc, #88]	; 10004 <CUSBStandardHub::Configure()+0x210>
    ffa8:	e58d2000 	str	r2, [sp]
    ffac:	e59f1034 	ldr	r1, [pc, #52]	; ffe8 <CUSBStandardHub::Configure()+0x1f4>
    ffb0:	e3a02001 	mov	r2, #1
    ffb4:	eb00364b 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ffb8:	e1a01007 	mov	r1, r7
    ffbc:	e5940010 	ldr	r0, [r4, #16]
    ffc0:	eb004b75 	bl	22d9c <operator delete(void*, unsigned int)>
    ffc4:	e1a05006 	mov	r5, r6
    ffc8:	e5846010 	str	r6, [r4, #16]
    ffcc:	eaffff92 	b	fe1c <CUSBStandardHub::Configure()+0x28>
    ffd0:	eb00349b 	bl	1d244 <CLogger::Get()>
    ffd4:	e59f302c 	ldr	r3, [pc, #44]	; 10008 <CUSBStandardHub::Configure()+0x214>
    ffd8:	e3a02001 	mov	r2, #1
    ffdc:	e59f1004 	ldr	r1, [pc, #4]	; ffe8 <CUSBStandardHub::Configure()+0x1f4>
    ffe0:	eb003640 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ffe4:	eaffffd8 	b	ff4c <CUSBStandardHub::Configure()+0x158>
    ffe8:	00025678 	.word	0x00025678
    ffec:	00025680 	.word	0x00025680
    fff0:	0002584c 	.word	0x0002584c
    fff4:	0002b6c0 	.word	0x0002b6c0
    fff8:	0002588c 	.word	0x0002588c
    fffc:	0002585c 	.word	0x0002585c
   10000:	00025834 	.word	0x00025834
   10004:	00025878 	.word	0x00025878
   10008:	00025894 	.word	0x00025894

0001000c <CUSBBulkOnlyMassStorageDevice::Seek(unsigned long long)>:
   1000c:	e1c022f0 	strd	r2, [r0, #32]
   10010:	e1a01003 	mov	r1, r3
   10014:	e1a00002 	mov	r0, r2
   10018:	e12fff1e 	bx	lr

0001001c <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()>:
   1001c:	e92d4070 	push	{r4, r5, r6, lr}
   10020:	e5905028 	ldr	r5, [r0, #40]	; 0x28
   10024:	e59f3088 	ldr	r3, [pc, #136]	; 100b4 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x98>
   10028:	e3550000 	cmp	r5, #0
   1002c:	e1a04000 	mov	r4, r0
   10030:	e5803000 	str	r3, [r0]
   10034:	0a000004 	beq	1004c <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x30>
   10038:	e1a00005 	mov	r0, r5
   1003c:	eb002896 	bl	1a29c <CPartitionManager::~CPartitionManager()>
   10040:	e1a00005 	mov	r0, r5
   10044:	e3a01024 	mov	r1, #36	; 0x24
   10048:	eb004b53 	bl	22d9c <operator delete(void*, unsigned int)>
   1004c:	e3a03000 	mov	r3, #0
   10050:	e5945014 	ldr	r5, [r4, #20]
   10054:	e5843028 	str	r3, [r4, #40]	; 0x28
   10058:	e1550003 	cmp	r5, r3
   1005c:	0a000004 	beq	10074 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x58>
   10060:	e1a00005 	mov	r0, r5
   10064:	ebfffa1c 	bl	e8dc <CUSBEndpoint::~CUSBEndpoint()>
   10068:	e1a00005 	mov	r0, r5
   1006c:	e3a01014 	mov	r1, #20
   10070:	eb004b49 	bl	22d9c <operator delete(void*, unsigned int)>
   10074:	e3a03000 	mov	r3, #0
   10078:	e5945010 	ldr	r5, [r4, #16]
   1007c:	e5843014 	str	r3, [r4, #20]
   10080:	e1550003 	cmp	r5, r3
   10084:	0a000004 	beq	1009c <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x80>
   10088:	e1a00005 	mov	r0, r5
   1008c:	ebfffa12 	bl	e8dc <CUSBEndpoint::~CUSBEndpoint()>
   10090:	e1a00005 	mov	r0, r5
   10094:	e3a01014 	mov	r1, #20
   10098:	eb004b3f 	bl	22d9c <operator delete(void*, unsigned int)>
   1009c:	e3a03000 	mov	r3, #0
   100a0:	e1a00004 	mov	r0, r4
   100a4:	e5843010 	str	r3, [r4, #16]
   100a8:	eb0012a5 	bl	14b44 <CUSBFunction::~CUSBFunction()>
   100ac:	e1a00004 	mov	r0, r4
   100b0:	e8bd8070 	pop	{r4, r5, r6, pc}
   100b4:	000258b4 	.word	0x000258b4

000100b8 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()>:
   100b8:	e92d4010 	push	{r4, lr}
   100bc:	e1a04000 	mov	r4, r0
   100c0:	ebffffd5 	bl	1001c <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()>
   100c4:	e1a00004 	mov	r0, r4
   100c8:	e3a01030 	mov	r1, #48	; 0x30
   100cc:	eb004b32 	bl	22d9c <operator delete(void*, unsigned int)>
   100d0:	e1a00004 	mov	r0, r4
   100d4:	e8bd8010 	pop	{r4, pc}

000100d8 <CUSBBulkOnlyMassStorageDevice::CUSBBulkOnlyMassStorageDevice(CUSBFunction*)>:
   100d8:	e92d4010 	push	{r4, lr}
   100dc:	e1a04000 	mov	r4, r0
   100e0:	eb0012e5 	bl	14c7c <CUSBFunction::CUSBFunction(CUSBFunction*)>
   100e4:	e3a03000 	mov	r3, #0
   100e8:	e3a00000 	mov	r0, #0
   100ec:	e3a01000 	mov	r1, #0
   100f0:	e59f2020 	ldr	r2, [pc, #32]	; 10118 <CUSBBulkOnlyMassStorageDevice::CUSBBulkOnlyMassStorageDevice(CUSBFunction*)+0x40>
   100f4:	e1c402f0 	strd	r0, [r4, #32]
   100f8:	e5842000 	str	r2, [r4]
   100fc:	e5843010 	str	r3, [r4, #16]
   10100:	e5843014 	str	r3, [r4, #20]
   10104:	e5843018 	str	r3, [r4, #24]
   10108:	e584301c 	str	r3, [r4, #28]
   1010c:	e5843028 	str	r3, [r4, #40]	; 0x28
   10110:	e1a00004 	mov	r0, r4
   10114:	e8bd8010 	pop	{r4, pc}
   10118:	000258b4 	.word	0x000258b4

0001011c <CUSBBulkOnlyMassStorageDevice::GetCapacity() const>:
   1011c:	e590001c 	ldr	r0, [r0, #28]
   10120:	e12fff1e 	bx	lr

00010124 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>:
   10124:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   10128:	e2519000 	subs	r9, r1, #0
   1012c:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   10130:	e1a04000 	mov	r4, r0
   10134:	e1a08002 	mov	r8, r2
   10138:	e1a07003 	mov	r7, r3
   1013c:	e59d5058 	ldr	r5, [sp, #88]	; 0x58
   10140:	e5dd605c 	ldrb	r6, [sp, #92]	; 0x5c
   10144:	0a000066 	beq	102e4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x1c0>
   10148:	e2483006 	sub	r3, r8, #6
   1014c:	e353000a 	cmp	r3, #10
   10150:	8a000054 	bhi	102a8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x184>
   10154:	e2973000 	adds	r3, r7, #0
   10158:	13a03001 	movne	r3, #1
   1015c:	e3550000 	cmp	r5, #0
   10160:	03833001 	orreq	r3, r3, #1
   10164:	e3530000 	cmp	r3, #0
   10168:	0a000053 	beq	102bc <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x198>
   1016c:	e3a0201f 	mov	r2, #31
   10170:	e3a01000 	mov	r1, #0
   10174:	e28d0018 	add	r0, sp, #24
   10178:	eb004695 	bl	21bd4 <memset>
   1017c:	e3560000 	cmp	r6, #0
   10180:	13a0e080 	movne	lr, #128	; 0x80
   10184:	03a0e000 	moveq	lr, #0
   10188:	e5dd0026 	ldrb	r0, [sp, #38]	; 0x26
   1018c:	e5943018 	ldr	r3, [r4, #24]
   10190:	e3c0201f 	bic	r2, r0, #31
   10194:	e5ddc025 	ldrb	ip, [sp, #37]	; 0x25
   10198:	e208001f 	and	r0, r8, #31
   1019c:	e2833001 	add	r3, r3, #1
   101a0:	e1800002 	orr	r0, r0, r2
   101a4:	e1a02008 	mov	r2, r8
   101a8:	e59f81f8 	ldr	r8, [pc, #504]	; 103a8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x284>
   101ac:	e5843018 	str	r3, [r4, #24]
   101b0:	e3ccc00f 	bic	ip, ip, #15
   101b4:	e1a01009 	mov	r1, r9
   101b8:	e5cd0026 	strb	r0, [sp, #38]	; 0x26
   101bc:	e28d0027 	add	r0, sp, #39	; 0x27
   101c0:	e58d301c 	str	r3, [sp, #28]
   101c4:	e5cdc025 	strb	ip, [sp, #37]	; 0x25
   101c8:	e5cde024 	strb	lr, [sp, #36]	; 0x24
   101cc:	e58d8018 	str	r8, [sp, #24]
   101d0:	e58d5020 	str	r5, [sp, #32]
   101d4:	eb0047f0 	bl	2219c <memcpy>
   101d8:	e1a00004 	mov	r0, r4
   101dc:	eb001333 	bl	14eb0 <CUSBFunction::GetHost() const>
   101e0:	e2508000 	subs	r8, r0, #0
   101e4:	0a000039 	beq	102d0 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x1ac>
   101e8:	e3a09000 	mov	r9, #0
   101ec:	e5941014 	ldr	r1, [r4, #20]
   101f0:	e28d2018 	add	r2, sp, #24
   101f4:	e58d9000 	str	r9, [sp]
   101f8:	e3a0301f 	mov	r3, #31
   101fc:	e1a00008 	mov	r0, r8
   10200:	ebfffa9f 	bl	ec84 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   10204:	e1500009 	cmp	r0, r9
   10208:	ba000058 	blt	10370 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x24c>
   1020c:	e3550000 	cmp	r5, #0
   10210:	0a00000a 	beq	10240 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x11c>
   10214:	e5940010 	ldr	r0, [r4, #16]
   10218:	e3560000 	cmp	r6, #0
   1021c:	e5941014 	ldr	r1, [r4, #20]
   10220:	e1a03005 	mov	r3, r5
   10224:	11a01000 	movne	r1, r0
   10228:	e58d9000 	str	r9, [sp]
   1022c:	e1a02007 	mov	r2, r7
   10230:	e1a00008 	mov	r0, r8
   10234:	ebfffa92 	bl	ec84 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   10238:	e2505000 	subs	r5, r0, #0
   1023c:	ba000052 	blt	1038c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x268>
   10240:	e3a03000 	mov	r3, #0
   10244:	e5941010 	ldr	r1, [r4, #16]
   10248:	e1a00008 	mov	r0, r8
   1024c:	e58d3000 	str	r3, [sp]
   10250:	e28d2008 	add	r2, sp, #8
   10254:	e3a0300d 	mov	r3, #13
   10258:	ebfffa89 	bl	ec84 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   1025c:	e350000d 	cmp	r0, #13
   10260:	1a000024 	bne	102f8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x1d4>
   10264:	e59f3140 	ldr	r3, [pc, #320]	; 103ac <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x288>
   10268:	e59d2008 	ldr	r2, [sp, #8]
   1026c:	e1520003 	cmp	r2, r3
   10270:	1a000027 	bne	10314 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x1f0>
   10274:	e5943018 	ldr	r3, [r4, #24]
   10278:	e59d200c 	ldr	r2, [sp, #12]
   1027c:	e1520003 	cmp	r2, r3
   10280:	1a00002a 	bne	10330 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x20c>
   10284:	e5dd3014 	ldrb	r3, [sp, #20]
   10288:	e3530000 	cmp	r3, #0
   1028c:	1a00002e 	bne	1034c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x228>
   10290:	e59d3010 	ldr	r3, [sp, #16]
   10294:	e3530000 	cmp	r3, #0
   10298:	1a00002d 	bne	10354 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x230>
   1029c:	e1a00005 	mov	r0, r5
   102a0:	e28dd03c 	add	sp, sp, #60	; 0x3c
   102a4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   102a8:	e59f2100 	ldr	r2, [pc, #256]	; 103b0 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x28c>
   102ac:	e59f1100 	ldr	r1, [pc, #256]	; 103b4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x290>
   102b0:	e59f0100 	ldr	r0, [pc, #256]	; 103b8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x294>
   102b4:	eb0029ef 	bl	1aa78 <assertion_failed>
   102b8:	eaffffa5 	b	10154 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x30>
   102bc:	e59f20f8 	ldr	r2, [pc, #248]	; 103bc <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x298>
   102c0:	e59f10ec 	ldr	r1, [pc, #236]	; 103b4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x290>
   102c4:	e59f00f4 	ldr	r0, [pc, #244]	; 103c0 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x29c>
   102c8:	eb0029ea 	bl	1aa78 <assertion_failed>
   102cc:	eaffffa6 	b	1016c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x48>
   102d0:	e59f20ec 	ldr	r2, [pc, #236]	; 103c4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2a0>
   102d4:	e59f10d8 	ldr	r1, [pc, #216]	; 103b4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x290>
   102d8:	e59f00e8 	ldr	r0, [pc, #232]	; 103c8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2a4>
   102dc:	eb0029e5 	bl	1aa78 <assertion_failed>
   102e0:	eaffffc0 	b	101e8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0xc4>
   102e4:	e59f20e0 	ldr	r2, [pc, #224]	; 103cc <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2a8>
   102e8:	e59f10c4 	ldr	r1, [pc, #196]	; 103b4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x290>
   102ec:	e59f00dc 	ldr	r0, [pc, #220]	; 103d0 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2ac>
   102f0:	eb0029e0 	bl	1aa78 <assertion_failed>
   102f4:	eaffff93 	b	10148 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x24>
   102f8:	eb0033d1 	bl	1d244 <CLogger::Get()>
   102fc:	e59f30d0 	ldr	r3, [pc, #208]	; 103d4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2b0>
   10300:	e3a02001 	mov	r2, #1
   10304:	e59f10cc 	ldr	r1, [pc, #204]	; 103d8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2b4>
   10308:	eb003576 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1030c:	e3e05000 	mvn	r5, #0
   10310:	eaffffe1 	b	1029c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x178>
   10314:	eb0033ca 	bl	1d244 <CLogger::Get()>
   10318:	e59f30bc 	ldr	r3, [pc, #188]	; 103dc <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2b8>
   1031c:	e3a02001 	mov	r2, #1
   10320:	e59f10b0 	ldr	r1, [pc, #176]	; 103d8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2b4>
   10324:	eb00356f 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10328:	e3e05000 	mvn	r5, #0
   1032c:	eaffffda 	b	1029c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x178>
   10330:	eb0033c3 	bl	1d244 <CLogger::Get()>
   10334:	e59f30a4 	ldr	r3, [pc, #164]	; 103e0 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2bc>
   10338:	e3a02001 	mov	r2, #1
   1033c:	e59f1094 	ldr	r1, [pc, #148]	; 103d8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2b4>
   10340:	eb003568 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10344:	e3e05000 	mvn	r5, #0
   10348:	eaffffd3 	b	1029c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x178>
   1034c:	e3e05000 	mvn	r5, #0
   10350:	eaffffd1 	b	1029c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x178>
   10354:	eb0033ba 	bl	1d244 <CLogger::Get()>
   10358:	e59f3084 	ldr	r3, [pc, #132]	; 103e4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2c0>
   1035c:	e3a02001 	mov	r2, #1
   10360:	e59f1070 	ldr	r1, [pc, #112]	; 103d8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2b4>
   10364:	eb00355f 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10368:	e3e05000 	mvn	r5, #0
   1036c:	eaffffca 	b	1029c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x178>
   10370:	eb0033b3 	bl	1d244 <CLogger::Get()>
   10374:	e59f306c 	ldr	r3, [pc, #108]	; 103e8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2c4>
   10378:	e3a02001 	mov	r2, #1
   1037c:	e59f1054 	ldr	r1, [pc, #84]	; 103d8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2b4>
   10380:	eb003558 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10384:	e3e05000 	mvn	r5, #0
   10388:	eaffffc3 	b	1029c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x178>
   1038c:	eb0033ac 	bl	1d244 <CLogger::Get()>
   10390:	e59f3054 	ldr	r3, [pc, #84]	; 103ec <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2c8>
   10394:	e3a02001 	mov	r2, #1
   10398:	e59f1038 	ldr	r1, [pc, #56]	; 103d8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2b4>
   1039c:	eb003551 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   103a0:	e3e05000 	mvn	r5, #0
   103a4:	eaffffbc 	b	1029c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x178>
   103a8:	43425355 	.word	0x43425355
   103ac:	53425355 	.word	0x53425355
   103b0:	00000216 	.word	0x00000216
   103b4:	000258d8 	.word	0x000258d8
   103b8:	000258fc 	.word	0x000258fc
   103bc:	00000217 	.word	0x00000217
   103c0:	00025920 	.word	0x00025920
   103c4:	00000226 	.word	0x00000226
   103c8:	00025694 	.word	0x00025694
   103cc:	00000215 	.word	0x00000215
   103d0:	000258ec 	.word	0x000258ec
   103d4:	0002596c 	.word	0x0002596c
   103d8:	000258d0 	.word	0x000258d0
   103dc:	00025980 	.word	0x00025980
   103e0:	00025998 	.word	0x00025998
   103e4:	000259ac 	.word	0x000259ac
   103e8:	00025940 	.word	0x00025940
   103ec:	00025954 	.word	0x00025954

000103f0 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)>:
   103f0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   103f4:	e2518000 	subs	r8, r1, #0
   103f8:	e24dd018 	sub	sp, sp, #24
   103fc:	e1a05000 	mov	r5, r0
   10400:	e1a04002 	mov	r4, r2
   10404:	0a000034 	beq	104dc <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xec>
   10408:	e1c502d0 	ldrd	r0, [r5, #32]
   1040c:	e3a03000 	mov	r3, #0
   10410:	e59f20f4 	ldr	r2, [pc, #244]	; 1050c <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0x11c>
   10414:	e0033001 	and	r3, r3, r1
   10418:	e0022000 	and	r2, r2, r0
   1041c:	e1923003 	orrs	r3, r2, r3
   10420:	e3e06000 	mvn	r6, #0
   10424:	13a03001 	movne	r3, #1
   10428:	03a03000 	moveq	r3, #0
   1042c:	e59f70d8 	ldr	r7, [pc, #216]	; 1050c <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0x11c>
   10430:	e1510007 	cmp	r1, r7
   10434:	01500006 	cmpeq	r0, r6
   10438:	83833001 	orrhi	r3, r3, #1
   1043c:	e3530000 	cmp	r3, #0
   10440:	1a000021 	bne	104cc <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xdc>
   10444:	e1a0cb84 	lsl	ip, r4, #23
   10448:	e1a0cbac 	lsr	ip, ip, #23
   1044c:	e1a034a0 	lsr	r3, r0, #9
   10450:	e35c0000 	cmp	ip, #0
   10454:	e1833b81 	orr	r3, r3, r1, lsl #23
   10458:	1a00001b 	bne	104cc <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xdc>
   1045c:	e3a06001 	mov	r6, #1
   10460:	e3a0e028 	mov	lr, #40	; 0x28
   10464:	e1a014a4 	lsr	r1, r4, #9
   10468:	e6bf2f33 	rev	r2, r3
   1046c:	e6bf1fb1 	rev16	r1, r1
   10470:	e6ff1071 	uxth	r1, r1
   10474:	e1cd20be 	strh	r2, [sp, #14]
   10478:	e1a02822 	lsr	r2, r2, #16
   1047c:	e1a00005 	mov	r0, r5
   10480:	e1cd21b0 	strh	r2, [sp, #16]
   10484:	e1a05421 	lsr	r5, r1, #8
   10488:	e5cd1013 	strb	r1, [sp, #19]
   1048c:	e58d4000 	str	r4, [sp]
   10490:	e1a03008 	mov	r3, r8
   10494:	e58d6004 	str	r6, [sp, #4]
   10498:	e3a0200a 	mov	r2, #10
   1049c:	e28d100c 	add	r1, sp, #12
   104a0:	e5cdc00d 	strb	ip, [sp, #13]
   104a4:	e5cdc012 	strb	ip, [sp, #18]
   104a8:	e5cdc015 	strb	ip, [sp, #21]
   104ac:	e5cd5014 	strb	r5, [sp, #20]
   104b0:	e5cde00c 	strb	lr, [sp, #12]
   104b4:	ebffff1a 	bl	10124 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   104b8:	e1500004 	cmp	r0, r4
   104bc:	1a00000b 	bne	104f0 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0x100>
   104c0:	e1a00004 	mov	r0, r4
   104c4:	e28dd018 	add	sp, sp, #24
   104c8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   104cc:	e3e04000 	mvn	r4, #0
   104d0:	e1a00004 	mov	r0, r4
   104d4:	e28dd018 	add	sp, sp, #24
   104d8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   104dc:	e59f202c 	ldr	r2, [pc, #44]	; 10510 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0x120>
   104e0:	e59f102c 	ldr	r1, [pc, #44]	; 10514 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0x124>
   104e4:	e59f002c 	ldr	r0, [pc, #44]	; 10518 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0x128>
   104e8:	eb002962 	bl	1aa78 <assertion_failed>
   104ec:	eaffffc5 	b	10408 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0x18>
   104f0:	eb003353 	bl	1d244 <CLogger::Get()>
   104f4:	e1a02006 	mov	r2, r6
   104f8:	e59f301c 	ldr	r3, [pc, #28]	; 1051c <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0x12c>
   104fc:	e59f101c 	ldr	r1, [pc, #28]	; 10520 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0x130>
   10500:	eb0034f8 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10504:	e3e04000 	mvn	r4, #0
   10508:	eaffffec 	b	104c0 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xd0>
   1050c:	000001ff 	.word	0x000001ff
   10510:	000001ca 	.word	0x000001ca
   10514:	000258d8 	.word	0x000258d8
   10518:	00025930 	.word	0x00025930
   1051c:	000259c4 	.word	0x000259c4
   10520:	000258d0 	.word	0x000258d0

00010524 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)>:
   10524:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   10528:	e2518000 	subs	r8, r1, #0
   1052c:	e24dd018 	sub	sp, sp, #24
   10530:	e1a05000 	mov	r5, r0
   10534:	e1a04002 	mov	r4, r2
   10538:	0a000032 	beq	10608 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xe4>
   1053c:	e1c502d0 	ldrd	r0, [r5, #32]
   10540:	e3a03000 	mov	r3, #0
   10544:	e59f20ec 	ldr	r2, [pc, #236]	; 10638 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0x114>
   10548:	e0033001 	and	r3, r3, r1
   1054c:	e0022000 	and	r2, r2, r0
   10550:	e1923003 	orrs	r3, r2, r3
   10554:	e3e06000 	mvn	r6, #0
   10558:	13a03001 	movne	r3, #1
   1055c:	03a03000 	moveq	r3, #0
   10560:	e59f70d0 	ldr	r7, [pc, #208]	; 10638 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0x114>
   10564:	e1510007 	cmp	r1, r7
   10568:	01500006 	cmpeq	r0, r6
   1056c:	83833001 	orrhi	r3, r3, #1
   10570:	e3530000 	cmp	r3, #0
   10574:	1a000020 	bne	105fc <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xd8>
   10578:	e1a0cb84 	lsl	ip, r4, #23
   1057c:	e1a0cbac 	lsr	ip, ip, #23
   10580:	e1a034a0 	lsr	r3, r0, #9
   10584:	e35c0000 	cmp	ip, #0
   10588:	e1833b81 	orr	r3, r3, r1, lsl #23
   1058c:	1a00001a 	bne	105fc <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xd8>
   10590:	e3a0e008 	mov	lr, #8
   10594:	e3a0602a 	mov	r6, #42	; 0x2a
   10598:	e1a014a4 	lsr	r1, r4, #9
   1059c:	e6bf2f33 	rev	r2, r3
   105a0:	e6bf1fb1 	rev16	r1, r1
   105a4:	e6ff1071 	uxth	r1, r1
   105a8:	e1cd20be 	strh	r2, [sp, #14]
   105ac:	e1a02822 	lsr	r2, r2, #16
   105b0:	e1a00005 	mov	r0, r5
   105b4:	e1cd21b0 	strh	r2, [sp, #16]
   105b8:	e1a05e31 	lsr	r5, r1, lr
   105bc:	e5cd1013 	strb	r1, [sp, #19]
   105c0:	e88d1010 	stm	sp, {r4, ip}
   105c4:	e1a03008 	mov	r3, r8
   105c8:	e3a0200a 	mov	r2, #10
   105cc:	e28d100c 	add	r1, sp, #12
   105d0:	e5cdc012 	strb	ip, [sp, #18]
   105d4:	e5cdc015 	strb	ip, [sp, #21]
   105d8:	e5cd5014 	strb	r5, [sp, #20]
   105dc:	e5cd600c 	strb	r6, [sp, #12]
   105e0:	e5cde00d 	strb	lr, [sp, #13]
   105e4:	ebfffece 	bl	10124 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   105e8:	e3500000 	cmp	r0, #0
   105ec:	a1a00004 	movge	r0, r4
   105f0:	ba000009 	blt	1061c <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xf8>
   105f4:	e28dd018 	add	sp, sp, #24
   105f8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   105fc:	e3e00000 	mvn	r0, #0
   10600:	e28dd018 	add	sp, sp, #24
   10604:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   10608:	e59f202c 	ldr	r2, [pc, #44]	; 1063c <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0x118>
   1060c:	e59f102c 	ldr	r1, [pc, #44]	; 10640 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0x11c>
   10610:	e59f002c 	ldr	r0, [pc, #44]	; 10644 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0x120>
   10614:	eb002917 	bl	1aa78 <assertion_failed>
   10618:	eaffffc7 	b	1053c <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0x18>
   1061c:	eb003308 	bl	1d244 <CLogger::Get()>
   10620:	e59f3020 	ldr	r3, [pc, #32]	; 10648 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0x124>
   10624:	e3a02001 	mov	r2, #1
   10628:	e59f101c 	ldr	r1, [pc, #28]	; 1064c <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0x128>
   1062c:	eb0034ad 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10630:	e3e00000 	mvn	r0, #0
   10634:	eaffffee 	b	105f4 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xd0>
   10638:	000001ff 	.word	0x000001ff
   1063c:	000001ef 	.word	0x000001ef
   10640:	000258d8 	.word	0x000258d8
   10644:	00025930 	.word	0x00025930
   10648:	000259d4 	.word	0x000259d4
   1064c:	000258d0 	.word	0x000258d0

00010650 <CUSBBulkOnlyMassStorageDevice::Reset()>:
   10650:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   10654:	e24dd014 	sub	sp, sp, #20
   10658:	e1a05000 	mov	r5, r0
   1065c:	eb001213 	bl	14eb0 <CUSBFunction::GetHost() const>
   10660:	e2506000 	subs	r6, r0, #0
   10664:	0a00002e 	beq	10724 <CUSBBulkOnlyMassStorageDevice::Reset()+0xd4>
   10668:	e1a00005 	mov	r0, r5
   1066c:	eb0011fe 	bl	14e6c <CUSBFunction::GetEndpoint0() const>
   10670:	e3a04000 	mov	r4, #0
   10674:	e1a01000 	mov	r1, r0
   10678:	e58d400c 	str	r4, [sp, #12]
   1067c:	e58d4008 	str	r4, [sp, #8]
   10680:	e58d4004 	str	r4, [sp, #4]
   10684:	e58d4000 	str	r4, [sp]
   10688:	e3a030ff 	mov	r3, #255	; 0xff
   1068c:	e3a02021 	mov	r2, #33	; 0x21
   10690:	e1a00006 	mov	r0, r6
   10694:	ebfff914 	bl	eaec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   10698:	e1500004 	cmp	r0, r4
   1069c:	ba000025 	blt	10738 <CUSBBulkOnlyMassStorageDevice::Reset()+0xe8>
   106a0:	e1a00005 	mov	r0, r5
   106a4:	eb0011f0 	bl	14e6c <CUSBFunction::GetEndpoint0() const>
   106a8:	e3a07001 	mov	r7, #1
   106ac:	e1a01000 	mov	r1, r0
   106b0:	e58d400c 	str	r4, [sp, #12]
   106b4:	e58d4008 	str	r4, [sp, #8]
   106b8:	e88d0090 	stm	sp, {r4, r7}
   106bc:	e1a03007 	mov	r3, r7
   106c0:	e3a02002 	mov	r2, #2
   106c4:	e1a00006 	mov	r0, r6
   106c8:	ebfff907 	bl	eaec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   106cc:	e3500000 	cmp	r0, #0
   106d0:	ba00001f 	blt	10754 <CUSBBulkOnlyMassStorageDevice::Reset()+0x104>
   106d4:	e1a00005 	mov	r0, r5
   106d8:	eb0011e3 	bl	14e6c <CUSBFunction::GetEndpoint0() const>
   106dc:	e3a02002 	mov	r2, #2
   106e0:	e1a01000 	mov	r1, r0
   106e4:	e58d400c 	str	r4, [sp, #12]
   106e8:	e58d4008 	str	r4, [sp, #8]
   106ec:	e58d4000 	str	r4, [sp]
   106f0:	e1a03007 	mov	r3, r7
   106f4:	e1a00006 	mov	r0, r6
   106f8:	e58d2004 	str	r2, [sp, #4]
   106fc:	ebfff8fa 	bl	eaec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   10700:	e3500000 	cmp	r0, #0
   10704:	ba000019 	blt	10770 <CUSBBulkOnlyMassStorageDevice::Reset()+0x120>
   10708:	e5950010 	ldr	r0, [r5, #16]
   1070c:	ebfff8dd 	bl	ea88 <CUSBEndpoint::ResetPID()>
   10710:	e5950014 	ldr	r0, [r5, #20]
   10714:	ebfff8db 	bl	ea88 <CUSBEndpoint::ResetPID()>
   10718:	e1a00004 	mov	r0, r4
   1071c:	e28dd014 	add	sp, sp, #20
   10720:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   10724:	e59f2060 	ldr	r2, [pc, #96]	; 1078c <CUSBBulkOnlyMassStorageDevice::Reset()+0x13c>
   10728:	e59f1060 	ldr	r1, [pc, #96]	; 10790 <CUSBBulkOnlyMassStorageDevice::Reset()+0x140>
   1072c:	e59f0060 	ldr	r0, [pc, #96]	; 10794 <CUSBBulkOnlyMassStorageDevice::Reset()+0x144>
   10730:	eb0028d0 	bl	1aa78 <assertion_failed>
   10734:	eaffffcb 	b	10668 <CUSBBulkOnlyMassStorageDevice::Reset()+0x18>
   10738:	eb0032c1 	bl	1d244 <CLogger::Get()>
   1073c:	e59f3054 	ldr	r3, [pc, #84]	; 10798 <CUSBBulkOnlyMassStorageDevice::Reset()+0x148>
   10740:	e3a02004 	mov	r2, #4
   10744:	e59f1050 	ldr	r1, [pc, #80]	; 1079c <CUSBBulkOnlyMassStorageDevice::Reset()+0x14c>
   10748:	eb003466 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1074c:	e3e00000 	mvn	r0, #0
   10750:	eafffff1 	b	1071c <CUSBBulkOnlyMassStorageDevice::Reset()+0xcc>
   10754:	eb0032ba 	bl	1d244 <CLogger::Get()>
   10758:	e59f3040 	ldr	r3, [pc, #64]	; 107a0 <CUSBBulkOnlyMassStorageDevice::Reset()+0x150>
   1075c:	e3a02004 	mov	r2, #4
   10760:	e59f1034 	ldr	r1, [pc, #52]	; 1079c <CUSBBulkOnlyMassStorageDevice::Reset()+0x14c>
   10764:	eb00345f 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10768:	e3e00000 	mvn	r0, #0
   1076c:	eaffffea 	b	1071c <CUSBBulkOnlyMassStorageDevice::Reset()+0xcc>
   10770:	eb0032b3 	bl	1d244 <CLogger::Get()>
   10774:	e59f3028 	ldr	r3, [pc, #40]	; 107a4 <CUSBBulkOnlyMassStorageDevice::Reset()+0x154>
   10778:	e3a02004 	mov	r2, #4
   1077c:	e59f1018 	ldr	r1, [pc, #24]	; 1079c <CUSBBulkOnlyMassStorageDevice::Reset()+0x14c>
   10780:	eb003458 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10784:	e3e00000 	mvn	r0, #0
   10788:	eaffffe3 	b	1071c <CUSBBulkOnlyMassStorageDevice::Reset()+0xcc>
   1078c:	00000265 	.word	0x00000265
   10790:	000258d8 	.word	0x000258d8
   10794:	00025694 	.word	0x00025694
   10798:	000259e4 	.word	0x000259e4
   1079c:	000258d0 	.word	0x000258d0
   107a0:	000259f8 	.word	0x000259f8
   107a4:	00025a18 	.word	0x00025a18

000107a8 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)>:
   107a8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   107ac:	e1a06002 	mov	r6, r2
   107b0:	e1a07000 	mov	r7, r0
   107b4:	e1a08001 	mov	r8, r1
   107b8:	e1a09002 	mov	r9, r2
   107bc:	e3a05004 	mov	r5, #4
   107c0:	e1a02006 	mov	r2, r6
   107c4:	e1a01008 	mov	r1, r8
   107c8:	e1a00007 	mov	r0, r7
   107cc:	ebffff07 	bl	103f0 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)>
   107d0:	e1500006 	cmp	r0, r6
   107d4:	e1a04000 	mov	r4, r0
   107d8:	1a000001 	bne	107e4 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)+0x3c>
   107dc:	e1a00009 	mov	r0, r9
   107e0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   107e4:	e1a00007 	mov	r0, r7
   107e8:	ebffff98 	bl	10650 <CUSBBulkOnlyMassStorageDevice::Reset()>
   107ec:	e3500000 	cmp	r0, #0
   107f0:	1a000004 	bne	10808 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)+0x60>
   107f4:	e2555001 	subs	r5, r5, #1
   107f8:	1afffff0 	bne	107c0 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)+0x18>
   107fc:	e1a09004 	mov	r9, r4
   10800:	e1a00009 	mov	r0, r9
   10804:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10808:	e1a09000 	mov	r9, r0
   1080c:	eafffff2 	b	107dc <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)+0x34>

00010810 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)>:
   10810:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10814:	e1a06002 	mov	r6, r2
   10818:	e1a07000 	mov	r7, r0
   1081c:	e1a08001 	mov	r8, r1
   10820:	e1a09002 	mov	r9, r2
   10824:	e3a05004 	mov	r5, #4
   10828:	e1a02006 	mov	r2, r6
   1082c:	e1a01008 	mov	r1, r8
   10830:	e1a00007 	mov	r0, r7
   10834:	ebffff3a 	bl	10524 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)>
   10838:	e1500006 	cmp	r0, r6
   1083c:	e1a04000 	mov	r4, r0
   10840:	1a000001 	bne	1084c <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)+0x3c>
   10844:	e1a00009 	mov	r0, r9
   10848:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1084c:	e1a00007 	mov	r0, r7
   10850:	ebffff7e 	bl	10650 <CUSBBulkOnlyMassStorageDevice::Reset()>
   10854:	e3500000 	cmp	r0, #0
   10858:	1a000004 	bne	10870 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)+0x60>
   1085c:	e2555001 	subs	r5, r5, #1
   10860:	1afffff0 	bne	10828 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)+0x18>
   10864:	e1a09004 	mov	r9, r4
   10868:	e1a00009 	mov	r0, r9
   1086c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10870:	e1a09000 	mov	r9, r0
   10874:	eafffff2 	b	10844 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)+0x34>

00010878 <CUSBBulkOnlyMassStorageDevice::Configure()>:
   10878:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1087c:	e24dd064 	sub	sp, sp, #100	; 0x64
   10880:	e1a05000 	mov	r5, r0
   10884:	eb001158 	bl	14dec <CUSBFunction::GetNumEndpoints() const>
   10888:	e3500001 	cmp	r0, #1
   1088c:	c3a06005 	movgt	r6, #5
   10890:	c3a07014 	movgt	r7, #20
   10894:	ca000004 	bgt	108ac <CUSBBulkOnlyMassStorageDevice::Configure()+0x34>
   10898:	ea0000d5 	b	10bf4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x37c>
   1089c:	e5d43003 	ldrb	r3, [r4, #3]
   108a0:	e203303f 	and	r3, r3, #63	; 0x3f
   108a4:	e3530002 	cmp	r3, #2
   108a8:	0a000091 	beq	10af4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x27c>
   108ac:	e1a01006 	mov	r1, r6
   108b0:	e1a00005 	mov	r0, r5
   108b4:	eb0011bf 	bl	14fb8 <CUSBFunction::GetDescriptor(unsigned char)>
   108b8:	e2504000 	subs	r4, r0, #0
   108bc:	1afffff6 	bne	1089c <CUSBBulkOnlyMassStorageDevice::Configure()+0x24>
   108c0:	e5953010 	ldr	r3, [r5, #16]
   108c4:	e1a00005 	mov	r0, r5
   108c8:	e3530000 	cmp	r3, #0
   108cc:	0a0000a1 	beq	10b58 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2e0>
   108d0:	e5953014 	ldr	r3, [r5, #20]
   108d4:	e3530000 	cmp	r3, #0
   108d8:	0a00009e 	beq	10b58 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2e0>
   108dc:	eb001184 	bl	14ef4 <CUSBFunction::Configure()>
   108e0:	e2506000 	subs	r6, r0, #0
   108e4:	0a000093 	beq	10b38 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2c0>
   108e8:	e3a0c024 	mov	ip, #36	; 0x24
   108ec:	e3a06001 	mov	r6, #1
   108f0:	e3a07012 	mov	r7, #18
   108f4:	e58dc000 	str	ip, [sp]
   108f8:	e58d6004 	str	r6, [sp, #4]
   108fc:	e28d303c 	add	r3, sp, #60	; 0x3c
   10900:	e3a02006 	mov	r2, #6
   10904:	e28d100c 	add	r1, sp, #12
   10908:	e1a00005 	mov	r0, r5
   1090c:	e5cd400d 	strb	r4, [sp, #13]
   10910:	e5cd400e 	strb	r4, [sp, #14]
   10914:	e5cd400f 	strb	r4, [sp, #15]
   10918:	e5cd4011 	strb	r4, [sp, #17]
   1091c:	e5cdc010 	strb	ip, [sp, #16]
   10920:	e5cd700c 	strb	r7, [sp, #12]
   10924:	ebfffdfe 	bl	10124 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   10928:	e3500024 	cmp	r0, #36	; 0x24
   1092c:	1a0000a7 	bne	10bd0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x358>
   10930:	e5dd303c 	ldrb	r3, [sp, #60]	; 0x3c
   10934:	e213301f 	ands	r3, r3, #31
   10938:	1a00009a 	bne	10ba8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x330>
   1093c:	e1a04003 	mov	r4, r3
   10940:	e3a06063 	mov	r6, #99	; 0x63
   10944:	e3a0a064 	mov	sl, #100	; 0x64
   10948:	e3a08006 	mov	r8, #6
   1094c:	e3a0b003 	mov	fp, #3
   10950:	ea000010 	b	10998 <CUSBBulkOnlyMassStorageDevice::Configure()+0x120>
   10954:	e3a09001 	mov	r9, #1
   10958:	e3a0c000 	mov	ip, #0
   1095c:	e88d0280 	stm	sp, {r7, r9}
   10960:	e28d3028 	add	r3, sp, #40	; 0x28
   10964:	e1a02008 	mov	r2, r8
   10968:	e28d101c 	add	r1, sp, #28
   1096c:	e1a00005 	mov	r0, r5
   10970:	e5cdb01c 	strb	fp, [sp, #28]
   10974:	e1cd41be 	strh	r4, [sp, #30]
   10978:	e5cd7020 	strb	r7, [sp, #32]
   1097c:	e5cd4021 	strb	r4, [sp, #33]	; 0x21
   10980:	e5cdc01d 	strb	ip, [sp, #29]
   10984:	ebfffde6 	bl	10124 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   10988:	e3500000 	cmp	r0, #0
   1098c:	ba00009d 	blt	10c08 <CUSBBulkOnlyMassStorageDevice::Configure()+0x390>
   10990:	e2566001 	subs	r6, r6, #1
   10994:	0a0000aa 	beq	10c44 <CUSBBulkOnlyMassStorageDevice::Configure()+0x3cc>
   10998:	eb00447e 	bl	21b98 <CTimer::Get()>
   1099c:	e1a0000a 	mov	r0, sl
   109a0:	eb004443 	bl	21ab4 <CTimer::SimpleMsDelay(unsigned int)>
   109a4:	e58d4004 	str	r4, [sp, #4]
   109a8:	e58d4000 	str	r4, [sp]
   109ac:	e3a03000 	mov	r3, #0
   109b0:	e1a02008 	mov	r2, r8
   109b4:	e28d1014 	add	r1, sp, #20
   109b8:	e1a00005 	mov	r0, r5
   109bc:	e5cd4014 	strb	r4, [sp, #20]
   109c0:	e5cd4015 	strb	r4, [sp, #21]
   109c4:	e5cd4016 	strb	r4, [sp, #22]
   109c8:	e5cd4017 	strb	r4, [sp, #23]
   109cc:	e5cd4018 	strb	r4, [sp, #24]
   109d0:	e5cd4019 	strb	r4, [sp, #25]
   109d4:	ebfffdd2 	bl	10124 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   109d8:	e3500000 	cmp	r0, #0
   109dc:	baffffdc 	blt	10954 <CUSBBulkOnlyMassStorageDevice::Configure()+0xdc>
   109e0:	e3a02008 	mov	r2, #8
   109e4:	e3a00025 	mov	r0, #37	; 0x25
   109e8:	e3a06001 	mov	r6, #1
   109ec:	e3a0e000 	mov	lr, #0
   109f0:	e88d0044 	stm	sp, {r2, r6}
   109f4:	e5cd001c 	strb	r0, [sp, #28]
   109f8:	e28d3014 	add	r3, sp, #20
   109fc:	e28d101c 	add	r1, sp, #28
   10a00:	e3a0200a 	mov	r2, #10
   10a04:	e1a00005 	mov	r0, r5
   10a08:	e1cd41be 	strh	r4, [sp, #30]
   10a0c:	e1cd42b0 	strh	r4, [sp, #32]
   10a10:	e1cd42b2 	strh	r4, [sp, #34]	; 0x22
   10a14:	e5cd4025 	strb	r4, [sp, #37]	; 0x25
   10a18:	e5cde01d 	strb	lr, [sp, #29]
   10a1c:	e5cde024 	strb	lr, [sp, #36]	; 0x24
   10a20:	ebfffdbf 	bl	10124 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   10a24:	e3500008 	cmp	r0, #8
   10a28:	1a00008b 	bne	10c5c <CUSBBulkOnlyMassStorageDevice::Configure()+0x3e4>
   10a2c:	e59d4018 	ldr	r4, [sp, #24]
   10a30:	e6bf4f34 	rev	r4, r4
   10a34:	e3540c02 	cmp	r4, #512	; 0x200
   10a38:	1a000079 	bne	10c24 <CUSBBulkOnlyMassStorageDevice::Configure()+0x3ac>
   10a3c:	e59d3014 	ldr	r3, [sp, #20]
   10a40:	e6bf3f33 	rev	r3, r3
   10a44:	e3730001 	cmn	r3, #1
   10a48:	e585301c 	str	r3, [r5, #28]
   10a4c:	0a000096 	beq	10cac <CUSBBulkOnlyMassStorageDevice::Configure()+0x434>
   10a50:	e2833001 	add	r3, r3, #1
   10a54:	e585301c 	str	r3, [r5, #28]
   10a58:	eb0031f9 	bl	1d244 <CLogger::Get()>
   10a5c:	e595201c 	ldr	r2, [r5, #28]
   10a60:	e59f3260 	ldr	r3, [pc, #608]	; 10cc8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x450>
   10a64:	e1a025a2 	lsr	r2, r2, #11
   10a68:	e59f125c 	ldr	r1, [pc, #604]	; 10ccc <CUSBBulkOnlyMassStorageDevice::Configure()+0x454>
   10a6c:	e58d2000 	str	r2, [sp]
   10a70:	e59f4258 	ldr	r4, [pc, #600]	; 10cd0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x458>
   10a74:	e3a02004 	mov	r2, #4
   10a78:	eb00339a 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10a7c:	e28d0028 	add	r0, sp, #40	; 0x28
   10a80:	eb003cad 	bl	1fd3c <CString::CString()>
   10a84:	e28d0028 	add	r0, sp, #40	; 0x28
   10a88:	e5942000 	ldr	r2, [r4]
   10a8c:	e59f1240 	ldr	r1, [pc, #576]	; 10cd4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x45c>
   10a90:	eb004097 	bl	20cf4 <CString::Format(char const*, ...)>
   10a94:	e5953028 	ldr	r3, [r5, #40]	; 0x28
   10a98:	e3530000 	cmp	r3, #0
   10a9c:	0a000003 	beq	10ab0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x238>
   10aa0:	e3a02f5f 	mov	r2, #380	; 0x17c
   10aa4:	e59f122c 	ldr	r1, [pc, #556]	; 10cd8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x460>
   10aa8:	e59f022c 	ldr	r0, [pc, #556]	; 10cdc <CUSBBulkOnlyMassStorageDevice::Configure()+0x464>
   10aac:	eb0027f1 	bl	1aa78 <assertion_failed>
   10ab0:	e28d0028 	add	r0, sp, #40	; 0x28
   10ab4:	eb003cb6 	bl	1fd94 <CString::operator char const*() const>
   10ab8:	e1a07000 	mov	r7, r0
   10abc:	e3a00024 	mov	r0, #36	; 0x24
   10ac0:	eb0048b1 	bl	22d8c <operator new(unsigned int)>
   10ac4:	e1a06000 	mov	r6, r0
   10ac8:	e1a02007 	mov	r2, r7
   10acc:	e1a01005 	mov	r1, r5
   10ad0:	eb0025e5 	bl	1a26c <CPartitionManager::CPartitionManager(CDevice*, char const*)>
   10ad4:	e5856028 	str	r6, [r5, #40]	; 0x28
   10ad8:	e1a00006 	mov	r0, r6
   10adc:	eb002601 	bl	1a2e8 <CPartitionManager::Initialize()>
   10ae0:	e2506000 	subs	r6, r0, #0
   10ae4:	1a000063 	bne	10c78 <CUSBBulkOnlyMassStorageDevice::Configure()+0x400>
   10ae8:	e28d0028 	add	r0, sp, #40	; 0x28
   10aec:	eb003c5f 	bl	1fc70 <CString::~CString()>
   10af0:	ea000015 	b	10b4c <CUSBBulkOnlyMassStorageDevice::Configure()+0x2d4>
   10af4:	e1d430d2 	ldrsb	r3, [r4, #2]
   10af8:	e3530000 	cmp	r3, #0
   10afc:	ba00001b 	blt	10b70 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2f8>
   10b00:	e5953014 	ldr	r3, [r5, #20]
   10b04:	e1a00005 	mov	r0, r5
   10b08:	e3530000 	cmp	r3, #0
   10b0c:	1a000011 	bne	10b58 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2e0>
   10b10:	eb0010c5 	bl	14e2c <CUSBFunction::GetDevice() const>
   10b14:	e1a09000 	mov	r9, r0
   10b18:	e1a00007 	mov	r0, r7
   10b1c:	eb00489a 	bl	22d8c <operator new(unsigned int)>
   10b20:	e1a08000 	mov	r8, r0
   10b24:	e1a02004 	mov	r2, r4
   10b28:	e1a01009 	mov	r1, r9
   10b2c:	ebfff6d8 	bl	e694 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   10b30:	e5858014 	str	r8, [r5, #20]
   10b34:	eaffff5c 	b	108ac <CUSBBulkOnlyMassStorageDevice::Configure()+0x34>
   10b38:	eb0031c1 	bl	1d244 <CLogger::Get()>
   10b3c:	e59f319c 	ldr	r3, [pc, #412]	; 10ce0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x468>
   10b40:	e3a02001 	mov	r2, #1
   10b44:	e59f1180 	ldr	r1, [pc, #384]	; 10ccc <CUSBBulkOnlyMassStorageDevice::Configure()+0x454>
   10b48:	eb003366 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10b4c:	e1a00006 	mov	r0, r6
   10b50:	e28dd064 	add	sp, sp, #100	; 0x64
   10b54:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10b58:	e3a06000 	mov	r6, #0
   10b5c:	e59f1168 	ldr	r1, [pc, #360]	; 10ccc <CUSBBulkOnlyMassStorageDevice::Configure()+0x454>
   10b60:	eb001127 	bl	15004 <CUSBFunction::ConfigurationError(char const*) const>
   10b64:	e1a00006 	mov	r0, r6
   10b68:	e28dd064 	add	sp, sp, #100	; 0x64
   10b6c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10b70:	e5953010 	ldr	r3, [r5, #16]
   10b74:	e1a00005 	mov	r0, r5
   10b78:	e3530000 	cmp	r3, #0
   10b7c:	1afffff5 	bne	10b58 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2e0>
   10b80:	eb0010a9 	bl	14e2c <CUSBFunction::GetDevice() const>
   10b84:	e1a09000 	mov	r9, r0
   10b88:	e1a00007 	mov	r0, r7
   10b8c:	eb00487e 	bl	22d8c <operator new(unsigned int)>
   10b90:	e1a08000 	mov	r8, r0
   10b94:	e1a02004 	mov	r2, r4
   10b98:	e1a01009 	mov	r1, r9
   10b9c:	ebfff6bc 	bl	e694 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   10ba0:	e5858010 	str	r8, [r5, #16]
   10ba4:	eaffff40 	b	108ac <CUSBBulkOnlyMassStorageDevice::Configure()+0x34>
   10ba8:	eb0031a5 	bl	1d244 <CLogger::Get()>
   10bac:	e5dd303c 	ldrb	r3, [sp, #60]	; 0x3c
   10bb0:	e1a02006 	mov	r2, r6
   10bb4:	e203301f 	and	r3, r3, #31
   10bb8:	e58d3000 	str	r3, [sp]
   10bbc:	e59f1108 	ldr	r1, [pc, #264]	; 10ccc <CUSBBulkOnlyMassStorageDevice::Configure()+0x454>
   10bc0:	e59f311c 	ldr	r3, [pc, #284]	; 10ce4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x46c>
   10bc4:	e1a06004 	mov	r6, r4
   10bc8:	eb003346 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10bcc:	eaffffde 	b	10b4c <CUSBBulkOnlyMassStorageDevice::Configure()+0x2d4>
   10bd0:	eb00319b 	bl	1d244 <CLogger::Get()>
   10bd4:	e1a02006 	mov	r2, r6
   10bd8:	e1a06004 	mov	r6, r4
   10bdc:	e59f3104 	ldr	r3, [pc, #260]	; 10ce8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x470>
   10be0:	e59f10e4 	ldr	r1, [pc, #228]	; 10ccc <CUSBBulkOnlyMassStorageDevice::Configure()+0x454>
   10be4:	eb00333f 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10be8:	e1a00006 	mov	r0, r6
   10bec:	e28dd064 	add	sp, sp, #100	; 0x64
   10bf0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10bf4:	e1a00005 	mov	r0, r5
   10bf8:	e59f10cc 	ldr	r1, [pc, #204]	; 10ccc <CUSBBulkOnlyMassStorageDevice::Configure()+0x454>
   10bfc:	eb001100 	bl	15004 <CUSBFunction::ConfigurationError(char const*) const>
   10c00:	e3a06000 	mov	r6, #0
   10c04:	eaffffd0 	b	10b4c <CUSBBulkOnlyMassStorageDevice::Configure()+0x2d4>
   10c08:	eb00318d 	bl	1d244 <CLogger::Get()>
   10c0c:	e1a02009 	mov	r2, r9
   10c10:	e59f30d4 	ldr	r3, [pc, #212]	; 10cec <CUSBBulkOnlyMassStorageDevice::Configure()+0x474>
   10c14:	e59f10b0 	ldr	r1, [pc, #176]	; 10ccc <CUSBBulkOnlyMassStorageDevice::Configure()+0x454>
   10c18:	eb003332 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10c1c:	e3a06000 	mov	r6, #0
   10c20:	eaffffc9 	b	10b4c <CUSBBulkOnlyMassStorageDevice::Configure()+0x2d4>
   10c24:	eb003186 	bl	1d244 <CLogger::Get()>
   10c28:	e1a02006 	mov	r2, r6
   10c2c:	e58d4000 	str	r4, [sp]
   10c30:	e59f30b8 	ldr	r3, [pc, #184]	; 10cf0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x478>
   10c34:	e59f1090 	ldr	r1, [pc, #144]	; 10ccc <CUSBBulkOnlyMassStorageDevice::Configure()+0x454>
   10c38:	eb00332a 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10c3c:	e3a06000 	mov	r6, #0
   10c40:	eaffffc1 	b	10b4c <CUSBBulkOnlyMassStorageDevice::Configure()+0x2d4>
   10c44:	eb00317e 	bl	1d244 <CLogger::Get()>
   10c48:	e1a02009 	mov	r2, r9
   10c4c:	e59f30a0 	ldr	r3, [pc, #160]	; 10cf4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x47c>
   10c50:	e59f1074 	ldr	r1, [pc, #116]	; 10ccc <CUSBBulkOnlyMassStorageDevice::Configure()+0x454>
   10c54:	eb003323 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10c58:	eaffffbb 	b	10b4c <CUSBBulkOnlyMassStorageDevice::Configure()+0x2d4>
   10c5c:	eb003178 	bl	1d244 <CLogger::Get()>
   10c60:	e1a02006 	mov	r2, r6
   10c64:	e59f308c 	ldr	r3, [pc, #140]	; 10cf8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x480>
   10c68:	e59f105c 	ldr	r1, [pc, #92]	; 10ccc <CUSBBulkOnlyMassStorageDevice::Configure()+0x454>
   10c6c:	eb00331d 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10c70:	e3a06000 	mov	r6, #0
   10c74:	eaffffb4 	b	10b4c <CUSBBulkOnlyMassStorageDevice::Configure()+0x2d4>
   10c78:	eb002a77 	bl	1b65c <CDeviceNameService::Get()>
   10c7c:	e1a07000 	mov	r7, r0
   10c80:	e28d0028 	add	r0, sp, #40	; 0x28
   10c84:	eb003c42 	bl	1fd94 <CString::operator char const*() const>
   10c88:	e3a03001 	mov	r3, #1
   10c8c:	e1a01000 	mov	r1, r0
   10c90:	e1a02005 	mov	r2, r5
   10c94:	e1a00007 	mov	r0, r7
   10c98:	eb0029af 	bl	1b35c <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   10c9c:	e5943000 	ldr	r3, [r4]
   10ca0:	e2833001 	add	r3, r3, #1
   10ca4:	e5843000 	str	r3, [r4]
   10ca8:	eaffff8e 	b	10ae8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x270>
   10cac:	eb003164 	bl	1d244 <CLogger::Get()>
   10cb0:	e1a02006 	mov	r2, r6
   10cb4:	e59f3040 	ldr	r3, [pc, #64]	; 10cfc <CUSBBulkOnlyMassStorageDevice::Configure()+0x484>
   10cb8:	e59f100c 	ldr	r1, [pc, #12]	; 10ccc <CUSBBulkOnlyMassStorageDevice::Configure()+0x454>
   10cbc:	eb003309 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10cc0:	e3a06000 	mov	r6, #0
   10cc4:	eaffffa0 	b	10b4c <CUSBBulkOnlyMassStorageDevice::Configure()+0x2d4>
   10cc8:	00025ad8 	.word	0x00025ad8
   10ccc:	000258d0 	.word	0x000258d0
   10cd0:	0002b6c4 	.word	0x0002b6c4
   10cd4:	00025af0 	.word	0x00025af0
   10cd8:	000258d8 	.word	0x000258d8
   10cdc:	00025af8 	.word	0x00025af8
   10ce0:	00025834 	.word	0x00025834
   10ce4:	00025a50 	.word	0x00025a50
   10ce8:	00025a38 	.word	0x00025a38
   10cec:	00025a70 	.word	0x00025a70
   10cf0:	00025aa0 	.word	0x00025aa0
   10cf4:	00025b14 	.word	0x00025b14
   10cf8:	00025a88 	.word	0x00025a88
   10cfc:	00025abc 	.word	0x00025abc

00010d00 <CDWHCIFrameSchedulerNonPeriodic::~CDWHCIFrameSchedulerNonPeriodic()>:
   10d00:	e12fff1e 	bx	lr

00010d04 <CDWHCIFrameSchedulerNonPeriodic::StartSplit()>:
   10d04:	e3a03000 	mov	r3, #0
   10d08:	e5803008 	str	r3, [r0, #8]
   10d0c:	e12fff1e 	bx	lr

00010d10 <CDWHCIFrameSchedulerNonPeriodic::WaitForFrame()>:
   10d10:	e12fff1e 	bx	lr

00010d14 <CDWHCIFrameSchedulerNonPeriodic::IsOddFrame() const>:
   10d14:	e3a00000 	mov	r0, #0
   10d18:	e12fff1e 	bx	lr

00010d1c <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()>:
   10d1c:	e5903008 	ldr	r3, [r0, #8]
   10d20:	e92d4010 	push	{r4, lr}
   10d24:	e2433001 	sub	r3, r3, #1
   10d28:	e3530004 	cmp	r3, #4
   10d2c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   10d30:	ea000010 	b	10d78 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x5c>
   10d34:	00010d60 	.word	0x00010d60
   10d38:	00010d50 	.word	0x00010d50
   10d3c:	00010d50 	.word	0x00010d50
   10d40:	00010d48 	.word	0x00010d48
   10d44:	00010d48 	.word	0x00010d48
   10d48:	e3a00000 	mov	r0, #0
   10d4c:	e8bd8010 	pop	{r4, pc}
   10d50:	e59f0038 	ldr	r0, [pc, #56]	; 10d90 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x74>
   10d54:	eb00435d 	bl	21ad0 <CTimer::SimpleusDelay(unsigned int)>
   10d58:	e3a00001 	mov	r0, #1
   10d5c:	e8bd8010 	pop	{r4, pc}
   10d60:	e3a02002 	mov	r2, #2
   10d64:	e3a03003 	mov	r3, #3
   10d68:	e5802008 	str	r2, [r0, #8]
   10d6c:	e580300c 	str	r3, [r0, #12]
   10d70:	e3a00001 	mov	r0, #1
   10d74:	e8bd8010 	pop	{r4, pc}
   10d78:	e3a0205f 	mov	r2, #95	; 0x5f
   10d7c:	e59f1010 	ldr	r1, [pc, #16]	; 10d94 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x78>
   10d80:	e59f0010 	ldr	r0, [pc, #16]	; 10d98 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x7c>
   10d84:	eb00273b 	bl	1aa78 <assertion_failed>
   10d88:	e3a00000 	mov	r0, #0
   10d8c:	e8bd8010 	pop	{r4, pc}
   10d90:	00000271 	.word	0x00000271
   10d94:	00025b4c 	.word	0x00025b4c
   10d98:	00025034 	.word	0x00025034

00010d9c <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)>:
   10d9c:	e92d4010 	push	{r4, lr}
   10da0:	e5903008 	ldr	r3, [r0, #8]
   10da4:	e24dd010 	sub	sp, sp, #16
   10da8:	e3530000 	cmp	r3, #0
   10dac:	e1a04000 	mov	r4, r0
   10db0:	0a000019 	beq	10e1c <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x80>
   10db4:	e2433002 	sub	r3, r3, #2
   10db8:	e3530001 	cmp	r3, #1
   10dbc:	9a000005 	bls	10dd8 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x3c>
   10dc0:	e3a0209b 	mov	r2, #155	; 0x9b
   10dc4:	e59f10cc 	ldr	r1, [pc, #204]	; 10e98 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xfc>
   10dc8:	e59f00cc 	ldr	r0, [pc, #204]	; 10e9c <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x100>
   10dcc:	e28dd010 	add	sp, sp, #16
   10dd0:	e8bd4010 	pop	{r4, lr}
   10dd4:	ea002727 	b	1aa78 <assertion_failed>
   10dd8:	e3110001 	tst	r1, #1
   10ddc:	13a03004 	movne	r3, #4
   10de0:	15803008 	strne	r3, [r0, #8]
   10de4:	1a00000a 	bne	10e14 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x78>
   10de8:	e3110060 	tst	r1, #96	; 0x60
   10dec:	1a000014 	bne	10e44 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xa8>
   10df0:	e3110010 	tst	r1, #16
   10df4:	0a00001d 	beq	10e70 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xd4>
   10df8:	e590300c 	ldr	r3, [r0, #12]
   10dfc:	e3530000 	cmp	r3, #0
   10e00:	e2433001 	sub	r3, r3, #1
   10e04:	e580300c 	str	r3, [r0, #12]
   10e08:	0a000015 	beq	10e64 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xc8>
   10e0c:	e3a03003 	mov	r3, #3
   10e10:	e5843008 	str	r3, [r4, #8]
   10e14:	e28dd010 	add	sp, sp, #16
   10e18:	e8bd8010 	pop	{r4, pc}
   10e1c:	e3110020 	tst	r1, #32
   10e20:	1a000003 	bne	10e34 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x98>
   10e24:	e3a0206b 	mov	r2, #107	; 0x6b
   10e28:	e59f1068 	ldr	r1, [pc, #104]	; 10e98 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xfc>
   10e2c:	e59f006c 	ldr	r0, [pc, #108]	; 10ea0 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x104>
   10e30:	eb002710 	bl	1aa78 <assertion_failed>
   10e34:	e3a03001 	mov	r3, #1
   10e38:	e5843008 	str	r3, [r4, #8]
   10e3c:	e28dd010 	add	sp, sp, #16
   10e40:	e8bd8010 	pop	{r4, pc}
   10e44:	e590300c 	ldr	r3, [r0, #12]
   10e48:	e3530000 	cmp	r3, #0
   10e4c:	e2433001 	sub	r3, r3, #1
   10e50:	e580300c 	str	r3, [r0, #12]
   10e54:	1affffec 	bne	10e0c <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x70>
   10e58:	e3a03005 	mov	r3, #5
   10e5c:	e5843008 	str	r3, [r4, #8]
   10e60:	eaffffeb 	b	10e14 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x78>
   10e64:	e59f0038 	ldr	r0, [pc, #56]	; 10ea4 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x108>
   10e68:	eb004318 	bl	21ad0 <CTimer::SimpleusDelay(unsigned int)>
   10e6c:	eafffff9 	b	10e58 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xbc>
   10e70:	e58d100c 	str	r1, [sp, #12]
   10e74:	eb0030f2 	bl	1d244 <CLogger::Get()>
   10e78:	e59d100c 	ldr	r1, [sp, #12]
   10e7c:	e3a02001 	mov	r2, #1
   10e80:	e58d1000 	str	r1, [sp]
   10e84:	e59f301c 	ldr	r3, [pc, #28]	; 10ea8 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x10c>
   10e88:	e59f101c 	ldr	r1, [pc, #28]	; 10eac <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x110>
   10e8c:	eb003295 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10e90:	e3a02096 	mov	r2, #150	; 0x96
   10e94:	eaffffca 	b	10dc4 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x28>
   10e98:	00025b4c 	.word	0x00025b4c
   10e9c:	00025034 	.word	0x00025034
   10ea0:	00025b64 	.word	0x00025b64
   10ea4:	00000271 	.word	0x00000271
   10ea8:	00025b88 	.word	0x00025b88
   10eac:	00025b9c 	.word	0x00025b9c

00010eb0 <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()>:
   10eb0:	e59f303c 	ldr	r3, [pc, #60]	; 10ef4 <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()+0x44>
   10eb4:	e92d4010 	push	{r4, lr}
   10eb8:	e5803000 	str	r3, [r0]
   10ebc:	e1a04000 	mov	r4, r0
   10ec0:	eb004334 	bl	21b98 <CTimer::Get()>
   10ec4:	e3a03006 	mov	r3, #6
   10ec8:	e3500000 	cmp	r0, #0
   10ecc:	e9840009 	stmib	r4, {r0, r3}
   10ed0:	0a000001 	beq	10edc <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()+0x2c>
   10ed4:	e1a00004 	mov	r0, r4
   10ed8:	e8bd8010 	pop	{r4, pc}
   10edc:	e3a0202e 	mov	r2, #46	; 0x2e
   10ee0:	e59f1010 	ldr	r1, [pc, #16]	; 10ef8 <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()+0x48>
   10ee4:	e59f0010 	ldr	r0, [pc, #16]	; 10efc <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()+0x4c>
   10ee8:	eb0026e2 	bl	1aa78 <assertion_failed>
   10eec:	e1a00004 	mov	r0, r4
   10ef0:	e8bd8010 	pop	{r4, pc}
   10ef4:	00025b30 	.word	0x00025b30
   10ef8:	00025b4c 	.word	0x00025b4c
   10efc:	000247b4 	.word	0x000247b4

00010f00 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)>:
   10f00:	e3500010 	cmp	r0, #16
   10f04:	e92d4010 	push	{r4, lr}
   10f08:	0a000003 	beq	10f1c <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x1c>
   10f0c:	e3a020bd 	mov	r2, #189	; 0xbd
   10f10:	e59f1038 	ldr	r1, [pc, #56]	; 10f50 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x50>
   10f14:	e59f0038 	ldr	r0, [pc, #56]	; 10f54 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x54>
   10f18:	eb0026d6 	bl	1aa78 <assertion_failed>
   10f1c:	e59f4034 	ldr	r4, [pc, #52]	; 10f58 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x58>
   10f20:	e5940000 	ldr	r0, [r4]
   10f24:	e3500000 	cmp	r0, #0
   10f28:	0a000001 	beq	10f34 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x34>
   10f2c:	e8bd4010 	pop	{r4, lr}
   10f30:	ea0027ee 	b	1aef0 <CClassAllocator::Allocate()>
   10f34:	e59f0020 	ldr	r0, [pc, #32]	; 10f5c <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x5c>
   10f38:	e3a020bd 	mov	r2, #189	; 0xbd
   10f3c:	e59f100c 	ldr	r1, [pc, #12]	; 10f50 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x50>
   10f40:	eb0026cc 	bl	1aa78 <assertion_failed>
   10f44:	e5940000 	ldr	r0, [r4]
   10f48:	e8bd4010 	pop	{r4, lr}
   10f4c:	ea0027e7 	b	1aef0 <CClassAllocator::Allocate()>
   10f50:	00025b4c 	.word	0x00025b4c
   10f54:	00025ba4 	.word	0x00025ba4
   10f58:	0002b940 	.word	0x0002b940
   10f5c:	00024f14 	.word	0x00024f14

00010f60 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)>:
   10f60:	e3510010 	cmp	r1, #16
   10f64:	e92d4070 	push	{r4, r5, r6, lr}
   10f68:	e1a05000 	mov	r5, r0
   10f6c:	0a000003 	beq	10f80 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x20>
   10f70:	e3a020bd 	mov	r2, #189	; 0xbd
   10f74:	e59f1040 	ldr	r1, [pc, #64]	; 10fbc <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x5c>
   10f78:	e59f0040 	ldr	r0, [pc, #64]	; 10fc0 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x60>
   10f7c:	eb0026bd 	bl	1aa78 <assertion_failed>
   10f80:	e59f403c 	ldr	r4, [pc, #60]	; 10fc4 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x64>
   10f84:	e5940000 	ldr	r0, [r4]
   10f88:	e3500000 	cmp	r0, #0
   10f8c:	0a000002 	beq	10f9c <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x3c>
   10f90:	e1a01005 	mov	r1, r5
   10f94:	e8bd4070 	pop	{r4, r5, r6, lr}
   10f98:	ea00280f 	b	1afdc <CClassAllocator::Free(void*)>
   10f9c:	e59f1018 	ldr	r1, [pc, #24]	; 10fbc <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x5c>
   10fa0:	e59f0020 	ldr	r0, [pc, #32]	; 10fc8 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x68>
   10fa4:	e3a020bd 	mov	r2, #189	; 0xbd
   10fa8:	eb0026b2 	bl	1aa78 <assertion_failed>
   10fac:	e5940000 	ldr	r0, [r4]
   10fb0:	e1a01005 	mov	r1, r5
   10fb4:	e8bd4070 	pop	{r4, r5, r6, lr}
   10fb8:	ea002807 	b	1afdc <CClassAllocator::Free(void*)>
   10fbc:	00025b4c 	.word	0x00025b4c
   10fc0:	00025ba4 	.word	0x00025ba4
   10fc4:	0002b940 	.word	0x0002b940
   10fc8:	00024f14 	.word	0x00024f14

00010fcc <CDWHCIFrameSchedulerNonPeriodic::~CDWHCIFrameSchedulerNonPeriodic()>:
   10fcc:	e92d4010 	push	{r4, lr}
   10fd0:	e1a04000 	mov	r4, r0
   10fd4:	e3a01010 	mov	r1, #16
   10fd8:	ebffffe0 	bl	10f60 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)>
   10fdc:	e1a00004 	mov	r0, r4
   10fe0:	e8bd8010 	pop	{r4, pc}

00010fe4 <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)>:
   10fe4:	e92d4070 	push	{r4, r5, r6, lr}
   10fe8:	e59f4040 	ldr	r4, [pc, #64]	; 11030 <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)+0x4c>
   10fec:	e1a06000 	mov	r6, r0
   10ff0:	e5943000 	ldr	r3, [r4]
   10ff4:	e3530000 	cmp	r3, #0
   10ff8:	0a000003 	beq	1100c <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)+0x28>
   10ffc:	e3a020bd 	mov	r2, #189	; 0xbd
   11000:	e59f102c 	ldr	r1, [pc, #44]	; 11034 <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)+0x50>
   11004:	e59f002c 	ldr	r0, [pc, #44]	; 11038 <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)+0x54>
   11008:	eb00269a 	bl	1aa78 <assertion_failed>
   1100c:	e3a0001c 	mov	r0, #28
   11010:	eb00475d 	bl	22d8c <operator new(unsigned int)>
   11014:	e1a05000 	mov	r5, r0
   11018:	e1a02006 	mov	r2, r6
   1101c:	e59f3018 	ldr	r3, [pc, #24]	; 1103c <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)+0x58>
   11020:	e3a01010 	mov	r1, #16
   11024:	eb002798 	bl	1ae8c <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
   11028:	e5845000 	str	r5, [r4]
   1102c:	e8bd8070 	pop	{r4, r5, r6, pc}
   11030:	0002b940 	.word	0x0002b940
   11034:	00025b4c 	.word	0x00025b4c
   11038:	00024f28 	.word	0x00024f28
   1103c:	00025bd8 	.word	0x00025bd8

00011040 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)>:
   11040:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   11044:	e59f4054 	ldr	r4, [pc, #84]	; 110a0 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x60>
   11048:	e24dd00c 	sub	sp, sp, #12
   1104c:	e5943000 	ldr	r3, [r4]
   11050:	e1a06000 	mov	r6, r0
   11054:	e3530000 	cmp	r3, #0
   11058:	e1a07001 	mov	r7, r1
   1105c:	0a000003 	beq	11070 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x30>
   11060:	e3a020bd 	mov	r2, #189	; 0xbd
   11064:	e59f1038 	ldr	r1, [pc, #56]	; 110a4 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x64>
   11068:	e59f0038 	ldr	r0, [pc, #56]	; 110a8 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x68>
   1106c:	eb002681 	bl	1aa78 <assertion_failed>
   11070:	e3a0001c 	mov	r0, #28
   11074:	eb004744 	bl	22d8c <operator new(unsigned int)>
   11078:	e59f102c 	ldr	r1, [pc, #44]	; 110ac <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x6c>
   1107c:	e1a03007 	mov	r3, r7
   11080:	e58d1000 	str	r1, [sp]
   11084:	e1a02006 	mov	r2, r6
   11088:	e3a01010 	mov	r1, #16
   1108c:	e1a05000 	mov	r5, r0
   11090:	eb002789 	bl	1aebc <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
   11094:	e5845000 	str	r5, [r4]
   11098:	e28dd00c 	add	sp, sp, #12
   1109c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   110a0:	0002b940 	.word	0x0002b940
   110a4:	00025b4c 	.word	0x00025b4c
   110a8:	00024f28 	.word	0x00024f28
   110ac:	00025bd8 	.word	0x00025bd8

000110b0 <CDWHCIFrameSchedulerPeriodic::~CDWHCIFrameSchedulerPeriodic()>:
   110b0:	e12fff1e 	bx	lr

000110b4 <CDWHCIFrameSchedulerPeriodic::StartSplit()>:
   110b4:	e3a02901 	mov	r2, #16384	; 0x4000
   110b8:	e3a03000 	mov	r3, #0
   110bc:	e1c021b0 	strh	r2, [r0, #16]
   110c0:	e5803008 	str	r3, [r0, #8]
   110c4:	e12fff1e 	bx	lr

000110c8 <CDWHCIFrameSchedulerPeriodic::IsOddFrame() const>:
   110c8:	e1d001b0 	ldrh	r0, [r0, #16]
   110cc:	e2000001 	and	r0, r0, #1
   110d0:	e12fff1e 	bx	lr

000110d4 <CDWHCIFrameSchedulerPeriodic::WaitForFrame()>:
   110d4:	e92d4010 	push	{r4, lr}
   110d8:	e1a04000 	mov	r4, r0
   110dc:	e24dd010 	sub	sp, sp, #16
   110e0:	e28d0004 	add	r0, sp, #4
   110e4:	e59f1054 	ldr	r1, [pc, #84]	; 11140 <CDWHCIFrameSchedulerPeriodic::WaitForFrame()+0x6c>
   110e8:	ebffedd6 	bl	c848 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   110ec:	e1d431b0 	ldrh	r3, [r4, #16]
   110f0:	e3530901 	cmp	r3, #16384	; 0x4000
   110f4:	0a000009 	beq	11120 <CDWHCIFrameSchedulerPeriodic::WaitForFrame()+0x4c>
   110f8:	e28d0004 	add	r0, sp, #4
   110fc:	ebffedda 	bl	c86c <CDWHCIRegister::Read()>
   11100:	e1d431b0 	ldrh	r3, [r4, #16]
   11104:	e2000007 	and	r0, r0, #7
   11108:	e1500003 	cmp	r0, r3
   1110c:	1afffff9 	bne	110f8 <CDWHCIFrameSchedulerPeriodic::WaitForFrame()+0x24>
   11110:	e28d0004 	add	r0, sp, #4
   11114:	ebffedd3 	bl	c868 <CDWHCIRegister::~CDWHCIRegister()>
   11118:	e28dd010 	add	sp, sp, #16
   1111c:	e8bd8010 	pop	{r4, pc}
   11120:	e28d0004 	add	r0, sp, #4
   11124:	ebffedd0 	bl	c86c <CDWHCIRegister::Read()>
   11128:	e2803001 	add	r3, r0, #1
   1112c:	e2033007 	and	r3, r3, #7
   11130:	e3530006 	cmp	r3, #6
   11134:	03a03007 	moveq	r3, #7
   11138:	e1c431b0 	strh	r3, [r4, #16]
   1113c:	eaffffed 	b	110f8 <CDWHCIFrameSchedulerPeriodic::WaitForFrame()+0x24>
   11140:	20980408 	.word	0x20980408

00011144 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()>:
   11144:	e5903008 	ldr	r3, [r0, #8]
   11148:	e92d4010 	push	{r4, lr}
   1114c:	e2433001 	sub	r3, r3, #1
   11150:	e1a04000 	mov	r4, r0
   11154:	e3530004 	cmp	r3, #4
   11158:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1115c:	ea00001c 	b	111d4 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0x90>
   11160:	0001119c 	.word	0x0001119c
   11164:	000111d4 	.word	0x000111d4
   11168:	0001117c 	.word	0x0001117c
   1116c:	00011174 	.word	0x00011174
   11170:	00011174 	.word	0x00011174
   11174:	e3a00000 	mov	r0, #0
   11178:	e8bd8010 	pop	{r4, pc}
   1117c:	e1d031b0 	ldrh	r3, [r0, #16]
   11180:	e3530901 	cmp	r3, #16384	; 0x4000
   11184:	0a000018 	beq	111ec <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xa8>
   11188:	e2833001 	add	r3, r3, #1
   1118c:	e2033007 	and	r3, r3, #7
   11190:	e1c431b0 	strh	r3, [r4, #16]
   11194:	e3a00001 	mov	r0, #1
   11198:	e8bd8010 	pop	{r4, pc}
   1119c:	e3a02002 	mov	r2, #2
   111a0:	e1d031b0 	ldrh	r3, [r0, #16]
   111a4:	e5802008 	str	r2, [r0, #8]
   111a8:	e3530901 	cmp	r3, #16384	; 0x4000
   111ac:	0a000014 	beq	11204 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xc0>
   111b0:	e3530005 	cmp	r3, #5
   111b4:	03a02002 	moveq	r2, #2
   111b8:	13a02003 	movne	r2, #3
   111bc:	e2833002 	add	r3, r3, #2
   111c0:	e2033007 	and	r3, r3, #7
   111c4:	e1c431b0 	strh	r3, [r4, #16]
   111c8:	e584200c 	str	r2, [r4, #12]
   111cc:	e3a00001 	mov	r0, #1
   111d0:	e8bd8010 	pop	{r4, pc}
   111d4:	e3a0206e 	mov	r2, #110	; 0x6e
   111d8:	e59f103c 	ldr	r1, [pc, #60]	; 1121c <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xd8>
   111dc:	e59f003c 	ldr	r0, [pc, #60]	; 11220 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xdc>
   111e0:	eb002624 	bl	1aa78 <assertion_failed>
   111e4:	e3a00000 	mov	r0, #0
   111e8:	e8bd8010 	pop	{r4, pc}
   111ec:	e3a02062 	mov	r2, #98	; 0x62
   111f0:	e59f1024 	ldr	r1, [pc, #36]	; 1121c <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xd8>
   111f4:	e59f0028 	ldr	r0, [pc, #40]	; 11224 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xe0>
   111f8:	eb00261e 	bl	1aa78 <assertion_failed>
   111fc:	e1d431b0 	ldrh	r3, [r4, #16]
   11200:	eaffffe0 	b	11188 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0x44>
   11204:	e3a02054 	mov	r2, #84	; 0x54
   11208:	e59f100c 	ldr	r1, [pc, #12]	; 1121c <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xd8>
   1120c:	e59f0010 	ldr	r0, [pc, #16]	; 11224 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xe0>
   11210:	eb002618 	bl	1aa78 <assertion_failed>
   11214:	e1d431b0 	ldrh	r3, [r4, #16]
   11218:	eaffffe4 	b	111b0 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0x6c>
   1121c:	00025c1c 	.word	0x00025c1c
   11220:	00025034 	.word	0x00025034
   11224:	00025c34 	.word	0x00025c34

00011228 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)>:
   11228:	e92d4010 	push	{r4, lr}
   1122c:	e5903008 	ldr	r3, [r0, #8]
   11230:	e24dd010 	sub	sp, sp, #16
   11234:	e3530000 	cmp	r3, #0
   11238:	e1a04000 	mov	r4, r0
   1123c:	0a000016 	beq	1129c <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x74>
   11240:	e2433002 	sub	r3, r3, #2
   11244:	e3530001 	cmp	r3, #1
   11248:	9a000005 	bls	11264 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x3c>
   1124c:	e3a020a6 	mov	r2, #166	; 0xa6
   11250:	e59f10c8 	ldr	r1, [pc, #200]	; 11320 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xf8>
   11254:	e59f00c8 	ldr	r0, [pc, #200]	; 11324 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xfc>
   11258:	e28dd010 	add	sp, sp, #16
   1125c:	e8bd4010 	pop	{r4, lr}
   11260:	ea002604 	b	1aa78 <assertion_failed>
   11264:	e3110001 	tst	r1, #1
   11268:	13a03004 	movne	r3, #4
   1126c:	15803008 	strne	r3, [r0, #8]
   11270:	1a000007 	bne	11294 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x6c>
   11274:	e3110060 	tst	r1, #96	; 0x60
   11278:	1a000011 	bne	112c4 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x9c>
   1127c:	e3110010 	tst	r1, #16
   11280:	0a00001c 	beq	112f8 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xd0>
   11284:	e59f009c 	ldr	r0, [pc, #156]	; 11328 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x100>
   11288:	eb004210 	bl	21ad0 <CTimer::SimpleusDelay(unsigned int)>
   1128c:	e3a03005 	mov	r3, #5
   11290:	e5843008 	str	r3, [r4, #8]
   11294:	e28dd010 	add	sp, sp, #16
   11298:	e8bd8010 	pop	{r4, pc}
   1129c:	e3110020 	tst	r1, #32
   112a0:	1a000003 	bne	112b4 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x8c>
   112a4:	e3a0207a 	mov	r2, #122	; 0x7a
   112a8:	e59f1070 	ldr	r1, [pc, #112]	; 11320 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xf8>
   112ac:	e59f0078 	ldr	r0, [pc, #120]	; 1132c <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x104>
   112b0:	eb0025f0 	bl	1aa78 <assertion_failed>
   112b4:	e3a03001 	mov	r3, #1
   112b8:	e5843008 	str	r3, [r4, #8]
   112bc:	e28dd010 	add	sp, sp, #16
   112c0:	e8bd8010 	pop	{r4, pc}
   112c4:	e590300c 	ldr	r3, [r0, #12]
   112c8:	e3530000 	cmp	r3, #0
   112cc:	e2433001 	sub	r3, r3, #1
   112d0:	e580300c 	str	r3, [r0, #12]
   112d4:	13a03003 	movne	r3, #3
   112d8:	15803008 	strne	r3, [r0, #8]
   112dc:	1affffec 	bne	11294 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x6c>
   112e0:	e3a03005 	mov	r3, #5
   112e4:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   112e8:	e5843008 	str	r3, [r4, #8]
   112ec:	e28dd010 	add	sp, sp, #16
   112f0:	e8bd4010 	pop	{r4, lr}
   112f4:	ea0041f5 	b	21ad0 <CTimer::SimpleusDelay(unsigned int)>
   112f8:	e58d100c 	str	r1, [sp, #12]
   112fc:	eb002fd0 	bl	1d244 <CLogger::Get()>
   11300:	e59d100c 	ldr	r1, [sp, #12]
   11304:	e3a02001 	mov	r2, #1
   11308:	e58d1000 	str	r1, [sp]
   1130c:	e59f301c 	ldr	r3, [pc, #28]	; 11330 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x108>
   11310:	e59f101c 	ldr	r1, [pc, #28]	; 11334 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x10c>
   11314:	eb003173 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11318:	e3a020a1 	mov	r2, #161	; 0xa1
   1131c:	eaffffcb 	b	11250 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x28>
   11320:	00025c1c 	.word	0x00025c1c
   11324:	00025034 	.word	0x00025034
   11328:	00000271 	.word	0x00000271
   1132c:	00025b64 	.word	0x00025b64
   11330:	00025b88 	.word	0x00025b88
   11334:	00025b9c 	.word	0x00025b9c

00011338 <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()>:
   11338:	e59f3044 	ldr	r3, [pc, #68]	; 11384 <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()+0x4c>
   1133c:	e92d4010 	push	{r4, lr}
   11340:	e5803000 	str	r3, [r0]
   11344:	e1a04000 	mov	r4, r0
   11348:	eb004212 	bl	21b98 <CTimer::Get()>
   1134c:	e3a02006 	mov	r2, #6
   11350:	e3a03901 	mov	r3, #16384	; 0x4000
   11354:	e3500000 	cmp	r0, #0
   11358:	e9840005 	stmib	r4, {r0, r2}
   1135c:	e1c431b0 	strh	r3, [r4, #16]
   11360:	0a000001 	beq	1136c <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()+0x34>
   11364:	e1a00004 	mov	r0, r4
   11368:	e8bd8010 	pop	{r4, pc}
   1136c:	e3a02034 	mov	r2, #52	; 0x34
   11370:	e59f1010 	ldr	r1, [pc, #16]	; 11388 <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()+0x50>
   11374:	e59f0010 	ldr	r0, [pc, #16]	; 1138c <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()+0x54>
   11378:	eb0025be 	bl	1aa78 <assertion_failed>
   1137c:	e1a00004 	mov	r0, r4
   11380:	e8bd8010 	pop	{r4, pc}
   11384:	00025c00 	.word	0x00025c00
   11388:	00025c1c 	.word	0x00025c1c
   1138c:	000247b4 	.word	0x000247b4

00011390 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)>:
   11390:	e3500014 	cmp	r0, #20
   11394:	e92d4010 	push	{r4, lr}
   11398:	0a000003 	beq	113ac <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x1c>
   1139c:	e3a020e2 	mov	r2, #226	; 0xe2
   113a0:	e59f1038 	ldr	r1, [pc, #56]	; 113e0 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x50>
   113a4:	e59f0038 	ldr	r0, [pc, #56]	; 113e4 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x54>
   113a8:	eb0025b2 	bl	1aa78 <assertion_failed>
   113ac:	e59f4034 	ldr	r4, [pc, #52]	; 113e8 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x58>
   113b0:	e5940000 	ldr	r0, [r4]
   113b4:	e3500000 	cmp	r0, #0
   113b8:	0a000001 	beq	113c4 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x34>
   113bc:	e8bd4010 	pop	{r4, lr}
   113c0:	ea0026ca 	b	1aef0 <CClassAllocator::Allocate()>
   113c4:	e59f0020 	ldr	r0, [pc, #32]	; 113ec <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x5c>
   113c8:	e3a020e2 	mov	r2, #226	; 0xe2
   113cc:	e59f100c 	ldr	r1, [pc, #12]	; 113e0 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x50>
   113d0:	eb0025a8 	bl	1aa78 <assertion_failed>
   113d4:	e5940000 	ldr	r0, [r4]
   113d8:	e8bd4010 	pop	{r4, lr}
   113dc:	ea0026c3 	b	1aef0 <CClassAllocator::Allocate()>
   113e0:	00025c1c 	.word	0x00025c1c
   113e4:	00025c54 	.word	0x00025c54
   113e8:	0002b944 	.word	0x0002b944
   113ec:	00024f14 	.word	0x00024f14

000113f0 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)>:
   113f0:	e3510014 	cmp	r1, #20
   113f4:	e92d4070 	push	{r4, r5, r6, lr}
   113f8:	e1a05000 	mov	r5, r0
   113fc:	0a000003 	beq	11410 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x20>
   11400:	e3a020e2 	mov	r2, #226	; 0xe2
   11404:	e59f1040 	ldr	r1, [pc, #64]	; 1144c <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x5c>
   11408:	e59f0040 	ldr	r0, [pc, #64]	; 11450 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x60>
   1140c:	eb002599 	bl	1aa78 <assertion_failed>
   11410:	e59f403c 	ldr	r4, [pc, #60]	; 11454 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x64>
   11414:	e5940000 	ldr	r0, [r4]
   11418:	e3500000 	cmp	r0, #0
   1141c:	0a000002 	beq	1142c <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x3c>
   11420:	e1a01005 	mov	r1, r5
   11424:	e8bd4070 	pop	{r4, r5, r6, lr}
   11428:	ea0026eb 	b	1afdc <CClassAllocator::Free(void*)>
   1142c:	e59f1018 	ldr	r1, [pc, #24]	; 1144c <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x5c>
   11430:	e59f0020 	ldr	r0, [pc, #32]	; 11458 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x68>
   11434:	e3a020e2 	mov	r2, #226	; 0xe2
   11438:	eb00258e 	bl	1aa78 <assertion_failed>
   1143c:	e5940000 	ldr	r0, [r4]
   11440:	e1a01005 	mov	r1, r5
   11444:	e8bd4070 	pop	{r4, r5, r6, lr}
   11448:	ea0026e3 	b	1afdc <CClassAllocator::Free(void*)>
   1144c:	00025c1c 	.word	0x00025c1c
   11450:	00025c54 	.word	0x00025c54
   11454:	0002b944 	.word	0x0002b944
   11458:	00024f14 	.word	0x00024f14

0001145c <CDWHCIFrameSchedulerPeriodic::~CDWHCIFrameSchedulerPeriodic()>:
   1145c:	e92d4010 	push	{r4, lr}
   11460:	e1a04000 	mov	r4, r0
   11464:	e3a01014 	mov	r1, #20
   11468:	ebffffe0 	bl	113f0 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)>
   1146c:	e1a00004 	mov	r0, r4
   11470:	e8bd8010 	pop	{r4, pc}

00011474 <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)>:
   11474:	e92d4070 	push	{r4, r5, r6, lr}
   11478:	e59f4040 	ldr	r4, [pc, #64]	; 114c0 <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)+0x4c>
   1147c:	e1a06000 	mov	r6, r0
   11480:	e5943000 	ldr	r3, [r4]
   11484:	e3530000 	cmp	r3, #0
   11488:	0a000003 	beq	1149c <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)+0x28>
   1148c:	e3a020e2 	mov	r2, #226	; 0xe2
   11490:	e59f102c 	ldr	r1, [pc, #44]	; 114c4 <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)+0x50>
   11494:	e59f002c 	ldr	r0, [pc, #44]	; 114c8 <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)+0x54>
   11498:	eb002576 	bl	1aa78 <assertion_failed>
   1149c:	e3a0001c 	mov	r0, #28
   114a0:	eb004639 	bl	22d8c <operator new(unsigned int)>
   114a4:	e1a05000 	mov	r5, r0
   114a8:	e1a02006 	mov	r2, r6
   114ac:	e59f3018 	ldr	r3, [pc, #24]	; 114cc <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)+0x58>
   114b0:	e3a01014 	mov	r1, #20
   114b4:	eb002674 	bl	1ae8c <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
   114b8:	e5845000 	str	r5, [r4]
   114bc:	e8bd8070 	pop	{r4, r5, r6, pc}
   114c0:	0002b944 	.word	0x0002b944
   114c4:	00025c1c 	.word	0x00025c1c
   114c8:	00024f28 	.word	0x00024f28
   114cc:	00025c84 	.word	0x00025c84

000114d0 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)>:
   114d0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   114d4:	e59f4054 	ldr	r4, [pc, #84]	; 11530 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x60>
   114d8:	e24dd00c 	sub	sp, sp, #12
   114dc:	e5943000 	ldr	r3, [r4]
   114e0:	e1a06000 	mov	r6, r0
   114e4:	e3530000 	cmp	r3, #0
   114e8:	e1a07001 	mov	r7, r1
   114ec:	0a000003 	beq	11500 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x30>
   114f0:	e3a020e2 	mov	r2, #226	; 0xe2
   114f4:	e59f1038 	ldr	r1, [pc, #56]	; 11534 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x64>
   114f8:	e59f0038 	ldr	r0, [pc, #56]	; 11538 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x68>
   114fc:	eb00255d 	bl	1aa78 <assertion_failed>
   11500:	e3a0001c 	mov	r0, #28
   11504:	eb004620 	bl	22d8c <operator new(unsigned int)>
   11508:	e59f102c 	ldr	r1, [pc, #44]	; 1153c <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x6c>
   1150c:	e1a03007 	mov	r3, r7
   11510:	e58d1000 	str	r1, [sp]
   11514:	e1a02006 	mov	r2, r6
   11518:	e3a01014 	mov	r1, #20
   1151c:	e1a05000 	mov	r5, r0
   11520:	eb002665 	bl	1aebc <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
   11524:	e5845000 	str	r5, [r4]
   11528:	e28dd00c 	add	sp, sp, #12
   1152c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   11530:	0002b944 	.word	0x0002b944
   11534:	00025c1c 	.word	0x00025c1c
   11538:	00024f28 	.word	0x00024f28
   1153c:	00025c84 	.word	0x00025c84

00011540 <CUSBKeyboardDevice::~CUSBKeyboardDevice()>:
   11540:	e92d4070 	push	{r4, r5, r6, lr}
   11544:	e3a06000 	mov	r6, #0
   11548:	e1a04000 	mov	r4, r0
   1154c:	e59f5034 	ldr	r5, [pc, #52]	; 11588 <CUSBKeyboardDevice::~CUSBKeyboardDevice()+0x48>
   11550:	e580643c 	str	r6, [r0, #1084]	; 0x43c
   11554:	e2853008 	add	r3, r5, #8
   11558:	e5803000 	str	r3, [r0]
   1155c:	eb00283e 	bl	1b65c <CDeviceNameService::Get()>
   11560:	e1a03006 	mov	r3, r6
   11564:	e2851028 	add	r1, r5, #40	; 0x28
   11568:	e594244c 	ldr	r2, [r4, #1100]	; 0x44c
   1156c:	eb002862 	bl	1b6fc <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   11570:	e2840024 	add	r0, r4, #36	; 0x24
   11574:	eb001fd2 	bl	194c4 <CKeyboardBehaviour::~CKeyboardBehaviour()>
   11578:	e1a00004 	mov	r0, r4
   1157c:	eb0001b7 	bl	11c60 <CUSBHIDDevice::~CUSBHIDDevice()>
   11580:	e1a00004 	mov	r0, r4
   11584:	e8bd8070 	pop	{r4, r5, r6, pc}
   11588:	00025ca4 	.word	0x00025ca4

0001158c <CUSBKeyboardDevice::~CUSBKeyboardDevice()>:
   1158c:	e92d4010 	push	{r4, lr}
   11590:	e1a04000 	mov	r4, r0
   11594:	ebffffe9 	bl	11540 <CUSBKeyboardDevice::~CUSBKeyboardDevice()>
   11598:	e1a00004 	mov	r0, r4
   1159c:	e3a01e45 	mov	r1, #1104	; 0x450
   115a0:	eb0045fd 	bl	22d9c <operator delete(void*, unsigned int)>
   115a4:	e1a00004 	mov	r0, r4
   115a8:	e8bd8010 	pop	{r4, pc}

000115ac <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)>:
   115ac:	e2522008 	subs	r2, r2, #8
   115b0:	13a02001 	movne	r2, #1
   115b4:	e3510000 	cmp	r1, #0
   115b8:	03822001 	orreq	r2, r2, #1
   115bc:	e3520000 	cmp	r2, #0
   115c0:	112fff1e 	bxne	lr
   115c4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   115c8:	e590343c 	ldr	r3, [r0, #1084]	; 0x43c
   115cc:	e24dd00c 	sub	sp, sp, #12
   115d0:	e3530000 	cmp	r3, #0
   115d4:	e1a07001 	mov	r7, r1
   115d8:	0a000004 	beq	115f0 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x44>
   115dc:	e5d70000 	ldrb	r0, [r7]
   115e0:	e2811002 	add	r1, r1, #2
   115e4:	e28dd00c 	add	sp, sp, #12
   115e8:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   115ec:	e12fff13 	bx	r3
   115f0:	e1a06000 	mov	r6, r0
   115f4:	e1a04003 	mov	r4, r3
   115f8:	e3a05080 	mov	r5, #128	; 0x80
   115fc:	e3a09001 	mov	r9, #1
   11600:	e2808024 	add	r8, r0, #36	; 0x24
   11604:	ea000006 	b	11624 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x78>
   11608:	e1120003 	tst	r2, r3
   1160c:	1a00003d 	bne	11708 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x15c>
   11610:	e2844001 	add	r4, r4, #1
   11614:	e2855001 	add	r5, r5, #1
   11618:	e3540008 	cmp	r4, #8
   1161c:	e6ef5075 	uxtb	r5, r5
   11620:	0a00000a 	beq	11650 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xa4>
   11624:	e5d72000 	ldrb	r2, [r7]
   11628:	e1a03419 	lsl	r3, r9, r4
   1162c:	e1120003 	tst	r2, r3
   11630:	e5d62440 	ldrb	r2, [r6, #1088]	; 0x440
   11634:	0afffff3 	beq	11608 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x5c>
   11638:	e1120003 	tst	r2, r3
   1163c:	1afffff3 	bne	11610 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x64>
   11640:	e1a01005 	mov	r1, r5
   11644:	e1a00008 	mov	r0, r8
   11648:	eb00200b 	bl	1967c <CKeyboardBehaviour::KeyPressed(unsigned char)>
   1164c:	eaffffef 	b	11610 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x64>
   11650:	e2868d11 	add	r8, r6, #1088	; 0x440
   11654:	e2885002 	add	r5, r8, #2
   11658:	e1a0b005 	mov	fp, r5
   1165c:	e2863024 	add	r3, r6, #36	; 0x24
   11660:	e2884008 	add	r4, r8, #8
   11664:	e2879002 	add	r9, r7, #2
   11668:	e287a008 	add	sl, r7, #8
   1166c:	e58d3004 	str	r3, [sp, #4]
   11670:	e4db1001 	ldrb	r1, [fp], #1
   11674:	e3510000 	cmp	r1, #0
   11678:	0a000007 	beq	1169c <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xf0>
   1167c:	e1a03009 	mov	r3, r9
   11680:	e4d30001 	ldrb	r0, [r3], #1
   11684:	e1500001 	cmp	r0, r1
   11688:	0a000003 	beq	1169c <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xf0>
   1168c:	e153000a 	cmp	r3, sl
   11690:	1afffffa 	bne	11680 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xd4>
   11694:	e59d0004 	ldr	r0, [sp, #4]
   11698:	eb002006 	bl	196b8 <CKeyboardBehaviour::KeyReleased(unsigned char)>
   1169c:	e15b0004 	cmp	fp, r4
   116a0:	1afffff2 	bne	11670 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xc4>
   116a4:	e2866024 	add	r6, r6, #36	; 0x24
   116a8:	e2879001 	add	r9, r7, #1
   116ac:	e287a007 	add	sl, r7, #7
   116b0:	ea000001 	b	116bc <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x110>
   116b4:	e159000a 	cmp	r9, sl
   116b8:	0a00000c 	beq	116f0 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x144>
   116bc:	e5f91001 	ldrb	r1, [r9, #1]!
   116c0:	e3510000 	cmp	r1, #0
   116c4:	11a03005 	movne	r3, r5
   116c8:	0afffff9 	beq	116b4 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x108>
   116cc:	e4d32001 	ldrb	r2, [r3], #1
   116d0:	e1520001 	cmp	r2, r1
   116d4:	0afffff6 	beq	116b4 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x108>
   116d8:	e1530004 	cmp	r3, r4
   116dc:	1afffffa 	bne	116cc <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x120>
   116e0:	e1a00006 	mov	r0, r6
   116e4:	eb001fe4 	bl	1967c <CKeyboardBehaviour::KeyPressed(unsigned char)>
   116e8:	e159000a 	cmp	r9, sl
   116ec:	1afffff2 	bne	116bc <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x110>
   116f0:	e1a01007 	mov	r1, r7
   116f4:	e1a00008 	mov	r0, r8
   116f8:	e3a02008 	mov	r2, #8
   116fc:	e28dd00c 	add	sp, sp, #12
   11700:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11704:	ea0042a4 	b	2219c <memcpy>
   11708:	e1a01005 	mov	r1, r5
   1170c:	e1a00008 	mov	r0, r8
   11710:	eb001fe8 	bl	196b8 <CKeyboardBehaviour::KeyReleased(unsigned char)>
   11714:	eaffffbd 	b	11610 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x64>

00011718 <CUSBKeyboardDevice::CUSBKeyboardDevice(CUSBFunction*)>:
   11718:	e92d4010 	push	{r4, lr}
   1171c:	e1a04000 	mov	r4, r0
   11720:	e3a02008 	mov	r2, #8
   11724:	eb000139 	bl	11c10 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>
   11728:	e1a00004 	mov	r0, r4
   1172c:	e59f3028 	ldr	r3, [pc, #40]	; 1175c <CUSBKeyboardDevice::CUSBKeyboardDevice(CUSBFunction*)+0x44>
   11730:	e4803024 	str	r3, [r0], #36	; 0x24
   11734:	eb001f55 	bl	19490 <CKeyboardBehaviour::CKeyboardBehaviour()>
   11738:	e3a01000 	mov	r1, #0
   1173c:	e2840d11 	add	r0, r4, #1088	; 0x440
   11740:	e584143c 	str	r1, [r4, #1084]	; 0x43c
   11744:	e5c41448 	strb	r1, [r4, #1096]	; 0x448
   11748:	e584144c 	str	r1, [r4, #1100]	; 0x44c
   1174c:	e3a02008 	mov	r2, #8
   11750:	eb00411f 	bl	21bd4 <memset>
   11754:	e1a00004 	mov	r0, r4
   11758:	e8bd8010 	pop	{r4, pc}
   1175c:	00025cac 	.word	0x00025cac

00011760 <CUSBKeyboardDevice::RegisterKeyPressedHandler(void (*)(char const*))>:
   11760:	e2800024 	add	r0, r0, #36	; 0x24
   11764:	ea001f60 	b	194ec <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))>

00011768 <CUSBKeyboardDevice::RegisterSelectConsoleHandler(void (*)(unsigned int))>:
   11768:	e2800024 	add	r0, r0, #36	; 0x24
   1176c:	ea001f6c 	b	19524 <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))>

00011770 <CUSBKeyboardDevice::RegisterShutdownHandler(void (*)())>:
   11770:	e2800024 	add	r0, r0, #36	; 0x24
   11774:	ea001f78 	b	1955c <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())>

00011778 <CUSBKeyboardDevice::GetLEDStatus() const>:
   11778:	e92d4010 	push	{r4, lr}
   1177c:	e2800024 	add	r0, r0, #36	; 0x24
   11780:	eb001f83 	bl	19594 <CKeyboardBehaviour::GetLEDStatus() const>
   11784:	e2003001 	and	r3, r0, #1
   11788:	e3100002 	tst	r0, #2
   1178c:	13833002 	orrne	r3, r3, #2
   11790:	e3100004 	tst	r0, #4
   11794:	13833004 	orrne	r3, r3, #4
   11798:	e1a00003 	mov	r0, r3
   1179c:	e8bd8010 	pop	{r4, pc}

000117a0 <CUSBKeyboardDevice::RegisterKeyStatusHandlerRaw(void (*)(unsigned char, unsigned char const*))>:
   117a0:	e92d4070 	push	{r4, r5, r6, lr}
   117a4:	e2515000 	subs	r5, r1, #0
   117a8:	e1a04000 	mov	r4, r0
   117ac:	0a000001 	beq	117b8 <CUSBKeyboardDevice::RegisterKeyStatusHandlerRaw(void (*)(unsigned char, unsigned char const*))+0x18>
   117b0:	e584543c 	str	r5, [r4, #1084]	; 0x43c
   117b4:	e8bd8070 	pop	{r4, r5, r6, pc}
   117b8:	e3a0207d 	mov	r2, #125	; 0x7d
   117bc:	e59f100c 	ldr	r1, [pc, #12]	; 117d0 <CUSBKeyboardDevice::RegisterKeyStatusHandlerRaw(void (*)(unsigned char, unsigned char const*))+0x30>
   117c0:	e59f000c 	ldr	r0, [pc, #12]	; 117d4 <CUSBKeyboardDevice::RegisterKeyStatusHandlerRaw(void (*)(unsigned char, unsigned char const*))+0x34>
   117c4:	eb0024ab 	bl	1aa78 <assertion_failed>
   117c8:	e584543c 	str	r5, [r4, #1084]	; 0x43c
   117cc:	e8bd8070 	pop	{r4, r5, r6, pc}
   117d0:	00025cdc 	.word	0x00025cdc
   117d4:	00025cec 	.word	0x00025cec

000117d8 <CUSBKeyboardDevice::SetLEDs(unsigned char)>:
   117d8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   117dc:	e24dd01c 	sub	sp, sp, #28
   117e0:	e28d4018 	add	r4, sp, #24
   117e4:	e5641004 	strb	r1, [r4, #-4]!
   117e8:	e1a05000 	mov	r5, r0
   117ec:	eb000daf 	bl	14eb0 <CUSBFunction::GetHost() const>
   117f0:	e1a06000 	mov	r6, r0
   117f4:	e1a00005 	mov	r0, r5
   117f8:	eb000d9b 	bl	14e6c <CUSBFunction::GetEndpoint0() const>
   117fc:	e1a07000 	mov	r7, r0
   11800:	e1a00005 	mov	r0, r5
   11804:	eb000e53 	bl	15158 <CUSBFunction::GetInterfaceNumber() const>
   11808:	e3a02001 	mov	r2, #1
   1180c:	e3a03c02 	mov	r3, #512	; 0x200
   11810:	e6ff0070 	uxth	r0, r0
   11814:	e98d0011 	stmib	sp, {r0, r4}
   11818:	e58d200c 	str	r2, [sp, #12]
   1181c:	e58d3000 	str	r3, [sp]
   11820:	e1a01007 	mov	r1, r7
   11824:	e1a00006 	mov	r0, r6
   11828:	e3a03009 	mov	r3, #9
   1182c:	e3a02021 	mov	r2, #33	; 0x21
   11830:	ebfff4ad 	bl	eaec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   11834:	e1e00000 	mvn	r0, r0
   11838:	e1a00fa0 	lsr	r0, r0, #31
   1183c:	e28dd01c 	add	sp, sp, #28
   11840:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00011844 <CUSBKeyboardDevice::Configure()>:
   11844:	e92d4030 	push	{r4, r5, lr}
   11848:	e3a01000 	mov	r1, #0
   1184c:	e24dd00c 	sub	sp, sp, #12
   11850:	e1a04000 	mov	r4, r0
   11854:	eb00012c 	bl	11d0c <CUSBHIDDevice::Configure(unsigned int)>
   11858:	e2505000 	subs	r5, r0, #0
   1185c:	0a000012 	beq	118ac <CUSBKeyboardDevice::Configure()+0x68>
   11860:	e5d41448 	ldrb	r1, [r4, #1096]	; 0x448
   11864:	e1a00004 	mov	r0, r4
   11868:	ebffffda 	bl	117d8 <CUSBKeyboardDevice::SetLEDs(unsigned char)>
   1186c:	e59f2058 	ldr	r2, [pc, #88]	; 118cc <CUSBKeyboardDevice::Configure()+0x88>
   11870:	e5923000 	ldr	r3, [r2]
   11874:	e584344c 	str	r3, [r4, #1100]	; 0x44c
   11878:	e2833001 	add	r3, r3, #1
   1187c:	e5823000 	str	r3, [r2]
   11880:	eb002775 	bl	1b65c <CDeviceNameService::Get()>
   11884:	e3a03000 	mov	r3, #0
   11888:	e594244c 	ldr	r2, [r4, #1100]	; 0x44c
   1188c:	e59f103c 	ldr	r1, [pc, #60]	; 118d0 <CUSBKeyboardDevice::Configure()+0x8c>
   11890:	e58d3000 	str	r3, [sp]
   11894:	e1a03004 	mov	r3, r4
   11898:	eb00277d 	bl	1b694 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   1189c:	e1a00004 	mov	r0, r4
   118a0:	e28dd00c 	add	sp, sp, #12
   118a4:	e8bd4030 	pop	{r4, r5, lr}
   118a8:	ea00023f 	b	121ac <CUSBHIDDevice::StartRequest()>
   118ac:	eb002e64 	bl	1d244 <CLogger::Get()>
   118b0:	e59f301c 	ldr	r3, [pc, #28]	; 118d4 <CUSBKeyboardDevice::Configure()+0x90>
   118b4:	e3a02001 	mov	r2, #1
   118b8:	e59f1018 	ldr	r1, [pc, #24]	; 118d8 <CUSBKeyboardDevice::Configure()+0x94>
   118bc:	eb003009 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   118c0:	e1a00005 	mov	r0, r5
   118c4:	e28dd00c 	add	sp, sp, #12
   118c8:	e8bd8030 	pop	{r4, r5, pc}
   118cc:	0002b6c8 	.word	0x0002b6c8
   118d0:	00025ccc 	.word	0x00025ccc
   118d4:	00025d08 	.word	0x00025d08
   118d8:	00025cd4 	.word	0x00025cd4

000118dc <CUSBKeyboardDevice::UpdateLEDs()>:
   118dc:	e590243c 	ldr	r2, [r0, #1084]	; 0x43c
   118e0:	e3520000 	cmp	r2, #0
   118e4:	112fff1e 	bxne	lr
   118e8:	e92d4010 	push	{r4, lr}
   118ec:	e1a04000 	mov	r4, r0
   118f0:	ebffffa0 	bl	11778 <CUSBKeyboardDevice::GetLEDStatus() const>
   118f4:	e5d43448 	ldrb	r3, [r4, #1096]	; 0x448
   118f8:	e1530000 	cmp	r3, r0
   118fc:	08bd8010 	popeq	{r4, pc}
   11900:	e5c40448 	strb	r0, [r4, #1096]	; 0x448
   11904:	e1a01000 	mov	r1, r0
   11908:	e1a00004 	mov	r0, r4
   1190c:	ebffffb1 	bl	117d8 <CUSBKeyboardDevice::SetLEDs(unsigned char)>
   11910:	e3500000 	cmp	r0, #0
   11914:	18bd8010 	popne	{r4, pc}
   11918:	eb002e49 	bl	1d244 <CLogger::Get()>
   1191c:	e8bd4010 	pop	{r4, lr}
   11920:	e59f3008 	ldr	r3, [pc, #8]	; 11930 <CUSBKeyboardDevice::UpdateLEDs()+0x54>
   11924:	e3a02001 	mov	r2, #1
   11928:	e59f1004 	ldr	r1, [pc, #4]	; 11934 <CUSBKeyboardDevice::UpdateLEDs()+0x58>
   1192c:	ea002fed 	b	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11930:	00025d24 	.word	0x00025d24
   11934:	00025cd4 	.word	0x00025cd4

00011938 <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)>:
   11938:	e0802002 	add	r2, r0, r2
   1193c:	ea000002 	b	1194c <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)+0x14>
   11940:	e4d03001 	ldrb	r3, [r0], #1
   11944:	e1530001 	cmp	r3, r1
   11948:	0a000003 	beq	1195c <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)+0x24>
   1194c:	e1500002 	cmp	r0, r2
   11950:	1afffffa 	bne	11940 <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)+0x8>
   11954:	e3a00000 	mov	r0, #0
   11958:	e12fff1e 	bx	lr
   1195c:	e3a00001 	mov	r0, #1
   11960:	e12fff1e 	bx	lr

00011964 <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)>:
   11964:	e3a03000 	mov	r3, #0
   11968:	e1510003 	cmp	r1, r3
   1196c:	e92d4010 	push	{r4, lr}
   11970:	e1a04000 	mov	r4, r0
   11974:	e880000a 	stm	r0, {r1, r3}
   11978:	0a000001 	beq	11984 <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)+0x20>
   1197c:	e1a00004 	mov	r0, r4
   11980:	e8bd8010 	pop	{r4, pc}
   11984:	e3a0201f 	mov	r2, #31
   11988:	e59f100c 	ldr	r1, [pc, #12]	; 1199c <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)+0x38>
   1198c:	e59f000c 	ldr	r0, [pc, #12]	; 119a0 <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)+0x3c>
   11990:	eb002438 	bl	1aa78 <assertion_failed>
   11994:	e1a00004 	mov	r0, r4
   11998:	e8bd8010 	pop	{r4, pc}
   1199c:	00025d44 	.word	0x00025d44
   119a0:	00024f84 	.word	0x00024f84

000119a4 <CDWHCIRootPort::~CDWHCIRootPort()>:
   119a4:	e92d4010 	push	{r4, lr}
   119a8:	e1a04000 	mov	r4, r0
   119ac:	e5900004 	ldr	r0, [r0, #4]
   119b0:	e3500000 	cmp	r0, #0
   119b4:	0a000002 	beq	119c4 <CDWHCIRootPort::~CDWHCIRootPort()+0x20>
   119b8:	e5903000 	ldr	r3, [r0]
   119bc:	e5933004 	ldr	r3, [r3, #4]
   119c0:	e12fff33 	blx	r3
   119c4:	e1a00004 	mov	r0, r4
   119c8:	e8bd8010 	pop	{r4, pc}

000119cc <CDWHCIRootPort::Initialize()>:
   119cc:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   119d0:	e1a04000 	mov	r4, r0
   119d4:	e5900000 	ldr	r0, [r0]
   119d8:	e24dd00c 	sub	sp, sp, #12
   119dc:	e3500000 	cmp	r0, #0
   119e0:	0a00004d 	beq	11b1c <CDWHCIRootPort::Initialize()+0x150>
   119e4:	ebffe278 	bl	a3cc <CDWHCIDevice::GetPortSpeed()>
   119e8:	e3500003 	cmp	r0, #3
   119ec:	e1a05000 	mov	r5, r0
   119f0:	0a000042 	beq	11b00 <CDWHCIRootPort::Initialize()+0x134>
   119f4:	e5943004 	ldr	r3, [r4, #4]
   119f8:	e3530000 	cmp	r3, #0
   119fc:	0a000003 	beq	11a10 <CDWHCIRootPort::Initialize()+0x44>
   11a00:	e3a02036 	mov	r2, #54	; 0x36
   11a04:	e59f1128 	ldr	r1, [pc, #296]	; 11b34 <CDWHCIRootPort::Initialize()+0x168>
   11a08:	e59f0128 	ldr	r0, [pc, #296]	; 11b38 <CDWHCIRootPort::Initialize()+0x16c>
   11a0c:	eb002419 	bl	1aa78 <assertion_failed>
   11a10:	e3a00048 	mov	r0, #72	; 0x48
   11a14:	eb0044dc 	bl	22d8c <operator new(unsigned int)>
   11a18:	e3a07001 	mov	r7, #1
   11a1c:	e3a03000 	mov	r3, #0
   11a20:	e1a06000 	mov	r6, r0
   11a24:	e5941000 	ldr	r1, [r4]
   11a28:	e1a02005 	mov	r2, r5
   11a2c:	e88d0088 	stm	sp, {r3, r7}
   11a30:	ebffef6e 	bl	d7f0 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, bool, unsigned char, unsigned char)>
   11a34:	e5846004 	str	r6, [r4, #4]
   11a38:	e1a00006 	mov	r0, r6
   11a3c:	ebfff0ed 	bl	ddf8 <CUSBDevice::Initialize()>
   11a40:	e3500000 	cmp	r0, #0
   11a44:	e5940004 	ldr	r0, [r4, #4]
   11a48:	1a00000a 	bne	11a78 <CDWHCIRootPort::Initialize()+0xac>
   11a4c:	e3500000 	cmp	r0, #0
   11a50:	0a000002 	beq	11a60 <CDWHCIRootPort::Initialize()+0x94>
   11a54:	e5903000 	ldr	r3, [r0]
   11a58:	e5933004 	ldr	r3, [r3, #4]
   11a5c:	e12fff33 	blx	r3
   11a60:	e3a00000 	mov	r0, #0
   11a64:	e1a05000 	mov	r5, r0
   11a68:	e5840004 	str	r0, [r4, #4]
   11a6c:	e1a00005 	mov	r0, r5
   11a70:	e28dd00c 	add	sp, sp, #12
   11a74:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   11a78:	e5903000 	ldr	r3, [r0]
   11a7c:	e593300c 	ldr	r3, [r3, #12]
   11a80:	e12fff33 	blx	r3
   11a84:	e2505000 	subs	r5, r0, #0
   11a88:	0a000013 	beq	11adc <CDWHCIRootPort::Initialize()+0x110>
   11a8c:	eb002dec 	bl	1d244 <CLogger::Get()>
   11a90:	e59f30a4 	ldr	r3, [pc, #164]	; 11b3c <CDWHCIRootPort::Initialize()+0x170>
   11a94:	e3a02004 	mov	r2, #4
   11a98:	e59f10a0 	ldr	r1, [pc, #160]	; 11b40 <CDWHCIRootPort::Initialize()+0x174>
   11a9c:	eb002f91 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11aa0:	e5940000 	ldr	r0, [r4]
   11aa4:	ebffe25d 	bl	a420 <CDWHCIDevice::OvercurrentDetected()>
   11aa8:	e3500000 	cmp	r0, #0
   11aac:	0affffee 	beq	11a6c <CDWHCIRootPort::Initialize()+0xa0>
   11ab0:	eb002de3 	bl	1d244 <CLogger::Get()>
   11ab4:	e1a02007 	mov	r2, r7
   11ab8:	e59f3084 	ldr	r3, [pc, #132]	; 11b44 <CDWHCIRootPort::Initialize()+0x178>
   11abc:	e59f107c 	ldr	r1, [pc, #124]	; 11b40 <CDWHCIRootPort::Initialize()+0x174>
   11ac0:	eb002f88 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11ac4:	e5940000 	ldr	r0, [r4]
   11ac8:	ebffe263 	bl	a45c <CDWHCIDevice::DisableRootPort()>
   11acc:	e5940004 	ldr	r0, [r4, #4]
   11ad0:	e3500000 	cmp	r0, #0
   11ad4:	1affffde 	bne	11a54 <CDWHCIRootPort::Initialize()+0x88>
   11ad8:	eaffffe0 	b	11a60 <CDWHCIRootPort::Initialize()+0x94>
   11adc:	eb002dd8 	bl	1d244 <CLogger::Get()>
   11ae0:	e59f3060 	ldr	r3, [pc, #96]	; 11b48 <CDWHCIRootPort::Initialize()+0x17c>
   11ae4:	e3a02002 	mov	r2, #2
   11ae8:	e59f1050 	ldr	r1, [pc, #80]	; 11b40 <CDWHCIRootPort::Initialize()+0x174>
   11aec:	eb002f7d 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11af0:	e5940004 	ldr	r0, [r4, #4]
   11af4:	e3500000 	cmp	r0, #0
   11af8:	1affffd5 	bne	11a54 <CDWHCIRootPort::Initialize()+0x88>
   11afc:	eaffffd7 	b	11a60 <CDWHCIRootPort::Initialize()+0x94>
   11b00:	eb002dcf 	bl	1d244 <CLogger::Get()>
   11b04:	e59f3040 	ldr	r3, [pc, #64]	; 11b4c <CDWHCIRootPort::Initialize()+0x180>
   11b08:	e3a02001 	mov	r2, #1
   11b0c:	e59f102c 	ldr	r1, [pc, #44]	; 11b40 <CDWHCIRootPort::Initialize()+0x174>
   11b10:	eb002f74 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11b14:	e3a05000 	mov	r5, #0
   11b18:	eaffffd3 	b	11a6c <CDWHCIRootPort::Initialize()+0xa0>
   11b1c:	e59f002c 	ldr	r0, [pc, #44]	; 11b50 <CDWHCIRootPort::Initialize()+0x184>
   11b20:	e3a0202c 	mov	r2, #44	; 0x2c
   11b24:	e59f1008 	ldr	r1, [pc, #8]	; 11b34 <CDWHCIRootPort::Initialize()+0x168>
   11b28:	eb0023d2 	bl	1aa78 <assertion_failed>
   11b2c:	e5940000 	ldr	r0, [r4]
   11b30:	eaffffab 	b	119e4 <CDWHCIRootPort::Initialize()+0x18>
   11b34:	00025d44 	.word	0x00025d44
   11b38:	00025d74 	.word	0x00025d74
   11b3c:	00025d9c 	.word	0x00025d9c
   11b40:	00025d3c 	.word	0x00025d3c
   11b44:	00025db0 	.word	0x00025db0
   11b48:	00025d84 	.word	0x00025d84
   11b4c:	00025d58 	.word	0x00025d58
   11b50:	00024f84 	.word	0x00024f84

00011b54 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)>:
   11b54:	e92d4070 	push	{r4, r5, r6, lr}
   11b58:	e2505000 	subs	r5, r0, #0
   11b5c:	e1a04001 	mov	r4, r1
   11b60:	0a000012 	beq	11bb0 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x5c>
   11b64:	ebfff499 	bl	edd0 <CUSBRequest::GetStatus() const>
   11b68:	e3500000 	cmp	r0, #0
   11b6c:	0a000009 	beq	11b98 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x44>
   11b70:	e1a00005 	mov	r0, r5
   11b74:	ebfff480 	bl	ed7c <CUSBRequest::~CUSBRequest()>
   11b78:	e1a00005 	mov	r0, r5
   11b7c:	e3a01028 	mov	r1, #40	; 0x28
   11b80:	ebfff507 	bl	efa4 <CUSBRequest::operator delete(void*, unsigned int)>
   11b84:	e3540000 	cmp	r4, #0
   11b88:	0a000016 	beq	11be8 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x94>
   11b8c:	e1a00004 	mov	r0, r4
   11b90:	e8bd4070 	pop	{r4, r5, r6, lr}
   11b94:	ea00447f 	b	22d98 <operator delete[](void*)>
   11b98:	eb002da9 	bl	1d244 <CLogger::Get()>
   11b9c:	e59f3058 	ldr	r3, [pc, #88]	; 11bfc <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0xa8>
   11ba0:	e3a02002 	mov	r2, #2
   11ba4:	e59f1054 	ldr	r1, [pc, #84]	; 11c00 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0xac>
   11ba8:	eb002f4e 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11bac:	eaffffef 	b	11b70 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x1c>
   11bb0:	e3a020af 	mov	r2, #175	; 0xaf
   11bb4:	e59f1048 	ldr	r1, [pc, #72]	; 11c04 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0xb0>
   11bb8:	e59f0048 	ldr	r0, [pc, #72]	; 11c08 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0xb4>
   11bbc:	eb0023ad 	bl	1aa78 <assertion_failed>
   11bc0:	e1a00005 	mov	r0, r5
   11bc4:	ebfff481 	bl	edd0 <CUSBRequest::GetStatus() const>
   11bc8:	e3500000 	cmp	r0, #0
   11bcc:	1affffec 	bne	11b84 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x30>
   11bd0:	eb002d9b 	bl	1d244 <CLogger::Get()>
   11bd4:	e59f3020 	ldr	r3, [pc, #32]	; 11bfc <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0xa8>
   11bd8:	e3a02002 	mov	r2, #2
   11bdc:	e59f101c 	ldr	r1, [pc, #28]	; 11c00 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0xac>
   11be0:	eb002f40 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11be4:	eaffffe6 	b	11b84 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x30>
   11be8:	e3a020b8 	mov	r2, #184	; 0xb8
   11bec:	e8bd4070 	pop	{r4, r5, r6, lr}
   11bf0:	e59f100c 	ldr	r1, [pc, #12]	; 11c04 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0xb0>
   11bf4:	e59f0010 	ldr	r0, [pc, #16]	; 11c0c <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0xb8>
   11bf8:	ea00239e 	b	1aa78 <assertion_failed>
   11bfc:	00025e20 	.word	0x00025e20
   11c00:	00025dc8 	.word	0x00025dc8
   11c04:	00025df8 	.word	0x00025df8
   11c08:	00024850 	.word	0x00024850
   11c0c:	00025e0c 	.word	0x00025e0c

00011c10 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>:
   11c10:	e92d4070 	push	{r4, r5, r6, lr}
   11c14:	e1a04000 	mov	r4, r0
   11c18:	e1a05002 	mov	r5, r2
   11c1c:	eb000c16 	bl	14c7c <CUSBFunction::CUSBFunction(CUSBFunction*)>
   11c20:	e3a03000 	mov	r3, #0
   11c24:	e59f2030 	ldr	r2, [pc, #48]	; 11c5c <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)+0x4c>
   11c28:	e1550003 	cmp	r5, r3
   11c2c:	e5845010 	str	r5, [r4, #16]
   11c30:	e5842000 	str	r2, [r4]
   11c34:	e5843014 	str	r3, [r4, #20]
   11c38:	e5843018 	str	r3, [r4, #24]
   11c3c:	e584301c 	str	r3, [r4, #28]
   11c40:	e5843020 	str	r3, [r4, #32]
   11c44:	0a000002 	beq	11c54 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)+0x44>
   11c48:	e1a00005 	mov	r0, r5
   11c4c:	eb00444f 	bl	22d90 <operator new[](unsigned int)>
   11c50:	e5840020 	str	r0, [r4, #32]
   11c54:	e1a00004 	mov	r0, r4
   11c58:	e8bd8070 	pop	{r4, r5, r6, pc}
   11c5c:	00025dd8 	.word	0x00025dd8

00011c60 <CUSBHIDDevice::~CUSBHIDDevice()>:
   11c60:	e92d4070 	push	{r4, r5, r6, lr}
   11c64:	e1a04000 	mov	r4, r0
   11c68:	e5900020 	ldr	r0, [r0, #32]
   11c6c:	e59f3074 	ldr	r3, [pc, #116]	; 11ce8 <CUSBHIDDevice::~CUSBHIDDevice()+0x88>
   11c70:	e3500000 	cmp	r0, #0
   11c74:	e5843000 	str	r3, [r4]
   11c78:	0a000000 	beq	11c80 <CUSBHIDDevice::~CUSBHIDDevice()+0x20>
   11c7c:	eb004445 	bl	22d98 <operator delete[](void*)>
   11c80:	e3a03000 	mov	r3, #0
   11c84:	e5945018 	ldr	r5, [r4, #24]
   11c88:	e5843020 	str	r3, [r4, #32]
   11c8c:	e1550003 	cmp	r5, r3
   11c90:	0a000004 	beq	11ca8 <CUSBHIDDevice::~CUSBHIDDevice()+0x48>
   11c94:	e1a00005 	mov	r0, r5
   11c98:	ebfff30f 	bl	e8dc <CUSBEndpoint::~CUSBEndpoint()>
   11c9c:	e1a00005 	mov	r0, r5
   11ca0:	e3a01014 	mov	r1, #20
   11ca4:	eb00443c 	bl	22d9c <operator delete(void*, unsigned int)>
   11ca8:	e3a03000 	mov	r3, #0
   11cac:	e5945014 	ldr	r5, [r4, #20]
   11cb0:	e5843018 	str	r3, [r4, #24]
   11cb4:	e1550003 	cmp	r5, r3
   11cb8:	0a000004 	beq	11cd0 <CUSBHIDDevice::~CUSBHIDDevice()+0x70>
   11cbc:	e1a00005 	mov	r0, r5
   11cc0:	ebfff305 	bl	e8dc <CUSBEndpoint::~CUSBEndpoint()>
   11cc4:	e1a00005 	mov	r0, r5
   11cc8:	e3a01014 	mov	r1, #20
   11ccc:	eb004432 	bl	22d9c <operator delete(void*, unsigned int)>
   11cd0:	e3a03000 	mov	r3, #0
   11cd4:	e1a00004 	mov	r0, r4
   11cd8:	e5843014 	str	r3, [r4, #20]
   11cdc:	eb000b98 	bl	14b44 <CUSBFunction::~CUSBFunction()>
   11ce0:	e1a00004 	mov	r0, r4
   11ce4:	e8bd8070 	pop	{r4, r5, r6, pc}
   11ce8:	00025dd8 	.word	0x00025dd8

00011cec <CUSBHIDDevice::~CUSBHIDDevice()>:
   11cec:	e92d4010 	push	{r4, lr}
   11cf0:	e1a04000 	mov	r4, r0
   11cf4:	ebffffd9 	bl	11c60 <CUSBHIDDevice::~CUSBHIDDevice()>
   11cf8:	e1a00004 	mov	r0, r4
   11cfc:	e3a01024 	mov	r1, #36	; 0x24
   11d00:	eb004425 	bl	22d9c <operator delete(void*, unsigned int)>
   11d04:	e1a00004 	mov	r0, r4
   11d08:	e8bd8010 	pop	{r4, pc}

00011d0c <CUSBHIDDevice::Configure(unsigned int)>:
   11d0c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11d10:	e24dd010 	sub	sp, sp, #16
   11d14:	e1a07001 	mov	r7, r1
   11d18:	e1a05000 	mov	r5, r0
   11d1c:	eb000c32 	bl	14dec <CUSBFunction::GetNumEndpoints() const>
   11d20:	e2506000 	subs	r6, r0, #0
   11d24:	13a06005 	movne	r6, #5
   11d28:	13a08014 	movne	r8, #20
   11d2c:	1a000004 	bne	11d44 <CUSBHIDDevice::Configure(unsigned int)+0x38>
   11d30:	ea00005d 	b	11eac <CUSBHIDDevice::Configure(unsigned int)+0x1a0>
   11d34:	e5d43003 	ldrb	r3, [r4, #3]
   11d38:	e203303f 	and	r3, r3, #63	; 0x3f
   11d3c:	e3530003 	cmp	r3, #3
   11d40:	0a00001a 	beq	11db0 <CUSBHIDDevice::Configure(unsigned int)+0xa4>
   11d44:	e1a01006 	mov	r1, r6
   11d48:	e1a00005 	mov	r0, r5
   11d4c:	eb000c99 	bl	14fb8 <CUSBFunction::GetDescriptor(unsigned char)>
   11d50:	e2504000 	subs	r4, r0, #0
   11d54:	1afffff6 	bne	11d34 <CUSBHIDDevice::Configure(unsigned int)+0x28>
   11d58:	e5956014 	ldr	r6, [r5, #20]
   11d5c:	e1a00005 	mov	r0, r5
   11d60:	e3560000 	cmp	r6, #0
   11d64:	0a00004d 	beq	11ea0 <CUSBHIDDevice::Configure(unsigned int)+0x194>
   11d68:	eb000c61 	bl	14ef4 <CUSBFunction::Configure()>
   11d6c:	e2506000 	subs	r6, r0, #0
   11d70:	0a00001f 	beq	11df4 <CUSBHIDDevice::Configure(unsigned int)+0xe8>
   11d74:	e1a00005 	mov	r0, r5
   11d78:	eb000d06 	bl	15198 <CUSBFunction::GetInterfaceClass() const>
   11d7c:	e3500003 	cmp	r0, #3
   11d80:	0a00004d 	beq	11ebc <CUSBHIDDevice::Configure(unsigned int)+0x1b0>
   11d84:	e5953010 	ldr	r3, [r5, #16]
   11d88:	e3530000 	cmp	r3, #0
   11d8c:	0a000020 	beq	11e14 <CUSBHIDDevice::Configure(unsigned int)+0x108>
   11d90:	e5953020 	ldr	r3, [r5, #32]
   11d94:	e3530000 	cmp	r3, #0
   11d98:	1a00001a 	bne	11e08 <CUSBHIDDevice::Configure(unsigned int)+0xfc>
   11d9c:	e3a02082 	mov	r2, #130	; 0x82
   11da0:	e59f11a4 	ldr	r1, [pc, #420]	; 11f4c <CUSBHIDDevice::Configure(unsigned int)+0x240>
   11da4:	e59f01a4 	ldr	r0, [pc, #420]	; 11f50 <CUSBHIDDevice::Configure(unsigned int)+0x244>
   11da8:	eb002332 	bl	1aa78 <assertion_failed>
   11dac:	ea000015 	b	11e08 <CUSBHIDDevice::Configure(unsigned int)+0xfc>
   11db0:	e1d430d2 	ldrsb	r3, [r4, #2]
   11db4:	e3530000 	cmp	r3, #0
   11db8:	ba000025 	blt	11e54 <CUSBHIDDevice::Configure(unsigned int)+0x148>
   11dbc:	e5953018 	ldr	r3, [r5, #24]
   11dc0:	e1a00005 	mov	r0, r5
   11dc4:	e3530000 	cmp	r3, #0
   11dc8:	1a00005b 	bne	11f3c <CUSBHIDDevice::Configure(unsigned int)+0x230>
   11dcc:	eb000c16 	bl	14e2c <CUSBFunction::GetDevice() const>
   11dd0:	e1a0a000 	mov	sl, r0
   11dd4:	e1a00008 	mov	r0, r8
   11dd8:	eb0043eb 	bl	22d8c <operator new(unsigned int)>
   11ddc:	e1a09000 	mov	r9, r0
   11de0:	e1a02004 	mov	r2, r4
   11de4:	e1a0100a 	mov	r1, sl
   11de8:	ebfff229 	bl	e694 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   11dec:	e5859018 	str	r9, [r5, #24]
   11df0:	eaffffd3 	b	11d44 <CUSBHIDDevice::Configure(unsigned int)+0x38>
   11df4:	eb002d12 	bl	1d244 <CLogger::Get()>
   11df8:	e59f3154 	ldr	r3, [pc, #340]	; 11f54 <CUSBHIDDevice::Configure(unsigned int)+0x248>
   11dfc:	e3a02001 	mov	r2, #1
   11e00:	e59f1150 	ldr	r1, [pc, #336]	; 11f58 <CUSBHIDDevice::Configure(unsigned int)+0x24c>
   11e04:	eb002eb7 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11e08:	e1a00006 	mov	r0, r6
   11e0c:	e28dd010 	add	sp, sp, #16
   11e10:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11e14:	e3570000 	cmp	r7, #0
   11e18:	e5857010 	str	r7, [r5, #16]
   11e1c:	0a00001a 	beq	11e8c <CUSBHIDDevice::Configure(unsigned int)+0x180>
   11e20:	e5953020 	ldr	r3, [r5, #32]
   11e24:	e3530000 	cmp	r3, #0
   11e28:	0a000003 	beq	11e3c <CUSBHIDDevice::Configure(unsigned int)+0x130>
   11e2c:	e3a0207f 	mov	r2, #127	; 0x7f
   11e30:	e59f1114 	ldr	r1, [pc, #276]	; 11f4c <CUSBHIDDevice::Configure(unsigned int)+0x240>
   11e34:	e59f0120 	ldr	r0, [pc, #288]	; 11f5c <CUSBHIDDevice::Configure(unsigned int)+0x250>
   11e38:	eb00230e 	bl	1aa78 <assertion_failed>
   11e3c:	e5950010 	ldr	r0, [r5, #16]
   11e40:	eb0043d2 	bl	22d90 <operator new[](unsigned int)>
   11e44:	e5850020 	str	r0, [r5, #32]
   11e48:	e1a00006 	mov	r0, r6
   11e4c:	e28dd010 	add	sp, sp, #16
   11e50:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11e54:	e5953014 	ldr	r3, [r5, #20]
   11e58:	e1a00005 	mov	r0, r5
   11e5c:	e3530000 	cmp	r3, #0
   11e60:	1a000035 	bne	11f3c <CUSBHIDDevice::Configure(unsigned int)+0x230>
   11e64:	eb000bf0 	bl	14e2c <CUSBFunction::GetDevice() const>
   11e68:	e1a0a000 	mov	sl, r0
   11e6c:	e1a00008 	mov	r0, r8
   11e70:	eb0043c5 	bl	22d8c <operator new(unsigned int)>
   11e74:	e1a09000 	mov	r9, r0
   11e78:	e1a02004 	mov	r2, r4
   11e7c:	e1a0100a 	mov	r1, sl
   11e80:	ebfff203 	bl	e694 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   11e84:	e5859014 	str	r9, [r5, #20]
   11e88:	eaffffad 	b	11d44 <CUSBHIDDevice::Configure(unsigned int)+0x38>
   11e8c:	e3a0207d 	mov	r2, #125	; 0x7d
   11e90:	e59f10b4 	ldr	r1, [pc, #180]	; 11f4c <CUSBHIDDevice::Configure(unsigned int)+0x240>
   11e94:	e59f00c4 	ldr	r0, [pc, #196]	; 11f60 <CUSBHIDDevice::Configure(unsigned int)+0x254>
   11e98:	eb0022f6 	bl	1aa78 <assertion_failed>
   11e9c:	eaffffdf 	b	11e20 <CUSBHIDDevice::Configure(unsigned int)+0x114>
   11ea0:	e59f10b0 	ldr	r1, [pc, #176]	; 11f58 <CUSBHIDDevice::Configure(unsigned int)+0x24c>
   11ea4:	eb000c56 	bl	15004 <CUSBFunction::ConfigurationError(char const*) const>
   11ea8:	eaffffd6 	b	11e08 <CUSBHIDDevice::Configure(unsigned int)+0xfc>
   11eac:	e1a00005 	mov	r0, r5
   11eb0:	e59f10a0 	ldr	r1, [pc, #160]	; 11f58 <CUSBHIDDevice::Configure(unsigned int)+0x24c>
   11eb4:	eb000c52 	bl	15004 <CUSBFunction::ConfigurationError(char const*) const>
   11eb8:	eaffffd2 	b	11e08 <CUSBHIDDevice::Configure(unsigned int)+0xfc>
   11ebc:	e1a00005 	mov	r0, r5
   11ec0:	eb000cc4 	bl	151d8 <CUSBFunction::GetInterfaceSubClass() const>
   11ec4:	e3500001 	cmp	r0, #1
   11ec8:	e1a0a000 	mov	sl, r0
   11ecc:	1affffac 	bne	11d84 <CUSBHIDDevice::Configure(unsigned int)+0x78>
   11ed0:	e1a00005 	mov	r0, r5
   11ed4:	eb000bf5 	bl	14eb0 <CUSBFunction::GetHost() const>
   11ed8:	e1a08000 	mov	r8, r0
   11edc:	e1a00005 	mov	r0, r5
   11ee0:	eb000be1 	bl	14e6c <CUSBFunction::GetEndpoint0() const>
   11ee4:	e1a09000 	mov	r9, r0
   11ee8:	e1a00005 	mov	r0, r5
   11eec:	eb000c99 	bl	15158 <CUSBFunction::GetInterfaceNumber() const>
   11ef0:	e6ff0070 	uxth	r0, r0
   11ef4:	e58d0004 	str	r0, [sp, #4]
   11ef8:	e1a01009 	mov	r1, r9
   11efc:	e1a00008 	mov	r0, r8
   11f00:	e58d400c 	str	r4, [sp, #12]
   11f04:	e58d4008 	str	r4, [sp, #8]
   11f08:	e58d4000 	str	r4, [sp]
   11f0c:	e3a0300b 	mov	r3, #11
   11f10:	e3a02021 	mov	r2, #33	; 0x21
   11f14:	ebfff2f4 	bl	eaec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   11f18:	e3500000 	cmp	r0, #0
   11f1c:	aaffff98 	bge	11d84 <CUSBHIDDevice::Configure(unsigned int)+0x78>
   11f20:	eb002cc7 	bl	1d244 <CLogger::Get()>
   11f24:	e1a0200a 	mov	r2, sl
   11f28:	e59f3034 	ldr	r3, [pc, #52]	; 11f64 <CUSBHIDDevice::Configure(unsigned int)+0x258>
   11f2c:	e59f1024 	ldr	r1, [pc, #36]	; 11f58 <CUSBHIDDevice::Configure(unsigned int)+0x24c>
   11f30:	e1a06004 	mov	r6, r4
   11f34:	eb002e6b 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11f38:	eaffffb2 	b	11e08 <CUSBHIDDevice::Configure(unsigned int)+0xfc>
   11f3c:	e59f1014 	ldr	r1, [pc, #20]	; 11f58 <CUSBHIDDevice::Configure(unsigned int)+0x24c>
   11f40:	eb000c2f 	bl	15004 <CUSBFunction::ConfigurationError(char const*) const>
   11f44:	e3a06000 	mov	r6, #0
   11f48:	eaffffae 	b	11e08 <CUSBHIDDevice::Configure(unsigned int)+0xfc>
   11f4c:	00025df8 	.word	0x00025df8
   11f50:	00025e88 	.word	0x00025e88
   11f54:	00025834 	.word	0x00025834
   11f58:	00025dc8 	.word	0x00025dc8
   11f5c:	00025e70 	.word	0x00025e70
   11f60:	00025e58 	.word	0x00025e58
   11f64:	00025e3c 	.word	0x00025e3c

00011f68 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>:
   11f68:	e590c018 	ldr	ip, [r0, #24]
   11f6c:	e35c0000 	cmp	ip, #0
   11f70:	0a000019 	beq	11fdc <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x74>
   11f74:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   11f78:	e3510000 	cmp	r1, #0
   11f7c:	e24dd00c 	sub	sp, sp, #12
   11f80:	e1a07003 	mov	r7, r3
   11f84:	e1a06002 	mov	r6, r2
   11f88:	e1a05001 	mov	r5, r1
   11f8c:	e1a04000 	mov	r4, r0
   11f90:	0a000013 	beq	11fe4 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x7c>
   11f94:	e3560000 	cmp	r6, #0
   11f98:	0a00000a 	beq	11fc8 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x60>
   11f9c:	e1a00004 	mov	r0, r4
   11fa0:	eb000bc2 	bl	14eb0 <CUSBFunction::GetHost() const>
   11fa4:	e5941018 	ldr	r1, [r4, #24]
   11fa8:	e1a03006 	mov	r3, r6
   11fac:	e58d7000 	str	r7, [sp]
   11fb0:	e1a02005 	mov	r2, r5
   11fb4:	ebfff332 	bl	ec84 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   11fb8:	e1e00000 	mvn	r0, r0
   11fbc:	e1a00fa0 	lsr	r0, r0, #31
   11fc0:	e28dd00c 	add	sp, sp, #12
   11fc4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   11fc8:	e3a0208f 	mov	r2, #143	; 0x8f
   11fcc:	e59f1024 	ldr	r1, [pc, #36]	; 11ff8 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x90>
   11fd0:	e59f0024 	ldr	r0, [pc, #36]	; 11ffc <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x94>
   11fd4:	eb0022a7 	bl	1aa78 <assertion_failed>
   11fd8:	eaffffef 	b	11f9c <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x34>
   11fdc:	e1a0000c 	mov	r0, ip
   11fe0:	e12fff1e 	bx	lr
   11fe4:	e3a0208e 	mov	r2, #142	; 0x8e
   11fe8:	e59f1008 	ldr	r1, [pc, #8]	; 11ff8 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x90>
   11fec:	e59f000c 	ldr	r0, [pc, #12]	; 12000 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x98>
   11ff0:	eb0022a0 	bl	1aa78 <assertion_failed>
   11ff4:	eaffffe6 	b	11f94 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x2c>
   11ff8:	00025df8 	.word	0x00025df8
   11ffc:	00025ea0 	.word	0x00025ea0
   12000:	00025930 	.word	0x00025930

00012004 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)>:
   12004:	e590c018 	ldr	ip, [r0, #24]
   12008:	e35c0000 	cmp	ip, #0
   1200c:	0a00002b 	beq	120c0 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xbc>
   12010:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   12014:	e3510000 	cmp	r1, #0
   12018:	e24dd008 	sub	sp, sp, #8
   1201c:	e1a07003 	mov	r7, r3
   12020:	e1a05002 	mov	r5, r2
   12024:	e1a06001 	mov	r6, r1
   12028:	e1a04000 	mov	r4, r0
   1202c:	0a000025 	beq	120c8 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xc4>
   12030:	e3550000 	cmp	r5, #0
   12034:	0a00001c 	beq	120ac <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xa8>
   12038:	e1a00005 	mov	r0, r5
   1203c:	eb004353 	bl	22d90 <operator new[](unsigned int)>
   12040:	e1a02005 	mov	r2, r5
   12044:	e1a01006 	mov	r1, r6
   12048:	e1a08000 	mov	r8, r0
   1204c:	eb004052 	bl	2219c <memcpy>
   12050:	e3a00028 	mov	r0, #40	; 0x28
   12054:	ebfff3ba 	bl	ef44 <CUSBRequest::operator new(unsigned int)>
   12058:	e3a0c000 	mov	ip, #0
   1205c:	e1a06000 	mov	r6, r0
   12060:	e5941018 	ldr	r1, [r4, #24]
   12064:	e1a03005 	mov	r3, r5
   12068:	e58dc000 	str	ip, [sp]
   1206c:	e1a02008 	mov	r2, r8
   12070:	ebfff31c 	bl	ece8 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   12074:	e1a03004 	mov	r3, r4
   12078:	e1a02008 	mov	r2, r8
   1207c:	e1a00006 	mov	r0, r6
   12080:	e59f1054 	ldr	r1, [pc, #84]	; 120dc <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xd8>
   12084:	ebfff38c 	bl	eebc <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   12088:	e1a00004 	mov	r0, r4
   1208c:	eb000b87 	bl	14eb0 <CUSBFunction::GetHost() const>
   12090:	e1a01006 	mov	r1, r6
   12094:	e1a02007 	mov	r2, r7
   12098:	e5903000 	ldr	r3, [r0]
   1209c:	e593300c 	ldr	r3, [r3, #12]
   120a0:	e28dd008 	add	sp, sp, #8
   120a4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   120a8:	e12fff13 	bx	r3
   120ac:	e3a020a1 	mov	r2, #161	; 0xa1
   120b0:	e59f1028 	ldr	r1, [pc, #40]	; 120e0 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xdc>
   120b4:	e59f0028 	ldr	r0, [pc, #40]	; 120e4 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xe0>
   120b8:	eb00226e 	bl	1aa78 <assertion_failed>
   120bc:	eaffffdd 	b	12038 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0x34>
   120c0:	e1a0000c 	mov	r0, ip
   120c4:	e12fff1e 	bx	lr
   120c8:	e3a020a0 	mov	r2, #160	; 0xa0
   120cc:	e59f100c 	ldr	r1, [pc, #12]	; 120e0 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xdc>
   120d0:	e59f0010 	ldr	r0, [pc, #16]	; 120e8 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xe4>
   120d4:	eb002267 	bl	1aa78 <assertion_failed>
   120d8:	eaffffd4 	b	12030 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0x2c>
   120dc:	00011b54 	.word	0x00011b54
   120e0:	00025df8 	.word	0x00025df8
   120e4:	00025ea0 	.word	0x00025ea0
   120e8:	00025930 	.word	0x00025930

000120ec <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>:
   120ec:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   120f0:	e1a04000 	mov	r4, r0
   120f4:	e590001c 	ldr	r0, [r0, #28]
   120f8:	e24dd00c 	sub	sp, sp, #12
   120fc:	e3500000 	cmp	r0, #0
   12100:	e1a05001 	mov	r5, r1
   12104:	e1a06002 	mov	r6, r2
   12108:	e1a07003 	mov	r7, r3
   1210c:	0a000003 	beq	12120 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x34>
   12110:	e3a020be 	mov	r2, #190	; 0xbe
   12114:	e59f107c 	ldr	r1, [pc, #124]	; 12198 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xac>
   12118:	e59f007c 	ldr	r0, [pc, #124]	; 1219c <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xb0>
   1211c:	eb002255 	bl	1aa78 <assertion_failed>
   12120:	e5943014 	ldr	r3, [r4, #20]
   12124:	e3530000 	cmp	r3, #0
   12128:	0a000015 	beq	12184 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x98>
   1212c:	e3550000 	cmp	r5, #0
   12130:	0a00000e 	beq	12170 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x84>
   12134:	e3560000 	cmp	r6, #0
   12138:	1a000003 	bne	1214c <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x60>
   1213c:	e3a020c2 	mov	r2, #194	; 0xc2
   12140:	e59f1050 	ldr	r1, [pc, #80]	; 12198 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xac>
   12144:	e59f0054 	ldr	r0, [pc, #84]	; 121a0 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xb4>
   12148:	eb00224a 	bl	1aa78 <assertion_failed>
   1214c:	e1a00004 	mov	r0, r4
   12150:	eb000b56 	bl	14eb0 <CUSBFunction::GetHost() const>
   12154:	e5941014 	ldr	r1, [r4, #20]
   12158:	e1a03006 	mov	r3, r6
   1215c:	e58d7000 	str	r7, [sp]
   12160:	e1a02005 	mov	r2, r5
   12164:	ebfff2c6 	bl	ec84 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   12168:	e28dd00c 	add	sp, sp, #12
   1216c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   12170:	e3a020c1 	mov	r2, #193	; 0xc1
   12174:	e59f101c 	ldr	r1, [pc, #28]	; 12198 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xac>
   12178:	e59f0024 	ldr	r0, [pc, #36]	; 121a4 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xb8>
   1217c:	eb00223d 	bl	1aa78 <assertion_failed>
   12180:	eaffffeb 	b	12134 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x48>
   12184:	e3a020c0 	mov	r2, #192	; 0xc0
   12188:	e59f1008 	ldr	r1, [pc, #8]	; 12198 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xac>
   1218c:	e59f0014 	ldr	r0, [pc, #20]	; 121a8 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xbc>
   12190:	eb002238 	bl	1aa78 <assertion_failed>
   12194:	eaffffe4 	b	1212c <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x40>
   12198:	00025df8 	.word	0x00025df8
   1219c:	00025eb0 	.word	0x00025eb0
   121a0:	00025ea0 	.word	0x00025ea0
   121a4:	00025930 	.word	0x00025930
   121a8:	00025ebc 	.word	0x00025ebc

000121ac <CUSBHIDDevice::StartRequest()>:
   121ac:	e92d4070 	push	{r4, r5, r6, lr}
   121b0:	e5903014 	ldr	r3, [r0, #20]
   121b4:	e24dd008 	sub	sp, sp, #8
   121b8:	e3530000 	cmp	r3, #0
   121bc:	e1a04000 	mov	r4, r0
   121c0:	0a000038 	beq	122a8 <CUSBHIDDevice::StartRequest()+0xfc>
   121c4:	e5943020 	ldr	r3, [r4, #32]
   121c8:	e3530000 	cmp	r3, #0
   121cc:	0a000030 	beq	12294 <CUSBHIDDevice::StartRequest()+0xe8>
   121d0:	e594301c 	ldr	r3, [r4, #28]
   121d4:	e3530000 	cmp	r3, #0
   121d8:	0a000003 	beq	121ec <CUSBHIDDevice::StartRequest()+0x40>
   121dc:	e3a020cb 	mov	r2, #203	; 0xcb
   121e0:	e59f10d4 	ldr	r1, [pc, #212]	; 122bc <CUSBHIDDevice::StartRequest()+0x110>
   121e4:	e59f00d4 	ldr	r0, [pc, #212]	; 122c0 <CUSBHIDDevice::StartRequest()+0x114>
   121e8:	eb002222 	bl	1aa78 <assertion_failed>
   121ec:	e5945010 	ldr	r5, [r4, #16]
   121f0:	e3550000 	cmp	r5, #0
   121f4:	0a000017 	beq	12258 <CUSBHIDDevice::StartRequest()+0xac>
   121f8:	e3a00028 	mov	r0, #40	; 0x28
   121fc:	ebfff350 	bl	ef44 <CUSBRequest::operator new(unsigned int)>
   12200:	e3a0c000 	mov	ip, #0
   12204:	e1a05000 	mov	r5, r0
   12208:	e5943010 	ldr	r3, [r4, #16]
   1220c:	e5942020 	ldr	r2, [r4, #32]
   12210:	e5941014 	ldr	r1, [r4, #20]
   12214:	e58dc000 	str	ip, [sp]
   12218:	ebfff2b2 	bl	ece8 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   1221c:	e1a00005 	mov	r0, r5
   12220:	e584501c 	str	r5, [r4, #28]
   12224:	e1a03004 	mov	r3, r4
   12228:	e3a02000 	mov	r2, #0
   1222c:	e59f1090 	ldr	r1, [pc, #144]	; 122c4 <CUSBHIDDevice::StartRequest()+0x118>
   12230:	ebfff321 	bl	eebc <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   12234:	e1a00004 	mov	r0, r4
   12238:	eb000b1c 	bl	14eb0 <CUSBFunction::GetHost() const>
   1223c:	e3a02000 	mov	r2, #0
   12240:	e5903000 	ldr	r3, [r0]
   12244:	e594101c 	ldr	r1, [r4, #28]
   12248:	e593300c 	ldr	r3, [r3, #12]
   1224c:	e28dd008 	add	sp, sp, #8
   12250:	e8bd4070 	pop	{r4, r5, r6, lr}
   12254:	e12fff13 	bx	r3
   12258:	e3a020cc 	mov	r2, #204	; 0xcc
   1225c:	e59f1058 	ldr	r1, [pc, #88]	; 122bc <CUSBHIDDevice::StartRequest()+0x110>
   12260:	e59f0060 	ldr	r0, [pc, #96]	; 122c8 <CUSBHIDDevice::StartRequest()+0x11c>
   12264:	eb002203 	bl	1aa78 <assertion_failed>
   12268:	e3a00028 	mov	r0, #40	; 0x28
   1226c:	ebfff334 	bl	ef44 <CUSBRequest::operator new(unsigned int)>
   12270:	e1a06000 	mov	r6, r0
   12274:	e5943010 	ldr	r3, [r4, #16]
   12278:	e5942020 	ldr	r2, [r4, #32]
   1227c:	e5941014 	ldr	r1, [r4, #20]
   12280:	e58d5000 	str	r5, [sp]
   12284:	ebfff297 	bl	ece8 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   12288:	e1a00006 	mov	r0, r6
   1228c:	e584601c 	str	r6, [r4, #28]
   12290:	eaffffe3 	b	12224 <CUSBHIDDevice::StartRequest()+0x78>
   12294:	e3a020c9 	mov	r2, #201	; 0xc9
   12298:	e59f101c 	ldr	r1, [pc, #28]	; 122bc <CUSBHIDDevice::StartRequest()+0x110>
   1229c:	e59f0028 	ldr	r0, [pc, #40]	; 122cc <CUSBHIDDevice::StartRequest()+0x120>
   122a0:	eb0021f4 	bl	1aa78 <assertion_failed>
   122a4:	eaffffc9 	b	121d0 <CUSBHIDDevice::StartRequest()+0x24>
   122a8:	e3a020c8 	mov	r2, #200	; 0xc8
   122ac:	e59f1008 	ldr	r1, [pc, #8]	; 122bc <CUSBHIDDevice::StartRequest()+0x110>
   122b0:	e59f0018 	ldr	r0, [pc, #24]	; 122d0 <CUSBHIDDevice::StartRequest()+0x124>
   122b4:	eb0021ef 	bl	1aa78 <assertion_failed>
   122b8:	eaffffc1 	b	121c4 <CUSBHIDDevice::StartRequest()+0x18>
   122bc:	00025df8 	.word	0x00025df8
   122c0:	00025eb0 	.word	0x00025eb0
   122c4:	000123c0 	.word	0x000123c0
   122c8:	00025e58 	.word	0x00025e58
   122cc:	00025e88 	.word	0x00025e88
   122d0:	00025ebc 	.word	0x00025ebc

000122d4 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)>:
   122d4:	e92d4070 	push	{r4, r5, r6, lr}
   122d8:	e2515000 	subs	r5, r1, #0
   122dc:	e1a04000 	mov	r4, r0
   122e0:	0a00002c 	beq	12398 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xc4>
   122e4:	e594301c 	ldr	r3, [r4, #28]
   122e8:	e1550003 	cmp	r5, r3
   122ec:	0a000003 	beq	12300 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x2c>
   122f0:	e3a020d7 	mov	r2, #215	; 0xd7
   122f4:	e59f10b0 	ldr	r1, [pc, #176]	; 123ac <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xd8>
   122f8:	e59f00b0 	ldr	r0, [pc, #176]	; 123b0 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xdc>
   122fc:	eb0021dd 	bl	1aa78 <assertion_failed>
   12300:	e1a00005 	mov	r0, r5
   12304:	ebfff2b1 	bl	edd0 <CUSBRequest::GetStatus() const>
   12308:	e2502000 	subs	r2, r0, #0
   1230c:	e5943000 	ldr	r3, [r4]
   12310:	0a00001b 	beq	12384 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xb0>
   12314:	e1a00005 	mov	r0, r5
   12318:	e5946020 	ldr	r6, [r4, #32]
   1231c:	e593501c 	ldr	r5, [r3, #28]
   12320:	ebfff2ac 	bl	edd8 <CUSBRequest::GetResultLength() const>
   12324:	e1a01006 	mov	r1, r6
   12328:	e1a02000 	mov	r2, r0
   1232c:	e1a00004 	mov	r0, r4
   12330:	e12fff35 	blx	r5
   12334:	e594501c 	ldr	r5, [r4, #28]
   12338:	e3550000 	cmp	r5, #0
   1233c:	0a000004 	beq	12354 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x80>
   12340:	e1a00005 	mov	r0, r5
   12344:	ebfff28c 	bl	ed7c <CUSBRequest::~CUSBRequest()>
   12348:	e1a00005 	mov	r0, r5
   1234c:	e3a01028 	mov	r1, #40	; 0x28
   12350:	ebfff313 	bl	efa4 <CUSBRequest::operator delete(void*, unsigned int)>
   12354:	e3a03000 	mov	r3, #0
   12358:	e1a00004 	mov	r0, r4
   1235c:	e584301c 	str	r3, [r4, #28]
   12360:	ebffff91 	bl	121ac <CUSBHIDDevice::StartRequest()>
   12364:	e3500000 	cmp	r0, #0
   12368:	18bd8070 	popne	{r4, r5, r6, pc}
   1236c:	eb002bb4 	bl	1d244 <CLogger::Get()>
   12370:	e8bd4070 	pop	{r4, r5, r6, lr}
   12374:	e59f3038 	ldr	r3, [pc, #56]	; 123b4 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xe0>
   12378:	e3a02001 	mov	r2, #1
   1237c:	e59f1034 	ldr	r1, [pc, #52]	; 123b8 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xe4>
   12380:	ea002d58 	b	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12384:	e593301c 	ldr	r3, [r3, #28]
   12388:	e1a01002 	mov	r1, r2
   1238c:	e1a00004 	mov	r0, r4
   12390:	e12fff33 	blx	r3
   12394:	eaffffe6 	b	12334 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x60>
   12398:	e3a020d6 	mov	r2, #214	; 0xd6
   1239c:	e59f1008 	ldr	r1, [pc, #8]	; 123ac <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xd8>
   123a0:	e59f0014 	ldr	r0, [pc, #20]	; 123bc <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xe8>
   123a4:	eb0021b3 	bl	1aa78 <assertion_failed>
   123a8:	eaffffcd 	b	122e4 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x10>
   123ac:	00025df8 	.word	0x00025df8
   123b0:	00025ed4 	.word	0x00025ed4
   123b4:	00025ee4 	.word	0x00025ee4
   123b8:	00025dc8 	.word	0x00025dc8
   123bc:	00024850 	.word	0x00024850

000123c0 <CUSBHIDDevice::CompletionStub(CUSBRequest*, void*, void*)>:
   123c0:	e92d4070 	push	{r4, r5, r6, lr}
   123c4:	e2524000 	subs	r4, r2, #0
   123c8:	e1a05000 	mov	r5, r0
   123cc:	0a000003 	beq	123e0 <CUSBHIDDevice::CompletionStub(CUSBRequest*, void*, void*)+0x20>
   123d0:	e1a01005 	mov	r1, r5
   123d4:	e1a00004 	mov	r0, r4
   123d8:	e8bd4070 	pop	{r4, r5, r6, lr}
   123dc:	eaffffbc 	b	122d4 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)>
   123e0:	e59f1018 	ldr	r1, [pc, #24]	; 12400 <CUSBHIDDevice::CompletionStub(CUSBRequest*, void*, void*)+0x40>
   123e4:	e59f0018 	ldr	r0, [pc, #24]	; 12404 <CUSBHIDDevice::CompletionStub(CUSBRequest*, void*, void*)+0x44>
   123e8:	e3a020ee 	mov	r2, #238	; 0xee
   123ec:	eb0021a1 	bl	1aa78 <assertion_failed>
   123f0:	e1a01005 	mov	r1, r5
   123f4:	e1a00004 	mov	r0, r4
   123f8:	e8bd4070 	pop	{r4, r5, r6, lr}
   123fc:	eaffffb4 	b	122d4 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)>
   12400:	00025df8 	.word	0x00025df8
   12404:	00024764 	.word	0x00024764

00012408 <CUSBMouseDevice::~CUSBMouseDevice()>:
   12408:	e92d4010 	push	{r4, lr}
   1240c:	e1a04000 	mov	r4, r0
   12410:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   12414:	e59f3044 	ldr	r3, [pc, #68]	; 12460 <CUSBMouseDevice::~CUSBMouseDevice()+0x58>
   12418:	e3500000 	cmp	r0, #0
   1241c:	e5843000 	str	r3, [r4]
   12420:	0a000002 	beq	12430 <CUSBMouseDevice::~CUSBMouseDevice()+0x28>
   12424:	e5903000 	ldr	r3, [r0]
   12428:	e5933004 	ldr	r3, [r3, #4]
   1242c:	e12fff33 	blx	r3
   12430:	e3a03000 	mov	r3, #0
   12434:	e5940028 	ldr	r0, [r4, #40]	; 0x28
   12438:	e5843024 	str	r3, [r4, #36]	; 0x24
   1243c:	e1500003 	cmp	r0, r3
   12440:	0a000000 	beq	12448 <CUSBMouseDevice::~CUSBMouseDevice()+0x40>
   12444:	eb004253 	bl	22d98 <operator delete[](void*)>
   12448:	e3a03000 	mov	r3, #0
   1244c:	e1a00004 	mov	r0, r4
   12450:	e5843028 	str	r3, [r4, #40]	; 0x28
   12454:	ebfffe01 	bl	11c60 <CUSBHIDDevice::~CUSBHIDDevice()>
   12458:	e1a00004 	mov	r0, r4
   1245c:	e8bd8010 	pop	{r4, pc}
   12460:	00025f04 	.word	0x00025f04

00012464 <CUSBMouseDevice::~CUSBMouseDevice()>:
   12464:	e92d4010 	push	{r4, lr}
   12468:	e1a04000 	mov	r4, r0
   1246c:	ebffffe5 	bl	12408 <CUSBMouseDevice::~CUSBMouseDevice()>
   12470:	e1a00004 	mov	r0, r4
   12474:	e3a01030 	mov	r1, #48	; 0x30
   12478:	eb004247 	bl	22d9c <operator delete(void*, unsigned int)>
   1247c:	e1a00004 	mov	r0, r4
   12480:	e8bd8010 	pop	{r4, pc}

00012484 <CUSBMouseDevice::Configure()>:
   12484:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   12488:	e3a01021 	mov	r1, #33	; 0x21
   1248c:	e24dd014 	sub	sp, sp, #20
   12490:	e1a04000 	mov	r4, r0
   12494:	eb000ac7 	bl	14fb8 <CUSBFunction::GetDescriptor(unsigned char)>
   12498:	e2505000 	subs	r5, r0, #0
   1249c:	0a000003 	beq	124b0 <CUSBMouseDevice::Configure()+0x2c>
   124a0:	e5d50007 	ldrb	r0, [r5, #7]
   124a4:	e5d53008 	ldrb	r3, [r5, #8]
   124a8:	e1900403 	orrs	r0, r0, r3, lsl #8
   124ac:	1a000006 	bne	124cc <CUSBMouseDevice::Configure()+0x48>
   124b0:	e1a00004 	mov	r0, r4
   124b4:	e59f10f0 	ldr	r1, [pc, #240]	; 125ac <CUSBMouseDevice::Configure()+0x128>
   124b8:	eb000ad1 	bl	15004 <CUSBFunction::ConfigurationError(char const*) const>
   124bc:	e3a05000 	mov	r5, #0
   124c0:	e1a00005 	mov	r0, r5
   124c4:	e28dd014 	add	sp, sp, #20
   124c8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   124cc:	e1c402bc 	strh	r0, [r4, #44]	; 0x2c
   124d0:	eb00422e 	bl	22d90 <operator new[](unsigned int)>
   124d4:	e5840028 	str	r0, [r4, #40]	; 0x28
   124d8:	e1a00004 	mov	r0, r4
   124dc:	eb000a73 	bl	14eb0 <CUSBFunction::GetHost() const>
   124e0:	e1a06000 	mov	r6, r0
   124e4:	e1a00004 	mov	r0, r4
   124e8:	eb000a5f 	bl	14e6c <CUSBFunction::GetEndpoint0() const>
   124ec:	e1a07000 	mov	r7, r0
   124f0:	e1a00004 	mov	r0, r4
   124f4:	e5d55006 	ldrb	r5, [r5, #6]
   124f8:	e5948028 	ldr	r8, [r4, #40]	; 0x28
   124fc:	e1d492bc 	ldrh	r9, [r4, #44]	; 0x2c
   12500:	eb000b14 	bl	15158 <CUSBFunction::GetInterfaceNumber() const>
   12504:	e3a03081 	mov	r3, #129	; 0x81
   12508:	e6ff0070 	uxth	r0, r0
   1250c:	e58d000c 	str	r0, [sp, #12]
   12510:	e58d3008 	str	r3, [sp, #8]
   12514:	e88d0300 	stm	sp, {r8, r9}
   12518:	e3a03000 	mov	r3, #0
   1251c:	e1a02005 	mov	r2, r5
   12520:	e1a01007 	mov	r1, r7
   12524:	e1a00006 	mov	r0, r6
   12528:	ebfff1a1 	bl	ebb4 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   1252c:	e1d432bc 	ldrh	r3, [r4, #44]	; 0x2c
   12530:	e1500003 	cmp	r0, r3
   12534:	0a000008 	beq	1255c <CUSBMouseDevice::Configure()+0xd8>
   12538:	e3a05000 	mov	r5, #0
   1253c:	eb002b40 	bl	1d244 <CLogger::Get()>
   12540:	e59f3068 	ldr	r3, [pc, #104]	; 125b0 <CUSBMouseDevice::Configure()+0x12c>
   12544:	e3a02001 	mov	r2, #1
   12548:	e59f105c 	ldr	r1, [pc, #92]	; 125ac <CUSBMouseDevice::Configure()+0x128>
   1254c:	eb002ce5 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12550:	e1a00005 	mov	r0, r5
   12554:	e28dd014 	add	sp, sp, #20
   12558:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1255c:	e3a01000 	mov	r1, #0
   12560:	e1a00004 	mov	r0, r4
   12564:	ebfffde8 	bl	11d0c <CUSBHIDDevice::Configure(unsigned int)>
   12568:	e2505000 	subs	r5, r0, #0
   1256c:	0a000008 	beq	12594 <CUSBMouseDevice::Configure()+0x110>
   12570:	e3a00028 	mov	r0, #40	; 0x28
   12574:	eb004204 	bl	22d8c <operator new(unsigned int)>
   12578:	e1a05000 	mov	r5, r0
   1257c:	eb001da9 	bl	19c28 <CMouseDevice::CMouseDevice()>
   12580:	e1a00004 	mov	r0, r4
   12584:	e5845024 	str	r5, [r4, #36]	; 0x24
   12588:	e28dd014 	add	sp, sp, #20
   1258c:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
   12590:	eaffff05 	b	121ac <CUSBHIDDevice::StartRequest()>
   12594:	eb002b2a 	bl	1d244 <CLogger::Get()>
   12598:	e59f3014 	ldr	r3, [pc, #20]	; 125b4 <CUSBMouseDevice::Configure()+0x130>
   1259c:	e3a02001 	mov	r2, #1
   125a0:	e59f1004 	ldr	r1, [pc, #4]	; 125ac <CUSBMouseDevice::Configure()+0x128>
   125a4:	eb002ccf 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   125a8:	eaffffc4 	b	124c0 <CUSBMouseDevice::Configure()+0x3c>
   125ac:	00025f24 	.word	0x00025f24
   125b0:	00025f2c 	.word	0x00025f2c
   125b4:	00025d08 	.word	0x00025d08

000125b8 <CUSBMouseDevice::ReportHandler(unsigned char const*, unsigned int)>:
   125b8:	e2913000 	adds	r3, r1, #0
   125bc:	13a03001 	movne	r3, #1
   125c0:	e3520003 	cmp	r2, #3
   125c4:	13a03000 	movne	r3, #0
   125c8:	e3530000 	cmp	r3, #0
   125cc:	e1a02001 	mov	r2, r1
   125d0:	012fff1e 	bxeq	lr
   125d4:	e5d13000 	ldrb	r3, [r1]
   125d8:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   125dc:	e3130002 	tst	r3, #2
   125e0:	e2031001 	and	r1, r3, #1
   125e4:	13811002 	orrne	r1, r1, #2
   125e8:	e3130004 	tst	r3, #4
   125ec:	13811004 	orrne	r1, r1, #4
   125f0:	e3500000 	cmp	r0, #0
   125f4:	012fff1e 	bxeq	lr
   125f8:	e1d230d2 	ldrsb	r3, [r2, #2]
   125fc:	e1d220d1 	ldrsb	r2, [r2, #1]
   12600:	ea001dc5 	b	19d1c <CMouseDevice::ReportHandler(unsigned int, int, int)>

00012604 <CUSBMouseDevice::CUSBMouseDevice(CUSBFunction*)>:
   12604:	e92d4010 	push	{r4, lr}
   12608:	e3a02003 	mov	r2, #3
   1260c:	e1a04000 	mov	r4, r0
   12610:	ebfffd7e 	bl	11c10 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>
   12614:	e3a03000 	mov	r3, #0
   12618:	e59f2010 	ldr	r2, [pc, #16]	; 12630 <CUSBMouseDevice::CUSBMouseDevice(CUSBFunction*)+0x2c>
   1261c:	e5843024 	str	r3, [r4, #36]	; 0x24
   12620:	e5842000 	str	r2, [r4]
   12624:	e5843028 	str	r3, [r4, #40]	; 0x28
   12628:	e1a00004 	mov	r0, r4
   1262c:	e8bd8010 	pop	{r4, pc}
   12630:	00025f04 	.word	0x00025f04

00012634 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>:
   12634:	e92d4010 	push	{r4, lr}
   12638:	e1a04000 	mov	r4, r0
   1263c:	e5900134 	ldr	r0, [r0, #308]	; 0x134
   12640:	e59f3024 	ldr	r3, [pc, #36]	; 1266c <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()+0x38>
   12644:	e3500000 	cmp	r0, #0
   12648:	e5843000 	str	r3, [r4]
   1264c:	0a000000 	beq	12654 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()+0x20>
   12650:	eb0041d0 	bl	22d98 <operator delete[](void*)>
   12654:	e3a03000 	mov	r3, #0
   12658:	e1a00004 	mov	r0, r4
   1265c:	e5843134 	str	r3, [r4, #308]	; 0x134
   12660:	eb001b71 	bl	1942c <CUSBGamePadDevice::~CUSBGamePadDevice()>
   12664:	e1a00004 	mov	r0, r4
   12668:	e8bd8010 	pop	{r4, pc}
   1266c:	00025f58 	.word	0x00025f58

00012670 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>:
   12670:	e92d4010 	push	{r4, lr}
   12674:	e1a04000 	mov	r4, r0
   12678:	ebffffed 	bl	12634 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>
   1267c:	e1a00004 	mov	r0, r4
   12680:	e3a01f4f 	mov	r1, #316	; 0x13c
   12684:	eb0041c4 	bl	22d9c <operator delete(void*, unsigned int)>
   12688:	e1a00004 	mov	r0, r4
   1268c:	e8bd8010 	pop	{r4, pc}

00012690 <CUSBGamePadStandardDevice::CUSBGamePadStandardDevice(CUSBFunction*, bool)>:
   12690:	e92d4070 	push	{r4, r5, r6, lr}
   12694:	e1a04000 	mov	r4, r0
   12698:	e1a05002 	mov	r5, r2
   1269c:	eb001b50 	bl	193e4 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   126a0:	e3a03000 	mov	r3, #0
   126a4:	e59f0018 	ldr	r0, [pc, #24]	; 126c4 <CUSBGamePadStandardDevice::CUSBGamePadStandardDevice(CUSBFunction*, bool)+0x34>
   126a8:	e2841f4e 	add	r1, r4, #312	; 0x138
   126ac:	e5840000 	str	r0, [r4]
   126b0:	e5c45130 	strb	r5, [r4, #304]	; 0x130
   126b4:	e5843134 	str	r3, [r4, #308]	; 0x134
   126b8:	e1a00004 	mov	r0, r4
   126bc:	e1c130b0 	strh	r3, [r1]
   126c0:	e8bd8070 	pop	{r4, r5, r6, pc}
   126c4:	00025f58 	.word	0x00025f58

000126c8 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>:
   126c8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   126cc:	e0814002 	add	r4, r1, r2
   126d0:	e2846007 	add	r6, r4, #7
   126d4:	e1a061a6 	lsr	r6, r6, #3
   126d8:	e1a0e1a1 	lsr	lr, r1, #3
   126dc:	e15e0006 	cmp	lr, r6
   126e0:	e24dd00c 	sub	sp, sp, #12
   126e4:	2a000037 	bcs	127c8 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0x100>
   126e8:	e3a07001 	mov	r7, #1
   126ec:	e3a05000 	mov	r5, #0
   126f0:	e2011007 	and	r1, r1, #7
   126f4:	e0828001 	add	r8, r2, r1
   126f8:	e1a08817 	lsl	r8, r7, r8
   126fc:	e6ef8078 	uxtb	r8, r8
   12700:	e1a07117 	lsl	r7, r7, r1
   12704:	e6ef7077 	uxtb	r7, r7
   12708:	e2489001 	sub	r9, r8, #1
   1270c:	e2444001 	sub	r4, r4, #1
   12710:	e0488007 	sub	r8, r8, r7
   12714:	e6ef9079 	uxtb	r9, r9
   12718:	e2677000 	rsb	r7, r7, #0
   1271c:	e1a03005 	mov	r3, r5
   12720:	e1a0c00e 	mov	ip, lr
   12724:	e1a041a4 	lsr	r4, r4, #3
   12728:	e080000e 	add	r0, r0, lr
   1272c:	e58d9004 	str	r9, [sp, #4]
   12730:	e6ef8078 	uxtb	r8, r8
   12734:	e6ef7077 	uxtb	r7, r7
   12738:	e261b008 	rsb	fp, r1, #8
   1273c:	ea00000e 	b	1277c <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xb4>
   12740:	e15e000c 	cmp	lr, ip
   12744:	0a000018 	beq	127ac <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xe4>
   12748:	e15c0004 	cmp	ip, r4
   1274c:	05d09000 	ldrbeq	r9, [r0]
   12750:	059da004 	ldreq	sl, [sp, #4]
   12754:	12855008 	addne	r5, r5, #8
   12758:	15d0a000 	ldrbne	sl, [r0]
   1275c:	0009900a 	andeq	r9, r9, sl
   12760:	10429005 	subne	r9, r2, r5
   12764:	01833009 	orreq	r3, r3, r9
   12768:	1183391a 	orrne	r3, r3, sl, lsl r9
   1276c:	e28cc001 	add	ip, ip, #1
   12770:	e15c0006 	cmp	ip, r6
   12774:	e2800001 	add	r0, r0, #1
   12778:	0a000008 	beq	127a0 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xd8>
   1277c:	e15e0004 	cmp	lr, r4
   12780:	1affffee 	bne	12740 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0x78>
   12784:	e5d03000 	ldrb	r3, [r0]
   12788:	e28cc001 	add	ip, ip, #1
   1278c:	e0033008 	and	r3, r3, r8
   12790:	e15c0006 	cmp	ip, r6
   12794:	e1a03153 	asr	r3, r3, r1
   12798:	e2800001 	add	r0, r0, #1
   1279c:	1afffff6 	bne	1277c <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xb4>
   127a0:	e1a00003 	mov	r0, r3
   127a4:	e28dd00c 	add	sp, sp, #12
   127a8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127ac:	e5d03000 	ldrb	r3, [r0]
   127b0:	e085500b 	add	r5, r5, fp
   127b4:	e0033007 	and	r3, r3, r7
   127b8:	e1a03153 	asr	r3, r3, r1
   127bc:	e0429005 	sub	r9, r2, r5
   127c0:	e1a03913 	lsl	r3, r3, r9
   127c4:	eaffffe8 	b	1276c <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xa4>
   127c8:	e3a03000 	mov	r3, #0
   127cc:	eafffff3 	b	127a0 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xd8>

000127d0 <CUSBGamePadStandardDevice::BitGetSigned(void const*, unsigned int, unsigned int)>:
   127d0:	e92d4010 	push	{r4, lr}
   127d4:	e1a04002 	mov	r4, r2
   127d8:	ebffffba 	bl	126c8 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   127dc:	e3a02001 	mov	r2, #1
   127e0:	e2443001 	sub	r3, r4, #1
   127e4:	e0103312 	ands	r3, r0, r2, lsl r3
   127e8:	11a02412 	lslne	r2, r2, r4
   127ec:	12622000 	rsbne	r2, r2, #0
   127f0:	11800002 	orrne	r0, r0, r2
   127f4:	e8bd8010 	pop	{r4, pc}

000127f8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)>:
   127f8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   127fc:	e5905134 	ldr	r5, [r0, #308]	; 0x134
   12800:	e24dd034 	sub	sp, sp, #52	; 0x34
   12804:	e3550000 	cmp	r5, #0
   12808:	e58d0014 	str	r0, [sp, #20]
   1280c:	e58d1000 	str	r1, [sp]
   12810:	0a000109 	beq	12c3c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x444>
   12814:	e3a09000 	mov	r9, #0
   12818:	e59f3450 	ldr	r3, [pc, #1104]	; 12c70 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x478>
   1281c:	e1a07009 	mov	r7, r9
   12820:	e1a02003 	mov	r2, r3
   12824:	e1a0a009 	mov	sl, r9
   12828:	e1a0b009 	mov	fp, r9
   1282c:	e1a08009 	mov	r8, r9
   12830:	e58d300c 	str	r3, [sp, #12]
   12834:	e59d3014 	ldr	r3, [sp, #20]
   12838:	e58d9020 	str	r9, [sp, #32]
   1283c:	e2833f4e 	add	r3, r3, #312	; 0x138
   12840:	e1d340b0 	ldrh	r4, [r3]
   12844:	e58d901c 	str	r9, [sp, #28]
   12848:	e58d9004 	str	r9, [sp, #4]
   1284c:	e58d2010 	str	r2, [sp, #16]
   12850:	e58d2018 	str	r2, [sp, #24]
   12854:	e58d2008 	str	r2, [sp, #8]
   12858:	e3540000 	cmp	r4, #0
   1285c:	0a000024 	beq	128f4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xfc>
   12860:	e1d530d0 	ldrsb	r3, [r5]
   12864:	e2032003 	and	r2, r3, #3
   12868:	e3520001 	cmp	r2, #1
   1286c:	0a00004e 	beq	129ac <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1b4>
   12870:	e3520002 	cmp	r2, #2
   12874:	0a000045 	beq	12990 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x198>
   12878:	e3520000 	cmp	r2, #0
   1287c:	0a00003e 	beq	1297c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x184>
   12880:	e1d560d3 	ldrsb	r6, [r5, #3]
   12884:	e1d520d2 	ldrsb	r2, [r5, #2]
   12888:	e1d510d1 	ldrsb	r1, [r5, #1]
   1288c:	e1a06806 	lsl	r6, r6, #16
   12890:	e1866402 	orr	r6, r6, r2, lsl #8
   12894:	e1d520d4 	ldrsb	r2, [r5, #4]
   12898:	e2444005 	sub	r4, r4, #5
   1289c:	e1866001 	orr	r6, r6, r1
   128a0:	e6ff4074 	uxth	r4, r4
   128a4:	e1866c02 	orr	r6, r6, r2, lsl #24
   128a8:	e2855005 	add	r5, r5, #5
   128ac:	e20330fc 	and	r3, r3, #252	; 0xfc
   128b0:	e3530084 	cmp	r3, #132	; 0x84
   128b4:	0a000024 	beq	1294c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x154>
   128b8:	e3530034 	cmp	r3, #52	; 0x34
   128bc:	0a00003f 	beq	129c0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1c8>
   128c0:	ca000016 	bgt	12920 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x128>
   128c4:	e3530008 	cmp	r3, #8
   128c8:	0a00003e 	beq	129c8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1d0>
   128cc:	da00004c 	ble	12a04 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x20c>
   128d0:	e3530014 	cmp	r3, #20
   128d4:	058d6018 	streq	r6, [sp, #24]
   128d8:	0affffde 	beq	12858 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   128dc:	e3530024 	cmp	r3, #36	; 0x24
   128e0:	e59d2008 	ldr	r2, [sp, #8]
   128e4:	01a02006 	moveq	r2, r6
   128e8:	e3540000 	cmp	r4, #0
   128ec:	e58d2008 	str	r2, [sp, #8]
   128f0:	1affffda 	bne	12860 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x68>
   128f4:	e59d1014 	ldr	r1, [sp, #20]
   128f8:	e59d001c 	ldr	r0, [sp, #28]
   128fc:	e28b3007 	add	r3, fp, #7
   12900:	e5810024 	str	r0, [r1, #36]	; 0x24
   12904:	e59d0020 	ldr	r0, [sp, #32]
   12908:	e1a031a3 	lsr	r3, r3, #3
   1290c:	e2812f4a 	add	r2, r1, #296	; 0x128
   12910:	e58100e8 	str	r0, [r1, #232]	; 0xe8
   12914:	e1c230b0 	strh	r3, [r2]
   12918:	e28dd034 	add	sp, sp, #52	; 0x34
   1291c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12920:	e3530074 	cmp	r3, #116	; 0x74
   12924:	01a0a006 	moveq	sl, r6
   12928:	0affffca 	beq	12858 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   1292c:	da00003b 	ble	12a20 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x228>
   12930:	e3530080 	cmp	r3, #128	; 0x80
   12934:	0a00002b 	beq	129e8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1f0>
   12938:	e3530094 	cmp	r3, #148	; 0x94
   1293c:	e59d2004 	ldr	r2, [sp, #4]
   12940:	01a02006 	moveq	r2, r6
   12944:	e58d2004 	str	r2, [sp, #4]
   12948:	eaffffc2 	b	12858 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   1294c:	e3570000 	cmp	r7, #0
   12950:	1affffe7 	bne	128f4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xfc>
   12954:	e3a02008 	mov	r2, #8
   12958:	e1a01008 	mov	r1, r8
   1295c:	e59d0000 	ldr	r0, [sp]
   12960:	ebffff58 	bl	126c8 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   12964:	e3500000 	cmp	r0, #0
   12968:	11500006 	cmpne	r0, r6
   1296c:	1affffe9 	bne	12918 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x120>
   12970:	e1a07006 	mov	r7, r6
   12974:	e3a0b008 	mov	fp, #8
   12978:	eaffffb6 	b	12858 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   1297c:	e2444001 	sub	r4, r4, #1
   12980:	e6ff4074 	uxth	r4, r4
   12984:	e2855001 	add	r5, r5, #1
   12988:	e1a06008 	mov	r6, r8
   1298c:	eaffffc6 	b	128ac <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xb4>
   12990:	e5d56001 	ldrb	r6, [r5, #1]
   12994:	e1d520d2 	ldrsb	r2, [r5, #2]
   12998:	e2444003 	sub	r4, r4, #3
   1299c:	e6ff4074 	uxth	r4, r4
   129a0:	e1866402 	orr	r6, r6, r2, lsl #8
   129a4:	e2855003 	add	r5, r5, #3
   129a8:	eaffffbf 	b	128ac <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xb4>
   129ac:	e2444002 	sub	r4, r4, #2
   129b0:	e1d560d1 	ldrsb	r6, [r5, #1]
   129b4:	e6ff4074 	uxth	r4, r4
   129b8:	e2855002 	add	r5, r5, #2
   129bc:	eaffffba 	b	128ac <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xb4>
   129c0:	e58d6010 	str	r6, [sp, #16]
   129c4:	eaffffa3 	b	12858 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   129c8:	e3560036 	cmp	r6, #54	; 0x36
   129cc:	ca000018 	bgt	12a34 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x23c>
   129d0:	e3560030 	cmp	r6, #48	; 0x30
   129d4:	aa00002d 	bge	12a90 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x298>
   129d8:	e2466004 	sub	r6, r6, #4
   129dc:	e3560001 	cmp	r6, #1
   129e0:	93a09001 	movls	r9, #1
   129e4:	eaffff9b 	b	12858 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   129e8:	e2066003 	and	r6, r6, #3
   129ec:	e3560002 	cmp	r6, #2
   129f0:	0a000014 	beq	12a48 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x250>
   129f4:	e59d3004 	ldr	r3, [sp, #4]
   129f8:	e0060a93 	mul	r6, r3, sl
   129fc:	e08bb006 	add	fp, fp, r6
   12a00:	eaffff94 	b	12858 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   12a04:	e3530004 	cmp	r3, #4
   12a08:	1affff92 	bne	12858 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   12a0c:	e3560009 	cmp	r6, #9
   12a10:	1affff90 	bne	12858 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   12a14:	e3590001 	cmp	r9, #1
   12a18:	03a09002 	moveq	r9, #2
   12a1c:	eaffff8d 	b	12858 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   12a20:	e3530044 	cmp	r3, #68	; 0x44
   12a24:	e59d200c 	ldr	r2, [sp, #12]
   12a28:	01a02006 	moveq	r2, r6
   12a2c:	e58d200c 	str	r2, [sp, #12]
   12a30:	eaffff88 	b	12858 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   12a34:	e3560039 	cmp	r6, #57	; 0x39
   12a38:	1affff86 	bne	12858 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   12a3c:	e3590001 	cmp	r9, #1
   12a40:	03a09004 	moveq	r9, #4
   12a44:	eaffff83 	b	12858 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   12a48:	e3590003 	cmp	r9, #3
   12a4c:	0a000012 	beq	12a9c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x2a4>
   12a50:	e3590004 	cmp	r9, #4
   12a54:	0a00004f 	beq	12b98 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x3a0>
   12a58:	e59d3004 	ldr	r3, [sp, #4]
   12a5c:	e3590002 	cmp	r9, #2
   12a60:	e0060a93 	mul	r6, r3, sl
   12a64:	1affffe4 	bne	129fc <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x204>
   12a68:	e59d2014 	ldr	r2, [sp, #20]
   12a6c:	e1a0100b 	mov	r1, fp
   12a70:	e5823104 	str	r3, [r2, #260]	; 0x104
   12a74:	e59d0000 	ldr	r0, [sp]
   12a78:	e1a02006 	mov	r2, r6
   12a7c:	ebffff11 	bl	126c8 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   12a80:	e59d2014 	ldr	r2, [sp, #20]
   12a84:	e3a09001 	mov	r9, #1
   12a88:	e5820108 	str	r0, [r2, #264]	; 0x108
   12a8c:	eaffffda 	b	129fc <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x204>
   12a90:	e3590001 	cmp	r9, #1
   12a94:	03a09003 	moveq	r9, #3
   12a98:	eaffff6e 	b	12858 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   12a9c:	e59d3004 	ldr	r3, [sp, #4]
   12aa0:	e3530000 	cmp	r3, #0
   12aa4:	0a00006e 	beq	12c64 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x46c>
   12aa8:	e59d2018 	ldr	r2, [sp, #24]
   12aac:	e59f01bc 	ldr	r0, [pc, #444]	; 12c70 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x478>
   12ab0:	e59d1010 	ldr	r1, [sp, #16]
   12ab4:	e1520000 	cmp	r2, r0
   12ab8:	e1a03002 	mov	r3, r2
   12abc:	01a03001 	moveq	r3, r1
   12ac0:	e59fc1a8 	ldr	ip, [pc, #424]	; 12c70 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x478>
   12ac4:	e59d1008 	ldr	r1, [sp, #8]
   12ac8:	e59d000c 	ldr	r0, [sp, #12]
   12acc:	e151000c 	cmp	r1, ip
   12ad0:	e1a02003 	mov	r2, r3
   12ad4:	e1a03001 	mov	r3, r1
   12ad8:	01a03000 	moveq	r3, r0
   12adc:	e1a01003 	mov	r1, r3
   12ae0:	e1a0300b 	mov	r3, fp
   12ae4:	e59d001c 	ldr	r0, [sp, #28]
   12ae8:	e59dc014 	ldr	ip, [sp, #20]
   12aec:	e0806080 	add	r6, r0, r0, lsl #1
   12af0:	e58db01c 	str	fp, [sp, #28]
   12af4:	e58d7024 	str	r7, [sp, #36]	; 0x24
   12af8:	e58d5028 	str	r5, [sp, #40]	; 0x28
   12afc:	e58d402c 	str	r4, [sp, #44]	; 0x2c
   12b00:	e3a09000 	mov	r9, #0
   12b04:	e08c6106 	add	r6, ip, r6, lsl #2
   12b08:	e1a05000 	mov	r5, r0
   12b0c:	e1a07002 	mov	r7, r2
   12b10:	e1a0b001 	mov	fp, r1
   12b14:	e1a04003 	mov	r4, r3
   12b18:	ea00000d 	b	12b54 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x35c>
   12b1c:	ebfffee9 	bl	126c8 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   12b20:	e2899001 	add	r9, r9, #1
   12b24:	e359000f 	cmp	r9, #15
   12b28:	93a02000 	movls	r2, #0
   12b2c:	83a02001 	movhi	r2, #1
   12b30:	e59d3004 	ldr	r3, [sp, #4]
   12b34:	e5860028 	str	r0, [r6, #40]	; 0x28
   12b38:	e1530009 	cmp	r3, r9
   12b3c:	93822001 	orrls	r2, r2, #1
   12b40:	e3520000 	cmp	r2, #0
   12b44:	e2855001 	add	r5, r5, #1
   12b48:	e286600c 	add	r6, r6, #12
   12b4c:	e084400a 	add	r4, r4, sl
   12b50:	1a000008 	bne	12b78 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x380>
   12b54:	e3570000 	cmp	r7, #0
   12b58:	e1a0200a 	mov	r2, sl
   12b5c:	e1a01004 	mov	r1, r4
   12b60:	e586702c 	str	r7, [r6, #44]	; 0x2c
   12b64:	e586b030 	str	fp, [r6, #48]	; 0x30
   12b68:	e59d0000 	ldr	r0, [sp]
   12b6c:	aaffffea 	bge	12b1c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x324>
   12b70:	ebffff16 	bl	127d0 <CUSBGamePadStandardDevice::BitGetSigned(void const*, unsigned int, unsigned int)>
   12b74:	eaffffe9 	b	12b20 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x328>
   12b78:	e59db01c 	ldr	fp, [sp, #28]
   12b7c:	e59d7024 	ldr	r7, [sp, #36]	; 0x24
   12b80:	e58d501c 	str	r5, [sp, #28]
   12b84:	e59d402c 	ldr	r4, [sp, #44]	; 0x2c
   12b88:	e59d5028 	ldr	r5, [sp, #40]	; 0x28
   12b8c:	e0060a93 	mul	r6, r3, sl
   12b90:	e3a09001 	mov	r9, #1
   12b94:	eaffff98 	b	129fc <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x204>
   12b98:	e59d2004 	ldr	r2, [sp, #4]
   12b9c:	e3520000 	cmp	r2, #0
   12ba0:	0a00002c 	beq	12c58 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x460>
   12ba4:	e59d1020 	ldr	r1, [sp, #32]
   12ba8:	e59d0014 	ldr	r0, [sp, #20]
   12bac:	e281303b 	add	r3, r1, #59	; 0x3b
   12bb0:	e0803103 	add	r3, r0, r3, lsl #2
   12bb4:	e58d7024 	str	r7, [sp, #36]	; 0x24
   12bb8:	e58d5028 	str	r5, [sp, #40]	; 0x28
   12bbc:	e58d402c 	str	r4, [sp, #44]	; 0x2c
   12bc0:	e3a06000 	mov	r6, #0
   12bc4:	e1a07001 	mov	r7, r1
   12bc8:	e1a04002 	mov	r4, r2
   12bcc:	e1a05003 	mov	r5, r3
   12bd0:	e1a0900b 	mov	r9, fp
   12bd4:	e58db020 	str	fp, [sp, #32]
   12bd8:	e59db000 	ldr	fp, [sp]
   12bdc:	e1a0200a 	mov	r2, sl
   12be0:	e2866001 	add	r6, r6, #1
   12be4:	e1a01009 	mov	r1, r9
   12be8:	e1a0000b 	mov	r0, fp
   12bec:	ebfffeb5 	bl	126c8 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   12bf0:	e3560005 	cmp	r6, #5
   12bf4:	93a02000 	movls	r2, #0
   12bf8:	83a02001 	movhi	r2, #1
   12bfc:	e1540006 	cmp	r4, r6
   12c00:	93822001 	orrls	r2, r2, #1
   12c04:	e3520000 	cmp	r2, #0
   12c08:	e2877001 	add	r7, r7, #1
   12c0c:	e089900a 	add	r9, r9, sl
   12c10:	e4850004 	str	r0, [r5], #4
   12c14:	0afffff0 	beq	12bdc <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x3e4>
   12c18:	e59d3004 	ldr	r3, [sp, #4]
   12c1c:	e59db020 	ldr	fp, [sp, #32]
   12c20:	e59d5028 	ldr	r5, [sp, #40]	; 0x28
   12c24:	e58d7020 	str	r7, [sp, #32]
   12c28:	e59d402c 	ldr	r4, [sp, #44]	; 0x2c
   12c2c:	e59d7024 	ldr	r7, [sp, #36]	; 0x24
   12c30:	e0060a93 	mul	r6, r3, sl
   12c34:	e3a09001 	mov	r9, #1
   12c38:	eaffff6f 	b	129fc <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x204>
   12c3c:	e3a020a2 	mov	r2, #162	; 0xa2
   12c40:	e59f102c 	ldr	r1, [pc, #44]	; 12c74 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x47c>
   12c44:	e59f002c 	ldr	r0, [pc, #44]	; 12c78 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x480>
   12c48:	eb001f8a 	bl	1aa78 <assertion_failed>
   12c4c:	e59d3014 	ldr	r3, [sp, #20]
   12c50:	e5935134 	ldr	r5, [r3, #308]	; 0x134
   12c54:	eafffeee 	b	12814 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1c>
   12c58:	e59d6004 	ldr	r6, [sp, #4]
   12c5c:	e3a09001 	mov	r9, #1
   12c60:	eaffff65 	b	129fc <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x204>
   12c64:	e1a06008 	mov	r6, r8
   12c68:	e3a09001 	mov	r9, #1
   12c6c:	eaffff62 	b	129fc <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x204>
   12c70:	f8a432eb 	.word	0xf8a432eb
   12c74:	00025fa0 	.word	0x00025fa0
   12c78:	00025fb8 	.word	0x00025fb8

00012c7c <CUSBGamePadStandardDevice::Configure()>:
   12c7c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12c80:	e3a01021 	mov	r1, #33	; 0x21
   12c84:	e24dd078 	sub	sp, sp, #120	; 0x78
   12c88:	e1a04000 	mov	r4, r0
   12c8c:	eb0008c9 	bl	14fb8 <CUSBFunction::GetDescriptor(unsigned char)>
   12c90:	e2505000 	subs	r5, r0, #0
   12c94:	0a000003 	beq	12ca8 <CUSBGamePadStandardDevice::Configure()+0x2c>
   12c98:	e5d50007 	ldrb	r0, [r5, #7]
   12c9c:	e5d53008 	ldrb	r3, [r5, #8]
   12ca0:	e1900403 	orrs	r0, r0, r3, lsl #8
   12ca4:	1a000006 	bne	12cc4 <CUSBGamePadStandardDevice::Configure()+0x48>
   12ca8:	e1a00004 	mov	r0, r4
   12cac:	e59f115c 	ldr	r1, [pc, #348]	; 12e10 <CUSBGamePadStandardDevice::Configure()+0x194>
   12cb0:	eb0008d3 	bl	15004 <CUSBFunction::ConfigurationError(char const*) const>
   12cb4:	e3a05000 	mov	r5, #0
   12cb8:	e1a00005 	mov	r0, r5
   12cbc:	e28dd078 	add	sp, sp, #120	; 0x78
   12cc0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12cc4:	e2846f4e 	add	r6, r4, #312	; 0x138
   12cc8:	e1c600b0 	strh	r0, [r6]
   12ccc:	eb00402f 	bl	22d90 <operator new[](unsigned int)>
   12cd0:	e5840134 	str	r0, [r4, #308]	; 0x134
   12cd4:	e1a00004 	mov	r0, r4
   12cd8:	eb000874 	bl	14eb0 <CUSBFunction::GetHost() const>
   12cdc:	e1a07000 	mov	r7, r0
   12ce0:	e1a00004 	mov	r0, r4
   12ce4:	eb000860 	bl	14e6c <CUSBFunction::GetEndpoint0() const>
   12ce8:	e1a08000 	mov	r8, r0
   12cec:	e1a00004 	mov	r0, r4
   12cf0:	e5d55006 	ldrb	r5, [r5, #6]
   12cf4:	e1d6a0b0 	ldrh	sl, [r6]
   12cf8:	e5949134 	ldr	r9, [r4, #308]	; 0x134
   12cfc:	eb000915 	bl	15158 <CUSBFunction::GetInterfaceNumber() const>
   12d00:	e3a03081 	mov	r3, #129	; 0x81
   12d04:	e6ff0070 	uxth	r0, r0
   12d08:	e58d000c 	str	r0, [sp, #12]
   12d0c:	e58d3008 	str	r3, [sp, #8]
   12d10:	e58da004 	str	sl, [sp, #4]
   12d14:	e3a03000 	mov	r3, #0
   12d18:	e58d9000 	str	r9, [sp]
   12d1c:	e1a02005 	mov	r2, r5
   12d20:	e1a01008 	mov	r1, r8
   12d24:	e1a00007 	mov	r0, r7
   12d28:	ebffefa1 	bl	ebb4 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   12d2c:	e1d630b0 	ldrh	r3, [r6]
   12d30:	e1500003 	cmp	r0, r3
   12d34:	0a000008 	beq	12d5c <CUSBGamePadStandardDevice::Configure()+0xe0>
   12d38:	e3a05000 	mov	r5, #0
   12d3c:	eb002940 	bl	1d244 <CLogger::Get()>
   12d40:	e59f30cc 	ldr	r3, [pc, #204]	; 12e14 <CUSBGamePadStandardDevice::Configure()+0x198>
   12d44:	e3a02001 	mov	r2, #1
   12d48:	e59f10c0 	ldr	r1, [pc, #192]	; 12e10 <CUSBGamePadStandardDevice::Configure()+0x194>
   12d4c:	eb002ae5 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12d50:	e1a00005 	mov	r0, r5
   12d54:	e28dd078 	add	sp, sp, #120	; 0x78
   12d58:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12d5c:	e3a02064 	mov	r2, #100	; 0x64
   12d60:	e3a01000 	mov	r1, #0
   12d64:	e28d0014 	add	r0, sp, #20
   12d68:	eb003b99 	bl	21bd4 <memset>
   12d6c:	e5943000 	ldr	r3, [r4]
   12d70:	e28d1014 	add	r1, sp, #20
   12d74:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   12d78:	e1a00004 	mov	r0, r4
   12d7c:	e12fff33 	blx	r3
   12d80:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   12d84:	e3530000 	cmp	r3, #0
   12d88:	1a000002 	bne	12d98 <CUSBGamePadStandardDevice::Configure()+0x11c>
   12d8c:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
   12d90:	e3530000 	cmp	r3, #0
   12d94:	0a00000e 	beq	12dd4 <CUSBGamePadStandardDevice::Configure()+0x158>
   12d98:	e2843f4a 	add	r3, r4, #296	; 0x128
   12d9c:	e1d330b0 	ldrh	r3, [r3]
   12da0:	e3530000 	cmp	r3, #0
   12da4:	0a00000e 	beq	12de4 <CUSBGamePadStandardDevice::Configure()+0x168>
   12da8:	e1a00004 	mov	r0, r4
   12dac:	eb00195e 	bl	1932c <CUSBGamePadDevice::Configure()>
   12db0:	e2505000 	subs	r5, r0, #0
   12db4:	0a00000f 	beq	12df8 <CUSBGamePadStandardDevice::Configure()+0x17c>
   12db8:	e5d43130 	ldrb	r3, [r4, #304]	; 0x130
   12dbc:	e3530000 	cmp	r3, #0
   12dc0:	0affffbc 	beq	12cb8 <CUSBGamePadStandardDevice::Configure()+0x3c>
   12dc4:	e1a00004 	mov	r0, r4
   12dc8:	ebfffcf7 	bl	121ac <CUSBHIDDevice::StartRequest()>
   12dcc:	e1a05000 	mov	r5, r0
   12dd0:	eaffffb8 	b	12cb8 <CUSBGamePadStandardDevice::Configure()+0x3c>
   12dd4:	e5945104 	ldr	r5, [r4, #260]	; 0x104
   12dd8:	e3550000 	cmp	r5, #0
   12ddc:	1affffed 	bne	12d98 <CUSBGamePadStandardDevice::Configure()+0x11c>
   12de0:	eaffffb4 	b	12cb8 <CUSBGamePadStandardDevice::Configure()+0x3c>
   12de4:	e3a02085 	mov	r2, #133	; 0x85
   12de8:	e59f1028 	ldr	r1, [pc, #40]	; 12e18 <CUSBGamePadStandardDevice::Configure()+0x19c>
   12dec:	e59f0028 	ldr	r0, [pc, #40]	; 12e1c <CUSBGamePadStandardDevice::Configure()+0x1a0>
   12df0:	eb001f20 	bl	1aa78 <assertion_failed>
   12df4:	eaffffeb 	b	12da8 <CUSBGamePadStandardDevice::Configure()+0x12c>
   12df8:	eb002911 	bl	1d244 <CLogger::Get()>
   12dfc:	e59f301c 	ldr	r3, [pc, #28]	; 12e20 <CUSBGamePadStandardDevice::Configure()+0x1a4>
   12e00:	e3a02001 	mov	r2, #1
   12e04:	e59f1004 	ldr	r1, [pc, #4]	; 12e10 <CUSBGamePadStandardDevice::Configure()+0x194>
   12e08:	eb002ab6 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12e0c:	eaffffa9 	b	12cb8 <CUSBGamePadStandardDevice::Configure()+0x3c>
   12e10:	00025f94 	.word	0x00025f94
   12e14:	00025f2c 	.word	0x00025f2c
   12e18:	00025fa0 	.word	0x00025fa0
   12e1c:	00025fd4 	.word	0x00025fd4
   12e20:	00025fe8 	.word	0x00025fe8

00012e24 <CUSBGamePadDevice::GetProperties()>:
   12e24:	e3a00000 	mov	r0, #0
   12e28:	e12fff1e 	bx	lr

00012e2c <CUSBGamePadDevice::SetLEDMode(TGamePadLEDMode)>:
   12e2c:	e3a00000 	mov	r0, #0
   12e30:	e12fff1e 	bx	lr

00012e34 <CUSBGamePadDevice::SetLEDMode(unsigned int, unsigned char, unsigned char)>:
   12e34:	e3a00000 	mov	r0, #0
   12e38:	e12fff1e 	bx	lr

00012e3c <CUSBGamePadDevice::SetRumbleMode(TGamePadRumbleMode)>:
   12e3c:	e3a00000 	mov	r0, #0
   12e40:	e12fff1e 	bx	lr

00012e44 <CUSBGamePadPS3Device::~CUSBGamePadPS3Device()>:
   12e44:	e92d4010 	push	{r4, lr}
   12e48:	e1a04000 	mov	r4, r0
   12e4c:	e59f300c 	ldr	r3, [pc, #12]	; 12e60 <CUSBGamePadPS3Device::~CUSBGamePadPS3Device()+0x1c>
   12e50:	e5803000 	str	r3, [r0]
   12e54:	ebfffdf6 	bl	12634 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>
   12e58:	e1a00004 	mov	r0, r4
   12e5c:	e8bd8010 	pop	{r4, pc}
   12e60:	00026010 	.word	0x00026010

00012e64 <CUSBGamePadPS3Device::~CUSBGamePadPS3Device()>:
   12e64:	e92d4010 	push	{r4, lr}
   12e68:	e1a04000 	mov	r4, r0
   12e6c:	e59f3018 	ldr	r3, [pc, #24]	; 12e8c <CUSBGamePadPS3Device::~CUSBGamePadPS3Device()+0x28>
   12e70:	e5803000 	str	r3, [r0]
   12e74:	ebfffdee 	bl	12634 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>
   12e78:	e1a00004 	mov	r0, r4
   12e7c:	e3a01f5b 	mov	r1, #364	; 0x16c
   12e80:	eb003fc5 	bl	22d9c <operator delete(void*, unsigned int)>
   12e84:	e1a00004 	mov	r0, r4
   12e88:	e8bd8010 	pop	{r4, pc}
   12e8c:	00026010 	.word	0x00026010

00012e90 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)>:
   12e90:	e92d4070 	push	{r4, r5, r6, lr}
   12e94:	e1a05001 	mov	r5, r1
   12e98:	e24dd040 	sub	sp, sp, #64	; 0x40
   12e9c:	e2801f4f 	add	r1, r0, #316	; 0x13c
   12ea0:	e1a04000 	mov	r4, r0
   12ea4:	e3a02030 	mov	r2, #48	; 0x30
   12ea8:	e28d0010 	add	r0, sp, #16
   12eac:	eb003cba 	bl	2219c <memcpy>
   12eb0:	e3550001 	cmp	r5, #1
   12eb4:	0a00002f 	beq	12f78 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0xe8>
   12eb8:	3a000028 	bcc	12f60 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0xd0>
   12ebc:	e3550002 	cmp	r5, #2
   12ec0:	1a00001f 	bne	12f44 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0xb4>
   12ec4:	e3e03001 	mvn	r3, #1
   12ec8:	e3a01000 	mov	r1, #0
   12ecc:	e3e02000 	mvn	r2, #0
   12ed0:	e5cd3011 	strb	r3, [sp, #17]
   12ed4:	e5cd3013 	strb	r3, [sp, #19]
   12ed8:	e5cd1012 	strb	r1, [sp, #18]
   12edc:	e5cd2014 	strb	r2, [sp, #20]
   12ee0:	e1a00004 	mov	r0, r4
   12ee4:	eb0007f1 	bl	14eb0 <CUSBFunction::GetHost() const>
   12ee8:	e1a05000 	mov	r5, r0
   12eec:	e1a00004 	mov	r0, r4
   12ef0:	eb0007dd 	bl	14e6c <CUSBFunction::GetEndpoint0() const>
   12ef4:	e1a06000 	mov	r6, r0
   12ef8:	e1a00004 	mov	r0, r4
   12efc:	eb000895 	bl	15158 <CUSBFunction::GetInterfaceNumber() const>
   12f00:	e3a02030 	mov	r2, #48	; 0x30
   12f04:	e59f308c 	ldr	r3, [pc, #140]	; 12f98 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x108>
   12f08:	e28dc010 	add	ip, sp, #16
   12f0c:	e6ff0070 	uxth	r0, r0
   12f10:	e58d0004 	str	r0, [sp, #4]
   12f14:	e58d200c 	str	r2, [sp, #12]
   12f18:	e58d3000 	str	r3, [sp]
   12f1c:	e1a01006 	mov	r1, r6
   12f20:	e1a00005 	mov	r0, r5
   12f24:	e58dc008 	str	ip, [sp, #8]
   12f28:	e3a03009 	mov	r3, #9
   12f2c:	e3a02021 	mov	r2, #33	; 0x21
   12f30:	ebffeeed 	bl	eaec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   12f34:	e1e00000 	mvn	r0, r0
   12f38:	e1a00fa0 	lsr	r0, r0, #31
   12f3c:	e28dd040 	add	sp, sp, #64	; 0x40
   12f40:	e8bd8070 	pop	{r4, r5, r6, pc}
   12f44:	e59f2050 	ldr	r2, [pc, #80]	; 12f9c <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x10c>
   12f48:	e59f1050 	ldr	r1, [pc, #80]	; 12fa0 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x110>
   12f4c:	e59f0050 	ldr	r0, [pc, #80]	; 12fa4 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x114>
   12f50:	eb001ec8 	bl	1aa78 <assertion_failed>
   12f54:	e3a00000 	mov	r0, #0
   12f58:	e28dd040 	add	sp, sp, #64	; 0x40
   12f5c:	e8bd8070 	pop	{r4, r5, r6, pc}
   12f60:	e3a03000 	mov	r3, #0
   12f64:	e5cd3011 	strb	r3, [sp, #17]
   12f68:	e5cd3012 	strb	r3, [sp, #18]
   12f6c:	e5cd3013 	strb	r3, [sp, #19]
   12f70:	e5cd3014 	strb	r3, [sp, #20]
   12f74:	eaffffd9 	b	12ee0 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x50>
   12f78:	e3e03001 	mvn	r3, #1
   12f7c:	e3e01000 	mvn	r1, #0
   12f80:	e3a02000 	mov	r2, #0
   12f84:	e5cd3011 	strb	r3, [sp, #17]
   12f88:	e5cd3013 	strb	r3, [sp, #19]
   12f8c:	e5cd1012 	strb	r1, [sp, #18]
   12f90:	e5cd2014 	strb	r2, [sp, #20]
   12f94:	eaffffd1 	b	12ee0 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x50>
   12f98:	00000201 	.word	0x00000201
   12f9c:	0000010d 	.word	0x0000010d
   12fa0:	000260c4 	.word	0x000260c4
   12fa4:	00025034 	.word	0x00025034

00012fa8 <CUSBGamePadPS3Device::SetLEDMode(TGamePadLEDMode)>:
   12fa8:	e351000a 	cmp	r1, #10
   12fac:	9a000001 	bls	12fb8 <CUSBGamePadPS3Device::SetLEDMode(TGamePadLEDMode)+0x10>
   12fb0:	e3a00000 	mov	r0, #0
   12fb4:	e12fff1e 	bx	lr
   12fb8:	e59f3078 	ldr	r3, [pc, #120]	; 13038 <CUSBGamePadPS3Device::SetLEDMode(TGamePadLEDMode)+0x90>
   12fbc:	e92d4070 	push	{r4, r5, r6, lr}
   12fc0:	e0831001 	add	r1, r3, r1
   12fc4:	e5d13044 	ldrb	r3, [r1, #68]	; 0x44
   12fc8:	e24dd010 	sub	sp, sp, #16
   12fcc:	e1a03083 	lsl	r3, r3, #1
   12fd0:	e5c03145 	strb	r3, [r0, #325]	; 0x145
   12fd4:	e1a04000 	mov	r4, r0
   12fd8:	eb0007b4 	bl	14eb0 <CUSBFunction::GetHost() const>
   12fdc:	e1a05000 	mov	r5, r0
   12fe0:	e1a00004 	mov	r0, r4
   12fe4:	eb0007a0 	bl	14e6c <CUSBFunction::GetEndpoint0() const>
   12fe8:	e1a06000 	mov	r6, r0
   12fec:	e1a00004 	mov	r0, r4
   12ff0:	eb000858 	bl	15158 <CUSBFunction::GetInterfaceNumber() const>
   12ff4:	e3a02030 	mov	r2, #48	; 0x30
   12ff8:	e59f303c 	ldr	r3, [pc, #60]	; 1303c <CUSBGamePadPS3Device::SetLEDMode(TGamePadLEDMode)+0x94>
   12ffc:	e6ff0070 	uxth	r0, r0
   13000:	e2844f4f 	add	r4, r4, #316	; 0x13c
   13004:	e58d0004 	str	r0, [sp, #4]
   13008:	e58d200c 	str	r2, [sp, #12]
   1300c:	e58d3000 	str	r3, [sp]
   13010:	e1a01006 	mov	r1, r6
   13014:	e1a00005 	mov	r0, r5
   13018:	e58d4008 	str	r4, [sp, #8]
   1301c:	e3a03009 	mov	r3, #9
   13020:	e3a02021 	mov	r2, #33	; 0x21
   13024:	ebffeeb0 	bl	eaec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   13028:	e1e00000 	mvn	r0, r0
   1302c:	e1a00fa0 	lsr	r0, r0, #31
   13030:	e28dd010 	add	sp, sp, #16
   13034:	e8bd8070 	pop	{r4, r5, r6, pc}
   13038:	00026008 	.word	0x00026008
   1303c:	00000201 	.word	0x00000201

00013040 <CUSBGamePadPS3Device::CUSBGamePadPS3Device(CUSBFunction*)>:
   13040:	e92d4070 	push	{r4, r5, r6, lr}
   13044:	e3a02000 	mov	r2, #0
   13048:	e1a04000 	mov	r4, r0
   1304c:	ebfffd8f 	bl	12690 <CUSBGamePadStandardDevice::CUSBGamePadStandardDevice(CUSBFunction*, bool)>
   13050:	e3a03000 	mov	r3, #0
   13054:	e59f5030 	ldr	r5, [pc, #48]	; 1308c <CUSBGamePadPS3Device::CUSBGamePadPS3Device(CUSBFunction*)+0x4c>
   13058:	e1a00004 	mov	r0, r4
   1305c:	e2852008 	add	r2, r5, #8
   13060:	e5842000 	str	r2, [r4]
   13064:	e3a01003 	mov	r1, #3
   13068:	e1a02003 	mov	r2, r3
   1306c:	eb000800 	bl	15074 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)>
   13070:	e2851050 	add	r1, r5, #80	; 0x50
   13074:	e5c4013a 	strb	r0, [r4, #314]	; 0x13a
   13078:	e3a02030 	mov	r2, #48	; 0x30
   1307c:	e2840f4f 	add	r0, r4, #316	; 0x13c
   13080:	eb003c45 	bl	2219c <memcpy>
   13084:	e1a00004 	mov	r0, r4
   13088:	e8bd8070 	pop	{r4, r5, r6, pc}
   1308c:	00026008 	.word	0x00026008

00013090 <CUSBGamePadPS3Device::PS3Enable()>:
   13090:	e92d4070 	push	{r4, r5, r6, lr}
   13094:	e24dd010 	sub	sp, sp, #16
   13098:	e1a04000 	mov	r4, r0
   1309c:	eb000783 	bl	14eb0 <CUSBFunction::GetHost() const>
   130a0:	e1a05000 	mov	r5, r0
   130a4:	e1a00004 	mov	r0, r4
   130a8:	eb00076f 	bl	14e6c <CUSBFunction::GetEndpoint0() const>
   130ac:	e1a06000 	mov	r6, r0
   130b0:	e1a00004 	mov	r0, r4
   130b4:	eb000827 	bl	15158 <CUSBFunction::GetInterfaceNumber() const>
   130b8:	e3a0c004 	mov	ip, #4
   130bc:	e3a02ffd 	mov	r2, #1012	; 0x3f4
   130c0:	e59f3054 	ldr	r3, [pc, #84]	; 1311c <CUSBGamePadPS3Device::PS3Enable()+0x8c>
   130c4:	e6ff0070 	uxth	r0, r0
   130c8:	e58d0004 	str	r0, [sp, #4]
   130cc:	e58d2000 	str	r2, [sp]
   130d0:	e58d3008 	str	r3, [sp, #8]
   130d4:	e1a01006 	mov	r1, r6
   130d8:	e1a00005 	mov	r0, r5
   130dc:	e58dc00c 	str	ip, [sp, #12]
   130e0:	e3a03009 	mov	r3, #9
   130e4:	e3a02021 	mov	r2, #33	; 0x21
   130e8:	ebffee7f 	bl	eaec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   130ec:	e3500000 	cmp	r0, #0
   130f0:	ba000006 	blt	13110 <CUSBGamePadPS3Device::PS3Enable()+0x80>
   130f4:	e1a00004 	mov	r0, r4
   130f8:	e5943000 	ldr	r3, [r4]
   130fc:	e5d4112c 	ldrb	r1, [r4, #300]	; 0x12c
   13100:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   13104:	e28dd010 	add	sp, sp, #16
   13108:	e8bd4070 	pop	{r4, r5, r6, lr}
   1310c:	e12fff13 	bx	r3
   13110:	e3a00000 	mov	r0, #0
   13114:	e28dd010 	add	sp, sp, #16
   13118:	e8bd8070 	pop	{r4, r5, r6, pc}
   1311c:	0002b6cc 	.word	0x0002b6cc

00013120 <CUSBGamePadPS3Device::Configure()>:
   13120:	e92d4030 	push	{r4, r5, lr}
   13124:	e5d0513a 	ldrb	r5, [r0, #314]	; 0x13a
   13128:	e24dd00c 	sub	sp, sp, #12
   1312c:	e3550000 	cmp	r5, #0
   13130:	0a00001e 	beq	131b0 <CUSBGamePadPS3Device::Configure()+0x90>
   13134:	e1a04000 	mov	r4, r0
   13138:	ebfffecf 	bl	12c7c <CUSBGamePadStandardDevice::Configure()>
   1313c:	e2505000 	subs	r5, r0, #0
   13140:	0a00002a 	beq	131f0 <CUSBGamePadPS3Device::Configure()+0xd0>
   13144:	e2845f4a 	add	r5, r4, #296	; 0x128
   13148:	e1d530b0 	ldrh	r3, [r5]
   1314c:	e2433031 	sub	r3, r3, #49	; 0x31
   13150:	e3530001 	cmp	r3, #1
   13154:	8a00001a 	bhi	131c4 <CUSBGamePadPS3Device::Configure()+0xa4>
   13158:	e3a01010 	mov	r1, #16
   1315c:	e3a0c013 	mov	ip, #19
   13160:	e1a03004 	mov	r3, r4
   13164:	e3a02000 	mov	r2, #0
   13168:	e3a000ff 	mov	r0, #255	; 0xff
   1316c:	e5841024 	str	r1, [r4, #36]	; 0x24
   13170:	e584c104 	str	ip, [r4, #260]	; 0x104
   13174:	e28410c0 	add	r1, r4, #192	; 0xc0
   13178:	e583202c 	str	r2, [r3, #44]	; 0x2c
   1317c:	e5830030 	str	r0, [r3, #48]	; 0x30
   13180:	e283300c 	add	r3, r3, #12
   13184:	e1530001 	cmp	r3, r1
   13188:	1afffffa 	bne	13178 <CUSBGamePadPS3Device::Configure()+0x58>
   1318c:	e58420e8 	str	r2, [r4, #232]	; 0xe8
   13190:	e1a00004 	mov	r0, r4
   13194:	ebffffbd 	bl	13090 <CUSBGamePadPS3Device::PS3Enable()>
   13198:	e2505000 	subs	r5, r0, #0
   1319c:	0a00001b 	beq	13210 <CUSBGamePadPS3Device::Configure()+0xf0>
   131a0:	e1a00004 	mov	r0, r4
   131a4:	e28dd00c 	add	sp, sp, #12
   131a8:	e8bd4030 	pop	{r4, r5, lr}
   131ac:	eafffbfe 	b	121ac <CUSBHIDDevice::StartRequest()>
   131b0:	e59f1078 	ldr	r1, [pc, #120]	; 13230 <CUSBGamePadPS3Device::Configure()+0x110>
   131b4:	eb000792 	bl	15004 <CUSBFunction::ConfigurationError(char const*) const>
   131b8:	e1a00005 	mov	r0, r5
   131bc:	e28dd00c 	add	sp, sp, #12
   131c0:	e8bd8030 	pop	{r4, r5, pc}
   131c4:	eb00281e 	bl	1d244 <CLogger::Get()>
   131c8:	e1d520b0 	ldrh	r2, [r5]
   131cc:	e3a05000 	mov	r5, #0
   131d0:	e58d2000 	str	r2, [sp]
   131d4:	e59f3058 	ldr	r3, [pc, #88]	; 13234 <CUSBGamePadPS3Device::Configure()+0x114>
   131d8:	e3a02001 	mov	r2, #1
   131dc:	e59f104c 	ldr	r1, [pc, #76]	; 13230 <CUSBGamePadPS3Device::Configure()+0x110>
   131e0:	eb0029c0 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   131e4:	e1a00005 	mov	r0, r5
   131e8:	e28dd00c 	add	sp, sp, #12
   131ec:	e8bd8030 	pop	{r4, r5, pc}
   131f0:	eb002813 	bl	1d244 <CLogger::Get()>
   131f4:	e59f303c 	ldr	r3, [pc, #60]	; 13238 <CUSBGamePadPS3Device::Configure()+0x118>
   131f8:	e3a02001 	mov	r2, #1
   131fc:	e59f102c 	ldr	r1, [pc, #44]	; 13230 <CUSBGamePadPS3Device::Configure()+0x110>
   13200:	eb0029b8 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13204:	e1a00005 	mov	r0, r5
   13208:	e28dd00c 	add	sp, sp, #12
   1320c:	e8bd8030 	pop	{r4, r5, pc}
   13210:	eb00280b 	bl	1d244 <CLogger::Get()>
   13214:	e59f3020 	ldr	r3, [pc, #32]	; 1323c <CUSBGamePadPS3Device::Configure()+0x11c>
   13218:	e3a02001 	mov	r2, #1
   1321c:	e59f100c 	ldr	r1, [pc, #12]	; 13230 <CUSBGamePadPS3Device::Configure()+0x110>
   13220:	eb0029b0 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13224:	e1a00005 	mov	r0, r5
   13228:	e28dd00c 	add	sp, sp, #12
   1322c:	e8bd8030 	pop	{r4, r5, pc}
   13230:	00026088 	.word	0x00026088
   13234:	000260d8 	.word	0x000260d8
   13238:	00025fe8 	.word	0x00025fe8
   1323c:	000260f4 	.word	0x000260f4

00013240 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)>:
   13240:	e2803f4a 	add	r3, r0, #296	; 0x128
   13244:	e1d330b0 	ldrh	r3, [r3]
   13248:	e92d4070 	push	{r4, r5, r6, lr}
   1324c:	e3530031 	cmp	r3, #49	; 0x31
   13250:	e1a04000 	mov	r4, r0
   13254:	e1a05001 	mov	r5, r1
   13258:	0a000007 	beq	1327c <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x3c>
   1325c:	e3530032 	cmp	r3, #50	; 0x32
   13260:	0a000043 	beq	13374 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x134>
   13264:	e3530000 	cmp	r3, #0
   13268:	0a00003f 	beq	1336c <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x12c>
   1326c:	e3a02091 	mov	r2, #145	; 0x91
   13270:	e59f1118 	ldr	r1, [pc, #280]	; 13390 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x150>
   13274:	e59f0118 	ldr	r0, [pc, #280]	; 13394 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x154>
   13278:	eb001dfe 	bl	1aa78 <assertion_failed>
   1327c:	e3550000 	cmp	r5, #0
   13280:	0a00003d 	beq	1337c <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x13c>
   13284:	e5d50003 	ldrb	r0, [r5, #3]
   13288:	e5d52002 	ldrb	r2, [r5, #2]
   1328c:	e5d51004 	ldrb	r1, [r5, #4]
   13290:	e1822400 	orr	r2, r2, r0, lsl #8
   13294:	e5d50005 	ldrb	r0, [r5, #5]
   13298:	e1822801 	orr	r2, r2, r1, lsl #16
   1329c:	e59f10f4 	ldr	r1, [pc, #244]	; 13398 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x158>
   132a0:	e1822c00 	orr	r2, r2, r0, lsl #24
   132a4:	e59f00f0 	ldr	r0, [pc, #240]	; 1339c <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x15c>
   132a8:	e1a0c682 	lsl	ip, r2, #13
   132ac:	e00112a2 	and	r1, r1, r2, lsr #5
   132b0:	e1811eac 	orr	r1, r1, ip, lsr #29
   132b4:	e0002582 	and	r2, r0, r2, lsl #11
   132b8:	e1812002 	orr	r2, r1, r2
   132bc:	e5842108 	str	r2, [r4, #264]	; 0x108
   132c0:	e5d52006 	ldrb	r2, [r5, #6]
   132c4:	e3a03006 	mov	r3, #6
   132c8:	e5842028 	str	r2, [r4, #40]	; 0x28
   132cc:	e5d51007 	ldrb	r1, [r5, #7]
   132d0:	e59f00c8 	ldr	r0, [pc, #200]	; 133a0 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x160>
   132d4:	e5841034 	str	r1, [r4, #52]	; 0x34
   132d8:	e5d51008 	ldrb	r1, [r5, #8]
   132dc:	e285200d 	add	r2, r5, #13
   132e0:	e5841040 	str	r1, [r4, #64]	; 0x40
   132e4:	e5d51009 	ldrb	r1, [r5, #9]
   132e8:	e285c019 	add	ip, r5, #25
   132ec:	e584104c 	str	r1, [r4, #76]	; 0x4c
   132f0:	ea000000 	b	132f8 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0xb8>
   132f4:	e5b03004 	ldr	r3, [r0, #4]!
   132f8:	e5f21001 	ldrb	r1, [r2, #1]!
   132fc:	e0833083 	add	r3, r3, r3, lsl #1
   13300:	e0843103 	add	r3, r4, r3, lsl #2
   13304:	e15c0002 	cmp	ip, r2
   13308:	e5831028 	str	r1, [r3, #40]	; 0x28
   1330c:	1afffff8 	bne	132f4 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0xb4>
   13310:	e3a01000 	mov	r1, #0
   13314:	e59fc088 	ldr	ip, [pc, #136]	; 133a4 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x164>
   13318:	e2840f43 	add	r0, r4, #268	; 0x10c
   1331c:	e2812014 	add	r2, r1, #20
   13320:	e0852082 	add	r2, r5, r2, lsl #1
   13324:	e5d23001 	ldrb	r3, [r2, #1]
   13328:	e5d22002 	ldrb	r2, [r2, #2]
   1332c:	e2811001 	add	r1, r1, #1
   13330:	e1833402 	orr	r3, r3, r2, lsl #8
   13334:	e6bf3fb3 	rev16	r3, r3
   13338:	e6ff3073 	uxth	r3, r3
   1333c:	e04c3003 	sub	r3, ip, r3
   13340:	e3510003 	cmp	r1, #3
   13344:	e4803004 	str	r3, [r0], #4
   13348:	1afffff3 	bne	1331c <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0xdc>
   1334c:	e5d5302f 	ldrb	r3, [r5, #47]	; 0x2f
   13350:	e5d52030 	ldrb	r2, [r5, #48]	; 0x30
   13354:	e1833402 	orr	r3, r3, r2, lsl #8
   13358:	e6bf3fb3 	rev16	r3, r3
   1335c:	e6ff3073 	uxth	r3, r3
   13360:	e2433006 	sub	r3, r3, #6
   13364:	e5843120 	str	r3, [r4, #288]	; 0x120
   13368:	e8bd8070 	pop	{r4, r5, r6, pc}
   1336c:	e8bd4070 	pop	{r4, r5, r6, lr}
   13370:	eafffd20 	b	127f8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)>
   13374:	e2815001 	add	r5, r1, #1
   13378:	eaffffbf 	b	1327c <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x3c>
   1337c:	e3a02096 	mov	r2, #150	; 0x96
   13380:	e59f1008 	ldr	r1, [pc, #8]	; 13390 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x150>
   13384:	e59f001c 	ldr	r0, [pc, #28]	; 133a8 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x168>
   13388:	eb001dba 	bl	1aa78 <assertion_failed>
   1338c:	eaffffbc 	b	13284 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x44>
   13390:	000260c4 	.word	0x000260c4
   13394:	00025034 	.word	0x00025034
   13398:	000007f8 	.word	0x000007f8
   1339c:	0007f800 	.word	0x0007f800
   133a0:	00026094 	.word	0x00026094
   133a4:	000001ff 	.word	0x000001ff
   133a8:	00026114 	.word	0x00026114

000133ac <CUSBGamePadPS3Device::GetProperties()>:
   133ac:	e3a0001b 	mov	r0, #27
   133b0:	e12fff1e 	bx	lr

000133b4 <CUSBGamePadPS4Device::DecodeReport(unsigned char const*)>:
   133b4:	e5d13001 	ldrb	r3, [r1, #1]
   133b8:	e5d12005 	ldrb	r2, [r1, #5]
   133bc:	e5803028 	str	r3, [r0, #40]	; 0x28
   133c0:	e5d13002 	ldrb	r3, [r1, #2]
   133c4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   133c8:	e5803034 	str	r3, [r0, #52]	; 0x34
   133cc:	e5d13003 	ldrb	r3, [r1, #3]
   133d0:	e59fc18c 	ldr	ip, [pc, #396]	; 13564 <CUSBGamePadPS4Device::DecodeReport(unsigned char const*)+0x1b0>
   133d4:	e5803040 	str	r3, [r0, #64]	; 0x40
   133d8:	e5d1e004 	ldrb	lr, [r1, #4]
   133dc:	e5d13005 	ldrb	r3, [r1, #5]
   133e0:	e580e04c 	str	lr, [r0, #76]	; 0x4c
   133e4:	e202200f 	and	r2, r2, #15
   133e8:	e5d1e008 	ldrb	lr, [r1, #8]
   133ec:	e79cc102 	ldr	ip, [ip, r2, lsl #2]
   133f0:	e3130080 	tst	r3, #128	; 0x80
   133f4:	e580e058 	str	lr, [r0, #88]	; 0x58
   133f8:	e5d1e009 	ldrb	lr, [r1, #9]
   133fc:	e580c108 	str	ip, [r0, #264]	; 0x108
   13400:	138cc080 	orrne	ip, ip, #128	; 0x80
   13404:	1580c108 	strne	ip, [r0, #264]	; 0x108
   13408:	e3130040 	tst	r3, #64	; 0x40
   1340c:	e58020ec 	str	r2, [r0, #236]	; 0xec
   13410:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   13414:	e580e064 	str	lr, [r0, #100]	; 0x64
   13418:	13822c01 	orrne	r2, r2, #256	; 0x100
   1341c:	15802108 	strne	r2, [r0, #264]	; 0x108
   13420:	e3130020 	tst	r3, #32
   13424:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   13428:	13822c02 	orrne	r2, r2, #512	; 0x200
   1342c:	15802108 	strne	r2, [r0, #264]	; 0x108
   13430:	e3130010 	tst	r3, #16
   13434:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   13438:	13833b01 	orrne	r3, r3, #1024	; 0x400
   1343c:	15803108 	strne	r3, [r0, #264]	; 0x108
   13440:	e5d13006 	ldrb	r3, [r1, #6]
   13444:	e3130080 	tst	r3, #128	; 0x80
   13448:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   1344c:	13822a02 	orrne	r2, r2, #8192	; 0x2000
   13450:	15802108 	strne	r2, [r0, #264]	; 0x108
   13454:	e3130040 	tst	r3, #64	; 0x40
   13458:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   1345c:	13822a01 	orrne	r2, r2, #4096	; 0x1000
   13460:	15802108 	strne	r2, [r0, #264]	; 0x108
   13464:	e3130020 	tst	r3, #32
   13468:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   1346c:	13822901 	orrne	r2, r2, #16384	; 0x4000
   13470:	15802108 	strne	r2, [r0, #264]	; 0x108
   13474:	e3130010 	tst	r3, #16
   13478:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   1347c:	13822b02 	orrne	r2, r2, #2048	; 0x800
   13480:	15802108 	strne	r2, [r0, #264]	; 0x108
   13484:	e3130008 	tst	r3, #8
   13488:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   1348c:	13822010 	orrne	r2, r2, #16
   13490:	15802108 	strne	r2, [r0, #264]	; 0x108
   13494:	e3130004 	tst	r3, #4
   13498:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   1349c:	13822008 	orrne	r2, r2, #8
   134a0:	15802108 	strne	r2, [r0, #264]	; 0x108
   134a4:	e3130002 	tst	r3, #2
   134a8:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   134ac:	13822040 	orrne	r2, r2, #64	; 0x40
   134b0:	15802108 	strne	r2, [r0, #264]	; 0x108
   134b4:	e3130001 	tst	r3, #1
   134b8:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   134bc:	13833020 	orrne	r3, r3, #32
   134c0:	15803108 	strne	r3, [r0, #264]	; 0x108
   134c4:	e5d13007 	ldrb	r3, [r1, #7]
   134c8:	e3130002 	tst	r3, #2
   134cc:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   134d0:	13822602 	orrne	r2, r2, #2097152	; 0x200000
   134d4:	15802108 	strne	r2, [r0, #264]	; 0x108
   134d8:	e3130001 	tst	r3, #1
   134dc:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   134e0:	13833001 	orrne	r3, r3, #1
   134e4:	15803108 	strne	r3, [r0, #264]	; 0x108
   134e8:	e5d12014 	ldrb	r2, [r1, #20]
   134ec:	e5d13013 	ldrb	r3, [r1, #19]
   134f0:	e1833402 	orr	r3, r3, r2, lsl #8
   134f4:	e6bf3073 	sxth	r3, r3
   134f8:	e580310c 	str	r3, [r0, #268]	; 0x10c
   134fc:	e5d12018 	ldrb	r2, [r1, #24]
   13500:	e5d13017 	ldrb	r3, [r1, #23]
   13504:	e1833402 	orr	r3, r3, r2, lsl #8
   13508:	e6bf3073 	sxth	r3, r3
   1350c:	e5803110 	str	r3, [r0, #272]	; 0x110
   13510:	e5d12016 	ldrb	r2, [r1, #22]
   13514:	e5d13015 	ldrb	r3, [r1, #21]
   13518:	e1833402 	orr	r3, r3, r2, lsl #8
   1351c:	e6bf3073 	sxth	r3, r3
   13520:	e5803114 	str	r3, [r0, #276]	; 0x114
   13524:	e5d12012 	ldrb	r2, [r1, #18]
   13528:	e5d13011 	ldrb	r3, [r1, #17]
   1352c:	e1833402 	orr	r3, r3, r2, lsl #8
   13530:	e6bf3073 	sxth	r3, r3
   13534:	e5803118 	str	r3, [r0, #280]	; 0x118
   13538:	e5d1200e 	ldrb	r2, [r1, #14]
   1353c:	e5d1300d 	ldrb	r3, [r1, #13]
   13540:	e1833402 	orr	r3, r3, r2, lsl #8
   13544:	e6bf3073 	sxth	r3, r3
   13548:	e580311c 	str	r3, [r0, #284]	; 0x11c
   1354c:	e5d1300f 	ldrb	r3, [r1, #15]
   13550:	e5d12010 	ldrb	r2, [r1, #16]
   13554:	e1833402 	orr	r3, r3, r2, lsl #8
   13558:	e6bf3073 	sxth	r3, r3
   1355c:	e5803120 	str	r3, [r0, #288]	; 0x120
   13560:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   13564:	00026124 	.word	0x00026124

00013568 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()>:
   13568:	e92d4010 	push	{r4, lr}
   1356c:	e1a04000 	mov	r4, r0
   13570:	e5900140 	ldr	r0, [r0, #320]	; 0x140
   13574:	e59f3034 	ldr	r3, [pc, #52]	; 135b0 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()+0x48>
   13578:	e3500000 	cmp	r0, #0
   1357c:	e5843000 	str	r3, [r4]
   13580:	0a000002 	beq	13590 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()+0x28>
   13584:	e5903000 	ldr	r3, [r0]
   13588:	e5933004 	ldr	r3, [r3, #4]
   1358c:	e12fff33 	blx	r3
   13590:	e594013c 	ldr	r0, [r4, #316]	; 0x13c
   13594:	e3500000 	cmp	r0, #0
   13598:	0a000000 	beq	135a0 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()+0x38>
   1359c:	eb003dfd 	bl	22d98 <operator delete[](void*)>
   135a0:	e1a00004 	mov	r0, r4
   135a4:	eb0017a0 	bl	1942c <CUSBGamePadDevice::~CUSBGamePadDevice()>
   135a8:	e1a00004 	mov	r0, r4
   135ac:	e8bd8010 	pop	{r4, pc}
   135b0:	00026150 	.word	0x00026150

000135b4 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()>:
   135b4:	e92d4010 	push	{r4, lr}
   135b8:	e1a04000 	mov	r4, r0
   135bc:	ebffffe9 	bl	13568 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()>
   135c0:	e1a00004 	mov	r0, r4
   135c4:	e3a01f53 	mov	r1, #332	; 0x14c
   135c8:	eb003df3 	bl	22d9c <operator delete(void*, unsigned int)>
   135cc:	e1a00004 	mov	r0, r4
   135d0:	e8bd8010 	pop	{r4, pc}

000135d4 <CUSBGamePadPS4Device::CUSBGamePadPS4Device(CUSBFunction*)>:
   135d4:	e92d4010 	push	{r4, lr}
   135d8:	e1a04000 	mov	r4, r0
   135dc:	eb001780 	bl	193e4 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   135e0:	e3a03000 	mov	r3, #0
   135e4:	e59f2030 	ldr	r2, [pc, #48]	; 1361c <CUSBGamePadPS4Device::CUSBGamePadPS4Device(CUSBFunction*)+0x48>
   135e8:	e1a00004 	mov	r0, r4
   135ec:	e5842000 	str	r2, [r4]
   135f0:	e3a01003 	mov	r1, #3
   135f4:	e1a02003 	mov	r2, r3
   135f8:	eb00069d 	bl	15074 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)>
   135fc:	e3a03000 	mov	r3, #0
   13600:	e5c40130 	strb	r0, [r4, #304]	; 0x130
   13604:	e584313c 	str	r3, [r4, #316]	; 0x13c
   13608:	e5843140 	str	r3, [r4, #320]	; 0x140
   1360c:	e5c43144 	strb	r3, [r4, #324]	; 0x144
   13610:	e5c43145 	strb	r3, [r4, #325]	; 0x145
   13614:	e1a00004 	mov	r0, r4
   13618:	e8bd8010 	pop	{r4, pc}
   1361c:	00026150 	.word	0x00026150

00013620 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)>:
   13620:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13624:	e5d13007 	ldrb	r3, [r1, #7]
   13628:	e24dd008 	sub	sp, sp, #8
   1362c:	e2133002 	ands	r3, r3, #2
   13630:	e1a06001 	mov	r6, r1
   13634:	e1a05000 	mov	r5, r0
   13638:	e5d02144 	ldrb	r2, [r0, #324]	; 0x144
   1363c:	1a00004f 	bne	13780 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x160>
   13640:	e3520000 	cmp	r2, #0
   13644:	1a000050 	bne	1378c <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x16c>
   13648:	e5d67021 	ldrb	r7, [r6, #33]	; 0x21
   1364c:	e5d64023 	ldrb	r4, [r6, #35]	; 0x23
   13650:	e2473001 	sub	r3, r7, #1
   13654:	e3530002 	cmp	r3, #2
   13658:	83a07001 	movhi	r7, #1
   1365c:	e1b043a4 	lsrs	r4, r4, #7
   13660:	1a00004e 	bne	137a0 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x180>
   13664:	e1a03004 	mov	r3, r4
   13668:	e5d50145 	ldrb	r0, [r5, #325]	; 0x145
   1366c:	e0833004 	add	r3, r3, r4
   13670:	e3500000 	cmp	r0, #0
   13674:	e0863003 	add	r3, r6, r3
   13678:	1a000025 	bne	13714 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xf4>
   1367c:	e5d3e025 	ldrb	lr, [r3, #37]	; 0x25
   13680:	e5d3c024 	ldrb	ip, [r3, #36]	; 0x24
   13684:	e5d31026 	ldrb	r1, [r3, #38]	; 0x26
   13688:	e20e300f 	and	r3, lr, #15
   1368c:	e18cc403 	orr	ip, ip, r3, lsl #8
   13690:	e1a08000 	mov	r8, r0
   13694:	e1a03000 	mov	r3, r0
   13698:	e1a01201 	lsl	r1, r1, #4
   1369c:	e181122e 	orr	r1, r1, lr, lsr #4
   136a0:	e2859f51 	add	r9, r5, #324	; 0x144
   136a4:	e285ef52 	add	lr, r5, #328	; 0x148
   136a8:	e3a0a001 	mov	sl, #1
   136ac:	e1902002 	orrs	r2, r0, r2
   136b0:	e5c5a145 	strb	sl, [r5, #325]	; 0x145
   136b4:	e1c9c0b2 	strh	ip, [r9, #2]
   136b8:	e1ce10b0 	strh	r1, [lr]
   136bc:	0a000005 	beq	136d8 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xb8>
   136c0:	e5950140 	ldr	r0, [r5, #320]	; 0x140
   136c4:	e3500000 	cmp	r0, #0
   136c8:	0a00003e 	beq	137c8 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x1a8>
   136cc:	e1a02008 	mov	r2, r8
   136d0:	e5d51144 	ldrb	r1, [r5, #324]	; 0x144
   136d4:	eb001990 	bl	19d1c <CMouseDevice::ReportHandler(unsigned int, int, int)>
   136d8:	e3a01000 	mov	r1, #0
   136dc:	e2844001 	add	r4, r4, #1
   136e0:	e1a03184 	lsl	r3, r4, #3
   136e4:	e0832004 	add	r2, r3, r4
   136e8:	e1570004 	cmp	r7, r4
   136ec:	e0862002 	add	r2, r6, r2
   136f0:	0a000005 	beq	1370c <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xec>
   136f4:	e5d20023 	ldrb	r0, [r2, #35]	; 0x23
   136f8:	e1a02001 	mov	r2, r1
   136fc:	e1b003a0 	lsrs	r0, r0, #7
   13700:	0affffd8 	beq	13668 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x48>
   13704:	e5c51145 	strb	r1, [r5, #325]	; 0x145
   13708:	eafffff3 	b	136dc <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xbc>
   1370c:	e28dd008 	add	sp, sp, #8
   13710:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13714:	e5d3a025 	ldrb	sl, [r3, #37]	; 0x25
   13718:	e5d3c024 	ldrb	ip, [r3, #36]	; 0x24
   1371c:	e2859f51 	add	r9, r5, #324	; 0x144
   13720:	e20a100f 	and	r1, sl, #15
   13724:	e1d980b2 	ldrh	r8, [r9, #2]
   13728:	e18cc401 	orr	ip, ip, r1, lsl #8
   1372c:	e04c8008 	sub	r8, ip, r8
   13730:	e358007f 	cmp	r8, #127	; 0x7f
   13734:	e3e0007e 	mvn	r0, #126	; 0x7e
   13738:	a3a0807f 	movge	r8, #127	; 0x7f
   1373c:	e5d31026 	ldrb	r1, [r3, #38]	; 0x26
   13740:	e285ef52 	add	lr, r5, #328	; 0x148
   13744:	e1a01201 	lsl	r1, r1, #4
   13748:	e1de30b0 	ldrh	r3, [lr]
   1374c:	e181122a 	orr	r1, r1, sl, lsr #4
   13750:	e0413003 	sub	r3, r1, r3
   13754:	e1580000 	cmp	r8, r0
   13758:	b1a08000 	movlt	r8, r0
   1375c:	e353007f 	cmp	r3, #127	; 0x7f
   13760:	a3a0307f 	movge	r3, #127	; 0x7f
   13764:	e1530000 	cmp	r3, r0
   13768:	b1a03000 	movlt	r3, r0
   1376c:	e3580000 	cmp	r8, #0
   13770:	03530000 	cmpeq	r3, #0
   13774:	13a00001 	movne	r0, #1
   13778:	03a00000 	moveq	r0, #0
   1377c:	eaffffc9 	b	136a8 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x88>
   13780:	e3520000 	cmp	r2, #0
   13784:	13a02000 	movne	r2, #0
   13788:	1affffae 	bne	13648 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x28>
   1378c:	e2933000 	adds	r3, r3, #0
   13790:	13a03001 	movne	r3, #1
   13794:	e3a02001 	mov	r2, #1
   13798:	e5c53144 	strb	r3, [r5, #324]	; 0x144
   1379c:	eaffffa9 	b	13648 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x28>
   137a0:	e3a04000 	mov	r4, #0
   137a4:	e1520004 	cmp	r2, r4
   137a8:	e5c54145 	strb	r4, [r5, #325]	; 0x145
   137ac:	01a04002 	moveq	r4, r2
   137b0:	0affffc8 	beq	136d8 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xb8>
   137b4:	e5950140 	ldr	r0, [r5, #320]	; 0x140
   137b8:	e1a03004 	mov	r3, r4
   137bc:	e3500000 	cmp	r0, #0
   137c0:	e1a08004 	mov	r8, r4
   137c4:	1affffc0 	bne	136cc <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xac>
   137c8:	e59f0018 	ldr	r0, [pc, #24]	; 137e8 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x1c8>
   137cc:	e59f2018 	ldr	r2, [pc, #24]	; 137ec <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x1cc>
   137d0:	e59f1018 	ldr	r1, [pc, #24]	; 137f0 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x1d0>
   137d4:	e58d3004 	str	r3, [sp, #4]
   137d8:	eb001ca6 	bl	1aa78 <assertion_failed>
   137dc:	e5950140 	ldr	r0, [r5, #320]	; 0x140
   137e0:	e59d3004 	ldr	r3, [sp, #4]
   137e4:	eaffffb8 	b	136cc <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xac>
   137e8:	000261ac 	.word	0x000261ac
   137ec:	0000015a 	.word	0x0000015a
   137f0:	00026198 	.word	0x00026198

000137f4 <CUSBGamePadPS4Device::ReportHandler(unsigned char const*, unsigned int)>:
   137f4:	e2913000 	adds	r3, r1, #0
   137f8:	13a03001 	movne	r3, #1
   137fc:	e3520040 	cmp	r2, #64	; 0x40
   13800:	13a03000 	movne	r3, #0
   13804:	e2532000 	subs	r2, r3, #0
   13808:	012fff1e 	bxeq	lr
   1380c:	e92d4070 	push	{r4, r5, r6, lr}
   13810:	e1a04000 	mov	r4, r0
   13814:	e5903000 	ldr	r3, [r0]
   13818:	e1a05001 	mov	r5, r1
   1381c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   13820:	e12fff33 	blx	r3
   13824:	e5943124 	ldr	r3, [r4, #292]	; 0x124
   13828:	e3530000 	cmp	r3, #0
   1382c:	0a000003 	beq	13840 <CUSBGamePadPS4Device::ReportHandler(unsigned char const*, unsigned int)+0x4c>
   13830:	e594012c 	ldr	r0, [r4, #300]	; 0x12c
   13834:	e2841024 	add	r1, r4, #36	; 0x24
   13838:	e2400001 	sub	r0, r0, #1
   1383c:	e12fff33 	blx	r3
   13840:	e5943140 	ldr	r3, [r4, #320]	; 0x140
   13844:	e3530000 	cmp	r3, #0
   13848:	08bd8070 	popeq	{r4, r5, r6, pc}
   1384c:	e1a01005 	mov	r1, r5
   13850:	e1a00004 	mov	r0, r4
   13854:	e8bd4070 	pop	{r4, r5, r6, lr}
   13858:	eaffff70 	b	13620 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)>

0001385c <CUSBGamePadPS4Device::SendLedRumbleCommand()>:
   1385c:	e92d4010 	push	{r4, lr}
   13860:	e590213c 	ldr	r2, [r0, #316]	; 0x13c
   13864:	e5d0c131 	ldrb	ip, [r0, #305]	; 0x131
   13868:	e3a03000 	mov	r3, #0
   1386c:	e5c2c003 	strb	ip, [r2, #3]
   13870:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
   13874:	e5d0e133 	ldrb	lr, [r0, #307]	; 0x133
   13878:	e3a02020 	mov	r2, #32
   1387c:	e5cce004 	strb	lr, [ip, #4]
   13880:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
   13884:	e5d0e132 	ldrb	lr, [r0, #306]	; 0x132
   13888:	e5cce005 	strb	lr, [ip, #5]
   1388c:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
   13890:	e5d0e134 	ldrb	lr, [r0, #308]	; 0x134
   13894:	e5cce006 	strb	lr, [ip, #6]
   13898:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
   1389c:	e5d0e135 	ldrb	lr, [r0, #309]	; 0x135
   138a0:	e5cce007 	strb	lr, [ip, #7]
   138a4:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
   138a8:	e5d0e136 	ldrb	lr, [r0, #310]	; 0x136
   138ac:	e5cce008 	strb	lr, [ip, #8]
   138b0:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
   138b4:	e5d0e137 	ldrb	lr, [r0, #311]	; 0x137
   138b8:	e5cce009 	strb	lr, [ip, #9]
   138bc:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
   138c0:	e5d0e138 	ldrb	lr, [r0, #312]	; 0x138
   138c4:	e5cce00a 	strb	lr, [ip, #10]
   138c8:	e590113c 	ldr	r1, [r0, #316]	; 0x13c
   138cc:	ebfff9a5 	bl	11f68 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   138d0:	e2504000 	subs	r4, r0, #0
   138d4:	1a000004 	bne	138ec <CUSBGamePadPS4Device::SendLedRumbleCommand()+0x90>
   138d8:	eb002659 	bl	1d244 <CLogger::Get()>
   138dc:	e59f3010 	ldr	r3, [pc, #16]	; 138f4 <CUSBGamePadPS4Device::SendLedRumbleCommand()+0x98>
   138e0:	e3a02001 	mov	r2, #1
   138e4:	e59f100c 	ldr	r1, [pc, #12]	; 138f8 <CUSBGamePadPS4Device::SendLedRumbleCommand()+0x9c>
   138e8:	eb0027fe 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   138ec:	e1a00004 	mov	r0, r4
   138f0:	e8bd8010 	pop	{r4, pc}
   138f4:	000261c0 	.word	0x000261c0
   138f8:	0002618c 	.word	0x0002618c

000138fc <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)>:
   138fc:	e2411001 	sub	r1, r1, #1
   13900:	e3510006 	cmp	r1, #6
   13904:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
   13908:	ea000044 	b	13a20 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0x124>
   1390c:	00013948 	.word	0x00013948
   13910:	0001396c 	.word	0x0001396c
   13914:	00013990 	.word	0x00013990
   13918:	000139b4 	.word	0x000139b4
   1391c:	000139d8 	.word	0x000139d8
   13920:	000139fc 	.word	0x000139fc
   13924:	00013928 	.word	0x00013928
   13928:	e3e03000 	mvn	r3, #0
   1392c:	e3a0207f 	mov	r2, #127	; 0x7f
   13930:	e5c03134 	strb	r3, [r0, #308]	; 0x134
   13934:	e5c03135 	strb	r3, [r0, #309]	; 0x135
   13938:	e5c03136 	strb	r3, [r0, #310]	; 0x136
   1393c:	e5c03138 	strb	r3, [r0, #312]	; 0x138
   13940:	e5c02137 	strb	r2, [r0, #311]	; 0x137
   13944:	eaffffc4 	b	1385c <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   13948:	e3a02000 	mov	r2, #0
   1394c:	e3e03000 	mvn	r3, #0
   13950:	e3a0107f 	mov	r1, #127	; 0x7f
   13954:	e5c02134 	strb	r2, [r0, #308]	; 0x134
   13958:	e5c02135 	strb	r2, [r0, #309]	; 0x135
   1395c:	e5c03136 	strb	r3, [r0, #310]	; 0x136
   13960:	e5c03138 	strb	r3, [r0, #312]	; 0x138
   13964:	e5c01137 	strb	r1, [r0, #311]	; 0x137
   13968:	eaffffbb 	b	1385c <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   1396c:	e3e02000 	mvn	r2, #0
   13970:	e3a03000 	mov	r3, #0
   13974:	e3a0107f 	mov	r1, #127	; 0x7f
   13978:	e5c02134 	strb	r2, [r0, #308]	; 0x134
   1397c:	e5c02138 	strb	r2, [r0, #312]	; 0x138
   13980:	e5c03135 	strb	r3, [r0, #309]	; 0x135
   13984:	e5c03136 	strb	r3, [r0, #310]	; 0x136
   13988:	e5c01137 	strb	r1, [r0, #311]	; 0x137
   1398c:	eaffffb2 	b	1385c <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   13990:	e3e03000 	mvn	r3, #0
   13994:	e3a01000 	mov	r1, #0
   13998:	e3a0207f 	mov	r2, #127	; 0x7f
   1399c:	e5c03134 	strb	r3, [r0, #308]	; 0x134
   139a0:	e5c03136 	strb	r3, [r0, #310]	; 0x136
   139a4:	e5c03138 	strb	r3, [r0, #312]	; 0x138
   139a8:	e5c01135 	strb	r1, [r0, #309]	; 0x135
   139ac:	e5c02137 	strb	r2, [r0, #311]	; 0x137
   139b0:	eaffffa9 	b	1385c <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   139b4:	e3a02000 	mov	r2, #0
   139b8:	e3e03000 	mvn	r3, #0
   139bc:	e3a0107f 	mov	r1, #127	; 0x7f
   139c0:	e5c02134 	strb	r2, [r0, #308]	; 0x134
   139c4:	e5c02136 	strb	r2, [r0, #310]	; 0x136
   139c8:	e5c03135 	strb	r3, [r0, #309]	; 0x135
   139cc:	e5c03138 	strb	r3, [r0, #312]	; 0x138
   139d0:	e5c01137 	strb	r1, [r0, #311]	; 0x137
   139d4:	eaffffa0 	b	1385c <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   139d8:	e3e03000 	mvn	r3, #0
   139dc:	e3a01000 	mov	r1, #0
   139e0:	e3a0207f 	mov	r2, #127	; 0x7f
   139e4:	e5c01134 	strb	r1, [r0, #308]	; 0x134
   139e8:	e5c03135 	strb	r3, [r0, #309]	; 0x135
   139ec:	e5c03136 	strb	r3, [r0, #310]	; 0x136
   139f0:	e5c03138 	strb	r3, [r0, #312]	; 0x138
   139f4:	e5c02137 	strb	r2, [r0, #311]	; 0x137
   139f8:	eaffff97 	b	1385c <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   139fc:	e3e03000 	mvn	r3, #0
   13a00:	e3a01000 	mov	r1, #0
   13a04:	e3a0207f 	mov	r2, #127	; 0x7f
   13a08:	e5c03134 	strb	r3, [r0, #308]	; 0x134
   13a0c:	e5c03135 	strb	r3, [r0, #309]	; 0x135
   13a10:	e5c03138 	strb	r3, [r0, #312]	; 0x138
   13a14:	e5c01136 	strb	r1, [r0, #310]	; 0x136
   13a18:	e5c02137 	strb	r2, [r0, #311]	; 0x137
   13a1c:	eaffff8e 	b	1385c <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   13a20:	e3a03000 	mov	r3, #0
   13a24:	e5c03134 	strb	r3, [r0, #308]	; 0x134
   13a28:	e5c03135 	strb	r3, [r0, #309]	; 0x135
   13a2c:	e5c03136 	strb	r3, [r0, #310]	; 0x136
   13a30:	e5c03137 	strb	r3, [r0, #311]	; 0x137
   13a34:	e5c03138 	strb	r3, [r0, #312]	; 0x138
   13a38:	eaffff87 	b	1385c <CUSBGamePadPS4Device::SendLedRumbleCommand()>

00013a3c <CUSBGamePadPS4Device::SetLEDMode(unsigned int, unsigned char, unsigned char)>:
   13a3c:	e92d4010 	push	{r4, lr}
   13a40:	e1a04821 	lsr	r4, r1, #16
   13a44:	e1a0e421 	lsr	lr, r1, #8
   13a48:	e5c04134 	strb	r4, [r0, #308]	; 0x134
   13a4c:	e5c01136 	strb	r1, [r0, #310]	; 0x136
   13a50:	e5c0e135 	strb	lr, [r0, #309]	; 0x135
   13a54:	e5c02137 	strb	r2, [r0, #311]	; 0x137
   13a58:	e5c03138 	strb	r3, [r0, #312]	; 0x138
   13a5c:	e8bd4010 	pop	{r4, lr}
   13a60:	eaffff7d 	b	1385c <CUSBGamePadPS4Device::SendLedRumbleCommand()>

00013a64 <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)>:
   13a64:	e3510001 	cmp	r1, #1
   13a68:	0a000011 	beq	13ab4 <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)+0x50>
   13a6c:	3a00000a 	bcc	13a9c <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)+0x38>
   13a70:	e3510002 	cmp	r1, #2
   13a74:	1a000006 	bne	13a94 <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)+0x30>
   13a78:	e3e0100c 	mvn	r1, #12
   13a7c:	e3a02000 	mov	r2, #0
   13a80:	e3e03000 	mvn	r3, #0
   13a84:	e5c01131 	strb	r1, [r0, #305]	; 0x131
   13a88:	e5c02133 	strb	r2, [r0, #307]	; 0x133
   13a8c:	e5c03132 	strb	r3, [r0, #306]	; 0x132
   13a90:	eaffff71 	b	1385c <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   13a94:	e3a00001 	mov	r0, #1
   13a98:	e12fff1e 	bx	lr
   13a9c:	e3a03000 	mov	r3, #0
   13aa0:	e3e0200f 	mvn	r2, #15
   13aa4:	e5c03133 	strb	r3, [r0, #307]	; 0x133
   13aa8:	e5c02131 	strb	r2, [r0, #305]	; 0x131
   13aac:	e5c03132 	strb	r3, [r0, #306]	; 0x132
   13ab0:	eaffff69 	b	1385c <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   13ab4:	e3e0100c 	mvn	r1, #12
   13ab8:	e3e02000 	mvn	r2, #0
   13abc:	e3a03000 	mov	r3, #0
   13ac0:	e5c01131 	strb	r1, [r0, #305]	; 0x131
   13ac4:	e5c02133 	strb	r2, [r0, #307]	; 0x133
   13ac8:	e5c03132 	strb	r3, [r0, #306]	; 0x132
   13acc:	eaffff62 	b	1385c <CUSBGamePadPS4Device::SendLedRumbleCommand()>

00013ad0 <CUSBGamePadPS4Device::DisableTouchpad()>:
   13ad0:	e3a02000 	mov	r2, #0
   13ad4:	e59f3004 	ldr	r3, [pc, #4]	; 13ae0 <CUSBGamePadPS4Device::DisableTouchpad()+0x10>
   13ad8:	e5c32000 	strb	r2, [r3]
   13adc:	e12fff1e 	bx	lr
   13ae0:	0002b6d0 	.word	0x0002b6d0

00013ae4 <CUSBGamePadPS4Device::Configure()>:
   13ae4:	e92d4070 	push	{r4, r5, r6, lr}
   13ae8:	e5d05130 	ldrb	r5, [r0, #304]	; 0x130
   13aec:	e3550000 	cmp	r5, #0
   13af0:	0a00003f 	beq	13bf4 <CUSBGamePadPS4Device::Configure()+0x110>
   13af4:	e3a02040 	mov	r2, #64	; 0x40
   13af8:	e2803f4a 	add	r3, r0, #296	; 0x128
   13afc:	e1c320b0 	strh	r2, [r3]
   13b00:	e1a04000 	mov	r4, r0
   13b04:	eb001608 	bl	1932c <CUSBGamePadDevice::Configure()>
   13b08:	e2505000 	subs	r5, r0, #0
   13b0c:	0a00003c 	beq	13c04 <CUSBGamePadPS4Device::Configure()+0x120>
   13b10:	e59f3120 	ldr	r3, [pc, #288]	; 13c38 <CUSBGamePadPS4Device::Configure()+0x154>
   13b14:	e5d33000 	ldrb	r3, [r3]
   13b18:	e3530000 	cmp	r3, #0
   13b1c:	1a00003f 	bne	13c20 <CUSBGamePadPS4Device::Configure()+0x13c>
   13b20:	e3a02006 	mov	r2, #6
   13b24:	e3a0c00e 	mov	ip, #14
   13b28:	e3a00001 	mov	r0, #1
   13b2c:	e1a03004 	mov	r3, r4
   13b30:	e3a05000 	mov	r5, #0
   13b34:	e3a010ff 	mov	r1, #255	; 0xff
   13b38:	e5842024 	str	r2, [r4, #36]	; 0x24
   13b3c:	e584c104 	str	ip, [r4, #260]	; 0x104
   13b40:	e58400e8 	str	r0, [r4, #232]	; 0xe8
   13b44:	e2842048 	add	r2, r4, #72	; 0x48
   13b48:	e583502c 	str	r5, [r3, #44]	; 0x2c
   13b4c:	e5831030 	str	r1, [r3, #48]	; 0x30
   13b50:	e283300c 	add	r3, r3, #12
   13b54:	e1520003 	cmp	r2, r3
   13b58:	1afffffa 	bne	13b48 <CUSBGamePadPS4Device::Configure()+0x64>
   13b5c:	e3a00020 	mov	r0, #32
   13b60:	eb003c8a 	bl	22d90 <operator new[](unsigned int)>
   13b64:	e3a06005 	mov	r6, #5
   13b68:	e3a02020 	mov	r2, #32
   13b6c:	e584013c 	str	r0, [r4, #316]	; 0x13c
   13b70:	e3a01000 	mov	r1, #0
   13b74:	eb003816 	bl	21bd4 <memset>
   13b78:	e3a0c007 	mov	ip, #7
   13b7c:	e3e03000 	mvn	r3, #0
   13b80:	e3a0e004 	mov	lr, #4
   13b84:	e3e0100f 	mvn	r1, #15
   13b88:	e3a0207f 	mov	r2, #127	; 0x7f
   13b8c:	e594013c 	ldr	r0, [r4, #316]	; 0x13c
   13b90:	e5c06000 	strb	r6, [r0]
   13b94:	e594013c 	ldr	r0, [r4, #316]	; 0x13c
   13b98:	e5c0c001 	strb	ip, [r0, #1]
   13b9c:	e594c13c 	ldr	ip, [r4, #316]	; 0x13c
   13ba0:	e1a00004 	mov	r0, r4
   13ba4:	e5cce002 	strb	lr, [ip, #2]
   13ba8:	e5c41131 	strb	r1, [r4, #305]	; 0x131
   13bac:	e5c43134 	strb	r3, [r4, #308]	; 0x134
   13bb0:	e5c43135 	strb	r3, [r4, #309]	; 0x135
   13bb4:	e5c43136 	strb	r3, [r4, #310]	; 0x136
   13bb8:	e5c43138 	strb	r3, [r4, #312]	; 0x138
   13bbc:	e5c42137 	strb	r2, [r4, #311]	; 0x137
   13bc0:	e5c45133 	strb	r5, [r4, #307]	; 0x133
   13bc4:	e5c45132 	strb	r5, [r4, #306]	; 0x132
   13bc8:	ebffff23 	bl	1385c <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   13bcc:	e5c45134 	strb	r5, [r4, #308]	; 0x134
   13bd0:	e5c45135 	strb	r5, [r4, #309]	; 0x135
   13bd4:	e5c45136 	strb	r5, [r4, #310]	; 0x136
   13bd8:	e3a000fa 	mov	r0, #250	; 0xfa
   13bdc:	eb0037b4 	bl	21ab4 <CTimer::SimpleMsDelay(unsigned int)>
   13be0:	e1a00004 	mov	r0, r4
   13be4:	ebffff1c 	bl	1385c <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   13be8:	e1a00004 	mov	r0, r4
   13bec:	e8bd4070 	pop	{r4, r5, r6, lr}
   13bf0:	eafff96d 	b	121ac <CUSBHIDDevice::StartRequest()>
   13bf4:	e59f1040 	ldr	r1, [pc, #64]	; 13c3c <CUSBGamePadPS4Device::Configure()+0x158>
   13bf8:	eb000501 	bl	15004 <CUSBFunction::ConfigurationError(char const*) const>
   13bfc:	e1a00005 	mov	r0, r5
   13c00:	e8bd8070 	pop	{r4, r5, r6, pc}
   13c04:	eb00258e 	bl	1d244 <CLogger::Get()>
   13c08:	e59f3030 	ldr	r3, [pc, #48]	; 13c40 <CUSBGamePadPS4Device::Configure()+0x15c>
   13c0c:	e3a02001 	mov	r2, #1
   13c10:	e59f1024 	ldr	r1, [pc, #36]	; 13c3c <CUSBGamePadPS4Device::Configure()+0x158>
   13c14:	eb002733 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13c18:	e1a00005 	mov	r0, r5
   13c1c:	e8bd8070 	pop	{r4, r5, r6, pc}
   13c20:	e3a00028 	mov	r0, #40	; 0x28
   13c24:	eb003c58 	bl	22d8c <operator new(unsigned int)>
   13c28:	e1a05000 	mov	r5, r0
   13c2c:	eb0017fd 	bl	19c28 <CMouseDevice::CMouseDevice()>
   13c30:	e5845140 	str	r5, [r4, #320]	; 0x140
   13c34:	eaffffb9 	b	13b20 <CUSBGamePadPS4Device::Configure()+0x3c>
   13c38:	0002b6d0 	.word	0x0002b6d0
   13c3c:	0002618c 	.word	0x0002618c
   13c40:	00025fe8 	.word	0x00025fe8

00013c44 <CUSBGamePadPS4Device::GetProperties()>:
   13c44:	e3a0003f 	mov	r0, #63	; 0x3f
   13c48:	e12fff1e 	bx	lr

00013c4c <CUSBGamePadXbox360Device::~CUSBGamePadXbox360Device()>:
   13c4c:	e92d4010 	push	{r4, lr}
   13c50:	e1a04000 	mov	r4, r0
   13c54:	e59f300c 	ldr	r3, [pc, #12]	; 13c68 <CUSBGamePadXbox360Device::~CUSBGamePadXbox360Device()+0x1c>
   13c58:	e5803000 	str	r3, [r0]
   13c5c:	eb0015f2 	bl	1942c <CUSBGamePadDevice::~CUSBGamePadDevice()>
   13c60:	e1a00004 	mov	r0, r4
   13c64:	e8bd8010 	pop	{r4, pc}
   13c68:	000261e8 	.word	0x000261e8

00013c6c <CUSBGamePadXbox360Device::~CUSBGamePadXbox360Device()>:
   13c6c:	e92d4010 	push	{r4, lr}
   13c70:	e1a04000 	mov	r4, r0
   13c74:	e59f3018 	ldr	r3, [pc, #24]	; 13c94 <CUSBGamePadXbox360Device::~CUSBGamePadXbox360Device()+0x28>
   13c78:	e5803000 	str	r3, [r0]
   13c7c:	eb0015ea 	bl	1942c <CUSBGamePadDevice::~CUSBGamePadDevice()>
   13c80:	e1a00004 	mov	r0, r4
   13c84:	e3a01e13 	mov	r1, #304	; 0x130
   13c88:	eb003c43 	bl	22d9c <operator delete(void*, unsigned int)>
   13c8c:	e1a00004 	mov	r0, r4
   13c90:	e8bd8010 	pop	{r4, pc}
   13c94:	000261e8 	.word	0x000261e8

00013c98 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)>:
   13c98:	e92d4070 	push	{r4, r5, r6, lr}
   13c9c:	e2515000 	subs	r5, r1, #0
   13ca0:	e1a04000 	mov	r4, r0
   13ca4:	0a00003f 	beq	13da8 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x110>
   13ca8:	e5d53000 	ldrb	r3, [r5]
   13cac:	e5d52001 	ldrb	r2, [r5, #1]
   13cb0:	e1833402 	orr	r3, r3, r2, lsl #8
   13cb4:	e3530b05 	cmp	r3, #5120	; 0x1400
   13cb8:	0a000003 	beq	13ccc <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x34>
   13cbc:	e3a02078 	mov	r2, #120	; 0x78
   13cc0:	e59f10f4 	ldr	r1, [pc, #244]	; 13dbc <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x124>
   13cc4:	e59f00f4 	ldr	r0, [pc, #244]	; 13dc0 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x128>
   13cc8:	eb001b6a 	bl	1aa78 <assertion_failed>
   13ccc:	e3a00000 	mov	r0, #0
   13cd0:	e5d51003 	ldrb	r1, [r5, #3]
   13cd4:	e5d52002 	ldrb	r2, [r5, #2]
   13cd8:	e59f30e4 	ldr	r3, [pc, #228]	; 13dc4 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x12c>
   13cdc:	e1822401 	orr	r2, r2, r1, lsl #8
   13ce0:	e5840108 	str	r0, [r4, #264]	; 0x108
   13ce4:	e2831040 	add	r1, r3, #64	; 0x40
   13ce8:	e3120001 	tst	r2, #1
   13cec:	1593c000 	ldrne	ip, [r3]
   13cf0:	15940108 	ldrne	r0, [r4, #264]	; 0x108
   13cf4:	e2833004 	add	r3, r3, #4
   13cf8:	1180000c 	orrne	r0, r0, ip
   13cfc:	15840108 	strne	r0, [r4, #264]	; 0x108
   13d00:	e1510003 	cmp	r1, r3
   13d04:	e1a020a2 	lsr	r2, r2, #1
   13d08:	1afffff6 	bne	13ce8 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x50>
   13d0c:	e3a00000 	mov	r0, #0
   13d10:	e1a02000 	mov	r2, r0
   13d14:	e5d53006 	ldrb	r3, [r5, #6]
   13d18:	e5d5c007 	ldrb	ip, [r5, #7]
   13d1c:	e183340c 	orr	r3, r3, ip, lsl #8
   13d20:	e6bf3073 	sxth	r3, r3
   13d24:	e2833902 	add	r3, r3, #32768	; 0x8000
   13d28:	e1a03423 	lsr	r3, r3, #8
   13d2c:	e2800001 	add	r0, r0, #1
   13d30:	e0822082 	add	r2, r2, r2, lsl #1
   13d34:	e0842102 	add	r2, r4, r2, lsl #2
   13d38:	e3500004 	cmp	r0, #4
   13d3c:	e085c080 	add	ip, r5, r0, lsl #1
   13d40:	e5823028 	str	r3, [r2, #40]	; 0x28
   13d44:	0a00000a 	beq	13d74 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0xdc>
   13d48:	e5dc3006 	ldrb	r3, [ip, #6]
   13d4c:	e5dcc007 	ldrb	ip, [ip, #7]
   13d50:	e7912100 	ldr	r2, [r1, r0, lsl #2]
   13d54:	e183340c 	orr	r3, r3, ip, lsl #8
   13d58:	e6bf3073 	sxth	r3, r3
   13d5c:	e3c2c002 	bic	ip, r2, #2
   13d60:	e2833902 	add	r3, r3, #32768	; 0x8000
   13d64:	e35c0001 	cmp	ip, #1
   13d68:	e1a03423 	lsr	r3, r3, #8
   13d6c:	026330ff 	rsbeq	r3, r3, #255	; 0xff
   13d70:	eaffffed 	b	13d2c <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x94>
   13d74:	e5d53004 	ldrb	r3, [r5, #4]
   13d78:	e353007f 	cmp	r3, #127	; 0x7f
   13d7c:	e5843058 	str	r3, [r4, #88]	; 0x58
   13d80:	c5943108 	ldrgt	r3, [r4, #264]	; 0x108
   13d84:	c3833008 	orrgt	r3, r3, #8
   13d88:	c5843108 	strgt	r3, [r4, #264]	; 0x108
   13d8c:	e5d53005 	ldrb	r3, [r5, #5]
   13d90:	e353007f 	cmp	r3, #127	; 0x7f
   13d94:	e5843064 	str	r3, [r4, #100]	; 0x64
   13d98:	c5943108 	ldrgt	r3, [r4, #264]	; 0x108
   13d9c:	c3833010 	orrgt	r3, r3, #16
   13da0:	c5843108 	strgt	r3, [r4, #264]	; 0x108
   13da4:	e8bd8070 	pop	{r4, r5, r6, pc}
   13da8:	e3a02077 	mov	r2, #119	; 0x77
   13dac:	e59f1008 	ldr	r1, [pc, #8]	; 13dbc <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x124>
   13db0:	e59f0010 	ldr	r0, [pc, #16]	; 13dc8 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x130>
   13db4:	eb001b2f 	bl	1aa78 <assertion_failed>
   13db8:	eaffffba 	b	13ca8 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x10>
   13dbc:	00026294 	.word	0x00026294
   13dc0:	000262ac 	.word	0x000262ac
   13dc4:	00026224 	.word	0x00026224
   13dc8:	00026114 	.word	0x00026114

00013dcc <CUSBGamePadXbox360Device::ReportHandler(unsigned char const*, unsigned int)>:
   13dcc:	e2913000 	adds	r3, r1, #0
   13dd0:	13a03001 	movne	r3, #1
   13dd4:	e352000e 	cmp	r2, #14
   13dd8:	13a03000 	movne	r3, #0
   13ddc:	e2532000 	subs	r2, r3, #0
   13de0:	012fff1e 	bxeq	lr
   13de4:	e5d1c000 	ldrb	ip, [r1]
   13de8:	e35c0000 	cmp	ip, #0
   13dec:	112fff1e 	bxne	lr
   13df0:	e5d13001 	ldrb	r3, [r1, #1]
   13df4:	e3530014 	cmp	r3, #20
   13df8:	112fff1e 	bxne	lr
   13dfc:	e5903124 	ldr	r3, [r0, #292]	; 0x124
   13e00:	e92d4070 	push	{r4, r5, r6, lr}
   13e04:	e3530000 	cmp	r3, #0
   13e08:	e1a04000 	mov	r4, r0
   13e0c:	08bd8070 	popeq	{r4, r5, r6, pc}
   13e10:	e1a05000 	mov	r5, r0
   13e14:	e4953024 	ldr	r3, [r5], #36	; 0x24
   13e18:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   13e1c:	e12fff33 	blx	r3
   13e20:	e594012c 	ldr	r0, [r4, #300]	; 0x12c
   13e24:	e1a01005 	mov	r1, r5
   13e28:	e5943124 	ldr	r3, [r4, #292]	; 0x124
   13e2c:	e2400001 	sub	r0, r0, #1
   13e30:	e8bd4070 	pop	{r4, r5, r6, lr}
   13e34:	e12fff13 	bx	r3

00013e38 <CUSBGamePadXbox360Device::SetLEDMode(TGamePadLEDMode)>:
   13e38:	e3510004 	cmp	r1, #4
   13e3c:	9a000001 	bls	13e48 <CUSBGamePadXbox360Device::SetLEDMode(TGamePadLEDMode)+0x10>
   13e40:	e3a00000 	mov	r0, #0
   13e44:	e12fff1e 	bx	lr
   13e48:	e3a0c003 	mov	ip, #3
   13e4c:	e92d4010 	push	{r4, lr}
   13e50:	e3a0e001 	mov	lr, #1
   13e54:	e59f302c 	ldr	r3, [pc, #44]	; 13e88 <CUSBGamePadXbox360Device::SetLEDMode(TGamePadLEDMode)+0x50>
   13e58:	e24dd008 	sub	sp, sp, #8
   13e5c:	e0831001 	add	r1, r3, r1
   13e60:	e5d1409c 	ldrb	r4, [r1, #156]	; 0x9c
   13e64:	e1a0200c 	mov	r2, ip
   13e68:	e3a03000 	mov	r3, #0
   13e6c:	e28d1004 	add	r1, sp, #4
   13e70:	e5cd4006 	strb	r4, [sp, #6]
   13e74:	e5cdc005 	strb	ip, [sp, #5]
   13e78:	e5cde004 	strb	lr, [sp, #4]
   13e7c:	ebfff839 	bl	11f68 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   13e80:	e28dd008 	add	sp, sp, #8
   13e84:	e8bd8010 	pop	{r4, pc}
   13e88:	000261e0 	.word	0x000261e0

00013e8c <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)>:
   13e8c:	e92d4030 	push	{r4, r5, lr}
   13e90:	e24dd00c 	sub	sp, sp, #12
   13e94:	e1a04001 	mov	r4, r1
   13e98:	e1a05000 	mov	r5, r0
   13e9c:	e3a02008 	mov	r2, #8
   13ea0:	e1a0000d 	mov	r0, sp
   13ea4:	e3a01000 	mov	r1, #0
   13ea8:	eb003749 	bl	21bd4 <memset>
   13eac:	e3a03008 	mov	r3, #8
   13eb0:	e3540001 	cmp	r4, #1
   13eb4:	e5cd3001 	strb	r3, [sp, #1]
   13eb8:	0a000012 	beq	13f08 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x7c>
   13ebc:	3a000003 	bcc	13ed0 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x44>
   13ec0:	e3540002 	cmp	r4, #2
   13ec4:	1a000008 	bne	13eec <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x60>
   13ec8:	e3e03000 	mvn	r3, #0
   13ecc:	e5cd3003 	strb	r3, [sp, #3]
   13ed0:	e1a0100d 	mov	r1, sp
   13ed4:	e1a00005 	mov	r0, r5
   13ed8:	e3a03000 	mov	r3, #0
   13edc:	e3a02008 	mov	r2, #8
   13ee0:	ebfff820 	bl	11f68 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   13ee4:	e28dd00c 	add	sp, sp, #12
   13ee8:	e8bd8030 	pop	{r4, r5, pc}
   13eec:	e3a020e5 	mov	r2, #229	; 0xe5
   13ef0:	e59f101c 	ldr	r1, [pc, #28]	; 13f14 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x88>
   13ef4:	e59f001c 	ldr	r0, [pc, #28]	; 13f18 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x8c>
   13ef8:	eb001ade 	bl	1aa78 <assertion_failed>
   13efc:	e3a00000 	mov	r0, #0
   13f00:	e28dd00c 	add	sp, sp, #12
   13f04:	e8bd8030 	pop	{r4, r5, pc}
   13f08:	e3e03000 	mvn	r3, #0
   13f0c:	e5cd3004 	strb	r3, [sp, #4]
   13f10:	eaffffee 	b	13ed0 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x44>
   13f14:	00026294 	.word	0x00026294
   13f18:	00025034 	.word	0x00025034

00013f1c <CUSBGamePadXbox360Device::CUSBGamePadXbox360Device(CUSBFunction*)>:
   13f1c:	e92d4010 	push	{r4, lr}
   13f20:	e1a04000 	mov	r4, r0
   13f24:	eb00152e 	bl	193e4 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   13f28:	e59f3008 	ldr	r3, [pc, #8]	; 13f38 <CUSBGamePadXbox360Device::CUSBGamePadXbox360Device(CUSBFunction*)+0x1c>
   13f2c:	e1a00004 	mov	r0, r4
   13f30:	e5843000 	str	r3, [r4]
   13f34:	e8bd8010 	pop	{r4, pc}
   13f38:	000261e8 	.word	0x000261e8

00013f3c <CUSBGamePadXbox360Device::Configure()>:
   13f3c:	e3a0200e 	mov	r2, #14
   13f40:	e2803f4a 	add	r3, r0, #296	; 0x128
   13f44:	e92d4070 	push	{r4, r5, r6, lr}
   13f48:	e1c320b0 	strh	r2, [r3]
   13f4c:	e1a04000 	mov	r4, r0
   13f50:	eb0014f5 	bl	1932c <CUSBGamePadDevice::Configure()>
   13f54:	e2505000 	subs	r5, r0, #0
   13f58:	0a00001e 	beq	13fd8 <CUSBGamePadXbox360Device::Configure()+0x9c>
   13f5c:	e3a03000 	mov	r3, #0
   13f60:	e3a020ff 	mov	r2, #255	; 0xff
   13f64:	e3a0c012 	mov	ip, #18
   13f68:	e3a00006 	mov	r0, #6
   13f6c:	e5941000 	ldr	r1, [r4]
   13f70:	e5840024 	str	r0, [r4, #36]	; 0x24
   13f74:	e584302c 	str	r3, [r4, #44]	; 0x2c
   13f78:	e5843038 	str	r3, [r4, #56]	; 0x38
   13f7c:	e5843044 	str	r3, [r4, #68]	; 0x44
   13f80:	e5843050 	str	r3, [r4, #80]	; 0x50
   13f84:	e584305c 	str	r3, [r4, #92]	; 0x5c
   13f88:	e5843068 	str	r3, [r4, #104]	; 0x68
   13f8c:	e58430e8 	str	r3, [r4, #232]	; 0xe8
   13f90:	e584c104 	str	ip, [r4, #260]	; 0x104
   13f94:	e591302c 	ldr	r3, [r1, #44]	; 0x2c
   13f98:	e5842030 	str	r2, [r4, #48]	; 0x30
   13f9c:	e584203c 	str	r2, [r4, #60]	; 0x3c
   13fa0:	e5842048 	str	r2, [r4, #72]	; 0x48
   13fa4:	e5842054 	str	r2, [r4, #84]	; 0x54
   13fa8:	e5842060 	str	r2, [r4, #96]	; 0x60
   13fac:	e584206c 	str	r2, [r4, #108]	; 0x6c
   13fb0:	e5d4112c 	ldrb	r1, [r4, #300]	; 0x12c
   13fb4:	e1a00004 	mov	r0, r4
   13fb8:	e12fff33 	blx	r3
   13fbc:	e2505000 	subs	r5, r0, #0
   13fc0:	1a000001 	bne	13fcc <CUSBGamePadXbox360Device::Configure()+0x90>
   13fc4:	e1a00005 	mov	r0, r5
   13fc8:	e8bd8070 	pop	{r4, r5, r6, pc}
   13fcc:	e1a00004 	mov	r0, r4
   13fd0:	e8bd4070 	pop	{r4, r5, r6, lr}
   13fd4:	eafff874 	b	121ac <CUSBHIDDevice::StartRequest()>
   13fd8:	eb002499 	bl	1d244 <CLogger::Get()>
   13fdc:	e59f3010 	ldr	r3, [pc, #16]	; 13ff4 <CUSBGamePadXbox360Device::Configure()+0xb8>
   13fe0:	e3a02001 	mov	r2, #1
   13fe4:	e59f100c 	ldr	r1, [pc, #12]	; 13ff8 <CUSBGamePadXbox360Device::Configure()+0xbc>
   13fe8:	eb00263e 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13fec:	e1a00005 	mov	r0, r5
   13ff0:	e8bd8070 	pop	{r4, r5, r6, pc}
   13ff4:	00025fe8 	.word	0x00025fe8
   13ff8:	00026284 	.word	0x00026284

00013ffc <CUSBGamePadXbox360Device::GetProperties()>:
   13ffc:	e3a0000b 	mov	r0, #11
   14000:	e12fff1e 	bx	lr

00014004 <CUSBGamePadXboxOneDevice::DecodeReport(unsigned char const*)>:
   14004:	e3a02000 	mov	r2, #0
   14008:	e5d13004 	ldrb	r3, [r1, #4]
   1400c:	e5802108 	str	r2, [r0, #264]	; 0x108
   14010:	e3130004 	tst	r3, #4
   14014:	13a02901 	movne	r2, #16384	; 0x4000
   14018:	15802108 	strne	r2, [r0, #264]	; 0x108
   1401c:	e3130008 	tst	r3, #8
   14020:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   14024:	13822b02 	orrne	r2, r2, #2048	; 0x800
   14028:	15802108 	strne	r2, [r0, #264]	; 0x108
   1402c:	e3130010 	tst	r3, #16
   14030:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   14034:	13822c02 	orrne	r2, r2, #512	; 0x200
   14038:	15802108 	strne	r2, [r0, #264]	; 0x108
   1403c:	e3130020 	tst	r3, #32
   14040:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   14044:	13822c01 	orrne	r2, r2, #256	; 0x100
   14048:	15802108 	strne	r2, [r0, #264]	; 0x108
   1404c:	e3130040 	tst	r3, #64	; 0x40
   14050:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   14054:	13822b01 	orrne	r2, r2, #1024	; 0x400
   14058:	15802108 	strne	r2, [r0, #264]	; 0x108
   1405c:	e1b033a3 	lsrs	r3, r3, #7
   14060:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   14064:	13833080 	orrne	r3, r3, #128	; 0x80
   14068:	15803108 	strne	r3, [r0, #264]	; 0x108
   1406c:	e5d13005 	ldrb	r3, [r1, #5]
   14070:	e3130001 	tst	r3, #1
   14074:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   14078:	13822902 	orrne	r2, r2, #32768	; 0x8000
   1407c:	15802108 	strne	r2, [r0, #264]	; 0x108
   14080:	e3130002 	tst	r3, #2
   14084:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   14088:	13822802 	orrne	r2, r2, #131072	; 0x20000
   1408c:	15802108 	strne	r2, [r0, #264]	; 0x108
   14090:	e3130004 	tst	r3, #4
   14094:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   14098:	13822701 	orrne	r2, r2, #262144	; 0x40000
   1409c:	15802108 	strne	r2, [r0, #264]	; 0x108
   140a0:	e3130008 	tst	r3, #8
   140a4:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   140a8:	13822801 	orrne	r2, r2, #65536	; 0x10000
   140ac:	15802108 	strne	r2, [r0, #264]	; 0x108
   140b0:	e3130010 	tst	r3, #16
   140b4:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   140b8:	13822020 	orrne	r2, r2, #32
   140bc:	15802108 	strne	r2, [r0, #264]	; 0x108
   140c0:	e3130020 	tst	r3, #32
   140c4:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   140c8:	13822040 	orrne	r2, r2, #64	; 0x40
   140cc:	15802108 	strne	r2, [r0, #264]	; 0x108
   140d0:	e3130040 	tst	r3, #64	; 0x40
   140d4:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   140d8:	13822a01 	orrne	r2, r2, #4096	; 0x1000
   140dc:	15802108 	strne	r2, [r0, #264]	; 0x108
   140e0:	e1b033a3 	lsrs	r3, r3, #7
   140e4:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   140e8:	13833a02 	orrne	r3, r3, #8192	; 0x2000
   140ec:	15803108 	strne	r3, [r0, #264]	; 0x108
   140f0:	e5d12007 	ldrb	r2, [r1, #7]
   140f4:	e5d13006 	ldrb	r3, [r1, #6]
   140f8:	e1833402 	orr	r3, r3, r2, lsl #8
   140fc:	e1a03143 	asr	r3, r3, #2
   14100:	e353007f 	cmp	r3, #127	; 0x7f
   14104:	e5803058 	str	r3, [r0, #88]	; 0x58
   14108:	c5903108 	ldrgt	r3, [r0, #264]	; 0x108
   1410c:	c3833008 	orrgt	r3, r3, #8
   14110:	c5803108 	strgt	r3, [r0, #264]	; 0x108
   14114:	e5d12009 	ldrb	r2, [r1, #9]
   14118:	e5d13008 	ldrb	r3, [r1, #8]
   1411c:	e1833402 	orr	r3, r3, r2, lsl #8
   14120:	e1a03143 	asr	r3, r3, #2
   14124:	e353007f 	cmp	r3, #127	; 0x7f
   14128:	e5803064 	str	r3, [r0, #100]	; 0x64
   1412c:	c5903108 	ldrgt	r3, [r0, #264]	; 0x108
   14130:	c3833010 	orrgt	r3, r3, #16
   14134:	c5803108 	strgt	r3, [r0, #264]	; 0x108
   14138:	e5d1200b 	ldrb	r2, [r1, #11]
   1413c:	e5d1300a 	ldrb	r3, [r1, #10]
   14140:	e1833402 	orr	r3, r3, r2, lsl #8
   14144:	e6bf3073 	sxth	r3, r3
   14148:	e2833902 	add	r3, r3, #32768	; 0x8000
   1414c:	e1a03423 	lsr	r3, r3, #8
   14150:	e5803028 	str	r3, [r0, #40]	; 0x28
   14154:	e5d1200d 	ldrb	r2, [r1, #13]
   14158:	e5d1300c 	ldrb	r3, [r1, #12]
   1415c:	e1833402 	orr	r3, r3, r2, lsl #8
   14160:	e6bf3073 	sxth	r3, r3
   14164:	e2833902 	add	r3, r3, #32768	; 0x8000
   14168:	e1a03423 	lsr	r3, r3, #8
   1416c:	e26330ff 	rsb	r3, r3, #255	; 0xff
   14170:	e5803034 	str	r3, [r0, #52]	; 0x34
   14174:	e5d1200f 	ldrb	r2, [r1, #15]
   14178:	e5d1300e 	ldrb	r3, [r1, #14]
   1417c:	e1833402 	orr	r3, r3, r2, lsl #8
   14180:	e6bf3073 	sxth	r3, r3
   14184:	e2833902 	add	r3, r3, #32768	; 0x8000
   14188:	e1a03423 	lsr	r3, r3, #8
   1418c:	e5803040 	str	r3, [r0, #64]	; 0x40
   14190:	e5d13010 	ldrb	r3, [r1, #16]
   14194:	e5d12011 	ldrb	r2, [r1, #17]
   14198:	e1833402 	orr	r3, r3, r2, lsl #8
   1419c:	e6bf3073 	sxth	r3, r3
   141a0:	e2833902 	add	r3, r3, #32768	; 0x8000
   141a4:	e1a03423 	lsr	r3, r3, #8
   141a8:	e26330ff 	rsb	r3, r3, #255	; 0xff
   141ac:	e580304c 	str	r3, [r0, #76]	; 0x4c
   141b0:	e12fff1e 	bx	lr

000141b4 <CUSBGamePadXboxOneDevice::~CUSBGamePadXboxOneDevice()>:
   141b4:	e92d4010 	push	{r4, lr}
   141b8:	e1a04000 	mov	r4, r0
   141bc:	e59f300c 	ldr	r3, [pc, #12]	; 141d0 <CUSBGamePadXboxOneDevice::~CUSBGamePadXboxOneDevice()+0x1c>
   141c0:	e5803000 	str	r3, [r0]
   141c4:	eb001498 	bl	1942c <CUSBGamePadDevice::~CUSBGamePadDevice()>
   141c8:	e1a00004 	mov	r0, r4
   141cc:	e8bd8010 	pop	{r4, pc}
   141d0:	000262d8 	.word	0x000262d8

000141d4 <CUSBGamePadXboxOneDevice::~CUSBGamePadXboxOneDevice()>:
   141d4:	e92d4010 	push	{r4, lr}
   141d8:	e1a04000 	mov	r4, r0
   141dc:	e59f3018 	ldr	r3, [pc, #24]	; 141fc <CUSBGamePadXboxOneDevice::~CUSBGamePadXboxOneDevice()+0x28>
   141e0:	e5803000 	str	r3, [r0]
   141e4:	eb001490 	bl	1942c <CUSBGamePadDevice::~CUSBGamePadDevice()>
   141e8:	e1a00004 	mov	r0, r4
   141ec:	e3a01f4d 	mov	r1, #308	; 0x134
   141f0:	eb003ae9 	bl	22d9c <operator delete(void*, unsigned int)>
   141f4:	e1a00004 	mov	r0, r4
   141f8:	e8bd8010 	pop	{r4, pc}
   141fc:	000262d8 	.word	0x000262d8

00014200 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)>:
   14200:	e2513000 	subs	r3, r1, #0
   14204:	012fff1e 	bxeq	lr
   14208:	e92d4030 	push	{r4, r5, lr}
   1420c:	e3520006 	cmp	r2, #6
   14210:	e24dd014 	sub	sp, sp, #20
   14214:	e1a04000 	mov	r4, r0
   14218:	e1a0c003 	mov	ip, r3
   1421c:	0a00000b 	beq	14250 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x50>
   14220:	e5903124 	ldr	r3, [r0, #292]	; 0x124
   14224:	e2933000 	adds	r3, r3, #0
   14228:	13a03001 	movne	r3, #1
   1422c:	e3520012 	cmp	r2, #18
   14230:	13a03000 	movne	r3, #0
   14234:	e3530000 	cmp	r3, #0
   14238:	0a000002 	beq	14248 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x48>
   1423c:	e5dc3000 	ldrb	r3, [ip]
   14240:	e3530020 	cmp	r3, #32
   14244:	0a00001b 	beq	142b8 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0xb8>
   14248:	e28dd014 	add	sp, sp, #20
   1424c:	e8bd8030 	pop	{r4, r5, pc}
   14250:	e5d33000 	ldrb	r3, [r3]
   14254:	e3530007 	cmp	r3, #7
   14258:	1afffffa 	bne	14248 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x48>
   1425c:	e5dc3001 	ldrb	r3, [ip, #1]
   14260:	e3530030 	cmp	r3, #48	; 0x30
   14264:	1afffff7 	bne	14248 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x48>
   14268:	e1a0e00d 	mov	lr, sp
   1426c:	e59f506c 	ldr	r5, [pc, #108]	; 142e0 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0xe0>
   14270:	e5dcc002 	ldrb	ip, [ip, #2]
   14274:	e895000f 	ldm	r5, {r0, r1, r2, r3}
   14278:	e8ae0007 	stmia	lr!, {r0, r1, r2}
   1427c:	e1a00004 	mov	r0, r4
   14280:	e5ce3000 	strb	r3, [lr]
   14284:	e3a0200d 	mov	r2, #13
   14288:	e3a03000 	mov	r3, #0
   1428c:	e1a0100d 	mov	r1, sp
   14290:	e5cdc002 	strb	ip, [sp, #2]
   14294:	ebfff75a 	bl	12004 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)>
   14298:	e3500000 	cmp	r0, #0
   1429c:	1affffe9 	bne	14248 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x48>
   142a0:	eb0023e7 	bl	1d244 <CLogger::Get()>
   142a4:	e2851010 	add	r1, r5, #16
   142a8:	e59f3034 	ldr	r3, [pc, #52]	; 142e4 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0xe4>
   142ac:	e3a02001 	mov	r2, #1
   142b0:	eb00258c 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   142b4:	eaffffe3 	b	14248 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x48>
   142b8:	e1a05000 	mov	r5, r0
   142bc:	e4953024 	ldr	r3, [r5], #36	; 0x24
   142c0:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   142c4:	e12fff33 	blx	r3
   142c8:	e594012c 	ldr	r0, [r4, #300]	; 0x12c
   142cc:	e1a01005 	mov	r1, r5
   142d0:	e2400001 	sub	r0, r0, #1
   142d4:	e5943124 	ldr	r3, [r4, #292]	; 0x124
   142d8:	e12fff33 	blx	r3
   142dc:	eaffffd9 	b	14248 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x48>
   142e0:	00026314 	.word	0x00026314
   142e4:	0002634c 	.word	0x0002634c

000142e8 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)>:
   142e8:	e92d4010 	push	{r4, lr}
   142ec:	e24dd010 	sub	sp, sp, #16
   142f0:	e1a0c00d 	mov	ip, sp
   142f4:	e1a04001 	mov	r4, r1
   142f8:	e59f307c 	ldr	r3, [pc, #124]	; 1437c <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x94>
   142fc:	e1a0e000 	mov	lr, r0
   14300:	e893000f 	ldm	r3, {r0, r1, r2, r3}
   14304:	e8ac0007 	stmia	ip!, {r0, r1, r2}
   14308:	e3540001 	cmp	r4, #1
   1430c:	e5cc3000 	strb	r3, [ip]
   14310:	0a000016 	beq	14370 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x88>
   14314:	3a000003 	bcc	14328 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x40>
   14318:	e3540002 	cmp	r4, #2
   1431c:	1a00000c 	bne	14354 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x6c>
   14320:	e3e03000 	mvn	r3, #0
   14324:	e5cd3008 	strb	r3, [sp, #8]
   14328:	e5dec130 	ldrb	ip, [lr, #304]	; 0x130
   1432c:	e1a0100d 	mov	r1, sp
   14330:	e28c3001 	add	r3, ip, #1
   14334:	e5ce3130 	strb	r3, [lr, #304]	; 0x130
   14338:	e1a0000e 	mov	r0, lr
   1433c:	e3a03000 	mov	r3, #0
   14340:	e3a0200d 	mov	r2, #13
   14344:	e5cdc002 	strb	ip, [sp, #2]
   14348:	ebfff706 	bl	11f68 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   1434c:	e28dd010 	add	sp, sp, #16
   14350:	e8bd8010 	pop	{r4, pc}
   14354:	e3a020ee 	mov	r2, #238	; 0xee
   14358:	e59f1020 	ldr	r1, [pc, #32]	; 14380 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x98>
   1435c:	e59f0020 	ldr	r0, [pc, #32]	; 14384 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x9c>
   14360:	eb0019c4 	bl	1aa78 <assertion_failed>
   14364:	e3a00000 	mov	r0, #0
   14368:	e28dd010 	add	sp, sp, #16
   1436c:	e8bd8010 	pop	{r4, pc}
   14370:	e3e03000 	mvn	r3, #0
   14374:	e5cd3009 	strb	r3, [sp, #9]
   14378:	eaffffea 	b	14328 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x40>
   1437c:	00026334 	.word	0x00026334
   14380:	00026360 	.word	0x00026360
   14384:	00025034 	.word	0x00025034

00014388 <CUSBGamePadXboxOneDevice::CUSBGamePadXboxOneDevice(CUSBFunction*)>:
   14388:	e92d4010 	push	{r4, lr}
   1438c:	e1a04000 	mov	r4, r0
   14390:	eb001413 	bl	193e4 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   14394:	e3a02000 	mov	r2, #0
   14398:	e59f300c 	ldr	r3, [pc, #12]	; 143ac <CUSBGamePadXboxOneDevice::CUSBGamePadXboxOneDevice(CUSBFunction*)+0x24>
   1439c:	e5c42130 	strb	r2, [r4, #304]	; 0x130
   143a0:	e5843000 	str	r3, [r4]
   143a4:	e1a00004 	mov	r0, r4
   143a8:	e8bd8010 	pop	{r4, pc}
   143ac:	000262d8 	.word	0x000262d8

000143b0 <CUSBGamePadXboxOneDevice::Configure()>:
   143b0:	e3a02040 	mov	r2, #64	; 0x40
   143b4:	e92d4070 	push	{r4, r5, r6, lr}
   143b8:	e2803f4a 	add	r3, r0, #296	; 0x128
   143bc:	e24dd008 	sub	sp, sp, #8
   143c0:	e1c320b0 	strh	r2, [r3]
   143c4:	e1a04000 	mov	r4, r0
   143c8:	eb0013d7 	bl	1932c <CUSBGamePadDevice::Configure()>
   143cc:	e2505000 	subs	r5, r0, #0
   143d0:	0a00002a 	beq	14480 <CUSBGamePadXboxOneDevice::Configure()+0xd0>
   143d4:	e3a03000 	mov	r3, #0
   143d8:	e3a020ff 	mov	r2, #255	; 0xff
   143dc:	e3a01010 	mov	r1, #16
   143e0:	e3a0c006 	mov	ip, #6
   143e4:	e59f60b4 	ldr	r6, [pc, #180]	; 144a0 <CUSBGamePadXboxOneDevice::Configure()+0xf0>
   143e8:	e5841104 	str	r1, [r4, #260]	; 0x104
   143ec:	e5842030 	str	r2, [r4, #48]	; 0x30
   143f0:	e8960003 	ldm	r6, {r0, r1}
   143f4:	e584203c 	str	r2, [r4, #60]	; 0x3c
   143f8:	e58d0000 	str	r0, [sp]
   143fc:	e5cd1004 	strb	r1, [sp, #4]
   14400:	e5842048 	str	r2, [r4, #72]	; 0x48
   14404:	e5842054 	str	r2, [r4, #84]	; 0x54
   14408:	e5842060 	str	r2, [r4, #96]	; 0x60
   1440c:	e584206c 	str	r2, [r4, #108]	; 0x6c
   14410:	e584c024 	str	ip, [r4, #36]	; 0x24
   14414:	e584302c 	str	r3, [r4, #44]	; 0x2c
   14418:	e5843038 	str	r3, [r4, #56]	; 0x38
   1441c:	e5843044 	str	r3, [r4, #68]	; 0x44
   14420:	e5843050 	str	r3, [r4, #80]	; 0x50
   14424:	e584305c 	str	r3, [r4, #92]	; 0x5c
   14428:	e5843068 	str	r3, [r4, #104]	; 0x68
   1442c:	e58430e8 	str	r3, [r4, #232]	; 0xe8
   14430:	e3a02005 	mov	r2, #5
   14434:	e1a0100d 	mov	r1, sp
   14438:	e1a00004 	mov	r0, r4
   1443c:	ebfff6c9 	bl	11f68 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   14440:	e2505000 	subs	r5, r0, #0
   14444:	0a000005 	beq	14460 <CUSBGamePadXboxOneDevice::Configure()+0xb0>
   14448:	e1a00004 	mov	r0, r4
   1444c:	ebfff756 	bl	121ac <CUSBHIDDevice::StartRequest()>
   14450:	e1a05000 	mov	r5, r0
   14454:	e1a00005 	mov	r0, r5
   14458:	e28dd008 	add	sp, sp, #8
   1445c:	e8bd8070 	pop	{r4, r5, r6, pc}
   14460:	eb002377 	bl	1d244 <CLogger::Get()>
   14464:	e2461020 	sub	r1, r6, #32
   14468:	e59f3034 	ldr	r3, [pc, #52]	; 144a4 <CUSBGamePadXboxOneDevice::Configure()+0xf4>
   1446c:	e3a02001 	mov	r2, #1
   14470:	eb00251c 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14474:	e1a00005 	mov	r0, r5
   14478:	e28dd008 	add	sp, sp, #8
   1447c:	e8bd8070 	pop	{r4, r5, r6, pc}
   14480:	eb00236f 	bl	1d244 <CLogger::Get()>
   14484:	e59f301c 	ldr	r3, [pc, #28]	; 144a8 <CUSBGamePadXboxOneDevice::Configure()+0xf8>
   14488:	e3a02001 	mov	r2, #1
   1448c:	e59f1018 	ldr	r1, [pc, #24]	; 144ac <CUSBGamePadXboxOneDevice::Configure()+0xfc>
   14490:	eb002514 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14494:	e1a00005 	mov	r0, r5
   14498:	e28dd008 	add	sp, sp, #8
   1449c:	e8bd8070 	pop	{r4, r5, r6, pc}
   144a0:	00026344 	.word	0x00026344
   144a4:	00026378 	.word	0x00026378
   144a8:	00025fe8 	.word	0x00025fe8
   144ac:	00026324 	.word	0x00026324

000144b0 <CUSBGamePadXboxOneDevice::GetProperties()>:
   144b0:	e3a00009 	mov	r0, #9
   144b4:	e12fff1e 	bx	lr

000144b8 <CUSBGamePadSwitchProDevice::~CUSBGamePadSwitchProDevice()>:
   144b8:	e92d4010 	push	{r4, lr}
   144bc:	e1a04000 	mov	r4, r0
   144c0:	e59f300c 	ldr	r3, [pc, #12]	; 144d4 <CUSBGamePadSwitchProDevice::~CUSBGamePadSwitchProDevice()+0x1c>
   144c4:	e5803000 	str	r3, [r0]
   144c8:	eb0013d7 	bl	1942c <CUSBGamePadDevice::~CUSBGamePadDevice()>
   144cc:	e1a00004 	mov	r0, r4
   144d0:	e8bd8010 	pop	{r4, pc}
   144d4:	00026398 	.word	0x00026398

000144d8 <CUSBGamePadSwitchProDevice::~CUSBGamePadSwitchProDevice()>:
   144d8:	e92d4010 	push	{r4, lr}
   144dc:	e1a04000 	mov	r4, r0
   144e0:	e59f3018 	ldr	r3, [pc, #24]	; 14500 <CUSBGamePadSwitchProDevice::~CUSBGamePadSwitchProDevice()+0x28>
   144e4:	e5803000 	str	r3, [r0]
   144e8:	eb0013cf 	bl	1942c <CUSBGamePadDevice::~CUSBGamePadDevice()>
   144ec:	e1a00004 	mov	r0, r4
   144f0:	e3a01f4d 	mov	r1, #308	; 0x134
   144f4:	eb003a28 	bl	22d9c <operator delete(void*, unsigned int)>
   144f8:	e1a00004 	mov	r0, r4
   144fc:	e8bd8010 	pop	{r4, pc}
   14500:	00026398 	.word	0x00026398

00014504 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)>:
   14504:	e5d13000 	ldrb	r3, [r1]
   14508:	e3530030 	cmp	r3, #48	; 0x30
   1450c:	1a00005e 	bne	1468c <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x188>
   14510:	e3a02000 	mov	r2, #0
   14514:	e5d13003 	ldrb	r3, [r1, #3]
   14518:	e5802108 	str	r2, [r0, #264]	; 0x108
   1451c:	e3130001 	tst	r3, #1
   14520:	13a02080 	movne	r2, #128	; 0x80
   14524:	15802108 	strne	r2, [r0, #264]	; 0x108
   14528:	e3130002 	tst	r3, #2
   1452c:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   14530:	13822b01 	orrne	r2, r2, #1024	; 0x400
   14534:	15802108 	strne	r2, [r0, #264]	; 0x108
   14538:	e3130004 	tst	r3, #4
   1453c:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   14540:	13822c01 	orrne	r2, r2, #256	; 0x100
   14544:	15802108 	strne	r2, [r0, #264]	; 0x108
   14548:	e3130008 	tst	r3, #8
   1454c:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   14550:	13822c02 	orrne	r2, r2, #512	; 0x200
   14554:	15802108 	strne	r2, [r0, #264]	; 0x108
   14558:	e3130040 	tst	r3, #64	; 0x40
   1455c:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   14560:	13822040 	orrne	r2, r2, #64	; 0x40
   14564:	15802108 	strne	r2, [r0, #264]	; 0x108
   14568:	e3130080 	tst	r3, #128	; 0x80
   1456c:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   14570:	13833010 	orrne	r3, r3, #16
   14574:	15803108 	strne	r3, [r0, #264]	; 0x108
   14578:	e5d13004 	ldrb	r3, [r1, #4]
   1457c:	e3130001 	tst	r3, #1
   14580:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   14584:	13822702 	orrne	r2, r2, #524288	; 0x80000
   14588:	15802108 	strne	r2, [r0, #264]	; 0x108
   1458c:	e3130002 	tst	r3, #2
   14590:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   14594:	13822601 	orrne	r2, r2, #1048576	; 0x100000
   14598:	15802108 	strne	r2, [r0, #264]	; 0x108
   1459c:	e3130004 	tst	r3, #4
   145a0:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   145a4:	13822a02 	orrne	r2, r2, #8192	; 0x2000
   145a8:	15802108 	strne	r2, [r0, #264]	; 0x108
   145ac:	e3130008 	tst	r3, #8
   145b0:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   145b4:	13822a01 	orrne	r2, r2, #4096	; 0x1000
   145b8:	15802108 	strne	r2, [r0, #264]	; 0x108
   145bc:	e3130010 	tst	r3, #16
   145c0:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   145c4:	13822001 	orrne	r2, r2, #1
   145c8:	15802108 	strne	r2, [r0, #264]	; 0x108
   145cc:	e3130020 	tst	r3, #32
   145d0:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   145d4:	13833b02 	orrne	r3, r3, #2048	; 0x800
   145d8:	15803108 	strne	r3, [r0, #264]	; 0x108
   145dc:	e5d13005 	ldrb	r3, [r1, #5]
   145e0:	e3130001 	tst	r3, #1
   145e4:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   145e8:	13822802 	orrne	r2, r2, #131072	; 0x20000
   145ec:	15802108 	strne	r2, [r0, #264]	; 0x108
   145f0:	e3130002 	tst	r3, #2
   145f4:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   145f8:	13822902 	orrne	r2, r2, #32768	; 0x8000
   145fc:	15802108 	strne	r2, [r0, #264]	; 0x108
   14600:	e3130004 	tst	r3, #4
   14604:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   14608:	13822801 	orrne	r2, r2, #65536	; 0x10000
   1460c:	15802108 	strne	r2, [r0, #264]	; 0x108
   14610:	e3130008 	tst	r3, #8
   14614:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   14618:	13822701 	orrne	r2, r2, #262144	; 0x40000
   1461c:	15802108 	strne	r2, [r0, #264]	; 0x108
   14620:	e3130040 	tst	r3, #64	; 0x40
   14624:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   14628:	13822020 	orrne	r2, r2, #32
   1462c:	15802108 	strne	r2, [r0, #264]	; 0x108
   14630:	e3130080 	tst	r3, #128	; 0x80
   14634:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   14638:	13833008 	orrne	r3, r3, #8
   1463c:	15803108 	strne	r3, [r0, #264]	; 0x108
   14640:	e5d12007 	ldrb	r2, [r1, #7]
   14644:	e5d13006 	ldrb	r3, [r1, #6]
   14648:	e1833402 	orr	r3, r3, r2, lsl #8
   1464c:	e1a03243 	asr	r3, r3, #4
   14650:	e6ef3073 	uxtb	r3, r3
   14654:	e5803028 	str	r3, [r0, #40]	; 0x28
   14658:	e5d13008 	ldrb	r3, [r1, #8]
   1465c:	e26330ff 	rsb	r3, r3, #255	; 0xff
   14660:	e5803034 	str	r3, [r0, #52]	; 0x34
   14664:	e5d13009 	ldrb	r3, [r1, #9]
   14668:	e5d1200a 	ldrb	r2, [r1, #10]
   1466c:	e1833402 	orr	r3, r3, r2, lsl #8
   14670:	e1a03243 	asr	r3, r3, #4
   14674:	e6ef3073 	uxtb	r3, r3
   14678:	e5803040 	str	r3, [r0, #64]	; 0x40
   1467c:	e5d1300b 	ldrb	r3, [r1, #11]
   14680:	e26330ff 	rsb	r3, r3, #255	; 0xff
   14684:	e580304c 	str	r3, [r0, #76]	; 0x4c
   14688:	e12fff1e 	bx	lr
   1468c:	e92d4010 	push	{r4, lr}
   14690:	e1a04001 	mov	r4, r1
   14694:	e24dd008 	sub	sp, sp, #8
   14698:	eb0022e9 	bl	1d244 <CLogger::Get()>
   1469c:	e5d42000 	ldrb	r2, [r4]
   146a0:	e59f3014 	ldr	r3, [pc, #20]	; 146bc <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x1b8>
   146a4:	e58d2000 	str	r2, [sp]
   146a8:	e59f1010 	ldr	r1, [pc, #16]	; 146c0 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x1bc>
   146ac:	e3a02003 	mov	r2, #3
   146b0:	eb00248c 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   146b4:	e28dd008 	add	sp, sp, #8
   146b8:	e8bd8010 	pop	{r4, pc}
   146bc:	000263fc 	.word	0x000263fc
   146c0:	000263d4 	.word	0x000263d4

000146c4 <CUSBGamePadSwitchProDevice::SetLEDMode(TGamePadLEDMode)>:
   146c4:	e92d4070 	push	{r4, r5, r6, lr}
   146c8:	e1a05000 	mov	r5, r0
   146cc:	e1a06001 	mov	r6, r1
   146d0:	e5d03131 	ldrb	r3, [r0, #305]	; 0x131
   146d4:	e24dd010 	sub	sp, sp, #16
   146d8:	e59f4058 	ldr	r4, [pc, #88]	; 14738 <CUSBGamePadSwitchProDevice::SetLEDMode(TGamePadLEDMode)+0x74>
   146dc:	e2832001 	add	r2, r3, #1
   146e0:	e28de004 	add	lr, sp, #4
   146e4:	e203c00f 	and	ip, r3, #15
   146e8:	e5c02131 	strb	r2, [r0, #305]	; 0x131
   146ec:	e3a03000 	mov	r3, #0
   146f0:	e8940007 	ldm	r4, {r0, r1, r2}
   146f4:	e88e0007 	stm	lr, {r0, r1, r2}
   146f8:	e1a00005 	mov	r0, r5
   146fc:	e1a0100e 	mov	r1, lr
   14700:	e3a0200c 	mov	r2, #12
   14704:	e5cdc005 	strb	ip, [sp, #5]
   14708:	e5cd600f 	strb	r6, [sp, #15]
   1470c:	ebfff615 	bl	11f68 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   14710:	e2505000 	subs	r5, r0, #0
   14714:	1a000004 	bne	1472c <CUSBGamePadSwitchProDevice::SetLEDMode(TGamePadLEDMode)+0x68>
   14718:	eb0022c9 	bl	1d244 <CLogger::Get()>
   1471c:	e2441010 	sub	r1, r4, #16
   14720:	e59f3014 	ldr	r3, [pc, #20]	; 1473c <CUSBGamePadSwitchProDevice::SetLEDMode(TGamePadLEDMode)+0x78>
   14724:	e3a02001 	mov	r2, #1
   14728:	eb00246e 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1472c:	e1a00005 	mov	r0, r5
   14730:	e28dd010 	add	sp, sp, #16
   14734:	e8bd8070 	pop	{r4, r5, r6, pc}
   14738:	000263e4 	.word	0x000263e4
   1473c:	00026418 	.word	0x00026418

00014740 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)>:
   14740:	e92d4010 	push	{r4, lr}
   14744:	e1a0e001 	mov	lr, r1
   14748:	e24dd010 	sub	sp, sp, #16
   1474c:	e59f20cc 	ldr	r2, [pc, #204]	; 14820 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0xe0>
   14750:	e28d3004 	add	r3, sp, #4
   14754:	e1a0c000 	mov	ip, r0
   14758:	e8920007 	ldm	r2, {r0, r1, r2}
   1475c:	e8a30003 	stmia	r3!, {r0, r1}
   14760:	e35e0001 	cmp	lr, #1
   14764:	e1c320b0 	strh	r2, [r3]
   14768:	0a000023 	beq	147fc <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0xbc>
   1476c:	3a000007 	bcc	14790 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0x50>
   14770:	e35e0002 	cmp	lr, #2
   14774:	1a00001c 	bne	147ec <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0xac>
   14778:	e3a01020 	mov	r1, #32
   1477c:	e3a02062 	mov	r2, #98	; 0x62
   14780:	e3e03000 	mvn	r3, #0
   14784:	e5cd1007 	strb	r1, [sp, #7]
   14788:	e5cd2008 	strb	r2, [sp, #8]
   1478c:	e5cd3009 	strb	r3, [sp, #9]
   14790:	e5dc3131 	ldrb	r3, [ip, #305]	; 0x131
   14794:	e1a0000c 	mov	r0, ip
   14798:	e2832001 	add	r2, r3, #1
   1479c:	e5cc2131 	strb	r2, [ip, #305]	; 0x131
   147a0:	e28d1004 	add	r1, sp, #4
   147a4:	e203c00f 	and	ip, r3, #15
   147a8:	e3a0200a 	mov	r2, #10
   147ac:	e3a03000 	mov	r3, #0
   147b0:	e5cdc005 	strb	ip, [sp, #5]
   147b4:	ebfff5eb 	bl	11f68 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   147b8:	e2504000 	subs	r4, r0, #0
   147bc:	0a000002 	beq	147cc <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0x8c>
   147c0:	e1a00004 	mov	r0, r4
   147c4:	e28dd010 	add	sp, sp, #16
   147c8:	e8bd8010 	pop	{r4, pc}
   147cc:	eb00229c 	bl	1d244 <CLogger::Get()>
   147d0:	e59f304c 	ldr	r3, [pc, #76]	; 14824 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0xe4>
   147d4:	e3a02001 	mov	r2, #1
   147d8:	e59f1048 	ldr	r1, [pc, #72]	; 14828 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0xe8>
   147dc:	eb002441 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   147e0:	e1a00004 	mov	r0, r4
   147e4:	e28dd010 	add	sp, sp, #16
   147e8:	e8bd8010 	pop	{r4, pc}
   147ec:	e3a04001 	mov	r4, #1
   147f0:	e1a00004 	mov	r0, r4
   147f4:	e28dd010 	add	sp, sp, #16
   147f8:	e8bd8010 	pop	{r4, pc}
   147fc:	e3e00067 	mvn	r0, #103	; 0x67
   14800:	e3a01020 	mov	r1, #32
   14804:	e3a02062 	mov	r2, #98	; 0x62
   14808:	e3e03000 	mvn	r3, #0
   1480c:	e5cd000a 	strb	r0, [sp, #10]
   14810:	e5cd100b 	strb	r1, [sp, #11]
   14814:	e5cd200c 	strb	r2, [sp, #12]
   14818:	e5cd300d 	strb	r3, [sp, #13]
   1481c:	eaffffdb 	b	14790 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0x50>
   14820:	000263f0 	.word	0x000263f0
   14824:	0002642c 	.word	0x0002642c
   14828:	000263d4 	.word	0x000263d4

0001482c <CUSBGamePadSwitchProDevice::CUSBGamePadSwitchProDevice(CUSBFunction*)>:
   1482c:	e92d4010 	push	{r4, lr}
   14830:	e1a04000 	mov	r4, r0
   14834:	eb0012ea 	bl	193e4 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   14838:	e3a03000 	mov	r3, #0
   1483c:	e59f2024 	ldr	r2, [pc, #36]	; 14868 <CUSBGamePadSwitchProDevice::CUSBGamePadSwitchProDevice(CUSBFunction*)+0x3c>
   14840:	e1a00004 	mov	r0, r4
   14844:	e5842000 	str	r2, [r4]
   14848:	e3a01003 	mov	r1, #3
   1484c:	e1a02003 	mov	r2, r3
   14850:	eb000207 	bl	15074 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)>
   14854:	e3a03000 	mov	r3, #0
   14858:	e5c40130 	strb	r0, [r4, #304]	; 0x130
   1485c:	e5c43131 	strb	r3, [r4, #305]	; 0x131
   14860:	e1a00004 	mov	r0, r4
   14864:	e8bd8010 	pop	{r4, pc}
   14868:	00026398 	.word	0x00026398

0001486c <CUSBGamePadSwitchProDevice::Configure()>:
   1486c:	e92d4bf0 	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14870:	e5d05130 	ldrb	r5, [r0, #304]	; 0x130
   14874:	e28db01c 	add	fp, sp, #28
   14878:	e3550000 	cmp	r5, #0
   1487c:	0a00003a 	beq	1496c <CUSBGamePadSwitchProDevice::Configure()+0x100>
   14880:	e3a03040 	mov	r3, #64	; 0x40
   14884:	e2807f4a 	add	r7, r0, #296	; 0x128
   14888:	e1c730b0 	strh	r3, [r7]
   1488c:	e1a04000 	mov	r4, r0
   14890:	eb0012a5 	bl	1932c <CUSBGamePadDevice::Configure()>
   14894:	e2505000 	subs	r5, r0, #0
   14898:	0a000038 	beq	14980 <CUSBGamePadSwitchProDevice::Configure()+0x114>
   1489c:	e3a03012 	mov	r3, #18
   148a0:	e3a06000 	mov	r6, #0
   148a4:	e3a000ff 	mov	r0, #255	; 0xff
   148a8:	e3a0c004 	mov	ip, #4
   148ac:	e1d720b0 	ldrh	r2, [r7]
   148b0:	e5843104 	str	r3, [r4, #260]	; 0x104
   148b4:	e2823007 	add	r3, r2, #7
   148b8:	e3c33007 	bic	r3, r3, #7
   148bc:	e04dd003 	sub	sp, sp, r3
   148c0:	e1a0100d 	mov	r1, sp
   148c4:	e1a03006 	mov	r3, r6
   148c8:	e584c024 	str	ip, [r4, #36]	; 0x24
   148cc:	e5840030 	str	r0, [r4, #48]	; 0x30
   148d0:	e584003c 	str	r0, [r4, #60]	; 0x3c
   148d4:	e5840048 	str	r0, [r4, #72]	; 0x48
   148d8:	e5840054 	str	r0, [r4, #84]	; 0x54
   148dc:	e58460e8 	str	r6, [r4, #232]	; 0xe8
   148e0:	e584602c 	str	r6, [r4, #44]	; 0x2c
   148e4:	e5846038 	str	r6, [r4, #56]	; 0x38
   148e8:	e5846044 	str	r6, [r4, #68]	; 0x44
   148ec:	e5846050 	str	r6, [r4, #80]	; 0x50
   148f0:	e1a00004 	mov	r0, r4
   148f4:	ebfff5fc 	bl	120ec <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>
   148f8:	e1a03006 	mov	r3, r6
   148fc:	e3a02002 	mov	r2, #2
   14900:	e59f1200 	ldr	r1, [pc, #512]	; 14b08 <CUSBGamePadSwitchProDevice::Configure()+0x29c>
   14904:	e1a00004 	mov	r0, r4
   14908:	ebfff596 	bl	11f68 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   1490c:	e2505000 	subs	r5, r0, #0
   14910:	0a000022 	beq	149a0 <CUSBGamePadSwitchProDevice::Configure()+0x134>
   14914:	e1a03006 	mov	r3, r6
   14918:	e1d720b0 	ldrh	r2, [r7]
   1491c:	e1a0100d 	mov	r1, sp
   14920:	e1a00004 	mov	r0, r4
   14924:	ebfff5f0 	bl	120ec <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>
   14928:	e3500000 	cmp	r0, #0
   1492c:	da00003e 	ble	14a2c <CUSBGamePadSwitchProDevice::Configure()+0x1c0>
   14930:	e5dd3000 	ldrb	r3, [sp]
   14934:	e3530081 	cmp	r3, #129	; 0x81
   14938:	1a000002 	bne	14948 <CUSBGamePadSwitchProDevice::Configure()+0xdc>
   1493c:	e5dd3001 	ldrb	r3, [sp, #1]
   14940:	e3530003 	cmp	r3, #3
   14944:	0a00001d 	beq	149c0 <CUSBGamePadSwitchProDevice::Configure()+0x154>
   14948:	eb00223d 	bl	1d244 <CLogger::Get()>
   1494c:	e59f31b8 	ldr	r3, [pc, #440]	; 14b0c <CUSBGamePadSwitchProDevice::Configure()+0x2a0>
   14950:	e3a02001 	mov	r2, #1
   14954:	e59f11b4 	ldr	r1, [pc, #436]	; 14b10 <CUSBGamePadSwitchProDevice::Configure()+0x2a4>
   14958:	eb0023e2 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1495c:	e3a05000 	mov	r5, #0
   14960:	e1a00005 	mov	r0, r5
   14964:	e24bd01c 	sub	sp, fp, #28
   14968:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1496c:	e59f119c 	ldr	r1, [pc, #412]	; 14b10 <CUSBGamePadSwitchProDevice::Configure()+0x2a4>
   14970:	eb0001a3 	bl	15004 <CUSBFunction::ConfigurationError(char const*) const>
   14974:	e1a00005 	mov	r0, r5
   14978:	e24bd01c 	sub	sp, fp, #28
   1497c:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14980:	eb00222f 	bl	1d244 <CLogger::Get()>
   14984:	e59f3188 	ldr	r3, [pc, #392]	; 14b14 <CUSBGamePadSwitchProDevice::Configure()+0x2a8>
   14988:	e3a02001 	mov	r2, #1
   1498c:	e59f117c 	ldr	r1, [pc, #380]	; 14b10 <CUSBGamePadSwitchProDevice::Configure()+0x2a4>
   14990:	eb0023d4 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14994:	e1a00005 	mov	r0, r5
   14998:	e24bd01c 	sub	sp, fp, #28
   1499c:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   149a0:	eb002227 	bl	1d244 <CLogger::Get()>
   149a4:	e59f3160 	ldr	r3, [pc, #352]	; 14b0c <CUSBGamePadSwitchProDevice::Configure()+0x2a0>
   149a8:	e3a02001 	mov	r2, #1
   149ac:	e59f115c 	ldr	r1, [pc, #348]	; 14b10 <CUSBGamePadSwitchProDevice::Configure()+0x2a4>
   149b0:	eb0023cc 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   149b4:	e1a00005 	mov	r0, r5
   149b8:	e24bd01c 	sub	sp, fp, #28
   149bc:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   149c0:	e1a03006 	mov	r3, r6
   149c4:	e3a02002 	mov	r2, #2
   149c8:	e59f1148 	ldr	r1, [pc, #328]	; 14b18 <CUSBGamePadSwitchProDevice::Configure()+0x2ac>
   149cc:	e1a00004 	mov	r0, r4
   149d0:	ebfff564 	bl	11f68 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   149d4:	e2505000 	subs	r5, r0, #0
   149d8:	0a00001a 	beq	14a48 <CUSBGamePadSwitchProDevice::Configure()+0x1dc>
   149dc:	e1a03006 	mov	r3, r6
   149e0:	e1d720b0 	ldrh	r2, [r7]
   149e4:	e1a0100d 	mov	r1, sp
   149e8:	e1a00004 	mov	r0, r4
   149ec:	ebfff5be 	bl	120ec <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>
   149f0:	e3500000 	cmp	r0, #0
   149f4:	da000030 	ble	14abc <CUSBGamePadSwitchProDevice::Configure()+0x250>
   149f8:	e5dd3000 	ldrb	r3, [sp]
   149fc:	e3530081 	cmp	r3, #129	; 0x81
   14a00:	1a000002 	bne	14a10 <CUSBGamePadSwitchProDevice::Configure()+0x1a4>
   14a04:	e5dd3001 	ldrb	r3, [sp, #1]
   14a08:	e3530002 	cmp	r3, #2
   14a0c:	0a000013 	beq	14a60 <CUSBGamePadSwitchProDevice::Configure()+0x1f4>
   14a10:	eb00220b 	bl	1d244 <CLogger::Get()>
   14a14:	e59f3100 	ldr	r3, [pc, #256]	; 14b1c <CUSBGamePadSwitchProDevice::Configure()+0x2b0>
   14a18:	e3a02001 	mov	r2, #1
   14a1c:	e59f10ec 	ldr	r1, [pc, #236]	; 14b10 <CUSBGamePadSwitchProDevice::Configure()+0x2a4>
   14a20:	eb0023b0 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14a24:	e3a05000 	mov	r5, #0
   14a28:	eaffffcc 	b	14960 <CUSBGamePadSwitchProDevice::Configure()+0xf4>
   14a2c:	eb002204 	bl	1d244 <CLogger::Get()>
   14a30:	e59f30e8 	ldr	r3, [pc, #232]	; 14b20 <CUSBGamePadSwitchProDevice::Configure()+0x2b4>
   14a34:	e3a02001 	mov	r2, #1
   14a38:	e59f10d0 	ldr	r1, [pc, #208]	; 14b10 <CUSBGamePadSwitchProDevice::Configure()+0x2a4>
   14a3c:	e1a05006 	mov	r5, r6
   14a40:	eb0023a8 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14a44:	eaffffc5 	b	14960 <CUSBGamePadSwitchProDevice::Configure()+0xf4>
   14a48:	eb0021fd 	bl	1d244 <CLogger::Get()>
   14a4c:	e59f30c8 	ldr	r3, [pc, #200]	; 14b1c <CUSBGamePadSwitchProDevice::Configure()+0x2b0>
   14a50:	e3a02001 	mov	r2, #1
   14a54:	e59f10b4 	ldr	r1, [pc, #180]	; 14b10 <CUSBGamePadSwitchProDevice::Configure()+0x2a4>
   14a58:	eb0023a2 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14a5c:	eaffffbf 	b	14960 <CUSBGamePadSwitchProDevice::Configure()+0xf4>
   14a60:	e3a03000 	mov	r3, #0
   14a64:	e3a02002 	mov	r2, #2
   14a68:	e59f10b4 	ldr	r1, [pc, #180]	; 14b24 <CUSBGamePadSwitchProDevice::Configure()+0x2b8>
   14a6c:	e1a00004 	mov	r0, r4
   14a70:	ebfff53c 	bl	11f68 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   14a74:	e2505000 	subs	r5, r0, #0
   14a78:	0a000016 	beq	14ad8 <CUSBGamePadSwitchProDevice::Configure()+0x26c>
   14a7c:	e5943000 	ldr	r3, [r4]
   14a80:	e5d4112c 	ldrb	r1, [r4, #300]	; 0x12c
   14a84:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   14a88:	e1a00004 	mov	r0, r4
   14a8c:	e12fff33 	blx	r3
   14a90:	e1d720b0 	ldrh	r2, [r7]
   14a94:	e1a0100d 	mov	r1, sp
   14a98:	e3a03000 	mov	r3, #0
   14a9c:	e1a00004 	mov	r0, r4
   14aa0:	ebfff591 	bl	120ec <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>
   14aa4:	e3500000 	cmp	r0, #0
   14aa8:	da000010 	ble	14af0 <CUSBGamePadSwitchProDevice::Configure()+0x284>
   14aac:	e1a00004 	mov	r0, r4
   14ab0:	ebfff5bd 	bl	121ac <CUSBHIDDevice::StartRequest()>
   14ab4:	e1a05000 	mov	r5, r0
   14ab8:	eaffffa8 	b	14960 <CUSBGamePadSwitchProDevice::Configure()+0xf4>
   14abc:	eb0021e0 	bl	1d244 <CLogger::Get()>
   14ac0:	e59f3060 	ldr	r3, [pc, #96]	; 14b28 <CUSBGamePadSwitchProDevice::Configure()+0x2bc>
   14ac4:	e3a02001 	mov	r2, #1
   14ac8:	e59f1040 	ldr	r1, [pc, #64]	; 14b10 <CUSBGamePadSwitchProDevice::Configure()+0x2a4>
   14acc:	e1a05006 	mov	r5, r6
   14ad0:	eb002384 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14ad4:	eaffffa1 	b	14960 <CUSBGamePadSwitchProDevice::Configure()+0xf4>
   14ad8:	eb0021d9 	bl	1d244 <CLogger::Get()>
   14adc:	e59f3048 	ldr	r3, [pc, #72]	; 14b2c <CUSBGamePadSwitchProDevice::Configure()+0x2c0>
   14ae0:	e3a02001 	mov	r2, #1
   14ae4:	e59f1024 	ldr	r1, [pc, #36]	; 14b10 <CUSBGamePadSwitchProDevice::Configure()+0x2a4>
   14ae8:	eb00237e 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14aec:	eaffff9b 	b	14960 <CUSBGamePadSwitchProDevice::Configure()+0xf4>
   14af0:	eb0021d3 	bl	1d244 <CLogger::Get()>
   14af4:	e59f3034 	ldr	r3, [pc, #52]	; 14b30 <CUSBGamePadSwitchProDevice::Configure()+0x2c4>
   14af8:	e3a02001 	mov	r2, #1
   14afc:	e59f100c 	ldr	r1, [pc, #12]	; 14b10 <CUSBGamePadSwitchProDevice::Configure()+0x2a4>
   14b00:	eb002378 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14b04:	eaffffe8 	b	14aac <CUSBGamePadSwitchProDevice::Configure()+0x240>
   14b08:	0002b6d4 	.word	0x0002b6d4
   14b0c:	00026444 	.word	0x00026444
   14b10:	000263d4 	.word	0x000263d4
   14b14:	00025fe8 	.word	0x00025fe8
   14b18:	0002b6d8 	.word	0x0002b6d8
   14b1c:	00026484 	.word	0x00026484
   14b20:	00026464 	.word	0x00026464
   14b24:	0002b6dc 	.word	0x0002b6dc
   14b28:	000264a0 	.word	0x000264a0
   14b2c:	000264bc 	.word	0x000264bc
   14b30:	000264dc 	.word	0x000264dc

00014b34 <CUSBGamePadSwitchProDevice::GetProperties()>:
   14b34:	e3a0004b 	mov	r0, #75	; 0x4b
   14b38:	e12fff1e 	bx	lr

00014b3c <CUSBFunction::Initialize()>:
   14b3c:	e3a00001 	mov	r0, #1
   14b40:	e12fff1e 	bx	lr

00014b44 <CUSBFunction::~CUSBFunction()>:
   14b44:	e3a03000 	mov	r3, #0
   14b48:	e92d4070 	push	{r4, r5, r6, lr}
   14b4c:	e5905008 	ldr	r5, [r0, #8]
   14b50:	e59f2040 	ldr	r2, [pc, #64]	; 14b98 <CUSBFunction::~CUSBFunction()+0x54>
   14b54:	e1550003 	cmp	r5, r3
   14b58:	e1a04000 	mov	r4, r0
   14b5c:	e5802000 	str	r2, [r0]
   14b60:	e580300c 	str	r3, [r0, #12]
   14b64:	0a000004 	beq	14b7c <CUSBFunction::~CUSBFunction()+0x38>
   14b68:	e1a00005 	mov	r0, r5
   14b6c:	eb000895 	bl	16dc8 <CUSBConfigurationParser::~CUSBConfigurationParser()>
   14b70:	e1a00005 	mov	r0, r5
   14b74:	e3a0101c 	mov	r1, #28
   14b78:	eb003887 	bl	22d9c <operator delete(void*, unsigned int)>
   14b7c:	e3a03000 	mov	r3, #0
   14b80:	e1a00004 	mov	r0, r4
   14b84:	e5843008 	str	r3, [r4, #8]
   14b88:	e5843004 	str	r3, [r4, #4]
   14b8c:	eb0019b5 	bl	1b268 <CDevice::~CDevice()>
   14b90:	e1a00004 	mov	r0, r4
   14b94:	e8bd8070 	pop	{r4, r5, r6, pc}
   14b98:	00026500 	.word	0x00026500

00014b9c <CUSBFunction::~CUSBFunction()>:
   14b9c:	e92d4010 	push	{r4, lr}
   14ba0:	e1a04000 	mov	r4, r0
   14ba4:	ebffffe6 	bl	14b44 <CUSBFunction::~CUSBFunction()>
   14ba8:	e1a00004 	mov	r0, r4
   14bac:	e3a01010 	mov	r1, #16
   14bb0:	eb003879 	bl	22d9c <operator delete(void*, unsigned int)>
   14bb4:	e1a00004 	mov	r0, r4
   14bb8:	e8bd8010 	pop	{r4, pc}

00014bbc <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)>:
   14bbc:	e92d4070 	push	{r4, r5, r6, lr}
   14bc0:	e1a04000 	mov	r4, r0
   14bc4:	e1a05001 	mov	r5, r1
   14bc8:	e1a06002 	mov	r6, r2
   14bcc:	eb0019b1 	bl	1b298 <CDevice::CDevice()>
   14bd0:	e3a03000 	mov	r3, #0
   14bd4:	e59f208c 	ldr	r2, [pc, #140]	; 14c68 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xac>
   14bd8:	e1550003 	cmp	r5, r3
   14bdc:	e8840024 	stm	r4, {r2, r5}
   14be0:	e5843008 	str	r3, [r4, #8]
   14be4:	e584300c 	str	r3, [r4, #12]
   14be8:	0a000014 	beq	14c40 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0x84>
   14bec:	e3560000 	cmp	r6, #0
   14bf0:	0a000017 	beq	14c54 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0x98>
   14bf4:	e3a0001c 	mov	r0, #28
   14bf8:	eb003863 	bl	22d8c <operator new(unsigned int)>
   14bfc:	e1a05000 	mov	r5, r0
   14c00:	e1a01006 	mov	r1, r6
   14c04:	eb000858 	bl	16d6c <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)>
   14c08:	e5845008 	str	r5, [r4, #8]
   14c0c:	e1a00005 	mov	r0, r5
   14c10:	eb0008a7 	bl	16eb4 <CUSBConfigurationParser::GetCurrentDescriptor()>
   14c14:	e3500000 	cmp	r0, #0
   14c18:	e584000c 	str	r0, [r4, #12]
   14c1c:	0a000001 	beq	14c28 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0x6c>
   14c20:	e1a00004 	mov	r0, r4
   14c24:	e8bd8070 	pop	{r4, r5, r6, pc}
   14c28:	e3a02029 	mov	r2, #41	; 0x29
   14c2c:	e59f1038 	ldr	r1, [pc, #56]	; 14c6c <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xb0>
   14c30:	e59f0038 	ldr	r0, [pc, #56]	; 14c70 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xb4>
   14c34:	eb00178f 	bl	1aa78 <assertion_failed>
   14c38:	e1a00004 	mov	r0, r4
   14c3c:	e8bd8070 	pop	{r4, r5, r6, pc}
   14c40:	e3a02022 	mov	r2, #34	; 0x22
   14c44:	e59f1020 	ldr	r1, [pc, #32]	; 14c6c <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xb0>
   14c48:	e59f0024 	ldr	r0, [pc, #36]	; 14c74 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xb8>
   14c4c:	eb001789 	bl	1aa78 <assertion_failed>
   14c50:	eaffffe5 	b	14bec <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0x30>
   14c54:	e3a02024 	mov	r2, #36	; 0x24
   14c58:	e59f100c 	ldr	r1, [pc, #12]	; 14c6c <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xb0>
   14c5c:	e59f0014 	ldr	r0, [pc, #20]	; 14c78 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xbc>
   14c60:	eb001784 	bl	1aa78 <assertion_failed>
   14c64:	eaffffe2 	b	14bf4 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0x38>
   14c68:	00026500 	.word	0x00026500
   14c6c:	00026524 	.word	0x00026524
   14c70:	00026548 	.word	0x00026548
   14c74:	00024e20 	.word	0x00024e20
   14c78:	00026534 	.word	0x00026534

00014c7c <CUSBFunction::CUSBFunction(CUSBFunction*)>:
   14c7c:	e92d4070 	push	{r4, r5, r6, lr}
   14c80:	e1a04000 	mov	r4, r0
   14c84:	e1a05001 	mov	r5, r1
   14c88:	eb001982 	bl	1b298 <CDevice::CDevice()>
   14c8c:	e3a03000 	mov	r3, #0
   14c90:	e59f20d0 	ldr	r2, [pc, #208]	; 14d68 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xec>
   14c94:	e1550003 	cmp	r5, r3
   14c98:	e884000c 	stm	r4, {r2, r3}
   14c9c:	e5843008 	str	r3, [r4, #8]
   14ca0:	e584300c 	str	r3, [r4, #12]
   14ca4:	0a000019 	beq	14d10 <CUSBFunction::CUSBFunction(CUSBFunction*)+0x94>
   14ca8:	e5953004 	ldr	r3, [r5, #4]
   14cac:	e3530000 	cmp	r3, #0
   14cb0:	e5843004 	str	r3, [r4, #4]
   14cb4:	0a00001a 	beq	14d24 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xa8>
   14cb8:	e5953008 	ldr	r3, [r5, #8]
   14cbc:	e3530000 	cmp	r3, #0
   14cc0:	0a00001c 	beq	14d38 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xbc>
   14cc4:	e3a0001c 	mov	r0, #28
   14cc8:	eb00382f 	bl	22d8c <operator new(unsigned int)>
   14ccc:	e1a06000 	mov	r6, r0
   14cd0:	e5951008 	ldr	r1, [r5, #8]
   14cd4:	eb000824 	bl	16d6c <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)>
   14cd8:	e1a00006 	mov	r0, r6
   14cdc:	e5846008 	str	r6, [r4, #8]
   14ce0:	eb000873 	bl	16eb4 <CUSBConfigurationParser::GetCurrentDescriptor()>
   14ce4:	e3500000 	cmp	r0, #0
   14ce8:	e584000c 	str	r0, [r4, #12]
   14cec:	0a000001 	beq	14cf8 <CUSBFunction::CUSBFunction(CUSBFunction*)+0x7c>
   14cf0:	e1a00004 	mov	r0, r4
   14cf4:	e8bd8070 	pop	{r4, r5, r6, pc}
   14cf8:	e3a0203a 	mov	r2, #58	; 0x3a
   14cfc:	e59f1068 	ldr	r1, [pc, #104]	; 14d6c <CUSBFunction::CUSBFunction(CUSBFunction*)+0xf0>
   14d00:	e59f0068 	ldr	r0, [pc, #104]	; 14d70 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xf4>
   14d04:	eb00175b 	bl	1aa78 <assertion_failed>
   14d08:	e1a00004 	mov	r0, r4
   14d0c:	e8bd8070 	pop	{r4, r5, r6, pc}
   14d10:	e3a02031 	mov	r2, #49	; 0x31
   14d14:	e59f1050 	ldr	r1, [pc, #80]	; 14d6c <CUSBFunction::CUSBFunction(CUSBFunction*)+0xf0>
   14d18:	e59f0054 	ldr	r0, [pc, #84]	; 14d74 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xf8>
   14d1c:	eb001755 	bl	1aa78 <assertion_failed>
   14d20:	eaffffe0 	b	14ca8 <CUSBFunction::CUSBFunction(CUSBFunction*)+0x2c>
   14d24:	e3a02033 	mov	r2, #51	; 0x33
   14d28:	e59f103c 	ldr	r1, [pc, #60]	; 14d6c <CUSBFunction::CUSBFunction(CUSBFunction*)+0xf0>
   14d2c:	e59f0044 	ldr	r0, [pc, #68]	; 14d78 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xfc>
   14d30:	eb001750 	bl	1aa78 <assertion_failed>
   14d34:	eaffffdf 	b	14cb8 <CUSBFunction::CUSBFunction(CUSBFunction*)+0x3c>
   14d38:	e3a02035 	mov	r2, #53	; 0x35
   14d3c:	e59f1028 	ldr	r1, [pc, #40]	; 14d6c <CUSBFunction::CUSBFunction(CUSBFunction*)+0xf0>
   14d40:	e59f0034 	ldr	r0, [pc, #52]	; 14d7c <CUSBFunction::CUSBFunction(CUSBFunction*)+0x100>
   14d44:	eb00174b 	bl	1aa78 <assertion_failed>
   14d48:	e3a0001c 	mov	r0, #28
   14d4c:	eb00380e 	bl	22d8c <operator new(unsigned int)>
   14d50:	e1a06000 	mov	r6, r0
   14d54:	e5951008 	ldr	r1, [r5, #8]
   14d58:	eb000803 	bl	16d6c <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)>
   14d5c:	e1a00006 	mov	r0, r6
   14d60:	e5846008 	str	r6, [r4, #8]
   14d64:	eaffffdd 	b	14ce0 <CUSBFunction::CUSBFunction(CUSBFunction*)+0x64>
   14d68:	00026500 	.word	0x00026500
   14d6c:	00026524 	.word	0x00026524
   14d70:	00026548 	.word	0x00026548
   14d74:	00026560 	.word	0x00026560
   14d78:	00024e20 	.word	0x00024e20
   14d7c:	00026570 	.word	0x00026570

00014d80 <CUSBFunction::GetInterfaceName() const>:
   14d80:	e92d4030 	push	{r4, r5, lr}
   14d84:	e1a05000 	mov	r5, r0
   14d88:	e24dd00c 	sub	sp, sp, #12
   14d8c:	e3a00010 	mov	r0, #16
   14d90:	eb0037fd 	bl	22d8c <operator new(unsigned int)>
   14d94:	e59f1048 	ldr	r1, [pc, #72]	; 14de4 <CUSBFunction::GetInterfaceName() const+0x64>
   14d98:	e1a04000 	mov	r4, r0
   14d9c:	eb002bec 	bl	1fd54 <CString::CString(char const*)>
   14da0:	e595100c 	ldr	r1, [r5, #12]
   14da4:	e3510000 	cmp	r1, #0
   14da8:	0a00000a 	beq	14dd8 <CUSBFunction::GetInterfaceName() const+0x58>
   14dac:	e5d12005 	ldrb	r2, [r1, #5]
   14db0:	e2423001 	sub	r3, r2, #1
   14db4:	e6ef3073 	uxtb	r3, r3
   14db8:	e35300fd 	cmp	r3, #253	; 0xfd
   14dbc:	8a000005 	bhi	14dd8 <CUSBFunction::GetInterfaceName() const+0x58>
   14dc0:	e5d13006 	ldrb	r3, [r1, #6]
   14dc4:	e5d11007 	ldrb	r1, [r1, #7]
   14dc8:	e1a00004 	mov	r0, r4
   14dcc:	e58d1000 	str	r1, [sp]
   14dd0:	e59f1010 	ldr	r1, [pc, #16]	; 14de8 <CUSBFunction::GetInterfaceName() const+0x68>
   14dd4:	eb002fc6 	bl	20cf4 <CString::Format(char const*, ...)>
   14dd8:	e1a00004 	mov	r0, r4
   14ddc:	e28dd00c 	add	sp, sp, #12
   14de0:	e8bd8030 	pop	{r4, r5, pc}
   14de4:	00024fec 	.word	0x00024fec
   14de8:	00026590 	.word	0x00026590

00014dec <CUSBFunction::GetNumEndpoints() const>:
   14dec:	e590300c 	ldr	r3, [r0, #12]
   14df0:	e3530000 	cmp	r3, #0
   14df4:	0a000001 	beq	14e00 <CUSBFunction::GetNumEndpoints() const+0x14>
   14df8:	e5d30004 	ldrb	r0, [r3, #4]
   14dfc:	e12fff1e 	bx	lr
   14e00:	e92d4010 	push	{r4, lr}
   14e04:	e1a04000 	mov	r4, r0
   14e08:	e3a02073 	mov	r2, #115	; 0x73
   14e0c:	e59f1010 	ldr	r1, [pc, #16]	; 14e24 <CUSBFunction::GetNumEndpoints() const+0x38>
   14e10:	e59f0010 	ldr	r0, [pc, #16]	; 14e28 <CUSBFunction::GetNumEndpoints() const+0x3c>
   14e14:	eb001717 	bl	1aa78 <assertion_failed>
   14e18:	e594300c 	ldr	r3, [r4, #12]
   14e1c:	e5d30004 	ldrb	r0, [r3, #4]
   14e20:	e8bd8010 	pop	{r4, pc}
   14e24:	00026524 	.word	0x00026524
   14e28:	00026548 	.word	0x00026548

00014e2c <CUSBFunction::GetDevice() const>:
   14e2c:	e5903004 	ldr	r3, [r0, #4]
   14e30:	e3530000 	cmp	r3, #0
   14e34:	0a000001 	beq	14e40 <CUSBFunction::GetDevice() const+0x14>
   14e38:	e1a00003 	mov	r0, r3
   14e3c:	e12fff1e 	bx	lr
   14e40:	e92d4010 	push	{r4, lr}
   14e44:	e1a04000 	mov	r4, r0
   14e48:	e3a02079 	mov	r2, #121	; 0x79
   14e4c:	e59f1010 	ldr	r1, [pc, #16]	; 14e64 <CUSBFunction::GetDevice() const+0x38>
   14e50:	e59f0010 	ldr	r0, [pc, #16]	; 14e68 <CUSBFunction::GetDevice() const+0x3c>
   14e54:	eb001707 	bl	1aa78 <assertion_failed>
   14e58:	e5943004 	ldr	r3, [r4, #4]
   14e5c:	e1a00003 	mov	r0, r3
   14e60:	e8bd8010 	pop	{r4, pc}
   14e64:	00026524 	.word	0x00026524
   14e68:	00024e20 	.word	0x00024e20

00014e6c <CUSBFunction::GetEndpoint0() const>:
   14e6c:	e5903004 	ldr	r3, [r0, #4]
   14e70:	e3530000 	cmp	r3, #0
   14e74:	0a000001 	beq	14e80 <CUSBFunction::GetEndpoint0() const+0x14>
   14e78:	e1a00003 	mov	r0, r3
   14e7c:	eaffe343 	b	db90 <CUSBDevice::GetEndpoint0() const>
   14e80:	e92d4010 	push	{r4, lr}
   14e84:	e1a04000 	mov	r4, r0
   14e88:	e3a0207f 	mov	r2, #127	; 0x7f
   14e8c:	e59f0014 	ldr	r0, [pc, #20]	; 14ea8 <CUSBFunction::GetEndpoint0() const+0x3c>
   14e90:	e59f1014 	ldr	r1, [pc, #20]	; 14eac <CUSBFunction::GetEndpoint0() const+0x40>
   14e94:	eb0016f7 	bl	1aa78 <assertion_failed>
   14e98:	e5943004 	ldr	r3, [r4, #4]
   14e9c:	e8bd4010 	pop	{r4, lr}
   14ea0:	e1a00003 	mov	r0, r3
   14ea4:	eaffe339 	b	db90 <CUSBDevice::GetEndpoint0() const>
   14ea8:	00024e20 	.word	0x00024e20
   14eac:	00026524 	.word	0x00026524

00014eb0 <CUSBFunction::GetHost() const>:
   14eb0:	e5903004 	ldr	r3, [r0, #4]
   14eb4:	e3530000 	cmp	r3, #0
   14eb8:	0a000001 	beq	14ec4 <CUSBFunction::GetHost() const+0x14>
   14ebc:	e1a00003 	mov	r0, r3
   14ec0:	eaffe343 	b	dbd4 <CUSBDevice::GetHost() const>
   14ec4:	e92d4010 	push	{r4, lr}
   14ec8:	e1a04000 	mov	r4, r0
   14ecc:	e3a02085 	mov	r2, #133	; 0x85
   14ed0:	e59f0014 	ldr	r0, [pc, #20]	; 14eec <CUSBFunction::GetHost() const+0x3c>
   14ed4:	e59f1014 	ldr	r1, [pc, #20]	; 14ef0 <CUSBFunction::GetHost() const+0x40>
   14ed8:	eb0016e6 	bl	1aa78 <assertion_failed>
   14edc:	e5943004 	ldr	r3, [r4, #4]
   14ee0:	e8bd4010 	pop	{r4, lr}
   14ee4:	e1a00003 	mov	r0, r3
   14ee8:	eaffe339 	b	dbd4 <CUSBDevice::GetHost() const>
   14eec:	00024e20 	.word	0x00024e20
   14ef0:	00026524 	.word	0x00026524

00014ef4 <CUSBFunction::Configure()>:
   14ef4:	e92d4070 	push	{r4, r5, r6, lr}
   14ef8:	e590300c 	ldr	r3, [r0, #12]
   14efc:	e24dd010 	sub	sp, sp, #16
   14f00:	e3530000 	cmp	r3, #0
   14f04:	e1a05000 	mov	r5, r0
   14f08:	0a000020 	beq	14f90 <CUSBFunction::Configure()+0x9c>
   14f0c:	e5d33003 	ldrb	r3, [r3, #3]
   14f10:	e3530000 	cmp	r3, #0
   14f14:	1a000002 	bne	14f24 <CUSBFunction::Configure()+0x30>
   14f18:	e3a00001 	mov	r0, #1
   14f1c:	e28dd010 	add	sp, sp, #16
   14f20:	e8bd8070 	pop	{r4, r5, r6, pc}
   14f24:	e1a00005 	mov	r0, r5
   14f28:	ebffffe0 	bl	14eb0 <CUSBFunction::GetHost() const>
   14f2c:	e3a04000 	mov	r4, #0
   14f30:	e1a06000 	mov	r6, r0
   14f34:	e1a00005 	mov	r0, r5
   14f38:	ebffffcb 	bl	14e6c <CUSBFunction::GetEndpoint0() const>
   14f3c:	e595300c 	ldr	r3, [r5, #12]
   14f40:	e58d400c 	str	r4, [sp, #12]
   14f44:	e58d4008 	str	r4, [sp, #8]
   14f48:	e5d32002 	ldrb	r2, [r3, #2]
   14f4c:	e1a01000 	mov	r1, r0
   14f50:	e58d2004 	str	r2, [sp, #4]
   14f54:	e5d33003 	ldrb	r3, [r3, #3]
   14f58:	e1a00006 	mov	r0, r6
   14f5c:	e58d3000 	str	r3, [sp]
   14f60:	e3a02001 	mov	r2, #1
   14f64:	e3a0300b 	mov	r3, #11
   14f68:	ebffe6df 	bl	eaec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   14f6c:	e1500004 	cmp	r0, r4
   14f70:	aaffffe8 	bge	14f18 <CUSBFunction::Configure()+0x24>
   14f74:	eb0020b2 	bl	1d244 <CLogger::Get()>
   14f78:	e59f3028 	ldr	r3, [pc, #40]	; 14fa8 <CUSBFunction::Configure()+0xb4>
   14f7c:	e3a02001 	mov	r2, #1
   14f80:	e59f1024 	ldr	r1, [pc, #36]	; 14fac <CUSBFunction::Configure()+0xb8>
   14f84:	eb002257 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14f88:	e1a00004 	mov	r0, r4
   14f8c:	eaffffe2 	b	14f1c <CUSBFunction::Configure()+0x28>
   14f90:	e3a0204e 	mov	r2, #78	; 0x4e
   14f94:	e59f1014 	ldr	r1, [pc, #20]	; 14fb0 <CUSBFunction::Configure()+0xbc>
   14f98:	e59f0014 	ldr	r0, [pc, #20]	; 14fb4 <CUSBFunction::Configure()+0xc0>
   14f9c:	eb0016b5 	bl	1aa78 <assertion_failed>
   14fa0:	e595300c 	ldr	r3, [r5, #12]
   14fa4:	eaffffd8 	b	14f0c <CUSBFunction::Configure()+0x18>
   14fa8:	00025834 	.word	0x00025834
   14fac:	0002651c 	.word	0x0002651c
   14fb0:	00026524 	.word	0x00026524
   14fb4:	00026548 	.word	0x00026548

00014fb8 <CUSBFunction::GetDescriptor(unsigned char)>:
   14fb8:	e92d4070 	push	{r4, r5, r6, lr}
   14fbc:	e1a04000 	mov	r4, r0
   14fc0:	e5900008 	ldr	r0, [r0, #8]
   14fc4:	e1a05001 	mov	r5, r1
   14fc8:	e3500000 	cmp	r0, #0
   14fcc:	0a000002 	beq	14fdc <CUSBFunction::GetDescriptor(unsigned char)+0x24>
   14fd0:	e1a01005 	mov	r1, r5
   14fd4:	e8bd4070 	pop	{r4, r5, r6, lr}
   14fd8:	ea00077d 	b	16dd4 <CUSBConfigurationParser::GetDescriptor(unsigned char)>
   14fdc:	e59f1018 	ldr	r1, [pc, #24]	; 14ffc <CUSBFunction::GetDescriptor(unsigned char)+0x44>
   14fe0:	e59f0018 	ldr	r0, [pc, #24]	; 15000 <CUSBFunction::GetDescriptor(unsigned char)+0x48>
   14fe4:	e3a0208b 	mov	r2, #139	; 0x8b
   14fe8:	eb0016a2 	bl	1aa78 <assertion_failed>
   14fec:	e5940008 	ldr	r0, [r4, #8]
   14ff0:	e1a01005 	mov	r1, r5
   14ff4:	e8bd4070 	pop	{r4, r5, r6, lr}
   14ff8:	ea000775 	b	16dd4 <CUSBConfigurationParser::GetDescriptor(unsigned char)>
   14ffc:	00026524 	.word	0x00026524
   15000:	0002504c 	.word	0x0002504c

00015004 <CUSBFunction::ConfigurationError(char const*) const>:
   15004:	e5903008 	ldr	r3, [r0, #8]
   15008:	e92d4070 	push	{r4, r5, r6, lr}
   1500c:	e3530000 	cmp	r3, #0
   15010:	e1a04000 	mov	r4, r0
   15014:	e1a05001 	mov	r5, r1
   15018:	0a00000d 	beq	15054 <CUSBFunction::ConfigurationError(char const*) const+0x50>
   1501c:	e3550000 	cmp	r5, #0
   15020:	0a000003 	beq	15034 <CUSBFunction::ConfigurationError(char const*) const+0x30>
   15024:	e1a01005 	mov	r1, r5
   15028:	e5940008 	ldr	r0, [r4, #8]
   1502c:	e8bd4070 	pop	{r4, r5, r6, lr}
   15030:	ea0007b5 	b	16f0c <CUSBConfigurationParser::Error(char const*) const>
   15034:	e59f102c 	ldr	r1, [pc, #44]	; 15068 <CUSBFunction::ConfigurationError(char const*) const+0x64>
   15038:	e59f002c 	ldr	r0, [pc, #44]	; 1506c <CUSBFunction::ConfigurationError(char const*) const+0x68>
   1503c:	e3a02092 	mov	r2, #146	; 0x92
   15040:	eb00168c 	bl	1aa78 <assertion_failed>
   15044:	e1a01005 	mov	r1, r5
   15048:	e5940008 	ldr	r0, [r4, #8]
   1504c:	e8bd4070 	pop	{r4, r5, r6, lr}
   15050:	ea0007ad 	b	16f0c <CUSBConfigurationParser::Error(char const*) const>
   15054:	e3a02091 	mov	r2, #145	; 0x91
   15058:	e59f1008 	ldr	r1, [pc, #8]	; 15068 <CUSBFunction::ConfigurationError(char const*) const+0x64>
   1505c:	e59f000c 	ldr	r0, [pc, #12]	; 15070 <CUSBFunction::ConfigurationError(char const*) const+0x6c>
   15060:	eb001684 	bl	1aa78 <assertion_failed>
   15064:	eaffffec 	b	1501c <CUSBFunction::ConfigurationError(char const*) const+0x18>
   15068:	00026524 	.word	0x00026524
   1506c:	0002659c 	.word	0x0002659c
   15070:	0002504c 	.word	0x0002504c

00015074 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)>:
   15074:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   15078:	e1a04000 	mov	r4, r0
   1507c:	e590000c 	ldr	r0, [r0, #12]
   15080:	e1a06001 	mov	r6, r1
   15084:	e3500000 	cmp	r0, #0
   15088:	e1a07002 	mov	r7, r2
   1508c:	e1a08003 	mov	r8, r3
   15090:	0a00001d 	beq	1510c <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x98>
   15094:	e5943008 	ldr	r3, [r4, #8]
   15098:	e3530000 	cmp	r3, #0
   1509c:	0a00001f 	beq	15120 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xac>
   150a0:	e5943004 	ldr	r3, [r4, #4]
   150a4:	e3530000 	cmp	r3, #0
   150a8:	0a000021 	beq	15134 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xc0>
   150ac:	e594000c 	ldr	r0, [r4, #12]
   150b0:	e3a05004 	mov	r5, #4
   150b4:	ea000008 	b	150dc <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x68>
   150b8:	e1a01005 	mov	r1, r5
   150bc:	e5940004 	ldr	r0, [r4, #4]
   150c0:	ebffe2f6 	bl	dca0 <CUSBDevice::GetDescriptor(unsigned char)>
   150c4:	e1a01005 	mov	r1, r5
   150c8:	e5940008 	ldr	r0, [r4, #8]
   150cc:	eb000740 	bl	16dd4 <CUSBConfigurationParser::GetDescriptor(unsigned char)>
   150d0:	e3500000 	cmp	r0, #0
   150d4:	e584000c 	str	r0, [r4, #12]
   150d8:	0a00000a 	beq	15108 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x94>
   150dc:	e5d03005 	ldrb	r3, [r0, #5]
   150e0:	e1530006 	cmp	r3, r6
   150e4:	1afffff3 	bne	150b8 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x44>
   150e8:	e5d03006 	ldrb	r3, [r0, #6]
   150ec:	e1530007 	cmp	r3, r7
   150f0:	1afffff0 	bne	150b8 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x44>
   150f4:	e5d03007 	ldrb	r3, [r0, #7]
   150f8:	e1530008 	cmp	r3, r8
   150fc:	1affffed 	bne	150b8 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x44>
   15100:	e3a00001 	mov	r0, #1
   15104:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   15108:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1510c:	e3a02098 	mov	r2, #152	; 0x98
   15110:	e59f1030 	ldr	r1, [pc, #48]	; 15148 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xd4>
   15114:	e59f0030 	ldr	r0, [pc, #48]	; 1514c <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xd8>
   15118:	eb001656 	bl	1aa78 <assertion_failed>
   1511c:	eaffffdc 	b	15094 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x20>
   15120:	e3a02099 	mov	r2, #153	; 0x99
   15124:	e59f101c 	ldr	r1, [pc, #28]	; 15148 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xd4>
   15128:	e59f0020 	ldr	r0, [pc, #32]	; 15150 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xdc>
   1512c:	eb001651 	bl	1aa78 <assertion_failed>
   15130:	eaffffda 	b	150a0 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x2c>
   15134:	e3a0209a 	mov	r2, #154	; 0x9a
   15138:	e59f1008 	ldr	r1, [pc, #8]	; 15148 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xd4>
   1513c:	e59f0010 	ldr	r0, [pc, #16]	; 15154 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xe0>
   15140:	eb00164c 	bl	1aa78 <assertion_failed>
   15144:	eaffffd8 	b	150ac <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x38>
   15148:	00026524 	.word	0x00026524
   1514c:	00026548 	.word	0x00026548
   15150:	0002504c 	.word	0x0002504c
   15154:	00024e20 	.word	0x00024e20

00015158 <CUSBFunction::GetInterfaceNumber() const>:
   15158:	e590300c 	ldr	r3, [r0, #12]
   1515c:	e3530000 	cmp	r3, #0
   15160:	0a000001 	beq	1516c <CUSBFunction::GetInterfaceNumber() const+0x14>
   15164:	e5d30002 	ldrb	r0, [r3, #2]
   15168:	e12fff1e 	bx	lr
   1516c:	e92d4010 	push	{r4, lr}
   15170:	e1a04000 	mov	r4, r0
   15174:	e3a020b0 	mov	r2, #176	; 0xb0
   15178:	e59f1010 	ldr	r1, [pc, #16]	; 15190 <CUSBFunction::GetInterfaceNumber() const+0x38>
   1517c:	e59f0010 	ldr	r0, [pc, #16]	; 15194 <CUSBFunction::GetInterfaceNumber() const+0x3c>
   15180:	eb00163c 	bl	1aa78 <assertion_failed>
   15184:	e594300c 	ldr	r3, [r4, #12]
   15188:	e5d30002 	ldrb	r0, [r3, #2]
   1518c:	e8bd8010 	pop	{r4, pc}
   15190:	00026524 	.word	0x00026524
   15194:	00026548 	.word	0x00026548

00015198 <CUSBFunction::GetInterfaceClass() const>:
   15198:	e590300c 	ldr	r3, [r0, #12]
   1519c:	e3530000 	cmp	r3, #0
   151a0:	0a000001 	beq	151ac <CUSBFunction::GetInterfaceClass() const+0x14>
   151a4:	e5d30005 	ldrb	r0, [r3, #5]
   151a8:	e12fff1e 	bx	lr
   151ac:	e92d4010 	push	{r4, lr}
   151b0:	e1a04000 	mov	r4, r0
   151b4:	e3a020b6 	mov	r2, #182	; 0xb6
   151b8:	e59f1010 	ldr	r1, [pc, #16]	; 151d0 <CUSBFunction::GetInterfaceClass() const+0x38>
   151bc:	e59f0010 	ldr	r0, [pc, #16]	; 151d4 <CUSBFunction::GetInterfaceClass() const+0x3c>
   151c0:	eb00162c 	bl	1aa78 <assertion_failed>
   151c4:	e594300c 	ldr	r3, [r4, #12]
   151c8:	e5d30005 	ldrb	r0, [r3, #5]
   151cc:	e8bd8010 	pop	{r4, pc}
   151d0:	00026524 	.word	0x00026524
   151d4:	00026548 	.word	0x00026548

000151d8 <CUSBFunction::GetInterfaceSubClass() const>:
   151d8:	e590300c 	ldr	r3, [r0, #12]
   151dc:	e3530000 	cmp	r3, #0
   151e0:	0a000001 	beq	151ec <CUSBFunction::GetInterfaceSubClass() const+0x14>
   151e4:	e5d30006 	ldrb	r0, [r3, #6]
   151e8:	e12fff1e 	bx	lr
   151ec:	e92d4010 	push	{r4, lr}
   151f0:	e1a04000 	mov	r4, r0
   151f4:	e3a020bc 	mov	r2, #188	; 0xbc
   151f8:	e59f1010 	ldr	r1, [pc, #16]	; 15210 <CUSBFunction::GetInterfaceSubClass() const+0x38>
   151fc:	e59f0010 	ldr	r0, [pc, #16]	; 15214 <CUSBFunction::GetInterfaceSubClass() const+0x3c>
   15200:	eb00161c 	bl	1aa78 <assertion_failed>
   15204:	e594300c 	ldr	r3, [r4, #12]
   15208:	e5d30006 	ldrb	r0, [r3, #6]
   1520c:	e8bd8010 	pop	{r4, pc}
   15210:	00026524 	.word	0x00026524
   15214:	00026548 	.word	0x00026548

00015218 <CUSBFunction::GetInterfaceProtocol() const>:
   15218:	e590300c 	ldr	r3, [r0, #12]
   1521c:	e3530000 	cmp	r3, #0
   15220:	0a000001 	beq	1522c <CUSBFunction::GetInterfaceProtocol() const+0x14>
   15224:	e5d30007 	ldrb	r0, [r3, #7]
   15228:	e12fff1e 	bx	lr
   1522c:	e92d4010 	push	{r4, lr}
   15230:	e1a04000 	mov	r4, r0
   15234:	e3a020c2 	mov	r2, #194	; 0xc2
   15238:	e59f1010 	ldr	r1, [pc, #16]	; 15250 <CUSBFunction::GetInterfaceProtocol() const+0x38>
   1523c:	e59f0010 	ldr	r0, [pc, #16]	; 15254 <CUSBFunction::GetInterfaceProtocol() const+0x3c>
   15240:	eb00160c 	bl	1aa78 <assertion_failed>
   15244:	e594300c 	ldr	r3, [r4, #12]
   15248:	e5d30007 	ldrb	r0, [r3, #7]
   1524c:	e8bd8010 	pop	{r4, pc}
   15250:	00026524 	.word	0x00026524
   15254:	00026548 	.word	0x00026548

00015258 <CDWHCIFrameSchedulerNoSplit::~CDWHCIFrameSchedulerNoSplit()>:
   15258:	e12fff1e 	bx	lr

0001525c <CDWHCIFrameSchedulerNoSplit::IsOddFrame() const>:
   1525c:	e1d000b6 	ldrh	r0, [r0, #6]
   15260:	e2000001 	and	r0, r0, #1
   15264:	e12fff1e 	bx	lr

00015268 <CDWHCIFrameSchedulerNoSplit::StartSplit()>:
   15268:	e3a02026 	mov	r2, #38	; 0x26
   1526c:	e59f1004 	ldr	r1, [pc, #4]	; 15278 <CDWHCIFrameSchedulerNoSplit::StartSplit()+0x10>
   15270:	e59f0004 	ldr	r0, [pc, #4]	; 1527c <CDWHCIFrameSchedulerNoSplit::StartSplit()+0x14>
   15274:	ea0015ff 	b	1aa78 <assertion_failed>
   15278:	000265d0 	.word	0x000265d0
   1527c:	00025034 	.word	0x00025034

00015280 <CDWHCIFrameSchedulerNoSplit::CompleteSplit()>:
   15280:	e92d4010 	push	{r4, lr}
   15284:	e3a0202b 	mov	r2, #43	; 0x2b
   15288:	e59f100c 	ldr	r1, [pc, #12]	; 1529c <CDWHCIFrameSchedulerNoSplit::CompleteSplit()+0x1c>
   1528c:	e59f000c 	ldr	r0, [pc, #12]	; 152a0 <CDWHCIFrameSchedulerNoSplit::CompleteSplit()+0x20>
   15290:	eb0015f8 	bl	1aa78 <assertion_failed>
   15294:	e3a00000 	mov	r0, #0
   15298:	e8bd8010 	pop	{r4, pc}
   1529c:	000265d0 	.word	0x000265d0
   152a0:	00025034 	.word	0x00025034

000152a4 <CDWHCIFrameSchedulerNoSplit::TransactionComplete(unsigned int)>:
   152a4:	e3a02031 	mov	r2, #49	; 0x31
   152a8:	e59f1004 	ldr	r1, [pc, #4]	; 152b4 <CDWHCIFrameSchedulerNoSplit::TransactionComplete(unsigned int)+0x10>
   152ac:	e59f0004 	ldr	r0, [pc, #4]	; 152b8 <CDWHCIFrameSchedulerNoSplit::TransactionComplete(unsigned int)+0x14>
   152b0:	ea0015f0 	b	1aa78 <assertion_failed>
   152b4:	000265d0 	.word	0x000265d0
   152b8:	00025034 	.word	0x00025034

000152bc <CDWHCIFrameSchedulerNoSplit::WaitForFrame()>:
   152bc:	e92d4030 	push	{r4, r5, lr}
   152c0:	e24dd014 	sub	sp, sp, #20
   152c4:	e1a05000 	mov	r5, r0
   152c8:	e59f1050 	ldr	r1, [pc, #80]	; 15320 <CDWHCIFrameSchedulerNoSplit::WaitForFrame()+0x64>
   152cc:	e28d0004 	add	r0, sp, #4
   152d0:	ebffdd5c 	bl	c848 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   152d4:	e28d0004 	add	r0, sp, #4
   152d8:	ebffdd63 	bl	c86c <CDWHCIRegister::Read()>
   152dc:	e59f4040 	ldr	r4, [pc, #64]	; 15324 <CDWHCIFrameSchedulerNoSplit::WaitForFrame()+0x68>
   152e0:	e5d53004 	ldrb	r3, [r5, #4]
   152e4:	e2800001 	add	r0, r0, #1
   152e8:	e0000004 	and	r0, r0, r4
   152ec:	e3530000 	cmp	r3, #0
   152f0:	e1c500b6 	strh	r0, [r5, #6]
   152f4:	1a000005 	bne	15310 <CDWHCIFrameSchedulerNoSplit::WaitForFrame()+0x54>
   152f8:	e28d0004 	add	r0, sp, #4
   152fc:	ebffdd5a 	bl	c86c <CDWHCIRegister::Read()>
   15300:	e1d530b6 	ldrh	r3, [r5, #6]
   15304:	e0000004 	and	r0, r0, r4
   15308:	e1500003 	cmp	r0, r3
   1530c:	1afffff9 	bne	152f8 <CDWHCIFrameSchedulerNoSplit::WaitForFrame()+0x3c>
   15310:	e28d0004 	add	r0, sp, #4
   15314:	ebffdd53 	bl	c868 <CDWHCIRegister::~CDWHCIRegister()>
   15318:	e28dd014 	add	sp, sp, #20
   1531c:	e8bd8030 	pop	{r4, r5, pc}
   15320:	20980408 	.word	0x20980408
   15324:	00003fff 	.word	0x00003fff

00015328 <CDWHCIFrameSchedulerNoSplit::CDWHCIFrameSchedulerNoSplit(bool)>:
   15328:	e3a02901 	mov	r2, #16384	; 0x4000
   1532c:	e59fc00c 	ldr	ip, [pc, #12]	; 15340 <CDWHCIFrameSchedulerNoSplit::CDWHCIFrameSchedulerNoSplit(bool)+0x18>
   15330:	e5c01004 	strb	r1, [r0, #4]
   15334:	e580c000 	str	ip, [r0]
   15338:	e1c020b6 	strh	r2, [r0, #6]
   1533c:	e12fff1e 	bx	lr
   15340:	000265b4 	.word	0x000265b4

00015344 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)>:
   15344:	e3500008 	cmp	r0, #8
   15348:	e92d4010 	push	{r4, lr}
   1534c:	0a000003 	beq	15360 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x1c>
   15350:	e3a0205a 	mov	r2, #90	; 0x5a
   15354:	e59f1038 	ldr	r1, [pc, #56]	; 15394 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x50>
   15358:	e59f0038 	ldr	r0, [pc, #56]	; 15398 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x54>
   1535c:	eb0015c5 	bl	1aa78 <assertion_failed>
   15360:	e59f4034 	ldr	r4, [pc, #52]	; 1539c <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x58>
   15364:	e5940000 	ldr	r0, [r4]
   15368:	e3500000 	cmp	r0, #0
   1536c:	0a000001 	beq	15378 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x34>
   15370:	e8bd4010 	pop	{r4, lr}
   15374:	ea0016dd 	b	1aef0 <CClassAllocator::Allocate()>
   15378:	e59f0020 	ldr	r0, [pc, #32]	; 153a0 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x5c>
   1537c:	e3a0205a 	mov	r2, #90	; 0x5a
   15380:	e59f100c 	ldr	r1, [pc, #12]	; 15394 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x50>
   15384:	eb0015bb 	bl	1aa78 <assertion_failed>
   15388:	e5940000 	ldr	r0, [r4]
   1538c:	e8bd4010 	pop	{r4, lr}
   15390:	ea0016d6 	b	1aef0 <CClassAllocator::Allocate()>
   15394:	000265d0 	.word	0x000265d0
   15398:	000265ec 	.word	0x000265ec
   1539c:	0002b948 	.word	0x0002b948
   153a0:	00024f14 	.word	0x00024f14

000153a4 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)>:
   153a4:	e3510008 	cmp	r1, #8
   153a8:	e92d4070 	push	{r4, r5, r6, lr}
   153ac:	e1a05000 	mov	r5, r0
   153b0:	0a000003 	beq	153c4 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x20>
   153b4:	e3a0205a 	mov	r2, #90	; 0x5a
   153b8:	e59f1040 	ldr	r1, [pc, #64]	; 15400 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x5c>
   153bc:	e59f0040 	ldr	r0, [pc, #64]	; 15404 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x60>
   153c0:	eb0015ac 	bl	1aa78 <assertion_failed>
   153c4:	e59f403c 	ldr	r4, [pc, #60]	; 15408 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x64>
   153c8:	e5940000 	ldr	r0, [r4]
   153cc:	e3500000 	cmp	r0, #0
   153d0:	0a000002 	beq	153e0 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x3c>
   153d4:	e1a01005 	mov	r1, r5
   153d8:	e8bd4070 	pop	{r4, r5, r6, lr}
   153dc:	ea0016fe 	b	1afdc <CClassAllocator::Free(void*)>
   153e0:	e59f1018 	ldr	r1, [pc, #24]	; 15400 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x5c>
   153e4:	e59f0020 	ldr	r0, [pc, #32]	; 1540c <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x68>
   153e8:	e3a0205a 	mov	r2, #90	; 0x5a
   153ec:	eb0015a1 	bl	1aa78 <assertion_failed>
   153f0:	e5940000 	ldr	r0, [r4]
   153f4:	e1a01005 	mov	r1, r5
   153f8:	e8bd4070 	pop	{r4, r5, r6, lr}
   153fc:	ea0016f6 	b	1afdc <CClassAllocator::Free(void*)>
   15400:	000265d0 	.word	0x000265d0
   15404:	000265ec 	.word	0x000265ec
   15408:	0002b948 	.word	0x0002b948
   1540c:	00024f14 	.word	0x00024f14

00015410 <CDWHCIFrameSchedulerNoSplit::~CDWHCIFrameSchedulerNoSplit()>:
   15410:	e92d4010 	push	{r4, lr}
   15414:	e1a04000 	mov	r4, r0
   15418:	e3a01008 	mov	r1, #8
   1541c:	ebffffe0 	bl	153a4 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)>
   15420:	e1a00004 	mov	r0, r4
   15424:	e8bd8010 	pop	{r4, pc}

00015428 <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)>:
   15428:	e92d4070 	push	{r4, r5, r6, lr}
   1542c:	e59f4040 	ldr	r4, [pc, #64]	; 15474 <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)+0x4c>
   15430:	e1a06000 	mov	r6, r0
   15434:	e5943000 	ldr	r3, [r4]
   15438:	e3530000 	cmp	r3, #0
   1543c:	0a000003 	beq	15450 <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)+0x28>
   15440:	e3a0205a 	mov	r2, #90	; 0x5a
   15444:	e59f102c 	ldr	r1, [pc, #44]	; 15478 <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)+0x50>
   15448:	e59f002c 	ldr	r0, [pc, #44]	; 1547c <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)+0x54>
   1544c:	eb001589 	bl	1aa78 <assertion_failed>
   15450:	e3a0001c 	mov	r0, #28
   15454:	eb00364c 	bl	22d8c <operator new(unsigned int)>
   15458:	e1a05000 	mov	r5, r0
   1545c:	e1a02006 	mov	r2, r6
   15460:	e59f3018 	ldr	r3, [pc, #24]	; 15480 <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)+0x58>
   15464:	e3a01008 	mov	r1, #8
   15468:	eb001687 	bl	1ae8c <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
   1546c:	e5845000 	str	r5, [r4]
   15470:	e8bd8070 	pop	{r4, r5, r6, pc}
   15474:	0002b948 	.word	0x0002b948
   15478:	000265d0 	.word	0x000265d0
   1547c:	00024f28 	.word	0x00024f28
   15480:	0002661c 	.word	0x0002661c

00015484 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)>:
   15484:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   15488:	e59f4054 	ldr	r4, [pc, #84]	; 154e4 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)+0x60>
   1548c:	e24dd00c 	sub	sp, sp, #12
   15490:	e5943000 	ldr	r3, [r4]
   15494:	e1a06000 	mov	r6, r0
   15498:	e3530000 	cmp	r3, #0
   1549c:	e1a07001 	mov	r7, r1
   154a0:	0a000003 	beq	154b4 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)+0x30>
   154a4:	e3a0205a 	mov	r2, #90	; 0x5a
   154a8:	e59f1038 	ldr	r1, [pc, #56]	; 154e8 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)+0x64>
   154ac:	e59f0038 	ldr	r0, [pc, #56]	; 154ec <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)+0x68>
   154b0:	eb001570 	bl	1aa78 <assertion_failed>
   154b4:	e3a0001c 	mov	r0, #28
   154b8:	eb003633 	bl	22d8c <operator new(unsigned int)>
   154bc:	e59f102c 	ldr	r1, [pc, #44]	; 154f0 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)+0x6c>
   154c0:	e1a03007 	mov	r3, r7
   154c4:	e58d1000 	str	r1, [sp]
   154c8:	e1a02006 	mov	r2, r6
   154cc:	e3a01008 	mov	r1, #8
   154d0:	e1a05000 	mov	r5, r0
   154d4:	eb001678 	bl	1aebc <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
   154d8:	e5845000 	str	r5, [r4]
   154dc:	e28dd00c 	add	sp, sp, #12
   154e0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   154e4:	0002b948 	.word	0x0002b948
   154e8:	000265d0 	.word	0x000265d0
   154ec:	00024f28 	.word	0x00024f28
   154f0:	0002661c 	.word	0x0002661c

000154f4 <CUSBPrinterDevice::~CUSBPrinterDevice()>:
   154f4:	e92d4070 	push	{r4, r5, r6, lr}
   154f8:	e5905018 	ldr	r5, [r0, #24]
   154fc:	e59f3060 	ldr	r3, [pc, #96]	; 15564 <CUSBPrinterDevice::~CUSBPrinterDevice()+0x70>
   15500:	e3550000 	cmp	r5, #0
   15504:	e1a04000 	mov	r4, r0
   15508:	e5803000 	str	r3, [r0]
   1550c:	0a000004 	beq	15524 <CUSBPrinterDevice::~CUSBPrinterDevice()+0x30>
   15510:	e1a00005 	mov	r0, r5
   15514:	ebffe4f0 	bl	e8dc <CUSBEndpoint::~CUSBEndpoint()>
   15518:	e1a00005 	mov	r0, r5
   1551c:	e3a01014 	mov	r1, #20
   15520:	eb00361d 	bl	22d9c <operator delete(void*, unsigned int)>
   15524:	e3a03000 	mov	r3, #0
   15528:	e5945014 	ldr	r5, [r4, #20]
   1552c:	e5843018 	str	r3, [r4, #24]
   15530:	e1550003 	cmp	r5, r3
   15534:	0a000004 	beq	1554c <CUSBPrinterDevice::~CUSBPrinterDevice()+0x58>
   15538:	e1a00005 	mov	r0, r5
   1553c:	ebffe4e6 	bl	e8dc <CUSBEndpoint::~CUSBEndpoint()>
   15540:	e1a00005 	mov	r0, r5
   15544:	e3a01014 	mov	r1, #20
   15548:	eb003613 	bl	22d9c <operator delete(void*, unsigned int)>
   1554c:	e3a03000 	mov	r3, #0
   15550:	e1a00004 	mov	r0, r4
   15554:	e5843014 	str	r3, [r4, #20]
   15558:	ebfffd79 	bl	14b44 <CUSBFunction::~CUSBFunction()>
   1555c:	e1a00004 	mov	r0, r4
   15560:	e8bd8070 	pop	{r4, r5, r6, pc}
   15564:	00026640 	.word	0x00026640

00015568 <CUSBPrinterDevice::~CUSBPrinterDevice()>:
   15568:	e92d4010 	push	{r4, lr}
   1556c:	e1a04000 	mov	r4, r0
   15570:	ebffffdf 	bl	154f4 <CUSBPrinterDevice::~CUSBPrinterDevice()>
   15574:	e1a00004 	mov	r0, r4
   15578:	e3a0101c 	mov	r1, #28
   1557c:	eb003606 	bl	22d9c <operator delete(void*, unsigned int)>
   15580:	e1a00004 	mov	r0, r4
   15584:	e8bd8010 	pop	{r4, pc}

00015588 <CUSBPrinterDevice::Write(void const*, unsigned int)>:
   15588:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1558c:	e2517000 	subs	r7, r1, #0
   15590:	e24dd00c 	sub	sp, sp, #12
   15594:	e1a05000 	mov	r5, r0
   15598:	e1a04002 	mov	r4, r2
   1559c:	0a000016 	beq	155fc <CUSBPrinterDevice::Write(void const*, unsigned int)+0x74>
   155a0:	e3540000 	cmp	r4, #0
   155a4:	0a00000f 	beq	155e8 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x60>
   155a8:	e1a00005 	mov	r0, r5
   155ac:	ebfffe3f 	bl	14eb0 <CUSBFunction::GetHost() const>
   155b0:	e2506000 	subs	r6, r0, #0
   155b4:	0a000015 	beq	15610 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x88>
   155b8:	e3a03000 	mov	r3, #0
   155bc:	e5951018 	ldr	r1, [r5, #24]
   155c0:	e1a02007 	mov	r2, r7
   155c4:	e58d3000 	str	r3, [sp]
   155c8:	e1a00006 	mov	r0, r6
   155cc:	e1a03004 	mov	r3, r4
   155d0:	ebffe5ab 	bl	ec84 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   155d4:	e3500000 	cmp	r0, #0
   155d8:	a1a00004 	movge	r0, r4
   155dc:	b3e00000 	mvnlt	r0, #0
   155e0:	e28dd00c 	add	sp, sp, #12
   155e4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   155e8:	e3a0207f 	mov	r2, #127	; 0x7f
   155ec:	e59f1030 	ldr	r1, [pc, #48]	; 15624 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x9c>
   155f0:	e59f0030 	ldr	r0, [pc, #48]	; 15628 <CUSBPrinterDevice::Write(void const*, unsigned int)+0xa0>
   155f4:	eb00151f 	bl	1aa78 <assertion_failed>
   155f8:	eaffffea 	b	155a8 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x20>
   155fc:	e3a0207e 	mov	r2, #126	; 0x7e
   15600:	e59f101c 	ldr	r1, [pc, #28]	; 15624 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x9c>
   15604:	e59f0020 	ldr	r0, [pc, #32]	; 1562c <CUSBPrinterDevice::Write(void const*, unsigned int)+0xa4>
   15608:	eb00151a 	bl	1aa78 <assertion_failed>
   1560c:	eaffffe3 	b	155a0 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x18>
   15610:	e3a02082 	mov	r2, #130	; 0x82
   15614:	e59f1008 	ldr	r1, [pc, #8]	; 15624 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x9c>
   15618:	e59f0010 	ldr	r0, [pc, #16]	; 15630 <CUSBPrinterDevice::Write(void const*, unsigned int)+0xa8>
   1561c:	eb001515 	bl	1aa78 <assertion_failed>
   15620:	eaffffe4 	b	155b8 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x30>
   15624:	00026664 	.word	0x00026664
   15628:	00026674 	.word	0x00026674
   1562c:	00025930 	.word	0x00025930
   15630:	00025694 	.word	0x00025694

00015634 <CUSBPrinterDevice::CUSBPrinterDevice(CUSBFunction*)>:
   15634:	e92d4010 	push	{r4, lr}
   15638:	e1a04000 	mov	r4, r0
   1563c:	ebfffd8e 	bl	14c7c <CUSBFunction::CUSBFunction(CUSBFunction*)>
   15640:	e3a03000 	mov	r3, #0
   15644:	e59f2014 	ldr	r2, [pc, #20]	; 15660 <CUSBPrinterDevice::CUSBPrinterDevice(CUSBFunction*)+0x2c>
   15648:	e5c43010 	strb	r3, [r4, #16]
   1564c:	e5842000 	str	r2, [r4]
   15650:	e5843014 	str	r3, [r4, #20]
   15654:	e5843018 	str	r3, [r4, #24]
   15658:	e1a00004 	mov	r0, r4
   1565c:	e8bd8010 	pop	{r4, pc}
   15660:	00026640 	.word	0x00026640

00015664 <CUSBPrinterDevice::Configure()>:
   15664:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   15668:	e24dd01c 	sub	sp, sp, #28
   1566c:	e1a05000 	mov	r5, r0
   15670:	ebfffee8 	bl	15218 <CUSBFunction::GetInterfaceProtocol() const>
   15674:	e2403001 	sub	r3, r0, #1
   15678:	e3530001 	cmp	r3, #1
   1567c:	e5c50010 	strb	r0, [r5, #16]
   15680:	9a00000a 	bls	156b0 <CUSBPrinterDevice::Configure()+0x4c>
   15684:	eb001eee 	bl	1d244 <CLogger::Get()>
   15688:	e5d52010 	ldrb	r2, [r5, #16]
   1568c:	e59f31d8 	ldr	r3, [pc, #472]	; 1586c <CUSBPrinterDevice::Configure()+0x208>
   15690:	e58d2000 	str	r2, [sp]
   15694:	e59f11d4 	ldr	r1, [pc, #468]	; 15870 <CUSBPrinterDevice::Configure()+0x20c>
   15698:	e3a02001 	mov	r2, #1
   1569c:	eb002091 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   156a0:	e3a04000 	mov	r4, #0
   156a4:	e1a00004 	mov	r0, r4
   156a8:	e28dd01c 	add	sp, sp, #28
   156ac:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   156b0:	e1a00005 	mov	r0, r5
   156b4:	ebfffdcc 	bl	14dec <CUSBFunction::GetNumEndpoints() const>
   156b8:	e5d53010 	ldrb	r3, [r5, #16]
   156bc:	e3530001 	cmp	r3, #1
   156c0:	03a03001 	moveq	r3, #1
   156c4:	13a03002 	movne	r3, #2
   156c8:	e1530000 	cmp	r3, r0
   156cc:	d3a06005 	movle	r6, #5
   156d0:	d3a07014 	movle	r7, #20
   156d4:	da000004 	ble	156ec <CUSBPrinterDevice::Configure()+0x88>
   156d8:	ea000053 	b	1582c <CUSBPrinterDevice::Configure()+0x1c8>
   156dc:	e5d43003 	ldrb	r3, [r4, #3]
   156e0:	e203303f 	and	r3, r3, #63	; 0x3f
   156e4:	e3530002 	cmp	r3, #2
   156e8:	0a000028 	beq	15790 <CUSBPrinterDevice::Configure()+0x12c>
   156ec:	e1a01006 	mov	r1, r6
   156f0:	e1a00005 	mov	r0, r5
   156f4:	ebfffe2f 	bl	14fb8 <CUSBFunction::GetDescriptor(unsigned char)>
   156f8:	e2504000 	subs	r4, r0, #0
   156fc:	1afffff6 	bne	156dc <CUSBPrinterDevice::Configure()+0x78>
   15700:	e5954018 	ldr	r4, [r5, #24]
   15704:	e3540000 	cmp	r4, #0
   15708:	0a00004c 	beq	15840 <CUSBPrinterDevice::Configure()+0x1dc>
   1570c:	e5d53010 	ldrb	r3, [r5, #16]
   15710:	e1a00005 	mov	r0, r5
   15714:	e3530001 	cmp	r3, #1
   15718:	0a000002 	beq	15728 <CUSBPrinterDevice::Configure()+0xc4>
   1571c:	e5954014 	ldr	r4, [r5, #20]
   15720:	e3540000 	cmp	r4, #0
   15724:	0a000049 	beq	15850 <CUSBPrinterDevice::Configure()+0x1ec>
   15728:	ebfffdf1 	bl	14ef4 <CUSBFunction::Configure()>
   1572c:	e2504000 	subs	r4, r0, #0
   15730:	0a000027 	beq	157d4 <CUSBPrinterDevice::Configure()+0x170>
   15734:	e28d0008 	add	r0, sp, #8
   15738:	eb00297f 	bl	1fd3c <CString::CString()>
   1573c:	e59f3130 	ldr	r3, [pc, #304]	; 15874 <CUSBPrinterDevice::Configure()+0x210>
   15740:	e59f1130 	ldr	r1, [pc, #304]	; 15878 <CUSBPrinterDevice::Configure()+0x214>
   15744:	e5932000 	ldr	r2, [r3]
   15748:	e28d0008 	add	r0, sp, #8
   1574c:	e282c001 	add	ip, r2, #1
   15750:	e583c000 	str	ip, [r3]
   15754:	eb002d66 	bl	20cf4 <CString::Format(char const*, ...)>
   15758:	eb0017bf 	bl	1b65c <CDeviceNameService::Get()>
   1575c:	e1a06000 	mov	r6, r0
   15760:	e28d0008 	add	r0, sp, #8
   15764:	eb00298a 	bl	1fd94 <CString::operator char const*() const>
   15768:	e1a02005 	mov	r2, r5
   1576c:	e1a01000 	mov	r1, r0
   15770:	e3a03000 	mov	r3, #0
   15774:	e1a00006 	mov	r0, r6
   15778:	eb0016f7 	bl	1b35c <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   1577c:	e28d0008 	add	r0, sp, #8
   15780:	eb00293a 	bl	1fc70 <CString::~CString()>
   15784:	e1a00004 	mov	r0, r4
   15788:	e28dd01c 	add	sp, sp, #28
   1578c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   15790:	e1d430d2 	ldrsb	r3, [r4, #2]
   15794:	e3530000 	cmp	r3, #0
   15798:	ba000015 	blt	157f4 <CUSBPrinterDevice::Configure()+0x190>
   1579c:	e5953018 	ldr	r3, [r5, #24]
   157a0:	e1a00005 	mov	r0, r5
   157a4:	e3530000 	cmp	r3, #0
   157a8:	1a00002b 	bne	1585c <CUSBPrinterDevice::Configure()+0x1f8>
   157ac:	ebfffd9e 	bl	14e2c <CUSBFunction::GetDevice() const>
   157b0:	e1a09000 	mov	r9, r0
   157b4:	e1a00007 	mov	r0, r7
   157b8:	eb003573 	bl	22d8c <operator new(unsigned int)>
   157bc:	e1a08000 	mov	r8, r0
   157c0:	e1a02004 	mov	r2, r4
   157c4:	e1a01009 	mov	r1, r9
   157c8:	ebffe3b1 	bl	e694 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   157cc:	e5858018 	str	r8, [r5, #24]
   157d0:	eaffffc5 	b	156ec <CUSBPrinterDevice::Configure()+0x88>
   157d4:	eb001e9a 	bl	1d244 <CLogger::Get()>
   157d8:	e59f309c 	ldr	r3, [pc, #156]	; 1587c <CUSBPrinterDevice::Configure()+0x218>
   157dc:	e3a02001 	mov	r2, #1
   157e0:	e59f1088 	ldr	r1, [pc, #136]	; 15870 <CUSBPrinterDevice::Configure()+0x20c>
   157e4:	eb00203f 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   157e8:	e1a00004 	mov	r0, r4
   157ec:	e28dd01c 	add	sp, sp, #28
   157f0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   157f4:	e5953014 	ldr	r3, [r5, #20]
   157f8:	e1a00005 	mov	r0, r5
   157fc:	e3530000 	cmp	r3, #0
   15800:	1a000015 	bne	1585c <CUSBPrinterDevice::Configure()+0x1f8>
   15804:	ebfffd88 	bl	14e2c <CUSBFunction::GetDevice() const>
   15808:	e1a09000 	mov	r9, r0
   1580c:	e1a00007 	mov	r0, r7
   15810:	eb00355d 	bl	22d8c <operator new(unsigned int)>
   15814:	e1a08000 	mov	r8, r0
   15818:	e1a02004 	mov	r2, r4
   1581c:	e1a01009 	mov	r1, r9
   15820:	ebffe39b 	bl	e694 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   15824:	e5858014 	str	r8, [r5, #20]
   15828:	eaffffaf 	b	156ec <CUSBPrinterDevice::Configure()+0x88>
   1582c:	e1a00005 	mov	r0, r5
   15830:	e59f1038 	ldr	r1, [pc, #56]	; 15870 <CUSBPrinterDevice::Configure()+0x20c>
   15834:	ebfffdf2 	bl	15004 <CUSBFunction::ConfigurationError(char const*) const>
   15838:	e3a04000 	mov	r4, #0
   1583c:	eaffff98 	b	156a4 <CUSBPrinterDevice::Configure()+0x40>
   15840:	e1a00005 	mov	r0, r5
   15844:	e59f1024 	ldr	r1, [pc, #36]	; 15870 <CUSBPrinterDevice::Configure()+0x20c>
   15848:	ebfffded 	bl	15004 <CUSBFunction::ConfigurationError(char const*) const>
   1584c:	eaffff94 	b	156a4 <CUSBPrinterDevice::Configure()+0x40>
   15850:	e59f1018 	ldr	r1, [pc, #24]	; 15870 <CUSBPrinterDevice::Configure()+0x20c>
   15854:	ebfffdea 	bl	15004 <CUSBFunction::ConfigurationError(char const*) const>
   15858:	eaffff91 	b	156a4 <CUSBPrinterDevice::Configure()+0x40>
   1585c:	e59f100c 	ldr	r1, [pc, #12]	; 15870 <CUSBPrinterDevice::Configure()+0x20c>
   15860:	ebfffde7 	bl	15004 <CUSBFunction::ConfigurationError(char const*) const>
   15864:	e3a04000 	mov	r4, #0
   15868:	eaffff8d 	b	156a4 <CUSBPrinterDevice::Configure()+0x40>
   1586c:	00026680 	.word	0x00026680
   15870:	0002665c 	.word	0x0002665c
   15874:	0002b6e0 	.word	0x0002b6e0
   15878:	000266a0 	.word	0x000266a0
   1587c:	00025834 	.word	0x00025834

00015880 <CUSBBluetoothDevice::~CUSBBluetoothDevice()>:
   15880:	e3a03000 	mov	r3, #0
   15884:	e92d4070 	push	{r4, r5, r6, lr}
   15888:	e1a04000 	mov	r4, r0
   1588c:	e5900020 	ldr	r0, [r0, #32]
   15890:	e59f20a0 	ldr	r2, [pc, #160]	; 15938 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0xb8>
   15894:	e1500003 	cmp	r0, r3
   15898:	e5842000 	str	r2, [r4]
   1589c:	e5843024 	str	r3, [r4, #36]	; 0x24
   158a0:	0a000000 	beq	158a8 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0x28>
   158a4:	eb00353b 	bl	22d98 <operator delete[](void*)>
   158a8:	e3a03000 	mov	r3, #0
   158ac:	e5945018 	ldr	r5, [r4, #24]
   158b0:	e5843020 	str	r3, [r4, #32]
   158b4:	e1550003 	cmp	r5, r3
   158b8:	0a000004 	beq	158d0 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0x50>
   158bc:	e1a00005 	mov	r0, r5
   158c0:	ebffe405 	bl	e8dc <CUSBEndpoint::~CUSBEndpoint()>
   158c4:	e1a00005 	mov	r0, r5
   158c8:	e3a01014 	mov	r1, #20
   158cc:	eb003532 	bl	22d9c <operator delete(void*, unsigned int)>
   158d0:	e3a03000 	mov	r3, #0
   158d4:	e5945014 	ldr	r5, [r4, #20]
   158d8:	e5843018 	str	r3, [r4, #24]
   158dc:	e1550003 	cmp	r5, r3
   158e0:	0a000004 	beq	158f8 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0x78>
   158e4:	e1a00005 	mov	r0, r5
   158e8:	ebffe3fb 	bl	e8dc <CUSBEndpoint::~CUSBEndpoint()>
   158ec:	e1a00005 	mov	r0, r5
   158f0:	e3a01014 	mov	r1, #20
   158f4:	eb003528 	bl	22d9c <operator delete(void*, unsigned int)>
   158f8:	e3a03000 	mov	r3, #0
   158fc:	e5945010 	ldr	r5, [r4, #16]
   15900:	e5843014 	str	r3, [r4, #20]
   15904:	e1550003 	cmp	r5, r3
   15908:	0a000004 	beq	15920 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0xa0>
   1590c:	e1a00005 	mov	r0, r5
   15910:	ebffe3f1 	bl	e8dc <CUSBEndpoint::~CUSBEndpoint()>
   15914:	e1a00005 	mov	r0, r5
   15918:	e3a01014 	mov	r1, #20
   1591c:	eb00351e 	bl	22d9c <operator delete(void*, unsigned int)>
   15920:	e3a03000 	mov	r3, #0
   15924:	e1a00004 	mov	r0, r4
   15928:	e5843010 	str	r3, [r4, #16]
   1592c:	ebfffc84 	bl	14b44 <CUSBFunction::~CUSBFunction()>
   15930:	e1a00004 	mov	r0, r4
   15934:	e8bd8070 	pop	{r4, r5, r6, pc}
   15938:	000266b0 	.word	0x000266b0

0001593c <CUSBBluetoothDevice::~CUSBBluetoothDevice()>:
   1593c:	e92d4010 	push	{r4, lr}
   15940:	e1a04000 	mov	r4, r0
   15944:	ebffffcd 	bl	15880 <CUSBBluetoothDevice::~CUSBBluetoothDevice()>
   15948:	e1a00004 	mov	r0, r4
   1594c:	e3a01028 	mov	r1, #40	; 0x28
   15950:	eb003511 	bl	22d9c <operator delete(void*, unsigned int)>
   15954:	e1a00004 	mov	r0, r4
   15958:	e8bd8010 	pop	{r4, pc}

0001595c <CUSBBluetoothDevice::CUSBBluetoothDevice(CUSBFunction*)>:
   1595c:	e92d4010 	push	{r4, lr}
   15960:	e1a04000 	mov	r4, r0
   15964:	ebfffcc4 	bl	14c7c <CUSBFunction::CUSBFunction(CUSBFunction*)>
   15968:	e3a03000 	mov	r3, #0
   1596c:	e59f2020 	ldr	r2, [pc, #32]	; 15994 <CUSBBluetoothDevice::CUSBBluetoothDevice(CUSBFunction*)+0x38>
   15970:	e5843010 	str	r3, [r4, #16]
   15974:	e5842000 	str	r2, [r4]
   15978:	e5843014 	str	r3, [r4, #20]
   1597c:	e5843018 	str	r3, [r4, #24]
   15980:	e584301c 	str	r3, [r4, #28]
   15984:	e5843020 	str	r3, [r4, #32]
   15988:	e5843024 	str	r3, [r4, #36]	; 0x24
   1598c:	e1a00004 	mov	r0, r4
   15990:	e8bd8010 	pop	{r4, pc}
   15994:	000266b0 	.word	0x000266b0

00015998 <CUSBBluetoothDevice::SendHCICommand(void const*, unsigned int)>:
   15998:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1599c:	e24dd014 	sub	sp, sp, #20
   159a0:	e1a06001 	mov	r6, r1
   159a4:	e1a04002 	mov	r4, r2
   159a8:	e1a07000 	mov	r7, r0
   159ac:	ebfffd3f 	bl	14eb0 <CUSBFunction::GetHost() const>
   159b0:	e1a05000 	mov	r5, r0
   159b4:	e1a00007 	mov	r0, r7
   159b8:	ebfffd2b 	bl	14e6c <CUSBFunction::GetEndpoint0() const>
   159bc:	e3a03000 	mov	r3, #0
   159c0:	e6ff4074 	uxth	r4, r4
   159c4:	e1a01000 	mov	r1, r0
   159c8:	e58d6008 	str	r6, [sp, #8]
   159cc:	e58d400c 	str	r4, [sp, #12]
   159d0:	e1a00005 	mov	r0, r5
   159d4:	e58d3004 	str	r3, [sp, #4]
   159d8:	e58d3000 	str	r3, [sp]
   159dc:	e3a02020 	mov	r2, #32
   159e0:	ebffe441 	bl	eaec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   159e4:	e1e00000 	mvn	r0, r0
   159e8:	e1a00fa0 	lsr	r0, r0, #31
   159ec:	e28dd014 	add	sp, sp, #20
   159f0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

000159f4 <CUSBBluetoothDevice::StartRequest()>:
   159f4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   159f8:	e5903010 	ldr	r3, [r0, #16]
   159fc:	e24dd00c 	sub	sp, sp, #12
   15a00:	e3530000 	cmp	r3, #0
   15a04:	e1a04000 	mov	r4, r0
   15a08:	0a000037 	beq	15aec <CUSBBluetoothDevice::StartRequest()+0xf8>
   15a0c:	e5943020 	ldr	r3, [r4, #32]
   15a10:	e3530000 	cmp	r3, #0
   15a14:	0a00002f 	beq	15ad8 <CUSBBluetoothDevice::StartRequest()+0xe4>
   15a18:	e594601c 	ldr	r6, [r4, #28]
   15a1c:	e3560000 	cmp	r6, #0
   15a20:	0a00001e 	beq	15aa0 <CUSBBluetoothDevice::StartRequest()+0xac>
   15a24:	e3a020a6 	mov	r2, #166	; 0xa6
   15a28:	e59f10d0 	ldr	r1, [pc, #208]	; 15b00 <CUSBBluetoothDevice::StartRequest()+0x10c>
   15a2c:	e59f00d0 	ldr	r0, [pc, #208]	; 15b04 <CUSBBluetoothDevice::StartRequest()+0x110>
   15a30:	eb001410 	bl	1aa78 <assertion_failed>
   15a34:	e5940010 	ldr	r0, [r4, #16]
   15a38:	ebffe3c0 	bl	e940 <CUSBEndpoint::GetMaxPacketSize() const>
   15a3c:	e1a06000 	mov	r6, r0
   15a40:	e3a00028 	mov	r0, #40	; 0x28
   15a44:	ebffe53e 	bl	ef44 <CUSBRequest::operator new(unsigned int)>
   15a48:	e3a0c000 	mov	ip, #0
   15a4c:	e1a05000 	mov	r5, r0
   15a50:	e5942020 	ldr	r2, [r4, #32]
   15a54:	e5941010 	ldr	r1, [r4, #16]
   15a58:	e1a03006 	mov	r3, r6
   15a5c:	e58dc000 	str	ip, [sp]
   15a60:	ebffe4a0 	bl	ece8 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   15a64:	e1a00005 	mov	r0, r5
   15a68:	e584501c 	str	r5, [r4, #28]
   15a6c:	e1a03004 	mov	r3, r4
   15a70:	e3a02000 	mov	r2, #0
   15a74:	e59f108c 	ldr	r1, [pc, #140]	; 15b08 <CUSBBluetoothDevice::StartRequest()+0x114>
   15a78:	ebffe50f 	bl	eebc <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   15a7c:	e1a00004 	mov	r0, r4
   15a80:	ebfffd0a 	bl	14eb0 <CUSBFunction::GetHost() const>
   15a84:	e3a02000 	mov	r2, #0
   15a88:	e5903000 	ldr	r3, [r0]
   15a8c:	e594101c 	ldr	r1, [r4, #28]
   15a90:	e593300c 	ldr	r3, [r3, #12]
   15a94:	e28dd00c 	add	sp, sp, #12
   15a98:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   15a9c:	e12fff13 	bx	r3
   15aa0:	e5940010 	ldr	r0, [r4, #16]
   15aa4:	ebffe3a5 	bl	e940 <CUSBEndpoint::GetMaxPacketSize() const>
   15aa8:	e1a07000 	mov	r7, r0
   15aac:	e3a00028 	mov	r0, #40	; 0x28
   15ab0:	ebffe523 	bl	ef44 <CUSBRequest::operator new(unsigned int)>
   15ab4:	e1a05000 	mov	r5, r0
   15ab8:	e5942020 	ldr	r2, [r4, #32]
   15abc:	e5941010 	ldr	r1, [r4, #16]
   15ac0:	e1a03007 	mov	r3, r7
   15ac4:	e58d6000 	str	r6, [sp]
   15ac8:	ebffe486 	bl	ece8 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   15acc:	e584501c 	str	r5, [r4, #28]
   15ad0:	e1a00005 	mov	r0, r5
   15ad4:	eaffffe4 	b	15a6c <CUSBBluetoothDevice::StartRequest()+0x78>
   15ad8:	e3a020a4 	mov	r2, #164	; 0xa4
   15adc:	e59f101c 	ldr	r1, [pc, #28]	; 15b00 <CUSBBluetoothDevice::StartRequest()+0x10c>
   15ae0:	e59f0024 	ldr	r0, [pc, #36]	; 15b0c <CUSBBluetoothDevice::StartRequest()+0x118>
   15ae4:	eb0013e3 	bl	1aa78 <assertion_failed>
   15ae8:	eaffffca 	b	15a18 <CUSBBluetoothDevice::StartRequest()+0x24>
   15aec:	e3a020a3 	mov	r2, #163	; 0xa3
   15af0:	e59f1008 	ldr	r1, [pc, #8]	; 15b00 <CUSBBluetoothDevice::StartRequest()+0x10c>
   15af4:	e59f0014 	ldr	r0, [pc, #20]	; 15b10 <CUSBBluetoothDevice::StartRequest()+0x11c>
   15af8:	eb0013de 	bl	1aa78 <assertion_failed>
   15afc:	eaffffc2 	b	15a0c <CUSBBluetoothDevice::StartRequest()+0x18>
   15b00:	000266d4 	.word	0x000266d4
   15b04:	00025eb0 	.word	0x00025eb0
   15b08:	00015c8c 	.word	0x00015c8c
   15b0c:	00026704 	.word	0x00026704
   15b10:	000266e8 	.word	0x000266e8

00015b14 <CUSBBluetoothDevice::RegisterHCIEventHandler(void (*)(void const*, unsigned int))>:
   15b14:	e3510000 	cmp	r1, #0
   15b18:	e92d4010 	push	{r4, lr}
   15b1c:	e1a04000 	mov	r4, r0
   15b20:	e5801024 	str	r1, [r0, #36]	; 0x24
   15b24:	0a000002 	beq	15b34 <CUSBBluetoothDevice::RegisterHCIEventHandler(void (*)(void const*, unsigned int))+0x20>
   15b28:	e1a00004 	mov	r0, r4
   15b2c:	e8bd4010 	pop	{r4, lr}
   15b30:	eaffffaf 	b	159f4 <CUSBBluetoothDevice::StartRequest()>
   15b34:	e59f0014 	ldr	r0, [pc, #20]	; 15b50 <CUSBBluetoothDevice::RegisterHCIEventHandler(void (*)(void const*, unsigned int))+0x3c>
   15b38:	e3a0209c 	mov	r2, #156	; 0x9c
   15b3c:	e59f1010 	ldr	r1, [pc, #16]	; 15b54 <CUSBBluetoothDevice::RegisterHCIEventHandler(void (*)(void const*, unsigned int))+0x40>
   15b40:	eb0013cc 	bl	1aa78 <assertion_failed>
   15b44:	e1a00004 	mov	r0, r4
   15b48:	e8bd4010 	pop	{r4, lr}
   15b4c:	eaffffa8 	b	159f4 <CUSBBluetoothDevice::StartRequest()>
   15b50:	00026718 	.word	0x00026718
   15b54:	000266d4 	.word	0x000266d4

00015b58 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)>:
   15b58:	e92d4070 	push	{r4, r5, r6, lr}
   15b5c:	e2515000 	subs	r5, r1, #0
   15b60:	e1a04000 	mov	r4, r0
   15b64:	0a000035 	beq	15c40 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xe8>
   15b68:	e594301c 	ldr	r3, [r4, #28]
   15b6c:	e1550003 	cmp	r5, r3
   15b70:	0a000003 	beq	15b84 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x2c>
   15b74:	e3a020b3 	mov	r2, #179	; 0xb3
   15b78:	e59f10ec 	ldr	r1, [pc, #236]	; 15c6c <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x114>
   15b7c:	e59f00ec 	ldr	r0, [pc, #236]	; 15c70 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x118>
   15b80:	eb0013bc 	bl	1aa78 <assertion_failed>
   15b84:	e5943020 	ldr	r3, [r4, #32]
   15b88:	e3530000 	cmp	r3, #0
   15b8c:	0a000026 	beq	15c2c <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xd4>
   15b90:	e1a00005 	mov	r0, r5
   15b94:	ebffe48d 	bl	edd0 <CUSBRequest::GetStatus() const>
   15b98:	e3500000 	cmp	r0, #0
   15b9c:	0a00001c 	beq	15c14 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xbc>
   15ba0:	e5946024 	ldr	r6, [r4, #36]	; 0x24
   15ba4:	e3560000 	cmp	r6, #0
   15ba8:	0a000029 	beq	15c54 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xfc>
   15bac:	e1a00005 	mov	r0, r5
   15bb0:	e5945020 	ldr	r5, [r4, #32]
   15bb4:	ebffe487 	bl	edd8 <CUSBRequest::GetResultLength() const>
   15bb8:	e1a01000 	mov	r1, r0
   15bbc:	e1a00005 	mov	r0, r5
   15bc0:	e12fff36 	blx	r6
   15bc4:	e594501c 	ldr	r5, [r4, #28]
   15bc8:	e3550000 	cmp	r5, #0
   15bcc:	0a000004 	beq	15be4 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x8c>
   15bd0:	e1a00005 	mov	r0, r5
   15bd4:	ebffe468 	bl	ed7c <CUSBRequest::~CUSBRequest()>
   15bd8:	e1a00005 	mov	r0, r5
   15bdc:	e3a01028 	mov	r1, #40	; 0x28
   15be0:	ebffe4ef 	bl	efa4 <CUSBRequest::operator delete(void*, unsigned int)>
   15be4:	e3a03000 	mov	r3, #0
   15be8:	e1a00004 	mov	r0, r4
   15bec:	e584301c 	str	r3, [r4, #28]
   15bf0:	ebffff7f 	bl	159f4 <CUSBBluetoothDevice::StartRequest()>
   15bf4:	e3500000 	cmp	r0, #0
   15bf8:	18bd8070 	popne	{r4, r5, r6, pc}
   15bfc:	eb001d90 	bl	1d244 <CLogger::Get()>
   15c00:	e8bd4070 	pop	{r4, r5, r6, lr}
   15c04:	e59f3068 	ldr	r3, [pc, #104]	; 15c74 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x11c>
   15c08:	e3a02001 	mov	r2, #1
   15c0c:	e59f1064 	ldr	r1, [pc, #100]	; 15c78 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x120>
   15c10:	ea001f34 	b	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15c14:	eb001d8a 	bl	1d244 <CLogger::Get()>
   15c18:	e59f305c 	ldr	r3, [pc, #92]	; 15c7c <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x124>
   15c1c:	e3a02002 	mov	r2, #2
   15c20:	e59f1050 	ldr	r1, [pc, #80]	; 15c78 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x120>
   15c24:	eb001f2f 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15c28:	eaffffe5 	b	15bc4 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x6c>
   15c2c:	e3a020b4 	mov	r2, #180	; 0xb4
   15c30:	e59f1034 	ldr	r1, [pc, #52]	; 15c6c <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x114>
   15c34:	e59f0044 	ldr	r0, [pc, #68]	; 15c80 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x128>
   15c38:	eb00138e 	bl	1aa78 <assertion_failed>
   15c3c:	eaffffd3 	b	15b90 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x38>
   15c40:	e3a020b2 	mov	r2, #178	; 0xb2
   15c44:	e59f1020 	ldr	r1, [pc, #32]	; 15c6c <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x114>
   15c48:	e59f0034 	ldr	r0, [pc, #52]	; 15c84 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x12c>
   15c4c:	eb001389 	bl	1aa78 <assertion_failed>
   15c50:	eaffffc4 	b	15b68 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x10>
   15c54:	e3a020b8 	mov	r2, #184	; 0xb8
   15c58:	e59f100c 	ldr	r1, [pc, #12]	; 15c6c <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x114>
   15c5c:	e59f0024 	ldr	r0, [pc, #36]	; 15c88 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x130>
   15c60:	eb001384 	bl	1aa78 <assertion_failed>
   15c64:	e5946024 	ldr	r6, [r4, #36]	; 0x24
   15c68:	eaffffcf 	b	15bac <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x54>
   15c6c:	000266d4 	.word	0x000266d4
   15c70:	00025ed4 	.word	0x00025ed4
   15c74:	00025ee4 	.word	0x00025ee4
   15c78:	000266cc 	.word	0x000266cc
   15c7c:	00026730 	.word	0x00026730
   15c80:	00026704 	.word	0x00026704
   15c84:	00024850 	.word	0x00024850
   15c88:	00026718 	.word	0x00026718

00015c8c <CUSBBluetoothDevice::CompletionStub(CUSBRequest*, void*, void*)>:
   15c8c:	e92d4070 	push	{r4, r5, r6, lr}
   15c90:	e2524000 	subs	r4, r2, #0
   15c94:	e1a05000 	mov	r5, r0
   15c98:	0a000003 	beq	15cac <CUSBBluetoothDevice::CompletionStub(CUSBRequest*, void*, void*)+0x20>
   15c9c:	e1a01005 	mov	r1, r5
   15ca0:	e1a00004 	mov	r0, r4
   15ca4:	e8bd4070 	pop	{r4, r5, r6, lr}
   15ca8:	eaffffaa 	b	15b58 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)>
   15cac:	e59f1018 	ldr	r1, [pc, #24]	; 15ccc <CUSBBluetoothDevice::CompletionStub(CUSBRequest*, void*, void*)+0x40>
   15cb0:	e59f0018 	ldr	r0, [pc, #24]	; 15cd0 <CUSBBluetoothDevice::CompletionStub(CUSBRequest*, void*, void*)+0x44>
   15cb4:	e3a020cc 	mov	r2, #204	; 0xcc
   15cb8:	eb00136e 	bl	1aa78 <assertion_failed>
   15cbc:	e1a01005 	mov	r1, r5
   15cc0:	e1a00004 	mov	r0, r4
   15cc4:	e8bd4070 	pop	{r4, r5, r6, lr}
   15cc8:	eaffffa2 	b	15b58 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)>
   15ccc:	000266d4 	.word	0x000266d4
   15cd0:	00024764 	.word	0x00024764

00015cd4 <CUSBBluetoothDevice::Configure()>:
   15cd4:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   15cd8:	e24dd014 	sub	sp, sp, #20
   15cdc:	e1a05000 	mov	r5, r0
   15ce0:	ebfffd1c 	bl	15158 <CUSBFunction::GetInterfaceNumber() const>
   15ce4:	e2506000 	subs	r6, r0, #0
   15ce8:	1a000043 	bne	15dfc <CUSBBluetoothDevice::Configure()+0x128>
   15cec:	e1a00005 	mov	r0, r5
   15cf0:	ebfffc3d 	bl	14dec <CUSBFunction::GetNumEndpoints() const>
   15cf4:	e3500003 	cmp	r0, #3
   15cf8:	03a06005 	moveq	r6, #5
   15cfc:	03a07014 	moveq	r7, #20
   15d00:	1a000037 	bne	15de4 <CUSBBluetoothDevice::Configure()+0x110>
   15d04:	e1a01006 	mov	r1, r6
   15d08:	e1a00005 	mov	r0, r5
   15d0c:	ebfffca9 	bl	14fb8 <CUSBFunction::GetDescriptor(unsigned char)>
   15d10:	e2504000 	subs	r4, r0, #0
   15d14:	0a000041 	beq	15e20 <CUSBBluetoothDevice::Configure()+0x14c>
   15d18:	e5d42003 	ldrb	r2, [r4, #3]
   15d1c:	e202203f 	and	r2, r2, #63	; 0x3f
   15d20:	e3520002 	cmp	r2, #2
   15d24:	0a00000f 	beq	15d68 <CUSBBluetoothDevice::Configure()+0x94>
   15d28:	e3520003 	cmp	r2, #3
   15d2c:	1afffff4 	bne	15d04 <CUSBBluetoothDevice::Configure()+0x30>
   15d30:	e5953010 	ldr	r3, [r5, #16]
   15d34:	e1a00005 	mov	r0, r5
   15d38:	e3530000 	cmp	r3, #0
   15d3c:	1a000060 	bne	15ec4 <CUSBBluetoothDevice::Configure()+0x1f0>
   15d40:	ebfffc39 	bl	14e2c <CUSBFunction::GetDevice() const>
   15d44:	e1a09000 	mov	r9, r0
   15d48:	e1a00007 	mov	r0, r7
   15d4c:	eb00340e 	bl	22d8c <operator new(unsigned int)>
   15d50:	e1a08000 	mov	r8, r0
   15d54:	e1a02004 	mov	r2, r4
   15d58:	e1a01009 	mov	r1, r9
   15d5c:	ebffe24c 	bl	e694 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   15d60:	e5858010 	str	r8, [r5, #16]
   15d64:	eaffffe6 	b	15d04 <CUSBBluetoothDevice::Configure()+0x30>
   15d68:	e1d430d2 	ldrsb	r3, [r4, #2]
   15d6c:	e3530000 	cmp	r3, #0
   15d70:	ba00000d 	blt	15dac <CUSBBluetoothDevice::Configure()+0xd8>
   15d74:	e5953018 	ldr	r3, [r5, #24]
   15d78:	e1a00005 	mov	r0, r5
   15d7c:	e3530000 	cmp	r3, #0
   15d80:	1a00004f 	bne	15ec4 <CUSBBluetoothDevice::Configure()+0x1f0>
   15d84:	ebfffc28 	bl	14e2c <CUSBFunction::GetDevice() const>
   15d88:	e1a09000 	mov	r9, r0
   15d8c:	e1a00007 	mov	r0, r7
   15d90:	eb0033fd 	bl	22d8c <operator new(unsigned int)>
   15d94:	e1a08000 	mov	r8, r0
   15d98:	e1a02004 	mov	r2, r4
   15d9c:	e1a01009 	mov	r1, r9
   15da0:	ebffe23b 	bl	e694 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   15da4:	e5858018 	str	r8, [r5, #24]
   15da8:	eaffffd5 	b	15d04 <CUSBBluetoothDevice::Configure()+0x30>
   15dac:	e5953014 	ldr	r3, [r5, #20]
   15db0:	e1a00005 	mov	r0, r5
   15db4:	e3530000 	cmp	r3, #0
   15db8:	1a000041 	bne	15ec4 <CUSBBluetoothDevice::Configure()+0x1f0>
   15dbc:	ebfffc1a 	bl	14e2c <CUSBFunction::GetDevice() const>
   15dc0:	e1a09000 	mov	r9, r0
   15dc4:	e1a00007 	mov	r0, r7
   15dc8:	eb0033ef 	bl	22d8c <operator new(unsigned int)>
   15dcc:	e1a08000 	mov	r8, r0
   15dd0:	e1a02004 	mov	r2, r4
   15dd4:	e1a01009 	mov	r1, r9
   15dd8:	ebffe22d 	bl	e694 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   15ddc:	e5858014 	str	r8, [r5, #20]
   15de0:	eaffffc7 	b	15d04 <CUSBBluetoothDevice::Configure()+0x30>
   15de4:	e1a00005 	mov	r0, r5
   15de8:	e59f1104 	ldr	r1, [pc, #260]	; 15ef4 <CUSBBluetoothDevice::Configure()+0x220>
   15dec:	ebfffc84 	bl	15004 <CUSBFunction::ConfigurationError(char const*) const>
   15df0:	e1a00006 	mov	r0, r6
   15df4:	e28dd014 	add	sp, sp, #20
   15df8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   15dfc:	e3a06000 	mov	r6, #0
   15e00:	eb001d0f 	bl	1d244 <CLogger::Get()>
   15e04:	e59f30ec 	ldr	r3, [pc, #236]	; 15ef8 <CUSBBluetoothDevice::Configure()+0x224>
   15e08:	e3a02002 	mov	r2, #2
   15e0c:	e59f10e0 	ldr	r1, [pc, #224]	; 15ef4 <CUSBBluetoothDevice::Configure()+0x220>
   15e10:	eb001eb4 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15e14:	e1a00006 	mov	r0, r6
   15e18:	e28dd014 	add	sp, sp, #20
   15e1c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   15e20:	e5953014 	ldr	r3, [r5, #20]
   15e24:	e3530000 	cmp	r3, #0
   15e28:	0a000024 	beq	15ec0 <CUSBBluetoothDevice::Configure()+0x1ec>
   15e2c:	e5953018 	ldr	r3, [r5, #24]
   15e30:	e3530000 	cmp	r3, #0
   15e34:	0a000021 	beq	15ec0 <CUSBBluetoothDevice::Configure()+0x1ec>
   15e38:	e5953010 	ldr	r3, [r5, #16]
   15e3c:	e3530000 	cmp	r3, #0
   15e40:	0a00001e 	beq	15ec0 <CUSBBluetoothDevice::Configure()+0x1ec>
   15e44:	e1a00005 	mov	r0, r5
   15e48:	ebfffc29 	bl	14ef4 <CUSBFunction::Configure()>
   15e4c:	e2506000 	subs	r6, r0, #0
   15e50:	0a000021 	beq	15edc <CUSBBluetoothDevice::Configure()+0x208>
   15e54:	e5950010 	ldr	r0, [r5, #16]
   15e58:	ebffe2b8 	bl	e940 <CUSBEndpoint::GetMaxPacketSize() const>
   15e5c:	eb0033cb 	bl	22d90 <operator new[](unsigned int)>
   15e60:	e5850020 	str	r0, [r5, #32]
   15e64:	e1a0000d 	mov	r0, sp
   15e68:	eb0027b3 	bl	1fd3c <CString::CString()>
   15e6c:	e59f3088 	ldr	r3, [pc, #136]	; 15efc <CUSBBluetoothDevice::Configure()+0x228>
   15e70:	e59f1088 	ldr	r1, [pc, #136]	; 15f00 <CUSBBluetoothDevice::Configure()+0x22c>
   15e74:	e5932000 	ldr	r2, [r3]
   15e78:	e1a0000d 	mov	r0, sp
   15e7c:	e282c001 	add	ip, r2, #1
   15e80:	e583c000 	str	ip, [r3]
   15e84:	eb002b9a 	bl	20cf4 <CString::Format(char const*, ...)>
   15e88:	eb0015f3 	bl	1b65c <CDeviceNameService::Get()>
   15e8c:	e1a07000 	mov	r7, r0
   15e90:	e1a0000d 	mov	r0, sp
   15e94:	eb0027be 	bl	1fd94 <CString::operator char const*() const>
   15e98:	e1a03004 	mov	r3, r4
   15e9c:	e1a01000 	mov	r1, r0
   15ea0:	e1a02005 	mov	r2, r5
   15ea4:	e1a00007 	mov	r0, r7
   15ea8:	eb00152b 	bl	1b35c <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   15eac:	e1a0000d 	mov	r0, sp
   15eb0:	eb00276e 	bl	1fc70 <CString::~CString()>
   15eb4:	e1a00006 	mov	r0, r6
   15eb8:	e28dd014 	add	sp, sp, #20
   15ebc:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   15ec0:	e1a00005 	mov	r0, r5
   15ec4:	e3a06000 	mov	r6, #0
   15ec8:	e59f1024 	ldr	r1, [pc, #36]	; 15ef4 <CUSBBluetoothDevice::Configure()+0x220>
   15ecc:	ebfffc4c 	bl	15004 <CUSBFunction::ConfigurationError(char const*) const>
   15ed0:	e1a00006 	mov	r0, r6
   15ed4:	e28dd014 	add	sp, sp, #20
   15ed8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   15edc:	eb001cd8 	bl	1d244 <CLogger::Get()>
   15ee0:	e59f301c 	ldr	r3, [pc, #28]	; 15f04 <CUSBBluetoothDevice::Configure()+0x230>
   15ee4:	e3a02001 	mov	r2, #1
   15ee8:	e59f1004 	ldr	r1, [pc, #4]	; 15ef4 <CUSBBluetoothDevice::Configure()+0x220>
   15eec:	eb001e7d 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15ef0:	eaffffbe 	b	15df0 <CUSBBluetoothDevice::Configure()+0x11c>
   15ef4:	000266cc 	.word	0x000266cc
   15ef8:	00026740 	.word	0x00026740
   15efc:	0002b6e4 	.word	0x0002b6e4
   15f00:	00026764 	.word	0x00026764
   15f04:	00025834 	.word	0x00025834

00015f08 <CUSBMIDIDevice::~CUSBMIDIDevice()>:
   15f08:	e92d4070 	push	{r4, r5, r6, lr}
   15f0c:	e1a04000 	mov	r4, r0
   15f10:	e5900020 	ldr	r0, [r0, #32]
   15f14:	e59f304c 	ldr	r3, [pc, #76]	; 15f68 <CUSBMIDIDevice::~CUSBMIDIDevice()+0x60>
   15f18:	e3500000 	cmp	r0, #0
   15f1c:	e5843000 	str	r3, [r4]
   15f20:	0a000002 	beq	15f30 <CUSBMIDIDevice::~CUSBMIDIDevice()+0x28>
   15f24:	eb00339b 	bl	22d98 <operator delete[](void*)>
   15f28:	e3a03000 	mov	r3, #0
   15f2c:	e5843020 	str	r3, [r4, #32]
   15f30:	e5945010 	ldr	r5, [r4, #16]
   15f34:	e3550000 	cmp	r5, #0
   15f38:	0a000006 	beq	15f58 <CUSBMIDIDevice::~CUSBMIDIDevice()+0x50>
   15f3c:	e1a00005 	mov	r0, r5
   15f40:	ebffe265 	bl	e8dc <CUSBEndpoint::~CUSBEndpoint()>
   15f44:	e1a00005 	mov	r0, r5
   15f48:	e3a01014 	mov	r1, #20
   15f4c:	eb003392 	bl	22d9c <operator delete(void*, unsigned int)>
   15f50:	e3a03000 	mov	r3, #0
   15f54:	e5843010 	str	r3, [r4, #16]
   15f58:	e1a00004 	mov	r0, r4
   15f5c:	ebfffaf8 	bl	14b44 <CUSBFunction::~CUSBFunction()>
   15f60:	e1a00004 	mov	r0, r4
   15f64:	e8bd8070 	pop	{r4, r5, r6, pc}
   15f68:	00026774 	.word	0x00026774

00015f6c <CUSBMIDIDevice::~CUSBMIDIDevice()>:
   15f6c:	e92d4010 	push	{r4, lr}
   15f70:	e1a04000 	mov	r4, r0
   15f74:	ebffffe3 	bl	15f08 <CUSBMIDIDevice::~CUSBMIDIDevice()>
   15f78:	e1a00004 	mov	r0, r4
   15f7c:	e3a01028 	mov	r1, #40	; 0x28
   15f80:	eb003385 	bl	22d9c <operator delete(void*, unsigned int)>
   15f84:	e1a00004 	mov	r0, r4
   15f88:	e8bd8010 	pop	{r4, pc}

00015f8c <CUSBMIDIDevice::CUSBMIDIDevice(CUSBFunction*)>:
   15f8c:	e92d4010 	push	{r4, lr}
   15f90:	e1a04000 	mov	r4, r0
   15f94:	ebfffb38 	bl	14c7c <CUSBFunction::CUSBFunction(CUSBFunction*)>
   15f98:	e3a03000 	mov	r3, #0
   15f9c:	e59f201c 	ldr	r2, [pc, #28]	; 15fc0 <CUSBMIDIDevice::CUSBMIDIDevice(CUSBFunction*)+0x34>
   15fa0:	e5843010 	str	r3, [r4, #16]
   15fa4:	e5842000 	str	r2, [r4]
   15fa8:	e5843014 	str	r3, [r4, #20]
   15fac:	e5843018 	str	r3, [r4, #24]
   15fb0:	e5843020 	str	r3, [r4, #32]
   15fb4:	e5843024 	str	r3, [r4, #36]	; 0x24
   15fb8:	e1a00004 	mov	r0, r4
   15fbc:	e8bd8010 	pop	{r4, pc}
   15fc0:	00026774 	.word	0x00026774

00015fc4 <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))>:
   15fc4:	e5903014 	ldr	r3, [r0, #20]
   15fc8:	e92d4070 	push	{r4, r5, r6, lr}
   15fcc:	e3530000 	cmp	r3, #0
   15fd0:	e1a04000 	mov	r4, r0
   15fd4:	e1a05001 	mov	r5, r1
   15fd8:	0a000003 	beq	15fec <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))+0x28>
   15fdc:	e3a02099 	mov	r2, #153	; 0x99
   15fe0:	e59f1024 	ldr	r1, [pc, #36]	; 1600c <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))+0x48>
   15fe4:	e59f0024 	ldr	r0, [pc, #36]	; 16010 <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))+0x4c>
   15fe8:	eb0012a2 	bl	1aa78 <assertion_failed>
   15fec:	e3550000 	cmp	r5, #0
   15ff0:	e5845014 	str	r5, [r4, #20]
   15ff4:	18bd8070 	popne	{r4, r5, r6, pc}
   15ff8:	e3a0209b 	mov	r2, #155	; 0x9b
   15ffc:	e8bd4070 	pop	{r4, r5, r6, lr}
   16000:	e59f1004 	ldr	r1, [pc, #4]	; 1600c <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))+0x48>
   16004:	e59f0008 	ldr	r0, [pc, #8]	; 16014 <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))+0x50>
   16008:	ea00129a 	b	1aa78 <assertion_failed>
   1600c:	000267d8 	.word	0x000267d8
   16010:	000267e4 	.word	0x000267e4
   16014:	000267fc 	.word	0x000267fc

00016018 <CUSBMIDIDevice::StartRequest()>:
   16018:	e92d4070 	push	{r4, r5, r6, lr}
   1601c:	e5903010 	ldr	r3, [r0, #16]
   16020:	e24dd008 	sub	sp, sp, #8
   16024:	e3530000 	cmp	r3, #0
   16028:	e1a04000 	mov	r4, r0
   1602c:	0a000035 	beq	16108 <CUSBMIDIDevice::StartRequest()+0xf0>
   16030:	e5943020 	ldr	r3, [r4, #32]
   16034:	e3530000 	cmp	r3, #0
   16038:	0a000037 	beq	1611c <CUSBMIDIDevice::StartRequest()+0x104>
   1603c:	e5943018 	ldr	r3, [r4, #24]
   16040:	e3530000 	cmp	r3, #0
   16044:	0a000003 	beq	16058 <CUSBMIDIDevice::StartRequest()+0x40>
   16048:	e3a020a3 	mov	r2, #163	; 0xa3
   1604c:	e59f10dc 	ldr	r1, [pc, #220]	; 16130 <CUSBMIDIDevice::StartRequest()+0x118>
   16050:	e59f00dc 	ldr	r0, [pc, #220]	; 16134 <CUSBMIDIDevice::StartRequest()+0x11c>
   16054:	eb001287 	bl	1aa78 <assertion_failed>
   16058:	e1d451bc 	ldrh	r5, [r4, #28]
   1605c:	e3550000 	cmp	r5, #0
   16060:	0a000019 	beq	160cc <CUSBMIDIDevice::StartRequest()+0xb4>
   16064:	e3a00028 	mov	r0, #40	; 0x28
   16068:	ebffe3b5 	bl	ef44 <CUSBRequest::operator new(unsigned int)>
   1606c:	e3a0c000 	mov	ip, #0
   16070:	e1a05000 	mov	r5, r0
   16074:	e1d431bc 	ldrh	r3, [r4, #28]
   16078:	e5942020 	ldr	r2, [r4, #32]
   1607c:	e5941010 	ldr	r1, [r4, #16]
   16080:	e58dc000 	str	ip, [sp]
   16084:	ebffe317 	bl	ece8 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   16088:	e1a00005 	mov	r0, r5
   1608c:	e5845018 	str	r5, [r4, #24]
   16090:	e1a03004 	mov	r3, r4
   16094:	e3a02000 	mov	r2, #0
   16098:	e59f1098 	ldr	r1, [pc, #152]	; 16138 <CUSBMIDIDevice::StartRequest()+0x120>
   1609c:	ebffe386 	bl	eebc <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   160a0:	e5940018 	ldr	r0, [r4, #24]
   160a4:	ebffe3a1 	bl	ef30 <CUSBRequest::SetCompleteOnNAK()>
   160a8:	e1a00004 	mov	r0, r4
   160ac:	ebfffb7f 	bl	14eb0 <CUSBFunction::GetHost() const>
   160b0:	e3a02000 	mov	r2, #0
   160b4:	e5903000 	ldr	r3, [r0]
   160b8:	e5941018 	ldr	r1, [r4, #24]
   160bc:	e593300c 	ldr	r3, [r3, #12]
   160c0:	e28dd008 	add	sp, sp, #8
   160c4:	e8bd4070 	pop	{r4, r5, r6, lr}
   160c8:	e12fff13 	bx	r3
   160cc:	e3a020a4 	mov	r2, #164	; 0xa4
   160d0:	e59f1058 	ldr	r1, [pc, #88]	; 16130 <CUSBMIDIDevice::StartRequest()+0x118>
   160d4:	e59f0060 	ldr	r0, [pc, #96]	; 1613c <CUSBMIDIDevice::StartRequest()+0x124>
   160d8:	eb001266 	bl	1aa78 <assertion_failed>
   160dc:	e3a00028 	mov	r0, #40	; 0x28
   160e0:	ebffe397 	bl	ef44 <CUSBRequest::operator new(unsigned int)>
   160e4:	e1a06000 	mov	r6, r0
   160e8:	e1d431bc 	ldrh	r3, [r4, #28]
   160ec:	e5942020 	ldr	r2, [r4, #32]
   160f0:	e5941010 	ldr	r1, [r4, #16]
   160f4:	e58d5000 	str	r5, [sp]
   160f8:	ebffe2fa 	bl	ece8 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   160fc:	e1a00006 	mov	r0, r6
   16100:	e5846018 	str	r6, [r4, #24]
   16104:	eaffffe1 	b	16090 <CUSBMIDIDevice::StartRequest()+0x78>
   16108:	e3a020a0 	mov	r2, #160	; 0xa0
   1610c:	e59f101c 	ldr	r1, [pc, #28]	; 16130 <CUSBMIDIDevice::StartRequest()+0x118>
   16110:	e59f0028 	ldr	r0, [pc, #40]	; 16140 <CUSBMIDIDevice::StartRequest()+0x128>
   16114:	eb001257 	bl	1aa78 <assertion_failed>
   16118:	eaffffc4 	b	16030 <CUSBMIDIDevice::StartRequest()+0x18>
   1611c:	e3a020a1 	mov	r2, #161	; 0xa1
   16120:	e59f1008 	ldr	r1, [pc, #8]	; 16130 <CUSBMIDIDevice::StartRequest()+0x118>
   16124:	e59f0018 	ldr	r0, [pc, #24]	; 16144 <CUSBMIDIDevice::StartRequest()+0x12c>
   16128:	eb001252 	bl	1aa78 <assertion_failed>
   1612c:	eaffffc2 	b	1603c <CUSBMIDIDevice::StartRequest()+0x24>
   16130:	000267d8 	.word	0x000267d8
   16134:	00025eb0 	.word	0x00025eb0
   16138:	00016318 	.word	0x00016318
   1613c:	00026840 	.word	0x00026840
   16140:	00026814 	.word	0x00026814
   16144:	00026828 	.word	0x00026828

00016148 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)>:
   16148:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   1614c:	e2514000 	subs	r4, r1, #0
   16150:	e24dd00c 	sub	sp, sp, #12
   16154:	e1a05000 	mov	r5, r0
   16158:	0a00005b 	beq	162cc <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x184>
   1615c:	e5953018 	ldr	r3, [r5, #24]
   16160:	e1540003 	cmp	r4, r3
   16164:	0a000003 	beq	16178 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x30>
   16168:	e3a020b1 	mov	r2, #177	; 0xb1
   1616c:	e59f1184 	ldr	r1, [pc, #388]	; 162f8 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1b0>
   16170:	e59f0184 	ldr	r0, [pc, #388]	; 162fc <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1b4>
   16174:	eb00123f 	bl	1aa78 <assertion_failed>
   16178:	e1a00004 	mov	r0, r4
   1617c:	ebffe313 	bl	edd0 <CUSBRequest::GetStatus() const>
   16180:	e3500000 	cmp	r0, #0
   16184:	1a000020 	bne	1620c <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0xc4>
   16188:	e5954018 	ldr	r4, [r5, #24]
   1618c:	e3540000 	cmp	r4, #0
   16190:	13a09000 	movne	r9, #0
   16194:	0a000008 	beq	161bc <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x74>
   16198:	e1a00004 	mov	r0, r4
   1619c:	ebffe2f6 	bl	ed7c <CUSBRequest::~CUSBRequest()>
   161a0:	e1a00004 	mov	r0, r4
   161a4:	e3a01028 	mov	r1, #40	; 0x28
   161a8:	ebffe37d 	bl	efa4 <CUSBRequest::operator delete(void*, unsigned int)>
   161ac:	e3a03000 	mov	r3, #0
   161b0:	e1590003 	cmp	r9, r3
   161b4:	e5853018 	str	r3, [r5, #24]
   161b8:	1a00003f 	bne	162bc <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x174>
   161bc:	e5953024 	ldr	r3, [r5, #36]	; 0x24
   161c0:	e3530000 	cmp	r3, #0
   161c4:	1a000037 	bne	162a8 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x160>
   161c8:	eb002e72 	bl	21b98 <CTimer::Get()>
   161cc:	e58d5000 	str	r5, [sp]
   161d0:	e3a03000 	mov	r3, #0
   161d4:	e59f2124 	ldr	r2, [pc, #292]	; 16300 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1b8>
   161d8:	e3a01001 	mov	r1, #1
   161dc:	eb002c9e 	bl	2145c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
   161e0:	e3500000 	cmp	r0, #0
   161e4:	e5850024 	str	r0, [r5, #36]	; 0x24
   161e8:	0a000001 	beq	161f4 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0xac>
   161ec:	e28dd00c 	add	sp, sp, #12
   161f0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   161f4:	e3a020d9 	mov	r2, #217	; 0xd9
   161f8:	e59f10f8 	ldr	r1, [pc, #248]	; 162f8 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1b0>
   161fc:	e59f0100 	ldr	r0, [pc, #256]	; 16304 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1bc>
   16200:	e28dd00c 	add	sp, sp, #12
   16204:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
   16208:	ea00121a 	b	1aa78 <assertion_failed>
   1620c:	e1a00004 	mov	r0, r4
   16210:	ebffe2f0 	bl	edd8 <CUSBRequest::GetResultLength() const>
   16214:	e3100003 	tst	r0, #3
   16218:	1affffda 	bne	16188 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x40>
   1621c:	e5958020 	ldr	r8, [r5, #32]
   16220:	e3580000 	cmp	r8, #0
   16224:	0a00002d 	beq	162e0 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x198>
   16228:	e1a00004 	mov	r0, r4
   1622c:	ebffe2e9 	bl	edd8 <CUSBRequest::GetResultLength() const>
   16230:	e5954020 	ldr	r4, [r5, #32]
   16234:	e0888000 	add	r8, r8, r0
   16238:	e1580004 	cmp	r8, r4
   1623c:	9affffd1 	bls	16188 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x40>
   16240:	e3a09000 	mov	r9, #0
   16244:	e3a07001 	mov	r7, #1
   16248:	e59f60b8 	ldr	r6, [pc, #184]	; 16308 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1c0>
   1624c:	e2844001 	add	r4, r4, #1
   16250:	e5540001 	ldrb	r0, [r4, #-1]
   16254:	e3500000 	cmp	r0, #0
   16258:	0a00000a 	beq	16288 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x140>
   1625c:	e5959014 	ldr	r9, [r5, #20]
   16260:	e200300f 	and	r3, r0, #15
   16264:	e3590000 	cmp	r9, #0
   16268:	e0863103 	add	r3, r6, r3, lsl #2
   1626c:	e1a00220 	lsr	r0, r0, #4
   16270:	01a09007 	moveq	r9, r7
   16274:	0a000003 	beq	16288 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x140>
   16278:	e5932024 	ldr	r2, [r3, #36]	; 0x24
   1627c:	e1a01004 	mov	r1, r4
   16280:	e12fff39 	blx	r9
   16284:	e1a09007 	mov	r9, r7
   16288:	e2843003 	add	r3, r4, #3
   1628c:	e1580003 	cmp	r8, r3
   16290:	e2844004 	add	r4, r4, #4
   16294:	8affffed 	bhi	16250 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x108>
   16298:	e5954018 	ldr	r4, [r5, #24]
   1629c:	e3540000 	cmp	r4, #0
   162a0:	1affffbc 	bne	16198 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x50>
   162a4:	eaffffc0 	b	161ac <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x64>
   162a8:	e3a020d7 	mov	r2, #215	; 0xd7
   162ac:	e59f1044 	ldr	r1, [pc, #68]	; 162f8 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1b0>
   162b0:	e59f0054 	ldr	r0, [pc, #84]	; 1630c <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1c4>
   162b4:	eb0011ef 	bl	1aa78 <assertion_failed>
   162b8:	eaffffc2 	b	161c8 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x80>
   162bc:	e1a00005 	mov	r0, r5
   162c0:	e28dd00c 	add	sp, sp, #12
   162c4:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
   162c8:	eaffff52 	b	16018 <CUSBMIDIDevice::StartRequest()>
   162cc:	e3a020b0 	mov	r2, #176	; 0xb0
   162d0:	e59f1020 	ldr	r1, [pc, #32]	; 162f8 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1b0>
   162d4:	e59f0034 	ldr	r0, [pc, #52]	; 16310 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1c8>
   162d8:	eb0011e6 	bl	1aa78 <assertion_failed>
   162dc:	eaffff9e 	b	1615c <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x14>
   162e0:	e3a020b8 	mov	r2, #184	; 0xb8
   162e4:	e59f100c 	ldr	r1, [pc, #12]	; 162f8 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1b0>
   162e8:	e59f0024 	ldr	r0, [pc, #36]	; 16314 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1cc>
   162ec:	eb0011e1 	bl	1aa78 <assertion_failed>
   162f0:	e5958020 	ldr	r8, [r5, #32]
   162f4:	eaffffcb 	b	16228 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0xe0>
   162f8:	000267d8 	.word	0x000267d8
   162fc:	00025ed4 	.word	0x00025ed4
   16300:	000163a0 	.word	0x000163a0
   16304:	00026864 	.word	0x00026864
   16308:	0002676c 	.word	0x0002676c
   1630c:	00026854 	.word	0x00026854
   16310:	00024850 	.word	0x00024850
   16314:	00026828 	.word	0x00026828

00016318 <CUSBMIDIDevice::CompletionStub(CUSBRequest*, void*, void*)>:
   16318:	e92d4070 	push	{r4, r5, r6, lr}
   1631c:	e2524000 	subs	r4, r2, #0
   16320:	e1a05000 	mov	r5, r0
   16324:	0a000003 	beq	16338 <CUSBMIDIDevice::CompletionStub(CUSBRequest*, void*, void*)+0x20>
   16328:	e1a01005 	mov	r1, r5
   1632c:	e1a00004 	mov	r0, r4
   16330:	e8bd4070 	pop	{r4, r5, r6, lr}
   16334:	eaffff83 	b	16148 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)>
   16338:	e59f1018 	ldr	r1, [pc, #24]	; 16358 <CUSBMIDIDevice::CompletionStub(CUSBRequest*, void*, void*)+0x40>
   1633c:	e59f0018 	ldr	r0, [pc, #24]	; 1635c <CUSBMIDIDevice::CompletionStub(CUSBRequest*, void*, void*)+0x44>
   16340:	e3a020e0 	mov	r2, #224	; 0xe0
   16344:	eb0011cb 	bl	1aa78 <assertion_failed>
   16348:	e1a01005 	mov	r1, r5
   1634c:	e1a00004 	mov	r0, r4
   16350:	e8bd4070 	pop	{r4, r5, r6, lr}
   16354:	eaffff7b 	b	16148 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)>
   16358:	000267d8 	.word	0x000267d8
   1635c:	00024764 	.word	0x00024764

00016360 <CUSBMIDIDevice::TimerHandler(unsigned int)>:
   16360:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   16364:	e92d4010 	push	{r4, lr}
   16368:	e1530001 	cmp	r3, r1
   1636c:	e1a04000 	mov	r4, r0
   16370:	0a000003 	beq	16384 <CUSBMIDIDevice::TimerHandler(unsigned int)+0x24>
   16374:	e3a020e7 	mov	r2, #231	; 0xe7
   16378:	e59f1018 	ldr	r1, [pc, #24]	; 16398 <CUSBMIDIDevice::TimerHandler(unsigned int)+0x38>
   1637c:	e59f0018 	ldr	r0, [pc, #24]	; 1639c <CUSBMIDIDevice::TimerHandler(unsigned int)+0x3c>
   16380:	eb0011bc 	bl	1aa78 <assertion_failed>
   16384:	e3a03000 	mov	r3, #0
   16388:	e1a00004 	mov	r0, r4
   1638c:	e5843024 	str	r3, [r4, #36]	; 0x24
   16390:	e8bd4010 	pop	{r4, lr}
   16394:	eaffff1f 	b	16018 <CUSBMIDIDevice::StartRequest()>
   16398:	000267d8 	.word	0x000267d8
   1639c:	00026874 	.word	0x00026874

000163a0 <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)>:
   163a0:	e92d4070 	push	{r4, r5, r6, lr}
   163a4:	e2524000 	subs	r4, r2, #0
   163a8:	e1a05000 	mov	r5, r0
   163ac:	0a000003 	beq	163c0 <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)+0x20>
   163b0:	e1a01005 	mov	r1, r5
   163b4:	e1a00004 	mov	r0, r4
   163b8:	e8bd4070 	pop	{r4, r5, r6, lr}
   163bc:	eaffffe7 	b	16360 <CUSBMIDIDevice::TimerHandler(unsigned int)>
   163c0:	e59f1018 	ldr	r1, [pc, #24]	; 163e0 <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)+0x40>
   163c4:	e59f0018 	ldr	r0, [pc, #24]	; 163e4 <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)+0x44>
   163c8:	e3a020f0 	mov	r2, #240	; 0xf0
   163cc:	eb0011a9 	bl	1aa78 <assertion_failed>
   163d0:	e1a01005 	mov	r1, r5
   163d4:	e1a00004 	mov	r0, r4
   163d8:	e8bd4070 	pop	{r4, r5, r6, lr}
   163dc:	eaffffdf 	b	16360 <CUSBMIDIDevice::TimerHandler(unsigned int)>
   163e0:	000267d8 	.word	0x000267d8
   163e4:	00024764 	.word	0x00024764

000163e8 <CUSBMIDIDevice::Configure()>:
   163e8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   163ec:	e24dd01c 	sub	sp, sp, #28
   163f0:	e1a05000 	mov	r5, r0
   163f4:	ebfffa7c 	bl	14dec <CUSBFunction::GetNumEndpoints() const>
   163f8:	e2506000 	subs	r6, r0, #0
   163fc:	e1a00005 	mov	r0, r5
   16400:	0a000073 	beq	165d4 <CUSBMIDIDevice::Configure()+0x1ec>
   16404:	ebfffa88 	bl	14e2c <CUSBFunction::GetDevice() const>
   16408:	ebffde02 	bl	dc18 <CUSBDevice::GetDeviceDescriptor() const>
   1640c:	e2504000 	subs	r4, r0, #0
   16410:	0a000077 	beq	165f4 <CUSBMIDIDevice::Configure()+0x20c>
   16414:	e5d43008 	ldrb	r3, [r4, #8]
   16418:	e5d41009 	ldrb	r1, [r4, #9]
   1641c:	e59f21f8 	ldr	r2, [pc, #504]	; 1661c <CUSBMIDIDevice::Configure()+0x234>
   16420:	e1833401 	orr	r3, r3, r1, lsl #8
   16424:	e1530002 	cmp	r3, r2
   16428:	05d4700a 	ldrbeq	r7, [r4, #10]
   1642c:	05d4200b 	ldrbeq	r2, [r4, #11]
   16430:	059f31e8 	ldreq	r3, [pc, #488]	; 16620 <CUSBMIDIDevice::Configure()+0x238>
   16434:	01877402 	orreq	r7, r7, r2, lsl #8
   16438:	00477003 	subeq	r7, r7, r3
   1643c:	016f7f17 	clzeq	r7, r7
   16440:	13a07000 	movne	r7, #0
   16444:	e3a06005 	mov	r6, #5
   16448:	e3a08014 	mov	r8, #20
   1644c:	e3a0b07d 	mov	fp, #125	; 0x7d
   16450:	e59fa1cc 	ldr	sl, [pc, #460]	; 16624 <CUSBMIDIDevice::Configure()+0x23c>
   16454:	01a072a7 	lsreq	r7, r7, #5
   16458:	e1a01006 	mov	r1, r6
   1645c:	e1a00005 	mov	r0, r5
   16460:	ebfffad4 	bl	14fb8 <CUSBFunction::GetDescriptor(unsigned char)>
   16464:	e2504000 	subs	r4, r0, #0
   16468:	0a000026 	beq	16508 <CUSBMIDIDevice::Configure()+0x120>
   1646c:	e1d430d2 	ldrsb	r3, [r4, #2]
   16470:	e3530000 	cmp	r3, #0
   16474:	aafffff7 	bge	16458 <CUSBMIDIDevice::Configure()+0x70>
   16478:	e5d43003 	ldrb	r3, [r4, #3]
   1647c:	e203303f 	and	r3, r3, #63	; 0x3f
   16480:	e3530002 	cmp	r3, #2
   16484:	1afffff3 	bne	16458 <CUSBMIDIDevice::Configure()+0x70>
   16488:	e3570000 	cmp	r7, #0
   1648c:	0a000046 	beq	165ac <CUSBMIDIDevice::Configure()+0x1c4>
   16490:	e5953010 	ldr	r3, [r5, #16]
   16494:	e3530000 	cmp	r3, #0
   16498:	1a00005a 	bne	16608 <CUSBMIDIDevice::Configure()+0x220>
   1649c:	e1a00005 	mov	r0, r5
   164a0:	ebfffa61 	bl	14e2c <CUSBFunction::GetDevice() const>
   164a4:	e58d0004 	str	r0, [sp, #4]
   164a8:	e1a00008 	mov	r0, r8
   164ac:	eb003236 	bl	22d8c <operator new(unsigned int)>
   164b0:	e1a09000 	mov	r9, r0
   164b4:	e1a02004 	mov	r2, r4
   164b8:	e59d1004 	ldr	r1, [sp, #4]
   164bc:	ebffe074 	bl	e694 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   164c0:	e5859010 	str	r9, [r5, #16]
   164c4:	e5d40004 	ldrb	r0, [r4, #4]
   164c8:	e5d42005 	ldrb	r2, [r4, #5]
   164cc:	e5953020 	ldr	r3, [r5, #32]
   164d0:	e1800402 	orr	r0, r0, r2, lsl #8
   164d4:	e3c00003 	bic	r0, r0, #3
   164d8:	e6ff0070 	uxth	r0, r0
   164dc:	e3530000 	cmp	r3, #0
   164e0:	e1c501bc 	strh	r0, [r5, #28]
   164e4:	0a00003f 	beq	165e8 <CUSBMIDIDevice::Configure()+0x200>
   164e8:	e1a0200b 	mov	r2, fp
   164ec:	e1a0100a 	mov	r1, sl
   164f0:	e59f0130 	ldr	r0, [pc, #304]	; 16628 <CUSBMIDIDevice::Configure()+0x240>
   164f4:	eb00115f 	bl	1aa78 <assertion_failed>
   164f8:	e1d501bc 	ldrh	r0, [r5, #28]
   164fc:	eb003223 	bl	22d90 <operator new[](unsigned int)>
   16500:	e5850020 	str	r0, [r5, #32]
   16504:	eaffffd3 	b	16458 <CUSBMIDIDevice::Configure()+0x70>
   16508:	e5956010 	ldr	r6, [r5, #16]
   1650c:	e1a00005 	mov	r0, r5
   16510:	e3560000 	cmp	r6, #0
   16514:	0a00002e 	beq	165d4 <CUSBMIDIDevice::Configure()+0x1ec>
   16518:	ebfffa75 	bl	14ef4 <CUSBFunction::Configure()>
   1651c:	e2506000 	subs	r6, r0, #0
   16520:	0a000019 	beq	1658c <CUSBMIDIDevice::Configure()+0x1a4>
   16524:	e28d0008 	add	r0, sp, #8
   16528:	eb002603 	bl	1fd3c <CString::CString()>
   1652c:	e59f30f8 	ldr	r3, [pc, #248]	; 1662c <CUSBMIDIDevice::Configure()+0x244>
   16530:	e59f10f8 	ldr	r1, [pc, #248]	; 16630 <CUSBMIDIDevice::Configure()+0x248>
   16534:	e5932000 	ldr	r2, [r3]
   16538:	e28d0008 	add	r0, sp, #8
   1653c:	e282c001 	add	ip, r2, #1
   16540:	e583c000 	str	ip, [r3]
   16544:	eb0029ea 	bl	20cf4 <CString::Format(char const*, ...)>
   16548:	eb001443 	bl	1b65c <CDeviceNameService::Get()>
   1654c:	e1a06000 	mov	r6, r0
   16550:	e28d0008 	add	r0, sp, #8
   16554:	eb00260e 	bl	1fd94 <CString::operator char const*() const>
   16558:	e1a03004 	mov	r3, r4
   1655c:	e1a01000 	mov	r1, r0
   16560:	e1a02005 	mov	r2, r5
   16564:	e1a00006 	mov	r0, r6
   16568:	eb00137b 	bl	1b35c <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   1656c:	e1a00005 	mov	r0, r5
   16570:	ebfffea8 	bl	16018 <CUSBMIDIDevice::StartRequest()>
   16574:	e1a06000 	mov	r6, r0
   16578:	e28d0008 	add	r0, sp, #8
   1657c:	eb0025bb 	bl	1fc70 <CString::~CString()>
   16580:	e1a00006 	mov	r0, r6
   16584:	e28dd01c 	add	sp, sp, #28
   16588:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1658c:	eb001b2c 	bl	1d244 <CLogger::Get()>
   16590:	e59f309c 	ldr	r3, [pc, #156]	; 16634 <CUSBMIDIDevice::Configure()+0x24c>
   16594:	e3a02001 	mov	r2, #1
   16598:	e59f1098 	ldr	r1, [pc, #152]	; 16638 <CUSBMIDIDevice::Configure()+0x250>
   1659c:	eb001cd1 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   165a0:	e1a00006 	mov	r0, r6
   165a4:	e28dd01c 	add	sp, sp, #28
   165a8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   165ac:	e3a01025 	mov	r1, #37	; 0x25
   165b0:	e1a00005 	mov	r0, r5
   165b4:	ebfffa7f 	bl	14fb8 <CUSBFunction::GetDescriptor(unsigned char)>
   165b8:	e3500000 	cmp	r0, #0
   165bc:	0affffa5 	beq	16458 <CUSBMIDIDevice::Configure()+0x70>
   165c0:	e5d43000 	ldrb	r3, [r4]
   165c4:	e0843003 	add	r3, r4, r3
   165c8:	e1500003 	cmp	r0, r3
   165cc:	1affffa1 	bne	16458 <CUSBMIDIDevice::Configure()+0x70>
   165d0:	eaffffae 	b	16490 <CUSBMIDIDevice::Configure()+0xa8>
   165d4:	e59f105c 	ldr	r1, [pc, #92]	; 16638 <CUSBMIDIDevice::Configure()+0x250>
   165d8:	ebfffa89 	bl	15004 <CUSBFunction::ConfigurationError(char const*) const>
   165dc:	e1a00006 	mov	r0, r6
   165e0:	e28dd01c 	add	sp, sp, #28
   165e4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   165e8:	eb0031e8 	bl	22d90 <operator new[](unsigned int)>
   165ec:	e5850020 	str	r0, [r5, #32]
   165f0:	eaffff98 	b	16458 <CUSBMIDIDevice::Configure()+0x70>
   165f4:	e3a02051 	mov	r2, #81	; 0x51
   165f8:	e59f1024 	ldr	r1, [pc, #36]	; 16624 <CUSBMIDIDevice::Configure()+0x23c>
   165fc:	e59f0038 	ldr	r0, [pc, #56]	; 1663c <CUSBMIDIDevice::Configure()+0x254>
   16600:	eb00111c 	bl	1aa78 <assertion_failed>
   16604:	eaffff82 	b	16414 <CUSBMIDIDevice::Configure()+0x2c>
   16608:	e1a00005 	mov	r0, r5
   1660c:	e59f1024 	ldr	r1, [pc, #36]	; 16638 <CUSBMIDIDevice::Configure()+0x250>
   16610:	ebfffa7b 	bl	15004 <CUSBFunction::ConfigurationError(char const*) const>
   16614:	e3a06000 	mov	r6, #0
   16618:	eaffffd8 	b	16580 <CUSBMIDIDevice::Configure()+0x198>
   1661c:	00000582 	.word	0x00000582
   16620:	0000012a 	.word	0x0000012a
   16624:	000267d8 	.word	0x000267d8
   16628:	0002689c 	.word	0x0002689c
   1662c:	0002b6e8 	.word	0x0002b6e8
   16630:	000268b4 	.word	0x000268b4
   16634:	00025834 	.word	0x00025834
   16638:	000267d0 	.word	0x000267d0
   1663c:	00026888 	.word	0x00026888

00016640 <CUSBCDCEthernetDevice::GetMACAddress() const>:
   16640:	e2800018 	add	r0, r0, #24
   16644:	e12fff1e 	bx	lr

00016648 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>:
   16648:	e92d4070 	push	{r4, r5, r6, lr}
   1664c:	e5905014 	ldr	r5, [r0, #20]
   16650:	e59f3068 	ldr	r3, [pc, #104]	; 166c0 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()+0x78>
   16654:	e3550000 	cmp	r5, #0
   16658:	e1a04000 	mov	r4, r0
   1665c:	e5803000 	str	r3, [r0]
   16660:	0a000004 	beq	16678 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()+0x30>
   16664:	e1a00005 	mov	r0, r5
   16668:	ebffe09b 	bl	e8dc <CUSBEndpoint::~CUSBEndpoint()>
   1666c:	e1a00005 	mov	r0, r5
   16670:	e3a01014 	mov	r1, #20
   16674:	eb0031c8 	bl	22d9c <operator delete(void*, unsigned int)>
   16678:	e3a03000 	mov	r3, #0
   1667c:	e5945010 	ldr	r5, [r4, #16]
   16680:	e5843014 	str	r3, [r4, #20]
   16684:	e1550003 	cmp	r5, r3
   16688:	0a000004 	beq	166a0 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()+0x58>
   1668c:	e1a00005 	mov	r0, r5
   16690:	ebffe091 	bl	e8dc <CUSBEndpoint::~CUSBEndpoint()>
   16694:	e1a00005 	mov	r0, r5
   16698:	e3a01014 	mov	r1, #20
   1669c:	eb0031be 	bl	22d9c <operator delete(void*, unsigned int)>
   166a0:	e3a03000 	mov	r3, #0
   166a4:	e2840018 	add	r0, r4, #24
   166a8:	e5843010 	str	r3, [r4, #16]
   166ac:	eb000a0d 	bl	18ee8 <CMACAddress::~CMACAddress()>
   166b0:	e1a00004 	mov	r0, r4
   166b4:	eb000abb 	bl	191a8 <CNetDevice::~CNetDevice()>
   166b8:	e1a00004 	mov	r0, r4
   166bc:	e8bd8070 	pop	{r4, r5, r6, pc}
   166c0:	000268c4 	.word	0x000268c4

000166c4 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>:
   166c4:	e92d4010 	push	{r4, lr}
   166c8:	e1a04000 	mov	r4, r0
   166cc:	ebffffdd 	bl	16648 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>
   166d0:	e1a00004 	mov	r0, r4
   166d4:	e3a01020 	mov	r1, #32
   166d8:	eb0031af 	bl	22d9c <operator delete(void*, unsigned int)>
   166dc:	e1a00004 	mov	r0, r4
   166e0:	e8bd8010 	pop	{r4, pc}

000166e4 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)>:
   166e4:	e92d4070 	push	{r4, r5, r6, lr}
   166e8:	e5903014 	ldr	r3, [r0, #20]
   166ec:	e24dd008 	sub	sp, sp, #8
   166f0:	e3530000 	cmp	r3, #0
   166f4:	e1a04000 	mov	r4, r0
   166f8:	e1a05001 	mov	r5, r1
   166fc:	e1a06002 	mov	r6, r2
   16700:	0a000018 	beq	16768 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x84>
   16704:	e3550000 	cmp	r5, #0
   16708:	0a000011 	beq	16754 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x70>
   1670c:	e3560d19 	cmp	r6, #1600	; 0x640
   16710:	9a000003 	bls	16724 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x40>
   16714:	e3a020ac 	mov	r2, #172	; 0xac
   16718:	e59f105c 	ldr	r1, [pc, #92]	; 1677c <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x98>
   1671c:	e59f005c 	ldr	r0, [pc, #92]	; 16780 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x9c>
   16720:	eb0010d4 	bl	1aa78 <assertion_failed>
   16724:	e1a00004 	mov	r0, r4
   16728:	ebfff9e0 	bl	14eb0 <CUSBFunction::GetHost() const>
   1672c:	e3a0c000 	mov	ip, #0
   16730:	e5941014 	ldr	r1, [r4, #20]
   16734:	e1a03006 	mov	r3, r6
   16738:	e1a02005 	mov	r2, r5
   1673c:	e58dc000 	str	ip, [sp]
   16740:	ebffe14f 	bl	ec84 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   16744:	e1e00000 	mvn	r0, r0
   16748:	e1a00fa0 	lsr	r0, r0, #31
   1674c:	e28dd008 	add	sp, sp, #8
   16750:	e8bd8070 	pop	{r4, r5, r6, pc}
   16754:	e3a020ab 	mov	r2, #171	; 0xab
   16758:	e59f101c 	ldr	r1, [pc, #28]	; 1677c <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x98>
   1675c:	e59f0020 	ldr	r0, [pc, #32]	; 16784 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0xa0>
   16760:	eb0010c4 	bl	1aa78 <assertion_failed>
   16764:	eaffffe8 	b	1670c <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x28>
   16768:	e3a020aa 	mov	r2, #170	; 0xaa
   1676c:	e59f1008 	ldr	r1, [pc, #8]	; 1677c <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x98>
   16770:	e59f0010 	ldr	r0, [pc, #16]	; 16788 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0xa4>
   16774:	eb0010bf 	bl	1aa78 <assertion_failed>
   16778:	eaffffe1 	b	16704 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x20>
   1677c:	000268fc 	.word	0x000268fc
   16780:	00026928 	.word	0x00026928
   16784:	00025930 	.word	0x00025930
   16788:	00026910 	.word	0x00026910

0001678c <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)>:
   1678c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   16790:	e5903010 	ldr	r3, [r0, #16]
   16794:	e24dd034 	sub	sp, sp, #52	; 0x34
   16798:	e3530000 	cmp	r3, #0
   1679c:	e1a04000 	mov	r4, r0
   167a0:	e1a06001 	mov	r6, r1
   167a4:	e1a07002 	mov	r7, r2
   167a8:	0a000026 	beq	16848 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xbc>
   167ac:	e3560000 	cmp	r6, #0
   167b0:	0a00001f 	beq	16834 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xa8>
   167b4:	e3a05000 	mov	r5, #0
   167b8:	e5941010 	ldr	r1, [r4, #16]
   167bc:	e1a02006 	mov	r2, r6
   167c0:	e3a03d19 	mov	r3, #1600	; 0x640
   167c4:	e58d5000 	str	r5, [sp]
   167c8:	e28d0008 	add	r0, sp, #8
   167cc:	ebffe145 	bl	ece8 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   167d0:	e28d0008 	add	r0, sp, #8
   167d4:	ebffe1d5 	bl	ef30 <CUSBRequest::SetCompleteOnNAK()>
   167d8:	e1a00004 	mov	r0, r4
   167dc:	ebfff9b3 	bl	14eb0 <CUSBFunction::GetHost() const>
   167e0:	e5903000 	ldr	r3, [r0]
   167e4:	e1a02005 	mov	r2, r5
   167e8:	e5933008 	ldr	r3, [r3, #8]
   167ec:	e28d1008 	add	r1, sp, #8
   167f0:	e12fff33 	blx	r3
   167f4:	e2504000 	subs	r4, r0, #0
   167f8:	1a000005 	bne	16814 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0x88>
   167fc:	e3a04000 	mov	r4, #0
   16800:	e28d0008 	add	r0, sp, #8
   16804:	ebffe15c 	bl	ed7c <CUSBRequest::~CUSBRequest()>
   16808:	e1a00004 	mov	r0, r4
   1680c:	e28dd034 	add	sp, sp, #52	; 0x34
   16810:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   16814:	e28d0008 	add	r0, sp, #8
   16818:	ebffe16e 	bl	edd8 <CUSBRequest::GetResultLength() const>
   1681c:	e2505000 	subs	r5, r0, #0
   16820:	0afffff5 	beq	167fc <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0x70>
   16824:	e3570000 	cmp	r7, #0
   16828:	0a00000b 	beq	1685c <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xd0>
   1682c:	e5875000 	str	r5, [r7]
   16830:	eafffff2 	b	16800 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0x74>
   16834:	e3a020b3 	mov	r2, #179	; 0xb3
   16838:	e59f1030 	ldr	r1, [pc, #48]	; 16870 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xe4>
   1683c:	e59f0030 	ldr	r0, [pc, #48]	; 16874 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xe8>
   16840:	eb00108c 	bl	1aa78 <assertion_failed>
   16844:	eaffffda 	b	167b4 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0x28>
   16848:	e3a020b2 	mov	r2, #178	; 0xb2
   1684c:	e59f101c 	ldr	r1, [pc, #28]	; 16870 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xe4>
   16850:	e59f0020 	ldr	r0, [pc, #32]	; 16878 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xec>
   16854:	eb001087 	bl	1aa78 <assertion_failed>
   16858:	eaffffd3 	b	167ac <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0x20>
   1685c:	e3a020c3 	mov	r2, #195	; 0xc3
   16860:	e59f1008 	ldr	r1, [pc, #8]	; 16870 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xe4>
   16864:	e59f0010 	ldr	r0, [pc, #16]	; 1687c <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xf0>
   16868:	eb001082 	bl	1aa78 <assertion_failed>
   1686c:	eaffffee 	b	1682c <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xa0>
   16870:	000268fc 	.word	0x000268fc
   16874:	00025930 	.word	0x00025930
   16878:	00026948 	.word	0x00026948
   1687c:	00026960 	.word	0x00026960

00016880 <CUSBCDCEthernetDevice::CUSBCDCEthernetDevice(CUSBFunction*)>:
   16880:	e92d4010 	push	{r4, lr}
   16884:	e1a04000 	mov	r4, r0
   16888:	eb000a3e 	bl	19188 <CNetDevice::CNetDevice(CUSBFunction*)>
   1688c:	e3a03000 	mov	r3, #0
   16890:	e59f2018 	ldr	r2, [pc, #24]	; 168b0 <CUSBCDCEthernetDevice::CUSBCDCEthernetDevice(CUSBFunction*)+0x30>
   16894:	e5843010 	str	r3, [r4, #16]
   16898:	e5842000 	str	r2, [r4]
   1689c:	e5843014 	str	r3, [r4, #20]
   168a0:	e2840018 	add	r0, r4, #24
   168a4:	eb00098c 	bl	18edc <CMACAddress::CMACAddress()>
   168a8:	e1a00004 	mov	r0, r4
   168ac:	e8bd8010 	pop	{r4, pc}
   168b0:	000268c4 	.word	0x000268c4

000168b4 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)>:
   168b4:	e92d4070 	push	{r4, r5, r6, lr}
   168b8:	e24dd018 	sub	sp, sp, #24
   168bc:	e1a04001 	mov	r4, r1
   168c0:	e1a05000 	mov	r5, r0
   168c4:	ebfff958 	bl	14e2c <CUSBFunction::GetDevice() const>
   168c8:	e1a01000 	mov	r1, r0
   168cc:	e28d000c 	add	r0, sp, #12
   168d0:	eb0001a8 	bl	16f78 <CUSBString::CUSBString(CUSBDevice*)>
   168d4:	e3540000 	cmp	r4, #0
   168d8:	1a000005 	bne	168f4 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x40>
   168dc:	e3a04000 	mov	r4, #0
   168e0:	e28d000c 	add	r0, sp, #12
   168e4:	eb0001f4 	bl	170bc <CUSBString::~CUSBString()>
   168e8:	e1a00004 	mov	r0, r4
   168ec:	e28dd018 	add	sp, sp, #24
   168f0:	e8bd8070 	pop	{r4, r5, r6, pc}
   168f4:	e28d000c 	add	r0, sp, #12
   168f8:	eb0002a7 	bl	1739c <CUSBString::GetLanguageID()>
   168fc:	e1a01004 	mov	r1, r4
   16900:	e1a02000 	mov	r2, r0
   16904:	e28d000c 	add	r0, sp, #12
   16908:	eb0001fb 	bl	170fc <CUSBString::GetFromDescriptor(unsigned char, unsigned short)>
   1690c:	e2504000 	subs	r4, r0, #0
   16910:	0afffff1 	beq	168dc <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x28>
   16914:	e28d000c 	add	r0, sp, #12
   16918:	eb00029d 	bl	17394 <CUSBString::Get() const>
   1691c:	e2506000 	subs	r6, r0, #0
   16920:	0a00001b 	beq	16994 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0xe0>
   16924:	e2861002 	add	r1, r6, #2
   16928:	e286c00e 	add	ip, r6, #14
   1692c:	e28d0003 	add	r0, sp, #3
   16930:	e15130d2 	ldrsb	r3, [r1, #-2]
   16934:	e3530039 	cmp	r3, #57	; 0x39
   16938:	c2433007 	subgt	r3, r3, #7
   1693c:	c6af3073 	sxtbgt	r3, r3
   16940:	e2433030 	sub	r3, r3, #48	; 0x30
   16944:	e6ef2073 	uxtb	r2, r3
   16948:	e352000f 	cmp	r2, #15
   1694c:	8affffe2 	bhi	168dc <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x28>
   16950:	e15130d1 	ldrsb	r3, [r1, #-1]
   16954:	e2811002 	add	r1, r1, #2
   16958:	e3530039 	cmp	r3, #57	; 0x39
   1695c:	c2433007 	subgt	r3, r3, #7
   16960:	c6af3073 	sxtbgt	r3, r3
   16964:	e2433030 	sub	r3, r3, #48	; 0x30
   16968:	e6ef3073 	uxtb	r3, r3
   1696c:	e353000f 	cmp	r3, #15
   16970:	e1833202 	orr	r3, r3, r2, lsl #4
   16974:	8affffd8 	bhi	168dc <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x28>
   16978:	e15c0001 	cmp	ip, r1
   1697c:	e5e03001 	strb	r3, [r0, #1]!
   16980:	1affffea 	bne	16930 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x7c>
   16984:	e2850018 	add	r0, r5, #24
   16988:	e28d1004 	add	r1, sp, #4
   1698c:	eb000977 	bl	18f70 <CMACAddress::Set(unsigned char const*)>
   16990:	eaffffd2 	b	168e0 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x2c>
   16994:	e3a020d3 	mov	r2, #211	; 0xd3
   16998:	e59f1008 	ldr	r1, [pc, #8]	; 169a8 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0xf4>
   1699c:	e59f0008 	ldr	r0, [pc, #8]	; 169ac <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0xf8>
   169a0:	eb001034 	bl	1aa78 <assertion_failed>
   169a4:	eaffffde 	b	16924 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x70>
   169a8:	000268fc 	.word	0x000268fc
   169ac:	00026974 	.word	0x00026974

000169b0 <CUSBCDCEthernetDevice::Configure()>:
   169b0:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   169b4:	e1a05000 	mov	r5, r0
   169b8:	e24dd01c 	sub	sp, sp, #28
   169bc:	e3a06024 	mov	r6, #36	; 0x24
   169c0:	ea000002 	b	169d0 <CUSBCDCEthernetDevice::Configure()+0x20>
   169c4:	e5d43002 	ldrb	r3, [r4, #2]
   169c8:	e353000f 	cmp	r3, #15
   169cc:	0a00000a 	beq	169fc <CUSBCDCEthernetDevice::Configure()+0x4c>
   169d0:	e1a01006 	mov	r1, r6
   169d4:	e1a00005 	mov	r0, r5
   169d8:	ebfff976 	bl	14fb8 <CUSBFunction::GetDescriptor(unsigned char)>
   169dc:	e2504000 	subs	r4, r0, #0
   169e0:	1afffff7 	bne	169c4 <CUSBCDCEthernetDevice::Configure()+0x14>
   169e4:	e1a00005 	mov	r0, r5
   169e8:	e59f11f0 	ldr	r1, [pc, #496]	; 16be0 <CUSBCDCEthernetDevice::Configure()+0x230>
   169ec:	ebfff984 	bl	15004 <CUSBFunction::ConfigurationError(char const*) const>
   169f0:	e1a00004 	mov	r0, r4
   169f4:	e28dd01c 	add	sp, sp, #28
   169f8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   169fc:	e3a06004 	mov	r6, #4
   16a00:	e1a01006 	mov	r1, r6
   16a04:	e1a00005 	mov	r0, r5
   16a08:	ebfff96a 	bl	14fb8 <CUSBFunction::GetDescriptor(unsigned char)>
   16a0c:	e2503000 	subs	r3, r0, #0
   16a10:	0a00003c 	beq	16b08 <CUSBCDCEthernetDevice::Configure()+0x158>
   16a14:	e5d32005 	ldrb	r2, [r3, #5]
   16a18:	e352000a 	cmp	r2, #10
   16a1c:	1afffff7 	bne	16a00 <CUSBCDCEthernetDevice::Configure()+0x50>
   16a20:	e5d32006 	ldrb	r2, [r3, #6]
   16a24:	e3520000 	cmp	r2, #0
   16a28:	1afffff4 	bne	16a00 <CUSBCDCEthernetDevice::Configure()+0x50>
   16a2c:	e5d32007 	ldrb	r2, [r3, #7]
   16a30:	e3520000 	cmp	r2, #0
   16a34:	1afffff1 	bne	16a00 <CUSBCDCEthernetDevice::Configure()+0x50>
   16a38:	e5d33004 	ldrb	r3, [r3, #4]
   16a3c:	e3530001 	cmp	r3, #1
   16a40:	daffffee 	ble	16a00 <CUSBCDCEthernetDevice::Configure()+0x50>
   16a44:	e5d41003 	ldrb	r1, [r4, #3]
   16a48:	e1a00005 	mov	r0, r5
   16a4c:	ebffff98 	bl	168b4 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)>
   16a50:	e2504000 	subs	r4, r0, #0
   16a54:	0a000043 	beq	16b68 <CUSBCDCEthernetDevice::Configure()+0x1b8>
   16a58:	e28d0008 	add	r0, sp, #8
   16a5c:	eb0024b6 	bl	1fd3c <CString::CString()>
   16a60:	e28d1008 	add	r1, sp, #8
   16a64:	e2850018 	add	r0, r5, #24
   16a68:	eb0009a1 	bl	190f4 <CMACAddress::Format(CString*) const>
   16a6c:	eb0019f4 	bl	1d244 <CLogger::Get()>
   16a70:	e1a04000 	mov	r4, r0
   16a74:	e28d0008 	add	r0, sp, #8
   16a78:	eb0024c5 	bl	1fd94 <CString::operator char const*() const>
   16a7c:	e59f3160 	ldr	r3, [pc, #352]	; 16be4 <CUSBCDCEthernetDevice::Configure()+0x234>
   16a80:	e58d0000 	str	r0, [sp]
   16a84:	e3a02004 	mov	r2, #4
   16a88:	e1a00004 	mov	r0, r4
   16a8c:	e59f114c 	ldr	r1, [pc, #332]	; 16be0 <CUSBCDCEthernetDevice::Configure()+0x230>
   16a90:	eb001b94 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16a94:	e3a06005 	mov	r6, #5
   16a98:	e3a07014 	mov	r7, #20
   16a9c:	ea000003 	b	16ab0 <CUSBCDCEthernetDevice::Configure()+0x100>
   16aa0:	e5d43003 	ldrb	r3, [r4, #3]
   16aa4:	e203303f 	and	r3, r3, #63	; 0x3f
   16aa8:	e3530002 	cmp	r3, #2
   16aac:	0a00001c 	beq	16b24 <CUSBCDCEthernetDevice::Configure()+0x174>
   16ab0:	e1a01006 	mov	r1, r6
   16ab4:	e1a00005 	mov	r0, r5
   16ab8:	ebfff93e 	bl	14fb8 <CUSBFunction::GetDescriptor(unsigned char)>
   16abc:	e2504000 	subs	r4, r0, #0
   16ac0:	1afffff6 	bne	16aa0 <CUSBCDCEthernetDevice::Configure()+0xf0>
   16ac4:	e5953010 	ldr	r3, [r5, #16]
   16ac8:	e1a00005 	mov	r0, r5
   16acc:	e3530000 	cmp	r3, #0
   16ad0:	0a000030 	beq	16b98 <CUSBCDCEthernetDevice::Configure()+0x1e8>
   16ad4:	e5953014 	ldr	r3, [r5, #20]
   16ad8:	e3530000 	cmp	r3, #0
   16adc:	0a00002d 	beq	16b98 <CUSBCDCEthernetDevice::Configure()+0x1e8>
   16ae0:	ebfff903 	bl	14ef4 <CUSBFunction::Configure()>
   16ae4:	e2504000 	subs	r4, r0, #0
   16ae8:	0a000024 	beq	16b80 <CUSBCDCEthernetDevice::Configure()+0x1d0>
   16aec:	e1a00005 	mov	r0, r5
   16af0:	eb0009c6 	bl	19210 <CNetDevice::AddNetDevice()>
   16af4:	e28d0008 	add	r0, sp, #8
   16af8:	eb00245c 	bl	1fc70 <CString::~CString()>
   16afc:	e1a00004 	mov	r0, r4
   16b00:	e28dd01c 	add	sp, sp, #28
   16b04:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   16b08:	e1a04003 	mov	r4, r3
   16b0c:	e1a00005 	mov	r0, r5
   16b10:	e59f10c8 	ldr	r1, [pc, #200]	; 16be0 <CUSBCDCEthernetDevice::Configure()+0x230>
   16b14:	ebfff93a 	bl	15004 <CUSBFunction::ConfigurationError(char const*) const>
   16b18:	e1a00004 	mov	r0, r4
   16b1c:	e28dd01c 	add	sp, sp, #28
   16b20:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   16b24:	e1d430d2 	ldrsb	r3, [r4, #2]
   16b28:	e3530000 	cmp	r3, #0
   16b2c:	ba00001d 	blt	16ba8 <CUSBCDCEthernetDevice::Configure()+0x1f8>
   16b30:	e5953014 	ldr	r3, [r5, #20]
   16b34:	e1a00005 	mov	r0, r5
   16b38:	e3530000 	cmp	r3, #0
   16b3c:	1a000015 	bne	16b98 <CUSBCDCEthernetDevice::Configure()+0x1e8>
   16b40:	ebfff8b9 	bl	14e2c <CUSBFunction::GetDevice() const>
   16b44:	e1a09000 	mov	r9, r0
   16b48:	e1a00007 	mov	r0, r7
   16b4c:	eb00308e 	bl	22d8c <operator new(unsigned int)>
   16b50:	e1a08000 	mov	r8, r0
   16b54:	e1a02004 	mov	r2, r4
   16b58:	e1a01009 	mov	r1, r9
   16b5c:	ebffdecc 	bl	e694 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   16b60:	e5858014 	str	r8, [r5, #20]
   16b64:	eaffffd1 	b	16ab0 <CUSBCDCEthernetDevice::Configure()+0x100>
   16b68:	eb0019b5 	bl	1d244 <CLogger::Get()>
   16b6c:	e59f3074 	ldr	r3, [pc, #116]	; 16be8 <CUSBCDCEthernetDevice::Configure()+0x238>
   16b70:	e3a02001 	mov	r2, #1
   16b74:	e59f1064 	ldr	r1, [pc, #100]	; 16be0 <CUSBCDCEthernetDevice::Configure()+0x230>
   16b78:	eb001b5a 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16b7c:	eaffff9b 	b	169f0 <CUSBCDCEthernetDevice::Configure()+0x40>
   16b80:	eb0019af 	bl	1d244 <CLogger::Get()>
   16b84:	e59f3060 	ldr	r3, [pc, #96]	; 16bec <CUSBCDCEthernetDevice::Configure()+0x23c>
   16b88:	e3a02001 	mov	r2, #1
   16b8c:	e59f104c 	ldr	r1, [pc, #76]	; 16be0 <CUSBCDCEthernetDevice::Configure()+0x230>
   16b90:	eb001b54 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16b94:	eaffffd6 	b	16af4 <CUSBCDCEthernetDevice::Configure()+0x144>
   16b98:	e59f1040 	ldr	r1, [pc, #64]	; 16be0 <CUSBCDCEthernetDevice::Configure()+0x230>
   16b9c:	ebfff918 	bl	15004 <CUSBFunction::ConfigurationError(char const*) const>
   16ba0:	e3a04000 	mov	r4, #0
   16ba4:	eaffffd2 	b	16af4 <CUSBCDCEthernetDevice::Configure()+0x144>
   16ba8:	e5953010 	ldr	r3, [r5, #16]
   16bac:	e1a00005 	mov	r0, r5
   16bb0:	e3530000 	cmp	r3, #0
   16bb4:	1afffff7 	bne	16b98 <CUSBCDCEthernetDevice::Configure()+0x1e8>
   16bb8:	ebfff89b 	bl	14e2c <CUSBFunction::GetDevice() const>
   16bbc:	e1a09000 	mov	r9, r0
   16bc0:	e1a00007 	mov	r0, r7
   16bc4:	eb003070 	bl	22d8c <operator new(unsigned int)>
   16bc8:	e1a08000 	mov	r8, r0
   16bcc:	e1a02004 	mov	r2, r4
   16bd0:	e1a01009 	mov	r1, r9
   16bd4:	ebffdeae 	bl	e694 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   16bd8:	e5858010 	str	r8, [r5, #16]
   16bdc:	eaffffb3 	b	16ab0 <CUSBCDCEthernetDevice::Configure()+0x100>
   16be0:	000268f4 	.word	0x000268f4
   16be4:	0002699c 	.word	0x0002699c
   16be8:	00026984 	.word	0x00026984
   16bec:	00025834 	.word	0x00025834

00016bf0 <CNetDevice::IsLinkUp()>:
   16bf0:	e3a00001 	mov	r0, #1
   16bf4:	e12fff1e 	bx	lr

00016bf8 <CNetDevice::GetLinkSpeed()>:
   16bf8:	e3a00006 	mov	r0, #6
   16bfc:	e12fff1e 	bx	lr

00016c00 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)>:
   16c00:	e3a03000 	mov	r3, #0
   16c04:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   16c08:	e1a05002 	mov	r5, r2
   16c0c:	e1510003 	cmp	r1, r3
   16c10:	e0812002 	add	r2, r1, r2
   16c14:	e5c03008 	strb	r3, [r0, #8]
   16c18:	e5803014 	str	r3, [r0, #20]
   16c1c:	e1a04000 	mov	r4, r0
   16c20:	e8800022 	stm	r0, {r1, r5}
   16c24:	e5801010 	str	r1, [r0, #16]
   16c28:	e5801018 	str	r1, [r0, #24]
   16c2c:	e580200c 	str	r2, [r0, #12]
   16c30:	11a03005 	movne	r3, r5
   16c34:	0a00003f 	beq	16d38 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x138>
   16c38:	e2433004 	sub	r3, r3, #4
   16c3c:	e3530f7f 	cmp	r3, #508	; 0x1fc
   16c40:	8a000003 	bhi	16c54 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x54>
   16c44:	e5943000 	ldr	r3, [r4]
   16c48:	e5d32000 	ldrb	r2, [r3]
   16c4c:	e3520009 	cmp	r2, #9
   16c50:	0a000001 	beq	16c5c <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x5c>
   16c54:	e1a00004 	mov	r0, r4
   16c58:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   16c5c:	e5d32001 	ldrb	r2, [r3, #1]
   16c60:	e3520002 	cmp	r2, #2
   16c64:	1afffffa 	bne	16c54 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x54>
   16c68:	e5d3c002 	ldrb	ip, [r3, #2]
   16c6c:	e5d32003 	ldrb	r2, [r3, #3]
   16c70:	e18cc402 	orr	ip, ip, r2, lsl #8
   16c74:	e155000c 	cmp	r5, ip
   16c78:	3afffff5 	bcc	16c54 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x54>
   16c7c:	e3a05000 	mov	r5, #0
   16c80:	8083c00c 	addhi	ip, r3, ip
   16c84:	9594c00c 	ldrls	ip, [r4, #12]
   16c88:	8584c00c 	strhi	ip, [r4, #12]
   16c8c:	e3a06009 	mov	r6, #9
   16c90:	e1a0e005 	mov	lr, r5
   16c94:	e3a08007 	mov	r8, #7
   16c98:	e3a07001 	mov	r7, #1
   16c9c:	ea000005 	b	16cb8 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xb8>
   16ca0:	e3520005 	cmp	r2, #5
   16ca4:	0a00001c 	beq	16d1c <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x11c>
   16ca8:	e3520002 	cmp	r2, #2
   16cac:	0a000016 	beq	16d0c <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x10c>
   16cb0:	e1a03001 	mov	r3, r1
   16cb4:	e1a0e002 	mov	lr, r2
   16cb8:	e2832002 	add	r2, r3, #2
   16cbc:	e15c0002 	cmp	ip, r2
   16cc0:	9a000022 	bls	16d50 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x150>
   16cc4:	e5d30000 	ldrb	r0, [r3]
   16cc8:	e5d32001 	ldrb	r2, [r3, #1]
   16ccc:	e0831000 	add	r1, r3, r0
   16cd0:	e151000c 	cmp	r1, ip
   16cd4:	8a00000a 	bhi	16d04 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x104>
   16cd8:	e3520004 	cmp	r2, #4
   16cdc:	1affffef 	bne	16ca0 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xa0>
   16ce0:	e35e0000 	cmp	lr, #0
   16ce4:	0a000006 	beq	16d04 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x104>
   16ce8:	e5d35005 	ldrb	r5, [r3, #5]
   16cec:	e1a0e006 	mov	lr, r6
   16cf0:	e2455001 	sub	r5, r5, #1
   16cf4:	e16f5f15 	clz	r5, r5
   16cf8:	e1a052a5 	lsr	r5, r5, #5
   16cfc:	e150000e 	cmp	r0, lr
   16d00:	0affffea 	beq	16cb0 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xb0>
   16d04:	e5843018 	str	r3, [r4, #24]
   16d08:	eaffffd1 	b	16c54 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x54>
   16d0c:	e35e0000 	cmp	lr, #0
   16d10:	1afffffb 	bne	16d04 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x104>
   16d14:	e1a0e006 	mov	lr, r6
   16d18:	eafffff7 	b	16cfc <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xfc>
   16d1c:	e31e00fd 	tst	lr, #253	; 0xfd
   16d20:	0afffff7 	beq	16d04 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x104>
   16d24:	e3550000 	cmp	r5, #0
   16d28:	11a0e006 	movne	lr, r6
   16d2c:	11a05007 	movne	r5, r7
   16d30:	01a0e008 	moveq	lr, r8
   16d34:	eafffff0 	b	16cfc <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xfc>
   16d38:	e3a02024 	mov	r2, #36	; 0x24
   16d3c:	e59f1020 	ldr	r1, [pc, #32]	; 16d64 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x164>
   16d40:	e59f0020 	ldr	r0, [pc, #32]	; 16d68 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x168>
   16d44:	eb000f4b 	bl	1aa78 <assertion_failed>
   16d48:	e5943004 	ldr	r3, [r4, #4]
   16d4c:	eaffffb9 	b	16c38 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x38>
   16d50:	e153000c 	cmp	r3, ip
   16d54:	1affffea 	bne	16d04 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x104>
   16d58:	e3a03001 	mov	r3, #1
   16d5c:	e5c43008 	strb	r3, [r4, #8]
   16d60:	eaffffbb 	b	16c54 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x54>
   16d64:	000269b0 	.word	0x000269b0
   16d68:	000269c4 	.word	0x000269c4

00016d6c <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)>:
   16d6c:	e92d4070 	push	{r4, r5, r6, lr}
   16d70:	e2515000 	subs	r5, r1, #0
   16d74:	e1a04000 	mov	r4, r0
   16d78:	0a00000b 	beq	16dac <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)+0x40>
   16d7c:	e8954040 	ldm	r5, {r6, lr}
   16d80:	e5d5c008 	ldrb	ip, [r5, #8]
   16d84:	e285000c 	add	r0, r5, #12
   16d88:	e890000f 	ldm	r0, {r0, r1, r2, r3}
   16d8c:	e8844040 	stm	r4, {r6, lr}
   16d90:	e584000c 	str	r0, [r4, #12]
   16d94:	e5c4c008 	strb	ip, [r4, #8]
   16d98:	e5841010 	str	r1, [r4, #16]
   16d9c:	e5842014 	str	r2, [r4, #20]
   16da0:	e5843018 	str	r3, [r4, #24]
   16da4:	e1a00004 	mov	r0, r4
   16da8:	e8bd8070 	pop	{r4, r5, r6, pc}
   16dac:	e3a02082 	mov	r2, #130	; 0x82
   16db0:	e59f1008 	ldr	r1, [pc, #8]	; 16dc0 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)+0x54>
   16db4:	e59f0008 	ldr	r0, [pc, #8]	; 16dc4 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)+0x58>
   16db8:	eb000f2e 	bl	1aa78 <assertion_failed>
   16dbc:	eaffffee 	b	16d7c <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)+0x10>
   16dc0:	000269b0 	.word	0x000269b0
   16dc4:	000269d4 	.word	0x000269d4

00016dc8 <CUSBConfigurationParser::~CUSBConfigurationParser()>:
   16dc8:	e12fff1e 	bx	lr

00016dcc <CUSBConfigurationParser::IsValid() const>:
   16dcc:	e5d00008 	ldrb	r0, [r0, #8]
   16dd0:	e12fff1e 	bx	lr

00016dd4 <CUSBConfigurationParser::GetDescriptor(unsigned char)>:
   16dd4:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16dd8:	e5d03008 	ldrb	r3, [r0, #8]
   16ddc:	e1a06000 	mov	r6, r0
   16de0:	e3530000 	cmp	r3, #0
   16de4:	e1a07001 	mov	r7, r1
   16de8:	0a000029 	beq	16e94 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xc0>
   16dec:	e5963010 	ldr	r3, [r6, #16]
   16df0:	e596200c 	ldr	r2, [r6, #12]
   16df4:	e1530002 	cmp	r3, r2
   16df8:	2a00001c 	bcs	16e70 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x9c>
   16dfc:	e247b005 	sub	fp, r7, #5
   16e00:	e16fbf1b 	clz	fp, fp
   16e04:	e3a0a0a9 	mov	sl, #169	; 0xa9
   16e08:	e1a0b2ab 	lsr	fp, fp, #5
   16e0c:	e59f9094 	ldr	r9, [pc, #148]	; 16ea8 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xd4>
   16e10:	e59f8094 	ldr	r8, [pc, #148]	; 16eac <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xd8>
   16e14:	ea00000b 	b	16e48 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x74>
   16e18:	e3550004 	cmp	r5, #4
   16e1c:	13a03000 	movne	r3, #0
   16e20:	020b3001 	andeq	r3, fp, #1
   16e24:	e3530000 	cmp	r3, #0
   16e28:	1a000010 	bne	16e70 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x9c>
   16e2c:	e1550007 	cmp	r5, r7
   16e30:	0a000011 	beq	16e7c <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xa8>
   16e34:	e596200c 	ldr	r2, [r6, #12]
   16e38:	e1a03004 	mov	r3, r4
   16e3c:	e1520004 	cmp	r2, r4
   16e40:	e5864010 	str	r4, [r6, #16]
   16e44:	9a000009 	bls	16e70 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x9c>
   16e48:	e5d34000 	ldrb	r4, [r3]
   16e4c:	e5d35001 	ldrb	r5, [r3, #1]
   16e50:	e0834004 	add	r4, r3, r4
   16e54:	e1540002 	cmp	r4, r2
   16e58:	9affffee 	bls	16e18 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x44>
   16e5c:	e1a0200a 	mov	r2, sl
   16e60:	e1a01009 	mov	r1, r9
   16e64:	e1a00008 	mov	r0, r8
   16e68:	eb000f02 	bl	1aa78 <assertion_failed>
   16e6c:	eaffffe9 	b	16e18 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x44>
   16e70:	e3a00000 	mov	r0, #0
   16e74:	e5860014 	str	r0, [r6, #20]
   16e78:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e7c:	e5960010 	ldr	r0, [r6, #16]
   16e80:	e5864010 	str	r4, [r6, #16]
   16e84:	e3500000 	cmp	r0, #0
   16e88:	15860018 	strne	r0, [r6, #24]
   16e8c:	e5860014 	str	r0, [r6, #20]
   16e90:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e94:	e3a0209f 	mov	r2, #159	; 0x9f
   16e98:	e59f1008 	ldr	r1, [pc, #8]	; 16ea8 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xd4>
   16e9c:	e59f000c 	ldr	r0, [pc, #12]	; 16eb0 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xdc>
   16ea0:	eb000ef4 	bl	1aa78 <assertion_failed>
   16ea4:	eaffffd0 	b	16dec <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x18>
   16ea8:	000269b0 	.word	0x000269b0
   16eac:	000269e4 	.word	0x000269e4
   16eb0:	00024ce4 	.word	0x00024ce4

00016eb4 <CUSBConfigurationParser::GetCurrentDescriptor()>:
   16eb4:	e5d03008 	ldrb	r3, [r0, #8]
   16eb8:	e92d4010 	push	{r4, lr}
   16ebc:	e3530000 	cmp	r3, #0
   16ec0:	e1a04000 	mov	r4, r0
   16ec4:	0a000008 	beq	16eec <CUSBConfigurationParser::GetCurrentDescriptor()+0x38>
   16ec8:	e5940014 	ldr	r0, [r4, #20]
   16ecc:	e3500000 	cmp	r0, #0
   16ed0:	18bd8010 	popne	{r4, pc}
   16ed4:	e3a020c8 	mov	r2, #200	; 0xc8
   16ed8:	e59f1020 	ldr	r1, [pc, #32]	; 16f00 <CUSBConfigurationParser::GetCurrentDescriptor()+0x4c>
   16edc:	e59f0020 	ldr	r0, [pc, #32]	; 16f04 <CUSBConfigurationParser::GetCurrentDescriptor()+0x50>
   16ee0:	eb000ee4 	bl	1aa78 <assertion_failed>
   16ee4:	e5940014 	ldr	r0, [r4, #20]
   16ee8:	e8bd8010 	pop	{r4, pc}
   16eec:	e3a020c7 	mov	r2, #199	; 0xc7
   16ef0:	e59f1008 	ldr	r1, [pc, #8]	; 16f00 <CUSBConfigurationParser::GetCurrentDescriptor()+0x4c>
   16ef4:	e59f000c 	ldr	r0, [pc, #12]	; 16f08 <CUSBConfigurationParser::GetCurrentDescriptor()+0x54>
   16ef8:	eb000ede 	bl	1aa78 <assertion_failed>
   16efc:	eafffff1 	b	16ec8 <CUSBConfigurationParser::GetCurrentDescriptor()+0x14>
   16f00:	000269b0 	.word	0x000269b0
   16f04:	00026a00 	.word	0x00026a00
   16f08:	00024ce4 	.word	0x00024ce4

00016f0c <CUSBConfigurationParser::Error(char const*) const>:
   16f0c:	e92d4030 	push	{r4, r5, lr}
   16f10:	e2515000 	subs	r5, r1, #0
   16f14:	e24dd00c 	sub	sp, sp, #12
   16f18:	e1a04000 	mov	r4, r0
   16f1c:	0a00000d 	beq	16f58 <CUSBConfigurationParser::Error(char const*) const+0x4c>
   16f20:	eb0018c7 	bl	1d244 <CLogger::Get()>
   16f24:	e5941000 	ldr	r1, [r4]
   16f28:	e5942018 	ldr	r2, [r4, #24]
   16f2c:	e59f3038 	ldr	r3, [pc, #56]	; 16f6c <CUSBConfigurationParser::Error(char const*) const+0x60>
   16f30:	e0422001 	sub	r2, r2, r1
   16f34:	e58d2000 	str	r2, [sp]
   16f38:	e1a01005 	mov	r1, r5
   16f3c:	e3a02001 	mov	r2, #1
   16f40:	eb001a68 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16f44:	e8940003 	ldm	r4, {r0, r1}
   16f48:	e1a02005 	mov	r2, r5
   16f4c:	e28dd00c 	add	sp, sp, #12
   16f50:	e8bd4030 	pop	{r4, r5, lr}
   16f54:	ea001054 	b	1b0ac <debug_hexdump(void const*, unsigned int, char const*)>
   16f58:	e3a020cf 	mov	r2, #207	; 0xcf
   16f5c:	e59f100c 	ldr	r1, [pc, #12]	; 16f70 <CUSBConfigurationParser::Error(char const*) const+0x64>
   16f60:	e59f000c 	ldr	r0, [pc, #12]	; 16f74 <CUSBConfigurationParser::Error(char const*) const+0x68>
   16f64:	eb000ec3 	bl	1aa78 <assertion_failed>
   16f68:	eaffffec 	b	16f20 <CUSBConfigurationParser::Error(char const*) const+0x14>
   16f6c:	00026a1c 	.word	0x00026a1c
   16f70:	000269b0 	.word	0x000269b0
   16f74:	0002659c 	.word	0x0002659c

00016f78 <CUSBString::CUSBString(CUSBDevice*)>:
   16f78:	e3a03000 	mov	r3, #0
   16f7c:	e92d4070 	push	{r4, r5, r6, lr}
   16f80:	e880000a 	stm	r0, {r1, r3}
   16f84:	e1a04000 	mov	r4, r0
   16f88:	e3a00010 	mov	r0, #16
   16f8c:	eb002f7e 	bl	22d8c <operator new(unsigned int)>
   16f90:	e1a05000 	mov	r5, r0
   16f94:	eb002368 	bl	1fd3c <CString::CString()>
   16f98:	e5943000 	ldr	r3, [r4]
   16f9c:	e5845008 	str	r5, [r4, #8]
   16fa0:	e3530000 	cmp	r3, #0
   16fa4:	0a000001 	beq	16fb0 <CUSBString::CUSBString(CUSBDevice*)+0x38>
   16fa8:	e1a00004 	mov	r0, r4
   16fac:	e8bd8070 	pop	{r4, r5, r6, pc}
   16fb0:	e3a02023 	mov	r2, #35	; 0x23
   16fb4:	e59f1028 	ldr	r1, [pc, #40]	; 16fe4 <CUSBString::CUSBString(CUSBDevice*)+0x6c>
   16fb8:	e59f0028 	ldr	r0, [pc, #40]	; 16fe8 <CUSBString::CUSBString(CUSBDevice*)+0x70>
   16fbc:	eb000ead 	bl	1aa78 <assertion_failed>
   16fc0:	e5943008 	ldr	r3, [r4, #8]
   16fc4:	e3530000 	cmp	r3, #0
   16fc8:	1afffff6 	bne	16fa8 <CUSBString::CUSBString(CUSBDevice*)+0x30>
   16fcc:	e3a02024 	mov	r2, #36	; 0x24
   16fd0:	e59f100c 	ldr	r1, [pc, #12]	; 16fe4 <CUSBString::CUSBString(CUSBDevice*)+0x6c>
   16fd4:	e59f0010 	ldr	r0, [pc, #16]	; 16fec <CUSBString::CUSBString(CUSBDevice*)+0x74>
   16fd8:	eb000ea6 	bl	1aa78 <assertion_failed>
   16fdc:	e1a00004 	mov	r0, r4
   16fe0:	e8bd8070 	pop	{r4, r5, r6, pc}
   16fe4:	00026a4c 	.word	0x00026a4c
   16fe8:	00024e20 	.word	0x00024e20
   16fec:	00026a5c 	.word	0x00026a5c

00016ff0 <CUSBString::CUSBString(CUSBString*)>:
   16ff0:	e3a03000 	mov	r3, #0
   16ff4:	e92d4070 	push	{r4, r5, r6, lr}
   16ff8:	e5803004 	str	r3, [r0, #4]
   16ffc:	e1a04000 	mov	r4, r0
   17000:	e3a00010 	mov	r0, #16
   17004:	e1a05001 	mov	r5, r1
   17008:	eb002f5f 	bl	22d8c <operator new(unsigned int)>
   1700c:	e1a06000 	mov	r6, r0
   17010:	eb002349 	bl	1fd3c <CString::CString()>
   17014:	e3550000 	cmp	r5, #0
   17018:	e5846008 	str	r6, [r4, #8]
   1701c:	0a000018 	beq	17084 <CUSBString::CUSBString(CUSBString*)+0x94>
   17020:	e895000c 	ldm	r5, {r2, r3}
   17024:	e3530000 	cmp	r3, #0
   17028:	e5842000 	str	r2, [r4]
   1702c:	0a000005 	beq	17048 <CUSBString::CUSBString(CUSBString*)+0x58>
   17030:	e5d30000 	ldrb	r0, [r3]
   17034:	eb002f55 	bl	22d90 <operator new[](unsigned int)>
   17038:	e5840004 	str	r0, [r4, #4]
   1703c:	e5951004 	ldr	r1, [r5, #4]
   17040:	e5d12000 	ldrb	r2, [r1]
   17044:	eb002c54 	bl	2219c <memcpy>
   17048:	e5943008 	ldr	r3, [r4, #8]
   1704c:	e3530000 	cmp	r3, #0
   17050:	0a000010 	beq	17098 <CUSBString::CUSBString(CUSBString*)+0xa8>
   17054:	e5953008 	ldr	r3, [r5, #8]
   17058:	e3530000 	cmp	r3, #0
   1705c:	0a000002 	beq	1706c <CUSBString::CUSBString(CUSBString*)+0x7c>
   17060:	e5843008 	str	r3, [r4, #8]
   17064:	e1a00004 	mov	r0, r4
   17068:	e8bd8070 	pop	{r4, r5, r6, pc}
   1706c:	e3a02036 	mov	r2, #54	; 0x36
   17070:	e59f1034 	ldr	r1, [pc, #52]	; 170ac <CUSBString::CUSBString(CUSBString*)+0xbc>
   17074:	e59f0034 	ldr	r0, [pc, #52]	; 170b0 <CUSBString::CUSBString(CUSBString*)+0xc0>
   17078:	eb000e7e 	bl	1aa78 <assertion_failed>
   1707c:	e5953008 	ldr	r3, [r5, #8]
   17080:	eafffff6 	b	17060 <CUSBString::CUSBString(CUSBString*)+0x70>
   17084:	e3a0202b 	mov	r2, #43	; 0x2b
   17088:	e59f101c 	ldr	r1, [pc, #28]	; 170ac <CUSBString::CUSBString(CUSBString*)+0xbc>
   1708c:	e59f0020 	ldr	r0, [pc, #32]	; 170b4 <CUSBString::CUSBString(CUSBString*)+0xc4>
   17090:	eb000e78 	bl	1aa78 <assertion_failed>
   17094:	eaffffe1 	b	17020 <CUSBString::CUSBString(CUSBString*)+0x30>
   17098:	e3a02035 	mov	r2, #53	; 0x35
   1709c:	e59f1008 	ldr	r1, [pc, #8]	; 170ac <CUSBString::CUSBString(CUSBString*)+0xbc>
   170a0:	e59f0010 	ldr	r0, [pc, #16]	; 170b8 <CUSBString::CUSBString(CUSBString*)+0xc8>
   170a4:	eb000e73 	bl	1aa78 <assertion_failed>
   170a8:	eaffffe9 	b	17054 <CUSBString::CUSBString(CUSBString*)+0x64>
   170ac:	00026a4c 	.word	0x00026a4c
   170b0:	00026a6c 	.word	0x00026a6c
   170b4:	000254fc 	.word	0x000254fc
   170b8:	00026a5c 	.word	0x00026a5c

000170bc <CUSBString::~CUSBString()>:
   170bc:	e92d4010 	push	{r4, lr}
   170c0:	e1a04000 	mov	r4, r0
   170c4:	e5900008 	ldr	r0, [r0, #8]
   170c8:	e3500000 	cmp	r0, #0
   170cc:	0a000002 	beq	170dc <CUSBString::~CUSBString()+0x20>
   170d0:	e5903000 	ldr	r3, [r0]
   170d4:	e5933004 	ldr	r3, [r3, #4]
   170d8:	e12fff33 	blx	r3
   170dc:	e3a03000 	mov	r3, #0
   170e0:	e5940004 	ldr	r0, [r4, #4]
   170e4:	e5843008 	str	r3, [r4, #8]
   170e8:	e1500003 	cmp	r0, r3
   170ec:	0a000000 	beq	170f4 <CUSBString::~CUSBString()+0x38>
   170f0:	eb002f28 	bl	22d98 <operator delete[](void*)>
   170f4:	e1a00004 	mov	r0, r4
   170f8:	e8bd8010 	pop	{r4, pc}

000170fc <CUSBString::GetFromDescriptor(unsigned char, unsigned short)>:
   170fc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17100:	e2516000 	subs	r6, r1, #0
   17104:	e28db020 	add	fp, sp, #32
   17108:	e24dd01c 	sub	sp, sp, #28
   1710c:	e1a04000 	mov	r4, r0
   17110:	e1a07002 	mov	r7, r2
   17114:	0a000054 	beq	1726c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x170>
   17118:	e5940004 	ldr	r0, [r4, #4]
   1711c:	e3500000 	cmp	r0, #0
   17120:	0a000000 	beq	17128 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x2c>
   17124:	eb002f1b 	bl	22d98 <operator delete[](void*)>
   17128:	e3a00004 	mov	r0, #4
   1712c:	eb002f17 	bl	22d90 <operator new[](unsigned int)>
   17130:	e5840004 	str	r0, [r4, #4]
   17134:	e5940000 	ldr	r0, [r4]
   17138:	e3500000 	cmp	r0, #0
   1713c:	0a00004f 	beq	17280 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x184>
   17140:	ebffdaa3 	bl	dbd4 <CUSBDevice::GetHost() const>
   17144:	e1a05000 	mov	r5, r0
   17148:	e5940000 	ldr	r0, [r4]
   1714c:	ebffda8f 	bl	db90 <CUSBDevice::GetEndpoint0() const>
   17150:	e3a08080 	mov	r8, #128	; 0x80
   17154:	e3a02004 	mov	r2, #4
   17158:	e5943004 	ldr	r3, [r4, #4]
   1715c:	e1a01000 	mov	r1, r0
   17160:	e98d0104 	stmib	sp, {r2, r8}
   17164:	e58d3000 	str	r3, [sp]
   17168:	e58d700c 	str	r7, [sp, #12]
   1716c:	e1a00005 	mov	r0, r5
   17170:	e1a03006 	mov	r3, r6
   17174:	e3a02003 	mov	r2, #3
   17178:	ebffde8d 	bl	ebb4 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   1717c:	e3500000 	cmp	r0, #0
   17180:	ba000009 	blt	171ac <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xb0>
   17184:	e5940004 	ldr	r0, [r4, #4]
   17188:	e5d05000 	ldrb	r5, [r0]
   1718c:	e3550001 	cmp	r5, #1
   17190:	e1a03005 	mov	r3, r5
   17194:	da000004 	ble	171ac <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xb0>
   17198:	e2159001 	ands	r9, r5, #1
   1719c:	1a000002 	bne	171ac <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xb0>
   171a0:	e5d0a001 	ldrb	sl, [r0, #1]
   171a4:	e35a0003 	cmp	sl, #3
   171a8:	0a000002 	beq	171b8 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xbc>
   171ac:	e3a00000 	mov	r0, #0
   171b0:	e24bd020 	sub	sp, fp, #32
   171b4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   171b8:	e3550004 	cmp	r5, #4
   171bc:	ca000035 	bgt	17298 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x19c>
   171c0:	e3550002 	cmp	r5, #2
   171c4:	0a000064 	beq	1735c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x260>
   171c8:	e2435002 	sub	r5, r3, #2
   171cc:	e0855fa5 	add	r5, r5, r5, lsr #31
   171d0:	e1a060c5 	asr	r6, r5, #1
   171d4:	e356007e 	cmp	r6, #126	; 0x7e
   171d8:	8a000055 	bhi	17334 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x238>
   171dc:	e2863008 	add	r3, r6, #8
   171e0:	e3c33007 	bic	r3, r3, #7
   171e4:	e04dd003 	sub	sp, sp, r3
   171e8:	e3560000 	cmp	r6, #0
   171ec:	e28d7010 	add	r7, sp, #16
   171f0:	0a00000c 	beq	17228 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x12c>
   171f4:	e3a02000 	mov	r2, #0
   171f8:	e247e001 	sub	lr, r7, #1
   171fc:	e080c082 	add	ip, r0, r2, lsl #1
   17200:	e5dc1003 	ldrb	r1, [ip, #3]
   17204:	e5dc3002 	ldrb	r3, [ip, #2]
   17208:	e2822001 	add	r2, r2, #1
   1720c:	e1833401 	orr	r3, r3, r1, lsl #8
   17210:	e2431020 	sub	r1, r3, #32
   17214:	e351005e 	cmp	r1, #94	; 0x5e
   17218:	83a0305f 	movhi	r3, #95	; 0x5f
   1721c:	e1560002 	cmp	r6, r2
   17220:	e5ee3001 	strb	r3, [lr, #1]!
   17224:	1afffff4 	bne	171fc <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x100>
   17228:	e3a03000 	mov	r3, #0
   1722c:	e5940008 	ldr	r0, [r4, #8]
   17230:	e7c730c5 	strb	r3, [r7, r5, asr #1]
   17234:	e1500003 	cmp	r0, r3
   17238:	0a000002 	beq	17248 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x14c>
   1723c:	e5903000 	ldr	r3, [r0]
   17240:	e5933004 	ldr	r3, [r3, #4]
   17244:	e12fff33 	blx	r3
   17248:	e3a00010 	mov	r0, #16
   1724c:	eb002ece 	bl	22d8c <operator new(unsigned int)>
   17250:	e1a01007 	mov	r1, r7
   17254:	e1a05000 	mov	r5, r0
   17258:	eb0022bd 	bl	1fd54 <CString::CString(char const*)>
   1725c:	e3a00001 	mov	r0, #1
   17260:	e5845008 	str	r5, [r4, #8]
   17264:	e24bd020 	sub	sp, fp, #32
   17268:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1726c:	e3a02047 	mov	r2, #71	; 0x47
   17270:	e59f1104 	ldr	r1, [pc, #260]	; 1737c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x280>
   17274:	e59f0104 	ldr	r0, [pc, #260]	; 17380 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x284>
   17278:	eb000dfe 	bl	1aa78 <assertion_failed>
   1727c:	eaffffa5 	b	17118 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x1c>
   17280:	e59f00fc 	ldr	r0, [pc, #252]	; 17384 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x288>
   17284:	e3a0204d 	mov	r2, #77	; 0x4d
   17288:	e59f10ec 	ldr	r1, [pc, #236]	; 1737c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x280>
   1728c:	eb000df9 	bl	1aa78 <assertion_failed>
   17290:	e5940000 	ldr	r0, [r4]
   17294:	eaffffa9 	b	17140 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x44>
   17298:	e3a01002 	mov	r1, #2
   1729c:	eb002ebe 	bl	22d9c <operator delete(void*, unsigned int)>
   172a0:	e1a00005 	mov	r0, r5
   172a4:	eb002eb9 	bl	22d90 <operator new[](unsigned int)>
   172a8:	e5840004 	str	r0, [r4, #4]
   172ac:	e5940000 	ldr	r0, [r4]
   172b0:	ebffda47 	bl	dbd4 <CUSBDevice::GetHost() const>
   172b4:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
   172b8:	e5940000 	ldr	r0, [r4]
   172bc:	ebffda33 	bl	db90 <CUSBDevice::GetEndpoint0() const>
   172c0:	e594c004 	ldr	ip, [r4, #4]
   172c4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   172c8:	e1a01000 	mov	r1, r0
   172cc:	e58d700c 	str	r7, [sp, #12]
   172d0:	e1a00003 	mov	r0, r3
   172d4:	e98d0120 	stmib	sp, {r5, r8}
   172d8:	e1a03006 	mov	r3, r6
   172dc:	e1a0200a 	mov	r2, sl
   172e0:	e58dc000 	str	ip, [sp]
   172e4:	ebffde32 	bl	ebb4 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   172e8:	e1550000 	cmp	r5, r0
   172ec:	1affffae 	bne	171ac <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xb0>
   172f0:	e5940004 	ldr	r0, [r4, #4]
   172f4:	e5d03000 	ldrb	r3, [r0]
   172f8:	e1530005 	cmp	r3, r5
   172fc:	1affffaa 	bne	171ac <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xb0>
   17300:	e5d03001 	ldrb	r3, [r0, #1]
   17304:	e3530003 	cmp	r3, #3
   17308:	1affffa7 	bne	171ac <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xb0>
   1730c:	e3590000 	cmp	r9, #0
   17310:	01a03005 	moveq	r3, r5
   17314:	0affffab 	beq	171c8 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xcc>
   17318:	e59f0068 	ldr	r0, [pc, #104]	; 17388 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x28c>
   1731c:	e3a02076 	mov	r2, #118	; 0x76
   17320:	e59f1054 	ldr	r1, [pc, #84]	; 1737c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x280>
   17324:	eb000dd3 	bl	1aa78 <assertion_failed>
   17328:	e5940004 	ldr	r0, [r4, #4]
   1732c:	e5d03000 	ldrb	r3, [r0]
   17330:	eaffffa4 	b	171c8 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xcc>
   17334:	e59f0050 	ldr	r0, [pc, #80]	; 1738c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x290>
   17338:	e3a02079 	mov	r2, #121	; 0x79
   1733c:	e59f1038 	ldr	r1, [pc, #56]	; 1737c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x280>
   17340:	eb000dcc 	bl	1aa78 <assertion_failed>
   17344:	e2863008 	add	r3, r6, #8
   17348:	e3c33007 	bic	r3, r3, #7
   1734c:	e04dd003 	sub	sp, sp, r3
   17350:	e28d7010 	add	r7, sp, #16
   17354:	e5940004 	ldr	r0, [r4, #4]
   17358:	eaffffa5 	b	171f4 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xf8>
   1735c:	e59f002c 	ldr	r0, [pc, #44]	; 17390 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x294>
   17360:	e3a02075 	mov	r2, #117	; 0x75
   17364:	e59f1010 	ldr	r1, [pc, #16]	; 1737c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x280>
   17368:	eb000dc2 	bl	1aa78 <assertion_failed>
   1736c:	e5940004 	ldr	r0, [r4, #4]
   17370:	e5d05000 	ldrb	r5, [r0]
   17374:	e2059001 	and	r9, r5, #1
   17378:	eaffffe3 	b	1730c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x210>
   1737c:	00026a4c 	.word	0x00026a4c
   17380:	00026a84 	.word	0x00026a84
   17384:	00024e20 	.word	0x00024e20
   17388:	00026aac 	.word	0x00026aac
   1738c:	00026ad0 	.word	0x00026ad0
   17390:	00026a90 	.word	0x00026a90

00017394 <CUSBString::Get() const>:
   17394:	e5900008 	ldr	r0, [r0, #8]
   17398:	ea00227d 	b	1fd94 <CString::operator char const*() const>

0001739c <CUSBString::GetLanguageID()>:
   1739c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   173a0:	e1a05000 	mov	r5, r0
   173a4:	e24dd010 	sub	sp, sp, #16
   173a8:	e3a00004 	mov	r0, #4
   173ac:	eb002e77 	bl	22d90 <operator new[](unsigned int)>
   173b0:	e1a04000 	mov	r4, r0
   173b4:	e5950000 	ldr	r0, [r5]
   173b8:	e3500000 	cmp	r0, #0
   173bc:	0a000035 	beq	17498 <CUSBString::GetLanguageID()+0xfc>
   173c0:	ebffda03 	bl	dbd4 <CUSBDevice::GetHost() const>
   173c4:	e1a06000 	mov	r6, r0
   173c8:	e5950000 	ldr	r0, [r5]
   173cc:	ebffd9ef 	bl	db90 <CUSBDevice::GetEndpoint0() const>
   173d0:	e3a07080 	mov	r7, #128	; 0x80
   173d4:	e3a03000 	mov	r3, #0
   173d8:	e3a02004 	mov	r2, #4
   173dc:	e1a01000 	mov	r1, r0
   173e0:	e98d0084 	stmib	sp, {r2, r7}
   173e4:	e58d4000 	str	r4, [sp]
   173e8:	e1a00006 	mov	r0, r6
   173ec:	e58d300c 	str	r3, [sp, #12]
   173f0:	e3a02003 	mov	r2, #3
   173f4:	ebffddee 	bl	ebb4 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   173f8:	e3500000 	cmp	r0, #0
   173fc:	ba000002 	blt	1740c <CUSBString::GetLanguageID()+0x70>
   17400:	e5d46000 	ldrb	r6, [r4]
   17404:	e3560003 	cmp	r6, #3
   17408:	ca000005 	bgt	17424 <CUSBString::GetLanguageID()+0x88>
   1740c:	e1a00004 	mov	r0, r4
   17410:	eb002e60 	bl	22d98 <operator delete[](void*)>
   17414:	e59f5100 	ldr	r5, [pc, #256]	; 1751c <CUSBString::GetLanguageID()+0x180>
   17418:	e1a00005 	mov	r0, r5
   1741c:	e28dd010 	add	sp, sp, #16
   17420:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17424:	e2168001 	ands	r8, r6, #1
   17428:	1afffff7 	bne	1740c <CUSBString::GetLanguageID()+0x70>
   1742c:	e5d49001 	ldrb	r9, [r4, #1]
   17430:	e3590003 	cmp	r9, #3
   17434:	1afffff4 	bne	1740c <CUSBString::GetLanguageID()+0x70>
   17438:	e3560004 	cmp	r6, #4
   1743c:	1a00001b 	bne	174b0 <CUSBString::GetLanguageID()+0x114>
   17440:	e5d45002 	ldrb	r5, [r4, #2]
   17444:	e5d43003 	ldrb	r3, [r4, #3]
   17448:	e59f00cc 	ldr	r0, [pc, #204]	; 1751c <CUSBString::GetLanguageID()+0x180>
   1744c:	e1855403 	orr	r5, r5, r3, lsl #8
   17450:	e2466002 	sub	r6, r6, #2
   17454:	e1550000 	cmp	r5, r0
   17458:	e1a060c6 	asr	r6, r6, #1
   1745c:	0affffea 	beq	1740c <CUSBString::GetLanguageID()+0x70>
   17460:	e3a03000 	mov	r3, #0
   17464:	ea000004 	b	1747c <CUSBString::GetLanguageID()+0xe0>
   17468:	e5d12002 	ldrb	r2, [r1, #2]
   1746c:	e5d11003 	ldrb	r1, [r1, #3]
   17470:	e1822401 	orr	r2, r2, r1, lsl #8
   17474:	e1520000 	cmp	r2, r0
   17478:	0affffe3 	beq	1740c <CUSBString::GetLanguageID()+0x70>
   1747c:	e2833001 	add	r3, r3, #1
   17480:	e1560003 	cmp	r6, r3
   17484:	e0841083 	add	r1, r4, r3, lsl #1
   17488:	1afffff6 	bne	17468 <CUSBString::GetLanguageID()+0xcc>
   1748c:	e1a00004 	mov	r0, r4
   17490:	eb002e40 	bl	22d98 <operator delete[](void*)>
   17494:	eaffffdf 	b	17418 <CUSBString::GetLanguageID()+0x7c>
   17498:	e59f0080 	ldr	r0, [pc, #128]	; 17520 <CUSBString::GetLanguageID()+0x184>
   1749c:	e3a0209a 	mov	r2, #154	; 0x9a
   174a0:	e59f107c 	ldr	r1, [pc, #124]	; 17524 <CUSBString::GetLanguageID()+0x188>
   174a4:	eb000d73 	bl	1aa78 <assertion_failed>
   174a8:	e5950000 	ldr	r0, [r5]
   174ac:	eaffffc3 	b	173c0 <CUSBString::GetLanguageID()+0x24>
   174b0:	e1a00004 	mov	r0, r4
   174b4:	eb002e37 	bl	22d98 <operator delete[](void*)>
   174b8:	e1a00006 	mov	r0, r6
   174bc:	eb002e33 	bl	22d90 <operator new[](unsigned int)>
   174c0:	e1a04000 	mov	r4, r0
   174c4:	e5950000 	ldr	r0, [r5]
   174c8:	ebffd9c1 	bl	dbd4 <CUSBDevice::GetHost() const>
   174cc:	e1a0a000 	mov	sl, r0
   174d0:	e5950000 	ldr	r0, [r5]
   174d4:	ebffd9ad 	bl	db90 <CUSBDevice::GetEndpoint0() const>
   174d8:	e58d4000 	str	r4, [sp]
   174dc:	e1a01000 	mov	r1, r0
   174e0:	e58d800c 	str	r8, [sp, #12]
   174e4:	e1a0000a 	mov	r0, sl
   174e8:	e98d00c0 	stmib	sp, {r6, r7}
   174ec:	e1a03008 	mov	r3, r8
   174f0:	e1a02009 	mov	r2, r9
   174f4:	ebffddae 	bl	ebb4 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   174f8:	e1560000 	cmp	r6, r0
   174fc:	1affffc2 	bne	1740c <CUSBString::GetLanguageID()+0x70>
   17500:	e5d43000 	ldrb	r3, [r4]
   17504:	e1530006 	cmp	r3, r6
   17508:	1affffbf 	bne	1740c <CUSBString::GetLanguageID()+0x70>
   1750c:	e5d43001 	ldrb	r3, [r4, #1]
   17510:	e3530003 	cmp	r3, #3
   17514:	1affffbc 	bne	1740c <CUSBString::GetLanguageID()+0x70>
   17518:	eaffffc8 	b	17440 <CUSBString::GetLanguageID()+0xa4>
   1751c:	00000409 	.word	0x00000409
   17520:	00024e20 	.word	0x00024e20
   17524:	00026a4c 	.word	0x00026a4c

00017528 <CSMSC951xDevice::GetMACAddress() const>:
   17528:	e2800018 	add	r0, r0, #24
   1752c:	e12fff1e 	bx	lr

00017530 <CSMSC951xDevice::~CSMSC951xDevice()>:
   17530:	e92d4070 	push	{r4, r5, r6, lr}
   17534:	e5905014 	ldr	r5, [r0, #20]
   17538:	e59f3068 	ldr	r3, [pc, #104]	; 175a8 <CSMSC951xDevice::~CSMSC951xDevice()+0x78>
   1753c:	e3550000 	cmp	r5, #0
   17540:	e1a04000 	mov	r4, r0
   17544:	e5803000 	str	r3, [r0]
   17548:	0a000004 	beq	17560 <CSMSC951xDevice::~CSMSC951xDevice()+0x30>
   1754c:	e1a00005 	mov	r0, r5
   17550:	ebffdce1 	bl	e8dc <CUSBEndpoint::~CUSBEndpoint()>
   17554:	e1a00005 	mov	r0, r5
   17558:	e3a01014 	mov	r1, #20
   1755c:	eb002e0e 	bl	22d9c <operator delete(void*, unsigned int)>
   17560:	e3a03000 	mov	r3, #0
   17564:	e5945010 	ldr	r5, [r4, #16]
   17568:	e5843014 	str	r3, [r4, #20]
   1756c:	e1550003 	cmp	r5, r3
   17570:	0a000004 	beq	17588 <CSMSC951xDevice::~CSMSC951xDevice()+0x58>
   17574:	e1a00005 	mov	r0, r5
   17578:	ebffdcd7 	bl	e8dc <CUSBEndpoint::~CUSBEndpoint()>
   1757c:	e1a00005 	mov	r0, r5
   17580:	e3a01014 	mov	r1, #20
   17584:	eb002e04 	bl	22d9c <operator delete(void*, unsigned int)>
   17588:	e3a03000 	mov	r3, #0
   1758c:	e2840018 	add	r0, r4, #24
   17590:	e5843010 	str	r3, [r4, #16]
   17594:	eb000653 	bl	18ee8 <CMACAddress::~CMACAddress()>
   17598:	e1a00004 	mov	r0, r4
   1759c:	eb000701 	bl	191a8 <CNetDevice::~CNetDevice()>
   175a0:	e1a00004 	mov	r0, r4
   175a4:	e8bd8070 	pop	{r4, r5, r6, pc}
   175a8:	00026af0 	.word	0x00026af0

000175ac <CSMSC951xDevice::~CSMSC951xDevice()>:
   175ac:	e92d4010 	push	{r4, lr}
   175b0:	e1a04000 	mov	r4, r0
   175b4:	ebffffdd 	bl	17530 <CSMSC951xDevice::~CSMSC951xDevice()>
   175b8:	e1a00004 	mov	r0, r4
   175bc:	e3a01020 	mov	r1, #32
   175c0:	eb002df5 	bl	22d9c <operator delete(void*, unsigned int)>
   175c4:	e1a00004 	mov	r0, r4
   175c8:	e8bd8010 	pop	{r4, pc}

000175cc <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)>:
   175cc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   175d0:	e5903010 	ldr	r3, [r0, #16]
   175d4:	e24dd030 	sub	sp, sp, #48	; 0x30
   175d8:	e3530000 	cmp	r3, #0
   175dc:	e1a04000 	mov	r4, r0
   175e0:	e1a05001 	mov	r5, r1
   175e4:	e1a07002 	mov	r7, r2
   175e8:	0a000034 	beq	176c0 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0xf4>
   175ec:	e3550000 	cmp	r5, #0
   175f0:	0a000037 	beq	176d4 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x108>
   175f4:	e3a06000 	mov	r6, #0
   175f8:	e5941010 	ldr	r1, [r4, #16]
   175fc:	e3a03d19 	mov	r3, #1600	; 0x640
   17600:	e1a02005 	mov	r2, r5
   17604:	e58d6000 	str	r6, [sp]
   17608:	e28d0008 	add	r0, sp, #8
   1760c:	ebffddb5 	bl	ece8 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   17610:	e1a00004 	mov	r0, r4
   17614:	ebfff625 	bl	14eb0 <CUSBFunction::GetHost() const>
   17618:	e5903000 	ldr	r3, [r0]
   1761c:	e1a02006 	mov	r2, r6
   17620:	e5933008 	ldr	r3, [r3, #8]
   17624:	e28d1008 	add	r1, sp, #8
   17628:	e12fff33 	blx	r3
   1762c:	e2504000 	subs	r4, r0, #0
   17630:	1a000005 	bne	1764c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x80>
   17634:	e3a04000 	mov	r4, #0
   17638:	e28d0008 	add	r0, sp, #8
   1763c:	ebffddce 	bl	ed7c <CUSBRequest::~CUSBRequest()>
   17640:	e1a00004 	mov	r0, r4
   17644:	e28dd030 	add	sp, sp, #48	; 0x30
   17648:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1764c:	e28d0008 	add	r0, sp, #8
   17650:	ebffdde0 	bl	edd8 <CUSBRequest::GetResultLength() const>
   17654:	e3500003 	cmp	r0, #3
   17658:	9afffff5 	bls	17634 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x68>
   1765c:	e5958000 	ldr	r8, [r5]
   17660:	e59f30c8 	ldr	r3, [pc, #200]	; 17730 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x164>
   17664:	e0033008 	and	r3, r3, r8
   17668:	e3530000 	cmp	r3, #0
   1766c:	1a000022 	bne	176fc <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x130>
   17670:	e59f60bc 	ldr	r6, [pc, #188]	; 17734 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x168>
   17674:	e2400004 	sub	r0, r0, #4
   17678:	e0066828 	and	r6, r6, r8, lsr #16
   1767c:	e1560000 	cmp	r6, r0
   17680:	0a000003 	beq	17694 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0xc8>
   17684:	e59f20ac 	ldr	r2, [pc, #172]	; 17738 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x16c>
   17688:	e59f10ac 	ldr	r1, [pc, #172]	; 1773c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x170>
   1768c:	e59f00ac 	ldr	r0, [pc, #172]	; 17740 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x174>
   17690:	eb000cf8 	bl	1aa78 <assertion_failed>
   17694:	e3560004 	cmp	r6, #4
   17698:	9a000012 	bls	176e8 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x11c>
   1769c:	e2466004 	sub	r6, r6, #4
   176a0:	e1a02006 	mov	r2, r6
   176a4:	e2851004 	add	r1, r5, #4
   176a8:	e1a00005 	mov	r0, r5
   176ac:	eb002aba 	bl	2219c <memcpy>
   176b0:	e3570000 	cmp	r7, #0
   176b4:	0a000018 	beq	1771c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x150>
   176b8:	e5876000 	str	r6, [r7]
   176bc:	eaffffdd 	b	17638 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x6c>
   176c0:	e59f207c 	ldr	r2, [pc, #124]	; 17744 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x178>
   176c4:	e59f1070 	ldr	r1, [pc, #112]	; 1773c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x170>
   176c8:	e59f0078 	ldr	r0, [pc, #120]	; 17748 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x17c>
   176cc:	eb000ce9 	bl	1aa78 <assertion_failed>
   176d0:	eaffffc5 	b	175ec <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x20>
   176d4:	e3a02f45 	mov	r2, #276	; 0x114
   176d8:	e59f105c 	ldr	r1, [pc, #92]	; 1773c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x170>
   176dc:	e59f0068 	ldr	r0, [pc, #104]	; 1774c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x180>
   176e0:	eb000ce4 	bl	1aa78 <assertion_failed>
   176e4:	eaffffc2 	b	175f4 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x28>
   176e8:	e3a02f4b 	mov	r2, #300	; 0x12c
   176ec:	e59f1048 	ldr	r1, [pc, #72]	; 1773c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x170>
   176f0:	e59f0058 	ldr	r0, [pc, #88]	; 17750 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x184>
   176f4:	eb000cdf 	bl	1aa78 <assertion_failed>
   176f8:	eaffffcd 	b	17634 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x68>
   176fc:	eb0016d0 	bl	1d244 <CLogger::Get()>
   17700:	e58d8000 	str	r8, [sp]
   17704:	e59f3048 	ldr	r3, [pc, #72]	; 17754 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x188>
   17708:	e3a02002 	mov	r2, #2
   1770c:	e59f1044 	ldr	r1, [pc, #68]	; 17758 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x18c>
   17710:	e1a04006 	mov	r4, r6
   17714:	eb001873 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17718:	eaffffc6 	b	17638 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x6c>
   1771c:	e59f2038 	ldr	r2, [pc, #56]	; 1775c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x190>
   17720:	e59f1014 	ldr	r1, [pc, #20]	; 1773c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x170>
   17724:	e59f0034 	ldr	r0, [pc, #52]	; 17760 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x194>
   17728:	eb000cd2 	bl	1aa78 <assertion_failed>
   1772c:	eaffffe1 	b	176b8 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0xec>
   17730:	400090de 	.word	0x400090de
   17734:	00003fff 	.word	0x00003fff
   17738:	0000012b 	.word	0x0000012b
   1773c:	00026b34 	.word	0x00026b34
   17740:	00026b5c 	.word	0x00026b5c
   17744:	00000113 	.word	0x00000113
   17748:	00026948 	.word	0x00026948
   1774c:	00025930 	.word	0x00025930
   17750:	00026b7c 	.word	0x00026b7c
   17754:	00026b44 	.word	0x00026b44
   17758:	00026b20 	.word	0x00026b20
   1775c:	00000137 	.word	0x00000137
   17760:	00026960 	.word	0x00026960

00017764 <CSMSC951xDevice::SendFrame(void const*, unsigned int) [clone .part.0]>:
   17764:	e92d4070 	push	{r4, r5, r6, lr}
   17768:	e2516000 	subs	r6, r1, #0
   1776c:	e24dde65 	sub	sp, sp, #1616	; 0x650
   17770:	e1a05000 	mov	r5, r0
   17774:	e1a04002 	mov	r4, r2
   17778:	0a000015 	beq	177d4 <CSMSC951xDevice::SendFrame(void const*, unsigned int) [clone .part.0]+0x70>
   1777c:	e1a02004 	mov	r2, r4
   17780:	e1a01006 	mov	r1, r6
   17784:	e28d0010 	add	r0, sp, #16
   17788:	eb002a83 	bl	2219c <memcpy>
   1778c:	e5952014 	ldr	r2, [r5, #20]
   17790:	e3843a03 	orr	r3, r4, #12288	; 0x3000
   17794:	e3520000 	cmp	r2, #0
   17798:	e58d400c 	str	r4, [sp, #12]
   1779c:	e58d3008 	str	r3, [sp, #8]
   177a0:	0a000010 	beq	177e8 <CSMSC951xDevice::SendFrame(void const*, unsigned int) [clone .part.0]+0x84>
   177a4:	e1a00005 	mov	r0, r5
   177a8:	ebfff5c0 	bl	14eb0 <CUSBFunction::GetHost() const>
   177ac:	e3a0c000 	mov	ip, #0
   177b0:	e5951014 	ldr	r1, [r5, #20]
   177b4:	e2843008 	add	r3, r4, #8
   177b8:	e28d2008 	add	r2, sp, #8
   177bc:	e58dc000 	str	ip, [sp]
   177c0:	ebffdd2f 	bl	ec84 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   177c4:	e1e00000 	mvn	r0, r0
   177c8:	e1a00fa0 	lsr	r0, r0, #31
   177cc:	e28dde65 	add	sp, sp, #1616	; 0x650
   177d0:	e8bd8070 	pop	{r4, r5, r6, pc}
   177d4:	e59f2020 	ldr	r2, [pc, #32]	; 177fc <CSMSC951xDevice::SendFrame(void const*, unsigned int) [clone .part.0]+0x98>
   177d8:	e59f1020 	ldr	r1, [pc, #32]	; 17800 <CSMSC951xDevice::SendFrame(void const*, unsigned int) [clone .part.0]+0x9c>
   177dc:	e59f0020 	ldr	r0, [pc, #32]	; 17804 <CSMSC951xDevice::SendFrame(void const*, unsigned int) [clone .part.0]+0xa0>
   177e0:	eb000ca4 	bl	1aa78 <assertion_failed>
   177e4:	eaffffe4 	b	1777c <CSMSC951xDevice::SendFrame(void const*, unsigned int) [clone .part.0]+0x18>
   177e8:	e59f2018 	ldr	r2, [pc, #24]	; 17808 <CSMSC951xDevice::SendFrame(void const*, unsigned int) [clone .part.0]+0xa4>
   177ec:	e59f100c 	ldr	r1, [pc, #12]	; 17800 <CSMSC951xDevice::SendFrame(void const*, unsigned int) [clone .part.0]+0x9c>
   177f0:	e59f0014 	ldr	r0, [pc, #20]	; 1780c <CSMSC951xDevice::SendFrame(void const*, unsigned int) [clone .part.0]+0xa8>
   177f4:	eb000c9f 	bl	1aa78 <assertion_failed>
   177f8:	eaffffe9 	b	177a4 <CSMSC951xDevice::SendFrame(void const*, unsigned int) [clone .part.0]+0x40>
   177fc:	00000106 	.word	0x00000106
   17800:	00026b34 	.word	0x00026b34
   17804:	00025930 	.word	0x00025930
   17808:	0000010d 	.word	0x0000010d
   1780c:	00026910 	.word	0x00026910

00017810 <CSMSC951xDevice::SendFrame(void const*, unsigned int)>:
   17810:	e3520d19 	cmp	r2, #1600	; 0x640
   17814:	8a000000 	bhi	1781c <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0xc>
   17818:	eaffffd1 	b	17764 <CSMSC951xDevice::SendFrame(void const*, unsigned int) [clone .part.0]>
   1781c:	e3a00000 	mov	r0, #0
   17820:	e12fff1e 	bx	lr

00017824 <CSMSC951xDevice::CSMSC951xDevice(CUSBFunction*)>:
   17824:	e92d4010 	push	{r4, lr}
   17828:	e1a04000 	mov	r4, r0
   1782c:	eb000655 	bl	19188 <CNetDevice::CNetDevice(CUSBFunction*)>
   17830:	e3a03000 	mov	r3, #0
   17834:	e59f2018 	ldr	r2, [pc, #24]	; 17854 <CSMSC951xDevice::CSMSC951xDevice(CUSBFunction*)+0x30>
   17838:	e5843010 	str	r3, [r4, #16]
   1783c:	e5842000 	str	r2, [r4]
   17840:	e5843014 	str	r3, [r4, #20]
   17844:	e2840018 	add	r0, r4, #24
   17848:	eb0005a3 	bl	18edc <CMACAddress::CMACAddress()>
   1784c:	e1a00004 	mov	r0, r4
   17850:	e8bd8010 	pop	{r4, pc}
   17854:	00026af0 	.word	0x00026af0

00017858 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>:
   17858:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1785c:	e24dd01c 	sub	sp, sp, #28
   17860:	e28d5018 	add	r5, sp, #24
   17864:	e5252004 	str	r2, [r5, #-4]!
   17868:	e1a04001 	mov	r4, r1
   1786c:	e1a07000 	mov	r7, r0
   17870:	ebfff58e 	bl	14eb0 <CUSBFunction::GetHost() const>
   17874:	e1a06000 	mov	r6, r0
   17878:	e1a00007 	mov	r0, r7
   1787c:	ebfff57a 	bl	14e6c <CUSBFunction::GetEndpoint0() const>
   17880:	e3a02004 	mov	r2, #4
   17884:	e3a03000 	mov	r3, #0
   17888:	e6ff4074 	uxth	r4, r4
   1788c:	e1a01000 	mov	r1, r0
   17890:	e58d200c 	str	r2, [sp, #12]
   17894:	e58d3000 	str	r3, [sp]
   17898:	e58d5008 	str	r5, [sp, #8]
   1789c:	e58d4004 	str	r4, [sp, #4]
   178a0:	e1a00006 	mov	r0, r6
   178a4:	e3a030a0 	mov	r3, #160	; 0xa0
   178a8:	e3a02040 	mov	r2, #64	; 0x40
   178ac:	ebffdc8e 	bl	eaec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   178b0:	e1e00000 	mvn	r0, r0
   178b4:	e1a00fa0 	lsr	r0, r0, #31
   178b8:	e28dd01c 	add	sp, sp, #28
   178bc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

000178c0 <CSMSC951xDevice::ReadReg(unsigned int, unsigned int*)>:
   178c0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   178c4:	e24dd014 	sub	sp, sp, #20
   178c8:	e1a06002 	mov	r6, r2
   178cc:	e1a04001 	mov	r4, r1
   178d0:	e1a07000 	mov	r7, r0
   178d4:	ebfff575 	bl	14eb0 <CUSBFunction::GetHost() const>
   178d8:	e1a05000 	mov	r5, r0
   178dc:	e1a00007 	mov	r0, r7
   178e0:	ebfff561 	bl	14e6c <CUSBFunction::GetEndpoint0() const>
   178e4:	e3a0c004 	mov	ip, #4
   178e8:	e3a03000 	mov	r3, #0
   178ec:	e6ff4074 	uxth	r4, r4
   178f0:	e1a01000 	mov	r1, r0
   178f4:	e58d3000 	str	r3, [sp]
   178f8:	e58d6008 	str	r6, [sp, #8]
   178fc:	e58d4004 	str	r4, [sp, #4]
   17900:	e1a00005 	mov	r0, r5
   17904:	e58dc00c 	str	ip, [sp, #12]
   17908:	e3a030a1 	mov	r3, #161	; 0xa1
   1790c:	e3a020c0 	mov	r2, #192	; 0xc0
   17910:	ebffdc75 	bl	eaec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   17914:	e2400004 	sub	r0, r0, #4
   17918:	e16f0f10 	clz	r0, r0
   1791c:	e1a002a0 	lsr	r0, r0, #5
   17920:	e28dd014 	add	sp, sp, #20
   17924:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00017928 <CSMSC951xDevice::PHYWaitNotBusy()>:
   17928:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1792c:	e24dd00c 	sub	sp, sp, #12
   17930:	e1a07000 	mov	r7, r0
   17934:	eb002897 	bl	21b98 <CTimer::Get()>
   17938:	e2504000 	subs	r4, r0, #0
   1793c:	0a000015 	beq	17998 <CSMSC951xDevice::PHYWaitNotBusy()+0x70>
   17940:	e1a00004 	mov	r0, r4
   17944:	eb0025cc 	bl	2107c <CTimer::GetTicks() const>
   17948:	e3a06f45 	mov	r6, #276	; 0x114
   1794c:	e1a05000 	mov	r5, r0
   17950:	ea000008 	b	17978 <CSMSC951xDevice::PHYWaitNotBusy()+0x50>
   17954:	e28d2004 	add	r2, sp, #4
   17958:	e1a01006 	mov	r1, r6
   1795c:	e1a00007 	mov	r0, r7
   17960:	ebffffd6 	bl	178c0 <CSMSC951xDevice::ReadReg(unsigned int, unsigned int*)>
   17964:	e3500000 	cmp	r0, #0
   17968:	0a000007 	beq	1798c <CSMSC951xDevice::PHYWaitNotBusy()+0x64>
   1796c:	e59d3004 	ldr	r3, [sp, #4]
   17970:	e3130001 	tst	r3, #1
   17974:	0a000005 	beq	17990 <CSMSC951xDevice::PHYWaitNotBusy()+0x68>
   17978:	e1a00004 	mov	r0, r4
   1797c:	eb0025be 	bl	2107c <CTimer::GetTicks() const>
   17980:	e0400005 	sub	r0, r0, r5
   17984:	e3500063 	cmp	r0, #99	; 0x63
   17988:	9afffff1 	bls	17954 <CSMSC951xDevice::PHYWaitNotBusy()+0x2c>
   1798c:	e3a00000 	mov	r0, #0
   17990:	e28dd00c 	add	sp, sp, #12
   17994:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   17998:	e59f200c 	ldr	r2, [pc, #12]	; 179ac <CSMSC951xDevice::PHYWaitNotBusy()+0x84>
   1799c:	e59f100c 	ldr	r1, [pc, #12]	; 179b0 <CSMSC951xDevice::PHYWaitNotBusy()+0x88>
   179a0:	e59f000c 	ldr	r0, [pc, #12]	; 179b4 <CSMSC951xDevice::PHYWaitNotBusy()+0x8c>
   179a4:	eb000c33 	bl	1aa78 <assertion_failed>
   179a8:	eaffffe4 	b	17940 <CSMSC951xDevice::PHYWaitNotBusy()+0x18>
   179ac:	0000018e 	.word	0x0000018e
   179b0:	00026b34 	.word	0x00026b34
   179b4:	00026b90 	.word	0x00026b90

000179b8 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)>:
   179b8:	e351001f 	cmp	r1, #31
   179bc:	e92d4070 	push	{r4, r5, r6, lr}
   179c0:	e1a05001 	mov	r5, r1
   179c4:	e1a04000 	mov	r4, r0
   179c8:	e1a06002 	mov	r6, r2
   179cc:	ca000005 	bgt	179e8 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x30>
   179d0:	e1a00004 	mov	r0, r4
   179d4:	ebffffd3 	bl	17928 <CSMSC951xDevice::PHYWaitNotBusy()>
   179d8:	e3500000 	cmp	r0, #0
   179dc:	1a000009 	bne	17a08 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x50>
   179e0:	e3a00000 	mov	r0, #0
   179e4:	e8bd8070 	pop	{r4, r5, r6, pc}
   179e8:	e59f2058 	ldr	r2, [pc, #88]	; 17a48 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x90>
   179ec:	e59f1058 	ldr	r1, [pc, #88]	; 17a4c <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x94>
   179f0:	e59f0058 	ldr	r0, [pc, #88]	; 17a50 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x98>
   179f4:	eb000c1f 	bl	1aa78 <assertion_failed>
   179f8:	e1a00004 	mov	r0, r4
   179fc:	ebffffc9 	bl	17928 <CSMSC951xDevice::PHYWaitNotBusy()>
   17a00:	e3500000 	cmp	r0, #0
   17a04:	0afffff5 	beq	179e0 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x28>
   17a08:	e1a02006 	mov	r2, r6
   17a0c:	e3a01f46 	mov	r1, #280	; 0x118
   17a10:	e1a00004 	mov	r0, r4
   17a14:	ebffff8f 	bl	17858 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   17a18:	e3500000 	cmp	r0, #0
   17a1c:	0affffef 	beq	179e0 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x28>
   17a20:	e59f202c 	ldr	r2, [pc, #44]	; 17a54 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x9c>
   17a24:	e3a01f45 	mov	r1, #276	; 0x114
   17a28:	e1822305 	orr	r2, r2, r5, lsl #6
   17a2c:	e1a00004 	mov	r0, r4
   17a30:	ebffff88 	bl	17858 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   17a34:	e3500000 	cmp	r0, #0
   17a38:	0affffe8 	beq	179e0 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x28>
   17a3c:	e1a00004 	mov	r0, r4
   17a40:	e8bd4070 	pop	{r4, r5, r6, lr}
   17a44:	eaffffb7 	b	17928 <CSMSC951xDevice::PHYWaitNotBusy()>
   17a48:	00000162 	.word	0x00000162
   17a4c:	00026b34 	.word	0x00026b34
   17a50:	00026b9c 	.word	0x00026b9c
   17a54:	00000803 	.word	0x00000803

00017a58 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)>:
   17a58:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   17a5c:	e351001f 	cmp	r1, #31
   17a60:	e24dd00c 	sub	sp, sp, #12
   17a64:	e1a06001 	mov	r6, r1
   17a68:	e1a04000 	mov	r4, r0
   17a6c:	e1a07002 	mov	r7, r2
   17a70:	ca000011 	bgt	17abc <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x64>
   17a74:	e1a00004 	mov	r0, r4
   17a78:	ebffffaa 	bl	17928 <CSMSC951xDevice::PHYWaitNotBusy()>
   17a7c:	e2505000 	subs	r5, r0, #0
   17a80:	1a000002 	bne	17a90 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x38>
   17a84:	e1a00005 	mov	r0, r5
   17a88:	e28dd00c 	add	sp, sp, #12
   17a8c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   17a90:	e59f2090 	ldr	r2, [pc, #144]	; 17b28 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xd0>
   17a94:	e3a01f45 	mov	r1, #276	; 0x114
   17a98:	e1822306 	orr	r2, r2, r6, lsl #6
   17a9c:	e1a00004 	mov	r0, r4
   17aa0:	ebffff6c 	bl	17858 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   17aa4:	e3500000 	cmp	r0, #0
   17aa8:	1a000008 	bne	17ad0 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x78>
   17aac:	e3a05000 	mov	r5, #0
   17ab0:	e1a00005 	mov	r0, r5
   17ab4:	e28dd00c 	add	sp, sp, #12
   17ab8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   17abc:	e59f2068 	ldr	r2, [pc, #104]	; 17b2c <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xd4>
   17ac0:	e59f1068 	ldr	r1, [pc, #104]	; 17b30 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xd8>
   17ac4:	e59f0068 	ldr	r0, [pc, #104]	; 17b34 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xdc>
   17ac8:	eb000bea 	bl	1aa78 <assertion_failed>
   17acc:	eaffffe8 	b	17a74 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x1c>
   17ad0:	e1a00004 	mov	r0, r4
   17ad4:	ebffff93 	bl	17928 <CSMSC951xDevice::PHYWaitNotBusy()>
   17ad8:	e3500000 	cmp	r0, #0
   17adc:	0afffff2 	beq	17aac <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x54>
   17ae0:	e1a00004 	mov	r0, r4
   17ae4:	e28d2004 	add	r2, sp, #4
   17ae8:	e3a01f46 	mov	r1, #280	; 0x118
   17aec:	ebffff73 	bl	178c0 <CSMSC951xDevice::ReadReg(unsigned int, unsigned int*)>
   17af0:	e2505000 	subs	r5, r0, #0
   17af4:	0affffec 	beq	17aac <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x54>
   17af8:	e3570000 	cmp	r7, #0
   17afc:	0a000004 	beq	17b14 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xbc>
   17b00:	e1a00005 	mov	r0, r5
   17b04:	e59d3004 	ldr	r3, [sp, #4]
   17b08:	e1c730b0 	strh	r3, [r7]
   17b0c:	e28dd00c 	add	sp, sp, #12
   17b10:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   17b14:	e59f201c 	ldr	r2, [pc, #28]	; 17b38 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xe0>
   17b18:	e59f1010 	ldr	r1, [pc, #16]	; 17b30 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xd8>
   17b1c:	e59f0018 	ldr	r0, [pc, #24]	; 17b3c <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xe4>
   17b20:	eb000bd4 	bl	1aa78 <assertion_failed>
   17b24:	eafffff5 	b	17b00 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xa8>
   17b28:	00000801 	.word	0x00000801
   17b2c:	00000175 	.word	0x00000175
   17b30:	00026b34 	.word	0x00026b34
   17b34:	00026b9c 	.word	0x00026b9c
   17b38:	00000185 	.word	0x00000185
   17b3c:	00026bac 	.word	0x00026bac

00017b40 <CSMSC951xDevice::IsLinkUp()>:
   17b40:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   17b44:	e24dd00c 	sub	sp, sp, #12
   17b48:	e28d2006 	add	r2, sp, #6
   17b4c:	e3a01001 	mov	r1, #1
   17b50:	ebffffc0 	bl	17a58 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)>
   17b54:	e3500000 	cmp	r0, #0
   17b58:	11dd00b6 	ldrhne	r0, [sp, #6]
   17b5c:	11a00120 	lsrne	r0, r0, #2
   17b60:	12000001 	andne	r0, r0, #1
   17b64:	e28dd00c 	add	sp, sp, #12
   17b68:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00017b6c <CSMSC951xDevice::GetLinkSpeed()>:
   17b6c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   17b70:	e24dd00c 	sub	sp, sp, #12
   17b74:	e28d2006 	add	r2, sp, #6
   17b78:	e3a0101f 	mov	r1, #31
   17b7c:	ebffffb5 	bl	17a58 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)>
   17b80:	e3500000 	cmp	r0, #0
   17b84:	1a000002 	bne	17b94 <CSMSC951xDevice::GetLinkSpeed()+0x28>
   17b88:	e3a00006 	mov	r0, #6
   17b8c:	e28dd00c 	add	sp, sp, #12
   17b90:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   17b94:	e1dd30b6 	ldrh	r3, [sp, #6]
   17b98:	e3130a01 	tst	r3, #4096	; 0x1000
   17b9c:	0afffff9 	beq	17b88 <CSMSC951xDevice::GetLinkSpeed()+0x1c>
   17ba0:	e1a03143 	asr	r3, r3, #2
   17ba4:	e2033007 	and	r3, r3, #7
   17ba8:	e2433001 	sub	r3, r3, #1
   17bac:	e3530005 	cmp	r3, #5
   17bb0:	8afffff4 	bhi	17b88 <CSMSC951xDevice::GetLinkSpeed()+0x1c>
   17bb4:	e59f2008 	ldr	r2, [pc, #8]	; 17bc4 <CSMSC951xDevice::GetLinkSpeed()+0x58>
   17bb8:	e0823003 	add	r3, r2, r3
   17bbc:	e5d30044 	ldrb	r0, [r3, #68]	; 0x44
   17bc0:	eafffff1 	b	17b8c <CSMSC951xDevice::GetLinkSpeed()+0x20>
   17bc4:	00026ae8 	.word	0x00026ae8

00017bc8 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>:
   17bc8:	e92d4030 	push	{r4, r5, lr}
   17bcc:	e1a04002 	mov	r4, r2
   17bd0:	e24dd014 	sub	sp, sp, #20
   17bd4:	e1a05001 	mov	r5, r1
   17bd8:	e28d200c 	add	r2, sp, #12
   17bdc:	e1a01004 	mov	r1, r4
   17be0:	ebffff36 	bl	178c0 <CSMSC951xDevice::ReadReg(unsigned int, unsigned int*)>
   17be4:	e3500000 	cmp	r0, #0
   17be8:	0a000008 	beq	17c10 <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0x48>
   17bec:	eb001594 	bl	1d244 <CLogger::Get()>
   17bf0:	e59d300c 	ldr	r3, [sp, #12]
   17bf4:	e3a02004 	mov	r2, #4
   17bf8:	e88d0028 	stm	sp, {r3, r5}
   17bfc:	e59f102c 	ldr	r1, [pc, #44]	; 17c30 <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0x68>
   17c00:	e59f302c 	ldr	r3, [pc, #44]	; 17c34 <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0x6c>
   17c04:	eb001737 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17c08:	e28dd014 	add	sp, sp, #20
   17c0c:	e8bd8030 	pop	{r4, r5, pc}
   17c10:	eb00158b 	bl	1d244 <CLogger::Get()>
   17c14:	e58d4000 	str	r4, [sp]
   17c18:	e59f3018 	ldr	r3, [pc, #24]	; 17c38 <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0x70>
   17c1c:	e3a02001 	mov	r2, #1
   17c20:	e59f1008 	ldr	r1, [pc, #8]	; 17c30 <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0x68>
   17c24:	eb00172f 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17c28:	e28dd014 	add	sp, sp, #20
   17c2c:	e8bd8030 	pop	{r4, r5, pc}
   17c30:	00026b20 	.word	0x00026b20
   17c34:	00026bd4 	.word	0x00026bd4
   17c38:	00026bb8 	.word	0x00026bb8

00017c3c <CSMSC951xDevice::DumpRegs()>:
   17c3c:	e92d4010 	push	{r4, lr}
   17c40:	e1a04000 	mov	r4, r0
   17c44:	e3a02000 	mov	r2, #0
   17c48:	e59f1134 	ldr	r1, [pc, #308]	; 17d84 <CSMSC951xDevice::DumpRegs()+0x148>
   17c4c:	ebffffdd 	bl	17bc8 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   17c50:	e1a00004 	mov	r0, r4
   17c54:	e3a02008 	mov	r2, #8
   17c58:	e59f1128 	ldr	r1, [pc, #296]	; 17d88 <CSMSC951xDevice::DumpRegs()+0x14c>
   17c5c:	ebffffd9 	bl	17bc8 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   17c60:	e1a00004 	mov	r0, r4
   17c64:	e3a0200c 	mov	r2, #12
   17c68:	e59f111c 	ldr	r1, [pc, #284]	; 17d8c <CSMSC951xDevice::DumpRegs()+0x150>
   17c6c:	ebffffd5 	bl	17bc8 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   17c70:	e1a00004 	mov	r0, r4
   17c74:	e3a02010 	mov	r2, #16
   17c78:	e59f1110 	ldr	r1, [pc, #272]	; 17d90 <CSMSC951xDevice::DumpRegs()+0x154>
   17c7c:	ebffffd1 	bl	17bc8 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   17c80:	e1a00004 	mov	r0, r4
   17c84:	e3a02014 	mov	r2, #20
   17c88:	e59f1104 	ldr	r1, [pc, #260]	; 17d94 <CSMSC951xDevice::DumpRegs()+0x158>
   17c8c:	ebffffcd 	bl	17bc8 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   17c90:	e1a00004 	mov	r0, r4
   17c94:	e3a02018 	mov	r2, #24
   17c98:	e59f10f8 	ldr	r1, [pc, #248]	; 17d98 <CSMSC951xDevice::DumpRegs()+0x15c>
   17c9c:	ebffffc9 	bl	17bc8 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   17ca0:	e1a00004 	mov	r0, r4
   17ca4:	e3a02020 	mov	r2, #32
   17ca8:	e59f10ec 	ldr	r1, [pc, #236]	; 17d9c <CSMSC951xDevice::DumpRegs()+0x160>
   17cac:	ebffffc5 	bl	17bc8 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   17cb0:	e1a00004 	mov	r0, r4
   17cb4:	e3a02024 	mov	r2, #36	; 0x24
   17cb8:	e59f10e0 	ldr	r1, [pc, #224]	; 17da0 <CSMSC951xDevice::DumpRegs()+0x164>
   17cbc:	ebffffc1 	bl	17bc8 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   17cc0:	e1a00004 	mov	r0, r4
   17cc4:	e3a02028 	mov	r2, #40	; 0x28
   17cc8:	e59f10d4 	ldr	r1, [pc, #212]	; 17da4 <CSMSC951xDevice::DumpRegs()+0x168>
   17ccc:	ebffffbd 	bl	17bc8 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   17cd0:	e1a00004 	mov	r0, r4
   17cd4:	e3a0202c 	mov	r2, #44	; 0x2c
   17cd8:	e59f10c8 	ldr	r1, [pc, #200]	; 17da8 <CSMSC951xDevice::DumpRegs()+0x16c>
   17cdc:	ebffffb9 	bl	17bc8 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   17ce0:	e1a00004 	mov	r0, r4
   17ce4:	e3a02038 	mov	r2, #56	; 0x38
   17ce8:	e59f10bc 	ldr	r1, [pc, #188]	; 17dac <CSMSC951xDevice::DumpRegs()+0x170>
   17cec:	ebffffb5 	bl	17bc8 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   17cf0:	e1a00004 	mov	r0, r4
   17cf4:	e3a02068 	mov	r2, #104	; 0x68
   17cf8:	e59f10b0 	ldr	r1, [pc, #176]	; 17db0 <CSMSC951xDevice::DumpRegs()+0x174>
   17cfc:	ebffffb1 	bl	17bc8 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   17d00:	e1a00004 	mov	r0, r4
   17d04:	e3a0206c 	mov	r2, #108	; 0x6c
   17d08:	e59f10a4 	ldr	r1, [pc, #164]	; 17db4 <CSMSC951xDevice::DumpRegs()+0x178>
   17d0c:	ebffffad 	bl	17bc8 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   17d10:	e1a00004 	mov	r0, r4
   17d14:	e3a02c01 	mov	r2, #256	; 0x100
   17d18:	e59f1098 	ldr	r1, [pc, #152]	; 17db8 <CSMSC951xDevice::DumpRegs()+0x17c>
   17d1c:	ebffffa9 	bl	17bc8 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   17d20:	e1a00004 	mov	r0, r4
   17d24:	e3a02f41 	mov	r2, #260	; 0x104
   17d28:	e59f108c 	ldr	r1, [pc, #140]	; 17dbc <CSMSC951xDevice::DumpRegs()+0x180>
   17d2c:	ebffffa5 	bl	17bc8 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   17d30:	e1a00004 	mov	r0, r4
   17d34:	e3a02f42 	mov	r2, #264	; 0x108
   17d38:	e59f1080 	ldr	r1, [pc, #128]	; 17dc0 <CSMSC951xDevice::DumpRegs()+0x184>
   17d3c:	ebffffa1 	bl	17bc8 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   17d40:	e1a00004 	mov	r0, r4
   17d44:	e3a02f43 	mov	r2, #268	; 0x10c
   17d48:	e59f1074 	ldr	r1, [pc, #116]	; 17dc4 <CSMSC951xDevice::DumpRegs()+0x188>
   17d4c:	ebffff9d 	bl	17bc8 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   17d50:	e1a00004 	mov	r0, r4
   17d54:	e3a02e11 	mov	r2, #272	; 0x110
   17d58:	e59f1068 	ldr	r1, [pc, #104]	; 17dc8 <CSMSC951xDevice::DumpRegs()+0x18c>
   17d5c:	ebffff99 	bl	17bc8 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   17d60:	e1a00004 	mov	r0, r4
   17d64:	e3a02f47 	mov	r2, #284	; 0x11c
   17d68:	e59f105c 	ldr	r1, [pc, #92]	; 17dcc <CSMSC951xDevice::DumpRegs()+0x190>
   17d6c:	ebffff95 	bl	17bc8 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   17d70:	e1a00004 	mov	r0, r4
   17d74:	e8bd4010 	pop	{r4, lr}
   17d78:	e3a02f4b 	mov	r2, #300	; 0x12c
   17d7c:	e59f104c 	ldr	r1, [pc, #76]	; 17dd0 <CSMSC951xDevice::DumpRegs()+0x194>
   17d80:	eaffff90 	b	17bc8 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   17d84:	00026bdc 	.word	0x00026bdc
   17d88:	00026be4 	.word	0x00026be4
   17d8c:	00026bec 	.word	0x00026bec
   17d90:	00026bf4 	.word	0x00026bf4
   17d94:	00026bfc 	.word	0x00026bfc
   17d98:	00026c04 	.word	0x00026c04
   17d9c:	00026c10 	.word	0x00026c10
   17da0:	00026c18 	.word	0x00026c18
   17da4:	00026c1c 	.word	0x00026c1c
   17da8:	00026c28 	.word	0x00026c28
   17dac:	00026c30 	.word	0x00026c30
   17db0:	00026c3c 	.word	0x00026c3c
   17db4:	00026c48 	.word	0x00026c48
   17db8:	00026c54 	.word	0x00026c54
   17dbc:	00026c5c 	.word	0x00026c5c
   17dc0:	00026c64 	.word	0x00026c64
   17dc4:	00026c6c 	.word	0x00026c6c
   17dc8:	00026c74 	.word	0x00026c74
   17dcc:	00026c7c 	.word	0x00026c7c
   17dd0:	00026c84 	.word	0x00026c84

00017dd4 <CSMSC951xDevice::Configure()>:
   17dd4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17dd8:	e3a06000 	mov	r6, #0
   17ddc:	e24dd038 	sub	sp, sp, #56	; 0x38
   17de0:	e1a05000 	mov	r5, r0
   17de4:	e28d0008 	add	r0, sp, #8
   17de8:	eb000b46 	bl	1ab08 <CBcmPropertyTags::CBcmPropertyTags()>
   17dec:	e28d0008 	add	r0, sp, #8
   17df0:	e58d6000 	str	r6, [sp]
   17df4:	e3a03014 	mov	r3, #20
   17df8:	e28d2024 	add	r2, sp, #36	; 0x24
   17dfc:	e59f1274 	ldr	r1, [pc, #628]	; 18078 <CSMSC951xDevice::Configure()+0x2a4>
   17e00:	eb000b97 	bl	1ac64 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   17e04:	e2504000 	subs	r4, r0, #0
   17e08:	0a00003c 	beq	17f00 <CSMSC951xDevice::Configure()+0x12c>
   17e0c:	e2857018 	add	r7, r5, #24
   17e10:	e28d1030 	add	r1, sp, #48	; 0x30
   17e14:	e1a00007 	mov	r0, r7
   17e18:	eb000454 	bl	18f70 <CMACAddress::Set(unsigned char const*)>
   17e1c:	e28d0014 	add	r0, sp, #20
   17e20:	eb001fc5 	bl	1fd3c <CString::CString()>
   17e24:	e28d1014 	add	r1, sp, #20
   17e28:	e1a00007 	mov	r0, r7
   17e2c:	eb0004b0 	bl	190f4 <CMACAddress::Format(CString*) const>
   17e30:	eb001503 	bl	1d244 <CLogger::Get()>
   17e34:	e1a04000 	mov	r4, r0
   17e38:	e28d0014 	add	r0, sp, #20
   17e3c:	eb001fd4 	bl	1fd94 <CString::operator char const*() const>
   17e40:	e59f3234 	ldr	r3, [pc, #564]	; 1807c <CSMSC951xDevice::Configure()+0x2a8>
   17e44:	e58d0000 	str	r0, [sp]
   17e48:	e3a02004 	mov	r2, #4
   17e4c:	e1a00004 	mov	r0, r4
   17e50:	e59f1228 	ldr	r1, [pc, #552]	; 18080 <CSMSC951xDevice::Configure()+0x2ac>
   17e54:	eb0016a3 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17e58:	e1a00005 	mov	r0, r5
   17e5c:	ebfff3e2 	bl	14dec <CUSBFunction::GetNumEndpoints() const>
   17e60:	e3500003 	cmp	r0, #3
   17e64:	03a06005 	moveq	r6, #5
   17e68:	03a08014 	moveq	r8, #20
   17e6c:	0a00000e 	beq	17eac <CSMSC951xDevice::Configure()+0xd8>
   17e70:	e1a00005 	mov	r0, r5
   17e74:	e59f1204 	ldr	r1, [pc, #516]	; 18080 <CSMSC951xDevice::Configure()+0x2ac>
   17e78:	e1a04006 	mov	r4, r6
   17e7c:	ebfff460 	bl	15004 <CUSBFunction::ConfigurationError(char const*) const>
   17e80:	e28d0014 	add	r0, sp, #20
   17e84:	eb001f79 	bl	1fc70 <CString::~CString()>
   17e88:	e28d0008 	add	r0, sp, #8
   17e8c:	eb000b23 	bl	1ab20 <CBcmPropertyTags::~CBcmPropertyTags()>
   17e90:	e1a00004 	mov	r0, r4
   17e94:	e28dd038 	add	sp, sp, #56	; 0x38
   17e98:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17e9c:	e5d43003 	ldrb	r3, [r4, #3]
   17ea0:	e203303f 	and	r3, r3, #63	; 0x3f
   17ea4:	e3530002 	cmp	r3, #2
   17ea8:	0a00001a 	beq	17f18 <CSMSC951xDevice::Configure()+0x144>
   17eac:	e1a01006 	mov	r1, r6
   17eb0:	e1a00005 	mov	r0, r5
   17eb4:	ebfff43f 	bl	14fb8 <CUSBFunction::GetDescriptor(unsigned char)>
   17eb8:	e2504000 	subs	r4, r0, #0
   17ebc:	1afffff6 	bne	17e9c <CSMSC951xDevice::Configure()+0xc8>
   17ec0:	e5953010 	ldr	r3, [r5, #16]
   17ec4:	e1a00005 	mov	r0, r5
   17ec8:	e3530000 	cmp	r3, #0
   17ecc:	0a000022 	beq	17f5c <CSMSC951xDevice::Configure()+0x188>
   17ed0:	e5953014 	ldr	r3, [r5, #20]
   17ed4:	e3530000 	cmp	r3, #0
   17ed8:	0a00001f 	beq	17f5c <CSMSC951xDevice::Configure()+0x188>
   17edc:	ebfff404 	bl	14ef4 <CUSBFunction::Configure()>
   17ee0:	e2504000 	subs	r4, r0, #0
   17ee4:	1a000020 	bne	17f6c <CSMSC951xDevice::Configure()+0x198>
   17ee8:	eb0014d5 	bl	1d244 <CLogger::Get()>
   17eec:	e59f3190 	ldr	r3, [pc, #400]	; 18084 <CSMSC951xDevice::Configure()+0x2b0>
   17ef0:	e3a02001 	mov	r2, #1
   17ef4:	e59f1184 	ldr	r1, [pc, #388]	; 18080 <CSMSC951xDevice::Configure()+0x2ac>
   17ef8:	eb00167a 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17efc:	eaffffdf 	b	17e80 <CSMSC951xDevice::Configure()+0xac>
   17f00:	eb0014cf 	bl	1d244 <CLogger::Get()>
   17f04:	e59f317c 	ldr	r3, [pc, #380]	; 18088 <CSMSC951xDevice::Configure()+0x2b4>
   17f08:	e3a02001 	mov	r2, #1
   17f0c:	e59f116c 	ldr	r1, [pc, #364]	; 18080 <CSMSC951xDevice::Configure()+0x2ac>
   17f10:	eb001674 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17f14:	eaffffdb 	b	17e88 <CSMSC951xDevice::Configure()+0xb4>
   17f18:	e1d430d2 	ldrsb	r3, [r4, #2]
   17f1c:	e3530000 	cmp	r3, #0
   17f20:	ba000024 	blt	17fb8 <CSMSC951xDevice::Configure()+0x1e4>
   17f24:	e5953014 	ldr	r3, [r5, #20]
   17f28:	e1a00005 	mov	r0, r5
   17f2c:	e3530000 	cmp	r3, #0
   17f30:	1a000009 	bne	17f5c <CSMSC951xDevice::Configure()+0x188>
   17f34:	ebfff3bc 	bl	14e2c <CUSBFunction::GetDevice() const>
   17f38:	e1a0a000 	mov	sl, r0
   17f3c:	e1a00008 	mov	r0, r8
   17f40:	eb002b91 	bl	22d8c <operator new(unsigned int)>
   17f44:	e1a09000 	mov	r9, r0
   17f48:	e1a02004 	mov	r2, r4
   17f4c:	e1a0100a 	mov	r1, sl
   17f50:	ebffd9cf 	bl	e694 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   17f54:	e5859014 	str	r9, [r5, #20]
   17f58:	eaffffd3 	b	17eac <CSMSC951xDevice::Configure()+0xd8>
   17f5c:	e59f111c 	ldr	r1, [pc, #284]	; 18080 <CSMSC951xDevice::Configure()+0x2ac>
   17f60:	ebfff427 	bl	15004 <CUSBFunction::ConfigurationError(char const*) const>
   17f64:	e3a04000 	mov	r4, #0
   17f68:	eaffffc4 	b	17e80 <CSMSC951xDevice::Configure()+0xac>
   17f6c:	e1a00007 	mov	r0, r7
   17f70:	e28d100c 	add	r1, sp, #12
   17f74:	eb00042a 	bl	19024 <CMACAddress::CopyTo(unsigned char*) const>
   17f78:	e5dd2011 	ldrb	r2, [sp, #17]
   17f7c:	e5dd3010 	ldrb	r3, [sp, #16]
   17f80:	e3a01f41 	mov	r1, #260	; 0x104
   17f84:	e1832402 	orr	r2, r3, r2, lsl #8
   17f88:	e1a00005 	mov	r0, r5
   17f8c:	e59d400c 	ldr	r4, [sp, #12]
   17f90:	ebfffe30 	bl	17858 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   17f94:	e3500000 	cmp	r0, #0
   17f98:	1a000014 	bne	17ff0 <CSMSC951xDevice::Configure()+0x21c>
   17f9c:	eb0014a8 	bl	1d244 <CLogger::Get()>
   17fa0:	e59f30e4 	ldr	r3, [pc, #228]	; 1808c <CSMSC951xDevice::Configure()+0x2b8>
   17fa4:	e3a02001 	mov	r2, #1
   17fa8:	e59f10d0 	ldr	r1, [pc, #208]	; 18080 <CSMSC951xDevice::Configure()+0x2ac>
   17fac:	eb00164d 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17fb0:	e3a04000 	mov	r4, #0
   17fb4:	eaffffb1 	b	17e80 <CSMSC951xDevice::Configure()+0xac>
   17fb8:	e5953010 	ldr	r3, [r5, #16]
   17fbc:	e1a00005 	mov	r0, r5
   17fc0:	e3530000 	cmp	r3, #0
   17fc4:	1affffe4 	bne	17f5c <CSMSC951xDevice::Configure()+0x188>
   17fc8:	ebfff397 	bl	14e2c <CUSBFunction::GetDevice() const>
   17fcc:	e1a0a000 	mov	sl, r0
   17fd0:	e1a00008 	mov	r0, r8
   17fd4:	eb002b6c 	bl	22d8c <operator new(unsigned int)>
   17fd8:	e1a09000 	mov	r9, r0
   17fdc:	e1a02004 	mov	r2, r4
   17fe0:	e1a0100a 	mov	r1, sl
   17fe4:	ebffd9aa 	bl	e694 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   17fe8:	e5859010 	str	r9, [r5, #16]
   17fec:	eaffffae 	b	17eac <CSMSC951xDevice::Configure()+0xd8>
   17ff0:	e1a02004 	mov	r2, r4
   17ff4:	e3a01f42 	mov	r1, #264	; 0x108
   17ff8:	e1a00005 	mov	r0, r5
   17ffc:	ebfffe15 	bl	17858 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   18000:	e3500000 	cmp	r0, #0
   18004:	0affffe4 	beq	17f9c <CSMSC951xDevice::Configure()+0x1c8>
   18008:	e59f2080 	ldr	r2, [pc, #128]	; 18090 <CSMSC951xDevice::Configure()+0x2bc>
   1800c:	e3a01024 	mov	r1, #36	; 0x24
   18010:	e1a00005 	mov	r0, r5
   18014:	ebfffe0f 	bl	17858 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   18018:	e3500000 	cmp	r0, #0
   1801c:	1a000006 	bne	1803c <CSMSC951xDevice::Configure()+0x268>
   18020:	eb001487 	bl	1d244 <CLogger::Get()>
   18024:	e59f3068 	ldr	r3, [pc, #104]	; 18094 <CSMSC951xDevice::Configure()+0x2c0>
   18028:	e3a02001 	mov	r2, #1
   1802c:	e59f104c 	ldr	r1, [pc, #76]	; 18080 <CSMSC951xDevice::Configure()+0x2ac>
   18030:	eb00162c 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18034:	e3a04000 	mov	r4, #0
   18038:	eaffff90 	b	17e80 <CSMSC951xDevice::Configure()+0xac>
   1803c:	e59f2054 	ldr	r2, [pc, #84]	; 18098 <CSMSC951xDevice::Configure()+0x2c4>
   18040:	e3a01c01 	mov	r1, #256	; 0x100
   18044:	e1a00005 	mov	r0, r5
   18048:	ebfffe02 	bl	17858 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   1804c:	e3500000 	cmp	r0, #0
   18050:	0afffff2 	beq	18020 <CSMSC951xDevice::Configure()+0x24c>
   18054:	e3a02004 	mov	r2, #4
   18058:	e3a01010 	mov	r1, #16
   1805c:	e1a00005 	mov	r0, r5
   18060:	ebfffdfc 	bl	17858 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   18064:	e2504000 	subs	r4, r0, #0
   18068:	0affffec 	beq	18020 <CSMSC951xDevice::Configure()+0x24c>
   1806c:	e1a00005 	mov	r0, r5
   18070:	eb000466 	bl	19210 <CNetDevice::AddNetDevice()>
   18074:	eaffff81 	b	17e80 <CSMSC951xDevice::Configure()+0xac>
   18078:	00010003 	.word	0x00010003
   1807c:	0002699c 	.word	0x0002699c
   18080:	00026b20 	.word	0x00026b20
   18084:	00025834 	.word	0x00025834
   18088:	00026984 	.word	0x00026984
   1808c:	00026c8c 	.word	0x00026c8c
   18090:	01110000 	.word	0x01110000
   18094:	00026ca4 	.word	0x00026ca4
   18098:	0080000c 	.word	0x0080000c

0001809c <CLAN7800Device::GetMACAddress() const>:
   1809c:	e2800018 	add	r0, r0, #24
   180a0:	e12fff1e 	bx	lr

000180a4 <CLAN7800Device::~CLAN7800Device()>:
   180a4:	e92d4070 	push	{r4, r5, r6, lr}
   180a8:	e5905014 	ldr	r5, [r0, #20]
   180ac:	e59f3068 	ldr	r3, [pc, #104]	; 1811c <CLAN7800Device::~CLAN7800Device()+0x78>
   180b0:	e3550000 	cmp	r5, #0
   180b4:	e1a04000 	mov	r4, r0
   180b8:	e5803000 	str	r3, [r0]
   180bc:	0a000004 	beq	180d4 <CLAN7800Device::~CLAN7800Device()+0x30>
   180c0:	e1a00005 	mov	r0, r5
   180c4:	ebffda04 	bl	e8dc <CUSBEndpoint::~CUSBEndpoint()>
   180c8:	e1a00005 	mov	r0, r5
   180cc:	e3a01014 	mov	r1, #20
   180d0:	eb002b31 	bl	22d9c <operator delete(void*, unsigned int)>
   180d4:	e3a03000 	mov	r3, #0
   180d8:	e5945010 	ldr	r5, [r4, #16]
   180dc:	e5843014 	str	r3, [r4, #20]
   180e0:	e1550003 	cmp	r5, r3
   180e4:	0a000004 	beq	180fc <CLAN7800Device::~CLAN7800Device()+0x58>
   180e8:	e1a00005 	mov	r0, r5
   180ec:	ebffd9fa 	bl	e8dc <CUSBEndpoint::~CUSBEndpoint()>
   180f0:	e1a00005 	mov	r0, r5
   180f4:	e3a01014 	mov	r1, #20
   180f8:	eb002b27 	bl	22d9c <operator delete(void*, unsigned int)>
   180fc:	e3a03000 	mov	r3, #0
   18100:	e2840018 	add	r0, r4, #24
   18104:	e5843010 	str	r3, [r4, #16]
   18108:	eb000376 	bl	18ee8 <CMACAddress::~CMACAddress()>
   1810c:	e1a00004 	mov	r0, r4
   18110:	eb000424 	bl	191a8 <CNetDevice::~CNetDevice()>
   18114:	e1a00004 	mov	r0, r4
   18118:	e8bd8070 	pop	{r4, r5, r6, pc}
   1811c:	00026cc0 	.word	0x00026cc0

00018120 <CLAN7800Device::~CLAN7800Device()>:
   18120:	e92d4010 	push	{r4, lr}
   18124:	e1a04000 	mov	r4, r0
   18128:	ebffffdd 	bl	180a4 <CLAN7800Device::~CLAN7800Device()>
   1812c:	e1a00004 	mov	r0, r4
   18130:	e3a01020 	mov	r1, #32
   18134:	eb002b18 	bl	22d9c <operator delete(void*, unsigned int)>
   18138:	e1a00004 	mov	r0, r4
   1813c:	e8bd8010 	pop	{r4, pc}

00018140 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)>:
   18140:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   18144:	e5903010 	ldr	r3, [r0, #16]
   18148:	e24dd030 	sub	sp, sp, #48	; 0x30
   1814c:	e3530000 	cmp	r3, #0
   18150:	e1a04000 	mov	r4, r0
   18154:	e1a05001 	mov	r5, r1
   18158:	e1a08002 	mov	r8, r2
   1815c:	0a000032 	beq	1822c <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0xec>
   18160:	e3550000 	cmp	r5, #0
   18164:	0a000035 	beq	18240 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x100>
   18168:	e3a06000 	mov	r6, #0
   1816c:	e5941010 	ldr	r1, [r4, #16]
   18170:	e3a03d19 	mov	r3, #1600	; 0x640
   18174:	e1a02005 	mov	r2, r5
   18178:	e58d6000 	str	r6, [sp]
   1817c:	e28d0008 	add	r0, sp, #8
   18180:	ebffdad8 	bl	ece8 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   18184:	e1a00004 	mov	r0, r4
   18188:	ebfff348 	bl	14eb0 <CUSBFunction::GetHost() const>
   1818c:	e5903000 	ldr	r3, [r0]
   18190:	e1a02006 	mov	r2, r6
   18194:	e5933008 	ldr	r3, [r3, #8]
   18198:	e28d1008 	add	r1, sp, #8
   1819c:	e12fff33 	blx	r3
   181a0:	e2504000 	subs	r4, r0, #0
   181a4:	1a000005 	bne	181c0 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x80>
   181a8:	e3a04000 	mov	r4, #0
   181ac:	e28d0008 	add	r0, sp, #8
   181b0:	ebffdaf1 	bl	ed7c <CUSBRequest::~CUSBRequest()>
   181b4:	e1a00004 	mov	r0, r4
   181b8:	e28dd030 	add	sp, sp, #48	; 0x30
   181bc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   181c0:	e28d0008 	add	r0, sp, #8
   181c4:	ebffdb03 	bl	edd8 <CUSBRequest::GetResultLength() const>
   181c8:	e3500009 	cmp	r0, #9
   181cc:	9afffff5 	bls	181a8 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x68>
   181d0:	e5957000 	ldr	r7, [r5]
   181d4:	e3170501 	tst	r7, #4194304	; 0x400000
   181d8:	1a000022 	bne	18268 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x128>
   181dc:	e1a07907 	lsl	r7, r7, #18
   181e0:	e1a07927 	lsr	r7, r7, #18
   181e4:	e240000a 	sub	r0, r0, #10
   181e8:	e1570000 	cmp	r7, r0
   181ec:	0a000003 	beq	18200 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0xc0>
   181f0:	e59f20a4 	ldr	r2, [pc, #164]	; 1829c <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x15c>
   181f4:	e59f10a4 	ldr	r1, [pc, #164]	; 182a0 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x160>
   181f8:	e59f00a4 	ldr	r0, [pc, #164]	; 182a4 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x164>
   181fc:	eb000a1d 	bl	1aa78 <assertion_failed>
   18200:	e3570004 	cmp	r7, #4
   18204:	9a000012 	bls	18254 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x114>
   18208:	e2476004 	sub	r6, r7, #4
   1820c:	e1a02006 	mov	r2, r6
   18210:	e285100a 	add	r1, r5, #10
   18214:	e1a00005 	mov	r0, r5
   18218:	eb0027df 	bl	2219c <memcpy>
   1821c:	e3580000 	cmp	r8, #0
   18220:	0a000018 	beq	18288 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x148>
   18224:	e5886000 	str	r6, [r8]
   18228:	eaffffdf 	b	181ac <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x6c>
   1822c:	e59f2074 	ldr	r2, [pc, #116]	; 182a8 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x168>
   18230:	e59f1068 	ldr	r1, [pc, #104]	; 182a0 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x160>
   18234:	e59f0070 	ldr	r0, [pc, #112]	; 182ac <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x16c>
   18238:	eb000a0e 	bl	1aa78 <assertion_failed>
   1823c:	eaffffc7 	b	18160 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x20>
   18240:	e3a02d07 	mov	r2, #448	; 0x1c0
   18244:	e59f1054 	ldr	r1, [pc, #84]	; 182a0 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x160>
   18248:	e59f0060 	ldr	r0, [pc, #96]	; 182b0 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x170>
   1824c:	eb000a09 	bl	1aa78 <assertion_failed>
   18250:	eaffffc4 	b	18168 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x28>
   18254:	e3a02f76 	mov	r2, #472	; 0x1d8
   18258:	e59f1040 	ldr	r1, [pc, #64]	; 182a0 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x160>
   1825c:	e59f0050 	ldr	r0, [pc, #80]	; 182b4 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x174>
   18260:	eb000a04 	bl	1aa78 <assertion_failed>
   18264:	eaffffcf 	b	181a8 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x68>
   18268:	eb0013f5 	bl	1d244 <CLogger::Get()>
   1826c:	e58d7000 	str	r7, [sp]
   18270:	e59f3040 	ldr	r3, [pc, #64]	; 182b8 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x178>
   18274:	e3a02002 	mov	r2, #2
   18278:	e59f103c 	ldr	r1, [pc, #60]	; 182bc <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x17c>
   1827c:	e1a04006 	mov	r4, r6
   18280:	eb001598 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18284:	eaffffc8 	b	181ac <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x6c>
   18288:	e59f2030 	ldr	r2, [pc, #48]	; 182c0 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x180>
   1828c:	e59f100c 	ldr	r1, [pc, #12]	; 182a0 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x160>
   18290:	e59f002c 	ldr	r0, [pc, #44]	; 182c4 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x184>
   18294:	eb0009f7 	bl	1aa78 <assertion_failed>
   18298:	eaffffe1 	b	18224 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0xe4>
   1829c:	000001d7 	.word	0x000001d7
   182a0:	00026cf8 	.word	0x00026cf8
   182a4:	00026d04 	.word	0x00026d04
   182a8:	000001bf 	.word	0x000001bf
   182ac:	00026948 	.word	0x00026948
   182b0:	00025930 	.word	0x00025930
   182b4:	00026b7c 	.word	0x00026b7c
   182b8:	00026b44 	.word	0x00026b44
   182bc:	00026cf0 	.word	0x00026cf0
   182c0:	000001e3 	.word	0x000001e3
   182c4:	00026960 	.word	0x00026960

000182c8 <CLAN7800Device::SendFrame(void const*, unsigned int) [clone .part.0]>:
   182c8:	e92d4070 	push	{r4, r5, r6, lr}
   182cc:	e2516000 	subs	r6, r1, #0
   182d0:	e24dde65 	sub	sp, sp, #1616	; 0x650
   182d4:	e1a05000 	mov	r5, r0
   182d8:	e1a04002 	mov	r4, r2
   182dc:	0a000018 	beq	18344 <CLAN7800Device::SendFrame(void const*, unsigned int) [clone .part.0]+0x7c>
   182e0:	e1a01006 	mov	r1, r6
   182e4:	e1a02004 	mov	r2, r4
   182e8:	e28d0010 	add	r0, sp, #16
   182ec:	eb0027aa 	bl	2219c <memcpy>
   182f0:	e3a02000 	mov	r2, #0
   182f4:	e3c434ff 	bic	r3, r4, #-16777216	; 0xff000000
   182f8:	e5951014 	ldr	r1, [r5, #20]
   182fc:	e3c3360f 	bic	r3, r3, #15728640	; 0xf00000
   18300:	e3833501 	orr	r3, r3, #4194304	; 0x400000
   18304:	e1510002 	cmp	r1, r2
   18308:	e58d3008 	str	r3, [sp, #8]
   1830c:	e58d200c 	str	r2, [sp, #12]
   18310:	0a000010 	beq	18358 <CLAN7800Device::SendFrame(void const*, unsigned int) [clone .part.0]+0x90>
   18314:	e1a00005 	mov	r0, r5
   18318:	ebfff2e4 	bl	14eb0 <CUSBFunction::GetHost() const>
   1831c:	e3a0c000 	mov	ip, #0
   18320:	e5951014 	ldr	r1, [r5, #20]
   18324:	e2843008 	add	r3, r4, #8
   18328:	e28d2008 	add	r2, sp, #8
   1832c:	e58dc000 	str	ip, [sp]
   18330:	ebffda53 	bl	ec84 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   18334:	e1e00000 	mvn	r0, r0
   18338:	e1a00fa0 	lsr	r0, r0, #31
   1833c:	e28dde65 	add	sp, sp, #1616	; 0x650
   18340:	e8bd8070 	pop	{r4, r5, r6, pc}
   18344:	e59f2020 	ldr	r2, [pc, #32]	; 1836c <CLAN7800Device::SendFrame(void const*, unsigned int) [clone .part.0]+0xa4>
   18348:	e59f1020 	ldr	r1, [pc, #32]	; 18370 <CLAN7800Device::SendFrame(void const*, unsigned int) [clone .part.0]+0xa8>
   1834c:	e59f0020 	ldr	r0, [pc, #32]	; 18374 <CLAN7800Device::SendFrame(void const*, unsigned int) [clone .part.0]+0xac>
   18350:	eb0009c8 	bl	1aa78 <assertion_failed>
   18354:	eaffffe1 	b	182e0 <CLAN7800Device::SendFrame(void const*, unsigned int) [clone .part.0]+0x18>
   18358:	e59f2018 	ldr	r2, [pc, #24]	; 18378 <CLAN7800Device::SendFrame(void const*, unsigned int) [clone .part.0]+0xb0>
   1835c:	e59f100c 	ldr	r1, [pc, #12]	; 18370 <CLAN7800Device::SendFrame(void const*, unsigned int) [clone .part.0]+0xa8>
   18360:	e59f0014 	ldr	r0, [pc, #20]	; 1837c <CLAN7800Device::SendFrame(void const*, unsigned int) [clone .part.0]+0xb4>
   18364:	eb0009c3 	bl	1aa78 <assertion_failed>
   18368:	eaffffe9 	b	18314 <CLAN7800Device::SendFrame(void const*, unsigned int) [clone .part.0]+0x4c>
   1836c:	000001b2 	.word	0x000001b2
   18370:	00026cf8 	.word	0x00026cf8
   18374:	00025930 	.word	0x00025930
   18378:	000001b9 	.word	0x000001b9
   1837c:	00026910 	.word	0x00026910

00018380 <CLAN7800Device::SendFrame(void const*, unsigned int)>:
   18380:	e3520d19 	cmp	r2, #1600	; 0x640
   18384:	8a000000 	bhi	1838c <CLAN7800Device::SendFrame(void const*, unsigned int)+0xc>
   18388:	eaffffce 	b	182c8 <CLAN7800Device::SendFrame(void const*, unsigned int) [clone .part.0]>
   1838c:	e3a00000 	mov	r0, #0
   18390:	e12fff1e 	bx	lr

00018394 <CLAN7800Device::CLAN7800Device(CUSBFunction*)>:
   18394:	e92d4010 	push	{r4, lr}
   18398:	e1a04000 	mov	r4, r0
   1839c:	eb000379 	bl	19188 <CNetDevice::CNetDevice(CUSBFunction*)>
   183a0:	e3a03000 	mov	r3, #0
   183a4:	e59f2018 	ldr	r2, [pc, #24]	; 183c4 <CLAN7800Device::CLAN7800Device(CUSBFunction*)+0x30>
   183a8:	e5843010 	str	r3, [r4, #16]
   183ac:	e5842000 	str	r2, [r4]
   183b0:	e5843014 	str	r3, [r4, #20]
   183b4:	e2840018 	add	r0, r4, #24
   183b8:	eb0002c7 	bl	18edc <CMACAddress::CMACAddress()>
   183bc:	e1a00004 	mov	r0, r4
   183c0:	e8bd8010 	pop	{r4, pc}
   183c4:	00026cc0 	.word	0x00026cc0

000183c8 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>:
   183c8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   183cc:	e24dd01c 	sub	sp, sp, #28
   183d0:	e28d5018 	add	r5, sp, #24
   183d4:	e1a06001 	mov	r6, r1
   183d8:	e5252004 	str	r2, [r5, #-4]!
   183dc:	e1a04000 	mov	r4, r0
   183e0:	ebfff2b2 	bl	14eb0 <CUSBFunction::GetHost() const>
   183e4:	e1a07000 	mov	r7, r0
   183e8:	e1a00004 	mov	r0, r4
   183ec:	ebfff29e 	bl	14e6c <CUSBFunction::GetEndpoint0() const>
   183f0:	e3a04000 	mov	r4, #0
   183f4:	e3a03004 	mov	r3, #4
   183f8:	e6ff2076 	uxth	r2, r6
   183fc:	e1a01000 	mov	r1, r0
   18400:	e58d2004 	str	r2, [sp, #4]
   18404:	e58d300c 	str	r3, [sp, #12]
   18408:	e58d5008 	str	r5, [sp, #8]
   1840c:	e1a00007 	mov	r0, r7
   18410:	e58d4000 	str	r4, [sp]
   18414:	e3a030a0 	mov	r3, #160	; 0xa0
   18418:	e3a02040 	mov	r2, #64	; 0x40
   1841c:	ebffd9b2 	bl	eaec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   18420:	e1500004 	cmp	r0, r4
   18424:	a3a00001 	movge	r0, #1
   18428:	ba000001 	blt	18434 <CLAN7800Device::WriteReg(unsigned int, unsigned int)+0x6c>
   1842c:	e28dd01c 	add	sp, sp, #28
   18430:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   18434:	eb001382 	bl	1d244 <CLogger::Get()>
   18438:	e58d6000 	str	r6, [sp]
   1843c:	e59f3014 	ldr	r3, [pc, #20]	; 18458 <CLAN7800Device::WriteReg(unsigned int, unsigned int)+0x90>
   18440:	e3a02002 	mov	r2, #2
   18444:	e59f1010 	ldr	r1, [pc, #16]	; 1845c <CLAN7800Device::WriteReg(unsigned int, unsigned int)+0x94>
   18448:	eb001526 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1844c:	e1a00004 	mov	r0, r4
   18450:	e28dd01c 	add	sp, sp, #28
   18454:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   18458:	00026d34 	.word	0x00026d34
   1845c:	00026cf0 	.word	0x00026cf0

00018460 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>:
   18460:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   18464:	e24dd014 	sub	sp, sp, #20
   18468:	e1a05001 	mov	r5, r1
   1846c:	e1a07002 	mov	r7, r2
   18470:	e1a04000 	mov	r4, r0
   18474:	ebfff28d 	bl	14eb0 <CUSBFunction::GetHost() const>
   18478:	e1a06000 	mov	r6, r0
   1847c:	e1a00004 	mov	r0, r4
   18480:	ebfff279 	bl	14e6c <CUSBFunction::GetEndpoint0() const>
   18484:	e3a04000 	mov	r4, #0
   18488:	e3a03004 	mov	r3, #4
   1848c:	e6ffc075 	uxth	ip, r5
   18490:	e1a01000 	mov	r1, r0
   18494:	e58d300c 	str	r3, [sp, #12]
   18498:	e58d7008 	str	r7, [sp, #8]
   1849c:	e58dc004 	str	ip, [sp, #4]
   184a0:	e1a00006 	mov	r0, r6
   184a4:	e58d4000 	str	r4, [sp]
   184a8:	e3a030a1 	mov	r3, #161	; 0xa1
   184ac:	e3a020c0 	mov	r2, #192	; 0xc0
   184b0:	ebffd98d 	bl	eaec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   184b4:	e3500004 	cmp	r0, #4
   184b8:	03a00001 	moveq	r0, #1
   184bc:	0a000006 	beq	184dc <CLAN7800Device::ReadReg(unsigned int, unsigned int*)+0x7c>
   184c0:	eb00135f 	bl	1d244 <CLogger::Get()>
   184c4:	e58d5000 	str	r5, [sp]
   184c8:	e59f3014 	ldr	r3, [pc, #20]	; 184e4 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)+0x84>
   184cc:	e3a02002 	mov	r2, #2
   184d0:	e59f1010 	ldr	r1, [pc, #16]	; 184e8 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)+0x88>
   184d4:	eb001503 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   184d8:	e1a00004 	mov	r0, r4
   184dc:	e28dd014 	add	sp, sp, #20
   184e0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   184e4:	00026bb8 	.word	0x00026bb8
   184e8:	00026cf0 	.word	0x00026cf0

000184ec <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
   184ec:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   184f0:	e24dd00c 	sub	sp, sp, #12
   184f4:	e1a08000 	mov	r8, r0
   184f8:	e1a09001 	mov	r9, r1
   184fc:	e1a0a002 	mov	sl, r2
   18500:	e1a0b003 	mov	fp, r3
   18504:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
   18508:	e59d7034 	ldr	r7, [sp, #52]	; 0x34
   1850c:	eb0025a1 	bl	21b98 <CTimer::Get()>
   18510:	e2505000 	subs	r5, r0, #0
   18514:	0a00001a 	beq	18584 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x98>
   18518:	e1a00005 	mov	r0, r5
   1851c:	eb0022d6 	bl	2107c <CTimer::GetTicks() const>
   18520:	e1a06000 	mov	r6, r0
   18524:	ea00000e 	b	18564 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x78>
   18528:	e1a00005 	mov	r0, r5
   1852c:	eb0022d2 	bl	2107c <CTimer::GetTicks() const>
   18530:	e0400006 	sub	r0, r0, r6
   18534:	e1500007 	cmp	r0, r7
   18538:	2a00000e 	bcs	18578 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x8c>
   1853c:	e28d2004 	add	r2, sp, #4
   18540:	e1a01009 	mov	r1, r9
   18544:	e1a00008 	mov	r0, r8
   18548:	ebffffc4 	bl	18460 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   1854c:	e3500000 	cmp	r0, #0
   18550:	0a000008 	beq	18578 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x8c>
   18554:	e59d3004 	ldr	r3, [sp, #4]
   18558:	e003300a 	and	r3, r3, sl
   1855c:	e153000b 	cmp	r3, fp
   18560:	0a000005 	beq	1857c <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x90>
   18564:	e3540000 	cmp	r4, #0
   18568:	0affffee 	beq	18528 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x3c>
   1856c:	e1a00004 	mov	r0, r4
   18570:	eb002556 	bl	21ad0 <CTimer::SimpleusDelay(unsigned int)>
   18574:	eaffffeb 	b	18528 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x3c>
   18578:	e3a00000 	mov	r0, #0
   1857c:	e28dd00c 	add	sp, sp, #12
   18580:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18584:	e59f200c 	ldr	r2, [pc, #12]	; 18598 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xac>
   18588:	e59f100c 	ldr	r1, [pc, #12]	; 1859c <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xb0>
   1858c:	e59f000c 	ldr	r0, [pc, #12]	; 185a0 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xb4>
   18590:	eb000938 	bl	1aa78 <assertion_failed>
   18594:	eaffffdf 	b	18518 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x2c>
   18598:	0000028e 	.word	0x0000028e
   1859c:	00026cf8 	.word	0x00026cf8
   185a0:	00026b90 	.word	0x00026b90

000185a4 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)>:
   185a4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   185a8:	e351001f 	cmp	r1, #31
   185ac:	e24dd008 	sub	sp, sp, #8
   185b0:	e1a04001 	mov	r4, r1
   185b4:	e1a06000 	mov	r6, r0
   185b8:	e1a08002 	mov	r8, r2
   185bc:	ca00000c 	bgt	185f4 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0x50>
   185c0:	e3a05000 	mov	r5, #0
   185c4:	e3a07064 	mov	r7, #100	; 0x64
   185c8:	e1a03005 	mov	r3, r5
   185cc:	e88d00a0 	stm	sp, {r5, r7}
   185d0:	e3a02001 	mov	r2, #1
   185d4:	e3a01e12 	mov	r1, #288	; 0x120
   185d8:	e1a00006 	mov	r0, r6
   185dc:	ebffffc2 	bl	184ec <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   185e0:	e1500005 	cmp	r0, r5
   185e4:	1a000007 	bne	18608 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0x64>
   185e8:	e3a00000 	mov	r0, #0
   185ec:	e28dd008 	add	sp, sp, #8
   185f0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   185f4:	e59f2068 	ldr	r2, [pc, #104]	; 18664 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0xc0>
   185f8:	e59f1068 	ldr	r1, [pc, #104]	; 18668 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0xc4>
   185fc:	e59f0068 	ldr	r0, [pc, #104]	; 1866c <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0xc8>
   18600:	eb00091c 	bl	1aa78 <assertion_failed>
   18604:	eaffffed 	b	185c0 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0x1c>
   18608:	e1a02008 	mov	r2, r8
   1860c:	e3a01f49 	mov	r1, #292	; 0x124
   18610:	e1a00006 	mov	r0, r6
   18614:	ebffff6b 	bl	183c8 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   18618:	e3500000 	cmp	r0, #0
   1861c:	0afffff1 	beq	185e8 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0x44>
   18620:	e1a02304 	lsl	r2, r4, #6
   18624:	e2022d1f 	and	r2, r2, #1984	; 0x7c0
   18628:	e3822b02 	orr	r2, r2, #2048	; 0x800
   1862c:	e3822003 	orr	r2, r2, #3
   18630:	e3a01e12 	mov	r1, #288	; 0x120
   18634:	e1a00006 	mov	r0, r6
   18638:	ebffff62 	bl	183c8 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   1863c:	e3500000 	cmp	r0, #0
   18640:	0affffe8 	beq	185e8 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0x44>
   18644:	e88d00a0 	stm	sp, {r5, r7}
   18648:	e1a03005 	mov	r3, r5
   1864c:	e1a00006 	mov	r0, r6
   18650:	e3a02001 	mov	r2, #1
   18654:	e3a01e12 	mov	r1, #288	; 0x120
   18658:	ebffffa3 	bl	184ec <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   1865c:	e28dd008 	add	sp, sp, #8
   18660:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   18664:	00000259 	.word	0x00000259
   18668:	00026cf8 	.word	0x00026cf8
   1866c:	00026b9c 	.word	0x00026b9c

00018670 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>:
   18670:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   18674:	e351001f 	cmp	r1, #31
   18678:	e24dd014 	sub	sp, sp, #20
   1867c:	e1a04001 	mov	r4, r1
   18680:	e1a06000 	mov	r6, r0
   18684:	e1a09002 	mov	r9, r2
   18688:	ca000019 	bgt	186f4 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x84>
   1868c:	e3a05000 	mov	r5, #0
   18690:	e3a08064 	mov	r8, #100	; 0x64
   18694:	e1a03005 	mov	r3, r5
   18698:	e88d0120 	stm	sp, {r5, r8}
   1869c:	e3a02001 	mov	r2, #1
   186a0:	e3a01e12 	mov	r1, #288	; 0x120
   186a4:	e1a00006 	mov	r0, r6
   186a8:	ebffff8f 	bl	184ec <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   186ac:	e2507000 	subs	r7, r0, #0
   186b0:	1a000002 	bne	186c0 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x50>
   186b4:	e1a00007 	mov	r0, r7
   186b8:	e28dd014 	add	sp, sp, #20
   186bc:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   186c0:	e1a02304 	lsl	r2, r4, #6
   186c4:	e2022d1f 	and	r2, r2, #1984	; 0x7c0
   186c8:	e3822b02 	orr	r2, r2, #2048	; 0x800
   186cc:	e3822001 	orr	r2, r2, #1
   186d0:	e3a01e12 	mov	r1, #288	; 0x120
   186d4:	e1a00006 	mov	r0, r6
   186d8:	ebffff3a 	bl	183c8 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   186dc:	e1500005 	cmp	r0, r5
   186e0:	1a000008 	bne	18708 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x98>
   186e4:	e3a07000 	mov	r7, #0
   186e8:	e1a00007 	mov	r0, r7
   186ec:	e28dd014 	add	sp, sp, #20
   186f0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   186f4:	e3a02e27 	mov	r2, #624	; 0x270
   186f8:	e59f1070 	ldr	r1, [pc, #112]	; 18770 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x100>
   186fc:	e59f0070 	ldr	r0, [pc, #112]	; 18774 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x104>
   18700:	eb0008dc 	bl	1aa78 <assertion_failed>
   18704:	eaffffe0 	b	1868c <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x1c>
   18708:	e88d0120 	stm	sp, {r5, r8}
   1870c:	e1a03005 	mov	r3, r5
   18710:	e3a02001 	mov	r2, #1
   18714:	e3a01e12 	mov	r1, #288	; 0x120
   18718:	e1a00006 	mov	r0, r6
   1871c:	ebffff72 	bl	184ec <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   18720:	e3500000 	cmp	r0, #0
   18724:	0affffee 	beq	186e4 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x74>
   18728:	e1a00006 	mov	r0, r6
   1872c:	e28d200c 	add	r2, sp, #12
   18730:	e3a01f49 	mov	r1, #292	; 0x124
   18734:	ebffff49 	bl	18460 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   18738:	e2507000 	subs	r7, r0, #0
   1873c:	0affffe8 	beq	186e4 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x74>
   18740:	e3590000 	cmp	r9, #0
   18744:	0a000004 	beq	1875c <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0xec>
   18748:	e1a00007 	mov	r0, r7
   1874c:	e59d300c 	ldr	r3, [sp, #12]
   18750:	e1c930b0 	strh	r3, [r9]
   18754:	e28dd014 	add	sp, sp, #20
   18758:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1875c:	e3a02fa1 	mov	r2, #644	; 0x284
   18760:	e59f1008 	ldr	r1, [pc, #8]	; 18770 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x100>
   18764:	e59f000c 	ldr	r0, [pc, #12]	; 18778 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x108>
   18768:	eb0008c2 	bl	1aa78 <assertion_failed>
   1876c:	eafffff5 	b	18748 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0xd8>
   18770:	00026cf8 	.word	0x00026cf8
   18774:	00026b9c 	.word	0x00026b9c
   18778:	00026bac 	.word	0x00026bac

0001877c <CLAN7800Device::IsLinkUp()>:
   1877c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   18780:	e24dd00c 	sub	sp, sp, #12
   18784:	e28d2006 	add	r2, sp, #6
   18788:	e3a01001 	mov	r1, #1
   1878c:	ebffffb7 	bl	18670 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>
   18790:	e3500000 	cmp	r0, #0
   18794:	11dd00b6 	ldrhne	r0, [sp, #6]
   18798:	11a00120 	lsrne	r0, r0, #2
   1879c:	12000001 	andne	r0, r0, #1
   187a0:	e28dd00c 	add	sp, sp, #12
   187a4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

000187a8 <CLAN7800Device::GetLinkSpeed()>:
   187a8:	e92d4010 	push	{r4, lr}
   187ac:	e3a02000 	mov	r2, #0
   187b0:	e24dd008 	sub	sp, sp, #8
   187b4:	e3a0101f 	mov	r1, #31
   187b8:	e1a04000 	mov	r4, r0
   187bc:	ebffff78 	bl	185a4 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)>
   187c0:	e3500000 	cmp	r0, #0
   187c4:	1a000002 	bne	187d4 <CLAN7800Device::GetLinkSpeed()+0x2c>
   187c8:	e3a00006 	mov	r0, #6
   187cc:	e28dd008 	add	sp, sp, #8
   187d0:	e8bd8010 	pop	{r4, pc}
   187d4:	e1a00004 	mov	r0, r4
   187d8:	e28d2006 	add	r2, sp, #6
   187dc:	e3a0101c 	mov	r1, #28
   187e0:	ebffffa2 	bl	18670 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>
   187e4:	e3500000 	cmp	r0, #0
   187e8:	0afffff6 	beq	187c8 <CLAN7800Device::GetLinkSpeed()+0x20>
   187ec:	e1dd30b6 	ldrh	r3, [sp, #6]
   187f0:	e3130901 	tst	r3, #16384	; 0x4000
   187f4:	1a00000d 	bne	18830 <CLAN7800Device::GetLinkSpeed()+0x88>
   187f8:	e3130902 	tst	r3, #32768	; 0x8000
   187fc:	0afffff1 	beq	187c8 <CLAN7800Device::GetLinkSpeed()+0x20>
   18800:	e1a031c3 	asr	r3, r3, #3
   18804:	e2033007 	and	r3, r3, #7
   18808:	e3530006 	cmp	r3, #6
   1880c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   18810:	eaffffec 	b	187c8 <CLAN7800Device::GetLinkSpeed()+0x20>
   18814:	00018850 	.word	0x00018850
   18818:	00018848 	.word	0x00018848
   1881c:	00018870 	.word	0x00018870
   18820:	000187c8 	.word	0x000187c8
   18824:	00018868 	.word	0x00018868
   18828:	00018860 	.word	0x00018860
   1882c:	00018858 	.word	0x00018858
   18830:	e59f2040 	ldr	r2, [pc, #64]	; 18878 <CLAN7800Device::GetLinkSpeed()+0xd0>
   18834:	e59f1040 	ldr	r1, [pc, #64]	; 1887c <CLAN7800Device::GetLinkSpeed()+0xd4>
   18838:	e59f0040 	ldr	r0, [pc, #64]	; 18880 <CLAN7800Device::GetLinkSpeed()+0xd8>
   1883c:	eb00088d 	bl	1aa78 <assertion_failed>
   18840:	e1dd30b6 	ldrh	r3, [sp, #6]
   18844:	eaffffeb 	b	187f8 <CLAN7800Device::GetLinkSpeed()+0x50>
   18848:	e3a00002 	mov	r0, #2
   1884c:	eaffffde 	b	187cc <CLAN7800Device::GetLinkSpeed()+0x24>
   18850:	e3a00000 	mov	r0, #0
   18854:	eaffffdc 	b	187cc <CLAN7800Device::GetLinkSpeed()+0x24>
   18858:	e3a00005 	mov	r0, #5
   1885c:	eaffffda 	b	187cc <CLAN7800Device::GetLinkSpeed()+0x24>
   18860:	e3a00003 	mov	r0, #3
   18864:	eaffffd8 	b	187cc <CLAN7800Device::GetLinkSpeed()+0x24>
   18868:	e3a00001 	mov	r0, #1
   1886c:	eaffffd6 	b	187cc <CLAN7800Device::GetLinkSpeed()+0x24>
   18870:	e3a00004 	mov	r0, #4
   18874:	eaffffd4 	b	187cc <CLAN7800Device::GetLinkSpeed()+0x24>
   18878:	00000203 	.word	0x00000203
   1887c:	00026cf8 	.word	0x00026cf8
   18880:	00026d50 	.word	0x00026d50

00018884 <CLAN7800Device::InitPHY()>:
   18884:	e92d4010 	push	{r4, lr}
   18888:	e3a02000 	mov	r2, #0
   1888c:	e24dd008 	sub	sp, sp, #8
   18890:	e3a0101f 	mov	r1, #31
   18894:	e1a04000 	mov	r4, r0
   18898:	ebffff41 	bl	185a4 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)>
   1889c:	e3500000 	cmp	r0, #0
   188a0:	1a000001 	bne	188ac <CLAN7800Device::InitPHY()+0x28>
   188a4:	e28dd008 	add	sp, sp, #8
   188a8:	e8bd8010 	pop	{r4, pc}
   188ac:	e28d2006 	add	r2, sp, #6
   188b0:	e3a0101d 	mov	r1, #29
   188b4:	e1a00004 	mov	r0, r4
   188b8:	ebffff6c 	bl	18670 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>
   188bc:	e3500000 	cmp	r0, #0
   188c0:	0afffff7 	beq	188a4 <CLAN7800Device::InitPHY()+0x20>
   188c4:	e1dd30b6 	ldrh	r3, [sp, #6]
   188c8:	e1a00004 	mov	r0, r4
   188cc:	e3c330ff 	bic	r3, r3, #255	; 0xff
   188d0:	e3833061 	orr	r3, r3, #97	; 0x61
   188d4:	e1a02003 	mov	r2, r3
   188d8:	e3a0101d 	mov	r1, #29
   188dc:	e1cd30b6 	strh	r3, [sp, #6]
   188e0:	ebffff2f 	bl	185a4 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)>
   188e4:	e28dd008 	add	sp, sp, #8
   188e8:	e8bd8010 	pop	{r4, pc}

000188ec <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>:
   188ec:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   188f0:	e24dd00c 	sub	sp, sp, #12
   188f4:	e1a06002 	mov	r6, r2
   188f8:	e28d2004 	add	r2, sp, #4
   188fc:	e1a04003 	mov	r4, r3
   18900:	e1a05000 	mov	r5, r0
   18904:	e1a07001 	mov	r7, r1
   18908:	ebfffed4 	bl	18460 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   1890c:	e3500000 	cmp	r0, #0
   18910:	0a000007 	beq	18934 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)+0x48>
   18914:	e59d3004 	ldr	r3, [sp, #4]
   18918:	e1a01007 	mov	r1, r7
   1891c:	e0044003 	and	r4, r4, r3
   18920:	e1844006 	orr	r4, r4, r6
   18924:	e1a00005 	mov	r0, r5
   18928:	e1a02004 	mov	r2, r4
   1892c:	e58d4004 	str	r4, [sp, #4]
   18930:	ebfffea4 	bl	183c8 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   18934:	e28dd00c 	add	sp, sp, #12
   18938:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0001893c <CLAN7800Device::InitMACAddress()>:
   1893c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   18940:	e24dd034 	sub	sp, sp, #52	; 0x34
   18944:	e1a04000 	mov	r4, r0
   18948:	e28d0008 	add	r0, sp, #8
   1894c:	eb00086d 	bl	1ab08 <CBcmPropertyTags::CBcmPropertyTags()>
   18950:	e3a03000 	mov	r3, #0
   18954:	e28d0008 	add	r0, sp, #8
   18958:	e58d3000 	str	r3, [sp]
   1895c:	e28d201c 	add	r2, sp, #28
   18960:	e3a03014 	mov	r3, #20
   18964:	e59f10e0 	ldr	r1, [pc, #224]	; 18a4c <CLAN7800Device::InitMACAddress()+0x110>
   18968:	eb0008bd 	bl	1ac64 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   1896c:	e3500000 	cmp	r0, #0
   18970:	1a000005 	bne	1898c <CLAN7800Device::InitMACAddress()+0x50>
   18974:	e3a04000 	mov	r4, #0
   18978:	e28d0008 	add	r0, sp, #8
   1897c:	eb000867 	bl	1ab20 <CBcmPropertyTags::~CBcmPropertyTags()>
   18980:	e1a00004 	mov	r0, r4
   18984:	e28dd034 	add	sp, sp, #52	; 0x34
   18988:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1898c:	e2846018 	add	r6, r4, #24
   18990:	e1a00006 	mov	r0, r6
   18994:	e28d1028 	add	r1, sp, #40	; 0x28
   18998:	eb000174 	bl	18f70 <CMACAddress::Set(unsigned char const*)>
   1899c:	e59d5028 	ldr	r5, [sp, #40]	; 0x28
   189a0:	e3a01f47 	mov	r1, #284	; 0x11c
   189a4:	e1a02005 	mov	r2, r5
   189a8:	e1a00004 	mov	r0, r4
   189ac:	e1dd72bc 	ldrh	r7, [sp, #44]	; 0x2c
   189b0:	ebfffe84 	bl	183c8 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   189b4:	e3500000 	cmp	r0, #0
   189b8:	0affffed 	beq	18974 <CLAN7800Device::InitMACAddress()+0x38>
   189bc:	e1a02007 	mov	r2, r7
   189c0:	e3a01f46 	mov	r1, #280	; 0x118
   189c4:	e1a00004 	mov	r0, r4
   189c8:	ebfffe7e 	bl	183c8 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   189cc:	e3500000 	cmp	r0, #0
   189d0:	0affffe7 	beq	18974 <CLAN7800Device::InitMACAddress()+0x38>
   189d4:	e1a02005 	mov	r2, r5
   189d8:	e59f1070 	ldr	r1, [pc, #112]	; 18a50 <CLAN7800Device::InitMACAddress()+0x114>
   189dc:	e1a00004 	mov	r0, r4
   189e0:	ebfffe78 	bl	183c8 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   189e4:	e3500000 	cmp	r0, #0
   189e8:	0affffe1 	beq	18974 <CLAN7800Device::InitMACAddress()+0x38>
   189ec:	e1a00004 	mov	r0, r4
   189f0:	e3872102 	orr	r2, r7, #-2147483648	; 0x80000000
   189f4:	e3a01b01 	mov	r1, #1024	; 0x400
   189f8:	ebfffe72 	bl	183c8 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   189fc:	e2504000 	subs	r4, r0, #0
   18a00:	0affffdb 	beq	18974 <CLAN7800Device::InitMACAddress()+0x38>
   18a04:	e28d000c 	add	r0, sp, #12
   18a08:	eb001ccb 	bl	1fd3c <CString::CString()>
   18a0c:	e28d100c 	add	r1, sp, #12
   18a10:	e1a00006 	mov	r0, r6
   18a14:	eb0001b6 	bl	190f4 <CMACAddress::Format(CString*) const>
   18a18:	eb001209 	bl	1d244 <CLogger::Get()>
   18a1c:	e1a05000 	mov	r5, r0
   18a20:	e28d000c 	add	r0, sp, #12
   18a24:	eb001cda 	bl	1fd94 <CString::operator char const*() const>
   18a28:	e59f3024 	ldr	r3, [pc, #36]	; 18a54 <CLAN7800Device::InitMACAddress()+0x118>
   18a2c:	e58d0000 	str	r0, [sp]
   18a30:	e3a02004 	mov	r2, #4
   18a34:	e1a00005 	mov	r0, r5
   18a38:	e59f1018 	ldr	r1, [pc, #24]	; 18a58 <CLAN7800Device::InitMACAddress()+0x11c>
   18a3c:	eb0013a9 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18a40:	e28d000c 	add	r0, sp, #12
   18a44:	eb001c89 	bl	1fc70 <CString::~CString()>
   18a48:	eaffffca 	b	18978 <CLAN7800Device::InitMACAddress()+0x3c>
   18a4c:	00010003 	.word	0x00010003
   18a50:	00000404 	.word	0x00000404
   18a54:	0002699c 	.word	0x0002699c
   18a58:	00026cf0 	.word	0x00026cf0

00018a5c <CLAN7800Device::Configure()>:
   18a5c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   18a60:	e24dd014 	sub	sp, sp, #20
   18a64:	e1a05000 	mov	r5, r0
   18a68:	ebfff0df 	bl	14dec <CUSBFunction::GetNumEndpoints() const>
   18a6c:	e3500003 	cmp	r0, #3
   18a70:	03a06005 	moveq	r6, #5
   18a74:	03a07014 	moveq	r7, #20
   18a78:	0a000004 	beq	18a90 <CLAN7800Device::Configure()+0x34>
   18a7c:	ea000034 	b	18b54 <CLAN7800Device::Configure()+0xf8>
   18a80:	e5d43003 	ldrb	r3, [r4, #3]
   18a84:	e203303f 	and	r3, r3, #63	; 0x3f
   18a88:	e3530002 	cmp	r3, #2
   18a8c:	0a00001f 	beq	18b10 <CLAN7800Device::Configure()+0xb4>
   18a90:	e1a01006 	mov	r1, r6
   18a94:	e1a00005 	mov	r0, r5
   18a98:	ebfff146 	bl	14fb8 <CUSBFunction::GetDescriptor(unsigned char)>
   18a9c:	e2504000 	subs	r4, r0, #0
   18aa0:	1afffff6 	bne	18a80 <CLAN7800Device::Configure()+0x24>
   18aa4:	e5953010 	ldr	r3, [r5, #16]
   18aa8:	e1a00005 	mov	r0, r5
   18aac:	e3530000 	cmp	r3, #0
   18ab0:	0a00004f 	beq	18bf4 <CLAN7800Device::Configure()+0x198>
   18ab4:	e5953014 	ldr	r3, [r5, #20]
   18ab8:	e3530000 	cmp	r3, #0
   18abc:	0a00004c 	beq	18bf4 <CLAN7800Device::Configure()+0x198>
   18ac0:	ebfff10b 	bl	14ef4 <CUSBFunction::Configure()>
   18ac4:	e2506000 	subs	r6, r0, #0
   18ac8:	0a00004f 	beq	18c0c <CLAN7800Device::Configure()+0x1b0>
   18acc:	e28d200c 	add	r2, sp, #12
   18ad0:	e1a01004 	mov	r1, r4
   18ad4:	e1a00005 	mov	r0, r5
   18ad8:	ebfffe60 	bl	18460 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   18adc:	e3500000 	cmp	r0, #0
   18ae0:	1a000030 	bne	18ba8 <CLAN7800Device::Configure()+0x14c>
   18ae4:	eb0011d6 	bl	1d244 <CLogger::Get()>
   18ae8:	e1dd20be 	ldrh	r2, [sp, #14]
   18aec:	e59f33c0 	ldr	r3, [pc, #960]	; 18eb4 <CLAN7800Device::Configure()+0x458>
   18af0:	e58d2000 	str	r2, [sp]
   18af4:	e59f13bc 	ldr	r1, [pc, #956]	; 18eb8 <CLAN7800Device::Configure()+0x45c>
   18af8:	e3a02001 	mov	r2, #1
   18afc:	eb001379 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18b00:	e3a06000 	mov	r6, #0
   18b04:	e1a00006 	mov	r0, r6
   18b08:	e28dd014 	add	sp, sp, #20
   18b0c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   18b10:	e1d430d2 	ldrsb	r3, [r4, #2]
   18b14:	e3530000 	cmp	r3, #0
   18b18:	ba000014 	blt	18b70 <CLAN7800Device::Configure()+0x114>
   18b1c:	e5953014 	ldr	r3, [r5, #20]
   18b20:	e1a00005 	mov	r0, r5
   18b24:	e3530000 	cmp	r3, #0
   18b28:	1a000031 	bne	18bf4 <CLAN7800Device::Configure()+0x198>
   18b2c:	ebfff0be 	bl	14e2c <CUSBFunction::GetDevice() const>
   18b30:	e1a09000 	mov	r9, r0
   18b34:	e1a00007 	mov	r0, r7
   18b38:	eb002893 	bl	22d8c <operator new(unsigned int)>
   18b3c:	e1a08000 	mov	r8, r0
   18b40:	e1a02004 	mov	r2, r4
   18b44:	e1a01009 	mov	r1, r9
   18b48:	ebffd6d1 	bl	e694 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   18b4c:	e5858014 	str	r8, [r5, #20]
   18b50:	eaffffce 	b	18a90 <CLAN7800Device::Configure()+0x34>
   18b54:	e3a06000 	mov	r6, #0
   18b58:	e1a00005 	mov	r0, r5
   18b5c:	e59f1354 	ldr	r1, [pc, #852]	; 18eb8 <CLAN7800Device::Configure()+0x45c>
   18b60:	ebfff127 	bl	15004 <CUSBFunction::ConfigurationError(char const*) const>
   18b64:	e1a00006 	mov	r0, r6
   18b68:	e28dd014 	add	sp, sp, #20
   18b6c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   18b70:	e5953010 	ldr	r3, [r5, #16]
   18b74:	e1a00005 	mov	r0, r5
   18b78:	e3530000 	cmp	r3, #0
   18b7c:	1a00001c 	bne	18bf4 <CLAN7800Device::Configure()+0x198>
   18b80:	ebfff0a9 	bl	14e2c <CUSBFunction::GetDevice() const>
   18b84:	e1a09000 	mov	r9, r0
   18b88:	e1a00007 	mov	r0, r7
   18b8c:	eb00287e 	bl	22d8c <operator new(unsigned int)>
   18b90:	e1a08000 	mov	r8, r0
   18b94:	e1a02004 	mov	r2, r4
   18b98:	e1a01009 	mov	r1, r9
   18b9c:	ebffd6bc 	bl	e694 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   18ba0:	e5858010 	str	r8, [r5, #16]
   18ba4:	eaffffb9 	b	18a90 <CLAN7800Device::Configure()+0x34>
   18ba8:	e1dd30be 	ldrh	r3, [sp, #14]
   18bac:	e3530b1e 	cmp	r3, #30720	; 0x7800
   18bb0:	1affffcb 	bne	18ae4 <CLAN7800Device::Configure()+0x88>
   18bb4:	e3e03000 	mvn	r3, #0
   18bb8:	e3a02002 	mov	r2, #2
   18bbc:	e3a01010 	mov	r1, #16
   18bc0:	e1a00005 	mov	r0, r5
   18bc4:	ebffff48 	bl	188ec <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   18bc8:	e3500000 	cmp	r0, #0
   18bcc:	1a000016 	bne	18c2c <CLAN7800Device::Configure()+0x1d0>
   18bd0:	e3a06000 	mov	r6, #0
   18bd4:	eb00119a 	bl	1d244 <CLogger::Get()>
   18bd8:	e59f32dc 	ldr	r3, [pc, #732]	; 18ebc <CLAN7800Device::Configure()+0x460>
   18bdc:	e3a02001 	mov	r2, #1
   18be0:	e59f12d0 	ldr	r1, [pc, #720]	; 18eb8 <CLAN7800Device::Configure()+0x45c>
   18be4:	eb00133f 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18be8:	e1a00006 	mov	r0, r6
   18bec:	e28dd014 	add	sp, sp, #20
   18bf0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   18bf4:	e3a06000 	mov	r6, #0
   18bf8:	e59f12b8 	ldr	r1, [pc, #696]	; 18eb8 <CLAN7800Device::Configure()+0x45c>
   18bfc:	ebfff100 	bl	15004 <CUSBFunction::ConfigurationError(char const*) const>
   18c00:	e1a00006 	mov	r0, r6
   18c04:	e28dd014 	add	sp, sp, #20
   18c08:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   18c0c:	eb00118c 	bl	1d244 <CLogger::Get()>
   18c10:	e59f32a8 	ldr	r3, [pc, #680]	; 18ec0 <CLAN7800Device::Configure()+0x464>
   18c14:	e3a02001 	mov	r2, #1
   18c18:	e59f1298 	ldr	r1, [pc, #664]	; 18eb8 <CLAN7800Device::Configure()+0x45c>
   18c1c:	eb001331 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18c20:	e1a00006 	mov	r0, r6
   18c24:	e28dd014 	add	sp, sp, #20
   18c28:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   18c2c:	e3a01064 	mov	r1, #100	; 0x64
   18c30:	e3a02ffa 	mov	r2, #1000	; 0x3e8
   18c34:	e58d1004 	str	r1, [sp, #4]
   18c38:	e58d2000 	str	r2, [sp]
   18c3c:	e1a03004 	mov	r3, r4
   18c40:	e3a02002 	mov	r2, #2
   18c44:	e3a01010 	mov	r1, #16
   18c48:	e1a00005 	mov	r0, r5
   18c4c:	ebfffe26 	bl	184ec <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   18c50:	e3500000 	cmp	r0, #0
   18c54:	0affffdd 	beq	18bd0 <CLAN7800Device::Configure()+0x174>
   18c58:	e1a00005 	mov	r0, r5
   18c5c:	ebffff36 	bl	1893c <CLAN7800Device::InitMACAddress()>
   18c60:	e2506000 	subs	r6, r0, #0
   18c64:	0a000052 	beq	18db4 <CLAN7800Device::Configure()+0x358>
   18c68:	e3a02018 	mov	r2, #24
   18c6c:	e3a01090 	mov	r1, #144	; 0x90
   18c70:	e1a00005 	mov	r0, r5
   18c74:	ebfffdd3 	bl	183c8 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   18c78:	e3500000 	cmp	r0, #0
   18c7c:	0affff9f 	beq	18b00 <CLAN7800Device::Configure()+0xa4>
   18c80:	e3a02b02 	mov	r2, #2048	; 0x800
   18c84:	e3a01094 	mov	r1, #148	; 0x94
   18c88:	e1a00005 	mov	r0, r5
   18c8c:	ebfffdcd 	bl	183c8 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   18c90:	e3500000 	cmp	r0, #0
   18c94:	0affff99 	beq	18b00 <CLAN7800Device::Configure()+0xa4>
   18c98:	e3e03010 	mvn	r3, #16
   18c9c:	e3a02603 	mov	r2, #3145728	; 0x300000
   18ca0:	e3a01010 	mov	r1, #16
   18ca4:	e1a00005 	mov	r0, r5
   18ca8:	ebffff0f 	bl	188ec <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   18cac:	e3500000 	cmp	r0, #0
   18cb0:	0affff92 	beq	18b00 <CLAN7800Device::Configure()+0xa4>
   18cb4:	e3e03040 	mvn	r3, #64	; 0x40
   18cb8:	e3a02020 	mov	r2, #32
   18cbc:	e3a01080 	mov	r1, #128	; 0x80
   18cc0:	e1a00005 	mov	r0, r5
   18cc4:	ebffff08 	bl	188ec <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   18cc8:	e3500000 	cmp	r0, #0
   18ccc:	0affff8b 	beq	18b00 <CLAN7800Device::Configure()+0xa4>
   18cd0:	e3a02017 	mov	r2, #23
   18cd4:	e3a010c8 	mov	r1, #200	; 0xc8
   18cd8:	e1a00005 	mov	r0, r5
   18cdc:	ebfffdb9 	bl	183c8 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   18ce0:	e3500000 	cmp	r0, #0
   18ce4:	0affff85 	beq	18b00 <CLAN7800Device::Configure()+0xa4>
   18ce8:	e3a02017 	mov	r2, #23
   18cec:	e3a010cc 	mov	r1, #204	; 0xcc
   18cf0:	e1a00005 	mov	r0, r5
   18cf4:	ebfffdb3 	bl	183c8 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   18cf8:	e3500000 	cmp	r0, #0
   18cfc:	0affff7f 	beq	18b00 <CLAN7800Device::Configure()+0xa4>
   18d00:	e3a02000 	mov	r2, #0
   18d04:	e3a01098 	mov	r1, #152	; 0x98
   18d08:	e1a00005 	mov	r0, r5
   18d0c:	ebfffdad 	bl	183c8 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   18d10:	e3500000 	cmp	r0, #0
   18d14:	0affff79 	beq	18b00 <CLAN7800Device::Configure()+0xa4>
   18d18:	e3e02000 	mvn	r2, #0
   18d1c:	e3a0100c 	mov	r1, #12
   18d20:	e1a00005 	mov	r0, r5
   18d24:	ebfffda7 	bl	183c8 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   18d28:	e3500000 	cmp	r0, #0
   18d2c:	0affff73 	beq	18b00 <CLAN7800Device::Configure()+0xa4>
   18d30:	e3a02000 	mov	r2, #0
   18d34:	e3a01f43 	mov	r1, #268	; 0x10c
   18d38:	e1a00005 	mov	r0, r5
   18d3c:	ebfffda1 	bl	183c8 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   18d40:	e3500000 	cmp	r0, #0
   18d44:	0affff6d 	beq	18b00 <CLAN7800Device::Configure()+0xa4>
   18d48:	e3a02000 	mov	r2, #0
   18d4c:	e3a010d0 	mov	r1, #208	; 0xd0
   18d50:	e1a00005 	mov	r0, r5
   18d54:	ebfffd9b 	bl	183c8 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   18d58:	e3500000 	cmp	r0, #0
   18d5c:	0affff67 	beq	18b00 <CLAN7800Device::Configure()+0xa4>
   18d60:	e3e03000 	mvn	r3, #0
   18d64:	e59f2158 	ldr	r2, [pc, #344]	; 18ec4 <CLAN7800Device::Configure()+0x468>
   18d68:	e3a010b0 	mov	r1, #176	; 0xb0
   18d6c:	e1a00005 	mov	r0, r5
   18d70:	ebfffedd 	bl	188ec <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   18d74:	e3500000 	cmp	r0, #0
   18d78:	0affff60 	beq	18b00 <CLAN7800Device::Configure()+0xa4>
   18d7c:	e3e03000 	mvn	r3, #0
   18d80:	e3a02010 	mov	r2, #16
   18d84:	e3a01014 	mov	r1, #20
   18d88:	e1a00005 	mov	r0, r5
   18d8c:	ebfffed6 	bl	188ec <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   18d90:	e3500000 	cmp	r0, #0
   18d94:	1a00000c 	bne	18dcc <CLAN7800Device::Configure()+0x370>
   18d98:	eb001129 	bl	1d244 <CLogger::Get()>
   18d9c:	e59f3124 	ldr	r3, [pc, #292]	; 18ec8 <CLAN7800Device::Configure()+0x46c>
   18da0:	e3a02001 	mov	r2, #1
   18da4:	e59f110c 	ldr	r1, [pc, #268]	; 18eb8 <CLAN7800Device::Configure()+0x45c>
   18da8:	eb0012ce 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18dac:	e3a06000 	mov	r6, #0
   18db0:	eaffff53 	b	18b04 <CLAN7800Device::Configure()+0xa8>
   18db4:	eb001122 	bl	1d244 <CLogger::Get()>
   18db8:	e59f310c 	ldr	r3, [pc, #268]	; 18ecc <CLAN7800Device::Configure()+0x470>
   18dbc:	e3a02001 	mov	r2, #1
   18dc0:	e59f10f0 	ldr	r1, [pc, #240]	; 18eb8 <CLAN7800Device::Configure()+0x45c>
   18dc4:	eb0012c7 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18dc8:	eaffff4d 	b	18b04 <CLAN7800Device::Configure()+0xa8>
   18dcc:	e3a02ffa 	mov	r2, #1000	; 0x3e8
   18dd0:	e3a03064 	mov	r3, #100	; 0x64
   18dd4:	e3a01014 	mov	r1, #20
   18dd8:	e88d000c 	stm	sp, {r2, r3}
   18ddc:	e1a00005 	mov	r0, r5
   18de0:	e3a03080 	mov	r3, #128	; 0x80
   18de4:	e3a02090 	mov	r2, #144	; 0x90
   18de8:	ebfffdbf 	bl	184ec <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   18dec:	e3500000 	cmp	r0, #0
   18df0:	0affffe8 	beq	18d98 <CLAN7800Device::Configure()+0x33c>
   18df4:	e3e03000 	mvn	r3, #0
   18df8:	e3a02b06 	mov	r2, #6144	; 0x1800
   18dfc:	e3a01c01 	mov	r1, #256	; 0x100
   18e00:	e1a00005 	mov	r0, r5
   18e04:	ebfffeb8 	bl	188ec <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   18e08:	e3500000 	cmp	r0, #0
   18e0c:	0affff3b 	beq	18b00 <CLAN7800Device::Configure()+0xa4>
   18e10:	e3e03000 	mvn	r3, #0
   18e14:	e3a02001 	mov	r2, #1
   18e18:	e3a01f42 	mov	r1, #264	; 0x108
   18e1c:	e1a00005 	mov	r0, r5
   18e20:	ebfffeb1 	bl	188ec <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   18e24:	e3500000 	cmp	r0, #0
   18e28:	0affff34 	beq	18b00 <CLAN7800Device::Configure()+0xa4>
   18e2c:	e3e03000 	mvn	r3, #0
   18e30:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
   18e34:	e3a010c4 	mov	r1, #196	; 0xc4
   18e38:	e1a00005 	mov	r0, r5
   18e3c:	ebfffeaa 	bl	188ec <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   18e40:	e3500000 	cmp	r0, #0
   18e44:	0affff2d 	beq	18b00 <CLAN7800Device::Configure()+0xa4>
   18e48:	e59f3080 	ldr	r3, [pc, #128]	; 18ed0 <CLAN7800Device::Configure()+0x474>
   18e4c:	e59f2080 	ldr	r2, [pc, #128]	; 18ed4 <CLAN7800Device::Configure()+0x478>
   18e50:	e3a01f41 	mov	r1, #260	; 0x104
   18e54:	e1a00005 	mov	r0, r5
   18e58:	ebfffea3 	bl	188ec <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   18e5c:	e3500000 	cmp	r0, #0
   18e60:	0affff26 	beq	18b00 <CLAN7800Device::Configure()+0xa4>
   18e64:	e3e03000 	mvn	r3, #0
   18e68:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
   18e6c:	e3a010c0 	mov	r1, #192	; 0xc0
   18e70:	e1a00005 	mov	r0, r5
   18e74:	ebfffe9c 	bl	188ec <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   18e78:	e3500000 	cmp	r0, #0
   18e7c:	0affff1f 	beq	18b00 <CLAN7800Device::Configure()+0xa4>
   18e80:	e1a00005 	mov	r0, r5
   18e84:	ebfffe7e 	bl	18884 <CLAN7800Device::InitPHY()>
   18e88:	e2506000 	subs	r6, r0, #0
   18e8c:	0a000002 	beq	18e9c <CLAN7800Device::Configure()+0x440>
   18e90:	e1a00005 	mov	r0, r5
   18e94:	eb0000dd 	bl	19210 <CNetDevice::AddNetDevice()>
   18e98:	eaffff19 	b	18b04 <CLAN7800Device::Configure()+0xa8>
   18e9c:	eb0010e8 	bl	1d244 <CLogger::Get()>
   18ea0:	e59f3030 	ldr	r3, [pc, #48]	; 18ed8 <CLAN7800Device::Configure()+0x47c>
   18ea4:	e3a02001 	mov	r2, #1
   18ea8:	e59f1008 	ldr	r1, [pc, #8]	; 18eb8 <CLAN7800Device::Configure()+0x45c>
   18eac:	eb00128d 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18eb0:	eaffff13 	b	18b04 <CLAN7800Device::Configure()+0xa8>
   18eb4:	00026db0 	.word	0x00026db0
   18eb8:	00026cf0 	.word	0x00026cf0
   18ebc:	00026d78 	.word	0x00026d78
   18ec0:	00025834 	.word	0x00025834
   18ec4:	00000402 	.word	0x00000402
   18ec8:	00026dc8 	.word	0x00026dc8
   18ecc:	00026d88 	.word	0x00026d88
   18ed0:	c000ffff 	.word	0xc000ffff
   18ed4:	05ee0001 	.word	0x05ee0001
   18ed8:	00026da0 	.word	0x00026da0

00018edc <CMACAddress::CMACAddress()>:
   18edc:	e3a02000 	mov	r2, #0
   18ee0:	e5c02000 	strb	r2, [r0]
   18ee4:	e12fff1e 	bx	lr

00018ee8 <CMACAddress::~CMACAddress()>:
   18ee8:	e12fff1e 	bx	lr

00018eec <CMACAddress::operator==(CMACAddress const&) const>:
   18eec:	e5d03000 	ldrb	r3, [r0]
   18ef0:	e92d4070 	push	{r4, r5, r6, lr}
   18ef4:	e3530000 	cmp	r3, #0
   18ef8:	e1a04000 	mov	r4, r0
   18efc:	e1a05001 	mov	r5, r1
   18f00:	0a00000e 	beq	18f40 <CMACAddress::operator==(CMACAddress const&) const+0x54>
   18f04:	e5d53000 	ldrb	r3, [r5]
   18f08:	e2844001 	add	r4, r4, #1
   18f0c:	e3530000 	cmp	r3, #0
   18f10:	1a000003 	bne	18f24 <CMACAddress::operator==(CMACAddress const&) const+0x38>
   18f14:	e3a02041 	mov	r2, #65	; 0x41
   18f18:	e59f1034 	ldr	r1, [pc, #52]	; 18f54 <CMACAddress::operator==(CMACAddress const&) const+0x68>
   18f1c:	e59f0034 	ldr	r0, [pc, #52]	; 18f58 <CMACAddress::operator==(CMACAddress const&) const+0x6c>
   18f20:	eb0006d4 	bl	1aa78 <assertion_failed>
   18f24:	e2851001 	add	r1, r5, #1
   18f28:	e1a00004 	mov	r0, r4
   18f2c:	e3a02006 	mov	r2, #6
   18f30:	eb002330 	bl	21bf8 <memcmp>
   18f34:	e16f0f10 	clz	r0, r0
   18f38:	e1a002a0 	lsr	r0, r0, #5
   18f3c:	e8bd8070 	pop	{r4, r5, r6, pc}
   18f40:	e3a02029 	mov	r2, #41	; 0x29
   18f44:	e59f1008 	ldr	r1, [pc, #8]	; 18f54 <CMACAddress::operator==(CMACAddress const&) const+0x68>
   18f48:	e59f0008 	ldr	r0, [pc, #8]	; 18f58 <CMACAddress::operator==(CMACAddress const&) const+0x6c>
   18f4c:	eb0006c9 	bl	1aa78 <assertion_failed>
   18f50:	eaffffeb 	b	18f04 <CMACAddress::operator==(CMACAddress const&) const+0x18>
   18f54:	00026ddc 	.word	0x00026ddc
   18f58:	00024ce4 	.word	0x00024ce4

00018f5c <CMACAddress::operator!=(CMACAddress const&) const>:
   18f5c:	e92d4010 	push	{r4, lr}
   18f60:	ebffffe1 	bl	18eec <CMACAddress::operator==(CMACAddress const&) const>
   18f64:	e2200001 	eor	r0, r0, #1
   18f68:	e6ef0070 	uxtb	r0, r0
   18f6c:	e8bd8010 	pop	{r4, pc}

00018f70 <CMACAddress::Set(unsigned char const*)>:
   18f70:	e92d4070 	push	{r4, r5, r6, lr}
   18f74:	e2515000 	subs	r5, r1, #0
   18f78:	e1a04000 	mov	r4, r0
   18f7c:	0a000006 	beq	18f9c <CMACAddress::Set(unsigned char const*)+0x2c>
   18f80:	e1a01005 	mov	r1, r5
   18f84:	e3a02006 	mov	r2, #6
   18f88:	e2840001 	add	r0, r4, #1
   18f8c:	eb002482 	bl	2219c <memcpy>
   18f90:	e3a03001 	mov	r3, #1
   18f94:	e5c43000 	strb	r3, [r4]
   18f98:	e8bd8070 	pop	{r4, r5, r6, pc}
   18f9c:	e3a02034 	mov	r2, #52	; 0x34
   18fa0:	e59f1008 	ldr	r1, [pc, #8]	; 18fb0 <CMACAddress::Set(unsigned char const*)+0x40>
   18fa4:	e59f0008 	ldr	r0, [pc, #8]	; 18fb4 <CMACAddress::Set(unsigned char const*)+0x44>
   18fa8:	eb0006b2 	bl	1aa78 <assertion_failed>
   18fac:	eafffff3 	b	18f80 <CMACAddress::Set(unsigned char const*)+0x10>
   18fb0:	00026ddc 	.word	0x00026ddc
   18fb4:	00026dec 	.word	0x00026dec

00018fb8 <CMACAddress::CMACAddress(unsigned char const*)>:
   18fb8:	e92d4010 	push	{r4, lr}
   18fbc:	e1a04000 	mov	r4, r0
   18fc0:	ebffffea 	bl	18f70 <CMACAddress::Set(unsigned char const*)>
   18fc4:	e1a00004 	mov	r0, r4
   18fc8:	e8bd8010 	pop	{r4, pc}

00018fcc <CMACAddress::SetBroadcast()>:
   18fcc:	e92d4010 	push	{r4, lr}
   18fd0:	e3a02006 	mov	r2, #6
   18fd4:	e1a04000 	mov	r4, r0
   18fd8:	e3a010ff 	mov	r1, #255	; 0xff
   18fdc:	e2800001 	add	r0, r0, #1
   18fe0:	eb0022fb 	bl	21bd4 <memset>
   18fe4:	e3a03001 	mov	r3, #1
   18fe8:	e5c43000 	strb	r3, [r4]
   18fec:	e8bd8010 	pop	{r4, pc}

00018ff0 <CMACAddress::Get() const>:
   18ff0:	e5d03000 	ldrb	r3, [r0]
   18ff4:	e92d4010 	push	{r4, lr}
   18ff8:	e3530000 	cmp	r3, #0
   18ffc:	e1a04000 	mov	r4, r0
   19000:	1a000003 	bne	19014 <CMACAddress::Get() const+0x24>
   19004:	e3a02041 	mov	r2, #65	; 0x41
   19008:	e59f100c 	ldr	r1, [pc, #12]	; 1901c <CMACAddress::Get() const+0x2c>
   1900c:	e59f000c 	ldr	r0, [pc, #12]	; 19020 <CMACAddress::Get() const+0x30>
   19010:	eb000698 	bl	1aa78 <assertion_failed>
   19014:	e2840001 	add	r0, r4, #1
   19018:	e8bd8010 	pop	{r4, pc}
   1901c:	00026ddc 	.word	0x00026ddc
   19020:	00024ce4 	.word	0x00024ce4

00019024 <CMACAddress::CopyTo(unsigned char*) const>:
   19024:	e5d03000 	ldrb	r3, [r0]
   19028:	e92d4070 	push	{r4, r5, r6, lr}
   1902c:	e3530000 	cmp	r3, #0
   19030:	e1a05000 	mov	r5, r0
   19034:	e1a04001 	mov	r4, r1
   19038:	0a000006 	beq	19058 <CMACAddress::CopyTo(unsigned char*) const+0x34>
   1903c:	e3540000 	cmp	r4, #0
   19040:	0a00000a 	beq	19070 <CMACAddress::CopyTo(unsigned char*) const+0x4c>
   19044:	e2851001 	add	r1, r5, #1
   19048:	e1a00004 	mov	r0, r4
   1904c:	e8bd4070 	pop	{r4, r5, r6, lr}
   19050:	e3a02006 	mov	r2, #6
   19054:	ea002450 	b	2219c <memcpy>
   19058:	e3a02047 	mov	r2, #71	; 0x47
   1905c:	e59f1020 	ldr	r1, [pc, #32]	; 19084 <CMACAddress::CopyTo(unsigned char*) const+0x60>
   19060:	e59f0020 	ldr	r0, [pc, #32]	; 19088 <CMACAddress::CopyTo(unsigned char*) const+0x64>
   19064:	eb000683 	bl	1aa78 <assertion_failed>
   19068:	e3540000 	cmp	r4, #0
   1906c:	1afffff4 	bne	19044 <CMACAddress::CopyTo(unsigned char*) const+0x20>
   19070:	e3a02048 	mov	r2, #72	; 0x48
   19074:	e59f1008 	ldr	r1, [pc, #8]	; 19084 <CMACAddress::CopyTo(unsigned char*) const+0x60>
   19078:	e59f000c 	ldr	r0, [pc, #12]	; 1908c <CMACAddress::CopyTo(unsigned char*) const+0x68>
   1907c:	eb00067d 	bl	1aa78 <assertion_failed>
   19080:	eaffffef 	b	19044 <CMACAddress::CopyTo(unsigned char*) const+0x20>
   19084:	00026ddc 	.word	0x00026ddc
   19088:	00024ce4 	.word	0x00024ce4
   1908c:	00025930 	.word	0x00025930

00019090 <CMACAddress::IsBroadcast() const>:
   19090:	e5d03000 	ldrb	r3, [r0]
   19094:	e92d4010 	push	{r4, lr}
   19098:	e3530000 	cmp	r3, #0
   1909c:	e1a04000 	mov	r4, r0
   190a0:	0a000008 	beq	190c8 <CMACAddress::IsBroadcast() const+0x38>
   190a4:	e2843001 	add	r3, r4, #1
   190a8:	e2840007 	add	r0, r4, #7
   190ac:	e4d32001 	ldrb	r2, [r3], #1
   190b0:	e35200ff 	cmp	r2, #255	; 0xff
   190b4:	1a000008 	bne	190dc <CMACAddress::IsBroadcast() const+0x4c>
   190b8:	e1530000 	cmp	r3, r0
   190bc:	1afffffa 	bne	190ac <CMACAddress::IsBroadcast() const+0x1c>
   190c0:	e3a00001 	mov	r0, #1
   190c4:	e8bd8010 	pop	{r4, pc}
   190c8:	e3a0204e 	mov	r2, #78	; 0x4e
   190cc:	e59f1010 	ldr	r1, [pc, #16]	; 190e4 <CMACAddress::IsBroadcast() const+0x54>
   190d0:	e59f0010 	ldr	r0, [pc, #16]	; 190e8 <CMACAddress::IsBroadcast() const+0x58>
   190d4:	eb000667 	bl	1aa78 <assertion_failed>
   190d8:	eafffff1 	b	190a4 <CMACAddress::IsBroadcast() const+0x14>
   190dc:	e3a00000 	mov	r0, #0
   190e0:	e8bd8010 	pop	{r4, pc}
   190e4:	00026ddc 	.word	0x00026ddc
   190e8:	00024ce4 	.word	0x00024ce4

000190ec <CMACAddress::GetSize() const>:
   190ec:	e3a00006 	mov	r0, #6
   190f0:	e12fff1e 	bx	lr

000190f4 <CMACAddress::Format(CString*) const>:
   190f4:	e92d4070 	push	{r4, r5, r6, lr}
   190f8:	e5d03000 	ldrb	r3, [r0]
   190fc:	e24dd010 	sub	sp, sp, #16
   19100:	e3530000 	cmp	r3, #0
   19104:	e1a04000 	mov	r4, r0
   19108:	e1a05001 	mov	r5, r1
   1910c:	0a00000e 	beq	1914c <CMACAddress::Format(CString*) const+0x58>
   19110:	e3550000 	cmp	r5, #0
   19114:	0a000012 	beq	19164 <CMACAddress::Format(CString*) const+0x70>
   19118:	e5d41003 	ldrb	r1, [r4, #3]
   1911c:	e5d46006 	ldrb	r6, [r4, #6]
   19120:	e5d4e005 	ldrb	lr, [r4, #5]
   19124:	e5d4c004 	ldrb	ip, [r4, #4]
   19128:	e5d43002 	ldrb	r3, [r4, #2]
   1912c:	e5d42001 	ldrb	r2, [r4, #1]
   19130:	e1a00005 	mov	r0, r5
   19134:	e88d5002 	stm	sp, {r1, ip, lr}
   19138:	e58d600c 	str	r6, [sp, #12]
   1913c:	e59f1034 	ldr	r1, [pc, #52]	; 19178 <CMACAddress::Format(CString*) const+0x84>
   19140:	eb001eeb 	bl	20cf4 <CString::Format(char const*, ...)>
   19144:	e28dd010 	add	sp, sp, #16
   19148:	e8bd8070 	pop	{r4, r5, r6, pc}
   1914c:	e3a02062 	mov	r2, #98	; 0x62
   19150:	e59f1024 	ldr	r1, [pc, #36]	; 1917c <CMACAddress::Format(CString*) const+0x88>
   19154:	e59f0024 	ldr	r0, [pc, #36]	; 19180 <CMACAddress::Format(CString*) const+0x8c>
   19158:	eb000646 	bl	1aa78 <assertion_failed>
   1915c:	e3550000 	cmp	r5, #0
   19160:	1affffec 	bne	19118 <CMACAddress::Format(CString*) const+0x24>
   19164:	e3a02063 	mov	r2, #99	; 0x63
   19168:	e59f100c 	ldr	r1, [pc, #12]	; 1917c <CMACAddress::Format(CString*) const+0x88>
   1916c:	e59f0010 	ldr	r0, [pc, #16]	; 19184 <CMACAddress::Format(CString*) const+0x90>
   19170:	eb000640 	bl	1aa78 <assertion_failed>
   19174:	eaffffe7 	b	19118 <CMACAddress::Format(CString*) const+0x24>
   19178:	00026e0c 	.word	0x00026e0c
   1917c:	00026ddc 	.word	0x00026ddc
   19180:	00024ce4 	.word	0x00024ce4
   19184:	00026dfc 	.word	0x00026dfc

00019188 <CNetDevice::CNetDevice(CUSBFunction*)>:
   19188:	e92d4010 	push	{r4, lr}
   1918c:	e1a04000 	mov	r4, r0
   19190:	ebffeeb9 	bl	14c7c <CUSBFunction::CUSBFunction(CUSBFunction*)>
   19194:	e59f3008 	ldr	r3, [pc, #8]	; 191a4 <CNetDevice::CNetDevice(CUSBFunction*)+0x1c>
   19198:	e1a00004 	mov	r0, r4
   1919c:	e5843000 	str	r3, [r4]
   191a0:	e8bd8010 	pop	{r4, pc}
   191a4:	00026e34 	.word	0x00026e34

000191a8 <CNetDevice::~CNetDevice()>:
   191a8:	e92d4010 	push	{r4, lr}
   191ac:	e1a04000 	mov	r4, r0
   191b0:	e59f300c 	ldr	r3, [pc, #12]	; 191c4 <CNetDevice::~CNetDevice()+0x1c>
   191b4:	e5803000 	str	r3, [r0]
   191b8:	ebffee61 	bl	14b44 <CUSBFunction::~CUSBFunction()>
   191bc:	e1a00004 	mov	r0, r4
   191c0:	e8bd8010 	pop	{r4, pc}
   191c4:	00026e34 	.word	0x00026e34

000191c8 <CNetDevice::~CNetDevice()>:
   191c8:	e92d4010 	push	{r4, lr}
   191cc:	e1a04000 	mov	r4, r0
   191d0:	e59f3018 	ldr	r3, [pc, #24]	; 191f0 <CNetDevice::~CNetDevice()+0x28>
   191d4:	e5803000 	str	r3, [r0]
   191d8:	ebffee59 	bl	14b44 <CUSBFunction::~CUSBFunction()>
   191dc:	e1a00004 	mov	r0, r4
   191e0:	e3a01010 	mov	r1, #16
   191e4:	eb0026ec 	bl	22d9c <operator delete(void*, unsigned int)>
   191e8:	e1a00004 	mov	r0, r4
   191ec:	e8bd8010 	pop	{r4, pc}
   191f0:	00026e34 	.word	0x00026e34

000191f4 <CNetDevice::GetSpeedString(TNetDeviceSpeed)>:
   191f4:	e3500005 	cmp	r0, #5
   191f8:	d59f3008 	ldrle	r3, [pc, #8]	; 19208 <CNetDevice::GetSpeedString(TNetDeviceSpeed)+0x14>
   191fc:	d7930100 	ldrle	r0, [r3, r0, lsl #2]
   19200:	c59f0004 	ldrgt	r0, [pc, #4]	; 1920c <CNetDevice::GetSpeedString(TNetDeviceSpeed)+0x18>
   19204:	e12fff1e 	bx	lr
   19208:	0002b6ec 	.word	0x0002b6ec
   1920c:	000293d0 	.word	0x000293d0

00019210 <CNetDevice::AddNetDevice()>:
   19210:	e92d4030 	push	{r4, r5, lr}
   19214:	e24dd014 	sub	sp, sp, #20
   19218:	e1a05000 	mov	r5, r0
   1921c:	e1a0000d 	mov	r0, sp
   19220:	eb001ac5 	bl	1fd3c <CString::CString()>
   19224:	e59f3048 	ldr	r3, [pc, #72]	; 19274 <CNetDevice::AddNetDevice()+0x64>
   19228:	e59f1048 	ldr	r1, [pc, #72]	; 19278 <CNetDevice::AddNetDevice()+0x68>
   1922c:	e5932000 	ldr	r2, [r3]
   19230:	e1a0000d 	mov	r0, sp
   19234:	e282c001 	add	ip, r2, #1
   19238:	e583c000 	str	ip, [r3]
   1923c:	eb001eac 	bl	20cf4 <CString::Format(char const*, ...)>
   19240:	eb000905 	bl	1b65c <CDeviceNameService::Get()>
   19244:	e1a04000 	mov	r4, r0
   19248:	e1a0000d 	mov	r0, sp
   1924c:	eb001ad0 	bl	1fd94 <CString::operator char const*() const>
   19250:	e1a02005 	mov	r2, r5
   19254:	e1a01000 	mov	r1, r0
   19258:	e3a03000 	mov	r3, #0
   1925c:	e1a00004 	mov	r0, r4
   19260:	eb00083d 	bl	1b35c <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   19264:	e1a0000d 	mov	r0, sp
   19268:	eb001a80 	bl	1fc70 <CString::~CString()>
   1926c:	e28dd014 	add	sp, sp, #20
   19270:	e8bd8030 	pop	{r4, r5, pc}
   19274:	0002b94c 	.word	0x0002b94c
   19278:	00026e64 	.word	0x00026e64

0001927c <CUSBGamePadDevice::GetInitialState()>:
   1927c:	e2800024 	add	r0, r0, #36	; 0x24
   19280:	e12fff1e 	bx	lr

00019284 <CUSBGamePadDevice::ReportHandler(unsigned char const*, unsigned int)>:
   19284:	e3510000 	cmp	r1, #0
   19288:	012fff1e 	bxeq	lr
   1928c:	e280cf4a 	add	ip, r0, #296	; 0x128
   19290:	e1dcc0b0 	ldrh	ip, [ip]
   19294:	e92d4070 	push	{r4, r5, r6, lr}
   19298:	e15c0002 	cmp	ip, r2
   1929c:	e1a04000 	mov	r4, r0
   192a0:	18bd8070 	popne	{r4, r5, r6, pc}
   192a4:	e5902124 	ldr	r2, [r0, #292]	; 0x124
   192a8:	e3520000 	cmp	r2, #0
   192ac:	08bd8070 	popeq	{r4, r5, r6, pc}
   192b0:	e1a05000 	mov	r5, r0
   192b4:	e4953024 	ldr	r3, [r5], #36	; 0x24
   192b8:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   192bc:	e12fff33 	blx	r3
   192c0:	e594012c 	ldr	r0, [r4, #300]	; 0x12c
   192c4:	e1a01005 	mov	r1, r5
   192c8:	e5943124 	ldr	r3, [r4, #292]	; 0x124
   192cc:	e2400001 	sub	r0, r0, #1
   192d0:	e8bd4070 	pop	{r4, r5, r6, lr}
   192d4:	e12fff13 	bx	r3

000192d8 <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))>:
   192d8:	e5903124 	ldr	r3, [r0, #292]	; 0x124
   192dc:	e92d4070 	push	{r4, r5, r6, lr}
   192e0:	e3530000 	cmp	r3, #0
   192e4:	e1a04000 	mov	r4, r0
   192e8:	e1a05001 	mov	r5, r1
   192ec:	0a000003 	beq	19300 <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))+0x28>
   192f0:	e3a0204b 	mov	r2, #75	; 0x4b
   192f4:	e59f1024 	ldr	r1, [pc, #36]	; 19320 <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))+0x48>
   192f8:	e59f0024 	ldr	r0, [pc, #36]	; 19324 <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))+0x4c>
   192fc:	eb0005dd 	bl	1aa78 <assertion_failed>
   19300:	e3550000 	cmp	r5, #0
   19304:	e5845124 	str	r5, [r4, #292]	; 0x124
   19308:	18bd8070 	popne	{r4, r5, r6, pc}
   1930c:	e3a0204d 	mov	r2, #77	; 0x4d
   19310:	e8bd4070 	pop	{r4, r5, r6, lr}
   19314:	e59f1004 	ldr	r1, [pc, #4]	; 19320 <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))+0x48>
   19318:	e59f0008 	ldr	r0, [pc, #8]	; 19328 <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))+0x50>
   1931c:	ea0005d5 	b	1aa78 <assertion_failed>
   19320:	00026f50 	.word	0x00026f50
   19324:	00026f60 	.word	0x00026f60
   19328:	00026f78 	.word	0x00026f78

0001932c <CUSBGamePadDevice::Configure()>:
   1932c:	e92d4030 	push	{r4, r5, lr}
   19330:	e2805f4a 	add	r5, r0, #296	; 0x128
   19334:	e1d510b0 	ldrh	r1, [r5]
   19338:	e24dd00c 	sub	sp, sp, #12
   1933c:	e3510000 	cmp	r1, #0
   19340:	e1a04000 	mov	r4, r0
   19344:	0a00001a 	beq	193b4 <CUSBGamePadDevice::Configure()+0x88>
   19348:	e1a00004 	mov	r0, r4
   1934c:	ebffe26e 	bl	11d0c <CUSBHIDDevice::Configure(unsigned int)>
   19350:	e2505000 	subs	r5, r0, #0
   19354:	0a00000e 	beq	19394 <CUSBGamePadDevice::Configure()+0x68>
   19358:	e59f206c 	ldr	r2, [pc, #108]	; 193cc <CUSBGamePadDevice::Configure()+0xa0>
   1935c:	e5923000 	ldr	r3, [r2]
   19360:	e584312c 	str	r3, [r4, #300]	; 0x12c
   19364:	e2833001 	add	r3, r3, #1
   19368:	e5823000 	str	r3, [r2]
   1936c:	eb0008ba 	bl	1b65c <CDeviceNameService::Get()>
   19370:	e3a03000 	mov	r3, #0
   19374:	e594212c 	ldr	r2, [r4, #300]	; 0x12c
   19378:	e59f1050 	ldr	r1, [pc, #80]	; 193d0 <CUSBGamePadDevice::Configure()+0xa4>
   1937c:	e58d3000 	str	r3, [sp]
   19380:	e1a03004 	mov	r3, r4
   19384:	eb0008c2 	bl	1b694 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   19388:	e1a00005 	mov	r0, r5
   1938c:	e28dd00c 	add	sp, sp, #12
   19390:	e8bd8030 	pop	{r4, r5, pc}
   19394:	eb000faa 	bl	1d244 <CLogger::Get()>
   19398:	e59f3034 	ldr	r3, [pc, #52]	; 193d4 <CUSBGamePadDevice::Configure()+0xa8>
   1939c:	e3a02001 	mov	r2, #1
   193a0:	e59f1030 	ldr	r1, [pc, #48]	; 193d8 <CUSBGamePadDevice::Configure()+0xac>
   193a4:	eb00114f 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   193a8:	e1a00005 	mov	r0, r5
   193ac:	e28dd00c 	add	sp, sp, #12
   193b0:	e8bd8030 	pop	{r4, r5, pc}
   193b4:	e59f1020 	ldr	r1, [pc, #32]	; 193dc <CUSBGamePadDevice::Configure()+0xb0>
   193b8:	e3a02035 	mov	r2, #53	; 0x35
   193bc:	e59f001c 	ldr	r0, [pc, #28]	; 193e0 <CUSBGamePadDevice::Configure()+0xb4>
   193c0:	eb0005ac 	bl	1aa78 <assertion_failed>
   193c4:	e1d510b0 	ldrh	r1, [r5]
   193c8:	eaffffde 	b	19348 <CUSBGamePadDevice::Configure()+0x1c>
   193cc:	0002b704 	.word	0x0002b704
   193d0:	00026f04 	.word	0x00026f04
   193d4:	00025d08 	.word	0x00025d08
   193d8:	00026efc 	.word	0x00026efc
   193dc:	00026f50 	.word	0x00026f50
   193e0:	00025fd4 	.word	0x00025fd4

000193e4 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>:
   193e4:	e92d4010 	push	{r4, lr}
   193e8:	e3a02000 	mov	r2, #0
   193ec:	e1a04000 	mov	r4, r0
   193f0:	ebffe206 	bl	11c10 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>
   193f4:	e3a03000 	mov	r3, #0
   193f8:	e59f1028 	ldr	r1, [pc, #40]	; 19428 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)+0x44>
   193fc:	e2842f4a 	add	r2, r4, #296	; 0x128
   19400:	e5841000 	str	r1, [r4]
   19404:	e5843124 	str	r3, [r4, #292]	; 0x124
   19408:	e1a01003 	mov	r1, r3
   1940c:	e1c230b0 	strh	r3, [r2]
   19410:	e2840024 	add	r0, r4, #36	; 0x24
   19414:	e584312c 	str	r3, [r4, #300]	; 0x12c
   19418:	e3a02c01 	mov	r2, #256	; 0x100
   1941c:	eb0021ec 	bl	21bd4 <memset>
   19420:	e1a00004 	mov	r0, r4
   19424:	e8bd8010 	pop	{r4, pc}
   19428:	00026f14 	.word	0x00026f14

0001942c <CUSBGamePadDevice::~CUSBGamePadDevice()>:
   1942c:	e92d4070 	push	{r4, r5, r6, lr}
   19430:	e3a06000 	mov	r6, #0
   19434:	e1a04000 	mov	r4, r0
   19438:	e59f502c 	ldr	r5, [pc, #44]	; 1946c <CUSBGamePadDevice::~CUSBGamePadDevice()+0x40>
   1943c:	e5806124 	str	r6, [r0, #292]	; 0x124
   19440:	e2853018 	add	r3, r5, #24
   19444:	e5803000 	str	r3, [r0]
   19448:	eb000883 	bl	1b65c <CDeviceNameService::Get()>
   1944c:	e1a03006 	mov	r3, r6
   19450:	e2851008 	add	r1, r5, #8
   19454:	e594212c 	ldr	r2, [r4, #300]	; 0x12c
   19458:	eb0008a7 	bl	1b6fc <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   1945c:	e1a00004 	mov	r0, r4
   19460:	ebffe1fe 	bl	11c60 <CUSBHIDDevice::~CUSBHIDDevice()>
   19464:	e1a00004 	mov	r0, r4
   19468:	e8bd8070 	pop	{r4, r5, r6, pc}
   1946c:	00026efc 	.word	0x00026efc

00019470 <CUSBGamePadDevice::~CUSBGamePadDevice()>:
   19470:	e92d4010 	push	{r4, lr}
   19474:	e1a04000 	mov	r4, r0
   19478:	ebffffeb 	bl	1942c <CUSBGamePadDevice::~CUSBGamePadDevice()>
   1947c:	e1a00004 	mov	r0, r4
   19480:	e3a01e13 	mov	r1, #304	; 0x130
   19484:	eb002644 	bl	22d9c <operator delete(void*, unsigned int)>
   19488:	e1a00004 	mov	r0, r4
   1948c:	e8bd8010 	pop	{r4, pc}

00019490 <CKeyboardBehaviour::CKeyboardBehaviour()>:
   19490:	e92d4010 	push	{r4, lr}
   19494:	e3a03000 	mov	r3, #0
   19498:	e1a04000 	mov	r4, r0
   1949c:	e2800014 	add	r0, r0, #20
   194a0:	e5843000 	str	r3, [r4]
   194a4:	e5843004 	str	r3, [r4, #4]
   194a8:	e5843008 	str	r3, [r4, #8]
   194ac:	e5c4300c 	strb	r3, [r4, #12]
   194b0:	e5c4300d 	strb	r3, [r4, #13]
   194b4:	e5843010 	str	r3, [r4, #16]
   194b8:	eb000197 	bl	19b1c <CKeyMap::CKeyMap()>
   194bc:	e1a00004 	mov	r0, r4
   194c0:	e8bd8010 	pop	{r4, pc}

000194c4 <CKeyboardBehaviour::~CKeyboardBehaviour()>:
   194c4:	e92d4010 	push	{r4, lr}
   194c8:	e3a03000 	mov	r3, #0
   194cc:	e1a04000 	mov	r4, r0
   194d0:	e2800014 	add	r0, r0, #20
   194d4:	e5843000 	str	r3, [r4]
   194d8:	e5843004 	str	r3, [r4, #4]
   194dc:	e5843008 	str	r3, [r4, #8]
   194e0:	eb0000c4 	bl	197f8 <CKeyMap::~CKeyMap()>
   194e4:	e1a00004 	mov	r0, r4
   194e8:	e8bd8010 	pop	{r4, pc}

000194ec <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))>:
   194ec:	e92d4070 	push	{r4, r5, r6, lr}
   194f0:	e2515000 	subs	r5, r1, #0
   194f4:	e1a04000 	mov	r4, r0
   194f8:	0a000001 	beq	19504 <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))+0x18>
   194fc:	e5845000 	str	r5, [r4]
   19500:	e8bd8070 	pop	{r4, r5, r6, pc}
   19504:	e3a0202f 	mov	r2, #47	; 0x2f
   19508:	e59f100c 	ldr	r1, [pc, #12]	; 1951c <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))+0x30>
   1950c:	e59f000c 	ldr	r0, [pc, #12]	; 19520 <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))+0x34>
   19510:	eb000558 	bl	1aa78 <assertion_failed>
   19514:	e5845000 	str	r5, [r4]
   19518:	e8bd8070 	pop	{r4, r5, r6, pc}
   1951c:	00026f90 	.word	0x00026f90
   19520:	00026fa8 	.word	0x00026fa8

00019524 <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))>:
   19524:	e92d4070 	push	{r4, r5, r6, lr}
   19528:	e2515000 	subs	r5, r1, #0
   1952c:	e1a04000 	mov	r4, r0
   19530:	0a000001 	beq	1953c <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))+0x18>
   19534:	e5845004 	str	r5, [r4, #4]
   19538:	e8bd8070 	pop	{r4, r5, r6, pc}
   1953c:	e3a02035 	mov	r2, #53	; 0x35
   19540:	e59f100c 	ldr	r1, [pc, #12]	; 19554 <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))+0x30>
   19544:	e59f000c 	ldr	r0, [pc, #12]	; 19558 <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))+0x34>
   19548:	eb00054a 	bl	1aa78 <assertion_failed>
   1954c:	e5845004 	str	r5, [r4, #4]
   19550:	e8bd8070 	pop	{r4, r5, r6, pc}
   19554:	00026f90 	.word	0x00026f90
   19558:	00026fc0 	.word	0x00026fc0

0001955c <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())>:
   1955c:	e92d4070 	push	{r4, r5, r6, lr}
   19560:	e2515000 	subs	r5, r1, #0
   19564:	e1a04000 	mov	r4, r0
   19568:	0a000001 	beq	19574 <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())+0x18>
   1956c:	e5845008 	str	r5, [r4, #8]
   19570:	e8bd8070 	pop	{r4, r5, r6, pc}
   19574:	e3a0203b 	mov	r2, #59	; 0x3b
   19578:	e59f100c 	ldr	r1, [pc, #12]	; 1958c <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())+0x30>
   1957c:	e59f000c 	ldr	r0, [pc, #12]	; 19590 <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())+0x34>
   19580:	eb00053c 	bl	1aa78 <assertion_failed>
   19584:	e5845008 	str	r5, [r4, #8]
   19588:	e8bd8070 	pop	{r4, r5, r6, pc}
   1958c:	00026f90 	.word	0x00026f90
   19590:	00026fdc 	.word	0x00026fdc

00019594 <CKeyboardBehaviour::GetLEDStatus() const>:
   19594:	e2800014 	add	r0, r0, #20
   19598:	ea00012d 	b	19a54 <CKeyMap::GetLEDStatus() const>

0001959c <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)>:
   1959c:	e92d4070 	push	{r4, r5, r6, lr}
   195a0:	e5d0600c 	ldrb	r6, [r0, #12]
   195a4:	e2805014 	add	r5, r0, #20
   195a8:	e24dd008 	sub	sp, sp, #8
   195ac:	e1a04000 	mov	r4, r0
   195b0:	e1a02006 	mov	r2, r6
   195b4:	e1a00005 	mov	r0, r5
   195b8:	eb0000b2 	bl	19888 <CKeyMap::Translate(unsigned char, unsigned char)>
   195bc:	e2403e13 	sub	r3, r0, #304	; 0x130
   195c0:	e2433003 	sub	r3, r3, #3
   195c4:	e353000f 	cmp	r3, #15
   195c8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   195cc:	ea00001d 	b	19648 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0xac>
   195d0:	00019628 	.word	0x00019628
   195d4:	00019628 	.word	0x00019628
   195d8:	00019628 	.word	0x00019628
   195dc:	00019610 	.word	0x00019610
   195e0:	00019610 	.word	0x00019610
   195e4:	00019610 	.word	0x00019610
   195e8:	00019610 	.word	0x00019610
   195ec:	00019610 	.word	0x00019610
   195f0:	00019610 	.word	0x00019610
   195f4:	00019610 	.word	0x00019610
   195f8:	00019610 	.word	0x00019610
   195fc:	00019610 	.word	0x00019610
   19600:	00019610 	.word	0x00019610
   19604:	00019610 	.word	0x00019610
   19608:	00019610 	.word	0x00019610
   1960c:	00019630 	.word	0x00019630
   19610:	e5943004 	ldr	r3, [r4, #4]
   19614:	e3530000 	cmp	r3, #0
   19618:	0a000002 	beq	19628 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x8c>
   1961c:	e2400f4d 	sub	r0, r0, #308	; 0x134
   19620:	e2400002 	sub	r0, r0, #2
   19624:	e12fff33 	blx	r3
   19628:	e28dd008 	add	sp, sp, #8
   1962c:	e8bd8070 	pop	{r4, r5, r6, pc}
   19630:	e5943008 	ldr	r3, [r4, #8]
   19634:	e3530000 	cmp	r3, #0
   19638:	0afffffa 	beq	19628 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x8c>
   1963c:	e12fff33 	blx	r3
   19640:	e28dd008 	add	sp, sp, #8
   19644:	e8bd8070 	pop	{r4, r5, r6, pc}
   19648:	e1a01000 	mov	r1, r0
   1964c:	e1a02006 	mov	r2, r6
   19650:	e1a00005 	mov	r0, r5
   19654:	e28d3004 	add	r3, sp, #4
   19658:	eb0000cd 	bl	19994 <CKeyMap::GetString(unsigned short, unsigned char, char*) const>
   1965c:	e3500000 	cmp	r0, #0
   19660:	0afffff0 	beq	19628 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x8c>
   19664:	e5943000 	ldr	r3, [r4]
   19668:	e3530000 	cmp	r3, #0
   1966c:	0affffed 	beq	19628 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x8c>
   19670:	e12fff33 	blx	r3
   19674:	e28dd008 	add	sp, sp, #8
   19678:	e8bd8070 	pop	{r4, r5, r6, pc}

0001967c <CKeyboardBehaviour::KeyPressed(unsigned char)>:
   1967c:	e241c080 	sub	ip, r1, #128	; 0x80
   19680:	e6ef307c 	uxtb	r3, ip
   19684:	e3530007 	cmp	r3, #7
   19688:	e1a03000 	mov	r3, r0
   1968c:	8a000004 	bhi	196a4 <CKeyboardBehaviour::KeyPressed(unsigned char)+0x28>
   19690:	e3a01001 	mov	r1, #1
   19694:	e5d0200c 	ldrb	r2, [r0, #12]
   19698:	e182cc11 	orr	ip, r2, r1, lsl ip
   1969c:	e5c0c00c 	strb	ip, [r0, #12]
   196a0:	e12fff1e 	bx	lr
   196a4:	e5d0c00d 	ldrb	ip, [r0, #13]
   196a8:	e15c0001 	cmp	ip, r1
   196ac:	012fff1e 	bxeq	lr
   196b0:	e5c3100d 	strb	r1, [r3, #13]
   196b4:	eaffffb8 	b	1959c <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)>

000196b8 <CKeyboardBehaviour::KeyReleased(unsigned char)>:
   196b8:	e2413080 	sub	r3, r1, #128	; 0x80
   196bc:	e6ef2073 	uxtb	r2, r3
   196c0:	e3520007 	cmp	r2, #7
   196c4:	8a000004 	bhi	196dc <CKeyboardBehaviour::KeyReleased(unsigned char)+0x24>
   196c8:	e3a01001 	mov	r1, #1
   196cc:	e5d0200c 	ldrb	r2, [r0, #12]
   196d0:	e1c23311 	bic	r3, r2, r1, lsl r3
   196d4:	e5c0300c 	strb	r3, [r0, #12]
   196d8:	e12fff1e 	bx	lr
   196dc:	e5d0300d 	ldrb	r3, [r0, #13]
   196e0:	e1530001 	cmp	r3, r1
   196e4:	112fff1e 	bxne	lr
   196e8:	e5903010 	ldr	r3, [r0, #16]
   196ec:	e92d4010 	push	{r4, lr}
   196f0:	e3530000 	cmp	r3, #0
   196f4:	e1a04000 	mov	r4, r0
   196f8:	1a000002 	bne	19708 <CKeyboardBehaviour::KeyReleased(unsigned char)+0x50>
   196fc:	e3a03000 	mov	r3, #0
   19700:	e5c4300d 	strb	r3, [r4, #13]
   19704:	e8bd8010 	pop	{r4, pc}
   19708:	eb002122 	bl	21b98 <CTimer::Get()>
   1970c:	e5941010 	ldr	r1, [r4, #16]
   19710:	eb001fab 	bl	215c4 <CTimer::CancelKernelTimer(unsigned int)>
   19714:	e3a03000 	mov	r3, #0
   19718:	e5843010 	str	r3, [r4, #16]
   1971c:	eafffff6 	b	196fc <CKeyboardBehaviour::KeyReleased(unsigned char)+0x44>

00019720 <CKeyboardBehaviour::TimerHandler(unsigned int)>:
   19720:	e92d4010 	push	{r4, lr}
   19724:	e5903010 	ldr	r3, [r0, #16]
   19728:	e24dd008 	sub	sp, sp, #8
   1972c:	e1530001 	cmp	r3, r1
   19730:	e1a04000 	mov	r4, r0
   19734:	0a000003 	beq	19748 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x28>
   19738:	e3a020b0 	mov	r2, #176	; 0xb0
   1973c:	e59f105c 	ldr	r1, [pc, #92]	; 197a0 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x80>
   19740:	e59f005c 	ldr	r0, [pc, #92]	; 197a4 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x84>
   19744:	eb0004cb 	bl	1aa78 <assertion_failed>
   19748:	e5d4100d 	ldrb	r1, [r4, #13]
   1974c:	e3510000 	cmp	r1, #0
   19750:	1a000001 	bne	1975c <CKeyboardBehaviour::TimerHandler(unsigned int)+0x3c>
   19754:	e28dd008 	add	sp, sp, #8
   19758:	e8bd8010 	pop	{r4, pc}
   1975c:	e1a00004 	mov	r0, r4
   19760:	ebffff8d 	bl	1959c <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)>
   19764:	eb00210b 	bl	21b98 <CTimer::Get()>
   19768:	e58d4000 	str	r4, [sp]
   1976c:	e3a03000 	mov	r3, #0
   19770:	e59f2030 	ldr	r2, [pc, #48]	; 197a8 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x88>
   19774:	e3a01008 	mov	r1, #8
   19778:	eb001f37 	bl	2145c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
   1977c:	e3500000 	cmp	r0, #0
   19780:	e5840010 	str	r0, [r4, #16]
   19784:	1afffff2 	bne	19754 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x34>
   19788:	e3a020b7 	mov	r2, #183	; 0xb7
   1978c:	e59f100c 	ldr	r1, [pc, #12]	; 197a0 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x80>
   19790:	e59f0014 	ldr	r0, [pc, #20]	; 197ac <CKeyboardBehaviour::TimerHandler(unsigned int)+0x8c>
   19794:	e28dd008 	add	sp, sp, #8
   19798:	e8bd4010 	pop	{r4, lr}
   1979c:	ea0004b5 	b	1aa78 <assertion_failed>
   197a0:	00026f90 	.word	0x00026f90
   197a4:	00026ff4 	.word	0x00026ff4
   197a8:	000197b0 	.word	0x000197b0
   197ac:	00026864 	.word	0x00026864

000197b0 <CKeyboardBehaviour::TimerStub(unsigned int, void*, void*)>:
   197b0:	e92d4070 	push	{r4, r5, r6, lr}
   197b4:	e2524000 	subs	r4, r2, #0
   197b8:	e1a05000 	mov	r5, r0
   197bc:	0a000003 	beq	197d0 <CKeyboardBehaviour::TimerStub(unsigned int, void*, void*)+0x20>
   197c0:	e1a01005 	mov	r1, r5
   197c4:	e1a00004 	mov	r0, r4
   197c8:	e8bd4070 	pop	{r4, r5, r6, lr}
   197cc:	eaffffd3 	b	19720 <CKeyboardBehaviour::TimerHandler(unsigned int)>
   197d0:	e59f1018 	ldr	r1, [pc, #24]	; 197f0 <CKeyboardBehaviour::TimerStub(unsigned int, void*, void*)+0x40>
   197d4:	e59f0018 	ldr	r0, [pc, #24]	; 197f4 <CKeyboardBehaviour::TimerStub(unsigned int, void*, void*)+0x44>
   197d8:	e3a020be 	mov	r2, #190	; 0xbe
   197dc:	eb0004a5 	bl	1aa78 <assertion_failed>
   197e0:	e1a01005 	mov	r1, r5
   197e4:	e1a00004 	mov	r0, r4
   197e8:	e8bd4070 	pop	{r4, r5, r6, lr}
   197ec:	eaffffcb 	b	19720 <CKeyboardBehaviour::TimerHandler(unsigned int)>
   197f0:	00026f90 	.word	0x00026f90
   197f4:	00024764 	.word	0x00024764

000197f8 <CKeyMap::~CKeyMap()>:
   197f8:	e12fff1e 	bx	lr

000197fc <CKeyMap::ClearTable(unsigned char)>:
   197fc:	e3510003 	cmp	r1, #3
   19800:	ca000009 	bgt	1982c <CKeyMap::ClearTable(unsigned char)+0x30>
   19804:	e3a0c000 	mov	ip, #0
   19808:	e1a03081 	lsl	r3, r1, #1
   1980c:	e2832b01 	add	r2, r3, #1024	; 0x400
   19810:	e0802002 	add	r2, r0, r2
   19814:	e0803003 	add	r3, r0, r3
   19818:	e0c3c0b8 	strh	ip, [r3], #8
   1981c:	e1530002 	cmp	r3, r2
   19820:	1afffffc 	bne	19818 <CKeyMap::ClearTable(unsigned char)+0x1c>
   19824:	e3a00001 	mov	r0, #1
   19828:	e12fff1e 	bx	lr
   1982c:	e3a00000 	mov	r0, #0
   19830:	e12fff1e 	bx	lr

00019834 <CKeyMap::SetEntry(unsigned char, unsigned char, unsigned short)>:
   19834:	e16fcf12 	clz	ip, r2
   19838:	e1a0c2ac 	lsr	ip, ip, #5
   1983c:	e3510003 	cmp	r1, #3
   19840:	c38cc001 	orrgt	ip, ip, #1
   19844:	e35c0000 	cmp	ip, #0
   19848:	1a00000a 	bne	19878 <CKeyMap::SetEntry(unsigned char, unsigned char, unsigned short)+0x44>
   1984c:	e352007f 	cmp	r2, #127	; 0x7f
   19850:	ca000009 	bgt	1987c <CKeyMap::SetEntry(unsigned char, unsigned char, unsigned short)+0x48>
   19854:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   19858:	e59fe024 	ldr	lr, [pc, #36]	; 19884 <CKeyMap::SetEntry(unsigned char, unsigned char, unsigned short)+0x50>
   1985c:	e153000e 	cmp	r3, lr
   19860:	d3a0c001 	movle	ip, #1
   19864:	d0811102 	addle	r1, r1, r2, lsl #2
   19868:	d1a01081 	lslle	r1, r1, #1
   1986c:	d18030b1 	strhle	r3, [r0, r1]
   19870:	e1a0000c 	mov	r0, ip
   19874:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   19878:	e3a0c000 	mov	ip, #0
   1987c:	e1a0000c 	mov	r0, ip
   19880:	e12fff1e 	bx	lr
   19884:	00000132 	.word	0x00000132

00019888 <CKeyMap::Translate(unsigned char, unsigned char)>:
   19888:	e6af3071 	sxtb	r3, r1
   1988c:	e3530000 	cmp	r3, #0
   19890:	da000023 	ble	19924 <CKeyMap::Translate(unsigned char, unsigned char)+0x9c>
   19894:	e1a03181 	lsl	r3, r1, #3
   19898:	e19030b3 	ldrh	r3, [r0, r3]
   1989c:	e3530f42 	cmp	r3, #264	; 0x108
   198a0:	0a000022 	beq	19930 <CKeyMap::Translate(unsigned char, unsigned char)+0xa8>
   198a4:	e243cf43 	sub	ip, r3, #268	; 0x10c
   198a8:	e24cc003 	sub	ip, ip, #3
   198ac:	e35c000b 	cmp	ip, #11
   198b0:	8a000003 	bhi	198c4 <CKeyMap::Translate(unsigned char, unsigned char)+0x3c>
   198b4:	e3120004 	tst	r2, #4
   198b8:	12833027 	addne	r3, r3, #39	; 0x27
   198bc:	16ff3073 	uxthne	r3, r3
   198c0:	1a000018 	bne	19928 <CKeyMap::Translate(unsigned char, unsigned char)+0xa0>
   198c4:	e312008c 	tst	r2, #140	; 0x8c
   198c8:	1a000015 	bne	19924 <CKeyMap::Translate(unsigned char, unsigned char)+0x9c>
   198cc:	e2413053 	sub	r3, r1, #83	; 0x53
   198d0:	e3530010 	cmp	r3, #16
   198d4:	9a00001b 	bls	19948 <CKeyMap::Translate(unsigned char, unsigned char)+0xc0>
   198d8:	e3120040 	tst	r2, #64	; 0x40
   198dc:	0a000025 	beq	19978 <CKeyMap::Translate(unsigned char, unsigned char)+0xf0>
   198e0:	e3120022 	tst	r2, #34	; 0x22
   198e4:	13a03003 	movne	r3, #3
   198e8:	03a03002 	moveq	r3, #2
   198ec:	e0831101 	add	r1, r3, r1, lsl #2
   198f0:	e1a01081 	lsl	r1, r1, #1
   198f4:	e19030b1 	ldrh	r3, [r0, r1]
   198f8:	e59f2088 	ldr	r2, [pc, #136]	; 19988 <CKeyMap::Translate(unsigned char, unsigned char)+0x100>
   198fc:	e1530002 	cmp	r3, r2
   19900:	0a000017 	beq	19964 <CKeyMap::Translate(unsigned char, unsigned char)+0xdc>
   19904:	e3530e12 	cmp	r3, #288	; 0x120
   19908:	0a000010 	beq	19950 <CKeyMap::Translate(unsigned char, unsigned char)+0xc8>
   1990c:	e3530f47 	cmp	r3, #284	; 0x11c
   19910:	05d02400 	ldrbeq	r2, [r0, #1024]	; 0x400
   19914:	02833017 	addeq	r3, r3, #23
   19918:	02222001 	eoreq	r2, r2, #1
   1991c:	05c02400 	strbeq	r2, [r0, #1024]	; 0x400
   19920:	ea000000 	b	19928 <CKeyMap::Translate(unsigned char, unsigned char)+0xa0>
   19924:	e3a03000 	mov	r3, #0
   19928:	e1a00003 	mov	r0, r3
   1992c:	e12fff1e 	bx	lr
   19930:	e3120011 	tst	r2, #17
   19934:	0affffe2 	beq	198c4 <CKeyMap::Translate(unsigned char, unsigned char)+0x3c>
   19938:	e3120004 	tst	r2, #4
   1993c:	159f3048 	ldrne	r3, [pc, #72]	; 1998c <CKeyMap::Translate(unsigned char, unsigned char)+0x104>
   19940:	1afffff8 	bne	19928 <CKeyMap::Translate(unsigned char, unsigned char)+0xa0>
   19944:	eaffffde 	b	198c4 <CKeyMap::Translate(unsigned char, unsigned char)+0x3c>
   19948:	e5d03401 	ldrb	r3, [r0, #1025]	; 0x401
   1994c:	eaffffe6 	b	198ec <CKeyMap::Translate(unsigned char, unsigned char)+0x64>
   19950:	e5d02401 	ldrb	r2, [r0, #1025]	; 0x401
   19954:	e3a03f4d 	mov	r3, #308	; 0x134
   19958:	e2222001 	eor	r2, r2, #1
   1995c:	e5c02401 	strb	r2, [r0, #1025]	; 0x401
   19960:	eafffff0 	b	19928 <CKeyMap::Translate(unsigned char, unsigned char)+0xa0>
   19964:	e5d02402 	ldrb	r2, [r0, #1026]	; 0x402
   19968:	e59f3020 	ldr	r3, [pc, #32]	; 19990 <CKeyMap::Translate(unsigned char, unsigned char)+0x108>
   1996c:	e2222001 	eor	r2, r2, #1
   19970:	e5c02402 	strb	r2, [r0, #1026]	; 0x402
   19974:	eaffffeb 	b	19928 <CKeyMap::Translate(unsigned char, unsigned char)+0xa0>
   19978:	e3120022 	tst	r2, #34	; 0x22
   1997c:	13a03001 	movne	r3, #1
   19980:	03a03000 	moveq	r3, #0
   19984:	eaffffd8 	b	198ec <CKeyMap::Translate(unsigned char, unsigned char)+0x64>
   19988:	0000011e 	.word	0x0000011e
   1998c:	00000142 	.word	0x00000142
   19990:	00000135 	.word	0x00000135

00019994 <CKeyMap::GetString(unsigned short, unsigned char, char*) const>:
   19994:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   19998:	e241c021 	sub	ip, r1, #33	; 0x21
   1999c:	e59fe0a8 	ldr	lr, [pc, #168]	; 19a4c <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xb8>
   199a0:	e6ffc07c 	uxth	ip, ip
   199a4:	e15c000e 	cmp	ip, lr
   199a8:	8a000025 	bhi	19a44 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xb0>
   199ac:	e241cc01 	sub	ip, r1, #256	; 0x100
   199b0:	e6ffe07c 	uxth	lr, ip
   199b4:	e35e0032 	cmp	lr, #50	; 0x32
   199b8:	9a00001e 	bls	19a38 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xa4>
   199bc:	e3120011 	tst	r2, #17
   199c0:	e6af2071 	sxtb	r2, r1
   199c4:	0a000009 	beq	199f0 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x5c>
   199c8:	e6ef1071 	uxtb	r1, r1
   199cc:	e2412061 	sub	r2, r1, #97	; 0x61
   199d0:	e3520019 	cmp	r2, #25
   199d4:	8a00001a 	bhi	19a44 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xb0>
   199d8:	e3a02000 	mov	r2, #0
   199dc:	e2411060 	sub	r1, r1, #96	; 0x60
   199e0:	e5c31000 	strb	r1, [r3]
   199e4:	e5c32001 	strb	r2, [r3, #1]
   199e8:	e1a00003 	mov	r0, r3
   199ec:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   199f0:	e5d00400 	ldrb	r0, [r0, #1024]	; 0x400
   199f4:	e3500000 	cmp	r0, #0
   199f8:	0a000009 	beq	19a24 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x90>
   199fc:	e6ef1071 	uxtb	r1, r1
   19a00:	e2410041 	sub	r0, r1, #65	; 0x41
   19a04:	e3500019 	cmp	r0, #25
   19a08:	92811020 	addls	r1, r1, #32
   19a0c:	96af2071 	sxtbls	r2, r1
   19a10:	9a000003 	bls	19a24 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x90>
   19a14:	e2410061 	sub	r0, r1, #97	; 0x61
   19a18:	e3500019 	cmp	r0, #25
   19a1c:	92411020 	subls	r1, r1, #32
   19a20:	96af2071 	sxtbls	r2, r1
   19a24:	e3a01000 	mov	r1, #0
   19a28:	e5c32000 	strb	r2, [r3]
   19a2c:	e5c31001 	strb	r1, [r3, #1]
   19a30:	e1a00003 	mov	r0, r3
   19a34:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   19a38:	e59f3010 	ldr	r3, [pc, #16]	; 19a50 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xbc>
   19a3c:	e793010c 	ldr	r0, [r3, ip, lsl #2]
   19a40:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   19a44:	e3a00000 	mov	r0, #0
   19a48:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   19a4c:	00000111 	.word	0x00000111
   19a50:	0002b708 	.word	0x0002b708

00019a54 <CKeyMap::GetLEDStatus() const>:
   19a54:	e5d03400 	ldrb	r3, [r0, #1024]	; 0x400
   19a58:	e5d02401 	ldrb	r2, [r0, #1025]	; 0x401
   19a5c:	e3530000 	cmp	r3, #0
   19a60:	13a03002 	movne	r3, #2
   19a64:	03a03000 	moveq	r3, #0
   19a68:	e3520000 	cmp	r2, #0
   19a6c:	e5d02402 	ldrb	r2, [r0, #1026]	; 0x402
   19a70:	13833001 	orrne	r3, r3, #1
   19a74:	e3520000 	cmp	r2, #0
   19a78:	13833004 	orrne	r3, r3, #4
   19a7c:	e1a00003 	mov	r0, r3
   19a80:	e12fff1e 	bx	lr

00019a84 <CKeyMap::LookupDefaultMap(char const*)>:
   19a84:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19a88:	e59f4078 	ldr	r4, [pc, #120]	; 19b08 <CKeyMap::LookupDefaultMap(char const*)+0x84>
   19a8c:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
   19a90:	e3530000 	cmp	r3, #0
   19a94:	0a000016 	beq	19af4 <CKeyMap::LookupDefaultMap(char const*)+0x70>
   19a98:	e1a05000 	mov	r5, r0
   19a9c:	e3a06000 	mov	r6, #0
   19aa0:	e59f9064 	ldr	r9, [pc, #100]	; 19b0c <CKeyMap::LookupDefaultMap(char const*)+0x88>
   19aa4:	e59f8064 	ldr	r8, [pc, #100]	; 19b10 <CKeyMap::LookupDefaultMap(char const*)+0x8c>
   19aa8:	e59f7064 	ldr	r7, [pc, #100]	; 19b14 <CKeyMap::LookupDefaultMap(char const*)+0x90>
   19aac:	e28440cc 	add	r4, r4, #204	; 0xcc
   19ab0:	ea000008 	b	19ad8 <CKeyMap::LookupDefaultMap(char const*)+0x54>
   19ab4:	e1a01005 	mov	r1, r5
   19ab8:	e4940004 	ldr	r0, [r4], #4
   19abc:	eb00206e 	bl	21c7c <strcmp>
   19ac0:	e3500000 	cmp	r0, #0
   19ac4:	0a00000c 	beq	19afc <CKeyMap::LookupDefaultMap(char const*)+0x78>
   19ac8:	e5943000 	ldr	r3, [r4]
   19acc:	e2866001 	add	r6, r6, #1
   19ad0:	e3530000 	cmp	r3, #0
   19ad4:	0a000006 	beq	19af4 <CKeyMap::LookupDefaultMap(char const*)+0x70>
   19ad8:	e3550000 	cmp	r5, #0
   19adc:	1afffff4 	bne	19ab4 <CKeyMap::LookupDefaultMap(char const*)+0x30>
   19ae0:	e1a02009 	mov	r2, r9
   19ae4:	e1a01008 	mov	r1, r8
   19ae8:	e1a00007 	mov	r0, r7
   19aec:	eb0003e1 	bl	1aa78 <assertion_failed>
   19af0:	eaffffef 	b	19ab4 <CKeyMap::LookupDefaultMap(char const*)+0x30>
   19af4:	e3a00000 	mov	r0, #0
   19af8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19afc:	e59f0014 	ldr	r0, [pc, #20]	; 19b18 <CKeyMap::LookupDefaultMap(char const*)+0x94>
   19b00:	e0800506 	add	r0, r0, r6, lsl #10
   19b04:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19b08:	0002b708 	.word	0x0002b708
   19b0c:	0000013f 	.word	0x0000013f
   19b10:	00028808 	.word	0x00028808
   19b14:	00028814 	.word	0x00028814
   19b18:	00027008 	.word	0x00027008

00019b1c <CKeyMap::CKeyMap()>:
   19b1c:	e3a03000 	mov	r3, #0
   19b20:	e3a02001 	mov	r2, #1
   19b24:	e92d4070 	push	{r4, r5, r6, lr}
   19b28:	e5c02401 	strb	r2, [r0, #1025]	; 0x401
   19b2c:	e5c03400 	strb	r3, [r0, #1024]	; 0x400
   19b30:	e5c03402 	strb	r3, [r0, #1026]	; 0x402
   19b34:	e1a04000 	mov	r4, r0
   19b38:	eb000c65 	bl	1ccd4 <CKernelOptions::Get()>
   19b3c:	eb000c57 	bl	1cca0 <CKernelOptions::GetKeyMap() const>
   19b40:	e2505000 	subs	r5, r0, #0
   19b44:	0a000012 	beq	19b94 <CKeyMap::CKeyMap()+0x78>
   19b48:	e1a00005 	mov	r0, r5
   19b4c:	ebffffcc 	bl	19a84 <CKeyMap::LookupDefaultMap(char const*)>
   19b50:	e2501000 	subs	r1, r0, #0
   19b54:	0a000004 	beq	19b6c <CKeyMap::CKeyMap()+0x50>
   19b58:	e3a02b01 	mov	r2, #1024	; 0x400
   19b5c:	e1a00004 	mov	r0, r4
   19b60:	eb00218d 	bl	2219c <memcpy>
   19b64:	e1a00004 	mov	r0, r4
   19b68:	e8bd8070 	pop	{r4, r5, r6, pc}
   19b6c:	e59f0034 	ldr	r0, [pc, #52]	; 19ba8 <CKeyMap::CKeyMap()+0x8c>
   19b70:	ebffffc3 	bl	19a84 <CKeyMap::LookupDefaultMap(char const*)>
   19b74:	e2501000 	subs	r1, r0, #0
   19b78:	1afffff6 	bne	19b58 <CKeyMap::CKeyMap()+0x3c>
   19b7c:	e59f1028 	ldr	r1, [pc, #40]	; 19bac <CKeyMap::CKeyMap()+0x90>
   19b80:	e3a02080 	mov	r2, #128	; 0x80
   19b84:	e59f0024 	ldr	r0, [pc, #36]	; 19bb0 <CKeyMap::CKeyMap()+0x94>
   19b88:	eb0003ba 	bl	1aa78 <assertion_failed>
   19b8c:	e59f1020 	ldr	r1, [pc, #32]	; 19bb4 <CKeyMap::CKeyMap()+0x98>
   19b90:	eafffff0 	b	19b58 <CKeyMap::CKeyMap()+0x3c>
   19b94:	e3a0207a 	mov	r2, #122	; 0x7a
   19b98:	e59f100c 	ldr	r1, [pc, #12]	; 19bac <CKeyMap::CKeyMap()+0x90>
   19b9c:	e59f0014 	ldr	r0, [pc, #20]	; 19bb8 <CKeyMap::CKeyMap()+0x9c>
   19ba0:	eb0003b4 	bl	1aa78 <assertion_failed>
   19ba4:	eaffffe7 	b	19b48 <CKeyMap::CKeyMap()+0x2c>
   19ba8:	00028824 	.word	0x00028824
   19bac:	00028808 	.word	0x00028808
   19bb0:	00028828 	.word	0x00028828
   19bb4:	00027008 	.word	0x00027008
   19bb8:	00028814 	.word	0x00028814

00019bbc <CMouseDevice::~CMouseDevice()>:
   19bbc:	e92d4070 	push	{r4, r5, r6, lr}
   19bc0:	e3a06000 	mov	r6, #0
   19bc4:	e1a04000 	mov	r4, r0
   19bc8:	e59f5034 	ldr	r5, [pc, #52]	; 19c04 <CMouseDevice::~CMouseDevice()+0x48>
   19bcc:	e5806020 	str	r6, [r0, #32]
   19bd0:	e2853008 	add	r3, r5, #8
   19bd4:	e5803000 	str	r3, [r0]
   19bd8:	eb00069f 	bl	1b65c <CDeviceNameService::Get()>
   19bdc:	e1a03006 	mov	r3, r6
   19be0:	e285101c 	add	r1, r5, #28
   19be4:	e5942024 	ldr	r2, [r4, #36]	; 0x24
   19be8:	eb0006c3 	bl	1b6fc <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   19bec:	e2840004 	add	r0, r4, #4
   19bf0:	eb000062 	bl	19d80 <CMouseBehaviour::~CMouseBehaviour()>
   19bf4:	e1a00004 	mov	r0, r4
   19bf8:	eb00059a 	bl	1b268 <CDevice::~CDevice()>
   19bfc:	e1a00004 	mov	r0, r4
   19c00:	e8bd8070 	pop	{r4, r5, r6, pc}
   19c04:	0002891c 	.word	0x0002891c

00019c08 <CMouseDevice::~CMouseDevice()>:
   19c08:	e92d4010 	push	{r4, lr}
   19c0c:	e1a04000 	mov	r4, r0
   19c10:	ebffffe9 	bl	19bbc <CMouseDevice::~CMouseDevice()>
   19c14:	e1a00004 	mov	r0, r4
   19c18:	e3a01028 	mov	r1, #40	; 0x28
   19c1c:	eb00245e 	bl	22d9c <operator delete(void*, unsigned int)>
   19c20:	e1a00004 	mov	r0, r4
   19c24:	e8bd8010 	pop	{r4, pc}

00019c28 <CMouseDevice::CMouseDevice()>:
   19c28:	e92d4070 	push	{r4, r5, r6, lr}
   19c2c:	e1a04000 	mov	r4, r0
   19c30:	e24dd008 	sub	sp, sp, #8
   19c34:	eb000597 	bl	1b298 <CDevice::CDevice()>
   19c38:	e1a00004 	mov	r0, r4
   19c3c:	e3a06000 	mov	r6, #0
   19c40:	e59f5044 	ldr	r5, [pc, #68]	; 19c8c <CMouseDevice::CMouseDevice()+0x64>
   19c44:	e2853008 	add	r3, r5, #8
   19c48:	e4803004 	str	r3, [r0], #4
   19c4c:	eb000041 	bl	19d58 <CMouseBehaviour::CMouseBehaviour()>
   19c50:	e59f2038 	ldr	r2, [pc, #56]	; 19c90 <CMouseDevice::CMouseDevice()+0x68>
   19c54:	e5846020 	str	r6, [r4, #32]
   19c58:	e5923000 	ldr	r3, [r2]
   19c5c:	e5843024 	str	r3, [r4, #36]	; 0x24
   19c60:	e2833001 	add	r3, r3, #1
   19c64:	e5823000 	str	r3, [r2]
   19c68:	eb00067b 	bl	1b65c <CDeviceNameService::Get()>
   19c6c:	e5942024 	ldr	r2, [r4, #36]	; 0x24
   19c70:	e285101c 	add	r1, r5, #28
   19c74:	e58d6000 	str	r6, [sp]
   19c78:	e1a03004 	mov	r3, r4
   19c7c:	eb000684 	bl	1b694 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   19c80:	e1a00004 	mov	r0, r4
   19c84:	e28dd008 	add	sp, sp, #8
   19c88:	e8bd8070 	pop	{r4, r5, r6, pc}
   19c8c:	0002891c 	.word	0x0002891c
   19c90:	0002b7f0 	.word	0x0002b7f0

00019c94 <CMouseDevice::Setup(unsigned int, unsigned int)>:
   19c94:	e2800004 	add	r0, r0, #4
   19c98:	ea000039 	b	19d84 <CMouseBehaviour::Setup(unsigned int, unsigned int)>

00019c9c <CMouseDevice::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))>:
   19c9c:	e2800004 	add	r0, r0, #4
   19ca0:	ea00008e 	b	19ee0 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))>

00019ca4 <CMouseDevice::SetCursor(unsigned int, unsigned int)>:
   19ca4:	e2800004 	add	r0, r0, #4
   19ca8:	ea00011a 	b	1a118 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)>

00019cac <CMouseDevice::ShowCursor(bool)>:
   19cac:	e2800004 	add	r0, r0, #4
   19cb0:	ea000143 	b	1a1c4 <CMouseBehaviour::ShowCursor(bool)>

00019cb4 <CMouseDevice::UpdateCursor()>:
   19cb4:	e5903020 	ldr	r3, [r0, #32]
   19cb8:	e3530000 	cmp	r3, #0
   19cbc:	112fff1e 	bxne	lr
   19cc0:	e2800004 	add	r0, r0, #4
   19cc4:	ea00015c 	b	1a23c <CMouseBehaviour::UpdateCursor()>

00019cc8 <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int))>:
   19cc8:	e5903020 	ldr	r3, [r0, #32]
   19ccc:	e92d4070 	push	{r4, r5, r6, lr}
   19cd0:	e3530000 	cmp	r3, #0
   19cd4:	e1a04000 	mov	r4, r0
   19cd8:	e1a05001 	mov	r5, r1
   19cdc:	0a000003 	beq	19cf0 <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int))+0x28>
   19ce0:	e3a02048 	mov	r2, #72	; 0x48
   19ce4:	e59f1024 	ldr	r1, [pc, #36]	; 19d10 <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int))+0x48>
   19ce8:	e59f0024 	ldr	r0, [pc, #36]	; 19d14 <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int))+0x4c>
   19cec:	eb000361 	bl	1aa78 <assertion_failed>
   19cf0:	e3550000 	cmp	r5, #0
   19cf4:	e5845020 	str	r5, [r4, #32]
   19cf8:	18bd8070 	popne	{r4, r5, r6, pc}
   19cfc:	e3a0204a 	mov	r2, #74	; 0x4a
   19d00:	e8bd4070 	pop	{r4, r5, r6, lr}
   19d04:	e59f1004 	ldr	r1, [pc, #4]	; 19d10 <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int))+0x48>
   19d08:	e59f0008 	ldr	r0, [pc, #8]	; 19d18 <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int))+0x50>
   19d0c:	ea000359 	b	1aa78 <assertion_failed>
   19d10:	00028940 	.word	0x00028940
   19d14:	00026f60 	.word	0x00026f60
   19d18:	00026f78 	.word	0x00026f78

00019d1c <CMouseDevice::ReportHandler(unsigned int, int, int)>:
   19d1c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   19d20:	e1a04000 	mov	r4, r0
   19d24:	e2800004 	add	r0, r0, #4
   19d28:	e1a07003 	mov	r7, r3
   19d2c:	e1a05001 	mov	r5, r1
   19d30:	e1a06002 	mov	r6, r2
   19d34:	eb00007e 	bl	19f34 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)>
   19d38:	e5943020 	ldr	r3, [r4, #32]
   19d3c:	e3530000 	cmp	r3, #0
   19d40:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   19d44:	e1a02007 	mov	r2, r7
   19d48:	e1a01006 	mov	r1, r6
   19d4c:	e1a00005 	mov	r0, r5
   19d50:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   19d54:	e12fff13 	bx	r3

00019d58 <CMouseBehaviour::CMouseBehaviour()>:
   19d58:	e3a02000 	mov	r2, #0
   19d5c:	e5802000 	str	r2, [r0]
   19d60:	e5802004 	str	r2, [r0, #4]
   19d64:	e5802008 	str	r2, [r0, #8]
   19d68:	e580200c 	str	r2, [r0, #12]
   19d6c:	e5c02010 	strb	r2, [r0, #16]
   19d70:	e5c02011 	strb	r2, [r0, #17]
   19d74:	e5802014 	str	r2, [r0, #20]
   19d78:	e5802018 	str	r2, [r0, #24]
   19d7c:	e12fff1e 	bx	lr

00019d80 <CMouseBehaviour::~CMouseBehaviour()>:
   19d80:	e12fff1e 	bx	lr

00019d84 <CMouseBehaviour::Setup(unsigned int, unsigned int)>:
   19d84:	e92d4070 	push	{r4, r5, r6, lr}
   19d88:	e5903000 	ldr	r3, [r0]
   19d8c:	e24dd030 	sub	sp, sp, #48	; 0x30
   19d90:	e3530000 	cmp	r3, #0
   19d94:	e1a04000 	mov	r4, r0
   19d98:	e1a06001 	mov	r6, r1
   19d9c:	e1a05002 	mov	r5, r2
   19da0:	1a00002c 	bne	19e58 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0xd4>
   19da4:	e3560000 	cmp	r6, #0
   19da8:	e5846000 	str	r6, [r4]
   19dac:	0a000030 	beq	19e74 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0xf0>
   19db0:	e5943004 	ldr	r3, [r4, #4]
   19db4:	e3530000 	cmp	r3, #0
   19db8:	1a000034 	bne	19e90 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x10c>
   19dbc:	e3550000 	cmp	r5, #0
   19dc0:	e5845004 	str	r5, [r4, #4]
   19dc4:	0a000038 	beq	19eac <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x128>
   19dc8:	e5943000 	ldr	r3, [r4]
   19dcc:	e2855001 	add	r5, r5, #1
   19dd0:	e2833001 	add	r3, r3, #1
   19dd4:	e1a030a3 	lsr	r3, r3, #1
   19dd8:	e1a050a5 	lsr	r5, r5, #1
   19ddc:	e584500c 	str	r5, [r4, #12]
   19de0:	e5843008 	str	r3, [r4, #8]
   19de4:	e28d0008 	add	r0, sp, #8
   19de8:	eb000346 	bl	1ab08 <CBcmPropertyTags::CBcmPropertyTags()>
   19dec:	e3a03018 	mov	r3, #24
   19df0:	e3a0e000 	mov	lr, #0
   19df4:	e3a04010 	mov	r4, #16
   19df8:	e59fc0c4 	ldr	ip, [pc, #196]	; 19ec4 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x140>
   19dfc:	e58d3000 	str	r3, [sp]
   19e00:	e3ccc103 	bic	ip, ip, #-1073741824	; 0xc0000000
   19e04:	e38cc101 	orr	ip, ip, #1073741824	; 0x40000000
   19e08:	e3a03024 	mov	r3, #36	; 0x24
   19e0c:	e28d200c 	add	r2, sp, #12
   19e10:	e59f10b0 	ldr	r1, [pc, #176]	; 19ec8 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x144>
   19e14:	e28d0008 	add	r0, sp, #8
   19e18:	e58dc024 	str	ip, [sp, #36]	; 0x24
   19e1c:	e58d4018 	str	r4, [sp, #24]
   19e20:	e58d401c 	str	r4, [sp, #28]
   19e24:	e58de020 	str	lr, [sp, #32]
   19e28:	e58de028 	str	lr, [sp, #40]	; 0x28
   19e2c:	e58de02c 	str	lr, [sp, #44]	; 0x2c
   19e30:	eb00038b 	bl	1ac64 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   19e34:	e2504000 	subs	r4, r0, #0
   19e38:	159d4018 	ldrne	r4, [sp, #24]
   19e3c:	e28d0008 	add	r0, sp, #8
   19e40:	116f4f14 	clzne	r4, r4
   19e44:	11a042a4 	lsrne	r4, r4, #5
   19e48:	eb000334 	bl	1ab20 <CBcmPropertyTags::~CBcmPropertyTags()>
   19e4c:	e1a00004 	mov	r0, r4
   19e50:	e28dd030 	add	sp, sp, #48	; 0x30
   19e54:	e8bd8070 	pop	{r4, r5, r6, pc}
   19e58:	e3a0204c 	mov	r2, #76	; 0x4c
   19e5c:	e59f1068 	ldr	r1, [pc, #104]	; 19ecc <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x148>
   19e60:	e59f0068 	ldr	r0, [pc, #104]	; 19ed0 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x14c>
   19e64:	eb000303 	bl	1aa78 <assertion_failed>
   19e68:	e3560000 	cmp	r6, #0
   19e6c:	e5846000 	str	r6, [r4]
   19e70:	1affffce 	bne	19db0 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x2c>
   19e74:	e3a0204e 	mov	r2, #78	; 0x4e
   19e78:	e59f104c 	ldr	r1, [pc, #76]	; 19ecc <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x148>
   19e7c:	e59f0050 	ldr	r0, [pc, #80]	; 19ed4 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x150>
   19e80:	eb0002fc 	bl	1aa78 <assertion_failed>
   19e84:	e5943004 	ldr	r3, [r4, #4]
   19e88:	e3530000 	cmp	r3, #0
   19e8c:	0affffca 	beq	19dbc <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x38>
   19e90:	e3a02050 	mov	r2, #80	; 0x50
   19e94:	e59f1030 	ldr	r1, [pc, #48]	; 19ecc <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x148>
   19e98:	e59f0038 	ldr	r0, [pc, #56]	; 19ed8 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x154>
   19e9c:	eb0002f5 	bl	1aa78 <assertion_failed>
   19ea0:	e3550000 	cmp	r5, #0
   19ea4:	e5845004 	str	r5, [r4, #4]
   19ea8:	1affffc6 	bne	19dc8 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x44>
   19eac:	e3a02052 	mov	r2, #82	; 0x52
   19eb0:	e59f1014 	ldr	r1, [pc, #20]	; 19ecc <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x148>
   19eb4:	e59f0020 	ldr	r0, [pc, #32]	; 19edc <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x158>
   19eb8:	eb0002ee 	bl	1aa78 <assertion_failed>
   19ebc:	e5945004 	ldr	r5, [r4, #4]
   19ec0:	eaffffc0 	b	19dc8 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x44>
   19ec4:	0002894c 	.word	0x0002894c
   19ec8:	00008010 	.word	0x00008010
   19ecc:	00028d4c 	.word	0x00028d4c
   19ed0:	00028d60 	.word	0x00028d60
   19ed4:	00028d74 	.word	0x00028d74
   19ed8:	00028d88 	.word	0x00028d88
   19edc:	00028da0 	.word	0x00028da0

00019ee0 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))>:
   19ee0:	e5903018 	ldr	r3, [r0, #24]
   19ee4:	e92d4070 	push	{r4, r5, r6, lr}
   19ee8:	e3530000 	cmp	r3, #0
   19eec:	e1a04000 	mov	r4, r0
   19ef0:	e1a05001 	mov	r5, r1
   19ef4:	0a000003 	beq	19f08 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))+0x28>
   19ef8:	e3a0206e 	mov	r2, #110	; 0x6e
   19efc:	e59f1024 	ldr	r1, [pc, #36]	; 19f28 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))+0x48>
   19f00:	e59f0024 	ldr	r0, [pc, #36]	; 19f2c <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))+0x4c>
   19f04:	eb0002db 	bl	1aa78 <assertion_failed>
   19f08:	e3550000 	cmp	r5, #0
   19f0c:	e5845018 	str	r5, [r4, #24]
   19f10:	18bd8070 	popne	{r4, r5, r6, pc}
   19f14:	e3a02070 	mov	r2, #112	; 0x70
   19f18:	e8bd4070 	pop	{r4, r5, r6, lr}
   19f1c:	e59f1004 	ldr	r1, [pc, #4]	; 19f28 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))+0x48>
   19f20:	e59f0008 	ldr	r0, [pc, #8]	; 19f30 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))+0x50>
   19f24:	ea0002d3 	b	1aa78 <assertion_failed>
   19f28:	00028d4c 	.word	0x00028d4c
   19f2c:	00028db4 	.word	0x00028db4
   19f30:	00026718 	.word	0x00026718

00019f34 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)>:
   19f34:	e590c000 	ldr	ip, [r0]
   19f38:	e35c0000 	cmp	ip, #0
   19f3c:	012fff1e 	bxeq	lr
   19f40:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19f44:	e590e004 	ldr	lr, [r0, #4]
   19f48:	e35e0000 	cmp	lr, #0
   19f4c:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19f50:	e1a04000 	mov	r4, r0
   19f54:	e1a05001 	mov	r5, r1
   19f58:	e0822182 	add	r2, r2, r2, lsl #3
   19f5c:	e59f113c 	ldr	r1, [pc, #316]	; 1a0a0 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x16c>
   19f60:	e1a02082 	lsl	r2, r2, #1
   19f64:	e0833183 	add	r3, r3, r3, lsl #3
   19f68:	e0c60291 	smull	r0, r6, r1, r2
   19f6c:	e1a03083 	lsl	r3, r3, #1
   19f70:	e0c10391 	smull	r0, r1, r1, r3
   19f74:	e1a02fc2 	asr	r2, r2, #31
   19f78:	e5940008 	ldr	r0, [r4, #8]
   19f7c:	e0622146 	rsb	r2, r2, r6, asr #2
   19f80:	e1a03fc3 	asr	r3, r3, #31
   19f84:	e0633141 	rsb	r3, r3, r1, asr #2
   19f88:	e0822000 	add	r2, r2, r0
   19f8c:	e594100c 	ldr	r1, [r4, #12]
   19f90:	e15c0002 	cmp	ip, r2
   19f94:	e0813003 	add	r3, r1, r3
   19f98:	9a00002c 	bls	1a050 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x11c>
   19f9c:	e15e0003 	cmp	lr, r3
   19fa0:	e584300c 	str	r3, [r4, #12]
   19fa4:	e5842008 	str	r2, [r4, #8]
   19fa8:	8a000037 	bhi	1a08c <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x158>
   19fac:	e1500002 	cmp	r0, r2
   19fb0:	e584100c 	str	r1, [r4, #12]
   19fb4:	0a000008 	beq	19fdc <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xa8>
   19fb8:	e3a03001 	mov	r3, #1
   19fbc:	e5946018 	ldr	r6, [r4, #24]
   19fc0:	e5c43010 	strb	r3, [r4, #16]
   19fc4:	e3560000 	cmp	r6, #0
   19fc8:	0a000027 	beq	1a06c <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x138>
   19fcc:	e594300c 	ldr	r3, [r4, #12]
   19fd0:	e1a01005 	mov	r1, r5
   19fd4:	e3a00000 	mov	r0, #0
   19fd8:	e12fff36 	blx	r6
   19fdc:	e5943014 	ldr	r3, [r4, #20]
   19fe0:	e1550003 	cmp	r5, r3
   19fe4:	0a000020 	beq	1a06c <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x138>
   19fe8:	e5942018 	ldr	r2, [r4, #24]
   19fec:	e3520000 	cmp	r2, #0
   19ff0:	0a00001d 	beq	1a06c <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x138>
   19ff4:	e3a06000 	mov	r6, #0
   19ff8:	e3a07001 	mov	r7, #1
   19ffc:	e1a01617 	lsl	r1, r7, r6
   1a000:	e1110003 	tst	r1, r3
   1a004:	e3a08002 	mov	r8, #2
   1a008:	0a000008 	beq	1a030 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xfc>
   1a00c:	e1150001 	tst	r5, r1
   1a010:	0a000017 	beq	1a074 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x140>
   1a014:	e2866001 	add	r6, r6, #1
   1a018:	e3560003 	cmp	r6, #3
   1a01c:	0a000012 	beq	1a06c <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x138>
   1a020:	e5943014 	ldr	r3, [r4, #20]
   1a024:	e1a01617 	lsl	r1, r7, r6
   1a028:	e1110003 	tst	r1, r3
   1a02c:	1afffff6 	bne	1a00c <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xd8>
   1a030:	e1150001 	tst	r5, r1
   1a034:	0afffff6 	beq	1a014 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xe0>
   1a038:	e5949018 	ldr	r9, [r4, #24]
   1a03c:	e594300c 	ldr	r3, [r4, #12]
   1a040:	e5942008 	ldr	r2, [r4, #8]
   1a044:	e1a00007 	mov	r0, r7
   1a048:	e12fff39 	blx	r9
   1a04c:	eafffff0 	b	1a014 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xe0>
   1a050:	e15e0003 	cmp	lr, r3
   1a054:	e584300c 	str	r3, [r4, #12]
   1a058:	9a00000e 	bls	1a098 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x164>
   1a05c:	e1510003 	cmp	r1, r3
   1a060:	11a02000 	movne	r2, r0
   1a064:	1affffd3 	bne	19fb8 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x84>
   1a068:	eaffffdb 	b	19fdc <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xa8>
   1a06c:	e5845014 	str	r5, [r4, #20]
   1a070:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a074:	e5949018 	ldr	r9, [r4, #24]
   1a078:	e594300c 	ldr	r3, [r4, #12]
   1a07c:	e5942008 	ldr	r2, [r4, #8]
   1a080:	e1a00008 	mov	r0, r8
   1a084:	e12fff39 	blx	r9
   1a088:	eaffffe1 	b	1a014 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xe0>
   1a08c:	e1500002 	cmp	r0, r2
   1a090:	1affffc8 	bne	19fb8 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x84>
   1a094:	eafffff0 	b	1a05c <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x128>
   1a098:	e584100c 	str	r1, [r4, #12]
   1a09c:	eaffffce 	b	19fdc <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xa8>
   1a0a0:	66666667 	.word	0x66666667

0001a0a4 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>:
   1a0a4:	e92d4070 	push	{r4, r5, r6, lr}
   1a0a8:	e24dd028 	sub	sp, sp, #40	; 0x28
   1a0ac:	e1a05000 	mov	r5, r0
   1a0b0:	e28d0008 	add	r0, sp, #8
   1a0b4:	e1a04001 	mov	r4, r1
   1a0b8:	e1a06002 	mov	r6, r2
   1a0bc:	eb000291 	bl	1ab08 <CBcmPropertyTags::CBcmPropertyTags()>
   1a0c0:	e3a03010 	mov	r3, #16
   1a0c4:	e3a0c001 	mov	ip, #1
   1a0c8:	e58d3000 	str	r3, [sp]
   1a0cc:	e28d200c 	add	r2, sp, #12
   1a0d0:	e3a0301c 	mov	r3, #28
   1a0d4:	e59f1038 	ldr	r1, [pc, #56]	; 1a114 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)+0x70>
   1a0d8:	e28d0008 	add	r0, sp, #8
   1a0dc:	e58d4020 	str	r4, [sp, #32]
   1a0e0:	e58dc024 	str	ip, [sp, #36]	; 0x24
   1a0e4:	e58d6018 	str	r6, [sp, #24]
   1a0e8:	e58d501c 	str	r5, [sp, #28]
   1a0ec:	eb0002dc 	bl	1ac64 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   1a0f0:	e2504000 	subs	r4, r0, #0
   1a0f4:	159d4018 	ldrne	r4, [sp, #24]
   1a0f8:	e28d0008 	add	r0, sp, #8
   1a0fc:	116f4f14 	clzne	r4, r4
   1a100:	11a042a4 	lsrne	r4, r4, #5
   1a104:	eb000285 	bl	1ab20 <CBcmPropertyTags::~CBcmPropertyTags()>
   1a108:	e1a00004 	mov	r0, r4
   1a10c:	e28dd028 	add	sp, sp, #40	; 0x28
   1a110:	e8bd8070 	pop	{r4, r5, r6, pc}
   1a114:	00008011 	.word	0x00008011

0001a118 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)>:
   1a118:	e5903000 	ldr	r3, [r0]
   1a11c:	e92d4070 	push	{r4, r5, r6, lr}
   1a120:	e3530000 	cmp	r3, #0
   1a124:	e1a04000 	mov	r4, r0
   1a128:	e1a05001 	mov	r5, r1
   1a12c:	e1a06002 	mov	r6, r2
   1a130:	0a000016 	beq	1a190 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x78>
   1a134:	e5943004 	ldr	r3, [r4, #4]
   1a138:	e3530000 	cmp	r3, #0
   1a13c:	0a00000e 	beq	1a17c <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x64>
   1a140:	e5943000 	ldr	r3, [r4]
   1a144:	e1530005 	cmp	r3, r5
   1a148:	9a000009 	bls	1a174 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x5c>
   1a14c:	e5943004 	ldr	r3, [r4, #4]
   1a150:	e1530006 	cmp	r3, r6
   1a154:	9a000006 	bls	1a174 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x5c>
   1a158:	e5d43011 	ldrb	r3, [r4, #17]
   1a15c:	e5845008 	str	r5, [r4, #8]
   1a160:	e3530000 	cmp	r3, #0
   1a164:	e584600c 	str	r6, [r4, #12]
   1a168:	1a00000d 	bne	1a1a4 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x8c>
   1a16c:	e3a00001 	mov	r0, #1
   1a170:	e8bd8070 	pop	{r4, r5, r6, pc}
   1a174:	e3a00000 	mov	r0, #0
   1a178:	e8bd8070 	pop	{r4, r5, r6, pc}
   1a17c:	e3a02076 	mov	r2, #118	; 0x76
   1a180:	e59f1030 	ldr	r1, [pc, #48]	; 1a1b8 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0xa0>
   1a184:	e59f0030 	ldr	r0, [pc, #48]	; 1a1bc <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0xa4>
   1a188:	eb00023a 	bl	1aa78 <assertion_failed>
   1a18c:	eaffffeb 	b	1a140 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x28>
   1a190:	e3a02075 	mov	r2, #117	; 0x75
   1a194:	e59f101c 	ldr	r1, [pc, #28]	; 1a1b8 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0xa0>
   1a198:	e59f0020 	ldr	r0, [pc, #32]	; 1a1c0 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0xa8>
   1a19c:	eb000235 	bl	1aa78 <assertion_failed>
   1a1a0:	eaffffe3 	b	1a134 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x1c>
   1a1a4:	e1a01006 	mov	r1, r6
   1a1a8:	e1a00005 	mov	r0, r5
   1a1ac:	e8bd4070 	pop	{r4, r5, r6, lr}
   1a1b0:	e3a02001 	mov	r2, #1
   1a1b4:	eaffffba 	b	1a0a4 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>
   1a1b8:	00028d4c 	.word	0x00028d4c
   1a1bc:	00028da0 	.word	0x00028da0
   1a1c0:	00028d74 	.word	0x00028d74

0001a1c4 <CMouseBehaviour::ShowCursor(bool)>:
   1a1c4:	e5902008 	ldr	r2, [r0, #8]
   1a1c8:	e5903000 	ldr	r3, [r0]
   1a1cc:	e92d4070 	push	{r4, r5, r6, lr}
   1a1d0:	e1520003 	cmp	r2, r3
   1a1d4:	e5d05011 	ldrb	r5, [r0, #17]
   1a1d8:	e1a04000 	mov	r4, r0
   1a1dc:	e5c01011 	strb	r1, [r0, #17]
   1a1e0:	2a00000d 	bcs	1a21c <CMouseBehaviour::ShowCursor(bool)+0x58>
   1a1e4:	e594100c 	ldr	r1, [r4, #12]
   1a1e8:	e5943004 	ldr	r3, [r4, #4]
   1a1ec:	e1510003 	cmp	r1, r3
   1a1f0:	3a000004 	bcc	1a208 <CMouseBehaviour::ShowCursor(bool)+0x44>
   1a1f4:	e59f1034 	ldr	r1, [pc, #52]	; 1a230 <CMouseBehaviour::ShowCursor(bool)+0x6c>
   1a1f8:	e3a0208e 	mov	r2, #142	; 0x8e
   1a1fc:	e59f0030 	ldr	r0, [pc, #48]	; 1a234 <CMouseBehaviour::ShowCursor(bool)+0x70>
   1a200:	eb00021c 	bl	1aa78 <assertion_failed>
   1a204:	e594100c 	ldr	r1, [r4, #12]
   1a208:	e5d42011 	ldrb	r2, [r4, #17]
   1a20c:	e5940008 	ldr	r0, [r4, #8]
   1a210:	ebffffa3 	bl	1a0a4 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>
   1a214:	e1a00005 	mov	r0, r5
   1a218:	e8bd8070 	pop	{r4, r5, r6, pc}
   1a21c:	e3a0208d 	mov	r2, #141	; 0x8d
   1a220:	e59f1008 	ldr	r1, [pc, #8]	; 1a230 <CMouseBehaviour::ShowCursor(bool)+0x6c>
   1a224:	e59f000c 	ldr	r0, [pc, #12]	; 1a238 <CMouseBehaviour::ShowCursor(bool)+0x74>
   1a228:	eb000212 	bl	1aa78 <assertion_failed>
   1a22c:	eaffffec 	b	1a1e4 <CMouseBehaviour::ShowCursor(bool)+0x20>
   1a230:	00028d4c 	.word	0x00028d4c
   1a234:	00028de8 	.word	0x00028de8
   1a238:	00028dcc 	.word	0x00028dcc

0001a23c <CMouseBehaviour::UpdateCursor()>:
   1a23c:	e5d03011 	ldrb	r3, [r0, #17]
   1a240:	e3530000 	cmp	r3, #0
   1a244:	012fff1e 	bxeq	lr
   1a248:	e5d03010 	ldrb	r3, [r0, #16]
   1a24c:	e3530000 	cmp	r3, #0
   1a250:	012fff1e 	bxeq	lr
   1a254:	e3a03000 	mov	r3, #0
   1a258:	e590100c 	ldr	r1, [r0, #12]
   1a25c:	e5c03010 	strb	r3, [r0, #16]
   1a260:	e3a02001 	mov	r2, #1
   1a264:	e5900008 	ldr	r0, [r0, #8]
   1a268:	eaffff8d 	b	1a0a4 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>

0001a26c <CPartitionManager::CPartitionManager(CDevice*, char const*)>:
   1a26c:	e92d4010 	push	{r4, lr}
   1a270:	e1a04000 	mov	r4, r0
   1a274:	e4801004 	str	r1, [r0], #4
   1a278:	e1a01002 	mov	r1, r2
   1a27c:	eb0016b4 	bl	1fd54 <CString::CString(char const*)>
   1a280:	e3a03000 	mov	r3, #0
   1a284:	e1a00004 	mov	r0, r4
   1a288:	e5843014 	str	r3, [r4, #20]
   1a28c:	e5843018 	str	r3, [r4, #24]
   1a290:	e584301c 	str	r3, [r4, #28]
   1a294:	e5843020 	str	r3, [r4, #32]
   1a298:	e8bd8010 	pop	{r4, pc}

0001a29c <CPartitionManager::~CPartitionManager()>:
   1a29c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1a2a0:	e1a06000 	mov	r6, r0
   1a2a4:	e3a05000 	mov	r5, #0
   1a2a8:	e2804014 	add	r4, r0, #20
   1a2ac:	e2807024 	add	r7, r0, #36	; 0x24
   1a2b0:	e5940000 	ldr	r0, [r4]
   1a2b4:	e3500000 	cmp	r0, #0
   1a2b8:	0a000002 	beq	1a2c8 <CPartitionManager::~CPartitionManager()+0x2c>
   1a2bc:	e5903000 	ldr	r3, [r0]
   1a2c0:	e5933004 	ldr	r3, [r3, #4]
   1a2c4:	e12fff33 	blx	r3
   1a2c8:	e4845004 	str	r5, [r4], #4
   1a2cc:	e1540007 	cmp	r4, r7
   1a2d0:	1afffff6 	bne	1a2b0 <CPartitionManager::~CPartitionManager()+0x14>
   1a2d4:	e1a00006 	mov	r0, r6
   1a2d8:	e4805004 	str	r5, [r0], #4
   1a2dc:	eb001663 	bl	1fc70 <CString::~CString()>
   1a2e0:	e1a00006 	mov	r0, r6
   1a2e4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0001a2e8 <CPartitionManager::Initialize()>:
   1a2e8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a2ec:	e1a06000 	mov	r6, r0
   1a2f0:	e5900000 	ldr	r0, [r0]
   1a2f4:	e3a03000 	mov	r3, #0
   1a2f8:	e5901000 	ldr	r1, [r0]
   1a2fc:	e24ddf87 	sub	sp, sp, #540	; 0x21c
   1a300:	e3a02000 	mov	r2, #0
   1a304:	e5911010 	ldr	r1, [r1, #16]
   1a308:	e12fff31 	blx	r1
   1a30c:	e1903001 	orrs	r3, r0, r1
   1a310:	0a000007 	beq	1a334 <CPartitionManager::Initialize()+0x4c>
   1a314:	eb000bca 	bl	1d244 <CLogger::Get()>
   1a318:	e59f31f0 	ldr	r3, [pc, #496]	; 1a510 <CPartitionManager::Initialize()+0x228>
   1a31c:	e3a02001 	mov	r2, #1
   1a320:	e59f11ec 	ldr	r1, [pc, #492]	; 1a514 <CPartitionManager::Initialize()+0x22c>
   1a324:	eb000d6f 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1a328:	e3a00000 	mov	r0, #0
   1a32c:	e28ddf87 	add	sp, sp, #540	; 0x21c
   1a330:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a334:	e5960000 	ldr	r0, [r6]
   1a338:	e28d1018 	add	r1, sp, #24
   1a33c:	e5903000 	ldr	r3, [r0]
   1a340:	e3a02c02 	mov	r2, #512	; 0x200
   1a344:	e5933008 	ldr	r3, [r3, #8]
   1a348:	e12fff33 	blx	r3
   1a34c:	e3500c02 	cmp	r0, #512	; 0x200
   1a350:	1affffef 	bne	1a314 <CPartitionManager::Initialize()+0x2c>
   1a354:	e28d3f85 	add	r3, sp, #532	; 0x214
   1a358:	e2833002 	add	r3, r3, #2
   1a35c:	e1d320b0 	ldrh	r2, [r3]
   1a360:	e59f31b0 	ldr	r3, [pc, #432]	; 1a518 <CPartitionManager::Initialize()+0x230>
   1a364:	e1520003 	cmp	r2, r3
   1a368:	1a000060 	bne	1a4f0 <CPartitionManager::Initialize()+0x208>
   1a36c:	e3a04000 	mov	r4, #0
   1a370:	e1a09004 	mov	r9, r4
   1a374:	e1a08004 	mov	r8, r4
   1a378:	e59f719c 	ldr	r7, [pc, #412]	; 1a51c <CPartitionManager::Initialize()+0x234>
   1a37c:	e59fb19c 	ldr	fp, [pc, #412]	; 1a520 <CPartitionManager::Initialize()+0x238>
   1a380:	e2865014 	add	r5, r6, #20
   1a384:	e28d3018 	add	r3, sp, #24
   1a388:	e0833204 	add	r3, r3, r4, lsl #4
   1a38c:	e5d321c2 	ldrb	r2, [r3, #450]	; 0x1c2
   1a390:	e28d1f86 	add	r1, sp, #536	; 0x218
   1a394:	e352000f 	cmp	r2, #15
   1a398:	91e03237 	mvnls	r3, r7, lsr r2
   1a39c:	81a03008 	movhi	r3, r8
   1a3a0:	92033001 	andls	r3, r3, #1
   1a3a4:	92233001 	eorls	r3, r3, #1
   1a3a8:	e35200ef 	cmp	r2, #239	; 0xef
   1a3ac:	11a02003 	movne	r2, r3
   1a3b0:	03832001 	orreq	r2, r3, #1
   1a3b4:	e284301c 	add	r3, r4, #28
   1a3b8:	e0811203 	add	r1, r1, r3, lsl #4
   1a3bc:	e3520000 	cmp	r2, #0
   1a3c0:	e2410f7e 	sub	r0, r1, #504	; 0x1f8
   1a3c4:	e2844001 	add	r4, r4, #1
   1a3c8:	1a00003a 	bne	1a4b8 <CPartitionManager::Initialize()+0x1d0>
   1a3cc:	e15020b2 	ldrh	r2, [r0, #-2]
   1a3d0:	e1d000b0 	ldrh	r0, [r0]
   1a3d4:	e2411f7d 	sub	r1, r1, #500	; 0x1f4
   1a3d8:	e1922800 	orrs	r2, r2, r0, lsl #16
   1a3dc:	0a000035 	beq	1a4b8 <CPartitionManager::Initialize()+0x1d0>
   1a3e0:	e15120b2 	ldrh	r2, [r1, #-2]
   1a3e4:	e1d110b0 	ldrh	r1, [r1]
   1a3e8:	e1922801 	orrs	r2, r2, r1, lsl #16
   1a3ec:	0a000031 	beq	1a4b8 <CPartitionManager::Initialize()+0x1d0>
   1a3f0:	e5952000 	ldr	r2, [r5]
   1a3f4:	e1a0a006 	mov	sl, r6
   1a3f8:	e3520000 	cmp	r2, #0
   1a3fc:	e2899001 	add	r9, r9, #1
   1a400:	0a000005 	beq	1a41c <CPartitionManager::Initialize()+0x134>
   1a404:	e3a02070 	mov	r2, #112	; 0x70
   1a408:	e59f1114 	ldr	r1, [pc, #276]	; 1a524 <CPartitionManager::Initialize()+0x23c>
   1a40c:	e59f0114 	ldr	r0, [pc, #276]	; 1a528 <CPartitionManager::Initialize()+0x240>
   1a410:	e58d3000 	str	r3, [sp]
   1a414:	eb000197 	bl	1aa78 <assertion_failed>
   1a418:	e59d3000 	ldr	r3, [sp]
   1a41c:	e3a00020 	mov	r0, #32
   1a420:	e58d3004 	str	r3, [sp, #4]
   1a424:	eb002258 	bl	22d8c <operator new(unsigned int)>
   1a428:	e59d3004 	ldr	r3, [sp, #4]
   1a42c:	e28d2f86 	add	r2, sp, #536	; 0x218
   1a430:	e0823203 	add	r3, r2, r3, lsl #4
   1a434:	e58d0000 	str	r0, [sp]
   1a438:	e2432f7d 	sub	r2, r3, #500	; 0x1f4
   1a43c:	e2431f7e 	sub	r1, r3, #504	; 0x1f8
   1a440:	e1d2c0b0 	ldrh	ip, [r2]
   1a444:	e15230b2 	ldrh	r3, [r2, #-2]
   1a448:	e15120b2 	ldrh	r2, [r1, #-2]
   1a44c:	e1d110b0 	ldrh	r1, [r1]
   1a450:	e183380c 	orr	r3, r3, ip, lsl #16
   1a454:	e1822801 	orr	r2, r2, r1, lsl #16
   1a458:	e49a1004 	ldr	r1, [sl], #4
   1a45c:	eb0000d8 	bl	1a7c4 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)>
   1a460:	e59d3000 	ldr	r3, [sp]
   1a464:	e28d0008 	add	r0, sp, #8
   1a468:	e5853000 	str	r3, [r5]
   1a46c:	eb001632 	bl	1fd3c <CString::CString()>
   1a470:	e1a0000a 	mov	r0, sl
   1a474:	eb001646 	bl	1fd94 <CString::operator char const*() const>
   1a478:	e1a03009 	mov	r3, r9
   1a47c:	e1a02000 	mov	r2, r0
   1a480:	e1a0100b 	mov	r1, fp
   1a484:	e28d0008 	add	r0, sp, #8
   1a488:	eb001a19 	bl	20cf4 <CString::Format(char const*, ...)>
   1a48c:	eb000472 	bl	1b65c <CDeviceNameService::Get()>
   1a490:	e1a0a000 	mov	sl, r0
   1a494:	e28d0008 	add	r0, sp, #8
   1a498:	eb00163d 	bl	1fd94 <CString::operator char const*() const>
   1a49c:	e3a03001 	mov	r3, #1
   1a4a0:	e1a01000 	mov	r1, r0
   1a4a4:	e5952000 	ldr	r2, [r5]
   1a4a8:	e1a0000a 	mov	r0, sl
   1a4ac:	eb0003aa 	bl	1b35c <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   1a4b0:	e28d0008 	add	r0, sp, #8
   1a4b4:	eb0015ed 	bl	1fc70 <CString::~CString()>
   1a4b8:	e3540004 	cmp	r4, #4
   1a4bc:	e2855004 	add	r5, r5, #4
   1a4c0:	1affffaf 	bne	1a384 <CPartitionManager::Initialize()+0x9c>
   1a4c4:	e3590000 	cmp	r9, #0
   1a4c8:	13a00001 	movne	r0, #1
   1a4cc:	1affff96 	bne	1a32c <CPartitionManager::Initialize()+0x44>
   1a4d0:	eb000b5b 	bl	1d244 <CLogger::Get()>
   1a4d4:	e59f3050 	ldr	r3, [pc, #80]	; 1a52c <CPartitionManager::Initialize()+0x244>
   1a4d8:	e3a02002 	mov	r2, #2
   1a4dc:	e59f1030 	ldr	r1, [pc, #48]	; 1a514 <CPartitionManager::Initialize()+0x22c>
   1a4e0:	eb000d00 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1a4e4:	e3a00001 	mov	r0, #1
   1a4e8:	e28ddf87 	add	sp, sp, #540	; 0x21c
   1a4ec:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a4f0:	eb000b53 	bl	1d244 <CLogger::Get()>
   1a4f4:	e59f3034 	ldr	r3, [pc, #52]	; 1a530 <CPartitionManager::Initialize()+0x248>
   1a4f8:	e3a02002 	mov	r2, #2
   1a4fc:	e59f1010 	ldr	r1, [pc, #16]	; 1a514 <CPartitionManager::Initialize()+0x22c>
   1a500:	eb000cf8 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1a504:	e3a00001 	mov	r0, #1
   1a508:	e28ddf87 	add	sp, sp, #540	; 0x21c
   1a50c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a510:	00028e7c 	.word	0x00028e7c
   1a514:	00028e04 	.word	0x00028e04
   1a518:	0000aa55 	.word	0x0000aa55
   1a51c:	00008021 	.word	0x00008021
   1a520:	00028e50 	.word	0x00028e50
   1a524:	00028e20 	.word	0x00028e20
   1a528:	00028e38 	.word	0x00028e38
   1a52c:	00028e58 	.word	0x00028e58
   1a530:	00028e0c 	.word	0x00028e0c

0001a534 <CPartition::Read(void*, unsigned int)>:
   1a534:	e5d03018 	ldrb	r3, [r0, #24]
   1a538:	e3530000 	cmp	r3, #0
   1a53c:	1a000021 	bne	1a5c8 <CPartition::Read(void*, unsigned int)+0x94>
   1a540:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a544:	e1c061d0 	ldrd	r6, [r0, #16]
   1a548:	e3a05000 	mov	r5, #0
   1a54c:	e3a09000 	mov	r9, #0
   1a550:	e59f4080 	ldr	r4, [pc, #128]	; 1a5d8 <CPartition::Read(void*, unsigned int)+0xa4>
   1a554:	e590800c 	ldr	r8, [r0, #12]
   1a558:	e0944002 	adds	r4, r4, r2
   1a55c:	e2a55000 	adc	r5, r5, #0
   1a560:	e0944006 	adds	r4, r4, r6
   1a564:	e0a55007 	adc	r5, r5, r7
   1a568:	e1a064a4 	lsr	r6, r4, #9
   1a56c:	e1a074a5 	lsr	r7, r5, #9
   1a570:	e1866b85 	orr	r6, r6, r5, lsl #23
   1a574:	e1570009 	cmp	r7, r9
   1a578:	01560008 	cmpeq	r6, r8
   1a57c:	8a000013 	bhi	1a5d0 <CPartition::Read(void*, unsigned int)+0x9c>
   1a580:	e1a04000 	mov	r4, r0
   1a584:	e5900004 	ldr	r0, [r0, #4]
   1a588:	e1a05002 	mov	r5, r2
   1a58c:	e3500000 	cmp	r0, #0
   1a590:	e1a06001 	mov	r6, r1
   1a594:	0a000005 	beq	1a5b0 <CPartition::Read(void*, unsigned int)+0x7c>
   1a598:	e5903000 	ldr	r3, [r0]
   1a59c:	e1a02005 	mov	r2, r5
   1a5a0:	e1a01006 	mov	r1, r6
   1a5a4:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a5a8:	e5933008 	ldr	r3, [r3, #8]
   1a5ac:	e12fff13 	bx	r3
   1a5b0:	e59f0024 	ldr	r0, [pc, #36]	; 1a5dc <CPartition::Read(void*, unsigned int)+0xa8>
   1a5b4:	e3a02035 	mov	r2, #53	; 0x35
   1a5b8:	e59f1020 	ldr	r1, [pc, #32]	; 1a5e0 <CPartition::Read(void*, unsigned int)+0xac>
   1a5bc:	eb00012d 	bl	1aa78 <assertion_failed>
   1a5c0:	e5940004 	ldr	r0, [r4, #4]
   1a5c4:	eafffff3 	b	1a598 <CPartition::Read(void*, unsigned int)+0x64>
   1a5c8:	e3e00000 	mvn	r0, #0
   1a5cc:	e12fff1e 	bx	lr
   1a5d0:	e3e00000 	mvn	r0, #0
   1a5d4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a5d8:	000001ff 	.word	0x000001ff
   1a5dc:	00024e20 	.word	0x00024e20
   1a5e0:	00028ea8 	.word	0x00028ea8

0001a5e4 <CPartition::Write(void const*, unsigned int)>:
   1a5e4:	e5d03018 	ldrb	r3, [r0, #24]
   1a5e8:	e3530000 	cmp	r3, #0
   1a5ec:	1a000021 	bne	1a678 <CPartition::Write(void const*, unsigned int)+0x94>
   1a5f0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a5f4:	e1c061d0 	ldrd	r6, [r0, #16]
   1a5f8:	e3a05000 	mov	r5, #0
   1a5fc:	e3a09000 	mov	r9, #0
   1a600:	e59f4080 	ldr	r4, [pc, #128]	; 1a688 <CPartition::Write(void const*, unsigned int)+0xa4>
   1a604:	e590800c 	ldr	r8, [r0, #12]
   1a608:	e0944002 	adds	r4, r4, r2
   1a60c:	e2a55000 	adc	r5, r5, #0
   1a610:	e0944006 	adds	r4, r4, r6
   1a614:	e0a55007 	adc	r5, r5, r7
   1a618:	e1a064a4 	lsr	r6, r4, #9
   1a61c:	e1a074a5 	lsr	r7, r5, #9
   1a620:	e1866b85 	orr	r6, r6, r5, lsl #23
   1a624:	e1570009 	cmp	r7, r9
   1a628:	01560008 	cmpeq	r6, r8
   1a62c:	8a000013 	bhi	1a680 <CPartition::Write(void const*, unsigned int)+0x9c>
   1a630:	e1a04000 	mov	r4, r0
   1a634:	e5900004 	ldr	r0, [r0, #4]
   1a638:	e1a05002 	mov	r5, r2
   1a63c:	e3500000 	cmp	r0, #0
   1a640:	e1a06001 	mov	r6, r1
   1a644:	0a000005 	beq	1a660 <CPartition::Write(void const*, unsigned int)+0x7c>
   1a648:	e5903000 	ldr	r3, [r0]
   1a64c:	e1a02005 	mov	r2, r5
   1a650:	e1a01006 	mov	r1, r6
   1a654:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a658:	e593300c 	ldr	r3, [r3, #12]
   1a65c:	e12fff13 	bx	r3
   1a660:	e59f0024 	ldr	r0, [pc, #36]	; 1a68c <CPartition::Write(void const*, unsigned int)+0xa8>
   1a664:	e3a02047 	mov	r2, #71	; 0x47
   1a668:	e59f1020 	ldr	r1, [pc, #32]	; 1a690 <CPartition::Write(void const*, unsigned int)+0xac>
   1a66c:	eb000101 	bl	1aa78 <assertion_failed>
   1a670:	e5940004 	ldr	r0, [r4, #4]
   1a674:	eafffff3 	b	1a648 <CPartition::Write(void const*, unsigned int)+0x64>
   1a678:	e3e00000 	mvn	r0, #0
   1a67c:	e12fff1e 	bx	lr
   1a680:	e3e00000 	mvn	r0, #0
   1a684:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a688:	000001ff 	.word	0x000001ff
   1a68c:	00024e20 	.word	0x00024e20
   1a690:	00028ea8 	.word	0x00028ea8

0001a694 <CPartition::~CPartition()>:
   1a694:	e3a02000 	mov	r2, #0
   1a698:	e92d4010 	push	{r4, lr}
   1a69c:	e1a04000 	mov	r4, r0
   1a6a0:	e59f3010 	ldr	r3, [pc, #16]	; 1a6b8 <CPartition::~CPartition()+0x24>
   1a6a4:	e5802004 	str	r2, [r0, #4]
   1a6a8:	e5803000 	str	r3, [r0]
   1a6ac:	eb0002ed 	bl	1b268 <CDevice::~CDevice()>
   1a6b0:	e1a00004 	mov	r0, r4
   1a6b4:	e8bd8010 	pop	{r4, pc}
   1a6b8:	00028e94 	.word	0x00028e94

0001a6bc <CPartition::~CPartition()>:
   1a6bc:	e3a02000 	mov	r2, #0
   1a6c0:	e92d4010 	push	{r4, lr}
   1a6c4:	e1a04000 	mov	r4, r0
   1a6c8:	e59f301c 	ldr	r3, [pc, #28]	; 1a6ec <CPartition::~CPartition()+0x30>
   1a6cc:	e5802004 	str	r2, [r0, #4]
   1a6d0:	e5803000 	str	r3, [r0]
   1a6d4:	eb0002e3 	bl	1b268 <CDevice::~CDevice()>
   1a6d8:	e1a00004 	mov	r0, r4
   1a6dc:	e3a01020 	mov	r1, #32
   1a6e0:	eb0021ad 	bl	22d9c <operator delete(void*, unsigned int)>
   1a6e4:	e1a00004 	mov	r0, r4
   1a6e8:	e8bd8010 	pop	{r4, pc}
   1a6ec:	00028e94 	.word	0x00028e94

0001a6f0 <CPartition::Seek(unsigned long long)>:
   1a6f0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a6f4:	e3a05000 	mov	r5, #0
   1a6f8:	e3a01001 	mov	r1, #1
   1a6fc:	e59f40b4 	ldr	r4, [pc, #180]	; 1a7b8 <CPartition::Seek(unsigned long long)+0xc8>
   1a700:	e0055003 	and	r5, r5, r3
   1a704:	e0044002 	and	r4, r4, r2
   1a708:	e194c005 	orrs	ip, r4, r5
   1a70c:	e5c01018 	strb	r1, [r0, #24]
   1a710:	0a000002 	beq	1a720 <CPartition::Seek(unsigned long long)+0x30>
   1a714:	e3e00000 	mvn	r0, #0
   1a718:	e1a01000 	mov	r1, r0
   1a71c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a720:	e3a07000 	mov	r7, #0
   1a724:	e590600c 	ldr	r6, [r0, #12]
   1a728:	e1a044a2 	lsr	r4, r2, #9
   1a72c:	e1a054a3 	lsr	r5, r3, #9
   1a730:	e1844b83 	orr	r4, r4, r3, lsl #23
   1a734:	e1550007 	cmp	r5, r7
   1a738:	01540006 	cmpeq	r4, r6
   1a73c:	2afffff4 	bcs	1a714 <CPartition::Seek(unsigned long long)+0x24>
   1a740:	e1a07003 	mov	r7, r3
   1a744:	e1a04000 	mov	r4, r0
   1a748:	e9900009 	ldmib	r0, {r0, r3}
   1a74c:	e1a08483 	lsl	r8, r3, #9
   1a750:	e0988002 	adds	r8, r8, r2
   1a754:	e1a09ba3 	lsr	r9, r3, #23
   1a758:	e0a99007 	adc	r9, r9, r7
   1a75c:	e3500000 	cmp	r0, #0
   1a760:	e1a06002 	mov	r6, r2
   1a764:	0a00000d 	beq	1a7a0 <CPartition::Seek(unsigned long long)+0xb0>
   1a768:	e5903000 	ldr	r3, [r0]
   1a76c:	e1a02008 	mov	r2, r8
   1a770:	e5931010 	ldr	r1, [r3, #16]
   1a774:	e1a03009 	mov	r3, r9
   1a778:	e12fff31 	blx	r1
   1a77c:	e1590001 	cmp	r9, r1
   1a780:	01580000 	cmpeq	r8, r0
   1a784:	1affffe2 	bne	1a714 <CPartition::Seek(unsigned long long)+0x24>
   1a788:	e3a03000 	mov	r3, #0
   1a78c:	e1a00006 	mov	r0, r6
   1a790:	e1a01007 	mov	r1, r7
   1a794:	e1c461f0 	strd	r6, [r4, #16]
   1a798:	e5c43018 	strb	r3, [r4, #24]
   1a79c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a7a0:	e59f0014 	ldr	r0, [pc, #20]	; 1a7bc <CPartition::Seek(unsigned long long)+0xcc>
   1a7a4:	e3a02059 	mov	r2, #89	; 0x59
   1a7a8:	e59f1010 	ldr	r1, [pc, #16]	; 1a7c0 <CPartition::Seek(unsigned long long)+0xd0>
   1a7ac:	eb0000b1 	bl	1aa78 <assertion_failed>
   1a7b0:	e5940004 	ldr	r0, [r4, #4]
   1a7b4:	eaffffeb 	b	1a768 <CPartition::Seek(unsigned long long)+0x78>
   1a7b8:	000001ff 	.word	0x000001ff
   1a7bc:	00024e20 	.word	0x00024e20
   1a7c0:	00028ea8 	.word	0x00028ea8

0001a7c4 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)>:
   1a7c4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a7c8:	e1a05001 	mov	r5, r1
   1a7cc:	e1a04000 	mov	r4, r0
   1a7d0:	e1a09002 	mov	r9, r2
   1a7d4:	e1a08003 	mov	r8, r3
   1a7d8:	e3a06000 	mov	r6, #0
   1a7dc:	eb0002ad 	bl	1b298 <CDevice::CDevice()>
   1a7e0:	e3a07000 	mov	r7, #0
   1a7e4:	e3a01001 	mov	r1, #1
   1a7e8:	e59f0038 	ldr	r0, [pc, #56]	; 1a828 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)+0x64>
   1a7ec:	e3550000 	cmp	r5, #0
   1a7f0:	e9840220 	stmib	r4, {r5, r9}
   1a7f4:	e584800c 	str	r8, [r4, #12]
   1a7f8:	e5840000 	str	r0, [r4]
   1a7fc:	e1c461f0 	strd	r6, [r4, #16]
   1a800:	e5c41018 	strb	r1, [r4, #24]
   1a804:	0a000001 	beq	1a810 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)+0x4c>
   1a808:	e1a00004 	mov	r0, r4
   1a80c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a810:	e3a0201f 	mov	r2, #31
   1a814:	e59f1010 	ldr	r1, [pc, #16]	; 1a82c <CPartition::CPartition(CDevice*, unsigned int, unsigned int)+0x68>
   1a818:	e59f0010 	ldr	r0, [pc, #16]	; 1a830 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)+0x6c>
   1a81c:	eb000095 	bl	1aa78 <assertion_failed>
   1a820:	e1a00004 	mov	r0, r4
   1a824:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a828:	00028e94 	.word	0x00028e94
   1a82c:	00028ea8 	.word	0x00028ea8
   1a830:	00024e20 	.word	0x00024e20

0001a834 <CActLED::~CActLED()>:
   1a834:	e3a02000 	mov	r2, #0
   1a838:	e59f3004 	ldr	r3, [pc, #4]	; 1a844 <CActLED::~CActLED()+0x10>
   1a83c:	e5832000 	str	r2, [r3]
   1a840:	e12fff1e 	bx	lr
   1a844:	0002b950 	.word	0x0002b950

0001a848 <CActLED::On()>:
   1a848:	e5903000 	ldr	r3, [r0]
   1a84c:	e3530000 	cmp	r3, #0
   1a850:	0a000002 	beq	1a860 <CActLED::On()+0x18>
   1a854:	e5d01008 	ldrb	r1, [r0, #8]
   1a858:	e1a00003 	mov	r0, r3
   1a85c:	ea000459 	b	1b9c8 <CGPIOPin::Write(unsigned int)>
   1a860:	e5903004 	ldr	r3, [r0, #4]
   1a864:	e3530000 	cmp	r3, #0
   1a868:	012fff1e 	bxeq	lr
   1a86c:	e5d01008 	ldrb	r1, [r0, #8]
   1a870:	e1a00003 	mov	r0, r3
   1a874:	ea001ee0 	b	223fc <CVirtualGPIOPin::Write(unsigned int)>

0001a878 <CActLED::Off()>:
   1a878:	e5903000 	ldr	r3, [r0]
   1a87c:	e3530000 	cmp	r3, #0
   1a880:	0a000003 	beq	1a894 <CActLED::Off()+0x1c>
   1a884:	e5d01008 	ldrb	r1, [r0, #8]
   1a888:	e1a00003 	mov	r0, r3
   1a88c:	e2211001 	eor	r1, r1, #1
   1a890:	ea00044c 	b	1b9c8 <CGPIOPin::Write(unsigned int)>
   1a894:	e5903004 	ldr	r3, [r0, #4]
   1a898:	e3530000 	cmp	r3, #0
   1a89c:	012fff1e 	bxeq	lr
   1a8a0:	e5d01008 	ldrb	r1, [r0, #8]
   1a8a4:	e1a00003 	mov	r0, r3
   1a8a8:	e2211001 	eor	r1, r1, #1
   1a8ac:	ea001ed2 	b	223fc <CVirtualGPIOPin::Write(unsigned int)>

0001a8b0 <CActLED::CActLED()>:
   1a8b0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1a8b4:	e3a05000 	mov	r5, #0
   1a8b8:	e1a04000 	mov	r4, r0
   1a8bc:	e24dd024 	sub	sp, sp, #36	; 0x24
   1a8c0:	e59f314c 	ldr	r3, [pc, #332]	; 1aa14 <CActLED::CActLED()+0x164>
   1a8c4:	e5805000 	str	r5, [r0]
   1a8c8:	e5805004 	str	r5, [r0, #4]
   1a8cc:	e28d000c 	add	r0, sp, #12
   1a8d0:	e5834000 	str	r4, [r3]
   1a8d4:	eb00008b 	bl	1ab08 <CBcmPropertyTags::CBcmPropertyTags()>
   1a8d8:	e3a03010 	mov	r3, #16
   1a8dc:	e58d5000 	str	r5, [sp]
   1a8e0:	e28d000c 	add	r0, sp, #12
   1a8e4:	e08d2003 	add	r2, sp, r3
   1a8e8:	e59f1128 	ldr	r1, [pc, #296]	; 1aa18 <CActLED::CActLED()+0x168>
   1a8ec:	eb0000dc 	bl	1ac64 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   1a8f0:	e2506000 	subs	r6, r0, #0
   1a8f4:	0a00001f 	beq	1a978 <CActLED::CActLED()+0xc8>
   1a8f8:	e59d301c 	ldr	r3, [sp, #28]
   1a8fc:	e3130502 	tst	r3, #8388608	; 0x800000
   1a900:	0a000021 	beq	1a98c <CActLED::CActLED()+0xdc>
   1a904:	e1a03223 	lsr	r3, r3, #4
   1a908:	e6ef3073 	uxtb	r3, r3
   1a90c:	e243200d 	sub	r2, r3, #13
   1a910:	e3530008 	cmp	r3, #8
   1a914:	13520001 	cmpne	r2, #1
   1a918:	93a01001 	movls	r1, #1
   1a91c:	83a01000 	movhi	r1, #0
   1a920:	e353000c 	cmp	r3, #12
   1a924:	13530009 	cmpne	r3, #9
   1a928:	03a06001 	moveq	r6, #1
   1a92c:	13a06000 	movne	r6, #0
   1a930:	e3530001 	cmp	r3, #1
   1a934:	9a000017 	bls	1a998 <CActLED::CActLED()+0xe8>
   1a938:	e3510000 	cmp	r1, #0
   1a93c:	0a00002a 	beq	1a9ec <CActLED::CActLED()+0x13c>
   1a940:	e3520001 	cmp	r2, #1
   1a944:	8a000020 	bhi	1a9cc <CActLED::CActLED()+0x11c>
   1a948:	e3a00028 	mov	r0, #40	; 0x28
   1a94c:	eb00210e 	bl	22d8c <operator new(unsigned int)>
   1a950:	e3a02001 	mov	r2, #1
   1a954:	e1a07000 	mov	r7, r0
   1a958:	e1a03005 	mov	r3, r5
   1a95c:	e3a0101d 	mov	r1, #29
   1a960:	e0266002 	eor	r6, r6, r2
   1a964:	eb0006b9 	bl	1c450 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
   1a968:	e5847000 	str	r7, [r4]
   1a96c:	e5c46008 	strb	r6, [r4, #8]
   1a970:	e1a00004 	mov	r0, r4
   1a974:	ebffffbf 	bl	1a878 <CActLED::Off()>
   1a978:	e28d000c 	add	r0, sp, #12
   1a97c:	eb000067 	bl	1ab20 <CBcmPropertyTags::~CBcmPropertyTags()>
   1a980:	e1a00004 	mov	r0, r4
   1a984:	e28dd024 	add	sp, sp, #36	; 0x24
   1a988:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1a98c:	e6ff3073 	uxth	r3, r3
   1a990:	e353000f 	cmp	r3, #15
   1a994:	8a000015 	bhi	1a9f0 <CActLED::CActLED()+0x140>
   1a998:	e3a00028 	mov	r0, #40	; 0x28
   1a99c:	eb0020fa 	bl	22d8c <operator new(unsigned int)>
   1a9a0:	e3a03000 	mov	r3, #0
   1a9a4:	e3a02001 	mov	r2, #1
   1a9a8:	e3a01010 	mov	r1, #16
   1a9ac:	e1a05000 	mov	r5, r0
   1a9b0:	eb0006a6 	bl	1c450 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
   1a9b4:	e3a03000 	mov	r3, #0
   1a9b8:	e5845000 	str	r5, [r4]
   1a9bc:	e5c43008 	strb	r3, [r4, #8]
   1a9c0:	e1a00004 	mov	r0, r4
   1a9c4:	ebffffab 	bl	1a878 <CActLED::Off()>
   1a9c8:	eaffffea 	b	1a978 <CActLED::CActLED()+0xc8>
   1a9cc:	e3a00010 	mov	r0, #16
   1a9d0:	eb0020ed 	bl	22d8c <operator new(unsigned int)>
   1a9d4:	e1a07000 	mov	r7, r0
   1a9d8:	e1a01005 	mov	r1, r5
   1a9dc:	eb001e35 	bl	222b8 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)>
   1a9e0:	e2266001 	eor	r6, r6, #1
   1a9e4:	e5847004 	str	r7, [r4, #4]
   1a9e8:	eaffffdf 	b	1a96c <CActLED::CActLED()+0xbc>
   1a9ec:	e2266001 	eor	r6, r6, #1
   1a9f0:	e3a00028 	mov	r0, #40	; 0x28
   1a9f4:	eb0020e4 	bl	22d8c <operator new(unsigned int)>
   1a9f8:	e1a05000 	mov	r5, r0
   1a9fc:	e3a03000 	mov	r3, #0
   1aa00:	e3a02001 	mov	r2, #1
   1aa04:	e3a0102f 	mov	r1, #47	; 0x2f
   1aa08:	eb000690 	bl	1c450 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
   1aa0c:	e5845000 	str	r5, [r4]
   1aa10:	eaffffd5 	b	1a96c <CActLED::CActLED()+0xbc>
   1aa14:	0002b950 	.word	0x0002b950
   1aa18:	00010002 	.word	0x00010002

0001aa1c <CActLED::Blink(unsigned int, unsigned int, unsigned int)>:
   1aa1c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1aa20:	e2516000 	subs	r6, r1, #0
   1aa24:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   1aa28:	e1a08003 	mov	r8, r3
   1aa2c:	e1a07002 	mov	r7, r2
   1aa30:	e1a05000 	mov	r5, r0
   1aa34:	e3a04001 	mov	r4, #1
   1aa38:	e1a00005 	mov	r0, r5
   1aa3c:	ebffff81 	bl	1a848 <CActLED::On()>
   1aa40:	e1a00007 	mov	r0, r7
   1aa44:	eb001c1a 	bl	21ab4 <CTimer::SimpleMsDelay(unsigned int)>
   1aa48:	e1a00005 	mov	r0, r5
   1aa4c:	ebffff89 	bl	1a878 <CActLED::Off()>
   1aa50:	e2844001 	add	r4, r4, #1
   1aa54:	e1a00008 	mov	r0, r8
   1aa58:	eb001c15 	bl	21ab4 <CTimer::SimpleMsDelay(unsigned int)>
   1aa5c:	e1560004 	cmp	r6, r4
   1aa60:	2afffff4 	bcs	1aa38 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x1c>
   1aa64:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0001aa68 <CActLED::Get()>:
   1aa68:	e59f3004 	ldr	r3, [pc, #4]	; 1aa74 <CActLED::Get()+0xc>
   1aa6c:	e5930000 	ldr	r0, [r3]
   1aa70:	e12fff1e 	bx	lr
   1aa74:	0002b950 	.word	0x0002b950

0001aa78 <assertion_failed>:
   1aa78:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1aa7c:	e1a05000 	mov	r5, r0
   1aa80:	e24dd01c 	sub	sp, sp, #28
   1aa84:	e1a06001 	mov	r6, r1
   1aa88:	e1a07002 	mov	r7, r2
   1aa8c:	e1a0400d 	mov	r4, sp
   1aa90:	eb0007f4 	bl	1ca68 <CInterruptSystem::DisableFIQ()>
   1aa94:	f1080040 	cpsie	f
   1aa98:	e28d0008 	add	r0, sp, #8
   1aa9c:	eb0014a6 	bl	1fd3c <CString::CString()>
   1aaa0:	e1a03007 	mov	r3, r7
   1aaa4:	e1a02006 	mov	r2, r6
   1aaa8:	e28d0008 	add	r0, sp, #8
   1aaac:	e59f104c 	ldr	r1, [pc, #76]	; 1ab00 <assertion_failed+0x88>
   1aab0:	eb00188f 	bl	20cf4 <CString::Format(char const*, ...)>
   1aab4:	e28d0008 	add	r0, sp, #8
   1aab8:	eb0014b5 	bl	1fd94 <CString::operator char const*() const>
   1aabc:	e1a01000 	mov	r1, r0
   1aac0:	e1a00004 	mov	r0, r4
   1aac4:	eb0001be 	bl	1b1c4 <debug_stacktrace(unsigned int const*, char const*)>
   1aac8:	eb0009dd 	bl	1d244 <CLogger::Get()>
   1aacc:	e1a04000 	mov	r4, r0
   1aad0:	e28d0008 	add	r0, sp, #8
   1aad4:	eb0014ae 	bl	1fd94 <CString::operator char const*() const>
   1aad8:	e59f3024 	ldr	r3, [pc, #36]	; 1ab04 <assertion_failed+0x8c>
   1aadc:	e1a01000 	mov	r1, r0
   1aae0:	e3a02000 	mov	r2, #0
   1aae4:	e1a00004 	mov	r0, r4
   1aae8:	e58d5000 	str	r5, [sp]
   1aaec:	eb000b7d 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1aaf0:	e28d0008 	add	r0, sp, #8
   1aaf4:	eb00145d 	bl	1fc70 <CString::~CString()>
   1aaf8:	e28dd01c 	add	sp, sp, #28
   1aafc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1ab00:	00028eb8 	.word	0x00028eb8
   1ab04:	00028ec0 	.word	0x00028ec0

0001ab08 <CBcmPropertyTags::CBcmPropertyTags()>:
   1ab08:	e92d4010 	push	{r4, lr}
   1ab0c:	e1a04000 	mov	r4, r0
   1ab10:	e3a01008 	mov	r1, #8
   1ab14:	eb00234e 	bl	23854 <CBcmMailBox::CBcmMailBox(unsigned int)>
   1ab18:	e1a00004 	mov	r0, r4
   1ab1c:	e8bd8010 	pop	{r4, pc}

0001ab20 <CBcmPropertyTags::~CBcmPropertyTags()>:
   1ab20:	e92d4010 	push	{r4, lr}
   1ab24:	e1a04000 	mov	r4, r0
   1ab28:	eb00234b 	bl	2385c <CBcmMailBox::~CBcmMailBox()>
   1ab2c:	e1a00004 	mov	r0, r4
   1ab30:	e8bd8010 	pop	{r4, pc}

0001ab34 <CBcmPropertyTags::GetTags(void*, unsigned int)>:
   1ab34:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ab38:	e2519000 	subs	r9, r1, #0
   1ab3c:	e1a0a000 	mov	sl, r0
   1ab40:	e1a07002 	mov	r7, r2
   1ab44:	0a00003d 	beq	1ac40 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x10c>
   1ab48:	e357000f 	cmp	r7, #15
   1ab4c:	9a000036 	bls	1ac2c <CBcmPropertyTags::GetTags(void*, unsigned int)+0xf8>
   1ab50:	e287600c 	add	r6, r7, #12
   1ab54:	e3160003 	tst	r6, #3
   1ab58:	1a00002e 	bne	1ac18 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xe4>
   1ab5c:	e3a00000 	mov	r0, #0
   1ab60:	eb001ff8 	bl	22b48 <CMemorySystem::GetCoherentPage(unsigned int)>
   1ab64:	e3a05000 	mov	r5, #0
   1ab68:	e1a04000 	mov	r4, r0
   1ab6c:	e1a01426 	lsr	r1, r6, #8
   1ab70:	e1a02826 	lsr	r2, r6, #16
   1ab74:	e1a03c26 	lsr	r3, r6, #24
   1ab78:	e2808008 	add	r8, r0, #8
   1ab7c:	e5c06000 	strb	r6, [r0]
   1ab80:	e5c01001 	strb	r1, [r0, #1]
   1ab84:	e5c02002 	strb	r2, [r0, #2]
   1ab88:	e5c03003 	strb	r3, [r0, #3]
   1ab8c:	e1a02007 	mov	r2, r7
   1ab90:	e1a00008 	mov	r0, r8
   1ab94:	e5c45004 	strb	r5, [r4, #4]
   1ab98:	e5c45005 	strb	r5, [r4, #5]
   1ab9c:	e5c45006 	strb	r5, [r4, #6]
   1aba0:	e5c45007 	strb	r5, [r4, #7]
   1aba4:	e1a01009 	mov	r1, r9
   1aba8:	eb001d7b 	bl	2219c <memcpy>
   1abac:	e7885007 	str	r5, [r8, r7]
   1abb0:	ee075f9a 	mcr	15, 0, r5, cr7, cr10, {4}
   1abb4:	e3c46103 	bic	r6, r4, #-1073741824	; 0xc0000000
   1abb8:	e3866101 	orr	r6, r6, #1073741824	; 0x40000000
   1abbc:	e1a0000a 	mov	r0, sl
   1abc0:	e1a01006 	mov	r1, r6
   1abc4:	eb002354 	bl	2391c <CBcmMailBox::WriteRead(unsigned int)>
   1abc8:	e1560000 	cmp	r6, r0
   1abcc:	0a000001 	beq	1abd8 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xa4>
   1abd0:	e3a00000 	mov	r0, #0
   1abd4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1abd8:	ee075fba 	mcr	15, 0, r5, cr7, cr10, {5}
   1abdc:	e5d42005 	ldrb	r2, [r4, #5]
   1abe0:	e5d43004 	ldrb	r3, [r4, #4]
   1abe4:	e5d41006 	ldrb	r1, [r4, #6]
   1abe8:	e1833402 	orr	r3, r3, r2, lsl #8
   1abec:	e5d42007 	ldrb	r2, [r4, #7]
   1abf0:	e1833801 	orr	r3, r3, r1, lsl #16
   1abf4:	e1833c02 	orr	r3, r3, r2, lsl #24
   1abf8:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
   1abfc:	1afffff3 	bne	1abd0 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x9c>
   1ac00:	e1a02007 	mov	r2, r7
   1ac04:	e1a01008 	mov	r1, r8
   1ac08:	e1a00009 	mov	r0, r9
   1ac0c:	eb001d62 	bl	2219c <memcpy>
   1ac10:	e3a00001 	mov	r0, #1
   1ac14:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ac18:	e3a02053 	mov	r2, #83	; 0x53
   1ac1c:	e59f1030 	ldr	r1, [pc, #48]	; 1ac54 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x120>
   1ac20:	e59f0030 	ldr	r0, [pc, #48]	; 1ac58 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x124>
   1ac24:	ebffff93 	bl	1aa78 <assertion_failed>
   1ac28:	eaffffcb 	b	1ab5c <CBcmPropertyTags::GetTags(void*, unsigned int)+0x28>
   1ac2c:	e3a02051 	mov	r2, #81	; 0x51
   1ac30:	e59f101c 	ldr	r1, [pc, #28]	; 1ac54 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x120>
   1ac34:	e59f0020 	ldr	r0, [pc, #32]	; 1ac5c <CBcmPropertyTags::GetTags(void*, unsigned int)+0x128>
   1ac38:	ebffff8e 	bl	1aa78 <assertion_failed>
   1ac3c:	eaffffc3 	b	1ab50 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x1c>
   1ac40:	e3a02050 	mov	r2, #80	; 0x50
   1ac44:	e59f1008 	ldr	r1, [pc, #8]	; 1ac54 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x120>
   1ac48:	e59f0010 	ldr	r0, [pc, #16]	; 1ac60 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x12c>
   1ac4c:	ebffff89 	bl	1aa78 <assertion_failed>
   1ac50:	eaffffbc 	b	1ab48 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x14>
   1ac54:	00028ed8 	.word	0x00028ed8
   1ac58:	00028f24 	.word	0x00028f24
   1ac5c:	00028ef8 	.word	0x00028ef8
   1ac60:	00028eec 	.word	0x00028eec

0001ac64 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>:
   1ac64:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1ac68:	e2524000 	subs	r4, r2, #0
   1ac6c:	e1a08000 	mov	r8, r0
   1ac70:	e1a06001 	mov	r6, r1
   1ac74:	e1a07003 	mov	r7, r3
   1ac78:	e59d5018 	ldr	r5, [sp, #24]
   1ac7c:	0a000038 	beq	1ad64 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x100>
   1ac80:	e357000f 	cmp	r7, #15
   1ac84:	9a000031 	bls	1ad50 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xec>
   1ac88:	e3c52102 	bic	r2, r5, #-2147483648	; 0x80000000
   1ac8c:	e247100c 	sub	r1, r7, #12
   1ac90:	e1a03422 	lsr	r3, r2, #8
   1ac94:	e1a0c822 	lsr	ip, r2, #16
   1ac98:	e5c43009 	strb	r3, [r4, #9]
   1ac9c:	e1a03421 	lsr	r3, r1, #8
   1aca0:	e1a0e821 	lsr	lr, r1, #16
   1aca4:	e5c42008 	strb	r2, [r4, #8]
   1aca8:	e5c46000 	strb	r6, [r4]
   1acac:	e1a02c22 	lsr	r2, r2, #24
   1acb0:	e5c4c00a 	strb	ip, [r4, #10]
   1acb4:	e5c41004 	strb	r1, [r4, #4]
   1acb8:	e1a0cc21 	lsr	ip, r1, #24
   1acbc:	e5c43005 	strb	r3, [r4, #5]
   1acc0:	e1a01426 	lsr	r1, r6, #8
   1acc4:	e1a03826 	lsr	r3, r6, #16
   1acc8:	e1a06c26 	lsr	r6, r6, #24
   1accc:	e5c4200b 	strb	r2, [r4, #11]
   1acd0:	e5c41001 	strb	r1, [r4, #1]
   1acd4:	e1a00008 	mov	r0, r8
   1acd8:	e1a02007 	mov	r2, r7
   1acdc:	e5c4e006 	strb	lr, [r4, #6]
   1ace0:	e5c4c007 	strb	ip, [r4, #7]
   1ace4:	e5c43002 	strb	r3, [r4, #2]
   1ace8:	e5c46003 	strb	r6, [r4, #3]
   1acec:	e1a01004 	mov	r1, r4
   1acf0:	ebffff8f 	bl	1ab34 <CBcmPropertyTags::GetTags(void*, unsigned int)>
   1acf4:	e3500000 	cmp	r0, #0
   1acf8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   1acfc:	e5d43009 	ldrb	r3, [r4, #9]
   1ad00:	e5d40008 	ldrb	r0, [r4, #8]
   1ad04:	e5d4200a 	ldrb	r2, [r4, #10]
   1ad08:	e1800403 	orr	r0, r0, r3, lsl #8
   1ad0c:	e5d4300b 	ldrb	r3, [r4, #11]
   1ad10:	e1800802 	orr	r0, r0, r2, lsl #16
   1ad14:	e1900c03 	orrs	r0, r0, r3, lsl #24
   1ad18:	4a000001 	bmi	1ad24 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xc0>
   1ad1c:	e3a00000 	mov	r0, #0
   1ad20:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1ad24:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
   1ad28:	e1a01420 	lsr	r1, r0, #8
   1ad2c:	e1a02820 	lsr	r2, r0, #16
   1ad30:	e1a03c20 	lsr	r3, r0, #24
   1ad34:	e5c40008 	strb	r0, [r4, #8]
   1ad38:	e2900000 	adds	r0, r0, #0
   1ad3c:	e5c41009 	strb	r1, [r4, #9]
   1ad40:	e5c4200a 	strb	r2, [r4, #10]
   1ad44:	e5c4300b 	strb	r3, [r4, #11]
   1ad48:	13a00001 	movne	r0, #1
   1ad4c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1ad50:	e3a02034 	mov	r2, #52	; 0x34
   1ad54:	e59f101c 	ldr	r1, [pc, #28]	; 1ad78 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x114>
   1ad58:	e59f001c 	ldr	r0, [pc, #28]	; 1ad7c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x118>
   1ad5c:	ebffff45 	bl	1aa78 <assertion_failed>
   1ad60:	eaffffc8 	b	1ac88 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x24>
   1ad64:	e3a02033 	mov	r2, #51	; 0x33
   1ad68:	e59f1008 	ldr	r1, [pc, #8]	; 1ad78 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x114>
   1ad6c:	e59f000c 	ldr	r0, [pc, #12]	; 1ad80 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x11c>
   1ad70:	ebffff40 	bl	1aa78 <assertion_failed>
   1ad74:	eaffffc1 	b	1ac80 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x1c>
   1ad78:	00028ed8 	.word	0x00028ed8
   1ad7c:	00028f48 	.word	0x00028f48
   1ad80:	00028f3c 	.word	0x00028f3c

0001ad84 <CClassAllocator::~CClassAllocator()>:
   1ad84:	e3a03000 	mov	r3, #0
   1ad88:	e92d4010 	push	{r4, lr}
   1ad8c:	e1a04000 	mov	r4, r0
   1ad90:	e590000c 	ldr	r0, [r0, #12]
   1ad94:	e5843010 	str	r3, [r4, #16]
   1ad98:	e1500003 	cmp	r0, r3
   1ad9c:	0a000000 	beq	1ada4 <CClassAllocator::~CClassAllocator()+0x20>
   1ada0:	eb00209c 	bl	23018 <free>
   1ada4:	e1a00004 	mov	r0, r4
   1ada8:	e8bd8010 	pop	{r4, pc}

0001adac <CClassAllocator::Init(unsigned int, unsigned int)>:
   1adac:	e3510000 	cmp	r1, #0
   1adb0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1adb4:	e1a05000 	mov	r5, r0
   1adb8:	03a00020 	moveq	r0, #32
   1adbc:	1281001f 	addne	r0, r1, #31
   1adc0:	13c0000f 	bicne	r0, r0, #15
   1adc4:	e3520000 	cmp	r2, #0
   1adc8:	e1a04002 	mov	r4, r2
   1adcc:	e5850000 	str	r0, [r5]
   1add0:	0a00001c 	beq	1ae48 <CClassAllocator::Init(unsigned int, unsigned int)+0x9c>
   1add4:	e5854004 	str	r4, [r5, #4]
   1add8:	e0000490 	mul	r0, r0, r4
   1addc:	eb00200f 	bl	22e20 <malloc>
   1ade0:	e3500000 	cmp	r0, #0
   1ade4:	e585000c 	str	r0, [r5, #12]
   1ade8:	0a000021 	beq	1ae74 <CClassAllocator::Init(unsigned int, unsigned int)+0xc8>
   1adec:	e310000f 	tst	r0, #15
   1adf0:	1a00001a 	bne	1ae60 <CClassAllocator::Init(unsigned int, unsigned int)+0xb4>
   1adf4:	e595e004 	ldr	lr, [r5, #4]
   1adf8:	e35e0000 	cmp	lr, #0
   1adfc:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   1ae00:	e595700c 	ldr	r7, [r5, #12]
   1ae04:	e5954000 	ldr	r4, [r5]
   1ae08:	e1a03007 	mov	r3, r7
   1ae0c:	e5950010 	ldr	r0, [r5, #16]
   1ae10:	e3a01000 	mov	r1, #0
   1ae14:	e59f6060 	ldr	r6, [pc, #96]	; 1ae7c <CClassAllocator::Init(unsigned int, unsigned int)+0xd0>
   1ae18:	ea000000 	b	1ae20 <CClassAllocator::Init(unsigned int, unsigned int)+0x74>
   1ae1c:	e1a01002 	mov	r1, r2
   1ae20:	e2812001 	add	r2, r1, #1
   1ae24:	e152000e 	cmp	r2, lr
   1ae28:	e583000c 	str	r0, [r3, #12]
   1ae2c:	e5836000 	str	r6, [r3]
   1ae30:	e1a00003 	mov	r0, r3
   1ae34:	e0833004 	add	r3, r3, r4
   1ae38:	1afffff7 	bne	1ae1c <CClassAllocator::Init(unsigned int, unsigned int)+0x70>
   1ae3c:	e0217194 	mla	r1, r4, r1, r7
   1ae40:	e5851010 	str	r1, [r5, #16]
   1ae44:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1ae48:	e59f0030 	ldr	r0, [pc, #48]	; 1ae80 <CClassAllocator::Init(unsigned int, unsigned int)+0xd4>
   1ae4c:	e3a02055 	mov	r2, #85	; 0x55
   1ae50:	e59f102c 	ldr	r1, [pc, #44]	; 1ae84 <CClassAllocator::Init(unsigned int, unsigned int)+0xd8>
   1ae54:	ebffff07 	bl	1aa78 <assertion_failed>
   1ae58:	e5950000 	ldr	r0, [r5]
   1ae5c:	eaffffdc 	b	1add4 <CClassAllocator::Init(unsigned int, unsigned int)+0x28>
   1ae60:	e3a0205f 	mov	r2, #95	; 0x5f
   1ae64:	e59f1018 	ldr	r1, [pc, #24]	; 1ae84 <CClassAllocator::Init(unsigned int, unsigned int)+0xd8>
   1ae68:	e59f0018 	ldr	r0, [pc, #24]	; 1ae88 <CClassAllocator::Init(unsigned int, unsigned int)+0xdc>
   1ae6c:	ebffff01 	bl	1aa78 <assertion_failed>
   1ae70:	eaffffdf 	b	1adf4 <CClassAllocator::Init(unsigned int, unsigned int)+0x48>
   1ae74:	e5850004 	str	r0, [r5, #4]
   1ae78:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1ae7c:	4f425350 	.word	0x4f425350
   1ae80:	00028f84 	.word	0x00028f84
   1ae84:	00028f70 	.word	0x00028f70
   1ae88:	00028f9c 	.word	0x00028f9c

0001ae8c <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>:
   1ae8c:	e92d4010 	push	{r4, lr}
   1ae90:	e3a0c000 	mov	ip, #0
   1ae94:	e3a0e001 	mov	lr, #1
   1ae98:	e1a04000 	mov	r4, r0
   1ae9c:	e5803008 	str	r3, [r0, #8]
   1aea0:	e580e018 	str	lr, [r0, #24]
   1aea4:	e580c00c 	str	ip, [r0, #12]
   1aea8:	e580c010 	str	ip, [r0, #16]
   1aeac:	e5c0c014 	strb	ip, [r0, #20]
   1aeb0:	ebffffbd 	bl	1adac <CClassAllocator::Init(unsigned int, unsigned int)>
   1aeb4:	e1a00004 	mov	r0, r4
   1aeb8:	e8bd8010 	pop	{r4, pc}

0001aebc <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>:
   1aebc:	e92d4070 	push	{r4, r5, r6, lr}
   1aec0:	e3a0c000 	mov	ip, #0
   1aec4:	e3a0e001 	mov	lr, #1
   1aec8:	e1a04000 	mov	r4, r0
   1aecc:	e59d5010 	ldr	r5, [sp, #16]
   1aed0:	e5803018 	str	r3, [r0, #24]
   1aed4:	e5805008 	str	r5, [r0, #8]
   1aed8:	e5c0e014 	strb	lr, [r0, #20]
   1aedc:	e580c00c 	str	ip, [r0, #12]
   1aee0:	e580c010 	str	ip, [r0, #16]
   1aee4:	ebffffb0 	bl	1adac <CClassAllocator::Init(unsigned int, unsigned int)>
   1aee8:	e1a00004 	mov	r0, r4
   1aeec:	e8bd8070 	pop	{r4, r5, r6, pc}

0001aef0 <CClassAllocator::Allocate()>:
   1aef0:	e92d4030 	push	{r4, r5, lr}
   1aef4:	e5d03014 	ldrb	r3, [r0, #20]
   1aef8:	e24dd00c 	sub	sp, sp, #12
   1aefc:	e3530000 	cmp	r3, #0
   1af00:	e1a05000 	mov	r5, r0
   1af04:	0a000002 	beq	1af14 <CClassAllocator::Allocate()+0x24>
   1af08:	e5900018 	ldr	r0, [r0, #24]
   1af0c:	e3500000 	cmp	r0, #0
   1af10:	1a000019 	bne	1af7c <CClassAllocator::Allocate()+0x8c>
   1af14:	e5954010 	ldr	r4, [r5, #16]
   1af18:	e3540000 	cmp	r4, #0
   1af1c:	0a000021 	beq	1afa8 <CClassAllocator::Allocate()+0xb8>
   1af20:	e59f30a4 	ldr	r3, [pc, #164]	; 1afcc <CClassAllocator::Allocate()+0xdc>
   1af24:	e5942000 	ldr	r2, [r4]
   1af28:	e1520003 	cmp	r2, r3
   1af2c:	0a000003 	beq	1af40 <CClassAllocator::Allocate()+0x50>
   1af30:	e3a02082 	mov	r2, #130	; 0x82
   1af34:	e59f1094 	ldr	r1, [pc, #148]	; 1afd0 <CClassAllocator::Allocate()+0xe0>
   1af38:	e59f0094 	ldr	r0, [pc, #148]	; 1afd4 <CClassAllocator::Allocate()+0xe4>
   1af3c:	ebfffecd 	bl	1aa78 <assertion_failed>
   1af40:	e3a03000 	mov	r3, #0
   1af44:	e5d51014 	ldrb	r1, [r5, #20]
   1af48:	e594200c 	ldr	r2, [r4, #12]
   1af4c:	e1510003 	cmp	r1, r3
   1af50:	e5852010 	str	r2, [r5, #16]
   1af54:	e584300c 	str	r3, [r4, #12]
   1af58:	1a000002 	bne	1af68 <CClassAllocator::Allocate()+0x78>
   1af5c:	e2840010 	add	r0, r4, #16
   1af60:	e28dd00c 	add	sp, sp, #12
   1af64:	e8bd8030 	pop	{r4, r5, pc}
   1af68:	e5953018 	ldr	r3, [r5, #24]
   1af6c:	e3530000 	cmp	r3, #0
   1af70:	0afffff9 	beq	1af5c <CClassAllocator::Allocate()+0x6c>
   1af74:	eb001f57 	bl	22cd8 <LeaveCritical>
   1af78:	eafffff7 	b	1af5c <CClassAllocator::Allocate()+0x6c>
   1af7c:	eb001f28 	bl	22c24 <EnterCritical>
   1af80:	e5954010 	ldr	r4, [r5, #16]
   1af84:	e3540000 	cmp	r4, #0
   1af88:	1affffe4 	bne	1af20 <CClassAllocator::Allocate()+0x30>
   1af8c:	e5d53014 	ldrb	r3, [r5, #20]
   1af90:	e3530000 	cmp	r3, #0
   1af94:	0a000003 	beq	1afa8 <CClassAllocator::Allocate()+0xb8>
   1af98:	e5953018 	ldr	r3, [r5, #24]
   1af9c:	e3530000 	cmp	r3, #0
   1afa0:	0a000000 	beq	1afa8 <CClassAllocator::Allocate()+0xb8>
   1afa4:	eb001f4b 	bl	22cd8 <LeaveCritical>
   1afa8:	eb0008a5 	bl	1d244 <CLogger::Get()>
   1afac:	e5953004 	ldr	r3, [r5, #4]
   1afb0:	e5951008 	ldr	r1, [r5, #8]
   1afb4:	e3a02000 	mov	r2, #0
   1afb8:	e58d3000 	str	r3, [sp]
   1afbc:	e59f3014 	ldr	r3, [pc, #20]	; 1afd8 <CClassAllocator::Allocate()+0xe8>
   1afc0:	eb000a48 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1afc4:	e3a00000 	mov	r0, #0
   1afc8:	eaffffe4 	b	1af60 <CClassAllocator::Allocate()+0x70>
   1afcc:	4f425350 	.word	0x4f425350
   1afd0:	00028f70 	.word	0x00028f70
   1afd4:	00029004 	.word	0x00029004
   1afd8:	00028fd8 	.word	0x00028fd8

0001afdc <CClassAllocator::Free(void*)>:
   1afdc:	e92d4070 	push	{r4, r5, r6, lr}
   1afe0:	e2514000 	subs	r4, r1, #0
   1afe4:	e1a05000 	mov	r5, r0
   1afe8:	0a000025 	beq	1b084 <CClassAllocator::Free(void*)+0xa8>
   1afec:	e59f30a4 	ldr	r3, [pc, #164]	; 1b098 <CClassAllocator::Free(void*)+0xbc>
   1aff0:	e5142010 	ldr	r2, [r4, #-16]
   1aff4:	e2446010 	sub	r6, r4, #16
   1aff8:	e1520003 	cmp	r2, r3
   1affc:	0a000003 	beq	1b010 <CClassAllocator::Free(void*)+0x34>
   1b000:	e3a02094 	mov	r2, #148	; 0x94
   1b004:	e59f1090 	ldr	r1, [pc, #144]	; 1b09c <CClassAllocator::Free(void*)+0xc0>
   1b008:	e59f0090 	ldr	r0, [pc, #144]	; 1b0a0 <CClassAllocator::Free(void*)+0xc4>
   1b00c:	ebfffe99 	bl	1aa78 <assertion_failed>
   1b010:	e5143004 	ldr	r3, [r4, #-4]
   1b014:	e3530000 	cmp	r3, #0
   1b018:	0a000003 	beq	1b02c <CClassAllocator::Free(void*)+0x50>
   1b01c:	e3a02095 	mov	r2, #149	; 0x95
   1b020:	e59f1074 	ldr	r1, [pc, #116]	; 1b09c <CClassAllocator::Free(void*)+0xc0>
   1b024:	e59f0078 	ldr	r0, [pc, #120]	; 1b0a4 <CClassAllocator::Free(void*)+0xc8>
   1b028:	ebfffe92 	bl	1aa78 <assertion_failed>
   1b02c:	e5d53014 	ldrb	r3, [r5, #20]
   1b030:	e3530000 	cmp	r3, #0
   1b034:	0a000002 	beq	1b044 <CClassAllocator::Free(void*)+0x68>
   1b038:	e5950018 	ldr	r0, [r5, #24]
   1b03c:	e3500000 	cmp	r0, #0
   1b040:	1a000003 	bne	1b054 <CClassAllocator::Free(void*)+0x78>
   1b044:	e5953010 	ldr	r3, [r5, #16]
   1b048:	e5043004 	str	r3, [r4, #-4]
   1b04c:	e5856010 	str	r6, [r5, #16]
   1b050:	e8bd8070 	pop	{r4, r5, r6, pc}
   1b054:	eb001ef2 	bl	22c24 <EnterCritical>
   1b058:	e5d52014 	ldrb	r2, [r5, #20]
   1b05c:	e5953010 	ldr	r3, [r5, #16]
   1b060:	e3520000 	cmp	r2, #0
   1b064:	e5043004 	str	r3, [r4, #-4]
   1b068:	e5856010 	str	r6, [r5, #16]
   1b06c:	08bd8070 	popeq	{r4, r5, r6, pc}
   1b070:	e5950018 	ldr	r0, [r5, #24]
   1b074:	e3500000 	cmp	r0, #0
   1b078:	08bd8070 	popeq	{r4, r5, r6, pc}
   1b07c:	e8bd4070 	pop	{r4, r5, r6, lr}
   1b080:	ea001f14 	b	22cd8 <LeaveCritical>
   1b084:	e3a02090 	mov	r2, #144	; 0x90
   1b088:	e59f100c 	ldr	r1, [pc, #12]	; 1b09c <CClassAllocator::Free(void*)+0xc0>
   1b08c:	e59f0014 	ldr	r0, [pc, #20]	; 1b0a8 <CClassAllocator::Free(void*)+0xcc>
   1b090:	ebfffe78 	bl	1aa78 <assertion_failed>
   1b094:	eaffffd4 	b	1afec <CClassAllocator::Free(void*)+0x10>
   1b098:	4f425350 	.word	0x4f425350
   1b09c:	00028f70 	.word	0x00028f70
   1b0a0:	00029030 	.word	0x00029030
   1b0a4:	0002904c 	.word	0x0002904c
   1b0a8:	00029024 	.word	0x00029024

0001b0ac <debug_hexdump(void const*, unsigned int, char const*)>:
   1b0ac:	e3520000 	cmp	r2, #0
   1b0b0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b0b4:	e1a05001 	mov	r5, r1
   1b0b8:	e59f60f4 	ldr	r6, [pc, #244]	; 1b1b4 <debug_hexdump(void const*, unsigned int, char const*)+0x108>
   1b0bc:	e1a04000 	mov	r4, r0
   1b0c0:	11a06002 	movne	r6, r2
   1b0c4:	e24dd04c 	sub	sp, sp, #76	; 0x4c
   1b0c8:	eb00085d 	bl	1d244 <CLogger::Get()>
   1b0cc:	e58d4004 	str	r4, [sp, #4]
   1b0d0:	e58d5000 	str	r5, [sp]
   1b0d4:	e1a01006 	mov	r1, r6
   1b0d8:	e59f30d8 	ldr	r3, [pc, #216]	; 1b1b8 <debug_hexdump(void const*, unsigned int, char const*)+0x10c>
   1b0dc:	e3a02004 	mov	r2, #4
   1b0e0:	eb000a00 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1b0e4:	e3550000 	cmp	r5, #0
   1b0e8:	0a00002b 	beq	1b19c <debug_hexdump(void const*, unsigned int, char const*)+0xf0>
   1b0ec:	e3a09004 	mov	r9, #4
   1b0f0:	e59f80c4 	ldr	r8, [pc, #196]	; 1b1bc <debug_hexdump(void const*, unsigned int, char const*)+0x110>
   1b0f4:	e59f70c4 	ldr	r7, [pc, #196]	; 1b1c0 <debug_hexdump(void const*, unsigned int, char const*)+0x114>
   1b0f8:	eb000851 	bl	1d244 <CLogger::Get()>
   1b0fc:	e5d4a00f 	ldrb	sl, [r4, #15]
   1b100:	e5d4e00e 	ldrb	lr, [r4, #14]
   1b104:	e5d4c00d 	ldrb	ip, [r4, #13]
   1b108:	e5d4300c 	ldrb	r3, [r4, #12]
   1b10c:	e5d4200b 	ldrb	r2, [r4, #11]
   1b110:	e5d4100a 	ldrb	r1, [r4, #10]
   1b114:	e5d4b009 	ldrb	fp, [r4, #9]
   1b118:	e58da040 	str	sl, [sp, #64]	; 0x40
   1b11c:	e5d4a008 	ldrb	sl, [r4, #8]
   1b120:	e58de03c 	str	lr, [sp, #60]	; 0x3c
   1b124:	e5d4e007 	ldrb	lr, [r4, #7]
   1b128:	e58dc038 	str	ip, [sp, #56]	; 0x38
   1b12c:	e5d4c006 	ldrb	ip, [r4, #6]
   1b130:	e58d3034 	str	r3, [sp, #52]	; 0x34
   1b134:	e5d43005 	ldrb	r3, [r4, #5]
   1b138:	e58d2030 	str	r2, [sp, #48]	; 0x30
   1b13c:	e5d42004 	ldrb	r2, [r4, #4]
   1b140:	e58d102c 	str	r1, [sp, #44]	; 0x2c
   1b144:	e5d41003 	ldrb	r1, [r4, #3]
   1b148:	e58db028 	str	fp, [sp, #40]	; 0x28
   1b14c:	e5d4b002 	ldrb	fp, [r4, #2]
   1b150:	e58da024 	str	sl, [sp, #36]	; 0x24
   1b154:	e5d4a001 	ldrb	sl, [r4, #1]
   1b158:	e58de020 	str	lr, [sp, #32]
   1b15c:	e5d4e000 	ldrb	lr, [r4]
   1b160:	e58dc01c 	str	ip, [sp, #28]
   1b164:	e58d3018 	str	r3, [sp, #24]
   1b168:	e004c008 	and	ip, r4, r8
   1b16c:	e58d2014 	str	r2, [sp, #20]
   1b170:	e58d1010 	str	r1, [sp, #16]
   1b174:	e1a03007 	mov	r3, r7
   1b178:	e1a02009 	mov	r2, r9
   1b17c:	e1a01006 	mov	r1, r6
   1b180:	e58db00c 	str	fp, [sp, #12]
   1b184:	e58da008 	str	sl, [sp, #8]
   1b188:	e88d5000 	stm	sp, {ip, lr}
   1b18c:	eb0009d5 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1b190:	e355000f 	cmp	r5, #15
   1b194:	e2844010 	add	r4, r4, #16
   1b198:	8a000001 	bhi	1b1a4 <debug_hexdump(void const*, unsigned int, char const*)+0xf8>
   1b19c:	e28dd04c 	add	sp, sp, #76	; 0x4c
   1b1a0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b1a4:	e2555010 	subs	r5, r5, #16
   1b1a8:	1affffd2 	bne	1b0f8 <debug_hexdump(void const*, unsigned int, char const*)+0x4c>
   1b1ac:	e28dd04c 	add	sp, sp, #76	; 0x4c
   1b1b0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b1b4:	00029060 	.word	0x00029060
   1b1b8:	00029068 	.word	0x00029068
   1b1bc:	0000ffff 	.word	0x0000ffff
   1b1c0:	00029090 	.word	0x00029090

0001b1c4 <debug_stacktrace(unsigned int const*, char const*)>:
   1b1c4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b1c8:	e3510000 	cmp	r1, #0
   1b1cc:	e59f8084 	ldr	r8, [pc, #132]	; 1b258 <debug_stacktrace(unsigned int const*, char const*)+0x94>
   1b1d0:	e24dd008 	sub	sp, sp, #8
   1b1d4:	e1a05000 	mov	r5, r0
   1b1d8:	11a08001 	movne	r8, r1
   1b1dc:	e3a04000 	mov	r4, #0
   1b1e0:	e3a0a004 	mov	sl, #4
   1b1e4:	e59f6070 	ldr	r6, [pc, #112]	; 1b25c <debug_stacktrace(unsigned int const*, char const*)+0x98>
   1b1e8:	e59f7070 	ldr	r7, [pc, #112]	; 1b260 <debug_stacktrace(unsigned int const*, char const*)+0x9c>
   1b1ec:	e59f9070 	ldr	r9, [pc, #112]	; 1b264 <debug_stacktrace(unsigned int const*, char const*)+0xa0>
   1b1f0:	ea000003 	b	1b204 <debug_stacktrace(unsigned int const*, char const*)+0x40>
   1b1f4:	e2844001 	add	r4, r4, #1
   1b1f8:	e3540040 	cmp	r4, #64	; 0x40
   1b1fc:	e2855004 	add	r5, r5, #4
   1b200:	0a000012 	beq	1b250 <debug_stacktrace(unsigned int const*, char const*)+0x8c>
   1b204:	e5953000 	ldr	r3, [r5]
   1b208:	e1530006 	cmp	r3, r6
   1b20c:	9afffff8 	bls	1b1f4 <debug_stacktrace(unsigned int const*, char const*)+0x30>
   1b210:	e1530007 	cmp	r3, r7
   1b214:	2afffff6 	bcs	1b1f4 <debug_stacktrace(unsigned int const*, char const*)+0x30>
   1b218:	e3130003 	tst	r3, #3
   1b21c:	1afffff4 	bne	1b1f4 <debug_stacktrace(unsigned int const*, char const*)+0x30>
   1b220:	eb000807 	bl	1d244 <CLogger::Get()>
   1b224:	e5953000 	ldr	r3, [r5]
   1b228:	e1a0200a 	mov	r2, sl
   1b22c:	e58d4000 	str	r4, [sp]
   1b230:	e58d3004 	str	r3, [sp, #4]
   1b234:	e1a01008 	mov	r1, r8
   1b238:	e1a03009 	mov	r3, r9
   1b23c:	e2844001 	add	r4, r4, #1
   1b240:	eb0009a8 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1b244:	e3540040 	cmp	r4, #64	; 0x40
   1b248:	e2855004 	add	r5, r5, #4
   1b24c:	1affffec 	bne	1b204 <debug_stacktrace(unsigned int const*, char const*)+0x40>
   1b250:	e28dd008 	add	sp, sp, #8
   1b254:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b258:	00029060 	.word	0x00029060
   1b25c:	00007fff 	.word	0x00007fff
   1b260:	000243f4 	.word	0x000243f4
   1b264:	000290e8 	.word	0x000290e8

0001b268 <CDevice::~CDevice()>:
   1b268:	e12fff1e 	bx	lr

0001b26c <CDevice::Read(void*, unsigned int)>:
   1b26c:	e3e00000 	mvn	r0, #0
   1b270:	e12fff1e 	bx	lr

0001b274 <CDevice::Seek(unsigned long long)>:
   1b274:	e3e00000 	mvn	r0, #0
   1b278:	e3e01000 	mvn	r1, #0
   1b27c:	e12fff1e 	bx	lr

0001b280 <CDevice::~CDevice()>:
   1b280:	e92d4010 	push	{r4, lr}
   1b284:	e1a04000 	mov	r4, r0
   1b288:	e3a01004 	mov	r1, #4
   1b28c:	eb001ec2 	bl	22d9c <operator delete(void*, unsigned int)>
   1b290:	e1a00004 	mov	r0, r4
   1b294:	e8bd8010 	pop	{r4, pc}

0001b298 <CDevice::CDevice()>:
   1b298:	e59f3004 	ldr	r3, [pc, #4]	; 1b2a4 <CDevice::CDevice()+0xc>
   1b29c:	e5803000 	str	r3, [r0]
   1b2a0:	e12fff1e 	bx	lr
   1b2a4:	00029104 	.word	0x00029104

0001b2a8 <CDeviceNameService::CDeviceNameService()>:
   1b2a8:	e3a03000 	mov	r3, #0
   1b2ac:	e92d4070 	push	{r4, r5, r6, lr}
   1b2b0:	e59f5030 	ldr	r5, [pc, #48]	; 1b2e8 <CDeviceNameService::CDeviceNameService()+0x40>
   1b2b4:	e1a04000 	mov	r4, r0
   1b2b8:	e5952000 	ldr	r2, [r5]
   1b2bc:	e5803000 	str	r3, [r0]
   1b2c0:	e1520003 	cmp	r2, r3
   1b2c4:	e5803004 	str	r3, [r0, #4]
   1b2c8:	0a000003 	beq	1b2dc <CDeviceNameService::CDeviceNameService()+0x34>
   1b2cc:	e3a0201f 	mov	r2, #31
   1b2d0:	e59f1014 	ldr	r1, [pc, #20]	; 1b2ec <CDeviceNameService::CDeviceNameService()+0x44>
   1b2d4:	e59f0014 	ldr	r0, [pc, #20]	; 1b2f0 <CDeviceNameService::CDeviceNameService()+0x48>
   1b2d8:	ebfffde6 	bl	1aa78 <assertion_failed>
   1b2dc:	e5854000 	str	r4, [r5]
   1b2e0:	e1a00004 	mov	r0, r4
   1b2e4:	e8bd8070 	pop	{r4, r5, r6, pc}
   1b2e8:	0002b954 	.word	0x0002b954
   1b2ec:	00029118 	.word	0x00029118
   1b2f0:	00029130 	.word	0x00029130

0001b2f4 <CDeviceNameService::~CDeviceNameService()>:
   1b2f4:	e5903000 	ldr	r3, [r0]
   1b2f8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1b2fc:	e3530000 	cmp	r3, #0
   1b300:	e1a05000 	mov	r5, r0
   1b304:	0a00000e 	beq	1b344 <CDeviceNameService::~CDeviceNameService()+0x50>
   1b308:	e3a06000 	mov	r6, #0
   1b30c:	e3a07010 	mov	r7, #16
   1b310:	e5930004 	ldr	r0, [r3, #4]
   1b314:	e5934000 	ldr	r4, [r3]
   1b318:	e3500000 	cmp	r0, #0
   1b31c:	0a000000 	beq	1b324 <CDeviceNameService::~CDeviceNameService()+0x30>
   1b320:	eb001e9c 	bl	22d98 <operator delete[](void*)>
   1b324:	e5950000 	ldr	r0, [r5]
   1b328:	e1a01007 	mov	r1, r7
   1b32c:	e5806004 	str	r6, [r0, #4]
   1b330:	e5806008 	str	r6, [r0, #8]
   1b334:	eb001e98 	bl	22d9c <operator delete(void*, unsigned int)>
   1b338:	e2543000 	subs	r3, r4, #0
   1b33c:	e5854000 	str	r4, [r5]
   1b340:	1afffff2 	bne	1b310 <CDeviceNameService::~CDeviceNameService()+0x1c>
   1b344:	e3a02000 	mov	r2, #0
   1b348:	e59f3008 	ldr	r3, [pc, #8]	; 1b358 <CDeviceNameService::~CDeviceNameService()+0x64>
   1b34c:	e1a00005 	mov	r0, r5
   1b350:	e5832000 	str	r2, [r3]
   1b354:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1b358:	0002b954 	.word	0x0002b954

0001b35c <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>:
   1b35c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1b360:	e1a05000 	mov	r5, r0
   1b364:	e5900004 	ldr	r0, [r0, #4]
   1b368:	e1a06001 	mov	r6, r1
   1b36c:	e3500000 	cmp	r0, #0
   1b370:	e1a07002 	mov	r7, r2
   1b374:	e1a08003 	mov	r8, r3
   1b378:	1a000017 	bne	1b3dc <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x80>
   1b37c:	e3a00010 	mov	r0, #16
   1b380:	eb001e81 	bl	22d8c <operator new(unsigned int)>
   1b384:	e3560000 	cmp	r6, #0
   1b388:	e1a04000 	mov	r4, r0
   1b38c:	0a000019 	beq	1b3f8 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x9c>
   1b390:	e1a00006 	mov	r0, r6
   1b394:	eb001a2e 	bl	21c54 <strlen>
   1b398:	e2800001 	add	r0, r0, #1
   1b39c:	eb001e7b 	bl	22d90 <operator new[](unsigned int)>
   1b3a0:	e1a01006 	mov	r1, r6
   1b3a4:	e5840004 	str	r0, [r4, #4]
   1b3a8:	eb001aa7 	bl	21e4c <strcpy>
   1b3ac:	e3570000 	cmp	r7, #0
   1b3b0:	0a00000b 	beq	1b3e4 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x88>
   1b3b4:	e5952004 	ldr	r2, [r5, #4]
   1b3b8:	e5953000 	ldr	r3, [r5]
   1b3bc:	e3520000 	cmp	r2, #0
   1b3c0:	e5847008 	str	r7, [r4, #8]
   1b3c4:	e5c4800c 	strb	r8, [r4, #12]
   1b3c8:	e5843000 	str	r3, [r4]
   1b3cc:	e5854000 	str	r4, [r5]
   1b3d0:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   1b3d4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1b3d8:	ea001e3e 	b	22cd8 <LeaveCritical>
   1b3dc:	eb001e10 	bl	22c24 <EnterCritical>
   1b3e0:	eaffffe5 	b	1b37c <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x20>
   1b3e4:	e3a02040 	mov	r2, #64	; 0x40
   1b3e8:	e59f101c 	ldr	r1, [pc, #28]	; 1b40c <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xb0>
   1b3ec:	e59f001c 	ldr	r0, [pc, #28]	; 1b410 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xb4>
   1b3f0:	ebfffda0 	bl	1aa78 <assertion_failed>
   1b3f4:	eaffffee 	b	1b3b4 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x58>
   1b3f8:	e3a0203b 	mov	r2, #59	; 0x3b
   1b3fc:	e59f1008 	ldr	r1, [pc, #8]	; 1b40c <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xb0>
   1b400:	e59f000c 	ldr	r0, [pc, #12]	; 1b414 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xb8>
   1b404:	ebfffd9b 	bl	1aa78 <assertion_failed>
   1b408:	eaffffe0 	b	1b390 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x34>
   1b40c:	00029118 	.word	0x00029118
   1b410:	0002913c 	.word	0x0002913c
   1b414:	00024ff4 	.word	0x00024ff4

0001b418 <CDeviceNameService::RemoveDevice(char const*, bool)>:
   1b418:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b41c:	e2516000 	subs	r6, r1, #0
   1b420:	e1a08000 	mov	r8, r0
   1b424:	e1a07002 	mov	r7, r2
   1b428:	0a000040 	beq	1b530 <CDeviceNameService::RemoveDevice(char const*, bool)+0x118>
   1b42c:	e5980004 	ldr	r0, [r8, #4]
   1b430:	e3500000 	cmp	r0, #0
   1b434:	1a00002e 	bne	1b4f4 <CDeviceNameService::RemoveDevice(char const*, bool)+0xdc>
   1b438:	e5984000 	ldr	r4, [r8]
   1b43c:	e3540000 	cmp	r4, #0
   1b440:	0a000039 	beq	1b52c <CDeviceNameService::RemoveDevice(char const*, bool)+0x114>
   1b444:	e3a05000 	mov	r5, #0
   1b448:	e3a0b05e 	mov	fp, #94	; 0x5e
   1b44c:	e59fa0f0 	ldr	sl, [pc, #240]	; 1b544 <CDeviceNameService::RemoveDevice(char const*, bool)+0x12c>
   1b450:	e59f90f0 	ldr	r9, [pc, #240]	; 1b548 <CDeviceNameService::RemoveDevice(char const*, bool)+0x130>
   1b454:	ea00000b 	b	1b488 <CDeviceNameService::RemoveDevice(char const*, bool)+0x70>
   1b458:	e1a00006 	mov	r0, r6
   1b45c:	eb001a06 	bl	21c7c <strcmp>
   1b460:	e3500000 	cmp	r0, #0
   1b464:	1a000002 	bne	1b474 <CDeviceNameService::RemoveDevice(char const*, bool)+0x5c>
   1b468:	e5d4300c 	ldrb	r3, [r4, #12]
   1b46c:	e1530007 	cmp	r3, r7
   1b470:	0a00000d 	beq	1b4ac <CDeviceNameService::RemoveDevice(char const*, bool)+0x94>
   1b474:	e5943000 	ldr	r3, [r4]
   1b478:	e1a05004 	mov	r5, r4
   1b47c:	e3530000 	cmp	r3, #0
   1b480:	0a00001f 	beq	1b504 <CDeviceNameService::RemoveDevice(char const*, bool)+0xec>
   1b484:	e1a04003 	mov	r4, r3
   1b488:	e5941004 	ldr	r1, [r4, #4]
   1b48c:	e3510000 	cmp	r1, #0
   1b490:	1afffff0 	bne	1b458 <CDeviceNameService::RemoveDevice(char const*, bool)+0x40>
   1b494:	e1a0100a 	mov	r1, sl
   1b498:	e1a0200b 	mov	r2, fp
   1b49c:	e1a00009 	mov	r0, r9
   1b4a0:	ebfffd74 	bl	1aa78 <assertion_failed>
   1b4a4:	e5941004 	ldr	r1, [r4, #4]
   1b4a8:	eaffffea 	b	1b458 <CDeviceNameService::RemoveDevice(char const*, bool)+0x40>
   1b4ac:	e3550000 	cmp	r5, #0
   1b4b0:	0a00001a 	beq	1b520 <CDeviceNameService::RemoveDevice(char const*, bool)+0x108>
   1b4b4:	e5943000 	ldr	r3, [r4]
   1b4b8:	e5853000 	str	r3, [r5]
   1b4bc:	e5983004 	ldr	r3, [r8, #4]
   1b4c0:	e3530000 	cmp	r3, #0
   1b4c4:	1a000013 	bne	1b518 <CDeviceNameService::RemoveDevice(char const*, bool)+0x100>
   1b4c8:	e5940004 	ldr	r0, [r4, #4]
   1b4cc:	e3500000 	cmp	r0, #0
   1b4d0:	0a000000 	beq	1b4d8 <CDeviceNameService::RemoveDevice(char const*, bool)+0xc0>
   1b4d4:	eb001e2f 	bl	22d98 <operator delete[](void*)>
   1b4d8:	e3a03000 	mov	r3, #0
   1b4dc:	e1a00004 	mov	r0, r4
   1b4e0:	e5843004 	str	r3, [r4, #4]
   1b4e4:	e5843008 	str	r3, [r4, #8]
   1b4e8:	e3a01010 	mov	r1, #16
   1b4ec:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b4f0:	ea001e29 	b	22d9c <operator delete(void*, unsigned int)>
   1b4f4:	eb001dca 	bl	22c24 <EnterCritical>
   1b4f8:	e5984000 	ldr	r4, [r8]
   1b4fc:	e3540000 	cmp	r4, #0
   1b500:	1affffcf 	bne	1b444 <CDeviceNameService::RemoveDevice(char const*, bool)+0x2c>
   1b504:	e5983004 	ldr	r3, [r8, #4]
   1b508:	e3530000 	cmp	r3, #0
   1b50c:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b510:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b514:	ea001def 	b	22cd8 <LeaveCritical>
   1b518:	eb001dee 	bl	22cd8 <LeaveCritical>
   1b51c:	eaffffe9 	b	1b4c8 <CDeviceNameService::RemoveDevice(char const*, bool)+0xb0>
   1b520:	e5943000 	ldr	r3, [r4]
   1b524:	e5883000 	str	r3, [r8]
   1b528:	eaffffe3 	b	1b4bc <CDeviceNameService::RemoveDevice(char const*, bool)+0xa4>
   1b52c:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b530:	e3a02056 	mov	r2, #86	; 0x56
   1b534:	e59f1008 	ldr	r1, [pc, #8]	; 1b544 <CDeviceNameService::RemoveDevice(char const*, bool)+0x12c>
   1b538:	e59f000c 	ldr	r0, [pc, #12]	; 1b54c <CDeviceNameService::RemoveDevice(char const*, bool)+0x134>
   1b53c:	ebfffd4d 	bl	1aa78 <assertion_failed>
   1b540:	eaffffb9 	b	1b42c <CDeviceNameService::RemoveDevice(char const*, bool)+0x14>
   1b544:	00029118 	.word	0x00029118
   1b548:	0002914c 	.word	0x0002914c
   1b54c:	00024ff4 	.word	0x00024ff4

0001b550 <CDeviceNameService::GetDevice(char const*, bool)>:
   1b550:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b554:	e2515000 	subs	r5, r1, #0
   1b558:	e1a07000 	mov	r7, r0
   1b55c:	e1a06002 	mov	r6, r2
   1b560:	0a000034 	beq	1b638 <CDeviceNameService::GetDevice(char const*, bool)+0xe8>
   1b564:	e5970004 	ldr	r0, [r7, #4]
   1b568:	e3500000 	cmp	r0, #0
   1b56c:	1a000019 	bne	1b5d8 <CDeviceNameService::GetDevice(char const*, bool)+0x88>
   1b570:	e5974000 	ldr	r4, [r7]
   1b574:	e3540000 	cmp	r4, #0
   1b578:	0a00001e 	beq	1b5f8 <CDeviceNameService::GetDevice(char const*, bool)+0xa8>
   1b57c:	e3a0a092 	mov	sl, #146	; 0x92
   1b580:	e59f90c4 	ldr	r9, [pc, #196]	; 1b64c <CDeviceNameService::GetDevice(char const*, bool)+0xfc>
   1b584:	e59f80c4 	ldr	r8, [pc, #196]	; 1b650 <CDeviceNameService::GetDevice(char const*, bool)+0x100>
   1b588:	ea000009 	b	1b5b4 <CDeviceNameService::GetDevice(char const*, bool)+0x64>
   1b58c:	e1a00005 	mov	r0, r5
   1b590:	eb0019b9 	bl	21c7c <strcmp>
   1b594:	e3500000 	cmp	r0, #0
   1b598:	1a000002 	bne	1b5a8 <CDeviceNameService::GetDevice(char const*, bool)+0x58>
   1b59c:	e5d4300c 	ldrb	r3, [r4, #12]
   1b5a0:	e1530006 	cmp	r3, r6
   1b5a4:	0a000016 	beq	1b604 <CDeviceNameService::GetDevice(char const*, bool)+0xb4>
   1b5a8:	e5944000 	ldr	r4, [r4]
   1b5ac:	e3540000 	cmp	r4, #0
   1b5b0:	0a00000c 	beq	1b5e8 <CDeviceNameService::GetDevice(char const*, bool)+0x98>
   1b5b4:	e5941004 	ldr	r1, [r4, #4]
   1b5b8:	e3510000 	cmp	r1, #0
   1b5bc:	1afffff2 	bne	1b58c <CDeviceNameService::GetDevice(char const*, bool)+0x3c>
   1b5c0:	e1a01009 	mov	r1, r9
   1b5c4:	e1a0200a 	mov	r2, sl
   1b5c8:	e1a00008 	mov	r0, r8
   1b5cc:	ebfffd29 	bl	1aa78 <assertion_failed>
   1b5d0:	e5941004 	ldr	r1, [r4, #4]
   1b5d4:	eaffffec 	b	1b58c <CDeviceNameService::GetDevice(char const*, bool)+0x3c>
   1b5d8:	eb001d91 	bl	22c24 <EnterCritical>
   1b5dc:	e5974000 	ldr	r4, [r7]
   1b5e0:	e3540000 	cmp	r4, #0
   1b5e4:	1affffe4 	bne	1b57c <CDeviceNameService::GetDevice(char const*, bool)+0x2c>
   1b5e8:	e5973004 	ldr	r3, [r7, #4]
   1b5ec:	e3530000 	cmp	r3, #0
   1b5f0:	0a000000 	beq	1b5f8 <CDeviceNameService::GetDevice(char const*, bool)+0xa8>
   1b5f4:	eb001db7 	bl	22cd8 <LeaveCritical>
   1b5f8:	e3a04000 	mov	r4, #0
   1b5fc:	e1a00004 	mov	r0, r4
   1b600:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b604:	e5973004 	ldr	r3, [r7, #4]
   1b608:	e5944008 	ldr	r4, [r4, #8]
   1b60c:	e3530000 	cmp	r3, #0
   1b610:	1a000006 	bne	1b630 <CDeviceNameService::GetDevice(char const*, bool)+0xe0>
   1b614:	e3540000 	cmp	r4, #0
   1b618:	1afffff7 	bne	1b5fc <CDeviceNameService::GetDevice(char const*, bool)+0xac>
   1b61c:	e3a0209a 	mov	r2, #154	; 0x9a
   1b620:	e59f1024 	ldr	r1, [pc, #36]	; 1b64c <CDeviceNameService::GetDevice(char const*, bool)+0xfc>
   1b624:	e59f0028 	ldr	r0, [pc, #40]	; 1b654 <CDeviceNameService::GetDevice(char const*, bool)+0x104>
   1b628:	ebfffd12 	bl	1aa78 <assertion_failed>
   1b62c:	eafffff2 	b	1b5fc <CDeviceNameService::GetDevice(char const*, bool)+0xac>
   1b630:	eb001da8 	bl	22cd8 <LeaveCritical>
   1b634:	eafffff6 	b	1b614 <CDeviceNameService::GetDevice(char const*, bool)+0xc4>
   1b638:	e3a0208b 	mov	r2, #139	; 0x8b
   1b63c:	e59f1008 	ldr	r1, [pc, #8]	; 1b64c <CDeviceNameService::GetDevice(char const*, bool)+0xfc>
   1b640:	e59f0010 	ldr	r0, [pc, #16]	; 1b658 <CDeviceNameService::GetDevice(char const*, bool)+0x108>
   1b644:	ebfffd0b 	bl	1aa78 <assertion_failed>
   1b648:	eaffffc5 	b	1b564 <CDeviceNameService::GetDevice(char const*, bool)+0x14>
   1b64c:	00029118 	.word	0x00029118
   1b650:	0002914c 	.word	0x0002914c
   1b654:	00029160 	.word	0x00029160
   1b658:	00024ff4 	.word	0x00024ff4

0001b65c <CDeviceNameService::Get()>:
   1b65c:	e92d4010 	push	{r4, lr}
   1b660:	e59f4020 	ldr	r4, [pc, #32]	; 1b688 <CDeviceNameService::Get()+0x2c>
   1b664:	e5940000 	ldr	r0, [r4]
   1b668:	e3500000 	cmp	r0, #0
   1b66c:	18bd8010 	popne	{r4, pc}
   1b670:	e3a020cc 	mov	r2, #204	; 0xcc
   1b674:	e59f1010 	ldr	r1, [pc, #16]	; 1b68c <CDeviceNameService::Get()+0x30>
   1b678:	e59f0010 	ldr	r0, [pc, #16]	; 1b690 <CDeviceNameService::Get()+0x34>
   1b67c:	ebfffcfd 	bl	1aa78 <assertion_failed>
   1b680:	e5940000 	ldr	r0, [r4]
   1b684:	e8bd8010 	pop	{r4, pc}
   1b688:	0002b954 	.word	0x0002b954
   1b68c:	00029118 	.word	0x00029118
   1b690:	00029170 	.word	0x00029170

0001b694 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>:
   1b694:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1b698:	e1a07001 	mov	r7, r1
   1b69c:	e1a08002 	mov	r8, r2
   1b6a0:	e24dd010 	sub	sp, sp, #16
   1b6a4:	e1a04000 	mov	r4, r0
   1b6a8:	e1a0000d 	mov	r0, sp
   1b6ac:	e1a05003 	mov	r5, r3
   1b6b0:	e5dd6028 	ldrb	r6, [sp, #40]	; 0x28
   1b6b4:	eb0011a0 	bl	1fd3c <CString::CString()>
   1b6b8:	e1a03008 	mov	r3, r8
   1b6bc:	e1a02007 	mov	r2, r7
   1b6c0:	e1a0000d 	mov	r0, sp
   1b6c4:	e59f102c 	ldr	r1, [pc, #44]	; 1b6f8 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)+0x64>
   1b6c8:	eb001589 	bl	20cf4 <CString::Format(char const*, ...)>
   1b6cc:	e1a0000d 	mov	r0, sp
   1b6d0:	eb0011af 	bl	1fd94 <CString::operator char const*() const>
   1b6d4:	e1a03006 	mov	r3, r6
   1b6d8:	e1a01000 	mov	r1, r0
   1b6dc:	e1a02005 	mov	r2, r5
   1b6e0:	e1a00004 	mov	r0, r4
   1b6e4:	ebffff1c 	bl	1b35c <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   1b6e8:	e1a0000d 	mov	r0, sp
   1b6ec:	eb00115f 	bl	1fc70 <CString::~CString()>
   1b6f0:	e28dd010 	add	sp, sp, #16
   1b6f4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1b6f8:	0002917c 	.word	0x0002917c

0001b6fc <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>:
   1b6fc:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1b700:	e1a06001 	mov	r6, r1
   1b704:	e1a07002 	mov	r7, r2
   1b708:	e24dd014 	sub	sp, sp, #20
   1b70c:	e1a04000 	mov	r4, r0
   1b710:	e1a0000d 	mov	r0, sp
   1b714:	e1a05003 	mov	r5, r3
   1b718:	eb001187 	bl	1fd3c <CString::CString()>
   1b71c:	e1a03007 	mov	r3, r7
   1b720:	e1a02006 	mov	r2, r6
   1b724:	e1a0000d 	mov	r0, sp
   1b728:	e59f1028 	ldr	r1, [pc, #40]	; 1b758 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)+0x5c>
   1b72c:	eb001570 	bl	20cf4 <CString::Format(char const*, ...)>
   1b730:	e1a0000d 	mov	r0, sp
   1b734:	eb001196 	bl	1fd94 <CString::operator char const*() const>
   1b738:	e1a02005 	mov	r2, r5
   1b73c:	e1a01000 	mov	r1, r0
   1b740:	e1a00004 	mov	r0, r4
   1b744:	ebffff33 	bl	1b418 <CDeviceNameService::RemoveDevice(char const*, bool)>
   1b748:	e1a0000d 	mov	r0, sp
   1b74c:	eb001147 	bl	1fc70 <CString::~CString()>
   1b750:	e28dd014 	add	sp, sp, #20
   1b754:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1b758:	0002917c 	.word	0x0002917c

0001b75c <CDeviceNameService::GetDevice(char const*, unsigned int, bool)>:
   1b75c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1b760:	e1a06001 	mov	r6, r1
   1b764:	e1a07002 	mov	r7, r2
   1b768:	e24dd014 	sub	sp, sp, #20
   1b76c:	e1a04000 	mov	r4, r0
   1b770:	e1a0000d 	mov	r0, sp
   1b774:	e1a05003 	mov	r5, r3
   1b778:	eb00116f 	bl	1fd3c <CString::CString()>
   1b77c:	e1a03007 	mov	r3, r7
   1b780:	e1a02006 	mov	r2, r6
   1b784:	e1a0000d 	mov	r0, sp
   1b788:	e59f1030 	ldr	r1, [pc, #48]	; 1b7c0 <CDeviceNameService::GetDevice(char const*, unsigned int, bool)+0x64>
   1b78c:	eb001558 	bl	20cf4 <CString::Format(char const*, ...)>
   1b790:	e1a0000d 	mov	r0, sp
   1b794:	eb00117e 	bl	1fd94 <CString::operator char const*() const>
   1b798:	e1a02005 	mov	r2, r5
   1b79c:	e1a01000 	mov	r1, r0
   1b7a0:	e1a00004 	mov	r0, r4
   1b7a4:	ebffff69 	bl	1b550 <CDeviceNameService::GetDevice(char const*, bool)>
   1b7a8:	e1a04000 	mov	r4, r0
   1b7ac:	e1a0000d 	mov	r0, sp
   1b7b0:	eb00112e 	bl	1fc70 <CString::~CString()>
   1b7b4:	e1a00004 	mov	r0, r4
   1b7b8:	e28dd014 	add	sp, sp, #20
   1b7bc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1b7c0:	0002917c 	.word	0x0002917c

0001b7c4 <CDeviceNameService::ListDevices(CDevice*)>:
   1b7c4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b7c8:	e2516000 	subs	r6, r1, #0
   1b7cc:	e24dd01c 	sub	sp, sp, #28
   1b7d0:	e1a04000 	mov	r4, r0
   1b7d4:	0a000036 	beq	1b8b4 <CDeviceNameService::ListDevices(CDevice*)+0xf0>
   1b7d8:	e5944000 	ldr	r4, [r4]
   1b7dc:	e3540000 	cmp	r4, #0
   1b7e0:	0a00002b 	beq	1b894 <CDeviceNameService::ListDevices(CDevice*)+0xd0>
   1b7e4:	e3a05000 	mov	r5, #0
   1b7e8:	e3a0b0b9 	mov	fp, #185	; 0xb9
   1b7ec:	e59f80d4 	ldr	r8, [pc, #212]	; 1b8c8 <CDeviceNameService::ListDevices(CDevice*)+0x104>
   1b7f0:	e28d0008 	add	r0, sp, #8
   1b7f4:	eb001150 	bl	1fd3c <CString::CString()>
   1b7f8:	e5943004 	ldr	r3, [r4, #4]
   1b7fc:	e2855001 	add	r5, r5, #1
   1b800:	e3530000 	cmp	r3, #0
   1b804:	0a000024 	beq	1b89c <CDeviceNameService::ListDevices(CDevice*)+0xd8>
   1b808:	e2157003 	ands	r7, r5, #3
   1b80c:	13a01020 	movne	r1, #32
   1b810:	03a0100a 	moveq	r1, #10
   1b814:	e5d4200c 	ldrb	r2, [r4, #12]
   1b818:	e28d0008 	add	r0, sp, #8
   1b81c:	e3520000 	cmp	r2, #0
   1b820:	03a02063 	moveq	r2, #99	; 0x63
   1b824:	13a02062 	movne	r2, #98	; 0x62
   1b828:	e58d1000 	str	r1, [sp]
   1b82c:	e1a01008 	mov	r1, r8
   1b830:	eb00152f 	bl	20cf4 <CString::Format(char const*, ...)>
   1b834:	e5963000 	ldr	r3, [r6]
   1b838:	e28d0008 	add	r0, sp, #8
   1b83c:	e593900c 	ldr	r9, [r3, #12]
   1b840:	eb001153 	bl	1fd94 <CString::operator char const*() const>
   1b844:	e1a0a000 	mov	sl, r0
   1b848:	e28d0008 	add	r0, sp, #8
   1b84c:	eb00117e 	bl	1fe4c <CString::GetLength() const>
   1b850:	e1a0100a 	mov	r1, sl
   1b854:	e1a02000 	mov	r2, r0
   1b858:	e1a00006 	mov	r0, r6
   1b85c:	e12fff39 	blx	r9
   1b860:	e5944000 	ldr	r4, [r4]
   1b864:	e28d0008 	add	r0, sp, #8
   1b868:	eb001100 	bl	1fc70 <CString::~CString()>
   1b86c:	e3540000 	cmp	r4, #0
   1b870:	1affffde 	bne	1b7f0 <CDeviceNameService::ListDevices(CDevice*)+0x2c>
   1b874:	e3570000 	cmp	r7, #0
   1b878:	0a000005 	beq	1b894 <CDeviceNameService::ListDevices(CDevice*)+0xd0>
   1b87c:	e5963000 	ldr	r3, [r6]
   1b880:	e1a00006 	mov	r0, r6
   1b884:	e593300c 	ldr	r3, [r3, #12]
   1b888:	e3a02001 	mov	r2, #1
   1b88c:	e59f1038 	ldr	r1, [pc, #56]	; 1b8cc <CDeviceNameService::ListDevices(CDevice*)+0x108>
   1b890:	e12fff33 	blx	r3
   1b894:	e28dd01c 	add	sp, sp, #28
   1b898:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b89c:	e1a0200b 	mov	r2, fp
   1b8a0:	e59f1028 	ldr	r1, [pc, #40]	; 1b8d0 <CDeviceNameService::ListDevices(CDevice*)+0x10c>
   1b8a4:	e59f0028 	ldr	r0, [pc, #40]	; 1b8d4 <CDeviceNameService::ListDevices(CDevice*)+0x110>
   1b8a8:	ebfffc72 	bl	1aa78 <assertion_failed>
   1b8ac:	e5943004 	ldr	r3, [r4, #4]
   1b8b0:	eaffffd4 	b	1b808 <CDeviceNameService::ListDevices(CDevice*)+0x44>
   1b8b4:	e3a020b0 	mov	r2, #176	; 0xb0
   1b8b8:	e59f1010 	ldr	r1, [pc, #16]	; 1b8d0 <CDeviceNameService::ListDevices(CDevice*)+0x10c>
   1b8bc:	e59f0014 	ldr	r0, [pc, #20]	; 1b8d8 <CDeviceNameService::ListDevices(CDevice*)+0x114>
   1b8c0:	ebfffc6c 	bl	1aa78 <assertion_failed>
   1b8c4:	eaffffc3 	b	1b7d8 <CDeviceNameService::ListDevices(CDevice*)+0x14>
   1b8c8:	00029194 	.word	0x00029194
   1b8cc:	00028860 	.word	0x00028860
   1b8d0:	00029118 	.word	0x00029118
   1b8d4:	0002914c 	.word	0x0002914c
   1b8d8:	00029184 	.word	0x00029184

0001b8dc <CGPIOPin::~CGPIOPin()>:
   1b8dc:	e12fff1e 	bx	lr

0001b8e0 <CGPIOPin::~CGPIOPin()>:
   1b8e0:	e92d4010 	push	{r4, lr}
   1b8e4:	e1a04000 	mov	r4, r0
   1b8e8:	e3a01028 	mov	r1, #40	; 0x28
   1b8ec:	eb001d2a 	bl	22d9c <operator delete(void*, unsigned int)>
   1b8f0:	e1a00004 	mov	r0, r4
   1b8f4:	e8bd8010 	pop	{r4, pc}

0001b8f8 <CGPIOPin::CGPIOPin()>:
   1b8f8:	e92d4010 	push	{r4, lr}
   1b8fc:	e3a01000 	mov	r1, #0
   1b900:	e3a02006 	mov	r2, #6
   1b904:	e3a04036 	mov	r4, #54	; 0x36
   1b908:	e3a0c00a 	mov	ip, #10
   1b90c:	e59fe01c 	ldr	lr, [pc, #28]	; 1b930 <CGPIOPin::CGPIOPin()+0x38>
   1b910:	e5804004 	str	r4, [r0, #4]
   1b914:	e580e000 	str	lr, [r0]
   1b918:	e5c0c010 	strb	ip, [r0, #16]
   1b91c:	e5801018 	str	r1, [r0, #24]
   1b920:	e580101c 	str	r1, [r0, #28]
   1b924:	e5c02024 	strb	r2, [r0, #36]	; 0x24
   1b928:	e5c02025 	strb	r2, [r0, #37]	; 0x25
   1b92c:	e8bd8010 	pop	{r4, pc}
   1b930:	000291a8 	.word	0x000291a8

0001b934 <CGPIOPin::AssignPin(unsigned int)>:
   1b934:	e5903004 	ldr	r3, [r0, #4]
   1b938:	e92d4070 	push	{r4, r5, r6, lr}
   1b93c:	e3530036 	cmp	r3, #54	; 0x36
   1b940:	e1a05000 	mov	r5, r0
   1b944:	e1a04001 	mov	r4, r1
   1b948:	0a000003 	beq	1b95c <CGPIOPin::AssignPin(unsigned int)+0x28>
   1b94c:	e3a02040 	mov	r2, #64	; 0x40
   1b950:	e59f1064 	ldr	r1, [pc, #100]	; 1b9bc <CGPIOPin::AssignPin(unsigned int)+0x88>
   1b954:	e59f0064 	ldr	r0, [pc, #100]	; 1b9c0 <CGPIOPin::AssignPin(unsigned int)+0x8c>
   1b958:	ebfffc46 	bl	1aa78 <assertion_failed>
   1b95c:	e3540035 	cmp	r4, #53	; 0x35
   1b960:	e5854004 	str	r4, [r5, #4]
   1b964:	8a000007 	bhi	1b988 <CGPIOPin::AssignPin(unsigned int)+0x54>
   1b968:	e3a03001 	mov	r3, #1
   1b96c:	e204201f 	and	r2, r4, #31
   1b970:	e1a042a4 	lsr	r4, r4, #5
   1b974:	e1a03213 	lsl	r3, r3, r2
   1b978:	e1a04104 	lsl	r4, r4, #2
   1b97c:	e585300c 	str	r3, [r5, #12]
   1b980:	e5854008 	str	r4, [r5, #8]
   1b984:	e8bd8070 	pop	{r4, r5, r6, pc}
   1b988:	eb0008ea 	bl	1dd38 <CMachineInfo::Get()>
   1b98c:	e6ef1074 	uxtb	r1, r4
   1b990:	eb0008bb 	bl	1dc84 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>
   1b994:	e3500035 	cmp	r0, #53	; 0x35
   1b998:	e1a04000 	mov	r4, r0
   1b99c:	e5850004 	str	r0, [r5, #4]
   1b9a0:	9afffff0 	bls	1b968 <CGPIOPin::AssignPin(unsigned int)+0x34>
   1b9a4:	e3a02047 	mov	r2, #71	; 0x47
   1b9a8:	e59f100c 	ldr	r1, [pc, #12]	; 1b9bc <CGPIOPin::AssignPin(unsigned int)+0x88>
   1b9ac:	e59f0010 	ldr	r0, [pc, #16]	; 1b9c4 <CGPIOPin::AssignPin(unsigned int)+0x90>
   1b9b0:	ebfffc30 	bl	1aa78 <assertion_failed>
   1b9b4:	e5954004 	ldr	r4, [r5, #4]
   1b9b8:	eaffffea 	b	1b968 <CGPIOPin::AssignPin(unsigned int)+0x34>
   1b9bc:	000291c8 	.word	0x000291c8
   1b9c0:	000291d4 	.word	0x000291d4
   1b9c4:	000291e8 	.word	0x000291e8

0001b9c8 <CGPIOPin::Write(unsigned int)>:
   1b9c8:	e5903004 	ldr	r3, [r0, #4]
   1b9cc:	e92d4070 	push	{r4, r5, r6, lr}
   1b9d0:	e3530035 	cmp	r3, #53	; 0x35
   1b9d4:	e1a04000 	mov	r4, r0
   1b9d8:	e1a05001 	mov	r5, r1
   1b9dc:	8a00001e 	bhi	1ba5c <CGPIOPin::Write(unsigned int)+0x94>
   1b9e0:	e5d43010 	ldrb	r3, [r4, #16]
   1b9e4:	e3530003 	cmp	r3, #3
   1b9e8:	ca000016 	bgt	1ba48 <CGPIOPin::Write(unsigned int)+0x80>
   1b9ec:	e3a03000 	mov	r3, #0
   1b9f0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   1b9f4:	e3550001 	cmp	r5, #1
   1b9f8:	9a00000b 	bls	1ba2c <CGPIOPin::Write(unsigned int)+0x64>
   1b9fc:	e3a02098 	mov	r2, #152	; 0x98
   1ba00:	e59f1068 	ldr	r1, [pc, #104]	; 1ba70 <CGPIOPin::Write(unsigned int)+0xa8>
   1ba04:	e59f0068 	ldr	r0, [pc, #104]	; 1ba74 <CGPIOPin::Write(unsigned int)+0xac>
   1ba08:	ebfffc1a 	bl	1aa78 <assertion_failed>
   1ba0c:	e5845014 	str	r5, [r4, #20]
   1ba10:	e59f5060 	ldr	r5, [pc, #96]	; 1ba78 <CGPIOPin::Write(unsigned int)+0xb0>
   1ba14:	e594100c 	ldr	r1, [r4, #12]
   1ba18:	e5942008 	ldr	r2, [r4, #8]
   1ba1c:	e3a03000 	mov	r3, #0
   1ba20:	e7851002 	str	r1, [r5, r2]
   1ba24:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   1ba28:	e8bd8070 	pop	{r4, r5, r6, pc}
   1ba2c:	e59f3044 	ldr	r3, [pc, #68]	; 1ba78 <CGPIOPin::Write(unsigned int)+0xb0>
   1ba30:	e59f2044 	ldr	r2, [pc, #68]	; 1ba7c <CGPIOPin::Write(unsigned int)+0xb4>
   1ba34:	e3550000 	cmp	r5, #0
   1ba38:	e5845014 	str	r5, [r4, #20]
   1ba3c:	11a05003 	movne	r5, r3
   1ba40:	01a05002 	moveq	r5, r2
   1ba44:	eafffff2 	b	1ba14 <CGPIOPin::Write(unsigned int)+0x4c>
   1ba48:	e3a02094 	mov	r2, #148	; 0x94
   1ba4c:	e59f101c 	ldr	r1, [pc, #28]	; 1ba70 <CGPIOPin::Write(unsigned int)+0xa8>
   1ba50:	e59f0028 	ldr	r0, [pc, #40]	; 1ba80 <CGPIOPin::Write(unsigned int)+0xb8>
   1ba54:	ebfffc07 	bl	1aa78 <assertion_failed>
   1ba58:	eaffffe3 	b	1b9ec <CGPIOPin::Write(unsigned int)+0x24>
   1ba5c:	e3a02091 	mov	r2, #145	; 0x91
   1ba60:	e59f1008 	ldr	r1, [pc, #8]	; 1ba70 <CGPIOPin::Write(unsigned int)+0xa8>
   1ba64:	e59f0018 	ldr	r0, [pc, #24]	; 1ba84 <CGPIOPin::Write(unsigned int)+0xbc>
   1ba68:	ebfffc02 	bl	1aa78 <assertion_failed>
   1ba6c:	eaffffdb 	b	1b9e0 <CGPIOPin::Write(unsigned int)+0x18>
   1ba70:	000291c8 	.word	0x000291c8
   1ba74:	00029220 	.word	0x00029220
   1ba78:	2020001c 	.word	0x2020001c
   1ba7c:	20200028 	.word	0x20200028
   1ba80:	000291fc 	.word	0x000291fc
   1ba84:	000291e8 	.word	0x000291e8

0001ba88 <CGPIOPin::Read() const>:
   1ba88:	e5903004 	ldr	r3, [r0, #4]
   1ba8c:	e92d4010 	push	{r4, lr}
   1ba90:	e3530035 	cmp	r3, #53	; 0x35
   1ba94:	e1a04000 	mov	r4, r0
   1ba98:	8a000013 	bhi	1baec <CGPIOPin::Read() const+0x64>
   1ba9c:	e5d43010 	ldrb	r3, [r4, #16]
   1baa0:	e2432002 	sub	r2, r3, #2
   1baa4:	e3530000 	cmp	r3, #0
   1baa8:	13520001 	cmpne	r2, #1
   1baac:	9a000003 	bls	1bac0 <CGPIOPin::Read() const+0x38>
   1bab0:	e3a020a8 	mov	r2, #168	; 0xa8
   1bab4:	e59f1044 	ldr	r1, [pc, #68]	; 1bb00 <CGPIOPin::Read() const+0x78>
   1bab8:	e59f0044 	ldr	r0, [pc, #68]	; 1bb04 <CGPIOPin::Read() const+0x7c>
   1babc:	ebfffbed 	bl	1aa78 <assertion_failed>
   1bac0:	e3a03000 	mov	r3, #0
   1bac4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   1bac8:	e59f1038 	ldr	r1, [pc, #56]	; 1bb08 <CGPIOPin::Read() const+0x80>
   1bacc:	e5940008 	ldr	r0, [r4, #8]
   1bad0:	e594200c 	ldr	r2, [r4, #12]
   1bad4:	e7901001 	ldr	r1, [r0, r1]
   1bad8:	e1110002 	tst	r1, r2
   1badc:	13a00001 	movne	r0, #1
   1bae0:	01a00003 	moveq	r0, r3
   1bae4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   1bae8:	e8bd8010 	pop	{r4, pc}
   1baec:	e3a020a4 	mov	r2, #164	; 0xa4
   1baf0:	e59f1008 	ldr	r1, [pc, #8]	; 1bb00 <CGPIOPin::Read() const+0x78>
   1baf4:	e59f0010 	ldr	r0, [pc, #16]	; 1bb0c <CGPIOPin::Read() const+0x84>
   1baf8:	ebfffbde 	bl	1aa78 <assertion_failed>
   1bafc:	eaffffe6 	b	1ba9c <CGPIOPin::Read() const+0x14>
   1bb00:	000291c8 	.word	0x000291c8
   1bb04:	00029240 	.word	0x00029240
   1bb08:	20200034 	.word	0x20200034
   1bb0c:	000291e8 	.word	0x000291e8

0001bb10 <CGPIOPin::Invert()>:
   1bb10:	e5d03010 	ldrb	r3, [r0, #16]
   1bb14:	e92d4010 	push	{r4, lr}
   1bb18:	e3530001 	cmp	r3, #1
   1bb1c:	e1a04000 	mov	r4, r0
   1bb20:	0a000003 	beq	1bb34 <CGPIOPin::Invert()+0x24>
   1bb24:	e3a020b5 	mov	r2, #181	; 0xb5
   1bb28:	e59f1018 	ldr	r1, [pc, #24]	; 1bb48 <CGPIOPin::Invert()+0x38>
   1bb2c:	e59f0018 	ldr	r0, [pc, #24]	; 1bb4c <CGPIOPin::Invert()+0x3c>
   1bb30:	ebfffbd0 	bl	1aa78 <assertion_failed>
   1bb34:	e5941014 	ldr	r1, [r4, #20]
   1bb38:	e1a00004 	mov	r0, r4
   1bb3c:	e8bd4010 	pop	{r4, lr}
   1bb40:	e2211001 	eor	r1, r1, #1
   1bb44:	eaffff9f 	b	1b9c8 <CGPIOPin::Write(unsigned int)>
   1bb48:	000291c8 	.word	0x000291c8
   1bb4c:	0002929c 	.word	0x0002929c

0001bb50 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)>:
   1bb50:	e5d03010 	ldrb	r3, [r0, #16]
   1bb54:	e92d4070 	push	{r4, r5, r6, lr}
   1bb58:	e1a05001 	mov	r5, r1
   1bb5c:	e2431002 	sub	r1, r3, #2
   1bb60:	e3530000 	cmp	r3, #0
   1bb64:	13510001 	cmpne	r1, #1
   1bb68:	e1a04000 	mov	r4, r0
   1bb6c:	e1a06002 	mov	r6, r2
   1bb70:	9a000003 	bls	1bb84 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x34>
   1bb74:	e3a020be 	mov	r2, #190	; 0xbe
   1bb78:	e59f10b4 	ldr	r1, [pc, #180]	; 1bc34 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe4>
   1bb7c:	e59f00b4 	ldr	r0, [pc, #180]	; 1bc38 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe8>
   1bb80:	ebfffbbc 	bl	1aa78 <assertion_failed>
   1bb84:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
   1bb88:	e3530006 	cmp	r3, #6
   1bb8c:	0a000003 	beq	1bba0 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x50>
   1bb90:	e3a020c0 	mov	r2, #192	; 0xc0
   1bb94:	e59f1098 	ldr	r1, [pc, #152]	; 1bc34 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe4>
   1bb98:	e59f009c 	ldr	r0, [pc, #156]	; 1bc3c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xec>
   1bb9c:	ebfffbb5 	bl	1aa78 <assertion_failed>
   1bba0:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
   1bba4:	e3530006 	cmp	r3, #6
   1bba8:	0a000003 	beq	1bbbc <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x6c>
   1bbac:	e3a020c1 	mov	r2, #193	; 0xc1
   1bbb0:	e59f107c 	ldr	r1, [pc, #124]	; 1bc34 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe4>
   1bbb4:	e59f0084 	ldr	r0, [pc, #132]	; 1bc40 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xf0>
   1bbb8:	ebfffbae 	bl	1aa78 <assertion_failed>
   1bbbc:	e3550000 	cmp	r5, #0
   1bbc0:	0a000016 	beq	1bc20 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xd0>
   1bbc4:	e594301c 	ldr	r3, [r4, #28]
   1bbc8:	e3530000 	cmp	r3, #0
   1bbcc:	0a000003 	beq	1bbe0 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x90>
   1bbd0:	e3a020c4 	mov	r2, #196	; 0xc4
   1bbd4:	e59f1058 	ldr	r1, [pc, #88]	; 1bc34 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe4>
   1bbd8:	e59f0064 	ldr	r0, [pc, #100]	; 1bc44 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xf4>
   1bbdc:	ebfffba5 	bl	1aa78 <assertion_failed>
   1bbe0:	e5940018 	ldr	r0, [r4, #24]
   1bbe4:	e584501c 	str	r5, [r4, #28]
   1bbe8:	e3500000 	cmp	r0, #0
   1bbec:	e5846020 	str	r6, [r4, #32]
   1bbf0:	0a000002 	beq	1bc00 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xb0>
   1bbf4:	e1a01004 	mov	r1, r4
   1bbf8:	e8bd4070 	pop	{r4, r5, r6, lr}
   1bbfc:	ea001ff4 	b	23bd4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
   1bc00:	e59f102c 	ldr	r1, [pc, #44]	; 1bc34 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe4>
   1bc04:	e59f003c 	ldr	r0, [pc, #60]	; 1bc48 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xf8>
   1bc08:	e3a020c9 	mov	r2, #201	; 0xc9
   1bc0c:	ebfffb99 	bl	1aa78 <assertion_failed>
   1bc10:	e5940018 	ldr	r0, [r4, #24]
   1bc14:	e1a01004 	mov	r1, r4
   1bc18:	e8bd4070 	pop	{r4, r5, r6, lr}
   1bc1c:	ea001fec 	b	23bd4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
   1bc20:	e3a020c3 	mov	r2, #195	; 0xc3
   1bc24:	e59f1008 	ldr	r1, [pc, #8]	; 1bc34 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe4>
   1bc28:	e59f001c 	ldr	r0, [pc, #28]	; 1bc4c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xfc>
   1bc2c:	ebfffb91 	bl	1aa78 <assertion_failed>
   1bc30:	eaffffe3 	b	1bbc4 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x74>
   1bc34:	000291c8 	.word	0x000291c8
   1bc38:	00029240 	.word	0x00029240
   1bc3c:	000292b8 	.word	0x000292b8
   1bc40:	000292dc 	.word	0x000292dc
   1bc44:	00029304 	.word	0x00029304
   1bc48:	00029314 	.word	0x00029314
   1bc4c:	00029484 	.word	0x00029484

0001bc50 <CGPIOPin::DisconnectInterrupt()>:
   1bc50:	e5d03010 	ldrb	r3, [r0, #16]
   1bc54:	e92d4010 	push	{r4, lr}
   1bc58:	e2432002 	sub	r2, r3, #2
   1bc5c:	e3530000 	cmp	r3, #0
   1bc60:	13520001 	cmpne	r2, #1
   1bc64:	e1a04000 	mov	r4, r0
   1bc68:	9a000003 	bls	1bc7c <CGPIOPin::DisconnectInterrupt()+0x2c>
   1bc6c:	e3a020d1 	mov	r2, #209	; 0xd1
   1bc70:	e59f109c 	ldr	r1, [pc, #156]	; 1bd14 <CGPIOPin::DisconnectInterrupt()+0xc4>
   1bc74:	e59f009c 	ldr	r0, [pc, #156]	; 1bd18 <CGPIOPin::DisconnectInterrupt()+0xc8>
   1bc78:	ebfffb7e 	bl	1aa78 <assertion_failed>
   1bc7c:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
   1bc80:	e3530006 	cmp	r3, #6
   1bc84:	0a000003 	beq	1bc98 <CGPIOPin::DisconnectInterrupt()+0x48>
   1bc88:	e3a020d3 	mov	r2, #211	; 0xd3
   1bc8c:	e59f1080 	ldr	r1, [pc, #128]	; 1bd14 <CGPIOPin::DisconnectInterrupt()+0xc4>
   1bc90:	e59f0084 	ldr	r0, [pc, #132]	; 1bd1c <CGPIOPin::DisconnectInterrupt()+0xcc>
   1bc94:	ebfffb77 	bl	1aa78 <assertion_failed>
   1bc98:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
   1bc9c:	e3530006 	cmp	r3, #6
   1bca0:	0a000003 	beq	1bcb4 <CGPIOPin::DisconnectInterrupt()+0x64>
   1bca4:	e3a020d4 	mov	r2, #212	; 0xd4
   1bca8:	e59f1064 	ldr	r1, [pc, #100]	; 1bd14 <CGPIOPin::DisconnectInterrupt()+0xc4>
   1bcac:	e59f006c 	ldr	r0, [pc, #108]	; 1bd20 <CGPIOPin::DisconnectInterrupt()+0xd0>
   1bcb0:	ebfffb70 	bl	1aa78 <assertion_failed>
   1bcb4:	e594301c 	ldr	r3, [r4, #28]
   1bcb8:	e3530000 	cmp	r3, #0
   1bcbc:	0a00000f 	beq	1bd00 <CGPIOPin::DisconnectInterrupt()+0xb0>
   1bcc0:	e3a03000 	mov	r3, #0
   1bcc4:	e5940018 	ldr	r0, [r4, #24]
   1bcc8:	e584301c 	str	r3, [r4, #28]
   1bccc:	e1500003 	cmp	r0, r3
   1bcd0:	0a000002 	beq	1bce0 <CGPIOPin::DisconnectInterrupt()+0x90>
   1bcd4:	e1a01004 	mov	r1, r4
   1bcd8:	e8bd4010 	pop	{r4, lr}
   1bcdc:	ea001fe5 	b	23c78 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
   1bce0:	e59f102c 	ldr	r1, [pc, #44]	; 1bd14 <CGPIOPin::DisconnectInterrupt()+0xc4>
   1bce4:	e59f0038 	ldr	r0, [pc, #56]	; 1bd24 <CGPIOPin::DisconnectInterrupt()+0xd4>
   1bce8:	e3a020d9 	mov	r2, #217	; 0xd9
   1bcec:	ebfffb61 	bl	1aa78 <assertion_failed>
   1bcf0:	e5940018 	ldr	r0, [r4, #24]
   1bcf4:	e1a01004 	mov	r1, r4
   1bcf8:	e8bd4010 	pop	{r4, lr}
   1bcfc:	ea001fdd 	b	23c78 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
   1bd00:	e3a020d6 	mov	r2, #214	; 0xd6
   1bd04:	e59f1008 	ldr	r1, [pc, #8]	; 1bd14 <CGPIOPin::DisconnectInterrupt()+0xc4>
   1bd08:	e59f0018 	ldr	r0, [pc, #24]	; 1bd28 <CGPIOPin::DisconnectInterrupt()+0xd8>
   1bd0c:	ebfffb59 	bl	1aa78 <assertion_failed>
   1bd10:	eaffffea 	b	1bcc0 <CGPIOPin::DisconnectInterrupt()+0x70>
   1bd14:	000291c8 	.word	0x000291c8
   1bd18:	00029240 	.word	0x00029240
   1bd1c:	000292b8 	.word	0x000292b8
   1bd20:	000292dc 	.word	0x000292dc
   1bd24:	00029314 	.word	0x00029314
   1bd28:	00029324 	.word	0x00029324

0001bd2c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)>:
   1bd2c:	e5d03010 	ldrb	r3, [r0, #16]
   1bd30:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1bd34:	e2432002 	sub	r2, r3, #2
   1bd38:	e3530000 	cmp	r3, #0
   1bd3c:	13520001 	cmpne	r2, #1
   1bd40:	e1a04000 	mov	r4, r0
   1bd44:	e1a05001 	mov	r5, r1
   1bd48:	9a000003 	bls	1bd5c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x30>
   1bd4c:	e3a020e1 	mov	r2, #225	; 0xe1
   1bd50:	e59f10d8 	ldr	r1, [pc, #216]	; 1be30 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x104>
   1bd54:	e59f00d8 	ldr	r0, [pc, #216]	; 1be34 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x108>
   1bd58:	ebfffb46 	bl	1aa78 <assertion_failed>
   1bd5c:	e594301c 	ldr	r3, [r4, #28]
   1bd60:	e3530000 	cmp	r3, #0
   1bd64:	0a00002c 	beq	1be1c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf0>
   1bd68:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
   1bd6c:	e3530006 	cmp	r3, #6
   1bd70:	0a000003 	beq	1bd84 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x58>
   1bd74:	e3a020e4 	mov	r2, #228	; 0xe4
   1bd78:	e59f10b0 	ldr	r1, [pc, #176]	; 1be30 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x104>
   1bd7c:	e59f00b4 	ldr	r0, [pc, #180]	; 1be38 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x10c>
   1bd80:	ebfffb3c 	bl	1aa78 <assertion_failed>
   1bd84:	e3550005 	cmp	r5, #5
   1bd88:	ca000017 	bgt	1bdec <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xc0>
   1bd8c:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
   1bd90:	e1530005 	cmp	r3, r5
   1bd94:	0a00001b 	beq	1be08 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xdc>
   1bd98:	e59f709c 	ldr	r7, [pc, #156]	; 1be3c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x110>
   1bd9c:	e5942008 	ldr	r2, [r4, #8]
   1bda0:	e5970000 	ldr	r0, [r7]
   1bda4:	e59f6094 	ldr	r6, [pc, #148]	; 1be40 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x114>
   1bda8:	e0853085 	add	r3, r5, r5, lsl #1
   1bdac:	e3500000 	cmp	r0, #0
   1bdb0:	e5c45024 	strb	r5, [r4, #36]	; 0x24
   1bdb4:	e0826006 	add	r6, r2, r6
   1bdb8:	e1a05103 	lsl	r5, r3, #2
   1bdbc:	1a000008 	bne	1bde4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xb8>
   1bdc0:	e594200c 	ldr	r2, [r4, #12]
   1bdc4:	e7963005 	ldr	r3, [r6, r5]
   1bdc8:	e1833002 	orr	r3, r3, r2
   1bdcc:	e7863005 	str	r3, [r6, r5]
   1bdd0:	e5973000 	ldr	r3, [r7]
   1bdd4:	e3530000 	cmp	r3, #0
   1bdd8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   1bddc:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1bde0:	ea001bbc 	b	22cd8 <LeaveCritical>
   1bde4:	eb001b8e 	bl	22c24 <EnterCritical>
   1bde8:	eafffff4 	b	1bdc0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x94>
   1bdec:	e3a020e5 	mov	r2, #229	; 0xe5
   1bdf0:	e59f1038 	ldr	r1, [pc, #56]	; 1be30 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x104>
   1bdf4:	e59f0048 	ldr	r0, [pc, #72]	; 1be44 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x118>
   1bdf8:	ebfffb1e 	bl	1aa78 <assertion_failed>
   1bdfc:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
   1be00:	e1530005 	cmp	r3, r5
   1be04:	1affffe3 	bne	1bd98 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x6c>
   1be08:	e3a020e6 	mov	r2, #230	; 0xe6
   1be0c:	e59f101c 	ldr	r1, [pc, #28]	; 1be30 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x104>
   1be10:	e59f0030 	ldr	r0, [pc, #48]	; 1be48 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x11c>
   1be14:	ebfffb17 	bl	1aa78 <assertion_failed>
   1be18:	eaffffde 	b	1bd98 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x6c>
   1be1c:	e3a020e2 	mov	r2, #226	; 0xe2
   1be20:	e59f1008 	ldr	r1, [pc, #8]	; 1be30 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x104>
   1be24:	e59f0020 	ldr	r0, [pc, #32]	; 1be4c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x120>
   1be28:	ebfffb12 	bl	1aa78 <assertion_failed>
   1be2c:	eaffffcd 	b	1bd68 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x3c>
   1be30:	000291c8 	.word	0x000291c8
   1be34:	00029240 	.word	0x00029240
   1be38:	000292b8 	.word	0x000292b8
   1be3c:	0002b958 	.word	0x0002b958
   1be40:	2020004c 	.word	0x2020004c
   1be44:	00029334 	.word	0x00029334
   1be48:	00029358 	.word	0x00029358
   1be4c:	00029324 	.word	0x00029324

0001be50 <CGPIOPin::DisableInterrupt()>:
   1be50:	e5d03010 	ldrb	r3, [r0, #16]
   1be54:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1be58:	e2432002 	sub	r2, r3, #2
   1be5c:	e3530000 	cmp	r3, #0
   1be60:	13520001 	cmpne	r2, #1
   1be64:	e1a05000 	mov	r5, r0
   1be68:	9a000003 	bls	1be7c <CGPIOPin::DisableInterrupt()+0x2c>
   1be6c:	e3a020f7 	mov	r2, #247	; 0xf7
   1be70:	e59f1080 	ldr	r1, [pc, #128]	; 1bef8 <CGPIOPin::DisableInterrupt()+0xa8>
   1be74:	e59f0080 	ldr	r0, [pc, #128]	; 1befc <CGPIOPin::DisableInterrupt()+0xac>
   1be78:	ebfffafe 	bl	1aa78 <assertion_failed>
   1be7c:	e5d53024 	ldrb	r3, [r5, #36]	; 0x24
   1be80:	e3530005 	cmp	r3, #5
   1be84:	ca000015 	bgt	1bee0 <CGPIOPin::DisableInterrupt()+0x90>
   1be88:	e59f7070 	ldr	r7, [pc, #112]	; 1bf00 <CGPIOPin::DisableInterrupt()+0xb0>
   1be8c:	e5952008 	ldr	r2, [r5, #8]
   1be90:	e5970000 	ldr	r0, [r7]
   1be94:	e59f6068 	ldr	r6, [pc, #104]	; 1bf04 <CGPIOPin::DisableInterrupt()+0xb4>
   1be98:	e0833083 	add	r3, r3, r3, lsl #1
   1be9c:	e3500000 	cmp	r0, #0
   1bea0:	e1a04103 	lsl	r4, r3, #2
   1bea4:	e0826006 	add	r6, r2, r6
   1bea8:	1a00000a 	bne	1bed8 <CGPIOPin::DisableInterrupt()+0x88>
   1beac:	e7963004 	ldr	r3, [r6, r4]
   1beb0:	e595200c 	ldr	r2, [r5, #12]
   1beb4:	e1c33002 	bic	r3, r3, r2
   1beb8:	e7863004 	str	r3, [r6, r4]
   1bebc:	e5973000 	ldr	r3, [r7]
   1bec0:	e3530000 	cmp	r3, #0
   1bec4:	0a000000 	beq	1becc <CGPIOPin::DisableInterrupt()+0x7c>
   1bec8:	eb001b82 	bl	22cd8 <LeaveCritical>
   1becc:	e3a03006 	mov	r3, #6
   1bed0:	e5c53024 	strb	r3, [r5, #36]	; 0x24
   1bed4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1bed8:	eb001b51 	bl	22c24 <EnterCritical>
   1bedc:	eafffff2 	b	1beac <CGPIOPin::DisableInterrupt()+0x5c>
   1bee0:	e3a020f9 	mov	r2, #249	; 0xf9
   1bee4:	e59f100c 	ldr	r1, [pc, #12]	; 1bef8 <CGPIOPin::DisableInterrupt()+0xa8>
   1bee8:	e59f0018 	ldr	r0, [pc, #24]	; 1bf08 <CGPIOPin::DisableInterrupt()+0xb8>
   1beec:	ebfffae1 	bl	1aa78 <assertion_failed>
   1bef0:	e5d53024 	ldrb	r3, [r5, #36]	; 0x24
   1bef4:	eaffffe3 	b	1be88 <CGPIOPin::DisableInterrupt()+0x38>
   1bef8:	000291c8 	.word	0x000291c8
   1befc:	00029240 	.word	0x00029240
   1bf00:	0002b958 	.word	0x0002b958
   1bf04:	2020004c 	.word	0x2020004c
   1bf08:	00029374 	.word	0x00029374

0001bf0c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)>:
   1bf0c:	e5d03010 	ldrb	r3, [r0, #16]
   1bf10:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1bf14:	e2432002 	sub	r2, r3, #2
   1bf18:	e3530000 	cmp	r3, #0
   1bf1c:	13520001 	cmpne	r2, #1
   1bf20:	e1a04000 	mov	r4, r0
   1bf24:	e1a05001 	mov	r5, r1
   1bf28:	9a000003 	bls	1bf3c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x30>
   1bf2c:	e59f20dc 	ldr	r2, [pc, #220]	; 1c010 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x104>
   1bf30:	e59f10dc 	ldr	r1, [pc, #220]	; 1c014 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x108>
   1bf34:	e59f00dc 	ldr	r0, [pc, #220]	; 1c018 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x10c>
   1bf38:	ebffface 	bl	1aa78 <assertion_failed>
   1bf3c:	e594301c 	ldr	r3, [r4, #28]
   1bf40:	e3530000 	cmp	r3, #0
   1bf44:	0a00002c 	beq	1bffc <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf0>
   1bf48:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
   1bf4c:	e3530006 	cmp	r3, #6
   1bf50:	0a000003 	beq	1bf64 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x58>
   1bf54:	e59f20c0 	ldr	r2, [pc, #192]	; 1c01c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x110>
   1bf58:	e59f10b4 	ldr	r1, [pc, #180]	; 1c014 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x108>
   1bf5c:	e59f00bc 	ldr	r0, [pc, #188]	; 1c020 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x114>
   1bf60:	ebfffac4 	bl	1aa78 <assertion_failed>
   1bf64:	e3550005 	cmp	r5, #5
   1bf68:	ca000017 	bgt	1bfcc <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xc0>
   1bf6c:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
   1bf70:	e1530005 	cmp	r3, r5
   1bf74:	0a00001b 	beq	1bfe8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xdc>
   1bf78:	e59f70a4 	ldr	r7, [pc, #164]	; 1c024 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x118>
   1bf7c:	e5942008 	ldr	r2, [r4, #8]
   1bf80:	e5970000 	ldr	r0, [r7]
   1bf84:	e59f609c 	ldr	r6, [pc, #156]	; 1c028 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x11c>
   1bf88:	e0853085 	add	r3, r5, r5, lsl #1
   1bf8c:	e3500000 	cmp	r0, #0
   1bf90:	e5c45025 	strb	r5, [r4, #37]	; 0x25
   1bf94:	e0826006 	add	r6, r2, r6
   1bf98:	e1a05103 	lsl	r5, r3, #2
   1bf9c:	1a000008 	bne	1bfc4 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xb8>
   1bfa0:	e594200c 	ldr	r2, [r4, #12]
   1bfa4:	e7963005 	ldr	r3, [r6, r5]
   1bfa8:	e1833002 	orr	r3, r3, r2
   1bfac:	e7863005 	str	r3, [r6, r5]
   1bfb0:	e5973000 	ldr	r3, [r7]
   1bfb4:	e3530000 	cmp	r3, #0
   1bfb8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   1bfbc:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1bfc0:	ea001b44 	b	22cd8 <LeaveCritical>
   1bfc4:	eb001b16 	bl	22c24 <EnterCritical>
   1bfc8:	eafffff4 	b	1bfa0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x94>
   1bfcc:	e59f2058 	ldr	r2, [pc, #88]	; 1c02c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x120>
   1bfd0:	e59f103c 	ldr	r1, [pc, #60]	; 1c014 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x108>
   1bfd4:	e59f0054 	ldr	r0, [pc, #84]	; 1c030 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x124>
   1bfd8:	ebfffaa6 	bl	1aa78 <assertion_failed>
   1bfdc:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
   1bfe0:	e1530005 	cmp	r3, r5
   1bfe4:	1affffe3 	bne	1bf78 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x6c>
   1bfe8:	e59f2044 	ldr	r2, [pc, #68]	; 1c034 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x128>
   1bfec:	e59f1020 	ldr	r1, [pc, #32]	; 1c014 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x108>
   1bff0:	e59f0040 	ldr	r0, [pc, #64]	; 1c038 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x12c>
   1bff4:	ebfffa9f 	bl	1aa78 <assertion_failed>
   1bff8:	eaffffde 	b	1bf78 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x6c>
   1bffc:	e59f2038 	ldr	r2, [pc, #56]	; 1c03c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x130>
   1c000:	e59f100c 	ldr	r1, [pc, #12]	; 1c014 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x108>
   1c004:	e59f0034 	ldr	r0, [pc, #52]	; 1c040 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x134>
   1c008:	ebfffa9a 	bl	1aa78 <assertion_failed>
   1c00c:	eaffffcd 	b	1bf48 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x3c>
   1c010:	0000010a 	.word	0x0000010a
   1c014:	000291c8 	.word	0x000291c8
   1c018:	00029240 	.word	0x00029240
   1c01c:	0000010d 	.word	0x0000010d
   1c020:	000292dc 	.word	0x000292dc
   1c024:	0002b958 	.word	0x0002b958
   1c028:	2020004c 	.word	0x2020004c
   1c02c:	0000010e 	.word	0x0000010e
   1c030:	00029334 	.word	0x00029334
   1c034:	0000010f 	.word	0x0000010f
   1c038:	00029398 	.word	0x00029398
   1c03c:	0000010b 	.word	0x0000010b
   1c040:	00029324 	.word	0x00029324

0001c044 <CGPIOPin::DisableInterrupt2()>:
   1c044:	e5d03010 	ldrb	r3, [r0, #16]
   1c048:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1c04c:	e2432002 	sub	r2, r3, #2
   1c050:	e3530000 	cmp	r3, #0
   1c054:	13520001 	cmpne	r2, #1
   1c058:	e1a05000 	mov	r5, r0
   1c05c:	9a000003 	bls	1c070 <CGPIOPin::DisableInterrupt2()+0x2c>
   1c060:	e3a02e12 	mov	r2, #288	; 0x120
   1c064:	e59f1080 	ldr	r1, [pc, #128]	; 1c0ec <CGPIOPin::DisableInterrupt2()+0xa8>
   1c068:	e59f0080 	ldr	r0, [pc, #128]	; 1c0f0 <CGPIOPin::DisableInterrupt2()+0xac>
   1c06c:	ebfffa81 	bl	1aa78 <assertion_failed>
   1c070:	e5d53025 	ldrb	r3, [r5, #37]	; 0x25
   1c074:	e3530005 	cmp	r3, #5
   1c078:	ca000015 	bgt	1c0d4 <CGPIOPin::DisableInterrupt2()+0x90>
   1c07c:	e59f7070 	ldr	r7, [pc, #112]	; 1c0f4 <CGPIOPin::DisableInterrupt2()+0xb0>
   1c080:	e5952008 	ldr	r2, [r5, #8]
   1c084:	e5970000 	ldr	r0, [r7]
   1c088:	e59f6068 	ldr	r6, [pc, #104]	; 1c0f8 <CGPIOPin::DisableInterrupt2()+0xb4>
   1c08c:	e0833083 	add	r3, r3, r3, lsl #1
   1c090:	e3500000 	cmp	r0, #0
   1c094:	e1a04103 	lsl	r4, r3, #2
   1c098:	e0826006 	add	r6, r2, r6
   1c09c:	1a00000a 	bne	1c0cc <CGPIOPin::DisableInterrupt2()+0x88>
   1c0a0:	e7963004 	ldr	r3, [r6, r4]
   1c0a4:	e595200c 	ldr	r2, [r5, #12]
   1c0a8:	e1c33002 	bic	r3, r3, r2
   1c0ac:	e7863004 	str	r3, [r6, r4]
   1c0b0:	e5973000 	ldr	r3, [r7]
   1c0b4:	e3530000 	cmp	r3, #0
   1c0b8:	0a000000 	beq	1c0c0 <CGPIOPin::DisableInterrupt2()+0x7c>
   1c0bc:	eb001b05 	bl	22cd8 <LeaveCritical>
   1c0c0:	e3a03006 	mov	r3, #6
   1c0c4:	e5c53025 	strb	r3, [r5, #37]	; 0x25
   1c0c8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1c0cc:	eb001ad4 	bl	22c24 <EnterCritical>
   1c0d0:	eafffff2 	b	1c0a0 <CGPIOPin::DisableInterrupt2()+0x5c>
   1c0d4:	e59f2020 	ldr	r2, [pc, #32]	; 1c0fc <CGPIOPin::DisableInterrupt2()+0xb8>
   1c0d8:	e59f100c 	ldr	r1, [pc, #12]	; 1c0ec <CGPIOPin::DisableInterrupt2()+0xa8>
   1c0dc:	e59f001c 	ldr	r0, [pc, #28]	; 1c100 <CGPIOPin::DisableInterrupt2()+0xbc>
   1c0e0:	ebfffa64 	bl	1aa78 <assertion_failed>
   1c0e4:	e5d53025 	ldrb	r3, [r5, #37]	; 0x25
   1c0e8:	eaffffe3 	b	1c07c <CGPIOPin::DisableInterrupt2()+0x38>
   1c0ec:	000291c8 	.word	0x000291c8
   1c0f0:	00029240 	.word	0x00029240
   1c0f4:	0002b958 	.word	0x0002b958
   1c0f8:	2020004c 	.word	0x2020004c
   1c0fc:	00000122 	.word	0x00000122
   1c100:	000293b4 	.word	0x000293b4

0001c104 <CGPIOPin::ReadAll()>:
   1c104:	e59f3004 	ldr	r3, [pc, #4]	; 1c110 <CGPIOPin::ReadAll()+0xc>
   1c108:	e5930034 	ldr	r0, [r3, #52]	; 0x34
   1c10c:	e12fff1e 	bx	lr
   1c110:	20200000 	.word	0x20200000

0001c114 <CGPIOPin::SetPullUpMode(unsigned int)>:
   1c114:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c118:	e1a08000 	mov	r8, r0
   1c11c:	e59f4078 	ldr	r4, [pc, #120]	; 1c19c <CGPIOPin::SetPullUpMode(unsigned int)+0x88>
   1c120:	e1a09001 	mov	r9, r1
   1c124:	e5940000 	ldr	r0, [r4]
   1c128:	e5986008 	ldr	r6, [r8, #8]
   1c12c:	e3500000 	cmp	r0, #0
   1c130:	e59f5068 	ldr	r5, [pc, #104]	; 1c1a0 <CGPIOPin::SetPullUpMode(unsigned int)+0x8c>
   1c134:	1a000016 	bne	1c194 <CGPIOPin::SetPullUpMode(unsigned int)+0x80>
   1c138:	e3590002 	cmp	r9, #2
   1c13c:	8a00000f 	bhi	1c180 <CGPIOPin::SetPullUpMode(unsigned int)+0x6c>
   1c140:	e59f705c 	ldr	r7, [pc, #92]	; 1c1a4 <CGPIOPin::SetPullUpMode(unsigned int)+0x90>
   1c144:	e3a00005 	mov	r0, #5
   1c148:	e5879094 	str	r9, [r7, #148]	; 0x94
   1c14c:	eb00165f 	bl	21ad0 <CTimer::SimpleusDelay(unsigned int)>
   1c150:	e598300c 	ldr	r3, [r8, #12]
   1c154:	e3a00005 	mov	r0, #5
   1c158:	e7863005 	str	r3, [r6, r5]
   1c15c:	eb00165b 	bl	21ad0 <CTimer::SimpleusDelay(unsigned int)>
   1c160:	e3a03000 	mov	r3, #0
   1c164:	e5873094 	str	r3, [r7, #148]	; 0x94
   1c168:	e7863005 	str	r3, [r6, r5]
   1c16c:	e5943000 	ldr	r3, [r4]
   1c170:	e3530000 	cmp	r3, #0
   1c174:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c178:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c17c:	ea001ad5 	b	22cd8 <LeaveCritical>
   1c180:	e59f2020 	ldr	r2, [pc, #32]	; 1c1a8 <CGPIOPin::SetPullUpMode(unsigned int)+0x94>
   1c184:	e59f1020 	ldr	r1, [pc, #32]	; 1c1ac <CGPIOPin::SetPullUpMode(unsigned int)+0x98>
   1c188:	e59f0020 	ldr	r0, [pc, #32]	; 1c1b0 <CGPIOPin::SetPullUpMode(unsigned int)+0x9c>
   1c18c:	ebfffa39 	bl	1aa78 <assertion_failed>
   1c190:	eaffffea 	b	1c140 <CGPIOPin::SetPullUpMode(unsigned int)+0x2c>
   1c194:	eb001aa2 	bl	22c24 <EnterCritical>
   1c198:	eaffffe6 	b	1c138 <CGPIOPin::SetPullUpMode(unsigned int)+0x24>
   1c19c:	0002b958 	.word	0x0002b958
   1c1a0:	20200098 	.word	0x20200098
   1c1a4:	20200000 	.word	0x20200000
   1c1a8:	0000013b 	.word	0x0000013b
   1c1ac:	000291c8 	.word	0x000291c8
   1c1b0:	000293d8 	.word	0x000293d8

0001c1b4 <CGPIOPin::SetAlternateFunction(unsigned int)>:
   1c1b4:	e5902004 	ldr	r2, [r0, #4]
   1c1b8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1c1bc:	e3520035 	cmp	r2, #53	; 0x35
   1c1c0:	e1a06001 	mov	r6, r1
   1c1c4:	8a000022 	bhi	1c254 <CGPIOPin::SetAlternateFunction(unsigned int)+0xa0>
   1c1c8:	e59f30a0 	ldr	r3, [pc, #160]	; 1c270 <CGPIOPin::SetAlternateFunction(unsigned int)+0xbc>
   1c1cc:	e3560005 	cmp	r6, #5
   1c1d0:	e0831293 	umull	r1, r3, r3, r2
   1c1d4:	e1a031a3 	lsr	r3, r3, #3
   1c1d8:	e2835302 	add	r5, r3, #134217728	; 0x8000000
   1c1dc:	e0833103 	add	r3, r3, r3, lsl #2
   1c1e0:	e2855702 	add	r5, r5, #524288	; 0x80000
   1c1e4:	e0423083 	sub	r3, r2, r3, lsl #1
   1c1e8:	e1a05105 	lsl	r5, r5, #2
   1c1ec:	e0834083 	add	r4, r3, r3, lsl #1
   1c1f0:	8a000012 	bhi	1c240 <CGPIOPin::SetAlternateFunction(unsigned int)+0x8c>
   1c1f4:	e59f7078 	ldr	r7, [pc, #120]	; 1c274 <CGPIOPin::SetAlternateFunction(unsigned int)+0xc0>
   1c1f8:	e5970000 	ldr	r0, [r7]
   1c1fc:	e3500000 	cmp	r0, #0
   1c200:	1a00000c 	bne	1c238 <CGPIOPin::SetAlternateFunction(unsigned int)+0x84>
   1c204:	e3a01007 	mov	r1, #7
   1c208:	e59f3068 	ldr	r3, [pc, #104]	; 1c278 <CGPIOPin::SetAlternateFunction(unsigned int)+0xc4>
   1c20c:	e5952000 	ldr	r2, [r5]
   1c210:	e0836106 	add	r6, r3, r6, lsl #2
   1c214:	e5963010 	ldr	r3, [r6, #16]
   1c218:	e1c22411 	bic	r2, r2, r1, lsl r4
   1c21c:	e1824413 	orr	r4, r2, r3, lsl r4
   1c220:	e5854000 	str	r4, [r5]
   1c224:	e5973000 	ldr	r3, [r7]
   1c228:	e3530000 	cmp	r3, #0
   1c22c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   1c230:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1c234:	ea001aa7 	b	22cd8 <LeaveCritical>
   1c238:	eb001a79 	bl	22c24 <EnterCritical>
   1c23c:	eafffff0 	b	1c204 <CGPIOPin::SetAlternateFunction(unsigned int)+0x50>
   1c240:	e3a02f53 	mov	r2, #332	; 0x14c
   1c244:	e59f1030 	ldr	r1, [pc, #48]	; 1c27c <CGPIOPin::SetAlternateFunction(unsigned int)+0xc8>
   1c248:	e59f0030 	ldr	r0, [pc, #48]	; 1c280 <CGPIOPin::SetAlternateFunction(unsigned int)+0xcc>
   1c24c:	ebfffa09 	bl	1aa78 <assertion_failed>
   1c250:	eaffffe7 	b	1c1f4 <CGPIOPin::SetAlternateFunction(unsigned int)+0x40>
   1c254:	e1a04000 	mov	r4, r0
   1c258:	e3a02f52 	mov	r2, #328	; 0x148
   1c25c:	e59f1018 	ldr	r1, [pc, #24]	; 1c27c <CGPIOPin::SetAlternateFunction(unsigned int)+0xc8>
   1c260:	e59f001c 	ldr	r0, [pc, #28]	; 1c284 <CGPIOPin::SetAlternateFunction(unsigned int)+0xd0>
   1c264:	ebfffa03 	bl	1aa78 <assertion_failed>
   1c268:	e5942004 	ldr	r2, [r4, #4]
   1c26c:	eaffffd5 	b	1c1c8 <CGPIOPin::SetAlternateFunction(unsigned int)+0x14>
   1c270:	cccccccd 	.word	0xcccccccd
   1c274:	0002b958 	.word	0x0002b958
   1c278:	000291a0 	.word	0x000291a0
   1c27c:	000291c8 	.word	0x000291c8
   1c280:	000293e4 	.word	0x000293e4
   1c284:	000291e8 	.word	0x000291e8

0001c288 <CGPIOPin::SetMode(TGPIOMode, bool)>:
   1c288:	e3510009 	cmp	r1, #9
   1c28c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1c290:	e1a05001 	mov	r5, r1
   1c294:	e1a04000 	mov	r4, r0
   1c298:	e1a06002 	mov	r6, r2
   1c29c:	ca00003f 	bgt	1c3a0 <CGPIOPin::SetMode(TGPIOMode, bool)+0x118>
   1c2a0:	e5c45010 	strb	r5, [r4, #16]
   1c2a4:	e3a02000 	mov	r2, #0
   1c2a8:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
   1c2ac:	e5d43010 	ldrb	r3, [r4, #16]
   1c2b0:	e2431004 	sub	r1, r3, #4
   1c2b4:	e6ef0071 	uxtb	r0, r1
   1c2b8:	e3500005 	cmp	r0, #5
   1c2bc:	9a000030 	bls	1c384 <CGPIOPin::SetMode(TGPIOMode, bool)+0xfc>
   1c2c0:	e3530001 	cmp	r3, #1
   1c2c4:	13a03000 	movne	r3, #0
   1c2c8:	02063001 	andeq	r3, r6, #1
   1c2cc:	e3530000 	cmp	r3, #0
   1c2d0:	1a000055 	bne	1c42c <CGPIOPin::SetMode(TGPIOMode, bool)+0x1a4>
   1c2d4:	e5943004 	ldr	r3, [r4, #4]
   1c2d8:	e3530035 	cmp	r3, #53	; 0x35
   1c2dc:	8a00003a 	bhi	1c3cc <CGPIOPin::SetMode(TGPIOMode, bool)+0x144>
   1c2e0:	e59f5154 	ldr	r5, [pc, #340]	; 1c43c <CGPIOPin::SetMode(TGPIOMode, bool)+0x1b4>
   1c2e4:	e59f8154 	ldr	r8, [pc, #340]	; 1c440 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1b8>
   1c2e8:	e0852395 	umull	r2, r5, r5, r3
   1c2ec:	e5980000 	ldr	r0, [r8]
   1c2f0:	e1a051a5 	lsr	r5, r5, #3
   1c2f4:	e2857302 	add	r7, r5, #134217728	; 0x8000000
   1c2f8:	e0855105 	add	r5, r5, r5, lsl #2
   1c2fc:	e2877702 	add	r7, r7, #524288	; 0x80000
   1c300:	e0435085 	sub	r5, r3, r5, lsl #1
   1c304:	e3500000 	cmp	r0, #0
   1c308:	e1a07107 	lsl	r7, r7, #2
   1c30c:	e0855085 	add	r5, r5, r5, lsl #1
   1c310:	1a000033 	bne	1c3e4 <CGPIOPin::SetMode(TGPIOMode, bool)+0x15c>
   1c314:	e5d42010 	ldrb	r2, [r4, #16]
   1c318:	e3a01007 	mov	r1, #7
   1c31c:	e2422001 	sub	r2, r2, #1
   1c320:	e16f2f12 	clz	r2, r2
   1c324:	e5973000 	ldr	r3, [r7]
   1c328:	e1a022a2 	lsr	r2, r2, #5
   1c32c:	e1c33511 	bic	r3, r3, r1, lsl r5
   1c330:	e1835512 	orr	r5, r3, r2, lsl r5
   1c334:	e5875000 	str	r5, [r7]
   1c338:	e5983000 	ldr	r3, [r8]
   1c33c:	e3530000 	cmp	r3, #0
   1c340:	1a000029 	bne	1c3ec <CGPIOPin::SetMode(TGPIOMode, bool)+0x164>
   1c344:	e3560000 	cmp	r6, #0
   1c348:	0a00000a 	beq	1c378 <CGPIOPin::SetMode(TGPIOMode, bool)+0xf0>
   1c34c:	e5d43010 	ldrb	r3, [r4, #16]
   1c350:	e3530003 	cmp	r3, #3
   1c354:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1c358:	ea000006 	b	1c378 <CGPIOPin::SetMode(TGPIOMode, bool)+0xf0>
   1c35c:	0001c41c 	.word	0x0001c41c
   1c360:	0001c40c 	.word	0x0001c40c
   1c364:	0001c3fc 	.word	0x0001c3fc
   1c368:	0001c36c 	.word	0x0001c36c
   1c36c:	e1a00004 	mov	r0, r4
   1c370:	e3a01001 	mov	r1, #1
   1c374:	ebffff66 	bl	1c114 <CGPIOPin::SetPullUpMode(unsigned int)>
   1c378:	e3a03000 	mov	r3, #0
   1c37c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   1c380:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1c384:	e1560002 	cmp	r6, r2
   1c388:	1a000009 	bne	1c3b4 <CGPIOPin::SetMode(TGPIOMode, bool)+0x12c>
   1c38c:	e1a00004 	mov	r0, r4
   1c390:	ebffff87 	bl	1c1b4 <CGPIOPin::SetAlternateFunction(unsigned int)>
   1c394:	e3a03000 	mov	r3, #0
   1c398:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   1c39c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1c3a0:	e3a0204f 	mov	r2, #79	; 0x4f
   1c3a4:	e59f1098 	ldr	r1, [pc, #152]	; 1c444 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1bc>
   1c3a8:	e59f0098 	ldr	r0, [pc, #152]	; 1c448 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1c0>
   1c3ac:	ebfff9b1 	bl	1aa78 <assertion_failed>
   1c3b0:	eaffffba 	b	1c2a0 <CGPIOPin::SetMode(TGPIOMode, bool)+0x18>
   1c3b4:	e1a01002 	mov	r1, r2
   1c3b8:	e1a00004 	mov	r0, r4
   1c3bc:	ebffff54 	bl	1c114 <CGPIOPin::SetPullUpMode(unsigned int)>
   1c3c0:	e5d43010 	ldrb	r3, [r4, #16]
   1c3c4:	e2431004 	sub	r1, r3, #4
   1c3c8:	eaffffef 	b	1c38c <CGPIOPin::SetMode(TGPIOMode, bool)+0x104>
   1c3cc:	e3a02068 	mov	r2, #104	; 0x68
   1c3d0:	e59f106c 	ldr	r1, [pc, #108]	; 1c444 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1bc>
   1c3d4:	e59f0070 	ldr	r0, [pc, #112]	; 1c44c <CGPIOPin::SetMode(TGPIOMode, bool)+0x1c4>
   1c3d8:	ebfff9a6 	bl	1aa78 <assertion_failed>
   1c3dc:	e5943004 	ldr	r3, [r4, #4]
   1c3e0:	eaffffbe 	b	1c2e0 <CGPIOPin::SetMode(TGPIOMode, bool)+0x58>
   1c3e4:	eb001a0e 	bl	22c24 <EnterCritical>
   1c3e8:	eaffffc9 	b	1c314 <CGPIOPin::SetMode(TGPIOMode, bool)+0x8c>
   1c3ec:	eb001a39 	bl	22cd8 <LeaveCritical>
   1c3f0:	e3560000 	cmp	r6, #0
   1c3f4:	0affffdf 	beq	1c378 <CGPIOPin::SetMode(TGPIOMode, bool)+0xf0>
   1c3f8:	eaffffd3 	b	1c34c <CGPIOPin::SetMode(TGPIOMode, bool)+0xc4>
   1c3fc:	e1a00004 	mov	r0, r4
   1c400:	e3a01002 	mov	r1, #2
   1c404:	ebffff42 	bl	1c114 <CGPIOPin::SetPullUpMode(unsigned int)>
   1c408:	eaffffda 	b	1c378 <CGPIOPin::SetMode(TGPIOMode, bool)+0xf0>
   1c40c:	e1a00004 	mov	r0, r4
   1c410:	e3a01000 	mov	r1, #0
   1c414:	ebfffd6b 	bl	1b9c8 <CGPIOPin::Write(unsigned int)>
   1c418:	eaffffd6 	b	1c378 <CGPIOPin::SetMode(TGPIOMode, bool)+0xf0>
   1c41c:	e1a00004 	mov	r0, r4
   1c420:	e3a01000 	mov	r1, #0
   1c424:	ebffff3a 	bl	1c114 <CGPIOPin::SetPullUpMode(unsigned int)>
   1c428:	eaffffd2 	b	1c378 <CGPIOPin::SetMode(TGPIOMode, bool)+0xf0>
   1c42c:	e1a01002 	mov	r1, r2
   1c430:	e1a00004 	mov	r0, r4
   1c434:	ebffff36 	bl	1c114 <CGPIOPin::SetPullUpMode(unsigned int)>
   1c438:	eaffffa5 	b	1c2d4 <CGPIOPin::SetMode(TGPIOMode, bool)+0x4c>
   1c43c:	cccccccd 	.word	0xcccccccd
   1c440:	0002b958 	.word	0x0002b958
   1c444:	000291c8 	.word	0x000291c8
   1c448:	000293f4 	.word	0x000293f4
   1c44c:	000291e8 	.word	0x000291e8

0001c450 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>:
   1c450:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1c454:	e3a0c006 	mov	ip, #6
   1c458:	e3a0e000 	mov	lr, #0
   1c45c:	e3a07036 	mov	r7, #54	; 0x36
   1c460:	e3a0600a 	mov	r6, #10
   1c464:	e1a04000 	mov	r4, r0
   1c468:	e1a05002 	mov	r5, r2
   1c46c:	e5803018 	str	r3, [r0, #24]
   1c470:	e59f302c 	ldr	r3, [pc, #44]	; 1c4a4 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x54>
   1c474:	e580e01c 	str	lr, [r0, #28]
   1c478:	e8800088 	stm	r0, {r3, r7}
   1c47c:	e5c0c024 	strb	ip, [r0, #36]	; 0x24
   1c480:	e5c0c025 	strb	ip, [r0, #37]	; 0x25
   1c484:	e5c06010 	strb	r6, [r0, #16]
   1c488:	ebfffd29 	bl	1b934 <CGPIOPin::AssignPin(unsigned int)>
   1c48c:	e1a00004 	mov	r0, r4
   1c490:	e1a01005 	mov	r1, r5
   1c494:	e3a02001 	mov	r2, #1
   1c498:	ebffff7a 	bl	1c288 <CGPIOPin::SetMode(TGPIOMode, bool)>
   1c49c:	e1a00004 	mov	r0, r4
   1c4a0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1c4a4:	000291a8 	.word	0x000291a8

0001c4a8 <CGPIOPin::InterruptHandler()>:
   1c4a8:	e5d03010 	ldrb	r3, [r0, #16]
   1c4ac:	e92d4010 	push	{r4, lr}
   1c4b0:	e2432002 	sub	r2, r3, #2
   1c4b4:	e3530000 	cmp	r3, #0
   1c4b8:	13520001 	cmpne	r2, #1
   1c4bc:	e1a04000 	mov	r4, r0
   1c4c0:	9a000003 	bls	1c4d4 <CGPIOPin::InterruptHandler()+0x2c>
   1c4c4:	e59f2074 	ldr	r2, [pc, #116]	; 1c540 <CGPIOPin::InterruptHandler()+0x98>
   1c4c8:	e59f1074 	ldr	r1, [pc, #116]	; 1c544 <CGPIOPin::InterruptHandler()+0x9c>
   1c4cc:	e59f0074 	ldr	r0, [pc, #116]	; 1c548 <CGPIOPin::InterruptHandler()+0xa0>
   1c4d0:	ebfff968 	bl	1aa78 <assertion_failed>
   1c4d4:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
   1c4d8:	e3530005 	cmp	r3, #5
   1c4dc:	da000002 	ble	1c4ec <CGPIOPin::InterruptHandler()+0x44>
   1c4e0:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
   1c4e4:	e3530005 	cmp	r3, #5
   1c4e8:	ca000005 	bgt	1c504 <CGPIOPin::InterruptHandler()+0x5c>
   1c4ec:	e594301c 	ldr	r3, [r4, #28]
   1c4f0:	e3530000 	cmp	r3, #0
   1c4f4:	0a000009 	beq	1c520 <CGPIOPin::InterruptHandler()+0x78>
   1c4f8:	e5940020 	ldr	r0, [r4, #32]
   1c4fc:	e8bd4010 	pop	{r4, lr}
   1c500:	e12fff13 	bx	r3
   1c504:	e59f2040 	ldr	r2, [pc, #64]	; 1c54c <CGPIOPin::InterruptHandler()+0xa4>
   1c508:	e59f1034 	ldr	r1, [pc, #52]	; 1c544 <CGPIOPin::InterruptHandler()+0x9c>
   1c50c:	e59f003c 	ldr	r0, [pc, #60]	; 1c550 <CGPIOPin::InterruptHandler()+0xa8>
   1c510:	ebfff958 	bl	1aa78 <assertion_failed>
   1c514:	e594301c 	ldr	r3, [r4, #28]
   1c518:	e3530000 	cmp	r3, #0
   1c51c:	1afffff5 	bne	1c4f8 <CGPIOPin::InterruptHandler()+0x50>
   1c520:	e59f002c 	ldr	r0, [pc, #44]	; 1c554 <CGPIOPin::InterruptHandler()+0xac>
   1c524:	e59f202c 	ldr	r2, [pc, #44]	; 1c558 <CGPIOPin::InterruptHandler()+0xb0>
   1c528:	e59f1014 	ldr	r1, [pc, #20]	; 1c544 <CGPIOPin::InterruptHandler()+0x9c>
   1c52c:	ebfff951 	bl	1aa78 <assertion_failed>
   1c530:	e594301c 	ldr	r3, [r4, #28]
   1c534:	e5940020 	ldr	r0, [r4, #32]
   1c538:	e8bd4010 	pop	{r4, lr}
   1c53c:	e12fff13 	bx	r3
   1c540:	0000015b 	.word	0x0000015b
   1c544:	000291c8 	.word	0x000291c8
   1c548:	00029240 	.word	0x00029240
   1c54c:	0000015d 	.word	0x0000015d
   1c550:	0002940c 	.word	0x0002940c
   1c554:	00029324 	.word	0x00029324
   1c558:	0000015f 	.word	0x0000015f

0001c55c <CGPIOPin::DisableAllInterrupts(unsigned int)>:
   1c55c:	e3500035 	cmp	r0, #53	; 0x35
   1c560:	e92d4070 	push	{r4, r5, r6, lr}
   1c564:	e1a05000 	mov	r5, r0
   1c568:	8a00001e 	bhi	1c5e8 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x8c>
   1c56c:	e3a02001 	mov	r2, #1
   1c570:	e59f6084 	ldr	r6, [pc, #132]	; 1c5fc <CGPIOPin::DisableAllInterrupts(unsigned int)+0xa0>
   1c574:	e59f4084 	ldr	r4, [pc, #132]	; 1c600 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xa4>
   1c578:	e5960000 	ldr	r0, [r6]
   1c57c:	e08442a5 	add	r4, r4, r5, lsr #5
   1c580:	e3500000 	cmp	r0, #0
   1c584:	e205501f 	and	r5, r5, #31
   1c588:	e1a04104 	lsl	r4, r4, #2
   1c58c:	e1a05512 	lsl	r5, r2, r5
   1c590:	1a00000f 	bne	1c5d4 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x78>
   1c594:	e59f3068 	ldr	r3, [pc, #104]	; 1c604 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xa8>
   1c598:	e1540003 	cmp	r4, r3
   1c59c:	8a00000b 	bhi	1c5d0 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x74>
   1c5a0:	e1e02005 	mvn	r2, r5
   1c5a4:	e59f1058 	ldr	r1, [pc, #88]	; 1c604 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xa8>
   1c5a8:	e5943000 	ldr	r3, [r4]
   1c5ac:	e0033002 	and	r3, r3, r2
   1c5b0:	e484300c 	str	r3, [r4], #12
   1c5b4:	e1540001 	cmp	r4, r1
   1c5b8:	9afffffa 	bls	1c5a8 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x4c>
   1c5bc:	e5963000 	ldr	r3, [r6]
   1c5c0:	e3530000 	cmp	r3, #0
   1c5c4:	08bd8070 	popeq	{r4, r5, r6, pc}
   1c5c8:	e8bd4070 	pop	{r4, r5, r6, lr}
   1c5cc:	ea0019c1 	b	22cd8 <LeaveCritical>
   1c5d0:	e8bd8070 	pop	{r4, r5, r6, pc}
   1c5d4:	eb001992 	bl	22c24 <EnterCritical>
   1c5d8:	e59f3024 	ldr	r3, [pc, #36]	; 1c604 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xa8>
   1c5dc:	e1540003 	cmp	r4, r3
   1c5e0:	9affffee 	bls	1c5a0 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x44>
   1c5e4:	eafffff4 	b	1c5bc <CGPIOPin::DisableAllInterrupts(unsigned int)+0x60>
   1c5e8:	e59f2018 	ldr	r2, [pc, #24]	; 1c608 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xac>
   1c5ec:	e59f1018 	ldr	r1, [pc, #24]	; 1c60c <CGPIOPin::DisableAllInterrupts(unsigned int)+0xb0>
   1c5f0:	e59f0018 	ldr	r0, [pc, #24]	; 1c610 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xb4>
   1c5f4:	ebfff91f 	bl	1aa78 <assertion_failed>
   1c5f8:	eaffffdb 	b	1c56c <CGPIOPin::DisableAllInterrupts(unsigned int)+0x10>
   1c5fc:	0002b958 	.word	0x0002b958
   1c600:	08080013 	.word	0x08080013
   1c604:	2020008b 	.word	0x2020008b
   1c608:	00000165 	.word	0x00000165
   1c60c:	000291c8 	.word	0x000291c8
   1c610:	00029458 	.word	0x00029458

0001c614 <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE>:
   1c614:	e3a02001 	mov	r2, #1
   1c618:	e59f3004 	ldr	r3, [pc, #4]	; 1c624 <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE+0x10>
   1c61c:	e5832000 	str	r2, [r3]
   1c620:	e12fff1e 	bx	lr
   1c624:	0002b958 	.word	0x0002b958

0001c628 <CInterruptSystem::CInterruptSystem()>:
   1c628:	e1a0c000 	mov	ip, r0
   1c62c:	e2802f47 	add	r2, r0, #284	; 0x11c
   1c630:	e1a00002 	mov	r0, r2
   1c634:	e3a01000 	mov	r1, #0
   1c638:	e24c3004 	sub	r3, ip, #4
   1c63c:	e5a31004 	str	r1, [r3, #4]!
   1c640:	e1530000 	cmp	r3, r0
   1c644:	e5a21004 	str	r1, [r2, #4]!
   1c648:	1afffffb 	bne	1c63c <CInterruptSystem::CInterruptSystem()+0x14>
   1c64c:	e59f3008 	ldr	r3, [pc, #8]	; 1c65c <CInterruptSystem::CInterruptSystem()+0x34>
   1c650:	e1a0000c 	mov	r0, ip
   1c654:	e583c000 	str	ip, [r3]
   1c658:	e12fff1e 	bx	lr
   1c65c:	0002b95c 	.word	0x0002b95c

0001c660 <CInterruptSystem::~CInterruptSystem()>:
   1c660:	e3a02000 	mov	r2, #0
   1c664:	e59f3004 	ldr	r3, [pc, #4]	; 1c670 <CInterruptSystem::~CInterruptSystem()+0x10>
   1c668:	e5832000 	str	r2, [r3]
   1c66c:	e12fff1e 	bx	lr
   1c670:	0002b95c 	.word	0x0002b95c

0001c674 <CInterruptSystem::Initialize()>:
   1c674:	e92d4010 	push	{r4, lr}
   1c678:	e3a04000 	mov	r4, #0
   1c67c:	e59f2050 	ldr	r2, [pc, #80]	; 1c6d4 <CInterruptSystem::Initialize()+0x60>
   1c680:	e59f3050 	ldr	r3, [pc, #80]	; 1c6d8 <CInterruptSystem::Initialize()+0x64>
   1c684:	e1a02142 	asr	r2, r2, #2
   1c688:	e1a03143 	asr	r3, r3, #2
   1c68c:	e2422002 	sub	r2, r2, #2
   1c690:	e2433002 	sub	r3, r3, #2
   1c694:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
   1c698:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
   1c69c:	e5842018 	str	r2, [r4, #24]
   1c6a0:	e584301c 	str	r3, [r4, #28]
   1c6a4:	eb0019b0 	bl	22d6c <SyncDataAndInstructionCache>
   1c6a8:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   1c6ac:	e3e02000 	mvn	r2, #0
   1c6b0:	e59f3024 	ldr	r3, [pc, #36]	; 1c6dc <CInterruptSystem::Initialize()+0x68>
   1c6b4:	e583420c 	str	r4, [r3, #524]	; 0x20c
   1c6b8:	e583221c 	str	r2, [r3, #540]	; 0x21c
   1c6bc:	e5832220 	str	r2, [r3, #544]	; 0x220
   1c6c0:	e5832224 	str	r2, [r3, #548]	; 0x224
   1c6c4:	ee074fba 	mcr	15, 0, r4, cr7, cr10, {5}
   1c6c8:	f1080080 	cpsie	i
   1c6cc:	e3a00001 	mov	r0, #1
   1c6d0:	e8bd8010 	pop	{r4, pc}
   1c6d4:	00022800 	.word	0x00022800
   1c6d8:	0002280c 	.word	0x0002280c
   1c6dc:	2000b000 	.word	0x2000b000

0001c6e0 <CInterruptSystem::DisconnectFIQ()>:
   1c6e0:	e92d4010 	push	{r4, lr}
   1c6e4:	e59f4068 	ldr	r4, [pc, #104]	; 1c754 <CInterruptSystem::DisconnectFIQ()+0x74>
   1c6e8:	e5d42001 	ldrb	r2, [r4, #1]
   1c6ec:	e5d43000 	ldrb	r3, [r4]
   1c6f0:	e5d41002 	ldrb	r1, [r4, #2]
   1c6f4:	e1833402 	orr	r3, r3, r2, lsl #8
   1c6f8:	e5d42003 	ldrb	r2, [r4, #3]
   1c6fc:	e1833801 	orr	r3, r3, r1, lsl #16
   1c700:	e1933c02 	orrs	r3, r3, r2, lsl #24
   1c704:	0a00000d 	beq	1c740 <CInterruptSystem::DisconnectFIQ()+0x60>
   1c708:	e3a03000 	mov	r3, #0
   1c70c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   1c710:	e59f2040 	ldr	r2, [pc, #64]	; 1c758 <CInterruptSystem::DisconnectFIQ()+0x78>
   1c714:	e582320c 	str	r3, [r2, #524]	; 0x20c
   1c718:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   1c71c:	e5c43000 	strb	r3, [r4]
   1c720:	e5c43001 	strb	r3, [r4, #1]
   1c724:	e5c43002 	strb	r3, [r4, #2]
   1c728:	e5c43003 	strb	r3, [r4, #3]
   1c72c:	e5c43004 	strb	r3, [r4, #4]
   1c730:	e5c43005 	strb	r3, [r4, #5]
   1c734:	e5c43006 	strb	r3, [r4, #6]
   1c738:	e5c43007 	strb	r3, [r4, #7]
   1c73c:	e8bd8010 	pop	{r4, pc}
   1c740:	e3a02086 	mov	r2, #134	; 0x86
   1c744:	e59f1010 	ldr	r1, [pc, #16]	; 1c75c <CInterruptSystem::DisconnectFIQ()+0x7c>
   1c748:	e59f0010 	ldr	r0, [pc, #16]	; 1c760 <CInterruptSystem::DisconnectFIQ()+0x80>
   1c74c:	ebfff8c9 	bl	1aa78 <assertion_failed>
   1c750:	eaffffec 	b	1c708 <CInterruptSystem::DisconnectFIQ()+0x28>
   1c754:	0002b838 	.word	0x0002b838
   1c758:	2000b000 	.word	0x2000b000
   1c75c:	0002946c 	.word	0x0002946c
   1c760:	0002947c 	.word	0x0002947c

0001c764 <CInterruptSystem::EnableIRQ(unsigned int)>:
   1c764:	e92d4010 	push	{r4, lr}
   1c768:	e3a03000 	mov	r3, #0
   1c76c:	e1a04000 	mov	r4, r0
   1c770:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   1c774:	e3500047 	cmp	r0, #71	; 0x47
   1c778:	8a00000d 	bhi	1c7b4 <CInterruptSystem::EnableIRQ(unsigned int)+0x50>
   1c77c:	e350001f 	cmp	r0, #31
   1c780:	8a000007 	bhi	1c7a4 <CInterruptSystem::EnableIRQ(unsigned int)+0x40>
   1c784:	e59f2040 	ldr	r2, [pc, #64]	; 1c7cc <CInterruptSystem::EnableIRQ(unsigned int)+0x68>
   1c788:	e3a03001 	mov	r3, #1
   1c78c:	e204401f 	and	r4, r4, #31
   1c790:	e1a04413 	lsl	r4, r3, r4
   1c794:	e5824000 	str	r4, [r2]
   1c798:	e3a03000 	mov	r3, #0
   1c79c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   1c7a0:	e8bd8010 	pop	{r4, pc}
   1c7a4:	e350003f 	cmp	r0, #63	; 0x3f
   1c7a8:	959f2020 	ldrls	r2, [pc, #32]	; 1c7d0 <CInterruptSystem::EnableIRQ(unsigned int)+0x6c>
   1c7ac:	859f2020 	ldrhi	r2, [pc, #32]	; 1c7d4 <CInterruptSystem::EnableIRQ(unsigned int)+0x70>
   1c7b0:	eafffff4 	b	1c788 <CInterruptSystem::EnableIRQ(unsigned int)+0x24>
   1c7b4:	e3a02092 	mov	r2, #146	; 0x92
   1c7b8:	e59f1018 	ldr	r1, [pc, #24]	; 1c7d8 <CInterruptSystem::EnableIRQ(unsigned int)+0x74>
   1c7bc:	e59f0018 	ldr	r0, [pc, #24]	; 1c7dc <CInterruptSystem::EnableIRQ(unsigned int)+0x78>
   1c7c0:	ebfff8ac 	bl	1aa78 <assertion_failed>
   1c7c4:	e59f2008 	ldr	r2, [pc, #8]	; 1c7d4 <CInterruptSystem::EnableIRQ(unsigned int)+0x70>
   1c7c8:	eaffffee 	b	1c788 <CInterruptSystem::EnableIRQ(unsigned int)+0x24>
   1c7cc:	2000b210 	.word	0x2000b210
   1c7d0:	2000b214 	.word	0x2000b214
   1c7d4:	2000b218 	.word	0x2000b218
   1c7d8:	0002946c 	.word	0x0002946c
   1c7dc:	00029494 	.word	0x00029494

0001c7e0 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>:
   1c7e0:	e3510047 	cmp	r1, #71	; 0x47
   1c7e4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1c7e8:	e1a04001 	mov	r4, r1
   1c7ec:	e1a05000 	mov	r5, r0
   1c7f0:	e1a08002 	mov	r8, r2
   1c7f4:	e1a07003 	mov	r7, r3
   1c7f8:	8a00000c 	bhi	1c830 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x50>
   1c7fc:	e7953104 	ldr	r3, [r5, r4, lsl #2]
   1c800:	e0856104 	add	r6, r5, r4, lsl #2
   1c804:	e3530000 	cmp	r3, #0
   1c808:	0a000003 	beq	1c81c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x3c>
   1c80c:	e3a02062 	mov	r2, #98	; 0x62
   1c810:	e59f102c 	ldr	r1, [pc, #44]	; 1c844 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x64>
   1c814:	e59f002c 	ldr	r0, [pc, #44]	; 1c848 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x68>
   1c818:	ebfff896 	bl	1aa78 <assertion_failed>
   1c81c:	e7858104 	str	r8, [r5, r4, lsl #2]
   1c820:	e1a00004 	mov	r0, r4
   1c824:	e5867120 	str	r7, [r6, #288]	; 0x120
   1c828:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1c82c:	eaffffcc 	b	1c764 <CInterruptSystem::EnableIRQ(unsigned int)>
   1c830:	e3a02061 	mov	r2, #97	; 0x61
   1c834:	e59f1008 	ldr	r1, [pc, #8]	; 1c844 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x64>
   1c838:	e59f000c 	ldr	r0, [pc, #12]	; 1c84c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x6c>
   1c83c:	ebfff88d 	bl	1aa78 <assertion_failed>
   1c840:	eaffffed 	b	1c7fc <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x1c>
   1c844:	0002946c 	.word	0x0002946c
   1c848:	000294a8 	.word	0x000294a8
   1c84c:	00029494 	.word	0x00029494

0001c850 <CInterruptSystem::DisableIRQ(unsigned int)>:
   1c850:	e92d4010 	push	{r4, lr}
   1c854:	e3a03000 	mov	r3, #0
   1c858:	e1a04000 	mov	r4, r0
   1c85c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   1c860:	e3500047 	cmp	r0, #71	; 0x47
   1c864:	8a00000d 	bhi	1c8a0 <CInterruptSystem::DisableIRQ(unsigned int)+0x50>
   1c868:	e350001f 	cmp	r0, #31
   1c86c:	8a000007 	bhi	1c890 <CInterruptSystem::DisableIRQ(unsigned int)+0x40>
   1c870:	e59f2040 	ldr	r2, [pc, #64]	; 1c8b8 <CInterruptSystem::DisableIRQ(unsigned int)+0x68>
   1c874:	e3a03001 	mov	r3, #1
   1c878:	e204401f 	and	r4, r4, #31
   1c87c:	e1a04413 	lsl	r4, r3, r4
   1c880:	e5824000 	str	r4, [r2]
   1c884:	e3a03000 	mov	r3, #0
   1c888:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   1c88c:	e8bd8010 	pop	{r4, pc}
   1c890:	e350003f 	cmp	r0, #63	; 0x3f
   1c894:	959f2020 	ldrls	r2, [pc, #32]	; 1c8bc <CInterruptSystem::DisableIRQ(unsigned int)+0x6c>
   1c898:	859f2020 	ldrhi	r2, [pc, #32]	; 1c8c0 <CInterruptSystem::DisableIRQ(unsigned int)+0x70>
   1c89c:	eafffff4 	b	1c874 <CInterruptSystem::DisableIRQ(unsigned int)+0x24>
   1c8a0:	e3a0209d 	mov	r2, #157	; 0x9d
   1c8a4:	e59f1018 	ldr	r1, [pc, #24]	; 1c8c4 <CInterruptSystem::DisableIRQ(unsigned int)+0x74>
   1c8a8:	e59f0018 	ldr	r0, [pc, #24]	; 1c8c8 <CInterruptSystem::DisableIRQ(unsigned int)+0x78>
   1c8ac:	ebfff871 	bl	1aa78 <assertion_failed>
   1c8b0:	e59f2008 	ldr	r2, [pc, #8]	; 1c8c0 <CInterruptSystem::DisableIRQ(unsigned int)+0x70>
   1c8b4:	eaffffee 	b	1c874 <CInterruptSystem::DisableIRQ(unsigned int)+0x24>
   1c8b8:	2000b21c 	.word	0x2000b21c
   1c8bc:	2000b220 	.word	0x2000b220
   1c8c0:	2000b224 	.word	0x2000b224
   1c8c4:	0002946c 	.word	0x0002946c
   1c8c8:	00029494 	.word	0x00029494

0001c8cc <CInterruptSystem::DisconnectIRQ(unsigned int)>:
   1c8cc:	e3510047 	cmp	r1, #71	; 0x47
   1c8d0:	e92d4070 	push	{r4, r5, r6, lr}
   1c8d4:	e1a04001 	mov	r4, r1
   1c8d8:	e1a05000 	mov	r5, r0
   1c8dc:	8a000009 	bhi	1c908 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x3c>
   1c8e0:	e7953104 	ldr	r3, [r5, r4, lsl #2]
   1c8e4:	e0856104 	add	r6, r5, r4, lsl #2
   1c8e8:	e3530000 	cmp	r3, #0
   1c8ec:	0a00000d 	beq	1c928 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x5c>
   1c8f0:	e1a00004 	mov	r0, r4
   1c8f4:	ebffffd5 	bl	1c850 <CInterruptSystem::DisableIRQ(unsigned int)>
   1c8f8:	e3a03000 	mov	r3, #0
   1c8fc:	e7853104 	str	r3, [r5, r4, lsl #2]
   1c900:	e5863120 	str	r3, [r6, #288]	; 0x120
   1c904:	e8bd8070 	pop	{r4, r5, r6, pc}
   1c908:	e3a0206c 	mov	r2, #108	; 0x6c
   1c90c:	e59f1028 	ldr	r1, [pc, #40]	; 1c93c <CInterruptSystem::DisconnectIRQ(unsigned int)+0x70>
   1c910:	e59f0028 	ldr	r0, [pc, #40]	; 1c940 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x74>
   1c914:	ebfff857 	bl	1aa78 <assertion_failed>
   1c918:	e7953104 	ldr	r3, [r5, r4, lsl #2]
   1c91c:	e0856104 	add	r6, r5, r4, lsl #2
   1c920:	e3530000 	cmp	r3, #0
   1c924:	1afffff1 	bne	1c8f0 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x24>
   1c928:	e3a0206d 	mov	r2, #109	; 0x6d
   1c92c:	e59f1008 	ldr	r1, [pc, #8]	; 1c93c <CInterruptSystem::DisconnectIRQ(unsigned int)+0x70>
   1c930:	e59f000c 	ldr	r0, [pc, #12]	; 1c944 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x78>
   1c934:	ebfff84f 	bl	1aa78 <assertion_failed>
   1c938:	eaffffec 	b	1c8f0 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x24>
   1c93c:	0002946c 	.word	0x0002946c
   1c940:	00029494 	.word	0x00029494
   1c944:	000294c4 	.word	0x000294c4

0001c948 <CInterruptSystem::EnableFIQ(unsigned int)>:
   1c948:	e92d4010 	push	{r4, lr}
   1c94c:	e3a03000 	mov	r3, #0
   1c950:	e1a04000 	mov	r4, r0
   1c954:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   1c958:	e3500047 	cmp	r0, #71	; 0x47
   1c95c:	9a000003 	bls	1c970 <CInterruptSystem::EnableFIQ(unsigned int)+0x28>
   1c960:	e3a020a8 	mov	r2, #168	; 0xa8
   1c964:	e59f101c 	ldr	r1, [pc, #28]	; 1c988 <CInterruptSystem::EnableFIQ(unsigned int)+0x40>
   1c968:	e59f001c 	ldr	r0, [pc, #28]	; 1c98c <CInterruptSystem::EnableFIQ(unsigned int)+0x44>
   1c96c:	ebfff841 	bl	1aa78 <assertion_failed>
   1c970:	e59f3018 	ldr	r3, [pc, #24]	; 1c990 <CInterruptSystem::EnableFIQ(unsigned int)+0x48>
   1c974:	e3844080 	orr	r4, r4, #128	; 0x80
   1c978:	e583420c 	str	r4, [r3, #524]	; 0x20c
   1c97c:	e3a03000 	mov	r3, #0
   1c980:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   1c984:	e8bd8010 	pop	{r4, pc}
   1c988:	0002946c 	.word	0x0002946c
   1c98c:	000294e0 	.word	0x000294e0
   1c990:	2000b000 	.word	0x2000b000

0001c994 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>:
   1c994:	e3510047 	cmp	r1, #71	; 0x47
   1c998:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1c99c:	e1a07001 	mov	r7, r1
   1c9a0:	e1a06002 	mov	r6, r2
   1c9a4:	e1a05003 	mov	r5, r3
   1c9a8:	8a00001f 	bhi	1ca2c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x98>
   1c9ac:	e3560000 	cmp	r6, #0
   1c9b0:	0a000022 	beq	1ca40 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xac>
   1c9b4:	e59f4098 	ldr	r4, [pc, #152]	; 1ca54 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc0>
   1c9b8:	e5d42001 	ldrb	r2, [r4, #1]
   1c9bc:	e5d43000 	ldrb	r3, [r4]
   1c9c0:	e5d41002 	ldrb	r1, [r4, #2]
   1c9c4:	e1833402 	orr	r3, r3, r2, lsl #8
   1c9c8:	e5d42003 	ldrb	r2, [r4, #3]
   1c9cc:	e1833801 	orr	r3, r3, r1, lsl #16
   1c9d0:	e1933c02 	orrs	r3, r3, r2, lsl #24
   1c9d4:	0a000003 	beq	1c9e8 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x54>
   1c9d8:	e3a0207c 	mov	r2, #124	; 0x7c
   1c9dc:	e59f1074 	ldr	r1, [pc, #116]	; 1ca58 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc4>
   1c9e0:	e59f0074 	ldr	r0, [pc, #116]	; 1ca5c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc8>
   1c9e4:	ebfff823 	bl	1aa78 <assertion_failed>
   1c9e8:	e1a0e426 	lsr	lr, r6, #8
   1c9ec:	e1a0c826 	lsr	ip, r6, #16
   1c9f0:	e1a01c26 	lsr	r1, r6, #24
   1c9f4:	e1a02425 	lsr	r2, r5, #8
   1c9f8:	e1a03825 	lsr	r3, r5, #16
   1c9fc:	e5c45004 	strb	r5, [r4, #4]
   1ca00:	e1a05c25 	lsr	r5, r5, #24
   1ca04:	e1a00007 	mov	r0, r7
   1ca08:	e5c46000 	strb	r6, [r4]
   1ca0c:	e5c4e001 	strb	lr, [r4, #1]
   1ca10:	e5c4c002 	strb	ip, [r4, #2]
   1ca14:	e5c41003 	strb	r1, [r4, #3]
   1ca18:	e5c42005 	strb	r2, [r4, #5]
   1ca1c:	e5c43006 	strb	r3, [r4, #6]
   1ca20:	e5c45007 	strb	r5, [r4, #7]
   1ca24:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1ca28:	eaffffc6 	b	1c948 <CInterruptSystem::EnableFIQ(unsigned int)>
   1ca2c:	e3a0207a 	mov	r2, #122	; 0x7a
   1ca30:	e59f1020 	ldr	r1, [pc, #32]	; 1ca58 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc4>
   1ca34:	e59f0024 	ldr	r0, [pc, #36]	; 1ca60 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xcc>
   1ca38:	ebfff80e 	bl	1aa78 <assertion_failed>
   1ca3c:	eaffffda 	b	1c9ac <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x18>
   1ca40:	e3a0207b 	mov	r2, #123	; 0x7b
   1ca44:	e59f100c 	ldr	r1, [pc, #12]	; 1ca58 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc4>
   1ca48:	e59f0014 	ldr	r0, [pc, #20]	; 1ca64 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xd0>
   1ca4c:	ebfff809 	bl	1aa78 <assertion_failed>
   1ca50:	eaffffd7 	b	1c9b4 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x20>
   1ca54:	0002b838 	.word	0x0002b838
   1ca58:	0002946c 	.word	0x0002946c
   1ca5c:	000294f4 	.word	0x000294f4
   1ca60:	000294e0 	.word	0x000294e0
   1ca64:	00029484 	.word	0x00029484

0001ca68 <CInterruptSystem::DisableFIQ()>:
   1ca68:	e3a03000 	mov	r3, #0
   1ca6c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   1ca70:	e59f2008 	ldr	r2, [pc, #8]	; 1ca80 <CInterruptSystem::DisableFIQ()+0x18>
   1ca74:	e582320c 	str	r3, [r2, #524]	; 0x20c
   1ca78:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   1ca7c:	e12fff1e 	bx	lr
   1ca80:	2000b000 	.word	0x2000b000

0001ca84 <CInterruptSystem::Get()>:
   1ca84:	e92d4010 	push	{r4, lr}
   1ca88:	e59f4020 	ldr	r4, [pc, #32]	; 1cab0 <CInterruptSystem::Get()+0x2c>
   1ca8c:	e5940000 	ldr	r0, [r4]
   1ca90:	e3500000 	cmp	r0, #0
   1ca94:	18bd8010 	popne	{r4, pc}
   1ca98:	e3a020ba 	mov	r2, #186	; 0xba
   1ca9c:	e59f1010 	ldr	r1, [pc, #16]	; 1cab4 <CInterruptSystem::Get()+0x30>
   1caa0:	e59f0010 	ldr	r0, [pc, #16]	; 1cab8 <CInterruptSystem::Get()+0x34>
   1caa4:	ebfff7f3 	bl	1aa78 <assertion_failed>
   1caa8:	e5940000 	ldr	r0, [r4]
   1caac:	e8bd8010 	pop	{r4, pc}
   1cab0:	0002b95c 	.word	0x0002b95c
   1cab4:	0002946c 	.word	0x0002946c
   1cab8:	0002440c 	.word	0x0002440c

0001cabc <CInterruptSystem::CallIRQHandler(unsigned int)>:
   1cabc:	e3510047 	cmp	r1, #71	; 0x47
   1cac0:	e92d4070 	push	{r4, r5, r6, lr}
   1cac4:	e1a06001 	mov	r6, r1
   1cac8:	e1a05000 	mov	r5, r0
   1cacc:	8a000007 	bhi	1caf0 <CInterruptSystem::CallIRQHandler(unsigned int)+0x34>
   1cad0:	e7954106 	ldr	r4, [r5, r6, lsl #2]
   1cad4:	e0855106 	add	r5, r5, r6, lsl #2
   1cad8:	e3540000 	cmp	r4, #0
   1cadc:	0a00000b 	beq	1cb10 <CInterruptSystem::CallIRQHandler(unsigned int)+0x54>
   1cae0:	e5950120 	ldr	r0, [r5, #288]	; 0x120
   1cae4:	e12fff34 	blx	r4
   1cae8:	e3a00001 	mov	r0, #1
   1caec:	e8bd8070 	pop	{r4, r5, r6, pc}
   1caf0:	e3a020c0 	mov	r2, #192	; 0xc0
   1caf4:	e59f1024 	ldr	r1, [pc, #36]	; 1cb20 <CInterruptSystem::CallIRQHandler(unsigned int)+0x64>
   1caf8:	e59f0024 	ldr	r0, [pc, #36]	; 1cb24 <CInterruptSystem::CallIRQHandler(unsigned int)+0x68>
   1cafc:	ebfff7dd 	bl	1aa78 <assertion_failed>
   1cb00:	e7954106 	ldr	r4, [r5, r6, lsl #2]
   1cb04:	e0855106 	add	r5, r5, r6, lsl #2
   1cb08:	e3540000 	cmp	r4, #0
   1cb0c:	1afffff3 	bne	1cae0 <CInterruptSystem::CallIRQHandler(unsigned int)+0x24>
   1cb10:	e1a00006 	mov	r0, r6
   1cb14:	ebffff4d 	bl	1c850 <CInterruptSystem::DisableIRQ(unsigned int)>
   1cb18:	e1a00004 	mov	r0, r4
   1cb1c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1cb20:	0002946c 	.word	0x0002946c
   1cb24:	00029494 	.word	0x00029494

0001cb28 <CInterruptSystem::InterruptHandler()>:
   1cb28:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1cb2c:	e59f70a8 	ldr	r7, [pc, #168]	; 1cbdc <CInterruptSystem::InterruptHandler()+0xb4>
   1cb30:	e24dd010 	sub	sp, sp, #16
   1cb34:	e5973000 	ldr	r3, [r7]
   1cb38:	e3530000 	cmp	r3, #0
   1cb3c:	0a000021 	beq	1cbc8 <CInterruptSystem::InterruptHandler()+0xa0>
   1cb40:	e3a06000 	mov	r6, #0
   1cb44:	ee076f9a 	mcr	15, 0, r6, cr7, cr10, {4}
   1cb48:	e59f3090 	ldr	r3, [pc, #144]	; 1cbe0 <CInterruptSystem::InterruptHandler()+0xb8>
   1cb4c:	e5932204 	ldr	r2, [r3, #516]	; 0x204
   1cb50:	e58d2004 	str	r2, [sp, #4]
   1cb54:	e5932208 	ldr	r2, [r3, #520]	; 0x208
   1cb58:	e58d2008 	str	r2, [sp, #8]
   1cb5c:	e5933200 	ldr	r3, [r3, #512]	; 0x200
   1cb60:	e6ef3073 	uxtb	r3, r3
   1cb64:	e58d300c 	str	r3, [sp, #12]
   1cb68:	ee076fba 	mcr	15, 0, r6, cr7, cr10, {5}
   1cb6c:	e28d8004 	add	r8, sp, #4
   1cb70:	e4984004 	ldr	r4, [r8], #4
   1cb74:	e3540000 	cmp	r4, #0
   1cb78:	0a00000d 	beq	1cbb4 <CInterruptSystem::InterruptHandler()+0x8c>
   1cb7c:	e1a05006 	mov	r5, r6
   1cb80:	ea000002 	b	1cb90 <CInterruptSystem::InterruptHandler()+0x68>
   1cb84:	e1b040a4 	lsrs	r4, r4, #1
   1cb88:	e2855001 	add	r5, r5, #1
   1cb8c:	0a000008 	beq	1cbb4 <CInterruptSystem::InterruptHandler()+0x8c>
   1cb90:	e3140001 	tst	r4, #1
   1cb94:	0afffffa 	beq	1cb84 <CInterruptSystem::InterruptHandler()+0x5c>
   1cb98:	e1a01005 	mov	r1, r5
   1cb9c:	e5970000 	ldr	r0, [r7]
   1cba0:	ebffffc5 	bl	1cabc <CInterruptSystem::CallIRQHandler(unsigned int)>
   1cba4:	e3500000 	cmp	r0, #0
   1cba8:	0afffff5 	beq	1cb84 <CInterruptSystem::InterruptHandler()+0x5c>
   1cbac:	e28dd010 	add	sp, sp, #16
   1cbb0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1cbb4:	e2866020 	add	r6, r6, #32
   1cbb8:	e3560060 	cmp	r6, #96	; 0x60
   1cbbc:	1affffeb 	bne	1cb70 <CInterruptSystem::InterruptHandler()+0x48>
   1cbc0:	e28dd010 	add	sp, sp, #16
   1cbc4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1cbc8:	e3a020d3 	mov	r2, #211	; 0xd3
   1cbcc:	e59f1010 	ldr	r1, [pc, #16]	; 1cbe4 <CInterruptSystem::InterruptHandler()+0xbc>
   1cbd0:	e59f0010 	ldr	r0, [pc, #16]	; 1cbe8 <CInterruptSystem::InterruptHandler()+0xc0>
   1cbd4:	ebfff7a7 	bl	1aa78 <assertion_failed>
   1cbd8:	eaffffd8 	b	1cb40 <CInterruptSystem::InterruptHandler()+0x18>
   1cbdc:	0002b95c 	.word	0x0002b95c
   1cbe0:	2000b000 	.word	0x2000b000
   1cbe4:	0002946c 	.word	0x0002946c
   1cbe8:	0002440c 	.word	0x0002440c

0001cbec <InterruptHandler>:
   1cbec:	e92d4010 	push	{r4, lr}
   1cbf0:	e3a04000 	mov	r4, #0
   1cbf4:	ee074fba 	mcr	15, 0, r4, cr7, cr10, {5}
   1cbf8:	ebffffca 	bl	1cb28 <CInterruptSystem::InterruptHandler()>
   1cbfc:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   1cc00:	e8bd8010 	pop	{r4, pc}

0001cc04 <CKernelOptions::GetDecimal(char*) [clone .part.0]>:
   1cc04:	e3a01000 	mov	r1, #0
   1cc08:	ea00000a 	b	1cc38 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x34>
   1cc0c:	e3520009 	cmp	r2, #9
   1cc10:	8a000011 	bhi	1cc5c <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x58>
   1cc14:	e3730001 	cmn	r3, #1
   1cc18:	13a02000 	movne	r2, #0
   1cc1c:	03a02001 	moveq	r2, #1
   1cc20:	e1510003 	cmp	r1, r3
   1cc24:	91a01002 	movls	r1, r2
   1cc28:	83821001 	orrhi	r1, r2, #1
   1cc2c:	e3510000 	cmp	r1, #0
   1cc30:	1a000009 	bne	1cc5c <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x58>
   1cc34:	e1a01003 	mov	r1, r3
   1cc38:	e0d0c0d1 	ldrsb	ip, [r0], #1
   1cc3c:	e0813101 	add	r3, r1, r1, lsl #2
   1cc40:	e24c2030 	sub	r2, ip, #48	; 0x30
   1cc44:	e35c0000 	cmp	ip, #0
   1cc48:	e0823083 	add	r3, r2, r3, lsl #1
   1cc4c:	e6ef2072 	uxtb	r2, r2
   1cc50:	1affffed 	bne	1cc0c <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x8>
   1cc54:	e1a00001 	mov	r0, r1
   1cc58:	e12fff1e 	bx	lr
   1cc5c:	e3e01000 	mvn	r1, #0
   1cc60:	e1a00001 	mov	r0, r1
   1cc64:	e12fff1e 	bx	lr

0001cc68 <CKernelOptions::~CKernelOptions()>:
   1cc68:	e3a02000 	mov	r2, #0
   1cc6c:	e59f3004 	ldr	r3, [pc, #4]	; 1cc78 <CKernelOptions::~CKernelOptions()+0x10>
   1cc70:	e5832000 	str	r2, [r3]
   1cc74:	e12fff1e 	bx	lr
   1cc78:	0002b960 	.word	0x0002b960

0001cc7c <CKernelOptions::GetWidth() const>:
   1cc7c:	e5900810 	ldr	r0, [r0, #2064]	; 0x810
   1cc80:	e12fff1e 	bx	lr

0001cc84 <CKernelOptions::GetHeight() const>:
   1cc84:	e5900814 	ldr	r0, [r0, #2068]	; 0x814
   1cc88:	e12fff1e 	bx	lr

0001cc8c <CKernelOptions::GetLogDevice() const>:
   1cc8c:	e2800e81 	add	r0, r0, #2064	; 0x810
   1cc90:	e2800008 	add	r0, r0, #8
   1cc94:	e12fff1e 	bx	lr

0001cc98 <CKernelOptions::GetLogLevel() const>:
   1cc98:	e590082c 	ldr	r0, [r0, #2092]	; 0x82c
   1cc9c:	e12fff1e 	bx	lr

0001cca0 <CKernelOptions::GetKeyMap() const>:
   1cca0:	e2800e83 	add	r0, r0, #2096	; 0x830
   1cca4:	e12fff1e 	bx	lr

0001cca8 <CKernelOptions::GetUSBPowerDelay() const>:
   1cca8:	e5900834 	ldr	r0, [r0, #2100]	; 0x834
   1ccac:	e12fff1e 	bx	lr

0001ccb0 <CKernelOptions::GetSoundDevice() const>:
   1ccb0:	e2800e83 	add	r0, r0, #2096	; 0x830
   1ccb4:	e2800008 	add	r0, r0, #8
   1ccb8:	e12fff1e 	bx	lr

0001ccbc <CKernelOptions::GetSoundOption() const>:
   1ccbc:	e590084c 	ldr	r0, [r0, #2124]	; 0x84c
   1ccc0:	e12fff1e 	bx	lr

0001ccc4 <CKernelOptions::GetCPUSpeed() const>:
   1ccc4:	e5d00850 	ldrb	r0, [r0, #2128]	; 0x850
   1ccc8:	e12fff1e 	bx	lr

0001cccc <CKernelOptions::GetSoCMaxTemp() const>:
   1cccc:	e5900854 	ldr	r0, [r0, #2132]	; 0x854
   1ccd0:	e12fff1e 	bx	lr

0001ccd4 <CKernelOptions::Get()>:
   1ccd4:	e59f3004 	ldr	r3, [pc, #4]	; 1cce0 <CKernelOptions::Get()+0xc>
   1ccd8:	e5930000 	ldr	r0, [r3]
   1ccdc:	e12fff1e 	bx	lr
   1cce0:	0002b960 	.word	0x0002b960

0001cce4 <CKernelOptions::GetToken()>:
   1cce4:	e590380c 	ldr	r3, [r0, #2060]	; 0x80c
   1cce8:	e1d320d0 	ldrsb	r2, [r3]
   1ccec:	e3520000 	cmp	r2, #0
   1ccf0:	1a000005 	bne	1cd0c <CKernelOptions::GetToken()+0x28>
   1ccf4:	ea000016 	b	1cd54 <CKernelOptions::GetToken()+0x70>
   1ccf8:	e2833001 	add	r3, r3, #1
   1ccfc:	e580380c 	str	r3, [r0, #2060]	; 0x80c
   1cd00:	e1d320d0 	ldrsb	r2, [r3]
   1cd04:	e3520000 	cmp	r2, #0
   1cd08:	0a000011 	beq	1cd54 <CKernelOptions::GetToken()+0x70>
   1cd0c:	e3520020 	cmp	r2, #32
   1cd10:	0afffff8 	beq	1ccf8 <CKernelOptions::GetToken()+0x14>
   1cd14:	e1a02003 	mov	r2, r3
   1cd18:	ea000000 	b	1cd20 <CKernelOptions::GetToken()+0x3c>
   1cd1c:	e1a02001 	mov	r2, r1
   1cd20:	e2821001 	add	r1, r2, #1
   1cd24:	e580180c 	str	r1, [r0, #2060]	; 0x80c
   1cd28:	e1d2c0d1 	ldrsb	ip, [r2, #1]
   1cd2c:	e35c0000 	cmp	ip, #0
   1cd30:	0a000008 	beq	1cd58 <CKernelOptions::GetToken()+0x74>
   1cd34:	e35c0020 	cmp	ip, #32
   1cd38:	1afffff7 	bne	1cd1c <CKernelOptions::GetToken()+0x38>
   1cd3c:	e3a0c000 	mov	ip, #0
   1cd40:	e2822002 	add	r2, r2, #2
   1cd44:	e580280c 	str	r2, [r0, #2060]	; 0x80c
   1cd48:	e5c1c000 	strb	ip, [r1]
   1cd4c:	e1a00003 	mov	r0, r3
   1cd50:	e12fff1e 	bx	lr
   1cd54:	e3a03000 	mov	r3, #0
   1cd58:	e1a00003 	mov	r0, r3
   1cd5c:	e12fff1e 	bx	lr

0001cd60 <CKernelOptions::CKernelOptions()>:
   1cd60:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cd64:	e3a02004 	mov	r2, #4
   1cd68:	e1a04000 	mov	r4, r0
   1cd6c:	e3a05000 	mov	r5, #0
   1cd70:	e3a0303c 	mov	r3, #60	; 0x3c
   1cd74:	e2807e81 	add	r7, r0, #2064	; 0x810
   1cd78:	e2877008 	add	r7, r7, #8
   1cd7c:	e580282c 	str	r2, [r0, #2092]	; 0x82c
   1cd80:	e5803854 	str	r3, [r0, #2132]	; 0x854
   1cd84:	e24dd014 	sub	sp, sp, #20
   1cd88:	e59f1348 	ldr	r1, [pc, #840]	; 1d0d8 <CKernelOptions::CKernelOptions()+0x378>
   1cd8c:	e1a00007 	mov	r0, r7
   1cd90:	e5845810 	str	r5, [r4, #2064]	; 0x810
   1cd94:	e5845814 	str	r5, [r4, #2068]	; 0x814
   1cd98:	e5845834 	str	r5, [r4, #2100]	; 0x834
   1cd9c:	e584584c 	str	r5, [r4, #2124]	; 0x84c
   1cda0:	e5c45850 	strb	r5, [r4, #2128]	; 0x850
   1cda4:	e2849e83 	add	r9, r4, #2096	; 0x830
   1cda8:	eb001427 	bl	21e4c <strcpy>
   1cdac:	e59f1328 	ldr	r1, [pc, #808]	; 1d0dc <CKernelOptions::CKernelOptions()+0x37c>
   1cdb0:	e1a00009 	mov	r0, r9
   1cdb4:	eb001424 	bl	21e4c <strcpy>
   1cdb8:	e59f3320 	ldr	r3, [pc, #800]	; 1d0e0 <CKernelOptions::CKernelOptions()+0x380>
   1cdbc:	e5c45838 	strb	r5, [r4, #2104]	; 0x838
   1cdc0:	e28d000c 	add	r0, sp, #12
   1cdc4:	e5834000 	str	r4, [r3]
   1cdc8:	ebfff74e 	bl	1ab08 <CBcmPropertyTags::CBcmPropertyTags()>
   1cdcc:	e58d5000 	str	r5, [sp]
   1cdd0:	e1a02004 	mov	r2, r4
   1cdd4:	e28d000c 	add	r0, sp, #12
   1cdd8:	e59f3304 	ldr	r3, [pc, #772]	; 1d0e4 <CKernelOptions::CKernelOptions()+0x384>
   1cddc:	e59f1304 	ldr	r1, [pc, #772]	; 1d0e8 <CKernelOptions::CKernelOptions()+0x388>
   1cde0:	ebfff79f 	bl	1ac64 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   1cde4:	e1500005 	cmp	r0, r5
   1cde8:	0a000037 	beq	1cecc <CKernelOptions::CKernelOptions()+0x16c>
   1cdec:	e5943008 	ldr	r3, [r4, #8]
   1cdf0:	e3530b02 	cmp	r3, #2048	; 0x800
   1cdf4:	2a000034 	bcs	1cecc <CKernelOptions::CKernelOptions()+0x16c>
   1cdf8:	e0843003 	add	r3, r4, r3
   1cdfc:	e284200c 	add	r2, r4, #12
   1ce00:	e59f82e4 	ldr	r8, [pc, #740]	; 1d0ec <CKernelOptions::CKernelOptions()+0x38c>
   1ce04:	e59fa2e4 	ldr	sl, [pc, #740]	; 1d0f0 <CKernelOptions::CKernelOptions()+0x390>
   1ce08:	e5c3500c 	strb	r5, [r3, #12]
   1ce0c:	e584280c 	str	r2, [r4, #2060]	; 0x80c
   1ce10:	e1a00004 	mov	r0, r4
   1ce14:	ebffffb2 	bl	1cce4 <CKernelOptions::GetToken()>
   1ce18:	e2506000 	subs	r6, r0, #0
   1ce1c:	0a00002a 	beq	1cecc <CKernelOptions::CKernelOptions()+0x16c>
   1ce20:	e1d630d0 	ldrsb	r3, [r6]
   1ce24:	e3530000 	cmp	r3, #0
   1ce28:	0a000008 	beq	1ce50 <CKernelOptions::CKernelOptions()+0xf0>
   1ce2c:	e353003d 	cmp	r3, #61	; 0x3d
   1ce30:	e1a05006 	mov	r5, r6
   1ce34:	1a000002 	bne	1ce44 <CKernelOptions::CKernelOptions()+0xe4>
   1ce38:	ea000028 	b	1cee0 <CKernelOptions::CKernelOptions()+0x180>
   1ce3c:	e353003d 	cmp	r3, #61	; 0x3d
   1ce40:	0a000026 	beq	1cee0 <CKernelOptions::CKernelOptions()+0x180>
   1ce44:	e1f530d1 	ldrsb	r3, [r5, #1]!
   1ce48:	e3530000 	cmp	r3, #0
   1ce4c:	1afffffa 	bne	1ce3c <CKernelOptions::CKernelOptions()+0xdc>
   1ce50:	e1a01008 	mov	r1, r8
   1ce54:	e1a00006 	mov	r0, r6
   1ce58:	eb001387 	bl	21c7c <strcmp>
   1ce5c:	e3500000 	cmp	r0, #0
   1ce60:	0affffea 	beq	1ce10 <CKernelOptions::CKernelOptions()+0xb0>
   1ce64:	e1a0100a 	mov	r1, sl
   1ce68:	e1a00006 	mov	r0, r6
   1ce6c:	eb001382 	bl	21c7c <strcmp>
   1ce70:	e3500000 	cmp	r0, #0
   1ce74:	13a0b000 	movne	fp, #0
   1ce78:	0affffe4 	beq	1ce10 <CKernelOptions::CKernelOptions()+0xb0>
   1ce7c:	e59f1270 	ldr	r1, [pc, #624]	; 1d0f4 <CKernelOptions::CKernelOptions()+0x394>
   1ce80:	e1a00006 	mov	r0, r6
   1ce84:	eb00137c 	bl	21c7c <strcmp>
   1ce88:	e2505000 	subs	r5, r0, #0
   1ce8c:	0a000027 	beq	1cf30 <CKernelOptions::CKernelOptions()+0x1d0>
   1ce90:	e59f1260 	ldr	r1, [pc, #608]	; 1d0f8 <CKernelOptions::CKernelOptions()+0x398>
   1ce94:	e1a00006 	mov	r0, r6
   1ce98:	eb001377 	bl	21c7c <strcmp>
   1ce9c:	e3500000 	cmp	r0, #0
   1cea0:	1a000028 	bne	1cf48 <CKernelOptions::CKernelOptions()+0x1e8>
   1cea4:	e35b0000 	cmp	fp, #0
   1cea8:	0affffd8 	beq	1ce10 <CKernelOptions::CKernelOptions()+0xb0>
   1ceac:	e1db30d0 	ldrsb	r3, [fp]
   1ceb0:	e3530000 	cmp	r3, #0
   1ceb4:	0affffd5 	beq	1ce10 <CKernelOptions::CKernelOptions()+0xb0>
   1ceb8:	e1a0000b 	mov	r0, fp
   1cebc:	ebffff50 	bl	1cc04 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   1cec0:	e3500004 	cmp	r0, #4
   1cec4:	9584082c 	strls	r0, [r4, #2092]	; 0x82c
   1cec8:	eaffffd0 	b	1ce10 <CKernelOptions::CKernelOptions()+0xb0>
   1cecc:	e28d000c 	add	r0, sp, #12
   1ced0:	ebfff712 	bl	1ab20 <CBcmPropertyTags::~CBcmPropertyTags()>
   1ced4:	e1a00004 	mov	r0, r4
   1ced8:	e28dd014 	add	sp, sp, #20
   1cedc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cee0:	e3a03000 	mov	r3, #0
   1cee4:	e1a01008 	mov	r1, r8
   1cee8:	e5c53000 	strb	r3, [r5]
   1ceec:	e1a00006 	mov	r0, r6
   1cef0:	eb001361 	bl	21c7c <strcmp>
   1cef4:	e3500000 	cmp	r0, #0
   1cef8:	e285b001 	add	fp, r5, #1
   1cefc:	1a000047 	bne	1d020 <CKernelOptions::CKernelOptions()+0x2c0>
   1cf00:	e35b0000 	cmp	fp, #0
   1cf04:	0affffc1 	beq	1ce10 <CKernelOptions::CKernelOptions()+0xb0>
   1cf08:	e1d530d1 	ldrsb	r3, [r5, #1]
   1cf0c:	e3530000 	cmp	r3, #0
   1cf10:	0affffbe 	beq	1ce10 <CKernelOptions::CKernelOptions()+0xb0>
   1cf14:	e1a0000b 	mov	r0, fp
   1cf18:	ebffff39 	bl	1cc04 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   1cf1c:	e59f31d8 	ldr	r3, [pc, #472]	; 1d0fc <CKernelOptions::CKernelOptions()+0x39c>
   1cf20:	e2402d0a 	sub	r2, r0, #640	; 0x280
   1cf24:	e1520003 	cmp	r2, r3
   1cf28:	95840810 	strls	r0, [r4, #2064]	; 0x810
   1cf2c:	eaffffb7 	b	1ce10 <CKernelOptions::CKernelOptions()+0xb0>
   1cf30:	e1a0100b 	mov	r1, fp
   1cf34:	e3a02013 	mov	r2, #19
   1cf38:	e1a00007 	mov	r0, r7
   1cf3c:	eb0013cd 	bl	21e78 <strncpy>
   1cf40:	e5c4582b 	strb	r5, [r4, #2091]	; 0x82b
   1cf44:	eaffffb1 	b	1ce10 <CKernelOptions::CKernelOptions()+0xb0>
   1cf48:	e59f11b0 	ldr	r1, [pc, #432]	; 1d100 <CKernelOptions::CKernelOptions()+0x3a0>
   1cf4c:	e1a00006 	mov	r0, r6
   1cf50:	eb001349 	bl	21c7c <strcmp>
   1cf54:	e2505000 	subs	r5, r0, #0
   1cf58:	1a000005 	bne	1cf74 <CKernelOptions::CKernelOptions()+0x214>
   1cf5c:	e1a0100b 	mov	r1, fp
   1cf60:	e3a02002 	mov	r2, #2
   1cf64:	e1a00009 	mov	r0, r9
   1cf68:	eb0013c2 	bl	21e78 <strncpy>
   1cf6c:	e5c45832 	strb	r5, [r4, #2098]	; 0x832
   1cf70:	eaffffa6 	b	1ce10 <CKernelOptions::CKernelOptions()+0xb0>
   1cf74:	e59f1188 	ldr	r1, [pc, #392]	; 1d104 <CKernelOptions::CKernelOptions()+0x3a4>
   1cf78:	e1a00006 	mov	r0, r6
   1cf7c:	eb00133e 	bl	21c7c <strcmp>
   1cf80:	e3500000 	cmp	r0, #0
   1cf84:	1a00000b 	bne	1cfb8 <CKernelOptions::CKernelOptions()+0x258>
   1cf88:	e35b0000 	cmp	fp, #0
   1cf8c:	0affff9f 	beq	1ce10 <CKernelOptions::CKernelOptions()+0xb0>
   1cf90:	e1db30d0 	ldrsb	r3, [fp]
   1cf94:	e3530000 	cmp	r3, #0
   1cf98:	0affff9c 	beq	1ce10 <CKernelOptions::CKernelOptions()+0xb0>
   1cf9c:	e1a0000b 	mov	r0, fp
   1cfa0:	ebffff17 	bl	1cc04 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   1cfa4:	e59f315c 	ldr	r3, [pc, #348]	; 1d108 <CKernelOptions::CKernelOptions()+0x3a8>
   1cfa8:	e24020c8 	sub	r2, r0, #200	; 0xc8
   1cfac:	e1520003 	cmp	r2, r3
   1cfb0:	95840834 	strls	r0, [r4, #2100]	; 0x834
   1cfb4:	eaffff95 	b	1ce10 <CKernelOptions::CKernelOptions()+0xb0>
   1cfb8:	e59f114c 	ldr	r1, [pc, #332]	; 1d10c <CKernelOptions::CKernelOptions()+0x3ac>
   1cfbc:	e1a00006 	mov	r0, r6
   1cfc0:	eb00132d 	bl	21c7c <strcmp>
   1cfc4:	e2505000 	subs	r5, r0, #0
   1cfc8:	1a000005 	bne	1cfe4 <CKernelOptions::CKernelOptions()+0x284>
   1cfcc:	e1a0100b 	mov	r1, fp
   1cfd0:	e3a02013 	mov	r2, #19
   1cfd4:	e2890008 	add	r0, r9, #8
   1cfd8:	eb0013a6 	bl	21e78 <strncpy>
   1cfdc:	e5c4584b 	strb	r5, [r4, #2123]	; 0x84b
   1cfe0:	eaffff8a 	b	1ce10 <CKernelOptions::CKernelOptions()+0xb0>
   1cfe4:	e59f1124 	ldr	r1, [pc, #292]	; 1d110 <CKernelOptions::CKernelOptions()+0x3b0>
   1cfe8:	e1a00006 	mov	r0, r6
   1cfec:	eb001322 	bl	21c7c <strcmp>
   1cff0:	e3500000 	cmp	r0, #0
   1cff4:	1a000019 	bne	1d060 <CKernelOptions::CKernelOptions()+0x300>
   1cff8:	e35b0000 	cmp	fp, #0
   1cffc:	0affff83 	beq	1ce10 <CKernelOptions::CKernelOptions()+0xb0>
   1d000:	e1db30d0 	ldrsb	r3, [fp]
   1d004:	e3530000 	cmp	r3, #0
   1d008:	0affff80 	beq	1ce10 <CKernelOptions::CKernelOptions()+0xb0>
   1d00c:	e1a0000b 	mov	r0, fp
   1d010:	ebfffefb 	bl	1cc04 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   1d014:	e3500002 	cmp	r0, #2
   1d018:	9584084c 	strls	r0, [r4, #2124]	; 0x84c
   1d01c:	eaffff7b 	b	1ce10 <CKernelOptions::CKernelOptions()+0xb0>
   1d020:	e1a0100a 	mov	r1, sl
   1d024:	e1a00006 	mov	r0, r6
   1d028:	eb001313 	bl	21c7c <strcmp>
   1d02c:	e3500000 	cmp	r0, #0
   1d030:	1affff91 	bne	1ce7c <CKernelOptions::CKernelOptions()+0x11c>
   1d034:	e35b0000 	cmp	fp, #0
   1d038:	0affff74 	beq	1ce10 <CKernelOptions::CKernelOptions()+0xb0>
   1d03c:	e1d530d1 	ldrsb	r3, [r5, #1]
   1d040:	e3530000 	cmp	r3, #0
   1d044:	0affff71 	beq	1ce10 <CKernelOptions::CKernelOptions()+0xb0>
   1d048:	e1a0000b 	mov	r0, fp
   1d04c:	ebfffeec 	bl	1cc04 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   1d050:	e2403e1e 	sub	r3, r0, #480	; 0x1e0
   1d054:	e3530f96 	cmp	r3, #600	; 0x258
   1d058:	95840814 	strls	r0, [r4, #2068]	; 0x814
   1d05c:	eaffff6b 	b	1ce10 <CKernelOptions::CKernelOptions()+0xb0>
   1d060:	e59f10ac 	ldr	r1, [pc, #172]	; 1d114 <CKernelOptions::CKernelOptions()+0x3b4>
   1d064:	e1a00006 	mov	r0, r6
   1d068:	eb001303 	bl	21c7c <strcmp>
   1d06c:	e3500000 	cmp	r0, #0
   1d070:	1a000006 	bne	1d090 <CKernelOptions::CKernelOptions()+0x330>
   1d074:	e1a0000b 	mov	r0, fp
   1d078:	e59f1098 	ldr	r1, [pc, #152]	; 1d118 <CKernelOptions::CKernelOptions()+0x3b8>
   1d07c:	eb0012fe 	bl	21c7c <strcmp>
   1d080:	e3500000 	cmp	r0, #0
   1d084:	03a03001 	moveq	r3, #1
   1d088:	05c43850 	strbeq	r3, [r4, #2128]	; 0x850
   1d08c:	eaffff5f 	b	1ce10 <CKernelOptions::CKernelOptions()+0xb0>
   1d090:	e1a00006 	mov	r0, r6
   1d094:	e59f1080 	ldr	r1, [pc, #128]	; 1d11c <CKernelOptions::CKernelOptions()+0x3bc>
   1d098:	eb0012f7 	bl	21c7c <strcmp>
   1d09c:	e2903000 	adds	r3, r0, #0
   1d0a0:	13a03001 	movne	r3, #1
   1d0a4:	e35b0000 	cmp	fp, #0
   1d0a8:	03833001 	orreq	r3, r3, #1
   1d0ac:	e3530000 	cmp	r3, #0
   1d0b0:	1affff56 	bne	1ce10 <CKernelOptions::CKernelOptions()+0xb0>
   1d0b4:	e1db30d0 	ldrsb	r3, [fp]
   1d0b8:	e3530000 	cmp	r3, #0
   1d0bc:	0affff53 	beq	1ce10 <CKernelOptions::CKernelOptions()+0xb0>
   1d0c0:	e1a0000b 	mov	r0, fp
   1d0c4:	ebfffece 	bl	1cc04 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   1d0c8:	e2403028 	sub	r3, r0, #40	; 0x28
   1d0cc:	e3530026 	cmp	r3, #38	; 0x26
   1d0d0:	95840854 	strls	r0, [r4, #2132]	; 0x854
   1d0d4:	eaffff4d 	b	1ce10 <CKernelOptions::CKernelOptions()+0xb0>
   1d0d8:	0002950c 	.word	0x0002950c
   1d0dc:	00028824 	.word	0x00028824
   1d0e0:	0002b960 	.word	0x0002b960
   1d0e4:	0000080c 	.word	0x0000080c
   1d0e8:	00050001 	.word	0x00050001
   1d0ec:	0002957c 	.word	0x0002957c
   1d0f0:	00029514 	.word	0x00029514
   1d0f4:	0002951c 	.word	0x0002951c
   1d0f8:	00029524 	.word	0x00029524
   1d0fc:	0000053c 	.word	0x0000053c
   1d100:	00029530 	.word	0x00029530
   1d104:	00029538 	.word	0x00029538
   1d108:	00001e78 	.word	0x00001e78
   1d10c:	00029548 	.word	0x00029548
   1d110:	00029554 	.word	0x00029554
   1d114:	00029560 	.word	0x00029560
   1d118:	00029568 	.word	0x00029568
   1d11c:	00029570 	.word	0x00029570

0001d120 <CKernelOptions::GetOptionValue(char*)>:
   1d120:	e1d030d0 	ldrsb	r3, [r0]
   1d124:	e3530000 	cmp	r3, #0
   1d128:	1a000003 	bne	1d13c <CKernelOptions::GetOptionValue(char*)+0x1c>
   1d12c:	ea000007 	b	1d150 <CKernelOptions::GetOptionValue(char*)+0x30>
   1d130:	e1f030d1 	ldrsb	r3, [r0, #1]!
   1d134:	e3530000 	cmp	r3, #0
   1d138:	0a000004 	beq	1d150 <CKernelOptions::GetOptionValue(char*)+0x30>
   1d13c:	e353003d 	cmp	r3, #61	; 0x3d
   1d140:	1afffffa 	bne	1d130 <CKernelOptions::GetOptionValue(char*)+0x10>
   1d144:	e3a02000 	mov	r2, #0
   1d148:	e2803001 	add	r3, r0, #1
   1d14c:	e5c02000 	strb	r2, [r0]
   1d150:	e1a00003 	mov	r0, r3
   1d154:	e12fff1e 	bx	lr

0001d158 <CKernelOptions::GetDecimal(char*)>:
   1d158:	e2503000 	subs	r3, r0, #0
   1d15c:	0a000002 	beq	1d16c <CKernelOptions::GetDecimal(char*)+0x14>
   1d160:	e1d330d0 	ldrsb	r3, [r3]
   1d164:	e3530000 	cmp	r3, #0
   1d168:	1a000001 	bne	1d174 <CKernelOptions::GetDecimal(char*)+0x1c>
   1d16c:	e3e00000 	mvn	r0, #0
   1d170:	e12fff1e 	bx	lr
   1d174:	eafffea2 	b	1cc04 <CKernelOptions::GetDecimal(char*) [clone .part.0]>

0001d178 <CLogger::CLogger(unsigned int, CTimer*)>:
   1d178:	e92d4010 	push	{r4, lr}
   1d17c:	e3a03000 	mov	r3, #0
   1d180:	e1a04000 	mov	r4, r0
   1d184:	e3a00001 	mov	r0, #1
   1d188:	e884000e 	stm	r4, {r1, r2, r3}
   1d18c:	e584300c 	str	r3, [r4, #12]
   1d190:	e5843010 	str	r3, [r4, #16]
   1d194:	e5843014 	str	r3, [r4, #20]
   1d198:	e58430e4 	str	r3, [r4, #228]	; 0xe4
   1d19c:	e58430e8 	str	r3, [r4, #232]	; 0xe8
   1d1a0:	e58430f0 	str	r3, [r4, #240]	; 0xf0
   1d1a4:	e58430f4 	str	r3, [r4, #244]	; 0xf4
   1d1a8:	e5840018 	str	r0, [r4, #24]
   1d1ac:	e58400ec 	str	r0, [r4, #236]	; 0xec
   1d1b0:	e3a00901 	mov	r0, #16384	; 0x4000
   1d1b4:	eb0016f5 	bl	22d90 <operator new[](unsigned int)>
   1d1b8:	e59f300c 	ldr	r3, [pc, #12]	; 1d1cc <CLogger::CLogger(unsigned int, CTimer*)+0x54>
   1d1bc:	e584000c 	str	r0, [r4, #12]
   1d1c0:	e5834000 	str	r4, [r3]
   1d1c4:	e1a00004 	mov	r0, r4
   1d1c8:	e8bd8010 	pop	{r4, pc}
   1d1cc:	0002b964 	.word	0x0002b964

0001d1d0 <CLogger::~CLogger()>:
   1d1d0:	e3a02000 	mov	r2, #0
   1d1d4:	e59f1064 	ldr	r1, [pc, #100]	; 1d240 <CLogger::~CLogger()+0x70>
   1d1d8:	e92d4070 	push	{r4, r5, r6, lr}
   1d1dc:	e59030e8 	ldr	r3, [r0, #232]	; 0xe8
   1d1e0:	e1a04000 	mov	r4, r0
   1d1e4:	e1a06002 	mov	r6, r2
   1d1e8:	e3a05f42 	mov	r5, #264	; 0x108
   1d1ec:	e5812000 	str	r2, [r1]
   1d1f0:	ea000008 	b	1d218 <CLogger::~CLogger()+0x48>
   1d1f4:	e591001c 	ldr	r0, [r1, #28]
   1d1f8:	e1a01005 	mov	r1, r5
   1d1fc:	eb0016e6 	bl	22d9c <operator delete(void*, unsigned int)>
   1d200:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
   1d204:	e2833001 	add	r3, r3, #1
   1d208:	e3530032 	cmp	r3, #50	; 0x32
   1d20c:	e58430e8 	str	r3, [r4, #232]	; 0xe8
   1d210:	03a03000 	moveq	r3, #0
   1d214:	058460e8 	streq	r6, [r4, #232]	; 0xe8
   1d218:	e59420e4 	ldr	r2, [r4, #228]	; 0xe4
   1d21c:	e0841103 	add	r1, r4, r3, lsl #2
   1d220:	e1520003 	cmp	r2, r3
   1d224:	1afffff2 	bne	1d1f4 <CLogger::~CLogger()+0x24>
   1d228:	e594000c 	ldr	r0, [r4, #12]
   1d22c:	e3500000 	cmp	r0, #0
   1d230:	0a000000 	beq	1d238 <CLogger::~CLogger()+0x68>
   1d234:	eb0016d7 	bl	22d98 <operator delete[](void*)>
   1d238:	e1a00004 	mov	r0, r4
   1d23c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1d240:	0002b964 	.word	0x0002b964

0001d244 <CLogger::Get()>:
   1d244:	e59f3004 	ldr	r3, [pc, #4]	; 1d250 <CLogger::Get()+0xc>
   1d248:	e5930000 	ldr	r0, [r3]
   1d24c:	e12fff1e 	bx	lr
   1d250:	0002b964 	.word	0x0002b964

0001d254 <CLogger::Write(char const*)>:
   1d254:	e92d4070 	push	{r4, r5, r6, lr}
   1d258:	e1a04000 	mov	r4, r0
   1d25c:	e1a00001 	mov	r0, r1
   1d260:	e1a05001 	mov	r5, r1
   1d264:	eb00127a 	bl	21c54 <strlen>
   1d268:	e1a06000 	mov	r6, r0
   1d26c:	e5940008 	ldr	r0, [r4, #8]
   1d270:	e1a02006 	mov	r2, r6
   1d274:	e5903000 	ldr	r3, [r0]
   1d278:	e1a01005 	mov	r1, r5
   1d27c:	e593300c 	ldr	r3, [r3, #12]
   1d280:	e12fff33 	blx	r3
   1d284:	e5940018 	ldr	r0, [r4, #24]
   1d288:	e3500000 	cmp	r0, #0
   1d28c:	1a000018 	bne	1d2f4 <CLogger::Write(char const*)+0xa0>
   1d290:	e59f2064 	ldr	r2, [pc, #100]	; 1d2fc <CLogger::Write(char const*)+0xa8>
   1d294:	e0850006 	add	r0, r5, r6
   1d298:	e1550000 	cmp	r5, r0
   1d29c:	0a00000f 	beq	1d2e0 <CLogger::Write(char const*)+0x8c>
   1d2a0:	e0d510d1 	ldrsb	r1, [r5], #1
   1d2a4:	e351000d 	cmp	r1, #13
   1d2a8:	0afffffa 	beq	1d298 <CLogger::Write(char const*)+0x44>
   1d2ac:	e594c010 	ldr	ip, [r4, #16]
   1d2b0:	e594e00c 	ldr	lr, [r4, #12]
   1d2b4:	e7ce100c 	strb	r1, [lr, ip]
   1d2b8:	e5943010 	ldr	r3, [r4, #16]
   1d2bc:	e5941014 	ldr	r1, [r4, #20]
   1d2c0:	e2833001 	add	r3, r3, #1
   1d2c4:	e0033002 	and	r3, r3, r2
   1d2c8:	e1530001 	cmp	r3, r1
   1d2cc:	e5843010 	str	r3, [r4, #16]
   1d2d0:	1afffff0 	bne	1d298 <CLogger::Write(char const*)+0x44>
   1d2d4:	e2433001 	sub	r3, r3, #1
   1d2d8:	e0033002 	and	r3, r3, r2
   1d2dc:	e5843010 	str	r3, [r4, #16]
   1d2e0:	e5943018 	ldr	r3, [r4, #24]
   1d2e4:	e3530000 	cmp	r3, #0
   1d2e8:	08bd8070 	popeq	{r4, r5, r6, pc}
   1d2ec:	e8bd4070 	pop	{r4, r5, r6, lr}
   1d2f0:	ea001678 	b	22cd8 <LeaveCritical>
   1d2f4:	eb00164a 	bl	22c24 <EnterCritical>
   1d2f8:	eaffffe4 	b	1d290 <CLogger::Write(char const*)+0x3c>
   1d2fc:	00003fff 	.word	0x00003fff

0001d300 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)>:
   1d300:	e590c000 	ldr	ip, [r0]
   1d304:	e152000c 	cmp	r2, ip
   1d308:	812fff1e 	bxhi	lr
   1d30c:	e92d4070 	push	{r4, r5, r6, lr}
   1d310:	e1a05003 	mov	r5, r3
   1d314:	e3a03000 	mov	r3, #0
   1d318:	e24dd0c8 	sub	sp, sp, #200	; 0xc8
   1d31c:	e1520003 	cmp	r2, r3
   1d320:	e1a04000 	mov	r4, r0
   1d324:	e5cd3000 	strb	r3, [sp]
   1d328:	0a00000f 	beq	1d36c <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x6c>
   1d32c:	e1a0000d 	mov	r0, sp
   1d330:	eb0012e3 	bl	21ec4 <strcat>
   1d334:	e1a0000d 	mov	r0, sp
   1d338:	e59f1088 	ldr	r1, [pc, #136]	; 1d3c8 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xc8>
   1d33c:	eb0012e0 	bl	21ec4 <strcat>
   1d340:	e1a01005 	mov	r1, r5
   1d344:	e1a0000d 	mov	r0, sp
   1d348:	eb0012dd 	bl	21ec4 <strcat>
   1d34c:	e1a0000d 	mov	r0, sp
   1d350:	e59f1074 	ldr	r1, [pc, #116]	; 1d3cc <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xcc>
   1d354:	eb0012da 	bl	21ec4 <strcat>
   1d358:	e1a0100d 	mov	r1, sp
   1d35c:	e1a00004 	mov	r0, r4
   1d360:	ebffffbb 	bl	1d254 <CLogger::Write(char const*)>
   1d364:	e28dd0c8 	add	sp, sp, #200	; 0xc8
   1d368:	e8bd8070 	pop	{r4, r5, r6, pc}
   1d36c:	e1a06001 	mov	r6, r1
   1d370:	e1a0000d 	mov	r0, sp
   1d374:	e59f1054 	ldr	r1, [pc, #84]	; 1d3d0 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd0>
   1d378:	eb0012b3 	bl	21e4c <strcpy>
   1d37c:	e1a01006 	mov	r1, r6
   1d380:	e1a0000d 	mov	r0, sp
   1d384:	eb0012ce 	bl	21ec4 <strcat>
   1d388:	e59f1038 	ldr	r1, [pc, #56]	; 1d3c8 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xc8>
   1d38c:	e1a0000d 	mov	r0, sp
   1d390:	eb0012cb 	bl	21ec4 <strcat>
   1d394:	e1a01005 	mov	r1, r5
   1d398:	e1a0000d 	mov	r0, sp
   1d39c:	eb0012c8 	bl	21ec4 <strcat>
   1d3a0:	e59f102c 	ldr	r1, [pc, #44]	; 1d3d4 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd4>
   1d3a4:	e1a0000d 	mov	r0, sp
   1d3a8:	eb0012c5 	bl	21ec4 <strcat>
   1d3ac:	e59f1018 	ldr	r1, [pc, #24]	; 1d3cc <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xcc>
   1d3b0:	e1a0000d 	mov	r0, sp
   1d3b4:	eb0012c2 	bl	21ec4 <strcat>
   1d3b8:	e1a0100d 	mov	r1, sp
   1d3bc:	e1a00004 	mov	r0, r4
   1d3c0:	ebffffa3 	bl	1d254 <CLogger::Write(char const*)>
   1d3c4:	eb000e57 	bl	20d28 <halt>
   1d3c8:	0002958c 	.word	0x0002958c
   1d3cc:	00028860 	.word	0x00028860
   1d3d0:	00029584 	.word	0x00029584
   1d3d4:	00029590 	.word	0x00029590

0001d3d8 <CLogger::Read(void*, unsigned int)>:
   1d3d8:	e92d4070 	push	{r4, r5, r6, lr}
   1d3dc:	e1a04000 	mov	r4, r0
   1d3e0:	e5900018 	ldr	r0, [r0, #24]
   1d3e4:	e1a05001 	mov	r5, r1
   1d3e8:	e3500000 	cmp	r0, #0
   1d3ec:	e1a06002 	mov	r6, r2
   1d3f0:	1a00001c 	bne	1d468 <CLogger::Read(void*, unsigned int)+0x90>
   1d3f4:	e5942010 	ldr	r2, [r4, #16]
   1d3f8:	e5943014 	ldr	r3, [r4, #20]
   1d3fc:	e1520003 	cmp	r2, r3
   1d400:	0a000021 	beq	1d48c <CLogger::Read(void*, unsigned int)+0xb4>
   1d404:	e1a01005 	mov	r1, r5
   1d408:	e59f2088 	ldr	r2, [pc, #136]	; 1d498 <CLogger::Read(void*, unsigned int)+0xc0>
   1d40c:	e3a05000 	mov	r5, #0
   1d410:	ea00000a 	b	1d440 <CLogger::Read(void*, unsigned int)+0x68>
   1d414:	e594000c 	ldr	r0, [r4, #12]
   1d418:	e2855001 	add	r5, r5, #1
   1d41c:	e19030d3 	ldrsb	r3, [r0, r3]
   1d420:	e4c13001 	strb	r3, [r1], #1
   1d424:	e5943014 	ldr	r3, [r4, #20]
   1d428:	e5940010 	ldr	r0, [r4, #16]
   1d42c:	e2833001 	add	r3, r3, #1
   1d430:	e0033002 	and	r3, r3, r2
   1d434:	e1530000 	cmp	r3, r0
   1d438:	e5843014 	str	r3, [r4, #20]
   1d43c:	0a000001 	beq	1d448 <CLogger::Read(void*, unsigned int)+0x70>
   1d440:	e1550006 	cmp	r5, r6
   1d444:	1afffff2 	bne	1d414 <CLogger::Read(void*, unsigned int)+0x3c>
   1d448:	e5943018 	ldr	r3, [r4, #24]
   1d44c:	e3530000 	cmp	r3, #0
   1d450:	1a000001 	bne	1d45c <CLogger::Read(void*, unsigned int)+0x84>
   1d454:	e1a00005 	mov	r0, r5
   1d458:	e8bd8070 	pop	{r4, r5, r6, pc}
   1d45c:	eb00161d 	bl	22cd8 <LeaveCritical>
   1d460:	e1a00005 	mov	r0, r5
   1d464:	e8bd8070 	pop	{r4, r5, r6, pc}
   1d468:	eb0015ed 	bl	22c24 <EnterCritical>
   1d46c:	e5942010 	ldr	r2, [r4, #16]
   1d470:	e5943014 	ldr	r3, [r4, #20]
   1d474:	e1520003 	cmp	r2, r3
   1d478:	1affffe1 	bne	1d404 <CLogger::Read(void*, unsigned int)+0x2c>
   1d47c:	e5943018 	ldr	r3, [r4, #24]
   1d480:	e3530000 	cmp	r3, #0
   1d484:	0a000000 	beq	1d48c <CLogger::Read(void*, unsigned int)+0xb4>
   1d488:	eb001612 	bl	22cd8 <LeaveCritical>
   1d48c:	e3e05000 	mvn	r5, #0
   1d490:	e1a00005 	mov	r0, r5
   1d494:	e8bd8070 	pop	{r4, r5, r6, pc}
   1d498:	00003fff 	.word	0x00003fff

0001d49c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>:
   1d49c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   1d4a0:	e1a05000 	mov	r5, r0
   1d4a4:	e24dd00c 	sub	sp, sp, #12
   1d4a8:	e3a00f42 	mov	r0, #264	; 0x108
   1d4ac:	e1a07003 	mov	r7, r3
   1d4b0:	e1a09002 	mov	r9, r2
   1d4b4:	e1a08001 	mov	r8, r1
   1d4b8:	eb001633 	bl	22d8c <operator new(unsigned int)>
   1d4bc:	e3a06000 	mov	r6, #0
   1d4c0:	e1a04000 	mov	r4, r0
   1d4c4:	e1a01008 	mov	r1, r8
   1d4c8:	e3a02032 	mov	r2, #50	; 0x32
   1d4cc:	e4c09001 	strb	r9, [r0], #1
   1d4d0:	eb001268 	bl	21e78 <strncpy>
   1d4d4:	e1a01007 	mov	r1, r7
   1d4d8:	e2840033 	add	r0, r4, #51	; 0x33
   1d4dc:	e3a020c8 	mov	r2, #200	; 0xc8
   1d4e0:	e5c46032 	strb	r6, [r4, #50]	; 0x32
   1d4e4:	eb001263 	bl	21e78 <strncpy>
   1d4e8:	e5950004 	ldr	r0, [r5, #4]
   1d4ec:	e5c460fa 	strb	r6, [r4, #250]	; 0xfa
   1d4f0:	e1500006 	cmp	r0, r6
   1d4f4:	0a000004 	beq	1d50c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x70>
   1d4f8:	e28d2004 	add	r2, sp, #4
   1d4fc:	e1a0100d 	mov	r1, sp
   1d500:	eb000ee3 	bl	21094 <CTimer::GetLocalTime(unsigned int*, unsigned int*)>
   1d504:	e1500006 	cmp	r0, r6
   1d508:	1a000021 	bne	1d594 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xf8>
   1d50c:	e3a03000 	mov	r3, #0
   1d510:	e59500ec 	ldr	r0, [r5, #236]	; 0xec
   1d514:	e58430fc 	str	r3, [r4, #252]	; 0xfc
   1d518:	e3500000 	cmp	r0, #0
   1d51c:	e5843100 	str	r3, [r4, #256]	; 0x100
   1d520:	e5843104 	str	r3, [r4, #260]	; 0x104
   1d524:	1a000027 	bne	1d5c8 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x12c>
   1d528:	e59520e4 	ldr	r2, [r5, #228]	; 0xe4
   1d52c:	e2823001 	add	r3, r2, #1
   1d530:	e3530032 	cmp	r3, #50	; 0x32
   1d534:	e0852102 	add	r2, r5, r2, lsl #2
   1d538:	e582401c 	str	r4, [r2, #28]
   1d53c:	03a02000 	moveq	r2, #0
   1d540:	01a03002 	moveq	r3, r2
   1d544:	058520e4 	streq	r2, [r5, #228]	; 0xe4
   1d548:	e59520e8 	ldr	r2, [r5, #232]	; 0xe8
   1d54c:	158530e4 	strne	r3, [r5, #228]	; 0xe4
   1d550:	e1520003 	cmp	r2, r3
   1d554:	0a00001e 	beq	1d5d4 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x138>
   1d558:	e3500000 	cmp	r0, #0
   1d55c:	13a04000 	movne	r4, #0
   1d560:	0a000005 	beq	1d57c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xe0>
   1d564:	eb0015db 	bl	22cd8 <LeaveCritical>
   1d568:	e3540000 	cmp	r4, #0
   1d56c:	0a000002 	beq	1d57c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xe0>
   1d570:	e1a00004 	mov	r0, r4
   1d574:	e3a01f42 	mov	r1, #264	; 0x108
   1d578:	eb001607 	bl	22d9c <operator delete(void*, unsigned int)>
   1d57c:	e59530f0 	ldr	r3, [r5, #240]	; 0xf0
   1d580:	e3530000 	cmp	r3, #0
   1d584:	0a000000 	beq	1d58c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xf0>
   1d588:	e12fff33 	blx	r3
   1d58c:	e28dd00c 	add	sp, sp, #12
   1d590:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1d594:	e59d3004 	ldr	r3, [sp, #4]
   1d598:	e59f105c 	ldr	r1, [pc, #92]	; 1d5fc <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x160>
   1d59c:	e59d2000 	ldr	r2, [sp]
   1d5a0:	e0831391 	umull	r1, r3, r1, r3
   1d5a4:	e1a036a3 	lsr	r3, r3, #13
   1d5a8:	e5950004 	ldr	r0, [r5, #4]
   1d5ac:	e5843100 	str	r3, [r4, #256]	; 0x100
   1d5b0:	e58420fc 	str	r2, [r4, #252]	; 0xfc
   1d5b4:	eb000e88 	bl	20fdc <CTimer::GetTimeZone() const>
   1d5b8:	e5840104 	str	r0, [r4, #260]	; 0x104
   1d5bc:	e59500ec 	ldr	r0, [r5, #236]	; 0xec
   1d5c0:	e3500000 	cmp	r0, #0
   1d5c4:	0affffd7 	beq	1d528 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x8c>
   1d5c8:	eb001595 	bl	22c24 <EnterCritical>
   1d5cc:	e59500ec 	ldr	r0, [r5, #236]	; 0xec
   1d5d0:	eaffffd4 	b	1d528 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x8c>
   1d5d4:	e2832001 	add	r2, r3, #1
   1d5d8:	e3520032 	cmp	r2, #50	; 0x32
   1d5dc:	e0853103 	add	r3, r5, r3, lsl #2
   1d5e0:	e593401c 	ldr	r4, [r3, #28]
   1d5e4:	03a03000 	moveq	r3, #0
   1d5e8:	158520e8 	strne	r2, [r5, #232]	; 0xe8
   1d5ec:	058530e8 	streq	r3, [r5, #232]	; 0xe8
   1d5f0:	e3500000 	cmp	r0, #0
   1d5f4:	0affffdb 	beq	1d568 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xcc>
   1d5f8:	eaffffd9 	b	1d564 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xc8>
   1d5fc:	d1b71759 	.word	0xd1b71759

0001d600 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)>:
   1d600:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1d604:	e1a04000 	mov	r4, r0
   1d608:	e59000ec 	ldr	r0, [r0, #236]	; 0xec
   1d60c:	e1a07001 	mov	r7, r1
   1d610:	e3500000 	cmp	r0, #0
   1d614:	e1a08002 	mov	r8, r2
   1d618:	e1a06003 	mov	r6, r3
   1d61c:	1a000022 	bne	1d6ac <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xac>
   1d620:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
   1d624:	e59420e4 	ldr	r2, [r4, #228]	; 0xe4
   1d628:	e1530002 	cmp	r3, r2
   1d62c:	0a000028 	beq	1d6d4 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xd4>
   1d630:	e283c001 	add	ip, r3, #1
   1d634:	e35c0032 	cmp	ip, #50	; 0x32
   1d638:	e0843103 	add	r3, r4, r3, lsl #2
   1d63c:	e593501c 	ldr	r5, [r3, #28]
   1d640:	03a03000 	moveq	r3, #0
   1d644:	1584c0e8 	strne	ip, [r4, #232]	; 0xe8
   1d648:	058430e8 	streq	r3, [r4, #232]	; 0xe8
   1d64c:	e3500000 	cmp	r0, #0
   1d650:	1a000021 	bne	1d6dc <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xdc>
   1d654:	e1a01005 	mov	r1, r5
   1d658:	e4d12001 	ldrb	r2, [r1], #1
   1d65c:	e1a00008 	mov	r0, r8
   1d660:	e5c72000 	strb	r2, [r7]
   1d664:	eb0011f8 	bl	21e4c <strcpy>
   1d668:	e2851033 	add	r1, r5, #51	; 0x33
   1d66c:	e1a00006 	mov	r0, r6
   1d670:	eb0011f5 	bl	21e4c <strcpy>
   1d674:	e59520fc 	ldr	r2, [r5, #252]	; 0xfc
   1d678:	e59d1018 	ldr	r1, [sp, #24]
   1d67c:	e5953100 	ldr	r3, [r5, #256]	; 0x100
   1d680:	e5812000 	str	r2, [r1]
   1d684:	e59d201c 	ldr	r2, [sp, #28]
   1d688:	e1a00005 	mov	r0, r5
   1d68c:	e5823000 	str	r3, [r2]
   1d690:	e5953104 	ldr	r3, [r5, #260]	; 0x104
   1d694:	e59d2020 	ldr	r2, [sp, #32]
   1d698:	e3a01f42 	mov	r1, #264	; 0x108
   1d69c:	e5823000 	str	r3, [r2]
   1d6a0:	eb0015bd 	bl	22d9c <operator delete(void*, unsigned int)>
   1d6a4:	e3a00001 	mov	r0, #1
   1d6a8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1d6ac:	eb00155c 	bl	22c24 <EnterCritical>
   1d6b0:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
   1d6b4:	e59420e4 	ldr	r2, [r4, #228]	; 0xe4
   1d6b8:	e1520003 	cmp	r2, r3
   1d6bc:	159400ec 	ldrne	r0, [r4, #236]	; 0xec
   1d6c0:	1affffda 	bne	1d630 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x30>
   1d6c4:	e59430ec 	ldr	r3, [r4, #236]	; 0xec
   1d6c8:	e3530000 	cmp	r3, #0
   1d6cc:	0a000000 	beq	1d6d4 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xd4>
   1d6d0:	eb001580 	bl	22cd8 <LeaveCritical>
   1d6d4:	e3a00000 	mov	r0, #0
   1d6d8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1d6dc:	eb00157d 	bl	22cd8 <LeaveCritical>
   1d6e0:	eaffffdb 	b	1d654 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x54>

0001d6e4 <CLogger::RegisterEventNotificationHandler(void (*)())>:
   1d6e4:	e58010f0 	str	r1, [r0, #240]	; 0xf0
   1d6e8:	e12fff1e 	bx	lr

0001d6ec <CLogger::RegisterPanicHandler(void (*)())>:
   1d6ec:	e58010f4 	str	r1, [r0, #244]	; 0xf4
   1d6f0:	e12fff1e 	bx	lr

0001d6f4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>:
   1d6f4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1d6f8:	e1a07003 	mov	r7, r3
   1d6fc:	e24dd024 	sub	sp, sp, #36	; 0x24
   1d700:	e1a04000 	mov	r4, r0
   1d704:	e1a0000d 	mov	r0, sp
   1d708:	e1a05002 	mov	r5, r2
   1d70c:	e1a06001 	mov	r6, r1
   1d710:	eb000989 	bl	1fd3c <CString::CString()>
   1d714:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
   1d718:	e1a01007 	mov	r1, r7
   1d71c:	e1a0000d 	mov	r0, sp
   1d720:	eb000b52 	bl	20470 <CString::FormatV(char const*, std::__va_list)>
   1d724:	e1a0000d 	mov	r0, sp
   1d728:	eb000999 	bl	1fd94 <CString::operator char const*() const>
   1d72c:	e1a02005 	mov	r2, r5
   1d730:	e1a03000 	mov	r3, r0
   1d734:	e1a01006 	mov	r1, r6
   1d738:	e1a00004 	mov	r0, r4
   1d73c:	ebffff56 	bl	1d49c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>
   1d740:	e5943000 	ldr	r3, [r4]
   1d744:	e1550003 	cmp	r5, r3
   1d748:	8a00002c 	bhi	1d800 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x10c>
   1d74c:	e28d0010 	add	r0, sp, #16
   1d750:	eb000979 	bl	1fd3c <CString::CString()>
   1d754:	e3550000 	cmp	r5, #0
   1d758:	0a00002c 	beq	1d810 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x11c>
   1d75c:	e5940004 	ldr	r0, [r4, #4]
   1d760:	e3500000 	cmp	r0, #0
   1d764:	0a00004a 	beq	1d894 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1a0>
   1d768:	eb000eba 	bl	21258 <CTimer::GetTimeString()>
   1d76c:	e2507000 	subs	r7, r0, #0
   1d770:	0a000047 	beq	1d894 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1a0>
   1d774:	e1a00007 	mov	r0, r7
   1d778:	eb000985 	bl	1fd94 <CString::operator char const*() const>
   1d77c:	e1a01000 	mov	r1, r0
   1d780:	e28d0010 	add	r0, sp, #16
   1d784:	eb0009b4 	bl	1fe5c <CString::Append(char const*)>
   1d788:	e59f1144 	ldr	r1, [pc, #324]	; 1d8d4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e0>
   1d78c:	e28d0010 	add	r0, sp, #16
   1d790:	eb0009b1 	bl	1fe5c <CString::Append(char const*)>
   1d794:	e5973000 	ldr	r3, [r7]
   1d798:	e1a00007 	mov	r0, r7
   1d79c:	e5933004 	ldr	r3, [r3, #4]
   1d7a0:	e12fff33 	blx	r3
   1d7a4:	e1a01006 	mov	r1, r6
   1d7a8:	e28d0010 	add	r0, sp, #16
   1d7ac:	eb0009aa 	bl	1fe5c <CString::Append(char const*)>
   1d7b0:	e59f1120 	ldr	r1, [pc, #288]	; 1d8d8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e4>
   1d7b4:	e28d0010 	add	r0, sp, #16
   1d7b8:	eb0009a7 	bl	1fe5c <CString::Append(char const*)>
   1d7bc:	e1a0000d 	mov	r0, sp
   1d7c0:	eb000973 	bl	1fd94 <CString::operator char const*() const>
   1d7c4:	e1a01000 	mov	r1, r0
   1d7c8:	e28d0010 	add	r0, sp, #16
   1d7cc:	eb0009a2 	bl	1fe5c <CString::Append(char const*)>
   1d7d0:	e3550000 	cmp	r5, #0
   1d7d4:	0a00001e 	beq	1d854 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x160>
   1d7d8:	e59f10fc 	ldr	r1, [pc, #252]	; 1d8dc <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e8>
   1d7dc:	e28d0010 	add	r0, sp, #16
   1d7e0:	eb00099d 	bl	1fe5c <CString::Append(char const*)>
   1d7e4:	e28d0010 	add	r0, sp, #16
   1d7e8:	eb000969 	bl	1fd94 <CString::operator char const*() const>
   1d7ec:	e1a01000 	mov	r1, r0
   1d7f0:	e1a00004 	mov	r0, r4
   1d7f4:	ebfffe96 	bl	1d254 <CLogger::Write(char const*)>
   1d7f8:	e28d0010 	add	r0, sp, #16
   1d7fc:	eb00091b 	bl	1fc70 <CString::~CString()>
   1d800:	e1a0000d 	mov	r0, sp
   1d804:	eb000919 	bl	1fc70 <CString::~CString()>
   1d808:	e28dd024 	add	sp, sp, #36	; 0x24
   1d80c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1d810:	e59f10c8 	ldr	r1, [pc, #200]	; 1d8e0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1ec>
   1d814:	e28d0010 	add	r0, sp, #16
   1d818:	eb000963 	bl	1fdac <CString::operator=(char const*)>
   1d81c:	e5940004 	ldr	r0, [r4, #4]
   1d820:	e3500000 	cmp	r0, #0
   1d824:	1a000026 	bne	1d8c4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1d0>
   1d828:	e1a01006 	mov	r1, r6
   1d82c:	e28d0010 	add	r0, sp, #16
   1d830:	eb000989 	bl	1fe5c <CString::Append(char const*)>
   1d834:	e59f109c 	ldr	r1, [pc, #156]	; 1d8d8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e4>
   1d838:	e28d0010 	add	r0, sp, #16
   1d83c:	eb000986 	bl	1fe5c <CString::Append(char const*)>
   1d840:	e1a0000d 	mov	r0, sp
   1d844:	eb000952 	bl	1fd94 <CString::operator char const*() const>
   1d848:	e1a01000 	mov	r1, r0
   1d84c:	e28d0010 	add	r0, sp, #16
   1d850:	eb000981 	bl	1fe5c <CString::Append(char const*)>
   1d854:	e59f1088 	ldr	r1, [pc, #136]	; 1d8e4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1f0>
   1d858:	e28d0010 	add	r0, sp, #16
   1d85c:	eb00097e 	bl	1fe5c <CString::Append(char const*)>
   1d860:	e59f1074 	ldr	r1, [pc, #116]	; 1d8dc <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e8>
   1d864:	e28d0010 	add	r0, sp, #16
   1d868:	eb00097b 	bl	1fe5c <CString::Append(char const*)>
   1d86c:	e28d0010 	add	r0, sp, #16
   1d870:	eb000947 	bl	1fd94 <CString::operator char const*() const>
   1d874:	e1a01000 	mov	r1, r0
   1d878:	e1a00004 	mov	r0, r4
   1d87c:	ebfffe74 	bl	1d254 <CLogger::Write(char const*)>
   1d880:	e59430f4 	ldr	r3, [r4, #244]	; 0xf4
   1d884:	e3530000 	cmp	r3, #0
   1d888:	0a000000 	beq	1d890 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x19c>
   1d88c:	e12fff33 	blx	r3
   1d890:	eb000d24 	bl	20d28 <halt>
   1d894:	e1a01006 	mov	r1, r6
   1d898:	e28d0010 	add	r0, sp, #16
   1d89c:	eb00096e 	bl	1fe5c <CString::Append(char const*)>
   1d8a0:	e59f1030 	ldr	r1, [pc, #48]	; 1d8d8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e4>
   1d8a4:	e28d0010 	add	r0, sp, #16
   1d8a8:	eb00096b 	bl	1fe5c <CString::Append(char const*)>
   1d8ac:	e1a0000d 	mov	r0, sp
   1d8b0:	eb000937 	bl	1fd94 <CString::operator char const*() const>
   1d8b4:	e1a01000 	mov	r1, r0
   1d8b8:	e28d0010 	add	r0, sp, #16
   1d8bc:	eb000966 	bl	1fe5c <CString::Append(char const*)>
   1d8c0:	eaffffc4 	b	1d7d8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xe4>
   1d8c4:	eb000e63 	bl	21258 <CTimer::GetTimeString()>
   1d8c8:	e2507000 	subs	r7, r0, #0
   1d8cc:	1affffa8 	bne	1d774 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x80>
   1d8d0:	eaffffd4 	b	1d828 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x134>
   1d8d4:	00028850 	.word	0x00028850
   1d8d8:	0002958c 	.word	0x0002958c
   1d8dc:	00028860 	.word	0x00028860
   1d8e0:	00029584 	.word	0x00029584
   1d8e4:	00029590 	.word	0x00029590

0001d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>:
   1d8e8:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)
   1d8ec:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   1d8f0:	e24dd010 	sub	sp, sp, #16
   1d8f4:	e28dc018 	add	ip, sp, #24
   1d8f8:	e58dc000 	str	ip, [sp]
   1d8fc:	e59d3014 	ldr	r3, [sp, #20]
   1d900:	e58dc00c 	str	ip, [sp, #12]
   1d904:	ebffff7a 	bl	1d6f4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
   1d908:	e28dd010 	add	sp, sp, #16
   1d90c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   1d910:	e28dd004 	add	sp, sp, #4
   1d914:	e12fff1e 	bx	lr

0001d918 <CLogger::Initialize(CDevice*)>:
   1d918:	e92d4010 	push	{r4, lr}
   1d91c:	e5801008 	str	r1, [r0, #8]
   1d920:	e24dd008 	sub	sp, sp, #8
   1d924:	e1a04000 	mov	r4, r0
   1d928:	eb000102 	bl	1dd38 <CMachineInfo::Get()>
   1d92c:	eb00008b 	bl	1db60 <CMachineInfo::GetMachineName() const>
   1d930:	e59f301c 	ldr	r3, [pc, #28]	; 1d954 <CLogger::Initialize(CDevice*)+0x3c>
   1d934:	e58d0000 	str	r0, [sp]
   1d938:	e3a02003 	mov	r2, #3
   1d93c:	e1a00004 	mov	r0, r4
   1d940:	e59f1010 	ldr	r1, [pc, #16]	; 1d958 <CLogger::Initialize(CDevice*)+0x40>
   1d944:	ebffffe7 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1d948:	e3a00001 	mov	r0, #1
   1d94c:	e28dd008 	add	sp, sp, #8
   1d950:	e8bd8010 	pop	{r4, pc}
   1d954:	00029598 	.word	0x00029598
   1d958:	000295b0 	.word	0x000295b0

0001d95c <CMachineInfo::CMachineInfo()>:
   1d95c:	e3a03000 	mov	r3, #0
   1d960:	e92d4030 	push	{r4, r5, lr}
   1d964:	e3a01003 	mov	r1, #3
   1d968:	e1a04000 	mov	r4, r0
   1d96c:	e3a0000e 	mov	r0, #14
   1d970:	e59f21a8 	ldr	r2, [pc, #424]	; 1db20 <CMachineInfo::CMachineInfo()+0x1c4>
   1d974:	e24dd024 	sub	sp, sp, #36	; 0x24
   1d978:	e5925000 	ldr	r5, [r2]
   1d97c:	e5c40004 	strb	r0, [r4, #4]
   1d980:	e1550003 	cmp	r5, r3
   1d984:	e5c41010 	strb	r1, [r4, #16]
   1d988:	e5843000 	str	r3, [r4]
   1d98c:	e5843008 	str	r3, [r4, #8]
   1d990:	e584300c 	str	r3, [r4, #12]
   1d994:	e5843014 	str	r3, [r4, #20]
   1d998:	0a00000e 	beq	1d9d8 <CMachineInfo::CMachineInfo()+0x7c>
   1d99c:	e595e000 	ldr	lr, [r5]
   1d9a0:	e5d5c004 	ldrb	ip, [r5, #4]
   1d9a4:	e5950008 	ldr	r0, [r5, #8]
   1d9a8:	e595100c 	ldr	r1, [r5, #12]
   1d9ac:	e5d52010 	ldrb	r2, [r5, #16]
   1d9b0:	e5953014 	ldr	r3, [r5, #20]
   1d9b4:	e584e000 	str	lr, [r4]
   1d9b8:	e5c4c004 	strb	ip, [r4, #4]
   1d9bc:	e5840008 	str	r0, [r4, #8]
   1d9c0:	e584100c 	str	r1, [r4, #12]
   1d9c4:	e5c42010 	strb	r2, [r4, #16]
   1d9c8:	e5843014 	str	r3, [r4, #20]
   1d9cc:	e1a00004 	mov	r0, r4
   1d9d0:	e28dd024 	add	sp, sp, #36	; 0x24
   1d9d4:	e8bd8030 	pop	{r4, r5, pc}
   1d9d8:	e28d000c 	add	r0, sp, #12
   1d9dc:	e5824000 	str	r4, [r2]
   1d9e0:	ebfff448 	bl	1ab08 <CBcmPropertyTags::CBcmPropertyTags()>
   1d9e4:	e3a03010 	mov	r3, #16
   1d9e8:	e58d5000 	str	r5, [sp]
   1d9ec:	e28d000c 	add	r0, sp, #12
   1d9f0:	e08d2003 	add	r2, sp, r3
   1d9f4:	e59f1128 	ldr	r1, [pc, #296]	; 1db24 <CMachineInfo::CMachineInfo()+0x1c8>
   1d9f8:	ebfff499 	bl	1ac64 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   1d9fc:	e3500000 	cmp	r0, #0
   1da00:	0a00000c 	beq	1da38 <CMachineInfo::CMachineInfo()+0xdc>
   1da04:	e59d101c 	ldr	r1, [sp, #28]
   1da08:	e2113502 	ands	r3, r1, #8388608	; 0x800000
   1da0c:	e5841000 	str	r1, [r4]
   1da10:	1a00000b 	bne	1da44 <CMachineInfo::CMachineInfo()+0xe8>
   1da14:	e3a02002 	mov	r2, #2
   1da18:	e59f0108 	ldr	r0, [pc, #264]	; 1db28 <CMachineInfo::CMachineInfo()+0x1cc>
   1da1c:	ea000000 	b	1da24 <CMachineInfo::CMachineInfo()+0xc8>
   1da20:	e7902203 	ldr	r2, [r0, r3, lsl #4]
   1da24:	e1510002 	cmp	r1, r2
   1da28:	0a000012 	beq	1da78 <CMachineInfo::CMachineInfo()+0x11c>
   1da2c:	e2833001 	add	r3, r3, #1
   1da30:	e3530011 	cmp	r3, #17
   1da34:	1afffff9 	bne	1da20 <CMachineInfo::CMachineInfo()+0xc4>
   1da38:	e28d000c 	add	r0, sp, #12
   1da3c:	ebfff437 	bl	1ab20 <CBcmPropertyTags::~CBcmPropertyTags()>
   1da40:	eaffffe1 	b	1d9cc <CMachineInfo::CMachineInfo()+0x70>
   1da44:	e1a00221 	lsr	r0, r1, #4
   1da48:	e1a03005 	mov	r3, r5
   1da4c:	e59f20d8 	ldr	r2, [pc, #216]	; 1db2c <CMachineInfo::CMachineInfo()+0x1d0>
   1da50:	e6ef0070 	uxtb	r0, r0
   1da54:	ea000000 	b	1da5c <CMachineInfo::CMachineInfo()+0x100>
   1da58:	e512500c 	ldr	r5, [r2, #-12]
   1da5c:	e1550000 	cmp	r5, r0
   1da60:	0a000011 	beq	1daac <CMachineInfo::CMachineInfo()+0x150>
   1da64:	e2833001 	add	r3, r3, #1
   1da68:	e353000c 	cmp	r3, #12
   1da6c:	e282200c 	add	r2, r2, #12
   1da70:	1afffff8 	bne	1da58 <CMachineInfo::CMachineInfo()+0xfc>
   1da74:	eaffffef 	b	1da38 <CMachineInfo::CMachineInfo()+0xdc>
   1da78:	e3a00001 	mov	r0, #1
   1da7c:	e3a01000 	mov	r1, #0
   1da80:	e59f20a8 	ldr	r2, [pc, #168]	; 1db30 <CMachineInfo::CMachineInfo()+0x1d4>
   1da84:	e5840008 	str	r0, [r4, #8]
   1da88:	e0823203 	add	r3, r2, r3, lsl #4
   1da8c:	e5d30094 	ldrb	r0, [r3, #148]	; 0x94
   1da90:	e5932098 	ldr	r2, [r3, #152]	; 0x98
   1da94:	e593309c 	ldr	r3, [r3, #156]	; 0x9c
   1da98:	e5c40004 	strb	r0, [r4, #4]
   1da9c:	e584200c 	str	r2, [r4, #12]
   1daa0:	e5843014 	str	r3, [r4, #20]
   1daa4:	e5c41010 	strb	r1, [r4, #16]
   1daa8:	eaffffe2 	b	1da38 <CMachineInfo::CMachineInfo()+0xdc>
   1daac:	e3a0cc01 	mov	ip, #256	; 0x100
   1dab0:	e59f2078 	ldr	r2, [pc, #120]	; 1db30 <CMachineInfo::CMachineInfo()+0x1d4>
   1dab4:	e0833083 	add	r3, r3, r3, lsl #1
   1dab8:	e0823103 	add	r3, r2, r3, lsl #2
   1dabc:	e1a00621 	lsr	r0, r1, #12
   1dac0:	e1a02a21 	lsr	r2, r1, #20
   1dac4:	e2022007 	and	r2, r2, #7
   1dac8:	e200000f 	and	r0, r0, #15
   1dacc:	e5d3e004 	ldrb	lr, [r3, #4]
   1dad0:	e3500002 	cmp	r0, #2
   1dad4:	e5935008 	ldr	r5, [r3, #8]
   1dad8:	e201300f 	and	r3, r1, #15
   1dadc:	e1a0121c 	lsl	r1, ip, r2
   1dae0:	e5841014 	str	r1, [r4, #20]
   1dae4:	83a01003 	movhi	r1, #3
   1dae8:	e5c40010 	strb	r0, [r4, #16]
   1daec:	85c41010 	strbhi	r1, [r4, #16]
   1daf0:	e3520000 	cmp	r2, #0
   1daf4:	035e0003 	cmpeq	lr, #3
   1daf8:	e2833001 	add	r3, r3, #1
   1dafc:	e5c4e004 	strb	lr, [r4, #4]
   1db00:	e5845008 	str	r5, [r4, #8]
   1db04:	e584300c 	str	r3, [r4, #12]
   1db08:	1affffca 	bne	1da38 <CMachineInfo::CMachineInfo()+0xdc>
   1db0c:	e3530001 	cmp	r3, #1
   1db10:	13a03002 	movne	r3, #2
   1db14:	03a03001 	moveq	r3, #1
   1db18:	e5c43004 	strb	r3, [r4, #4]
   1db1c:	eaffffc5 	b	1da38 <CMachineInfo::CMachineInfo()+0xdc>
   1db20:	0002b968 	.word	0x0002b968
   1db24:	00010002 	.word	0x00010002
   1db28:	00029648 	.word	0x00029648
   1db2c:	000295c4 	.word	0x000295c4
   1db30:	000295b8 	.word	0x000295b8

0001db34 <CMachineInfo::~CMachineInfo()>:
   1db34:	e3a0200e 	mov	r2, #14
   1db38:	e59f3014 	ldr	r3, [pc, #20]	; 1db54 <CMachineInfo::~CMachineInfo()+0x20>
   1db3c:	e5c02004 	strb	r2, [r0, #4]
   1db40:	e5932000 	ldr	r2, [r3]
   1db44:	e1500002 	cmp	r0, r2
   1db48:	03a02000 	moveq	r2, #0
   1db4c:	05832000 	streq	r2, [r3]
   1db50:	e12fff1e 	bx	lr
   1db54:	0002b968 	.word	0x0002b968

0001db58 <CMachineInfo::GetMachineModel() const>:
   1db58:	e5d00004 	ldrb	r0, [r0, #4]
   1db5c:	e12fff1e 	bx	lr

0001db60 <CMachineInfo::GetMachineName() const>:
   1db60:	e5d02004 	ldrb	r2, [r0, #4]
   1db64:	e59f3008 	ldr	r3, [pc, #8]	; 1db74 <CMachineInfo::GetMachineName() const+0x14>
   1db68:	e0833102 	add	r3, r3, r2, lsl #2
   1db6c:	e59301a0 	ldr	r0, [r3, #416]	; 0x1a0
   1db70:	e12fff1e 	bx	lr
   1db74:	000295b8 	.word	0x000295b8

0001db78 <CMachineInfo::GetModelMajor() const>:
   1db78:	e5900008 	ldr	r0, [r0, #8]
   1db7c:	e12fff1e 	bx	lr

0001db80 <CMachineInfo::GetModelRevision() const>:
   1db80:	e590000c 	ldr	r0, [r0, #12]
   1db84:	e12fff1e 	bx	lr

0001db88 <CMachineInfo::GetSoCType() const>:
   1db88:	e5d00010 	ldrb	r0, [r0, #16]
   1db8c:	e12fff1e 	bx	lr

0001db90 <CMachineInfo::GetRAMSize() const>:
   1db90:	e5900014 	ldr	r0, [r0, #20]
   1db94:	e12fff1e 	bx	lr

0001db98 <CMachineInfo::GetSoCName() const>:
   1db98:	e5d02010 	ldrb	r2, [r0, #16]
   1db9c:	e59f3008 	ldr	r3, [pc, #8]	; 1dbac <CMachineInfo::GetSoCName() const+0x14>
   1dba0:	e0833102 	add	r3, r3, r2, lsl #2
   1dba4:	e59301dc 	ldr	r0, [r3, #476]	; 0x1dc
   1dba8:	e12fff1e 	bx	lr
   1dbac:	000295b8 	.word	0x000295b8

0001dbb0 <CMachineInfo::GetRevisionRaw() const>:
   1dbb0:	e5900000 	ldr	r0, [r0]
   1dbb4:	e12fff1e 	bx	lr

0001dbb8 <CMachineInfo::GetClockRate(unsigned int) const>:
   1dbb8:	e92d4070 	push	{r4, r5, r6, lr}
   1dbbc:	e24dd020 	sub	sp, sp, #32
   1dbc0:	e1a06000 	mov	r6, r0
   1dbc4:	e28d0008 	add	r0, sp, #8
   1dbc8:	e1a05001 	mov	r5, r1
   1dbcc:	ebfff3cd 	bl	1ab08 <CBcmPropertyTags::CBcmPropertyTags()>
   1dbd0:	e3a03004 	mov	r3, #4
   1dbd4:	e28d0008 	add	r0, sp, #8
   1dbd8:	e58d3000 	str	r3, [sp]
   1dbdc:	e28d200c 	add	r2, sp, #12
   1dbe0:	e3a03014 	mov	r3, #20
   1dbe4:	e59f1078 	ldr	r1, [pc, #120]	; 1dc64 <CMachineInfo::GetClockRate(unsigned int) const+0xac>
   1dbe8:	e58d5018 	str	r5, [sp, #24]
   1dbec:	ebfff41c 	bl	1ac64 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   1dbf0:	e2504000 	subs	r4, r0, #0
   1dbf4:	1a00000e 	bne	1dc34 <CMachineInfo::GetClockRate(unsigned int) const+0x7c>
   1dbf8:	e3550002 	cmp	r5, #2
   1dbfc:	0a00000e 	beq	1dc3c <CMachineInfo::GetClockRate(unsigned int) const+0x84>
   1dc00:	e3550004 	cmp	r5, #4
   1dc04:	0a000010 	beq	1dc4c <CMachineInfo::GetClockRate(unsigned int) const+0x94>
   1dc08:	e3550001 	cmp	r5, #1
   1dc0c:	0a00000c 	beq	1dc44 <CMachineInfo::GetClockRate(unsigned int) const+0x8c>
   1dc10:	e59f2050 	ldr	r2, [pc, #80]	; 1dc68 <CMachineInfo::GetClockRate(unsigned int) const+0xb0>
   1dc14:	e59f1050 	ldr	r1, [pc, #80]	; 1dc6c <CMachineInfo::GetClockRate(unsigned int) const+0xb4>
   1dc18:	e59f0050 	ldr	r0, [pc, #80]	; 1dc70 <CMachineInfo::GetClockRate(unsigned int) const+0xb8>
   1dc1c:	ebfff395 	bl	1aa78 <assertion_failed>
   1dc20:	e28d0008 	add	r0, sp, #8
   1dc24:	ebfff3bd 	bl	1ab20 <CBcmPropertyTags::~CBcmPropertyTags()>
   1dc28:	e1a00004 	mov	r0, r4
   1dc2c:	e28dd020 	add	sp, sp, #32
   1dc30:	e8bd8070 	pop	{r4, r5, r6, pc}
   1dc34:	e59d401c 	ldr	r4, [sp, #28]
   1dc38:	eafffff8 	b	1dc20 <CMachineInfo::GetClockRate(unsigned int) const+0x68>
   1dc3c:	e59f4030 	ldr	r4, [pc, #48]	; 1dc74 <CMachineInfo::GetClockRate(unsigned int) const+0xbc>
   1dc40:	eafffff6 	b	1dc20 <CMachineInfo::GetClockRate(unsigned int) const+0x68>
   1dc44:	e59f402c 	ldr	r4, [pc, #44]	; 1dc78 <CMachineInfo::GetClockRate(unsigned int) const+0xc0>
   1dc48:	eafffff4 	b	1dc20 <CMachineInfo::GetClockRate(unsigned int) const+0x68>
   1dc4c:	e5962008 	ldr	r2, [r6, #8]
   1dc50:	e59f3024 	ldr	r3, [pc, #36]	; 1dc7c <CMachineInfo::GetClockRate(unsigned int) const+0xc4>
   1dc54:	e3520002 	cmp	r2, #2
   1dc58:	e59f4020 	ldr	r4, [pc, #32]	; 1dc80 <CMachineInfo::GetClockRate(unsigned int) const+0xc8>
   1dc5c:	81a04003 	movhi	r4, r3
   1dc60:	eaffffee 	b	1dc20 <CMachineInfo::GetClockRate(unsigned int) const+0x68>
   1dc64:	00030002 	.word	0x00030002
   1dc68:	00000115 	.word	0x00000115
   1dc6c:	000297a4 	.word	0x000297a4
   1dc70:	00025034 	.word	0x00025034
   1dc74:	02dc6c00 	.word	0x02dc6c00
   1dc78:	05f5e100 	.word	0x05f5e100
   1dc7c:	11e1a300 	.word	0x11e1a300
   1dc80:	0ee6b280 	.word	0x0ee6b280

0001dc84 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>:
   1dc84:	e3510036 	cmp	r1, #54	; 0x36
   1dc88:	0a00000d 	beq	1dcc4 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x40>
   1dc8c:	e3510037 	cmp	r1, #55	; 0x37
   1dc90:	1a000004 	bne	1dca8 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x24>
   1dc94:	e5d00004 	ldrb	r0, [r0, #4]
   1dc98:	e3500003 	cmp	r0, #3
   1dc9c:	c3a00028 	movgt	r0, #40	; 0x28
   1dca0:	d3a0002d 	movle	r0, #45	; 0x2d
   1dca4:	e12fff1e 	bx	lr
   1dca8:	e92d4010 	push	{r4, lr}
   1dcac:	e59f2038 	ldr	r2, [pc, #56]	; 1dcec <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x68>
   1dcb0:	e59f1038 	ldr	r1, [pc, #56]	; 1dcf0 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x6c>
   1dcb4:	e59f0038 	ldr	r0, [pc, #56]	; 1dcf4 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x70>
   1dcb8:	ebfff36e 	bl	1aa78 <assertion_failed>
   1dcbc:	e3a00000 	mov	r0, #0
   1dcc0:	e8bd8010 	pop	{r4, pc}
   1dcc4:	e5d03004 	ldrb	r3, [r0, #4]
   1dcc8:	e3530003 	cmp	r3, #3
   1dccc:	ca000001 	bgt	1dcd8 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x54>
   1dcd0:	e3a00028 	mov	r0, #40	; 0x28
   1dcd4:	e12fff1e 	bx	lr
   1dcd8:	e5900008 	ldr	r0, [r0, #8]
   1dcdc:	e3500002 	cmp	r0, #2
   1dce0:	93a0002d 	movls	r0, #45	; 0x2d
   1dce4:	83a00029 	movhi	r0, #41	; 0x29
   1dce8:	e12fff1e 	bx	lr
   1dcec:	0000014e 	.word	0x0000014e
   1dcf0:	000297a4 	.word	0x000297a4
   1dcf4:	00025034 	.word	0x00025034

0001dcf8 <CMachineInfo::GetDevice(TDeviceId) const>:
   1dcf8:	e3510000 	cmp	r1, #0
   1dcfc:	1a000003 	bne	1dd10 <CMachineInfo::GetDevice(TDeviceId) const+0x18>
   1dd00:	e5d00004 	ldrb	r0, [r0, #4]
   1dd04:	e2500001 	subs	r0, r0, #1
   1dd08:	13a00001 	movne	r0, #1
   1dd0c:	e12fff1e 	bx	lr
   1dd10:	e92d4010 	push	{r4, lr}
   1dd14:	e59f2010 	ldr	r2, [pc, #16]	; 1dd2c <CMachineInfo::GetDevice(TDeviceId) const+0x34>
   1dd18:	e59f1010 	ldr	r1, [pc, #16]	; 1dd30 <CMachineInfo::GetDevice(TDeviceId) const+0x38>
   1dd1c:	e59f0010 	ldr	r0, [pc, #16]	; 1dd34 <CMachineInfo::GetDevice(TDeviceId) const+0x3c>
   1dd20:	ebfff354 	bl	1aa78 <assertion_failed>
   1dd24:	e3a00000 	mov	r0, #0
   1dd28:	e8bd8010 	pop	{r4, pc}
   1dd2c:	00000167 	.word	0x00000167
   1dd30:	000297a4 	.word	0x000297a4
   1dd34:	00025034 	.word	0x00025034

0001dd38 <CMachineInfo::Get()>:
   1dd38:	e92d4010 	push	{r4, lr}
   1dd3c:	e59f4020 	ldr	r4, [pc, #32]	; 1dd64 <CMachineInfo::Get()+0x2c>
   1dd40:	e5940000 	ldr	r0, [r4]
   1dd44:	e3500000 	cmp	r0, #0
   1dd48:	18bd8010 	popne	{r4, pc}
   1dd4c:	e3a02e17 	mov	r2, #368	; 0x170
   1dd50:	e59f1010 	ldr	r1, [pc, #16]	; 1dd68 <CMachineInfo::Get()+0x30>
   1dd54:	e59f0010 	ldr	r0, [pc, #16]	; 1dd6c <CMachineInfo::Get()+0x34>
   1dd58:	ebfff346 	bl	1aa78 <assertion_failed>
   1dd5c:	e5940000 	ldr	r0, [r4]
   1dd60:	e8bd8010 	pop	{r4, pc}
   1dd64:	0002b968 	.word	0x0002b968
   1dd68:	000297a4 	.word	0x000297a4
   1dd6c:	0002440c 	.word	0x0002440c

0001dd70 <CScreenDevice::~CScreenDevice()>:
   1dd70:	e5d0200c 	ldrb	r2, [r0, #12]
   1dd74:	e59f3068 	ldr	r3, [pc, #104]	; 1dde4 <CScreenDevice::~CScreenDevice()+0x74>
   1dd78:	e3520000 	cmp	r2, #0
   1dd7c:	e92d4070 	push	{r4, r5, r6, lr}
   1dd80:	e1a04000 	mov	r4, r0
   1dd84:	e5803000 	str	r3, [r0]
   1dd88:	0a000003 	beq	1dd9c <CScreenDevice::~CScreenDevice()+0x2c>
   1dd8c:	e5900018 	ldr	r0, [r0, #24]
   1dd90:	e3500000 	cmp	r0, #0
   1dd94:	0a000000 	beq	1dd9c <CScreenDevice::~CScreenDevice()+0x2c>
   1dd98:	eb0013fe 	bl	22d98 <operator delete[](void*)>
   1dd9c:	e3a03000 	mov	r3, #0
   1dda0:	e5945010 	ldr	r5, [r4, #16]
   1dda4:	e5843018 	str	r3, [r4, #24]
   1dda8:	e1550003 	cmp	r5, r3
   1ddac:	0a000004 	beq	1ddc4 <CScreenDevice::~CScreenDevice()+0x54>
   1ddb0:	e1a00005 	mov	r0, r5
   1ddb4:	eb001605 	bl	235d0 <CBcmFrameBuffer::~CBcmFrameBuffer()>
   1ddb8:	e1a00005 	mov	r0, r5
   1ddbc:	e3a01094 	mov	r1, #148	; 0x94
   1ddc0:	eb0013f5 	bl	22d9c <operator delete(void*, unsigned int)>
   1ddc4:	e3a03000 	mov	r3, #0
   1ddc8:	e2840014 	add	r0, r4, #20
   1ddcc:	e5843010 	str	r3, [r4, #16]
   1ddd0:	eb001706 	bl	239f0 <CCharGenerator::~CCharGenerator()>
   1ddd4:	e1a00004 	mov	r0, r4
   1ddd8:	ebfff522 	bl	1b268 <CDevice::~CDevice()>
   1dddc:	e1a00004 	mov	r0, r4
   1dde0:	e8bd8070 	pop	{r4, r5, r6, pc}
   1dde4:	000298f8 	.word	0x000298f8

0001dde8 <CScreenDevice::~CScreenDevice()>:
   1dde8:	e92d4010 	push	{r4, lr}
   1ddec:	e1a04000 	mov	r4, r0
   1ddf0:	ebffffde 	bl	1dd70 <CScreenDevice::~CScreenDevice()>
   1ddf4:	e1a00004 	mov	r0, r4
   1ddf8:	e3a0105c 	mov	r1, #92	; 0x5c
   1ddfc:	eb0013e6 	bl	22d9c <operator delete(void*, unsigned int)>
   1de00:	e1a00004 	mov	r0, r4
   1de04:	e8bd8010 	pop	{r4, pc}

0001de08 <CScreenDevice::InvertCursor() [clone .part.6]>:
   1de08:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1de0c:	e2806014 	add	r6, r0, #20
   1de10:	e1a05000 	mov	r5, r0
   1de14:	e1a00006 	mov	r0, r6
   1de18:	eb0016f9 	bl	23a04 <CCharGenerator::GetUnderline() const>
   1de1c:	e3a08000 	mov	r8, #0
   1de20:	e1a07000 	mov	r7, r0
   1de24:	e1a00006 	mov	r0, r6
   1de28:	eb0016f3 	bl	239fc <CCharGenerator::GetCharHeight() const>
   1de2c:	e1500007 	cmp	r0, r7
   1de30:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
   1de34:	e3a04000 	mov	r4, #0
   1de38:	ea000013 	b	1de8c <CScreenDevice::InvertCursor() [clone .part.6]+0x84>
   1de3c:	e595303c 	ldr	r3, [r5, #60]	; 0x3c
   1de40:	e5952024 	ldr	r2, [r5, #36]	; 0x24
   1de44:	e0843003 	add	r3, r4, r3
   1de48:	e1530002 	cmp	r3, r2
   1de4c:	2a00000d 	bcs	1de88 <CScreenDevice::InvertCursor() [clone .part.6]+0x80>
   1de50:	e5952040 	ldr	r2, [r5, #64]	; 0x40
   1de54:	e5951028 	ldr	r1, [r5, #40]	; 0x28
   1de58:	e0872002 	add	r2, r7, r2
   1de5c:	e1520001 	cmp	r2, r1
   1de60:	2a000008 	bcs	1de88 <CScreenDevice::InvertCursor() [clone .part.6]+0x80>
   1de64:	e5950020 	ldr	r0, [r5, #32]
   1de68:	e5951018 	ldr	r1, [r5, #24]
   1de6c:	e0233290 	mla	r3, r0, r2, r3
   1de70:	e1a03083 	lsl	r3, r3, #1
   1de74:	e19120b3 	ldrh	r2, [r1, r3]
   1de78:	e3520000 	cmp	r2, #0
   1de7c:	01d524b6 	ldrheq	r2, [r5, #70]	; 0x46
   1de80:	118180b3 	strhne	r8, [r1, r3]
   1de84:	018120b3 	strheq	r2, [r1, r3]
   1de88:	e2844001 	add	r4, r4, #1
   1de8c:	e1a00006 	mov	r0, r6
   1de90:	eb0016d7 	bl	239f4 <CCharGenerator::GetCharWidth() const>
   1de94:	e1500004 	cmp	r0, r4
   1de98:	8affffe7 	bhi	1de3c <CScreenDevice::InvertCursor() [clone .part.6]+0x34>
   1de9c:	e2877001 	add	r7, r7, #1
   1dea0:	eaffffdf 	b	1de24 <CScreenDevice::InvertCursor() [clone .part.6]+0x1c>

0001dea4 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool)>:
   1dea4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1dea8:	e1a04000 	mov	r4, r0
   1deac:	e3a05000 	mov	r5, #0
   1deb0:	e1a07002 	mov	r7, r2
   1deb4:	e1a06003 	mov	r6, r3
   1deb8:	e1a08001 	mov	r8, r1
   1debc:	ebfff4f5 	bl	1b298 <CDevice::CDevice()>
   1dec0:	e59f0050 	ldr	r0, [pc, #80]	; 1df18 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool)+0x74>
   1dec4:	e5848004 	str	r8, [r4, #4]
   1dec8:	e5840000 	str	r0, [r4]
   1decc:	e5847008 	str	r7, [r4, #8]
   1ded0:	e5c4600c 	strb	r6, [r4, #12]
   1ded4:	e5845010 	str	r5, [r4, #16]
   1ded8:	e2840014 	add	r0, r4, #20
   1dedc:	eb0016c0 	bl	239e4 <CCharGenerator::CCharGenerator()>
   1dee0:	e3a03001 	mov	r3, #1
   1dee4:	e3e02020 	mvn	r2, #32
   1dee8:	e5845018 	str	r5, [r4, #24]
   1deec:	e5845030 	str	r5, [r4, #48]	; 0x30
   1def0:	e5845034 	str	r5, [r4, #52]	; 0x34
   1def4:	e584503c 	str	r5, [r4, #60]	; 0x3c
   1def8:	e5845040 	str	r5, [r4, #64]	; 0x40
   1defc:	e5c45048 	strb	r5, [r4, #72]	; 0x48
   1df00:	e5c45054 	strb	r5, [r4, #84]	; 0x54
   1df04:	e1c424b6 	strh	r2, [r4, #70]	; 0x46
   1df08:	e5c43044 	strb	r3, [r4, #68]	; 0x44
   1df0c:	e5843058 	str	r3, [r4, #88]	; 0x58
   1df10:	e1a00004 	mov	r0, r4
   1df14:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1df18:	000298f8 	.word	0x000298f8

0001df1c <CScreenDevice::GetWidth() const>:
   1df1c:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   1df20:	e12fff1e 	bx	lr

0001df24 <CScreenDevice::GetHeight() const>:
   1df24:	e5900028 	ldr	r0, [r0, #40]	; 0x28
   1df28:	e12fff1e 	bx	lr

0001df2c <CScreenDevice::GetColumns() const>:
   1df2c:	e92d4010 	push	{r4, lr}
   1df30:	e2800014 	add	r0, r0, #20
   1df34:	e5904010 	ldr	r4, [r0, #16]
   1df38:	eb0016ad 	bl	239f4 <CCharGenerator::GetCharWidth() const>
   1df3c:	e1a01000 	mov	r1, r0
   1df40:	e1a00004 	mov	r0, r4
   1df44:	eb0018e4 	bl	242dc <__aeabi_uidiv>
   1df48:	e8bd8010 	pop	{r4, pc}

0001df4c <CScreenDevice::GetRows() const>:
   1df4c:	e92d4010 	push	{r4, lr}
   1df50:	e2800014 	add	r0, r0, #20
   1df54:	e5904018 	ldr	r4, [r0, #24]
   1df58:	eb0016a7 	bl	239fc <CCharGenerator::GetCharHeight() const>
   1df5c:	e1a01000 	mov	r1, r0
   1df60:	e1a00004 	mov	r0, r4
   1df64:	eb0018dc 	bl	242dc <__aeabi_uidiv>
   1df68:	e8bd8010 	pop	{r4, pc}

0001df6c <CScreenDevice::GetStatus()>:
   1df6c:	e591c018 	ldr	ip, [r1, #24]
   1df70:	e591201c 	ldr	r2, [r1, #28]
   1df74:	e92d4070 	push	{r4, r5, r6, lr}
   1df78:	e580c000 	str	ip, [r0]
   1df7c:	e5915030 	ldr	r5, [r1, #48]	; 0x30
   1df80:	e5914034 	ldr	r4, [r1, #52]	; 0x34
   1df84:	e591e038 	ldr	lr, [r1, #56]	; 0x38
   1df88:	e591c03c 	ldr	ip, [r1, #60]	; 0x3c
   1df8c:	e5802004 	str	r2, [r0, #4]
   1df90:	e5912040 	ldr	r2, [r1, #64]	; 0x40
   1df94:	e5805008 	str	r5, [r0, #8]
   1df98:	e5d16044 	ldrb	r6, [r1, #68]	; 0x44
   1df9c:	e580400c 	str	r4, [r0, #12]
   1dfa0:	e1d154b6 	ldrh	r5, [r1, #70]	; 0x46
   1dfa4:	e580e010 	str	lr, [r0, #16]
   1dfa8:	e5d14048 	ldrb	r4, [r1, #72]	; 0x48
   1dfac:	e580c014 	str	ip, [r0, #20]
   1dfb0:	e591e04c 	ldr	lr, [r1, #76]	; 0x4c
   1dfb4:	e5802018 	str	r2, [r0, #24]
   1dfb8:	e591c050 	ldr	ip, [r1, #80]	; 0x50
   1dfbc:	e5d12054 	ldrb	r2, [r1, #84]	; 0x54
   1dfc0:	e5c0601c 	strb	r6, [r0, #28]
   1dfc4:	e1c051be 	strh	r5, [r0, #30]
   1dfc8:	e5c04020 	strb	r4, [r0, #32]
   1dfcc:	e580e024 	str	lr, [r0, #36]	; 0x24
   1dfd0:	e580c028 	str	ip, [r0, #40]	; 0x28
   1dfd4:	e5c0202c 	strb	r2, [r0, #44]	; 0x2c
   1dfd8:	e8bd8070 	pop	{r4, r5, r6, pc}

0001dfdc <CScreenDevice::SetStatus(TScreenStatus const&)>:
   1dfdc:	e590201c 	ldr	r2, [r0, #28]
   1dfe0:	e5913004 	ldr	r3, [r1, #4]
   1dfe4:	e1520003 	cmp	r2, r3
   1dfe8:	0a000001 	beq	1dff4 <CScreenDevice::SetStatus(TScreenStatus const&)+0x18>
   1dfec:	e3a00000 	mov	r0, #0
   1dff0:	e12fff1e 	bx	lr
   1dff4:	e590c020 	ldr	ip, [r0, #32]
   1dff8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1dffc:	e15c0003 	cmp	ip, r3
   1e000:	1afffff9 	bne	1dfec <CScreenDevice::SetStatus(TScreenStatus const&)+0x10>
   1e004:	e92d4070 	push	{r4, r5, r6, lr}
   1e008:	e1a04000 	mov	r4, r0
   1e00c:	e5900058 	ldr	r0, [r0, #88]	; 0x58
   1e010:	e1a05001 	mov	r5, r1
   1e014:	e3500000 	cmp	r0, #0
   1e018:	1a000023 	bne	1e0ac <CScreenDevice::SetStatus(TScreenStatus const&)+0xd0>
   1e01c:	e5d43054 	ldrb	r3, [r4, #84]	; 0x54
   1e020:	e3530000 	cmp	r3, #0
   1e024:	1a000002 	bne	1e034 <CScreenDevice::SetStatus(TScreenStatus const&)+0x58>
   1e028:	e5d1302c 	ldrb	r3, [r1, #44]	; 0x2c
   1e02c:	e3530000 	cmp	r3, #0
   1e030:	0a000001 	beq	1e03c <CScreenDevice::SetStatus(TScreenStatus const&)+0x60>
   1e034:	e3a00000 	mov	r0, #0
   1e038:	e8bd8070 	pop	{r4, r5, r6, pc}
   1e03c:	e5951000 	ldr	r1, [r5]
   1e040:	e5940018 	ldr	r0, [r4, #24]
   1e044:	eb001054 	bl	2219c <memcpy>
   1e048:	e5940058 	ldr	r0, [r4, #88]	; 0x58
   1e04c:	e2851008 	add	r1, r5, #8
   1e050:	e891004e 	ldm	r1, {r1, r2, r3, r6}
   1e054:	e595e018 	ldr	lr, [r5, #24]
   1e058:	e5d5c01c 	ldrb	ip, [r5, #28]
   1e05c:	e3500000 	cmp	r0, #0
   1e060:	e5841030 	str	r1, [r4, #48]	; 0x30
   1e064:	e1d501be 	ldrh	r0, [r5, #30]
   1e068:	e5d51020 	ldrb	r1, [r5, #32]
   1e06c:	e5842034 	str	r2, [r4, #52]	; 0x34
   1e070:	e5843038 	str	r3, [r4, #56]	; 0x38
   1e074:	e5952024 	ldr	r2, [r5, #36]	; 0x24
   1e078:	e5953028 	ldr	r3, [r5, #40]	; 0x28
   1e07c:	e584603c 	str	r6, [r4, #60]	; 0x3c
   1e080:	e584e040 	str	lr, [r4, #64]	; 0x40
   1e084:	e5c4c044 	strb	ip, [r4, #68]	; 0x44
   1e088:	e1c404b6 	strh	r0, [r4, #70]	; 0x46
   1e08c:	e5c41048 	strb	r1, [r4, #72]	; 0x48
   1e090:	e584204c 	str	r2, [r4, #76]	; 0x4c
   1e094:	e5843050 	str	r3, [r4, #80]	; 0x50
   1e098:	1a000010 	bne	1e0e0 <CScreenDevice::SetStatus(TScreenStatus const&)+0x104>
   1e09c:	e3a03000 	mov	r3, #0
   1e0a0:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   1e0a4:	e3a00001 	mov	r0, #1
   1e0a8:	e8bd8070 	pop	{r4, r5, r6, pc}
   1e0ac:	eb0012dc 	bl	22c24 <EnterCritical>
   1e0b0:	e5d43054 	ldrb	r3, [r4, #84]	; 0x54
   1e0b4:	e3530000 	cmp	r3, #0
   1e0b8:	1a000003 	bne	1e0cc <CScreenDevice::SetStatus(TScreenStatus const&)+0xf0>
   1e0bc:	e5d5302c 	ldrb	r3, [r5, #44]	; 0x2c
   1e0c0:	e3530000 	cmp	r3, #0
   1e0c4:	0594201c 	ldreq	r2, [r4, #28]
   1e0c8:	0affffdb 	beq	1e03c <CScreenDevice::SetStatus(TScreenStatus const&)+0x60>
   1e0cc:	e5943058 	ldr	r3, [r4, #88]	; 0x58
   1e0d0:	e3530000 	cmp	r3, #0
   1e0d4:	0affffd6 	beq	1e034 <CScreenDevice::SetStatus(TScreenStatus const&)+0x58>
   1e0d8:	eb0012fe 	bl	22cd8 <LeaveCritical>
   1e0dc:	eaffffd4 	b	1e034 <CScreenDevice::SetStatus(TScreenStatus const&)+0x58>
   1e0e0:	eb0012fc 	bl	22cd8 <LeaveCritical>
   1e0e4:	eaffffec 	b	1e09c <CScreenDevice::SetStatus(TScreenStatus const&)+0xc0>

0001e0e8 <CScreenDevice::CarriageReturn()>:
   1e0e8:	e3a03000 	mov	r3, #0
   1e0ec:	e580303c 	str	r3, [r0, #60]	; 0x3c
   1e0f0:	e12fff1e 	bx	lr

0001e0f4 <CScreenDevice::CursorHome()>:
   1e0f4:	e3a02000 	mov	r2, #0
   1e0f8:	e5903034 	ldr	r3, [r0, #52]	; 0x34
   1e0fc:	e580203c 	str	r2, [r0, #60]	; 0x3c
   1e100:	e5803040 	str	r3, [r0, #64]	; 0x40
   1e104:	e12fff1e 	bx	lr

0001e108 <CScreenDevice::CursorLeft()>:
   1e108:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
   1e10c:	e92d4070 	push	{r4, r5, r6, lr}
   1e110:	e3530000 	cmp	r3, #0
   1e114:	e1a04000 	mov	r4, r0
   1e118:	1a00000f 	bne	1e15c <CScreenDevice::CursorLeft()+0x54>
   1e11c:	e5902040 	ldr	r2, [r0, #64]	; 0x40
   1e120:	e5903034 	ldr	r3, [r0, #52]	; 0x34
   1e124:	e1520003 	cmp	r2, r3
   1e128:	98bd8070 	popls	{r4, r5, r6, pc}
   1e12c:	e2806014 	add	r6, r0, #20
   1e130:	e1a00006 	mov	r0, r6
   1e134:	e5945024 	ldr	r5, [r4, #36]	; 0x24
   1e138:	eb00162d 	bl	239f4 <CCharGenerator::GetCharWidth() const>
   1e13c:	e0450000 	sub	r0, r5, r0
   1e140:	e584003c 	str	r0, [r4, #60]	; 0x3c
   1e144:	e1a00006 	mov	r0, r6
   1e148:	eb00162b 	bl	239fc <CCharGenerator::GetCharHeight() const>
   1e14c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   1e150:	e0430000 	sub	r0, r3, r0
   1e154:	e5840040 	str	r0, [r4, #64]	; 0x40
   1e158:	e8bd8070 	pop	{r4, r5, r6, pc}
   1e15c:	e2800014 	add	r0, r0, #20
   1e160:	eb001623 	bl	239f4 <CCharGenerator::GetCharWidth() const>
   1e164:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
   1e168:	e0430000 	sub	r0, r3, r0
   1e16c:	e584003c 	str	r0, [r4, #60]	; 0x3c
   1e170:	e8bd8070 	pop	{r4, r5, r6, pc}

0001e174 <CScreenDevice::CursorMove(unsigned int, unsigned int)>:
   1e174:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1e178:	e2806014 	add	r6, r0, #20
   1e17c:	e1a04002 	mov	r4, r2
   1e180:	e1a05000 	mov	r5, r0
   1e184:	e1a00006 	mov	r0, r6
   1e188:	e1a07001 	mov	r7, r1
   1e18c:	eb001618 	bl	239f4 <CCharGenerator::GetCharWidth() const>
   1e190:	e2444001 	sub	r4, r4, #1
   1e194:	e0040490 	mul	r4, r0, r4
   1e198:	e1a00006 	mov	r0, r6
   1e19c:	eb001616 	bl	239fc <CCharGenerator::GetCharHeight() const>
   1e1a0:	e5953024 	ldr	r3, [r5, #36]	; 0x24
   1e1a4:	e1540003 	cmp	r4, r3
   1e1a8:	28bd81f0 	popcs	{r4, r5, r6, r7, r8, pc}
   1e1ac:	e2477001 	sub	r7, r7, #1
   1e1b0:	e0000790 	mul	r0, r0, r7
   1e1b4:	e5953034 	ldr	r3, [r5, #52]	; 0x34
   1e1b8:	e1500003 	cmp	r0, r3
   1e1bc:	38bd81f0 	popcc	{r4, r5, r6, r7, r8, pc}
   1e1c0:	e5953038 	ldr	r3, [r5, #56]	; 0x38
   1e1c4:	e1500003 	cmp	r0, r3
   1e1c8:	3585403c 	strcc	r4, [r5, #60]	; 0x3c
   1e1cc:	35850040 	strcc	r0, [r5, #64]	; 0x40
   1e1d0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0001e1d4 <CScreenDevice::CursorUp()>:
   1e1d4:	e5902040 	ldr	r2, [r0, #64]	; 0x40
   1e1d8:	e5903034 	ldr	r3, [r0, #52]	; 0x34
   1e1dc:	e1520003 	cmp	r2, r3
   1e1e0:	912fff1e 	bxls	lr
   1e1e4:	e92d4010 	push	{r4, lr}
   1e1e8:	e1a04000 	mov	r4, r0
   1e1ec:	e2800014 	add	r0, r0, #20
   1e1f0:	eb001601 	bl	239fc <CCharGenerator::GetCharHeight() const>
   1e1f4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   1e1f8:	e0430000 	sub	r0, r3, r0
   1e1fc:	e5840040 	str	r0, [r4, #64]	; 0x40
   1e200:	e8bd8010 	pop	{r4, pc}

0001e204 <CScreenDevice::DeleteChars(unsigned int)>:
   1e204:	e12fff1e 	bx	lr

0001e208 <CScreenDevice::DeleteLines(unsigned int)>:
   1e208:	e12fff1e 	bx	lr

0001e20c <CScreenDevice::InsertLines(unsigned int)>:
   1e20c:	e12fff1e 	bx	lr

0001e210 <CScreenDevice::InsertMode(bool)>:
   1e210:	e5c01048 	strb	r1, [r0, #72]	; 0x48
   1e214:	e12fff1e 	bx	lr

0001e218 <CScreenDevice::ReverseScroll()>:
   1e218:	e12fff1e 	bx	lr

0001e21c <CScreenDevice::SetCursorMode(bool)>:
   1e21c:	e5c01044 	strb	r1, [r0, #68]	; 0x44
   1e220:	e12fff1e 	bx	lr

0001e224 <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>:
   1e224:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1e228:	e2807014 	add	r7, r0, #20
   1e22c:	e1a06000 	mov	r6, r0
   1e230:	e1a04001 	mov	r4, r1
   1e234:	e1a00007 	mov	r0, r7
   1e238:	e1a05002 	mov	r5, r2
   1e23c:	eb0015ee 	bl	239fc <CCharGenerator::GetCharHeight() const>
   1e240:	e2444001 	sub	r4, r4, #1
   1e244:	e0040490 	mul	r4, r0, r4
   1e248:	e1a00007 	mov	r0, r7
   1e24c:	eb0015ea 	bl	239fc <CCharGenerator::GetCharHeight() const>
   1e250:	e0000095 	mul	r0, r5, r0
   1e254:	e596202c 	ldr	r2, [r6, #44]	; 0x2c
   1e258:	e3500000 	cmp	r0, #0
   1e25c:	11540002 	cmpne	r4, r2
   1e260:	33a03001 	movcc	r3, #1
   1e264:	23a03000 	movcs	r3, #0
   1e268:	e1500002 	cmp	r0, r2
   1e26c:	83a03000 	movhi	r3, #0
   1e270:	92033001 	andls	r3, r3, #1
   1e274:	e1540000 	cmp	r4, r0
   1e278:	23a03000 	movcs	r3, #0
   1e27c:	32033001 	andcc	r3, r3, #1
   1e280:	e3530000 	cmp	r3, #0
   1e284:	e3a03000 	mov	r3, #0
   1e288:	05964034 	ldreq	r4, [r6, #52]	; 0x34
   1e28c:	15864034 	strne	r4, [r6, #52]	; 0x34
   1e290:	15860038 	strne	r0, [r6, #56]	; 0x38
   1e294:	e5864040 	str	r4, [r6, #64]	; 0x40
   1e298:	e586303c 	str	r3, [r6, #60]	; 0x3c
   1e29c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0001e2a0 <CScreenDevice::SetStandoutMode(unsigned int)>:
   1e2a0:	e351001b 	cmp	r1, #27
   1e2a4:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
   1e2a8:	ea00001d 	b	1e324 <CScreenDevice::SetStandoutMode(unsigned int)+0x84>
   1e2ac:	0001e334 	.word	0x0001e334
   1e2b0:	0001e328 	.word	0x0001e328
   1e2b4:	0001e31c 	.word	0x0001e31c
   1e2b8:	0001e324 	.word	0x0001e324
   1e2bc:	0001e324 	.word	0x0001e324
   1e2c0:	0001e324 	.word	0x0001e324
   1e2c4:	0001e324 	.word	0x0001e324
   1e2c8:	0001e324 	.word	0x0001e324
   1e2cc:	0001e324 	.word	0x0001e324
   1e2d0:	0001e324 	.word	0x0001e324
   1e2d4:	0001e324 	.word	0x0001e324
   1e2d8:	0001e324 	.word	0x0001e324
   1e2dc:	0001e324 	.word	0x0001e324
   1e2e0:	0001e324 	.word	0x0001e324
   1e2e4:	0001e324 	.word	0x0001e324
   1e2e8:	0001e324 	.word	0x0001e324
   1e2ec:	0001e324 	.word	0x0001e324
   1e2f0:	0001e324 	.word	0x0001e324
   1e2f4:	0001e324 	.word	0x0001e324
   1e2f8:	0001e324 	.word	0x0001e324
   1e2fc:	0001e324 	.word	0x0001e324
   1e300:	0001e324 	.word	0x0001e324
   1e304:	0001e324 	.word	0x0001e324
   1e308:	0001e324 	.word	0x0001e324
   1e30c:	0001e324 	.word	0x0001e324
   1e310:	0001e324 	.word	0x0001e324
   1e314:	0001e324 	.word	0x0001e324
   1e318:	0001e334 	.word	0x0001e334
   1e31c:	e3a0301f 	mov	r3, #31
   1e320:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
   1e324:	e12fff1e 	bx	lr
   1e328:	e3a03b3e 	mov	r3, #63488	; 0xf800
   1e32c:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
   1e330:	e12fff1e 	bx	lr
   1e334:	e3e03020 	mvn	r3, #32
   1e338:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
   1e33c:	e12fff1e 	bx	lr

0001e340 <CScreenDevice::Scroll()>:
   1e340:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1e344:	e1a07000 	mov	r7, r0
   1e348:	e2800014 	add	r0, r0, #20
   1e34c:	eb0015aa 	bl	239fc <CCharGenerator::GetCharHeight() const>
   1e350:	e5973034 	ldr	r3, [r7, #52]	; 0x34
   1e354:	e5974038 	ldr	r4, [r7, #56]	; 0x38
   1e358:	e5975020 	ldr	r5, [r7, #32]
   1e35c:	e0444003 	sub	r4, r4, r3
   1e360:	e1a02085 	lsl	r2, r5, #1
   1e364:	e0444000 	sub	r4, r4, r0
   1e368:	e0040492 	mul	r4, r2, r4
   1e36c:	e0050395 	mul	r5, r5, r3
   1e370:	e5978018 	ldr	r8, [r7, #24]
   1e374:	e3540000 	cmp	r4, #0
   1e378:	e1a06000 	mov	r6, r0
   1e37c:	e0885085 	add	r5, r8, r5, lsl #1
   1e380:	1a000007 	bne	1e3a4 <CScreenDevice::Scroll()+0x64>
   1e384:	e0020692 	mul	r2, r2, r6
   1e388:	e1b02122 	lsrs	r2, r2, #2
   1e38c:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e390:	e1a00005 	mov	r0, r5
   1e394:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1e398:	e1a02102 	lsl	r2, r2, #2
   1e39c:	e3a01000 	mov	r1, #0
   1e3a0:	ea000e0b 	b	21bd4 <memset>
   1e3a4:	e0803003 	add	r3, r0, r3
   1e3a8:	e0288392 	mla	r8, r2, r3, r8
   1e3ac:	e3c4900f 	bic	r9, r4, #15
   1e3b0:	e1a01008 	mov	r1, r8
   1e3b4:	e1a02009 	mov	r2, r9
   1e3b8:	e1a00005 	mov	r0, r5
   1e3bc:	eb000f76 	bl	2219c <memcpy>
   1e3c0:	e204200e 	and	r2, r4, #14
   1e3c4:	e0850009 	add	r0, r5, r9
   1e3c8:	e0881009 	add	r1, r8, r9
   1e3cc:	eb000f72 	bl	2219c <memcpy>
   1e3d0:	e5972020 	ldr	r2, [r7, #32]
   1e3d4:	e3c44003 	bic	r4, r4, #3
   1e3d8:	e1a02082 	lsl	r2, r2, #1
   1e3dc:	e0855004 	add	r5, r5, r4
   1e3e0:	eaffffe7 	b	1e384 <CScreenDevice::Scroll()+0x44>

0001e3e4 <CScreenDevice::CursorDown()>:
   1e3e4:	e92d4070 	push	{r4, r5, r6, lr}
   1e3e8:	e1a04000 	mov	r4, r0
   1e3ec:	e2805014 	add	r5, r0, #20
   1e3f0:	e1a00005 	mov	r0, r5
   1e3f4:	eb001580 	bl	239fc <CCharGenerator::GetCharHeight() const>
   1e3f8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   1e3fc:	e5942038 	ldr	r2, [r4, #56]	; 0x38
   1e400:	e0800003 	add	r0, r0, r3
   1e404:	e1500002 	cmp	r0, r2
   1e408:	e5840040 	str	r0, [r4, #64]	; 0x40
   1e40c:	38bd8070 	popcc	{r4, r5, r6, pc}
   1e410:	e1a00004 	mov	r0, r4
   1e414:	ebffffc9 	bl	1e340 <CScreenDevice::Scroll()>
   1e418:	e1a00005 	mov	r0, r5
   1e41c:	eb001576 	bl	239fc <CCharGenerator::GetCharHeight() const>
   1e420:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   1e424:	e0430000 	sub	r0, r3, r0
   1e428:	e5840040 	str	r0, [r4, #64]	; 0x40
   1e42c:	e8bd8070 	pop	{r4, r5, r6, pc}

0001e430 <CScreenDevice::NewLine()>:
   1e430:	e3a02000 	mov	r2, #0
   1e434:	e580203c 	str	r2, [r0, #60]	; 0x3c
   1e438:	eaffffe9 	b	1e3e4 <CScreenDevice::CursorDown()>

0001e43c <CScreenDevice::CursorRight()>:
   1e43c:	e92d4010 	push	{r4, lr}
   1e440:	e1a04000 	mov	r4, r0
   1e444:	e2800014 	add	r0, r0, #20
   1e448:	eb001569 	bl	239f4 <CCharGenerator::GetCharWidth() const>
   1e44c:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
   1e450:	e5942024 	ldr	r2, [r4, #36]	; 0x24
   1e454:	e0800003 	add	r0, r0, r3
   1e458:	e1500002 	cmp	r0, r2
   1e45c:	e584003c 	str	r0, [r4, #60]	; 0x3c
   1e460:	38bd8010 	popcc	{r4, pc}
   1e464:	e3a03000 	mov	r3, #0
   1e468:	e1a00004 	mov	r0, r4
   1e46c:	e584303c 	str	r3, [r4, #60]	; 0x3c
   1e470:	e8bd4010 	pop	{r4, lr}
   1e474:	eaffffda 	b	1e3e4 <CScreenDevice::CursorDown()>

0001e478 <CScreenDevice::Tabulator()>:
   1e478:	e92d4070 	push	{r4, r5, r6, lr}
   1e47c:	e1a05000 	mov	r5, r0
   1e480:	e2800014 	add	r0, r0, #20
   1e484:	eb00155a 	bl	239f4 <CCharGenerator::GetCharWidth() const>
   1e488:	e595303c 	ldr	r3, [r5, #60]	; 0x3c
   1e48c:	e1a04180 	lsl	r4, r0, #3
   1e490:	e0840003 	add	r0, r4, r3
   1e494:	e1a01004 	mov	r1, r4
   1e498:	eb00178f 	bl	242dc <__aeabi_uidiv>
   1e49c:	e0000094 	mul	r0, r4, r0
   1e4a0:	e5953024 	ldr	r3, [r5, #36]	; 0x24
   1e4a4:	e585003c 	str	r0, [r5, #60]	; 0x3c
   1e4a8:	e1500003 	cmp	r0, r3
   1e4ac:	38bd8070 	popcc	{r4, r5, r6, pc}
   1e4b0:	e3a03000 	mov	r3, #0
   1e4b4:	e1a00005 	mov	r0, r5
   1e4b8:	e585303c 	str	r3, [r5, #60]	; 0x3c
   1e4bc:	e8bd4070 	pop	{r4, r5, r6, lr}
   1e4c0:	eaffffc7 	b	1e3e4 <CScreenDevice::CursorDown()>

0001e4c4 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>:
   1e4c4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e4c8:	e2806014 	add	r6, r0, #20
   1e4cc:	e24dd00c 	sub	sp, sp, #12
   1e4d0:	e1a07000 	mov	r7, r0
   1e4d4:	e1a00006 	mov	r0, r6
   1e4d8:	e1a0a001 	mov	sl, r1
   1e4dc:	e1a09002 	mov	r9, r2
   1e4e0:	e58d3004 	str	r3, [sp, #4]
   1e4e4:	e3a08000 	mov	r8, #0
   1e4e8:	e1ddb3b0 	ldrh	fp, [sp, #48]	; 0x30
   1e4ec:	eb001542 	bl	239fc <CCharGenerator::GetCharHeight() const>
   1e4f0:	e1580000 	cmp	r8, r0
   1e4f4:	2a000025 	bcs	1e590 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xcc>
   1e4f8:	e59d3004 	ldr	r3, [sp, #4]
   1e4fc:	e3a04000 	mov	r4, #0
   1e500:	e0883003 	add	r3, r8, r3
   1e504:	e58d3000 	str	r3, [sp]
   1e508:	ea000000 	b	1e510 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x4c>
   1e50c:	e2844001 	add	r4, r4, #1
   1e510:	e1a00006 	mov	r0, r6
   1e514:	eb001536 	bl	239f4 <CCharGenerator::GetCharWidth() const>
   1e518:	e1540000 	cmp	r4, r0
   1e51c:	e0845009 	add	r5, r4, r9
   1e520:	2a000015 	bcs	1e57c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xb8>
   1e524:	e1a03008 	mov	r3, r8
   1e528:	e1a02004 	mov	r2, r4
   1e52c:	e1a0100a 	mov	r1, sl
   1e530:	e1a00006 	mov	r0, r6
   1e534:	eb001534 	bl	23a0c <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>
   1e538:	e5973024 	ldr	r3, [r7, #36]	; 0x24
   1e53c:	e3500000 	cmp	r0, #0
   1e540:	11a0000b 	movne	r0, fp
   1e544:	03a00000 	moveq	r0, #0
   1e548:	e1550003 	cmp	r5, r3
   1e54c:	2affffee 	bcs	1e50c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x48>
   1e550:	e5973028 	ldr	r3, [r7, #40]	; 0x28
   1e554:	e59d2000 	ldr	r2, [sp]
   1e558:	e1520003 	cmp	r2, r3
   1e55c:	2affffea 	bcs	1e50c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x48>
   1e560:	e5973020 	ldr	r3, [r7, #32]
   1e564:	e59d1000 	ldr	r1, [sp]
   1e568:	e5972018 	ldr	r2, [r7, #24]
   1e56c:	e0255193 	mla	r5, r3, r1, r5
   1e570:	e1a05085 	lsl	r5, r5, #1
   1e574:	e18200b5 	strh	r0, [r2, r5]
   1e578:	eaffffe3 	b	1e50c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x48>
   1e57c:	e1a00006 	mov	r0, r6
   1e580:	eb00151d 	bl	239fc <CCharGenerator::GetCharHeight() const>
   1e584:	e2888001 	add	r8, r8, #1
   1e588:	e1580000 	cmp	r8, r0
   1e58c:	3affffd9 	bcc	1e4f8 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x34>
   1e590:	e28dd00c 	add	sp, sp, #12
   1e594:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001e598 <CScreenDevice::DisplayChar(char)>:
   1e598:	e6ef3071 	uxtb	r3, r1
   1e59c:	e353001f 	cmp	r3, #31
   1e5a0:	912fff1e 	bxls	lr
   1e5a4:	e92d4010 	push	{r4, lr}
   1e5a8:	e1a04000 	mov	r4, r0
   1e5ac:	e1d0c4b6 	ldrh	ip, [r0, #70]	; 0x46
   1e5b0:	e24dd008 	sub	sp, sp, #8
   1e5b4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
   1e5b8:	e590203c 	ldr	r2, [r0, #60]	; 0x3c
   1e5bc:	e58dc000 	str	ip, [sp]
   1e5c0:	ebffffbf 	bl	1e4c4 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
   1e5c4:	e1a00004 	mov	r0, r4
   1e5c8:	e28dd008 	add	sp, sp, #8
   1e5cc:	e8bd4010 	pop	{r4, lr}
   1e5d0:	eaffff99 	b	1e43c <CScreenDevice::CursorRight()>

0001e5d4 <CScreenDevice::EraseChar(unsigned int, unsigned int)>:
   1e5d4:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e5d8:	e3a08000 	mov	r8, #0
   1e5dc:	e1a0b000 	mov	fp, r0
   1e5e0:	e1a06001 	mov	r6, r1
   1e5e4:	e1a0a002 	mov	sl, r2
   1e5e8:	e1a09008 	mov	r9, r8
   1e5ec:	e2805014 	add	r5, r0, #20
   1e5f0:	e1a00005 	mov	r0, r5
   1e5f4:	eb001500 	bl	239fc <CCharGenerator::GetCharHeight() const>
   1e5f8:	e1580000 	cmp	r8, r0
   1e5fc:	28bd8ff8 	popcs	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e600:	e3a04000 	mov	r4, #0
   1e604:	e088700a 	add	r7, r8, sl
   1e608:	e1a00005 	mov	r0, r5
   1e60c:	eb0014f8 	bl	239f4 <CCharGenerator::GetCharWidth() const>
   1e610:	e1540000 	cmp	r4, r0
   1e614:	e0843006 	add	r3, r4, r6
   1e618:	2a00000c 	bcs	1e650 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x7c>
   1e61c:	e59b2024 	ldr	r2, [fp, #36]	; 0x24
   1e620:	e2844001 	add	r4, r4, #1
   1e624:	e1530002 	cmp	r3, r2
   1e628:	2afffff6 	bcs	1e608 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x34>
   1e62c:	e59b2028 	ldr	r2, [fp, #40]	; 0x28
   1e630:	e1570002 	cmp	r7, r2
   1e634:	2afffff3 	bcs	1e608 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x34>
   1e638:	e59b2020 	ldr	r2, [fp, #32]
   1e63c:	e59b1018 	ldr	r1, [fp, #24]
   1e640:	e0233792 	mla	r3, r2, r7, r3
   1e644:	e1a03083 	lsl	r3, r3, #1
   1e648:	e18190b3 	strh	r9, [r1, r3]
   1e64c:	eaffffed 	b	1e608 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x34>
   1e650:	e2888001 	add	r8, r8, #1
   1e654:	eaffffe5 	b	1e5f0 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x1c>

0001e658 <CScreenDevice::ClearLineEnd()>:
   1e658:	e92d4070 	push	{r4, r5, r6, lr}
   1e65c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1e660:	e590403c 	ldr	r4, [r0, #60]	; 0x3c
   1e664:	e1540003 	cmp	r4, r3
   1e668:	28bd8070 	popcs	{r4, r5, r6, pc}
   1e66c:	e1a05000 	mov	r5, r0
   1e670:	e2806014 	add	r6, r0, #20
   1e674:	e1a01004 	mov	r1, r4
   1e678:	e5952040 	ldr	r2, [r5, #64]	; 0x40
   1e67c:	e1a00005 	mov	r0, r5
   1e680:	ebffffd3 	bl	1e5d4 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
   1e684:	e1a00006 	mov	r0, r6
   1e688:	eb0014d9 	bl	239f4 <CCharGenerator::GetCharWidth() const>
   1e68c:	e5953024 	ldr	r3, [r5, #36]	; 0x24
   1e690:	e0844000 	add	r4, r4, r0
   1e694:	e1530004 	cmp	r3, r4
   1e698:	8afffff5 	bhi	1e674 <CScreenDevice::ClearLineEnd()+0x1c>
   1e69c:	e8bd8070 	pop	{r4, r5, r6, pc}

0001e6a0 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>:
   1e6a0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1e6a4:	e1a05000 	mov	r5, r0
   1e6a8:	e2807014 	add	r7, r0, #20
   1e6ac:	e1a00007 	mov	r0, r7
   1e6b0:	e1a06001 	mov	r6, r1
   1e6b4:	e595403c 	ldr	r4, [r5, #60]	; 0x3c
   1e6b8:	eb0014cd 	bl	239f4 <CCharGenerator::GetCharWidth() const>
   1e6bc:	e0204096 	mla	r0, r6, r0, r4
   1e6c0:	e5956024 	ldr	r6, [r5, #36]	; 0x24
   1e6c4:	e595403c 	ldr	r4, [r5, #60]	; 0x3c
   1e6c8:	e1500006 	cmp	r0, r6
   1e6cc:	31a06000 	movcc	r6, r0
   1e6d0:	e1540006 	cmp	r4, r6
   1e6d4:	28bd81f0 	popcs	{r4, r5, r6, r7, r8, pc}
   1e6d8:	e1a01004 	mov	r1, r4
   1e6dc:	e5952040 	ldr	r2, [r5, #64]	; 0x40
   1e6e0:	e1a00005 	mov	r0, r5
   1e6e4:	ebffffba 	bl	1e5d4 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
   1e6e8:	e1a00007 	mov	r0, r7
   1e6ec:	eb0014c0 	bl	239f4 <CCharGenerator::GetCharWidth() const>
   1e6f0:	e0844000 	add	r4, r4, r0
   1e6f4:	e1540006 	cmp	r4, r6
   1e6f8:	3afffff6 	bcc	1e6d8 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]+0x38>
   1e6fc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0001e700 <CScreenDevice::EraseChars(unsigned int)>:
   1e700:	e3510000 	cmp	r1, #0
   1e704:	012fff1e 	bxeq	lr
   1e708:	eaffffe4 	b	1e6a0 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>

0001e70c <CScreenDevice::ClearDisplayEnd()>:
   1e70c:	e92d4070 	push	{r4, r5, r6, lr}
   1e710:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1e714:	e590403c 	ldr	r4, [r0, #60]	; 0x3c
   1e718:	e1a05000 	mov	r5, r0
   1e71c:	e1540003 	cmp	r4, r3
   1e720:	e2806014 	add	r6, r0, #20
   1e724:	2a000009 	bcs	1e750 <CScreenDevice::ClearDisplayEnd()+0x44>
   1e728:	e1a01004 	mov	r1, r4
   1e72c:	e5952040 	ldr	r2, [r5, #64]	; 0x40
   1e730:	e1a00005 	mov	r0, r5
   1e734:	ebffffa6 	bl	1e5d4 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
   1e738:	e1a00006 	mov	r0, r6
   1e73c:	eb0014ac 	bl	239f4 <CCharGenerator::GetCharWidth() const>
   1e740:	e5953024 	ldr	r3, [r5, #36]	; 0x24
   1e744:	e0844000 	add	r4, r4, r0
   1e748:	e1530004 	cmp	r3, r4
   1e74c:	8afffff5 	bhi	1e728 <CScreenDevice::ClearDisplayEnd()+0x1c>
   1e750:	e1a00006 	mov	r0, r6
   1e754:	e5954040 	ldr	r4, [r5, #64]	; 0x40
   1e758:	eb0014a7 	bl	239fc <CCharGenerator::GetCharHeight() const>
   1e75c:	e5953020 	ldr	r3, [r5, #32]
   1e760:	e0840000 	add	r0, r4, r0
   1e764:	e0000093 	mul	r0, r3, r0
   1e768:	e595201c 	ldr	r2, [r5, #28]
   1e76c:	e5953018 	ldr	r3, [r5, #24]
   1e770:	e07020a2 	rsbs	r2, r0, r2, lsr #1
   1e774:	0a000004 	beq	1e78c <CScreenDevice::ClearDisplayEnd()+0x80>
   1e778:	e8bd4070 	pop	{r4, r5, r6, lr}
   1e77c:	e1a02082 	lsl	r2, r2, #1
   1e780:	e0830080 	add	r0, r3, r0, lsl #1
   1e784:	e3a01000 	mov	r1, #0
   1e788:	ea000d11 	b	21bd4 <memset>
   1e78c:	e8bd8070 	pop	{r4, r5, r6, pc}

0001e790 <CScreenDevice::Write(char)>:
   1e790:	e92d4010 	push	{r4, lr}
   1e794:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   1e798:	e24dd008 	sub	sp, sp, #8
   1e79c:	e1a04000 	mov	r4, r0
   1e7a0:	e3530007 	cmp	r3, #7
   1e7a4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1e7a8:	ea000010 	b	1e7f0 <CScreenDevice::Write(char)+0x60>
   1e7ac:	0001e83c 	.word	0x0001e83c
   1e7b0:	0001e89c 	.word	0x0001e89c
   1e7b4:	0001e8b8 	.word	0x0001e8b8
   1e7b8:	0001e910 	.word	0x0001e910
   1e7bc:	0001e9ec 	.word	0x0001e9ec
   1e7c0:	0001ea0c 	.word	0x0001ea0c
   1e7c4:	0001ea2c 	.word	0x0001ea2c
   1e7c8:	0001e800 	.word	0x0001e800
   1e7cc:	e5902034 	ldr	r2, [r0, #52]	; 0x34
   1e7d0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
   1e7d4:	e1520003 	cmp	r2, r3
   1e7d8:	2a000004 	bcs	1e7f0 <CScreenDevice::Write(char)+0x60>
   1e7dc:	e2800014 	add	r0, r0, #20
   1e7e0:	eb001485 	bl	239fc <CCharGenerator::GetCharHeight() const>
   1e7e4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   1e7e8:	e0433000 	sub	r3, r3, r0
   1e7ec:	e5843040 	str	r3, [r4, #64]	; 0x40
   1e7f0:	e3a03000 	mov	r3, #0
   1e7f4:	e5843030 	str	r3, [r4, #48]	; 0x30
   1e7f8:	e28dd008 	add	sp, sp, #8
   1e7fc:	e8bd8010 	pop	{r4, pc}
   1e800:	e3510068 	cmp	r1, #104	; 0x68
   1e804:	0a000097 	beq	1ea68 <CScreenDevice::Write(char)+0x2d8>
   1e808:	e351006c 	cmp	r1, #108	; 0x6c
   1e80c:	0a000095 	beq	1ea68 <CScreenDevice::Write(char)+0x2d8>
   1e810:	e2411030 	sub	r1, r1, #48	; 0x30
   1e814:	e6ef3071 	uxtb	r3, r1
   1e818:	e3530009 	cmp	r3, #9
   1e81c:	8afffff3 	bhi	1e7f0 <CScreenDevice::Write(char)+0x60>
   1e820:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   1e824:	e0833103 	add	r3, r3, r3, lsl #2
   1e828:	e0811083 	add	r1, r1, r3, lsl #1
   1e82c:	e3510063 	cmp	r1, #99	; 0x63
   1e830:	e584104c 	str	r1, [r4, #76]	; 0x4c
   1e834:	8affffed 	bhi	1e7f0 <CScreenDevice::Write(char)+0x60>
   1e838:	eaffffee 	b	1e7f8 <CScreenDevice::Write(char)+0x68>
   1e83c:	e2413008 	sub	r3, r1, #8
   1e840:	e3530013 	cmp	r3, #19
   1e844:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1e848:	ea0000d3 	b	1eb9c <CScreenDevice::Write(char)+0x40c>
   1e84c:	0001ead4 	.word	0x0001ead4
   1e850:	0001eac8 	.word	0x0001eac8
   1e854:	0001eab4 	.word	0x0001eab4
   1e858:	0001eb9c 	.word	0x0001eb9c
   1e85c:	0001eb9c 	.word	0x0001eb9c
   1e860:	0001eaa8 	.word	0x0001eaa8
   1e864:	0001eb9c 	.word	0x0001eb9c
   1e868:	0001eb9c 	.word	0x0001eb9c
   1e86c:	0001eb9c 	.word	0x0001eb9c
   1e870:	0001eb9c 	.word	0x0001eb9c
   1e874:	0001eb9c 	.word	0x0001eb9c
   1e878:	0001eb9c 	.word	0x0001eb9c
   1e87c:	0001eb9c 	.word	0x0001eb9c
   1e880:	0001eb9c 	.word	0x0001eb9c
   1e884:	0001eb9c 	.word	0x0001eb9c
   1e888:	0001eb9c 	.word	0x0001eb9c
   1e88c:	0001eb9c 	.word	0x0001eb9c
   1e890:	0001eb9c 	.word	0x0001eb9c
   1e894:	0001eb9c 	.word	0x0001eb9c
   1e898:	0001ea9c 	.word	0x0001ea9c
   1e89c:	e351004d 	cmp	r1, #77	; 0x4d
   1e8a0:	0affffd2 	beq	1e7f0 <CScreenDevice::Write(char)+0x60>
   1e8a4:	e351005b 	cmp	r1, #91	; 0x5b
   1e8a8:	03a03002 	moveq	r3, #2
   1e8ac:	05803030 	streq	r3, [r0, #48]	; 0x30
   1e8b0:	0affffd0 	beq	1e7f8 <CScreenDevice::Write(char)+0x68>
   1e8b4:	eaffffcd 	b	1e7f0 <CScreenDevice::Write(char)+0x60>
   1e8b8:	e241303f 	sub	r3, r1, #63	; 0x3f
   1e8bc:	e3530011 	cmp	r3, #17
   1e8c0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1e8c4:	ea0000de 	b	1ec44 <CScreenDevice::Write(char)+0x4b4>
   1e8c8:	0001ebf8 	.word	0x0001ebf8
   1e8cc:	0001ec44 	.word	0x0001ec44
   1e8d0:	0001e7cc 	.word	0x0001e7cc
   1e8d4:	0001ec24 	.word	0x0001ec24
   1e8d8:	0001ec14 	.word	0x0001ec14
   1e8dc:	0001ec04 	.word	0x0001ec04
   1e8e0:	0001ec44 	.word	0x0001ec44
   1e8e4:	0001ec44 	.word	0x0001ec44
   1e8e8:	0001ec44 	.word	0x0001ec44
   1e8ec:	0001ebe0 	.word	0x0001ebe0
   1e8f0:	0001ec44 	.word	0x0001ec44
   1e8f4:	0001ebd0 	.word	0x0001ebd0
   1e8f8:	0001ec34 	.word	0x0001ec34
   1e8fc:	0001e7f0 	.word	0x0001e7f0
   1e900:	0001e7f0 	.word	0x0001e7f0
   1e904:	0001ec44 	.word	0x0001ec44
   1e908:	0001ec44 	.word	0x0001ec44
   1e90c:	0001e7f0 	.word	0x0001e7f0
   1e910:	e241303b 	sub	r3, r1, #59	; 0x3b
   1e914:	e3530032 	cmp	r3, #50	; 0x32
   1e918:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1e91c:	eaffffbb 	b	1e810 <CScreenDevice::Write(char)+0x80>
   1e920:	0001eb90 	.word	0x0001eb90
   1e924:	0001e810 	.word	0x0001e810
   1e928:	0001e810 	.word	0x0001e810
   1e92c:	0001e810 	.word	0x0001e810
   1e930:	0001e810 	.word	0x0001e810
   1e934:	0001e810 	.word	0x0001e810
   1e938:	0001e810 	.word	0x0001e810
   1e93c:	0001e810 	.word	0x0001e810
   1e940:	0001e810 	.word	0x0001e810
   1e944:	0001e810 	.word	0x0001e810
   1e948:	0001e810 	.word	0x0001e810
   1e94c:	0001e810 	.word	0x0001e810
   1e950:	0001e810 	.word	0x0001e810
   1e954:	0001e810 	.word	0x0001e810
   1e958:	0001e810 	.word	0x0001e810
   1e95c:	0001e810 	.word	0x0001e810
   1e960:	0001e810 	.word	0x0001e810
   1e964:	0001e7f0 	.word	0x0001e7f0
   1e968:	0001e7f0 	.word	0x0001e7f0
   1e96c:	0001e810 	.word	0x0001e810
   1e970:	0001e810 	.word	0x0001e810
   1e974:	0001e7f0 	.word	0x0001e7f0
   1e978:	0001e810 	.word	0x0001e810
   1e97c:	0001e810 	.word	0x0001e810
   1e980:	0001e810 	.word	0x0001e810
   1e984:	0001e810 	.word	0x0001e810
   1e988:	0001e810 	.word	0x0001e810
   1e98c:	0001e810 	.word	0x0001e810
   1e990:	0001e810 	.word	0x0001e810
   1e994:	0001eae0 	.word	0x0001eae0
   1e998:	0001e810 	.word	0x0001e810
   1e99c:	0001e810 	.word	0x0001e810
   1e9a0:	0001e810 	.word	0x0001e810
   1e9a4:	0001e810 	.word	0x0001e810
   1e9a8:	0001e810 	.word	0x0001e810
   1e9ac:	0001e810 	.word	0x0001e810
   1e9b0:	0001e810 	.word	0x0001e810
   1e9b4:	0001e810 	.word	0x0001e810
   1e9b8:	0001e810 	.word	0x0001e810
   1e9bc:	0001e810 	.word	0x0001e810
   1e9c0:	0001e810 	.word	0x0001e810
   1e9c4:	0001e810 	.word	0x0001e810
   1e9c8:	0001e810 	.word	0x0001e810
   1e9cc:	0001e810 	.word	0x0001e810
   1e9d0:	0001e810 	.word	0x0001e810
   1e9d4:	0001eaf4 	.word	0x0001eaf4
   1e9d8:	0001e810 	.word	0x0001e810
   1e9dc:	0001e810 	.word	0x0001e810
   1e9e0:	0001e810 	.word	0x0001e810
   1e9e4:	0001eaf4 	.word	0x0001eaf4
   1e9e8:	0001eb10 	.word	0x0001eb10
   1e9ec:	e2411030 	sub	r1, r1, #48	; 0x30
   1e9f0:	e6ef3071 	uxtb	r3, r1
   1e9f4:	e3530009 	cmp	r3, #9
   1e9f8:	8affff7c 	bhi	1e7f0 <CScreenDevice::Write(char)+0x60>
   1e9fc:	e3a03007 	mov	r3, #7
   1ea00:	e580104c 	str	r1, [r0, #76]	; 0x4c
   1ea04:	e5803030 	str	r3, [r0, #48]	; 0x30
   1ea08:	eaffff7a 	b	1e7f8 <CScreenDevice::Write(char)+0x68>
   1ea0c:	e2411030 	sub	r1, r1, #48	; 0x30
   1ea10:	e6ef3071 	uxtb	r3, r1
   1ea14:	e3530009 	cmp	r3, #9
   1ea18:	8affff74 	bhi	1e7f0 <CScreenDevice::Write(char)+0x60>
   1ea1c:	e3a03006 	mov	r3, #6
   1ea20:	e5801050 	str	r1, [r0, #80]	; 0x50
   1ea24:	e5803030 	str	r3, [r0, #48]	; 0x30
   1ea28:	eaffff72 	b	1e7f8 <CScreenDevice::Write(char)+0x68>
   1ea2c:	e3510048 	cmp	r1, #72	; 0x48
   1ea30:	0a000094 	beq	1ec88 <CScreenDevice::Write(char)+0x4f8>
   1ea34:	e3510072 	cmp	r1, #114	; 0x72
   1ea38:	0a000011 	beq	1ea84 <CScreenDevice::Write(char)+0x2f4>
   1ea3c:	e2411030 	sub	r1, r1, #48	; 0x30
   1ea40:	e6ef3071 	uxtb	r3, r1
   1ea44:	e3530009 	cmp	r3, #9
   1ea48:	8affff68 	bhi	1e7f0 <CScreenDevice::Write(char)+0x60>
   1ea4c:	e5903050 	ldr	r3, [r0, #80]	; 0x50
   1ea50:	e0833103 	add	r3, r3, r3, lsl #2
   1ea54:	e0811083 	add	r1, r1, r3, lsl #1
   1ea58:	e35100c7 	cmp	r1, #199	; 0xc7
   1ea5c:	e5801050 	str	r1, [r0, #80]	; 0x50
   1ea60:	8affff62 	bhi	1e7f0 <CScreenDevice::Write(char)+0x60>
   1ea64:	eaffff63 	b	1e7f8 <CScreenDevice::Write(char)+0x68>
   1ea68:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   1ea6c:	e3530019 	cmp	r3, #25
   1ea70:	02411068 	subeq	r1, r1, #104	; 0x68
   1ea74:	016f1f11 	clzeq	r1, r1
   1ea78:	01a012a1 	lsreq	r1, r1, #5
   1ea7c:	05c41044 	strbeq	r1, [r4, #68]	; 0x44
   1ea80:	eaffff5a 	b	1e7f0 <CScreenDevice::Write(char)+0x60>
   1ea84:	e5902050 	ldr	r2, [r0, #80]	; 0x50
   1ea88:	e590104c 	ldr	r1, [r0, #76]	; 0x4c
   1ea8c:	ebfffde4 	bl	1e224 <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>
   1ea90:	e3a03000 	mov	r3, #0
   1ea94:	e5843030 	str	r3, [r4, #48]	; 0x30
   1ea98:	eaffff56 	b	1e7f8 <CScreenDevice::Write(char)+0x68>
   1ea9c:	e3a03001 	mov	r3, #1
   1eaa0:	e5803030 	str	r3, [r0, #48]	; 0x30
   1eaa4:	eaffff53 	b	1e7f8 <CScreenDevice::Write(char)+0x68>
   1eaa8:	e3a03000 	mov	r3, #0
   1eaac:	e580303c 	str	r3, [r0, #60]	; 0x3c
   1eab0:	eaffff50 	b	1e7f8 <CScreenDevice::Write(char)+0x68>
   1eab4:	e3a03000 	mov	r3, #0
   1eab8:	e580303c 	str	r3, [r0, #60]	; 0x3c
   1eabc:	e28dd008 	add	sp, sp, #8
   1eac0:	e8bd4010 	pop	{r4, lr}
   1eac4:	eafffe46 	b	1e3e4 <CScreenDevice::CursorDown()>
   1eac8:	e28dd008 	add	sp, sp, #8
   1eacc:	e8bd4010 	pop	{r4, lr}
   1ead0:	eafffe68 	b	1e478 <CScreenDevice::Tabulator()>
   1ead4:	e28dd008 	add	sp, sp, #8
   1ead8:	e8bd4010 	pop	{r4, lr}
   1eadc:	eafffd89 	b	1e108 <CScreenDevice::CursorLeft()>
   1eae0:	e590104c 	ldr	r1, [r0, #76]	; 0x4c
   1eae4:	e3510000 	cmp	r1, #0
   1eae8:	0affff40 	beq	1e7f0 <CScreenDevice::Write(char)+0x60>
   1eaec:	ebfffeeb 	bl	1e6a0 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>
   1eaf0:	eaffff3e 	b	1e7f0 <CScreenDevice::Write(char)+0x60>
   1eaf4:	e590304c 	ldr	r3, [r0, #76]	; 0x4c
   1eaf8:	e3530004 	cmp	r3, #4
   1eafc:	02411068 	subeq	r1, r1, #104	; 0x68
   1eb00:	016f1f11 	clzeq	r1, r1
   1eb04:	01a012a1 	lsreq	r1, r1, #5
   1eb08:	05c01048 	strbeq	r1, [r0, #72]	; 0x48
   1eb0c:	eaffff37 	b	1e7f0 <CScreenDevice::Write(char)+0x60>
   1eb10:	e590304c 	ldr	r3, [r0, #76]	; 0x4c
   1eb14:	e353001b 	cmp	r3, #27
   1eb18:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1eb1c:	eaffff33 	b	1e7f0 <CScreenDevice::Write(char)+0x60>
   1eb20:	0001ec7c 	.word	0x0001ec7c
   1eb24:	0001ec70 	.word	0x0001ec70
   1eb28:	0001ec64 	.word	0x0001ec64
   1eb2c:	0001e7f0 	.word	0x0001e7f0
   1eb30:	0001e7f0 	.word	0x0001e7f0
   1eb34:	0001e7f0 	.word	0x0001e7f0
   1eb38:	0001e7f0 	.word	0x0001e7f0
   1eb3c:	0001e7f0 	.word	0x0001e7f0
   1eb40:	0001e7f0 	.word	0x0001e7f0
   1eb44:	0001e7f0 	.word	0x0001e7f0
   1eb48:	0001e7f0 	.word	0x0001e7f0
   1eb4c:	0001e7f0 	.word	0x0001e7f0
   1eb50:	0001e7f0 	.word	0x0001e7f0
   1eb54:	0001e7f0 	.word	0x0001e7f0
   1eb58:	0001e7f0 	.word	0x0001e7f0
   1eb5c:	0001e7f0 	.word	0x0001e7f0
   1eb60:	0001e7f0 	.word	0x0001e7f0
   1eb64:	0001e7f0 	.word	0x0001e7f0
   1eb68:	0001e7f0 	.word	0x0001e7f0
   1eb6c:	0001e7f0 	.word	0x0001e7f0
   1eb70:	0001e7f0 	.word	0x0001e7f0
   1eb74:	0001e7f0 	.word	0x0001e7f0
   1eb78:	0001e7f0 	.word	0x0001e7f0
   1eb7c:	0001e7f0 	.word	0x0001e7f0
   1eb80:	0001e7f0 	.word	0x0001e7f0
   1eb84:	0001e7f0 	.word	0x0001e7f0
   1eb88:	0001e7f0 	.word	0x0001e7f0
   1eb8c:	0001ec7c 	.word	0x0001ec7c
   1eb90:	e3a03005 	mov	r3, #5
   1eb94:	e5803030 	str	r3, [r0, #48]	; 0x30
   1eb98:	eaffff16 	b	1e7f8 <CScreenDevice::Write(char)+0x68>
   1eb9c:	e6ef3071 	uxtb	r3, r1
   1eba0:	e353001f 	cmp	r3, #31
   1eba4:	9affff13 	bls	1e7f8 <CScreenDevice::Write(char)+0x68>
   1eba8:	e5903040 	ldr	r3, [r0, #64]	; 0x40
   1ebac:	e590203c 	ldr	r2, [r0, #60]	; 0x3c
   1ebb0:	e1d004b6 	ldrh	r0, [r0, #70]	; 0x46
   1ebb4:	e58d0000 	str	r0, [sp]
   1ebb8:	e1a00004 	mov	r0, r4
   1ebbc:	ebfffe40 	bl	1e4c4 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
   1ebc0:	e1a00004 	mov	r0, r4
   1ebc4:	e28dd008 	add	sp, sp, #8
   1ebc8:	e8bd4010 	pop	{r4, lr}
   1ebcc:	eafffe1a 	b	1e43c <CScreenDevice::CursorRight()>
   1ebd0:	ebfffecd 	bl	1e70c <CScreenDevice::ClearDisplayEnd()>
   1ebd4:	e3a03000 	mov	r3, #0
   1ebd8:	e5843030 	str	r3, [r4, #48]	; 0x30
   1ebdc:	eaffff05 	b	1e7f8 <CScreenDevice::Write(char)+0x68>
   1ebe0:	e3a03000 	mov	r3, #0
   1ebe4:	e5902034 	ldr	r2, [r0, #52]	; 0x34
   1ebe8:	e580303c 	str	r3, [r0, #60]	; 0x3c
   1ebec:	e5803030 	str	r3, [r0, #48]	; 0x30
   1ebf0:	e5802040 	str	r2, [r0, #64]	; 0x40
   1ebf4:	eafffeff 	b	1e7f8 <CScreenDevice::Write(char)+0x68>
   1ebf8:	e3a03004 	mov	r3, #4
   1ebfc:	e5803030 	str	r3, [r0, #48]	; 0x30
   1ec00:	eafffefc 	b	1e7f8 <CScreenDevice::Write(char)+0x68>
   1ec04:	ebfffd3f 	bl	1e108 <CScreenDevice::CursorLeft()>
   1ec08:	e3a03000 	mov	r3, #0
   1ec0c:	e5843030 	str	r3, [r4, #48]	; 0x30
   1ec10:	eafffef8 	b	1e7f8 <CScreenDevice::Write(char)+0x68>
   1ec14:	ebfffe08 	bl	1e43c <CScreenDevice::CursorRight()>
   1ec18:	e3a03000 	mov	r3, #0
   1ec1c:	e5843030 	str	r3, [r4, #48]	; 0x30
   1ec20:	eafffef4 	b	1e7f8 <CScreenDevice::Write(char)+0x68>
   1ec24:	ebfffdee 	bl	1e3e4 <CScreenDevice::CursorDown()>
   1ec28:	e3a03000 	mov	r3, #0
   1ec2c:	e5843030 	str	r3, [r4, #48]	; 0x30
   1ec30:	eafffef0 	b	1e7f8 <CScreenDevice::Write(char)+0x68>
   1ec34:	ebfffe87 	bl	1e658 <CScreenDevice::ClearLineEnd()>
   1ec38:	e3a03000 	mov	r3, #0
   1ec3c:	e5843030 	str	r3, [r4, #48]	; 0x30
   1ec40:	eafffeec 	b	1e7f8 <CScreenDevice::Write(char)+0x68>
   1ec44:	e2411030 	sub	r1, r1, #48	; 0x30
   1ec48:	e6ef3071 	uxtb	r3, r1
   1ec4c:	e3530009 	cmp	r3, #9
   1ec50:	8afffee6 	bhi	1e7f0 <CScreenDevice::Write(char)+0x60>
   1ec54:	e3a03003 	mov	r3, #3
   1ec58:	e580104c 	str	r1, [r0, #76]	; 0x4c
   1ec5c:	e5803030 	str	r3, [r0, #48]	; 0x30
   1ec60:	eafffee4 	b	1e7f8 <CScreenDevice::Write(char)+0x68>
   1ec64:	e3a0301f 	mov	r3, #31
   1ec68:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
   1ec6c:	eafffedf 	b	1e7f0 <CScreenDevice::Write(char)+0x60>
   1ec70:	e3a03b3e 	mov	r3, #63488	; 0xf800
   1ec74:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
   1ec78:	eafffedc 	b	1e7f0 <CScreenDevice::Write(char)+0x60>
   1ec7c:	e3e03020 	mvn	r3, #32
   1ec80:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
   1ec84:	eafffed9 	b	1e7f0 <CScreenDevice::Write(char)+0x60>
   1ec88:	e5902050 	ldr	r2, [r0, #80]	; 0x50
   1ec8c:	e590104c 	ldr	r1, [r0, #76]	; 0x4c
   1ec90:	ebfffd37 	bl	1e174 <CScreenDevice::CursorMove(unsigned int, unsigned int)>
   1ec94:	e3a03000 	mov	r3, #0
   1ec98:	e5843030 	str	r3, [r4, #48]	; 0x30
   1ec9c:	eafffed5 	b	1e7f8 <CScreenDevice::Write(char)+0x68>

0001eca0 <CScreenDevice::Write(void const*, unsigned int)>:
   1eca0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1eca4:	e1a05000 	mov	r5, r0
   1eca8:	e5900058 	ldr	r0, [r0, #88]	; 0x58
   1ecac:	e1a07001 	mov	r7, r1
   1ecb0:	e3500000 	cmp	r0, #0
   1ecb4:	e1a04002 	mov	r4, r2
   1ecb8:	1a000028 	bne	1ed60 <CScreenDevice::Write(void const*, unsigned int)+0xc0>
   1ecbc:	e3a02001 	mov	r2, #1
   1ecc0:	e5d53044 	ldrb	r3, [r5, #68]	; 0x44
   1ecc4:	e5c52054 	strb	r2, [r5, #84]	; 0x54
   1ecc8:	e3530000 	cmp	r3, #0
   1eccc:	1a00001c 	bne	1ed44 <CScreenDevice::Write(void const*, unsigned int)+0xa4>
   1ecd0:	e3540000 	cmp	r4, #0
   1ecd4:	e2446001 	sub	r6, r4, #1
   1ecd8:	01a06004 	moveq	r6, r4
   1ecdc:	0a00000b 	beq	1ed10 <CScreenDevice::Write(void const*, unsigned int)+0x70>
   1ece0:	e1a04007 	mov	r4, r7
   1ece4:	e0d410d1 	ldrsb	r1, [r4], #1
   1ece8:	e1a00005 	mov	r0, r5
   1ecec:	ebfffea7 	bl	1e790 <CScreenDevice::Write(char)>
   1ecf0:	e2643001 	rsb	r3, r4, #1
   1ecf4:	e0833006 	add	r3, r3, r6
   1ecf8:	e1770003 	cmn	r7, r3
   1ecfc:	1afffff8 	bne	1ece4 <CScreenDevice::Write(void const*, unsigned int)+0x44>
   1ed00:	e2866001 	add	r6, r6, #1
   1ed04:	e5d53044 	ldrb	r3, [r5, #68]	; 0x44
   1ed08:	e3530000 	cmp	r3, #0
   1ed0c:	1a000009 	bne	1ed38 <CScreenDevice::Write(void const*, unsigned int)+0x98>
   1ed10:	e3a02000 	mov	r2, #0
   1ed14:	e5953058 	ldr	r3, [r5, #88]	; 0x58
   1ed18:	e5c52054 	strb	r2, [r5, #84]	; 0x54
   1ed1c:	e1530002 	cmp	r3, r2
   1ed20:	0a000000 	beq	1ed28 <CScreenDevice::Write(void const*, unsigned int)+0x88>
   1ed24:	eb000feb 	bl	22cd8 <LeaveCritical>
   1ed28:	e3a03000 	mov	r3, #0
   1ed2c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   1ed30:	e1a00006 	mov	r0, r6
   1ed34:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1ed38:	e1a00005 	mov	r0, r5
   1ed3c:	ebfffc31 	bl	1de08 <CScreenDevice::InvertCursor() [clone .part.6]>
   1ed40:	eafffff2 	b	1ed10 <CScreenDevice::Write(void const*, unsigned int)+0x70>
   1ed44:	e1a00005 	mov	r0, r5
   1ed48:	ebfffc2e 	bl	1de08 <CScreenDevice::InvertCursor() [clone .part.6]>
   1ed4c:	e3540000 	cmp	r4, #0
   1ed50:	e2446001 	sub	r6, r4, #1
   1ed54:	1affffe1 	bne	1ece0 <CScreenDevice::Write(void const*, unsigned int)+0x40>
   1ed58:	e1a06004 	mov	r6, r4
   1ed5c:	eaffffe8 	b	1ed04 <CScreenDevice::Write(void const*, unsigned int)+0x64>
   1ed60:	eb000faf 	bl	22c24 <EnterCritical>
   1ed64:	eaffffd4 	b	1ecbc <CScreenDevice::Write(void const*, unsigned int)+0x1c>

0001ed68 <CScreenDevice::Initialize()>:
   1ed68:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1ed6c:	e5d0500c 	ldrb	r5, [r0, #12]
   1ed70:	e24dd00c 	sub	sp, sp, #12
   1ed74:	e3550000 	cmp	r5, #0
   1ed78:	e1a04000 	mov	r4, r0
   1ed7c:	0a00002a 	beq	1ee2c <CScreenDevice::Initialize()+0xc4>
   1ed80:	e5903004 	ldr	r3, [r0, #4]
   1ed84:	e5902008 	ldr	r2, [r0, #8]
   1ed88:	e5803024 	str	r3, [r0, #36]	; 0x24
   1ed8c:	e0000392 	mul	r0, r2, r3
   1ed90:	e370010f 	cmn	r0, #-1073741821	; 0xc0000003
   1ed94:	e1a00080 	lsl	r0, r0, #1
   1ed98:	e584001c 	str	r0, [r4, #28]
   1ed9c:	e5843020 	str	r3, [r4, #32]
   1eda0:	23e00000 	mvncs	r0, #0
   1eda4:	e5842028 	str	r2, [r4, #40]	; 0x28
   1eda8:	eb000ff8 	bl	22d90 <operator new[](unsigned int)>
   1edac:	e5947028 	ldr	r7, [r4, #40]	; 0x28
   1edb0:	e5840018 	str	r0, [r4, #24]
   1edb4:	e2846014 	add	r6, r4, #20
   1edb8:	e1a00006 	mov	r0, r6
   1edbc:	eb00130e 	bl	239fc <CCharGenerator::GetCharHeight() const>
   1edc0:	e1a01000 	mov	r1, r0
   1edc4:	e1a00007 	mov	r0, r7
   1edc8:	eb001543 	bl	242dc <__aeabi_uidiv>
   1edcc:	e1a05000 	mov	r5, r0
   1edd0:	e1a00006 	mov	r0, r6
   1edd4:	eb001308 	bl	239fc <CCharGenerator::GetCharHeight() const>
   1edd8:	e3a02000 	mov	r2, #0
   1eddc:	e0000590 	mul	r0, r0, r5
   1ede0:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   1ede4:	e584002c 	str	r0, [r4, #44]	; 0x2c
   1ede8:	e5840038 	str	r0, [r4, #56]	; 0x38
   1edec:	e5843040 	str	r3, [r4, #64]	; 0x40
   1edf0:	e584203c 	str	r2, [r4, #60]	; 0x3c
   1edf4:	e1a00004 	mov	r0, r4
   1edf8:	ebfffe43 	bl	1e70c <CScreenDevice::ClearDisplayEnd()>
   1edfc:	e5d43044 	ldrb	r3, [r4, #68]	; 0x44
   1ee00:	e3530000 	cmp	r3, #0
   1ee04:	1a00002f 	bne	1eec8 <CScreenDevice::Initialize()+0x160>
   1ee08:	ebfff213 	bl	1b65c <CDeviceNameService::Get()>
   1ee0c:	e1a02004 	mov	r2, r4
   1ee10:	e3a03000 	mov	r3, #0
   1ee14:	e59f10b8 	ldr	r1, [pc, #184]	; 1eed4 <CScreenDevice::Initialize()+0x16c>
   1ee18:	ebfff14f 	bl	1b35c <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   1ee1c:	e3a05001 	mov	r5, #1
   1ee20:	e1a00005 	mov	r0, r5
   1ee24:	e28dd00c 	add	sp, sp, #12
   1ee28:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1ee2c:	e3a00094 	mov	r0, #148	; 0x94
   1ee30:	eb000fd5 	bl	22d8c <operator new(unsigned int)>
   1ee34:	e9940006 	ldmib	r4, {r1, r2}
   1ee38:	e1a06000 	mov	r6, r0
   1ee3c:	e3a03010 	mov	r3, #16
   1ee40:	e58d5004 	str	r5, [sp, #4]
   1ee44:	e58d5000 	str	r5, [sp]
   1ee48:	eb001192 	bl	23498 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   1ee4c:	e5846010 	str	r6, [r4, #16]
   1ee50:	e1a00006 	mov	r0, r6
   1ee54:	eb001208 	bl	2367c <CBcmFrameBuffer::Initialize()>
   1ee58:	e3500000 	cmp	r0, #0
   1ee5c:	0affffef 	beq	1ee20 <CScreenDevice::Initialize()+0xb8>
   1ee60:	e5940010 	ldr	r0, [r4, #16]
   1ee64:	eb00123e 	bl	23764 <CBcmFrameBuffer::GetDepth() const>
   1ee68:	e3500010 	cmp	r0, #16
   1ee6c:	1affffeb 	bne	1ee20 <CScreenDevice::Initialize()+0xb8>
   1ee70:	e5940010 	ldr	r0, [r4, #16]
   1ee74:	eb00123c 	bl	2376c <CBcmFrameBuffer::GetBuffer() const>
   1ee78:	e5840018 	str	r0, [r4, #24]
   1ee7c:	e5940010 	ldr	r0, [r4, #16]
   1ee80:	eb00123b 	bl	23774 <CBcmFrameBuffer::GetSize() const>
   1ee84:	e584001c 	str	r0, [r4, #28]
   1ee88:	e5940010 	ldr	r0, [r4, #16]
   1ee8c:	eb001232 	bl	2375c <CBcmFrameBuffer::GetPitch() const>
   1ee90:	e5840020 	str	r0, [r4, #32]
   1ee94:	e5940010 	ldr	r0, [r4, #16]
   1ee98:	eb001227 	bl	2373c <CBcmFrameBuffer::GetWidth() const>
   1ee9c:	e5840024 	str	r0, [r4, #36]	; 0x24
   1eea0:	e5940010 	ldr	r0, [r4, #16]
   1eea4:	eb001226 	bl	23744 <CBcmFrameBuffer::GetHeight() const>
   1eea8:	e5943020 	ldr	r3, [r4, #32]
   1eeac:	e1a07000 	mov	r7, r0
   1eeb0:	e3130003 	tst	r3, #3
   1eeb4:	01a030a3 	lsreq	r3, r3, #1
   1eeb8:	e5840028 	str	r0, [r4, #40]	; 0x28
   1eebc:	05843020 	streq	r3, [r4, #32]
   1eec0:	0affffbb 	beq	1edb4 <CScreenDevice::Initialize()+0x4c>
   1eec4:	eaffffd5 	b	1ee20 <CScreenDevice::Initialize()+0xb8>
   1eec8:	e1a00004 	mov	r0, r4
   1eecc:	ebfffbcd 	bl	1de08 <CScreenDevice::InvertCursor() [clone .part.6]>
   1eed0:	eaffffcc 	b	1ee08 <CScreenDevice::Initialize()+0xa0>
   1eed4:	0002950c 	.word	0x0002950c

0001eed8 <CScreenDevice::InvertCursor()>:
   1eed8:	e5d03044 	ldrb	r3, [r0, #68]	; 0x44
   1eedc:	e3530000 	cmp	r3, #0
   1eee0:	012fff1e 	bxeq	lr
   1eee4:	eafffbc7 	b	1de08 <CScreenDevice::InvertCursor() [clone .part.6]>

0001eee8 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)>:
   1eee8:	e590c024 	ldr	ip, [r0, #36]	; 0x24
   1eeec:	e15c0001 	cmp	ip, r1
   1eef0:	912fff1e 	bxls	lr
   1eef4:	e590c028 	ldr	ip, [r0, #40]	; 0x28
   1eef8:	e15c0002 	cmp	ip, r2
   1eefc:	8590c020 	ldrhi	ip, [r0, #32]
   1ef00:	85900018 	ldrhi	r0, [r0, #24]
   1ef04:	8022129c 	mlahi	r2, ip, r2, r1
   1ef08:	81a02082 	lslhi	r2, r2, #1
   1ef0c:	818030b2 	strhhi	r3, [r0, r2]
   1ef10:	e12fff1e 	bx	lr

0001ef14 <CScreenDevice::GetPixel(unsigned int, unsigned int)>:
   1ef14:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1ef18:	e1530001 	cmp	r3, r1
   1ef1c:	9a000008 	bls	1ef44 <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x30>
   1ef20:	e5903028 	ldr	r3, [r0, #40]	; 0x28
   1ef24:	e1530002 	cmp	r3, r2
   1ef28:	9a000005 	bls	1ef44 <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x30>
   1ef2c:	e590c020 	ldr	ip, [r0, #32]
   1ef30:	e5903018 	ldr	r3, [r0, #24]
   1ef34:	e022129c 	mla	r2, ip, r2, r1
   1ef38:	e1a02082 	lsl	r2, r2, #1
   1ef3c:	e19300b2 	ldrh	r0, [r3, r2]
   1ef40:	e12fff1e 	bx	lr
   1ef44:	e3a00000 	mov	r0, #0
   1ef48:	e12fff1e 	bx	lr

0001ef4c <CScreenDevice::Rotor(unsigned int, unsigned int)>:
   1ef4c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1ef50:	e1a05000 	mov	r5, r0
   1ef54:	e24dd00c 	sub	sp, sp, #12
   1ef58:	e1a04001 	mov	r4, r1
   1ef5c:	e2800014 	add	r0, r0, #20
   1ef60:	e1a06002 	mov	r6, r2
   1ef64:	e5957024 	ldr	r7, [r5, #36]	; 0x24
   1ef68:	eb0012a1 	bl	239f4 <CCharGenerator::GetCharWidth() const>
   1ef6c:	e3a0cb3e 	mov	ip, #63488	; 0xf800
   1ef70:	e2044003 	and	r4, r4, #3
   1ef74:	e0200094 	mla	r0, r4, r0, r0
   1ef78:	e59f3024 	ldr	r3, [pc, #36]	; 1efa4 <CScreenDevice::Rotor(unsigned int, unsigned int)+0x58>
   1ef7c:	e2066003 	and	r6, r6, #3
   1ef80:	e0833006 	add	r3, r3, r6
   1ef84:	e1d311dc 	ldrsb	r1, [r3, #28]
   1ef88:	e0472000 	sub	r2, r7, r0
   1ef8c:	e58dc000 	str	ip, [sp]
   1ef90:	e1a00005 	mov	r0, r5
   1ef94:	e3a03000 	mov	r3, #0
   1ef98:	ebfffd49 	bl	1e4c4 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
   1ef9c:	e28dd00c 	add	sp, sp, #12
   1efa0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1efa4:	000298f0 	.word	0x000298f0

0001efa8 <CSerialDevice::Read(void*, unsigned int)>:
   1efa8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1efac:	e2514000 	subs	r4, r1, #0
   1efb0:	e1a05000 	mov	r5, r0
   1efb4:	e1a08002 	mov	r8, r2
   1efb8:	0a00005a 	beq	1f128 <CSerialDevice::Read(void*, unsigned int)+0x180>
   1efbc:	e59530a4 	ldr	r3, [r5, #164]	; 0xa4
   1efc0:	e3530000 	cmp	r3, #0
   1efc4:	0a000034 	beq	1f09c <CSerialDevice::Read(void*, unsigned int)+0xf4>
   1efc8:	e2856802 	add	r6, r5, #131072	; 0x20000
   1efcc:	e59600d0 	ldr	r0, [r6, #208]	; 0xd0
   1efd0:	e3500000 	cmp	r0, #0
   1efd4:	1a000022 	bne	1f064 <CSerialDevice::Read(void*, unsigned int)+0xbc>
   1efd8:	e2853801 	add	r3, r5, #65536	; 0x10000
   1efdc:	e59320b4 	ldr	r2, [r3, #180]	; 0xb4
   1efe0:	e3520000 	cmp	r2, #0
   1efe4:	ba000023 	blt	1f078 <CSerialDevice::Read(void*, unsigned int)+0xd0>
   1efe8:	e3580000 	cmp	r8, #0
   1efec:	0a000017 	beq	1f050 <CSerialDevice::Read(void*, unsigned int)+0xa8>
   1eff0:	e59320ac 	ldr	r2, [r3, #172]	; 0xac
   1eff4:	e59310b0 	ldr	r1, [r3, #176]	; 0xb0
   1eff8:	e1510002 	cmp	r1, r2
   1effc:	0a000054 	beq	1f154 <CSerialDevice::Read(void*, unsigned int)+0x1ac>
   1f000:	e0842008 	add	r2, r4, r8
   1f004:	e1a0c004 	mov	ip, r4
   1f008:	e59fe154 	ldr	lr, [pc, #340]	; 1f164 <CSerialDevice::Read(void*, unsigned int)+0x1bc>
   1f00c:	ea000003 	b	1f020 <CSerialDevice::Read(void*, unsigned int)+0x78>
   1f010:	e59370ac 	ldr	r7, [r3, #172]	; 0xac
   1f014:	e59310b0 	ldr	r1, [r3, #176]	; 0xb0
   1f018:	e1570001 	cmp	r7, r1
   1f01c:	0a00000b 	beq	1f050 <CSerialDevice::Read(void*, unsigned int)+0xa8>
   1f020:	e59310b0 	ldr	r1, [r3, #176]	; 0xb0
   1f024:	e2810001 	add	r0, r1, #1
   1f028:	e58300b0 	str	r0, [r3, #176]	; 0xb0
   1f02c:	e0851001 	add	r1, r5, r1
   1f030:	e5d110aa 	ldrb	r1, [r1, #170]	; 0xaa
   1f034:	e4cc1001 	strb	r1, [ip], #1
   1f038:	e59310b0 	ldr	r1, [r3, #176]	; 0xb0
   1f03c:	e15c0002 	cmp	ip, r2
   1f040:	e001100e 	and	r1, r1, lr
   1f044:	e58310b0 	str	r1, [r3, #176]	; 0xb0
   1f048:	e04c8004 	sub	r8, ip, r4
   1f04c:	1affffef 	bne	1f010 <CSerialDevice::Read(void*, unsigned int)+0x68>
   1f050:	e59630d0 	ldr	r3, [r6, #208]	; 0xd0
   1f054:	e3530000 	cmp	r3, #0
   1f058:	1a00000c 	bne	1f090 <CSerialDevice::Read(void*, unsigned int)+0xe8>
   1f05c:	e1a00008 	mov	r0, r8
   1f060:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1f064:	eb000eee 	bl	22c24 <EnterCritical>
   1f068:	e2853801 	add	r3, r5, #65536	; 0x10000
   1f06c:	e59320b4 	ldr	r2, [r3, #180]	; 0xb4
   1f070:	e3520000 	cmp	r2, #0
   1f074:	aaffffdb 	bge	1efe8 <CSerialDevice::Read(void*, unsigned int)+0x40>
   1f078:	e3a02000 	mov	r2, #0
   1f07c:	e59380b4 	ldr	r8, [r3, #180]	; 0xb4
   1f080:	e58320b4 	str	r2, [r3, #180]	; 0xb4
   1f084:	e59630d0 	ldr	r3, [r6, #208]	; 0xd0
   1f088:	e3530000 	cmp	r3, #0
   1f08c:	0afffff2 	beq	1f05c <CSerialDevice::Read(void*, unsigned int)+0xb4>
   1f090:	eb000f10 	bl	22cd8 <LeaveCritical>
   1f094:	e1a00008 	mov	r0, r8
   1f098:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1f09c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   1f0a0:	e3580000 	cmp	r8, #0
   1f0a4:	0a00001b 	beq	1f118 <CSerialDevice::Read(void*, unsigned int)+0x170>
   1f0a8:	e59fc0b8 	ldr	ip, [pc, #184]	; 1f168 <CSerialDevice::Read(void*, unsigned int)+0x1c0>
   1f0ac:	e59c2018 	ldr	r2, [ip, #24]
   1f0b0:	e3120010 	tst	r2, #16
   1f0b4:	1a000028 	bne	1f15c <CSerialDevice::Read(void*, unsigned int)+0x1b4>
   1f0b8:	e59c3000 	ldr	r3, [ip]
   1f0bc:	e3130b01 	tst	r3, #1024	; 0x400
   1f0c0:	1a00001d 	bne	1f13c <CSerialDevice::Read(void*, unsigned int)+0x194>
   1f0c4:	e3130b02 	tst	r3, #2048	; 0x800
   1f0c8:	1a00001d 	bne	1f144 <CSerialDevice::Read(void*, unsigned int)+0x19c>
   1f0cc:	e3130c01 	tst	r3, #256	; 0x100
   1f0d0:	1a00001d 	bne	1f14c <CSerialDevice::Read(void*, unsigned int)+0x1a4>
   1f0d4:	e0842008 	add	r2, r4, r8
   1f0d8:	e1a01004 	mov	r1, r4
   1f0dc:	ea000009 	b	1f108 <CSerialDevice::Read(void*, unsigned int)+0x160>
   1f0e0:	e59c3018 	ldr	r3, [ip, #24]
   1f0e4:	e3130010 	tst	r3, #16
   1f0e8:	1a00000a 	bne	1f118 <CSerialDevice::Read(void*, unsigned int)+0x170>
   1f0ec:	e59c3000 	ldr	r3, [ip]
   1f0f0:	e3130b01 	tst	r3, #1024	; 0x400
   1f0f4:	1a000010 	bne	1f13c <CSerialDevice::Read(void*, unsigned int)+0x194>
   1f0f8:	e3130b02 	tst	r3, #2048	; 0x800
   1f0fc:	1a000010 	bne	1f144 <CSerialDevice::Read(void*, unsigned int)+0x19c>
   1f100:	e3130c01 	tst	r3, #256	; 0x100
   1f104:	1a000010 	bne	1f14c <CSerialDevice::Read(void*, unsigned int)+0x1a4>
   1f108:	e4c13001 	strb	r3, [r1], #1
   1f10c:	e1510002 	cmp	r1, r2
   1f110:	e0418004 	sub	r8, r1, r4
   1f114:	1afffff1 	bne	1f0e0 <CSerialDevice::Read(void*, unsigned int)+0x138>
   1f118:	e3a03000 	mov	r3, #0
   1f11c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   1f120:	e1a00008 	mov	r0, r8
   1f124:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1f128:	e59f203c 	ldr	r2, [pc, #60]	; 1f16c <CSerialDevice::Read(void*, unsigned int)+0x1c4>
   1f12c:	e59f103c 	ldr	r1, [pc, #60]	; 1f170 <CSerialDevice::Read(void*, unsigned int)+0x1c8>
   1f130:	e59f003c 	ldr	r0, [pc, #60]	; 1f174 <CSerialDevice::Read(void*, unsigned int)+0x1cc>
   1f134:	ebffee4f 	bl	1aa78 <assertion_failed>
   1f138:	eaffff9f 	b	1efbc <CSerialDevice::Read(void*, unsigned int)+0x14>
   1f13c:	e3e08000 	mvn	r8, #0
   1f140:	eafffff4 	b	1f118 <CSerialDevice::Read(void*, unsigned int)+0x170>
   1f144:	e3e08001 	mvn	r8, #1
   1f148:	eafffff2 	b	1f118 <CSerialDevice::Read(void*, unsigned int)+0x170>
   1f14c:	e3e08002 	mvn	r8, #2
   1f150:	eafffff0 	b	1f118 <CSerialDevice::Read(void*, unsigned int)+0x170>
   1f154:	e3a08000 	mov	r8, #0
   1f158:	eaffffbc 	b	1f050 <CSerialDevice::Read(void*, unsigned int)+0xa8>
   1f15c:	e1a08003 	mov	r8, r3
   1f160:	eaffffec 	b	1f118 <CSerialDevice::Read(void*, unsigned int)+0x170>
   1f164:	0000ffff 	.word	0x0000ffff
   1f168:	20201000 	.word	0x20201000
   1f16c:	00000101 	.word	0x00000101
   1f170:	00029930 	.word	0x00029930
   1f174:	0002993c 	.word	0x0002993c

0001f178 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool)>:
   1f178:	e92d4070 	push	{r4, r5, r6, lr}
   1f17c:	e1a04000 	mov	r4, r0
   1f180:	e1a05002 	mov	r5, r2
   1f184:	e1a06001 	mov	r6, r1
   1f188:	ebfff042 	bl	1b298 <CDevice::CDevice()>
   1f18c:	e1a00004 	mov	r0, r4
   1f190:	e3a03000 	mov	r3, #0
   1f194:	e59f109c 	ldr	r1, [pc, #156]	; 1f238 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool)+0xc0>
   1f198:	e1a02003 	mov	r2, r3
   1f19c:	e4801004 	str	r1, [r0], #4
   1f1a0:	e3a01020 	mov	r1, #32
   1f1a4:	ebfff4a9 	bl	1c450 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
   1f1a8:	e3a03000 	mov	r3, #0
   1f1ac:	e284002c 	add	r0, r4, #44	; 0x2c
   1f1b0:	e1a02003 	mov	r2, r3
   1f1b4:	e3a01021 	mov	r1, #33	; 0x21
   1f1b8:	ebfff4a4 	bl	1c450 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
   1f1bc:	e2840054 	add	r0, r4, #84	; 0x54
   1f1c0:	e3a03000 	mov	r3, #0
   1f1c4:	e3a02004 	mov	r2, #4
   1f1c8:	e3a0100e 	mov	r1, #14
   1f1cc:	ebfff49f 	bl	1c450 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
   1f1d0:	e284007c 	add	r0, r4, #124	; 0x7c
   1f1d4:	e3a03000 	mov	r3, #0
   1f1d8:	e3a02004 	mov	r2, #4
   1f1dc:	e3a0100f 	mov	r1, #15
   1f1e0:	ebfff49a 	bl	1c450 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
   1f1e4:	e3550000 	cmp	r5, #0
   1f1e8:	e3a03000 	mov	r3, #0
   1f1ec:	e3a0c001 	mov	ip, #1
   1f1f0:	13a0e002 	movne	lr, #2
   1f1f4:	03a0e001 	moveq	lr, #1
   1f1f8:	e2842802 	add	r2, r4, #131072	; 0x20000
   1f1fc:	e2841801 	add	r1, r4, #65536	; 0x10000
   1f200:	e58460a4 	str	r6, [r4, #164]	; 0xa4
   1f204:	e5c450a8 	strb	r5, [r4, #168]	; 0xa8
   1f208:	e5c430a9 	strb	r3, [r4, #169]	; 0xa9
   1f20c:	e1a00004 	mov	r0, r4
   1f210:	e58130ac 	str	r3, [r1, #172]	; 0xac
   1f214:	e58130b0 	str	r3, [r1, #176]	; 0xb0
   1f218:	e58130b4 	str	r3, [r1, #180]	; 0xb4
   1f21c:	e58230b8 	str	r3, [r2, #184]	; 0xb8
   1f220:	e582e0d0 	str	lr, [r2, #208]	; 0xd0
   1f224:	e58230c4 	str	r3, [r2, #196]	; 0xc4
   1f228:	e58230bc 	str	r3, [r2, #188]	; 0xbc
   1f22c:	e582c0c0 	str	ip, [r2, #192]	; 0xc0
   1f230:	e582c0d4 	str	ip, [r2, #212]	; 0xd4
   1f234:	e8bd8070 	pop	{r4, r5, r6, pc}
   1f238:	0002991c 	.word	0x0002991c

0001f23c <CSerialDevice::Initialize(unsigned int)>:
   1f23c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1f240:	e1a07001 	mov	r7, r1
   1f244:	e1a04000 	mov	r4, r0
   1f248:	ebfffaba 	bl	1dd38 <CMachineInfo::Get()>
   1f24c:	e3a01002 	mov	r1, #2
   1f250:	ebfffa58 	bl	1dbb8 <CMachineInfo::GetClockRate(unsigned int) const>
   1f254:	e2508000 	subs	r8, r0, #0
   1f258:	0a000051 	beq	1f3a4 <CSerialDevice::Initialize(unsigned int)+0x168>
   1f25c:	e59f3154 	ldr	r3, [pc, #340]	; 1f3b8 <CSerialDevice::Initialize(unsigned int)+0x17c>
   1f260:	e2472f4b 	sub	r2, r7, #300	; 0x12c
   1f264:	e1520003 	cmp	r2, r3
   1f268:	8a000048 	bhi	1f390 <CSerialDevice::Initialize(unsigned int)+0x154>
   1f26c:	e1a05207 	lsl	r5, r7, #4
   1f270:	e1a01005 	mov	r1, r5
   1f274:	e1a00008 	mov	r0, r8
   1f278:	eb001417 	bl	242dc <__aeabi_uidiv>
   1f27c:	e59f3138 	ldr	r3, [pc, #312]	; 1f3bc <CSerialDevice::Initialize(unsigned int)+0x180>
   1f280:	e2402001 	sub	r2, r0, #1
   1f284:	e1520003 	cmp	r2, r3
   1f288:	e1a06000 	mov	r6, r0
   1f28c:	8a00003a 	bhi	1f37c <CSerialDevice::Initialize(unsigned int)+0x140>
   1f290:	e1a01005 	mov	r1, r5
   1f294:	e1a00008 	mov	r0, r8
   1f298:	eb00144c 	bl	243d0 <__aeabi_uidivmod>
   1f29c:	e1a00181 	lsl	r0, r1, #3
   1f2a0:	e1a01007 	mov	r1, r7
   1f2a4:	eb00140c 	bl	242dc <__aeabi_uidiv>
   1f2a8:	e2005001 	and	r5, r0, #1
   1f2ac:	e08550a0 	add	r5, r5, r0, lsr #1
   1f2b0:	e355003f 	cmp	r5, #63	; 0x3f
   1f2b4:	8a00002b 	bhi	1f368 <CSerialDevice::Initialize(unsigned int)+0x12c>
   1f2b8:	e59400a4 	ldr	r0, [r4, #164]	; 0xa4
   1f2bc:	e3500000 	cmp	r0, #0
   1f2c0:	0a000008 	beq	1f2e8 <CSerialDevice::Initialize(unsigned int)+0xac>
   1f2c4:	e5d430a8 	ldrb	r3, [r4, #168]	; 0xa8
   1f2c8:	e59f20f0 	ldr	r2, [pc, #240]	; 1f3c0 <CSerialDevice::Initialize(unsigned int)+0x184>
   1f2cc:	e3530000 	cmp	r3, #0
   1f2d0:	e3a01039 	mov	r1, #57	; 0x39
   1f2d4:	e1a03004 	mov	r3, r4
   1f2d8:	0a000020 	beq	1f360 <CSerialDevice::Initialize(unsigned int)+0x124>
   1f2dc:	ebfff5ac 	bl	1c994 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>
   1f2e0:	e3a03001 	mov	r3, #1
   1f2e4:	e5c430a9 	strb	r3, [r4, #169]	; 0xa9
   1f2e8:	e3a02000 	mov	r2, #0
   1f2ec:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
   1f2f0:	e59400a4 	ldr	r0, [r4, #164]	; 0xa4
   1f2f4:	e59f30c8 	ldr	r3, [pc, #200]	; 1f3c4 <CSerialDevice::Initialize(unsigned int)+0x188>
   1f2f8:	e59f10c8 	ldr	r1, [pc, #200]	; 1f3c8 <CSerialDevice::Initialize(unsigned int)+0x18c>
   1f2fc:	e1500002 	cmp	r0, r2
   1f300:	e5832038 	str	r2, [r3, #56]	; 0x38
   1f304:	13a00009 	movne	r0, #9
   1f308:	e5831044 	str	r1, [r3, #68]	; 0x44
   1f30c:	13a02e45 	movne	r2, #1104	; 0x450
   1f310:	03a02060 	moveq	r2, #96	; 0x60
   1f314:	13a01070 	movne	r1, #112	; 0x70
   1f318:	e5836024 	str	r6, [r3, #36]	; 0x24
   1f31c:	e5835028 	str	r5, [r3, #40]	; 0x28
   1f320:	15830034 	strne	r0, [r3, #52]	; 0x34
   1f324:	0583202c 	streq	r2, [r3, #44]	; 0x2c
   1f328:	1583102c 	strne	r1, [r3, #44]	; 0x2c
   1f32c:	15832038 	strne	r2, [r3, #56]	; 0x38
   1f330:	e59f308c 	ldr	r3, [pc, #140]	; 1f3c4 <CSerialDevice::Initialize(unsigned int)+0x188>
   1f334:	e59f2090 	ldr	r2, [pc, #144]	; 1f3cc <CSerialDevice::Initialize(unsigned int)+0x190>
   1f338:	e3a05000 	mov	r5, #0
   1f33c:	e5832030 	str	r2, [r3, #48]	; 0x30
   1f340:	ee075fba 	mcr	15, 0, r5, cr7, cr10, {5}
   1f344:	ebfff0c4 	bl	1b65c <CDeviceNameService::Get()>
   1f348:	e1a03005 	mov	r3, r5
   1f34c:	e1a02004 	mov	r2, r4
   1f350:	e59f1078 	ldr	r1, [pc, #120]	; 1f3d0 <CSerialDevice::Initialize(unsigned int)+0x194>
   1f354:	ebfff000 	bl	1b35c <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   1f358:	e3a00001 	mov	r0, #1
   1f35c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1f360:	ebfff51e 	bl	1c7e0 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   1f364:	eaffffdd 	b	1f2e0 <CSerialDevice::Initialize(unsigned int)+0xa4>
   1f368:	e3a02092 	mov	r2, #146	; 0x92
   1f36c:	e59f1060 	ldr	r1, [pc, #96]	; 1f3d4 <CSerialDevice::Initialize(unsigned int)+0x198>
   1f370:	e59f0060 	ldr	r0, [pc, #96]	; 1f3d8 <CSerialDevice::Initialize(unsigned int)+0x19c>
   1f374:	ebffedbf 	bl	1aa78 <assertion_failed>
   1f378:	eaffffce 	b	1f2b8 <CSerialDevice::Initialize(unsigned int)+0x7c>
   1f37c:	e3a0208f 	mov	r2, #143	; 0x8f
   1f380:	e59f104c 	ldr	r1, [pc, #76]	; 1f3d4 <CSerialDevice::Initialize(unsigned int)+0x198>
   1f384:	e59f0050 	ldr	r0, [pc, #80]	; 1f3dc <CSerialDevice::Initialize(unsigned int)+0x1a0>
   1f388:	ebffedba 	bl	1aa78 <assertion_failed>
   1f38c:	eaffffbf 	b	1f290 <CSerialDevice::Initialize(unsigned int)+0x54>
   1f390:	e3a0208c 	mov	r2, #140	; 0x8c
   1f394:	e59f1038 	ldr	r1, [pc, #56]	; 1f3d4 <CSerialDevice::Initialize(unsigned int)+0x198>
   1f398:	e59f0040 	ldr	r0, [pc, #64]	; 1f3e0 <CSerialDevice::Initialize(unsigned int)+0x1a4>
   1f39c:	ebffedb5 	bl	1aa78 <assertion_failed>
   1f3a0:	eaffffb1 	b	1f26c <CSerialDevice::Initialize(unsigned int)+0x30>
   1f3a4:	e3a0208a 	mov	r2, #138	; 0x8a
   1f3a8:	e59f1024 	ldr	r1, [pc, #36]	; 1f3d4 <CSerialDevice::Initialize(unsigned int)+0x198>
   1f3ac:	e59f0030 	ldr	r0, [pc, #48]	; 1f3e4 <CSerialDevice::Initialize(unsigned int)+0x1a8>
   1f3b0:	ebffedb0 	bl	1aa78 <assertion_failed>
   1f3b4:	eaffffa8 	b	1f25c <CSerialDevice::Initialize(unsigned int)+0x20>
   1f3b8:	003d07d4 	.word	0x003d07d4
   1f3bc:	0000fffe 	.word	0x0000fffe
   1f3c0:	0001fb50 	.word	0x0001fb50
   1f3c4:	20201000 	.word	0x20201000
   1f3c8:	000007ff 	.word	0x000007ff
   1f3cc:	00000301 	.word	0x00000301
   1f3d0:	000299bc 	.word	0x000299bc
   1f3d4:	00029930 	.word	0x00029930
   1f3d8:	000299a8 	.word	0x000299a8
   1f3dc:	00029984 	.word	0x00029984
   1f3e0:	00029958 	.word	0x00029958
   1f3e4:	00029948 	.word	0x00029948

0001f3e8 <CSerialDevice::GetOptions() const>:
   1f3e8:	e2800802 	add	r0, r0, #131072	; 0x20000
   1f3ec:	e59000c0 	ldr	r0, [r0, #192]	; 0xc0
   1f3f0:	e12fff1e 	bx	lr

0001f3f4 <CSerialDevice::SetOptions(unsigned int)>:
   1f3f4:	e2800802 	add	r0, r0, #131072	; 0x20000
   1f3f8:	e58010c0 	str	r1, [r0, #192]	; 0xc0
   1f3fc:	e12fff1e 	bx	lr

0001f400 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())>:
   1f400:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
   1f404:	e92d4070 	push	{r4, r5, r6, lr}
   1f408:	e3530000 	cmp	r3, #0
   1f40c:	e1a04000 	mov	r4, r0
   1f410:	e1a05001 	mov	r5, r1
   1f414:	e1a06002 	mov	r6, r2
   1f418:	0a00001d 	beq	1f494 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x94>
   1f41c:	e2844802 	add	r4, r4, #131072	; 0x20000
   1f420:	e59430c4 	ldr	r3, [r4, #196]	; 0xc4
   1f424:	e3530000 	cmp	r3, #0
   1f428:	0a000003 	beq	1f43c <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x3c>
   1f42c:	e59f2088 	ldr	r2, [pc, #136]	; 1f4bc <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xbc>
   1f430:	e59f1088 	ldr	r1, [pc, #136]	; 1f4c0 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc0>
   1f434:	e59f0088 	ldr	r0, [pc, #136]	; 1f4c4 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc4>
   1f438:	ebffed8e 	bl	1aa78 <assertion_failed>
   1f43c:	e3550000 	cmp	r5, #0
   1f440:	0a000018 	beq	1f4a8 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xa8>
   1f444:	e1d530d0 	ldrsb	r3, [r5]
   1f448:	e3530000 	cmp	r3, #0
   1f44c:	0a000005 	beq	1f468 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x68>
   1f450:	e3560000 	cmp	r6, #0
   1f454:	0a000009 	beq	1f480 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x80>
   1f458:	e58460cc 	str	r6, [r4, #204]	; 0xcc
   1f45c:	e58450c8 	str	r5, [r4, #200]	; 0xc8
   1f460:	e58450c4 	str	r5, [r4, #196]	; 0xc4
   1f464:	e8bd8070 	pop	{r4, r5, r6, pc}
   1f468:	e3a02f57 	mov	r2, #348	; 0x15c
   1f46c:	e59f104c 	ldr	r1, [pc, #76]	; 1f4c0 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc0>
   1f470:	e59f0050 	ldr	r0, [pc, #80]	; 1f4c8 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc8>
   1f474:	ebffed7f 	bl	1aa78 <assertion_failed>
   1f478:	e3560000 	cmp	r6, #0
   1f47c:	1afffff5 	bne	1f458 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x58>
   1f480:	e59f2044 	ldr	r2, [pc, #68]	; 1f4cc <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xcc>
   1f484:	e59f1034 	ldr	r1, [pc, #52]	; 1f4c0 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc0>
   1f488:	e59f0040 	ldr	r0, [pc, #64]	; 1f4d0 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xd0>
   1f48c:	ebffed79 	bl	1aa78 <assertion_failed>
   1f490:	eafffff0 	b	1f458 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x58>
   1f494:	e3a02f56 	mov	r2, #344	; 0x158
   1f498:	e59f1020 	ldr	r1, [pc, #32]	; 1f4c0 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc0>
   1f49c:	e59f0030 	ldr	r0, [pc, #48]	; 1f4d4 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xd4>
   1f4a0:	ebffed74 	bl	1aa78 <assertion_failed>
   1f4a4:	eaffffdc 	b	1f41c <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x1c>
   1f4a8:	e59f2028 	ldr	r2, [pc, #40]	; 1f4d8 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xd8>
   1f4ac:	e59f100c 	ldr	r1, [pc, #12]	; 1f4c0 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc0>
   1f4b0:	e59f0024 	ldr	r0, [pc, #36]	; 1f4dc <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xdc>
   1f4b4:	ebffed6f 	bl	1aa78 <assertion_failed>
   1f4b8:	eaffffe1 	b	1f444 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x44>
   1f4bc:	00000159 	.word	0x00000159
   1f4c0:	00029930 	.word	0x00029930
   1f4c4:	000299c4 	.word	0x000299c4
   1f4c8:	000299e0 	.word	0x000299e0
   1f4cc:	0000015d 	.word	0x0000015d
   1f4d0:	00029484 	.word	0x00029484
   1f4d4:	0002479c 	.word	0x0002479c
   1f4d8:	0000015b 	.word	0x0000015b
   1f4dc:	000299d4 	.word	0x000299d4

0001f4e0 <CSerialDevice::AvailableForWrite()>:
   1f4e0:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
   1f4e4:	e92d4010 	push	{r4, lr}
   1f4e8:	e3530000 	cmp	r3, #0
   1f4ec:	e1a04000 	mov	r4, r0
   1f4f0:	0a000014 	beq	1f548 <CSerialDevice::AvailableForWrite()+0x68>
   1f4f4:	e2844802 	add	r4, r4, #131072	; 0x20000
   1f4f8:	e59400d0 	ldr	r0, [r4, #208]	; 0xd0
   1f4fc:	e3500000 	cmp	r0, #0
   1f500:	1a00000d 	bne	1f53c <CSerialDevice::AvailableForWrite()+0x5c>
   1f504:	e59420bc 	ldr	r2, [r4, #188]	; 0xbc
   1f508:	e59430b8 	ldr	r3, [r4, #184]	; 0xb8
   1f50c:	e1520003 	cmp	r2, r3
   1f510:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
   1f514:	e59420b8 	ldr	r2, [r4, #184]	; 0xb8
   1f518:	92834cff 	addls	r4, r3, #65280	; 0xff00
   1f51c:	928440ff 	addls	r4, r4, #255	; 0xff
   1f520:	82434001 	subhi	r4, r3, #1
   1f524:	e3500000 	cmp	r0, #0
   1f528:	e0444002 	sub	r4, r4, r2
   1f52c:	0a000000 	beq	1f534 <CSerialDevice::AvailableForWrite()+0x54>
   1f530:	eb000de8 	bl	22cd8 <LeaveCritical>
   1f534:	e1a00004 	mov	r0, r4
   1f538:	e8bd8010 	pop	{r4, pc}
   1f53c:	eb000db8 	bl	22c24 <EnterCritical>
   1f540:	e59400d0 	ldr	r0, [r4, #208]	; 0xd0
   1f544:	eaffffee 	b	1f504 <CSerialDevice::AvailableForWrite()+0x24>
   1f548:	e59f200c 	ldr	r2, [pc, #12]	; 1f55c <CSerialDevice::AvailableForWrite()+0x7c>
   1f54c:	e59f100c 	ldr	r1, [pc, #12]	; 1f560 <CSerialDevice::AvailableForWrite()+0x80>
   1f550:	e59f000c 	ldr	r0, [pc, #12]	; 1f564 <CSerialDevice::AvailableForWrite()+0x84>
   1f554:	ebffed47 	bl	1aa78 <assertion_failed>
   1f558:	eaffffe5 	b	1f4f4 <CSerialDevice::AvailableForWrite()+0x14>
   1f55c:	00000167 	.word	0x00000167
   1f560:	00029930 	.word	0x00029930
   1f564:	0002479c 	.word	0x0002479c

0001f568 <CSerialDevice::AvailableForRead()>:
   1f568:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
   1f56c:	e92d4070 	push	{r4, r5, r6, lr}
   1f570:	e3530000 	cmp	r3, #0
   1f574:	e1a04000 	mov	r4, r0
   1f578:	0a000013 	beq	1f5cc <CSerialDevice::AvailableForRead()+0x64>
   1f57c:	e2845802 	add	r5, r4, #131072	; 0x20000
   1f580:	e59500d0 	ldr	r0, [r5, #208]	; 0xd0
   1f584:	e3500000 	cmp	r0, #0
   1f588:	1a00000c 	bne	1f5c0 <CSerialDevice::AvailableForRead()+0x58>
   1f58c:	e2843801 	add	r3, r4, #65536	; 0x10000
   1f590:	e59310ac 	ldr	r1, [r3, #172]	; 0xac
   1f594:	e59320b0 	ldr	r2, [r3, #176]	; 0xb0
   1f598:	e59340ac 	ldr	r4, [r3, #172]	; 0xac
   1f59c:	e1510002 	cmp	r1, r2
   1f5a0:	e59330b0 	ldr	r3, [r3, #176]	; 0xb0
   1f5a4:	32844801 	addcc	r4, r4, #65536	; 0x10000
   1f5a8:	e3500000 	cmp	r0, #0
   1f5ac:	e0444003 	sub	r4, r4, r3
   1f5b0:	0a000000 	beq	1f5b8 <CSerialDevice::AvailableForRead()+0x50>
   1f5b4:	eb000dc7 	bl	22cd8 <LeaveCritical>
   1f5b8:	e1a00004 	mov	r0, r4
   1f5bc:	e8bd8070 	pop	{r4, r5, r6, pc}
   1f5c0:	eb000d97 	bl	22c24 <EnterCritical>
   1f5c4:	e59500d0 	ldr	r0, [r5, #208]	; 0xd0
   1f5c8:	eaffffef 	b	1f58c <CSerialDevice::AvailableForRead()+0x24>
   1f5cc:	e3a02f5f 	mov	r2, #380	; 0x17c
   1f5d0:	e59f1008 	ldr	r1, [pc, #8]	; 1f5e0 <CSerialDevice::AvailableForRead()+0x78>
   1f5d4:	e59f0008 	ldr	r0, [pc, #8]	; 1f5e4 <CSerialDevice::AvailableForRead()+0x7c>
   1f5d8:	ebffed26 	bl	1aa78 <assertion_failed>
   1f5dc:	eaffffe6 	b	1f57c <CSerialDevice::AvailableForRead()+0x14>
   1f5e0:	00029930 	.word	0x00029930
   1f5e4:	0002479c 	.word	0x0002479c

0001f5e8 <CSerialDevice::Peek()>:
   1f5e8:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
   1f5ec:	e92d4070 	push	{r4, r5, r6, lr}
   1f5f0:	e3530000 	cmp	r3, #0
   1f5f4:	e1a04000 	mov	r4, r0
   1f5f8:	0a00001a 	beq	1f668 <CSerialDevice::Peek()+0x80>
   1f5fc:	e2845802 	add	r5, r4, #131072	; 0x20000
   1f600:	e59520d0 	ldr	r2, [r5, #208]	; 0xd0
   1f604:	e3520000 	cmp	r2, #0
   1f608:	1a00000c 	bne	1f640 <CSerialDevice::Peek()+0x58>
   1f60c:	e2843801 	add	r3, r4, #65536	; 0x10000
   1f610:	e59300ac 	ldr	r0, [r3, #172]	; 0xac
   1f614:	e59310b0 	ldr	r1, [r3, #176]	; 0xb0
   1f618:	e1500001 	cmp	r0, r1
   1f61c:	0a000016 	beq	1f67c <CSerialDevice::Peek()+0x94>
   1f620:	e59330b0 	ldr	r3, [r3, #176]	; 0xb0
   1f624:	e0844003 	add	r4, r4, r3
   1f628:	e5d440aa 	ldrb	r4, [r4, #170]	; 0xaa
   1f62c:	e3520000 	cmp	r2, #0
   1f630:	0a000000 	beq	1f638 <CSerialDevice::Peek()+0x50>
   1f634:	eb000da7 	bl	22cd8 <LeaveCritical>
   1f638:	e1a00004 	mov	r0, r4
   1f63c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1f640:	e1a00002 	mov	r0, r2
   1f644:	eb000d76 	bl	22c24 <EnterCritical>
   1f648:	e2843801 	add	r3, r4, #65536	; 0x10000
   1f64c:	e59310ac 	ldr	r1, [r3, #172]	; 0xac
   1f650:	e59320b0 	ldr	r2, [r3, #176]	; 0xb0
   1f654:	e1510002 	cmp	r1, r2
   1f658:	03e04000 	mvneq	r4, #0
   1f65c:	e59520d0 	ldr	r2, [r5, #208]	; 0xd0
   1f660:	1affffee 	bne	1f620 <CSerialDevice::Peek()+0x38>
   1f664:	eafffff0 	b	1f62c <CSerialDevice::Peek()+0x44>
   1f668:	e59f2014 	ldr	r2, [pc, #20]	; 1f684 <CSerialDevice::Peek()+0x9c>
   1f66c:	e59f1014 	ldr	r1, [pc, #20]	; 1f688 <CSerialDevice::Peek()+0xa0>
   1f670:	e59f0014 	ldr	r0, [pc, #20]	; 1f68c <CSerialDevice::Peek()+0xa4>
   1f674:	ebffecff 	bl	1aa78 <assertion_failed>
   1f678:	eaffffdf 	b	1f5fc <CSerialDevice::Peek()+0x14>
   1f67c:	e3e04000 	mvn	r4, #0
   1f680:	eaffffec 	b	1f638 <CSerialDevice::Peek()+0x50>
   1f684:	00000191 	.word	0x00000191
   1f688:	00029930 	.word	0x00029930
   1f68c:	0002479c 	.word	0x0002479c

0001f690 <CSerialDevice::Flush()>:
   1f690:	e3a03000 	mov	r3, #0
   1f694:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   1f698:	e59f2010 	ldr	r2, [pc, #16]	; 1f6b0 <CSerialDevice::Flush()+0x20>
   1f69c:	e5923018 	ldr	r3, [r2, #24]
   1f6a0:	e2133008 	ands	r3, r3, #8
   1f6a4:	1afffffc 	bne	1f69c <CSerialDevice::Flush()+0xc>
   1f6a8:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   1f6ac:	e12fff1e 	bx	lr
   1f6b0:	20201000 	.word	0x20201000

0001f6b4 <CSerialDevice::Write(unsigned char)>:
   1f6b4:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
   1f6b8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1f6bc:	e3530000 	cmp	r3, #0
   1f6c0:	0a000029 	beq	1f76c <CSerialDevice::Write(unsigned char)+0xb8>
   1f6c4:	e2805802 	add	r5, r0, #131072	; 0x20000
   1f6c8:	e1a04000 	mov	r4, r0
   1f6cc:	e59500d0 	ldr	r0, [r5, #208]	; 0xd0
   1f6d0:	e1a06001 	mov	r6, r1
   1f6d4:	e3500000 	cmp	r0, #0
   1f6d8:	1a000016 	bne	1f738 <CSerialDevice::Write(unsigned char)+0x84>
   1f6dc:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
   1f6e0:	e59510bc 	ldr	r1, [r5, #188]	; 0xbc
   1f6e4:	e2833001 	add	r3, r3, #1
   1f6e8:	e6ff3073 	uxth	r3, r3
   1f6ec:	e1530001 	cmp	r3, r1
   1f6f0:	0a00001a 	beq	1f760 <CSerialDevice::Write(unsigned char)+0xac>
   1f6f4:	e3a07001 	mov	r7, #1
   1f6f8:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
   1f6fc:	e0844003 	add	r4, r4, r3
   1f700:	e2844801 	add	r4, r4, #65536	; 0x10000
   1f704:	e0833007 	add	r3, r3, r7
   1f708:	e58530b8 	str	r3, [r5, #184]	; 0xb8
   1f70c:	e5c460b8 	strb	r6, [r4, #184]	; 0xb8
   1f710:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
   1f714:	e6ff3073 	uxth	r3, r3
   1f718:	e58530b8 	str	r3, [r5, #184]	; 0xb8
   1f71c:	e3500000 	cmp	r0, #0
   1f720:	1a000001 	bne	1f72c <CSerialDevice::Write(unsigned char)+0x78>
   1f724:	e1a00007 	mov	r0, r7
   1f728:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1f72c:	eb000d69 	bl	22cd8 <LeaveCritical>
   1f730:	e1a00007 	mov	r0, r7
   1f734:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1f738:	eb000d39 	bl	22c24 <EnterCritical>
   1f73c:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
   1f740:	e59520bc 	ldr	r2, [r5, #188]	; 0xbc
   1f744:	e2833001 	add	r3, r3, #1
   1f748:	e6ff3073 	uxth	r3, r3
   1f74c:	e1530002 	cmp	r3, r2
   1f750:	e59500d0 	ldr	r0, [r5, #208]	; 0xd0
   1f754:	03a07000 	moveq	r7, #0
   1f758:	1affffe5 	bne	1f6f4 <CSerialDevice::Write(unsigned char)+0x40>
   1f75c:	eaffffee 	b	1f71c <CSerialDevice::Write(unsigned char)+0x68>
   1f760:	e1a07000 	mov	r7, r0
   1f764:	e1a00007 	mov	r0, r7
   1f768:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1f76c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   1f770:	e59f201c 	ldr	r2, [pc, #28]	; 1f794 <CSerialDevice::Write(unsigned char)+0xe0>
   1f774:	e5923018 	ldr	r3, [r2, #24]
   1f778:	e2133020 	ands	r3, r3, #32
   1f77c:	1afffffc 	bne	1f774 <CSerialDevice::Write(unsigned char)+0xc0>
   1f780:	e5821000 	str	r1, [r2]
   1f784:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   1f788:	e3a07001 	mov	r7, #1
   1f78c:	e1a00007 	mov	r0, r7
   1f790:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1f794:	20201000 	.word	0x20201000

0001f798 <CSerialDevice::Write(void const*, unsigned int)>:
   1f798:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1f79c:	e2804802 	add	r4, r0, #131072	; 0x20000
   1f7a0:	e1a07000 	mov	r7, r0
   1f7a4:	e59400d4 	ldr	r0, [r4, #212]	; 0xd4
   1f7a8:	e1a05001 	mov	r5, r1
   1f7ac:	e3500000 	cmp	r0, #0
   1f7b0:	e1a08002 	mov	r8, r2
   1f7b4:	1a000054 	bne	1f90c <CSerialDevice::Write(void const*, unsigned int)+0x174>
   1f7b8:	e3550000 	cmp	r5, #0
   1f7bc:	0a00005a 	beq	1f92c <CSerialDevice::Write(void const*, unsigned int)+0x194>
   1f7c0:	e3580000 	cmp	r8, #0
   1f7c4:	0a00005d 	beq	1f940 <CSerialDevice::Write(void const*, unsigned int)+0x1a8>
   1f7c8:	e3a06000 	mov	r6, #0
   1f7cc:	e3a0900d 	mov	r9, #13
   1f7d0:	ea000002 	b	1f7e0 <CSerialDevice::Write(void const*, unsigned int)+0x48>
   1f7d4:	e2866001 	add	r6, r6, #1
   1f7d8:	e1560008 	cmp	r6, r8
   1f7dc:	0a00000f 	beq	1f820 <CSerialDevice::Write(void const*, unsigned int)+0x88>
   1f7e0:	e5d51000 	ldrb	r1, [r5]
   1f7e4:	e1a00007 	mov	r0, r7
   1f7e8:	ebffffb1 	bl	1f6b4 <CSerialDevice::Write(unsigned char)>
   1f7ec:	e3500000 	cmp	r0, #0
   1f7f0:	0a00000a 	beq	1f820 <CSerialDevice::Write(void const*, unsigned int)+0x88>
   1f7f4:	e4d53001 	ldrb	r3, [r5], #1
   1f7f8:	e353000a 	cmp	r3, #10
   1f7fc:	1afffff4 	bne	1f7d4 <CSerialDevice::Write(void const*, unsigned int)+0x3c>
   1f800:	e59430c0 	ldr	r3, [r4, #192]	; 0xc0
   1f804:	e3130001 	tst	r3, #1
   1f808:	0afffff1 	beq	1f7d4 <CSerialDevice::Write(void const*, unsigned int)+0x3c>
   1f80c:	e1a01009 	mov	r1, r9
   1f810:	e1a00007 	mov	r0, r7
   1f814:	ebffffa6 	bl	1f6b4 <CSerialDevice::Write(unsigned char)>
   1f818:	e3500000 	cmp	r0, #0
   1f81c:	1affffec 	bne	1f7d4 <CSerialDevice::Write(void const*, unsigned int)+0x3c>
   1f820:	e59430d4 	ldr	r3, [r4, #212]	; 0xd4
   1f824:	e3530000 	cmp	r3, #0
   1f828:	1a000035 	bne	1f904 <CSerialDevice::Write(void const*, unsigned int)+0x16c>
   1f82c:	e59730a4 	ldr	r3, [r7, #164]	; 0xa4
   1f830:	e3530000 	cmp	r3, #0
   1f834:	0a000028 	beq	1f8dc <CSerialDevice::Write(void const*, unsigned int)+0x144>
   1f838:	e59400d0 	ldr	r0, [r4, #208]	; 0xd0
   1f83c:	e3500000 	cmp	r0, #0
   1f840:	1a000033 	bne	1f914 <CSerialDevice::Write(void const*, unsigned int)+0x17c>
   1f844:	e59420b8 	ldr	r2, [r4, #184]	; 0xb8
   1f848:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
   1f84c:	e1520003 	cmp	r2, r3
   1f850:	0a000021 	beq	1f8dc <CSerialDevice::Write(void const*, unsigned int)+0x144>
   1f854:	e3a03000 	mov	r3, #0
   1f858:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   1f85c:	e59430b8 	ldr	r3, [r4, #184]	; 0xb8
   1f860:	e59420bc 	ldr	r2, [r4, #188]	; 0xbc
   1f864:	e1520003 	cmp	r2, r3
   1f868:	0a000016 	beq	1f8c8 <CSerialDevice::Write(void const*, unsigned int)+0x130>
   1f86c:	e59f20d4 	ldr	r2, [pc, #212]	; 1f948 <CSerialDevice::Write(void const*, unsigned int)+0x1b0>
   1f870:	e5923018 	ldr	r3, [r2, #24]
   1f874:	e3130020 	tst	r3, #32
   1f878:	1a00001c 	bne	1f8f0 <CSerialDevice::Write(void const*, unsigned int)+0x158>
   1f87c:	e59f00c8 	ldr	r0, [pc, #200]	; 1f94c <CSerialDevice::Write(void const*, unsigned int)+0x1b4>
   1f880:	ea000002 	b	1f890 <CSerialDevice::Write(void const*, unsigned int)+0xf8>
   1f884:	e5923018 	ldr	r3, [r2, #24]
   1f888:	e3130020 	tst	r3, #32
   1f88c:	1a000017 	bne	1f8f0 <CSerialDevice::Write(void const*, unsigned int)+0x158>
   1f890:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
   1f894:	e2831001 	add	r1, r3, #1
   1f898:	e0873003 	add	r3, r7, r3
   1f89c:	e58410bc 	str	r1, [r4, #188]	; 0xbc
   1f8a0:	e2833801 	add	r3, r3, #65536	; 0x10000
   1f8a4:	e5d330b8 	ldrb	r3, [r3, #184]	; 0xb8
   1f8a8:	e5823000 	str	r3, [r2]
   1f8ac:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
   1f8b0:	e0033000 	and	r3, r3, r0
   1f8b4:	e58430bc 	str	r3, [r4, #188]	; 0xbc
   1f8b8:	e59410b8 	ldr	r1, [r4, #184]	; 0xb8
   1f8bc:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
   1f8c0:	e1510003 	cmp	r1, r3
   1f8c4:	1affffee 	bne	1f884 <CSerialDevice::Write(void const*, unsigned int)+0xec>
   1f8c8:	e3a03000 	mov	r3, #0
   1f8cc:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   1f8d0:	e59430d0 	ldr	r3, [r4, #208]	; 0xd0
   1f8d4:	e3530000 	cmp	r3, #0
   1f8d8:	1a000001 	bne	1f8e4 <CSerialDevice::Write(void const*, unsigned int)+0x14c>
   1f8dc:	e1a00006 	mov	r0, r6
   1f8e0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f8e4:	eb000cfb 	bl	22cd8 <LeaveCritical>
   1f8e8:	e1a00006 	mov	r0, r6
   1f8ec:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f8f0:	e59f2050 	ldr	r2, [pc, #80]	; 1f948 <CSerialDevice::Write(void const*, unsigned int)+0x1b0>
   1f8f4:	e5923038 	ldr	r3, [r2, #56]	; 0x38
   1f8f8:	e3833020 	orr	r3, r3, #32
   1f8fc:	e5823038 	str	r3, [r2, #56]	; 0x38
   1f900:	eafffff0 	b	1f8c8 <CSerialDevice::Write(void const*, unsigned int)+0x130>
   1f904:	eb000cf3 	bl	22cd8 <LeaveCritical>
   1f908:	eaffffc7 	b	1f82c <CSerialDevice::Write(void const*, unsigned int)+0x94>
   1f90c:	eb000cc4 	bl	22c24 <EnterCritical>
   1f910:	eaffffa8 	b	1f7b8 <CSerialDevice::Write(void const*, unsigned int)+0x20>
   1f914:	eb000cc2 	bl	22c24 <EnterCritical>
   1f918:	e59420b8 	ldr	r2, [r4, #184]	; 0xb8
   1f91c:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
   1f920:	e1520003 	cmp	r2, r3
   1f924:	1affffca 	bne	1f854 <CSerialDevice::Write(void const*, unsigned int)+0xbc>
   1f928:	eaffffe8 	b	1f8d0 <CSerialDevice::Write(void const*, unsigned int)+0x138>
   1f92c:	e3a020c3 	mov	r2, #195	; 0xc3
   1f930:	e59f1018 	ldr	r1, [pc, #24]	; 1f950 <CSerialDevice::Write(void const*, unsigned int)+0x1b8>
   1f934:	e59f0018 	ldr	r0, [pc, #24]	; 1f954 <CSerialDevice::Write(void const*, unsigned int)+0x1bc>
   1f938:	ebffec4e 	bl	1aa78 <assertion_failed>
   1f93c:	eaffff9f 	b	1f7c0 <CSerialDevice::Write(void const*, unsigned int)+0x28>
   1f940:	e1a06008 	mov	r6, r8
   1f944:	eaffffb5 	b	1f820 <CSerialDevice::Write(void const*, unsigned int)+0x88>
   1f948:	20201000 	.word	0x20201000
   1f94c:	0000ffff 	.word	0x0000ffff
   1f950:	00029930 	.word	0x00029930
   1f954:	0002993c 	.word	0x0002993c

0001f958 <CSerialDevice::InterruptHandler()>:
   1f958:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f95c:	e2804802 	add	r4, r0, #131072	; 0x20000
   1f960:	e1a05000 	mov	r5, r0
   1f964:	e59400d0 	ldr	r0, [r4, #208]	; 0xd0
   1f968:	e24dd004 	sub	sp, sp, #4
   1f96c:	e3500000 	cmp	r0, #0
   1f970:	1a000070 	bne	1fb38 <CSerialDevice::InterruptHandler()+0x1e0>
   1f974:	e3a06000 	mov	r6, #0
   1f978:	ee076f9a 	mcr	15, 0, r6, cr7, cr10, {4}
   1f97c:	e59f21c4 	ldr	r2, [pc, #452]	; 1fb48 <CSerialDevice::InterruptHandler()+0x1f0>
   1f980:	e3e08002 	mvn	r8, #2
   1f984:	e1a00002 	mov	r0, r2
   1f988:	e3e0e001 	mvn	lr, #1
   1f98c:	e3e07000 	mvn	r7, #0
   1f990:	e5921040 	ldr	r1, [r2, #64]	; 0x40
   1f994:	e59fc1b0 	ldr	ip, [pc, #432]	; 1fb4c <CSerialDevice::InterruptHandler()+0x1f4>
   1f998:	e2853801 	add	r3, r5, #65536	; 0x10000
   1f99c:	e5821044 	str	r1, [r2, #68]	; 0x44
   1f9a0:	e5902018 	ldr	r2, [r0, #24]
   1f9a4:	e3120010 	tst	r2, #16
   1f9a8:	1a00001f 	bne	1fa2c <CSerialDevice::InterruptHandler()+0xd4>
   1f9ac:	e5901000 	ldr	r1, [r0]
   1f9b0:	e3110b01 	tst	r1, #1024	; 0x400
   1f9b4:	0a000040 	beq	1fabc <CSerialDevice::InterruptHandler()+0x164>
   1f9b8:	e59320b4 	ldr	r2, [r3, #180]	; 0xb4
   1f9bc:	e3520000 	cmp	r2, #0
   1f9c0:	058370b4 	streq	r7, [r3, #180]	; 0xb4
   1f9c4:	e59490c4 	ldr	r9, [r4, #196]	; 0xc4
   1f9c8:	e3590000 	cmp	r9, #0
   1f9cc:	0a000005 	beq	1f9e8 <CSerialDevice::InterruptHandler()+0x90>
   1f9d0:	e594a0c8 	ldr	sl, [r4, #200]	; 0xc8
   1f9d4:	e6af2071 	sxtb	r2, r1
   1f9d8:	e1dab0d0 	ldrsb	fp, [sl]
   1f9dc:	e15b0002 	cmp	fp, r2
   1f9e0:	158490c8 	strne	r9, [r4, #200]	; 0xc8
   1f9e4:	0a000044 	beq	1fafc <CSerialDevice::InterruptHandler()+0x1a4>
   1f9e8:	e59320ac 	ldr	r2, [r3, #172]	; 0xac
   1f9ec:	e59390b0 	ldr	r9, [r3, #176]	; 0xb0
   1f9f0:	e2822001 	add	r2, r2, #1
   1f9f4:	e002200c 	and	r2, r2, ip
   1f9f8:	e1520009 	cmp	r2, r9
   1f9fc:	0a000034 	beq	1fad4 <CSerialDevice::InterruptHandler()+0x17c>
   1fa00:	e59320ac 	ldr	r2, [r3, #172]	; 0xac
   1fa04:	e2829001 	add	r9, r2, #1
   1fa08:	e0852002 	add	r2, r5, r2
   1fa0c:	e58390ac 	str	r9, [r3, #172]	; 0xac
   1fa10:	e5c210aa 	strb	r1, [r2, #170]	; 0xaa
   1fa14:	e59320ac 	ldr	r2, [r3, #172]	; 0xac
   1fa18:	e002200c 	and	r2, r2, ip
   1fa1c:	e58320ac 	str	r2, [r3, #172]	; 0xac
   1fa20:	e5902018 	ldr	r2, [r0, #24]
   1fa24:	e3120010 	tst	r2, #16
   1fa28:	0affffdf 	beq	1f9ac <CSerialDevice::InterruptHandler()+0x54>
   1fa2c:	e5903018 	ldr	r3, [r0, #24]
   1fa30:	e3130020 	tst	r3, #32
   1fa34:	1a000017 	bne	1fa98 <CSerialDevice::InterruptHandler()+0x140>
   1fa38:	e59420b8 	ldr	r2, [r4, #184]	; 0xb8
   1fa3c:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
   1fa40:	e1520003 	cmp	r2, r3
   1fa44:	0a000032 	beq	1fb14 <CSerialDevice::InterruptHandler()+0x1bc>
   1fa48:	e59f20f8 	ldr	r2, [pc, #248]	; 1fb48 <CSerialDevice::InterruptHandler()+0x1f0>
   1fa4c:	e59f00f8 	ldr	r0, [pc, #248]	; 1fb4c <CSerialDevice::InterruptHandler()+0x1f4>
   1fa50:	ea000003 	b	1fa64 <CSerialDevice::InterruptHandler()+0x10c>
   1fa54:	e59410b8 	ldr	r1, [r4, #184]	; 0xb8
   1fa58:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
   1fa5c:	e1510003 	cmp	r1, r3
   1fa60:	0a00002b 	beq	1fb14 <CSerialDevice::InterruptHandler()+0x1bc>
   1fa64:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
   1fa68:	e2831001 	add	r1, r3, #1
   1fa6c:	e0853003 	add	r3, r5, r3
   1fa70:	e58410bc 	str	r1, [r4, #188]	; 0xbc
   1fa74:	e2833801 	add	r3, r3, #65536	; 0x10000
   1fa78:	e5d330b8 	ldrb	r3, [r3, #184]	; 0xb8
   1fa7c:	e5823000 	str	r3, [r2]
   1fa80:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
   1fa84:	e0033000 	and	r3, r3, r0
   1fa88:	e58430bc 	str	r3, [r4, #188]	; 0xbc
   1fa8c:	e5923018 	ldr	r3, [r2, #24]
   1fa90:	e3130020 	tst	r3, #32
   1fa94:	0affffee 	beq	1fa54 <CSerialDevice::InterruptHandler()+0xfc>
   1fa98:	e3a03000 	mov	r3, #0
   1fa9c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   1faa0:	e59430d0 	ldr	r3, [r4, #208]	; 0xd0
   1faa4:	e3530000 	cmp	r3, #0
   1faa8:	1a000024 	bne	1fb40 <CSerialDevice::InterruptHandler()+0x1e8>
   1faac:	e3560000 	cmp	r6, #0
   1fab0:	1a00001c 	bne	1fb28 <CSerialDevice::InterruptHandler()+0x1d0>
   1fab4:	e28dd004 	add	sp, sp, #4
   1fab8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fabc:	e3110b02 	tst	r1, #2048	; 0x800
   1fac0:	0a000007 	beq	1fae4 <CSerialDevice::InterruptHandler()+0x18c>
   1fac4:	e59320b4 	ldr	r2, [r3, #180]	; 0xb4
   1fac8:	e3520000 	cmp	r2, #0
   1facc:	0583e0b4 	streq	lr, [r3, #180]	; 0xb4
   1fad0:	eaffffbb 	b	1f9c4 <CSerialDevice::InterruptHandler()+0x6c>
   1fad4:	e59320b4 	ldr	r2, [r3, #180]	; 0xb4
   1fad8:	e3520000 	cmp	r2, #0
   1fadc:	0583e0b4 	streq	lr, [r3, #180]	; 0xb4
   1fae0:	eaffffae 	b	1f9a0 <CSerialDevice::InterruptHandler()+0x48>
   1fae4:	e3110c01 	tst	r1, #256	; 0x100
   1fae8:	0affffb5 	beq	1f9c4 <CSerialDevice::InterruptHandler()+0x6c>
   1faec:	e59320b4 	ldr	r2, [r3, #180]	; 0xb4
   1faf0:	e3520000 	cmp	r2, #0
   1faf4:	058380b4 	streq	r8, [r3, #180]	; 0xb4
   1faf8:	eaffffb1 	b	1f9c4 <CSerialDevice::InterruptHandler()+0x6c>
   1fafc:	e28a2001 	add	r2, sl, #1
   1fb00:	e58420c8 	str	r2, [r4, #200]	; 0xc8
   1fb04:	e1da20d1 	ldrsb	r2, [sl, #1]
   1fb08:	e3520000 	cmp	r2, #0
   1fb0c:	03a06001 	moveq	r6, #1
   1fb10:	eaffffb4 	b	1f9e8 <CSerialDevice::InterruptHandler()+0x90>
   1fb14:	e59f202c 	ldr	r2, [pc, #44]	; 1fb48 <CSerialDevice::InterruptHandler()+0x1f0>
   1fb18:	e5923038 	ldr	r3, [r2, #56]	; 0x38
   1fb1c:	e3c33020 	bic	r3, r3, #32
   1fb20:	e5823038 	str	r3, [r2, #56]	; 0x38
   1fb24:	eaffffdb 	b	1fa98 <CSerialDevice::InterruptHandler()+0x140>
   1fb28:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
   1fb2c:	e28dd004 	add	sp, sp, #4
   1fb30:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fb34:	e12fff13 	bx	r3
   1fb38:	eb000c39 	bl	22c24 <EnterCritical>
   1fb3c:	eaffff8c 	b	1f974 <CSerialDevice::InterruptHandler()+0x1c>
   1fb40:	eb000c64 	bl	22cd8 <LeaveCritical>
   1fb44:	eaffffd8 	b	1faac <CSerialDevice::InterruptHandler()+0x154>
   1fb48:	20201000 	.word	0x20201000
   1fb4c:	0000ffff 	.word	0x0000ffff

0001fb50 <CSerialDevice::InterruptStub(void*)>:
   1fb50:	e92d4010 	push	{r4, lr}
   1fb54:	e2504000 	subs	r4, r0, #0
   1fb58:	0a000002 	beq	1fb68 <CSerialDevice::InterruptStub(void*)+0x18>
   1fb5c:	e1a00004 	mov	r0, r4
   1fb60:	e8bd4010 	pop	{r4, lr}
   1fb64:	eaffff7b 	b	1f958 <CSerialDevice::InterruptHandler()>
   1fb68:	e59f0014 	ldr	r0, [pc, #20]	; 1fb84 <CSerialDevice::InterruptStub(void*)+0x34>
   1fb6c:	e59f2014 	ldr	r2, [pc, #20]	; 1fb88 <CSerialDevice::InterruptStub(void*)+0x38>
   1fb70:	e59f1014 	ldr	r1, [pc, #20]	; 1fb8c <CSerialDevice::InterruptStub(void*)+0x3c>
   1fb74:	ebffebbf 	bl	1aa78 <assertion_failed>
   1fb78:	e1a00004 	mov	r0, r4
   1fb7c:	e8bd4010 	pop	{r4, lr}
   1fb80:	eaffff74 	b	1f958 <CSerialDevice::InterruptHandler()>
   1fb84:	00024764 	.word	0x00024764
   1fb88:	0000022e 	.word	0x0000022e
   1fb8c:	00029930 	.word	0x00029930

0001fb90 <CSerialDevice::~CSerialDevice()>:
   1fb90:	e59f20a4 	ldr	r2, [pc, #164]	; 1fc3c <CSerialDevice::~CSerialDevice()+0xac>
   1fb94:	e92d4010 	push	{r4, lr}
   1fb98:	e3a03000 	mov	r3, #0
   1fb9c:	e1a04000 	mov	r4, r0
   1fba0:	e5802000 	str	r2, [r0]
   1fba4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   1fba8:	e59f2090 	ldr	r2, [pc, #144]	; 1fc40 <CSerialDevice::~CSerialDevice()+0xb0>
   1fbac:	e5823038 	str	r3, [r2, #56]	; 0x38
   1fbb0:	e5823030 	str	r3, [r2, #48]	; 0x30
   1fbb4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   1fbb8:	e5d030a9 	ldrb	r3, [r0, #169]	; 0xa9
   1fbbc:	e3530000 	cmp	r3, #0
   1fbc0:	0a000006 	beq	1fbe0 <CSerialDevice::~CSerialDevice()+0x50>
   1fbc4:	e59000a4 	ldr	r0, [r0, #164]	; 0xa4
   1fbc8:	e3500000 	cmp	r0, #0
   1fbcc:	0a000014 	beq	1fc24 <CSerialDevice::~CSerialDevice()+0x94>
   1fbd0:	e5d430a8 	ldrb	r3, [r4, #168]	; 0xa8
   1fbd4:	e3530000 	cmp	r3, #0
   1fbd8:	0a00000e 	beq	1fc18 <CSerialDevice::~CSerialDevice()+0x88>
   1fbdc:	ebfff2bf 	bl	1c6e0 <CInterruptSystem::DisconnectFIQ()>
   1fbe0:	e3a03000 	mov	r3, #0
   1fbe4:	e284007c 	add	r0, r4, #124	; 0x7c
   1fbe8:	e58430a4 	str	r3, [r4, #164]	; 0xa4
   1fbec:	ebffef3a 	bl	1b8dc <CGPIOPin::~CGPIOPin()>
   1fbf0:	e2840054 	add	r0, r4, #84	; 0x54
   1fbf4:	ebffef38 	bl	1b8dc <CGPIOPin::~CGPIOPin()>
   1fbf8:	e284002c 	add	r0, r4, #44	; 0x2c
   1fbfc:	ebffef36 	bl	1b8dc <CGPIOPin::~CGPIOPin()>
   1fc00:	e2840004 	add	r0, r4, #4
   1fc04:	ebffef34 	bl	1b8dc <CGPIOPin::~CGPIOPin()>
   1fc08:	e1a00004 	mov	r0, r4
   1fc0c:	ebffed95 	bl	1b268 <CDevice::~CDevice()>
   1fc10:	e1a00004 	mov	r0, r4
   1fc14:	e8bd8010 	pop	{r4, pc}
   1fc18:	e3a01039 	mov	r1, #57	; 0x39
   1fc1c:	ebfff32a 	bl	1c8cc <CInterruptSystem::DisconnectIRQ(unsigned int)>
   1fc20:	eaffffee 	b	1fbe0 <CSerialDevice::~CSerialDevice()+0x50>
   1fc24:	e59f0018 	ldr	r0, [pc, #24]	; 1fc44 <CSerialDevice::~CSerialDevice()+0xb4>
   1fc28:	e3a02079 	mov	r2, #121	; 0x79
   1fc2c:	e59f1014 	ldr	r1, [pc, #20]	; 1fc48 <CSerialDevice::~CSerialDevice()+0xb8>
   1fc30:	ebffeb90 	bl	1aa78 <assertion_failed>
   1fc34:	e59400a4 	ldr	r0, [r4, #164]	; 0xa4
   1fc38:	eaffffe4 	b	1fbd0 <CSerialDevice::~CSerialDevice()+0x40>
   1fc3c:	0002991c 	.word	0x0002991c
   1fc40:	20201000 	.word	0x20201000
   1fc44:	0002479c 	.word	0x0002479c
   1fc48:	00029930 	.word	0x00029930

0001fc4c <CSerialDevice::~CSerialDevice()>:
   1fc4c:	e92d4010 	push	{r4, lr}
   1fc50:	e1a04000 	mov	r4, r0
   1fc54:	ebffffcd 	bl	1fb90 <CSerialDevice::~CSerialDevice()>
   1fc58:	e1a00004 	mov	r0, r4
   1fc5c:	e59f1008 	ldr	r1, [pc, #8]	; 1fc6c <CSerialDevice::~CSerialDevice()+0x20>
   1fc60:	eb000c4d 	bl	22d9c <operator delete(void*, unsigned int)>
   1fc64:	e1a00004 	mov	r0, r4
   1fc68:	e8bd8010 	pop	{r4, pc}
   1fc6c:	000200d8 	.word	0x000200d8

0001fc70 <CString::~CString()>:
   1fc70:	e92d4010 	push	{r4, lr}
   1fc74:	e1a04000 	mov	r4, r0
   1fc78:	e5900004 	ldr	r0, [r0, #4]
   1fc7c:	e59f3014 	ldr	r3, [pc, #20]	; 1fc98 <CString::~CString()+0x28>
   1fc80:	e3500000 	cmp	r0, #0
   1fc84:	e5843000 	str	r3, [r4]
   1fc88:	0a000000 	beq	1fc90 <CString::~CString()+0x20>
   1fc8c:	eb000c41 	bl	22d98 <operator delete[](void*)>
   1fc90:	e1a00004 	mov	r0, r4
   1fc94:	e8bd8010 	pop	{r4, pc}
   1fc98:	000299f8 	.word	0x000299f8

0001fc9c <CString::~CString()>:
   1fc9c:	e92d4010 	push	{r4, lr}
   1fca0:	e1a04000 	mov	r4, r0
   1fca4:	e5900004 	ldr	r0, [r0, #4]
   1fca8:	e59f3020 	ldr	r3, [pc, #32]	; 1fcd0 <CString::~CString()+0x34>
   1fcac:	e3500000 	cmp	r0, #0
   1fcb0:	e5843000 	str	r3, [r4]
   1fcb4:	0a000000 	beq	1fcbc <CString::~CString()+0x20>
   1fcb8:	eb000c36 	bl	22d98 <operator delete[](void*)>
   1fcbc:	e1a00004 	mov	r0, r4
   1fcc0:	e3a01010 	mov	r1, #16
   1fcc4:	eb000c34 	bl	22d9c <operator delete(void*, unsigned int)>
   1fcc8:	e1a00004 	mov	r0, r4
   1fccc:	e8bd8010 	pop	{r4, pc}
   1fcd0:	000299f8 	.word	0x000299f8

0001fcd4 <CString::ReserveSpace(unsigned int) [clone .part.0]>:
   1fcd4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1fcd8:	e990002c 	ldmib	r0, {r2, r3, r5}
   1fcdc:	e0455002 	sub	r5, r5, r2
   1fce0:	e0851001 	add	r1, r5, r1
   1fce4:	e2812001 	add	r2, r1, #1
   1fce8:	e1520003 	cmp	r2, r3
   1fcec:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
   1fcf0:	e1a04000 	mov	r4, r0
   1fcf4:	e2816041 	add	r6, r1, #65	; 0x41
   1fcf8:	e1a00006 	mov	r0, r6
   1fcfc:	eb000c23 	bl	22d90 <operator new[](unsigned int)>
   1fd00:	e3a02000 	mov	r2, #0
   1fd04:	e594300c 	ldr	r3, [r4, #12]
   1fd08:	e1a07000 	mov	r7, r0
   1fd0c:	e5c32000 	strb	r2, [r3]
   1fd10:	e5941004 	ldr	r1, [r4, #4]
   1fd14:	eb00084c 	bl	21e4c <strcpy>
   1fd18:	e5940004 	ldr	r0, [r4, #4]
   1fd1c:	e3500000 	cmp	r0, #0
   1fd20:	0a000000 	beq	1fd28 <CString::ReserveSpace(unsigned int) [clone .part.0]+0x54>
   1fd24:	eb000c1b 	bl	22d98 <operator delete[](void*)>
   1fd28:	e0875005 	add	r5, r7, r5
   1fd2c:	e584500c 	str	r5, [r4, #12]
   1fd30:	e5847004 	str	r7, [r4, #4]
   1fd34:	e5846008 	str	r6, [r4, #8]
   1fd38:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0001fd3c <CString::CString()>:
   1fd3c:	e3a02000 	mov	r2, #0
   1fd40:	e59f1008 	ldr	r1, [pc, #8]	; 1fd50 <CString::CString()+0x14>
   1fd44:	e5802008 	str	r2, [r0, #8]
   1fd48:	e8800006 	stm	r0, {r1, r2}
   1fd4c:	e12fff1e 	bx	lr
   1fd50:	000299f8 	.word	0x000299f8

0001fd54 <CString::CString(char const*)>:
   1fd54:	e92d4070 	push	{r4, r5, r6, lr}
   1fd58:	e1a04000 	mov	r4, r0
   1fd5c:	e59f302c 	ldr	r3, [pc, #44]	; 1fd90 <CString::CString(char const*)+0x3c>
   1fd60:	e1a00001 	mov	r0, r1
   1fd64:	e5843000 	str	r3, [r4]
   1fd68:	e1a05001 	mov	r5, r1
   1fd6c:	eb0007b8 	bl	21c54 <strlen>
   1fd70:	e2800001 	add	r0, r0, #1
   1fd74:	e5840008 	str	r0, [r4, #8]
   1fd78:	eb000c04 	bl	22d90 <operator new[](unsigned int)>
   1fd7c:	e1a01005 	mov	r1, r5
   1fd80:	e5840004 	str	r0, [r4, #4]
   1fd84:	eb000830 	bl	21e4c <strcpy>
   1fd88:	e1a00004 	mov	r0, r4
   1fd8c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1fd90:	000299f8 	.word	0x000299f8

0001fd94 <CString::operator char const*() const>:
   1fd94:	e5900004 	ldr	r0, [r0, #4]
   1fd98:	e59f3008 	ldr	r3, [pc, #8]	; 1fda8 <CString::operator char const*() const+0x14>
   1fd9c:	e3500000 	cmp	r0, #0
   1fda0:	01a00003 	moveq	r0, r3
   1fda4:	e12fff1e 	bx	lr
   1fda8:	0002635c 	.word	0x0002635c

0001fdac <CString::operator=(char const*)>:
   1fdac:	e92d4070 	push	{r4, r5, r6, lr}
   1fdb0:	e1a04000 	mov	r4, r0
   1fdb4:	e5900004 	ldr	r0, [r0, #4]
   1fdb8:	e1a05001 	mov	r5, r1
   1fdbc:	e3500000 	cmp	r0, #0
   1fdc0:	0a000000 	beq	1fdc8 <CString::operator=(char const*)+0x1c>
   1fdc4:	eb000bf3 	bl	22d98 <operator delete[](void*)>
   1fdc8:	e1a00005 	mov	r0, r5
   1fdcc:	eb0007a0 	bl	21c54 <strlen>
   1fdd0:	e2800001 	add	r0, r0, #1
   1fdd4:	e5840008 	str	r0, [r4, #8]
   1fdd8:	eb000bec 	bl	22d90 <operator new[](unsigned int)>
   1fddc:	e1a01005 	mov	r1, r5
   1fde0:	e5840004 	str	r0, [r4, #4]
   1fde4:	eb000818 	bl	21e4c <strcpy>
   1fde8:	e5940004 	ldr	r0, [r4, #4]
   1fdec:	e8bd8070 	pop	{r4, r5, r6, pc}

0001fdf0 <CString::operator=(CString const&)>:
   1fdf0:	e92d4070 	push	{r4, r5, r6, lr}
   1fdf4:	e1a04000 	mov	r4, r0
   1fdf8:	e5900004 	ldr	r0, [r0, #4]
   1fdfc:	e1a06001 	mov	r6, r1
   1fe00:	e3500000 	cmp	r0, #0
   1fe04:	0a000000 	beq	1fe0c <CString::operator=(CString const&)+0x1c>
   1fe08:	eb000be2 	bl	22d98 <operator delete[](void*)>
   1fe0c:	e5960004 	ldr	r0, [r6, #4]
   1fe10:	e59f5030 	ldr	r5, [pc, #48]	; 1fe48 <CString::operator=(CString const&)+0x58>
   1fe14:	e3500000 	cmp	r0, #0
   1fe18:	01a00005 	moveq	r0, r5
   1fe1c:	eb00078c 	bl	21c54 <strlen>
   1fe20:	e2800001 	add	r0, r0, #1
   1fe24:	e5840008 	str	r0, [r4, #8]
   1fe28:	eb000bd8 	bl	22d90 <operator new[](unsigned int)>
   1fe2c:	e5840004 	str	r0, [r4, #4]
   1fe30:	e5961004 	ldr	r1, [r6, #4]
   1fe34:	e3510000 	cmp	r1, #0
   1fe38:	01a01005 	moveq	r1, r5
   1fe3c:	eb000802 	bl	21e4c <strcpy>
   1fe40:	e1a00004 	mov	r0, r4
   1fe44:	e8bd8070 	pop	{r4, r5, r6, pc}
   1fe48:	0002635c 	.word	0x0002635c

0001fe4c <CString::GetLength() const>:
   1fe4c:	e5900004 	ldr	r0, [r0, #4]
   1fe50:	e3500000 	cmp	r0, #0
   1fe54:	012fff1e 	bxeq	lr
   1fe58:	ea00077d 	b	21c54 <strlen>

0001fe5c <CString::Append(char const*)>:
   1fe5c:	e92d4070 	push	{r4, r5, r6, lr}
   1fe60:	e3a03001 	mov	r3, #1
   1fe64:	e1a04000 	mov	r4, r0
   1fe68:	e5900004 	ldr	r0, [r0, #4]
   1fe6c:	e1a06001 	mov	r6, r1
   1fe70:	e3500000 	cmp	r0, #0
   1fe74:	e5843008 	str	r3, [r4, #8]
   1fe78:	0a000003 	beq	1fe8c <CString::Append(char const*)+0x30>
   1fe7c:	eb000774 	bl	21c54 <strlen>
   1fe80:	e5943008 	ldr	r3, [r4, #8]
   1fe84:	e0830000 	add	r0, r3, r0
   1fe88:	e5840008 	str	r0, [r4, #8]
   1fe8c:	e1a00006 	mov	r0, r6
   1fe90:	eb00076f 	bl	21c54 <strlen>
   1fe94:	e5943008 	ldr	r3, [r4, #8]
   1fe98:	e0800003 	add	r0, r0, r3
   1fe9c:	e5840008 	str	r0, [r4, #8]
   1fea0:	eb000bba 	bl	22d90 <operator new[](unsigned int)>
   1fea4:	e5941004 	ldr	r1, [r4, #4]
   1fea8:	e1a05000 	mov	r5, r0
   1feac:	e3510000 	cmp	r1, #0
   1feb0:	05c01000 	strbeq	r1, [r0]
   1feb4:	0a000004 	beq	1fecc <CString::Append(char const*)+0x70>
   1feb8:	eb0007e3 	bl	21e4c <strcpy>
   1febc:	e5940004 	ldr	r0, [r4, #4]
   1fec0:	e3500000 	cmp	r0, #0
   1fec4:	0a000000 	beq	1fecc <CString::Append(char const*)+0x70>
   1fec8:	eb000bb2 	bl	22d98 <operator delete[](void*)>
   1fecc:	e1a01006 	mov	r1, r6
   1fed0:	e1a00005 	mov	r0, r5
   1fed4:	eb0007fa 	bl	21ec4 <strcat>
   1fed8:	e5845004 	str	r5, [r4, #4]
   1fedc:	e8bd8070 	pop	{r4, r5, r6, pc}

0001fee0 <CString::Compare(char const*) const>:
   1fee0:	e5900004 	ldr	r0, [r0, #4]
   1fee4:	ea000764 	b	21c7c <strcmp>

0001fee8 <CString::Find(char) const>:
   1fee8:	e5902004 	ldr	r2, [r0, #4]
   1feec:	e1d230d0 	ldrsb	r3, [r2]
   1fef0:	e3530000 	cmp	r3, #0
   1fef4:	0a000009 	beq	1ff20 <CString::Find(char) const+0x38>
   1fef8:	e1510003 	cmp	r1, r3
   1fefc:	e3a00000 	mov	r0, #0
   1ff00:	1a000002 	bne	1ff10 <CString::Find(char) const+0x28>
   1ff04:	ea000007 	b	1ff28 <CString::Find(char) const+0x40>
   1ff08:	e1530001 	cmp	r3, r1
   1ff0c:	012fff1e 	bxeq	lr
   1ff10:	e1f230d1 	ldrsb	r3, [r2, #1]!
   1ff14:	e2800001 	add	r0, r0, #1
   1ff18:	e3530000 	cmp	r3, #0
   1ff1c:	1afffff9 	bne	1ff08 <CString::Find(char) const+0x20>
   1ff20:	e3e00000 	mvn	r0, #0
   1ff24:	e12fff1e 	bx	lr
   1ff28:	e12fff1e 	bx	lr

0001ff2c <CString::PutChar(char, unsigned int)>:
   1ff2c:	e92d4070 	push	{r4, r5, r6, lr}
   1ff30:	e2524000 	subs	r4, r2, #0
   1ff34:	08bd8070 	popeq	{r4, r5, r6, pc}
   1ff38:	e1a06001 	mov	r6, r1
   1ff3c:	e1a01004 	mov	r1, r4
   1ff40:	e1a05000 	mov	r5, r0
   1ff44:	ebffff62 	bl	1fcd4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   1ff48:	e2443001 	sub	r3, r4, #1
   1ff4c:	e595200c 	ldr	r2, [r5, #12]
   1ff50:	e2433001 	sub	r3, r3, #1
   1ff54:	e2820001 	add	r0, r2, #1
   1ff58:	e3730001 	cmn	r3, #1
   1ff5c:	e585000c 	str	r0, [r5, #12]
   1ff60:	e5c26000 	strb	r6, [r2]
   1ff64:	1afffff8 	bne	1ff4c <CString::PutChar(char, unsigned int)+0x20>
   1ff68:	e8bd8070 	pop	{r4, r5, r6, pc}

0001ff6c <CString::PutString(char const*)>:
   1ff6c:	e92d4070 	push	{r4, r5, r6, lr}
   1ff70:	e1a04000 	mov	r4, r0
   1ff74:	e1a00001 	mov	r0, r1
   1ff78:	e1a05001 	mov	r5, r1
   1ff7c:	eb000734 	bl	21c54 <strlen>
   1ff80:	e2506000 	subs	r6, r0, #0
   1ff84:	0a000002 	beq	1ff94 <CString::PutString(char const*)+0x28>
   1ff88:	e1a01006 	mov	r1, r6
   1ff8c:	e1a00004 	mov	r0, r4
   1ff90:	ebffff4f 	bl	1fcd4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   1ff94:	e1a01005 	mov	r1, r5
   1ff98:	e594000c 	ldr	r0, [r4, #12]
   1ff9c:	eb0007aa 	bl	21e4c <strcpy>
   1ffa0:	e594100c 	ldr	r1, [r4, #12]
   1ffa4:	e0811006 	add	r1, r1, r6
   1ffa8:	e584100c 	str	r1, [r4, #12]
   1ffac:	e8bd8070 	pop	{r4, r5, r6, pc}

0001ffb0 <CString::Replace(char const*, char const*)>:
   1ffb0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ffb4:	e1d180d0 	ldrsb	r8, [r1]
   1ffb8:	e24dd014 	sub	sp, sp, #20
   1ffbc:	e3580000 	cmp	r8, #0
   1ffc0:	1a000002 	bne	1ffd0 <CString::Replace(char const*, char const*)+0x20>
   1ffc4:	e1a00008 	mov	r0, r8
   1ffc8:	e28dd014 	add	sp, sp, #20
   1ffcc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ffd0:	e1a0a000 	mov	sl, r0
   1ffd4:	e1a07001 	mov	r7, r1
   1ffd8:	e5901004 	ldr	r1, [r0, #4]
   1ffdc:	e1a0000d 	mov	r0, sp
   1ffe0:	e1a09002 	mov	r9, r2
   1ffe4:	ebffff5a 	bl	1fd54 <CString::CString(char const*)>
   1ffe8:	e59a0004 	ldr	r0, [sl, #4]
   1ffec:	e3500000 	cmp	r0, #0
   1fff0:	0a000000 	beq	1fff8 <CString::Replace(char const*, char const*)+0x48>
   1fff4:	eb000b67 	bl	22d98 <operator delete[](void*)>
   1fff8:	e3a00040 	mov	r0, #64	; 0x40
   1fffc:	e58a0008 	str	r0, [sl, #8]
   20000:	eb000b62 	bl	22d90 <operator new[](unsigned int)>
   20004:	e3a08000 	mov	r8, #0
   20008:	e3a06001 	mov	r6, #1
   2000c:	e59d4004 	ldr	r4, [sp, #4]
   20010:	e58a0004 	str	r0, [sl, #4]
   20014:	e58a000c 	str	r0, [sl, #12]
   20018:	e1d710d0 	ldrsb	r1, [r7]
   2001c:	e1a00004 	mov	r0, r4
   20020:	eb0007b8 	bl	21f08 <strchr>
   20024:	e2505000 	subs	r5, r0, #0
   20028:	0a00002d 	beq	200e4 <CString::Replace(char const*, char const*)+0x134>
   2002c:	e1540005 	cmp	r4, r5
   20030:	2a000039 	bcs	2011c <CString::Replace(char const*, char const*)+0x16c>
   20034:	e1a01006 	mov	r1, r6
   20038:	e1a0000a 	mov	r0, sl
   2003c:	e0d4b0d1 	ldrsb	fp, [r4], #1
   20040:	ebffff23 	bl	1fcd4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   20044:	e59a300c 	ldr	r3, [sl, #12]
   20048:	e1550004 	cmp	r5, r4
   2004c:	e2832001 	add	r2, r3, #1
   20050:	e58a200c 	str	r2, [sl, #12]
   20054:	e5c3b000 	strb	fp, [r3]
   20058:	1afffff5 	bne	20034 <CString::Replace(char const*, char const*)+0x84>
   2005c:	e1a0c005 	mov	ip, r5
   20060:	e2854001 	add	r4, r5, #1
   20064:	e1d730d1 	ldrsb	r3, [r7, #1]
   20068:	e2871001 	add	r1, r7, #1
   2006c:	e3530000 	cmp	r3, #0
   20070:	0a00000c 	beq	200a8 <CString::Replace(char const*, char const*)+0xf8>
   20074:	e1d520d1 	ldrsb	r2, [r5, #1]
   20078:	e1520003 	cmp	r2, r3
   2007c:	1a00000e 	bne	200bc <CString::Replace(char const*, char const*)+0x10c>
   20080:	e2853002 	add	r3, r5, #2
   20084:	ea000003 	b	20098 <CString::Replace(char const*, char const*)+0xe8>
   20088:	e1d400d0 	ldrsb	r0, [r4]
   2008c:	e2833001 	add	r3, r3, #1
   20090:	e1500002 	cmp	r0, r2
   20094:	1a000008 	bne	200bc <CString::Replace(char const*, char const*)+0x10c>
   20098:	e1f120d1 	ldrsb	r2, [r1, #1]!
   2009c:	e1a04003 	mov	r4, r3
   200a0:	e3520000 	cmp	r2, #0
   200a4:	1afffff7 	bne	20088 <CString::Replace(char const*, char const*)+0xd8>
   200a8:	e1a01009 	mov	r1, r9
   200ac:	e1a0000a 	mov	r0, sl
   200b0:	e2888001 	add	r8, r8, #1
   200b4:	ebffffac 	bl	1ff6c <CString::PutString(char const*)>
   200b8:	eaffffd6 	b	20018 <CString::Replace(char const*, char const*)+0x68>
   200bc:	e1a01006 	mov	r1, r6
   200c0:	e1a0000a 	mov	r0, sl
   200c4:	e1dc50d0 	ldrsb	r5, [ip]
   200c8:	e28c4001 	add	r4, ip, #1
   200cc:	ebffff00 	bl	1fcd4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   200d0:	e59a300c 	ldr	r3, [sl, #12]
   200d4:	e2832001 	add	r2, r3, #1
   200d8:	e58a200c 	str	r2, [sl, #12]
   200dc:	e5c35000 	strb	r5, [r3]
   200e0:	eaffffcc 	b	20018 <CString::Replace(char const*, char const*)+0x68>
   200e4:	e1a0000a 	mov	r0, sl
   200e8:	e1a01004 	mov	r1, r4
   200ec:	ebffff9e 	bl	1ff6c <CString::PutString(char const*)>
   200f0:	e59a200c 	ldr	r2, [sl, #12]
   200f4:	e59f302c 	ldr	r3, [pc, #44]	; 20128 <CString::Replace(char const*, char const*)+0x178>
   200f8:	e5c25000 	strb	r5, [r2]
   200fc:	e59d0004 	ldr	r0, [sp, #4]
   20100:	e58d3000 	str	r3, [sp]
   20104:	e3500000 	cmp	r0, #0
   20108:	0affffad 	beq	1ffc4 <CString::Replace(char const*, char const*)+0x14>
   2010c:	eb000b21 	bl	22d98 <operator delete[](void*)>
   20110:	e1a00008 	mov	r0, r8
   20114:	e28dd014 	add	sp, sp, #20
   20118:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2011c:	e1a0c004 	mov	ip, r4
   20120:	e2854001 	add	r4, r5, #1
   20124:	eaffffce 	b	20064 <CString::Replace(char const*, char const*)+0xb4>
   20128:	000299f8 	.word	0x000299f8

0002012c <CString::ReserveSpace(unsigned int)>:
   2012c:	e3510000 	cmp	r1, #0
   20130:	012fff1e 	bxeq	lr
   20134:	eafffee6 	b	1fcd4 <CString::ReserveSpace(unsigned int) [clone .part.0]>

00020138 <CString::ntoa(char*, unsigned long, unsigned int, bool)>:
   20138:	e1510002 	cmp	r1, r2
   2013c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   20140:	e1a05001 	mov	r5, r1
   20144:	e1a07002 	mov	r7, r2
   20148:	e1a09000 	mov	r9, r0
   2014c:	e1a08003 	mov	r8, r3
   20150:	23a0a001 	movcs	sl, #1
   20154:	3a000022 	bcc	201e4 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0xac>
   20158:	e00a0a97 	mul	sl, r7, sl
   2015c:	e1a00005 	mov	r0, r5
   20160:	e1a0100a 	mov	r1, sl
   20164:	eb00105c 	bl	242dc <__aeabi_uidiv>
   20168:	e1500007 	cmp	r0, r7
   2016c:	e1a04000 	mov	r4, r0
   20170:	2afffff8 	bcs	20158 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x20>
   20174:	e3580000 	cmp	r8, #0
   20178:	13a08037 	movne	r8, #55	; 0x37
   2017c:	03a08057 	moveq	r8, #87	; 0x57
   20180:	e1a06009 	mov	r6, r9
   20184:	ea000003 	b	20198 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x60>
   20188:	e1a0100a 	mov	r1, sl
   2018c:	e1a00005 	mov	r0, r5
   20190:	eb001051 	bl	242dc <__aeabi_uidiv>
   20194:	e1a04000 	mov	r4, r0
   20198:	e1a00005 	mov	r0, r5
   2019c:	e1a0100a 	mov	r1, sl
   201a0:	eb00108a 	bl	243d0 <__aeabi_uidivmod>
   201a4:	e3540009 	cmp	r4, #9
   201a8:	e2843030 	add	r3, r4, #48	; 0x30
   201ac:	80884004 	addhi	r4, r8, r4
   201b0:	96af4073 	sxtbls	r4, r3
   201b4:	86af4074 	sxtbhi	r4, r4
   201b8:	e2866001 	add	r6, r6, #1
   201bc:	e1a0000a 	mov	r0, sl
   201c0:	e1a05001 	mov	r5, r1
   201c4:	e5464001 	strb	r4, [r6, #-1]
   201c8:	e1a01007 	mov	r1, r7
   201cc:	eb001042 	bl	242dc <__aeabi_uidiv>
   201d0:	e250a000 	subs	sl, r0, #0
   201d4:	1affffeb 	bne	20188 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x50>
   201d8:	e5c6a000 	strb	sl, [r6]
   201dc:	e1a00009 	mov	r0, r9
   201e0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   201e4:	e1a04001 	mov	r4, r1
   201e8:	e3a0a001 	mov	sl, #1
   201ec:	eaffffe0 	b	20174 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x3c>

000201f0 <CString::ftoa(char*, double, unsigned int)>:
   201f0:	eeb50bc0 	vcmpe.f64	d0, #0.0
   201f4:	eef1fa10 	vmrs	APSR_nzcv, fpscr
   201f8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   201fc:	ed9f7b95 	vldr	d7, [pc, #596]	; 20458 <CString::ftoa(char*, double, unsigned int)+0x268>
   20200:	ed2d8b02 	vpush	{d8}
   20204:	eeb08b40 	vmov.f64	d8, d0
   20208:	4eb18b40 	vnegmi.f64	d8, d0
   2020c:	43a0302d 	movmi	r3, #45	; 0x2d
   20210:	eeb48bc7 	vcmpe.f64	d8, d7
   20214:	45c03000 	strbmi	r3, [r0]
   20218:	4280b001 	addmi	fp, r0, #1
   2021c:	51a0b000 	movpl	fp, r0
   20220:	eef1fa10 	vmrs	APSR_nzcv, fpscr
   20224:	e24dd01c 	sub	sp, sp, #28
   20228:	e1a0a000 	mov	sl, r0
   2022c:	e58d1004 	str	r1, [sp, #4]
   20230:	ca000079 	bgt	2041c <CString::ftoa(char*, double, unsigned int)+0x22c>
   20234:	eefc7bc8 	vcvt.u32.f64	s15, d8
   20238:	ee177a90 	vmov	r7, s15
   2023c:	e3570009 	cmp	r7, #9
   20240:	83a04001 	movhi	r4, #1
   20244:	9a00007b 	bls	20438 <CString::ftoa(char*, double, unsigned int)+0x248>
   20248:	e0844104 	add	r4, r4, r4, lsl #2
   2024c:	e1a04084 	lsl	r4, r4, #1
   20250:	e1a01004 	mov	r1, r4
   20254:	e1a00007 	mov	r0, r7
   20258:	eb00101f 	bl	242dc <__aeabi_uidiv>
   2025c:	e3500009 	cmp	r0, #9
   20260:	e1a05000 	mov	r5, r0
   20264:	8afffff7 	bhi	20248 <CString::ftoa(char*, double, unsigned int)+0x58>
   20268:	e1a0600b 	mov	r6, fp
   2026c:	e1a09007 	mov	r9, r7
   20270:	e59f81f0 	ldr	r8, [pc, #496]	; 20468 <CString::ftoa(char*, double, unsigned int)+0x278>
   20274:	ea000003 	b	20288 <CString::ftoa(char*, double, unsigned int)+0x98>
   20278:	e1a01004 	mov	r1, r4
   2027c:	e1a00009 	mov	r0, r9
   20280:	eb001015 	bl	242dc <__aeabi_uidiv>
   20284:	e1a05000 	mov	r5, r0
   20288:	e1a00009 	mov	r0, r9
   2028c:	e1a01004 	mov	r1, r4
   20290:	eb00104e 	bl	243d0 <__aeabi_uidivmod>
   20294:	e0843498 	umull	r3, r4, r8, r4
   20298:	e3550009 	cmp	r5, #9
   2029c:	e2852030 	add	r2, r5, #48	; 0x30
   202a0:	82855057 	addhi	r5, r5, #87	; 0x57
   202a4:	96af5072 	sxtbls	r5, r2
   202a8:	86af5075 	sxtbhi	r5, r5
   202ac:	e2866001 	add	r6, r6, #1
   202b0:	e1b041a4 	lsrs	r4, r4, #3
   202b4:	e1a09001 	mov	r9, r1
   202b8:	e5465001 	strb	r5, [r6, #-1]
   202bc:	1affffed 	bne	20278 <CString::ftoa(char*, double, unsigned int)+0x88>
   202c0:	e59d3004 	ldr	r3, [sp, #4]
   202c4:	e5c64000 	strb	r4, [r6]
   202c8:	e3530000 	cmp	r3, #0
   202cc:	1a000003 	bne	202e0 <CString::ftoa(char*, double, unsigned int)+0xf0>
   202d0:	e1a0000a 	mov	r0, sl
   202d4:	e28dd01c 	add	sp, sp, #28
   202d8:	ecbd8b02 	vpop	{d8}
   202dc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   202e0:	e1a0000b 	mov	r0, fp
   202e4:	eb00065a 	bl	21c54 <strlen>
   202e8:	e59d3004 	ldr	r3, [sp, #4]
   202ec:	e08b2000 	add	r2, fp, r0
   202f0:	e3530009 	cmp	r3, #9
   202f4:	31a09003 	movcc	r9, r3
   202f8:	23a09009 	movcs	r9, #9
   202fc:	e3a0302e 	mov	r3, #46	; 0x2e
   20300:	e3590001 	cmp	r9, #1
   20304:	e7cb3000 	strb	r3, [fp, r0]
   20308:	e58d2004 	str	r2, [sp, #4]
   2030c:	e282b001 	add	fp, r2, #1
   20310:	0a00004e 	beq	20450 <CString::ftoa(char*, double, unsigned int)+0x260>
   20314:	e3a02002 	mov	r2, #2
   20318:	e3a0300a 	mov	r3, #10
   2031c:	e2822001 	add	r2, r2, #1
   20320:	e0833103 	add	r3, r3, r3, lsl #2
   20324:	e1520009 	cmp	r2, r9
   20328:	e1a03083 	lsl	r3, r3, #1
   2032c:	9afffffa 	bls	2031c <CString::ftoa(char*, double, unsigned int)+0x12c>
   20330:	ee073a90 	vmov	s15, r3
   20334:	eeb87b67 	vcvt.f64.u32	d7, s15
   20338:	ee067a90 	vmov	s13, r7
   2033c:	eeb86b66 	vcvt.f64.u32	d6, s13
   20340:	ee386b46 	vsub.f64	d6, d8, d6
   20344:	ee267b07 	vmul.f64	d7, d6, d7
   20348:	eefc7bc7 	vcvt.u32.f64	s15, d7
   2034c:	ee178a90 	vmov	r8, s15
   20350:	e3580009 	cmp	r8, #9
   20354:	83a04001 	movhi	r4, #1
   20358:	9a000039 	bls	20444 <CString::ftoa(char*, double, unsigned int)+0x254>
   2035c:	e0844104 	add	r4, r4, r4, lsl #2
   20360:	e1a04084 	lsl	r4, r4, #1
   20364:	e1a01004 	mov	r1, r4
   20368:	e1a00008 	mov	r0, r8
   2036c:	eb000fda 	bl	242dc <__aeabi_uidiv>
   20370:	e3500009 	cmp	r0, #9
   20374:	e1a05000 	mov	r5, r0
   20378:	8afffff7 	bhi	2035c <CString::ftoa(char*, double, unsigned int)+0x16c>
   2037c:	e28d600c 	add	r6, sp, #12
   20380:	e59f70e0 	ldr	r7, [pc, #224]	; 20468 <CString::ftoa(char*, double, unsigned int)+0x278>
   20384:	ea000003 	b	20398 <CString::ftoa(char*, double, unsigned int)+0x1a8>
   20388:	e1a01004 	mov	r1, r4
   2038c:	e1a00008 	mov	r0, r8
   20390:	eb000fd1 	bl	242dc <__aeabi_uidiv>
   20394:	e1a05000 	mov	r5, r0
   20398:	e1a00008 	mov	r0, r8
   2039c:	e1a01004 	mov	r1, r4
   203a0:	eb00100a 	bl	243d0 <__aeabi_uidivmod>
   203a4:	e0843497 	umull	r3, r4, r7, r4
   203a8:	e3550009 	cmp	r5, #9
   203ac:	e2852030 	add	r2, r5, #48	; 0x30
   203b0:	82855057 	addhi	r5, r5, #87	; 0x57
   203b4:	96af5072 	sxtbls	r5, r2
   203b8:	86af5075 	sxtbhi	r5, r5
   203bc:	e2866001 	add	r6, r6, #1
   203c0:	e1b041a4 	lsrs	r4, r4, #3
   203c4:	e1a08001 	mov	r8, r1
   203c8:	e5465001 	strb	r5, [r6, #-1]
   203cc:	1affffed 	bne	20388 <CString::ftoa(char*, double, unsigned int)+0x198>
   203d0:	e28d000c 	add	r0, sp, #12
   203d4:	e5c64000 	strb	r4, [r6]
   203d8:	eb00061d 	bl	21c54 <strlen>
   203dc:	e0599000 	subs	r9, r9, r0
   203e0:	0a000006 	beq	20400 <CString::ftoa(char*, double, unsigned int)+0x210>
   203e4:	e3a02030 	mov	r2, #48	; 0x30
   203e8:	e59d8004 	ldr	r8, [sp, #4]
   203ec:	e0883009 	add	r3, r8, r9
   203f0:	e5e82001 	strb	r2, [r8, #1]!
   203f4:	e1580003 	cmp	r8, r3
   203f8:	1afffffc 	bne	203f0 <CString::ftoa(char*, double, unsigned int)+0x200>
   203fc:	e08bb009 	add	fp, fp, r9
   20400:	e28d100c 	add	r1, sp, #12
   20404:	e1a0000b 	mov	r0, fp
   20408:	eb00068f 	bl	21e4c <strcpy>
   2040c:	e1a0000a 	mov	r0, sl
   20410:	e28dd01c 	add	sp, sp, #28
   20414:	ecbd8b02 	vpop	{d8}
   20418:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2041c:	e1a0000b 	mov	r0, fp
   20420:	e59f1044 	ldr	r1, [pc, #68]	; 2046c <CString::ftoa(char*, double, unsigned int)+0x27c>
   20424:	eb000688 	bl	21e4c <strcpy>
   20428:	e1a0000a 	mov	r0, sl
   2042c:	e28dd01c 	add	sp, sp, #28
   20430:	ecbd8b02 	vpop	{d8}
   20434:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20438:	ee175a90 	vmov	r5, s15
   2043c:	e3a04001 	mov	r4, #1
   20440:	eaffff88 	b	20268 <CString::ftoa(char*, double, unsigned int)+0x78>
   20444:	ee175a90 	vmov	r5, s15
   20448:	e3a04001 	mov	r4, #1
   2044c:	eaffffca 	b	2037c <CString::ftoa(char*, double, unsigned int)+0x18c>
   20450:	ed9f7b02 	vldr	d7, [pc, #8]	; 20460 <CString::ftoa(char*, double, unsigned int)+0x270>
   20454:	eaffffb7 	b	20338 <CString::ftoa(char*, double, unsigned int)+0x148>
   20458:	ffe00000 	.word	0xffe00000
   2045c:	41efffff 	.word	0x41efffff
   20460:	00000000 	.word	0x00000000
   20464:	40240000 	.word	0x40240000
   20468:	cccccccd 	.word	0xcccccccd
   2046c:	00029a00 	.word	0x00029a00

00020470 <CString::FormatV(char const*, std::__va_list)>:
   20470:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20474:	e1a0b000 	mov	fp, r0
   20478:	e5900004 	ldr	r0, [r0, #4]
   2047c:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   20480:	e3500000 	cmp	r0, #0
   20484:	e1a05001 	mov	r5, r1
   20488:	e58d2000 	str	r2, [sp]
   2048c:	0a000000 	beq	20494 <CString::FormatV(char const*, std::__va_list)+0x24>
   20490:	eb000a40 	bl	22d98 <operator delete[](void*)>
   20494:	e3a00040 	mov	r0, #64	; 0x40
   20498:	e58b0008 	str	r0, [fp, #8]
   2049c:	eb000a3b 	bl	22d90 <operator new[](unsigned int)>
   204a0:	e58b0004 	str	r0, [fp, #4]
   204a4:	e58b000c 	str	r0, [fp, #12]
   204a8:	e1d540d0 	ldrsb	r4, [r5]
   204ac:	e3540000 	cmp	r4, #0
   204b0:	0a0000a2 	beq	20740 <CString::FormatV(char const*, std::__va_list)+0x2d0>
   204b4:	e3540025 	cmp	r4, #37	; 0x25
   204b8:	13a01001 	movne	r1, #1
   204bc:	11a0000b 	movne	r0, fp
   204c0:	1a000152 	bne	20a10 <CString::FormatV(char const*, std::__va_list)+0x5a0>
   204c4:	e1d560d1 	ldrsb	r6, [r5, #1]
   204c8:	e3560025 	cmp	r6, #37	; 0x25
   204cc:	0a000165 	beq	20a68 <CString::FormatV(char const*, std::__va_list)+0x5f8>
   204d0:	e356002d 	cmp	r6, #45	; 0x2d
   204d4:	03a03001 	moveq	r3, #1
   204d8:	13a03000 	movne	r3, #0
   204dc:	01d560d2 	ldrsbeq	r6, [r5, #2]
   204e0:	158d3004 	strne	r3, [sp, #4]
   204e4:	058d3004 	streq	r3, [sp, #4]
   204e8:	02855002 	addeq	r5, r5, #2
   204ec:	12855001 	addne	r5, r5, #1
   204f0:	e3560030 	cmp	r6, #48	; 0x30
   204f4:	03a03001 	moveq	r3, #1
   204f8:	13a03000 	movne	r3, #0
   204fc:	01d560d1 	ldrsbeq	r6, [r5, #1]
   20500:	058d3008 	streq	r3, [sp, #8]
   20504:	00855003 	addeq	r5, r5, r3
   20508:	158d3008 	strne	r3, [sp, #8]
   2050c:	e2463030 	sub	r3, r6, #48	; 0x30
   20510:	e6ef3073 	uxtb	r3, r3
   20514:	e3530009 	cmp	r3, #9
   20518:	e3a04000 	mov	r4, #0
   2051c:	8a000007 	bhi	20540 <CString::FormatV(char const*, std::__va_list)+0xd0>
   20520:	e0844104 	add	r4, r4, r4, lsl #2
   20524:	e0864084 	add	r4, r6, r4, lsl #1
   20528:	e1f560d1 	ldrsb	r6, [r5, #1]!
   2052c:	e2444030 	sub	r4, r4, #48	; 0x30
   20530:	e2463030 	sub	r3, r6, #48	; 0x30
   20534:	e6ef3073 	uxtb	r3, r3
   20538:	e3530009 	cmp	r3, #9
   2053c:	9afffff7 	bls	20520 <CString::FormatV(char const*, std::__va_list)+0xb0>
   20540:	e356002e 	cmp	r6, #46	; 0x2e
   20544:	0a000137 	beq	20a28 <CString::FormatV(char const*, std::__va_list)+0x5b8>
   20548:	e3a01006 	mov	r1, #6
   2054c:	e1d570d0 	ldrsb	r7, [r5]
   20550:	e357006c 	cmp	r7, #108	; 0x6c
   20554:	03a02001 	moveq	r2, #1
   20558:	01d570d1 	ldrsbeq	r7, [r5, #1]
   2055c:	00855002 	addeq	r5, r5, r2
   20560:	e2473058 	sub	r3, r7, #88	; 0x58
   20564:	e3530020 	cmp	r3, #32
   20568:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   2056c:	ea00011c 	b	209e4 <CString::FormatV(char const*, std::__va_list)+0x574>
   20570:	00020960 	.word	0x00020960
   20574:	000209e4 	.word	0x000209e4
   20578:	000209e4 	.word	0x000209e4
   2057c:	000209e4 	.word	0x000209e4
   20580:	000209e4 	.word	0x000209e4
   20584:	000209e4 	.word	0x000209e4
   20588:	000209e4 	.word	0x000209e4
   2058c:	000209e4 	.word	0x000209e4
   20590:	000209e4 	.word	0x000209e4
   20594:	000209e4 	.word	0x000209e4
   20598:	000209e4 	.word	0x000209e4
   2059c:	000208ec 	.word	0x000208ec
   205a0:	000207c8 	.word	0x000207c8
   205a4:	000209e4 	.word	0x000209e4
   205a8:	00020750 	.word	0x00020750
   205ac:	000209e4 	.word	0x000209e4
   205b0:	000209e4 	.word	0x000209e4
   205b4:	000207c8 	.word	0x000207c8
   205b8:	000209e4 	.word	0x000209e4
   205bc:	000209e4 	.word	0x000209e4
   205c0:	000209e4 	.word	0x000209e4
   205c4:	000209e4 	.word	0x000209e4
   205c8:	000209e4 	.word	0x000209e4
   205cc:	000205f4 	.word	0x000205f4
   205d0:	00020960 	.word	0x00020960
   205d4:	000209e4 	.word	0x000209e4
   205d8:	000209e4 	.word	0x000209e4
   205dc:	00020970 	.word	0x00020970
   205e0:	000209e4 	.word	0x000209e4
   205e4:	00020968 	.word	0x00020968
   205e8:	000209e4 	.word	0x000209e4
   205ec:	000209e4 	.word	0x000209e4
   205f0:	00020960 	.word	0x00020960
   205f4:	e3a09008 	mov	r9, #8
   205f8:	e59d3000 	ldr	r3, [sp]
   205fc:	e5936000 	ldr	r6, [r3]
   20600:	e2833004 	add	r3, r3, #4
   20604:	e1560009 	cmp	r6, r9
   20608:	e58d3000 	str	r3, [sp]
   2060c:	23a0a001 	movcs	sl, #1
   20610:	3a0001aa 	bcc	20cc0 <CString::FormatV(char const*, std::__va_list)+0x850>
   20614:	e00a0a99 	mul	sl, r9, sl
   20618:	e1a00006 	mov	r0, r6
   2061c:	e1a0100a 	mov	r1, sl
   20620:	eb000f2d 	bl	242dc <__aeabi_uidiv>
   20624:	e1590000 	cmp	r9, r0
   20628:	9afffff9 	bls	20614 <CString::FormatV(char const*, std::__va_list)+0x1a4>
   2062c:	e1a03000 	mov	r3, r0
   20630:	e3570058 	cmp	r7, #88	; 0x58
   20634:	13a07057 	movne	r7, #87	; 0x57
   20638:	03a07037 	moveq	r7, #55	; 0x37
   2063c:	e1a02005 	mov	r2, r5
   20640:	e58d400c 	str	r4, [sp, #12]
   20644:	e1a0500a 	mov	r5, sl
   20648:	e1a04007 	mov	r4, r7
   2064c:	e28d8010 	add	r8, sp, #16
   20650:	e1a07006 	mov	r7, r6
   20654:	e1a0a002 	mov	sl, r2
   20658:	e1a06003 	mov	r6, r3
   2065c:	ea000003 	b	20670 <CString::FormatV(char const*, std::__va_list)+0x200>
   20660:	e1a01005 	mov	r1, r5
   20664:	e1a00007 	mov	r0, r7
   20668:	eb000f1b 	bl	242dc <__aeabi_uidiv>
   2066c:	e1a06000 	mov	r6, r0
   20670:	e1a00007 	mov	r0, r7
   20674:	e1a01005 	mov	r1, r5
   20678:	eb000f54 	bl	243d0 <__aeabi_uidivmod>
   2067c:	e3560009 	cmp	r6, #9
   20680:	e2862030 	add	r2, r6, #48	; 0x30
   20684:	80846006 	addhi	r6, r4, r6
   20688:	96af6072 	sxtbls	r6, r2
   2068c:	86af6076 	sxtbhi	r6, r6
   20690:	e2888001 	add	r8, r8, #1
   20694:	e1a00005 	mov	r0, r5
   20698:	e1a07001 	mov	r7, r1
   2069c:	e5486001 	strb	r6, [r8, #-1]
   206a0:	e1a01009 	mov	r1, r9
   206a4:	eb000f0c 	bl	242dc <__aeabi_uidiv>
   206a8:	e2505000 	subs	r5, r0, #0
   206ac:	1affffeb 	bne	20660 <CString::FormatV(char const*, std::__va_list)+0x1f0>
   206b0:	e1a0300a 	mov	r3, sl
   206b4:	e1a0a005 	mov	sl, r5
   206b8:	e28d0010 	add	r0, sp, #16
   206bc:	e5c8a000 	strb	sl, [r8]
   206c0:	e1a05003 	mov	r5, r3
   206c4:	e59d400c 	ldr	r4, [sp, #12]
   206c8:	eb000561 	bl	21c54 <strlen>
   206cc:	e59d3004 	ldr	r3, [sp, #4]
   206d0:	e1a06000 	mov	r6, r0
   206d4:	e3530000 	cmp	r3, #0
   206d8:	1a0000eb 	bne	20a8c <CString::FormatV(char const*, std::__va_list)+0x61c>
   206dc:	e1500004 	cmp	r0, r4
   206e0:	2a00000f 	bcs	20724 <CString::FormatV(char const*, std::__va_list)+0x2b4>
   206e4:	e59d3008 	ldr	r3, [sp, #8]
   206e8:	e0444000 	sub	r4, r4, r0
   206ec:	e3530000 	cmp	r3, #0
   206f0:	e1a01004 	mov	r1, r4
   206f4:	e1a0000b 	mov	r0, fp
   206f8:	03a07020 	moveq	r7, #32
   206fc:	13a07030 	movne	r7, #48	; 0x30
   20700:	ebfffd73 	bl	1fcd4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   20704:	e2443001 	sub	r3, r4, #1
   20708:	e59b200c 	ldr	r2, [fp, #12]
   2070c:	e2433001 	sub	r3, r3, #1
   20710:	e2821001 	add	r1, r2, #1
   20714:	e3730001 	cmn	r3, #1
   20718:	e58b100c 	str	r1, [fp, #12]
   2071c:	e5c27000 	strb	r7, [r2]
   20720:	1afffff8 	bne	20708 <CString::FormatV(char const*, std::__va_list)+0x298>
   20724:	e28d1010 	add	r1, sp, #16
   20728:	e1a0000b 	mov	r0, fp
   2072c:	ebfffe0e 	bl	1ff6c <CString::PutString(char const*)>
   20730:	e2855001 	add	r5, r5, #1
   20734:	e1d540d0 	ldrsb	r4, [r5]
   20738:	e3540000 	cmp	r4, #0
   2073c:	1affff5c 	bne	204b4 <CString::FormatV(char const*, std::__va_list)+0x44>
   20740:	e59b300c 	ldr	r3, [fp, #12]
   20744:	e5c34000 	strb	r4, [r3]
   20748:	e28dd02c 	add	sp, sp, #44	; 0x2c
   2074c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20750:	e59d3000 	ldr	r3, [sp]
   20754:	e28d0010 	add	r0, sp, #16
   20758:	e2833007 	add	r3, r3, #7
   2075c:	e3c33007 	bic	r3, r3, #7
   20760:	ed930b00 	vldr	d0, [r3]
   20764:	e2833008 	add	r3, r3, #8
   20768:	e58d3000 	str	r3, [sp]
   2076c:	ebfffe9f 	bl	201f0 <CString::ftoa(char*, double, unsigned int)>
   20770:	e28d0010 	add	r0, sp, #16
   20774:	eb000536 	bl	21c54 <strlen>
   20778:	e59d3004 	ldr	r3, [sp, #4]
   2077c:	e1a06000 	mov	r6, r0
   20780:	e3530000 	cmp	r3, #0
   20784:	1a000108 	bne	20bac <CString::FormatV(char const*, std::__va_list)+0x73c>
   20788:	e1500004 	cmp	r0, r4
   2078c:	2affffe4 	bcs	20724 <CString::FormatV(char const*, std::__va_list)+0x2b4>
   20790:	e0444000 	sub	r4, r4, r0
   20794:	e1a01004 	mov	r1, r4
   20798:	e1a0000b 	mov	r0, fp
   2079c:	ebfffd4c 	bl	1fcd4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   207a0:	e2443001 	sub	r3, r4, #1
   207a4:	e59b200c 	ldr	r2, [fp, #12]
   207a8:	e2433001 	sub	r3, r3, #1
   207ac:	e2821001 	add	r1, r2, #1
   207b0:	e58b100c 	str	r1, [fp, #12]
   207b4:	e3a01020 	mov	r1, #32
   207b8:	e3730001 	cmn	r3, #1
   207bc:	e5c21000 	strb	r1, [r2]
   207c0:	1afffff7 	bne	207a4 <CString::FormatV(char const*, std::__va_list)+0x334>
   207c4:	eaffffd6 	b	20724 <CString::FormatV(char const*, std::__va_list)+0x2b4>
   207c8:	e59d3000 	ldr	r3, [sp]
   207cc:	e5936000 	ldr	r6, [r3]
   207d0:	e2833004 	add	r3, r3, #4
   207d4:	e3560000 	cmp	r6, #0
   207d8:	b3a08001 	movlt	r8, #1
   207dc:	a3a08000 	movge	r8, #0
   207e0:	e58d3000 	str	r3, [sp]
   207e4:	b1a03008 	movlt	r3, r8
   207e8:	b2666000 	rsblt	r6, r6, #0
   207ec:	b58d300c 	strlt	r3, [sp, #12]
   207f0:	a58d800c 	strge	r8, [sp, #12]
   207f4:	e3560009 	cmp	r6, #9
   207f8:	e1a07006 	mov	r7, r6
   207fc:	c3a0a001 	movgt	sl, #1
   20800:	da00012b 	ble	20cb4 <CString::FormatV(char const*, std::__va_list)+0x844>
   20804:	e08aa10a 	add	sl, sl, sl, lsl #2
   20808:	e1a0a08a 	lsl	sl, sl, #1
   2080c:	e1a0100a 	mov	r1, sl
   20810:	e1a00006 	mov	r0, r6
   20814:	eb000eb0 	bl	242dc <__aeabi_uidiv>
   20818:	e3500009 	cmp	r0, #9
   2081c:	8afffff8 	bhi	20804 <CString::FormatV(char const*, std::__va_list)+0x394>
   20820:	e1a09000 	mov	r9, r0
   20824:	e28d6010 	add	r6, sp, #16
   20828:	ea000003 	b	2083c <CString::FormatV(char const*, std::__va_list)+0x3cc>
   2082c:	e1a0100a 	mov	r1, sl
   20830:	e1a00007 	mov	r0, r7
   20834:	eb000ea8 	bl	242dc <__aeabi_uidiv>
   20838:	e1a09000 	mov	r9, r0
   2083c:	e1a00007 	mov	r0, r7
   20840:	e1a0100a 	mov	r1, sl
   20844:	eb000ee1 	bl	243d0 <__aeabi_uidivmod>
   20848:	e3590009 	cmp	r9, #9
   2084c:	e2893030 	add	r3, r9, #48	; 0x30
   20850:	96af9073 	sxtbls	r9, r3
   20854:	e59f3494 	ldr	r3, [pc, #1172]	; 20cf0 <CString::FormatV(char const*, std::__va_list)+0x880>
   20858:	82899057 	addhi	r9, r9, #87	; 0x57
   2085c:	e08a3a93 	umull	r3, sl, r3, sl
   20860:	86af9079 	sxtbhi	r9, r9
   20864:	e2866001 	add	r6, r6, #1
   20868:	e1b0a1aa 	lsrs	sl, sl, #3
   2086c:	e1a07001 	mov	r7, r1
   20870:	e5469001 	strb	r9, [r6, #-1]
   20874:	1affffec 	bne	2082c <CString::FormatV(char const*, std::__va_list)+0x3bc>
   20878:	e28d0010 	add	r0, sp, #16
   2087c:	e5c6a000 	strb	sl, [r6]
   20880:	eb0004f3 	bl	21c54 <strlen>
   20884:	e59d3004 	ldr	r3, [sp, #4]
   20888:	e0888000 	add	r8, r8, r0
   2088c:	e3530000 	cmp	r3, #0
   20890:	0a000090 	beq	20ad8 <CString::FormatV(char const*, std::__va_list)+0x668>
   20894:	e59d300c 	ldr	r3, [sp, #12]
   20898:	e3530000 	cmp	r3, #0
   2089c:	1a0000fb 	bne	20c90 <CString::FormatV(char const*, std::__va_list)+0x820>
   208a0:	e28d1010 	add	r1, sp, #16
   208a4:	e1a0000b 	mov	r0, fp
   208a8:	ebfffdaf 	bl	1ff6c <CString::PutString(char const*)>
   208ac:	e1580004 	cmp	r8, r4
   208b0:	2affff9e 	bcs	20730 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   208b4:	e0444008 	sub	r4, r4, r8
   208b8:	e1a01004 	mov	r1, r4
   208bc:	e1a0000b 	mov	r0, fp
   208c0:	ebfffd03 	bl	1fcd4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   208c4:	e2443001 	sub	r3, r4, #1
   208c8:	e59b200c 	ldr	r2, [fp, #12]
   208cc:	e2433001 	sub	r3, r3, #1
   208d0:	e2821001 	add	r1, r2, #1
   208d4:	e58b100c 	str	r1, [fp, #12]
   208d8:	e3a01020 	mov	r1, #32
   208dc:	e3730001 	cmn	r3, #1
   208e0:	e5c21000 	strb	r1, [r2]
   208e4:	1afffff7 	bne	208c8 <CString::FormatV(char const*, std::__va_list)+0x458>
   208e8:	eaffff90 	b	20730 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   208ec:	e59d3004 	ldr	r3, [sp, #4]
   208f0:	e3530000 	cmp	r3, #0
   208f4:	e59d3000 	ldr	r3, [sp]
   208f8:	e2836004 	add	r6, r3, #4
   208fc:	e1d370d0 	ldrsb	r7, [r3]
   20900:	1a000092 	bne	20b50 <CString::FormatV(char const*, std::__va_list)+0x6e0>
   20904:	e3540001 	cmp	r4, #1
   20908:	9a00000b 	bls	2093c <CString::FormatV(char const*, std::__va_list)+0x4cc>
   2090c:	e2441001 	sub	r1, r4, #1
   20910:	e1a0000b 	mov	r0, fp
   20914:	ebfffcee 	bl	1fcd4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   20918:	e2444002 	sub	r4, r4, #2
   2091c:	e59b300c 	ldr	r3, [fp, #12]
   20920:	e2444001 	sub	r4, r4, #1
   20924:	e2832001 	add	r2, r3, #1
   20928:	e58b200c 	str	r2, [fp, #12]
   2092c:	e3a02020 	mov	r2, #32
   20930:	e3740001 	cmn	r4, #1
   20934:	e5c32000 	strb	r2, [r3]
   20938:	1afffff7 	bne	2091c <CString::FormatV(char const*, std::__va_list)+0x4ac>
   2093c:	e3a01001 	mov	r1, #1
   20940:	e1a0000b 	mov	r0, fp
   20944:	ebfffce2 	bl	1fcd4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   20948:	e59b300c 	ldr	r3, [fp, #12]
   2094c:	e58d6000 	str	r6, [sp]
   20950:	e2832001 	add	r2, r3, #1
   20954:	e58b200c 	str	r2, [fp, #12]
   20958:	e5c37000 	strb	r7, [r3]
   2095c:	eaffff73 	b	20730 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   20960:	e3a09010 	mov	r9, #16
   20964:	eaffff23 	b	205f8 <CString::FormatV(char const*, std::__va_list)+0x188>
   20968:	e3a0900a 	mov	r9, #10
   2096c:	eaffff21 	b	205f8 <CString::FormatV(char const*, std::__va_list)+0x188>
   20970:	e59d3000 	ldr	r3, [sp]
   20974:	e5938000 	ldr	r8, [r3]
   20978:	e2836004 	add	r6, r3, #4
   2097c:	e1a00008 	mov	r0, r8
   20980:	eb0004b3 	bl	21c54 <strlen>
   20984:	e59d3004 	ldr	r3, [sp, #4]
   20988:	e1a07000 	mov	r7, r0
   2098c:	e3530000 	cmp	r3, #0
   20990:	1a000098 	bne	20bf8 <CString::FormatV(char const*, std::__va_list)+0x788>
   20994:	e1500004 	cmp	r0, r4
   20998:	2a00000c 	bcs	209d0 <CString::FormatV(char const*, std::__va_list)+0x560>
   2099c:	e0444000 	sub	r4, r4, r0
   209a0:	e1a01004 	mov	r1, r4
   209a4:	e1a0000b 	mov	r0, fp
   209a8:	ebfffcc9 	bl	1fcd4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   209ac:	e2443001 	sub	r3, r4, #1
   209b0:	e59b200c 	ldr	r2, [fp, #12]
   209b4:	e2433001 	sub	r3, r3, #1
   209b8:	e2821001 	add	r1, r2, #1
   209bc:	e58b100c 	str	r1, [fp, #12]
   209c0:	e3a01020 	mov	r1, #32
   209c4:	e3730001 	cmn	r3, #1
   209c8:	e5c21000 	strb	r1, [r2]
   209cc:	1afffff7 	bne	209b0 <CString::FormatV(char const*, std::__va_list)+0x540>
   209d0:	e1a01008 	mov	r1, r8
   209d4:	e1a0000b 	mov	r0, fp
   209d8:	e58d6000 	str	r6, [sp]
   209dc:	ebfffd62 	bl	1ff6c <CString::PutString(char const*)>
   209e0:	eaffff52 	b	20730 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   209e4:	e3a01001 	mov	r1, #1
   209e8:	e1a0000b 	mov	r0, fp
   209ec:	ebfffcb8 	bl	1fcd4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   209f0:	e3a01001 	mov	r1, #1
   209f4:	e59b300c 	ldr	r3, [fp, #12]
   209f8:	e1a0000b 	mov	r0, fp
   209fc:	e0832001 	add	r2, r3, r1
   20a00:	e58b200c 	str	r2, [fp, #12]
   20a04:	e3a02025 	mov	r2, #37	; 0x25
   20a08:	e5c32000 	strb	r2, [r3]
   20a0c:	e1d540d0 	ldrsb	r4, [r5]
   20a10:	ebfffcaf 	bl	1fcd4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   20a14:	e59b300c 	ldr	r3, [fp, #12]
   20a18:	e2832001 	add	r2, r3, #1
   20a1c:	e58b200c 	str	r2, [fp, #12]
   20a20:	e5c34000 	strb	r4, [r3]
   20a24:	eaffff41 	b	20730 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   20a28:	e1d570d1 	ldrsb	r7, [r5, #1]
   20a2c:	e3a01000 	mov	r1, #0
   20a30:	e2473030 	sub	r3, r7, #48	; 0x30
   20a34:	e6ef3073 	uxtb	r3, r3
   20a38:	e3530009 	cmp	r3, #9
   20a3c:	e2855001 	add	r5, r5, #1
   20a40:	8afffec2 	bhi	20550 <CString::FormatV(char const*, std::__va_list)+0xe0>
   20a44:	e0811101 	add	r1, r1, r1, lsl #2
   20a48:	e0871081 	add	r1, r7, r1, lsl #1
   20a4c:	e1f570d1 	ldrsb	r7, [r5, #1]!
   20a50:	e2411030 	sub	r1, r1, #48	; 0x30
   20a54:	e2473030 	sub	r3, r7, #48	; 0x30
   20a58:	e6ef3073 	uxtb	r3, r3
   20a5c:	e3530009 	cmp	r3, #9
   20a60:	9afffff7 	bls	20a44 <CString::FormatV(char const*, std::__va_list)+0x5d4>
   20a64:	eafffeb9 	b	20550 <CString::FormatV(char const*, std::__va_list)+0xe0>
   20a68:	e3a01001 	mov	r1, #1
   20a6c:	e1a0000b 	mov	r0, fp
   20a70:	ebfffc97 	bl	1fcd4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   20a74:	e59b300c 	ldr	r3, [fp, #12]
   20a78:	e2855002 	add	r5, r5, #2
   20a7c:	e2832001 	add	r2, r3, #1
   20a80:	e58b200c 	str	r2, [fp, #12]
   20a84:	e5c36000 	strb	r6, [r3]
   20a88:	eafffe86 	b	204a8 <CString::FormatV(char const*, std::__va_list)+0x38>
   20a8c:	e28d1010 	add	r1, sp, #16
   20a90:	e1a0000b 	mov	r0, fp
   20a94:	ebfffd34 	bl	1ff6c <CString::PutString(char const*)>
   20a98:	e1560004 	cmp	r6, r4
   20a9c:	2affff23 	bcs	20730 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   20aa0:	e0444006 	sub	r4, r4, r6
   20aa4:	e1a01004 	mov	r1, r4
   20aa8:	e1a0000b 	mov	r0, fp
   20aac:	ebfffc88 	bl	1fcd4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   20ab0:	e2443001 	sub	r3, r4, #1
   20ab4:	e59b200c 	ldr	r2, [fp, #12]
   20ab8:	e2433001 	sub	r3, r3, #1
   20abc:	e2821001 	add	r1, r2, #1
   20ac0:	e58b100c 	str	r1, [fp, #12]
   20ac4:	e3a01020 	mov	r1, #32
   20ac8:	e3730001 	cmn	r3, #1
   20acc:	e5c21000 	strb	r1, [r2]
   20ad0:	1afffff7 	bne	20ab4 <CString::FormatV(char const*, std::__va_list)+0x644>
   20ad4:	eaffff15 	b	20730 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   20ad8:	e59d3008 	ldr	r3, [sp, #8]
   20adc:	e3530000 	cmp	r3, #0
   20ae0:	1a000057 	bne	20c44 <CString::FormatV(char const*, std::__va_list)+0x7d4>
   20ae4:	e1580004 	cmp	r8, r4
   20ae8:	2a00000c 	bcs	20b20 <CString::FormatV(char const*, std::__va_list)+0x6b0>
   20aec:	e0444008 	sub	r4, r4, r8
   20af0:	e1a01004 	mov	r1, r4
   20af4:	e1a0000b 	mov	r0, fp
   20af8:	ebfffc75 	bl	1fcd4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   20afc:	e2443001 	sub	r3, r4, #1
   20b00:	e59b200c 	ldr	r2, [fp, #12]
   20b04:	e2433001 	sub	r3, r3, #1
   20b08:	e2821001 	add	r1, r2, #1
   20b0c:	e58b100c 	str	r1, [fp, #12]
   20b10:	e3a01020 	mov	r1, #32
   20b14:	e3730001 	cmn	r3, #1
   20b18:	e5c21000 	strb	r1, [r2]
   20b1c:	1afffff7 	bne	20b00 <CString::FormatV(char const*, std::__va_list)+0x690>
   20b20:	e59d300c 	ldr	r3, [sp, #12]
   20b24:	e3530000 	cmp	r3, #0
   20b28:	0afffefd 	beq	20724 <CString::FormatV(char const*, std::__va_list)+0x2b4>
   20b2c:	e3a01001 	mov	r1, #1
   20b30:	e1a0000b 	mov	r0, fp
   20b34:	ebfffc66 	bl	1fcd4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   20b38:	e3a0202d 	mov	r2, #45	; 0x2d
   20b3c:	e59b300c 	ldr	r3, [fp, #12]
   20b40:	e2831001 	add	r1, r3, #1
   20b44:	e58b100c 	str	r1, [fp, #12]
   20b48:	e5c32000 	strb	r2, [r3]
   20b4c:	eafffef4 	b	20724 <CString::FormatV(char const*, std::__va_list)+0x2b4>
   20b50:	e3a01001 	mov	r1, #1
   20b54:	e1a0000b 	mov	r0, fp
   20b58:	ebfffc5d 	bl	1fcd4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   20b5c:	e59b300c 	ldr	r3, [fp, #12]
   20b60:	e3540001 	cmp	r4, #1
   20b64:	e2832001 	add	r2, r3, #1
   20b68:	e58b200c 	str	r2, [fp, #12]
   20b6c:	e5c37000 	strb	r7, [r3]
   20b70:	9a00000b 	bls	20ba4 <CString::FormatV(char const*, std::__va_list)+0x734>
   20b74:	e2441001 	sub	r1, r4, #1
   20b78:	e1a0000b 	mov	r0, fp
   20b7c:	ebfffc54 	bl	1fcd4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   20b80:	e2444002 	sub	r4, r4, #2
   20b84:	e59b300c 	ldr	r3, [fp, #12]
   20b88:	e2444001 	sub	r4, r4, #1
   20b8c:	e2832001 	add	r2, r3, #1
   20b90:	e58b200c 	str	r2, [fp, #12]
   20b94:	e3a02020 	mov	r2, #32
   20b98:	e3740001 	cmn	r4, #1
   20b9c:	e5c32000 	strb	r2, [r3]
   20ba0:	1afffff7 	bne	20b84 <CString::FormatV(char const*, std::__va_list)+0x714>
   20ba4:	e58d6000 	str	r6, [sp]
   20ba8:	eafffee0 	b	20730 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   20bac:	e28d1010 	add	r1, sp, #16
   20bb0:	e1a0000b 	mov	r0, fp
   20bb4:	ebfffcec 	bl	1ff6c <CString::PutString(char const*)>
   20bb8:	e1560004 	cmp	r6, r4
   20bbc:	2afffedb 	bcs	20730 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   20bc0:	e0444006 	sub	r4, r4, r6
   20bc4:	e1a01004 	mov	r1, r4
   20bc8:	e1a0000b 	mov	r0, fp
   20bcc:	ebfffc40 	bl	1fcd4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   20bd0:	e2443001 	sub	r3, r4, #1
   20bd4:	e59b200c 	ldr	r2, [fp, #12]
   20bd8:	e2433001 	sub	r3, r3, #1
   20bdc:	e2821001 	add	r1, r2, #1
   20be0:	e58b100c 	str	r1, [fp, #12]
   20be4:	e3a01020 	mov	r1, #32
   20be8:	e3730001 	cmn	r3, #1
   20bec:	e5c21000 	strb	r1, [r2]
   20bf0:	1afffff7 	bne	20bd4 <CString::FormatV(char const*, std::__va_list)+0x764>
   20bf4:	eafffecd 	b	20730 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   20bf8:	e1a01008 	mov	r1, r8
   20bfc:	e1a0000b 	mov	r0, fp
   20c00:	ebfffcd9 	bl	1ff6c <CString::PutString(char const*)>
   20c04:	e1570004 	cmp	r7, r4
   20c08:	2affffe5 	bcs	20ba4 <CString::FormatV(char const*, std::__va_list)+0x734>
   20c0c:	e0444007 	sub	r4, r4, r7
   20c10:	e1a01004 	mov	r1, r4
   20c14:	e1a0000b 	mov	r0, fp
   20c18:	ebfffc2d 	bl	1fcd4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   20c1c:	e2443001 	sub	r3, r4, #1
   20c20:	e59b200c 	ldr	r2, [fp, #12]
   20c24:	e2433001 	sub	r3, r3, #1
   20c28:	e2821001 	add	r1, r2, #1
   20c2c:	e58b100c 	str	r1, [fp, #12]
   20c30:	e3a01020 	mov	r1, #32
   20c34:	e3730001 	cmn	r3, #1
   20c38:	e5c21000 	strb	r1, [r2]
   20c3c:	1afffff7 	bne	20c20 <CString::FormatV(char const*, std::__va_list)+0x7b0>
   20c40:	eaffffd7 	b	20ba4 <CString::FormatV(char const*, std::__va_list)+0x734>
   20c44:	e59d300c 	ldr	r3, [sp, #12]
   20c48:	e3530000 	cmp	r3, #0
   20c4c:	1a00001e 	bne	20ccc <CString::FormatV(char const*, std::__va_list)+0x85c>
   20c50:	e1580004 	cmp	r8, r4
   20c54:	2afffeb2 	bcs	20724 <CString::FormatV(char const*, std::__va_list)+0x2b4>
   20c58:	e0444008 	sub	r4, r4, r8
   20c5c:	e1a0000b 	mov	r0, fp
   20c60:	e1a01004 	mov	r1, r4
   20c64:	ebfffc1a 	bl	1fcd4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   20c68:	e3a00030 	mov	r0, #48	; 0x30
   20c6c:	e2443001 	sub	r3, r4, #1
   20c70:	e59b200c 	ldr	r2, [fp, #12]
   20c74:	e2433001 	sub	r3, r3, #1
   20c78:	e2821001 	add	r1, r2, #1
   20c7c:	e3730001 	cmn	r3, #1
   20c80:	e58b100c 	str	r1, [fp, #12]
   20c84:	e5c20000 	strb	r0, [r2]
   20c88:	1afffff8 	bne	20c70 <CString::FormatV(char const*, std::__va_list)+0x800>
   20c8c:	eafffea4 	b	20724 <CString::FormatV(char const*, std::__va_list)+0x2b4>
   20c90:	e3a01001 	mov	r1, #1
   20c94:	e1a0000b 	mov	r0, fp
   20c98:	ebfffc0d 	bl	1fcd4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   20c9c:	e3a0202d 	mov	r2, #45	; 0x2d
   20ca0:	e59b300c 	ldr	r3, [fp, #12]
   20ca4:	e2831001 	add	r1, r3, #1
   20ca8:	e58b100c 	str	r1, [fp, #12]
   20cac:	e5c32000 	strb	r2, [r3]
   20cb0:	eafffefa 	b	208a0 <CString::FormatV(char const*, std::__va_list)+0x430>
   20cb4:	e1a09006 	mov	r9, r6
   20cb8:	e3a0a001 	mov	sl, #1
   20cbc:	eafffed8 	b	20824 <CString::FormatV(char const*, std::__va_list)+0x3b4>
   20cc0:	e1a03006 	mov	r3, r6
   20cc4:	e3a0a001 	mov	sl, #1
   20cc8:	eafffe58 	b	20630 <CString::FormatV(char const*, std::__va_list)+0x1c0>
   20ccc:	e3a01001 	mov	r1, #1
   20cd0:	e1a0000b 	mov	r0, fp
   20cd4:	ebfffbfe 	bl	1fcd4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   20cd8:	e3a0202d 	mov	r2, #45	; 0x2d
   20cdc:	e59b300c 	ldr	r3, [fp, #12]
   20ce0:	e2831001 	add	r1, r3, #1
   20ce4:	e58b100c 	str	r1, [fp, #12]
   20ce8:	e5c32000 	strb	r2, [r3]
   20cec:	eaffffd7 	b	20c50 <CString::FormatV(char const*, std::__va_list)+0x7e0>
   20cf0:	cccccccd 	.word	0xcccccccd

00020cf4 <CString::Format(char const*, ...)>:
   20cf4:	e92d000e 	push	{r1, r2, r3}
   20cf8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   20cfc:	e24dd008 	sub	sp, sp, #8
   20d00:	e28d3010 	add	r3, sp, #16
   20d04:	e1a02003 	mov	r2, r3
   20d08:	e59d100c 	ldr	r1, [sp, #12]
   20d0c:	e58d3004 	str	r3, [sp, #4]
   20d10:	ebfffdd6 	bl	20470 <CString::FormatV(char const*, std::__va_list)>
   20d14:	e28dd008 	add	sp, sp, #8
   20d18:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   20d1c:	e28dd00c 	add	sp, sp, #12
   20d20:	e12fff1e 	bx	lr

00020d24 <__aeabi_atexit>:
   20d24:	e12fff1e 	bx	lr

00020d28 <halt>:
   20d28:	f10c0080 	cpsid	i
   20d2c:	f10c0040 	cpsid	f
   20d30:	eafffffe 	b	20d30 <halt+0x8>

00020d34 <reboot>:
   20d34:	e3a03000 	mov	r3, #0
   20d38:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   20d3c:	e59f3010 	ldr	r3, [pc, #16]	; 20d54 <reboot+0x20>
   20d40:	e59f1010 	ldr	r1, [pc, #16]	; 20d58 <reboot+0x24>
   20d44:	e59f2010 	ldr	r2, [pc, #16]	; 20d5c <reboot+0x28>
   20d48:	e5831024 	str	r1, [r3, #36]	; 0x24
   20d4c:	e583201c 	str	r2, [r3, #28]
   20d50:	eafffffe 	b	20d50 <reboot+0x1c>
   20d54:	20100000 	.word	0x20100000
   20d58:	5a000001 	.word	0x5a000001
   20d5c:	5a000020 	.word	0x5a000020

00020d60 <sysinit>:
   20d60:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   20d64:	e24dd01c 	sub	sp, sp, #28
   20d68:	f1080040 	cpsie	f
   20d6c:	ee113f50 	mrc	15, 0, r3, cr1, cr0, {2}
   20d70:	e383360f 	orr	r3, r3, #15728640	; 0xf00000
   20d74:	ee013f50 	mcr	15, 0, r3, cr1, cr0, {2}
   20d78:	e3a02000 	mov	r2, #0
   20d7c:	ee072f95 	mcr	15, 0, r2, cr7, cr5, {4}
   20d80:	e3a03101 	mov	r3, #1073741824	; 0x40000000
   20d84:	eee83a10 	vmsr	fpexc, r3
   20d88:	e3a03402 	mov	r3, #33554432	; 0x2000000
   20d8c:	eee13a10 	vmsr	fpscr, r3
   20d90:	e59f3068 	ldr	r3, [pc, #104]	; 20e00 <sysinit+0xa0>
   20d94:	e59f1068 	ldr	r1, [pc, #104]	; 20e04 <sysinit+0xa4>
   20d98:	e1530001 	cmp	r3, r1
   20d9c:	2a000002 	bcs	20dac <sysinit+0x4c>
   20da0:	e4c32001 	strb	r2, [r3], #1
   20da4:	e1530001 	cmp	r3, r1
   20da8:	1afffffc 	bne	20da0 <sysinit+0x40>
   20dac:	e1a0000d 	mov	r0, sp
   20db0:	ebfff2e9 	bl	1d95c <CMachineInfo::CMachineInfo()>
   20db4:	e59f504c 	ldr	r5, [pc, #76]	; 20e08 <sysinit+0xa8>
   20db8:	e59f304c 	ldr	r3, [pc, #76]	; 20e0c <sysinit+0xac>
   20dbc:	e1550003 	cmp	r5, r3
   20dc0:	2a000009 	bcs	20dec <sysinit+0x8c>
   20dc4:	e1e06005 	mvn	r6, r5
   20dc8:	e3a04000 	mov	r4, #0
   20dcc:	e0866003 	add	r6, r6, r3
   20dd0:	e1a06126 	lsr	r6, r6, #2
   20dd4:	e2866001 	add	r6, r6, #1
   20dd8:	e2844001 	add	r4, r4, #1
   20ddc:	e4953004 	ldr	r3, [r5], #4
   20de0:	e12fff33 	blx	r3
   20de4:	e1540006 	cmp	r4, r6
   20de8:	1afffffa 	bne	20dd8 <sysinit+0x78>
   20dec:	ebff9c9d 	bl	8068 <main>
   20df0:	e3500001 	cmp	r0, #1
   20df4:	0a000000 	beq	20dfc <sysinit+0x9c>
   20df8:	ebffffca 	bl	20d28 <halt>
   20dfc:	ebffffcc 	bl	20d34 <reboot>
   20e00:	0002b8f4 	.word	0x0002b8f4
   20e04:	0002b9f8 	.word	0x0002b9f8
   20e08:	0002aea8 	.word	0x0002aea8
   20e0c:	0002aebc 	.word	0x0002aebc

00020e10 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]>:
   20e10:	e2800001 	add	r0, r0, #1
   20e14:	e3a03000 	mov	r3, #0
   20e18:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   20e1c:	e59f3020 	ldr	r3, [pc, #32]	; 20e44 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]+0x34>
   20e20:	e1a01003 	mov	r1, r3
   20e24:	e5932004 	ldr	r2, [r3, #4]
   20e28:	e5913004 	ldr	r3, [r1, #4]
   20e2c:	e0433002 	sub	r3, r3, r2
   20e30:	e1500003 	cmp	r0, r3
   20e34:	8afffffb 	bhi	20e28 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]+0x18>
   20e38:	e3a03000 	mov	r3, #0
   20e3c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   20e40:	e12fff1e 	bx	lr
   20e44:	20003000 	.word	0x20003000

00020e48 <CTimer::CTimer(CInterruptSystem*)>:
   20e48:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   20e4c:	e3a05000 	mov	r5, #0
   20e50:	e3a07001 	mov	r7, #1
   20e54:	e1a04000 	mov	r4, r0
   20e58:	e59f605c 	ldr	r6, [pc, #92]	; 20ebc <CTimer::CTimer(CInterruptSystem*)+0x74>
   20e5c:	e5805004 	str	r5, [r0, #4]
   20e60:	e5801000 	str	r1, [r0]
   20e64:	e5805008 	str	r5, [r0, #8]
   20e68:	e5805014 	str	r5, [r0, #20]
   20e6c:	e5807010 	str	r7, [r0, #16]
   20e70:	e580500c 	str	r5, [r0, #12]
   20e74:	e2800018 	add	r0, r0, #24
   20e78:	eb000be8 	bl	23e20 <CPtrList::CPtrList()>
   20e7c:	e5961000 	ldr	r1, [r6]
   20e80:	e59f2038 	ldr	r2, [pc, #56]	; 20ec0 <CTimer::CTimer(CInterruptSystem*)+0x78>
   20e84:	e59f3038 	ldr	r3, [pc, #56]	; 20ec4 <CTimer::CTimer(CInterruptSystem*)+0x7c>
   20e88:	e1510005 	cmp	r1, r5
   20e8c:	e584701c 	str	r7, [r4, #28]
   20e90:	e5845028 	str	r5, [r4, #40]	; 0x28
   20e94:	e5842020 	str	r2, [r4, #32]
   20e98:	e5843024 	str	r3, [r4, #36]	; 0x24
   20e9c:	0a000003 	beq	20eb0 <CTimer::CTimer(CInterruptSystem*)+0x68>
   20ea0:	e3a0203d 	mov	r2, #61	; 0x3d
   20ea4:	e59f101c 	ldr	r1, [pc, #28]	; 20ec8 <CTimer::CTimer(CInterruptSystem*)+0x80>
   20ea8:	e59f001c 	ldr	r0, [pc, #28]	; 20ecc <CTimer::CTimer(CInterruptSystem*)+0x84>
   20eac:	ebffe6f1 	bl	1aa78 <assertion_failed>
   20eb0:	e5864000 	str	r4, [r6]
   20eb4:	e1a00004 	mov	r0, r4
   20eb8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   20ebc:	0002b970 	.word	0x0002b970
   20ec0:	00055730 	.word	0x00055730
   20ec4:	0000015e 	.word	0x0000015e
   20ec8:	00029a44 	.word	0x00029a44
   20ecc:	00029a50 	.word	0x00029a50

00020ed0 <CTimer::~CTimer()>:
   20ed0:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20ed4:	e1a0a000 	mov	sl, r0
   20ed8:	e5900000 	ldr	r0, [r0]
   20edc:	e3500000 	cmp	r0, #0
   20ee0:	0a000028 	beq	20f88 <CTimer::~CTimer()+0xb8>
   20ee4:	e3a01003 	mov	r1, #3
   20ee8:	ebffee77 	bl	1c8cc <CInterruptSystem::DisconnectIRQ(unsigned int)>
   20eec:	e3a0904b 	mov	r9, #75	; 0x4b
   20ef0:	e59f70a8 	ldr	r7, [pc, #168]	; 20fa0 <CTimer::~CTimer()+0xd0>
   20ef4:	e59f60a8 	ldr	r6, [pc, #168]	; 20fa4 <CTimer::~CTimer()+0xd4>
   20ef8:	e59f80a8 	ldr	r8, [pc, #168]	; 20fa8 <CTimer::~CTimer()+0xd8>
   20efc:	e28a4018 	add	r4, sl, #24
   20f00:	ea000011 	b	20f4c <CTimer::~CTimer()+0x7c>
   20f04:	e1a01005 	mov	r1, r5
   20f08:	e1a00004 	mov	r0, r4
   20f0c:	eb000beb 	bl	23ec0 <CPtrList::GetPtr(TPtrListElement*)>
   20f10:	e250b000 	subs	fp, r0, #0
   20f14:	0a000016 	beq	20f74 <CTimer::~CTimer()+0xa4>
   20f18:	e59b3000 	ldr	r3, [fp]
   20f1c:	e1530006 	cmp	r3, r6
   20f20:	0a000003 	beq	20f34 <CTimer::~CTimer()+0x64>
   20f24:	e1a02009 	mov	r2, r9
   20f28:	e1a01007 	mov	r1, r7
   20f2c:	e1a00008 	mov	r0, r8
   20f30:	ebffe6d0 	bl	1aa78 <assertion_failed>
   20f34:	e1a01005 	mov	r1, r5
   20f38:	e1a00004 	mov	r0, r4
   20f3c:	eb000c74 	bl	24114 <CPtrList::Remove(TPtrListElement*)>
   20f40:	e1a0000b 	mov	r0, fp
   20f44:	e3a01014 	mov	r1, #20
   20f48:	eb000793 	bl	22d9c <operator delete(void*, unsigned int)>
   20f4c:	e1a00004 	mov	r0, r4
   20f50:	eb000bc2 	bl	23e60 <CPtrList::GetFirst()>
   20f54:	e2505000 	subs	r5, r0, #0
   20f58:	1affffe9 	bne	20f04 <CTimer::~CTimer()+0x34>
   20f5c:	e59f3048 	ldr	r3, [pc, #72]	; 20fac <CTimer::~CTimer()+0xdc>
   20f60:	e1a00004 	mov	r0, r4
   20f64:	e5835000 	str	r5, [r3]
   20f68:	eb000baf 	bl	23e2c <CPtrList::~CPtrList()>
   20f6c:	e1a0000a 	mov	r0, sl
   20f70:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20f74:	e3a0204a 	mov	r2, #74	; 0x4a
   20f78:	e1a01007 	mov	r1, r7
   20f7c:	e59f002c 	ldr	r0, [pc, #44]	; 20fb0 <CTimer::~CTimer()+0xe0>
   20f80:	ebffe6bc 	bl	1aa78 <assertion_failed>
   20f84:	eaffffe3 	b	20f18 <CTimer::~CTimer()+0x48>
   20f88:	e59f0024 	ldr	r0, [pc, #36]	; 20fb4 <CTimer::~CTimer()+0xe4>
   20f8c:	e3a02043 	mov	r2, #67	; 0x43
   20f90:	e59f1008 	ldr	r1, [pc, #8]	; 20fa0 <CTimer::~CTimer()+0xd0>
   20f94:	ebffe6b7 	bl	1aa78 <assertion_failed>
   20f98:	e59a0000 	ldr	r0, [sl]
   20f9c:	eaffffd0 	b	20ee4 <CTimer::~CTimer()+0x14>
   20fa0:	00029a44 	.word	0x00029a44
   20fa4:	4b544d43 	.word	0x4b544d43
   20fa8:	00029a60 	.word	0x00029a60
   20fac:	0002b970 	.word	0x0002b970
   20fb0:	00026b90 	.word	0x00026b90
   20fb4:	0002479c 	.word	0x0002479c

00020fb8 <CTimer::SetTimeZone(int)>:
   20fb8:	e59f2018 	ldr	r2, [pc, #24]	; 20fd8 <CTimer::SetTimeZone(int)+0x20>
   20fbc:	e2813e59 	add	r3, r1, #1424	; 0x590
   20fc0:	e283300f 	add	r3, r3, #15
   20fc4:	e1530002 	cmp	r3, r2
   20fc8:	95801014 	strls	r1, [r0, #20]
   20fcc:	93a00001 	movls	r0, #1
   20fd0:	83a00000 	movhi	r0, #0
   20fd4:	e12fff1e 	bx	lr
   20fd8:	00000b3e 	.word	0x00000b3e

00020fdc <CTimer::GetTimeZone() const>:
   20fdc:	e5900014 	ldr	r0, [r0, #20]
   20fe0:	e12fff1e 	bx	lr

00020fe4 <CTimer::SetTime(unsigned int, bool)>:
   20fe4:	e3520000 	cmp	r2, #0
   20fe8:	e92d4070 	push	{r4, r5, r6, lr}
   20fec:	e1a04000 	mov	r4, r0
   20ff0:	e1a05001 	mov	r5, r1
   20ff4:	1a000004 	bne	2100c <CTimer::SetTime(unsigned int, bool)+0x28>
   20ff8:	e5903014 	ldr	r3, [r0, #20]
   20ffc:	e0633203 	rsb	r3, r3, r3, lsl #4
   21000:	e1b03103 	lsls	r3, r3, #2
   21004:	4a00000e 	bmi	21044 <CTimer::SetTime(unsigned int, bool)+0x60>
   21008:	e0855003 	add	r5, r5, r3
   2100c:	e5940010 	ldr	r0, [r4, #16]
   21010:	e3500000 	cmp	r0, #0
   21014:	1a000002 	bne	21024 <CTimer::SetTime(unsigned int, bool)+0x40>
   21018:	e3a00001 	mov	r0, #1
   2101c:	e584500c 	str	r5, [r4, #12]
   21020:	e8bd8070 	pop	{r4, r5, r6, pc}
   21024:	eb0006fe 	bl	22c24 <EnterCritical>
   21028:	e5943010 	ldr	r3, [r4, #16]
   2102c:	e584500c 	str	r5, [r4, #12]
   21030:	e3530000 	cmp	r3, #0
   21034:	0a000007 	beq	21058 <CTimer::SetTime(unsigned int, bool)+0x74>
   21038:	eb000726 	bl	22cd8 <LeaveCritical>
   2103c:	e3a00001 	mov	r0, #1
   21040:	e8bd8070 	pop	{r4, r5, r6, pc}
   21044:	e2631000 	rsb	r1, r3, #0
   21048:	e1510005 	cmp	r1, r5
   2104c:	daffffed 	ble	21008 <CTimer::SetTime(unsigned int, bool)+0x24>
   21050:	e1a00002 	mov	r0, r2
   21054:	e8bd8070 	pop	{r4, r5, r6, pc}
   21058:	e3a00001 	mov	r0, #1
   2105c:	e8bd8070 	pop	{r4, r5, r6, pc}

00021060 <CTimer::GetClockTicks()>:
   21060:	e3a03000 	mov	r3, #0
   21064:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   21068:	e59f2008 	ldr	r2, [pc, #8]	; 21078 <CTimer::GetClockTicks()+0x18>
   2106c:	e5920004 	ldr	r0, [r2, #4]
   21070:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   21074:	e12fff1e 	bx	lr
   21078:	20003000 	.word	0x20003000

0002107c <CTimer::GetTicks() const>:
   2107c:	e5900004 	ldr	r0, [r0, #4]
   21080:	e12fff1e 	bx	lr

00021084 <CTimer::GetUptime() const>:
   21084:	e5900008 	ldr	r0, [r0, #8]
   21088:	e12fff1e 	bx	lr

0002108c <CTimer::GetTime() const>:
   2108c:	e590000c 	ldr	r0, [r0, #12]
   21090:	e12fff1e 	bx	lr

00021094 <CTimer::GetLocalTime(unsigned int*, unsigned int*)>:
   21094:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   21098:	e1a04000 	mov	r4, r0
   2109c:	e5900010 	ldr	r0, [r0, #16]
   210a0:	e1a06001 	mov	r6, r1
   210a4:	e3500000 	cmp	r0, #0
   210a8:	e1a05002 	mov	r5, r2
   210ac:	1a000011 	bne	210f8 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x64>
   210b0:	e594700c 	ldr	r7, [r4, #12]
   210b4:	e5944004 	ldr	r4, [r4, #4]
   210b8:	e3560000 	cmp	r6, #0
   210bc:	0a00001a 	beq	2112c <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x98>
   210c0:	e3550000 	cmp	r5, #0
   210c4:	e5867000 	str	r7, [r6]
   210c8:	0a000012 	beq	21118 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x84>
   210cc:	e3a03064 	mov	r3, #100	; 0x64
   210d0:	e59f2068 	ldr	r2, [pc, #104]	; 21140 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xac>
   210d4:	e59f1068 	ldr	r1, [pc, #104]	; 21144 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb0>
   210d8:	e0820492 	umull	r0, r2, r2, r4
   210dc:	e1a022a2 	lsr	r2, r2, #5
   210e0:	e0030293 	mul	r3, r3, r2
   210e4:	e0443003 	sub	r3, r4, r3
   210e8:	e0030391 	mul	r3, r1, r3
   210ec:	e3a00001 	mov	r0, #1
   210f0:	e5853000 	str	r3, [r5]
   210f4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   210f8:	eb0006c9 	bl	22c24 <EnterCritical>
   210fc:	e5943010 	ldr	r3, [r4, #16]
   21100:	e594700c 	ldr	r7, [r4, #12]
   21104:	e3530000 	cmp	r3, #0
   21108:	e5944004 	ldr	r4, [r4, #4]
   2110c:	0affffe9 	beq	210b8 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x24>
   21110:	eb0006f0 	bl	22cd8 <LeaveCritical>
   21114:	eaffffe7 	b	210b8 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x24>
   21118:	e3a020dd 	mov	r2, #221	; 0xdd
   2111c:	e59f1024 	ldr	r1, [pc, #36]	; 21148 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb4>
   21120:	e59f0024 	ldr	r0, [pc, #36]	; 2114c <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb8>
   21124:	ebffe653 	bl	1aa78 <assertion_failed>
   21128:	eaffffe7 	b	210cc <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x38>
   2112c:	e3a020da 	mov	r2, #218	; 0xda
   21130:	e59f1010 	ldr	r1, [pc, #16]	; 21148 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb4>
   21134:	e59f0014 	ldr	r0, [pc, #20]	; 21150 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xbc>
   21138:	ebffe64e 	bl	1aa78 <assertion_failed>
   2113c:	eaffffdf 	b	210c0 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x2c>
   21140:	51eb851f 	.word	0x51eb851f
   21144:	00002710 	.word	0x00002710
   21148:	00029a44 	.word	0x00029a44
   2114c:	00029a98 	.word	0x00029a98
   21150:	00029a88 	.word	0x00029a88

00021154 <CTimer::GetUniversalTime() const>:
   21154:	e5903014 	ldr	r3, [r0, #20]
   21158:	e590000c 	ldr	r0, [r0, #12]
   2115c:	e0633203 	rsb	r3, r3, r3, lsl #4
   21160:	e1a03103 	lsl	r3, r3, #2
   21164:	e1530000 	cmp	r3, r0
   21168:	d0400003 	suble	r0, r0, r3
   2116c:	c3a00000 	movgt	r0, #0
   21170:	e12fff1e 	bx	lr

00021174 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)>:
   21174:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   21178:	e1a05000 	mov	r5, r0
   2117c:	e5900010 	ldr	r0, [r0, #16]
   21180:	e1a09001 	mov	r9, r1
   21184:	e3500000 	cmp	r0, #0
   21188:	e1a07002 	mov	r7, r2
   2118c:	1a000019 	bne	211f8 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x84>
   21190:	e595600c 	ldr	r6, [r5, #12]
   21194:	e5958004 	ldr	r8, [r5, #4]
   21198:	e5953014 	ldr	r3, [r5, #20]
   2119c:	e0633203 	rsb	r3, r3, r3, lsl #4
   211a0:	e1a04103 	lsl	r4, r3, #2
   211a4:	e1540006 	cmp	r4, r6
   211a8:	ca000010 	bgt	211f0 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x7c>
   211ac:	e3590000 	cmp	r9, #0
   211b0:	0a00001d 	beq	2122c <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xb8>
   211b4:	e0464004 	sub	r4, r6, r4
   211b8:	e3570000 	cmp	r7, #0
   211bc:	e5894000 	str	r4, [r9]
   211c0:	0a000014 	beq	21218 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xa4>
   211c4:	e3a03064 	mov	r3, #100	; 0x64
   211c8:	e59f2070 	ldr	r2, [pc, #112]	; 21240 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xcc>
   211cc:	e59f1070 	ldr	r1, [pc, #112]	; 21244 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd0>
   211d0:	e0820892 	umull	r0, r2, r2, r8
   211d4:	e1a022a2 	lsr	r2, r2, #5
   211d8:	e0030293 	mul	r3, r3, r2
   211dc:	e0483003 	sub	r3, r8, r3
   211e0:	e0030391 	mul	r3, r1, r3
   211e4:	e3a00001 	mov	r0, #1
   211e8:	e5873000 	str	r3, [r7]
   211ec:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   211f0:	e3a00000 	mov	r0, #0
   211f4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   211f8:	eb000689 	bl	22c24 <EnterCritical>
   211fc:	e5953010 	ldr	r3, [r5, #16]
   21200:	e595600c 	ldr	r6, [r5, #12]
   21204:	e3530000 	cmp	r3, #0
   21208:	e5958004 	ldr	r8, [r5, #4]
   2120c:	0affffe1 	beq	21198 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x24>
   21210:	eb0006b0 	bl	22cd8 <LeaveCritical>
   21214:	eaffffdf 	b	21198 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x24>
   21218:	e59f2028 	ldr	r2, [pc, #40]	; 21248 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd4>
   2121c:	e59f1028 	ldr	r1, [pc, #40]	; 2124c <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd8>
   21220:	e59f0028 	ldr	r0, [pc, #40]	; 21250 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xdc>
   21224:	ebffe613 	bl	1aa78 <assertion_failed>
   21228:	eaffffe5 	b	211c4 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x50>
   2122c:	e3a020ff 	mov	r2, #255	; 0xff
   21230:	e59f1014 	ldr	r1, [pc, #20]	; 2124c <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd8>
   21234:	e59f0018 	ldr	r0, [pc, #24]	; 21254 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xe0>
   21238:	ebffe60e 	bl	1aa78 <assertion_failed>
   2123c:	eaffffdc 	b	211b4 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x40>
   21240:	51eb851f 	.word	0x51eb851f
   21244:	00002710 	.word	0x00002710
   21248:	00000102 	.word	0x00000102
   2124c:	00029a44 	.word	0x00029a44
   21250:	00029a98 	.word	0x00029a98
   21254:	00029a88 	.word	0x00029a88

00021258 <CTimer::GetTimeString()>:
   21258:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2125c:	e1a05000 	mov	r5, r0
   21260:	e5900010 	ldr	r0, [r0, #16]
   21264:	e24dd014 	sub	sp, sp, #20
   21268:	e3500000 	cmp	r0, #0
   2126c:	1a000065 	bne	21408 <CTimer::GetTimeString()+0x1b0>
   21270:	e595400c 	ldr	r4, [r5, #12]
   21274:	e5959004 	ldr	r9, [r5, #4]
   21278:	e1940009 	orrs	r0, r4, r9
   2127c:	0a00003e 	beq	2137c <CTimer::GetTimeString()+0x124>
   21280:	e59f61a0 	ldr	r6, [pc, #416]	; 21428 <CTimer::GetTimeString()+0x1d0>
   21284:	e59f81a0 	ldr	r8, [pc, #416]	; 2142c <CTimer::GetTimeString()+0x1d4>
   21288:	e0873496 	umull	r3, r7, r6, r4
   2128c:	e1a072a7 	lsr	r7, r7, #5
   21290:	e0863796 	umull	r3, r6, r6, r7
   21294:	e59f3194 	ldr	r3, [pc, #404]	; 21430 <CTimer::GetTimeString()+0x1d8>
   21298:	e0882498 	umull	r2, r8, r8, r4
   2129c:	e0832493 	umull	r2, r3, r3, r4
   212a0:	e1a062a6 	lsr	r6, r6, #5
   212a4:	e0666206 	rsb	r6, r6, r6, lsl #4
   212a8:	e0672207 	rsb	r2, r7, r7, lsl #4
   212ac:	e0476106 	sub	r6, r7, r6, lsl #2
   212b0:	e3a0a064 	mov	sl, #100	; 0x64
   212b4:	e0447102 	sub	r7, r4, r2, lsl #2
   212b8:	e3a0be19 	mov	fp, #400	; 0x190
   212bc:	e59f5170 	ldr	r5, [pc, #368]	; 21434 <CTimer::GetTimeString()+0x1dc>
   212c0:	e59fe170 	ldr	lr, [pc, #368]	; 21438 <CTimer::GetTimeString()+0x1e0>
   212c4:	e59fc170 	ldr	ip, [pc, #368]	; 2143c <CTimer::GetTimeString()+0x1e4>
   212c8:	e59f0170 	ldr	r0, [pc, #368]	; 21440 <CTimer::GetTimeString()+0x1e8>
   212cc:	e1a085a8 	lsr	r8, r8, #11
   212d0:	e1a04823 	lsr	r4, r3, #16
   212d4:	ea00000a 	b	21304 <CTimer::GetTimeString()+0xac>
   212d8:	e001019b 	mul	r1, fp, r1
   212dc:	e0451001 	sub	r1, r5, r1
   212e0:	e16f1f11 	clz	r1, r1
   212e4:	e1a012a1 	lsr	r1, r1, #5
   212e8:	e3510000 	cmp	r1, #0
   212ec:	01a0300c 	moveq	r3, ip
   212f0:	11a03000 	movne	r3, r0
   212f4:	e1540003 	cmp	r4, r3
   212f8:	3a000021 	bcc	21384 <CTimer::GetTimeString()+0x12c>
   212fc:	e0444003 	sub	r4, r4, r3
   21300:	e2855001 	add	r5, r5, #1
   21304:	e081359e 	umull	r3, r1, lr, r5
   21308:	e1a032a1 	lsr	r3, r1, #5
   2130c:	e003039a 	mul	r3, sl, r3
   21310:	e1550003 	cmp	r5, r3
   21314:	e1a013a1 	lsr	r1, r1, #7
   21318:	0affffee 	beq	212d8 <CTimer::GetTimeString()+0x80>
   2131c:	e3150003 	tst	r5, #3
   21320:	03a01001 	moveq	r1, #1
   21324:	13a01000 	movne	r1, #0
   21328:	eaffffee 	b	212e8 <CTimer::GetTimeString()+0x90>
   2132c:	e3a03064 	mov	r3, #100	; 0x64
   21330:	e59fb100 	ldr	fp, [pc, #256]	; 21438 <CTimer::GetTimeString()+0x1e0>
   21334:	e3a00010 	mov	r0, #16
   21338:	e08b299b 	umull	r2, fp, fp, r9
   2133c:	e1a0b2ab 	lsr	fp, fp, #5
   21340:	e00b0b93 	mul	fp, r3, fp
   21344:	eb000690 	bl	22d8c <operator new(unsigned int)>
   21348:	e049b00b 	sub	fp, r9, fp
   2134c:	e1a09000 	mov	r9, r0
   21350:	ebfffa79 	bl	1fd3c <CString::CString()>
   21354:	e59f30e8 	ldr	r3, [pc, #232]	; 21444 <CTimer::GetTimeString()+0x1ec>
   21358:	e1550003 	cmp	r5, r3
   2135c:	8a000018 	bhi	213c4 <CTimer::GetTimeString()+0x16c>
   21360:	e1a00009 	mov	r0, r9
   21364:	e88d0880 	stm	sp, {r7, fp}
   21368:	e1a03006 	mov	r3, r6
   2136c:	e1a02008 	mov	r2, r8
   21370:	e59f10d0 	ldr	r1, [pc, #208]	; 21448 <CTimer::GetTimeString()+0x1f0>
   21374:	ebfffe5e 	bl	20cf4 <CString::Format(char const*, ...)>
   21378:	e1a00009 	mov	r0, r9
   2137c:	e28dd014 	add	sp, sp, #20
   21380:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21384:	e3a0a000 	mov	sl, #0
   21388:	e3a0001d 	mov	r0, #29
   2138c:	e59f20b8 	ldr	r2, [pc, #184]	; 2144c <CTimer::GetTimeString()+0x1f4>
   21390:	ea000004 	b	213a8 <CTimer::GetTimeString()+0x150>
   21394:	e1a03000 	mov	r3, r0
   21398:	e1540003 	cmp	r4, r3
   2139c:	3affffe2 	bcc	2132c <CTimer::GetTimeString()+0xd4>
   213a0:	e0444003 	sub	r4, r4, r3
   213a4:	e28aa001 	add	sl, sl, #1
   213a8:	e35a0001 	cmp	sl, #1
   213ac:	13a03000 	movne	r3, #0
   213b0:	02013001 	andeq	r3, r1, #1
   213b4:	e3530000 	cmp	r3, #0
   213b8:	1afffff5 	bne	21394 <CTimer::GetTimeString()+0x13c>
   213bc:	e792310a 	ldr	r3, [r2, sl, lsl #2]
   213c0:	eafffff4 	b	21398 <CTimer::GetTimeString()+0x140>
   213c4:	e59f3084 	ldr	r3, [pc, #132]	; 21450 <CTimer::GetTimeString()+0x1f8>
   213c8:	e58db00c 	str	fp, [sp, #12]
   213cc:	e0832893 	umull	r2, r3, r3, r8
   213d0:	e1a03223 	lsr	r3, r3, #4
   213d4:	e0833083 	add	r3, r3, r3, lsl #1
   213d8:	e59f2074 	ldr	r2, [pc, #116]	; 21454 <CTimer::GetTimeString()+0x1fc>
   213dc:	e0488183 	sub	r8, r8, r3, lsl #3
   213e0:	e792210a 	ldr	r2, [r2, sl, lsl #2]
   213e4:	e1a00009 	mov	r0, r9
   213e8:	e98d00c0 	stmib	sp, {r6, r7}
   213ec:	e2843001 	add	r3, r4, #1
   213f0:	e58d8000 	str	r8, [sp]
   213f4:	e59f105c 	ldr	r1, [pc, #92]	; 21458 <CTimer::GetTimeString()+0x200>
   213f8:	ebfffe3d 	bl	20cf4 <CString::Format(char const*, ...)>
   213fc:	e1a00009 	mov	r0, r9
   21400:	e28dd014 	add	sp, sp, #20
   21404:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21408:	eb000605 	bl	22c24 <EnterCritical>
   2140c:	e5953010 	ldr	r3, [r5, #16]
   21410:	e595400c 	ldr	r4, [r5, #12]
   21414:	e3530000 	cmp	r3, #0
   21418:	e5959004 	ldr	r9, [r5, #4]
   2141c:	0affff95 	beq	21278 <CTimer::GetTimeString()+0x20>
   21420:	eb00062c 	bl	22cd8 <LeaveCritical>
   21424:	eaffff93 	b	21278 <CTimer::GetTimeString()+0x20>
   21428:	88888889 	.word	0x88888889
   2142c:	91a2b3c5 	.word	0x91a2b3c5
   21430:	c22e4507 	.word	0xc22e4507
   21434:	000007b2 	.word	0x000007b2
   21438:	51eb851f 	.word	0x51eb851f
   2143c:	0000016d 	.word	0x0000016d
   21440:	0000016e 	.word	0x0000016e
   21444:	000007b7 	.word	0x000007b7
   21448:	00029ac8 	.word	0x00029ac8
   2144c:	00029a0c 	.word	0x00029a0c
   21450:	aaaaaaab 	.word	0xaaaaaaab
   21454:	0002b7f4 	.word	0x0002b7f4
   21458:	00029aac 	.word	0x00029aac

0002145c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>:
   2145c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21460:	e1a09000 	mov	r9, r0
   21464:	e24dd00c 	sub	sp, sp, #12
   21468:	e58d0004 	str	r0, [sp, #4]
   2146c:	e1a04002 	mov	r4, r2
   21470:	e3a00014 	mov	r0, #20
   21474:	e1a06001 	mov	r6, r1
   21478:	e1a07003 	mov	r7, r3
   2147c:	e59d5030 	ldr	r5, [sp, #48]	; 0x30
   21480:	eb000641 	bl	22d8c <operator new(unsigned int)>
   21484:	e5991004 	ldr	r1, [r9, #4]
   21488:	e3540000 	cmp	r4, #0
   2148c:	e1a08000 	mov	r8, r0
   21490:	e0816006 	add	r6, r1, r6
   21494:	0a00003d 	beq	21590 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x134>
   21498:	e59d3004 	ldr	r3, [sp, #4]
   2149c:	e59f2100 	ldr	r2, [pc, #256]	; 215a4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x148>
   214a0:	e593001c 	ldr	r0, [r3, #28]
   214a4:	e98800d0 	stmib	r8, {r4, r6, r7}
   214a8:	e3500000 	cmp	r0, #0
   214ac:	e5885010 	str	r5, [r8, #16]
   214b0:	e5882000 	str	r2, [r8]
   214b4:	1a000033 	bne	21588 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x12c>
   214b8:	e59d3004 	ldr	r3, [sp, #4]
   214bc:	e2835018 	add	r5, r3, #24
   214c0:	e1a00005 	mov	r0, r5
   214c4:	eb000a65 	bl	23e60 <CPtrList::GetFirst()>
   214c8:	e2504000 	subs	r4, r0, #0
   214cc:	0a000028 	beq	21574 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x118>
   214d0:	e59f90d0 	ldr	r9, [pc, #208]	; 215a8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x14c>
   214d4:	e59f70c8 	ldr	r7, [pc, #200]	; 215a4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x148>
   214d8:	e59fb0cc 	ldr	fp, [pc, #204]	; 215ac <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x150>
   214dc:	ea000010 	b	21524 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xc8>
   214e0:	e59a3000 	ldr	r3, [sl]
   214e4:	e1530007 	cmp	r3, r7
   214e8:	0a000003 	beq	214fc <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xa0>
   214ec:	e1a0200b 	mov	r2, fp
   214f0:	e1a01009 	mov	r1, r9
   214f4:	e59f00b4 	ldr	r0, [pc, #180]	; 215b0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x154>
   214f8:	ebffe55e 	bl	1aa78 <assertion_failed>
   214fc:	e59a3008 	ldr	r3, [sl, #8]
   21500:	e1a01004 	mov	r1, r4
   21504:	e0433006 	sub	r3, r3, r6
   21508:	e3530000 	cmp	r3, #0
   2150c:	e1a00005 	mov	r0, r5
   21510:	ca00000d 	bgt	2154c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xf0>
   21514:	eb000a53 	bl	23e68 <CPtrList::GetNext(TPtrListElement*)>
   21518:	e3500000 	cmp	r0, #0
   2151c:	0a000014 	beq	21574 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x118>
   21520:	e1a04000 	mov	r4, r0
   21524:	e1a01004 	mov	r1, r4
   21528:	e1a00005 	mov	r0, r5
   2152c:	eb000a63 	bl	23ec0 <CPtrList::GetPtr(TPtrListElement*)>
   21530:	e250a000 	subs	sl, r0, #0
   21534:	1affffe9 	bne	214e0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x84>
   21538:	e59f2074 	ldr	r2, [pc, #116]	; 215b4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x158>
   2153c:	e1a01009 	mov	r1, r9
   21540:	e59f0070 	ldr	r0, [pc, #112]	; 215b8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x15c>
   21544:	ebffe54b 	bl	1aa78 <assertion_failed>
   21548:	eaffffe4 	b	214e0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x84>
   2154c:	e1a02008 	mov	r2, r8
   21550:	eb000a70 	bl	23f18 <CPtrList::InsertBefore(TPtrListElement*, void*)>
   21554:	e59d3004 	ldr	r3, [sp, #4]
   21558:	e593301c 	ldr	r3, [r3, #28]
   2155c:	e3530000 	cmp	r3, #0
   21560:	0a000000 	beq	21568 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x10c>
   21564:	eb0005db 	bl	22cd8 <LeaveCritical>
   21568:	e1a00008 	mov	r0, r8
   2156c:	e28dd00c 	add	sp, sp, #12
   21570:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21574:	e1a01004 	mov	r1, r4
   21578:	e1a00005 	mov	r0, r5
   2157c:	e1a02008 	mov	r2, r8
   21580:	eb000aa5 	bl	2401c <CPtrList::InsertAfter(TPtrListElement*, void*)>
   21584:	eafffff2 	b	21554 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xf8>
   21588:	eb0005a5 	bl	22c24 <EnterCritical>
   2158c:	eaffffc9 	b	214b8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x5c>
   21590:	e59f2024 	ldr	r2, [pc, #36]	; 215bc <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x160>
   21594:	e59f100c 	ldr	r1, [pc, #12]	; 215a8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x14c>
   21598:	e59f0020 	ldr	r0, [pc, #32]	; 215c0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x164>
   2159c:	ebffe535 	bl	1aa78 <assertion_failed>
   215a0:	eaffffbc 	b	21498 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x3c>
   215a4:	4b544d43 	.word	0x4b544d43
   215a8:	00029a44 	.word	0x00029a44
   215ac:	0000016a 	.word	0x0000016a
   215b0:	00029aec 	.word	0x00029aec
   215b4:	00000169 	.word	0x00000169
   215b8:	00029adc 	.word	0x00029adc
   215bc:	00000159 	.word	0x00000159
   215c0:	00029484 	.word	0x00029484

000215c4 <CTimer::CancelKernelTimer(unsigned int)>:
   215c4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   215c8:	e2514000 	subs	r4, r1, #0
   215cc:	e1a05000 	mov	r5, r0
   215d0:	0a00001f 	beq	21654 <CTimer::CancelKernelTimer(unsigned int)+0x90>
   215d4:	e595001c 	ldr	r0, [r5, #28]
   215d8:	e3500000 	cmp	r0, #0
   215dc:	1a00001a 	bne	2164c <CTimer::CancelKernelTimer(unsigned int)+0x88>
   215e0:	e2856018 	add	r6, r5, #24
   215e4:	e1a00006 	mov	r0, r6
   215e8:	e1a01004 	mov	r1, r4
   215ec:	eb000b1b 	bl	24260 <CPtrList::Find(void*)>
   215f0:	e2507000 	subs	r7, r0, #0
   215f4:	0a00000f 	beq	21638 <CTimer::CancelKernelTimer(unsigned int)+0x74>
   215f8:	e59f3068 	ldr	r3, [pc, #104]	; 21668 <CTimer::CancelKernelTimer(unsigned int)+0xa4>
   215fc:	e5942000 	ldr	r2, [r4]
   21600:	e1520003 	cmp	r2, r3
   21604:	0a000003 	beq	21618 <CTimer::CancelKernelTimer(unsigned int)+0x54>
   21608:	e59f205c 	ldr	r2, [pc, #92]	; 2166c <CTimer::CancelKernelTimer(unsigned int)+0xa8>
   2160c:	e59f105c 	ldr	r1, [pc, #92]	; 21670 <CTimer::CancelKernelTimer(unsigned int)+0xac>
   21610:	e59f005c 	ldr	r0, [pc, #92]	; 21674 <CTimer::CancelKernelTimer(unsigned int)+0xb0>
   21614:	ebffe517 	bl	1aa78 <assertion_failed>
   21618:	e1a01007 	mov	r1, r7
   2161c:	e1a00006 	mov	r0, r6
   21620:	eb000abb 	bl	24114 <CPtrList::Remove(TPtrListElement*)>
   21624:	e3a03000 	mov	r3, #0
   21628:	e1a00004 	mov	r0, r4
   2162c:	e5843000 	str	r3, [r4]
   21630:	e3a01014 	mov	r1, #20
   21634:	eb0005d8 	bl	22d9c <operator delete(void*, unsigned int)>
   21638:	e595301c 	ldr	r3, [r5, #28]
   2163c:	e3530000 	cmp	r3, #0
   21640:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   21644:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   21648:	ea0005a2 	b	22cd8 <LeaveCritical>
   2164c:	eb000574 	bl	22c24 <EnterCritical>
   21650:	eaffffe2 	b	215e0 <CTimer::CancelKernelTimer(unsigned int)+0x1c>
   21654:	e59f201c 	ldr	r2, [pc, #28]	; 21678 <CTimer::CancelKernelTimer(unsigned int)+0xb4>
   21658:	e59f1010 	ldr	r1, [pc, #16]	; 21670 <CTimer::CancelKernelTimer(unsigned int)+0xac>
   2165c:	e59f0018 	ldr	r0, [pc, #24]	; 2167c <CTimer::CancelKernelTimer(unsigned int)+0xb8>
   21660:	ebffe504 	bl	1aa78 <assertion_failed>
   21664:	eaffffda 	b	215d4 <CTimer::CancelKernelTimer(unsigned int)+0x10>
   21668:	4b544d43 	.word	0x4b544d43
   2166c:	0000018d 	.word	0x0000018d
   21670:	00029a44 	.word	0x00029a44
   21674:	00029a60 	.word	0x00029a60
   21678:	00000186 	.word	0x00000186
   2167c:	00026b90 	.word	0x00026b90

00021680 <CTimer::PollKernelTimers()>:
   21680:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21684:	e1a05000 	mov	r5, r0
   21688:	e590001c 	ldr	r0, [r0, #28]
   2168c:	e3500000 	cmp	r0, #0
   21690:	1a00004a 	bne	217c0 <CTimer::PollKernelTimers()+0x140>
   21694:	e2856018 	add	r6, r5, #24
   21698:	e1a00006 	mov	r0, r6
   2169c:	eb0009ef 	bl	23e60 <CPtrList::GetFirst()>
   216a0:	e2504000 	subs	r4, r0, #0
   216a4:	0a00003b 	beq	21798 <CTimer::PollKernelTimers()+0x118>
   216a8:	e59f9118 	ldr	r9, [pc, #280]	; 217c8 <CTimer::PollKernelTimers()+0x148>
   216ac:	e59f8118 	ldr	r8, [pc, #280]	; 217cc <CTimer::PollKernelTimers()+0x14c>
   216b0:	e59fa118 	ldr	sl, [pc, #280]	; 217d0 <CTimer::PollKernelTimers()+0x150>
   216b4:	ea000010 	b	216fc <CTimer::PollKernelTimers()+0x7c>
   216b8:	e5974004 	ldr	r4, [r7, #4]
   216bc:	e3540000 	cmp	r4, #0
   216c0:	0a00002c 	beq	21778 <CTimer::PollKernelTimers()+0xf8>
   216c4:	e5972010 	ldr	r2, [r7, #16]
   216c8:	e597100c 	ldr	r1, [r7, #12]
   216cc:	e1a00007 	mov	r0, r7
   216d0:	e12fff34 	blx	r4
   216d4:	e3a03000 	mov	r3, #0
   216d8:	e1a00007 	mov	r0, r7
   216dc:	e5873000 	str	r3, [r7]
   216e0:	e3a01014 	mov	r1, #20
   216e4:	eb0005ac 	bl	22d9c <operator delete(void*, unsigned int)>
   216e8:	e595001c 	ldr	r0, [r5, #28]
   216ec:	e3500000 	cmp	r0, #0
   216f0:	1a000025 	bne	2178c <CTimer::PollKernelTimers()+0x10c>
   216f4:	e25b4000 	subs	r4, fp, #0
   216f8:	0a000026 	beq	21798 <CTimer::PollKernelTimers()+0x118>
   216fc:	e1a01004 	mov	r1, r4
   21700:	e1a00006 	mov	r0, r6
   21704:	eb0009ed 	bl	23ec0 <CPtrList::GetPtr(TPtrListElement*)>
   21708:	e2507000 	subs	r7, r0, #0
   2170c:	0a000026 	beq	217ac <CTimer::PollKernelTimers()+0x12c>
   21710:	e5973000 	ldr	r3, [r7]
   21714:	e1530008 	cmp	r3, r8
   21718:	0a000003 	beq	2172c <CTimer::PollKernelTimers()+0xac>
   2171c:	e59f20b0 	ldr	r2, [pc, #176]	; 217d4 <CTimer::PollKernelTimers()+0x154>
   21720:	e1a01009 	mov	r1, r9
   21724:	e1a0000a 	mov	r0, sl
   21728:	ebffe4d2 	bl	1aa78 <assertion_failed>
   2172c:	e5952004 	ldr	r2, [r5, #4]
   21730:	e5973008 	ldr	r3, [r7, #8]
   21734:	e0433002 	sub	r3, r3, r2
   21738:	e3530000 	cmp	r3, #0
   2173c:	ca000015 	bgt	21798 <CTimer::PollKernelTimers()+0x118>
   21740:	e1a01004 	mov	r1, r4
   21744:	e1a00006 	mov	r0, r6
   21748:	eb0009c6 	bl	23e68 <CPtrList::GetNext(TPtrListElement*)>
   2174c:	e1a01004 	mov	r1, r4
   21750:	e1a0b000 	mov	fp, r0
   21754:	e1a00006 	mov	r0, r6
   21758:	eb000a6d 	bl	24114 <CPtrList::Remove(TPtrListElement*)>
   2175c:	e595301c 	ldr	r3, [r5, #28]
   21760:	e3530000 	cmp	r3, #0
   21764:	0affffd3 	beq	216b8 <CTimer::PollKernelTimers()+0x38>
   21768:	eb00055a 	bl	22cd8 <LeaveCritical>
   2176c:	e5974004 	ldr	r4, [r7, #4]
   21770:	e3540000 	cmp	r4, #0
   21774:	1affffd2 	bne	216c4 <CTimer::PollKernelTimers()+0x44>
   21778:	e59f2058 	ldr	r2, [pc, #88]	; 217d8 <CTimer::PollKernelTimers()+0x158>
   2177c:	e1a01009 	mov	r1, r9
   21780:	e59f0054 	ldr	r0, [pc, #84]	; 217dc <CTimer::PollKernelTimers()+0x15c>
   21784:	ebffe4bb 	bl	1aa78 <assertion_failed>
   21788:	eaffffcd 	b	216c4 <CTimer::PollKernelTimers()+0x44>
   2178c:	eb000524 	bl	22c24 <EnterCritical>
   21790:	e25b4000 	subs	r4, fp, #0
   21794:	1affffd8 	bne	216fc <CTimer::PollKernelTimers()+0x7c>
   21798:	e595301c 	ldr	r3, [r5, #28]
   2179c:	e3530000 	cmp	r3, #0
   217a0:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   217a4:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   217a8:	ea00054a 	b	22cd8 <LeaveCritical>
   217ac:	e59f202c 	ldr	r2, [pc, #44]	; 217e0 <CTimer::PollKernelTimers()+0x160>
   217b0:	e1a01009 	mov	r1, r9
   217b4:	e59f0028 	ldr	r0, [pc, #40]	; 217e4 <CTimer::PollKernelTimers()+0x164>
   217b8:	ebffe4ae 	bl	1aa78 <assertion_failed>
   217bc:	eaffffd3 	b	21710 <CTimer::PollKernelTimers()+0x90>
   217c0:	eb000517 	bl	22c24 <EnterCritical>
   217c4:	eaffffb2 	b	21694 <CTimer::PollKernelTimers()+0x14>
   217c8:	00029a44 	.word	0x00029a44
   217cc:	4b544d43 	.word	0x4b544d43
   217d0:	00029a60 	.word	0x00029a60
   217d4:	000001a3 	.word	0x000001a3
   217d8:	000001b1 	.word	0x000001b1
   217dc:	00029484 	.word	0x00029484
   217e0:	000001a2 	.word	0x000001a2
   217e4:	00026b90 	.word	0x00026b90

000217e8 <CTimer::InterruptHandler()>:
   217e8:	e92d4010 	push	{r4, lr}
   217ec:	e3a03000 	mov	r3, #0
   217f0:	e1a04000 	mov	r4, r0
   217f4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   217f8:	e59f20e4 	ldr	r2, [pc, #228]	; 218e4 <CTimer::InterruptHandler()+0xfc>
   217fc:	e5923018 	ldr	r3, [r2, #24]
   21800:	e2833c27 	add	r3, r3, #9984	; 0x2700
   21804:	e2833010 	add	r3, r3, #16
   21808:	e5823018 	str	r3, [r2, #24]
   2180c:	e5921004 	ldr	r1, [r2, #4]
   21810:	e1530001 	cmp	r3, r1
   21814:	e3a01008 	mov	r1, #8
   21818:	35923004 	ldrcc	r3, [r2, #4]
   2181c:	32833c27 	addcc	r3, r3, #9984	; 0x2700
   21820:	32833010 	addcc	r3, r3, #16
   21824:	35823018 	strcc	r3, [r2, #24]
   21828:	e59f20b4 	ldr	r2, [pc, #180]	; 218e4 <CTimer::InterruptHandler()+0xfc>
   2182c:	e3a03000 	mov	r3, #0
   21830:	e5821000 	str	r1, [r2]
   21834:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   21838:	e5900010 	ldr	r0, [r0, #16]
   2183c:	e1500003 	cmp	r0, r3
   21840:	1a00001a 	bne	218b0 <CTimer::InterruptHandler()+0xc8>
   21844:	e3a01064 	mov	r1, #100	; 0x64
   21848:	e5942004 	ldr	r2, [r4, #4]
   2184c:	e59f3094 	ldr	r3, [pc, #148]	; 218e8 <CTimer::InterruptHandler()+0x100>
   21850:	e2822001 	add	r2, r2, #1
   21854:	e0830293 	umull	r0, r3, r3, r2
   21858:	e1a032a3 	lsr	r3, r3, #5
   2185c:	e0030391 	mul	r3, r1, r3
   21860:	e0523003 	subs	r3, r2, r3
   21864:	e5842004 	str	r2, [r4, #4]
   21868:	1a000007 	bne	2188c <CTimer::InterruptHandler()+0xa4>
   2186c:	e5942008 	ldr	r2, [r4, #8]
   21870:	e2822001 	add	r2, r2, #1
   21874:	e5842008 	str	r2, [r4, #8]
   21878:	e594200c 	ldr	r2, [r4, #12]
   2187c:	e2822001 	add	r2, r2, #1
   21880:	e584200c 	str	r2, [r4, #12]
   21884:	e3530000 	cmp	r3, #0
   21888:	1a000006 	bne	218a8 <CTimer::InterruptHandler()+0xc0>
   2188c:	e1a00004 	mov	r0, r4
   21890:	ebffff7a 	bl	21680 <CTimer::PollKernelTimers()>
   21894:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   21898:	e3530000 	cmp	r3, #0
   2189c:	08bd8010 	popeq	{r4, pc}
   218a0:	e8bd4010 	pop	{r4, lr}
   218a4:	e12fff13 	bx	r3
   218a8:	eb00050a 	bl	22cd8 <LeaveCritical>
   218ac:	eafffff6 	b	2188c <CTimer::InterruptHandler()+0xa4>
   218b0:	eb0004db 	bl	22c24 <EnterCritical>
   218b4:	e3a01064 	mov	r1, #100	; 0x64
   218b8:	e5943004 	ldr	r3, [r4, #4]
   218bc:	e59f2024 	ldr	r2, [pc, #36]	; 218e8 <CTimer::InterruptHandler()+0x100>
   218c0:	e2833001 	add	r3, r3, #1
   218c4:	e0820392 	umull	r0, r2, r2, r3
   218c8:	e1a022a2 	lsr	r2, r2, #5
   218cc:	e0020291 	mul	r2, r1, r2
   218d0:	e1530002 	cmp	r3, r2
   218d4:	e5843004 	str	r3, [r4, #4]
   218d8:	e5943010 	ldr	r3, [r4, #16]
   218dc:	1affffe8 	bne	21884 <CTimer::InterruptHandler()+0x9c>
   218e0:	eaffffe1 	b	2186c <CTimer::InterruptHandler()+0x84>
   218e4:	20003000 	.word	0x20003000
   218e8:	51eb851f 	.word	0x51eb851f

000218ec <CTimer::InterruptHandler(void*)>:
   218ec:	e92d4010 	push	{r4, lr}
   218f0:	e2504000 	subs	r4, r0, #0
   218f4:	0a000002 	beq	21904 <CTimer::InterruptHandler(void*)+0x18>
   218f8:	e1a00004 	mov	r0, r4
   218fc:	e8bd4010 	pop	{r4, lr}
   21900:	eaffffb8 	b	217e8 <CTimer::InterruptHandler()>
   21904:	e59f0014 	ldr	r0, [pc, #20]	; 21920 <CTimer::InterruptHandler(void*)+0x34>
   21908:	e59f2014 	ldr	r2, [pc, #20]	; 21924 <CTimer::InterruptHandler(void*)+0x38>
   2190c:	e59f1014 	ldr	r1, [pc, #20]	; 21928 <CTimer::InterruptHandler(void*)+0x3c>
   21910:	ebffe458 	bl	1aa78 <assertion_failed>
   21914:	e1a00004 	mov	r0, r4
   21918:	e8bd4010 	pop	{r4, lr}
   2191c:	eaffffb1 	b	217e8 <CTimer::InterruptHandler()>
   21920:	00024764 	.word	0x00024764
   21924:	000001ea 	.word	0x000001ea
   21928:	00029a44 	.word	0x00029a44

0002192c <CTimer::TuneMsDelay()>:
   2192c:	e92d4070 	push	{r4, r5, r6, lr}
   21930:	e1a05000 	mov	r5, r0
   21934:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   21938:	e5953020 	ldr	r3, [r5, #32]
   2193c:	e24dd008 	sub	sp, sp, #8
   21940:	e0000390 	mul	r0, r0, r3
   21944:	e5954004 	ldr	r4, [r5, #4]
   21948:	eb000850 	bl	23a90 <DelayLoop>
   2194c:	e5951004 	ldr	r1, [r5, #4]
   21950:	e59f0068 	ldr	r0, [pc, #104]	; 219c0 <CTimer::TuneMsDelay()+0x94>
   21954:	e0411004 	sub	r1, r1, r4
   21958:	eb000a5f 	bl	242dc <__aeabi_uidiv>
   2195c:	e5953020 	ldr	r3, [r5, #32]
   21960:	e59f405c 	ldr	r4, [pc, #92]	; 219c4 <CTimer::TuneMsDelay()+0x98>
   21964:	e0030093 	mul	r3, r3, r0
   21968:	e0832394 	umull	r2, r3, r4, r3
   2196c:	e59f1054 	ldr	r1, [pc, #84]	; 219c8 <CTimer::TuneMsDelay()+0x9c>
   21970:	e1a032a3 	lsr	r3, r3, #5
   21974:	e2832f7d 	add	r2, r3, #500	; 0x1f4
   21978:	e0821291 	umull	r1, r2, r1, r2
   2197c:	e1a06000 	mov	r6, r0
   21980:	e1a02322 	lsr	r2, r2, #6
   21984:	e5852024 	str	r2, [r5, #36]	; 0x24
   21988:	e5853020 	str	r3, [r5, #32]
   2198c:	ebffee2c 	bl	1d244 <CLogger::Get()>
   21990:	e3a03064 	mov	r3, #100	; 0x64
   21994:	e0842694 	umull	r2, r4, r4, r6
   21998:	e1a042a4 	lsr	r4, r4, #5
   2199c:	e0030493 	mul	r3, r3, r4
   219a0:	e0466003 	sub	r6, r6, r3
   219a4:	e88d0050 	stm	sp, {r4, r6}
   219a8:	e59f301c 	ldr	r3, [pc, #28]	; 219cc <CTimer::TuneMsDelay()+0xa0>
   219ac:	e3a02003 	mov	r2, #3
   219b0:	e59f1018 	ldr	r1, [pc, #24]	; 219d0 <CTimer::TuneMsDelay()+0xa4>
   219b4:	ebffefcb 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   219b8:	e28dd008 	add	sp, sp, #8
   219bc:	e8bd8070 	pop	{r4, r5, r6, pc}
   219c0:	00002710 	.word	0x00002710
   219c4:	51eb851f 	.word	0x51eb851f
   219c8:	10624dd3 	.word	0x10624dd3
   219cc:	00029b14 	.word	0x00029b14
   219d0:	00029a3c 	.word	0x00029a3c

000219d4 <CTimer::Initialize()>:
   219d4:	e92d4070 	push	{r4, r5, r6, lr}
   219d8:	e1a04000 	mov	r4, r0
   219dc:	e5900000 	ldr	r0, [r0]
   219e0:	e3500000 	cmp	r0, #0
   219e4:	0a000011 	beq	21a30 <CTimer::Initialize()+0x5c>
   219e8:	e1a03004 	mov	r3, r4
   219ec:	e59f2054 	ldr	r2, [pc, #84]	; 21a48 <CTimer::Initialize()+0x74>
   219f0:	e3a01003 	mov	r1, #3
   219f4:	ebffeb79 	bl	1c7e0 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   219f8:	e3a05000 	mov	r5, #0
   219fc:	ee075f9a 	mcr	15, 0, r5, cr7, cr10, {4}
   21a00:	e59f2044 	ldr	r2, [pc, #68]	; 21a4c <CTimer::Initialize()+0x78>
   21a04:	e59f3044 	ldr	r3, [pc, #68]	; 21a50 <CTimer::Initialize()+0x7c>
   21a08:	e1a00004 	mov	r0, r4
   21a0c:	e5823004 	str	r3, [r2, #4]
   21a10:	e5923004 	ldr	r3, [r2, #4]
   21a14:	e2833c27 	add	r3, r3, #9984	; 0x2700
   21a18:	e2833010 	add	r3, r3, #16
   21a1c:	e5823018 	str	r3, [r2, #24]
   21a20:	ebffffc1 	bl	2192c <CTimer::TuneMsDelay()>
   21a24:	ee075fba 	mcr	15, 0, r5, cr7, cr10, {5}
   21a28:	e3a00001 	mov	r0, #1
   21a2c:	e8bd8070 	pop	{r4, r5, r6, pc}
   21a30:	e59f001c 	ldr	r0, [pc, #28]	; 21a54 <CTimer::Initialize()+0x80>
   21a34:	e3a02057 	mov	r2, #87	; 0x57
   21a38:	e59f1018 	ldr	r1, [pc, #24]	; 21a58 <CTimer::Initialize()+0x84>
   21a3c:	ebffe40d 	bl	1aa78 <assertion_failed>
   21a40:	e5940000 	ldr	r0, [r4]
   21a44:	eaffffe7 	b	219e8 <CTimer::Initialize()+0x14>
   21a48:	000218ec 	.word	0x000218ec
   21a4c:	20003000 	.word	0x20003000
   21a50:	fe363c80 	.word	0xfe363c80
   21a54:	0002479c 	.word	0x0002479c
   21a58:	00029a44 	.word	0x00029a44

00021a5c <CTimer::RegisterPeriodicHandler(void (*)())>:
   21a5c:	e5903028 	ldr	r3, [r0, #40]	; 0x28
   21a60:	e92d4070 	push	{r4, r5, r6, lr}
   21a64:	e3530000 	cmp	r3, #0
   21a68:	e1a04000 	mov	r4, r0
   21a6c:	e1a05001 	mov	r5, r1
   21a70:	0a000003 	beq	21a84 <CTimer::RegisterPeriodicHandler(void (*)())+0x28>
   21a74:	e3a02c02 	mov	r2, #512	; 0x200
   21a78:	e59f1024 	ldr	r1, [pc, #36]	; 21aa4 <CTimer::RegisterPeriodicHandler(void (*)())+0x48>
   21a7c:	e59f0024 	ldr	r0, [pc, #36]	; 21aa8 <CTimer::RegisterPeriodicHandler(void (*)())+0x4c>
   21a80:	ebffe3fc 	bl	1aa78 <assertion_failed>
   21a84:	e3550000 	cmp	r5, #0
   21a88:	e5845028 	str	r5, [r4, #40]	; 0x28
   21a8c:	18bd8070 	popne	{r4, r5, r6, pc}
   21a90:	e59f2014 	ldr	r2, [pc, #20]	; 21aac <CTimer::RegisterPeriodicHandler(void (*)())+0x50>
   21a94:	e59f1008 	ldr	r1, [pc, #8]	; 21aa4 <CTimer::RegisterPeriodicHandler(void (*)())+0x48>
   21a98:	e59f0010 	ldr	r0, [pc, #16]	; 21ab0 <CTimer::RegisterPeriodicHandler(void (*)())+0x54>
   21a9c:	e8bd4070 	pop	{r4, r5, r6, lr}
   21aa0:	eaffe3f4 	b	1aa78 <assertion_failed>
   21aa4:	00029a44 	.word	0x00029a44
   21aa8:	00029b2c 	.word	0x00029b2c
   21aac:	00000202 	.word	0x00000202
   21ab0:	00029b44 	.word	0x00029b44

00021ab4 <CTimer::SimpleMsDelay(unsigned int)>:
   21ab4:	e3500000 	cmp	r0, #0
   21ab8:	012fff1e 	bxeq	lr
   21abc:	e3a03ffa 	mov	r3, #1000	; 0x3e8
   21ac0:	e0000093 	mul	r0, r3, r0
   21ac4:	e3500000 	cmp	r0, #0
   21ac8:	012fff1e 	bxeq	lr
   21acc:	eafffccf 	b	20e10 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]>

00021ad0 <CTimer::SimpleusDelay(unsigned int)>:
   21ad0:	e3500000 	cmp	r0, #0
   21ad4:	012fff1e 	bxeq	lr
   21ad8:	eafffccc 	b	20e10 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]>

00021adc <CTimer::IsLeapYear(unsigned int)>:
   21adc:	e3a02064 	mov	r2, #100	; 0x64
   21ae0:	e59f303c 	ldr	r3, [pc, #60]	; 21b24 <CTimer::IsLeapYear(unsigned int)+0x48>
   21ae4:	e0831093 	umull	r1, r3, r3, r0
   21ae8:	e1a012a3 	lsr	r1, r3, #5
   21aec:	e0020192 	mul	r2, r2, r1
   21af0:	e1500002 	cmp	r0, r2
   21af4:	0a000003 	beq	21b08 <CTimer::IsLeapYear(unsigned int)+0x2c>
   21af8:	e3100003 	tst	r0, #3
   21afc:	03a00001 	moveq	r0, #1
   21b00:	13a00000 	movne	r0, #0
   21b04:	e12fff1e 	bx	lr
   21b08:	e3a02e19 	mov	r2, #400	; 0x190
   21b0c:	e1a033a3 	lsr	r3, r3, #7
   21b10:	e0030392 	mul	r3, r2, r3
   21b14:	e0400003 	sub	r0, r0, r3
   21b18:	e16f0f10 	clz	r0, r0
   21b1c:	e1a002a0 	lsr	r0, r0, #5
   21b20:	e12fff1e 	bx	lr
   21b24:	51eb851f 	.word	0x51eb851f

00021b28 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)>:
   21b28:	e3500001 	cmp	r0, #1
   21b2c:	0a000002 	beq	21b3c <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x14>
   21b30:	e59f3058 	ldr	r3, [pc, #88]	; 21b90 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x68>
   21b34:	e7930100 	ldr	r0, [r3, r0, lsl #2]
   21b38:	e12fff1e 	bx	lr
   21b3c:	e3a02064 	mov	r2, #100	; 0x64
   21b40:	e59f304c 	ldr	r3, [pc, #76]	; 21b94 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x6c>
   21b44:	e083c193 	umull	ip, r3, r3, r1
   21b48:	e1a0c2a3 	lsr	ip, r3, #5
   21b4c:	e0020c92 	mul	r2, r2, ip
   21b50:	e1510002 	cmp	r1, r2
   21b54:	0a000006 	beq	21b74 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x4c>
   21b58:	e3110003 	tst	r1, #3
   21b5c:	03a01001 	moveq	r1, #1
   21b60:	13a01000 	movne	r1, #0
   21b64:	e3510000 	cmp	r1, #0
   21b68:	0afffff0 	beq	21b30 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x8>
   21b6c:	e3a0001d 	mov	r0, #29
   21b70:	e12fff1e 	bx	lr
   21b74:	e3a02e19 	mov	r2, #400	; 0x190
   21b78:	e1a033a3 	lsr	r3, r3, #7
   21b7c:	e0030392 	mul	r3, r2, r3
   21b80:	e0411003 	sub	r1, r1, r3
   21b84:	e16f1f11 	clz	r1, r1
   21b88:	e1a012a1 	lsr	r1, r1, #5
   21b8c:	eafffff4 	b	21b64 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x3c>
   21b90:	00029a0c 	.word	0x00029a0c
   21b94:	51eb851f 	.word	0x51eb851f

00021b98 <CTimer::Get()>:
   21b98:	e92d4010 	push	{r4, lr}
   21b9c:	e59f4020 	ldr	r4, [pc, #32]	; 21bc4 <CTimer::Get()+0x2c>
   21ba0:	e5940000 	ldr	r0, [r4]
   21ba4:	e3500000 	cmp	r0, #0
   21ba8:	18bd8010 	popne	{r4, pc}
   21bac:	e59f2014 	ldr	r2, [pc, #20]	; 21bc8 <CTimer::Get()+0x30>
   21bb0:	e59f1014 	ldr	r1, [pc, #20]	; 21bcc <CTimer::Get()+0x34>
   21bb4:	e59f0014 	ldr	r0, [pc, #20]	; 21bd0 <CTimer::Get()+0x38>
   21bb8:	ebffe3ae 	bl	1aa78 <assertion_failed>
   21bbc:	e5940000 	ldr	r0, [r4]
   21bc0:	e8bd8010 	pop	{r4, pc}
   21bc4:	0002b970 	.word	0x0002b970
   21bc8:	0000023e 	.word	0x0000023e
   21bcc:	00029a44 	.word	0x00029a44
   21bd0:	0002440c 	.word	0x0002440c

00021bd4 <memset>:
   21bd4:	e3520000 	cmp	r2, #0
   21bd8:	012fff1e 	bxeq	lr
   21bdc:	e1a03000 	mov	r3, r0
   21be0:	e6af1071 	sxtb	r1, r1
   21be4:	e0802002 	add	r2, r0, r2
   21be8:	e4c31001 	strb	r1, [r3], #1
   21bec:	e1530002 	cmp	r3, r2
   21bf0:	1afffffc 	bne	21be8 <memset+0x14>
   21bf4:	e12fff1e 	bx	lr

00021bf8 <memcmp>:
   21bf8:	e3520000 	cmp	r2, #0
   21bfc:	0a00000e 	beq	21c3c <memcmp+0x44>
   21c00:	e5d0c000 	ldrb	ip, [r0]
   21c04:	e5d13000 	ldrb	r3, [r1]
   21c08:	e15c0003 	cmp	ip, r3
   21c0c:	ca00000c 	bgt	21c44 <memcmp+0x4c>
   21c10:	ba00000d 	blt	21c4c <memcmp+0x54>
   21c14:	e0812002 	add	r2, r1, r2
   21c18:	e2811001 	add	r1, r1, #1
   21c1c:	ea000004 	b	21c34 <memcmp+0x3c>
   21c20:	e5f0c001 	ldrb	ip, [r0, #1]!
   21c24:	e4d13001 	ldrb	r3, [r1], #1
   21c28:	e15c0003 	cmp	ip, r3
   21c2c:	ca000004 	bgt	21c44 <memcmp+0x4c>
   21c30:	ba000005 	blt	21c4c <memcmp+0x54>
   21c34:	e1510002 	cmp	r1, r2
   21c38:	1afffff8 	bne	21c20 <memcmp+0x28>
   21c3c:	e3a00000 	mov	r0, #0
   21c40:	e12fff1e 	bx	lr
   21c44:	e3a00001 	mov	r0, #1
   21c48:	e12fff1e 	bx	lr
   21c4c:	e3e00000 	mvn	r0, #0
   21c50:	e12fff1e 	bx	lr

00021c54 <strlen>:
   21c54:	e1d010d0 	ldrsb	r1, [r0]
   21c58:	e2803001 	add	r3, r0, #1
   21c5c:	e3510000 	cmp	r1, #0
   21c60:	0a000003 	beq	21c74 <strlen+0x20>
   21c64:	e0431000 	sub	r1, r3, r0
   21c68:	e0d320d1 	ldrsb	r2, [r3], #1
   21c6c:	e3520000 	cmp	r2, #0
   21c70:	1afffffb 	bne	21c64 <strlen+0x10>
   21c74:	e1a00001 	mov	r0, r1
   21c78:	e12fff1e 	bx	lr

00021c7c <strcmp>:
   21c7c:	e1d030d0 	ldrsb	r3, [r0]
   21c80:	e1d120d0 	ldrsb	r2, [r1]
   21c84:	e3530000 	cmp	r3, #0
   21c88:	1a000007 	bne	21cac <strcmp+0x30>
   21c8c:	ea000008 	b	21cb4 <strcmp+0x38>
   21c90:	e1530002 	cmp	r3, r2
   21c94:	ca00000b 	bgt	21cc8 <strcmp+0x4c>
   21c98:	ba00000c 	blt	21cd0 <strcmp+0x54>
   21c9c:	e1f030d1 	ldrsb	r3, [r0, #1]!
   21ca0:	e3530000 	cmp	r3, #0
   21ca4:	0a00000b 	beq	21cd8 <strcmp+0x5c>
   21ca8:	e1f120d1 	ldrsb	r2, [r1, #1]!
   21cac:	e3520000 	cmp	r2, #0
   21cb0:	1afffff6 	bne	21c90 <strcmp+0x14>
   21cb4:	e1530002 	cmp	r3, r2
   21cb8:	ca000002 	bgt	21cc8 <strcmp+0x4c>
   21cbc:	b3e00000 	mvnlt	r0, #0
   21cc0:	a3a00000 	movge	r0, #0
   21cc4:	e12fff1e 	bx	lr
   21cc8:	e3a00001 	mov	r0, #1
   21ccc:	e12fff1e 	bx	lr
   21cd0:	e3e00000 	mvn	r0, #0
   21cd4:	e12fff1e 	bx	lr
   21cd8:	e1d120d1 	ldrsb	r2, [r1, #1]
   21cdc:	e1530002 	cmp	r3, r2
   21ce0:	dafffff5 	ble	21cbc <strcmp+0x40>
   21ce4:	eafffff7 	b	21cc8 <strcmp+0x4c>

00021ce8 <strcasecmp>:
   21ce8:	e2400001 	sub	r0, r0, #1
   21cec:	e1f030d1 	ldrsb	r3, [r0, #1]!
   21cf0:	e2432061 	sub	r2, r3, #97	; 0x61
   21cf4:	e3520019 	cmp	r2, #25
   21cf8:	92433020 	subls	r3, r3, #32
   21cfc:	e3530000 	cmp	r3, #0
   21d00:	0a00001f 	beq	21d84 <strcasecmp+0x9c>
   21d04:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   21d08:	e0d120d1 	ldrsb	r2, [r1], #1
   21d0c:	e242c061 	sub	ip, r2, #97	; 0x61
   21d10:	e35c0019 	cmp	ip, #25
   21d14:	81a0e002 	movhi	lr, r2
   21d18:	9242e020 	subls	lr, r2, #32
   21d1c:	e35e0000 	cmp	lr, #0
   21d20:	1a000006 	bne	21d40 <strcasecmp+0x58>
   21d24:	e35c0019 	cmp	ip, #25
   21d28:	92422020 	subls	r2, r2, #32
   21d2c:	e1530002 	cmp	r3, r2
   21d30:	ca000011 	bgt	21d7c <strcasecmp+0x94>
   21d34:	b3e00000 	mvnlt	r0, #0
   21d38:	a3a00000 	movge	r0, #0
   21d3c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   21d40:	e153000e 	cmp	r3, lr
   21d44:	ca00000c 	bgt	21d7c <strcasecmp+0x94>
   21d48:	ba000016 	blt	21da8 <strcasecmp+0xc0>
   21d4c:	e1f030d1 	ldrsb	r3, [r0, #1]!
   21d50:	e2432061 	sub	r2, r3, #97	; 0x61
   21d54:	e3520019 	cmp	r2, #25
   21d58:	92433020 	subls	r3, r3, #32
   21d5c:	e3530000 	cmp	r3, #0
   21d60:	1affffe8 	bne	21d08 <strcasecmp+0x20>
   21d64:	e1d120d0 	ldrsb	r2, [r1]
   21d68:	e242c061 	sub	ip, r2, #97	; 0x61
   21d6c:	e35c0019 	cmp	ip, #25
   21d70:	92422020 	subls	r2, r2, #32
   21d74:	e1530002 	cmp	r3, r2
   21d78:	daffffed 	ble	21d34 <strcasecmp+0x4c>
   21d7c:	e3a00001 	mov	r0, #1
   21d80:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   21d84:	e1d120d0 	ldrsb	r2, [r1]
   21d88:	e242c061 	sub	ip, r2, #97	; 0x61
   21d8c:	e35c0019 	cmp	ip, #25
   21d90:	92422020 	subls	r2, r2, #32
   21d94:	e1530002 	cmp	r3, r2
   21d98:	ca000004 	bgt	21db0 <strcasecmp+0xc8>
   21d9c:	b3e00000 	mvnlt	r0, #0
   21da0:	a3a00000 	movge	r0, #0
   21da4:	e12fff1e 	bx	lr
   21da8:	e3e00000 	mvn	r0, #0
   21dac:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   21db0:	e3a00001 	mov	r0, #1
   21db4:	e12fff1e 	bx	lr

00021db8 <strncmp>:
   21db8:	e3520000 	cmp	r2, #0
   21dbc:	0a000016 	beq	21e1c <strncmp+0x64>
   21dc0:	e1d030d0 	ldrsb	r3, [r0]
   21dc4:	e1d1c0d0 	ldrsb	ip, [r1]
   21dc8:	e3530000 	cmp	r3, #0
   21dcc:	0a000015 	beq	21e28 <strncmp+0x70>
   21dd0:	e35c0000 	cmp	ip, #0
   21dd4:	0a000013 	beq	21e28 <strncmp+0x70>
   21dd8:	e15c0003 	cmp	ip, r3
   21ddc:	ba000016 	blt	21e3c <strncmp+0x84>
   21de0:	d0802002 	addle	r2, r0, r2
   21de4:	d2800001 	addle	r0, r0, #1
   21de8:	da000009 	ble	21e14 <strncmp+0x5c>
   21dec:	ea000014 	b	21e44 <strncmp+0x8c>
   21df0:	e0d030d1 	ldrsb	r3, [r0], #1
   21df4:	e3530000 	cmp	r3, #0
   21df8:	0a000009 	beq	21e24 <strncmp+0x6c>
   21dfc:	e1f1c0d1 	ldrsb	ip, [r1, #1]!
   21e00:	e35c0000 	cmp	ip, #0
   21e04:	0a000007 	beq	21e28 <strncmp+0x70>
   21e08:	e153000c 	cmp	r3, ip
   21e0c:	ca00000a 	bgt	21e3c <strncmp+0x84>
   21e10:	ba00000b 	blt	21e44 <strncmp+0x8c>
   21e14:	e1500002 	cmp	r0, r2
   21e18:	1afffff4 	bne	21df0 <strncmp+0x38>
   21e1c:	e3a00000 	mov	r0, #0
   21e20:	e12fff1e 	bx	lr
   21e24:	e1d1c0d1 	ldrsb	ip, [r1, #1]
   21e28:	e153000c 	cmp	r3, ip
   21e2c:	ca000002 	bgt	21e3c <strncmp+0x84>
   21e30:	b3e00000 	mvnlt	r0, #0
   21e34:	a3a00000 	movge	r0, #0
   21e38:	e12fff1e 	bx	lr
   21e3c:	e3a00001 	mov	r0, #1
   21e40:	e12fff1e 	bx	lr
   21e44:	e3e00000 	mvn	r0, #0
   21e48:	e12fff1e 	bx	lr

00021e4c <strcpy>:
   21e4c:	e1d130d0 	ldrsb	r3, [r1]
   21e50:	e1a02000 	mov	r2, r0
   21e54:	e3530000 	cmp	r3, #0
   21e58:	0a000003 	beq	21e6c <strcpy+0x20>
   21e5c:	e4c23001 	strb	r3, [r2], #1
   21e60:	e1f130d1 	ldrsb	r3, [r1, #1]!
   21e64:	e3530000 	cmp	r3, #0
   21e68:	1afffffb 	bne	21e5c <strcpy+0x10>
   21e6c:	e3a03000 	mov	r3, #0
   21e70:	e5c23000 	strb	r3, [r2]
   21e74:	e12fff1e 	bx	lr

00021e78 <strncpy>:
   21e78:	e3520000 	cmp	r2, #0
   21e7c:	012fff1e 	bxeq	lr
   21e80:	e1d1c0d0 	ldrsb	ip, [r1]
   21e84:	e35c0000 	cmp	ip, #0
   21e88:	0a000009 	beq	21eb4 <strncpy+0x3c>
   21e8c:	e0802002 	add	r2, r0, r2
   21e90:	e1a03000 	mov	r3, r0
   21e94:	ea000002 	b	21ea4 <strncpy+0x2c>
   21e98:	e1f1c0d1 	ldrsb	ip, [r1, #1]!
   21e9c:	e35c0000 	cmp	ip, #0
   21ea0:	0a000004 	beq	21eb8 <strncpy+0x40>
   21ea4:	e4c3c001 	strb	ip, [r3], #1
   21ea8:	e1530002 	cmp	r3, r2
   21eac:	1afffff9 	bne	21e98 <strncpy+0x20>
   21eb0:	e12fff1e 	bx	lr
   21eb4:	e1a03000 	mov	r3, r0
   21eb8:	e3a02000 	mov	r2, #0
   21ebc:	e5c32000 	strb	r2, [r3]
   21ec0:	e12fff1e 	bx	lr

00021ec4 <strcat>:
   21ec4:	e1d030d0 	ldrsb	r3, [r0]
   21ec8:	e3530000 	cmp	r3, #0
   21ecc:	e1a03000 	mov	r3, r0
   21ed0:	0a000002 	beq	21ee0 <strcat+0x1c>
   21ed4:	e1f320d1 	ldrsb	r2, [r3, #1]!
   21ed8:	e3520000 	cmp	r2, #0
   21edc:	1afffffc 	bne	21ed4 <strcat+0x10>
   21ee0:	e1d120d0 	ldrsb	r2, [r1]
   21ee4:	e3520000 	cmp	r2, #0
   21ee8:	0a000003 	beq	21efc <strcat+0x38>
   21eec:	e4c32001 	strb	r2, [r3], #1
   21ef0:	e1f120d1 	ldrsb	r2, [r1, #1]!
   21ef4:	e3520000 	cmp	r2, #0
   21ef8:	1afffffb 	bne	21eec <strcat+0x28>
   21efc:	e3a02000 	mov	r2, #0
   21f00:	e5c32000 	strb	r2, [r3]
   21f04:	e12fff1e 	bx	lr

00021f08 <strchr>:
   21f08:	e1d020d0 	ldrsb	r2, [r0]
   21f0c:	e3520000 	cmp	r2, #0
   21f10:	0a000009 	beq	21f3c <strchr+0x34>
   21f14:	e1510002 	cmp	r1, r2
   21f18:	1a000002 	bne	21f28 <strchr+0x20>
   21f1c:	ea000008 	b	21f44 <strchr+0x3c>
   21f20:	e1530001 	cmp	r3, r1
   21f24:	012fff1e 	bxeq	lr
   21f28:	e1f030d1 	ldrsb	r3, [r0, #1]!
   21f2c:	e3530000 	cmp	r3, #0
   21f30:	1afffffa 	bne	21f20 <strchr+0x18>
   21f34:	e1a00003 	mov	r0, r3
   21f38:	e12fff1e 	bx	lr
   21f3c:	e1a00002 	mov	r0, r2
   21f40:	e12fff1e 	bx	lr
   21f44:	e12fff1e 	bx	lr

00021f48 <strtok_r>:
   21f48:	e3500000 	cmp	r0, #0
   21f4c:	0a00002c 	beq	22004 <strtok_r+0xbc>
   21f50:	e92d4030 	push	{r4, r5, lr}
   21f54:	e1d0e0d0 	ldrsb	lr, [r0]
   21f58:	e35e0000 	cmp	lr, #0
   21f5c:	11d140d0 	ldrsbne	r4, [r1]
   21f60:	0a000024 	beq	21ff8 <strtok_r+0xb0>
   21f64:	e3540000 	cmp	r4, #0
   21f68:	0a000008 	beq	21f90 <strtok_r+0x48>
   21f6c:	e15e0004 	cmp	lr, r4
   21f70:	0a000019 	beq	21fdc <strtok_r+0x94>
   21f74:	e1a0c001 	mov	ip, r1
   21f78:	ea000001 	b	21f84 <strtok_r+0x3c>
   21f7c:	e15e0003 	cmp	lr, r3
   21f80:	0a000015 	beq	21fdc <strtok_r+0x94>
   21f84:	e1fc30d1 	ldrsb	r3, [ip, #1]!
   21f88:	e3530000 	cmp	r3, #0
   21f8c:	1afffffa 	bne	21f7c <strtok_r+0x34>
   21f90:	e35e0000 	cmp	lr, #0
   21f94:	0a000017 	beq	21ff8 <strtok_r+0xb0>
   21f98:	e1a05000 	mov	r5, r0
   21f9c:	e3540000 	cmp	r4, #0
   21fa0:	0a000008 	beq	21fc8 <strtok_r+0x80>
   21fa4:	e15e0004 	cmp	lr, r4
   21fa8:	0a00000d 	beq	21fe4 <strtok_r+0x9c>
   21fac:	e1a0c001 	mov	ip, r1
   21fb0:	ea000001 	b	21fbc <strtok_r+0x74>
   21fb4:	e15e0003 	cmp	lr, r3
   21fb8:	0a000009 	beq	21fe4 <strtok_r+0x9c>
   21fbc:	e1fc30d1 	ldrsb	r3, [ip, #1]!
   21fc0:	e3530000 	cmp	r3, #0
   21fc4:	1afffffa 	bne	21fb4 <strtok_r+0x6c>
   21fc8:	e1f5e0d1 	ldrsb	lr, [r5, #1]!
   21fcc:	e35e0000 	cmp	lr, #0
   21fd0:	1afffff1 	bne	21f9c <strtok_r+0x54>
   21fd4:	e5825000 	str	r5, [r2]
   21fd8:	e8bd8030 	pop	{r4, r5, pc}
   21fdc:	e1f0e0d1 	ldrsb	lr, [r0, #1]!
   21fe0:	eaffffdf 	b	21f64 <strtok_r+0x1c>
   21fe4:	e3a03000 	mov	r3, #0
   21fe8:	e2855001 	add	r5, r5, #1
   21fec:	e5453001 	strb	r3, [r5, #-1]
   21ff0:	e5825000 	str	r5, [r2]
   21ff4:	e8bd8030 	pop	{r4, r5, pc}
   21ff8:	e3a00000 	mov	r0, #0
   21ffc:	e5820000 	str	r0, [r2]
   22000:	e8bd8030 	pop	{r4, r5, pc}
   22004:	e5920000 	ldr	r0, [r2]
   22008:	e3500000 	cmp	r0, #0
   2200c:	1affffcf 	bne	21f50 <strtok_r+0x8>
   22010:	e12fff1e 	bx	lr

00022014 <strtoul>:
   22014:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   22018:	e3510000 	cmp	r1, #0
   2201c:	e2425002 	sub	r5, r2, #2
   22020:	15810000 	strne	r0, [r1]
   22024:	e3520000 	cmp	r2, #0
   22028:	13550022 	cmpne	r5, #34	; 0x22
   2202c:	e3c2e010 	bic	lr, r2, #16
   22030:	83a05001 	movhi	r5, #1
   22034:	93a05000 	movls	r5, #0
   22038:	8a000037 	bhi	2211c <strtoul+0x108>
   2203c:	e1d0c0d0 	ldrsb	ip, [r0]
   22040:	e1a04000 	mov	r4, r0
   22044:	e24c3009 	sub	r3, ip, #9
   22048:	e35c0020 	cmp	ip, #32
   2204c:	e2800001 	add	r0, r0, #1
   22050:	e6ef3073 	uxtb	r3, r3
   22054:	0afffff8 	beq	2203c <strtoul+0x28>
   22058:	e3530004 	cmp	r3, #4
   2205c:	9afffff6 	bls	2203c <strtoul+0x28>
   22060:	e35c002b 	cmp	ip, #43	; 0x2b
   22064:	0a00002e 	beq	22124 <strtoul+0x110>
   22068:	e35c002d 	cmp	ip, #45	; 0x2d
   2206c:	01d4c0d1 	ldrsbeq	ip, [r4, #1]
   22070:	03a07001 	moveq	r7, #1
   22074:	01a04000 	moveq	r4, r0
   22078:	13a07000 	movne	r7, #0
   2207c:	e35c0030 	cmp	ip, #48	; 0x30
   22080:	0a00002c 	beq	22138 <strtoul+0x124>
   22084:	e3520000 	cmp	r2, #0
   22088:	03a0200a 	moveq	r2, #10
   2208c:	e35c002f 	cmp	ip, #47	; 0x2f
   22090:	e1a0300c 	mov	r3, ip
   22094:	da00001d 	ble	22110 <strtoul+0xfc>
   22098:	e3a0e000 	mov	lr, #0
   2209c:	e3a05001 	mov	r5, #1
   220a0:	e1a0600e 	mov	r6, lr
   220a4:	ea000008 	b	220cc <strtoul+0xb8>
   220a8:	e020329e 	mla	r0, lr, r2, r3
   220ac:	e150000e 	cmp	r0, lr
   220b0:	3a000029 	bcc	2215c <strtoul+0x148>
   220b4:	e1f430d1 	ldrsb	r3, [r4, #1]!
   220b8:	e1a05006 	mov	r5, r6
   220bc:	e353002f 	cmp	r3, #47	; 0x2f
   220c0:	e1a0c003 	mov	ip, r3
   220c4:	da000029 	ble	22170 <strtoul+0x15c>
   220c8:	e1a0e000 	mov	lr, r0
   220cc:	e24cc061 	sub	ip, ip, #97	; 0x61
   220d0:	e35c0019 	cmp	ip, #25
   220d4:	92433020 	subls	r3, r3, #32
   220d8:	e3530040 	cmp	r3, #64	; 0x40
   220dc:	c2433007 	subgt	r3, r3, #7
   220e0:	e2433030 	sub	r3, r3, #48	; 0x30
   220e4:	e1520003 	cmp	r2, r3
   220e8:	caffffee 	bgt	220a8 <strtoul+0x94>
   220ec:	e1a0000e 	mov	r0, lr
   220f0:	e2255001 	eor	r5, r5, #1
   220f4:	e3510000 	cmp	r1, #0
   220f8:	e0055007 	and	r5, r5, r7
   220fc:	0a000000 	beq	22104 <strtoul+0xf0>
   22100:	e5814000 	str	r4, [r1]
   22104:	e3550000 	cmp	r5, #0
   22108:	12600000 	rsbne	r0, r0, #0
   2210c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   22110:	e3510000 	cmp	r1, #0
   22114:	13a00000 	movne	r0, #0
   22118:	1afffff8 	bne	22100 <strtoul+0xec>
   2211c:	e3a00000 	mov	r0, #0
   22120:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   22124:	e1d4c0d1 	ldrsb	ip, [r4, #1]
   22128:	e3a07000 	mov	r7, #0
   2212c:	e35c0030 	cmp	ip, #48	; 0x30
   22130:	e1a04000 	mov	r4, r0
   22134:	1affffd2 	bne	22084 <strtoul+0x70>
   22138:	e1d4c0d1 	ldrsb	ip, [r4, #1]
   2213c:	e2840001 	add	r0, r4, #1
   22140:	e3cc3020 	bic	r3, ip, #32
   22144:	e3530058 	cmp	r3, #88	; 0x58
   22148:	0a00000a 	beq	22178 <strtoul+0x164>
   2214c:	e3520000 	cmp	r2, #0
   22150:	e1a04000 	mov	r4, r0
   22154:	03a02008 	moveq	r2, #8
   22158:	eaffffcb 	b	2208c <strtoul+0x78>
   2215c:	e3510000 	cmp	r1, #0
   22160:	0a00000a 	beq	22190 <strtoul+0x17c>
   22164:	e5814000 	str	r4, [r1]
   22168:	e3e00000 	mvn	r0, #0
   2216c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   22170:	e3a05001 	mov	r5, #1
   22174:	eaffffde 	b	220f4 <strtoul+0xe0>
   22178:	e35e0000 	cmp	lr, #0
   2217c:	1affffe6 	bne	2211c <strtoul+0x108>
   22180:	e1d4c0d2 	ldrsb	ip, [r4, #2]
   22184:	e3a02010 	mov	r2, #16
   22188:	e2844002 	add	r4, r4, #2
   2218c:	eaffffbe 	b	2208c <strtoul+0x78>
   22190:	e3e00000 	mvn	r0, #0
   22194:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00022198 <char2int>:
   22198:	e12fff1e 	bx	lr

0002219c <memcpy>:
   2219c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
   221a0:	e352007f 	cmp	r2, #127	; 0x7f
   221a4:	9a00000b 	bls	221d8 <memcpy+0x3c>
   221a8:	e3110003 	tst	r1, #3
   221ac:	1a000009 	bne	221d8 <memcpy+0x3c>
   221b0:	e3100003 	tst	r0, #3
   221b4:	1a000007 	bne	221d8 <memcpy+0x3c>
   221b8:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
   221bc:	e8b107f8 	ldm	r1!, {r3, r4, r5, r6, r7, r8, r9, sl}
   221c0:	e2422020 	sub	r2, r2, #32
   221c4:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
   221c8:	f5d1f040 	pld	[r1, #64]	; 0x40
   221cc:	e352001f 	cmp	r2, #31
   221d0:	8afffff9 	bhi	221bc <memcpy+0x20>
   221d4:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
   221d8:	e3520000 	cmp	r2, #0
   221dc:	0a000003 	beq	221f0 <memcpy+0x54>
   221e0:	e4d13001 	ldrb	r3, [r1], #1
   221e4:	e2522001 	subs	r2, r2, #1
   221e8:	e4c03001 	strb	r3, [r0], #1
   221ec:	1afffffb 	bne	221e0 <memcpy+0x44>
   221f0:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
   221f4:	e12fff1e 	bx	lr

000221f8 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
   221f8:	e12fff1e 	bx	lr

000221fc <CVirtualGPIOPin::~CVirtualGPIOPin()>:
   221fc:	e92d4010 	push	{r4, lr}
   22200:	e1a04000 	mov	r4, r0
   22204:	e3a01010 	mov	r1, #16
   22208:	eb0002e3 	bl	22d9c <operator delete(void*, unsigned int)>
   2220c:	e1a00004 	mov	r0, r4
   22210:	e8bd8010 	pop	{r4, pc}

00022214 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]>:
   22214:	e92d4070 	push	{r4, r5, r6, lr}
   22218:	e59f5094 	ldr	r5, [pc, #148]	; 222b4 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0xa0>
   2221c:	e1a04000 	mov	r4, r0
   22220:	e5950000 	ldr	r0, [r5]
   22224:	e1a06001 	mov	r6, r1
   22228:	e3500000 	cmp	r0, #0
   2222c:	1a00001a 	bne	2229c <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x88>
   22230:	e1d400bc 	ldrh	r0, [r4, #12]
   22234:	e1d430be 	ldrh	r3, [r4, #14]
   22238:	e5846008 	str	r6, [r4, #8]
   2223c:	e0402003 	sub	r2, r0, r3
   22240:	e6bf2072 	sxth	r2, r2
   22244:	e3520000 	cmp	r2, #0
   22248:	da00000c 	ble	22280 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x6c>
   2224c:	e3560000 	cmp	r6, #0
   22250:	1a00000c 	bne	22288 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x74>
   22254:	e2833001 	add	r3, r3, #1
   22258:	e6ff3073 	uxth	r3, r3
   2225c:	e1c430be 	strh	r3, [r4, #14]
   22260:	e5941004 	ldr	r1, [r4, #4]
   22264:	e5952004 	ldr	r2, [r5, #4]
   22268:	e1833800 	orr	r3, r3, r0, lsl #16
   2226c:	e7823101 	str	r3, [r2, r1, lsl #2]
   22270:	e5953000 	ldr	r3, [r5]
   22274:	e3530000 	cmp	r3, #0
   22278:	1a000005 	bne	22294 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x80>
   2227c:	e8bd8070 	pop	{r4, r5, r6, pc}
   22280:	e3560000 	cmp	r6, #0
   22284:	1a000006 	bne	222a4 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x90>
   22288:	e5953000 	ldr	r3, [r5]
   2228c:	e3530000 	cmp	r3, #0
   22290:	08bd8070 	popeq	{r4, r5, r6, pc}
   22294:	e8bd4070 	pop	{r4, r5, r6, lr}
   22298:	ea00028e 	b	22cd8 <LeaveCritical>
   2229c:	eb000260 	bl	22c24 <EnterCritical>
   222a0:	eaffffe2 	b	22230 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x1c>
   222a4:	e2800001 	add	r0, r0, #1
   222a8:	e6ff0070 	uxth	r0, r0
   222ac:	e1c400bc 	strh	r0, [r4, #12]
   222b0:	eaffffea 	b	22260 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x4c>
   222b4:	0002b974 	.word	0x0002b974

000222b8 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)>:
   222b8:	e3a03000 	mov	r3, #0
   222bc:	e92d4030 	push	{r4, r5, lr}
   222c0:	e59f2124 	ldr	r2, [pc, #292]	; 223ec <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x134>
   222c4:	e3510001 	cmp	r1, #1
   222c8:	e24dd024 	sub	sp, sp, #36	; 0x24
   222cc:	e1a04000 	mov	r4, r0
   222d0:	e5801004 	str	r1, [r0, #4]
   222d4:	e5802000 	str	r2, [r0]
   222d8:	e1c030bc 	strh	r3, [r0, #12]
   222dc:	e1c030be 	strh	r3, [r0, #14]
   222e0:	9a000002 	bls	222f0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x38>
   222e4:	e1a00004 	mov	r0, r4
   222e8:	e28dd024 	add	sp, sp, #36	; 0x24
   222ec:	e8bd8030 	pop	{r4, r5, pc}
   222f0:	e59f50f8 	ldr	r5, [pc, #248]	; 223f0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x138>
   222f4:	e5950000 	ldr	r0, [r5]
   222f8:	e1500003 	cmp	r0, r3
   222fc:	1a00002c 	bne	223b4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0xfc>
   22300:	e5953004 	ldr	r3, [r5, #4]
   22304:	e3530000 	cmp	r3, #0
   22308:	0a000011 	beq	22354 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x9c>
   2230c:	e3a01000 	mov	r1, #0
   22310:	e5942004 	ldr	r2, [r4, #4]
   22314:	e7831102 	str	r1, [r3, r2, lsl #2]
   22318:	e5953000 	ldr	r3, [r5]
   2231c:	e3530000 	cmp	r3, #0
   22320:	1a000009 	bne	2234c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x94>
   22324:	e5943004 	ldr	r3, [r4, #4]
   22328:	e3530001 	cmp	r3, #1
   2232c:	8affffec 	bhi	222e4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x2c>
   22330:	e5953004 	ldr	r3, [r5, #4]
   22334:	e3530000 	cmp	r3, #0
   22338:	0affffe9 	beq	222e4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x2c>
   2233c:	e3a01000 	mov	r1, #0
   22340:	e1a00004 	mov	r0, r4
   22344:	ebffffb2 	bl	22214 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]>
   22348:	eaffffe5 	b	222e4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x2c>
   2234c:	eb000261 	bl	22cd8 <LeaveCritical>
   22350:	eafffff3 	b	22324 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x6c>
   22354:	e3a00001 	mov	r0, #1
   22358:	eb0001fa 	bl	22b48 <CMemorySystem::GetCoherentPage(unsigned int)>
   2235c:	e5850004 	str	r0, [r5, #4]
   22360:	e28d000c 	add	r0, sp, #12
   22364:	ebffe1e7 	bl	1ab08 <CBcmPropertyTags::CBcmPropertyTags()>
   22368:	e3a03004 	mov	r3, #4
   2236c:	e595c004 	ldr	ip, [r5, #4]
   22370:	e58d3000 	str	r3, [sp]
   22374:	e3ccc103 	bic	ip, ip, #-1073741824	; 0xc0000000
   22378:	e38cc101 	orr	ip, ip, #1073741824	; 0x40000000
   2237c:	e28d000c 	add	r0, sp, #12
   22380:	e28d2010 	add	r2, sp, #16
   22384:	e3a03010 	mov	r3, #16
   22388:	e59f1064 	ldr	r1, [pc, #100]	; 223f4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x13c>
   2238c:	e58dc01c 	str	ip, [sp, #28]
   22390:	ebffe233 	bl	1ac64 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   22394:	e3500000 	cmp	r0, #0
   22398:	0a000007 	beq	223bc <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x104>
   2239c:	e28d000c 	add	r0, sp, #12
   223a0:	ebffe1de 	bl	1ab20 <CBcmPropertyTags::~CBcmPropertyTags()>
   223a4:	e5953004 	ldr	r3, [r5, #4]
   223a8:	e3530000 	cmp	r3, #0
   223ac:	0affffd9 	beq	22318 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x60>
   223b0:	eaffffd5 	b	2230c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x54>
   223b4:	eb00021a 	bl	22c24 <EnterCritical>
   223b8:	eaffffd0 	b	22300 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x48>
   223bc:	e3a03010 	mov	r3, #16
   223c0:	e58d0000 	str	r0, [sp]
   223c4:	e28d2010 	add	r2, sp, #16
   223c8:	e59f1028 	ldr	r1, [pc, #40]	; 223f8 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x140>
   223cc:	e28d000c 	add	r0, sp, #12
   223d0:	ebffe223 	bl	1ac64 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   223d4:	e3500000 	cmp	r0, #0
   223d8:	159d301c 	ldrne	r3, [sp, #28]
   223dc:	05850004 	streq	r0, [r5, #4]
   223e0:	13c33103 	bicne	r3, r3, #-1073741824	; 0xc0000000
   223e4:	15853004 	strne	r3, [r5, #4]
   223e8:	eaffffeb 	b	2239c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0xe4>
   223ec:	00029b94 	.word	0x00029b94
   223f0:	0002b974 	.word	0x0002b974
   223f4:	00048020 	.word	0x00048020
   223f8:	00040010 	.word	0x00040010

000223fc <CVirtualGPIOPin::Write(unsigned int)>:
   223fc:	e5902004 	ldr	r2, [r0, #4]
   22400:	e1a03001 	mov	r3, r1
   22404:	e3520001 	cmp	r2, #1
   22408:	812fff1e 	bxhi	lr
   2240c:	e3510001 	cmp	r1, #1
   22410:	93a03000 	movls	r3, #0
   22414:	83a03001 	movhi	r3, #1
   22418:	e59f2014 	ldr	r2, [pc, #20]	; 22434 <CVirtualGPIOPin::Write(unsigned int)+0x38>
   2241c:	e5922004 	ldr	r2, [r2, #4]
   22420:	e3520000 	cmp	r2, #0
   22424:	03833001 	orreq	r3, r3, #1
   22428:	e3530000 	cmp	r3, #0
   2242c:	112fff1e 	bxne	lr
   22430:	eaffff77 	b	22214 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]>
   22434:	0002b974 	.word	0x0002b974

00022438 <CVirtualGPIOPin::Invert()>:
   22438:	e5901008 	ldr	r1, [r0, #8]
   2243c:	e2211001 	eor	r1, r1, #1
   22440:	eaffffed 	b	223fc <CVirtualGPIOPin::Write(unsigned int)>

00022444 <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE>:
   22444:	e3a02000 	mov	r2, #0
   22448:	e59f3004 	ldr	r3, [pc, #4]	; 22454 <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE+0x10>
   2244c:	e5832000 	str	r2, [r3]
   22450:	e12fff1e 	bx	lr
   22454:	0002b974 	.word	0x0002b974

00022458 <CExceptionHandler::CExceptionHandler()>:
   22458:	e92d4070 	push	{r4, r5, r6, lr}
   2245c:	e59f506c 	ldr	r5, [pc, #108]	; 224d0 <CExceptionHandler::CExceptionHandler()+0x78>
   22460:	e1a04000 	mov	r4, r0
   22464:	e5953000 	ldr	r3, [r5]
   22468:	e3530000 	cmp	r3, #0
   2246c:	0a000003 	beq	22480 <CExceptionHandler::CExceptionHandler()+0x28>
   22470:	e3a02030 	mov	r2, #48	; 0x30
   22474:	e59f1058 	ldr	r1, [pc, #88]	; 224d4 <CExceptionHandler::CExceptionHandler()+0x7c>
   22478:	e59f0058 	ldr	r0, [pc, #88]	; 224d8 <CExceptionHandler::CExceptionHandler()+0x80>
   2247c:	ebffe17d 	bl	1aa78 <assertion_failed>
   22480:	e3a00000 	mov	r0, #0
   22484:	e59f1050 	ldr	r1, [pc, #80]	; 224dc <CExceptionHandler::CExceptionHandler()+0x84>
   22488:	e59f2050 	ldr	r2, [pc, #80]	; 224e0 <CExceptionHandler::CExceptionHandler()+0x88>
   2248c:	e59f3050 	ldr	r3, [pc, #80]	; 224e4 <CExceptionHandler::CExceptionHandler()+0x8c>
   22490:	e1a01141 	asr	r1, r1, #2
   22494:	e1a02142 	asr	r2, r2, #2
   22498:	e1a03143 	asr	r3, r3, #2
   2249c:	e2411002 	sub	r1, r1, #2
   224a0:	e2422002 	sub	r2, r2, #2
   224a4:	e2433002 	sub	r3, r3, #2
   224a8:	e38114ea 	orr	r1, r1, #-369098752	; 0xea000000
   224ac:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
   224b0:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
   224b4:	e5854000 	str	r4, [r5]
   224b8:	e5801004 	str	r1, [r0, #4]
   224bc:	e580200c 	str	r2, [r0, #12]
   224c0:	e5803010 	str	r3, [r0, #16]
   224c4:	eb000228 	bl	22d6c <SyncDataAndInstructionCache>
   224c8:	e1a00004 	mov	r0, r4
   224cc:	e8bd8070 	pop	{r4, r5, r6, pc}
   224d0:	0002b97c 	.word	0x0002b97c
   224d4:	00029ba4 	.word	0x00029ba4
   224d8:	00029a50 	.word	0x00029a50
   224dc:	000227f8 	.word	0x000227f8
   224e0:	00022758 	.word	0x00022758
   224e4:	000227a0 	.word	0x000227a0

000224e8 <CExceptionHandler::~CExceptionHandler()>:
   224e8:	e3a02000 	mov	r2, #0
   224ec:	e59f3004 	ldr	r3, [pc, #4]	; 224f8 <CExceptionHandler::~CExceptionHandler()+0x10>
   224f0:	e5832000 	str	r2, [r3]
   224f4:	e12fff1e 	bx	lr
   224f8:	0002b97c 	.word	0x0002b97c

000224fc <CExceptionHandler::Throw(unsigned int)>:
   224fc:	e92d4010 	push	{r4, lr}
   22500:	e1a04001 	mov	r4, r1
   22504:	e24dd008 	sub	sp, sp, #8
   22508:	ebffeb4d 	bl	1d244 <CLogger::Get()>
   2250c:	e59f201c 	ldr	r2, [pc, #28]	; 22530 <CExceptionHandler::Throw(unsigned int)+0x34>
   22510:	e59f301c 	ldr	r3, [pc, #28]	; 22534 <CExceptionHandler::Throw(unsigned int)+0x38>
   22514:	e7921104 	ldr	r1, [r2, r4, lsl #2]
   22518:	e3a02000 	mov	r2, #0
   2251c:	e58d1000 	str	r1, [sp]
   22520:	e59f1010 	ldr	r1, [pc, #16]	; 22538 <CExceptionHandler::Throw(unsigned int)+0x3c>
   22524:	ebffecef 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   22528:	e28dd008 	add	sp, sp, #8
   2252c:	e8bd8010 	pop	{r4, pc}
   22530:	0002b824 	.word	0x0002b824
   22534:	00029bbc 	.word	0x00029bbc
   22538:	00029b9c 	.word	0x00029b9c

0002253c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>:
   2253c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   22540:	e3510002 	cmp	r1, #2
   22544:	e24dd024 	sub	sp, sp, #36	; 0x24
   22548:	e1a05001 	mov	r5, r1
   2254c:	e1a04002 	mov	r4, r2
   22550:	0a000028 	beq	225f8 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xbc>
   22554:	e3510003 	cmp	r1, #3
   22558:	0a000020 	beq	225e0 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xa4>
   2255c:	e3a08000 	mov	r8, #0
   22560:	e1a09008 	mov	r9, r8
   22564:	e3540000 	cmp	r4, #0
   22568:	0a000025 	beq	22604 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xc8>
   2256c:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   22570:	e5947048 	ldr	r7, [r4, #72]	; 0x48
   22574:	e203301f 	and	r3, r3, #31
   22578:	e3530011 	cmp	r3, #17
   2257c:	e5946044 	ldr	r6, [r4, #68]	; 0x44
   22580:	0a000019 	beq	225ec <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xb0>
   22584:	e3530012 	cmp	r3, #18
   22588:	089400c0 	ldmeq	r4, {r6, r7}
   2258c:	e59f1084 	ldr	r1, [pc, #132]	; 22618 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xdc>
   22590:	e1a00006 	mov	r0, r6
   22594:	ebffe30a 	bl	1b1c4 <debug_stacktrace(unsigned int const*, char const*)>
   22598:	ebffeb29 	bl	1d244 <CLogger::Get()>
   2259c:	e59f3078 	ldr	r3, [pc, #120]	; 2261c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe0>
   225a0:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
   225a4:	e7931105 	ldr	r1, [r3, r5, lsl #2]
   225a8:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   225ac:	e58d1000 	str	r1, [sp]
   225b0:	e58d2018 	str	r2, [sp, #24]
   225b4:	e58d3004 	str	r3, [sp, #4]
   225b8:	e58d7014 	str	r7, [sp, #20]
   225bc:	e58d6010 	str	r6, [sp, #16]
   225c0:	e58d800c 	str	r8, [sp, #12]
   225c4:	e58d9008 	str	r9, [sp, #8]
   225c8:	e59f3050 	ldr	r3, [pc, #80]	; 22620 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe4>
   225cc:	e3a02000 	mov	r2, #0
   225d0:	e59f1040 	ldr	r1, [pc, #64]	; 22618 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xdc>
   225d4:	ebffecc3 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   225d8:	e28dd024 	add	sp, sp, #36	; 0x24
   225dc:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   225e0:	ee159f10 	mrc	15, 0, r9, cr5, cr0, {0}
   225e4:	ee168f10 	mrc	15, 0, r8, cr6, cr0, {0}
   225e8:	eaffffdd 	b	22564 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x28>
   225ec:	e594700c 	ldr	r7, [r4, #12]
   225f0:	e5946008 	ldr	r6, [r4, #8]
   225f4:	eaffffe4 	b	2258c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x50>
   225f8:	ee159f30 	mrc	15, 0, r9, cr5, cr0, {1}
   225fc:	ee168f50 	mrc	15, 0, r8, cr6, cr0, {2}
   22600:	eaffffd7 	b	22564 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x28>
   22604:	e3a02069 	mov	r2, #105	; 0x69
   22608:	e59f1014 	ldr	r1, [pc, #20]	; 22624 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe8>
   2260c:	e59f0014 	ldr	r0, [pc, #20]	; 22628 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xec>
   22610:	ebffe118 	bl	1aa78 <assertion_failed>
   22614:	eaffffd4 	b	2256c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x30>
   22618:	00029b9c 	.word	0x00029b9c
   2261c:	0002b824 	.word	0x0002b824
   22620:	00029bd8 	.word	0x00029bd8
   22624:	00029ba4 	.word	0x00029ba4
   22628:	00029bcc 	.word	0x00029bcc

0002262c <CExceptionHandler::Get()>:
   2262c:	e92d4010 	push	{r4, lr}
   22630:	e59f4020 	ldr	r4, [pc, #32]	; 22658 <CExceptionHandler::Get()+0x2c>
   22634:	e5940000 	ldr	r0, [r4]
   22638:	e3500000 	cmp	r0, #0
   2263c:	18bd8010 	popne	{r4, pc}
   22640:	e3a02087 	mov	r2, #135	; 0x87
   22644:	e59f1010 	ldr	r1, [pc, #16]	; 2265c <CExceptionHandler::Get()+0x30>
   22648:	e59f0010 	ldr	r0, [pc, #16]	; 22660 <CExceptionHandler::Get()+0x34>
   2264c:	ebffe109 	bl	1aa78 <assertion_failed>
   22650:	e5940000 	ldr	r0, [r4]
   22654:	e8bd8010 	pop	{r4, pc}
   22658:	0002b97c 	.word	0x0002b97c
   2265c:	00029ba4 	.word	0x00029ba4
   22660:	0002440c 	.word	0x0002440c

00022664 <ExceptionHandler>:
   22664:	e92d4070 	push	{r4, r5, r6, lr}
   22668:	e3a03000 	mov	r3, #0
   2266c:	e1a05000 	mov	r5, r0
   22670:	e1a06001 	mov	r6, r1
   22674:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   22678:	ebffe8fa 	bl	1ca68 <CInterruptSystem::DisableFIQ()>
   2267c:	f1080040 	cpsie	f
   22680:	e59f403c 	ldr	r4, [pc, #60]	; 226c4 <ExceptionHandler+0x60>
   22684:	e5940000 	ldr	r0, [r4]
   22688:	e3500000 	cmp	r0, #0
   2268c:	0a000003 	beq	226a0 <ExceptionHandler+0x3c>
   22690:	e1a02006 	mov	r2, r6
   22694:	e1a01005 	mov	r1, r5
   22698:	e8bd4070 	pop	{r4, r5, r6, lr}
   2269c:	eaffffa6 	b	2253c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>
   226a0:	e3a02087 	mov	r2, #135	; 0x87
   226a4:	e59f101c 	ldr	r1, [pc, #28]	; 226c8 <ExceptionHandler+0x64>
   226a8:	e59f001c 	ldr	r0, [pc, #28]	; 226cc <ExceptionHandler+0x68>
   226ac:	ebffe0f1 	bl	1aa78 <assertion_failed>
   226b0:	e5940000 	ldr	r0, [r4]
   226b4:	e1a02006 	mov	r2, r6
   226b8:	e1a01005 	mov	r1, r5
   226bc:	e8bd4070 	pop	{r4, r5, r6, lr}
   226c0:	eaffff9d 	b	2253c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>
   226c4:	0002b97c 	.word	0x0002b97c
   226c8:	00029ba4 	.word	0x00029ba4
   226cc:	0002440c 	.word	0x0002440c

000226d0 <raise>:
   226d0:	e92d4010 	push	{r4, lr}
   226d4:	e59f4030 	ldr	r4, [pc, #48]	; 2270c <raise+0x3c>
   226d8:	e5940000 	ldr	r0, [r4]
   226dc:	e3500000 	cmp	r0, #0
   226e0:	0a000003 	beq	226f4 <raise+0x24>
   226e4:	e3a01004 	mov	r1, #4
   226e8:	ebffff83 	bl	224fc <CExceptionHandler::Throw(unsigned int)>
   226ec:	e3a00000 	mov	r0, #0
   226f0:	e8bd8010 	pop	{r4, pc}
   226f4:	e59f0014 	ldr	r0, [pc, #20]	; 22710 <raise+0x40>
   226f8:	e3a02087 	mov	r2, #135	; 0x87
   226fc:	e59f1010 	ldr	r1, [pc, #16]	; 22714 <raise+0x44>
   22700:	ebffe0dc 	bl	1aa78 <assertion_failed>
   22704:	e5940000 	ldr	r0, [r4]
   22708:	eafffff5 	b	226e4 <raise+0x14>
   2270c:	0002b97c 	.word	0x0002b97c
   22710:	0002440c 	.word	0x0002440c
   22714:	00029ba4 	.word	0x00029ba4

00022718 <UndefinedInstructionInternal>:
   22718:	e24ee004 	sub	lr, lr, #4
   2271c:	e92d4000 	stmfd	sp!, {lr}
   22720:	e14fe000 	mrs	lr, SPSR
   22724:	e92d4000 	stmfd	sp!, {lr}
   22728:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   2272c:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   22730:	e1a0100d 	mov	r1, sp
   22734:	f1020012 	cps	#18
   22738:	e1a0200d 	mov	r2, sp
   2273c:	e1a0300e 	mov	r3, lr
   22740:	f1020011 	cps	#17
   22744:	e1a0400d 	mov	r4, sp
   22748:	e1a0500e 	mov	r5, lr
   2274c:	f102001f 	cps	#31
   22750:	e1a0d001 	mov	sp, r1
   22754:	e92d003c 	push	{r2, r3, r4, r5}
   22758:	e1a0100d 	mov	r1, sp
   2275c:	e3a00001 	mov	r0, #1
   22760:	eaffffbf 	b	22664 <ExceptionHandler>

00022764 <PrefetchAbortStub>:
   22764:	e24ee004 	sub	lr, lr, #4
   22768:	e92d4000 	stmfd	sp!, {lr}
   2276c:	e14fe000 	mrs	lr, SPSR
   22770:	e92d4000 	stmfd	sp!, {lr}
   22774:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   22778:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   2277c:	e1a0100d 	mov	r1, sp
   22780:	f1020012 	cps	#18
   22784:	e1a0200d 	mov	r2, sp
   22788:	e1a0300e 	mov	r3, lr
   2278c:	f1020011 	cps	#17
   22790:	e1a0400d 	mov	r4, sp
   22794:	e1a0500e 	mov	r5, lr
   22798:	f102001f 	cps	#31
   2279c:	e1a0d001 	mov	sp, r1
   227a0:	e92d003c 	push	{r2, r3, r4, r5}
   227a4:	e1a0100d 	mov	r1, sp
   227a8:	e3a00002 	mov	r0, #2
   227ac:	eaffffac 	b	22664 <ExceptionHandler>

000227b0 <DataAbortStub>:
   227b0:	e24ee008 	sub	lr, lr, #8
   227b4:	e92d4000 	stmfd	sp!, {lr}
   227b8:	e14fe000 	mrs	lr, SPSR
   227bc:	e92d4000 	stmfd	sp!, {lr}
   227c0:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   227c4:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   227c8:	e1a0100d 	mov	r1, sp
   227cc:	f1020012 	cps	#18
   227d0:	e1a0200d 	mov	r2, sp
   227d4:	e1a0300e 	mov	r3, lr
   227d8:	f1020011 	cps	#17
   227dc:	e1a0400d 	mov	r4, sp
   227e0:	e1a0500e 	mov	r5, lr
   227e4:	f102001f 	cps	#31
   227e8:	e1a0d001 	mov	sp, r1
   227ec:	e92d003c 	push	{r2, r3, r4, r5}
   227f0:	e1a0100d 	mov	r1, sp
   227f4:	e3a00003 	mov	r0, #3
   227f8:	eaffff99 	b	22664 <ExceptionHandler>

000227fc <UndefinedInstructionStub>:
   227fc:	e92d4001 	push	{r0, lr}
   22800:	eef80a10 	vmrs	r0, fpexc
   22804:	e3100102 	tst	r0, #-2147483648	; 0x80000000
   22808:	0affffc2 	beq	22718 <UndefinedInstructionInternal>
   2280c:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
   22810:	eee80a10 	vmsr	fpexc, r0
   22814:	e8fd8001 	ldm	sp!, {r0, pc}^

00022818 <IRQStub>:
   22818:	e24ee004 	sub	lr, lr, #4
   2281c:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
   22820:	ebffe8f1 	bl	1cbec <InterruptHandler>
   22824:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^

00022828 <FIQStub>:
   22828:	e24ee004 	sub	lr, lr, #4
   2282c:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
   22830:	e3a03000 	mov	r3, #0
   22834:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   22838:	e59f2040 	ldr	r2, [pc, #64]	; 22880 <FIQStub+0x58>
   2283c:	e5921000 	ldr	r1, [r2]
   22840:	e3510000 	cmp	r1, #0
   22844:	0a000004 	beq	2285c <FIQStub+0x34>
   22848:	e5920004 	ldr	r0, [r2, #4]
   2284c:	e12fff31 	blx	r1
   22850:	e3a03000 	mov	r3, #0
   22854:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   22858:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^
   2285c:	e3a03000 	mov	r3, #0
   22860:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   22864:	e59f1018 	ldr	r1, [pc, #24]	; 22884 <FIQStub+0x5c>
   22868:	e3a00000 	mov	r0, #0
   2286c:	e5810000 	str	r0, [r1]
   22870:	e3a03000 	mov	r3, #0
   22874:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   22878:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2287c:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^
   22880:	0002b838 	.word	0x0002b838
   22884:	2000b20c 	.word	0x2000b20c

00022888 <CMemorySystem::~CMemorySystem()>:
   22888:	e59f3068 	ldr	r3, [pc, #104]	; 228f8 <CMemorySystem::~CMemorySystem()+0x70>
   2288c:	e92d4070 	push	{r4, r5, r6, lr}
   22890:	e5932000 	ldr	r2, [r3]
   22894:	e1a04000 	mov	r4, r0
   22898:	e1520000 	cmp	r2, r0
   2289c:	0a000001 	beq	228a8 <CMemorySystem::~CMemorySystem()+0x20>
   228a0:	e1a00004 	mov	r0, r4
   228a4:	e8bd8070 	pop	{r4, r5, r6, pc}
   228a8:	e3a02000 	mov	r2, #0
   228ac:	e5d01000 	ldrb	r1, [r0]
   228b0:	e5832000 	str	r2, [r3]
   228b4:	e1510002 	cmp	r1, r2
   228b8:	0a000004 	beq	228d0 <CMemorySystem::~CMemorySystem()+0x48>
   228bc:	ee111f10 	mrc	15, 0, r1, cr1, cr0, {0}
   228c0:	e59f3034 	ldr	r3, [pc, #52]	; 228fc <CMemorySystem::~CMemorySystem()+0x74>
   228c4:	e0033001 	and	r3, r3, r1
   228c8:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
   228cc:	ee082f17 	mcr	15, 0, r2, cr8, cr7, {0}
   228d0:	e5945008 	ldr	r5, [r4, #8]
   228d4:	e3550000 	cmp	r5, #0
   228d8:	0afffff0 	beq	228a0 <CMemorySystem::~CMemorySystem()+0x18>
   228dc:	e1a00005 	mov	r0, r5
   228e0:	eb0000c5 	bl	22bfc <CPageTable::~CPageTable()>
   228e4:	e1a00005 	mov	r0, r5
   228e8:	e3a01004 	mov	r1, #4
   228ec:	eb00012a 	bl	22d9c <operator delete(void*, unsigned int)>
   228f0:	e1a00004 	mov	r0, r4
   228f4:	e8bd8070 	pop	{r4, r5, r6, pc}
   228f8:	0002b980 	.word	0x0002b980
   228fc:	ff7fe7fa 	.word	0xff7fe7fa

00022900 <CMemorySystem::GetMemSize() const>:
   22900:	e92d4010 	push	{r4, lr}
   22904:	e59f402c 	ldr	r4, [pc, #44]	; 22938 <CMemorySystem::GetMemSize() const+0x38>
   22908:	e5943000 	ldr	r3, [r4]
   2290c:	e3530000 	cmp	r3, #0
   22910:	0a000001 	beq	2291c <CMemorySystem::GetMemSize() const+0x1c>
   22914:	e5930004 	ldr	r0, [r3, #4]
   22918:	e8bd8010 	pop	{r4, pc}
   2291c:	e3a02082 	mov	r2, #130	; 0x82
   22920:	e59f1014 	ldr	r1, [pc, #20]	; 2293c <CMemorySystem::GetMemSize() const+0x3c>
   22924:	e59f0014 	ldr	r0, [pc, #20]	; 22940 <CMemorySystem::GetMemSize() const+0x40>
   22928:	ebffe052 	bl	1aa78 <assertion_failed>
   2292c:	e5943000 	ldr	r3, [r4]
   22930:	e5930004 	ldr	r0, [r3, #4]
   22934:	e8bd8010 	pop	{r4, pc}
   22938:	0002b980 	.word	0x0002b980
   2293c:	00029c60 	.word	0x00029c60
   22940:	0002440c 	.word	0x0002440c

00022944 <CMemorySystem::Get()>:
   22944:	e92d4010 	push	{r4, lr}
   22948:	e59f4020 	ldr	r4, [pc, #32]	; 22970 <CMemorySystem::Get()+0x2c>
   2294c:	e5940000 	ldr	r0, [r4]
   22950:	e3500000 	cmp	r0, #0
   22954:	18bd8010 	popne	{r4, pc}
   22958:	e3a02088 	mov	r2, #136	; 0x88
   2295c:	e59f1010 	ldr	r1, [pc, #16]	; 22974 <CMemorySystem::Get()+0x30>
   22960:	e59f0010 	ldr	r0, [pc, #16]	; 22978 <CMemorySystem::Get()+0x34>
   22964:	ebffe043 	bl	1aa78 <assertion_failed>
   22968:	e5940000 	ldr	r0, [r4]
   2296c:	e8bd8010 	pop	{r4, pc}
   22970:	0002b980 	.word	0x0002b980
   22974:	00029c60 	.word	0x00029c60
   22978:	0002440c 	.word	0x0002440c

0002297c <CMemorySystem::EnableMMU()>:
   2297c:	e5d03000 	ldrb	r3, [r0]
   22980:	e92d4010 	push	{r4, lr}
   22984:	e3530000 	cmp	r3, #0
   22988:	e1a04000 	mov	r4, r0
   2298c:	0a00001c 	beq	22a04 <CMemorySystem::EnableMMU()+0x88>
   22990:	ee113f30 	mrc	15, 0, r3, cr1, cr0, {1}
   22994:	e3833040 	orr	r3, r3, #64	; 0x40
   22998:	ee013f30 	mcr	15, 0, r3, cr1, cr0, {1}
   2299c:	ee103f70 	mrc	15, 0, r3, cr0, cr0, {3}
   229a0:	e3130001 	tst	r3, #1
   229a4:	1a00001b 	bne	22a18 <CMemorySystem::EnableMMU()+0x9c>
   229a8:	e3a03000 	mov	r3, #0
   229ac:	ee023f50 	mcr	15, 0, r3, cr2, cr0, {2}
   229b0:	e5940008 	ldr	r0, [r4, #8]
   229b4:	e1500003 	cmp	r0, r3
   229b8:	0a00001b 	beq	22a2c <CMemorySystem::EnableMMU()+0xb0>
   229bc:	eb00008f 	bl	22c00 <CPageTable::GetBaseAddress() const>
   229c0:	ee020f10 	mcr	15, 0, r0, cr2, cr0, {0}
   229c4:	e3a03001 	mov	r3, #1
   229c8:	ee033f10 	mcr	15, 0, r3, cr3, cr0, {0}
   229cc:	e3a03000 	mov	r3, #0
   229d0:	ee073f16 	mcr	15, 0, r3, cr7, cr6, {0}
   229d4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   229d8:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   229dc:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   229e0:	ee083f17 	mcr	15, 0, r3, cr8, cr7, {0}
   229e4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   229e8:	ee073f95 	mcr	15, 0, r3, cr7, cr5, {4}
   229ec:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
   229f0:	e59f204c 	ldr	r2, [pc, #76]	; 22a44 <CMemorySystem::EnableMMU()+0xc8>
   229f4:	e3c33002 	bic	r3, r3, #2
   229f8:	e1832002 	orr	r2, r3, r2
   229fc:	ee012f10 	mcr	15, 0, r2, cr1, cr0, {0}
   22a00:	e8bd8010 	pop	{r4, pc}
   22a04:	e3a0208e 	mov	r2, #142	; 0x8e
   22a08:	e59f1038 	ldr	r1, [pc, #56]	; 22a48 <CMemorySystem::EnableMMU()+0xcc>
   22a0c:	e59f0038 	ldr	r0, [pc, #56]	; 22a4c <CMemorySystem::EnableMMU()+0xd0>
   22a10:	ebffe018 	bl	1aa78 <assertion_failed>
   22a14:	eaffffdd 	b	22990 <CMemorySystem::EnableMMU()+0x14>
   22a18:	e3a0209b 	mov	r2, #155	; 0x9b
   22a1c:	e59f1024 	ldr	r1, [pc, #36]	; 22a48 <CMemorySystem::EnableMMU()+0xcc>
   22a20:	e59f0028 	ldr	r0, [pc, #40]	; 22a50 <CMemorySystem::EnableMMU()+0xd4>
   22a24:	ebffe013 	bl	1aa78 <assertion_failed>
   22a28:	eaffffde 	b	229a8 <CMemorySystem::EnableMMU()+0x2c>
   22a2c:	e59f0020 	ldr	r0, [pc, #32]	; 22a54 <CMemorySystem::EnableMMU()+0xd8>
   22a30:	e3a020a1 	mov	r2, #161	; 0xa1
   22a34:	e59f100c 	ldr	r1, [pc, #12]	; 22a48 <CMemorySystem::EnableMMU()+0xcc>
   22a38:	ebffe00e 	bl	1aa78 <assertion_failed>
   22a3c:	e5940008 	ldr	r0, [r4, #8]
   22a40:	eaffffdd 	b	229bc <CMemorySystem::EnableMMU()+0x40>
   22a44:	00c01805 	.word	0x00c01805
   22a48:	00029c60 	.word	0x00029c60
   22a4c:	00029c6c 	.word	0x00029c6c
   22a50:	00029c7c 	.word	0x00029c7c
   22a54:	00029ca8 	.word	0x00029ca8

00022a58 <CMemorySystem::CMemorySystem(bool)>:
   22a58:	e3a03000 	mov	r3, #0
   22a5c:	e92d4030 	push	{r4, r5, lr}
   22a60:	e59f20d0 	ldr	r2, [pc, #208]	; 22b38 <CMemorySystem::CMemorySystem(bool)+0xe0>
   22a64:	e24dd024 	sub	sp, sp, #36	; 0x24
   22a68:	e5925000 	ldr	r5, [r2]
   22a6c:	e1a04000 	mov	r4, r0
   22a70:	e1550003 	cmp	r5, r3
   22a74:	e5c01000 	strb	r1, [r0]
   22a78:	e5803004 	str	r3, [r0, #4]
   22a7c:	e5803008 	str	r3, [r0, #8]
   22a80:	0a000002 	beq	22a90 <CMemorySystem::CMemorySystem(bool)+0x38>
   22a84:	e1a00004 	mov	r0, r4
   22a88:	e28dd024 	add	sp, sp, #36	; 0x24
   22a8c:	e8bd8030 	pop	{r4, r5, pc}
   22a90:	e28d0008 	add	r0, sp, #8
   22a94:	e5824000 	str	r4, [r2]
   22a98:	ebffe01a 	bl	1ab08 <CBcmPropertyTags::CBcmPropertyTags()>
   22a9c:	e58d5000 	str	r5, [sp]
   22aa0:	e28d0008 	add	r0, sp, #8
   22aa4:	e3a03014 	mov	r3, #20
   22aa8:	e28d200c 	add	r2, sp, #12
   22aac:	e59f1088 	ldr	r1, [pc, #136]	; 22b3c <CMemorySystem::CMemorySystem(bool)+0xe4>
   22ab0:	ebffe06b 	bl	1ac64 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   22ab4:	e3500000 	cmp	r0, #0
   22ab8:	0a000018 	beq	22b20 <CMemorySystem::CMemorySystem(bool)+0xc8>
   22abc:	e59d0018 	ldr	r0, [sp, #24]
   22ac0:	e3500000 	cmp	r0, #0
   22ac4:	0a000019 	beq	22b30 <CMemorySystem::CMemorySystem(bool)+0xd8>
   22ac8:	e59f1070 	ldr	r1, [pc, #112]	; 22b40 <CMemorySystem::CMemorySystem(bool)+0xe8>
   22acc:	e59f0070 	ldr	r0, [pc, #112]	; 22b44 <CMemorySystem::CMemorySystem(bool)+0xec>
   22ad0:	e3a02047 	mov	r2, #71	; 0x47
   22ad4:	ebffdfe7 	bl	1aa78 <assertion_failed>
   22ad8:	e59d101c 	ldr	r1, [sp, #28]
   22adc:	e59d0018 	ldr	r0, [sp, #24]
   22ae0:	e5841004 	str	r1, [r4, #4]
   22ae4:	eb0000b4 	bl	22dbc <mem_init>
   22ae8:	e5d43000 	ldrb	r3, [r4]
   22aec:	e3530000 	cmp	r3, #0
   22af0:	0a000007 	beq	22b14 <CMemorySystem::CMemorySystem(bool)+0xbc>
   22af4:	e3a00004 	mov	r0, #4
   22af8:	eb0000a3 	bl	22d8c <operator new(unsigned int)>
   22afc:	e1a05000 	mov	r5, r0
   22b00:	e5941004 	ldr	r1, [r4, #4]
   22b04:	eb000012 	bl	22b54 <CPageTable::CPageTable(unsigned int)>
   22b08:	e5845008 	str	r5, [r4, #8]
   22b0c:	e1a00004 	mov	r0, r4
   22b10:	ebffff99 	bl	2297c <CMemorySystem::EnableMMU()>
   22b14:	e28d0008 	add	r0, sp, #8
   22b18:	ebffe000 	bl	1ab20 <CBcmPropertyTags::~CBcmPropertyTags()>
   22b1c:	eaffffd8 	b	22a84 <CMemorySystem::CMemorySystem(bool)+0x2c>
   22b20:	e3a01303 	mov	r1, #201326592	; 0xc000000
   22b24:	e58d0018 	str	r0, [sp, #24]
   22b28:	e58d101c 	str	r1, [sp, #28]
   22b2c:	eaffffeb 	b	22ae0 <CMemorySystem::CMemorySystem(bool)+0x88>
   22b30:	e59d101c 	ldr	r1, [sp, #28]
   22b34:	eaffffe9 	b	22ae0 <CMemorySystem::CMemorySystem(bool)+0x88>
   22b38:	0002b980 	.word	0x0002b980
   22b3c:	00010005 	.word	0x00010005
   22b40:	00029c60 	.word	0x00029c60
   22b44:	00029cbc 	.word	0x00029cbc

00022b48 <CMemorySystem::GetCoherentPage(unsigned int)>:
   22b48:	e1a00600 	lsl	r0, r0, #12
   22b4c:	e2800501 	add	r0, r0, #4194304	; 0x400000
   22b50:	e12fff1e 	bx	lr

00022b54 <CPageTable::CPageTable(unsigned int)>:
   22b54:	e3a02709 	mov	r2, #2359296	; 0x240000
   22b58:	e3a03000 	mov	r3, #0
   22b5c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   22b60:	e59fc074 	ldr	ip, [pc, #116]	; 22bdc <CPageTable::CPageTable(unsigned int)+0x88>
   22b64:	e59f4074 	ldr	r4, [pc, #116]	; 22be0 <CPageTable::CPageTable(unsigned int)+0x8c>
   22b68:	e59f5074 	ldr	r5, [pc, #116]	; 22be4 <CPageTable::CPageTable(unsigned int)+0x90>
   22b6c:	e59f9074 	ldr	r9, [pc, #116]	; 22be8 <CPageTable::CPageTable(unsigned int)+0x94>
   22b70:	e59f8074 	ldr	r8, [pc, #116]	; 22bec <CPageTable::CPageTable(unsigned int)+0x98>
   22b74:	e59f7074 	ldr	r7, [pc, #116]	; 22bf0 <CPageTable::CPageTable(unsigned int)+0x9c>
   22b78:	e59f6074 	ldr	r6, [pc, #116]	; 22bf4 <CPageTable::CPageTable(unsigned int)+0xa0>
   22b7c:	e59fe074 	ldr	lr, [pc, #116]	; 22bf8 <CPageTable::CPageTable(unsigned int)+0xa4>
   22b80:	e5802000 	str	r2, [r0]
   22b84:	e1530004 	cmp	r3, r4
   22b88:	31a02005 	movcc	r2, r5
   22b8c:	3a000007 	bcc	22bb0 <CPageTable::CPageTable(unsigned int)+0x5c>
   22b90:	e3530501 	cmp	r3, #4194304	; 0x400000
   22b94:	0a00000e 	beq	22bd4 <CPageTable::CPageTable(unsigned int)+0x80>
   22b98:	e1510003 	cmp	r1, r3
   22b9c:	81a02008 	movhi	r2, r8
   22ba0:	8a000002 	bhi	22bb0 <CPageTable::CPageTable(unsigned int)+0x5c>
   22ba4:	e1530007 	cmp	r3, r7
   22ba8:	91a02006 	movls	r2, r6
   22bac:	83a02000 	movhi	r2, #0
   22bb0:	e1822003 	orr	r2, r2, r3
   22bb4:	e5ac2004 	str	r2, [ip, #4]!
   22bb8:	e15c000e 	cmp	ip, lr
   22bbc:	e2833601 	add	r3, r3, #1048576	; 0x100000
   22bc0:	1affffef 	bne	22b84 <CPageTable::CPageTable(unsigned int)+0x30>
   22bc4:	e3a03000 	mov	r3, #0
   22bc8:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
   22bcc:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   22bd0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   22bd4:	e1a02009 	mov	r2, r9
   22bd8:	eafffff4 	b	22bb0 <CPageTable::CPageTable(unsigned int)+0x5c>
   22bdc:	0023fffc 	.word	0x0023fffc
   22be0:	000243f4 	.word	0x000243f4
   22be4:	0000040e 	.word	0x0000040e
   22be8:	00010412 	.word	0x00010412
   22bec:	0000041e 	.word	0x0000041e
   22bf0:	20fffffe 	.word	0x20fffffe
   22bf4:	00010416 	.word	0x00010416
   22bf8:	00243ffc 	.word	0x00243ffc

00022bfc <CPageTable::~CPageTable()>:
   22bfc:	e12fff1e 	bx	lr

00022c00 <CPageTable::GetBaseAddress() const>:
   22c00:	e5900000 	ldr	r0, [r0]
   22c04:	e3800001 	orr	r0, r0, #1
   22c08:	e12fff1e 	bx	lr

00022c0c <CurrentExecutionLevel>:
   22c0c:	e10f0000 	mrs	r0, CPSR
   22c10:	e3100040 	tst	r0, #64	; 0x40
   22c14:	01a003a0 	lsreq	r0, r0, #7
   22c18:	02000001 	andeq	r0, r0, #1
   22c1c:	13a00002 	movne	r0, #2
   22c20:	e12fff1e 	bx	lr

00022c24 <EnterCritical>:
   22c24:	e2403001 	sub	r3, r0, #1
   22c28:	e3530001 	cmp	r3, #1
   22c2c:	e92d4070 	push	{r4, r5, r6, lr}
   22c30:	e1a05000 	mov	r5, r0
   22c34:	9a000003 	bls	22c48 <EnterCritical+0x24>
   22c38:	e3a02064 	mov	r2, #100	; 0x64
   22c3c:	e59f1080 	ldr	r1, [pc, #128]	; 22cc4 <EnterCritical+0xa0>
   22c40:	e59f0080 	ldr	r0, [pc, #128]	; 22cc8 <EnterCritical+0xa4>
   22c44:	ebffdf8b 	bl	1aa78 <assertion_failed>
   22c48:	e10f6000 	mrs	r6, CPSR
   22c4c:	e3550002 	cmp	r5, #2
   22c50:	0a000001 	beq	22c5c <EnterCritical+0x38>
   22c54:	e3160040 	tst	r6, #64	; 0x40
   22c58:	1a000014 	bne	22cb0 <EnterCritical+0x8c>
   22c5c:	f10c00c0 	cpsid	if
   22c60:	e59f4064 	ldr	r4, [pc, #100]	; 22ccc <EnterCritical+0xa8>
   22c64:	e5943000 	ldr	r3, [r4]
   22c68:	e3530013 	cmp	r3, #19
   22c6c:	8a00000a 	bhi	22c9c <EnterCritical+0x78>
   22c70:	e5943000 	ldr	r3, [r4]
   22c74:	e3550001 	cmp	r5, #1
   22c78:	e2832001 	add	r2, r3, #1
   22c7c:	e0843103 	add	r3, r4, r3, lsl #2
   22c80:	e5842000 	str	r2, [r4]
   22c84:	e5836004 	str	r6, [r3, #4]
   22c88:	1a000000 	bne	22c90 <EnterCritical+0x6c>
   22c8c:	f1080040 	cpsie	f
   22c90:	e3a03000 	mov	r3, #0
   22c94:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   22c98:	e8bd8070 	pop	{r4, r5, r6, pc}
   22c9c:	e3a0206e 	mov	r2, #110	; 0x6e
   22ca0:	e59f101c 	ldr	r1, [pc, #28]	; 22cc4 <EnterCritical+0xa0>
   22ca4:	e59f0024 	ldr	r0, [pc, #36]	; 22cd0 <EnterCritical+0xac>
   22ca8:	ebffdf72 	bl	1aa78 <assertion_failed>
   22cac:	eaffffef 	b	22c70 <EnterCritical+0x4c>
   22cb0:	e3a0206a 	mov	r2, #106	; 0x6a
   22cb4:	e59f1008 	ldr	r1, [pc, #8]	; 22cc4 <EnterCritical+0xa0>
   22cb8:	e59f0014 	ldr	r0, [pc, #20]	; 22cd4 <EnterCritical+0xb0>
   22cbc:	ebffdf6d 	bl	1aa78 <assertion_failed>
   22cc0:	eaffffe5 	b	22c5c <EnterCritical+0x38>
   22cc4:	00029cd8 	.word	0x00029cd8
   22cc8:	00029ce8 	.word	0x00029ce8
   22ccc:	0002b984 	.word	0x0002b984
   22cd0:	00029d50 	.word	0x00029d50
   22cd4:	00029d20 	.word	0x00029d20

00022cd8 <LeaveCritical>:
   22cd8:	e92d4010 	push	{r4, lr}
   22cdc:	e3a03000 	mov	r3, #0
   22ce0:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   22ce4:	f10c0040 	cpsid	f
   22ce8:	e59f4034 	ldr	r4, [pc, #52]	; 22d24 <LeaveCritical+0x4c>
   22cec:	e5943000 	ldr	r3, [r4]
   22cf0:	e3530000 	cmp	r3, #0
   22cf4:	1a000003 	bne	22d08 <LeaveCritical+0x30>
   22cf8:	e3a0207f 	mov	r2, #127	; 0x7f
   22cfc:	e59f1024 	ldr	r1, [pc, #36]	; 22d28 <LeaveCritical+0x50>
   22d00:	e59f0024 	ldr	r0, [pc, #36]	; 22d2c <LeaveCritical+0x54>
   22d04:	ebffdf5b 	bl	1aa78 <assertion_failed>
   22d08:	e5943000 	ldr	r3, [r4]
   22d0c:	e2433001 	sub	r3, r3, #1
   22d10:	e5843000 	str	r3, [r4]
   22d14:	e0844103 	add	r4, r4, r3, lsl #2
   22d18:	e5943004 	ldr	r3, [r4, #4]
   22d1c:	e121f003 	msr	CPSR_c, r3
   22d20:	e8bd8010 	pop	{r4, pc}
   22d24:	0002b984 	.word	0x0002b984
   22d28:	00029cd8 	.word	0x00029cd8
   22d2c:	00029d78 	.word	0x00029d78

00022d30 <CleanAndInvalidateDataCacheRange>:
   22d30:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
   22d34:	e2813020 	add	r3, r1, #32
   22d38:	e353001f 	cmp	r3, #31
   22d3c:	82800020 	addhi	r0, r0, #32
   22d40:	83c1101f 	bichi	r1, r1, #31
   22d44:	80801001 	addhi	r1, r0, r1
   22d48:	8a000001 	bhi	22d54 <CleanAndInvalidateDataCacheRange+0x24>
   22d4c:	ea000003 	b	22d60 <CleanAndInvalidateDataCacheRange+0x30>
   22d50:	e2800020 	add	r0, r0, #32
   22d54:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
   22d58:	e1510000 	cmp	r1, r0
   22d5c:	1afffffb 	bne	22d50 <CleanAndInvalidateDataCacheRange+0x20>
   22d60:	e3a03000 	mov	r3, #0
   22d64:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   22d68:	e12fff1e 	bx	lr

00022d6c <SyncDataAndInstructionCache>:
   22d6c:	e3a03000 	mov	r3, #0
   22d70:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
   22d74:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   22d78:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   22d7c:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   22d80:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   22d84:	ee073f95 	mcr	15, 0, r3, cr7, cr5, {4}
   22d88:	e12fff1e 	bx	lr

00022d8c <operator new(unsigned int)>:
   22d8c:	ea000023 	b	22e20 <malloc>

00022d90 <operator new[](unsigned int)>:
   22d90:	ea000022 	b	22e20 <malloc>

00022d94 <operator delete(void*)>:
   22d94:	ea00009f 	b	23018 <free>

00022d98 <operator delete[](void*)>:
   22d98:	ea00009e 	b	23018 <free>

00022d9c <operator delete(void*, unsigned int)>:
   22d9c:	ea00009d 	b	23018 <free>

00022da0 <operator delete[](void*, unsigned int)>:
   22da0:	ea00009c 	b	23018 <free>

00022da4 <__cxa_pure_virtual>:
   22da4:	e3a02018 	mov	r2, #24
   22da8:	e59f1004 	ldr	r1, [pc, #4]	; 22db4 <__cxa_pure_virtual+0x10>
   22dac:	e59f0004 	ldr	r0, [pc, #4]	; 22db8 <__cxa_pure_virtual+0x14>
   22db0:	eaffdf30 	b	1aa78 <assertion_failed>
   22db4:	00029d90 	.word	0x00029d90
   22db8:	00025034 	.word	0x00025034

00022dbc <mem_init>:
   22dbc:	e3500605 	cmp	r0, #5242880	; 0x500000
   22dc0:	21a0c000 	movcs	ip, r0
   22dc4:	33a0c605 	movcc	ip, #5242880	; 0x500000
   22dc8:	e0801001 	add	r1, r0, r1
   22dcc:	e24139ff 	sub	r3, r1, #4177920	; 0x3fc000
   22dd0:	e2433a03 	sub	r3, r3, #12288	; 0x3000
   22dd4:	e59f2018 	ldr	r2, [pc, #24]	; 22df4 <mem_init+0x38>
   22dd8:	e3c33eff 	bic	r3, r3, #4080	; 0xff0
   22ddc:	e2410501 	sub	r0, r1, #4194304	; 0x400000
   22de0:	e3c3300f 	bic	r3, r3, #15
   22de4:	e582c000 	str	ip, [r2]
   22de8:	e582100c 	str	r1, [r2, #12]
   22dec:	e9820009 	stmib	r2, {r0, r3}
   22df0:	e12fff1e 	bx	lr
   22df4:	0002b9d8 	.word	0x0002b9d8

00022df8 <mem_get_size>:
   22df8:	e59f301c 	ldr	r3, [pc, #28]	; 22e1c <mem_get_size+0x24>
   22dfc:	e5930004 	ldr	r0, [r3, #4]
   22e00:	e5931000 	ldr	r1, [r3]
   22e04:	e593200c 	ldr	r2, [r3, #12]
   22e08:	e5933008 	ldr	r3, [r3, #8]
   22e0c:	e0400001 	sub	r0, r0, r1
   22e10:	e0423003 	sub	r3, r2, r3
   22e14:	e0800003 	add	r0, r0, r3
   22e18:	e12fff1e 	bx	lr
   22e1c:	0002b9d8 	.word	0x0002b9d8

00022e20 <malloc>:
   22e20:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   22e24:	e59f71c8 	ldr	r7, [pc, #456]	; 22ff4 <malloc+0x1d4>
   22e28:	e1a05000 	mov	r5, r0
   22e2c:	e5973000 	ldr	r3, [r7]
   22e30:	e3530000 	cmp	r3, #0
   22e34:	0a000069 	beq	22fe0 <malloc+0x1c0>
   22e38:	e5970010 	ldr	r0, [r7, #16]
   22e3c:	e3500000 	cmp	r0, #0
   22e40:	1a000057 	bne	22fa4 <malloc+0x184>
   22e44:	e59f21ac 	ldr	r2, [pc, #428]	; 22ff8 <malloc+0x1d8>
   22e48:	e5923000 	ldr	r3, [r2]
   22e4c:	e3530000 	cmp	r3, #0
   22e50:	0a000008 	beq	22e78 <malloc+0x58>
   22e54:	e1550003 	cmp	r5, r3
   22e58:	e1a04002 	mov	r4, r2
   22e5c:	8a000002 	bhi	22e6c <malloc+0x4c>
   22e60:	ea000024 	b	22ef8 <malloc+0xd8>
   22e64:	e1530005 	cmp	r3, r5
   22e68:	2a000022 	bcs	22ef8 <malloc+0xd8>
   22e6c:	e5b43008 	ldr	r3, [r4, #8]!
   22e70:	e3530000 	cmp	r3, #0
   22e74:	1afffffa 	bne	22e64 <malloc+0x44>
   22e78:	e5976000 	ldr	r6, [r7]
   22e7c:	e285301f 	add	r3, r5, #31
   22e80:	e3c3300f 	bic	r3, r3, #15
   22e84:	e0863003 	add	r3, r6, r3
   22e88:	e1560003 	cmp	r6, r3
   22e8c:	2a000046 	bcs	22fac <malloc+0x18c>
   22e90:	e5971004 	ldr	r1, [r7, #4]
   22e94:	e5920040 	ldr	r0, [r2, #64]	; 0x40
   22e98:	e0411000 	sub	r1, r1, r0
   22e9c:	e1530001 	cmp	r3, r1
   22ea0:	8a000041 	bhi	22fac <malloc+0x18c>
   22ea4:	e3a0e043 	mov	lr, #67	; 0x43
   22ea8:	e3a0c04d 	mov	ip, #77	; 0x4d
   22eac:	e3a0004c 	mov	r0, #76	; 0x4c
   22eb0:	e3a01042 	mov	r1, #66	; 0x42
   22eb4:	e5873000 	str	r3, [r7]
   22eb8:	e1a03825 	lsr	r3, r5, #16
   22ebc:	e5c63006 	strb	r3, [r6, #6]
   22ec0:	e5973010 	ldr	r3, [r7, #16]
   22ec4:	e1a02425 	lsr	r2, r5, #8
   22ec8:	e5c65004 	strb	r5, [r6, #4]
   22ecc:	e3530000 	cmp	r3, #0
   22ed0:	e1a05c25 	lsr	r5, r5, #24
   22ed4:	e5c6e000 	strb	lr, [r6]
   22ed8:	e5c6c001 	strb	ip, [r6, #1]
   22edc:	e5c60002 	strb	r0, [r6, #2]
   22ee0:	e5c61003 	strb	r1, [r6, #3]
   22ee4:	e5c62005 	strb	r2, [r6, #5]
   22ee8:	e5c65007 	strb	r5, [r6, #7]
   22eec:	0a00001e 	beq	22f6c <malloc+0x14c>
   22ef0:	ebffff78 	bl	22cd8 <LeaveCritical>
   22ef4:	ea00001c 	b	22f6c <malloc+0x14c>
   22ef8:	e5946004 	ldr	r6, [r4, #4]
   22efc:	e3560000 	cmp	r6, #0
   22f00:	01a05003 	moveq	r5, r3
   22f04:	0affffdb 	beq	22e78 <malloc+0x58>
   22f08:	e5d61001 	ldrb	r1, [r6, #1]
   22f0c:	e5d63000 	ldrb	r3, [r6]
   22f10:	e5d62002 	ldrb	r2, [r6, #2]
   22f14:	e1833401 	orr	r3, r3, r1, lsl #8
   22f18:	e5d61003 	ldrb	r1, [r6, #3]
   22f1c:	e1833802 	orr	r3, r3, r2, lsl #16
   22f20:	e59f20d4 	ldr	r2, [pc, #212]	; 22ffc <malloc+0x1dc>
   22f24:	e1833c01 	orr	r3, r3, r1, lsl #24
   22f28:	e1530002 	cmp	r3, r2
   22f2c:	0a000003 	beq	22f40 <malloc+0x120>
   22f30:	e3a0208a 	mov	r2, #138	; 0x8a
   22f34:	e59f10c4 	ldr	r1, [pc, #196]	; 23000 <malloc+0x1e0>
   22f38:	e59f00c4 	ldr	r0, [pc, #196]	; 23004 <malloc+0x1e4>
   22f3c:	ebffdecd 	bl	1aa78 <assertion_failed>
   22f40:	e5d62009 	ldrb	r2, [r6, #9]
   22f44:	e5d63008 	ldrb	r3, [r6, #8]
   22f48:	e5d6100a 	ldrb	r1, [r6, #10]
   22f4c:	e1833402 	orr	r3, r3, r2, lsl #8
   22f50:	e5d6200b 	ldrb	r2, [r6, #11]
   22f54:	e1833801 	orr	r3, r3, r1, lsl #16
   22f58:	e1833c02 	orr	r3, r3, r2, lsl #24
   22f5c:	e5843004 	str	r3, [r4, #4]
   22f60:	e5973010 	ldr	r3, [r7, #16]
   22f64:	e3530000 	cmp	r3, #0
   22f68:	1affffe0 	bne	22ef0 <malloc+0xd0>
   22f6c:	e3a03000 	mov	r3, #0
   22f70:	e2864010 	add	r4, r6, #16
   22f74:	e314000f 	tst	r4, #15
   22f78:	e5c63008 	strb	r3, [r6, #8]
   22f7c:	e5c63009 	strb	r3, [r6, #9]
   22f80:	e5c6300a 	strb	r3, [r6, #10]
   22f84:	e5c6300b 	strb	r3, [r6, #11]
   22f88:	0a000003 	beq	22f9c <malloc+0x17c>
   22f8c:	e3a020b3 	mov	r2, #179	; 0xb3
   22f90:	e59f1068 	ldr	r1, [pc, #104]	; 23000 <malloc+0x1e0>
   22f94:	e59f006c 	ldr	r0, [pc, #108]	; 23008 <malloc+0x1e8>
   22f98:	ebffdeb6 	bl	1aa78 <assertion_failed>
   22f9c:	e1a00004 	mov	r0, r4
   22fa0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   22fa4:	ebffff1e 	bl	22c24 <EnterCritical>
   22fa8:	eaffffa5 	b	22e44 <malloc+0x24>
   22fac:	e3a01000 	mov	r1, #0
   22fb0:	e5973010 	ldr	r3, [r7, #16]
   22fb4:	e5821040 	str	r1, [r2, #64]	; 0x40
   22fb8:	e1530001 	cmp	r3, r1
   22fbc:	0a000000 	beq	22fc4 <malloc+0x1a4>
   22fc0:	ebffff44 	bl	22cd8 <LeaveCritical>
   22fc4:	ebffe89e 	bl	1d244 <CLogger::Get()>
   22fc8:	e59f303c 	ldr	r3, [pc, #60]	; 2300c <malloc+0x1ec>
   22fcc:	e3a02000 	mov	r2, #0
   22fd0:	e59f1038 	ldr	r1, [pc, #56]	; 23010 <malloc+0x1f0>
   22fd4:	ebffea43 	bl	1d8e8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   22fd8:	e3a04000 	mov	r4, #0
   22fdc:	eaffffee 	b	22f9c <malloc+0x17c>
   22fe0:	e3a02070 	mov	r2, #112	; 0x70
   22fe4:	e59f1014 	ldr	r1, [pc, #20]	; 23000 <malloc+0x1e0>
   22fe8:	e59f0024 	ldr	r0, [pc, #36]	; 23014 <malloc+0x1f4>
   22fec:	ebffdea1 	bl	1aa78 <assertion_failed>
   22ff0:	eaffff90 	b	22e38 <malloc+0x18>
   22ff4:	0002b9d8 	.word	0x0002b9d8
   22ff8:	0002b840 	.word	0x0002b840
   22ffc:	424c4d43 	.word	0x424c4d43
   23000:	00029da0 	.word	0x00029da0
   23004:	00029dc0 	.word	0x00029dc0
   23008:	00029dfc 	.word	0x00029dfc
   2300c:	00029de4 	.word	0x00029de4
   23010:	00029df4 	.word	0x00029df4
   23014:	00029dac 	.word	0x00029dac

00023018 <free>:
   23018:	e3500000 	cmp	r0, #0
   2301c:	012fff1e 	bxeq	lr
   23020:	e92d4070 	push	{r4, r5, r6, lr}
   23024:	e2405010 	sub	r5, r0, #16
   23028:	e5d51001 	ldrb	r1, [r5, #1]
   2302c:	e5503010 	ldrb	r3, [r0, #-16]
   23030:	e5d52002 	ldrb	r2, [r5, #2]
   23034:	e1833401 	orr	r3, r3, r1, lsl #8
   23038:	e5d51003 	ldrb	r1, [r5, #3]
   2303c:	e1833802 	orr	r3, r3, r2, lsl #16
   23040:	e59f20dc 	ldr	r2, [pc, #220]	; 23124 <free+0x10c>
   23044:	e1833c01 	orr	r3, r3, r1, lsl #24
   23048:	e1530002 	cmp	r3, r2
   2304c:	0a000003 	beq	23060 <free+0x48>
   23050:	e3a020c0 	mov	r2, #192	; 0xc0
   23054:	e59f10cc 	ldr	r1, [pc, #204]	; 23128 <free+0x110>
   23058:	e59f00cc 	ldr	r0, [pc, #204]	; 2312c <free+0x114>
   2305c:	ebffde85 	bl	1aa78 <assertion_failed>
   23060:	e59f40c8 	ldr	r4, [pc, #200]	; 23130 <free+0x118>
   23064:	e5943000 	ldr	r3, [r4]
   23068:	e3530000 	cmp	r3, #0
   2306c:	08bd8070 	popeq	{r4, r5, r6, pc}
   23070:	e5d51005 	ldrb	r1, [r5, #5]
   23074:	e5d52004 	ldrb	r2, [r5, #4]
   23078:	e5d50006 	ldrb	r0, [r5, #6]
   2307c:	e1822401 	orr	r2, r2, r1, lsl #8
   23080:	e5d51007 	ldrb	r1, [r5, #7]
   23084:	e1822800 	orr	r2, r2, r0, lsl #16
   23088:	e1822c01 	orr	r2, r2, r1, lsl #24
   2308c:	e1520003 	cmp	r2, r3
   23090:	1a000002 	bne	230a0 <free+0x88>
   23094:	ea000005 	b	230b0 <free+0x98>
   23098:	e1530002 	cmp	r3, r2
   2309c:	0a000003 	beq	230b0 <free+0x98>
   230a0:	e5b43008 	ldr	r3, [r4, #8]!
   230a4:	e3530000 	cmp	r3, #0
   230a8:	1afffffa 	bne	23098 <free+0x80>
   230ac:	e8bd8070 	pop	{r4, r5, r6, pc}
   230b0:	e59f607c 	ldr	r6, [pc, #124]	; 23134 <free+0x11c>
   230b4:	e5960010 	ldr	r0, [r6, #16]
   230b8:	e3500000 	cmp	r0, #0
   230bc:	1a000009 	bne	230e8 <free+0xd0>
   230c0:	e5d40004 	ldrb	r0, [r4, #4]
   230c4:	e5d41005 	ldrb	r1, [r4, #5]
   230c8:	e5d42006 	ldrb	r2, [r4, #6]
   230cc:	e5d43007 	ldrb	r3, [r4, #7]
   230d0:	e5c50008 	strb	r0, [r5, #8]
   230d4:	e5c51009 	strb	r1, [r5, #9]
   230d8:	e5c5200a 	strb	r2, [r5, #10]
   230dc:	e5c5300b 	strb	r3, [r5, #11]
   230e0:	e5845004 	str	r5, [r4, #4]
   230e4:	e8bd8070 	pop	{r4, r5, r6, pc}
   230e8:	ebfffecd 	bl	22c24 <EnterCritical>
   230ec:	e596c010 	ldr	ip, [r6, #16]
   230f0:	e5d40004 	ldrb	r0, [r4, #4]
   230f4:	e5d41005 	ldrb	r1, [r4, #5]
   230f8:	e5d42006 	ldrb	r2, [r4, #6]
   230fc:	e5d43007 	ldrb	r3, [r4, #7]
   23100:	e35c0000 	cmp	ip, #0
   23104:	e5c50008 	strb	r0, [r5, #8]
   23108:	e5c51009 	strb	r1, [r5, #9]
   2310c:	e5c5200a 	strb	r2, [r5, #10]
   23110:	e5c5300b 	strb	r3, [r5, #11]
   23114:	e5845004 	str	r5, [r4, #4]
   23118:	08bd8070 	popeq	{r4, r5, r6, pc}
   2311c:	e8bd4070 	pop	{r4, r5, r6, lr}
   23120:	eafffeec 	b	22cd8 <LeaveCritical>
   23124:	424c4d43 	.word	0x424c4d43
   23128:	00029da0 	.word	0x00029da0
   2312c:	00029dc0 	.word	0x00029dc0
   23130:	0002b840 	.word	0x0002b840
   23134:	0002b9d8 	.word	0x0002b9d8

00023138 <calloc>:
   23138:	e92d4070 	push	{r4, r5, r6, lr}
   2313c:	e0040190 	mul	r4, r0, r1
   23140:	e3540000 	cmp	r4, #0
   23144:	03a04001 	moveq	r4, #1
   23148:	e1540000 	cmp	r4, r0
   2314c:	3a000008 	bcc	23174 <calloc+0x3c>
   23150:	e1a00004 	mov	r0, r4
   23154:	ebffff31 	bl	22e20 <malloc>
   23158:	e2505000 	subs	r5, r0, #0
   2315c:	0a000002 	beq	2316c <calloc+0x34>
   23160:	e1a02004 	mov	r2, r4
   23164:	e3a01000 	mov	r1, #0
   23168:	ebfffa99 	bl	21bd4 <memset>
   2316c:	e1a00005 	mov	r0, r5
   23170:	e8bd8070 	pop	{r4, r5, r6, pc}
   23174:	e3a020e2 	mov	r2, #226	; 0xe2
   23178:	e59f1008 	ldr	r1, [pc, #8]	; 23188 <calloc+0x50>
   2317c:	e59f0008 	ldr	r0, [pc, #8]	; 2318c <calloc+0x54>
   23180:	ebffde3c 	bl	1aa78 <assertion_failed>
   23184:	eafffff1 	b	23150 <calloc+0x18>
   23188:	00029da0 	.word	0x00029da0
   2318c:	00029e28 	.word	0x00029e28

00023190 <realloc>:
   23190:	e92d4070 	push	{r4, r5, r6, lr}
   23194:	e2505000 	subs	r5, r0, #0
   23198:	e1a06001 	mov	r6, r1
   2319c:	0a00002d 	beq	23258 <realloc+0xc8>
   231a0:	e3510000 	cmp	r1, #0
   231a4:	0a000027 	beq	23248 <realloc+0xb8>
   231a8:	e2454010 	sub	r4, r5, #16
   231ac:	e5d41001 	ldrb	r1, [r4, #1]
   231b0:	e5553010 	ldrb	r3, [r5, #-16]
   231b4:	e5d42002 	ldrb	r2, [r4, #2]
   231b8:	e1833401 	orr	r3, r3, r1, lsl #8
   231bc:	e5d41003 	ldrb	r1, [r4, #3]
   231c0:	e1833802 	orr	r3, r3, r2, lsl #16
   231c4:	e59f20a0 	ldr	r2, [pc, #160]	; 2326c <realloc+0xdc>
   231c8:	e1833c01 	orr	r3, r3, r1, lsl #24
   231cc:	e1530002 	cmp	r3, r2
   231d0:	0a000003 	beq	231e4 <realloc+0x54>
   231d4:	e3a020fc 	mov	r2, #252	; 0xfc
   231d8:	e59f1090 	ldr	r1, [pc, #144]	; 23270 <realloc+0xe0>
   231dc:	e59f0090 	ldr	r0, [pc, #144]	; 23274 <realloc+0xe4>
   231e0:	ebffde24 	bl	1aa78 <assertion_failed>
   231e4:	e5d42005 	ldrb	r2, [r4, #5]
   231e8:	e5d43004 	ldrb	r3, [r4, #4]
   231ec:	e5d41006 	ldrb	r1, [r4, #6]
   231f0:	e1833402 	orr	r3, r3, r2, lsl #8
   231f4:	e5d42007 	ldrb	r2, [r4, #7]
   231f8:	e1833801 	orr	r3, r3, r1, lsl #16
   231fc:	e1833c02 	orr	r3, r3, r2, lsl #24
   23200:	e1560003 	cmp	r6, r3
   23204:	8a000001 	bhi	23210 <realloc+0x80>
   23208:	e1a00005 	mov	r0, r5
   2320c:	e8bd8070 	pop	{r4, r5, r6, pc}
   23210:	e1a00006 	mov	r0, r6
   23214:	ebffff01 	bl	22e20 <malloc>
   23218:	e2506000 	subs	r6, r0, #0
   2321c:	0a000010 	beq	23264 <realloc+0xd4>
   23220:	e5d42005 	ldrb	r2, [r4, #5]
   23224:	e5d43004 	ldrb	r3, [r4, #4]
   23228:	e5d41006 	ldrb	r1, [r4, #6]
   2322c:	e1833402 	orr	r3, r3, r2, lsl #8
   23230:	e5d42007 	ldrb	r2, [r4, #7]
   23234:	e1833801 	orr	r3, r3, r1, lsl #16
   23238:	e1832c02 	orr	r2, r3, r2, lsl #24
   2323c:	e1a01005 	mov	r1, r5
   23240:	ebfffbd5 	bl	2219c <memcpy>
   23244:	e1a00005 	mov	r0, r5
   23248:	e1a05006 	mov	r5, r6
   2324c:	ebffff71 	bl	23018 <free>
   23250:	e1a00005 	mov	r0, r5
   23254:	e8bd8070 	pop	{r4, r5, r6, pc}
   23258:	e1a00001 	mov	r0, r1
   2325c:	e8bd4070 	pop	{r4, r5, r6, lr}
   23260:	eafffeee 	b	22e20 <malloc>
   23264:	e1a05006 	mov	r5, r6
   23268:	eaffffe6 	b	23208 <realloc+0x78>
   2326c:	424c4d43 	.word	0x424c4d43
   23270:	00029da0 	.word	0x00029da0
   23274:	00029dc0 	.word	0x00029dc0

00023278 <palloc>:
   23278:	e92d4070 	push	{r4, r5, r6, lr}
   2327c:	e59f50c4 	ldr	r5, [pc, #196]	; 23348 <palloc+0xd0>
   23280:	e5953008 	ldr	r3, [r5, #8]
   23284:	e3530000 	cmp	r3, #0
   23288:	0a000029 	beq	23334 <palloc+0xbc>
   2328c:	e5950014 	ldr	r0, [r5, #20]
   23290:	e3500000 	cmp	r0, #0
   23294:	1a000016 	bne	232f4 <palloc+0x7c>
   23298:	e5954018 	ldr	r4, [r5, #24]
   2329c:	e3540000 	cmp	r4, #0
   232a0:	0a000017 	beq	23304 <palloc+0x8c>
   232a4:	e59f30a0 	ldr	r3, [pc, #160]	; 2334c <palloc+0xd4>
   232a8:	e5942000 	ldr	r2, [r4]
   232ac:	e1520003 	cmp	r2, r3
   232b0:	0a000003 	beq	232c4 <palloc+0x4c>
   232b4:	e59f2094 	ldr	r2, [pc, #148]	; 23350 <palloc+0xd8>
   232b8:	e59f1094 	ldr	r1, [pc, #148]	; 23354 <palloc+0xdc>
   232bc:	e59f0094 	ldr	r0, [pc, #148]	; 23358 <palloc+0xe0>
   232c0:	ebffddec 	bl	1aa78 <assertion_failed>
   232c4:	e3a02000 	mov	r2, #0
   232c8:	e5943004 	ldr	r3, [r4, #4]
   232cc:	e5842000 	str	r2, [r4]
   232d0:	e5853018 	str	r3, [r5, #24]
   232d4:	e5953014 	ldr	r3, [r5, #20]
   232d8:	e3530000 	cmp	r3, #0
   232dc:	1a000001 	bne	232e8 <palloc+0x70>
   232e0:	e1a00004 	mov	r0, r4
   232e4:	e8bd8070 	pop	{r4, r5, r6, pc}
   232e8:	ebfffe7a 	bl	22cd8 <LeaveCritical>
   232ec:	e1a00004 	mov	r0, r4
   232f0:	e8bd8070 	pop	{r4, r5, r6, pc}
   232f4:	ebfffe4a 	bl	22c24 <EnterCritical>
   232f8:	e5954018 	ldr	r4, [r5, #24]
   232fc:	e3540000 	cmp	r4, #0
   23300:	1affffe7 	bne	232a4 <palloc+0x2c>
   23304:	e5954008 	ldr	r4, [r5, #8]
   23308:	e595200c 	ldr	r2, [r5, #12]
   2330c:	e2843a01 	add	r3, r4, #4096	; 0x1000
   23310:	e1530002 	cmp	r3, r2
   23314:	e5853008 	str	r3, [r5, #8]
   23318:	9affffed 	bls	232d4 <palloc+0x5c>
   2331c:	e5954014 	ldr	r4, [r5, #20]
   23320:	e3540000 	cmp	r4, #0
   23324:	0affffed 	beq	232e0 <palloc+0x68>
   23328:	ebfffe6a 	bl	22cd8 <LeaveCritical>
   2332c:	e3a00000 	mov	r0, #0
   23330:	e8bd8070 	pop	{r4, r5, r6, pc}
   23334:	e59f2020 	ldr	r2, [pc, #32]	; 2335c <palloc+0xe4>
   23338:	e59f1014 	ldr	r1, [pc, #20]	; 23354 <palloc+0xdc>
   2333c:	e59f001c 	ldr	r0, [pc, #28]	; 23360 <palloc+0xe8>
   23340:	ebffddcc 	bl	1aa78 <assertion_failed>
   23344:	eaffffd0 	b	2328c <palloc+0x14>
   23348:	0002b9d8 	.word	0x0002b9d8
   2334c:	50474d43 	.word	0x50474d43
   23350:	0000011f 	.word	0x0000011f
   23354:	00029da0 	.word	0x00029da0
   23358:	00029e50 	.word	0x00029e50
   2335c:	00000111 	.word	0x00000111
   23360:	00029e3c 	.word	0x00029e3c

00023364 <pfree>:
   23364:	e92d4070 	push	{r4, r5, r6, lr}
   23368:	e2504000 	subs	r4, r0, #0
   2336c:	08bd8070 	popeq	{r4, r5, r6, pc}
   23370:	e59f5044 	ldr	r5, [pc, #68]	; 233bc <pfree+0x58>
   23374:	e5950014 	ldr	r0, [r5, #20]
   23378:	e3500000 	cmp	r0, #0
   2337c:	1a000004 	bne	23394 <pfree+0x30>
   23380:	e5952018 	ldr	r2, [r5, #24]
   23384:	e59f1034 	ldr	r1, [pc, #52]	; 233c0 <pfree+0x5c>
   23388:	e5854018 	str	r4, [r5, #24]
   2338c:	e8840006 	stm	r4, {r1, r2}
   23390:	e8bd8070 	pop	{r4, r5, r6, pc}
   23394:	ebfffe22 	bl	22c24 <EnterCritical>
   23398:	e5951014 	ldr	r1, [r5, #20]
   2339c:	e5953018 	ldr	r3, [r5, #24]
   233a0:	e59f2018 	ldr	r2, [pc, #24]	; 233c0 <pfree+0x5c>
   233a4:	e3510000 	cmp	r1, #0
   233a8:	e884000c 	stm	r4, {r2, r3}
   233ac:	e5854018 	str	r4, [r5, #24]
   233b0:	08bd8070 	popeq	{r4, r5, r6, pc}
   233b4:	e8bd4070 	pop	{r4, r5, r6, lr}
   233b8:	eafffe46 	b	22cd8 <LeaveCritical>
   233bc:	0002b9d8 	.word	0x0002b9d8
   233c0:	50474d43 	.word	0x50474d43

000233c4 <_GLOBAL__sub_I_mem_init>:
   233c4:	e3a02001 	mov	r2, #1
   233c8:	e59f3008 	ldr	r3, [pc, #8]	; 233d8 <_GLOBAL__sub_I_mem_init+0x14>
   233cc:	e5832010 	str	r2, [r3, #16]
   233d0:	e5832014 	str	r2, [r3, #20]
   233d4:	e12fff1e 	bx	lr
   233d8:	0002b9d8 	.word	0x0002b9d8

000233dc <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>:
   233dc:	e3a02000 	mov	r2, #0
   233e0:	e3a01001 	mov	r1, #1
   233e4:	e92d4030 	push	{r4, r5, lr}
   233e8:	e1a04000 	mov	r4, r0
   233ec:	e5903020 	ldr	r3, [r0, #32]
   233f0:	e24dd014 	sub	sp, sp, #20
   233f4:	e5c31011 	strb	r1, [r3, #17]
   233f8:	e5c3200c 	strb	r2, [r3, #12]
   233fc:	e5c3200d 	strb	r2, [r3, #13]
   23400:	e5c3200e 	strb	r2, [r3, #14]
   23404:	e5c3200f 	strb	r2, [r3, #15]
   23408:	e5c32010 	strb	r2, [r3, #16]
   2340c:	e5c32012 	strb	r2, [r3, #18]
   23410:	e5c32013 	strb	r2, [r3, #19]
   23414:	e28d000c 	add	r0, sp, #12
   23418:	ebffddba 	bl	1ab08 <CBcmPropertyTags::CBcmPropertyTags()>
   2341c:	e59f306c 	ldr	r3, [pc, #108]	; 23490 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0xb4>
   23420:	e5942020 	ldr	r2, [r4, #32]
   23424:	e28d000c 	add	r0, sp, #12
   23428:	e58d3000 	str	r3, [sp]
   2342c:	e59f1060 	ldr	r1, [pc, #96]	; 23494 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0xb8>
   23430:	e283300c 	add	r3, r3, #12
   23434:	ebffde0a 	bl	1ac64 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   23438:	e2505000 	subs	r5, r0, #0
   2343c:	0a000008 	beq	23464 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x88>
   23440:	e5942020 	ldr	r2, [r4, #32]
   23444:	e5d2300c 	ldrb	r3, [r2, #12]
   23448:	e5d2000d 	ldrb	r0, [r2, #13]
   2344c:	e5d2100e 	ldrb	r1, [r2, #14]
   23450:	e1833400 	orr	r3, r3, r0, lsl #8
   23454:	e5d2200f 	ldrb	r2, [r2, #15]
   23458:	e1833801 	orr	r3, r3, r1, lsl #16
   2345c:	e1933c02 	orrs	r3, r3, r2, lsl #24
   23460:	0a000005 	beq	2347c <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0xa0>
   23464:	e3a05000 	mov	r5, #0
   23468:	e28d000c 	add	r0, sp, #12
   2346c:	ebffddab 	bl	1ab20 <CBcmPropertyTags::~CBcmPropertyTags()>
   23470:	e1a00005 	mov	r0, r5
   23474:	e28dd014 	add	sp, sp, #20
   23478:	e8bd8030 	pop	{r4, r5, pc}
   2347c:	e28d000c 	add	r0, sp, #12
   23480:	ebffdda6 	bl	1ab20 <CBcmPropertyTags::~CBcmPropertyTags()>
   23484:	e1a00005 	mov	r0, r5
   23488:	e28dd014 	add	sp, sp, #20
   2348c:	e8bd8030 	pop	{r4, r5, pc}
   23490:	00000408 	.word	0x00000408
   23494:	0004800b 	.word	0x0004800b

00023498 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
   23498:	e92d4030 	push	{r4, r5, lr}
   2349c:	e3510000 	cmp	r1, #0
   234a0:	13520000 	cmpne	r2, #0
   234a4:	e1a04000 	mov	r4, r0
   234a8:	e3a05000 	mov	r5, #0
   234ac:	e24dd024 	sub	sp, sp, #36	; 0x24
   234b0:	e59dc034 	ldr	ip, [sp, #52]	; 0x34
   234b4:	e59d0030 	ldr	r0, [sp, #48]	; 0x30
   234b8:	e8840006 	stm	r4, {r1, r2}
   234bc:	e5843010 	str	r3, [r4, #16]
   234c0:	e584c00c 	str	ip, [r4, #12]
   234c4:	e5840008 	str	r0, [r4, #8]
   234c8:	e5845014 	str	r5, [r4, #20]
   234cc:	e5845018 	str	r5, [r4, #24]
   234d0:	e584501c 	str	r5, [r4, #28]
   234d4:	e5845020 	str	r5, [r4, #32]
   234d8:	1a000010 	bne	23520 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x88>
   234dc:	e28d0008 	add	r0, sp, #8
   234e0:	ebffdd88 	bl	1ab08 <CBcmPropertyTags::CBcmPropertyTags()>
   234e4:	e58d5000 	str	r5, [sp]
   234e8:	e28d0008 	add	r0, sp, #8
   234ec:	e3a03014 	mov	r3, #20
   234f0:	e28d200c 	add	r2, sp, #12
   234f4:	e59f10c8 	ldr	r1, [pc, #200]	; 235c4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x12c>
   234f8:	ebffddd9 	bl	1ac64 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   234fc:	e1500005 	cmp	r0, r5
   23500:	1a000026 	bne	235a0 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x108>
   23504:	e3a02d0a 	mov	r2, #640	; 0x280
   23508:	e3a03e1e 	mov	r3, #480	; 0x1e0
   2350c:	e884000c 	stm	r4, {r2, r3}
   23510:	e28d0008 	add	r0, sp, #8
   23514:	ebffdd81 	bl	1ab20 <CBcmPropertyTags::~CBcmPropertyTags()>
   23518:	e5940008 	ldr	r0, [r4, #8]
   2351c:	e5943010 	ldr	r3, [r4, #16]
   23520:	e3500000 	cmp	r0, #0
   23524:	0a000019 	beq	23590 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xf8>
   23528:	e594200c 	ldr	r2, [r4, #12]
   2352c:	e3520000 	cmp	r2, #0
   23530:	0a000016 	beq	23590 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xf8>
   23534:	e3530008 	cmp	r3, #8
   23538:	8a000006 	bhi	23558 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xc0>
   2353c:	e59f0084 	ldr	r0, [pc, #132]	; 235c8 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x130>
   23540:	ebfffe12 	bl	22d90 <operator new[](unsigned int)>
   23544:	e3a02b01 	mov	r2, #1024	; 0x400
   23548:	e5840020 	str	r0, [r4, #32]
   2354c:	e3a01000 	mov	r1, #0
   23550:	e2800014 	add	r0, r0, #20
   23554:	ebfff99e 	bl	21bd4 <memset>
   23558:	e3a02070 	mov	r2, #112	; 0x70
   2355c:	e59f1068 	ldr	r1, [pc, #104]	; 235cc <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x134>
   23560:	e2840024 	add	r0, r4, #36	; 0x24
   23564:	ebfffb0c 	bl	2219c <memcpy>
   23568:	e994000f 	ldmib	r4, {r0, r1, r2, r3}
   2356c:	e5840034 	str	r0, [r4, #52]	; 0x34
   23570:	e1a00004 	mov	r0, r4
   23574:	e594c000 	ldr	ip, [r4]
   23578:	e5841044 	str	r1, [r4, #68]	; 0x44
   2357c:	e584c030 	str	ip, [r4, #48]	; 0x30
   23580:	e5842048 	str	r2, [r4, #72]	; 0x48
   23584:	e5843058 	str	r3, [r4, #88]	; 0x58
   23588:	e28dd024 	add	sp, sp, #36	; 0x24
   2358c:	e8bd8030 	pop	{r4, r5, pc}
   23590:	e8940006 	ldm	r4, {r1, r2}
   23594:	e5841008 	str	r1, [r4, #8]
   23598:	e584200c 	str	r2, [r4, #12]
   2359c:	eaffffe4 	b	23534 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x9c>
   235a0:	e59d2018 	ldr	r2, [sp, #24]
   235a4:	e59d301c 	ldr	r3, [sp, #28]
   235a8:	e2420d0a 	sub	r0, r2, #640	; 0x280
   235ac:	e2431e1e 	sub	r1, r3, #480	; 0x1e0
   235b0:	e3510f96 	cmp	r1, #600	; 0x258
   235b4:	93500c05 	cmpls	r0, #1280	; 0x500
   235b8:	e884000c 	stm	r4, {r2, r3}
   235bc:	9affffd3 	bls	23510 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x78>
   235c0:	eaffffcf 	b	23504 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
   235c4:	00040003 	.word	0x00040003
   235c8:	00000414 	.word	0x00000414
   235cc:	0002b884 	.word	0x0002b884

000235d0 <CBcmFrameBuffer::~CBcmFrameBuffer()>:
   235d0:	e92d4010 	push	{r4, lr}
   235d4:	e1a04000 	mov	r4, r0
   235d8:	e3a01014 	mov	r1, #20
   235dc:	e5900020 	ldr	r0, [r0, #32]
   235e0:	ebfffded 	bl	22d9c <operator delete(void*, unsigned int)>
   235e4:	e1a00004 	mov	r0, r4
   235e8:	e8bd8010 	pop	{r4, pc}

000235ec <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)>:
   235ec:	e5903010 	ldr	r3, [r0, #16]
   235f0:	e3530008 	cmp	r3, #8
   235f4:	812fff1e 	bxhi	lr
   235f8:	e1a03982 	lsl	r3, r2, #19
   235fc:	e1a0c5a2 	lsr	ip, r2, #11
   23600:	e203373e 	and	r3, r3, #16252928	; 0xf80000
   23604:	e183318c 	orr	r3, r3, ip, lsl #3
   23608:	e1a02282 	lsl	r2, r2, #5
   2360c:	e5900020 	ldr	r0, [r0, #32]
   23610:	e38334ff 	orr	r3, r3, #-16777216	; 0xff000000
   23614:	e2022b3f 	and	r2, r2, #64512	; 0xfc00
   23618:	e1822003 	orr	r2, r2, r3
   2361c:	e2811004 	add	r1, r1, #4
   23620:	e0801101 	add	r1, r0, r1, lsl #2
   23624:	e1a0c422 	lsr	ip, r2, #8
   23628:	e1a00822 	lsr	r0, r2, #16
   2362c:	e1a03c22 	lsr	r3, r2, #24
   23630:	e5c12004 	strb	r2, [r1, #4]
   23634:	e5c1c005 	strb	ip, [r1, #5]
   23638:	e5c10006 	strb	r0, [r1, #6]
   2363c:	e5c13007 	strb	r3, [r1, #7]
   23640:	e12fff1e 	bx	lr

00023644 <CBcmFrameBuffer::SetPalette32(unsigned char, unsigned int)>:
   23644:	e5903010 	ldr	r3, [r0, #16]
   23648:	e3530008 	cmp	r3, #8
   2364c:	812fff1e 	bxhi	lr
   23650:	e5903020 	ldr	r3, [r0, #32]
   23654:	e2811004 	add	r1, r1, #4
   23658:	e0831101 	add	r1, r3, r1, lsl #2
   2365c:	e1a0c422 	lsr	ip, r2, #8
   23660:	e1a00822 	lsr	r0, r2, #16
   23664:	e1a03c22 	lsr	r3, r2, #24
   23668:	e5c12004 	strb	r2, [r1, #4]
   2366c:	e5c1c005 	strb	ip, [r1, #5]
   23670:	e5c10006 	strb	r0, [r1, #6]
   23674:	e5c13007 	strb	r3, [r1, #7]
   23678:	e12fff1e 	bx	lr

0002367c <CBcmFrameBuffer::Initialize()>:
   2367c:	e92d4030 	push	{r4, r5, lr}
   23680:	e1a04000 	mov	r4, r0
   23684:	e24dd00c 	sub	sp, sp, #12
   23688:	e28d0004 	add	r0, sp, #4
   2368c:	ebffdd1d 	bl	1ab08 <CBcmPropertyTags::CBcmPropertyTags()>
   23690:	e2841024 	add	r1, r4, #36	; 0x24
   23694:	e28d0004 	add	r0, sp, #4
   23698:	e3a02070 	mov	r2, #112	; 0x70
   2369c:	ebffdd24 	bl	1ab34 <CBcmPropertyTags::GetTags(void*, unsigned int)>
   236a0:	e2505000 	subs	r5, r0, #0
   236a4:	0a00001f 	beq	23728 <CBcmFrameBuffer::Initialize()+0xac>
   236a8:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   236ac:	e3530000 	cmp	r3, #0
   236b0:	0a00001b 	beq	23724 <CBcmFrameBuffer::Initialize()+0xa8>
   236b4:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   236b8:	e3530000 	cmp	r3, #0
   236bc:	0a000018 	beq	23724 <CBcmFrameBuffer::Initialize()+0xa8>
   236c0:	e5943044 	ldr	r3, [r4, #68]	; 0x44
   236c4:	e3530000 	cmp	r3, #0
   236c8:	0a000015 	beq	23724 <CBcmFrameBuffer::Initialize()+0xa8>
   236cc:	e5943048 	ldr	r3, [r4, #72]	; 0x48
   236d0:	e3530000 	cmp	r3, #0
   236d4:	0a000012 	beq	23724 <CBcmFrameBuffer::Initialize()+0xa8>
   236d8:	e5943058 	ldr	r3, [r4, #88]	; 0x58
   236dc:	e3530000 	cmp	r3, #0
   236e0:	0a00000f 	beq	23724 <CBcmFrameBuffer::Initialize()+0xa8>
   236e4:	e594307c 	ldr	r3, [r4, #124]	; 0x7c
   236e8:	e3530000 	cmp	r3, #0
   236ec:	0a00000c 	beq	23724 <CBcmFrameBuffer::Initialize()+0xa8>
   236f0:	e5940010 	ldr	r0, [r4, #16]
   236f4:	e5941080 	ldr	r1, [r4, #128]	; 0x80
   236f8:	e5942090 	ldr	r2, [r4, #144]	; 0x90
   236fc:	e3c33103 	bic	r3, r3, #-1073741824	; 0xc0000000
   23700:	e3500008 	cmp	r0, #8
   23704:	e5843014 	str	r3, [r4, #20]
   23708:	e5841018 	str	r1, [r4, #24]
   2370c:	e584201c 	str	r2, [r4, #28]
   23710:	8a000004 	bhi	23728 <CBcmFrameBuffer::Initialize()+0xac>
   23714:	e1a00004 	mov	r0, r4
   23718:	ebffff2f 	bl	233dc <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>
   2371c:	e1a05000 	mov	r5, r0
   23720:	ea000000 	b	23728 <CBcmFrameBuffer::Initialize()+0xac>
   23724:	e1a05003 	mov	r5, r3
   23728:	e28d0004 	add	r0, sp, #4
   2372c:	ebffdcfb 	bl	1ab20 <CBcmPropertyTags::~CBcmPropertyTags()>
   23730:	e1a00005 	mov	r0, r5
   23734:	e28dd00c 	add	sp, sp, #12
   23738:	e8bd8030 	pop	{r4, r5, pc}

0002373c <CBcmFrameBuffer::GetWidth() const>:
   2373c:	e5900000 	ldr	r0, [r0]
   23740:	e12fff1e 	bx	lr

00023744 <CBcmFrameBuffer::GetHeight() const>:
   23744:	e5900004 	ldr	r0, [r0, #4]
   23748:	e12fff1e 	bx	lr

0002374c <CBcmFrameBuffer::GetVirtWidth() const>:
   2374c:	e5900008 	ldr	r0, [r0, #8]
   23750:	e12fff1e 	bx	lr

00023754 <CBcmFrameBuffer::GetVirtHeight() const>:
   23754:	e590000c 	ldr	r0, [r0, #12]
   23758:	e12fff1e 	bx	lr

0002375c <CBcmFrameBuffer::GetPitch() const>:
   2375c:	e590001c 	ldr	r0, [r0, #28]
   23760:	e12fff1e 	bx	lr

00023764 <CBcmFrameBuffer::GetDepth() const>:
   23764:	e5900010 	ldr	r0, [r0, #16]
   23768:	e12fff1e 	bx	lr

0002376c <CBcmFrameBuffer::GetBuffer() const>:
   2376c:	e5900014 	ldr	r0, [r0, #20]
   23770:	e12fff1e 	bx	lr

00023774 <CBcmFrameBuffer::GetSize() const>:
   23774:	e5900018 	ldr	r0, [r0, #24]
   23778:	e12fff1e 	bx	lr

0002377c <CBcmFrameBuffer::UpdatePalette()>:
   2377c:	e5903010 	ldr	r3, [r0, #16]
   23780:	e3530008 	cmp	r3, #8
   23784:	9a000001 	bls	23790 <CBcmFrameBuffer::UpdatePalette()+0x14>
   23788:	e3a00001 	mov	r0, #1
   2378c:	e12fff1e 	bx	lr
   23790:	eaffff11 	b	233dc <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>

00023794 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)>:
   23794:	e92d4070 	push	{r4, r5, r6, lr}
   23798:	e24dd020 	sub	sp, sp, #32
   2379c:	e28d0008 	add	r0, sp, #8
   237a0:	e1a05001 	mov	r5, r1
   237a4:	e1a06002 	mov	r6, r2
   237a8:	ebffdcd6 	bl	1ab08 <CBcmPropertyTags::CBcmPropertyTags()>
   237ac:	e3a03008 	mov	r3, #8
   237b0:	e28d200c 	add	r2, sp, #12
   237b4:	e08d0003 	add	r0, sp, r3
   237b8:	e58d3000 	str	r3, [sp]
   237bc:	e59f1044 	ldr	r1, [pc, #68]	; 23808 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x74>
   237c0:	e3a03014 	mov	r3, #20
   237c4:	e58d5018 	str	r5, [sp, #24]
   237c8:	e58d601c 	str	r6, [sp, #28]
   237cc:	ebffdd24 	bl	1ac64 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   237d0:	e2504000 	subs	r4, r0, #0
   237d4:	0a000006 	beq	237f4 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x60>
   237d8:	e59d3018 	ldr	r3, [sp, #24]
   237dc:	e1550003 	cmp	r5, r3
   237e0:	059d401c 	ldreq	r4, [sp, #28]
   237e4:	13a04000 	movne	r4, #0
   237e8:	00444006 	subeq	r4, r4, r6
   237ec:	016f4f14 	clzeq	r4, r4
   237f0:	01a042a4 	lsreq	r4, r4, #5
   237f4:	e28d0008 	add	r0, sp, #8
   237f8:	ebffdcc8 	bl	1ab20 <CBcmPropertyTags::~CBcmPropertyTags()>
   237fc:	e1a00004 	mov	r0, r4
   23800:	e28dd020 	add	sp, sp, #32
   23804:	e8bd8070 	pop	{r4, r5, r6, pc}
   23808:	00048009 	.word	0x00048009

0002380c <CBcmFrameBuffer::WaitForVerticalSync()>:
   2380c:	e92d4010 	push	{r4, lr}
   23810:	e24dd020 	sub	sp, sp, #32
   23814:	e28d000c 	add	r0, sp, #12
   23818:	ebffdcba 	bl	1ab08 <CBcmPropertyTags::CBcmPropertyTags()>
   2381c:	e3a03000 	mov	r3, #0
   23820:	e58d3000 	str	r3, [sp]
   23824:	e3a03010 	mov	r3, #16
   23828:	e59f1020 	ldr	r1, [pc, #32]	; 23850 <CBcmFrameBuffer::WaitForVerticalSync()+0x44>
   2382c:	e08d2003 	add	r2, sp, r3
   23830:	e28d000c 	add	r0, sp, #12
   23834:	ebffdd0a 	bl	1ac64 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   23838:	e1a04000 	mov	r4, r0
   2383c:	e28d000c 	add	r0, sp, #12
   23840:	ebffdcb6 	bl	1ab20 <CBcmPropertyTags::~CBcmPropertyTags()>
   23844:	e1a00004 	mov	r0, r4
   23848:	e28dd020 	add	sp, sp, #32
   2384c:	e8bd8010 	pop	{r4, pc}
   23850:	0004800e 	.word	0x0004800e

00023854 <CBcmMailBox::CBcmMailBox(unsigned int)>:
   23854:	e5801000 	str	r1, [r0]
   23858:	e12fff1e 	bx	lr

0002385c <CBcmMailBox::~CBcmMailBox()>:
   2385c:	e12fff1e 	bx	lr

00023860 <CBcmMailBox::Flush()>:
   23860:	e92d4070 	push	{r4, r5, r6, lr}
   23864:	e59f4028 	ldr	r4, [pc, #40]	; 23894 <CBcmMailBox::Flush()+0x34>
   23868:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   2386c:	e3130101 	tst	r3, #1073741824	; 0x40000000
   23870:	18bd8070 	popne	{r4, r5, r6, pc}
   23874:	e3a05014 	mov	r5, #20
   23878:	e1a00005 	mov	r0, r5
   2387c:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
   23880:	ebfff88b 	bl	21ab4 <CTimer::SimpleMsDelay(unsigned int)>
   23884:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   23888:	e3130101 	tst	r3, #1073741824	; 0x40000000
   2388c:	0afffff9 	beq	23878 <CBcmMailBox::Flush()+0x18>
   23890:	e8bd8070 	pop	{r4, r5, r6, pc}
   23894:	2000b000 	.word	0x2000b000

00023898 <CBcmMailBox::Read()>:
   23898:	e5901000 	ldr	r1, [r0]
   2389c:	e59f2020 	ldr	r2, [pc, #32]	; 238c4 <CBcmMailBox::Read()+0x2c>
   238a0:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   238a4:	e3130101 	tst	r3, #1073741824	; 0x40000000
   238a8:	1afffffc 	bne	238a0 <CBcmMailBox::Read()+0x8>
   238ac:	e5920880 	ldr	r0, [r2, #2176]	; 0x880
   238b0:	e200300f 	and	r3, r0, #15
   238b4:	e1510003 	cmp	r1, r3
   238b8:	1afffff8 	bne	238a0 <CBcmMailBox::Read()+0x8>
   238bc:	e3c0000f 	bic	r0, r0, #15
   238c0:	e12fff1e 	bx	lr
   238c4:	2000b000 	.word	0x2000b000

000238c8 <CBcmMailBox::Write(unsigned int)>:
   238c8:	e92d4070 	push	{r4, r5, r6, lr}
   238cc:	e1a05000 	mov	r5, r0
   238d0:	e1a04001 	mov	r4, r1
   238d4:	e59f2034 	ldr	r2, [pc, #52]	; 23910 <CBcmMailBox::Write(unsigned int)+0x48>
   238d8:	e59238b8 	ldr	r3, [r2, #2232]	; 0x8b8
   238dc:	e3530000 	cmp	r3, #0
   238e0:	bafffffc 	blt	238d8 <CBcmMailBox::Write(unsigned int)+0x10>
   238e4:	e314000f 	tst	r4, #15
   238e8:	0a000003 	beq	238fc <CBcmMailBox::Write(unsigned int)+0x34>
   238ec:	e3a0205b 	mov	r2, #91	; 0x5b
   238f0:	e59f101c 	ldr	r1, [pc, #28]	; 23914 <CBcmMailBox::Write(unsigned int)+0x4c>
   238f4:	e59f001c 	ldr	r0, [pc, #28]	; 23918 <CBcmMailBox::Write(unsigned int)+0x50>
   238f8:	ebffdc5e 	bl	1aa78 <assertion_failed>
   238fc:	e5952000 	ldr	r2, [r5]
   23900:	e59f3008 	ldr	r3, [pc, #8]	; 23910 <CBcmMailBox::Write(unsigned int)+0x48>
   23904:	e1844002 	orr	r4, r4, r2
   23908:	e58348a0 	str	r4, [r3, #2208]	; 0x8a0
   2390c:	e8bd8070 	pop	{r4, r5, r6, pc}
   23910:	2000b000 	.word	0x2000b000
   23914:	00029e74 	.word	0x00029e74
   23918:	00029e84 	.word	0x00029e84

0002391c <CBcmMailBox::WriteRead(unsigned int)>:
   2391c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   23920:	e3a03000 	mov	r3, #0
   23924:	e1a07000 	mov	r7, r0
   23928:	e1a08001 	mov	r8, r1
   2392c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   23930:	e59f5090 	ldr	r5, [pc, #144]	; 239c8 <CBcmMailBox::WriteRead(unsigned int)+0xac>
   23934:	e5950000 	ldr	r0, [r5]
   23938:	e1500003 	cmp	r0, r3
   2393c:	1a00001f 	bne	239c0 <CBcmMailBox::WriteRead(unsigned int)+0xa4>
   23940:	e59f4084 	ldr	r4, [pc, #132]	; 239cc <CBcmMailBox::WriteRead(unsigned int)+0xb0>
   23944:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   23948:	e3130101 	tst	r3, #1073741824	; 0x40000000
   2394c:	1a000006 	bne	2396c <CBcmMailBox::WriteRead(unsigned int)+0x50>
   23950:	e3a06014 	mov	r6, #20
   23954:	e1a00006 	mov	r0, r6
   23958:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
   2395c:	ebfff854 	bl	21ab4 <CTimer::SimpleMsDelay(unsigned int)>
   23960:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   23964:	e3130101 	tst	r3, #1073741824	; 0x40000000
   23968:	0afffff9 	beq	23954 <CBcmMailBox::WriteRead(unsigned int)+0x38>
   2396c:	e1a00007 	mov	r0, r7
   23970:	e1a01008 	mov	r1, r8
   23974:	ebffffd3 	bl	238c8 <CBcmMailBox::Write(unsigned int)>
   23978:	e5970000 	ldr	r0, [r7]
   2397c:	e59f2048 	ldr	r2, [pc, #72]	; 239cc <CBcmMailBox::WriteRead(unsigned int)+0xb0>
   23980:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   23984:	e3130101 	tst	r3, #1073741824	; 0x40000000
   23988:	1afffffc 	bne	23980 <CBcmMailBox::WriteRead(unsigned int)+0x64>
   2398c:	e5923880 	ldr	r3, [r2, #2176]	; 0x880
   23990:	e203100f 	and	r1, r3, #15
   23994:	e1510000 	cmp	r1, r0
   23998:	1afffff8 	bne	23980 <CBcmMailBox::WriteRead(unsigned int)+0x64>
   2399c:	e5952000 	ldr	r2, [r5]
   239a0:	e3c3400f 	bic	r4, r3, #15
   239a4:	e3520000 	cmp	r2, #0
   239a8:	0a000000 	beq	239b0 <CBcmMailBox::WriteRead(unsigned int)+0x94>
   239ac:	ebfffcc9 	bl	22cd8 <LeaveCritical>
   239b0:	e3a03000 	mov	r3, #0
   239b4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   239b8:	e1a00004 	mov	r0, r4
   239bc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   239c0:	ebfffc97 	bl	22c24 <EnterCritical>
   239c4:	eaffffdd 	b	23940 <CBcmMailBox::WriteRead(unsigned int)+0x24>
   239c8:	0002b9f4 	.word	0x0002b9f4
   239cc:	2000b000 	.word	0x2000b000

000239d0 <_GLOBAL__sub_I__ZN11CBcmMailBox10s_SpinLockE>:
   239d0:	e3a02000 	mov	r2, #0
   239d4:	e59f3004 	ldr	r3, [pc, #4]	; 239e0 <_GLOBAL__sub_I__ZN11CBcmMailBox10s_SpinLockE+0x10>
   239d8:	e5832000 	str	r2, [r3]
   239dc:	e12fff1e 	bx	lr
   239e0:	0002b9f4 	.word	0x0002b9f4

000239e4 <CCharGenerator::CCharGenerator()>:
   239e4:	e3a03008 	mov	r3, #8
   239e8:	e5803000 	str	r3, [r0]
   239ec:	e12fff1e 	bx	lr

000239f0 <CCharGenerator::~CCharGenerator()>:
   239f0:	e12fff1e 	bx	lr

000239f4 <CCharGenerator::GetCharWidth() const>:
   239f4:	e5900000 	ldr	r0, [r0]
   239f8:	e12fff1e 	bx	lr

000239fc <CCharGenerator::GetCharHeight() const>:
   239fc:	e3a00013 	mov	r0, #19
   23a00:	e12fff1e 	bx	lr

00023a04 <CCharGenerator::GetUnderline() const>:
   23a04:	e3a00010 	mov	r0, #16
   23a08:	e12fff1e 	bx	lr

00023a0c <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>:
   23a0c:	e6ef1071 	uxtb	r1, r1
   23a10:	e92d4070 	push	{r4, r5, r6, lr}
   23a14:	e2414021 	sub	r4, r1, #33	; 0x21
   23a18:	e35400de 	cmp	r4, #222	; 0xde
   23a1c:	8a00000e 	bhi	23a5c <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x50>
   23a20:	e1a06003 	mov	r6, r3
   23a24:	e5903000 	ldr	r3, [r0]
   23a28:	e1a05002 	mov	r5, r2
   23a2c:	e1530002 	cmp	r3, r2
   23a30:	9a00000b 	bls	23a64 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x58>
   23a34:	e356000f 	cmp	r6, #15
   23a38:	8a000007 	bhi	23a5c <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x50>
   23a3c:	e3a02080 	mov	r2, #128	; 0x80
   23a40:	e59f1038 	ldr	r1, [pc, #56]	; 23a80 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x74>
   23a44:	e0814204 	add	r4, r1, r4, lsl #4
   23a48:	e7d43006 	ldrb	r3, [r4, r6]
   23a4c:	e0133552 	ands	r3, r3, r2, asr r5
   23a50:	13a00001 	movne	r0, #1
   23a54:	03a00000 	moveq	r0, #0
   23a58:	e8bd8070 	pop	{r4, r5, r6, pc}
   23a5c:	e3a00000 	mov	r0, #0
   23a60:	e8bd8070 	pop	{r4, r5, r6, pc}
   23a64:	e3a0204e 	mov	r2, #78	; 0x4e
   23a68:	e59f1014 	ldr	r1, [pc, #20]	; 23a84 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x78>
   23a6c:	e59f0014 	ldr	r0, [pc, #20]	; 23a88 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x7c>
   23a70:	ebffdc00 	bl	1aa78 <assertion_failed>
   23a74:	e356000f 	cmp	r6, #15
   23a78:	9affffef 	bls	23a3c <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x30>
   23a7c:	eafffff6 	b	23a5c <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x50>
   23a80:	00029e98 	.word	0x00029e98
   23a84:	0002ac88 	.word	0x0002ac88
   23a88:	0002ac9c 	.word	0x0002ac9c
   23a8c:	00000000 	.word	0x00000000

00023a90 <DelayLoop>:
   23a90:	e2500001 	subs	r0, r0, #1
   23a94:	8afffffd 	bhi	23a90 <DelayLoop>
   23a98:	e1a0f00e 	mov	pc, lr

00023a9c <CGPIOManager::CGPIOManager(CInterruptSystem*)>:
   23a9c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   23aa0:	e3a0e000 	mov	lr, #0
   23aa4:	e1a03000 	mov	r3, r0
   23aa8:	e1a0c00e 	mov	ip, lr
   23aac:	e5801000 	str	r1, [r0]
   23ab0:	e28020dc 	add	r2, r0, #220	; 0xdc
   23ab4:	e5e3e004 	strb	lr, [r3, #4]!
   23ab8:	e5a3c004 	str	ip, [r3, #4]!
   23abc:	e1530002 	cmp	r3, r2
   23ac0:	1afffffc 	bne	23ab8 <CGPIOManager::CGPIOManager(CInterruptSystem*)+0x1c>
   23ac4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00023ac8 <CGPIOManager::~CGPIOManager()>:
   23ac8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   23acc:	e1a09000 	mov	r9, r0
   23ad0:	e3a0802c 	mov	r8, #44	; 0x2c
   23ad4:	e59f706c 	ldr	r7, [pc, #108]	; 23b48 <CGPIOManager::~CGPIOManager()+0x80>
   23ad8:	e59f606c 	ldr	r6, [pc, #108]	; 23b4c <CGPIOManager::~CGPIOManager()+0x84>
   23adc:	e2804004 	add	r4, r0, #4
   23ae0:	e28050dc 	add	r5, r0, #220	; 0xdc
   23ae4:	e5b43004 	ldr	r3, [r4, #4]!
   23ae8:	e3530000 	cmp	r3, #0
   23aec:	0a000003 	beq	23b00 <CGPIOManager::~CGPIOManager()+0x38>
   23af0:	e1a02008 	mov	r2, r8
   23af4:	e1a01007 	mov	r1, r7
   23af8:	e1a00006 	mov	r0, r6
   23afc:	ebffdbdd 	bl	1aa78 <assertion_failed>
   23b00:	e1540005 	cmp	r4, r5
   23b04:	1afffff6 	bne	23ae4 <CGPIOManager::~CGPIOManager()+0x1c>
   23b08:	e5d93004 	ldrb	r3, [r9, #4]
   23b0c:	e3530000 	cmp	r3, #0
   23b10:	0a000004 	beq	23b28 <CGPIOManager::~CGPIOManager()+0x60>
   23b14:	e5990000 	ldr	r0, [r9]
   23b18:	e3500000 	cmp	r0, #0
   23b1c:	0a000003 	beq	23b30 <CGPIOManager::~CGPIOManager()+0x68>
   23b20:	e3a01034 	mov	r1, #52	; 0x34
   23b24:	ebffe368 	bl	1c8cc <CInterruptSystem::DisconnectIRQ(unsigned int)>
   23b28:	e1a00009 	mov	r0, r9
   23b2c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   23b30:	e59f0018 	ldr	r0, [pc, #24]	; 23b50 <CGPIOManager::~CGPIOManager()+0x88>
   23b34:	e3a02032 	mov	r2, #50	; 0x32
   23b38:	e59f1008 	ldr	r1, [pc, #8]	; 23b48 <CGPIOManager::~CGPIOManager()+0x80>
   23b3c:	ebffdbcd 	bl	1aa78 <assertion_failed>
   23b40:	e5990000 	ldr	r0, [r9]
   23b44:	eafffff5 	b	23b20 <CGPIOManager::~CGPIOManager()+0x58>
   23b48:	0002acb4 	.word	0x0002acb4
   23b4c:	0002acc4 	.word	0x0002acc4
   23b50:	0002acd8 	.word	0x0002acd8

00023b54 <CGPIOManager::Initialize()>:
   23b54:	e5d03004 	ldrb	r3, [r0, #4]
   23b58:	e92d4010 	push	{r4, lr}
   23b5c:	e3530000 	cmp	r3, #0
   23b60:	e1a04000 	mov	r4, r0
   23b64:	1a000009 	bne	23b90 <CGPIOManager::Initialize()+0x3c>
   23b68:	e5940000 	ldr	r0, [r4]
   23b6c:	e3500000 	cmp	r0, #0
   23b70:	0a00000d 	beq	23bac <CGPIOManager::Initialize()+0x58>
   23b74:	e1a03004 	mov	r3, r4
   23b78:	e59f2044 	ldr	r2, [pc, #68]	; 23bc4 <CGPIOManager::Initialize()+0x70>
   23b7c:	e3a01034 	mov	r1, #52	; 0x34
   23b80:	ebffe316 	bl	1c7e0 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   23b84:	e3a00001 	mov	r0, #1
   23b88:	e5c40004 	strb	r0, [r4, #4]
   23b8c:	e8bd8010 	pop	{r4, pc}
   23b90:	e59f0030 	ldr	r0, [pc, #48]	; 23bc8 <CGPIOManager::Initialize()+0x74>
   23b94:	e3a0203b 	mov	r2, #59	; 0x3b
   23b98:	e59f102c 	ldr	r1, [pc, #44]	; 23bcc <CGPIOManager::Initialize()+0x78>
   23b9c:	ebffdbb5 	bl	1aa78 <assertion_failed>
   23ba0:	e5940000 	ldr	r0, [r4]
   23ba4:	e3500000 	cmp	r0, #0
   23ba8:	1afffff1 	bne	23b74 <CGPIOManager::Initialize()+0x20>
   23bac:	e59f001c 	ldr	r0, [pc, #28]	; 23bd0 <CGPIOManager::Initialize()+0x7c>
   23bb0:	e3a0203c 	mov	r2, #60	; 0x3c
   23bb4:	e59f1010 	ldr	r1, [pc, #16]	; 23bcc <CGPIOManager::Initialize()+0x78>
   23bb8:	ebffdbae 	bl	1aa78 <assertion_failed>
   23bbc:	e5940000 	ldr	r0, [r4]
   23bc0:	eaffffeb 	b	23b74 <CGPIOManager::Initialize()+0x20>
   23bc4:	00023de4 	.word	0x00023de4
   23bc8:	0002acec 	.word	0x0002acec
   23bcc:	0002acb4 	.word	0x0002acb4
   23bd0:	0002acd8 	.word	0x0002acd8

00023bd4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>:
   23bd4:	e5d03004 	ldrb	r3, [r0, #4]
   23bd8:	e92d4070 	push	{r4, r5, r6, lr}
   23bdc:	e3530000 	cmp	r3, #0
   23be0:	e1a04000 	mov	r4, r0
   23be4:	e1a05001 	mov	r5, r1
   23be8:	0a00000e 	beq	23c28 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x54>
   23bec:	e3550000 	cmp	r5, #0
   23bf0:	0a000016 	beq	23c50 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x7c>
   23bf4:	e5956004 	ldr	r6, [r5, #4]
   23bf8:	e3560035 	cmp	r6, #53	; 0x35
   23bfc:	8a00000e 	bhi	23c3c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x68>
   23c00:	e0844106 	add	r4, r4, r6, lsl #2
   23c04:	e5943008 	ldr	r3, [r4, #8]
   23c08:	e3530000 	cmp	r3, #0
   23c0c:	0a000003 	beq	23c20 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x4c>
   23c10:	e3a0204b 	mov	r2, #75	; 0x4b
   23c14:	e59f1048 	ldr	r1, [pc, #72]	; 23c64 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x90>
   23c18:	e59f0048 	ldr	r0, [pc, #72]	; 23c68 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x94>
   23c1c:	ebffdb95 	bl	1aa78 <assertion_failed>
   23c20:	e5845008 	str	r5, [r4, #8]
   23c24:	e8bd8070 	pop	{r4, r5, r6, pc}
   23c28:	e3a02045 	mov	r2, #69	; 0x45
   23c2c:	e59f1030 	ldr	r1, [pc, #48]	; 23c64 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x90>
   23c30:	e59f0034 	ldr	r0, [pc, #52]	; 23c6c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x98>
   23c34:	ebffdb8f 	bl	1aa78 <assertion_failed>
   23c38:	eaffffeb 	b	23bec <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x18>
   23c3c:	e3a02049 	mov	r2, #73	; 0x49
   23c40:	e59f101c 	ldr	r1, [pc, #28]	; 23c64 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x90>
   23c44:	e59f0024 	ldr	r0, [pc, #36]	; 23c70 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x9c>
   23c48:	ebffdb8a 	bl	1aa78 <assertion_failed>
   23c4c:	eaffffeb 	b	23c00 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x2c>
   23c50:	e3a02047 	mov	r2, #71	; 0x47
   23c54:	e59f1008 	ldr	r1, [pc, #8]	; 23c64 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x90>
   23c58:	e59f0014 	ldr	r0, [pc, #20]	; 23c74 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0xa0>
   23c5c:	ebffdb85 	bl	1aa78 <assertion_failed>
   23c60:	eaffffe3 	b	23bf4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x20>
   23c64:	0002acb4 	.word	0x0002acb4
   23c68:	0002acc4 	.word	0x0002acc4
   23c6c:	0002ad00 	.word	0x0002ad00
   23c70:	00029458 	.word	0x00029458
   23c74:	0002ad10 	.word	0x0002ad10

00023c78 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>:
   23c78:	e5d03004 	ldrb	r3, [r0, #4]
   23c7c:	e92d4070 	push	{r4, r5, r6, lr}
   23c80:	e3530000 	cmp	r3, #0
   23c84:	e1a04000 	mov	r4, r0
   23c88:	e1a05001 	mov	r5, r1
   23c8c:	0a00000b 	beq	23cc0 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x48>
   23c90:	e3550000 	cmp	r5, #0
   23c94:	0a00001b 	beq	23d08 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x90>
   23c98:	e5955004 	ldr	r5, [r5, #4]
   23c9c:	e3550035 	cmp	r5, #53	; 0x35
   23ca0:	8a00000b 	bhi	23cd4 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x5c>
   23ca4:	e0844105 	add	r4, r4, r5, lsl #2
   23ca8:	e5943008 	ldr	r3, [r4, #8]
   23cac:	e3530000 	cmp	r3, #0
   23cb0:	0a00000f 	beq	23cf4 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x7c>
   23cb4:	e3a03000 	mov	r3, #0
   23cb8:	e5843008 	str	r3, [r4, #8]
   23cbc:	e8bd8070 	pop	{r4, r5, r6, pc}
   23cc0:	e3a02052 	mov	r2, #82	; 0x52
   23cc4:	e59f1050 	ldr	r1, [pc, #80]	; 23d1c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xa4>
   23cc8:	e59f0050 	ldr	r0, [pc, #80]	; 23d20 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xa8>
   23ccc:	ebffdb69 	bl	1aa78 <assertion_failed>
   23cd0:	eaffffee 	b	23c90 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x18>
   23cd4:	e3a02056 	mov	r2, #86	; 0x56
   23cd8:	e59f103c 	ldr	r1, [pc, #60]	; 23d1c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xa4>
   23cdc:	e59f0040 	ldr	r0, [pc, #64]	; 23d24 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xac>
   23ce0:	e0844105 	add	r4, r4, r5, lsl #2
   23ce4:	ebffdb63 	bl	1aa78 <assertion_failed>
   23ce8:	e5943008 	ldr	r3, [r4, #8]
   23cec:	e3530000 	cmp	r3, #0
   23cf0:	1affffef 	bne	23cb4 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x3c>
   23cf4:	e3a02058 	mov	r2, #88	; 0x58
   23cf8:	e59f101c 	ldr	r1, [pc, #28]	; 23d1c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xa4>
   23cfc:	e59f0024 	ldr	r0, [pc, #36]	; 23d28 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xb0>
   23d00:	ebffdb5c 	bl	1aa78 <assertion_failed>
   23d04:	eaffffea 	b	23cb4 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x3c>
   23d08:	e3a02054 	mov	r2, #84	; 0x54
   23d0c:	e59f1008 	ldr	r1, [pc, #8]	; 23d1c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xa4>
   23d10:	e59f0014 	ldr	r0, [pc, #20]	; 23d2c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xb4>
   23d14:	ebffdb57 	bl	1aa78 <assertion_failed>
   23d18:	eaffffde 	b	23c98 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x20>
   23d1c:	0002acb4 	.word	0x0002acb4
   23d20:	0002ad00 	.word	0x0002ad00
   23d24:	00029458 	.word	0x00029458
   23d28:	0002ad1c 	.word	0x0002ad1c
   23d2c:	0002ad10 	.word	0x0002ad10

00023d30 <CGPIOManager::InterruptHandler()>:
   23d30:	e5d03004 	ldrb	r3, [r0, #4]
   23d34:	e92d4070 	push	{r4, r5, r6, lr}
   23d38:	e3530000 	cmp	r3, #0
   23d3c:	e1a05000 	mov	r5, r0
   23d40:	0a00001b 	beq	23db4 <CGPIOManager::InterruptHandler()+0x84>
   23d44:	e3a04000 	mov	r4, #0
   23d48:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   23d4c:	e59f2080 	ldr	r2, [pc, #128]	; 23dd4 <CGPIOManager::InterruptHandler()+0xa4>
   23d50:	e5923040 	ldr	r3, [r2, #64]	; 0x40
   23d54:	ea000005 	b	23d70 <CGPIOManager::InterruptHandler()+0x40>
   23d58:	e2844001 	add	r4, r4, #1
   23d5c:	e314001f 	tst	r4, #31
   23d60:	11a030a3 	lsrne	r3, r3, #1
   23d64:	05923044 	ldreq	r3, [r2, #68]	; 0x44
   23d68:	e3540036 	cmp	r4, #54	; 0x36
   23d6c:	0a00000d 	beq	23da8 <CGPIOManager::InterruptHandler()+0x78>
   23d70:	e3130001 	tst	r3, #1
   23d74:	0afffff7 	beq	23d58 <CGPIOManager::InterruptHandler()+0x28>
   23d78:	e3a03001 	mov	r3, #1
   23d7c:	e2842002 	add	r2, r4, #2
   23d80:	e7950102 	ldr	r0, [r5, r2, lsl #2]
   23d84:	e204501f 	and	r5, r4, #31
   23d88:	e3500000 	cmp	r0, #0
   23d8c:	e1a05513 	lsl	r5, r3, r5
   23d90:	0a00000c 	beq	23dc8 <CGPIOManager::InterruptHandler()+0x98>
   23d94:	ebffe1c3 	bl	1c4a8 <CGPIOPin::InterruptHandler()>
   23d98:	e59f3038 	ldr	r3, [pc, #56]	; 23dd8 <CGPIOManager::InterruptHandler()+0xa8>
   23d9c:	e08342a4 	add	r4, r3, r4, lsr #5
   23da0:	e1a04104 	lsl	r4, r4, #2
   23da4:	e5845000 	str	r5, [r4]
   23da8:	e3a03000 	mov	r3, #0
   23dac:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   23db0:	e8bd8070 	pop	{r4, r5, r6, pc}
   23db4:	e3a0205e 	mov	r2, #94	; 0x5e
   23db8:	e59f101c 	ldr	r1, [pc, #28]	; 23ddc <CGPIOManager::InterruptHandler()+0xac>
   23dbc:	e59f001c 	ldr	r0, [pc, #28]	; 23de0 <CGPIOManager::InterruptHandler()+0xb0>
   23dc0:	ebffdb2c 	bl	1aa78 <assertion_failed>
   23dc4:	eaffffde 	b	23d44 <CGPIOManager::InterruptHandler()+0x14>
   23dc8:	e1a00004 	mov	r0, r4
   23dcc:	ebffe1e2 	bl	1c55c <CGPIOPin::DisableAllInterrupts(unsigned int)>
   23dd0:	eafffff0 	b	23d98 <CGPIOManager::InterruptHandler()+0x68>
   23dd4:	20200000 	.word	0x20200000
   23dd8:	08080010 	.word	0x08080010
   23ddc:	0002acb4 	.word	0x0002acb4
   23de0:	0002ad00 	.word	0x0002ad00

00023de4 <CGPIOManager::InterruptStub(void*)>:
   23de4:	e92d4010 	push	{r4, lr}
   23de8:	e2504000 	subs	r4, r0, #0
   23dec:	0a000002 	beq	23dfc <CGPIOManager::InterruptStub(void*)+0x18>
   23df0:	e1a00004 	mov	r0, r4
   23df4:	e8bd4010 	pop	{r4, lr}
   23df8:	eaffffcc 	b	23d30 <CGPIOManager::InterruptHandler()>
   23dfc:	e59f0014 	ldr	r0, [pc, #20]	; 23e18 <CGPIOManager::InterruptStub(void*)+0x34>
   23e00:	e3a0208a 	mov	r2, #138	; 0x8a
   23e04:	e59f1010 	ldr	r1, [pc, #16]	; 23e1c <CGPIOManager::InterruptStub(void*)+0x38>
   23e08:	ebffdb1a 	bl	1aa78 <assertion_failed>
   23e0c:	e1a00004 	mov	r0, r4
   23e10:	e8bd4010 	pop	{r4, lr}
   23e14:	eaffffc5 	b	23d30 <CGPIOManager::InterruptHandler()>
   23e18:	00024820 	.word	0x00024820
   23e1c:	0002acb4 	.word	0x0002acb4

00023e20 <CPtrList::CPtrList()>:
   23e20:	e3a02000 	mov	r2, #0
   23e24:	e5802000 	str	r2, [r0]
   23e28:	e12fff1e 	bx	lr

00023e2c <CPtrList::~CPtrList()>:
   23e2c:	e5903000 	ldr	r3, [r0]
   23e30:	e92d4010 	push	{r4, lr}
   23e34:	e3530000 	cmp	r3, #0
   23e38:	e1a04000 	mov	r4, r0
   23e3c:	0a000003 	beq	23e50 <CPtrList::~CPtrList()+0x24>
   23e40:	e3a0202a 	mov	r2, #42	; 0x2a
   23e44:	e59f100c 	ldr	r1, [pc, #12]	; 23e58 <CPtrList::~CPtrList()+0x2c>
   23e48:	e59f000c 	ldr	r0, [pc, #12]	; 23e5c <CPtrList::~CPtrList()+0x30>
   23e4c:	ebffdb09 	bl	1aa78 <assertion_failed>
   23e50:	e1a00004 	mov	r0, r4
   23e54:	e8bd8010 	pop	{r4, pc}
   23e58:	0002ad30 	.word	0x0002ad30
   23e5c:	0002ad3c 	.word	0x0002ad3c

00023e60 <CPtrList::GetFirst()>:
   23e60:	e5900000 	ldr	r0, [r0]
   23e64:	e12fff1e 	bx	lr

00023e68 <CPtrList::GetNext(TPtrListElement*)>:
   23e68:	e92d4010 	push	{r4, lr}
   23e6c:	e2514000 	subs	r4, r1, #0
   23e70:	0a000009 	beq	23e9c <CPtrList::GetNext(TPtrListElement*)+0x34>
   23e74:	e59f3034 	ldr	r3, [pc, #52]	; 23eb0 <CPtrList::GetNext(TPtrListElement*)+0x48>
   23e78:	e5942000 	ldr	r2, [r4]
   23e7c:	e1520003 	cmp	r2, r3
   23e80:	0a000003 	beq	23e94 <CPtrList::GetNext(TPtrListElement*)+0x2c>
   23e84:	e3a02035 	mov	r2, #53	; 0x35
   23e88:	e59f1024 	ldr	r1, [pc, #36]	; 23eb4 <CPtrList::GetNext(TPtrListElement*)+0x4c>
   23e8c:	e59f0024 	ldr	r0, [pc, #36]	; 23eb8 <CPtrList::GetNext(TPtrListElement*)+0x50>
   23e90:	ebffdaf8 	bl	1aa78 <assertion_failed>
   23e94:	e5940008 	ldr	r0, [r4, #8]
   23e98:	e8bd8010 	pop	{r4, pc}
   23e9c:	e3a02034 	mov	r2, #52	; 0x34
   23ea0:	e59f100c 	ldr	r1, [pc, #12]	; 23eb4 <CPtrList::GetNext(TPtrListElement*)+0x4c>
   23ea4:	e59f0010 	ldr	r0, [pc, #16]	; 23ebc <CPtrList::GetNext(TPtrListElement*)+0x54>
   23ea8:	ebffdaf2 	bl	1aa78 <assertion_failed>
   23eac:	eafffff0 	b	23e74 <CPtrList::GetNext(TPtrListElement*)+0xc>
   23eb0:	504c4d43 	.word	0x504c4d43
   23eb4:	0002ad30 	.word	0x0002ad30
   23eb8:	0002ad5c 	.word	0x0002ad5c
   23ebc:	0002ad4c 	.word	0x0002ad4c

00023ec0 <CPtrList::GetPtr(TPtrListElement*)>:
   23ec0:	e92d4010 	push	{r4, lr}
   23ec4:	e2514000 	subs	r4, r1, #0
   23ec8:	0a000009 	beq	23ef4 <CPtrList::GetPtr(TPtrListElement*)+0x34>
   23ecc:	e59f3034 	ldr	r3, [pc, #52]	; 23f08 <CPtrList::GetPtr(TPtrListElement*)+0x48>
   23ed0:	e5942000 	ldr	r2, [r4]
   23ed4:	e1520003 	cmp	r2, r3
   23ed8:	0a000003 	beq	23eec <CPtrList::GetPtr(TPtrListElement*)+0x2c>
   23edc:	e3a0203d 	mov	r2, #61	; 0x3d
   23ee0:	e59f1024 	ldr	r1, [pc, #36]	; 23f0c <CPtrList::GetPtr(TPtrListElement*)+0x4c>
   23ee4:	e59f0024 	ldr	r0, [pc, #36]	; 23f10 <CPtrList::GetPtr(TPtrListElement*)+0x50>
   23ee8:	ebffdae2 	bl	1aa78 <assertion_failed>
   23eec:	e594000c 	ldr	r0, [r4, #12]
   23ef0:	e8bd8010 	pop	{r4, pc}
   23ef4:	e3a0203c 	mov	r2, #60	; 0x3c
   23ef8:	e59f100c 	ldr	r1, [pc, #12]	; 23f0c <CPtrList::GetPtr(TPtrListElement*)+0x4c>
   23efc:	e59f0010 	ldr	r0, [pc, #16]	; 23f14 <CPtrList::GetPtr(TPtrListElement*)+0x54>
   23f00:	ebffdadc 	bl	1aa78 <assertion_failed>
   23f04:	eafffff0 	b	23ecc <CPtrList::GetPtr(TPtrListElement*)+0xc>
   23f08:	504c4d43 	.word	0x504c4d43
   23f0c:	0002ad30 	.word	0x0002ad30
   23f10:	0002ad5c 	.word	0x0002ad5c
   23f14:	0002ad4c 	.word	0x0002ad4c

00023f18 <CPtrList::InsertBefore(TPtrListElement*, void*)>:
   23f18:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   23f1c:	e1a06000 	mov	r6, r0
   23f20:	e3a00010 	mov	r0, #16
   23f24:	e1a07002 	mov	r7, r2
   23f28:	e1a04001 	mov	r4, r1
   23f2c:	ebfffb96 	bl	22d8c <operator new(unsigned int)>
   23f30:	e5962000 	ldr	r2, [r6]
   23f34:	e59f30c8 	ldr	r3, [pc, #200]	; 24004 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xec>
   23f38:	e3520000 	cmp	r2, #0
   23f3c:	e1a05000 	mov	r5, r0
   23f40:	e580700c 	str	r7, [r0, #12]
   23f44:	e5803000 	str	r3, [r0]
   23f48:	0a000023 	beq	23fdc <CPtrList::InsertBefore(TPtrListElement*, void*)+0xc4>
   23f4c:	e3540000 	cmp	r4, #0
   23f50:	0a000026 	beq	23ff0 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd8>
   23f54:	e59f30a8 	ldr	r3, [pc, #168]	; 24004 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xec>
   23f58:	e5942000 	ldr	r2, [r4]
   23f5c:	e1520003 	cmp	r2, r3
   23f60:	0a000003 	beq	23f74 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x5c>
   23f64:	e3a0204e 	mov	r2, #78	; 0x4e
   23f68:	e59f1098 	ldr	r1, [pc, #152]	; 24008 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf0>
   23f6c:	e59f0098 	ldr	r0, [pc, #152]	; 2400c <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf4>
   23f70:	ebffdac0 	bl	1aa78 <assertion_failed>
   23f74:	e5963000 	ldr	r3, [r6]
   23f78:	e1540003 	cmp	r4, r3
   23f7c:	0a000010 	beq	23fc4 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xac>
   23f80:	e5943004 	ldr	r3, [r4, #4]
   23f84:	e5854008 	str	r4, [r5, #8]
   23f88:	e3530000 	cmp	r3, #0
   23f8c:	e5853004 	str	r3, [r5, #4]
   23f90:	0a000009 	beq	23fbc <CPtrList::InsertBefore(TPtrListElement*, void*)+0xa4>
   23f94:	e59f2068 	ldr	r2, [pc, #104]	; 24004 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xec>
   23f98:	e5931000 	ldr	r1, [r3]
   23f9c:	e1510002 	cmp	r1, r2
   23fa0:	0a000004 	beq	23fb8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xa0>
   23fa4:	e3a02060 	mov	r2, #96	; 0x60
   23fa8:	e59f1058 	ldr	r1, [pc, #88]	; 24008 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf0>
   23fac:	e59f005c 	ldr	r0, [pc, #92]	; 24010 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf8>
   23fb0:	ebffdab0 	bl	1aa78 <assertion_failed>
   23fb4:	e5943004 	ldr	r3, [r4, #4]
   23fb8:	e5835008 	str	r5, [r3, #8]
   23fbc:	e5845004 	str	r5, [r4, #4]
   23fc0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   23fc4:	e3a03000 	mov	r3, #0
   23fc8:	e5845004 	str	r5, [r4, #4]
   23fcc:	e5854008 	str	r4, [r5, #8]
   23fd0:	e5865000 	str	r5, [r6]
   23fd4:	e5853004 	str	r3, [r5, #4]
   23fd8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   23fdc:	e3a0204c 	mov	r2, #76	; 0x4c
   23fe0:	e59f1020 	ldr	r1, [pc, #32]	; 24008 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf0>
   23fe4:	e59f0028 	ldr	r0, [pc, #40]	; 24014 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xfc>
   23fe8:	ebffdaa2 	bl	1aa78 <assertion_failed>
   23fec:	eaffffd6 	b	23f4c <CPtrList::InsertBefore(TPtrListElement*, void*)+0x34>
   23ff0:	e3a0204d 	mov	r2, #77	; 0x4d
   23ff4:	e59f100c 	ldr	r1, [pc, #12]	; 24008 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf0>
   23ff8:	e59f0018 	ldr	r0, [pc, #24]	; 24018 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x100>
   23ffc:	ebffda9d 	bl	1aa78 <assertion_failed>
   24000:	eaffffd3 	b	23f54 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x3c>
   24004:	504c4d43 	.word	0x504c4d43
   24008:	0002ad30 	.word	0x0002ad30
   2400c:	0002ad9c 	.word	0x0002ad9c
   24010:	0002adc0 	.word	0x0002adc0
   24014:	0002ad80 	.word	0x0002ad80
   24018:	0002ad90 	.word	0x0002ad90

0002401c <CPtrList::InsertAfter(TPtrListElement*, void*)>:
   2401c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   24020:	e1a06000 	mov	r6, r0
   24024:	e1a05001 	mov	r5, r1
   24028:	e3a00010 	mov	r0, #16
   2402c:	e1a07002 	mov	r7, r2
   24030:	ebfffb55 	bl	22d8c <operator new(unsigned int)>
   24034:	e59f30c0 	ldr	r3, [pc, #192]	; 240fc <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe0>
   24038:	e3550000 	cmp	r5, #0
   2403c:	e5803000 	str	r3, [r0]
   24040:	e1a04000 	mov	r4, r0
   24044:	e580700c 	str	r7, [r0, #12]
   24048:	e5963000 	ldr	r3, [r6]
   2404c:	0a00001a 	beq	240bc <CPtrList::InsertAfter(TPtrListElement*, void*)+0xa0>
   24050:	e3530000 	cmp	r3, #0
   24054:	0a000023 	beq	240e8 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xcc>
   24058:	e59f309c 	ldr	r3, [pc, #156]	; 240fc <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe0>
   2405c:	e5952000 	ldr	r2, [r5]
   24060:	e1520003 	cmp	r2, r3
   24064:	0a000003 	beq	24078 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x5c>
   24068:	e3a0207e 	mov	r2, #126	; 0x7e
   2406c:	e59f108c 	ldr	r1, [pc, #140]	; 24100 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe4>
   24070:	e59f008c 	ldr	r0, [pc, #140]	; 24104 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe8>
   24074:	ebffda7f 	bl	1aa78 <assertion_failed>
   24078:	e5953008 	ldr	r3, [r5, #8]
   2407c:	e5845004 	str	r5, [r4, #4]
   24080:	e3530000 	cmp	r3, #0
   24084:	e5843008 	str	r3, [r4, #8]
   24088:	0a000009 	beq	240b4 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x98>
   2408c:	e59f2068 	ldr	r2, [pc, #104]	; 240fc <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe0>
   24090:	e5931000 	ldr	r1, [r3]
   24094:	e1510002 	cmp	r1, r2
   24098:	0a000004 	beq	240b0 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x94>
   2409c:	e3a02085 	mov	r2, #133	; 0x85
   240a0:	e59f1058 	ldr	r1, [pc, #88]	; 24100 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe4>
   240a4:	e59f005c 	ldr	r0, [pc, #92]	; 24108 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xec>
   240a8:	ebffda72 	bl	1aa78 <assertion_failed>
   240ac:	e5953008 	ldr	r3, [r5, #8]
   240b0:	e5834004 	str	r4, [r3, #4]
   240b4:	e5854008 	str	r4, [r5, #8]
   240b8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   240bc:	e3530000 	cmp	r3, #0
   240c0:	0a000003 	beq	240d4 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xb8>
   240c4:	e3a02074 	mov	r2, #116	; 0x74
   240c8:	e59f1030 	ldr	r1, [pc, #48]	; 24100 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe4>
   240cc:	e59f0038 	ldr	r0, [pc, #56]	; 2410c <CPtrList::InsertAfter(TPtrListElement*, void*)+0xf0>
   240d0:	ebffda68 	bl	1aa78 <assertion_failed>
   240d4:	e3a03000 	mov	r3, #0
   240d8:	e5864000 	str	r4, [r6]
   240dc:	e5843004 	str	r3, [r4, #4]
   240e0:	e5843008 	str	r3, [r4, #8]
   240e4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   240e8:	e3a0207d 	mov	r2, #125	; 0x7d
   240ec:	e59f100c 	ldr	r1, [pc, #12]	; 24100 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe4>
   240f0:	e59f0018 	ldr	r0, [pc, #24]	; 24110 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xf4>
   240f4:	ebffda5f 	bl	1aa78 <assertion_failed>
   240f8:	eaffffd6 	b	24058 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x3c>
   240fc:	504c4d43 	.word	0x504c4d43
   24100:	0002ad30 	.word	0x0002ad30
   24104:	0002ade8 	.word	0x0002ade8
   24108:	0002ae0c 	.word	0x0002ae0c
   2410c:	0002ad3c 	.word	0x0002ad3c
   24110:	0002ad80 	.word	0x0002ad80

00024114 <CPtrList::Remove(TPtrListElement*)>:
   24114:	e92d4070 	push	{r4, r5, r6, lr}
   24118:	e2514000 	subs	r4, r1, #0
   2411c:	e1a05000 	mov	r5, r0
   24120:	0a00003c 	beq	24218 <CPtrList::Remove(TPtrListElement*)+0x104>
   24124:	e59f3118 	ldr	r3, [pc, #280]	; 24244 <CPtrList::Remove(TPtrListElement*)+0x130>
   24128:	e5942000 	ldr	r2, [r4]
   2412c:	e1520003 	cmp	r2, r3
   24130:	0a000003 	beq	24144 <CPtrList::Remove(TPtrListElement*)+0x30>
   24134:	e3a02090 	mov	r2, #144	; 0x90
   24138:	e59f1108 	ldr	r1, [pc, #264]	; 24248 <CPtrList::Remove(TPtrListElement*)+0x134>
   2413c:	e59f0108 	ldr	r0, [pc, #264]	; 2424c <CPtrList::Remove(TPtrListElement*)+0x138>
   24140:	ebffda4c 	bl	1aa78 <assertion_failed>
   24144:	e5953000 	ldr	r3, [r5]
   24148:	e1540003 	cmp	r4, r3
   2414c:	0a000021 	beq	241d8 <CPtrList::Remove(TPtrListElement*)+0xc4>
   24150:	e5943004 	ldr	r3, [r4, #4]
   24154:	e3530000 	cmp	r3, #0
   24158:	0a000033 	beq	2422c <CPtrList::Remove(TPtrListElement*)+0x118>
   2415c:	e59f20e0 	ldr	r2, [pc, #224]	; 24244 <CPtrList::Remove(TPtrListElement*)+0x130>
   24160:	e5931000 	ldr	r1, [r3]
   24164:	e1510002 	cmp	r1, r2
   24168:	0a000004 	beq	24180 <CPtrList::Remove(TPtrListElement*)+0x6c>
   2416c:	e3a0209f 	mov	r2, #159	; 0x9f
   24170:	e59f10d0 	ldr	r1, [pc, #208]	; 24248 <CPtrList::Remove(TPtrListElement*)+0x134>
   24174:	e59f00d4 	ldr	r0, [pc, #212]	; 24250 <CPtrList::Remove(TPtrListElement*)+0x13c>
   24178:	ebffda3e 	bl	1aa78 <assertion_failed>
   2417c:	e5943004 	ldr	r3, [r4, #4]
   24180:	e5942008 	ldr	r2, [r4, #8]
   24184:	e5832008 	str	r2, [r3, #8]
   24188:	e5942008 	ldr	r2, [r4, #8]
   2418c:	e3520000 	cmp	r2, #0
   24190:	0a00000a 	beq	241c0 <CPtrList::Remove(TPtrListElement*)+0xac>
   24194:	e59f10a8 	ldr	r1, [pc, #168]	; 24244 <CPtrList::Remove(TPtrListElement*)+0x130>
   24198:	e5920000 	ldr	r0, [r2]
   2419c:	e1500001 	cmp	r0, r1
   241a0:	0a000005 	beq	241bc <CPtrList::Remove(TPtrListElement*)+0xa8>
   241a4:	e3a020a4 	mov	r2, #164	; 0xa4
   241a8:	e59f1098 	ldr	r1, [pc, #152]	; 24248 <CPtrList::Remove(TPtrListElement*)+0x134>
   241ac:	e59f00a0 	ldr	r0, [pc, #160]	; 24254 <CPtrList::Remove(TPtrListElement*)+0x140>
   241b0:	ebffda30 	bl	1aa78 <assertion_failed>
   241b4:	e5942008 	ldr	r2, [r4, #8]
   241b8:	e5943004 	ldr	r3, [r4, #4]
   241bc:	e5823004 	str	r3, [r2, #4]
   241c0:	e3a03000 	mov	r3, #0
   241c4:	e1a00004 	mov	r0, r4
   241c8:	e5843000 	str	r3, [r4]
   241cc:	e3a01010 	mov	r1, #16
   241d0:	e8bd4070 	pop	{r4, r5, r6, lr}
   241d4:	eafffaf0 	b	22d9c <operator delete(void*, unsigned int)>
   241d8:	e5943008 	ldr	r3, [r4, #8]
   241dc:	e3530000 	cmp	r3, #0
   241e0:	e5853000 	str	r3, [r5]
   241e4:	0afffff5 	beq	241c0 <CPtrList::Remove(TPtrListElement*)+0xac>
   241e8:	e59f2054 	ldr	r2, [pc, #84]	; 24244 <CPtrList::Remove(TPtrListElement*)+0x130>
   241ec:	e5931000 	ldr	r1, [r3]
   241f0:	e1510002 	cmp	r1, r2
   241f4:	0a000004 	beq	2420c <CPtrList::Remove(TPtrListElement*)+0xf8>
   241f8:	e3a02098 	mov	r2, #152	; 0x98
   241fc:	e59f1044 	ldr	r1, [pc, #68]	; 24248 <CPtrList::Remove(TPtrListElement*)+0x134>
   24200:	e59f004c 	ldr	r0, [pc, #76]	; 24254 <CPtrList::Remove(TPtrListElement*)+0x140>
   24204:	ebffda1b 	bl	1aa78 <assertion_failed>
   24208:	e5943008 	ldr	r3, [r4, #8]
   2420c:	e3a02000 	mov	r2, #0
   24210:	e5832004 	str	r2, [r3, #4]
   24214:	eaffffe9 	b	241c0 <CPtrList::Remove(TPtrListElement*)+0xac>
   24218:	e3a0208f 	mov	r2, #143	; 0x8f
   2421c:	e59f1024 	ldr	r1, [pc, #36]	; 24248 <CPtrList::Remove(TPtrListElement*)+0x134>
   24220:	e59f0030 	ldr	r0, [pc, #48]	; 24258 <CPtrList::Remove(TPtrListElement*)+0x144>
   24224:	ebffda13 	bl	1aa78 <assertion_failed>
   24228:	eaffffbd 	b	24124 <CPtrList::Remove(TPtrListElement*)+0x10>
   2422c:	e3a0209e 	mov	r2, #158	; 0x9e
   24230:	e59f1010 	ldr	r1, [pc, #16]	; 24248 <CPtrList::Remove(TPtrListElement*)+0x134>
   24234:	e59f0020 	ldr	r0, [pc, #32]	; 2425c <CPtrList::Remove(TPtrListElement*)+0x148>
   24238:	ebffda0e 	bl	1aa78 <assertion_failed>
   2423c:	e5943004 	ldr	r3, [r4, #4]
   24240:	eaffffc5 	b	2415c <CPtrList::Remove(TPtrListElement*)+0x48>
   24244:	504c4d43 	.word	0x504c4d43
   24248:	0002ad30 	.word	0x0002ad30
   2424c:	0002ad5c 	.word	0x0002ad5c
   24250:	0002ae7c 	.word	0x0002ae7c
   24254:	0002ae38 	.word	0x0002ae38
   24258:	0002ad4c 	.word	0x0002ad4c
   2425c:	0002ae64 	.word	0x0002ae64

00024260 <CPtrList::Find(void*)>:
   24260:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   24264:	e5904000 	ldr	r4, [r0]
   24268:	e3540000 	cmp	r4, #0
   2426c:	0a000014 	beq	242c4 <CPtrList::Find(void*)+0x64>
   24270:	e1a05001 	mov	r5, r1
   24274:	e3a090b3 	mov	r9, #179	; 0xb3
   24278:	e59f6050 	ldr	r6, [pc, #80]	; 242d0 <CPtrList::Find(void*)+0x70>
   2427c:	e59f8050 	ldr	r8, [pc, #80]	; 242d4 <CPtrList::Find(void*)+0x74>
   24280:	e59f7050 	ldr	r7, [pc, #80]	; 242d8 <CPtrList::Find(void*)+0x78>
   24284:	ea000002 	b	24294 <CPtrList::Find(void*)+0x34>
   24288:	e5944008 	ldr	r4, [r4, #8]
   2428c:	e3540000 	cmp	r4, #0
   24290:	0a00000b 	beq	242c4 <CPtrList::Find(void*)+0x64>
   24294:	e5943000 	ldr	r3, [r4]
   24298:	e1530006 	cmp	r3, r6
   2429c:	0a000003 	beq	242b0 <CPtrList::Find(void*)+0x50>
   242a0:	e1a02009 	mov	r2, r9
   242a4:	e1a01008 	mov	r1, r8
   242a8:	e1a00007 	mov	r0, r7
   242ac:	ebffd9f1 	bl	1aa78 <assertion_failed>
   242b0:	e594300c 	ldr	r3, [r4, #12]
   242b4:	e1530005 	cmp	r3, r5
   242b8:	1afffff2 	bne	24288 <CPtrList::Find(void*)+0x28>
   242bc:	e1a00004 	mov	r0, r4
   242c0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   242c4:	e3a04000 	mov	r4, #0
   242c8:	e1a00004 	mov	r0, r4
   242cc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   242d0:	504c4d43 	.word	0x504c4d43
   242d4:	0002ad30 	.word	0x0002ad30
   242d8:	0002ad5c 	.word	0x0002ad5c

000242dc <__aeabi_uidiv>:
   242dc:	e2512001 	subs	r2, r1, #1
   242e0:	012fff1e 	bxeq	lr
   242e4:	3a000036 	bcc	243c4 <__aeabi_uidiv+0xe8>
   242e8:	e1500001 	cmp	r0, r1
   242ec:	9a000022 	bls	2437c <__aeabi_uidiv+0xa0>
   242f0:	e1110002 	tst	r1, r2
   242f4:	0a000023 	beq	24388 <__aeabi_uidiv+0xac>
   242f8:	e311020e 	tst	r1, #-536870912	; 0xe0000000
   242fc:	01a01181 	lsleq	r1, r1, #3
   24300:	03a03008 	moveq	r3, #8
   24304:	13a03001 	movne	r3, #1
   24308:	e3510201 	cmp	r1, #268435456	; 0x10000000
   2430c:	31510000 	cmpcc	r1, r0
   24310:	31a01201 	lslcc	r1, r1, #4
   24314:	31a03203 	lslcc	r3, r3, #4
   24318:	3afffffa 	bcc	24308 <__aeabi_uidiv+0x2c>
   2431c:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
   24320:	31510000 	cmpcc	r1, r0
   24324:	31a01081 	lslcc	r1, r1, #1
   24328:	31a03083 	lslcc	r3, r3, #1
   2432c:	3afffffa 	bcc	2431c <__aeabi_uidiv+0x40>
   24330:	e3a02000 	mov	r2, #0
   24334:	e1500001 	cmp	r0, r1
   24338:	20400001 	subcs	r0, r0, r1
   2433c:	21822003 	orrcs	r2, r2, r3
   24340:	e15000a1 	cmp	r0, r1, lsr #1
   24344:	204000a1 	subcs	r0, r0, r1, lsr #1
   24348:	218220a3 	orrcs	r2, r2, r3, lsr #1
   2434c:	e1500121 	cmp	r0, r1, lsr #2
   24350:	20400121 	subcs	r0, r0, r1, lsr #2
   24354:	21822123 	orrcs	r2, r2, r3, lsr #2
   24358:	e15001a1 	cmp	r0, r1, lsr #3
   2435c:	204001a1 	subcs	r0, r0, r1, lsr #3
   24360:	218221a3 	orrcs	r2, r2, r3, lsr #3
   24364:	e3500000 	cmp	r0, #0
   24368:	11b03223 	lsrsne	r3, r3, #4
   2436c:	11a01221 	lsrne	r1, r1, #4
   24370:	1affffef 	bne	24334 <__aeabi_uidiv+0x58>
   24374:	e1a00002 	mov	r0, r2
   24378:	e12fff1e 	bx	lr
   2437c:	03a00001 	moveq	r0, #1
   24380:	13a00000 	movne	r0, #0
   24384:	e12fff1e 	bx	lr
   24388:	e3510801 	cmp	r1, #65536	; 0x10000
   2438c:	21a01821 	lsrcs	r1, r1, #16
   24390:	23a02010 	movcs	r2, #16
   24394:	33a02000 	movcc	r2, #0
   24398:	e3510c01 	cmp	r1, #256	; 0x100
   2439c:	21a01421 	lsrcs	r1, r1, #8
   243a0:	22822008 	addcs	r2, r2, #8
   243a4:	e3510010 	cmp	r1, #16
   243a8:	21a01221 	lsrcs	r1, r1, #4
   243ac:	22822004 	addcs	r2, r2, #4
   243b0:	e3510004 	cmp	r1, #4
   243b4:	82822003 	addhi	r2, r2, #3
   243b8:	908220a1 	addls	r2, r2, r1, lsr #1
   243bc:	e1a00230 	lsr	r0, r0, r2
   243c0:	e12fff1e 	bx	lr
   243c4:	e3500000 	cmp	r0, #0
   243c8:	13e00000 	mvnne	r0, #0
   243cc:	ea000007 	b	243f0 <__aeabi_idiv0>

000243d0 <__aeabi_uidivmod>:
   243d0:	e3510000 	cmp	r1, #0
   243d4:	0afffffa 	beq	243c4 <__aeabi_uidiv+0xe8>
   243d8:	e92d4003 	push	{r0, r1, lr}
   243dc:	ebffffbe 	bl	242dc <__aeabi_uidiv>
   243e0:	e8bd4006 	pop	{r1, r2, lr}
   243e4:	e0030092 	mul	r3, r2, r0
   243e8:	e0411003 	sub	r1, r1, r3
   243ec:	e12fff1e 	bx	lr

000243f0 <__aeabi_idiv0>:
   243f0:	e12fff1e 	bx	lr
