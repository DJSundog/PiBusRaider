
kernel.elf:     file format elf32-littlearm


Disassembly of section .init:

00008000 <_start>:
    8000:	e10f0000 	mrs	r0, CPSR
    8004:	e220001a 	eor	r0, r0, #26
    8008:	e310001f 	tst	r0, #31
    800c:	e3c0001f 	bic	r0, r0, #31
    8010:	e38000d3 	orr	r0, r0, #211	; 0xd3
    8014:	1a000004 	bne	802c <_start+0x2c>
    8018:	e3800c01 	orr	r0, r0, #256	; 0x100
    801c:	e28fe00c 	add	lr, pc, #12
    8020:	e16ff000 	msr	SPSR_fsxc, r0
    8024:	e12ef30e 	.word	0xe12ef30e
    8028:	e160006e 	.word	0xe160006e
    802c:	e121f000 	msr	CPSR_c, r0
    8030:	e3a00000 	mov	r0, #0
    8034:	ee0c0f10 	mcr	15, 0, r0, cr12, cr0, {0}
    8038:	f1020011 	cps	#17
    803c:	e3a0d709 	mov	sp, #2359296	; 0x240000
    8040:	f1020012 	cps	#18
    8044:	e3a0d98e 	mov	sp, #2326528	; 0x238000
    8048:	f1020017 	cps	#23
    804c:	e3a0d823 	mov	sp, #2293760	; 0x230000
    8050:	f102001b 	cps	#27
    8054:	e3a0d823 	mov	sp, #2293760	; 0x230000
    8058:	f102001f 	cps	#31
    805c:	e3a0d98a 	mov	sp, #2260992	; 0x228000
    8060:	ea002022 	b	100f0 <sysinit>

Disassembly of section .text:

00008068 <main>:
    8068:	e92d4800 	push	{fp, lr}
    806c:	e28db004 	add	fp, sp, #4
    8070:	e24ddd7a 	sub	sp, sp, #7808	; 0x1e80
    8074:	e24b3d79 	sub	r3, fp, #7744	; 0x1e40
    8078:	e2433004 	sub	r3, r3, #4
    807c:	e243303c 	sub	r3, r3, #60	; 0x3c
    8080:	e1a00003 	mov	r0, r3
    8084:	eb000155 	bl	85e0 <CKernel::CKernel()>
    8088:	e24b3d79 	sub	r3, fp, #7744	; 0x1e40
    808c:	e2433004 	sub	r3, r3, #4
    8090:	e243303c 	sub	r3, r3, #60	; 0x3c
    8094:	e1a00003 	mov	r0, r3
    8098:	eb0001c2 	bl	87a8 <CKernel::Initialize()>
    809c:	e1a03000 	mov	r3, r0
    80a0:	e2233001 	eor	r3, r3, #1
    80a4:	e6ef3073 	uxtb	r3, r3
    80a8:	e3530000 	cmp	r3, #0
    80ac:	0a000000 	beq	80b4 <main+0x4c>
    80b0:	eb002000 	bl	100b8 <halt>
    80b4:	e24b3d79 	sub	r3, fp, #7744	; 0x1e40
    80b8:	e2433004 	sub	r3, r3, #4
    80bc:	e243303c 	sub	r3, r3, #60	; 0x3c
    80c0:	e1a00003 	mov	r0, r3
    80c4:	eb0001f5 	bl	88a0 <CKernel::Run()>
    80c8:	e1a03000 	mov	r3, r0
    80cc:	e54b3005 	strb	r3, [fp, #-5]
    80d0:	e55b3005 	ldrb	r3, [fp, #-5]
    80d4:	e3530002 	cmp	r3, #2
    80d8:	1a000000 	bne	80e0 <main+0x78>
    80dc:	eb001ff8 	bl	100c4 <reboot>
    80e0:	eb001ff4 	bl	100b8 <halt>

000080e4 <read32>:
    80e4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    80e8:	e28db000 	add	fp, sp, #0
    80ec:	e24dd00c 	sub	sp, sp, #12
    80f0:	e50b0008 	str	r0, [fp, #-8]
    80f4:	e51b3008 	ldr	r3, [fp, #-8]
    80f8:	e5933000 	ldr	r3, [r3]
    80fc:	e1a00003 	mov	r0, r3
    8100:	e28bd000 	add	sp, fp, #0
    8104:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    8108:	e12fff1e 	bx	lr

0000810c <write32>:
    810c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    8110:	e28db000 	add	fp, sp, #0
    8114:	e24dd00c 	sub	sp, sp, #12
    8118:	e50b0008 	str	r0, [fp, #-8]
    811c:	e50b100c 	str	r1, [fp, #-12]
    8120:	e51b3008 	ldr	r3, [fp, #-8]
    8124:	e51b200c 	ldr	r2, [fp, #-12]
    8128:	e5832000 	str	r2, [r3]
    812c:	e320f000 	nop	{0}
    8130:	e28bd000 	add	sp, fp, #0
    8134:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    8138:	e12fff1e 	bx	lr

0000813c <pinRawWrite(int, bool)>:
    813c:	e92d4800 	push	{fp, lr}
    8140:	e28db004 	add	fp, sp, #4
    8144:	e24dd008 	sub	sp, sp, #8
    8148:	e50b0008 	str	r0, [fp, #-8]
    814c:	e1a03001 	mov	r3, r1
    8150:	e54b3009 	strb	r3, [fp, #-9]
    8154:	e55b3009 	ldrb	r3, [fp, #-9]
    8158:	e3530000 	cmp	r3, #0
    815c:	0a000011 	beq	81a8 <pinRawWrite(int, bool)+0x6c>
    8160:	e51b3008 	ldr	r3, [fp, #-8]
    8164:	e353001f 	cmp	r3, #31
    8168:	ca000006 	bgt	8188 <pinRawWrite(int, bool)+0x4c>
    816c:	e3a02001 	mov	r2, #1
    8170:	e51b3008 	ldr	r3, [fp, #-8]
    8174:	e1a03312 	lsl	r3, r2, r3
    8178:	e1a01003 	mov	r1, r3
    817c:	e59f0074 	ldr	r0, [pc, #116]	; 81f8 <pinRawWrite(int, bool)+0xbc>
    8180:	ebffffe1 	bl	810c <write32>
    8184:	ea000018 	b	81ec <pinRawWrite(int, bool)+0xb0>
    8188:	e51b3008 	ldr	r3, [fp, #-8]
    818c:	e2433020 	sub	r3, r3, #32
    8190:	e3a02001 	mov	r2, #1
    8194:	e1a03312 	lsl	r3, r2, r3
    8198:	e1a01003 	mov	r1, r3
    819c:	e59f0058 	ldr	r0, [pc, #88]	; 81fc <pinRawWrite(int, bool)+0xc0>
    81a0:	ebffffd9 	bl	810c <write32>
    81a4:	ea000010 	b	81ec <pinRawWrite(int, bool)+0xb0>
    81a8:	e51b3008 	ldr	r3, [fp, #-8]
    81ac:	e353001f 	cmp	r3, #31
    81b0:	ca000006 	bgt	81d0 <pinRawWrite(int, bool)+0x94>
    81b4:	e3a02001 	mov	r2, #1
    81b8:	e51b3008 	ldr	r3, [fp, #-8]
    81bc:	e1a03312 	lsl	r3, r2, r3
    81c0:	e1a01003 	mov	r1, r3
    81c4:	e59f0034 	ldr	r0, [pc, #52]	; 8200 <pinRawWrite(int, bool)+0xc4>
    81c8:	ebffffcf 	bl	810c <write32>
    81cc:	ea000006 	b	81ec <pinRawWrite(int, bool)+0xb0>
    81d0:	e51b3008 	ldr	r3, [fp, #-8]
    81d4:	e2433020 	sub	r3, r3, #32
    81d8:	e3a02001 	mov	r2, #1
    81dc:	e1a03312 	lsl	r3, r2, r3
    81e0:	e1a01003 	mov	r1, r3
    81e4:	e59f0018 	ldr	r0, [pc, #24]	; 8204 <pinRawWrite(int, bool)+0xc8>
    81e8:	ebffffc7 	bl	810c <write32>
    81ec:	e320f000 	nop	{0}
    81f0:	e24bd004 	sub	sp, fp, #4
    81f4:	e8bd8800 	pop	{fp, pc}
    81f8:	2020001c 	.word	0x2020001c
    81fc:	20200020 	.word	0x20200020
    8200:	20200028 	.word	0x20200028
    8204:	2020002c 	.word	0x2020002c

00008208 <pinRawMode(int, bool, bool)>:
    8208:	e92d4800 	push	{fp, lr}
    820c:	e28db004 	add	fp, sp, #4
    8210:	e24dd018 	sub	sp, sp, #24
    8214:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    8218:	e1a03001 	mov	r3, r1
    821c:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
    8220:	e1a03002 	mov	r3, r2
    8224:	e54b301a 	strb	r3, [fp, #-26]	; 0xffffffe6
    8228:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
    822c:	e2233001 	eor	r3, r3, #1
    8230:	e6ef3073 	uxtb	r3, r3
    8234:	e3530000 	cmp	r3, #0
    8238:	0a000003 	beq	824c <pinRawMode(int, bool, bool)+0x44>
    823c:	e55b301a 	ldrb	r3, [fp, #-26]	; 0xffffffe6
    8240:	e1a01003 	mov	r1, r3
    8244:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
    8248:	ebffffbb 	bl	813c <pinRawWrite(int, bool)>
    824c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
    8250:	e59f2100 	ldr	r2, [pc, #256]	; 8358 <pinRawMode(int, bool, bool)+0x150>
    8254:	e0c21392 	smull	r1, r2, r2, r3
    8258:	e1a02142 	asr	r2, r2, #2
    825c:	e1a03fc3 	asr	r3, r3, #31
    8260:	e0423003 	sub	r3, r2, r3
    8264:	e2833302 	add	r3, r3, #134217728	; 0x8000000
    8268:	e2833702 	add	r3, r3, #524288	; 0x80000
    826c:	e1a03103 	lsl	r3, r3, #2
    8270:	e50b3008 	str	r3, [fp, #-8]
    8274:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
    8278:	e59f30d8 	ldr	r3, [pc, #216]	; 8358 <pinRawMode(int, bool, bool)+0x150>
    827c:	e0c31293 	smull	r1, r3, r3, r2
    8280:	e1a01143 	asr	r1, r3, #2
    8284:	e1a03fc2 	asr	r3, r2, #31
    8288:	e0411003 	sub	r1, r1, r3
    828c:	e1a03001 	mov	r3, r1
    8290:	e1a03103 	lsl	r3, r3, #2
    8294:	e0833001 	add	r3, r3, r1
    8298:	e1a03083 	lsl	r3, r3, #1
    829c:	e0421003 	sub	r1, r2, r3
    82a0:	e6ef3071 	uxtb	r3, r1
    82a4:	e1a02003 	mov	r2, r3
    82a8:	e1a02082 	lsl	r2, r2, #1
    82ac:	e0823003 	add	r3, r2, r3
    82b0:	e54b3009 	strb	r3, [fp, #-9]
    82b4:	e51b0008 	ldr	r0, [fp, #-8]
    82b8:	ebffff89 	bl	80e4 <read32>
    82bc:	e50b0010 	str	r0, [fp, #-16]
    82c0:	e55b3009 	ldrb	r3, [fp, #-9]
    82c4:	e3a02007 	mov	r2, #7
    82c8:	e1a03312 	lsl	r3, r2, r3
    82cc:	e1e03003 	mvn	r3, r3
    82d0:	e1a02003 	mov	r2, r3
    82d4:	e51b3010 	ldr	r3, [fp, #-16]
    82d8:	e0033002 	and	r3, r3, r2
    82dc:	e50b3010 	str	r3, [fp, #-16]
    82e0:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
    82e4:	e3530000 	cmp	r3, #0
    82e8:	0a000001 	beq	82f4 <pinRawMode(int, bool, bool)+0xec>
    82ec:	e3a03000 	mov	r3, #0
    82f0:	ea000000 	b	82f8 <pinRawMode(int, bool, bool)+0xf0>
    82f4:	e3a03001 	mov	r3, #1
    82f8:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    82fc:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
    8300:	e203200f 	and	r2, r3, #15
    8304:	e55b3009 	ldrb	r3, [fp, #-9]
    8308:	e1a03312 	lsl	r3, r2, r3
    830c:	e1a02003 	mov	r2, r3
    8310:	e51b3010 	ldr	r3, [fp, #-16]
    8314:	e1833002 	orr	r3, r3, r2
    8318:	e50b3010 	str	r3, [fp, #-16]
    831c:	e51b1010 	ldr	r1, [fp, #-16]
    8320:	e51b0008 	ldr	r0, [fp, #-8]
    8324:	ebffff78 	bl	810c <write32>
    8328:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
    832c:	e2233001 	eor	r3, r3, #1
    8330:	e6ef3073 	uxtb	r3, r3
    8334:	e3530000 	cmp	r3, #0
    8338:	0a000003 	beq	834c <pinRawMode(int, bool, bool)+0x144>
    833c:	e55b301a 	ldrb	r3, [fp, #-26]	; 0xffffffe6
    8340:	e1a01003 	mov	r1, r3
    8344:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
    8348:	ebffff7b 	bl	813c <pinRawWrite(int, bool)>
    834c:	e320f000 	nop	{0}
    8350:	e24bd004 	sub	sp, fp, #4
    8354:	e8bd8800 	pop	{fp, pc}
    8358:	66666667 	.word	0x66666667

0000835c <pinRawRead(int)>:
    835c:	e92d4800 	push	{fp, lr}
    8360:	e28db004 	add	fp, sp, #4
    8364:	e24dd008 	sub	sp, sp, #8
    8368:	e50b0008 	str	r0, [fp, #-8]
    836c:	e51b3008 	ldr	r3, [fp, #-8]
    8370:	e353001f 	cmp	r3, #31
    8374:	ca00000a 	bgt	83a4 <pinRawRead(int)+0x48>
    8378:	e59f005c 	ldr	r0, [pc, #92]	; 83dc <pinRawRead(int)+0x80>
    837c:	ebffff58 	bl	80e4 <read32>
    8380:	e1a02000 	mov	r2, r0
    8384:	e51b3008 	ldr	r3, [fp, #-8]
    8388:	e1a03332 	lsr	r3, r2, r3
    838c:	e2033001 	and	r3, r3, #1
    8390:	e3530000 	cmp	r3, #0
    8394:	13a03001 	movne	r3, #1
    8398:	03a03000 	moveq	r3, #0
    839c:	e6ef3073 	uxtb	r3, r3
    83a0:	ea00000a 	b	83d0 <pinRawRead(int)+0x74>
    83a4:	e59f0034 	ldr	r0, [pc, #52]	; 83e0 <pinRawRead(int)+0x84>
    83a8:	ebffff4d 	bl	80e4 <read32>
    83ac:	e1a02000 	mov	r2, r0
    83b0:	e51b3008 	ldr	r3, [fp, #-8]
    83b4:	e2433020 	sub	r3, r3, #32
    83b8:	e1a03332 	lsr	r3, r2, r3
    83bc:	e2033001 	and	r3, r3, #1
    83c0:	e3530000 	cmp	r3, #0
    83c4:	13a03001 	movne	r3, #1
    83c8:	03a03000 	moveq	r3, #0
    83cc:	e6ef3073 	uxtb	r3, r3
    83d0:	e1a00003 	mov	r0, r3
    83d4:	e24bd004 	sub	sp, fp, #4
    83d8:	e8bd8800 	pop	{fp, pc}
    83dc:	20200034 	.word	0x20200034
    83e0:	20200038 	.word	0x20200038

000083e4 <micros()>:
    83e4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    83e8:	e28db000 	add	fp, sp, #0
    83ec:	e59f3014 	ldr	r3, [pc, #20]	; 8408 <micros()+0x24>
    83f0:	e5933000 	ldr	r3, [r3]
    83f4:	e5933000 	ldr	r3, [r3]
    83f8:	e1a00003 	mov	r0, r3
    83fc:	e28bd000 	add	sp, fp, #0
    8400:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    8404:	e12fff1e 	bx	lr
    8408:	0001598c 	.word	0x0001598c

0000840c <CKernel::testTiming(int)>:
    840c:	e92d4800 	push	{fp, lr}
    8410:	e28db004 	add	fp, sp, #4
    8414:	e24dd020 	sub	sp, sp, #32
    8418:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
    841c:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
    8420:	e3a02000 	mov	r2, #0
    8424:	e3a01000 	mov	r1, #0
    8428:	e3a00007 	mov	r0, #7
    842c:	ebffff75 	bl	8208 <pinRawMode(int, bool, bool)>
    8430:	e3a02000 	mov	r2, #0
    8434:	e3a01000 	mov	r1, #0
    8438:	e3a00008 	mov	r0, #8
    843c:	ebffff71 	bl	8208 <pinRawMode(int, bool, bool)>
    8440:	ebffffe7 	bl	83e4 <micros()>
    8444:	e1a03000 	mov	r3, r0
    8448:	e50b3010 	str	r3, [fp, #-16]
    844c:	e51b3010 	ldr	r3, [fp, #-16]
    8450:	e50b300c 	str	r3, [fp, #-12]
    8454:	e3a03000 	mov	r3, #0
    8458:	e50b3008 	str	r3, [fp, #-8]
    845c:	e51b3010 	ldr	r3, [fp, #-16]
    8460:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    8464:	e51b3008 	ldr	r3, [fp, #-8]
    8468:	e3530000 	cmp	r3, #0
    846c:	13a03001 	movne	r3, #1
    8470:	03a03000 	moveq	r3, #0
    8474:	e6ef3073 	uxtb	r3, r3
    8478:	e1a01003 	mov	r1, r3
    847c:	e3a00007 	mov	r0, #7
    8480:	ebffff2d 	bl	813c <pinRawWrite(int, bool)>
    8484:	e51b3008 	ldr	r3, [fp, #-8]
    8488:	e3530000 	cmp	r3, #0
    848c:	03a03001 	moveq	r3, #1
    8490:	13a03000 	movne	r3, #0
    8494:	e6ef3073 	uxtb	r3, r3
    8498:	e50b3008 	str	r3, [fp, #-8]
    849c:	ebffffd0 	bl	83e4 <micros()>
    84a0:	e1a03000 	mov	r3, r0
    84a4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    84a8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
    84ac:	e51b3010 	ldr	r3, [fp, #-16]
    84b0:	e1520003 	cmp	r2, r3
    84b4:	83a03001 	movhi	r3, #1
    84b8:	93a03000 	movls	r3, #0
    84bc:	e6ef3073 	uxtb	r3, r3
    84c0:	e3530000 	cmp	r3, #0
    84c4:	0a000018 	beq	852c <CKernel::testTiming(int)+0x120>
    84c8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
    84cc:	e51b3010 	ldr	r3, [fp, #-16]
    84d0:	e0423003 	sub	r3, r2, r3
    84d4:	e3530005 	cmp	r3, #5
    84d8:	83a03001 	movhi	r3, #1
    84dc:	93a03000 	movls	r3, #0
    84e0:	e6ef3073 	uxtb	r3, r3
    84e4:	e3530000 	cmp	r3, #0
    84e8:	0a00000f 	beq	852c <CKernel::testTiming(int)+0x120>
    84ec:	e3a01001 	mov	r1, #1
    84f0:	e3a00008 	mov	r0, #8
    84f4:	ebffff10 	bl	813c <pinRawWrite(int, bool)>
    84f8:	e3a01001 	mov	r1, #1
    84fc:	e3a00008 	mov	r0, #8
    8500:	ebffff0d 	bl	813c <pinRawWrite(int, bool)>
    8504:	e3a0000a 	mov	r0, #10
    8508:	eb002254 	bl	10e60 <CTimer::SimpleusDelay(unsigned int)>
    850c:	e3a01000 	mov	r1, #0
    8510:	e3a00008 	mov	r0, #8
    8514:	ebffff08 	bl	813c <pinRawWrite(int, bool)>
    8518:	e3a01000 	mov	r1, #0
    851c:	e3a00008 	mov	r0, #8
    8520:	ebffff05 	bl	813c <pinRawWrite(int, bool)>
    8524:	e3a0000a 	mov	r0, #10
    8528:	eb00224c 	bl	10e60 <CTimer::SimpleusDelay(unsigned int)>
    852c:	ebffffac 	bl	83e4 <micros()>
    8530:	e1a02000 	mov	r2, r0
    8534:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    8538:	e283393d 	add	r3, r3, #999424	; 0xf4000
    853c:	e2833d09 	add	r3, r3, #576	; 0x240
    8540:	e1520003 	cmp	r2, r3
    8544:	83a03001 	movhi	r3, #1
    8548:	93a03000 	movls	r3, #0
    854c:	e6ef3073 	uxtb	r3, r3
    8550:	e3530000 	cmp	r3, #0
    8554:	0a000009 	beq	8580 <CKernel::testTiming(int)+0x174>
    8558:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
    855c:	e2833e87 	add	r3, r3, #2160	; 0x870
    8560:	e2833008 	add	r3, r3, #8
    8564:	e3a02001 	mov	r2, #1
    8568:	e59f1068 	ldr	r1, [pc, #104]	; 85d8 <CKernel::testTiming(int)+0x1cc>
    856c:	e1a00003 	mov	r0, r3
    8570:	eb0016b4 	bl	e048 <CScreenDevice::Write(void const*, unsigned int)>
    8574:	ebffff9a 	bl	83e4 <micros()>
    8578:	e1a03000 	mov	r3, r0
    857c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    8580:	ebffff97 	bl	83e4 <micros()>
    8584:	e1a01000 	mov	r1, r0
    8588:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
    858c:	e59f2048 	ldr	r2, [pc, #72]	; 85dc <CKernel::testTiming(int)+0x1d0>
    8590:	e0030392 	mul	r3, r2, r3
    8594:	e1a02003 	mov	r2, r3
    8598:	e51b300c 	ldr	r3, [fp, #-12]
    859c:	e0823003 	add	r3, r2, r3
    85a0:	e1510003 	cmp	r1, r3
    85a4:	83a03001 	movhi	r3, #1
    85a8:	93a03000 	movls	r3, #0
    85ac:	e6ef3073 	uxtb	r3, r3
    85b0:	e3530000 	cmp	r3, #0
    85b4:	1a000003 	bne	85c8 <CKernel::testTiming(int)+0x1bc>
    85b8:	ebffff89 	bl	83e4 <micros()>
    85bc:	e1a03000 	mov	r3, r0
    85c0:	e50b3010 	str	r3, [fp, #-16]
    85c4:	eaffffa6 	b	8464 <CKernel::testTiming(int)+0x58>
    85c8:	e320f000 	nop	{0}
    85cc:	e320f000 	nop	{0}
    85d0:	e24bd004 	sub	sp, fp, #4
    85d4:	e8bd8800 	pop	{fp, pc}
    85d8:	000139f4 	.word	0x000139f4
    85dc:	000f4240 	.word	0x000f4240

000085e0 <CKernel::CKernel()>:
    85e0:	e92d4830 	push	{r4, r5, fp, lr}
    85e4:	e28db00c 	add	fp, sp, #12
    85e8:	e24dd008 	sub	sp, sp, #8
    85ec:	e50b0010 	str	r0, [fp, #-16]
    85f0:	e51b3010 	ldr	r3, [fp, #-16]
    85f4:	e3a01001 	mov	r1, #1
    85f8:	e1a00003 	mov	r0, r3
    85fc:	eb002549 	bl	11b28 <CMemorySystem::CMemorySystem(bool)>
    8600:	e51b3010 	ldr	r3, [fp, #-16]
    8604:	e283300c 	add	r3, r3, #12
    8608:	e1a00003 	mov	r0, r3
    860c:	eb0006eb 	bl	a1c0 <CActLED::CActLED()>
    8610:	e51b3010 	ldr	r3, [fp, #-16]
    8614:	e2833018 	add	r3, r3, #24
    8618:	e1a00003 	mov	r0, r3
    861c:	eb000ea6 	bl	c0bc <CKernelOptions::CKernelOptions()>
    8620:	e51b3010 	ldr	r3, [fp, #-16]
    8624:	e2833e87 	add	r3, r3, #2160	; 0x870
    8628:	e1a00003 	mov	r0, r3
    862c:	eb0007f4 	bl	a604 <CDeviceNameService::CDeviceNameService()>
    8630:	e51b3010 	ldr	r3, [fp, #-16]
    8634:	e2834e87 	add	r4, r3, #2160	; 0x870
    8638:	e2844008 	add	r4, r4, #8
    863c:	e51b3010 	ldr	r3, [fp, #-16]
    8640:	e2833018 	add	r3, r3, #24
    8644:	e1a00003 	mov	r0, r3
    8648:	eb000e62 	bl	bfd8 <CKernelOptions::GetWidth() const>
    864c:	e1a05000 	mov	r5, r0
    8650:	e51b3010 	ldr	r3, [fp, #-16]
    8654:	e2833018 	add	r3, r3, #24
    8658:	e1a00003 	mov	r0, r3
    865c:	eb000e5f 	bl	bfe0 <CKernelOptions::GetHeight() const>
    8660:	e1a02000 	mov	r2, r0
    8664:	e3a03000 	mov	r3, #0
    8668:	e1a01005 	mov	r1, r5
    866c:	e1a00004 	mov	r0, r4
    8670:	eb0012f5 	bl	d24c <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool)>
    8674:	e51b3010 	ldr	r3, [fp, #-16]
    8678:	e2833e8d 	add	r3, r3, #2256	; 0x8d0
    867c:	e2833004 	add	r3, r3, #4
    8680:	e3a02000 	mov	r2, #0
    8684:	e3a01000 	mov	r1, #0
    8688:	e1a00003 	mov	r0, r3
    868c:	eb0017a1 	bl	e518 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool)>
    8690:	e51b3010 	ldr	r3, [fp, #-16]
    8694:	e2834d66 	add	r4, r3, #6528	; 0x1980
    8698:	e284402c 	add	r4, r4, #44	; 0x2c
    869c:	e51b3010 	ldr	r3, [fp, #-16]
    86a0:	e2833018 	add	r3, r3, #24
    86a4:	e1a00003 	mov	r0, r3
    86a8:	eb000e51 	bl	bff4 <CKernelOptions::GetLogLevel() const>
    86ac:	e1a03000 	mov	r3, r0
    86b0:	e3a02000 	mov	r2, #0
    86b4:	e1a01003 	mov	r1, r3
    86b8:	e1a00004 	mov	r0, r4
    86bc:	eb000f84 	bl	c4d4 <CLogger::CLogger(unsigned int, CTimer*)>
    86c0:	e51b3010 	ldr	r3, [fp, #-16]
    86c4:	e2833d6a 	add	r3, r3, #6784	; 0x1a80
    86c8:	e2833024 	add	r3, r3, #36	; 0x24
    86cc:	e1a00003 	mov	r0, r3
    86d0:	eb0000b8 	bl	89b8 <BusRaider::BusRaider()>
    86d4:	e51b3010 	ldr	r3, [fp, #-16]
    86d8:	e283000c 	add	r0, r3, #12
    86dc:	e3a03f7d 	mov	r3, #500	; 0x1f4
    86e0:	e3a020c8 	mov	r2, #200	; 0xc8
    86e4:	e3a01005 	mov	r1, #5
    86e8:	eb00070f 	bl	a32c <CActLED::Blink(unsigned int, unsigned int, unsigned int)>
    86ec:	e51b3010 	ldr	r3, [fp, #-16]
    86f0:	e1a00003 	mov	r0, r3
    86f4:	e24bd00c 	sub	sp, fp, #12
    86f8:	e8bd8830 	pop	{r4, r5, fp, pc}

000086fc <CKernel::~CKernel()>:
    86fc:	e92d4800 	push	{fp, lr}
    8700:	e28db004 	add	fp, sp, #4
    8704:	e24dd008 	sub	sp, sp, #8
    8708:	e50b0008 	str	r0, [fp, #-8]
    870c:	e51b3008 	ldr	r3, [fp, #-8]
    8710:	e2833d6a 	add	r3, r3, #6784	; 0x1a80
    8714:	e2833024 	add	r3, r3, #36	; 0x24
    8718:	e1a00003 	mov	r0, r3
    871c:	eb000109 	bl	8b48 <BusRaider::~BusRaider()>
    8720:	e51b3008 	ldr	r3, [fp, #-8]
    8724:	e2833d66 	add	r3, r3, #6528	; 0x1980
    8728:	e283302c 	add	r3, r3, #44	; 0x2c
    872c:	e1a00003 	mov	r0, r3
    8730:	eb000f7d 	bl	c52c <CLogger::~CLogger()>
    8734:	e51b3008 	ldr	r3, [fp, #-8]
    8738:	e2833e8d 	add	r3, r3, #2256	; 0x8d0
    873c:	e2833004 	add	r3, r3, #4
    8740:	e1a00003 	mov	r0, r3
    8744:	eb0019f4 	bl	ef1c <CSerialDevice::~CSerialDevice()>
    8748:	e51b3008 	ldr	r3, [fp, #-8]
    874c:	e2833e87 	add	r3, r3, #2160	; 0x870
    8750:	e2833008 	add	r3, r3, #8
    8754:	e1a00003 	mov	r0, r3
    8758:	eb00126e 	bl	d118 <CScreenDevice::~CScreenDevice()>
    875c:	e51b3008 	ldr	r3, [fp, #-8]
    8760:	e2833e87 	add	r3, r3, #2160	; 0x870
    8764:	e1a00003 	mov	r0, r3
    8768:	eb0007b8 	bl	a650 <CDeviceNameService::~CDeviceNameService()>
    876c:	e51b3008 	ldr	r3, [fp, #-8]
    8770:	e2833018 	add	r3, r3, #24
    8774:	e1a00003 	mov	r0, r3
    8778:	eb000e11 	bl	bfc4 <CKernelOptions::~CKernelOptions()>
    877c:	e51b3008 	ldr	r3, [fp, #-8]
    8780:	e283300c 	add	r3, r3, #12
    8784:	e1a00003 	mov	r0, r3
    8788:	eb00066d 	bl	a144 <CActLED::~CActLED()>
    878c:	e51b3008 	ldr	r3, [fp, #-8]
    8790:	e1a00003 	mov	r0, r3
    8794:	eb00246f 	bl	11958 <CMemorySystem::~CMemorySystem()>
    8798:	e51b3008 	ldr	r3, [fp, #-8]
    879c:	e1a00003 	mov	r0, r3
    87a0:	e24bd004 	sub	sp, fp, #4
    87a4:	e8bd8800 	pop	{fp, pc}

000087a8 <CKernel::Initialize()>:
    87a8:	e92d4810 	push	{r4, fp, lr}
    87ac:	e28db008 	add	fp, sp, #8
    87b0:	e24dd014 	sub	sp, sp, #20
    87b4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    87b8:	e3a03001 	mov	r3, #1
    87bc:	e54b300d 	strb	r3, [fp, #-13]
    87c0:	e55b300d 	ldrb	r3, [fp, #-13]
    87c4:	e3530000 	cmp	r3, #0
    87c8:	0a000006 	beq	87e8 <CKernel::Initialize()+0x40>
    87cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
    87d0:	e2833e87 	add	r3, r3, #2160	; 0x870
    87d4:	e2833008 	add	r3, r3, #8
    87d8:	e1a00003 	mov	r0, r3
    87dc:	eb00164b 	bl	e110 <CScreenDevice::Initialize()>
    87e0:	e1a03000 	mov	r3, r0
    87e4:	e54b300d 	strb	r3, [fp, #-13]
    87e8:	e55b300d 	ldrb	r3, [fp, #-13]
    87ec:	e3530000 	cmp	r3, #0
    87f0:	0a000007 	beq	8814 <CKernel::Initialize()+0x6c>
    87f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
    87f8:	e2833e8d 	add	r3, r3, #2256	; 0x8d0
    87fc:	e2833004 	add	r3, r3, #4
    8800:	e59f1094 	ldr	r1, [pc, #148]	; 889c <CKernel::Initialize()+0xf4>
    8804:	e1a00003 	mov	r0, r3
    8808:	eb001772 	bl	e5d8 <CSerialDevice::Initialize(unsigned int)>
    880c:	e1a03000 	mov	r3, r0
    8810:	e54b300d 	strb	r3, [fp, #-13]
    8814:	e55b300d 	ldrb	r3, [fp, #-13]
    8818:	e3530000 	cmp	r3, #0
    881c:	0a00001a 	beq	888c <CKernel::Initialize()+0xe4>
    8820:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
    8824:	e2834e87 	add	r4, r3, #2160	; 0x870
    8828:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
    882c:	e2833018 	add	r3, r3, #24
    8830:	e1a00003 	mov	r0, r3
    8834:	eb000deb 	bl	bfe8 <CKernelOptions::GetLogDevice() const>
    8838:	e1a03000 	mov	r3, r0
    883c:	e3a02000 	mov	r2, #0
    8840:	e1a01003 	mov	r1, r3
    8844:	e1a00004 	mov	r0, r4
    8848:	eb000817 	bl	a8ac <CDeviceNameService::GetDevice(char const*, bool)>
    884c:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    8850:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    8854:	e3530000 	cmp	r3, #0
    8858:	1a000003 	bne	886c <CKernel::Initialize()+0xc4>
    885c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
    8860:	e2833e87 	add	r3, r3, #2160	; 0x870
    8864:	e2833008 	add	r3, r3, #8
    8868:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    886c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
    8870:	e2833d66 	add	r3, r3, #6528	; 0x1980
    8874:	e283302c 	add	r3, r3, #44	; 0x2c
    8878:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
    887c:	e1a00003 	mov	r0, r3
    8880:	eb0010fb 	bl	cc74 <CLogger::Initialize(CDevice*)>
    8884:	e1a03000 	mov	r3, r0
    8888:	e54b300d 	strb	r3, [fp, #-13]
    888c:	e55b300d 	ldrb	r3, [fp, #-13]
    8890:	e1a00003 	mov	r0, r3
    8894:	e24bd008 	sub	sp, fp, #8
    8898:	e8bd8810 	pop	{r4, fp, pc}
    889c:	0001c200 	.word	0x0001c200

000088a0 <CKernel::Run()>:
    88a0:	e92d4800 	push	{fp, lr}
    88a4:	e28db004 	add	fp, sp, #4
    88a8:	e24dd008 	sub	sp, sp, #8
    88ac:	e50b0008 	str	r0, [fp, #-8]
    88b0:	e51b3008 	ldr	r3, [fp, #-8]
    88b4:	e2830d66 	add	r0, r3, #6528	; 0x1980
    88b8:	e280002c 	add	r0, r0, #44	; 0x2c
    88bc:	e59f3024 	ldr	r3, [pc, #36]	; 88e8 <CKernel::Run()+0x48>
    88c0:	e3a02003 	mov	r2, #3
    88c4:	e59f1020 	ldr	r1, [pc, #32]	; 88ec <CKernel::Run()+0x4c>
    88c8:	eb0010dd 	bl	cc44 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    88cc:	e3a0100a 	mov	r1, #10
    88d0:	e51b0008 	ldr	r0, [fp, #-8]
    88d4:	ebfffecc 	bl	840c <CKernel::testTiming(int)>
    88d8:	e3a03002 	mov	r3, #2
    88dc:	e1a00003 	mov	r0, r3
    88e0:	e24bd004 	sub	sp, fp, #4
    88e4:	e8bd8800 	pop	{fp, pc}
    88e8:	000139f8 	.word	0x000139f8
    88ec:	00013a1c 	.word	0x00013a1c

000088f0 <lowlevCycleDelay>:
    88f0:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
    88f4:	e1a00000 	nop			; (mov r0, r0)
    88f8:	e1a000c0 	asr	r0, r0, #1

000088fc <loopit>:
    88fc:	e2500001 	subs	r0, r0, #1
    8900:	1afffffd 	bne	88fc <loopit>
    8904:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
    8908:	e12fff1e 	bx	lr

0000890c <lowlevBlockCopyExecRelocatable>:
    890c:	e1a00000 	nop			; (mov r0, r0)
    8910:	e1a01001 	mov	r1, r1
    8914:	e1a02002 	mov	r2, r2
    8918:	e1a03003 	mov	r3, r3
    891c:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)

00008920 <blockCopyExecRelocatableLoop>:
    8920:	e4d13001 	ldrb	r3, [r1], #1
    8924:	e4c03001 	strb	r3, [r0], #1
    8928:	e2522001 	subs	r2, r2, #1
    892c:	aafffffb 	bge	8920 <blockCopyExecRelocatableLoop>
    8930:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    8934:	e12fff10 	bx	r0

00008938 <lowlevBlockCopyExecRelocatableLen>:
    8938:	0000002c 	.word	0x0000002c
    893c:	e12fff1e 	bx	lr

00008940 <lowlevGoto>:
    8940:	e1a00000 	nop			; (mov r0, r0)
    8944:	e12fff10 	bx	r0
    8948:	e12fff1e 	bx	lr

0000894c <lowlevStoreAbs8>:
    894c:	e1a00000 	nop			; (mov r0, r0)
    8950:	e1a01001 	mov	r1, r1
    8954:	e5c01000 	strb	r1, [r0]
    8958:	e12fff1e 	bx	lr
    895c:	e12fff1e 	bx	lr

00008960 <read32>:
    8960:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    8964:	e28db000 	add	fp, sp, #0
    8968:	e24dd00c 	sub	sp, sp, #12
    896c:	e50b0008 	str	r0, [fp, #-8]
    8970:	e51b3008 	ldr	r3, [fp, #-8]
    8974:	e5933000 	ldr	r3, [r3]
    8978:	e1a00003 	mov	r0, r3
    897c:	e28bd000 	add	sp, fp, #0
    8980:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    8984:	e12fff1e 	bx	lr

00008988 <write32>:
    8988:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    898c:	e28db000 	add	fp, sp, #0
    8990:	e24dd00c 	sub	sp, sp, #12
    8994:	e50b0008 	str	r0, [fp, #-8]
    8998:	e50b100c 	str	r1, [fp, #-12]
    899c:	e51b3008 	ldr	r3, [fp, #-8]
    89a0:	e51b200c 	ldr	r2, [fp, #-12]
    89a4:	e5832000 	str	r2, [r3]
    89a8:	e320f000 	nop	{0}
    89ac:	e28bd000 	add	sp, fp, #0
    89b0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    89b4:	e12fff1e 	bx	lr

000089b8 <BusRaider::BusRaider()>:
    89b8:	e92d4830 	push	{r4, r5, fp, lr}
    89bc:	e28db00c 	add	fp, sp, #12
    89c0:	e24dd008 	sub	sp, sp, #8
    89c4:	e50b0010 	str	r0, [fp, #-16]
    89c8:	e51b3010 	ldr	r3, [fp, #-16]
    89cc:	e3a02000 	mov	r2, #0
    89d0:	e5c32005 	strb	r2, [r3, #5]
    89d4:	e51b3010 	ldr	r3, [fp, #-16]
    89d8:	e2833014 	add	r3, r3, #20
    89dc:	e3a04002 	mov	r4, #2
    89e0:	e1a05003 	mov	r5, r3
    89e4:	e3540000 	cmp	r4, #0
    89e8:	ba000004 	blt	8a00 <BusRaider::BusRaider()+0x48>
    89ec:	e1a00005 	mov	r0, r5
    89f0:	eb000897 	bl	ac54 <CGPIOPin::CGPIOPin()>
    89f4:	e2855028 	add	r5, r5, #40	; 0x28
    89f8:	e2444001 	sub	r4, r4, #1
    89fc:	eafffff8 	b	89e4 <BusRaider::BusRaider()+0x2c>
    8a00:	e51b3010 	ldr	r3, [fp, #-16]
    8a04:	e283308c 	add	r3, r3, #140	; 0x8c
    8a08:	e1a00003 	mov	r0, r3
    8a0c:	eb000890 	bl	ac54 <CGPIOPin::CGPIOPin()>
    8a10:	e51b3010 	ldr	r3, [fp, #-16]
    8a14:	e28330b4 	add	r3, r3, #180	; 0xb4
    8a18:	e1a00003 	mov	r0, r3
    8a1c:	eb00088c 	bl	ac54 <CGPIOPin::CGPIOPin()>
    8a20:	e51b3010 	ldr	r3, [fp, #-16]
    8a24:	e28330dc 	add	r3, r3, #220	; 0xdc
    8a28:	e3a04007 	mov	r4, #7
    8a2c:	e1a05003 	mov	r5, r3
    8a30:	e3540000 	cmp	r4, #0
    8a34:	ba000004 	blt	8a4c <BusRaider::BusRaider()+0x94>
    8a38:	e1a00005 	mov	r0, r5
    8a3c:	eb000884 	bl	ac54 <CGPIOPin::CGPIOPin()>
    8a40:	e2855028 	add	r5, r5, #40	; 0x28
    8a44:	e2444001 	sub	r4, r4, #1
    8a48:	eafffff8 	b	8a30 <BusRaider::BusRaider()+0x78>
    8a4c:	e51b3010 	ldr	r3, [fp, #-16]
    8a50:	e2833f87 	add	r3, r3, #540	; 0x21c
    8a54:	e1a00003 	mov	r0, r3
    8a58:	eb00087d 	bl	ac54 <CGPIOPin::CGPIOPin()>
    8a5c:	e51b3010 	ldr	r3, [fp, #-16]
    8a60:	e2833f91 	add	r3, r3, #580	; 0x244
    8a64:	e1a00003 	mov	r0, r3
    8a68:	eb000879 	bl	ac54 <CGPIOPin::CGPIOPin()>
    8a6c:	e51b3010 	ldr	r3, [fp, #-16]
    8a70:	e2833f9b 	add	r3, r3, #620	; 0x26c
    8a74:	e1a00003 	mov	r0, r3
    8a78:	eb000875 	bl	ac54 <CGPIOPin::CGPIOPin()>
    8a7c:	e51b3010 	ldr	r3, [fp, #-16]
    8a80:	e2833fa5 	add	r3, r3, #660	; 0x294
    8a84:	e1a00003 	mov	r0, r3
    8a88:	eb000871 	bl	ac54 <CGPIOPin::CGPIOPin()>
    8a8c:	e51b3010 	ldr	r3, [fp, #-16]
    8a90:	e2833faf 	add	r3, r3, #700	; 0x2bc
    8a94:	e1a00003 	mov	r0, r3
    8a98:	eb00086d 	bl	ac54 <CGPIOPin::CGPIOPin()>
    8a9c:	e51b3010 	ldr	r3, [fp, #-16]
    8aa0:	e2833fb9 	add	r3, r3, #740	; 0x2e4
    8aa4:	e1a00003 	mov	r0, r3
    8aa8:	eb000869 	bl	ac54 <CGPIOPin::CGPIOPin()>
    8aac:	e51b3010 	ldr	r3, [fp, #-16]
    8ab0:	e2833fc3 	add	r3, r3, #780	; 0x30c
    8ab4:	e1a00003 	mov	r0, r3
    8ab8:	eb000865 	bl	ac54 <CGPIOPin::CGPIOPin()>
    8abc:	e51b3010 	ldr	r3, [fp, #-16]
    8ac0:	e2833fcd 	add	r3, r3, #820	; 0x334
    8ac4:	e1a00003 	mov	r0, r3
    8ac8:	eb000861 	bl	ac54 <CGPIOPin::CGPIOPin()>
    8acc:	e51b3010 	ldr	r3, [fp, #-16]
    8ad0:	e2833fd7 	add	r3, r3, #860	; 0x35c
    8ad4:	e1a00003 	mov	r0, r3
    8ad8:	eb00085d 	bl	ac54 <CGPIOPin::CGPIOPin()>
    8adc:	e51b3010 	ldr	r3, [fp, #-16]
    8ae0:	e2833fe1 	add	r3, r3, #900	; 0x384
    8ae4:	e1a00003 	mov	r0, r3
    8ae8:	eb000859 	bl	ac54 <CGPIOPin::CGPIOPin()>
    8aec:	e51b3010 	ldr	r3, [fp, #-16]
    8af0:	e2833feb 	add	r3, r3, #940	; 0x3ac
    8af4:	e1a00003 	mov	r0, r3
    8af8:	eb000855 	bl	ac54 <CGPIOPin::CGPIOPin()>
    8afc:	e51b3010 	ldr	r3, [fp, #-16]
    8b00:	e3a02000 	mov	r2, #0
    8b04:	e5832000 	str	r2, [r3]
    8b08:	e51b3010 	ldr	r3, [fp, #-16]
    8b0c:	e3a02000 	mov	r2, #0
    8b10:	e5c32004 	strb	r2, [r3, #4]
    8b14:	e51b3010 	ldr	r3, [fp, #-16]
    8b18:	e3a02000 	mov	r2, #0
    8b1c:	e5832008 	str	r2, [r3, #8]
    8b20:	e51b3010 	ldr	r3, [fp, #-16]
    8b24:	e3a02000 	mov	r2, #0
    8b28:	e583200c 	str	r2, [r3, #12]
    8b2c:	e51b3010 	ldr	r3, [fp, #-16]
    8b30:	e3a02000 	mov	r2, #0
    8b34:	e5832010 	str	r2, [r3, #16]
    8b38:	e51b3010 	ldr	r3, [fp, #-16]
    8b3c:	e1a00003 	mov	r0, r3
    8b40:	e24bd00c 	sub	sp, fp, #12
    8b44:	e8bd8830 	pop	{r4, r5, fp, pc}

00008b48 <BusRaider::~BusRaider()>:
    8b48:	e92d4810 	push	{r4, fp, lr}
    8b4c:	e28db008 	add	fp, sp, #8
    8b50:	e24dd00c 	sub	sp, sp, #12
    8b54:	e50b0010 	str	r0, [fp, #-16]
    8b58:	e51b3010 	ldr	r3, [fp, #-16]
    8b5c:	e2833feb 	add	r3, r3, #940	; 0x3ac
    8b60:	e1a00003 	mov	r0, r3
    8b64:	eb000833 	bl	ac38 <CGPIOPin::~CGPIOPin()>
    8b68:	e51b3010 	ldr	r3, [fp, #-16]
    8b6c:	e2833fe1 	add	r3, r3, #900	; 0x384
    8b70:	e1a00003 	mov	r0, r3
    8b74:	eb00082f 	bl	ac38 <CGPIOPin::~CGPIOPin()>
    8b78:	e51b3010 	ldr	r3, [fp, #-16]
    8b7c:	e2833fd7 	add	r3, r3, #860	; 0x35c
    8b80:	e1a00003 	mov	r0, r3
    8b84:	eb00082b 	bl	ac38 <CGPIOPin::~CGPIOPin()>
    8b88:	e51b3010 	ldr	r3, [fp, #-16]
    8b8c:	e2833fcd 	add	r3, r3, #820	; 0x334
    8b90:	e1a00003 	mov	r0, r3
    8b94:	eb000827 	bl	ac38 <CGPIOPin::~CGPIOPin()>
    8b98:	e51b3010 	ldr	r3, [fp, #-16]
    8b9c:	e2833fc3 	add	r3, r3, #780	; 0x30c
    8ba0:	e1a00003 	mov	r0, r3
    8ba4:	eb000823 	bl	ac38 <CGPIOPin::~CGPIOPin()>
    8ba8:	e51b3010 	ldr	r3, [fp, #-16]
    8bac:	e2833fb9 	add	r3, r3, #740	; 0x2e4
    8bb0:	e1a00003 	mov	r0, r3
    8bb4:	eb00081f 	bl	ac38 <CGPIOPin::~CGPIOPin()>
    8bb8:	e51b3010 	ldr	r3, [fp, #-16]
    8bbc:	e2833faf 	add	r3, r3, #700	; 0x2bc
    8bc0:	e1a00003 	mov	r0, r3
    8bc4:	eb00081b 	bl	ac38 <CGPIOPin::~CGPIOPin()>
    8bc8:	e51b3010 	ldr	r3, [fp, #-16]
    8bcc:	e2833fa5 	add	r3, r3, #660	; 0x294
    8bd0:	e1a00003 	mov	r0, r3
    8bd4:	eb000817 	bl	ac38 <CGPIOPin::~CGPIOPin()>
    8bd8:	e51b3010 	ldr	r3, [fp, #-16]
    8bdc:	e2833f9b 	add	r3, r3, #620	; 0x26c
    8be0:	e1a00003 	mov	r0, r3
    8be4:	eb000813 	bl	ac38 <CGPIOPin::~CGPIOPin()>
    8be8:	e51b3010 	ldr	r3, [fp, #-16]
    8bec:	e2833f91 	add	r3, r3, #580	; 0x244
    8bf0:	e1a00003 	mov	r0, r3
    8bf4:	eb00080f 	bl	ac38 <CGPIOPin::~CGPIOPin()>
    8bf8:	e51b3010 	ldr	r3, [fp, #-16]
    8bfc:	e2833f87 	add	r3, r3, #540	; 0x21c
    8c00:	e1a00003 	mov	r0, r3
    8c04:	eb00080b 	bl	ac38 <CGPIOPin::~CGPIOPin()>
    8c08:	e51b3010 	ldr	r3, [fp, #-16]
    8c0c:	e28330dc 	add	r3, r3, #220	; 0xdc
    8c10:	e3530000 	cmp	r3, #0
    8c14:	0a00000c 	beq	8c4c <BusRaider::~BusRaider()+0x104>
    8c18:	e51b3010 	ldr	r3, [fp, #-16]
    8c1c:	e28330dc 	add	r3, r3, #220	; 0xdc
    8c20:	e2834d05 	add	r4, r3, #320	; 0x140
    8c24:	e51b3010 	ldr	r3, [fp, #-16]
    8c28:	e28330dc 	add	r3, r3, #220	; 0xdc
    8c2c:	e1530004 	cmp	r3, r4
    8c30:	0a000005 	beq	8c4c <BusRaider::~BusRaider()+0x104>
    8c34:	e2444028 	sub	r4, r4, #40	; 0x28
    8c38:	e5943000 	ldr	r3, [r4]
    8c3c:	e5933000 	ldr	r3, [r3]
    8c40:	e1a00004 	mov	r0, r4
    8c44:	e12fff33 	blx	r3
    8c48:	eafffff5 	b	8c24 <BusRaider::~BusRaider()+0xdc>
    8c4c:	e51b3010 	ldr	r3, [fp, #-16]
    8c50:	e28330b4 	add	r3, r3, #180	; 0xb4
    8c54:	e1a00003 	mov	r0, r3
    8c58:	eb0007f6 	bl	ac38 <CGPIOPin::~CGPIOPin()>
    8c5c:	e51b3010 	ldr	r3, [fp, #-16]
    8c60:	e283308c 	add	r3, r3, #140	; 0x8c
    8c64:	e1a00003 	mov	r0, r3
    8c68:	eb0007f2 	bl	ac38 <CGPIOPin::~CGPIOPin()>
    8c6c:	e51b3010 	ldr	r3, [fp, #-16]
    8c70:	e2833014 	add	r3, r3, #20
    8c74:	e3530000 	cmp	r3, #0
    8c78:	0a00000c 	beq	8cb0 <BusRaider::~BusRaider()+0x168>
    8c7c:	e51b3010 	ldr	r3, [fp, #-16]
    8c80:	e2833014 	add	r3, r3, #20
    8c84:	e2834078 	add	r4, r3, #120	; 0x78
    8c88:	e51b3010 	ldr	r3, [fp, #-16]
    8c8c:	e2833014 	add	r3, r3, #20
    8c90:	e1530004 	cmp	r3, r4
    8c94:	0a000005 	beq	8cb0 <BusRaider::~BusRaider()+0x168>
    8c98:	e2444028 	sub	r4, r4, #40	; 0x28
    8c9c:	e5943000 	ldr	r3, [r4]
    8ca0:	e5933000 	ldr	r3, [r3]
    8ca4:	e1a00004 	mov	r0, r4
    8ca8:	e12fff33 	blx	r3
    8cac:	eafffff5 	b	8c88 <BusRaider::~BusRaider()+0x140>
    8cb0:	e51b3010 	ldr	r3, [fp, #-16]
    8cb4:	e1a00003 	mov	r0, r3
    8cb8:	e24bd008 	sub	sp, fp, #8
    8cbc:	e8bd8810 	pop	{r4, fp, pc}

00008cc0 <BusRaider::init()>:
    8cc0:	e92d4800 	push	{fp, lr}
    8cc4:	e28db004 	add	fp, sp, #4
    8cc8:	e24dd008 	sub	sp, sp, #8
    8ccc:	e50b0008 	str	r0, [fp, #-8]
    8cd0:	e51b0008 	ldr	r0, [fp, #-8]
    8cd4:	eb000355 	bl	9a30 <BusRaider::waitIntDisable()>
    8cd8:	e51b3008 	ldr	r3, [fp, #-8]
    8cdc:	e2831014 	add	r1, r3, #20
    8ce0:	e3a03000 	mov	r3, #0
    8ce4:	e3a0200b 	mov	r2, #11
    8ce8:	e51b0008 	ldr	r0, [fp, #-8]
    8cec:	eb00030a 	bl	991c <BusRaider::setPinOut(CGPIOPin&, int, bool)>
    8cf0:	e51b3008 	ldr	r3, [fp, #-8]
    8cf4:	e283103c 	add	r1, r3, #60	; 0x3c
    8cf8:	e3a03000 	mov	r3, #0
    8cfc:	e3a02009 	mov	r2, #9
    8d00:	e51b0008 	ldr	r0, [fp, #-8]
    8d04:	eb000304 	bl	991c <BusRaider::setPinOut(CGPIOPin&, int, bool)>
    8d08:	e51b3008 	ldr	r3, [fp, #-8]
    8d0c:	e2831064 	add	r1, r3, #100	; 0x64
    8d10:	e3a03000 	mov	r3, #0
    8d14:	e3a0200a 	mov	r2, #10
    8d18:	e51b0008 	ldr	r0, [fp, #-8]
    8d1c:	eb0002fe 	bl	991c <BusRaider::setPinOut(CGPIOPin&, int, bool)>
    8d20:	e51b3008 	ldr	r3, [fp, #-8]
    8d24:	e283108c 	add	r1, r3, #140	; 0x8c
    8d28:	e3a03001 	mov	r3, #1
    8d2c:	e3a02013 	mov	r2, #19
    8d30:	e51b0008 	ldr	r0, [fp, #-8]
    8d34:	eb0002f8 	bl	991c <BusRaider::setPinOut(CGPIOPin&, int, bool)>
    8d38:	e51b3008 	ldr	r3, [fp, #-8]
    8d3c:	e28330b4 	add	r3, r3, #180	; 0xb4
    8d40:	e3a02002 	mov	r2, #2
    8d44:	e1a01003 	mov	r1, r3
    8d48:	e51b0008 	ldr	r0, [fp, #-8]
    8d4c:	eb000301 	bl	9958 <BusRaider::setPinIn(CGPIOPin&, int)>
    8d50:	e51b3008 	ldr	r3, [fp, #-8]
    8d54:	e28330dc 	add	r3, r3, #220	; 0xdc
    8d58:	e3a02014 	mov	r2, #20
    8d5c:	e1a01003 	mov	r1, r3
    8d60:	e51b0008 	ldr	r0, [fp, #-8]
    8d64:	eb0002fb 	bl	9958 <BusRaider::setPinIn(CGPIOPin&, int)>
    8d68:	e51b3008 	ldr	r3, [fp, #-8]
    8d6c:	e2833f41 	add	r3, r3, #260	; 0x104
    8d70:	e3a02015 	mov	r2, #21
    8d74:	e1a01003 	mov	r1, r3
    8d78:	e51b0008 	ldr	r0, [fp, #-8]
    8d7c:	eb0002f5 	bl	9958 <BusRaider::setPinIn(CGPIOPin&, int)>
    8d80:	e51b3008 	ldr	r3, [fp, #-8]
    8d84:	e2833f4b 	add	r3, r3, #300	; 0x12c
    8d88:	e3a02016 	mov	r2, #22
    8d8c:	e1a01003 	mov	r1, r3
    8d90:	e51b0008 	ldr	r0, [fp, #-8]
    8d94:	eb0002ef 	bl	9958 <BusRaider::setPinIn(CGPIOPin&, int)>
    8d98:	e51b3008 	ldr	r3, [fp, #-8]
    8d9c:	e2833f55 	add	r3, r3, #340	; 0x154
    8da0:	e3a02017 	mov	r2, #23
    8da4:	e1a01003 	mov	r1, r3
    8da8:	e51b0008 	ldr	r0, [fp, #-8]
    8dac:	eb0002e9 	bl	9958 <BusRaider::setPinIn(CGPIOPin&, int)>
    8db0:	e51b3008 	ldr	r3, [fp, #-8]
    8db4:	e2833f5f 	add	r3, r3, #380	; 0x17c
    8db8:	e3a02018 	mov	r2, #24
    8dbc:	e1a01003 	mov	r1, r3
    8dc0:	e51b0008 	ldr	r0, [fp, #-8]
    8dc4:	eb0002e3 	bl	9958 <BusRaider::setPinIn(CGPIOPin&, int)>
    8dc8:	e51b3008 	ldr	r3, [fp, #-8]
    8dcc:	e2833f69 	add	r3, r3, #420	; 0x1a4
    8dd0:	e3a02019 	mov	r2, #25
    8dd4:	e1a01003 	mov	r1, r3
    8dd8:	e51b0008 	ldr	r0, [fp, #-8]
    8ddc:	eb0002dd 	bl	9958 <BusRaider::setPinIn(CGPIOPin&, int)>
    8de0:	e51b3008 	ldr	r3, [fp, #-8]
    8de4:	e2833f73 	add	r3, r3, #460	; 0x1cc
    8de8:	e3a0201a 	mov	r2, #26
    8dec:	e1a01003 	mov	r1, r3
    8df0:	e51b0008 	ldr	r0, [fp, #-8]
    8df4:	eb0002d7 	bl	9958 <BusRaider::setPinIn(CGPIOPin&, int)>
    8df8:	e51b3008 	ldr	r3, [fp, #-8]
    8dfc:	e2833f7d 	add	r3, r3, #500	; 0x1f4
    8e00:	e3a0201b 	mov	r2, #27
    8e04:	e1a01003 	mov	r1, r3
    8e08:	e51b0008 	ldr	r0, [fp, #-8]
    8e0c:	eb0002d1 	bl	9958 <BusRaider::setPinIn(CGPIOPin&, int)>
    8e10:	e51b3008 	ldr	r3, [fp, #-8]
    8e14:	e2833f87 	add	r3, r3, #540	; 0x21c
    8e18:	e3a02000 	mov	r2, #0
    8e1c:	e1a01003 	mov	r1, r3
    8e20:	e51b0008 	ldr	r0, [fp, #-8]
    8e24:	eb0002cb 	bl	9958 <BusRaider::setPinIn(CGPIOPin&, int)>
    8e28:	e51b3008 	ldr	r3, [fp, #-8]
    8e2c:	e2833f91 	add	r3, r3, #580	; 0x244
    8e30:	e3a02001 	mov	r2, #1
    8e34:	e1a01003 	mov	r1, r3
    8e38:	e51b0008 	ldr	r0, [fp, #-8]
    8e3c:	eb0002c5 	bl	9958 <BusRaider::setPinIn(CGPIOPin&, int)>
    8e40:	e51b3008 	ldr	r3, [fp, #-8]
    8e44:	e2833f9b 	add	r3, r3, #620	; 0x26c
    8e48:	e3a02012 	mov	r2, #18
    8e4c:	e1a01003 	mov	r1, r3
    8e50:	e51b0008 	ldr	r0, [fp, #-8]
    8e54:	eb0002bf 	bl	9958 <BusRaider::setPinIn(CGPIOPin&, int)>
    8e58:	e51b3008 	ldr	r3, [fp, #-8]
    8e5c:	e2833fa5 	add	r3, r3, #660	; 0x294
    8e60:	e3a02011 	mov	r2, #17
    8e64:	e1a01003 	mov	r1, r3
    8e68:	e51b0008 	ldr	r0, [fp, #-8]
    8e6c:	eb0002b9 	bl	9958 <BusRaider::setPinIn(CGPIOPin&, int)>
    8e70:	e51b3008 	ldr	r3, [fp, #-8]
    8e74:	e2831faf 	add	r1, r3, #700	; 0x2bc
    8e78:	e3a03000 	mov	r3, #0
    8e7c:	e3a0200d 	mov	r2, #13
    8e80:	e51b0008 	ldr	r0, [fp, #-8]
    8e84:	eb0002a4 	bl	991c <BusRaider::setPinOut(CGPIOPin&, int, bool)>
    8e88:	e51b3008 	ldr	r3, [fp, #-8]
    8e8c:	e2831fb9 	add	r1, r3, #740	; 0x2e4
    8e90:	e3a03000 	mov	r3, #0
    8e94:	e3a0200c 	mov	r2, #12
    8e98:	e51b0008 	ldr	r0, [fp, #-8]
    8e9c:	eb00029e 	bl	991c <BusRaider::setPinOut(CGPIOPin&, int, bool)>
    8ea0:	e51b3008 	ldr	r3, [fp, #-8]
    8ea4:	e3a02000 	mov	r2, #0
    8ea8:	e5832000 	str	r2, [r3]
    8eac:	e51b3008 	ldr	r3, [fp, #-8]
    8eb0:	e2831fc3 	add	r1, r3, #780	; 0x30c
    8eb4:	e3a03001 	mov	r3, #1
    8eb8:	e3a02003 	mov	r2, #3
    8ebc:	e51b0008 	ldr	r0, [fp, #-8]
    8ec0:	eb000295 	bl	991c <BusRaider::setPinOut(CGPIOPin&, int, bool)>
    8ec4:	e51b3008 	ldr	r3, [fp, #-8]
    8ec8:	e2831fcd 	add	r1, r3, #820	; 0x334
    8ecc:	e3a03000 	mov	r3, #0
    8ed0:	e3a02007 	mov	r2, #7
    8ed4:	e51b0008 	ldr	r0, [fp, #-8]
    8ed8:	eb00028f 	bl	991c <BusRaider::setPinOut(CGPIOPin&, int, bool)>
    8edc:	e51b3008 	ldr	r3, [fp, #-8]
    8ee0:	e2831fd7 	add	r1, r3, #860	; 0x35c
    8ee4:	e3a03000 	mov	r3, #0
    8ee8:	e3a02010 	mov	r2, #16
    8eec:	e51b0008 	ldr	r0, [fp, #-8]
    8ef0:	eb000289 	bl	991c <BusRaider::setPinOut(CGPIOPin&, int, bool)>
    8ef4:	e51b3008 	ldr	r3, [fp, #-8]
    8ef8:	e2831fe1 	add	r1, r3, #900	; 0x384
    8efc:	e3a03001 	mov	r3, #1
    8f00:	e3a02006 	mov	r2, #6
    8f04:	e51b0008 	ldr	r0, [fp, #-8]
    8f08:	eb000283 	bl	991c <BusRaider::setPinOut(CGPIOPin&, int, bool)>
    8f0c:	e51b3008 	ldr	r3, [fp, #-8]
    8f10:	e3a02000 	mov	r2, #0
    8f14:	e5c32004 	strb	r2, [r3, #4]
    8f18:	e51b3008 	ldr	r3, [fp, #-8]
    8f1c:	e2831feb 	add	r1, r3, #940	; 0x3ac
    8f20:	e3a03000 	mov	r3, #0
    8f24:	e3a02008 	mov	r2, #8
    8f28:	e51b0008 	ldr	r0, [fp, #-8]
    8f2c:	eb00027a 	bl	991c <BusRaider::setPinOut(CGPIOPin&, int, bool)>
    8f30:	e320f000 	nop	{0}
    8f34:	e24bd004 	sub	sp, fp, #4
    8f38:	e8bd8800 	pop	{fp, pc}

00008f3c <BusRaider::hostReset()>:
    8f3c:	e92d4800 	push	{fp, lr}
    8f40:	e28db004 	add	fp, sp, #4
    8f44:	e24dd008 	sub	sp, sp, #8
    8f48:	e50b0008 	str	r0, [fp, #-8]
    8f4c:	e51b0008 	ldr	r0, [fp, #-8]
    8f50:	eb0002b6 	bl	9a30 <BusRaider::waitIntDisable()>
    8f54:	e3a01005 	mov	r1, #5
    8f58:	e51b0008 	ldr	r0, [fp, #-8]
    8f5c:	eb00028b 	bl	9990 <BusRaider::muxSet(int)>
    8f60:	e3a00064 	mov	r0, #100	; 0x64
    8f64:	eb001fbd 	bl	10e60 <CTimer::SimpleusDelay(unsigned int)>
    8f68:	e3a01a03 	mov	r1, #12288	; 0x3000
    8f6c:	e59f0048 	ldr	r0, [pc, #72]	; 8fbc <BusRaider::hostReset()+0x80>
    8f70:	ebfffe84 	bl	8988 <write32>
    8f74:	e51b3008 	ldr	r3, [fp, #-8]
    8f78:	e5933000 	ldr	r3, [r3]
    8f7c:	e1a01003 	mov	r1, r3
    8f80:	e59f0038 	ldr	r0, [pc, #56]	; 8fc0 <BusRaider::hostReset()+0x84>
    8f84:	ebfffe7f 	bl	8988 <write32>
    8f88:	e51b0008 	ldr	r0, [fp, #-8]
    8f8c:	eb00029c 	bl	9a04 <BusRaider::waitIntClear()>
    8f90:	e51b3008 	ldr	r3, [fp, #-8]
    8f94:	e5d33004 	ldrb	r3, [r3, #4]
    8f98:	e3530000 	cmp	r3, #0
    8f9c:	0a000001 	beq	8fa8 <BusRaider::hostReset()+0x6c>
    8fa0:	e51b0008 	ldr	r0, [fp, #-8]
    8fa4:	eb0002a9 	bl	9a50 <BusRaider::waitIntEnable()>
    8fa8:	e51b0008 	ldr	r0, [fp, #-8]
    8fac:	eb000289 	bl	99d8 <BusRaider::muxClear()>
    8fb0:	e320f000 	nop	{0}
    8fb4:	e24bd004 	sub	sp, fp, #4
    8fb8:	e8bd8800 	pop	{fp, pc}
    8fbc:	20200028 	.word	0x20200028
    8fc0:	2020001c 	.word	0x2020001c

00008fc4 <BusRaider::hostResetHold()>:
    8fc4:	e92d4800 	push	{fp, lr}
    8fc8:	e28db004 	add	fp, sp, #4
    8fcc:	e24dd008 	sub	sp, sp, #8
    8fd0:	e50b0008 	str	r0, [fp, #-8]
    8fd4:	e51b0008 	ldr	r0, [fp, #-8]
    8fd8:	eb000294 	bl	9a30 <BusRaider::waitIntDisable()>
    8fdc:	e3a01005 	mov	r1, #5
    8fe0:	e51b0008 	ldr	r0, [fp, #-8]
    8fe4:	eb000269 	bl	9990 <BusRaider::muxSet(int)>
    8fe8:	e320f000 	nop	{0}
    8fec:	e24bd004 	sub	sp, fp, #4
    8ff0:	e8bd8800 	pop	{fp, pc}

00008ff4 <BusRaider::hostNMI()>:
    8ff4:	e92d4800 	push	{fp, lr}
    8ff8:	e28db004 	add	fp, sp, #4
    8ffc:	e24dd008 	sub	sp, sp, #8
    9000:	e50b0008 	str	r0, [fp, #-8]
    9004:	e3a01006 	mov	r1, #6
    9008:	e51b0008 	ldr	r0, [fp, #-8]
    900c:	eb00025f 	bl	9990 <BusRaider::muxSet(int)>
    9010:	e3a0000a 	mov	r0, #10
    9014:	eb001f91 	bl	10e60 <CTimer::SimpleusDelay(unsigned int)>
    9018:	e51b0008 	ldr	r0, [fp, #-8]
    901c:	eb00026d 	bl	99d8 <BusRaider::muxClear()>
    9020:	e320f000 	nop	{0}
    9024:	e24bd004 	sub	sp, fp, #4
    9028:	e8bd8800 	pop	{fp, pc}

0000902c <BusRaider::hostIRQ()>:
    902c:	e92d4800 	push	{fp, lr}
    9030:	e28db004 	add	fp, sp, #4
    9034:	e24dd008 	sub	sp, sp, #8
    9038:	e50b0008 	str	r0, [fp, #-8]
    903c:	e3a01002 	mov	r1, #2
    9040:	e51b0008 	ldr	r0, [fp, #-8]
    9044:	eb000251 	bl	9990 <BusRaider::muxSet(int)>
    9048:	e3a0000a 	mov	r0, #10
    904c:	eb001f83 	bl	10e60 <CTimer::SimpleusDelay(unsigned int)>
    9050:	e51b0008 	ldr	r0, [fp, #-8]
    9054:	eb00025f 	bl	99d8 <BusRaider::muxClear()>
    9058:	e320f000 	nop	{0}
    905c:	e24bd004 	sub	sp, fp, #4
    9060:	e8bd8800 	pop	{fp, pc}

00009064 <BusRaider::controlRequestBus()>:
    9064:	e92d4800 	push	{fp, lr}
    9068:	e28db004 	add	fp, sp, #4
    906c:	e24dd008 	sub	sp, sp, #8
    9070:	e50b0008 	str	r0, [fp, #-8]
    9074:	e51b0008 	ldr	r0, [fp, #-8]
    9078:	eb00028f 	bl	9abc <BusRaider::pibSetIn()>
    907c:	e3a02001 	mov	r2, #1
    9080:	e3a01006 	mov	r1, #6
    9084:	e51b0008 	ldr	r0, [fp, #-8]
    9088:	eb00031a 	bl	9cf8 <BusRaider::pinRawWrite(int, bool)>
    908c:	e3a02000 	mov	r2, #0
    9090:	e3a01013 	mov	r1, #19
    9094:	e51b0008 	ldr	r0, [fp, #-8]
    9098:	eb000316 	bl	9cf8 <BusRaider::pinRawWrite(int, bool)>
    909c:	e320f000 	nop	{0}
    90a0:	e24bd004 	sub	sp, fp, #4
    90a4:	e8bd8800 	pop	{fp, pc}

000090a8 <BusRaider::controlBusAcknowledged()>:
    90a8:	e92d4800 	push	{fp, lr}
    90ac:	e28db004 	add	fp, sp, #4
    90b0:	e24dd008 	sub	sp, sp, #8
    90b4:	e50b0008 	str	r0, [fp, #-8]
    90b8:	e3a01002 	mov	r1, #2
    90bc:	e51b0008 	ldr	r0, [fp, #-8]
    90c0:	eb000340 	bl	9dc8 <BusRaider::pinRawRead(int)>
    90c4:	e1a03000 	mov	r3, r0
    90c8:	e2233001 	eor	r3, r3, #1
    90cc:	e6ef3073 	uxtb	r3, r3
    90d0:	e1a00003 	mov	r0, r3
    90d4:	e24bd004 	sub	sp, fp, #4
    90d8:	e8bd8800 	pop	{fp, pc}

000090dc <BusRaider::controlTake()>:
    90dc:	e92d4800 	push	{fp, lr}
    90e0:	e28db004 	add	fp, sp, #4
    90e4:	e24dd008 	sub	sp, sp, #8
    90e8:	e50b0008 	str	r0, [fp, #-8]
    90ec:	e51b0008 	ldr	r0, [fp, #-8]
    90f0:	eb00024e 	bl	9a30 <BusRaider::waitIntDisable()>
    90f4:	e3a03001 	mov	r3, #1
    90f8:	e3a02000 	mov	r2, #0
    90fc:	e3a01000 	mov	r1, #0
    9100:	e51b0008 	ldr	r0, [fp, #-8]
    9104:	eb0002a1 	bl	9b90 <BusRaider::pinRawMode(int, bool, bool)>
    9108:	e3a03001 	mov	r3, #1
    910c:	e3a02000 	mov	r2, #0
    9110:	e3a01001 	mov	r1, #1
    9114:	e51b0008 	ldr	r0, [fp, #-8]
    9118:	eb00029c 	bl	9b90 <BusRaider::pinRawMode(int, bool, bool)>
    911c:	e3a03001 	mov	r3, #1
    9120:	e3a02000 	mov	r2, #0
    9124:	e3a01012 	mov	r1, #18
    9128:	e51b0008 	ldr	r0, [fp, #-8]
    912c:	eb000297 	bl	9b90 <BusRaider::pinRawMode(int, bool, bool)>
    9130:	e3a03001 	mov	r3, #1
    9134:	e3a02000 	mov	r2, #0
    9138:	e3a01011 	mov	r1, #17
    913c:	e51b0008 	ldr	r0, [fp, #-8]
    9140:	eb000292 	bl	9b90 <BusRaider::pinRawMode(int, bool, bool)>
    9144:	e3a02000 	mov	r2, #0
    9148:	e3a01003 	mov	r1, #3
    914c:	e51b0008 	ldr	r0, [fp, #-8]
    9150:	eb0002e8 	bl	9cf8 <BusRaider::pinRawWrite(int, bool)>
    9154:	e320f000 	nop	{0}
    9158:	e24bd004 	sub	sp, fp, #4
    915c:	e8bd8800 	pop	{fp, pc}

00009160 <BusRaider::controlRelease(bool)>:
    9160:	e92d4800 	push	{fp, lr}
    9164:	e28db004 	add	fp, sp, #4
    9168:	e24dd008 	sub	sp, sp, #8
    916c:	e50b0008 	str	r0, [fp, #-8]
    9170:	e1a03001 	mov	r3, r1
    9174:	e54b3009 	strb	r3, [fp, #-9]
    9178:	e3a03000 	mov	r3, #0
    917c:	e3a02001 	mov	r2, #1
    9180:	e3a01000 	mov	r1, #0
    9184:	e51b0008 	ldr	r0, [fp, #-8]
    9188:	eb000280 	bl	9b90 <BusRaider::pinRawMode(int, bool, bool)>
    918c:	e3a03000 	mov	r3, #0
    9190:	e3a02001 	mov	r2, #1
    9194:	e3a01001 	mov	r1, #1
    9198:	e51b0008 	ldr	r0, [fp, #-8]
    919c:	eb00027b 	bl	9b90 <BusRaider::pinRawMode(int, bool, bool)>
    91a0:	e3a03000 	mov	r3, #0
    91a4:	e3a02001 	mov	r2, #1
    91a8:	e3a01012 	mov	r1, #18
    91ac:	e51b0008 	ldr	r0, [fp, #-8]
    91b0:	eb000276 	bl	9b90 <BusRaider::pinRawMode(int, bool, bool)>
    91b4:	e3a03000 	mov	r3, #0
    91b8:	e3a02001 	mov	r2, #1
    91bc:	e3a01011 	mov	r1, #17
    91c0:	e51b0008 	ldr	r0, [fp, #-8]
    91c4:	eb000271 	bl	9b90 <BusRaider::pinRawMode(int, bool, bool)>
    91c8:	e3a02001 	mov	r2, #1
    91cc:	e3a01003 	mov	r1, #3
    91d0:	e51b0008 	ldr	r0, [fp, #-8]
    91d4:	eb0002c7 	bl	9cf8 <BusRaider::pinRawWrite(int, bool)>
    91d8:	e51b3008 	ldr	r3, [fp, #-8]
    91dc:	e5d33004 	ldrb	r3, [r3, #4]
    91e0:	e3530000 	cmp	r3, #0
    91e4:	0a000001 	beq	91f0 <BusRaider::controlRelease(bool)+0x90>
    91e8:	e51b0008 	ldr	r0, [fp, #-8]
    91ec:	eb000217 	bl	9a50 <BusRaider::waitIntEnable()>
    91f0:	e55b3009 	ldrb	r3, [fp, #-9]
    91f4:	e3530000 	cmp	r3, #0
    91f8:	0a00000b 	beq	922c <BusRaider::controlRelease(bool)+0xcc>
    91fc:	e3a01005 	mov	r1, #5
    9200:	e51b0008 	ldr	r0, [fp, #-8]
    9204:	eb0001e1 	bl	9990 <BusRaider::muxSet(int)>
    9208:	e3a02001 	mov	r2, #1
    920c:	e3a01013 	mov	r1, #19
    9210:	e51b0008 	ldr	r0, [fp, #-8]
    9214:	eb0002b7 	bl	9cf8 <BusRaider::pinRawWrite(int, bool)>
    9218:	e3a0000a 	mov	r0, #10
    921c:	eb001f0f 	bl	10e60 <CTimer::SimpleusDelay(unsigned int)>
    9220:	e51b0008 	ldr	r0, [fp, #-8]
    9224:	eb0001eb 	bl	99d8 <BusRaider::muxClear()>
    9228:	ea000003 	b	923c <BusRaider::controlRelease(bool)+0xdc>
    922c:	e3a02001 	mov	r2, #1
    9230:	e3a01013 	mov	r1, #19
    9234:	e51b0008 	ldr	r0, [fp, #-8]
    9238:	eb0002ae 	bl	9cf8 <BusRaider::pinRawWrite(int, bool)>
    923c:	e320f000 	nop	{0}
    9240:	e24bd004 	sub	sp, fp, #4
    9244:	e8bd8800 	pop	{fp, pc}

00009248 <BusRaider::controlReqAndTake()>:
    9248:	e92d4800 	push	{fp, lr}
    924c:	e28db004 	add	fp, sp, #4
    9250:	e24dd010 	sub	sp, sp, #16
    9254:	e50b0010 	str	r0, [fp, #-16]
    9258:	e51b0010 	ldr	r0, [fp, #-16]
    925c:	ebffff80 	bl	9064 <BusRaider::controlRequestBus()>
    9260:	e3a03000 	mov	r3, #0
    9264:	e50b3008 	str	r3, [fp, #-8]
    9268:	e51b3008 	ldr	r3, [fp, #-8]
    926c:	e3530063 	cmp	r3, #99	; 0x63
    9270:	ca00000f 	bgt	92b4 <BusRaider::controlReqAndTake()+0x6c>
    9274:	e51b0010 	ldr	r0, [fp, #-16]
    9278:	ebffff8a 	bl	90a8 <BusRaider::controlBusAcknowledged()>
    927c:	e1a03000 	mov	r3, r0
    9280:	e3530000 	cmp	r3, #0
    9284:	13a03001 	movne	r3, #1
    9288:	03a03000 	moveq	r3, #0
    928c:	e6ef3073 	uxtb	r3, r3
    9290:	e3530000 	cmp	r3, #0
    9294:	1a000005 	bne	92b0 <BusRaider::controlReqAndTake()+0x68>
    9298:	e3a00001 	mov	r0, #1
    929c:	eb001eef 	bl	10e60 <CTimer::SimpleusDelay(unsigned int)>
    92a0:	e51b3008 	ldr	r3, [fp, #-8]
    92a4:	e2833001 	add	r3, r3, #1
    92a8:	e50b3008 	str	r3, [fp, #-8]
    92ac:	eaffffed 	b	9268 <BusRaider::controlReqAndTake()+0x20>
    92b0:	e320f000 	nop	{0}
    92b4:	e51b0010 	ldr	r0, [fp, #-16]
    92b8:	ebffff7a 	bl	90a8 <BusRaider::controlBusAcknowledged()>
    92bc:	e1a03000 	mov	r3, r0
    92c0:	e3530000 	cmp	r3, #0
    92c4:	03a03001 	moveq	r3, #1
    92c8:	13a03000 	movne	r3, #0
    92cc:	e6ef3073 	uxtb	r3, r3
    92d0:	e3530000 	cmp	r3, #0
    92d4:	0a000004 	beq	92ec <BusRaider::controlReqAndTake()+0xa4>
    92d8:	e3a01000 	mov	r1, #0
    92dc:	e51b0010 	ldr	r0, [fp, #-16]
    92e0:	ebffff9e 	bl	9160 <BusRaider::controlRelease(bool)>
    92e4:	e3a03002 	mov	r3, #2
    92e8:	ea000002 	b	92f8 <BusRaider::controlReqAndTake()+0xb0>
    92ec:	e51b0010 	ldr	r0, [fp, #-16]
    92f0:	ebffff79 	bl	90dc <BusRaider::controlTake()>
    92f4:	e3a03000 	mov	r3, #0
    92f8:	e1a00003 	mov	r0, r3
    92fc:	e24bd004 	sub	sp, fp, #4
    9300:	e8bd8800 	pop	{fp, pc}

00009304 <BusRaider::addrLowSet(unsigned long)>:
    9304:	e92d4800 	push	{fp, lr}
    9308:	e28db004 	add	fp, sp, #4
    930c:	e24dd010 	sub	sp, sp, #16
    9310:	e50b0010 	str	r0, [fp, #-16]
    9314:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    9318:	e3a00064 	mov	r0, #100	; 0x64
    931c:	ebfffd73 	bl	88f0 <lowlevCycleDelay>
    9320:	e3a01004 	mov	r1, #4
    9324:	e51b0010 	ldr	r0, [fp, #-16]
    9328:	eb000198 	bl	9990 <BusRaider::muxSet(int)>
    932c:	e3a00064 	mov	r0, #100	; 0x64
    9330:	ebfffd6e 	bl	88f0 <lowlevCycleDelay>
    9334:	e51b0010 	ldr	r0, [fp, #-16]
    9338:	eb0001a6 	bl	99d8 <BusRaider::muxClear()>
    933c:	e3a03000 	mov	r3, #0
    9340:	e50b3008 	str	r3, [fp, #-8]
    9344:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    9348:	e6ef3073 	uxtb	r3, r3
    934c:	e2832001 	add	r2, r3, #1
    9350:	e51b3008 	ldr	r3, [fp, #-8]
    9354:	e1520003 	cmp	r2, r3
    9358:	9a00000d 	bls	9394 <BusRaider::addrLowSet(unsigned long)+0x90>
    935c:	e3a01801 	mov	r1, #65536	; 0x10000
    9360:	e59f0038 	ldr	r0, [pc, #56]	; 93a0 <BusRaider::addrLowSet(unsigned long)+0x9c>
    9364:	ebfffd87 	bl	8988 <write32>
    9368:	e3a00064 	mov	r0, #100	; 0x64
    936c:	ebfffd5f 	bl	88f0 <lowlevCycleDelay>
    9370:	e3a01801 	mov	r1, #65536	; 0x10000
    9374:	e59f0028 	ldr	r0, [pc, #40]	; 93a4 <BusRaider::addrLowSet(unsigned long)+0xa0>
    9378:	ebfffd82 	bl	8988 <write32>
    937c:	e3a00064 	mov	r0, #100	; 0x64
    9380:	ebfffd5a 	bl	88f0 <lowlevCycleDelay>
    9384:	e51b3008 	ldr	r3, [fp, #-8]
    9388:	e2833001 	add	r3, r3, #1
    938c:	e50b3008 	str	r3, [fp, #-8]
    9390:	eaffffeb 	b	9344 <BusRaider::addrLowSet(unsigned long)+0x40>
    9394:	e320f000 	nop	{0}
    9398:	e24bd004 	sub	sp, fp, #4
    939c:	e8bd8800 	pop	{fp, pc}
    93a0:	2020001c 	.word	0x2020001c
    93a4:	20200028 	.word	0x20200028

000093a8 <BusRaider::addrLowInc()>:
    93a8:	e92d4800 	push	{fp, lr}
    93ac:	e28db004 	add	fp, sp, #4
    93b0:	e24dd008 	sub	sp, sp, #8
    93b4:	e50b0008 	str	r0, [fp, #-8]
    93b8:	e3a01801 	mov	r1, #65536	; 0x10000
    93bc:	e59f0028 	ldr	r0, [pc, #40]	; 93ec <BusRaider::addrLowInc()+0x44>
    93c0:	ebfffd70 	bl	8988 <write32>
    93c4:	e3a00064 	mov	r0, #100	; 0x64
    93c8:	ebfffd48 	bl	88f0 <lowlevCycleDelay>
    93cc:	e3a01801 	mov	r1, #65536	; 0x10000
    93d0:	e59f0018 	ldr	r0, [pc, #24]	; 93f0 <BusRaider::addrLowInc()+0x48>
    93d4:	ebfffd6b 	bl	8988 <write32>
    93d8:	e3a00064 	mov	r0, #100	; 0x64
    93dc:	ebfffd43 	bl	88f0 <lowlevCycleDelay>
    93e0:	e320f000 	nop	{0}
    93e4:	e24bd004 	sub	sp, fp, #4
    93e8:	e8bd8800 	pop	{fp, pc}
    93ec:	2020001c 	.word	0x2020001c
    93f0:	20200028 	.word	0x20200028

000093f4 <BusRaider::addrHighSet(unsigned long)>:
    93f4:	e92d4800 	push	{fp, lr}
    93f8:	e28db004 	add	fp, sp, #4
    93fc:	e24dd010 	sub	sp, sp, #16
    9400:	e50b0010 	str	r0, [fp, #-16]
    9404:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    9408:	e3a03000 	mov	r3, #0
    940c:	e50b3008 	str	r3, [fp, #-8]
    9410:	e51b3008 	ldr	r3, [fp, #-8]
    9414:	e3530008 	cmp	r3, #8
    9418:	8a00001b 	bhi	948c <BusRaider::addrHighSet(unsigned long)+0x98>
    941c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    9420:	e2033080 	and	r3, r3, #128	; 0x80
    9424:	e3530000 	cmp	r3, #0
    9428:	0a000003 	beq	943c <BusRaider::addrHighSet(unsigned long)+0x48>
    942c:	e3a01007 	mov	r1, #7
    9430:	e51b0010 	ldr	r0, [fp, #-16]
    9434:	eb000155 	bl	9990 <BusRaider::muxSet(int)>
    9438:	ea000002 	b	9448 <BusRaider::addrHighSet(unsigned long)+0x54>
    943c:	e3a01000 	mov	r1, #0
    9440:	e51b0010 	ldr	r0, [fp, #-16]
    9444:	eb000151 	bl	9990 <BusRaider::muxSet(int)>
    9448:	e3a00064 	mov	r0, #100	; 0x64
    944c:	ebfffd27 	bl	88f0 <lowlevCycleDelay>
    9450:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    9454:	e1a03083 	lsl	r3, r3, #1
    9458:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    945c:	e3a01080 	mov	r1, #128	; 0x80
    9460:	e59f0040 	ldr	r0, [pc, #64]	; 94a8 <BusRaider::addrHighSet(unsigned long)+0xb4>
    9464:	ebfffd47 	bl	8988 <write32>
    9468:	e3a00064 	mov	r0, #100	; 0x64
    946c:	ebfffd1f 	bl	88f0 <lowlevCycleDelay>
    9470:	e3a01080 	mov	r1, #128	; 0x80
    9474:	e59f0030 	ldr	r0, [pc, #48]	; 94ac <BusRaider::addrHighSet(unsigned long)+0xb8>
    9478:	ebfffd42 	bl	8988 <write32>
    947c:	e51b3008 	ldr	r3, [fp, #-8]
    9480:	e2833001 	add	r3, r3, #1
    9484:	e50b3008 	str	r3, [fp, #-8]
    9488:	eaffffe0 	b	9410 <BusRaider::addrHighSet(unsigned long)+0x1c>
    948c:	e3a00064 	mov	r0, #100	; 0x64
    9490:	ebfffd16 	bl	88f0 <lowlevCycleDelay>
    9494:	e51b0010 	ldr	r0, [fp, #-16]
    9498:	eb00014e 	bl	99d8 <BusRaider::muxClear()>
    949c:	e320f000 	nop	{0}
    94a0:	e24bd004 	sub	sp, fp, #4
    94a4:	e8bd8800 	pop	{fp, pc}
    94a8:	2020001c 	.word	0x2020001c
    94ac:	20200028 	.word	0x20200028

000094b0 <BusRaider::addrSet(unsigned int)>:
    94b0:	e92d4800 	push	{fp, lr}
    94b4:	e28db004 	add	fp, sp, #4
    94b8:	e24dd008 	sub	sp, sp, #8
    94bc:	e50b0008 	str	r0, [fp, #-8]
    94c0:	e50b100c 	str	r1, [fp, #-12]
    94c4:	e51b300c 	ldr	r3, [fp, #-12]
    94c8:	e1a03423 	lsr	r3, r3, #8
    94cc:	e1a01003 	mov	r1, r3
    94d0:	e51b0008 	ldr	r0, [fp, #-8]
    94d4:	ebffffc6 	bl	93f4 <BusRaider::addrHighSet(unsigned long)>
    94d8:	e51b300c 	ldr	r3, [fp, #-12]
    94dc:	e6ef3073 	uxtb	r3, r3
    94e0:	e1a01003 	mov	r1, r3
    94e4:	e51b0008 	ldr	r0, [fp, #-8]
    94e8:	ebffff85 	bl	9304 <BusRaider::addrLowSet(unsigned long)>
    94ec:	e320f000 	nop	{0}
    94f0:	e24bd004 	sub	sp, fp, #4
    94f4:	e8bd8800 	pop	{fp, pc}

000094f8 <BusRaider::byteWrite(unsigned long, int)>:
    94f8:	e92d4800 	push	{fp, lr}
    94fc:	e28db004 	add	fp, sp, #4
    9500:	e24dd010 	sub	sp, sp, #16
    9504:	e50b0008 	str	r0, [fp, #-8]
    9508:	e50b100c 	str	r1, [fp, #-12]
    950c:	e50b2010 	str	r2, [fp, #-16]
    9510:	e51b300c 	ldr	r3, [fp, #-12]
    9514:	e6ef3073 	uxtb	r3, r3
    9518:	e1a01003 	mov	r1, r3
    951c:	e51b0008 	ldr	r0, [fp, #-8]
    9520:	eb000174 	bl	9af8 <BusRaider::pibSetValue(unsigned char)>
    9524:	e51b3010 	ldr	r3, [fp, #-16]
    9528:	e3530000 	cmp	r3, #0
    952c:	0a000001 	beq	9538 <BusRaider::byteWrite(unsigned long, int)+0x40>
    9530:	e59f3068 	ldr	r3, [pc, #104]	; 95a0 <BusRaider::byteWrite(unsigned long, int)+0xa8>
    9534:	ea000000 	b	953c <BusRaider::byteWrite(unsigned long, int)+0x44>
    9538:	e59f3064 	ldr	r3, [pc, #100]	; 95a4 <BusRaider::byteWrite(unsigned long, int)+0xac>
    953c:	e1a01003 	mov	r1, r3
    9540:	e59f0060 	ldr	r0, [pc, #96]	; 95a8 <BusRaider::byteWrite(unsigned long, int)+0xb0>
    9544:	ebfffd0f 	bl	8988 <write32>
    9548:	e3a01c02 	mov	r1, #512	; 0x200
    954c:	e59f0058 	ldr	r0, [pc, #88]	; 95ac <BusRaider::byteWrite(unsigned long, int)+0xb4>
    9550:	ebfffd0c 	bl	8988 <write32>
    9554:	e3a01802 	mov	r1, #131072	; 0x20000
    9558:	e59f0048 	ldr	r0, [pc, #72]	; 95a8 <BusRaider::byteWrite(unsigned long, int)+0xb0>
    955c:	ebfffd09 	bl	8988 <write32>
    9560:	e3a00064 	mov	r0, #100	; 0x64
    9564:	ebfffce1 	bl	88f0 <lowlevCycleDelay>
    9568:	e51b3010 	ldr	r3, [fp, #-16]
    956c:	e3530000 	cmp	r3, #0
    9570:	0a000001 	beq	957c <BusRaider::byteWrite(unsigned long, int)+0x84>
    9574:	e59f3034 	ldr	r3, [pc, #52]	; 95b0 <BusRaider::byteWrite(unsigned long, int)+0xb8>
    9578:	ea000000 	b	9580 <BusRaider::byteWrite(unsigned long, int)+0x88>
    957c:	e59f3030 	ldr	r3, [pc, #48]	; 95b4 <BusRaider::byteWrite(unsigned long, int)+0xbc>
    9580:	e1a01003 	mov	r1, r3
    9584:	e59f0020 	ldr	r0, [pc, #32]	; 95ac <BusRaider::byteWrite(unsigned long, int)+0xb4>
    9588:	ebfffcfe 	bl	8988 <write32>
    958c:	e51b0008 	ldr	r0, [fp, #-8]
    9590:	eb000110 	bl	99d8 <BusRaider::muxClear()>
    9594:	e320f000 	nop	{0}
    9598:	e24bd004 	sub	sp, fp, #4
    959c:	e8bd8800 	pop	{fp, pc}
    95a0:	00000e42 	.word	0x00000e42
    95a4:	00000e41 	.word	0x00000e41
    95a8:	20200028 	.word	0x20200028
    95ac:	2020001c 	.word	0x2020001c
    95b0:	00020042 	.word	0x00020042
    95b4:	00020041 	.word	0x00020041

000095b8 <BusRaider::byteRead(int)>:
    95b8:	e92d4800 	push	{fp, lr}
    95bc:	e28db004 	add	fp, sp, #4
    95c0:	e24dd010 	sub	sp, sp, #16
    95c4:	e50b0010 	str	r0, [fp, #-16]
    95c8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    95cc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    95d0:	e3530000 	cmp	r3, #0
    95d4:	0a000001 	beq	95e0 <BusRaider::byteRead(int)+0x28>
    95d8:	e59f3078 	ldr	r3, [pc, #120]	; 9658 <BusRaider::byteRead(int)+0xa0>
    95dc:	ea000000 	b	95e4 <BusRaider::byteRead(int)+0x2c>
    95e0:	e59f3074 	ldr	r3, [pc, #116]	; 965c <BusRaider::byteRead(int)+0xa4>
    95e4:	e1a01003 	mov	r1, r3
    95e8:	e59f0070 	ldr	r0, [pc, #112]	; 9660 <BusRaider::byteRead(int)+0xa8>
    95ec:	ebfffce5 	bl	8988 <write32>
    95f0:	e3a01c02 	mov	r1, #512	; 0x200
    95f4:	e59f0068 	ldr	r0, [pc, #104]	; 9664 <BusRaider::byteRead(int)+0xac>
    95f8:	ebfffce2 	bl	8988 <write32>
    95fc:	e3a00064 	mov	r0, #100	; 0x64
    9600:	ebfffcba 	bl	88f0 <lowlevCycleDelay>
    9604:	e59f005c 	ldr	r0, [pc, #92]	; 9668 <BusRaider::byteRead(int)+0xb0>
    9608:	ebfffcd4 	bl	8960 <read32>
    960c:	e1a03000 	mov	r3, r0
    9610:	e1a03a23 	lsr	r3, r3, #20
    9614:	e54b3005 	strb	r3, [fp, #-5]
    9618:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    961c:	e3530000 	cmp	r3, #0
    9620:	0a000001 	beq	962c <BusRaider::byteRead(int)+0x74>
    9624:	e59f3040 	ldr	r3, [pc, #64]	; 966c <BusRaider::byteRead(int)+0xb4>
    9628:	ea000000 	b	9630 <BusRaider::byteRead(int)+0x78>
    962c:	e59f303c 	ldr	r3, [pc, #60]	; 9670 <BusRaider::byteRead(int)+0xb8>
    9630:	e1a01003 	mov	r1, r3
    9634:	e59f0028 	ldr	r0, [pc, #40]	; 9664 <BusRaider::byteRead(int)+0xac>
    9638:	ebfffcd2 	bl	8988 <write32>
    963c:	e3a01c0e 	mov	r1, #3584	; 0xe00
    9640:	e59f0018 	ldr	r0, [pc, #24]	; 9660 <BusRaider::byteRead(int)+0xa8>
    9644:	ebfffccf 	bl	8988 <write32>
    9648:	e55b3005 	ldrb	r3, [fp, #-5]
    964c:	e1a00003 	mov	r0, r3
    9650:	e24bd004 	sub	sp, fp, #4
    9654:	e8bd8800 	pop	{fp, pc}
    9658:	00040e02 	.word	0x00040e02
    965c:	00040e01 	.word	0x00040e01
    9660:	20200028 	.word	0x20200028
    9664:	2020001c 	.word	0x2020001c
    9668:	20200034 	.word	0x20200034
    966c:	00040002 	.word	0x00040002
    9670:	00040001 	.word	0x00040001

00009674 <BusRaider::blockWrite(unsigned long, unsigned char const*, unsigned long, int, int)>:
    9674:	e92d4800 	push	{fp, lr}
    9678:	e28db004 	add	fp, sp, #4
    967c:	e24dd018 	sub	sp, sp, #24
    9680:	e50b0010 	str	r0, [fp, #-16]
    9684:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    9688:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    968c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    9690:	e59b3004 	ldr	r3, [fp, #4]
    9694:	e3530000 	cmp	r3, #0
    9698:	0a000008 	beq	96c0 <BusRaider::blockWrite(unsigned long, unsigned char const*, unsigned long, int, int)+0x4c>
    969c:	e51b0010 	ldr	r0, [fp, #-16]
    96a0:	ebfffee8 	bl	9248 <BusRaider::controlReqAndTake()>
    96a4:	e1a03000 	mov	r3, r0
    96a8:	e54b3009 	strb	r3, [fp, #-9]
    96ac:	e55b3009 	ldrb	r3, [fp, #-9]
    96b0:	e3530000 	cmp	r3, #0
    96b4:	0a000001 	beq	96c0 <BusRaider::blockWrite(unsigned long, unsigned char const*, unsigned long, int, int)+0x4c>
    96b8:	e55b3009 	ldrb	r3, [fp, #-9]
    96bc:	ea00002e 	b	977c <BusRaider::blockWrite(unsigned long, unsigned char const*, unsigned long, int, int)+0x108>
    96c0:	e51b0010 	ldr	r0, [fp, #-16]
    96c4:	eb0000fc 	bl	9abc <BusRaider::pibSetIn()>
    96c8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
    96cc:	e51b0010 	ldr	r0, [fp, #-16]
    96d0:	ebffff76 	bl	94b0 <BusRaider::addrSet(unsigned int)>
    96d4:	e51b0010 	ldr	r0, [fp, #-16]
    96d8:	eb0000e5 	bl	9a74 <BusRaider::pibSetOut()>
    96dc:	e3a03000 	mov	r3, #0
    96e0:	e50b3008 	str	r3, [fp, #-8]
    96e4:	e51b2008 	ldr	r2, [fp, #-8]
    96e8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
    96ec:	e1520003 	cmp	r2, r3
    96f0:	2a000018 	bcs	9758 <BusRaider::blockWrite(unsigned long, unsigned char const*, unsigned long, int, int)+0xe4>
    96f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
    96f8:	e5d33000 	ldrb	r3, [r3]
    96fc:	e59b2008 	ldr	r2, [fp, #8]
    9700:	e1a01003 	mov	r1, r3
    9704:	e51b0010 	ldr	r0, [fp, #-16]
    9708:	ebffff7a 	bl	94f8 <BusRaider::byteWrite(unsigned long, int)>
    970c:	e51b0010 	ldr	r0, [fp, #-16]
    9710:	ebffff24 	bl	93a8 <BusRaider::addrLowInc()>
    9714:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
    9718:	e2833001 	add	r3, r3, #1
    971c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    9720:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    9724:	e2833001 	add	r3, r3, #1
    9728:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    972c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    9730:	e6ef3073 	uxtb	r3, r3
    9734:	e3530000 	cmp	r3, #0
    9738:	1a000002 	bne	9748 <BusRaider::blockWrite(unsigned long, unsigned char const*, unsigned long, int, int)+0xd4>
    973c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
    9740:	e51b0010 	ldr	r0, [fp, #-16]
    9744:	ebffff59 	bl	94b0 <BusRaider::addrSet(unsigned int)>
    9748:	e51b3008 	ldr	r3, [fp, #-8]
    974c:	e2833001 	add	r3, r3, #1
    9750:	e50b3008 	str	r3, [fp, #-8]
    9754:	eaffffe2 	b	96e4 <BusRaider::blockWrite(unsigned long, unsigned char const*, unsigned long, int, int)+0x70>
    9758:	e51b0010 	ldr	r0, [fp, #-16]
    975c:	eb0000d6 	bl	9abc <BusRaider::pibSetIn()>
    9760:	e59b3004 	ldr	r3, [fp, #4]
    9764:	e3530000 	cmp	r3, #0
    9768:	0a000002 	beq	9778 <BusRaider::blockWrite(unsigned long, unsigned char const*, unsigned long, int, int)+0x104>
    976c:	e3a01000 	mov	r1, #0
    9770:	e51b0010 	ldr	r0, [fp, #-16]
    9774:	ebfffe79 	bl	9160 <BusRaider::controlRelease(bool)>
    9778:	e3a03000 	mov	r3, #0
    977c:	e1a00003 	mov	r0, r3
    9780:	e24bd004 	sub	sp, fp, #4
    9784:	e8bd8800 	pop	{fp, pc}

00009788 <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)>:
    9788:	e92d4800 	push	{fp, lr}
    978c:	e28db004 	add	fp, sp, #4
    9790:	e24dd018 	sub	sp, sp, #24
    9794:	e50b0010 	str	r0, [fp, #-16]
    9798:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    979c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    97a0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    97a4:	e59b3004 	ldr	r3, [fp, #4]
    97a8:	e3530000 	cmp	r3, #0
    97ac:	0a000008 	beq	97d4 <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0x4c>
    97b0:	e51b0010 	ldr	r0, [fp, #-16]
    97b4:	ebfffea3 	bl	9248 <BusRaider::controlReqAndTake()>
    97b8:	e1a03000 	mov	r3, r0
    97bc:	e54b3009 	strb	r3, [fp, #-9]
    97c0:	e55b3009 	ldrb	r3, [fp, #-9]
    97c4:	e3530000 	cmp	r3, #0
    97c8:	0a000001 	beq	97d4 <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0x4c>
    97cc:	e55b3009 	ldrb	r3, [fp, #-9]
    97d0:	ea000047 	b	98f4 <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0x16c>
    97d4:	e51b0010 	ldr	r0, [fp, #-16]
    97d8:	eb0000b7 	bl	9abc <BusRaider::pibSetIn()>
    97dc:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
    97e0:	e51b0010 	ldr	r0, [fp, #-16]
    97e4:	ebffff31 	bl	94b0 <BusRaider::addrSet(unsigned int)>
    97e8:	e3a01c02 	mov	r1, #512	; 0x200
    97ec:	e59f010c 	ldr	r0, [pc, #268]	; 9900 <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0x178>
    97f0:	ebfffc64 	bl	8988 <write32>
    97f4:	e3a03000 	mov	r3, #0
    97f8:	e50b3008 	str	r3, [fp, #-8]
    97fc:	e51b2008 	ldr	r2, [fp, #-8]
    9800:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
    9804:	e1520003 	cmp	r2, r3
    9808:	2a000030 	bcs	98d0 <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0x148>
    980c:	e59b3008 	ldr	r3, [fp, #8]
    9810:	e3530000 	cmp	r3, #0
    9814:	0a000001 	beq	9820 <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0x98>
    9818:	e59f30e4 	ldr	r3, [pc, #228]	; 9904 <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0x17c>
    981c:	ea000000 	b	9824 <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0x9c>
    9820:	e59f30e0 	ldr	r3, [pc, #224]	; 9908 <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0x180>
    9824:	e1a01003 	mov	r1, r3
    9828:	e59f00dc 	ldr	r0, [pc, #220]	; 990c <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0x184>
    982c:	ebfffc55 	bl	8988 <write32>
    9830:	e3a00064 	mov	r0, #100	; 0x64
    9834:	ebfffc2d 	bl	88f0 <lowlevCycleDelay>
    9838:	e59f00d0 	ldr	r0, [pc, #208]	; 9910 <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0x188>
    983c:	ebfffc47 	bl	8960 <read32>
    9840:	e1a03000 	mov	r3, r0
    9844:	e1a03a23 	lsr	r3, r3, #20
    9848:	e6ef2073 	uxtb	r2, r3
    984c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
    9850:	e5c32000 	strb	r2, [r3]
    9854:	e59b3008 	ldr	r3, [fp, #8]
    9858:	e3530000 	cmp	r3, #0
    985c:	0a000001 	beq	9868 <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0xe0>
    9860:	e59f30ac 	ldr	r3, [pc, #172]	; 9914 <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0x18c>
    9864:	ea000000 	b	986c <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0xe4>
    9868:	e59f30a8 	ldr	r3, [pc, #168]	; 9918 <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0x190>
    986c:	e1a01003 	mov	r1, r3
    9870:	e59f0088 	ldr	r0, [pc, #136]	; 9900 <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0x178>
    9874:	ebfffc43 	bl	8988 <write32>
    9878:	e3a00064 	mov	r0, #100	; 0x64
    987c:	ebfffc1b 	bl	88f0 <lowlevCycleDelay>
    9880:	e3a01801 	mov	r1, #65536	; 0x10000
    9884:	e59f0080 	ldr	r0, [pc, #128]	; 990c <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0x184>
    9888:	ebfffc3e 	bl	8988 <write32>
    988c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
    9890:	e2833001 	add	r3, r3, #1
    9894:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    9898:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    989c:	e2833001 	add	r3, r3, #1
    98a0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    98a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    98a8:	e6ef3073 	uxtb	r3, r3
    98ac:	e3530000 	cmp	r3, #0
    98b0:	1a000002 	bne	98c0 <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0x138>
    98b4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
    98b8:	e51b0010 	ldr	r0, [fp, #-16]
    98bc:	ebfffefb 	bl	94b0 <BusRaider::addrSet(unsigned int)>
    98c0:	e51b3008 	ldr	r3, [fp, #-8]
    98c4:	e2833001 	add	r3, r3, #1
    98c8:	e50b3008 	str	r3, [fp, #-8]
    98cc:	eaffffca 	b	97fc <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0x74>
    98d0:	e51b0010 	ldr	r0, [fp, #-16]
    98d4:	eb00003f 	bl	99d8 <BusRaider::muxClear()>
    98d8:	e59b3004 	ldr	r3, [fp, #4]
    98dc:	e3530000 	cmp	r3, #0
    98e0:	0a000002 	beq	98f0 <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0x168>
    98e4:	e3a01000 	mov	r1, #0
    98e8:	e51b0010 	ldr	r0, [fp, #-16]
    98ec:	ebfffe1b 	bl	9160 <BusRaider::controlRelease(bool)>
    98f0:	e3a03000 	mov	r3, #0
    98f4:	e1a00003 	mov	r0, r3
    98f8:	e24bd004 	sub	sp, fp, #4
    98fc:	e8bd8800 	pop	{fp, pc}
    9900:	2020001c 	.word	0x2020001c
    9904:	00040002 	.word	0x00040002
    9908:	00040001 	.word	0x00040001
    990c:	20200028 	.word	0x20200028
    9910:	20200034 	.word	0x20200034
    9914:	00050002 	.word	0x00050002
    9918:	00050001 	.word	0x00050001

0000991c <BusRaider::setPinOut(CGPIOPin&, int, bool)>:
    991c:	e92d4800 	push	{fp, lr}
    9920:	e28db004 	add	fp, sp, #4
    9924:	e24dd010 	sub	sp, sp, #16
    9928:	e50b0008 	str	r0, [fp, #-8]
    992c:	e50b100c 	str	r1, [fp, #-12]
    9930:	e50b2010 	str	r2, [fp, #-16]
    9934:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    9938:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
    993c:	e3a02000 	mov	r2, #0
    9940:	e51b1010 	ldr	r1, [fp, #-16]
    9944:	e51b0008 	ldr	r0, [fp, #-8]
    9948:	eb000090 	bl	9b90 <BusRaider::pinRawMode(int, bool, bool)>
    994c:	e320f000 	nop	{0}
    9950:	e24bd004 	sub	sp, fp, #4
    9954:	e8bd8800 	pop	{fp, pc}

00009958 <BusRaider::setPinIn(CGPIOPin&, int)>:
    9958:	e92d4800 	push	{fp, lr}
    995c:	e28db004 	add	fp, sp, #4
    9960:	e24dd010 	sub	sp, sp, #16
    9964:	e50b0008 	str	r0, [fp, #-8]
    9968:	e50b100c 	str	r1, [fp, #-12]
    996c:	e50b2010 	str	r2, [fp, #-16]
    9970:	e3a03000 	mov	r3, #0
    9974:	e3a02001 	mov	r2, #1
    9978:	e51b1010 	ldr	r1, [fp, #-16]
    997c:	e51b0008 	ldr	r0, [fp, #-8]
    9980:	eb000082 	bl	9b90 <BusRaider::pinRawMode(int, bool, bool)>
    9984:	e320f000 	nop	{0}
    9988:	e24bd004 	sub	sp, fp, #4
    998c:	e8bd8800 	pop	{fp, pc}

00009990 <BusRaider::muxSet(int)>:
    9990:	e92d4800 	push	{fp, lr}
    9994:	e28db004 	add	fp, sp, #4
    9998:	e24dd008 	sub	sp, sp, #8
    999c:	e50b0008 	str	r0, [fp, #-8]
    99a0:	e50b100c 	str	r1, [fp, #-12]
    99a4:	e3a01c0e 	mov	r1, #3584	; 0xe00
    99a8:	e59f0020 	ldr	r0, [pc, #32]	; 99d0 <BusRaider::muxSet(int)+0x40>
    99ac:	ebfffbf5 	bl	8988 <write32>
    99b0:	e51b300c 	ldr	r3, [fp, #-12]
    99b4:	e1a03483 	lsl	r3, r3, #9
    99b8:	e1a01003 	mov	r1, r3
    99bc:	e59f0010 	ldr	r0, [pc, #16]	; 99d4 <BusRaider::muxSet(int)+0x44>
    99c0:	ebfffbf0 	bl	8988 <write32>
    99c4:	e320f000 	nop	{0}
    99c8:	e24bd004 	sub	sp, fp, #4
    99cc:	e8bd8800 	pop	{fp, pc}
    99d0:	20200028 	.word	0x20200028
    99d4:	2020001c 	.word	0x2020001c

000099d8 <BusRaider::muxClear()>:
    99d8:	e92d4800 	push	{fp, lr}
    99dc:	e28db004 	add	fp, sp, #4
    99e0:	e24dd008 	sub	sp, sp, #8
    99e4:	e50b0008 	str	r0, [fp, #-8]
    99e8:	e3a01c0e 	mov	r1, #3584	; 0xe00
    99ec:	e59f000c 	ldr	r0, [pc, #12]	; 9a00 <BusRaider::muxClear()+0x28>
    99f0:	ebfffbe4 	bl	8988 <write32>
    99f4:	e320f000 	nop	{0}
    99f8:	e24bd004 	sub	sp, fp, #4
    99fc:	e8bd8800 	pop	{fp, pc}
    9a00:	20200028 	.word	0x20200028

00009a04 <BusRaider::waitIntClear()>:
    9a04:	e92d4800 	push	{fp, lr}
    9a08:	e28db004 	add	fp, sp, #4
    9a0c:	e24dd008 	sub	sp, sp, #8
    9a10:	e50b0008 	str	r0, [fp, #-8]
    9a14:	e3e01000 	mvn	r1, #0
    9a18:	e59f000c 	ldr	r0, [pc, #12]	; 9a2c <BusRaider::waitIntClear()+0x28>
    9a1c:	ebfffbd9 	bl	8988 <write32>
    9a20:	e320f000 	nop	{0}
    9a24:	e24bd004 	sub	sp, fp, #4
    9a28:	e8bd8800 	pop	{fp, pc}
    9a2c:	20200040 	.word	0x20200040

00009a30 <BusRaider::waitIntDisable()>:
    9a30:	e92d4800 	push	{fp, lr}
    9a34:	e28db004 	add	fp, sp, #4
    9a38:	e24dd008 	sub	sp, sp, #8
    9a3c:	e50b0008 	str	r0, [fp, #-8]
    9a40:	eb0008df 	bl	bdc4 <CInterruptSystem::DisableFIQ()>
    9a44:	e320f000 	nop	{0}
    9a48:	e24bd004 	sub	sp, fp, #4
    9a4c:	e8bd8800 	pop	{fp, pc}

00009a50 <BusRaider::waitIntEnable()>:
    9a50:	e92d4800 	push	{fp, lr}
    9a54:	e28db004 	add	fp, sp, #4
    9a58:	e24dd008 	sub	sp, sp, #8
    9a5c:	e50b0008 	str	r0, [fp, #-8]
    9a60:	e3a00000 	mov	r0, #0
    9a64:	eb00088e 	bl	bca4 <CInterruptSystem::EnableFIQ(unsigned int)>
    9a68:	e320f000 	nop	{0}
    9a6c:	e24bd004 	sub	sp, fp, #4
    9a70:	e8bd8800 	pop	{fp, pc}

00009a74 <BusRaider::pibSetOut()>:
    9a74:	e92d4800 	push	{fp, lr}
    9a78:	e28db004 	add	fp, sp, #4
    9a7c:	e24dd008 	sub	sp, sp, #8
    9a80:	e50b0008 	str	r0, [fp, #-8]
    9a84:	e59f0028 	ldr	r0, [pc, #40]	; 9ab4 <BusRaider::pibSetOut()+0x40>
    9a88:	ebfffbb4 	bl	8960 <read32>
    9a8c:	e1a03000 	mov	r3, r0
    9a90:	e20324ff 	and	r2, r3, #-16777216	; 0xff000000
    9a94:	e59f301c 	ldr	r3, [pc, #28]	; 9ab8 <BusRaider::pibSetOut()+0x44>
    9a98:	e1823003 	orr	r3, r2, r3
    9a9c:	e1a01003 	mov	r1, r3
    9aa0:	e59f000c 	ldr	r0, [pc, #12]	; 9ab4 <BusRaider::pibSetOut()+0x40>
    9aa4:	ebfffbb7 	bl	8988 <write32>
    9aa8:	e320f000 	nop	{0}
    9aac:	e24bd004 	sub	sp, fp, #4
    9ab0:	e8bd8800 	pop	{fp, pc}
    9ab4:	20200008 	.word	0x20200008
    9ab8:	00249249 	.word	0x00249249

00009abc <BusRaider::pibSetIn()>:
    9abc:	e92d4800 	push	{fp, lr}
    9ac0:	e28db004 	add	fp, sp, #4
    9ac4:	e24dd008 	sub	sp, sp, #8
    9ac8:	e50b0008 	str	r0, [fp, #-8]
    9acc:	e59f0020 	ldr	r0, [pc, #32]	; 9af4 <BusRaider::pibSetIn()+0x38>
    9ad0:	ebfffba2 	bl	8960 <read32>
    9ad4:	e1a03000 	mov	r3, r0
    9ad8:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
    9adc:	e1a01003 	mov	r1, r3
    9ae0:	e59f000c 	ldr	r0, [pc, #12]	; 9af4 <BusRaider::pibSetIn()+0x38>
    9ae4:	ebfffba7 	bl	8988 <write32>
    9ae8:	e320f000 	nop	{0}
    9aec:	e24bd004 	sub	sp, fp, #4
    9af0:	e8bd8800 	pop	{fp, pc}
    9af4:	20200008 	.word	0x20200008

00009af8 <BusRaider::pibSetValue(unsigned char)>:
    9af8:	e92d4800 	push	{fp, lr}
    9afc:	e28db004 	add	fp, sp, #4
    9b00:	e24dd010 	sub	sp, sp, #16
    9b04:	e50b0010 	str	r0, [fp, #-16]
    9b08:	e1a03001 	mov	r3, r1
    9b0c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    9b10:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
    9b14:	e1a03a03 	lsl	r3, r3, #20
    9b18:	e50b3008 	str	r3, [fp, #-8]
    9b1c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
    9b20:	e1a03a03 	lsl	r3, r3, #20
    9b24:	e1e03003 	mvn	r3, r3
    9b28:	e20336ff 	and	r3, r3, #267386880	; 0xff00000
    9b2c:	e50b300c 	str	r3, [fp, #-12]
    9b30:	e51b1008 	ldr	r1, [fp, #-8]
    9b34:	e59f0018 	ldr	r0, [pc, #24]	; 9b54 <BusRaider::pibSetValue(unsigned char)+0x5c>
    9b38:	ebfffb92 	bl	8988 <write32>
    9b3c:	e51b100c 	ldr	r1, [fp, #-12]
    9b40:	e59f0010 	ldr	r0, [pc, #16]	; 9b58 <BusRaider::pibSetValue(unsigned char)+0x60>
    9b44:	ebfffb8f 	bl	8988 <write32>
    9b48:	e320f000 	nop	{0}
    9b4c:	e24bd004 	sub	sp, fp, #4
    9b50:	e8bd8800 	pop	{fp, pc}
    9b54:	2020001c 	.word	0x2020001c
    9b58:	20200028 	.word	0x20200028

00009b5c <BusRaider::pibGetValue()>:
    9b5c:	e92d4800 	push	{fp, lr}
    9b60:	e28db004 	add	fp, sp, #4
    9b64:	e24dd008 	sub	sp, sp, #8
    9b68:	e50b0008 	str	r0, [fp, #-8]
    9b6c:	e59f0018 	ldr	r0, [pc, #24]	; 9b8c <BusRaider::pibGetValue()+0x30>
    9b70:	ebfffb7a 	bl	8960 <read32>
    9b74:	e1a03000 	mov	r3, r0
    9b78:	e1a03a23 	lsr	r3, r3, #20
    9b7c:	e6ef3073 	uxtb	r3, r3
    9b80:	e1a00003 	mov	r0, r3
    9b84:	e24bd004 	sub	sp, fp, #4
    9b88:	e8bd8800 	pop	{fp, pc}
    9b8c:	20200034 	.word	0x20200034

00009b90 <BusRaider::pinRawMode(int, bool, bool)>:
    9b90:	e92d4800 	push	{fp, lr}
    9b94:	e28db004 	add	fp, sp, #4
    9b98:	e24dd020 	sub	sp, sp, #32
    9b9c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    9ba0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    9ba4:	e1a01002 	mov	r1, r2
    9ba8:	e1a02003 	mov	r2, r3
    9bac:	e1a03001 	mov	r3, r1
    9bb0:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
    9bb4:	e1a03002 	mov	r3, r2
    9bb8:	e54b301e 	strb	r3, [fp, #-30]	; 0xffffffe2
    9bbc:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
    9bc0:	e2233001 	eor	r3, r3, #1
    9bc4:	e6ef3073 	uxtb	r3, r3
    9bc8:	e3530000 	cmp	r3, #0
    9bcc:	0a000004 	beq	9be4 <BusRaider::pinRawMode(int, bool, bool)+0x54>
    9bd0:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
    9bd4:	e1a02003 	mov	r2, r3
    9bd8:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
    9bdc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
    9be0:	eb000044 	bl	9cf8 <BusRaider::pinRawWrite(int, bool)>
    9be4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
    9be8:	e59f2104 	ldr	r2, [pc, #260]	; 9cf4 <BusRaider::pinRawMode(int, bool, bool)+0x164>
    9bec:	e0c21392 	smull	r1, r2, r2, r3
    9bf0:	e1a02142 	asr	r2, r2, #2
    9bf4:	e1a03fc3 	asr	r3, r3, #31
    9bf8:	e0423003 	sub	r3, r2, r3
    9bfc:	e2833302 	add	r3, r3, #134217728	; 0x8000000
    9c00:	e2833702 	add	r3, r3, #524288	; 0x80000
    9c04:	e1a03103 	lsl	r3, r3, #2
    9c08:	e50b3008 	str	r3, [fp, #-8]
    9c0c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
    9c10:	e59f30dc 	ldr	r3, [pc, #220]	; 9cf4 <BusRaider::pinRawMode(int, bool, bool)+0x164>
    9c14:	e0c31293 	smull	r1, r3, r3, r2
    9c18:	e1a01143 	asr	r1, r3, #2
    9c1c:	e1a03fc2 	asr	r3, r2, #31
    9c20:	e0411003 	sub	r1, r1, r3
    9c24:	e1a03001 	mov	r3, r1
    9c28:	e1a03103 	lsl	r3, r3, #2
    9c2c:	e0833001 	add	r3, r3, r1
    9c30:	e1a03083 	lsl	r3, r3, #1
    9c34:	e0421003 	sub	r1, r2, r3
    9c38:	e6ef3071 	uxtb	r3, r1
    9c3c:	e1a02003 	mov	r2, r3
    9c40:	e1a02082 	lsl	r2, r2, #1
    9c44:	e0823003 	add	r3, r2, r3
    9c48:	e54b3009 	strb	r3, [fp, #-9]
    9c4c:	e51b0008 	ldr	r0, [fp, #-8]
    9c50:	ebfffb42 	bl	8960 <read32>
    9c54:	e50b0010 	str	r0, [fp, #-16]
    9c58:	e55b3009 	ldrb	r3, [fp, #-9]
    9c5c:	e3a02007 	mov	r2, #7
    9c60:	e1a03312 	lsl	r3, r2, r3
    9c64:	e1e03003 	mvn	r3, r3
    9c68:	e1a02003 	mov	r2, r3
    9c6c:	e51b3010 	ldr	r3, [fp, #-16]
    9c70:	e0033002 	and	r3, r3, r2
    9c74:	e50b3010 	str	r3, [fp, #-16]
    9c78:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
    9c7c:	e3530000 	cmp	r3, #0
    9c80:	0a000001 	beq	9c8c <BusRaider::pinRawMode(int, bool, bool)+0xfc>
    9c84:	e3a03000 	mov	r3, #0
    9c88:	ea000000 	b	9c90 <BusRaider::pinRawMode(int, bool, bool)+0x100>
    9c8c:	e3a03001 	mov	r3, #1
    9c90:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    9c94:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
    9c98:	e203200f 	and	r2, r3, #15
    9c9c:	e55b3009 	ldrb	r3, [fp, #-9]
    9ca0:	e1a03312 	lsl	r3, r2, r3
    9ca4:	e1a02003 	mov	r2, r3
    9ca8:	e51b3010 	ldr	r3, [fp, #-16]
    9cac:	e1833002 	orr	r3, r3, r2
    9cb0:	e50b3010 	str	r3, [fp, #-16]
    9cb4:	e51b1010 	ldr	r1, [fp, #-16]
    9cb8:	e51b0008 	ldr	r0, [fp, #-8]
    9cbc:	ebfffb31 	bl	8988 <write32>
    9cc0:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
    9cc4:	e2233001 	eor	r3, r3, #1
    9cc8:	e6ef3073 	uxtb	r3, r3
    9ccc:	e3530000 	cmp	r3, #0
    9cd0:	0a000004 	beq	9ce8 <BusRaider::pinRawMode(int, bool, bool)+0x158>
    9cd4:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
    9cd8:	e1a02003 	mov	r2, r3
    9cdc:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
    9ce0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
    9ce4:	eb000003 	bl	9cf8 <BusRaider::pinRawWrite(int, bool)>
    9ce8:	e320f000 	nop	{0}
    9cec:	e24bd004 	sub	sp, fp, #4
    9cf0:	e8bd8800 	pop	{fp, pc}
    9cf4:	66666667 	.word	0x66666667

00009cf8 <BusRaider::pinRawWrite(int, bool)>:
    9cf8:	e92d4800 	push	{fp, lr}
    9cfc:	e28db004 	add	fp, sp, #4
    9d00:	e24dd010 	sub	sp, sp, #16
    9d04:	e50b0008 	str	r0, [fp, #-8]
    9d08:	e50b100c 	str	r1, [fp, #-12]
    9d0c:	e1a03002 	mov	r3, r2
    9d10:	e54b300d 	strb	r3, [fp, #-13]
    9d14:	e55b300d 	ldrb	r3, [fp, #-13]
    9d18:	e3530000 	cmp	r3, #0
    9d1c:	0a000011 	beq	9d68 <BusRaider::pinRawWrite(int, bool)+0x70>
    9d20:	e51b300c 	ldr	r3, [fp, #-12]
    9d24:	e353001f 	cmp	r3, #31
    9d28:	ca000006 	bgt	9d48 <BusRaider::pinRawWrite(int, bool)+0x50>
    9d2c:	e3a02001 	mov	r2, #1
    9d30:	e51b300c 	ldr	r3, [fp, #-12]
    9d34:	e1a03312 	lsl	r3, r2, r3
    9d38:	e1a01003 	mov	r1, r3
    9d3c:	e59f0074 	ldr	r0, [pc, #116]	; 9db8 <BusRaider::pinRawWrite(int, bool)+0xc0>
    9d40:	ebfffb10 	bl	8988 <write32>
    9d44:	ea000018 	b	9dac <BusRaider::pinRawWrite(int, bool)+0xb4>
    9d48:	e51b300c 	ldr	r3, [fp, #-12]
    9d4c:	e2433020 	sub	r3, r3, #32
    9d50:	e3a02001 	mov	r2, #1
    9d54:	e1a03312 	lsl	r3, r2, r3
    9d58:	e1a01003 	mov	r1, r3
    9d5c:	e59f0058 	ldr	r0, [pc, #88]	; 9dbc <BusRaider::pinRawWrite(int, bool)+0xc4>
    9d60:	ebfffb08 	bl	8988 <write32>
    9d64:	ea000010 	b	9dac <BusRaider::pinRawWrite(int, bool)+0xb4>
    9d68:	e51b300c 	ldr	r3, [fp, #-12]
    9d6c:	e353001f 	cmp	r3, #31
    9d70:	ca000006 	bgt	9d90 <BusRaider::pinRawWrite(int, bool)+0x98>
    9d74:	e3a02001 	mov	r2, #1
    9d78:	e51b300c 	ldr	r3, [fp, #-12]
    9d7c:	e1a03312 	lsl	r3, r2, r3
    9d80:	e1a01003 	mov	r1, r3
    9d84:	e59f0034 	ldr	r0, [pc, #52]	; 9dc0 <BusRaider::pinRawWrite(int, bool)+0xc8>
    9d88:	ebfffafe 	bl	8988 <write32>
    9d8c:	ea000006 	b	9dac <BusRaider::pinRawWrite(int, bool)+0xb4>
    9d90:	e51b300c 	ldr	r3, [fp, #-12]
    9d94:	e2433020 	sub	r3, r3, #32
    9d98:	e3a02001 	mov	r2, #1
    9d9c:	e1a03312 	lsl	r3, r2, r3
    9da0:	e1a01003 	mov	r1, r3
    9da4:	e59f0018 	ldr	r0, [pc, #24]	; 9dc4 <BusRaider::pinRawWrite(int, bool)+0xcc>
    9da8:	ebfffaf6 	bl	8988 <write32>
    9dac:	e320f000 	nop	{0}
    9db0:	e24bd004 	sub	sp, fp, #4
    9db4:	e8bd8800 	pop	{fp, pc}
    9db8:	2020001c 	.word	0x2020001c
    9dbc:	20200020 	.word	0x20200020
    9dc0:	20200028 	.word	0x20200028
    9dc4:	2020002c 	.word	0x2020002c

00009dc8 <BusRaider::pinRawRead(int)>:
    9dc8:	e92d4800 	push	{fp, lr}
    9dcc:	e28db004 	add	fp, sp, #4
    9dd0:	e24dd008 	sub	sp, sp, #8
    9dd4:	e50b0008 	str	r0, [fp, #-8]
    9dd8:	e50b100c 	str	r1, [fp, #-12]
    9ddc:	e51b300c 	ldr	r3, [fp, #-12]
    9de0:	e353001f 	cmp	r3, #31
    9de4:	ca00000a 	bgt	9e14 <BusRaider::pinRawRead(int)+0x4c>
    9de8:	e59f005c 	ldr	r0, [pc, #92]	; 9e4c <BusRaider::pinRawRead(int)+0x84>
    9dec:	ebfffadb 	bl	8960 <read32>
    9df0:	e1a02000 	mov	r2, r0
    9df4:	e51b300c 	ldr	r3, [fp, #-12]
    9df8:	e1a03332 	lsr	r3, r2, r3
    9dfc:	e2033001 	and	r3, r3, #1
    9e00:	e3530000 	cmp	r3, #0
    9e04:	13a03001 	movne	r3, #1
    9e08:	03a03000 	moveq	r3, #0
    9e0c:	e6ef3073 	uxtb	r3, r3
    9e10:	ea00000a 	b	9e40 <BusRaider::pinRawRead(int)+0x78>
    9e14:	e59f0034 	ldr	r0, [pc, #52]	; 9e50 <BusRaider::pinRawRead(int)+0x88>
    9e18:	ebfffad0 	bl	8960 <read32>
    9e1c:	e1a02000 	mov	r2, r0
    9e20:	e51b300c 	ldr	r3, [fp, #-12]
    9e24:	e2433020 	sub	r3, r3, #32
    9e28:	e1a03332 	lsr	r3, r2, r3
    9e2c:	e2033001 	and	r3, r3, #1
    9e30:	e3530000 	cmp	r3, #0
    9e34:	13a03001 	movne	r3, #1
    9e38:	03a03000 	moveq	r3, #0
    9e3c:	e6ef3073 	uxtb	r3, r3
    9e40:	e1a00003 	mov	r0, r3
    9e44:	e24bd004 	sub	sp, fp, #4
    9e48:	e8bd8800 	pop	{fp, pc}
    9e4c:	20200034 	.word	0x20200034
    9e50:	20200038 	.word	0x20200038

00009e54 <TargetMemory::clear()>:
    9e54:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    9e58:	e28db000 	add	fp, sp, #0
    9e5c:	e24dd014 	sub	sp, sp, #20
    9e60:	e50b0010 	str	r0, [fp, #-16]
    9e64:	e51b3010 	ldr	r3, [fp, #-16]
    9e68:	e2833801 	add	r3, r3, #65536	; 0x10000
    9e6c:	e1a02003 	mov	r2, r3
    9e70:	e3a03000 	mov	r3, #0
    9e74:	e5823640 	str	r3, [r2, #1600]	; 0x640
    9e78:	e3a03000 	mov	r3, #0
    9e7c:	e50b3008 	str	r3, [fp, #-8]
    9e80:	e51b3008 	ldr	r3, [fp, #-8]
    9e84:	e35300c7 	cmp	r3, #199	; 0xc7
    9e88:	ca00000a 	bgt	9eb8 <TargetMemory::clear()+0x64>
    9e8c:	e51b2010 	ldr	r2, [fp, #-16]
    9e90:	e51b3008 	ldr	r3, [fp, #-8]
    9e94:	e2833a02 	add	r3, r3, #8192	; 0x2000
    9e98:	e1a03183 	lsl	r3, r3, #3
    9e9c:	e0823003 	add	r3, r2, r3
    9ea0:	e3a02000 	mov	r2, #0
    9ea4:	e5832004 	str	r2, [r3, #4]
    9ea8:	e51b3008 	ldr	r3, [fp, #-8]
    9eac:	e2833001 	add	r3, r3, #1
    9eb0:	e50b3008 	str	r3, [fp, #-8]
    9eb4:	eafffff1 	b	9e80 <TargetMemory::clear()+0x2c>
    9eb8:	e3a03000 	mov	r3, #0
    9ebc:	e50b300c 	str	r3, [fp, #-12]
    9ec0:	e51b300c 	ldr	r3, [fp, #-12]
    9ec4:	e3530801 	cmp	r3, #65536	; 0x10000
    9ec8:	aa000008 	bge	9ef0 <TargetMemory::clear()+0x9c>
    9ecc:	e51b2010 	ldr	r2, [fp, #-16]
    9ed0:	e51b300c 	ldr	r3, [fp, #-12]
    9ed4:	e0823003 	add	r3, r2, r3
    9ed8:	e3a02000 	mov	r2, #0
    9edc:	e5c32000 	strb	r2, [r3]
    9ee0:	e51b300c 	ldr	r3, [fp, #-12]
    9ee4:	e2833001 	add	r3, r3, #1
    9ee8:	e50b300c 	str	r3, [fp, #-12]
    9eec:	eafffff3 	b	9ec0 <TargetMemory::clear()+0x6c>
    9ef0:	e320f000 	nop	{0}
    9ef4:	e28bd000 	add	sp, fp, #0
    9ef8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    9efc:	e12fff1e 	bx	lr

00009f00 <TargetMemory::dataBlockStore(unsigned long, unsigned char const*, unsigned long)>:
    9f00:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    9f04:	e28db000 	add	fp, sp, #0
    9f08:	e24dd024 	sub	sp, sp, #36	; 0x24
    9f0c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    9f10:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    9f14:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
    9f18:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    9f1c:	e3e03000 	mvn	r3, #0
    9f20:	e50b3008 	str	r3, [fp, #-8]
    9f24:	e3a03000 	mov	r3, #0
    9f28:	e50b300c 	str	r3, [fp, #-12]
    9f2c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
    9f30:	e2833801 	add	r3, r3, #65536	; 0x10000
    9f34:	e5932640 	ldr	r2, [r3, #1600]	; 0x640
    9f38:	e51b300c 	ldr	r3, [fp, #-12]
    9f3c:	e1520003 	cmp	r2, r3
    9f40:	da000022 	ble	9fd0 <TargetMemory::dataBlockStore(unsigned long, unsigned char const*, unsigned long)+0xd0>
    9f44:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
    9f48:	e51b200c 	ldr	r2, [fp, #-12]
    9f4c:	e2822a02 	add	r2, r2, #8192	; 0x2000
    9f50:	e7932182 	ldr	r2, [r3, r2, lsl #3]
    9f54:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
    9f58:	e51b300c 	ldr	r3, [fp, #-12]
    9f5c:	e2833a02 	add	r3, r3, #8192	; 0x2000
    9f60:	e1a03183 	lsl	r3, r3, #3
    9f64:	e0813003 	add	r3, r1, r3
    9f68:	e5933004 	ldr	r3, [r3, #4]
    9f6c:	e0822003 	add	r2, r2, r3
    9f70:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
    9f74:	e1520003 	cmp	r2, r3
    9f78:	1a000010 	bne	9fc0 <TargetMemory::dataBlockStore(unsigned long, unsigned char const*, unsigned long)+0xc0>
    9f7c:	e51b300c 	ldr	r3, [fp, #-12]
    9f80:	e50b3008 	str	r3, [fp, #-8]
    9f84:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
    9f88:	e51b300c 	ldr	r3, [fp, #-12]
    9f8c:	e2833a02 	add	r3, r3, #8192	; 0x2000
    9f90:	e1a03183 	lsl	r3, r3, #3
    9f94:	e0823003 	add	r3, r2, r3
    9f98:	e5932004 	ldr	r2, [r3, #4]
    9f9c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
    9fa0:	e0822003 	add	r2, r2, r3
    9fa4:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
    9fa8:	e51b300c 	ldr	r3, [fp, #-12]
    9fac:	e2833a02 	add	r3, r3, #8192	; 0x2000
    9fb0:	e1a03183 	lsl	r3, r3, #3
    9fb4:	e0813003 	add	r3, r1, r3
    9fb8:	e5832004 	str	r2, [r3, #4]
    9fbc:	ea000003 	b	9fd0 <TargetMemory::dataBlockStore(unsigned long, unsigned char const*, unsigned long)+0xd0>
    9fc0:	e51b300c 	ldr	r3, [fp, #-12]
    9fc4:	e2833001 	add	r3, r3, #1
    9fc8:	e50b300c 	str	r3, [fp, #-12]
    9fcc:	eaffffd6 	b	9f2c <TargetMemory::dataBlockStore(unsigned long, unsigned char const*, unsigned long)+0x2c>
    9fd0:	e51b3008 	ldr	r3, [fp, #-8]
    9fd4:	e3730001 	cmn	r3, #1
    9fd8:	1a00001b 	bne	a04c <TargetMemory::dataBlockStore(unsigned long, unsigned char const*, unsigned long)+0x14c>
    9fdc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
    9fe0:	e2833801 	add	r3, r3, #65536	; 0x10000
    9fe4:	e5933640 	ldr	r3, [r3, #1600]	; 0x640
    9fe8:	e35300c7 	cmp	r3, #199	; 0xc7
    9fec:	ca00002e 	bgt	a0ac <TargetMemory::dataBlockStore(unsigned long, unsigned char const*, unsigned long)+0x1ac>
    9ff0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
    9ff4:	e2833801 	add	r3, r3, #65536	; 0x10000
    9ff8:	e5932640 	ldr	r2, [r3, #1600]	; 0x640
    9ffc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
    a000:	e2822a02 	add	r2, r2, #8192	; 0x2000
    a004:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
    a008:	e7831182 	str	r1, [r3, r2, lsl #3]
    a00c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
    a010:	e2833801 	add	r3, r3, #65536	; 0x10000
    a014:	e5933640 	ldr	r3, [r3, #1600]	; 0x640
    a018:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
    a01c:	e2833a02 	add	r3, r3, #8192	; 0x2000
    a020:	e1a03183 	lsl	r3, r3, #3
    a024:	e0823003 	add	r3, r2, r3
    a028:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
    a02c:	e5832004 	str	r2, [r3, #4]
    a030:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
    a034:	e2833801 	add	r3, r3, #65536	; 0x10000
    a038:	e5933640 	ldr	r3, [r3, #1600]	; 0x640
    a03c:	e2833001 	add	r3, r3, #1
    a040:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
    a044:	e2822801 	add	r2, r2, #65536	; 0x10000
    a048:	e5823640 	str	r3, [r2, #1600]	; 0x640
    a04c:	e3a03000 	mov	r3, #0
    a050:	e50b3010 	str	r3, [fp, #-16]
    a054:	e51b2010 	ldr	r2, [fp, #-16]
    a058:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
    a05c:	e1520003 	cmp	r2, r3
    a060:	2a000012 	bcs	a0b0 <TargetMemory::dataBlockStore(unsigned long, unsigned char const*, unsigned long)+0x1b0>
    a064:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
    a068:	e51b3010 	ldr	r3, [fp, #-16]
    a06c:	e0823003 	add	r3, r2, r3
    a070:	e3530801 	cmp	r3, #65536	; 0x10000
    a074:	2a000008 	bcs	a09c <TargetMemory::dataBlockStore(unsigned long, unsigned char const*, unsigned long)+0x19c>
    a078:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
    a07c:	e51b3010 	ldr	r3, [fp, #-16]
    a080:	e0823003 	add	r3, r2, r3
    a084:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
    a088:	e51b2010 	ldr	r2, [fp, #-16]
    a08c:	e0812002 	add	r2, r1, r2
    a090:	e5d21000 	ldrb	r1, [r2]
    a094:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
    a098:	e7c21003 	strb	r1, [r2, r3]
    a09c:	e51b3010 	ldr	r3, [fp, #-16]
    a0a0:	e2833001 	add	r3, r3, #1
    a0a4:	e50b3010 	str	r3, [fp, #-16]
    a0a8:	eaffffe9 	b	a054 <TargetMemory::dataBlockStore(unsigned long, unsigned char const*, unsigned long)+0x154>
    a0ac:	e320f000 	nop	{0}
    a0b0:	e28bd000 	add	sp, fp, #0
    a0b4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    a0b8:	e12fff1e 	bx	lr

0000a0bc <TargetMemory::getNumBlocks()>:
    a0bc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    a0c0:	e28db000 	add	fp, sp, #0
    a0c4:	e24dd00c 	sub	sp, sp, #12
    a0c8:	e50b0008 	str	r0, [fp, #-8]
    a0cc:	e51b3008 	ldr	r3, [fp, #-8]
    a0d0:	e2833801 	add	r3, r3, #65536	; 0x10000
    a0d4:	e5933640 	ldr	r3, [r3, #1600]	; 0x640
    a0d8:	e1a00003 	mov	r0, r3
    a0dc:	e28bd000 	add	sp, fp, #0
    a0e0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    a0e4:	e12fff1e 	bx	lr

0000a0e8 <TargetMemory::getMemoryBlock(int)>:
    a0e8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    a0ec:	e28db000 	add	fp, sp, #0
    a0f0:	e24dd00c 	sub	sp, sp, #12
    a0f4:	e50b0008 	str	r0, [fp, #-8]
    a0f8:	e50b100c 	str	r1, [fp, #-12]
    a0fc:	e51b300c 	ldr	r3, [fp, #-12]
    a100:	e2833a02 	add	r3, r3, #8192	; 0x2000
    a104:	e1a03183 	lsl	r3, r3, #3
    a108:	e51b2008 	ldr	r2, [fp, #-8]
    a10c:	e0823003 	add	r3, r2, r3
    a110:	e1a00003 	mov	r0, r3
    a114:	e28bd000 	add	sp, fp, #0
    a118:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    a11c:	e12fff1e 	bx	lr

0000a120 <TargetMemory::memoryPtr()>:
    a120:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    a124:	e28db000 	add	fp, sp, #0
    a128:	e24dd00c 	sub	sp, sp, #12
    a12c:	e50b0008 	str	r0, [fp, #-8]
    a130:	e51b3008 	ldr	r3, [fp, #-8]
    a134:	e1a00003 	mov	r0, r3
    a138:	e28bd000 	add	sp, fp, #0
    a13c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    a140:	e12fff1e 	bx	lr

0000a144 <CActLED::~CActLED()>:
    a144:	e3a02000 	mov	r2, #0
    a148:	e59f3004 	ldr	r3, [pc, #4]	; a154 <CActLED::~CActLED()+0x10>
    a14c:	e5832000 	str	r2, [r3]
    a150:	e12fff1e 	bx	lr
    a154:	00015a94 	.word	0x00015a94

0000a158 <CActLED::On()>:
    a158:	e5903000 	ldr	r3, [r0]
    a15c:	e3530000 	cmp	r3, #0
    a160:	0a000002 	beq	a170 <CActLED::On()+0x18>
    a164:	e5d01008 	ldrb	r1, [r0, #8]
    a168:	e1a00003 	mov	r0, r3
    a16c:	ea0002ec 	b	ad24 <CGPIOPin::Write(unsigned int)>
    a170:	e5903004 	ldr	r3, [r0, #4]
    a174:	e3530000 	cmp	r3, #0
    a178:	012fff1e 	bxeq	lr
    a17c:	e5d01008 	ldrb	r1, [r0, #8]
    a180:	e1a00003 	mov	r0, r3
    a184:	ea001d80 	b	1178c <CVirtualGPIOPin::Write(unsigned int)>

0000a188 <CActLED::Off()>:
    a188:	e5903000 	ldr	r3, [r0]
    a18c:	e3530000 	cmp	r3, #0
    a190:	0a000003 	beq	a1a4 <CActLED::Off()+0x1c>
    a194:	e5d01008 	ldrb	r1, [r0, #8]
    a198:	e1a00003 	mov	r0, r3
    a19c:	e2211001 	eor	r1, r1, #1
    a1a0:	ea0002df 	b	ad24 <CGPIOPin::Write(unsigned int)>
    a1a4:	e5903004 	ldr	r3, [r0, #4]
    a1a8:	e3530000 	cmp	r3, #0
    a1ac:	012fff1e 	bxeq	lr
    a1b0:	e5d01008 	ldrb	r1, [r0, #8]
    a1b4:	e1a00003 	mov	r0, r3
    a1b8:	e2211001 	eor	r1, r1, #1
    a1bc:	ea001d72 	b	1178c <CVirtualGPIOPin::Write(unsigned int)>

0000a1c0 <CActLED::CActLED()>:
    a1c0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    a1c4:	e3a05000 	mov	r5, #0
    a1c8:	e1a04000 	mov	r4, r0
    a1cc:	e24dd024 	sub	sp, sp, #36	; 0x24
    a1d0:	e59f314c 	ldr	r3, [pc, #332]	; a324 <CActLED::CActLED()+0x164>
    a1d4:	e5805000 	str	r5, [r0]
    a1d8:	e5805004 	str	r5, [r0, #4]
    a1dc:	e28d000c 	add	r0, sp, #12
    a1e0:	e5834000 	str	r4, [r3]
    a1e4:	eb000067 	bl	a388 <CBcmPropertyTags::CBcmPropertyTags()>
    a1e8:	e3a03010 	mov	r3, #16
    a1ec:	e58d5000 	str	r5, [sp]
    a1f0:	e28d000c 	add	r0, sp, #12
    a1f4:	e08d2003 	add	r2, sp, r3
    a1f8:	e59f1128 	ldr	r1, [pc, #296]	; a328 <CActLED::CActLED()+0x168>
    a1fc:	eb0000b8 	bl	a4e4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    a200:	e2506000 	subs	r6, r0, #0
    a204:	0a00001f 	beq	a288 <CActLED::CActLED()+0xc8>
    a208:	e59d301c 	ldr	r3, [sp, #28]
    a20c:	e3130502 	tst	r3, #8388608	; 0x800000
    a210:	0a000021 	beq	a29c <CActLED::CActLED()+0xdc>
    a214:	e1a03223 	lsr	r3, r3, #4
    a218:	e6ef3073 	uxtb	r3, r3
    a21c:	e243200d 	sub	r2, r3, #13
    a220:	e3530008 	cmp	r3, #8
    a224:	13520001 	cmpne	r2, #1
    a228:	93a01001 	movls	r1, #1
    a22c:	83a01000 	movhi	r1, #0
    a230:	e353000c 	cmp	r3, #12
    a234:	13530009 	cmpne	r3, #9
    a238:	03a06001 	moveq	r6, #1
    a23c:	13a06000 	movne	r6, #0
    a240:	e3530001 	cmp	r3, #1
    a244:	9a000017 	bls	a2a8 <CActLED::CActLED()+0xe8>
    a248:	e3510000 	cmp	r1, #0
    a24c:	0a00002a 	beq	a2fc <CActLED::CActLED()+0x13c>
    a250:	e3520001 	cmp	r2, #1
    a254:	8a000020 	bhi	a2dc <CActLED::CActLED()+0x11c>
    a258:	e3a00028 	mov	r0, #40	; 0x28
    a25c:	eb001efe 	bl	11e5c <operator new(unsigned int)>
    a260:	e3a02001 	mov	r2, #1
    a264:	e1a07000 	mov	r7, r0
    a268:	e1a03005 	mov	r3, r5
    a26c:	e3a0101d 	mov	r1, #29
    a270:	e0266002 	eor	r6, r6, r2
    a274:	eb00054c 	bl	b7ac <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    a278:	e5847000 	str	r7, [r4]
    a27c:	e5c46008 	strb	r6, [r4, #8]
    a280:	e1a00004 	mov	r0, r4
    a284:	ebffffbf 	bl	a188 <CActLED::Off()>
    a288:	e28d000c 	add	r0, sp, #12
    a28c:	eb000043 	bl	a3a0 <CBcmPropertyTags::~CBcmPropertyTags()>
    a290:	e1a00004 	mov	r0, r4
    a294:	e28dd024 	add	sp, sp, #36	; 0x24
    a298:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    a29c:	e6ff3073 	uxth	r3, r3
    a2a0:	e353000f 	cmp	r3, #15
    a2a4:	8a000015 	bhi	a300 <CActLED::CActLED()+0x140>
    a2a8:	e3a00028 	mov	r0, #40	; 0x28
    a2ac:	eb001eea 	bl	11e5c <operator new(unsigned int)>
    a2b0:	e3a03000 	mov	r3, #0
    a2b4:	e3a02001 	mov	r2, #1
    a2b8:	e3a01010 	mov	r1, #16
    a2bc:	e1a05000 	mov	r5, r0
    a2c0:	eb000539 	bl	b7ac <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    a2c4:	e3a03000 	mov	r3, #0
    a2c8:	e5845000 	str	r5, [r4]
    a2cc:	e5c43008 	strb	r3, [r4, #8]
    a2d0:	e1a00004 	mov	r0, r4
    a2d4:	ebffffab 	bl	a188 <CActLED::Off()>
    a2d8:	eaffffea 	b	a288 <CActLED::CActLED()+0xc8>
    a2dc:	e3a00010 	mov	r0, #16
    a2e0:	eb001edd 	bl	11e5c <operator new(unsigned int)>
    a2e4:	e1a07000 	mov	r7, r0
    a2e8:	e1a01005 	mov	r1, r5
    a2ec:	eb001cd5 	bl	11648 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)>
    a2f0:	e2266001 	eor	r6, r6, #1
    a2f4:	e5847004 	str	r7, [r4, #4]
    a2f8:	eaffffdf 	b	a27c <CActLED::CActLED()+0xbc>
    a2fc:	e2266001 	eor	r6, r6, #1
    a300:	e3a00028 	mov	r0, #40	; 0x28
    a304:	eb001ed4 	bl	11e5c <operator new(unsigned int)>
    a308:	e1a05000 	mov	r5, r0
    a30c:	e3a03000 	mov	r3, #0
    a310:	e3a02001 	mov	r2, #1
    a314:	e3a0102f 	mov	r1, #47	; 0x2f
    a318:	eb000523 	bl	b7ac <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    a31c:	e5845000 	str	r5, [r4]
    a320:	eaffffd5 	b	a27c <CActLED::CActLED()+0xbc>
    a324:	00015a94 	.word	0x00015a94
    a328:	00010002 	.word	0x00010002

0000a32c <CActLED::Blink(unsigned int, unsigned int, unsigned int)>:
    a32c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a330:	e2516000 	subs	r6, r1, #0
    a334:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    a338:	e1a08003 	mov	r8, r3
    a33c:	e1a07002 	mov	r7, r2
    a340:	e1a05000 	mov	r5, r0
    a344:	e3a04001 	mov	r4, #1
    a348:	e1a00005 	mov	r0, r5
    a34c:	ebffff81 	bl	a158 <CActLED::On()>
    a350:	e1a00007 	mov	r0, r7
    a354:	eb001aba 	bl	10e44 <CTimer::SimpleMsDelay(unsigned int)>
    a358:	e1a00005 	mov	r0, r5
    a35c:	ebffff89 	bl	a188 <CActLED::Off()>
    a360:	e2844001 	add	r4, r4, #1
    a364:	e1a00008 	mov	r0, r8
    a368:	eb001ab5 	bl	10e44 <CTimer::SimpleMsDelay(unsigned int)>
    a36c:	e1560004 	cmp	r6, r4
    a370:	2afffff4 	bcs	a348 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x1c>
    a374:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000a378 <CActLED::Get()>:
    a378:	e59f3004 	ldr	r3, [pc, #4]	; a384 <CActLED::Get()+0xc>
    a37c:	e5930000 	ldr	r0, [r3]
    a380:	e12fff1e 	bx	lr
    a384:	00015a94 	.word	0x00015a94

0000a388 <CBcmPropertyTags::CBcmPropertyTags()>:
    a388:	e92d4010 	push	{r4, lr}
    a38c:	e1a04000 	mov	r4, r0
    a390:	e3a01008 	mov	r1, #8
    a394:	eb002180 	bl	1299c <CBcmMailBox::CBcmMailBox(unsigned int)>
    a398:	e1a00004 	mov	r0, r4
    a39c:	e8bd8010 	pop	{r4, pc}

0000a3a0 <CBcmPropertyTags::~CBcmPropertyTags()>:
    a3a0:	e92d4010 	push	{r4, lr}
    a3a4:	e1a04000 	mov	r4, r0
    a3a8:	eb00217d 	bl	129a4 <CBcmMailBox::~CBcmMailBox()>
    a3ac:	e1a00004 	mov	r0, r4
    a3b0:	e8bd8010 	pop	{r4, pc}

0000a3b4 <CBcmPropertyTags::GetTags(void*, unsigned int)>:
    a3b4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    a3b8:	e2519000 	subs	r9, r1, #0
    a3bc:	e1a0a000 	mov	sl, r0
    a3c0:	e1a07002 	mov	r7, r2
    a3c4:	0a00003d 	beq	a4c0 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x10c>
    a3c8:	e357000f 	cmp	r7, #15
    a3cc:	9a000036 	bls	a4ac <CBcmPropertyTags::GetTags(void*, unsigned int)+0xf8>
    a3d0:	e287600c 	add	r6, r7, #12
    a3d4:	e3160003 	tst	r6, #3
    a3d8:	1a00002e 	bne	a498 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xe4>
    a3dc:	e3a00000 	mov	r0, #0
    a3e0:	eb001e0c 	bl	11c18 <CMemorySystem::GetCoherentPage(unsigned int)>
    a3e4:	e3a05000 	mov	r5, #0
    a3e8:	e1a04000 	mov	r4, r0
    a3ec:	e1a01426 	lsr	r1, r6, #8
    a3f0:	e1a02826 	lsr	r2, r6, #16
    a3f4:	e1a03c26 	lsr	r3, r6, #24
    a3f8:	e2808008 	add	r8, r0, #8
    a3fc:	e5c06000 	strb	r6, [r0]
    a400:	e5c01001 	strb	r1, [r0, #1]
    a404:	e5c02002 	strb	r2, [r0, #2]
    a408:	e5c03003 	strb	r3, [r0, #3]
    a40c:	e1a02007 	mov	r2, r7
    a410:	e1a00008 	mov	r0, r8
    a414:	e5c45004 	strb	r5, [r4, #4]
    a418:	e5c45005 	strb	r5, [r4, #5]
    a41c:	e5c45006 	strb	r5, [r4, #6]
    a420:	e5c45007 	strb	r5, [r4, #7]
    a424:	e1a01009 	mov	r1, r9
    a428:	eb001c3f 	bl	1152c <memcpy>
    a42c:	e7885007 	str	r5, [r8, r7]
    a430:	ee075f9a 	mcr	15, 0, r5, cr7, cr10, {4}
    a434:	e3c46103 	bic	r6, r4, #-1073741824	; 0xc0000000
    a438:	e3866101 	orr	r6, r6, #1073741824	; 0x40000000
    a43c:	e1a0000a 	mov	r0, sl
    a440:	e1a01006 	mov	r1, r6
    a444:	eb002186 	bl	12a64 <CBcmMailBox::WriteRead(unsigned int)>
    a448:	e1560000 	cmp	r6, r0
    a44c:	0a000001 	beq	a458 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xa4>
    a450:	e3a00000 	mov	r0, #0
    a454:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    a458:	ee075fba 	mcr	15, 0, r5, cr7, cr10, {5}
    a45c:	e5d42005 	ldrb	r2, [r4, #5]
    a460:	e5d43004 	ldrb	r3, [r4, #4]
    a464:	e5d41006 	ldrb	r1, [r4, #6]
    a468:	e1833402 	orr	r3, r3, r2, lsl #8
    a46c:	e5d42007 	ldrb	r2, [r4, #7]
    a470:	e1833801 	orr	r3, r3, r1, lsl #16
    a474:	e1833c02 	orr	r3, r3, r2, lsl #24
    a478:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
    a47c:	1afffff3 	bne	a450 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x9c>
    a480:	e1a02007 	mov	r2, r7
    a484:	e1a01008 	mov	r1, r8
    a488:	e1a00009 	mov	r0, r9
    a48c:	eb001c26 	bl	1152c <memcpy>
    a490:	e3a00001 	mov	r0, #1
    a494:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    a498:	e3a02053 	mov	r2, #83	; 0x53
    a49c:	e59f1030 	ldr	r1, [pc, #48]	; a4d4 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x120>
    a4a0:	e59f0030 	ldr	r0, [pc, #48]	; a4d8 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x124>
    a4a4:	eb001ffa 	bl	12494 <assertion_failed>
    a4a8:	eaffffcb 	b	a3dc <CBcmPropertyTags::GetTags(void*, unsigned int)+0x28>
    a4ac:	e3a02051 	mov	r2, #81	; 0x51
    a4b0:	e59f101c 	ldr	r1, [pc, #28]	; a4d4 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x120>
    a4b4:	e59f0020 	ldr	r0, [pc, #32]	; a4dc <CBcmPropertyTags::GetTags(void*, unsigned int)+0x128>
    a4b8:	eb001ff5 	bl	12494 <assertion_failed>
    a4bc:	eaffffc3 	b	a3d0 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x1c>
    a4c0:	e3a02050 	mov	r2, #80	; 0x50
    a4c4:	e59f1008 	ldr	r1, [pc, #8]	; a4d4 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x120>
    a4c8:	e59f0010 	ldr	r0, [pc, #16]	; a4e0 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x12c>
    a4cc:	eb001ff0 	bl	12494 <assertion_failed>
    a4d0:	eaffffbc 	b	a3c8 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x14>
    a4d4:	00013a28 	.word	0x00013a28
    a4d8:	00013a74 	.word	0x00013a74
    a4dc:	00013a48 	.word	0x00013a48
    a4e0:	00013a3c 	.word	0x00013a3c

0000a4e4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>:
    a4e4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a4e8:	e2524000 	subs	r4, r2, #0
    a4ec:	e1a08000 	mov	r8, r0
    a4f0:	e1a06001 	mov	r6, r1
    a4f4:	e1a07003 	mov	r7, r3
    a4f8:	e59d5018 	ldr	r5, [sp, #24]
    a4fc:	0a000038 	beq	a5e4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x100>
    a500:	e357000f 	cmp	r7, #15
    a504:	9a000031 	bls	a5d0 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xec>
    a508:	e3c52102 	bic	r2, r5, #-2147483648	; 0x80000000
    a50c:	e247100c 	sub	r1, r7, #12
    a510:	e1a03422 	lsr	r3, r2, #8
    a514:	e1a0c822 	lsr	ip, r2, #16
    a518:	e5c43009 	strb	r3, [r4, #9]
    a51c:	e1a03421 	lsr	r3, r1, #8
    a520:	e1a0e821 	lsr	lr, r1, #16
    a524:	e5c42008 	strb	r2, [r4, #8]
    a528:	e5c46000 	strb	r6, [r4]
    a52c:	e1a02c22 	lsr	r2, r2, #24
    a530:	e5c4c00a 	strb	ip, [r4, #10]
    a534:	e5c41004 	strb	r1, [r4, #4]
    a538:	e1a0cc21 	lsr	ip, r1, #24
    a53c:	e5c43005 	strb	r3, [r4, #5]
    a540:	e1a01426 	lsr	r1, r6, #8
    a544:	e1a03826 	lsr	r3, r6, #16
    a548:	e1a06c26 	lsr	r6, r6, #24
    a54c:	e5c4200b 	strb	r2, [r4, #11]
    a550:	e5c41001 	strb	r1, [r4, #1]
    a554:	e1a00008 	mov	r0, r8
    a558:	e1a02007 	mov	r2, r7
    a55c:	e5c4e006 	strb	lr, [r4, #6]
    a560:	e5c4c007 	strb	ip, [r4, #7]
    a564:	e5c43002 	strb	r3, [r4, #2]
    a568:	e5c46003 	strb	r6, [r4, #3]
    a56c:	e1a01004 	mov	r1, r4
    a570:	ebffff8f 	bl	a3b4 <CBcmPropertyTags::GetTags(void*, unsigned int)>
    a574:	e3500000 	cmp	r0, #0
    a578:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    a57c:	e5d43009 	ldrb	r3, [r4, #9]
    a580:	e5d40008 	ldrb	r0, [r4, #8]
    a584:	e5d4200a 	ldrb	r2, [r4, #10]
    a588:	e1800403 	orr	r0, r0, r3, lsl #8
    a58c:	e5d4300b 	ldrb	r3, [r4, #11]
    a590:	e1800802 	orr	r0, r0, r2, lsl #16
    a594:	e1900c03 	orrs	r0, r0, r3, lsl #24
    a598:	4a000001 	bmi	a5a4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xc0>
    a59c:	e3a00000 	mov	r0, #0
    a5a0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    a5a4:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
    a5a8:	e1a01420 	lsr	r1, r0, #8
    a5ac:	e1a02820 	lsr	r2, r0, #16
    a5b0:	e1a03c20 	lsr	r3, r0, #24
    a5b4:	e5c40008 	strb	r0, [r4, #8]
    a5b8:	e2900000 	adds	r0, r0, #0
    a5bc:	e5c41009 	strb	r1, [r4, #9]
    a5c0:	e5c4200a 	strb	r2, [r4, #10]
    a5c4:	e5c4300b 	strb	r3, [r4, #11]
    a5c8:	13a00001 	movne	r0, #1
    a5cc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    a5d0:	e3a02034 	mov	r2, #52	; 0x34
    a5d4:	e59f101c 	ldr	r1, [pc, #28]	; a5f8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x114>
    a5d8:	e59f001c 	ldr	r0, [pc, #28]	; a5fc <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x118>
    a5dc:	eb001fac 	bl	12494 <assertion_failed>
    a5e0:	eaffffc8 	b	a508 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x24>
    a5e4:	e3a02033 	mov	r2, #51	; 0x33
    a5e8:	e59f1008 	ldr	r1, [pc, #8]	; a5f8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x114>
    a5ec:	e59f000c 	ldr	r0, [pc, #12]	; a600 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x11c>
    a5f0:	eb001fa7 	bl	12494 <assertion_failed>
    a5f4:	eaffffc1 	b	a500 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x1c>
    a5f8:	00013a28 	.word	0x00013a28
    a5fc:	00013a98 	.word	0x00013a98
    a600:	00013a8c 	.word	0x00013a8c

0000a604 <CDeviceNameService::CDeviceNameService()>:
    a604:	e3a03000 	mov	r3, #0
    a608:	e92d4070 	push	{r4, r5, r6, lr}
    a60c:	e59f5030 	ldr	r5, [pc, #48]	; a644 <CDeviceNameService::CDeviceNameService()+0x40>
    a610:	e1a04000 	mov	r4, r0
    a614:	e5952000 	ldr	r2, [r5]
    a618:	e5803000 	str	r3, [r0]
    a61c:	e1520003 	cmp	r2, r3
    a620:	e5803004 	str	r3, [r0, #4]
    a624:	0a000003 	beq	a638 <CDeviceNameService::CDeviceNameService()+0x34>
    a628:	e3a0201f 	mov	r2, #31
    a62c:	e59f1014 	ldr	r1, [pc, #20]	; a648 <CDeviceNameService::CDeviceNameService()+0x44>
    a630:	e59f0014 	ldr	r0, [pc, #20]	; a64c <CDeviceNameService::CDeviceNameService()+0x48>
    a634:	eb001f96 	bl	12494 <assertion_failed>
    a638:	e5854000 	str	r4, [r5]
    a63c:	e1a00004 	mov	r0, r4
    a640:	e8bd8070 	pop	{r4, r5, r6, pc}
    a644:	00015a98 	.word	0x00015a98
    a648:	00013ac0 	.word	0x00013ac0
    a64c:	00013ad8 	.word	0x00013ad8

0000a650 <CDeviceNameService::~CDeviceNameService()>:
    a650:	e5903000 	ldr	r3, [r0]
    a654:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a658:	e3530000 	cmp	r3, #0
    a65c:	e1a05000 	mov	r5, r0
    a660:	0a00000e 	beq	a6a0 <CDeviceNameService::~CDeviceNameService()+0x50>
    a664:	e3a06000 	mov	r6, #0
    a668:	e3a07010 	mov	r7, #16
    a66c:	e5930004 	ldr	r0, [r3, #4]
    a670:	e5934000 	ldr	r4, [r3]
    a674:	e3500000 	cmp	r0, #0
    a678:	0a000000 	beq	a680 <CDeviceNameService::~CDeviceNameService()+0x30>
    a67c:	eb001df9 	bl	11e68 <operator delete[](void*)>
    a680:	e5950000 	ldr	r0, [r5]
    a684:	e1a01007 	mov	r1, r7
    a688:	e5806004 	str	r6, [r0, #4]
    a68c:	e5806008 	str	r6, [r0, #8]
    a690:	eb001df5 	bl	11e6c <operator delete(void*, unsigned int)>
    a694:	e2543000 	subs	r3, r4, #0
    a698:	e5854000 	str	r4, [r5]
    a69c:	1afffff2 	bne	a66c <CDeviceNameService::~CDeviceNameService()+0x1c>
    a6a0:	e3a02000 	mov	r2, #0
    a6a4:	e59f3008 	ldr	r3, [pc, #8]	; a6b4 <CDeviceNameService::~CDeviceNameService()+0x64>
    a6a8:	e1a00005 	mov	r0, r5
    a6ac:	e5832000 	str	r2, [r3]
    a6b0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    a6b4:	00015a98 	.word	0x00015a98

0000a6b8 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>:
    a6b8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a6bc:	e1a05000 	mov	r5, r0
    a6c0:	e5900004 	ldr	r0, [r0, #4]
    a6c4:	e1a06001 	mov	r6, r1
    a6c8:	e3500000 	cmp	r0, #0
    a6cc:	e1a07002 	mov	r7, r2
    a6d0:	e1a08003 	mov	r8, r3
    a6d4:	1a000017 	bne	a738 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x80>
    a6d8:	e3a00010 	mov	r0, #16
    a6dc:	eb001dde 	bl	11e5c <operator new(unsigned int)>
    a6e0:	e3560000 	cmp	r6, #0
    a6e4:	e1a04000 	mov	r4, r0
    a6e8:	0a000019 	beq	a754 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x9c>
    a6ec:	e1a00006 	mov	r0, r6
    a6f0:	eb001a3b 	bl	10fe4 <strlen>
    a6f4:	e2800001 	add	r0, r0, #1
    a6f8:	eb001dd8 	bl	11e60 <operator new[](unsigned int)>
    a6fc:	e1a01006 	mov	r1, r6
    a700:	e5840004 	str	r0, [r4, #4]
    a704:	eb001ab4 	bl	111dc <strcpy>
    a708:	e3570000 	cmp	r7, #0
    a70c:	0a00000b 	beq	a740 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x88>
    a710:	e5952004 	ldr	r2, [r5, #4]
    a714:	e5953000 	ldr	r3, [r5]
    a718:	e3520000 	cmp	r2, #0
    a71c:	e5847008 	str	r7, [r4, #8]
    a720:	e5c4800c 	strb	r8, [r4, #12]
    a724:	e5843000 	str	r3, [r4]
    a728:	e5854000 	str	r4, [r5]
    a72c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    a730:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    a734:	ea001d9b 	b	11da8 <LeaveCritical>
    a738:	eb001d6d 	bl	11cf4 <EnterCritical>
    a73c:	eaffffe5 	b	a6d8 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x20>
    a740:	e3a02040 	mov	r2, #64	; 0x40
    a744:	e59f101c 	ldr	r1, [pc, #28]	; a768 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xb0>
    a748:	e59f001c 	ldr	r0, [pc, #28]	; a76c <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xb4>
    a74c:	eb001f50 	bl	12494 <assertion_failed>
    a750:	eaffffee 	b	a710 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x58>
    a754:	e3a0203b 	mov	r2, #59	; 0x3b
    a758:	e59f1008 	ldr	r1, [pc, #8]	; a768 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xb0>
    a75c:	e59f000c 	ldr	r0, [pc, #12]	; a770 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xb8>
    a760:	eb001f4b 	bl	12494 <assertion_failed>
    a764:	eaffffe0 	b	a6ec <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x34>
    a768:	00013ac0 	.word	0x00013ac0
    a76c:	00013af0 	.word	0x00013af0
    a770:	00013ae4 	.word	0x00013ae4

0000a774 <CDeviceNameService::RemoveDevice(char const*, bool)>:
    a774:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a778:	e2516000 	subs	r6, r1, #0
    a77c:	e1a08000 	mov	r8, r0
    a780:	e1a07002 	mov	r7, r2
    a784:	0a000040 	beq	a88c <CDeviceNameService::RemoveDevice(char const*, bool)+0x118>
    a788:	e5980004 	ldr	r0, [r8, #4]
    a78c:	e3500000 	cmp	r0, #0
    a790:	1a00002e 	bne	a850 <CDeviceNameService::RemoveDevice(char const*, bool)+0xdc>
    a794:	e5984000 	ldr	r4, [r8]
    a798:	e3540000 	cmp	r4, #0
    a79c:	0a000039 	beq	a888 <CDeviceNameService::RemoveDevice(char const*, bool)+0x114>
    a7a0:	e3a05000 	mov	r5, #0
    a7a4:	e3a0b05e 	mov	fp, #94	; 0x5e
    a7a8:	e59fa0f0 	ldr	sl, [pc, #240]	; a8a0 <CDeviceNameService::RemoveDevice(char const*, bool)+0x12c>
    a7ac:	e59f90f0 	ldr	r9, [pc, #240]	; a8a4 <CDeviceNameService::RemoveDevice(char const*, bool)+0x130>
    a7b0:	ea00000b 	b	a7e4 <CDeviceNameService::RemoveDevice(char const*, bool)+0x70>
    a7b4:	e1a00006 	mov	r0, r6
    a7b8:	eb001a13 	bl	1100c <strcmp>
    a7bc:	e3500000 	cmp	r0, #0
    a7c0:	1a000002 	bne	a7d0 <CDeviceNameService::RemoveDevice(char const*, bool)+0x5c>
    a7c4:	e5d4300c 	ldrb	r3, [r4, #12]
    a7c8:	e1530007 	cmp	r3, r7
    a7cc:	0a00000d 	beq	a808 <CDeviceNameService::RemoveDevice(char const*, bool)+0x94>
    a7d0:	e5943000 	ldr	r3, [r4]
    a7d4:	e1a05004 	mov	r5, r4
    a7d8:	e3530000 	cmp	r3, #0
    a7dc:	0a00001f 	beq	a860 <CDeviceNameService::RemoveDevice(char const*, bool)+0xec>
    a7e0:	e1a04003 	mov	r4, r3
    a7e4:	e5941004 	ldr	r1, [r4, #4]
    a7e8:	e3510000 	cmp	r1, #0
    a7ec:	1afffff0 	bne	a7b4 <CDeviceNameService::RemoveDevice(char const*, bool)+0x40>
    a7f0:	e1a0100a 	mov	r1, sl
    a7f4:	e1a0200b 	mov	r2, fp
    a7f8:	e1a00009 	mov	r0, r9
    a7fc:	eb001f24 	bl	12494 <assertion_failed>
    a800:	e5941004 	ldr	r1, [r4, #4]
    a804:	eaffffea 	b	a7b4 <CDeviceNameService::RemoveDevice(char const*, bool)+0x40>
    a808:	e3550000 	cmp	r5, #0
    a80c:	0a00001a 	beq	a87c <CDeviceNameService::RemoveDevice(char const*, bool)+0x108>
    a810:	e5943000 	ldr	r3, [r4]
    a814:	e5853000 	str	r3, [r5]
    a818:	e5983004 	ldr	r3, [r8, #4]
    a81c:	e3530000 	cmp	r3, #0
    a820:	1a000013 	bne	a874 <CDeviceNameService::RemoveDevice(char const*, bool)+0x100>
    a824:	e5940004 	ldr	r0, [r4, #4]
    a828:	e3500000 	cmp	r0, #0
    a82c:	0a000000 	beq	a834 <CDeviceNameService::RemoveDevice(char const*, bool)+0xc0>
    a830:	eb001d8c 	bl	11e68 <operator delete[](void*)>
    a834:	e3a03000 	mov	r3, #0
    a838:	e1a00004 	mov	r0, r4
    a83c:	e5843004 	str	r3, [r4, #4]
    a840:	e5843008 	str	r3, [r4, #8]
    a844:	e3a01010 	mov	r1, #16
    a848:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a84c:	ea001d86 	b	11e6c <operator delete(void*, unsigned int)>
    a850:	eb001d27 	bl	11cf4 <EnterCritical>
    a854:	e5984000 	ldr	r4, [r8]
    a858:	e3540000 	cmp	r4, #0
    a85c:	1affffcf 	bne	a7a0 <CDeviceNameService::RemoveDevice(char const*, bool)+0x2c>
    a860:	e5983004 	ldr	r3, [r8, #4]
    a864:	e3530000 	cmp	r3, #0
    a868:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a86c:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a870:	ea001d4c 	b	11da8 <LeaveCritical>
    a874:	eb001d4b 	bl	11da8 <LeaveCritical>
    a878:	eaffffe9 	b	a824 <CDeviceNameService::RemoveDevice(char const*, bool)+0xb0>
    a87c:	e5943000 	ldr	r3, [r4]
    a880:	e5883000 	str	r3, [r8]
    a884:	eaffffe3 	b	a818 <CDeviceNameService::RemoveDevice(char const*, bool)+0xa4>
    a888:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a88c:	e3a02056 	mov	r2, #86	; 0x56
    a890:	e59f1008 	ldr	r1, [pc, #8]	; a8a0 <CDeviceNameService::RemoveDevice(char const*, bool)+0x12c>
    a894:	e59f000c 	ldr	r0, [pc, #12]	; a8a8 <CDeviceNameService::RemoveDevice(char const*, bool)+0x134>
    a898:	eb001efd 	bl	12494 <assertion_failed>
    a89c:	eaffffb9 	b	a788 <CDeviceNameService::RemoveDevice(char const*, bool)+0x14>
    a8a0:	00013ac0 	.word	0x00013ac0
    a8a4:	00013b00 	.word	0x00013b00
    a8a8:	00013ae4 	.word	0x00013ae4

0000a8ac <CDeviceNameService::GetDevice(char const*, bool)>:
    a8ac:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    a8b0:	e2515000 	subs	r5, r1, #0
    a8b4:	e1a07000 	mov	r7, r0
    a8b8:	e1a06002 	mov	r6, r2
    a8bc:	0a000034 	beq	a994 <CDeviceNameService::GetDevice(char const*, bool)+0xe8>
    a8c0:	e5970004 	ldr	r0, [r7, #4]
    a8c4:	e3500000 	cmp	r0, #0
    a8c8:	1a000019 	bne	a934 <CDeviceNameService::GetDevice(char const*, bool)+0x88>
    a8cc:	e5974000 	ldr	r4, [r7]
    a8d0:	e3540000 	cmp	r4, #0
    a8d4:	0a00001e 	beq	a954 <CDeviceNameService::GetDevice(char const*, bool)+0xa8>
    a8d8:	e3a0a092 	mov	sl, #146	; 0x92
    a8dc:	e59f90c4 	ldr	r9, [pc, #196]	; a9a8 <CDeviceNameService::GetDevice(char const*, bool)+0xfc>
    a8e0:	e59f80c4 	ldr	r8, [pc, #196]	; a9ac <CDeviceNameService::GetDevice(char const*, bool)+0x100>
    a8e4:	ea000009 	b	a910 <CDeviceNameService::GetDevice(char const*, bool)+0x64>
    a8e8:	e1a00005 	mov	r0, r5
    a8ec:	eb0019c6 	bl	1100c <strcmp>
    a8f0:	e3500000 	cmp	r0, #0
    a8f4:	1a000002 	bne	a904 <CDeviceNameService::GetDevice(char const*, bool)+0x58>
    a8f8:	e5d4300c 	ldrb	r3, [r4, #12]
    a8fc:	e1530006 	cmp	r3, r6
    a900:	0a000016 	beq	a960 <CDeviceNameService::GetDevice(char const*, bool)+0xb4>
    a904:	e5944000 	ldr	r4, [r4]
    a908:	e3540000 	cmp	r4, #0
    a90c:	0a00000c 	beq	a944 <CDeviceNameService::GetDevice(char const*, bool)+0x98>
    a910:	e5941004 	ldr	r1, [r4, #4]
    a914:	e3510000 	cmp	r1, #0
    a918:	1afffff2 	bne	a8e8 <CDeviceNameService::GetDevice(char const*, bool)+0x3c>
    a91c:	e1a01009 	mov	r1, r9
    a920:	e1a0200a 	mov	r2, sl
    a924:	e1a00008 	mov	r0, r8
    a928:	eb001ed9 	bl	12494 <assertion_failed>
    a92c:	e5941004 	ldr	r1, [r4, #4]
    a930:	eaffffec 	b	a8e8 <CDeviceNameService::GetDevice(char const*, bool)+0x3c>
    a934:	eb001cee 	bl	11cf4 <EnterCritical>
    a938:	e5974000 	ldr	r4, [r7]
    a93c:	e3540000 	cmp	r4, #0
    a940:	1affffe4 	bne	a8d8 <CDeviceNameService::GetDevice(char const*, bool)+0x2c>
    a944:	e5973004 	ldr	r3, [r7, #4]
    a948:	e3530000 	cmp	r3, #0
    a94c:	0a000000 	beq	a954 <CDeviceNameService::GetDevice(char const*, bool)+0xa8>
    a950:	eb001d14 	bl	11da8 <LeaveCritical>
    a954:	e3a04000 	mov	r4, #0
    a958:	e1a00004 	mov	r0, r4
    a95c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    a960:	e5973004 	ldr	r3, [r7, #4]
    a964:	e5944008 	ldr	r4, [r4, #8]
    a968:	e3530000 	cmp	r3, #0
    a96c:	1a000006 	bne	a98c <CDeviceNameService::GetDevice(char const*, bool)+0xe0>
    a970:	e3540000 	cmp	r4, #0
    a974:	1afffff7 	bne	a958 <CDeviceNameService::GetDevice(char const*, bool)+0xac>
    a978:	e3a0209a 	mov	r2, #154	; 0x9a
    a97c:	e59f1024 	ldr	r1, [pc, #36]	; a9a8 <CDeviceNameService::GetDevice(char const*, bool)+0xfc>
    a980:	e59f0028 	ldr	r0, [pc, #40]	; a9b0 <CDeviceNameService::GetDevice(char const*, bool)+0x104>
    a984:	eb001ec2 	bl	12494 <assertion_failed>
    a988:	eafffff2 	b	a958 <CDeviceNameService::GetDevice(char const*, bool)+0xac>
    a98c:	eb001d05 	bl	11da8 <LeaveCritical>
    a990:	eafffff6 	b	a970 <CDeviceNameService::GetDevice(char const*, bool)+0xc4>
    a994:	e3a0208b 	mov	r2, #139	; 0x8b
    a998:	e59f1008 	ldr	r1, [pc, #8]	; a9a8 <CDeviceNameService::GetDevice(char const*, bool)+0xfc>
    a99c:	e59f0010 	ldr	r0, [pc, #16]	; a9b4 <CDeviceNameService::GetDevice(char const*, bool)+0x108>
    a9a0:	eb001ebb 	bl	12494 <assertion_failed>
    a9a4:	eaffffc5 	b	a8c0 <CDeviceNameService::GetDevice(char const*, bool)+0x14>
    a9a8:	00013ac0 	.word	0x00013ac0
    a9ac:	00013b00 	.word	0x00013b00
    a9b0:	00013b14 	.word	0x00013b14
    a9b4:	00013ae4 	.word	0x00013ae4

0000a9b8 <CDeviceNameService::Get()>:
    a9b8:	e92d4010 	push	{r4, lr}
    a9bc:	e59f4020 	ldr	r4, [pc, #32]	; a9e4 <CDeviceNameService::Get()+0x2c>
    a9c0:	e5940000 	ldr	r0, [r4]
    a9c4:	e3500000 	cmp	r0, #0
    a9c8:	18bd8010 	popne	{r4, pc}
    a9cc:	e3a020cc 	mov	r2, #204	; 0xcc
    a9d0:	e59f1010 	ldr	r1, [pc, #16]	; a9e8 <CDeviceNameService::Get()+0x30>
    a9d4:	e59f0010 	ldr	r0, [pc, #16]	; a9ec <CDeviceNameService::Get()+0x34>
    a9d8:	eb001ead 	bl	12494 <assertion_failed>
    a9dc:	e5940000 	ldr	r0, [r4]
    a9e0:	e8bd8010 	pop	{r4, pc}
    a9e4:	00015a98 	.word	0x00015a98
    a9e8:	00013ac0 	.word	0x00013ac0
    a9ec:	00013b24 	.word	0x00013b24

0000a9f0 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>:
    a9f0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a9f4:	e1a07001 	mov	r7, r1
    a9f8:	e1a08002 	mov	r8, r2
    a9fc:	e24dd010 	sub	sp, sp, #16
    aa00:	e1a04000 	mov	r4, r0
    aa04:	e1a0000d 	mov	r0, sp
    aa08:	e1a05003 	mov	r5, r3
    aa0c:	e5dd6028 	ldrb	r6, [sp, #40]	; 0x28
    aa10:	eb0011ad 	bl	f0cc <CString::CString()>
    aa14:	e1a03008 	mov	r3, r8
    aa18:	e1a02007 	mov	r2, r7
    aa1c:	e1a0000d 	mov	r0, sp
    aa20:	e59f102c 	ldr	r1, [pc, #44]	; aa54 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)+0x64>
    aa24:	eb001596 	bl	10084 <CString::Format(char const*, ...)>
    aa28:	e1a0000d 	mov	r0, sp
    aa2c:	eb0011bc 	bl	f124 <CString::operator char const*() const>
    aa30:	e1a03006 	mov	r3, r6
    aa34:	e1a01000 	mov	r1, r0
    aa38:	e1a02005 	mov	r2, r5
    aa3c:	e1a00004 	mov	r0, r4
    aa40:	ebffff1c 	bl	a6b8 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
    aa44:	e1a0000d 	mov	r0, sp
    aa48:	eb00116c 	bl	f000 <CString::~CString()>
    aa4c:	e28dd010 	add	sp, sp, #16
    aa50:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    aa54:	00013b30 	.word	0x00013b30

0000aa58 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>:
    aa58:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    aa5c:	e1a06001 	mov	r6, r1
    aa60:	e1a07002 	mov	r7, r2
    aa64:	e24dd014 	sub	sp, sp, #20
    aa68:	e1a04000 	mov	r4, r0
    aa6c:	e1a0000d 	mov	r0, sp
    aa70:	e1a05003 	mov	r5, r3
    aa74:	eb001194 	bl	f0cc <CString::CString()>
    aa78:	e1a03007 	mov	r3, r7
    aa7c:	e1a02006 	mov	r2, r6
    aa80:	e1a0000d 	mov	r0, sp
    aa84:	e59f1028 	ldr	r1, [pc, #40]	; aab4 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)+0x5c>
    aa88:	eb00157d 	bl	10084 <CString::Format(char const*, ...)>
    aa8c:	e1a0000d 	mov	r0, sp
    aa90:	eb0011a3 	bl	f124 <CString::operator char const*() const>
    aa94:	e1a02005 	mov	r2, r5
    aa98:	e1a01000 	mov	r1, r0
    aa9c:	e1a00004 	mov	r0, r4
    aaa0:	ebffff33 	bl	a774 <CDeviceNameService::RemoveDevice(char const*, bool)>
    aaa4:	e1a0000d 	mov	r0, sp
    aaa8:	eb001154 	bl	f000 <CString::~CString()>
    aaac:	e28dd014 	add	sp, sp, #20
    aab0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    aab4:	00013b30 	.word	0x00013b30

0000aab8 <CDeviceNameService::GetDevice(char const*, unsigned int, bool)>:
    aab8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    aabc:	e1a06001 	mov	r6, r1
    aac0:	e1a07002 	mov	r7, r2
    aac4:	e24dd014 	sub	sp, sp, #20
    aac8:	e1a04000 	mov	r4, r0
    aacc:	e1a0000d 	mov	r0, sp
    aad0:	e1a05003 	mov	r5, r3
    aad4:	eb00117c 	bl	f0cc <CString::CString()>
    aad8:	e1a03007 	mov	r3, r7
    aadc:	e1a02006 	mov	r2, r6
    aae0:	e1a0000d 	mov	r0, sp
    aae4:	e59f1030 	ldr	r1, [pc, #48]	; ab1c <CDeviceNameService::GetDevice(char const*, unsigned int, bool)+0x64>
    aae8:	eb001565 	bl	10084 <CString::Format(char const*, ...)>
    aaec:	e1a0000d 	mov	r0, sp
    aaf0:	eb00118b 	bl	f124 <CString::operator char const*() const>
    aaf4:	e1a02005 	mov	r2, r5
    aaf8:	e1a01000 	mov	r1, r0
    aafc:	e1a00004 	mov	r0, r4
    ab00:	ebffff69 	bl	a8ac <CDeviceNameService::GetDevice(char const*, bool)>
    ab04:	e1a04000 	mov	r4, r0
    ab08:	e1a0000d 	mov	r0, sp
    ab0c:	eb00113b 	bl	f000 <CString::~CString()>
    ab10:	e1a00004 	mov	r0, r4
    ab14:	e28dd014 	add	sp, sp, #20
    ab18:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    ab1c:	00013b30 	.word	0x00013b30

0000ab20 <CDeviceNameService::ListDevices(CDevice*)>:
    ab20:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ab24:	e2516000 	subs	r6, r1, #0
    ab28:	e24dd01c 	sub	sp, sp, #28
    ab2c:	e1a04000 	mov	r4, r0
    ab30:	0a000036 	beq	ac10 <CDeviceNameService::ListDevices(CDevice*)+0xf0>
    ab34:	e5944000 	ldr	r4, [r4]
    ab38:	e3540000 	cmp	r4, #0
    ab3c:	0a00002b 	beq	abf0 <CDeviceNameService::ListDevices(CDevice*)+0xd0>
    ab40:	e3a05000 	mov	r5, #0
    ab44:	e3a0b0b9 	mov	fp, #185	; 0xb9
    ab48:	e59f80d4 	ldr	r8, [pc, #212]	; ac24 <CDeviceNameService::ListDevices(CDevice*)+0x104>
    ab4c:	e28d0008 	add	r0, sp, #8
    ab50:	eb00115d 	bl	f0cc <CString::CString()>
    ab54:	e5943004 	ldr	r3, [r4, #4]
    ab58:	e2855001 	add	r5, r5, #1
    ab5c:	e3530000 	cmp	r3, #0
    ab60:	0a000024 	beq	abf8 <CDeviceNameService::ListDevices(CDevice*)+0xd8>
    ab64:	e2157003 	ands	r7, r5, #3
    ab68:	13a01020 	movne	r1, #32
    ab6c:	03a0100a 	moveq	r1, #10
    ab70:	e5d4200c 	ldrb	r2, [r4, #12]
    ab74:	e28d0008 	add	r0, sp, #8
    ab78:	e3520000 	cmp	r2, #0
    ab7c:	03a02063 	moveq	r2, #99	; 0x63
    ab80:	13a02062 	movne	r2, #98	; 0x62
    ab84:	e58d1000 	str	r1, [sp]
    ab88:	e1a01008 	mov	r1, r8
    ab8c:	eb00153c 	bl	10084 <CString::Format(char const*, ...)>
    ab90:	e5963000 	ldr	r3, [r6]
    ab94:	e28d0008 	add	r0, sp, #8
    ab98:	e593900c 	ldr	r9, [r3, #12]
    ab9c:	eb001160 	bl	f124 <CString::operator char const*() const>
    aba0:	e1a0a000 	mov	sl, r0
    aba4:	e28d0008 	add	r0, sp, #8
    aba8:	eb00118b 	bl	f1dc <CString::GetLength() const>
    abac:	e1a0100a 	mov	r1, sl
    abb0:	e1a02000 	mov	r2, r0
    abb4:	e1a00006 	mov	r0, r6
    abb8:	e12fff39 	blx	r9
    abbc:	e5944000 	ldr	r4, [r4]
    abc0:	e28d0008 	add	r0, sp, #8
    abc4:	eb00110d 	bl	f000 <CString::~CString()>
    abc8:	e3540000 	cmp	r4, #0
    abcc:	1affffde 	bne	ab4c <CDeviceNameService::ListDevices(CDevice*)+0x2c>
    abd0:	e3570000 	cmp	r7, #0
    abd4:	0a000005 	beq	abf0 <CDeviceNameService::ListDevices(CDevice*)+0xd0>
    abd8:	e5963000 	ldr	r3, [r6]
    abdc:	e1a00006 	mov	r0, r6
    abe0:	e593300c 	ldr	r3, [r3, #12]
    abe4:	e3a02001 	mov	r2, #1
    abe8:	e59f1038 	ldr	r1, [pc, #56]	; ac28 <CDeviceNameService::ListDevices(CDevice*)+0x108>
    abec:	e12fff33 	blx	r3
    abf0:	e28dd01c 	add	sp, sp, #28
    abf4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    abf8:	e1a0200b 	mov	r2, fp
    abfc:	e59f1028 	ldr	r1, [pc, #40]	; ac2c <CDeviceNameService::ListDevices(CDevice*)+0x10c>
    ac00:	e59f0028 	ldr	r0, [pc, #40]	; ac30 <CDeviceNameService::ListDevices(CDevice*)+0x110>
    ac04:	eb001e22 	bl	12494 <assertion_failed>
    ac08:	e5943004 	ldr	r3, [r4, #4]
    ac0c:	eaffffd4 	b	ab64 <CDeviceNameService::ListDevices(CDevice*)+0x44>
    ac10:	e3a020b0 	mov	r2, #176	; 0xb0
    ac14:	e59f1010 	ldr	r1, [pc, #16]	; ac2c <CDeviceNameService::ListDevices(CDevice*)+0x10c>
    ac18:	e59f0014 	ldr	r0, [pc, #20]	; ac34 <CDeviceNameService::ListDevices(CDevice*)+0x114>
    ac1c:	eb001e1c 	bl	12494 <assertion_failed>
    ac20:	eaffffc3 	b	ab34 <CDeviceNameService::ListDevices(CDevice*)+0x14>
    ac24:	00013b48 	.word	0x00013b48
    ac28:	00013b54 	.word	0x00013b54
    ac2c:	00013ac0 	.word	0x00013ac0
    ac30:	00013b00 	.word	0x00013b00
    ac34:	00013b38 	.word	0x00013b38

0000ac38 <CGPIOPin::~CGPIOPin()>:
    ac38:	e12fff1e 	bx	lr

0000ac3c <CGPIOPin::~CGPIOPin()>:
    ac3c:	e92d4010 	push	{r4, lr}
    ac40:	e1a04000 	mov	r4, r0
    ac44:	e3a01028 	mov	r1, #40	; 0x28
    ac48:	eb001c87 	bl	11e6c <operator delete(void*, unsigned int)>
    ac4c:	e1a00004 	mov	r0, r4
    ac50:	e8bd8010 	pop	{r4, pc}

0000ac54 <CGPIOPin::CGPIOPin()>:
    ac54:	e92d4010 	push	{r4, lr}
    ac58:	e3a01000 	mov	r1, #0
    ac5c:	e3a02006 	mov	r2, #6
    ac60:	e3a04036 	mov	r4, #54	; 0x36
    ac64:	e3a0c00a 	mov	ip, #10
    ac68:	e59fe01c 	ldr	lr, [pc, #28]	; ac8c <CGPIOPin::CGPIOPin()+0x38>
    ac6c:	e5804004 	str	r4, [r0, #4]
    ac70:	e580e000 	str	lr, [r0]
    ac74:	e5c0c010 	strb	ip, [r0, #16]
    ac78:	e5801018 	str	r1, [r0, #24]
    ac7c:	e580101c 	str	r1, [r0, #28]
    ac80:	e5c02024 	strb	r2, [r0, #36]	; 0x24
    ac84:	e5c02025 	strb	r2, [r0, #37]	; 0x25
    ac88:	e8bd8010 	pop	{r4, pc}
    ac8c:	00013b60 	.word	0x00013b60

0000ac90 <CGPIOPin::AssignPin(unsigned int)>:
    ac90:	e5903004 	ldr	r3, [r0, #4]
    ac94:	e92d4070 	push	{r4, r5, r6, lr}
    ac98:	e3530036 	cmp	r3, #54	; 0x36
    ac9c:	e1a05000 	mov	r5, r0
    aca0:	e1a04001 	mov	r4, r1
    aca4:	0a000003 	beq	acb8 <CGPIOPin::AssignPin(unsigned int)+0x28>
    aca8:	e3a02040 	mov	r2, #64	; 0x40
    acac:	e59f1064 	ldr	r1, [pc, #100]	; ad18 <CGPIOPin::AssignPin(unsigned int)+0x88>
    acb0:	e59f0064 	ldr	r0, [pc, #100]	; ad1c <CGPIOPin::AssignPin(unsigned int)+0x8c>
    acb4:	eb001df6 	bl	12494 <assertion_failed>
    acb8:	e3540035 	cmp	r4, #53	; 0x35
    acbc:	e5854004 	str	r4, [r5, #4]
    acc0:	8a000007 	bhi	ace4 <CGPIOPin::AssignPin(unsigned int)+0x54>
    acc4:	e3a03001 	mov	r3, #1
    acc8:	e204201f 	and	r2, r4, #31
    accc:	e1a042a4 	lsr	r4, r4, #5
    acd0:	e1a03213 	lsl	r3, r3, r2
    acd4:	e1a04104 	lsl	r4, r4, #2
    acd8:	e585300c 	str	r3, [r5, #12]
    acdc:	e5854008 	str	r4, [r5, #8]
    ace0:	e8bd8070 	pop	{r4, r5, r6, pc}
    ace4:	eb0008fd 	bl	d0e0 <CMachineInfo::Get()>
    ace8:	e6ef1074 	uxtb	r1, r4
    acec:	eb0008ce 	bl	d02c <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>
    acf0:	e3500035 	cmp	r0, #53	; 0x35
    acf4:	e1a04000 	mov	r4, r0
    acf8:	e5850004 	str	r0, [r5, #4]
    acfc:	9afffff0 	bls	acc4 <CGPIOPin::AssignPin(unsigned int)+0x34>
    ad00:	e3a02047 	mov	r2, #71	; 0x47
    ad04:	e59f100c 	ldr	r1, [pc, #12]	; ad18 <CGPIOPin::AssignPin(unsigned int)+0x88>
    ad08:	e59f0010 	ldr	r0, [pc, #16]	; ad20 <CGPIOPin::AssignPin(unsigned int)+0x90>
    ad0c:	eb001de0 	bl	12494 <assertion_failed>
    ad10:	e5954004 	ldr	r4, [r5, #4]
    ad14:	eaffffea 	b	acc4 <CGPIOPin::AssignPin(unsigned int)+0x34>
    ad18:	00013b80 	.word	0x00013b80
    ad1c:	00013b8c 	.word	0x00013b8c
    ad20:	00013ba0 	.word	0x00013ba0

0000ad24 <CGPIOPin::Write(unsigned int)>:
    ad24:	e5903004 	ldr	r3, [r0, #4]
    ad28:	e92d4070 	push	{r4, r5, r6, lr}
    ad2c:	e3530035 	cmp	r3, #53	; 0x35
    ad30:	e1a04000 	mov	r4, r0
    ad34:	e1a05001 	mov	r5, r1
    ad38:	8a00001e 	bhi	adb8 <CGPIOPin::Write(unsigned int)+0x94>
    ad3c:	e5d43010 	ldrb	r3, [r4, #16]
    ad40:	e3530003 	cmp	r3, #3
    ad44:	ca000016 	bgt	ada4 <CGPIOPin::Write(unsigned int)+0x80>
    ad48:	e3a03000 	mov	r3, #0
    ad4c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    ad50:	e3550001 	cmp	r5, #1
    ad54:	9a00000b 	bls	ad88 <CGPIOPin::Write(unsigned int)+0x64>
    ad58:	e3a02098 	mov	r2, #152	; 0x98
    ad5c:	e59f1068 	ldr	r1, [pc, #104]	; adcc <CGPIOPin::Write(unsigned int)+0xa8>
    ad60:	e59f0068 	ldr	r0, [pc, #104]	; add0 <CGPIOPin::Write(unsigned int)+0xac>
    ad64:	eb001dca 	bl	12494 <assertion_failed>
    ad68:	e5845014 	str	r5, [r4, #20]
    ad6c:	e59f5060 	ldr	r5, [pc, #96]	; add4 <CGPIOPin::Write(unsigned int)+0xb0>
    ad70:	e594100c 	ldr	r1, [r4, #12]
    ad74:	e5942008 	ldr	r2, [r4, #8]
    ad78:	e3a03000 	mov	r3, #0
    ad7c:	e7851002 	str	r1, [r5, r2]
    ad80:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    ad84:	e8bd8070 	pop	{r4, r5, r6, pc}
    ad88:	e59f3044 	ldr	r3, [pc, #68]	; add4 <CGPIOPin::Write(unsigned int)+0xb0>
    ad8c:	e59f2044 	ldr	r2, [pc, #68]	; add8 <CGPIOPin::Write(unsigned int)+0xb4>
    ad90:	e3550000 	cmp	r5, #0
    ad94:	e5845014 	str	r5, [r4, #20]
    ad98:	11a05003 	movne	r5, r3
    ad9c:	01a05002 	moveq	r5, r2
    ada0:	eafffff2 	b	ad70 <CGPIOPin::Write(unsigned int)+0x4c>
    ada4:	e3a02094 	mov	r2, #148	; 0x94
    ada8:	e59f101c 	ldr	r1, [pc, #28]	; adcc <CGPIOPin::Write(unsigned int)+0xa8>
    adac:	e59f0028 	ldr	r0, [pc, #40]	; addc <CGPIOPin::Write(unsigned int)+0xb8>
    adb0:	eb001db7 	bl	12494 <assertion_failed>
    adb4:	eaffffe3 	b	ad48 <CGPIOPin::Write(unsigned int)+0x24>
    adb8:	e3a02091 	mov	r2, #145	; 0x91
    adbc:	e59f1008 	ldr	r1, [pc, #8]	; adcc <CGPIOPin::Write(unsigned int)+0xa8>
    adc0:	e59f0018 	ldr	r0, [pc, #24]	; ade0 <CGPIOPin::Write(unsigned int)+0xbc>
    adc4:	eb001db2 	bl	12494 <assertion_failed>
    adc8:	eaffffdb 	b	ad3c <CGPIOPin::Write(unsigned int)+0x18>
    adcc:	00013b80 	.word	0x00013b80
    add0:	00013bd8 	.word	0x00013bd8
    add4:	2020001c 	.word	0x2020001c
    add8:	20200028 	.word	0x20200028
    addc:	00013bb4 	.word	0x00013bb4
    ade0:	00013ba0 	.word	0x00013ba0

0000ade4 <CGPIOPin::Read() const>:
    ade4:	e5903004 	ldr	r3, [r0, #4]
    ade8:	e92d4010 	push	{r4, lr}
    adec:	e3530035 	cmp	r3, #53	; 0x35
    adf0:	e1a04000 	mov	r4, r0
    adf4:	8a000013 	bhi	ae48 <CGPIOPin::Read() const+0x64>
    adf8:	e5d43010 	ldrb	r3, [r4, #16]
    adfc:	e2432002 	sub	r2, r3, #2
    ae00:	e3530000 	cmp	r3, #0
    ae04:	13520001 	cmpne	r2, #1
    ae08:	9a000003 	bls	ae1c <CGPIOPin::Read() const+0x38>
    ae0c:	e3a020a8 	mov	r2, #168	; 0xa8
    ae10:	e59f1044 	ldr	r1, [pc, #68]	; ae5c <CGPIOPin::Read() const+0x78>
    ae14:	e59f0044 	ldr	r0, [pc, #68]	; ae60 <CGPIOPin::Read() const+0x7c>
    ae18:	eb001d9d 	bl	12494 <assertion_failed>
    ae1c:	e3a03000 	mov	r3, #0
    ae20:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    ae24:	e59f1038 	ldr	r1, [pc, #56]	; ae64 <CGPIOPin::Read() const+0x80>
    ae28:	e5940008 	ldr	r0, [r4, #8]
    ae2c:	e594200c 	ldr	r2, [r4, #12]
    ae30:	e7901001 	ldr	r1, [r0, r1]
    ae34:	e1110002 	tst	r1, r2
    ae38:	13a00001 	movne	r0, #1
    ae3c:	01a00003 	moveq	r0, r3
    ae40:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    ae44:	e8bd8010 	pop	{r4, pc}
    ae48:	e3a020a4 	mov	r2, #164	; 0xa4
    ae4c:	e59f1008 	ldr	r1, [pc, #8]	; ae5c <CGPIOPin::Read() const+0x78>
    ae50:	e59f0010 	ldr	r0, [pc, #16]	; ae68 <CGPIOPin::Read() const+0x84>
    ae54:	eb001d8e 	bl	12494 <assertion_failed>
    ae58:	eaffffe6 	b	adf8 <CGPIOPin::Read() const+0x14>
    ae5c:	00013b80 	.word	0x00013b80
    ae60:	00013bf8 	.word	0x00013bf8
    ae64:	20200034 	.word	0x20200034
    ae68:	00013ba0 	.word	0x00013ba0

0000ae6c <CGPIOPin::Invert()>:
    ae6c:	e5d03010 	ldrb	r3, [r0, #16]
    ae70:	e92d4010 	push	{r4, lr}
    ae74:	e3530001 	cmp	r3, #1
    ae78:	e1a04000 	mov	r4, r0
    ae7c:	0a000003 	beq	ae90 <CGPIOPin::Invert()+0x24>
    ae80:	e3a020b5 	mov	r2, #181	; 0xb5
    ae84:	e59f1018 	ldr	r1, [pc, #24]	; aea4 <CGPIOPin::Invert()+0x38>
    ae88:	e59f0018 	ldr	r0, [pc, #24]	; aea8 <CGPIOPin::Invert()+0x3c>
    ae8c:	eb001d80 	bl	12494 <assertion_failed>
    ae90:	e5941014 	ldr	r1, [r4, #20]
    ae94:	e1a00004 	mov	r0, r4
    ae98:	e8bd4010 	pop	{r4, lr}
    ae9c:	e2211001 	eor	r1, r1, #1
    aea0:	eaffff9f 	b	ad24 <CGPIOPin::Write(unsigned int)>
    aea4:	00013b80 	.word	0x00013b80
    aea8:	00013c54 	.word	0x00013c54

0000aeac <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)>:
    aeac:	e5d03010 	ldrb	r3, [r0, #16]
    aeb0:	e92d4070 	push	{r4, r5, r6, lr}
    aeb4:	e1a05001 	mov	r5, r1
    aeb8:	e2431002 	sub	r1, r3, #2
    aebc:	e3530000 	cmp	r3, #0
    aec0:	13510001 	cmpne	r1, #1
    aec4:	e1a04000 	mov	r4, r0
    aec8:	e1a06002 	mov	r6, r2
    aecc:	9a000003 	bls	aee0 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x34>
    aed0:	e3a020be 	mov	r2, #190	; 0xbe
    aed4:	e59f10b4 	ldr	r1, [pc, #180]	; af90 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe4>
    aed8:	e59f00b4 	ldr	r0, [pc, #180]	; af94 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe8>
    aedc:	eb001d6c 	bl	12494 <assertion_failed>
    aee0:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    aee4:	e3530006 	cmp	r3, #6
    aee8:	0a000003 	beq	aefc <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x50>
    aeec:	e3a020c0 	mov	r2, #192	; 0xc0
    aef0:	e59f1098 	ldr	r1, [pc, #152]	; af90 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe4>
    aef4:	e59f009c 	ldr	r0, [pc, #156]	; af98 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xec>
    aef8:	eb001d65 	bl	12494 <assertion_failed>
    aefc:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    af00:	e3530006 	cmp	r3, #6
    af04:	0a000003 	beq	af18 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x6c>
    af08:	e3a020c1 	mov	r2, #193	; 0xc1
    af0c:	e59f107c 	ldr	r1, [pc, #124]	; af90 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe4>
    af10:	e59f0084 	ldr	r0, [pc, #132]	; af9c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xf0>
    af14:	eb001d5e 	bl	12494 <assertion_failed>
    af18:	e3550000 	cmp	r5, #0
    af1c:	0a000016 	beq	af7c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xd0>
    af20:	e594301c 	ldr	r3, [r4, #28]
    af24:	e3530000 	cmp	r3, #0
    af28:	0a000003 	beq	af3c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x90>
    af2c:	e3a020c4 	mov	r2, #196	; 0xc4
    af30:	e59f1058 	ldr	r1, [pc, #88]	; af90 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe4>
    af34:	e59f0064 	ldr	r0, [pc, #100]	; afa0 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xf4>
    af38:	eb001d55 	bl	12494 <assertion_failed>
    af3c:	e5940018 	ldr	r0, [r4, #24]
    af40:	e584501c 	str	r5, [r4, #28]
    af44:	e3500000 	cmp	r0, #0
    af48:	e5846020 	str	r6, [r4, #32]
    af4c:	0a000002 	beq	af5c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xb0>
    af50:	e1a01004 	mov	r1, r4
    af54:	e8bd4070 	pop	{r4, r5, r6, lr}
    af58:	ea001fed 	b	12f14 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
    af5c:	e59f102c 	ldr	r1, [pc, #44]	; af90 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe4>
    af60:	e59f003c 	ldr	r0, [pc, #60]	; afa4 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xf8>
    af64:	e3a020c9 	mov	r2, #201	; 0xc9
    af68:	eb001d49 	bl	12494 <assertion_failed>
    af6c:	e5940018 	ldr	r0, [r4, #24]
    af70:	e1a01004 	mov	r1, r4
    af74:	e8bd4070 	pop	{r4, r5, r6, lr}
    af78:	ea001fe5 	b	12f14 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
    af7c:	e3a020c3 	mov	r2, #195	; 0xc3
    af80:	e59f1008 	ldr	r1, [pc, #8]	; af90 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe4>
    af84:	e59f001c 	ldr	r0, [pc, #28]	; afa8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xfc>
    af88:	eb001d41 	bl	12494 <assertion_failed>
    af8c:	eaffffe3 	b	af20 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x74>
    af90:	00013b80 	.word	0x00013b80
    af94:	00013bf8 	.word	0x00013bf8
    af98:	00013c70 	.word	0x00013c70
    af9c:	00013c94 	.word	0x00013c94
    afa0:	00013cbc 	.word	0x00013cbc
    afa4:	00013ccc 	.word	0x00013ccc
    afa8:	00013e3c 	.word	0x00013e3c

0000afac <CGPIOPin::DisconnectInterrupt()>:
    afac:	e5d03010 	ldrb	r3, [r0, #16]
    afb0:	e92d4010 	push	{r4, lr}
    afb4:	e2432002 	sub	r2, r3, #2
    afb8:	e3530000 	cmp	r3, #0
    afbc:	13520001 	cmpne	r2, #1
    afc0:	e1a04000 	mov	r4, r0
    afc4:	9a000003 	bls	afd8 <CGPIOPin::DisconnectInterrupt()+0x2c>
    afc8:	e3a020d1 	mov	r2, #209	; 0xd1
    afcc:	e59f109c 	ldr	r1, [pc, #156]	; b070 <CGPIOPin::DisconnectInterrupt()+0xc4>
    afd0:	e59f009c 	ldr	r0, [pc, #156]	; b074 <CGPIOPin::DisconnectInterrupt()+0xc8>
    afd4:	eb001d2e 	bl	12494 <assertion_failed>
    afd8:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    afdc:	e3530006 	cmp	r3, #6
    afe0:	0a000003 	beq	aff4 <CGPIOPin::DisconnectInterrupt()+0x48>
    afe4:	e3a020d3 	mov	r2, #211	; 0xd3
    afe8:	e59f1080 	ldr	r1, [pc, #128]	; b070 <CGPIOPin::DisconnectInterrupt()+0xc4>
    afec:	e59f0084 	ldr	r0, [pc, #132]	; b078 <CGPIOPin::DisconnectInterrupt()+0xcc>
    aff0:	eb001d27 	bl	12494 <assertion_failed>
    aff4:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    aff8:	e3530006 	cmp	r3, #6
    affc:	0a000003 	beq	b010 <CGPIOPin::DisconnectInterrupt()+0x64>
    b000:	e3a020d4 	mov	r2, #212	; 0xd4
    b004:	e59f1064 	ldr	r1, [pc, #100]	; b070 <CGPIOPin::DisconnectInterrupt()+0xc4>
    b008:	e59f006c 	ldr	r0, [pc, #108]	; b07c <CGPIOPin::DisconnectInterrupt()+0xd0>
    b00c:	eb001d20 	bl	12494 <assertion_failed>
    b010:	e594301c 	ldr	r3, [r4, #28]
    b014:	e3530000 	cmp	r3, #0
    b018:	0a00000f 	beq	b05c <CGPIOPin::DisconnectInterrupt()+0xb0>
    b01c:	e3a03000 	mov	r3, #0
    b020:	e5940018 	ldr	r0, [r4, #24]
    b024:	e584301c 	str	r3, [r4, #28]
    b028:	e1500003 	cmp	r0, r3
    b02c:	0a000002 	beq	b03c <CGPIOPin::DisconnectInterrupt()+0x90>
    b030:	e1a01004 	mov	r1, r4
    b034:	e8bd4010 	pop	{r4, lr}
    b038:	ea001fde 	b	12fb8 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
    b03c:	e59f102c 	ldr	r1, [pc, #44]	; b070 <CGPIOPin::DisconnectInterrupt()+0xc4>
    b040:	e59f0038 	ldr	r0, [pc, #56]	; b080 <CGPIOPin::DisconnectInterrupt()+0xd4>
    b044:	e3a020d9 	mov	r2, #217	; 0xd9
    b048:	eb001d11 	bl	12494 <assertion_failed>
    b04c:	e5940018 	ldr	r0, [r4, #24]
    b050:	e1a01004 	mov	r1, r4
    b054:	e8bd4010 	pop	{r4, lr}
    b058:	ea001fd6 	b	12fb8 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
    b05c:	e3a020d6 	mov	r2, #214	; 0xd6
    b060:	e59f1008 	ldr	r1, [pc, #8]	; b070 <CGPIOPin::DisconnectInterrupt()+0xc4>
    b064:	e59f0018 	ldr	r0, [pc, #24]	; b084 <CGPIOPin::DisconnectInterrupt()+0xd8>
    b068:	eb001d09 	bl	12494 <assertion_failed>
    b06c:	eaffffea 	b	b01c <CGPIOPin::DisconnectInterrupt()+0x70>
    b070:	00013b80 	.word	0x00013b80
    b074:	00013bf8 	.word	0x00013bf8
    b078:	00013c70 	.word	0x00013c70
    b07c:	00013c94 	.word	0x00013c94
    b080:	00013ccc 	.word	0x00013ccc
    b084:	00013cdc 	.word	0x00013cdc

0000b088 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)>:
    b088:	e5d03010 	ldrb	r3, [r0, #16]
    b08c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b090:	e2432002 	sub	r2, r3, #2
    b094:	e3530000 	cmp	r3, #0
    b098:	13520001 	cmpne	r2, #1
    b09c:	e1a04000 	mov	r4, r0
    b0a0:	e1a05001 	mov	r5, r1
    b0a4:	9a000003 	bls	b0b8 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x30>
    b0a8:	e3a020e1 	mov	r2, #225	; 0xe1
    b0ac:	e59f10d8 	ldr	r1, [pc, #216]	; b18c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x104>
    b0b0:	e59f00d8 	ldr	r0, [pc, #216]	; b190 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x108>
    b0b4:	eb001cf6 	bl	12494 <assertion_failed>
    b0b8:	e594301c 	ldr	r3, [r4, #28]
    b0bc:	e3530000 	cmp	r3, #0
    b0c0:	0a00002c 	beq	b178 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf0>
    b0c4:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    b0c8:	e3530006 	cmp	r3, #6
    b0cc:	0a000003 	beq	b0e0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x58>
    b0d0:	e3a020e4 	mov	r2, #228	; 0xe4
    b0d4:	e59f10b0 	ldr	r1, [pc, #176]	; b18c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x104>
    b0d8:	e59f00b4 	ldr	r0, [pc, #180]	; b194 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x10c>
    b0dc:	eb001cec 	bl	12494 <assertion_failed>
    b0e0:	e3550005 	cmp	r5, #5
    b0e4:	ca000017 	bgt	b148 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xc0>
    b0e8:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    b0ec:	e1530005 	cmp	r3, r5
    b0f0:	0a00001b 	beq	b164 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xdc>
    b0f4:	e59f709c 	ldr	r7, [pc, #156]	; b198 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x110>
    b0f8:	e5942008 	ldr	r2, [r4, #8]
    b0fc:	e5970000 	ldr	r0, [r7]
    b100:	e59f6094 	ldr	r6, [pc, #148]	; b19c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x114>
    b104:	e0853085 	add	r3, r5, r5, lsl #1
    b108:	e3500000 	cmp	r0, #0
    b10c:	e5c45024 	strb	r5, [r4, #36]	; 0x24
    b110:	e0826006 	add	r6, r2, r6
    b114:	e1a05103 	lsl	r5, r3, #2
    b118:	1a000008 	bne	b140 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xb8>
    b11c:	e594200c 	ldr	r2, [r4, #12]
    b120:	e7963005 	ldr	r3, [r6, r5]
    b124:	e1833002 	orr	r3, r3, r2
    b128:	e7863005 	str	r3, [r6, r5]
    b12c:	e5973000 	ldr	r3, [r7]
    b130:	e3530000 	cmp	r3, #0
    b134:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    b138:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    b13c:	ea001b19 	b	11da8 <LeaveCritical>
    b140:	eb001aeb 	bl	11cf4 <EnterCritical>
    b144:	eafffff4 	b	b11c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x94>
    b148:	e3a020e5 	mov	r2, #229	; 0xe5
    b14c:	e59f1038 	ldr	r1, [pc, #56]	; b18c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x104>
    b150:	e59f0048 	ldr	r0, [pc, #72]	; b1a0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x118>
    b154:	eb001cce 	bl	12494 <assertion_failed>
    b158:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    b15c:	e1530005 	cmp	r3, r5
    b160:	1affffe3 	bne	b0f4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x6c>
    b164:	e3a020e6 	mov	r2, #230	; 0xe6
    b168:	e59f101c 	ldr	r1, [pc, #28]	; b18c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x104>
    b16c:	e59f0030 	ldr	r0, [pc, #48]	; b1a4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x11c>
    b170:	eb001cc7 	bl	12494 <assertion_failed>
    b174:	eaffffde 	b	b0f4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x6c>
    b178:	e3a020e2 	mov	r2, #226	; 0xe2
    b17c:	e59f1008 	ldr	r1, [pc, #8]	; b18c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x104>
    b180:	e59f0020 	ldr	r0, [pc, #32]	; b1a8 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x120>
    b184:	eb001cc2 	bl	12494 <assertion_failed>
    b188:	eaffffcd 	b	b0c4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x3c>
    b18c:	00013b80 	.word	0x00013b80
    b190:	00013bf8 	.word	0x00013bf8
    b194:	00013c70 	.word	0x00013c70
    b198:	00015a9c 	.word	0x00015a9c
    b19c:	2020004c 	.word	0x2020004c
    b1a0:	00013cec 	.word	0x00013cec
    b1a4:	00013d10 	.word	0x00013d10
    b1a8:	00013cdc 	.word	0x00013cdc

0000b1ac <CGPIOPin::DisableInterrupt()>:
    b1ac:	e5d03010 	ldrb	r3, [r0, #16]
    b1b0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b1b4:	e2432002 	sub	r2, r3, #2
    b1b8:	e3530000 	cmp	r3, #0
    b1bc:	13520001 	cmpne	r2, #1
    b1c0:	e1a05000 	mov	r5, r0
    b1c4:	9a000003 	bls	b1d8 <CGPIOPin::DisableInterrupt()+0x2c>
    b1c8:	e3a020f7 	mov	r2, #247	; 0xf7
    b1cc:	e59f1080 	ldr	r1, [pc, #128]	; b254 <CGPIOPin::DisableInterrupt()+0xa8>
    b1d0:	e59f0080 	ldr	r0, [pc, #128]	; b258 <CGPIOPin::DisableInterrupt()+0xac>
    b1d4:	eb001cae 	bl	12494 <assertion_failed>
    b1d8:	e5d53024 	ldrb	r3, [r5, #36]	; 0x24
    b1dc:	e3530005 	cmp	r3, #5
    b1e0:	ca000015 	bgt	b23c <CGPIOPin::DisableInterrupt()+0x90>
    b1e4:	e59f7070 	ldr	r7, [pc, #112]	; b25c <CGPIOPin::DisableInterrupt()+0xb0>
    b1e8:	e5952008 	ldr	r2, [r5, #8]
    b1ec:	e5970000 	ldr	r0, [r7]
    b1f0:	e59f6068 	ldr	r6, [pc, #104]	; b260 <CGPIOPin::DisableInterrupt()+0xb4>
    b1f4:	e0833083 	add	r3, r3, r3, lsl #1
    b1f8:	e3500000 	cmp	r0, #0
    b1fc:	e1a04103 	lsl	r4, r3, #2
    b200:	e0826006 	add	r6, r2, r6
    b204:	1a00000a 	bne	b234 <CGPIOPin::DisableInterrupt()+0x88>
    b208:	e7963004 	ldr	r3, [r6, r4]
    b20c:	e595200c 	ldr	r2, [r5, #12]
    b210:	e1c33002 	bic	r3, r3, r2
    b214:	e7863004 	str	r3, [r6, r4]
    b218:	e5973000 	ldr	r3, [r7]
    b21c:	e3530000 	cmp	r3, #0
    b220:	0a000000 	beq	b228 <CGPIOPin::DisableInterrupt()+0x7c>
    b224:	eb001adf 	bl	11da8 <LeaveCritical>
    b228:	e3a03006 	mov	r3, #6
    b22c:	e5c53024 	strb	r3, [r5, #36]	; 0x24
    b230:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    b234:	eb001aae 	bl	11cf4 <EnterCritical>
    b238:	eafffff2 	b	b208 <CGPIOPin::DisableInterrupt()+0x5c>
    b23c:	e3a020f9 	mov	r2, #249	; 0xf9
    b240:	e59f100c 	ldr	r1, [pc, #12]	; b254 <CGPIOPin::DisableInterrupt()+0xa8>
    b244:	e59f0018 	ldr	r0, [pc, #24]	; b264 <CGPIOPin::DisableInterrupt()+0xb8>
    b248:	eb001c91 	bl	12494 <assertion_failed>
    b24c:	e5d53024 	ldrb	r3, [r5, #36]	; 0x24
    b250:	eaffffe3 	b	b1e4 <CGPIOPin::DisableInterrupt()+0x38>
    b254:	00013b80 	.word	0x00013b80
    b258:	00013bf8 	.word	0x00013bf8
    b25c:	00015a9c 	.word	0x00015a9c
    b260:	2020004c 	.word	0x2020004c
    b264:	00013d2c 	.word	0x00013d2c

0000b268 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)>:
    b268:	e5d03010 	ldrb	r3, [r0, #16]
    b26c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b270:	e2432002 	sub	r2, r3, #2
    b274:	e3530000 	cmp	r3, #0
    b278:	13520001 	cmpne	r2, #1
    b27c:	e1a04000 	mov	r4, r0
    b280:	e1a05001 	mov	r5, r1
    b284:	9a000003 	bls	b298 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x30>
    b288:	e59f20dc 	ldr	r2, [pc, #220]	; b36c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x104>
    b28c:	e59f10dc 	ldr	r1, [pc, #220]	; b370 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x108>
    b290:	e59f00dc 	ldr	r0, [pc, #220]	; b374 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x10c>
    b294:	eb001c7e 	bl	12494 <assertion_failed>
    b298:	e594301c 	ldr	r3, [r4, #28]
    b29c:	e3530000 	cmp	r3, #0
    b2a0:	0a00002c 	beq	b358 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf0>
    b2a4:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    b2a8:	e3530006 	cmp	r3, #6
    b2ac:	0a000003 	beq	b2c0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x58>
    b2b0:	e59f20c0 	ldr	r2, [pc, #192]	; b378 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x110>
    b2b4:	e59f10b4 	ldr	r1, [pc, #180]	; b370 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x108>
    b2b8:	e59f00bc 	ldr	r0, [pc, #188]	; b37c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x114>
    b2bc:	eb001c74 	bl	12494 <assertion_failed>
    b2c0:	e3550005 	cmp	r5, #5
    b2c4:	ca000017 	bgt	b328 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xc0>
    b2c8:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    b2cc:	e1530005 	cmp	r3, r5
    b2d0:	0a00001b 	beq	b344 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xdc>
    b2d4:	e59f70a4 	ldr	r7, [pc, #164]	; b380 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x118>
    b2d8:	e5942008 	ldr	r2, [r4, #8]
    b2dc:	e5970000 	ldr	r0, [r7]
    b2e0:	e59f609c 	ldr	r6, [pc, #156]	; b384 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x11c>
    b2e4:	e0853085 	add	r3, r5, r5, lsl #1
    b2e8:	e3500000 	cmp	r0, #0
    b2ec:	e5c45025 	strb	r5, [r4, #37]	; 0x25
    b2f0:	e0826006 	add	r6, r2, r6
    b2f4:	e1a05103 	lsl	r5, r3, #2
    b2f8:	1a000008 	bne	b320 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xb8>
    b2fc:	e594200c 	ldr	r2, [r4, #12]
    b300:	e7963005 	ldr	r3, [r6, r5]
    b304:	e1833002 	orr	r3, r3, r2
    b308:	e7863005 	str	r3, [r6, r5]
    b30c:	e5973000 	ldr	r3, [r7]
    b310:	e3530000 	cmp	r3, #0
    b314:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    b318:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    b31c:	ea001aa1 	b	11da8 <LeaveCritical>
    b320:	eb001a73 	bl	11cf4 <EnterCritical>
    b324:	eafffff4 	b	b2fc <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x94>
    b328:	e59f2058 	ldr	r2, [pc, #88]	; b388 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x120>
    b32c:	e59f103c 	ldr	r1, [pc, #60]	; b370 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x108>
    b330:	e59f0054 	ldr	r0, [pc, #84]	; b38c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x124>
    b334:	eb001c56 	bl	12494 <assertion_failed>
    b338:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    b33c:	e1530005 	cmp	r3, r5
    b340:	1affffe3 	bne	b2d4 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x6c>
    b344:	e59f2044 	ldr	r2, [pc, #68]	; b390 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x128>
    b348:	e59f1020 	ldr	r1, [pc, #32]	; b370 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x108>
    b34c:	e59f0040 	ldr	r0, [pc, #64]	; b394 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x12c>
    b350:	eb001c4f 	bl	12494 <assertion_failed>
    b354:	eaffffde 	b	b2d4 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x6c>
    b358:	e59f2038 	ldr	r2, [pc, #56]	; b398 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x130>
    b35c:	e59f100c 	ldr	r1, [pc, #12]	; b370 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x108>
    b360:	e59f0034 	ldr	r0, [pc, #52]	; b39c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x134>
    b364:	eb001c4a 	bl	12494 <assertion_failed>
    b368:	eaffffcd 	b	b2a4 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x3c>
    b36c:	0000010a 	.word	0x0000010a
    b370:	00013b80 	.word	0x00013b80
    b374:	00013bf8 	.word	0x00013bf8
    b378:	0000010d 	.word	0x0000010d
    b37c:	00013c94 	.word	0x00013c94
    b380:	00015a9c 	.word	0x00015a9c
    b384:	2020004c 	.word	0x2020004c
    b388:	0000010e 	.word	0x0000010e
    b38c:	00013cec 	.word	0x00013cec
    b390:	0000010f 	.word	0x0000010f
    b394:	00013d50 	.word	0x00013d50
    b398:	0000010b 	.word	0x0000010b
    b39c:	00013cdc 	.word	0x00013cdc

0000b3a0 <CGPIOPin::DisableInterrupt2()>:
    b3a0:	e5d03010 	ldrb	r3, [r0, #16]
    b3a4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b3a8:	e2432002 	sub	r2, r3, #2
    b3ac:	e3530000 	cmp	r3, #0
    b3b0:	13520001 	cmpne	r2, #1
    b3b4:	e1a05000 	mov	r5, r0
    b3b8:	9a000003 	bls	b3cc <CGPIOPin::DisableInterrupt2()+0x2c>
    b3bc:	e3a02e12 	mov	r2, #288	; 0x120
    b3c0:	e59f1080 	ldr	r1, [pc, #128]	; b448 <CGPIOPin::DisableInterrupt2()+0xa8>
    b3c4:	e59f0080 	ldr	r0, [pc, #128]	; b44c <CGPIOPin::DisableInterrupt2()+0xac>
    b3c8:	eb001c31 	bl	12494 <assertion_failed>
    b3cc:	e5d53025 	ldrb	r3, [r5, #37]	; 0x25
    b3d0:	e3530005 	cmp	r3, #5
    b3d4:	ca000015 	bgt	b430 <CGPIOPin::DisableInterrupt2()+0x90>
    b3d8:	e59f7070 	ldr	r7, [pc, #112]	; b450 <CGPIOPin::DisableInterrupt2()+0xb0>
    b3dc:	e5952008 	ldr	r2, [r5, #8]
    b3e0:	e5970000 	ldr	r0, [r7]
    b3e4:	e59f6068 	ldr	r6, [pc, #104]	; b454 <CGPIOPin::DisableInterrupt2()+0xb4>
    b3e8:	e0833083 	add	r3, r3, r3, lsl #1
    b3ec:	e3500000 	cmp	r0, #0
    b3f0:	e1a04103 	lsl	r4, r3, #2
    b3f4:	e0826006 	add	r6, r2, r6
    b3f8:	1a00000a 	bne	b428 <CGPIOPin::DisableInterrupt2()+0x88>
    b3fc:	e7963004 	ldr	r3, [r6, r4]
    b400:	e595200c 	ldr	r2, [r5, #12]
    b404:	e1c33002 	bic	r3, r3, r2
    b408:	e7863004 	str	r3, [r6, r4]
    b40c:	e5973000 	ldr	r3, [r7]
    b410:	e3530000 	cmp	r3, #0
    b414:	0a000000 	beq	b41c <CGPIOPin::DisableInterrupt2()+0x7c>
    b418:	eb001a62 	bl	11da8 <LeaveCritical>
    b41c:	e3a03006 	mov	r3, #6
    b420:	e5c53025 	strb	r3, [r5, #37]	; 0x25
    b424:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    b428:	eb001a31 	bl	11cf4 <EnterCritical>
    b42c:	eafffff2 	b	b3fc <CGPIOPin::DisableInterrupt2()+0x5c>
    b430:	e59f2020 	ldr	r2, [pc, #32]	; b458 <CGPIOPin::DisableInterrupt2()+0xb8>
    b434:	e59f100c 	ldr	r1, [pc, #12]	; b448 <CGPIOPin::DisableInterrupt2()+0xa8>
    b438:	e59f001c 	ldr	r0, [pc, #28]	; b45c <CGPIOPin::DisableInterrupt2()+0xbc>
    b43c:	eb001c14 	bl	12494 <assertion_failed>
    b440:	e5d53025 	ldrb	r3, [r5, #37]	; 0x25
    b444:	eaffffe3 	b	b3d8 <CGPIOPin::DisableInterrupt2()+0x38>
    b448:	00013b80 	.word	0x00013b80
    b44c:	00013bf8 	.word	0x00013bf8
    b450:	00015a9c 	.word	0x00015a9c
    b454:	2020004c 	.word	0x2020004c
    b458:	00000122 	.word	0x00000122
    b45c:	00013d6c 	.word	0x00013d6c

0000b460 <CGPIOPin::ReadAll()>:
    b460:	e59f3004 	ldr	r3, [pc, #4]	; b46c <CGPIOPin::ReadAll()+0xc>
    b464:	e5930034 	ldr	r0, [r3, #52]	; 0x34
    b468:	e12fff1e 	bx	lr
    b46c:	20200000 	.word	0x20200000

0000b470 <CGPIOPin::SetPullUpMode(unsigned int)>:
    b470:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    b474:	e1a08000 	mov	r8, r0
    b478:	e59f4078 	ldr	r4, [pc, #120]	; b4f8 <CGPIOPin::SetPullUpMode(unsigned int)+0x88>
    b47c:	e1a09001 	mov	r9, r1
    b480:	e5940000 	ldr	r0, [r4]
    b484:	e5986008 	ldr	r6, [r8, #8]
    b488:	e3500000 	cmp	r0, #0
    b48c:	e59f5068 	ldr	r5, [pc, #104]	; b4fc <CGPIOPin::SetPullUpMode(unsigned int)+0x8c>
    b490:	1a000016 	bne	b4f0 <CGPIOPin::SetPullUpMode(unsigned int)+0x80>
    b494:	e3590002 	cmp	r9, #2
    b498:	8a00000f 	bhi	b4dc <CGPIOPin::SetPullUpMode(unsigned int)+0x6c>
    b49c:	e59f705c 	ldr	r7, [pc, #92]	; b500 <CGPIOPin::SetPullUpMode(unsigned int)+0x90>
    b4a0:	e3a00005 	mov	r0, #5
    b4a4:	e5879094 	str	r9, [r7, #148]	; 0x94
    b4a8:	eb00166c 	bl	10e60 <CTimer::SimpleusDelay(unsigned int)>
    b4ac:	e598300c 	ldr	r3, [r8, #12]
    b4b0:	e3a00005 	mov	r0, #5
    b4b4:	e7863005 	str	r3, [r6, r5]
    b4b8:	eb001668 	bl	10e60 <CTimer::SimpleusDelay(unsigned int)>
    b4bc:	e3a03000 	mov	r3, #0
    b4c0:	e5873094 	str	r3, [r7, #148]	; 0x94
    b4c4:	e7863005 	str	r3, [r6, r5]
    b4c8:	e5943000 	ldr	r3, [r4]
    b4cc:	e3530000 	cmp	r3, #0
    b4d0:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    b4d4:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    b4d8:	ea001a32 	b	11da8 <LeaveCritical>
    b4dc:	e59f2020 	ldr	r2, [pc, #32]	; b504 <CGPIOPin::SetPullUpMode(unsigned int)+0x94>
    b4e0:	e59f1020 	ldr	r1, [pc, #32]	; b508 <CGPIOPin::SetPullUpMode(unsigned int)+0x98>
    b4e4:	e59f0020 	ldr	r0, [pc, #32]	; b50c <CGPIOPin::SetPullUpMode(unsigned int)+0x9c>
    b4e8:	eb001be9 	bl	12494 <assertion_failed>
    b4ec:	eaffffea 	b	b49c <CGPIOPin::SetPullUpMode(unsigned int)+0x2c>
    b4f0:	eb0019ff 	bl	11cf4 <EnterCritical>
    b4f4:	eaffffe6 	b	b494 <CGPIOPin::SetPullUpMode(unsigned int)+0x24>
    b4f8:	00015a9c 	.word	0x00015a9c
    b4fc:	20200098 	.word	0x20200098
    b500:	20200000 	.word	0x20200000
    b504:	0000013b 	.word	0x0000013b
    b508:	00013b80 	.word	0x00013b80
    b50c:	00013d90 	.word	0x00013d90

0000b510 <CGPIOPin::SetAlternateFunction(unsigned int)>:
    b510:	e5902004 	ldr	r2, [r0, #4]
    b514:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b518:	e3520035 	cmp	r2, #53	; 0x35
    b51c:	e1a06001 	mov	r6, r1
    b520:	8a000022 	bhi	b5b0 <CGPIOPin::SetAlternateFunction(unsigned int)+0xa0>
    b524:	e59f30a0 	ldr	r3, [pc, #160]	; b5cc <CGPIOPin::SetAlternateFunction(unsigned int)+0xbc>
    b528:	e3560005 	cmp	r6, #5
    b52c:	e0831293 	umull	r1, r3, r3, r2
    b530:	e1a031a3 	lsr	r3, r3, #3
    b534:	e2835302 	add	r5, r3, #134217728	; 0x8000000
    b538:	e0833103 	add	r3, r3, r3, lsl #2
    b53c:	e2855702 	add	r5, r5, #524288	; 0x80000
    b540:	e0423083 	sub	r3, r2, r3, lsl #1
    b544:	e1a05105 	lsl	r5, r5, #2
    b548:	e0834083 	add	r4, r3, r3, lsl #1
    b54c:	8a000012 	bhi	b59c <CGPIOPin::SetAlternateFunction(unsigned int)+0x8c>
    b550:	e59f7078 	ldr	r7, [pc, #120]	; b5d0 <CGPIOPin::SetAlternateFunction(unsigned int)+0xc0>
    b554:	e5970000 	ldr	r0, [r7]
    b558:	e3500000 	cmp	r0, #0
    b55c:	1a00000c 	bne	b594 <CGPIOPin::SetAlternateFunction(unsigned int)+0x84>
    b560:	e3a01007 	mov	r1, #7
    b564:	e59f3068 	ldr	r3, [pc, #104]	; b5d4 <CGPIOPin::SetAlternateFunction(unsigned int)+0xc4>
    b568:	e5952000 	ldr	r2, [r5]
    b56c:	e0836106 	add	r6, r3, r6, lsl #2
    b570:	e5963010 	ldr	r3, [r6, #16]
    b574:	e1c22411 	bic	r2, r2, r1, lsl r4
    b578:	e1824413 	orr	r4, r2, r3, lsl r4
    b57c:	e5854000 	str	r4, [r5]
    b580:	e5973000 	ldr	r3, [r7]
    b584:	e3530000 	cmp	r3, #0
    b588:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    b58c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    b590:	ea001a04 	b	11da8 <LeaveCritical>
    b594:	eb0019d6 	bl	11cf4 <EnterCritical>
    b598:	eafffff0 	b	b560 <CGPIOPin::SetAlternateFunction(unsigned int)+0x50>
    b59c:	e3a02f53 	mov	r2, #332	; 0x14c
    b5a0:	e59f1030 	ldr	r1, [pc, #48]	; b5d8 <CGPIOPin::SetAlternateFunction(unsigned int)+0xc8>
    b5a4:	e59f0030 	ldr	r0, [pc, #48]	; b5dc <CGPIOPin::SetAlternateFunction(unsigned int)+0xcc>
    b5a8:	eb001bb9 	bl	12494 <assertion_failed>
    b5ac:	eaffffe7 	b	b550 <CGPIOPin::SetAlternateFunction(unsigned int)+0x40>
    b5b0:	e1a04000 	mov	r4, r0
    b5b4:	e3a02f52 	mov	r2, #328	; 0x148
    b5b8:	e59f1018 	ldr	r1, [pc, #24]	; b5d8 <CGPIOPin::SetAlternateFunction(unsigned int)+0xc8>
    b5bc:	e59f001c 	ldr	r0, [pc, #28]	; b5e0 <CGPIOPin::SetAlternateFunction(unsigned int)+0xd0>
    b5c0:	eb001bb3 	bl	12494 <assertion_failed>
    b5c4:	e5942004 	ldr	r2, [r4, #4]
    b5c8:	eaffffd5 	b	b524 <CGPIOPin::SetAlternateFunction(unsigned int)+0x14>
    b5cc:	cccccccd 	.word	0xcccccccd
    b5d0:	00015a9c 	.word	0x00015a9c
    b5d4:	00013b58 	.word	0x00013b58
    b5d8:	00013b80 	.word	0x00013b80
    b5dc:	00013d9c 	.word	0x00013d9c
    b5e0:	00013ba0 	.word	0x00013ba0

0000b5e4 <CGPIOPin::SetMode(TGPIOMode, bool)>:
    b5e4:	e3510009 	cmp	r1, #9
    b5e8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b5ec:	e1a05001 	mov	r5, r1
    b5f0:	e1a04000 	mov	r4, r0
    b5f4:	e1a06002 	mov	r6, r2
    b5f8:	ca00003f 	bgt	b6fc <CGPIOPin::SetMode(TGPIOMode, bool)+0x118>
    b5fc:	e5c45010 	strb	r5, [r4, #16]
    b600:	e3a02000 	mov	r2, #0
    b604:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
    b608:	e5d43010 	ldrb	r3, [r4, #16]
    b60c:	e2431004 	sub	r1, r3, #4
    b610:	e6ef0071 	uxtb	r0, r1
    b614:	e3500005 	cmp	r0, #5
    b618:	9a000030 	bls	b6e0 <CGPIOPin::SetMode(TGPIOMode, bool)+0xfc>
    b61c:	e3530001 	cmp	r3, #1
    b620:	13a03000 	movne	r3, #0
    b624:	02063001 	andeq	r3, r6, #1
    b628:	e3530000 	cmp	r3, #0
    b62c:	1a000055 	bne	b788 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1a4>
    b630:	e5943004 	ldr	r3, [r4, #4]
    b634:	e3530035 	cmp	r3, #53	; 0x35
    b638:	8a00003a 	bhi	b728 <CGPIOPin::SetMode(TGPIOMode, bool)+0x144>
    b63c:	e59f5154 	ldr	r5, [pc, #340]	; b798 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1b4>
    b640:	e59f8154 	ldr	r8, [pc, #340]	; b79c <CGPIOPin::SetMode(TGPIOMode, bool)+0x1b8>
    b644:	e0852395 	umull	r2, r5, r5, r3
    b648:	e5980000 	ldr	r0, [r8]
    b64c:	e1a051a5 	lsr	r5, r5, #3
    b650:	e2857302 	add	r7, r5, #134217728	; 0x8000000
    b654:	e0855105 	add	r5, r5, r5, lsl #2
    b658:	e2877702 	add	r7, r7, #524288	; 0x80000
    b65c:	e0435085 	sub	r5, r3, r5, lsl #1
    b660:	e3500000 	cmp	r0, #0
    b664:	e1a07107 	lsl	r7, r7, #2
    b668:	e0855085 	add	r5, r5, r5, lsl #1
    b66c:	1a000033 	bne	b740 <CGPIOPin::SetMode(TGPIOMode, bool)+0x15c>
    b670:	e5d42010 	ldrb	r2, [r4, #16]
    b674:	e3a01007 	mov	r1, #7
    b678:	e2422001 	sub	r2, r2, #1
    b67c:	e16f2f12 	clz	r2, r2
    b680:	e5973000 	ldr	r3, [r7]
    b684:	e1a022a2 	lsr	r2, r2, #5
    b688:	e1c33511 	bic	r3, r3, r1, lsl r5
    b68c:	e1835512 	orr	r5, r3, r2, lsl r5
    b690:	e5875000 	str	r5, [r7]
    b694:	e5983000 	ldr	r3, [r8]
    b698:	e3530000 	cmp	r3, #0
    b69c:	1a000029 	bne	b748 <CGPIOPin::SetMode(TGPIOMode, bool)+0x164>
    b6a0:	e3560000 	cmp	r6, #0
    b6a4:	0a00000a 	beq	b6d4 <CGPIOPin::SetMode(TGPIOMode, bool)+0xf0>
    b6a8:	e5d43010 	ldrb	r3, [r4, #16]
    b6ac:	e3530003 	cmp	r3, #3
    b6b0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    b6b4:	ea000006 	b	b6d4 <CGPIOPin::SetMode(TGPIOMode, bool)+0xf0>
    b6b8:	0000b778 	.word	0x0000b778
    b6bc:	0000b768 	.word	0x0000b768
    b6c0:	0000b758 	.word	0x0000b758
    b6c4:	0000b6c8 	.word	0x0000b6c8
    b6c8:	e1a00004 	mov	r0, r4
    b6cc:	e3a01001 	mov	r1, #1
    b6d0:	ebffff66 	bl	b470 <CGPIOPin::SetPullUpMode(unsigned int)>
    b6d4:	e3a03000 	mov	r3, #0
    b6d8:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    b6dc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    b6e0:	e1560002 	cmp	r6, r2
    b6e4:	1a000009 	bne	b710 <CGPIOPin::SetMode(TGPIOMode, bool)+0x12c>
    b6e8:	e1a00004 	mov	r0, r4
    b6ec:	ebffff87 	bl	b510 <CGPIOPin::SetAlternateFunction(unsigned int)>
    b6f0:	e3a03000 	mov	r3, #0
    b6f4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    b6f8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    b6fc:	e3a0204f 	mov	r2, #79	; 0x4f
    b700:	e59f1098 	ldr	r1, [pc, #152]	; b7a0 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1bc>
    b704:	e59f0098 	ldr	r0, [pc, #152]	; b7a4 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1c0>
    b708:	eb001b61 	bl	12494 <assertion_failed>
    b70c:	eaffffba 	b	b5fc <CGPIOPin::SetMode(TGPIOMode, bool)+0x18>
    b710:	e1a01002 	mov	r1, r2
    b714:	e1a00004 	mov	r0, r4
    b718:	ebffff54 	bl	b470 <CGPIOPin::SetPullUpMode(unsigned int)>
    b71c:	e5d43010 	ldrb	r3, [r4, #16]
    b720:	e2431004 	sub	r1, r3, #4
    b724:	eaffffef 	b	b6e8 <CGPIOPin::SetMode(TGPIOMode, bool)+0x104>
    b728:	e3a02068 	mov	r2, #104	; 0x68
    b72c:	e59f106c 	ldr	r1, [pc, #108]	; b7a0 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1bc>
    b730:	e59f0070 	ldr	r0, [pc, #112]	; b7a8 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1c4>
    b734:	eb001b56 	bl	12494 <assertion_failed>
    b738:	e5943004 	ldr	r3, [r4, #4]
    b73c:	eaffffbe 	b	b63c <CGPIOPin::SetMode(TGPIOMode, bool)+0x58>
    b740:	eb00196b 	bl	11cf4 <EnterCritical>
    b744:	eaffffc9 	b	b670 <CGPIOPin::SetMode(TGPIOMode, bool)+0x8c>
    b748:	eb001996 	bl	11da8 <LeaveCritical>
    b74c:	e3560000 	cmp	r6, #0
    b750:	0affffdf 	beq	b6d4 <CGPIOPin::SetMode(TGPIOMode, bool)+0xf0>
    b754:	eaffffd3 	b	b6a8 <CGPIOPin::SetMode(TGPIOMode, bool)+0xc4>
    b758:	e1a00004 	mov	r0, r4
    b75c:	e3a01002 	mov	r1, #2
    b760:	ebffff42 	bl	b470 <CGPIOPin::SetPullUpMode(unsigned int)>
    b764:	eaffffda 	b	b6d4 <CGPIOPin::SetMode(TGPIOMode, bool)+0xf0>
    b768:	e1a00004 	mov	r0, r4
    b76c:	e3a01000 	mov	r1, #0
    b770:	ebfffd6b 	bl	ad24 <CGPIOPin::Write(unsigned int)>
    b774:	eaffffd6 	b	b6d4 <CGPIOPin::SetMode(TGPIOMode, bool)+0xf0>
    b778:	e1a00004 	mov	r0, r4
    b77c:	e3a01000 	mov	r1, #0
    b780:	ebffff3a 	bl	b470 <CGPIOPin::SetPullUpMode(unsigned int)>
    b784:	eaffffd2 	b	b6d4 <CGPIOPin::SetMode(TGPIOMode, bool)+0xf0>
    b788:	e1a01002 	mov	r1, r2
    b78c:	e1a00004 	mov	r0, r4
    b790:	ebffff36 	bl	b470 <CGPIOPin::SetPullUpMode(unsigned int)>
    b794:	eaffffa5 	b	b630 <CGPIOPin::SetMode(TGPIOMode, bool)+0x4c>
    b798:	cccccccd 	.word	0xcccccccd
    b79c:	00015a9c 	.word	0x00015a9c
    b7a0:	00013b80 	.word	0x00013b80
    b7a4:	00013dac 	.word	0x00013dac
    b7a8:	00013ba0 	.word	0x00013ba0

0000b7ac <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>:
    b7ac:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b7b0:	e3a0c006 	mov	ip, #6
    b7b4:	e3a0e000 	mov	lr, #0
    b7b8:	e3a07036 	mov	r7, #54	; 0x36
    b7bc:	e3a0600a 	mov	r6, #10
    b7c0:	e1a04000 	mov	r4, r0
    b7c4:	e1a05002 	mov	r5, r2
    b7c8:	e5803018 	str	r3, [r0, #24]
    b7cc:	e59f302c 	ldr	r3, [pc, #44]	; b800 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x54>
    b7d0:	e580e01c 	str	lr, [r0, #28]
    b7d4:	e8800088 	stm	r0, {r3, r7}
    b7d8:	e5c0c024 	strb	ip, [r0, #36]	; 0x24
    b7dc:	e5c0c025 	strb	ip, [r0, #37]	; 0x25
    b7e0:	e5c06010 	strb	r6, [r0, #16]
    b7e4:	ebfffd29 	bl	ac90 <CGPIOPin::AssignPin(unsigned int)>
    b7e8:	e1a00004 	mov	r0, r4
    b7ec:	e1a01005 	mov	r1, r5
    b7f0:	e3a02001 	mov	r2, #1
    b7f4:	ebffff7a 	bl	b5e4 <CGPIOPin::SetMode(TGPIOMode, bool)>
    b7f8:	e1a00004 	mov	r0, r4
    b7fc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    b800:	00013b60 	.word	0x00013b60

0000b804 <CGPIOPin::InterruptHandler()>:
    b804:	e5d03010 	ldrb	r3, [r0, #16]
    b808:	e92d4010 	push	{r4, lr}
    b80c:	e2432002 	sub	r2, r3, #2
    b810:	e3530000 	cmp	r3, #0
    b814:	13520001 	cmpne	r2, #1
    b818:	e1a04000 	mov	r4, r0
    b81c:	9a000003 	bls	b830 <CGPIOPin::InterruptHandler()+0x2c>
    b820:	e59f2074 	ldr	r2, [pc, #116]	; b89c <CGPIOPin::InterruptHandler()+0x98>
    b824:	e59f1074 	ldr	r1, [pc, #116]	; b8a0 <CGPIOPin::InterruptHandler()+0x9c>
    b828:	e59f0074 	ldr	r0, [pc, #116]	; b8a4 <CGPIOPin::InterruptHandler()+0xa0>
    b82c:	eb001b18 	bl	12494 <assertion_failed>
    b830:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    b834:	e3530005 	cmp	r3, #5
    b838:	da000002 	ble	b848 <CGPIOPin::InterruptHandler()+0x44>
    b83c:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    b840:	e3530005 	cmp	r3, #5
    b844:	ca000005 	bgt	b860 <CGPIOPin::InterruptHandler()+0x5c>
    b848:	e594301c 	ldr	r3, [r4, #28]
    b84c:	e3530000 	cmp	r3, #0
    b850:	0a000009 	beq	b87c <CGPIOPin::InterruptHandler()+0x78>
    b854:	e5940020 	ldr	r0, [r4, #32]
    b858:	e8bd4010 	pop	{r4, lr}
    b85c:	e12fff13 	bx	r3
    b860:	e59f2040 	ldr	r2, [pc, #64]	; b8a8 <CGPIOPin::InterruptHandler()+0xa4>
    b864:	e59f1034 	ldr	r1, [pc, #52]	; b8a0 <CGPIOPin::InterruptHandler()+0x9c>
    b868:	e59f003c 	ldr	r0, [pc, #60]	; b8ac <CGPIOPin::InterruptHandler()+0xa8>
    b86c:	eb001b08 	bl	12494 <assertion_failed>
    b870:	e594301c 	ldr	r3, [r4, #28]
    b874:	e3530000 	cmp	r3, #0
    b878:	1afffff5 	bne	b854 <CGPIOPin::InterruptHandler()+0x50>
    b87c:	e59f002c 	ldr	r0, [pc, #44]	; b8b0 <CGPIOPin::InterruptHandler()+0xac>
    b880:	e59f202c 	ldr	r2, [pc, #44]	; b8b4 <CGPIOPin::InterruptHandler()+0xb0>
    b884:	e59f1014 	ldr	r1, [pc, #20]	; b8a0 <CGPIOPin::InterruptHandler()+0x9c>
    b888:	eb001b01 	bl	12494 <assertion_failed>
    b88c:	e594301c 	ldr	r3, [r4, #28]
    b890:	e5940020 	ldr	r0, [r4, #32]
    b894:	e8bd4010 	pop	{r4, lr}
    b898:	e12fff13 	bx	r3
    b89c:	0000015b 	.word	0x0000015b
    b8a0:	00013b80 	.word	0x00013b80
    b8a4:	00013bf8 	.word	0x00013bf8
    b8a8:	0000015d 	.word	0x0000015d
    b8ac:	00013dc4 	.word	0x00013dc4
    b8b0:	00013cdc 	.word	0x00013cdc
    b8b4:	0000015f 	.word	0x0000015f

0000b8b8 <CGPIOPin::DisableAllInterrupts(unsigned int)>:
    b8b8:	e3500035 	cmp	r0, #53	; 0x35
    b8bc:	e92d4070 	push	{r4, r5, r6, lr}
    b8c0:	e1a05000 	mov	r5, r0
    b8c4:	8a00001e 	bhi	b944 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x8c>
    b8c8:	e3a02001 	mov	r2, #1
    b8cc:	e59f6084 	ldr	r6, [pc, #132]	; b958 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xa0>
    b8d0:	e59f4084 	ldr	r4, [pc, #132]	; b95c <CGPIOPin::DisableAllInterrupts(unsigned int)+0xa4>
    b8d4:	e5960000 	ldr	r0, [r6]
    b8d8:	e08442a5 	add	r4, r4, r5, lsr #5
    b8dc:	e3500000 	cmp	r0, #0
    b8e0:	e205501f 	and	r5, r5, #31
    b8e4:	e1a04104 	lsl	r4, r4, #2
    b8e8:	e1a05512 	lsl	r5, r2, r5
    b8ec:	1a00000f 	bne	b930 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x78>
    b8f0:	e59f3068 	ldr	r3, [pc, #104]	; b960 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xa8>
    b8f4:	e1540003 	cmp	r4, r3
    b8f8:	8a00000b 	bhi	b92c <CGPIOPin::DisableAllInterrupts(unsigned int)+0x74>
    b8fc:	e1e02005 	mvn	r2, r5
    b900:	e59f1058 	ldr	r1, [pc, #88]	; b960 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xa8>
    b904:	e5943000 	ldr	r3, [r4]
    b908:	e0033002 	and	r3, r3, r2
    b90c:	e484300c 	str	r3, [r4], #12
    b910:	e1540001 	cmp	r4, r1
    b914:	9afffffa 	bls	b904 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x4c>
    b918:	e5963000 	ldr	r3, [r6]
    b91c:	e3530000 	cmp	r3, #0
    b920:	08bd8070 	popeq	{r4, r5, r6, pc}
    b924:	e8bd4070 	pop	{r4, r5, r6, lr}
    b928:	ea00191e 	b	11da8 <LeaveCritical>
    b92c:	e8bd8070 	pop	{r4, r5, r6, pc}
    b930:	eb0018ef 	bl	11cf4 <EnterCritical>
    b934:	e59f3024 	ldr	r3, [pc, #36]	; b960 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xa8>
    b938:	e1540003 	cmp	r4, r3
    b93c:	9affffee 	bls	b8fc <CGPIOPin::DisableAllInterrupts(unsigned int)+0x44>
    b940:	eafffff4 	b	b918 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x60>
    b944:	e59f2018 	ldr	r2, [pc, #24]	; b964 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xac>
    b948:	e59f1018 	ldr	r1, [pc, #24]	; b968 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xb0>
    b94c:	e59f0018 	ldr	r0, [pc, #24]	; b96c <CGPIOPin::DisableAllInterrupts(unsigned int)+0xb4>
    b950:	eb001acf 	bl	12494 <assertion_failed>
    b954:	eaffffdb 	b	b8c8 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x10>
    b958:	00015a9c 	.word	0x00015a9c
    b95c:	08080013 	.word	0x08080013
    b960:	2020008b 	.word	0x2020008b
    b964:	00000165 	.word	0x00000165
    b968:	00013b80 	.word	0x00013b80
    b96c:	00013e10 	.word	0x00013e10

0000b970 <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE>:
    b970:	e3a02001 	mov	r2, #1
    b974:	e59f3004 	ldr	r3, [pc, #4]	; b980 <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE+0x10>
    b978:	e5832000 	str	r2, [r3]
    b97c:	e12fff1e 	bx	lr
    b980:	00015a9c 	.word	0x00015a9c

0000b984 <CInterruptSystem::CInterruptSystem()>:
    b984:	e1a0c000 	mov	ip, r0
    b988:	e2802f47 	add	r2, r0, #284	; 0x11c
    b98c:	e1a00002 	mov	r0, r2
    b990:	e3a01000 	mov	r1, #0
    b994:	e24c3004 	sub	r3, ip, #4
    b998:	e5a31004 	str	r1, [r3, #4]!
    b99c:	e1530000 	cmp	r3, r0
    b9a0:	e5a21004 	str	r1, [r2, #4]!
    b9a4:	1afffffb 	bne	b998 <CInterruptSystem::CInterruptSystem()+0x14>
    b9a8:	e59f3008 	ldr	r3, [pc, #8]	; b9b8 <CInterruptSystem::CInterruptSystem()+0x34>
    b9ac:	e1a0000c 	mov	r0, ip
    b9b0:	e583c000 	str	ip, [r3]
    b9b4:	e12fff1e 	bx	lr
    b9b8:	00015aa0 	.word	0x00015aa0

0000b9bc <CInterruptSystem::~CInterruptSystem()>:
    b9bc:	e3a02000 	mov	r2, #0
    b9c0:	e59f3004 	ldr	r3, [pc, #4]	; b9cc <CInterruptSystem::~CInterruptSystem()+0x10>
    b9c4:	e5832000 	str	r2, [r3]
    b9c8:	e12fff1e 	bx	lr
    b9cc:	00015aa0 	.word	0x00015aa0

0000b9d0 <CInterruptSystem::Initialize()>:
    b9d0:	e92d4010 	push	{r4, lr}
    b9d4:	e3a04000 	mov	r4, #0
    b9d8:	e59f2050 	ldr	r2, [pc, #80]	; ba30 <CInterruptSystem::Initialize()+0x60>
    b9dc:	e59f3050 	ldr	r3, [pc, #80]	; ba34 <CInterruptSystem::Initialize()+0x64>
    b9e0:	e1a02142 	asr	r2, r2, #2
    b9e4:	e1a03143 	asr	r3, r3, #2
    b9e8:	e2422002 	sub	r2, r2, #2
    b9ec:	e2433002 	sub	r3, r3, #2
    b9f0:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
    b9f4:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
    b9f8:	e5842018 	str	r2, [r4, #24]
    b9fc:	e584301c 	str	r3, [r4, #28]
    ba00:	eb00190d 	bl	11e3c <SyncDataAndInstructionCache>
    ba04:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
    ba08:	e3e02000 	mvn	r2, #0
    ba0c:	e59f3024 	ldr	r3, [pc, #36]	; ba38 <CInterruptSystem::Initialize()+0x68>
    ba10:	e583420c 	str	r4, [r3, #524]	; 0x20c
    ba14:	e583221c 	str	r2, [r3, #540]	; 0x21c
    ba18:	e5832220 	str	r2, [r3, #544]	; 0x220
    ba1c:	e5832224 	str	r2, [r3, #548]	; 0x224
    ba20:	ee074fba 	mcr	15, 0, r4, cr7, cr10, {5}
    ba24:	f1080080 	cpsie	i
    ba28:	e3a00001 	mov	r0, #1
    ba2c:	e8bd8010 	pop	{r4, pc}
    ba30:	000118d0 	.word	0x000118d0
    ba34:	000118dc 	.word	0x000118dc
    ba38:	2000b000 	.word	0x2000b000

0000ba3c <CInterruptSystem::DisconnectFIQ()>:
    ba3c:	e92d4010 	push	{r4, lr}
    ba40:	e59f4068 	ldr	r4, [pc, #104]	; bab0 <CInterruptSystem::DisconnectFIQ()+0x74>
    ba44:	e5d42001 	ldrb	r2, [r4, #1]
    ba48:	e5d43000 	ldrb	r3, [r4]
    ba4c:	e5d41002 	ldrb	r1, [r4, #2]
    ba50:	e1833402 	orr	r3, r3, r2, lsl #8
    ba54:	e5d42003 	ldrb	r2, [r4, #3]
    ba58:	e1833801 	orr	r3, r3, r1, lsl #16
    ba5c:	e1933c02 	orrs	r3, r3, r2, lsl #24
    ba60:	0a00000d 	beq	ba9c <CInterruptSystem::DisconnectFIQ()+0x60>
    ba64:	e3a03000 	mov	r3, #0
    ba68:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    ba6c:	e59f2040 	ldr	r2, [pc, #64]	; bab4 <CInterruptSystem::DisconnectFIQ()+0x78>
    ba70:	e582320c 	str	r3, [r2, #524]	; 0x20c
    ba74:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    ba78:	e5c43000 	strb	r3, [r4]
    ba7c:	e5c43001 	strb	r3, [r4, #1]
    ba80:	e5c43002 	strb	r3, [r4, #2]
    ba84:	e5c43003 	strb	r3, [r4, #3]
    ba88:	e5c43004 	strb	r3, [r4, #4]
    ba8c:	e5c43005 	strb	r3, [r4, #5]
    ba90:	e5c43006 	strb	r3, [r4, #6]
    ba94:	e5c43007 	strb	r3, [r4, #7]
    ba98:	e8bd8010 	pop	{r4, pc}
    ba9c:	e3a02086 	mov	r2, #134	; 0x86
    baa0:	e59f1010 	ldr	r1, [pc, #16]	; bab8 <CInterruptSystem::DisconnectFIQ()+0x7c>
    baa4:	e59f0010 	ldr	r0, [pc, #16]	; babc <CInterruptSystem::DisconnectFIQ()+0x80>
    baa8:	eb001a79 	bl	12494 <assertion_failed>
    baac:	eaffffec 	b	ba64 <CInterruptSystem::DisconnectFIQ()+0x28>
    bab0:	000159c0 	.word	0x000159c0
    bab4:	2000b000 	.word	0x2000b000
    bab8:	00013e24 	.word	0x00013e24
    babc:	00013e34 	.word	0x00013e34

0000bac0 <CInterruptSystem::EnableIRQ(unsigned int)>:
    bac0:	e92d4010 	push	{r4, lr}
    bac4:	e3a03000 	mov	r3, #0
    bac8:	e1a04000 	mov	r4, r0
    bacc:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    bad0:	e3500047 	cmp	r0, #71	; 0x47
    bad4:	8a00000d 	bhi	bb10 <CInterruptSystem::EnableIRQ(unsigned int)+0x50>
    bad8:	e350001f 	cmp	r0, #31
    badc:	8a000007 	bhi	bb00 <CInterruptSystem::EnableIRQ(unsigned int)+0x40>
    bae0:	e59f2040 	ldr	r2, [pc, #64]	; bb28 <CInterruptSystem::EnableIRQ(unsigned int)+0x68>
    bae4:	e3a03001 	mov	r3, #1
    bae8:	e204401f 	and	r4, r4, #31
    baec:	e1a04413 	lsl	r4, r3, r4
    baf0:	e5824000 	str	r4, [r2]
    baf4:	e3a03000 	mov	r3, #0
    baf8:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    bafc:	e8bd8010 	pop	{r4, pc}
    bb00:	e350003f 	cmp	r0, #63	; 0x3f
    bb04:	959f2020 	ldrls	r2, [pc, #32]	; bb2c <CInterruptSystem::EnableIRQ(unsigned int)+0x6c>
    bb08:	859f2020 	ldrhi	r2, [pc, #32]	; bb30 <CInterruptSystem::EnableIRQ(unsigned int)+0x70>
    bb0c:	eafffff4 	b	bae4 <CInterruptSystem::EnableIRQ(unsigned int)+0x24>
    bb10:	e3a02092 	mov	r2, #146	; 0x92
    bb14:	e59f1018 	ldr	r1, [pc, #24]	; bb34 <CInterruptSystem::EnableIRQ(unsigned int)+0x74>
    bb18:	e59f0018 	ldr	r0, [pc, #24]	; bb38 <CInterruptSystem::EnableIRQ(unsigned int)+0x78>
    bb1c:	eb001a5c 	bl	12494 <assertion_failed>
    bb20:	e59f2008 	ldr	r2, [pc, #8]	; bb30 <CInterruptSystem::EnableIRQ(unsigned int)+0x70>
    bb24:	eaffffee 	b	bae4 <CInterruptSystem::EnableIRQ(unsigned int)+0x24>
    bb28:	2000b210 	.word	0x2000b210
    bb2c:	2000b214 	.word	0x2000b214
    bb30:	2000b218 	.word	0x2000b218
    bb34:	00013e24 	.word	0x00013e24
    bb38:	00013e4c 	.word	0x00013e4c

0000bb3c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>:
    bb3c:	e3510047 	cmp	r1, #71	; 0x47
    bb40:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    bb44:	e1a04001 	mov	r4, r1
    bb48:	e1a05000 	mov	r5, r0
    bb4c:	e1a08002 	mov	r8, r2
    bb50:	e1a07003 	mov	r7, r3
    bb54:	8a00000c 	bhi	bb8c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x50>
    bb58:	e7953104 	ldr	r3, [r5, r4, lsl #2]
    bb5c:	e0856104 	add	r6, r5, r4, lsl #2
    bb60:	e3530000 	cmp	r3, #0
    bb64:	0a000003 	beq	bb78 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x3c>
    bb68:	e3a02062 	mov	r2, #98	; 0x62
    bb6c:	e59f102c 	ldr	r1, [pc, #44]	; bba0 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x64>
    bb70:	e59f002c 	ldr	r0, [pc, #44]	; bba4 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x68>
    bb74:	eb001a46 	bl	12494 <assertion_failed>
    bb78:	e7858104 	str	r8, [r5, r4, lsl #2]
    bb7c:	e1a00004 	mov	r0, r4
    bb80:	e5867120 	str	r7, [r6, #288]	; 0x120
    bb84:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    bb88:	eaffffcc 	b	bac0 <CInterruptSystem::EnableIRQ(unsigned int)>
    bb8c:	e3a02061 	mov	r2, #97	; 0x61
    bb90:	e59f1008 	ldr	r1, [pc, #8]	; bba0 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x64>
    bb94:	e59f000c 	ldr	r0, [pc, #12]	; bba8 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x6c>
    bb98:	eb001a3d 	bl	12494 <assertion_failed>
    bb9c:	eaffffed 	b	bb58 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x1c>
    bba0:	00013e24 	.word	0x00013e24
    bba4:	00013e60 	.word	0x00013e60
    bba8:	00013e4c 	.word	0x00013e4c

0000bbac <CInterruptSystem::DisableIRQ(unsigned int)>:
    bbac:	e92d4010 	push	{r4, lr}
    bbb0:	e3a03000 	mov	r3, #0
    bbb4:	e1a04000 	mov	r4, r0
    bbb8:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    bbbc:	e3500047 	cmp	r0, #71	; 0x47
    bbc0:	8a00000d 	bhi	bbfc <CInterruptSystem::DisableIRQ(unsigned int)+0x50>
    bbc4:	e350001f 	cmp	r0, #31
    bbc8:	8a000007 	bhi	bbec <CInterruptSystem::DisableIRQ(unsigned int)+0x40>
    bbcc:	e59f2040 	ldr	r2, [pc, #64]	; bc14 <CInterruptSystem::DisableIRQ(unsigned int)+0x68>
    bbd0:	e3a03001 	mov	r3, #1
    bbd4:	e204401f 	and	r4, r4, #31
    bbd8:	e1a04413 	lsl	r4, r3, r4
    bbdc:	e5824000 	str	r4, [r2]
    bbe0:	e3a03000 	mov	r3, #0
    bbe4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    bbe8:	e8bd8010 	pop	{r4, pc}
    bbec:	e350003f 	cmp	r0, #63	; 0x3f
    bbf0:	959f2020 	ldrls	r2, [pc, #32]	; bc18 <CInterruptSystem::DisableIRQ(unsigned int)+0x6c>
    bbf4:	859f2020 	ldrhi	r2, [pc, #32]	; bc1c <CInterruptSystem::DisableIRQ(unsigned int)+0x70>
    bbf8:	eafffff4 	b	bbd0 <CInterruptSystem::DisableIRQ(unsigned int)+0x24>
    bbfc:	e3a0209d 	mov	r2, #157	; 0x9d
    bc00:	e59f1018 	ldr	r1, [pc, #24]	; bc20 <CInterruptSystem::DisableIRQ(unsigned int)+0x74>
    bc04:	e59f0018 	ldr	r0, [pc, #24]	; bc24 <CInterruptSystem::DisableIRQ(unsigned int)+0x78>
    bc08:	eb001a21 	bl	12494 <assertion_failed>
    bc0c:	e59f2008 	ldr	r2, [pc, #8]	; bc1c <CInterruptSystem::DisableIRQ(unsigned int)+0x70>
    bc10:	eaffffee 	b	bbd0 <CInterruptSystem::DisableIRQ(unsigned int)+0x24>
    bc14:	2000b21c 	.word	0x2000b21c
    bc18:	2000b220 	.word	0x2000b220
    bc1c:	2000b224 	.word	0x2000b224
    bc20:	00013e24 	.word	0x00013e24
    bc24:	00013e4c 	.word	0x00013e4c

0000bc28 <CInterruptSystem::DisconnectIRQ(unsigned int)>:
    bc28:	e3510047 	cmp	r1, #71	; 0x47
    bc2c:	e92d4070 	push	{r4, r5, r6, lr}
    bc30:	e1a04001 	mov	r4, r1
    bc34:	e1a05000 	mov	r5, r0
    bc38:	8a000009 	bhi	bc64 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x3c>
    bc3c:	e7953104 	ldr	r3, [r5, r4, lsl #2]
    bc40:	e0856104 	add	r6, r5, r4, lsl #2
    bc44:	e3530000 	cmp	r3, #0
    bc48:	0a00000d 	beq	bc84 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x5c>
    bc4c:	e1a00004 	mov	r0, r4
    bc50:	ebffffd5 	bl	bbac <CInterruptSystem::DisableIRQ(unsigned int)>
    bc54:	e3a03000 	mov	r3, #0
    bc58:	e7853104 	str	r3, [r5, r4, lsl #2]
    bc5c:	e5863120 	str	r3, [r6, #288]	; 0x120
    bc60:	e8bd8070 	pop	{r4, r5, r6, pc}
    bc64:	e3a0206c 	mov	r2, #108	; 0x6c
    bc68:	e59f1028 	ldr	r1, [pc, #40]	; bc98 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x70>
    bc6c:	e59f0028 	ldr	r0, [pc, #40]	; bc9c <CInterruptSystem::DisconnectIRQ(unsigned int)+0x74>
    bc70:	eb001a07 	bl	12494 <assertion_failed>
    bc74:	e7953104 	ldr	r3, [r5, r4, lsl #2]
    bc78:	e0856104 	add	r6, r5, r4, lsl #2
    bc7c:	e3530000 	cmp	r3, #0
    bc80:	1afffff1 	bne	bc4c <CInterruptSystem::DisconnectIRQ(unsigned int)+0x24>
    bc84:	e3a0206d 	mov	r2, #109	; 0x6d
    bc88:	e59f1008 	ldr	r1, [pc, #8]	; bc98 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x70>
    bc8c:	e59f000c 	ldr	r0, [pc, #12]	; bca0 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x78>
    bc90:	eb0019ff 	bl	12494 <assertion_failed>
    bc94:	eaffffec 	b	bc4c <CInterruptSystem::DisconnectIRQ(unsigned int)+0x24>
    bc98:	00013e24 	.word	0x00013e24
    bc9c:	00013e4c 	.word	0x00013e4c
    bca0:	00013e7c 	.word	0x00013e7c

0000bca4 <CInterruptSystem::EnableFIQ(unsigned int)>:
    bca4:	e92d4010 	push	{r4, lr}
    bca8:	e3a03000 	mov	r3, #0
    bcac:	e1a04000 	mov	r4, r0
    bcb0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    bcb4:	e3500047 	cmp	r0, #71	; 0x47
    bcb8:	9a000003 	bls	bccc <CInterruptSystem::EnableFIQ(unsigned int)+0x28>
    bcbc:	e3a020a8 	mov	r2, #168	; 0xa8
    bcc0:	e59f101c 	ldr	r1, [pc, #28]	; bce4 <CInterruptSystem::EnableFIQ(unsigned int)+0x40>
    bcc4:	e59f001c 	ldr	r0, [pc, #28]	; bce8 <CInterruptSystem::EnableFIQ(unsigned int)+0x44>
    bcc8:	eb0019f1 	bl	12494 <assertion_failed>
    bccc:	e59f3018 	ldr	r3, [pc, #24]	; bcec <CInterruptSystem::EnableFIQ(unsigned int)+0x48>
    bcd0:	e3844080 	orr	r4, r4, #128	; 0x80
    bcd4:	e583420c 	str	r4, [r3, #524]	; 0x20c
    bcd8:	e3a03000 	mov	r3, #0
    bcdc:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    bce0:	e8bd8010 	pop	{r4, pc}
    bce4:	00013e24 	.word	0x00013e24
    bce8:	00013e98 	.word	0x00013e98
    bcec:	2000b000 	.word	0x2000b000

0000bcf0 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>:
    bcf0:	e3510047 	cmp	r1, #71	; 0x47
    bcf4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    bcf8:	e1a07001 	mov	r7, r1
    bcfc:	e1a06002 	mov	r6, r2
    bd00:	e1a05003 	mov	r5, r3
    bd04:	8a00001f 	bhi	bd88 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x98>
    bd08:	e3560000 	cmp	r6, #0
    bd0c:	0a000022 	beq	bd9c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xac>
    bd10:	e59f4098 	ldr	r4, [pc, #152]	; bdb0 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc0>
    bd14:	e5d42001 	ldrb	r2, [r4, #1]
    bd18:	e5d43000 	ldrb	r3, [r4]
    bd1c:	e5d41002 	ldrb	r1, [r4, #2]
    bd20:	e1833402 	orr	r3, r3, r2, lsl #8
    bd24:	e5d42003 	ldrb	r2, [r4, #3]
    bd28:	e1833801 	orr	r3, r3, r1, lsl #16
    bd2c:	e1933c02 	orrs	r3, r3, r2, lsl #24
    bd30:	0a000003 	beq	bd44 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x54>
    bd34:	e3a0207c 	mov	r2, #124	; 0x7c
    bd38:	e59f1074 	ldr	r1, [pc, #116]	; bdb4 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc4>
    bd3c:	e59f0074 	ldr	r0, [pc, #116]	; bdb8 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc8>
    bd40:	eb0019d3 	bl	12494 <assertion_failed>
    bd44:	e1a0e426 	lsr	lr, r6, #8
    bd48:	e1a0c826 	lsr	ip, r6, #16
    bd4c:	e1a01c26 	lsr	r1, r6, #24
    bd50:	e1a02425 	lsr	r2, r5, #8
    bd54:	e1a03825 	lsr	r3, r5, #16
    bd58:	e5c45004 	strb	r5, [r4, #4]
    bd5c:	e1a05c25 	lsr	r5, r5, #24
    bd60:	e1a00007 	mov	r0, r7
    bd64:	e5c46000 	strb	r6, [r4]
    bd68:	e5c4e001 	strb	lr, [r4, #1]
    bd6c:	e5c4c002 	strb	ip, [r4, #2]
    bd70:	e5c41003 	strb	r1, [r4, #3]
    bd74:	e5c42005 	strb	r2, [r4, #5]
    bd78:	e5c43006 	strb	r3, [r4, #6]
    bd7c:	e5c45007 	strb	r5, [r4, #7]
    bd80:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    bd84:	eaffffc6 	b	bca4 <CInterruptSystem::EnableFIQ(unsigned int)>
    bd88:	e3a0207a 	mov	r2, #122	; 0x7a
    bd8c:	e59f1020 	ldr	r1, [pc, #32]	; bdb4 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc4>
    bd90:	e59f0024 	ldr	r0, [pc, #36]	; bdbc <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xcc>
    bd94:	eb0019be 	bl	12494 <assertion_failed>
    bd98:	eaffffda 	b	bd08 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x18>
    bd9c:	e3a0207b 	mov	r2, #123	; 0x7b
    bda0:	e59f100c 	ldr	r1, [pc, #12]	; bdb4 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc4>
    bda4:	e59f0014 	ldr	r0, [pc, #20]	; bdc0 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xd0>
    bda8:	eb0019b9 	bl	12494 <assertion_failed>
    bdac:	eaffffd7 	b	bd10 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x20>
    bdb0:	000159c0 	.word	0x000159c0
    bdb4:	00013e24 	.word	0x00013e24
    bdb8:	00013eac 	.word	0x00013eac
    bdbc:	00013e98 	.word	0x00013e98
    bdc0:	00013e3c 	.word	0x00013e3c

0000bdc4 <CInterruptSystem::DisableFIQ()>:
    bdc4:	e3a03000 	mov	r3, #0
    bdc8:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    bdcc:	e59f2008 	ldr	r2, [pc, #8]	; bddc <CInterruptSystem::DisableFIQ()+0x18>
    bdd0:	e582320c 	str	r3, [r2, #524]	; 0x20c
    bdd4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    bdd8:	e12fff1e 	bx	lr
    bddc:	2000b000 	.word	0x2000b000

0000bde0 <CInterruptSystem::Get()>:
    bde0:	e92d4010 	push	{r4, lr}
    bde4:	e59f4020 	ldr	r4, [pc, #32]	; be0c <CInterruptSystem::Get()+0x2c>
    bde8:	e5940000 	ldr	r0, [r4]
    bdec:	e3500000 	cmp	r0, #0
    bdf0:	18bd8010 	popne	{r4, pc}
    bdf4:	e3a020ba 	mov	r2, #186	; 0xba
    bdf8:	e59f1010 	ldr	r1, [pc, #16]	; be10 <CInterruptSystem::Get()+0x30>
    bdfc:	e59f0010 	ldr	r0, [pc, #16]	; be14 <CInterruptSystem::Get()+0x34>
    be00:	eb0019a3 	bl	12494 <assertion_failed>
    be04:	e5940000 	ldr	r0, [r4]
    be08:	e8bd8010 	pop	{r4, pc}
    be0c:	00015aa0 	.word	0x00015aa0
    be10:	00013e24 	.word	0x00013e24
    be14:	00013ec4 	.word	0x00013ec4

0000be18 <CInterruptSystem::CallIRQHandler(unsigned int)>:
    be18:	e3510047 	cmp	r1, #71	; 0x47
    be1c:	e92d4070 	push	{r4, r5, r6, lr}
    be20:	e1a06001 	mov	r6, r1
    be24:	e1a05000 	mov	r5, r0
    be28:	8a000007 	bhi	be4c <CInterruptSystem::CallIRQHandler(unsigned int)+0x34>
    be2c:	e7954106 	ldr	r4, [r5, r6, lsl #2]
    be30:	e0855106 	add	r5, r5, r6, lsl #2
    be34:	e3540000 	cmp	r4, #0
    be38:	0a00000b 	beq	be6c <CInterruptSystem::CallIRQHandler(unsigned int)+0x54>
    be3c:	e5950120 	ldr	r0, [r5, #288]	; 0x120
    be40:	e12fff34 	blx	r4
    be44:	e3a00001 	mov	r0, #1
    be48:	e8bd8070 	pop	{r4, r5, r6, pc}
    be4c:	e3a020c0 	mov	r2, #192	; 0xc0
    be50:	e59f1024 	ldr	r1, [pc, #36]	; be7c <CInterruptSystem::CallIRQHandler(unsigned int)+0x64>
    be54:	e59f0024 	ldr	r0, [pc, #36]	; be80 <CInterruptSystem::CallIRQHandler(unsigned int)+0x68>
    be58:	eb00198d 	bl	12494 <assertion_failed>
    be5c:	e7954106 	ldr	r4, [r5, r6, lsl #2]
    be60:	e0855106 	add	r5, r5, r6, lsl #2
    be64:	e3540000 	cmp	r4, #0
    be68:	1afffff3 	bne	be3c <CInterruptSystem::CallIRQHandler(unsigned int)+0x24>
    be6c:	e1a00006 	mov	r0, r6
    be70:	ebffff4d 	bl	bbac <CInterruptSystem::DisableIRQ(unsigned int)>
    be74:	e1a00004 	mov	r0, r4
    be78:	e8bd8070 	pop	{r4, r5, r6, pc}
    be7c:	00013e24 	.word	0x00013e24
    be80:	00013e4c 	.word	0x00013e4c

0000be84 <CInterruptSystem::InterruptHandler()>:
    be84:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    be88:	e59f70a8 	ldr	r7, [pc, #168]	; bf38 <CInterruptSystem::InterruptHandler()+0xb4>
    be8c:	e24dd010 	sub	sp, sp, #16
    be90:	e5973000 	ldr	r3, [r7]
    be94:	e3530000 	cmp	r3, #0
    be98:	0a000021 	beq	bf24 <CInterruptSystem::InterruptHandler()+0xa0>
    be9c:	e3a06000 	mov	r6, #0
    bea0:	ee076f9a 	mcr	15, 0, r6, cr7, cr10, {4}
    bea4:	e59f3090 	ldr	r3, [pc, #144]	; bf3c <CInterruptSystem::InterruptHandler()+0xb8>
    bea8:	e5932204 	ldr	r2, [r3, #516]	; 0x204
    beac:	e58d2004 	str	r2, [sp, #4]
    beb0:	e5932208 	ldr	r2, [r3, #520]	; 0x208
    beb4:	e58d2008 	str	r2, [sp, #8]
    beb8:	e5933200 	ldr	r3, [r3, #512]	; 0x200
    bebc:	e6ef3073 	uxtb	r3, r3
    bec0:	e58d300c 	str	r3, [sp, #12]
    bec4:	ee076fba 	mcr	15, 0, r6, cr7, cr10, {5}
    bec8:	e28d8004 	add	r8, sp, #4
    becc:	e4984004 	ldr	r4, [r8], #4
    bed0:	e3540000 	cmp	r4, #0
    bed4:	0a00000d 	beq	bf10 <CInterruptSystem::InterruptHandler()+0x8c>
    bed8:	e1a05006 	mov	r5, r6
    bedc:	ea000002 	b	beec <CInterruptSystem::InterruptHandler()+0x68>
    bee0:	e1b040a4 	lsrs	r4, r4, #1
    bee4:	e2855001 	add	r5, r5, #1
    bee8:	0a000008 	beq	bf10 <CInterruptSystem::InterruptHandler()+0x8c>
    beec:	e3140001 	tst	r4, #1
    bef0:	0afffffa 	beq	bee0 <CInterruptSystem::InterruptHandler()+0x5c>
    bef4:	e1a01005 	mov	r1, r5
    bef8:	e5970000 	ldr	r0, [r7]
    befc:	ebffffc5 	bl	be18 <CInterruptSystem::CallIRQHandler(unsigned int)>
    bf00:	e3500000 	cmp	r0, #0
    bf04:	0afffff5 	beq	bee0 <CInterruptSystem::InterruptHandler()+0x5c>
    bf08:	e28dd010 	add	sp, sp, #16
    bf0c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    bf10:	e2866020 	add	r6, r6, #32
    bf14:	e3560060 	cmp	r6, #96	; 0x60
    bf18:	1affffeb 	bne	becc <CInterruptSystem::InterruptHandler()+0x48>
    bf1c:	e28dd010 	add	sp, sp, #16
    bf20:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    bf24:	e3a020d3 	mov	r2, #211	; 0xd3
    bf28:	e59f1010 	ldr	r1, [pc, #16]	; bf40 <CInterruptSystem::InterruptHandler()+0xbc>
    bf2c:	e59f0010 	ldr	r0, [pc, #16]	; bf44 <CInterruptSystem::InterruptHandler()+0xc0>
    bf30:	eb001957 	bl	12494 <assertion_failed>
    bf34:	eaffffd8 	b	be9c <CInterruptSystem::InterruptHandler()+0x18>
    bf38:	00015aa0 	.word	0x00015aa0
    bf3c:	2000b000 	.word	0x2000b000
    bf40:	00013e24 	.word	0x00013e24
    bf44:	00013ec4 	.word	0x00013ec4

0000bf48 <InterruptHandler>:
    bf48:	e92d4010 	push	{r4, lr}
    bf4c:	e3a04000 	mov	r4, #0
    bf50:	ee074fba 	mcr	15, 0, r4, cr7, cr10, {5}
    bf54:	ebffffca 	bl	be84 <CInterruptSystem::InterruptHandler()>
    bf58:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
    bf5c:	e8bd8010 	pop	{r4, pc}

0000bf60 <CKernelOptions::GetDecimal(char*) [clone .part.0]>:
    bf60:	e3a01000 	mov	r1, #0
    bf64:	ea00000a 	b	bf94 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x34>
    bf68:	e3520009 	cmp	r2, #9
    bf6c:	8a000011 	bhi	bfb8 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x58>
    bf70:	e3730001 	cmn	r3, #1
    bf74:	13a02000 	movne	r2, #0
    bf78:	03a02001 	moveq	r2, #1
    bf7c:	e1510003 	cmp	r1, r3
    bf80:	91a01002 	movls	r1, r2
    bf84:	83821001 	orrhi	r1, r2, #1
    bf88:	e3510000 	cmp	r1, #0
    bf8c:	1a000009 	bne	bfb8 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x58>
    bf90:	e1a01003 	mov	r1, r3
    bf94:	e0d0c0d1 	ldrsb	ip, [r0], #1
    bf98:	e0813101 	add	r3, r1, r1, lsl #2
    bf9c:	e24c2030 	sub	r2, ip, #48	; 0x30
    bfa0:	e35c0000 	cmp	ip, #0
    bfa4:	e0823083 	add	r3, r2, r3, lsl #1
    bfa8:	e6ef2072 	uxtb	r2, r2
    bfac:	1affffed 	bne	bf68 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x8>
    bfb0:	e1a00001 	mov	r0, r1
    bfb4:	e12fff1e 	bx	lr
    bfb8:	e3e01000 	mvn	r1, #0
    bfbc:	e1a00001 	mov	r0, r1
    bfc0:	e12fff1e 	bx	lr

0000bfc4 <CKernelOptions::~CKernelOptions()>:
    bfc4:	e3a02000 	mov	r2, #0
    bfc8:	e59f3004 	ldr	r3, [pc, #4]	; bfd4 <CKernelOptions::~CKernelOptions()+0x10>
    bfcc:	e5832000 	str	r2, [r3]
    bfd0:	e12fff1e 	bx	lr
    bfd4:	00015aa4 	.word	0x00015aa4

0000bfd8 <CKernelOptions::GetWidth() const>:
    bfd8:	e5900810 	ldr	r0, [r0, #2064]	; 0x810
    bfdc:	e12fff1e 	bx	lr

0000bfe0 <CKernelOptions::GetHeight() const>:
    bfe0:	e5900814 	ldr	r0, [r0, #2068]	; 0x814
    bfe4:	e12fff1e 	bx	lr

0000bfe8 <CKernelOptions::GetLogDevice() const>:
    bfe8:	e2800e81 	add	r0, r0, #2064	; 0x810
    bfec:	e2800008 	add	r0, r0, #8
    bff0:	e12fff1e 	bx	lr

0000bff4 <CKernelOptions::GetLogLevel() const>:
    bff4:	e590082c 	ldr	r0, [r0, #2092]	; 0x82c
    bff8:	e12fff1e 	bx	lr

0000bffc <CKernelOptions::GetKeyMap() const>:
    bffc:	e2800e83 	add	r0, r0, #2096	; 0x830
    c000:	e12fff1e 	bx	lr

0000c004 <CKernelOptions::GetUSBPowerDelay() const>:
    c004:	e5900834 	ldr	r0, [r0, #2100]	; 0x834
    c008:	e12fff1e 	bx	lr

0000c00c <CKernelOptions::GetSoundDevice() const>:
    c00c:	e2800e83 	add	r0, r0, #2096	; 0x830
    c010:	e2800008 	add	r0, r0, #8
    c014:	e12fff1e 	bx	lr

0000c018 <CKernelOptions::GetSoundOption() const>:
    c018:	e590084c 	ldr	r0, [r0, #2124]	; 0x84c
    c01c:	e12fff1e 	bx	lr

0000c020 <CKernelOptions::GetCPUSpeed() const>:
    c020:	e5d00850 	ldrb	r0, [r0, #2128]	; 0x850
    c024:	e12fff1e 	bx	lr

0000c028 <CKernelOptions::GetSoCMaxTemp() const>:
    c028:	e5900854 	ldr	r0, [r0, #2132]	; 0x854
    c02c:	e12fff1e 	bx	lr

0000c030 <CKernelOptions::Get()>:
    c030:	e59f3004 	ldr	r3, [pc, #4]	; c03c <CKernelOptions::Get()+0xc>
    c034:	e5930000 	ldr	r0, [r3]
    c038:	e12fff1e 	bx	lr
    c03c:	00015aa4 	.word	0x00015aa4

0000c040 <CKernelOptions::GetToken()>:
    c040:	e590380c 	ldr	r3, [r0, #2060]	; 0x80c
    c044:	e1d320d0 	ldrsb	r2, [r3]
    c048:	e3520000 	cmp	r2, #0
    c04c:	1a000005 	bne	c068 <CKernelOptions::GetToken()+0x28>
    c050:	ea000016 	b	c0b0 <CKernelOptions::GetToken()+0x70>
    c054:	e2833001 	add	r3, r3, #1
    c058:	e580380c 	str	r3, [r0, #2060]	; 0x80c
    c05c:	e1d320d0 	ldrsb	r2, [r3]
    c060:	e3520000 	cmp	r2, #0
    c064:	0a000011 	beq	c0b0 <CKernelOptions::GetToken()+0x70>
    c068:	e3520020 	cmp	r2, #32
    c06c:	0afffff8 	beq	c054 <CKernelOptions::GetToken()+0x14>
    c070:	e1a02003 	mov	r2, r3
    c074:	ea000000 	b	c07c <CKernelOptions::GetToken()+0x3c>
    c078:	e1a02001 	mov	r2, r1
    c07c:	e2821001 	add	r1, r2, #1
    c080:	e580180c 	str	r1, [r0, #2060]	; 0x80c
    c084:	e1d2c0d1 	ldrsb	ip, [r2, #1]
    c088:	e35c0000 	cmp	ip, #0
    c08c:	0a000008 	beq	c0b4 <CKernelOptions::GetToken()+0x74>
    c090:	e35c0020 	cmp	ip, #32
    c094:	1afffff7 	bne	c078 <CKernelOptions::GetToken()+0x38>
    c098:	e3a0c000 	mov	ip, #0
    c09c:	e2822002 	add	r2, r2, #2
    c0a0:	e580280c 	str	r2, [r0, #2060]	; 0x80c
    c0a4:	e5c1c000 	strb	ip, [r1]
    c0a8:	e1a00003 	mov	r0, r3
    c0ac:	e12fff1e 	bx	lr
    c0b0:	e3a03000 	mov	r3, #0
    c0b4:	e1a00003 	mov	r0, r3
    c0b8:	e12fff1e 	bx	lr

0000c0bc <CKernelOptions::CKernelOptions()>:
    c0bc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c0c0:	e3a02004 	mov	r2, #4
    c0c4:	e1a04000 	mov	r4, r0
    c0c8:	e3a05000 	mov	r5, #0
    c0cc:	e3a0303c 	mov	r3, #60	; 0x3c
    c0d0:	e2807e81 	add	r7, r0, #2064	; 0x810
    c0d4:	e2877008 	add	r7, r7, #8
    c0d8:	e580282c 	str	r2, [r0, #2092]	; 0x82c
    c0dc:	e5803854 	str	r3, [r0, #2132]	; 0x854
    c0e0:	e24dd014 	sub	sp, sp, #20
    c0e4:	e59f1348 	ldr	r1, [pc, #840]	; c434 <CKernelOptions::CKernelOptions()+0x378>
    c0e8:	e1a00007 	mov	r0, r7
    c0ec:	e5845810 	str	r5, [r4, #2064]	; 0x810
    c0f0:	e5845814 	str	r5, [r4, #2068]	; 0x814
    c0f4:	e5845834 	str	r5, [r4, #2100]	; 0x834
    c0f8:	e584584c 	str	r5, [r4, #2124]	; 0x84c
    c0fc:	e5c45850 	strb	r5, [r4, #2128]	; 0x850
    c100:	e2849e83 	add	r9, r4, #2096	; 0x830
    c104:	eb001434 	bl	111dc <strcpy>
    c108:	e59f1328 	ldr	r1, [pc, #808]	; c438 <CKernelOptions::CKernelOptions()+0x37c>
    c10c:	e1a00009 	mov	r0, r9
    c110:	eb001431 	bl	111dc <strcpy>
    c114:	e59f3320 	ldr	r3, [pc, #800]	; c43c <CKernelOptions::CKernelOptions()+0x380>
    c118:	e5c45838 	strb	r5, [r4, #2104]	; 0x838
    c11c:	e28d000c 	add	r0, sp, #12
    c120:	e5834000 	str	r4, [r3]
    c124:	ebfff897 	bl	a388 <CBcmPropertyTags::CBcmPropertyTags()>
    c128:	e58d5000 	str	r5, [sp]
    c12c:	e1a02004 	mov	r2, r4
    c130:	e28d000c 	add	r0, sp, #12
    c134:	e59f3304 	ldr	r3, [pc, #772]	; c440 <CKernelOptions::CKernelOptions()+0x384>
    c138:	e59f1304 	ldr	r1, [pc, #772]	; c444 <CKernelOptions::CKernelOptions()+0x388>
    c13c:	ebfff8e8 	bl	a4e4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    c140:	e1500005 	cmp	r0, r5
    c144:	0a000037 	beq	c228 <CKernelOptions::CKernelOptions()+0x16c>
    c148:	e5943008 	ldr	r3, [r4, #8]
    c14c:	e3530b02 	cmp	r3, #2048	; 0x800
    c150:	2a000034 	bcs	c228 <CKernelOptions::CKernelOptions()+0x16c>
    c154:	e0843003 	add	r3, r4, r3
    c158:	e284200c 	add	r2, r4, #12
    c15c:	e59f82e4 	ldr	r8, [pc, #740]	; c448 <CKernelOptions::CKernelOptions()+0x38c>
    c160:	e59fa2e4 	ldr	sl, [pc, #740]	; c44c <CKernelOptions::CKernelOptions()+0x390>
    c164:	e5c3500c 	strb	r5, [r3, #12]
    c168:	e584280c 	str	r2, [r4, #2060]	; 0x80c
    c16c:	e1a00004 	mov	r0, r4
    c170:	ebffffb2 	bl	c040 <CKernelOptions::GetToken()>
    c174:	e2506000 	subs	r6, r0, #0
    c178:	0a00002a 	beq	c228 <CKernelOptions::CKernelOptions()+0x16c>
    c17c:	e1d630d0 	ldrsb	r3, [r6]
    c180:	e3530000 	cmp	r3, #0
    c184:	0a000008 	beq	c1ac <CKernelOptions::CKernelOptions()+0xf0>
    c188:	e353003d 	cmp	r3, #61	; 0x3d
    c18c:	e1a05006 	mov	r5, r6
    c190:	1a000002 	bne	c1a0 <CKernelOptions::CKernelOptions()+0xe4>
    c194:	ea000028 	b	c23c <CKernelOptions::CKernelOptions()+0x180>
    c198:	e353003d 	cmp	r3, #61	; 0x3d
    c19c:	0a000026 	beq	c23c <CKernelOptions::CKernelOptions()+0x180>
    c1a0:	e1f530d1 	ldrsb	r3, [r5, #1]!
    c1a4:	e3530000 	cmp	r3, #0
    c1a8:	1afffffa 	bne	c198 <CKernelOptions::CKernelOptions()+0xdc>
    c1ac:	e1a01008 	mov	r1, r8
    c1b0:	e1a00006 	mov	r0, r6
    c1b4:	eb001394 	bl	1100c <strcmp>
    c1b8:	e3500000 	cmp	r0, #0
    c1bc:	0affffea 	beq	c16c <CKernelOptions::CKernelOptions()+0xb0>
    c1c0:	e1a0100a 	mov	r1, sl
    c1c4:	e1a00006 	mov	r0, r6
    c1c8:	eb00138f 	bl	1100c <strcmp>
    c1cc:	e3500000 	cmp	r0, #0
    c1d0:	13a0b000 	movne	fp, #0
    c1d4:	0affffe4 	beq	c16c <CKernelOptions::CKernelOptions()+0xb0>
    c1d8:	e59f1270 	ldr	r1, [pc, #624]	; c450 <CKernelOptions::CKernelOptions()+0x394>
    c1dc:	e1a00006 	mov	r0, r6
    c1e0:	eb001389 	bl	1100c <strcmp>
    c1e4:	e2505000 	subs	r5, r0, #0
    c1e8:	0a000027 	beq	c28c <CKernelOptions::CKernelOptions()+0x1d0>
    c1ec:	e59f1260 	ldr	r1, [pc, #608]	; c454 <CKernelOptions::CKernelOptions()+0x398>
    c1f0:	e1a00006 	mov	r0, r6
    c1f4:	eb001384 	bl	1100c <strcmp>
    c1f8:	e3500000 	cmp	r0, #0
    c1fc:	1a000028 	bne	c2a4 <CKernelOptions::CKernelOptions()+0x1e8>
    c200:	e35b0000 	cmp	fp, #0
    c204:	0affffd8 	beq	c16c <CKernelOptions::CKernelOptions()+0xb0>
    c208:	e1db30d0 	ldrsb	r3, [fp]
    c20c:	e3530000 	cmp	r3, #0
    c210:	0affffd5 	beq	c16c <CKernelOptions::CKernelOptions()+0xb0>
    c214:	e1a0000b 	mov	r0, fp
    c218:	ebffff50 	bl	bf60 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    c21c:	e3500004 	cmp	r0, #4
    c220:	9584082c 	strls	r0, [r4, #2092]	; 0x82c
    c224:	eaffffd0 	b	c16c <CKernelOptions::CKernelOptions()+0xb0>
    c228:	e28d000c 	add	r0, sp, #12
    c22c:	ebfff85b 	bl	a3a0 <CBcmPropertyTags::~CBcmPropertyTags()>
    c230:	e1a00004 	mov	r0, r4
    c234:	e28dd014 	add	sp, sp, #20
    c238:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c23c:	e3a03000 	mov	r3, #0
    c240:	e1a01008 	mov	r1, r8
    c244:	e5c53000 	strb	r3, [r5]
    c248:	e1a00006 	mov	r0, r6
    c24c:	eb00136e 	bl	1100c <strcmp>
    c250:	e3500000 	cmp	r0, #0
    c254:	e285b001 	add	fp, r5, #1
    c258:	1a000047 	bne	c37c <CKernelOptions::CKernelOptions()+0x2c0>
    c25c:	e35b0000 	cmp	fp, #0
    c260:	0affffc1 	beq	c16c <CKernelOptions::CKernelOptions()+0xb0>
    c264:	e1d530d1 	ldrsb	r3, [r5, #1]
    c268:	e3530000 	cmp	r3, #0
    c26c:	0affffbe 	beq	c16c <CKernelOptions::CKernelOptions()+0xb0>
    c270:	e1a0000b 	mov	r0, fp
    c274:	ebffff39 	bl	bf60 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    c278:	e59f31d8 	ldr	r3, [pc, #472]	; c458 <CKernelOptions::CKernelOptions()+0x39c>
    c27c:	e2402d0a 	sub	r2, r0, #640	; 0x280
    c280:	e1520003 	cmp	r2, r3
    c284:	95840810 	strls	r0, [r4, #2064]	; 0x810
    c288:	eaffffb7 	b	c16c <CKernelOptions::CKernelOptions()+0xb0>
    c28c:	e1a0100b 	mov	r1, fp
    c290:	e3a02013 	mov	r2, #19
    c294:	e1a00007 	mov	r0, r7
    c298:	eb0013da 	bl	11208 <strncpy>
    c29c:	e5c4582b 	strb	r5, [r4, #2091]	; 0x82b
    c2a0:	eaffffb1 	b	c16c <CKernelOptions::CKernelOptions()+0xb0>
    c2a4:	e59f11b0 	ldr	r1, [pc, #432]	; c45c <CKernelOptions::CKernelOptions()+0x3a0>
    c2a8:	e1a00006 	mov	r0, r6
    c2ac:	eb001356 	bl	1100c <strcmp>
    c2b0:	e2505000 	subs	r5, r0, #0
    c2b4:	1a000005 	bne	c2d0 <CKernelOptions::CKernelOptions()+0x214>
    c2b8:	e1a0100b 	mov	r1, fp
    c2bc:	e3a02002 	mov	r2, #2
    c2c0:	e1a00009 	mov	r0, r9
    c2c4:	eb0013cf 	bl	11208 <strncpy>
    c2c8:	e5c45832 	strb	r5, [r4, #2098]	; 0x832
    c2cc:	eaffffa6 	b	c16c <CKernelOptions::CKernelOptions()+0xb0>
    c2d0:	e59f1188 	ldr	r1, [pc, #392]	; c460 <CKernelOptions::CKernelOptions()+0x3a4>
    c2d4:	e1a00006 	mov	r0, r6
    c2d8:	eb00134b 	bl	1100c <strcmp>
    c2dc:	e3500000 	cmp	r0, #0
    c2e0:	1a00000b 	bne	c314 <CKernelOptions::CKernelOptions()+0x258>
    c2e4:	e35b0000 	cmp	fp, #0
    c2e8:	0affff9f 	beq	c16c <CKernelOptions::CKernelOptions()+0xb0>
    c2ec:	e1db30d0 	ldrsb	r3, [fp]
    c2f0:	e3530000 	cmp	r3, #0
    c2f4:	0affff9c 	beq	c16c <CKernelOptions::CKernelOptions()+0xb0>
    c2f8:	e1a0000b 	mov	r0, fp
    c2fc:	ebffff17 	bl	bf60 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    c300:	e59f315c 	ldr	r3, [pc, #348]	; c464 <CKernelOptions::CKernelOptions()+0x3a8>
    c304:	e24020c8 	sub	r2, r0, #200	; 0xc8
    c308:	e1520003 	cmp	r2, r3
    c30c:	95840834 	strls	r0, [r4, #2100]	; 0x834
    c310:	eaffff95 	b	c16c <CKernelOptions::CKernelOptions()+0xb0>
    c314:	e59f114c 	ldr	r1, [pc, #332]	; c468 <CKernelOptions::CKernelOptions()+0x3ac>
    c318:	e1a00006 	mov	r0, r6
    c31c:	eb00133a 	bl	1100c <strcmp>
    c320:	e2505000 	subs	r5, r0, #0
    c324:	1a000005 	bne	c340 <CKernelOptions::CKernelOptions()+0x284>
    c328:	e1a0100b 	mov	r1, fp
    c32c:	e3a02013 	mov	r2, #19
    c330:	e2890008 	add	r0, r9, #8
    c334:	eb0013b3 	bl	11208 <strncpy>
    c338:	e5c4584b 	strb	r5, [r4, #2123]	; 0x84b
    c33c:	eaffff8a 	b	c16c <CKernelOptions::CKernelOptions()+0xb0>
    c340:	e59f1124 	ldr	r1, [pc, #292]	; c46c <CKernelOptions::CKernelOptions()+0x3b0>
    c344:	e1a00006 	mov	r0, r6
    c348:	eb00132f 	bl	1100c <strcmp>
    c34c:	e3500000 	cmp	r0, #0
    c350:	1a000019 	bne	c3bc <CKernelOptions::CKernelOptions()+0x300>
    c354:	e35b0000 	cmp	fp, #0
    c358:	0affff83 	beq	c16c <CKernelOptions::CKernelOptions()+0xb0>
    c35c:	e1db30d0 	ldrsb	r3, [fp]
    c360:	e3530000 	cmp	r3, #0
    c364:	0affff80 	beq	c16c <CKernelOptions::CKernelOptions()+0xb0>
    c368:	e1a0000b 	mov	r0, fp
    c36c:	ebfffefb 	bl	bf60 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    c370:	e3500002 	cmp	r0, #2
    c374:	9584084c 	strls	r0, [r4, #2124]	; 0x84c
    c378:	eaffff7b 	b	c16c <CKernelOptions::CKernelOptions()+0xb0>
    c37c:	e1a0100a 	mov	r1, sl
    c380:	e1a00006 	mov	r0, r6
    c384:	eb001320 	bl	1100c <strcmp>
    c388:	e3500000 	cmp	r0, #0
    c38c:	1affff91 	bne	c1d8 <CKernelOptions::CKernelOptions()+0x11c>
    c390:	e35b0000 	cmp	fp, #0
    c394:	0affff74 	beq	c16c <CKernelOptions::CKernelOptions()+0xb0>
    c398:	e1d530d1 	ldrsb	r3, [r5, #1]
    c39c:	e3530000 	cmp	r3, #0
    c3a0:	0affff71 	beq	c16c <CKernelOptions::CKernelOptions()+0xb0>
    c3a4:	e1a0000b 	mov	r0, fp
    c3a8:	ebfffeec 	bl	bf60 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    c3ac:	e2403e1e 	sub	r3, r0, #480	; 0x1e0
    c3b0:	e3530f96 	cmp	r3, #600	; 0x258
    c3b4:	95840814 	strls	r0, [r4, #2068]	; 0x814
    c3b8:	eaffff6b 	b	c16c <CKernelOptions::CKernelOptions()+0xb0>
    c3bc:	e59f10ac 	ldr	r1, [pc, #172]	; c470 <CKernelOptions::CKernelOptions()+0x3b4>
    c3c0:	e1a00006 	mov	r0, r6
    c3c4:	eb001310 	bl	1100c <strcmp>
    c3c8:	e3500000 	cmp	r0, #0
    c3cc:	1a000006 	bne	c3ec <CKernelOptions::CKernelOptions()+0x330>
    c3d0:	e1a0000b 	mov	r0, fp
    c3d4:	e59f1098 	ldr	r1, [pc, #152]	; c474 <CKernelOptions::CKernelOptions()+0x3b8>
    c3d8:	eb00130b 	bl	1100c <strcmp>
    c3dc:	e3500000 	cmp	r0, #0
    c3e0:	03a03001 	moveq	r3, #1
    c3e4:	05c43850 	strbeq	r3, [r4, #2128]	; 0x850
    c3e8:	eaffff5f 	b	c16c <CKernelOptions::CKernelOptions()+0xb0>
    c3ec:	e1a00006 	mov	r0, r6
    c3f0:	e59f1080 	ldr	r1, [pc, #128]	; c478 <CKernelOptions::CKernelOptions()+0x3bc>
    c3f4:	eb001304 	bl	1100c <strcmp>
    c3f8:	e2903000 	adds	r3, r0, #0
    c3fc:	13a03001 	movne	r3, #1
    c400:	e35b0000 	cmp	fp, #0
    c404:	03833001 	orreq	r3, r3, #1
    c408:	e3530000 	cmp	r3, #0
    c40c:	1affff56 	bne	c16c <CKernelOptions::CKernelOptions()+0xb0>
    c410:	e1db30d0 	ldrsb	r3, [fp]
    c414:	e3530000 	cmp	r3, #0
    c418:	0affff53 	beq	c16c <CKernelOptions::CKernelOptions()+0xb0>
    c41c:	e1a0000b 	mov	r0, fp
    c420:	ebfffece 	bl	bf60 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    c424:	e2403028 	sub	r3, r0, #40	; 0x28
    c428:	e3530026 	cmp	r3, #38	; 0x26
    c42c:	95840854 	strls	r0, [r4, #2132]	; 0x854
    c430:	eaffff4d 	b	c16c <CKernelOptions::CKernelOptions()+0xb0>
    c434:	00013ed4 	.word	0x00013ed4
    c438:	00013edc 	.word	0x00013edc
    c43c:	00015aa4 	.word	0x00015aa4
    c440:	0000080c 	.word	0x0000080c
    c444:	00050001 	.word	0x00050001
    c448:	00013f48 	.word	0x00013f48
    c44c:	00013ee0 	.word	0x00013ee0
    c450:	00013ee8 	.word	0x00013ee8
    c454:	00013ef0 	.word	0x00013ef0
    c458:	0000053c 	.word	0x0000053c
    c45c:	00013efc 	.word	0x00013efc
    c460:	00013f04 	.word	0x00013f04
    c464:	00001e78 	.word	0x00001e78
    c468:	00013f14 	.word	0x00013f14
    c46c:	00013f20 	.word	0x00013f20
    c470:	00013f2c 	.word	0x00013f2c
    c474:	00013f34 	.word	0x00013f34
    c478:	00013f3c 	.word	0x00013f3c

0000c47c <CKernelOptions::GetOptionValue(char*)>:
    c47c:	e1d030d0 	ldrsb	r3, [r0]
    c480:	e3530000 	cmp	r3, #0
    c484:	1a000003 	bne	c498 <CKernelOptions::GetOptionValue(char*)+0x1c>
    c488:	ea000007 	b	c4ac <CKernelOptions::GetOptionValue(char*)+0x30>
    c48c:	e1f030d1 	ldrsb	r3, [r0, #1]!
    c490:	e3530000 	cmp	r3, #0
    c494:	0a000004 	beq	c4ac <CKernelOptions::GetOptionValue(char*)+0x30>
    c498:	e353003d 	cmp	r3, #61	; 0x3d
    c49c:	1afffffa 	bne	c48c <CKernelOptions::GetOptionValue(char*)+0x10>
    c4a0:	e3a02000 	mov	r2, #0
    c4a4:	e2803001 	add	r3, r0, #1
    c4a8:	e5c02000 	strb	r2, [r0]
    c4ac:	e1a00003 	mov	r0, r3
    c4b0:	e12fff1e 	bx	lr

0000c4b4 <CKernelOptions::GetDecimal(char*)>:
    c4b4:	e2503000 	subs	r3, r0, #0
    c4b8:	0a000002 	beq	c4c8 <CKernelOptions::GetDecimal(char*)+0x14>
    c4bc:	e1d330d0 	ldrsb	r3, [r3]
    c4c0:	e3530000 	cmp	r3, #0
    c4c4:	1a000001 	bne	c4d0 <CKernelOptions::GetDecimal(char*)+0x1c>
    c4c8:	e3e00000 	mvn	r0, #0
    c4cc:	e12fff1e 	bx	lr
    c4d0:	eafffea2 	b	bf60 <CKernelOptions::GetDecimal(char*) [clone .part.0]>

0000c4d4 <CLogger::CLogger(unsigned int, CTimer*)>:
    c4d4:	e92d4010 	push	{r4, lr}
    c4d8:	e3a03000 	mov	r3, #0
    c4dc:	e1a04000 	mov	r4, r0
    c4e0:	e3a00001 	mov	r0, #1
    c4e4:	e884000e 	stm	r4, {r1, r2, r3}
    c4e8:	e584300c 	str	r3, [r4, #12]
    c4ec:	e5843010 	str	r3, [r4, #16]
    c4f0:	e5843014 	str	r3, [r4, #20]
    c4f4:	e58430e4 	str	r3, [r4, #228]	; 0xe4
    c4f8:	e58430e8 	str	r3, [r4, #232]	; 0xe8
    c4fc:	e58430f0 	str	r3, [r4, #240]	; 0xf0
    c500:	e58430f4 	str	r3, [r4, #244]	; 0xf4
    c504:	e5840018 	str	r0, [r4, #24]
    c508:	e58400ec 	str	r0, [r4, #236]	; 0xec
    c50c:	e3a00901 	mov	r0, #16384	; 0x4000
    c510:	eb001652 	bl	11e60 <operator new[](unsigned int)>
    c514:	e59f300c 	ldr	r3, [pc, #12]	; c528 <CLogger::CLogger(unsigned int, CTimer*)+0x54>
    c518:	e584000c 	str	r0, [r4, #12]
    c51c:	e5834000 	str	r4, [r3]
    c520:	e1a00004 	mov	r0, r4
    c524:	e8bd8010 	pop	{r4, pc}
    c528:	00015aa8 	.word	0x00015aa8

0000c52c <CLogger::~CLogger()>:
    c52c:	e3a02000 	mov	r2, #0
    c530:	e59f1064 	ldr	r1, [pc, #100]	; c59c <CLogger::~CLogger()+0x70>
    c534:	e92d4070 	push	{r4, r5, r6, lr}
    c538:	e59030e8 	ldr	r3, [r0, #232]	; 0xe8
    c53c:	e1a04000 	mov	r4, r0
    c540:	e1a06002 	mov	r6, r2
    c544:	e3a05f42 	mov	r5, #264	; 0x108
    c548:	e5812000 	str	r2, [r1]
    c54c:	ea000008 	b	c574 <CLogger::~CLogger()+0x48>
    c550:	e591001c 	ldr	r0, [r1, #28]
    c554:	e1a01005 	mov	r1, r5
    c558:	eb001643 	bl	11e6c <operator delete(void*, unsigned int)>
    c55c:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
    c560:	e2833001 	add	r3, r3, #1
    c564:	e3530032 	cmp	r3, #50	; 0x32
    c568:	e58430e8 	str	r3, [r4, #232]	; 0xe8
    c56c:	03a03000 	moveq	r3, #0
    c570:	058460e8 	streq	r6, [r4, #232]	; 0xe8
    c574:	e59420e4 	ldr	r2, [r4, #228]	; 0xe4
    c578:	e0841103 	add	r1, r4, r3, lsl #2
    c57c:	e1520003 	cmp	r2, r3
    c580:	1afffff2 	bne	c550 <CLogger::~CLogger()+0x24>
    c584:	e594000c 	ldr	r0, [r4, #12]
    c588:	e3500000 	cmp	r0, #0
    c58c:	0a000000 	beq	c594 <CLogger::~CLogger()+0x68>
    c590:	eb001634 	bl	11e68 <operator delete[](void*)>
    c594:	e1a00004 	mov	r0, r4
    c598:	e8bd8070 	pop	{r4, r5, r6, pc}
    c59c:	00015aa8 	.word	0x00015aa8

0000c5a0 <CLogger::Get()>:
    c5a0:	e59f3004 	ldr	r3, [pc, #4]	; c5ac <CLogger::Get()+0xc>
    c5a4:	e5930000 	ldr	r0, [r3]
    c5a8:	e12fff1e 	bx	lr
    c5ac:	00015aa8 	.word	0x00015aa8

0000c5b0 <CLogger::Write(char const*)>:
    c5b0:	e92d4070 	push	{r4, r5, r6, lr}
    c5b4:	e1a04000 	mov	r4, r0
    c5b8:	e1a00001 	mov	r0, r1
    c5bc:	e1a05001 	mov	r5, r1
    c5c0:	eb001287 	bl	10fe4 <strlen>
    c5c4:	e1a06000 	mov	r6, r0
    c5c8:	e5940008 	ldr	r0, [r4, #8]
    c5cc:	e1a02006 	mov	r2, r6
    c5d0:	e5903000 	ldr	r3, [r0]
    c5d4:	e1a01005 	mov	r1, r5
    c5d8:	e593300c 	ldr	r3, [r3, #12]
    c5dc:	e12fff33 	blx	r3
    c5e0:	e5940018 	ldr	r0, [r4, #24]
    c5e4:	e3500000 	cmp	r0, #0
    c5e8:	1a000018 	bne	c650 <CLogger::Write(char const*)+0xa0>
    c5ec:	e59f2064 	ldr	r2, [pc, #100]	; c658 <CLogger::Write(char const*)+0xa8>
    c5f0:	e0850006 	add	r0, r5, r6
    c5f4:	e1550000 	cmp	r5, r0
    c5f8:	0a00000f 	beq	c63c <CLogger::Write(char const*)+0x8c>
    c5fc:	e0d510d1 	ldrsb	r1, [r5], #1
    c600:	e351000d 	cmp	r1, #13
    c604:	0afffffa 	beq	c5f4 <CLogger::Write(char const*)+0x44>
    c608:	e594c010 	ldr	ip, [r4, #16]
    c60c:	e594e00c 	ldr	lr, [r4, #12]
    c610:	e7ce100c 	strb	r1, [lr, ip]
    c614:	e5943010 	ldr	r3, [r4, #16]
    c618:	e5941014 	ldr	r1, [r4, #20]
    c61c:	e2833001 	add	r3, r3, #1
    c620:	e0033002 	and	r3, r3, r2
    c624:	e1530001 	cmp	r3, r1
    c628:	e5843010 	str	r3, [r4, #16]
    c62c:	1afffff0 	bne	c5f4 <CLogger::Write(char const*)+0x44>
    c630:	e2433001 	sub	r3, r3, #1
    c634:	e0033002 	and	r3, r3, r2
    c638:	e5843010 	str	r3, [r4, #16]
    c63c:	e5943018 	ldr	r3, [r4, #24]
    c640:	e3530000 	cmp	r3, #0
    c644:	08bd8070 	popeq	{r4, r5, r6, pc}
    c648:	e8bd4070 	pop	{r4, r5, r6, lr}
    c64c:	ea0015d5 	b	11da8 <LeaveCritical>
    c650:	eb0015a7 	bl	11cf4 <EnterCritical>
    c654:	eaffffe4 	b	c5ec <CLogger::Write(char const*)+0x3c>
    c658:	00003fff 	.word	0x00003fff

0000c65c <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)>:
    c65c:	e590c000 	ldr	ip, [r0]
    c660:	e152000c 	cmp	r2, ip
    c664:	812fff1e 	bxhi	lr
    c668:	e92d4070 	push	{r4, r5, r6, lr}
    c66c:	e1a05003 	mov	r5, r3
    c670:	e3a03000 	mov	r3, #0
    c674:	e24dd0c8 	sub	sp, sp, #200	; 0xc8
    c678:	e1520003 	cmp	r2, r3
    c67c:	e1a04000 	mov	r4, r0
    c680:	e5cd3000 	strb	r3, [sp]
    c684:	0a00000f 	beq	c6c8 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x6c>
    c688:	e1a0000d 	mov	r0, sp
    c68c:	eb0012f0 	bl	11254 <strcat>
    c690:	e1a0000d 	mov	r0, sp
    c694:	e59f1088 	ldr	r1, [pc, #136]	; c724 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xc8>
    c698:	eb0012ed 	bl	11254 <strcat>
    c69c:	e1a01005 	mov	r1, r5
    c6a0:	e1a0000d 	mov	r0, sp
    c6a4:	eb0012ea 	bl	11254 <strcat>
    c6a8:	e1a0000d 	mov	r0, sp
    c6ac:	e59f1074 	ldr	r1, [pc, #116]	; c728 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xcc>
    c6b0:	eb0012e7 	bl	11254 <strcat>
    c6b4:	e1a0100d 	mov	r1, sp
    c6b8:	e1a00004 	mov	r0, r4
    c6bc:	ebffffbb 	bl	c5b0 <CLogger::Write(char const*)>
    c6c0:	e28dd0c8 	add	sp, sp, #200	; 0xc8
    c6c4:	e8bd8070 	pop	{r4, r5, r6, pc}
    c6c8:	e1a06001 	mov	r6, r1
    c6cc:	e1a0000d 	mov	r0, sp
    c6d0:	e59f1054 	ldr	r1, [pc, #84]	; c72c <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd0>
    c6d4:	eb0012c0 	bl	111dc <strcpy>
    c6d8:	e1a01006 	mov	r1, r6
    c6dc:	e1a0000d 	mov	r0, sp
    c6e0:	eb0012db 	bl	11254 <strcat>
    c6e4:	e59f1038 	ldr	r1, [pc, #56]	; c724 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xc8>
    c6e8:	e1a0000d 	mov	r0, sp
    c6ec:	eb0012d8 	bl	11254 <strcat>
    c6f0:	e1a01005 	mov	r1, r5
    c6f4:	e1a0000d 	mov	r0, sp
    c6f8:	eb0012d5 	bl	11254 <strcat>
    c6fc:	e59f102c 	ldr	r1, [pc, #44]	; c730 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd4>
    c700:	e1a0000d 	mov	r0, sp
    c704:	eb0012d2 	bl	11254 <strcat>
    c708:	e59f1018 	ldr	r1, [pc, #24]	; c728 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xcc>
    c70c:	e1a0000d 	mov	r0, sp
    c710:	eb0012cf 	bl	11254 <strcat>
    c714:	e1a0100d 	mov	r1, sp
    c718:	e1a00004 	mov	r0, r4
    c71c:	ebffffa3 	bl	c5b0 <CLogger::Write(char const*)>
    c720:	eb000e64 	bl	100b8 <halt>
    c724:	00013f58 	.word	0x00013f58
    c728:	00013b54 	.word	0x00013b54
    c72c:	00013f50 	.word	0x00013f50
    c730:	00013f5c 	.word	0x00013f5c

0000c734 <CLogger::Read(void*, unsigned int)>:
    c734:	e92d4070 	push	{r4, r5, r6, lr}
    c738:	e1a04000 	mov	r4, r0
    c73c:	e5900018 	ldr	r0, [r0, #24]
    c740:	e1a05001 	mov	r5, r1
    c744:	e3500000 	cmp	r0, #0
    c748:	e1a06002 	mov	r6, r2
    c74c:	1a00001c 	bne	c7c4 <CLogger::Read(void*, unsigned int)+0x90>
    c750:	e5942010 	ldr	r2, [r4, #16]
    c754:	e5943014 	ldr	r3, [r4, #20]
    c758:	e1520003 	cmp	r2, r3
    c75c:	0a000021 	beq	c7e8 <CLogger::Read(void*, unsigned int)+0xb4>
    c760:	e1a01005 	mov	r1, r5
    c764:	e59f2088 	ldr	r2, [pc, #136]	; c7f4 <CLogger::Read(void*, unsigned int)+0xc0>
    c768:	e3a05000 	mov	r5, #0
    c76c:	ea00000a 	b	c79c <CLogger::Read(void*, unsigned int)+0x68>
    c770:	e594000c 	ldr	r0, [r4, #12]
    c774:	e2855001 	add	r5, r5, #1
    c778:	e19030d3 	ldrsb	r3, [r0, r3]
    c77c:	e4c13001 	strb	r3, [r1], #1
    c780:	e5943014 	ldr	r3, [r4, #20]
    c784:	e5940010 	ldr	r0, [r4, #16]
    c788:	e2833001 	add	r3, r3, #1
    c78c:	e0033002 	and	r3, r3, r2
    c790:	e1530000 	cmp	r3, r0
    c794:	e5843014 	str	r3, [r4, #20]
    c798:	0a000001 	beq	c7a4 <CLogger::Read(void*, unsigned int)+0x70>
    c79c:	e1550006 	cmp	r5, r6
    c7a0:	1afffff2 	bne	c770 <CLogger::Read(void*, unsigned int)+0x3c>
    c7a4:	e5943018 	ldr	r3, [r4, #24]
    c7a8:	e3530000 	cmp	r3, #0
    c7ac:	1a000001 	bne	c7b8 <CLogger::Read(void*, unsigned int)+0x84>
    c7b0:	e1a00005 	mov	r0, r5
    c7b4:	e8bd8070 	pop	{r4, r5, r6, pc}
    c7b8:	eb00157a 	bl	11da8 <LeaveCritical>
    c7bc:	e1a00005 	mov	r0, r5
    c7c0:	e8bd8070 	pop	{r4, r5, r6, pc}
    c7c4:	eb00154a 	bl	11cf4 <EnterCritical>
    c7c8:	e5942010 	ldr	r2, [r4, #16]
    c7cc:	e5943014 	ldr	r3, [r4, #20]
    c7d0:	e1520003 	cmp	r2, r3
    c7d4:	1affffe1 	bne	c760 <CLogger::Read(void*, unsigned int)+0x2c>
    c7d8:	e5943018 	ldr	r3, [r4, #24]
    c7dc:	e3530000 	cmp	r3, #0
    c7e0:	0a000000 	beq	c7e8 <CLogger::Read(void*, unsigned int)+0xb4>
    c7e4:	eb00156f 	bl	11da8 <LeaveCritical>
    c7e8:	e3e05000 	mvn	r5, #0
    c7ec:	e1a00005 	mov	r0, r5
    c7f0:	e8bd8070 	pop	{r4, r5, r6, pc}
    c7f4:	00003fff 	.word	0x00003fff

0000c7f8 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>:
    c7f8:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    c7fc:	e1a05000 	mov	r5, r0
    c800:	e24dd00c 	sub	sp, sp, #12
    c804:	e3a00f42 	mov	r0, #264	; 0x108
    c808:	e1a07003 	mov	r7, r3
    c80c:	e1a09002 	mov	r9, r2
    c810:	e1a08001 	mov	r8, r1
    c814:	eb001590 	bl	11e5c <operator new(unsigned int)>
    c818:	e3a06000 	mov	r6, #0
    c81c:	e1a04000 	mov	r4, r0
    c820:	e1a01008 	mov	r1, r8
    c824:	e3a02032 	mov	r2, #50	; 0x32
    c828:	e4c09001 	strb	r9, [r0], #1
    c82c:	eb001275 	bl	11208 <strncpy>
    c830:	e1a01007 	mov	r1, r7
    c834:	e2840033 	add	r0, r4, #51	; 0x33
    c838:	e3a020c8 	mov	r2, #200	; 0xc8
    c83c:	e5c46032 	strb	r6, [r4, #50]	; 0x32
    c840:	eb001270 	bl	11208 <strncpy>
    c844:	e5950004 	ldr	r0, [r5, #4]
    c848:	e5c460fa 	strb	r6, [r4, #250]	; 0xfa
    c84c:	e1500006 	cmp	r0, r6
    c850:	0a000004 	beq	c868 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x70>
    c854:	e28d2004 	add	r2, sp, #4
    c858:	e1a0100d 	mov	r1, sp
    c85c:	eb000ef0 	bl	10424 <CTimer::GetLocalTime(unsigned int*, unsigned int*)>
    c860:	e1500006 	cmp	r0, r6
    c864:	1a000021 	bne	c8f0 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xf8>
    c868:	e3a03000 	mov	r3, #0
    c86c:	e59500ec 	ldr	r0, [r5, #236]	; 0xec
    c870:	e58430fc 	str	r3, [r4, #252]	; 0xfc
    c874:	e3500000 	cmp	r0, #0
    c878:	e5843100 	str	r3, [r4, #256]	; 0x100
    c87c:	e5843104 	str	r3, [r4, #260]	; 0x104
    c880:	1a000027 	bne	c924 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x12c>
    c884:	e59520e4 	ldr	r2, [r5, #228]	; 0xe4
    c888:	e2823001 	add	r3, r2, #1
    c88c:	e3530032 	cmp	r3, #50	; 0x32
    c890:	e0852102 	add	r2, r5, r2, lsl #2
    c894:	e582401c 	str	r4, [r2, #28]
    c898:	03a02000 	moveq	r2, #0
    c89c:	01a03002 	moveq	r3, r2
    c8a0:	058520e4 	streq	r2, [r5, #228]	; 0xe4
    c8a4:	e59520e8 	ldr	r2, [r5, #232]	; 0xe8
    c8a8:	158530e4 	strne	r3, [r5, #228]	; 0xe4
    c8ac:	e1520003 	cmp	r2, r3
    c8b0:	0a00001e 	beq	c930 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x138>
    c8b4:	e3500000 	cmp	r0, #0
    c8b8:	13a04000 	movne	r4, #0
    c8bc:	0a000005 	beq	c8d8 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xe0>
    c8c0:	eb001538 	bl	11da8 <LeaveCritical>
    c8c4:	e3540000 	cmp	r4, #0
    c8c8:	0a000002 	beq	c8d8 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xe0>
    c8cc:	e1a00004 	mov	r0, r4
    c8d0:	e3a01f42 	mov	r1, #264	; 0x108
    c8d4:	eb001564 	bl	11e6c <operator delete(void*, unsigned int)>
    c8d8:	e59530f0 	ldr	r3, [r5, #240]	; 0xf0
    c8dc:	e3530000 	cmp	r3, #0
    c8e0:	0a000000 	beq	c8e8 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xf0>
    c8e4:	e12fff33 	blx	r3
    c8e8:	e28dd00c 	add	sp, sp, #12
    c8ec:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    c8f0:	e59d3004 	ldr	r3, [sp, #4]
    c8f4:	e59f105c 	ldr	r1, [pc, #92]	; c958 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x160>
    c8f8:	e59d2000 	ldr	r2, [sp]
    c8fc:	e0831391 	umull	r1, r3, r1, r3
    c900:	e1a036a3 	lsr	r3, r3, #13
    c904:	e5950004 	ldr	r0, [r5, #4]
    c908:	e5843100 	str	r3, [r4, #256]	; 0x100
    c90c:	e58420fc 	str	r2, [r4, #252]	; 0xfc
    c910:	eb000e95 	bl	1036c <CTimer::GetTimeZone() const>
    c914:	e5840104 	str	r0, [r4, #260]	; 0x104
    c918:	e59500ec 	ldr	r0, [r5, #236]	; 0xec
    c91c:	e3500000 	cmp	r0, #0
    c920:	0affffd7 	beq	c884 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x8c>
    c924:	eb0014f2 	bl	11cf4 <EnterCritical>
    c928:	e59500ec 	ldr	r0, [r5, #236]	; 0xec
    c92c:	eaffffd4 	b	c884 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x8c>
    c930:	e2832001 	add	r2, r3, #1
    c934:	e3520032 	cmp	r2, #50	; 0x32
    c938:	e0853103 	add	r3, r5, r3, lsl #2
    c93c:	e593401c 	ldr	r4, [r3, #28]
    c940:	03a03000 	moveq	r3, #0
    c944:	158520e8 	strne	r2, [r5, #232]	; 0xe8
    c948:	058530e8 	streq	r3, [r5, #232]	; 0xe8
    c94c:	e3500000 	cmp	r0, #0
    c950:	0affffdb 	beq	c8c4 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xcc>
    c954:	eaffffd9 	b	c8c0 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xc8>
    c958:	d1b71759 	.word	0xd1b71759

0000c95c <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)>:
    c95c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c960:	e1a04000 	mov	r4, r0
    c964:	e59000ec 	ldr	r0, [r0, #236]	; 0xec
    c968:	e1a07001 	mov	r7, r1
    c96c:	e3500000 	cmp	r0, #0
    c970:	e1a08002 	mov	r8, r2
    c974:	e1a06003 	mov	r6, r3
    c978:	1a000022 	bne	ca08 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xac>
    c97c:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
    c980:	e59420e4 	ldr	r2, [r4, #228]	; 0xe4
    c984:	e1530002 	cmp	r3, r2
    c988:	0a000028 	beq	ca30 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xd4>
    c98c:	e283c001 	add	ip, r3, #1
    c990:	e35c0032 	cmp	ip, #50	; 0x32
    c994:	e0843103 	add	r3, r4, r3, lsl #2
    c998:	e593501c 	ldr	r5, [r3, #28]
    c99c:	03a03000 	moveq	r3, #0
    c9a0:	1584c0e8 	strne	ip, [r4, #232]	; 0xe8
    c9a4:	058430e8 	streq	r3, [r4, #232]	; 0xe8
    c9a8:	e3500000 	cmp	r0, #0
    c9ac:	1a000021 	bne	ca38 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xdc>
    c9b0:	e1a01005 	mov	r1, r5
    c9b4:	e4d12001 	ldrb	r2, [r1], #1
    c9b8:	e1a00008 	mov	r0, r8
    c9bc:	e5c72000 	strb	r2, [r7]
    c9c0:	eb001205 	bl	111dc <strcpy>
    c9c4:	e2851033 	add	r1, r5, #51	; 0x33
    c9c8:	e1a00006 	mov	r0, r6
    c9cc:	eb001202 	bl	111dc <strcpy>
    c9d0:	e59520fc 	ldr	r2, [r5, #252]	; 0xfc
    c9d4:	e59d1018 	ldr	r1, [sp, #24]
    c9d8:	e5953100 	ldr	r3, [r5, #256]	; 0x100
    c9dc:	e5812000 	str	r2, [r1]
    c9e0:	e59d201c 	ldr	r2, [sp, #28]
    c9e4:	e1a00005 	mov	r0, r5
    c9e8:	e5823000 	str	r3, [r2]
    c9ec:	e5953104 	ldr	r3, [r5, #260]	; 0x104
    c9f0:	e59d2020 	ldr	r2, [sp, #32]
    c9f4:	e3a01f42 	mov	r1, #264	; 0x108
    c9f8:	e5823000 	str	r3, [r2]
    c9fc:	eb00151a 	bl	11e6c <operator delete(void*, unsigned int)>
    ca00:	e3a00001 	mov	r0, #1
    ca04:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ca08:	eb0014b9 	bl	11cf4 <EnterCritical>
    ca0c:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
    ca10:	e59420e4 	ldr	r2, [r4, #228]	; 0xe4
    ca14:	e1520003 	cmp	r2, r3
    ca18:	159400ec 	ldrne	r0, [r4, #236]	; 0xec
    ca1c:	1affffda 	bne	c98c <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x30>
    ca20:	e59430ec 	ldr	r3, [r4, #236]	; 0xec
    ca24:	e3530000 	cmp	r3, #0
    ca28:	0a000000 	beq	ca30 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xd4>
    ca2c:	eb0014dd 	bl	11da8 <LeaveCritical>
    ca30:	e3a00000 	mov	r0, #0
    ca34:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ca38:	eb0014da 	bl	11da8 <LeaveCritical>
    ca3c:	eaffffdb 	b	c9b0 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x54>

0000ca40 <CLogger::RegisterEventNotificationHandler(void (*)())>:
    ca40:	e58010f0 	str	r1, [r0, #240]	; 0xf0
    ca44:	e12fff1e 	bx	lr

0000ca48 <CLogger::RegisterPanicHandler(void (*)())>:
    ca48:	e58010f4 	str	r1, [r0, #244]	; 0xf4
    ca4c:	e12fff1e 	bx	lr

0000ca50 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>:
    ca50:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    ca54:	e1a07003 	mov	r7, r3
    ca58:	e24dd024 	sub	sp, sp, #36	; 0x24
    ca5c:	e1a04000 	mov	r4, r0
    ca60:	e1a0000d 	mov	r0, sp
    ca64:	e1a05002 	mov	r5, r2
    ca68:	e1a06001 	mov	r6, r1
    ca6c:	eb000996 	bl	f0cc <CString::CString()>
    ca70:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
    ca74:	e1a01007 	mov	r1, r7
    ca78:	e1a0000d 	mov	r0, sp
    ca7c:	eb000b5f 	bl	f800 <CString::FormatV(char const*, std::__va_list)>
    ca80:	e1a0000d 	mov	r0, sp
    ca84:	eb0009a6 	bl	f124 <CString::operator char const*() const>
    ca88:	e1a02005 	mov	r2, r5
    ca8c:	e1a03000 	mov	r3, r0
    ca90:	e1a01006 	mov	r1, r6
    ca94:	e1a00004 	mov	r0, r4
    ca98:	ebffff56 	bl	c7f8 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>
    ca9c:	e5943000 	ldr	r3, [r4]
    caa0:	e1550003 	cmp	r5, r3
    caa4:	8a00002c 	bhi	cb5c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x10c>
    caa8:	e28d0010 	add	r0, sp, #16
    caac:	eb000986 	bl	f0cc <CString::CString()>
    cab0:	e3550000 	cmp	r5, #0
    cab4:	0a00002c 	beq	cb6c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x11c>
    cab8:	e5940004 	ldr	r0, [r4, #4]
    cabc:	e3500000 	cmp	r0, #0
    cac0:	0a00004a 	beq	cbf0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1a0>
    cac4:	eb000ec7 	bl	105e8 <CTimer::GetTimeString()>
    cac8:	e2507000 	subs	r7, r0, #0
    cacc:	0a000047 	beq	cbf0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1a0>
    cad0:	e1a00007 	mov	r0, r7
    cad4:	eb000992 	bl	f124 <CString::operator char const*() const>
    cad8:	e1a01000 	mov	r1, r0
    cadc:	e28d0010 	add	r0, sp, #16
    cae0:	eb0009c1 	bl	f1ec <CString::Append(char const*)>
    cae4:	e59f1144 	ldr	r1, [pc, #324]	; cc30 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e0>
    cae8:	e28d0010 	add	r0, sp, #16
    caec:	eb0009be 	bl	f1ec <CString::Append(char const*)>
    caf0:	e5973000 	ldr	r3, [r7]
    caf4:	e1a00007 	mov	r0, r7
    caf8:	e5933004 	ldr	r3, [r3, #4]
    cafc:	e12fff33 	blx	r3
    cb00:	e1a01006 	mov	r1, r6
    cb04:	e28d0010 	add	r0, sp, #16
    cb08:	eb0009b7 	bl	f1ec <CString::Append(char const*)>
    cb0c:	e59f1120 	ldr	r1, [pc, #288]	; cc34 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e4>
    cb10:	e28d0010 	add	r0, sp, #16
    cb14:	eb0009b4 	bl	f1ec <CString::Append(char const*)>
    cb18:	e1a0000d 	mov	r0, sp
    cb1c:	eb000980 	bl	f124 <CString::operator char const*() const>
    cb20:	e1a01000 	mov	r1, r0
    cb24:	e28d0010 	add	r0, sp, #16
    cb28:	eb0009af 	bl	f1ec <CString::Append(char const*)>
    cb2c:	e3550000 	cmp	r5, #0
    cb30:	0a00001e 	beq	cbb0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x160>
    cb34:	e59f10fc 	ldr	r1, [pc, #252]	; cc38 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e8>
    cb38:	e28d0010 	add	r0, sp, #16
    cb3c:	eb0009aa 	bl	f1ec <CString::Append(char const*)>
    cb40:	e28d0010 	add	r0, sp, #16
    cb44:	eb000976 	bl	f124 <CString::operator char const*() const>
    cb48:	e1a01000 	mov	r1, r0
    cb4c:	e1a00004 	mov	r0, r4
    cb50:	ebfffe96 	bl	c5b0 <CLogger::Write(char const*)>
    cb54:	e28d0010 	add	r0, sp, #16
    cb58:	eb000928 	bl	f000 <CString::~CString()>
    cb5c:	e1a0000d 	mov	r0, sp
    cb60:	eb000926 	bl	f000 <CString::~CString()>
    cb64:	e28dd024 	add	sp, sp, #36	; 0x24
    cb68:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    cb6c:	e59f10c8 	ldr	r1, [pc, #200]	; cc3c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1ec>
    cb70:	e28d0010 	add	r0, sp, #16
    cb74:	eb000970 	bl	f13c <CString::operator=(char const*)>
    cb78:	e5940004 	ldr	r0, [r4, #4]
    cb7c:	e3500000 	cmp	r0, #0
    cb80:	1a000026 	bne	cc20 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1d0>
    cb84:	e1a01006 	mov	r1, r6
    cb88:	e28d0010 	add	r0, sp, #16
    cb8c:	eb000996 	bl	f1ec <CString::Append(char const*)>
    cb90:	e59f109c 	ldr	r1, [pc, #156]	; cc34 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e4>
    cb94:	e28d0010 	add	r0, sp, #16
    cb98:	eb000993 	bl	f1ec <CString::Append(char const*)>
    cb9c:	e1a0000d 	mov	r0, sp
    cba0:	eb00095f 	bl	f124 <CString::operator char const*() const>
    cba4:	e1a01000 	mov	r1, r0
    cba8:	e28d0010 	add	r0, sp, #16
    cbac:	eb00098e 	bl	f1ec <CString::Append(char const*)>
    cbb0:	e59f1088 	ldr	r1, [pc, #136]	; cc40 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1f0>
    cbb4:	e28d0010 	add	r0, sp, #16
    cbb8:	eb00098b 	bl	f1ec <CString::Append(char const*)>
    cbbc:	e59f1074 	ldr	r1, [pc, #116]	; cc38 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e8>
    cbc0:	e28d0010 	add	r0, sp, #16
    cbc4:	eb000988 	bl	f1ec <CString::Append(char const*)>
    cbc8:	e28d0010 	add	r0, sp, #16
    cbcc:	eb000954 	bl	f124 <CString::operator char const*() const>
    cbd0:	e1a01000 	mov	r1, r0
    cbd4:	e1a00004 	mov	r0, r4
    cbd8:	ebfffe74 	bl	c5b0 <CLogger::Write(char const*)>
    cbdc:	e59430f4 	ldr	r3, [r4, #244]	; 0xf4
    cbe0:	e3530000 	cmp	r3, #0
    cbe4:	0a000000 	beq	cbec <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x19c>
    cbe8:	e12fff33 	blx	r3
    cbec:	eb000d31 	bl	100b8 <halt>
    cbf0:	e1a01006 	mov	r1, r6
    cbf4:	e28d0010 	add	r0, sp, #16
    cbf8:	eb00097b 	bl	f1ec <CString::Append(char const*)>
    cbfc:	e59f1030 	ldr	r1, [pc, #48]	; cc34 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e4>
    cc00:	e28d0010 	add	r0, sp, #16
    cc04:	eb000978 	bl	f1ec <CString::Append(char const*)>
    cc08:	e1a0000d 	mov	r0, sp
    cc0c:	eb000944 	bl	f124 <CString::operator char const*() const>
    cc10:	e1a01000 	mov	r1, r0
    cc14:	e28d0010 	add	r0, sp, #16
    cc18:	eb000973 	bl	f1ec <CString::Append(char const*)>
    cc1c:	eaffffc4 	b	cb34 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xe4>
    cc20:	eb000e70 	bl	105e8 <CTimer::GetTimeString()>
    cc24:	e2507000 	subs	r7, r0, #0
    cc28:	1affffa8 	bne	cad0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x80>
    cc2c:	eaffffd4 	b	cb84 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x134>
    cc30:	00013f64 	.word	0x00013f64
    cc34:	00013f58 	.word	0x00013f58
    cc38:	00013b54 	.word	0x00013b54
    cc3c:	00013f50 	.word	0x00013f50
    cc40:	00013f5c 	.word	0x00013f5c

0000cc44 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>:
    cc44:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)
    cc48:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    cc4c:	e24dd010 	sub	sp, sp, #16
    cc50:	e28dc018 	add	ip, sp, #24
    cc54:	e58dc000 	str	ip, [sp]
    cc58:	e59d3014 	ldr	r3, [sp, #20]
    cc5c:	e58dc00c 	str	ip, [sp, #12]
    cc60:	ebffff7a 	bl	ca50 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
    cc64:	e28dd010 	add	sp, sp, #16
    cc68:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    cc6c:	e28dd004 	add	sp, sp, #4
    cc70:	e12fff1e 	bx	lr

0000cc74 <CLogger::Initialize(CDevice*)>:
    cc74:	e92d4010 	push	{r4, lr}
    cc78:	e5801008 	str	r1, [r0, #8]
    cc7c:	e24dd008 	sub	sp, sp, #8
    cc80:	e1a04000 	mov	r4, r0
    cc84:	eb000115 	bl	d0e0 <CMachineInfo::Get()>
    cc88:	eb00009e 	bl	cf08 <CMachineInfo::GetMachineName() const>
    cc8c:	e59f301c 	ldr	r3, [pc, #28]	; ccb0 <CLogger::Initialize(CDevice*)+0x3c>
    cc90:	e58d0000 	str	r0, [sp]
    cc94:	e3a02003 	mov	r2, #3
    cc98:	e1a00004 	mov	r0, r4
    cc9c:	e59f1010 	ldr	r1, [pc, #16]	; ccb4 <CLogger::Initialize(CDevice*)+0x40>
    cca0:	ebffffe7 	bl	cc44 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    cca4:	e3a00001 	mov	r0, #1
    cca8:	e28dd008 	add	sp, sp, #8
    ccac:	e8bd8010 	pop	{r4, pc}
    ccb0:	00013f68 	.word	0x00013f68
    ccb4:	00013f80 	.word	0x00013f80

0000ccb8 <CMachineInfo::CMachineInfo()>:
    ccb8:	e3a03000 	mov	r3, #0
    ccbc:	e92d4030 	push	{r4, r5, lr}
    ccc0:	e3a01003 	mov	r1, #3
    ccc4:	e1a04000 	mov	r4, r0
    ccc8:	e3a0000e 	mov	r0, #14
    cccc:	e59f21f4 	ldr	r2, [pc, #500]	; cec8 <CMachineInfo::CMachineInfo()+0x210>
    ccd0:	e24dd024 	sub	sp, sp, #36	; 0x24
    ccd4:	e5925000 	ldr	r5, [r2]
    ccd8:	e5c40004 	strb	r0, [r4, #4]
    ccdc:	e1550003 	cmp	r5, r3
    cce0:	e5c41010 	strb	r1, [r4, #16]
    cce4:	e5843000 	str	r3, [r4]
    cce8:	e5843008 	str	r3, [r4, #8]
    ccec:	e584300c 	str	r3, [r4, #12]
    ccf0:	e5843014 	str	r3, [r4, #20]
    ccf4:	0a00000e 	beq	cd34 <CMachineInfo::CMachineInfo()+0x7c>
    ccf8:	e595e000 	ldr	lr, [r5]
    ccfc:	e5d5c004 	ldrb	ip, [r5, #4]
    cd00:	e5950008 	ldr	r0, [r5, #8]
    cd04:	e595100c 	ldr	r1, [r5, #12]
    cd08:	e5d52010 	ldrb	r2, [r5, #16]
    cd0c:	e5953014 	ldr	r3, [r5, #20]
    cd10:	e584e000 	str	lr, [r4]
    cd14:	e5c4c004 	strb	ip, [r4, #4]
    cd18:	e5840008 	str	r0, [r4, #8]
    cd1c:	e584100c 	str	r1, [r4, #12]
    cd20:	e5c42010 	strb	r2, [r4, #16]
    cd24:	e5843014 	str	r3, [r4, #20]
    cd28:	e1a00004 	mov	r0, r4
    cd2c:	e28dd024 	add	sp, sp, #36	; 0x24
    cd30:	e8bd8030 	pop	{r4, r5, pc}
    cd34:	e28d000c 	add	r0, sp, #12
    cd38:	e5824000 	str	r4, [r2]
    cd3c:	ebfff591 	bl	a388 <CBcmPropertyTags::CBcmPropertyTags()>
    cd40:	e3a03010 	mov	r3, #16
    cd44:	e58d5000 	str	r5, [sp]
    cd48:	e28d000c 	add	r0, sp, #12
    cd4c:	e08d2003 	add	r2, sp, r3
    cd50:	e59f1174 	ldr	r1, [pc, #372]	; cecc <CMachineInfo::CMachineInfo()+0x214>
    cd54:	ebfff5e2 	bl	a4e4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    cd58:	e3500000 	cmp	r0, #0
    cd5c:	0a00000c 	beq	cd94 <CMachineInfo::CMachineInfo()+0xdc>
    cd60:	e59d101c 	ldr	r1, [sp, #28]
    cd64:	e2113502 	ands	r3, r1, #8388608	; 0x800000
    cd68:	e5841000 	str	r1, [r4]
    cd6c:	1a00000b 	bne	cda0 <CMachineInfo::CMachineInfo()+0xe8>
    cd70:	e3a02002 	mov	r2, #2
    cd74:	e59f0154 	ldr	r0, [pc, #340]	; ced0 <CMachineInfo::CMachineInfo()+0x218>
    cd78:	ea000000 	b	cd80 <CMachineInfo::CMachineInfo()+0xc8>
    cd7c:	e7902203 	ldr	r2, [r0, r3, lsl #4]
    cd80:	e1510002 	cmp	r1, r2
    cd84:	0a000012 	beq	cdd4 <CMachineInfo::CMachineInfo()+0x11c>
    cd88:	e2833001 	add	r3, r3, #1
    cd8c:	e3530011 	cmp	r3, #17
    cd90:	1afffff9 	bne	cd7c <CMachineInfo::CMachineInfo()+0xc4>
    cd94:	e28d000c 	add	r0, sp, #12
    cd98:	ebfff580 	bl	a3a0 <CBcmPropertyTags::~CBcmPropertyTags()>
    cd9c:	eaffffe1 	b	cd28 <CMachineInfo::CMachineInfo()+0x70>
    cda0:	e1a00221 	lsr	r0, r1, #4
    cda4:	e1a03005 	mov	r3, r5
    cda8:	e59f2124 	ldr	r2, [pc, #292]	; ced4 <CMachineInfo::CMachineInfo()+0x21c>
    cdac:	e6ef0070 	uxtb	r0, r0
    cdb0:	ea000000 	b	cdb8 <CMachineInfo::CMachineInfo()+0x100>
    cdb4:	e512500c 	ldr	r5, [r2, #-12]
    cdb8:	e1500005 	cmp	r0, r5
    cdbc:	0a000015 	beq	ce18 <CMachineInfo::CMachineInfo()+0x160>
    cdc0:	e2833001 	add	r3, r3, #1
    cdc4:	e353000c 	cmp	r3, #12
    cdc8:	e282200c 	add	r2, r2, #12
    cdcc:	1afffff8 	bne	cdb4 <CMachineInfo::CMachineInfo()+0xfc>
    cdd0:	eaffffef 	b	cd94 <CMachineInfo::CMachineInfo()+0xdc>
    cdd4:	e59fc0fc 	ldr	ip, [pc, #252]	; ced8 <CMachineInfo::CMachineInfo()+0x220>
    cdd8:	e1a03203 	lsl	r3, r3, #4
    cddc:	e08c2003 	add	r2, ip, r3
    cde0:	e5d22094 	ldrb	r2, [r2, #148]	; 0x94
    cde4:	e3a01001 	mov	r1, #1
    cde8:	e352000e 	cmp	r2, #14
    cdec:	c3a0200e 	movgt	r2, #14
    cdf0:	e5c42004 	strb	r2, [r4, #4]
    cdf4:	e3a02000 	mov	r2, #0
    cdf8:	e08c3003 	add	r3, ip, r3
    cdfc:	e5930098 	ldr	r0, [r3, #152]	; 0x98
    ce00:	e593309c 	ldr	r3, [r3, #156]	; 0x9c
    ce04:	e584000c 	str	r0, [r4, #12]
    ce08:	e5843014 	str	r3, [r4, #20]
    ce0c:	e5841008 	str	r1, [r4, #8]
    ce10:	e5c42010 	strb	r2, [r4, #16]
    ce14:	eaffffde 	b	cd94 <CMachineInfo::CMachineInfo()+0xdc>
    ce18:	e1a02083 	lsl	r2, r3, #1
    ce1c:	e59fc0b4 	ldr	ip, [pc, #180]	; ced8 <CMachineInfo::CMachineInfo()+0x220>
    ce20:	e0820003 	add	r0, r2, r3
    ce24:	e08c0100 	add	r0, ip, r0, lsl #2
    ce28:	e5d00004 	ldrb	r0, [r0, #4]
    ce2c:	e350000e 	cmp	r0, #14
    ce30:	ca00001e 	bgt	ceb0 <CMachineInfo::CMachineInfo()+0x1f8>
    ce34:	e1a05a21 	lsr	r5, r1, #20
    ce38:	e2155007 	ands	r5, r5, #7
    ce3c:	03a0e001 	moveq	lr, #1
    ce40:	13a0e000 	movne	lr, #0
    ce44:	e3500003 	cmp	r0, #3
    ce48:	13a0e000 	movne	lr, #0
    ce4c:	020ee001 	andeq	lr, lr, #1
    ce50:	e5c40004 	strb	r0, [r4, #4]
    ce54:	e0822003 	add	r2, r2, r3
    ce58:	e1a03621 	lsr	r3, r1, #12
    ce5c:	e203300f 	and	r3, r3, #15
    ce60:	e3530002 	cmp	r3, #2
    ce64:	e5c43010 	strb	r3, [r4, #16]
    ce68:	e3a00c01 	mov	r0, #256	; 0x100
    ce6c:	83a03003 	movhi	r3, #3
    ce70:	e08c2102 	add	r2, ip, r2, lsl #2
    ce74:	e592c008 	ldr	ip, [r2, #8]
    ce78:	e201200f 	and	r2, r1, #15
    ce7c:	e2822001 	add	r2, r2, #1
    ce80:	e1a01510 	lsl	r1, r0, r5
    ce84:	85c43010 	strbhi	r3, [r4, #16]
    ce88:	e35e0000 	cmp	lr, #0
    ce8c:	e584c008 	str	ip, [r4, #8]
    ce90:	e5841014 	str	r1, [r4, #20]
    ce94:	e584200c 	str	r2, [r4, #12]
    ce98:	0affffbd 	beq	cd94 <CMachineInfo::CMachineInfo()+0xdc>
    ce9c:	e3520001 	cmp	r2, #1
    cea0:	13a02002 	movne	r2, #2
    cea4:	03a02001 	moveq	r2, #1
    cea8:	e5c42004 	strb	r2, [r4, #4]
    ceac:	eaffffb8 	b	cd94 <CMachineInfo::CMachineInfo()+0xdc>
    ceb0:	e3a0000e 	mov	r0, #14
    ceb4:	e1a05a21 	lsr	r5, r1, #20
    ceb8:	e3a0e000 	mov	lr, #0
    cebc:	e5c40004 	strb	r0, [r4, #4]
    cec0:	e2055007 	and	r5, r5, #7
    cec4:	eaffffe2 	b	ce54 <CMachineInfo::CMachineInfo()+0x19c>
    cec8:	00015aac 	.word	0x00015aac
    cecc:	00010002 	.word	0x00010002
    ced0:	00014018 	.word	0x00014018
    ced4:	00013f94 	.word	0x00013f94
    ced8:	00013f88 	.word	0x00013f88

0000cedc <CMachineInfo::~CMachineInfo()>:
    cedc:	e3a0200e 	mov	r2, #14
    cee0:	e59f3014 	ldr	r3, [pc, #20]	; cefc <CMachineInfo::~CMachineInfo()+0x20>
    cee4:	e5c02004 	strb	r2, [r0, #4]
    cee8:	e5932000 	ldr	r2, [r3]
    ceec:	e1500002 	cmp	r0, r2
    cef0:	03a02000 	moveq	r2, #0
    cef4:	05832000 	streq	r2, [r3]
    cef8:	e12fff1e 	bx	lr
    cefc:	00015aac 	.word	0x00015aac

0000cf00 <CMachineInfo::GetMachineModel() const>:
    cf00:	e5d00004 	ldrb	r0, [r0, #4]
    cf04:	e12fff1e 	bx	lr

0000cf08 <CMachineInfo::GetMachineName() const>:
    cf08:	e5d02004 	ldrb	r2, [r0, #4]
    cf0c:	e59f3008 	ldr	r3, [pc, #8]	; cf1c <CMachineInfo::GetMachineName() const+0x14>
    cf10:	e0833102 	add	r3, r3, r2, lsl #2
    cf14:	e59301a0 	ldr	r0, [r3, #416]	; 0x1a0
    cf18:	e12fff1e 	bx	lr
    cf1c:	00013f88 	.word	0x00013f88

0000cf20 <CMachineInfo::GetModelMajor() const>:
    cf20:	e5900008 	ldr	r0, [r0, #8]
    cf24:	e12fff1e 	bx	lr

0000cf28 <CMachineInfo::GetModelRevision() const>:
    cf28:	e590000c 	ldr	r0, [r0, #12]
    cf2c:	e12fff1e 	bx	lr

0000cf30 <CMachineInfo::GetSoCType() const>:
    cf30:	e5d00010 	ldrb	r0, [r0, #16]
    cf34:	e12fff1e 	bx	lr

0000cf38 <CMachineInfo::GetRAMSize() const>:
    cf38:	e5900014 	ldr	r0, [r0, #20]
    cf3c:	e12fff1e 	bx	lr

0000cf40 <CMachineInfo::GetSoCName() const>:
    cf40:	e5d02010 	ldrb	r2, [r0, #16]
    cf44:	e59f3008 	ldr	r3, [pc, #8]	; cf54 <CMachineInfo::GetSoCName() const+0x14>
    cf48:	e0833102 	add	r3, r3, r2, lsl #2
    cf4c:	e59301dc 	ldr	r0, [r3, #476]	; 0x1dc
    cf50:	e12fff1e 	bx	lr
    cf54:	00013f88 	.word	0x00013f88

0000cf58 <CMachineInfo::GetRevisionRaw() const>:
    cf58:	e5900000 	ldr	r0, [r0]
    cf5c:	e12fff1e 	bx	lr

0000cf60 <CMachineInfo::GetClockRate(unsigned int) const>:
    cf60:	e92d4070 	push	{r4, r5, r6, lr}
    cf64:	e24dd020 	sub	sp, sp, #32
    cf68:	e1a06000 	mov	r6, r0
    cf6c:	e28d0008 	add	r0, sp, #8
    cf70:	e1a05001 	mov	r5, r1
    cf74:	ebfff503 	bl	a388 <CBcmPropertyTags::CBcmPropertyTags()>
    cf78:	e3a03004 	mov	r3, #4
    cf7c:	e28d0008 	add	r0, sp, #8
    cf80:	e58d3000 	str	r3, [sp]
    cf84:	e28d200c 	add	r2, sp, #12
    cf88:	e3a03014 	mov	r3, #20
    cf8c:	e59f1078 	ldr	r1, [pc, #120]	; d00c <CMachineInfo::GetClockRate(unsigned int) const+0xac>
    cf90:	e58d5018 	str	r5, [sp, #24]
    cf94:	ebfff552 	bl	a4e4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    cf98:	e2504000 	subs	r4, r0, #0
    cf9c:	1a00000e 	bne	cfdc <CMachineInfo::GetClockRate(unsigned int) const+0x7c>
    cfa0:	e3550002 	cmp	r5, #2
    cfa4:	0a00000e 	beq	cfe4 <CMachineInfo::GetClockRate(unsigned int) const+0x84>
    cfa8:	e3550004 	cmp	r5, #4
    cfac:	0a000010 	beq	cff4 <CMachineInfo::GetClockRate(unsigned int) const+0x94>
    cfb0:	e3550001 	cmp	r5, #1
    cfb4:	0a00000c 	beq	cfec <CMachineInfo::GetClockRate(unsigned int) const+0x8c>
    cfb8:	e59f2050 	ldr	r2, [pc, #80]	; d010 <CMachineInfo::GetClockRate(unsigned int) const+0xb0>
    cfbc:	e59f1050 	ldr	r1, [pc, #80]	; d014 <CMachineInfo::GetClockRate(unsigned int) const+0xb4>
    cfc0:	e59f0050 	ldr	r0, [pc, #80]	; d018 <CMachineInfo::GetClockRate(unsigned int) const+0xb8>
    cfc4:	eb001532 	bl	12494 <assertion_failed>
    cfc8:	e28d0008 	add	r0, sp, #8
    cfcc:	ebfff4f3 	bl	a3a0 <CBcmPropertyTags::~CBcmPropertyTags()>
    cfd0:	e1a00004 	mov	r0, r4
    cfd4:	e28dd020 	add	sp, sp, #32
    cfd8:	e8bd8070 	pop	{r4, r5, r6, pc}
    cfdc:	e59d401c 	ldr	r4, [sp, #28]
    cfe0:	eafffff8 	b	cfc8 <CMachineInfo::GetClockRate(unsigned int) const+0x68>
    cfe4:	e59f4030 	ldr	r4, [pc, #48]	; d01c <CMachineInfo::GetClockRate(unsigned int) const+0xbc>
    cfe8:	eafffff6 	b	cfc8 <CMachineInfo::GetClockRate(unsigned int) const+0x68>
    cfec:	e59f402c 	ldr	r4, [pc, #44]	; d020 <CMachineInfo::GetClockRate(unsigned int) const+0xc0>
    cff0:	eafffff4 	b	cfc8 <CMachineInfo::GetClockRate(unsigned int) const+0x68>
    cff4:	e5962008 	ldr	r2, [r6, #8]
    cff8:	e59f3024 	ldr	r3, [pc, #36]	; d024 <CMachineInfo::GetClockRate(unsigned int) const+0xc4>
    cffc:	e3520002 	cmp	r2, #2
    d000:	e59f4020 	ldr	r4, [pc, #32]	; d028 <CMachineInfo::GetClockRate(unsigned int) const+0xc8>
    d004:	81a04003 	movhi	r4, r3
    d008:	eaffffee 	b	cfc8 <CMachineInfo::GetClockRate(unsigned int) const+0x68>
    d00c:	00030002 	.word	0x00030002
    d010:	00000119 	.word	0x00000119
    d014:	00014174 	.word	0x00014174
    d018:	00013e94 	.word	0x00013e94
    d01c:	02dc6c00 	.word	0x02dc6c00
    d020:	05f5e100 	.word	0x05f5e100
    d024:	11e1a300 	.word	0x11e1a300
    d028:	0ee6b280 	.word	0x0ee6b280

0000d02c <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>:
    d02c:	e3510036 	cmp	r1, #54	; 0x36
    d030:	0a00000d 	beq	d06c <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x40>
    d034:	e3510037 	cmp	r1, #55	; 0x37
    d038:	1a000004 	bne	d050 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x24>
    d03c:	e5d00004 	ldrb	r0, [r0, #4]
    d040:	e3500003 	cmp	r0, #3
    d044:	c3a00028 	movgt	r0, #40	; 0x28
    d048:	d3a0002d 	movle	r0, #45	; 0x2d
    d04c:	e12fff1e 	bx	lr
    d050:	e92d4010 	push	{r4, lr}
    d054:	e59f2038 	ldr	r2, [pc, #56]	; d094 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x68>
    d058:	e59f1038 	ldr	r1, [pc, #56]	; d098 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x6c>
    d05c:	e59f0038 	ldr	r0, [pc, #56]	; d09c <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x70>
    d060:	eb00150b 	bl	12494 <assertion_failed>
    d064:	e3a00000 	mov	r0, #0
    d068:	e8bd8010 	pop	{r4, pc}
    d06c:	e5d03004 	ldrb	r3, [r0, #4]
    d070:	e3530003 	cmp	r3, #3
    d074:	ca000001 	bgt	d080 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x54>
    d078:	e3a00028 	mov	r0, #40	; 0x28
    d07c:	e12fff1e 	bx	lr
    d080:	e5900008 	ldr	r0, [r0, #8]
    d084:	e3500002 	cmp	r0, #2
    d088:	93a0002d 	movls	r0, #45	; 0x2d
    d08c:	83a00029 	movhi	r0, #41	; 0x29
    d090:	e12fff1e 	bx	lr
    d094:	00000152 	.word	0x00000152
    d098:	00014174 	.word	0x00014174
    d09c:	00013e94 	.word	0x00013e94

0000d0a0 <CMachineInfo::GetDevice(TDeviceId) const>:
    d0a0:	e3510000 	cmp	r1, #0
    d0a4:	1a000003 	bne	d0b8 <CMachineInfo::GetDevice(TDeviceId) const+0x18>
    d0a8:	e5d00004 	ldrb	r0, [r0, #4]
    d0ac:	e2500001 	subs	r0, r0, #1
    d0b0:	13a00001 	movne	r0, #1
    d0b4:	e12fff1e 	bx	lr
    d0b8:	e92d4010 	push	{r4, lr}
    d0bc:	e59f2010 	ldr	r2, [pc, #16]	; d0d4 <CMachineInfo::GetDevice(TDeviceId) const+0x34>
    d0c0:	e59f1010 	ldr	r1, [pc, #16]	; d0d8 <CMachineInfo::GetDevice(TDeviceId) const+0x38>
    d0c4:	e59f0010 	ldr	r0, [pc, #16]	; d0dc <CMachineInfo::GetDevice(TDeviceId) const+0x3c>
    d0c8:	eb0014f1 	bl	12494 <assertion_failed>
    d0cc:	e3a00000 	mov	r0, #0
    d0d0:	e8bd8010 	pop	{r4, pc}
    d0d4:	0000016b 	.word	0x0000016b
    d0d8:	00014174 	.word	0x00014174
    d0dc:	00013e94 	.word	0x00013e94

0000d0e0 <CMachineInfo::Get()>:
    d0e0:	e92d4010 	push	{r4, lr}
    d0e4:	e59f4020 	ldr	r4, [pc, #32]	; d10c <CMachineInfo::Get()+0x2c>
    d0e8:	e5940000 	ldr	r0, [r4]
    d0ec:	e3500000 	cmp	r0, #0
    d0f0:	18bd8010 	popne	{r4, pc}
    d0f4:	e3a02f5d 	mov	r2, #372	; 0x174
    d0f8:	e59f1010 	ldr	r1, [pc, #16]	; d110 <CMachineInfo::Get()+0x30>
    d0fc:	e59f0010 	ldr	r0, [pc, #16]	; d114 <CMachineInfo::Get()+0x34>
    d100:	eb0014e3 	bl	12494 <assertion_failed>
    d104:	e5940000 	ldr	r0, [r4]
    d108:	e8bd8010 	pop	{r4, pc}
    d10c:	00015aac 	.word	0x00015aac
    d110:	00014174 	.word	0x00014174
    d114:	00013ec4 	.word	0x00013ec4

0000d118 <CScreenDevice::~CScreenDevice()>:
    d118:	e5d0200c 	ldrb	r2, [r0, #12]
    d11c:	e59f3068 	ldr	r3, [pc, #104]	; d18c <CScreenDevice::~CScreenDevice()+0x74>
    d120:	e3520000 	cmp	r2, #0
    d124:	e92d4070 	push	{r4, r5, r6, lr}
    d128:	e1a04000 	mov	r4, r0
    d12c:	e5803000 	str	r3, [r0]
    d130:	0a000003 	beq	d144 <CScreenDevice::~CScreenDevice()+0x2c>
    d134:	e5900018 	ldr	r0, [r0, #24]
    d138:	e3500000 	cmp	r0, #0
    d13c:	0a000000 	beq	d144 <CScreenDevice::~CScreenDevice()+0x2c>
    d140:	eb001348 	bl	11e68 <operator delete[](void*)>
    d144:	e3a03000 	mov	r3, #0
    d148:	e5945010 	ldr	r5, [r4, #16]
    d14c:	e5843018 	str	r3, [r4, #24]
    d150:	e1550003 	cmp	r5, r3
    d154:	0a000004 	beq	d16c <CScreenDevice::~CScreenDevice()+0x54>
    d158:	e1a00005 	mov	r0, r5
    d15c:	eb00156d 	bl	12718 <CBcmFrameBuffer::~CBcmFrameBuffer()>
    d160:	e1a00005 	mov	r0, r5
    d164:	e3a01094 	mov	r1, #148	; 0x94
    d168:	eb00133f 	bl	11e6c <operator delete(void*, unsigned int)>
    d16c:	e3a03000 	mov	r3, #0
    d170:	e2840014 	add	r0, r4, #20
    d174:	e5843010 	str	r3, [r4, #16]
    d178:	eb00166e 	bl	12b38 <CCharGenerator::~CCharGenerator()>
    d17c:	e1a00004 	mov	r0, r4
    d180:	eb001705 	bl	12d9c <CDevice::~CDevice()>
    d184:	e1a00004 	mov	r0, r4
    d188:	e8bd8070 	pop	{r4, r5, r6, pc}
    d18c:	000142c8 	.word	0x000142c8

0000d190 <CScreenDevice::~CScreenDevice()>:
    d190:	e92d4010 	push	{r4, lr}
    d194:	e1a04000 	mov	r4, r0
    d198:	ebffffde 	bl	d118 <CScreenDevice::~CScreenDevice()>
    d19c:	e1a00004 	mov	r0, r4
    d1a0:	e3a0105c 	mov	r1, #92	; 0x5c
    d1a4:	eb001330 	bl	11e6c <operator delete(void*, unsigned int)>
    d1a8:	e1a00004 	mov	r0, r4
    d1ac:	e8bd8010 	pop	{r4, pc}

0000d1b0 <CScreenDevice::InvertCursor() [clone .part.6]>:
    d1b0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d1b4:	e2806014 	add	r6, r0, #20
    d1b8:	e1a05000 	mov	r5, r0
    d1bc:	e1a00006 	mov	r0, r6
    d1c0:	eb001661 	bl	12b4c <CCharGenerator::GetUnderline() const>
    d1c4:	e3a08000 	mov	r8, #0
    d1c8:	e1a07000 	mov	r7, r0
    d1cc:	e1a00006 	mov	r0, r6
    d1d0:	eb00165b 	bl	12b44 <CCharGenerator::GetCharHeight() const>
    d1d4:	e1500007 	cmp	r0, r7
    d1d8:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
    d1dc:	e3a04000 	mov	r4, #0
    d1e0:	ea000013 	b	d234 <CScreenDevice::InvertCursor() [clone .part.6]+0x84>
    d1e4:	e595303c 	ldr	r3, [r5, #60]	; 0x3c
    d1e8:	e5952024 	ldr	r2, [r5, #36]	; 0x24
    d1ec:	e0843003 	add	r3, r4, r3
    d1f0:	e1530002 	cmp	r3, r2
    d1f4:	2a00000d 	bcs	d230 <CScreenDevice::InvertCursor() [clone .part.6]+0x80>
    d1f8:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    d1fc:	e5951028 	ldr	r1, [r5, #40]	; 0x28
    d200:	e0872002 	add	r2, r7, r2
    d204:	e1520001 	cmp	r2, r1
    d208:	2a000008 	bcs	d230 <CScreenDevice::InvertCursor() [clone .part.6]+0x80>
    d20c:	e5950020 	ldr	r0, [r5, #32]
    d210:	e5951018 	ldr	r1, [r5, #24]
    d214:	e0233290 	mla	r3, r0, r2, r3
    d218:	e1a03083 	lsl	r3, r3, #1
    d21c:	e19120b3 	ldrh	r2, [r1, r3]
    d220:	e3520000 	cmp	r2, #0
    d224:	01d524b6 	ldrheq	r2, [r5, #70]	; 0x46
    d228:	118180b3 	strhne	r8, [r1, r3]
    d22c:	018120b3 	strheq	r2, [r1, r3]
    d230:	e2844001 	add	r4, r4, #1
    d234:	e1a00006 	mov	r0, r6
    d238:	eb00163f 	bl	12b3c <CCharGenerator::GetCharWidth() const>
    d23c:	e1500004 	cmp	r0, r4
    d240:	8affffe7 	bhi	d1e4 <CScreenDevice::InvertCursor() [clone .part.6]+0x34>
    d244:	e2877001 	add	r7, r7, #1
    d248:	eaffffdf 	b	d1cc <CScreenDevice::InvertCursor() [clone .part.6]+0x1c>

0000d24c <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool)>:
    d24c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d250:	e1a04000 	mov	r4, r0
    d254:	e3a05000 	mov	r5, #0
    d258:	e1a07002 	mov	r7, r2
    d25c:	e1a06003 	mov	r6, r3
    d260:	e1a08001 	mov	r8, r1
    d264:	eb0016d8 	bl	12dcc <CDevice::CDevice()>
    d268:	e59f0050 	ldr	r0, [pc, #80]	; d2c0 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool)+0x74>
    d26c:	e5848004 	str	r8, [r4, #4]
    d270:	e5840000 	str	r0, [r4]
    d274:	e5847008 	str	r7, [r4, #8]
    d278:	e5c4600c 	strb	r6, [r4, #12]
    d27c:	e5845010 	str	r5, [r4, #16]
    d280:	e2840014 	add	r0, r4, #20
    d284:	eb001628 	bl	12b2c <CCharGenerator::CCharGenerator()>
    d288:	e3a03001 	mov	r3, #1
    d28c:	e3e02020 	mvn	r2, #32
    d290:	e5845018 	str	r5, [r4, #24]
    d294:	e5845030 	str	r5, [r4, #48]	; 0x30
    d298:	e5845034 	str	r5, [r4, #52]	; 0x34
    d29c:	e584503c 	str	r5, [r4, #60]	; 0x3c
    d2a0:	e5845040 	str	r5, [r4, #64]	; 0x40
    d2a4:	e5c45048 	strb	r5, [r4, #72]	; 0x48
    d2a8:	e5c45054 	strb	r5, [r4, #84]	; 0x54
    d2ac:	e1c424b6 	strh	r2, [r4, #70]	; 0x46
    d2b0:	e5c43044 	strb	r3, [r4, #68]	; 0x44
    d2b4:	e5843058 	str	r3, [r4, #88]	; 0x58
    d2b8:	e1a00004 	mov	r0, r4
    d2bc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    d2c0:	000142c8 	.word	0x000142c8

0000d2c4 <CScreenDevice::GetWidth() const>:
    d2c4:	e5900024 	ldr	r0, [r0, #36]	; 0x24
    d2c8:	e12fff1e 	bx	lr

0000d2cc <CScreenDevice::GetHeight() const>:
    d2cc:	e5900028 	ldr	r0, [r0, #40]	; 0x28
    d2d0:	e12fff1e 	bx	lr

0000d2d4 <CScreenDevice::GetColumns() const>:
    d2d4:	e92d4010 	push	{r4, lr}
    d2d8:	e2800014 	add	r0, r0, #20
    d2dc:	e5904010 	ldr	r4, [r0, #16]
    d2e0:	eb001615 	bl	12b3c <CCharGenerator::GetCharWidth() const>
    d2e4:	e1a01000 	mov	r1, r0
    d2e8:	e1a00004 	mov	r0, r4
    d2ec:	eb00197a 	bl	138dc <__aeabi_uidiv>
    d2f0:	e8bd8010 	pop	{r4, pc}

0000d2f4 <CScreenDevice::GetRows() const>:
    d2f4:	e92d4010 	push	{r4, lr}
    d2f8:	e2800014 	add	r0, r0, #20
    d2fc:	e5904018 	ldr	r4, [r0, #24]
    d300:	eb00160f 	bl	12b44 <CCharGenerator::GetCharHeight() const>
    d304:	e1a01000 	mov	r1, r0
    d308:	e1a00004 	mov	r0, r4
    d30c:	eb001972 	bl	138dc <__aeabi_uidiv>
    d310:	e8bd8010 	pop	{r4, pc}

0000d314 <CScreenDevice::GetStatus()>:
    d314:	e591c018 	ldr	ip, [r1, #24]
    d318:	e591201c 	ldr	r2, [r1, #28]
    d31c:	e92d4070 	push	{r4, r5, r6, lr}
    d320:	e580c000 	str	ip, [r0]
    d324:	e5915030 	ldr	r5, [r1, #48]	; 0x30
    d328:	e5914034 	ldr	r4, [r1, #52]	; 0x34
    d32c:	e591e038 	ldr	lr, [r1, #56]	; 0x38
    d330:	e591c03c 	ldr	ip, [r1, #60]	; 0x3c
    d334:	e5802004 	str	r2, [r0, #4]
    d338:	e5912040 	ldr	r2, [r1, #64]	; 0x40
    d33c:	e5805008 	str	r5, [r0, #8]
    d340:	e5d16044 	ldrb	r6, [r1, #68]	; 0x44
    d344:	e580400c 	str	r4, [r0, #12]
    d348:	e1d154b6 	ldrh	r5, [r1, #70]	; 0x46
    d34c:	e580e010 	str	lr, [r0, #16]
    d350:	e5d14048 	ldrb	r4, [r1, #72]	; 0x48
    d354:	e580c014 	str	ip, [r0, #20]
    d358:	e591e04c 	ldr	lr, [r1, #76]	; 0x4c
    d35c:	e5802018 	str	r2, [r0, #24]
    d360:	e591c050 	ldr	ip, [r1, #80]	; 0x50
    d364:	e5d12054 	ldrb	r2, [r1, #84]	; 0x54
    d368:	e5c0601c 	strb	r6, [r0, #28]
    d36c:	e1c051be 	strh	r5, [r0, #30]
    d370:	e5c04020 	strb	r4, [r0, #32]
    d374:	e580e024 	str	lr, [r0, #36]	; 0x24
    d378:	e580c028 	str	ip, [r0, #40]	; 0x28
    d37c:	e5c0202c 	strb	r2, [r0, #44]	; 0x2c
    d380:	e8bd8070 	pop	{r4, r5, r6, pc}

0000d384 <CScreenDevice::SetStatus(TScreenStatus const&)>:
    d384:	e590201c 	ldr	r2, [r0, #28]
    d388:	e5913004 	ldr	r3, [r1, #4]
    d38c:	e1520003 	cmp	r2, r3
    d390:	0a000001 	beq	d39c <CScreenDevice::SetStatus(TScreenStatus const&)+0x18>
    d394:	e3a00000 	mov	r0, #0
    d398:	e12fff1e 	bx	lr
    d39c:	e590c020 	ldr	ip, [r0, #32]
    d3a0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    d3a4:	e15c0003 	cmp	ip, r3
    d3a8:	1afffff9 	bne	d394 <CScreenDevice::SetStatus(TScreenStatus const&)+0x10>
    d3ac:	e92d4070 	push	{r4, r5, r6, lr}
    d3b0:	e1a04000 	mov	r4, r0
    d3b4:	e5900058 	ldr	r0, [r0, #88]	; 0x58
    d3b8:	e1a05001 	mov	r5, r1
    d3bc:	e3500000 	cmp	r0, #0
    d3c0:	1a000023 	bne	d454 <CScreenDevice::SetStatus(TScreenStatus const&)+0xd0>
    d3c4:	e5d43054 	ldrb	r3, [r4, #84]	; 0x54
    d3c8:	e3530000 	cmp	r3, #0
    d3cc:	1a000002 	bne	d3dc <CScreenDevice::SetStatus(TScreenStatus const&)+0x58>
    d3d0:	e5d1302c 	ldrb	r3, [r1, #44]	; 0x2c
    d3d4:	e3530000 	cmp	r3, #0
    d3d8:	0a000001 	beq	d3e4 <CScreenDevice::SetStatus(TScreenStatus const&)+0x60>
    d3dc:	e3a00000 	mov	r0, #0
    d3e0:	e8bd8070 	pop	{r4, r5, r6, pc}
    d3e4:	e5951000 	ldr	r1, [r5]
    d3e8:	e5940018 	ldr	r0, [r4, #24]
    d3ec:	eb00104e 	bl	1152c <memcpy>
    d3f0:	e5940058 	ldr	r0, [r4, #88]	; 0x58
    d3f4:	e2851008 	add	r1, r5, #8
    d3f8:	e891004e 	ldm	r1, {r1, r2, r3, r6}
    d3fc:	e595e018 	ldr	lr, [r5, #24]
    d400:	e5d5c01c 	ldrb	ip, [r5, #28]
    d404:	e3500000 	cmp	r0, #0
    d408:	e5841030 	str	r1, [r4, #48]	; 0x30
    d40c:	e1d501be 	ldrh	r0, [r5, #30]
    d410:	e5d51020 	ldrb	r1, [r5, #32]
    d414:	e5842034 	str	r2, [r4, #52]	; 0x34
    d418:	e5843038 	str	r3, [r4, #56]	; 0x38
    d41c:	e5952024 	ldr	r2, [r5, #36]	; 0x24
    d420:	e5953028 	ldr	r3, [r5, #40]	; 0x28
    d424:	e584603c 	str	r6, [r4, #60]	; 0x3c
    d428:	e584e040 	str	lr, [r4, #64]	; 0x40
    d42c:	e5c4c044 	strb	ip, [r4, #68]	; 0x44
    d430:	e1c404b6 	strh	r0, [r4, #70]	; 0x46
    d434:	e5c41048 	strb	r1, [r4, #72]	; 0x48
    d438:	e584204c 	str	r2, [r4, #76]	; 0x4c
    d43c:	e5843050 	str	r3, [r4, #80]	; 0x50
    d440:	1a000010 	bne	d488 <CScreenDevice::SetStatus(TScreenStatus const&)+0x104>
    d444:	e3a03000 	mov	r3, #0
    d448:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    d44c:	e3a00001 	mov	r0, #1
    d450:	e8bd8070 	pop	{r4, r5, r6, pc}
    d454:	eb001226 	bl	11cf4 <EnterCritical>
    d458:	e5d43054 	ldrb	r3, [r4, #84]	; 0x54
    d45c:	e3530000 	cmp	r3, #0
    d460:	1a000003 	bne	d474 <CScreenDevice::SetStatus(TScreenStatus const&)+0xf0>
    d464:	e5d5302c 	ldrb	r3, [r5, #44]	; 0x2c
    d468:	e3530000 	cmp	r3, #0
    d46c:	0594201c 	ldreq	r2, [r4, #28]
    d470:	0affffdb 	beq	d3e4 <CScreenDevice::SetStatus(TScreenStatus const&)+0x60>
    d474:	e5943058 	ldr	r3, [r4, #88]	; 0x58
    d478:	e3530000 	cmp	r3, #0
    d47c:	0affffd6 	beq	d3dc <CScreenDevice::SetStatus(TScreenStatus const&)+0x58>
    d480:	eb001248 	bl	11da8 <LeaveCritical>
    d484:	eaffffd4 	b	d3dc <CScreenDevice::SetStatus(TScreenStatus const&)+0x58>
    d488:	eb001246 	bl	11da8 <LeaveCritical>
    d48c:	eaffffec 	b	d444 <CScreenDevice::SetStatus(TScreenStatus const&)+0xc0>

0000d490 <CScreenDevice::CarriageReturn()>:
    d490:	e3a03000 	mov	r3, #0
    d494:	e580303c 	str	r3, [r0, #60]	; 0x3c
    d498:	e12fff1e 	bx	lr

0000d49c <CScreenDevice::CursorHome()>:
    d49c:	e3a02000 	mov	r2, #0
    d4a0:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    d4a4:	e580203c 	str	r2, [r0, #60]	; 0x3c
    d4a8:	e5803040 	str	r3, [r0, #64]	; 0x40
    d4ac:	e12fff1e 	bx	lr

0000d4b0 <CScreenDevice::CursorLeft()>:
    d4b0:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    d4b4:	e92d4070 	push	{r4, r5, r6, lr}
    d4b8:	e3530000 	cmp	r3, #0
    d4bc:	e1a04000 	mov	r4, r0
    d4c0:	1a00000f 	bne	d504 <CScreenDevice::CursorLeft()+0x54>
    d4c4:	e5902040 	ldr	r2, [r0, #64]	; 0x40
    d4c8:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    d4cc:	e1520003 	cmp	r2, r3
    d4d0:	98bd8070 	popls	{r4, r5, r6, pc}
    d4d4:	e2806014 	add	r6, r0, #20
    d4d8:	e1a00006 	mov	r0, r6
    d4dc:	e5945024 	ldr	r5, [r4, #36]	; 0x24
    d4e0:	eb001595 	bl	12b3c <CCharGenerator::GetCharWidth() const>
    d4e4:	e0450000 	sub	r0, r5, r0
    d4e8:	e584003c 	str	r0, [r4, #60]	; 0x3c
    d4ec:	e1a00006 	mov	r0, r6
    d4f0:	eb001593 	bl	12b44 <CCharGenerator::GetCharHeight() const>
    d4f4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    d4f8:	e0430000 	sub	r0, r3, r0
    d4fc:	e5840040 	str	r0, [r4, #64]	; 0x40
    d500:	e8bd8070 	pop	{r4, r5, r6, pc}
    d504:	e2800014 	add	r0, r0, #20
    d508:	eb00158b 	bl	12b3c <CCharGenerator::GetCharWidth() const>
    d50c:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    d510:	e0430000 	sub	r0, r3, r0
    d514:	e584003c 	str	r0, [r4, #60]	; 0x3c
    d518:	e8bd8070 	pop	{r4, r5, r6, pc}

0000d51c <CScreenDevice::CursorMove(unsigned int, unsigned int)>:
    d51c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d520:	e2806014 	add	r6, r0, #20
    d524:	e1a04002 	mov	r4, r2
    d528:	e1a05000 	mov	r5, r0
    d52c:	e1a00006 	mov	r0, r6
    d530:	e1a07001 	mov	r7, r1
    d534:	eb001580 	bl	12b3c <CCharGenerator::GetCharWidth() const>
    d538:	e2444001 	sub	r4, r4, #1
    d53c:	e0040490 	mul	r4, r0, r4
    d540:	e1a00006 	mov	r0, r6
    d544:	eb00157e 	bl	12b44 <CCharGenerator::GetCharHeight() const>
    d548:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    d54c:	e1540003 	cmp	r4, r3
    d550:	28bd81f0 	popcs	{r4, r5, r6, r7, r8, pc}
    d554:	e2477001 	sub	r7, r7, #1
    d558:	e0000790 	mul	r0, r0, r7
    d55c:	e5953034 	ldr	r3, [r5, #52]	; 0x34
    d560:	e1500003 	cmp	r0, r3
    d564:	38bd81f0 	popcc	{r4, r5, r6, r7, r8, pc}
    d568:	e5953038 	ldr	r3, [r5, #56]	; 0x38
    d56c:	e1500003 	cmp	r0, r3
    d570:	3585403c 	strcc	r4, [r5, #60]	; 0x3c
    d574:	35850040 	strcc	r0, [r5, #64]	; 0x40
    d578:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000d57c <CScreenDevice::CursorUp()>:
    d57c:	e5902040 	ldr	r2, [r0, #64]	; 0x40
    d580:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    d584:	e1520003 	cmp	r2, r3
    d588:	912fff1e 	bxls	lr
    d58c:	e92d4010 	push	{r4, lr}
    d590:	e1a04000 	mov	r4, r0
    d594:	e2800014 	add	r0, r0, #20
    d598:	eb001569 	bl	12b44 <CCharGenerator::GetCharHeight() const>
    d59c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    d5a0:	e0430000 	sub	r0, r3, r0
    d5a4:	e5840040 	str	r0, [r4, #64]	; 0x40
    d5a8:	e8bd8010 	pop	{r4, pc}

0000d5ac <CScreenDevice::DeleteChars(unsigned int)>:
    d5ac:	e12fff1e 	bx	lr

0000d5b0 <CScreenDevice::DeleteLines(unsigned int)>:
    d5b0:	e12fff1e 	bx	lr

0000d5b4 <CScreenDevice::InsertLines(unsigned int)>:
    d5b4:	e12fff1e 	bx	lr

0000d5b8 <CScreenDevice::InsertMode(bool)>:
    d5b8:	e5c01048 	strb	r1, [r0, #72]	; 0x48
    d5bc:	e12fff1e 	bx	lr

0000d5c0 <CScreenDevice::ReverseScroll()>:
    d5c0:	e12fff1e 	bx	lr

0000d5c4 <CScreenDevice::SetCursorMode(bool)>:
    d5c4:	e5c01044 	strb	r1, [r0, #68]	; 0x44
    d5c8:	e12fff1e 	bx	lr

0000d5cc <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>:
    d5cc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d5d0:	e2807014 	add	r7, r0, #20
    d5d4:	e1a06000 	mov	r6, r0
    d5d8:	e1a04001 	mov	r4, r1
    d5dc:	e1a00007 	mov	r0, r7
    d5e0:	e1a05002 	mov	r5, r2
    d5e4:	eb001556 	bl	12b44 <CCharGenerator::GetCharHeight() const>
    d5e8:	e2444001 	sub	r4, r4, #1
    d5ec:	e0040490 	mul	r4, r0, r4
    d5f0:	e1a00007 	mov	r0, r7
    d5f4:	eb001552 	bl	12b44 <CCharGenerator::GetCharHeight() const>
    d5f8:	e0000095 	mul	r0, r5, r0
    d5fc:	e596202c 	ldr	r2, [r6, #44]	; 0x2c
    d600:	e3500000 	cmp	r0, #0
    d604:	11540002 	cmpne	r4, r2
    d608:	33a03001 	movcc	r3, #1
    d60c:	23a03000 	movcs	r3, #0
    d610:	e1500002 	cmp	r0, r2
    d614:	83a03000 	movhi	r3, #0
    d618:	92033001 	andls	r3, r3, #1
    d61c:	e1540000 	cmp	r4, r0
    d620:	23a03000 	movcs	r3, #0
    d624:	32033001 	andcc	r3, r3, #1
    d628:	e3530000 	cmp	r3, #0
    d62c:	e3a03000 	mov	r3, #0
    d630:	05964034 	ldreq	r4, [r6, #52]	; 0x34
    d634:	15864034 	strne	r4, [r6, #52]	; 0x34
    d638:	15860038 	strne	r0, [r6, #56]	; 0x38
    d63c:	e5864040 	str	r4, [r6, #64]	; 0x40
    d640:	e586303c 	str	r3, [r6, #60]	; 0x3c
    d644:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000d648 <CScreenDevice::SetStandoutMode(unsigned int)>:
    d648:	e351001b 	cmp	r1, #27
    d64c:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
    d650:	ea00001d 	b	d6cc <CScreenDevice::SetStandoutMode(unsigned int)+0x84>
    d654:	0000d6dc 	.word	0x0000d6dc
    d658:	0000d6d0 	.word	0x0000d6d0
    d65c:	0000d6c4 	.word	0x0000d6c4
    d660:	0000d6cc 	.word	0x0000d6cc
    d664:	0000d6cc 	.word	0x0000d6cc
    d668:	0000d6cc 	.word	0x0000d6cc
    d66c:	0000d6cc 	.word	0x0000d6cc
    d670:	0000d6cc 	.word	0x0000d6cc
    d674:	0000d6cc 	.word	0x0000d6cc
    d678:	0000d6cc 	.word	0x0000d6cc
    d67c:	0000d6cc 	.word	0x0000d6cc
    d680:	0000d6cc 	.word	0x0000d6cc
    d684:	0000d6cc 	.word	0x0000d6cc
    d688:	0000d6cc 	.word	0x0000d6cc
    d68c:	0000d6cc 	.word	0x0000d6cc
    d690:	0000d6cc 	.word	0x0000d6cc
    d694:	0000d6cc 	.word	0x0000d6cc
    d698:	0000d6cc 	.word	0x0000d6cc
    d69c:	0000d6cc 	.word	0x0000d6cc
    d6a0:	0000d6cc 	.word	0x0000d6cc
    d6a4:	0000d6cc 	.word	0x0000d6cc
    d6a8:	0000d6cc 	.word	0x0000d6cc
    d6ac:	0000d6cc 	.word	0x0000d6cc
    d6b0:	0000d6cc 	.word	0x0000d6cc
    d6b4:	0000d6cc 	.word	0x0000d6cc
    d6b8:	0000d6cc 	.word	0x0000d6cc
    d6bc:	0000d6cc 	.word	0x0000d6cc
    d6c0:	0000d6dc 	.word	0x0000d6dc
    d6c4:	e3a0301f 	mov	r3, #31
    d6c8:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
    d6cc:	e12fff1e 	bx	lr
    d6d0:	e3a03b3e 	mov	r3, #63488	; 0xf800
    d6d4:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
    d6d8:	e12fff1e 	bx	lr
    d6dc:	e3e03020 	mvn	r3, #32
    d6e0:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
    d6e4:	e12fff1e 	bx	lr

0000d6e8 <CScreenDevice::Scroll()>:
    d6e8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    d6ec:	e1a07000 	mov	r7, r0
    d6f0:	e2800014 	add	r0, r0, #20
    d6f4:	eb001512 	bl	12b44 <CCharGenerator::GetCharHeight() const>
    d6f8:	e5973034 	ldr	r3, [r7, #52]	; 0x34
    d6fc:	e5974038 	ldr	r4, [r7, #56]	; 0x38
    d700:	e5975020 	ldr	r5, [r7, #32]
    d704:	e0444003 	sub	r4, r4, r3
    d708:	e1a02085 	lsl	r2, r5, #1
    d70c:	e0444000 	sub	r4, r4, r0
    d710:	e0040492 	mul	r4, r2, r4
    d714:	e0050395 	mul	r5, r5, r3
    d718:	e5978018 	ldr	r8, [r7, #24]
    d71c:	e3540000 	cmp	r4, #0
    d720:	e1a06000 	mov	r6, r0
    d724:	e0885085 	add	r5, r8, r5, lsl #1
    d728:	1a000007 	bne	d74c <CScreenDevice::Scroll()+0x64>
    d72c:	e0020692 	mul	r2, r2, r6
    d730:	e1b02122 	lsrs	r2, r2, #2
    d734:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    d738:	e1a00005 	mov	r0, r5
    d73c:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    d740:	e1a02102 	lsl	r2, r2, #2
    d744:	e3a01000 	mov	r1, #0
    d748:	ea000e05 	b	10f64 <memset>
    d74c:	e0803003 	add	r3, r0, r3
    d750:	e0288392 	mla	r8, r2, r3, r8
    d754:	e3c4900f 	bic	r9, r4, #15
    d758:	e1a01008 	mov	r1, r8
    d75c:	e1a02009 	mov	r2, r9
    d760:	e1a00005 	mov	r0, r5
    d764:	eb000f70 	bl	1152c <memcpy>
    d768:	e204200e 	and	r2, r4, #14
    d76c:	e0850009 	add	r0, r5, r9
    d770:	e0881009 	add	r1, r8, r9
    d774:	eb000f6c 	bl	1152c <memcpy>
    d778:	e5972020 	ldr	r2, [r7, #32]
    d77c:	e3c44003 	bic	r4, r4, #3
    d780:	e1a02082 	lsl	r2, r2, #1
    d784:	e0855004 	add	r5, r5, r4
    d788:	eaffffe7 	b	d72c <CScreenDevice::Scroll()+0x44>

0000d78c <CScreenDevice::CursorDown()>:
    d78c:	e92d4070 	push	{r4, r5, r6, lr}
    d790:	e1a04000 	mov	r4, r0
    d794:	e2805014 	add	r5, r0, #20
    d798:	e1a00005 	mov	r0, r5
    d79c:	eb0014e8 	bl	12b44 <CCharGenerator::GetCharHeight() const>
    d7a0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    d7a4:	e5942038 	ldr	r2, [r4, #56]	; 0x38
    d7a8:	e0800003 	add	r0, r0, r3
    d7ac:	e1500002 	cmp	r0, r2
    d7b0:	e5840040 	str	r0, [r4, #64]	; 0x40
    d7b4:	38bd8070 	popcc	{r4, r5, r6, pc}
    d7b8:	e1a00004 	mov	r0, r4
    d7bc:	ebffffc9 	bl	d6e8 <CScreenDevice::Scroll()>
    d7c0:	e1a00005 	mov	r0, r5
    d7c4:	eb0014de 	bl	12b44 <CCharGenerator::GetCharHeight() const>
    d7c8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    d7cc:	e0430000 	sub	r0, r3, r0
    d7d0:	e5840040 	str	r0, [r4, #64]	; 0x40
    d7d4:	e8bd8070 	pop	{r4, r5, r6, pc}

0000d7d8 <CScreenDevice::NewLine()>:
    d7d8:	e3a02000 	mov	r2, #0
    d7dc:	e580203c 	str	r2, [r0, #60]	; 0x3c
    d7e0:	eaffffe9 	b	d78c <CScreenDevice::CursorDown()>

0000d7e4 <CScreenDevice::CursorRight()>:
    d7e4:	e92d4010 	push	{r4, lr}
    d7e8:	e1a04000 	mov	r4, r0
    d7ec:	e2800014 	add	r0, r0, #20
    d7f0:	eb0014d1 	bl	12b3c <CCharGenerator::GetCharWidth() const>
    d7f4:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    d7f8:	e5942024 	ldr	r2, [r4, #36]	; 0x24
    d7fc:	e0800003 	add	r0, r0, r3
    d800:	e1500002 	cmp	r0, r2
    d804:	e584003c 	str	r0, [r4, #60]	; 0x3c
    d808:	38bd8010 	popcc	{r4, pc}
    d80c:	e3a03000 	mov	r3, #0
    d810:	e1a00004 	mov	r0, r4
    d814:	e584303c 	str	r3, [r4, #60]	; 0x3c
    d818:	e8bd4010 	pop	{r4, lr}
    d81c:	eaffffda 	b	d78c <CScreenDevice::CursorDown()>

0000d820 <CScreenDevice::Tabulator()>:
    d820:	e92d4070 	push	{r4, r5, r6, lr}
    d824:	e1a05000 	mov	r5, r0
    d828:	e2800014 	add	r0, r0, #20
    d82c:	eb0014c2 	bl	12b3c <CCharGenerator::GetCharWidth() const>
    d830:	e595303c 	ldr	r3, [r5, #60]	; 0x3c
    d834:	e1a04180 	lsl	r4, r0, #3
    d838:	e0840003 	add	r0, r4, r3
    d83c:	e1a01004 	mov	r1, r4
    d840:	eb001825 	bl	138dc <__aeabi_uidiv>
    d844:	e0000094 	mul	r0, r4, r0
    d848:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    d84c:	e585003c 	str	r0, [r5, #60]	; 0x3c
    d850:	e1500003 	cmp	r0, r3
    d854:	38bd8070 	popcc	{r4, r5, r6, pc}
    d858:	e3a03000 	mov	r3, #0
    d85c:	e1a00005 	mov	r0, r5
    d860:	e585303c 	str	r3, [r5, #60]	; 0x3c
    d864:	e8bd4070 	pop	{r4, r5, r6, lr}
    d868:	eaffffc7 	b	d78c <CScreenDevice::CursorDown()>

0000d86c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>:
    d86c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d870:	e2806014 	add	r6, r0, #20
    d874:	e24dd00c 	sub	sp, sp, #12
    d878:	e1a07000 	mov	r7, r0
    d87c:	e1a00006 	mov	r0, r6
    d880:	e1a0a001 	mov	sl, r1
    d884:	e1a09002 	mov	r9, r2
    d888:	e58d3004 	str	r3, [sp, #4]
    d88c:	e3a08000 	mov	r8, #0
    d890:	e1ddb3b0 	ldrh	fp, [sp, #48]	; 0x30
    d894:	eb0014aa 	bl	12b44 <CCharGenerator::GetCharHeight() const>
    d898:	e1580000 	cmp	r8, r0
    d89c:	2a000025 	bcs	d938 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xcc>
    d8a0:	e59d3004 	ldr	r3, [sp, #4]
    d8a4:	e3a04000 	mov	r4, #0
    d8a8:	e0883003 	add	r3, r8, r3
    d8ac:	e58d3000 	str	r3, [sp]
    d8b0:	ea000000 	b	d8b8 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x4c>
    d8b4:	e2844001 	add	r4, r4, #1
    d8b8:	e1a00006 	mov	r0, r6
    d8bc:	eb00149e 	bl	12b3c <CCharGenerator::GetCharWidth() const>
    d8c0:	e1540000 	cmp	r4, r0
    d8c4:	e0845009 	add	r5, r4, r9
    d8c8:	2a000015 	bcs	d924 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xb8>
    d8cc:	e1a03008 	mov	r3, r8
    d8d0:	e1a02004 	mov	r2, r4
    d8d4:	e1a0100a 	mov	r1, sl
    d8d8:	e1a00006 	mov	r0, r6
    d8dc:	eb00149c 	bl	12b54 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>
    d8e0:	e5973024 	ldr	r3, [r7, #36]	; 0x24
    d8e4:	e3500000 	cmp	r0, #0
    d8e8:	11a0000b 	movne	r0, fp
    d8ec:	03a00000 	moveq	r0, #0
    d8f0:	e1550003 	cmp	r5, r3
    d8f4:	2affffee 	bcs	d8b4 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x48>
    d8f8:	e5973028 	ldr	r3, [r7, #40]	; 0x28
    d8fc:	e59d2000 	ldr	r2, [sp]
    d900:	e1520003 	cmp	r2, r3
    d904:	2affffea 	bcs	d8b4 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x48>
    d908:	e5973020 	ldr	r3, [r7, #32]
    d90c:	e59d1000 	ldr	r1, [sp]
    d910:	e5972018 	ldr	r2, [r7, #24]
    d914:	e0255193 	mla	r5, r3, r1, r5
    d918:	e1a05085 	lsl	r5, r5, #1
    d91c:	e18200b5 	strh	r0, [r2, r5]
    d920:	eaffffe3 	b	d8b4 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x48>
    d924:	e1a00006 	mov	r0, r6
    d928:	eb001485 	bl	12b44 <CCharGenerator::GetCharHeight() const>
    d92c:	e2888001 	add	r8, r8, #1
    d930:	e1580000 	cmp	r8, r0
    d934:	3affffd9 	bcc	d8a0 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x34>
    d938:	e28dd00c 	add	sp, sp, #12
    d93c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000d940 <CScreenDevice::DisplayChar(char)>:
    d940:	e6ef3071 	uxtb	r3, r1
    d944:	e353001f 	cmp	r3, #31
    d948:	912fff1e 	bxls	lr
    d94c:	e92d4010 	push	{r4, lr}
    d950:	e1a04000 	mov	r4, r0
    d954:	e1d0c4b6 	ldrh	ip, [r0, #70]	; 0x46
    d958:	e24dd008 	sub	sp, sp, #8
    d95c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    d960:	e590203c 	ldr	r2, [r0, #60]	; 0x3c
    d964:	e58dc000 	str	ip, [sp]
    d968:	ebffffbf 	bl	d86c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
    d96c:	e1a00004 	mov	r0, r4
    d970:	e28dd008 	add	sp, sp, #8
    d974:	e8bd4010 	pop	{r4, lr}
    d978:	eaffff99 	b	d7e4 <CScreenDevice::CursorRight()>

0000d97c <CScreenDevice::EraseChar(unsigned int, unsigned int)>:
    d97c:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d980:	e3a08000 	mov	r8, #0
    d984:	e1a0b000 	mov	fp, r0
    d988:	e1a06001 	mov	r6, r1
    d98c:	e1a0a002 	mov	sl, r2
    d990:	e1a09008 	mov	r9, r8
    d994:	e2805014 	add	r5, r0, #20
    d998:	e1a00005 	mov	r0, r5
    d99c:	eb001468 	bl	12b44 <CCharGenerator::GetCharHeight() const>
    d9a0:	e1580000 	cmp	r8, r0
    d9a4:	28bd8ff8 	popcs	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d9a8:	e3a04000 	mov	r4, #0
    d9ac:	e088700a 	add	r7, r8, sl
    d9b0:	e1a00005 	mov	r0, r5
    d9b4:	eb001460 	bl	12b3c <CCharGenerator::GetCharWidth() const>
    d9b8:	e1540000 	cmp	r4, r0
    d9bc:	e0843006 	add	r3, r4, r6
    d9c0:	2a00000c 	bcs	d9f8 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x7c>
    d9c4:	e59b2024 	ldr	r2, [fp, #36]	; 0x24
    d9c8:	e2844001 	add	r4, r4, #1
    d9cc:	e1530002 	cmp	r3, r2
    d9d0:	2afffff6 	bcs	d9b0 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x34>
    d9d4:	e59b2028 	ldr	r2, [fp, #40]	; 0x28
    d9d8:	e1570002 	cmp	r7, r2
    d9dc:	2afffff3 	bcs	d9b0 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x34>
    d9e0:	e59b2020 	ldr	r2, [fp, #32]
    d9e4:	e59b1018 	ldr	r1, [fp, #24]
    d9e8:	e0233792 	mla	r3, r2, r7, r3
    d9ec:	e1a03083 	lsl	r3, r3, #1
    d9f0:	e18190b3 	strh	r9, [r1, r3]
    d9f4:	eaffffed 	b	d9b0 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x34>
    d9f8:	e2888001 	add	r8, r8, #1
    d9fc:	eaffffe5 	b	d998 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x1c>

0000da00 <CScreenDevice::ClearLineEnd()>:
    da00:	e92d4070 	push	{r4, r5, r6, lr}
    da04:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    da08:	e590403c 	ldr	r4, [r0, #60]	; 0x3c
    da0c:	e1540003 	cmp	r4, r3
    da10:	28bd8070 	popcs	{r4, r5, r6, pc}
    da14:	e1a05000 	mov	r5, r0
    da18:	e2806014 	add	r6, r0, #20
    da1c:	e1a01004 	mov	r1, r4
    da20:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    da24:	e1a00005 	mov	r0, r5
    da28:	ebffffd3 	bl	d97c <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    da2c:	e1a00006 	mov	r0, r6
    da30:	eb001441 	bl	12b3c <CCharGenerator::GetCharWidth() const>
    da34:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    da38:	e0844000 	add	r4, r4, r0
    da3c:	e1530004 	cmp	r3, r4
    da40:	8afffff5 	bhi	da1c <CScreenDevice::ClearLineEnd()+0x1c>
    da44:	e8bd8070 	pop	{r4, r5, r6, pc}

0000da48 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>:
    da48:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    da4c:	e1a05000 	mov	r5, r0
    da50:	e2807014 	add	r7, r0, #20
    da54:	e1a00007 	mov	r0, r7
    da58:	e1a06001 	mov	r6, r1
    da5c:	e595403c 	ldr	r4, [r5, #60]	; 0x3c
    da60:	eb001435 	bl	12b3c <CCharGenerator::GetCharWidth() const>
    da64:	e0204096 	mla	r0, r6, r0, r4
    da68:	e5956024 	ldr	r6, [r5, #36]	; 0x24
    da6c:	e595403c 	ldr	r4, [r5, #60]	; 0x3c
    da70:	e1500006 	cmp	r0, r6
    da74:	31a06000 	movcc	r6, r0
    da78:	e1540006 	cmp	r4, r6
    da7c:	28bd81f0 	popcs	{r4, r5, r6, r7, r8, pc}
    da80:	e1a01004 	mov	r1, r4
    da84:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    da88:	e1a00005 	mov	r0, r5
    da8c:	ebffffba 	bl	d97c <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    da90:	e1a00007 	mov	r0, r7
    da94:	eb001428 	bl	12b3c <CCharGenerator::GetCharWidth() const>
    da98:	e0844000 	add	r4, r4, r0
    da9c:	e1540006 	cmp	r4, r6
    daa0:	3afffff6 	bcc	da80 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]+0x38>
    daa4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000daa8 <CScreenDevice::EraseChars(unsigned int)>:
    daa8:	e3510000 	cmp	r1, #0
    daac:	012fff1e 	bxeq	lr
    dab0:	eaffffe4 	b	da48 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>

0000dab4 <CScreenDevice::ClearDisplayEnd()>:
    dab4:	e92d4070 	push	{r4, r5, r6, lr}
    dab8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    dabc:	e590403c 	ldr	r4, [r0, #60]	; 0x3c
    dac0:	e1a05000 	mov	r5, r0
    dac4:	e1540003 	cmp	r4, r3
    dac8:	e2806014 	add	r6, r0, #20
    dacc:	2a000009 	bcs	daf8 <CScreenDevice::ClearDisplayEnd()+0x44>
    dad0:	e1a01004 	mov	r1, r4
    dad4:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    dad8:	e1a00005 	mov	r0, r5
    dadc:	ebffffa6 	bl	d97c <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    dae0:	e1a00006 	mov	r0, r6
    dae4:	eb001414 	bl	12b3c <CCharGenerator::GetCharWidth() const>
    dae8:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    daec:	e0844000 	add	r4, r4, r0
    daf0:	e1530004 	cmp	r3, r4
    daf4:	8afffff5 	bhi	dad0 <CScreenDevice::ClearDisplayEnd()+0x1c>
    daf8:	e1a00006 	mov	r0, r6
    dafc:	e5954040 	ldr	r4, [r5, #64]	; 0x40
    db00:	eb00140f 	bl	12b44 <CCharGenerator::GetCharHeight() const>
    db04:	e5953020 	ldr	r3, [r5, #32]
    db08:	e0840000 	add	r0, r4, r0
    db0c:	e0000093 	mul	r0, r3, r0
    db10:	e595201c 	ldr	r2, [r5, #28]
    db14:	e5953018 	ldr	r3, [r5, #24]
    db18:	e07020a2 	rsbs	r2, r0, r2, lsr #1
    db1c:	0a000004 	beq	db34 <CScreenDevice::ClearDisplayEnd()+0x80>
    db20:	e8bd4070 	pop	{r4, r5, r6, lr}
    db24:	e1a02082 	lsl	r2, r2, #1
    db28:	e0830080 	add	r0, r3, r0, lsl #1
    db2c:	e3a01000 	mov	r1, #0
    db30:	ea000d0b 	b	10f64 <memset>
    db34:	e8bd8070 	pop	{r4, r5, r6, pc}

0000db38 <CScreenDevice::Write(char)>:
    db38:	e92d4010 	push	{r4, lr}
    db3c:	e5903030 	ldr	r3, [r0, #48]	; 0x30
    db40:	e24dd008 	sub	sp, sp, #8
    db44:	e1a04000 	mov	r4, r0
    db48:	e3530007 	cmp	r3, #7
    db4c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    db50:	ea000010 	b	db98 <CScreenDevice::Write(char)+0x60>
    db54:	0000dbe4 	.word	0x0000dbe4
    db58:	0000dc44 	.word	0x0000dc44
    db5c:	0000dc60 	.word	0x0000dc60
    db60:	0000dcb8 	.word	0x0000dcb8
    db64:	0000dd94 	.word	0x0000dd94
    db68:	0000ddb4 	.word	0x0000ddb4
    db6c:	0000ddd4 	.word	0x0000ddd4
    db70:	0000dba8 	.word	0x0000dba8
    db74:	e5902034 	ldr	r2, [r0, #52]	; 0x34
    db78:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    db7c:	e1520003 	cmp	r2, r3
    db80:	2a000004 	bcs	db98 <CScreenDevice::Write(char)+0x60>
    db84:	e2800014 	add	r0, r0, #20
    db88:	eb0013ed 	bl	12b44 <CCharGenerator::GetCharHeight() const>
    db8c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    db90:	e0433000 	sub	r3, r3, r0
    db94:	e5843040 	str	r3, [r4, #64]	; 0x40
    db98:	e3a03000 	mov	r3, #0
    db9c:	e5843030 	str	r3, [r4, #48]	; 0x30
    dba0:	e28dd008 	add	sp, sp, #8
    dba4:	e8bd8010 	pop	{r4, pc}
    dba8:	e3510068 	cmp	r1, #104	; 0x68
    dbac:	0a000097 	beq	de10 <CScreenDevice::Write(char)+0x2d8>
    dbb0:	e351006c 	cmp	r1, #108	; 0x6c
    dbb4:	0a000095 	beq	de10 <CScreenDevice::Write(char)+0x2d8>
    dbb8:	e2411030 	sub	r1, r1, #48	; 0x30
    dbbc:	e6ef3071 	uxtb	r3, r1
    dbc0:	e3530009 	cmp	r3, #9
    dbc4:	8afffff3 	bhi	db98 <CScreenDevice::Write(char)+0x60>
    dbc8:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    dbcc:	e0833103 	add	r3, r3, r3, lsl #2
    dbd0:	e0811083 	add	r1, r1, r3, lsl #1
    dbd4:	e3510063 	cmp	r1, #99	; 0x63
    dbd8:	e584104c 	str	r1, [r4, #76]	; 0x4c
    dbdc:	8affffed 	bhi	db98 <CScreenDevice::Write(char)+0x60>
    dbe0:	eaffffee 	b	dba0 <CScreenDevice::Write(char)+0x68>
    dbe4:	e2413008 	sub	r3, r1, #8
    dbe8:	e3530013 	cmp	r3, #19
    dbec:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    dbf0:	ea0000d3 	b	df44 <CScreenDevice::Write(char)+0x40c>
    dbf4:	0000de7c 	.word	0x0000de7c
    dbf8:	0000de70 	.word	0x0000de70
    dbfc:	0000de5c 	.word	0x0000de5c
    dc00:	0000df44 	.word	0x0000df44
    dc04:	0000df44 	.word	0x0000df44
    dc08:	0000de50 	.word	0x0000de50
    dc0c:	0000df44 	.word	0x0000df44
    dc10:	0000df44 	.word	0x0000df44
    dc14:	0000df44 	.word	0x0000df44
    dc18:	0000df44 	.word	0x0000df44
    dc1c:	0000df44 	.word	0x0000df44
    dc20:	0000df44 	.word	0x0000df44
    dc24:	0000df44 	.word	0x0000df44
    dc28:	0000df44 	.word	0x0000df44
    dc2c:	0000df44 	.word	0x0000df44
    dc30:	0000df44 	.word	0x0000df44
    dc34:	0000df44 	.word	0x0000df44
    dc38:	0000df44 	.word	0x0000df44
    dc3c:	0000df44 	.word	0x0000df44
    dc40:	0000de44 	.word	0x0000de44
    dc44:	e351004d 	cmp	r1, #77	; 0x4d
    dc48:	0affffd2 	beq	db98 <CScreenDevice::Write(char)+0x60>
    dc4c:	e351005b 	cmp	r1, #91	; 0x5b
    dc50:	03a03002 	moveq	r3, #2
    dc54:	05803030 	streq	r3, [r0, #48]	; 0x30
    dc58:	0affffd0 	beq	dba0 <CScreenDevice::Write(char)+0x68>
    dc5c:	eaffffcd 	b	db98 <CScreenDevice::Write(char)+0x60>
    dc60:	e241303f 	sub	r3, r1, #63	; 0x3f
    dc64:	e3530011 	cmp	r3, #17
    dc68:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    dc6c:	ea0000de 	b	dfec <CScreenDevice::Write(char)+0x4b4>
    dc70:	0000dfa0 	.word	0x0000dfa0
    dc74:	0000dfec 	.word	0x0000dfec
    dc78:	0000db74 	.word	0x0000db74
    dc7c:	0000dfcc 	.word	0x0000dfcc
    dc80:	0000dfbc 	.word	0x0000dfbc
    dc84:	0000dfac 	.word	0x0000dfac
    dc88:	0000dfec 	.word	0x0000dfec
    dc8c:	0000dfec 	.word	0x0000dfec
    dc90:	0000dfec 	.word	0x0000dfec
    dc94:	0000df88 	.word	0x0000df88
    dc98:	0000dfec 	.word	0x0000dfec
    dc9c:	0000df78 	.word	0x0000df78
    dca0:	0000dfdc 	.word	0x0000dfdc
    dca4:	0000db98 	.word	0x0000db98
    dca8:	0000db98 	.word	0x0000db98
    dcac:	0000dfec 	.word	0x0000dfec
    dcb0:	0000dfec 	.word	0x0000dfec
    dcb4:	0000db98 	.word	0x0000db98
    dcb8:	e241303b 	sub	r3, r1, #59	; 0x3b
    dcbc:	e3530032 	cmp	r3, #50	; 0x32
    dcc0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    dcc4:	eaffffbb 	b	dbb8 <CScreenDevice::Write(char)+0x80>
    dcc8:	0000df38 	.word	0x0000df38
    dccc:	0000dbb8 	.word	0x0000dbb8
    dcd0:	0000dbb8 	.word	0x0000dbb8
    dcd4:	0000dbb8 	.word	0x0000dbb8
    dcd8:	0000dbb8 	.word	0x0000dbb8
    dcdc:	0000dbb8 	.word	0x0000dbb8
    dce0:	0000dbb8 	.word	0x0000dbb8
    dce4:	0000dbb8 	.word	0x0000dbb8
    dce8:	0000dbb8 	.word	0x0000dbb8
    dcec:	0000dbb8 	.word	0x0000dbb8
    dcf0:	0000dbb8 	.word	0x0000dbb8
    dcf4:	0000dbb8 	.word	0x0000dbb8
    dcf8:	0000dbb8 	.word	0x0000dbb8
    dcfc:	0000dbb8 	.word	0x0000dbb8
    dd00:	0000dbb8 	.word	0x0000dbb8
    dd04:	0000dbb8 	.word	0x0000dbb8
    dd08:	0000dbb8 	.word	0x0000dbb8
    dd0c:	0000db98 	.word	0x0000db98
    dd10:	0000db98 	.word	0x0000db98
    dd14:	0000dbb8 	.word	0x0000dbb8
    dd18:	0000dbb8 	.word	0x0000dbb8
    dd1c:	0000db98 	.word	0x0000db98
    dd20:	0000dbb8 	.word	0x0000dbb8
    dd24:	0000dbb8 	.word	0x0000dbb8
    dd28:	0000dbb8 	.word	0x0000dbb8
    dd2c:	0000dbb8 	.word	0x0000dbb8
    dd30:	0000dbb8 	.word	0x0000dbb8
    dd34:	0000dbb8 	.word	0x0000dbb8
    dd38:	0000dbb8 	.word	0x0000dbb8
    dd3c:	0000de88 	.word	0x0000de88
    dd40:	0000dbb8 	.word	0x0000dbb8
    dd44:	0000dbb8 	.word	0x0000dbb8
    dd48:	0000dbb8 	.word	0x0000dbb8
    dd4c:	0000dbb8 	.word	0x0000dbb8
    dd50:	0000dbb8 	.word	0x0000dbb8
    dd54:	0000dbb8 	.word	0x0000dbb8
    dd58:	0000dbb8 	.word	0x0000dbb8
    dd5c:	0000dbb8 	.word	0x0000dbb8
    dd60:	0000dbb8 	.word	0x0000dbb8
    dd64:	0000dbb8 	.word	0x0000dbb8
    dd68:	0000dbb8 	.word	0x0000dbb8
    dd6c:	0000dbb8 	.word	0x0000dbb8
    dd70:	0000dbb8 	.word	0x0000dbb8
    dd74:	0000dbb8 	.word	0x0000dbb8
    dd78:	0000dbb8 	.word	0x0000dbb8
    dd7c:	0000de9c 	.word	0x0000de9c
    dd80:	0000dbb8 	.word	0x0000dbb8
    dd84:	0000dbb8 	.word	0x0000dbb8
    dd88:	0000dbb8 	.word	0x0000dbb8
    dd8c:	0000de9c 	.word	0x0000de9c
    dd90:	0000deb8 	.word	0x0000deb8
    dd94:	e2411030 	sub	r1, r1, #48	; 0x30
    dd98:	e6ef3071 	uxtb	r3, r1
    dd9c:	e3530009 	cmp	r3, #9
    dda0:	8affff7c 	bhi	db98 <CScreenDevice::Write(char)+0x60>
    dda4:	e3a03007 	mov	r3, #7
    dda8:	e580104c 	str	r1, [r0, #76]	; 0x4c
    ddac:	e5803030 	str	r3, [r0, #48]	; 0x30
    ddb0:	eaffff7a 	b	dba0 <CScreenDevice::Write(char)+0x68>
    ddb4:	e2411030 	sub	r1, r1, #48	; 0x30
    ddb8:	e6ef3071 	uxtb	r3, r1
    ddbc:	e3530009 	cmp	r3, #9
    ddc0:	8affff74 	bhi	db98 <CScreenDevice::Write(char)+0x60>
    ddc4:	e3a03006 	mov	r3, #6
    ddc8:	e5801050 	str	r1, [r0, #80]	; 0x50
    ddcc:	e5803030 	str	r3, [r0, #48]	; 0x30
    ddd0:	eaffff72 	b	dba0 <CScreenDevice::Write(char)+0x68>
    ddd4:	e3510048 	cmp	r1, #72	; 0x48
    ddd8:	0a000094 	beq	e030 <CScreenDevice::Write(char)+0x4f8>
    dddc:	e3510072 	cmp	r1, #114	; 0x72
    dde0:	0a000011 	beq	de2c <CScreenDevice::Write(char)+0x2f4>
    dde4:	e2411030 	sub	r1, r1, #48	; 0x30
    dde8:	e6ef3071 	uxtb	r3, r1
    ddec:	e3530009 	cmp	r3, #9
    ddf0:	8affff68 	bhi	db98 <CScreenDevice::Write(char)+0x60>
    ddf4:	e5903050 	ldr	r3, [r0, #80]	; 0x50
    ddf8:	e0833103 	add	r3, r3, r3, lsl #2
    ddfc:	e0811083 	add	r1, r1, r3, lsl #1
    de00:	e35100c7 	cmp	r1, #199	; 0xc7
    de04:	e5801050 	str	r1, [r0, #80]	; 0x50
    de08:	8affff62 	bhi	db98 <CScreenDevice::Write(char)+0x60>
    de0c:	eaffff63 	b	dba0 <CScreenDevice::Write(char)+0x68>
    de10:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    de14:	e3530019 	cmp	r3, #25
    de18:	02411068 	subeq	r1, r1, #104	; 0x68
    de1c:	016f1f11 	clzeq	r1, r1
    de20:	01a012a1 	lsreq	r1, r1, #5
    de24:	05c41044 	strbeq	r1, [r4, #68]	; 0x44
    de28:	eaffff5a 	b	db98 <CScreenDevice::Write(char)+0x60>
    de2c:	e5902050 	ldr	r2, [r0, #80]	; 0x50
    de30:	e590104c 	ldr	r1, [r0, #76]	; 0x4c
    de34:	ebfffde4 	bl	d5cc <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>
    de38:	e3a03000 	mov	r3, #0
    de3c:	e5843030 	str	r3, [r4, #48]	; 0x30
    de40:	eaffff56 	b	dba0 <CScreenDevice::Write(char)+0x68>
    de44:	e3a03001 	mov	r3, #1
    de48:	e5803030 	str	r3, [r0, #48]	; 0x30
    de4c:	eaffff53 	b	dba0 <CScreenDevice::Write(char)+0x68>
    de50:	e3a03000 	mov	r3, #0
    de54:	e580303c 	str	r3, [r0, #60]	; 0x3c
    de58:	eaffff50 	b	dba0 <CScreenDevice::Write(char)+0x68>
    de5c:	e3a03000 	mov	r3, #0
    de60:	e580303c 	str	r3, [r0, #60]	; 0x3c
    de64:	e28dd008 	add	sp, sp, #8
    de68:	e8bd4010 	pop	{r4, lr}
    de6c:	eafffe46 	b	d78c <CScreenDevice::CursorDown()>
    de70:	e28dd008 	add	sp, sp, #8
    de74:	e8bd4010 	pop	{r4, lr}
    de78:	eafffe68 	b	d820 <CScreenDevice::Tabulator()>
    de7c:	e28dd008 	add	sp, sp, #8
    de80:	e8bd4010 	pop	{r4, lr}
    de84:	eafffd89 	b	d4b0 <CScreenDevice::CursorLeft()>
    de88:	e590104c 	ldr	r1, [r0, #76]	; 0x4c
    de8c:	e3510000 	cmp	r1, #0
    de90:	0affff40 	beq	db98 <CScreenDevice::Write(char)+0x60>
    de94:	ebfffeeb 	bl	da48 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>
    de98:	eaffff3e 	b	db98 <CScreenDevice::Write(char)+0x60>
    de9c:	e590304c 	ldr	r3, [r0, #76]	; 0x4c
    dea0:	e3530004 	cmp	r3, #4
    dea4:	02411068 	subeq	r1, r1, #104	; 0x68
    dea8:	016f1f11 	clzeq	r1, r1
    deac:	01a012a1 	lsreq	r1, r1, #5
    deb0:	05c01048 	strbeq	r1, [r0, #72]	; 0x48
    deb4:	eaffff37 	b	db98 <CScreenDevice::Write(char)+0x60>
    deb8:	e590304c 	ldr	r3, [r0, #76]	; 0x4c
    debc:	e353001b 	cmp	r3, #27
    dec0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    dec4:	eaffff33 	b	db98 <CScreenDevice::Write(char)+0x60>
    dec8:	0000e024 	.word	0x0000e024
    decc:	0000e018 	.word	0x0000e018
    ded0:	0000e00c 	.word	0x0000e00c
    ded4:	0000db98 	.word	0x0000db98
    ded8:	0000db98 	.word	0x0000db98
    dedc:	0000db98 	.word	0x0000db98
    dee0:	0000db98 	.word	0x0000db98
    dee4:	0000db98 	.word	0x0000db98
    dee8:	0000db98 	.word	0x0000db98
    deec:	0000db98 	.word	0x0000db98
    def0:	0000db98 	.word	0x0000db98
    def4:	0000db98 	.word	0x0000db98
    def8:	0000db98 	.word	0x0000db98
    defc:	0000db98 	.word	0x0000db98
    df00:	0000db98 	.word	0x0000db98
    df04:	0000db98 	.word	0x0000db98
    df08:	0000db98 	.word	0x0000db98
    df0c:	0000db98 	.word	0x0000db98
    df10:	0000db98 	.word	0x0000db98
    df14:	0000db98 	.word	0x0000db98
    df18:	0000db98 	.word	0x0000db98
    df1c:	0000db98 	.word	0x0000db98
    df20:	0000db98 	.word	0x0000db98
    df24:	0000db98 	.word	0x0000db98
    df28:	0000db98 	.word	0x0000db98
    df2c:	0000db98 	.word	0x0000db98
    df30:	0000db98 	.word	0x0000db98
    df34:	0000e024 	.word	0x0000e024
    df38:	e3a03005 	mov	r3, #5
    df3c:	e5803030 	str	r3, [r0, #48]	; 0x30
    df40:	eaffff16 	b	dba0 <CScreenDevice::Write(char)+0x68>
    df44:	e6ef3071 	uxtb	r3, r1
    df48:	e353001f 	cmp	r3, #31
    df4c:	9affff13 	bls	dba0 <CScreenDevice::Write(char)+0x68>
    df50:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    df54:	e590203c 	ldr	r2, [r0, #60]	; 0x3c
    df58:	e1d004b6 	ldrh	r0, [r0, #70]	; 0x46
    df5c:	e58d0000 	str	r0, [sp]
    df60:	e1a00004 	mov	r0, r4
    df64:	ebfffe40 	bl	d86c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
    df68:	e1a00004 	mov	r0, r4
    df6c:	e28dd008 	add	sp, sp, #8
    df70:	e8bd4010 	pop	{r4, lr}
    df74:	eafffe1a 	b	d7e4 <CScreenDevice::CursorRight()>
    df78:	ebfffecd 	bl	dab4 <CScreenDevice::ClearDisplayEnd()>
    df7c:	e3a03000 	mov	r3, #0
    df80:	e5843030 	str	r3, [r4, #48]	; 0x30
    df84:	eaffff05 	b	dba0 <CScreenDevice::Write(char)+0x68>
    df88:	e3a03000 	mov	r3, #0
    df8c:	e5902034 	ldr	r2, [r0, #52]	; 0x34
    df90:	e580303c 	str	r3, [r0, #60]	; 0x3c
    df94:	e5803030 	str	r3, [r0, #48]	; 0x30
    df98:	e5802040 	str	r2, [r0, #64]	; 0x40
    df9c:	eafffeff 	b	dba0 <CScreenDevice::Write(char)+0x68>
    dfa0:	e3a03004 	mov	r3, #4
    dfa4:	e5803030 	str	r3, [r0, #48]	; 0x30
    dfa8:	eafffefc 	b	dba0 <CScreenDevice::Write(char)+0x68>
    dfac:	ebfffd3f 	bl	d4b0 <CScreenDevice::CursorLeft()>
    dfb0:	e3a03000 	mov	r3, #0
    dfb4:	e5843030 	str	r3, [r4, #48]	; 0x30
    dfb8:	eafffef8 	b	dba0 <CScreenDevice::Write(char)+0x68>
    dfbc:	ebfffe08 	bl	d7e4 <CScreenDevice::CursorRight()>
    dfc0:	e3a03000 	mov	r3, #0
    dfc4:	e5843030 	str	r3, [r4, #48]	; 0x30
    dfc8:	eafffef4 	b	dba0 <CScreenDevice::Write(char)+0x68>
    dfcc:	ebfffdee 	bl	d78c <CScreenDevice::CursorDown()>
    dfd0:	e3a03000 	mov	r3, #0
    dfd4:	e5843030 	str	r3, [r4, #48]	; 0x30
    dfd8:	eafffef0 	b	dba0 <CScreenDevice::Write(char)+0x68>
    dfdc:	ebfffe87 	bl	da00 <CScreenDevice::ClearLineEnd()>
    dfe0:	e3a03000 	mov	r3, #0
    dfe4:	e5843030 	str	r3, [r4, #48]	; 0x30
    dfe8:	eafffeec 	b	dba0 <CScreenDevice::Write(char)+0x68>
    dfec:	e2411030 	sub	r1, r1, #48	; 0x30
    dff0:	e6ef3071 	uxtb	r3, r1
    dff4:	e3530009 	cmp	r3, #9
    dff8:	8afffee6 	bhi	db98 <CScreenDevice::Write(char)+0x60>
    dffc:	e3a03003 	mov	r3, #3
    e000:	e580104c 	str	r1, [r0, #76]	; 0x4c
    e004:	e5803030 	str	r3, [r0, #48]	; 0x30
    e008:	eafffee4 	b	dba0 <CScreenDevice::Write(char)+0x68>
    e00c:	e3a0301f 	mov	r3, #31
    e010:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
    e014:	eafffedf 	b	db98 <CScreenDevice::Write(char)+0x60>
    e018:	e3a03b3e 	mov	r3, #63488	; 0xf800
    e01c:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
    e020:	eafffedc 	b	db98 <CScreenDevice::Write(char)+0x60>
    e024:	e3e03020 	mvn	r3, #32
    e028:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
    e02c:	eafffed9 	b	db98 <CScreenDevice::Write(char)+0x60>
    e030:	e5902050 	ldr	r2, [r0, #80]	; 0x50
    e034:	e590104c 	ldr	r1, [r0, #76]	; 0x4c
    e038:	ebfffd37 	bl	d51c <CScreenDevice::CursorMove(unsigned int, unsigned int)>
    e03c:	e3a03000 	mov	r3, #0
    e040:	e5843030 	str	r3, [r4, #48]	; 0x30
    e044:	eafffed5 	b	dba0 <CScreenDevice::Write(char)+0x68>

0000e048 <CScreenDevice::Write(void const*, unsigned int)>:
    e048:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    e04c:	e1a05000 	mov	r5, r0
    e050:	e5900058 	ldr	r0, [r0, #88]	; 0x58
    e054:	e1a07001 	mov	r7, r1
    e058:	e3500000 	cmp	r0, #0
    e05c:	e1a04002 	mov	r4, r2
    e060:	1a000028 	bne	e108 <CScreenDevice::Write(void const*, unsigned int)+0xc0>
    e064:	e3a02001 	mov	r2, #1
    e068:	e5d53044 	ldrb	r3, [r5, #68]	; 0x44
    e06c:	e5c52054 	strb	r2, [r5, #84]	; 0x54
    e070:	e3530000 	cmp	r3, #0
    e074:	1a00001c 	bne	e0ec <CScreenDevice::Write(void const*, unsigned int)+0xa4>
    e078:	e3540000 	cmp	r4, #0
    e07c:	e2446001 	sub	r6, r4, #1
    e080:	01a06004 	moveq	r6, r4
    e084:	0a00000b 	beq	e0b8 <CScreenDevice::Write(void const*, unsigned int)+0x70>
    e088:	e1a04007 	mov	r4, r7
    e08c:	e0d410d1 	ldrsb	r1, [r4], #1
    e090:	e1a00005 	mov	r0, r5
    e094:	ebfffea7 	bl	db38 <CScreenDevice::Write(char)>
    e098:	e2643001 	rsb	r3, r4, #1
    e09c:	e0833006 	add	r3, r3, r6
    e0a0:	e1770003 	cmn	r7, r3
    e0a4:	1afffff8 	bne	e08c <CScreenDevice::Write(void const*, unsigned int)+0x44>
    e0a8:	e2866001 	add	r6, r6, #1
    e0ac:	e5d53044 	ldrb	r3, [r5, #68]	; 0x44
    e0b0:	e3530000 	cmp	r3, #0
    e0b4:	1a000009 	bne	e0e0 <CScreenDevice::Write(void const*, unsigned int)+0x98>
    e0b8:	e3a02000 	mov	r2, #0
    e0bc:	e5953058 	ldr	r3, [r5, #88]	; 0x58
    e0c0:	e5c52054 	strb	r2, [r5, #84]	; 0x54
    e0c4:	e1530002 	cmp	r3, r2
    e0c8:	0a000000 	beq	e0d0 <CScreenDevice::Write(void const*, unsigned int)+0x88>
    e0cc:	eb000f35 	bl	11da8 <LeaveCritical>
    e0d0:	e3a03000 	mov	r3, #0
    e0d4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    e0d8:	e1a00006 	mov	r0, r6
    e0dc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e0e0:	e1a00005 	mov	r0, r5
    e0e4:	ebfffc31 	bl	d1b0 <CScreenDevice::InvertCursor() [clone .part.6]>
    e0e8:	eafffff2 	b	e0b8 <CScreenDevice::Write(void const*, unsigned int)+0x70>
    e0ec:	e1a00005 	mov	r0, r5
    e0f0:	ebfffc2e 	bl	d1b0 <CScreenDevice::InvertCursor() [clone .part.6]>
    e0f4:	e3540000 	cmp	r4, #0
    e0f8:	e2446001 	sub	r6, r4, #1
    e0fc:	1affffe1 	bne	e088 <CScreenDevice::Write(void const*, unsigned int)+0x40>
    e100:	e1a06004 	mov	r6, r4
    e104:	eaffffe8 	b	e0ac <CScreenDevice::Write(void const*, unsigned int)+0x64>
    e108:	eb000ef9 	bl	11cf4 <EnterCritical>
    e10c:	eaffffd4 	b	e064 <CScreenDevice::Write(void const*, unsigned int)+0x1c>

0000e110 <CScreenDevice::Initialize()>:
    e110:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    e114:	e5d0500c 	ldrb	r5, [r0, #12]
    e118:	e24dd00c 	sub	sp, sp, #12
    e11c:	e3550000 	cmp	r5, #0
    e120:	e1a04000 	mov	r4, r0
    e124:	0a00002a 	beq	e1d4 <CScreenDevice::Initialize()+0xc4>
    e128:	e5903004 	ldr	r3, [r0, #4]
    e12c:	e5902008 	ldr	r2, [r0, #8]
    e130:	e5803024 	str	r3, [r0, #36]	; 0x24
    e134:	e0000392 	mul	r0, r2, r3
    e138:	e370010f 	cmn	r0, #-1073741821	; 0xc0000003
    e13c:	e1a00080 	lsl	r0, r0, #1
    e140:	e584001c 	str	r0, [r4, #28]
    e144:	e5843020 	str	r3, [r4, #32]
    e148:	23e00000 	mvncs	r0, #0
    e14c:	e5842028 	str	r2, [r4, #40]	; 0x28
    e150:	eb000f42 	bl	11e60 <operator new[](unsigned int)>
    e154:	e5947028 	ldr	r7, [r4, #40]	; 0x28
    e158:	e5840018 	str	r0, [r4, #24]
    e15c:	e2846014 	add	r6, r4, #20
    e160:	e1a00006 	mov	r0, r6
    e164:	eb001276 	bl	12b44 <CCharGenerator::GetCharHeight() const>
    e168:	e1a01000 	mov	r1, r0
    e16c:	e1a00007 	mov	r0, r7
    e170:	eb0015d9 	bl	138dc <__aeabi_uidiv>
    e174:	e1a05000 	mov	r5, r0
    e178:	e1a00006 	mov	r0, r6
    e17c:	eb001270 	bl	12b44 <CCharGenerator::GetCharHeight() const>
    e180:	e3a02000 	mov	r2, #0
    e184:	e0000590 	mul	r0, r0, r5
    e188:	e5943034 	ldr	r3, [r4, #52]	; 0x34
    e18c:	e584002c 	str	r0, [r4, #44]	; 0x2c
    e190:	e5840038 	str	r0, [r4, #56]	; 0x38
    e194:	e5843040 	str	r3, [r4, #64]	; 0x40
    e198:	e584203c 	str	r2, [r4, #60]	; 0x3c
    e19c:	e1a00004 	mov	r0, r4
    e1a0:	ebfffe43 	bl	dab4 <CScreenDevice::ClearDisplayEnd()>
    e1a4:	e5d43044 	ldrb	r3, [r4, #68]	; 0x44
    e1a8:	e3530000 	cmp	r3, #0
    e1ac:	1a00002f 	bne	e270 <CScreenDevice::Initialize()+0x160>
    e1b0:	ebfff200 	bl	a9b8 <CDeviceNameService::Get()>
    e1b4:	e1a02004 	mov	r2, r4
    e1b8:	e3a03000 	mov	r3, #0
    e1bc:	e59f10b8 	ldr	r1, [pc, #184]	; e27c <CScreenDevice::Initialize()+0x16c>
    e1c0:	ebfff13c 	bl	a6b8 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
    e1c4:	e3a05001 	mov	r5, #1
    e1c8:	e1a00005 	mov	r0, r5
    e1cc:	e28dd00c 	add	sp, sp, #12
    e1d0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    e1d4:	e3a00094 	mov	r0, #148	; 0x94
    e1d8:	eb000f1f 	bl	11e5c <operator new(unsigned int)>
    e1dc:	e9940006 	ldmib	r4, {r1, r2}
    e1e0:	e1a06000 	mov	r6, r0
    e1e4:	e3a03010 	mov	r3, #16
    e1e8:	e58d5004 	str	r5, [sp, #4]
    e1ec:	e58d5000 	str	r5, [sp]
    e1f0:	eb0010fa 	bl	125e0 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    e1f4:	e5846010 	str	r6, [r4, #16]
    e1f8:	e1a00006 	mov	r0, r6
    e1fc:	eb001170 	bl	127c4 <CBcmFrameBuffer::Initialize()>
    e200:	e3500000 	cmp	r0, #0
    e204:	0affffef 	beq	e1c8 <CScreenDevice::Initialize()+0xb8>
    e208:	e5940010 	ldr	r0, [r4, #16]
    e20c:	eb0011a6 	bl	128ac <CBcmFrameBuffer::GetDepth() const>
    e210:	e3500010 	cmp	r0, #16
    e214:	1affffeb 	bne	e1c8 <CScreenDevice::Initialize()+0xb8>
    e218:	e5940010 	ldr	r0, [r4, #16]
    e21c:	eb0011a4 	bl	128b4 <CBcmFrameBuffer::GetBuffer() const>
    e220:	e5840018 	str	r0, [r4, #24]
    e224:	e5940010 	ldr	r0, [r4, #16]
    e228:	eb0011a3 	bl	128bc <CBcmFrameBuffer::GetSize() const>
    e22c:	e584001c 	str	r0, [r4, #28]
    e230:	e5940010 	ldr	r0, [r4, #16]
    e234:	eb00119a 	bl	128a4 <CBcmFrameBuffer::GetPitch() const>
    e238:	e5840020 	str	r0, [r4, #32]
    e23c:	e5940010 	ldr	r0, [r4, #16]
    e240:	eb00118f 	bl	12884 <CBcmFrameBuffer::GetWidth() const>
    e244:	e5840024 	str	r0, [r4, #36]	; 0x24
    e248:	e5940010 	ldr	r0, [r4, #16]
    e24c:	eb00118e 	bl	1288c <CBcmFrameBuffer::GetHeight() const>
    e250:	e5943020 	ldr	r3, [r4, #32]
    e254:	e1a07000 	mov	r7, r0
    e258:	e3130003 	tst	r3, #3
    e25c:	01a030a3 	lsreq	r3, r3, #1
    e260:	e5840028 	str	r0, [r4, #40]	; 0x28
    e264:	05843020 	streq	r3, [r4, #32]
    e268:	0affffbb 	beq	e15c <CScreenDevice::Initialize()+0x4c>
    e26c:	eaffffd5 	b	e1c8 <CScreenDevice::Initialize()+0xb8>
    e270:	e1a00004 	mov	r0, r4
    e274:	ebfffbcd 	bl	d1b0 <CScreenDevice::InvertCursor() [clone .part.6]>
    e278:	eaffffcc 	b	e1b0 <CScreenDevice::Initialize()+0xa0>
    e27c:	00013ed4 	.word	0x00013ed4

0000e280 <CScreenDevice::InvertCursor()>:
    e280:	e5d03044 	ldrb	r3, [r0, #68]	; 0x44
    e284:	e3530000 	cmp	r3, #0
    e288:	012fff1e 	bxeq	lr
    e28c:	eafffbc7 	b	d1b0 <CScreenDevice::InvertCursor() [clone .part.6]>

0000e290 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)>:
    e290:	e590c024 	ldr	ip, [r0, #36]	; 0x24
    e294:	e15c0001 	cmp	ip, r1
    e298:	912fff1e 	bxls	lr
    e29c:	e590c028 	ldr	ip, [r0, #40]	; 0x28
    e2a0:	e15c0002 	cmp	ip, r2
    e2a4:	8590c020 	ldrhi	ip, [r0, #32]
    e2a8:	85900018 	ldrhi	r0, [r0, #24]
    e2ac:	8022129c 	mlahi	r2, ip, r2, r1
    e2b0:	81a02082 	lslhi	r2, r2, #1
    e2b4:	818030b2 	strhhi	r3, [r0, r2]
    e2b8:	e12fff1e 	bx	lr

0000e2bc <CScreenDevice::GetPixel(unsigned int, unsigned int)>:
    e2bc:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    e2c0:	e1530001 	cmp	r3, r1
    e2c4:	9a000008 	bls	e2ec <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x30>
    e2c8:	e5903028 	ldr	r3, [r0, #40]	; 0x28
    e2cc:	e1530002 	cmp	r3, r2
    e2d0:	9a000005 	bls	e2ec <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x30>
    e2d4:	e590c020 	ldr	ip, [r0, #32]
    e2d8:	e5903018 	ldr	r3, [r0, #24]
    e2dc:	e022129c 	mla	r2, ip, r2, r1
    e2e0:	e1a02082 	lsl	r2, r2, #1
    e2e4:	e19300b2 	ldrh	r0, [r3, r2]
    e2e8:	e12fff1e 	bx	lr
    e2ec:	e3a00000 	mov	r0, #0
    e2f0:	e12fff1e 	bx	lr

0000e2f4 <CScreenDevice::Rotor(unsigned int, unsigned int)>:
    e2f4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    e2f8:	e1a05000 	mov	r5, r0
    e2fc:	e24dd00c 	sub	sp, sp, #12
    e300:	e1a04001 	mov	r4, r1
    e304:	e2800014 	add	r0, r0, #20
    e308:	e1a06002 	mov	r6, r2
    e30c:	e5957024 	ldr	r7, [r5, #36]	; 0x24
    e310:	eb001209 	bl	12b3c <CCharGenerator::GetCharWidth() const>
    e314:	e3a0cb3e 	mov	ip, #63488	; 0xf800
    e318:	e2044003 	and	r4, r4, #3
    e31c:	e0200094 	mla	r0, r4, r0, r0
    e320:	e59f3024 	ldr	r3, [pc, #36]	; e34c <CScreenDevice::Rotor(unsigned int, unsigned int)+0x58>
    e324:	e2066003 	and	r6, r6, #3
    e328:	e0833006 	add	r3, r3, r6
    e32c:	e1d311dc 	ldrsb	r1, [r3, #28]
    e330:	e0472000 	sub	r2, r7, r0
    e334:	e58dc000 	str	ip, [sp]
    e338:	e1a00005 	mov	r0, r5
    e33c:	e3a03000 	mov	r3, #0
    e340:	ebfffd49 	bl	d86c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
    e344:	e28dd00c 	add	sp, sp, #12
    e348:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    e34c:	000142c0 	.word	0x000142c0

0000e350 <CSerialDevice::Read(void*, unsigned int)>:
    e350:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    e354:	e2515000 	subs	r5, r1, #0
    e358:	e1a04000 	mov	r4, r0
    e35c:	e1a07002 	mov	r7, r2
    e360:	0a000058 	beq	e4c8 <CSerialDevice::Read(void*, unsigned int)+0x178>
    e364:	e59430a4 	ldr	r3, [r4, #164]	; 0xa4
    e368:	e3530000 	cmp	r3, #0
    e36c:	0a000032 	beq	e43c <CSerialDevice::Read(void*, unsigned int)+0xec>
    e370:	e2846a01 	add	r6, r4, #4096	; 0x1000
    e374:	e59600d0 	ldr	r0, [r6, #208]	; 0xd0
    e378:	e3500000 	cmp	r0, #0
    e37c:	1a000021 	bne	e408 <CSerialDevice::Read(void*, unsigned int)+0xb8>
    e380:	e59438b4 	ldr	r3, [r4, #2228]	; 0x8b4
    e384:	e3530000 	cmp	r3, #0
    e388:	ba000022 	blt	e418 <CSerialDevice::Read(void*, unsigned int)+0xc8>
    e38c:	e3570000 	cmp	r7, #0
    e390:	0a000017 	beq	e3f4 <CSerialDevice::Read(void*, unsigned int)+0xa4>
    e394:	e59438ac 	ldr	r3, [r4, #2220]	; 0x8ac
    e398:	e59428b0 	ldr	r2, [r4, #2224]	; 0x8b0
    e39c:	e1520003 	cmp	r2, r3
    e3a0:	0a000053 	beq	e4f4 <CSerialDevice::Read(void*, unsigned int)+0x1a4>
    e3a4:	e0852007 	add	r2, r5, r7
    e3a8:	e1a01005 	mov	r1, r5
    e3ac:	e59fe150 	ldr	lr, [pc, #336]	; e504 <CSerialDevice::Read(void*, unsigned int)+0x1b4>
    e3b0:	ea000003 	b	e3c4 <CSerialDevice::Read(void*, unsigned int)+0x74>
    e3b4:	e594c8ac 	ldr	ip, [r4, #2220]	; 0x8ac
    e3b8:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
    e3bc:	e15c0003 	cmp	ip, r3
    e3c0:	0a00000b 	beq	e3f4 <CSerialDevice::Read(void*, unsigned int)+0xa4>
    e3c4:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
    e3c8:	e2830001 	add	r0, r3, #1
    e3cc:	e58408b0 	str	r0, [r4, #2224]	; 0x8b0
    e3d0:	e0843003 	add	r3, r4, r3
    e3d4:	e5d330aa 	ldrb	r3, [r3, #170]	; 0xaa
    e3d8:	e4c13001 	strb	r3, [r1], #1
    e3dc:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
    e3e0:	e1510002 	cmp	r1, r2
    e3e4:	e003300e 	and	r3, r3, lr
    e3e8:	e58438b0 	str	r3, [r4, #2224]	; 0x8b0
    e3ec:	e0417005 	sub	r7, r1, r5
    e3f0:	1affffef 	bne	e3b4 <CSerialDevice::Read(void*, unsigned int)+0x64>
    e3f4:	e59630d0 	ldr	r3, [r6, #208]	; 0xd0
    e3f8:	e3530000 	cmp	r3, #0
    e3fc:	1a00000b 	bne	e430 <CSerialDevice::Read(void*, unsigned int)+0xe0>
    e400:	e1a00007 	mov	r0, r7
    e404:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e408:	eb000e39 	bl	11cf4 <EnterCritical>
    e40c:	e59438b4 	ldr	r3, [r4, #2228]	; 0x8b4
    e410:	e3530000 	cmp	r3, #0
    e414:	aaffffdc 	bge	e38c <CSerialDevice::Read(void*, unsigned int)+0x3c>
    e418:	e3a03000 	mov	r3, #0
    e41c:	e59478b4 	ldr	r7, [r4, #2228]	; 0x8b4
    e420:	e58438b4 	str	r3, [r4, #2228]	; 0x8b4
    e424:	e59630d0 	ldr	r3, [r6, #208]	; 0xd0
    e428:	e3530000 	cmp	r3, #0
    e42c:	0afffff3 	beq	e400 <CSerialDevice::Read(void*, unsigned int)+0xb0>
    e430:	eb000e5c 	bl	11da8 <LeaveCritical>
    e434:	e1a00007 	mov	r0, r7
    e438:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e43c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    e440:	e3570000 	cmp	r7, #0
    e444:	0a00001b 	beq	e4b8 <CSerialDevice::Read(void*, unsigned int)+0x168>
    e448:	e59fc0b8 	ldr	ip, [pc, #184]	; e508 <CSerialDevice::Read(void*, unsigned int)+0x1b8>
    e44c:	e59c2018 	ldr	r2, [ip, #24]
    e450:	e3120010 	tst	r2, #16
    e454:	1a000028 	bne	e4fc <CSerialDevice::Read(void*, unsigned int)+0x1ac>
    e458:	e59c3000 	ldr	r3, [ip]
    e45c:	e3130b01 	tst	r3, #1024	; 0x400
    e460:	1a00001d 	bne	e4dc <CSerialDevice::Read(void*, unsigned int)+0x18c>
    e464:	e3130b02 	tst	r3, #2048	; 0x800
    e468:	1a00001d 	bne	e4e4 <CSerialDevice::Read(void*, unsigned int)+0x194>
    e46c:	e3130c01 	tst	r3, #256	; 0x100
    e470:	1a00001d 	bne	e4ec <CSerialDevice::Read(void*, unsigned int)+0x19c>
    e474:	e0852007 	add	r2, r5, r7
    e478:	e1a01005 	mov	r1, r5
    e47c:	ea000009 	b	e4a8 <CSerialDevice::Read(void*, unsigned int)+0x158>
    e480:	e59c3018 	ldr	r3, [ip, #24]
    e484:	e3130010 	tst	r3, #16
    e488:	1a00000a 	bne	e4b8 <CSerialDevice::Read(void*, unsigned int)+0x168>
    e48c:	e59c3000 	ldr	r3, [ip]
    e490:	e3130b01 	tst	r3, #1024	; 0x400
    e494:	1a000010 	bne	e4dc <CSerialDevice::Read(void*, unsigned int)+0x18c>
    e498:	e3130b02 	tst	r3, #2048	; 0x800
    e49c:	1a000010 	bne	e4e4 <CSerialDevice::Read(void*, unsigned int)+0x194>
    e4a0:	e3130c01 	tst	r3, #256	; 0x100
    e4a4:	1a000010 	bne	e4ec <CSerialDevice::Read(void*, unsigned int)+0x19c>
    e4a8:	e4c13001 	strb	r3, [r1], #1
    e4ac:	e1510002 	cmp	r1, r2
    e4b0:	e0417005 	sub	r7, r1, r5
    e4b4:	1afffff1 	bne	e480 <CSerialDevice::Read(void*, unsigned int)+0x130>
    e4b8:	e3a03000 	mov	r3, #0
    e4bc:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    e4c0:	e1a00007 	mov	r0, r7
    e4c4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e4c8:	e59f203c 	ldr	r2, [pc, #60]	; e50c <CSerialDevice::Read(void*, unsigned int)+0x1bc>
    e4cc:	e59f103c 	ldr	r1, [pc, #60]	; e510 <CSerialDevice::Read(void*, unsigned int)+0x1c0>
    e4d0:	e59f003c 	ldr	r0, [pc, #60]	; e514 <CSerialDevice::Read(void*, unsigned int)+0x1c4>
    e4d4:	eb000fee 	bl	12494 <assertion_failed>
    e4d8:	eaffffa1 	b	e364 <CSerialDevice::Read(void*, unsigned int)+0x14>
    e4dc:	e3e07000 	mvn	r7, #0
    e4e0:	eafffff4 	b	e4b8 <CSerialDevice::Read(void*, unsigned int)+0x168>
    e4e4:	e3e07001 	mvn	r7, #1
    e4e8:	eafffff2 	b	e4b8 <CSerialDevice::Read(void*, unsigned int)+0x168>
    e4ec:	e3e07002 	mvn	r7, #2
    e4f0:	eafffff0 	b	e4b8 <CSerialDevice::Read(void*, unsigned int)+0x168>
    e4f4:	e3a07000 	mov	r7, #0
    e4f8:	eaffffbd 	b	e3f4 <CSerialDevice::Read(void*, unsigned int)+0xa4>
    e4fc:	e1a07003 	mov	r7, r3
    e500:	eaffffec 	b	e4b8 <CSerialDevice::Read(void*, unsigned int)+0x168>
    e504:	000007ff 	.word	0x000007ff
    e508:	20201000 	.word	0x20201000
    e50c:	00000101 	.word	0x00000101
    e510:	00014300 	.word	0x00014300
    e514:	0001430c 	.word	0x0001430c

0000e518 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool)>:
    e518:	e92d4070 	push	{r4, r5, r6, lr}
    e51c:	e1a04000 	mov	r4, r0
    e520:	e1a05002 	mov	r5, r2
    e524:	e1a06001 	mov	r6, r1
    e528:	eb001227 	bl	12dcc <CDevice::CDevice()>
    e52c:	e1a00004 	mov	r0, r4
    e530:	e3a03000 	mov	r3, #0
    e534:	e59f1098 	ldr	r1, [pc, #152]	; e5d4 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool)+0xbc>
    e538:	e1a02003 	mov	r2, r3
    e53c:	e4801004 	str	r1, [r0], #4
    e540:	e3a01020 	mov	r1, #32
    e544:	ebfff498 	bl	b7ac <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    e548:	e3a03000 	mov	r3, #0
    e54c:	e284002c 	add	r0, r4, #44	; 0x2c
    e550:	e1a02003 	mov	r2, r3
    e554:	e3a01021 	mov	r1, #33	; 0x21
    e558:	ebfff493 	bl	b7ac <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    e55c:	e2840054 	add	r0, r4, #84	; 0x54
    e560:	e3a03000 	mov	r3, #0
    e564:	e3a02004 	mov	r2, #4
    e568:	e3a0100e 	mov	r1, #14
    e56c:	ebfff48e 	bl	b7ac <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    e570:	e284007c 	add	r0, r4, #124	; 0x7c
    e574:	e3a03000 	mov	r3, #0
    e578:	e3a02004 	mov	r2, #4
    e57c:	e3a0100f 	mov	r1, #15
    e580:	ebfff489 	bl	b7ac <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    e584:	e3550000 	cmp	r5, #0
    e588:	e3a03000 	mov	r3, #0
    e58c:	e3a01001 	mov	r1, #1
    e590:	13a0c002 	movne	ip, #2
    e594:	03a0c001 	moveq	ip, #1
    e598:	e2842a01 	add	r2, r4, #4096	; 0x1000
    e59c:	e58438ac 	str	r3, [r4, #2220]	; 0x8ac
    e5a0:	e58460a4 	str	r6, [r4, #164]	; 0xa4
    e5a4:	e58438b0 	str	r3, [r4, #2224]	; 0x8b0
    e5a8:	e5c450a8 	strb	r5, [r4, #168]	; 0xa8
    e5ac:	e5c430a9 	strb	r3, [r4, #169]	; 0xa9
    e5b0:	e58438b4 	str	r3, [r4, #2228]	; 0x8b4
    e5b4:	e1a00004 	mov	r0, r4
    e5b8:	e58230b8 	str	r3, [r2, #184]	; 0xb8
    e5bc:	e582c0d0 	str	ip, [r2, #208]	; 0xd0
    e5c0:	e58230c4 	str	r3, [r2, #196]	; 0xc4
    e5c4:	e58230bc 	str	r3, [r2, #188]	; 0xbc
    e5c8:	e58210c0 	str	r1, [r2, #192]	; 0xc0
    e5cc:	e58210d4 	str	r1, [r2, #212]	; 0xd4
    e5d0:	e8bd8070 	pop	{r4, r5, r6, pc}
    e5d4:	000142ec 	.word	0x000142ec

0000e5d8 <CSerialDevice::Initialize(unsigned int)>:
    e5d8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    e5dc:	e1a07001 	mov	r7, r1
    e5e0:	e1a04000 	mov	r4, r0
    e5e4:	ebfffabd 	bl	d0e0 <CMachineInfo::Get()>
    e5e8:	e3a01002 	mov	r1, #2
    e5ec:	ebfffa5b 	bl	cf60 <CMachineInfo::GetClockRate(unsigned int) const>
    e5f0:	e2508000 	subs	r8, r0, #0
    e5f4:	0a000051 	beq	e740 <CSerialDevice::Initialize(unsigned int)+0x168>
    e5f8:	e59f3154 	ldr	r3, [pc, #340]	; e754 <CSerialDevice::Initialize(unsigned int)+0x17c>
    e5fc:	e2472f4b 	sub	r2, r7, #300	; 0x12c
    e600:	e1520003 	cmp	r2, r3
    e604:	8a000048 	bhi	e72c <CSerialDevice::Initialize(unsigned int)+0x154>
    e608:	e1a05207 	lsl	r5, r7, #4
    e60c:	e1a01005 	mov	r1, r5
    e610:	e1a00008 	mov	r0, r8
    e614:	eb0014b0 	bl	138dc <__aeabi_uidiv>
    e618:	e59f3138 	ldr	r3, [pc, #312]	; e758 <CSerialDevice::Initialize(unsigned int)+0x180>
    e61c:	e2402001 	sub	r2, r0, #1
    e620:	e1520003 	cmp	r2, r3
    e624:	e1a06000 	mov	r6, r0
    e628:	8a00003a 	bhi	e718 <CSerialDevice::Initialize(unsigned int)+0x140>
    e62c:	e1a01005 	mov	r1, r5
    e630:	e1a00008 	mov	r0, r8
    e634:	eb0014e5 	bl	139d0 <__aeabi_uidivmod>
    e638:	e1a00181 	lsl	r0, r1, #3
    e63c:	e1a01007 	mov	r1, r7
    e640:	eb0014a5 	bl	138dc <__aeabi_uidiv>
    e644:	e2005001 	and	r5, r0, #1
    e648:	e08550a0 	add	r5, r5, r0, lsr #1
    e64c:	e355003f 	cmp	r5, #63	; 0x3f
    e650:	8a00002b 	bhi	e704 <CSerialDevice::Initialize(unsigned int)+0x12c>
    e654:	e59400a4 	ldr	r0, [r4, #164]	; 0xa4
    e658:	e3500000 	cmp	r0, #0
    e65c:	0a000008 	beq	e684 <CSerialDevice::Initialize(unsigned int)+0xac>
    e660:	e5d430a8 	ldrb	r3, [r4, #168]	; 0xa8
    e664:	e59f20f0 	ldr	r2, [pc, #240]	; e75c <CSerialDevice::Initialize(unsigned int)+0x184>
    e668:	e3530000 	cmp	r3, #0
    e66c:	e3a01039 	mov	r1, #57	; 0x39
    e670:	e1a03004 	mov	r3, r4
    e674:	0a000020 	beq	e6fc <CSerialDevice::Initialize(unsigned int)+0x124>
    e678:	ebfff59c 	bl	bcf0 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>
    e67c:	e3a03001 	mov	r3, #1
    e680:	e5c430a9 	strb	r3, [r4, #169]	; 0xa9
    e684:	e3a02000 	mov	r2, #0
    e688:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
    e68c:	e59400a4 	ldr	r0, [r4, #164]	; 0xa4
    e690:	e59f30c8 	ldr	r3, [pc, #200]	; e760 <CSerialDevice::Initialize(unsigned int)+0x188>
    e694:	e59f10c8 	ldr	r1, [pc, #200]	; e764 <CSerialDevice::Initialize(unsigned int)+0x18c>
    e698:	e1500002 	cmp	r0, r2
    e69c:	e5832038 	str	r2, [r3, #56]	; 0x38
    e6a0:	13a00009 	movne	r0, #9
    e6a4:	e5831044 	str	r1, [r3, #68]	; 0x44
    e6a8:	13a02e45 	movne	r2, #1104	; 0x450
    e6ac:	03a02060 	moveq	r2, #96	; 0x60
    e6b0:	13a01070 	movne	r1, #112	; 0x70
    e6b4:	e5836024 	str	r6, [r3, #36]	; 0x24
    e6b8:	e5835028 	str	r5, [r3, #40]	; 0x28
    e6bc:	15830034 	strne	r0, [r3, #52]	; 0x34
    e6c0:	0583202c 	streq	r2, [r3, #44]	; 0x2c
    e6c4:	1583102c 	strne	r1, [r3, #44]	; 0x2c
    e6c8:	15832038 	strne	r2, [r3, #56]	; 0x38
    e6cc:	e59f308c 	ldr	r3, [pc, #140]	; e760 <CSerialDevice::Initialize(unsigned int)+0x188>
    e6d0:	e59f2090 	ldr	r2, [pc, #144]	; e768 <CSerialDevice::Initialize(unsigned int)+0x190>
    e6d4:	e3a05000 	mov	r5, #0
    e6d8:	e5832030 	str	r2, [r3, #48]	; 0x30
    e6dc:	ee075fba 	mcr	15, 0, r5, cr7, cr10, {5}
    e6e0:	ebfff0b4 	bl	a9b8 <CDeviceNameService::Get()>
    e6e4:	e1a03005 	mov	r3, r5
    e6e8:	e1a02004 	mov	r2, r4
    e6ec:	e59f1078 	ldr	r1, [pc, #120]	; e76c <CSerialDevice::Initialize(unsigned int)+0x194>
    e6f0:	ebffeff0 	bl	a6b8 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
    e6f4:	e3a00001 	mov	r0, #1
    e6f8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e6fc:	ebfff50e 	bl	bb3c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    e700:	eaffffdd 	b	e67c <CSerialDevice::Initialize(unsigned int)+0xa4>
    e704:	e3a02092 	mov	r2, #146	; 0x92
    e708:	e59f1060 	ldr	r1, [pc, #96]	; e770 <CSerialDevice::Initialize(unsigned int)+0x198>
    e70c:	e59f0060 	ldr	r0, [pc, #96]	; e774 <CSerialDevice::Initialize(unsigned int)+0x19c>
    e710:	eb000f5f 	bl	12494 <assertion_failed>
    e714:	eaffffce 	b	e654 <CSerialDevice::Initialize(unsigned int)+0x7c>
    e718:	e3a0208f 	mov	r2, #143	; 0x8f
    e71c:	e59f104c 	ldr	r1, [pc, #76]	; e770 <CSerialDevice::Initialize(unsigned int)+0x198>
    e720:	e59f0050 	ldr	r0, [pc, #80]	; e778 <CSerialDevice::Initialize(unsigned int)+0x1a0>
    e724:	eb000f5a 	bl	12494 <assertion_failed>
    e728:	eaffffbf 	b	e62c <CSerialDevice::Initialize(unsigned int)+0x54>
    e72c:	e3a0208c 	mov	r2, #140	; 0x8c
    e730:	e59f1038 	ldr	r1, [pc, #56]	; e770 <CSerialDevice::Initialize(unsigned int)+0x198>
    e734:	e59f0040 	ldr	r0, [pc, #64]	; e77c <CSerialDevice::Initialize(unsigned int)+0x1a4>
    e738:	eb000f55 	bl	12494 <assertion_failed>
    e73c:	eaffffb1 	b	e608 <CSerialDevice::Initialize(unsigned int)+0x30>
    e740:	e3a0208a 	mov	r2, #138	; 0x8a
    e744:	e59f1024 	ldr	r1, [pc, #36]	; e770 <CSerialDevice::Initialize(unsigned int)+0x198>
    e748:	e59f0030 	ldr	r0, [pc, #48]	; e780 <CSerialDevice::Initialize(unsigned int)+0x1a8>
    e74c:	eb000f50 	bl	12494 <assertion_failed>
    e750:	eaffffa8 	b	e5f8 <CSerialDevice::Initialize(unsigned int)+0x20>
    e754:	003d07d4 	.word	0x003d07d4
    e758:	0000fffe 	.word	0x0000fffe
    e75c:	0000eedc 	.word	0x0000eedc
    e760:	20201000 	.word	0x20201000
    e764:	000007ff 	.word	0x000007ff
    e768:	00000301 	.word	0x00000301
    e76c:	0001438c 	.word	0x0001438c
    e770:	00014300 	.word	0x00014300
    e774:	00014378 	.word	0x00014378
    e778:	00014354 	.word	0x00014354
    e77c:	00014328 	.word	0x00014328
    e780:	00014318 	.word	0x00014318

0000e784 <CSerialDevice::GetOptions() const>:
    e784:	e2800a01 	add	r0, r0, #4096	; 0x1000
    e788:	e59000c0 	ldr	r0, [r0, #192]	; 0xc0
    e78c:	e12fff1e 	bx	lr

0000e790 <CSerialDevice::SetOptions(unsigned int)>:
    e790:	e2800a01 	add	r0, r0, #4096	; 0x1000
    e794:	e58010c0 	str	r1, [r0, #192]	; 0xc0
    e798:	e12fff1e 	bx	lr

0000e79c <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())>:
    e79c:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
    e7a0:	e92d4070 	push	{r4, r5, r6, lr}
    e7a4:	e3530000 	cmp	r3, #0
    e7a8:	e1a04000 	mov	r4, r0
    e7ac:	e1a05001 	mov	r5, r1
    e7b0:	e1a06002 	mov	r6, r2
    e7b4:	0a00001d 	beq	e830 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x94>
    e7b8:	e2844a01 	add	r4, r4, #4096	; 0x1000
    e7bc:	e59430c4 	ldr	r3, [r4, #196]	; 0xc4
    e7c0:	e3530000 	cmp	r3, #0
    e7c4:	0a000003 	beq	e7d8 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x3c>
    e7c8:	e59f2088 	ldr	r2, [pc, #136]	; e858 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xbc>
    e7cc:	e59f1088 	ldr	r1, [pc, #136]	; e85c <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc0>
    e7d0:	e59f0088 	ldr	r0, [pc, #136]	; e860 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc4>
    e7d4:	eb000f2e 	bl	12494 <assertion_failed>
    e7d8:	e3550000 	cmp	r5, #0
    e7dc:	0a000018 	beq	e844 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xa8>
    e7e0:	e1d530d0 	ldrsb	r3, [r5]
    e7e4:	e3530000 	cmp	r3, #0
    e7e8:	0a000005 	beq	e804 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x68>
    e7ec:	e3560000 	cmp	r6, #0
    e7f0:	0a000009 	beq	e81c <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x80>
    e7f4:	e58460cc 	str	r6, [r4, #204]	; 0xcc
    e7f8:	e58450c8 	str	r5, [r4, #200]	; 0xc8
    e7fc:	e58450c4 	str	r5, [r4, #196]	; 0xc4
    e800:	e8bd8070 	pop	{r4, r5, r6, pc}
    e804:	e3a02f57 	mov	r2, #348	; 0x15c
    e808:	e59f104c 	ldr	r1, [pc, #76]	; e85c <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc0>
    e80c:	e59f0050 	ldr	r0, [pc, #80]	; e864 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc8>
    e810:	eb000f1f 	bl	12494 <assertion_failed>
    e814:	e3560000 	cmp	r6, #0
    e818:	1afffff5 	bne	e7f4 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x58>
    e81c:	e59f2044 	ldr	r2, [pc, #68]	; e868 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xcc>
    e820:	e59f1034 	ldr	r1, [pc, #52]	; e85c <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc0>
    e824:	e59f0040 	ldr	r0, [pc, #64]	; e86c <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xd0>
    e828:	eb000f19 	bl	12494 <assertion_failed>
    e82c:	eafffff0 	b	e7f4 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x58>
    e830:	e3a02f56 	mov	r2, #344	; 0x158
    e834:	e59f1020 	ldr	r1, [pc, #32]	; e85c <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc0>
    e838:	e59f0030 	ldr	r0, [pc, #48]	; e870 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xd4>
    e83c:	eb000f14 	bl	12494 <assertion_failed>
    e840:	eaffffdc 	b	e7b8 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x1c>
    e844:	e59f2028 	ldr	r2, [pc, #40]	; e874 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xd8>
    e848:	e59f100c 	ldr	r1, [pc, #12]	; e85c <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc0>
    e84c:	e59f0024 	ldr	r0, [pc, #36]	; e878 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xdc>
    e850:	eb000f0f 	bl	12494 <assertion_failed>
    e854:	eaffffe1 	b	e7e0 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x44>
    e858:	00000159 	.word	0x00000159
    e85c:	00014300 	.word	0x00014300
    e860:	000143ac 	.word	0x000143ac
    e864:	000143c8 	.word	0x000143c8
    e868:	0000015d 	.word	0x0000015d
    e86c:	00013e3c 	.word	0x00013e3c
    e870:	00014394 	.word	0x00014394
    e874:	0000015b 	.word	0x0000015b
    e878:	000143bc 	.word	0x000143bc

0000e87c <CSerialDevice::AvailableForWrite()>:
    e87c:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
    e880:	e92d4010 	push	{r4, lr}
    e884:	e3530000 	cmp	r3, #0
    e888:	e1a04000 	mov	r4, r0
    e88c:	0a000014 	beq	e8e4 <CSerialDevice::AvailableForWrite()+0x68>
    e890:	e2844a01 	add	r4, r4, #4096	; 0x1000
    e894:	e59400d0 	ldr	r0, [r4, #208]	; 0xd0
    e898:	e3500000 	cmp	r0, #0
    e89c:	1a00000d 	bne	e8d8 <CSerialDevice::AvailableForWrite()+0x5c>
    e8a0:	e59420bc 	ldr	r2, [r4, #188]	; 0xbc
    e8a4:	e59430b8 	ldr	r3, [r4, #184]	; 0xb8
    e8a8:	e1520003 	cmp	r2, r3
    e8ac:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    e8b0:	e59420b8 	ldr	r2, [r4, #184]	; 0xb8
    e8b4:	92834e7f 	addls	r4, r3, #2032	; 0x7f0
    e8b8:	9284400f 	addls	r4, r4, #15
    e8bc:	82434001 	subhi	r4, r3, #1
    e8c0:	e3500000 	cmp	r0, #0
    e8c4:	e0444002 	sub	r4, r4, r2
    e8c8:	0a000000 	beq	e8d0 <CSerialDevice::AvailableForWrite()+0x54>
    e8cc:	eb000d35 	bl	11da8 <LeaveCritical>
    e8d0:	e1a00004 	mov	r0, r4
    e8d4:	e8bd8010 	pop	{r4, pc}
    e8d8:	eb000d05 	bl	11cf4 <EnterCritical>
    e8dc:	e59400d0 	ldr	r0, [r4, #208]	; 0xd0
    e8e0:	eaffffee 	b	e8a0 <CSerialDevice::AvailableForWrite()+0x24>
    e8e4:	e59f200c 	ldr	r2, [pc, #12]	; e8f8 <CSerialDevice::AvailableForWrite()+0x7c>
    e8e8:	e59f100c 	ldr	r1, [pc, #12]	; e8fc <CSerialDevice::AvailableForWrite()+0x80>
    e8ec:	e59f000c 	ldr	r0, [pc, #12]	; e900 <CSerialDevice::AvailableForWrite()+0x84>
    e8f0:	eb000ee7 	bl	12494 <assertion_failed>
    e8f4:	eaffffe5 	b	e890 <CSerialDevice::AvailableForWrite()+0x14>
    e8f8:	00000167 	.word	0x00000167
    e8fc:	00014300 	.word	0x00014300
    e900:	00014394 	.word	0x00014394

0000e904 <CSerialDevice::AvailableForRead()>:
    e904:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
    e908:	e92d4070 	push	{r4, r5, r6, lr}
    e90c:	e3530000 	cmp	r3, #0
    e910:	e1a04000 	mov	r4, r0
    e914:	0a000014 	beq	e96c <CSerialDevice::AvailableForRead()+0x68>
    e918:	e2845a01 	add	r5, r4, #4096	; 0x1000
    e91c:	e59500d0 	ldr	r0, [r5, #208]	; 0xd0
    e920:	e3500000 	cmp	r0, #0
    e924:	1a00000d 	bne	e960 <CSerialDevice::AvailableForRead()+0x5c>
    e928:	e59428ac 	ldr	r2, [r4, #2220]	; 0x8ac
    e92c:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
    e930:	e1520003 	cmp	r2, r3
    e934:	e59438ac 	ldr	r3, [r4, #2220]	; 0x8ac
    e938:	359428b0 	ldrcc	r2, [r4, #2224]	; 0x8b0
    e93c:	259448b0 	ldrcs	r4, [r4, #2224]	; 0x8b0
    e940:	32834b02 	addcc	r4, r3, #2048	; 0x800
    e944:	30444002 	subcc	r4, r4, r2
    e948:	20434004 	subcs	r4, r3, r4
    e94c:	e3500000 	cmp	r0, #0
    e950:	0a000000 	beq	e958 <CSerialDevice::AvailableForRead()+0x54>
    e954:	eb000d13 	bl	11da8 <LeaveCritical>
    e958:	e1a00004 	mov	r0, r4
    e95c:	e8bd8070 	pop	{r4, r5, r6, pc}
    e960:	eb000ce3 	bl	11cf4 <EnterCritical>
    e964:	e59500d0 	ldr	r0, [r5, #208]	; 0xd0
    e968:	eaffffee 	b	e928 <CSerialDevice::AvailableForRead()+0x24>
    e96c:	e3a02f5f 	mov	r2, #380	; 0x17c
    e970:	e59f1008 	ldr	r1, [pc, #8]	; e980 <CSerialDevice::AvailableForRead()+0x7c>
    e974:	e59f0008 	ldr	r0, [pc, #8]	; e984 <CSerialDevice::AvailableForRead()+0x80>
    e978:	eb000ec5 	bl	12494 <assertion_failed>
    e97c:	eaffffe5 	b	e918 <CSerialDevice::AvailableForRead()+0x14>
    e980:	00014300 	.word	0x00014300
    e984:	00014394 	.word	0x00014394

0000e988 <CSerialDevice::Peek()>:
    e988:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
    e98c:	e92d4070 	push	{r4, r5, r6, lr}
    e990:	e3530000 	cmp	r3, #0
    e994:	e1a04000 	mov	r4, r0
    e998:	0a000017 	beq	e9fc <CSerialDevice::Peek()+0x74>
    e99c:	e2845a01 	add	r5, r4, #4096	; 0x1000
    e9a0:	e59500d0 	ldr	r0, [r5, #208]	; 0xd0
    e9a4:	e3500000 	cmp	r0, #0
    e9a8:	1a00000b 	bne	e9dc <CSerialDevice::Peek()+0x54>
    e9ac:	e59418ac 	ldr	r1, [r4, #2220]	; 0x8ac
    e9b0:	e59428b0 	ldr	r2, [r4, #2224]	; 0x8b0
    e9b4:	e1510002 	cmp	r1, r2
    e9b8:	0a000014 	beq	ea10 <CSerialDevice::Peek()+0x88>
    e9bc:	e59428b0 	ldr	r2, [r4, #2224]	; 0x8b0
    e9c0:	e0844002 	add	r4, r4, r2
    e9c4:	e5d440aa 	ldrb	r4, [r4, #170]	; 0xaa
    e9c8:	e3500000 	cmp	r0, #0
    e9cc:	0a000000 	beq	e9d4 <CSerialDevice::Peek()+0x4c>
    e9d0:	eb000cf4 	bl	11da8 <LeaveCritical>
    e9d4:	e1a00004 	mov	r0, r4
    e9d8:	e8bd8070 	pop	{r4, r5, r6, pc}
    e9dc:	eb000cc4 	bl	11cf4 <EnterCritical>
    e9e0:	e59428ac 	ldr	r2, [r4, #2220]	; 0x8ac
    e9e4:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
    e9e8:	e59500d0 	ldr	r0, [r5, #208]	; 0xd0
    e9ec:	e1520003 	cmp	r2, r3
    e9f0:	03e04000 	mvneq	r4, #0
    e9f4:	1afffff0 	bne	e9bc <CSerialDevice::Peek()+0x34>
    e9f8:	eafffff2 	b	e9c8 <CSerialDevice::Peek()+0x40>
    e9fc:	e59f2014 	ldr	r2, [pc, #20]	; ea18 <CSerialDevice::Peek()+0x90>
    ea00:	e59f1014 	ldr	r1, [pc, #20]	; ea1c <CSerialDevice::Peek()+0x94>
    ea04:	e59f0014 	ldr	r0, [pc, #20]	; ea20 <CSerialDevice::Peek()+0x98>
    ea08:	eb000ea1 	bl	12494 <assertion_failed>
    ea0c:	eaffffe2 	b	e99c <CSerialDevice::Peek()+0x14>
    ea10:	e3e04000 	mvn	r4, #0
    ea14:	eaffffee 	b	e9d4 <CSerialDevice::Peek()+0x4c>
    ea18:	00000191 	.word	0x00000191
    ea1c:	00014300 	.word	0x00014300
    ea20:	00014394 	.word	0x00014394

0000ea24 <CSerialDevice::Flush()>:
    ea24:	e3a03000 	mov	r3, #0
    ea28:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    ea2c:	e59f2010 	ldr	r2, [pc, #16]	; ea44 <CSerialDevice::Flush()+0x20>
    ea30:	e5923018 	ldr	r3, [r2, #24]
    ea34:	e2133008 	ands	r3, r3, #8
    ea38:	1afffffc 	bne	ea30 <CSerialDevice::Flush()+0xc>
    ea3c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    ea40:	e12fff1e 	bx	lr
    ea44:	20201000 	.word	0x20201000

0000ea48 <CSerialDevice::Write(unsigned char)>:
    ea48:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
    ea4c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    ea50:	e3530000 	cmp	r3, #0
    ea54:	0a00002c 	beq	eb0c <CSerialDevice::Write(unsigned char)+0xc4>
    ea58:	e2805a01 	add	r5, r0, #4096	; 0x1000
    ea5c:	e59520d0 	ldr	r2, [r5, #208]	; 0xd0
    ea60:	e1a06001 	mov	r6, r1
    ea64:	e3520000 	cmp	r2, #0
    ea68:	e1a04000 	mov	r4, r0
    ea6c:	1a000017 	bne	ead0 <CSerialDevice::Write(unsigned char)+0x88>
    ea70:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
    ea74:	e59510bc 	ldr	r1, [r5, #188]	; 0xbc
    ea78:	e2833001 	add	r3, r3, #1
    ea7c:	e1a03a83 	lsl	r3, r3, #21
    ea80:	e1a03aa3 	lsr	r3, r3, #21
    ea84:	e1530001 	cmp	r3, r1
    ea88:	0a00001c 	beq	eb00 <CSerialDevice::Write(unsigned char)+0xb8>
    ea8c:	e3a07001 	mov	r7, #1
    ea90:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
    ea94:	e0840003 	add	r0, r4, r3
    ea98:	e0833007 	add	r3, r3, r7
    ea9c:	e58530b8 	str	r3, [r5, #184]	; 0xb8
    eaa0:	e5c068b8 	strb	r6, [r0, #2232]	; 0x8b8
    eaa4:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
    eaa8:	e1a03a83 	lsl	r3, r3, #21
    eaac:	e1a03aa3 	lsr	r3, r3, #21
    eab0:	e58530b8 	str	r3, [r5, #184]	; 0xb8
    eab4:	e3520000 	cmp	r2, #0
    eab8:	1a000001 	bne	eac4 <CSerialDevice::Write(unsigned char)+0x7c>
    eabc:	e1a00007 	mov	r0, r7
    eac0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    eac4:	eb000cb7 	bl	11da8 <LeaveCritical>
    eac8:	e1a00007 	mov	r0, r7
    eacc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ead0:	e1a00002 	mov	r0, r2
    ead4:	eb000c86 	bl	11cf4 <EnterCritical>
    ead8:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
    eadc:	e59520bc 	ldr	r2, [r5, #188]	; 0xbc
    eae0:	e2833001 	add	r3, r3, #1
    eae4:	e1a03a83 	lsl	r3, r3, #21
    eae8:	e1a03aa3 	lsr	r3, r3, #21
    eaec:	e1530002 	cmp	r3, r2
    eaf0:	03a07000 	moveq	r7, #0
    eaf4:	e59520d0 	ldr	r2, [r5, #208]	; 0xd0
    eaf8:	1affffe3 	bne	ea8c <CSerialDevice::Write(unsigned char)+0x44>
    eafc:	eaffffec 	b	eab4 <CSerialDevice::Write(unsigned char)+0x6c>
    eb00:	e1a07002 	mov	r7, r2
    eb04:	e1a00007 	mov	r0, r7
    eb08:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    eb0c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    eb10:	e59f201c 	ldr	r2, [pc, #28]	; eb34 <CSerialDevice::Write(unsigned char)+0xec>
    eb14:	e5923018 	ldr	r3, [r2, #24]
    eb18:	e2133020 	ands	r3, r3, #32
    eb1c:	1afffffc 	bne	eb14 <CSerialDevice::Write(unsigned char)+0xcc>
    eb20:	e5821000 	str	r1, [r2]
    eb24:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    eb28:	e3a07001 	mov	r7, #1
    eb2c:	e1a00007 	mov	r0, r7
    eb30:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    eb34:	20201000 	.word	0x20201000

0000eb38 <CSerialDevice::Write(void const*, unsigned int)>:
    eb38:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    eb3c:	e2804a01 	add	r4, r0, #4096	; 0x1000
    eb40:	e1a07000 	mov	r7, r0
    eb44:	e59400d4 	ldr	r0, [r4, #212]	; 0xd4
    eb48:	e1a05001 	mov	r5, r1
    eb4c:	e3500000 	cmp	r0, #0
    eb50:	e1a08002 	mov	r8, r2
    eb54:	1a000053 	bne	eca8 <CSerialDevice::Write(void const*, unsigned int)+0x170>
    eb58:	e3550000 	cmp	r5, #0
    eb5c:	0a000059 	beq	ecc8 <CSerialDevice::Write(void const*, unsigned int)+0x190>
    eb60:	e3580000 	cmp	r8, #0
    eb64:	0a00005c 	beq	ecdc <CSerialDevice::Write(void const*, unsigned int)+0x1a4>
    eb68:	e3a06000 	mov	r6, #0
    eb6c:	e3a0900d 	mov	r9, #13
    eb70:	ea000002 	b	eb80 <CSerialDevice::Write(void const*, unsigned int)+0x48>
    eb74:	e2866001 	add	r6, r6, #1
    eb78:	e1560008 	cmp	r6, r8
    eb7c:	0a00000f 	beq	ebc0 <CSerialDevice::Write(void const*, unsigned int)+0x88>
    eb80:	e5d51000 	ldrb	r1, [r5]
    eb84:	e1a00007 	mov	r0, r7
    eb88:	ebffffae 	bl	ea48 <CSerialDevice::Write(unsigned char)>
    eb8c:	e3500000 	cmp	r0, #0
    eb90:	0a00000a 	beq	ebc0 <CSerialDevice::Write(void const*, unsigned int)+0x88>
    eb94:	e4d53001 	ldrb	r3, [r5], #1
    eb98:	e353000a 	cmp	r3, #10
    eb9c:	1afffff4 	bne	eb74 <CSerialDevice::Write(void const*, unsigned int)+0x3c>
    eba0:	e59430c0 	ldr	r3, [r4, #192]	; 0xc0
    eba4:	e3130001 	tst	r3, #1
    eba8:	0afffff1 	beq	eb74 <CSerialDevice::Write(void const*, unsigned int)+0x3c>
    ebac:	e1a01009 	mov	r1, r9
    ebb0:	e1a00007 	mov	r0, r7
    ebb4:	ebffffa3 	bl	ea48 <CSerialDevice::Write(unsigned char)>
    ebb8:	e3500000 	cmp	r0, #0
    ebbc:	1affffec 	bne	eb74 <CSerialDevice::Write(void const*, unsigned int)+0x3c>
    ebc0:	e59430d4 	ldr	r3, [r4, #212]	; 0xd4
    ebc4:	e3530000 	cmp	r3, #0
    ebc8:	1a000034 	bne	eca0 <CSerialDevice::Write(void const*, unsigned int)+0x168>
    ebcc:	e59730a4 	ldr	r3, [r7, #164]	; 0xa4
    ebd0:	e3530000 	cmp	r3, #0
    ebd4:	0a000027 	beq	ec78 <CSerialDevice::Write(void const*, unsigned int)+0x140>
    ebd8:	e59400d0 	ldr	r0, [r4, #208]	; 0xd0
    ebdc:	e3500000 	cmp	r0, #0
    ebe0:	1a000032 	bne	ecb0 <CSerialDevice::Write(void const*, unsigned int)+0x178>
    ebe4:	e59420b8 	ldr	r2, [r4, #184]	; 0xb8
    ebe8:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    ebec:	e1520003 	cmp	r2, r3
    ebf0:	0a000020 	beq	ec78 <CSerialDevice::Write(void const*, unsigned int)+0x140>
    ebf4:	e3a03000 	mov	r3, #0
    ebf8:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    ebfc:	e59430b8 	ldr	r3, [r4, #184]	; 0xb8
    ec00:	e59420bc 	ldr	r2, [r4, #188]	; 0xbc
    ec04:	e1520003 	cmp	r2, r3
    ec08:	0a000015 	beq	ec64 <CSerialDevice::Write(void const*, unsigned int)+0x12c>
    ec0c:	e59f20d0 	ldr	r2, [pc, #208]	; ece4 <CSerialDevice::Write(void const*, unsigned int)+0x1ac>
    ec10:	e5923018 	ldr	r3, [r2, #24]
    ec14:	e3130020 	tst	r3, #32
    ec18:	1a00001b 	bne	ec8c <CSerialDevice::Write(void const*, unsigned int)+0x154>
    ec1c:	e59f00c4 	ldr	r0, [pc, #196]	; ece8 <CSerialDevice::Write(void const*, unsigned int)+0x1b0>
    ec20:	ea000002 	b	ec30 <CSerialDevice::Write(void const*, unsigned int)+0xf8>
    ec24:	e5923018 	ldr	r3, [r2, #24]
    ec28:	e3130020 	tst	r3, #32
    ec2c:	1a000016 	bne	ec8c <CSerialDevice::Write(void const*, unsigned int)+0x154>
    ec30:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    ec34:	e2831001 	add	r1, r3, #1
    ec38:	e58410bc 	str	r1, [r4, #188]	; 0xbc
    ec3c:	e0873003 	add	r3, r7, r3
    ec40:	e5d338b8 	ldrb	r3, [r3, #2232]	; 0x8b8
    ec44:	e5823000 	str	r3, [r2]
    ec48:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    ec4c:	e0033000 	and	r3, r3, r0
    ec50:	e58430bc 	str	r3, [r4, #188]	; 0xbc
    ec54:	e59410b8 	ldr	r1, [r4, #184]	; 0xb8
    ec58:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    ec5c:	e1510003 	cmp	r1, r3
    ec60:	1affffef 	bne	ec24 <CSerialDevice::Write(void const*, unsigned int)+0xec>
    ec64:	e3a03000 	mov	r3, #0
    ec68:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    ec6c:	e59430d0 	ldr	r3, [r4, #208]	; 0xd0
    ec70:	e3530000 	cmp	r3, #0
    ec74:	1a000001 	bne	ec80 <CSerialDevice::Write(void const*, unsigned int)+0x148>
    ec78:	e1a00006 	mov	r0, r6
    ec7c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    ec80:	eb000c48 	bl	11da8 <LeaveCritical>
    ec84:	e1a00006 	mov	r0, r6
    ec88:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    ec8c:	e59f2050 	ldr	r2, [pc, #80]	; ece4 <CSerialDevice::Write(void const*, unsigned int)+0x1ac>
    ec90:	e5923038 	ldr	r3, [r2, #56]	; 0x38
    ec94:	e3833020 	orr	r3, r3, #32
    ec98:	e5823038 	str	r3, [r2, #56]	; 0x38
    ec9c:	eafffff0 	b	ec64 <CSerialDevice::Write(void const*, unsigned int)+0x12c>
    eca0:	eb000c40 	bl	11da8 <LeaveCritical>
    eca4:	eaffffc8 	b	ebcc <CSerialDevice::Write(void const*, unsigned int)+0x94>
    eca8:	eb000c11 	bl	11cf4 <EnterCritical>
    ecac:	eaffffa9 	b	eb58 <CSerialDevice::Write(void const*, unsigned int)+0x20>
    ecb0:	eb000c0f 	bl	11cf4 <EnterCritical>
    ecb4:	e59420b8 	ldr	r2, [r4, #184]	; 0xb8
    ecb8:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    ecbc:	e1520003 	cmp	r2, r3
    ecc0:	1affffcb 	bne	ebf4 <CSerialDevice::Write(void const*, unsigned int)+0xbc>
    ecc4:	eaffffe8 	b	ec6c <CSerialDevice::Write(void const*, unsigned int)+0x134>
    ecc8:	e3a020c3 	mov	r2, #195	; 0xc3
    eccc:	e59f1018 	ldr	r1, [pc, #24]	; ecec <CSerialDevice::Write(void const*, unsigned int)+0x1b4>
    ecd0:	e59f0018 	ldr	r0, [pc, #24]	; ecf0 <CSerialDevice::Write(void const*, unsigned int)+0x1b8>
    ecd4:	eb000dee 	bl	12494 <assertion_failed>
    ecd8:	eaffffa0 	b	eb60 <CSerialDevice::Write(void const*, unsigned int)+0x28>
    ecdc:	e1a06008 	mov	r6, r8
    ece0:	eaffffb6 	b	ebc0 <CSerialDevice::Write(void const*, unsigned int)+0x88>
    ece4:	20201000 	.word	0x20201000
    ece8:	000007ff 	.word	0x000007ff
    ecec:	00014300 	.word	0x00014300
    ecf0:	0001430c 	.word	0x0001430c

0000ecf4 <CSerialDevice::InterruptHandler()>:
    ecf4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    ecf8:	e2804a01 	add	r4, r0, #4096	; 0x1000
    ecfc:	e1a05000 	mov	r5, r0
    ed00:	e59400d0 	ldr	r0, [r4, #208]	; 0xd0
    ed04:	e3500000 	cmp	r0, #0
    ed08:	1a00006f 	bne	eecc <CSerialDevice::InterruptHandler()+0x1d8>
    ed0c:	e3a06000 	mov	r6, #0
    ed10:	ee076f9a 	mcr	15, 0, r6, cr7, cr10, {4}
    ed14:	e59f31b8 	ldr	r3, [pc, #440]	; eed4 <CSerialDevice::InterruptHandler()+0x1e0>
    ed18:	e3e07002 	mvn	r7, #2
    ed1c:	e1a01003 	mov	r1, r3
    ed20:	e3e0c001 	mvn	ip, #1
    ed24:	e3e0e000 	mvn	lr, #0
    ed28:	e5932040 	ldr	r2, [r3, #64]	; 0x40
    ed2c:	e59f01a4 	ldr	r0, [pc, #420]	; eed8 <CSerialDevice::InterruptHandler()+0x1e4>
    ed30:	e5832044 	str	r2, [r3, #68]	; 0x44
    ed34:	e5913018 	ldr	r3, [r1, #24]
    ed38:	e3130010 	tst	r3, #16
    ed3c:	1a00001f 	bne	edc0 <CSerialDevice::InterruptHandler()+0xcc>
    ed40:	e5912000 	ldr	r2, [r1]
    ed44:	e3120b01 	tst	r2, #1024	; 0x400
    ed48:	0a000040 	beq	ee50 <CSerialDevice::InterruptHandler()+0x15c>
    ed4c:	e59538b4 	ldr	r3, [r5, #2228]	; 0x8b4
    ed50:	e3530000 	cmp	r3, #0
    ed54:	0585e8b4 	streq	lr, [r5, #2228]	; 0x8b4
    ed58:	e59480c4 	ldr	r8, [r4, #196]	; 0xc4
    ed5c:	e3580000 	cmp	r8, #0
    ed60:	0a000005 	beq	ed7c <CSerialDevice::InterruptHandler()+0x88>
    ed64:	e59490c8 	ldr	r9, [r4, #200]	; 0xc8
    ed68:	e6af3072 	sxtb	r3, r2
    ed6c:	e1d9a0d0 	ldrsb	sl, [r9]
    ed70:	e15a0003 	cmp	sl, r3
    ed74:	158480c8 	strne	r8, [r4, #200]	; 0xc8
    ed78:	0a000044 	beq	ee90 <CSerialDevice::InterruptHandler()+0x19c>
    ed7c:	e59538ac 	ldr	r3, [r5, #2220]	; 0x8ac
    ed80:	e59588b0 	ldr	r8, [r5, #2224]	; 0x8b0
    ed84:	e2833001 	add	r3, r3, #1
    ed88:	e0033000 	and	r3, r3, r0
    ed8c:	e1530008 	cmp	r3, r8
    ed90:	0a000034 	beq	ee68 <CSerialDevice::InterruptHandler()+0x174>
    ed94:	e59538ac 	ldr	r3, [r5, #2220]	; 0x8ac
    ed98:	e2838001 	add	r8, r3, #1
    ed9c:	e0853003 	add	r3, r5, r3
    eda0:	e58588ac 	str	r8, [r5, #2220]	; 0x8ac
    eda4:	e5c320aa 	strb	r2, [r3, #170]	; 0xaa
    eda8:	e59538ac 	ldr	r3, [r5, #2220]	; 0x8ac
    edac:	e0033000 	and	r3, r3, r0
    edb0:	e58538ac 	str	r3, [r5, #2220]	; 0x8ac
    edb4:	e5913018 	ldr	r3, [r1, #24]
    edb8:	e3130010 	tst	r3, #16
    edbc:	0affffdf 	beq	ed40 <CSerialDevice::InterruptHandler()+0x4c>
    edc0:	e5913018 	ldr	r3, [r1, #24]
    edc4:	e3130020 	tst	r3, #32
    edc8:	1a000016 	bne	ee28 <CSerialDevice::InterruptHandler()+0x134>
    edcc:	e59420b8 	ldr	r2, [r4, #184]	; 0xb8
    edd0:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    edd4:	e1520003 	cmp	r2, r3
    edd8:	0a000032 	beq	eea8 <CSerialDevice::InterruptHandler()+0x1b4>
    eddc:	e59f20f0 	ldr	r2, [pc, #240]	; eed4 <CSerialDevice::InterruptHandler()+0x1e0>
    ede0:	e59f00f0 	ldr	r0, [pc, #240]	; eed8 <CSerialDevice::InterruptHandler()+0x1e4>
    ede4:	ea000003 	b	edf8 <CSerialDevice::InterruptHandler()+0x104>
    ede8:	e59410b8 	ldr	r1, [r4, #184]	; 0xb8
    edec:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    edf0:	e1510003 	cmp	r1, r3
    edf4:	0a00002b 	beq	eea8 <CSerialDevice::InterruptHandler()+0x1b4>
    edf8:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    edfc:	e2831001 	add	r1, r3, #1
    ee00:	e58410bc 	str	r1, [r4, #188]	; 0xbc
    ee04:	e0853003 	add	r3, r5, r3
    ee08:	e5d338b8 	ldrb	r3, [r3, #2232]	; 0x8b8
    ee0c:	e5823000 	str	r3, [r2]
    ee10:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    ee14:	e0033000 	and	r3, r3, r0
    ee18:	e58430bc 	str	r3, [r4, #188]	; 0xbc
    ee1c:	e5923018 	ldr	r3, [r2, #24]
    ee20:	e3130020 	tst	r3, #32
    ee24:	0affffef 	beq	ede8 <CSerialDevice::InterruptHandler()+0xf4>
    ee28:	e3a03000 	mov	r3, #0
    ee2c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    ee30:	e59430d0 	ldr	r3, [r4, #208]	; 0xd0
    ee34:	e3530000 	cmp	r3, #0
    ee38:	1a00001f 	bne	eebc <CSerialDevice::InterruptHandler()+0x1c8>
    ee3c:	e3560000 	cmp	r6, #0
    ee40:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    ee44:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
    ee48:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    ee4c:	e12fff13 	bx	r3
    ee50:	e3120b02 	tst	r2, #2048	; 0x800
    ee54:	0a000007 	beq	ee78 <CSerialDevice::InterruptHandler()+0x184>
    ee58:	e59538b4 	ldr	r3, [r5, #2228]	; 0x8b4
    ee5c:	e3530000 	cmp	r3, #0
    ee60:	0585c8b4 	streq	ip, [r5, #2228]	; 0x8b4
    ee64:	eaffffbb 	b	ed58 <CSerialDevice::InterruptHandler()+0x64>
    ee68:	e59538b4 	ldr	r3, [r5, #2228]	; 0x8b4
    ee6c:	e3530000 	cmp	r3, #0
    ee70:	0585c8b4 	streq	ip, [r5, #2228]	; 0x8b4
    ee74:	eaffffae 	b	ed34 <CSerialDevice::InterruptHandler()+0x40>
    ee78:	e3120c01 	tst	r2, #256	; 0x100
    ee7c:	0affffb5 	beq	ed58 <CSerialDevice::InterruptHandler()+0x64>
    ee80:	e59538b4 	ldr	r3, [r5, #2228]	; 0x8b4
    ee84:	e3530000 	cmp	r3, #0
    ee88:	058578b4 	streq	r7, [r5, #2228]	; 0x8b4
    ee8c:	eaffffb1 	b	ed58 <CSerialDevice::InterruptHandler()+0x64>
    ee90:	e2893001 	add	r3, r9, #1
    ee94:	e58430c8 	str	r3, [r4, #200]	; 0xc8
    ee98:	e1d930d1 	ldrsb	r3, [r9, #1]
    ee9c:	e3530000 	cmp	r3, #0
    eea0:	03a06001 	moveq	r6, #1
    eea4:	eaffffb4 	b	ed7c <CSerialDevice::InterruptHandler()+0x88>
    eea8:	e59f2024 	ldr	r2, [pc, #36]	; eed4 <CSerialDevice::InterruptHandler()+0x1e0>
    eeac:	e5923038 	ldr	r3, [r2, #56]	; 0x38
    eeb0:	e3c33020 	bic	r3, r3, #32
    eeb4:	e5823038 	str	r3, [r2, #56]	; 0x38
    eeb8:	eaffffda 	b	ee28 <CSerialDevice::InterruptHandler()+0x134>
    eebc:	eb000bb9 	bl	11da8 <LeaveCritical>
    eec0:	e3560000 	cmp	r6, #0
    eec4:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    eec8:	eaffffdd 	b	ee44 <CSerialDevice::InterruptHandler()+0x150>
    eecc:	eb000b88 	bl	11cf4 <EnterCritical>
    eed0:	eaffff8d 	b	ed0c <CSerialDevice::InterruptHandler()+0x18>
    eed4:	20201000 	.word	0x20201000
    eed8:	000007ff 	.word	0x000007ff

0000eedc <CSerialDevice::InterruptStub(void*)>:
    eedc:	e92d4010 	push	{r4, lr}
    eee0:	e2504000 	subs	r4, r0, #0
    eee4:	0a000002 	beq	eef4 <CSerialDevice::InterruptStub(void*)+0x18>
    eee8:	e1a00004 	mov	r0, r4
    eeec:	e8bd4010 	pop	{r4, lr}
    eef0:	eaffff7f 	b	ecf4 <CSerialDevice::InterruptHandler()>
    eef4:	e59f0014 	ldr	r0, [pc, #20]	; ef10 <CSerialDevice::InterruptStub(void*)+0x34>
    eef8:	e59f2014 	ldr	r2, [pc, #20]	; ef14 <CSerialDevice::InterruptStub(void*)+0x38>
    eefc:	e59f1014 	ldr	r1, [pc, #20]	; ef18 <CSerialDevice::InterruptStub(void*)+0x3c>
    ef00:	eb000d63 	bl	12494 <assertion_failed>
    ef04:	e1a00004 	mov	r0, r4
    ef08:	e8bd4010 	pop	{r4, lr}
    ef0c:	eaffff78 	b	ecf4 <CSerialDevice::InterruptHandler()>
    ef10:	000143d8 	.word	0x000143d8
    ef14:	0000022e 	.word	0x0000022e
    ef18:	00014300 	.word	0x00014300

0000ef1c <CSerialDevice::~CSerialDevice()>:
    ef1c:	e59f20a4 	ldr	r2, [pc, #164]	; efc8 <CSerialDevice::~CSerialDevice()+0xac>
    ef20:	e92d4010 	push	{r4, lr}
    ef24:	e3a03000 	mov	r3, #0
    ef28:	e1a04000 	mov	r4, r0
    ef2c:	e5802000 	str	r2, [r0]
    ef30:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    ef34:	e59f2090 	ldr	r2, [pc, #144]	; efcc <CSerialDevice::~CSerialDevice()+0xb0>
    ef38:	e5823038 	str	r3, [r2, #56]	; 0x38
    ef3c:	e5823030 	str	r3, [r2, #48]	; 0x30
    ef40:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    ef44:	e5d030a9 	ldrb	r3, [r0, #169]	; 0xa9
    ef48:	e3530000 	cmp	r3, #0
    ef4c:	0a000006 	beq	ef6c <CSerialDevice::~CSerialDevice()+0x50>
    ef50:	e59000a4 	ldr	r0, [r0, #164]	; 0xa4
    ef54:	e3500000 	cmp	r0, #0
    ef58:	0a000014 	beq	efb0 <CSerialDevice::~CSerialDevice()+0x94>
    ef5c:	e5d430a8 	ldrb	r3, [r4, #168]	; 0xa8
    ef60:	e3530000 	cmp	r3, #0
    ef64:	0a00000e 	beq	efa4 <CSerialDevice::~CSerialDevice()+0x88>
    ef68:	ebfff2b3 	bl	ba3c <CInterruptSystem::DisconnectFIQ()>
    ef6c:	e3a03000 	mov	r3, #0
    ef70:	e284007c 	add	r0, r4, #124	; 0x7c
    ef74:	e58430a4 	str	r3, [r4, #164]	; 0xa4
    ef78:	ebffef2e 	bl	ac38 <CGPIOPin::~CGPIOPin()>
    ef7c:	e2840054 	add	r0, r4, #84	; 0x54
    ef80:	ebffef2c 	bl	ac38 <CGPIOPin::~CGPIOPin()>
    ef84:	e284002c 	add	r0, r4, #44	; 0x2c
    ef88:	ebffef2a 	bl	ac38 <CGPIOPin::~CGPIOPin()>
    ef8c:	e2840004 	add	r0, r4, #4
    ef90:	ebffef28 	bl	ac38 <CGPIOPin::~CGPIOPin()>
    ef94:	e1a00004 	mov	r0, r4
    ef98:	eb000f7f 	bl	12d9c <CDevice::~CDevice()>
    ef9c:	e1a00004 	mov	r0, r4
    efa0:	e8bd8010 	pop	{r4, pc}
    efa4:	e3a01039 	mov	r1, #57	; 0x39
    efa8:	ebfff31e 	bl	bc28 <CInterruptSystem::DisconnectIRQ(unsigned int)>
    efac:	eaffffee 	b	ef6c <CSerialDevice::~CSerialDevice()+0x50>
    efb0:	e59f0018 	ldr	r0, [pc, #24]	; efd0 <CSerialDevice::~CSerialDevice()+0xb4>
    efb4:	e3a02079 	mov	r2, #121	; 0x79
    efb8:	e59f1014 	ldr	r1, [pc, #20]	; efd4 <CSerialDevice::~CSerialDevice()+0xb8>
    efbc:	eb000d34 	bl	12494 <assertion_failed>
    efc0:	e59400a4 	ldr	r0, [r4, #164]	; 0xa4
    efc4:	eaffffe4 	b	ef5c <CSerialDevice::~CSerialDevice()+0x40>
    efc8:	000142ec 	.word	0x000142ec
    efcc:	20201000 	.word	0x20201000
    efd0:	00014394 	.word	0x00014394
    efd4:	00014300 	.word	0x00014300

0000efd8 <CSerialDevice::~CSerialDevice()>:
    efd8:	e92d4010 	push	{r4, lr}
    efdc:	e1a04000 	mov	r4, r0
    efe0:	ebffffcd 	bl	ef1c <CSerialDevice::~CSerialDevice()>
    efe4:	e1a00004 	mov	r0, r4
    efe8:	e59f1008 	ldr	r1, [pc, #8]	; eff8 <CSerialDevice::~CSerialDevice()+0x20>
    efec:	eb000b9e 	bl	11e6c <operator delete(void*, unsigned int)>
    eff0:	e1a00004 	mov	r0, r4
    eff4:	e8bd8010 	pop	{r4, pc}
    eff8:	000010d8 	.word	0x000010d8
    effc:	00000000 	.word	0x00000000

0000f000 <CString::~CString()>:
    f000:	e92d4010 	push	{r4, lr}
    f004:	e1a04000 	mov	r4, r0
    f008:	e5900004 	ldr	r0, [r0, #4]
    f00c:	e59f3014 	ldr	r3, [pc, #20]	; f028 <CString::~CString()+0x28>
    f010:	e3500000 	cmp	r0, #0
    f014:	e5843000 	str	r3, [r4]
    f018:	0a000000 	beq	f020 <CString::~CString()+0x20>
    f01c:	eb000b91 	bl	11e68 <operator delete[](void*)>
    f020:	e1a00004 	mov	r0, r4
    f024:	e8bd8010 	pop	{r4, pc}
    f028:	000143ec 	.word	0x000143ec

0000f02c <CString::~CString()>:
    f02c:	e92d4010 	push	{r4, lr}
    f030:	e1a04000 	mov	r4, r0
    f034:	e5900004 	ldr	r0, [r0, #4]
    f038:	e59f3020 	ldr	r3, [pc, #32]	; f060 <CString::~CString()+0x34>
    f03c:	e3500000 	cmp	r0, #0
    f040:	e5843000 	str	r3, [r4]
    f044:	0a000000 	beq	f04c <CString::~CString()+0x20>
    f048:	eb000b86 	bl	11e68 <operator delete[](void*)>
    f04c:	e1a00004 	mov	r0, r4
    f050:	e3a01010 	mov	r1, #16
    f054:	eb000b84 	bl	11e6c <operator delete(void*, unsigned int)>
    f058:	e1a00004 	mov	r0, r4
    f05c:	e8bd8010 	pop	{r4, pc}
    f060:	000143ec 	.word	0x000143ec

0000f064 <CString::ReserveSpace(unsigned int) [clone .part.0]>:
    f064:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    f068:	e990002c 	ldmib	r0, {r2, r3, r5}
    f06c:	e0455002 	sub	r5, r5, r2
    f070:	e0851001 	add	r1, r5, r1
    f074:	e2812001 	add	r2, r1, #1
    f078:	e1520003 	cmp	r2, r3
    f07c:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
    f080:	e1a04000 	mov	r4, r0
    f084:	e2816041 	add	r6, r1, #65	; 0x41
    f088:	e1a00006 	mov	r0, r6
    f08c:	eb000b73 	bl	11e60 <operator new[](unsigned int)>
    f090:	e3a02000 	mov	r2, #0
    f094:	e594300c 	ldr	r3, [r4, #12]
    f098:	e1a07000 	mov	r7, r0
    f09c:	e5c32000 	strb	r2, [r3]
    f0a0:	e5941004 	ldr	r1, [r4, #4]
    f0a4:	eb00084c 	bl	111dc <strcpy>
    f0a8:	e5940004 	ldr	r0, [r4, #4]
    f0ac:	e3500000 	cmp	r0, #0
    f0b0:	0a000000 	beq	f0b8 <CString::ReserveSpace(unsigned int) [clone .part.0]+0x54>
    f0b4:	eb000b6b 	bl	11e68 <operator delete[](void*)>
    f0b8:	e0875005 	add	r5, r7, r5
    f0bc:	e584500c 	str	r5, [r4, #12]
    f0c0:	e5847004 	str	r7, [r4, #4]
    f0c4:	e5846008 	str	r6, [r4, #8]
    f0c8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000f0cc <CString::CString()>:
    f0cc:	e3a02000 	mov	r2, #0
    f0d0:	e59f1008 	ldr	r1, [pc, #8]	; f0e0 <CString::CString()+0x14>
    f0d4:	e5802008 	str	r2, [r0, #8]
    f0d8:	e8800006 	stm	r0, {r1, r2}
    f0dc:	e12fff1e 	bx	lr
    f0e0:	000143ec 	.word	0x000143ec

0000f0e4 <CString::CString(char const*)>:
    f0e4:	e92d4070 	push	{r4, r5, r6, lr}
    f0e8:	e1a04000 	mov	r4, r0
    f0ec:	e59f302c 	ldr	r3, [pc, #44]	; f120 <CString::CString(char const*)+0x3c>
    f0f0:	e1a00001 	mov	r0, r1
    f0f4:	e5843000 	str	r3, [r4]
    f0f8:	e1a05001 	mov	r5, r1
    f0fc:	eb0007b8 	bl	10fe4 <strlen>
    f100:	e2800001 	add	r0, r0, #1
    f104:	e5840008 	str	r0, [r4, #8]
    f108:	eb000b54 	bl	11e60 <operator new[](unsigned int)>
    f10c:	e1a01005 	mov	r1, r5
    f110:	e5840004 	str	r0, [r4, #4]
    f114:	eb000830 	bl	111dc <strcpy>
    f118:	e1a00004 	mov	r0, r4
    f11c:	e8bd8070 	pop	{r4, r5, r6, pc}
    f120:	000143ec 	.word	0x000143ec

0000f124 <CString::operator char const*() const>:
    f124:	e5900004 	ldr	r0, [r0, #4]
    f128:	e59f3008 	ldr	r3, [pc, #8]	; f138 <CString::operator char const*() const+0x14>
    f12c:	e3500000 	cmp	r0, #0
    f130:	01a00003 	moveq	r0, r3
    f134:	e12fff1e 	bx	lr
    f138:	00014688 	.word	0x00014688

0000f13c <CString::operator=(char const*)>:
    f13c:	e92d4070 	push	{r4, r5, r6, lr}
    f140:	e1a04000 	mov	r4, r0
    f144:	e5900004 	ldr	r0, [r0, #4]
    f148:	e1a05001 	mov	r5, r1
    f14c:	e3500000 	cmp	r0, #0
    f150:	0a000000 	beq	f158 <CString::operator=(char const*)+0x1c>
    f154:	eb000b43 	bl	11e68 <operator delete[](void*)>
    f158:	e1a00005 	mov	r0, r5
    f15c:	eb0007a0 	bl	10fe4 <strlen>
    f160:	e2800001 	add	r0, r0, #1
    f164:	e5840008 	str	r0, [r4, #8]
    f168:	eb000b3c 	bl	11e60 <operator new[](unsigned int)>
    f16c:	e1a01005 	mov	r1, r5
    f170:	e5840004 	str	r0, [r4, #4]
    f174:	eb000818 	bl	111dc <strcpy>
    f178:	e5940004 	ldr	r0, [r4, #4]
    f17c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000f180 <CString::operator=(CString const&)>:
    f180:	e92d4070 	push	{r4, r5, r6, lr}
    f184:	e1a04000 	mov	r4, r0
    f188:	e5900004 	ldr	r0, [r0, #4]
    f18c:	e1a06001 	mov	r6, r1
    f190:	e3500000 	cmp	r0, #0
    f194:	0a000000 	beq	f19c <CString::operator=(CString const&)+0x1c>
    f198:	eb000b32 	bl	11e68 <operator delete[](void*)>
    f19c:	e5960004 	ldr	r0, [r6, #4]
    f1a0:	e59f5030 	ldr	r5, [pc, #48]	; f1d8 <CString::operator=(CString const&)+0x58>
    f1a4:	e3500000 	cmp	r0, #0
    f1a8:	01a00005 	moveq	r0, r5
    f1ac:	eb00078c 	bl	10fe4 <strlen>
    f1b0:	e2800001 	add	r0, r0, #1
    f1b4:	e5840008 	str	r0, [r4, #8]
    f1b8:	eb000b28 	bl	11e60 <operator new[](unsigned int)>
    f1bc:	e5840004 	str	r0, [r4, #4]
    f1c0:	e5961004 	ldr	r1, [r6, #4]
    f1c4:	e3510000 	cmp	r1, #0
    f1c8:	01a01005 	moveq	r1, r5
    f1cc:	eb000802 	bl	111dc <strcpy>
    f1d0:	e1a00004 	mov	r0, r4
    f1d4:	e8bd8070 	pop	{r4, r5, r6, pc}
    f1d8:	00014688 	.word	0x00014688

0000f1dc <CString::GetLength() const>:
    f1dc:	e5900004 	ldr	r0, [r0, #4]
    f1e0:	e3500000 	cmp	r0, #0
    f1e4:	012fff1e 	bxeq	lr
    f1e8:	ea00077d 	b	10fe4 <strlen>

0000f1ec <CString::Append(char const*)>:
    f1ec:	e92d4070 	push	{r4, r5, r6, lr}
    f1f0:	e3a03001 	mov	r3, #1
    f1f4:	e1a04000 	mov	r4, r0
    f1f8:	e5900004 	ldr	r0, [r0, #4]
    f1fc:	e1a06001 	mov	r6, r1
    f200:	e3500000 	cmp	r0, #0
    f204:	e5843008 	str	r3, [r4, #8]
    f208:	0a000003 	beq	f21c <CString::Append(char const*)+0x30>
    f20c:	eb000774 	bl	10fe4 <strlen>
    f210:	e5943008 	ldr	r3, [r4, #8]
    f214:	e0830000 	add	r0, r3, r0
    f218:	e5840008 	str	r0, [r4, #8]
    f21c:	e1a00006 	mov	r0, r6
    f220:	eb00076f 	bl	10fe4 <strlen>
    f224:	e5943008 	ldr	r3, [r4, #8]
    f228:	e0800003 	add	r0, r0, r3
    f22c:	e5840008 	str	r0, [r4, #8]
    f230:	eb000b0a 	bl	11e60 <operator new[](unsigned int)>
    f234:	e5941004 	ldr	r1, [r4, #4]
    f238:	e1a05000 	mov	r5, r0
    f23c:	e3510000 	cmp	r1, #0
    f240:	05c01000 	strbeq	r1, [r0]
    f244:	0a000004 	beq	f25c <CString::Append(char const*)+0x70>
    f248:	eb0007e3 	bl	111dc <strcpy>
    f24c:	e5940004 	ldr	r0, [r4, #4]
    f250:	e3500000 	cmp	r0, #0
    f254:	0a000000 	beq	f25c <CString::Append(char const*)+0x70>
    f258:	eb000b02 	bl	11e68 <operator delete[](void*)>
    f25c:	e1a01006 	mov	r1, r6
    f260:	e1a00005 	mov	r0, r5
    f264:	eb0007fa 	bl	11254 <strcat>
    f268:	e5845004 	str	r5, [r4, #4]
    f26c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000f270 <CString::Compare(char const*) const>:
    f270:	e5900004 	ldr	r0, [r0, #4]
    f274:	ea000764 	b	1100c <strcmp>

0000f278 <CString::Find(char) const>:
    f278:	e5902004 	ldr	r2, [r0, #4]
    f27c:	e1d230d0 	ldrsb	r3, [r2]
    f280:	e3530000 	cmp	r3, #0
    f284:	0a000009 	beq	f2b0 <CString::Find(char) const+0x38>
    f288:	e1510003 	cmp	r1, r3
    f28c:	e3a00000 	mov	r0, #0
    f290:	1a000002 	bne	f2a0 <CString::Find(char) const+0x28>
    f294:	ea000007 	b	f2b8 <CString::Find(char) const+0x40>
    f298:	e1530001 	cmp	r3, r1
    f29c:	012fff1e 	bxeq	lr
    f2a0:	e1f230d1 	ldrsb	r3, [r2, #1]!
    f2a4:	e2800001 	add	r0, r0, #1
    f2a8:	e3530000 	cmp	r3, #0
    f2ac:	1afffff9 	bne	f298 <CString::Find(char) const+0x20>
    f2b0:	e3e00000 	mvn	r0, #0
    f2b4:	e12fff1e 	bx	lr
    f2b8:	e12fff1e 	bx	lr

0000f2bc <CString::PutChar(char, unsigned int)>:
    f2bc:	e92d4070 	push	{r4, r5, r6, lr}
    f2c0:	e2524000 	subs	r4, r2, #0
    f2c4:	08bd8070 	popeq	{r4, r5, r6, pc}
    f2c8:	e1a06001 	mov	r6, r1
    f2cc:	e1a01004 	mov	r1, r4
    f2d0:	e1a05000 	mov	r5, r0
    f2d4:	ebffff62 	bl	f064 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f2d8:	e2443001 	sub	r3, r4, #1
    f2dc:	e595200c 	ldr	r2, [r5, #12]
    f2e0:	e2433001 	sub	r3, r3, #1
    f2e4:	e2820001 	add	r0, r2, #1
    f2e8:	e3730001 	cmn	r3, #1
    f2ec:	e585000c 	str	r0, [r5, #12]
    f2f0:	e5c26000 	strb	r6, [r2]
    f2f4:	1afffff8 	bne	f2dc <CString::PutChar(char, unsigned int)+0x20>
    f2f8:	e8bd8070 	pop	{r4, r5, r6, pc}

0000f2fc <CString::PutString(char const*)>:
    f2fc:	e92d4070 	push	{r4, r5, r6, lr}
    f300:	e1a04000 	mov	r4, r0
    f304:	e1a00001 	mov	r0, r1
    f308:	e1a05001 	mov	r5, r1
    f30c:	eb000734 	bl	10fe4 <strlen>
    f310:	e2506000 	subs	r6, r0, #0
    f314:	0a000002 	beq	f324 <CString::PutString(char const*)+0x28>
    f318:	e1a01006 	mov	r1, r6
    f31c:	e1a00004 	mov	r0, r4
    f320:	ebffff4f 	bl	f064 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f324:	e1a01005 	mov	r1, r5
    f328:	e594000c 	ldr	r0, [r4, #12]
    f32c:	eb0007aa 	bl	111dc <strcpy>
    f330:	e594100c 	ldr	r1, [r4, #12]
    f334:	e0811006 	add	r1, r1, r6
    f338:	e584100c 	str	r1, [r4, #12]
    f33c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000f340 <CString::Replace(char const*, char const*)>:
    f340:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f344:	e1d180d0 	ldrsb	r8, [r1]
    f348:	e24dd014 	sub	sp, sp, #20
    f34c:	e3580000 	cmp	r8, #0
    f350:	1a000002 	bne	f360 <CString::Replace(char const*, char const*)+0x20>
    f354:	e1a00008 	mov	r0, r8
    f358:	e28dd014 	add	sp, sp, #20
    f35c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f360:	e1a0a000 	mov	sl, r0
    f364:	e1a07001 	mov	r7, r1
    f368:	e5901004 	ldr	r1, [r0, #4]
    f36c:	e1a0000d 	mov	r0, sp
    f370:	e1a09002 	mov	r9, r2
    f374:	ebffff5a 	bl	f0e4 <CString::CString(char const*)>
    f378:	e59a0004 	ldr	r0, [sl, #4]
    f37c:	e3500000 	cmp	r0, #0
    f380:	0a000000 	beq	f388 <CString::Replace(char const*, char const*)+0x48>
    f384:	eb000ab7 	bl	11e68 <operator delete[](void*)>
    f388:	e3a00040 	mov	r0, #64	; 0x40
    f38c:	e58a0008 	str	r0, [sl, #8]
    f390:	eb000ab2 	bl	11e60 <operator new[](unsigned int)>
    f394:	e3a08000 	mov	r8, #0
    f398:	e3a06001 	mov	r6, #1
    f39c:	e59d4004 	ldr	r4, [sp, #4]
    f3a0:	e58a0004 	str	r0, [sl, #4]
    f3a4:	e58a000c 	str	r0, [sl, #12]
    f3a8:	e1d710d0 	ldrsb	r1, [r7]
    f3ac:	e1a00004 	mov	r0, r4
    f3b0:	eb0007b8 	bl	11298 <strchr>
    f3b4:	e2505000 	subs	r5, r0, #0
    f3b8:	0a00002d 	beq	f474 <CString::Replace(char const*, char const*)+0x134>
    f3bc:	e1540005 	cmp	r4, r5
    f3c0:	2a000039 	bcs	f4ac <CString::Replace(char const*, char const*)+0x16c>
    f3c4:	e1a01006 	mov	r1, r6
    f3c8:	e1a0000a 	mov	r0, sl
    f3cc:	e0d4b0d1 	ldrsb	fp, [r4], #1
    f3d0:	ebffff23 	bl	f064 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f3d4:	e59a300c 	ldr	r3, [sl, #12]
    f3d8:	e1550004 	cmp	r5, r4
    f3dc:	e2832001 	add	r2, r3, #1
    f3e0:	e58a200c 	str	r2, [sl, #12]
    f3e4:	e5c3b000 	strb	fp, [r3]
    f3e8:	1afffff5 	bne	f3c4 <CString::Replace(char const*, char const*)+0x84>
    f3ec:	e1a0c005 	mov	ip, r5
    f3f0:	e2854001 	add	r4, r5, #1
    f3f4:	e1d730d1 	ldrsb	r3, [r7, #1]
    f3f8:	e2871001 	add	r1, r7, #1
    f3fc:	e3530000 	cmp	r3, #0
    f400:	0a00000c 	beq	f438 <CString::Replace(char const*, char const*)+0xf8>
    f404:	e1d520d1 	ldrsb	r2, [r5, #1]
    f408:	e1520003 	cmp	r2, r3
    f40c:	1a00000e 	bne	f44c <CString::Replace(char const*, char const*)+0x10c>
    f410:	e2853002 	add	r3, r5, #2
    f414:	ea000003 	b	f428 <CString::Replace(char const*, char const*)+0xe8>
    f418:	e1d400d0 	ldrsb	r0, [r4]
    f41c:	e2833001 	add	r3, r3, #1
    f420:	e1500002 	cmp	r0, r2
    f424:	1a000008 	bne	f44c <CString::Replace(char const*, char const*)+0x10c>
    f428:	e1f120d1 	ldrsb	r2, [r1, #1]!
    f42c:	e1a04003 	mov	r4, r3
    f430:	e3520000 	cmp	r2, #0
    f434:	1afffff7 	bne	f418 <CString::Replace(char const*, char const*)+0xd8>
    f438:	e1a01009 	mov	r1, r9
    f43c:	e1a0000a 	mov	r0, sl
    f440:	e2888001 	add	r8, r8, #1
    f444:	ebffffac 	bl	f2fc <CString::PutString(char const*)>
    f448:	eaffffd6 	b	f3a8 <CString::Replace(char const*, char const*)+0x68>
    f44c:	e1a01006 	mov	r1, r6
    f450:	e1a0000a 	mov	r0, sl
    f454:	e1dc50d0 	ldrsb	r5, [ip]
    f458:	e28c4001 	add	r4, ip, #1
    f45c:	ebffff00 	bl	f064 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f460:	e59a300c 	ldr	r3, [sl, #12]
    f464:	e2832001 	add	r2, r3, #1
    f468:	e58a200c 	str	r2, [sl, #12]
    f46c:	e5c35000 	strb	r5, [r3]
    f470:	eaffffcc 	b	f3a8 <CString::Replace(char const*, char const*)+0x68>
    f474:	e1a0000a 	mov	r0, sl
    f478:	e1a01004 	mov	r1, r4
    f47c:	ebffff9e 	bl	f2fc <CString::PutString(char const*)>
    f480:	e59a200c 	ldr	r2, [sl, #12]
    f484:	e59f302c 	ldr	r3, [pc, #44]	; f4b8 <CString::Replace(char const*, char const*)+0x178>
    f488:	e5c25000 	strb	r5, [r2]
    f48c:	e59d0004 	ldr	r0, [sp, #4]
    f490:	e58d3000 	str	r3, [sp]
    f494:	e3500000 	cmp	r0, #0
    f498:	0affffad 	beq	f354 <CString::Replace(char const*, char const*)+0x14>
    f49c:	eb000a71 	bl	11e68 <operator delete[](void*)>
    f4a0:	e1a00008 	mov	r0, r8
    f4a4:	e28dd014 	add	sp, sp, #20
    f4a8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f4ac:	e1a0c004 	mov	ip, r4
    f4b0:	e2854001 	add	r4, r5, #1
    f4b4:	eaffffce 	b	f3f4 <CString::Replace(char const*, char const*)+0xb4>
    f4b8:	000143ec 	.word	0x000143ec

0000f4bc <CString::ReserveSpace(unsigned int)>:
    f4bc:	e3510000 	cmp	r1, #0
    f4c0:	012fff1e 	bxeq	lr
    f4c4:	eafffee6 	b	f064 <CString::ReserveSpace(unsigned int) [clone .part.0]>

0000f4c8 <CString::ntoa(char*, unsigned long, unsigned int, bool)>:
    f4c8:	e1510002 	cmp	r1, r2
    f4cc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    f4d0:	e1a05001 	mov	r5, r1
    f4d4:	e1a07002 	mov	r7, r2
    f4d8:	e1a09000 	mov	r9, r0
    f4dc:	e1a08003 	mov	r8, r3
    f4e0:	23a0a001 	movcs	sl, #1
    f4e4:	3a000022 	bcc	f574 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0xac>
    f4e8:	e00a0a97 	mul	sl, r7, sl
    f4ec:	e1a00005 	mov	r0, r5
    f4f0:	e1a0100a 	mov	r1, sl
    f4f4:	eb0010f8 	bl	138dc <__aeabi_uidiv>
    f4f8:	e1500007 	cmp	r0, r7
    f4fc:	e1a04000 	mov	r4, r0
    f500:	2afffff8 	bcs	f4e8 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x20>
    f504:	e3580000 	cmp	r8, #0
    f508:	13a08037 	movne	r8, #55	; 0x37
    f50c:	03a08057 	moveq	r8, #87	; 0x57
    f510:	e1a06009 	mov	r6, r9
    f514:	ea000003 	b	f528 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x60>
    f518:	e1a0100a 	mov	r1, sl
    f51c:	e1a00005 	mov	r0, r5
    f520:	eb0010ed 	bl	138dc <__aeabi_uidiv>
    f524:	e1a04000 	mov	r4, r0
    f528:	e1a00005 	mov	r0, r5
    f52c:	e1a0100a 	mov	r1, sl
    f530:	eb001126 	bl	139d0 <__aeabi_uidivmod>
    f534:	e3540009 	cmp	r4, #9
    f538:	e2843030 	add	r3, r4, #48	; 0x30
    f53c:	80884004 	addhi	r4, r8, r4
    f540:	96af4073 	sxtbls	r4, r3
    f544:	86af4074 	sxtbhi	r4, r4
    f548:	e2866001 	add	r6, r6, #1
    f54c:	e1a0000a 	mov	r0, sl
    f550:	e1a05001 	mov	r5, r1
    f554:	e5464001 	strb	r4, [r6, #-1]
    f558:	e1a01007 	mov	r1, r7
    f55c:	eb0010de 	bl	138dc <__aeabi_uidiv>
    f560:	e250a000 	subs	sl, r0, #0
    f564:	1affffeb 	bne	f518 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x50>
    f568:	e5c6a000 	strb	sl, [r6]
    f56c:	e1a00009 	mov	r0, r9
    f570:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    f574:	e1a04001 	mov	r4, r1
    f578:	e3a0a001 	mov	sl, #1
    f57c:	eaffffe0 	b	f504 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x3c>

0000f580 <CString::ftoa(char*, double, unsigned int)>:
    f580:	eeb50bc0 	vcmpe.f64	d0, #0.0
    f584:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    f588:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f58c:	ed9f7b95 	vldr	d7, [pc, #596]	; f7e8 <CString::ftoa(char*, double, unsigned int)+0x268>
    f590:	ed2d8b02 	vpush	{d8}
    f594:	eeb08b40 	vmov.f64	d8, d0
    f598:	4eb18b40 	vnegmi.f64	d8, d0
    f59c:	43a0302d 	movmi	r3, #45	; 0x2d
    f5a0:	eeb48bc7 	vcmpe.f64	d8, d7
    f5a4:	45c03000 	strbmi	r3, [r0]
    f5a8:	4280b001 	addmi	fp, r0, #1
    f5ac:	51a0b000 	movpl	fp, r0
    f5b0:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    f5b4:	e24dd01c 	sub	sp, sp, #28
    f5b8:	e1a0a000 	mov	sl, r0
    f5bc:	e58d1004 	str	r1, [sp, #4]
    f5c0:	ca000079 	bgt	f7ac <CString::ftoa(char*, double, unsigned int)+0x22c>
    f5c4:	eefc7bc8 	vcvt.u32.f64	s15, d8
    f5c8:	ee177a90 	vmov	r7, s15
    f5cc:	e3570009 	cmp	r7, #9
    f5d0:	83a04001 	movhi	r4, #1
    f5d4:	9a00007b 	bls	f7c8 <CString::ftoa(char*, double, unsigned int)+0x248>
    f5d8:	e0844104 	add	r4, r4, r4, lsl #2
    f5dc:	e1a04084 	lsl	r4, r4, #1
    f5e0:	e1a01004 	mov	r1, r4
    f5e4:	e1a00007 	mov	r0, r7
    f5e8:	eb0010bb 	bl	138dc <__aeabi_uidiv>
    f5ec:	e3500009 	cmp	r0, #9
    f5f0:	e1a05000 	mov	r5, r0
    f5f4:	8afffff7 	bhi	f5d8 <CString::ftoa(char*, double, unsigned int)+0x58>
    f5f8:	e1a0600b 	mov	r6, fp
    f5fc:	e1a09007 	mov	r9, r7
    f600:	e59f81f0 	ldr	r8, [pc, #496]	; f7f8 <CString::ftoa(char*, double, unsigned int)+0x278>
    f604:	ea000003 	b	f618 <CString::ftoa(char*, double, unsigned int)+0x98>
    f608:	e1a01004 	mov	r1, r4
    f60c:	e1a00009 	mov	r0, r9
    f610:	eb0010b1 	bl	138dc <__aeabi_uidiv>
    f614:	e1a05000 	mov	r5, r0
    f618:	e1a00009 	mov	r0, r9
    f61c:	e1a01004 	mov	r1, r4
    f620:	eb0010ea 	bl	139d0 <__aeabi_uidivmod>
    f624:	e0843498 	umull	r3, r4, r8, r4
    f628:	e3550009 	cmp	r5, #9
    f62c:	e2852030 	add	r2, r5, #48	; 0x30
    f630:	82855057 	addhi	r5, r5, #87	; 0x57
    f634:	96af5072 	sxtbls	r5, r2
    f638:	86af5075 	sxtbhi	r5, r5
    f63c:	e2866001 	add	r6, r6, #1
    f640:	e1b041a4 	lsrs	r4, r4, #3
    f644:	e1a09001 	mov	r9, r1
    f648:	e5465001 	strb	r5, [r6, #-1]
    f64c:	1affffed 	bne	f608 <CString::ftoa(char*, double, unsigned int)+0x88>
    f650:	e59d3004 	ldr	r3, [sp, #4]
    f654:	e5c64000 	strb	r4, [r6]
    f658:	e3530000 	cmp	r3, #0
    f65c:	1a000003 	bne	f670 <CString::ftoa(char*, double, unsigned int)+0xf0>
    f660:	e1a0000a 	mov	r0, sl
    f664:	e28dd01c 	add	sp, sp, #28
    f668:	ecbd8b02 	vpop	{d8}
    f66c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f670:	e1a0000b 	mov	r0, fp
    f674:	eb00065a 	bl	10fe4 <strlen>
    f678:	e59d3004 	ldr	r3, [sp, #4]
    f67c:	e08b2000 	add	r2, fp, r0
    f680:	e3530009 	cmp	r3, #9
    f684:	31a09003 	movcc	r9, r3
    f688:	23a09009 	movcs	r9, #9
    f68c:	e3a0302e 	mov	r3, #46	; 0x2e
    f690:	e3590001 	cmp	r9, #1
    f694:	e7cb3000 	strb	r3, [fp, r0]
    f698:	e58d2004 	str	r2, [sp, #4]
    f69c:	e282b001 	add	fp, r2, #1
    f6a0:	0a00004e 	beq	f7e0 <CString::ftoa(char*, double, unsigned int)+0x260>
    f6a4:	e3a02002 	mov	r2, #2
    f6a8:	e3a0300a 	mov	r3, #10
    f6ac:	e2822001 	add	r2, r2, #1
    f6b0:	e0833103 	add	r3, r3, r3, lsl #2
    f6b4:	e1520009 	cmp	r2, r9
    f6b8:	e1a03083 	lsl	r3, r3, #1
    f6bc:	9afffffa 	bls	f6ac <CString::ftoa(char*, double, unsigned int)+0x12c>
    f6c0:	ee073a90 	vmov	s15, r3
    f6c4:	eeb87b67 	vcvt.f64.u32	d7, s15
    f6c8:	ee067a90 	vmov	s13, r7
    f6cc:	eeb86b66 	vcvt.f64.u32	d6, s13
    f6d0:	ee386b46 	vsub.f64	d6, d8, d6
    f6d4:	ee267b07 	vmul.f64	d7, d6, d7
    f6d8:	eefc7bc7 	vcvt.u32.f64	s15, d7
    f6dc:	ee178a90 	vmov	r8, s15
    f6e0:	e3580009 	cmp	r8, #9
    f6e4:	83a04001 	movhi	r4, #1
    f6e8:	9a000039 	bls	f7d4 <CString::ftoa(char*, double, unsigned int)+0x254>
    f6ec:	e0844104 	add	r4, r4, r4, lsl #2
    f6f0:	e1a04084 	lsl	r4, r4, #1
    f6f4:	e1a01004 	mov	r1, r4
    f6f8:	e1a00008 	mov	r0, r8
    f6fc:	eb001076 	bl	138dc <__aeabi_uidiv>
    f700:	e3500009 	cmp	r0, #9
    f704:	e1a05000 	mov	r5, r0
    f708:	8afffff7 	bhi	f6ec <CString::ftoa(char*, double, unsigned int)+0x16c>
    f70c:	e28d600c 	add	r6, sp, #12
    f710:	e59f70e0 	ldr	r7, [pc, #224]	; f7f8 <CString::ftoa(char*, double, unsigned int)+0x278>
    f714:	ea000003 	b	f728 <CString::ftoa(char*, double, unsigned int)+0x1a8>
    f718:	e1a01004 	mov	r1, r4
    f71c:	e1a00008 	mov	r0, r8
    f720:	eb00106d 	bl	138dc <__aeabi_uidiv>
    f724:	e1a05000 	mov	r5, r0
    f728:	e1a00008 	mov	r0, r8
    f72c:	e1a01004 	mov	r1, r4
    f730:	eb0010a6 	bl	139d0 <__aeabi_uidivmod>
    f734:	e0843497 	umull	r3, r4, r7, r4
    f738:	e3550009 	cmp	r5, #9
    f73c:	e2852030 	add	r2, r5, #48	; 0x30
    f740:	82855057 	addhi	r5, r5, #87	; 0x57
    f744:	96af5072 	sxtbls	r5, r2
    f748:	86af5075 	sxtbhi	r5, r5
    f74c:	e2866001 	add	r6, r6, #1
    f750:	e1b041a4 	lsrs	r4, r4, #3
    f754:	e1a08001 	mov	r8, r1
    f758:	e5465001 	strb	r5, [r6, #-1]
    f75c:	1affffed 	bne	f718 <CString::ftoa(char*, double, unsigned int)+0x198>
    f760:	e28d000c 	add	r0, sp, #12
    f764:	e5c64000 	strb	r4, [r6]
    f768:	eb00061d 	bl	10fe4 <strlen>
    f76c:	e0599000 	subs	r9, r9, r0
    f770:	0a000006 	beq	f790 <CString::ftoa(char*, double, unsigned int)+0x210>
    f774:	e3a02030 	mov	r2, #48	; 0x30
    f778:	e59d8004 	ldr	r8, [sp, #4]
    f77c:	e0883009 	add	r3, r8, r9
    f780:	e5e82001 	strb	r2, [r8, #1]!
    f784:	e1580003 	cmp	r8, r3
    f788:	1afffffc 	bne	f780 <CString::ftoa(char*, double, unsigned int)+0x200>
    f78c:	e08bb009 	add	fp, fp, r9
    f790:	e28d100c 	add	r1, sp, #12
    f794:	e1a0000b 	mov	r0, fp
    f798:	eb00068f 	bl	111dc <strcpy>
    f79c:	e1a0000a 	mov	r0, sl
    f7a0:	e28dd01c 	add	sp, sp, #28
    f7a4:	ecbd8b02 	vpop	{d8}
    f7a8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f7ac:	e1a0000b 	mov	r0, fp
    f7b0:	e59f1044 	ldr	r1, [pc, #68]	; f7fc <CString::ftoa(char*, double, unsigned int)+0x27c>
    f7b4:	eb000688 	bl	111dc <strcpy>
    f7b8:	e1a0000a 	mov	r0, sl
    f7bc:	e28dd01c 	add	sp, sp, #28
    f7c0:	ecbd8b02 	vpop	{d8}
    f7c4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f7c8:	ee175a90 	vmov	r5, s15
    f7cc:	e3a04001 	mov	r4, #1
    f7d0:	eaffff88 	b	f5f8 <CString::ftoa(char*, double, unsigned int)+0x78>
    f7d4:	ee175a90 	vmov	r5, s15
    f7d8:	e3a04001 	mov	r4, #1
    f7dc:	eaffffca 	b	f70c <CString::ftoa(char*, double, unsigned int)+0x18c>
    f7e0:	ed9f7b02 	vldr	d7, [pc, #8]	; f7f0 <CString::ftoa(char*, double, unsigned int)+0x270>
    f7e4:	eaffffb7 	b	f6c8 <CString::ftoa(char*, double, unsigned int)+0x148>
    f7e8:	ffe00000 	.word	0xffe00000
    f7ec:	41efffff 	.word	0x41efffff
    f7f0:	00000000 	.word	0x00000000
    f7f4:	40240000 	.word	0x40240000
    f7f8:	cccccccd 	.word	0xcccccccd
    f7fc:	000143f4 	.word	0x000143f4

0000f800 <CString::FormatV(char const*, std::__va_list)>:
    f800:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f804:	e1a0b000 	mov	fp, r0
    f808:	e5900004 	ldr	r0, [r0, #4]
    f80c:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    f810:	e3500000 	cmp	r0, #0
    f814:	e1a05001 	mov	r5, r1
    f818:	e58d2000 	str	r2, [sp]
    f81c:	0a000000 	beq	f824 <CString::FormatV(char const*, std::__va_list)+0x24>
    f820:	eb000990 	bl	11e68 <operator delete[](void*)>
    f824:	e3a00040 	mov	r0, #64	; 0x40
    f828:	e58b0008 	str	r0, [fp, #8]
    f82c:	eb00098b 	bl	11e60 <operator new[](unsigned int)>
    f830:	e58b0004 	str	r0, [fp, #4]
    f834:	e58b000c 	str	r0, [fp, #12]
    f838:	e1d540d0 	ldrsb	r4, [r5]
    f83c:	e3540000 	cmp	r4, #0
    f840:	0a0000a2 	beq	fad0 <CString::FormatV(char const*, std::__va_list)+0x2d0>
    f844:	e3540025 	cmp	r4, #37	; 0x25
    f848:	13a01001 	movne	r1, #1
    f84c:	11a0000b 	movne	r0, fp
    f850:	1a000152 	bne	fda0 <CString::FormatV(char const*, std::__va_list)+0x5a0>
    f854:	e1d560d1 	ldrsb	r6, [r5, #1]
    f858:	e3560025 	cmp	r6, #37	; 0x25
    f85c:	0a000165 	beq	fdf8 <CString::FormatV(char const*, std::__va_list)+0x5f8>
    f860:	e356002d 	cmp	r6, #45	; 0x2d
    f864:	03a03001 	moveq	r3, #1
    f868:	13a03000 	movne	r3, #0
    f86c:	01d560d2 	ldrsbeq	r6, [r5, #2]
    f870:	158d3004 	strne	r3, [sp, #4]
    f874:	058d3004 	streq	r3, [sp, #4]
    f878:	02855002 	addeq	r5, r5, #2
    f87c:	12855001 	addne	r5, r5, #1
    f880:	e3560030 	cmp	r6, #48	; 0x30
    f884:	03a03001 	moveq	r3, #1
    f888:	13a03000 	movne	r3, #0
    f88c:	01d560d1 	ldrsbeq	r6, [r5, #1]
    f890:	058d3008 	streq	r3, [sp, #8]
    f894:	00855003 	addeq	r5, r5, r3
    f898:	158d3008 	strne	r3, [sp, #8]
    f89c:	e2463030 	sub	r3, r6, #48	; 0x30
    f8a0:	e6ef3073 	uxtb	r3, r3
    f8a4:	e3530009 	cmp	r3, #9
    f8a8:	e3a04000 	mov	r4, #0
    f8ac:	8a000007 	bhi	f8d0 <CString::FormatV(char const*, std::__va_list)+0xd0>
    f8b0:	e0844104 	add	r4, r4, r4, lsl #2
    f8b4:	e0864084 	add	r4, r6, r4, lsl #1
    f8b8:	e1f560d1 	ldrsb	r6, [r5, #1]!
    f8bc:	e2444030 	sub	r4, r4, #48	; 0x30
    f8c0:	e2463030 	sub	r3, r6, #48	; 0x30
    f8c4:	e6ef3073 	uxtb	r3, r3
    f8c8:	e3530009 	cmp	r3, #9
    f8cc:	9afffff7 	bls	f8b0 <CString::FormatV(char const*, std::__va_list)+0xb0>
    f8d0:	e356002e 	cmp	r6, #46	; 0x2e
    f8d4:	0a000137 	beq	fdb8 <CString::FormatV(char const*, std::__va_list)+0x5b8>
    f8d8:	e3a01006 	mov	r1, #6
    f8dc:	e1d570d0 	ldrsb	r7, [r5]
    f8e0:	e357006c 	cmp	r7, #108	; 0x6c
    f8e4:	03a02001 	moveq	r2, #1
    f8e8:	01d570d1 	ldrsbeq	r7, [r5, #1]
    f8ec:	00855002 	addeq	r5, r5, r2
    f8f0:	e2473058 	sub	r3, r7, #88	; 0x58
    f8f4:	e3530020 	cmp	r3, #32
    f8f8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    f8fc:	ea00011c 	b	fd74 <CString::FormatV(char const*, std::__va_list)+0x574>
    f900:	0000fcf0 	.word	0x0000fcf0
    f904:	0000fd74 	.word	0x0000fd74
    f908:	0000fd74 	.word	0x0000fd74
    f90c:	0000fd74 	.word	0x0000fd74
    f910:	0000fd74 	.word	0x0000fd74
    f914:	0000fd74 	.word	0x0000fd74
    f918:	0000fd74 	.word	0x0000fd74
    f91c:	0000fd74 	.word	0x0000fd74
    f920:	0000fd74 	.word	0x0000fd74
    f924:	0000fd74 	.word	0x0000fd74
    f928:	0000fd74 	.word	0x0000fd74
    f92c:	0000fc7c 	.word	0x0000fc7c
    f930:	0000fb58 	.word	0x0000fb58
    f934:	0000fd74 	.word	0x0000fd74
    f938:	0000fae0 	.word	0x0000fae0
    f93c:	0000fd74 	.word	0x0000fd74
    f940:	0000fd74 	.word	0x0000fd74
    f944:	0000fb58 	.word	0x0000fb58
    f948:	0000fd74 	.word	0x0000fd74
    f94c:	0000fd74 	.word	0x0000fd74
    f950:	0000fd74 	.word	0x0000fd74
    f954:	0000fd74 	.word	0x0000fd74
    f958:	0000fd74 	.word	0x0000fd74
    f95c:	0000f984 	.word	0x0000f984
    f960:	0000fcf0 	.word	0x0000fcf0
    f964:	0000fd74 	.word	0x0000fd74
    f968:	0000fd74 	.word	0x0000fd74
    f96c:	0000fd00 	.word	0x0000fd00
    f970:	0000fd74 	.word	0x0000fd74
    f974:	0000fcf8 	.word	0x0000fcf8
    f978:	0000fd74 	.word	0x0000fd74
    f97c:	0000fd74 	.word	0x0000fd74
    f980:	0000fcf0 	.word	0x0000fcf0
    f984:	e3a09008 	mov	r9, #8
    f988:	e59d3000 	ldr	r3, [sp]
    f98c:	e5936000 	ldr	r6, [r3]
    f990:	e2833004 	add	r3, r3, #4
    f994:	e1560009 	cmp	r6, r9
    f998:	e58d3000 	str	r3, [sp]
    f99c:	23a0a001 	movcs	sl, #1
    f9a0:	3a0001aa 	bcc	10050 <CString::FormatV(char const*, std::__va_list)+0x850>
    f9a4:	e00a0a99 	mul	sl, r9, sl
    f9a8:	e1a00006 	mov	r0, r6
    f9ac:	e1a0100a 	mov	r1, sl
    f9b0:	eb000fc9 	bl	138dc <__aeabi_uidiv>
    f9b4:	e1590000 	cmp	r9, r0
    f9b8:	9afffff9 	bls	f9a4 <CString::FormatV(char const*, std::__va_list)+0x1a4>
    f9bc:	e1a03000 	mov	r3, r0
    f9c0:	e3570058 	cmp	r7, #88	; 0x58
    f9c4:	13a07057 	movne	r7, #87	; 0x57
    f9c8:	03a07037 	moveq	r7, #55	; 0x37
    f9cc:	e1a02005 	mov	r2, r5
    f9d0:	e58d400c 	str	r4, [sp, #12]
    f9d4:	e1a0500a 	mov	r5, sl
    f9d8:	e1a04007 	mov	r4, r7
    f9dc:	e28d8010 	add	r8, sp, #16
    f9e0:	e1a07006 	mov	r7, r6
    f9e4:	e1a0a002 	mov	sl, r2
    f9e8:	e1a06003 	mov	r6, r3
    f9ec:	ea000003 	b	fa00 <CString::FormatV(char const*, std::__va_list)+0x200>
    f9f0:	e1a01005 	mov	r1, r5
    f9f4:	e1a00007 	mov	r0, r7
    f9f8:	eb000fb7 	bl	138dc <__aeabi_uidiv>
    f9fc:	e1a06000 	mov	r6, r0
    fa00:	e1a00007 	mov	r0, r7
    fa04:	e1a01005 	mov	r1, r5
    fa08:	eb000ff0 	bl	139d0 <__aeabi_uidivmod>
    fa0c:	e3560009 	cmp	r6, #9
    fa10:	e2862030 	add	r2, r6, #48	; 0x30
    fa14:	80846006 	addhi	r6, r4, r6
    fa18:	96af6072 	sxtbls	r6, r2
    fa1c:	86af6076 	sxtbhi	r6, r6
    fa20:	e2888001 	add	r8, r8, #1
    fa24:	e1a00005 	mov	r0, r5
    fa28:	e1a07001 	mov	r7, r1
    fa2c:	e5486001 	strb	r6, [r8, #-1]
    fa30:	e1a01009 	mov	r1, r9
    fa34:	eb000fa8 	bl	138dc <__aeabi_uidiv>
    fa38:	e2505000 	subs	r5, r0, #0
    fa3c:	1affffeb 	bne	f9f0 <CString::FormatV(char const*, std::__va_list)+0x1f0>
    fa40:	e1a0300a 	mov	r3, sl
    fa44:	e1a0a005 	mov	sl, r5
    fa48:	e28d0010 	add	r0, sp, #16
    fa4c:	e5c8a000 	strb	sl, [r8]
    fa50:	e1a05003 	mov	r5, r3
    fa54:	e59d400c 	ldr	r4, [sp, #12]
    fa58:	eb000561 	bl	10fe4 <strlen>
    fa5c:	e59d3004 	ldr	r3, [sp, #4]
    fa60:	e1a06000 	mov	r6, r0
    fa64:	e3530000 	cmp	r3, #0
    fa68:	1a0000eb 	bne	fe1c <CString::FormatV(char const*, std::__va_list)+0x61c>
    fa6c:	e1500004 	cmp	r0, r4
    fa70:	2a00000f 	bcs	fab4 <CString::FormatV(char const*, std::__va_list)+0x2b4>
    fa74:	e59d3008 	ldr	r3, [sp, #8]
    fa78:	e0444000 	sub	r4, r4, r0
    fa7c:	e3530000 	cmp	r3, #0
    fa80:	e1a01004 	mov	r1, r4
    fa84:	e1a0000b 	mov	r0, fp
    fa88:	03a07020 	moveq	r7, #32
    fa8c:	13a07030 	movne	r7, #48	; 0x30
    fa90:	ebfffd73 	bl	f064 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    fa94:	e2443001 	sub	r3, r4, #1
    fa98:	e59b200c 	ldr	r2, [fp, #12]
    fa9c:	e2433001 	sub	r3, r3, #1
    faa0:	e2821001 	add	r1, r2, #1
    faa4:	e3730001 	cmn	r3, #1
    faa8:	e58b100c 	str	r1, [fp, #12]
    faac:	e5c27000 	strb	r7, [r2]
    fab0:	1afffff8 	bne	fa98 <CString::FormatV(char const*, std::__va_list)+0x298>
    fab4:	e28d1010 	add	r1, sp, #16
    fab8:	e1a0000b 	mov	r0, fp
    fabc:	ebfffe0e 	bl	f2fc <CString::PutString(char const*)>
    fac0:	e2855001 	add	r5, r5, #1
    fac4:	e1d540d0 	ldrsb	r4, [r5]
    fac8:	e3540000 	cmp	r4, #0
    facc:	1affff5c 	bne	f844 <CString::FormatV(char const*, std::__va_list)+0x44>
    fad0:	e59b300c 	ldr	r3, [fp, #12]
    fad4:	e5c34000 	strb	r4, [r3]
    fad8:	e28dd02c 	add	sp, sp, #44	; 0x2c
    fadc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fae0:	e59d3000 	ldr	r3, [sp]
    fae4:	e28d0010 	add	r0, sp, #16
    fae8:	e2833007 	add	r3, r3, #7
    faec:	e3c33007 	bic	r3, r3, #7
    faf0:	ed930b00 	vldr	d0, [r3]
    faf4:	e2833008 	add	r3, r3, #8
    faf8:	e58d3000 	str	r3, [sp]
    fafc:	ebfffe9f 	bl	f580 <CString::ftoa(char*, double, unsigned int)>
    fb00:	e28d0010 	add	r0, sp, #16
    fb04:	eb000536 	bl	10fe4 <strlen>
    fb08:	e59d3004 	ldr	r3, [sp, #4]
    fb0c:	e1a06000 	mov	r6, r0
    fb10:	e3530000 	cmp	r3, #0
    fb14:	1a000108 	bne	ff3c <CString::FormatV(char const*, std::__va_list)+0x73c>
    fb18:	e1500004 	cmp	r0, r4
    fb1c:	2affffe4 	bcs	fab4 <CString::FormatV(char const*, std::__va_list)+0x2b4>
    fb20:	e0444000 	sub	r4, r4, r0
    fb24:	e1a01004 	mov	r1, r4
    fb28:	e1a0000b 	mov	r0, fp
    fb2c:	ebfffd4c 	bl	f064 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    fb30:	e2443001 	sub	r3, r4, #1
    fb34:	e59b200c 	ldr	r2, [fp, #12]
    fb38:	e2433001 	sub	r3, r3, #1
    fb3c:	e2821001 	add	r1, r2, #1
    fb40:	e58b100c 	str	r1, [fp, #12]
    fb44:	e3a01020 	mov	r1, #32
    fb48:	e3730001 	cmn	r3, #1
    fb4c:	e5c21000 	strb	r1, [r2]
    fb50:	1afffff7 	bne	fb34 <CString::FormatV(char const*, std::__va_list)+0x334>
    fb54:	eaffffd6 	b	fab4 <CString::FormatV(char const*, std::__va_list)+0x2b4>
    fb58:	e59d3000 	ldr	r3, [sp]
    fb5c:	e5936000 	ldr	r6, [r3]
    fb60:	e2833004 	add	r3, r3, #4
    fb64:	e3560000 	cmp	r6, #0
    fb68:	b3a08001 	movlt	r8, #1
    fb6c:	a3a08000 	movge	r8, #0
    fb70:	e58d3000 	str	r3, [sp]
    fb74:	b1a03008 	movlt	r3, r8
    fb78:	b2666000 	rsblt	r6, r6, #0
    fb7c:	b58d300c 	strlt	r3, [sp, #12]
    fb80:	a58d800c 	strge	r8, [sp, #12]
    fb84:	e3560009 	cmp	r6, #9
    fb88:	e1a07006 	mov	r7, r6
    fb8c:	c3a0a001 	movgt	sl, #1
    fb90:	da00012b 	ble	10044 <CString::FormatV(char const*, std::__va_list)+0x844>
    fb94:	e08aa10a 	add	sl, sl, sl, lsl #2
    fb98:	e1a0a08a 	lsl	sl, sl, #1
    fb9c:	e1a0100a 	mov	r1, sl
    fba0:	e1a00006 	mov	r0, r6
    fba4:	eb000f4c 	bl	138dc <__aeabi_uidiv>
    fba8:	e3500009 	cmp	r0, #9
    fbac:	8afffff8 	bhi	fb94 <CString::FormatV(char const*, std::__va_list)+0x394>
    fbb0:	e1a09000 	mov	r9, r0
    fbb4:	e28d6010 	add	r6, sp, #16
    fbb8:	ea000003 	b	fbcc <CString::FormatV(char const*, std::__va_list)+0x3cc>
    fbbc:	e1a0100a 	mov	r1, sl
    fbc0:	e1a00007 	mov	r0, r7
    fbc4:	eb000f44 	bl	138dc <__aeabi_uidiv>
    fbc8:	e1a09000 	mov	r9, r0
    fbcc:	e1a00007 	mov	r0, r7
    fbd0:	e1a0100a 	mov	r1, sl
    fbd4:	eb000f7d 	bl	139d0 <__aeabi_uidivmod>
    fbd8:	e3590009 	cmp	r9, #9
    fbdc:	e2893030 	add	r3, r9, #48	; 0x30
    fbe0:	96af9073 	sxtbls	r9, r3
    fbe4:	e59f3494 	ldr	r3, [pc, #1172]	; 10080 <CString::FormatV(char const*, std::__va_list)+0x880>
    fbe8:	82899057 	addhi	r9, r9, #87	; 0x57
    fbec:	e08a3a93 	umull	r3, sl, r3, sl
    fbf0:	86af9079 	sxtbhi	r9, r9
    fbf4:	e2866001 	add	r6, r6, #1
    fbf8:	e1b0a1aa 	lsrs	sl, sl, #3
    fbfc:	e1a07001 	mov	r7, r1
    fc00:	e5469001 	strb	r9, [r6, #-1]
    fc04:	1affffec 	bne	fbbc <CString::FormatV(char const*, std::__va_list)+0x3bc>
    fc08:	e28d0010 	add	r0, sp, #16
    fc0c:	e5c6a000 	strb	sl, [r6]
    fc10:	eb0004f3 	bl	10fe4 <strlen>
    fc14:	e59d3004 	ldr	r3, [sp, #4]
    fc18:	e0888000 	add	r8, r8, r0
    fc1c:	e3530000 	cmp	r3, #0
    fc20:	0a000090 	beq	fe68 <CString::FormatV(char const*, std::__va_list)+0x668>
    fc24:	e59d300c 	ldr	r3, [sp, #12]
    fc28:	e3530000 	cmp	r3, #0
    fc2c:	1a0000fb 	bne	10020 <CString::FormatV(char const*, std::__va_list)+0x820>
    fc30:	e28d1010 	add	r1, sp, #16
    fc34:	e1a0000b 	mov	r0, fp
    fc38:	ebfffdaf 	bl	f2fc <CString::PutString(char const*)>
    fc3c:	e1580004 	cmp	r8, r4
    fc40:	2affff9e 	bcs	fac0 <CString::FormatV(char const*, std::__va_list)+0x2c0>
    fc44:	e0444008 	sub	r4, r4, r8
    fc48:	e1a01004 	mov	r1, r4
    fc4c:	e1a0000b 	mov	r0, fp
    fc50:	ebfffd03 	bl	f064 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    fc54:	e2443001 	sub	r3, r4, #1
    fc58:	e59b200c 	ldr	r2, [fp, #12]
    fc5c:	e2433001 	sub	r3, r3, #1
    fc60:	e2821001 	add	r1, r2, #1
    fc64:	e58b100c 	str	r1, [fp, #12]
    fc68:	e3a01020 	mov	r1, #32
    fc6c:	e3730001 	cmn	r3, #1
    fc70:	e5c21000 	strb	r1, [r2]
    fc74:	1afffff7 	bne	fc58 <CString::FormatV(char const*, std::__va_list)+0x458>
    fc78:	eaffff90 	b	fac0 <CString::FormatV(char const*, std::__va_list)+0x2c0>
    fc7c:	e59d3004 	ldr	r3, [sp, #4]
    fc80:	e3530000 	cmp	r3, #0
    fc84:	e59d3000 	ldr	r3, [sp]
    fc88:	e2836004 	add	r6, r3, #4
    fc8c:	e1d370d0 	ldrsb	r7, [r3]
    fc90:	1a000092 	bne	fee0 <CString::FormatV(char const*, std::__va_list)+0x6e0>
    fc94:	e3540001 	cmp	r4, #1
    fc98:	9a00000b 	bls	fccc <CString::FormatV(char const*, std::__va_list)+0x4cc>
    fc9c:	e2441001 	sub	r1, r4, #1
    fca0:	e1a0000b 	mov	r0, fp
    fca4:	ebfffcee 	bl	f064 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    fca8:	e2444002 	sub	r4, r4, #2
    fcac:	e59b300c 	ldr	r3, [fp, #12]
    fcb0:	e2444001 	sub	r4, r4, #1
    fcb4:	e2832001 	add	r2, r3, #1
    fcb8:	e58b200c 	str	r2, [fp, #12]
    fcbc:	e3a02020 	mov	r2, #32
    fcc0:	e3740001 	cmn	r4, #1
    fcc4:	e5c32000 	strb	r2, [r3]
    fcc8:	1afffff7 	bne	fcac <CString::FormatV(char const*, std::__va_list)+0x4ac>
    fccc:	e3a01001 	mov	r1, #1
    fcd0:	e1a0000b 	mov	r0, fp
    fcd4:	ebfffce2 	bl	f064 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    fcd8:	e59b300c 	ldr	r3, [fp, #12]
    fcdc:	e58d6000 	str	r6, [sp]
    fce0:	e2832001 	add	r2, r3, #1
    fce4:	e58b200c 	str	r2, [fp, #12]
    fce8:	e5c37000 	strb	r7, [r3]
    fcec:	eaffff73 	b	fac0 <CString::FormatV(char const*, std::__va_list)+0x2c0>
    fcf0:	e3a09010 	mov	r9, #16
    fcf4:	eaffff23 	b	f988 <CString::FormatV(char const*, std::__va_list)+0x188>
    fcf8:	e3a0900a 	mov	r9, #10
    fcfc:	eaffff21 	b	f988 <CString::FormatV(char const*, std::__va_list)+0x188>
    fd00:	e59d3000 	ldr	r3, [sp]
    fd04:	e5938000 	ldr	r8, [r3]
    fd08:	e2836004 	add	r6, r3, #4
    fd0c:	e1a00008 	mov	r0, r8
    fd10:	eb0004b3 	bl	10fe4 <strlen>
    fd14:	e59d3004 	ldr	r3, [sp, #4]
    fd18:	e1a07000 	mov	r7, r0
    fd1c:	e3530000 	cmp	r3, #0
    fd20:	1a000098 	bne	ff88 <CString::FormatV(char const*, std::__va_list)+0x788>
    fd24:	e1500004 	cmp	r0, r4
    fd28:	2a00000c 	bcs	fd60 <CString::FormatV(char const*, std::__va_list)+0x560>
    fd2c:	e0444000 	sub	r4, r4, r0
    fd30:	e1a01004 	mov	r1, r4
    fd34:	e1a0000b 	mov	r0, fp
    fd38:	ebfffcc9 	bl	f064 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    fd3c:	e2443001 	sub	r3, r4, #1
    fd40:	e59b200c 	ldr	r2, [fp, #12]
    fd44:	e2433001 	sub	r3, r3, #1
    fd48:	e2821001 	add	r1, r2, #1
    fd4c:	e58b100c 	str	r1, [fp, #12]
    fd50:	e3a01020 	mov	r1, #32
    fd54:	e3730001 	cmn	r3, #1
    fd58:	e5c21000 	strb	r1, [r2]
    fd5c:	1afffff7 	bne	fd40 <CString::FormatV(char const*, std::__va_list)+0x540>
    fd60:	e1a01008 	mov	r1, r8
    fd64:	e1a0000b 	mov	r0, fp
    fd68:	e58d6000 	str	r6, [sp]
    fd6c:	ebfffd62 	bl	f2fc <CString::PutString(char const*)>
    fd70:	eaffff52 	b	fac0 <CString::FormatV(char const*, std::__va_list)+0x2c0>
    fd74:	e3a01001 	mov	r1, #1
    fd78:	e1a0000b 	mov	r0, fp
    fd7c:	ebfffcb8 	bl	f064 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    fd80:	e3a01001 	mov	r1, #1
    fd84:	e59b300c 	ldr	r3, [fp, #12]
    fd88:	e1a0000b 	mov	r0, fp
    fd8c:	e0832001 	add	r2, r3, r1
    fd90:	e58b200c 	str	r2, [fp, #12]
    fd94:	e3a02025 	mov	r2, #37	; 0x25
    fd98:	e5c32000 	strb	r2, [r3]
    fd9c:	e1d540d0 	ldrsb	r4, [r5]
    fda0:	ebfffcaf 	bl	f064 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    fda4:	e59b300c 	ldr	r3, [fp, #12]
    fda8:	e2832001 	add	r2, r3, #1
    fdac:	e58b200c 	str	r2, [fp, #12]
    fdb0:	e5c34000 	strb	r4, [r3]
    fdb4:	eaffff41 	b	fac0 <CString::FormatV(char const*, std::__va_list)+0x2c0>
    fdb8:	e1d570d1 	ldrsb	r7, [r5, #1]
    fdbc:	e3a01000 	mov	r1, #0
    fdc0:	e2473030 	sub	r3, r7, #48	; 0x30
    fdc4:	e6ef3073 	uxtb	r3, r3
    fdc8:	e3530009 	cmp	r3, #9
    fdcc:	e2855001 	add	r5, r5, #1
    fdd0:	8afffec2 	bhi	f8e0 <CString::FormatV(char const*, std::__va_list)+0xe0>
    fdd4:	e0811101 	add	r1, r1, r1, lsl #2
    fdd8:	e0871081 	add	r1, r7, r1, lsl #1
    fddc:	e1f570d1 	ldrsb	r7, [r5, #1]!
    fde0:	e2411030 	sub	r1, r1, #48	; 0x30
    fde4:	e2473030 	sub	r3, r7, #48	; 0x30
    fde8:	e6ef3073 	uxtb	r3, r3
    fdec:	e3530009 	cmp	r3, #9
    fdf0:	9afffff7 	bls	fdd4 <CString::FormatV(char const*, std::__va_list)+0x5d4>
    fdf4:	eafffeb9 	b	f8e0 <CString::FormatV(char const*, std::__va_list)+0xe0>
    fdf8:	e3a01001 	mov	r1, #1
    fdfc:	e1a0000b 	mov	r0, fp
    fe00:	ebfffc97 	bl	f064 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    fe04:	e59b300c 	ldr	r3, [fp, #12]
    fe08:	e2855002 	add	r5, r5, #2
    fe0c:	e2832001 	add	r2, r3, #1
    fe10:	e58b200c 	str	r2, [fp, #12]
    fe14:	e5c36000 	strb	r6, [r3]
    fe18:	eafffe86 	b	f838 <CString::FormatV(char const*, std::__va_list)+0x38>
    fe1c:	e28d1010 	add	r1, sp, #16
    fe20:	e1a0000b 	mov	r0, fp
    fe24:	ebfffd34 	bl	f2fc <CString::PutString(char const*)>
    fe28:	e1560004 	cmp	r6, r4
    fe2c:	2affff23 	bcs	fac0 <CString::FormatV(char const*, std::__va_list)+0x2c0>
    fe30:	e0444006 	sub	r4, r4, r6
    fe34:	e1a01004 	mov	r1, r4
    fe38:	e1a0000b 	mov	r0, fp
    fe3c:	ebfffc88 	bl	f064 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    fe40:	e2443001 	sub	r3, r4, #1
    fe44:	e59b200c 	ldr	r2, [fp, #12]
    fe48:	e2433001 	sub	r3, r3, #1
    fe4c:	e2821001 	add	r1, r2, #1
    fe50:	e58b100c 	str	r1, [fp, #12]
    fe54:	e3a01020 	mov	r1, #32
    fe58:	e3730001 	cmn	r3, #1
    fe5c:	e5c21000 	strb	r1, [r2]
    fe60:	1afffff7 	bne	fe44 <CString::FormatV(char const*, std::__va_list)+0x644>
    fe64:	eaffff15 	b	fac0 <CString::FormatV(char const*, std::__va_list)+0x2c0>
    fe68:	e59d3008 	ldr	r3, [sp, #8]
    fe6c:	e3530000 	cmp	r3, #0
    fe70:	1a000057 	bne	ffd4 <CString::FormatV(char const*, std::__va_list)+0x7d4>
    fe74:	e1580004 	cmp	r8, r4
    fe78:	2a00000c 	bcs	feb0 <CString::FormatV(char const*, std::__va_list)+0x6b0>
    fe7c:	e0444008 	sub	r4, r4, r8
    fe80:	e1a01004 	mov	r1, r4
    fe84:	e1a0000b 	mov	r0, fp
    fe88:	ebfffc75 	bl	f064 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    fe8c:	e2443001 	sub	r3, r4, #1
    fe90:	e59b200c 	ldr	r2, [fp, #12]
    fe94:	e2433001 	sub	r3, r3, #1
    fe98:	e2821001 	add	r1, r2, #1
    fe9c:	e58b100c 	str	r1, [fp, #12]
    fea0:	e3a01020 	mov	r1, #32
    fea4:	e3730001 	cmn	r3, #1
    fea8:	e5c21000 	strb	r1, [r2]
    feac:	1afffff7 	bne	fe90 <CString::FormatV(char const*, std::__va_list)+0x690>
    feb0:	e59d300c 	ldr	r3, [sp, #12]
    feb4:	e3530000 	cmp	r3, #0
    feb8:	0afffefd 	beq	fab4 <CString::FormatV(char const*, std::__va_list)+0x2b4>
    febc:	e3a01001 	mov	r1, #1
    fec0:	e1a0000b 	mov	r0, fp
    fec4:	ebfffc66 	bl	f064 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    fec8:	e3a0202d 	mov	r2, #45	; 0x2d
    fecc:	e59b300c 	ldr	r3, [fp, #12]
    fed0:	e2831001 	add	r1, r3, #1
    fed4:	e58b100c 	str	r1, [fp, #12]
    fed8:	e5c32000 	strb	r2, [r3]
    fedc:	eafffef4 	b	fab4 <CString::FormatV(char const*, std::__va_list)+0x2b4>
    fee0:	e3a01001 	mov	r1, #1
    fee4:	e1a0000b 	mov	r0, fp
    fee8:	ebfffc5d 	bl	f064 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    feec:	e59b300c 	ldr	r3, [fp, #12]
    fef0:	e3540001 	cmp	r4, #1
    fef4:	e2832001 	add	r2, r3, #1
    fef8:	e58b200c 	str	r2, [fp, #12]
    fefc:	e5c37000 	strb	r7, [r3]
    ff00:	9a00000b 	bls	ff34 <CString::FormatV(char const*, std::__va_list)+0x734>
    ff04:	e2441001 	sub	r1, r4, #1
    ff08:	e1a0000b 	mov	r0, fp
    ff0c:	ebfffc54 	bl	f064 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ff10:	e2444002 	sub	r4, r4, #2
    ff14:	e59b300c 	ldr	r3, [fp, #12]
    ff18:	e2444001 	sub	r4, r4, #1
    ff1c:	e2832001 	add	r2, r3, #1
    ff20:	e58b200c 	str	r2, [fp, #12]
    ff24:	e3a02020 	mov	r2, #32
    ff28:	e3740001 	cmn	r4, #1
    ff2c:	e5c32000 	strb	r2, [r3]
    ff30:	1afffff7 	bne	ff14 <CString::FormatV(char const*, std::__va_list)+0x714>
    ff34:	e58d6000 	str	r6, [sp]
    ff38:	eafffee0 	b	fac0 <CString::FormatV(char const*, std::__va_list)+0x2c0>
    ff3c:	e28d1010 	add	r1, sp, #16
    ff40:	e1a0000b 	mov	r0, fp
    ff44:	ebfffcec 	bl	f2fc <CString::PutString(char const*)>
    ff48:	e1560004 	cmp	r6, r4
    ff4c:	2afffedb 	bcs	fac0 <CString::FormatV(char const*, std::__va_list)+0x2c0>
    ff50:	e0444006 	sub	r4, r4, r6
    ff54:	e1a01004 	mov	r1, r4
    ff58:	e1a0000b 	mov	r0, fp
    ff5c:	ebfffc40 	bl	f064 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ff60:	e2443001 	sub	r3, r4, #1
    ff64:	e59b200c 	ldr	r2, [fp, #12]
    ff68:	e2433001 	sub	r3, r3, #1
    ff6c:	e2821001 	add	r1, r2, #1
    ff70:	e58b100c 	str	r1, [fp, #12]
    ff74:	e3a01020 	mov	r1, #32
    ff78:	e3730001 	cmn	r3, #1
    ff7c:	e5c21000 	strb	r1, [r2]
    ff80:	1afffff7 	bne	ff64 <CString::FormatV(char const*, std::__va_list)+0x764>
    ff84:	eafffecd 	b	fac0 <CString::FormatV(char const*, std::__va_list)+0x2c0>
    ff88:	e1a01008 	mov	r1, r8
    ff8c:	e1a0000b 	mov	r0, fp
    ff90:	ebfffcd9 	bl	f2fc <CString::PutString(char const*)>
    ff94:	e1570004 	cmp	r7, r4
    ff98:	2affffe5 	bcs	ff34 <CString::FormatV(char const*, std::__va_list)+0x734>
    ff9c:	e0444007 	sub	r4, r4, r7
    ffa0:	e1a01004 	mov	r1, r4
    ffa4:	e1a0000b 	mov	r0, fp
    ffa8:	ebfffc2d 	bl	f064 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ffac:	e2443001 	sub	r3, r4, #1
    ffb0:	e59b200c 	ldr	r2, [fp, #12]
    ffb4:	e2433001 	sub	r3, r3, #1
    ffb8:	e2821001 	add	r1, r2, #1
    ffbc:	e58b100c 	str	r1, [fp, #12]
    ffc0:	e3a01020 	mov	r1, #32
    ffc4:	e3730001 	cmn	r3, #1
    ffc8:	e5c21000 	strb	r1, [r2]
    ffcc:	1afffff7 	bne	ffb0 <CString::FormatV(char const*, std::__va_list)+0x7b0>
    ffd0:	eaffffd7 	b	ff34 <CString::FormatV(char const*, std::__va_list)+0x734>
    ffd4:	e59d300c 	ldr	r3, [sp, #12]
    ffd8:	e3530000 	cmp	r3, #0
    ffdc:	1a00001e 	bne	1005c <CString::FormatV(char const*, std::__va_list)+0x85c>
    ffe0:	e1580004 	cmp	r8, r4
    ffe4:	2afffeb2 	bcs	fab4 <CString::FormatV(char const*, std::__va_list)+0x2b4>
    ffe8:	e0444008 	sub	r4, r4, r8
    ffec:	e1a0000b 	mov	r0, fp
    fff0:	e1a01004 	mov	r1, r4
    fff4:	ebfffc1a 	bl	f064 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    fff8:	e3a00030 	mov	r0, #48	; 0x30
    fffc:	e2443001 	sub	r3, r4, #1
   10000:	e59b200c 	ldr	r2, [fp, #12]
   10004:	e2433001 	sub	r3, r3, #1
   10008:	e2821001 	add	r1, r2, #1
   1000c:	e3730001 	cmn	r3, #1
   10010:	e58b100c 	str	r1, [fp, #12]
   10014:	e5c20000 	strb	r0, [r2]
   10018:	1afffff8 	bne	10000 <CString::FormatV(char const*, std::__va_list)+0x800>
   1001c:	eafffea4 	b	fab4 <CString::FormatV(char const*, std::__va_list)+0x2b4>
   10020:	e3a01001 	mov	r1, #1
   10024:	e1a0000b 	mov	r0, fp
   10028:	ebfffc0d 	bl	f064 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   1002c:	e3a0202d 	mov	r2, #45	; 0x2d
   10030:	e59b300c 	ldr	r3, [fp, #12]
   10034:	e2831001 	add	r1, r3, #1
   10038:	e58b100c 	str	r1, [fp, #12]
   1003c:	e5c32000 	strb	r2, [r3]
   10040:	eafffefa 	b	fc30 <CString::FormatV(char const*, std::__va_list)+0x430>
   10044:	e1a09006 	mov	r9, r6
   10048:	e3a0a001 	mov	sl, #1
   1004c:	eafffed8 	b	fbb4 <CString::FormatV(char const*, std::__va_list)+0x3b4>
   10050:	e1a03006 	mov	r3, r6
   10054:	e3a0a001 	mov	sl, #1
   10058:	eafffe58 	b	f9c0 <CString::FormatV(char const*, std::__va_list)+0x1c0>
   1005c:	e3a01001 	mov	r1, #1
   10060:	e1a0000b 	mov	r0, fp
   10064:	ebfffbfe 	bl	f064 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   10068:	e3a0202d 	mov	r2, #45	; 0x2d
   1006c:	e59b300c 	ldr	r3, [fp, #12]
   10070:	e2831001 	add	r1, r3, #1
   10074:	e58b100c 	str	r1, [fp, #12]
   10078:	e5c32000 	strb	r2, [r3]
   1007c:	eaffffd7 	b	ffe0 <CString::FormatV(char const*, std::__va_list)+0x7e0>
   10080:	cccccccd 	.word	0xcccccccd

00010084 <CString::Format(char const*, ...)>:
   10084:	e92d000e 	push	{r1, r2, r3}
   10088:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   1008c:	e24dd008 	sub	sp, sp, #8
   10090:	e28d3010 	add	r3, sp, #16
   10094:	e1a02003 	mov	r2, r3
   10098:	e59d100c 	ldr	r1, [sp, #12]
   1009c:	e58d3004 	str	r3, [sp, #4]
   100a0:	ebfffdd6 	bl	f800 <CString::FormatV(char const*, std::__va_list)>
   100a4:	e28dd008 	add	sp, sp, #8
   100a8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   100ac:	e28dd00c 	add	sp, sp, #12
   100b0:	e12fff1e 	bx	lr

000100b4 <__aeabi_atexit>:
   100b4:	e12fff1e 	bx	lr

000100b8 <halt>:
   100b8:	f10c0080 	cpsid	i
   100bc:	f10c0040 	cpsid	f
   100c0:	eafffffe 	b	100c0 <halt+0x8>

000100c4 <reboot>:
   100c4:	e3a03000 	mov	r3, #0
   100c8:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   100cc:	e59f3010 	ldr	r3, [pc, #16]	; 100e4 <reboot+0x20>
   100d0:	e59f1010 	ldr	r1, [pc, #16]	; 100e8 <reboot+0x24>
   100d4:	e59f2010 	ldr	r2, [pc, #16]	; 100ec <reboot+0x28>
   100d8:	e5831024 	str	r1, [r3, #36]	; 0x24
   100dc:	e583201c 	str	r2, [r3, #28]
   100e0:	eafffffe 	b	100e0 <reboot+0x1c>
   100e4:	20100000 	.word	0x20100000
   100e8:	5a000001 	.word	0x5a000001
   100ec:	5a000020 	.word	0x5a000020

000100f0 <sysinit>:
   100f0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   100f4:	e24dd01c 	sub	sp, sp, #28
   100f8:	f1080040 	cpsie	f
   100fc:	ee113f50 	mrc	15, 0, r3, cr1, cr0, {2}
   10100:	e383360f 	orr	r3, r3, #15728640	; 0xf00000
   10104:	ee013f50 	mcr	15, 0, r3, cr1, cr0, {2}
   10108:	e3a02000 	mov	r2, #0
   1010c:	ee072f95 	mcr	15, 0, r2, cr7, cr5, {4}
   10110:	e3a03101 	mov	r3, #1073741824	; 0x40000000
   10114:	eee83a10 	vmsr	fpexc, r3
   10118:	e3a03402 	mov	r3, #33554432	; 0x2000000
   1011c:	eee13a10 	vmsr	fpscr, r3
   10120:	e59f3068 	ldr	r3, [pc, #104]	; 10190 <sysinit+0xa0>
   10124:	e59f1068 	ldr	r1, [pc, #104]	; 10194 <sysinit+0xa4>
   10128:	e1530001 	cmp	r3, r1
   1012c:	2a000002 	bcs	1013c <sysinit+0x4c>
   10130:	e4c32001 	strb	r2, [r3], #1
   10134:	e1530001 	cmp	r3, r1
   10138:	1afffffc 	bne	10130 <sysinit+0x40>
   1013c:	e1a0000d 	mov	r0, sp
   10140:	ebfff2dc 	bl	ccb8 <CMachineInfo::CMachineInfo()>
   10144:	e59f504c 	ldr	r5, [pc, #76]	; 10198 <sysinit+0xa8>
   10148:	e59f304c 	ldr	r3, [pc, #76]	; 1019c <sysinit+0xac>
   1014c:	e1550003 	cmp	r5, r3
   10150:	2a000009 	bcs	1017c <sysinit+0x8c>
   10154:	e1e06005 	mvn	r6, r5
   10158:	e3a04000 	mov	r4, #0
   1015c:	e0866003 	add	r6, r6, r3
   10160:	e1a06126 	lsr	r6, r6, #2
   10164:	e2866001 	add	r6, r6, #1
   10168:	e2844001 	add	r4, r4, #1
   1016c:	e4953004 	ldr	r3, [r5], #4
   10170:	e12fff33 	blx	r3
   10174:	e1540006 	cmp	r4, r6
   10178:	1afffffa 	bne	10168 <sysinit+0x78>
   1017c:	ebffdfb9 	bl	8068 <main>
   10180:	e3500001 	cmp	r0, #1
   10184:	0a000000 	beq	1018c <sysinit+0x9c>
   10188:	ebffffca 	bl	100b8 <halt>
   1018c:	ebffffcc 	bl	100c4 <reboot>
   10190:	00015a90 	.word	0x00015a90
   10194:	00015b3c 	.word	0x00015b3c
   10198:	0001597c 	.word	0x0001597c
   1019c:	0001598c 	.word	0x0001598c

000101a0 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]>:
   101a0:	e2800001 	add	r0, r0, #1
   101a4:	e3a03000 	mov	r3, #0
   101a8:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   101ac:	e59f3020 	ldr	r3, [pc, #32]	; 101d4 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]+0x34>
   101b0:	e1a01003 	mov	r1, r3
   101b4:	e5932004 	ldr	r2, [r3, #4]
   101b8:	e5913004 	ldr	r3, [r1, #4]
   101bc:	e0433002 	sub	r3, r3, r2
   101c0:	e1500003 	cmp	r0, r3
   101c4:	8afffffb 	bhi	101b8 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]+0x18>
   101c8:	e3a03000 	mov	r3, #0
   101cc:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   101d0:	e12fff1e 	bx	lr
   101d4:	20003000 	.word	0x20003000

000101d8 <CTimer::CTimer(CInterruptSystem*)>:
   101d8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   101dc:	e3a05000 	mov	r5, #0
   101e0:	e3a07001 	mov	r7, #1
   101e4:	e1a04000 	mov	r4, r0
   101e8:	e59f605c 	ldr	r6, [pc, #92]	; 1024c <CTimer::CTimer(CInterruptSystem*)+0x74>
   101ec:	e5805004 	str	r5, [r0, #4]
   101f0:	e5801000 	str	r1, [r0]
   101f4:	e5805008 	str	r5, [r0, #8]
   101f8:	e5805014 	str	r5, [r0, #20]
   101fc:	e5807010 	str	r7, [r0, #16]
   10200:	e580500c 	str	r5, [r0, #12]
   10204:	e2800018 	add	r0, r0, #24
   10208:	eb000bd4 	bl	13160 <CPtrList::CPtrList()>
   1020c:	e5961000 	ldr	r1, [r6]
   10210:	e59f2038 	ldr	r2, [pc, #56]	; 10250 <CTimer::CTimer(CInterruptSystem*)+0x78>
   10214:	e59f3038 	ldr	r3, [pc, #56]	; 10254 <CTimer::CTimer(CInterruptSystem*)+0x7c>
   10218:	e1510005 	cmp	r1, r5
   1021c:	e584701c 	str	r7, [r4, #28]
   10220:	e5845028 	str	r5, [r4, #40]	; 0x28
   10224:	e5842020 	str	r2, [r4, #32]
   10228:	e5843024 	str	r3, [r4, #36]	; 0x24
   1022c:	0a000003 	beq	10240 <CTimer::CTimer(CInterruptSystem*)+0x68>
   10230:	e3a0203d 	mov	r2, #61	; 0x3d
   10234:	e59f101c 	ldr	r1, [pc, #28]	; 10258 <CTimer::CTimer(CInterruptSystem*)+0x80>
   10238:	e59f001c 	ldr	r0, [pc, #28]	; 1025c <CTimer::CTimer(CInterruptSystem*)+0x84>
   1023c:	eb000894 	bl	12494 <assertion_failed>
   10240:	e5864000 	str	r4, [r6]
   10244:	e1a00004 	mov	r0, r4
   10248:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1024c:	00015ab4 	.word	0x00015ab4
   10250:	00055730 	.word	0x00055730
   10254:	0000015e 	.word	0x0000015e
   10258:	00014438 	.word	0x00014438
   1025c:	00014444 	.word	0x00014444

00010260 <CTimer::~CTimer()>:
   10260:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10264:	e1a0a000 	mov	sl, r0
   10268:	e5900000 	ldr	r0, [r0]
   1026c:	e3500000 	cmp	r0, #0
   10270:	0a000028 	beq	10318 <CTimer::~CTimer()+0xb8>
   10274:	e3a01003 	mov	r1, #3
   10278:	ebffee6a 	bl	bc28 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   1027c:	e3a0904b 	mov	r9, #75	; 0x4b
   10280:	e59f70a8 	ldr	r7, [pc, #168]	; 10330 <CTimer::~CTimer()+0xd0>
   10284:	e59f60a8 	ldr	r6, [pc, #168]	; 10334 <CTimer::~CTimer()+0xd4>
   10288:	e59f80a8 	ldr	r8, [pc, #168]	; 10338 <CTimer::~CTimer()+0xd8>
   1028c:	e28a4018 	add	r4, sl, #24
   10290:	ea000011 	b	102dc <CTimer::~CTimer()+0x7c>
   10294:	e1a01005 	mov	r1, r5
   10298:	e1a00004 	mov	r0, r4
   1029c:	eb000bd7 	bl	13200 <CPtrList::GetPtr(TPtrListElement*)>
   102a0:	e250b000 	subs	fp, r0, #0
   102a4:	0a000016 	beq	10304 <CTimer::~CTimer()+0xa4>
   102a8:	e59b3000 	ldr	r3, [fp]
   102ac:	e1530006 	cmp	r3, r6
   102b0:	0a000003 	beq	102c4 <CTimer::~CTimer()+0x64>
   102b4:	e1a02009 	mov	r2, r9
   102b8:	e1a01007 	mov	r1, r7
   102bc:	e1a00008 	mov	r0, r8
   102c0:	eb000873 	bl	12494 <assertion_failed>
   102c4:	e1a01005 	mov	r1, r5
   102c8:	e1a00004 	mov	r0, r4
   102cc:	eb000c60 	bl	13454 <CPtrList::Remove(TPtrListElement*)>
   102d0:	e1a0000b 	mov	r0, fp
   102d4:	e3a01014 	mov	r1, #20
   102d8:	eb0006e3 	bl	11e6c <operator delete(void*, unsigned int)>
   102dc:	e1a00004 	mov	r0, r4
   102e0:	eb000bae 	bl	131a0 <CPtrList::GetFirst()>
   102e4:	e2505000 	subs	r5, r0, #0
   102e8:	1affffe9 	bne	10294 <CTimer::~CTimer()+0x34>
   102ec:	e59f3048 	ldr	r3, [pc, #72]	; 1033c <CTimer::~CTimer()+0xdc>
   102f0:	e1a00004 	mov	r0, r4
   102f4:	e5835000 	str	r5, [r3]
   102f8:	eb000b9b 	bl	1316c <CPtrList::~CPtrList()>
   102fc:	e1a0000a 	mov	r0, sl
   10300:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10304:	e3a0204a 	mov	r2, #74	; 0x4a
   10308:	e1a01007 	mov	r1, r7
   1030c:	e59f002c 	ldr	r0, [pc, #44]	; 10340 <CTimer::~CTimer()+0xe0>
   10310:	eb00085f 	bl	12494 <assertion_failed>
   10314:	eaffffe3 	b	102a8 <CTimer::~CTimer()+0x48>
   10318:	e59f0024 	ldr	r0, [pc, #36]	; 10344 <CTimer::~CTimer()+0xe4>
   1031c:	e3a02043 	mov	r2, #67	; 0x43
   10320:	e59f1008 	ldr	r1, [pc, #8]	; 10330 <CTimer::~CTimer()+0xd0>
   10324:	eb00085a 	bl	12494 <assertion_failed>
   10328:	e59a0000 	ldr	r0, [sl]
   1032c:	eaffffd0 	b	10274 <CTimer::~CTimer()+0x14>
   10330:	00014438 	.word	0x00014438
   10334:	4b544d43 	.word	0x4b544d43
   10338:	00014460 	.word	0x00014460
   1033c:	00015ab4 	.word	0x00015ab4
   10340:	00014454 	.word	0x00014454
   10344:	00014394 	.word	0x00014394

00010348 <CTimer::SetTimeZone(int)>:
   10348:	e59f2018 	ldr	r2, [pc, #24]	; 10368 <CTimer::SetTimeZone(int)+0x20>
   1034c:	e2813e59 	add	r3, r1, #1424	; 0x590
   10350:	e283300f 	add	r3, r3, #15
   10354:	e1530002 	cmp	r3, r2
   10358:	95801014 	strls	r1, [r0, #20]
   1035c:	93a00001 	movls	r0, #1
   10360:	83a00000 	movhi	r0, #0
   10364:	e12fff1e 	bx	lr
   10368:	00000b3e 	.word	0x00000b3e

0001036c <CTimer::GetTimeZone() const>:
   1036c:	e5900014 	ldr	r0, [r0, #20]
   10370:	e12fff1e 	bx	lr

00010374 <CTimer::SetTime(unsigned int, bool)>:
   10374:	e3520000 	cmp	r2, #0
   10378:	e92d4070 	push	{r4, r5, r6, lr}
   1037c:	e1a04000 	mov	r4, r0
   10380:	e1a05001 	mov	r5, r1
   10384:	1a000004 	bne	1039c <CTimer::SetTime(unsigned int, bool)+0x28>
   10388:	e5903014 	ldr	r3, [r0, #20]
   1038c:	e0633203 	rsb	r3, r3, r3, lsl #4
   10390:	e1b03103 	lsls	r3, r3, #2
   10394:	4a00000e 	bmi	103d4 <CTimer::SetTime(unsigned int, bool)+0x60>
   10398:	e0855003 	add	r5, r5, r3
   1039c:	e5940010 	ldr	r0, [r4, #16]
   103a0:	e3500000 	cmp	r0, #0
   103a4:	1a000002 	bne	103b4 <CTimer::SetTime(unsigned int, bool)+0x40>
   103a8:	e3a00001 	mov	r0, #1
   103ac:	e584500c 	str	r5, [r4, #12]
   103b0:	e8bd8070 	pop	{r4, r5, r6, pc}
   103b4:	eb00064e 	bl	11cf4 <EnterCritical>
   103b8:	e5943010 	ldr	r3, [r4, #16]
   103bc:	e584500c 	str	r5, [r4, #12]
   103c0:	e3530000 	cmp	r3, #0
   103c4:	0a000007 	beq	103e8 <CTimer::SetTime(unsigned int, bool)+0x74>
   103c8:	eb000676 	bl	11da8 <LeaveCritical>
   103cc:	e3a00001 	mov	r0, #1
   103d0:	e8bd8070 	pop	{r4, r5, r6, pc}
   103d4:	e2631000 	rsb	r1, r3, #0
   103d8:	e1510005 	cmp	r1, r5
   103dc:	daffffed 	ble	10398 <CTimer::SetTime(unsigned int, bool)+0x24>
   103e0:	e1a00002 	mov	r0, r2
   103e4:	e8bd8070 	pop	{r4, r5, r6, pc}
   103e8:	e3a00001 	mov	r0, #1
   103ec:	e8bd8070 	pop	{r4, r5, r6, pc}

000103f0 <CTimer::GetClockTicks()>:
   103f0:	e3a03000 	mov	r3, #0
   103f4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   103f8:	e59f2008 	ldr	r2, [pc, #8]	; 10408 <CTimer::GetClockTicks()+0x18>
   103fc:	e5920004 	ldr	r0, [r2, #4]
   10400:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   10404:	e12fff1e 	bx	lr
   10408:	20003000 	.word	0x20003000

0001040c <CTimer::GetTicks() const>:
   1040c:	e5900004 	ldr	r0, [r0, #4]
   10410:	e12fff1e 	bx	lr

00010414 <CTimer::GetUptime() const>:
   10414:	e5900008 	ldr	r0, [r0, #8]
   10418:	e12fff1e 	bx	lr

0001041c <CTimer::GetTime() const>:
   1041c:	e590000c 	ldr	r0, [r0, #12]
   10420:	e12fff1e 	bx	lr

00010424 <CTimer::GetLocalTime(unsigned int*, unsigned int*)>:
   10424:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   10428:	e1a04000 	mov	r4, r0
   1042c:	e5900010 	ldr	r0, [r0, #16]
   10430:	e1a06001 	mov	r6, r1
   10434:	e3500000 	cmp	r0, #0
   10438:	e1a05002 	mov	r5, r2
   1043c:	1a000011 	bne	10488 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x64>
   10440:	e594700c 	ldr	r7, [r4, #12]
   10444:	e5944004 	ldr	r4, [r4, #4]
   10448:	e3560000 	cmp	r6, #0
   1044c:	0a00001a 	beq	104bc <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x98>
   10450:	e3550000 	cmp	r5, #0
   10454:	e5867000 	str	r7, [r6]
   10458:	0a000012 	beq	104a8 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x84>
   1045c:	e3a03064 	mov	r3, #100	; 0x64
   10460:	e59f2068 	ldr	r2, [pc, #104]	; 104d0 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xac>
   10464:	e59f1068 	ldr	r1, [pc, #104]	; 104d4 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb0>
   10468:	e0820492 	umull	r0, r2, r2, r4
   1046c:	e1a022a2 	lsr	r2, r2, #5
   10470:	e0030293 	mul	r3, r3, r2
   10474:	e0443003 	sub	r3, r4, r3
   10478:	e0030391 	mul	r3, r1, r3
   1047c:	e3a00001 	mov	r0, #1
   10480:	e5853000 	str	r3, [r5]
   10484:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   10488:	eb000619 	bl	11cf4 <EnterCritical>
   1048c:	e5943010 	ldr	r3, [r4, #16]
   10490:	e594700c 	ldr	r7, [r4, #12]
   10494:	e3530000 	cmp	r3, #0
   10498:	e5944004 	ldr	r4, [r4, #4]
   1049c:	0affffe9 	beq	10448 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x24>
   104a0:	eb000640 	bl	11da8 <LeaveCritical>
   104a4:	eaffffe7 	b	10448 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x24>
   104a8:	e3a020dd 	mov	r2, #221	; 0xdd
   104ac:	e59f1024 	ldr	r1, [pc, #36]	; 104d8 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb4>
   104b0:	e59f0024 	ldr	r0, [pc, #36]	; 104dc <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb8>
   104b4:	eb0007f6 	bl	12494 <assertion_failed>
   104b8:	eaffffe7 	b	1045c <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x38>
   104bc:	e3a020da 	mov	r2, #218	; 0xda
   104c0:	e59f1010 	ldr	r1, [pc, #16]	; 104d8 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb4>
   104c4:	e59f0014 	ldr	r0, [pc, #20]	; 104e0 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xbc>
   104c8:	eb0007f1 	bl	12494 <assertion_failed>
   104cc:	eaffffdf 	b	10450 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x2c>
   104d0:	51eb851f 	.word	0x51eb851f
   104d4:	00002710 	.word	0x00002710
   104d8:	00014438 	.word	0x00014438
   104dc:	00014498 	.word	0x00014498
   104e0:	00014488 	.word	0x00014488

000104e4 <CTimer::GetUniversalTime() const>:
   104e4:	e5903014 	ldr	r3, [r0, #20]
   104e8:	e590000c 	ldr	r0, [r0, #12]
   104ec:	e0633203 	rsb	r3, r3, r3, lsl #4
   104f0:	e1a03103 	lsl	r3, r3, #2
   104f4:	e1530000 	cmp	r3, r0
   104f8:	d0400003 	suble	r0, r0, r3
   104fc:	c3a00000 	movgt	r0, #0
   10500:	e12fff1e 	bx	lr

00010504 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)>:
   10504:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10508:	e1a05000 	mov	r5, r0
   1050c:	e5900010 	ldr	r0, [r0, #16]
   10510:	e1a09001 	mov	r9, r1
   10514:	e3500000 	cmp	r0, #0
   10518:	e1a07002 	mov	r7, r2
   1051c:	1a000019 	bne	10588 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x84>
   10520:	e595600c 	ldr	r6, [r5, #12]
   10524:	e5958004 	ldr	r8, [r5, #4]
   10528:	e5953014 	ldr	r3, [r5, #20]
   1052c:	e0633203 	rsb	r3, r3, r3, lsl #4
   10530:	e1a04103 	lsl	r4, r3, #2
   10534:	e1540006 	cmp	r4, r6
   10538:	ca000010 	bgt	10580 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x7c>
   1053c:	e3590000 	cmp	r9, #0
   10540:	0a00001d 	beq	105bc <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xb8>
   10544:	e0464004 	sub	r4, r6, r4
   10548:	e3570000 	cmp	r7, #0
   1054c:	e5894000 	str	r4, [r9]
   10550:	0a000014 	beq	105a8 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xa4>
   10554:	e3a03064 	mov	r3, #100	; 0x64
   10558:	e59f2070 	ldr	r2, [pc, #112]	; 105d0 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xcc>
   1055c:	e59f1070 	ldr	r1, [pc, #112]	; 105d4 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd0>
   10560:	e0820892 	umull	r0, r2, r2, r8
   10564:	e1a022a2 	lsr	r2, r2, #5
   10568:	e0030293 	mul	r3, r3, r2
   1056c:	e0483003 	sub	r3, r8, r3
   10570:	e0030391 	mul	r3, r1, r3
   10574:	e3a00001 	mov	r0, #1
   10578:	e5873000 	str	r3, [r7]
   1057c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10580:	e3a00000 	mov	r0, #0
   10584:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10588:	eb0005d9 	bl	11cf4 <EnterCritical>
   1058c:	e5953010 	ldr	r3, [r5, #16]
   10590:	e595600c 	ldr	r6, [r5, #12]
   10594:	e3530000 	cmp	r3, #0
   10598:	e5958004 	ldr	r8, [r5, #4]
   1059c:	0affffe1 	beq	10528 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x24>
   105a0:	eb000600 	bl	11da8 <LeaveCritical>
   105a4:	eaffffdf 	b	10528 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x24>
   105a8:	e59f2028 	ldr	r2, [pc, #40]	; 105d8 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd4>
   105ac:	e59f1028 	ldr	r1, [pc, #40]	; 105dc <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd8>
   105b0:	e59f0028 	ldr	r0, [pc, #40]	; 105e0 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xdc>
   105b4:	eb0007b6 	bl	12494 <assertion_failed>
   105b8:	eaffffe5 	b	10554 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x50>
   105bc:	e3a020ff 	mov	r2, #255	; 0xff
   105c0:	e59f1014 	ldr	r1, [pc, #20]	; 105dc <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd8>
   105c4:	e59f0018 	ldr	r0, [pc, #24]	; 105e4 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xe0>
   105c8:	eb0007b1 	bl	12494 <assertion_failed>
   105cc:	eaffffdc 	b	10544 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x40>
   105d0:	51eb851f 	.word	0x51eb851f
   105d4:	00002710 	.word	0x00002710
   105d8:	00000102 	.word	0x00000102
   105dc:	00014438 	.word	0x00014438
   105e0:	00014498 	.word	0x00014498
   105e4:	00014488 	.word	0x00014488

000105e8 <CTimer::GetTimeString()>:
   105e8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   105ec:	e1a05000 	mov	r5, r0
   105f0:	e5900010 	ldr	r0, [r0, #16]
   105f4:	e24dd014 	sub	sp, sp, #20
   105f8:	e3500000 	cmp	r0, #0
   105fc:	1a000065 	bne	10798 <CTimer::GetTimeString()+0x1b0>
   10600:	e595400c 	ldr	r4, [r5, #12]
   10604:	e5959004 	ldr	r9, [r5, #4]
   10608:	e1940009 	orrs	r0, r4, r9
   1060c:	0a00003e 	beq	1070c <CTimer::GetTimeString()+0x124>
   10610:	e59f61a0 	ldr	r6, [pc, #416]	; 107b8 <CTimer::GetTimeString()+0x1d0>
   10614:	e59f81a0 	ldr	r8, [pc, #416]	; 107bc <CTimer::GetTimeString()+0x1d4>
   10618:	e0873496 	umull	r3, r7, r6, r4
   1061c:	e1a072a7 	lsr	r7, r7, #5
   10620:	e0863796 	umull	r3, r6, r6, r7
   10624:	e59f3194 	ldr	r3, [pc, #404]	; 107c0 <CTimer::GetTimeString()+0x1d8>
   10628:	e0882498 	umull	r2, r8, r8, r4
   1062c:	e0832493 	umull	r2, r3, r3, r4
   10630:	e1a062a6 	lsr	r6, r6, #5
   10634:	e0666206 	rsb	r6, r6, r6, lsl #4
   10638:	e0672207 	rsb	r2, r7, r7, lsl #4
   1063c:	e0476106 	sub	r6, r7, r6, lsl #2
   10640:	e3a0a064 	mov	sl, #100	; 0x64
   10644:	e0447102 	sub	r7, r4, r2, lsl #2
   10648:	e3a0be19 	mov	fp, #400	; 0x190
   1064c:	e59f5170 	ldr	r5, [pc, #368]	; 107c4 <CTimer::GetTimeString()+0x1dc>
   10650:	e59fe170 	ldr	lr, [pc, #368]	; 107c8 <CTimer::GetTimeString()+0x1e0>
   10654:	e59fc170 	ldr	ip, [pc, #368]	; 107cc <CTimer::GetTimeString()+0x1e4>
   10658:	e59f0170 	ldr	r0, [pc, #368]	; 107d0 <CTimer::GetTimeString()+0x1e8>
   1065c:	e1a085a8 	lsr	r8, r8, #11
   10660:	e1a04823 	lsr	r4, r3, #16
   10664:	ea00000a 	b	10694 <CTimer::GetTimeString()+0xac>
   10668:	e001019b 	mul	r1, fp, r1
   1066c:	e0451001 	sub	r1, r5, r1
   10670:	e16f1f11 	clz	r1, r1
   10674:	e1a012a1 	lsr	r1, r1, #5
   10678:	e3510000 	cmp	r1, #0
   1067c:	01a0300c 	moveq	r3, ip
   10680:	11a03000 	movne	r3, r0
   10684:	e1540003 	cmp	r4, r3
   10688:	3a000021 	bcc	10714 <CTimer::GetTimeString()+0x12c>
   1068c:	e0444003 	sub	r4, r4, r3
   10690:	e2855001 	add	r5, r5, #1
   10694:	e081359e 	umull	r3, r1, lr, r5
   10698:	e1a032a1 	lsr	r3, r1, #5
   1069c:	e003039a 	mul	r3, sl, r3
   106a0:	e1550003 	cmp	r5, r3
   106a4:	e1a013a1 	lsr	r1, r1, #7
   106a8:	0affffee 	beq	10668 <CTimer::GetTimeString()+0x80>
   106ac:	e3150003 	tst	r5, #3
   106b0:	03a01001 	moveq	r1, #1
   106b4:	13a01000 	movne	r1, #0
   106b8:	eaffffee 	b	10678 <CTimer::GetTimeString()+0x90>
   106bc:	e3a03064 	mov	r3, #100	; 0x64
   106c0:	e59fb100 	ldr	fp, [pc, #256]	; 107c8 <CTimer::GetTimeString()+0x1e0>
   106c4:	e3a00010 	mov	r0, #16
   106c8:	e08b299b 	umull	r2, fp, fp, r9
   106cc:	e1a0b2ab 	lsr	fp, fp, #5
   106d0:	e00b0b93 	mul	fp, r3, fp
   106d4:	eb0005e0 	bl	11e5c <operator new(unsigned int)>
   106d8:	e049b00b 	sub	fp, r9, fp
   106dc:	e1a09000 	mov	r9, r0
   106e0:	ebfffa79 	bl	f0cc <CString::CString()>
   106e4:	e59f30e8 	ldr	r3, [pc, #232]	; 107d4 <CTimer::GetTimeString()+0x1ec>
   106e8:	e1550003 	cmp	r5, r3
   106ec:	8a000018 	bhi	10754 <CTimer::GetTimeString()+0x16c>
   106f0:	e1a00009 	mov	r0, r9
   106f4:	e88d0880 	stm	sp, {r7, fp}
   106f8:	e1a03006 	mov	r3, r6
   106fc:	e1a02008 	mov	r2, r8
   10700:	e59f10d0 	ldr	r1, [pc, #208]	; 107d8 <CTimer::GetTimeString()+0x1f0>
   10704:	ebfffe5e 	bl	10084 <CString::Format(char const*, ...)>
   10708:	e1a00009 	mov	r0, r9
   1070c:	e28dd014 	add	sp, sp, #20
   10710:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10714:	e3a0a000 	mov	sl, #0
   10718:	e3a0001d 	mov	r0, #29
   1071c:	e59f20b8 	ldr	r2, [pc, #184]	; 107dc <CTimer::GetTimeString()+0x1f4>
   10720:	ea000004 	b	10738 <CTimer::GetTimeString()+0x150>
   10724:	e1a03000 	mov	r3, r0
   10728:	e1540003 	cmp	r4, r3
   1072c:	3affffe2 	bcc	106bc <CTimer::GetTimeString()+0xd4>
   10730:	e0444003 	sub	r4, r4, r3
   10734:	e28aa001 	add	sl, sl, #1
   10738:	e35a0001 	cmp	sl, #1
   1073c:	13a03000 	movne	r3, #0
   10740:	02013001 	andeq	r3, r1, #1
   10744:	e3530000 	cmp	r3, #0
   10748:	1afffff5 	bne	10724 <CTimer::GetTimeString()+0x13c>
   1074c:	e792310a 	ldr	r3, [r2, sl, lsl #2]
   10750:	eafffff4 	b	10728 <CTimer::GetTimeString()+0x140>
   10754:	e59f3084 	ldr	r3, [pc, #132]	; 107e0 <CTimer::GetTimeString()+0x1f8>
   10758:	e58db00c 	str	fp, [sp, #12]
   1075c:	e0832893 	umull	r2, r3, r3, r8
   10760:	e1a03223 	lsr	r3, r3, #4
   10764:	e0833083 	add	r3, r3, r3, lsl #1
   10768:	e59f2074 	ldr	r2, [pc, #116]	; 107e4 <CTimer::GetTimeString()+0x1fc>
   1076c:	e0488183 	sub	r8, r8, r3, lsl #3
   10770:	e792210a 	ldr	r2, [r2, sl, lsl #2]
   10774:	e1a00009 	mov	r0, r9
   10778:	e98d00c0 	stmib	sp, {r6, r7}
   1077c:	e2843001 	add	r3, r4, #1
   10780:	e58d8000 	str	r8, [sp]
   10784:	e59f105c 	ldr	r1, [pc, #92]	; 107e8 <CTimer::GetTimeString()+0x200>
   10788:	ebfffe3d 	bl	10084 <CString::Format(char const*, ...)>
   1078c:	e1a00009 	mov	r0, r9
   10790:	e28dd014 	add	sp, sp, #20
   10794:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10798:	eb000555 	bl	11cf4 <EnterCritical>
   1079c:	e5953010 	ldr	r3, [r5, #16]
   107a0:	e595400c 	ldr	r4, [r5, #12]
   107a4:	e3530000 	cmp	r3, #0
   107a8:	e5959004 	ldr	r9, [r5, #4]
   107ac:	0affff95 	beq	10608 <CTimer::GetTimeString()+0x20>
   107b0:	eb00057c 	bl	11da8 <LeaveCritical>
   107b4:	eaffff93 	b	10608 <CTimer::GetTimeString()+0x20>
   107b8:	88888889 	.word	0x88888889
   107bc:	91a2b3c5 	.word	0x91a2b3c5
   107c0:	c22e4507 	.word	0xc22e4507
   107c4:	000007b2 	.word	0x000007b2
   107c8:	51eb851f 	.word	0x51eb851f
   107cc:	0000016d 	.word	0x0000016d
   107d0:	0000016e 	.word	0x0000016e
   107d4:	000007b7 	.word	0x000007b7
   107d8:	000144c8 	.word	0x000144c8
   107dc:	00014400 	.word	0x00014400
   107e0:	aaaaaaab 	.word	0xaaaaaaab
   107e4:	00015990 	.word	0x00015990
   107e8:	000144ac 	.word	0x000144ac

000107ec <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>:
   107ec:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   107f0:	e1a09000 	mov	r9, r0
   107f4:	e24dd00c 	sub	sp, sp, #12
   107f8:	e58d0004 	str	r0, [sp, #4]
   107fc:	e1a04002 	mov	r4, r2
   10800:	e3a00014 	mov	r0, #20
   10804:	e1a06001 	mov	r6, r1
   10808:	e1a07003 	mov	r7, r3
   1080c:	e59d5030 	ldr	r5, [sp, #48]	; 0x30
   10810:	eb000591 	bl	11e5c <operator new(unsigned int)>
   10814:	e5991004 	ldr	r1, [r9, #4]
   10818:	e3540000 	cmp	r4, #0
   1081c:	e1a08000 	mov	r8, r0
   10820:	e0816006 	add	r6, r1, r6
   10824:	0a00003d 	beq	10920 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x134>
   10828:	e59d3004 	ldr	r3, [sp, #4]
   1082c:	e59f2100 	ldr	r2, [pc, #256]	; 10934 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x148>
   10830:	e593001c 	ldr	r0, [r3, #28]
   10834:	e98800d0 	stmib	r8, {r4, r6, r7}
   10838:	e3500000 	cmp	r0, #0
   1083c:	e5885010 	str	r5, [r8, #16]
   10840:	e5882000 	str	r2, [r8]
   10844:	1a000033 	bne	10918 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x12c>
   10848:	e59d3004 	ldr	r3, [sp, #4]
   1084c:	e2835018 	add	r5, r3, #24
   10850:	e1a00005 	mov	r0, r5
   10854:	eb000a51 	bl	131a0 <CPtrList::GetFirst()>
   10858:	e2504000 	subs	r4, r0, #0
   1085c:	0a000028 	beq	10904 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x118>
   10860:	e59f90d0 	ldr	r9, [pc, #208]	; 10938 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x14c>
   10864:	e59f70c8 	ldr	r7, [pc, #200]	; 10934 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x148>
   10868:	e59fb0cc 	ldr	fp, [pc, #204]	; 1093c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x150>
   1086c:	ea000010 	b	108b4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xc8>
   10870:	e59a3000 	ldr	r3, [sl]
   10874:	e1530007 	cmp	r3, r7
   10878:	0a000003 	beq	1088c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xa0>
   1087c:	e1a0200b 	mov	r2, fp
   10880:	e1a01009 	mov	r1, r9
   10884:	e59f00b4 	ldr	r0, [pc, #180]	; 10940 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x154>
   10888:	eb000701 	bl	12494 <assertion_failed>
   1088c:	e59a3008 	ldr	r3, [sl, #8]
   10890:	e1a01004 	mov	r1, r4
   10894:	e0433006 	sub	r3, r3, r6
   10898:	e3530000 	cmp	r3, #0
   1089c:	e1a00005 	mov	r0, r5
   108a0:	ca00000d 	bgt	108dc <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xf0>
   108a4:	eb000a3f 	bl	131a8 <CPtrList::GetNext(TPtrListElement*)>
   108a8:	e3500000 	cmp	r0, #0
   108ac:	0a000014 	beq	10904 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x118>
   108b0:	e1a04000 	mov	r4, r0
   108b4:	e1a01004 	mov	r1, r4
   108b8:	e1a00005 	mov	r0, r5
   108bc:	eb000a4f 	bl	13200 <CPtrList::GetPtr(TPtrListElement*)>
   108c0:	e250a000 	subs	sl, r0, #0
   108c4:	1affffe9 	bne	10870 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x84>
   108c8:	e59f2074 	ldr	r2, [pc, #116]	; 10944 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x158>
   108cc:	e1a01009 	mov	r1, r9
   108d0:	e59f0070 	ldr	r0, [pc, #112]	; 10948 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x15c>
   108d4:	eb0006ee 	bl	12494 <assertion_failed>
   108d8:	eaffffe4 	b	10870 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x84>
   108dc:	e1a02008 	mov	r2, r8
   108e0:	eb000a5c 	bl	13258 <CPtrList::InsertBefore(TPtrListElement*, void*)>
   108e4:	e59d3004 	ldr	r3, [sp, #4]
   108e8:	e593301c 	ldr	r3, [r3, #28]
   108ec:	e3530000 	cmp	r3, #0
   108f0:	0a000000 	beq	108f8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x10c>
   108f4:	eb00052b 	bl	11da8 <LeaveCritical>
   108f8:	e1a00008 	mov	r0, r8
   108fc:	e28dd00c 	add	sp, sp, #12
   10900:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10904:	e1a01004 	mov	r1, r4
   10908:	e1a00005 	mov	r0, r5
   1090c:	e1a02008 	mov	r2, r8
   10910:	eb000a91 	bl	1335c <CPtrList::InsertAfter(TPtrListElement*, void*)>
   10914:	eafffff2 	b	108e4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xf8>
   10918:	eb0004f5 	bl	11cf4 <EnterCritical>
   1091c:	eaffffc9 	b	10848 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x5c>
   10920:	e59f2024 	ldr	r2, [pc, #36]	; 1094c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x160>
   10924:	e59f100c 	ldr	r1, [pc, #12]	; 10938 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x14c>
   10928:	e59f0020 	ldr	r0, [pc, #32]	; 10950 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x164>
   1092c:	eb0006d8 	bl	12494 <assertion_failed>
   10930:	eaffffbc 	b	10828 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x3c>
   10934:	4b544d43 	.word	0x4b544d43
   10938:	00014438 	.word	0x00014438
   1093c:	0000016a 	.word	0x0000016a
   10940:	000144ec 	.word	0x000144ec
   10944:	00000169 	.word	0x00000169
   10948:	000144dc 	.word	0x000144dc
   1094c:	00000159 	.word	0x00000159
   10950:	00013e3c 	.word	0x00013e3c

00010954 <CTimer::CancelKernelTimer(unsigned int)>:
   10954:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   10958:	e2514000 	subs	r4, r1, #0
   1095c:	e1a05000 	mov	r5, r0
   10960:	0a00001f 	beq	109e4 <CTimer::CancelKernelTimer(unsigned int)+0x90>
   10964:	e595001c 	ldr	r0, [r5, #28]
   10968:	e3500000 	cmp	r0, #0
   1096c:	1a00001a 	bne	109dc <CTimer::CancelKernelTimer(unsigned int)+0x88>
   10970:	e2856018 	add	r6, r5, #24
   10974:	e1a00006 	mov	r0, r6
   10978:	e1a01004 	mov	r1, r4
   1097c:	eb000b07 	bl	135a0 <CPtrList::Find(void*)>
   10980:	e2507000 	subs	r7, r0, #0
   10984:	0a00000f 	beq	109c8 <CTimer::CancelKernelTimer(unsigned int)+0x74>
   10988:	e59f3068 	ldr	r3, [pc, #104]	; 109f8 <CTimer::CancelKernelTimer(unsigned int)+0xa4>
   1098c:	e5942000 	ldr	r2, [r4]
   10990:	e1520003 	cmp	r2, r3
   10994:	0a000003 	beq	109a8 <CTimer::CancelKernelTimer(unsigned int)+0x54>
   10998:	e59f205c 	ldr	r2, [pc, #92]	; 109fc <CTimer::CancelKernelTimer(unsigned int)+0xa8>
   1099c:	e59f105c 	ldr	r1, [pc, #92]	; 10a00 <CTimer::CancelKernelTimer(unsigned int)+0xac>
   109a0:	e59f005c 	ldr	r0, [pc, #92]	; 10a04 <CTimer::CancelKernelTimer(unsigned int)+0xb0>
   109a4:	eb0006ba 	bl	12494 <assertion_failed>
   109a8:	e1a01007 	mov	r1, r7
   109ac:	e1a00006 	mov	r0, r6
   109b0:	eb000aa7 	bl	13454 <CPtrList::Remove(TPtrListElement*)>
   109b4:	e3a03000 	mov	r3, #0
   109b8:	e1a00004 	mov	r0, r4
   109bc:	e5843000 	str	r3, [r4]
   109c0:	e3a01014 	mov	r1, #20
   109c4:	eb000528 	bl	11e6c <operator delete(void*, unsigned int)>
   109c8:	e595301c 	ldr	r3, [r5, #28]
   109cc:	e3530000 	cmp	r3, #0
   109d0:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   109d4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   109d8:	ea0004f2 	b	11da8 <LeaveCritical>
   109dc:	eb0004c4 	bl	11cf4 <EnterCritical>
   109e0:	eaffffe2 	b	10970 <CTimer::CancelKernelTimer(unsigned int)+0x1c>
   109e4:	e59f201c 	ldr	r2, [pc, #28]	; 10a08 <CTimer::CancelKernelTimer(unsigned int)+0xb4>
   109e8:	e59f1010 	ldr	r1, [pc, #16]	; 10a00 <CTimer::CancelKernelTimer(unsigned int)+0xac>
   109ec:	e59f0018 	ldr	r0, [pc, #24]	; 10a0c <CTimer::CancelKernelTimer(unsigned int)+0xb8>
   109f0:	eb0006a7 	bl	12494 <assertion_failed>
   109f4:	eaffffda 	b	10964 <CTimer::CancelKernelTimer(unsigned int)+0x10>
   109f8:	4b544d43 	.word	0x4b544d43
   109fc:	0000018d 	.word	0x0000018d
   10a00:	00014438 	.word	0x00014438
   10a04:	00014460 	.word	0x00014460
   10a08:	00000186 	.word	0x00000186
   10a0c:	00014454 	.word	0x00014454

00010a10 <CTimer::PollKernelTimers()>:
   10a10:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10a14:	e1a05000 	mov	r5, r0
   10a18:	e590001c 	ldr	r0, [r0, #28]
   10a1c:	e3500000 	cmp	r0, #0
   10a20:	1a00004a 	bne	10b50 <CTimer::PollKernelTimers()+0x140>
   10a24:	e2856018 	add	r6, r5, #24
   10a28:	e1a00006 	mov	r0, r6
   10a2c:	eb0009db 	bl	131a0 <CPtrList::GetFirst()>
   10a30:	e2504000 	subs	r4, r0, #0
   10a34:	0a00003b 	beq	10b28 <CTimer::PollKernelTimers()+0x118>
   10a38:	e59f9118 	ldr	r9, [pc, #280]	; 10b58 <CTimer::PollKernelTimers()+0x148>
   10a3c:	e59f8118 	ldr	r8, [pc, #280]	; 10b5c <CTimer::PollKernelTimers()+0x14c>
   10a40:	e59fa118 	ldr	sl, [pc, #280]	; 10b60 <CTimer::PollKernelTimers()+0x150>
   10a44:	ea000010 	b	10a8c <CTimer::PollKernelTimers()+0x7c>
   10a48:	e5974004 	ldr	r4, [r7, #4]
   10a4c:	e3540000 	cmp	r4, #0
   10a50:	0a00002c 	beq	10b08 <CTimer::PollKernelTimers()+0xf8>
   10a54:	e5972010 	ldr	r2, [r7, #16]
   10a58:	e597100c 	ldr	r1, [r7, #12]
   10a5c:	e1a00007 	mov	r0, r7
   10a60:	e12fff34 	blx	r4
   10a64:	e3a03000 	mov	r3, #0
   10a68:	e1a00007 	mov	r0, r7
   10a6c:	e5873000 	str	r3, [r7]
   10a70:	e3a01014 	mov	r1, #20
   10a74:	eb0004fc 	bl	11e6c <operator delete(void*, unsigned int)>
   10a78:	e595001c 	ldr	r0, [r5, #28]
   10a7c:	e3500000 	cmp	r0, #0
   10a80:	1a000025 	bne	10b1c <CTimer::PollKernelTimers()+0x10c>
   10a84:	e25b4000 	subs	r4, fp, #0
   10a88:	0a000026 	beq	10b28 <CTimer::PollKernelTimers()+0x118>
   10a8c:	e1a01004 	mov	r1, r4
   10a90:	e1a00006 	mov	r0, r6
   10a94:	eb0009d9 	bl	13200 <CPtrList::GetPtr(TPtrListElement*)>
   10a98:	e2507000 	subs	r7, r0, #0
   10a9c:	0a000026 	beq	10b3c <CTimer::PollKernelTimers()+0x12c>
   10aa0:	e5973000 	ldr	r3, [r7]
   10aa4:	e1530008 	cmp	r3, r8
   10aa8:	0a000003 	beq	10abc <CTimer::PollKernelTimers()+0xac>
   10aac:	e59f20b0 	ldr	r2, [pc, #176]	; 10b64 <CTimer::PollKernelTimers()+0x154>
   10ab0:	e1a01009 	mov	r1, r9
   10ab4:	e1a0000a 	mov	r0, sl
   10ab8:	eb000675 	bl	12494 <assertion_failed>
   10abc:	e5952004 	ldr	r2, [r5, #4]
   10ac0:	e5973008 	ldr	r3, [r7, #8]
   10ac4:	e0433002 	sub	r3, r3, r2
   10ac8:	e3530000 	cmp	r3, #0
   10acc:	ca000015 	bgt	10b28 <CTimer::PollKernelTimers()+0x118>
   10ad0:	e1a01004 	mov	r1, r4
   10ad4:	e1a00006 	mov	r0, r6
   10ad8:	eb0009b2 	bl	131a8 <CPtrList::GetNext(TPtrListElement*)>
   10adc:	e1a01004 	mov	r1, r4
   10ae0:	e1a0b000 	mov	fp, r0
   10ae4:	e1a00006 	mov	r0, r6
   10ae8:	eb000a59 	bl	13454 <CPtrList::Remove(TPtrListElement*)>
   10aec:	e595301c 	ldr	r3, [r5, #28]
   10af0:	e3530000 	cmp	r3, #0
   10af4:	0affffd3 	beq	10a48 <CTimer::PollKernelTimers()+0x38>
   10af8:	eb0004aa 	bl	11da8 <LeaveCritical>
   10afc:	e5974004 	ldr	r4, [r7, #4]
   10b00:	e3540000 	cmp	r4, #0
   10b04:	1affffd2 	bne	10a54 <CTimer::PollKernelTimers()+0x44>
   10b08:	e59f2058 	ldr	r2, [pc, #88]	; 10b68 <CTimer::PollKernelTimers()+0x158>
   10b0c:	e1a01009 	mov	r1, r9
   10b10:	e59f0054 	ldr	r0, [pc, #84]	; 10b6c <CTimer::PollKernelTimers()+0x15c>
   10b14:	eb00065e 	bl	12494 <assertion_failed>
   10b18:	eaffffcd 	b	10a54 <CTimer::PollKernelTimers()+0x44>
   10b1c:	eb000474 	bl	11cf4 <EnterCritical>
   10b20:	e25b4000 	subs	r4, fp, #0
   10b24:	1affffd8 	bne	10a8c <CTimer::PollKernelTimers()+0x7c>
   10b28:	e595301c 	ldr	r3, [r5, #28]
   10b2c:	e3530000 	cmp	r3, #0
   10b30:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10b34:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10b38:	ea00049a 	b	11da8 <LeaveCritical>
   10b3c:	e59f202c 	ldr	r2, [pc, #44]	; 10b70 <CTimer::PollKernelTimers()+0x160>
   10b40:	e1a01009 	mov	r1, r9
   10b44:	e59f0028 	ldr	r0, [pc, #40]	; 10b74 <CTimer::PollKernelTimers()+0x164>
   10b48:	eb000651 	bl	12494 <assertion_failed>
   10b4c:	eaffffd3 	b	10aa0 <CTimer::PollKernelTimers()+0x90>
   10b50:	eb000467 	bl	11cf4 <EnterCritical>
   10b54:	eaffffb2 	b	10a24 <CTimer::PollKernelTimers()+0x14>
   10b58:	00014438 	.word	0x00014438
   10b5c:	4b544d43 	.word	0x4b544d43
   10b60:	00014460 	.word	0x00014460
   10b64:	000001a3 	.word	0x000001a3
   10b68:	000001b1 	.word	0x000001b1
   10b6c:	00013e3c 	.word	0x00013e3c
   10b70:	000001a2 	.word	0x000001a2
   10b74:	00014454 	.word	0x00014454

00010b78 <CTimer::InterruptHandler()>:
   10b78:	e92d4010 	push	{r4, lr}
   10b7c:	e3a03000 	mov	r3, #0
   10b80:	e1a04000 	mov	r4, r0
   10b84:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   10b88:	e59f20e4 	ldr	r2, [pc, #228]	; 10c74 <CTimer::InterruptHandler()+0xfc>
   10b8c:	e5923018 	ldr	r3, [r2, #24]
   10b90:	e2833c27 	add	r3, r3, #9984	; 0x2700
   10b94:	e2833010 	add	r3, r3, #16
   10b98:	e5823018 	str	r3, [r2, #24]
   10b9c:	e5921004 	ldr	r1, [r2, #4]
   10ba0:	e1530001 	cmp	r3, r1
   10ba4:	e3a01008 	mov	r1, #8
   10ba8:	35923004 	ldrcc	r3, [r2, #4]
   10bac:	32833c27 	addcc	r3, r3, #9984	; 0x2700
   10bb0:	32833010 	addcc	r3, r3, #16
   10bb4:	35823018 	strcc	r3, [r2, #24]
   10bb8:	e59f20b4 	ldr	r2, [pc, #180]	; 10c74 <CTimer::InterruptHandler()+0xfc>
   10bbc:	e3a03000 	mov	r3, #0
   10bc0:	e5821000 	str	r1, [r2]
   10bc4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   10bc8:	e5900010 	ldr	r0, [r0, #16]
   10bcc:	e1500003 	cmp	r0, r3
   10bd0:	1a00001a 	bne	10c40 <CTimer::InterruptHandler()+0xc8>
   10bd4:	e3a01064 	mov	r1, #100	; 0x64
   10bd8:	e5942004 	ldr	r2, [r4, #4]
   10bdc:	e59f3094 	ldr	r3, [pc, #148]	; 10c78 <CTimer::InterruptHandler()+0x100>
   10be0:	e2822001 	add	r2, r2, #1
   10be4:	e0830293 	umull	r0, r3, r3, r2
   10be8:	e1a032a3 	lsr	r3, r3, #5
   10bec:	e0030391 	mul	r3, r1, r3
   10bf0:	e0523003 	subs	r3, r2, r3
   10bf4:	e5842004 	str	r2, [r4, #4]
   10bf8:	1a000007 	bne	10c1c <CTimer::InterruptHandler()+0xa4>
   10bfc:	e5942008 	ldr	r2, [r4, #8]
   10c00:	e2822001 	add	r2, r2, #1
   10c04:	e5842008 	str	r2, [r4, #8]
   10c08:	e594200c 	ldr	r2, [r4, #12]
   10c0c:	e2822001 	add	r2, r2, #1
   10c10:	e584200c 	str	r2, [r4, #12]
   10c14:	e3530000 	cmp	r3, #0
   10c18:	1a000006 	bne	10c38 <CTimer::InterruptHandler()+0xc0>
   10c1c:	e1a00004 	mov	r0, r4
   10c20:	ebffff7a 	bl	10a10 <CTimer::PollKernelTimers()>
   10c24:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   10c28:	e3530000 	cmp	r3, #0
   10c2c:	08bd8010 	popeq	{r4, pc}
   10c30:	e8bd4010 	pop	{r4, lr}
   10c34:	e12fff13 	bx	r3
   10c38:	eb00045a 	bl	11da8 <LeaveCritical>
   10c3c:	eafffff6 	b	10c1c <CTimer::InterruptHandler()+0xa4>
   10c40:	eb00042b 	bl	11cf4 <EnterCritical>
   10c44:	e3a01064 	mov	r1, #100	; 0x64
   10c48:	e5943004 	ldr	r3, [r4, #4]
   10c4c:	e59f2024 	ldr	r2, [pc, #36]	; 10c78 <CTimer::InterruptHandler()+0x100>
   10c50:	e2833001 	add	r3, r3, #1
   10c54:	e0820392 	umull	r0, r2, r2, r3
   10c58:	e1a022a2 	lsr	r2, r2, #5
   10c5c:	e0020291 	mul	r2, r1, r2
   10c60:	e1530002 	cmp	r3, r2
   10c64:	e5843004 	str	r3, [r4, #4]
   10c68:	e5943010 	ldr	r3, [r4, #16]
   10c6c:	1affffe8 	bne	10c14 <CTimer::InterruptHandler()+0x9c>
   10c70:	eaffffe1 	b	10bfc <CTimer::InterruptHandler()+0x84>
   10c74:	20003000 	.word	0x20003000
   10c78:	51eb851f 	.word	0x51eb851f

00010c7c <CTimer::InterruptHandler(void*)>:
   10c7c:	e92d4010 	push	{r4, lr}
   10c80:	e2504000 	subs	r4, r0, #0
   10c84:	0a000002 	beq	10c94 <CTimer::InterruptHandler(void*)+0x18>
   10c88:	e1a00004 	mov	r0, r4
   10c8c:	e8bd4010 	pop	{r4, lr}
   10c90:	eaffffb8 	b	10b78 <CTimer::InterruptHandler()>
   10c94:	e59f0014 	ldr	r0, [pc, #20]	; 10cb0 <CTimer::InterruptHandler(void*)+0x34>
   10c98:	e59f2014 	ldr	r2, [pc, #20]	; 10cb4 <CTimer::InterruptHandler(void*)+0x38>
   10c9c:	e59f1014 	ldr	r1, [pc, #20]	; 10cb8 <CTimer::InterruptHandler(void*)+0x3c>
   10ca0:	eb0005fb 	bl	12494 <assertion_failed>
   10ca4:	e1a00004 	mov	r0, r4
   10ca8:	e8bd4010 	pop	{r4, lr}
   10cac:	eaffffb1 	b	10b78 <CTimer::InterruptHandler()>
   10cb0:	000143d8 	.word	0x000143d8
   10cb4:	000001ea 	.word	0x000001ea
   10cb8:	00014438 	.word	0x00014438

00010cbc <CTimer::TuneMsDelay()>:
   10cbc:	e92d4070 	push	{r4, r5, r6, lr}
   10cc0:	e1a05000 	mov	r5, r0
   10cc4:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   10cc8:	e5953020 	ldr	r3, [r5, #32]
   10ccc:	e24dd008 	sub	sp, sp, #8
   10cd0:	e0000390 	mul	r0, r0, r3
   10cd4:	e5954004 	ldr	r4, [r5, #4]
   10cd8:	eb00082c 	bl	12d90 <DelayLoop>
   10cdc:	e5951004 	ldr	r1, [r5, #4]
   10ce0:	e59f0068 	ldr	r0, [pc, #104]	; 10d50 <CTimer::TuneMsDelay()+0x94>
   10ce4:	e0411004 	sub	r1, r1, r4
   10ce8:	eb000afb 	bl	138dc <__aeabi_uidiv>
   10cec:	e5953020 	ldr	r3, [r5, #32]
   10cf0:	e59f405c 	ldr	r4, [pc, #92]	; 10d54 <CTimer::TuneMsDelay()+0x98>
   10cf4:	e0030093 	mul	r3, r3, r0
   10cf8:	e0832394 	umull	r2, r3, r4, r3
   10cfc:	e59f1054 	ldr	r1, [pc, #84]	; 10d58 <CTimer::TuneMsDelay()+0x9c>
   10d00:	e1a032a3 	lsr	r3, r3, #5
   10d04:	e2832f7d 	add	r2, r3, #500	; 0x1f4
   10d08:	e0821291 	umull	r1, r2, r1, r2
   10d0c:	e1a06000 	mov	r6, r0
   10d10:	e1a02322 	lsr	r2, r2, #6
   10d14:	e5852024 	str	r2, [r5, #36]	; 0x24
   10d18:	e5853020 	str	r3, [r5, #32]
   10d1c:	ebffee1f 	bl	c5a0 <CLogger::Get()>
   10d20:	e3a03064 	mov	r3, #100	; 0x64
   10d24:	e0842694 	umull	r2, r4, r4, r6
   10d28:	e1a042a4 	lsr	r4, r4, #5
   10d2c:	e0030493 	mul	r3, r3, r4
   10d30:	e0466003 	sub	r6, r6, r3
   10d34:	e88d0050 	stm	sp, {r4, r6}
   10d38:	e59f301c 	ldr	r3, [pc, #28]	; 10d5c <CTimer::TuneMsDelay()+0xa0>
   10d3c:	e3a02003 	mov	r2, #3
   10d40:	e59f1018 	ldr	r1, [pc, #24]	; 10d60 <CTimer::TuneMsDelay()+0xa4>
   10d44:	ebffefbe 	bl	cc44 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10d48:	e28dd008 	add	sp, sp, #8
   10d4c:	e8bd8070 	pop	{r4, r5, r6, pc}
   10d50:	00002710 	.word	0x00002710
   10d54:	51eb851f 	.word	0x51eb851f
   10d58:	10624dd3 	.word	0x10624dd3
   10d5c:	00014514 	.word	0x00014514
   10d60:	00014430 	.word	0x00014430

00010d64 <CTimer::Initialize()>:
   10d64:	e92d4070 	push	{r4, r5, r6, lr}
   10d68:	e1a04000 	mov	r4, r0
   10d6c:	e5900000 	ldr	r0, [r0]
   10d70:	e3500000 	cmp	r0, #0
   10d74:	0a000011 	beq	10dc0 <CTimer::Initialize()+0x5c>
   10d78:	e1a03004 	mov	r3, r4
   10d7c:	e59f2054 	ldr	r2, [pc, #84]	; 10dd8 <CTimer::Initialize()+0x74>
   10d80:	e3a01003 	mov	r1, #3
   10d84:	ebffeb6c 	bl	bb3c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   10d88:	e3a05000 	mov	r5, #0
   10d8c:	ee075f9a 	mcr	15, 0, r5, cr7, cr10, {4}
   10d90:	e59f2044 	ldr	r2, [pc, #68]	; 10ddc <CTimer::Initialize()+0x78>
   10d94:	e59f3044 	ldr	r3, [pc, #68]	; 10de0 <CTimer::Initialize()+0x7c>
   10d98:	e1a00004 	mov	r0, r4
   10d9c:	e5823004 	str	r3, [r2, #4]
   10da0:	e5923004 	ldr	r3, [r2, #4]
   10da4:	e2833c27 	add	r3, r3, #9984	; 0x2700
   10da8:	e2833010 	add	r3, r3, #16
   10dac:	e5823018 	str	r3, [r2, #24]
   10db0:	ebffffc1 	bl	10cbc <CTimer::TuneMsDelay()>
   10db4:	ee075fba 	mcr	15, 0, r5, cr7, cr10, {5}
   10db8:	e3a00001 	mov	r0, #1
   10dbc:	e8bd8070 	pop	{r4, r5, r6, pc}
   10dc0:	e59f001c 	ldr	r0, [pc, #28]	; 10de4 <CTimer::Initialize()+0x80>
   10dc4:	e3a02057 	mov	r2, #87	; 0x57
   10dc8:	e59f1018 	ldr	r1, [pc, #24]	; 10de8 <CTimer::Initialize()+0x84>
   10dcc:	eb0005b0 	bl	12494 <assertion_failed>
   10dd0:	e5940000 	ldr	r0, [r4]
   10dd4:	eaffffe7 	b	10d78 <CTimer::Initialize()+0x14>
   10dd8:	00010c7c 	.word	0x00010c7c
   10ddc:	20003000 	.word	0x20003000
   10de0:	fe363c80 	.word	0xfe363c80
   10de4:	00014394 	.word	0x00014394
   10de8:	00014438 	.word	0x00014438

00010dec <CTimer::RegisterPeriodicHandler(void (*)())>:
   10dec:	e5903028 	ldr	r3, [r0, #40]	; 0x28
   10df0:	e92d4070 	push	{r4, r5, r6, lr}
   10df4:	e3530000 	cmp	r3, #0
   10df8:	e1a04000 	mov	r4, r0
   10dfc:	e1a05001 	mov	r5, r1
   10e00:	0a000003 	beq	10e14 <CTimer::RegisterPeriodicHandler(void (*)())+0x28>
   10e04:	e3a02c02 	mov	r2, #512	; 0x200
   10e08:	e59f1024 	ldr	r1, [pc, #36]	; 10e34 <CTimer::RegisterPeriodicHandler(void (*)())+0x48>
   10e0c:	e59f0024 	ldr	r0, [pc, #36]	; 10e38 <CTimer::RegisterPeriodicHandler(void (*)())+0x4c>
   10e10:	eb00059f 	bl	12494 <assertion_failed>
   10e14:	e3550000 	cmp	r5, #0
   10e18:	e5845028 	str	r5, [r4, #40]	; 0x28
   10e1c:	18bd8070 	popne	{r4, r5, r6, pc}
   10e20:	e59f2014 	ldr	r2, [pc, #20]	; 10e3c <CTimer::RegisterPeriodicHandler(void (*)())+0x50>
   10e24:	e59f1008 	ldr	r1, [pc, #8]	; 10e34 <CTimer::RegisterPeriodicHandler(void (*)())+0x48>
   10e28:	e59f0010 	ldr	r0, [pc, #16]	; 10e40 <CTimer::RegisterPeriodicHandler(void (*)())+0x54>
   10e2c:	e8bd4070 	pop	{r4, r5, r6, lr}
   10e30:	ea000597 	b	12494 <assertion_failed>
   10e34:	00014438 	.word	0x00014438
   10e38:	0001452c 	.word	0x0001452c
   10e3c:	00000202 	.word	0x00000202
   10e40:	00014544 	.word	0x00014544

00010e44 <CTimer::SimpleMsDelay(unsigned int)>:
   10e44:	e3500000 	cmp	r0, #0
   10e48:	012fff1e 	bxeq	lr
   10e4c:	e3a03ffa 	mov	r3, #1000	; 0x3e8
   10e50:	e0000093 	mul	r0, r3, r0
   10e54:	e3500000 	cmp	r0, #0
   10e58:	012fff1e 	bxeq	lr
   10e5c:	eafffccf 	b	101a0 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]>

00010e60 <CTimer::SimpleusDelay(unsigned int)>:
   10e60:	e3500000 	cmp	r0, #0
   10e64:	012fff1e 	bxeq	lr
   10e68:	eafffccc 	b	101a0 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]>

00010e6c <CTimer::IsLeapYear(unsigned int)>:
   10e6c:	e3a02064 	mov	r2, #100	; 0x64
   10e70:	e59f303c 	ldr	r3, [pc, #60]	; 10eb4 <CTimer::IsLeapYear(unsigned int)+0x48>
   10e74:	e0831093 	umull	r1, r3, r3, r0
   10e78:	e1a012a3 	lsr	r1, r3, #5
   10e7c:	e0020192 	mul	r2, r2, r1
   10e80:	e1500002 	cmp	r0, r2
   10e84:	0a000003 	beq	10e98 <CTimer::IsLeapYear(unsigned int)+0x2c>
   10e88:	e3100003 	tst	r0, #3
   10e8c:	03a00001 	moveq	r0, #1
   10e90:	13a00000 	movne	r0, #0
   10e94:	e12fff1e 	bx	lr
   10e98:	e3a02e19 	mov	r2, #400	; 0x190
   10e9c:	e1a033a3 	lsr	r3, r3, #7
   10ea0:	e0030392 	mul	r3, r2, r3
   10ea4:	e0400003 	sub	r0, r0, r3
   10ea8:	e16f0f10 	clz	r0, r0
   10eac:	e1a002a0 	lsr	r0, r0, #5
   10eb0:	e12fff1e 	bx	lr
   10eb4:	51eb851f 	.word	0x51eb851f

00010eb8 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)>:
   10eb8:	e3500001 	cmp	r0, #1
   10ebc:	0a000002 	beq	10ecc <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x14>
   10ec0:	e59f3058 	ldr	r3, [pc, #88]	; 10f20 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x68>
   10ec4:	e7930100 	ldr	r0, [r3, r0, lsl #2]
   10ec8:	e12fff1e 	bx	lr
   10ecc:	e3a02064 	mov	r2, #100	; 0x64
   10ed0:	e59f304c 	ldr	r3, [pc, #76]	; 10f24 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x6c>
   10ed4:	e083c193 	umull	ip, r3, r3, r1
   10ed8:	e1a0c2a3 	lsr	ip, r3, #5
   10edc:	e0020c92 	mul	r2, r2, ip
   10ee0:	e1510002 	cmp	r1, r2
   10ee4:	0a000006 	beq	10f04 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x4c>
   10ee8:	e3110003 	tst	r1, #3
   10eec:	03a01001 	moveq	r1, #1
   10ef0:	13a01000 	movne	r1, #0
   10ef4:	e3510000 	cmp	r1, #0
   10ef8:	0afffff0 	beq	10ec0 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x8>
   10efc:	e3a0001d 	mov	r0, #29
   10f00:	e12fff1e 	bx	lr
   10f04:	e3a02e19 	mov	r2, #400	; 0x190
   10f08:	e1a033a3 	lsr	r3, r3, #7
   10f0c:	e0030392 	mul	r3, r2, r3
   10f10:	e0411003 	sub	r1, r1, r3
   10f14:	e16f1f11 	clz	r1, r1
   10f18:	e1a012a1 	lsr	r1, r1, #5
   10f1c:	eafffff4 	b	10ef4 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x3c>
   10f20:	00014400 	.word	0x00014400
   10f24:	51eb851f 	.word	0x51eb851f

00010f28 <CTimer::Get()>:
   10f28:	e92d4010 	push	{r4, lr}
   10f2c:	e59f4020 	ldr	r4, [pc, #32]	; 10f54 <CTimer::Get()+0x2c>
   10f30:	e5940000 	ldr	r0, [r4]
   10f34:	e3500000 	cmp	r0, #0
   10f38:	18bd8010 	popne	{r4, pc}
   10f3c:	e59f2014 	ldr	r2, [pc, #20]	; 10f58 <CTimer::Get()+0x30>
   10f40:	e59f1014 	ldr	r1, [pc, #20]	; 10f5c <CTimer::Get()+0x34>
   10f44:	e59f0014 	ldr	r0, [pc, #20]	; 10f60 <CTimer::Get()+0x38>
   10f48:	eb000551 	bl	12494 <assertion_failed>
   10f4c:	e5940000 	ldr	r0, [r4]
   10f50:	e8bd8010 	pop	{r4, pc}
   10f54:	00015ab4 	.word	0x00015ab4
   10f58:	0000023e 	.word	0x0000023e
   10f5c:	00014438 	.word	0x00014438
   10f60:	00013ec4 	.word	0x00013ec4

00010f64 <memset>:
   10f64:	e3520000 	cmp	r2, #0
   10f68:	012fff1e 	bxeq	lr
   10f6c:	e1a03000 	mov	r3, r0
   10f70:	e6af1071 	sxtb	r1, r1
   10f74:	e0802002 	add	r2, r0, r2
   10f78:	e4c31001 	strb	r1, [r3], #1
   10f7c:	e1530002 	cmp	r3, r2
   10f80:	1afffffc 	bne	10f78 <memset+0x14>
   10f84:	e12fff1e 	bx	lr

00010f88 <memcmp>:
   10f88:	e3520000 	cmp	r2, #0
   10f8c:	0a00000e 	beq	10fcc <memcmp+0x44>
   10f90:	e5d0c000 	ldrb	ip, [r0]
   10f94:	e5d13000 	ldrb	r3, [r1]
   10f98:	e15c0003 	cmp	ip, r3
   10f9c:	ca00000c 	bgt	10fd4 <memcmp+0x4c>
   10fa0:	ba00000d 	blt	10fdc <memcmp+0x54>
   10fa4:	e0812002 	add	r2, r1, r2
   10fa8:	e2811001 	add	r1, r1, #1
   10fac:	ea000004 	b	10fc4 <memcmp+0x3c>
   10fb0:	e5f0c001 	ldrb	ip, [r0, #1]!
   10fb4:	e4d13001 	ldrb	r3, [r1], #1
   10fb8:	e15c0003 	cmp	ip, r3
   10fbc:	ca000004 	bgt	10fd4 <memcmp+0x4c>
   10fc0:	ba000005 	blt	10fdc <memcmp+0x54>
   10fc4:	e1510002 	cmp	r1, r2
   10fc8:	1afffff8 	bne	10fb0 <memcmp+0x28>
   10fcc:	e3a00000 	mov	r0, #0
   10fd0:	e12fff1e 	bx	lr
   10fd4:	e3a00001 	mov	r0, #1
   10fd8:	e12fff1e 	bx	lr
   10fdc:	e3e00000 	mvn	r0, #0
   10fe0:	e12fff1e 	bx	lr

00010fe4 <strlen>:
   10fe4:	e1d010d0 	ldrsb	r1, [r0]
   10fe8:	e2803001 	add	r3, r0, #1
   10fec:	e3510000 	cmp	r1, #0
   10ff0:	0a000003 	beq	11004 <strlen+0x20>
   10ff4:	e0431000 	sub	r1, r3, r0
   10ff8:	e0d320d1 	ldrsb	r2, [r3], #1
   10ffc:	e3520000 	cmp	r2, #0
   11000:	1afffffb 	bne	10ff4 <strlen+0x10>
   11004:	e1a00001 	mov	r0, r1
   11008:	e12fff1e 	bx	lr

0001100c <strcmp>:
   1100c:	e1d030d0 	ldrsb	r3, [r0]
   11010:	e1d120d0 	ldrsb	r2, [r1]
   11014:	e3530000 	cmp	r3, #0
   11018:	1a000007 	bne	1103c <strcmp+0x30>
   1101c:	ea000008 	b	11044 <strcmp+0x38>
   11020:	e1530002 	cmp	r3, r2
   11024:	ca00000b 	bgt	11058 <strcmp+0x4c>
   11028:	ba00000c 	blt	11060 <strcmp+0x54>
   1102c:	e1f030d1 	ldrsb	r3, [r0, #1]!
   11030:	e3530000 	cmp	r3, #0
   11034:	0a00000b 	beq	11068 <strcmp+0x5c>
   11038:	e1f120d1 	ldrsb	r2, [r1, #1]!
   1103c:	e3520000 	cmp	r2, #0
   11040:	1afffff6 	bne	11020 <strcmp+0x14>
   11044:	e1530002 	cmp	r3, r2
   11048:	ca000002 	bgt	11058 <strcmp+0x4c>
   1104c:	b3e00000 	mvnlt	r0, #0
   11050:	a3a00000 	movge	r0, #0
   11054:	e12fff1e 	bx	lr
   11058:	e3a00001 	mov	r0, #1
   1105c:	e12fff1e 	bx	lr
   11060:	e3e00000 	mvn	r0, #0
   11064:	e12fff1e 	bx	lr
   11068:	e1d120d1 	ldrsb	r2, [r1, #1]
   1106c:	e1530002 	cmp	r3, r2
   11070:	dafffff5 	ble	1104c <strcmp+0x40>
   11074:	eafffff7 	b	11058 <strcmp+0x4c>

00011078 <strcasecmp>:
   11078:	e2400001 	sub	r0, r0, #1
   1107c:	e1f030d1 	ldrsb	r3, [r0, #1]!
   11080:	e2432061 	sub	r2, r3, #97	; 0x61
   11084:	e3520019 	cmp	r2, #25
   11088:	92433020 	subls	r3, r3, #32
   1108c:	e3530000 	cmp	r3, #0
   11090:	0a00001f 	beq	11114 <strcasecmp+0x9c>
   11094:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   11098:	e0d120d1 	ldrsb	r2, [r1], #1
   1109c:	e242c061 	sub	ip, r2, #97	; 0x61
   110a0:	e35c0019 	cmp	ip, #25
   110a4:	81a0e002 	movhi	lr, r2
   110a8:	9242e020 	subls	lr, r2, #32
   110ac:	e35e0000 	cmp	lr, #0
   110b0:	1a000006 	bne	110d0 <strcasecmp+0x58>
   110b4:	e35c0019 	cmp	ip, #25
   110b8:	92422020 	subls	r2, r2, #32
   110bc:	e1530002 	cmp	r3, r2
   110c0:	ca000011 	bgt	1110c <strcasecmp+0x94>
   110c4:	b3e00000 	mvnlt	r0, #0
   110c8:	a3a00000 	movge	r0, #0
   110cc:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   110d0:	e153000e 	cmp	r3, lr
   110d4:	ca00000c 	bgt	1110c <strcasecmp+0x94>
   110d8:	ba000016 	blt	11138 <strcasecmp+0xc0>
   110dc:	e1f030d1 	ldrsb	r3, [r0, #1]!
   110e0:	e2432061 	sub	r2, r3, #97	; 0x61
   110e4:	e3520019 	cmp	r2, #25
   110e8:	92433020 	subls	r3, r3, #32
   110ec:	e3530000 	cmp	r3, #0
   110f0:	1affffe8 	bne	11098 <strcasecmp+0x20>
   110f4:	e1d120d0 	ldrsb	r2, [r1]
   110f8:	e242c061 	sub	ip, r2, #97	; 0x61
   110fc:	e35c0019 	cmp	ip, #25
   11100:	92422020 	subls	r2, r2, #32
   11104:	e1530002 	cmp	r3, r2
   11108:	daffffed 	ble	110c4 <strcasecmp+0x4c>
   1110c:	e3a00001 	mov	r0, #1
   11110:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   11114:	e1d120d0 	ldrsb	r2, [r1]
   11118:	e242c061 	sub	ip, r2, #97	; 0x61
   1111c:	e35c0019 	cmp	ip, #25
   11120:	92422020 	subls	r2, r2, #32
   11124:	e1530002 	cmp	r3, r2
   11128:	ca000004 	bgt	11140 <strcasecmp+0xc8>
   1112c:	b3e00000 	mvnlt	r0, #0
   11130:	a3a00000 	movge	r0, #0
   11134:	e12fff1e 	bx	lr
   11138:	e3e00000 	mvn	r0, #0
   1113c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   11140:	e3a00001 	mov	r0, #1
   11144:	e12fff1e 	bx	lr

00011148 <strncmp>:
   11148:	e3520000 	cmp	r2, #0
   1114c:	0a000016 	beq	111ac <strncmp+0x64>
   11150:	e1d030d0 	ldrsb	r3, [r0]
   11154:	e1d1c0d0 	ldrsb	ip, [r1]
   11158:	e3530000 	cmp	r3, #0
   1115c:	0a000015 	beq	111b8 <strncmp+0x70>
   11160:	e35c0000 	cmp	ip, #0
   11164:	0a000013 	beq	111b8 <strncmp+0x70>
   11168:	e15c0003 	cmp	ip, r3
   1116c:	ba000016 	blt	111cc <strncmp+0x84>
   11170:	d0802002 	addle	r2, r0, r2
   11174:	d2800001 	addle	r0, r0, #1
   11178:	da000009 	ble	111a4 <strncmp+0x5c>
   1117c:	ea000014 	b	111d4 <strncmp+0x8c>
   11180:	e0d030d1 	ldrsb	r3, [r0], #1
   11184:	e3530000 	cmp	r3, #0
   11188:	0a000009 	beq	111b4 <strncmp+0x6c>
   1118c:	e1f1c0d1 	ldrsb	ip, [r1, #1]!
   11190:	e35c0000 	cmp	ip, #0
   11194:	0a000007 	beq	111b8 <strncmp+0x70>
   11198:	e153000c 	cmp	r3, ip
   1119c:	ca00000a 	bgt	111cc <strncmp+0x84>
   111a0:	ba00000b 	blt	111d4 <strncmp+0x8c>
   111a4:	e1500002 	cmp	r0, r2
   111a8:	1afffff4 	bne	11180 <strncmp+0x38>
   111ac:	e3a00000 	mov	r0, #0
   111b0:	e12fff1e 	bx	lr
   111b4:	e1d1c0d1 	ldrsb	ip, [r1, #1]
   111b8:	e153000c 	cmp	r3, ip
   111bc:	ca000002 	bgt	111cc <strncmp+0x84>
   111c0:	b3e00000 	mvnlt	r0, #0
   111c4:	a3a00000 	movge	r0, #0
   111c8:	e12fff1e 	bx	lr
   111cc:	e3a00001 	mov	r0, #1
   111d0:	e12fff1e 	bx	lr
   111d4:	e3e00000 	mvn	r0, #0
   111d8:	e12fff1e 	bx	lr

000111dc <strcpy>:
   111dc:	e1d130d0 	ldrsb	r3, [r1]
   111e0:	e1a02000 	mov	r2, r0
   111e4:	e3530000 	cmp	r3, #0
   111e8:	0a000003 	beq	111fc <strcpy+0x20>
   111ec:	e4c23001 	strb	r3, [r2], #1
   111f0:	e1f130d1 	ldrsb	r3, [r1, #1]!
   111f4:	e3530000 	cmp	r3, #0
   111f8:	1afffffb 	bne	111ec <strcpy+0x10>
   111fc:	e3a03000 	mov	r3, #0
   11200:	e5c23000 	strb	r3, [r2]
   11204:	e12fff1e 	bx	lr

00011208 <strncpy>:
   11208:	e3520000 	cmp	r2, #0
   1120c:	012fff1e 	bxeq	lr
   11210:	e1d1c0d0 	ldrsb	ip, [r1]
   11214:	e35c0000 	cmp	ip, #0
   11218:	0a000009 	beq	11244 <strncpy+0x3c>
   1121c:	e0802002 	add	r2, r0, r2
   11220:	e1a03000 	mov	r3, r0
   11224:	ea000002 	b	11234 <strncpy+0x2c>
   11228:	e1f1c0d1 	ldrsb	ip, [r1, #1]!
   1122c:	e35c0000 	cmp	ip, #0
   11230:	0a000004 	beq	11248 <strncpy+0x40>
   11234:	e4c3c001 	strb	ip, [r3], #1
   11238:	e1530002 	cmp	r3, r2
   1123c:	1afffff9 	bne	11228 <strncpy+0x20>
   11240:	e12fff1e 	bx	lr
   11244:	e1a03000 	mov	r3, r0
   11248:	e3a02000 	mov	r2, #0
   1124c:	e5c32000 	strb	r2, [r3]
   11250:	e12fff1e 	bx	lr

00011254 <strcat>:
   11254:	e1d030d0 	ldrsb	r3, [r0]
   11258:	e3530000 	cmp	r3, #0
   1125c:	e1a03000 	mov	r3, r0
   11260:	0a000002 	beq	11270 <strcat+0x1c>
   11264:	e1f320d1 	ldrsb	r2, [r3, #1]!
   11268:	e3520000 	cmp	r2, #0
   1126c:	1afffffc 	bne	11264 <strcat+0x10>
   11270:	e1d120d0 	ldrsb	r2, [r1]
   11274:	e3520000 	cmp	r2, #0
   11278:	0a000003 	beq	1128c <strcat+0x38>
   1127c:	e4c32001 	strb	r2, [r3], #1
   11280:	e1f120d1 	ldrsb	r2, [r1, #1]!
   11284:	e3520000 	cmp	r2, #0
   11288:	1afffffb 	bne	1127c <strcat+0x28>
   1128c:	e3a02000 	mov	r2, #0
   11290:	e5c32000 	strb	r2, [r3]
   11294:	e12fff1e 	bx	lr

00011298 <strchr>:
   11298:	e1d020d0 	ldrsb	r2, [r0]
   1129c:	e3520000 	cmp	r2, #0
   112a0:	0a000009 	beq	112cc <strchr+0x34>
   112a4:	e1510002 	cmp	r1, r2
   112a8:	1a000002 	bne	112b8 <strchr+0x20>
   112ac:	ea000008 	b	112d4 <strchr+0x3c>
   112b0:	e1530001 	cmp	r3, r1
   112b4:	012fff1e 	bxeq	lr
   112b8:	e1f030d1 	ldrsb	r3, [r0, #1]!
   112bc:	e3530000 	cmp	r3, #0
   112c0:	1afffffa 	bne	112b0 <strchr+0x18>
   112c4:	e1a00003 	mov	r0, r3
   112c8:	e12fff1e 	bx	lr
   112cc:	e1a00002 	mov	r0, r2
   112d0:	e12fff1e 	bx	lr
   112d4:	e12fff1e 	bx	lr

000112d8 <strtok_r>:
   112d8:	e3500000 	cmp	r0, #0
   112dc:	0a00002c 	beq	11394 <strtok_r+0xbc>
   112e0:	e92d4030 	push	{r4, r5, lr}
   112e4:	e1d0e0d0 	ldrsb	lr, [r0]
   112e8:	e35e0000 	cmp	lr, #0
   112ec:	11d140d0 	ldrsbne	r4, [r1]
   112f0:	0a000024 	beq	11388 <strtok_r+0xb0>
   112f4:	e3540000 	cmp	r4, #0
   112f8:	0a000008 	beq	11320 <strtok_r+0x48>
   112fc:	e15e0004 	cmp	lr, r4
   11300:	0a000019 	beq	1136c <strtok_r+0x94>
   11304:	e1a0c001 	mov	ip, r1
   11308:	ea000001 	b	11314 <strtok_r+0x3c>
   1130c:	e15e0003 	cmp	lr, r3
   11310:	0a000015 	beq	1136c <strtok_r+0x94>
   11314:	e1fc30d1 	ldrsb	r3, [ip, #1]!
   11318:	e3530000 	cmp	r3, #0
   1131c:	1afffffa 	bne	1130c <strtok_r+0x34>
   11320:	e35e0000 	cmp	lr, #0
   11324:	0a000017 	beq	11388 <strtok_r+0xb0>
   11328:	e1a05000 	mov	r5, r0
   1132c:	e3540000 	cmp	r4, #0
   11330:	0a000008 	beq	11358 <strtok_r+0x80>
   11334:	e15e0004 	cmp	lr, r4
   11338:	0a00000d 	beq	11374 <strtok_r+0x9c>
   1133c:	e1a0c001 	mov	ip, r1
   11340:	ea000001 	b	1134c <strtok_r+0x74>
   11344:	e15e0003 	cmp	lr, r3
   11348:	0a000009 	beq	11374 <strtok_r+0x9c>
   1134c:	e1fc30d1 	ldrsb	r3, [ip, #1]!
   11350:	e3530000 	cmp	r3, #0
   11354:	1afffffa 	bne	11344 <strtok_r+0x6c>
   11358:	e1f5e0d1 	ldrsb	lr, [r5, #1]!
   1135c:	e35e0000 	cmp	lr, #0
   11360:	1afffff1 	bne	1132c <strtok_r+0x54>
   11364:	e5825000 	str	r5, [r2]
   11368:	e8bd8030 	pop	{r4, r5, pc}
   1136c:	e1f0e0d1 	ldrsb	lr, [r0, #1]!
   11370:	eaffffdf 	b	112f4 <strtok_r+0x1c>
   11374:	e3a03000 	mov	r3, #0
   11378:	e2855001 	add	r5, r5, #1
   1137c:	e5453001 	strb	r3, [r5, #-1]
   11380:	e5825000 	str	r5, [r2]
   11384:	e8bd8030 	pop	{r4, r5, pc}
   11388:	e3a00000 	mov	r0, #0
   1138c:	e5820000 	str	r0, [r2]
   11390:	e8bd8030 	pop	{r4, r5, pc}
   11394:	e5920000 	ldr	r0, [r2]
   11398:	e3500000 	cmp	r0, #0
   1139c:	1affffcf 	bne	112e0 <strtok_r+0x8>
   113a0:	e12fff1e 	bx	lr

000113a4 <strtoul>:
   113a4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   113a8:	e3510000 	cmp	r1, #0
   113ac:	e2425002 	sub	r5, r2, #2
   113b0:	15810000 	strne	r0, [r1]
   113b4:	e3520000 	cmp	r2, #0
   113b8:	13550022 	cmpne	r5, #34	; 0x22
   113bc:	e3c2e010 	bic	lr, r2, #16
   113c0:	83a05001 	movhi	r5, #1
   113c4:	93a05000 	movls	r5, #0
   113c8:	8a000037 	bhi	114ac <strtoul+0x108>
   113cc:	e1d0c0d0 	ldrsb	ip, [r0]
   113d0:	e1a04000 	mov	r4, r0
   113d4:	e24c3009 	sub	r3, ip, #9
   113d8:	e35c0020 	cmp	ip, #32
   113dc:	e2800001 	add	r0, r0, #1
   113e0:	e6ef3073 	uxtb	r3, r3
   113e4:	0afffff8 	beq	113cc <strtoul+0x28>
   113e8:	e3530004 	cmp	r3, #4
   113ec:	9afffff6 	bls	113cc <strtoul+0x28>
   113f0:	e35c002b 	cmp	ip, #43	; 0x2b
   113f4:	0a00002e 	beq	114b4 <strtoul+0x110>
   113f8:	e35c002d 	cmp	ip, #45	; 0x2d
   113fc:	01d4c0d1 	ldrsbeq	ip, [r4, #1]
   11400:	03a07001 	moveq	r7, #1
   11404:	01a04000 	moveq	r4, r0
   11408:	13a07000 	movne	r7, #0
   1140c:	e35c0030 	cmp	ip, #48	; 0x30
   11410:	0a00002c 	beq	114c8 <strtoul+0x124>
   11414:	e3520000 	cmp	r2, #0
   11418:	03a0200a 	moveq	r2, #10
   1141c:	e35c002f 	cmp	ip, #47	; 0x2f
   11420:	e1a0300c 	mov	r3, ip
   11424:	da00001d 	ble	114a0 <strtoul+0xfc>
   11428:	e3a0e000 	mov	lr, #0
   1142c:	e3a05001 	mov	r5, #1
   11430:	e1a0600e 	mov	r6, lr
   11434:	ea000008 	b	1145c <strtoul+0xb8>
   11438:	e020329e 	mla	r0, lr, r2, r3
   1143c:	e150000e 	cmp	r0, lr
   11440:	3a000029 	bcc	114ec <strtoul+0x148>
   11444:	e1f430d1 	ldrsb	r3, [r4, #1]!
   11448:	e1a05006 	mov	r5, r6
   1144c:	e353002f 	cmp	r3, #47	; 0x2f
   11450:	e1a0c003 	mov	ip, r3
   11454:	da000029 	ble	11500 <strtoul+0x15c>
   11458:	e1a0e000 	mov	lr, r0
   1145c:	e24cc061 	sub	ip, ip, #97	; 0x61
   11460:	e35c0019 	cmp	ip, #25
   11464:	92433020 	subls	r3, r3, #32
   11468:	e3530040 	cmp	r3, #64	; 0x40
   1146c:	c2433007 	subgt	r3, r3, #7
   11470:	e2433030 	sub	r3, r3, #48	; 0x30
   11474:	e1520003 	cmp	r2, r3
   11478:	caffffee 	bgt	11438 <strtoul+0x94>
   1147c:	e1a0000e 	mov	r0, lr
   11480:	e2255001 	eor	r5, r5, #1
   11484:	e3510000 	cmp	r1, #0
   11488:	e0055007 	and	r5, r5, r7
   1148c:	0a000000 	beq	11494 <strtoul+0xf0>
   11490:	e5814000 	str	r4, [r1]
   11494:	e3550000 	cmp	r5, #0
   11498:	12600000 	rsbne	r0, r0, #0
   1149c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   114a0:	e3510000 	cmp	r1, #0
   114a4:	13a00000 	movne	r0, #0
   114a8:	1afffff8 	bne	11490 <strtoul+0xec>
   114ac:	e3a00000 	mov	r0, #0
   114b0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   114b4:	e1d4c0d1 	ldrsb	ip, [r4, #1]
   114b8:	e3a07000 	mov	r7, #0
   114bc:	e35c0030 	cmp	ip, #48	; 0x30
   114c0:	e1a04000 	mov	r4, r0
   114c4:	1affffd2 	bne	11414 <strtoul+0x70>
   114c8:	e1d4c0d1 	ldrsb	ip, [r4, #1]
   114cc:	e2840001 	add	r0, r4, #1
   114d0:	e3cc3020 	bic	r3, ip, #32
   114d4:	e3530058 	cmp	r3, #88	; 0x58
   114d8:	0a00000a 	beq	11508 <strtoul+0x164>
   114dc:	e3520000 	cmp	r2, #0
   114e0:	e1a04000 	mov	r4, r0
   114e4:	03a02008 	moveq	r2, #8
   114e8:	eaffffcb 	b	1141c <strtoul+0x78>
   114ec:	e3510000 	cmp	r1, #0
   114f0:	0a00000a 	beq	11520 <strtoul+0x17c>
   114f4:	e5814000 	str	r4, [r1]
   114f8:	e3e00000 	mvn	r0, #0
   114fc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   11500:	e3a05001 	mov	r5, #1
   11504:	eaffffde 	b	11484 <strtoul+0xe0>
   11508:	e35e0000 	cmp	lr, #0
   1150c:	1affffe6 	bne	114ac <strtoul+0x108>
   11510:	e1d4c0d2 	ldrsb	ip, [r4, #2]
   11514:	e3a02010 	mov	r2, #16
   11518:	e2844002 	add	r4, r4, #2
   1151c:	eaffffbe 	b	1141c <strtoul+0x78>
   11520:	e3e00000 	mvn	r0, #0
   11524:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00011528 <char2int>:
   11528:	e12fff1e 	bx	lr

0001152c <memcpy>:
   1152c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
   11530:	e352007f 	cmp	r2, #127	; 0x7f
   11534:	9a00000b 	bls	11568 <memcpy+0x3c>
   11538:	e3110003 	tst	r1, #3
   1153c:	1a000009 	bne	11568 <memcpy+0x3c>
   11540:	e3100003 	tst	r0, #3
   11544:	1a000007 	bne	11568 <memcpy+0x3c>
   11548:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
   1154c:	e8b107f8 	ldm	r1!, {r3, r4, r5, r6, r7, r8, r9, sl}
   11550:	e2422020 	sub	r2, r2, #32
   11554:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
   11558:	f5d1f040 	pld	[r1, #64]	; 0x40
   1155c:	e352001f 	cmp	r2, #31
   11560:	8afffff9 	bhi	1154c <memcpy+0x20>
   11564:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
   11568:	e3520000 	cmp	r2, #0
   1156c:	0a000003 	beq	11580 <memcpy+0x54>
   11570:	e4d13001 	ldrb	r3, [r1], #1
   11574:	e2522001 	subs	r2, r2, #1
   11578:	e4c03001 	strb	r3, [r0], #1
   1157c:	1afffffb 	bne	11570 <memcpy+0x44>
   11580:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
   11584:	e12fff1e 	bx	lr

00011588 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
   11588:	e12fff1e 	bx	lr

0001158c <CVirtualGPIOPin::~CVirtualGPIOPin()>:
   1158c:	e92d4010 	push	{r4, lr}
   11590:	e1a04000 	mov	r4, r0
   11594:	e3a01010 	mov	r1, #16
   11598:	eb000233 	bl	11e6c <operator delete(void*, unsigned int)>
   1159c:	e1a00004 	mov	r0, r4
   115a0:	e8bd8010 	pop	{r4, pc}

000115a4 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]>:
   115a4:	e92d4070 	push	{r4, r5, r6, lr}
   115a8:	e59f5094 	ldr	r5, [pc, #148]	; 11644 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0xa0>
   115ac:	e1a04000 	mov	r4, r0
   115b0:	e5950000 	ldr	r0, [r5]
   115b4:	e1a06001 	mov	r6, r1
   115b8:	e3500000 	cmp	r0, #0
   115bc:	1a00001a 	bne	1162c <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x88>
   115c0:	e1d400bc 	ldrh	r0, [r4, #12]
   115c4:	e1d430be 	ldrh	r3, [r4, #14]
   115c8:	e5846008 	str	r6, [r4, #8]
   115cc:	e0402003 	sub	r2, r0, r3
   115d0:	e6bf2072 	sxth	r2, r2
   115d4:	e3520000 	cmp	r2, #0
   115d8:	da00000c 	ble	11610 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x6c>
   115dc:	e3560000 	cmp	r6, #0
   115e0:	1a00000c 	bne	11618 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x74>
   115e4:	e2833001 	add	r3, r3, #1
   115e8:	e6ff3073 	uxth	r3, r3
   115ec:	e1c430be 	strh	r3, [r4, #14]
   115f0:	e5941004 	ldr	r1, [r4, #4]
   115f4:	e5952004 	ldr	r2, [r5, #4]
   115f8:	e1833800 	orr	r3, r3, r0, lsl #16
   115fc:	e7823101 	str	r3, [r2, r1, lsl #2]
   11600:	e5953000 	ldr	r3, [r5]
   11604:	e3530000 	cmp	r3, #0
   11608:	1a000005 	bne	11624 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x80>
   1160c:	e8bd8070 	pop	{r4, r5, r6, pc}
   11610:	e3560000 	cmp	r6, #0
   11614:	1a000006 	bne	11634 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x90>
   11618:	e5953000 	ldr	r3, [r5]
   1161c:	e3530000 	cmp	r3, #0
   11620:	08bd8070 	popeq	{r4, r5, r6, pc}
   11624:	e8bd4070 	pop	{r4, r5, r6, lr}
   11628:	ea0001de 	b	11da8 <LeaveCritical>
   1162c:	eb0001b0 	bl	11cf4 <EnterCritical>
   11630:	eaffffe2 	b	115c0 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x1c>
   11634:	e2800001 	add	r0, r0, #1
   11638:	e6ff0070 	uxth	r0, r0
   1163c:	e1c400bc 	strh	r0, [r4, #12]
   11640:	eaffffea 	b	115f0 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x4c>
   11644:	00015ab8 	.word	0x00015ab8

00011648 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)>:
   11648:	e3a03000 	mov	r3, #0
   1164c:	e92d4030 	push	{r4, r5, lr}
   11650:	e59f2124 	ldr	r2, [pc, #292]	; 1177c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x134>
   11654:	e3510001 	cmp	r1, #1
   11658:	e24dd024 	sub	sp, sp, #36	; 0x24
   1165c:	e1a04000 	mov	r4, r0
   11660:	e5801004 	str	r1, [r0, #4]
   11664:	e5802000 	str	r2, [r0]
   11668:	e1c030bc 	strh	r3, [r0, #12]
   1166c:	e1c030be 	strh	r3, [r0, #14]
   11670:	9a000002 	bls	11680 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x38>
   11674:	e1a00004 	mov	r0, r4
   11678:	e28dd024 	add	sp, sp, #36	; 0x24
   1167c:	e8bd8030 	pop	{r4, r5, pc}
   11680:	e59f50f8 	ldr	r5, [pc, #248]	; 11780 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x138>
   11684:	e5950000 	ldr	r0, [r5]
   11688:	e1500003 	cmp	r0, r3
   1168c:	1a00002c 	bne	11744 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0xfc>
   11690:	e5953004 	ldr	r3, [r5, #4]
   11694:	e3530000 	cmp	r3, #0
   11698:	0a000011 	beq	116e4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x9c>
   1169c:	e3a01000 	mov	r1, #0
   116a0:	e5942004 	ldr	r2, [r4, #4]
   116a4:	e7831102 	str	r1, [r3, r2, lsl #2]
   116a8:	e5953000 	ldr	r3, [r5]
   116ac:	e3530000 	cmp	r3, #0
   116b0:	1a000009 	bne	116dc <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x94>
   116b4:	e5943004 	ldr	r3, [r4, #4]
   116b8:	e3530001 	cmp	r3, #1
   116bc:	8affffec 	bhi	11674 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x2c>
   116c0:	e5953004 	ldr	r3, [r5, #4]
   116c4:	e3530000 	cmp	r3, #0
   116c8:	0affffe9 	beq	11674 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x2c>
   116cc:	e3a01000 	mov	r1, #0
   116d0:	e1a00004 	mov	r0, r4
   116d4:	ebffffb2 	bl	115a4 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]>
   116d8:	eaffffe5 	b	11674 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x2c>
   116dc:	eb0001b1 	bl	11da8 <LeaveCritical>
   116e0:	eafffff3 	b	116b4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x6c>
   116e4:	e3a00001 	mov	r0, #1
   116e8:	eb00014a 	bl	11c18 <CMemorySystem::GetCoherentPage(unsigned int)>
   116ec:	e5850004 	str	r0, [r5, #4]
   116f0:	e28d000c 	add	r0, sp, #12
   116f4:	ebffe323 	bl	a388 <CBcmPropertyTags::CBcmPropertyTags()>
   116f8:	e3a03004 	mov	r3, #4
   116fc:	e595c004 	ldr	ip, [r5, #4]
   11700:	e58d3000 	str	r3, [sp]
   11704:	e3ccc103 	bic	ip, ip, #-1073741824	; 0xc0000000
   11708:	e38cc101 	orr	ip, ip, #1073741824	; 0x40000000
   1170c:	e28d000c 	add	r0, sp, #12
   11710:	e28d2010 	add	r2, sp, #16
   11714:	e3a03010 	mov	r3, #16
   11718:	e59f1064 	ldr	r1, [pc, #100]	; 11784 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x13c>
   1171c:	e58dc01c 	str	ip, [sp, #28]
   11720:	ebffe36f 	bl	a4e4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   11724:	e3500000 	cmp	r0, #0
   11728:	0a000007 	beq	1174c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x104>
   1172c:	e28d000c 	add	r0, sp, #12
   11730:	ebffe31a 	bl	a3a0 <CBcmPropertyTags::~CBcmPropertyTags()>
   11734:	e5953004 	ldr	r3, [r5, #4]
   11738:	e3530000 	cmp	r3, #0
   1173c:	0affffd9 	beq	116a8 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x60>
   11740:	eaffffd5 	b	1169c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x54>
   11744:	eb00016a 	bl	11cf4 <EnterCritical>
   11748:	eaffffd0 	b	11690 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x48>
   1174c:	e3a03010 	mov	r3, #16
   11750:	e58d0000 	str	r0, [sp]
   11754:	e28d2010 	add	r2, sp, #16
   11758:	e59f1028 	ldr	r1, [pc, #40]	; 11788 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x140>
   1175c:	e28d000c 	add	r0, sp, #12
   11760:	ebffe35f 	bl	a4e4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   11764:	e3500000 	cmp	r0, #0
   11768:	159d301c 	ldrne	r3, [sp, #28]
   1176c:	05850004 	streq	r0, [r5, #4]
   11770:	13c33103 	bicne	r3, r3, #-1073741824	; 0xc0000000
   11774:	15853004 	strne	r3, [r5, #4]
   11778:	eaffffeb 	b	1172c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0xe4>
   1177c:	00014594 	.word	0x00014594
   11780:	00015ab8 	.word	0x00015ab8
   11784:	00048020 	.word	0x00048020
   11788:	00040010 	.word	0x00040010

0001178c <CVirtualGPIOPin::Write(unsigned int)>:
   1178c:	e5902004 	ldr	r2, [r0, #4]
   11790:	e1a03001 	mov	r3, r1
   11794:	e3520001 	cmp	r2, #1
   11798:	812fff1e 	bxhi	lr
   1179c:	e3510001 	cmp	r1, #1
   117a0:	93a03000 	movls	r3, #0
   117a4:	83a03001 	movhi	r3, #1
   117a8:	e59f2014 	ldr	r2, [pc, #20]	; 117c4 <CVirtualGPIOPin::Write(unsigned int)+0x38>
   117ac:	e5922004 	ldr	r2, [r2, #4]
   117b0:	e3520000 	cmp	r2, #0
   117b4:	03833001 	orreq	r3, r3, #1
   117b8:	e3530000 	cmp	r3, #0
   117bc:	112fff1e 	bxne	lr
   117c0:	eaffff77 	b	115a4 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]>
   117c4:	00015ab8 	.word	0x00015ab8

000117c8 <CVirtualGPIOPin::Invert()>:
   117c8:	e5901008 	ldr	r1, [r0, #8]
   117cc:	e2211001 	eor	r1, r1, #1
   117d0:	eaffffed 	b	1178c <CVirtualGPIOPin::Write(unsigned int)>

000117d4 <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE>:
   117d4:	e3a02000 	mov	r2, #0
   117d8:	e59f3004 	ldr	r3, [pc, #4]	; 117e4 <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE+0x10>
   117dc:	e5832000 	str	r2, [r3]
   117e0:	e12fff1e 	bx	lr
   117e4:	00015ab8 	.word	0x00015ab8

000117e8 <UndefinedInstructionInternal>:
   117e8:	e24ee004 	sub	lr, lr, #4
   117ec:	e92d4000 	stmfd	sp!, {lr}
   117f0:	e14fe000 	mrs	lr, SPSR
   117f4:	e92d4000 	stmfd	sp!, {lr}
   117f8:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   117fc:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   11800:	e1a0100d 	mov	r1, sp
   11804:	f1020012 	cps	#18
   11808:	e1a0200d 	mov	r2, sp
   1180c:	e1a0300e 	mov	r3, lr
   11810:	f1020011 	cps	#17
   11814:	e1a0400d 	mov	r4, sp
   11818:	e1a0500e 	mov	r5, lr
   1181c:	f102001f 	cps	#31
   11820:	e1a0d001 	mov	sp, r1
   11824:	e92d003c 	push	{r2, r3, r4, r5}
   11828:	e1a0100d 	mov	r1, sp
   1182c:	e3a00001 	mov	r0, #1
   11830:	ea0007fc 	b	13828 <ExceptionHandler>

00011834 <PrefetchAbortStub>:
   11834:	e24ee004 	sub	lr, lr, #4
   11838:	e92d4000 	stmfd	sp!, {lr}
   1183c:	e14fe000 	mrs	lr, SPSR
   11840:	e92d4000 	stmfd	sp!, {lr}
   11844:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   11848:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   1184c:	e1a0100d 	mov	r1, sp
   11850:	f1020012 	cps	#18
   11854:	e1a0200d 	mov	r2, sp
   11858:	e1a0300e 	mov	r3, lr
   1185c:	f1020011 	cps	#17
   11860:	e1a0400d 	mov	r4, sp
   11864:	e1a0500e 	mov	r5, lr
   11868:	f102001f 	cps	#31
   1186c:	e1a0d001 	mov	sp, r1
   11870:	e92d003c 	push	{r2, r3, r4, r5}
   11874:	e1a0100d 	mov	r1, sp
   11878:	e3a00002 	mov	r0, #2
   1187c:	ea0007e9 	b	13828 <ExceptionHandler>

00011880 <DataAbortStub>:
   11880:	e24ee008 	sub	lr, lr, #8
   11884:	e92d4000 	stmfd	sp!, {lr}
   11888:	e14fe000 	mrs	lr, SPSR
   1188c:	e92d4000 	stmfd	sp!, {lr}
   11890:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   11894:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   11898:	e1a0100d 	mov	r1, sp
   1189c:	f1020012 	cps	#18
   118a0:	e1a0200d 	mov	r2, sp
   118a4:	e1a0300e 	mov	r3, lr
   118a8:	f1020011 	cps	#17
   118ac:	e1a0400d 	mov	r4, sp
   118b0:	e1a0500e 	mov	r5, lr
   118b4:	f102001f 	cps	#31
   118b8:	e1a0d001 	mov	sp, r1
   118bc:	e92d003c 	push	{r2, r3, r4, r5}
   118c0:	e1a0100d 	mov	r1, sp
   118c4:	e3a00003 	mov	r0, #3
   118c8:	ea0007d6 	b	13828 <ExceptionHandler>

000118cc <UndefinedInstructionStub>:
   118cc:	e92d4001 	push	{r0, lr}
   118d0:	eef80a10 	vmrs	r0, fpexc
   118d4:	e3100102 	tst	r0, #-2147483648	; 0x80000000
   118d8:	0affffc2 	beq	117e8 <UndefinedInstructionInternal>
   118dc:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
   118e0:	eee80a10 	vmsr	fpexc, r0
   118e4:	e8fd8001 	ldm	sp!, {r0, pc}^

000118e8 <IRQStub>:
   118e8:	e24ee004 	sub	lr, lr, #4
   118ec:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
   118f0:	ebffe994 	bl	bf48 <InterruptHandler>
   118f4:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^

000118f8 <FIQStub>:
   118f8:	e24ee004 	sub	lr, lr, #4
   118fc:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
   11900:	e3a03000 	mov	r3, #0
   11904:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   11908:	e59f2040 	ldr	r2, [pc, #64]	; 11950 <FIQStub+0x58>
   1190c:	e5921000 	ldr	r1, [r2]
   11910:	e3510000 	cmp	r1, #0
   11914:	0a000004 	beq	1192c <FIQStub+0x34>
   11918:	e5920004 	ldr	r0, [r2, #4]
   1191c:	e12fff31 	blx	r1
   11920:	e3a03000 	mov	r3, #0
   11924:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   11928:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^
   1192c:	e3a03000 	mov	r3, #0
   11930:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   11934:	e59f1018 	ldr	r1, [pc, #24]	; 11954 <FIQStub+0x5c>
   11938:	e3a00000 	mov	r0, #0
   1193c:	e5810000 	str	r0, [r1]
   11940:	e3a03000 	mov	r3, #0
   11944:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   11948:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   1194c:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^
   11950:	000159c0 	.word	0x000159c0
   11954:	2000b20c 	.word	0x2000b20c

00011958 <CMemorySystem::~CMemorySystem()>:
   11958:	e59f3068 	ldr	r3, [pc, #104]	; 119c8 <CMemorySystem::~CMemorySystem()+0x70>
   1195c:	e92d4070 	push	{r4, r5, r6, lr}
   11960:	e5932000 	ldr	r2, [r3]
   11964:	e1a04000 	mov	r4, r0
   11968:	e1520000 	cmp	r2, r0
   1196c:	0a000001 	beq	11978 <CMemorySystem::~CMemorySystem()+0x20>
   11970:	e1a00004 	mov	r0, r4
   11974:	e8bd8070 	pop	{r4, r5, r6, pc}
   11978:	e3a02000 	mov	r2, #0
   1197c:	e5d01000 	ldrb	r1, [r0]
   11980:	e5832000 	str	r2, [r3]
   11984:	e1510002 	cmp	r1, r2
   11988:	0a000004 	beq	119a0 <CMemorySystem::~CMemorySystem()+0x48>
   1198c:	ee111f10 	mrc	15, 0, r1, cr1, cr0, {0}
   11990:	e59f3034 	ldr	r3, [pc, #52]	; 119cc <CMemorySystem::~CMemorySystem()+0x74>
   11994:	e0033001 	and	r3, r3, r1
   11998:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
   1199c:	ee082f17 	mcr	15, 0, r2, cr8, cr7, {0}
   119a0:	e5945008 	ldr	r5, [r4, #8]
   119a4:	e3550000 	cmp	r5, #0
   119a8:	0afffff0 	beq	11970 <CMemorySystem::~CMemorySystem()+0x18>
   119ac:	e1a00005 	mov	r0, r5
   119b0:	eb0000c5 	bl	11ccc <CPageTable::~CPageTable()>
   119b4:	e1a00005 	mov	r0, r5
   119b8:	e3a01004 	mov	r1, #4
   119bc:	eb00012a 	bl	11e6c <operator delete(void*, unsigned int)>
   119c0:	e1a00004 	mov	r0, r4
   119c4:	e8bd8070 	pop	{r4, r5, r6, pc}
   119c8:	00015ac0 	.word	0x00015ac0
   119cc:	ff7fe7fa 	.word	0xff7fe7fa

000119d0 <CMemorySystem::GetMemSize() const>:
   119d0:	e92d4010 	push	{r4, lr}
   119d4:	e59f402c 	ldr	r4, [pc, #44]	; 11a08 <CMemorySystem::GetMemSize() const+0x38>
   119d8:	e5943000 	ldr	r3, [r4]
   119dc:	e3530000 	cmp	r3, #0
   119e0:	0a000001 	beq	119ec <CMemorySystem::GetMemSize() const+0x1c>
   119e4:	e5930004 	ldr	r0, [r3, #4]
   119e8:	e8bd8010 	pop	{r4, pc}
   119ec:	e3a02082 	mov	r2, #130	; 0x82
   119f0:	e59f1014 	ldr	r1, [pc, #20]	; 11a0c <CMemorySystem::GetMemSize() const+0x3c>
   119f4:	e59f0014 	ldr	r0, [pc, #20]	; 11a10 <CMemorySystem::GetMemSize() const+0x40>
   119f8:	eb0002a5 	bl	12494 <assertion_failed>
   119fc:	e5943000 	ldr	r3, [r4]
   11a00:	e5930004 	ldr	r0, [r3, #4]
   11a04:	e8bd8010 	pop	{r4, pc}
   11a08:	00015ac0 	.word	0x00015ac0
   11a0c:	0001459c 	.word	0x0001459c
   11a10:	00013ec4 	.word	0x00013ec4

00011a14 <CMemorySystem::Get()>:
   11a14:	e92d4010 	push	{r4, lr}
   11a18:	e59f4020 	ldr	r4, [pc, #32]	; 11a40 <CMemorySystem::Get()+0x2c>
   11a1c:	e5940000 	ldr	r0, [r4]
   11a20:	e3500000 	cmp	r0, #0
   11a24:	18bd8010 	popne	{r4, pc}
   11a28:	e3a02088 	mov	r2, #136	; 0x88
   11a2c:	e59f1010 	ldr	r1, [pc, #16]	; 11a44 <CMemorySystem::Get()+0x30>
   11a30:	e59f0010 	ldr	r0, [pc, #16]	; 11a48 <CMemorySystem::Get()+0x34>
   11a34:	eb000296 	bl	12494 <assertion_failed>
   11a38:	e5940000 	ldr	r0, [r4]
   11a3c:	e8bd8010 	pop	{r4, pc}
   11a40:	00015ac0 	.word	0x00015ac0
   11a44:	0001459c 	.word	0x0001459c
   11a48:	00013ec4 	.word	0x00013ec4

00011a4c <CMemorySystem::EnableMMU()>:
   11a4c:	e5d03000 	ldrb	r3, [r0]
   11a50:	e92d4010 	push	{r4, lr}
   11a54:	e3530000 	cmp	r3, #0
   11a58:	e1a04000 	mov	r4, r0
   11a5c:	0a00001c 	beq	11ad4 <CMemorySystem::EnableMMU()+0x88>
   11a60:	ee113f30 	mrc	15, 0, r3, cr1, cr0, {1}
   11a64:	e3833040 	orr	r3, r3, #64	; 0x40
   11a68:	ee013f30 	mcr	15, 0, r3, cr1, cr0, {1}
   11a6c:	ee103f70 	mrc	15, 0, r3, cr0, cr0, {3}
   11a70:	e3130001 	tst	r3, #1
   11a74:	1a00001b 	bne	11ae8 <CMemorySystem::EnableMMU()+0x9c>
   11a78:	e3a03000 	mov	r3, #0
   11a7c:	ee023f50 	mcr	15, 0, r3, cr2, cr0, {2}
   11a80:	e5940008 	ldr	r0, [r4, #8]
   11a84:	e1500003 	cmp	r0, r3
   11a88:	0a00001b 	beq	11afc <CMemorySystem::EnableMMU()+0xb0>
   11a8c:	eb00008f 	bl	11cd0 <CPageTable::GetBaseAddress() const>
   11a90:	ee020f10 	mcr	15, 0, r0, cr2, cr0, {0}
   11a94:	e3a03001 	mov	r3, #1
   11a98:	ee033f10 	mcr	15, 0, r3, cr3, cr0, {0}
   11a9c:	e3a03000 	mov	r3, #0
   11aa0:	ee073f16 	mcr	15, 0, r3, cr7, cr6, {0}
   11aa4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   11aa8:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   11aac:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   11ab0:	ee083f17 	mcr	15, 0, r3, cr8, cr7, {0}
   11ab4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   11ab8:	ee073f95 	mcr	15, 0, r3, cr7, cr5, {4}
   11abc:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
   11ac0:	e59f204c 	ldr	r2, [pc, #76]	; 11b14 <CMemorySystem::EnableMMU()+0xc8>
   11ac4:	e3c33002 	bic	r3, r3, #2
   11ac8:	e1832002 	orr	r2, r3, r2
   11acc:	ee012f10 	mcr	15, 0, r2, cr1, cr0, {0}
   11ad0:	e8bd8010 	pop	{r4, pc}
   11ad4:	e3a0208e 	mov	r2, #142	; 0x8e
   11ad8:	e59f1038 	ldr	r1, [pc, #56]	; 11b18 <CMemorySystem::EnableMMU()+0xcc>
   11adc:	e59f0038 	ldr	r0, [pc, #56]	; 11b1c <CMemorySystem::EnableMMU()+0xd0>
   11ae0:	eb00026b 	bl	12494 <assertion_failed>
   11ae4:	eaffffdd 	b	11a60 <CMemorySystem::EnableMMU()+0x14>
   11ae8:	e3a0209b 	mov	r2, #155	; 0x9b
   11aec:	e59f1024 	ldr	r1, [pc, #36]	; 11b18 <CMemorySystem::EnableMMU()+0xcc>
   11af0:	e59f0028 	ldr	r0, [pc, #40]	; 11b20 <CMemorySystem::EnableMMU()+0xd4>
   11af4:	eb000266 	bl	12494 <assertion_failed>
   11af8:	eaffffde 	b	11a78 <CMemorySystem::EnableMMU()+0x2c>
   11afc:	e59f0020 	ldr	r0, [pc, #32]	; 11b24 <CMemorySystem::EnableMMU()+0xd8>
   11b00:	e3a020a1 	mov	r2, #161	; 0xa1
   11b04:	e59f100c 	ldr	r1, [pc, #12]	; 11b18 <CMemorySystem::EnableMMU()+0xcc>
   11b08:	eb000261 	bl	12494 <assertion_failed>
   11b0c:	e5940008 	ldr	r0, [r4, #8]
   11b10:	eaffffdd 	b	11a8c <CMemorySystem::EnableMMU()+0x40>
   11b14:	00c01805 	.word	0x00c01805
   11b18:	0001459c 	.word	0x0001459c
   11b1c:	000145a8 	.word	0x000145a8
   11b20:	000145b8 	.word	0x000145b8
   11b24:	000145e4 	.word	0x000145e4

00011b28 <CMemorySystem::CMemorySystem(bool)>:
   11b28:	e3a03000 	mov	r3, #0
   11b2c:	e92d4030 	push	{r4, r5, lr}
   11b30:	e59f20d0 	ldr	r2, [pc, #208]	; 11c08 <CMemorySystem::CMemorySystem(bool)+0xe0>
   11b34:	e24dd024 	sub	sp, sp, #36	; 0x24
   11b38:	e5925000 	ldr	r5, [r2]
   11b3c:	e1a04000 	mov	r4, r0
   11b40:	e1550003 	cmp	r5, r3
   11b44:	e5c01000 	strb	r1, [r0]
   11b48:	e5803004 	str	r3, [r0, #4]
   11b4c:	e5803008 	str	r3, [r0, #8]
   11b50:	0a000002 	beq	11b60 <CMemorySystem::CMemorySystem(bool)+0x38>
   11b54:	e1a00004 	mov	r0, r4
   11b58:	e28dd024 	add	sp, sp, #36	; 0x24
   11b5c:	e8bd8030 	pop	{r4, r5, pc}
   11b60:	e28d0008 	add	r0, sp, #8
   11b64:	e5824000 	str	r4, [r2]
   11b68:	ebffe206 	bl	a388 <CBcmPropertyTags::CBcmPropertyTags()>
   11b6c:	e58d5000 	str	r5, [sp]
   11b70:	e28d0008 	add	r0, sp, #8
   11b74:	e3a03014 	mov	r3, #20
   11b78:	e28d200c 	add	r2, sp, #12
   11b7c:	e59f1088 	ldr	r1, [pc, #136]	; 11c0c <CMemorySystem::CMemorySystem(bool)+0xe4>
   11b80:	ebffe257 	bl	a4e4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   11b84:	e3500000 	cmp	r0, #0
   11b88:	0a000018 	beq	11bf0 <CMemorySystem::CMemorySystem(bool)+0xc8>
   11b8c:	e59d0018 	ldr	r0, [sp, #24]
   11b90:	e3500000 	cmp	r0, #0
   11b94:	0a000019 	beq	11c00 <CMemorySystem::CMemorySystem(bool)+0xd8>
   11b98:	e59f1070 	ldr	r1, [pc, #112]	; 11c10 <CMemorySystem::CMemorySystem(bool)+0xe8>
   11b9c:	e59f0070 	ldr	r0, [pc, #112]	; 11c14 <CMemorySystem::CMemorySystem(bool)+0xec>
   11ba0:	e3a02047 	mov	r2, #71	; 0x47
   11ba4:	eb00023a 	bl	12494 <assertion_failed>
   11ba8:	e59d101c 	ldr	r1, [sp, #28]
   11bac:	e59d0018 	ldr	r0, [sp, #24]
   11bb0:	e5841004 	str	r1, [r4, #4]
   11bb4:	eb0000ae 	bl	11e74 <mem_init>
   11bb8:	e5d43000 	ldrb	r3, [r4]
   11bbc:	e3530000 	cmp	r3, #0
   11bc0:	0a000007 	beq	11be4 <CMemorySystem::CMemorySystem(bool)+0xbc>
   11bc4:	e3a00004 	mov	r0, #4
   11bc8:	eb0000a3 	bl	11e5c <operator new(unsigned int)>
   11bcc:	e1a05000 	mov	r5, r0
   11bd0:	e5941004 	ldr	r1, [r4, #4]
   11bd4:	eb000012 	bl	11c24 <CPageTable::CPageTable(unsigned int)>
   11bd8:	e5845008 	str	r5, [r4, #8]
   11bdc:	e1a00004 	mov	r0, r4
   11be0:	ebffff99 	bl	11a4c <CMemorySystem::EnableMMU()>
   11be4:	e28d0008 	add	r0, sp, #8
   11be8:	ebffe1ec 	bl	a3a0 <CBcmPropertyTags::~CBcmPropertyTags()>
   11bec:	eaffffd8 	b	11b54 <CMemorySystem::CMemorySystem(bool)+0x2c>
   11bf0:	e3a01303 	mov	r1, #201326592	; 0xc000000
   11bf4:	e58d0018 	str	r0, [sp, #24]
   11bf8:	e58d101c 	str	r1, [sp, #28]
   11bfc:	eaffffeb 	b	11bb0 <CMemorySystem::CMemorySystem(bool)+0x88>
   11c00:	e59d101c 	ldr	r1, [sp, #28]
   11c04:	eaffffe9 	b	11bb0 <CMemorySystem::CMemorySystem(bool)+0x88>
   11c08:	00015ac0 	.word	0x00015ac0
   11c0c:	00010005 	.word	0x00010005
   11c10:	0001459c 	.word	0x0001459c
   11c14:	000145f8 	.word	0x000145f8

00011c18 <CMemorySystem::GetCoherentPage(unsigned int)>:
   11c18:	e1a00600 	lsl	r0, r0, #12
   11c1c:	e2800501 	add	r0, r0, #4194304	; 0x400000
   11c20:	e12fff1e 	bx	lr

00011c24 <CPageTable::CPageTable(unsigned int)>:
   11c24:	e3a02709 	mov	r2, #2359296	; 0x240000
   11c28:	e3a03000 	mov	r3, #0
   11c2c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   11c30:	e59fc074 	ldr	ip, [pc, #116]	; 11cac <CPageTable::CPageTable(unsigned int)+0x88>
   11c34:	e59f4074 	ldr	r4, [pc, #116]	; 11cb0 <CPageTable::CPageTable(unsigned int)+0x8c>
   11c38:	e59f5074 	ldr	r5, [pc, #116]	; 11cb4 <CPageTable::CPageTable(unsigned int)+0x90>
   11c3c:	e59f9074 	ldr	r9, [pc, #116]	; 11cb8 <CPageTable::CPageTable(unsigned int)+0x94>
   11c40:	e59f8074 	ldr	r8, [pc, #116]	; 11cbc <CPageTable::CPageTable(unsigned int)+0x98>
   11c44:	e59f7074 	ldr	r7, [pc, #116]	; 11cc0 <CPageTable::CPageTable(unsigned int)+0x9c>
   11c48:	e59f6074 	ldr	r6, [pc, #116]	; 11cc4 <CPageTable::CPageTable(unsigned int)+0xa0>
   11c4c:	e59fe074 	ldr	lr, [pc, #116]	; 11cc8 <CPageTable::CPageTable(unsigned int)+0xa4>
   11c50:	e5802000 	str	r2, [r0]
   11c54:	e1530004 	cmp	r3, r4
   11c58:	31a02005 	movcc	r2, r5
   11c5c:	3a000007 	bcc	11c80 <CPageTable::CPageTable(unsigned int)+0x5c>
   11c60:	e3530501 	cmp	r3, #4194304	; 0x400000
   11c64:	0a00000e 	beq	11ca4 <CPageTable::CPageTable(unsigned int)+0x80>
   11c68:	e1510003 	cmp	r1, r3
   11c6c:	81a02008 	movhi	r2, r8
   11c70:	8a000002 	bhi	11c80 <CPageTable::CPageTable(unsigned int)+0x5c>
   11c74:	e1530007 	cmp	r3, r7
   11c78:	91a02006 	movls	r2, r6
   11c7c:	83a02000 	movhi	r2, #0
   11c80:	e1822003 	orr	r2, r2, r3
   11c84:	e5ac2004 	str	r2, [ip, #4]!
   11c88:	e15c000e 	cmp	ip, lr
   11c8c:	e2833601 	add	r3, r3, #1048576	; 0x100000
   11c90:	1affffef 	bne	11c54 <CPageTable::CPageTable(unsigned int)+0x30>
   11c94:	e3a03000 	mov	r3, #0
   11c98:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
   11c9c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   11ca0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   11ca4:	e1a02009 	mov	r2, r9
   11ca8:	eafffff4 	b	11c80 <CPageTable::CPageTable(unsigned int)+0x5c>
   11cac:	0023fffc 	.word	0x0023fffc
   11cb0:	000139f4 	.word	0x000139f4
   11cb4:	0000040e 	.word	0x0000040e
   11cb8:	00010412 	.word	0x00010412
   11cbc:	0000041e 	.word	0x0000041e
   11cc0:	20fffffe 	.word	0x20fffffe
   11cc4:	00010416 	.word	0x00010416
   11cc8:	00243ffc 	.word	0x00243ffc

00011ccc <CPageTable::~CPageTable()>:
   11ccc:	e12fff1e 	bx	lr

00011cd0 <CPageTable::GetBaseAddress() const>:
   11cd0:	e5900000 	ldr	r0, [r0]
   11cd4:	e3800001 	orr	r0, r0, #1
   11cd8:	e12fff1e 	bx	lr

00011cdc <CurrentExecutionLevel>:
   11cdc:	e10f0000 	mrs	r0, CPSR
   11ce0:	e3100040 	tst	r0, #64	; 0x40
   11ce4:	01a003a0 	lsreq	r0, r0, #7
   11ce8:	02000001 	andeq	r0, r0, #1
   11cec:	13a00002 	movne	r0, #2
   11cf0:	e12fff1e 	bx	lr

00011cf4 <EnterCritical>:
   11cf4:	e2403001 	sub	r3, r0, #1
   11cf8:	e3530001 	cmp	r3, #1
   11cfc:	e92d4070 	push	{r4, r5, r6, lr}
   11d00:	e1a05000 	mov	r5, r0
   11d04:	9a000003 	bls	11d18 <EnterCritical+0x24>
   11d08:	e3a02064 	mov	r2, #100	; 0x64
   11d0c:	e59f1080 	ldr	r1, [pc, #128]	; 11d94 <EnterCritical+0xa0>
   11d10:	e59f0080 	ldr	r0, [pc, #128]	; 11d98 <EnterCritical+0xa4>
   11d14:	eb0001de 	bl	12494 <assertion_failed>
   11d18:	e10f6000 	mrs	r6, CPSR
   11d1c:	e3550002 	cmp	r5, #2
   11d20:	0a000001 	beq	11d2c <EnterCritical+0x38>
   11d24:	e3160040 	tst	r6, #64	; 0x40
   11d28:	1a000014 	bne	11d80 <EnterCritical+0x8c>
   11d2c:	f10c00c0 	cpsid	if
   11d30:	e59f4064 	ldr	r4, [pc, #100]	; 11d9c <EnterCritical+0xa8>
   11d34:	e5943000 	ldr	r3, [r4]
   11d38:	e3530013 	cmp	r3, #19
   11d3c:	8a00000a 	bhi	11d6c <EnterCritical+0x78>
   11d40:	e5943000 	ldr	r3, [r4]
   11d44:	e3550001 	cmp	r5, #1
   11d48:	e2832001 	add	r2, r3, #1
   11d4c:	e0843103 	add	r3, r4, r3, lsl #2
   11d50:	e5842000 	str	r2, [r4]
   11d54:	e5836004 	str	r6, [r3, #4]
   11d58:	1a000000 	bne	11d60 <EnterCritical+0x6c>
   11d5c:	f1080040 	cpsie	f
   11d60:	e3a03000 	mov	r3, #0
   11d64:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   11d68:	e8bd8070 	pop	{r4, r5, r6, pc}
   11d6c:	e3a0206e 	mov	r2, #110	; 0x6e
   11d70:	e59f101c 	ldr	r1, [pc, #28]	; 11d94 <EnterCritical+0xa0>
   11d74:	e59f0024 	ldr	r0, [pc, #36]	; 11da0 <EnterCritical+0xac>
   11d78:	eb0001c5 	bl	12494 <assertion_failed>
   11d7c:	eaffffef 	b	11d40 <EnterCritical+0x4c>
   11d80:	e3a0206a 	mov	r2, #106	; 0x6a
   11d84:	e59f1008 	ldr	r1, [pc, #8]	; 11d94 <EnterCritical+0xa0>
   11d88:	e59f0014 	ldr	r0, [pc, #20]	; 11da4 <EnterCritical+0xb0>
   11d8c:	eb0001c0 	bl	12494 <assertion_failed>
   11d90:	eaffffe5 	b	11d2c <EnterCritical+0x38>
   11d94:	00014614 	.word	0x00014614
   11d98:	00014624 	.word	0x00014624
   11d9c:	00015ac4 	.word	0x00015ac4
   11da0:	0001468c 	.word	0x0001468c
   11da4:	0001465c 	.word	0x0001465c

00011da8 <LeaveCritical>:
   11da8:	e92d4010 	push	{r4, lr}
   11dac:	e3a03000 	mov	r3, #0
   11db0:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   11db4:	f10c0040 	cpsid	f
   11db8:	e59f4034 	ldr	r4, [pc, #52]	; 11df4 <LeaveCritical+0x4c>
   11dbc:	e5943000 	ldr	r3, [r4]
   11dc0:	e3530000 	cmp	r3, #0
   11dc4:	1a000003 	bne	11dd8 <LeaveCritical+0x30>
   11dc8:	e3a0207f 	mov	r2, #127	; 0x7f
   11dcc:	e59f1024 	ldr	r1, [pc, #36]	; 11df8 <LeaveCritical+0x50>
   11dd0:	e59f0024 	ldr	r0, [pc, #36]	; 11dfc <LeaveCritical+0x54>
   11dd4:	eb0001ae 	bl	12494 <assertion_failed>
   11dd8:	e5943000 	ldr	r3, [r4]
   11ddc:	e2433001 	sub	r3, r3, #1
   11de0:	e5843000 	str	r3, [r4]
   11de4:	e0844103 	add	r4, r4, r3, lsl #2
   11de8:	e5943004 	ldr	r3, [r4, #4]
   11dec:	e121f003 	msr	CPSR_c, r3
   11df0:	e8bd8010 	pop	{r4, pc}
   11df4:	00015ac4 	.word	0x00015ac4
   11df8:	00014614 	.word	0x00014614
   11dfc:	000146b4 	.word	0x000146b4

00011e00 <CleanAndInvalidateDataCacheRange>:
   11e00:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
   11e04:	e2813020 	add	r3, r1, #32
   11e08:	e353001f 	cmp	r3, #31
   11e0c:	82800020 	addhi	r0, r0, #32
   11e10:	83c1101f 	bichi	r1, r1, #31
   11e14:	80801001 	addhi	r1, r0, r1
   11e18:	8a000001 	bhi	11e24 <CleanAndInvalidateDataCacheRange+0x24>
   11e1c:	ea000003 	b	11e30 <CleanAndInvalidateDataCacheRange+0x30>
   11e20:	e2800020 	add	r0, r0, #32
   11e24:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
   11e28:	e1510000 	cmp	r1, r0
   11e2c:	1afffffb 	bne	11e20 <CleanAndInvalidateDataCacheRange+0x20>
   11e30:	e3a03000 	mov	r3, #0
   11e34:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   11e38:	e12fff1e 	bx	lr

00011e3c <SyncDataAndInstructionCache>:
   11e3c:	e3a03000 	mov	r3, #0
   11e40:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
   11e44:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   11e48:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   11e4c:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   11e50:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   11e54:	ee073f95 	mcr	15, 0, r3, cr7, cr5, {4}
   11e58:	e12fff1e 	bx	lr

00011e5c <operator new(unsigned int)>:
   11e5c:	ea00001d 	b	11ed8 <malloc>

00011e60 <operator new[](unsigned int)>:
   11e60:	ea00001c 	b	11ed8 <malloc>

00011e64 <operator delete(void*)>:
   11e64:	ea000099 	b	120d0 <free>

00011e68 <operator delete[](void*)>:
   11e68:	ea000098 	b	120d0 <free>

00011e6c <operator delete(void*, unsigned int)>:
   11e6c:	ea000097 	b	120d0 <free>

00011e70 <operator delete[](void*, unsigned int)>:
   11e70:	ea000096 	b	120d0 <free>

00011e74 <mem_init>:
   11e74:	e3500605 	cmp	r0, #5242880	; 0x500000
   11e78:	21a0c000 	movcs	ip, r0
   11e7c:	33a0c605 	movcc	ip, #5242880	; 0x500000
   11e80:	e0801001 	add	r1, r0, r1
   11e84:	e24139ff 	sub	r3, r1, #4177920	; 0x3fc000
   11e88:	e2433a03 	sub	r3, r3, #12288	; 0x3000
   11e8c:	e59f2018 	ldr	r2, [pc, #24]	; 11eac <mem_init+0x38>
   11e90:	e3c33eff 	bic	r3, r3, #4080	; 0xff0
   11e94:	e2410501 	sub	r0, r1, #4194304	; 0x400000
   11e98:	e3c3300f 	bic	r3, r3, #15
   11e9c:	e582c000 	str	ip, [r2]
   11ea0:	e582100c 	str	r1, [r2, #12]
   11ea4:	e9820009 	stmib	r2, {r0, r3}
   11ea8:	e12fff1e 	bx	lr
   11eac:	00015b18 	.word	0x00015b18

00011eb0 <mem_get_size>:
   11eb0:	e59f301c 	ldr	r3, [pc, #28]	; 11ed4 <mem_get_size+0x24>
   11eb4:	e5930004 	ldr	r0, [r3, #4]
   11eb8:	e5931000 	ldr	r1, [r3]
   11ebc:	e593200c 	ldr	r2, [r3, #12]
   11ec0:	e5933008 	ldr	r3, [r3, #8]
   11ec4:	e0400001 	sub	r0, r0, r1
   11ec8:	e0423003 	sub	r3, r2, r3
   11ecc:	e0800003 	add	r0, r0, r3
   11ed0:	e12fff1e 	bx	lr
   11ed4:	00015b18 	.word	0x00015b18

00011ed8 <malloc>:
   11ed8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   11edc:	e59f71c8 	ldr	r7, [pc, #456]	; 120ac <malloc+0x1d4>
   11ee0:	e1a05000 	mov	r5, r0
   11ee4:	e5973000 	ldr	r3, [r7]
   11ee8:	e3530000 	cmp	r3, #0
   11eec:	0a000069 	beq	12098 <malloc+0x1c0>
   11ef0:	e5970010 	ldr	r0, [r7, #16]
   11ef4:	e3500000 	cmp	r0, #0
   11ef8:	1a000057 	bne	1205c <malloc+0x184>
   11efc:	e59f21ac 	ldr	r2, [pc, #428]	; 120b0 <malloc+0x1d8>
   11f00:	e5923000 	ldr	r3, [r2]
   11f04:	e3530000 	cmp	r3, #0
   11f08:	0a000008 	beq	11f30 <malloc+0x58>
   11f0c:	e1550003 	cmp	r5, r3
   11f10:	e1a04002 	mov	r4, r2
   11f14:	8a000002 	bhi	11f24 <malloc+0x4c>
   11f18:	ea000024 	b	11fb0 <malloc+0xd8>
   11f1c:	e1530005 	cmp	r3, r5
   11f20:	2a000022 	bcs	11fb0 <malloc+0xd8>
   11f24:	e5b43008 	ldr	r3, [r4, #8]!
   11f28:	e3530000 	cmp	r3, #0
   11f2c:	1afffffa 	bne	11f1c <malloc+0x44>
   11f30:	e5976000 	ldr	r6, [r7]
   11f34:	e285301f 	add	r3, r5, #31
   11f38:	e3c3300f 	bic	r3, r3, #15
   11f3c:	e0863003 	add	r3, r6, r3
   11f40:	e1560003 	cmp	r6, r3
   11f44:	2a000046 	bcs	12064 <malloc+0x18c>
   11f48:	e5971004 	ldr	r1, [r7, #4]
   11f4c:	e5920040 	ldr	r0, [r2, #64]	; 0x40
   11f50:	e0411000 	sub	r1, r1, r0
   11f54:	e1530001 	cmp	r3, r1
   11f58:	8a000041 	bhi	12064 <malloc+0x18c>
   11f5c:	e3a0e043 	mov	lr, #67	; 0x43
   11f60:	e3a0c04d 	mov	ip, #77	; 0x4d
   11f64:	e3a0004c 	mov	r0, #76	; 0x4c
   11f68:	e3a01042 	mov	r1, #66	; 0x42
   11f6c:	e5873000 	str	r3, [r7]
   11f70:	e1a03825 	lsr	r3, r5, #16
   11f74:	e5c63006 	strb	r3, [r6, #6]
   11f78:	e5973010 	ldr	r3, [r7, #16]
   11f7c:	e1a02425 	lsr	r2, r5, #8
   11f80:	e5c65004 	strb	r5, [r6, #4]
   11f84:	e3530000 	cmp	r3, #0
   11f88:	e1a05c25 	lsr	r5, r5, #24
   11f8c:	e5c6e000 	strb	lr, [r6]
   11f90:	e5c6c001 	strb	ip, [r6, #1]
   11f94:	e5c60002 	strb	r0, [r6, #2]
   11f98:	e5c61003 	strb	r1, [r6, #3]
   11f9c:	e5c62005 	strb	r2, [r6, #5]
   11fa0:	e5c65007 	strb	r5, [r6, #7]
   11fa4:	0a00001e 	beq	12024 <malloc+0x14c>
   11fa8:	ebffff7e 	bl	11da8 <LeaveCritical>
   11fac:	ea00001c 	b	12024 <malloc+0x14c>
   11fb0:	e5946004 	ldr	r6, [r4, #4]
   11fb4:	e3560000 	cmp	r6, #0
   11fb8:	01a05003 	moveq	r5, r3
   11fbc:	0affffdb 	beq	11f30 <malloc+0x58>
   11fc0:	e5d61001 	ldrb	r1, [r6, #1]
   11fc4:	e5d63000 	ldrb	r3, [r6]
   11fc8:	e5d62002 	ldrb	r2, [r6, #2]
   11fcc:	e1833401 	orr	r3, r3, r1, lsl #8
   11fd0:	e5d61003 	ldrb	r1, [r6, #3]
   11fd4:	e1833802 	orr	r3, r3, r2, lsl #16
   11fd8:	e59f20d4 	ldr	r2, [pc, #212]	; 120b4 <malloc+0x1dc>
   11fdc:	e1833c01 	orr	r3, r3, r1, lsl #24
   11fe0:	e1530002 	cmp	r3, r2
   11fe4:	0a000003 	beq	11ff8 <malloc+0x120>
   11fe8:	e3a0208a 	mov	r2, #138	; 0x8a
   11fec:	e59f10c4 	ldr	r1, [pc, #196]	; 120b8 <malloc+0x1e0>
   11ff0:	e59f00c4 	ldr	r0, [pc, #196]	; 120bc <malloc+0x1e4>
   11ff4:	eb000126 	bl	12494 <assertion_failed>
   11ff8:	e5d62009 	ldrb	r2, [r6, #9]
   11ffc:	e5d63008 	ldrb	r3, [r6, #8]
   12000:	e5d6100a 	ldrb	r1, [r6, #10]
   12004:	e1833402 	orr	r3, r3, r2, lsl #8
   12008:	e5d6200b 	ldrb	r2, [r6, #11]
   1200c:	e1833801 	orr	r3, r3, r1, lsl #16
   12010:	e1833c02 	orr	r3, r3, r2, lsl #24
   12014:	e5843004 	str	r3, [r4, #4]
   12018:	e5973010 	ldr	r3, [r7, #16]
   1201c:	e3530000 	cmp	r3, #0
   12020:	1affffe0 	bne	11fa8 <malloc+0xd0>
   12024:	e3a03000 	mov	r3, #0
   12028:	e2864010 	add	r4, r6, #16
   1202c:	e314000f 	tst	r4, #15
   12030:	e5c63008 	strb	r3, [r6, #8]
   12034:	e5c63009 	strb	r3, [r6, #9]
   12038:	e5c6300a 	strb	r3, [r6, #10]
   1203c:	e5c6300b 	strb	r3, [r6, #11]
   12040:	0a000003 	beq	12054 <malloc+0x17c>
   12044:	e3a020b3 	mov	r2, #179	; 0xb3
   12048:	e59f1068 	ldr	r1, [pc, #104]	; 120b8 <malloc+0x1e0>
   1204c:	e59f006c 	ldr	r0, [pc, #108]	; 120c0 <malloc+0x1e8>
   12050:	eb00010f 	bl	12494 <assertion_failed>
   12054:	e1a00004 	mov	r0, r4
   12058:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1205c:	ebffff24 	bl	11cf4 <EnterCritical>
   12060:	eaffffa5 	b	11efc <malloc+0x24>
   12064:	e3a01000 	mov	r1, #0
   12068:	e5973010 	ldr	r3, [r7, #16]
   1206c:	e5821040 	str	r1, [r2, #64]	; 0x40
   12070:	e1530001 	cmp	r3, r1
   12074:	0a000000 	beq	1207c <malloc+0x1a4>
   12078:	ebffff4a 	bl	11da8 <LeaveCritical>
   1207c:	ebffe947 	bl	c5a0 <CLogger::Get()>
   12080:	e59f303c 	ldr	r3, [pc, #60]	; 120c4 <malloc+0x1ec>
   12084:	e3a02000 	mov	r2, #0
   12088:	e59f1038 	ldr	r1, [pc, #56]	; 120c8 <malloc+0x1f0>
   1208c:	ebffeaec 	bl	cc44 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12090:	e3a04000 	mov	r4, #0
   12094:	eaffffee 	b	12054 <malloc+0x17c>
   12098:	e3a02070 	mov	r2, #112	; 0x70
   1209c:	e59f1014 	ldr	r1, [pc, #20]	; 120b8 <malloc+0x1e0>
   120a0:	e59f0024 	ldr	r0, [pc, #36]	; 120cc <malloc+0x1f4>
   120a4:	eb0000fa 	bl	12494 <assertion_failed>
   120a8:	eaffff90 	b	11ef0 <malloc+0x18>
   120ac:	00015b18 	.word	0x00015b18
   120b0:	000159c8 	.word	0x000159c8
   120b4:	424c4d43 	.word	0x424c4d43
   120b8:	000146cc 	.word	0x000146cc
   120bc:	000146ec 	.word	0x000146ec
   120c0:	00014728 	.word	0x00014728
   120c4:	00014710 	.word	0x00014710
   120c8:	00014720 	.word	0x00014720
   120cc:	000146d8 	.word	0x000146d8

000120d0 <free>:
   120d0:	e3500000 	cmp	r0, #0
   120d4:	012fff1e 	bxeq	lr
   120d8:	e92d4070 	push	{r4, r5, r6, lr}
   120dc:	e2405010 	sub	r5, r0, #16
   120e0:	e5d51001 	ldrb	r1, [r5, #1]
   120e4:	e5503010 	ldrb	r3, [r0, #-16]
   120e8:	e5d52002 	ldrb	r2, [r5, #2]
   120ec:	e1833401 	orr	r3, r3, r1, lsl #8
   120f0:	e5d51003 	ldrb	r1, [r5, #3]
   120f4:	e1833802 	orr	r3, r3, r2, lsl #16
   120f8:	e59f20dc 	ldr	r2, [pc, #220]	; 121dc <free+0x10c>
   120fc:	e1833c01 	orr	r3, r3, r1, lsl #24
   12100:	e1530002 	cmp	r3, r2
   12104:	0a000003 	beq	12118 <free+0x48>
   12108:	e3a020c0 	mov	r2, #192	; 0xc0
   1210c:	e59f10cc 	ldr	r1, [pc, #204]	; 121e0 <free+0x110>
   12110:	e59f00cc 	ldr	r0, [pc, #204]	; 121e4 <free+0x114>
   12114:	eb0000de 	bl	12494 <assertion_failed>
   12118:	e59f40c8 	ldr	r4, [pc, #200]	; 121e8 <free+0x118>
   1211c:	e5943000 	ldr	r3, [r4]
   12120:	e3530000 	cmp	r3, #0
   12124:	08bd8070 	popeq	{r4, r5, r6, pc}
   12128:	e5d51005 	ldrb	r1, [r5, #5]
   1212c:	e5d52004 	ldrb	r2, [r5, #4]
   12130:	e5d50006 	ldrb	r0, [r5, #6]
   12134:	e1822401 	orr	r2, r2, r1, lsl #8
   12138:	e5d51007 	ldrb	r1, [r5, #7]
   1213c:	e1822800 	orr	r2, r2, r0, lsl #16
   12140:	e1822c01 	orr	r2, r2, r1, lsl #24
   12144:	e1520003 	cmp	r2, r3
   12148:	1a000002 	bne	12158 <free+0x88>
   1214c:	ea000005 	b	12168 <free+0x98>
   12150:	e1530002 	cmp	r3, r2
   12154:	0a000003 	beq	12168 <free+0x98>
   12158:	e5b43008 	ldr	r3, [r4, #8]!
   1215c:	e3530000 	cmp	r3, #0
   12160:	1afffffa 	bne	12150 <free+0x80>
   12164:	e8bd8070 	pop	{r4, r5, r6, pc}
   12168:	e59f607c 	ldr	r6, [pc, #124]	; 121ec <free+0x11c>
   1216c:	e5960010 	ldr	r0, [r6, #16]
   12170:	e3500000 	cmp	r0, #0
   12174:	1a000009 	bne	121a0 <free+0xd0>
   12178:	e5d40004 	ldrb	r0, [r4, #4]
   1217c:	e5d41005 	ldrb	r1, [r4, #5]
   12180:	e5d42006 	ldrb	r2, [r4, #6]
   12184:	e5d43007 	ldrb	r3, [r4, #7]
   12188:	e5c50008 	strb	r0, [r5, #8]
   1218c:	e5c51009 	strb	r1, [r5, #9]
   12190:	e5c5200a 	strb	r2, [r5, #10]
   12194:	e5c5300b 	strb	r3, [r5, #11]
   12198:	e5845004 	str	r5, [r4, #4]
   1219c:	e8bd8070 	pop	{r4, r5, r6, pc}
   121a0:	ebfffed3 	bl	11cf4 <EnterCritical>
   121a4:	e596c010 	ldr	ip, [r6, #16]
   121a8:	e5d40004 	ldrb	r0, [r4, #4]
   121ac:	e5d41005 	ldrb	r1, [r4, #5]
   121b0:	e5d42006 	ldrb	r2, [r4, #6]
   121b4:	e5d43007 	ldrb	r3, [r4, #7]
   121b8:	e35c0000 	cmp	ip, #0
   121bc:	e5c50008 	strb	r0, [r5, #8]
   121c0:	e5c51009 	strb	r1, [r5, #9]
   121c4:	e5c5200a 	strb	r2, [r5, #10]
   121c8:	e5c5300b 	strb	r3, [r5, #11]
   121cc:	e5845004 	str	r5, [r4, #4]
   121d0:	08bd8070 	popeq	{r4, r5, r6, pc}
   121d4:	e8bd4070 	pop	{r4, r5, r6, lr}
   121d8:	eafffef2 	b	11da8 <LeaveCritical>
   121dc:	424c4d43 	.word	0x424c4d43
   121e0:	000146cc 	.word	0x000146cc
   121e4:	000146ec 	.word	0x000146ec
   121e8:	000159c8 	.word	0x000159c8
   121ec:	00015b18 	.word	0x00015b18

000121f0 <calloc>:
   121f0:	e92d4070 	push	{r4, r5, r6, lr}
   121f4:	e0040190 	mul	r4, r0, r1
   121f8:	e3540000 	cmp	r4, #0
   121fc:	03a04001 	moveq	r4, #1
   12200:	e1540000 	cmp	r4, r0
   12204:	3a000008 	bcc	1222c <calloc+0x3c>
   12208:	e1a00004 	mov	r0, r4
   1220c:	ebffff31 	bl	11ed8 <malloc>
   12210:	e2505000 	subs	r5, r0, #0
   12214:	0a000002 	beq	12224 <calloc+0x34>
   12218:	e1a02004 	mov	r2, r4
   1221c:	e3a01000 	mov	r1, #0
   12220:	ebfffb4f 	bl	10f64 <memset>
   12224:	e1a00005 	mov	r0, r5
   12228:	e8bd8070 	pop	{r4, r5, r6, pc}
   1222c:	e3a020e2 	mov	r2, #226	; 0xe2
   12230:	e59f1008 	ldr	r1, [pc, #8]	; 12240 <calloc+0x50>
   12234:	e59f0008 	ldr	r0, [pc, #8]	; 12244 <calloc+0x54>
   12238:	eb000095 	bl	12494 <assertion_failed>
   1223c:	eafffff1 	b	12208 <calloc+0x18>
   12240:	000146cc 	.word	0x000146cc
   12244:	00014754 	.word	0x00014754

00012248 <realloc>:
   12248:	e92d4070 	push	{r4, r5, r6, lr}
   1224c:	e2505000 	subs	r5, r0, #0
   12250:	e1a06001 	mov	r6, r1
   12254:	0a00002d 	beq	12310 <realloc+0xc8>
   12258:	e3510000 	cmp	r1, #0
   1225c:	0a000027 	beq	12300 <realloc+0xb8>
   12260:	e2454010 	sub	r4, r5, #16
   12264:	e5d41001 	ldrb	r1, [r4, #1]
   12268:	e5553010 	ldrb	r3, [r5, #-16]
   1226c:	e5d42002 	ldrb	r2, [r4, #2]
   12270:	e1833401 	orr	r3, r3, r1, lsl #8
   12274:	e5d41003 	ldrb	r1, [r4, #3]
   12278:	e1833802 	orr	r3, r3, r2, lsl #16
   1227c:	e59f20a0 	ldr	r2, [pc, #160]	; 12324 <realloc+0xdc>
   12280:	e1833c01 	orr	r3, r3, r1, lsl #24
   12284:	e1530002 	cmp	r3, r2
   12288:	0a000003 	beq	1229c <realloc+0x54>
   1228c:	e3a020fc 	mov	r2, #252	; 0xfc
   12290:	e59f1090 	ldr	r1, [pc, #144]	; 12328 <realloc+0xe0>
   12294:	e59f0090 	ldr	r0, [pc, #144]	; 1232c <realloc+0xe4>
   12298:	eb00007d 	bl	12494 <assertion_failed>
   1229c:	e5d42005 	ldrb	r2, [r4, #5]
   122a0:	e5d43004 	ldrb	r3, [r4, #4]
   122a4:	e5d41006 	ldrb	r1, [r4, #6]
   122a8:	e1833402 	orr	r3, r3, r2, lsl #8
   122ac:	e5d42007 	ldrb	r2, [r4, #7]
   122b0:	e1833801 	orr	r3, r3, r1, lsl #16
   122b4:	e1833c02 	orr	r3, r3, r2, lsl #24
   122b8:	e1560003 	cmp	r6, r3
   122bc:	8a000001 	bhi	122c8 <realloc+0x80>
   122c0:	e1a00005 	mov	r0, r5
   122c4:	e8bd8070 	pop	{r4, r5, r6, pc}
   122c8:	e1a00006 	mov	r0, r6
   122cc:	ebffff01 	bl	11ed8 <malloc>
   122d0:	e2506000 	subs	r6, r0, #0
   122d4:	0a000010 	beq	1231c <realloc+0xd4>
   122d8:	e5d42005 	ldrb	r2, [r4, #5]
   122dc:	e5d43004 	ldrb	r3, [r4, #4]
   122e0:	e5d41006 	ldrb	r1, [r4, #6]
   122e4:	e1833402 	orr	r3, r3, r2, lsl #8
   122e8:	e5d42007 	ldrb	r2, [r4, #7]
   122ec:	e1833801 	orr	r3, r3, r1, lsl #16
   122f0:	e1832c02 	orr	r2, r3, r2, lsl #24
   122f4:	e1a01005 	mov	r1, r5
   122f8:	ebfffc8b 	bl	1152c <memcpy>
   122fc:	e1a00005 	mov	r0, r5
   12300:	e1a05006 	mov	r5, r6
   12304:	ebffff71 	bl	120d0 <free>
   12308:	e1a00005 	mov	r0, r5
   1230c:	e8bd8070 	pop	{r4, r5, r6, pc}
   12310:	e1a00001 	mov	r0, r1
   12314:	e8bd4070 	pop	{r4, r5, r6, lr}
   12318:	eafffeee 	b	11ed8 <malloc>
   1231c:	e1a05006 	mov	r5, r6
   12320:	eaffffe6 	b	122c0 <realloc+0x78>
   12324:	424c4d43 	.word	0x424c4d43
   12328:	000146cc 	.word	0x000146cc
   1232c:	000146ec 	.word	0x000146ec

00012330 <palloc>:
   12330:	e92d4070 	push	{r4, r5, r6, lr}
   12334:	e59f50c4 	ldr	r5, [pc, #196]	; 12400 <palloc+0xd0>
   12338:	e5953008 	ldr	r3, [r5, #8]
   1233c:	e3530000 	cmp	r3, #0
   12340:	0a000029 	beq	123ec <palloc+0xbc>
   12344:	e5950014 	ldr	r0, [r5, #20]
   12348:	e3500000 	cmp	r0, #0
   1234c:	1a000016 	bne	123ac <palloc+0x7c>
   12350:	e5954018 	ldr	r4, [r5, #24]
   12354:	e3540000 	cmp	r4, #0
   12358:	0a000017 	beq	123bc <palloc+0x8c>
   1235c:	e59f30a0 	ldr	r3, [pc, #160]	; 12404 <palloc+0xd4>
   12360:	e5942000 	ldr	r2, [r4]
   12364:	e1520003 	cmp	r2, r3
   12368:	0a000003 	beq	1237c <palloc+0x4c>
   1236c:	e59f2094 	ldr	r2, [pc, #148]	; 12408 <palloc+0xd8>
   12370:	e59f1094 	ldr	r1, [pc, #148]	; 1240c <palloc+0xdc>
   12374:	e59f0094 	ldr	r0, [pc, #148]	; 12410 <palloc+0xe0>
   12378:	eb000045 	bl	12494 <assertion_failed>
   1237c:	e3a02000 	mov	r2, #0
   12380:	e5943004 	ldr	r3, [r4, #4]
   12384:	e5842000 	str	r2, [r4]
   12388:	e5853018 	str	r3, [r5, #24]
   1238c:	e5953014 	ldr	r3, [r5, #20]
   12390:	e3530000 	cmp	r3, #0
   12394:	1a000001 	bne	123a0 <palloc+0x70>
   12398:	e1a00004 	mov	r0, r4
   1239c:	e8bd8070 	pop	{r4, r5, r6, pc}
   123a0:	ebfffe80 	bl	11da8 <LeaveCritical>
   123a4:	e1a00004 	mov	r0, r4
   123a8:	e8bd8070 	pop	{r4, r5, r6, pc}
   123ac:	ebfffe50 	bl	11cf4 <EnterCritical>
   123b0:	e5954018 	ldr	r4, [r5, #24]
   123b4:	e3540000 	cmp	r4, #0
   123b8:	1affffe7 	bne	1235c <palloc+0x2c>
   123bc:	e5954008 	ldr	r4, [r5, #8]
   123c0:	e595200c 	ldr	r2, [r5, #12]
   123c4:	e2843a01 	add	r3, r4, #4096	; 0x1000
   123c8:	e1530002 	cmp	r3, r2
   123cc:	e5853008 	str	r3, [r5, #8]
   123d0:	9affffed 	bls	1238c <palloc+0x5c>
   123d4:	e5954014 	ldr	r4, [r5, #20]
   123d8:	e3540000 	cmp	r4, #0
   123dc:	0affffed 	beq	12398 <palloc+0x68>
   123e0:	ebfffe70 	bl	11da8 <LeaveCritical>
   123e4:	e3a00000 	mov	r0, #0
   123e8:	e8bd8070 	pop	{r4, r5, r6, pc}
   123ec:	e59f2020 	ldr	r2, [pc, #32]	; 12414 <palloc+0xe4>
   123f0:	e59f1014 	ldr	r1, [pc, #20]	; 1240c <palloc+0xdc>
   123f4:	e59f001c 	ldr	r0, [pc, #28]	; 12418 <palloc+0xe8>
   123f8:	eb000025 	bl	12494 <assertion_failed>
   123fc:	eaffffd0 	b	12344 <palloc+0x14>
   12400:	00015b18 	.word	0x00015b18
   12404:	50474d43 	.word	0x50474d43
   12408:	0000011f 	.word	0x0000011f
   1240c:	000146cc 	.word	0x000146cc
   12410:	0001477c 	.word	0x0001477c
   12414:	00000111 	.word	0x00000111
   12418:	00014768 	.word	0x00014768

0001241c <pfree>:
   1241c:	e92d4070 	push	{r4, r5, r6, lr}
   12420:	e2504000 	subs	r4, r0, #0
   12424:	08bd8070 	popeq	{r4, r5, r6, pc}
   12428:	e59f5044 	ldr	r5, [pc, #68]	; 12474 <pfree+0x58>
   1242c:	e5950014 	ldr	r0, [r5, #20]
   12430:	e3500000 	cmp	r0, #0
   12434:	1a000004 	bne	1244c <pfree+0x30>
   12438:	e5952018 	ldr	r2, [r5, #24]
   1243c:	e59f1034 	ldr	r1, [pc, #52]	; 12478 <pfree+0x5c>
   12440:	e5854018 	str	r4, [r5, #24]
   12444:	e8840006 	stm	r4, {r1, r2}
   12448:	e8bd8070 	pop	{r4, r5, r6, pc}
   1244c:	ebfffe28 	bl	11cf4 <EnterCritical>
   12450:	e5951014 	ldr	r1, [r5, #20]
   12454:	e5953018 	ldr	r3, [r5, #24]
   12458:	e59f2018 	ldr	r2, [pc, #24]	; 12478 <pfree+0x5c>
   1245c:	e3510000 	cmp	r1, #0
   12460:	e884000c 	stm	r4, {r2, r3}
   12464:	e5854018 	str	r4, [r5, #24]
   12468:	08bd8070 	popeq	{r4, r5, r6, pc}
   1246c:	e8bd4070 	pop	{r4, r5, r6, lr}
   12470:	eafffe4c 	b	11da8 <LeaveCritical>
   12474:	00015b18 	.word	0x00015b18
   12478:	50474d43 	.word	0x50474d43

0001247c <_GLOBAL__sub_I_mem_init>:
   1247c:	e3a02001 	mov	r2, #1
   12480:	e59f3008 	ldr	r3, [pc, #8]	; 12490 <_GLOBAL__sub_I_mem_init+0x14>
   12484:	e5832010 	str	r2, [r3, #16]
   12488:	e5832014 	str	r2, [r3, #20]
   1248c:	e12fff1e 	bx	lr
   12490:	00015b18 	.word	0x00015b18

00012494 <assertion_failed>:
   12494:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   12498:	e1a05000 	mov	r5, r0
   1249c:	e24dd01c 	sub	sp, sp, #28
   124a0:	e1a06001 	mov	r6, r1
   124a4:	e1a07002 	mov	r7, r2
   124a8:	e1a0400d 	mov	r4, sp
   124ac:	ebffe644 	bl	bdc4 <CInterruptSystem::DisableFIQ()>
   124b0:	f1080040 	cpsie	f
   124b4:	e28d0008 	add	r0, sp, #8
   124b8:	ebfff303 	bl	f0cc <CString::CString()>
   124bc:	e1a03007 	mov	r3, r7
   124c0:	e1a02006 	mov	r2, r6
   124c4:	e28d0008 	add	r0, sp, #8
   124c8:	e59f104c 	ldr	r1, [pc, #76]	; 1251c <assertion_failed+0x88>
   124cc:	ebfff6ec 	bl	10084 <CString::Format(char const*, ...)>
   124d0:	e28d0008 	add	r0, sp, #8
   124d4:	ebfff312 	bl	f124 <CString::operator char const*() const>
   124d8:	e1a01000 	mov	r1, r0
   124dc:	e1a00004 	mov	r0, r4
   124e0:	eb000201 	bl	12cec <debug_stacktrace(unsigned int const*, char const*)>
   124e4:	ebffe82d 	bl	c5a0 <CLogger::Get()>
   124e8:	e1a04000 	mov	r4, r0
   124ec:	e28d0008 	add	r0, sp, #8
   124f0:	ebfff30b 	bl	f124 <CString::operator char const*() const>
   124f4:	e59f3024 	ldr	r3, [pc, #36]	; 12520 <assertion_failed+0x8c>
   124f8:	e1a01000 	mov	r1, r0
   124fc:	e3a02000 	mov	r2, #0
   12500:	e1a00004 	mov	r0, r4
   12504:	e58d5000 	str	r5, [sp]
   12508:	ebffe9cd 	bl	cc44 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1250c:	e28d0008 	add	r0, sp, #8
   12510:	ebfff2ba 	bl	f000 <CString::~CString()>
   12514:	e28dd01c 	add	sp, sp, #28
   12518:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1251c:	000147a0 	.word	0x000147a0
   12520:	000147a8 	.word	0x000147a8

00012524 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>:
   12524:	e3a02000 	mov	r2, #0
   12528:	e3a01001 	mov	r1, #1
   1252c:	e92d4030 	push	{r4, r5, lr}
   12530:	e1a04000 	mov	r4, r0
   12534:	e5903020 	ldr	r3, [r0, #32]
   12538:	e24dd014 	sub	sp, sp, #20
   1253c:	e5c31011 	strb	r1, [r3, #17]
   12540:	e5c3200c 	strb	r2, [r3, #12]
   12544:	e5c3200d 	strb	r2, [r3, #13]
   12548:	e5c3200e 	strb	r2, [r3, #14]
   1254c:	e5c3200f 	strb	r2, [r3, #15]
   12550:	e5c32010 	strb	r2, [r3, #16]
   12554:	e5c32012 	strb	r2, [r3, #18]
   12558:	e5c32013 	strb	r2, [r3, #19]
   1255c:	e28d000c 	add	r0, sp, #12
   12560:	ebffdf88 	bl	a388 <CBcmPropertyTags::CBcmPropertyTags()>
   12564:	e59f306c 	ldr	r3, [pc, #108]	; 125d8 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0xb4>
   12568:	e5942020 	ldr	r2, [r4, #32]
   1256c:	e28d000c 	add	r0, sp, #12
   12570:	e58d3000 	str	r3, [sp]
   12574:	e59f1060 	ldr	r1, [pc, #96]	; 125dc <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0xb8>
   12578:	e283300c 	add	r3, r3, #12
   1257c:	ebffdfd8 	bl	a4e4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   12580:	e2505000 	subs	r5, r0, #0
   12584:	0a000008 	beq	125ac <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x88>
   12588:	e5942020 	ldr	r2, [r4, #32]
   1258c:	e5d2300c 	ldrb	r3, [r2, #12]
   12590:	e5d2000d 	ldrb	r0, [r2, #13]
   12594:	e5d2100e 	ldrb	r1, [r2, #14]
   12598:	e1833400 	orr	r3, r3, r0, lsl #8
   1259c:	e5d2200f 	ldrb	r2, [r2, #15]
   125a0:	e1833801 	orr	r3, r3, r1, lsl #16
   125a4:	e1933c02 	orrs	r3, r3, r2, lsl #24
   125a8:	0a000005 	beq	125c4 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0xa0>
   125ac:	e3a05000 	mov	r5, #0
   125b0:	e28d000c 	add	r0, sp, #12
   125b4:	ebffdf79 	bl	a3a0 <CBcmPropertyTags::~CBcmPropertyTags()>
   125b8:	e1a00005 	mov	r0, r5
   125bc:	e28dd014 	add	sp, sp, #20
   125c0:	e8bd8030 	pop	{r4, r5, pc}
   125c4:	e28d000c 	add	r0, sp, #12
   125c8:	ebffdf74 	bl	a3a0 <CBcmPropertyTags::~CBcmPropertyTags()>
   125cc:	e1a00005 	mov	r0, r5
   125d0:	e28dd014 	add	sp, sp, #20
   125d4:	e8bd8030 	pop	{r4, r5, pc}
   125d8:	00000408 	.word	0x00000408
   125dc:	0004800b 	.word	0x0004800b

000125e0 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
   125e0:	e92d4030 	push	{r4, r5, lr}
   125e4:	e3510000 	cmp	r1, #0
   125e8:	13520000 	cmpne	r2, #0
   125ec:	e1a04000 	mov	r4, r0
   125f0:	e3a05000 	mov	r5, #0
   125f4:	e24dd024 	sub	sp, sp, #36	; 0x24
   125f8:	e59dc034 	ldr	ip, [sp, #52]	; 0x34
   125fc:	e59d0030 	ldr	r0, [sp, #48]	; 0x30
   12600:	e8840006 	stm	r4, {r1, r2}
   12604:	e5843010 	str	r3, [r4, #16]
   12608:	e584c00c 	str	ip, [r4, #12]
   1260c:	e5840008 	str	r0, [r4, #8]
   12610:	e5845014 	str	r5, [r4, #20]
   12614:	e5845018 	str	r5, [r4, #24]
   12618:	e584501c 	str	r5, [r4, #28]
   1261c:	e5845020 	str	r5, [r4, #32]
   12620:	1a000010 	bne	12668 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x88>
   12624:	e28d0008 	add	r0, sp, #8
   12628:	ebffdf56 	bl	a388 <CBcmPropertyTags::CBcmPropertyTags()>
   1262c:	e58d5000 	str	r5, [sp]
   12630:	e28d0008 	add	r0, sp, #8
   12634:	e3a03014 	mov	r3, #20
   12638:	e28d200c 	add	r2, sp, #12
   1263c:	e59f10c8 	ldr	r1, [pc, #200]	; 1270c <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x12c>
   12640:	ebffdfa7 	bl	a4e4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   12644:	e1500005 	cmp	r0, r5
   12648:	1a000026 	bne	126e8 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x108>
   1264c:	e3a02d0a 	mov	r2, #640	; 0x280
   12650:	e3a03e1e 	mov	r3, #480	; 0x1e0
   12654:	e884000c 	stm	r4, {r2, r3}
   12658:	e28d0008 	add	r0, sp, #8
   1265c:	ebffdf4f 	bl	a3a0 <CBcmPropertyTags::~CBcmPropertyTags()>
   12660:	e5940008 	ldr	r0, [r4, #8]
   12664:	e5943010 	ldr	r3, [r4, #16]
   12668:	e3500000 	cmp	r0, #0
   1266c:	0a000019 	beq	126d8 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xf8>
   12670:	e594200c 	ldr	r2, [r4, #12]
   12674:	e3520000 	cmp	r2, #0
   12678:	0a000016 	beq	126d8 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xf8>
   1267c:	e3530008 	cmp	r3, #8
   12680:	8a000006 	bhi	126a0 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xc0>
   12684:	e59f0084 	ldr	r0, [pc, #132]	; 12710 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x130>
   12688:	ebfffdf4 	bl	11e60 <operator new[](unsigned int)>
   1268c:	e3a02b01 	mov	r2, #1024	; 0x400
   12690:	e5840020 	str	r0, [r4, #32]
   12694:	e3a01000 	mov	r1, #0
   12698:	e2800014 	add	r0, r0, #20
   1269c:	ebfffa30 	bl	10f64 <memset>
   126a0:	e3a02070 	mov	r2, #112	; 0x70
   126a4:	e59f1068 	ldr	r1, [pc, #104]	; 12714 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x134>
   126a8:	e2840024 	add	r0, r4, #36	; 0x24
   126ac:	ebfffb9e 	bl	1152c <memcpy>
   126b0:	e994000f 	ldmib	r4, {r0, r1, r2, r3}
   126b4:	e5840034 	str	r0, [r4, #52]	; 0x34
   126b8:	e1a00004 	mov	r0, r4
   126bc:	e594c000 	ldr	ip, [r4]
   126c0:	e5841044 	str	r1, [r4, #68]	; 0x44
   126c4:	e584c030 	str	ip, [r4, #48]	; 0x30
   126c8:	e5842048 	str	r2, [r4, #72]	; 0x48
   126cc:	e5843058 	str	r3, [r4, #88]	; 0x58
   126d0:	e28dd024 	add	sp, sp, #36	; 0x24
   126d4:	e8bd8030 	pop	{r4, r5, pc}
   126d8:	e8940006 	ldm	r4, {r1, r2}
   126dc:	e5841008 	str	r1, [r4, #8]
   126e0:	e584200c 	str	r2, [r4, #12]
   126e4:	eaffffe4 	b	1267c <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x9c>
   126e8:	e59d2018 	ldr	r2, [sp, #24]
   126ec:	e59d301c 	ldr	r3, [sp, #28]
   126f0:	e2420d0a 	sub	r0, r2, #640	; 0x280
   126f4:	e2431e1e 	sub	r1, r3, #480	; 0x1e0
   126f8:	e3510f96 	cmp	r1, #600	; 0x258
   126fc:	93500c05 	cmpls	r0, #1280	; 0x500
   12700:	e884000c 	stm	r4, {r2, r3}
   12704:	9affffd3 	bls	12658 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x78>
   12708:	eaffffcf 	b	1264c <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
   1270c:	00040003 	.word	0x00040003
   12710:	00000414 	.word	0x00000414
   12714:	00015a0c 	.word	0x00015a0c

00012718 <CBcmFrameBuffer::~CBcmFrameBuffer()>:
   12718:	e92d4010 	push	{r4, lr}
   1271c:	e1a04000 	mov	r4, r0
   12720:	e3a01014 	mov	r1, #20
   12724:	e5900020 	ldr	r0, [r0, #32]
   12728:	ebfffdcf 	bl	11e6c <operator delete(void*, unsigned int)>
   1272c:	e1a00004 	mov	r0, r4
   12730:	e8bd8010 	pop	{r4, pc}

00012734 <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)>:
   12734:	e5903010 	ldr	r3, [r0, #16]
   12738:	e3530008 	cmp	r3, #8
   1273c:	812fff1e 	bxhi	lr
   12740:	e1a03982 	lsl	r3, r2, #19
   12744:	e1a0c5a2 	lsr	ip, r2, #11
   12748:	e203373e 	and	r3, r3, #16252928	; 0xf80000
   1274c:	e183318c 	orr	r3, r3, ip, lsl #3
   12750:	e1a02282 	lsl	r2, r2, #5
   12754:	e5900020 	ldr	r0, [r0, #32]
   12758:	e38334ff 	orr	r3, r3, #-16777216	; 0xff000000
   1275c:	e2022b3f 	and	r2, r2, #64512	; 0xfc00
   12760:	e1822003 	orr	r2, r2, r3
   12764:	e2811004 	add	r1, r1, #4
   12768:	e0801101 	add	r1, r0, r1, lsl #2
   1276c:	e1a0c422 	lsr	ip, r2, #8
   12770:	e1a00822 	lsr	r0, r2, #16
   12774:	e1a03c22 	lsr	r3, r2, #24
   12778:	e5c12004 	strb	r2, [r1, #4]
   1277c:	e5c1c005 	strb	ip, [r1, #5]
   12780:	e5c10006 	strb	r0, [r1, #6]
   12784:	e5c13007 	strb	r3, [r1, #7]
   12788:	e12fff1e 	bx	lr

0001278c <CBcmFrameBuffer::SetPalette32(unsigned char, unsigned int)>:
   1278c:	e5903010 	ldr	r3, [r0, #16]
   12790:	e3530008 	cmp	r3, #8
   12794:	812fff1e 	bxhi	lr
   12798:	e5903020 	ldr	r3, [r0, #32]
   1279c:	e2811004 	add	r1, r1, #4
   127a0:	e0831101 	add	r1, r3, r1, lsl #2
   127a4:	e1a0c422 	lsr	ip, r2, #8
   127a8:	e1a00822 	lsr	r0, r2, #16
   127ac:	e1a03c22 	lsr	r3, r2, #24
   127b0:	e5c12004 	strb	r2, [r1, #4]
   127b4:	e5c1c005 	strb	ip, [r1, #5]
   127b8:	e5c10006 	strb	r0, [r1, #6]
   127bc:	e5c13007 	strb	r3, [r1, #7]
   127c0:	e12fff1e 	bx	lr

000127c4 <CBcmFrameBuffer::Initialize()>:
   127c4:	e92d4030 	push	{r4, r5, lr}
   127c8:	e1a04000 	mov	r4, r0
   127cc:	e24dd00c 	sub	sp, sp, #12
   127d0:	e28d0004 	add	r0, sp, #4
   127d4:	ebffdeeb 	bl	a388 <CBcmPropertyTags::CBcmPropertyTags()>
   127d8:	e2841024 	add	r1, r4, #36	; 0x24
   127dc:	e28d0004 	add	r0, sp, #4
   127e0:	e3a02070 	mov	r2, #112	; 0x70
   127e4:	ebffdef2 	bl	a3b4 <CBcmPropertyTags::GetTags(void*, unsigned int)>
   127e8:	e2505000 	subs	r5, r0, #0
   127ec:	0a00001f 	beq	12870 <CBcmFrameBuffer::Initialize()+0xac>
   127f0:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   127f4:	e3530000 	cmp	r3, #0
   127f8:	0a00001b 	beq	1286c <CBcmFrameBuffer::Initialize()+0xa8>
   127fc:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   12800:	e3530000 	cmp	r3, #0
   12804:	0a000018 	beq	1286c <CBcmFrameBuffer::Initialize()+0xa8>
   12808:	e5943044 	ldr	r3, [r4, #68]	; 0x44
   1280c:	e3530000 	cmp	r3, #0
   12810:	0a000015 	beq	1286c <CBcmFrameBuffer::Initialize()+0xa8>
   12814:	e5943048 	ldr	r3, [r4, #72]	; 0x48
   12818:	e3530000 	cmp	r3, #0
   1281c:	0a000012 	beq	1286c <CBcmFrameBuffer::Initialize()+0xa8>
   12820:	e5943058 	ldr	r3, [r4, #88]	; 0x58
   12824:	e3530000 	cmp	r3, #0
   12828:	0a00000f 	beq	1286c <CBcmFrameBuffer::Initialize()+0xa8>
   1282c:	e594307c 	ldr	r3, [r4, #124]	; 0x7c
   12830:	e3530000 	cmp	r3, #0
   12834:	0a00000c 	beq	1286c <CBcmFrameBuffer::Initialize()+0xa8>
   12838:	e5940010 	ldr	r0, [r4, #16]
   1283c:	e5941080 	ldr	r1, [r4, #128]	; 0x80
   12840:	e5942090 	ldr	r2, [r4, #144]	; 0x90
   12844:	e3c33103 	bic	r3, r3, #-1073741824	; 0xc0000000
   12848:	e3500008 	cmp	r0, #8
   1284c:	e5843014 	str	r3, [r4, #20]
   12850:	e5841018 	str	r1, [r4, #24]
   12854:	e584201c 	str	r2, [r4, #28]
   12858:	8a000004 	bhi	12870 <CBcmFrameBuffer::Initialize()+0xac>
   1285c:	e1a00004 	mov	r0, r4
   12860:	ebffff2f 	bl	12524 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>
   12864:	e1a05000 	mov	r5, r0
   12868:	ea000000 	b	12870 <CBcmFrameBuffer::Initialize()+0xac>
   1286c:	e1a05003 	mov	r5, r3
   12870:	e28d0004 	add	r0, sp, #4
   12874:	ebffdec9 	bl	a3a0 <CBcmPropertyTags::~CBcmPropertyTags()>
   12878:	e1a00005 	mov	r0, r5
   1287c:	e28dd00c 	add	sp, sp, #12
   12880:	e8bd8030 	pop	{r4, r5, pc}

00012884 <CBcmFrameBuffer::GetWidth() const>:
   12884:	e5900000 	ldr	r0, [r0]
   12888:	e12fff1e 	bx	lr

0001288c <CBcmFrameBuffer::GetHeight() const>:
   1288c:	e5900004 	ldr	r0, [r0, #4]
   12890:	e12fff1e 	bx	lr

00012894 <CBcmFrameBuffer::GetVirtWidth() const>:
   12894:	e5900008 	ldr	r0, [r0, #8]
   12898:	e12fff1e 	bx	lr

0001289c <CBcmFrameBuffer::GetVirtHeight() const>:
   1289c:	e590000c 	ldr	r0, [r0, #12]
   128a0:	e12fff1e 	bx	lr

000128a4 <CBcmFrameBuffer::GetPitch() const>:
   128a4:	e590001c 	ldr	r0, [r0, #28]
   128a8:	e12fff1e 	bx	lr

000128ac <CBcmFrameBuffer::GetDepth() const>:
   128ac:	e5900010 	ldr	r0, [r0, #16]
   128b0:	e12fff1e 	bx	lr

000128b4 <CBcmFrameBuffer::GetBuffer() const>:
   128b4:	e5900014 	ldr	r0, [r0, #20]
   128b8:	e12fff1e 	bx	lr

000128bc <CBcmFrameBuffer::GetSize() const>:
   128bc:	e5900018 	ldr	r0, [r0, #24]
   128c0:	e12fff1e 	bx	lr

000128c4 <CBcmFrameBuffer::UpdatePalette()>:
   128c4:	e5903010 	ldr	r3, [r0, #16]
   128c8:	e3530008 	cmp	r3, #8
   128cc:	9a000001 	bls	128d8 <CBcmFrameBuffer::UpdatePalette()+0x14>
   128d0:	e3a00001 	mov	r0, #1
   128d4:	e12fff1e 	bx	lr
   128d8:	eaffff11 	b	12524 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>

000128dc <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)>:
   128dc:	e92d4070 	push	{r4, r5, r6, lr}
   128e0:	e24dd020 	sub	sp, sp, #32
   128e4:	e28d0008 	add	r0, sp, #8
   128e8:	e1a05001 	mov	r5, r1
   128ec:	e1a06002 	mov	r6, r2
   128f0:	ebffdea4 	bl	a388 <CBcmPropertyTags::CBcmPropertyTags()>
   128f4:	e3a03008 	mov	r3, #8
   128f8:	e28d200c 	add	r2, sp, #12
   128fc:	e08d0003 	add	r0, sp, r3
   12900:	e58d3000 	str	r3, [sp]
   12904:	e59f1044 	ldr	r1, [pc, #68]	; 12950 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x74>
   12908:	e3a03014 	mov	r3, #20
   1290c:	e58d5018 	str	r5, [sp, #24]
   12910:	e58d601c 	str	r6, [sp, #28]
   12914:	ebffdef2 	bl	a4e4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   12918:	e2504000 	subs	r4, r0, #0
   1291c:	0a000006 	beq	1293c <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x60>
   12920:	e59d3018 	ldr	r3, [sp, #24]
   12924:	e1550003 	cmp	r5, r3
   12928:	059d401c 	ldreq	r4, [sp, #28]
   1292c:	13a04000 	movne	r4, #0
   12930:	00444006 	subeq	r4, r4, r6
   12934:	016f4f14 	clzeq	r4, r4
   12938:	01a042a4 	lsreq	r4, r4, #5
   1293c:	e28d0008 	add	r0, sp, #8
   12940:	ebffde96 	bl	a3a0 <CBcmPropertyTags::~CBcmPropertyTags()>
   12944:	e1a00004 	mov	r0, r4
   12948:	e28dd020 	add	sp, sp, #32
   1294c:	e8bd8070 	pop	{r4, r5, r6, pc}
   12950:	00048009 	.word	0x00048009

00012954 <CBcmFrameBuffer::WaitForVerticalSync()>:
   12954:	e92d4010 	push	{r4, lr}
   12958:	e24dd020 	sub	sp, sp, #32
   1295c:	e28d000c 	add	r0, sp, #12
   12960:	ebffde88 	bl	a388 <CBcmPropertyTags::CBcmPropertyTags()>
   12964:	e3a03000 	mov	r3, #0
   12968:	e58d3000 	str	r3, [sp]
   1296c:	e3a03010 	mov	r3, #16
   12970:	e59f1020 	ldr	r1, [pc, #32]	; 12998 <CBcmFrameBuffer::WaitForVerticalSync()+0x44>
   12974:	e08d2003 	add	r2, sp, r3
   12978:	e28d000c 	add	r0, sp, #12
   1297c:	ebffded8 	bl	a4e4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   12980:	e1a04000 	mov	r4, r0
   12984:	e28d000c 	add	r0, sp, #12
   12988:	ebffde84 	bl	a3a0 <CBcmPropertyTags::~CBcmPropertyTags()>
   1298c:	e1a00004 	mov	r0, r4
   12990:	e28dd020 	add	sp, sp, #32
   12994:	e8bd8010 	pop	{r4, pc}
   12998:	0004800e 	.word	0x0004800e

0001299c <CBcmMailBox::CBcmMailBox(unsigned int)>:
   1299c:	e5801000 	str	r1, [r0]
   129a0:	e12fff1e 	bx	lr

000129a4 <CBcmMailBox::~CBcmMailBox()>:
   129a4:	e12fff1e 	bx	lr

000129a8 <CBcmMailBox::Flush()>:
   129a8:	e92d4070 	push	{r4, r5, r6, lr}
   129ac:	e59f4028 	ldr	r4, [pc, #40]	; 129dc <CBcmMailBox::Flush()+0x34>
   129b0:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   129b4:	e3130101 	tst	r3, #1073741824	; 0x40000000
   129b8:	18bd8070 	popne	{r4, r5, r6, pc}
   129bc:	e3a05014 	mov	r5, #20
   129c0:	e1a00005 	mov	r0, r5
   129c4:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
   129c8:	ebfff91d 	bl	10e44 <CTimer::SimpleMsDelay(unsigned int)>
   129cc:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   129d0:	e3130101 	tst	r3, #1073741824	; 0x40000000
   129d4:	0afffff9 	beq	129c0 <CBcmMailBox::Flush()+0x18>
   129d8:	e8bd8070 	pop	{r4, r5, r6, pc}
   129dc:	2000b000 	.word	0x2000b000

000129e0 <CBcmMailBox::Read()>:
   129e0:	e5901000 	ldr	r1, [r0]
   129e4:	e59f2020 	ldr	r2, [pc, #32]	; 12a0c <CBcmMailBox::Read()+0x2c>
   129e8:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   129ec:	e3130101 	tst	r3, #1073741824	; 0x40000000
   129f0:	1afffffc 	bne	129e8 <CBcmMailBox::Read()+0x8>
   129f4:	e5920880 	ldr	r0, [r2, #2176]	; 0x880
   129f8:	e200300f 	and	r3, r0, #15
   129fc:	e1510003 	cmp	r1, r3
   12a00:	1afffff8 	bne	129e8 <CBcmMailBox::Read()+0x8>
   12a04:	e3c0000f 	bic	r0, r0, #15
   12a08:	e12fff1e 	bx	lr
   12a0c:	2000b000 	.word	0x2000b000

00012a10 <CBcmMailBox::Write(unsigned int)>:
   12a10:	e92d4070 	push	{r4, r5, r6, lr}
   12a14:	e1a05000 	mov	r5, r0
   12a18:	e1a04001 	mov	r4, r1
   12a1c:	e59f2034 	ldr	r2, [pc, #52]	; 12a58 <CBcmMailBox::Write(unsigned int)+0x48>
   12a20:	e59238b8 	ldr	r3, [r2, #2232]	; 0x8b8
   12a24:	e3530000 	cmp	r3, #0
   12a28:	bafffffc 	blt	12a20 <CBcmMailBox::Write(unsigned int)+0x10>
   12a2c:	e314000f 	tst	r4, #15
   12a30:	0a000003 	beq	12a44 <CBcmMailBox::Write(unsigned int)+0x34>
   12a34:	e3a0205b 	mov	r2, #91	; 0x5b
   12a38:	e59f101c 	ldr	r1, [pc, #28]	; 12a5c <CBcmMailBox::Write(unsigned int)+0x4c>
   12a3c:	e59f001c 	ldr	r0, [pc, #28]	; 12a60 <CBcmMailBox::Write(unsigned int)+0x50>
   12a40:	ebfffe93 	bl	12494 <assertion_failed>
   12a44:	e5952000 	ldr	r2, [r5]
   12a48:	e59f3008 	ldr	r3, [pc, #8]	; 12a58 <CBcmMailBox::Write(unsigned int)+0x48>
   12a4c:	e1844002 	orr	r4, r4, r2
   12a50:	e58348a0 	str	r4, [r3, #2208]	; 0x8a0
   12a54:	e8bd8070 	pop	{r4, r5, r6, pc}
   12a58:	2000b000 	.word	0x2000b000
   12a5c:	000147c0 	.word	0x000147c0
   12a60:	000147d0 	.word	0x000147d0

00012a64 <CBcmMailBox::WriteRead(unsigned int)>:
   12a64:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   12a68:	e3a03000 	mov	r3, #0
   12a6c:	e1a07000 	mov	r7, r0
   12a70:	e1a08001 	mov	r8, r1
   12a74:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   12a78:	e59f5090 	ldr	r5, [pc, #144]	; 12b10 <CBcmMailBox::WriteRead(unsigned int)+0xac>
   12a7c:	e5950000 	ldr	r0, [r5]
   12a80:	e1500003 	cmp	r0, r3
   12a84:	1a00001f 	bne	12b08 <CBcmMailBox::WriteRead(unsigned int)+0xa4>
   12a88:	e59f4084 	ldr	r4, [pc, #132]	; 12b14 <CBcmMailBox::WriteRead(unsigned int)+0xb0>
   12a8c:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   12a90:	e3130101 	tst	r3, #1073741824	; 0x40000000
   12a94:	1a000006 	bne	12ab4 <CBcmMailBox::WriteRead(unsigned int)+0x50>
   12a98:	e3a06014 	mov	r6, #20
   12a9c:	e1a00006 	mov	r0, r6
   12aa0:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
   12aa4:	ebfff8e6 	bl	10e44 <CTimer::SimpleMsDelay(unsigned int)>
   12aa8:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   12aac:	e3130101 	tst	r3, #1073741824	; 0x40000000
   12ab0:	0afffff9 	beq	12a9c <CBcmMailBox::WriteRead(unsigned int)+0x38>
   12ab4:	e1a00007 	mov	r0, r7
   12ab8:	e1a01008 	mov	r1, r8
   12abc:	ebffffd3 	bl	12a10 <CBcmMailBox::Write(unsigned int)>
   12ac0:	e5970000 	ldr	r0, [r7]
   12ac4:	e59f2048 	ldr	r2, [pc, #72]	; 12b14 <CBcmMailBox::WriteRead(unsigned int)+0xb0>
   12ac8:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   12acc:	e3130101 	tst	r3, #1073741824	; 0x40000000
   12ad0:	1afffffc 	bne	12ac8 <CBcmMailBox::WriteRead(unsigned int)+0x64>
   12ad4:	e5923880 	ldr	r3, [r2, #2176]	; 0x880
   12ad8:	e203100f 	and	r1, r3, #15
   12adc:	e1510000 	cmp	r1, r0
   12ae0:	1afffff8 	bne	12ac8 <CBcmMailBox::WriteRead(unsigned int)+0x64>
   12ae4:	e5952000 	ldr	r2, [r5]
   12ae8:	e3c3400f 	bic	r4, r3, #15
   12aec:	e3520000 	cmp	r2, #0
   12af0:	0a000000 	beq	12af8 <CBcmMailBox::WriteRead(unsigned int)+0x94>
   12af4:	ebfffcab 	bl	11da8 <LeaveCritical>
   12af8:	e3a03000 	mov	r3, #0
   12afc:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   12b00:	e1a00004 	mov	r0, r4
   12b04:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   12b08:	ebfffc79 	bl	11cf4 <EnterCritical>
   12b0c:	eaffffdd 	b	12a88 <CBcmMailBox::WriteRead(unsigned int)+0x24>
   12b10:	00015b34 	.word	0x00015b34
   12b14:	2000b000 	.word	0x2000b000

00012b18 <_GLOBAL__sub_I__ZN11CBcmMailBox10s_SpinLockE>:
   12b18:	e3a02000 	mov	r2, #0
   12b1c:	e59f3004 	ldr	r3, [pc, #4]	; 12b28 <_GLOBAL__sub_I__ZN11CBcmMailBox10s_SpinLockE+0x10>
   12b20:	e5832000 	str	r2, [r3]
   12b24:	e12fff1e 	bx	lr
   12b28:	00015b34 	.word	0x00015b34

00012b2c <CCharGenerator::CCharGenerator()>:
   12b2c:	e3a03008 	mov	r3, #8
   12b30:	e5803000 	str	r3, [r0]
   12b34:	e12fff1e 	bx	lr

00012b38 <CCharGenerator::~CCharGenerator()>:
   12b38:	e12fff1e 	bx	lr

00012b3c <CCharGenerator::GetCharWidth() const>:
   12b3c:	e5900000 	ldr	r0, [r0]
   12b40:	e12fff1e 	bx	lr

00012b44 <CCharGenerator::GetCharHeight() const>:
   12b44:	e3a00013 	mov	r0, #19
   12b48:	e12fff1e 	bx	lr

00012b4c <CCharGenerator::GetUnderline() const>:
   12b4c:	e3a00010 	mov	r0, #16
   12b50:	e12fff1e 	bx	lr

00012b54 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>:
   12b54:	e6ef1071 	uxtb	r1, r1
   12b58:	e92d4070 	push	{r4, r5, r6, lr}
   12b5c:	e2414021 	sub	r4, r1, #33	; 0x21
   12b60:	e35400de 	cmp	r4, #222	; 0xde
   12b64:	8a00000e 	bhi	12ba4 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x50>
   12b68:	e1a06003 	mov	r6, r3
   12b6c:	e5903000 	ldr	r3, [r0]
   12b70:	e1a05002 	mov	r5, r2
   12b74:	e1530002 	cmp	r3, r2
   12b78:	9a00000b 	bls	12bac <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x58>
   12b7c:	e356000f 	cmp	r6, #15
   12b80:	8a000007 	bhi	12ba4 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x50>
   12b84:	e3a02080 	mov	r2, #128	; 0x80
   12b88:	e59f1038 	ldr	r1, [pc, #56]	; 12bc8 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x74>
   12b8c:	e0814204 	add	r4, r1, r4, lsl #4
   12b90:	e7d43006 	ldrb	r3, [r4, r6]
   12b94:	e0133552 	ands	r3, r3, r2, asr r5
   12b98:	13a00001 	movne	r0, #1
   12b9c:	03a00000 	moveq	r0, #0
   12ba0:	e8bd8070 	pop	{r4, r5, r6, pc}
   12ba4:	e3a00000 	mov	r0, #0
   12ba8:	e8bd8070 	pop	{r4, r5, r6, pc}
   12bac:	e3a0204e 	mov	r2, #78	; 0x4e
   12bb0:	e59f1014 	ldr	r1, [pc, #20]	; 12bcc <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x78>
   12bb4:	e59f0014 	ldr	r0, [pc, #20]	; 12bd0 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x7c>
   12bb8:	ebfffe35 	bl	12494 <assertion_failed>
   12bbc:	e356000f 	cmp	r6, #15
   12bc0:	9affffef 	bls	12b84 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x30>
   12bc4:	eafffff6 	b	12ba4 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x50>
   12bc8:	000147e4 	.word	0x000147e4
   12bcc:	000155d4 	.word	0x000155d4
   12bd0:	000155e8 	.word	0x000155e8

00012bd4 <debug_hexdump(void const*, unsigned int, char const*)>:
   12bd4:	e3520000 	cmp	r2, #0
   12bd8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12bdc:	e1a05001 	mov	r5, r1
   12be0:	e59f60f4 	ldr	r6, [pc, #244]	; 12cdc <debug_hexdump(void const*, unsigned int, char const*)+0x108>
   12be4:	e1a04000 	mov	r4, r0
   12be8:	11a06002 	movne	r6, r2
   12bec:	e24dd04c 	sub	sp, sp, #76	; 0x4c
   12bf0:	ebffe66a 	bl	c5a0 <CLogger::Get()>
   12bf4:	e58d4004 	str	r4, [sp, #4]
   12bf8:	e58d5000 	str	r5, [sp]
   12bfc:	e1a01006 	mov	r1, r6
   12c00:	e59f30d8 	ldr	r3, [pc, #216]	; 12ce0 <debug_hexdump(void const*, unsigned int, char const*)+0x10c>
   12c04:	e3a02004 	mov	r2, #4
   12c08:	ebffe80d 	bl	cc44 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12c0c:	e3550000 	cmp	r5, #0
   12c10:	0a00002b 	beq	12cc4 <debug_hexdump(void const*, unsigned int, char const*)+0xf0>
   12c14:	e3a09004 	mov	r9, #4
   12c18:	e59f80c4 	ldr	r8, [pc, #196]	; 12ce4 <debug_hexdump(void const*, unsigned int, char const*)+0x110>
   12c1c:	e59f70c4 	ldr	r7, [pc, #196]	; 12ce8 <debug_hexdump(void const*, unsigned int, char const*)+0x114>
   12c20:	ebffe65e 	bl	c5a0 <CLogger::Get()>
   12c24:	e5d4a00f 	ldrb	sl, [r4, #15]
   12c28:	e5d4e00e 	ldrb	lr, [r4, #14]
   12c2c:	e5d4c00d 	ldrb	ip, [r4, #13]
   12c30:	e5d4300c 	ldrb	r3, [r4, #12]
   12c34:	e5d4200b 	ldrb	r2, [r4, #11]
   12c38:	e5d4100a 	ldrb	r1, [r4, #10]
   12c3c:	e5d4b009 	ldrb	fp, [r4, #9]
   12c40:	e58da040 	str	sl, [sp, #64]	; 0x40
   12c44:	e5d4a008 	ldrb	sl, [r4, #8]
   12c48:	e58de03c 	str	lr, [sp, #60]	; 0x3c
   12c4c:	e5d4e007 	ldrb	lr, [r4, #7]
   12c50:	e58dc038 	str	ip, [sp, #56]	; 0x38
   12c54:	e5d4c006 	ldrb	ip, [r4, #6]
   12c58:	e58d3034 	str	r3, [sp, #52]	; 0x34
   12c5c:	e5d43005 	ldrb	r3, [r4, #5]
   12c60:	e58d2030 	str	r2, [sp, #48]	; 0x30
   12c64:	e5d42004 	ldrb	r2, [r4, #4]
   12c68:	e58d102c 	str	r1, [sp, #44]	; 0x2c
   12c6c:	e5d41003 	ldrb	r1, [r4, #3]
   12c70:	e58db028 	str	fp, [sp, #40]	; 0x28
   12c74:	e5d4b002 	ldrb	fp, [r4, #2]
   12c78:	e58da024 	str	sl, [sp, #36]	; 0x24
   12c7c:	e5d4a001 	ldrb	sl, [r4, #1]
   12c80:	e58de020 	str	lr, [sp, #32]
   12c84:	e5d4e000 	ldrb	lr, [r4]
   12c88:	e58dc01c 	str	ip, [sp, #28]
   12c8c:	e58d3018 	str	r3, [sp, #24]
   12c90:	e004c008 	and	ip, r4, r8
   12c94:	e58d2014 	str	r2, [sp, #20]
   12c98:	e58d1010 	str	r1, [sp, #16]
   12c9c:	e1a03007 	mov	r3, r7
   12ca0:	e1a02009 	mov	r2, r9
   12ca4:	e1a01006 	mov	r1, r6
   12ca8:	e58db00c 	str	fp, [sp, #12]
   12cac:	e58da008 	str	sl, [sp, #8]
   12cb0:	e88d5000 	stm	sp, {ip, lr}
   12cb4:	ebffe7e2 	bl	cc44 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12cb8:	e355000f 	cmp	r5, #15
   12cbc:	e2844010 	add	r4, r4, #16
   12cc0:	8a000001 	bhi	12ccc <debug_hexdump(void const*, unsigned int, char const*)+0xf8>
   12cc4:	e28dd04c 	add	sp, sp, #76	; 0x4c
   12cc8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ccc:	e2555010 	subs	r5, r5, #16
   12cd0:	1affffd2 	bne	12c20 <debug_hexdump(void const*, unsigned int, char const*)+0x4c>
   12cd4:	e28dd04c 	add	sp, sp, #76	; 0x4c
   12cd8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12cdc:	00015600 	.word	0x00015600
   12ce0:	00015608 	.word	0x00015608
   12ce4:	0000ffff 	.word	0x0000ffff
   12ce8:	00015630 	.word	0x00015630

00012cec <debug_stacktrace(unsigned int const*, char const*)>:
   12cec:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12cf0:	e3510000 	cmp	r1, #0
   12cf4:	e59f8084 	ldr	r8, [pc, #132]	; 12d80 <debug_stacktrace(unsigned int const*, char const*)+0x94>
   12cf8:	e24dd008 	sub	sp, sp, #8
   12cfc:	e1a05000 	mov	r5, r0
   12d00:	11a08001 	movne	r8, r1
   12d04:	e3a04000 	mov	r4, #0
   12d08:	e3a0a004 	mov	sl, #4
   12d0c:	e59f6070 	ldr	r6, [pc, #112]	; 12d84 <debug_stacktrace(unsigned int const*, char const*)+0x98>
   12d10:	e59f7070 	ldr	r7, [pc, #112]	; 12d88 <debug_stacktrace(unsigned int const*, char const*)+0x9c>
   12d14:	e59f9070 	ldr	r9, [pc, #112]	; 12d8c <debug_stacktrace(unsigned int const*, char const*)+0xa0>
   12d18:	ea000003 	b	12d2c <debug_stacktrace(unsigned int const*, char const*)+0x40>
   12d1c:	e2844001 	add	r4, r4, #1
   12d20:	e3540040 	cmp	r4, #64	; 0x40
   12d24:	e2855004 	add	r5, r5, #4
   12d28:	0a000012 	beq	12d78 <debug_stacktrace(unsigned int const*, char const*)+0x8c>
   12d2c:	e5953000 	ldr	r3, [r5]
   12d30:	e1530006 	cmp	r3, r6
   12d34:	9afffff8 	bls	12d1c <debug_stacktrace(unsigned int const*, char const*)+0x30>
   12d38:	e1530007 	cmp	r3, r7
   12d3c:	2afffff6 	bcs	12d1c <debug_stacktrace(unsigned int const*, char const*)+0x30>
   12d40:	e3130003 	tst	r3, #3
   12d44:	1afffff4 	bne	12d1c <debug_stacktrace(unsigned int const*, char const*)+0x30>
   12d48:	ebffe614 	bl	c5a0 <CLogger::Get()>
   12d4c:	e5953000 	ldr	r3, [r5]
   12d50:	e1a0200a 	mov	r2, sl
   12d54:	e58d4000 	str	r4, [sp]
   12d58:	e58d3004 	str	r3, [sp, #4]
   12d5c:	e1a01008 	mov	r1, r8
   12d60:	e1a03009 	mov	r3, r9
   12d64:	e2844001 	add	r4, r4, #1
   12d68:	ebffe7b5 	bl	cc44 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12d6c:	e3540040 	cmp	r4, #64	; 0x40
   12d70:	e2855004 	add	r5, r5, #4
   12d74:	1affffec 	bne	12d2c <debug_stacktrace(unsigned int const*, char const*)+0x40>
   12d78:	e28dd008 	add	sp, sp, #8
   12d7c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12d80:	00015600 	.word	0x00015600
   12d84:	00007fff 	.word	0x00007fff
   12d88:	000139f4 	.word	0x000139f4
   12d8c:	00015688 	.word	0x00015688

00012d90 <DelayLoop>:
   12d90:	e2500001 	subs	r0, r0, #1
   12d94:	8afffffd 	bhi	12d90 <DelayLoop>
   12d98:	e1a0f00e 	mov	pc, lr

00012d9c <CDevice::~CDevice()>:
   12d9c:	e12fff1e 	bx	lr

00012da0 <CDevice::Read(void*, unsigned int)>:
   12da0:	e3e00000 	mvn	r0, #0
   12da4:	e12fff1e 	bx	lr

00012da8 <CDevice::Seek(unsigned long long)>:
   12da8:	e3e00000 	mvn	r0, #0
   12dac:	e3e01000 	mvn	r1, #0
   12db0:	e12fff1e 	bx	lr

00012db4 <CDevice::~CDevice()>:
   12db4:	e92d4010 	push	{r4, lr}
   12db8:	e1a04000 	mov	r4, r0
   12dbc:	e3a01004 	mov	r1, #4
   12dc0:	ebfffc29 	bl	11e6c <operator delete(void*, unsigned int)>
   12dc4:	e1a00004 	mov	r0, r4
   12dc8:	e8bd8010 	pop	{r4, pc}

00012dcc <CDevice::CDevice()>:
   12dcc:	e59f3004 	ldr	r3, [pc, #4]	; 12dd8 <CDevice::CDevice()+0xc>
   12dd0:	e5803000 	str	r3, [r0]
   12dd4:	e12fff1e 	bx	lr
   12dd8:	000156a4 	.word	0x000156a4

00012ddc <CGPIOManager::CGPIOManager(CInterruptSystem*)>:
   12ddc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   12de0:	e3a0e000 	mov	lr, #0
   12de4:	e1a03000 	mov	r3, r0
   12de8:	e1a0c00e 	mov	ip, lr
   12dec:	e5801000 	str	r1, [r0]
   12df0:	e28020dc 	add	r2, r0, #220	; 0xdc
   12df4:	e5e3e004 	strb	lr, [r3, #4]!
   12df8:	e5a3c004 	str	ip, [r3, #4]!
   12dfc:	e1530002 	cmp	r3, r2
   12e00:	1afffffc 	bne	12df8 <CGPIOManager::CGPIOManager(CInterruptSystem*)+0x1c>
   12e04:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00012e08 <CGPIOManager::~CGPIOManager()>:
   12e08:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12e0c:	e1a09000 	mov	r9, r0
   12e10:	e3a0802c 	mov	r8, #44	; 0x2c
   12e14:	e59f706c 	ldr	r7, [pc, #108]	; 12e88 <CGPIOManager::~CGPIOManager()+0x80>
   12e18:	e59f606c 	ldr	r6, [pc, #108]	; 12e8c <CGPIOManager::~CGPIOManager()+0x84>
   12e1c:	e2804004 	add	r4, r0, #4
   12e20:	e28050dc 	add	r5, r0, #220	; 0xdc
   12e24:	e5b43004 	ldr	r3, [r4, #4]!
   12e28:	e3530000 	cmp	r3, #0
   12e2c:	0a000003 	beq	12e40 <CGPIOManager::~CGPIOManager()+0x38>
   12e30:	e1a02008 	mov	r2, r8
   12e34:	e1a01007 	mov	r1, r7
   12e38:	e1a00006 	mov	r0, r6
   12e3c:	ebfffd94 	bl	12494 <assertion_failed>
   12e40:	e1540005 	cmp	r4, r5
   12e44:	1afffff6 	bne	12e24 <CGPIOManager::~CGPIOManager()+0x1c>
   12e48:	e5d93004 	ldrb	r3, [r9, #4]
   12e4c:	e3530000 	cmp	r3, #0
   12e50:	0a000004 	beq	12e68 <CGPIOManager::~CGPIOManager()+0x60>
   12e54:	e5990000 	ldr	r0, [r9]
   12e58:	e3500000 	cmp	r0, #0
   12e5c:	0a000003 	beq	12e70 <CGPIOManager::~CGPIOManager()+0x68>
   12e60:	e3a01034 	mov	r1, #52	; 0x34
   12e64:	ebffe36f 	bl	bc28 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   12e68:	e1a00009 	mov	r0, r9
   12e6c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12e70:	e59f0018 	ldr	r0, [pc, #24]	; 12e90 <CGPIOManager::~CGPIOManager()+0x88>
   12e74:	e3a02032 	mov	r2, #50	; 0x32
   12e78:	e59f1008 	ldr	r1, [pc, #8]	; 12e88 <CGPIOManager::~CGPIOManager()+0x80>
   12e7c:	ebfffd84 	bl	12494 <assertion_failed>
   12e80:	e5990000 	ldr	r0, [r9]
   12e84:	eafffff5 	b	12e60 <CGPIOManager::~CGPIOManager()+0x58>
   12e88:	000156b8 	.word	0x000156b8
   12e8c:	000156c8 	.word	0x000156c8
   12e90:	000156dc 	.word	0x000156dc

00012e94 <CGPIOManager::Initialize()>:
   12e94:	e5d03004 	ldrb	r3, [r0, #4]
   12e98:	e92d4010 	push	{r4, lr}
   12e9c:	e3530000 	cmp	r3, #0
   12ea0:	e1a04000 	mov	r4, r0
   12ea4:	1a000009 	bne	12ed0 <CGPIOManager::Initialize()+0x3c>
   12ea8:	e5940000 	ldr	r0, [r4]
   12eac:	e3500000 	cmp	r0, #0
   12eb0:	0a00000d 	beq	12eec <CGPIOManager::Initialize()+0x58>
   12eb4:	e1a03004 	mov	r3, r4
   12eb8:	e59f2044 	ldr	r2, [pc, #68]	; 12f04 <CGPIOManager::Initialize()+0x70>
   12ebc:	e3a01034 	mov	r1, #52	; 0x34
   12ec0:	ebffe31d 	bl	bb3c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   12ec4:	e3a00001 	mov	r0, #1
   12ec8:	e5c40004 	strb	r0, [r4, #4]
   12ecc:	e8bd8010 	pop	{r4, pc}
   12ed0:	e59f0030 	ldr	r0, [pc, #48]	; 12f08 <CGPIOManager::Initialize()+0x74>
   12ed4:	e3a0203b 	mov	r2, #59	; 0x3b
   12ed8:	e59f102c 	ldr	r1, [pc, #44]	; 12f0c <CGPIOManager::Initialize()+0x78>
   12edc:	ebfffd6c 	bl	12494 <assertion_failed>
   12ee0:	e5940000 	ldr	r0, [r4]
   12ee4:	e3500000 	cmp	r0, #0
   12ee8:	1afffff1 	bne	12eb4 <CGPIOManager::Initialize()+0x20>
   12eec:	e59f001c 	ldr	r0, [pc, #28]	; 12f10 <CGPIOManager::Initialize()+0x7c>
   12ef0:	e3a0203c 	mov	r2, #60	; 0x3c
   12ef4:	e59f1010 	ldr	r1, [pc, #16]	; 12f0c <CGPIOManager::Initialize()+0x78>
   12ef8:	ebfffd65 	bl	12494 <assertion_failed>
   12efc:	e5940000 	ldr	r0, [r4]
   12f00:	eaffffeb 	b	12eb4 <CGPIOManager::Initialize()+0x20>
   12f04:	00013124 	.word	0x00013124
   12f08:	000156f0 	.word	0x000156f0
   12f0c:	000156b8 	.word	0x000156b8
   12f10:	000156dc 	.word	0x000156dc

00012f14 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>:
   12f14:	e5d03004 	ldrb	r3, [r0, #4]
   12f18:	e92d4070 	push	{r4, r5, r6, lr}
   12f1c:	e3530000 	cmp	r3, #0
   12f20:	e1a04000 	mov	r4, r0
   12f24:	e1a05001 	mov	r5, r1
   12f28:	0a00000e 	beq	12f68 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x54>
   12f2c:	e3550000 	cmp	r5, #0
   12f30:	0a000016 	beq	12f90 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x7c>
   12f34:	e5956004 	ldr	r6, [r5, #4]
   12f38:	e3560035 	cmp	r6, #53	; 0x35
   12f3c:	8a00000e 	bhi	12f7c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x68>
   12f40:	e0844106 	add	r4, r4, r6, lsl #2
   12f44:	e5943008 	ldr	r3, [r4, #8]
   12f48:	e3530000 	cmp	r3, #0
   12f4c:	0a000003 	beq	12f60 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x4c>
   12f50:	e3a0204b 	mov	r2, #75	; 0x4b
   12f54:	e59f1048 	ldr	r1, [pc, #72]	; 12fa4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x90>
   12f58:	e59f0048 	ldr	r0, [pc, #72]	; 12fa8 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x94>
   12f5c:	ebfffd4c 	bl	12494 <assertion_failed>
   12f60:	e5845008 	str	r5, [r4, #8]
   12f64:	e8bd8070 	pop	{r4, r5, r6, pc}
   12f68:	e3a02045 	mov	r2, #69	; 0x45
   12f6c:	e59f1030 	ldr	r1, [pc, #48]	; 12fa4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x90>
   12f70:	e59f0034 	ldr	r0, [pc, #52]	; 12fac <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x98>
   12f74:	ebfffd46 	bl	12494 <assertion_failed>
   12f78:	eaffffeb 	b	12f2c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x18>
   12f7c:	e3a02049 	mov	r2, #73	; 0x49
   12f80:	e59f101c 	ldr	r1, [pc, #28]	; 12fa4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x90>
   12f84:	e59f0024 	ldr	r0, [pc, #36]	; 12fb0 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x9c>
   12f88:	ebfffd41 	bl	12494 <assertion_failed>
   12f8c:	eaffffeb 	b	12f40 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x2c>
   12f90:	e3a02047 	mov	r2, #71	; 0x47
   12f94:	e59f1008 	ldr	r1, [pc, #8]	; 12fa4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x90>
   12f98:	e59f0014 	ldr	r0, [pc, #20]	; 12fb4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0xa0>
   12f9c:	ebfffd3c 	bl	12494 <assertion_failed>
   12fa0:	eaffffe3 	b	12f34 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x20>
   12fa4:	000156b8 	.word	0x000156b8
   12fa8:	000156c8 	.word	0x000156c8
   12fac:	00015704 	.word	0x00015704
   12fb0:	00013e10 	.word	0x00013e10
   12fb4:	00015714 	.word	0x00015714

00012fb8 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>:
   12fb8:	e5d03004 	ldrb	r3, [r0, #4]
   12fbc:	e92d4070 	push	{r4, r5, r6, lr}
   12fc0:	e3530000 	cmp	r3, #0
   12fc4:	e1a04000 	mov	r4, r0
   12fc8:	e1a05001 	mov	r5, r1
   12fcc:	0a00000b 	beq	13000 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x48>
   12fd0:	e3550000 	cmp	r5, #0
   12fd4:	0a00001b 	beq	13048 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x90>
   12fd8:	e5955004 	ldr	r5, [r5, #4]
   12fdc:	e3550035 	cmp	r5, #53	; 0x35
   12fe0:	8a00000b 	bhi	13014 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x5c>
   12fe4:	e0844105 	add	r4, r4, r5, lsl #2
   12fe8:	e5943008 	ldr	r3, [r4, #8]
   12fec:	e3530000 	cmp	r3, #0
   12ff0:	0a00000f 	beq	13034 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x7c>
   12ff4:	e3a03000 	mov	r3, #0
   12ff8:	e5843008 	str	r3, [r4, #8]
   12ffc:	e8bd8070 	pop	{r4, r5, r6, pc}
   13000:	e3a02052 	mov	r2, #82	; 0x52
   13004:	e59f1050 	ldr	r1, [pc, #80]	; 1305c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xa4>
   13008:	e59f0050 	ldr	r0, [pc, #80]	; 13060 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xa8>
   1300c:	ebfffd20 	bl	12494 <assertion_failed>
   13010:	eaffffee 	b	12fd0 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x18>
   13014:	e3a02056 	mov	r2, #86	; 0x56
   13018:	e59f103c 	ldr	r1, [pc, #60]	; 1305c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xa4>
   1301c:	e59f0040 	ldr	r0, [pc, #64]	; 13064 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xac>
   13020:	e0844105 	add	r4, r4, r5, lsl #2
   13024:	ebfffd1a 	bl	12494 <assertion_failed>
   13028:	e5943008 	ldr	r3, [r4, #8]
   1302c:	e3530000 	cmp	r3, #0
   13030:	1affffef 	bne	12ff4 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x3c>
   13034:	e3a02058 	mov	r2, #88	; 0x58
   13038:	e59f101c 	ldr	r1, [pc, #28]	; 1305c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xa4>
   1303c:	e59f0024 	ldr	r0, [pc, #36]	; 13068 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xb0>
   13040:	ebfffd13 	bl	12494 <assertion_failed>
   13044:	eaffffea 	b	12ff4 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x3c>
   13048:	e3a02054 	mov	r2, #84	; 0x54
   1304c:	e59f1008 	ldr	r1, [pc, #8]	; 1305c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xa4>
   13050:	e59f0014 	ldr	r0, [pc, #20]	; 1306c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xb4>
   13054:	ebfffd0e 	bl	12494 <assertion_failed>
   13058:	eaffffde 	b	12fd8 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x20>
   1305c:	000156b8 	.word	0x000156b8
   13060:	00015704 	.word	0x00015704
   13064:	00013e10 	.word	0x00013e10
   13068:	00015720 	.word	0x00015720
   1306c:	00015714 	.word	0x00015714

00013070 <CGPIOManager::InterruptHandler()>:
   13070:	e5d03004 	ldrb	r3, [r0, #4]
   13074:	e92d4070 	push	{r4, r5, r6, lr}
   13078:	e3530000 	cmp	r3, #0
   1307c:	e1a05000 	mov	r5, r0
   13080:	0a00001b 	beq	130f4 <CGPIOManager::InterruptHandler()+0x84>
   13084:	e3a04000 	mov	r4, #0
   13088:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   1308c:	e59f2080 	ldr	r2, [pc, #128]	; 13114 <CGPIOManager::InterruptHandler()+0xa4>
   13090:	e5923040 	ldr	r3, [r2, #64]	; 0x40
   13094:	ea000005 	b	130b0 <CGPIOManager::InterruptHandler()+0x40>
   13098:	e2844001 	add	r4, r4, #1
   1309c:	e314001f 	tst	r4, #31
   130a0:	11a030a3 	lsrne	r3, r3, #1
   130a4:	05923044 	ldreq	r3, [r2, #68]	; 0x44
   130a8:	e3540036 	cmp	r4, #54	; 0x36
   130ac:	0a00000d 	beq	130e8 <CGPIOManager::InterruptHandler()+0x78>
   130b0:	e3130001 	tst	r3, #1
   130b4:	0afffff7 	beq	13098 <CGPIOManager::InterruptHandler()+0x28>
   130b8:	e3a03001 	mov	r3, #1
   130bc:	e2842002 	add	r2, r4, #2
   130c0:	e7950102 	ldr	r0, [r5, r2, lsl #2]
   130c4:	e204501f 	and	r5, r4, #31
   130c8:	e3500000 	cmp	r0, #0
   130cc:	e1a05513 	lsl	r5, r3, r5
   130d0:	0a00000c 	beq	13108 <CGPIOManager::InterruptHandler()+0x98>
   130d4:	ebffe1ca 	bl	b804 <CGPIOPin::InterruptHandler()>
   130d8:	e59f3038 	ldr	r3, [pc, #56]	; 13118 <CGPIOManager::InterruptHandler()+0xa8>
   130dc:	e08342a4 	add	r4, r3, r4, lsr #5
   130e0:	e1a04104 	lsl	r4, r4, #2
   130e4:	e5845000 	str	r5, [r4]
   130e8:	e3a03000 	mov	r3, #0
   130ec:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   130f0:	e8bd8070 	pop	{r4, r5, r6, pc}
   130f4:	e3a0205e 	mov	r2, #94	; 0x5e
   130f8:	e59f101c 	ldr	r1, [pc, #28]	; 1311c <CGPIOManager::InterruptHandler()+0xac>
   130fc:	e59f001c 	ldr	r0, [pc, #28]	; 13120 <CGPIOManager::InterruptHandler()+0xb0>
   13100:	ebfffce3 	bl	12494 <assertion_failed>
   13104:	eaffffde 	b	13084 <CGPIOManager::InterruptHandler()+0x14>
   13108:	e1a00004 	mov	r0, r4
   1310c:	ebffe1e9 	bl	b8b8 <CGPIOPin::DisableAllInterrupts(unsigned int)>
   13110:	eafffff0 	b	130d8 <CGPIOManager::InterruptHandler()+0x68>
   13114:	20200000 	.word	0x20200000
   13118:	08080010 	.word	0x08080010
   1311c:	000156b8 	.word	0x000156b8
   13120:	00015704 	.word	0x00015704

00013124 <CGPIOManager::InterruptStub(void*)>:
   13124:	e92d4010 	push	{r4, lr}
   13128:	e2504000 	subs	r4, r0, #0
   1312c:	0a000002 	beq	1313c <CGPIOManager::InterruptStub(void*)+0x18>
   13130:	e1a00004 	mov	r0, r4
   13134:	e8bd4010 	pop	{r4, lr}
   13138:	eaffffcc 	b	13070 <CGPIOManager::InterruptHandler()>
   1313c:	e59f0014 	ldr	r0, [pc, #20]	; 13158 <CGPIOManager::InterruptStub(void*)+0x34>
   13140:	e3a0208a 	mov	r2, #138	; 0x8a
   13144:	e59f1010 	ldr	r1, [pc, #16]	; 1315c <CGPIOManager::InterruptStub(void*)+0x38>
   13148:	ebfffcd1 	bl	12494 <assertion_failed>
   1314c:	e1a00004 	mov	r0, r4
   13150:	e8bd4010 	pop	{r4, lr}
   13154:	eaffffc5 	b	13070 <CGPIOManager::InterruptHandler()>
   13158:	00015734 	.word	0x00015734
   1315c:	000156b8 	.word	0x000156b8

00013160 <CPtrList::CPtrList()>:
   13160:	e3a02000 	mov	r2, #0
   13164:	e5802000 	str	r2, [r0]
   13168:	e12fff1e 	bx	lr

0001316c <CPtrList::~CPtrList()>:
   1316c:	e5903000 	ldr	r3, [r0]
   13170:	e92d4010 	push	{r4, lr}
   13174:	e3530000 	cmp	r3, #0
   13178:	e1a04000 	mov	r4, r0
   1317c:	0a000003 	beq	13190 <CPtrList::~CPtrList()+0x24>
   13180:	e3a0202a 	mov	r2, #42	; 0x2a
   13184:	e59f100c 	ldr	r1, [pc, #12]	; 13198 <CPtrList::~CPtrList()+0x2c>
   13188:	e59f000c 	ldr	r0, [pc, #12]	; 1319c <CPtrList::~CPtrList()+0x30>
   1318c:	ebfffcc0 	bl	12494 <assertion_failed>
   13190:	e1a00004 	mov	r0, r4
   13194:	e8bd8010 	pop	{r4, pc}
   13198:	00015740 	.word	0x00015740
   1319c:	0001574c 	.word	0x0001574c

000131a0 <CPtrList::GetFirst()>:
   131a0:	e5900000 	ldr	r0, [r0]
   131a4:	e12fff1e 	bx	lr

000131a8 <CPtrList::GetNext(TPtrListElement*)>:
   131a8:	e92d4010 	push	{r4, lr}
   131ac:	e2514000 	subs	r4, r1, #0
   131b0:	0a000009 	beq	131dc <CPtrList::GetNext(TPtrListElement*)+0x34>
   131b4:	e59f3034 	ldr	r3, [pc, #52]	; 131f0 <CPtrList::GetNext(TPtrListElement*)+0x48>
   131b8:	e5942000 	ldr	r2, [r4]
   131bc:	e1520003 	cmp	r2, r3
   131c0:	0a000003 	beq	131d4 <CPtrList::GetNext(TPtrListElement*)+0x2c>
   131c4:	e3a02035 	mov	r2, #53	; 0x35
   131c8:	e59f1024 	ldr	r1, [pc, #36]	; 131f4 <CPtrList::GetNext(TPtrListElement*)+0x4c>
   131cc:	e59f0024 	ldr	r0, [pc, #36]	; 131f8 <CPtrList::GetNext(TPtrListElement*)+0x50>
   131d0:	ebfffcaf 	bl	12494 <assertion_failed>
   131d4:	e5940008 	ldr	r0, [r4, #8]
   131d8:	e8bd8010 	pop	{r4, pc}
   131dc:	e3a02034 	mov	r2, #52	; 0x34
   131e0:	e59f100c 	ldr	r1, [pc, #12]	; 131f4 <CPtrList::GetNext(TPtrListElement*)+0x4c>
   131e4:	e59f0010 	ldr	r0, [pc, #16]	; 131fc <CPtrList::GetNext(TPtrListElement*)+0x54>
   131e8:	ebfffca9 	bl	12494 <assertion_failed>
   131ec:	eafffff0 	b	131b4 <CPtrList::GetNext(TPtrListElement*)+0xc>
   131f0:	504c4d43 	.word	0x504c4d43
   131f4:	00015740 	.word	0x00015740
   131f8:	0001576c 	.word	0x0001576c
   131fc:	0001575c 	.word	0x0001575c

00013200 <CPtrList::GetPtr(TPtrListElement*)>:
   13200:	e92d4010 	push	{r4, lr}
   13204:	e2514000 	subs	r4, r1, #0
   13208:	0a000009 	beq	13234 <CPtrList::GetPtr(TPtrListElement*)+0x34>
   1320c:	e59f3034 	ldr	r3, [pc, #52]	; 13248 <CPtrList::GetPtr(TPtrListElement*)+0x48>
   13210:	e5942000 	ldr	r2, [r4]
   13214:	e1520003 	cmp	r2, r3
   13218:	0a000003 	beq	1322c <CPtrList::GetPtr(TPtrListElement*)+0x2c>
   1321c:	e3a0203d 	mov	r2, #61	; 0x3d
   13220:	e59f1024 	ldr	r1, [pc, #36]	; 1324c <CPtrList::GetPtr(TPtrListElement*)+0x4c>
   13224:	e59f0024 	ldr	r0, [pc, #36]	; 13250 <CPtrList::GetPtr(TPtrListElement*)+0x50>
   13228:	ebfffc99 	bl	12494 <assertion_failed>
   1322c:	e594000c 	ldr	r0, [r4, #12]
   13230:	e8bd8010 	pop	{r4, pc}
   13234:	e3a0203c 	mov	r2, #60	; 0x3c
   13238:	e59f100c 	ldr	r1, [pc, #12]	; 1324c <CPtrList::GetPtr(TPtrListElement*)+0x4c>
   1323c:	e59f0010 	ldr	r0, [pc, #16]	; 13254 <CPtrList::GetPtr(TPtrListElement*)+0x54>
   13240:	ebfffc93 	bl	12494 <assertion_failed>
   13244:	eafffff0 	b	1320c <CPtrList::GetPtr(TPtrListElement*)+0xc>
   13248:	504c4d43 	.word	0x504c4d43
   1324c:	00015740 	.word	0x00015740
   13250:	0001576c 	.word	0x0001576c
   13254:	0001575c 	.word	0x0001575c

00013258 <CPtrList::InsertBefore(TPtrListElement*, void*)>:
   13258:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1325c:	e1a06000 	mov	r6, r0
   13260:	e3a00010 	mov	r0, #16
   13264:	e1a07002 	mov	r7, r2
   13268:	e1a04001 	mov	r4, r1
   1326c:	ebfffafa 	bl	11e5c <operator new(unsigned int)>
   13270:	e5962000 	ldr	r2, [r6]
   13274:	e59f30c8 	ldr	r3, [pc, #200]	; 13344 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xec>
   13278:	e3520000 	cmp	r2, #0
   1327c:	e1a05000 	mov	r5, r0
   13280:	e580700c 	str	r7, [r0, #12]
   13284:	e5803000 	str	r3, [r0]
   13288:	0a000023 	beq	1331c <CPtrList::InsertBefore(TPtrListElement*, void*)+0xc4>
   1328c:	e3540000 	cmp	r4, #0
   13290:	0a000026 	beq	13330 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd8>
   13294:	e59f30a8 	ldr	r3, [pc, #168]	; 13344 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xec>
   13298:	e5942000 	ldr	r2, [r4]
   1329c:	e1520003 	cmp	r2, r3
   132a0:	0a000003 	beq	132b4 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x5c>
   132a4:	e3a0204e 	mov	r2, #78	; 0x4e
   132a8:	e59f1098 	ldr	r1, [pc, #152]	; 13348 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf0>
   132ac:	e59f0098 	ldr	r0, [pc, #152]	; 1334c <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf4>
   132b0:	ebfffc77 	bl	12494 <assertion_failed>
   132b4:	e5963000 	ldr	r3, [r6]
   132b8:	e1540003 	cmp	r4, r3
   132bc:	0a000010 	beq	13304 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xac>
   132c0:	e5943004 	ldr	r3, [r4, #4]
   132c4:	e5854008 	str	r4, [r5, #8]
   132c8:	e3530000 	cmp	r3, #0
   132cc:	e5853004 	str	r3, [r5, #4]
   132d0:	0a000009 	beq	132fc <CPtrList::InsertBefore(TPtrListElement*, void*)+0xa4>
   132d4:	e59f2068 	ldr	r2, [pc, #104]	; 13344 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xec>
   132d8:	e5931000 	ldr	r1, [r3]
   132dc:	e1510002 	cmp	r1, r2
   132e0:	0a000004 	beq	132f8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xa0>
   132e4:	e3a02060 	mov	r2, #96	; 0x60
   132e8:	e59f1058 	ldr	r1, [pc, #88]	; 13348 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf0>
   132ec:	e59f005c 	ldr	r0, [pc, #92]	; 13350 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf8>
   132f0:	ebfffc67 	bl	12494 <assertion_failed>
   132f4:	e5943004 	ldr	r3, [r4, #4]
   132f8:	e5835008 	str	r5, [r3, #8]
   132fc:	e5845004 	str	r5, [r4, #4]
   13300:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   13304:	e3a03000 	mov	r3, #0
   13308:	e5845004 	str	r5, [r4, #4]
   1330c:	e5854008 	str	r4, [r5, #8]
   13310:	e5865000 	str	r5, [r6]
   13314:	e5853004 	str	r3, [r5, #4]
   13318:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1331c:	e3a0204c 	mov	r2, #76	; 0x4c
   13320:	e59f1020 	ldr	r1, [pc, #32]	; 13348 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf0>
   13324:	e59f0028 	ldr	r0, [pc, #40]	; 13354 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xfc>
   13328:	ebfffc59 	bl	12494 <assertion_failed>
   1332c:	eaffffd6 	b	1328c <CPtrList::InsertBefore(TPtrListElement*, void*)+0x34>
   13330:	e3a0204d 	mov	r2, #77	; 0x4d
   13334:	e59f100c 	ldr	r1, [pc, #12]	; 13348 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf0>
   13338:	e59f0018 	ldr	r0, [pc, #24]	; 13358 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x100>
   1333c:	ebfffc54 	bl	12494 <assertion_failed>
   13340:	eaffffd3 	b	13294 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x3c>
   13344:	504c4d43 	.word	0x504c4d43
   13348:	00015740 	.word	0x00015740
   1334c:	000157ac 	.word	0x000157ac
   13350:	000157d0 	.word	0x000157d0
   13354:	00015790 	.word	0x00015790
   13358:	000157a0 	.word	0x000157a0

0001335c <CPtrList::InsertAfter(TPtrListElement*, void*)>:
   1335c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   13360:	e1a06000 	mov	r6, r0
   13364:	e1a05001 	mov	r5, r1
   13368:	e3a00010 	mov	r0, #16
   1336c:	e1a07002 	mov	r7, r2
   13370:	ebfffab9 	bl	11e5c <operator new(unsigned int)>
   13374:	e59f30c0 	ldr	r3, [pc, #192]	; 1343c <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe0>
   13378:	e3550000 	cmp	r5, #0
   1337c:	e5803000 	str	r3, [r0]
   13380:	e1a04000 	mov	r4, r0
   13384:	e580700c 	str	r7, [r0, #12]
   13388:	e5963000 	ldr	r3, [r6]
   1338c:	0a00001a 	beq	133fc <CPtrList::InsertAfter(TPtrListElement*, void*)+0xa0>
   13390:	e3530000 	cmp	r3, #0
   13394:	0a000023 	beq	13428 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xcc>
   13398:	e59f309c 	ldr	r3, [pc, #156]	; 1343c <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe0>
   1339c:	e5952000 	ldr	r2, [r5]
   133a0:	e1520003 	cmp	r2, r3
   133a4:	0a000003 	beq	133b8 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x5c>
   133a8:	e3a0207e 	mov	r2, #126	; 0x7e
   133ac:	e59f108c 	ldr	r1, [pc, #140]	; 13440 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe4>
   133b0:	e59f008c 	ldr	r0, [pc, #140]	; 13444 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe8>
   133b4:	ebfffc36 	bl	12494 <assertion_failed>
   133b8:	e5953008 	ldr	r3, [r5, #8]
   133bc:	e5845004 	str	r5, [r4, #4]
   133c0:	e3530000 	cmp	r3, #0
   133c4:	e5843008 	str	r3, [r4, #8]
   133c8:	0a000009 	beq	133f4 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x98>
   133cc:	e59f2068 	ldr	r2, [pc, #104]	; 1343c <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe0>
   133d0:	e5931000 	ldr	r1, [r3]
   133d4:	e1510002 	cmp	r1, r2
   133d8:	0a000004 	beq	133f0 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x94>
   133dc:	e3a02085 	mov	r2, #133	; 0x85
   133e0:	e59f1058 	ldr	r1, [pc, #88]	; 13440 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe4>
   133e4:	e59f005c 	ldr	r0, [pc, #92]	; 13448 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xec>
   133e8:	ebfffc29 	bl	12494 <assertion_failed>
   133ec:	e5953008 	ldr	r3, [r5, #8]
   133f0:	e5834004 	str	r4, [r3, #4]
   133f4:	e5854008 	str	r4, [r5, #8]
   133f8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   133fc:	e3530000 	cmp	r3, #0
   13400:	0a000003 	beq	13414 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xb8>
   13404:	e3a02074 	mov	r2, #116	; 0x74
   13408:	e59f1030 	ldr	r1, [pc, #48]	; 13440 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe4>
   1340c:	e59f0038 	ldr	r0, [pc, #56]	; 1344c <CPtrList::InsertAfter(TPtrListElement*, void*)+0xf0>
   13410:	ebfffc1f 	bl	12494 <assertion_failed>
   13414:	e3a03000 	mov	r3, #0
   13418:	e5864000 	str	r4, [r6]
   1341c:	e5843004 	str	r3, [r4, #4]
   13420:	e5843008 	str	r3, [r4, #8]
   13424:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   13428:	e3a0207d 	mov	r2, #125	; 0x7d
   1342c:	e59f100c 	ldr	r1, [pc, #12]	; 13440 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe4>
   13430:	e59f0018 	ldr	r0, [pc, #24]	; 13450 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xf4>
   13434:	ebfffc16 	bl	12494 <assertion_failed>
   13438:	eaffffd6 	b	13398 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x3c>
   1343c:	504c4d43 	.word	0x504c4d43
   13440:	00015740 	.word	0x00015740
   13444:	000157f8 	.word	0x000157f8
   13448:	0001581c 	.word	0x0001581c
   1344c:	0001574c 	.word	0x0001574c
   13450:	00015790 	.word	0x00015790

00013454 <CPtrList::Remove(TPtrListElement*)>:
   13454:	e92d4070 	push	{r4, r5, r6, lr}
   13458:	e2514000 	subs	r4, r1, #0
   1345c:	e1a05000 	mov	r5, r0
   13460:	0a00003c 	beq	13558 <CPtrList::Remove(TPtrListElement*)+0x104>
   13464:	e59f3118 	ldr	r3, [pc, #280]	; 13584 <CPtrList::Remove(TPtrListElement*)+0x130>
   13468:	e5942000 	ldr	r2, [r4]
   1346c:	e1520003 	cmp	r2, r3
   13470:	0a000003 	beq	13484 <CPtrList::Remove(TPtrListElement*)+0x30>
   13474:	e3a02090 	mov	r2, #144	; 0x90
   13478:	e59f1108 	ldr	r1, [pc, #264]	; 13588 <CPtrList::Remove(TPtrListElement*)+0x134>
   1347c:	e59f0108 	ldr	r0, [pc, #264]	; 1358c <CPtrList::Remove(TPtrListElement*)+0x138>
   13480:	ebfffc03 	bl	12494 <assertion_failed>
   13484:	e5953000 	ldr	r3, [r5]
   13488:	e1540003 	cmp	r4, r3
   1348c:	0a000021 	beq	13518 <CPtrList::Remove(TPtrListElement*)+0xc4>
   13490:	e5943004 	ldr	r3, [r4, #4]
   13494:	e3530000 	cmp	r3, #0
   13498:	0a000033 	beq	1356c <CPtrList::Remove(TPtrListElement*)+0x118>
   1349c:	e59f20e0 	ldr	r2, [pc, #224]	; 13584 <CPtrList::Remove(TPtrListElement*)+0x130>
   134a0:	e5931000 	ldr	r1, [r3]
   134a4:	e1510002 	cmp	r1, r2
   134a8:	0a000004 	beq	134c0 <CPtrList::Remove(TPtrListElement*)+0x6c>
   134ac:	e3a0209f 	mov	r2, #159	; 0x9f
   134b0:	e59f10d0 	ldr	r1, [pc, #208]	; 13588 <CPtrList::Remove(TPtrListElement*)+0x134>
   134b4:	e59f00d4 	ldr	r0, [pc, #212]	; 13590 <CPtrList::Remove(TPtrListElement*)+0x13c>
   134b8:	ebfffbf5 	bl	12494 <assertion_failed>
   134bc:	e5943004 	ldr	r3, [r4, #4]
   134c0:	e5942008 	ldr	r2, [r4, #8]
   134c4:	e5832008 	str	r2, [r3, #8]
   134c8:	e5942008 	ldr	r2, [r4, #8]
   134cc:	e3520000 	cmp	r2, #0
   134d0:	0a00000a 	beq	13500 <CPtrList::Remove(TPtrListElement*)+0xac>
   134d4:	e59f10a8 	ldr	r1, [pc, #168]	; 13584 <CPtrList::Remove(TPtrListElement*)+0x130>
   134d8:	e5920000 	ldr	r0, [r2]
   134dc:	e1500001 	cmp	r0, r1
   134e0:	0a000005 	beq	134fc <CPtrList::Remove(TPtrListElement*)+0xa8>
   134e4:	e3a020a4 	mov	r2, #164	; 0xa4
   134e8:	e59f1098 	ldr	r1, [pc, #152]	; 13588 <CPtrList::Remove(TPtrListElement*)+0x134>
   134ec:	e59f00a0 	ldr	r0, [pc, #160]	; 13594 <CPtrList::Remove(TPtrListElement*)+0x140>
   134f0:	ebfffbe7 	bl	12494 <assertion_failed>
   134f4:	e5942008 	ldr	r2, [r4, #8]
   134f8:	e5943004 	ldr	r3, [r4, #4]
   134fc:	e5823004 	str	r3, [r2, #4]
   13500:	e3a03000 	mov	r3, #0
   13504:	e1a00004 	mov	r0, r4
   13508:	e5843000 	str	r3, [r4]
   1350c:	e3a01010 	mov	r1, #16
   13510:	e8bd4070 	pop	{r4, r5, r6, lr}
   13514:	eafffa54 	b	11e6c <operator delete(void*, unsigned int)>
   13518:	e5943008 	ldr	r3, [r4, #8]
   1351c:	e3530000 	cmp	r3, #0
   13520:	e5853000 	str	r3, [r5]
   13524:	0afffff5 	beq	13500 <CPtrList::Remove(TPtrListElement*)+0xac>
   13528:	e59f2054 	ldr	r2, [pc, #84]	; 13584 <CPtrList::Remove(TPtrListElement*)+0x130>
   1352c:	e5931000 	ldr	r1, [r3]
   13530:	e1510002 	cmp	r1, r2
   13534:	0a000004 	beq	1354c <CPtrList::Remove(TPtrListElement*)+0xf8>
   13538:	e3a02098 	mov	r2, #152	; 0x98
   1353c:	e59f1044 	ldr	r1, [pc, #68]	; 13588 <CPtrList::Remove(TPtrListElement*)+0x134>
   13540:	e59f004c 	ldr	r0, [pc, #76]	; 13594 <CPtrList::Remove(TPtrListElement*)+0x140>
   13544:	ebfffbd2 	bl	12494 <assertion_failed>
   13548:	e5943008 	ldr	r3, [r4, #8]
   1354c:	e3a02000 	mov	r2, #0
   13550:	e5832004 	str	r2, [r3, #4]
   13554:	eaffffe9 	b	13500 <CPtrList::Remove(TPtrListElement*)+0xac>
   13558:	e3a0208f 	mov	r2, #143	; 0x8f
   1355c:	e59f1024 	ldr	r1, [pc, #36]	; 13588 <CPtrList::Remove(TPtrListElement*)+0x134>
   13560:	e59f0030 	ldr	r0, [pc, #48]	; 13598 <CPtrList::Remove(TPtrListElement*)+0x144>
   13564:	ebfffbca 	bl	12494 <assertion_failed>
   13568:	eaffffbd 	b	13464 <CPtrList::Remove(TPtrListElement*)+0x10>
   1356c:	e3a0209e 	mov	r2, #158	; 0x9e
   13570:	e59f1010 	ldr	r1, [pc, #16]	; 13588 <CPtrList::Remove(TPtrListElement*)+0x134>
   13574:	e59f0020 	ldr	r0, [pc, #32]	; 1359c <CPtrList::Remove(TPtrListElement*)+0x148>
   13578:	ebfffbc5 	bl	12494 <assertion_failed>
   1357c:	e5943004 	ldr	r3, [r4, #4]
   13580:	eaffffc5 	b	1349c <CPtrList::Remove(TPtrListElement*)+0x48>
   13584:	504c4d43 	.word	0x504c4d43
   13588:	00015740 	.word	0x00015740
   1358c:	0001576c 	.word	0x0001576c
   13590:	0001588c 	.word	0x0001588c
   13594:	00015848 	.word	0x00015848
   13598:	0001575c 	.word	0x0001575c
   1359c:	00015874 	.word	0x00015874

000135a0 <CPtrList::Find(void*)>:
   135a0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   135a4:	e5904000 	ldr	r4, [r0]
   135a8:	e3540000 	cmp	r4, #0
   135ac:	0a000014 	beq	13604 <CPtrList::Find(void*)+0x64>
   135b0:	e1a05001 	mov	r5, r1
   135b4:	e3a090b3 	mov	r9, #179	; 0xb3
   135b8:	e59f6050 	ldr	r6, [pc, #80]	; 13610 <CPtrList::Find(void*)+0x70>
   135bc:	e59f8050 	ldr	r8, [pc, #80]	; 13614 <CPtrList::Find(void*)+0x74>
   135c0:	e59f7050 	ldr	r7, [pc, #80]	; 13618 <CPtrList::Find(void*)+0x78>
   135c4:	ea000002 	b	135d4 <CPtrList::Find(void*)+0x34>
   135c8:	e5944008 	ldr	r4, [r4, #8]
   135cc:	e3540000 	cmp	r4, #0
   135d0:	0a00000b 	beq	13604 <CPtrList::Find(void*)+0x64>
   135d4:	e5943000 	ldr	r3, [r4]
   135d8:	e1530006 	cmp	r3, r6
   135dc:	0a000003 	beq	135f0 <CPtrList::Find(void*)+0x50>
   135e0:	e1a02009 	mov	r2, r9
   135e4:	e1a01008 	mov	r1, r8
   135e8:	e1a00007 	mov	r0, r7
   135ec:	ebfffba8 	bl	12494 <assertion_failed>
   135f0:	e594300c 	ldr	r3, [r4, #12]
   135f4:	e1530005 	cmp	r3, r5
   135f8:	1afffff2 	bne	135c8 <CPtrList::Find(void*)+0x28>
   135fc:	e1a00004 	mov	r0, r4
   13600:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13604:	e3a04000 	mov	r4, #0
   13608:	e1a00004 	mov	r0, r4
   1360c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13610:	504c4d43 	.word	0x504c4d43
   13614:	00015740 	.word	0x00015740
   13618:	0001576c 	.word	0x0001576c

0001361c <CExceptionHandler::CExceptionHandler()>:
   1361c:	e92d4070 	push	{r4, r5, r6, lr}
   13620:	e59f506c 	ldr	r5, [pc, #108]	; 13694 <CExceptionHandler::CExceptionHandler()+0x78>
   13624:	e1a04000 	mov	r4, r0
   13628:	e5953000 	ldr	r3, [r5]
   1362c:	e3530000 	cmp	r3, #0
   13630:	0a000003 	beq	13644 <CExceptionHandler::CExceptionHandler()+0x28>
   13634:	e3a02030 	mov	r2, #48	; 0x30
   13638:	e59f1058 	ldr	r1, [pc, #88]	; 13698 <CExceptionHandler::CExceptionHandler()+0x7c>
   1363c:	e59f0058 	ldr	r0, [pc, #88]	; 1369c <CExceptionHandler::CExceptionHandler()+0x80>
   13640:	ebfffb93 	bl	12494 <assertion_failed>
   13644:	e3a00000 	mov	r0, #0
   13648:	e59f1050 	ldr	r1, [pc, #80]	; 136a0 <CExceptionHandler::CExceptionHandler()+0x84>
   1364c:	e59f2050 	ldr	r2, [pc, #80]	; 136a4 <CExceptionHandler::CExceptionHandler()+0x88>
   13650:	e59f3050 	ldr	r3, [pc, #80]	; 136a8 <CExceptionHandler::CExceptionHandler()+0x8c>
   13654:	e1a01141 	asr	r1, r1, #2
   13658:	e1a02142 	asr	r2, r2, #2
   1365c:	e1a03143 	asr	r3, r3, #2
   13660:	e2411002 	sub	r1, r1, #2
   13664:	e2422002 	sub	r2, r2, #2
   13668:	e2433002 	sub	r3, r3, #2
   1366c:	e38114ea 	orr	r1, r1, #-369098752	; 0xea000000
   13670:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
   13674:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
   13678:	e5854000 	str	r4, [r5]
   1367c:	e5801004 	str	r1, [r0, #4]
   13680:	e580200c 	str	r2, [r0, #12]
   13684:	e5803010 	str	r3, [r0, #16]
   13688:	ebfff9eb 	bl	11e3c <SyncDataAndInstructionCache>
   1368c:	e1a00004 	mov	r0, r4
   13690:	e8bd8070 	pop	{r4, r5, r6, pc}
   13694:	00015b38 	.word	0x00015b38
   13698:	000158c0 	.word	0x000158c0
   1369c:	00014444 	.word	0x00014444
   136a0:	000118c8 	.word	0x000118c8
   136a4:	00011828 	.word	0x00011828
   136a8:	00011870 	.word	0x00011870

000136ac <CExceptionHandler::~CExceptionHandler()>:
   136ac:	e3a02000 	mov	r2, #0
   136b0:	e59f3004 	ldr	r3, [pc, #4]	; 136bc <CExceptionHandler::~CExceptionHandler()+0x10>
   136b4:	e5832000 	str	r2, [r3]
   136b8:	e12fff1e 	bx	lr
   136bc:	00015b38 	.word	0x00015b38

000136c0 <CExceptionHandler::Throw(unsigned int)>:
   136c0:	e92d4010 	push	{r4, lr}
   136c4:	e1a04001 	mov	r4, r1
   136c8:	e24dd008 	sub	sp, sp, #8
   136cc:	ebffe3b3 	bl	c5a0 <CLogger::Get()>
   136d0:	e59f201c 	ldr	r2, [pc, #28]	; 136f4 <CExceptionHandler::Throw(unsigned int)+0x34>
   136d4:	e59f301c 	ldr	r3, [pc, #28]	; 136f8 <CExceptionHandler::Throw(unsigned int)+0x38>
   136d8:	e7921104 	ldr	r1, [r2, r4, lsl #2]
   136dc:	e3a02000 	mov	r2, #0
   136e0:	e58d1000 	str	r1, [sp]
   136e4:	e59f1010 	ldr	r1, [pc, #16]	; 136fc <CExceptionHandler::Throw(unsigned int)+0x3c>
   136e8:	ebffe555 	bl	cc44 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   136ec:	e28dd008 	add	sp, sp, #8
   136f0:	e8bd8010 	pop	{r4, pc}
   136f4:	00015a7c 	.word	0x00015a7c
   136f8:	000158d8 	.word	0x000158d8
   136fc:	000158b8 	.word	0x000158b8

00013700 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>:
   13700:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   13704:	e3510002 	cmp	r1, #2
   13708:	e24dd024 	sub	sp, sp, #36	; 0x24
   1370c:	e1a05001 	mov	r5, r1
   13710:	e1a04002 	mov	r4, r2
   13714:	0a000028 	beq	137bc <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xbc>
   13718:	e3510003 	cmp	r1, #3
   1371c:	0a000020 	beq	137a4 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xa4>
   13720:	e3a08000 	mov	r8, #0
   13724:	e1a09008 	mov	r9, r8
   13728:	e3540000 	cmp	r4, #0
   1372c:	0a000025 	beq	137c8 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xc8>
   13730:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   13734:	e5947048 	ldr	r7, [r4, #72]	; 0x48
   13738:	e203301f 	and	r3, r3, #31
   1373c:	e3530011 	cmp	r3, #17
   13740:	e5946044 	ldr	r6, [r4, #68]	; 0x44
   13744:	0a000019 	beq	137b0 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xb0>
   13748:	e3530012 	cmp	r3, #18
   1374c:	089400c0 	ldmeq	r4, {r6, r7}
   13750:	e59f1084 	ldr	r1, [pc, #132]	; 137dc <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xdc>
   13754:	e1a00006 	mov	r0, r6
   13758:	ebfffd63 	bl	12cec <debug_stacktrace(unsigned int const*, char const*)>
   1375c:	ebffe38f 	bl	c5a0 <CLogger::Get()>
   13760:	e59f3078 	ldr	r3, [pc, #120]	; 137e0 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe0>
   13764:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
   13768:	e7931105 	ldr	r1, [r3, r5, lsl #2]
   1376c:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   13770:	e58d1000 	str	r1, [sp]
   13774:	e58d2018 	str	r2, [sp, #24]
   13778:	e58d3004 	str	r3, [sp, #4]
   1377c:	e58d7014 	str	r7, [sp, #20]
   13780:	e58d6010 	str	r6, [sp, #16]
   13784:	e58d800c 	str	r8, [sp, #12]
   13788:	e58d9008 	str	r9, [sp, #8]
   1378c:	e59f3050 	ldr	r3, [pc, #80]	; 137e4 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe4>
   13790:	e3a02000 	mov	r2, #0
   13794:	e59f1040 	ldr	r1, [pc, #64]	; 137dc <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xdc>
   13798:	ebffe529 	bl	cc44 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1379c:	e28dd024 	add	sp, sp, #36	; 0x24
   137a0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   137a4:	ee159f10 	mrc	15, 0, r9, cr5, cr0, {0}
   137a8:	ee168f10 	mrc	15, 0, r8, cr6, cr0, {0}
   137ac:	eaffffdd 	b	13728 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x28>
   137b0:	e594700c 	ldr	r7, [r4, #12]
   137b4:	e5946008 	ldr	r6, [r4, #8]
   137b8:	eaffffe4 	b	13750 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x50>
   137bc:	ee159f30 	mrc	15, 0, r9, cr5, cr0, {1}
   137c0:	ee168f50 	mrc	15, 0, r8, cr6, cr0, {2}
   137c4:	eaffffd7 	b	13728 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x28>
   137c8:	e3a02069 	mov	r2, #105	; 0x69
   137cc:	e59f1014 	ldr	r1, [pc, #20]	; 137e8 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe8>
   137d0:	e59f0014 	ldr	r0, [pc, #20]	; 137ec <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xec>
   137d4:	ebfffb2e 	bl	12494 <assertion_failed>
   137d8:	eaffffd4 	b	13730 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x30>
   137dc:	000158b8 	.word	0x000158b8
   137e0:	00015a7c 	.word	0x00015a7c
   137e4:	000158f4 	.word	0x000158f4
   137e8:	000158c0 	.word	0x000158c0
   137ec:	000158e8 	.word	0x000158e8

000137f0 <CExceptionHandler::Get()>:
   137f0:	e92d4010 	push	{r4, lr}
   137f4:	e59f4020 	ldr	r4, [pc, #32]	; 1381c <CExceptionHandler::Get()+0x2c>
   137f8:	e5940000 	ldr	r0, [r4]
   137fc:	e3500000 	cmp	r0, #0
   13800:	18bd8010 	popne	{r4, pc}
   13804:	e3a02087 	mov	r2, #135	; 0x87
   13808:	e59f1010 	ldr	r1, [pc, #16]	; 13820 <CExceptionHandler::Get()+0x30>
   1380c:	e59f0010 	ldr	r0, [pc, #16]	; 13824 <CExceptionHandler::Get()+0x34>
   13810:	ebfffb1f 	bl	12494 <assertion_failed>
   13814:	e5940000 	ldr	r0, [r4]
   13818:	e8bd8010 	pop	{r4, pc}
   1381c:	00015b38 	.word	0x00015b38
   13820:	000158c0 	.word	0x000158c0
   13824:	00013ec4 	.word	0x00013ec4

00013828 <ExceptionHandler>:
   13828:	e92d4070 	push	{r4, r5, r6, lr}
   1382c:	e3a03000 	mov	r3, #0
   13830:	e1a05000 	mov	r5, r0
   13834:	e1a06001 	mov	r6, r1
   13838:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   1383c:	ebffe160 	bl	bdc4 <CInterruptSystem::DisableFIQ()>
   13840:	f1080040 	cpsie	f
   13844:	e59f403c 	ldr	r4, [pc, #60]	; 13888 <ExceptionHandler+0x60>
   13848:	e5940000 	ldr	r0, [r4]
   1384c:	e3500000 	cmp	r0, #0
   13850:	0a000003 	beq	13864 <ExceptionHandler+0x3c>
   13854:	e1a02006 	mov	r2, r6
   13858:	e1a01005 	mov	r1, r5
   1385c:	e8bd4070 	pop	{r4, r5, r6, lr}
   13860:	eaffffa6 	b	13700 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>
   13864:	e3a02087 	mov	r2, #135	; 0x87
   13868:	e59f101c 	ldr	r1, [pc, #28]	; 1388c <ExceptionHandler+0x64>
   1386c:	e59f001c 	ldr	r0, [pc, #28]	; 13890 <ExceptionHandler+0x68>
   13870:	ebfffb07 	bl	12494 <assertion_failed>
   13874:	e5940000 	ldr	r0, [r4]
   13878:	e1a02006 	mov	r2, r6
   1387c:	e1a01005 	mov	r1, r5
   13880:	e8bd4070 	pop	{r4, r5, r6, lr}
   13884:	eaffff9d 	b	13700 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>
   13888:	00015b38 	.word	0x00015b38
   1388c:	000158c0 	.word	0x000158c0
   13890:	00013ec4 	.word	0x00013ec4

00013894 <raise>:
   13894:	e92d4010 	push	{r4, lr}
   13898:	e59f4030 	ldr	r4, [pc, #48]	; 138d0 <raise+0x3c>
   1389c:	e5940000 	ldr	r0, [r4]
   138a0:	e3500000 	cmp	r0, #0
   138a4:	0a000003 	beq	138b8 <raise+0x24>
   138a8:	e3a01004 	mov	r1, #4
   138ac:	ebffff83 	bl	136c0 <CExceptionHandler::Throw(unsigned int)>
   138b0:	e3a00000 	mov	r0, #0
   138b4:	e8bd8010 	pop	{r4, pc}
   138b8:	e59f0014 	ldr	r0, [pc, #20]	; 138d4 <raise+0x40>
   138bc:	e3a02087 	mov	r2, #135	; 0x87
   138c0:	e59f1010 	ldr	r1, [pc, #16]	; 138d8 <raise+0x44>
   138c4:	ebfffaf2 	bl	12494 <assertion_failed>
   138c8:	e5940000 	ldr	r0, [r4]
   138cc:	eafffff5 	b	138a8 <raise+0x14>
   138d0:	00015b38 	.word	0x00015b38
   138d4:	00013ec4 	.word	0x00013ec4
   138d8:	000158c0 	.word	0x000158c0

000138dc <__aeabi_uidiv>:
   138dc:	e2512001 	subs	r2, r1, #1
   138e0:	012fff1e 	bxeq	lr
   138e4:	3a000036 	bcc	139c4 <__aeabi_uidiv+0xe8>
   138e8:	e1500001 	cmp	r0, r1
   138ec:	9a000022 	bls	1397c <__aeabi_uidiv+0xa0>
   138f0:	e1110002 	tst	r1, r2
   138f4:	0a000023 	beq	13988 <__aeabi_uidiv+0xac>
   138f8:	e311020e 	tst	r1, #-536870912	; 0xe0000000
   138fc:	01a01181 	lsleq	r1, r1, #3
   13900:	03a03008 	moveq	r3, #8
   13904:	13a03001 	movne	r3, #1
   13908:	e3510201 	cmp	r1, #268435456	; 0x10000000
   1390c:	31510000 	cmpcc	r1, r0
   13910:	31a01201 	lslcc	r1, r1, #4
   13914:	31a03203 	lslcc	r3, r3, #4
   13918:	3afffffa 	bcc	13908 <__aeabi_uidiv+0x2c>
   1391c:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
   13920:	31510000 	cmpcc	r1, r0
   13924:	31a01081 	lslcc	r1, r1, #1
   13928:	31a03083 	lslcc	r3, r3, #1
   1392c:	3afffffa 	bcc	1391c <__aeabi_uidiv+0x40>
   13930:	e3a02000 	mov	r2, #0
   13934:	e1500001 	cmp	r0, r1
   13938:	20400001 	subcs	r0, r0, r1
   1393c:	21822003 	orrcs	r2, r2, r3
   13940:	e15000a1 	cmp	r0, r1, lsr #1
   13944:	204000a1 	subcs	r0, r0, r1, lsr #1
   13948:	218220a3 	orrcs	r2, r2, r3, lsr #1
   1394c:	e1500121 	cmp	r0, r1, lsr #2
   13950:	20400121 	subcs	r0, r0, r1, lsr #2
   13954:	21822123 	orrcs	r2, r2, r3, lsr #2
   13958:	e15001a1 	cmp	r0, r1, lsr #3
   1395c:	204001a1 	subcs	r0, r0, r1, lsr #3
   13960:	218221a3 	orrcs	r2, r2, r3, lsr #3
   13964:	e3500000 	cmp	r0, #0
   13968:	11b03223 	lsrsne	r3, r3, #4
   1396c:	11a01221 	lsrne	r1, r1, #4
   13970:	1affffef 	bne	13934 <__aeabi_uidiv+0x58>
   13974:	e1a00002 	mov	r0, r2
   13978:	e12fff1e 	bx	lr
   1397c:	03a00001 	moveq	r0, #1
   13980:	13a00000 	movne	r0, #0
   13984:	e12fff1e 	bx	lr
   13988:	e3510801 	cmp	r1, #65536	; 0x10000
   1398c:	21a01821 	lsrcs	r1, r1, #16
   13990:	23a02010 	movcs	r2, #16
   13994:	33a02000 	movcc	r2, #0
   13998:	e3510c01 	cmp	r1, #256	; 0x100
   1399c:	21a01421 	lsrcs	r1, r1, #8
   139a0:	22822008 	addcs	r2, r2, #8
   139a4:	e3510010 	cmp	r1, #16
   139a8:	21a01221 	lsrcs	r1, r1, #4
   139ac:	22822004 	addcs	r2, r2, #4
   139b0:	e3510004 	cmp	r1, #4
   139b4:	82822003 	addhi	r2, r2, #3
   139b8:	908220a1 	addls	r2, r2, r1, lsr #1
   139bc:	e1a00230 	lsr	r0, r0, r2
   139c0:	e12fff1e 	bx	lr
   139c4:	e3500000 	cmp	r0, #0
   139c8:	13e00000 	mvnne	r0, #0
   139cc:	ea000007 	b	139f0 <__aeabi_idiv0>

000139d0 <__aeabi_uidivmod>:
   139d0:	e3510000 	cmp	r1, #0
   139d4:	0afffffa 	beq	139c4 <__aeabi_uidiv+0xe8>
   139d8:	e92d4003 	push	{r0, r1, lr}
   139dc:	ebffffbe 	bl	138dc <__aeabi_uidiv>
   139e0:	e8bd4006 	pop	{r1, r2, lr}
   139e4:	e0030092 	mul	r3, r2, r0
   139e8:	e0411003 	sub	r1, r1, r3
   139ec:	e12fff1e 	bx	lr

000139f0 <__aeabi_idiv0>:
   139f0:	e12fff1e 	bx	lr
