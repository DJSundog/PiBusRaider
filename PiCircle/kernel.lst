
kernel.elf:     file format elf32-littlearm


Disassembly of section .init:

00008000 <_start>:
    8000:	e10f0000 	mrs	r0, CPSR
    8004:	e220001a 	eor	r0, r0, #26
    8008:	e310001f 	tst	r0, #31
    800c:	e3c0001f 	bic	r0, r0, #31
    8010:	e38000d3 	orr	r0, r0, #211	; 0xd3
    8014:	1a000004 	bne	802c <_start+0x2c>
    8018:	e3800c01 	orr	r0, r0, #256	; 0x100
    801c:	e28fe00c 	add	lr, pc, #12
    8020:	e16ff000 	msr	SPSR_fsxc, r0
    8024:	e12ef30e 	.word	0xe12ef30e
    8028:	e160006e 	.word	0xe160006e
    802c:	e121f000 	msr	CPSR_c, r0
    8030:	e3a00000 	mov	r0, #0
    8034:	ee0c0f10 	mcr	15, 0, r0, cr12, cr0, {0}
    8038:	f1020011 	cps	#17
    803c:	e3a0d709 	mov	sp, #2359296	; 0x240000
    8040:	f1020012 	cps	#18
    8044:	e3a0d98e 	mov	sp, #2326528	; 0x238000
    8048:	f1020017 	cps	#23
    804c:	e3a0d823 	mov	sp, #2293760	; 0x230000
    8050:	f102001b 	cps	#27
    8054:	e3a0d823 	mov	sp, #2293760	; 0x230000
    8058:	f102001f 	cps	#31
    805c:	e3a0d98a 	mov	sp, #2260992	; 0x228000
    8060:	ea000db0 	b	b728 <sysinit>

Disassembly of section .text:

00008068 <main>:
    8068:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    806c:	e24dd01c 	sub	sp, sp, #28
    8070:	e1a0000d 	mov	r0, sp
    8074:	eb000011 	bl	80c0 <CKernel::CKernel()>
    8078:	e1a0000d 	mov	r0, sp
    807c:	eb000036 	bl	815c <CKernel::Initialize()>
    8080:	e3500000 	cmp	r0, #0
    8084:	0a000004 	beq	809c <main+0x34>
    8088:	e1a0000d 	mov	r0, sp
    808c:	eb00003b 	bl	8180 <CKernel::Run()>
    8090:	e3500002 	cmp	r0, #2
    8094:	1a000000 	bne	809c <main+0x34>
    8098:	eb000d97 	bl	b6fc <reboot>
    809c:	eb000d93 	bl	b6f0 <halt>

000080a0 <DoChangeMachine(char const*)>:
    80a0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    80a4:	e28db000 	add	fp, sp, #0
    80a8:	e24dd00c 	sub	sp, sp, #12
    80ac:	e50b0008 	str	r0, [fp, #-8]
    80b0:	e320f000 	nop	{0}
    80b4:	e28bd000 	add	sp, fp, #0
    80b8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    80bc:	e12fff1e 	bx	lr

000080c0 <CKernel::CKernel()>:
    80c0:	e92d4800 	push	{fp, lr}
    80c4:	e28db004 	add	fp, sp, #4
    80c8:	e24dd008 	sub	sp, sp, #8
    80cc:	e50b0008 	str	r0, [fp, #-8]
    80d0:	e51b3008 	ldr	r3, [fp, #-8]
    80d4:	e3a01001 	mov	r1, #1
    80d8:	e1a00003 	mov	r0, r3
    80dc:	eb0012ad 	bl	cb98 <CMemorySystem::CMemorySystem(bool)>
    80e0:	e51b3008 	ldr	r3, [fp, #-8]
    80e4:	e283300c 	add	r3, r3, #12
    80e8:	e1a00003 	mov	r0, r3
    80ec:	eb00069e 	bl	9b6c <CActLED::CActLED()>
    80f0:	e51b3008 	ldr	r3, [fp, #-8]
    80f4:	e2833018 	add	r3, r3, #24
    80f8:	e1a00003 	mov	r0, r3
    80fc:	eb000098 	bl	8364 <BusRaider::BusRaider()>
    8100:	e51b3008 	ldr	r3, [fp, #-8]
    8104:	e1a00003 	mov	r0, r3
    8108:	e24bd004 	sub	sp, fp, #4
    810c:	e8bd8800 	pop	{fp, pc}

00008110 <CKernel::~CKernel()>:
    8110:	e92d4800 	push	{fp, lr}
    8114:	e28db004 	add	fp, sp, #4
    8118:	e24dd008 	sub	sp, sp, #8
    811c:	e50b0008 	str	r0, [fp, #-8]
    8120:	e51b3008 	ldr	r3, [fp, #-8]
    8124:	e2833018 	add	r3, r3, #24
    8128:	e1a00003 	mov	r0, r3
    812c:	eb0000f0 	bl	84f4 <BusRaider::~BusRaider()>
    8130:	e51b3008 	ldr	r3, [fp, #-8]
    8134:	e283300c 	add	r3, r3, #12
    8138:	e1a00003 	mov	r0, r3
    813c:	eb00066b 	bl	9af0 <CActLED::~CActLED()>
    8140:	e51b3008 	ldr	r3, [fp, #-8]
    8144:	e1a00003 	mov	r0, r3
    8148:	eb00121e 	bl	c9c8 <CMemorySystem::~CMemorySystem()>
    814c:	e51b3008 	ldr	r3, [fp, #-8]
    8150:	e1a00003 	mov	r0, r3
    8154:	e24bd004 	sub	sp, fp, #4
    8158:	e8bd8800 	pop	{fp, pc}

0000815c <CKernel::Initialize()>:
    815c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    8160:	e28db000 	add	fp, sp, #0
    8164:	e24dd00c 	sub	sp, sp, #12
    8168:	e50b0008 	str	r0, [fp, #-8]
    816c:	e3a03001 	mov	r3, #1
    8170:	e1a00003 	mov	r0, r3
    8174:	e28bd000 	add	sp, fp, #0
    8178:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    817c:	e12fff1e 	bx	lr

00008180 <CKernel::Run()>:
    8180:	e92d4810 	push	{r4, fp, lr}
    8184:	e28db008 	add	fp, sp, #8
    8188:	e24dd06c 	sub	sp, sp, #108	; 0x6c
    818c:	e50b0068 	str	r0, [fp, #-104]	; 0xffffff98
    8190:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
    8194:	e2833018 	add	r3, r3, #24
    8198:	e1a00003 	mov	r0, r3
    819c:	eb000132 	bl	866c <BusRaider::init()>
    81a0:	e24b0038 	sub	r0, fp, #56	; 0x38
    81a4:	e3a03000 	mov	r3, #0
    81a8:	e3a02001 	mov	r2, #1
    81ac:	e3a01036 	mov	r1, #54	; 0x36
    81b0:	eb000a5b 	bl	ab24 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    81b4:	e24b0060 	sub	r0, fp, #96	; 0x60
    81b8:	e3a03000 	mov	r3, #0
    81bc:	e3a02001 	mov	r2, #1
    81c0:	e3a01037 	mov	r1, #55	; 0x37
    81c4:	eb000a56 	bl	ab24 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    81c8:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
    81cc:	e2830018 	add	r0, r3, #24
    81d0:	e3a03000 	mov	r3, #0
    81d4:	e58d3004 	str	r3, [sp, #4]
    81d8:	e3a03001 	mov	r3, #1
    81dc:	e58d3000 	str	r3, [sp]
    81e0:	e3a03010 	mov	r3, #16
    81e4:	e59f20ac 	ldr	r2, [pc, #172]	; 8298 <CKernel::Run()+0x118>
    81e8:	e3a01000 	mov	r1, #0
    81ec:	eb00038b 	bl	9020 <BusRaider::blockWrite(unsigned long, unsigned char const*, unsigned long, int, int)>
    81f0:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
    81f4:	e2833018 	add	r3, r3, #24
    81f8:	e1a00003 	mov	r0, r3
    81fc:	eb0001b9 	bl	88e8 <BusRaider::hostReset()>
    8200:	e3a03001 	mov	r3, #1
    8204:	e50b3010 	str	r3, [fp, #-16]
    8208:	e51b3010 	ldr	r3, [fp, #-16]
    820c:	e3530010 	cmp	r3, #16
    8210:	8a000015 	bhi	826c <CKernel::Run()+0xec>
    8214:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
    8218:	e283300c 	add	r3, r3, #12
    821c:	e1a00003 	mov	r0, r3
    8220:	eb000637 	bl	9b04 <CActLED::On()>
    8224:	e24b3038 	sub	r3, fp, #56	; 0x38
    8228:	e1a00003 	mov	r0, r3
    822c:	eb0007ec 	bl	a1e4 <CGPIOPin::Invert()>
    8230:	e24b3060 	sub	r3, fp, #96	; 0x60
    8234:	e1a00003 	mov	r0, r3
    8238:	eb0007e9 	bl	a1e4 <CGPIOPin::Invert()>
    823c:	e3a000c8 	mov	r0, #200	; 0xc8
    8240:	eb00108d 	bl	c47c <CTimer::SimpleMsDelay(unsigned int)>
    8244:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
    8248:	e283300c 	add	r3, r3, #12
    824c:	e1a00003 	mov	r0, r3
    8250:	eb000637 	bl	9b34 <CActLED::Off()>
    8254:	e3a00f7d 	mov	r0, #500	; 0x1f4
    8258:	eb001087 	bl	c47c <CTimer::SimpleMsDelay(unsigned int)>
    825c:	e51b3010 	ldr	r3, [fp, #-16]
    8260:	e2833001 	add	r3, r3, #1
    8264:	e50b3010 	str	r3, [fp, #-16]
    8268:	eaffffe6 	b	8208 <CKernel::Run()+0x88>
    826c:	e3a04002 	mov	r4, #2
    8270:	e24b3060 	sub	r3, fp, #96	; 0x60
    8274:	e1a00003 	mov	r0, r3
    8278:	eb00074c 	bl	9fb0 <CGPIOPin::~CGPIOPin()>
    827c:	e24b3038 	sub	r3, fp, #56	; 0x38
    8280:	e1a00003 	mov	r0, r3
    8284:	eb000749 	bl	9fb0 <CGPIOPin::~CGPIOPin()>
    8288:	e1a03004 	mov	r3, r4
    828c:	e1a00003 	mov	r0, r3
    8290:	e24bd008 	sub	sp, fp, #8
    8294:	e8bd8810 	pop	{r4, fp, pc}
    8298:	00010364 	.word	0x00010364

0000829c <lowlevCycleDelay>:
    829c:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
    82a0:	e1a00000 	nop			; (mov r0, r0)
    82a4:	e1a000c0 	asr	r0, r0, #1

000082a8 <loopit>:
    82a8:	e2500001 	subs	r0, r0, #1
    82ac:	1afffffd 	bne	82a8 <loopit>
    82b0:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
    82b4:	e12fff1e 	bx	lr

000082b8 <lowlevBlockCopyExecRelocatable>:
    82b8:	e1a00000 	nop			; (mov r0, r0)
    82bc:	e1a01001 	mov	r1, r1
    82c0:	e1a02002 	mov	r2, r2
    82c4:	e1a03003 	mov	r3, r3
    82c8:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)

000082cc <blockCopyExecRelocatableLoop>:
    82cc:	e4d13001 	ldrb	r3, [r1], #1
    82d0:	e4c03001 	strb	r3, [r0], #1
    82d4:	e2522001 	subs	r2, r2, #1
    82d8:	aafffffb 	bge	82cc <blockCopyExecRelocatableLoop>
    82dc:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    82e0:	e12fff10 	bx	r0

000082e4 <lowlevBlockCopyExecRelocatableLen>:
    82e4:	0000002c 	.word	0x0000002c
    82e8:	e12fff1e 	bx	lr

000082ec <lowlevGoto>:
    82ec:	e1a00000 	nop			; (mov r0, r0)
    82f0:	e12fff10 	bx	r0
    82f4:	e12fff1e 	bx	lr

000082f8 <lowlevStoreAbs8>:
    82f8:	e1a00000 	nop			; (mov r0, r0)
    82fc:	e1a01001 	mov	r1, r1
    8300:	e5c01000 	strb	r1, [r0]
    8304:	e12fff1e 	bx	lr
    8308:	e12fff1e 	bx	lr

0000830c <read32>:
    830c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    8310:	e28db000 	add	fp, sp, #0
    8314:	e24dd00c 	sub	sp, sp, #12
    8318:	e50b0008 	str	r0, [fp, #-8]
    831c:	e51b3008 	ldr	r3, [fp, #-8]
    8320:	e5933000 	ldr	r3, [r3]
    8324:	e1a00003 	mov	r0, r3
    8328:	e28bd000 	add	sp, fp, #0
    832c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    8330:	e12fff1e 	bx	lr

00008334 <write32>:
    8334:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    8338:	e28db000 	add	fp, sp, #0
    833c:	e24dd00c 	sub	sp, sp, #12
    8340:	e50b0008 	str	r0, [fp, #-8]
    8344:	e50b100c 	str	r1, [fp, #-12]
    8348:	e51b3008 	ldr	r3, [fp, #-8]
    834c:	e51b200c 	ldr	r2, [fp, #-12]
    8350:	e5832000 	str	r2, [r3]
    8354:	e320f000 	nop	{0}
    8358:	e28bd000 	add	sp, fp, #0
    835c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    8360:	e12fff1e 	bx	lr

00008364 <BusRaider::BusRaider()>:
    8364:	e92d4830 	push	{r4, r5, fp, lr}
    8368:	e28db00c 	add	fp, sp, #12
    836c:	e24dd008 	sub	sp, sp, #8
    8370:	e50b0010 	str	r0, [fp, #-16]
    8374:	e51b3010 	ldr	r3, [fp, #-16]
    8378:	e3a02000 	mov	r2, #0
    837c:	e5c32005 	strb	r2, [r3, #5]
    8380:	e51b3010 	ldr	r3, [fp, #-16]
    8384:	e2833014 	add	r3, r3, #20
    8388:	e3a04002 	mov	r4, #2
    838c:	e1a05003 	mov	r5, r3
    8390:	e3540000 	cmp	r4, #0
    8394:	ba000004 	blt	83ac <BusRaider::BusRaider()+0x48>
    8398:	e1a00005 	mov	r0, r5
    839c:	eb00070a 	bl	9fcc <CGPIOPin::CGPIOPin()>
    83a0:	e2855028 	add	r5, r5, #40	; 0x28
    83a4:	e2444001 	sub	r4, r4, #1
    83a8:	eafffff8 	b	8390 <BusRaider::BusRaider()+0x2c>
    83ac:	e51b3010 	ldr	r3, [fp, #-16]
    83b0:	e283308c 	add	r3, r3, #140	; 0x8c
    83b4:	e1a00003 	mov	r0, r3
    83b8:	eb000703 	bl	9fcc <CGPIOPin::CGPIOPin()>
    83bc:	e51b3010 	ldr	r3, [fp, #-16]
    83c0:	e28330b4 	add	r3, r3, #180	; 0xb4
    83c4:	e1a00003 	mov	r0, r3
    83c8:	eb0006ff 	bl	9fcc <CGPIOPin::CGPIOPin()>
    83cc:	e51b3010 	ldr	r3, [fp, #-16]
    83d0:	e28330dc 	add	r3, r3, #220	; 0xdc
    83d4:	e3a04007 	mov	r4, #7
    83d8:	e1a05003 	mov	r5, r3
    83dc:	e3540000 	cmp	r4, #0
    83e0:	ba000004 	blt	83f8 <BusRaider::BusRaider()+0x94>
    83e4:	e1a00005 	mov	r0, r5
    83e8:	eb0006f7 	bl	9fcc <CGPIOPin::CGPIOPin()>
    83ec:	e2855028 	add	r5, r5, #40	; 0x28
    83f0:	e2444001 	sub	r4, r4, #1
    83f4:	eafffff8 	b	83dc <BusRaider::BusRaider()+0x78>
    83f8:	e51b3010 	ldr	r3, [fp, #-16]
    83fc:	e2833f87 	add	r3, r3, #540	; 0x21c
    8400:	e1a00003 	mov	r0, r3
    8404:	eb0006f0 	bl	9fcc <CGPIOPin::CGPIOPin()>
    8408:	e51b3010 	ldr	r3, [fp, #-16]
    840c:	e2833f91 	add	r3, r3, #580	; 0x244
    8410:	e1a00003 	mov	r0, r3
    8414:	eb0006ec 	bl	9fcc <CGPIOPin::CGPIOPin()>
    8418:	e51b3010 	ldr	r3, [fp, #-16]
    841c:	e2833f9b 	add	r3, r3, #620	; 0x26c
    8420:	e1a00003 	mov	r0, r3
    8424:	eb0006e8 	bl	9fcc <CGPIOPin::CGPIOPin()>
    8428:	e51b3010 	ldr	r3, [fp, #-16]
    842c:	e2833fa5 	add	r3, r3, #660	; 0x294
    8430:	e1a00003 	mov	r0, r3
    8434:	eb0006e4 	bl	9fcc <CGPIOPin::CGPIOPin()>
    8438:	e51b3010 	ldr	r3, [fp, #-16]
    843c:	e2833faf 	add	r3, r3, #700	; 0x2bc
    8440:	e1a00003 	mov	r0, r3
    8444:	eb0006e0 	bl	9fcc <CGPIOPin::CGPIOPin()>
    8448:	e51b3010 	ldr	r3, [fp, #-16]
    844c:	e2833fb9 	add	r3, r3, #740	; 0x2e4
    8450:	e1a00003 	mov	r0, r3
    8454:	eb0006dc 	bl	9fcc <CGPIOPin::CGPIOPin()>
    8458:	e51b3010 	ldr	r3, [fp, #-16]
    845c:	e2833fc3 	add	r3, r3, #780	; 0x30c
    8460:	e1a00003 	mov	r0, r3
    8464:	eb0006d8 	bl	9fcc <CGPIOPin::CGPIOPin()>
    8468:	e51b3010 	ldr	r3, [fp, #-16]
    846c:	e2833fcd 	add	r3, r3, #820	; 0x334
    8470:	e1a00003 	mov	r0, r3
    8474:	eb0006d4 	bl	9fcc <CGPIOPin::CGPIOPin()>
    8478:	e51b3010 	ldr	r3, [fp, #-16]
    847c:	e2833fd7 	add	r3, r3, #860	; 0x35c
    8480:	e1a00003 	mov	r0, r3
    8484:	eb0006d0 	bl	9fcc <CGPIOPin::CGPIOPin()>
    8488:	e51b3010 	ldr	r3, [fp, #-16]
    848c:	e2833fe1 	add	r3, r3, #900	; 0x384
    8490:	e1a00003 	mov	r0, r3
    8494:	eb0006cc 	bl	9fcc <CGPIOPin::CGPIOPin()>
    8498:	e51b3010 	ldr	r3, [fp, #-16]
    849c:	e2833feb 	add	r3, r3, #940	; 0x3ac
    84a0:	e1a00003 	mov	r0, r3
    84a4:	eb0006c8 	bl	9fcc <CGPIOPin::CGPIOPin()>
    84a8:	e51b3010 	ldr	r3, [fp, #-16]
    84ac:	e3a02000 	mov	r2, #0
    84b0:	e5832000 	str	r2, [r3]
    84b4:	e51b3010 	ldr	r3, [fp, #-16]
    84b8:	e3a02000 	mov	r2, #0
    84bc:	e5c32004 	strb	r2, [r3, #4]
    84c0:	e51b3010 	ldr	r3, [fp, #-16]
    84c4:	e3a02000 	mov	r2, #0
    84c8:	e5832008 	str	r2, [r3, #8]
    84cc:	e51b3010 	ldr	r3, [fp, #-16]
    84d0:	e3a02000 	mov	r2, #0
    84d4:	e583200c 	str	r2, [r3, #12]
    84d8:	e51b3010 	ldr	r3, [fp, #-16]
    84dc:	e3a02000 	mov	r2, #0
    84e0:	e5832010 	str	r2, [r3, #16]
    84e4:	e51b3010 	ldr	r3, [fp, #-16]
    84e8:	e1a00003 	mov	r0, r3
    84ec:	e24bd00c 	sub	sp, fp, #12
    84f0:	e8bd8830 	pop	{r4, r5, fp, pc}

000084f4 <BusRaider::~BusRaider()>:
    84f4:	e92d4810 	push	{r4, fp, lr}
    84f8:	e28db008 	add	fp, sp, #8
    84fc:	e24dd00c 	sub	sp, sp, #12
    8500:	e50b0010 	str	r0, [fp, #-16]
    8504:	e51b3010 	ldr	r3, [fp, #-16]
    8508:	e2833feb 	add	r3, r3, #940	; 0x3ac
    850c:	e1a00003 	mov	r0, r3
    8510:	eb0006a6 	bl	9fb0 <CGPIOPin::~CGPIOPin()>
    8514:	e51b3010 	ldr	r3, [fp, #-16]
    8518:	e2833fe1 	add	r3, r3, #900	; 0x384
    851c:	e1a00003 	mov	r0, r3
    8520:	eb0006a2 	bl	9fb0 <CGPIOPin::~CGPIOPin()>
    8524:	e51b3010 	ldr	r3, [fp, #-16]
    8528:	e2833fd7 	add	r3, r3, #860	; 0x35c
    852c:	e1a00003 	mov	r0, r3
    8530:	eb00069e 	bl	9fb0 <CGPIOPin::~CGPIOPin()>
    8534:	e51b3010 	ldr	r3, [fp, #-16]
    8538:	e2833fcd 	add	r3, r3, #820	; 0x334
    853c:	e1a00003 	mov	r0, r3
    8540:	eb00069a 	bl	9fb0 <CGPIOPin::~CGPIOPin()>
    8544:	e51b3010 	ldr	r3, [fp, #-16]
    8548:	e2833fc3 	add	r3, r3, #780	; 0x30c
    854c:	e1a00003 	mov	r0, r3
    8550:	eb000696 	bl	9fb0 <CGPIOPin::~CGPIOPin()>
    8554:	e51b3010 	ldr	r3, [fp, #-16]
    8558:	e2833fb9 	add	r3, r3, #740	; 0x2e4
    855c:	e1a00003 	mov	r0, r3
    8560:	eb000692 	bl	9fb0 <CGPIOPin::~CGPIOPin()>
    8564:	e51b3010 	ldr	r3, [fp, #-16]
    8568:	e2833faf 	add	r3, r3, #700	; 0x2bc
    856c:	e1a00003 	mov	r0, r3
    8570:	eb00068e 	bl	9fb0 <CGPIOPin::~CGPIOPin()>
    8574:	e51b3010 	ldr	r3, [fp, #-16]
    8578:	e2833fa5 	add	r3, r3, #660	; 0x294
    857c:	e1a00003 	mov	r0, r3
    8580:	eb00068a 	bl	9fb0 <CGPIOPin::~CGPIOPin()>
    8584:	e51b3010 	ldr	r3, [fp, #-16]
    8588:	e2833f9b 	add	r3, r3, #620	; 0x26c
    858c:	e1a00003 	mov	r0, r3
    8590:	eb000686 	bl	9fb0 <CGPIOPin::~CGPIOPin()>
    8594:	e51b3010 	ldr	r3, [fp, #-16]
    8598:	e2833f91 	add	r3, r3, #580	; 0x244
    859c:	e1a00003 	mov	r0, r3
    85a0:	eb000682 	bl	9fb0 <CGPIOPin::~CGPIOPin()>
    85a4:	e51b3010 	ldr	r3, [fp, #-16]
    85a8:	e2833f87 	add	r3, r3, #540	; 0x21c
    85ac:	e1a00003 	mov	r0, r3
    85b0:	eb00067e 	bl	9fb0 <CGPIOPin::~CGPIOPin()>
    85b4:	e51b3010 	ldr	r3, [fp, #-16]
    85b8:	e28330dc 	add	r3, r3, #220	; 0xdc
    85bc:	e3530000 	cmp	r3, #0
    85c0:	0a00000c 	beq	85f8 <BusRaider::~BusRaider()+0x104>
    85c4:	e51b3010 	ldr	r3, [fp, #-16]
    85c8:	e28330dc 	add	r3, r3, #220	; 0xdc
    85cc:	e2834d05 	add	r4, r3, #320	; 0x140
    85d0:	e51b3010 	ldr	r3, [fp, #-16]
    85d4:	e28330dc 	add	r3, r3, #220	; 0xdc
    85d8:	e1530004 	cmp	r3, r4
    85dc:	0a000005 	beq	85f8 <BusRaider::~BusRaider()+0x104>
    85e0:	e2444028 	sub	r4, r4, #40	; 0x28
    85e4:	e5943000 	ldr	r3, [r4]
    85e8:	e5933000 	ldr	r3, [r3]
    85ec:	e1a00004 	mov	r0, r4
    85f0:	e12fff33 	blx	r3
    85f4:	eafffff5 	b	85d0 <BusRaider::~BusRaider()+0xdc>
    85f8:	e51b3010 	ldr	r3, [fp, #-16]
    85fc:	e28330b4 	add	r3, r3, #180	; 0xb4
    8600:	e1a00003 	mov	r0, r3
    8604:	eb000669 	bl	9fb0 <CGPIOPin::~CGPIOPin()>
    8608:	e51b3010 	ldr	r3, [fp, #-16]
    860c:	e283308c 	add	r3, r3, #140	; 0x8c
    8610:	e1a00003 	mov	r0, r3
    8614:	eb000665 	bl	9fb0 <CGPIOPin::~CGPIOPin()>
    8618:	e51b3010 	ldr	r3, [fp, #-16]
    861c:	e2833014 	add	r3, r3, #20
    8620:	e3530000 	cmp	r3, #0
    8624:	0a00000c 	beq	865c <BusRaider::~BusRaider()+0x168>
    8628:	e51b3010 	ldr	r3, [fp, #-16]
    862c:	e2833014 	add	r3, r3, #20
    8630:	e2834078 	add	r4, r3, #120	; 0x78
    8634:	e51b3010 	ldr	r3, [fp, #-16]
    8638:	e2833014 	add	r3, r3, #20
    863c:	e1530004 	cmp	r3, r4
    8640:	0a000005 	beq	865c <BusRaider::~BusRaider()+0x168>
    8644:	e2444028 	sub	r4, r4, #40	; 0x28
    8648:	e5943000 	ldr	r3, [r4]
    864c:	e5933000 	ldr	r3, [r3]
    8650:	e1a00004 	mov	r0, r4
    8654:	e12fff33 	blx	r3
    8658:	eafffff5 	b	8634 <BusRaider::~BusRaider()+0x140>
    865c:	e51b3010 	ldr	r3, [fp, #-16]
    8660:	e1a00003 	mov	r0, r3
    8664:	e24bd008 	sub	sp, fp, #8
    8668:	e8bd8810 	pop	{r4, fp, pc}

0000866c <BusRaider::init()>:
    866c:	e92d4800 	push	{fp, lr}
    8670:	e28db004 	add	fp, sp, #4
    8674:	e24dd008 	sub	sp, sp, #8
    8678:	e50b0008 	str	r0, [fp, #-8]
    867c:	e51b0008 	ldr	r0, [fp, #-8]
    8680:	eb000355 	bl	93dc <BusRaider::waitIntDisable()>
    8684:	e51b3008 	ldr	r3, [fp, #-8]
    8688:	e2831014 	add	r1, r3, #20
    868c:	e3a03000 	mov	r3, #0
    8690:	e3a0200b 	mov	r2, #11
    8694:	e51b0008 	ldr	r0, [fp, #-8]
    8698:	eb00030a 	bl	92c8 <BusRaider::setPinOut(CGPIOPin&, int, bool)>
    869c:	e51b3008 	ldr	r3, [fp, #-8]
    86a0:	e283103c 	add	r1, r3, #60	; 0x3c
    86a4:	e3a03000 	mov	r3, #0
    86a8:	e3a02009 	mov	r2, #9
    86ac:	e51b0008 	ldr	r0, [fp, #-8]
    86b0:	eb000304 	bl	92c8 <BusRaider::setPinOut(CGPIOPin&, int, bool)>
    86b4:	e51b3008 	ldr	r3, [fp, #-8]
    86b8:	e2831064 	add	r1, r3, #100	; 0x64
    86bc:	e3a03000 	mov	r3, #0
    86c0:	e3a0200a 	mov	r2, #10
    86c4:	e51b0008 	ldr	r0, [fp, #-8]
    86c8:	eb0002fe 	bl	92c8 <BusRaider::setPinOut(CGPIOPin&, int, bool)>
    86cc:	e51b3008 	ldr	r3, [fp, #-8]
    86d0:	e283108c 	add	r1, r3, #140	; 0x8c
    86d4:	e3a03001 	mov	r3, #1
    86d8:	e3a02013 	mov	r2, #19
    86dc:	e51b0008 	ldr	r0, [fp, #-8]
    86e0:	eb0002f8 	bl	92c8 <BusRaider::setPinOut(CGPIOPin&, int, bool)>
    86e4:	e51b3008 	ldr	r3, [fp, #-8]
    86e8:	e28330b4 	add	r3, r3, #180	; 0xb4
    86ec:	e3a02002 	mov	r2, #2
    86f0:	e1a01003 	mov	r1, r3
    86f4:	e51b0008 	ldr	r0, [fp, #-8]
    86f8:	eb000301 	bl	9304 <BusRaider::setPinIn(CGPIOPin&, int)>
    86fc:	e51b3008 	ldr	r3, [fp, #-8]
    8700:	e28330dc 	add	r3, r3, #220	; 0xdc
    8704:	e3a02014 	mov	r2, #20
    8708:	e1a01003 	mov	r1, r3
    870c:	e51b0008 	ldr	r0, [fp, #-8]
    8710:	eb0002fb 	bl	9304 <BusRaider::setPinIn(CGPIOPin&, int)>
    8714:	e51b3008 	ldr	r3, [fp, #-8]
    8718:	e2833f41 	add	r3, r3, #260	; 0x104
    871c:	e3a02015 	mov	r2, #21
    8720:	e1a01003 	mov	r1, r3
    8724:	e51b0008 	ldr	r0, [fp, #-8]
    8728:	eb0002f5 	bl	9304 <BusRaider::setPinIn(CGPIOPin&, int)>
    872c:	e51b3008 	ldr	r3, [fp, #-8]
    8730:	e2833f4b 	add	r3, r3, #300	; 0x12c
    8734:	e3a02016 	mov	r2, #22
    8738:	e1a01003 	mov	r1, r3
    873c:	e51b0008 	ldr	r0, [fp, #-8]
    8740:	eb0002ef 	bl	9304 <BusRaider::setPinIn(CGPIOPin&, int)>
    8744:	e51b3008 	ldr	r3, [fp, #-8]
    8748:	e2833f55 	add	r3, r3, #340	; 0x154
    874c:	e3a02017 	mov	r2, #23
    8750:	e1a01003 	mov	r1, r3
    8754:	e51b0008 	ldr	r0, [fp, #-8]
    8758:	eb0002e9 	bl	9304 <BusRaider::setPinIn(CGPIOPin&, int)>
    875c:	e51b3008 	ldr	r3, [fp, #-8]
    8760:	e2833f5f 	add	r3, r3, #380	; 0x17c
    8764:	e3a02018 	mov	r2, #24
    8768:	e1a01003 	mov	r1, r3
    876c:	e51b0008 	ldr	r0, [fp, #-8]
    8770:	eb0002e3 	bl	9304 <BusRaider::setPinIn(CGPIOPin&, int)>
    8774:	e51b3008 	ldr	r3, [fp, #-8]
    8778:	e2833f69 	add	r3, r3, #420	; 0x1a4
    877c:	e3a02019 	mov	r2, #25
    8780:	e1a01003 	mov	r1, r3
    8784:	e51b0008 	ldr	r0, [fp, #-8]
    8788:	eb0002dd 	bl	9304 <BusRaider::setPinIn(CGPIOPin&, int)>
    878c:	e51b3008 	ldr	r3, [fp, #-8]
    8790:	e2833f73 	add	r3, r3, #460	; 0x1cc
    8794:	e3a0201a 	mov	r2, #26
    8798:	e1a01003 	mov	r1, r3
    879c:	e51b0008 	ldr	r0, [fp, #-8]
    87a0:	eb0002d7 	bl	9304 <BusRaider::setPinIn(CGPIOPin&, int)>
    87a4:	e51b3008 	ldr	r3, [fp, #-8]
    87a8:	e2833f7d 	add	r3, r3, #500	; 0x1f4
    87ac:	e3a0201b 	mov	r2, #27
    87b0:	e1a01003 	mov	r1, r3
    87b4:	e51b0008 	ldr	r0, [fp, #-8]
    87b8:	eb0002d1 	bl	9304 <BusRaider::setPinIn(CGPIOPin&, int)>
    87bc:	e51b3008 	ldr	r3, [fp, #-8]
    87c0:	e2833f87 	add	r3, r3, #540	; 0x21c
    87c4:	e3a02000 	mov	r2, #0
    87c8:	e1a01003 	mov	r1, r3
    87cc:	e51b0008 	ldr	r0, [fp, #-8]
    87d0:	eb0002cb 	bl	9304 <BusRaider::setPinIn(CGPIOPin&, int)>
    87d4:	e51b3008 	ldr	r3, [fp, #-8]
    87d8:	e2833f91 	add	r3, r3, #580	; 0x244
    87dc:	e3a02001 	mov	r2, #1
    87e0:	e1a01003 	mov	r1, r3
    87e4:	e51b0008 	ldr	r0, [fp, #-8]
    87e8:	eb0002c5 	bl	9304 <BusRaider::setPinIn(CGPIOPin&, int)>
    87ec:	e51b3008 	ldr	r3, [fp, #-8]
    87f0:	e2833f9b 	add	r3, r3, #620	; 0x26c
    87f4:	e3a02012 	mov	r2, #18
    87f8:	e1a01003 	mov	r1, r3
    87fc:	e51b0008 	ldr	r0, [fp, #-8]
    8800:	eb0002bf 	bl	9304 <BusRaider::setPinIn(CGPIOPin&, int)>
    8804:	e51b3008 	ldr	r3, [fp, #-8]
    8808:	e2833fa5 	add	r3, r3, #660	; 0x294
    880c:	e3a02011 	mov	r2, #17
    8810:	e1a01003 	mov	r1, r3
    8814:	e51b0008 	ldr	r0, [fp, #-8]
    8818:	eb0002b9 	bl	9304 <BusRaider::setPinIn(CGPIOPin&, int)>
    881c:	e51b3008 	ldr	r3, [fp, #-8]
    8820:	e2831faf 	add	r1, r3, #700	; 0x2bc
    8824:	e3a03000 	mov	r3, #0
    8828:	e3a0200d 	mov	r2, #13
    882c:	e51b0008 	ldr	r0, [fp, #-8]
    8830:	eb0002a4 	bl	92c8 <BusRaider::setPinOut(CGPIOPin&, int, bool)>
    8834:	e51b3008 	ldr	r3, [fp, #-8]
    8838:	e2831fb9 	add	r1, r3, #740	; 0x2e4
    883c:	e3a03000 	mov	r3, #0
    8840:	e3a0200c 	mov	r2, #12
    8844:	e51b0008 	ldr	r0, [fp, #-8]
    8848:	eb00029e 	bl	92c8 <BusRaider::setPinOut(CGPIOPin&, int, bool)>
    884c:	e51b3008 	ldr	r3, [fp, #-8]
    8850:	e3a02000 	mov	r2, #0
    8854:	e5832000 	str	r2, [r3]
    8858:	e51b3008 	ldr	r3, [fp, #-8]
    885c:	e2831fc3 	add	r1, r3, #780	; 0x30c
    8860:	e3a03001 	mov	r3, #1
    8864:	e3a02003 	mov	r2, #3
    8868:	e51b0008 	ldr	r0, [fp, #-8]
    886c:	eb000295 	bl	92c8 <BusRaider::setPinOut(CGPIOPin&, int, bool)>
    8870:	e51b3008 	ldr	r3, [fp, #-8]
    8874:	e2831fcd 	add	r1, r3, #820	; 0x334
    8878:	e3a03000 	mov	r3, #0
    887c:	e3a02007 	mov	r2, #7
    8880:	e51b0008 	ldr	r0, [fp, #-8]
    8884:	eb00028f 	bl	92c8 <BusRaider::setPinOut(CGPIOPin&, int, bool)>
    8888:	e51b3008 	ldr	r3, [fp, #-8]
    888c:	e2831fd7 	add	r1, r3, #860	; 0x35c
    8890:	e3a03000 	mov	r3, #0
    8894:	e3a02010 	mov	r2, #16
    8898:	e51b0008 	ldr	r0, [fp, #-8]
    889c:	eb000289 	bl	92c8 <BusRaider::setPinOut(CGPIOPin&, int, bool)>
    88a0:	e51b3008 	ldr	r3, [fp, #-8]
    88a4:	e2831fe1 	add	r1, r3, #900	; 0x384
    88a8:	e3a03001 	mov	r3, #1
    88ac:	e3a02006 	mov	r2, #6
    88b0:	e51b0008 	ldr	r0, [fp, #-8]
    88b4:	eb000283 	bl	92c8 <BusRaider::setPinOut(CGPIOPin&, int, bool)>
    88b8:	e51b3008 	ldr	r3, [fp, #-8]
    88bc:	e3a02000 	mov	r2, #0
    88c0:	e5c32004 	strb	r2, [r3, #4]
    88c4:	e51b3008 	ldr	r3, [fp, #-8]
    88c8:	e2831feb 	add	r1, r3, #940	; 0x3ac
    88cc:	e3a03000 	mov	r3, #0
    88d0:	e3a02008 	mov	r2, #8
    88d4:	e51b0008 	ldr	r0, [fp, #-8]
    88d8:	eb00027a 	bl	92c8 <BusRaider::setPinOut(CGPIOPin&, int, bool)>
    88dc:	e320f000 	nop	{0}
    88e0:	e24bd004 	sub	sp, fp, #4
    88e4:	e8bd8800 	pop	{fp, pc}

000088e8 <BusRaider::hostReset()>:
    88e8:	e92d4800 	push	{fp, lr}
    88ec:	e28db004 	add	fp, sp, #4
    88f0:	e24dd008 	sub	sp, sp, #8
    88f4:	e50b0008 	str	r0, [fp, #-8]
    88f8:	e51b0008 	ldr	r0, [fp, #-8]
    88fc:	eb0002b6 	bl	93dc <BusRaider::waitIntDisable()>
    8900:	e3a01005 	mov	r1, #5
    8904:	e51b0008 	ldr	r0, [fp, #-8]
    8908:	eb00028b 	bl	933c <BusRaider::muxSet(int)>
    890c:	e3a00064 	mov	r0, #100	; 0x64
    8910:	eb000ee0 	bl	c498 <CTimer::SimpleusDelay(unsigned int)>
    8914:	e3a01a03 	mov	r1, #12288	; 0x3000
    8918:	e59f0048 	ldr	r0, [pc, #72]	; 8968 <BusRaider::hostReset()+0x80>
    891c:	ebfffe84 	bl	8334 <write32>
    8920:	e51b3008 	ldr	r3, [fp, #-8]
    8924:	e5933000 	ldr	r3, [r3]
    8928:	e1a01003 	mov	r1, r3
    892c:	e59f0038 	ldr	r0, [pc, #56]	; 896c <BusRaider::hostReset()+0x84>
    8930:	ebfffe7f 	bl	8334 <write32>
    8934:	e51b0008 	ldr	r0, [fp, #-8]
    8938:	eb00029c 	bl	93b0 <BusRaider::waitIntClear()>
    893c:	e51b3008 	ldr	r3, [fp, #-8]
    8940:	e5d33004 	ldrb	r3, [r3, #4]
    8944:	e3530000 	cmp	r3, #0
    8948:	0a000001 	beq	8954 <BusRaider::hostReset()+0x6c>
    894c:	e51b0008 	ldr	r0, [fp, #-8]
    8950:	eb0002a9 	bl	93fc <BusRaider::waitIntEnable()>
    8954:	e51b0008 	ldr	r0, [fp, #-8]
    8958:	eb000289 	bl	9384 <BusRaider::muxClear()>
    895c:	e320f000 	nop	{0}
    8960:	e24bd004 	sub	sp, fp, #4
    8964:	e8bd8800 	pop	{fp, pc}
    8968:	20200028 	.word	0x20200028
    896c:	2020001c 	.word	0x2020001c

00008970 <BusRaider::hostResetHold()>:
    8970:	e92d4800 	push	{fp, lr}
    8974:	e28db004 	add	fp, sp, #4
    8978:	e24dd008 	sub	sp, sp, #8
    897c:	e50b0008 	str	r0, [fp, #-8]
    8980:	e51b0008 	ldr	r0, [fp, #-8]
    8984:	eb000294 	bl	93dc <BusRaider::waitIntDisable()>
    8988:	e3a01005 	mov	r1, #5
    898c:	e51b0008 	ldr	r0, [fp, #-8]
    8990:	eb000269 	bl	933c <BusRaider::muxSet(int)>
    8994:	e320f000 	nop	{0}
    8998:	e24bd004 	sub	sp, fp, #4
    899c:	e8bd8800 	pop	{fp, pc}

000089a0 <BusRaider::hostNMI()>:
    89a0:	e92d4800 	push	{fp, lr}
    89a4:	e28db004 	add	fp, sp, #4
    89a8:	e24dd008 	sub	sp, sp, #8
    89ac:	e50b0008 	str	r0, [fp, #-8]
    89b0:	e3a01006 	mov	r1, #6
    89b4:	e51b0008 	ldr	r0, [fp, #-8]
    89b8:	eb00025f 	bl	933c <BusRaider::muxSet(int)>
    89bc:	e3a0000a 	mov	r0, #10
    89c0:	eb000eb4 	bl	c498 <CTimer::SimpleusDelay(unsigned int)>
    89c4:	e51b0008 	ldr	r0, [fp, #-8]
    89c8:	eb00026d 	bl	9384 <BusRaider::muxClear()>
    89cc:	e320f000 	nop	{0}
    89d0:	e24bd004 	sub	sp, fp, #4
    89d4:	e8bd8800 	pop	{fp, pc}

000089d8 <BusRaider::hostIRQ()>:
    89d8:	e92d4800 	push	{fp, lr}
    89dc:	e28db004 	add	fp, sp, #4
    89e0:	e24dd008 	sub	sp, sp, #8
    89e4:	e50b0008 	str	r0, [fp, #-8]
    89e8:	e3a01002 	mov	r1, #2
    89ec:	e51b0008 	ldr	r0, [fp, #-8]
    89f0:	eb000251 	bl	933c <BusRaider::muxSet(int)>
    89f4:	e3a0000a 	mov	r0, #10
    89f8:	eb000ea6 	bl	c498 <CTimer::SimpleusDelay(unsigned int)>
    89fc:	e51b0008 	ldr	r0, [fp, #-8]
    8a00:	eb00025f 	bl	9384 <BusRaider::muxClear()>
    8a04:	e320f000 	nop	{0}
    8a08:	e24bd004 	sub	sp, fp, #4
    8a0c:	e8bd8800 	pop	{fp, pc}

00008a10 <BusRaider::controlRequestBus()>:
    8a10:	e92d4800 	push	{fp, lr}
    8a14:	e28db004 	add	fp, sp, #4
    8a18:	e24dd008 	sub	sp, sp, #8
    8a1c:	e50b0008 	str	r0, [fp, #-8]
    8a20:	e51b0008 	ldr	r0, [fp, #-8]
    8a24:	eb00028f 	bl	9468 <BusRaider::pibSetIn()>
    8a28:	e3a02001 	mov	r2, #1
    8a2c:	e3a01006 	mov	r1, #6
    8a30:	e51b0008 	ldr	r0, [fp, #-8]
    8a34:	eb00031a 	bl	96a4 <BusRaider::pinRawWrite(int, bool)>
    8a38:	e3a02000 	mov	r2, #0
    8a3c:	e3a01013 	mov	r1, #19
    8a40:	e51b0008 	ldr	r0, [fp, #-8]
    8a44:	eb000316 	bl	96a4 <BusRaider::pinRawWrite(int, bool)>
    8a48:	e320f000 	nop	{0}
    8a4c:	e24bd004 	sub	sp, fp, #4
    8a50:	e8bd8800 	pop	{fp, pc}

00008a54 <BusRaider::controlBusAcknowledged()>:
    8a54:	e92d4800 	push	{fp, lr}
    8a58:	e28db004 	add	fp, sp, #4
    8a5c:	e24dd008 	sub	sp, sp, #8
    8a60:	e50b0008 	str	r0, [fp, #-8]
    8a64:	e3a01002 	mov	r1, #2
    8a68:	e51b0008 	ldr	r0, [fp, #-8]
    8a6c:	eb000340 	bl	9774 <BusRaider::pinRawRead(int)>
    8a70:	e1a03000 	mov	r3, r0
    8a74:	e2233001 	eor	r3, r3, #1
    8a78:	e6ef3073 	uxtb	r3, r3
    8a7c:	e1a00003 	mov	r0, r3
    8a80:	e24bd004 	sub	sp, fp, #4
    8a84:	e8bd8800 	pop	{fp, pc}

00008a88 <BusRaider::controlTake()>:
    8a88:	e92d4800 	push	{fp, lr}
    8a8c:	e28db004 	add	fp, sp, #4
    8a90:	e24dd008 	sub	sp, sp, #8
    8a94:	e50b0008 	str	r0, [fp, #-8]
    8a98:	e51b0008 	ldr	r0, [fp, #-8]
    8a9c:	eb00024e 	bl	93dc <BusRaider::waitIntDisable()>
    8aa0:	e3a03001 	mov	r3, #1
    8aa4:	e3a02000 	mov	r2, #0
    8aa8:	e3a01000 	mov	r1, #0
    8aac:	e51b0008 	ldr	r0, [fp, #-8]
    8ab0:	eb0002a1 	bl	953c <BusRaider::pinRawMode(int, bool, bool)>
    8ab4:	e3a03001 	mov	r3, #1
    8ab8:	e3a02000 	mov	r2, #0
    8abc:	e3a01001 	mov	r1, #1
    8ac0:	e51b0008 	ldr	r0, [fp, #-8]
    8ac4:	eb00029c 	bl	953c <BusRaider::pinRawMode(int, bool, bool)>
    8ac8:	e3a03001 	mov	r3, #1
    8acc:	e3a02000 	mov	r2, #0
    8ad0:	e3a01012 	mov	r1, #18
    8ad4:	e51b0008 	ldr	r0, [fp, #-8]
    8ad8:	eb000297 	bl	953c <BusRaider::pinRawMode(int, bool, bool)>
    8adc:	e3a03001 	mov	r3, #1
    8ae0:	e3a02000 	mov	r2, #0
    8ae4:	e3a01011 	mov	r1, #17
    8ae8:	e51b0008 	ldr	r0, [fp, #-8]
    8aec:	eb000292 	bl	953c <BusRaider::pinRawMode(int, bool, bool)>
    8af0:	e3a02000 	mov	r2, #0
    8af4:	e3a01003 	mov	r1, #3
    8af8:	e51b0008 	ldr	r0, [fp, #-8]
    8afc:	eb0002e8 	bl	96a4 <BusRaider::pinRawWrite(int, bool)>
    8b00:	e320f000 	nop	{0}
    8b04:	e24bd004 	sub	sp, fp, #4
    8b08:	e8bd8800 	pop	{fp, pc}

00008b0c <BusRaider::controlRelease(bool)>:
    8b0c:	e92d4800 	push	{fp, lr}
    8b10:	e28db004 	add	fp, sp, #4
    8b14:	e24dd008 	sub	sp, sp, #8
    8b18:	e50b0008 	str	r0, [fp, #-8]
    8b1c:	e1a03001 	mov	r3, r1
    8b20:	e54b3009 	strb	r3, [fp, #-9]
    8b24:	e3a03000 	mov	r3, #0
    8b28:	e3a02001 	mov	r2, #1
    8b2c:	e3a01000 	mov	r1, #0
    8b30:	e51b0008 	ldr	r0, [fp, #-8]
    8b34:	eb000280 	bl	953c <BusRaider::pinRawMode(int, bool, bool)>
    8b38:	e3a03000 	mov	r3, #0
    8b3c:	e3a02001 	mov	r2, #1
    8b40:	e3a01001 	mov	r1, #1
    8b44:	e51b0008 	ldr	r0, [fp, #-8]
    8b48:	eb00027b 	bl	953c <BusRaider::pinRawMode(int, bool, bool)>
    8b4c:	e3a03000 	mov	r3, #0
    8b50:	e3a02001 	mov	r2, #1
    8b54:	e3a01012 	mov	r1, #18
    8b58:	e51b0008 	ldr	r0, [fp, #-8]
    8b5c:	eb000276 	bl	953c <BusRaider::pinRawMode(int, bool, bool)>
    8b60:	e3a03000 	mov	r3, #0
    8b64:	e3a02001 	mov	r2, #1
    8b68:	e3a01011 	mov	r1, #17
    8b6c:	e51b0008 	ldr	r0, [fp, #-8]
    8b70:	eb000271 	bl	953c <BusRaider::pinRawMode(int, bool, bool)>
    8b74:	e3a02001 	mov	r2, #1
    8b78:	e3a01003 	mov	r1, #3
    8b7c:	e51b0008 	ldr	r0, [fp, #-8]
    8b80:	eb0002c7 	bl	96a4 <BusRaider::pinRawWrite(int, bool)>
    8b84:	e51b3008 	ldr	r3, [fp, #-8]
    8b88:	e5d33004 	ldrb	r3, [r3, #4]
    8b8c:	e3530000 	cmp	r3, #0
    8b90:	0a000001 	beq	8b9c <BusRaider::controlRelease(bool)+0x90>
    8b94:	e51b0008 	ldr	r0, [fp, #-8]
    8b98:	eb000217 	bl	93fc <BusRaider::waitIntEnable()>
    8b9c:	e55b3009 	ldrb	r3, [fp, #-9]
    8ba0:	e3530000 	cmp	r3, #0
    8ba4:	0a00000b 	beq	8bd8 <BusRaider::controlRelease(bool)+0xcc>
    8ba8:	e3a01005 	mov	r1, #5
    8bac:	e51b0008 	ldr	r0, [fp, #-8]
    8bb0:	eb0001e1 	bl	933c <BusRaider::muxSet(int)>
    8bb4:	e3a02001 	mov	r2, #1
    8bb8:	e3a01013 	mov	r1, #19
    8bbc:	e51b0008 	ldr	r0, [fp, #-8]
    8bc0:	eb0002b7 	bl	96a4 <BusRaider::pinRawWrite(int, bool)>
    8bc4:	e3a0000a 	mov	r0, #10
    8bc8:	eb000e32 	bl	c498 <CTimer::SimpleusDelay(unsigned int)>
    8bcc:	e51b0008 	ldr	r0, [fp, #-8]
    8bd0:	eb0001eb 	bl	9384 <BusRaider::muxClear()>
    8bd4:	ea000003 	b	8be8 <BusRaider::controlRelease(bool)+0xdc>
    8bd8:	e3a02001 	mov	r2, #1
    8bdc:	e3a01013 	mov	r1, #19
    8be0:	e51b0008 	ldr	r0, [fp, #-8]
    8be4:	eb0002ae 	bl	96a4 <BusRaider::pinRawWrite(int, bool)>
    8be8:	e320f000 	nop	{0}
    8bec:	e24bd004 	sub	sp, fp, #4
    8bf0:	e8bd8800 	pop	{fp, pc}

00008bf4 <BusRaider::controlReqAndTake()>:
    8bf4:	e92d4800 	push	{fp, lr}
    8bf8:	e28db004 	add	fp, sp, #4
    8bfc:	e24dd010 	sub	sp, sp, #16
    8c00:	e50b0010 	str	r0, [fp, #-16]
    8c04:	e51b0010 	ldr	r0, [fp, #-16]
    8c08:	ebffff80 	bl	8a10 <BusRaider::controlRequestBus()>
    8c0c:	e3a03000 	mov	r3, #0
    8c10:	e50b3008 	str	r3, [fp, #-8]
    8c14:	e51b3008 	ldr	r3, [fp, #-8]
    8c18:	e3530063 	cmp	r3, #99	; 0x63
    8c1c:	ca00000f 	bgt	8c60 <BusRaider::controlReqAndTake()+0x6c>
    8c20:	e51b0010 	ldr	r0, [fp, #-16]
    8c24:	ebffff8a 	bl	8a54 <BusRaider::controlBusAcknowledged()>
    8c28:	e1a03000 	mov	r3, r0
    8c2c:	e3530000 	cmp	r3, #0
    8c30:	13a03001 	movne	r3, #1
    8c34:	03a03000 	moveq	r3, #0
    8c38:	e6ef3073 	uxtb	r3, r3
    8c3c:	e3530000 	cmp	r3, #0
    8c40:	1a000005 	bne	8c5c <BusRaider::controlReqAndTake()+0x68>
    8c44:	e3a00001 	mov	r0, #1
    8c48:	eb000e12 	bl	c498 <CTimer::SimpleusDelay(unsigned int)>
    8c4c:	e51b3008 	ldr	r3, [fp, #-8]
    8c50:	e2833001 	add	r3, r3, #1
    8c54:	e50b3008 	str	r3, [fp, #-8]
    8c58:	eaffffed 	b	8c14 <BusRaider::controlReqAndTake()+0x20>
    8c5c:	e320f000 	nop	{0}
    8c60:	e51b0010 	ldr	r0, [fp, #-16]
    8c64:	ebffff7a 	bl	8a54 <BusRaider::controlBusAcknowledged()>
    8c68:	e1a03000 	mov	r3, r0
    8c6c:	e3530000 	cmp	r3, #0
    8c70:	03a03001 	moveq	r3, #1
    8c74:	13a03000 	movne	r3, #0
    8c78:	e6ef3073 	uxtb	r3, r3
    8c7c:	e3530000 	cmp	r3, #0
    8c80:	0a000004 	beq	8c98 <BusRaider::controlReqAndTake()+0xa4>
    8c84:	e3a01000 	mov	r1, #0
    8c88:	e51b0010 	ldr	r0, [fp, #-16]
    8c8c:	ebffff9e 	bl	8b0c <BusRaider::controlRelease(bool)>
    8c90:	e3a03002 	mov	r3, #2
    8c94:	ea000002 	b	8ca4 <BusRaider::controlReqAndTake()+0xb0>
    8c98:	e51b0010 	ldr	r0, [fp, #-16]
    8c9c:	ebffff79 	bl	8a88 <BusRaider::controlTake()>
    8ca0:	e3a03000 	mov	r3, #0
    8ca4:	e1a00003 	mov	r0, r3
    8ca8:	e24bd004 	sub	sp, fp, #4
    8cac:	e8bd8800 	pop	{fp, pc}

00008cb0 <BusRaider::addrLowSet(unsigned long)>:
    8cb0:	e92d4800 	push	{fp, lr}
    8cb4:	e28db004 	add	fp, sp, #4
    8cb8:	e24dd010 	sub	sp, sp, #16
    8cbc:	e50b0010 	str	r0, [fp, #-16]
    8cc0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    8cc4:	e3a00064 	mov	r0, #100	; 0x64
    8cc8:	ebfffd73 	bl	829c <lowlevCycleDelay>
    8ccc:	e3a01004 	mov	r1, #4
    8cd0:	e51b0010 	ldr	r0, [fp, #-16]
    8cd4:	eb000198 	bl	933c <BusRaider::muxSet(int)>
    8cd8:	e3a00064 	mov	r0, #100	; 0x64
    8cdc:	ebfffd6e 	bl	829c <lowlevCycleDelay>
    8ce0:	e51b0010 	ldr	r0, [fp, #-16]
    8ce4:	eb0001a6 	bl	9384 <BusRaider::muxClear()>
    8ce8:	e3a03000 	mov	r3, #0
    8cec:	e50b3008 	str	r3, [fp, #-8]
    8cf0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    8cf4:	e6ef3073 	uxtb	r3, r3
    8cf8:	e2832001 	add	r2, r3, #1
    8cfc:	e51b3008 	ldr	r3, [fp, #-8]
    8d00:	e1520003 	cmp	r2, r3
    8d04:	9a00000d 	bls	8d40 <BusRaider::addrLowSet(unsigned long)+0x90>
    8d08:	e3a01801 	mov	r1, #65536	; 0x10000
    8d0c:	e59f0038 	ldr	r0, [pc, #56]	; 8d4c <BusRaider::addrLowSet(unsigned long)+0x9c>
    8d10:	ebfffd87 	bl	8334 <write32>
    8d14:	e3a00064 	mov	r0, #100	; 0x64
    8d18:	ebfffd5f 	bl	829c <lowlevCycleDelay>
    8d1c:	e3a01801 	mov	r1, #65536	; 0x10000
    8d20:	e59f0028 	ldr	r0, [pc, #40]	; 8d50 <BusRaider::addrLowSet(unsigned long)+0xa0>
    8d24:	ebfffd82 	bl	8334 <write32>
    8d28:	e3a00064 	mov	r0, #100	; 0x64
    8d2c:	ebfffd5a 	bl	829c <lowlevCycleDelay>
    8d30:	e51b3008 	ldr	r3, [fp, #-8]
    8d34:	e2833001 	add	r3, r3, #1
    8d38:	e50b3008 	str	r3, [fp, #-8]
    8d3c:	eaffffeb 	b	8cf0 <BusRaider::addrLowSet(unsigned long)+0x40>
    8d40:	e320f000 	nop	{0}
    8d44:	e24bd004 	sub	sp, fp, #4
    8d48:	e8bd8800 	pop	{fp, pc}
    8d4c:	2020001c 	.word	0x2020001c
    8d50:	20200028 	.word	0x20200028

00008d54 <BusRaider::addrLowInc()>:
    8d54:	e92d4800 	push	{fp, lr}
    8d58:	e28db004 	add	fp, sp, #4
    8d5c:	e24dd008 	sub	sp, sp, #8
    8d60:	e50b0008 	str	r0, [fp, #-8]
    8d64:	e3a01801 	mov	r1, #65536	; 0x10000
    8d68:	e59f0028 	ldr	r0, [pc, #40]	; 8d98 <BusRaider::addrLowInc()+0x44>
    8d6c:	ebfffd70 	bl	8334 <write32>
    8d70:	e3a00064 	mov	r0, #100	; 0x64
    8d74:	ebfffd48 	bl	829c <lowlevCycleDelay>
    8d78:	e3a01801 	mov	r1, #65536	; 0x10000
    8d7c:	e59f0018 	ldr	r0, [pc, #24]	; 8d9c <BusRaider::addrLowInc()+0x48>
    8d80:	ebfffd6b 	bl	8334 <write32>
    8d84:	e3a00064 	mov	r0, #100	; 0x64
    8d88:	ebfffd43 	bl	829c <lowlevCycleDelay>
    8d8c:	e320f000 	nop	{0}
    8d90:	e24bd004 	sub	sp, fp, #4
    8d94:	e8bd8800 	pop	{fp, pc}
    8d98:	2020001c 	.word	0x2020001c
    8d9c:	20200028 	.word	0x20200028

00008da0 <BusRaider::addrHighSet(unsigned long)>:
    8da0:	e92d4800 	push	{fp, lr}
    8da4:	e28db004 	add	fp, sp, #4
    8da8:	e24dd010 	sub	sp, sp, #16
    8dac:	e50b0010 	str	r0, [fp, #-16]
    8db0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    8db4:	e3a03000 	mov	r3, #0
    8db8:	e50b3008 	str	r3, [fp, #-8]
    8dbc:	e51b3008 	ldr	r3, [fp, #-8]
    8dc0:	e3530008 	cmp	r3, #8
    8dc4:	8a00001b 	bhi	8e38 <BusRaider::addrHighSet(unsigned long)+0x98>
    8dc8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    8dcc:	e2033080 	and	r3, r3, #128	; 0x80
    8dd0:	e3530000 	cmp	r3, #0
    8dd4:	0a000003 	beq	8de8 <BusRaider::addrHighSet(unsigned long)+0x48>
    8dd8:	e3a01007 	mov	r1, #7
    8ddc:	e51b0010 	ldr	r0, [fp, #-16]
    8de0:	eb000155 	bl	933c <BusRaider::muxSet(int)>
    8de4:	ea000002 	b	8df4 <BusRaider::addrHighSet(unsigned long)+0x54>
    8de8:	e3a01000 	mov	r1, #0
    8dec:	e51b0010 	ldr	r0, [fp, #-16]
    8df0:	eb000151 	bl	933c <BusRaider::muxSet(int)>
    8df4:	e3a00064 	mov	r0, #100	; 0x64
    8df8:	ebfffd27 	bl	829c <lowlevCycleDelay>
    8dfc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    8e00:	e1a03083 	lsl	r3, r3, #1
    8e04:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    8e08:	e3a01080 	mov	r1, #128	; 0x80
    8e0c:	e59f0040 	ldr	r0, [pc, #64]	; 8e54 <BusRaider::addrHighSet(unsigned long)+0xb4>
    8e10:	ebfffd47 	bl	8334 <write32>
    8e14:	e3a00064 	mov	r0, #100	; 0x64
    8e18:	ebfffd1f 	bl	829c <lowlevCycleDelay>
    8e1c:	e3a01080 	mov	r1, #128	; 0x80
    8e20:	e59f0030 	ldr	r0, [pc, #48]	; 8e58 <BusRaider::addrHighSet(unsigned long)+0xb8>
    8e24:	ebfffd42 	bl	8334 <write32>
    8e28:	e51b3008 	ldr	r3, [fp, #-8]
    8e2c:	e2833001 	add	r3, r3, #1
    8e30:	e50b3008 	str	r3, [fp, #-8]
    8e34:	eaffffe0 	b	8dbc <BusRaider::addrHighSet(unsigned long)+0x1c>
    8e38:	e3a00064 	mov	r0, #100	; 0x64
    8e3c:	ebfffd16 	bl	829c <lowlevCycleDelay>
    8e40:	e51b0010 	ldr	r0, [fp, #-16]
    8e44:	eb00014e 	bl	9384 <BusRaider::muxClear()>
    8e48:	e320f000 	nop	{0}
    8e4c:	e24bd004 	sub	sp, fp, #4
    8e50:	e8bd8800 	pop	{fp, pc}
    8e54:	2020001c 	.word	0x2020001c
    8e58:	20200028 	.word	0x20200028

00008e5c <BusRaider::addrSet(unsigned int)>:
    8e5c:	e92d4800 	push	{fp, lr}
    8e60:	e28db004 	add	fp, sp, #4
    8e64:	e24dd008 	sub	sp, sp, #8
    8e68:	e50b0008 	str	r0, [fp, #-8]
    8e6c:	e50b100c 	str	r1, [fp, #-12]
    8e70:	e51b300c 	ldr	r3, [fp, #-12]
    8e74:	e1a03423 	lsr	r3, r3, #8
    8e78:	e1a01003 	mov	r1, r3
    8e7c:	e51b0008 	ldr	r0, [fp, #-8]
    8e80:	ebffffc6 	bl	8da0 <BusRaider::addrHighSet(unsigned long)>
    8e84:	e51b300c 	ldr	r3, [fp, #-12]
    8e88:	e6ef3073 	uxtb	r3, r3
    8e8c:	e1a01003 	mov	r1, r3
    8e90:	e51b0008 	ldr	r0, [fp, #-8]
    8e94:	ebffff85 	bl	8cb0 <BusRaider::addrLowSet(unsigned long)>
    8e98:	e320f000 	nop	{0}
    8e9c:	e24bd004 	sub	sp, fp, #4
    8ea0:	e8bd8800 	pop	{fp, pc}

00008ea4 <BusRaider::byteWrite(unsigned long, int)>:
    8ea4:	e92d4800 	push	{fp, lr}
    8ea8:	e28db004 	add	fp, sp, #4
    8eac:	e24dd010 	sub	sp, sp, #16
    8eb0:	e50b0008 	str	r0, [fp, #-8]
    8eb4:	e50b100c 	str	r1, [fp, #-12]
    8eb8:	e50b2010 	str	r2, [fp, #-16]
    8ebc:	e51b300c 	ldr	r3, [fp, #-12]
    8ec0:	e6ef3073 	uxtb	r3, r3
    8ec4:	e1a01003 	mov	r1, r3
    8ec8:	e51b0008 	ldr	r0, [fp, #-8]
    8ecc:	eb000174 	bl	94a4 <BusRaider::pibSetValue(unsigned char)>
    8ed0:	e51b3010 	ldr	r3, [fp, #-16]
    8ed4:	e3530000 	cmp	r3, #0
    8ed8:	0a000001 	beq	8ee4 <BusRaider::byteWrite(unsigned long, int)+0x40>
    8edc:	e59f3068 	ldr	r3, [pc, #104]	; 8f4c <BusRaider::byteWrite(unsigned long, int)+0xa8>
    8ee0:	ea000000 	b	8ee8 <BusRaider::byteWrite(unsigned long, int)+0x44>
    8ee4:	e59f3064 	ldr	r3, [pc, #100]	; 8f50 <BusRaider::byteWrite(unsigned long, int)+0xac>
    8ee8:	e1a01003 	mov	r1, r3
    8eec:	e59f0060 	ldr	r0, [pc, #96]	; 8f54 <BusRaider::byteWrite(unsigned long, int)+0xb0>
    8ef0:	ebfffd0f 	bl	8334 <write32>
    8ef4:	e3a01c02 	mov	r1, #512	; 0x200
    8ef8:	e59f0058 	ldr	r0, [pc, #88]	; 8f58 <BusRaider::byteWrite(unsigned long, int)+0xb4>
    8efc:	ebfffd0c 	bl	8334 <write32>
    8f00:	e3a01802 	mov	r1, #131072	; 0x20000
    8f04:	e59f0048 	ldr	r0, [pc, #72]	; 8f54 <BusRaider::byteWrite(unsigned long, int)+0xb0>
    8f08:	ebfffd09 	bl	8334 <write32>
    8f0c:	e3a00064 	mov	r0, #100	; 0x64
    8f10:	ebfffce1 	bl	829c <lowlevCycleDelay>
    8f14:	e51b3010 	ldr	r3, [fp, #-16]
    8f18:	e3530000 	cmp	r3, #0
    8f1c:	0a000001 	beq	8f28 <BusRaider::byteWrite(unsigned long, int)+0x84>
    8f20:	e59f3034 	ldr	r3, [pc, #52]	; 8f5c <BusRaider::byteWrite(unsigned long, int)+0xb8>
    8f24:	ea000000 	b	8f2c <BusRaider::byteWrite(unsigned long, int)+0x88>
    8f28:	e59f3030 	ldr	r3, [pc, #48]	; 8f60 <BusRaider::byteWrite(unsigned long, int)+0xbc>
    8f2c:	e1a01003 	mov	r1, r3
    8f30:	e59f0020 	ldr	r0, [pc, #32]	; 8f58 <BusRaider::byteWrite(unsigned long, int)+0xb4>
    8f34:	ebfffcfe 	bl	8334 <write32>
    8f38:	e51b0008 	ldr	r0, [fp, #-8]
    8f3c:	eb000110 	bl	9384 <BusRaider::muxClear()>
    8f40:	e320f000 	nop	{0}
    8f44:	e24bd004 	sub	sp, fp, #4
    8f48:	e8bd8800 	pop	{fp, pc}
    8f4c:	00000e42 	.word	0x00000e42
    8f50:	00000e41 	.word	0x00000e41
    8f54:	20200028 	.word	0x20200028
    8f58:	2020001c 	.word	0x2020001c
    8f5c:	00020042 	.word	0x00020042
    8f60:	00020041 	.word	0x00020041

00008f64 <BusRaider::byteRead(int)>:
    8f64:	e92d4800 	push	{fp, lr}
    8f68:	e28db004 	add	fp, sp, #4
    8f6c:	e24dd010 	sub	sp, sp, #16
    8f70:	e50b0010 	str	r0, [fp, #-16]
    8f74:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    8f78:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    8f7c:	e3530000 	cmp	r3, #0
    8f80:	0a000001 	beq	8f8c <BusRaider::byteRead(int)+0x28>
    8f84:	e59f3078 	ldr	r3, [pc, #120]	; 9004 <BusRaider::byteRead(int)+0xa0>
    8f88:	ea000000 	b	8f90 <BusRaider::byteRead(int)+0x2c>
    8f8c:	e59f3074 	ldr	r3, [pc, #116]	; 9008 <BusRaider::byteRead(int)+0xa4>
    8f90:	e1a01003 	mov	r1, r3
    8f94:	e59f0070 	ldr	r0, [pc, #112]	; 900c <BusRaider::byteRead(int)+0xa8>
    8f98:	ebfffce5 	bl	8334 <write32>
    8f9c:	e3a01c02 	mov	r1, #512	; 0x200
    8fa0:	e59f0068 	ldr	r0, [pc, #104]	; 9010 <BusRaider::byteRead(int)+0xac>
    8fa4:	ebfffce2 	bl	8334 <write32>
    8fa8:	e3a00064 	mov	r0, #100	; 0x64
    8fac:	ebfffcba 	bl	829c <lowlevCycleDelay>
    8fb0:	e59f005c 	ldr	r0, [pc, #92]	; 9014 <BusRaider::byteRead(int)+0xb0>
    8fb4:	ebfffcd4 	bl	830c <read32>
    8fb8:	e1a03000 	mov	r3, r0
    8fbc:	e1a03a23 	lsr	r3, r3, #20
    8fc0:	e54b3005 	strb	r3, [fp, #-5]
    8fc4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    8fc8:	e3530000 	cmp	r3, #0
    8fcc:	0a000001 	beq	8fd8 <BusRaider::byteRead(int)+0x74>
    8fd0:	e59f3040 	ldr	r3, [pc, #64]	; 9018 <BusRaider::byteRead(int)+0xb4>
    8fd4:	ea000000 	b	8fdc <BusRaider::byteRead(int)+0x78>
    8fd8:	e59f303c 	ldr	r3, [pc, #60]	; 901c <BusRaider::byteRead(int)+0xb8>
    8fdc:	e1a01003 	mov	r1, r3
    8fe0:	e59f0028 	ldr	r0, [pc, #40]	; 9010 <BusRaider::byteRead(int)+0xac>
    8fe4:	ebfffcd2 	bl	8334 <write32>
    8fe8:	e3a01c0e 	mov	r1, #3584	; 0xe00
    8fec:	e59f0018 	ldr	r0, [pc, #24]	; 900c <BusRaider::byteRead(int)+0xa8>
    8ff0:	ebfffccf 	bl	8334 <write32>
    8ff4:	e55b3005 	ldrb	r3, [fp, #-5]
    8ff8:	e1a00003 	mov	r0, r3
    8ffc:	e24bd004 	sub	sp, fp, #4
    9000:	e8bd8800 	pop	{fp, pc}
    9004:	00040e02 	.word	0x00040e02
    9008:	00040e01 	.word	0x00040e01
    900c:	20200028 	.word	0x20200028
    9010:	2020001c 	.word	0x2020001c
    9014:	20200034 	.word	0x20200034
    9018:	00040002 	.word	0x00040002
    901c:	00040001 	.word	0x00040001

00009020 <BusRaider::blockWrite(unsigned long, unsigned char const*, unsigned long, int, int)>:
    9020:	e92d4800 	push	{fp, lr}
    9024:	e28db004 	add	fp, sp, #4
    9028:	e24dd018 	sub	sp, sp, #24
    902c:	e50b0010 	str	r0, [fp, #-16]
    9030:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    9034:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    9038:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    903c:	e59b3004 	ldr	r3, [fp, #4]
    9040:	e3530000 	cmp	r3, #0
    9044:	0a000008 	beq	906c <BusRaider::blockWrite(unsigned long, unsigned char const*, unsigned long, int, int)+0x4c>
    9048:	e51b0010 	ldr	r0, [fp, #-16]
    904c:	ebfffee8 	bl	8bf4 <BusRaider::controlReqAndTake()>
    9050:	e1a03000 	mov	r3, r0
    9054:	e54b3009 	strb	r3, [fp, #-9]
    9058:	e55b3009 	ldrb	r3, [fp, #-9]
    905c:	e3530000 	cmp	r3, #0
    9060:	0a000001 	beq	906c <BusRaider::blockWrite(unsigned long, unsigned char const*, unsigned long, int, int)+0x4c>
    9064:	e55b3009 	ldrb	r3, [fp, #-9]
    9068:	ea00002e 	b	9128 <BusRaider::blockWrite(unsigned long, unsigned char const*, unsigned long, int, int)+0x108>
    906c:	e51b0010 	ldr	r0, [fp, #-16]
    9070:	eb0000fc 	bl	9468 <BusRaider::pibSetIn()>
    9074:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
    9078:	e51b0010 	ldr	r0, [fp, #-16]
    907c:	ebffff76 	bl	8e5c <BusRaider::addrSet(unsigned int)>
    9080:	e51b0010 	ldr	r0, [fp, #-16]
    9084:	eb0000e5 	bl	9420 <BusRaider::pibSetOut()>
    9088:	e3a03000 	mov	r3, #0
    908c:	e50b3008 	str	r3, [fp, #-8]
    9090:	e51b2008 	ldr	r2, [fp, #-8]
    9094:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
    9098:	e1520003 	cmp	r2, r3
    909c:	2a000018 	bcs	9104 <BusRaider::blockWrite(unsigned long, unsigned char const*, unsigned long, int, int)+0xe4>
    90a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
    90a4:	e5d33000 	ldrb	r3, [r3]
    90a8:	e59b2008 	ldr	r2, [fp, #8]
    90ac:	e1a01003 	mov	r1, r3
    90b0:	e51b0010 	ldr	r0, [fp, #-16]
    90b4:	ebffff7a 	bl	8ea4 <BusRaider::byteWrite(unsigned long, int)>
    90b8:	e51b0010 	ldr	r0, [fp, #-16]
    90bc:	ebffff24 	bl	8d54 <BusRaider::addrLowInc()>
    90c0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
    90c4:	e2833001 	add	r3, r3, #1
    90c8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    90cc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    90d0:	e2833001 	add	r3, r3, #1
    90d4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    90d8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    90dc:	e6ef3073 	uxtb	r3, r3
    90e0:	e3530000 	cmp	r3, #0
    90e4:	1a000002 	bne	90f4 <BusRaider::blockWrite(unsigned long, unsigned char const*, unsigned long, int, int)+0xd4>
    90e8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
    90ec:	e51b0010 	ldr	r0, [fp, #-16]
    90f0:	ebffff59 	bl	8e5c <BusRaider::addrSet(unsigned int)>
    90f4:	e51b3008 	ldr	r3, [fp, #-8]
    90f8:	e2833001 	add	r3, r3, #1
    90fc:	e50b3008 	str	r3, [fp, #-8]
    9100:	eaffffe2 	b	9090 <BusRaider::blockWrite(unsigned long, unsigned char const*, unsigned long, int, int)+0x70>
    9104:	e51b0010 	ldr	r0, [fp, #-16]
    9108:	eb0000d6 	bl	9468 <BusRaider::pibSetIn()>
    910c:	e59b3004 	ldr	r3, [fp, #4]
    9110:	e3530000 	cmp	r3, #0
    9114:	0a000002 	beq	9124 <BusRaider::blockWrite(unsigned long, unsigned char const*, unsigned long, int, int)+0x104>
    9118:	e3a01000 	mov	r1, #0
    911c:	e51b0010 	ldr	r0, [fp, #-16]
    9120:	ebfffe79 	bl	8b0c <BusRaider::controlRelease(bool)>
    9124:	e3a03000 	mov	r3, #0
    9128:	e1a00003 	mov	r0, r3
    912c:	e24bd004 	sub	sp, fp, #4
    9130:	e8bd8800 	pop	{fp, pc}

00009134 <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)>:
    9134:	e92d4800 	push	{fp, lr}
    9138:	e28db004 	add	fp, sp, #4
    913c:	e24dd018 	sub	sp, sp, #24
    9140:	e50b0010 	str	r0, [fp, #-16]
    9144:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    9148:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    914c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    9150:	e59b3004 	ldr	r3, [fp, #4]
    9154:	e3530000 	cmp	r3, #0
    9158:	0a000008 	beq	9180 <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0x4c>
    915c:	e51b0010 	ldr	r0, [fp, #-16]
    9160:	ebfffea3 	bl	8bf4 <BusRaider::controlReqAndTake()>
    9164:	e1a03000 	mov	r3, r0
    9168:	e54b3009 	strb	r3, [fp, #-9]
    916c:	e55b3009 	ldrb	r3, [fp, #-9]
    9170:	e3530000 	cmp	r3, #0
    9174:	0a000001 	beq	9180 <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0x4c>
    9178:	e55b3009 	ldrb	r3, [fp, #-9]
    917c:	ea000047 	b	92a0 <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0x16c>
    9180:	e51b0010 	ldr	r0, [fp, #-16]
    9184:	eb0000b7 	bl	9468 <BusRaider::pibSetIn()>
    9188:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
    918c:	e51b0010 	ldr	r0, [fp, #-16]
    9190:	ebffff31 	bl	8e5c <BusRaider::addrSet(unsigned int)>
    9194:	e3a01c02 	mov	r1, #512	; 0x200
    9198:	e59f010c 	ldr	r0, [pc, #268]	; 92ac <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0x178>
    919c:	ebfffc64 	bl	8334 <write32>
    91a0:	e3a03000 	mov	r3, #0
    91a4:	e50b3008 	str	r3, [fp, #-8]
    91a8:	e51b2008 	ldr	r2, [fp, #-8]
    91ac:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
    91b0:	e1520003 	cmp	r2, r3
    91b4:	2a000030 	bcs	927c <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0x148>
    91b8:	e59b3008 	ldr	r3, [fp, #8]
    91bc:	e3530000 	cmp	r3, #0
    91c0:	0a000001 	beq	91cc <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0x98>
    91c4:	e59f30e4 	ldr	r3, [pc, #228]	; 92b0 <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0x17c>
    91c8:	ea000000 	b	91d0 <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0x9c>
    91cc:	e59f30e0 	ldr	r3, [pc, #224]	; 92b4 <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0x180>
    91d0:	e1a01003 	mov	r1, r3
    91d4:	e59f00dc 	ldr	r0, [pc, #220]	; 92b8 <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0x184>
    91d8:	ebfffc55 	bl	8334 <write32>
    91dc:	e3a00064 	mov	r0, #100	; 0x64
    91e0:	ebfffc2d 	bl	829c <lowlevCycleDelay>
    91e4:	e59f00d0 	ldr	r0, [pc, #208]	; 92bc <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0x188>
    91e8:	ebfffc47 	bl	830c <read32>
    91ec:	e1a03000 	mov	r3, r0
    91f0:	e1a03a23 	lsr	r3, r3, #20
    91f4:	e6ef2073 	uxtb	r2, r3
    91f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
    91fc:	e5c32000 	strb	r2, [r3]
    9200:	e59b3008 	ldr	r3, [fp, #8]
    9204:	e3530000 	cmp	r3, #0
    9208:	0a000001 	beq	9214 <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0xe0>
    920c:	e59f30ac 	ldr	r3, [pc, #172]	; 92c0 <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0x18c>
    9210:	ea000000 	b	9218 <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0xe4>
    9214:	e59f30a8 	ldr	r3, [pc, #168]	; 92c4 <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0x190>
    9218:	e1a01003 	mov	r1, r3
    921c:	e59f0088 	ldr	r0, [pc, #136]	; 92ac <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0x178>
    9220:	ebfffc43 	bl	8334 <write32>
    9224:	e3a00064 	mov	r0, #100	; 0x64
    9228:	ebfffc1b 	bl	829c <lowlevCycleDelay>
    922c:	e3a01801 	mov	r1, #65536	; 0x10000
    9230:	e59f0080 	ldr	r0, [pc, #128]	; 92b8 <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0x184>
    9234:	ebfffc3e 	bl	8334 <write32>
    9238:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
    923c:	e2833001 	add	r3, r3, #1
    9240:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    9244:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    9248:	e2833001 	add	r3, r3, #1
    924c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    9250:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    9254:	e6ef3073 	uxtb	r3, r3
    9258:	e3530000 	cmp	r3, #0
    925c:	1a000002 	bne	926c <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0x138>
    9260:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
    9264:	e51b0010 	ldr	r0, [fp, #-16]
    9268:	ebfffefb 	bl	8e5c <BusRaider::addrSet(unsigned int)>
    926c:	e51b3008 	ldr	r3, [fp, #-8]
    9270:	e2833001 	add	r3, r3, #1
    9274:	e50b3008 	str	r3, [fp, #-8]
    9278:	eaffffca 	b	91a8 <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0x74>
    927c:	e51b0010 	ldr	r0, [fp, #-16]
    9280:	eb00003f 	bl	9384 <BusRaider::muxClear()>
    9284:	e59b3004 	ldr	r3, [fp, #4]
    9288:	e3530000 	cmp	r3, #0
    928c:	0a000002 	beq	929c <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0x168>
    9290:	e3a01000 	mov	r1, #0
    9294:	e51b0010 	ldr	r0, [fp, #-16]
    9298:	ebfffe1b 	bl	8b0c <BusRaider::controlRelease(bool)>
    929c:	e3a03000 	mov	r3, #0
    92a0:	e1a00003 	mov	r0, r3
    92a4:	e24bd004 	sub	sp, fp, #4
    92a8:	e8bd8800 	pop	{fp, pc}
    92ac:	2020001c 	.word	0x2020001c
    92b0:	00040002 	.word	0x00040002
    92b4:	00040001 	.word	0x00040001
    92b8:	20200028 	.word	0x20200028
    92bc:	20200034 	.word	0x20200034
    92c0:	00050002 	.word	0x00050002
    92c4:	00050001 	.word	0x00050001

000092c8 <BusRaider::setPinOut(CGPIOPin&, int, bool)>:
    92c8:	e92d4800 	push	{fp, lr}
    92cc:	e28db004 	add	fp, sp, #4
    92d0:	e24dd010 	sub	sp, sp, #16
    92d4:	e50b0008 	str	r0, [fp, #-8]
    92d8:	e50b100c 	str	r1, [fp, #-12]
    92dc:	e50b2010 	str	r2, [fp, #-16]
    92e0:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    92e4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
    92e8:	e3a02000 	mov	r2, #0
    92ec:	e51b1010 	ldr	r1, [fp, #-16]
    92f0:	e51b0008 	ldr	r0, [fp, #-8]
    92f4:	eb000090 	bl	953c <BusRaider::pinRawMode(int, bool, bool)>
    92f8:	e320f000 	nop	{0}
    92fc:	e24bd004 	sub	sp, fp, #4
    9300:	e8bd8800 	pop	{fp, pc}

00009304 <BusRaider::setPinIn(CGPIOPin&, int)>:
    9304:	e92d4800 	push	{fp, lr}
    9308:	e28db004 	add	fp, sp, #4
    930c:	e24dd010 	sub	sp, sp, #16
    9310:	e50b0008 	str	r0, [fp, #-8]
    9314:	e50b100c 	str	r1, [fp, #-12]
    9318:	e50b2010 	str	r2, [fp, #-16]
    931c:	e3a03000 	mov	r3, #0
    9320:	e3a02001 	mov	r2, #1
    9324:	e51b1010 	ldr	r1, [fp, #-16]
    9328:	e51b0008 	ldr	r0, [fp, #-8]
    932c:	eb000082 	bl	953c <BusRaider::pinRawMode(int, bool, bool)>
    9330:	e320f000 	nop	{0}
    9334:	e24bd004 	sub	sp, fp, #4
    9338:	e8bd8800 	pop	{fp, pc}

0000933c <BusRaider::muxSet(int)>:
    933c:	e92d4800 	push	{fp, lr}
    9340:	e28db004 	add	fp, sp, #4
    9344:	e24dd008 	sub	sp, sp, #8
    9348:	e50b0008 	str	r0, [fp, #-8]
    934c:	e50b100c 	str	r1, [fp, #-12]
    9350:	e3a01c0e 	mov	r1, #3584	; 0xe00
    9354:	e59f0020 	ldr	r0, [pc, #32]	; 937c <BusRaider::muxSet(int)+0x40>
    9358:	ebfffbf5 	bl	8334 <write32>
    935c:	e51b300c 	ldr	r3, [fp, #-12]
    9360:	e1a03483 	lsl	r3, r3, #9
    9364:	e1a01003 	mov	r1, r3
    9368:	e59f0010 	ldr	r0, [pc, #16]	; 9380 <BusRaider::muxSet(int)+0x44>
    936c:	ebfffbf0 	bl	8334 <write32>
    9370:	e320f000 	nop	{0}
    9374:	e24bd004 	sub	sp, fp, #4
    9378:	e8bd8800 	pop	{fp, pc}
    937c:	20200028 	.word	0x20200028
    9380:	2020001c 	.word	0x2020001c

00009384 <BusRaider::muxClear()>:
    9384:	e92d4800 	push	{fp, lr}
    9388:	e28db004 	add	fp, sp, #4
    938c:	e24dd008 	sub	sp, sp, #8
    9390:	e50b0008 	str	r0, [fp, #-8]
    9394:	e3a01c0e 	mov	r1, #3584	; 0xe00
    9398:	e59f000c 	ldr	r0, [pc, #12]	; 93ac <BusRaider::muxClear()+0x28>
    939c:	ebfffbe4 	bl	8334 <write32>
    93a0:	e320f000 	nop	{0}
    93a4:	e24bd004 	sub	sp, fp, #4
    93a8:	e8bd8800 	pop	{fp, pc}
    93ac:	20200028 	.word	0x20200028

000093b0 <BusRaider::waitIntClear()>:
    93b0:	e92d4800 	push	{fp, lr}
    93b4:	e28db004 	add	fp, sp, #4
    93b8:	e24dd008 	sub	sp, sp, #8
    93bc:	e50b0008 	str	r0, [fp, #-8]
    93c0:	e3e01000 	mvn	r1, #0
    93c4:	e59f000c 	ldr	r0, [pc, #12]	; 93d8 <BusRaider::waitIntClear()+0x28>
    93c8:	ebfffbd9 	bl	8334 <write32>
    93cc:	e320f000 	nop	{0}
    93d0:	e24bd004 	sub	sp, fp, #4
    93d4:	e8bd8800 	pop	{fp, pc}
    93d8:	20200040 	.word	0x20200040

000093dc <BusRaider::waitIntDisable()>:
    93dc:	e92d4800 	push	{fp, lr}
    93e0:	e28db004 	add	fp, sp, #4
    93e4:	e24dd008 	sub	sp, sp, #8
    93e8:	e50b0008 	str	r0, [fp, #-8]
    93ec:	eb000752 	bl	b13c <CInterruptSystem::DisableFIQ()>
    93f0:	e320f000 	nop	{0}
    93f4:	e24bd004 	sub	sp, fp, #4
    93f8:	e8bd8800 	pop	{fp, pc}

000093fc <BusRaider::waitIntEnable()>:
    93fc:	e92d4800 	push	{fp, lr}
    9400:	e28db004 	add	fp, sp, #4
    9404:	e24dd008 	sub	sp, sp, #8
    9408:	e50b0008 	str	r0, [fp, #-8]
    940c:	e3a00000 	mov	r0, #0
    9410:	eb000701 	bl	b01c <CInterruptSystem::EnableFIQ(unsigned int)>
    9414:	e320f000 	nop	{0}
    9418:	e24bd004 	sub	sp, fp, #4
    941c:	e8bd8800 	pop	{fp, pc}

00009420 <BusRaider::pibSetOut()>:
    9420:	e92d4800 	push	{fp, lr}
    9424:	e28db004 	add	fp, sp, #4
    9428:	e24dd008 	sub	sp, sp, #8
    942c:	e50b0008 	str	r0, [fp, #-8]
    9430:	e59f0028 	ldr	r0, [pc, #40]	; 9460 <BusRaider::pibSetOut()+0x40>
    9434:	ebfffbb4 	bl	830c <read32>
    9438:	e1a03000 	mov	r3, r0
    943c:	e20324ff 	and	r2, r3, #-16777216	; 0xff000000
    9440:	e59f301c 	ldr	r3, [pc, #28]	; 9464 <BusRaider::pibSetOut()+0x44>
    9444:	e1823003 	orr	r3, r2, r3
    9448:	e1a01003 	mov	r1, r3
    944c:	e59f000c 	ldr	r0, [pc, #12]	; 9460 <BusRaider::pibSetOut()+0x40>
    9450:	ebfffbb7 	bl	8334 <write32>
    9454:	e320f000 	nop	{0}
    9458:	e24bd004 	sub	sp, fp, #4
    945c:	e8bd8800 	pop	{fp, pc}
    9460:	20200008 	.word	0x20200008
    9464:	00249249 	.word	0x00249249

00009468 <BusRaider::pibSetIn()>:
    9468:	e92d4800 	push	{fp, lr}
    946c:	e28db004 	add	fp, sp, #4
    9470:	e24dd008 	sub	sp, sp, #8
    9474:	e50b0008 	str	r0, [fp, #-8]
    9478:	e59f0020 	ldr	r0, [pc, #32]	; 94a0 <BusRaider::pibSetIn()+0x38>
    947c:	ebfffba2 	bl	830c <read32>
    9480:	e1a03000 	mov	r3, r0
    9484:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
    9488:	e1a01003 	mov	r1, r3
    948c:	e59f000c 	ldr	r0, [pc, #12]	; 94a0 <BusRaider::pibSetIn()+0x38>
    9490:	ebfffba7 	bl	8334 <write32>
    9494:	e320f000 	nop	{0}
    9498:	e24bd004 	sub	sp, fp, #4
    949c:	e8bd8800 	pop	{fp, pc}
    94a0:	20200008 	.word	0x20200008

000094a4 <BusRaider::pibSetValue(unsigned char)>:
    94a4:	e92d4800 	push	{fp, lr}
    94a8:	e28db004 	add	fp, sp, #4
    94ac:	e24dd010 	sub	sp, sp, #16
    94b0:	e50b0010 	str	r0, [fp, #-16]
    94b4:	e1a03001 	mov	r3, r1
    94b8:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    94bc:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
    94c0:	e1a03a03 	lsl	r3, r3, #20
    94c4:	e50b3008 	str	r3, [fp, #-8]
    94c8:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
    94cc:	e1a03a03 	lsl	r3, r3, #20
    94d0:	e1e03003 	mvn	r3, r3
    94d4:	e20336ff 	and	r3, r3, #267386880	; 0xff00000
    94d8:	e50b300c 	str	r3, [fp, #-12]
    94dc:	e51b1008 	ldr	r1, [fp, #-8]
    94e0:	e59f0018 	ldr	r0, [pc, #24]	; 9500 <BusRaider::pibSetValue(unsigned char)+0x5c>
    94e4:	ebfffb92 	bl	8334 <write32>
    94e8:	e51b100c 	ldr	r1, [fp, #-12]
    94ec:	e59f0010 	ldr	r0, [pc, #16]	; 9504 <BusRaider::pibSetValue(unsigned char)+0x60>
    94f0:	ebfffb8f 	bl	8334 <write32>
    94f4:	e320f000 	nop	{0}
    94f8:	e24bd004 	sub	sp, fp, #4
    94fc:	e8bd8800 	pop	{fp, pc}
    9500:	2020001c 	.word	0x2020001c
    9504:	20200028 	.word	0x20200028

00009508 <BusRaider::pibGetValue()>:
    9508:	e92d4800 	push	{fp, lr}
    950c:	e28db004 	add	fp, sp, #4
    9510:	e24dd008 	sub	sp, sp, #8
    9514:	e50b0008 	str	r0, [fp, #-8]
    9518:	e59f0018 	ldr	r0, [pc, #24]	; 9538 <BusRaider::pibGetValue()+0x30>
    951c:	ebfffb7a 	bl	830c <read32>
    9520:	e1a03000 	mov	r3, r0
    9524:	e1a03a23 	lsr	r3, r3, #20
    9528:	e6ef3073 	uxtb	r3, r3
    952c:	e1a00003 	mov	r0, r3
    9530:	e24bd004 	sub	sp, fp, #4
    9534:	e8bd8800 	pop	{fp, pc}
    9538:	20200034 	.word	0x20200034

0000953c <BusRaider::pinRawMode(int, bool, bool)>:
    953c:	e92d4800 	push	{fp, lr}
    9540:	e28db004 	add	fp, sp, #4
    9544:	e24dd020 	sub	sp, sp, #32
    9548:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    954c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    9550:	e1a01002 	mov	r1, r2
    9554:	e1a02003 	mov	r2, r3
    9558:	e1a03001 	mov	r3, r1
    955c:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
    9560:	e1a03002 	mov	r3, r2
    9564:	e54b301e 	strb	r3, [fp, #-30]	; 0xffffffe2
    9568:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
    956c:	e2233001 	eor	r3, r3, #1
    9570:	e6ef3073 	uxtb	r3, r3
    9574:	e3530000 	cmp	r3, #0
    9578:	0a000004 	beq	9590 <BusRaider::pinRawMode(int, bool, bool)+0x54>
    957c:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
    9580:	e1a02003 	mov	r2, r3
    9584:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
    9588:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
    958c:	eb000044 	bl	96a4 <BusRaider::pinRawWrite(int, bool)>
    9590:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
    9594:	e59f2104 	ldr	r2, [pc, #260]	; 96a0 <BusRaider::pinRawMode(int, bool, bool)+0x164>
    9598:	e0c21392 	smull	r1, r2, r2, r3
    959c:	e1a02142 	asr	r2, r2, #2
    95a0:	e1a03fc3 	asr	r3, r3, #31
    95a4:	e0423003 	sub	r3, r2, r3
    95a8:	e2833302 	add	r3, r3, #134217728	; 0x8000000
    95ac:	e2833702 	add	r3, r3, #524288	; 0x80000
    95b0:	e1a03103 	lsl	r3, r3, #2
    95b4:	e50b3008 	str	r3, [fp, #-8]
    95b8:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
    95bc:	e59f30dc 	ldr	r3, [pc, #220]	; 96a0 <BusRaider::pinRawMode(int, bool, bool)+0x164>
    95c0:	e0c31293 	smull	r1, r3, r3, r2
    95c4:	e1a01143 	asr	r1, r3, #2
    95c8:	e1a03fc2 	asr	r3, r2, #31
    95cc:	e0411003 	sub	r1, r1, r3
    95d0:	e1a03001 	mov	r3, r1
    95d4:	e1a03103 	lsl	r3, r3, #2
    95d8:	e0833001 	add	r3, r3, r1
    95dc:	e1a03083 	lsl	r3, r3, #1
    95e0:	e0421003 	sub	r1, r2, r3
    95e4:	e6ef3071 	uxtb	r3, r1
    95e8:	e1a02003 	mov	r2, r3
    95ec:	e1a02082 	lsl	r2, r2, #1
    95f0:	e0823003 	add	r3, r2, r3
    95f4:	e54b3009 	strb	r3, [fp, #-9]
    95f8:	e51b0008 	ldr	r0, [fp, #-8]
    95fc:	ebfffb42 	bl	830c <read32>
    9600:	e50b0010 	str	r0, [fp, #-16]
    9604:	e55b3009 	ldrb	r3, [fp, #-9]
    9608:	e3a02007 	mov	r2, #7
    960c:	e1a03312 	lsl	r3, r2, r3
    9610:	e1e03003 	mvn	r3, r3
    9614:	e1a02003 	mov	r2, r3
    9618:	e51b3010 	ldr	r3, [fp, #-16]
    961c:	e0033002 	and	r3, r3, r2
    9620:	e50b3010 	str	r3, [fp, #-16]
    9624:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
    9628:	e3530000 	cmp	r3, #0
    962c:	0a000001 	beq	9638 <BusRaider::pinRawMode(int, bool, bool)+0xfc>
    9630:	e3a03000 	mov	r3, #0
    9634:	ea000000 	b	963c <BusRaider::pinRawMode(int, bool, bool)+0x100>
    9638:	e3a03001 	mov	r3, #1
    963c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    9640:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
    9644:	e203200f 	and	r2, r3, #15
    9648:	e55b3009 	ldrb	r3, [fp, #-9]
    964c:	e1a03312 	lsl	r3, r2, r3
    9650:	e1a02003 	mov	r2, r3
    9654:	e51b3010 	ldr	r3, [fp, #-16]
    9658:	e1833002 	orr	r3, r3, r2
    965c:	e50b3010 	str	r3, [fp, #-16]
    9660:	e51b1010 	ldr	r1, [fp, #-16]
    9664:	e51b0008 	ldr	r0, [fp, #-8]
    9668:	ebfffb31 	bl	8334 <write32>
    966c:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
    9670:	e2233001 	eor	r3, r3, #1
    9674:	e6ef3073 	uxtb	r3, r3
    9678:	e3530000 	cmp	r3, #0
    967c:	0a000004 	beq	9694 <BusRaider::pinRawMode(int, bool, bool)+0x158>
    9680:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
    9684:	e1a02003 	mov	r2, r3
    9688:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
    968c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
    9690:	eb000003 	bl	96a4 <BusRaider::pinRawWrite(int, bool)>
    9694:	e320f000 	nop	{0}
    9698:	e24bd004 	sub	sp, fp, #4
    969c:	e8bd8800 	pop	{fp, pc}
    96a0:	66666667 	.word	0x66666667

000096a4 <BusRaider::pinRawWrite(int, bool)>:
    96a4:	e92d4800 	push	{fp, lr}
    96a8:	e28db004 	add	fp, sp, #4
    96ac:	e24dd010 	sub	sp, sp, #16
    96b0:	e50b0008 	str	r0, [fp, #-8]
    96b4:	e50b100c 	str	r1, [fp, #-12]
    96b8:	e1a03002 	mov	r3, r2
    96bc:	e54b300d 	strb	r3, [fp, #-13]
    96c0:	e55b300d 	ldrb	r3, [fp, #-13]
    96c4:	e3530000 	cmp	r3, #0
    96c8:	0a000011 	beq	9714 <BusRaider::pinRawWrite(int, bool)+0x70>
    96cc:	e51b300c 	ldr	r3, [fp, #-12]
    96d0:	e353001f 	cmp	r3, #31
    96d4:	ca000006 	bgt	96f4 <BusRaider::pinRawWrite(int, bool)+0x50>
    96d8:	e3a02001 	mov	r2, #1
    96dc:	e51b300c 	ldr	r3, [fp, #-12]
    96e0:	e1a03312 	lsl	r3, r2, r3
    96e4:	e1a01003 	mov	r1, r3
    96e8:	e59f0074 	ldr	r0, [pc, #116]	; 9764 <BusRaider::pinRawWrite(int, bool)+0xc0>
    96ec:	ebfffb10 	bl	8334 <write32>
    96f0:	ea000018 	b	9758 <BusRaider::pinRawWrite(int, bool)+0xb4>
    96f4:	e51b300c 	ldr	r3, [fp, #-12]
    96f8:	e2433020 	sub	r3, r3, #32
    96fc:	e3a02001 	mov	r2, #1
    9700:	e1a03312 	lsl	r3, r2, r3
    9704:	e1a01003 	mov	r1, r3
    9708:	e59f0058 	ldr	r0, [pc, #88]	; 9768 <BusRaider::pinRawWrite(int, bool)+0xc4>
    970c:	ebfffb08 	bl	8334 <write32>
    9710:	ea000010 	b	9758 <BusRaider::pinRawWrite(int, bool)+0xb4>
    9714:	e51b300c 	ldr	r3, [fp, #-12]
    9718:	e353001f 	cmp	r3, #31
    971c:	ca000006 	bgt	973c <BusRaider::pinRawWrite(int, bool)+0x98>
    9720:	e3a02001 	mov	r2, #1
    9724:	e51b300c 	ldr	r3, [fp, #-12]
    9728:	e1a03312 	lsl	r3, r2, r3
    972c:	e1a01003 	mov	r1, r3
    9730:	e59f0034 	ldr	r0, [pc, #52]	; 976c <BusRaider::pinRawWrite(int, bool)+0xc8>
    9734:	ebfffafe 	bl	8334 <write32>
    9738:	ea000006 	b	9758 <BusRaider::pinRawWrite(int, bool)+0xb4>
    973c:	e51b300c 	ldr	r3, [fp, #-12]
    9740:	e2433020 	sub	r3, r3, #32
    9744:	e3a02001 	mov	r2, #1
    9748:	e1a03312 	lsl	r3, r2, r3
    974c:	e1a01003 	mov	r1, r3
    9750:	e59f0018 	ldr	r0, [pc, #24]	; 9770 <BusRaider::pinRawWrite(int, bool)+0xcc>
    9754:	ebfffaf6 	bl	8334 <write32>
    9758:	e320f000 	nop	{0}
    975c:	e24bd004 	sub	sp, fp, #4
    9760:	e8bd8800 	pop	{fp, pc}
    9764:	2020001c 	.word	0x2020001c
    9768:	20200020 	.word	0x20200020
    976c:	20200028 	.word	0x20200028
    9770:	2020002c 	.word	0x2020002c

00009774 <BusRaider::pinRawRead(int)>:
    9774:	e92d4800 	push	{fp, lr}
    9778:	e28db004 	add	fp, sp, #4
    977c:	e24dd008 	sub	sp, sp, #8
    9780:	e50b0008 	str	r0, [fp, #-8]
    9784:	e50b100c 	str	r1, [fp, #-12]
    9788:	e51b300c 	ldr	r3, [fp, #-12]
    978c:	e353001f 	cmp	r3, #31
    9790:	ca00000a 	bgt	97c0 <BusRaider::pinRawRead(int)+0x4c>
    9794:	e59f005c 	ldr	r0, [pc, #92]	; 97f8 <BusRaider::pinRawRead(int)+0x84>
    9798:	ebfffadb 	bl	830c <read32>
    979c:	e1a02000 	mov	r2, r0
    97a0:	e51b300c 	ldr	r3, [fp, #-12]
    97a4:	e1a03332 	lsr	r3, r2, r3
    97a8:	e2033001 	and	r3, r3, #1
    97ac:	e3530000 	cmp	r3, #0
    97b0:	13a03001 	movne	r3, #1
    97b4:	03a03000 	moveq	r3, #0
    97b8:	e6ef3073 	uxtb	r3, r3
    97bc:	ea00000a 	b	97ec <BusRaider::pinRawRead(int)+0x78>
    97c0:	e59f0034 	ldr	r0, [pc, #52]	; 97fc <BusRaider::pinRawRead(int)+0x88>
    97c4:	ebfffad0 	bl	830c <read32>
    97c8:	e1a02000 	mov	r2, r0
    97cc:	e51b300c 	ldr	r3, [fp, #-12]
    97d0:	e2433020 	sub	r3, r3, #32
    97d4:	e1a03332 	lsr	r3, r2, r3
    97d8:	e2033001 	and	r3, r3, #1
    97dc:	e3530000 	cmp	r3, #0
    97e0:	13a03001 	movne	r3, #1
    97e4:	03a03000 	moveq	r3, #0
    97e8:	e6ef3073 	uxtb	r3, r3
    97ec:	e1a00003 	mov	r0, r3
    97f0:	e24bd004 	sub	sp, fp, #4
    97f4:	e8bd8800 	pop	{fp, pc}
    97f8:	20200034 	.word	0x20200034
    97fc:	20200038 	.word	0x20200038

00009800 <TargetMemory::clear()>:
    9800:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    9804:	e28db000 	add	fp, sp, #0
    9808:	e24dd014 	sub	sp, sp, #20
    980c:	e50b0010 	str	r0, [fp, #-16]
    9810:	e51b3010 	ldr	r3, [fp, #-16]
    9814:	e2833801 	add	r3, r3, #65536	; 0x10000
    9818:	e1a02003 	mov	r2, r3
    981c:	e3a03000 	mov	r3, #0
    9820:	e5823640 	str	r3, [r2, #1600]	; 0x640
    9824:	e3a03000 	mov	r3, #0
    9828:	e50b3008 	str	r3, [fp, #-8]
    982c:	e51b3008 	ldr	r3, [fp, #-8]
    9830:	e35300c7 	cmp	r3, #199	; 0xc7
    9834:	ca00000a 	bgt	9864 <TargetMemory::clear()+0x64>
    9838:	e51b2010 	ldr	r2, [fp, #-16]
    983c:	e51b3008 	ldr	r3, [fp, #-8]
    9840:	e2833a02 	add	r3, r3, #8192	; 0x2000
    9844:	e1a03183 	lsl	r3, r3, #3
    9848:	e0823003 	add	r3, r2, r3
    984c:	e3a02000 	mov	r2, #0
    9850:	e5832004 	str	r2, [r3, #4]
    9854:	e51b3008 	ldr	r3, [fp, #-8]
    9858:	e2833001 	add	r3, r3, #1
    985c:	e50b3008 	str	r3, [fp, #-8]
    9860:	eafffff1 	b	982c <TargetMemory::clear()+0x2c>
    9864:	e3a03000 	mov	r3, #0
    9868:	e50b300c 	str	r3, [fp, #-12]
    986c:	e51b300c 	ldr	r3, [fp, #-12]
    9870:	e3530801 	cmp	r3, #65536	; 0x10000
    9874:	aa000008 	bge	989c <TargetMemory::clear()+0x9c>
    9878:	e51b2010 	ldr	r2, [fp, #-16]
    987c:	e51b300c 	ldr	r3, [fp, #-12]
    9880:	e0823003 	add	r3, r2, r3
    9884:	e3a02000 	mov	r2, #0
    9888:	e5c32000 	strb	r2, [r3]
    988c:	e51b300c 	ldr	r3, [fp, #-12]
    9890:	e2833001 	add	r3, r3, #1
    9894:	e50b300c 	str	r3, [fp, #-12]
    9898:	eafffff3 	b	986c <TargetMemory::clear()+0x6c>
    989c:	e320f000 	nop	{0}
    98a0:	e28bd000 	add	sp, fp, #0
    98a4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    98a8:	e12fff1e 	bx	lr

000098ac <TargetMemory::dataBlockStore(unsigned long, unsigned char const*, unsigned long)>:
    98ac:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    98b0:	e28db000 	add	fp, sp, #0
    98b4:	e24dd024 	sub	sp, sp, #36	; 0x24
    98b8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    98bc:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    98c0:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
    98c4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    98c8:	e3e03000 	mvn	r3, #0
    98cc:	e50b3008 	str	r3, [fp, #-8]
    98d0:	e3a03000 	mov	r3, #0
    98d4:	e50b300c 	str	r3, [fp, #-12]
    98d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
    98dc:	e2833801 	add	r3, r3, #65536	; 0x10000
    98e0:	e5932640 	ldr	r2, [r3, #1600]	; 0x640
    98e4:	e51b300c 	ldr	r3, [fp, #-12]
    98e8:	e1520003 	cmp	r2, r3
    98ec:	da000022 	ble	997c <TargetMemory::dataBlockStore(unsigned long, unsigned char const*, unsigned long)+0xd0>
    98f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
    98f4:	e51b200c 	ldr	r2, [fp, #-12]
    98f8:	e2822a02 	add	r2, r2, #8192	; 0x2000
    98fc:	e7932182 	ldr	r2, [r3, r2, lsl #3]
    9900:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
    9904:	e51b300c 	ldr	r3, [fp, #-12]
    9908:	e2833a02 	add	r3, r3, #8192	; 0x2000
    990c:	e1a03183 	lsl	r3, r3, #3
    9910:	e0813003 	add	r3, r1, r3
    9914:	e5933004 	ldr	r3, [r3, #4]
    9918:	e0822003 	add	r2, r2, r3
    991c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
    9920:	e1520003 	cmp	r2, r3
    9924:	1a000010 	bne	996c <TargetMemory::dataBlockStore(unsigned long, unsigned char const*, unsigned long)+0xc0>
    9928:	e51b300c 	ldr	r3, [fp, #-12]
    992c:	e50b3008 	str	r3, [fp, #-8]
    9930:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
    9934:	e51b300c 	ldr	r3, [fp, #-12]
    9938:	e2833a02 	add	r3, r3, #8192	; 0x2000
    993c:	e1a03183 	lsl	r3, r3, #3
    9940:	e0823003 	add	r3, r2, r3
    9944:	e5932004 	ldr	r2, [r3, #4]
    9948:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
    994c:	e0822003 	add	r2, r2, r3
    9950:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
    9954:	e51b300c 	ldr	r3, [fp, #-12]
    9958:	e2833a02 	add	r3, r3, #8192	; 0x2000
    995c:	e1a03183 	lsl	r3, r3, #3
    9960:	e0813003 	add	r3, r1, r3
    9964:	e5832004 	str	r2, [r3, #4]
    9968:	ea000003 	b	997c <TargetMemory::dataBlockStore(unsigned long, unsigned char const*, unsigned long)+0xd0>
    996c:	e51b300c 	ldr	r3, [fp, #-12]
    9970:	e2833001 	add	r3, r3, #1
    9974:	e50b300c 	str	r3, [fp, #-12]
    9978:	eaffffd6 	b	98d8 <TargetMemory::dataBlockStore(unsigned long, unsigned char const*, unsigned long)+0x2c>
    997c:	e51b3008 	ldr	r3, [fp, #-8]
    9980:	e3730001 	cmn	r3, #1
    9984:	1a00001b 	bne	99f8 <TargetMemory::dataBlockStore(unsigned long, unsigned char const*, unsigned long)+0x14c>
    9988:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
    998c:	e2833801 	add	r3, r3, #65536	; 0x10000
    9990:	e5933640 	ldr	r3, [r3, #1600]	; 0x640
    9994:	e35300c7 	cmp	r3, #199	; 0xc7
    9998:	ca00002e 	bgt	9a58 <TargetMemory::dataBlockStore(unsigned long, unsigned char const*, unsigned long)+0x1ac>
    999c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
    99a0:	e2833801 	add	r3, r3, #65536	; 0x10000
    99a4:	e5932640 	ldr	r2, [r3, #1600]	; 0x640
    99a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
    99ac:	e2822a02 	add	r2, r2, #8192	; 0x2000
    99b0:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
    99b4:	e7831182 	str	r1, [r3, r2, lsl #3]
    99b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
    99bc:	e2833801 	add	r3, r3, #65536	; 0x10000
    99c0:	e5933640 	ldr	r3, [r3, #1600]	; 0x640
    99c4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
    99c8:	e2833a02 	add	r3, r3, #8192	; 0x2000
    99cc:	e1a03183 	lsl	r3, r3, #3
    99d0:	e0823003 	add	r3, r2, r3
    99d4:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
    99d8:	e5832004 	str	r2, [r3, #4]
    99dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
    99e0:	e2833801 	add	r3, r3, #65536	; 0x10000
    99e4:	e5933640 	ldr	r3, [r3, #1600]	; 0x640
    99e8:	e2833001 	add	r3, r3, #1
    99ec:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
    99f0:	e2822801 	add	r2, r2, #65536	; 0x10000
    99f4:	e5823640 	str	r3, [r2, #1600]	; 0x640
    99f8:	e3a03000 	mov	r3, #0
    99fc:	e50b3010 	str	r3, [fp, #-16]
    9a00:	e51b2010 	ldr	r2, [fp, #-16]
    9a04:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
    9a08:	e1520003 	cmp	r2, r3
    9a0c:	2a000012 	bcs	9a5c <TargetMemory::dataBlockStore(unsigned long, unsigned char const*, unsigned long)+0x1b0>
    9a10:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
    9a14:	e51b3010 	ldr	r3, [fp, #-16]
    9a18:	e0823003 	add	r3, r2, r3
    9a1c:	e3530801 	cmp	r3, #65536	; 0x10000
    9a20:	2a000008 	bcs	9a48 <TargetMemory::dataBlockStore(unsigned long, unsigned char const*, unsigned long)+0x19c>
    9a24:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
    9a28:	e51b3010 	ldr	r3, [fp, #-16]
    9a2c:	e0823003 	add	r3, r2, r3
    9a30:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
    9a34:	e51b2010 	ldr	r2, [fp, #-16]
    9a38:	e0812002 	add	r2, r1, r2
    9a3c:	e5d21000 	ldrb	r1, [r2]
    9a40:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
    9a44:	e7c21003 	strb	r1, [r2, r3]
    9a48:	e51b3010 	ldr	r3, [fp, #-16]
    9a4c:	e2833001 	add	r3, r3, #1
    9a50:	e50b3010 	str	r3, [fp, #-16]
    9a54:	eaffffe9 	b	9a00 <TargetMemory::dataBlockStore(unsigned long, unsigned char const*, unsigned long)+0x154>
    9a58:	e320f000 	nop	{0}
    9a5c:	e28bd000 	add	sp, fp, #0
    9a60:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    9a64:	e12fff1e 	bx	lr

00009a68 <TargetMemory::getNumBlocks()>:
    9a68:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    9a6c:	e28db000 	add	fp, sp, #0
    9a70:	e24dd00c 	sub	sp, sp, #12
    9a74:	e50b0008 	str	r0, [fp, #-8]
    9a78:	e51b3008 	ldr	r3, [fp, #-8]
    9a7c:	e2833801 	add	r3, r3, #65536	; 0x10000
    9a80:	e5933640 	ldr	r3, [r3, #1600]	; 0x640
    9a84:	e1a00003 	mov	r0, r3
    9a88:	e28bd000 	add	sp, fp, #0
    9a8c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    9a90:	e12fff1e 	bx	lr

00009a94 <TargetMemory::getMemoryBlock(int)>:
    9a94:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    9a98:	e28db000 	add	fp, sp, #0
    9a9c:	e24dd00c 	sub	sp, sp, #12
    9aa0:	e50b0008 	str	r0, [fp, #-8]
    9aa4:	e50b100c 	str	r1, [fp, #-12]
    9aa8:	e51b300c 	ldr	r3, [fp, #-12]
    9aac:	e2833a02 	add	r3, r3, #8192	; 0x2000
    9ab0:	e1a03183 	lsl	r3, r3, #3
    9ab4:	e51b2008 	ldr	r2, [fp, #-8]
    9ab8:	e0823003 	add	r3, r2, r3
    9abc:	e1a00003 	mov	r0, r3
    9ac0:	e28bd000 	add	sp, fp, #0
    9ac4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    9ac8:	e12fff1e 	bx	lr

00009acc <TargetMemory::memoryPtr()>:
    9acc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    9ad0:	e28db000 	add	fp, sp, #0
    9ad4:	e24dd00c 	sub	sp, sp, #12
    9ad8:	e50b0008 	str	r0, [fp, #-8]
    9adc:	e51b3008 	ldr	r3, [fp, #-8]
    9ae0:	e1a00003 	mov	r0, r3
    9ae4:	e28bd000 	add	sp, fp, #0
    9ae8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    9aec:	e12fff1e 	bx	lr

00009af0 <CActLED::~CActLED()>:
    9af0:	e3a02000 	mov	r2, #0
    9af4:	e59f3004 	ldr	r3, [pc, #4]	; 9b00 <CActLED::~CActLED()+0x10>
    9af8:	e5832000 	str	r2, [r3]
    9afc:	e12fff1e 	bx	lr
    9b00:	00011328 	.word	0x00011328

00009b04 <CActLED::On()>:
    9b04:	e5903000 	ldr	r3, [r0]
    9b08:	e3530000 	cmp	r3, #0
    9b0c:	0a000002 	beq	9b1c <CActLED::On()+0x18>
    9b10:	e5d01008 	ldrb	r1, [r0, #8]
    9b14:	e1a00003 	mov	r0, r3
    9b18:	ea00015f 	b	a09c <CGPIOPin::Write(unsigned int)>
    9b1c:	e5903004 	ldr	r3, [r0, #4]
    9b20:	e3530000 	cmp	r3, #0
    9b24:	012fff1e 	bxeq	lr
    9b28:	e5d01008 	ldrb	r1, [r0, #8]
    9b2c:	e1a00003 	mov	r0, r3
    9b30:	ea000b31 	b	c7fc <CVirtualGPIOPin::Write(unsigned int)>

00009b34 <CActLED::Off()>:
    9b34:	e5903000 	ldr	r3, [r0]
    9b38:	e3530000 	cmp	r3, #0
    9b3c:	0a000003 	beq	9b50 <CActLED::Off()+0x1c>
    9b40:	e5d01008 	ldrb	r1, [r0, #8]
    9b44:	e1a00003 	mov	r0, r3
    9b48:	e2211001 	eor	r1, r1, #1
    9b4c:	ea000152 	b	a09c <CGPIOPin::Write(unsigned int)>
    9b50:	e5903004 	ldr	r3, [r0, #4]
    9b54:	e3530000 	cmp	r3, #0
    9b58:	012fff1e 	bxeq	lr
    9b5c:	e5d01008 	ldrb	r1, [r0, #8]
    9b60:	e1a00003 	mov	r0, r3
    9b64:	e2211001 	eor	r1, r1, #1
    9b68:	ea000b23 	b	c7fc <CVirtualGPIOPin::Write(unsigned int)>

00009b6c <CActLED::CActLED()>:
    9b6c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    9b70:	e3a05000 	mov	r5, #0
    9b74:	e1a04000 	mov	r4, r0
    9b78:	e24dd024 	sub	sp, sp, #36	; 0x24
    9b7c:	e59f314c 	ldr	r3, [pc, #332]	; 9cd0 <CActLED::CActLED()+0x164>
    9b80:	e5805000 	str	r5, [r0]
    9b84:	e5805004 	str	r5, [r0, #4]
    9b88:	e28d000c 	add	r0, sp, #12
    9b8c:	e5834000 	str	r4, [r3]
    9b90:	eb000067 	bl	9d34 <CBcmPropertyTags::CBcmPropertyTags()>
    9b94:	e3a03010 	mov	r3, #16
    9b98:	e58d5000 	str	r5, [sp]
    9b9c:	e28d000c 	add	r0, sp, #12
    9ba0:	e08d2003 	add	r2, sp, r3
    9ba4:	e59f1128 	ldr	r1, [pc, #296]	; 9cd4 <CActLED::CActLED()+0x168>
    9ba8:	eb0000b8 	bl	9e90 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    9bac:	e2506000 	subs	r6, r0, #0
    9bb0:	0a00001f 	beq	9c34 <CActLED::CActLED()+0xc8>
    9bb4:	e59d301c 	ldr	r3, [sp, #28]
    9bb8:	e3130502 	tst	r3, #8388608	; 0x800000
    9bbc:	0a000021 	beq	9c48 <CActLED::CActLED()+0xdc>
    9bc0:	e1a03223 	lsr	r3, r3, #4
    9bc4:	e6ef3073 	uxtb	r3, r3
    9bc8:	e243200d 	sub	r2, r3, #13
    9bcc:	e3530008 	cmp	r3, #8
    9bd0:	13520001 	cmpne	r2, #1
    9bd4:	93a01001 	movls	r1, #1
    9bd8:	83a01000 	movhi	r1, #0
    9bdc:	e353000c 	cmp	r3, #12
    9be0:	13530009 	cmpne	r3, #9
    9be4:	03a06001 	moveq	r6, #1
    9be8:	13a06000 	movne	r6, #0
    9bec:	e3530001 	cmp	r3, #1
    9bf0:	9a000017 	bls	9c54 <CActLED::CActLED()+0xe8>
    9bf4:	e3510000 	cmp	r1, #0
    9bf8:	0a00002a 	beq	9ca8 <CActLED::CActLED()+0x13c>
    9bfc:	e3520001 	cmp	r2, #1
    9c00:	8a000020 	bhi	9c88 <CActLED::CActLED()+0x11c>
    9c04:	e3a00028 	mov	r0, #40	; 0x28
    9c08:	eb000caf 	bl	cecc <operator new(unsigned int)>
    9c0c:	e3a02001 	mov	r2, #1
    9c10:	e1a07000 	mov	r7, r0
    9c14:	e1a03005 	mov	r3, r5
    9c18:	e3a0101d 	mov	r1, #29
    9c1c:	e0266002 	eor	r6, r6, r2
    9c20:	eb0003bf 	bl	ab24 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    9c24:	e5847000 	str	r7, [r4]
    9c28:	e5c46008 	strb	r6, [r4, #8]
    9c2c:	e1a00004 	mov	r0, r4
    9c30:	ebffffbf 	bl	9b34 <CActLED::Off()>
    9c34:	e28d000c 	add	r0, sp, #12
    9c38:	eb000043 	bl	9d4c <CBcmPropertyTags::~CBcmPropertyTags()>
    9c3c:	e1a00004 	mov	r0, r4
    9c40:	e28dd024 	add	sp, sp, #36	; 0x24
    9c44:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    9c48:	e6ff3073 	uxth	r3, r3
    9c4c:	e353000f 	cmp	r3, #15
    9c50:	8a000015 	bhi	9cac <CActLED::CActLED()+0x140>
    9c54:	e3a00028 	mov	r0, #40	; 0x28
    9c58:	eb000c9b 	bl	cecc <operator new(unsigned int)>
    9c5c:	e3a03000 	mov	r3, #0
    9c60:	e3a02001 	mov	r2, #1
    9c64:	e3a01010 	mov	r1, #16
    9c68:	e1a05000 	mov	r5, r0
    9c6c:	eb0003ac 	bl	ab24 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    9c70:	e3a03000 	mov	r3, #0
    9c74:	e5845000 	str	r5, [r4]
    9c78:	e5c43008 	strb	r3, [r4, #8]
    9c7c:	e1a00004 	mov	r0, r4
    9c80:	ebffffab 	bl	9b34 <CActLED::Off()>
    9c84:	eaffffea 	b	9c34 <CActLED::CActLED()+0xc8>
    9c88:	e3a00010 	mov	r0, #16
    9c8c:	eb000c8e 	bl	cecc <operator new(unsigned int)>
    9c90:	e1a07000 	mov	r7, r0
    9c94:	e1a01005 	mov	r1, r5
    9c98:	eb000a86 	bl	c6b8 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)>
    9c9c:	e2266001 	eor	r6, r6, #1
    9ca0:	e5847004 	str	r7, [r4, #4]
    9ca4:	eaffffdf 	b	9c28 <CActLED::CActLED()+0xbc>
    9ca8:	e2266001 	eor	r6, r6, #1
    9cac:	e3a00028 	mov	r0, #40	; 0x28
    9cb0:	eb000c85 	bl	cecc <operator new(unsigned int)>
    9cb4:	e1a05000 	mov	r5, r0
    9cb8:	e3a03000 	mov	r3, #0
    9cbc:	e3a02001 	mov	r2, #1
    9cc0:	e3a0102f 	mov	r1, #47	; 0x2f
    9cc4:	eb000396 	bl	ab24 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    9cc8:	e5845000 	str	r5, [r4]
    9ccc:	eaffffd5 	b	9c28 <CActLED::CActLED()+0xbc>
    9cd0:	00011328 	.word	0x00011328
    9cd4:	00010002 	.word	0x00010002

00009cd8 <CActLED::Blink(unsigned int, unsigned int, unsigned int)>:
    9cd8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9cdc:	e2516000 	subs	r6, r1, #0
    9ce0:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    9ce4:	e1a08003 	mov	r8, r3
    9ce8:	e1a07002 	mov	r7, r2
    9cec:	e1a05000 	mov	r5, r0
    9cf0:	e3a04001 	mov	r4, #1
    9cf4:	e1a00005 	mov	r0, r5
    9cf8:	ebffff81 	bl	9b04 <CActLED::On()>
    9cfc:	e1a00007 	mov	r0, r7
    9d00:	eb0009dd 	bl	c47c <CTimer::SimpleMsDelay(unsigned int)>
    9d04:	e1a00005 	mov	r0, r5
    9d08:	ebffff89 	bl	9b34 <CActLED::Off()>
    9d0c:	e2844001 	add	r4, r4, #1
    9d10:	e1a00008 	mov	r0, r8
    9d14:	eb0009d8 	bl	c47c <CTimer::SimpleMsDelay(unsigned int)>
    9d18:	e1560004 	cmp	r6, r4
    9d1c:	2afffff4 	bcs	9cf4 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x1c>
    9d20:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00009d24 <CActLED::Get()>:
    9d24:	e59f3004 	ldr	r3, [pc, #4]	; 9d30 <CActLED::Get()+0xc>
    9d28:	e5930000 	ldr	r0, [r3]
    9d2c:	e12fff1e 	bx	lr
    9d30:	00011328 	.word	0x00011328

00009d34 <CBcmPropertyTags::CBcmPropertyTags()>:
    9d34:	e92d4010 	push	{r4, lr}
    9d38:	e1a04000 	mov	r4, r0
    9d3c:	e3a01008 	mov	r1, #8
    9d40:	eb000e13 	bl	d594 <CBcmMailBox::CBcmMailBox(unsigned int)>
    9d44:	e1a00004 	mov	r0, r4
    9d48:	e8bd8010 	pop	{r4, pc}

00009d4c <CBcmPropertyTags::~CBcmPropertyTags()>:
    9d4c:	e92d4010 	push	{r4, lr}
    9d50:	e1a04000 	mov	r4, r0
    9d54:	eb000e10 	bl	d59c <CBcmMailBox::~CBcmMailBox()>
    9d58:	e1a00004 	mov	r0, r4
    9d5c:	e8bd8010 	pop	{r4, pc}

00009d60 <CBcmPropertyTags::GetTags(void*, unsigned int)>:
    9d60:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    9d64:	e2519000 	subs	r9, r1, #0
    9d68:	e1a0a000 	mov	sl, r0
    9d6c:	e1a07002 	mov	r7, r2
    9d70:	0a00003d 	beq	9e6c <CBcmPropertyTags::GetTags(void*, unsigned int)+0x10c>
    9d74:	e357000f 	cmp	r7, #15
    9d78:	9a000036 	bls	9e58 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xf8>
    9d7c:	e287600c 	add	r6, r7, #12
    9d80:	e3160003 	tst	r6, #3
    9d84:	1a00002e 	bne	9e44 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xe4>
    9d88:	e3a00000 	mov	r0, #0
    9d8c:	eb000bbd 	bl	cc88 <CMemorySystem::GetCoherentPage(unsigned int)>
    9d90:	e3a05000 	mov	r5, #0
    9d94:	e1a04000 	mov	r4, r0
    9d98:	e1a01426 	lsr	r1, r6, #8
    9d9c:	e1a02826 	lsr	r2, r6, #16
    9da0:	e1a03c26 	lsr	r3, r6, #24
    9da4:	e2808008 	add	r8, r0, #8
    9da8:	e5c06000 	strb	r6, [r0]
    9dac:	e5c01001 	strb	r1, [r0, #1]
    9db0:	e5c02002 	strb	r2, [r0, #2]
    9db4:	e5c03003 	strb	r3, [r0, #3]
    9db8:	e1a02007 	mov	r2, r7
    9dbc:	e1a00008 	mov	r0, r8
    9dc0:	e5c45004 	strb	r5, [r4, #4]
    9dc4:	e5c45005 	strb	r5, [r4, #5]
    9dc8:	e5c45006 	strb	r5, [r4, #6]
    9dcc:	e5c45007 	strb	r5, [r4, #7]
    9dd0:	e1a01009 	mov	r1, r9
    9dd4:	eb0009f0 	bl	c59c <memcpy>
    9dd8:	e7885007 	str	r5, [r8, r7]
    9ddc:	ee075f9a 	mcr	15, 0, r5, cr7, cr10, {4}
    9de0:	e3c46103 	bic	r6, r4, #-1073741824	; 0xc0000000
    9de4:	e3866101 	orr	r6, r6, #1073741824	; 0x40000000
    9de8:	e1a0000a 	mov	r0, sl
    9dec:	e1a01006 	mov	r1, r6
    9df0:	eb000e19 	bl	d65c <CBcmMailBox::WriteRead(unsigned int)>
    9df4:	e1560000 	cmp	r6, r0
    9df8:	0a000001 	beq	9e04 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xa4>
    9dfc:	e3a00000 	mov	r0, #0
    9e00:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    9e04:	ee075fba 	mcr	15, 0, r5, cr7, cr10, {5}
    9e08:	e5d42005 	ldrb	r2, [r4, #5]
    9e0c:	e5d43004 	ldrb	r3, [r4, #4]
    9e10:	e5d41006 	ldrb	r1, [r4, #6]
    9e14:	e1833402 	orr	r3, r3, r2, lsl #8
    9e18:	e5d42007 	ldrb	r2, [r4, #7]
    9e1c:	e1833801 	orr	r3, r3, r1, lsl #16
    9e20:	e1833c02 	orr	r3, r3, r2, lsl #24
    9e24:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
    9e28:	1afffff3 	bne	9dfc <CBcmPropertyTags::GetTags(void*, unsigned int)+0x9c>
    9e2c:	e1a02007 	mov	r2, r7
    9e30:	e1a01008 	mov	r1, r8
    9e34:	e1a00009 	mov	r0, r9
    9e38:	eb0009d7 	bl	c59c <memcpy>
    9e3c:	e3a00001 	mov	r0, #1
    9e40:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    9e44:	e3a02053 	mov	r2, #83	; 0x53
    9e48:	e59f1030 	ldr	r1, [pc, #48]	; 9e80 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x120>
    9e4c:	e59f0030 	ldr	r0, [pc, #48]	; 9e84 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x124>
    9e50:	eb000dab 	bl	d504 <assertion_failed>
    9e54:	eaffffcb 	b	9d88 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x28>
    9e58:	e3a02051 	mov	r2, #81	; 0x51
    9e5c:	e59f101c 	ldr	r1, [pc, #28]	; 9e80 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x120>
    9e60:	e59f0020 	ldr	r0, [pc, #32]	; 9e88 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x128>
    9e64:	eb000da6 	bl	d504 <assertion_failed>
    9e68:	eaffffc3 	b	9d7c <CBcmPropertyTags::GetTags(void*, unsigned int)+0x1c>
    9e6c:	e3a02050 	mov	r2, #80	; 0x50
    9e70:	e59f1008 	ldr	r1, [pc, #8]	; 9e80 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x120>
    9e74:	e59f0010 	ldr	r0, [pc, #16]	; 9e8c <CBcmPropertyTags::GetTags(void*, unsigned int)+0x12c>
    9e78:	eb000da1 	bl	d504 <assertion_failed>
    9e7c:	eaffffbc 	b	9d74 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x14>
    9e80:	00010378 	.word	0x00010378
    9e84:	000103c4 	.word	0x000103c4
    9e88:	00010398 	.word	0x00010398
    9e8c:	0001038c 	.word	0x0001038c

00009e90 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>:
    9e90:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9e94:	e2524000 	subs	r4, r2, #0
    9e98:	e1a08000 	mov	r8, r0
    9e9c:	e1a06001 	mov	r6, r1
    9ea0:	e1a07003 	mov	r7, r3
    9ea4:	e59d5018 	ldr	r5, [sp, #24]
    9ea8:	0a000038 	beq	9f90 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x100>
    9eac:	e357000f 	cmp	r7, #15
    9eb0:	9a000031 	bls	9f7c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xec>
    9eb4:	e3c52102 	bic	r2, r5, #-2147483648	; 0x80000000
    9eb8:	e247100c 	sub	r1, r7, #12
    9ebc:	e1a03422 	lsr	r3, r2, #8
    9ec0:	e1a0c822 	lsr	ip, r2, #16
    9ec4:	e5c43009 	strb	r3, [r4, #9]
    9ec8:	e1a03421 	lsr	r3, r1, #8
    9ecc:	e1a0e821 	lsr	lr, r1, #16
    9ed0:	e5c42008 	strb	r2, [r4, #8]
    9ed4:	e5c46000 	strb	r6, [r4]
    9ed8:	e1a02c22 	lsr	r2, r2, #24
    9edc:	e5c4c00a 	strb	ip, [r4, #10]
    9ee0:	e5c41004 	strb	r1, [r4, #4]
    9ee4:	e1a0cc21 	lsr	ip, r1, #24
    9ee8:	e5c43005 	strb	r3, [r4, #5]
    9eec:	e1a01426 	lsr	r1, r6, #8
    9ef0:	e1a03826 	lsr	r3, r6, #16
    9ef4:	e1a06c26 	lsr	r6, r6, #24
    9ef8:	e5c4200b 	strb	r2, [r4, #11]
    9efc:	e5c41001 	strb	r1, [r4, #1]
    9f00:	e1a00008 	mov	r0, r8
    9f04:	e1a02007 	mov	r2, r7
    9f08:	e5c4e006 	strb	lr, [r4, #6]
    9f0c:	e5c4c007 	strb	ip, [r4, #7]
    9f10:	e5c43002 	strb	r3, [r4, #2]
    9f14:	e5c46003 	strb	r6, [r4, #3]
    9f18:	e1a01004 	mov	r1, r4
    9f1c:	ebffff8f 	bl	9d60 <CBcmPropertyTags::GetTags(void*, unsigned int)>
    9f20:	e3500000 	cmp	r0, #0
    9f24:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    9f28:	e5d43009 	ldrb	r3, [r4, #9]
    9f2c:	e5d40008 	ldrb	r0, [r4, #8]
    9f30:	e5d4200a 	ldrb	r2, [r4, #10]
    9f34:	e1800403 	orr	r0, r0, r3, lsl #8
    9f38:	e5d4300b 	ldrb	r3, [r4, #11]
    9f3c:	e1800802 	orr	r0, r0, r2, lsl #16
    9f40:	e1900c03 	orrs	r0, r0, r3, lsl #24
    9f44:	4a000001 	bmi	9f50 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xc0>
    9f48:	e3a00000 	mov	r0, #0
    9f4c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9f50:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
    9f54:	e1a01420 	lsr	r1, r0, #8
    9f58:	e1a02820 	lsr	r2, r0, #16
    9f5c:	e1a03c20 	lsr	r3, r0, #24
    9f60:	e5c40008 	strb	r0, [r4, #8]
    9f64:	e2900000 	adds	r0, r0, #0
    9f68:	e5c41009 	strb	r1, [r4, #9]
    9f6c:	e5c4200a 	strb	r2, [r4, #10]
    9f70:	e5c4300b 	strb	r3, [r4, #11]
    9f74:	13a00001 	movne	r0, #1
    9f78:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9f7c:	e3a02034 	mov	r2, #52	; 0x34
    9f80:	e59f101c 	ldr	r1, [pc, #28]	; 9fa4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x114>
    9f84:	e59f001c 	ldr	r0, [pc, #28]	; 9fa8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x118>
    9f88:	eb000d5d 	bl	d504 <assertion_failed>
    9f8c:	eaffffc8 	b	9eb4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x24>
    9f90:	e3a02033 	mov	r2, #51	; 0x33
    9f94:	e59f1008 	ldr	r1, [pc, #8]	; 9fa4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x114>
    9f98:	e59f000c 	ldr	r0, [pc, #12]	; 9fac <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x11c>
    9f9c:	eb000d58 	bl	d504 <assertion_failed>
    9fa0:	eaffffc1 	b	9eac <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x1c>
    9fa4:	00010378 	.word	0x00010378
    9fa8:	000103e8 	.word	0x000103e8
    9fac:	000103dc 	.word	0x000103dc

00009fb0 <CGPIOPin::~CGPIOPin()>:
    9fb0:	e12fff1e 	bx	lr

00009fb4 <CGPIOPin::~CGPIOPin()>:
    9fb4:	e92d4010 	push	{r4, lr}
    9fb8:	e1a04000 	mov	r4, r0
    9fbc:	e3a01028 	mov	r1, #40	; 0x28
    9fc0:	eb000bc5 	bl	cedc <operator delete(void*, unsigned int)>
    9fc4:	e1a00004 	mov	r0, r4
    9fc8:	e8bd8010 	pop	{r4, pc}

00009fcc <CGPIOPin::CGPIOPin()>:
    9fcc:	e92d4010 	push	{r4, lr}
    9fd0:	e3a01000 	mov	r1, #0
    9fd4:	e3a02006 	mov	r2, #6
    9fd8:	e3a04036 	mov	r4, #54	; 0x36
    9fdc:	e3a0c00a 	mov	ip, #10
    9fe0:	e59fe01c 	ldr	lr, [pc, #28]	; a004 <CGPIOPin::CGPIOPin()+0x38>
    9fe4:	e5804004 	str	r4, [r0, #4]
    9fe8:	e580e000 	str	lr, [r0]
    9fec:	e5c0c010 	strb	ip, [r0, #16]
    9ff0:	e5801018 	str	r1, [r0, #24]
    9ff4:	e580101c 	str	r1, [r0, #28]
    9ff8:	e5c02024 	strb	r2, [r0, #36]	; 0x24
    9ffc:	e5c02025 	strb	r2, [r0, #37]	; 0x25
    a000:	e8bd8010 	pop	{r4, pc}
    a004:	00010418 	.word	0x00010418

0000a008 <CGPIOPin::AssignPin(unsigned int)>:
    a008:	e5903004 	ldr	r3, [r0, #4]
    a00c:	e92d4070 	push	{r4, r5, r6, lr}
    a010:	e3530036 	cmp	r3, #54	; 0x36
    a014:	e1a05000 	mov	r5, r0
    a018:	e1a04001 	mov	r4, r1
    a01c:	0a000003 	beq	a030 <CGPIOPin::AssignPin(unsigned int)+0x28>
    a020:	e3a02040 	mov	r2, #64	; 0x40
    a024:	e59f1064 	ldr	r1, [pc, #100]	; a090 <CGPIOPin::AssignPin(unsigned int)+0x88>
    a028:	e59f0064 	ldr	r0, [pc, #100]	; a094 <CGPIOPin::AssignPin(unsigned int)+0x8c>
    a02c:	eb000d34 	bl	d504 <assertion_failed>
    a030:	e3540035 	cmp	r4, #53	; 0x35
    a034:	e5854004 	str	r4, [r5, #4]
    a038:	8a000007 	bhi	a05c <CGPIOPin::AssignPin(unsigned int)+0x54>
    a03c:	e3a03001 	mov	r3, #1
    a040:	e204201f 	and	r2, r4, #31
    a044:	e1a042a4 	lsr	r4, r4, #5
    a048:	e1a03213 	lsl	r3, r3, r2
    a04c:	e1a04104 	lsl	r4, r4, #2
    a050:	e585300c 	str	r3, [r5, #12]
    a054:	e5854008 	str	r4, [r5, #8]
    a058:	e8bd8070 	pop	{r4, r5, r6, pc}
    a05c:	eb000594 	bl	b6b4 <CMachineInfo::Get()>
    a060:	e6ef1074 	uxtb	r1, r4
    a064:	eb000565 	bl	b600 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>
    a068:	e3500035 	cmp	r0, #53	; 0x35
    a06c:	e1a04000 	mov	r4, r0
    a070:	e5850004 	str	r0, [r5, #4]
    a074:	9afffff0 	bls	a03c <CGPIOPin::AssignPin(unsigned int)+0x34>
    a078:	e3a02047 	mov	r2, #71	; 0x47
    a07c:	e59f100c 	ldr	r1, [pc, #12]	; a090 <CGPIOPin::AssignPin(unsigned int)+0x88>
    a080:	e59f0010 	ldr	r0, [pc, #16]	; a098 <CGPIOPin::AssignPin(unsigned int)+0x90>
    a084:	eb000d1e 	bl	d504 <assertion_failed>
    a088:	e5954004 	ldr	r4, [r5, #4]
    a08c:	eaffffea 	b	a03c <CGPIOPin::AssignPin(unsigned int)+0x34>
    a090:	00010438 	.word	0x00010438
    a094:	00010444 	.word	0x00010444
    a098:	00010458 	.word	0x00010458

0000a09c <CGPIOPin::Write(unsigned int)>:
    a09c:	e5903004 	ldr	r3, [r0, #4]
    a0a0:	e92d4070 	push	{r4, r5, r6, lr}
    a0a4:	e3530035 	cmp	r3, #53	; 0x35
    a0a8:	e1a04000 	mov	r4, r0
    a0ac:	e1a05001 	mov	r5, r1
    a0b0:	8a00001e 	bhi	a130 <CGPIOPin::Write(unsigned int)+0x94>
    a0b4:	e5d43010 	ldrb	r3, [r4, #16]
    a0b8:	e3530003 	cmp	r3, #3
    a0bc:	ca000016 	bgt	a11c <CGPIOPin::Write(unsigned int)+0x80>
    a0c0:	e3a03000 	mov	r3, #0
    a0c4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    a0c8:	e3550001 	cmp	r5, #1
    a0cc:	9a00000b 	bls	a100 <CGPIOPin::Write(unsigned int)+0x64>
    a0d0:	e3a02098 	mov	r2, #152	; 0x98
    a0d4:	e59f1068 	ldr	r1, [pc, #104]	; a144 <CGPIOPin::Write(unsigned int)+0xa8>
    a0d8:	e59f0068 	ldr	r0, [pc, #104]	; a148 <CGPIOPin::Write(unsigned int)+0xac>
    a0dc:	eb000d08 	bl	d504 <assertion_failed>
    a0e0:	e5845014 	str	r5, [r4, #20]
    a0e4:	e59f5060 	ldr	r5, [pc, #96]	; a14c <CGPIOPin::Write(unsigned int)+0xb0>
    a0e8:	e594100c 	ldr	r1, [r4, #12]
    a0ec:	e5942008 	ldr	r2, [r4, #8]
    a0f0:	e3a03000 	mov	r3, #0
    a0f4:	e7851002 	str	r1, [r5, r2]
    a0f8:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    a0fc:	e8bd8070 	pop	{r4, r5, r6, pc}
    a100:	e59f3044 	ldr	r3, [pc, #68]	; a14c <CGPIOPin::Write(unsigned int)+0xb0>
    a104:	e59f2044 	ldr	r2, [pc, #68]	; a150 <CGPIOPin::Write(unsigned int)+0xb4>
    a108:	e3550000 	cmp	r5, #0
    a10c:	e5845014 	str	r5, [r4, #20]
    a110:	11a05003 	movne	r5, r3
    a114:	01a05002 	moveq	r5, r2
    a118:	eafffff2 	b	a0e8 <CGPIOPin::Write(unsigned int)+0x4c>
    a11c:	e3a02094 	mov	r2, #148	; 0x94
    a120:	e59f101c 	ldr	r1, [pc, #28]	; a144 <CGPIOPin::Write(unsigned int)+0xa8>
    a124:	e59f0028 	ldr	r0, [pc, #40]	; a154 <CGPIOPin::Write(unsigned int)+0xb8>
    a128:	eb000cf5 	bl	d504 <assertion_failed>
    a12c:	eaffffe3 	b	a0c0 <CGPIOPin::Write(unsigned int)+0x24>
    a130:	e3a02091 	mov	r2, #145	; 0x91
    a134:	e59f1008 	ldr	r1, [pc, #8]	; a144 <CGPIOPin::Write(unsigned int)+0xa8>
    a138:	e59f0018 	ldr	r0, [pc, #24]	; a158 <CGPIOPin::Write(unsigned int)+0xbc>
    a13c:	eb000cf0 	bl	d504 <assertion_failed>
    a140:	eaffffdb 	b	a0b4 <CGPIOPin::Write(unsigned int)+0x18>
    a144:	00010438 	.word	0x00010438
    a148:	00010490 	.word	0x00010490
    a14c:	2020001c 	.word	0x2020001c
    a150:	20200028 	.word	0x20200028
    a154:	0001046c 	.word	0x0001046c
    a158:	00010458 	.word	0x00010458

0000a15c <CGPIOPin::Read() const>:
    a15c:	e5903004 	ldr	r3, [r0, #4]
    a160:	e92d4010 	push	{r4, lr}
    a164:	e3530035 	cmp	r3, #53	; 0x35
    a168:	e1a04000 	mov	r4, r0
    a16c:	8a000013 	bhi	a1c0 <CGPIOPin::Read() const+0x64>
    a170:	e5d43010 	ldrb	r3, [r4, #16]
    a174:	e2432002 	sub	r2, r3, #2
    a178:	e3530000 	cmp	r3, #0
    a17c:	13520001 	cmpne	r2, #1
    a180:	9a000003 	bls	a194 <CGPIOPin::Read() const+0x38>
    a184:	e3a020a8 	mov	r2, #168	; 0xa8
    a188:	e59f1044 	ldr	r1, [pc, #68]	; a1d4 <CGPIOPin::Read() const+0x78>
    a18c:	e59f0044 	ldr	r0, [pc, #68]	; a1d8 <CGPIOPin::Read() const+0x7c>
    a190:	eb000cdb 	bl	d504 <assertion_failed>
    a194:	e3a03000 	mov	r3, #0
    a198:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    a19c:	e59f1038 	ldr	r1, [pc, #56]	; a1dc <CGPIOPin::Read() const+0x80>
    a1a0:	e5940008 	ldr	r0, [r4, #8]
    a1a4:	e594200c 	ldr	r2, [r4, #12]
    a1a8:	e7901001 	ldr	r1, [r0, r1]
    a1ac:	e1110002 	tst	r1, r2
    a1b0:	13a00001 	movne	r0, #1
    a1b4:	01a00003 	moveq	r0, r3
    a1b8:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    a1bc:	e8bd8010 	pop	{r4, pc}
    a1c0:	e3a020a4 	mov	r2, #164	; 0xa4
    a1c4:	e59f1008 	ldr	r1, [pc, #8]	; a1d4 <CGPIOPin::Read() const+0x78>
    a1c8:	e59f0010 	ldr	r0, [pc, #16]	; a1e0 <CGPIOPin::Read() const+0x84>
    a1cc:	eb000ccc 	bl	d504 <assertion_failed>
    a1d0:	eaffffe6 	b	a170 <CGPIOPin::Read() const+0x14>
    a1d4:	00010438 	.word	0x00010438
    a1d8:	000104b0 	.word	0x000104b0
    a1dc:	20200034 	.word	0x20200034
    a1e0:	00010458 	.word	0x00010458

0000a1e4 <CGPIOPin::Invert()>:
    a1e4:	e5d03010 	ldrb	r3, [r0, #16]
    a1e8:	e92d4010 	push	{r4, lr}
    a1ec:	e3530001 	cmp	r3, #1
    a1f0:	e1a04000 	mov	r4, r0
    a1f4:	0a000003 	beq	a208 <CGPIOPin::Invert()+0x24>
    a1f8:	e3a020b5 	mov	r2, #181	; 0xb5
    a1fc:	e59f1018 	ldr	r1, [pc, #24]	; a21c <CGPIOPin::Invert()+0x38>
    a200:	e59f0018 	ldr	r0, [pc, #24]	; a220 <CGPIOPin::Invert()+0x3c>
    a204:	eb000cbe 	bl	d504 <assertion_failed>
    a208:	e5941014 	ldr	r1, [r4, #20]
    a20c:	e1a00004 	mov	r0, r4
    a210:	e8bd4010 	pop	{r4, lr}
    a214:	e2211001 	eor	r1, r1, #1
    a218:	eaffff9f 	b	a09c <CGPIOPin::Write(unsigned int)>
    a21c:	00010438 	.word	0x00010438
    a220:	0001050c 	.word	0x0001050c

0000a224 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)>:
    a224:	e5d03010 	ldrb	r3, [r0, #16]
    a228:	e92d4070 	push	{r4, r5, r6, lr}
    a22c:	e1a05001 	mov	r5, r1
    a230:	e2431002 	sub	r1, r3, #2
    a234:	e3530000 	cmp	r3, #0
    a238:	13510001 	cmpne	r1, #1
    a23c:	e1a04000 	mov	r4, r0
    a240:	e1a06002 	mov	r6, r2
    a244:	9a000003 	bls	a258 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x34>
    a248:	e3a020be 	mov	r2, #190	; 0xbe
    a24c:	e59f10b4 	ldr	r1, [pc, #180]	; a308 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe4>
    a250:	e59f00b4 	ldr	r0, [pc, #180]	; a30c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe8>
    a254:	eb000caa 	bl	d504 <assertion_failed>
    a258:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    a25c:	e3530006 	cmp	r3, #6
    a260:	0a000003 	beq	a274 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x50>
    a264:	e3a020c0 	mov	r2, #192	; 0xc0
    a268:	e59f1098 	ldr	r1, [pc, #152]	; a308 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe4>
    a26c:	e59f009c 	ldr	r0, [pc, #156]	; a310 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xec>
    a270:	eb000ca3 	bl	d504 <assertion_failed>
    a274:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    a278:	e3530006 	cmp	r3, #6
    a27c:	0a000003 	beq	a290 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x6c>
    a280:	e3a020c1 	mov	r2, #193	; 0xc1
    a284:	e59f107c 	ldr	r1, [pc, #124]	; a308 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe4>
    a288:	e59f0084 	ldr	r0, [pc, #132]	; a314 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xf0>
    a28c:	eb000c9c 	bl	d504 <assertion_failed>
    a290:	e3550000 	cmp	r5, #0
    a294:	0a000016 	beq	a2f4 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xd0>
    a298:	e594301c 	ldr	r3, [r4, #28]
    a29c:	e3530000 	cmp	r3, #0
    a2a0:	0a000003 	beq	a2b4 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x90>
    a2a4:	e3a020c4 	mov	r2, #196	; 0xc4
    a2a8:	e59f1058 	ldr	r1, [pc, #88]	; a308 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe4>
    a2ac:	e59f0064 	ldr	r0, [pc, #100]	; a318 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xf4>
    a2b0:	eb000c93 	bl	d504 <assertion_failed>
    a2b4:	e5940018 	ldr	r0, [r4, #24]
    a2b8:	e584501c 	str	r5, [r4, #28]
    a2bc:	e3500000 	cmp	r0, #0
    a2c0:	e5846020 	str	r6, [r4, #32]
    a2c4:	0a000002 	beq	a2d4 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xb0>
    a2c8:	e1a01004 	mov	r1, r4
    a2cc:	e8bd4070 	pop	{r4, r5, r6, lr}
    a2d0:	ea000dd3 	b	da24 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
    a2d4:	e59f102c 	ldr	r1, [pc, #44]	; a308 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe4>
    a2d8:	e59f003c 	ldr	r0, [pc, #60]	; a31c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xf8>
    a2dc:	e3a020c9 	mov	r2, #201	; 0xc9
    a2e0:	eb000c87 	bl	d504 <assertion_failed>
    a2e4:	e5940018 	ldr	r0, [r4, #24]
    a2e8:	e1a01004 	mov	r1, r4
    a2ec:	e8bd4070 	pop	{r4, r5, r6, lr}
    a2f0:	ea000dcb 	b	da24 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
    a2f4:	e3a020c3 	mov	r2, #195	; 0xc3
    a2f8:	e59f1008 	ldr	r1, [pc, #8]	; a308 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe4>
    a2fc:	e59f001c 	ldr	r0, [pc, #28]	; a320 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xfc>
    a300:	eb000c7f 	bl	d504 <assertion_failed>
    a304:	eaffffe3 	b	a298 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x74>
    a308:	00010438 	.word	0x00010438
    a30c:	000104b0 	.word	0x000104b0
    a310:	00010528 	.word	0x00010528
    a314:	0001054c 	.word	0x0001054c
    a318:	00010574 	.word	0x00010574
    a31c:	00010584 	.word	0x00010584
    a320:	000106f4 	.word	0x000106f4

0000a324 <CGPIOPin::DisconnectInterrupt()>:
    a324:	e5d03010 	ldrb	r3, [r0, #16]
    a328:	e92d4010 	push	{r4, lr}
    a32c:	e2432002 	sub	r2, r3, #2
    a330:	e3530000 	cmp	r3, #0
    a334:	13520001 	cmpne	r2, #1
    a338:	e1a04000 	mov	r4, r0
    a33c:	9a000003 	bls	a350 <CGPIOPin::DisconnectInterrupt()+0x2c>
    a340:	e3a020d1 	mov	r2, #209	; 0xd1
    a344:	e59f109c 	ldr	r1, [pc, #156]	; a3e8 <CGPIOPin::DisconnectInterrupt()+0xc4>
    a348:	e59f009c 	ldr	r0, [pc, #156]	; a3ec <CGPIOPin::DisconnectInterrupt()+0xc8>
    a34c:	eb000c6c 	bl	d504 <assertion_failed>
    a350:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    a354:	e3530006 	cmp	r3, #6
    a358:	0a000003 	beq	a36c <CGPIOPin::DisconnectInterrupt()+0x48>
    a35c:	e3a020d3 	mov	r2, #211	; 0xd3
    a360:	e59f1080 	ldr	r1, [pc, #128]	; a3e8 <CGPIOPin::DisconnectInterrupt()+0xc4>
    a364:	e59f0084 	ldr	r0, [pc, #132]	; a3f0 <CGPIOPin::DisconnectInterrupt()+0xcc>
    a368:	eb000c65 	bl	d504 <assertion_failed>
    a36c:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    a370:	e3530006 	cmp	r3, #6
    a374:	0a000003 	beq	a388 <CGPIOPin::DisconnectInterrupt()+0x64>
    a378:	e3a020d4 	mov	r2, #212	; 0xd4
    a37c:	e59f1064 	ldr	r1, [pc, #100]	; a3e8 <CGPIOPin::DisconnectInterrupt()+0xc4>
    a380:	e59f006c 	ldr	r0, [pc, #108]	; a3f4 <CGPIOPin::DisconnectInterrupt()+0xd0>
    a384:	eb000c5e 	bl	d504 <assertion_failed>
    a388:	e594301c 	ldr	r3, [r4, #28]
    a38c:	e3530000 	cmp	r3, #0
    a390:	0a00000f 	beq	a3d4 <CGPIOPin::DisconnectInterrupt()+0xb0>
    a394:	e3a03000 	mov	r3, #0
    a398:	e5940018 	ldr	r0, [r4, #24]
    a39c:	e584301c 	str	r3, [r4, #28]
    a3a0:	e1500003 	cmp	r0, r3
    a3a4:	0a000002 	beq	a3b4 <CGPIOPin::DisconnectInterrupt()+0x90>
    a3a8:	e1a01004 	mov	r1, r4
    a3ac:	e8bd4010 	pop	{r4, lr}
    a3b0:	ea000dc4 	b	dac8 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
    a3b4:	e59f102c 	ldr	r1, [pc, #44]	; a3e8 <CGPIOPin::DisconnectInterrupt()+0xc4>
    a3b8:	e59f0038 	ldr	r0, [pc, #56]	; a3f8 <CGPIOPin::DisconnectInterrupt()+0xd4>
    a3bc:	e3a020d9 	mov	r2, #217	; 0xd9
    a3c0:	eb000c4f 	bl	d504 <assertion_failed>
    a3c4:	e5940018 	ldr	r0, [r4, #24]
    a3c8:	e1a01004 	mov	r1, r4
    a3cc:	e8bd4010 	pop	{r4, lr}
    a3d0:	ea000dbc 	b	dac8 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
    a3d4:	e3a020d6 	mov	r2, #214	; 0xd6
    a3d8:	e59f1008 	ldr	r1, [pc, #8]	; a3e8 <CGPIOPin::DisconnectInterrupt()+0xc4>
    a3dc:	e59f0018 	ldr	r0, [pc, #24]	; a3fc <CGPIOPin::DisconnectInterrupt()+0xd8>
    a3e0:	eb000c47 	bl	d504 <assertion_failed>
    a3e4:	eaffffea 	b	a394 <CGPIOPin::DisconnectInterrupt()+0x70>
    a3e8:	00010438 	.word	0x00010438
    a3ec:	000104b0 	.word	0x000104b0
    a3f0:	00010528 	.word	0x00010528
    a3f4:	0001054c 	.word	0x0001054c
    a3f8:	00010584 	.word	0x00010584
    a3fc:	00010594 	.word	0x00010594

0000a400 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)>:
    a400:	e5d03010 	ldrb	r3, [r0, #16]
    a404:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a408:	e2432002 	sub	r2, r3, #2
    a40c:	e3530000 	cmp	r3, #0
    a410:	13520001 	cmpne	r2, #1
    a414:	e1a04000 	mov	r4, r0
    a418:	e1a05001 	mov	r5, r1
    a41c:	9a000003 	bls	a430 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x30>
    a420:	e3a020e1 	mov	r2, #225	; 0xe1
    a424:	e59f10d8 	ldr	r1, [pc, #216]	; a504 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x104>
    a428:	e59f00d8 	ldr	r0, [pc, #216]	; a508 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x108>
    a42c:	eb000c34 	bl	d504 <assertion_failed>
    a430:	e594301c 	ldr	r3, [r4, #28]
    a434:	e3530000 	cmp	r3, #0
    a438:	0a00002c 	beq	a4f0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf0>
    a43c:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    a440:	e3530006 	cmp	r3, #6
    a444:	0a000003 	beq	a458 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x58>
    a448:	e3a020e4 	mov	r2, #228	; 0xe4
    a44c:	e59f10b0 	ldr	r1, [pc, #176]	; a504 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x104>
    a450:	e59f00b4 	ldr	r0, [pc, #180]	; a50c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x10c>
    a454:	eb000c2a 	bl	d504 <assertion_failed>
    a458:	e3550005 	cmp	r5, #5
    a45c:	ca000017 	bgt	a4c0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xc0>
    a460:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    a464:	e1530005 	cmp	r3, r5
    a468:	0a00001b 	beq	a4dc <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xdc>
    a46c:	e59f709c 	ldr	r7, [pc, #156]	; a510 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x110>
    a470:	e5942008 	ldr	r2, [r4, #8]
    a474:	e5970000 	ldr	r0, [r7]
    a478:	e59f6094 	ldr	r6, [pc, #148]	; a514 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x114>
    a47c:	e0853085 	add	r3, r5, r5, lsl #1
    a480:	e3500000 	cmp	r0, #0
    a484:	e5c45024 	strb	r5, [r4, #36]	; 0x24
    a488:	e0826006 	add	r6, r2, r6
    a48c:	e1a05103 	lsl	r5, r3, #2
    a490:	1a000008 	bne	a4b8 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xb8>
    a494:	e594200c 	ldr	r2, [r4, #12]
    a498:	e7963005 	ldr	r3, [r6, r5]
    a49c:	e1833002 	orr	r3, r3, r2
    a4a0:	e7863005 	str	r3, [r6, r5]
    a4a4:	e5973000 	ldr	r3, [r7]
    a4a8:	e3530000 	cmp	r3, #0
    a4ac:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    a4b0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    a4b4:	ea000a57 	b	ce18 <LeaveCritical>
    a4b8:	eb000a29 	bl	cd64 <EnterCritical>
    a4bc:	eafffff4 	b	a494 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x94>
    a4c0:	e3a020e5 	mov	r2, #229	; 0xe5
    a4c4:	e59f1038 	ldr	r1, [pc, #56]	; a504 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x104>
    a4c8:	e59f0048 	ldr	r0, [pc, #72]	; a518 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x118>
    a4cc:	eb000c0c 	bl	d504 <assertion_failed>
    a4d0:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    a4d4:	e1530005 	cmp	r3, r5
    a4d8:	1affffe3 	bne	a46c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x6c>
    a4dc:	e3a020e6 	mov	r2, #230	; 0xe6
    a4e0:	e59f101c 	ldr	r1, [pc, #28]	; a504 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x104>
    a4e4:	e59f0030 	ldr	r0, [pc, #48]	; a51c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x11c>
    a4e8:	eb000c05 	bl	d504 <assertion_failed>
    a4ec:	eaffffde 	b	a46c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x6c>
    a4f0:	e3a020e2 	mov	r2, #226	; 0xe2
    a4f4:	e59f1008 	ldr	r1, [pc, #8]	; a504 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x104>
    a4f8:	e59f0020 	ldr	r0, [pc, #32]	; a520 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x120>
    a4fc:	eb000c00 	bl	d504 <assertion_failed>
    a500:	eaffffcd 	b	a43c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x3c>
    a504:	00010438 	.word	0x00010438
    a508:	000104b0 	.word	0x000104b0
    a50c:	00010528 	.word	0x00010528
    a510:	0001132c 	.word	0x0001132c
    a514:	2020004c 	.word	0x2020004c
    a518:	000105a4 	.word	0x000105a4
    a51c:	000105c8 	.word	0x000105c8
    a520:	00010594 	.word	0x00010594

0000a524 <CGPIOPin::DisableInterrupt()>:
    a524:	e5d03010 	ldrb	r3, [r0, #16]
    a528:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a52c:	e2432002 	sub	r2, r3, #2
    a530:	e3530000 	cmp	r3, #0
    a534:	13520001 	cmpne	r2, #1
    a538:	e1a05000 	mov	r5, r0
    a53c:	9a000003 	bls	a550 <CGPIOPin::DisableInterrupt()+0x2c>
    a540:	e3a020f7 	mov	r2, #247	; 0xf7
    a544:	e59f1080 	ldr	r1, [pc, #128]	; a5cc <CGPIOPin::DisableInterrupt()+0xa8>
    a548:	e59f0080 	ldr	r0, [pc, #128]	; a5d0 <CGPIOPin::DisableInterrupt()+0xac>
    a54c:	eb000bec 	bl	d504 <assertion_failed>
    a550:	e5d53024 	ldrb	r3, [r5, #36]	; 0x24
    a554:	e3530005 	cmp	r3, #5
    a558:	ca000015 	bgt	a5b4 <CGPIOPin::DisableInterrupt()+0x90>
    a55c:	e59f7070 	ldr	r7, [pc, #112]	; a5d4 <CGPIOPin::DisableInterrupt()+0xb0>
    a560:	e5952008 	ldr	r2, [r5, #8]
    a564:	e5970000 	ldr	r0, [r7]
    a568:	e59f6068 	ldr	r6, [pc, #104]	; a5d8 <CGPIOPin::DisableInterrupt()+0xb4>
    a56c:	e0833083 	add	r3, r3, r3, lsl #1
    a570:	e3500000 	cmp	r0, #0
    a574:	e1a04103 	lsl	r4, r3, #2
    a578:	e0826006 	add	r6, r2, r6
    a57c:	1a00000a 	bne	a5ac <CGPIOPin::DisableInterrupt()+0x88>
    a580:	e7963004 	ldr	r3, [r6, r4]
    a584:	e595200c 	ldr	r2, [r5, #12]
    a588:	e1c33002 	bic	r3, r3, r2
    a58c:	e7863004 	str	r3, [r6, r4]
    a590:	e5973000 	ldr	r3, [r7]
    a594:	e3530000 	cmp	r3, #0
    a598:	0a000000 	beq	a5a0 <CGPIOPin::DisableInterrupt()+0x7c>
    a59c:	eb000a1d 	bl	ce18 <LeaveCritical>
    a5a0:	e3a03006 	mov	r3, #6
    a5a4:	e5c53024 	strb	r3, [r5, #36]	; 0x24
    a5a8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    a5ac:	eb0009ec 	bl	cd64 <EnterCritical>
    a5b0:	eafffff2 	b	a580 <CGPIOPin::DisableInterrupt()+0x5c>
    a5b4:	e3a020f9 	mov	r2, #249	; 0xf9
    a5b8:	e59f100c 	ldr	r1, [pc, #12]	; a5cc <CGPIOPin::DisableInterrupt()+0xa8>
    a5bc:	e59f0018 	ldr	r0, [pc, #24]	; a5dc <CGPIOPin::DisableInterrupt()+0xb8>
    a5c0:	eb000bcf 	bl	d504 <assertion_failed>
    a5c4:	e5d53024 	ldrb	r3, [r5, #36]	; 0x24
    a5c8:	eaffffe3 	b	a55c <CGPIOPin::DisableInterrupt()+0x38>
    a5cc:	00010438 	.word	0x00010438
    a5d0:	000104b0 	.word	0x000104b0
    a5d4:	0001132c 	.word	0x0001132c
    a5d8:	2020004c 	.word	0x2020004c
    a5dc:	000105e4 	.word	0x000105e4

0000a5e0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)>:
    a5e0:	e5d03010 	ldrb	r3, [r0, #16]
    a5e4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a5e8:	e2432002 	sub	r2, r3, #2
    a5ec:	e3530000 	cmp	r3, #0
    a5f0:	13520001 	cmpne	r2, #1
    a5f4:	e1a04000 	mov	r4, r0
    a5f8:	e1a05001 	mov	r5, r1
    a5fc:	9a000003 	bls	a610 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x30>
    a600:	e59f20dc 	ldr	r2, [pc, #220]	; a6e4 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x104>
    a604:	e59f10dc 	ldr	r1, [pc, #220]	; a6e8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x108>
    a608:	e59f00dc 	ldr	r0, [pc, #220]	; a6ec <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x10c>
    a60c:	eb000bbc 	bl	d504 <assertion_failed>
    a610:	e594301c 	ldr	r3, [r4, #28]
    a614:	e3530000 	cmp	r3, #0
    a618:	0a00002c 	beq	a6d0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf0>
    a61c:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    a620:	e3530006 	cmp	r3, #6
    a624:	0a000003 	beq	a638 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x58>
    a628:	e59f20c0 	ldr	r2, [pc, #192]	; a6f0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x110>
    a62c:	e59f10b4 	ldr	r1, [pc, #180]	; a6e8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x108>
    a630:	e59f00bc 	ldr	r0, [pc, #188]	; a6f4 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x114>
    a634:	eb000bb2 	bl	d504 <assertion_failed>
    a638:	e3550005 	cmp	r5, #5
    a63c:	ca000017 	bgt	a6a0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xc0>
    a640:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    a644:	e1530005 	cmp	r3, r5
    a648:	0a00001b 	beq	a6bc <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xdc>
    a64c:	e59f70a4 	ldr	r7, [pc, #164]	; a6f8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x118>
    a650:	e5942008 	ldr	r2, [r4, #8]
    a654:	e5970000 	ldr	r0, [r7]
    a658:	e59f609c 	ldr	r6, [pc, #156]	; a6fc <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x11c>
    a65c:	e0853085 	add	r3, r5, r5, lsl #1
    a660:	e3500000 	cmp	r0, #0
    a664:	e5c45025 	strb	r5, [r4, #37]	; 0x25
    a668:	e0826006 	add	r6, r2, r6
    a66c:	e1a05103 	lsl	r5, r3, #2
    a670:	1a000008 	bne	a698 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xb8>
    a674:	e594200c 	ldr	r2, [r4, #12]
    a678:	e7963005 	ldr	r3, [r6, r5]
    a67c:	e1833002 	orr	r3, r3, r2
    a680:	e7863005 	str	r3, [r6, r5]
    a684:	e5973000 	ldr	r3, [r7]
    a688:	e3530000 	cmp	r3, #0
    a68c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    a690:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    a694:	ea0009df 	b	ce18 <LeaveCritical>
    a698:	eb0009b1 	bl	cd64 <EnterCritical>
    a69c:	eafffff4 	b	a674 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x94>
    a6a0:	e59f2058 	ldr	r2, [pc, #88]	; a700 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x120>
    a6a4:	e59f103c 	ldr	r1, [pc, #60]	; a6e8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x108>
    a6a8:	e59f0054 	ldr	r0, [pc, #84]	; a704 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x124>
    a6ac:	eb000b94 	bl	d504 <assertion_failed>
    a6b0:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    a6b4:	e1530005 	cmp	r3, r5
    a6b8:	1affffe3 	bne	a64c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x6c>
    a6bc:	e59f2044 	ldr	r2, [pc, #68]	; a708 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x128>
    a6c0:	e59f1020 	ldr	r1, [pc, #32]	; a6e8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x108>
    a6c4:	e59f0040 	ldr	r0, [pc, #64]	; a70c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x12c>
    a6c8:	eb000b8d 	bl	d504 <assertion_failed>
    a6cc:	eaffffde 	b	a64c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x6c>
    a6d0:	e59f2038 	ldr	r2, [pc, #56]	; a710 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x130>
    a6d4:	e59f100c 	ldr	r1, [pc, #12]	; a6e8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x108>
    a6d8:	e59f0034 	ldr	r0, [pc, #52]	; a714 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x134>
    a6dc:	eb000b88 	bl	d504 <assertion_failed>
    a6e0:	eaffffcd 	b	a61c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x3c>
    a6e4:	0000010a 	.word	0x0000010a
    a6e8:	00010438 	.word	0x00010438
    a6ec:	000104b0 	.word	0x000104b0
    a6f0:	0000010d 	.word	0x0000010d
    a6f4:	0001054c 	.word	0x0001054c
    a6f8:	0001132c 	.word	0x0001132c
    a6fc:	2020004c 	.word	0x2020004c
    a700:	0000010e 	.word	0x0000010e
    a704:	000105a4 	.word	0x000105a4
    a708:	0000010f 	.word	0x0000010f
    a70c:	00010608 	.word	0x00010608
    a710:	0000010b 	.word	0x0000010b
    a714:	00010594 	.word	0x00010594

0000a718 <CGPIOPin::DisableInterrupt2()>:
    a718:	e5d03010 	ldrb	r3, [r0, #16]
    a71c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a720:	e2432002 	sub	r2, r3, #2
    a724:	e3530000 	cmp	r3, #0
    a728:	13520001 	cmpne	r2, #1
    a72c:	e1a05000 	mov	r5, r0
    a730:	9a000003 	bls	a744 <CGPIOPin::DisableInterrupt2()+0x2c>
    a734:	e3a02e12 	mov	r2, #288	; 0x120
    a738:	e59f1080 	ldr	r1, [pc, #128]	; a7c0 <CGPIOPin::DisableInterrupt2()+0xa8>
    a73c:	e59f0080 	ldr	r0, [pc, #128]	; a7c4 <CGPIOPin::DisableInterrupt2()+0xac>
    a740:	eb000b6f 	bl	d504 <assertion_failed>
    a744:	e5d53025 	ldrb	r3, [r5, #37]	; 0x25
    a748:	e3530005 	cmp	r3, #5
    a74c:	ca000015 	bgt	a7a8 <CGPIOPin::DisableInterrupt2()+0x90>
    a750:	e59f7070 	ldr	r7, [pc, #112]	; a7c8 <CGPIOPin::DisableInterrupt2()+0xb0>
    a754:	e5952008 	ldr	r2, [r5, #8]
    a758:	e5970000 	ldr	r0, [r7]
    a75c:	e59f6068 	ldr	r6, [pc, #104]	; a7cc <CGPIOPin::DisableInterrupt2()+0xb4>
    a760:	e0833083 	add	r3, r3, r3, lsl #1
    a764:	e3500000 	cmp	r0, #0
    a768:	e1a04103 	lsl	r4, r3, #2
    a76c:	e0826006 	add	r6, r2, r6
    a770:	1a00000a 	bne	a7a0 <CGPIOPin::DisableInterrupt2()+0x88>
    a774:	e7963004 	ldr	r3, [r6, r4]
    a778:	e595200c 	ldr	r2, [r5, #12]
    a77c:	e1c33002 	bic	r3, r3, r2
    a780:	e7863004 	str	r3, [r6, r4]
    a784:	e5973000 	ldr	r3, [r7]
    a788:	e3530000 	cmp	r3, #0
    a78c:	0a000000 	beq	a794 <CGPIOPin::DisableInterrupt2()+0x7c>
    a790:	eb0009a0 	bl	ce18 <LeaveCritical>
    a794:	e3a03006 	mov	r3, #6
    a798:	e5c53025 	strb	r3, [r5, #37]	; 0x25
    a79c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    a7a0:	eb00096f 	bl	cd64 <EnterCritical>
    a7a4:	eafffff2 	b	a774 <CGPIOPin::DisableInterrupt2()+0x5c>
    a7a8:	e59f2020 	ldr	r2, [pc, #32]	; a7d0 <CGPIOPin::DisableInterrupt2()+0xb8>
    a7ac:	e59f100c 	ldr	r1, [pc, #12]	; a7c0 <CGPIOPin::DisableInterrupt2()+0xa8>
    a7b0:	e59f001c 	ldr	r0, [pc, #28]	; a7d4 <CGPIOPin::DisableInterrupt2()+0xbc>
    a7b4:	eb000b52 	bl	d504 <assertion_failed>
    a7b8:	e5d53025 	ldrb	r3, [r5, #37]	; 0x25
    a7bc:	eaffffe3 	b	a750 <CGPIOPin::DisableInterrupt2()+0x38>
    a7c0:	00010438 	.word	0x00010438
    a7c4:	000104b0 	.word	0x000104b0
    a7c8:	0001132c 	.word	0x0001132c
    a7cc:	2020004c 	.word	0x2020004c
    a7d0:	00000122 	.word	0x00000122
    a7d4:	00010624 	.word	0x00010624

0000a7d8 <CGPIOPin::ReadAll()>:
    a7d8:	e59f3004 	ldr	r3, [pc, #4]	; a7e4 <CGPIOPin::ReadAll()+0xc>
    a7dc:	e5930034 	ldr	r0, [r3, #52]	; 0x34
    a7e0:	e12fff1e 	bx	lr
    a7e4:	20200000 	.word	0x20200000

0000a7e8 <CGPIOPin::SetPullUpMode(unsigned int)>:
    a7e8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    a7ec:	e1a08000 	mov	r8, r0
    a7f0:	e59f4078 	ldr	r4, [pc, #120]	; a870 <CGPIOPin::SetPullUpMode(unsigned int)+0x88>
    a7f4:	e1a09001 	mov	r9, r1
    a7f8:	e5940000 	ldr	r0, [r4]
    a7fc:	e5986008 	ldr	r6, [r8, #8]
    a800:	e3500000 	cmp	r0, #0
    a804:	e59f5068 	ldr	r5, [pc, #104]	; a874 <CGPIOPin::SetPullUpMode(unsigned int)+0x8c>
    a808:	1a000016 	bne	a868 <CGPIOPin::SetPullUpMode(unsigned int)+0x80>
    a80c:	e3590002 	cmp	r9, #2
    a810:	8a00000f 	bhi	a854 <CGPIOPin::SetPullUpMode(unsigned int)+0x6c>
    a814:	e59f705c 	ldr	r7, [pc, #92]	; a878 <CGPIOPin::SetPullUpMode(unsigned int)+0x90>
    a818:	e3a00005 	mov	r0, #5
    a81c:	e5879094 	str	r9, [r7, #148]	; 0x94
    a820:	eb00071c 	bl	c498 <CTimer::SimpleusDelay(unsigned int)>
    a824:	e598300c 	ldr	r3, [r8, #12]
    a828:	e3a00005 	mov	r0, #5
    a82c:	e7863005 	str	r3, [r6, r5]
    a830:	eb000718 	bl	c498 <CTimer::SimpleusDelay(unsigned int)>
    a834:	e3a03000 	mov	r3, #0
    a838:	e5873094 	str	r3, [r7, #148]	; 0x94
    a83c:	e7863005 	str	r3, [r6, r5]
    a840:	e5943000 	ldr	r3, [r4]
    a844:	e3530000 	cmp	r3, #0
    a848:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    a84c:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    a850:	ea000970 	b	ce18 <LeaveCritical>
    a854:	e59f2020 	ldr	r2, [pc, #32]	; a87c <CGPIOPin::SetPullUpMode(unsigned int)+0x94>
    a858:	e59f1020 	ldr	r1, [pc, #32]	; a880 <CGPIOPin::SetPullUpMode(unsigned int)+0x98>
    a85c:	e59f0020 	ldr	r0, [pc, #32]	; a884 <CGPIOPin::SetPullUpMode(unsigned int)+0x9c>
    a860:	eb000b27 	bl	d504 <assertion_failed>
    a864:	eaffffea 	b	a814 <CGPIOPin::SetPullUpMode(unsigned int)+0x2c>
    a868:	eb00093d 	bl	cd64 <EnterCritical>
    a86c:	eaffffe6 	b	a80c <CGPIOPin::SetPullUpMode(unsigned int)+0x24>
    a870:	0001132c 	.word	0x0001132c
    a874:	20200098 	.word	0x20200098
    a878:	20200000 	.word	0x20200000
    a87c:	0000013b 	.word	0x0000013b
    a880:	00010438 	.word	0x00010438
    a884:	00010648 	.word	0x00010648

0000a888 <CGPIOPin::SetAlternateFunction(unsigned int)>:
    a888:	e5902004 	ldr	r2, [r0, #4]
    a88c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a890:	e3520035 	cmp	r2, #53	; 0x35
    a894:	e1a06001 	mov	r6, r1
    a898:	8a000022 	bhi	a928 <CGPIOPin::SetAlternateFunction(unsigned int)+0xa0>
    a89c:	e59f30a0 	ldr	r3, [pc, #160]	; a944 <CGPIOPin::SetAlternateFunction(unsigned int)+0xbc>
    a8a0:	e3560005 	cmp	r6, #5
    a8a4:	e0831293 	umull	r1, r3, r3, r2
    a8a8:	e1a031a3 	lsr	r3, r3, #3
    a8ac:	e2835302 	add	r5, r3, #134217728	; 0x8000000
    a8b0:	e0833103 	add	r3, r3, r3, lsl #2
    a8b4:	e2855702 	add	r5, r5, #524288	; 0x80000
    a8b8:	e0423083 	sub	r3, r2, r3, lsl #1
    a8bc:	e1a05105 	lsl	r5, r5, #2
    a8c0:	e0834083 	add	r4, r3, r3, lsl #1
    a8c4:	8a000012 	bhi	a914 <CGPIOPin::SetAlternateFunction(unsigned int)+0x8c>
    a8c8:	e59f7078 	ldr	r7, [pc, #120]	; a948 <CGPIOPin::SetAlternateFunction(unsigned int)+0xc0>
    a8cc:	e5970000 	ldr	r0, [r7]
    a8d0:	e3500000 	cmp	r0, #0
    a8d4:	1a00000c 	bne	a90c <CGPIOPin::SetAlternateFunction(unsigned int)+0x84>
    a8d8:	e3a01007 	mov	r1, #7
    a8dc:	e59f3068 	ldr	r3, [pc, #104]	; a94c <CGPIOPin::SetAlternateFunction(unsigned int)+0xc4>
    a8e0:	e5952000 	ldr	r2, [r5]
    a8e4:	e0836106 	add	r6, r3, r6, lsl #2
    a8e8:	e5963010 	ldr	r3, [r6, #16]
    a8ec:	e1c22411 	bic	r2, r2, r1, lsl r4
    a8f0:	e1824413 	orr	r4, r2, r3, lsl r4
    a8f4:	e5854000 	str	r4, [r5]
    a8f8:	e5973000 	ldr	r3, [r7]
    a8fc:	e3530000 	cmp	r3, #0
    a900:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    a904:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    a908:	ea000942 	b	ce18 <LeaveCritical>
    a90c:	eb000914 	bl	cd64 <EnterCritical>
    a910:	eafffff0 	b	a8d8 <CGPIOPin::SetAlternateFunction(unsigned int)+0x50>
    a914:	e3a02f53 	mov	r2, #332	; 0x14c
    a918:	e59f1030 	ldr	r1, [pc, #48]	; a950 <CGPIOPin::SetAlternateFunction(unsigned int)+0xc8>
    a91c:	e59f0030 	ldr	r0, [pc, #48]	; a954 <CGPIOPin::SetAlternateFunction(unsigned int)+0xcc>
    a920:	eb000af7 	bl	d504 <assertion_failed>
    a924:	eaffffe7 	b	a8c8 <CGPIOPin::SetAlternateFunction(unsigned int)+0x40>
    a928:	e1a04000 	mov	r4, r0
    a92c:	e3a02f52 	mov	r2, #328	; 0x148
    a930:	e59f1018 	ldr	r1, [pc, #24]	; a950 <CGPIOPin::SetAlternateFunction(unsigned int)+0xc8>
    a934:	e59f001c 	ldr	r0, [pc, #28]	; a958 <CGPIOPin::SetAlternateFunction(unsigned int)+0xd0>
    a938:	eb000af1 	bl	d504 <assertion_failed>
    a93c:	e5942004 	ldr	r2, [r4, #4]
    a940:	eaffffd5 	b	a89c <CGPIOPin::SetAlternateFunction(unsigned int)+0x14>
    a944:	cccccccd 	.word	0xcccccccd
    a948:	0001132c 	.word	0x0001132c
    a94c:	00010410 	.word	0x00010410
    a950:	00010438 	.word	0x00010438
    a954:	00010654 	.word	0x00010654
    a958:	00010458 	.word	0x00010458

0000a95c <CGPIOPin::SetMode(TGPIOMode, bool)>:
    a95c:	e3510009 	cmp	r1, #9
    a960:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a964:	e1a05001 	mov	r5, r1
    a968:	e1a04000 	mov	r4, r0
    a96c:	e1a06002 	mov	r6, r2
    a970:	ca00003f 	bgt	aa74 <CGPIOPin::SetMode(TGPIOMode, bool)+0x118>
    a974:	e5c45010 	strb	r5, [r4, #16]
    a978:	e3a02000 	mov	r2, #0
    a97c:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
    a980:	e5d43010 	ldrb	r3, [r4, #16]
    a984:	e2431004 	sub	r1, r3, #4
    a988:	e6ef0071 	uxtb	r0, r1
    a98c:	e3500005 	cmp	r0, #5
    a990:	9a000030 	bls	aa58 <CGPIOPin::SetMode(TGPIOMode, bool)+0xfc>
    a994:	e3530001 	cmp	r3, #1
    a998:	13a03000 	movne	r3, #0
    a99c:	02063001 	andeq	r3, r6, #1
    a9a0:	e3530000 	cmp	r3, #0
    a9a4:	1a000055 	bne	ab00 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1a4>
    a9a8:	e5943004 	ldr	r3, [r4, #4]
    a9ac:	e3530035 	cmp	r3, #53	; 0x35
    a9b0:	8a00003a 	bhi	aaa0 <CGPIOPin::SetMode(TGPIOMode, bool)+0x144>
    a9b4:	e59f5154 	ldr	r5, [pc, #340]	; ab10 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1b4>
    a9b8:	e59f8154 	ldr	r8, [pc, #340]	; ab14 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1b8>
    a9bc:	e0852395 	umull	r2, r5, r5, r3
    a9c0:	e5980000 	ldr	r0, [r8]
    a9c4:	e1a051a5 	lsr	r5, r5, #3
    a9c8:	e2857302 	add	r7, r5, #134217728	; 0x8000000
    a9cc:	e0855105 	add	r5, r5, r5, lsl #2
    a9d0:	e2877702 	add	r7, r7, #524288	; 0x80000
    a9d4:	e0435085 	sub	r5, r3, r5, lsl #1
    a9d8:	e3500000 	cmp	r0, #0
    a9dc:	e1a07107 	lsl	r7, r7, #2
    a9e0:	e0855085 	add	r5, r5, r5, lsl #1
    a9e4:	1a000033 	bne	aab8 <CGPIOPin::SetMode(TGPIOMode, bool)+0x15c>
    a9e8:	e5d42010 	ldrb	r2, [r4, #16]
    a9ec:	e3a01007 	mov	r1, #7
    a9f0:	e2422001 	sub	r2, r2, #1
    a9f4:	e16f2f12 	clz	r2, r2
    a9f8:	e5973000 	ldr	r3, [r7]
    a9fc:	e1a022a2 	lsr	r2, r2, #5
    aa00:	e1c33511 	bic	r3, r3, r1, lsl r5
    aa04:	e1835512 	orr	r5, r3, r2, lsl r5
    aa08:	e5875000 	str	r5, [r7]
    aa0c:	e5983000 	ldr	r3, [r8]
    aa10:	e3530000 	cmp	r3, #0
    aa14:	1a000029 	bne	aac0 <CGPIOPin::SetMode(TGPIOMode, bool)+0x164>
    aa18:	e3560000 	cmp	r6, #0
    aa1c:	0a00000a 	beq	aa4c <CGPIOPin::SetMode(TGPIOMode, bool)+0xf0>
    aa20:	e5d43010 	ldrb	r3, [r4, #16]
    aa24:	e3530003 	cmp	r3, #3
    aa28:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    aa2c:	ea000006 	b	aa4c <CGPIOPin::SetMode(TGPIOMode, bool)+0xf0>
    aa30:	0000aaf0 	.word	0x0000aaf0
    aa34:	0000aae0 	.word	0x0000aae0
    aa38:	0000aad0 	.word	0x0000aad0
    aa3c:	0000aa40 	.word	0x0000aa40
    aa40:	e1a00004 	mov	r0, r4
    aa44:	e3a01001 	mov	r1, #1
    aa48:	ebffff66 	bl	a7e8 <CGPIOPin::SetPullUpMode(unsigned int)>
    aa4c:	e3a03000 	mov	r3, #0
    aa50:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    aa54:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    aa58:	e1560002 	cmp	r6, r2
    aa5c:	1a000009 	bne	aa88 <CGPIOPin::SetMode(TGPIOMode, bool)+0x12c>
    aa60:	e1a00004 	mov	r0, r4
    aa64:	ebffff87 	bl	a888 <CGPIOPin::SetAlternateFunction(unsigned int)>
    aa68:	e3a03000 	mov	r3, #0
    aa6c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    aa70:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    aa74:	e3a0204f 	mov	r2, #79	; 0x4f
    aa78:	e59f1098 	ldr	r1, [pc, #152]	; ab18 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1bc>
    aa7c:	e59f0098 	ldr	r0, [pc, #152]	; ab1c <CGPIOPin::SetMode(TGPIOMode, bool)+0x1c0>
    aa80:	eb000a9f 	bl	d504 <assertion_failed>
    aa84:	eaffffba 	b	a974 <CGPIOPin::SetMode(TGPIOMode, bool)+0x18>
    aa88:	e1a01002 	mov	r1, r2
    aa8c:	e1a00004 	mov	r0, r4
    aa90:	ebffff54 	bl	a7e8 <CGPIOPin::SetPullUpMode(unsigned int)>
    aa94:	e5d43010 	ldrb	r3, [r4, #16]
    aa98:	e2431004 	sub	r1, r3, #4
    aa9c:	eaffffef 	b	aa60 <CGPIOPin::SetMode(TGPIOMode, bool)+0x104>
    aaa0:	e3a02068 	mov	r2, #104	; 0x68
    aaa4:	e59f106c 	ldr	r1, [pc, #108]	; ab18 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1bc>
    aaa8:	e59f0070 	ldr	r0, [pc, #112]	; ab20 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1c4>
    aaac:	eb000a94 	bl	d504 <assertion_failed>
    aab0:	e5943004 	ldr	r3, [r4, #4]
    aab4:	eaffffbe 	b	a9b4 <CGPIOPin::SetMode(TGPIOMode, bool)+0x58>
    aab8:	eb0008a9 	bl	cd64 <EnterCritical>
    aabc:	eaffffc9 	b	a9e8 <CGPIOPin::SetMode(TGPIOMode, bool)+0x8c>
    aac0:	eb0008d4 	bl	ce18 <LeaveCritical>
    aac4:	e3560000 	cmp	r6, #0
    aac8:	0affffdf 	beq	aa4c <CGPIOPin::SetMode(TGPIOMode, bool)+0xf0>
    aacc:	eaffffd3 	b	aa20 <CGPIOPin::SetMode(TGPIOMode, bool)+0xc4>
    aad0:	e1a00004 	mov	r0, r4
    aad4:	e3a01002 	mov	r1, #2
    aad8:	ebffff42 	bl	a7e8 <CGPIOPin::SetPullUpMode(unsigned int)>
    aadc:	eaffffda 	b	aa4c <CGPIOPin::SetMode(TGPIOMode, bool)+0xf0>
    aae0:	e1a00004 	mov	r0, r4
    aae4:	e3a01000 	mov	r1, #0
    aae8:	ebfffd6b 	bl	a09c <CGPIOPin::Write(unsigned int)>
    aaec:	eaffffd6 	b	aa4c <CGPIOPin::SetMode(TGPIOMode, bool)+0xf0>
    aaf0:	e1a00004 	mov	r0, r4
    aaf4:	e3a01000 	mov	r1, #0
    aaf8:	ebffff3a 	bl	a7e8 <CGPIOPin::SetPullUpMode(unsigned int)>
    aafc:	eaffffd2 	b	aa4c <CGPIOPin::SetMode(TGPIOMode, bool)+0xf0>
    ab00:	e1a01002 	mov	r1, r2
    ab04:	e1a00004 	mov	r0, r4
    ab08:	ebffff36 	bl	a7e8 <CGPIOPin::SetPullUpMode(unsigned int)>
    ab0c:	eaffffa5 	b	a9a8 <CGPIOPin::SetMode(TGPIOMode, bool)+0x4c>
    ab10:	cccccccd 	.word	0xcccccccd
    ab14:	0001132c 	.word	0x0001132c
    ab18:	00010438 	.word	0x00010438
    ab1c:	00010664 	.word	0x00010664
    ab20:	00010458 	.word	0x00010458

0000ab24 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>:
    ab24:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    ab28:	e3a0c006 	mov	ip, #6
    ab2c:	e3a0e000 	mov	lr, #0
    ab30:	e3a07036 	mov	r7, #54	; 0x36
    ab34:	e3a0600a 	mov	r6, #10
    ab38:	e1a04000 	mov	r4, r0
    ab3c:	e1a05002 	mov	r5, r2
    ab40:	e5803018 	str	r3, [r0, #24]
    ab44:	e59f302c 	ldr	r3, [pc, #44]	; ab78 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x54>
    ab48:	e580e01c 	str	lr, [r0, #28]
    ab4c:	e8800088 	stm	r0, {r3, r7}
    ab50:	e5c0c024 	strb	ip, [r0, #36]	; 0x24
    ab54:	e5c0c025 	strb	ip, [r0, #37]	; 0x25
    ab58:	e5c06010 	strb	r6, [r0, #16]
    ab5c:	ebfffd29 	bl	a008 <CGPIOPin::AssignPin(unsigned int)>
    ab60:	e1a00004 	mov	r0, r4
    ab64:	e1a01005 	mov	r1, r5
    ab68:	e3a02001 	mov	r2, #1
    ab6c:	ebffff7a 	bl	a95c <CGPIOPin::SetMode(TGPIOMode, bool)>
    ab70:	e1a00004 	mov	r0, r4
    ab74:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ab78:	00010418 	.word	0x00010418

0000ab7c <CGPIOPin::InterruptHandler()>:
    ab7c:	e5d03010 	ldrb	r3, [r0, #16]
    ab80:	e92d4010 	push	{r4, lr}
    ab84:	e2432002 	sub	r2, r3, #2
    ab88:	e3530000 	cmp	r3, #0
    ab8c:	13520001 	cmpne	r2, #1
    ab90:	e1a04000 	mov	r4, r0
    ab94:	9a000003 	bls	aba8 <CGPIOPin::InterruptHandler()+0x2c>
    ab98:	e59f2074 	ldr	r2, [pc, #116]	; ac14 <CGPIOPin::InterruptHandler()+0x98>
    ab9c:	e59f1074 	ldr	r1, [pc, #116]	; ac18 <CGPIOPin::InterruptHandler()+0x9c>
    aba0:	e59f0074 	ldr	r0, [pc, #116]	; ac1c <CGPIOPin::InterruptHandler()+0xa0>
    aba4:	eb000a56 	bl	d504 <assertion_failed>
    aba8:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    abac:	e3530005 	cmp	r3, #5
    abb0:	da000002 	ble	abc0 <CGPIOPin::InterruptHandler()+0x44>
    abb4:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    abb8:	e3530005 	cmp	r3, #5
    abbc:	ca000005 	bgt	abd8 <CGPIOPin::InterruptHandler()+0x5c>
    abc0:	e594301c 	ldr	r3, [r4, #28]
    abc4:	e3530000 	cmp	r3, #0
    abc8:	0a000009 	beq	abf4 <CGPIOPin::InterruptHandler()+0x78>
    abcc:	e5940020 	ldr	r0, [r4, #32]
    abd0:	e8bd4010 	pop	{r4, lr}
    abd4:	e12fff13 	bx	r3
    abd8:	e59f2040 	ldr	r2, [pc, #64]	; ac20 <CGPIOPin::InterruptHandler()+0xa4>
    abdc:	e59f1034 	ldr	r1, [pc, #52]	; ac18 <CGPIOPin::InterruptHandler()+0x9c>
    abe0:	e59f003c 	ldr	r0, [pc, #60]	; ac24 <CGPIOPin::InterruptHandler()+0xa8>
    abe4:	eb000a46 	bl	d504 <assertion_failed>
    abe8:	e594301c 	ldr	r3, [r4, #28]
    abec:	e3530000 	cmp	r3, #0
    abf0:	1afffff5 	bne	abcc <CGPIOPin::InterruptHandler()+0x50>
    abf4:	e59f002c 	ldr	r0, [pc, #44]	; ac28 <CGPIOPin::InterruptHandler()+0xac>
    abf8:	e59f202c 	ldr	r2, [pc, #44]	; ac2c <CGPIOPin::InterruptHandler()+0xb0>
    abfc:	e59f1014 	ldr	r1, [pc, #20]	; ac18 <CGPIOPin::InterruptHandler()+0x9c>
    ac00:	eb000a3f 	bl	d504 <assertion_failed>
    ac04:	e594301c 	ldr	r3, [r4, #28]
    ac08:	e5940020 	ldr	r0, [r4, #32]
    ac0c:	e8bd4010 	pop	{r4, lr}
    ac10:	e12fff13 	bx	r3
    ac14:	0000015b 	.word	0x0000015b
    ac18:	00010438 	.word	0x00010438
    ac1c:	000104b0 	.word	0x000104b0
    ac20:	0000015d 	.word	0x0000015d
    ac24:	0001067c 	.word	0x0001067c
    ac28:	00010594 	.word	0x00010594
    ac2c:	0000015f 	.word	0x0000015f

0000ac30 <CGPIOPin::DisableAllInterrupts(unsigned int)>:
    ac30:	e3500035 	cmp	r0, #53	; 0x35
    ac34:	e92d4070 	push	{r4, r5, r6, lr}
    ac38:	e1a05000 	mov	r5, r0
    ac3c:	8a00001e 	bhi	acbc <CGPIOPin::DisableAllInterrupts(unsigned int)+0x8c>
    ac40:	e3a02001 	mov	r2, #1
    ac44:	e59f6084 	ldr	r6, [pc, #132]	; acd0 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xa0>
    ac48:	e59f4084 	ldr	r4, [pc, #132]	; acd4 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xa4>
    ac4c:	e5960000 	ldr	r0, [r6]
    ac50:	e08442a5 	add	r4, r4, r5, lsr #5
    ac54:	e3500000 	cmp	r0, #0
    ac58:	e205501f 	and	r5, r5, #31
    ac5c:	e1a04104 	lsl	r4, r4, #2
    ac60:	e1a05512 	lsl	r5, r2, r5
    ac64:	1a00000f 	bne	aca8 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x78>
    ac68:	e59f3068 	ldr	r3, [pc, #104]	; acd8 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xa8>
    ac6c:	e1540003 	cmp	r4, r3
    ac70:	8a00000b 	bhi	aca4 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x74>
    ac74:	e1e02005 	mvn	r2, r5
    ac78:	e59f1058 	ldr	r1, [pc, #88]	; acd8 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xa8>
    ac7c:	e5943000 	ldr	r3, [r4]
    ac80:	e0033002 	and	r3, r3, r2
    ac84:	e484300c 	str	r3, [r4], #12
    ac88:	e1540001 	cmp	r4, r1
    ac8c:	9afffffa 	bls	ac7c <CGPIOPin::DisableAllInterrupts(unsigned int)+0x4c>
    ac90:	e5963000 	ldr	r3, [r6]
    ac94:	e3530000 	cmp	r3, #0
    ac98:	08bd8070 	popeq	{r4, r5, r6, pc}
    ac9c:	e8bd4070 	pop	{r4, r5, r6, lr}
    aca0:	ea00085c 	b	ce18 <LeaveCritical>
    aca4:	e8bd8070 	pop	{r4, r5, r6, pc}
    aca8:	eb00082d 	bl	cd64 <EnterCritical>
    acac:	e59f3024 	ldr	r3, [pc, #36]	; acd8 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xa8>
    acb0:	e1540003 	cmp	r4, r3
    acb4:	9affffee 	bls	ac74 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x44>
    acb8:	eafffff4 	b	ac90 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x60>
    acbc:	e59f2018 	ldr	r2, [pc, #24]	; acdc <CGPIOPin::DisableAllInterrupts(unsigned int)+0xac>
    acc0:	e59f1018 	ldr	r1, [pc, #24]	; ace0 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xb0>
    acc4:	e59f0018 	ldr	r0, [pc, #24]	; ace4 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xb4>
    acc8:	eb000a0d 	bl	d504 <assertion_failed>
    accc:	eaffffdb 	b	ac40 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x10>
    acd0:	0001132c 	.word	0x0001132c
    acd4:	08080013 	.word	0x08080013
    acd8:	2020008b 	.word	0x2020008b
    acdc:	00000165 	.word	0x00000165
    ace0:	00010438 	.word	0x00010438
    ace4:	000106c8 	.word	0x000106c8

0000ace8 <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE>:
    ace8:	e3a02001 	mov	r2, #1
    acec:	e59f3004 	ldr	r3, [pc, #4]	; acf8 <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE+0x10>
    acf0:	e5832000 	str	r2, [r3]
    acf4:	e12fff1e 	bx	lr
    acf8:	0001132c 	.word	0x0001132c

0000acfc <CInterruptSystem::CInterruptSystem()>:
    acfc:	e1a0c000 	mov	ip, r0
    ad00:	e2802f47 	add	r2, r0, #284	; 0x11c
    ad04:	e1a00002 	mov	r0, r2
    ad08:	e3a01000 	mov	r1, #0
    ad0c:	e24c3004 	sub	r3, ip, #4
    ad10:	e5a31004 	str	r1, [r3, #4]!
    ad14:	e1530000 	cmp	r3, r0
    ad18:	e5a21004 	str	r1, [r2, #4]!
    ad1c:	1afffffb 	bne	ad10 <CInterruptSystem::CInterruptSystem()+0x14>
    ad20:	e59f3008 	ldr	r3, [pc, #8]	; ad30 <CInterruptSystem::CInterruptSystem()+0x34>
    ad24:	e1a0000c 	mov	r0, ip
    ad28:	e583c000 	str	ip, [r3]
    ad2c:	e12fff1e 	bx	lr
    ad30:	00011330 	.word	0x00011330

0000ad34 <CInterruptSystem::~CInterruptSystem()>:
    ad34:	e3a02000 	mov	r2, #0
    ad38:	e59f3004 	ldr	r3, [pc, #4]	; ad44 <CInterruptSystem::~CInterruptSystem()+0x10>
    ad3c:	e5832000 	str	r2, [r3]
    ad40:	e12fff1e 	bx	lr
    ad44:	00011330 	.word	0x00011330

0000ad48 <CInterruptSystem::Initialize()>:
    ad48:	e92d4010 	push	{r4, lr}
    ad4c:	e3a04000 	mov	r4, #0
    ad50:	e59f2050 	ldr	r2, [pc, #80]	; ada8 <CInterruptSystem::Initialize()+0x60>
    ad54:	e59f3050 	ldr	r3, [pc, #80]	; adac <CInterruptSystem::Initialize()+0x64>
    ad58:	e1a02142 	asr	r2, r2, #2
    ad5c:	e1a03143 	asr	r3, r3, #2
    ad60:	e2422002 	sub	r2, r2, #2
    ad64:	e2433002 	sub	r3, r3, #2
    ad68:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
    ad6c:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
    ad70:	e5842018 	str	r2, [r4, #24]
    ad74:	e584301c 	str	r3, [r4, #28]
    ad78:	eb00084b 	bl	ceac <SyncDataAndInstructionCache>
    ad7c:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
    ad80:	e3e02000 	mvn	r2, #0
    ad84:	e59f3024 	ldr	r3, [pc, #36]	; adb0 <CInterruptSystem::Initialize()+0x68>
    ad88:	e583420c 	str	r4, [r3, #524]	; 0x20c
    ad8c:	e583221c 	str	r2, [r3, #540]	; 0x21c
    ad90:	e5832220 	str	r2, [r3, #544]	; 0x220
    ad94:	e5832224 	str	r2, [r3, #548]	; 0x224
    ad98:	ee074fba 	mcr	15, 0, r4, cr7, cr10, {5}
    ad9c:	f1080080 	cpsie	i
    ada0:	e3a00001 	mov	r0, #1
    ada4:	e8bd8010 	pop	{r4, pc}
    ada8:	0000c940 	.word	0x0000c940
    adac:	0000c94c 	.word	0x0000c94c
    adb0:	2000b000 	.word	0x2000b000

0000adb4 <CInterruptSystem::DisconnectFIQ()>:
    adb4:	e92d4010 	push	{r4, lr}
    adb8:	e59f4068 	ldr	r4, [pc, #104]	; ae28 <CInterruptSystem::DisconnectFIQ()+0x74>
    adbc:	e5d42001 	ldrb	r2, [r4, #1]
    adc0:	e5d43000 	ldrb	r3, [r4]
    adc4:	e5d41002 	ldrb	r1, [r4, #2]
    adc8:	e1833402 	orr	r3, r3, r2, lsl #8
    adcc:	e5d42003 	ldrb	r2, [r4, #3]
    add0:	e1833801 	orr	r3, r3, r1, lsl #16
    add4:	e1933c02 	orrs	r3, r3, r2, lsl #24
    add8:	0a00000d 	beq	ae14 <CInterruptSystem::DisconnectFIQ()+0x60>
    addc:	e3a03000 	mov	r3, #0
    ade0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    ade4:	e59f2040 	ldr	r2, [pc, #64]	; ae2c <CInterruptSystem::DisconnectFIQ()+0x78>
    ade8:	e582320c 	str	r3, [r2, #524]	; 0x20c
    adec:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    adf0:	e5c43000 	strb	r3, [r4]
    adf4:	e5c43001 	strb	r3, [r4, #1]
    adf8:	e5c43002 	strb	r3, [r4, #2]
    adfc:	e5c43003 	strb	r3, [r4, #3]
    ae00:	e5c43004 	strb	r3, [r4, #4]
    ae04:	e5c43005 	strb	r3, [r4, #5]
    ae08:	e5c43006 	strb	r3, [r4, #6]
    ae0c:	e5c43007 	strb	r3, [r4, #7]
    ae10:	e8bd8010 	pop	{r4, pc}
    ae14:	e3a02086 	mov	r2, #134	; 0x86
    ae18:	e59f1010 	ldr	r1, [pc, #16]	; ae30 <CInterruptSystem::DisconnectFIQ()+0x7c>
    ae1c:	e59f0010 	ldr	r0, [pc, #16]	; ae34 <CInterruptSystem::DisconnectFIQ()+0x80>
    ae20:	eb0009b7 	bl	d504 <assertion_failed>
    ae24:	eaffffec 	b	addc <CInterruptSystem::DisconnectFIQ()+0x28>
    ae28:	000112c4 	.word	0x000112c4
    ae2c:	2000b000 	.word	0x2000b000
    ae30:	000106dc 	.word	0x000106dc
    ae34:	000106ec 	.word	0x000106ec

0000ae38 <CInterruptSystem::EnableIRQ(unsigned int)>:
    ae38:	e92d4010 	push	{r4, lr}
    ae3c:	e3a03000 	mov	r3, #0
    ae40:	e1a04000 	mov	r4, r0
    ae44:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    ae48:	e3500047 	cmp	r0, #71	; 0x47
    ae4c:	8a00000d 	bhi	ae88 <CInterruptSystem::EnableIRQ(unsigned int)+0x50>
    ae50:	e350001f 	cmp	r0, #31
    ae54:	8a000007 	bhi	ae78 <CInterruptSystem::EnableIRQ(unsigned int)+0x40>
    ae58:	e59f2040 	ldr	r2, [pc, #64]	; aea0 <CInterruptSystem::EnableIRQ(unsigned int)+0x68>
    ae5c:	e3a03001 	mov	r3, #1
    ae60:	e204401f 	and	r4, r4, #31
    ae64:	e1a04413 	lsl	r4, r3, r4
    ae68:	e5824000 	str	r4, [r2]
    ae6c:	e3a03000 	mov	r3, #0
    ae70:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    ae74:	e8bd8010 	pop	{r4, pc}
    ae78:	e350003f 	cmp	r0, #63	; 0x3f
    ae7c:	959f2020 	ldrls	r2, [pc, #32]	; aea4 <CInterruptSystem::EnableIRQ(unsigned int)+0x6c>
    ae80:	859f2020 	ldrhi	r2, [pc, #32]	; aea8 <CInterruptSystem::EnableIRQ(unsigned int)+0x70>
    ae84:	eafffff4 	b	ae5c <CInterruptSystem::EnableIRQ(unsigned int)+0x24>
    ae88:	e3a02092 	mov	r2, #146	; 0x92
    ae8c:	e59f1018 	ldr	r1, [pc, #24]	; aeac <CInterruptSystem::EnableIRQ(unsigned int)+0x74>
    ae90:	e59f0018 	ldr	r0, [pc, #24]	; aeb0 <CInterruptSystem::EnableIRQ(unsigned int)+0x78>
    ae94:	eb00099a 	bl	d504 <assertion_failed>
    ae98:	e59f2008 	ldr	r2, [pc, #8]	; aea8 <CInterruptSystem::EnableIRQ(unsigned int)+0x70>
    ae9c:	eaffffee 	b	ae5c <CInterruptSystem::EnableIRQ(unsigned int)+0x24>
    aea0:	2000b210 	.word	0x2000b210
    aea4:	2000b214 	.word	0x2000b214
    aea8:	2000b218 	.word	0x2000b218
    aeac:	000106dc 	.word	0x000106dc
    aeb0:	00010704 	.word	0x00010704

0000aeb4 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>:
    aeb4:	e3510047 	cmp	r1, #71	; 0x47
    aeb8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    aebc:	e1a04001 	mov	r4, r1
    aec0:	e1a05000 	mov	r5, r0
    aec4:	e1a08002 	mov	r8, r2
    aec8:	e1a07003 	mov	r7, r3
    aecc:	8a00000c 	bhi	af04 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x50>
    aed0:	e7953104 	ldr	r3, [r5, r4, lsl #2]
    aed4:	e0856104 	add	r6, r5, r4, lsl #2
    aed8:	e3530000 	cmp	r3, #0
    aedc:	0a000003 	beq	aef0 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x3c>
    aee0:	e3a02062 	mov	r2, #98	; 0x62
    aee4:	e59f102c 	ldr	r1, [pc, #44]	; af18 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x64>
    aee8:	e59f002c 	ldr	r0, [pc, #44]	; af1c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x68>
    aeec:	eb000984 	bl	d504 <assertion_failed>
    aef0:	e7858104 	str	r8, [r5, r4, lsl #2]
    aef4:	e1a00004 	mov	r0, r4
    aef8:	e5867120 	str	r7, [r6, #288]	; 0x120
    aefc:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    af00:	eaffffcc 	b	ae38 <CInterruptSystem::EnableIRQ(unsigned int)>
    af04:	e3a02061 	mov	r2, #97	; 0x61
    af08:	e59f1008 	ldr	r1, [pc, #8]	; af18 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x64>
    af0c:	e59f000c 	ldr	r0, [pc, #12]	; af20 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x6c>
    af10:	eb00097b 	bl	d504 <assertion_failed>
    af14:	eaffffed 	b	aed0 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x1c>
    af18:	000106dc 	.word	0x000106dc
    af1c:	00010718 	.word	0x00010718
    af20:	00010704 	.word	0x00010704

0000af24 <CInterruptSystem::DisableIRQ(unsigned int)>:
    af24:	e92d4010 	push	{r4, lr}
    af28:	e3a03000 	mov	r3, #0
    af2c:	e1a04000 	mov	r4, r0
    af30:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    af34:	e3500047 	cmp	r0, #71	; 0x47
    af38:	8a00000d 	bhi	af74 <CInterruptSystem::DisableIRQ(unsigned int)+0x50>
    af3c:	e350001f 	cmp	r0, #31
    af40:	8a000007 	bhi	af64 <CInterruptSystem::DisableIRQ(unsigned int)+0x40>
    af44:	e59f2040 	ldr	r2, [pc, #64]	; af8c <CInterruptSystem::DisableIRQ(unsigned int)+0x68>
    af48:	e3a03001 	mov	r3, #1
    af4c:	e204401f 	and	r4, r4, #31
    af50:	e1a04413 	lsl	r4, r3, r4
    af54:	e5824000 	str	r4, [r2]
    af58:	e3a03000 	mov	r3, #0
    af5c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    af60:	e8bd8010 	pop	{r4, pc}
    af64:	e350003f 	cmp	r0, #63	; 0x3f
    af68:	959f2020 	ldrls	r2, [pc, #32]	; af90 <CInterruptSystem::DisableIRQ(unsigned int)+0x6c>
    af6c:	859f2020 	ldrhi	r2, [pc, #32]	; af94 <CInterruptSystem::DisableIRQ(unsigned int)+0x70>
    af70:	eafffff4 	b	af48 <CInterruptSystem::DisableIRQ(unsigned int)+0x24>
    af74:	e3a0209d 	mov	r2, #157	; 0x9d
    af78:	e59f1018 	ldr	r1, [pc, #24]	; af98 <CInterruptSystem::DisableIRQ(unsigned int)+0x74>
    af7c:	e59f0018 	ldr	r0, [pc, #24]	; af9c <CInterruptSystem::DisableIRQ(unsigned int)+0x78>
    af80:	eb00095f 	bl	d504 <assertion_failed>
    af84:	e59f2008 	ldr	r2, [pc, #8]	; af94 <CInterruptSystem::DisableIRQ(unsigned int)+0x70>
    af88:	eaffffee 	b	af48 <CInterruptSystem::DisableIRQ(unsigned int)+0x24>
    af8c:	2000b21c 	.word	0x2000b21c
    af90:	2000b220 	.word	0x2000b220
    af94:	2000b224 	.word	0x2000b224
    af98:	000106dc 	.word	0x000106dc
    af9c:	00010704 	.word	0x00010704

0000afa0 <CInterruptSystem::DisconnectIRQ(unsigned int)>:
    afa0:	e3510047 	cmp	r1, #71	; 0x47
    afa4:	e92d4070 	push	{r4, r5, r6, lr}
    afa8:	e1a04001 	mov	r4, r1
    afac:	e1a05000 	mov	r5, r0
    afb0:	8a000009 	bhi	afdc <CInterruptSystem::DisconnectIRQ(unsigned int)+0x3c>
    afb4:	e7953104 	ldr	r3, [r5, r4, lsl #2]
    afb8:	e0856104 	add	r6, r5, r4, lsl #2
    afbc:	e3530000 	cmp	r3, #0
    afc0:	0a00000d 	beq	affc <CInterruptSystem::DisconnectIRQ(unsigned int)+0x5c>
    afc4:	e1a00004 	mov	r0, r4
    afc8:	ebffffd5 	bl	af24 <CInterruptSystem::DisableIRQ(unsigned int)>
    afcc:	e3a03000 	mov	r3, #0
    afd0:	e7853104 	str	r3, [r5, r4, lsl #2]
    afd4:	e5863120 	str	r3, [r6, #288]	; 0x120
    afd8:	e8bd8070 	pop	{r4, r5, r6, pc}
    afdc:	e3a0206c 	mov	r2, #108	; 0x6c
    afe0:	e59f1028 	ldr	r1, [pc, #40]	; b010 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x70>
    afe4:	e59f0028 	ldr	r0, [pc, #40]	; b014 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x74>
    afe8:	eb000945 	bl	d504 <assertion_failed>
    afec:	e7953104 	ldr	r3, [r5, r4, lsl #2]
    aff0:	e0856104 	add	r6, r5, r4, lsl #2
    aff4:	e3530000 	cmp	r3, #0
    aff8:	1afffff1 	bne	afc4 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x24>
    affc:	e3a0206d 	mov	r2, #109	; 0x6d
    b000:	e59f1008 	ldr	r1, [pc, #8]	; b010 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x70>
    b004:	e59f000c 	ldr	r0, [pc, #12]	; b018 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x78>
    b008:	eb00093d 	bl	d504 <assertion_failed>
    b00c:	eaffffec 	b	afc4 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x24>
    b010:	000106dc 	.word	0x000106dc
    b014:	00010704 	.word	0x00010704
    b018:	00010734 	.word	0x00010734

0000b01c <CInterruptSystem::EnableFIQ(unsigned int)>:
    b01c:	e92d4010 	push	{r4, lr}
    b020:	e3a03000 	mov	r3, #0
    b024:	e1a04000 	mov	r4, r0
    b028:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    b02c:	e3500047 	cmp	r0, #71	; 0x47
    b030:	9a000003 	bls	b044 <CInterruptSystem::EnableFIQ(unsigned int)+0x28>
    b034:	e3a020a8 	mov	r2, #168	; 0xa8
    b038:	e59f101c 	ldr	r1, [pc, #28]	; b05c <CInterruptSystem::EnableFIQ(unsigned int)+0x40>
    b03c:	e59f001c 	ldr	r0, [pc, #28]	; b060 <CInterruptSystem::EnableFIQ(unsigned int)+0x44>
    b040:	eb00092f 	bl	d504 <assertion_failed>
    b044:	e59f3018 	ldr	r3, [pc, #24]	; b064 <CInterruptSystem::EnableFIQ(unsigned int)+0x48>
    b048:	e3844080 	orr	r4, r4, #128	; 0x80
    b04c:	e583420c 	str	r4, [r3, #524]	; 0x20c
    b050:	e3a03000 	mov	r3, #0
    b054:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    b058:	e8bd8010 	pop	{r4, pc}
    b05c:	000106dc 	.word	0x000106dc
    b060:	00010750 	.word	0x00010750
    b064:	2000b000 	.word	0x2000b000

0000b068 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>:
    b068:	e3510047 	cmp	r1, #71	; 0x47
    b06c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b070:	e1a07001 	mov	r7, r1
    b074:	e1a06002 	mov	r6, r2
    b078:	e1a05003 	mov	r5, r3
    b07c:	8a00001f 	bhi	b100 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x98>
    b080:	e3560000 	cmp	r6, #0
    b084:	0a000022 	beq	b114 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xac>
    b088:	e59f4098 	ldr	r4, [pc, #152]	; b128 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc0>
    b08c:	e5d42001 	ldrb	r2, [r4, #1]
    b090:	e5d43000 	ldrb	r3, [r4]
    b094:	e5d41002 	ldrb	r1, [r4, #2]
    b098:	e1833402 	orr	r3, r3, r2, lsl #8
    b09c:	e5d42003 	ldrb	r2, [r4, #3]
    b0a0:	e1833801 	orr	r3, r3, r1, lsl #16
    b0a4:	e1933c02 	orrs	r3, r3, r2, lsl #24
    b0a8:	0a000003 	beq	b0bc <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x54>
    b0ac:	e3a0207c 	mov	r2, #124	; 0x7c
    b0b0:	e59f1074 	ldr	r1, [pc, #116]	; b12c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc4>
    b0b4:	e59f0074 	ldr	r0, [pc, #116]	; b130 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc8>
    b0b8:	eb000911 	bl	d504 <assertion_failed>
    b0bc:	e1a0e426 	lsr	lr, r6, #8
    b0c0:	e1a0c826 	lsr	ip, r6, #16
    b0c4:	e1a01c26 	lsr	r1, r6, #24
    b0c8:	e1a02425 	lsr	r2, r5, #8
    b0cc:	e1a03825 	lsr	r3, r5, #16
    b0d0:	e5c45004 	strb	r5, [r4, #4]
    b0d4:	e1a05c25 	lsr	r5, r5, #24
    b0d8:	e1a00007 	mov	r0, r7
    b0dc:	e5c46000 	strb	r6, [r4]
    b0e0:	e5c4e001 	strb	lr, [r4, #1]
    b0e4:	e5c4c002 	strb	ip, [r4, #2]
    b0e8:	e5c41003 	strb	r1, [r4, #3]
    b0ec:	e5c42005 	strb	r2, [r4, #5]
    b0f0:	e5c43006 	strb	r3, [r4, #6]
    b0f4:	e5c45007 	strb	r5, [r4, #7]
    b0f8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    b0fc:	eaffffc6 	b	b01c <CInterruptSystem::EnableFIQ(unsigned int)>
    b100:	e3a0207a 	mov	r2, #122	; 0x7a
    b104:	e59f1020 	ldr	r1, [pc, #32]	; b12c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc4>
    b108:	e59f0024 	ldr	r0, [pc, #36]	; b134 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xcc>
    b10c:	eb0008fc 	bl	d504 <assertion_failed>
    b110:	eaffffda 	b	b080 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x18>
    b114:	e3a0207b 	mov	r2, #123	; 0x7b
    b118:	e59f100c 	ldr	r1, [pc, #12]	; b12c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc4>
    b11c:	e59f0014 	ldr	r0, [pc, #20]	; b138 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xd0>
    b120:	eb0008f7 	bl	d504 <assertion_failed>
    b124:	eaffffd7 	b	b088 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x20>
    b128:	000112c4 	.word	0x000112c4
    b12c:	000106dc 	.word	0x000106dc
    b130:	00010764 	.word	0x00010764
    b134:	00010750 	.word	0x00010750
    b138:	000106f4 	.word	0x000106f4

0000b13c <CInterruptSystem::DisableFIQ()>:
    b13c:	e3a03000 	mov	r3, #0
    b140:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    b144:	e59f2008 	ldr	r2, [pc, #8]	; b154 <CInterruptSystem::DisableFIQ()+0x18>
    b148:	e582320c 	str	r3, [r2, #524]	; 0x20c
    b14c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    b150:	e12fff1e 	bx	lr
    b154:	2000b000 	.word	0x2000b000

0000b158 <CInterruptSystem::Get()>:
    b158:	e92d4010 	push	{r4, lr}
    b15c:	e59f4020 	ldr	r4, [pc, #32]	; b184 <CInterruptSystem::Get()+0x2c>
    b160:	e5940000 	ldr	r0, [r4]
    b164:	e3500000 	cmp	r0, #0
    b168:	18bd8010 	popne	{r4, pc}
    b16c:	e3a020ba 	mov	r2, #186	; 0xba
    b170:	e59f1010 	ldr	r1, [pc, #16]	; b188 <CInterruptSystem::Get()+0x30>
    b174:	e59f0010 	ldr	r0, [pc, #16]	; b18c <CInterruptSystem::Get()+0x34>
    b178:	eb0008e1 	bl	d504 <assertion_failed>
    b17c:	e5940000 	ldr	r0, [r4]
    b180:	e8bd8010 	pop	{r4, pc}
    b184:	00011330 	.word	0x00011330
    b188:	000106dc 	.word	0x000106dc
    b18c:	0001077c 	.word	0x0001077c

0000b190 <CInterruptSystem::CallIRQHandler(unsigned int)>:
    b190:	e3510047 	cmp	r1, #71	; 0x47
    b194:	e92d4070 	push	{r4, r5, r6, lr}
    b198:	e1a06001 	mov	r6, r1
    b19c:	e1a05000 	mov	r5, r0
    b1a0:	8a000007 	bhi	b1c4 <CInterruptSystem::CallIRQHandler(unsigned int)+0x34>
    b1a4:	e7954106 	ldr	r4, [r5, r6, lsl #2]
    b1a8:	e0855106 	add	r5, r5, r6, lsl #2
    b1ac:	e3540000 	cmp	r4, #0
    b1b0:	0a00000b 	beq	b1e4 <CInterruptSystem::CallIRQHandler(unsigned int)+0x54>
    b1b4:	e5950120 	ldr	r0, [r5, #288]	; 0x120
    b1b8:	e12fff34 	blx	r4
    b1bc:	e3a00001 	mov	r0, #1
    b1c0:	e8bd8070 	pop	{r4, r5, r6, pc}
    b1c4:	e3a020c0 	mov	r2, #192	; 0xc0
    b1c8:	e59f1024 	ldr	r1, [pc, #36]	; b1f4 <CInterruptSystem::CallIRQHandler(unsigned int)+0x64>
    b1cc:	e59f0024 	ldr	r0, [pc, #36]	; b1f8 <CInterruptSystem::CallIRQHandler(unsigned int)+0x68>
    b1d0:	eb0008cb 	bl	d504 <assertion_failed>
    b1d4:	e7954106 	ldr	r4, [r5, r6, lsl #2]
    b1d8:	e0855106 	add	r5, r5, r6, lsl #2
    b1dc:	e3540000 	cmp	r4, #0
    b1e0:	1afffff3 	bne	b1b4 <CInterruptSystem::CallIRQHandler(unsigned int)+0x24>
    b1e4:	e1a00006 	mov	r0, r6
    b1e8:	ebffff4d 	bl	af24 <CInterruptSystem::DisableIRQ(unsigned int)>
    b1ec:	e1a00004 	mov	r0, r4
    b1f0:	e8bd8070 	pop	{r4, r5, r6, pc}
    b1f4:	000106dc 	.word	0x000106dc
    b1f8:	00010704 	.word	0x00010704

0000b1fc <CInterruptSystem::InterruptHandler()>:
    b1fc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b200:	e59f70a8 	ldr	r7, [pc, #168]	; b2b0 <CInterruptSystem::InterruptHandler()+0xb4>
    b204:	e24dd010 	sub	sp, sp, #16
    b208:	e5973000 	ldr	r3, [r7]
    b20c:	e3530000 	cmp	r3, #0
    b210:	0a000021 	beq	b29c <CInterruptSystem::InterruptHandler()+0xa0>
    b214:	e3a06000 	mov	r6, #0
    b218:	ee076f9a 	mcr	15, 0, r6, cr7, cr10, {4}
    b21c:	e59f3090 	ldr	r3, [pc, #144]	; b2b4 <CInterruptSystem::InterruptHandler()+0xb8>
    b220:	e5932204 	ldr	r2, [r3, #516]	; 0x204
    b224:	e58d2004 	str	r2, [sp, #4]
    b228:	e5932208 	ldr	r2, [r3, #520]	; 0x208
    b22c:	e58d2008 	str	r2, [sp, #8]
    b230:	e5933200 	ldr	r3, [r3, #512]	; 0x200
    b234:	e6ef3073 	uxtb	r3, r3
    b238:	e58d300c 	str	r3, [sp, #12]
    b23c:	ee076fba 	mcr	15, 0, r6, cr7, cr10, {5}
    b240:	e28d8004 	add	r8, sp, #4
    b244:	e4984004 	ldr	r4, [r8], #4
    b248:	e3540000 	cmp	r4, #0
    b24c:	0a00000d 	beq	b288 <CInterruptSystem::InterruptHandler()+0x8c>
    b250:	e1a05006 	mov	r5, r6
    b254:	ea000002 	b	b264 <CInterruptSystem::InterruptHandler()+0x68>
    b258:	e1b040a4 	lsrs	r4, r4, #1
    b25c:	e2855001 	add	r5, r5, #1
    b260:	0a000008 	beq	b288 <CInterruptSystem::InterruptHandler()+0x8c>
    b264:	e3140001 	tst	r4, #1
    b268:	0afffffa 	beq	b258 <CInterruptSystem::InterruptHandler()+0x5c>
    b26c:	e1a01005 	mov	r1, r5
    b270:	e5970000 	ldr	r0, [r7]
    b274:	ebffffc5 	bl	b190 <CInterruptSystem::CallIRQHandler(unsigned int)>
    b278:	e3500000 	cmp	r0, #0
    b27c:	0afffff5 	beq	b258 <CInterruptSystem::InterruptHandler()+0x5c>
    b280:	e28dd010 	add	sp, sp, #16
    b284:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    b288:	e2866020 	add	r6, r6, #32
    b28c:	e3560060 	cmp	r6, #96	; 0x60
    b290:	1affffeb 	bne	b244 <CInterruptSystem::InterruptHandler()+0x48>
    b294:	e28dd010 	add	sp, sp, #16
    b298:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    b29c:	e3a020d3 	mov	r2, #211	; 0xd3
    b2a0:	e59f1010 	ldr	r1, [pc, #16]	; b2b8 <CInterruptSystem::InterruptHandler()+0xbc>
    b2a4:	e59f0010 	ldr	r0, [pc, #16]	; b2bc <CInterruptSystem::InterruptHandler()+0xc0>
    b2a8:	eb000895 	bl	d504 <assertion_failed>
    b2ac:	eaffffd8 	b	b214 <CInterruptSystem::InterruptHandler()+0x18>
    b2b0:	00011330 	.word	0x00011330
    b2b4:	2000b000 	.word	0x2000b000
    b2b8:	000106dc 	.word	0x000106dc
    b2bc:	0001077c 	.word	0x0001077c

0000b2c0 <InterruptHandler>:
    b2c0:	e92d4010 	push	{r4, lr}
    b2c4:	e3a04000 	mov	r4, #0
    b2c8:	ee074fba 	mcr	15, 0, r4, cr7, cr10, {5}
    b2cc:	ebffffca 	bl	b1fc <CInterruptSystem::InterruptHandler()>
    b2d0:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
    b2d4:	e8bd8010 	pop	{r4, pc}

0000b2d8 <CMachineInfo::CMachineInfo()>:
    b2d8:	e3a03000 	mov	r3, #0
    b2dc:	e92d4030 	push	{r4, r5, lr}
    b2e0:	e3a01003 	mov	r1, #3
    b2e4:	e1a04000 	mov	r4, r0
    b2e8:	e3a0000e 	mov	r0, #14
    b2ec:	e59f21a8 	ldr	r2, [pc, #424]	; b49c <CMachineInfo::CMachineInfo()+0x1c4>
    b2f0:	e24dd024 	sub	sp, sp, #36	; 0x24
    b2f4:	e5925000 	ldr	r5, [r2]
    b2f8:	e5c40004 	strb	r0, [r4, #4]
    b2fc:	e1550003 	cmp	r5, r3
    b300:	e5c41010 	strb	r1, [r4, #16]
    b304:	e5843000 	str	r3, [r4]
    b308:	e5843008 	str	r3, [r4, #8]
    b30c:	e584300c 	str	r3, [r4, #12]
    b310:	e5843014 	str	r3, [r4, #20]
    b314:	0a00000e 	beq	b354 <CMachineInfo::CMachineInfo()+0x7c>
    b318:	e595e000 	ldr	lr, [r5]
    b31c:	e5d5c004 	ldrb	ip, [r5, #4]
    b320:	e5950008 	ldr	r0, [r5, #8]
    b324:	e595100c 	ldr	r1, [r5, #12]
    b328:	e5d52010 	ldrb	r2, [r5, #16]
    b32c:	e5953014 	ldr	r3, [r5, #20]
    b330:	e584e000 	str	lr, [r4]
    b334:	e5c4c004 	strb	ip, [r4, #4]
    b338:	e5840008 	str	r0, [r4, #8]
    b33c:	e584100c 	str	r1, [r4, #12]
    b340:	e5c42010 	strb	r2, [r4, #16]
    b344:	e5843014 	str	r3, [r4, #20]
    b348:	e1a00004 	mov	r0, r4
    b34c:	e28dd024 	add	sp, sp, #36	; 0x24
    b350:	e8bd8030 	pop	{r4, r5, pc}
    b354:	e28d000c 	add	r0, sp, #12
    b358:	e5824000 	str	r4, [r2]
    b35c:	ebfffa74 	bl	9d34 <CBcmPropertyTags::CBcmPropertyTags()>
    b360:	e3a03010 	mov	r3, #16
    b364:	e58d5000 	str	r5, [sp]
    b368:	e28d000c 	add	r0, sp, #12
    b36c:	e08d2003 	add	r2, sp, r3
    b370:	e59f1128 	ldr	r1, [pc, #296]	; b4a0 <CMachineInfo::CMachineInfo()+0x1c8>
    b374:	ebfffac5 	bl	9e90 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    b378:	e3500000 	cmp	r0, #0
    b37c:	0a00000c 	beq	b3b4 <CMachineInfo::CMachineInfo()+0xdc>
    b380:	e59d101c 	ldr	r1, [sp, #28]
    b384:	e2113502 	ands	r3, r1, #8388608	; 0x800000
    b388:	e5841000 	str	r1, [r4]
    b38c:	1a00000b 	bne	b3c0 <CMachineInfo::CMachineInfo()+0xe8>
    b390:	e3a02002 	mov	r2, #2
    b394:	e59f0108 	ldr	r0, [pc, #264]	; b4a4 <CMachineInfo::CMachineInfo()+0x1cc>
    b398:	ea000000 	b	b3a0 <CMachineInfo::CMachineInfo()+0xc8>
    b39c:	e7902203 	ldr	r2, [r0, r3, lsl #4]
    b3a0:	e1510002 	cmp	r1, r2
    b3a4:	0a000012 	beq	b3f4 <CMachineInfo::CMachineInfo()+0x11c>
    b3a8:	e2833001 	add	r3, r3, #1
    b3ac:	e3530011 	cmp	r3, #17
    b3b0:	1afffff9 	bne	b39c <CMachineInfo::CMachineInfo()+0xc4>
    b3b4:	e28d000c 	add	r0, sp, #12
    b3b8:	ebfffa63 	bl	9d4c <CBcmPropertyTags::~CBcmPropertyTags()>
    b3bc:	eaffffe1 	b	b348 <CMachineInfo::CMachineInfo()+0x70>
    b3c0:	e1a00221 	lsr	r0, r1, #4
    b3c4:	e1a03005 	mov	r3, r5
    b3c8:	e59f20d8 	ldr	r2, [pc, #216]	; b4a8 <CMachineInfo::CMachineInfo()+0x1d0>
    b3cc:	e6ef0070 	uxtb	r0, r0
    b3d0:	ea000000 	b	b3d8 <CMachineInfo::CMachineInfo()+0x100>
    b3d4:	e512500c 	ldr	r5, [r2, #-12]
    b3d8:	e1550000 	cmp	r5, r0
    b3dc:	0a000011 	beq	b428 <CMachineInfo::CMachineInfo()+0x150>
    b3e0:	e2833001 	add	r3, r3, #1
    b3e4:	e353000c 	cmp	r3, #12
    b3e8:	e282200c 	add	r2, r2, #12
    b3ec:	1afffff8 	bne	b3d4 <CMachineInfo::CMachineInfo()+0xfc>
    b3f0:	eaffffef 	b	b3b4 <CMachineInfo::CMachineInfo()+0xdc>
    b3f4:	e3a00001 	mov	r0, #1
    b3f8:	e3a01000 	mov	r1, #0
    b3fc:	e59f20a8 	ldr	r2, [pc, #168]	; b4ac <CMachineInfo::CMachineInfo()+0x1d4>
    b400:	e5840008 	str	r0, [r4, #8]
    b404:	e0823203 	add	r3, r2, r3, lsl #4
    b408:	e5d30094 	ldrb	r0, [r3, #148]	; 0x94
    b40c:	e5932098 	ldr	r2, [r3, #152]	; 0x98
    b410:	e593309c 	ldr	r3, [r3, #156]	; 0x9c
    b414:	e5c40004 	strb	r0, [r4, #4]
    b418:	e584200c 	str	r2, [r4, #12]
    b41c:	e5843014 	str	r3, [r4, #20]
    b420:	e5c41010 	strb	r1, [r4, #16]
    b424:	eaffffe2 	b	b3b4 <CMachineInfo::CMachineInfo()+0xdc>
    b428:	e3a0cc01 	mov	ip, #256	; 0x100
    b42c:	e59f2078 	ldr	r2, [pc, #120]	; b4ac <CMachineInfo::CMachineInfo()+0x1d4>
    b430:	e0833083 	add	r3, r3, r3, lsl #1
    b434:	e0823103 	add	r3, r2, r3, lsl #2
    b438:	e1a00621 	lsr	r0, r1, #12
    b43c:	e1a02a21 	lsr	r2, r1, #20
    b440:	e2022007 	and	r2, r2, #7
    b444:	e200000f 	and	r0, r0, #15
    b448:	e5d3e004 	ldrb	lr, [r3, #4]
    b44c:	e3500002 	cmp	r0, #2
    b450:	e5935008 	ldr	r5, [r3, #8]
    b454:	e201300f 	and	r3, r1, #15
    b458:	e1a0121c 	lsl	r1, ip, r2
    b45c:	e5841014 	str	r1, [r4, #20]
    b460:	83a01003 	movhi	r1, #3
    b464:	e5c40010 	strb	r0, [r4, #16]
    b468:	85c41010 	strbhi	r1, [r4, #16]
    b46c:	e3520000 	cmp	r2, #0
    b470:	035e0003 	cmpeq	lr, #3
    b474:	e2833001 	add	r3, r3, #1
    b478:	e5c4e004 	strb	lr, [r4, #4]
    b47c:	e5845008 	str	r5, [r4, #8]
    b480:	e584300c 	str	r3, [r4, #12]
    b484:	1affffca 	bne	b3b4 <CMachineInfo::CMachineInfo()+0xdc>
    b488:	e3530001 	cmp	r3, #1
    b48c:	13a03002 	movne	r3, #2
    b490:	03a03001 	moveq	r3, #1
    b494:	e5c43004 	strb	r3, [r4, #4]
    b498:	eaffffc5 	b	b3b4 <CMachineInfo::CMachineInfo()+0xdc>
    b49c:	00011334 	.word	0x00011334
    b4a0:	00010002 	.word	0x00010002
    b4a4:	0001081c 	.word	0x0001081c
    b4a8:	00010798 	.word	0x00010798
    b4ac:	0001078c 	.word	0x0001078c

0000b4b0 <CMachineInfo::~CMachineInfo()>:
    b4b0:	e3a0200e 	mov	r2, #14
    b4b4:	e59f3014 	ldr	r3, [pc, #20]	; b4d0 <CMachineInfo::~CMachineInfo()+0x20>
    b4b8:	e5c02004 	strb	r2, [r0, #4]
    b4bc:	e5932000 	ldr	r2, [r3]
    b4c0:	e1500002 	cmp	r0, r2
    b4c4:	03a02000 	moveq	r2, #0
    b4c8:	05832000 	streq	r2, [r3]
    b4cc:	e12fff1e 	bx	lr
    b4d0:	00011334 	.word	0x00011334

0000b4d4 <CMachineInfo::GetMachineModel() const>:
    b4d4:	e5d00004 	ldrb	r0, [r0, #4]
    b4d8:	e12fff1e 	bx	lr

0000b4dc <CMachineInfo::GetMachineName() const>:
    b4dc:	e5d02004 	ldrb	r2, [r0, #4]
    b4e0:	e59f3008 	ldr	r3, [pc, #8]	; b4f0 <CMachineInfo::GetMachineName() const+0x14>
    b4e4:	e0833102 	add	r3, r3, r2, lsl #2
    b4e8:	e59301a0 	ldr	r0, [r3, #416]	; 0x1a0
    b4ec:	e12fff1e 	bx	lr
    b4f0:	0001078c 	.word	0x0001078c

0000b4f4 <CMachineInfo::GetModelMajor() const>:
    b4f4:	e5900008 	ldr	r0, [r0, #8]
    b4f8:	e12fff1e 	bx	lr

0000b4fc <CMachineInfo::GetModelRevision() const>:
    b4fc:	e590000c 	ldr	r0, [r0, #12]
    b500:	e12fff1e 	bx	lr

0000b504 <CMachineInfo::GetSoCType() const>:
    b504:	e5d00010 	ldrb	r0, [r0, #16]
    b508:	e12fff1e 	bx	lr

0000b50c <CMachineInfo::GetRAMSize() const>:
    b50c:	e5900014 	ldr	r0, [r0, #20]
    b510:	e12fff1e 	bx	lr

0000b514 <CMachineInfo::GetSoCName() const>:
    b514:	e5d02010 	ldrb	r2, [r0, #16]
    b518:	e59f3008 	ldr	r3, [pc, #8]	; b528 <CMachineInfo::GetSoCName() const+0x14>
    b51c:	e0833102 	add	r3, r3, r2, lsl #2
    b520:	e59301dc 	ldr	r0, [r3, #476]	; 0x1dc
    b524:	e12fff1e 	bx	lr
    b528:	0001078c 	.word	0x0001078c

0000b52c <CMachineInfo::GetRevisionRaw() const>:
    b52c:	e5900000 	ldr	r0, [r0]
    b530:	e12fff1e 	bx	lr

0000b534 <CMachineInfo::GetClockRate(unsigned int) const>:
    b534:	e92d4070 	push	{r4, r5, r6, lr}
    b538:	e24dd020 	sub	sp, sp, #32
    b53c:	e1a06000 	mov	r6, r0
    b540:	e28d0008 	add	r0, sp, #8
    b544:	e1a05001 	mov	r5, r1
    b548:	ebfff9f9 	bl	9d34 <CBcmPropertyTags::CBcmPropertyTags()>
    b54c:	e3a03004 	mov	r3, #4
    b550:	e28d0008 	add	r0, sp, #8
    b554:	e58d3000 	str	r3, [sp]
    b558:	e28d200c 	add	r2, sp, #12
    b55c:	e3a03014 	mov	r3, #20
    b560:	e59f1078 	ldr	r1, [pc, #120]	; b5e0 <CMachineInfo::GetClockRate(unsigned int) const+0xac>
    b564:	e58d5018 	str	r5, [sp, #24]
    b568:	ebfffa48 	bl	9e90 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    b56c:	e2504000 	subs	r4, r0, #0
    b570:	1a00000e 	bne	b5b0 <CMachineInfo::GetClockRate(unsigned int) const+0x7c>
    b574:	e3550002 	cmp	r5, #2
    b578:	0a00000e 	beq	b5b8 <CMachineInfo::GetClockRate(unsigned int) const+0x84>
    b57c:	e3550004 	cmp	r5, #4
    b580:	0a000010 	beq	b5c8 <CMachineInfo::GetClockRate(unsigned int) const+0x94>
    b584:	e3550001 	cmp	r5, #1
    b588:	0a00000c 	beq	b5c0 <CMachineInfo::GetClockRate(unsigned int) const+0x8c>
    b58c:	e59f2050 	ldr	r2, [pc, #80]	; b5e4 <CMachineInfo::GetClockRate(unsigned int) const+0xb0>
    b590:	e59f1050 	ldr	r1, [pc, #80]	; b5e8 <CMachineInfo::GetClockRate(unsigned int) const+0xb4>
    b594:	e59f0050 	ldr	r0, [pc, #80]	; b5ec <CMachineInfo::GetClockRate(unsigned int) const+0xb8>
    b598:	eb0007d9 	bl	d504 <assertion_failed>
    b59c:	e28d0008 	add	r0, sp, #8
    b5a0:	ebfff9e9 	bl	9d4c <CBcmPropertyTags::~CBcmPropertyTags()>
    b5a4:	e1a00004 	mov	r0, r4
    b5a8:	e28dd020 	add	sp, sp, #32
    b5ac:	e8bd8070 	pop	{r4, r5, r6, pc}
    b5b0:	e59d401c 	ldr	r4, [sp, #28]
    b5b4:	eafffff8 	b	b59c <CMachineInfo::GetClockRate(unsigned int) const+0x68>
    b5b8:	e59f4030 	ldr	r4, [pc, #48]	; b5f0 <CMachineInfo::GetClockRate(unsigned int) const+0xbc>
    b5bc:	eafffff6 	b	b59c <CMachineInfo::GetClockRate(unsigned int) const+0x68>
    b5c0:	e59f402c 	ldr	r4, [pc, #44]	; b5f4 <CMachineInfo::GetClockRate(unsigned int) const+0xc0>
    b5c4:	eafffff4 	b	b59c <CMachineInfo::GetClockRate(unsigned int) const+0x68>
    b5c8:	e5962008 	ldr	r2, [r6, #8]
    b5cc:	e59f3024 	ldr	r3, [pc, #36]	; b5f8 <CMachineInfo::GetClockRate(unsigned int) const+0xc4>
    b5d0:	e3520002 	cmp	r2, #2
    b5d4:	e59f4020 	ldr	r4, [pc, #32]	; b5fc <CMachineInfo::GetClockRate(unsigned int) const+0xc8>
    b5d8:	81a04003 	movhi	r4, r3
    b5dc:	eaffffee 	b	b59c <CMachineInfo::GetClockRate(unsigned int) const+0x68>
    b5e0:	00030002 	.word	0x00030002
    b5e4:	00000115 	.word	0x00000115
    b5e8:	00010978 	.word	0x00010978
    b5ec:	0001074c 	.word	0x0001074c
    b5f0:	02dc6c00 	.word	0x02dc6c00
    b5f4:	05f5e100 	.word	0x05f5e100
    b5f8:	11e1a300 	.word	0x11e1a300
    b5fc:	0ee6b280 	.word	0x0ee6b280

0000b600 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>:
    b600:	e3510036 	cmp	r1, #54	; 0x36
    b604:	0a00000d 	beq	b640 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x40>
    b608:	e3510037 	cmp	r1, #55	; 0x37
    b60c:	1a000004 	bne	b624 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x24>
    b610:	e5d00004 	ldrb	r0, [r0, #4]
    b614:	e3500003 	cmp	r0, #3
    b618:	c3a00028 	movgt	r0, #40	; 0x28
    b61c:	d3a0002d 	movle	r0, #45	; 0x2d
    b620:	e12fff1e 	bx	lr
    b624:	e92d4010 	push	{r4, lr}
    b628:	e59f2038 	ldr	r2, [pc, #56]	; b668 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x68>
    b62c:	e59f1038 	ldr	r1, [pc, #56]	; b66c <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x6c>
    b630:	e59f0038 	ldr	r0, [pc, #56]	; b670 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x70>
    b634:	eb0007b2 	bl	d504 <assertion_failed>
    b638:	e3a00000 	mov	r0, #0
    b63c:	e8bd8010 	pop	{r4, pc}
    b640:	e5d03004 	ldrb	r3, [r0, #4]
    b644:	e3530003 	cmp	r3, #3
    b648:	ca000001 	bgt	b654 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x54>
    b64c:	e3a00028 	mov	r0, #40	; 0x28
    b650:	e12fff1e 	bx	lr
    b654:	e5900008 	ldr	r0, [r0, #8]
    b658:	e3500002 	cmp	r0, #2
    b65c:	93a0002d 	movls	r0, #45	; 0x2d
    b660:	83a00029 	movhi	r0, #41	; 0x29
    b664:	e12fff1e 	bx	lr
    b668:	0000014e 	.word	0x0000014e
    b66c:	00010978 	.word	0x00010978
    b670:	0001074c 	.word	0x0001074c

0000b674 <CMachineInfo::GetDevice(TDeviceId) const>:
    b674:	e3510000 	cmp	r1, #0
    b678:	1a000003 	bne	b68c <CMachineInfo::GetDevice(TDeviceId) const+0x18>
    b67c:	e5d00004 	ldrb	r0, [r0, #4]
    b680:	e2500001 	subs	r0, r0, #1
    b684:	13a00001 	movne	r0, #1
    b688:	e12fff1e 	bx	lr
    b68c:	e92d4010 	push	{r4, lr}
    b690:	e59f2010 	ldr	r2, [pc, #16]	; b6a8 <CMachineInfo::GetDevice(TDeviceId) const+0x34>
    b694:	e59f1010 	ldr	r1, [pc, #16]	; b6ac <CMachineInfo::GetDevice(TDeviceId) const+0x38>
    b698:	e59f0010 	ldr	r0, [pc, #16]	; b6b0 <CMachineInfo::GetDevice(TDeviceId) const+0x3c>
    b69c:	eb000798 	bl	d504 <assertion_failed>
    b6a0:	e3a00000 	mov	r0, #0
    b6a4:	e8bd8010 	pop	{r4, pc}
    b6a8:	00000167 	.word	0x00000167
    b6ac:	00010978 	.word	0x00010978
    b6b0:	0001074c 	.word	0x0001074c

0000b6b4 <CMachineInfo::Get()>:
    b6b4:	e92d4010 	push	{r4, lr}
    b6b8:	e59f4020 	ldr	r4, [pc, #32]	; b6e0 <CMachineInfo::Get()+0x2c>
    b6bc:	e5940000 	ldr	r0, [r4]
    b6c0:	e3500000 	cmp	r0, #0
    b6c4:	18bd8010 	popne	{r4, pc}
    b6c8:	e3a02e17 	mov	r2, #368	; 0x170
    b6cc:	e59f1010 	ldr	r1, [pc, #16]	; b6e4 <CMachineInfo::Get()+0x30>
    b6d0:	e59f0010 	ldr	r0, [pc, #16]	; b6e8 <CMachineInfo::Get()+0x34>
    b6d4:	eb00078a 	bl	d504 <assertion_failed>
    b6d8:	e5940000 	ldr	r0, [r4]
    b6dc:	e8bd8010 	pop	{r4, pc}
    b6e0:	00011334 	.word	0x00011334
    b6e4:	00010978 	.word	0x00010978
    b6e8:	0001077c 	.word	0x0001077c

0000b6ec <__aeabi_atexit>:
    b6ec:	e12fff1e 	bx	lr

0000b6f0 <halt>:
    b6f0:	f10c0080 	cpsid	i
    b6f4:	f10c0040 	cpsid	f
    b6f8:	eafffffe 	b	b6f8 <halt+0x8>

0000b6fc <reboot>:
    b6fc:	e3a03000 	mov	r3, #0
    b700:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    b704:	e59f3010 	ldr	r3, [pc, #16]	; b71c <reboot+0x20>
    b708:	e59f1010 	ldr	r1, [pc, #16]	; b720 <reboot+0x24>
    b70c:	e59f2010 	ldr	r2, [pc, #16]	; b724 <reboot+0x28>
    b710:	e5831024 	str	r1, [r3, #36]	; 0x24
    b714:	e583201c 	str	r2, [r3, #28]
    b718:	eafffffe 	b	b718 <reboot+0x1c>
    b71c:	20100000 	.word	0x20100000
    b720:	5a000001 	.word	0x5a000001
    b724:	5a000020 	.word	0x5a000020

0000b728 <sysinit>:
    b728:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    b72c:	e24dd01c 	sub	sp, sp, #28
    b730:	f1080040 	cpsie	f
    b734:	ee113f50 	mrc	15, 0, r3, cr1, cr0, {2}
    b738:	e383360f 	orr	r3, r3, #15728640	; 0xf00000
    b73c:	ee013f50 	mcr	15, 0, r3, cr1, cr0, {2}
    b740:	e3a02000 	mov	r2, #0
    b744:	ee072f95 	mcr	15, 0, r2, cr7, cr5, {4}
    b748:	e3a03101 	mov	r3, #1073741824	; 0x40000000
    b74c:	eee83a10 	vmsr	fpexc, r3
    b750:	e3a03402 	mov	r3, #33554432	; 0x2000000
    b754:	eee13a10 	vmsr	fpscr, r3
    b758:	e59f3068 	ldr	r3, [pc, #104]	; b7c8 <sysinit+0xa0>
    b75c:	e59f1068 	ldr	r1, [pc, #104]	; b7cc <sysinit+0xa4>
    b760:	e1530001 	cmp	r3, r1
    b764:	2a000002 	bcs	b774 <sysinit+0x4c>
    b768:	e4c32001 	strb	r2, [r3], #1
    b76c:	e1530001 	cmp	r3, r1
    b770:	1afffffc 	bne	b768 <sysinit+0x40>
    b774:	e1a0000d 	mov	r0, sp
    b778:	ebfffed6 	bl	b2d8 <CMachineInfo::CMachineInfo()>
    b77c:	e59f504c 	ldr	r5, [pc, #76]	; b7d0 <sysinit+0xa8>
    b780:	e59f304c 	ldr	r3, [pc, #76]	; b7d4 <sysinit+0xac>
    b784:	e1550003 	cmp	r5, r3
    b788:	2a000009 	bcs	b7b4 <sysinit+0x8c>
    b78c:	e1e06005 	mvn	r6, r5
    b790:	e3a04000 	mov	r4, #0
    b794:	e0866003 	add	r6, r6, r3
    b798:	e1a06126 	lsr	r6, r6, #2
    b79c:	e2866001 	add	r6, r6, #1
    b7a0:	e2844001 	add	r4, r4, #1
    b7a4:	e4953004 	ldr	r3, [r5], #4
    b7a8:	e12fff33 	blx	r3
    b7ac:	e1540006 	cmp	r4, r6
    b7b0:	1afffffa 	bne	b7a0 <sysinit+0x78>
    b7b4:	ebfff22b 	bl	8068 <main>
    b7b8:	e3500001 	cmp	r0, #1
    b7bc:	0a000000 	beq	b7c4 <sysinit+0x9c>
    b7c0:	ebffffca 	bl	b6f0 <halt>
    b7c4:	ebffffcc 	bl	b6fc <reboot>
    b7c8:	00011324 	.word	0x00011324
    b7cc:	000113c8 	.word	0x000113c8
    b7d0:	00011284 	.word	0x00011284
    b7d4:	00011294 	.word	0x00011294

0000b7d8 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]>:
    b7d8:	e2800001 	add	r0, r0, #1
    b7dc:	e3a03000 	mov	r3, #0
    b7e0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    b7e4:	e59f3020 	ldr	r3, [pc, #32]	; b80c <CTimer::SimpleusDelay(unsigned int) [clone .part.0]+0x34>
    b7e8:	e1a01003 	mov	r1, r3
    b7ec:	e5932004 	ldr	r2, [r3, #4]
    b7f0:	e5913004 	ldr	r3, [r1, #4]
    b7f4:	e0433002 	sub	r3, r3, r2
    b7f8:	e1500003 	cmp	r0, r3
    b7fc:	8afffffb 	bhi	b7f0 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]+0x18>
    b800:	e3a03000 	mov	r3, #0
    b804:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    b808:	e12fff1e 	bx	lr
    b80c:	20003000 	.word	0x20003000

0000b810 <CTimer::CTimer(CInterruptSystem*)>:
    b810:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b814:	e3a05000 	mov	r5, #0
    b818:	e3a07001 	mov	r7, #1
    b81c:	e1a04000 	mov	r4, r0
    b820:	e59f605c 	ldr	r6, [pc, #92]	; b884 <CTimer::CTimer(CInterruptSystem*)+0x74>
    b824:	e5805004 	str	r5, [r0, #4]
    b828:	e5801000 	str	r1, [r0]
    b82c:	e5805008 	str	r5, [r0, #8]
    b830:	e5805014 	str	r5, [r0, #20]
    b834:	e5807010 	str	r7, [r0, #16]
    b838:	e580500c 	str	r5, [r0, #12]
    b83c:	e2800018 	add	r0, r0, #24
    b840:	eb000b03 	bl	e454 <CPtrList::CPtrList()>
    b844:	e5961000 	ldr	r1, [r6]
    b848:	e59f2038 	ldr	r2, [pc, #56]	; b888 <CTimer::CTimer(CInterruptSystem*)+0x78>
    b84c:	e59f3038 	ldr	r3, [pc, #56]	; b88c <CTimer::CTimer(CInterruptSystem*)+0x7c>
    b850:	e1510005 	cmp	r1, r5
    b854:	e584701c 	str	r7, [r4, #28]
    b858:	e5845028 	str	r5, [r4, #40]	; 0x28
    b85c:	e5842020 	str	r2, [r4, #32]
    b860:	e5843024 	str	r3, [r4, #36]	; 0x24
    b864:	0a000003 	beq	b878 <CTimer::CTimer(CInterruptSystem*)+0x68>
    b868:	e3a0203d 	mov	r2, #61	; 0x3d
    b86c:	e59f101c 	ldr	r1, [pc, #28]	; b890 <CTimer::CTimer(CInterruptSystem*)+0x80>
    b870:	e59f001c 	ldr	r0, [pc, #28]	; b894 <CTimer::CTimer(CInterruptSystem*)+0x84>
    b874:	eb000722 	bl	d504 <assertion_failed>
    b878:	e5864000 	str	r4, [r6]
    b87c:	e1a00004 	mov	r0, r4
    b880:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    b884:	0001133c 	.word	0x0001133c
    b888:	00055730 	.word	0x00055730
    b88c:	0000015e 	.word	0x0000015e
    b890:	00010afc 	.word	0x00010afc
    b894:	00010b08 	.word	0x00010b08

0000b898 <CTimer::~CTimer()>:
    b898:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b89c:	e1a0a000 	mov	sl, r0
    b8a0:	e5900000 	ldr	r0, [r0]
    b8a4:	e3500000 	cmp	r0, #0
    b8a8:	0a000028 	beq	b950 <CTimer::~CTimer()+0xb8>
    b8ac:	e3a01003 	mov	r1, #3
    b8b0:	ebfffdba 	bl	afa0 <CInterruptSystem::DisconnectIRQ(unsigned int)>
    b8b4:	e3a0904b 	mov	r9, #75	; 0x4b
    b8b8:	e59f70a8 	ldr	r7, [pc, #168]	; b968 <CTimer::~CTimer()+0xd0>
    b8bc:	e59f60a8 	ldr	r6, [pc, #168]	; b96c <CTimer::~CTimer()+0xd4>
    b8c0:	e59f80a8 	ldr	r8, [pc, #168]	; b970 <CTimer::~CTimer()+0xd8>
    b8c4:	e28a4018 	add	r4, sl, #24
    b8c8:	ea000011 	b	b914 <CTimer::~CTimer()+0x7c>
    b8cc:	e1a01005 	mov	r1, r5
    b8d0:	e1a00004 	mov	r0, r4
    b8d4:	eb000b06 	bl	e4f4 <CPtrList::GetPtr(TPtrListElement*)>
    b8d8:	e250b000 	subs	fp, r0, #0
    b8dc:	0a000016 	beq	b93c <CTimer::~CTimer()+0xa4>
    b8e0:	e59b3000 	ldr	r3, [fp]
    b8e4:	e1530006 	cmp	r3, r6
    b8e8:	0a000003 	beq	b8fc <CTimer::~CTimer()+0x64>
    b8ec:	e1a02009 	mov	r2, r9
    b8f0:	e1a01007 	mov	r1, r7
    b8f4:	e1a00008 	mov	r0, r8
    b8f8:	eb000701 	bl	d504 <assertion_failed>
    b8fc:	e1a01005 	mov	r1, r5
    b900:	e1a00004 	mov	r0, r4
    b904:	eb000b8f 	bl	e748 <CPtrList::Remove(TPtrListElement*)>
    b908:	e1a0000b 	mov	r0, fp
    b90c:	e3a01014 	mov	r1, #20
    b910:	eb000571 	bl	cedc <operator delete(void*, unsigned int)>
    b914:	e1a00004 	mov	r0, r4
    b918:	eb000add 	bl	e494 <CPtrList::GetFirst()>
    b91c:	e2505000 	subs	r5, r0, #0
    b920:	1affffe9 	bne	b8cc <CTimer::~CTimer()+0x34>
    b924:	e59f3048 	ldr	r3, [pc, #72]	; b974 <CTimer::~CTimer()+0xdc>
    b928:	e1a00004 	mov	r0, r4
    b92c:	e5835000 	str	r5, [r3]
    b930:	eb000aca 	bl	e460 <CPtrList::~CPtrList()>
    b934:	e1a0000a 	mov	r0, sl
    b938:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b93c:	e3a0204a 	mov	r2, #74	; 0x4a
    b940:	e1a01007 	mov	r1, r7
    b944:	e59f002c 	ldr	r0, [pc, #44]	; b978 <CTimer::~CTimer()+0xe0>
    b948:	eb0006ed 	bl	d504 <assertion_failed>
    b94c:	eaffffe3 	b	b8e0 <CTimer::~CTimer()+0x48>
    b950:	e59f0024 	ldr	r0, [pc, #36]	; b97c <CTimer::~CTimer()+0xe4>
    b954:	e3a02043 	mov	r2, #67	; 0x43
    b958:	e59f1008 	ldr	r1, [pc, #8]	; b968 <CTimer::~CTimer()+0xd0>
    b95c:	eb0006e8 	bl	d504 <assertion_failed>
    b960:	e59a0000 	ldr	r0, [sl]
    b964:	eaffffd0 	b	b8ac <CTimer::~CTimer()+0x14>
    b968:	00010afc 	.word	0x00010afc
    b96c:	4b544d43 	.word	0x4b544d43
    b970:	00010b3c 	.word	0x00010b3c
    b974:	0001133c 	.word	0x0001133c
    b978:	00010b30 	.word	0x00010b30
    b97c:	00010b18 	.word	0x00010b18

0000b980 <CTimer::SetTimeZone(int)>:
    b980:	e59f2018 	ldr	r2, [pc, #24]	; b9a0 <CTimer::SetTimeZone(int)+0x20>
    b984:	e2813e59 	add	r3, r1, #1424	; 0x590
    b988:	e283300f 	add	r3, r3, #15
    b98c:	e1530002 	cmp	r3, r2
    b990:	95801014 	strls	r1, [r0, #20]
    b994:	93a00001 	movls	r0, #1
    b998:	83a00000 	movhi	r0, #0
    b99c:	e12fff1e 	bx	lr
    b9a0:	00000b3e 	.word	0x00000b3e

0000b9a4 <CTimer::GetTimeZone() const>:
    b9a4:	e5900014 	ldr	r0, [r0, #20]
    b9a8:	e12fff1e 	bx	lr

0000b9ac <CTimer::SetTime(unsigned int, bool)>:
    b9ac:	e3520000 	cmp	r2, #0
    b9b0:	e92d4070 	push	{r4, r5, r6, lr}
    b9b4:	e1a04000 	mov	r4, r0
    b9b8:	e1a05001 	mov	r5, r1
    b9bc:	1a000004 	bne	b9d4 <CTimer::SetTime(unsigned int, bool)+0x28>
    b9c0:	e5903014 	ldr	r3, [r0, #20]
    b9c4:	e0633203 	rsb	r3, r3, r3, lsl #4
    b9c8:	e1b03103 	lsls	r3, r3, #2
    b9cc:	4a00000e 	bmi	ba0c <CTimer::SetTime(unsigned int, bool)+0x60>
    b9d0:	e0855003 	add	r5, r5, r3
    b9d4:	e5940010 	ldr	r0, [r4, #16]
    b9d8:	e3500000 	cmp	r0, #0
    b9dc:	1a000002 	bne	b9ec <CTimer::SetTime(unsigned int, bool)+0x40>
    b9e0:	e3a00001 	mov	r0, #1
    b9e4:	e584500c 	str	r5, [r4, #12]
    b9e8:	e8bd8070 	pop	{r4, r5, r6, pc}
    b9ec:	eb0004dc 	bl	cd64 <EnterCritical>
    b9f0:	e5943010 	ldr	r3, [r4, #16]
    b9f4:	e584500c 	str	r5, [r4, #12]
    b9f8:	e3530000 	cmp	r3, #0
    b9fc:	0a000007 	beq	ba20 <CTimer::SetTime(unsigned int, bool)+0x74>
    ba00:	eb000504 	bl	ce18 <LeaveCritical>
    ba04:	e3a00001 	mov	r0, #1
    ba08:	e8bd8070 	pop	{r4, r5, r6, pc}
    ba0c:	e2631000 	rsb	r1, r3, #0
    ba10:	e1510005 	cmp	r1, r5
    ba14:	daffffed 	ble	b9d0 <CTimer::SetTime(unsigned int, bool)+0x24>
    ba18:	e1a00002 	mov	r0, r2
    ba1c:	e8bd8070 	pop	{r4, r5, r6, pc}
    ba20:	e3a00001 	mov	r0, #1
    ba24:	e8bd8070 	pop	{r4, r5, r6, pc}

0000ba28 <CTimer::GetClockTicks()>:
    ba28:	e3a03000 	mov	r3, #0
    ba2c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    ba30:	e59f2008 	ldr	r2, [pc, #8]	; ba40 <CTimer::GetClockTicks()+0x18>
    ba34:	e5920004 	ldr	r0, [r2, #4]
    ba38:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    ba3c:	e12fff1e 	bx	lr
    ba40:	20003000 	.word	0x20003000

0000ba44 <CTimer::GetTicks() const>:
    ba44:	e5900004 	ldr	r0, [r0, #4]
    ba48:	e12fff1e 	bx	lr

0000ba4c <CTimer::GetUptime() const>:
    ba4c:	e5900008 	ldr	r0, [r0, #8]
    ba50:	e12fff1e 	bx	lr

0000ba54 <CTimer::GetTime() const>:
    ba54:	e590000c 	ldr	r0, [r0, #12]
    ba58:	e12fff1e 	bx	lr

0000ba5c <CTimer::GetLocalTime(unsigned int*, unsigned int*)>:
    ba5c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    ba60:	e1a04000 	mov	r4, r0
    ba64:	e5900010 	ldr	r0, [r0, #16]
    ba68:	e1a06001 	mov	r6, r1
    ba6c:	e3500000 	cmp	r0, #0
    ba70:	e1a05002 	mov	r5, r2
    ba74:	1a000011 	bne	bac0 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x64>
    ba78:	e594700c 	ldr	r7, [r4, #12]
    ba7c:	e5944004 	ldr	r4, [r4, #4]
    ba80:	e3560000 	cmp	r6, #0
    ba84:	0a00001a 	beq	baf4 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x98>
    ba88:	e3550000 	cmp	r5, #0
    ba8c:	e5867000 	str	r7, [r6]
    ba90:	0a000012 	beq	bae0 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x84>
    ba94:	e3a03064 	mov	r3, #100	; 0x64
    ba98:	e59f2068 	ldr	r2, [pc, #104]	; bb08 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xac>
    ba9c:	e59f1068 	ldr	r1, [pc, #104]	; bb0c <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb0>
    baa0:	e0820492 	umull	r0, r2, r2, r4
    baa4:	e1a022a2 	lsr	r2, r2, #5
    baa8:	e0030293 	mul	r3, r3, r2
    baac:	e0443003 	sub	r3, r4, r3
    bab0:	e0030391 	mul	r3, r1, r3
    bab4:	e3a00001 	mov	r0, #1
    bab8:	e5853000 	str	r3, [r5]
    babc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    bac0:	eb0004a7 	bl	cd64 <EnterCritical>
    bac4:	e5943010 	ldr	r3, [r4, #16]
    bac8:	e594700c 	ldr	r7, [r4, #12]
    bacc:	e3530000 	cmp	r3, #0
    bad0:	e5944004 	ldr	r4, [r4, #4]
    bad4:	0affffe9 	beq	ba80 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x24>
    bad8:	eb0004ce 	bl	ce18 <LeaveCritical>
    badc:	eaffffe7 	b	ba80 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x24>
    bae0:	e3a020dd 	mov	r2, #221	; 0xdd
    bae4:	e59f1024 	ldr	r1, [pc, #36]	; bb10 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb4>
    bae8:	e59f0024 	ldr	r0, [pc, #36]	; bb14 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb8>
    baec:	eb000684 	bl	d504 <assertion_failed>
    baf0:	eaffffe7 	b	ba94 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x38>
    baf4:	e3a020da 	mov	r2, #218	; 0xda
    baf8:	e59f1010 	ldr	r1, [pc, #16]	; bb10 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb4>
    bafc:	e59f0014 	ldr	r0, [pc, #20]	; bb18 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xbc>
    bb00:	eb00067f 	bl	d504 <assertion_failed>
    bb04:	eaffffdf 	b	ba88 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x2c>
    bb08:	51eb851f 	.word	0x51eb851f
    bb0c:	00002710 	.word	0x00002710
    bb10:	00010afc 	.word	0x00010afc
    bb14:	00010b74 	.word	0x00010b74
    bb18:	00010b64 	.word	0x00010b64

0000bb1c <CTimer::GetUniversalTime() const>:
    bb1c:	e5903014 	ldr	r3, [r0, #20]
    bb20:	e590000c 	ldr	r0, [r0, #12]
    bb24:	e0633203 	rsb	r3, r3, r3, lsl #4
    bb28:	e1a03103 	lsl	r3, r3, #2
    bb2c:	e1530000 	cmp	r3, r0
    bb30:	d0400003 	suble	r0, r0, r3
    bb34:	c3a00000 	movgt	r0, #0
    bb38:	e12fff1e 	bx	lr

0000bb3c <CTimer::GetUniversalTime(unsigned int*, unsigned int*)>:
    bb3c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    bb40:	e1a05000 	mov	r5, r0
    bb44:	e5900010 	ldr	r0, [r0, #16]
    bb48:	e1a09001 	mov	r9, r1
    bb4c:	e3500000 	cmp	r0, #0
    bb50:	e1a07002 	mov	r7, r2
    bb54:	1a000019 	bne	bbc0 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x84>
    bb58:	e595600c 	ldr	r6, [r5, #12]
    bb5c:	e5958004 	ldr	r8, [r5, #4]
    bb60:	e5953014 	ldr	r3, [r5, #20]
    bb64:	e0633203 	rsb	r3, r3, r3, lsl #4
    bb68:	e1a04103 	lsl	r4, r3, #2
    bb6c:	e1540006 	cmp	r4, r6
    bb70:	ca000010 	bgt	bbb8 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x7c>
    bb74:	e3590000 	cmp	r9, #0
    bb78:	0a00001d 	beq	bbf4 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xb8>
    bb7c:	e0464004 	sub	r4, r6, r4
    bb80:	e3570000 	cmp	r7, #0
    bb84:	e5894000 	str	r4, [r9]
    bb88:	0a000014 	beq	bbe0 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xa4>
    bb8c:	e3a03064 	mov	r3, #100	; 0x64
    bb90:	e59f2070 	ldr	r2, [pc, #112]	; bc08 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xcc>
    bb94:	e59f1070 	ldr	r1, [pc, #112]	; bc0c <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd0>
    bb98:	e0820892 	umull	r0, r2, r2, r8
    bb9c:	e1a022a2 	lsr	r2, r2, #5
    bba0:	e0030293 	mul	r3, r3, r2
    bba4:	e0483003 	sub	r3, r8, r3
    bba8:	e0030391 	mul	r3, r1, r3
    bbac:	e3a00001 	mov	r0, #1
    bbb0:	e5873000 	str	r3, [r7]
    bbb4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    bbb8:	e3a00000 	mov	r0, #0
    bbbc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    bbc0:	eb000467 	bl	cd64 <EnterCritical>
    bbc4:	e5953010 	ldr	r3, [r5, #16]
    bbc8:	e595600c 	ldr	r6, [r5, #12]
    bbcc:	e3530000 	cmp	r3, #0
    bbd0:	e5958004 	ldr	r8, [r5, #4]
    bbd4:	0affffe1 	beq	bb60 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x24>
    bbd8:	eb00048e 	bl	ce18 <LeaveCritical>
    bbdc:	eaffffdf 	b	bb60 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x24>
    bbe0:	e59f2028 	ldr	r2, [pc, #40]	; bc10 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd4>
    bbe4:	e59f1028 	ldr	r1, [pc, #40]	; bc14 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd8>
    bbe8:	e59f0028 	ldr	r0, [pc, #40]	; bc18 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xdc>
    bbec:	eb000644 	bl	d504 <assertion_failed>
    bbf0:	eaffffe5 	b	bb8c <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x50>
    bbf4:	e3a020ff 	mov	r2, #255	; 0xff
    bbf8:	e59f1014 	ldr	r1, [pc, #20]	; bc14 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd8>
    bbfc:	e59f0018 	ldr	r0, [pc, #24]	; bc1c <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xe0>
    bc00:	eb00063f 	bl	d504 <assertion_failed>
    bc04:	eaffffdc 	b	bb7c <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x40>
    bc08:	51eb851f 	.word	0x51eb851f
    bc0c:	00002710 	.word	0x00002710
    bc10:	00000102 	.word	0x00000102
    bc14:	00010afc 	.word	0x00010afc
    bc18:	00010b74 	.word	0x00010b74
    bc1c:	00010b64 	.word	0x00010b64

0000bc20 <CTimer::GetTimeString()>:
    bc20:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bc24:	e1a05000 	mov	r5, r0
    bc28:	e5900010 	ldr	r0, [r0, #16]
    bc2c:	e24dd014 	sub	sp, sp, #20
    bc30:	e3500000 	cmp	r0, #0
    bc34:	1a000065 	bne	bdd0 <CTimer::GetTimeString()+0x1b0>
    bc38:	e595400c 	ldr	r4, [r5, #12]
    bc3c:	e5959004 	ldr	r9, [r5, #4]
    bc40:	e1940009 	orrs	r0, r4, r9
    bc44:	0a00003e 	beq	bd44 <CTimer::GetTimeString()+0x124>
    bc48:	e59f61a0 	ldr	r6, [pc, #416]	; bdf0 <CTimer::GetTimeString()+0x1d0>
    bc4c:	e59f81a0 	ldr	r8, [pc, #416]	; bdf4 <CTimer::GetTimeString()+0x1d4>
    bc50:	e0873496 	umull	r3, r7, r6, r4
    bc54:	e1a072a7 	lsr	r7, r7, #5
    bc58:	e0863796 	umull	r3, r6, r6, r7
    bc5c:	e59f3194 	ldr	r3, [pc, #404]	; bdf8 <CTimer::GetTimeString()+0x1d8>
    bc60:	e0882498 	umull	r2, r8, r8, r4
    bc64:	e0832493 	umull	r2, r3, r3, r4
    bc68:	e1a062a6 	lsr	r6, r6, #5
    bc6c:	e0666206 	rsb	r6, r6, r6, lsl #4
    bc70:	e0672207 	rsb	r2, r7, r7, lsl #4
    bc74:	e0476106 	sub	r6, r7, r6, lsl #2
    bc78:	e3a0a064 	mov	sl, #100	; 0x64
    bc7c:	e0447102 	sub	r7, r4, r2, lsl #2
    bc80:	e3a0be19 	mov	fp, #400	; 0x190
    bc84:	e59f5170 	ldr	r5, [pc, #368]	; bdfc <CTimer::GetTimeString()+0x1dc>
    bc88:	e59fe170 	ldr	lr, [pc, #368]	; be00 <CTimer::GetTimeString()+0x1e0>
    bc8c:	e59fc170 	ldr	ip, [pc, #368]	; be04 <CTimer::GetTimeString()+0x1e4>
    bc90:	e59f0170 	ldr	r0, [pc, #368]	; be08 <CTimer::GetTimeString()+0x1e8>
    bc94:	e1a085a8 	lsr	r8, r8, #11
    bc98:	e1a04823 	lsr	r4, r3, #16
    bc9c:	ea00000a 	b	bccc <CTimer::GetTimeString()+0xac>
    bca0:	e001019b 	mul	r1, fp, r1
    bca4:	e0451001 	sub	r1, r5, r1
    bca8:	e16f1f11 	clz	r1, r1
    bcac:	e1a012a1 	lsr	r1, r1, #5
    bcb0:	e3510000 	cmp	r1, #0
    bcb4:	01a0300c 	moveq	r3, ip
    bcb8:	11a03000 	movne	r3, r0
    bcbc:	e1540003 	cmp	r4, r3
    bcc0:	3a000021 	bcc	bd4c <CTimer::GetTimeString()+0x12c>
    bcc4:	e0444003 	sub	r4, r4, r3
    bcc8:	e2855001 	add	r5, r5, #1
    bccc:	e081359e 	umull	r3, r1, lr, r5
    bcd0:	e1a032a1 	lsr	r3, r1, #5
    bcd4:	e003039a 	mul	r3, sl, r3
    bcd8:	e1550003 	cmp	r5, r3
    bcdc:	e1a013a1 	lsr	r1, r1, #7
    bce0:	0affffee 	beq	bca0 <CTimer::GetTimeString()+0x80>
    bce4:	e3150003 	tst	r5, #3
    bce8:	03a01001 	moveq	r1, #1
    bcec:	13a01000 	movne	r1, #0
    bcf0:	eaffffee 	b	bcb0 <CTimer::GetTimeString()+0x90>
    bcf4:	e3a03064 	mov	r3, #100	; 0x64
    bcf8:	e59fb100 	ldr	fp, [pc, #256]	; be00 <CTimer::GetTimeString()+0x1e0>
    bcfc:	e3a00010 	mov	r0, #16
    bd00:	e08b299b 	umull	r2, fp, fp, r9
    bd04:	e1a0b2ab 	lsr	fp, fp, #5
    bd08:	e00b0b93 	mul	fp, r3, fp
    bd0c:	eb00046e 	bl	cecc <operator new(unsigned int)>
    bd10:	e049b00b 	sub	fp, r9, fp
    bd14:	e1a09000 	mov	r9, r0
    bd18:	eb000b2f 	bl	e9dc <CString::CString()>
    bd1c:	e59f30e8 	ldr	r3, [pc, #232]	; be0c <CTimer::GetTimeString()+0x1ec>
    bd20:	e1550003 	cmp	r5, r3
    bd24:	8a000018 	bhi	bd8c <CTimer::GetTimeString()+0x16c>
    bd28:	e1a00009 	mov	r0, r9
    bd2c:	e88d0880 	stm	sp, {r7, fp}
    bd30:	e1a03006 	mov	r3, r6
    bd34:	e1a02008 	mov	r2, r8
    bd38:	e59f10d0 	ldr	r1, [pc, #208]	; be10 <CTimer::GetTimeString()+0x1f0>
    bd3c:	eb000f14 	bl	f994 <CString::Format(char const*, ...)>
    bd40:	e1a00009 	mov	r0, r9
    bd44:	e28dd014 	add	sp, sp, #20
    bd48:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bd4c:	e3a0a000 	mov	sl, #0
    bd50:	e3a0001d 	mov	r0, #29
    bd54:	e59f20b8 	ldr	r2, [pc, #184]	; be14 <CTimer::GetTimeString()+0x1f4>
    bd58:	ea000004 	b	bd70 <CTimer::GetTimeString()+0x150>
    bd5c:	e1a03000 	mov	r3, r0
    bd60:	e1540003 	cmp	r4, r3
    bd64:	3affffe2 	bcc	bcf4 <CTimer::GetTimeString()+0xd4>
    bd68:	e0444003 	sub	r4, r4, r3
    bd6c:	e28aa001 	add	sl, sl, #1
    bd70:	e35a0001 	cmp	sl, #1
    bd74:	13a03000 	movne	r3, #0
    bd78:	02013001 	andeq	r3, r1, #1
    bd7c:	e3530000 	cmp	r3, #0
    bd80:	1afffff5 	bne	bd5c <CTimer::GetTimeString()+0x13c>
    bd84:	e792310a 	ldr	r3, [r2, sl, lsl #2]
    bd88:	eafffff4 	b	bd60 <CTimer::GetTimeString()+0x140>
    bd8c:	e59f3084 	ldr	r3, [pc, #132]	; be18 <CTimer::GetTimeString()+0x1f8>
    bd90:	e58db00c 	str	fp, [sp, #12]
    bd94:	e0832893 	umull	r2, r3, r3, r8
    bd98:	e1a03223 	lsr	r3, r3, #4
    bd9c:	e0833083 	add	r3, r3, r3, lsl #1
    bda0:	e59f2074 	ldr	r2, [pc, #116]	; be1c <CTimer::GetTimeString()+0x1fc>
    bda4:	e0488183 	sub	r8, r8, r3, lsl #3
    bda8:	e792210a 	ldr	r2, [r2, sl, lsl #2]
    bdac:	e1a00009 	mov	r0, r9
    bdb0:	e98d00c0 	stmib	sp, {r6, r7}
    bdb4:	e2843001 	add	r3, r4, #1
    bdb8:	e58d8000 	str	r8, [sp]
    bdbc:	e59f105c 	ldr	r1, [pc, #92]	; be20 <CTimer::GetTimeString()+0x200>
    bdc0:	eb000ef3 	bl	f994 <CString::Format(char const*, ...)>
    bdc4:	e1a00009 	mov	r0, r9
    bdc8:	e28dd014 	add	sp, sp, #20
    bdcc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bdd0:	eb0003e3 	bl	cd64 <EnterCritical>
    bdd4:	e5953010 	ldr	r3, [r5, #16]
    bdd8:	e595400c 	ldr	r4, [r5, #12]
    bddc:	e3530000 	cmp	r3, #0
    bde0:	e5959004 	ldr	r9, [r5, #4]
    bde4:	0affff95 	beq	bc40 <CTimer::GetTimeString()+0x20>
    bde8:	eb00040a 	bl	ce18 <LeaveCritical>
    bdec:	eaffff93 	b	bc40 <CTimer::GetTimeString()+0x20>
    bdf0:	88888889 	.word	0x88888889
    bdf4:	91a2b3c5 	.word	0x91a2b3c5
    bdf8:	c22e4507 	.word	0xc22e4507
    bdfc:	000007b2 	.word	0x000007b2
    be00:	51eb851f 	.word	0x51eb851f
    be04:	0000016d 	.word	0x0000016d
    be08:	0000016e 	.word	0x0000016e
    be0c:	000007b7 	.word	0x000007b7
    be10:	00010ba4 	.word	0x00010ba4
    be14:	00010ac4 	.word	0x00010ac4
    be18:	aaaaaaab 	.word	0xaaaaaaab
    be1c:	00011294 	.word	0x00011294
    be20:	00010b88 	.word	0x00010b88

0000be24 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>:
    be24:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    be28:	e1a09000 	mov	r9, r0
    be2c:	e24dd00c 	sub	sp, sp, #12
    be30:	e58d0004 	str	r0, [sp, #4]
    be34:	e1a04002 	mov	r4, r2
    be38:	e3a00014 	mov	r0, #20
    be3c:	e1a06001 	mov	r6, r1
    be40:	e1a07003 	mov	r7, r3
    be44:	e59d5030 	ldr	r5, [sp, #48]	; 0x30
    be48:	eb00041f 	bl	cecc <operator new(unsigned int)>
    be4c:	e5991004 	ldr	r1, [r9, #4]
    be50:	e3540000 	cmp	r4, #0
    be54:	e1a08000 	mov	r8, r0
    be58:	e0816006 	add	r6, r1, r6
    be5c:	0a00003d 	beq	bf58 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x134>
    be60:	e59d3004 	ldr	r3, [sp, #4]
    be64:	e59f2100 	ldr	r2, [pc, #256]	; bf6c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x148>
    be68:	e593001c 	ldr	r0, [r3, #28]
    be6c:	e98800d0 	stmib	r8, {r4, r6, r7}
    be70:	e3500000 	cmp	r0, #0
    be74:	e5885010 	str	r5, [r8, #16]
    be78:	e5882000 	str	r2, [r8]
    be7c:	1a000033 	bne	bf50 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x12c>
    be80:	e59d3004 	ldr	r3, [sp, #4]
    be84:	e2835018 	add	r5, r3, #24
    be88:	e1a00005 	mov	r0, r5
    be8c:	eb000980 	bl	e494 <CPtrList::GetFirst()>
    be90:	e2504000 	subs	r4, r0, #0
    be94:	0a000028 	beq	bf3c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x118>
    be98:	e59f90d0 	ldr	r9, [pc, #208]	; bf70 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x14c>
    be9c:	e59f70c8 	ldr	r7, [pc, #200]	; bf6c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x148>
    bea0:	e59fb0cc 	ldr	fp, [pc, #204]	; bf74 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x150>
    bea4:	ea000010 	b	beec <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xc8>
    bea8:	e59a3000 	ldr	r3, [sl]
    beac:	e1530007 	cmp	r3, r7
    beb0:	0a000003 	beq	bec4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xa0>
    beb4:	e1a0200b 	mov	r2, fp
    beb8:	e1a01009 	mov	r1, r9
    bebc:	e59f00b4 	ldr	r0, [pc, #180]	; bf78 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x154>
    bec0:	eb00058f 	bl	d504 <assertion_failed>
    bec4:	e59a3008 	ldr	r3, [sl, #8]
    bec8:	e1a01004 	mov	r1, r4
    becc:	e0433006 	sub	r3, r3, r6
    bed0:	e3530000 	cmp	r3, #0
    bed4:	e1a00005 	mov	r0, r5
    bed8:	ca00000d 	bgt	bf14 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xf0>
    bedc:	eb00096e 	bl	e49c <CPtrList::GetNext(TPtrListElement*)>
    bee0:	e3500000 	cmp	r0, #0
    bee4:	0a000014 	beq	bf3c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x118>
    bee8:	e1a04000 	mov	r4, r0
    beec:	e1a01004 	mov	r1, r4
    bef0:	e1a00005 	mov	r0, r5
    bef4:	eb00097e 	bl	e4f4 <CPtrList::GetPtr(TPtrListElement*)>
    bef8:	e250a000 	subs	sl, r0, #0
    befc:	1affffe9 	bne	bea8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x84>
    bf00:	e59f2074 	ldr	r2, [pc, #116]	; bf7c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x158>
    bf04:	e1a01009 	mov	r1, r9
    bf08:	e59f0070 	ldr	r0, [pc, #112]	; bf80 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x15c>
    bf0c:	eb00057c 	bl	d504 <assertion_failed>
    bf10:	eaffffe4 	b	bea8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x84>
    bf14:	e1a02008 	mov	r2, r8
    bf18:	eb00098b 	bl	e54c <CPtrList::InsertBefore(TPtrListElement*, void*)>
    bf1c:	e59d3004 	ldr	r3, [sp, #4]
    bf20:	e593301c 	ldr	r3, [r3, #28]
    bf24:	e3530000 	cmp	r3, #0
    bf28:	0a000000 	beq	bf30 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x10c>
    bf2c:	eb0003b9 	bl	ce18 <LeaveCritical>
    bf30:	e1a00008 	mov	r0, r8
    bf34:	e28dd00c 	add	sp, sp, #12
    bf38:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bf3c:	e1a01004 	mov	r1, r4
    bf40:	e1a00005 	mov	r0, r5
    bf44:	e1a02008 	mov	r2, r8
    bf48:	eb0009c0 	bl	e650 <CPtrList::InsertAfter(TPtrListElement*, void*)>
    bf4c:	eafffff2 	b	bf1c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xf8>
    bf50:	eb000383 	bl	cd64 <EnterCritical>
    bf54:	eaffffc9 	b	be80 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x5c>
    bf58:	e59f2024 	ldr	r2, [pc, #36]	; bf84 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x160>
    bf5c:	e59f100c 	ldr	r1, [pc, #12]	; bf70 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x14c>
    bf60:	e59f0020 	ldr	r0, [pc, #32]	; bf88 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x164>
    bf64:	eb000566 	bl	d504 <assertion_failed>
    bf68:	eaffffbc 	b	be60 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x3c>
    bf6c:	4b544d43 	.word	0x4b544d43
    bf70:	00010afc 	.word	0x00010afc
    bf74:	0000016a 	.word	0x0000016a
    bf78:	00010bc8 	.word	0x00010bc8
    bf7c:	00000169 	.word	0x00000169
    bf80:	00010bb8 	.word	0x00010bb8
    bf84:	00000159 	.word	0x00000159
    bf88:	000106f4 	.word	0x000106f4

0000bf8c <CTimer::CancelKernelTimer(unsigned int)>:
    bf8c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    bf90:	e2514000 	subs	r4, r1, #0
    bf94:	e1a05000 	mov	r5, r0
    bf98:	0a00001f 	beq	c01c <CTimer::CancelKernelTimer(unsigned int)+0x90>
    bf9c:	e595001c 	ldr	r0, [r5, #28]
    bfa0:	e3500000 	cmp	r0, #0
    bfa4:	1a00001a 	bne	c014 <CTimer::CancelKernelTimer(unsigned int)+0x88>
    bfa8:	e2856018 	add	r6, r5, #24
    bfac:	e1a00006 	mov	r0, r6
    bfb0:	e1a01004 	mov	r1, r4
    bfb4:	eb000a36 	bl	e894 <CPtrList::Find(void*)>
    bfb8:	e2507000 	subs	r7, r0, #0
    bfbc:	0a00000f 	beq	c000 <CTimer::CancelKernelTimer(unsigned int)+0x74>
    bfc0:	e59f3068 	ldr	r3, [pc, #104]	; c030 <CTimer::CancelKernelTimer(unsigned int)+0xa4>
    bfc4:	e5942000 	ldr	r2, [r4]
    bfc8:	e1520003 	cmp	r2, r3
    bfcc:	0a000003 	beq	bfe0 <CTimer::CancelKernelTimer(unsigned int)+0x54>
    bfd0:	e59f205c 	ldr	r2, [pc, #92]	; c034 <CTimer::CancelKernelTimer(unsigned int)+0xa8>
    bfd4:	e59f105c 	ldr	r1, [pc, #92]	; c038 <CTimer::CancelKernelTimer(unsigned int)+0xac>
    bfd8:	e59f005c 	ldr	r0, [pc, #92]	; c03c <CTimer::CancelKernelTimer(unsigned int)+0xb0>
    bfdc:	eb000548 	bl	d504 <assertion_failed>
    bfe0:	e1a01007 	mov	r1, r7
    bfe4:	e1a00006 	mov	r0, r6
    bfe8:	eb0009d6 	bl	e748 <CPtrList::Remove(TPtrListElement*)>
    bfec:	e3a03000 	mov	r3, #0
    bff0:	e1a00004 	mov	r0, r4
    bff4:	e5843000 	str	r3, [r4]
    bff8:	e3a01014 	mov	r1, #20
    bffc:	eb0003b6 	bl	cedc <operator delete(void*, unsigned int)>
    c000:	e595301c 	ldr	r3, [r5, #28]
    c004:	e3530000 	cmp	r3, #0
    c008:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    c00c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    c010:	ea000380 	b	ce18 <LeaveCritical>
    c014:	eb000352 	bl	cd64 <EnterCritical>
    c018:	eaffffe2 	b	bfa8 <CTimer::CancelKernelTimer(unsigned int)+0x1c>
    c01c:	e59f201c 	ldr	r2, [pc, #28]	; c040 <CTimer::CancelKernelTimer(unsigned int)+0xb4>
    c020:	e59f1010 	ldr	r1, [pc, #16]	; c038 <CTimer::CancelKernelTimer(unsigned int)+0xac>
    c024:	e59f0018 	ldr	r0, [pc, #24]	; c044 <CTimer::CancelKernelTimer(unsigned int)+0xb8>
    c028:	eb000535 	bl	d504 <assertion_failed>
    c02c:	eaffffda 	b	bf9c <CTimer::CancelKernelTimer(unsigned int)+0x10>
    c030:	4b544d43 	.word	0x4b544d43
    c034:	0000018d 	.word	0x0000018d
    c038:	00010afc 	.word	0x00010afc
    c03c:	00010b3c 	.word	0x00010b3c
    c040:	00000186 	.word	0x00000186
    c044:	00010b30 	.word	0x00010b30

0000c048 <CTimer::PollKernelTimers()>:
    c048:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c04c:	e1a05000 	mov	r5, r0
    c050:	e590001c 	ldr	r0, [r0, #28]
    c054:	e3500000 	cmp	r0, #0
    c058:	1a00004a 	bne	c188 <CTimer::PollKernelTimers()+0x140>
    c05c:	e2856018 	add	r6, r5, #24
    c060:	e1a00006 	mov	r0, r6
    c064:	eb00090a 	bl	e494 <CPtrList::GetFirst()>
    c068:	e2504000 	subs	r4, r0, #0
    c06c:	0a00003b 	beq	c160 <CTimer::PollKernelTimers()+0x118>
    c070:	e59f9118 	ldr	r9, [pc, #280]	; c190 <CTimer::PollKernelTimers()+0x148>
    c074:	e59f8118 	ldr	r8, [pc, #280]	; c194 <CTimer::PollKernelTimers()+0x14c>
    c078:	e59fa118 	ldr	sl, [pc, #280]	; c198 <CTimer::PollKernelTimers()+0x150>
    c07c:	ea000010 	b	c0c4 <CTimer::PollKernelTimers()+0x7c>
    c080:	e5974004 	ldr	r4, [r7, #4]
    c084:	e3540000 	cmp	r4, #0
    c088:	0a00002c 	beq	c140 <CTimer::PollKernelTimers()+0xf8>
    c08c:	e5972010 	ldr	r2, [r7, #16]
    c090:	e597100c 	ldr	r1, [r7, #12]
    c094:	e1a00007 	mov	r0, r7
    c098:	e12fff34 	blx	r4
    c09c:	e3a03000 	mov	r3, #0
    c0a0:	e1a00007 	mov	r0, r7
    c0a4:	e5873000 	str	r3, [r7]
    c0a8:	e3a01014 	mov	r1, #20
    c0ac:	eb00038a 	bl	cedc <operator delete(void*, unsigned int)>
    c0b0:	e595001c 	ldr	r0, [r5, #28]
    c0b4:	e3500000 	cmp	r0, #0
    c0b8:	1a000025 	bne	c154 <CTimer::PollKernelTimers()+0x10c>
    c0bc:	e25b4000 	subs	r4, fp, #0
    c0c0:	0a000026 	beq	c160 <CTimer::PollKernelTimers()+0x118>
    c0c4:	e1a01004 	mov	r1, r4
    c0c8:	e1a00006 	mov	r0, r6
    c0cc:	eb000908 	bl	e4f4 <CPtrList::GetPtr(TPtrListElement*)>
    c0d0:	e2507000 	subs	r7, r0, #0
    c0d4:	0a000026 	beq	c174 <CTimer::PollKernelTimers()+0x12c>
    c0d8:	e5973000 	ldr	r3, [r7]
    c0dc:	e1530008 	cmp	r3, r8
    c0e0:	0a000003 	beq	c0f4 <CTimer::PollKernelTimers()+0xac>
    c0e4:	e59f20b0 	ldr	r2, [pc, #176]	; c19c <CTimer::PollKernelTimers()+0x154>
    c0e8:	e1a01009 	mov	r1, r9
    c0ec:	e1a0000a 	mov	r0, sl
    c0f0:	eb000503 	bl	d504 <assertion_failed>
    c0f4:	e5952004 	ldr	r2, [r5, #4]
    c0f8:	e5973008 	ldr	r3, [r7, #8]
    c0fc:	e0433002 	sub	r3, r3, r2
    c100:	e3530000 	cmp	r3, #0
    c104:	ca000015 	bgt	c160 <CTimer::PollKernelTimers()+0x118>
    c108:	e1a01004 	mov	r1, r4
    c10c:	e1a00006 	mov	r0, r6
    c110:	eb0008e1 	bl	e49c <CPtrList::GetNext(TPtrListElement*)>
    c114:	e1a01004 	mov	r1, r4
    c118:	e1a0b000 	mov	fp, r0
    c11c:	e1a00006 	mov	r0, r6
    c120:	eb000988 	bl	e748 <CPtrList::Remove(TPtrListElement*)>
    c124:	e595301c 	ldr	r3, [r5, #28]
    c128:	e3530000 	cmp	r3, #0
    c12c:	0affffd3 	beq	c080 <CTimer::PollKernelTimers()+0x38>
    c130:	eb000338 	bl	ce18 <LeaveCritical>
    c134:	e5974004 	ldr	r4, [r7, #4]
    c138:	e3540000 	cmp	r4, #0
    c13c:	1affffd2 	bne	c08c <CTimer::PollKernelTimers()+0x44>
    c140:	e59f2058 	ldr	r2, [pc, #88]	; c1a0 <CTimer::PollKernelTimers()+0x158>
    c144:	e1a01009 	mov	r1, r9
    c148:	e59f0054 	ldr	r0, [pc, #84]	; c1a4 <CTimer::PollKernelTimers()+0x15c>
    c14c:	eb0004ec 	bl	d504 <assertion_failed>
    c150:	eaffffcd 	b	c08c <CTimer::PollKernelTimers()+0x44>
    c154:	eb000302 	bl	cd64 <EnterCritical>
    c158:	e25b4000 	subs	r4, fp, #0
    c15c:	1affffd8 	bne	c0c4 <CTimer::PollKernelTimers()+0x7c>
    c160:	e595301c 	ldr	r3, [r5, #28]
    c164:	e3530000 	cmp	r3, #0
    c168:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c16c:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c170:	ea000328 	b	ce18 <LeaveCritical>
    c174:	e59f202c 	ldr	r2, [pc, #44]	; c1a8 <CTimer::PollKernelTimers()+0x160>
    c178:	e1a01009 	mov	r1, r9
    c17c:	e59f0028 	ldr	r0, [pc, #40]	; c1ac <CTimer::PollKernelTimers()+0x164>
    c180:	eb0004df 	bl	d504 <assertion_failed>
    c184:	eaffffd3 	b	c0d8 <CTimer::PollKernelTimers()+0x90>
    c188:	eb0002f5 	bl	cd64 <EnterCritical>
    c18c:	eaffffb2 	b	c05c <CTimer::PollKernelTimers()+0x14>
    c190:	00010afc 	.word	0x00010afc
    c194:	4b544d43 	.word	0x4b544d43
    c198:	00010b3c 	.word	0x00010b3c
    c19c:	000001a3 	.word	0x000001a3
    c1a0:	000001b1 	.word	0x000001b1
    c1a4:	000106f4 	.word	0x000106f4
    c1a8:	000001a2 	.word	0x000001a2
    c1ac:	00010b30 	.word	0x00010b30

0000c1b0 <CTimer::InterruptHandler()>:
    c1b0:	e92d4010 	push	{r4, lr}
    c1b4:	e3a03000 	mov	r3, #0
    c1b8:	e1a04000 	mov	r4, r0
    c1bc:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    c1c0:	e59f20e4 	ldr	r2, [pc, #228]	; c2ac <CTimer::InterruptHandler()+0xfc>
    c1c4:	e5923018 	ldr	r3, [r2, #24]
    c1c8:	e2833c27 	add	r3, r3, #9984	; 0x2700
    c1cc:	e2833010 	add	r3, r3, #16
    c1d0:	e5823018 	str	r3, [r2, #24]
    c1d4:	e5921004 	ldr	r1, [r2, #4]
    c1d8:	e1530001 	cmp	r3, r1
    c1dc:	e3a01008 	mov	r1, #8
    c1e0:	35923004 	ldrcc	r3, [r2, #4]
    c1e4:	32833c27 	addcc	r3, r3, #9984	; 0x2700
    c1e8:	32833010 	addcc	r3, r3, #16
    c1ec:	35823018 	strcc	r3, [r2, #24]
    c1f0:	e59f20b4 	ldr	r2, [pc, #180]	; c2ac <CTimer::InterruptHandler()+0xfc>
    c1f4:	e3a03000 	mov	r3, #0
    c1f8:	e5821000 	str	r1, [r2]
    c1fc:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    c200:	e5900010 	ldr	r0, [r0, #16]
    c204:	e1500003 	cmp	r0, r3
    c208:	1a00001a 	bne	c278 <CTimer::InterruptHandler()+0xc8>
    c20c:	e3a01064 	mov	r1, #100	; 0x64
    c210:	e5942004 	ldr	r2, [r4, #4]
    c214:	e59f3094 	ldr	r3, [pc, #148]	; c2b0 <CTimer::InterruptHandler()+0x100>
    c218:	e2822001 	add	r2, r2, #1
    c21c:	e0830293 	umull	r0, r3, r3, r2
    c220:	e1a032a3 	lsr	r3, r3, #5
    c224:	e0030391 	mul	r3, r1, r3
    c228:	e0523003 	subs	r3, r2, r3
    c22c:	e5842004 	str	r2, [r4, #4]
    c230:	1a000007 	bne	c254 <CTimer::InterruptHandler()+0xa4>
    c234:	e5942008 	ldr	r2, [r4, #8]
    c238:	e2822001 	add	r2, r2, #1
    c23c:	e5842008 	str	r2, [r4, #8]
    c240:	e594200c 	ldr	r2, [r4, #12]
    c244:	e2822001 	add	r2, r2, #1
    c248:	e584200c 	str	r2, [r4, #12]
    c24c:	e3530000 	cmp	r3, #0
    c250:	1a000006 	bne	c270 <CTimer::InterruptHandler()+0xc0>
    c254:	e1a00004 	mov	r0, r4
    c258:	ebffff7a 	bl	c048 <CTimer::PollKernelTimers()>
    c25c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    c260:	e3530000 	cmp	r3, #0
    c264:	08bd8010 	popeq	{r4, pc}
    c268:	e8bd4010 	pop	{r4, lr}
    c26c:	e12fff13 	bx	r3
    c270:	eb0002e8 	bl	ce18 <LeaveCritical>
    c274:	eafffff6 	b	c254 <CTimer::InterruptHandler()+0xa4>
    c278:	eb0002b9 	bl	cd64 <EnterCritical>
    c27c:	e3a01064 	mov	r1, #100	; 0x64
    c280:	e5943004 	ldr	r3, [r4, #4]
    c284:	e59f2024 	ldr	r2, [pc, #36]	; c2b0 <CTimer::InterruptHandler()+0x100>
    c288:	e2833001 	add	r3, r3, #1
    c28c:	e0820392 	umull	r0, r2, r2, r3
    c290:	e1a022a2 	lsr	r2, r2, #5
    c294:	e0020291 	mul	r2, r1, r2
    c298:	e1530002 	cmp	r3, r2
    c29c:	e5843004 	str	r3, [r4, #4]
    c2a0:	e5943010 	ldr	r3, [r4, #16]
    c2a4:	1affffe8 	bne	c24c <CTimer::InterruptHandler()+0x9c>
    c2a8:	eaffffe1 	b	c234 <CTimer::InterruptHandler()+0x84>
    c2ac:	20003000 	.word	0x20003000
    c2b0:	51eb851f 	.word	0x51eb851f

0000c2b4 <CTimer::InterruptHandler(void*)>:
    c2b4:	e92d4010 	push	{r4, lr}
    c2b8:	e2504000 	subs	r4, r0, #0
    c2bc:	0a000002 	beq	c2cc <CTimer::InterruptHandler(void*)+0x18>
    c2c0:	e1a00004 	mov	r0, r4
    c2c4:	e8bd4010 	pop	{r4, lr}
    c2c8:	eaffffb8 	b	c1b0 <CTimer::InterruptHandler()>
    c2cc:	e59f0014 	ldr	r0, [pc, #20]	; c2e8 <CTimer::InterruptHandler(void*)+0x34>
    c2d0:	e59f2014 	ldr	r2, [pc, #20]	; c2ec <CTimer::InterruptHandler(void*)+0x38>
    c2d4:	e59f1014 	ldr	r1, [pc, #20]	; c2f0 <CTimer::InterruptHandler(void*)+0x3c>
    c2d8:	eb000489 	bl	d504 <assertion_failed>
    c2dc:	e1a00004 	mov	r0, r4
    c2e0:	e8bd4010 	pop	{r4, lr}
    c2e4:	eaffffb1 	b	c1b0 <CTimer::InterruptHandler()>
    c2e8:	00010bf0 	.word	0x00010bf0
    c2ec:	000001ea 	.word	0x000001ea
    c2f0:	00010afc 	.word	0x00010afc

0000c2f4 <CTimer::TuneMsDelay()>:
    c2f4:	e92d4070 	push	{r4, r5, r6, lr}
    c2f8:	e1a05000 	mov	r5, r0
    c2fc:	e3a00ffa 	mov	r0, #1000	; 0x3e8
    c300:	e5953020 	ldr	r3, [r5, #32]
    c304:	e24dd008 	sub	sp, sp, #8
    c308:	e0000390 	mul	r0, r0, r3
    c30c:	e5954004 	ldr	r4, [r5, #4]
    c310:	eb000572 	bl	d8e0 <DelayLoop>
    c314:	e5951004 	ldr	r1, [r5, #4]
    c318:	e59f0068 	ldr	r0, [pc, #104]	; c388 <CTimer::TuneMsDelay()+0x94>
    c31c:	e0411004 	sub	r1, r1, r4
    c320:	eb000fc9 	bl	1024c <__aeabi_uidiv>
    c324:	e5953020 	ldr	r3, [r5, #32]
    c328:	e59f405c 	ldr	r4, [pc, #92]	; c38c <CTimer::TuneMsDelay()+0x98>
    c32c:	e0030093 	mul	r3, r3, r0
    c330:	e0832394 	umull	r2, r3, r4, r3
    c334:	e59f1054 	ldr	r1, [pc, #84]	; c390 <CTimer::TuneMsDelay()+0x9c>
    c338:	e1a032a3 	lsr	r3, r3, #5
    c33c:	e2832f7d 	add	r2, r3, #500	; 0x1f4
    c340:	e0821291 	umull	r1, r2, r1, r2
    c344:	e1a06000 	mov	r6, r0
    c348:	e1a02322 	lsr	r2, r2, #6
    c34c:	e5852024 	str	r2, [r5, #36]	; 0x24
    c350:	e5853020 	str	r3, [r5, #32]
    c354:	eb000678 	bl	dd3c <CLogger::Get()>
    c358:	e3a03064 	mov	r3, #100	; 0x64
    c35c:	e0842694 	umull	r2, r4, r4, r6
    c360:	e1a042a4 	lsr	r4, r4, #5
    c364:	e0030493 	mul	r3, r3, r4
    c368:	e0466003 	sub	r6, r6, r3
    c36c:	e88d0050 	stm	sp, {r4, r6}
    c370:	e59f301c 	ldr	r3, [pc, #28]	; c394 <CTimer::TuneMsDelay()+0xa0>
    c374:	e3a02003 	mov	r2, #3
    c378:	e59f1018 	ldr	r1, [pc, #24]	; c398 <CTimer::TuneMsDelay()+0xa4>
    c37c:	eb000817 	bl	e3e0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c380:	e28dd008 	add	sp, sp, #8
    c384:	e8bd8070 	pop	{r4, r5, r6, pc}
    c388:	00002710 	.word	0x00002710
    c38c:	51eb851f 	.word	0x51eb851f
    c390:	10624dd3 	.word	0x10624dd3
    c394:	00010bfc 	.word	0x00010bfc
    c398:	00010af4 	.word	0x00010af4

0000c39c <CTimer::Initialize()>:
    c39c:	e92d4070 	push	{r4, r5, r6, lr}
    c3a0:	e1a04000 	mov	r4, r0
    c3a4:	e5900000 	ldr	r0, [r0]
    c3a8:	e3500000 	cmp	r0, #0
    c3ac:	0a000011 	beq	c3f8 <CTimer::Initialize()+0x5c>
    c3b0:	e1a03004 	mov	r3, r4
    c3b4:	e59f2054 	ldr	r2, [pc, #84]	; c410 <CTimer::Initialize()+0x74>
    c3b8:	e3a01003 	mov	r1, #3
    c3bc:	ebfffabc 	bl	aeb4 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    c3c0:	e3a05000 	mov	r5, #0
    c3c4:	ee075f9a 	mcr	15, 0, r5, cr7, cr10, {4}
    c3c8:	e59f2044 	ldr	r2, [pc, #68]	; c414 <CTimer::Initialize()+0x78>
    c3cc:	e59f3044 	ldr	r3, [pc, #68]	; c418 <CTimer::Initialize()+0x7c>
    c3d0:	e1a00004 	mov	r0, r4
    c3d4:	e5823004 	str	r3, [r2, #4]
    c3d8:	e5923004 	ldr	r3, [r2, #4]
    c3dc:	e2833c27 	add	r3, r3, #9984	; 0x2700
    c3e0:	e2833010 	add	r3, r3, #16
    c3e4:	e5823018 	str	r3, [r2, #24]
    c3e8:	ebffffc1 	bl	c2f4 <CTimer::TuneMsDelay()>
    c3ec:	ee075fba 	mcr	15, 0, r5, cr7, cr10, {5}
    c3f0:	e3a00001 	mov	r0, #1
    c3f4:	e8bd8070 	pop	{r4, r5, r6, pc}
    c3f8:	e59f001c 	ldr	r0, [pc, #28]	; c41c <CTimer::Initialize()+0x80>
    c3fc:	e3a02057 	mov	r2, #87	; 0x57
    c400:	e59f1018 	ldr	r1, [pc, #24]	; c420 <CTimer::Initialize()+0x84>
    c404:	eb00043e 	bl	d504 <assertion_failed>
    c408:	e5940000 	ldr	r0, [r4]
    c40c:	eaffffe7 	b	c3b0 <CTimer::Initialize()+0x14>
    c410:	0000c2b4 	.word	0x0000c2b4
    c414:	20003000 	.word	0x20003000
    c418:	fe363c80 	.word	0xfe363c80
    c41c:	00010b18 	.word	0x00010b18
    c420:	00010afc 	.word	0x00010afc

0000c424 <CTimer::RegisterPeriodicHandler(void (*)())>:
    c424:	e5903028 	ldr	r3, [r0, #40]	; 0x28
    c428:	e92d4070 	push	{r4, r5, r6, lr}
    c42c:	e3530000 	cmp	r3, #0
    c430:	e1a04000 	mov	r4, r0
    c434:	e1a05001 	mov	r5, r1
    c438:	0a000003 	beq	c44c <CTimer::RegisterPeriodicHandler(void (*)())+0x28>
    c43c:	e3a02c02 	mov	r2, #512	; 0x200
    c440:	e59f1024 	ldr	r1, [pc, #36]	; c46c <CTimer::RegisterPeriodicHandler(void (*)())+0x48>
    c444:	e59f0024 	ldr	r0, [pc, #36]	; c470 <CTimer::RegisterPeriodicHandler(void (*)())+0x4c>
    c448:	eb00042d 	bl	d504 <assertion_failed>
    c44c:	e3550000 	cmp	r5, #0
    c450:	e5845028 	str	r5, [r4, #40]	; 0x28
    c454:	18bd8070 	popne	{r4, r5, r6, pc}
    c458:	e59f2014 	ldr	r2, [pc, #20]	; c474 <CTimer::RegisterPeriodicHandler(void (*)())+0x50>
    c45c:	e59f1008 	ldr	r1, [pc, #8]	; c46c <CTimer::RegisterPeriodicHandler(void (*)())+0x48>
    c460:	e59f0010 	ldr	r0, [pc, #16]	; c478 <CTimer::RegisterPeriodicHandler(void (*)())+0x54>
    c464:	e8bd4070 	pop	{r4, r5, r6, lr}
    c468:	ea000425 	b	d504 <assertion_failed>
    c46c:	00010afc 	.word	0x00010afc
    c470:	00010c14 	.word	0x00010c14
    c474:	00000202 	.word	0x00000202
    c478:	00010c2c 	.word	0x00010c2c

0000c47c <CTimer::SimpleMsDelay(unsigned int)>:
    c47c:	e3500000 	cmp	r0, #0
    c480:	012fff1e 	bxeq	lr
    c484:	e3a03ffa 	mov	r3, #1000	; 0x3e8
    c488:	e0000093 	mul	r0, r3, r0
    c48c:	e3500000 	cmp	r0, #0
    c490:	012fff1e 	bxeq	lr
    c494:	eafffccf 	b	b7d8 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]>

0000c498 <CTimer::SimpleusDelay(unsigned int)>:
    c498:	e3500000 	cmp	r0, #0
    c49c:	012fff1e 	bxeq	lr
    c4a0:	eafffccc 	b	b7d8 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]>

0000c4a4 <CTimer::IsLeapYear(unsigned int)>:
    c4a4:	e3a02064 	mov	r2, #100	; 0x64
    c4a8:	e59f303c 	ldr	r3, [pc, #60]	; c4ec <CTimer::IsLeapYear(unsigned int)+0x48>
    c4ac:	e0831093 	umull	r1, r3, r3, r0
    c4b0:	e1a012a3 	lsr	r1, r3, #5
    c4b4:	e0020192 	mul	r2, r2, r1
    c4b8:	e1500002 	cmp	r0, r2
    c4bc:	0a000003 	beq	c4d0 <CTimer::IsLeapYear(unsigned int)+0x2c>
    c4c0:	e3100003 	tst	r0, #3
    c4c4:	03a00001 	moveq	r0, #1
    c4c8:	13a00000 	movne	r0, #0
    c4cc:	e12fff1e 	bx	lr
    c4d0:	e3a02e19 	mov	r2, #400	; 0x190
    c4d4:	e1a033a3 	lsr	r3, r3, #7
    c4d8:	e0030392 	mul	r3, r2, r3
    c4dc:	e0400003 	sub	r0, r0, r3
    c4e0:	e16f0f10 	clz	r0, r0
    c4e4:	e1a002a0 	lsr	r0, r0, #5
    c4e8:	e12fff1e 	bx	lr
    c4ec:	51eb851f 	.word	0x51eb851f

0000c4f0 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)>:
    c4f0:	e3500001 	cmp	r0, #1
    c4f4:	0a000002 	beq	c504 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x14>
    c4f8:	e59f3058 	ldr	r3, [pc, #88]	; c558 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x68>
    c4fc:	e7930100 	ldr	r0, [r3, r0, lsl #2]
    c500:	e12fff1e 	bx	lr
    c504:	e3a02064 	mov	r2, #100	; 0x64
    c508:	e59f304c 	ldr	r3, [pc, #76]	; c55c <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x6c>
    c50c:	e083c193 	umull	ip, r3, r3, r1
    c510:	e1a0c2a3 	lsr	ip, r3, #5
    c514:	e0020c92 	mul	r2, r2, ip
    c518:	e1510002 	cmp	r1, r2
    c51c:	0a000006 	beq	c53c <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x4c>
    c520:	e3110003 	tst	r1, #3
    c524:	03a01001 	moveq	r1, #1
    c528:	13a01000 	movne	r1, #0
    c52c:	e3510000 	cmp	r1, #0
    c530:	0afffff0 	beq	c4f8 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x8>
    c534:	e3a0001d 	mov	r0, #29
    c538:	e12fff1e 	bx	lr
    c53c:	e3a02e19 	mov	r2, #400	; 0x190
    c540:	e1a033a3 	lsr	r3, r3, #7
    c544:	e0030392 	mul	r3, r2, r3
    c548:	e0411003 	sub	r1, r1, r3
    c54c:	e16f1f11 	clz	r1, r1
    c550:	e1a012a1 	lsr	r1, r1, #5
    c554:	eafffff4 	b	c52c <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x3c>
    c558:	00010ac4 	.word	0x00010ac4
    c55c:	51eb851f 	.word	0x51eb851f

0000c560 <CTimer::Get()>:
    c560:	e92d4010 	push	{r4, lr}
    c564:	e59f4020 	ldr	r4, [pc, #32]	; c58c <CTimer::Get()+0x2c>
    c568:	e5940000 	ldr	r0, [r4]
    c56c:	e3500000 	cmp	r0, #0
    c570:	18bd8010 	popne	{r4, pc}
    c574:	e59f2014 	ldr	r2, [pc, #20]	; c590 <CTimer::Get()+0x30>
    c578:	e59f1014 	ldr	r1, [pc, #20]	; c594 <CTimer::Get()+0x34>
    c57c:	e59f0014 	ldr	r0, [pc, #20]	; c598 <CTimer::Get()+0x38>
    c580:	eb0003df 	bl	d504 <assertion_failed>
    c584:	e5940000 	ldr	r0, [r4]
    c588:	e8bd8010 	pop	{r4, pc}
    c58c:	0001133c 	.word	0x0001133c
    c590:	0000023e 	.word	0x0000023e
    c594:	00010afc 	.word	0x00010afc
    c598:	0001077c 	.word	0x0001077c

0000c59c <memcpy>:
    c59c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    c5a0:	e352007f 	cmp	r2, #127	; 0x7f
    c5a4:	9a00000b 	bls	c5d8 <memcpy+0x3c>
    c5a8:	e3110003 	tst	r1, #3
    c5ac:	1a000009 	bne	c5d8 <memcpy+0x3c>
    c5b0:	e3100003 	tst	r0, #3
    c5b4:	1a000007 	bne	c5d8 <memcpy+0x3c>
    c5b8:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
    c5bc:	e8b107f8 	ldm	r1!, {r3, r4, r5, r6, r7, r8, r9, sl}
    c5c0:	e2422020 	sub	r2, r2, #32
    c5c4:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
    c5c8:	f5d1f040 	pld	[r1, #64]	; 0x40
    c5cc:	e352001f 	cmp	r2, #31
    c5d0:	8afffff9 	bhi	c5bc <memcpy+0x20>
    c5d4:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
    c5d8:	e3520000 	cmp	r2, #0
    c5dc:	0a000003 	beq	c5f0 <memcpy+0x54>
    c5e0:	e4d13001 	ldrb	r3, [r1], #1
    c5e4:	e2522001 	subs	r2, r2, #1
    c5e8:	e4c03001 	strb	r3, [r0], #1
    c5ec:	1afffffb 	bne	c5e0 <memcpy+0x44>
    c5f0:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    c5f4:	e12fff1e 	bx	lr

0000c5f8 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
    c5f8:	e12fff1e 	bx	lr

0000c5fc <CVirtualGPIOPin::~CVirtualGPIOPin()>:
    c5fc:	e92d4010 	push	{r4, lr}
    c600:	e1a04000 	mov	r4, r0
    c604:	e3a01010 	mov	r1, #16
    c608:	eb000233 	bl	cedc <operator delete(void*, unsigned int)>
    c60c:	e1a00004 	mov	r0, r4
    c610:	e8bd8010 	pop	{r4, pc}

0000c614 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]>:
    c614:	e92d4070 	push	{r4, r5, r6, lr}
    c618:	e59f5094 	ldr	r5, [pc, #148]	; c6b4 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0xa0>
    c61c:	e1a04000 	mov	r4, r0
    c620:	e5950000 	ldr	r0, [r5]
    c624:	e1a06001 	mov	r6, r1
    c628:	e3500000 	cmp	r0, #0
    c62c:	1a00001a 	bne	c69c <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x88>
    c630:	e1d400bc 	ldrh	r0, [r4, #12]
    c634:	e1d430be 	ldrh	r3, [r4, #14]
    c638:	e5846008 	str	r6, [r4, #8]
    c63c:	e0402003 	sub	r2, r0, r3
    c640:	e6bf2072 	sxth	r2, r2
    c644:	e3520000 	cmp	r2, #0
    c648:	da00000c 	ble	c680 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x6c>
    c64c:	e3560000 	cmp	r6, #0
    c650:	1a00000c 	bne	c688 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x74>
    c654:	e2833001 	add	r3, r3, #1
    c658:	e6ff3073 	uxth	r3, r3
    c65c:	e1c430be 	strh	r3, [r4, #14]
    c660:	e5941004 	ldr	r1, [r4, #4]
    c664:	e5952004 	ldr	r2, [r5, #4]
    c668:	e1833800 	orr	r3, r3, r0, lsl #16
    c66c:	e7823101 	str	r3, [r2, r1, lsl #2]
    c670:	e5953000 	ldr	r3, [r5]
    c674:	e3530000 	cmp	r3, #0
    c678:	1a000005 	bne	c694 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x80>
    c67c:	e8bd8070 	pop	{r4, r5, r6, pc}
    c680:	e3560000 	cmp	r6, #0
    c684:	1a000006 	bne	c6a4 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x90>
    c688:	e5953000 	ldr	r3, [r5]
    c68c:	e3530000 	cmp	r3, #0
    c690:	08bd8070 	popeq	{r4, r5, r6, pc}
    c694:	e8bd4070 	pop	{r4, r5, r6, lr}
    c698:	ea0001de 	b	ce18 <LeaveCritical>
    c69c:	eb0001b0 	bl	cd64 <EnterCritical>
    c6a0:	eaffffe2 	b	c630 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x1c>
    c6a4:	e2800001 	add	r0, r0, #1
    c6a8:	e6ff0070 	uxth	r0, r0
    c6ac:	e1c400bc 	strh	r0, [r4, #12]
    c6b0:	eaffffea 	b	c660 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x4c>
    c6b4:	00011340 	.word	0x00011340

0000c6b8 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)>:
    c6b8:	e3a03000 	mov	r3, #0
    c6bc:	e92d4030 	push	{r4, r5, lr}
    c6c0:	e59f2124 	ldr	r2, [pc, #292]	; c7ec <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x134>
    c6c4:	e3510001 	cmp	r1, #1
    c6c8:	e24dd024 	sub	sp, sp, #36	; 0x24
    c6cc:	e1a04000 	mov	r4, r0
    c6d0:	e5801004 	str	r1, [r0, #4]
    c6d4:	e5802000 	str	r2, [r0]
    c6d8:	e1c030bc 	strh	r3, [r0, #12]
    c6dc:	e1c030be 	strh	r3, [r0, #14]
    c6e0:	9a000002 	bls	c6f0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x38>
    c6e4:	e1a00004 	mov	r0, r4
    c6e8:	e28dd024 	add	sp, sp, #36	; 0x24
    c6ec:	e8bd8030 	pop	{r4, r5, pc}
    c6f0:	e59f50f8 	ldr	r5, [pc, #248]	; c7f0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x138>
    c6f4:	e5950000 	ldr	r0, [r5]
    c6f8:	e1500003 	cmp	r0, r3
    c6fc:	1a00002c 	bne	c7b4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0xfc>
    c700:	e5953004 	ldr	r3, [r5, #4]
    c704:	e3530000 	cmp	r3, #0
    c708:	0a000011 	beq	c754 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x9c>
    c70c:	e3a01000 	mov	r1, #0
    c710:	e5942004 	ldr	r2, [r4, #4]
    c714:	e7831102 	str	r1, [r3, r2, lsl #2]
    c718:	e5953000 	ldr	r3, [r5]
    c71c:	e3530000 	cmp	r3, #0
    c720:	1a000009 	bne	c74c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x94>
    c724:	e5943004 	ldr	r3, [r4, #4]
    c728:	e3530001 	cmp	r3, #1
    c72c:	8affffec 	bhi	c6e4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x2c>
    c730:	e5953004 	ldr	r3, [r5, #4]
    c734:	e3530000 	cmp	r3, #0
    c738:	0affffe9 	beq	c6e4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x2c>
    c73c:	e3a01000 	mov	r1, #0
    c740:	e1a00004 	mov	r0, r4
    c744:	ebffffb2 	bl	c614 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]>
    c748:	eaffffe5 	b	c6e4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x2c>
    c74c:	eb0001b1 	bl	ce18 <LeaveCritical>
    c750:	eafffff3 	b	c724 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x6c>
    c754:	e3a00001 	mov	r0, #1
    c758:	eb00014a 	bl	cc88 <CMemorySystem::GetCoherentPage(unsigned int)>
    c75c:	e5850004 	str	r0, [r5, #4]
    c760:	e28d000c 	add	r0, sp, #12
    c764:	ebfff572 	bl	9d34 <CBcmPropertyTags::CBcmPropertyTags()>
    c768:	e3a03004 	mov	r3, #4
    c76c:	e595c004 	ldr	ip, [r5, #4]
    c770:	e58d3000 	str	r3, [sp]
    c774:	e3ccc103 	bic	ip, ip, #-1073741824	; 0xc0000000
    c778:	e38cc101 	orr	ip, ip, #1073741824	; 0x40000000
    c77c:	e28d000c 	add	r0, sp, #12
    c780:	e28d2010 	add	r2, sp, #16
    c784:	e3a03010 	mov	r3, #16
    c788:	e59f1064 	ldr	r1, [pc, #100]	; c7f4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x13c>
    c78c:	e58dc01c 	str	ip, [sp, #28]
    c790:	ebfff5be 	bl	9e90 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    c794:	e3500000 	cmp	r0, #0
    c798:	0a000007 	beq	c7bc <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x104>
    c79c:	e28d000c 	add	r0, sp, #12
    c7a0:	ebfff569 	bl	9d4c <CBcmPropertyTags::~CBcmPropertyTags()>
    c7a4:	e5953004 	ldr	r3, [r5, #4]
    c7a8:	e3530000 	cmp	r3, #0
    c7ac:	0affffd9 	beq	c718 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x60>
    c7b0:	eaffffd5 	b	c70c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x54>
    c7b4:	eb00016a 	bl	cd64 <EnterCritical>
    c7b8:	eaffffd0 	b	c700 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x48>
    c7bc:	e3a03010 	mov	r3, #16
    c7c0:	e58d0000 	str	r0, [sp]
    c7c4:	e28d2010 	add	r2, sp, #16
    c7c8:	e59f1028 	ldr	r1, [pc, #40]	; c7f8 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x140>
    c7cc:	e28d000c 	add	r0, sp, #12
    c7d0:	ebfff5ae 	bl	9e90 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    c7d4:	e3500000 	cmp	r0, #0
    c7d8:	159d301c 	ldrne	r3, [sp, #28]
    c7dc:	05850004 	streq	r0, [r5, #4]
    c7e0:	13c33103 	bicne	r3, r3, #-1073741824	; 0xc0000000
    c7e4:	15853004 	strne	r3, [r5, #4]
    c7e8:	eaffffeb 	b	c79c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0xe4>
    c7ec:	00010c7c 	.word	0x00010c7c
    c7f0:	00011340 	.word	0x00011340
    c7f4:	00048020 	.word	0x00048020
    c7f8:	00040010 	.word	0x00040010

0000c7fc <CVirtualGPIOPin::Write(unsigned int)>:
    c7fc:	e5902004 	ldr	r2, [r0, #4]
    c800:	e1a03001 	mov	r3, r1
    c804:	e3520001 	cmp	r2, #1
    c808:	812fff1e 	bxhi	lr
    c80c:	e3510001 	cmp	r1, #1
    c810:	93a03000 	movls	r3, #0
    c814:	83a03001 	movhi	r3, #1
    c818:	e59f2014 	ldr	r2, [pc, #20]	; c834 <CVirtualGPIOPin::Write(unsigned int)+0x38>
    c81c:	e5922004 	ldr	r2, [r2, #4]
    c820:	e3520000 	cmp	r2, #0
    c824:	03833001 	orreq	r3, r3, #1
    c828:	e3530000 	cmp	r3, #0
    c82c:	112fff1e 	bxne	lr
    c830:	eaffff77 	b	c614 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]>
    c834:	00011340 	.word	0x00011340

0000c838 <CVirtualGPIOPin::Invert()>:
    c838:	e5901008 	ldr	r1, [r0, #8]
    c83c:	e2211001 	eor	r1, r1, #1
    c840:	eaffffed 	b	c7fc <CVirtualGPIOPin::Write(unsigned int)>

0000c844 <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE>:
    c844:	e3a02000 	mov	r2, #0
    c848:	e59f3004 	ldr	r3, [pc, #4]	; c854 <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE+0x10>
    c84c:	e5832000 	str	r2, [r3]
    c850:	e12fff1e 	bx	lr
    c854:	00011340 	.word	0x00011340

0000c858 <UndefinedInstructionInternal>:
    c858:	e24ee004 	sub	lr, lr, #4
    c85c:	e92d4000 	stmfd	sp!, {lr}
    c860:	e14fe000 	mrs	lr, SPSR
    c864:	e92d4000 	stmfd	sp!, {lr}
    c868:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
    c86c:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    c870:	e1a0100d 	mov	r1, sp
    c874:	f1020012 	cps	#18
    c878:	e1a0200d 	mov	r2, sp
    c87c:	e1a0300e 	mov	r3, lr
    c880:	f1020011 	cps	#17
    c884:	e1a0400d 	mov	r4, sp
    c888:	e1a0500e 	mov	r5, lr
    c88c:	f102001f 	cps	#31
    c890:	e1a0d001 	mov	sp, r1
    c894:	e92d003c 	push	{r2, r3, r4, r5}
    c898:	e1a0100d 	mov	r1, sp
    c89c:	e3a00001 	mov	r0, #1
    c8a0:	ea000e3c 	b	10198 <ExceptionHandler>

0000c8a4 <PrefetchAbortStub>:
    c8a4:	e24ee004 	sub	lr, lr, #4
    c8a8:	e92d4000 	stmfd	sp!, {lr}
    c8ac:	e14fe000 	mrs	lr, SPSR
    c8b0:	e92d4000 	stmfd	sp!, {lr}
    c8b4:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
    c8b8:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    c8bc:	e1a0100d 	mov	r1, sp
    c8c0:	f1020012 	cps	#18
    c8c4:	e1a0200d 	mov	r2, sp
    c8c8:	e1a0300e 	mov	r3, lr
    c8cc:	f1020011 	cps	#17
    c8d0:	e1a0400d 	mov	r4, sp
    c8d4:	e1a0500e 	mov	r5, lr
    c8d8:	f102001f 	cps	#31
    c8dc:	e1a0d001 	mov	sp, r1
    c8e0:	e92d003c 	push	{r2, r3, r4, r5}
    c8e4:	e1a0100d 	mov	r1, sp
    c8e8:	e3a00002 	mov	r0, #2
    c8ec:	ea000e29 	b	10198 <ExceptionHandler>

0000c8f0 <DataAbortStub>:
    c8f0:	e24ee008 	sub	lr, lr, #8
    c8f4:	e92d4000 	stmfd	sp!, {lr}
    c8f8:	e14fe000 	mrs	lr, SPSR
    c8fc:	e92d4000 	stmfd	sp!, {lr}
    c900:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
    c904:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    c908:	e1a0100d 	mov	r1, sp
    c90c:	f1020012 	cps	#18
    c910:	e1a0200d 	mov	r2, sp
    c914:	e1a0300e 	mov	r3, lr
    c918:	f1020011 	cps	#17
    c91c:	e1a0400d 	mov	r4, sp
    c920:	e1a0500e 	mov	r5, lr
    c924:	f102001f 	cps	#31
    c928:	e1a0d001 	mov	sp, r1
    c92c:	e92d003c 	push	{r2, r3, r4, r5}
    c930:	e1a0100d 	mov	r1, sp
    c934:	e3a00003 	mov	r0, #3
    c938:	ea000e16 	b	10198 <ExceptionHandler>

0000c93c <UndefinedInstructionStub>:
    c93c:	e92d4001 	push	{r0, lr}
    c940:	eef80a10 	vmrs	r0, fpexc
    c944:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    c948:	0affffc2 	beq	c858 <UndefinedInstructionInternal>
    c94c:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
    c950:	eee80a10 	vmsr	fpexc, r0
    c954:	e8fd8001 	ldm	sp!, {r0, pc}^

0000c958 <IRQStub>:
    c958:	e24ee004 	sub	lr, lr, #4
    c95c:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
    c960:	ebfffa56 	bl	b2c0 <InterruptHandler>
    c964:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^

0000c968 <FIQStub>:
    c968:	e24ee004 	sub	lr, lr, #4
    c96c:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
    c970:	e3a03000 	mov	r3, #0
    c974:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    c978:	e59f2040 	ldr	r2, [pc, #64]	; c9c0 <FIQStub+0x58>
    c97c:	e5921000 	ldr	r1, [r2]
    c980:	e3510000 	cmp	r1, #0
    c984:	0a000004 	beq	c99c <FIQStub+0x34>
    c988:	e5920004 	ldr	r0, [r2, #4]
    c98c:	e12fff31 	blx	r1
    c990:	e3a03000 	mov	r3, #0
    c994:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    c998:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^
    c99c:	e3a03000 	mov	r3, #0
    c9a0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    c9a4:	e59f1018 	ldr	r1, [pc, #24]	; c9c4 <FIQStub+0x5c>
    c9a8:	e3a00000 	mov	r0, #0
    c9ac:	e5810000 	str	r0, [r1]
    c9b0:	e3a03000 	mov	r3, #0
    c9b4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    c9b8:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    c9bc:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^
    c9c0:	000112c4 	.word	0x000112c4
    c9c4:	2000b20c 	.word	0x2000b20c

0000c9c8 <CMemorySystem::~CMemorySystem()>:
    c9c8:	e59f3068 	ldr	r3, [pc, #104]	; ca38 <CMemorySystem::~CMemorySystem()+0x70>
    c9cc:	e92d4070 	push	{r4, r5, r6, lr}
    c9d0:	e5932000 	ldr	r2, [r3]
    c9d4:	e1a04000 	mov	r4, r0
    c9d8:	e1520000 	cmp	r2, r0
    c9dc:	0a000001 	beq	c9e8 <CMemorySystem::~CMemorySystem()+0x20>
    c9e0:	e1a00004 	mov	r0, r4
    c9e4:	e8bd8070 	pop	{r4, r5, r6, pc}
    c9e8:	e3a02000 	mov	r2, #0
    c9ec:	e5d01000 	ldrb	r1, [r0]
    c9f0:	e5832000 	str	r2, [r3]
    c9f4:	e1510002 	cmp	r1, r2
    c9f8:	0a000004 	beq	ca10 <CMemorySystem::~CMemorySystem()+0x48>
    c9fc:	ee111f10 	mrc	15, 0, r1, cr1, cr0, {0}
    ca00:	e59f3034 	ldr	r3, [pc, #52]	; ca3c <CMemorySystem::~CMemorySystem()+0x74>
    ca04:	e0033001 	and	r3, r3, r1
    ca08:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
    ca0c:	ee082f17 	mcr	15, 0, r2, cr8, cr7, {0}
    ca10:	e5945008 	ldr	r5, [r4, #8]
    ca14:	e3550000 	cmp	r5, #0
    ca18:	0afffff0 	beq	c9e0 <CMemorySystem::~CMemorySystem()+0x18>
    ca1c:	e1a00005 	mov	r0, r5
    ca20:	eb0000c5 	bl	cd3c <CPageTable::~CPageTable()>
    ca24:	e1a00005 	mov	r0, r5
    ca28:	e3a01004 	mov	r1, #4
    ca2c:	eb00012a 	bl	cedc <operator delete(void*, unsigned int)>
    ca30:	e1a00004 	mov	r0, r4
    ca34:	e8bd8070 	pop	{r4, r5, r6, pc}
    ca38:	00011348 	.word	0x00011348
    ca3c:	ff7fe7fa 	.word	0xff7fe7fa

0000ca40 <CMemorySystem::GetMemSize() const>:
    ca40:	e92d4010 	push	{r4, lr}
    ca44:	e59f402c 	ldr	r4, [pc, #44]	; ca78 <CMemorySystem::GetMemSize() const+0x38>
    ca48:	e5943000 	ldr	r3, [r4]
    ca4c:	e3530000 	cmp	r3, #0
    ca50:	0a000001 	beq	ca5c <CMemorySystem::GetMemSize() const+0x1c>
    ca54:	e5930004 	ldr	r0, [r3, #4]
    ca58:	e8bd8010 	pop	{r4, pc}
    ca5c:	e3a02082 	mov	r2, #130	; 0x82
    ca60:	e59f1014 	ldr	r1, [pc, #20]	; ca7c <CMemorySystem::GetMemSize() const+0x3c>
    ca64:	e59f0014 	ldr	r0, [pc, #20]	; ca80 <CMemorySystem::GetMemSize() const+0x40>
    ca68:	eb0002a5 	bl	d504 <assertion_failed>
    ca6c:	e5943000 	ldr	r3, [r4]
    ca70:	e5930004 	ldr	r0, [r3, #4]
    ca74:	e8bd8010 	pop	{r4, pc}
    ca78:	00011348 	.word	0x00011348
    ca7c:	00010c84 	.word	0x00010c84
    ca80:	0001077c 	.word	0x0001077c

0000ca84 <CMemorySystem::Get()>:
    ca84:	e92d4010 	push	{r4, lr}
    ca88:	e59f4020 	ldr	r4, [pc, #32]	; cab0 <CMemorySystem::Get()+0x2c>
    ca8c:	e5940000 	ldr	r0, [r4]
    ca90:	e3500000 	cmp	r0, #0
    ca94:	18bd8010 	popne	{r4, pc}
    ca98:	e3a02088 	mov	r2, #136	; 0x88
    ca9c:	e59f1010 	ldr	r1, [pc, #16]	; cab4 <CMemorySystem::Get()+0x30>
    caa0:	e59f0010 	ldr	r0, [pc, #16]	; cab8 <CMemorySystem::Get()+0x34>
    caa4:	eb000296 	bl	d504 <assertion_failed>
    caa8:	e5940000 	ldr	r0, [r4]
    caac:	e8bd8010 	pop	{r4, pc}
    cab0:	00011348 	.word	0x00011348
    cab4:	00010c84 	.word	0x00010c84
    cab8:	0001077c 	.word	0x0001077c

0000cabc <CMemorySystem::EnableMMU()>:
    cabc:	e5d03000 	ldrb	r3, [r0]
    cac0:	e92d4010 	push	{r4, lr}
    cac4:	e3530000 	cmp	r3, #0
    cac8:	e1a04000 	mov	r4, r0
    cacc:	0a00001c 	beq	cb44 <CMemorySystem::EnableMMU()+0x88>
    cad0:	ee113f30 	mrc	15, 0, r3, cr1, cr0, {1}
    cad4:	e3833040 	orr	r3, r3, #64	; 0x40
    cad8:	ee013f30 	mcr	15, 0, r3, cr1, cr0, {1}
    cadc:	ee103f70 	mrc	15, 0, r3, cr0, cr0, {3}
    cae0:	e3130001 	tst	r3, #1
    cae4:	1a00001b 	bne	cb58 <CMemorySystem::EnableMMU()+0x9c>
    cae8:	e3a03000 	mov	r3, #0
    caec:	ee023f50 	mcr	15, 0, r3, cr2, cr0, {2}
    caf0:	e5940008 	ldr	r0, [r4, #8]
    caf4:	e1500003 	cmp	r0, r3
    caf8:	0a00001b 	beq	cb6c <CMemorySystem::EnableMMU()+0xb0>
    cafc:	eb00008f 	bl	cd40 <CPageTable::GetBaseAddress() const>
    cb00:	ee020f10 	mcr	15, 0, r0, cr2, cr0, {0}
    cb04:	e3a03001 	mov	r3, #1
    cb08:	ee033f10 	mcr	15, 0, r3, cr3, cr0, {0}
    cb0c:	e3a03000 	mov	r3, #0
    cb10:	ee073f16 	mcr	15, 0, r3, cr7, cr6, {0}
    cb14:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    cb18:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
    cb1c:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
    cb20:	ee083f17 	mcr	15, 0, r3, cr8, cr7, {0}
    cb24:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    cb28:	ee073f95 	mcr	15, 0, r3, cr7, cr5, {4}
    cb2c:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
    cb30:	e59f204c 	ldr	r2, [pc, #76]	; cb84 <CMemorySystem::EnableMMU()+0xc8>
    cb34:	e3c33002 	bic	r3, r3, #2
    cb38:	e1832002 	orr	r2, r3, r2
    cb3c:	ee012f10 	mcr	15, 0, r2, cr1, cr0, {0}
    cb40:	e8bd8010 	pop	{r4, pc}
    cb44:	e3a0208e 	mov	r2, #142	; 0x8e
    cb48:	e59f1038 	ldr	r1, [pc, #56]	; cb88 <CMemorySystem::EnableMMU()+0xcc>
    cb4c:	e59f0038 	ldr	r0, [pc, #56]	; cb8c <CMemorySystem::EnableMMU()+0xd0>
    cb50:	eb00026b 	bl	d504 <assertion_failed>
    cb54:	eaffffdd 	b	cad0 <CMemorySystem::EnableMMU()+0x14>
    cb58:	e3a0209b 	mov	r2, #155	; 0x9b
    cb5c:	e59f1024 	ldr	r1, [pc, #36]	; cb88 <CMemorySystem::EnableMMU()+0xcc>
    cb60:	e59f0028 	ldr	r0, [pc, #40]	; cb90 <CMemorySystem::EnableMMU()+0xd4>
    cb64:	eb000266 	bl	d504 <assertion_failed>
    cb68:	eaffffde 	b	cae8 <CMemorySystem::EnableMMU()+0x2c>
    cb6c:	e59f0020 	ldr	r0, [pc, #32]	; cb94 <CMemorySystem::EnableMMU()+0xd8>
    cb70:	e3a020a1 	mov	r2, #161	; 0xa1
    cb74:	e59f100c 	ldr	r1, [pc, #12]	; cb88 <CMemorySystem::EnableMMU()+0xcc>
    cb78:	eb000261 	bl	d504 <assertion_failed>
    cb7c:	e5940008 	ldr	r0, [r4, #8]
    cb80:	eaffffdd 	b	cafc <CMemorySystem::EnableMMU()+0x40>
    cb84:	00c01805 	.word	0x00c01805
    cb88:	00010c84 	.word	0x00010c84
    cb8c:	00010c90 	.word	0x00010c90
    cb90:	00010ca0 	.word	0x00010ca0
    cb94:	00010ccc 	.word	0x00010ccc

0000cb98 <CMemorySystem::CMemorySystem(bool)>:
    cb98:	e3a03000 	mov	r3, #0
    cb9c:	e92d4030 	push	{r4, r5, lr}
    cba0:	e59f20d0 	ldr	r2, [pc, #208]	; cc78 <CMemorySystem::CMemorySystem(bool)+0xe0>
    cba4:	e24dd024 	sub	sp, sp, #36	; 0x24
    cba8:	e5925000 	ldr	r5, [r2]
    cbac:	e1a04000 	mov	r4, r0
    cbb0:	e1550003 	cmp	r5, r3
    cbb4:	e5c01000 	strb	r1, [r0]
    cbb8:	e5803004 	str	r3, [r0, #4]
    cbbc:	e5803008 	str	r3, [r0, #8]
    cbc0:	0a000002 	beq	cbd0 <CMemorySystem::CMemorySystem(bool)+0x38>
    cbc4:	e1a00004 	mov	r0, r4
    cbc8:	e28dd024 	add	sp, sp, #36	; 0x24
    cbcc:	e8bd8030 	pop	{r4, r5, pc}
    cbd0:	e28d0008 	add	r0, sp, #8
    cbd4:	e5824000 	str	r4, [r2]
    cbd8:	ebfff455 	bl	9d34 <CBcmPropertyTags::CBcmPropertyTags()>
    cbdc:	e58d5000 	str	r5, [sp]
    cbe0:	e28d0008 	add	r0, sp, #8
    cbe4:	e3a03014 	mov	r3, #20
    cbe8:	e28d200c 	add	r2, sp, #12
    cbec:	e59f1088 	ldr	r1, [pc, #136]	; cc7c <CMemorySystem::CMemorySystem(bool)+0xe4>
    cbf0:	ebfff4a6 	bl	9e90 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    cbf4:	e3500000 	cmp	r0, #0
    cbf8:	0a000018 	beq	cc60 <CMemorySystem::CMemorySystem(bool)+0xc8>
    cbfc:	e59d0018 	ldr	r0, [sp, #24]
    cc00:	e3500000 	cmp	r0, #0
    cc04:	0a000019 	beq	cc70 <CMemorySystem::CMemorySystem(bool)+0xd8>
    cc08:	e59f1070 	ldr	r1, [pc, #112]	; cc80 <CMemorySystem::CMemorySystem(bool)+0xe8>
    cc0c:	e59f0070 	ldr	r0, [pc, #112]	; cc84 <CMemorySystem::CMemorySystem(bool)+0xec>
    cc10:	e3a02047 	mov	r2, #71	; 0x47
    cc14:	eb00023a 	bl	d504 <assertion_failed>
    cc18:	e59d101c 	ldr	r1, [sp, #28]
    cc1c:	e59d0018 	ldr	r0, [sp, #24]
    cc20:	e5841004 	str	r1, [r4, #4]
    cc24:	eb0000ae 	bl	cee4 <mem_init>
    cc28:	e5d43000 	ldrb	r3, [r4]
    cc2c:	e3530000 	cmp	r3, #0
    cc30:	0a000007 	beq	cc54 <CMemorySystem::CMemorySystem(bool)+0xbc>
    cc34:	e3a00004 	mov	r0, #4
    cc38:	eb0000a3 	bl	cecc <operator new(unsigned int)>
    cc3c:	e1a05000 	mov	r5, r0
    cc40:	e5941004 	ldr	r1, [r4, #4]
    cc44:	eb000012 	bl	cc94 <CPageTable::CPageTable(unsigned int)>
    cc48:	e5845008 	str	r5, [r4, #8]
    cc4c:	e1a00004 	mov	r0, r4
    cc50:	ebffff99 	bl	cabc <CMemorySystem::EnableMMU()>
    cc54:	e28d0008 	add	r0, sp, #8
    cc58:	ebfff43b 	bl	9d4c <CBcmPropertyTags::~CBcmPropertyTags()>
    cc5c:	eaffffd8 	b	cbc4 <CMemorySystem::CMemorySystem(bool)+0x2c>
    cc60:	e3a01303 	mov	r1, #201326592	; 0xc000000
    cc64:	e58d0018 	str	r0, [sp, #24]
    cc68:	e58d101c 	str	r1, [sp, #28]
    cc6c:	eaffffeb 	b	cc20 <CMemorySystem::CMemorySystem(bool)+0x88>
    cc70:	e59d101c 	ldr	r1, [sp, #28]
    cc74:	eaffffe9 	b	cc20 <CMemorySystem::CMemorySystem(bool)+0x88>
    cc78:	00011348 	.word	0x00011348
    cc7c:	00010005 	.word	0x00010005
    cc80:	00010c84 	.word	0x00010c84
    cc84:	00010ce0 	.word	0x00010ce0

0000cc88 <CMemorySystem::GetCoherentPage(unsigned int)>:
    cc88:	e1a00600 	lsl	r0, r0, #12
    cc8c:	e2800501 	add	r0, r0, #4194304	; 0x400000
    cc90:	e12fff1e 	bx	lr

0000cc94 <CPageTable::CPageTable(unsigned int)>:
    cc94:	e3a02709 	mov	r2, #2359296	; 0x240000
    cc98:	e3a03000 	mov	r3, #0
    cc9c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    cca0:	e59fc074 	ldr	ip, [pc, #116]	; cd1c <CPageTable::CPageTable(unsigned int)+0x88>
    cca4:	e59f4074 	ldr	r4, [pc, #116]	; cd20 <CPageTable::CPageTable(unsigned int)+0x8c>
    cca8:	e59f5074 	ldr	r5, [pc, #116]	; cd24 <CPageTable::CPageTable(unsigned int)+0x90>
    ccac:	e59f9074 	ldr	r9, [pc, #116]	; cd28 <CPageTable::CPageTable(unsigned int)+0x94>
    ccb0:	e59f8074 	ldr	r8, [pc, #116]	; cd2c <CPageTable::CPageTable(unsigned int)+0x98>
    ccb4:	e59f7074 	ldr	r7, [pc, #116]	; cd30 <CPageTable::CPageTable(unsigned int)+0x9c>
    ccb8:	e59f6074 	ldr	r6, [pc, #116]	; cd34 <CPageTable::CPageTable(unsigned int)+0xa0>
    ccbc:	e59fe074 	ldr	lr, [pc, #116]	; cd38 <CPageTable::CPageTable(unsigned int)+0xa4>
    ccc0:	e5802000 	str	r2, [r0]
    ccc4:	e1530004 	cmp	r3, r4
    ccc8:	31a02005 	movcc	r2, r5
    cccc:	3a000007 	bcc	ccf0 <CPageTable::CPageTable(unsigned int)+0x5c>
    ccd0:	e3530501 	cmp	r3, #4194304	; 0x400000
    ccd4:	0a00000e 	beq	cd14 <CPageTable::CPageTable(unsigned int)+0x80>
    ccd8:	e1510003 	cmp	r1, r3
    ccdc:	81a02008 	movhi	r2, r8
    cce0:	8a000002 	bhi	ccf0 <CPageTable::CPageTable(unsigned int)+0x5c>
    cce4:	e1530007 	cmp	r3, r7
    cce8:	91a02006 	movls	r2, r6
    ccec:	83a02000 	movhi	r2, #0
    ccf0:	e1822003 	orr	r2, r2, r3
    ccf4:	e5ac2004 	str	r2, [ip, #4]!
    ccf8:	e15c000e 	cmp	ip, lr
    ccfc:	e2833601 	add	r3, r3, #1048576	; 0x100000
    cd00:	1affffef 	bne	ccc4 <CPageTable::CPageTable(unsigned int)+0x30>
    cd04:	e3a03000 	mov	r3, #0
    cd08:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
    cd0c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    cd10:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    cd14:	e1a02009 	mov	r2, r9
    cd18:	eafffff4 	b	ccf0 <CPageTable::CPageTable(unsigned int)+0x5c>
    cd1c:	0023fffc 	.word	0x0023fffc
    cd20:	00010364 	.word	0x00010364
    cd24:	0000040e 	.word	0x0000040e
    cd28:	00010412 	.word	0x00010412
    cd2c:	0000041e 	.word	0x0000041e
    cd30:	20fffffe 	.word	0x20fffffe
    cd34:	00010416 	.word	0x00010416
    cd38:	00243ffc 	.word	0x00243ffc

0000cd3c <CPageTable::~CPageTable()>:
    cd3c:	e12fff1e 	bx	lr

0000cd40 <CPageTable::GetBaseAddress() const>:
    cd40:	e5900000 	ldr	r0, [r0]
    cd44:	e3800001 	orr	r0, r0, #1
    cd48:	e12fff1e 	bx	lr

0000cd4c <CurrentExecutionLevel>:
    cd4c:	e10f0000 	mrs	r0, CPSR
    cd50:	e3100040 	tst	r0, #64	; 0x40
    cd54:	01a003a0 	lsreq	r0, r0, #7
    cd58:	02000001 	andeq	r0, r0, #1
    cd5c:	13a00002 	movne	r0, #2
    cd60:	e12fff1e 	bx	lr

0000cd64 <EnterCritical>:
    cd64:	e2403001 	sub	r3, r0, #1
    cd68:	e3530001 	cmp	r3, #1
    cd6c:	e92d4070 	push	{r4, r5, r6, lr}
    cd70:	e1a05000 	mov	r5, r0
    cd74:	9a000003 	bls	cd88 <EnterCritical+0x24>
    cd78:	e3a02064 	mov	r2, #100	; 0x64
    cd7c:	e59f1080 	ldr	r1, [pc, #128]	; ce04 <EnterCritical+0xa0>
    cd80:	e59f0080 	ldr	r0, [pc, #128]	; ce08 <EnterCritical+0xa4>
    cd84:	eb0001de 	bl	d504 <assertion_failed>
    cd88:	e10f6000 	mrs	r6, CPSR
    cd8c:	e3550002 	cmp	r5, #2
    cd90:	0a000001 	beq	cd9c <EnterCritical+0x38>
    cd94:	e3160040 	tst	r6, #64	; 0x40
    cd98:	1a000014 	bne	cdf0 <EnterCritical+0x8c>
    cd9c:	f10c00c0 	cpsid	if
    cda0:	e59f4064 	ldr	r4, [pc, #100]	; ce0c <EnterCritical+0xa8>
    cda4:	e5943000 	ldr	r3, [r4]
    cda8:	e3530013 	cmp	r3, #19
    cdac:	8a00000a 	bhi	cddc <EnterCritical+0x78>
    cdb0:	e5943000 	ldr	r3, [r4]
    cdb4:	e3550001 	cmp	r5, #1
    cdb8:	e2832001 	add	r2, r3, #1
    cdbc:	e0843103 	add	r3, r4, r3, lsl #2
    cdc0:	e5842000 	str	r2, [r4]
    cdc4:	e5836004 	str	r6, [r3, #4]
    cdc8:	1a000000 	bne	cdd0 <EnterCritical+0x6c>
    cdcc:	f1080040 	cpsie	f
    cdd0:	e3a03000 	mov	r3, #0
    cdd4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    cdd8:	e8bd8070 	pop	{r4, r5, r6, pc}
    cddc:	e3a0206e 	mov	r2, #110	; 0x6e
    cde0:	e59f101c 	ldr	r1, [pc, #28]	; ce04 <EnterCritical+0xa0>
    cde4:	e59f0024 	ldr	r0, [pc, #36]	; ce10 <EnterCritical+0xac>
    cde8:	eb0001c5 	bl	d504 <assertion_failed>
    cdec:	eaffffef 	b	cdb0 <EnterCritical+0x4c>
    cdf0:	e3a0206a 	mov	r2, #106	; 0x6a
    cdf4:	e59f1008 	ldr	r1, [pc, #8]	; ce04 <EnterCritical+0xa0>
    cdf8:	e59f0014 	ldr	r0, [pc, #20]	; ce14 <EnterCritical+0xb0>
    cdfc:	eb0001c0 	bl	d504 <assertion_failed>
    ce00:	eaffffe5 	b	cd9c <EnterCritical+0x38>
    ce04:	00010cfc 	.word	0x00010cfc
    ce08:	00010d0c 	.word	0x00010d0c
    ce0c:	0001134c 	.word	0x0001134c
    ce10:	00010d74 	.word	0x00010d74
    ce14:	00010d44 	.word	0x00010d44

0000ce18 <LeaveCritical>:
    ce18:	e92d4010 	push	{r4, lr}
    ce1c:	e3a03000 	mov	r3, #0
    ce20:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    ce24:	f10c0040 	cpsid	f
    ce28:	e59f4034 	ldr	r4, [pc, #52]	; ce64 <LeaveCritical+0x4c>
    ce2c:	e5943000 	ldr	r3, [r4]
    ce30:	e3530000 	cmp	r3, #0
    ce34:	1a000003 	bne	ce48 <LeaveCritical+0x30>
    ce38:	e3a0207f 	mov	r2, #127	; 0x7f
    ce3c:	e59f1024 	ldr	r1, [pc, #36]	; ce68 <LeaveCritical+0x50>
    ce40:	e59f0024 	ldr	r0, [pc, #36]	; ce6c <LeaveCritical+0x54>
    ce44:	eb0001ae 	bl	d504 <assertion_failed>
    ce48:	e5943000 	ldr	r3, [r4]
    ce4c:	e2433001 	sub	r3, r3, #1
    ce50:	e5843000 	str	r3, [r4]
    ce54:	e0844103 	add	r4, r4, r3, lsl #2
    ce58:	e5943004 	ldr	r3, [r4, #4]
    ce5c:	e121f003 	msr	CPSR_c, r3
    ce60:	e8bd8010 	pop	{r4, pc}
    ce64:	0001134c 	.word	0x0001134c
    ce68:	00010cfc 	.word	0x00010cfc
    ce6c:	00010d9c 	.word	0x00010d9c

0000ce70 <CleanAndInvalidateDataCacheRange>:
    ce70:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
    ce74:	e2813020 	add	r3, r1, #32
    ce78:	e353001f 	cmp	r3, #31
    ce7c:	82800020 	addhi	r0, r0, #32
    ce80:	83c1101f 	bichi	r1, r1, #31
    ce84:	80801001 	addhi	r1, r0, r1
    ce88:	8a000001 	bhi	ce94 <CleanAndInvalidateDataCacheRange+0x24>
    ce8c:	ea000003 	b	cea0 <CleanAndInvalidateDataCacheRange+0x30>
    ce90:	e2800020 	add	r0, r0, #32
    ce94:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
    ce98:	e1510000 	cmp	r1, r0
    ce9c:	1afffffb 	bne	ce90 <CleanAndInvalidateDataCacheRange+0x20>
    cea0:	e3a03000 	mov	r3, #0
    cea4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    cea8:	e12fff1e 	bx	lr

0000ceac <SyncDataAndInstructionCache>:
    ceac:	e3a03000 	mov	r3, #0
    ceb0:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
    ceb4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    ceb8:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
    cebc:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
    cec0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    cec4:	ee073f95 	mcr	15, 0, r3, cr7, cr5, {4}
    cec8:	e12fff1e 	bx	lr

0000cecc <operator new(unsigned int)>:
    cecc:	ea00001d 	b	cf48 <malloc>

0000ced0 <operator new[](unsigned int)>:
    ced0:	ea00001c 	b	cf48 <malloc>

0000ced4 <operator delete(void*)>:
    ced4:	ea000099 	b	d140 <free>

0000ced8 <operator delete[](void*)>:
    ced8:	ea000098 	b	d140 <free>

0000cedc <operator delete(void*, unsigned int)>:
    cedc:	ea000097 	b	d140 <free>

0000cee0 <operator delete[](void*, unsigned int)>:
    cee0:	ea000096 	b	d140 <free>

0000cee4 <mem_init>:
    cee4:	e3500605 	cmp	r0, #5242880	; 0x500000
    cee8:	21a0c000 	movcs	ip, r0
    ceec:	33a0c605 	movcc	ip, #5242880	; 0x500000
    cef0:	e0801001 	add	r1, r0, r1
    cef4:	e24139ff 	sub	r3, r1, #4177920	; 0x3fc000
    cef8:	e2433a03 	sub	r3, r3, #12288	; 0x3000
    cefc:	e59f2018 	ldr	r2, [pc, #24]	; cf1c <mem_init+0x38>
    cf00:	e3c33eff 	bic	r3, r3, #4080	; 0xff0
    cf04:	e2410501 	sub	r0, r1, #4194304	; 0x400000
    cf08:	e3c3300f 	bic	r3, r3, #15
    cf0c:	e582c000 	str	ip, [r2]
    cf10:	e582100c 	str	r1, [r2, #12]
    cf14:	e9820009 	stmib	r2, {r0, r3}
    cf18:	e12fff1e 	bx	lr
    cf1c:	000113a0 	.word	0x000113a0

0000cf20 <mem_get_size>:
    cf20:	e59f301c 	ldr	r3, [pc, #28]	; cf44 <mem_get_size+0x24>
    cf24:	e5930004 	ldr	r0, [r3, #4]
    cf28:	e5931000 	ldr	r1, [r3]
    cf2c:	e593200c 	ldr	r2, [r3, #12]
    cf30:	e5933008 	ldr	r3, [r3, #8]
    cf34:	e0400001 	sub	r0, r0, r1
    cf38:	e0423003 	sub	r3, r2, r3
    cf3c:	e0800003 	add	r0, r0, r3
    cf40:	e12fff1e 	bx	lr
    cf44:	000113a0 	.word	0x000113a0

0000cf48 <malloc>:
    cf48:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    cf4c:	e59f71c8 	ldr	r7, [pc, #456]	; d11c <malloc+0x1d4>
    cf50:	e1a05000 	mov	r5, r0
    cf54:	e5973000 	ldr	r3, [r7]
    cf58:	e3530000 	cmp	r3, #0
    cf5c:	0a000069 	beq	d108 <malloc+0x1c0>
    cf60:	e5970010 	ldr	r0, [r7, #16]
    cf64:	e3500000 	cmp	r0, #0
    cf68:	1a000057 	bne	d0cc <malloc+0x184>
    cf6c:	e59f21ac 	ldr	r2, [pc, #428]	; d120 <malloc+0x1d8>
    cf70:	e5923000 	ldr	r3, [r2]
    cf74:	e3530000 	cmp	r3, #0
    cf78:	0a000008 	beq	cfa0 <malloc+0x58>
    cf7c:	e1550003 	cmp	r5, r3
    cf80:	e1a04002 	mov	r4, r2
    cf84:	8a000002 	bhi	cf94 <malloc+0x4c>
    cf88:	ea000024 	b	d020 <malloc+0xd8>
    cf8c:	e1530005 	cmp	r3, r5
    cf90:	2a000022 	bcs	d020 <malloc+0xd8>
    cf94:	e5b43008 	ldr	r3, [r4, #8]!
    cf98:	e3530000 	cmp	r3, #0
    cf9c:	1afffffa 	bne	cf8c <malloc+0x44>
    cfa0:	e5976000 	ldr	r6, [r7]
    cfa4:	e285301f 	add	r3, r5, #31
    cfa8:	e3c3300f 	bic	r3, r3, #15
    cfac:	e0863003 	add	r3, r6, r3
    cfb0:	e1560003 	cmp	r6, r3
    cfb4:	2a000046 	bcs	d0d4 <malloc+0x18c>
    cfb8:	e5971004 	ldr	r1, [r7, #4]
    cfbc:	e5920040 	ldr	r0, [r2, #64]	; 0x40
    cfc0:	e0411000 	sub	r1, r1, r0
    cfc4:	e1530001 	cmp	r3, r1
    cfc8:	8a000041 	bhi	d0d4 <malloc+0x18c>
    cfcc:	e3a0e043 	mov	lr, #67	; 0x43
    cfd0:	e3a0c04d 	mov	ip, #77	; 0x4d
    cfd4:	e3a0004c 	mov	r0, #76	; 0x4c
    cfd8:	e3a01042 	mov	r1, #66	; 0x42
    cfdc:	e5873000 	str	r3, [r7]
    cfe0:	e1a03825 	lsr	r3, r5, #16
    cfe4:	e5c63006 	strb	r3, [r6, #6]
    cfe8:	e5973010 	ldr	r3, [r7, #16]
    cfec:	e1a02425 	lsr	r2, r5, #8
    cff0:	e5c65004 	strb	r5, [r6, #4]
    cff4:	e3530000 	cmp	r3, #0
    cff8:	e1a05c25 	lsr	r5, r5, #24
    cffc:	e5c6e000 	strb	lr, [r6]
    d000:	e5c6c001 	strb	ip, [r6, #1]
    d004:	e5c60002 	strb	r0, [r6, #2]
    d008:	e5c61003 	strb	r1, [r6, #3]
    d00c:	e5c62005 	strb	r2, [r6, #5]
    d010:	e5c65007 	strb	r5, [r6, #7]
    d014:	0a00001e 	beq	d094 <malloc+0x14c>
    d018:	ebffff7e 	bl	ce18 <LeaveCritical>
    d01c:	ea00001c 	b	d094 <malloc+0x14c>
    d020:	e5946004 	ldr	r6, [r4, #4]
    d024:	e3560000 	cmp	r6, #0
    d028:	01a05003 	moveq	r5, r3
    d02c:	0affffdb 	beq	cfa0 <malloc+0x58>
    d030:	e5d61001 	ldrb	r1, [r6, #1]
    d034:	e5d63000 	ldrb	r3, [r6]
    d038:	e5d62002 	ldrb	r2, [r6, #2]
    d03c:	e1833401 	orr	r3, r3, r1, lsl #8
    d040:	e5d61003 	ldrb	r1, [r6, #3]
    d044:	e1833802 	orr	r3, r3, r2, lsl #16
    d048:	e59f20d4 	ldr	r2, [pc, #212]	; d124 <malloc+0x1dc>
    d04c:	e1833c01 	orr	r3, r3, r1, lsl #24
    d050:	e1530002 	cmp	r3, r2
    d054:	0a000003 	beq	d068 <malloc+0x120>
    d058:	e3a0208a 	mov	r2, #138	; 0x8a
    d05c:	e59f10c4 	ldr	r1, [pc, #196]	; d128 <malloc+0x1e0>
    d060:	e59f00c4 	ldr	r0, [pc, #196]	; d12c <malloc+0x1e4>
    d064:	eb000126 	bl	d504 <assertion_failed>
    d068:	e5d62009 	ldrb	r2, [r6, #9]
    d06c:	e5d63008 	ldrb	r3, [r6, #8]
    d070:	e5d6100a 	ldrb	r1, [r6, #10]
    d074:	e1833402 	orr	r3, r3, r2, lsl #8
    d078:	e5d6200b 	ldrb	r2, [r6, #11]
    d07c:	e1833801 	orr	r3, r3, r1, lsl #16
    d080:	e1833c02 	orr	r3, r3, r2, lsl #24
    d084:	e5843004 	str	r3, [r4, #4]
    d088:	e5973010 	ldr	r3, [r7, #16]
    d08c:	e3530000 	cmp	r3, #0
    d090:	1affffe0 	bne	d018 <malloc+0xd0>
    d094:	e3a03000 	mov	r3, #0
    d098:	e2864010 	add	r4, r6, #16
    d09c:	e314000f 	tst	r4, #15
    d0a0:	e5c63008 	strb	r3, [r6, #8]
    d0a4:	e5c63009 	strb	r3, [r6, #9]
    d0a8:	e5c6300a 	strb	r3, [r6, #10]
    d0ac:	e5c6300b 	strb	r3, [r6, #11]
    d0b0:	0a000003 	beq	d0c4 <malloc+0x17c>
    d0b4:	e3a020b3 	mov	r2, #179	; 0xb3
    d0b8:	e59f1068 	ldr	r1, [pc, #104]	; d128 <malloc+0x1e0>
    d0bc:	e59f006c 	ldr	r0, [pc, #108]	; d130 <malloc+0x1e8>
    d0c0:	eb00010f 	bl	d504 <assertion_failed>
    d0c4:	e1a00004 	mov	r0, r4
    d0c8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    d0cc:	ebffff24 	bl	cd64 <EnterCritical>
    d0d0:	eaffffa5 	b	cf6c <malloc+0x24>
    d0d4:	e3a01000 	mov	r1, #0
    d0d8:	e5973010 	ldr	r3, [r7, #16]
    d0dc:	e5821040 	str	r1, [r2, #64]	; 0x40
    d0e0:	e1530001 	cmp	r3, r1
    d0e4:	0a000000 	beq	d0ec <malloc+0x1a4>
    d0e8:	ebffff4a 	bl	ce18 <LeaveCritical>
    d0ec:	eb000312 	bl	dd3c <CLogger::Get()>
    d0f0:	e59f303c 	ldr	r3, [pc, #60]	; d134 <malloc+0x1ec>
    d0f4:	e3a02000 	mov	r2, #0
    d0f8:	e59f1038 	ldr	r1, [pc, #56]	; d138 <malloc+0x1f0>
    d0fc:	eb0004b7 	bl	e3e0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    d100:	e3a04000 	mov	r4, #0
    d104:	eaffffee 	b	d0c4 <malloc+0x17c>
    d108:	e3a02070 	mov	r2, #112	; 0x70
    d10c:	e59f1014 	ldr	r1, [pc, #20]	; d128 <malloc+0x1e0>
    d110:	e59f0024 	ldr	r0, [pc, #36]	; d13c <malloc+0x1f4>
    d114:	eb0000fa 	bl	d504 <assertion_failed>
    d118:	eaffff90 	b	cf60 <malloc+0x18>
    d11c:	000113a0 	.word	0x000113a0
    d120:	000112cc 	.word	0x000112cc
    d124:	424c4d43 	.word	0x424c4d43
    d128:	00010db4 	.word	0x00010db4
    d12c:	00010dd4 	.word	0x00010dd4
    d130:	00010e10 	.word	0x00010e10
    d134:	00010df8 	.word	0x00010df8
    d138:	00010e08 	.word	0x00010e08
    d13c:	00010dc0 	.word	0x00010dc0

0000d140 <free>:
    d140:	e3500000 	cmp	r0, #0
    d144:	012fff1e 	bxeq	lr
    d148:	e92d4070 	push	{r4, r5, r6, lr}
    d14c:	e2405010 	sub	r5, r0, #16
    d150:	e5d51001 	ldrb	r1, [r5, #1]
    d154:	e5503010 	ldrb	r3, [r0, #-16]
    d158:	e5d52002 	ldrb	r2, [r5, #2]
    d15c:	e1833401 	orr	r3, r3, r1, lsl #8
    d160:	e5d51003 	ldrb	r1, [r5, #3]
    d164:	e1833802 	orr	r3, r3, r2, lsl #16
    d168:	e59f20dc 	ldr	r2, [pc, #220]	; d24c <free+0x10c>
    d16c:	e1833c01 	orr	r3, r3, r1, lsl #24
    d170:	e1530002 	cmp	r3, r2
    d174:	0a000003 	beq	d188 <free+0x48>
    d178:	e3a020c0 	mov	r2, #192	; 0xc0
    d17c:	e59f10cc 	ldr	r1, [pc, #204]	; d250 <free+0x110>
    d180:	e59f00cc 	ldr	r0, [pc, #204]	; d254 <free+0x114>
    d184:	eb0000de 	bl	d504 <assertion_failed>
    d188:	e59f40c8 	ldr	r4, [pc, #200]	; d258 <free+0x118>
    d18c:	e5943000 	ldr	r3, [r4]
    d190:	e3530000 	cmp	r3, #0
    d194:	08bd8070 	popeq	{r4, r5, r6, pc}
    d198:	e5d51005 	ldrb	r1, [r5, #5]
    d19c:	e5d52004 	ldrb	r2, [r5, #4]
    d1a0:	e5d50006 	ldrb	r0, [r5, #6]
    d1a4:	e1822401 	orr	r2, r2, r1, lsl #8
    d1a8:	e5d51007 	ldrb	r1, [r5, #7]
    d1ac:	e1822800 	orr	r2, r2, r0, lsl #16
    d1b0:	e1822c01 	orr	r2, r2, r1, lsl #24
    d1b4:	e1520003 	cmp	r2, r3
    d1b8:	1a000002 	bne	d1c8 <free+0x88>
    d1bc:	ea000005 	b	d1d8 <free+0x98>
    d1c0:	e1530002 	cmp	r3, r2
    d1c4:	0a000003 	beq	d1d8 <free+0x98>
    d1c8:	e5b43008 	ldr	r3, [r4, #8]!
    d1cc:	e3530000 	cmp	r3, #0
    d1d0:	1afffffa 	bne	d1c0 <free+0x80>
    d1d4:	e8bd8070 	pop	{r4, r5, r6, pc}
    d1d8:	e59f607c 	ldr	r6, [pc, #124]	; d25c <free+0x11c>
    d1dc:	e5960010 	ldr	r0, [r6, #16]
    d1e0:	e3500000 	cmp	r0, #0
    d1e4:	1a000009 	bne	d210 <free+0xd0>
    d1e8:	e5d40004 	ldrb	r0, [r4, #4]
    d1ec:	e5d41005 	ldrb	r1, [r4, #5]
    d1f0:	e5d42006 	ldrb	r2, [r4, #6]
    d1f4:	e5d43007 	ldrb	r3, [r4, #7]
    d1f8:	e5c50008 	strb	r0, [r5, #8]
    d1fc:	e5c51009 	strb	r1, [r5, #9]
    d200:	e5c5200a 	strb	r2, [r5, #10]
    d204:	e5c5300b 	strb	r3, [r5, #11]
    d208:	e5845004 	str	r5, [r4, #4]
    d20c:	e8bd8070 	pop	{r4, r5, r6, pc}
    d210:	ebfffed3 	bl	cd64 <EnterCritical>
    d214:	e596c010 	ldr	ip, [r6, #16]
    d218:	e5d40004 	ldrb	r0, [r4, #4]
    d21c:	e5d41005 	ldrb	r1, [r4, #5]
    d220:	e5d42006 	ldrb	r2, [r4, #6]
    d224:	e5d43007 	ldrb	r3, [r4, #7]
    d228:	e35c0000 	cmp	ip, #0
    d22c:	e5c50008 	strb	r0, [r5, #8]
    d230:	e5c51009 	strb	r1, [r5, #9]
    d234:	e5c5200a 	strb	r2, [r5, #10]
    d238:	e5c5300b 	strb	r3, [r5, #11]
    d23c:	e5845004 	str	r5, [r4, #4]
    d240:	08bd8070 	popeq	{r4, r5, r6, pc}
    d244:	e8bd4070 	pop	{r4, r5, r6, lr}
    d248:	eafffef2 	b	ce18 <LeaveCritical>
    d24c:	424c4d43 	.word	0x424c4d43
    d250:	00010db4 	.word	0x00010db4
    d254:	00010dd4 	.word	0x00010dd4
    d258:	000112cc 	.word	0x000112cc
    d25c:	000113a0 	.word	0x000113a0

0000d260 <calloc>:
    d260:	e92d4070 	push	{r4, r5, r6, lr}
    d264:	e0040190 	mul	r4, r0, r1
    d268:	e3540000 	cmp	r4, #0
    d26c:	03a04001 	moveq	r4, #1
    d270:	e1540000 	cmp	r4, r0
    d274:	3a000008 	bcc	d29c <calloc+0x3c>
    d278:	e1a00004 	mov	r0, r4
    d27c:	ebffff31 	bl	cf48 <malloc>
    d280:	e2505000 	subs	r5, r0, #0
    d284:	0a000002 	beq	d294 <calloc+0x34>
    d288:	e1a02004 	mov	r2, r4
    d28c:	e3a01000 	mov	r1, #0
    d290:	eb0009cb 	bl	f9c4 <memset>
    d294:	e1a00005 	mov	r0, r5
    d298:	e8bd8070 	pop	{r4, r5, r6, pc}
    d29c:	e3a020e2 	mov	r2, #226	; 0xe2
    d2a0:	e59f1008 	ldr	r1, [pc, #8]	; d2b0 <calloc+0x50>
    d2a4:	e59f0008 	ldr	r0, [pc, #8]	; d2b4 <calloc+0x54>
    d2a8:	eb000095 	bl	d504 <assertion_failed>
    d2ac:	eafffff1 	b	d278 <calloc+0x18>
    d2b0:	00010db4 	.word	0x00010db4
    d2b4:	00010e3c 	.word	0x00010e3c

0000d2b8 <realloc>:
    d2b8:	e92d4070 	push	{r4, r5, r6, lr}
    d2bc:	e2505000 	subs	r5, r0, #0
    d2c0:	e1a06001 	mov	r6, r1
    d2c4:	0a00002d 	beq	d380 <realloc+0xc8>
    d2c8:	e3510000 	cmp	r1, #0
    d2cc:	0a000027 	beq	d370 <realloc+0xb8>
    d2d0:	e2454010 	sub	r4, r5, #16
    d2d4:	e5d41001 	ldrb	r1, [r4, #1]
    d2d8:	e5553010 	ldrb	r3, [r5, #-16]
    d2dc:	e5d42002 	ldrb	r2, [r4, #2]
    d2e0:	e1833401 	orr	r3, r3, r1, lsl #8
    d2e4:	e5d41003 	ldrb	r1, [r4, #3]
    d2e8:	e1833802 	orr	r3, r3, r2, lsl #16
    d2ec:	e59f20a0 	ldr	r2, [pc, #160]	; d394 <realloc+0xdc>
    d2f0:	e1833c01 	orr	r3, r3, r1, lsl #24
    d2f4:	e1530002 	cmp	r3, r2
    d2f8:	0a000003 	beq	d30c <realloc+0x54>
    d2fc:	e3a020fc 	mov	r2, #252	; 0xfc
    d300:	e59f1090 	ldr	r1, [pc, #144]	; d398 <realloc+0xe0>
    d304:	e59f0090 	ldr	r0, [pc, #144]	; d39c <realloc+0xe4>
    d308:	eb00007d 	bl	d504 <assertion_failed>
    d30c:	e5d42005 	ldrb	r2, [r4, #5]
    d310:	e5d43004 	ldrb	r3, [r4, #4]
    d314:	e5d41006 	ldrb	r1, [r4, #6]
    d318:	e1833402 	orr	r3, r3, r2, lsl #8
    d31c:	e5d42007 	ldrb	r2, [r4, #7]
    d320:	e1833801 	orr	r3, r3, r1, lsl #16
    d324:	e1833c02 	orr	r3, r3, r2, lsl #24
    d328:	e1560003 	cmp	r6, r3
    d32c:	8a000001 	bhi	d338 <realloc+0x80>
    d330:	e1a00005 	mov	r0, r5
    d334:	e8bd8070 	pop	{r4, r5, r6, pc}
    d338:	e1a00006 	mov	r0, r6
    d33c:	ebffff01 	bl	cf48 <malloc>
    d340:	e2506000 	subs	r6, r0, #0
    d344:	0a000010 	beq	d38c <realloc+0xd4>
    d348:	e5d42005 	ldrb	r2, [r4, #5]
    d34c:	e5d43004 	ldrb	r3, [r4, #4]
    d350:	e5d41006 	ldrb	r1, [r4, #6]
    d354:	e1833402 	orr	r3, r3, r2, lsl #8
    d358:	e5d42007 	ldrb	r2, [r4, #7]
    d35c:	e1833801 	orr	r3, r3, r1, lsl #16
    d360:	e1832c02 	orr	r2, r3, r2, lsl #24
    d364:	e1a01005 	mov	r1, r5
    d368:	ebfffc8b 	bl	c59c <memcpy>
    d36c:	e1a00005 	mov	r0, r5
    d370:	e1a05006 	mov	r5, r6
    d374:	ebffff71 	bl	d140 <free>
    d378:	e1a00005 	mov	r0, r5
    d37c:	e8bd8070 	pop	{r4, r5, r6, pc}
    d380:	e1a00001 	mov	r0, r1
    d384:	e8bd4070 	pop	{r4, r5, r6, lr}
    d388:	eafffeee 	b	cf48 <malloc>
    d38c:	e1a05006 	mov	r5, r6
    d390:	eaffffe6 	b	d330 <realloc+0x78>
    d394:	424c4d43 	.word	0x424c4d43
    d398:	00010db4 	.word	0x00010db4
    d39c:	00010dd4 	.word	0x00010dd4

0000d3a0 <palloc>:
    d3a0:	e92d4070 	push	{r4, r5, r6, lr}
    d3a4:	e59f50c4 	ldr	r5, [pc, #196]	; d470 <palloc+0xd0>
    d3a8:	e5953008 	ldr	r3, [r5, #8]
    d3ac:	e3530000 	cmp	r3, #0
    d3b0:	0a000029 	beq	d45c <palloc+0xbc>
    d3b4:	e5950014 	ldr	r0, [r5, #20]
    d3b8:	e3500000 	cmp	r0, #0
    d3bc:	1a000016 	bne	d41c <palloc+0x7c>
    d3c0:	e5954018 	ldr	r4, [r5, #24]
    d3c4:	e3540000 	cmp	r4, #0
    d3c8:	0a000017 	beq	d42c <palloc+0x8c>
    d3cc:	e59f30a0 	ldr	r3, [pc, #160]	; d474 <palloc+0xd4>
    d3d0:	e5942000 	ldr	r2, [r4]
    d3d4:	e1520003 	cmp	r2, r3
    d3d8:	0a000003 	beq	d3ec <palloc+0x4c>
    d3dc:	e59f2094 	ldr	r2, [pc, #148]	; d478 <palloc+0xd8>
    d3e0:	e59f1094 	ldr	r1, [pc, #148]	; d47c <palloc+0xdc>
    d3e4:	e59f0094 	ldr	r0, [pc, #148]	; d480 <palloc+0xe0>
    d3e8:	eb000045 	bl	d504 <assertion_failed>
    d3ec:	e3a02000 	mov	r2, #0
    d3f0:	e5943004 	ldr	r3, [r4, #4]
    d3f4:	e5842000 	str	r2, [r4]
    d3f8:	e5853018 	str	r3, [r5, #24]
    d3fc:	e5953014 	ldr	r3, [r5, #20]
    d400:	e3530000 	cmp	r3, #0
    d404:	1a000001 	bne	d410 <palloc+0x70>
    d408:	e1a00004 	mov	r0, r4
    d40c:	e8bd8070 	pop	{r4, r5, r6, pc}
    d410:	ebfffe80 	bl	ce18 <LeaveCritical>
    d414:	e1a00004 	mov	r0, r4
    d418:	e8bd8070 	pop	{r4, r5, r6, pc}
    d41c:	ebfffe50 	bl	cd64 <EnterCritical>
    d420:	e5954018 	ldr	r4, [r5, #24]
    d424:	e3540000 	cmp	r4, #0
    d428:	1affffe7 	bne	d3cc <palloc+0x2c>
    d42c:	e5954008 	ldr	r4, [r5, #8]
    d430:	e595200c 	ldr	r2, [r5, #12]
    d434:	e2843a01 	add	r3, r4, #4096	; 0x1000
    d438:	e1530002 	cmp	r3, r2
    d43c:	e5853008 	str	r3, [r5, #8]
    d440:	9affffed 	bls	d3fc <palloc+0x5c>
    d444:	e5954014 	ldr	r4, [r5, #20]
    d448:	e3540000 	cmp	r4, #0
    d44c:	0affffed 	beq	d408 <palloc+0x68>
    d450:	ebfffe70 	bl	ce18 <LeaveCritical>
    d454:	e3a00000 	mov	r0, #0
    d458:	e8bd8070 	pop	{r4, r5, r6, pc}
    d45c:	e59f2020 	ldr	r2, [pc, #32]	; d484 <palloc+0xe4>
    d460:	e59f1014 	ldr	r1, [pc, #20]	; d47c <palloc+0xdc>
    d464:	e59f001c 	ldr	r0, [pc, #28]	; d488 <palloc+0xe8>
    d468:	eb000025 	bl	d504 <assertion_failed>
    d46c:	eaffffd0 	b	d3b4 <palloc+0x14>
    d470:	000113a0 	.word	0x000113a0
    d474:	50474d43 	.word	0x50474d43
    d478:	0000011f 	.word	0x0000011f
    d47c:	00010db4 	.word	0x00010db4
    d480:	00010e64 	.word	0x00010e64
    d484:	00000111 	.word	0x00000111
    d488:	00010e50 	.word	0x00010e50

0000d48c <pfree>:
    d48c:	e92d4070 	push	{r4, r5, r6, lr}
    d490:	e2504000 	subs	r4, r0, #0
    d494:	08bd8070 	popeq	{r4, r5, r6, pc}
    d498:	e59f5044 	ldr	r5, [pc, #68]	; d4e4 <pfree+0x58>
    d49c:	e5950014 	ldr	r0, [r5, #20]
    d4a0:	e3500000 	cmp	r0, #0
    d4a4:	1a000004 	bne	d4bc <pfree+0x30>
    d4a8:	e5952018 	ldr	r2, [r5, #24]
    d4ac:	e59f1034 	ldr	r1, [pc, #52]	; d4e8 <pfree+0x5c>
    d4b0:	e5854018 	str	r4, [r5, #24]
    d4b4:	e8840006 	stm	r4, {r1, r2}
    d4b8:	e8bd8070 	pop	{r4, r5, r6, pc}
    d4bc:	ebfffe28 	bl	cd64 <EnterCritical>
    d4c0:	e5951014 	ldr	r1, [r5, #20]
    d4c4:	e5953018 	ldr	r3, [r5, #24]
    d4c8:	e59f2018 	ldr	r2, [pc, #24]	; d4e8 <pfree+0x5c>
    d4cc:	e3510000 	cmp	r1, #0
    d4d0:	e884000c 	stm	r4, {r2, r3}
    d4d4:	e5854018 	str	r4, [r5, #24]
    d4d8:	08bd8070 	popeq	{r4, r5, r6, pc}
    d4dc:	e8bd4070 	pop	{r4, r5, r6, lr}
    d4e0:	eafffe4c 	b	ce18 <LeaveCritical>
    d4e4:	000113a0 	.word	0x000113a0
    d4e8:	50474d43 	.word	0x50474d43

0000d4ec <_GLOBAL__sub_I_mem_init>:
    d4ec:	e3a02001 	mov	r2, #1
    d4f0:	e59f3008 	ldr	r3, [pc, #8]	; d500 <_GLOBAL__sub_I_mem_init+0x14>
    d4f4:	e5832010 	str	r2, [r3, #16]
    d4f8:	e5832014 	str	r2, [r3, #20]
    d4fc:	e12fff1e 	bx	lr
    d500:	000113a0 	.word	0x000113a0

0000d504 <assertion_failed>:
    d504:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    d508:	e1a05000 	mov	r5, r0
    d50c:	e24dd01c 	sub	sp, sp, #28
    d510:	e1a06001 	mov	r6, r1
    d514:	e1a07002 	mov	r7, r2
    d518:	e1a0400d 	mov	r4, sp
    d51c:	ebfff706 	bl	b13c <CInterruptSystem::DisableFIQ()>
    d520:	f1080040 	cpsie	f
    d524:	e28d0008 	add	r0, sp, #8
    d528:	eb00052b 	bl	e9dc <CString::CString()>
    d52c:	e1a03007 	mov	r3, r7
    d530:	e1a02006 	mov	r2, r6
    d534:	e28d0008 	add	r0, sp, #8
    d538:	e59f104c 	ldr	r1, [pc, #76]	; d58c <assertion_failed+0x88>
    d53c:	eb000914 	bl	f994 <CString::Format(char const*, ...)>
    d540:	e28d0008 	add	r0, sp, #8
    d544:	eb00053a 	bl	ea34 <CString::operator char const*() const>
    d548:	e1a01000 	mov	r1, r0
    d54c:	e1a00004 	mov	r0, r4
    d550:	eb0000b9 	bl	d83c <debug_stacktrace(unsigned int const*, char const*)>
    d554:	eb0001f8 	bl	dd3c <CLogger::Get()>
    d558:	e1a04000 	mov	r4, r0
    d55c:	e28d0008 	add	r0, sp, #8
    d560:	eb000533 	bl	ea34 <CString::operator char const*() const>
    d564:	e59f3024 	ldr	r3, [pc, #36]	; d590 <assertion_failed+0x8c>
    d568:	e1a01000 	mov	r1, r0
    d56c:	e3a02000 	mov	r2, #0
    d570:	e1a00004 	mov	r0, r4
    d574:	e58d5000 	str	r5, [sp]
    d578:	eb000398 	bl	e3e0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    d57c:	e28d0008 	add	r0, sp, #8
    d580:	eb0004e2 	bl	e910 <CString::~CString()>
    d584:	e28dd01c 	add	sp, sp, #28
    d588:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    d58c:	00010e88 	.word	0x00010e88
    d590:	00010e90 	.word	0x00010e90

0000d594 <CBcmMailBox::CBcmMailBox(unsigned int)>:
    d594:	e5801000 	str	r1, [r0]
    d598:	e12fff1e 	bx	lr

0000d59c <CBcmMailBox::~CBcmMailBox()>:
    d59c:	e12fff1e 	bx	lr

0000d5a0 <CBcmMailBox::Flush()>:
    d5a0:	e92d4070 	push	{r4, r5, r6, lr}
    d5a4:	e59f4028 	ldr	r4, [pc, #40]	; d5d4 <CBcmMailBox::Flush()+0x34>
    d5a8:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
    d5ac:	e3130101 	tst	r3, #1073741824	; 0x40000000
    d5b0:	18bd8070 	popne	{r4, r5, r6, pc}
    d5b4:	e3a05014 	mov	r5, #20
    d5b8:	e1a00005 	mov	r0, r5
    d5bc:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
    d5c0:	ebfffbad 	bl	c47c <CTimer::SimpleMsDelay(unsigned int)>
    d5c4:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
    d5c8:	e3130101 	tst	r3, #1073741824	; 0x40000000
    d5cc:	0afffff9 	beq	d5b8 <CBcmMailBox::Flush()+0x18>
    d5d0:	e8bd8070 	pop	{r4, r5, r6, pc}
    d5d4:	2000b000 	.word	0x2000b000

0000d5d8 <CBcmMailBox::Read()>:
    d5d8:	e5901000 	ldr	r1, [r0]
    d5dc:	e59f2020 	ldr	r2, [pc, #32]	; d604 <CBcmMailBox::Read()+0x2c>
    d5e0:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
    d5e4:	e3130101 	tst	r3, #1073741824	; 0x40000000
    d5e8:	1afffffc 	bne	d5e0 <CBcmMailBox::Read()+0x8>
    d5ec:	e5920880 	ldr	r0, [r2, #2176]	; 0x880
    d5f0:	e200300f 	and	r3, r0, #15
    d5f4:	e1510003 	cmp	r1, r3
    d5f8:	1afffff8 	bne	d5e0 <CBcmMailBox::Read()+0x8>
    d5fc:	e3c0000f 	bic	r0, r0, #15
    d600:	e12fff1e 	bx	lr
    d604:	2000b000 	.word	0x2000b000

0000d608 <CBcmMailBox::Write(unsigned int)>:
    d608:	e92d4070 	push	{r4, r5, r6, lr}
    d60c:	e1a05000 	mov	r5, r0
    d610:	e1a04001 	mov	r4, r1
    d614:	e59f2034 	ldr	r2, [pc, #52]	; d650 <CBcmMailBox::Write(unsigned int)+0x48>
    d618:	e59238b8 	ldr	r3, [r2, #2232]	; 0x8b8
    d61c:	e3530000 	cmp	r3, #0
    d620:	bafffffc 	blt	d618 <CBcmMailBox::Write(unsigned int)+0x10>
    d624:	e314000f 	tst	r4, #15
    d628:	0a000003 	beq	d63c <CBcmMailBox::Write(unsigned int)+0x34>
    d62c:	e3a0205b 	mov	r2, #91	; 0x5b
    d630:	e59f101c 	ldr	r1, [pc, #28]	; d654 <CBcmMailBox::Write(unsigned int)+0x4c>
    d634:	e59f001c 	ldr	r0, [pc, #28]	; d658 <CBcmMailBox::Write(unsigned int)+0x50>
    d638:	ebffffb1 	bl	d504 <assertion_failed>
    d63c:	e5952000 	ldr	r2, [r5]
    d640:	e59f3008 	ldr	r3, [pc, #8]	; d650 <CBcmMailBox::Write(unsigned int)+0x48>
    d644:	e1844002 	orr	r4, r4, r2
    d648:	e58348a0 	str	r4, [r3, #2208]	; 0x8a0
    d64c:	e8bd8070 	pop	{r4, r5, r6, pc}
    d650:	2000b000 	.word	0x2000b000
    d654:	00010ea8 	.word	0x00010ea8
    d658:	00010eb8 	.word	0x00010eb8

0000d65c <CBcmMailBox::WriteRead(unsigned int)>:
    d65c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d660:	e3a03000 	mov	r3, #0
    d664:	e1a07000 	mov	r7, r0
    d668:	e1a08001 	mov	r8, r1
    d66c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    d670:	e59f5090 	ldr	r5, [pc, #144]	; d708 <CBcmMailBox::WriteRead(unsigned int)+0xac>
    d674:	e5950000 	ldr	r0, [r5]
    d678:	e1500003 	cmp	r0, r3
    d67c:	1a00001f 	bne	d700 <CBcmMailBox::WriteRead(unsigned int)+0xa4>
    d680:	e59f4084 	ldr	r4, [pc, #132]	; d70c <CBcmMailBox::WriteRead(unsigned int)+0xb0>
    d684:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
    d688:	e3130101 	tst	r3, #1073741824	; 0x40000000
    d68c:	1a000006 	bne	d6ac <CBcmMailBox::WriteRead(unsigned int)+0x50>
    d690:	e3a06014 	mov	r6, #20
    d694:	e1a00006 	mov	r0, r6
    d698:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
    d69c:	ebfffb76 	bl	c47c <CTimer::SimpleMsDelay(unsigned int)>
    d6a0:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
    d6a4:	e3130101 	tst	r3, #1073741824	; 0x40000000
    d6a8:	0afffff9 	beq	d694 <CBcmMailBox::WriteRead(unsigned int)+0x38>
    d6ac:	e1a00007 	mov	r0, r7
    d6b0:	e1a01008 	mov	r1, r8
    d6b4:	ebffffd3 	bl	d608 <CBcmMailBox::Write(unsigned int)>
    d6b8:	e5970000 	ldr	r0, [r7]
    d6bc:	e59f2048 	ldr	r2, [pc, #72]	; d70c <CBcmMailBox::WriteRead(unsigned int)+0xb0>
    d6c0:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
    d6c4:	e3130101 	tst	r3, #1073741824	; 0x40000000
    d6c8:	1afffffc 	bne	d6c0 <CBcmMailBox::WriteRead(unsigned int)+0x64>
    d6cc:	e5923880 	ldr	r3, [r2, #2176]	; 0x880
    d6d0:	e203100f 	and	r1, r3, #15
    d6d4:	e1510000 	cmp	r1, r0
    d6d8:	1afffff8 	bne	d6c0 <CBcmMailBox::WriteRead(unsigned int)+0x64>
    d6dc:	e5952000 	ldr	r2, [r5]
    d6e0:	e3c3400f 	bic	r4, r3, #15
    d6e4:	e3520000 	cmp	r2, #0
    d6e8:	0a000000 	beq	d6f0 <CBcmMailBox::WriteRead(unsigned int)+0x94>
    d6ec:	ebfffdc9 	bl	ce18 <LeaveCritical>
    d6f0:	e3a03000 	mov	r3, #0
    d6f4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    d6f8:	e1a00004 	mov	r0, r4
    d6fc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    d700:	ebfffd97 	bl	cd64 <EnterCritical>
    d704:	eaffffdd 	b	d680 <CBcmMailBox::WriteRead(unsigned int)+0x24>
    d708:	000113bc 	.word	0x000113bc
    d70c:	2000b000 	.word	0x2000b000

0000d710 <_GLOBAL__sub_I__ZN11CBcmMailBox10s_SpinLockE>:
    d710:	e3a02000 	mov	r2, #0
    d714:	e59f3004 	ldr	r3, [pc, #4]	; d720 <_GLOBAL__sub_I__ZN11CBcmMailBox10s_SpinLockE+0x10>
    d718:	e5832000 	str	r2, [r3]
    d71c:	e12fff1e 	bx	lr
    d720:	000113bc 	.word	0x000113bc

0000d724 <debug_hexdump(void const*, unsigned int, char const*)>:
    d724:	e3520000 	cmp	r2, #0
    d728:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d72c:	e1a05001 	mov	r5, r1
    d730:	e59f60f4 	ldr	r6, [pc, #244]	; d82c <debug_hexdump(void const*, unsigned int, char const*)+0x108>
    d734:	e1a04000 	mov	r4, r0
    d738:	11a06002 	movne	r6, r2
    d73c:	e24dd04c 	sub	sp, sp, #76	; 0x4c
    d740:	eb00017d 	bl	dd3c <CLogger::Get()>
    d744:	e58d4004 	str	r4, [sp, #4]
    d748:	e58d5000 	str	r5, [sp]
    d74c:	e1a01006 	mov	r1, r6
    d750:	e59f30d8 	ldr	r3, [pc, #216]	; d830 <debug_hexdump(void const*, unsigned int, char const*)+0x10c>
    d754:	e3a02004 	mov	r2, #4
    d758:	eb000320 	bl	e3e0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    d75c:	e3550000 	cmp	r5, #0
    d760:	0a00002b 	beq	d814 <debug_hexdump(void const*, unsigned int, char const*)+0xf0>
    d764:	e3a09004 	mov	r9, #4
    d768:	e59f80c4 	ldr	r8, [pc, #196]	; d834 <debug_hexdump(void const*, unsigned int, char const*)+0x110>
    d76c:	e59f70c4 	ldr	r7, [pc, #196]	; d838 <debug_hexdump(void const*, unsigned int, char const*)+0x114>
    d770:	eb000171 	bl	dd3c <CLogger::Get()>
    d774:	e5d4a00f 	ldrb	sl, [r4, #15]
    d778:	e5d4e00e 	ldrb	lr, [r4, #14]
    d77c:	e5d4c00d 	ldrb	ip, [r4, #13]
    d780:	e5d4300c 	ldrb	r3, [r4, #12]
    d784:	e5d4200b 	ldrb	r2, [r4, #11]
    d788:	e5d4100a 	ldrb	r1, [r4, #10]
    d78c:	e5d4b009 	ldrb	fp, [r4, #9]
    d790:	e58da040 	str	sl, [sp, #64]	; 0x40
    d794:	e5d4a008 	ldrb	sl, [r4, #8]
    d798:	e58de03c 	str	lr, [sp, #60]	; 0x3c
    d79c:	e5d4e007 	ldrb	lr, [r4, #7]
    d7a0:	e58dc038 	str	ip, [sp, #56]	; 0x38
    d7a4:	e5d4c006 	ldrb	ip, [r4, #6]
    d7a8:	e58d3034 	str	r3, [sp, #52]	; 0x34
    d7ac:	e5d43005 	ldrb	r3, [r4, #5]
    d7b0:	e58d2030 	str	r2, [sp, #48]	; 0x30
    d7b4:	e5d42004 	ldrb	r2, [r4, #4]
    d7b8:	e58d102c 	str	r1, [sp, #44]	; 0x2c
    d7bc:	e5d41003 	ldrb	r1, [r4, #3]
    d7c0:	e58db028 	str	fp, [sp, #40]	; 0x28
    d7c4:	e5d4b002 	ldrb	fp, [r4, #2]
    d7c8:	e58da024 	str	sl, [sp, #36]	; 0x24
    d7cc:	e5d4a001 	ldrb	sl, [r4, #1]
    d7d0:	e58de020 	str	lr, [sp, #32]
    d7d4:	e5d4e000 	ldrb	lr, [r4]
    d7d8:	e58dc01c 	str	ip, [sp, #28]
    d7dc:	e58d3018 	str	r3, [sp, #24]
    d7e0:	e004c008 	and	ip, r4, r8
    d7e4:	e58d2014 	str	r2, [sp, #20]
    d7e8:	e58d1010 	str	r1, [sp, #16]
    d7ec:	e1a03007 	mov	r3, r7
    d7f0:	e1a02009 	mov	r2, r9
    d7f4:	e1a01006 	mov	r1, r6
    d7f8:	e58db00c 	str	fp, [sp, #12]
    d7fc:	e58da008 	str	sl, [sp, #8]
    d800:	e88d5000 	stm	sp, {ip, lr}
    d804:	eb0002f5 	bl	e3e0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    d808:	e355000f 	cmp	r5, #15
    d80c:	e2844010 	add	r4, r4, #16
    d810:	8a000001 	bhi	d81c <debug_hexdump(void const*, unsigned int, char const*)+0xf8>
    d814:	e28dd04c 	add	sp, sp, #76	; 0x4c
    d818:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d81c:	e2555010 	subs	r5, r5, #16
    d820:	1affffd2 	bne	d770 <debug_hexdump(void const*, unsigned int, char const*)+0x4c>
    d824:	e28dd04c 	add	sp, sp, #76	; 0x4c
    d828:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d82c:	00010ecc 	.word	0x00010ecc
    d830:	00010ed4 	.word	0x00010ed4
    d834:	0000ffff 	.word	0x0000ffff
    d838:	00010efc 	.word	0x00010efc

0000d83c <debug_stacktrace(unsigned int const*, char const*)>:
    d83c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    d840:	e3510000 	cmp	r1, #0
    d844:	e59f8084 	ldr	r8, [pc, #132]	; d8d0 <debug_stacktrace(unsigned int const*, char const*)+0x94>
    d848:	e24dd008 	sub	sp, sp, #8
    d84c:	e1a05000 	mov	r5, r0
    d850:	11a08001 	movne	r8, r1
    d854:	e3a04000 	mov	r4, #0
    d858:	e3a0a004 	mov	sl, #4
    d85c:	e59f6070 	ldr	r6, [pc, #112]	; d8d4 <debug_stacktrace(unsigned int const*, char const*)+0x98>
    d860:	e59f7070 	ldr	r7, [pc, #112]	; d8d8 <debug_stacktrace(unsigned int const*, char const*)+0x9c>
    d864:	e59f9070 	ldr	r9, [pc, #112]	; d8dc <debug_stacktrace(unsigned int const*, char const*)+0xa0>
    d868:	ea000003 	b	d87c <debug_stacktrace(unsigned int const*, char const*)+0x40>
    d86c:	e2844001 	add	r4, r4, #1
    d870:	e3540040 	cmp	r4, #64	; 0x40
    d874:	e2855004 	add	r5, r5, #4
    d878:	0a000012 	beq	d8c8 <debug_stacktrace(unsigned int const*, char const*)+0x8c>
    d87c:	e5953000 	ldr	r3, [r5]
    d880:	e1530006 	cmp	r3, r6
    d884:	9afffff8 	bls	d86c <debug_stacktrace(unsigned int const*, char const*)+0x30>
    d888:	e1530007 	cmp	r3, r7
    d88c:	2afffff6 	bcs	d86c <debug_stacktrace(unsigned int const*, char const*)+0x30>
    d890:	e3130003 	tst	r3, #3
    d894:	1afffff4 	bne	d86c <debug_stacktrace(unsigned int const*, char const*)+0x30>
    d898:	eb000127 	bl	dd3c <CLogger::Get()>
    d89c:	e5953000 	ldr	r3, [r5]
    d8a0:	e1a0200a 	mov	r2, sl
    d8a4:	e58d4000 	str	r4, [sp]
    d8a8:	e58d3004 	str	r3, [sp, #4]
    d8ac:	e1a01008 	mov	r1, r8
    d8b0:	e1a03009 	mov	r3, r9
    d8b4:	e2844001 	add	r4, r4, #1
    d8b8:	eb0002c8 	bl	e3e0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    d8bc:	e3540040 	cmp	r4, #64	; 0x40
    d8c0:	e2855004 	add	r5, r5, #4
    d8c4:	1affffec 	bne	d87c <debug_stacktrace(unsigned int const*, char const*)+0x40>
    d8c8:	e28dd008 	add	sp, sp, #8
    d8cc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    d8d0:	00010ecc 	.word	0x00010ecc
    d8d4:	00007fff 	.word	0x00007fff
    d8d8:	00010364 	.word	0x00010364
    d8dc:	00010f54 	.word	0x00010f54

0000d8e0 <DelayLoop>:
    d8e0:	e2500001 	subs	r0, r0, #1
    d8e4:	8afffffd 	bhi	d8e0 <DelayLoop>
    d8e8:	e1a0f00e 	mov	pc, lr

0000d8ec <CGPIOManager::CGPIOManager(CInterruptSystem*)>:
    d8ec:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    d8f0:	e3a0e000 	mov	lr, #0
    d8f4:	e1a03000 	mov	r3, r0
    d8f8:	e1a0c00e 	mov	ip, lr
    d8fc:	e5801000 	str	r1, [r0]
    d900:	e28020dc 	add	r2, r0, #220	; 0xdc
    d904:	e5e3e004 	strb	lr, [r3, #4]!
    d908:	e5a3c004 	str	ip, [r3, #4]!
    d90c:	e1530002 	cmp	r3, r2
    d910:	1afffffc 	bne	d908 <CGPIOManager::CGPIOManager(CInterruptSystem*)+0x1c>
    d914:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000d918 <CGPIOManager::~CGPIOManager()>:
    d918:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    d91c:	e1a09000 	mov	r9, r0
    d920:	e3a0802c 	mov	r8, #44	; 0x2c
    d924:	e59f706c 	ldr	r7, [pc, #108]	; d998 <CGPIOManager::~CGPIOManager()+0x80>
    d928:	e59f606c 	ldr	r6, [pc, #108]	; d99c <CGPIOManager::~CGPIOManager()+0x84>
    d92c:	e2804004 	add	r4, r0, #4
    d930:	e28050dc 	add	r5, r0, #220	; 0xdc
    d934:	e5b43004 	ldr	r3, [r4, #4]!
    d938:	e3530000 	cmp	r3, #0
    d93c:	0a000003 	beq	d950 <CGPIOManager::~CGPIOManager()+0x38>
    d940:	e1a02008 	mov	r2, r8
    d944:	e1a01007 	mov	r1, r7
    d948:	e1a00006 	mov	r0, r6
    d94c:	ebfffeec 	bl	d504 <assertion_failed>
    d950:	e1540005 	cmp	r4, r5
    d954:	1afffff6 	bne	d934 <CGPIOManager::~CGPIOManager()+0x1c>
    d958:	e5d93004 	ldrb	r3, [r9, #4]
    d95c:	e3530000 	cmp	r3, #0
    d960:	0a000004 	beq	d978 <CGPIOManager::~CGPIOManager()+0x60>
    d964:	e5990000 	ldr	r0, [r9]
    d968:	e3500000 	cmp	r0, #0
    d96c:	0a000003 	beq	d980 <CGPIOManager::~CGPIOManager()+0x68>
    d970:	e3a01034 	mov	r1, #52	; 0x34
    d974:	ebfff589 	bl	afa0 <CInterruptSystem::DisconnectIRQ(unsigned int)>
    d978:	e1a00009 	mov	r0, r9
    d97c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    d980:	e59f0018 	ldr	r0, [pc, #24]	; d9a0 <CGPIOManager::~CGPIOManager()+0x88>
    d984:	e3a02032 	mov	r2, #50	; 0x32
    d988:	e59f1008 	ldr	r1, [pc, #8]	; d998 <CGPIOManager::~CGPIOManager()+0x80>
    d98c:	ebfffedc 	bl	d504 <assertion_failed>
    d990:	e5990000 	ldr	r0, [r9]
    d994:	eafffff5 	b	d970 <CGPIOManager::~CGPIOManager()+0x58>
    d998:	00010f68 	.word	0x00010f68
    d99c:	00010f78 	.word	0x00010f78
    d9a0:	00010f8c 	.word	0x00010f8c

0000d9a4 <CGPIOManager::Initialize()>:
    d9a4:	e5d03004 	ldrb	r3, [r0, #4]
    d9a8:	e92d4010 	push	{r4, lr}
    d9ac:	e3530000 	cmp	r3, #0
    d9b0:	e1a04000 	mov	r4, r0
    d9b4:	1a000009 	bne	d9e0 <CGPIOManager::Initialize()+0x3c>
    d9b8:	e5940000 	ldr	r0, [r4]
    d9bc:	e3500000 	cmp	r0, #0
    d9c0:	0a00000d 	beq	d9fc <CGPIOManager::Initialize()+0x58>
    d9c4:	e1a03004 	mov	r3, r4
    d9c8:	e59f2044 	ldr	r2, [pc, #68]	; da14 <CGPIOManager::Initialize()+0x70>
    d9cc:	e3a01034 	mov	r1, #52	; 0x34
    d9d0:	ebfff537 	bl	aeb4 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    d9d4:	e3a00001 	mov	r0, #1
    d9d8:	e5c40004 	strb	r0, [r4, #4]
    d9dc:	e8bd8010 	pop	{r4, pc}
    d9e0:	e59f0030 	ldr	r0, [pc, #48]	; da18 <CGPIOManager::Initialize()+0x74>
    d9e4:	e3a0203b 	mov	r2, #59	; 0x3b
    d9e8:	e59f102c 	ldr	r1, [pc, #44]	; da1c <CGPIOManager::Initialize()+0x78>
    d9ec:	ebfffec4 	bl	d504 <assertion_failed>
    d9f0:	e5940000 	ldr	r0, [r4]
    d9f4:	e3500000 	cmp	r0, #0
    d9f8:	1afffff1 	bne	d9c4 <CGPIOManager::Initialize()+0x20>
    d9fc:	e59f001c 	ldr	r0, [pc, #28]	; da20 <CGPIOManager::Initialize()+0x7c>
    da00:	e3a0203c 	mov	r2, #60	; 0x3c
    da04:	e59f1010 	ldr	r1, [pc, #16]	; da1c <CGPIOManager::Initialize()+0x78>
    da08:	ebfffebd 	bl	d504 <assertion_failed>
    da0c:	e5940000 	ldr	r0, [r4]
    da10:	eaffffeb 	b	d9c4 <CGPIOManager::Initialize()+0x20>
    da14:	0000dc34 	.word	0x0000dc34
    da18:	00010fa0 	.word	0x00010fa0
    da1c:	00010f68 	.word	0x00010f68
    da20:	00010f8c 	.word	0x00010f8c

0000da24 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>:
    da24:	e5d03004 	ldrb	r3, [r0, #4]
    da28:	e92d4070 	push	{r4, r5, r6, lr}
    da2c:	e3530000 	cmp	r3, #0
    da30:	e1a04000 	mov	r4, r0
    da34:	e1a05001 	mov	r5, r1
    da38:	0a00000e 	beq	da78 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x54>
    da3c:	e3550000 	cmp	r5, #0
    da40:	0a000016 	beq	daa0 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x7c>
    da44:	e5956004 	ldr	r6, [r5, #4]
    da48:	e3560035 	cmp	r6, #53	; 0x35
    da4c:	8a00000e 	bhi	da8c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x68>
    da50:	e0844106 	add	r4, r4, r6, lsl #2
    da54:	e5943008 	ldr	r3, [r4, #8]
    da58:	e3530000 	cmp	r3, #0
    da5c:	0a000003 	beq	da70 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x4c>
    da60:	e3a0204b 	mov	r2, #75	; 0x4b
    da64:	e59f1048 	ldr	r1, [pc, #72]	; dab4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x90>
    da68:	e59f0048 	ldr	r0, [pc, #72]	; dab8 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x94>
    da6c:	ebfffea4 	bl	d504 <assertion_failed>
    da70:	e5845008 	str	r5, [r4, #8]
    da74:	e8bd8070 	pop	{r4, r5, r6, pc}
    da78:	e3a02045 	mov	r2, #69	; 0x45
    da7c:	e59f1030 	ldr	r1, [pc, #48]	; dab4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x90>
    da80:	e59f0034 	ldr	r0, [pc, #52]	; dabc <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x98>
    da84:	ebfffe9e 	bl	d504 <assertion_failed>
    da88:	eaffffeb 	b	da3c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x18>
    da8c:	e3a02049 	mov	r2, #73	; 0x49
    da90:	e59f101c 	ldr	r1, [pc, #28]	; dab4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x90>
    da94:	e59f0024 	ldr	r0, [pc, #36]	; dac0 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x9c>
    da98:	ebfffe99 	bl	d504 <assertion_failed>
    da9c:	eaffffeb 	b	da50 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x2c>
    daa0:	e3a02047 	mov	r2, #71	; 0x47
    daa4:	e59f1008 	ldr	r1, [pc, #8]	; dab4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x90>
    daa8:	e59f0014 	ldr	r0, [pc, #20]	; dac4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0xa0>
    daac:	ebfffe94 	bl	d504 <assertion_failed>
    dab0:	eaffffe3 	b	da44 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x20>
    dab4:	00010f68 	.word	0x00010f68
    dab8:	00010f78 	.word	0x00010f78
    dabc:	00010fb4 	.word	0x00010fb4
    dac0:	000106c8 	.word	0x000106c8
    dac4:	00010fc4 	.word	0x00010fc4

0000dac8 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>:
    dac8:	e5d03004 	ldrb	r3, [r0, #4]
    dacc:	e92d4070 	push	{r4, r5, r6, lr}
    dad0:	e3530000 	cmp	r3, #0
    dad4:	e1a04000 	mov	r4, r0
    dad8:	e1a05001 	mov	r5, r1
    dadc:	0a00000b 	beq	db10 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x48>
    dae0:	e3550000 	cmp	r5, #0
    dae4:	0a00001b 	beq	db58 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x90>
    dae8:	e5955004 	ldr	r5, [r5, #4]
    daec:	e3550035 	cmp	r5, #53	; 0x35
    daf0:	8a00000b 	bhi	db24 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x5c>
    daf4:	e0844105 	add	r4, r4, r5, lsl #2
    daf8:	e5943008 	ldr	r3, [r4, #8]
    dafc:	e3530000 	cmp	r3, #0
    db00:	0a00000f 	beq	db44 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x7c>
    db04:	e3a03000 	mov	r3, #0
    db08:	e5843008 	str	r3, [r4, #8]
    db0c:	e8bd8070 	pop	{r4, r5, r6, pc}
    db10:	e3a02052 	mov	r2, #82	; 0x52
    db14:	e59f1050 	ldr	r1, [pc, #80]	; db6c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xa4>
    db18:	e59f0050 	ldr	r0, [pc, #80]	; db70 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xa8>
    db1c:	ebfffe78 	bl	d504 <assertion_failed>
    db20:	eaffffee 	b	dae0 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x18>
    db24:	e3a02056 	mov	r2, #86	; 0x56
    db28:	e59f103c 	ldr	r1, [pc, #60]	; db6c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xa4>
    db2c:	e59f0040 	ldr	r0, [pc, #64]	; db74 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xac>
    db30:	e0844105 	add	r4, r4, r5, lsl #2
    db34:	ebfffe72 	bl	d504 <assertion_failed>
    db38:	e5943008 	ldr	r3, [r4, #8]
    db3c:	e3530000 	cmp	r3, #0
    db40:	1affffef 	bne	db04 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x3c>
    db44:	e3a02058 	mov	r2, #88	; 0x58
    db48:	e59f101c 	ldr	r1, [pc, #28]	; db6c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xa4>
    db4c:	e59f0024 	ldr	r0, [pc, #36]	; db78 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xb0>
    db50:	ebfffe6b 	bl	d504 <assertion_failed>
    db54:	eaffffea 	b	db04 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x3c>
    db58:	e3a02054 	mov	r2, #84	; 0x54
    db5c:	e59f1008 	ldr	r1, [pc, #8]	; db6c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xa4>
    db60:	e59f0014 	ldr	r0, [pc, #20]	; db7c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xb4>
    db64:	ebfffe66 	bl	d504 <assertion_failed>
    db68:	eaffffde 	b	dae8 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x20>
    db6c:	00010f68 	.word	0x00010f68
    db70:	00010fb4 	.word	0x00010fb4
    db74:	000106c8 	.word	0x000106c8
    db78:	00010fd0 	.word	0x00010fd0
    db7c:	00010fc4 	.word	0x00010fc4

0000db80 <CGPIOManager::InterruptHandler()>:
    db80:	e5d03004 	ldrb	r3, [r0, #4]
    db84:	e92d4070 	push	{r4, r5, r6, lr}
    db88:	e3530000 	cmp	r3, #0
    db8c:	e1a05000 	mov	r5, r0
    db90:	0a00001b 	beq	dc04 <CGPIOManager::InterruptHandler()+0x84>
    db94:	e3a04000 	mov	r4, #0
    db98:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
    db9c:	e59f2080 	ldr	r2, [pc, #128]	; dc24 <CGPIOManager::InterruptHandler()+0xa4>
    dba0:	e5923040 	ldr	r3, [r2, #64]	; 0x40
    dba4:	ea000005 	b	dbc0 <CGPIOManager::InterruptHandler()+0x40>
    dba8:	e2844001 	add	r4, r4, #1
    dbac:	e314001f 	tst	r4, #31
    dbb0:	11a030a3 	lsrne	r3, r3, #1
    dbb4:	05923044 	ldreq	r3, [r2, #68]	; 0x44
    dbb8:	e3540036 	cmp	r4, #54	; 0x36
    dbbc:	0a00000d 	beq	dbf8 <CGPIOManager::InterruptHandler()+0x78>
    dbc0:	e3130001 	tst	r3, #1
    dbc4:	0afffff7 	beq	dba8 <CGPIOManager::InterruptHandler()+0x28>
    dbc8:	e3a03001 	mov	r3, #1
    dbcc:	e2842002 	add	r2, r4, #2
    dbd0:	e7950102 	ldr	r0, [r5, r2, lsl #2]
    dbd4:	e204501f 	and	r5, r4, #31
    dbd8:	e3500000 	cmp	r0, #0
    dbdc:	e1a05513 	lsl	r5, r3, r5
    dbe0:	0a00000c 	beq	dc18 <CGPIOManager::InterruptHandler()+0x98>
    dbe4:	ebfff3e4 	bl	ab7c <CGPIOPin::InterruptHandler()>
    dbe8:	e59f3038 	ldr	r3, [pc, #56]	; dc28 <CGPIOManager::InterruptHandler()+0xa8>
    dbec:	e08342a4 	add	r4, r3, r4, lsr #5
    dbf0:	e1a04104 	lsl	r4, r4, #2
    dbf4:	e5845000 	str	r5, [r4]
    dbf8:	e3a03000 	mov	r3, #0
    dbfc:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    dc00:	e8bd8070 	pop	{r4, r5, r6, pc}
    dc04:	e3a0205e 	mov	r2, #94	; 0x5e
    dc08:	e59f101c 	ldr	r1, [pc, #28]	; dc2c <CGPIOManager::InterruptHandler()+0xac>
    dc0c:	e59f001c 	ldr	r0, [pc, #28]	; dc30 <CGPIOManager::InterruptHandler()+0xb0>
    dc10:	ebfffe3b 	bl	d504 <assertion_failed>
    dc14:	eaffffde 	b	db94 <CGPIOManager::InterruptHandler()+0x14>
    dc18:	e1a00004 	mov	r0, r4
    dc1c:	ebfff403 	bl	ac30 <CGPIOPin::DisableAllInterrupts(unsigned int)>
    dc20:	eafffff0 	b	dbe8 <CGPIOManager::InterruptHandler()+0x68>
    dc24:	20200000 	.word	0x20200000
    dc28:	08080010 	.word	0x08080010
    dc2c:	00010f68 	.word	0x00010f68
    dc30:	00010fb4 	.word	0x00010fb4

0000dc34 <CGPIOManager::InterruptStub(void*)>:
    dc34:	e92d4010 	push	{r4, lr}
    dc38:	e2504000 	subs	r4, r0, #0
    dc3c:	0a000002 	beq	dc4c <CGPIOManager::InterruptStub(void*)+0x18>
    dc40:	e1a00004 	mov	r0, r4
    dc44:	e8bd4010 	pop	{r4, lr}
    dc48:	eaffffcc 	b	db80 <CGPIOManager::InterruptHandler()>
    dc4c:	e59f0014 	ldr	r0, [pc, #20]	; dc68 <CGPIOManager::InterruptStub(void*)+0x34>
    dc50:	e3a0208a 	mov	r2, #138	; 0x8a
    dc54:	e59f1010 	ldr	r1, [pc, #16]	; dc6c <CGPIOManager::InterruptStub(void*)+0x38>
    dc58:	ebfffe29 	bl	d504 <assertion_failed>
    dc5c:	e1a00004 	mov	r0, r4
    dc60:	e8bd4010 	pop	{r4, lr}
    dc64:	eaffffc5 	b	db80 <CGPIOManager::InterruptHandler()>
    dc68:	00010fe4 	.word	0x00010fe4
    dc6c:	00010f68 	.word	0x00010f68

0000dc70 <CLogger::CLogger(unsigned int, CTimer*)>:
    dc70:	e92d4010 	push	{r4, lr}
    dc74:	e3a03000 	mov	r3, #0
    dc78:	e1a04000 	mov	r4, r0
    dc7c:	e3a00001 	mov	r0, #1
    dc80:	e884000e 	stm	r4, {r1, r2, r3}
    dc84:	e584300c 	str	r3, [r4, #12]
    dc88:	e5843010 	str	r3, [r4, #16]
    dc8c:	e5843014 	str	r3, [r4, #20]
    dc90:	e58430e4 	str	r3, [r4, #228]	; 0xe4
    dc94:	e58430e8 	str	r3, [r4, #232]	; 0xe8
    dc98:	e58430f0 	str	r3, [r4, #240]	; 0xf0
    dc9c:	e58430f4 	str	r3, [r4, #244]	; 0xf4
    dca0:	e5840018 	str	r0, [r4, #24]
    dca4:	e58400ec 	str	r0, [r4, #236]	; 0xec
    dca8:	e3a00901 	mov	r0, #16384	; 0x4000
    dcac:	ebfffc87 	bl	ced0 <operator new[](unsigned int)>
    dcb0:	e59f300c 	ldr	r3, [pc, #12]	; dcc4 <CLogger::CLogger(unsigned int, CTimer*)+0x54>
    dcb4:	e584000c 	str	r0, [r4, #12]
    dcb8:	e5834000 	str	r4, [r3]
    dcbc:	e1a00004 	mov	r0, r4
    dcc0:	e8bd8010 	pop	{r4, pc}
    dcc4:	000113c0 	.word	0x000113c0

0000dcc8 <CLogger::~CLogger()>:
    dcc8:	e3a02000 	mov	r2, #0
    dccc:	e59f1064 	ldr	r1, [pc, #100]	; dd38 <CLogger::~CLogger()+0x70>
    dcd0:	e92d4070 	push	{r4, r5, r6, lr}
    dcd4:	e59030e8 	ldr	r3, [r0, #232]	; 0xe8
    dcd8:	e1a04000 	mov	r4, r0
    dcdc:	e1a06002 	mov	r6, r2
    dce0:	e3a05f42 	mov	r5, #264	; 0x108
    dce4:	e5812000 	str	r2, [r1]
    dce8:	ea000008 	b	dd10 <CLogger::~CLogger()+0x48>
    dcec:	e591001c 	ldr	r0, [r1, #28]
    dcf0:	e1a01005 	mov	r1, r5
    dcf4:	ebfffc78 	bl	cedc <operator delete(void*, unsigned int)>
    dcf8:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
    dcfc:	e2833001 	add	r3, r3, #1
    dd00:	e3530032 	cmp	r3, #50	; 0x32
    dd04:	e58430e8 	str	r3, [r4, #232]	; 0xe8
    dd08:	03a03000 	moveq	r3, #0
    dd0c:	058460e8 	streq	r6, [r4, #232]	; 0xe8
    dd10:	e59420e4 	ldr	r2, [r4, #228]	; 0xe4
    dd14:	e0841103 	add	r1, r4, r3, lsl #2
    dd18:	e1520003 	cmp	r2, r3
    dd1c:	1afffff2 	bne	dcec <CLogger::~CLogger()+0x24>
    dd20:	e594000c 	ldr	r0, [r4, #12]
    dd24:	e3500000 	cmp	r0, #0
    dd28:	0a000000 	beq	dd30 <CLogger::~CLogger()+0x68>
    dd2c:	ebfffc69 	bl	ced8 <operator delete[](void*)>
    dd30:	e1a00004 	mov	r0, r4
    dd34:	e8bd8070 	pop	{r4, r5, r6, pc}
    dd38:	000113c0 	.word	0x000113c0

0000dd3c <CLogger::Get()>:
    dd3c:	e59f3004 	ldr	r3, [pc, #4]	; dd48 <CLogger::Get()+0xc>
    dd40:	e5930000 	ldr	r0, [r3]
    dd44:	e12fff1e 	bx	lr
    dd48:	000113c0 	.word	0x000113c0

0000dd4c <CLogger::Write(char const*)>:
    dd4c:	e92d4070 	push	{r4, r5, r6, lr}
    dd50:	e1a04000 	mov	r4, r0
    dd54:	e1a00001 	mov	r0, r1
    dd58:	e1a05001 	mov	r5, r1
    dd5c:	eb000738 	bl	fa44 <strlen>
    dd60:	e1a06000 	mov	r6, r0
    dd64:	e5940008 	ldr	r0, [r4, #8]
    dd68:	e1a02006 	mov	r2, r6
    dd6c:	e5903000 	ldr	r3, [r0]
    dd70:	e1a01005 	mov	r1, r5
    dd74:	e593300c 	ldr	r3, [r3, #12]
    dd78:	e12fff33 	blx	r3
    dd7c:	e5940018 	ldr	r0, [r4, #24]
    dd80:	e3500000 	cmp	r0, #0
    dd84:	1a000018 	bne	ddec <CLogger::Write(char const*)+0xa0>
    dd88:	e59f2064 	ldr	r2, [pc, #100]	; ddf4 <CLogger::Write(char const*)+0xa8>
    dd8c:	e0850006 	add	r0, r5, r6
    dd90:	e1550000 	cmp	r5, r0
    dd94:	0a00000f 	beq	ddd8 <CLogger::Write(char const*)+0x8c>
    dd98:	e0d510d1 	ldrsb	r1, [r5], #1
    dd9c:	e351000d 	cmp	r1, #13
    dda0:	0afffffa 	beq	dd90 <CLogger::Write(char const*)+0x44>
    dda4:	e594c010 	ldr	ip, [r4, #16]
    dda8:	e594e00c 	ldr	lr, [r4, #12]
    ddac:	e7ce100c 	strb	r1, [lr, ip]
    ddb0:	e5943010 	ldr	r3, [r4, #16]
    ddb4:	e5941014 	ldr	r1, [r4, #20]
    ddb8:	e2833001 	add	r3, r3, #1
    ddbc:	e0033002 	and	r3, r3, r2
    ddc0:	e1530001 	cmp	r3, r1
    ddc4:	e5843010 	str	r3, [r4, #16]
    ddc8:	1afffff0 	bne	dd90 <CLogger::Write(char const*)+0x44>
    ddcc:	e2433001 	sub	r3, r3, #1
    ddd0:	e0033002 	and	r3, r3, r2
    ddd4:	e5843010 	str	r3, [r4, #16]
    ddd8:	e5943018 	ldr	r3, [r4, #24]
    dddc:	e3530000 	cmp	r3, #0
    dde0:	08bd8070 	popeq	{r4, r5, r6, pc}
    dde4:	e8bd4070 	pop	{r4, r5, r6, lr}
    dde8:	eafffc0a 	b	ce18 <LeaveCritical>
    ddec:	ebfffbdc 	bl	cd64 <EnterCritical>
    ddf0:	eaffffe4 	b	dd88 <CLogger::Write(char const*)+0x3c>
    ddf4:	00003fff 	.word	0x00003fff

0000ddf8 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)>:
    ddf8:	e590c000 	ldr	ip, [r0]
    ddfc:	e152000c 	cmp	r2, ip
    de00:	812fff1e 	bxhi	lr
    de04:	e92d4070 	push	{r4, r5, r6, lr}
    de08:	e1a05003 	mov	r5, r3
    de0c:	e3a03000 	mov	r3, #0
    de10:	e24dd0c8 	sub	sp, sp, #200	; 0xc8
    de14:	e1520003 	cmp	r2, r3
    de18:	e1a04000 	mov	r4, r0
    de1c:	e5cd3000 	strb	r3, [sp]
    de20:	0a00000f 	beq	de64 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x6c>
    de24:	e1a0000d 	mov	r0, sp
    de28:	eb0007a1 	bl	fcb4 <strcat>
    de2c:	e1a0000d 	mov	r0, sp
    de30:	e59f1088 	ldr	r1, [pc, #136]	; dec0 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xc8>
    de34:	eb00079e 	bl	fcb4 <strcat>
    de38:	e1a01005 	mov	r1, r5
    de3c:	e1a0000d 	mov	r0, sp
    de40:	eb00079b 	bl	fcb4 <strcat>
    de44:	e1a0000d 	mov	r0, sp
    de48:	e59f1074 	ldr	r1, [pc, #116]	; dec4 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xcc>
    de4c:	eb000798 	bl	fcb4 <strcat>
    de50:	e1a0100d 	mov	r1, sp
    de54:	e1a00004 	mov	r0, r4
    de58:	ebffffbb 	bl	dd4c <CLogger::Write(char const*)>
    de5c:	e28dd0c8 	add	sp, sp, #200	; 0xc8
    de60:	e8bd8070 	pop	{r4, r5, r6, pc}
    de64:	e1a06001 	mov	r6, r1
    de68:	e1a0000d 	mov	r0, sp
    de6c:	e59f1054 	ldr	r1, [pc, #84]	; dec8 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd0>
    de70:	eb000771 	bl	fc3c <strcpy>
    de74:	e1a01006 	mov	r1, r6
    de78:	e1a0000d 	mov	r0, sp
    de7c:	eb00078c 	bl	fcb4 <strcat>
    de80:	e59f1038 	ldr	r1, [pc, #56]	; dec0 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xc8>
    de84:	e1a0000d 	mov	r0, sp
    de88:	eb000789 	bl	fcb4 <strcat>
    de8c:	e1a01005 	mov	r1, r5
    de90:	e1a0000d 	mov	r0, sp
    de94:	eb000786 	bl	fcb4 <strcat>
    de98:	e59f102c 	ldr	r1, [pc, #44]	; decc <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd4>
    de9c:	e1a0000d 	mov	r0, sp
    dea0:	eb000783 	bl	fcb4 <strcat>
    dea4:	e59f1018 	ldr	r1, [pc, #24]	; dec4 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xcc>
    dea8:	e1a0000d 	mov	r0, sp
    deac:	eb000780 	bl	fcb4 <strcat>
    deb0:	e1a0100d 	mov	r1, sp
    deb4:	e1a00004 	mov	r0, r4
    deb8:	ebffffa3 	bl	dd4c <CLogger::Write(char const*)>
    debc:	ebfff60b 	bl	b6f0 <halt>
    dec0:	00010ff8 	.word	0x00010ff8
    dec4:	00011004 	.word	0x00011004
    dec8:	00010ff0 	.word	0x00010ff0
    decc:	00010ffc 	.word	0x00010ffc

0000ded0 <CLogger::Read(void*, unsigned int)>:
    ded0:	e92d4070 	push	{r4, r5, r6, lr}
    ded4:	e1a04000 	mov	r4, r0
    ded8:	e5900018 	ldr	r0, [r0, #24]
    dedc:	e1a05001 	mov	r5, r1
    dee0:	e3500000 	cmp	r0, #0
    dee4:	e1a06002 	mov	r6, r2
    dee8:	1a00001c 	bne	df60 <CLogger::Read(void*, unsigned int)+0x90>
    deec:	e5942010 	ldr	r2, [r4, #16]
    def0:	e5943014 	ldr	r3, [r4, #20]
    def4:	e1520003 	cmp	r2, r3
    def8:	0a000021 	beq	df84 <CLogger::Read(void*, unsigned int)+0xb4>
    defc:	e1a01005 	mov	r1, r5
    df00:	e59f2088 	ldr	r2, [pc, #136]	; df90 <CLogger::Read(void*, unsigned int)+0xc0>
    df04:	e3a05000 	mov	r5, #0
    df08:	ea00000a 	b	df38 <CLogger::Read(void*, unsigned int)+0x68>
    df0c:	e594000c 	ldr	r0, [r4, #12]
    df10:	e2855001 	add	r5, r5, #1
    df14:	e19030d3 	ldrsb	r3, [r0, r3]
    df18:	e4c13001 	strb	r3, [r1], #1
    df1c:	e5943014 	ldr	r3, [r4, #20]
    df20:	e5940010 	ldr	r0, [r4, #16]
    df24:	e2833001 	add	r3, r3, #1
    df28:	e0033002 	and	r3, r3, r2
    df2c:	e1530000 	cmp	r3, r0
    df30:	e5843014 	str	r3, [r4, #20]
    df34:	0a000001 	beq	df40 <CLogger::Read(void*, unsigned int)+0x70>
    df38:	e1550006 	cmp	r5, r6
    df3c:	1afffff2 	bne	df0c <CLogger::Read(void*, unsigned int)+0x3c>
    df40:	e5943018 	ldr	r3, [r4, #24]
    df44:	e3530000 	cmp	r3, #0
    df48:	1a000001 	bne	df54 <CLogger::Read(void*, unsigned int)+0x84>
    df4c:	e1a00005 	mov	r0, r5
    df50:	e8bd8070 	pop	{r4, r5, r6, pc}
    df54:	ebfffbaf 	bl	ce18 <LeaveCritical>
    df58:	e1a00005 	mov	r0, r5
    df5c:	e8bd8070 	pop	{r4, r5, r6, pc}
    df60:	ebfffb7f 	bl	cd64 <EnterCritical>
    df64:	e5942010 	ldr	r2, [r4, #16]
    df68:	e5943014 	ldr	r3, [r4, #20]
    df6c:	e1520003 	cmp	r2, r3
    df70:	1affffe1 	bne	defc <CLogger::Read(void*, unsigned int)+0x2c>
    df74:	e5943018 	ldr	r3, [r4, #24]
    df78:	e3530000 	cmp	r3, #0
    df7c:	0a000000 	beq	df84 <CLogger::Read(void*, unsigned int)+0xb4>
    df80:	ebfffba4 	bl	ce18 <LeaveCritical>
    df84:	e3e05000 	mvn	r5, #0
    df88:	e1a00005 	mov	r0, r5
    df8c:	e8bd8070 	pop	{r4, r5, r6, pc}
    df90:	00003fff 	.word	0x00003fff

0000df94 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>:
    df94:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    df98:	e1a05000 	mov	r5, r0
    df9c:	e24dd00c 	sub	sp, sp, #12
    dfa0:	e3a00f42 	mov	r0, #264	; 0x108
    dfa4:	e1a07003 	mov	r7, r3
    dfa8:	e1a09002 	mov	r9, r2
    dfac:	e1a08001 	mov	r8, r1
    dfb0:	ebfffbc5 	bl	cecc <operator new(unsigned int)>
    dfb4:	e3a06000 	mov	r6, #0
    dfb8:	e1a04000 	mov	r4, r0
    dfbc:	e1a01008 	mov	r1, r8
    dfc0:	e3a02032 	mov	r2, #50	; 0x32
    dfc4:	e4c09001 	strb	r9, [r0], #1
    dfc8:	eb000726 	bl	fc68 <strncpy>
    dfcc:	e1a01007 	mov	r1, r7
    dfd0:	e2840033 	add	r0, r4, #51	; 0x33
    dfd4:	e3a020c8 	mov	r2, #200	; 0xc8
    dfd8:	e5c46032 	strb	r6, [r4, #50]	; 0x32
    dfdc:	eb000721 	bl	fc68 <strncpy>
    dfe0:	e5950004 	ldr	r0, [r5, #4]
    dfe4:	e5c460fa 	strb	r6, [r4, #250]	; 0xfa
    dfe8:	e1500006 	cmp	r0, r6
    dfec:	0a000004 	beq	e004 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x70>
    dff0:	e28d2004 	add	r2, sp, #4
    dff4:	e1a0100d 	mov	r1, sp
    dff8:	ebfff697 	bl	ba5c <CTimer::GetLocalTime(unsigned int*, unsigned int*)>
    dffc:	e1500006 	cmp	r0, r6
    e000:	1a000021 	bne	e08c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xf8>
    e004:	e3a03000 	mov	r3, #0
    e008:	e59500ec 	ldr	r0, [r5, #236]	; 0xec
    e00c:	e58430fc 	str	r3, [r4, #252]	; 0xfc
    e010:	e3500000 	cmp	r0, #0
    e014:	e5843100 	str	r3, [r4, #256]	; 0x100
    e018:	e5843104 	str	r3, [r4, #260]	; 0x104
    e01c:	1a000027 	bne	e0c0 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x12c>
    e020:	e59520e4 	ldr	r2, [r5, #228]	; 0xe4
    e024:	e2823001 	add	r3, r2, #1
    e028:	e3530032 	cmp	r3, #50	; 0x32
    e02c:	e0852102 	add	r2, r5, r2, lsl #2
    e030:	e582401c 	str	r4, [r2, #28]
    e034:	03a02000 	moveq	r2, #0
    e038:	01a03002 	moveq	r3, r2
    e03c:	058520e4 	streq	r2, [r5, #228]	; 0xe4
    e040:	e59520e8 	ldr	r2, [r5, #232]	; 0xe8
    e044:	158530e4 	strne	r3, [r5, #228]	; 0xe4
    e048:	e1520003 	cmp	r2, r3
    e04c:	0a00001e 	beq	e0cc <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x138>
    e050:	e3500000 	cmp	r0, #0
    e054:	13a04000 	movne	r4, #0
    e058:	0a000005 	beq	e074 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xe0>
    e05c:	ebfffb6d 	bl	ce18 <LeaveCritical>
    e060:	e3540000 	cmp	r4, #0
    e064:	0a000002 	beq	e074 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xe0>
    e068:	e1a00004 	mov	r0, r4
    e06c:	e3a01f42 	mov	r1, #264	; 0x108
    e070:	ebfffb99 	bl	cedc <operator delete(void*, unsigned int)>
    e074:	e59530f0 	ldr	r3, [r5, #240]	; 0xf0
    e078:	e3530000 	cmp	r3, #0
    e07c:	0a000000 	beq	e084 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xf0>
    e080:	e12fff33 	blx	r3
    e084:	e28dd00c 	add	sp, sp, #12
    e088:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    e08c:	e59d3004 	ldr	r3, [sp, #4]
    e090:	e59f105c 	ldr	r1, [pc, #92]	; e0f4 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x160>
    e094:	e59d2000 	ldr	r2, [sp]
    e098:	e0831391 	umull	r1, r3, r1, r3
    e09c:	e1a036a3 	lsr	r3, r3, #13
    e0a0:	e5950004 	ldr	r0, [r5, #4]
    e0a4:	e5843100 	str	r3, [r4, #256]	; 0x100
    e0a8:	e58420fc 	str	r2, [r4, #252]	; 0xfc
    e0ac:	ebfff63c 	bl	b9a4 <CTimer::GetTimeZone() const>
    e0b0:	e5840104 	str	r0, [r4, #260]	; 0x104
    e0b4:	e59500ec 	ldr	r0, [r5, #236]	; 0xec
    e0b8:	e3500000 	cmp	r0, #0
    e0bc:	0affffd7 	beq	e020 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x8c>
    e0c0:	ebfffb27 	bl	cd64 <EnterCritical>
    e0c4:	e59500ec 	ldr	r0, [r5, #236]	; 0xec
    e0c8:	eaffffd4 	b	e020 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x8c>
    e0cc:	e2832001 	add	r2, r3, #1
    e0d0:	e3520032 	cmp	r2, #50	; 0x32
    e0d4:	e0853103 	add	r3, r5, r3, lsl #2
    e0d8:	e593401c 	ldr	r4, [r3, #28]
    e0dc:	03a03000 	moveq	r3, #0
    e0e0:	158520e8 	strne	r2, [r5, #232]	; 0xe8
    e0e4:	058530e8 	streq	r3, [r5, #232]	; 0xe8
    e0e8:	e3500000 	cmp	r0, #0
    e0ec:	0affffdb 	beq	e060 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xcc>
    e0f0:	eaffffd9 	b	e05c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xc8>
    e0f4:	d1b71759 	.word	0xd1b71759

0000e0f8 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)>:
    e0f8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    e0fc:	e1a04000 	mov	r4, r0
    e100:	e59000ec 	ldr	r0, [r0, #236]	; 0xec
    e104:	e1a07001 	mov	r7, r1
    e108:	e3500000 	cmp	r0, #0
    e10c:	e1a08002 	mov	r8, r2
    e110:	e1a06003 	mov	r6, r3
    e114:	1a000022 	bne	e1a4 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xac>
    e118:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
    e11c:	e59420e4 	ldr	r2, [r4, #228]	; 0xe4
    e120:	e1530002 	cmp	r3, r2
    e124:	0a000028 	beq	e1cc <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xd4>
    e128:	e283c001 	add	ip, r3, #1
    e12c:	e35c0032 	cmp	ip, #50	; 0x32
    e130:	e0843103 	add	r3, r4, r3, lsl #2
    e134:	e593501c 	ldr	r5, [r3, #28]
    e138:	03a03000 	moveq	r3, #0
    e13c:	1584c0e8 	strne	ip, [r4, #232]	; 0xe8
    e140:	058430e8 	streq	r3, [r4, #232]	; 0xe8
    e144:	e3500000 	cmp	r0, #0
    e148:	1a000021 	bne	e1d4 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xdc>
    e14c:	e1a01005 	mov	r1, r5
    e150:	e4d12001 	ldrb	r2, [r1], #1
    e154:	e1a00008 	mov	r0, r8
    e158:	e5c72000 	strb	r2, [r7]
    e15c:	eb0006b6 	bl	fc3c <strcpy>
    e160:	e2851033 	add	r1, r5, #51	; 0x33
    e164:	e1a00006 	mov	r0, r6
    e168:	eb0006b3 	bl	fc3c <strcpy>
    e16c:	e59520fc 	ldr	r2, [r5, #252]	; 0xfc
    e170:	e59d1018 	ldr	r1, [sp, #24]
    e174:	e5953100 	ldr	r3, [r5, #256]	; 0x100
    e178:	e5812000 	str	r2, [r1]
    e17c:	e59d201c 	ldr	r2, [sp, #28]
    e180:	e1a00005 	mov	r0, r5
    e184:	e5823000 	str	r3, [r2]
    e188:	e5953104 	ldr	r3, [r5, #260]	; 0x104
    e18c:	e59d2020 	ldr	r2, [sp, #32]
    e190:	e3a01f42 	mov	r1, #264	; 0x108
    e194:	e5823000 	str	r3, [r2]
    e198:	ebfffb4f 	bl	cedc <operator delete(void*, unsigned int)>
    e19c:	e3a00001 	mov	r0, #1
    e1a0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e1a4:	ebfffaee 	bl	cd64 <EnterCritical>
    e1a8:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
    e1ac:	e59420e4 	ldr	r2, [r4, #228]	; 0xe4
    e1b0:	e1520003 	cmp	r2, r3
    e1b4:	159400ec 	ldrne	r0, [r4, #236]	; 0xec
    e1b8:	1affffda 	bne	e128 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x30>
    e1bc:	e59430ec 	ldr	r3, [r4, #236]	; 0xec
    e1c0:	e3530000 	cmp	r3, #0
    e1c4:	0a000000 	beq	e1cc <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xd4>
    e1c8:	ebfffb12 	bl	ce18 <LeaveCritical>
    e1cc:	e3a00000 	mov	r0, #0
    e1d0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e1d4:	ebfffb0f 	bl	ce18 <LeaveCritical>
    e1d8:	eaffffdb 	b	e14c <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x54>

0000e1dc <CLogger::RegisterEventNotificationHandler(void (*)())>:
    e1dc:	e58010f0 	str	r1, [r0, #240]	; 0xf0
    e1e0:	e12fff1e 	bx	lr

0000e1e4 <CLogger::RegisterPanicHandler(void (*)())>:
    e1e4:	e58010f4 	str	r1, [r0, #244]	; 0xf4
    e1e8:	e12fff1e 	bx	lr

0000e1ec <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>:
    e1ec:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    e1f0:	e1a07003 	mov	r7, r3
    e1f4:	e24dd024 	sub	sp, sp, #36	; 0x24
    e1f8:	e1a04000 	mov	r4, r0
    e1fc:	e1a0000d 	mov	r0, sp
    e200:	e1a05002 	mov	r5, r2
    e204:	e1a06001 	mov	r6, r1
    e208:	eb0001f3 	bl	e9dc <CString::CString()>
    e20c:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
    e210:	e1a01007 	mov	r1, r7
    e214:	e1a0000d 	mov	r0, sp
    e218:	eb0003bc 	bl	f110 <CString::FormatV(char const*, std::__va_list)>
    e21c:	e1a0000d 	mov	r0, sp
    e220:	eb000203 	bl	ea34 <CString::operator char const*() const>
    e224:	e1a02005 	mov	r2, r5
    e228:	e1a03000 	mov	r3, r0
    e22c:	e1a01006 	mov	r1, r6
    e230:	e1a00004 	mov	r0, r4
    e234:	ebffff56 	bl	df94 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>
    e238:	e5943000 	ldr	r3, [r4]
    e23c:	e1550003 	cmp	r5, r3
    e240:	8a00002c 	bhi	e2f8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x10c>
    e244:	e28d0010 	add	r0, sp, #16
    e248:	eb0001e3 	bl	e9dc <CString::CString()>
    e24c:	e3550000 	cmp	r5, #0
    e250:	0a00002c 	beq	e308 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x11c>
    e254:	e5940004 	ldr	r0, [r4, #4]
    e258:	e3500000 	cmp	r0, #0
    e25c:	0a00004a 	beq	e38c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1a0>
    e260:	ebfff66e 	bl	bc20 <CTimer::GetTimeString()>
    e264:	e2507000 	subs	r7, r0, #0
    e268:	0a000047 	beq	e38c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1a0>
    e26c:	e1a00007 	mov	r0, r7
    e270:	eb0001ef 	bl	ea34 <CString::operator char const*() const>
    e274:	e1a01000 	mov	r1, r0
    e278:	e28d0010 	add	r0, sp, #16
    e27c:	eb00021e 	bl	eafc <CString::Append(char const*)>
    e280:	e59f1144 	ldr	r1, [pc, #324]	; e3cc <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e0>
    e284:	e28d0010 	add	r0, sp, #16
    e288:	eb00021b 	bl	eafc <CString::Append(char const*)>
    e28c:	e5973000 	ldr	r3, [r7]
    e290:	e1a00007 	mov	r0, r7
    e294:	e5933004 	ldr	r3, [r3, #4]
    e298:	e12fff33 	blx	r3
    e29c:	e1a01006 	mov	r1, r6
    e2a0:	e28d0010 	add	r0, sp, #16
    e2a4:	eb000214 	bl	eafc <CString::Append(char const*)>
    e2a8:	e59f1120 	ldr	r1, [pc, #288]	; e3d0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e4>
    e2ac:	e28d0010 	add	r0, sp, #16
    e2b0:	eb000211 	bl	eafc <CString::Append(char const*)>
    e2b4:	e1a0000d 	mov	r0, sp
    e2b8:	eb0001dd 	bl	ea34 <CString::operator char const*() const>
    e2bc:	e1a01000 	mov	r1, r0
    e2c0:	e28d0010 	add	r0, sp, #16
    e2c4:	eb00020c 	bl	eafc <CString::Append(char const*)>
    e2c8:	e3550000 	cmp	r5, #0
    e2cc:	0a00001e 	beq	e34c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x160>
    e2d0:	e59f10fc 	ldr	r1, [pc, #252]	; e3d4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e8>
    e2d4:	e28d0010 	add	r0, sp, #16
    e2d8:	eb000207 	bl	eafc <CString::Append(char const*)>
    e2dc:	e28d0010 	add	r0, sp, #16
    e2e0:	eb0001d3 	bl	ea34 <CString::operator char const*() const>
    e2e4:	e1a01000 	mov	r1, r0
    e2e8:	e1a00004 	mov	r0, r4
    e2ec:	ebfffe96 	bl	dd4c <CLogger::Write(char const*)>
    e2f0:	e28d0010 	add	r0, sp, #16
    e2f4:	eb000185 	bl	e910 <CString::~CString()>
    e2f8:	e1a0000d 	mov	r0, sp
    e2fc:	eb000183 	bl	e910 <CString::~CString()>
    e300:	e28dd024 	add	sp, sp, #36	; 0x24
    e304:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    e308:	e59f10c8 	ldr	r1, [pc, #200]	; e3d8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1ec>
    e30c:	e28d0010 	add	r0, sp, #16
    e310:	eb0001cd 	bl	ea4c <CString::operator=(char const*)>
    e314:	e5940004 	ldr	r0, [r4, #4]
    e318:	e3500000 	cmp	r0, #0
    e31c:	1a000026 	bne	e3bc <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1d0>
    e320:	e1a01006 	mov	r1, r6
    e324:	e28d0010 	add	r0, sp, #16
    e328:	eb0001f3 	bl	eafc <CString::Append(char const*)>
    e32c:	e59f109c 	ldr	r1, [pc, #156]	; e3d0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e4>
    e330:	e28d0010 	add	r0, sp, #16
    e334:	eb0001f0 	bl	eafc <CString::Append(char const*)>
    e338:	e1a0000d 	mov	r0, sp
    e33c:	eb0001bc 	bl	ea34 <CString::operator char const*() const>
    e340:	e1a01000 	mov	r1, r0
    e344:	e28d0010 	add	r0, sp, #16
    e348:	eb0001eb 	bl	eafc <CString::Append(char const*)>
    e34c:	e59f1088 	ldr	r1, [pc, #136]	; e3dc <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1f0>
    e350:	e28d0010 	add	r0, sp, #16
    e354:	eb0001e8 	bl	eafc <CString::Append(char const*)>
    e358:	e59f1074 	ldr	r1, [pc, #116]	; e3d4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e8>
    e35c:	e28d0010 	add	r0, sp, #16
    e360:	eb0001e5 	bl	eafc <CString::Append(char const*)>
    e364:	e28d0010 	add	r0, sp, #16
    e368:	eb0001b1 	bl	ea34 <CString::operator char const*() const>
    e36c:	e1a01000 	mov	r1, r0
    e370:	e1a00004 	mov	r0, r4
    e374:	ebfffe74 	bl	dd4c <CLogger::Write(char const*)>
    e378:	e59430f4 	ldr	r3, [r4, #244]	; 0xf4
    e37c:	e3530000 	cmp	r3, #0
    e380:	0a000000 	beq	e388 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x19c>
    e384:	e12fff33 	blx	r3
    e388:	ebfff4d8 	bl	b6f0 <halt>
    e38c:	e1a01006 	mov	r1, r6
    e390:	e28d0010 	add	r0, sp, #16
    e394:	eb0001d8 	bl	eafc <CString::Append(char const*)>
    e398:	e59f1030 	ldr	r1, [pc, #48]	; e3d0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e4>
    e39c:	e28d0010 	add	r0, sp, #16
    e3a0:	eb0001d5 	bl	eafc <CString::Append(char const*)>
    e3a4:	e1a0000d 	mov	r0, sp
    e3a8:	eb0001a1 	bl	ea34 <CString::operator char const*() const>
    e3ac:	e1a01000 	mov	r1, r0
    e3b0:	e28d0010 	add	r0, sp, #16
    e3b4:	eb0001d0 	bl	eafc <CString::Append(char const*)>
    e3b8:	eaffffc4 	b	e2d0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xe4>
    e3bc:	ebfff617 	bl	bc20 <CTimer::GetTimeString()>
    e3c0:	e2507000 	subs	r7, r0, #0
    e3c4:	1affffa8 	bne	e26c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x80>
    e3c8:	eaffffd4 	b	e320 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x134>
    e3cc:	00011008 	.word	0x00011008
    e3d0:	00010ff8 	.word	0x00010ff8
    e3d4:	00011004 	.word	0x00011004
    e3d8:	00010ff0 	.word	0x00010ff0
    e3dc:	00010ffc 	.word	0x00010ffc

0000e3e0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>:
    e3e0:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)
    e3e4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    e3e8:	e24dd010 	sub	sp, sp, #16
    e3ec:	e28dc018 	add	ip, sp, #24
    e3f0:	e58dc000 	str	ip, [sp]
    e3f4:	e59d3014 	ldr	r3, [sp, #20]
    e3f8:	e58dc00c 	str	ip, [sp, #12]
    e3fc:	ebffff7a 	bl	e1ec <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
    e400:	e28dd010 	add	sp, sp, #16
    e404:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    e408:	e28dd004 	add	sp, sp, #4
    e40c:	e12fff1e 	bx	lr

0000e410 <CLogger::Initialize(CDevice*)>:
    e410:	e92d4010 	push	{r4, lr}
    e414:	e5801008 	str	r1, [r0, #8]
    e418:	e24dd008 	sub	sp, sp, #8
    e41c:	e1a04000 	mov	r4, r0
    e420:	ebfff4a3 	bl	b6b4 <CMachineInfo::Get()>
    e424:	ebfff42c 	bl	b4dc <CMachineInfo::GetMachineName() const>
    e428:	e59f301c 	ldr	r3, [pc, #28]	; e44c <CLogger::Initialize(CDevice*)+0x3c>
    e42c:	e58d0000 	str	r0, [sp]
    e430:	e3a02003 	mov	r2, #3
    e434:	e1a00004 	mov	r0, r4
    e438:	e59f1010 	ldr	r1, [pc, #16]	; e450 <CLogger::Initialize(CDevice*)+0x40>
    e43c:	ebffffe7 	bl	e3e0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    e440:	e3a00001 	mov	r0, #1
    e444:	e28dd008 	add	sp, sp, #8
    e448:	e8bd8010 	pop	{r4, pc}
    e44c:	0001100c 	.word	0x0001100c
    e450:	00011024 	.word	0x00011024

0000e454 <CPtrList::CPtrList()>:
    e454:	e3a02000 	mov	r2, #0
    e458:	e5802000 	str	r2, [r0]
    e45c:	e12fff1e 	bx	lr

0000e460 <CPtrList::~CPtrList()>:
    e460:	e5903000 	ldr	r3, [r0]
    e464:	e92d4010 	push	{r4, lr}
    e468:	e3530000 	cmp	r3, #0
    e46c:	e1a04000 	mov	r4, r0
    e470:	0a000003 	beq	e484 <CPtrList::~CPtrList()+0x24>
    e474:	e3a0202a 	mov	r2, #42	; 0x2a
    e478:	e59f100c 	ldr	r1, [pc, #12]	; e48c <CPtrList::~CPtrList()+0x2c>
    e47c:	e59f000c 	ldr	r0, [pc, #12]	; e490 <CPtrList::~CPtrList()+0x30>
    e480:	ebfffc1f 	bl	d504 <assertion_failed>
    e484:	e1a00004 	mov	r0, r4
    e488:	e8bd8010 	pop	{r4, pc}
    e48c:	0001102c 	.word	0x0001102c
    e490:	00011038 	.word	0x00011038

0000e494 <CPtrList::GetFirst()>:
    e494:	e5900000 	ldr	r0, [r0]
    e498:	e12fff1e 	bx	lr

0000e49c <CPtrList::GetNext(TPtrListElement*)>:
    e49c:	e92d4010 	push	{r4, lr}
    e4a0:	e2514000 	subs	r4, r1, #0
    e4a4:	0a000009 	beq	e4d0 <CPtrList::GetNext(TPtrListElement*)+0x34>
    e4a8:	e59f3034 	ldr	r3, [pc, #52]	; e4e4 <CPtrList::GetNext(TPtrListElement*)+0x48>
    e4ac:	e5942000 	ldr	r2, [r4]
    e4b0:	e1520003 	cmp	r2, r3
    e4b4:	0a000003 	beq	e4c8 <CPtrList::GetNext(TPtrListElement*)+0x2c>
    e4b8:	e3a02035 	mov	r2, #53	; 0x35
    e4bc:	e59f1024 	ldr	r1, [pc, #36]	; e4e8 <CPtrList::GetNext(TPtrListElement*)+0x4c>
    e4c0:	e59f0024 	ldr	r0, [pc, #36]	; e4ec <CPtrList::GetNext(TPtrListElement*)+0x50>
    e4c4:	ebfffc0e 	bl	d504 <assertion_failed>
    e4c8:	e5940008 	ldr	r0, [r4, #8]
    e4cc:	e8bd8010 	pop	{r4, pc}
    e4d0:	e3a02034 	mov	r2, #52	; 0x34
    e4d4:	e59f100c 	ldr	r1, [pc, #12]	; e4e8 <CPtrList::GetNext(TPtrListElement*)+0x4c>
    e4d8:	e59f0010 	ldr	r0, [pc, #16]	; e4f0 <CPtrList::GetNext(TPtrListElement*)+0x54>
    e4dc:	ebfffc08 	bl	d504 <assertion_failed>
    e4e0:	eafffff0 	b	e4a8 <CPtrList::GetNext(TPtrListElement*)+0xc>
    e4e4:	504c4d43 	.word	0x504c4d43
    e4e8:	0001102c 	.word	0x0001102c
    e4ec:	00011058 	.word	0x00011058
    e4f0:	00011048 	.word	0x00011048

0000e4f4 <CPtrList::GetPtr(TPtrListElement*)>:
    e4f4:	e92d4010 	push	{r4, lr}
    e4f8:	e2514000 	subs	r4, r1, #0
    e4fc:	0a000009 	beq	e528 <CPtrList::GetPtr(TPtrListElement*)+0x34>
    e500:	e59f3034 	ldr	r3, [pc, #52]	; e53c <CPtrList::GetPtr(TPtrListElement*)+0x48>
    e504:	e5942000 	ldr	r2, [r4]
    e508:	e1520003 	cmp	r2, r3
    e50c:	0a000003 	beq	e520 <CPtrList::GetPtr(TPtrListElement*)+0x2c>
    e510:	e3a0203d 	mov	r2, #61	; 0x3d
    e514:	e59f1024 	ldr	r1, [pc, #36]	; e540 <CPtrList::GetPtr(TPtrListElement*)+0x4c>
    e518:	e59f0024 	ldr	r0, [pc, #36]	; e544 <CPtrList::GetPtr(TPtrListElement*)+0x50>
    e51c:	ebfffbf8 	bl	d504 <assertion_failed>
    e520:	e594000c 	ldr	r0, [r4, #12]
    e524:	e8bd8010 	pop	{r4, pc}
    e528:	e3a0203c 	mov	r2, #60	; 0x3c
    e52c:	e59f100c 	ldr	r1, [pc, #12]	; e540 <CPtrList::GetPtr(TPtrListElement*)+0x4c>
    e530:	e59f0010 	ldr	r0, [pc, #16]	; e548 <CPtrList::GetPtr(TPtrListElement*)+0x54>
    e534:	ebfffbf2 	bl	d504 <assertion_failed>
    e538:	eafffff0 	b	e500 <CPtrList::GetPtr(TPtrListElement*)+0xc>
    e53c:	504c4d43 	.word	0x504c4d43
    e540:	0001102c 	.word	0x0001102c
    e544:	00011058 	.word	0x00011058
    e548:	00011048 	.word	0x00011048

0000e54c <CPtrList::InsertBefore(TPtrListElement*, void*)>:
    e54c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    e550:	e1a06000 	mov	r6, r0
    e554:	e3a00010 	mov	r0, #16
    e558:	e1a07002 	mov	r7, r2
    e55c:	e1a04001 	mov	r4, r1
    e560:	ebfffa59 	bl	cecc <operator new(unsigned int)>
    e564:	e5962000 	ldr	r2, [r6]
    e568:	e59f30c8 	ldr	r3, [pc, #200]	; e638 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xec>
    e56c:	e3520000 	cmp	r2, #0
    e570:	e1a05000 	mov	r5, r0
    e574:	e580700c 	str	r7, [r0, #12]
    e578:	e5803000 	str	r3, [r0]
    e57c:	0a000023 	beq	e610 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xc4>
    e580:	e3540000 	cmp	r4, #0
    e584:	0a000026 	beq	e624 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd8>
    e588:	e59f30a8 	ldr	r3, [pc, #168]	; e638 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xec>
    e58c:	e5942000 	ldr	r2, [r4]
    e590:	e1520003 	cmp	r2, r3
    e594:	0a000003 	beq	e5a8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x5c>
    e598:	e3a0204e 	mov	r2, #78	; 0x4e
    e59c:	e59f1098 	ldr	r1, [pc, #152]	; e63c <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf0>
    e5a0:	e59f0098 	ldr	r0, [pc, #152]	; e640 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf4>
    e5a4:	ebfffbd6 	bl	d504 <assertion_failed>
    e5a8:	e5963000 	ldr	r3, [r6]
    e5ac:	e1540003 	cmp	r4, r3
    e5b0:	0a000010 	beq	e5f8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xac>
    e5b4:	e5943004 	ldr	r3, [r4, #4]
    e5b8:	e5854008 	str	r4, [r5, #8]
    e5bc:	e3530000 	cmp	r3, #0
    e5c0:	e5853004 	str	r3, [r5, #4]
    e5c4:	0a000009 	beq	e5f0 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xa4>
    e5c8:	e59f2068 	ldr	r2, [pc, #104]	; e638 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xec>
    e5cc:	e5931000 	ldr	r1, [r3]
    e5d0:	e1510002 	cmp	r1, r2
    e5d4:	0a000004 	beq	e5ec <CPtrList::InsertBefore(TPtrListElement*, void*)+0xa0>
    e5d8:	e3a02060 	mov	r2, #96	; 0x60
    e5dc:	e59f1058 	ldr	r1, [pc, #88]	; e63c <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf0>
    e5e0:	e59f005c 	ldr	r0, [pc, #92]	; e644 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf8>
    e5e4:	ebfffbc6 	bl	d504 <assertion_failed>
    e5e8:	e5943004 	ldr	r3, [r4, #4]
    e5ec:	e5835008 	str	r5, [r3, #8]
    e5f0:	e5845004 	str	r5, [r4, #4]
    e5f4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e5f8:	e3a03000 	mov	r3, #0
    e5fc:	e5845004 	str	r5, [r4, #4]
    e600:	e5854008 	str	r4, [r5, #8]
    e604:	e5865000 	str	r5, [r6]
    e608:	e5853004 	str	r3, [r5, #4]
    e60c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e610:	e3a0204c 	mov	r2, #76	; 0x4c
    e614:	e59f1020 	ldr	r1, [pc, #32]	; e63c <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf0>
    e618:	e59f0028 	ldr	r0, [pc, #40]	; e648 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xfc>
    e61c:	ebfffbb8 	bl	d504 <assertion_failed>
    e620:	eaffffd6 	b	e580 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x34>
    e624:	e3a0204d 	mov	r2, #77	; 0x4d
    e628:	e59f100c 	ldr	r1, [pc, #12]	; e63c <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf0>
    e62c:	e59f0018 	ldr	r0, [pc, #24]	; e64c <CPtrList::InsertBefore(TPtrListElement*, void*)+0x100>
    e630:	ebfffbb3 	bl	d504 <assertion_failed>
    e634:	eaffffd3 	b	e588 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x3c>
    e638:	504c4d43 	.word	0x504c4d43
    e63c:	0001102c 	.word	0x0001102c
    e640:	00011098 	.word	0x00011098
    e644:	000110bc 	.word	0x000110bc
    e648:	0001107c 	.word	0x0001107c
    e64c:	0001108c 	.word	0x0001108c

0000e650 <CPtrList::InsertAfter(TPtrListElement*, void*)>:
    e650:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    e654:	e1a06000 	mov	r6, r0
    e658:	e1a05001 	mov	r5, r1
    e65c:	e3a00010 	mov	r0, #16
    e660:	e1a07002 	mov	r7, r2
    e664:	ebfffa18 	bl	cecc <operator new(unsigned int)>
    e668:	e59f30c0 	ldr	r3, [pc, #192]	; e730 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe0>
    e66c:	e3550000 	cmp	r5, #0
    e670:	e5803000 	str	r3, [r0]
    e674:	e1a04000 	mov	r4, r0
    e678:	e580700c 	str	r7, [r0, #12]
    e67c:	e5963000 	ldr	r3, [r6]
    e680:	0a00001a 	beq	e6f0 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xa0>
    e684:	e3530000 	cmp	r3, #0
    e688:	0a000023 	beq	e71c <CPtrList::InsertAfter(TPtrListElement*, void*)+0xcc>
    e68c:	e59f309c 	ldr	r3, [pc, #156]	; e730 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe0>
    e690:	e5952000 	ldr	r2, [r5]
    e694:	e1520003 	cmp	r2, r3
    e698:	0a000003 	beq	e6ac <CPtrList::InsertAfter(TPtrListElement*, void*)+0x5c>
    e69c:	e3a0207e 	mov	r2, #126	; 0x7e
    e6a0:	e59f108c 	ldr	r1, [pc, #140]	; e734 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe4>
    e6a4:	e59f008c 	ldr	r0, [pc, #140]	; e738 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe8>
    e6a8:	ebfffb95 	bl	d504 <assertion_failed>
    e6ac:	e5953008 	ldr	r3, [r5, #8]
    e6b0:	e5845004 	str	r5, [r4, #4]
    e6b4:	e3530000 	cmp	r3, #0
    e6b8:	e5843008 	str	r3, [r4, #8]
    e6bc:	0a000009 	beq	e6e8 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x98>
    e6c0:	e59f2068 	ldr	r2, [pc, #104]	; e730 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe0>
    e6c4:	e5931000 	ldr	r1, [r3]
    e6c8:	e1510002 	cmp	r1, r2
    e6cc:	0a000004 	beq	e6e4 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x94>
    e6d0:	e3a02085 	mov	r2, #133	; 0x85
    e6d4:	e59f1058 	ldr	r1, [pc, #88]	; e734 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe4>
    e6d8:	e59f005c 	ldr	r0, [pc, #92]	; e73c <CPtrList::InsertAfter(TPtrListElement*, void*)+0xec>
    e6dc:	ebfffb88 	bl	d504 <assertion_failed>
    e6e0:	e5953008 	ldr	r3, [r5, #8]
    e6e4:	e5834004 	str	r4, [r3, #4]
    e6e8:	e5854008 	str	r4, [r5, #8]
    e6ec:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e6f0:	e3530000 	cmp	r3, #0
    e6f4:	0a000003 	beq	e708 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xb8>
    e6f8:	e3a02074 	mov	r2, #116	; 0x74
    e6fc:	e59f1030 	ldr	r1, [pc, #48]	; e734 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe4>
    e700:	e59f0038 	ldr	r0, [pc, #56]	; e740 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xf0>
    e704:	ebfffb7e 	bl	d504 <assertion_failed>
    e708:	e3a03000 	mov	r3, #0
    e70c:	e5864000 	str	r4, [r6]
    e710:	e5843004 	str	r3, [r4, #4]
    e714:	e5843008 	str	r3, [r4, #8]
    e718:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e71c:	e3a0207d 	mov	r2, #125	; 0x7d
    e720:	e59f100c 	ldr	r1, [pc, #12]	; e734 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe4>
    e724:	e59f0018 	ldr	r0, [pc, #24]	; e744 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xf4>
    e728:	ebfffb75 	bl	d504 <assertion_failed>
    e72c:	eaffffd6 	b	e68c <CPtrList::InsertAfter(TPtrListElement*, void*)+0x3c>
    e730:	504c4d43 	.word	0x504c4d43
    e734:	0001102c 	.word	0x0001102c
    e738:	000110e4 	.word	0x000110e4
    e73c:	00011108 	.word	0x00011108
    e740:	00011038 	.word	0x00011038
    e744:	0001107c 	.word	0x0001107c

0000e748 <CPtrList::Remove(TPtrListElement*)>:
    e748:	e92d4070 	push	{r4, r5, r6, lr}
    e74c:	e2514000 	subs	r4, r1, #0
    e750:	e1a05000 	mov	r5, r0
    e754:	0a00003c 	beq	e84c <CPtrList::Remove(TPtrListElement*)+0x104>
    e758:	e59f3118 	ldr	r3, [pc, #280]	; e878 <CPtrList::Remove(TPtrListElement*)+0x130>
    e75c:	e5942000 	ldr	r2, [r4]
    e760:	e1520003 	cmp	r2, r3
    e764:	0a000003 	beq	e778 <CPtrList::Remove(TPtrListElement*)+0x30>
    e768:	e3a02090 	mov	r2, #144	; 0x90
    e76c:	e59f1108 	ldr	r1, [pc, #264]	; e87c <CPtrList::Remove(TPtrListElement*)+0x134>
    e770:	e59f0108 	ldr	r0, [pc, #264]	; e880 <CPtrList::Remove(TPtrListElement*)+0x138>
    e774:	ebfffb62 	bl	d504 <assertion_failed>
    e778:	e5953000 	ldr	r3, [r5]
    e77c:	e1540003 	cmp	r4, r3
    e780:	0a000021 	beq	e80c <CPtrList::Remove(TPtrListElement*)+0xc4>
    e784:	e5943004 	ldr	r3, [r4, #4]
    e788:	e3530000 	cmp	r3, #0
    e78c:	0a000033 	beq	e860 <CPtrList::Remove(TPtrListElement*)+0x118>
    e790:	e59f20e0 	ldr	r2, [pc, #224]	; e878 <CPtrList::Remove(TPtrListElement*)+0x130>
    e794:	e5931000 	ldr	r1, [r3]
    e798:	e1510002 	cmp	r1, r2
    e79c:	0a000004 	beq	e7b4 <CPtrList::Remove(TPtrListElement*)+0x6c>
    e7a0:	e3a0209f 	mov	r2, #159	; 0x9f
    e7a4:	e59f10d0 	ldr	r1, [pc, #208]	; e87c <CPtrList::Remove(TPtrListElement*)+0x134>
    e7a8:	e59f00d4 	ldr	r0, [pc, #212]	; e884 <CPtrList::Remove(TPtrListElement*)+0x13c>
    e7ac:	ebfffb54 	bl	d504 <assertion_failed>
    e7b0:	e5943004 	ldr	r3, [r4, #4]
    e7b4:	e5942008 	ldr	r2, [r4, #8]
    e7b8:	e5832008 	str	r2, [r3, #8]
    e7bc:	e5942008 	ldr	r2, [r4, #8]
    e7c0:	e3520000 	cmp	r2, #0
    e7c4:	0a00000a 	beq	e7f4 <CPtrList::Remove(TPtrListElement*)+0xac>
    e7c8:	e59f10a8 	ldr	r1, [pc, #168]	; e878 <CPtrList::Remove(TPtrListElement*)+0x130>
    e7cc:	e5920000 	ldr	r0, [r2]
    e7d0:	e1500001 	cmp	r0, r1
    e7d4:	0a000005 	beq	e7f0 <CPtrList::Remove(TPtrListElement*)+0xa8>
    e7d8:	e3a020a4 	mov	r2, #164	; 0xa4
    e7dc:	e59f1098 	ldr	r1, [pc, #152]	; e87c <CPtrList::Remove(TPtrListElement*)+0x134>
    e7e0:	e59f00a0 	ldr	r0, [pc, #160]	; e888 <CPtrList::Remove(TPtrListElement*)+0x140>
    e7e4:	ebfffb46 	bl	d504 <assertion_failed>
    e7e8:	e5942008 	ldr	r2, [r4, #8]
    e7ec:	e5943004 	ldr	r3, [r4, #4]
    e7f0:	e5823004 	str	r3, [r2, #4]
    e7f4:	e3a03000 	mov	r3, #0
    e7f8:	e1a00004 	mov	r0, r4
    e7fc:	e5843000 	str	r3, [r4]
    e800:	e3a01010 	mov	r1, #16
    e804:	e8bd4070 	pop	{r4, r5, r6, lr}
    e808:	eafff9b3 	b	cedc <operator delete(void*, unsigned int)>
    e80c:	e5943008 	ldr	r3, [r4, #8]
    e810:	e3530000 	cmp	r3, #0
    e814:	e5853000 	str	r3, [r5]
    e818:	0afffff5 	beq	e7f4 <CPtrList::Remove(TPtrListElement*)+0xac>
    e81c:	e59f2054 	ldr	r2, [pc, #84]	; e878 <CPtrList::Remove(TPtrListElement*)+0x130>
    e820:	e5931000 	ldr	r1, [r3]
    e824:	e1510002 	cmp	r1, r2
    e828:	0a000004 	beq	e840 <CPtrList::Remove(TPtrListElement*)+0xf8>
    e82c:	e3a02098 	mov	r2, #152	; 0x98
    e830:	e59f1044 	ldr	r1, [pc, #68]	; e87c <CPtrList::Remove(TPtrListElement*)+0x134>
    e834:	e59f004c 	ldr	r0, [pc, #76]	; e888 <CPtrList::Remove(TPtrListElement*)+0x140>
    e838:	ebfffb31 	bl	d504 <assertion_failed>
    e83c:	e5943008 	ldr	r3, [r4, #8]
    e840:	e3a02000 	mov	r2, #0
    e844:	e5832004 	str	r2, [r3, #4]
    e848:	eaffffe9 	b	e7f4 <CPtrList::Remove(TPtrListElement*)+0xac>
    e84c:	e3a0208f 	mov	r2, #143	; 0x8f
    e850:	e59f1024 	ldr	r1, [pc, #36]	; e87c <CPtrList::Remove(TPtrListElement*)+0x134>
    e854:	e59f0030 	ldr	r0, [pc, #48]	; e88c <CPtrList::Remove(TPtrListElement*)+0x144>
    e858:	ebfffb29 	bl	d504 <assertion_failed>
    e85c:	eaffffbd 	b	e758 <CPtrList::Remove(TPtrListElement*)+0x10>
    e860:	e3a0209e 	mov	r2, #158	; 0x9e
    e864:	e59f1010 	ldr	r1, [pc, #16]	; e87c <CPtrList::Remove(TPtrListElement*)+0x134>
    e868:	e59f0020 	ldr	r0, [pc, #32]	; e890 <CPtrList::Remove(TPtrListElement*)+0x148>
    e86c:	ebfffb24 	bl	d504 <assertion_failed>
    e870:	e5943004 	ldr	r3, [r4, #4]
    e874:	eaffffc5 	b	e790 <CPtrList::Remove(TPtrListElement*)+0x48>
    e878:	504c4d43 	.word	0x504c4d43
    e87c:	0001102c 	.word	0x0001102c
    e880:	00011058 	.word	0x00011058
    e884:	00011178 	.word	0x00011178
    e888:	00011134 	.word	0x00011134
    e88c:	00011048 	.word	0x00011048
    e890:	00011160 	.word	0x00011160

0000e894 <CPtrList::Find(void*)>:
    e894:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    e898:	e5904000 	ldr	r4, [r0]
    e89c:	e3540000 	cmp	r4, #0
    e8a0:	0a000014 	beq	e8f8 <CPtrList::Find(void*)+0x64>
    e8a4:	e1a05001 	mov	r5, r1
    e8a8:	e3a090b3 	mov	r9, #179	; 0xb3
    e8ac:	e59f6050 	ldr	r6, [pc, #80]	; e904 <CPtrList::Find(void*)+0x70>
    e8b0:	e59f8050 	ldr	r8, [pc, #80]	; e908 <CPtrList::Find(void*)+0x74>
    e8b4:	e59f7050 	ldr	r7, [pc, #80]	; e90c <CPtrList::Find(void*)+0x78>
    e8b8:	ea000002 	b	e8c8 <CPtrList::Find(void*)+0x34>
    e8bc:	e5944008 	ldr	r4, [r4, #8]
    e8c0:	e3540000 	cmp	r4, #0
    e8c4:	0a00000b 	beq	e8f8 <CPtrList::Find(void*)+0x64>
    e8c8:	e5943000 	ldr	r3, [r4]
    e8cc:	e1530006 	cmp	r3, r6
    e8d0:	0a000003 	beq	e8e4 <CPtrList::Find(void*)+0x50>
    e8d4:	e1a02009 	mov	r2, r9
    e8d8:	e1a01008 	mov	r1, r8
    e8dc:	e1a00007 	mov	r0, r7
    e8e0:	ebfffb07 	bl	d504 <assertion_failed>
    e8e4:	e594300c 	ldr	r3, [r4, #12]
    e8e8:	e1530005 	cmp	r3, r5
    e8ec:	1afffff2 	bne	e8bc <CPtrList::Find(void*)+0x28>
    e8f0:	e1a00004 	mov	r0, r4
    e8f4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    e8f8:	e3a04000 	mov	r4, #0
    e8fc:	e1a00004 	mov	r0, r4
    e900:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    e904:	504c4d43 	.word	0x504c4d43
    e908:	0001102c 	.word	0x0001102c
    e90c:	00011058 	.word	0x00011058

0000e910 <CString::~CString()>:
    e910:	e92d4010 	push	{r4, lr}
    e914:	e1a04000 	mov	r4, r0
    e918:	e5900004 	ldr	r0, [r0, #4]
    e91c:	e59f3014 	ldr	r3, [pc, #20]	; e938 <CString::~CString()+0x28>
    e920:	e3500000 	cmp	r0, #0
    e924:	e5843000 	str	r3, [r4]
    e928:	0a000000 	beq	e930 <CString::~CString()+0x20>
    e92c:	ebfff969 	bl	ced8 <operator delete[](void*)>
    e930:	e1a00004 	mov	r0, r4
    e934:	e8bd8010 	pop	{r4, pc}
    e938:	000111ac 	.word	0x000111ac

0000e93c <CString::~CString()>:
    e93c:	e92d4010 	push	{r4, lr}
    e940:	e1a04000 	mov	r4, r0
    e944:	e5900004 	ldr	r0, [r0, #4]
    e948:	e59f3020 	ldr	r3, [pc, #32]	; e970 <CString::~CString()+0x34>
    e94c:	e3500000 	cmp	r0, #0
    e950:	e5843000 	str	r3, [r4]
    e954:	0a000000 	beq	e95c <CString::~CString()+0x20>
    e958:	ebfff95e 	bl	ced8 <operator delete[](void*)>
    e95c:	e1a00004 	mov	r0, r4
    e960:	e3a01010 	mov	r1, #16
    e964:	ebfff95c 	bl	cedc <operator delete(void*, unsigned int)>
    e968:	e1a00004 	mov	r0, r4
    e96c:	e8bd8010 	pop	{r4, pc}
    e970:	000111ac 	.word	0x000111ac

0000e974 <CString::ReserveSpace(unsigned int) [clone .part.0]>:
    e974:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    e978:	e990002c 	ldmib	r0, {r2, r3, r5}
    e97c:	e0455002 	sub	r5, r5, r2
    e980:	e0851001 	add	r1, r5, r1
    e984:	e2812001 	add	r2, r1, #1
    e988:	e1520003 	cmp	r2, r3
    e98c:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
    e990:	e1a04000 	mov	r4, r0
    e994:	e2816041 	add	r6, r1, #65	; 0x41
    e998:	e1a00006 	mov	r0, r6
    e99c:	ebfff94b 	bl	ced0 <operator new[](unsigned int)>
    e9a0:	e3a02000 	mov	r2, #0
    e9a4:	e594300c 	ldr	r3, [r4, #12]
    e9a8:	e1a07000 	mov	r7, r0
    e9ac:	e5c32000 	strb	r2, [r3]
    e9b0:	e5941004 	ldr	r1, [r4, #4]
    e9b4:	eb0004a0 	bl	fc3c <strcpy>
    e9b8:	e5940004 	ldr	r0, [r4, #4]
    e9bc:	e3500000 	cmp	r0, #0
    e9c0:	0a000000 	beq	e9c8 <CString::ReserveSpace(unsigned int) [clone .part.0]+0x54>
    e9c4:	ebfff943 	bl	ced8 <operator delete[](void*)>
    e9c8:	e0875005 	add	r5, r7, r5
    e9cc:	e584500c 	str	r5, [r4, #12]
    e9d0:	e5847004 	str	r7, [r4, #4]
    e9d4:	e5846008 	str	r6, [r4, #8]
    e9d8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000e9dc <CString::CString()>:
    e9dc:	e3a02000 	mov	r2, #0
    e9e0:	e59f1008 	ldr	r1, [pc, #8]	; e9f0 <CString::CString()+0x14>
    e9e4:	e5802008 	str	r2, [r0, #8]
    e9e8:	e8800006 	stm	r0, {r1, r2}
    e9ec:	e12fff1e 	bx	lr
    e9f0:	000111ac 	.word	0x000111ac

0000e9f4 <CString::CString(char const*)>:
    e9f4:	e92d4070 	push	{r4, r5, r6, lr}
    e9f8:	e1a04000 	mov	r4, r0
    e9fc:	e59f302c 	ldr	r3, [pc, #44]	; ea30 <CString::CString(char const*)+0x3c>
    ea00:	e1a00001 	mov	r0, r1
    ea04:	e5843000 	str	r3, [r4]
    ea08:	e1a05001 	mov	r5, r1
    ea0c:	eb00040c 	bl	fa44 <strlen>
    ea10:	e2800001 	add	r0, r0, #1
    ea14:	e5840008 	str	r0, [r4, #8]
    ea18:	ebfff92c 	bl	ced0 <operator new[](unsigned int)>
    ea1c:	e1a01005 	mov	r1, r5
    ea20:	e5840004 	str	r0, [r4, #4]
    ea24:	eb000484 	bl	fc3c <strcpy>
    ea28:	e1a00004 	mov	r0, r4
    ea2c:	e8bd8070 	pop	{r4, r5, r6, pc}
    ea30:	000111ac 	.word	0x000111ac

0000ea34 <CString::operator char const*() const>:
    ea34:	e5900004 	ldr	r0, [r0, #4]
    ea38:	e59f3008 	ldr	r3, [pc, #8]	; ea48 <CString::operator char const*() const+0x14>
    ea3c:	e3500000 	cmp	r0, #0
    ea40:	01a00003 	moveq	r0, r3
    ea44:	e12fff1e 	bx	lr
    ea48:	00010d70 	.word	0x00010d70

0000ea4c <CString::operator=(char const*)>:
    ea4c:	e92d4070 	push	{r4, r5, r6, lr}
    ea50:	e1a04000 	mov	r4, r0
    ea54:	e5900004 	ldr	r0, [r0, #4]
    ea58:	e1a05001 	mov	r5, r1
    ea5c:	e3500000 	cmp	r0, #0
    ea60:	0a000000 	beq	ea68 <CString::operator=(char const*)+0x1c>
    ea64:	ebfff91b 	bl	ced8 <operator delete[](void*)>
    ea68:	e1a00005 	mov	r0, r5
    ea6c:	eb0003f4 	bl	fa44 <strlen>
    ea70:	e2800001 	add	r0, r0, #1
    ea74:	e5840008 	str	r0, [r4, #8]
    ea78:	ebfff914 	bl	ced0 <operator new[](unsigned int)>
    ea7c:	e1a01005 	mov	r1, r5
    ea80:	e5840004 	str	r0, [r4, #4]
    ea84:	eb00046c 	bl	fc3c <strcpy>
    ea88:	e5940004 	ldr	r0, [r4, #4]
    ea8c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000ea90 <CString::operator=(CString const&)>:
    ea90:	e92d4070 	push	{r4, r5, r6, lr}
    ea94:	e1a04000 	mov	r4, r0
    ea98:	e5900004 	ldr	r0, [r0, #4]
    ea9c:	e1a06001 	mov	r6, r1
    eaa0:	e3500000 	cmp	r0, #0
    eaa4:	0a000000 	beq	eaac <CString::operator=(CString const&)+0x1c>
    eaa8:	ebfff90a 	bl	ced8 <operator delete[](void*)>
    eaac:	e5960004 	ldr	r0, [r6, #4]
    eab0:	e59f5030 	ldr	r5, [pc, #48]	; eae8 <CString::operator=(CString const&)+0x58>
    eab4:	e3500000 	cmp	r0, #0
    eab8:	01a00005 	moveq	r0, r5
    eabc:	eb0003e0 	bl	fa44 <strlen>
    eac0:	e2800001 	add	r0, r0, #1
    eac4:	e5840008 	str	r0, [r4, #8]
    eac8:	ebfff900 	bl	ced0 <operator new[](unsigned int)>
    eacc:	e5840004 	str	r0, [r4, #4]
    ead0:	e5961004 	ldr	r1, [r6, #4]
    ead4:	e3510000 	cmp	r1, #0
    ead8:	01a01005 	moveq	r1, r5
    eadc:	eb000456 	bl	fc3c <strcpy>
    eae0:	e1a00004 	mov	r0, r4
    eae4:	e8bd8070 	pop	{r4, r5, r6, pc}
    eae8:	00010d70 	.word	0x00010d70

0000eaec <CString::GetLength() const>:
    eaec:	e5900004 	ldr	r0, [r0, #4]
    eaf0:	e3500000 	cmp	r0, #0
    eaf4:	012fff1e 	bxeq	lr
    eaf8:	ea0003d1 	b	fa44 <strlen>

0000eafc <CString::Append(char const*)>:
    eafc:	e92d4070 	push	{r4, r5, r6, lr}
    eb00:	e3a03001 	mov	r3, #1
    eb04:	e1a04000 	mov	r4, r0
    eb08:	e5900004 	ldr	r0, [r0, #4]
    eb0c:	e1a06001 	mov	r6, r1
    eb10:	e3500000 	cmp	r0, #0
    eb14:	e5843008 	str	r3, [r4, #8]
    eb18:	0a000003 	beq	eb2c <CString::Append(char const*)+0x30>
    eb1c:	eb0003c8 	bl	fa44 <strlen>
    eb20:	e5943008 	ldr	r3, [r4, #8]
    eb24:	e0830000 	add	r0, r3, r0
    eb28:	e5840008 	str	r0, [r4, #8]
    eb2c:	e1a00006 	mov	r0, r6
    eb30:	eb0003c3 	bl	fa44 <strlen>
    eb34:	e5943008 	ldr	r3, [r4, #8]
    eb38:	e0800003 	add	r0, r0, r3
    eb3c:	e5840008 	str	r0, [r4, #8]
    eb40:	ebfff8e2 	bl	ced0 <operator new[](unsigned int)>
    eb44:	e5941004 	ldr	r1, [r4, #4]
    eb48:	e1a05000 	mov	r5, r0
    eb4c:	e3510000 	cmp	r1, #0
    eb50:	05c01000 	strbeq	r1, [r0]
    eb54:	0a000004 	beq	eb6c <CString::Append(char const*)+0x70>
    eb58:	eb000437 	bl	fc3c <strcpy>
    eb5c:	e5940004 	ldr	r0, [r4, #4]
    eb60:	e3500000 	cmp	r0, #0
    eb64:	0a000000 	beq	eb6c <CString::Append(char const*)+0x70>
    eb68:	ebfff8da 	bl	ced8 <operator delete[](void*)>
    eb6c:	e1a01006 	mov	r1, r6
    eb70:	e1a00005 	mov	r0, r5
    eb74:	eb00044e 	bl	fcb4 <strcat>
    eb78:	e5845004 	str	r5, [r4, #4]
    eb7c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000eb80 <CString::Compare(char const*) const>:
    eb80:	e5900004 	ldr	r0, [r0, #4]
    eb84:	ea0003b8 	b	fa6c <strcmp>

0000eb88 <CString::Find(char) const>:
    eb88:	e5902004 	ldr	r2, [r0, #4]
    eb8c:	e1d230d0 	ldrsb	r3, [r2]
    eb90:	e3530000 	cmp	r3, #0
    eb94:	0a000009 	beq	ebc0 <CString::Find(char) const+0x38>
    eb98:	e1510003 	cmp	r1, r3
    eb9c:	e3a00000 	mov	r0, #0
    eba0:	1a000002 	bne	ebb0 <CString::Find(char) const+0x28>
    eba4:	ea000007 	b	ebc8 <CString::Find(char) const+0x40>
    eba8:	e1530001 	cmp	r3, r1
    ebac:	012fff1e 	bxeq	lr
    ebb0:	e1f230d1 	ldrsb	r3, [r2, #1]!
    ebb4:	e2800001 	add	r0, r0, #1
    ebb8:	e3530000 	cmp	r3, #0
    ebbc:	1afffff9 	bne	eba8 <CString::Find(char) const+0x20>
    ebc0:	e3e00000 	mvn	r0, #0
    ebc4:	e12fff1e 	bx	lr
    ebc8:	e12fff1e 	bx	lr

0000ebcc <CString::PutChar(char, unsigned int)>:
    ebcc:	e92d4070 	push	{r4, r5, r6, lr}
    ebd0:	e2524000 	subs	r4, r2, #0
    ebd4:	08bd8070 	popeq	{r4, r5, r6, pc}
    ebd8:	e1a06001 	mov	r6, r1
    ebdc:	e1a01004 	mov	r1, r4
    ebe0:	e1a05000 	mov	r5, r0
    ebe4:	ebffff62 	bl	e974 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ebe8:	e2443001 	sub	r3, r4, #1
    ebec:	e595200c 	ldr	r2, [r5, #12]
    ebf0:	e2433001 	sub	r3, r3, #1
    ebf4:	e2820001 	add	r0, r2, #1
    ebf8:	e3730001 	cmn	r3, #1
    ebfc:	e585000c 	str	r0, [r5, #12]
    ec00:	e5c26000 	strb	r6, [r2]
    ec04:	1afffff8 	bne	ebec <CString::PutChar(char, unsigned int)+0x20>
    ec08:	e8bd8070 	pop	{r4, r5, r6, pc}

0000ec0c <CString::PutString(char const*)>:
    ec0c:	e92d4070 	push	{r4, r5, r6, lr}
    ec10:	e1a04000 	mov	r4, r0
    ec14:	e1a00001 	mov	r0, r1
    ec18:	e1a05001 	mov	r5, r1
    ec1c:	eb000388 	bl	fa44 <strlen>
    ec20:	e2506000 	subs	r6, r0, #0
    ec24:	0a000002 	beq	ec34 <CString::PutString(char const*)+0x28>
    ec28:	e1a01006 	mov	r1, r6
    ec2c:	e1a00004 	mov	r0, r4
    ec30:	ebffff4f 	bl	e974 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ec34:	e1a01005 	mov	r1, r5
    ec38:	e594000c 	ldr	r0, [r4, #12]
    ec3c:	eb0003fe 	bl	fc3c <strcpy>
    ec40:	e594100c 	ldr	r1, [r4, #12]
    ec44:	e0811006 	add	r1, r1, r6
    ec48:	e584100c 	str	r1, [r4, #12]
    ec4c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000ec50 <CString::Replace(char const*, char const*)>:
    ec50:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ec54:	e1d180d0 	ldrsb	r8, [r1]
    ec58:	e24dd014 	sub	sp, sp, #20
    ec5c:	e3580000 	cmp	r8, #0
    ec60:	1a000002 	bne	ec70 <CString::Replace(char const*, char const*)+0x20>
    ec64:	e1a00008 	mov	r0, r8
    ec68:	e28dd014 	add	sp, sp, #20
    ec6c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ec70:	e1a0a000 	mov	sl, r0
    ec74:	e1a07001 	mov	r7, r1
    ec78:	e5901004 	ldr	r1, [r0, #4]
    ec7c:	e1a0000d 	mov	r0, sp
    ec80:	e1a09002 	mov	r9, r2
    ec84:	ebffff5a 	bl	e9f4 <CString::CString(char const*)>
    ec88:	e59a0004 	ldr	r0, [sl, #4]
    ec8c:	e3500000 	cmp	r0, #0
    ec90:	0a000000 	beq	ec98 <CString::Replace(char const*, char const*)+0x48>
    ec94:	ebfff88f 	bl	ced8 <operator delete[](void*)>
    ec98:	e3a00040 	mov	r0, #64	; 0x40
    ec9c:	e58a0008 	str	r0, [sl, #8]
    eca0:	ebfff88a 	bl	ced0 <operator new[](unsigned int)>
    eca4:	e3a08000 	mov	r8, #0
    eca8:	e3a06001 	mov	r6, #1
    ecac:	e59d4004 	ldr	r4, [sp, #4]
    ecb0:	e58a0004 	str	r0, [sl, #4]
    ecb4:	e58a000c 	str	r0, [sl, #12]
    ecb8:	e1d710d0 	ldrsb	r1, [r7]
    ecbc:	e1a00004 	mov	r0, r4
    ecc0:	eb00040c 	bl	fcf8 <strchr>
    ecc4:	e2505000 	subs	r5, r0, #0
    ecc8:	0a00002d 	beq	ed84 <CString::Replace(char const*, char const*)+0x134>
    eccc:	e1540005 	cmp	r4, r5
    ecd0:	2a000039 	bcs	edbc <CString::Replace(char const*, char const*)+0x16c>
    ecd4:	e1a01006 	mov	r1, r6
    ecd8:	e1a0000a 	mov	r0, sl
    ecdc:	e0d4b0d1 	ldrsb	fp, [r4], #1
    ece0:	ebffff23 	bl	e974 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ece4:	e59a300c 	ldr	r3, [sl, #12]
    ece8:	e1550004 	cmp	r5, r4
    ecec:	e2832001 	add	r2, r3, #1
    ecf0:	e58a200c 	str	r2, [sl, #12]
    ecf4:	e5c3b000 	strb	fp, [r3]
    ecf8:	1afffff5 	bne	ecd4 <CString::Replace(char const*, char const*)+0x84>
    ecfc:	e1a0c005 	mov	ip, r5
    ed00:	e2854001 	add	r4, r5, #1
    ed04:	e1d730d1 	ldrsb	r3, [r7, #1]
    ed08:	e2871001 	add	r1, r7, #1
    ed0c:	e3530000 	cmp	r3, #0
    ed10:	0a00000c 	beq	ed48 <CString::Replace(char const*, char const*)+0xf8>
    ed14:	e1d520d1 	ldrsb	r2, [r5, #1]
    ed18:	e1520003 	cmp	r2, r3
    ed1c:	1a00000e 	bne	ed5c <CString::Replace(char const*, char const*)+0x10c>
    ed20:	e2853002 	add	r3, r5, #2
    ed24:	ea000003 	b	ed38 <CString::Replace(char const*, char const*)+0xe8>
    ed28:	e1d400d0 	ldrsb	r0, [r4]
    ed2c:	e2833001 	add	r3, r3, #1
    ed30:	e1500002 	cmp	r0, r2
    ed34:	1a000008 	bne	ed5c <CString::Replace(char const*, char const*)+0x10c>
    ed38:	e1f120d1 	ldrsb	r2, [r1, #1]!
    ed3c:	e1a04003 	mov	r4, r3
    ed40:	e3520000 	cmp	r2, #0
    ed44:	1afffff7 	bne	ed28 <CString::Replace(char const*, char const*)+0xd8>
    ed48:	e1a01009 	mov	r1, r9
    ed4c:	e1a0000a 	mov	r0, sl
    ed50:	e2888001 	add	r8, r8, #1
    ed54:	ebffffac 	bl	ec0c <CString::PutString(char const*)>
    ed58:	eaffffd6 	b	ecb8 <CString::Replace(char const*, char const*)+0x68>
    ed5c:	e1a01006 	mov	r1, r6
    ed60:	e1a0000a 	mov	r0, sl
    ed64:	e1dc50d0 	ldrsb	r5, [ip]
    ed68:	e28c4001 	add	r4, ip, #1
    ed6c:	ebffff00 	bl	e974 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ed70:	e59a300c 	ldr	r3, [sl, #12]
    ed74:	e2832001 	add	r2, r3, #1
    ed78:	e58a200c 	str	r2, [sl, #12]
    ed7c:	e5c35000 	strb	r5, [r3]
    ed80:	eaffffcc 	b	ecb8 <CString::Replace(char const*, char const*)+0x68>
    ed84:	e1a0000a 	mov	r0, sl
    ed88:	e1a01004 	mov	r1, r4
    ed8c:	ebffff9e 	bl	ec0c <CString::PutString(char const*)>
    ed90:	e59a200c 	ldr	r2, [sl, #12]
    ed94:	e59f302c 	ldr	r3, [pc, #44]	; edc8 <CString::Replace(char const*, char const*)+0x178>
    ed98:	e5c25000 	strb	r5, [r2]
    ed9c:	e59d0004 	ldr	r0, [sp, #4]
    eda0:	e58d3000 	str	r3, [sp]
    eda4:	e3500000 	cmp	r0, #0
    eda8:	0affffad 	beq	ec64 <CString::Replace(char const*, char const*)+0x14>
    edac:	ebfff849 	bl	ced8 <operator delete[](void*)>
    edb0:	e1a00008 	mov	r0, r8
    edb4:	e28dd014 	add	sp, sp, #20
    edb8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    edbc:	e1a0c004 	mov	ip, r4
    edc0:	e2854001 	add	r4, r5, #1
    edc4:	eaffffce 	b	ed04 <CString::Replace(char const*, char const*)+0xb4>
    edc8:	000111ac 	.word	0x000111ac

0000edcc <CString::ReserveSpace(unsigned int)>:
    edcc:	e3510000 	cmp	r1, #0
    edd0:	012fff1e 	bxeq	lr
    edd4:	eafffee6 	b	e974 <CString::ReserveSpace(unsigned int) [clone .part.0]>

0000edd8 <CString::ntoa(char*, unsigned long, unsigned int, bool)>:
    edd8:	e1510002 	cmp	r1, r2
    eddc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    ede0:	e1a05001 	mov	r5, r1
    ede4:	e1a07002 	mov	r7, r2
    ede8:	e1a09000 	mov	r9, r0
    edec:	e1a08003 	mov	r8, r3
    edf0:	23a0a001 	movcs	sl, #1
    edf4:	3a000022 	bcc	ee84 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0xac>
    edf8:	e00a0a97 	mul	sl, r7, sl
    edfc:	e1a00005 	mov	r0, r5
    ee00:	e1a0100a 	mov	r1, sl
    ee04:	eb000510 	bl	1024c <__aeabi_uidiv>
    ee08:	e1500007 	cmp	r0, r7
    ee0c:	e1a04000 	mov	r4, r0
    ee10:	2afffff8 	bcs	edf8 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x20>
    ee14:	e3580000 	cmp	r8, #0
    ee18:	13a08037 	movne	r8, #55	; 0x37
    ee1c:	03a08057 	moveq	r8, #87	; 0x57
    ee20:	e1a06009 	mov	r6, r9
    ee24:	ea000003 	b	ee38 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x60>
    ee28:	e1a0100a 	mov	r1, sl
    ee2c:	e1a00005 	mov	r0, r5
    ee30:	eb000505 	bl	1024c <__aeabi_uidiv>
    ee34:	e1a04000 	mov	r4, r0
    ee38:	e1a00005 	mov	r0, r5
    ee3c:	e1a0100a 	mov	r1, sl
    ee40:	eb00053e 	bl	10340 <__aeabi_uidivmod>
    ee44:	e3540009 	cmp	r4, #9
    ee48:	e2843030 	add	r3, r4, #48	; 0x30
    ee4c:	80884004 	addhi	r4, r8, r4
    ee50:	96af4073 	sxtbls	r4, r3
    ee54:	86af4074 	sxtbhi	r4, r4
    ee58:	e2866001 	add	r6, r6, #1
    ee5c:	e1a0000a 	mov	r0, sl
    ee60:	e1a05001 	mov	r5, r1
    ee64:	e5464001 	strb	r4, [r6, #-1]
    ee68:	e1a01007 	mov	r1, r7
    ee6c:	eb0004f6 	bl	1024c <__aeabi_uidiv>
    ee70:	e250a000 	subs	sl, r0, #0
    ee74:	1affffeb 	bne	ee28 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x50>
    ee78:	e5c6a000 	strb	sl, [r6]
    ee7c:	e1a00009 	mov	r0, r9
    ee80:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    ee84:	e1a04001 	mov	r4, r1
    ee88:	e3a0a001 	mov	sl, #1
    ee8c:	eaffffe0 	b	ee14 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x3c>

0000ee90 <CString::ftoa(char*, double, unsigned int)>:
    ee90:	eeb50bc0 	vcmpe.f64	d0, #0.0
    ee94:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    ee98:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ee9c:	ed9f7b95 	vldr	d7, [pc, #596]	; f0f8 <CString::ftoa(char*, double, unsigned int)+0x268>
    eea0:	ed2d8b02 	vpush	{d8}
    eea4:	eeb08b40 	vmov.f64	d8, d0
    eea8:	4eb18b40 	vnegmi.f64	d8, d0
    eeac:	43a0302d 	movmi	r3, #45	; 0x2d
    eeb0:	eeb48bc7 	vcmpe.f64	d8, d7
    eeb4:	45c03000 	strbmi	r3, [r0]
    eeb8:	4280b001 	addmi	fp, r0, #1
    eebc:	51a0b000 	movpl	fp, r0
    eec0:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    eec4:	e24dd01c 	sub	sp, sp, #28
    eec8:	e1a0a000 	mov	sl, r0
    eecc:	e58d1004 	str	r1, [sp, #4]
    eed0:	ca000079 	bgt	f0bc <CString::ftoa(char*, double, unsigned int)+0x22c>
    eed4:	eefc7bc8 	vcvt.u32.f64	s15, d8
    eed8:	ee177a90 	vmov	r7, s15
    eedc:	e3570009 	cmp	r7, #9
    eee0:	83a04001 	movhi	r4, #1
    eee4:	9a00007b 	bls	f0d8 <CString::ftoa(char*, double, unsigned int)+0x248>
    eee8:	e0844104 	add	r4, r4, r4, lsl #2
    eeec:	e1a04084 	lsl	r4, r4, #1
    eef0:	e1a01004 	mov	r1, r4
    eef4:	e1a00007 	mov	r0, r7
    eef8:	eb0004d3 	bl	1024c <__aeabi_uidiv>
    eefc:	e3500009 	cmp	r0, #9
    ef00:	e1a05000 	mov	r5, r0
    ef04:	8afffff7 	bhi	eee8 <CString::ftoa(char*, double, unsigned int)+0x58>
    ef08:	e1a0600b 	mov	r6, fp
    ef0c:	e1a09007 	mov	r9, r7
    ef10:	e59f81f0 	ldr	r8, [pc, #496]	; f108 <CString::ftoa(char*, double, unsigned int)+0x278>
    ef14:	ea000003 	b	ef28 <CString::ftoa(char*, double, unsigned int)+0x98>
    ef18:	e1a01004 	mov	r1, r4
    ef1c:	e1a00009 	mov	r0, r9
    ef20:	eb0004c9 	bl	1024c <__aeabi_uidiv>
    ef24:	e1a05000 	mov	r5, r0
    ef28:	e1a00009 	mov	r0, r9
    ef2c:	e1a01004 	mov	r1, r4
    ef30:	eb000502 	bl	10340 <__aeabi_uidivmod>
    ef34:	e0843498 	umull	r3, r4, r8, r4
    ef38:	e3550009 	cmp	r5, #9
    ef3c:	e2852030 	add	r2, r5, #48	; 0x30
    ef40:	82855057 	addhi	r5, r5, #87	; 0x57
    ef44:	96af5072 	sxtbls	r5, r2
    ef48:	86af5075 	sxtbhi	r5, r5
    ef4c:	e2866001 	add	r6, r6, #1
    ef50:	e1b041a4 	lsrs	r4, r4, #3
    ef54:	e1a09001 	mov	r9, r1
    ef58:	e5465001 	strb	r5, [r6, #-1]
    ef5c:	1affffed 	bne	ef18 <CString::ftoa(char*, double, unsigned int)+0x88>
    ef60:	e59d3004 	ldr	r3, [sp, #4]
    ef64:	e5c64000 	strb	r4, [r6]
    ef68:	e3530000 	cmp	r3, #0
    ef6c:	1a000003 	bne	ef80 <CString::ftoa(char*, double, unsigned int)+0xf0>
    ef70:	e1a0000a 	mov	r0, sl
    ef74:	e28dd01c 	add	sp, sp, #28
    ef78:	ecbd8b02 	vpop	{d8}
    ef7c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ef80:	e1a0000b 	mov	r0, fp
    ef84:	eb0002ae 	bl	fa44 <strlen>
    ef88:	e59d3004 	ldr	r3, [sp, #4]
    ef8c:	e08b2000 	add	r2, fp, r0
    ef90:	e3530009 	cmp	r3, #9
    ef94:	31a09003 	movcc	r9, r3
    ef98:	23a09009 	movcs	r9, #9
    ef9c:	e3a0302e 	mov	r3, #46	; 0x2e
    efa0:	e3590001 	cmp	r9, #1
    efa4:	e7cb3000 	strb	r3, [fp, r0]
    efa8:	e58d2004 	str	r2, [sp, #4]
    efac:	e282b001 	add	fp, r2, #1
    efb0:	0a00004e 	beq	f0f0 <CString::ftoa(char*, double, unsigned int)+0x260>
    efb4:	e3a02002 	mov	r2, #2
    efb8:	e3a0300a 	mov	r3, #10
    efbc:	e2822001 	add	r2, r2, #1
    efc0:	e0833103 	add	r3, r3, r3, lsl #2
    efc4:	e1520009 	cmp	r2, r9
    efc8:	e1a03083 	lsl	r3, r3, #1
    efcc:	9afffffa 	bls	efbc <CString::ftoa(char*, double, unsigned int)+0x12c>
    efd0:	ee073a90 	vmov	s15, r3
    efd4:	eeb87b67 	vcvt.f64.u32	d7, s15
    efd8:	ee067a90 	vmov	s13, r7
    efdc:	eeb86b66 	vcvt.f64.u32	d6, s13
    efe0:	ee386b46 	vsub.f64	d6, d8, d6
    efe4:	ee267b07 	vmul.f64	d7, d6, d7
    efe8:	eefc7bc7 	vcvt.u32.f64	s15, d7
    efec:	ee178a90 	vmov	r8, s15
    eff0:	e3580009 	cmp	r8, #9
    eff4:	83a04001 	movhi	r4, #1
    eff8:	9a000039 	bls	f0e4 <CString::ftoa(char*, double, unsigned int)+0x254>
    effc:	e0844104 	add	r4, r4, r4, lsl #2
    f000:	e1a04084 	lsl	r4, r4, #1
    f004:	e1a01004 	mov	r1, r4
    f008:	e1a00008 	mov	r0, r8
    f00c:	eb00048e 	bl	1024c <__aeabi_uidiv>
    f010:	e3500009 	cmp	r0, #9
    f014:	e1a05000 	mov	r5, r0
    f018:	8afffff7 	bhi	effc <CString::ftoa(char*, double, unsigned int)+0x16c>
    f01c:	e28d600c 	add	r6, sp, #12
    f020:	e59f70e0 	ldr	r7, [pc, #224]	; f108 <CString::ftoa(char*, double, unsigned int)+0x278>
    f024:	ea000003 	b	f038 <CString::ftoa(char*, double, unsigned int)+0x1a8>
    f028:	e1a01004 	mov	r1, r4
    f02c:	e1a00008 	mov	r0, r8
    f030:	eb000485 	bl	1024c <__aeabi_uidiv>
    f034:	e1a05000 	mov	r5, r0
    f038:	e1a00008 	mov	r0, r8
    f03c:	e1a01004 	mov	r1, r4
    f040:	eb0004be 	bl	10340 <__aeabi_uidivmod>
    f044:	e0843497 	umull	r3, r4, r7, r4
    f048:	e3550009 	cmp	r5, #9
    f04c:	e2852030 	add	r2, r5, #48	; 0x30
    f050:	82855057 	addhi	r5, r5, #87	; 0x57
    f054:	96af5072 	sxtbls	r5, r2
    f058:	86af5075 	sxtbhi	r5, r5
    f05c:	e2866001 	add	r6, r6, #1
    f060:	e1b041a4 	lsrs	r4, r4, #3
    f064:	e1a08001 	mov	r8, r1
    f068:	e5465001 	strb	r5, [r6, #-1]
    f06c:	1affffed 	bne	f028 <CString::ftoa(char*, double, unsigned int)+0x198>
    f070:	e28d000c 	add	r0, sp, #12
    f074:	e5c64000 	strb	r4, [r6]
    f078:	eb000271 	bl	fa44 <strlen>
    f07c:	e0599000 	subs	r9, r9, r0
    f080:	0a000006 	beq	f0a0 <CString::ftoa(char*, double, unsigned int)+0x210>
    f084:	e3a02030 	mov	r2, #48	; 0x30
    f088:	e59d8004 	ldr	r8, [sp, #4]
    f08c:	e0883009 	add	r3, r8, r9
    f090:	e5e82001 	strb	r2, [r8, #1]!
    f094:	e1580003 	cmp	r8, r3
    f098:	1afffffc 	bne	f090 <CString::ftoa(char*, double, unsigned int)+0x200>
    f09c:	e08bb009 	add	fp, fp, r9
    f0a0:	e28d100c 	add	r1, sp, #12
    f0a4:	e1a0000b 	mov	r0, fp
    f0a8:	eb0002e3 	bl	fc3c <strcpy>
    f0ac:	e1a0000a 	mov	r0, sl
    f0b0:	e28dd01c 	add	sp, sp, #28
    f0b4:	ecbd8b02 	vpop	{d8}
    f0b8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f0bc:	e1a0000b 	mov	r0, fp
    f0c0:	e59f1044 	ldr	r1, [pc, #68]	; f10c <CString::ftoa(char*, double, unsigned int)+0x27c>
    f0c4:	eb0002dc 	bl	fc3c <strcpy>
    f0c8:	e1a0000a 	mov	r0, sl
    f0cc:	e28dd01c 	add	sp, sp, #28
    f0d0:	ecbd8b02 	vpop	{d8}
    f0d4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f0d8:	ee175a90 	vmov	r5, s15
    f0dc:	e3a04001 	mov	r4, #1
    f0e0:	eaffff88 	b	ef08 <CString::ftoa(char*, double, unsigned int)+0x78>
    f0e4:	ee175a90 	vmov	r5, s15
    f0e8:	e3a04001 	mov	r4, #1
    f0ec:	eaffffca 	b	f01c <CString::ftoa(char*, double, unsigned int)+0x18c>
    f0f0:	ed9f7b02 	vldr	d7, [pc, #8]	; f100 <CString::ftoa(char*, double, unsigned int)+0x270>
    f0f4:	eaffffb7 	b	efd8 <CString::ftoa(char*, double, unsigned int)+0x148>
    f0f8:	ffe00000 	.word	0xffe00000
    f0fc:	41efffff 	.word	0x41efffff
    f100:	00000000 	.word	0x00000000
    f104:	40240000 	.word	0x40240000
    f108:	cccccccd 	.word	0xcccccccd
    f10c:	000111b4 	.word	0x000111b4

0000f110 <CString::FormatV(char const*, std::__va_list)>:
    f110:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f114:	e1a0b000 	mov	fp, r0
    f118:	e5900004 	ldr	r0, [r0, #4]
    f11c:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    f120:	e3500000 	cmp	r0, #0
    f124:	e1a05001 	mov	r5, r1
    f128:	e58d2000 	str	r2, [sp]
    f12c:	0a000000 	beq	f134 <CString::FormatV(char const*, std::__va_list)+0x24>
    f130:	ebfff768 	bl	ced8 <operator delete[](void*)>
    f134:	e3a00040 	mov	r0, #64	; 0x40
    f138:	e58b0008 	str	r0, [fp, #8]
    f13c:	ebfff763 	bl	ced0 <operator new[](unsigned int)>
    f140:	e58b0004 	str	r0, [fp, #4]
    f144:	e58b000c 	str	r0, [fp, #12]
    f148:	e1d540d0 	ldrsb	r4, [r5]
    f14c:	e3540000 	cmp	r4, #0
    f150:	0a0000a2 	beq	f3e0 <CString::FormatV(char const*, std::__va_list)+0x2d0>
    f154:	e3540025 	cmp	r4, #37	; 0x25
    f158:	13a01001 	movne	r1, #1
    f15c:	11a0000b 	movne	r0, fp
    f160:	1a000152 	bne	f6b0 <CString::FormatV(char const*, std::__va_list)+0x5a0>
    f164:	e1d560d1 	ldrsb	r6, [r5, #1]
    f168:	e3560025 	cmp	r6, #37	; 0x25
    f16c:	0a000165 	beq	f708 <CString::FormatV(char const*, std::__va_list)+0x5f8>
    f170:	e356002d 	cmp	r6, #45	; 0x2d
    f174:	03a03001 	moveq	r3, #1
    f178:	13a03000 	movne	r3, #0
    f17c:	01d560d2 	ldrsbeq	r6, [r5, #2]
    f180:	158d3004 	strne	r3, [sp, #4]
    f184:	058d3004 	streq	r3, [sp, #4]
    f188:	02855002 	addeq	r5, r5, #2
    f18c:	12855001 	addne	r5, r5, #1
    f190:	e3560030 	cmp	r6, #48	; 0x30
    f194:	03a03001 	moveq	r3, #1
    f198:	13a03000 	movne	r3, #0
    f19c:	01d560d1 	ldrsbeq	r6, [r5, #1]
    f1a0:	058d3008 	streq	r3, [sp, #8]
    f1a4:	00855003 	addeq	r5, r5, r3
    f1a8:	158d3008 	strne	r3, [sp, #8]
    f1ac:	e2463030 	sub	r3, r6, #48	; 0x30
    f1b0:	e6ef3073 	uxtb	r3, r3
    f1b4:	e3530009 	cmp	r3, #9
    f1b8:	e3a04000 	mov	r4, #0
    f1bc:	8a000007 	bhi	f1e0 <CString::FormatV(char const*, std::__va_list)+0xd0>
    f1c0:	e0844104 	add	r4, r4, r4, lsl #2
    f1c4:	e0864084 	add	r4, r6, r4, lsl #1
    f1c8:	e1f560d1 	ldrsb	r6, [r5, #1]!
    f1cc:	e2444030 	sub	r4, r4, #48	; 0x30
    f1d0:	e2463030 	sub	r3, r6, #48	; 0x30
    f1d4:	e6ef3073 	uxtb	r3, r3
    f1d8:	e3530009 	cmp	r3, #9
    f1dc:	9afffff7 	bls	f1c0 <CString::FormatV(char const*, std::__va_list)+0xb0>
    f1e0:	e356002e 	cmp	r6, #46	; 0x2e
    f1e4:	0a000137 	beq	f6c8 <CString::FormatV(char const*, std::__va_list)+0x5b8>
    f1e8:	e3a01006 	mov	r1, #6
    f1ec:	e1d570d0 	ldrsb	r7, [r5]
    f1f0:	e357006c 	cmp	r7, #108	; 0x6c
    f1f4:	03a02001 	moveq	r2, #1
    f1f8:	01d570d1 	ldrsbeq	r7, [r5, #1]
    f1fc:	00855002 	addeq	r5, r5, r2
    f200:	e2473058 	sub	r3, r7, #88	; 0x58
    f204:	e3530020 	cmp	r3, #32
    f208:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    f20c:	ea00011c 	b	f684 <CString::FormatV(char const*, std::__va_list)+0x574>
    f210:	0000f600 	.word	0x0000f600
    f214:	0000f684 	.word	0x0000f684
    f218:	0000f684 	.word	0x0000f684
    f21c:	0000f684 	.word	0x0000f684
    f220:	0000f684 	.word	0x0000f684
    f224:	0000f684 	.word	0x0000f684
    f228:	0000f684 	.word	0x0000f684
    f22c:	0000f684 	.word	0x0000f684
    f230:	0000f684 	.word	0x0000f684
    f234:	0000f684 	.word	0x0000f684
    f238:	0000f684 	.word	0x0000f684
    f23c:	0000f58c 	.word	0x0000f58c
    f240:	0000f468 	.word	0x0000f468
    f244:	0000f684 	.word	0x0000f684
    f248:	0000f3f0 	.word	0x0000f3f0
    f24c:	0000f684 	.word	0x0000f684
    f250:	0000f684 	.word	0x0000f684
    f254:	0000f468 	.word	0x0000f468
    f258:	0000f684 	.word	0x0000f684
    f25c:	0000f684 	.word	0x0000f684
    f260:	0000f684 	.word	0x0000f684
    f264:	0000f684 	.word	0x0000f684
    f268:	0000f684 	.word	0x0000f684
    f26c:	0000f294 	.word	0x0000f294
    f270:	0000f600 	.word	0x0000f600
    f274:	0000f684 	.word	0x0000f684
    f278:	0000f684 	.word	0x0000f684
    f27c:	0000f610 	.word	0x0000f610
    f280:	0000f684 	.word	0x0000f684
    f284:	0000f608 	.word	0x0000f608
    f288:	0000f684 	.word	0x0000f684
    f28c:	0000f684 	.word	0x0000f684
    f290:	0000f600 	.word	0x0000f600
    f294:	e3a09008 	mov	r9, #8
    f298:	e59d3000 	ldr	r3, [sp]
    f29c:	e5936000 	ldr	r6, [r3]
    f2a0:	e2833004 	add	r3, r3, #4
    f2a4:	e1560009 	cmp	r6, r9
    f2a8:	e58d3000 	str	r3, [sp]
    f2ac:	23a0a001 	movcs	sl, #1
    f2b0:	3a0001aa 	bcc	f960 <CString::FormatV(char const*, std::__va_list)+0x850>
    f2b4:	e00a0a99 	mul	sl, r9, sl
    f2b8:	e1a00006 	mov	r0, r6
    f2bc:	e1a0100a 	mov	r1, sl
    f2c0:	eb0003e1 	bl	1024c <__aeabi_uidiv>
    f2c4:	e1590000 	cmp	r9, r0
    f2c8:	9afffff9 	bls	f2b4 <CString::FormatV(char const*, std::__va_list)+0x1a4>
    f2cc:	e1a03000 	mov	r3, r0
    f2d0:	e3570058 	cmp	r7, #88	; 0x58
    f2d4:	13a07057 	movne	r7, #87	; 0x57
    f2d8:	03a07037 	moveq	r7, #55	; 0x37
    f2dc:	e1a02005 	mov	r2, r5
    f2e0:	e58d400c 	str	r4, [sp, #12]
    f2e4:	e1a0500a 	mov	r5, sl
    f2e8:	e1a04007 	mov	r4, r7
    f2ec:	e28d8010 	add	r8, sp, #16
    f2f0:	e1a07006 	mov	r7, r6
    f2f4:	e1a0a002 	mov	sl, r2
    f2f8:	e1a06003 	mov	r6, r3
    f2fc:	ea000003 	b	f310 <CString::FormatV(char const*, std::__va_list)+0x200>
    f300:	e1a01005 	mov	r1, r5
    f304:	e1a00007 	mov	r0, r7
    f308:	eb0003cf 	bl	1024c <__aeabi_uidiv>
    f30c:	e1a06000 	mov	r6, r0
    f310:	e1a00007 	mov	r0, r7
    f314:	e1a01005 	mov	r1, r5
    f318:	eb000408 	bl	10340 <__aeabi_uidivmod>
    f31c:	e3560009 	cmp	r6, #9
    f320:	e2862030 	add	r2, r6, #48	; 0x30
    f324:	80846006 	addhi	r6, r4, r6
    f328:	96af6072 	sxtbls	r6, r2
    f32c:	86af6076 	sxtbhi	r6, r6
    f330:	e2888001 	add	r8, r8, #1
    f334:	e1a00005 	mov	r0, r5
    f338:	e1a07001 	mov	r7, r1
    f33c:	e5486001 	strb	r6, [r8, #-1]
    f340:	e1a01009 	mov	r1, r9
    f344:	eb0003c0 	bl	1024c <__aeabi_uidiv>
    f348:	e2505000 	subs	r5, r0, #0
    f34c:	1affffeb 	bne	f300 <CString::FormatV(char const*, std::__va_list)+0x1f0>
    f350:	e1a0300a 	mov	r3, sl
    f354:	e1a0a005 	mov	sl, r5
    f358:	e28d0010 	add	r0, sp, #16
    f35c:	e5c8a000 	strb	sl, [r8]
    f360:	e1a05003 	mov	r5, r3
    f364:	e59d400c 	ldr	r4, [sp, #12]
    f368:	eb0001b5 	bl	fa44 <strlen>
    f36c:	e59d3004 	ldr	r3, [sp, #4]
    f370:	e1a06000 	mov	r6, r0
    f374:	e3530000 	cmp	r3, #0
    f378:	1a0000eb 	bne	f72c <CString::FormatV(char const*, std::__va_list)+0x61c>
    f37c:	e1500004 	cmp	r0, r4
    f380:	2a00000f 	bcs	f3c4 <CString::FormatV(char const*, std::__va_list)+0x2b4>
    f384:	e59d3008 	ldr	r3, [sp, #8]
    f388:	e0444000 	sub	r4, r4, r0
    f38c:	e3530000 	cmp	r3, #0
    f390:	e1a01004 	mov	r1, r4
    f394:	e1a0000b 	mov	r0, fp
    f398:	03a07020 	moveq	r7, #32
    f39c:	13a07030 	movne	r7, #48	; 0x30
    f3a0:	ebfffd73 	bl	e974 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f3a4:	e2443001 	sub	r3, r4, #1
    f3a8:	e59b200c 	ldr	r2, [fp, #12]
    f3ac:	e2433001 	sub	r3, r3, #1
    f3b0:	e2821001 	add	r1, r2, #1
    f3b4:	e3730001 	cmn	r3, #1
    f3b8:	e58b100c 	str	r1, [fp, #12]
    f3bc:	e5c27000 	strb	r7, [r2]
    f3c0:	1afffff8 	bne	f3a8 <CString::FormatV(char const*, std::__va_list)+0x298>
    f3c4:	e28d1010 	add	r1, sp, #16
    f3c8:	e1a0000b 	mov	r0, fp
    f3cc:	ebfffe0e 	bl	ec0c <CString::PutString(char const*)>
    f3d0:	e2855001 	add	r5, r5, #1
    f3d4:	e1d540d0 	ldrsb	r4, [r5]
    f3d8:	e3540000 	cmp	r4, #0
    f3dc:	1affff5c 	bne	f154 <CString::FormatV(char const*, std::__va_list)+0x44>
    f3e0:	e59b300c 	ldr	r3, [fp, #12]
    f3e4:	e5c34000 	strb	r4, [r3]
    f3e8:	e28dd02c 	add	sp, sp, #44	; 0x2c
    f3ec:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f3f0:	e59d3000 	ldr	r3, [sp]
    f3f4:	e28d0010 	add	r0, sp, #16
    f3f8:	e2833007 	add	r3, r3, #7
    f3fc:	e3c33007 	bic	r3, r3, #7
    f400:	ed930b00 	vldr	d0, [r3]
    f404:	e2833008 	add	r3, r3, #8
    f408:	e58d3000 	str	r3, [sp]
    f40c:	ebfffe9f 	bl	ee90 <CString::ftoa(char*, double, unsigned int)>
    f410:	e28d0010 	add	r0, sp, #16
    f414:	eb00018a 	bl	fa44 <strlen>
    f418:	e59d3004 	ldr	r3, [sp, #4]
    f41c:	e1a06000 	mov	r6, r0
    f420:	e3530000 	cmp	r3, #0
    f424:	1a000108 	bne	f84c <CString::FormatV(char const*, std::__va_list)+0x73c>
    f428:	e1500004 	cmp	r0, r4
    f42c:	2affffe4 	bcs	f3c4 <CString::FormatV(char const*, std::__va_list)+0x2b4>
    f430:	e0444000 	sub	r4, r4, r0
    f434:	e1a01004 	mov	r1, r4
    f438:	e1a0000b 	mov	r0, fp
    f43c:	ebfffd4c 	bl	e974 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f440:	e2443001 	sub	r3, r4, #1
    f444:	e59b200c 	ldr	r2, [fp, #12]
    f448:	e2433001 	sub	r3, r3, #1
    f44c:	e2821001 	add	r1, r2, #1
    f450:	e58b100c 	str	r1, [fp, #12]
    f454:	e3a01020 	mov	r1, #32
    f458:	e3730001 	cmn	r3, #1
    f45c:	e5c21000 	strb	r1, [r2]
    f460:	1afffff7 	bne	f444 <CString::FormatV(char const*, std::__va_list)+0x334>
    f464:	eaffffd6 	b	f3c4 <CString::FormatV(char const*, std::__va_list)+0x2b4>
    f468:	e59d3000 	ldr	r3, [sp]
    f46c:	e5936000 	ldr	r6, [r3]
    f470:	e2833004 	add	r3, r3, #4
    f474:	e3560000 	cmp	r6, #0
    f478:	b3a08001 	movlt	r8, #1
    f47c:	a3a08000 	movge	r8, #0
    f480:	e58d3000 	str	r3, [sp]
    f484:	b1a03008 	movlt	r3, r8
    f488:	b2666000 	rsblt	r6, r6, #0
    f48c:	b58d300c 	strlt	r3, [sp, #12]
    f490:	a58d800c 	strge	r8, [sp, #12]
    f494:	e3560009 	cmp	r6, #9
    f498:	e1a07006 	mov	r7, r6
    f49c:	c3a0a001 	movgt	sl, #1
    f4a0:	da00012b 	ble	f954 <CString::FormatV(char const*, std::__va_list)+0x844>
    f4a4:	e08aa10a 	add	sl, sl, sl, lsl #2
    f4a8:	e1a0a08a 	lsl	sl, sl, #1
    f4ac:	e1a0100a 	mov	r1, sl
    f4b0:	e1a00006 	mov	r0, r6
    f4b4:	eb000364 	bl	1024c <__aeabi_uidiv>
    f4b8:	e3500009 	cmp	r0, #9
    f4bc:	8afffff8 	bhi	f4a4 <CString::FormatV(char const*, std::__va_list)+0x394>
    f4c0:	e1a09000 	mov	r9, r0
    f4c4:	e28d6010 	add	r6, sp, #16
    f4c8:	ea000003 	b	f4dc <CString::FormatV(char const*, std::__va_list)+0x3cc>
    f4cc:	e1a0100a 	mov	r1, sl
    f4d0:	e1a00007 	mov	r0, r7
    f4d4:	eb00035c 	bl	1024c <__aeabi_uidiv>
    f4d8:	e1a09000 	mov	r9, r0
    f4dc:	e1a00007 	mov	r0, r7
    f4e0:	e1a0100a 	mov	r1, sl
    f4e4:	eb000395 	bl	10340 <__aeabi_uidivmod>
    f4e8:	e3590009 	cmp	r9, #9
    f4ec:	e2893030 	add	r3, r9, #48	; 0x30
    f4f0:	96af9073 	sxtbls	r9, r3
    f4f4:	e59f3494 	ldr	r3, [pc, #1172]	; f990 <CString::FormatV(char const*, std::__va_list)+0x880>
    f4f8:	82899057 	addhi	r9, r9, #87	; 0x57
    f4fc:	e08a3a93 	umull	r3, sl, r3, sl
    f500:	86af9079 	sxtbhi	r9, r9
    f504:	e2866001 	add	r6, r6, #1
    f508:	e1b0a1aa 	lsrs	sl, sl, #3
    f50c:	e1a07001 	mov	r7, r1
    f510:	e5469001 	strb	r9, [r6, #-1]
    f514:	1affffec 	bne	f4cc <CString::FormatV(char const*, std::__va_list)+0x3bc>
    f518:	e28d0010 	add	r0, sp, #16
    f51c:	e5c6a000 	strb	sl, [r6]
    f520:	eb000147 	bl	fa44 <strlen>
    f524:	e59d3004 	ldr	r3, [sp, #4]
    f528:	e0888000 	add	r8, r8, r0
    f52c:	e3530000 	cmp	r3, #0
    f530:	0a000090 	beq	f778 <CString::FormatV(char const*, std::__va_list)+0x668>
    f534:	e59d300c 	ldr	r3, [sp, #12]
    f538:	e3530000 	cmp	r3, #0
    f53c:	1a0000fb 	bne	f930 <CString::FormatV(char const*, std::__va_list)+0x820>
    f540:	e28d1010 	add	r1, sp, #16
    f544:	e1a0000b 	mov	r0, fp
    f548:	ebfffdaf 	bl	ec0c <CString::PutString(char const*)>
    f54c:	e1580004 	cmp	r8, r4
    f550:	2affff9e 	bcs	f3d0 <CString::FormatV(char const*, std::__va_list)+0x2c0>
    f554:	e0444008 	sub	r4, r4, r8
    f558:	e1a01004 	mov	r1, r4
    f55c:	e1a0000b 	mov	r0, fp
    f560:	ebfffd03 	bl	e974 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f564:	e2443001 	sub	r3, r4, #1
    f568:	e59b200c 	ldr	r2, [fp, #12]
    f56c:	e2433001 	sub	r3, r3, #1
    f570:	e2821001 	add	r1, r2, #1
    f574:	e58b100c 	str	r1, [fp, #12]
    f578:	e3a01020 	mov	r1, #32
    f57c:	e3730001 	cmn	r3, #1
    f580:	e5c21000 	strb	r1, [r2]
    f584:	1afffff7 	bne	f568 <CString::FormatV(char const*, std::__va_list)+0x458>
    f588:	eaffff90 	b	f3d0 <CString::FormatV(char const*, std::__va_list)+0x2c0>
    f58c:	e59d3004 	ldr	r3, [sp, #4]
    f590:	e3530000 	cmp	r3, #0
    f594:	e59d3000 	ldr	r3, [sp]
    f598:	e2836004 	add	r6, r3, #4
    f59c:	e1d370d0 	ldrsb	r7, [r3]
    f5a0:	1a000092 	bne	f7f0 <CString::FormatV(char const*, std::__va_list)+0x6e0>
    f5a4:	e3540001 	cmp	r4, #1
    f5a8:	9a00000b 	bls	f5dc <CString::FormatV(char const*, std::__va_list)+0x4cc>
    f5ac:	e2441001 	sub	r1, r4, #1
    f5b0:	e1a0000b 	mov	r0, fp
    f5b4:	ebfffcee 	bl	e974 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f5b8:	e2444002 	sub	r4, r4, #2
    f5bc:	e59b300c 	ldr	r3, [fp, #12]
    f5c0:	e2444001 	sub	r4, r4, #1
    f5c4:	e2832001 	add	r2, r3, #1
    f5c8:	e58b200c 	str	r2, [fp, #12]
    f5cc:	e3a02020 	mov	r2, #32
    f5d0:	e3740001 	cmn	r4, #1
    f5d4:	e5c32000 	strb	r2, [r3]
    f5d8:	1afffff7 	bne	f5bc <CString::FormatV(char const*, std::__va_list)+0x4ac>
    f5dc:	e3a01001 	mov	r1, #1
    f5e0:	e1a0000b 	mov	r0, fp
    f5e4:	ebfffce2 	bl	e974 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f5e8:	e59b300c 	ldr	r3, [fp, #12]
    f5ec:	e58d6000 	str	r6, [sp]
    f5f0:	e2832001 	add	r2, r3, #1
    f5f4:	e58b200c 	str	r2, [fp, #12]
    f5f8:	e5c37000 	strb	r7, [r3]
    f5fc:	eaffff73 	b	f3d0 <CString::FormatV(char const*, std::__va_list)+0x2c0>
    f600:	e3a09010 	mov	r9, #16
    f604:	eaffff23 	b	f298 <CString::FormatV(char const*, std::__va_list)+0x188>
    f608:	e3a0900a 	mov	r9, #10
    f60c:	eaffff21 	b	f298 <CString::FormatV(char const*, std::__va_list)+0x188>
    f610:	e59d3000 	ldr	r3, [sp]
    f614:	e5938000 	ldr	r8, [r3]
    f618:	e2836004 	add	r6, r3, #4
    f61c:	e1a00008 	mov	r0, r8
    f620:	eb000107 	bl	fa44 <strlen>
    f624:	e59d3004 	ldr	r3, [sp, #4]
    f628:	e1a07000 	mov	r7, r0
    f62c:	e3530000 	cmp	r3, #0
    f630:	1a000098 	bne	f898 <CString::FormatV(char const*, std::__va_list)+0x788>
    f634:	e1500004 	cmp	r0, r4
    f638:	2a00000c 	bcs	f670 <CString::FormatV(char const*, std::__va_list)+0x560>
    f63c:	e0444000 	sub	r4, r4, r0
    f640:	e1a01004 	mov	r1, r4
    f644:	e1a0000b 	mov	r0, fp
    f648:	ebfffcc9 	bl	e974 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f64c:	e2443001 	sub	r3, r4, #1
    f650:	e59b200c 	ldr	r2, [fp, #12]
    f654:	e2433001 	sub	r3, r3, #1
    f658:	e2821001 	add	r1, r2, #1
    f65c:	e58b100c 	str	r1, [fp, #12]
    f660:	e3a01020 	mov	r1, #32
    f664:	e3730001 	cmn	r3, #1
    f668:	e5c21000 	strb	r1, [r2]
    f66c:	1afffff7 	bne	f650 <CString::FormatV(char const*, std::__va_list)+0x540>
    f670:	e1a01008 	mov	r1, r8
    f674:	e1a0000b 	mov	r0, fp
    f678:	e58d6000 	str	r6, [sp]
    f67c:	ebfffd62 	bl	ec0c <CString::PutString(char const*)>
    f680:	eaffff52 	b	f3d0 <CString::FormatV(char const*, std::__va_list)+0x2c0>
    f684:	e3a01001 	mov	r1, #1
    f688:	e1a0000b 	mov	r0, fp
    f68c:	ebfffcb8 	bl	e974 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f690:	e3a01001 	mov	r1, #1
    f694:	e59b300c 	ldr	r3, [fp, #12]
    f698:	e1a0000b 	mov	r0, fp
    f69c:	e0832001 	add	r2, r3, r1
    f6a0:	e58b200c 	str	r2, [fp, #12]
    f6a4:	e3a02025 	mov	r2, #37	; 0x25
    f6a8:	e5c32000 	strb	r2, [r3]
    f6ac:	e1d540d0 	ldrsb	r4, [r5]
    f6b0:	ebfffcaf 	bl	e974 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f6b4:	e59b300c 	ldr	r3, [fp, #12]
    f6b8:	e2832001 	add	r2, r3, #1
    f6bc:	e58b200c 	str	r2, [fp, #12]
    f6c0:	e5c34000 	strb	r4, [r3]
    f6c4:	eaffff41 	b	f3d0 <CString::FormatV(char const*, std::__va_list)+0x2c0>
    f6c8:	e1d570d1 	ldrsb	r7, [r5, #1]
    f6cc:	e3a01000 	mov	r1, #0
    f6d0:	e2473030 	sub	r3, r7, #48	; 0x30
    f6d4:	e6ef3073 	uxtb	r3, r3
    f6d8:	e3530009 	cmp	r3, #9
    f6dc:	e2855001 	add	r5, r5, #1
    f6e0:	8afffec2 	bhi	f1f0 <CString::FormatV(char const*, std::__va_list)+0xe0>
    f6e4:	e0811101 	add	r1, r1, r1, lsl #2
    f6e8:	e0871081 	add	r1, r7, r1, lsl #1
    f6ec:	e1f570d1 	ldrsb	r7, [r5, #1]!
    f6f0:	e2411030 	sub	r1, r1, #48	; 0x30
    f6f4:	e2473030 	sub	r3, r7, #48	; 0x30
    f6f8:	e6ef3073 	uxtb	r3, r3
    f6fc:	e3530009 	cmp	r3, #9
    f700:	9afffff7 	bls	f6e4 <CString::FormatV(char const*, std::__va_list)+0x5d4>
    f704:	eafffeb9 	b	f1f0 <CString::FormatV(char const*, std::__va_list)+0xe0>
    f708:	e3a01001 	mov	r1, #1
    f70c:	e1a0000b 	mov	r0, fp
    f710:	ebfffc97 	bl	e974 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f714:	e59b300c 	ldr	r3, [fp, #12]
    f718:	e2855002 	add	r5, r5, #2
    f71c:	e2832001 	add	r2, r3, #1
    f720:	e58b200c 	str	r2, [fp, #12]
    f724:	e5c36000 	strb	r6, [r3]
    f728:	eafffe86 	b	f148 <CString::FormatV(char const*, std::__va_list)+0x38>
    f72c:	e28d1010 	add	r1, sp, #16
    f730:	e1a0000b 	mov	r0, fp
    f734:	ebfffd34 	bl	ec0c <CString::PutString(char const*)>
    f738:	e1560004 	cmp	r6, r4
    f73c:	2affff23 	bcs	f3d0 <CString::FormatV(char const*, std::__va_list)+0x2c0>
    f740:	e0444006 	sub	r4, r4, r6
    f744:	e1a01004 	mov	r1, r4
    f748:	e1a0000b 	mov	r0, fp
    f74c:	ebfffc88 	bl	e974 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f750:	e2443001 	sub	r3, r4, #1
    f754:	e59b200c 	ldr	r2, [fp, #12]
    f758:	e2433001 	sub	r3, r3, #1
    f75c:	e2821001 	add	r1, r2, #1
    f760:	e58b100c 	str	r1, [fp, #12]
    f764:	e3a01020 	mov	r1, #32
    f768:	e3730001 	cmn	r3, #1
    f76c:	e5c21000 	strb	r1, [r2]
    f770:	1afffff7 	bne	f754 <CString::FormatV(char const*, std::__va_list)+0x644>
    f774:	eaffff15 	b	f3d0 <CString::FormatV(char const*, std::__va_list)+0x2c0>
    f778:	e59d3008 	ldr	r3, [sp, #8]
    f77c:	e3530000 	cmp	r3, #0
    f780:	1a000057 	bne	f8e4 <CString::FormatV(char const*, std::__va_list)+0x7d4>
    f784:	e1580004 	cmp	r8, r4
    f788:	2a00000c 	bcs	f7c0 <CString::FormatV(char const*, std::__va_list)+0x6b0>
    f78c:	e0444008 	sub	r4, r4, r8
    f790:	e1a01004 	mov	r1, r4
    f794:	e1a0000b 	mov	r0, fp
    f798:	ebfffc75 	bl	e974 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f79c:	e2443001 	sub	r3, r4, #1
    f7a0:	e59b200c 	ldr	r2, [fp, #12]
    f7a4:	e2433001 	sub	r3, r3, #1
    f7a8:	e2821001 	add	r1, r2, #1
    f7ac:	e58b100c 	str	r1, [fp, #12]
    f7b0:	e3a01020 	mov	r1, #32
    f7b4:	e3730001 	cmn	r3, #1
    f7b8:	e5c21000 	strb	r1, [r2]
    f7bc:	1afffff7 	bne	f7a0 <CString::FormatV(char const*, std::__va_list)+0x690>
    f7c0:	e59d300c 	ldr	r3, [sp, #12]
    f7c4:	e3530000 	cmp	r3, #0
    f7c8:	0afffefd 	beq	f3c4 <CString::FormatV(char const*, std::__va_list)+0x2b4>
    f7cc:	e3a01001 	mov	r1, #1
    f7d0:	e1a0000b 	mov	r0, fp
    f7d4:	ebfffc66 	bl	e974 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f7d8:	e3a0202d 	mov	r2, #45	; 0x2d
    f7dc:	e59b300c 	ldr	r3, [fp, #12]
    f7e0:	e2831001 	add	r1, r3, #1
    f7e4:	e58b100c 	str	r1, [fp, #12]
    f7e8:	e5c32000 	strb	r2, [r3]
    f7ec:	eafffef4 	b	f3c4 <CString::FormatV(char const*, std::__va_list)+0x2b4>
    f7f0:	e3a01001 	mov	r1, #1
    f7f4:	e1a0000b 	mov	r0, fp
    f7f8:	ebfffc5d 	bl	e974 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f7fc:	e59b300c 	ldr	r3, [fp, #12]
    f800:	e3540001 	cmp	r4, #1
    f804:	e2832001 	add	r2, r3, #1
    f808:	e58b200c 	str	r2, [fp, #12]
    f80c:	e5c37000 	strb	r7, [r3]
    f810:	9a00000b 	bls	f844 <CString::FormatV(char const*, std::__va_list)+0x734>
    f814:	e2441001 	sub	r1, r4, #1
    f818:	e1a0000b 	mov	r0, fp
    f81c:	ebfffc54 	bl	e974 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f820:	e2444002 	sub	r4, r4, #2
    f824:	e59b300c 	ldr	r3, [fp, #12]
    f828:	e2444001 	sub	r4, r4, #1
    f82c:	e2832001 	add	r2, r3, #1
    f830:	e58b200c 	str	r2, [fp, #12]
    f834:	e3a02020 	mov	r2, #32
    f838:	e3740001 	cmn	r4, #1
    f83c:	e5c32000 	strb	r2, [r3]
    f840:	1afffff7 	bne	f824 <CString::FormatV(char const*, std::__va_list)+0x714>
    f844:	e58d6000 	str	r6, [sp]
    f848:	eafffee0 	b	f3d0 <CString::FormatV(char const*, std::__va_list)+0x2c0>
    f84c:	e28d1010 	add	r1, sp, #16
    f850:	e1a0000b 	mov	r0, fp
    f854:	ebfffcec 	bl	ec0c <CString::PutString(char const*)>
    f858:	e1560004 	cmp	r6, r4
    f85c:	2afffedb 	bcs	f3d0 <CString::FormatV(char const*, std::__va_list)+0x2c0>
    f860:	e0444006 	sub	r4, r4, r6
    f864:	e1a01004 	mov	r1, r4
    f868:	e1a0000b 	mov	r0, fp
    f86c:	ebfffc40 	bl	e974 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f870:	e2443001 	sub	r3, r4, #1
    f874:	e59b200c 	ldr	r2, [fp, #12]
    f878:	e2433001 	sub	r3, r3, #1
    f87c:	e2821001 	add	r1, r2, #1
    f880:	e58b100c 	str	r1, [fp, #12]
    f884:	e3a01020 	mov	r1, #32
    f888:	e3730001 	cmn	r3, #1
    f88c:	e5c21000 	strb	r1, [r2]
    f890:	1afffff7 	bne	f874 <CString::FormatV(char const*, std::__va_list)+0x764>
    f894:	eafffecd 	b	f3d0 <CString::FormatV(char const*, std::__va_list)+0x2c0>
    f898:	e1a01008 	mov	r1, r8
    f89c:	e1a0000b 	mov	r0, fp
    f8a0:	ebfffcd9 	bl	ec0c <CString::PutString(char const*)>
    f8a4:	e1570004 	cmp	r7, r4
    f8a8:	2affffe5 	bcs	f844 <CString::FormatV(char const*, std::__va_list)+0x734>
    f8ac:	e0444007 	sub	r4, r4, r7
    f8b0:	e1a01004 	mov	r1, r4
    f8b4:	e1a0000b 	mov	r0, fp
    f8b8:	ebfffc2d 	bl	e974 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f8bc:	e2443001 	sub	r3, r4, #1
    f8c0:	e59b200c 	ldr	r2, [fp, #12]
    f8c4:	e2433001 	sub	r3, r3, #1
    f8c8:	e2821001 	add	r1, r2, #1
    f8cc:	e58b100c 	str	r1, [fp, #12]
    f8d0:	e3a01020 	mov	r1, #32
    f8d4:	e3730001 	cmn	r3, #1
    f8d8:	e5c21000 	strb	r1, [r2]
    f8dc:	1afffff7 	bne	f8c0 <CString::FormatV(char const*, std::__va_list)+0x7b0>
    f8e0:	eaffffd7 	b	f844 <CString::FormatV(char const*, std::__va_list)+0x734>
    f8e4:	e59d300c 	ldr	r3, [sp, #12]
    f8e8:	e3530000 	cmp	r3, #0
    f8ec:	1a00001e 	bne	f96c <CString::FormatV(char const*, std::__va_list)+0x85c>
    f8f0:	e1580004 	cmp	r8, r4
    f8f4:	2afffeb2 	bcs	f3c4 <CString::FormatV(char const*, std::__va_list)+0x2b4>
    f8f8:	e0444008 	sub	r4, r4, r8
    f8fc:	e1a0000b 	mov	r0, fp
    f900:	e1a01004 	mov	r1, r4
    f904:	ebfffc1a 	bl	e974 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f908:	e3a00030 	mov	r0, #48	; 0x30
    f90c:	e2443001 	sub	r3, r4, #1
    f910:	e59b200c 	ldr	r2, [fp, #12]
    f914:	e2433001 	sub	r3, r3, #1
    f918:	e2821001 	add	r1, r2, #1
    f91c:	e3730001 	cmn	r3, #1
    f920:	e58b100c 	str	r1, [fp, #12]
    f924:	e5c20000 	strb	r0, [r2]
    f928:	1afffff8 	bne	f910 <CString::FormatV(char const*, std::__va_list)+0x800>
    f92c:	eafffea4 	b	f3c4 <CString::FormatV(char const*, std::__va_list)+0x2b4>
    f930:	e3a01001 	mov	r1, #1
    f934:	e1a0000b 	mov	r0, fp
    f938:	ebfffc0d 	bl	e974 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f93c:	e3a0202d 	mov	r2, #45	; 0x2d
    f940:	e59b300c 	ldr	r3, [fp, #12]
    f944:	e2831001 	add	r1, r3, #1
    f948:	e58b100c 	str	r1, [fp, #12]
    f94c:	e5c32000 	strb	r2, [r3]
    f950:	eafffefa 	b	f540 <CString::FormatV(char const*, std::__va_list)+0x430>
    f954:	e1a09006 	mov	r9, r6
    f958:	e3a0a001 	mov	sl, #1
    f95c:	eafffed8 	b	f4c4 <CString::FormatV(char const*, std::__va_list)+0x3b4>
    f960:	e1a03006 	mov	r3, r6
    f964:	e3a0a001 	mov	sl, #1
    f968:	eafffe58 	b	f2d0 <CString::FormatV(char const*, std::__va_list)+0x1c0>
    f96c:	e3a01001 	mov	r1, #1
    f970:	e1a0000b 	mov	r0, fp
    f974:	ebfffbfe 	bl	e974 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f978:	e3a0202d 	mov	r2, #45	; 0x2d
    f97c:	e59b300c 	ldr	r3, [fp, #12]
    f980:	e2831001 	add	r1, r3, #1
    f984:	e58b100c 	str	r1, [fp, #12]
    f988:	e5c32000 	strb	r2, [r3]
    f98c:	eaffffd7 	b	f8f0 <CString::FormatV(char const*, std::__va_list)+0x7e0>
    f990:	cccccccd 	.word	0xcccccccd

0000f994 <CString::Format(char const*, ...)>:
    f994:	e92d000e 	push	{r1, r2, r3}
    f998:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    f99c:	e24dd008 	sub	sp, sp, #8
    f9a0:	e28d3010 	add	r3, sp, #16
    f9a4:	e1a02003 	mov	r2, r3
    f9a8:	e59d100c 	ldr	r1, [sp, #12]
    f9ac:	e58d3004 	str	r3, [sp, #4]
    f9b0:	ebfffdd6 	bl	f110 <CString::FormatV(char const*, std::__va_list)>
    f9b4:	e28dd008 	add	sp, sp, #8
    f9b8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    f9bc:	e28dd00c 	add	sp, sp, #12
    f9c0:	e12fff1e 	bx	lr

0000f9c4 <memset>:
    f9c4:	e3520000 	cmp	r2, #0
    f9c8:	012fff1e 	bxeq	lr
    f9cc:	e1a03000 	mov	r3, r0
    f9d0:	e6af1071 	sxtb	r1, r1
    f9d4:	e0802002 	add	r2, r0, r2
    f9d8:	e4c31001 	strb	r1, [r3], #1
    f9dc:	e1530002 	cmp	r3, r2
    f9e0:	1afffffc 	bne	f9d8 <memset+0x14>
    f9e4:	e12fff1e 	bx	lr

0000f9e8 <memcmp>:
    f9e8:	e3520000 	cmp	r2, #0
    f9ec:	0a00000e 	beq	fa2c <memcmp+0x44>
    f9f0:	e5d0c000 	ldrb	ip, [r0]
    f9f4:	e5d13000 	ldrb	r3, [r1]
    f9f8:	e15c0003 	cmp	ip, r3
    f9fc:	ca00000c 	bgt	fa34 <memcmp+0x4c>
    fa00:	ba00000d 	blt	fa3c <memcmp+0x54>
    fa04:	e0812002 	add	r2, r1, r2
    fa08:	e2811001 	add	r1, r1, #1
    fa0c:	ea000004 	b	fa24 <memcmp+0x3c>
    fa10:	e5f0c001 	ldrb	ip, [r0, #1]!
    fa14:	e4d13001 	ldrb	r3, [r1], #1
    fa18:	e15c0003 	cmp	ip, r3
    fa1c:	ca000004 	bgt	fa34 <memcmp+0x4c>
    fa20:	ba000005 	blt	fa3c <memcmp+0x54>
    fa24:	e1510002 	cmp	r1, r2
    fa28:	1afffff8 	bne	fa10 <memcmp+0x28>
    fa2c:	e3a00000 	mov	r0, #0
    fa30:	e12fff1e 	bx	lr
    fa34:	e3a00001 	mov	r0, #1
    fa38:	e12fff1e 	bx	lr
    fa3c:	e3e00000 	mvn	r0, #0
    fa40:	e12fff1e 	bx	lr

0000fa44 <strlen>:
    fa44:	e1d010d0 	ldrsb	r1, [r0]
    fa48:	e2803001 	add	r3, r0, #1
    fa4c:	e3510000 	cmp	r1, #0
    fa50:	0a000003 	beq	fa64 <strlen+0x20>
    fa54:	e0431000 	sub	r1, r3, r0
    fa58:	e0d320d1 	ldrsb	r2, [r3], #1
    fa5c:	e3520000 	cmp	r2, #0
    fa60:	1afffffb 	bne	fa54 <strlen+0x10>
    fa64:	e1a00001 	mov	r0, r1
    fa68:	e12fff1e 	bx	lr

0000fa6c <strcmp>:
    fa6c:	e1d030d0 	ldrsb	r3, [r0]
    fa70:	e1d120d0 	ldrsb	r2, [r1]
    fa74:	e3530000 	cmp	r3, #0
    fa78:	1a000007 	bne	fa9c <strcmp+0x30>
    fa7c:	ea000008 	b	faa4 <strcmp+0x38>
    fa80:	e1530002 	cmp	r3, r2
    fa84:	ca00000b 	bgt	fab8 <strcmp+0x4c>
    fa88:	ba00000c 	blt	fac0 <strcmp+0x54>
    fa8c:	e1f030d1 	ldrsb	r3, [r0, #1]!
    fa90:	e3530000 	cmp	r3, #0
    fa94:	0a00000b 	beq	fac8 <strcmp+0x5c>
    fa98:	e1f120d1 	ldrsb	r2, [r1, #1]!
    fa9c:	e3520000 	cmp	r2, #0
    faa0:	1afffff6 	bne	fa80 <strcmp+0x14>
    faa4:	e1530002 	cmp	r3, r2
    faa8:	ca000002 	bgt	fab8 <strcmp+0x4c>
    faac:	b3e00000 	mvnlt	r0, #0
    fab0:	a3a00000 	movge	r0, #0
    fab4:	e12fff1e 	bx	lr
    fab8:	e3a00001 	mov	r0, #1
    fabc:	e12fff1e 	bx	lr
    fac0:	e3e00000 	mvn	r0, #0
    fac4:	e12fff1e 	bx	lr
    fac8:	e1d120d1 	ldrsb	r2, [r1, #1]
    facc:	e1530002 	cmp	r3, r2
    fad0:	dafffff5 	ble	faac <strcmp+0x40>
    fad4:	eafffff7 	b	fab8 <strcmp+0x4c>

0000fad8 <strcasecmp>:
    fad8:	e2400001 	sub	r0, r0, #1
    fadc:	e1f030d1 	ldrsb	r3, [r0, #1]!
    fae0:	e2432061 	sub	r2, r3, #97	; 0x61
    fae4:	e3520019 	cmp	r2, #25
    fae8:	92433020 	subls	r3, r3, #32
    faec:	e3530000 	cmp	r3, #0
    faf0:	0a00001f 	beq	fb74 <strcasecmp+0x9c>
    faf4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    faf8:	e0d120d1 	ldrsb	r2, [r1], #1
    fafc:	e242c061 	sub	ip, r2, #97	; 0x61
    fb00:	e35c0019 	cmp	ip, #25
    fb04:	81a0e002 	movhi	lr, r2
    fb08:	9242e020 	subls	lr, r2, #32
    fb0c:	e35e0000 	cmp	lr, #0
    fb10:	1a000006 	bne	fb30 <strcasecmp+0x58>
    fb14:	e35c0019 	cmp	ip, #25
    fb18:	92422020 	subls	r2, r2, #32
    fb1c:	e1530002 	cmp	r3, r2
    fb20:	ca000011 	bgt	fb6c <strcasecmp+0x94>
    fb24:	b3e00000 	mvnlt	r0, #0
    fb28:	a3a00000 	movge	r0, #0
    fb2c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    fb30:	e153000e 	cmp	r3, lr
    fb34:	ca00000c 	bgt	fb6c <strcasecmp+0x94>
    fb38:	ba000016 	blt	fb98 <strcasecmp+0xc0>
    fb3c:	e1f030d1 	ldrsb	r3, [r0, #1]!
    fb40:	e2432061 	sub	r2, r3, #97	; 0x61
    fb44:	e3520019 	cmp	r2, #25
    fb48:	92433020 	subls	r3, r3, #32
    fb4c:	e3530000 	cmp	r3, #0
    fb50:	1affffe8 	bne	faf8 <strcasecmp+0x20>
    fb54:	e1d120d0 	ldrsb	r2, [r1]
    fb58:	e242c061 	sub	ip, r2, #97	; 0x61
    fb5c:	e35c0019 	cmp	ip, #25
    fb60:	92422020 	subls	r2, r2, #32
    fb64:	e1530002 	cmp	r3, r2
    fb68:	daffffed 	ble	fb24 <strcasecmp+0x4c>
    fb6c:	e3a00001 	mov	r0, #1
    fb70:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    fb74:	e1d120d0 	ldrsb	r2, [r1]
    fb78:	e242c061 	sub	ip, r2, #97	; 0x61
    fb7c:	e35c0019 	cmp	ip, #25
    fb80:	92422020 	subls	r2, r2, #32
    fb84:	e1530002 	cmp	r3, r2
    fb88:	ca000004 	bgt	fba0 <strcasecmp+0xc8>
    fb8c:	b3e00000 	mvnlt	r0, #0
    fb90:	a3a00000 	movge	r0, #0
    fb94:	e12fff1e 	bx	lr
    fb98:	e3e00000 	mvn	r0, #0
    fb9c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    fba0:	e3a00001 	mov	r0, #1
    fba4:	e12fff1e 	bx	lr

0000fba8 <strncmp>:
    fba8:	e3520000 	cmp	r2, #0
    fbac:	0a000016 	beq	fc0c <strncmp+0x64>
    fbb0:	e1d030d0 	ldrsb	r3, [r0]
    fbb4:	e1d1c0d0 	ldrsb	ip, [r1]
    fbb8:	e3530000 	cmp	r3, #0
    fbbc:	0a000015 	beq	fc18 <strncmp+0x70>
    fbc0:	e35c0000 	cmp	ip, #0
    fbc4:	0a000013 	beq	fc18 <strncmp+0x70>
    fbc8:	e15c0003 	cmp	ip, r3
    fbcc:	ba000016 	blt	fc2c <strncmp+0x84>
    fbd0:	d0802002 	addle	r2, r0, r2
    fbd4:	d2800001 	addle	r0, r0, #1
    fbd8:	da000009 	ble	fc04 <strncmp+0x5c>
    fbdc:	ea000014 	b	fc34 <strncmp+0x8c>
    fbe0:	e0d030d1 	ldrsb	r3, [r0], #1
    fbe4:	e3530000 	cmp	r3, #0
    fbe8:	0a000009 	beq	fc14 <strncmp+0x6c>
    fbec:	e1f1c0d1 	ldrsb	ip, [r1, #1]!
    fbf0:	e35c0000 	cmp	ip, #0
    fbf4:	0a000007 	beq	fc18 <strncmp+0x70>
    fbf8:	e153000c 	cmp	r3, ip
    fbfc:	ca00000a 	bgt	fc2c <strncmp+0x84>
    fc00:	ba00000b 	blt	fc34 <strncmp+0x8c>
    fc04:	e1500002 	cmp	r0, r2
    fc08:	1afffff4 	bne	fbe0 <strncmp+0x38>
    fc0c:	e3a00000 	mov	r0, #0
    fc10:	e12fff1e 	bx	lr
    fc14:	e1d1c0d1 	ldrsb	ip, [r1, #1]
    fc18:	e153000c 	cmp	r3, ip
    fc1c:	ca000002 	bgt	fc2c <strncmp+0x84>
    fc20:	b3e00000 	mvnlt	r0, #0
    fc24:	a3a00000 	movge	r0, #0
    fc28:	e12fff1e 	bx	lr
    fc2c:	e3a00001 	mov	r0, #1
    fc30:	e12fff1e 	bx	lr
    fc34:	e3e00000 	mvn	r0, #0
    fc38:	e12fff1e 	bx	lr

0000fc3c <strcpy>:
    fc3c:	e1d130d0 	ldrsb	r3, [r1]
    fc40:	e1a02000 	mov	r2, r0
    fc44:	e3530000 	cmp	r3, #0
    fc48:	0a000003 	beq	fc5c <strcpy+0x20>
    fc4c:	e4c23001 	strb	r3, [r2], #1
    fc50:	e1f130d1 	ldrsb	r3, [r1, #1]!
    fc54:	e3530000 	cmp	r3, #0
    fc58:	1afffffb 	bne	fc4c <strcpy+0x10>
    fc5c:	e3a03000 	mov	r3, #0
    fc60:	e5c23000 	strb	r3, [r2]
    fc64:	e12fff1e 	bx	lr

0000fc68 <strncpy>:
    fc68:	e3520000 	cmp	r2, #0
    fc6c:	012fff1e 	bxeq	lr
    fc70:	e1d1c0d0 	ldrsb	ip, [r1]
    fc74:	e35c0000 	cmp	ip, #0
    fc78:	0a000009 	beq	fca4 <strncpy+0x3c>
    fc7c:	e0802002 	add	r2, r0, r2
    fc80:	e1a03000 	mov	r3, r0
    fc84:	ea000002 	b	fc94 <strncpy+0x2c>
    fc88:	e1f1c0d1 	ldrsb	ip, [r1, #1]!
    fc8c:	e35c0000 	cmp	ip, #0
    fc90:	0a000004 	beq	fca8 <strncpy+0x40>
    fc94:	e4c3c001 	strb	ip, [r3], #1
    fc98:	e1530002 	cmp	r3, r2
    fc9c:	1afffff9 	bne	fc88 <strncpy+0x20>
    fca0:	e12fff1e 	bx	lr
    fca4:	e1a03000 	mov	r3, r0
    fca8:	e3a02000 	mov	r2, #0
    fcac:	e5c32000 	strb	r2, [r3]
    fcb0:	e12fff1e 	bx	lr

0000fcb4 <strcat>:
    fcb4:	e1d030d0 	ldrsb	r3, [r0]
    fcb8:	e3530000 	cmp	r3, #0
    fcbc:	e1a03000 	mov	r3, r0
    fcc0:	0a000002 	beq	fcd0 <strcat+0x1c>
    fcc4:	e1f320d1 	ldrsb	r2, [r3, #1]!
    fcc8:	e3520000 	cmp	r2, #0
    fccc:	1afffffc 	bne	fcc4 <strcat+0x10>
    fcd0:	e1d120d0 	ldrsb	r2, [r1]
    fcd4:	e3520000 	cmp	r2, #0
    fcd8:	0a000003 	beq	fcec <strcat+0x38>
    fcdc:	e4c32001 	strb	r2, [r3], #1
    fce0:	e1f120d1 	ldrsb	r2, [r1, #1]!
    fce4:	e3520000 	cmp	r2, #0
    fce8:	1afffffb 	bne	fcdc <strcat+0x28>
    fcec:	e3a02000 	mov	r2, #0
    fcf0:	e5c32000 	strb	r2, [r3]
    fcf4:	e12fff1e 	bx	lr

0000fcf8 <strchr>:
    fcf8:	e1d020d0 	ldrsb	r2, [r0]
    fcfc:	e3520000 	cmp	r2, #0
    fd00:	0a000009 	beq	fd2c <strchr+0x34>
    fd04:	e1510002 	cmp	r1, r2
    fd08:	1a000002 	bne	fd18 <strchr+0x20>
    fd0c:	ea000008 	b	fd34 <strchr+0x3c>
    fd10:	e1530001 	cmp	r3, r1
    fd14:	012fff1e 	bxeq	lr
    fd18:	e1f030d1 	ldrsb	r3, [r0, #1]!
    fd1c:	e3530000 	cmp	r3, #0
    fd20:	1afffffa 	bne	fd10 <strchr+0x18>
    fd24:	e1a00003 	mov	r0, r3
    fd28:	e12fff1e 	bx	lr
    fd2c:	e1a00002 	mov	r0, r2
    fd30:	e12fff1e 	bx	lr
    fd34:	e12fff1e 	bx	lr

0000fd38 <strtok_r>:
    fd38:	e3500000 	cmp	r0, #0
    fd3c:	0a00002c 	beq	fdf4 <strtok_r+0xbc>
    fd40:	e92d4030 	push	{r4, r5, lr}
    fd44:	e1d0e0d0 	ldrsb	lr, [r0]
    fd48:	e35e0000 	cmp	lr, #0
    fd4c:	11d140d0 	ldrsbne	r4, [r1]
    fd50:	0a000024 	beq	fde8 <strtok_r+0xb0>
    fd54:	e3540000 	cmp	r4, #0
    fd58:	0a000008 	beq	fd80 <strtok_r+0x48>
    fd5c:	e15e0004 	cmp	lr, r4
    fd60:	0a000019 	beq	fdcc <strtok_r+0x94>
    fd64:	e1a0c001 	mov	ip, r1
    fd68:	ea000001 	b	fd74 <strtok_r+0x3c>
    fd6c:	e15e0003 	cmp	lr, r3
    fd70:	0a000015 	beq	fdcc <strtok_r+0x94>
    fd74:	e1fc30d1 	ldrsb	r3, [ip, #1]!
    fd78:	e3530000 	cmp	r3, #0
    fd7c:	1afffffa 	bne	fd6c <strtok_r+0x34>
    fd80:	e35e0000 	cmp	lr, #0
    fd84:	0a000017 	beq	fde8 <strtok_r+0xb0>
    fd88:	e1a05000 	mov	r5, r0
    fd8c:	e3540000 	cmp	r4, #0
    fd90:	0a000008 	beq	fdb8 <strtok_r+0x80>
    fd94:	e15e0004 	cmp	lr, r4
    fd98:	0a00000d 	beq	fdd4 <strtok_r+0x9c>
    fd9c:	e1a0c001 	mov	ip, r1
    fda0:	ea000001 	b	fdac <strtok_r+0x74>
    fda4:	e15e0003 	cmp	lr, r3
    fda8:	0a000009 	beq	fdd4 <strtok_r+0x9c>
    fdac:	e1fc30d1 	ldrsb	r3, [ip, #1]!
    fdb0:	e3530000 	cmp	r3, #0
    fdb4:	1afffffa 	bne	fda4 <strtok_r+0x6c>
    fdb8:	e1f5e0d1 	ldrsb	lr, [r5, #1]!
    fdbc:	e35e0000 	cmp	lr, #0
    fdc0:	1afffff1 	bne	fd8c <strtok_r+0x54>
    fdc4:	e5825000 	str	r5, [r2]
    fdc8:	e8bd8030 	pop	{r4, r5, pc}
    fdcc:	e1f0e0d1 	ldrsb	lr, [r0, #1]!
    fdd0:	eaffffdf 	b	fd54 <strtok_r+0x1c>
    fdd4:	e3a03000 	mov	r3, #0
    fdd8:	e2855001 	add	r5, r5, #1
    fddc:	e5453001 	strb	r3, [r5, #-1]
    fde0:	e5825000 	str	r5, [r2]
    fde4:	e8bd8030 	pop	{r4, r5, pc}
    fde8:	e3a00000 	mov	r0, #0
    fdec:	e5820000 	str	r0, [r2]
    fdf0:	e8bd8030 	pop	{r4, r5, pc}
    fdf4:	e5920000 	ldr	r0, [r2]
    fdf8:	e3500000 	cmp	r0, #0
    fdfc:	1affffcf 	bne	fd40 <strtok_r+0x8>
    fe00:	e12fff1e 	bx	lr

0000fe04 <strtoul>:
    fe04:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    fe08:	e3510000 	cmp	r1, #0
    fe0c:	e2425002 	sub	r5, r2, #2
    fe10:	15810000 	strne	r0, [r1]
    fe14:	e3520000 	cmp	r2, #0
    fe18:	13550022 	cmpne	r5, #34	; 0x22
    fe1c:	e3c2e010 	bic	lr, r2, #16
    fe20:	83a05001 	movhi	r5, #1
    fe24:	93a05000 	movls	r5, #0
    fe28:	8a000037 	bhi	ff0c <strtoul+0x108>
    fe2c:	e1d0c0d0 	ldrsb	ip, [r0]
    fe30:	e1a04000 	mov	r4, r0
    fe34:	e24c3009 	sub	r3, ip, #9
    fe38:	e35c0020 	cmp	ip, #32
    fe3c:	e2800001 	add	r0, r0, #1
    fe40:	e6ef3073 	uxtb	r3, r3
    fe44:	0afffff8 	beq	fe2c <strtoul+0x28>
    fe48:	e3530004 	cmp	r3, #4
    fe4c:	9afffff6 	bls	fe2c <strtoul+0x28>
    fe50:	e35c002b 	cmp	ip, #43	; 0x2b
    fe54:	0a00002e 	beq	ff14 <strtoul+0x110>
    fe58:	e35c002d 	cmp	ip, #45	; 0x2d
    fe5c:	01d4c0d1 	ldrsbeq	ip, [r4, #1]
    fe60:	03a07001 	moveq	r7, #1
    fe64:	01a04000 	moveq	r4, r0
    fe68:	13a07000 	movne	r7, #0
    fe6c:	e35c0030 	cmp	ip, #48	; 0x30
    fe70:	0a00002c 	beq	ff28 <strtoul+0x124>
    fe74:	e3520000 	cmp	r2, #0
    fe78:	03a0200a 	moveq	r2, #10
    fe7c:	e35c002f 	cmp	ip, #47	; 0x2f
    fe80:	e1a0300c 	mov	r3, ip
    fe84:	da00001d 	ble	ff00 <strtoul+0xfc>
    fe88:	e3a0e000 	mov	lr, #0
    fe8c:	e3a05001 	mov	r5, #1
    fe90:	e1a0600e 	mov	r6, lr
    fe94:	ea000008 	b	febc <strtoul+0xb8>
    fe98:	e020329e 	mla	r0, lr, r2, r3
    fe9c:	e150000e 	cmp	r0, lr
    fea0:	3a000029 	bcc	ff4c <strtoul+0x148>
    fea4:	e1f430d1 	ldrsb	r3, [r4, #1]!
    fea8:	e1a05006 	mov	r5, r6
    feac:	e353002f 	cmp	r3, #47	; 0x2f
    feb0:	e1a0c003 	mov	ip, r3
    feb4:	da000029 	ble	ff60 <strtoul+0x15c>
    feb8:	e1a0e000 	mov	lr, r0
    febc:	e24cc061 	sub	ip, ip, #97	; 0x61
    fec0:	e35c0019 	cmp	ip, #25
    fec4:	92433020 	subls	r3, r3, #32
    fec8:	e3530040 	cmp	r3, #64	; 0x40
    fecc:	c2433007 	subgt	r3, r3, #7
    fed0:	e2433030 	sub	r3, r3, #48	; 0x30
    fed4:	e1520003 	cmp	r2, r3
    fed8:	caffffee 	bgt	fe98 <strtoul+0x94>
    fedc:	e1a0000e 	mov	r0, lr
    fee0:	e2255001 	eor	r5, r5, #1
    fee4:	e3510000 	cmp	r1, #0
    fee8:	e0055007 	and	r5, r5, r7
    feec:	0a000000 	beq	fef4 <strtoul+0xf0>
    fef0:	e5814000 	str	r4, [r1]
    fef4:	e3550000 	cmp	r5, #0
    fef8:	12600000 	rsbne	r0, r0, #0
    fefc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    ff00:	e3510000 	cmp	r1, #0
    ff04:	13a00000 	movne	r0, #0
    ff08:	1afffff8 	bne	fef0 <strtoul+0xec>
    ff0c:	e3a00000 	mov	r0, #0
    ff10:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    ff14:	e1d4c0d1 	ldrsb	ip, [r4, #1]
    ff18:	e3a07000 	mov	r7, #0
    ff1c:	e35c0030 	cmp	ip, #48	; 0x30
    ff20:	e1a04000 	mov	r4, r0
    ff24:	1affffd2 	bne	fe74 <strtoul+0x70>
    ff28:	e1d4c0d1 	ldrsb	ip, [r4, #1]
    ff2c:	e2840001 	add	r0, r4, #1
    ff30:	e3cc3020 	bic	r3, ip, #32
    ff34:	e3530058 	cmp	r3, #88	; 0x58
    ff38:	0a00000a 	beq	ff68 <strtoul+0x164>
    ff3c:	e3520000 	cmp	r2, #0
    ff40:	e1a04000 	mov	r4, r0
    ff44:	03a02008 	moveq	r2, #8
    ff48:	eaffffcb 	b	fe7c <strtoul+0x78>
    ff4c:	e3510000 	cmp	r1, #0
    ff50:	0a00000a 	beq	ff80 <strtoul+0x17c>
    ff54:	e5814000 	str	r4, [r1]
    ff58:	e3e00000 	mvn	r0, #0
    ff5c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    ff60:	e3a05001 	mov	r5, #1
    ff64:	eaffffde 	b	fee4 <strtoul+0xe0>
    ff68:	e35e0000 	cmp	lr, #0
    ff6c:	1affffe6 	bne	ff0c <strtoul+0x108>
    ff70:	e1d4c0d2 	ldrsb	ip, [r4, #2]
    ff74:	e3a02010 	mov	r2, #16
    ff78:	e2844002 	add	r4, r4, #2
    ff7c:	eaffffbe 	b	fe7c <strtoul+0x78>
    ff80:	e3e00000 	mvn	r0, #0
    ff84:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0000ff88 <char2int>:
    ff88:	e12fff1e 	bx	lr

0000ff8c <CExceptionHandler::CExceptionHandler()>:
    ff8c:	e92d4070 	push	{r4, r5, r6, lr}
    ff90:	e59f506c 	ldr	r5, [pc, #108]	; 10004 <CExceptionHandler::CExceptionHandler()+0x78>
    ff94:	e1a04000 	mov	r4, r0
    ff98:	e5953000 	ldr	r3, [r5]
    ff9c:	e3530000 	cmp	r3, #0
    ffa0:	0a000003 	beq	ffb4 <CExceptionHandler::CExceptionHandler()+0x28>
    ffa4:	e3a02030 	mov	r2, #48	; 0x30
    ffa8:	e59f1058 	ldr	r1, [pc, #88]	; 10008 <CExceptionHandler::CExceptionHandler()+0x7c>
    ffac:	e59f0058 	ldr	r0, [pc, #88]	; 1000c <CExceptionHandler::CExceptionHandler()+0x80>
    ffb0:	ebfff553 	bl	d504 <assertion_failed>
    ffb4:	e3a00000 	mov	r0, #0
    ffb8:	e59f1050 	ldr	r1, [pc, #80]	; 10010 <CExceptionHandler::CExceptionHandler()+0x84>
    ffbc:	e59f2050 	ldr	r2, [pc, #80]	; 10014 <CExceptionHandler::CExceptionHandler()+0x88>
    ffc0:	e59f3050 	ldr	r3, [pc, #80]	; 10018 <CExceptionHandler::CExceptionHandler()+0x8c>
    ffc4:	e1a01141 	asr	r1, r1, #2
    ffc8:	e1a02142 	asr	r2, r2, #2
    ffcc:	e1a03143 	asr	r3, r3, #2
    ffd0:	e2411002 	sub	r1, r1, #2
    ffd4:	e2422002 	sub	r2, r2, #2
    ffd8:	e2433002 	sub	r3, r3, #2
    ffdc:	e38114ea 	orr	r1, r1, #-369098752	; 0xea000000
    ffe0:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
    ffe4:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
    ffe8:	e5854000 	str	r4, [r5]
    ffec:	e5801004 	str	r1, [r0, #4]
    fff0:	e580200c 	str	r2, [r0, #12]
    fff4:	e5803010 	str	r3, [r0, #16]
    fff8:	ebfff3ab 	bl	ceac <SyncDataAndInstructionCache>
    fffc:	e1a00004 	mov	r0, r4
   10000:	e8bd8070 	pop	{r4, r5, r6, pc}
   10004:	000113c4 	.word	0x000113c4
   10008:	000111c8 	.word	0x000111c8
   1000c:	00010b08 	.word	0x00010b08
   10010:	0000c938 	.word	0x0000c938
   10014:	0000c898 	.word	0x0000c898
   10018:	0000c8e0 	.word	0x0000c8e0

0001001c <CExceptionHandler::~CExceptionHandler()>:
   1001c:	e3a02000 	mov	r2, #0
   10020:	e59f3004 	ldr	r3, [pc, #4]	; 1002c <CExceptionHandler::~CExceptionHandler()+0x10>
   10024:	e5832000 	str	r2, [r3]
   10028:	e12fff1e 	bx	lr
   1002c:	000113c4 	.word	0x000113c4

00010030 <CExceptionHandler::Throw(unsigned int)>:
   10030:	e92d4010 	push	{r4, lr}
   10034:	e1a04001 	mov	r4, r1
   10038:	e24dd008 	sub	sp, sp, #8
   1003c:	ebfff73e 	bl	dd3c <CLogger::Get()>
   10040:	e59f201c 	ldr	r2, [pc, #28]	; 10064 <CExceptionHandler::Throw(unsigned int)+0x34>
   10044:	e59f301c 	ldr	r3, [pc, #28]	; 10068 <CExceptionHandler::Throw(unsigned int)+0x38>
   10048:	e7921104 	ldr	r1, [r2, r4, lsl #2]
   1004c:	e3a02000 	mov	r2, #0
   10050:	e58d1000 	str	r1, [sp]
   10054:	e59f1010 	ldr	r1, [pc, #16]	; 1006c <CExceptionHandler::Throw(unsigned int)+0x3c>
   10058:	ebfff8e0 	bl	e3e0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1005c:	e28dd008 	add	sp, sp, #8
   10060:	e8bd8010 	pop	{r4, pc}
   10064:	00011310 	.word	0x00011310
   10068:	000111e0 	.word	0x000111e0
   1006c:	000111c0 	.word	0x000111c0

00010070 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>:
   10070:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   10074:	e3510002 	cmp	r1, #2
   10078:	e24dd024 	sub	sp, sp, #36	; 0x24
   1007c:	e1a05001 	mov	r5, r1
   10080:	e1a04002 	mov	r4, r2
   10084:	0a000028 	beq	1012c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xbc>
   10088:	e3510003 	cmp	r1, #3
   1008c:	0a000020 	beq	10114 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xa4>
   10090:	e3a08000 	mov	r8, #0
   10094:	e1a09008 	mov	r9, r8
   10098:	e3540000 	cmp	r4, #0
   1009c:	0a000025 	beq	10138 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xc8>
   100a0:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   100a4:	e5947048 	ldr	r7, [r4, #72]	; 0x48
   100a8:	e203301f 	and	r3, r3, #31
   100ac:	e3530011 	cmp	r3, #17
   100b0:	e5946044 	ldr	r6, [r4, #68]	; 0x44
   100b4:	0a000019 	beq	10120 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xb0>
   100b8:	e3530012 	cmp	r3, #18
   100bc:	089400c0 	ldmeq	r4, {r6, r7}
   100c0:	e59f1084 	ldr	r1, [pc, #132]	; 1014c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xdc>
   100c4:	e1a00006 	mov	r0, r6
   100c8:	ebfff5db 	bl	d83c <debug_stacktrace(unsigned int const*, char const*)>
   100cc:	ebfff71a 	bl	dd3c <CLogger::Get()>
   100d0:	e59f3078 	ldr	r3, [pc, #120]	; 10150 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe0>
   100d4:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
   100d8:	e7931105 	ldr	r1, [r3, r5, lsl #2]
   100dc:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   100e0:	e58d1000 	str	r1, [sp]
   100e4:	e58d2018 	str	r2, [sp, #24]
   100e8:	e58d3004 	str	r3, [sp, #4]
   100ec:	e58d7014 	str	r7, [sp, #20]
   100f0:	e58d6010 	str	r6, [sp, #16]
   100f4:	e58d800c 	str	r8, [sp, #12]
   100f8:	e58d9008 	str	r9, [sp, #8]
   100fc:	e59f3050 	ldr	r3, [pc, #80]	; 10154 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe4>
   10100:	e3a02000 	mov	r2, #0
   10104:	e59f1040 	ldr	r1, [pc, #64]	; 1014c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xdc>
   10108:	ebfff8b4 	bl	e3e0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1010c:	e28dd024 	add	sp, sp, #36	; 0x24
   10110:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   10114:	ee159f10 	mrc	15, 0, r9, cr5, cr0, {0}
   10118:	ee168f10 	mrc	15, 0, r8, cr6, cr0, {0}
   1011c:	eaffffdd 	b	10098 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x28>
   10120:	e594700c 	ldr	r7, [r4, #12]
   10124:	e5946008 	ldr	r6, [r4, #8]
   10128:	eaffffe4 	b	100c0 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x50>
   1012c:	ee159f30 	mrc	15, 0, r9, cr5, cr0, {1}
   10130:	ee168f50 	mrc	15, 0, r8, cr6, cr0, {2}
   10134:	eaffffd7 	b	10098 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x28>
   10138:	e3a02069 	mov	r2, #105	; 0x69
   1013c:	e59f1014 	ldr	r1, [pc, #20]	; 10158 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe8>
   10140:	e59f0014 	ldr	r0, [pc, #20]	; 1015c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xec>
   10144:	ebfff4ee 	bl	d504 <assertion_failed>
   10148:	eaffffd4 	b	100a0 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x30>
   1014c:	000111c0 	.word	0x000111c0
   10150:	00011310 	.word	0x00011310
   10154:	000111fc 	.word	0x000111fc
   10158:	000111c8 	.word	0x000111c8
   1015c:	000111f0 	.word	0x000111f0

00010160 <CExceptionHandler::Get()>:
   10160:	e92d4010 	push	{r4, lr}
   10164:	e59f4020 	ldr	r4, [pc, #32]	; 1018c <CExceptionHandler::Get()+0x2c>
   10168:	e5940000 	ldr	r0, [r4]
   1016c:	e3500000 	cmp	r0, #0
   10170:	18bd8010 	popne	{r4, pc}
   10174:	e3a02087 	mov	r2, #135	; 0x87
   10178:	e59f1010 	ldr	r1, [pc, #16]	; 10190 <CExceptionHandler::Get()+0x30>
   1017c:	e59f0010 	ldr	r0, [pc, #16]	; 10194 <CExceptionHandler::Get()+0x34>
   10180:	ebfff4df 	bl	d504 <assertion_failed>
   10184:	e5940000 	ldr	r0, [r4]
   10188:	e8bd8010 	pop	{r4, pc}
   1018c:	000113c4 	.word	0x000113c4
   10190:	000111c8 	.word	0x000111c8
   10194:	0001077c 	.word	0x0001077c

00010198 <ExceptionHandler>:
   10198:	e92d4070 	push	{r4, r5, r6, lr}
   1019c:	e3a03000 	mov	r3, #0
   101a0:	e1a05000 	mov	r5, r0
   101a4:	e1a06001 	mov	r6, r1
   101a8:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   101ac:	ebffebe2 	bl	b13c <CInterruptSystem::DisableFIQ()>
   101b0:	f1080040 	cpsie	f
   101b4:	e59f403c 	ldr	r4, [pc, #60]	; 101f8 <ExceptionHandler+0x60>
   101b8:	e5940000 	ldr	r0, [r4]
   101bc:	e3500000 	cmp	r0, #0
   101c0:	0a000003 	beq	101d4 <ExceptionHandler+0x3c>
   101c4:	e1a02006 	mov	r2, r6
   101c8:	e1a01005 	mov	r1, r5
   101cc:	e8bd4070 	pop	{r4, r5, r6, lr}
   101d0:	eaffffa6 	b	10070 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>
   101d4:	e3a02087 	mov	r2, #135	; 0x87
   101d8:	e59f101c 	ldr	r1, [pc, #28]	; 101fc <ExceptionHandler+0x64>
   101dc:	e59f001c 	ldr	r0, [pc, #28]	; 10200 <ExceptionHandler+0x68>
   101e0:	ebfff4c7 	bl	d504 <assertion_failed>
   101e4:	e5940000 	ldr	r0, [r4]
   101e8:	e1a02006 	mov	r2, r6
   101ec:	e1a01005 	mov	r1, r5
   101f0:	e8bd4070 	pop	{r4, r5, r6, lr}
   101f4:	eaffff9d 	b	10070 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>
   101f8:	000113c4 	.word	0x000113c4
   101fc:	000111c8 	.word	0x000111c8
   10200:	0001077c 	.word	0x0001077c

00010204 <raise>:
   10204:	e92d4010 	push	{r4, lr}
   10208:	e59f4030 	ldr	r4, [pc, #48]	; 10240 <raise+0x3c>
   1020c:	e5940000 	ldr	r0, [r4]
   10210:	e3500000 	cmp	r0, #0
   10214:	0a000003 	beq	10228 <raise+0x24>
   10218:	e3a01004 	mov	r1, #4
   1021c:	ebffff83 	bl	10030 <CExceptionHandler::Throw(unsigned int)>
   10220:	e3a00000 	mov	r0, #0
   10224:	e8bd8010 	pop	{r4, pc}
   10228:	e59f0014 	ldr	r0, [pc, #20]	; 10244 <raise+0x40>
   1022c:	e3a02087 	mov	r2, #135	; 0x87
   10230:	e59f1010 	ldr	r1, [pc, #16]	; 10248 <raise+0x44>
   10234:	ebfff4b2 	bl	d504 <assertion_failed>
   10238:	e5940000 	ldr	r0, [r4]
   1023c:	eafffff5 	b	10218 <raise+0x14>
   10240:	000113c4 	.word	0x000113c4
   10244:	0001077c 	.word	0x0001077c
   10248:	000111c8 	.word	0x000111c8

0001024c <__aeabi_uidiv>:
   1024c:	e2512001 	subs	r2, r1, #1
   10250:	012fff1e 	bxeq	lr
   10254:	3a000036 	bcc	10334 <__aeabi_uidiv+0xe8>
   10258:	e1500001 	cmp	r0, r1
   1025c:	9a000022 	bls	102ec <__aeabi_uidiv+0xa0>
   10260:	e1110002 	tst	r1, r2
   10264:	0a000023 	beq	102f8 <__aeabi_uidiv+0xac>
   10268:	e311020e 	tst	r1, #-536870912	; 0xe0000000
   1026c:	01a01181 	lsleq	r1, r1, #3
   10270:	03a03008 	moveq	r3, #8
   10274:	13a03001 	movne	r3, #1
   10278:	e3510201 	cmp	r1, #268435456	; 0x10000000
   1027c:	31510000 	cmpcc	r1, r0
   10280:	31a01201 	lslcc	r1, r1, #4
   10284:	31a03203 	lslcc	r3, r3, #4
   10288:	3afffffa 	bcc	10278 <__aeabi_uidiv+0x2c>
   1028c:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
   10290:	31510000 	cmpcc	r1, r0
   10294:	31a01081 	lslcc	r1, r1, #1
   10298:	31a03083 	lslcc	r3, r3, #1
   1029c:	3afffffa 	bcc	1028c <__aeabi_uidiv+0x40>
   102a0:	e3a02000 	mov	r2, #0
   102a4:	e1500001 	cmp	r0, r1
   102a8:	20400001 	subcs	r0, r0, r1
   102ac:	21822003 	orrcs	r2, r2, r3
   102b0:	e15000a1 	cmp	r0, r1, lsr #1
   102b4:	204000a1 	subcs	r0, r0, r1, lsr #1
   102b8:	218220a3 	orrcs	r2, r2, r3, lsr #1
   102bc:	e1500121 	cmp	r0, r1, lsr #2
   102c0:	20400121 	subcs	r0, r0, r1, lsr #2
   102c4:	21822123 	orrcs	r2, r2, r3, lsr #2
   102c8:	e15001a1 	cmp	r0, r1, lsr #3
   102cc:	204001a1 	subcs	r0, r0, r1, lsr #3
   102d0:	218221a3 	orrcs	r2, r2, r3, lsr #3
   102d4:	e3500000 	cmp	r0, #0
   102d8:	11b03223 	lsrsne	r3, r3, #4
   102dc:	11a01221 	lsrne	r1, r1, #4
   102e0:	1affffef 	bne	102a4 <__aeabi_uidiv+0x58>
   102e4:	e1a00002 	mov	r0, r2
   102e8:	e12fff1e 	bx	lr
   102ec:	03a00001 	moveq	r0, #1
   102f0:	13a00000 	movne	r0, #0
   102f4:	e12fff1e 	bx	lr
   102f8:	e3510801 	cmp	r1, #65536	; 0x10000
   102fc:	21a01821 	lsrcs	r1, r1, #16
   10300:	23a02010 	movcs	r2, #16
   10304:	33a02000 	movcc	r2, #0
   10308:	e3510c01 	cmp	r1, #256	; 0x100
   1030c:	21a01421 	lsrcs	r1, r1, #8
   10310:	22822008 	addcs	r2, r2, #8
   10314:	e3510010 	cmp	r1, #16
   10318:	21a01221 	lsrcs	r1, r1, #4
   1031c:	22822004 	addcs	r2, r2, #4
   10320:	e3510004 	cmp	r1, #4
   10324:	82822003 	addhi	r2, r2, #3
   10328:	908220a1 	addls	r2, r2, r1, lsr #1
   1032c:	e1a00230 	lsr	r0, r0, r2
   10330:	e12fff1e 	bx	lr
   10334:	e3500000 	cmp	r0, #0
   10338:	13e00000 	mvnne	r0, #0
   1033c:	ea000007 	b	10360 <__aeabi_idiv0>

00010340 <__aeabi_uidivmod>:
   10340:	e3510000 	cmp	r1, #0
   10344:	0afffffa 	beq	10334 <__aeabi_uidiv+0xe8>
   10348:	e92d4003 	push	{r0, r1, lr}
   1034c:	ebffffbe 	bl	1024c <__aeabi_uidiv>
   10350:	e8bd4006 	pop	{r1, r2, lr}
   10354:	e0030092 	mul	r3, r2, r0
   10358:	e0411003 	sub	r1, r1, r3
   1035c:	e12fff1e 	bx	lr

00010360 <__aeabi_idiv0>:
   10360:	e12fff1e 	bx	lr
