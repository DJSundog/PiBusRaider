
kernel.elf:     file format elf32-littlearm


Disassembly of section .init:

00008000 <_start>:
    8000:	e10f0000 	mrs	r0, CPSR
    8004:	e220001a 	eor	r0, r0, #26
    8008:	e310001f 	tst	r0, #31
    800c:	e3c0001f 	bic	r0, r0, #31
    8010:	e38000d3 	orr	r0, r0, #211	; 0xd3
    8014:	1a000004 	bne	802c <_start+0x2c>
    8018:	e3800c01 	orr	r0, r0, #256	; 0x100
    801c:	e28fe00c 	add	lr, pc, #12
    8020:	e16ff000 	msr	SPSR_fsxc, r0
    8024:	e12ef30e 	.word	0xe12ef30e
    8028:	e160006e 	.word	0xe160006e
    802c:	e121f000 	msr	CPSR_c, r0
    8030:	e3a00000 	mov	r0, #0
    8034:	ee0c0f10 	mcr	15, 0, r0, cr12, cr0, {0}
    8038:	f1020011 	cps	#17
    803c:	e3a0d709 	mov	sp, #2359296	; 0x240000
    8040:	f1020012 	cps	#18
    8044:	e3a0d98e 	mov	sp, #2326528	; 0x238000
    8048:	f1020017 	cps	#23
    804c:	e3a0d823 	mov	sp, #2293760	; 0x230000
    8050:	f102001b 	cps	#27
    8054:	e3a0d823 	mov	sp, #2293760	; 0x230000
    8058:	f102001f 	cps	#31
    805c:	e3a0d98a 	mov	sp, #2260992	; 0x228000
    8060:	ea005dc4 	b	1f778 <sysinit>

Disassembly of section .text:

00008068 <main>:
    8068:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    806c:	e24ddc45 	sub	sp, sp, #17664	; 0x4500
    8070:	e24dd0fc 	sub	sp, sp, #252	; 0xfc
    8074:	e28d300c 	add	r3, sp, #12
    8078:	e1a00003 	mov	r0, r3
    807c:	e58d3004 	str	r3, [sp, #4]
    8080:	eb00003a 	bl	8170 <CKernel::CKernel()>
    8084:	e59d0004 	ldr	r0, [sp, #4]
    8088:	eb00007d 	bl	8284 <CKernel::Initialize()>
    808c:	e3500000 	cmp	r0, #0
    8090:	0a000004 	beq	80a8 <main+0x40>
    8094:	e59d0004 	ldr	r0, [sp, #4]
    8098:	eb0000df 	bl	841c <CKernel::Run()>
    809c:	e3500002 	cmp	r0, #2
    80a0:	1a000000 	bne	80a8 <main+0x40>
    80a4:	eb005da8 	bl	1f74c <reboot>
    80a8:	eb005da4 	bl	1f740 <halt>

000080ac <CKernel::miniHDLCPutCh(unsigned char)>:
    80ac:	e12fff1e 	bx	lr

000080b0 <CKernel::miniHDLCFrameRx(unsigned char const*, int)>:
    80b0:	e92d4010 	push	{r4, lr}
    80b4:	e59f4054 	ldr	r4, [pc, #84]	; 8110 <CKernel::miniHDLCFrameRx(unsigned char const*, int)+0x60>
    80b8:	e24dd008 	sub	sp, sp, #8
    80bc:	e5940000 	ldr	r0, [r4]
    80c0:	e3500000 	cmp	r0, #0
    80c4:	0a00000b 	beq	80f8 <CKernel::miniHDLCFrameRx(unsigned char const*, int)+0x48>
    80c8:	e594c004 	ldr	ip, [r4, #4]
    80cc:	e2800b07 	add	r0, r0, #7168	; 0x1c00
    80d0:	e28cc001 	add	ip, ip, #1
    80d4:	e280001c 	add	r0, r0, #28
    80d8:	e58dc000 	str	ip, [sp]
    80dc:	e59f3030 	ldr	r3, [pc, #48]	; 8114 <CKernel::miniHDLCFrameRx(unsigned char const*, int)+0x64>
    80e0:	e3a02003 	mov	r2, #3
    80e4:	e59f102c 	ldr	r1, [pc, #44]	; 8118 <CKernel::miniHDLCFrameRx(unsigned char const*, int)+0x68>
    80e8:	e584c004 	str	ip, [r4, #4]
    80ec:	eb0053b4 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    80f0:	e28dd008 	add	sp, sp, #8
    80f4:	e8bd8010 	pop	{r4, pc}
    80f8:	e59f001c 	ldr	r0, [pc, #28]	; 811c <CKernel::miniHDLCFrameRx(unsigned char const*, int)+0x6c>
    80fc:	e3a02f4a 	mov	r2, #296	; 0x128
    8100:	e59f1018 	ldr	r1, [pc, #24]	; 8120 <CKernel::miniHDLCFrameRx(unsigned char const*, int)+0x70>
    8104:	eb004812 	bl	1a154 <assertion_failed>
    8108:	e5940000 	ldr	r0, [r4]
    810c:	eaffffed 	b	80c8 <CKernel::miniHDLCFrameRx(unsigned char const*, int)+0x18>
    8110:	0002998c 	.word	0x0002998c
    8114:	00022d1c 	.word	0x00022d1c
    8118:	00022cf4 	.word	0x00022cf4
    811c:	00022d0c 	.word	0x00022d0c
    8120:	00022cfc 	.word	0x00022cfc

00008124 <CKernel::ShutdownHandler()>:
    8124:	e92d4010 	push	{r4, lr}
    8128:	e59f4030 	ldr	r4, [pc, #48]	; 8160 <CKernel::ShutdownHandler()+0x3c>
    812c:	e5943000 	ldr	r3, [r4]
    8130:	e3530000 	cmp	r3, #0
    8134:	0a000003 	beq	8148 <CKernel::ShutdownHandler()+0x24>
    8138:	e3a02002 	mov	r2, #2
    813c:	e2833a01 	add	r3, r3, #4096	; 0x1000
    8140:	e5c32d90 	strb	r2, [r3, #3472]	; 0xd90
    8144:	e8bd8010 	pop	{r4, pc}
    8148:	e59f2014 	ldr	r2, [pc, #20]	; 8164 <CKernel::ShutdownHandler()+0x40>
    814c:	e59f1014 	ldr	r1, [pc, #20]	; 8168 <CKernel::ShutdownHandler()+0x44>
    8150:	e59f0014 	ldr	r0, [pc, #20]	; 816c <CKernel::ShutdownHandler()+0x48>
    8154:	eb0047fe 	bl	1a154 <assertion_failed>
    8158:	e5943000 	ldr	r3, [r4]
    815c:	eafffff5 	b	8138 <CKernel::ShutdownHandler()+0x14>
    8160:	0002998c 	.word	0x0002998c
    8164:	0000013e 	.word	0x0000013e
    8168:	00022cfc 	.word	0x00022cfc
    816c:	00022d0c 	.word	0x00022d0c

00008170 <CKernel::CKernel()>:
    8170:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8174:	e1a04000 	mov	r4, r0
    8178:	e24dd008 	sub	sp, sp, #8
    817c:	e3a01001 	mov	r1, #1
    8180:	eb0064ba 	bl	21470 <CMemorySystem::CMemorySystem(bool)>
    8184:	e2847018 	add	r7, r4, #24
    8188:	e284000c 	add	r0, r4, #12
    818c:	eb00477e 	bl	19f8c <CActLED::CActLED()>
    8190:	e2845e87 	add	r5, r4, #2160	; 0x870
    8194:	e1a00007 	mov	r0, r7
    8198:	eb0050a7 	bl	1c43c <CKernelOptions::CKernelOptions()>
    819c:	e1a00005 	mov	r0, r5
    81a0:	eb0049f7 	bl	1a984 <CDeviceNameService::CDeviceNameService()>
    81a4:	e1a00007 	mov	r0, r7
    81a8:	eb00506a 	bl	1c358 <CKernelOptions::GetWidth() const>
    81ac:	e1a06000 	mov	r6, r0
    81b0:	e1a00007 	mov	r0, r7
    81b4:	eb005069 	bl	1c360 <CKernelOptions::GetHeight() const>
    81b8:	e2848d66 	add	r8, r4, #6528	; 0x1980
    81bc:	e3a03000 	mov	r3, #0
    81c0:	e1a02000 	mov	r2, r0
    81c4:	e1a01006 	mov	r1, r6
    81c8:	e2850008 	add	r0, r5, #8
    81cc:	eb0054eb 	bl	1d580 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool)>
    81d0:	e2886030 	add	r6, r8, #48	; 0x30
    81d4:	e2840e8d 	add	r0, r4, #2256	; 0x8d0
    81d8:	e3a02000 	mov	r2, #0
    81dc:	e1a01006 	mov	r1, r6
    81e0:	e2800004 	add	r0, r0, #4
    81e4:	eb0001a0 	bl	886c <CRdSerialDevice::CRdSerialDevice(CInterruptSystem*, bool)>
    81e8:	e2845d6f 	add	r5, r4, #7104	; 0x1bc0
    81ec:	e288002c 	add	r0, r8, #44	; 0x2c
    81f0:	eb00631e 	bl	20e70 <CExceptionHandler::CExceptionHandler()>
    81f4:	e2855030 	add	r5, r5, #48	; 0x30
    81f8:	e1a00006 	mov	r0, r6
    81fc:	eb004ec0 	bl	1bd04 <CInterruptSystem::CInterruptSystem()>
    8200:	e1a01006 	mov	r1, r6
    8204:	e1a00005 	mov	r0, r5
    8208:	eb005d94 	bl	1f860 <CTimer::CTimer(CInterruptSystem*)>
    820c:	e1a00007 	mov	r0, r7
    8210:	eb005057 	bl	1c374 <CKernelOptions::GetLogLevel() const>
    8214:	e1a01000 	mov	r1, r0
    8218:	e2840b07 	add	r0, r4, #7168	; 0x1c00
    821c:	e1a02005 	mov	r2, r5
    8220:	e280001c 	add	r0, r0, #28
    8224:	eb00518a 	bl	1c854 <CLogger::CLogger(unsigned int, CTimer*)>
    8228:	e2840c1d 	add	r0, r4, #7424	; 0x1d00
    822c:	e1a02005 	mov	r2, r5
    8230:	e1a01006 	mov	r1, r6
    8234:	e2800014 	add	r0, r0, #20
    8238:	eb0005e3 	bl	99cc <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)>
    823c:	e3a03000 	mov	r3, #0
    8240:	e2842a01 	add	r2, r4, #4096	; 0x1000
    8244:	e2840d76 	add	r0, r4, #7552	; 0x1d80
    8248:	e5c23d90 	strb	r3, [r2, #3472]	; 0xd90
    824c:	e59f1024 	ldr	r1, [pc, #36]	; 8278 <CKernel::CKernel()+0x108>
    8250:	e58d3000 	str	r3, [sp]
    8254:	e59f2020 	ldr	r2, [pc, #32]	; 827c <CKernel::CKernel()+0x10c>
    8258:	e3a03001 	mov	r3, #1
    825c:	e2800014 	add	r0, r0, #20
    8260:	eb000460 	bl	93e8 <MiniHDLC::MiniHDLC(void (*)(unsigned char), void (*)(unsigned char const*, int), bool, bool)>
    8264:	e1a00004 	mov	r0, r4
    8268:	e59f3010 	ldr	r3, [pc, #16]	; 8280 <CKernel::CKernel()+0x110>
    826c:	e5834000 	str	r4, [r3]
    8270:	e28dd008 	add	sp, sp, #8
    8274:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8278:	000080ac 	.word	0x000080ac
    827c:	000080b0 	.word	0x000080b0
    8280:	0002998c 	.word	0x0002998c

00008284 <CKernel::Initialize()>:
    8284:	e92d4070 	push	{r4, r5, r6, lr}
    8288:	e1a04000 	mov	r4, r0
    828c:	e2800d66 	add	r0, r0, #6528	; 0x1980
    8290:	e2800030 	add	r0, r0, #48	; 0x30
    8294:	eb004ead 	bl	1bd50 <CInterruptSystem::Initialize()>
    8298:	e3500000 	cmp	r0, #0
    829c:	1a000001 	bne	82a8 <CKernel::Initialize()+0x24>
    82a0:	e3a00000 	mov	r0, #0
    82a4:	e8bd8070 	pop	{r4, r5, r6, pc}
    82a8:	e2846e87 	add	r6, r4, #2160	; 0x870
    82ac:	e2860008 	add	r0, r6, #8
    82b0:	eb005863 	bl	1e444 <CScreenDevice::Initialize()>
    82b4:	e3500000 	cmp	r0, #0
    82b8:	0afffff8 	beq	82a0 <CKernel::Initialize()+0x1c>
    82bc:	e2845e8d 	add	r5, r4, #2256	; 0x8d0
    82c0:	e2855004 	add	r5, r5, #4
    82c4:	e1a00005 	mov	r0, r5
    82c8:	e59f105c 	ldr	r1, [pc, #92]	; 832c <CKernel::Initialize()+0xa8>
    82cc:	eb000196 	bl	892c <CRdSerialDevice::Initialize(unsigned int)>
    82d0:	e3500000 	cmp	r0, #0
    82d4:	0afffff1 	beq	82a0 <CKernel::Initialize()+0x1c>
    82d8:	e2840018 	add	r0, r4, #24
    82dc:	eb005021 	bl	1c368 <CKernelOptions::GetLogDevice() const>
    82e0:	e3a02000 	mov	r2, #0
    82e4:	e1a01000 	mov	r1, r0
    82e8:	e1a00006 	mov	r0, r6
    82ec:	eb004a4e 	bl	1ac2c <CDeviceNameService::GetDevice(char const*, bool)>
    82f0:	e2840b07 	add	r0, r4, #7168	; 0x1c00
    82f4:	e1a01005 	mov	r1, r5
    82f8:	e280001c 	add	r0, r0, #28
    82fc:	eb00533c 	bl	1cff4 <CLogger::Initialize(CDevice*)>
    8300:	e3500000 	cmp	r0, #0
    8304:	0affffe5 	beq	82a0 <CKernel::Initialize()+0x1c>
    8308:	e2840d6f 	add	r0, r4, #7104	; 0x1bc0
    830c:	e2800030 	add	r0, r0, #48	; 0x30
    8310:	eb006035 	bl	203ec <CTimer::Initialize()>
    8314:	e3500000 	cmp	r0, #0
    8318:	0affffe0 	beq	82a0 <CKernel::Initialize()+0x1c>
    831c:	e2840c1d 	add	r0, r4, #7424	; 0x1d00
    8320:	e2800014 	add	r0, r0, #20
    8324:	e8bd4070 	pop	{r4, r5, r6, lr}
    8328:	ea000de0 	b	bab0 <CDWHCIDevice::Initialize()>
    832c:	0001c200 	.word	0x0001c200

00008330 <CKernel::~CKernel()>:
    8330:	e92d4070 	push	{r4, r5, r6, lr}
    8334:	e3a02000 	mov	r2, #0
    8338:	e1a04000 	mov	r4, r0
    833c:	e59f3078 	ldr	r3, [pc, #120]	; 83bc <CKernel::~CKernel()+0x8c>
    8340:	e2800c1d 	add	r0, r0, #7424	; 0x1d00
    8344:	e2800014 	add	r0, r0, #20
    8348:	e5832000 	str	r2, [r3]
    834c:	eb00056a 	bl	98fc <CDWHCIDevice::~CDWHCIDevice()>
    8350:	e2840b07 	add	r0, r4, #7168	; 0x1c00
    8354:	e280001c 	add	r0, r0, #28
    8358:	eb005153 	bl	1c8ac <CLogger::~CLogger()>
    835c:	e2840d6f 	add	r0, r4, #7104	; 0x1bc0
    8360:	e2845d66 	add	r5, r4, #6528	; 0x1980
    8364:	e2800030 	add	r0, r0, #48	; 0x30
    8368:	eb005d5e 	bl	1f8e8 <CTimer::~CTimer()>
    836c:	e2850030 	add	r0, r5, #48	; 0x30
    8370:	eb004e71 	bl	1bd3c <CInterruptSystem::~CInterruptSystem()>
    8374:	e285002c 	add	r0, r5, #44	; 0x2c
    8378:	eb0062e0 	bl	20f00 <CExceptionHandler::~CExceptionHandler()>
    837c:	e2840e8d 	add	r0, r4, #2256	; 0x8d0
    8380:	e2845e87 	add	r5, r4, #2160	; 0x870
    8384:	e2800004 	add	r0, r0, #4
    8388:	eb0003bb 	bl	927c <CRdSerialDevice::~CRdSerialDevice()>
    838c:	e2850008 	add	r0, r5, #8
    8390:	eb00542d 	bl	1d44c <CScreenDevice::~CScreenDevice()>
    8394:	e1a00005 	mov	r0, r5
    8398:	eb00498c 	bl	1a9d0 <CDeviceNameService::~CDeviceNameService()>
    839c:	e2840018 	add	r0, r4, #24
    83a0:	eb004fe7 	bl	1c344 <CKernelOptions::~CKernelOptions()>
    83a4:	e284000c 	add	r0, r4, #12
    83a8:	eb0046d8 	bl	19f10 <CActLED::~CActLED()>
    83ac:	e1a00004 	mov	r0, r4
    83b0:	eb0063ba 	bl	212a0 <CMemorySystem::~CMemorySystem()>
    83b4:	e1a00004 	mov	r0, r4
    83b8:	e8bd8070 	pop	{r4, r5, r6, pc}
    83bc:	0002998c 	.word	0x0002998c

000083c0 <CKernel::KeyPressedHandler(char const*)>:
    83c0:	e92d4070 	push	{r4, r5, r6, lr}
    83c4:	e59f6044 	ldr	r6, [pc, #68]	; 8410 <CKernel::KeyPressedHandler(char const*)+0x50>
    83c8:	e1a05000 	mov	r5, r0
    83cc:	e5964000 	ldr	r4, [r6]
    83d0:	e3540000 	cmp	r4, #0
    83d4:	0a000007 	beq	83f8 <CKernel::KeyPressedHandler(char const*)+0x38>
    83d8:	e1a00005 	mov	r0, r5
    83dc:	eb0060a2 	bl	2066c <strlen>
    83e0:	e1a02000 	mov	r2, r0
    83e4:	e2840e8d 	add	r0, r4, #2256	; 0x8d0
    83e8:	e1a01005 	mov	r1, r5
    83ec:	e8bd4070 	pop	{r4, r5, r6, lr}
    83f0:	e2800004 	add	r0, r0, #4
    83f4:	ea0002a9 	b	8ea0 <CRdSerialDevice::Write(void const*, unsigned int)>
    83f8:	e3a02e13 	mov	r2, #304	; 0x130
    83fc:	e59f1010 	ldr	r1, [pc, #16]	; 8414 <CKernel::KeyPressedHandler(char const*)+0x54>
    8400:	e59f0010 	ldr	r0, [pc, #16]	; 8418 <CKernel::KeyPressedHandler(char const*)+0x58>
    8404:	eb004752 	bl	1a154 <assertion_failed>
    8408:	e5964000 	ldr	r4, [r6]
    840c:	eafffff1 	b	83d8 <CKernel::KeyPressedHandler(char const*)+0x18>
    8410:	0002998c 	.word	0x0002998c
    8414:	00022cfc 	.word	0x00022cfc
    8418:	00022d0c 	.word	0x00022d0c

0000841c <CKernel::Run()>:
    841c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8420:	e3a02000 	mov	r2, #0
    8424:	e1a09000 	mov	r9, r0
    8428:	e24ddfff 	sub	sp, sp, #1020	; 0x3fc
    842c:	e2800e87 	add	r0, r0, #2160	; 0x870
    8430:	e59f114c 	ldr	r1, [pc, #332]	; 8584 <CKernel::Run()+0x168>
    8434:	eb0049fc 	bl	1ac2c <CDeviceNameService::GetDevice(char const*, bool)>
    8438:	e289bb07 	add	fp, r9, #7168	; 0x1c00
    843c:	e2504000 	subs	r4, r0, #0
    8440:	e28bb01c 	add	fp, fp, #28
    8444:	0a000048 	beq	856c <CKernel::Run()+0x150>
    8448:	e3a0a000 	mov	sl, #0
    844c:	e1a00004 	mov	r0, r4
    8450:	e59f1130 	ldr	r1, [pc, #304]	; 8588 <CKernel::Run()+0x16c>
    8454:	eb00227c 	bl	10e4c <CUSBKeyboardDevice::RegisterShutdownHandler(void (*)())>
    8458:	e1a00004 	mov	r0, r4
    845c:	e59f1128 	ldr	r1, [pc, #296]	; 858c <CKernel::Run()+0x170>
    8460:	eb002275 	bl	10e3c <CUSBKeyboardDevice::RegisterKeyPressedHandler(void (*)(char const*))>
    8464:	e1a0800a 	mov	r8, sl
    8468:	e2894d6f 	add	r4, r9, #7104	; 0x1bc0
    846c:	e2895e8d 	add	r5, r9, #2256	; 0x8d0
    8470:	e2899d76 	add	r9, r9, #7552	; 0x1d80
    8474:	e2844030 	add	r4, r4, #48	; 0x30
    8478:	e2855004 	add	r5, r5, #4
    847c:	e2899014 	add	r9, r9, #20
    8480:	e1a00004 	mov	r0, r4
    8484:	eb005d82 	bl	1fa94 <CTimer::GetTicks() const>
    8488:	e3a06000 	mov	r6, #0
    848c:	e2807ffa 	add	r7, r0, #1000	; 0x3e8
    8490:	e3a02ffa 	mov	r2, #1000	; 0x3e8
    8494:	e28d1010 	add	r1, sp, #16
    8498:	e1a00005 	mov	r0, r5
    849c:	eb00007f 	bl	86a0 <CRdSerialDevice::Read(void*, unsigned int)>
    84a0:	e2503000 	subs	r3, r0, #0
    84a4:	da000005 	ble	84c0 <CKernel::Run()+0xa4>
    84a8:	e1a02003 	mov	r2, r3
    84ac:	e28d1010 	add	r1, sp, #16
    84b0:	e1a00009 	mov	r0, r9
    84b4:	e0888003 	add	r8, r8, r3
    84b8:	e0866003 	add	r6, r6, r3
    84bc:	eb000424 	bl	9554 <MiniHDLC::handleBuffer(unsigned char*, int)>
    84c0:	e1a00004 	mov	r0, r4
    84c4:	eb005d72 	bl	1fa94 <CTimer::GetTicks() const>
    84c8:	e1500007 	cmp	r0, r7
    84cc:	9affffef 	bls	8490 <CKernel::Run()+0x74>
    84d0:	e28d0010 	add	r0, sp, #16
    84d4:	eb00589e 	bl	1e754 <CString::CString()>
    84d8:	e59f30b0 	ldr	r3, [pc, #176]	; 8590 <CKernel::Run()+0x174>
    84dc:	e3a02003 	mov	r2, #3
    84e0:	e59f10ac 	ldr	r1, [pc, #172]	; 8594 <CKernel::Run()+0x178>
    84e4:	e1a0000b 	mov	r0, fp
    84e8:	eb0052b5 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    84ec:	e1a00004 	mov	r0, r4
    84f0:	eb005d67 	bl	1fa94 <CTimer::GetTicks() const>
    84f4:	e28aa001 	add	sl, sl, #1
    84f8:	e3a03003 	mov	r3, #3
    84fc:	e1a0200a 	mov	r2, sl
    8500:	e59f1090 	ldr	r1, [pc, #144]	; 8598 <CKernel::Run()+0x17c>
    8504:	e58d0008 	str	r0, [sp, #8]
    8508:	e88d0140 	stm	sp, {r6, r8}
    850c:	e28d0010 	add	r0, sp, #16
    8510:	eb005c7d 	bl	1f70c <CString::Format(char const*, ...)>
    8514:	e28d0010 	add	r0, sp, #16
    8518:	eb0058a3 	bl	1e7ac <CString::operator char const*() const>
    851c:	e1a06000 	mov	r6, r0
    8520:	e28d0010 	add	r0, sp, #16
    8524:	eb0058ce 	bl	1e864 <CString::GetLength() const>
    8528:	e1a01006 	mov	r1, r6
    852c:	e1a02000 	mov	r2, r0
    8530:	e1a00005 	mov	r0, r5
    8534:	eb000259 	bl	8ea0 <CRdSerialDevice::Write(void const*, unsigned int)>
    8538:	e28d0010 	add	r0, sp, #16
    853c:	eb005851 	bl	1e688 <CString::~CString()>
    8540:	e35a0003 	cmp	sl, #3
    8544:	1affffcd 	bne	8480 <CKernel::Run()+0x64>
    8548:	e3a0200b 	mov	r2, #11
    854c:	e59f1048 	ldr	r1, [pc, #72]	; 859c <CKernel::Run()+0x180>
    8550:	e1a00005 	mov	r0, r5
    8554:	eb000251 	bl	8ea0 <CRdSerialDevice::Write(void const*, unsigned int)>
    8558:	e1a00005 	mov	r0, r5
    855c:	eb00020c 	bl	8d94 <CRdSerialDevice::Flush()>
    8560:	e3a00002 	mov	r0, #2
    8564:	e28ddfff 	add	sp, sp, #1020	; 0x3fc
    8568:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    856c:	e59f302c 	ldr	r3, [pc, #44]	; 85a0 <CKernel::Run()+0x184>
    8570:	e3a02001 	mov	r2, #1
    8574:	e59f1018 	ldr	r1, [pc, #24]	; 8594 <CKernel::Run()+0x178>
    8578:	e1a0000b 	mov	r0, fp
    857c:	eb005290 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8580:	eaffffb0 	b	8448 <CKernel::Run()+0x2c>
    8584:	00022d2c 	.word	0x00022d2c
    8588:	00008124 	.word	0x00008124
    858c:	000083c0 	.word	0x000083c0
    8590:	00022d48 	.word	0x00022d48
    8594:	00022cf4 	.word	0x00022cf4
    8598:	00022d54 	.word	0x00022d54
    859c:	00022d98 	.word	0x00022d98
    85a0:	00022d34 	.word	0x00022d34

000085a4 <CKernel::KeyStatusHandlerRaw(unsigned char, unsigned char const*)>:
    85a4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    85a8:	e59f60d8 	ldr	r6, [pc, #216]	; 8688 <CKernel::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0xe4>
    85ac:	e24dd024 	sub	sp, sp, #36	; 0x24
    85b0:	e5963000 	ldr	r3, [r6]
    85b4:	e1a04000 	mov	r4, r0
    85b8:	e3530000 	cmp	r3, #0
    85bc:	e1a05001 	mov	r5, r1
    85c0:	0a00002b 	beq	8674 <CKernel::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0xd0>
    85c4:	e1a0000d 	mov	r0, sp
    85c8:	eb005861 	bl	1e754 <CString::CString()>
    85cc:	e1a02004 	mov	r2, r4
    85d0:	e1a0000d 	mov	r0, sp
    85d4:	e59f10b0 	ldr	r1, [pc, #176]	; 868c <CKernel::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0xe8>
    85d8:	e2454001 	sub	r4, r5, #1
    85dc:	eb005c4a 	bl	1f70c <CString::Format(char const*, ...)>
    85e0:	e59f70a8 	ldr	r7, [pc, #168]	; 8690 <CKernel::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0xec>
    85e4:	e2855005 	add	r5, r5, #5
    85e8:	ea000001 	b	85f4 <CKernel::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0x50>
    85ec:	e1540005 	cmp	r4, r5
    85f0:	0a000011 	beq	863c <CKernel::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0x98>
    85f4:	e5f43001 	ldrb	r3, [r4, #1]!
    85f8:	e3530000 	cmp	r3, #0
    85fc:	0afffffa 	beq	85ec <CKernel::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0x48>
    8600:	e28d0010 	add	r0, sp, #16
    8604:	eb005852 	bl	1e754 <CString::CString()>
    8608:	e5d42000 	ldrb	r2, [r4]
    860c:	e1a01007 	mov	r1, r7
    8610:	e28d0010 	add	r0, sp, #16
    8614:	eb005c3c 	bl	1f70c <CString::Format(char const*, ...)>
    8618:	e28d0010 	add	r0, sp, #16
    861c:	eb005862 	bl	1e7ac <CString::operator char const*() const>
    8620:	e1a01000 	mov	r1, r0
    8624:	e1a0000d 	mov	r0, sp
    8628:	eb005891 	bl	1e874 <CString::Append(char const*)>
    862c:	e28d0010 	add	r0, sp, #16
    8630:	eb005814 	bl	1e688 <CString::~CString()>
    8634:	e1540005 	cmp	r4, r5
    8638:	1affffed 	bne	85f4 <CKernel::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0x50>
    863c:	e1a0000d 	mov	r0, sp
    8640:	e5964000 	ldr	r4, [r6]
    8644:	eb005858 	bl	1e7ac <CString::operator char const*() const>
    8648:	e2844b07 	add	r4, r4, #7168	; 0x1c00
    864c:	e284401c 	add	r4, r4, #28
    8650:	e1a03000 	mov	r3, r0
    8654:	e3a02003 	mov	r2, #3
    8658:	e1a00004 	mov	r0, r4
    865c:	e59f1030 	ldr	r1, [pc, #48]	; 8694 <CKernel::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0xf0>
    8660:	eb005257 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8664:	e1a0000d 	mov	r0, sp
    8668:	eb005806 	bl	1e688 <CString::~CString()>
    866c:	e28dd024 	add	sp, sp, #36	; 0x24
    8670:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    8674:	e3a02f51 	mov	r2, #324	; 0x144
    8678:	e59f1018 	ldr	r1, [pc, #24]	; 8698 <CKernel::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0xf4>
    867c:	e59f0018 	ldr	r0, [pc, #24]	; 869c <CKernel::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0xf8>
    8680:	eb0046b3 	bl	1a154 <assertion_failed>
    8684:	eaffffce 	b	85c4 <CKernel::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0x20>
    8688:	0002998c 	.word	0x0002998c
    868c:	00022da4 	.word	0x00022da4
    8690:	00024d84 	.word	0x00024d84
    8694:	00022cf4 	.word	0x00022cf4
    8698:	00022cfc 	.word	0x00022cfc
    869c:	00022d0c 	.word	0x00022d0c

000086a0 <CRdSerialDevice::Read(void*, unsigned int)>:
    86a0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    86a4:	e2516000 	subs	r6, r1, #0
    86a8:	e1a04000 	mov	r4, r0
    86ac:	e1a05002 	mov	r5, r2
    86b0:	0a000059 	beq	881c <CRdSerialDevice::Read(void*, unsigned int)+0x17c>
    86b4:	e59430a4 	ldr	r3, [r4, #164]	; 0xa4
    86b8:	e3530000 	cmp	r3, #0
    86bc:	0a000033 	beq	8790 <CRdSerialDevice::Read(void*, unsigned int)+0xf0>
    86c0:	e2847a01 	add	r7, r4, #4096	; 0x1000
    86c4:	e59700d0 	ldr	r0, [r7, #208]	; 0xd0
    86c8:	e3500000 	cmp	r0, #0
    86cc:	1a00002a 	bne	877c <CRdSerialDevice::Read(void*, unsigned int)+0xdc>
    86d0:	e59438b4 	ldr	r3, [r4, #2228]	; 0x8b4
    86d4:	e3530000 	cmp	r3, #0
    86d8:	ba00001f 	blt	875c <CRdSerialDevice::Read(void*, unsigned int)+0xbc>
    86dc:	e3550000 	cmp	r5, #0
    86e0:	0a000020 	beq	8768 <CRdSerialDevice::Read(void*, unsigned int)+0xc8>
    86e4:	e59438ac 	ldr	r3, [r4, #2220]	; 0x8ac
    86e8:	e59428b0 	ldr	r2, [r4, #2224]	; 0x8b0
    86ec:	e1520003 	cmp	r2, r3
    86f0:	0a000054 	beq	8848 <CRdSerialDevice::Read(void*, unsigned int)+0x1a8>
    86f4:	e0862005 	add	r2, r6, r5
    86f8:	e1a01006 	mov	r1, r6
    86fc:	e59fc154 	ldr	ip, [pc, #340]	; 8858 <CRdSerialDevice::Read(void*, unsigned int)+0x1b8>
    8700:	ea000003 	b	8714 <CRdSerialDevice::Read(void*, unsigned int)+0x74>
    8704:	e59408ac 	ldr	r0, [r4, #2220]	; 0x8ac
    8708:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
    870c:	e1500003 	cmp	r0, r3
    8710:	0a000014 	beq	8768 <CRdSerialDevice::Read(void*, unsigned int)+0xc8>
    8714:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
    8718:	e2830001 	add	r0, r3, #1
    871c:	e58408b0 	str	r0, [r4, #2224]	; 0x8b0
    8720:	e0843003 	add	r3, r4, r3
    8724:	e5d330aa 	ldrb	r3, [r3, #170]	; 0xaa
    8728:	e4c13001 	strb	r3, [r1], #1
    872c:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
    8730:	e1510002 	cmp	r1, r2
    8734:	e003300c 	and	r3, r3, ip
    8738:	e58438b0 	str	r3, [r4, #2224]	; 0x8b0
    873c:	e0415006 	sub	r5, r1, r6
    8740:	1affffef 	bne	8704 <CRdSerialDevice::Read(void*, unsigned int)+0x64>
    8744:	e59730d0 	ldr	r3, [r7, #208]	; 0xd0
    8748:	e3530000 	cmp	r3, #0
    874c:	0a000008 	beq	8774 <CRdSerialDevice::Read(void*, unsigned int)+0xd4>
    8750:	eb0063e6 	bl	216f0 <LeaveCritical>
    8754:	e1a00005 	mov	r0, r5
    8758:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    875c:	e3a03000 	mov	r3, #0
    8760:	e59458b4 	ldr	r5, [r4, #2228]	; 0x8b4
    8764:	e58438b4 	str	r3, [r4, #2228]	; 0x8b4
    8768:	e59730d0 	ldr	r3, [r7, #208]	; 0xd0
    876c:	e3530000 	cmp	r3, #0
    8770:	1afffff6 	bne	8750 <CRdSerialDevice::Read(void*, unsigned int)+0xb0>
    8774:	e1a00005 	mov	r0, r5
    8778:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    877c:	eb0063ae 	bl	2163c <EnterCritical>
    8780:	e59438b4 	ldr	r3, [r4, #2228]	; 0x8b4
    8784:	e3530000 	cmp	r3, #0
    8788:	aaffffd3 	bge	86dc <CRdSerialDevice::Read(void*, unsigned int)+0x3c>
    878c:	eafffff2 	b	875c <CRdSerialDevice::Read(void*, unsigned int)+0xbc>
    8790:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    8794:	e3550000 	cmp	r5, #0
    8798:	0a00001b 	beq	880c <CRdSerialDevice::Read(void*, unsigned int)+0x16c>
    879c:	e59f00b8 	ldr	r0, [pc, #184]	; 885c <CRdSerialDevice::Read(void*, unsigned int)+0x1bc>
    87a0:	e5902018 	ldr	r2, [r0, #24]
    87a4:	e3120010 	tst	r2, #16
    87a8:	1a000028 	bne	8850 <CRdSerialDevice::Read(void*, unsigned int)+0x1b0>
    87ac:	e5903000 	ldr	r3, [r0]
    87b0:	e3130b01 	tst	r3, #1024	; 0x400
    87b4:	1a00001d 	bne	8830 <CRdSerialDevice::Read(void*, unsigned int)+0x190>
    87b8:	e3130b02 	tst	r3, #2048	; 0x800
    87bc:	1a00001d 	bne	8838 <CRdSerialDevice::Read(void*, unsigned int)+0x198>
    87c0:	e3130c01 	tst	r3, #256	; 0x100
    87c4:	00862005 	addeq	r2, r6, r5
    87c8:	01a01006 	moveq	r1, r6
    87cc:	0a00000a 	beq	87fc <CRdSerialDevice::Read(void*, unsigned int)+0x15c>
    87d0:	ea00001a 	b	8840 <CRdSerialDevice::Read(void*, unsigned int)+0x1a0>
    87d4:	e5903018 	ldr	r3, [r0, #24]
    87d8:	e3130010 	tst	r3, #16
    87dc:	1a00000a 	bne	880c <CRdSerialDevice::Read(void*, unsigned int)+0x16c>
    87e0:	e5903000 	ldr	r3, [r0]
    87e4:	e3130b01 	tst	r3, #1024	; 0x400
    87e8:	1a000010 	bne	8830 <CRdSerialDevice::Read(void*, unsigned int)+0x190>
    87ec:	e3130b02 	tst	r3, #2048	; 0x800
    87f0:	1a000010 	bne	8838 <CRdSerialDevice::Read(void*, unsigned int)+0x198>
    87f4:	e3130c01 	tst	r3, #256	; 0x100
    87f8:	1a000010 	bne	8840 <CRdSerialDevice::Read(void*, unsigned int)+0x1a0>
    87fc:	e4c13001 	strb	r3, [r1], #1
    8800:	e1510002 	cmp	r1, r2
    8804:	e0415006 	sub	r5, r1, r6
    8808:	1afffff1 	bne	87d4 <CRdSerialDevice::Read(void*, unsigned int)+0x134>
    880c:	e3a03000 	mov	r3, #0
    8810:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    8814:	e1a00005 	mov	r0, r5
    8818:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    881c:	e59f203c 	ldr	r2, [pc, #60]	; 8860 <CRdSerialDevice::Read(void*, unsigned int)+0x1c0>
    8820:	e59f103c 	ldr	r1, [pc, #60]	; 8864 <CRdSerialDevice::Read(void*, unsigned int)+0x1c4>
    8824:	e59f003c 	ldr	r0, [pc, #60]	; 8868 <CRdSerialDevice::Read(void*, unsigned int)+0x1c8>
    8828:	eb004649 	bl	1a154 <assertion_failed>
    882c:	eaffffa0 	b	86b4 <CRdSerialDevice::Read(void*, unsigned int)+0x14>
    8830:	e3e05000 	mvn	r5, #0
    8834:	eafffff4 	b	880c <CRdSerialDevice::Read(void*, unsigned int)+0x16c>
    8838:	e3e05001 	mvn	r5, #1
    883c:	eafffff2 	b	880c <CRdSerialDevice::Read(void*, unsigned int)+0x16c>
    8840:	e3e05002 	mvn	r5, #2
    8844:	eafffff0 	b	880c <CRdSerialDevice::Read(void*, unsigned int)+0x16c>
    8848:	e3a05000 	mov	r5, #0
    884c:	eaffffc5 	b	8768 <CRdSerialDevice::Read(void*, unsigned int)+0xc8>
    8850:	e1a05003 	mov	r5, r3
    8854:	eaffffec 	b	880c <CRdSerialDevice::Read(void*, unsigned int)+0x16c>
    8858:	000007ff 	.word	0x000007ff
    885c:	20201000 	.word	0x20201000
    8860:	00000101 	.word	0x00000101
    8864:	00022ddc 	.word	0x00022ddc
    8868:	00022df0 	.word	0x00022df0

0000886c <CRdSerialDevice::CRdSerialDevice(CInterruptSystem*, bool)>:
    886c:	e92d4070 	push	{r4, r5, r6, lr}
    8870:	e1a04000 	mov	r4, r0
    8874:	e1a05002 	mov	r5, r2
    8878:	e1a06001 	mov	r6, r1
    887c:	eb00483c 	bl	1a974 <CDevice::CDevice()>
    8880:	e1a00004 	mov	r0, r4
    8884:	e3a03000 	mov	r3, #0
    8888:	e59f1098 	ldr	r1, [pc, #152]	; 8928 <CRdSerialDevice::CRdSerialDevice(CInterruptSystem*, bool)+0xbc>
    888c:	e1a02003 	mov	r2, r3
    8890:	e4801004 	str	r1, [r0], #4
    8894:	e3a01020 	mov	r1, #32
    8898:	eb004ca3 	bl	1bb2c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    889c:	e3a03000 	mov	r3, #0
    88a0:	e284002c 	add	r0, r4, #44	; 0x2c
    88a4:	e1a02003 	mov	r2, r3
    88a8:	e3a01021 	mov	r1, #33	; 0x21
    88ac:	eb004c9e 	bl	1bb2c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    88b0:	e2840054 	add	r0, r4, #84	; 0x54
    88b4:	e3a03000 	mov	r3, #0
    88b8:	e3a02004 	mov	r2, #4
    88bc:	e3a0100e 	mov	r1, #14
    88c0:	eb004c99 	bl	1bb2c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    88c4:	e284007c 	add	r0, r4, #124	; 0x7c
    88c8:	e3a03000 	mov	r3, #0
    88cc:	e3a02004 	mov	r2, #4
    88d0:	e3a0100f 	mov	r1, #15
    88d4:	eb004c94 	bl	1bb2c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    88d8:	e3550000 	cmp	r5, #0
    88dc:	e3a03000 	mov	r3, #0
    88e0:	e3a01001 	mov	r1, #1
    88e4:	13a0c002 	movne	ip, #2
    88e8:	03a0c001 	moveq	ip, #1
    88ec:	e2842a01 	add	r2, r4, #4096	; 0x1000
    88f0:	e58438ac 	str	r3, [r4, #2220]	; 0x8ac
    88f4:	e58460a4 	str	r6, [r4, #164]	; 0xa4
    88f8:	e58438b0 	str	r3, [r4, #2224]	; 0x8b0
    88fc:	e5c450a8 	strb	r5, [r4, #168]	; 0xa8
    8900:	e5c430a9 	strb	r3, [r4, #169]	; 0xa9
    8904:	e58438b4 	str	r3, [r4, #2228]	; 0x8b4
    8908:	e1a00004 	mov	r0, r4
    890c:	e58230b8 	str	r3, [r2, #184]	; 0xb8
    8910:	e582c0d0 	str	ip, [r2, #208]	; 0xd0
    8914:	e58230c4 	str	r3, [r2, #196]	; 0xc4
    8918:	e58230bc 	str	r3, [r2, #188]	; 0xbc
    891c:	e58210c0 	str	r1, [r2, #192]	; 0xc0
    8920:	e58210d4 	str	r1, [r2, #212]	; 0xd4
    8924:	e8bd8070 	pop	{r4, r5, r6, pc}
    8928:	00022dc8 	.word	0x00022dc8

0000892c <CRdSerialDevice::Initialize(unsigned int)>:
    892c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8930:	e1a08001 	mov	r8, r1
    8934:	e1a04000 	mov	r4, r0
    8938:	eb0052b5 	bl	1d414 <CMachineInfo::Get()>
    893c:	e3a01002 	mov	r1, #2
    8940:	eb005253 	bl	1d294 <CMachineInfo::GetClockRate(unsigned int) const>
    8944:	e2505000 	subs	r5, r0, #0
    8948:	e2487f4b 	sub	r7, r8, #300	; 0x12c
    894c:	e1a06208 	lsl	r6, r8, #4
    8950:	0a000045 	beq	8a6c <CRdSerialDevice::Initialize(unsigned int)+0x140>
    8954:	e59f3158 	ldr	r3, [pc, #344]	; 8ab4 <CRdSerialDevice::Initialize(unsigned int)+0x188>
    8958:	e1570003 	cmp	r7, r3
    895c:	8a00003d 	bhi	8a58 <CRdSerialDevice::Initialize(unsigned int)+0x12c>
    8960:	e1a01006 	mov	r1, r6
    8964:	e1a00005 	mov	r0, r5
    8968:	eb000385 	bl	9784 <__udivsi3>
    896c:	e59f3144 	ldr	r3, [pc, #324]	; 8ab8 <CRdSerialDevice::Initialize(unsigned int)+0x18c>
    8970:	e2402001 	sub	r2, r0, #1
    8974:	e1520003 	cmp	r2, r3
    8978:	e1a07000 	mov	r7, r0
    897c:	8a000042 	bhi	8a8c <CRdSerialDevice::Initialize(unsigned int)+0x160>
    8980:	e1a00005 	mov	r0, r5
    8984:	e1a01006 	mov	r1, r6
    8988:	eb0003ba 	bl	9878 <__aeabi_uidivmod>
    898c:	e1a00181 	lsl	r0, r1, #3
    8990:	e1a01008 	mov	r1, r8
    8994:	eb00037a 	bl	9784 <__udivsi3>
    8998:	e2005001 	and	r5, r0, #1
    899c:	e08550a0 	add	r5, r5, r0, lsr #1
    89a0:	e355003f 	cmp	r5, #63	; 0x3f
    89a4:	8a00003d 	bhi	8aa0 <CRdSerialDevice::Initialize(unsigned int)+0x174>
    89a8:	e59400a4 	ldr	r0, [r4, #164]	; 0xa4
    89ac:	e3500000 	cmp	r0, #0
    89b0:	0a000008 	beq	89d8 <CRdSerialDevice::Initialize(unsigned int)+0xac>
    89b4:	e5d430a8 	ldrb	r3, [r4, #168]	; 0xa8
    89b8:	e59f20fc 	ldr	r2, [pc, #252]	; 8abc <CRdSerialDevice::Initialize(unsigned int)+0x190>
    89bc:	e3530000 	cmp	r3, #0
    89c0:	e3a01039 	mov	r1, #57	; 0x39
    89c4:	e1a03004 	mov	r3, r4
    89c8:	0a000020 	beq	8a50 <CRdSerialDevice::Initialize(unsigned int)+0x124>
    89cc:	eb004da7 	bl	1c070 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>
    89d0:	e3a03001 	mov	r3, #1
    89d4:	e5c430a9 	strb	r3, [r4, #169]	; 0xa9
    89d8:	e3a02000 	mov	r2, #0
    89dc:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
    89e0:	e59f30d8 	ldr	r3, [pc, #216]	; 8ac0 <CRdSerialDevice::Initialize(unsigned int)+0x194>
    89e4:	e59f10d8 	ldr	r1, [pc, #216]	; 8ac4 <CRdSerialDevice::Initialize(unsigned int)+0x198>
    89e8:	e5832038 	str	r2, [r3, #56]	; 0x38
    89ec:	e5831044 	str	r1, [r3, #68]	; 0x44
    89f0:	e5837024 	str	r7, [r3, #36]	; 0x24
    89f4:	e5835028 	str	r5, [r3, #40]	; 0x28
    89f8:	e59420a4 	ldr	r2, [r4, #164]	; 0xa4
    89fc:	e3a05000 	mov	r5, #0
    8a00:	e3520000 	cmp	r2, #0
    8a04:	13a02e45 	movne	r2, #1104	; 0x450
    8a08:	03a02060 	moveq	r2, #96	; 0x60
    8a0c:	13a00009 	movne	r0, #9
    8a10:	13a01070 	movne	r1, #112	; 0x70
    8a14:	15830034 	strne	r0, [r3, #52]	; 0x34
    8a18:	0583202c 	streq	r2, [r3, #44]	; 0x2c
    8a1c:	1583102c 	strne	r1, [r3, #44]	; 0x2c
    8a20:	15832038 	strne	r2, [r3, #56]	; 0x38
    8a24:	e59f3094 	ldr	r3, [pc, #148]	; 8ac0 <CRdSerialDevice::Initialize(unsigned int)+0x194>
    8a28:	e59f2098 	ldr	r2, [pc, #152]	; 8ac8 <CRdSerialDevice::Initialize(unsigned int)+0x19c>
    8a2c:	e5832030 	str	r2, [r3, #48]	; 0x30
    8a30:	ee075fba 	mcr	15, 0, r5, cr7, cr10, {5}
    8a34:	eb0048bf 	bl	1ad38 <CDeviceNameService::Get()>
    8a38:	e1a03005 	mov	r3, r5
    8a3c:	e1a02004 	mov	r2, r4
    8a40:	e59f1084 	ldr	r1, [pc, #132]	; 8acc <CRdSerialDevice::Initialize(unsigned int)+0x1a0>
    8a44:	eb0047fb 	bl	1aa38 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
    8a48:	e3a00001 	mov	r0, #1
    8a4c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8a50:	eb004d19 	bl	1bebc <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    8a54:	eaffffdd 	b	89d0 <CRdSerialDevice::Initialize(unsigned int)+0xa4>
    8a58:	e3a0208c 	mov	r2, #140	; 0x8c
    8a5c:	e59f106c 	ldr	r1, [pc, #108]	; 8ad0 <CRdSerialDevice::Initialize(unsigned int)+0x1a4>
    8a60:	e59f006c 	ldr	r0, [pc, #108]	; 8ad4 <CRdSerialDevice::Initialize(unsigned int)+0x1a8>
    8a64:	eb0045ba 	bl	1a154 <assertion_failed>
    8a68:	eaffffbc 	b	8960 <CRdSerialDevice::Initialize(unsigned int)+0x34>
    8a6c:	e3a0208a 	mov	r2, #138	; 0x8a
    8a70:	e59f1058 	ldr	r1, [pc, #88]	; 8ad0 <CRdSerialDevice::Initialize(unsigned int)+0x1a4>
    8a74:	e59f005c 	ldr	r0, [pc, #92]	; 8ad8 <CRdSerialDevice::Initialize(unsigned int)+0x1ac>
    8a78:	eb0045b5 	bl	1a154 <assertion_failed>
    8a7c:	e59f3030 	ldr	r3, [pc, #48]	; 8ab4 <CRdSerialDevice::Initialize(unsigned int)+0x188>
    8a80:	e1570003 	cmp	r7, r3
    8a84:	91a07005 	movls	r7, r5
    8a88:	8afffff2 	bhi	8a58 <CRdSerialDevice::Initialize(unsigned int)+0x12c>
    8a8c:	e3a0208f 	mov	r2, #143	; 0x8f
    8a90:	e59f1038 	ldr	r1, [pc, #56]	; 8ad0 <CRdSerialDevice::Initialize(unsigned int)+0x1a4>
    8a94:	e59f0040 	ldr	r0, [pc, #64]	; 8adc <CRdSerialDevice::Initialize(unsigned int)+0x1b0>
    8a98:	eb0045ad 	bl	1a154 <assertion_failed>
    8a9c:	eaffffb7 	b	8980 <CRdSerialDevice::Initialize(unsigned int)+0x54>
    8aa0:	e3a02092 	mov	r2, #146	; 0x92
    8aa4:	e59f1024 	ldr	r1, [pc, #36]	; 8ad0 <CRdSerialDevice::Initialize(unsigned int)+0x1a4>
    8aa8:	e59f0030 	ldr	r0, [pc, #48]	; 8ae0 <CRdSerialDevice::Initialize(unsigned int)+0x1b4>
    8aac:	eb0045a8 	bl	1a154 <assertion_failed>
    8ab0:	eaffffbc 	b	89a8 <CRdSerialDevice::Initialize(unsigned int)+0x7c>
    8ab4:	003d07d4 	.word	0x003d07d4
    8ab8:	0000fffe 	.word	0x0000fffe
    8abc:	0000923c 	.word	0x0000923c
    8ac0:	20201000 	.word	0x20201000
    8ac4:	000007ff 	.word	0x000007ff
    8ac8:	00000301 	.word	0x00000301
    8acc:	00022e70 	.word	0x00022e70
    8ad0:	00022ddc 	.word	0x00022ddc
    8ad4:	00022e0c 	.word	0x00022e0c
    8ad8:	00022dfc 	.word	0x00022dfc
    8adc:	00022e38 	.word	0x00022e38
    8ae0:	00022e5c 	.word	0x00022e5c

00008ae4 <CRdSerialDevice::GetOptions() const>:
    8ae4:	e2800a01 	add	r0, r0, #4096	; 0x1000
    8ae8:	e59000c0 	ldr	r0, [r0, #192]	; 0xc0
    8aec:	e12fff1e 	bx	lr

00008af0 <CRdSerialDevice::SetOptions(unsigned int)>:
    8af0:	e2800a01 	add	r0, r0, #4096	; 0x1000
    8af4:	e58010c0 	str	r1, [r0, #192]	; 0xc0
    8af8:	e12fff1e 	bx	lr

00008afc <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())>:
    8afc:	e92d4070 	push	{r4, r5, r6, lr}
    8b00:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
    8b04:	e1a04000 	mov	r4, r0
    8b08:	e3530000 	cmp	r3, #0
    8b0c:	e1a05001 	mov	r5, r1
    8b10:	e1a06002 	mov	r6, r2
    8b14:	0a00001d 	beq	8b90 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x94>
    8b18:	e2844a01 	add	r4, r4, #4096	; 0x1000
    8b1c:	e59430c4 	ldr	r3, [r4, #196]	; 0xc4
    8b20:	e3530000 	cmp	r3, #0
    8b24:	0a000003 	beq	8b38 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x3c>
    8b28:	e59f2088 	ldr	r2, [pc, #136]	; 8bb8 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xbc>
    8b2c:	e59f1088 	ldr	r1, [pc, #136]	; 8bbc <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc0>
    8b30:	e59f0088 	ldr	r0, [pc, #136]	; 8bc0 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc4>
    8b34:	eb004586 	bl	1a154 <assertion_failed>
    8b38:	e3550000 	cmp	r5, #0
    8b3c:	0a000018 	beq	8ba4 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xa8>
    8b40:	e1d530d0 	ldrsb	r3, [r5]
    8b44:	e3530000 	cmp	r3, #0
    8b48:	0a000005 	beq	8b64 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x68>
    8b4c:	e3560000 	cmp	r6, #0
    8b50:	0a000009 	beq	8b7c <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x80>
    8b54:	e58460cc 	str	r6, [r4, #204]	; 0xcc
    8b58:	e58450c8 	str	r5, [r4, #200]	; 0xc8
    8b5c:	e58450c4 	str	r5, [r4, #196]	; 0xc4
    8b60:	e8bd8070 	pop	{r4, r5, r6, pc}
    8b64:	e3a02f57 	mov	r2, #348	; 0x15c
    8b68:	e59f104c 	ldr	r1, [pc, #76]	; 8bbc <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc0>
    8b6c:	e59f0050 	ldr	r0, [pc, #80]	; 8bc4 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc8>
    8b70:	eb004577 	bl	1a154 <assertion_failed>
    8b74:	e3560000 	cmp	r6, #0
    8b78:	1afffff5 	bne	8b54 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x58>
    8b7c:	e59f2044 	ldr	r2, [pc, #68]	; 8bc8 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xcc>
    8b80:	e59f1034 	ldr	r1, [pc, #52]	; 8bbc <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc0>
    8b84:	e59f0040 	ldr	r0, [pc, #64]	; 8bcc <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xd0>
    8b88:	eb004571 	bl	1a154 <assertion_failed>
    8b8c:	eafffff0 	b	8b54 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x58>
    8b90:	e3a02f56 	mov	r2, #344	; 0x158
    8b94:	e59f1020 	ldr	r1, [pc, #32]	; 8bbc <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc0>
    8b98:	e59f0030 	ldr	r0, [pc, #48]	; 8bd0 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xd4>
    8b9c:	eb00456c 	bl	1a154 <assertion_failed>
    8ba0:	eaffffdc 	b	8b18 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x1c>
    8ba4:	e59f2028 	ldr	r2, [pc, #40]	; 8bd4 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xd8>
    8ba8:	e59f100c 	ldr	r1, [pc, #12]	; 8bbc <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc0>
    8bac:	e59f0024 	ldr	r0, [pc, #36]	; 8bd8 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xdc>
    8bb0:	eb004567 	bl	1a154 <assertion_failed>
    8bb4:	eaffffe1 	b	8b40 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x44>
    8bb8:	00000159 	.word	0x00000159
    8bbc:	00022ddc 	.word	0x00022ddc
    8bc0:	00022e90 	.word	0x00022e90
    8bc4:	00022eac 	.word	0x00022eac
    8bc8:	0000015d 	.word	0x0000015d
    8bcc:	00027dfc 	.word	0x00027dfc
    8bd0:	00022e78 	.word	0x00022e78
    8bd4:	0000015b 	.word	0x0000015b
    8bd8:	00022ea0 	.word	0x00022ea0

00008bdc <CRdSerialDevice::AvailableForWrite()>:
    8bdc:	e92d4010 	push	{r4, lr}
    8be0:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
    8be4:	e1a04000 	mov	r4, r0
    8be8:	e3530000 	cmp	r3, #0
    8bec:	0a000014 	beq	8c44 <CRdSerialDevice::AvailableForWrite()+0x68>
    8bf0:	e2844a01 	add	r4, r4, #4096	; 0x1000
    8bf4:	e59400d0 	ldr	r0, [r4, #208]	; 0xd0
    8bf8:	e3500000 	cmp	r0, #0
    8bfc:	1a00000d 	bne	8c38 <CRdSerialDevice::AvailableForWrite()+0x5c>
    8c00:	e59420bc 	ldr	r2, [r4, #188]	; 0xbc
    8c04:	e59430b8 	ldr	r3, [r4, #184]	; 0xb8
    8c08:	e1520003 	cmp	r2, r3
    8c0c:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    8c10:	e59420b8 	ldr	r2, [r4, #184]	; 0xb8
    8c14:	92834e7f 	addls	r4, r3, #2032	; 0x7f0
    8c18:	9284400f 	addls	r4, r4, #15
    8c1c:	82434001 	subhi	r4, r3, #1
    8c20:	e3500000 	cmp	r0, #0
    8c24:	e0444002 	sub	r4, r4, r2
    8c28:	0a000000 	beq	8c30 <CRdSerialDevice::AvailableForWrite()+0x54>
    8c2c:	eb0062af 	bl	216f0 <LeaveCritical>
    8c30:	e1a00004 	mov	r0, r4
    8c34:	e8bd8010 	pop	{r4, pc}
    8c38:	eb00627f 	bl	2163c <EnterCritical>
    8c3c:	e59400d0 	ldr	r0, [r4, #208]	; 0xd0
    8c40:	eaffffee 	b	8c00 <CRdSerialDevice::AvailableForWrite()+0x24>
    8c44:	e59f200c 	ldr	r2, [pc, #12]	; 8c58 <CRdSerialDevice::AvailableForWrite()+0x7c>
    8c48:	e59f100c 	ldr	r1, [pc, #12]	; 8c5c <CRdSerialDevice::AvailableForWrite()+0x80>
    8c4c:	e59f000c 	ldr	r0, [pc, #12]	; 8c60 <CRdSerialDevice::AvailableForWrite()+0x84>
    8c50:	eb00453f 	bl	1a154 <assertion_failed>
    8c54:	eaffffe5 	b	8bf0 <CRdSerialDevice::AvailableForWrite()+0x14>
    8c58:	00000167 	.word	0x00000167
    8c5c:	00022ddc 	.word	0x00022ddc
    8c60:	00022e78 	.word	0x00022e78

00008c64 <CRdSerialDevice::AvailableForRead()>:
    8c64:	e92d4070 	push	{r4, r5, r6, lr}
    8c68:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
    8c6c:	e1a04000 	mov	r4, r0
    8c70:	e3530000 	cmp	r3, #0
    8c74:	0a000014 	beq	8ccc <CRdSerialDevice::AvailableForRead()+0x68>
    8c78:	e2845a01 	add	r5, r4, #4096	; 0x1000
    8c7c:	e59500d0 	ldr	r0, [r5, #208]	; 0xd0
    8c80:	e3500000 	cmp	r0, #0
    8c84:	1a00000d 	bne	8cc0 <CRdSerialDevice::AvailableForRead()+0x5c>
    8c88:	e59428ac 	ldr	r2, [r4, #2220]	; 0x8ac
    8c8c:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
    8c90:	e1520003 	cmp	r2, r3
    8c94:	e59438ac 	ldr	r3, [r4, #2220]	; 0x8ac
    8c98:	359428b0 	ldrcc	r2, [r4, #2224]	; 0x8b0
    8c9c:	259448b0 	ldrcs	r4, [r4, #2224]	; 0x8b0
    8ca0:	32834b02 	addcc	r4, r3, #2048	; 0x800
    8ca4:	30444002 	subcc	r4, r4, r2
    8ca8:	20434004 	subcs	r4, r3, r4
    8cac:	e3500000 	cmp	r0, #0
    8cb0:	0a000000 	beq	8cb8 <CRdSerialDevice::AvailableForRead()+0x54>
    8cb4:	eb00628d 	bl	216f0 <LeaveCritical>
    8cb8:	e1a00004 	mov	r0, r4
    8cbc:	e8bd8070 	pop	{r4, r5, r6, pc}
    8cc0:	eb00625d 	bl	2163c <EnterCritical>
    8cc4:	e59500d0 	ldr	r0, [r5, #208]	; 0xd0
    8cc8:	eaffffee 	b	8c88 <CRdSerialDevice::AvailableForRead()+0x24>
    8ccc:	e3a02f5f 	mov	r2, #380	; 0x17c
    8cd0:	e59f1008 	ldr	r1, [pc, #8]	; 8ce0 <CRdSerialDevice::AvailableForRead()+0x7c>
    8cd4:	e59f0008 	ldr	r0, [pc, #8]	; 8ce4 <CRdSerialDevice::AvailableForRead()+0x80>
    8cd8:	eb00451d 	bl	1a154 <assertion_failed>
    8cdc:	eaffffe5 	b	8c78 <CRdSerialDevice::AvailableForRead()+0x14>
    8ce0:	00022ddc 	.word	0x00022ddc
    8ce4:	00022e78 	.word	0x00022e78

00008ce8 <CRdSerialDevice::Peek()>:
    8ce8:	e92d4070 	push	{r4, r5, r6, lr}
    8cec:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
    8cf0:	e1a04000 	mov	r4, r0
    8cf4:	e3530000 	cmp	r3, #0
    8cf8:	0a00001b 	beq	8d6c <CRdSerialDevice::Peek()+0x84>
    8cfc:	e2845a01 	add	r5, r4, #4096	; 0x1000
    8d00:	e59500d0 	ldr	r0, [r5, #208]	; 0xd0
    8d04:	e3500000 	cmp	r0, #0
    8d08:	1a000008 	bne	8d30 <CRdSerialDevice::Peek()+0x48>
    8d0c:	e59428ac 	ldr	r2, [r4, #2220]	; 0x8ac
    8d10:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
    8d14:	e1520003 	cmp	r2, r3
    8d18:	0a000018 	beq	8d80 <CRdSerialDevice::Peek()+0x98>
    8d1c:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
    8d20:	e0844003 	add	r4, r4, r3
    8d24:	e5d440aa 	ldrb	r4, [r4, #170]	; 0xaa
    8d28:	e1a00004 	mov	r0, r4
    8d2c:	e8bd8070 	pop	{r4, r5, r6, pc}
    8d30:	eb006241 	bl	2163c <EnterCritical>
    8d34:	e59428ac 	ldr	r2, [r4, #2220]	; 0x8ac
    8d38:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
    8d3c:	e1520003 	cmp	r2, r3
    8d40:	159438b0 	ldrne	r3, [r4, #2224]	; 0x8b0
    8d44:	059520d0 	ldreq	r2, [r5, #208]	; 0xd0
    8d48:	159520d0 	ldrne	r2, [r5, #208]	; 0xd0
    8d4c:	10844003 	addne	r4, r4, r3
    8d50:	03e04000 	mvneq	r4, #0
    8d54:	15d440aa 	ldrbne	r4, [r4, #170]	; 0xaa
    8d58:	e3520000 	cmp	r2, #0
    8d5c:	0afffff1 	beq	8d28 <CRdSerialDevice::Peek()+0x40>
    8d60:	eb006262 	bl	216f0 <LeaveCritical>
    8d64:	e1a00004 	mov	r0, r4
    8d68:	e8bd8070 	pop	{r4, r5, r6, pc}
    8d6c:	e59f2014 	ldr	r2, [pc, #20]	; 8d88 <CRdSerialDevice::Peek()+0xa0>
    8d70:	e59f1014 	ldr	r1, [pc, #20]	; 8d8c <CRdSerialDevice::Peek()+0xa4>
    8d74:	e59f0014 	ldr	r0, [pc, #20]	; 8d90 <CRdSerialDevice::Peek()+0xa8>
    8d78:	eb0044f5 	bl	1a154 <assertion_failed>
    8d7c:	eaffffde 	b	8cfc <CRdSerialDevice::Peek()+0x14>
    8d80:	e3e04000 	mvn	r4, #0
    8d84:	eaffffe7 	b	8d28 <CRdSerialDevice::Peek()+0x40>
    8d88:	00000191 	.word	0x00000191
    8d8c:	00022ddc 	.word	0x00022ddc
    8d90:	00022e78 	.word	0x00022e78

00008d94 <CRdSerialDevice::Flush()>:
    8d94:	e3a03000 	mov	r3, #0
    8d98:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    8d9c:	e59f2010 	ldr	r2, [pc, #16]	; 8db4 <CRdSerialDevice::Flush()+0x20>
    8da0:	e5923018 	ldr	r3, [r2, #24]
    8da4:	e2133008 	ands	r3, r3, #8
    8da8:	1afffffc 	bne	8da0 <CRdSerialDevice::Flush()+0xc>
    8dac:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    8db0:	e12fff1e 	bx	lr
    8db4:	20201000 	.word	0x20201000

00008db8 <CRdSerialDevice::Write(unsigned char)>:
    8db8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8dbc:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
    8dc0:	e3530000 	cmp	r3, #0
    8dc4:	0a000027 	beq	8e68 <CRdSerialDevice::Write(unsigned char)+0xb0>
    8dc8:	e2805a01 	add	r5, r0, #4096	; 0x1000
    8dcc:	e59520d0 	ldr	r2, [r5, #208]	; 0xd0
    8dd0:	e1a06001 	mov	r6, r1
    8dd4:	e3520000 	cmp	r2, #0
    8dd8:	e1a04000 	mov	r4, r0
    8ddc:	1a000015 	bne	8e38 <CRdSerialDevice::Write(unsigned char)+0x80>
    8de0:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
    8de4:	e59510bc 	ldr	r1, [r5, #188]	; 0xbc
    8de8:	e2833001 	add	r3, r3, #1
    8dec:	e1a03a83 	lsl	r3, r3, #21
    8df0:	e1a03aa3 	lsr	r3, r3, #21
    8df4:	e1530001 	cmp	r3, r1
    8df8:	0a000024 	beq	8e90 <CRdSerialDevice::Write(unsigned char)+0xd8>
    8dfc:	e3a07001 	mov	r7, #1
    8e00:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
    8e04:	e0840003 	add	r0, r4, r3
    8e08:	e0833007 	add	r3, r3, r7
    8e0c:	e58530b8 	str	r3, [r5, #184]	; 0xb8
    8e10:	e5c068b8 	strb	r6, [r0, #2232]	; 0x8b8
    8e14:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
    8e18:	e1a03a83 	lsl	r3, r3, #21
    8e1c:	e1a03aa3 	lsr	r3, r3, #21
    8e20:	e58530b8 	str	r3, [r5, #184]	; 0xb8
    8e24:	e3520000 	cmp	r2, #0
    8e28:	0a000000 	beq	8e30 <CRdSerialDevice::Write(unsigned char)+0x78>
    8e2c:	eb00622f 	bl	216f0 <LeaveCritical>
    8e30:	e1a00007 	mov	r0, r7
    8e34:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8e38:	e1a00002 	mov	r0, r2
    8e3c:	eb0061fe 	bl	2163c <EnterCritical>
    8e40:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
    8e44:	e59520bc 	ldr	r2, [r5, #188]	; 0xbc
    8e48:	e2833001 	add	r3, r3, #1
    8e4c:	e1a03a83 	lsl	r3, r3, #21
    8e50:	e1a03aa3 	lsr	r3, r3, #21
    8e54:	e1530002 	cmp	r3, r2
    8e58:	03a07000 	moveq	r7, #0
    8e5c:	e59520d0 	ldr	r2, [r5, #208]	; 0xd0
    8e60:	1affffe5 	bne	8dfc <CRdSerialDevice::Write(unsigned char)+0x44>
    8e64:	eaffffee 	b	8e24 <CRdSerialDevice::Write(unsigned char)+0x6c>
    8e68:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    8e6c:	e59f2028 	ldr	r2, [pc, #40]	; 8e9c <CRdSerialDevice::Write(unsigned char)+0xe4>
    8e70:	e5923018 	ldr	r3, [r2, #24]
    8e74:	e2133020 	ands	r3, r3, #32
    8e78:	1afffffc 	bne	8e70 <CRdSerialDevice::Write(unsigned char)+0xb8>
    8e7c:	e5821000 	str	r1, [r2]
    8e80:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    8e84:	e3a07001 	mov	r7, #1
    8e88:	e1a00007 	mov	r0, r7
    8e8c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8e90:	e1a07002 	mov	r7, r2
    8e94:	e1a00007 	mov	r0, r7
    8e98:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8e9c:	20201000 	.word	0x20201000

00008ea0 <CRdSerialDevice::Write(void const*, unsigned int)>:
    8ea0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8ea4:	e2806a01 	add	r6, r0, #4096	; 0x1000
    8ea8:	e1a07000 	mov	r7, r0
    8eac:	e59600d4 	ldr	r0, [r6, #212]	; 0xd4
    8eb0:	e1a04001 	mov	r4, r1
    8eb4:	e3500000 	cmp	r0, #0
    8eb8:	e1a08002 	mov	r8, r2
    8ebc:	1a000052 	bne	900c <CRdSerialDevice::Write(void const*, unsigned int)+0x16c>
    8ec0:	e3540000 	cmp	r4, #0
    8ec4:	0a000053 	beq	9018 <CRdSerialDevice::Write(void const*, unsigned int)+0x178>
    8ec8:	e3580000 	cmp	r8, #0
    8ecc:	0a00005b 	beq	9040 <CRdSerialDevice::Write(void const*, unsigned int)+0x1a0>
    8ed0:	e3a05000 	mov	r5, #0
    8ed4:	e2444001 	sub	r4, r4, #1
    8ed8:	ea000002 	b	8ee8 <CRdSerialDevice::Write(void const*, unsigned int)+0x48>
    8edc:	e2855001 	add	r5, r5, #1
    8ee0:	e1550008 	cmp	r5, r8
    8ee4:	0a00000f 	beq	8f28 <CRdSerialDevice::Write(void const*, unsigned int)+0x88>
    8ee8:	e5f41001 	ldrb	r1, [r4, #1]!
    8eec:	e1a00007 	mov	r0, r7
    8ef0:	ebffffb0 	bl	8db8 <CRdSerialDevice::Write(unsigned char)>
    8ef4:	e3500000 	cmp	r0, #0
    8ef8:	0a00000a 	beq	8f28 <CRdSerialDevice::Write(void const*, unsigned int)+0x88>
    8efc:	e5d43000 	ldrb	r3, [r4]
    8f00:	e353000a 	cmp	r3, #10
    8f04:	1afffff4 	bne	8edc <CRdSerialDevice::Write(void const*, unsigned int)+0x3c>
    8f08:	e59630c0 	ldr	r3, [r6, #192]	; 0xc0
    8f0c:	e3130001 	tst	r3, #1
    8f10:	0afffff1 	beq	8edc <CRdSerialDevice::Write(void const*, unsigned int)+0x3c>
    8f14:	e3a0100d 	mov	r1, #13
    8f18:	e1a00007 	mov	r0, r7
    8f1c:	ebffffa5 	bl	8db8 <CRdSerialDevice::Write(unsigned char)>
    8f20:	e3500000 	cmp	r0, #0
    8f24:	1affffec 	bne	8edc <CRdSerialDevice::Write(void const*, unsigned int)+0x3c>
    8f28:	e59630d4 	ldr	r3, [r6, #212]	; 0xd4
    8f2c:	e3530000 	cmp	r3, #0
    8f30:	1a000033 	bne	9004 <CRdSerialDevice::Write(void const*, unsigned int)+0x164>
    8f34:	e59730a4 	ldr	r3, [r7, #164]	; 0xa4
    8f38:	e3530000 	cmp	r3, #0
    8f3c:	0a000028 	beq	8fe4 <CRdSerialDevice::Write(void const*, unsigned int)+0x144>
    8f40:	e59600d0 	ldr	r0, [r6, #208]	; 0xd0
    8f44:	e3500000 	cmp	r0, #0
    8f48:	1a000027 	bne	8fec <CRdSerialDevice::Write(void const*, unsigned int)+0x14c>
    8f4c:	e59630b8 	ldr	r3, [r6, #184]	; 0xb8
    8f50:	e59620bc 	ldr	r2, [r6, #188]	; 0xbc
    8f54:	e1520003 	cmp	r2, r3
    8f58:	0a000021 	beq	8fe4 <CRdSerialDevice::Write(void const*, unsigned int)+0x144>
    8f5c:	e3a03000 	mov	r3, #0
    8f60:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    8f64:	e59630b8 	ldr	r3, [r6, #184]	; 0xb8
    8f68:	e59620bc 	ldr	r2, [r6, #188]	; 0xbc
    8f6c:	e1520003 	cmp	r2, r3
    8f70:	0a000015 	beq	8fcc <CRdSerialDevice::Write(void const*, unsigned int)+0x12c>
    8f74:	e59f20cc 	ldr	r2, [pc, #204]	; 9048 <CRdSerialDevice::Write(void const*, unsigned int)+0x1a8>
    8f78:	e5923018 	ldr	r3, [r2, #24]
    8f7c:	e3130020 	tst	r3, #32
    8f80:	1a000029 	bne	902c <CRdSerialDevice::Write(void const*, unsigned int)+0x18c>
    8f84:	e59f00c0 	ldr	r0, [pc, #192]	; 904c <CRdSerialDevice::Write(void const*, unsigned int)+0x1ac>
    8f88:	ea000002 	b	8f98 <CRdSerialDevice::Write(void const*, unsigned int)+0xf8>
    8f8c:	e5923018 	ldr	r3, [r2, #24]
    8f90:	e3130020 	tst	r3, #32
    8f94:	1a000024 	bne	902c <CRdSerialDevice::Write(void const*, unsigned int)+0x18c>
    8f98:	e59630bc 	ldr	r3, [r6, #188]	; 0xbc
    8f9c:	e2831001 	add	r1, r3, #1
    8fa0:	e58610bc 	str	r1, [r6, #188]	; 0xbc
    8fa4:	e0873003 	add	r3, r7, r3
    8fa8:	e5d338b8 	ldrb	r3, [r3, #2232]	; 0x8b8
    8fac:	e5823000 	str	r3, [r2]
    8fb0:	e59630bc 	ldr	r3, [r6, #188]	; 0xbc
    8fb4:	e0033000 	and	r3, r3, r0
    8fb8:	e58630bc 	str	r3, [r6, #188]	; 0xbc
    8fbc:	e59610b8 	ldr	r1, [r6, #184]	; 0xb8
    8fc0:	e59630bc 	ldr	r3, [r6, #188]	; 0xbc
    8fc4:	e1510003 	cmp	r1, r3
    8fc8:	1affffef 	bne	8f8c <CRdSerialDevice::Write(void const*, unsigned int)+0xec>
    8fcc:	e3a03000 	mov	r3, #0
    8fd0:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    8fd4:	e59630d0 	ldr	r3, [r6, #208]	; 0xd0
    8fd8:	e3530000 	cmp	r3, #0
    8fdc:	0a000000 	beq	8fe4 <CRdSerialDevice::Write(void const*, unsigned int)+0x144>
    8fe0:	eb0061c2 	bl	216f0 <LeaveCritical>
    8fe4:	e1a00005 	mov	r0, r5
    8fe8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8fec:	eb006192 	bl	2163c <EnterCritical>
    8ff0:	e59620b8 	ldr	r2, [r6, #184]	; 0xb8
    8ff4:	e59630bc 	ldr	r3, [r6, #188]	; 0xbc
    8ff8:	e1520003 	cmp	r2, r3
    8ffc:	1affffd6 	bne	8f5c <CRdSerialDevice::Write(void const*, unsigned int)+0xbc>
    9000:	eafffff3 	b	8fd4 <CRdSerialDevice::Write(void const*, unsigned int)+0x134>
    9004:	eb0061b9 	bl	216f0 <LeaveCritical>
    9008:	eaffffc9 	b	8f34 <CRdSerialDevice::Write(void const*, unsigned int)+0x94>
    900c:	eb00618a 	bl	2163c <EnterCritical>
    9010:	e3540000 	cmp	r4, #0
    9014:	1affffab 	bne	8ec8 <CRdSerialDevice::Write(void const*, unsigned int)+0x28>
    9018:	e3a020c3 	mov	r2, #195	; 0xc3
    901c:	e59f102c 	ldr	r1, [pc, #44]	; 9050 <CRdSerialDevice::Write(void const*, unsigned int)+0x1b0>
    9020:	e59f002c 	ldr	r0, [pc, #44]	; 9054 <CRdSerialDevice::Write(void const*, unsigned int)+0x1b4>
    9024:	eb00444a 	bl	1a154 <assertion_failed>
    9028:	eaffffa6 	b	8ec8 <CRdSerialDevice::Write(void const*, unsigned int)+0x28>
    902c:	e59f2014 	ldr	r2, [pc, #20]	; 9048 <CRdSerialDevice::Write(void const*, unsigned int)+0x1a8>
    9030:	e5923038 	ldr	r3, [r2, #56]	; 0x38
    9034:	e3833020 	orr	r3, r3, #32
    9038:	e5823038 	str	r3, [r2, #56]	; 0x38
    903c:	eaffffe2 	b	8fcc <CRdSerialDevice::Write(void const*, unsigned int)+0x12c>
    9040:	e1a05008 	mov	r5, r8
    9044:	eaffffb7 	b	8f28 <CRdSerialDevice::Write(void const*, unsigned int)+0x88>
    9048:	20201000 	.word	0x20201000
    904c:	000007ff 	.word	0x000007ff
    9050:	00022ddc 	.word	0x00022ddc
    9054:	00022df0 	.word	0x00022df0

00009058 <CRdSerialDevice::InterruptHandler()>:
    9058:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    905c:	e2804a01 	add	r4, r0, #4096	; 0x1000
    9060:	e1a05000 	mov	r5, r0
    9064:	e59400d0 	ldr	r0, [r4, #208]	; 0xd0
    9068:	e3500000 	cmp	r0, #0
    906c:	1a00006a 	bne	921c <CRdSerialDevice::InterruptHandler()+0x1c4>
    9070:	e3a06000 	mov	r6, #0
    9074:	ee076f9a 	mcr	15, 0, r6, cr7, cr10, {4}
    9078:	e59f31b4 	ldr	r3, [pc, #436]	; 9234 <CRdSerialDevice::InterruptHandler()+0x1dc>
    907c:	e3e07002 	mvn	r7, #2
    9080:	e1a01003 	mov	r1, r3
    9084:	e3e0c001 	mvn	ip, #1
    9088:	e3e0e000 	mvn	lr, #0
    908c:	e5932040 	ldr	r2, [r3, #64]	; 0x40
    9090:	e59f01a0 	ldr	r0, [pc, #416]	; 9238 <CRdSerialDevice::InterruptHandler()+0x1e0>
    9094:	e5832044 	str	r2, [r3, #68]	; 0x44
    9098:	e5913018 	ldr	r3, [r1, #24]
    909c:	e3130010 	tst	r3, #16
    90a0:	1a000024 	bne	9138 <CRdSerialDevice::InterruptHandler()+0xe0>
    90a4:	e5912000 	ldr	r2, [r1]
    90a8:	e3120b01 	tst	r2, #1024	; 0x400
    90ac:	0a000045 	beq	91c8 <CRdSerialDevice::InterruptHandler()+0x170>
    90b0:	e59538b4 	ldr	r3, [r5, #2228]	; 0x8b4
    90b4:	e3530000 	cmp	r3, #0
    90b8:	0585e8b4 	streq	lr, [r5, #2228]	; 0x8b4
    90bc:	e59480c4 	ldr	r8, [r4, #196]	; 0xc4
    90c0:	e3580000 	cmp	r8, #0
    90c4:	0a00000a 	beq	90f4 <CRdSerialDevice::InterruptHandler()+0x9c>
    90c8:	e59490c8 	ldr	r9, [r4, #200]	; 0xc8
    90cc:	e6af3072 	sxtb	r3, r2
    90d0:	e1d9a0d0 	ldrsb	sl, [r9]
    90d4:	e15a0003 	cmp	sl, r3
    90d8:	158480c8 	strne	r8, [r4, #200]	; 0xc8
    90dc:	1a000004 	bne	90f4 <CRdSerialDevice::InterruptHandler()+0x9c>
    90e0:	e2893001 	add	r3, r9, #1
    90e4:	e58430c8 	str	r3, [r4, #200]	; 0xc8
    90e8:	e1d930d1 	ldrsb	r3, [r9, #1]
    90ec:	e3530000 	cmp	r3, #0
    90f0:	03a06001 	moveq	r6, #1
    90f4:	e59538ac 	ldr	r3, [r5, #2220]	; 0x8ac
    90f8:	e59588b0 	ldr	r8, [r5, #2224]	; 0x8b0
    90fc:	e2833001 	add	r3, r3, #1
    9100:	e0033000 	and	r3, r3, r0
    9104:	e1530008 	cmp	r3, r8
    9108:	0a000034 	beq	91e0 <CRdSerialDevice::InterruptHandler()+0x188>
    910c:	e59538ac 	ldr	r3, [r5, #2220]	; 0x8ac
    9110:	e2838001 	add	r8, r3, #1
    9114:	e0853003 	add	r3, r5, r3
    9118:	e58588ac 	str	r8, [r5, #2220]	; 0x8ac
    911c:	e5c320aa 	strb	r2, [r3, #170]	; 0xaa
    9120:	e59538ac 	ldr	r3, [r5, #2220]	; 0x8ac
    9124:	e0033000 	and	r3, r3, r0
    9128:	e58538ac 	str	r3, [r5, #2220]	; 0x8ac
    912c:	e5913018 	ldr	r3, [r1, #24]
    9130:	e3130010 	tst	r3, #16
    9134:	0affffda 	beq	90a4 <CRdSerialDevice::InterruptHandler()+0x4c>
    9138:	e5913018 	ldr	r3, [r1, #24]
    913c:	e3130020 	tst	r3, #32
    9140:	1a000016 	bne	91a0 <CRdSerialDevice::InterruptHandler()+0x148>
    9144:	e59430b8 	ldr	r3, [r4, #184]	; 0xb8
    9148:	e59420bc 	ldr	r2, [r4, #188]	; 0xbc
    914c:	e1520003 	cmp	r2, r3
    9150:	0a00002c 	beq	9208 <CRdSerialDevice::InterruptHandler()+0x1b0>
    9154:	e59f20d8 	ldr	r2, [pc, #216]	; 9234 <CRdSerialDevice::InterruptHandler()+0x1dc>
    9158:	e59f00d8 	ldr	r0, [pc, #216]	; 9238 <CRdSerialDevice::InterruptHandler()+0x1e0>
    915c:	ea000003 	b	9170 <CRdSerialDevice::InterruptHandler()+0x118>
    9160:	e59410b8 	ldr	r1, [r4, #184]	; 0xb8
    9164:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    9168:	e1510003 	cmp	r1, r3
    916c:	0a000025 	beq	9208 <CRdSerialDevice::InterruptHandler()+0x1b0>
    9170:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    9174:	e2831001 	add	r1, r3, #1
    9178:	e58410bc 	str	r1, [r4, #188]	; 0xbc
    917c:	e0853003 	add	r3, r5, r3
    9180:	e5d338b8 	ldrb	r3, [r3, #2232]	; 0x8b8
    9184:	e5823000 	str	r3, [r2]
    9188:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    918c:	e0033000 	and	r3, r3, r0
    9190:	e58430bc 	str	r3, [r4, #188]	; 0xbc
    9194:	e5923018 	ldr	r3, [r2, #24]
    9198:	e3130020 	tst	r3, #32
    919c:	0affffef 	beq	9160 <CRdSerialDevice::InterruptHandler()+0x108>
    91a0:	e3a03000 	mov	r3, #0
    91a4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    91a8:	e59430d0 	ldr	r3, [r4, #208]	; 0xd0
    91ac:	e3530000 	cmp	r3, #0
    91b0:	1a00001b 	bne	9224 <CRdSerialDevice::InterruptHandler()+0x1cc>
    91b4:	e3560000 	cmp	r6, #0
    91b8:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    91bc:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
    91c0:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    91c4:	e12fff13 	bx	r3
    91c8:	e3120b02 	tst	r2, #2048	; 0x800
    91cc:	0a000007 	beq	91f0 <CRdSerialDevice::InterruptHandler()+0x198>
    91d0:	e59538b4 	ldr	r3, [r5, #2228]	; 0x8b4
    91d4:	e3530000 	cmp	r3, #0
    91d8:	0585c8b4 	streq	ip, [r5, #2228]	; 0x8b4
    91dc:	eaffffb6 	b	90bc <CRdSerialDevice::InterruptHandler()+0x64>
    91e0:	e59538b4 	ldr	r3, [r5, #2228]	; 0x8b4
    91e4:	e3530000 	cmp	r3, #0
    91e8:	0585c8b4 	streq	ip, [r5, #2228]	; 0x8b4
    91ec:	eaffffa9 	b	9098 <CRdSerialDevice::InterruptHandler()+0x40>
    91f0:	e3120c01 	tst	r2, #256	; 0x100
    91f4:	0affffb0 	beq	90bc <CRdSerialDevice::InterruptHandler()+0x64>
    91f8:	e59538b4 	ldr	r3, [r5, #2228]	; 0x8b4
    91fc:	e3530000 	cmp	r3, #0
    9200:	058578b4 	streq	r7, [r5, #2228]	; 0x8b4
    9204:	eaffffac 	b	90bc <CRdSerialDevice::InterruptHandler()+0x64>
    9208:	e59f2024 	ldr	r2, [pc, #36]	; 9234 <CRdSerialDevice::InterruptHandler()+0x1dc>
    920c:	e5923038 	ldr	r3, [r2, #56]	; 0x38
    9210:	e3c33020 	bic	r3, r3, #32
    9214:	e5823038 	str	r3, [r2, #56]	; 0x38
    9218:	eaffffe0 	b	91a0 <CRdSerialDevice::InterruptHandler()+0x148>
    921c:	eb006106 	bl	2163c <EnterCritical>
    9220:	eaffff92 	b	9070 <CRdSerialDevice::InterruptHandler()+0x18>
    9224:	eb006131 	bl	216f0 <LeaveCritical>
    9228:	e3560000 	cmp	r6, #0
    922c:	1affffe2 	bne	91bc <CRdSerialDevice::InterruptHandler()+0x164>
    9230:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    9234:	20201000 	.word	0x20201000
    9238:	000007ff 	.word	0x000007ff

0000923c <CRdSerialDevice::InterruptStub(void*)>:
    923c:	e92d4010 	push	{r4, lr}
    9240:	e2504000 	subs	r4, r0, #0
    9244:	0a000002 	beq	9254 <CRdSerialDevice::InterruptStub(void*)+0x18>
    9248:	e1a00004 	mov	r0, r4
    924c:	e8bd4010 	pop	{r4, lr}
    9250:	eaffff80 	b	9058 <CRdSerialDevice::InterruptHandler()>
    9254:	e59f0014 	ldr	r0, [pc, #20]	; 9270 <CRdSerialDevice::InterruptStub(void*)+0x34>
    9258:	e59f2014 	ldr	r2, [pc, #20]	; 9274 <CRdSerialDevice::InterruptStub(void*)+0x38>
    925c:	e59f1014 	ldr	r1, [pc, #20]	; 9278 <CRdSerialDevice::InterruptStub(void*)+0x3c>
    9260:	eb0043bb 	bl	1a154 <assertion_failed>
    9264:	e1a00004 	mov	r0, r4
    9268:	e8bd4010 	pop	{r4, lr}
    926c:	eaffff79 	b	9058 <CRdSerialDevice::InterruptHandler()>
    9270:	00022ebc 	.word	0x00022ebc
    9274:	0000022e 	.word	0x0000022e
    9278:	00022ddc 	.word	0x00022ddc

0000927c <CRdSerialDevice::~CRdSerialDevice()>:
    927c:	e59f20a4 	ldr	r2, [pc, #164]	; 9328 <CRdSerialDevice::~CRdSerialDevice()+0xac>
    9280:	e92d4010 	push	{r4, lr}
    9284:	e3a03000 	mov	r3, #0
    9288:	e1a04000 	mov	r4, r0
    928c:	e5802000 	str	r2, [r0]
    9290:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    9294:	e59f2090 	ldr	r2, [pc, #144]	; 932c <CRdSerialDevice::~CRdSerialDevice()+0xb0>
    9298:	e5823038 	str	r3, [r2, #56]	; 0x38
    929c:	e5823030 	str	r3, [r2, #48]	; 0x30
    92a0:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    92a4:	e5d030a9 	ldrb	r3, [r0, #169]	; 0xa9
    92a8:	e3530000 	cmp	r3, #0
    92ac:	0a000006 	beq	92cc <CRdSerialDevice::~CRdSerialDevice()+0x50>
    92b0:	e59000a4 	ldr	r0, [r0, #164]	; 0xa4
    92b4:	e3500000 	cmp	r0, #0
    92b8:	0a000014 	beq	9310 <CRdSerialDevice::~CRdSerialDevice()+0x94>
    92bc:	e5d430a8 	ldrb	r3, [r4, #168]	; 0xa8
    92c0:	e3530000 	cmp	r3, #0
    92c4:	0a00000e 	beq	9304 <CRdSerialDevice::~CRdSerialDevice()+0x88>
    92c8:	eb004abb 	bl	1bdbc <CInterruptSystem::DisconnectFIQ()>
    92cc:	e3a03000 	mov	r3, #0
    92d0:	e284007c 	add	r0, r4, #124	; 0x7c
    92d4:	e58430a4 	str	r3, [r4, #164]	; 0xa4
    92d8:	eb004736 	bl	1afb8 <CGPIOPin::~CGPIOPin()>
    92dc:	e2840054 	add	r0, r4, #84	; 0x54
    92e0:	eb004734 	bl	1afb8 <CGPIOPin::~CGPIOPin()>
    92e4:	e284002c 	add	r0, r4, #44	; 0x2c
    92e8:	eb004732 	bl	1afb8 <CGPIOPin::~CGPIOPin()>
    92ec:	e2840004 	add	r0, r4, #4
    92f0:	eb004730 	bl	1afb8 <CGPIOPin::~CGPIOPin()>
    92f4:	e1a00004 	mov	r0, r4
    92f8:	eb004591 	bl	1a944 <CDevice::~CDevice()>
    92fc:	e1a00004 	mov	r0, r4
    9300:	e8bd8010 	pop	{r4, pc}
    9304:	e3a01039 	mov	r1, #57	; 0x39
    9308:	eb004b26 	bl	1bfa8 <CInterruptSystem::DisconnectIRQ(unsigned int)>
    930c:	eaffffee 	b	92cc <CRdSerialDevice::~CRdSerialDevice()+0x50>
    9310:	e59f0018 	ldr	r0, [pc, #24]	; 9330 <CRdSerialDevice::~CRdSerialDevice()+0xb4>
    9314:	e3a02079 	mov	r2, #121	; 0x79
    9318:	e59f1014 	ldr	r1, [pc, #20]	; 9334 <CRdSerialDevice::~CRdSerialDevice()+0xb8>
    931c:	eb00438c 	bl	1a154 <assertion_failed>
    9320:	e59400a4 	ldr	r0, [r4, #164]	; 0xa4
    9324:	eaffffe4 	b	92bc <CRdSerialDevice::~CRdSerialDevice()+0x40>
    9328:	00022dc8 	.word	0x00022dc8
    932c:	20201000 	.word	0x20201000
    9330:	00022e78 	.word	0x00022e78
    9334:	00022ddc 	.word	0x00022ddc

00009338 <CRdSerialDevice::~CRdSerialDevice()>:
    9338:	e92d4010 	push	{r4, lr}
    933c:	e1a04000 	mov	r4, r0
    9340:	ebffffcd 	bl	927c <CRdSerialDevice::~CRdSerialDevice()>
    9344:	e1a00004 	mov	r0, r4
    9348:	e59f1008 	ldr	r1, [pc, #8]	; 9358 <CRdSerialDevice::~CRdSerialDevice()+0x20>
    934c:	eb006118 	bl	217b4 <operator delete(void*, unsigned int)>
    9350:	e1a00004 	mov	r0, r4
    9354:	e8bd8010 	pop	{r4, pc}
    9358:	000010d8 	.word	0x000010d8

0000935c <MiniHDLC::handleChar(unsigned char) [clone .part.0]>:
    935c:	e92d4010 	push	{r4, lr}
    9360:	e5903004 	ldr	r3, [r0, #4]
    9364:	e1a04000 	mov	r4, r0
    9368:	e3530001 	cmp	r3, #1
    936c:	da00000d 	ble	93a8 <MiniHDLC::handleChar(unsigned char) [clone .part.0]+0x4c>
    9370:	e5d02001 	ldrb	r2, [r0, #1]
    9374:	e2431002 	sub	r1, r3, #2
    9378:	e0803003 	add	r3, r0, r3
    937c:	e0800001 	add	r0, r0, r1
    9380:	e3520000 	cmp	r2, #0
    9384:	e5d33017 	ldrb	r3, [r3, #23]
    9388:	e5d02018 	ldrb	r2, [r0, #24]
    938c:	01823403 	orreq	r3, r2, r3, lsl #8
    9390:	11833402 	orrne	r3, r3, r2, lsl #8
    9394:	e6bf3073 	sxth	r3, r3
    9398:	e1d420b8 	ldrh	r2, [r4, #8]
    939c:	e6ff3073 	uxth	r3, r3
    93a0:	e1520003 	cmp	r2, r3
    93a4:	0a000005 	beq	93c0 <MiniHDLC::handleChar(unsigned char) [clone .part.0]+0x64>
    93a8:	e3a03000 	mov	r3, #0
    93ac:	e3e02000 	mvn	r2, #0
    93b0:	e5c4300a 	strb	r3, [r4, #10]
    93b4:	e5843004 	str	r3, [r4, #4]
    93b8:	e1c420b8 	strh	r2, [r4, #8]
    93bc:	e8bd8010 	pop	{r4, pc}
    93c0:	e3a02000 	mov	r2, #0
    93c4:	e59f3018 	ldr	r3, [pc, #24]	; 93e4 <MiniHDLC::handleChar(unsigned char) [clone .part.0]+0x88>
    93c8:	e5c02018 	strb	r2, [r0, #24]
    93cc:	e5933000 	ldr	r3, [r3]
    93d0:	e1530002 	cmp	r3, r2
    93d4:	0afffff3 	beq	93a8 <MiniHDLC::handleChar(unsigned char) [clone .part.0]+0x4c>
    93d8:	e2840018 	add	r0, r4, #24
    93dc:	e12fff33 	blx	r3
    93e0:	eafffff0 	b	93a8 <MiniHDLC::handleChar(unsigned char) [clone .part.0]+0x4c>
    93e4:	00029994 	.word	0x00029994

000093e8 <MiniHDLC::MiniHDLC(void (*)(unsigned char), void (*)(unsigned char const*, int), bool, bool)>:
    93e8:	e92d4030 	push	{r4, r5, lr}
    93ec:	e3a0e000 	mov	lr, #0
    93f0:	e3e05000 	mvn	r5, #0
    93f4:	e59f4030 	ldr	r4, [pc, #48]	; 942c <MiniHDLC::MiniHDLC(void (*)(unsigned char), void (*)(unsigned char const*, int), bool, bool)+0x44>
    93f8:	e1c050b8 	strh	r5, [r0, #8]
    93fc:	e5842000 	str	r2, [r4]
    9400:	e5dd200c 	ldrb	r2, [sp, #12]
    9404:	e5841004 	str	r1, [r4, #4]
    9408:	e580e004 	str	lr, [r0, #4]
    940c:	e5c03001 	strb	r3, [r0, #1]
    9410:	e5c02000 	strb	r2, [r0]
    9414:	e5c0e00a 	strb	lr, [r0, #10]
    9418:	e5c0e00b 	strb	lr, [r0, #11]
    941c:	e5c0e00c 	strb	lr, [r0, #12]
    9420:	e580e010 	str	lr, [r0, #16]
    9424:	e580e014 	str	lr, [r0, #20]
    9428:	e8bd8030 	pop	{r4, r5, pc}
    942c:	00029994 	.word	0x00029994

00009430 <MiniHDLC::handleChar(unsigned char)>:
    9430:	e351007e 	cmp	r1, #126	; 0x7e
    9434:	e1a03000 	mov	r3, r0
    9438:	0a00001e 	beq	94b8 <MiniHDLC::handleChar(unsigned char)+0x88>
    943c:	e5d0200a 	ldrb	r2, [r0, #10]
    9440:	e3520000 	cmp	r2, #0
    9444:	1a000017 	bne	94a8 <MiniHDLC::handleChar(unsigned char)+0x78>
    9448:	e351007d 	cmp	r1, #125	; 0x7d
    944c:	0a00001a 	beq	94bc <MiniHDLC::handleChar(unsigned char)+0x8c>
    9450:	e5932004 	ldr	r2, [r3, #4]
    9454:	e0830002 	add	r0, r3, r2
    9458:	e3520001 	cmp	r2, #1
    945c:	e5c01018 	strb	r1, [r0, #24]
    9460:	da000007 	ble	9484 <MiniHDLC::handleChar(unsigned char)+0x54>
    9464:	e5d01016 	ldrb	r1, [r0, #22]
    9468:	e1d300b8 	ldrh	r0, [r3, #8]
    946c:	e59fc054 	ldr	ip, [pc, #84]	; 94c8 <MiniHDLC::handleChar(unsigned char)+0x98>
    9470:	e0211420 	eor	r1, r1, r0, lsr #8
    9474:	e1a01081 	lsl	r1, r1, #1
    9478:	e19c10b1 	ldrh	r1, [ip, r1]
    947c:	e0211400 	eor	r1, r1, r0, lsl #8
    9480:	e1c310b8 	strh	r1, [r3, #8]
    9484:	e59f1040 	ldr	r1, [pc, #64]	; 94cc <MiniHDLC::handleChar(unsigned char)+0x9c>
    9488:	e2822001 	add	r2, r2, #1
    948c:	e1520001 	cmp	r2, r1
    9490:	03a01000 	moveq	r1, #0
    9494:	03e02000 	mvneq	r2, #0
    9498:	15832004 	strne	r2, [r3, #4]
    949c:	05831004 	streq	r1, [r3, #4]
    94a0:	01c320b8 	strheq	r2, [r3, #8]
    94a4:	e12fff1e 	bx	lr
    94a8:	e3a02000 	mov	r2, #0
    94ac:	e2211020 	eor	r1, r1, #32
    94b0:	e5c0200a 	strb	r2, [r0, #10]
    94b4:	eaffffe5 	b	9450 <MiniHDLC::handleChar(unsigned char)+0x20>
    94b8:	eaffffa7 	b	935c <MiniHDLC::handleChar(unsigned char) [clone .part.0]>
    94bc:	e3a02001 	mov	r2, #1
    94c0:	e5c0200a 	strb	r2, [r0, #10]
    94c4:	e12fff1e 	bx	lr
    94c8:	00022ec8 	.word	0x00022ec8
    94cc:	00001388 	.word	0x00001388

000094d0 <MiniHDLC::handleBit(unsigned char)>:
    94d0:	e3510000 	cmp	r1, #0
    94d4:	13e0107f 	mvnne	r1, #127	; 0x7f
    94d8:	e5d0300b 	ldrb	r3, [r0, #11]
    94dc:	e92d4010 	push	{r4, lr}
    94e0:	e1a030a3 	lsr	r3, r3, #1
    94e4:	11833001 	orrne	r3, r3, r1
    94e8:	e6ef3073 	uxtb	r3, r3
    94ec:	e353007e 	cmp	r3, #126	; 0x7e
    94f0:	e1a04000 	mov	r4, r0
    94f4:	e5c0300b 	strb	r3, [r0, #11]
    94f8:	0a000010 	beq	9540 <MiniHDLC::handleBit(unsigned char)+0x70>
    94fc:	e20330fc 	and	r3, r3, #252	; 0xfc
    9500:	e353007c 	cmp	r3, #124	; 0x7c
    9504:	08bd8010 	popeq	{r4, pc}
    9508:	e5d0200c 	ldrb	r2, [r0, #12]
    950c:	e5903010 	ldr	r3, [r0, #16]
    9510:	e18110a2 	orr	r1, r1, r2, lsr #1
    9514:	e2833001 	add	r3, r3, #1
    9518:	e6ef1071 	uxtb	r1, r1
    951c:	e3530008 	cmp	r3, #8
    9520:	e5c0100c 	strb	r1, [r0, #12]
    9524:	e5803010 	str	r3, [r0, #16]
    9528:	18bd8010 	popne	{r4, pc}
    952c:	ebffffbf 	bl	9430 <MiniHDLC::handleChar(unsigned char)>
    9530:	e3a03000 	mov	r3, #0
    9534:	e5c4300c 	strb	r3, [r4, #12]
    9538:	e5843010 	str	r3, [r4, #16]
    953c:	e8bd8010 	pop	{r4, pc}
    9540:	ebffff85 	bl	935c <MiniHDLC::handleChar(unsigned char) [clone .part.0]>
    9544:	e3a03000 	mov	r3, #0
    9548:	e5c4300c 	strb	r3, [r4, #12]
    954c:	e5843010 	str	r3, [r4, #16]
    9550:	e8bd8010 	pop	{r4, pc}

00009554 <MiniHDLC::handleBuffer(unsigned char*, int)>:
    9554:	e92d4070 	push	{r4, r5, r6, lr}
    9558:	e2525000 	subs	r5, r2, #0
    955c:	d8bd8070 	pople	{r4, r5, r6, pc}
    9560:	e1a06000 	mov	r6, r0
    9564:	e2414001 	sub	r4, r1, #1
    9568:	e0845005 	add	r5, r4, r5
    956c:	e5f41001 	ldrb	r1, [r4, #1]!
    9570:	e1a00006 	mov	r0, r6
    9574:	ebffffad 	bl	9430 <MiniHDLC::handleChar(unsigned char)>
    9578:	e1540005 	cmp	r4, r5
    957c:	1afffffa 	bne	956c <MiniHDLC::handleBuffer(unsigned char*, int)+0x18>
    9580:	e8bd8070 	pop	{r4, r5, r6, pc}

00009584 <MiniHDLC::crcUpdateCCITT(unsigned short, unsigned char)>:
    9584:	e59f3014 	ldr	r3, [pc, #20]	; 95a0 <MiniHDLC::crcUpdateCCITT(unsigned short, unsigned char)+0x1c>
    9588:	e0222421 	eor	r2, r2, r1, lsr #8
    958c:	e1a02082 	lsl	r2, r2, #1
    9590:	e19300b2 	ldrh	r0, [r3, r2]
    9594:	e0200401 	eor	r0, r0, r1, lsl #8
    9598:	e6ff0070 	uxth	r0, r0
    959c:	e12fff1e 	bx	lr
    95a0:	00022ec8 	.word	0x00022ec8

000095a4 <MiniHDLC::sendChar(unsigned char)>:
    95a4:	e92d4070 	push	{r4, r5, r6, lr}
    95a8:	e5d03000 	ldrb	r3, [r0]
    95ac:	e59f6048 	ldr	r6, [pc, #72]	; 95fc <MiniHDLC::sendChar(unsigned char)+0x58>
    95b0:	e3530000 	cmp	r3, #0
    95b4:	e1a04001 	mov	r4, r1
    95b8:	e5963004 	ldr	r3, [r6, #4]
    95bc:	0a000009 	beq	95e8 <MiniHDLC::sendChar(unsigned char)+0x44>
    95c0:	e3a05008 	mov	r5, #8
    95c4:	e3530000 	cmp	r3, #0
    95c8:	e2040001 	and	r0, r4, #1
    95cc:	0a000000 	beq	95d4 <MiniHDLC::sendChar(unsigned char)+0x30>
    95d0:	e12fff33 	blx	r3
    95d4:	e2555001 	subs	r5, r5, #1
    95d8:	e1a040a4 	lsr	r4, r4, #1
    95dc:	08bd8070 	popeq	{r4, r5, r6, pc}
    95e0:	e5963004 	ldr	r3, [r6, #4]
    95e4:	eafffff6 	b	95c4 <MiniHDLC::sendChar(unsigned char)+0x20>
    95e8:	e3530000 	cmp	r3, #0
    95ec:	08bd8070 	popeq	{r4, r5, r6, pc}
    95f0:	e1a00001 	mov	r0, r1
    95f4:	e8bd4070 	pop	{r4, r5, r6, lr}
    95f8:	e12fff13 	bx	r3
    95fc:	00029994 	.word	0x00029994

00009600 <MiniHDLC::sendCharWithStuffing(unsigned char)>:
    9600:	e5d03000 	ldrb	r3, [r0]
    9604:	e3530000 	cmp	r3, #0
    9608:	0a00001f 	beq	968c <MiniHDLC::sendCharWithStuffing(unsigned char)+0x8c>
    960c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    9610:	e1a09000 	mov	r9, r0
    9614:	e1a04001 	mov	r4, r1
    9618:	e3a05008 	mov	r5, #8
    961c:	e3a08000 	mov	r8, #0
    9620:	e59f7068 	ldr	r7, [pc, #104]	; 9690 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x90>
    9624:	ea000007 	b	9648 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x48>
    9628:	e5993014 	ldr	r3, [r9, #20]
    962c:	e2833001 	add	r3, r3, #1
    9630:	e3530005 	cmp	r3, #5
    9634:	e5893014 	str	r3, [r9, #20]
    9638:	0a00000c 	beq	9670 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x70>
    963c:	e2555001 	subs	r5, r5, #1
    9640:	e1a040a4 	lsr	r4, r4, #1
    9644:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    9648:	e5973004 	ldr	r3, [r7, #4]
    964c:	e2046001 	and	r6, r4, #1
    9650:	e3530000 	cmp	r3, #0
    9654:	0a000001 	beq	9660 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x60>
    9658:	e1a00006 	mov	r0, r6
    965c:	e12fff33 	blx	r3
    9660:	e3560000 	cmp	r6, #0
    9664:	1affffef 	bne	9628 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x28>
    9668:	e5898014 	str	r8, [r9, #20]
    966c:	eafffff2 	b	963c <MiniHDLC::sendCharWithStuffing(unsigned char)+0x3c>
    9670:	e5973004 	ldr	r3, [r7, #4]
    9674:	e3530000 	cmp	r3, #0
    9678:	0afffffa 	beq	9668 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x68>
    967c:	e3a00000 	mov	r0, #0
    9680:	e12fff33 	blx	r3
    9684:	e5898014 	str	r8, [r9, #20]
    9688:	eaffffeb 	b	963c <MiniHDLC::sendCharWithStuffing(unsigned char)+0x3c>
    968c:	eaffffc4 	b	95a4 <MiniHDLC::sendChar(unsigned char)>
    9690:	00029994 	.word	0x00029994

00009694 <MiniHDLC::sendEscaped(unsigned char)>:
    9694:	e241307d 	sub	r3, r1, #125	; 0x7d
    9698:	e3530001 	cmp	r3, #1
    969c:	e92d4070 	push	{r4, r5, r6, lr}
    96a0:	e1a04001 	mov	r4, r1
    96a4:	e1a05000 	mov	r5, r0
    96a8:	9a000003 	bls	96bc <MiniHDLC::sendEscaped(unsigned char)+0x28>
    96ac:	e1a01004 	mov	r1, r4
    96b0:	e1a00005 	mov	r0, r5
    96b4:	e8bd4070 	pop	{r4, r5, r6, lr}
    96b8:	eaffffd0 	b	9600 <MiniHDLC::sendCharWithStuffing(unsigned char)>
    96bc:	e3a0107d 	mov	r1, #125	; 0x7d
    96c0:	e2244020 	eor	r4, r4, #32
    96c4:	ebffffcd 	bl	9600 <MiniHDLC::sendCharWithStuffing(unsigned char)>
    96c8:	e1a01004 	mov	r1, r4
    96cc:	e1a00005 	mov	r0, r5
    96d0:	e8bd4070 	pop	{r4, r5, r6, lr}
    96d4:	eaffffc9 	b	9600 <MiniHDLC::sendCharWithStuffing(unsigned char)>

000096d8 <MiniHDLC::sendFrame(unsigned char const*, int)>:
    96d8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    96dc:	e1a06002 	mov	r6, r2
    96e0:	e1a08001 	mov	r8, r1
    96e4:	e3a0107e 	mov	r1, #126	; 0x7e
    96e8:	e1a05000 	mov	r5, r0
    96ec:	ebffffac 	bl	95a4 <MiniHDLC::sendChar(unsigned char)>
    96f0:	e3560000 	cmp	r6, #0
    96f4:	0a00001d 	beq	9770 <MiniHDLC::sendFrame(unsigned char const*, int)+0x98>
    96f8:	e59fc07c 	ldr	ip, [pc, #124]	; 977c <MiniHDLC::sendFrame(unsigned char const*, int)+0xa4>
    96fc:	e59f707c 	ldr	r7, [pc, #124]	; 9780 <MiniHDLC::sendFrame(unsigned char const*, int)+0xa8>
    9700:	e0886006 	add	r6, r8, r6
    9704:	e4d81001 	ldrb	r1, [r8], #1
    9708:	e1a00005 	mov	r0, r5
    970c:	e021342c 	eor	r3, r1, ip, lsr #8
    9710:	e1a03083 	lsl	r3, r3, #1
    9714:	e19740b3 	ldrh	r4, [r7, r3]
    9718:	e024440c 	eor	r4, r4, ip, lsl #8
    971c:	e6bf4074 	sxth	r4, r4
    9720:	ebffffdb 	bl	9694 <MiniHDLC::sendEscaped(unsigned char)>
    9724:	e1580006 	cmp	r8, r6
    9728:	e6ffc074 	uxth	ip, r4
    972c:	1afffff4 	bne	9704 <MiniHDLC::sendFrame(unsigned char const*, int)+0x2c>
    9730:	e6ef1074 	uxtb	r1, r4
    9734:	e1a0c42c 	lsr	ip, ip, #8
    9738:	e5d53001 	ldrb	r3, [r5, #1]
    973c:	e1a00005 	mov	r0, r5
    9740:	e3530000 	cmp	r3, #0
    9744:	11a06001 	movne	r6, r1
    9748:	01a0600c 	moveq	r6, ip
    974c:	11a0100c 	movne	r1, ip
    9750:	ebffffcf 	bl	9694 <MiniHDLC::sendEscaped(unsigned char)>
    9754:	e1a01006 	mov	r1, r6
    9758:	e1a00005 	mov	r0, r5
    975c:	ebffffcc 	bl	9694 <MiniHDLC::sendEscaped(unsigned char)>
    9760:	e1a00005 	mov	r0, r5
    9764:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9768:	e3a0107e 	mov	r1, #126	; 0x7e
    976c:	eaffff8c 	b	95a4 <MiniHDLC::sendChar(unsigned char)>
    9770:	e3a0c0ff 	mov	ip, #255	; 0xff
    9774:	e1a0100c 	mov	r1, ip
    9778:	eaffffee 	b	9738 <MiniHDLC::sendFrame(unsigned char const*, int)+0x60>
    977c:	0000ffff 	.word	0x0000ffff
    9780:	00022ec8 	.word	0x00022ec8

00009784 <__udivsi3>:
    9784:	e2512001 	subs	r2, r1, #1
    9788:	012fff1e 	bxeq	lr
    978c:	3a000036 	bcc	986c <__udivsi3+0xe8>
    9790:	e1500001 	cmp	r0, r1
    9794:	9a000022 	bls	9824 <__udivsi3+0xa0>
    9798:	e1110002 	tst	r1, r2
    979c:	0a000023 	beq	9830 <__udivsi3+0xac>
    97a0:	e311020e 	tst	r1, #-536870912	; 0xe0000000
    97a4:	01a01181 	lsleq	r1, r1, #3
    97a8:	03a03008 	moveq	r3, #8
    97ac:	13a03001 	movne	r3, #1
    97b0:	e3510201 	cmp	r1, #268435456	; 0x10000000
    97b4:	31510000 	cmpcc	r1, r0
    97b8:	31a01201 	lslcc	r1, r1, #4
    97bc:	31a03203 	lslcc	r3, r3, #4
    97c0:	3afffffa 	bcc	97b0 <__udivsi3+0x2c>
    97c4:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    97c8:	31510000 	cmpcc	r1, r0
    97cc:	31a01081 	lslcc	r1, r1, #1
    97d0:	31a03083 	lslcc	r3, r3, #1
    97d4:	3afffffa 	bcc	97c4 <__udivsi3+0x40>
    97d8:	e3a02000 	mov	r2, #0
    97dc:	e1500001 	cmp	r0, r1
    97e0:	20400001 	subcs	r0, r0, r1
    97e4:	21822003 	orrcs	r2, r2, r3
    97e8:	e15000a1 	cmp	r0, r1, lsr #1
    97ec:	204000a1 	subcs	r0, r0, r1, lsr #1
    97f0:	218220a3 	orrcs	r2, r2, r3, lsr #1
    97f4:	e1500121 	cmp	r0, r1, lsr #2
    97f8:	20400121 	subcs	r0, r0, r1, lsr #2
    97fc:	21822123 	orrcs	r2, r2, r3, lsr #2
    9800:	e15001a1 	cmp	r0, r1, lsr #3
    9804:	204001a1 	subcs	r0, r0, r1, lsr #3
    9808:	218221a3 	orrcs	r2, r2, r3, lsr #3
    980c:	e3500000 	cmp	r0, #0
    9810:	11b03223 	lsrsne	r3, r3, #4
    9814:	11a01221 	lsrne	r1, r1, #4
    9818:	1affffef 	bne	97dc <__udivsi3+0x58>
    981c:	e1a00002 	mov	r0, r2
    9820:	e12fff1e 	bx	lr
    9824:	03a00001 	moveq	r0, #1
    9828:	13a00000 	movne	r0, #0
    982c:	e12fff1e 	bx	lr
    9830:	e3510801 	cmp	r1, #65536	; 0x10000
    9834:	21a01821 	lsrcs	r1, r1, #16
    9838:	23a02010 	movcs	r2, #16
    983c:	33a02000 	movcc	r2, #0
    9840:	e3510c01 	cmp	r1, #256	; 0x100
    9844:	21a01421 	lsrcs	r1, r1, #8
    9848:	22822008 	addcs	r2, r2, #8
    984c:	e3510010 	cmp	r1, #16
    9850:	21a01221 	lsrcs	r1, r1, #4
    9854:	22822004 	addcs	r2, r2, #4
    9858:	e3510004 	cmp	r1, #4
    985c:	82822003 	addhi	r2, r2, #3
    9860:	908220a1 	addls	r2, r2, r1, lsr #1
    9864:	e1a00230 	lsr	r0, r0, r2
    9868:	e12fff1e 	bx	lr
    986c:	e3500000 	cmp	r0, #0
    9870:	13e00000 	mvnne	r0, #0
    9874:	ea000007 	b	9898 <__aeabi_idiv0>

00009878 <__aeabi_uidivmod>:
    9878:	e3510000 	cmp	r1, #0
    987c:	0afffffa 	beq	986c <__udivsi3+0xe8>
    9880:	e92d4003 	push	{r0, r1, lr}
    9884:	ebffffbe 	bl	9784 <__udivsi3>
    9888:	e8bd4006 	pop	{r1, r2, lr}
    988c:	e0030092 	mul	r3, r2, r0
    9890:	e0411003 	sub	r1, r1, r3
    9894:	e12fff1e 	bx	lr

00009898 <__aeabi_idiv0>:
    9898:	e12fff1e 	bx	lr

0000989c <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)>:
    989c:	e92d4070 	push	{r4, r5, r6, lr}
    98a0:	e2524000 	subs	r4, r2, #0
    98a4:	e1a05001 	mov	r5, r1
    98a8:	0a000009 	beq	98d4 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x38>
    98ac:	e355000f 	cmp	r5, #15
    98b0:	9a000003 	bls	98c4 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x28>
    98b4:	e59f202c 	ldr	r2, [pc, #44]	; 98e8 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x4c>
    98b8:	e59f102c 	ldr	r1, [pc, #44]	; 98ec <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x50>
    98bc:	e59f002c 	ldr	r0, [pc, #44]	; 98f0 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x54>
    98c0:	eb004223 	bl	1a154 <assertion_failed>
    98c4:	e3a03000 	mov	r3, #0
    98c8:	e0844005 	add	r4, r4, r5
    98cc:	e5c4305c 	strb	r3, [r4, #92]	; 0x5c
    98d0:	e8bd8070 	pop	{r4, r5, r6, pc}
    98d4:	e59f2018 	ldr	r2, [pc, #24]	; 98f4 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x58>
    98d8:	e59f100c 	ldr	r1, [pc, #12]	; 98ec <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x50>
    98dc:	e59f0014 	ldr	r0, [pc, #20]	; 98f8 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x5c>
    98e0:	eb00421b 	bl	1a154 <assertion_failed>
    98e4:	eafffff0 	b	98ac <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x10>
    98e8:	00000269 	.word	0x00000269
    98ec:	000230ec 	.word	0x000230ec
    98f0:	000230fc 	.word	0x000230fc
    98f4:	00000266 	.word	0x00000266
    98f8:	00022ebc 	.word	0x00022ebc

000098fc <CDWHCIDevice::~CDWHCIDevice()>:
    98fc:	e3a03000 	mov	r3, #0
    9900:	e92d4010 	push	{r4, lr}
    9904:	e1a04000 	mov	r4, r0
    9908:	e59f201c 	ldr	r2, [pc, #28]	; 992c <CDWHCIDevice::~CDWHCIDevice()+0x30>
    990c:	e5803008 	str	r3, [r0, #8]
    9910:	e880000c 	stm	r0, {r2, r3}
    9914:	e2800074 	add	r0, r0, #116	; 0x74
    9918:	eb001dd8 	bl	11080 <CDWHCIRootPort::~CDWHCIRootPort()>
    991c:	e1a00004 	mov	r0, r4
    9920:	eb001221 	bl	e1ac <CUSBHostController::~CUSBHostController()>
    9924:	e1a00004 	mov	r0, r4
    9928:	e8bd8010 	pop	{r4, pc}
    992c:	000230d0 	.word	0x000230d0

00009930 <CDWHCIDevice::~CDWHCIDevice()>:
    9930:	e3a03000 	mov	r3, #0
    9934:	e92d4010 	push	{r4, lr}
    9938:	e1a04000 	mov	r4, r0
    993c:	e59f2028 	ldr	r2, [pc, #40]	; 996c <CDWHCIDevice::~CDWHCIDevice()+0x3c>
    9940:	e5803008 	str	r3, [r0, #8]
    9944:	e880000c 	stm	r0, {r2, r3}
    9948:	e2800074 	add	r0, r0, #116	; 0x74
    994c:	eb001dcb 	bl	11080 <CDWHCIRootPort::~CDWHCIRootPort()>
    9950:	e1a00004 	mov	r0, r4
    9954:	eb001214 	bl	e1ac <CUSBHostController::~CUSBHostController()>
    9958:	e1a00004 	mov	r0, r4
    995c:	e3a0107c 	mov	r1, #124	; 0x7c
    9960:	eb005f93 	bl	217b4 <operator delete(void*, unsigned int)>
    9964:	e1a00004 	mov	r0, r4
    9968:	e8bd8010 	pop	{r4, pc}
    996c:	000230d0 	.word	0x000230d0

00009970 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>:
    9970:	e92d4030 	push	{r4, r5, lr}
    9974:	e24dd01c 	sub	sp, sp, #28
    9978:	e1a05000 	mov	r5, r0
    997c:	e28d000c 	add	r0, sp, #12
    9980:	eb000967 	bl	bf24 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9984:	e3a03000 	mov	r3, #0
    9988:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    998c:	eb004be3 	bl	1c920 <CLogger::Get()>
    9990:	e1a04000 	mov	r4, r0
    9994:	e28d000c 	add	r0, sp, #12
    9998:	eb00096a 	bl	bf48 <CDWHCIRegister::Read()>
    999c:	e59f3020 	ldr	r3, [pc, #32]	; 99c4 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]+0x54>
    99a0:	e88d0021 	stm	sp, {r0, r5}
    99a4:	e3a02004 	mov	r2, #4
    99a8:	e1a00004 	mov	r0, r4
    99ac:	e59f1014 	ldr	r1, [pc, #20]	; 99c8 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]+0x58>
    99b0:	eb004d83 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    99b4:	e28d000c 	add	r0, sp, #12
    99b8:	eb000961 	bl	bf44 <CDWHCIRegister::~CDWHCIRegister()>
    99bc:	e28dd01c 	add	sp, sp, #28
    99c0:	e8bd8030 	pop	{r4, r5, pc}
    99c4:	0002311c 	.word	0x0002311c
    99c8:	000230e0 	.word	0x000230e0

000099cc <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)>:
    99cc:	e92d4070 	push	{r4, r5, r6, lr}
    99d0:	e1a04000 	mov	r4, r0
    99d4:	e1a06001 	mov	r6, r1
    99d8:	e1a05002 	mov	r5, r2
    99dc:	eb0011ee 	bl	e19c <CUSBHostController::CUSBHostController()>
    99e0:	e3a03000 	mov	r3, #0
    99e4:	e3a00001 	mov	r0, #1
    99e8:	e59fc0a8 	ldr	ip, [pc, #168]	; 9a98 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xcc>
    99ec:	e5843010 	str	r3, [r4, #16]
    99f0:	e584300c 	str	r3, [r4, #12]
    99f4:	e584306c 	str	r3, [r4, #108]	; 0x6c
    99f8:	e5843070 	str	r3, [r4, #112]	; 0x70
    99fc:	e5840014 	str	r0, [r4, #20]
    9a00:	e5840058 	str	r0, [r4, #88]	; 0x58
    9a04:	e5846004 	str	r6, [r4, #4]
    9a08:	e5845008 	str	r5, [r4, #8]
    9a0c:	e584c000 	str	ip, [r4]
    9a10:	e1a01004 	mov	r1, r4
    9a14:	e2840074 	add	r0, r4, #116	; 0x74
    9a18:	eb001d88 	bl	11040 <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)>
    9a1c:	e5943004 	ldr	r3, [r4, #4]
    9a20:	e3530000 	cmp	r3, #0
    9a24:	0a000011 	beq	9a70 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xa4>
    9a28:	e5943008 	ldr	r3, [r4, #8]
    9a2c:	e3530000 	cmp	r3, #0
    9a30:	0a000013 	beq	9a84 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xb8>
    9a34:	e3a01000 	mov	r1, #0
    9a38:	e2843014 	add	r3, r4, #20
    9a3c:	e2842054 	add	r2, r4, #84	; 0x54
    9a40:	e5a31004 	str	r1, [r3, #4]!
    9a44:	e1520003 	cmp	r2, r3
    9a48:	1afffffc 	bne	9a40 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0x74>
    9a4c:	e3a03000 	mov	r3, #0
    9a50:	e1a01003 	mov	r1, r3
    9a54:	e0842003 	add	r2, r4, r3
    9a58:	e2833001 	add	r3, r3, #1
    9a5c:	e3530010 	cmp	r3, #16
    9a60:	e5c2105c 	strb	r1, [r2, #92]	; 0x5c
    9a64:	1afffffa 	bne	9a54 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0x88>
    9a68:	e1a00004 	mov	r0, r4
    9a6c:	e8bd8070 	pop	{r4, r5, r6, pc}
    9a70:	e3a02048 	mov	r2, #72	; 0x48
    9a74:	e59f1020 	ldr	r1, [pc, #32]	; 9a9c <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xd0>
    9a78:	e59f0020 	ldr	r0, [pc, #32]	; 9aa0 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xd4>
    9a7c:	eb0041b4 	bl	1a154 <assertion_failed>
    9a80:	eaffffe8 	b	9a28 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0x5c>
    9a84:	e3a02049 	mov	r2, #73	; 0x49
    9a88:	e59f100c 	ldr	r1, [pc, #12]	; 9a9c <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xd0>
    9a8c:	e59f0010 	ldr	r0, [pc, #16]	; 9aa4 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xd8>
    9a90:	eb0041af 	bl	1a154 <assertion_failed>
    9a94:	eaffffe6 	b	9a34 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0x68>
    9a98:	000230d0 	.word	0x000230d0
    9a9c:	000230ec 	.word	0x000230ec
    9aa0:	00022e78 	.word	0x00022e78
    9aa4:	00023128 	.word	0x00023128

00009aa8 <CDWHCIDevice::GetPortSpeed()>:
    9aa8:	e92d4010 	push	{r4, lr}
    9aac:	e24dd010 	sub	sp, sp, #16
    9ab0:	e59f103c 	ldr	r1, [pc, #60]	; 9af4 <CDWHCIDevice::GetPortSpeed()+0x4c>
    9ab4:	e28d0004 	add	r0, sp, #4
    9ab8:	eb000919 	bl	bf24 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9abc:	e28d0004 	add	r0, sp, #4
    9ac0:	eb000920 	bl	bf48 <CDWHCIRegister::Read()>
    9ac4:	e1a008a0 	lsr	r0, r0, #17
    9ac8:	e2000003 	and	r0, r0, #3
    9acc:	e3500003 	cmp	r0, #3
    9ad0:	01a04000 	moveq	r4, r0
    9ad4:	159f301c 	ldrne	r3, [pc, #28]	; 9af8 <CDWHCIDevice::GetPortSpeed()+0x50>
    9ad8:	10830000 	addne	r0, r3, r0
    9adc:	15d04020 	ldrbne	r4, [r0, #32]
    9ae0:	e28d0004 	add	r0, sp, #4
    9ae4:	eb000916 	bl	bf44 <CDWHCIRegister::~CDWHCIRegister()>
    9ae8:	e1a00004 	mov	r0, r4
    9aec:	e28dd010 	add	sp, sp, #16
    9af0:	e8bd8010 	pop	{r4, pc}
    9af4:	20980440 	.word	0x20980440
    9af8:	000230c8 	.word	0x000230c8

00009afc <CDWHCIDevice::OvercurrentDetected()>:
    9afc:	e92d4010 	push	{r4, lr}
    9b00:	e24dd010 	sub	sp, sp, #16
    9b04:	e59f1028 	ldr	r1, [pc, #40]	; 9b34 <CDWHCIDevice::OvercurrentDetected()+0x38>
    9b08:	e28d0004 	add	r0, sp, #4
    9b0c:	eb000904 	bl	bf24 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9b10:	e28d0004 	add	r0, sp, #4
    9b14:	eb00090b 	bl	bf48 <CDWHCIRegister::Read()>
    9b18:	e1a04000 	mov	r4, r0
    9b1c:	e28d0004 	add	r0, sp, #4
    9b20:	eb000907 	bl	bf44 <CDWHCIRegister::~CDWHCIRegister()>
    9b24:	e1a00224 	lsr	r0, r4, #4
    9b28:	e2000001 	and	r0, r0, #1
    9b2c:	e28dd010 	add	sp, sp, #16
    9b30:	e8bd8010 	pop	{r4, pc}
    9b34:	20980440 	.word	0x20980440

00009b38 <CDWHCIDevice::DisableRootPort()>:
    9b38:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    9b3c:	e24dd014 	sub	sp, sp, #20
    9b40:	e59f1030 	ldr	r1, [pc, #48]	; 9b78 <CDWHCIDevice::DisableRootPort()+0x40>
    9b44:	e28d0004 	add	r0, sp, #4
    9b48:	eb0008f5 	bl	bf24 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9b4c:	e28d0004 	add	r0, sp, #4
    9b50:	eb0008fc 	bl	bf48 <CDWHCIRegister::Read()>
    9b54:	e3e01a01 	mvn	r1, #4096	; 0x1000
    9b58:	e28d0004 	add	r0, sp, #4
    9b5c:	eb000931 	bl	c028 <CDWHCIRegister::And(unsigned int)>
    9b60:	e28d0004 	add	r0, sp, #4
    9b64:	eb0008fe 	bl	bf64 <CDWHCIRegister::Write()>
    9b68:	e28d0004 	add	r0, sp, #4
    9b6c:	eb0008f4 	bl	bf44 <CDWHCIRegister::~CDWHCIRegister()>
    9b70:	e28dd014 	add	sp, sp, #20
    9b74:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    9b78:	20980440 	.word	0x20980440

00009b7c <CDWHCIDevice::PowerOn()>:
    9b7c:	e92d4030 	push	{r4, r5, lr}
    9b80:	e24dd024 	sub	sp, sp, #36	; 0x24
    9b84:	e28d0008 	add	r0, sp, #8
    9b88:	e3a05000 	mov	r5, #0
    9b8c:	eb004194 	bl	1a1e4 <CBcmPropertyTags::CBcmPropertyTags()>
    9b90:	e3a0c003 	mov	ip, #3
    9b94:	e28d0008 	add	r0, sp, #8
    9b98:	e58d5000 	str	r5, [sp]
    9b9c:	e3a03014 	mov	r3, #20
    9ba0:	e28d200c 	add	r2, sp, #12
    9ba4:	e59f1034 	ldr	r1, [pc, #52]	; 9be0 <CDWHCIDevice::PowerOn()+0x64>
    9ba8:	e58dc018 	str	ip, [sp, #24]
    9bac:	e58dc01c 	str	ip, [sp, #28]
    9bb0:	eb0041e2 	bl	1a340 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    9bb4:	e2504000 	subs	r4, r0, #0
    9bb8:	0a000003 	beq	9bcc <CDWHCIDevice::PowerOn()+0x50>
    9bbc:	e59d401c 	ldr	r4, [sp, #28]
    9bc0:	e3140002 	tst	r4, #2
    9bc4:	11a04005 	movne	r4, r5
    9bc8:	02044001 	andeq	r4, r4, #1
    9bcc:	e28d0008 	add	r0, sp, #8
    9bd0:	eb004189 	bl	1a1fc <CBcmPropertyTags::~CBcmPropertyTags()>
    9bd4:	e1a00004 	mov	r0, r4
    9bd8:	e28dd024 	add	sp, sp, #36	; 0x24
    9bdc:	e8bd8030 	pop	{r4, r5, pc}
    9be0:	00028001 	.word	0x00028001

00009be4 <CDWHCIDevice::EnableGlobalInterrupts()>:
    9be4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    9be8:	e24dd014 	sub	sp, sp, #20
    9bec:	e59f1030 	ldr	r1, [pc, #48]	; 9c24 <CDWHCIDevice::EnableGlobalInterrupts()+0x40>
    9bf0:	e28d0004 	add	r0, sp, #4
    9bf4:	eb0008ca 	bl	bf24 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9bf8:	e28d0004 	add	r0, sp, #4
    9bfc:	eb0008d1 	bl	bf48 <CDWHCIRegister::Read()>
    9c00:	e3a01001 	mov	r1, #1
    9c04:	e28d0004 	add	r0, sp, #4
    9c08:	eb000916 	bl	c068 <CDWHCIRegister::Or(unsigned int)>
    9c0c:	e28d0004 	add	r0, sp, #4
    9c10:	eb0008d3 	bl	bf64 <CDWHCIRegister::Write()>
    9c14:	e28d0004 	add	r0, sp, #4
    9c18:	eb0008c9 	bl	bf44 <CDWHCIRegister::~CDWHCIRegister()>
    9c1c:	e28dd014 	add	sp, sp, #20
    9c20:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    9c24:	20980008 	.word	0x20980008

00009c28 <CDWHCIDevice::EnableCommonInterrupts()>:
    9c28:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    9c2c:	e24dd014 	sub	sp, sp, #20
    9c30:	e59f1024 	ldr	r1, [pc, #36]	; 9c5c <CDWHCIDevice::EnableCommonInterrupts()+0x34>
    9c34:	e28d0004 	add	r0, sp, #4
    9c38:	eb0008b9 	bl	bf24 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9c3c:	e28d0004 	add	r0, sp, #4
    9c40:	eb00094f 	bl	c184 <CDWHCIRegister::SetAll()>
    9c44:	e28d0004 	add	r0, sp, #4
    9c48:	eb0008c5 	bl	bf64 <CDWHCIRegister::Write()>
    9c4c:	e28d0004 	add	r0, sp, #4
    9c50:	eb0008bb 	bl	bf44 <CDWHCIRegister::~CDWHCIRegister()>
    9c54:	e28dd014 	add	sp, sp, #20
    9c58:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    9c5c:	20980014 	.word	0x20980014

00009c60 <CDWHCIDevice::EnableHostInterrupts()>:
    9c60:	e92d4010 	push	{r4, lr}
    9c64:	e1a04000 	mov	r4, r0
    9c68:	e24dd010 	sub	sp, sp, #16
    9c6c:	e3a02000 	mov	r2, #0
    9c70:	e59f1040 	ldr	r1, [pc, #64]	; 9cb8 <CDWHCIDevice::EnableHostInterrupts()+0x58>
    9c74:	e28d0004 	add	r0, sp, #4
    9c78:	eb0008ad 	bl	bf34 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    9c7c:	e28d0004 	add	r0, sp, #4
    9c80:	eb0008b7 	bl	bf64 <CDWHCIRegister::Write()>
    9c84:	e1a00004 	mov	r0, r4
    9c88:	ebffffe6 	bl	9c28 <CDWHCIDevice::EnableCommonInterrupts()>
    9c8c:	e28d0004 	add	r0, sp, #4
    9c90:	eb0008ac 	bl	bf48 <CDWHCIRegister::Read()>
    9c94:	e3a01402 	mov	r1, #33554432	; 0x2000000
    9c98:	e28d0004 	add	r0, sp, #4
    9c9c:	eb0008f1 	bl	c068 <CDWHCIRegister::Or(unsigned int)>
    9ca0:	e28d0004 	add	r0, sp, #4
    9ca4:	eb0008ae 	bl	bf64 <CDWHCIRegister::Write()>
    9ca8:	e28d0004 	add	r0, sp, #4
    9cac:	eb0008a4 	bl	bf44 <CDWHCIRegister::~CDWHCIRegister()>
    9cb0:	e28dd010 	add	sp, sp, #16
    9cb4:	e8bd8010 	pop	{r4, pc}
    9cb8:	20980018 	.word	0x20980018

00009cbc <CDWHCIDevice::EnableChannelInterrupt(unsigned int)>:
    9cbc:	e92d4030 	push	{r4, r5, lr}
    9cc0:	e1a04000 	mov	r4, r0
    9cc4:	e24dd014 	sub	sp, sp, #20
    9cc8:	e1a05001 	mov	r5, r1
    9ccc:	e28d0004 	add	r0, sp, #4
    9cd0:	e59f1054 	ldr	r1, [pc, #84]	; 9d2c <CDWHCIDevice::EnableChannelInterrupt(unsigned int)+0x70>
    9cd4:	eb000892 	bl	bf24 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9cd8:	e5940058 	ldr	r0, [r4, #88]	; 0x58
    9cdc:	e3500000 	cmp	r0, #0
    9ce0:	1a00000f 	bne	9d24 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)+0x68>
    9ce4:	e28d0004 	add	r0, sp, #4
    9ce8:	eb000896 	bl	bf48 <CDWHCIRegister::Read()>
    9cec:	e3a01001 	mov	r1, #1
    9cf0:	e28d0004 	add	r0, sp, #4
    9cf4:	e1a01511 	lsl	r1, r1, r5
    9cf8:	eb0008da 	bl	c068 <CDWHCIRegister::Or(unsigned int)>
    9cfc:	e28d0004 	add	r0, sp, #4
    9d00:	eb000897 	bl	bf64 <CDWHCIRegister::Write()>
    9d04:	e5943058 	ldr	r3, [r4, #88]	; 0x58
    9d08:	e3530000 	cmp	r3, #0
    9d0c:	0a000000 	beq	9d14 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)+0x58>
    9d10:	eb005e76 	bl	216f0 <LeaveCritical>
    9d14:	e28d0004 	add	r0, sp, #4
    9d18:	eb000889 	bl	bf44 <CDWHCIRegister::~CDWHCIRegister()>
    9d1c:	e28dd014 	add	sp, sp, #20
    9d20:	e8bd8030 	pop	{r4, r5, pc}
    9d24:	eb005e44 	bl	2163c <EnterCritical>
    9d28:	eaffffed 	b	9ce4 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)+0x28>
    9d2c:	20980418 	.word	0x20980418

00009d30 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>:
    9d30:	e92d4030 	push	{r4, r5, lr}
    9d34:	e1a04000 	mov	r4, r0
    9d38:	e24dd014 	sub	sp, sp, #20
    9d3c:	e1a05001 	mov	r5, r1
    9d40:	e28d0004 	add	r0, sp, #4
    9d44:	e59f1054 	ldr	r1, [pc, #84]	; 9da0 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)+0x70>
    9d48:	eb000875 	bl	bf24 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9d4c:	e5940058 	ldr	r0, [r4, #88]	; 0x58
    9d50:	e3500000 	cmp	r0, #0
    9d54:	1a00000f 	bne	9d98 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)+0x68>
    9d58:	e28d0004 	add	r0, sp, #4
    9d5c:	eb000879 	bl	bf48 <CDWHCIRegister::Read()>
    9d60:	e3a01001 	mov	r1, #1
    9d64:	e28d0004 	add	r0, sp, #4
    9d68:	e1e01511 	mvn	r1, r1, lsl r5
    9d6c:	eb0008ad 	bl	c028 <CDWHCIRegister::And(unsigned int)>
    9d70:	e28d0004 	add	r0, sp, #4
    9d74:	eb00087a 	bl	bf64 <CDWHCIRegister::Write()>
    9d78:	e5943058 	ldr	r3, [r4, #88]	; 0x58
    9d7c:	e3530000 	cmp	r3, #0
    9d80:	0a000000 	beq	9d88 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)+0x58>
    9d84:	eb005e59 	bl	216f0 <LeaveCritical>
    9d88:	e28d0004 	add	r0, sp, #4
    9d8c:	eb00086c 	bl	bf44 <CDWHCIRegister::~CDWHCIRegister()>
    9d90:	e28dd014 	add	sp, sp, #20
    9d94:	e8bd8030 	pop	{r4, r5, pc}
    9d98:	eb005e27 	bl	2163c <EnterCritical>
    9d9c:	eaffffed 	b	9d58 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)+0x28>
    9da0:	20980418 	.word	0x20980418

00009da4 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)>:
    9da4:	e92d4070 	push	{r4, r5, r6, lr}
    9da8:	e2514000 	subs	r4, r1, #0
    9dac:	e24dd048 	sub	sp, sp, #72	; 0x48
    9db0:	e1a06000 	mov	r6, r0
    9db4:	0a0000de 	beq	a134 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x390>
    9db8:	e1a00004 	mov	r0, r4
    9dbc:	eb0009b0 	bl	c484 <CDWHCITransferStageData::GetChannelNumber() const>
    9dc0:	e596300c 	ldr	r3, [r6, #12]
    9dc4:	e1a05000 	mov	r5, r0
    9dc8:	e1500003 	cmp	r0, r3
    9dcc:	2a0000cf 	bcs	a110 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x36c>
    9dd0:	e3a01001 	mov	r1, #1
    9dd4:	e1a00004 	mov	r0, r4
    9dd8:	eb0009a3 	bl	c46c <CDWHCITransferStageData::SetSubState(unsigned int)>
    9ddc:	e59f1364 	ldr	r1, [pc, #868]	; a148 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3a4>
    9de0:	e1a05285 	lsl	r5, r5, #5
    9de4:	e0851001 	add	r1, r5, r1
    9de8:	e1a0000d 	mov	r0, sp
    9dec:	eb00084c 	bl	bf24 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9df0:	e1a0000d 	mov	r0, sp
    9df4:	eb0008e2 	bl	c184 <CDWHCIRegister::SetAll()>
    9df8:	e1a0000d 	mov	r0, sp
    9dfc:	eb000858 	bl	bf64 <CDWHCIRegister::Write()>
    9e00:	e59f1344 	ldr	r1, [pc, #836]	; a14c <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3a8>
    9e04:	e3a02000 	mov	r2, #0
    9e08:	e0851001 	add	r1, r5, r1
    9e0c:	e28d000c 	add	r0, sp, #12
    9e10:	eb000847 	bl	bf34 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    9e14:	e1a00004 	mov	r0, r4
    9e18:	eb000af5 	bl	c9f4 <CDWHCITransferStageData::GetBytesToTransfer() const>
    9e1c:	e3c014ff 	bic	r1, r0, #-16777216	; 0xff000000
    9e20:	e3c1173e 	bic	r1, r1, #16252928	; 0xf80000
    9e24:	e28d000c 	add	r0, sp, #12
    9e28:	eb00088e 	bl	c068 <CDWHCIRegister::Or(unsigned int)>
    9e2c:	e1a00004 	mov	r0, r4
    9e30:	eb000af1 	bl	c9fc <CDWHCITransferStageData::GetPacketsToTransfer() const>
    9e34:	e59f1314 	ldr	r1, [pc, #788]	; a150 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3ac>
    9e38:	e0011980 	and	r1, r1, r0, lsl #19
    9e3c:	e28d000c 	add	r0, sp, #12
    9e40:	eb000888 	bl	c068 <CDWHCIRegister::Or(unsigned int)>
    9e44:	e1a00004 	mov	r0, r4
    9e48:	eb000ab3 	bl	c91c <CDWHCITransferStageData::GetPID() const>
    9e4c:	e1a01e80 	lsl	r1, r0, #29
    9e50:	e28d000c 	add	r0, sp, #12
    9e54:	eb000883 	bl	c068 <CDWHCIRegister::Or(unsigned int)>
    9e58:	e28d000c 	add	r0, sp, #12
    9e5c:	eb000840 	bl	bf64 <CDWHCIRegister::Write()>
    9e60:	e1a00004 	mov	r0, r4
    9e64:	eb000ad1 	bl	c9b0 <CDWHCITransferStageData::GetDMAAddress() const>
    9e68:	e59f12e4 	ldr	r1, [pc, #740]	; a154 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3b0>
    9e6c:	e3c02103 	bic	r2, r0, #-1073741824	; 0xc0000000
    9e70:	e3822101 	orr	r2, r2, #1073741824	; 0x40000000
    9e74:	e0851001 	add	r1, r5, r1
    9e78:	e28d0018 	add	r0, sp, #24
    9e7c:	eb00082c 	bl	bf34 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    9e80:	e28d0018 	add	r0, sp, #24
    9e84:	eb000836 	bl	bf64 <CDWHCIRegister::Write()>
    9e88:	e1a00004 	mov	r0, r4
    9e8c:	eb000ac7 	bl	c9b0 <CDWHCITransferStageData::GetDMAAddress() const>
    9e90:	e1a06000 	mov	r6, r0
    9e94:	e1a00004 	mov	r0, r4
    9e98:	eb000ad5 	bl	c9f4 <CDWHCITransferStageData::GetBytesToTransfer() const>
    9e9c:	e1a01000 	mov	r1, r0
    9ea0:	e1a00006 	mov	r0, r6
    9ea4:	eb005e27 	bl	21748 <CleanAndInvalidateDataCacheRange>
    9ea8:	e59f12a8 	ldr	r1, [pc, #680]	; a158 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3b4>
    9eac:	e3a02000 	mov	r2, #0
    9eb0:	e0851001 	add	r1, r5, r1
    9eb4:	e28d0024 	add	r0, sp, #36	; 0x24
    9eb8:	eb00081d 	bl	bf34 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    9ebc:	e1a00004 	mov	r0, r4
    9ec0:	eb000acf 	bl	ca04 <CDWHCITransferStageData::IsSplit() const>
    9ec4:	e3500000 	cmp	r0, #0
    9ec8:	1a000079 	bne	a0b4 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x310>
    9ecc:	e28d0024 	add	r0, sp, #36	; 0x24
    9ed0:	eb000823 	bl	bf64 <CDWHCIRegister::Write()>
    9ed4:	e59f1280 	ldr	r1, [pc, #640]	; a15c <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3b8>
    9ed8:	e28d0030 	add	r0, sp, #48	; 0x30
    9edc:	e0851001 	add	r1, r5, r1
    9ee0:	eb00080f 	bl	bf24 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9ee4:	e28d0030 	add	r0, sp, #48	; 0x30
    9ee8:	eb000816 	bl	bf48 <CDWHCIRegister::Read()>
    9eec:	e59f126c 	ldr	r1, [pc, #620]	; a160 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3bc>
    9ef0:	e28d0030 	add	r0, sp, #48	; 0x30
    9ef4:	eb00084b 	bl	c028 <CDWHCIRegister::And(unsigned int)>
    9ef8:	e1a00004 	mov	r0, r4
    9efc:	eb000a82 	bl	c90c <CDWHCITransferStageData::GetMaxPacketSize() const>
    9f00:	e1a01a80 	lsl	r1, r0, #21
    9f04:	e1a01aa1 	lsr	r1, r1, #21
    9f08:	e28d0030 	add	r0, sp, #48	; 0x30
    9f0c:	eb000855 	bl	c068 <CDWHCIRegister::Or(unsigned int)>
    9f10:	e28d0030 	add	r0, sp, #48	; 0x30
    9f14:	e3e01603 	mvn	r1, #3145728	; 0x300000
    9f18:	eb000842 	bl	c028 <CDWHCIRegister::And(unsigned int)>
    9f1c:	e28d0030 	add	r0, sp, #48	; 0x30
    9f20:	e3a01601 	mov	r1, #1048576	; 0x100000
    9f24:	eb00084f 	bl	c068 <CDWHCIRegister::Or(unsigned int)>
    9f28:	e1a00004 	mov	r0, r4
    9f2c:	eb000a9b 	bl	c9a0 <CDWHCITransferStageData::IsDirectionIn() const>
    9f30:	e3500000 	cmp	r0, #0
    9f34:	0a000056 	beq	a094 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x2f0>
    9f38:	e3a01902 	mov	r1, #32768	; 0x8000
    9f3c:	e28d0030 	add	r0, sp, #48	; 0x30
    9f40:	eb000848 	bl	c068 <CDWHCIRegister::Or(unsigned int)>
    9f44:	e1a00004 	mov	r0, r4
    9f48:	eb000a71 	bl	c914 <CDWHCITransferStageData::GetSpeed() const>
    9f4c:	e3500000 	cmp	r0, #0
    9f50:	1a00004b 	bne	a084 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x2e0>
    9f54:	e3a01802 	mov	r1, #131072	; 0x20000
    9f58:	e28d0030 	add	r0, sp, #48	; 0x30
    9f5c:	eb000841 	bl	c068 <CDWHCIRegister::Or(unsigned int)>
    9f60:	e3e0157f 	mvn	r1, #532676608	; 0x1fc00000
    9f64:	e28d0030 	add	r0, sp, #48	; 0x30
    9f68:	eb00082e 	bl	c028 <CDWHCIRegister::And(unsigned int)>
    9f6c:	e1a00004 	mov	r0, r4
    9f70:	eb000a21 	bl	c7fc <CDWHCITransferStageData::GetDeviceAddress() const>
    9f74:	e1a01b00 	lsl	r1, r0, #22
    9f78:	e28d0030 	add	r0, sp, #48	; 0x30
    9f7c:	eb000839 	bl	c068 <CDWHCIRegister::Or(unsigned int)>
    9f80:	e3e01703 	mvn	r1, #786432	; 0xc0000
    9f84:	e28d0030 	add	r0, sp, #48	; 0x30
    9f88:	eb000826 	bl	c028 <CDWHCIRegister::And(unsigned int)>
    9f8c:	e1a00004 	mov	r0, r4
    9f90:	eb000a2b 	bl	c844 <CDWHCITransferStageData::GetEndpointType() const>
    9f94:	e1a01900 	lsl	r1, r0, #18
    9f98:	e28d0030 	add	r0, sp, #48	; 0x30
    9f9c:	eb000831 	bl	c068 <CDWHCIRegister::Or(unsigned int)>
    9fa0:	e3e01b1e 	mvn	r1, #30720	; 0x7800
    9fa4:	e28d0030 	add	r0, sp, #48	; 0x30
    9fa8:	eb00081e 	bl	c028 <CDWHCIRegister::And(unsigned int)>
    9fac:	e1a00004 	mov	r0, r4
    9fb0:	eb000a43 	bl	c8c4 <CDWHCITransferStageData::GetEndpointNumber() const>
    9fb4:	e1a01580 	lsl	r1, r0, #11
    9fb8:	e28d0030 	add	r0, sp, #48	; 0x30
    9fbc:	eb000829 	bl	c068 <CDWHCIRegister::Or(unsigned int)>
    9fc0:	e1a00004 	mov	r0, r4
    9fc4:	eb000b1f 	bl	cc48 <CDWHCITransferStageData::GetFrameScheduler() const>
    9fc8:	e2506000 	subs	r6, r0, #0
    9fcc:	0a00000b 	beq	a000 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x25c>
    9fd0:	e5963000 	ldr	r3, [r6]
    9fd4:	e5933014 	ldr	r3, [r3, #20]
    9fd8:	e12fff33 	blx	r3
    9fdc:	e5963000 	ldr	r3, [r6]
    9fe0:	e1a00006 	mov	r0, r6
    9fe4:	e5933018 	ldr	r3, [r3, #24]
    9fe8:	e12fff33 	blx	r3
    9fec:	e3500000 	cmp	r0, #0
    9ff0:	1a00002b 	bne	a0a4 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x300>
    9ff4:	e3e01202 	mvn	r1, #536870912	; 0x20000000
    9ff8:	e28d0030 	add	r0, sp, #48	; 0x30
    9ffc:	eb000809 	bl	c028 <CDWHCIRegister::And(unsigned int)>
    a000:	e59f115c 	ldr	r1, [pc, #348]	; a164 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3c0>
    a004:	e28d003c 	add	r0, sp, #60	; 0x3c
    a008:	e0851001 	add	r1, r5, r1
    a00c:	eb0007c4 	bl	bf24 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a010:	e1a00004 	mov	r0, r4
    a014:	eb000ac4 	bl	cb2c <CDWHCITransferStageData::GetStatusMask() const>
    a018:	e1a01000 	mov	r1, r0
    a01c:	e28d003c 	add	r0, sp, #60	; 0x3c
    a020:	eb0007eb 	bl	bfd4 <CDWHCIRegister::Set(unsigned int)>
    a024:	e28d003c 	add	r0, sp, #60	; 0x3c
    a028:	eb0007cd 	bl	bf64 <CDWHCIRegister::Write()>
    a02c:	e28d0030 	add	r0, sp, #48	; 0x30
    a030:	e3a01102 	mov	r1, #-2147483648	; 0x80000000
    a034:	eb00080b 	bl	c068 <CDWHCIRegister::Or(unsigned int)>
    a038:	e3e01101 	mvn	r1, #1073741824	; 0x40000000
    a03c:	e28d0030 	add	r0, sp, #48	; 0x30
    a040:	eb0007f8 	bl	c028 <CDWHCIRegister::And(unsigned int)>
    a044:	e28d0030 	add	r0, sp, #48	; 0x30
    a048:	eb0007c5 	bl	bf64 <CDWHCIRegister::Write()>
    a04c:	e28d003c 	add	r0, sp, #60	; 0x3c
    a050:	eb0007bb 	bl	bf44 <CDWHCIRegister::~CDWHCIRegister()>
    a054:	e28d0030 	add	r0, sp, #48	; 0x30
    a058:	eb0007b9 	bl	bf44 <CDWHCIRegister::~CDWHCIRegister()>
    a05c:	e28d0024 	add	r0, sp, #36	; 0x24
    a060:	eb0007b7 	bl	bf44 <CDWHCIRegister::~CDWHCIRegister()>
    a064:	e28d0018 	add	r0, sp, #24
    a068:	eb0007b5 	bl	bf44 <CDWHCIRegister::~CDWHCIRegister()>
    a06c:	e28d000c 	add	r0, sp, #12
    a070:	eb0007b3 	bl	bf44 <CDWHCIRegister::~CDWHCIRegister()>
    a074:	e1a0000d 	mov	r0, sp
    a078:	eb0007b1 	bl	bf44 <CDWHCIRegister::~CDWHCIRegister()>
    a07c:	e28dd048 	add	sp, sp, #72	; 0x48
    a080:	e8bd8070 	pop	{r4, r5, r6, pc}
    a084:	e3e01802 	mvn	r1, #131072	; 0x20000
    a088:	e28d0030 	add	r0, sp, #48	; 0x30
    a08c:	eb0007e5 	bl	c028 <CDWHCIRegister::And(unsigned int)>
    a090:	eaffffb2 	b	9f60 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x1bc>
    a094:	e3e01902 	mvn	r1, #32768	; 0x8000
    a098:	e28d0030 	add	r0, sp, #48	; 0x30
    a09c:	eb0007e1 	bl	c028 <CDWHCIRegister::And(unsigned int)>
    a0a0:	eaffffa7 	b	9f44 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x1a0>
    a0a4:	e3a01202 	mov	r1, #536870912	; 0x20000000
    a0a8:	e28d0030 	add	r0, sp, #48	; 0x30
    a0ac:	eb0007ed 	bl	c068 <CDWHCIRegister::Or(unsigned int)>
    a0b0:	eaffffd2 	b	a000 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x25c>
    a0b4:	e1a00004 	mov	r0, r4
    a0b8:	eb000a7d 	bl	cab4 <CDWHCITransferStageData::GetHubPortAddress() const>
    a0bc:	e1a01000 	mov	r1, r0
    a0c0:	e28d0024 	add	r0, sp, #36	; 0x24
    a0c4:	eb0007e7 	bl	c068 <CDWHCIRegister::Or(unsigned int)>
    a0c8:	e1a00004 	mov	r0, r4
    a0cc:	eb000a5c 	bl	ca44 <CDWHCITransferStageData::GetHubAddress() const>
    a0d0:	e1a01380 	lsl	r1, r0, #7
    a0d4:	e28d0024 	add	r0, sp, #36	; 0x24
    a0d8:	eb0007e2 	bl	c068 <CDWHCIRegister::Or(unsigned int)>
    a0dc:	e1a00004 	mov	r0, r4
    a0e0:	eb000a8f 	bl	cb24 <CDWHCITransferStageData::GetSplitPosition() const>
    a0e4:	e1a01700 	lsl	r1, r0, #14
    a0e8:	e28d0024 	add	r0, sp, #36	; 0x24
    a0ec:	eb0007dd 	bl	c068 <CDWHCIRegister::Or(unsigned int)>
    a0f0:	e1a00004 	mov	r0, r4
    a0f4:	eb000a44 	bl	ca0c <CDWHCITransferStageData::IsSplitComplete() const>
    a0f8:	e3500000 	cmp	r0, #0
    a0fc:	1a000008 	bne	a124 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x380>
    a100:	e3a01102 	mov	r1, #-2147483648	; 0x80000000
    a104:	e28d0024 	add	r0, sp, #36	; 0x24
    a108:	eb0007d6 	bl	c068 <CDWHCIRegister::Or(unsigned int)>
    a10c:	eaffff6e 	b	9ecc <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x128>
    a110:	e59f2050 	ldr	r2, [pc, #80]	; a168 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3c4>
    a114:	e59f1050 	ldr	r1, [pc, #80]	; a16c <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3c8>
    a118:	e59f0050 	ldr	r0, [pc, #80]	; a170 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3cc>
    a11c:	eb00400c 	bl	1a154 <assertion_failed>
    a120:	eaffff2a 	b	9dd0 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x2c>
    a124:	e3a01801 	mov	r1, #65536	; 0x10000
    a128:	e28d0024 	add	r0, sp, #36	; 0x24
    a12c:	eb0007cd 	bl	c068 <CDWHCIRegister::Or(unsigned int)>
    a130:	eafffff2 	b	a100 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x35c>
    a134:	e59f2038 	ldr	r2, [pc, #56]	; a174 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3d0>
    a138:	e59f102c 	ldr	r1, [pc, #44]	; a16c <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3c8>
    a13c:	e59f0034 	ldr	r0, [pc, #52]	; a178 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3d4>
    a140:	eb004003 	bl	1a154 <assertion_failed>
    a144:	eaffff1b 	b	9db8 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x14>
    a148:	20980508 	.word	0x20980508
    a14c:	20980510 	.word	0x20980510
    a150:	1ff80000 	.word	0x1ff80000
    a154:	20980514 	.word	0x20980514
    a158:	20980504 	.word	0x20980504
    a15c:	20980500 	.word	0x20980500
    a160:	fffff800 	.word	0xfffff800
    a164:	2098050c 	.word	0x2098050c
    a168:	0000030b 	.word	0x0000030b
    a16c:	000230ec 	.word	0x000230ec
    a170:	00023148 	.word	0x00023148
    a174:	00000309 	.word	0x00000309
    a178:	00023138 	.word	0x00023138

0000a17c <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>:
    a17c:	e92d4070 	push	{r4, r5, r6, lr}
    a180:	e2515000 	subs	r5, r1, #0
    a184:	e24dd018 	sub	sp, sp, #24
    a188:	e1a06000 	mov	r6, r0
    a18c:	0a000037 	beq	a270 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0xf4>
    a190:	e1a00005 	mov	r0, r5
    a194:	eb0008ba 	bl	c484 <CDWHCITransferStageData::GetChannelNumber() const>
    a198:	e596300c 	ldr	r3, [r6, #12]
    a19c:	e1a04000 	mov	r4, r0
    a1a0:	e1500003 	cmp	r0, r3
    a1a4:	2a00002c 	bcs	a25c <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0xe0>
    a1a8:	e59f10d4 	ldr	r1, [pc, #212]	; a284 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x108>
    a1ac:	e1a0000d 	mov	r0, sp
    a1b0:	e0841001 	add	r1, r4, r1
    a1b4:	e1a04281 	lsl	r4, r1, #5
    a1b8:	e1a01004 	mov	r1, r4
    a1bc:	eb000758 	bl	bf24 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a1c0:	e1a0000d 	mov	r0, sp
    a1c4:	eb00075f 	bl	bf48 <CDWHCIRegister::Read()>
    a1c8:	e1a0000d 	mov	r0, sp
    a1cc:	e3a01102 	mov	r1, #-2147483648	; 0x80000000
    a1d0:	eb000783 	bl	bfe4 <CDWHCIRegister::IsSet(unsigned int) const>
    a1d4:	e3500000 	cmp	r0, #0
    a1d8:	1a000006 	bne	a1f8 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x7c>
    a1dc:	e1a01005 	mov	r1, r5
    a1e0:	e1a00006 	mov	r0, r6
    a1e4:	ebfffeee 	bl	9da4 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)>
    a1e8:	e1a0000d 	mov	r0, sp
    a1ec:	eb000754 	bl	bf44 <CDWHCIRegister::~CDWHCIRegister()>
    a1f0:	e28dd018 	add	sp, sp, #24
    a1f4:	e8bd8070 	pop	{r4, r5, r6, pc}
    a1f8:	e1a00005 	mov	r0, r5
    a1fc:	e3a01000 	mov	r1, #0
    a200:	eb000899 	bl	c46c <CDWHCITransferStageData::SetSubState(unsigned int)>
    a204:	e1a0000d 	mov	r0, sp
    a208:	e3e01102 	mvn	r1, #-2147483648	; 0x80000000
    a20c:	eb000785 	bl	c028 <CDWHCIRegister::And(unsigned int)>
    a210:	e3a01101 	mov	r1, #1073741824	; 0x40000000
    a214:	e1a0000d 	mov	r0, sp
    a218:	eb000792 	bl	c068 <CDWHCIRegister::Or(unsigned int)>
    a21c:	e1a0000d 	mov	r0, sp
    a220:	eb00074f 	bl	bf64 <CDWHCIRegister::Write()>
    a224:	e284100c 	add	r1, r4, #12
    a228:	e28d000c 	add	r0, sp, #12
    a22c:	eb00073c 	bl	bf24 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a230:	e3a01002 	mov	r1, #2
    a234:	e28d000c 	add	r0, sp, #12
    a238:	eb000765 	bl	bfd4 <CDWHCIRegister::Set(unsigned int)>
    a23c:	e28d000c 	add	r0, sp, #12
    a240:	eb000747 	bl	bf64 <CDWHCIRegister::Write()>
    a244:	e28d000c 	add	r0, sp, #12
    a248:	eb00073d 	bl	bf44 <CDWHCIRegister::~CDWHCIRegister()>
    a24c:	e1a0000d 	mov	r0, sp
    a250:	eb00073b 	bl	bf44 <CDWHCIRegister::~CDWHCIRegister()>
    a254:	e28dd018 	add	sp, sp, #24
    a258:	e8bd8070 	pop	{r4, r5, r6, pc}
    a25c:	e3a02e2f 	mov	r2, #752	; 0x2f0
    a260:	e59f1020 	ldr	r1, [pc, #32]	; a288 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x10c>
    a264:	e59f0020 	ldr	r0, [pc, #32]	; a28c <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x110>
    a268:	eb003fb9 	bl	1a154 <assertion_failed>
    a26c:	eaffffcd 	b	a1a8 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x2c>
    a270:	e59f2018 	ldr	r2, [pc, #24]	; a290 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x114>
    a274:	e59f100c 	ldr	r1, [pc, #12]	; a288 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x10c>
    a278:	e59f0014 	ldr	r0, [pc, #20]	; a294 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x118>
    a27c:	eb003fb4 	bl	1a154 <assertion_failed>
    a280:	eaffffc2 	b	a190 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x14>
    a284:	0104c028 	.word	0x0104c028
    a288:	000230ec 	.word	0x000230ec
    a28c:	00023148 	.word	0x00023148
    a290:	000002ee 	.word	0x000002ee
    a294:	00023138 	.word	0x00023138

0000a298 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)>:
    a298:	e92d4070 	push	{r4, r5, r6, lr}
    a29c:	e3a03000 	mov	r3, #0
    a2a0:	e1a05000 	mov	r5, r0
    a2a4:	e1a04001 	mov	r4, r1
    a2a8:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    a2ac:	e1510003 	cmp	r1, r3
    a2b0:	0a00001f 	beq	a334 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0x9c>
    a2b4:	e1a00004 	mov	r0, r4
    a2b8:	eb000869 	bl	c464 <CDWHCITransferStageData::GetState() const>
    a2bc:	e3500003 	cmp	r0, #3
    a2c0:	0a000003 	beq	a2d4 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0x3c>
    a2c4:	e59f207c 	ldr	r2, [pc, #124]	; a348 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0xb0>
    a2c8:	e59f107c 	ldr	r1, [pc, #124]	; a34c <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0xb4>
    a2cc:	e59f007c 	ldr	r0, [pc, #124]	; a350 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0xb8>
    a2d0:	eb003f9f 	bl	1a154 <assertion_failed>
    a2d4:	e1a00004 	mov	r0, r4
    a2d8:	eb0009c9 	bl	ca04 <CDWHCITransferStageData::IsSplit() const>
    a2dc:	e2501000 	subs	r1, r0, #0
    a2e0:	1a000007 	bne	a304 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0x6c>
    a2e4:	e1a00004 	mov	r0, r4
    a2e8:	eb00085b 	bl	c45c <CDWHCITransferStageData::SetState(unsigned int)>
    a2ec:	e1a01004 	mov	r1, r4
    a2f0:	e1a00005 	mov	r0, r5
    a2f4:	ebffffa0 	bl	a17c <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>
    a2f8:	e3a03000 	mov	r3, #0
    a2fc:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    a300:	e8bd8070 	pop	{r4, r5, r6, pc}
    a304:	e1a00004 	mov	r0, r4
    a308:	e3a01001 	mov	r1, #1
    a30c:	eb000852 	bl	c45c <CDWHCITransferStageData::SetState(unsigned int)>
    a310:	e3a01000 	mov	r1, #0
    a314:	e1a00004 	mov	r0, r4
    a318:	eb000841 	bl	c424 <CDWHCITransferStageData::SetSplitComplete(bool)>
    a31c:	e1a00004 	mov	r0, r4
    a320:	eb000a48 	bl	cc48 <CDWHCITransferStageData::GetFrameScheduler() const>
    a324:	e5903000 	ldr	r3, [r0]
    a328:	e5933008 	ldr	r3, [r3, #8]
    a32c:	e12fff33 	blx	r3
    a330:	eaffffed 	b	a2ec <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0x54>
    a334:	e59f2018 	ldr	r2, [pc, #24]	; a354 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0xbc>
    a338:	e59f100c 	ldr	r1, [pc, #12]	; a34c <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0xb4>
    a33c:	e59f0014 	ldr	r0, [pc, #20]	; a358 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0xc0>
    a340:	eb003f83 	bl	1a154 <assertion_failed>
    a344:	eaffffda 	b	a2b4 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0x1c>
    a348:	000004ef 	.word	0x000004ef
    a34c:	000230ec 	.word	0x000230ec
    a350:	00023160 	.word	0x00023160
    a354:	000004ee 	.word	0x000004ee
    a358:	00023138 	.word	0x00023138

0000a35c <CDWHCIDevice::TimerStub(unsigned int, void*, void*)>:
    a35c:	e92d4070 	push	{r4, r5, r6, lr}
    a360:	e2525000 	subs	r5, r2, #0
    a364:	e1a04001 	mov	r4, r1
    a368:	0a00000d 	beq	a3a4 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x48>
    a36c:	e3540000 	cmp	r4, #0
    a370:	0a000003 	beq	a384 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x28>
    a374:	e1a01004 	mov	r1, r4
    a378:	e1a00005 	mov	r0, r5
    a37c:	e8bd4070 	pop	{r4, r5, r6, lr}
    a380:	eaffffc4 	b	a298 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)>
    a384:	e59f102c 	ldr	r1, [pc, #44]	; a3b8 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x5c>
    a388:	e59f002c 	ldr	r0, [pc, #44]	; a3bc <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x60>
    a38c:	e59f202c 	ldr	r2, [pc, #44]	; a3c0 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x64>
    a390:	eb003f6f 	bl	1a154 <assertion_failed>
    a394:	e1a01004 	mov	r1, r4
    a398:	e1a00005 	mov	r0, r5
    a39c:	e8bd4070 	pop	{r4, r5, r6, lr}
    a3a0:	eaffffbc 	b	a298 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)>
    a3a4:	e59f2018 	ldr	r2, [pc, #24]	; a3c4 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x68>
    a3a8:	e59f1008 	ldr	r1, [pc, #8]	; a3b8 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x5c>
    a3ac:	e59f0014 	ldr	r0, [pc, #20]	; a3c8 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x6c>
    a3b0:	eb003f67 	bl	1a154 <assertion_failed>
    a3b4:	eaffffec 	b	a36c <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x10>
    a3b8:	000230ec 	.word	0x000230ec
    a3bc:	00023194 	.word	0x00023194
    a3c0:	00000508 	.word	0x00000508
    a3c4:	00000505 	.word	0x00000505
    a3c8:	00022ebc 	.word	0x00022ebc

0000a3cc <CDWHCIDevice::AllocateChannel()>:
    a3cc:	e92d4010 	push	{r4, lr}
    a3d0:	e590c014 	ldr	ip, [r0, #20]
    a3d4:	e24dd008 	sub	sp, sp, #8
    a3d8:	e35c0000 	cmp	ip, #0
    a3dc:	e1a04000 	mov	r4, r0
    a3e0:	1a000014 	bne	a438 <CDWHCIDevice::AllocateChannel()+0x6c>
    a3e4:	e590100c 	ldr	r1, [r0, #12]
    a3e8:	e3510000 	cmp	r1, #0
    a3ec:	0a00000e 	beq	a42c <CDWHCIDevice::AllocateChannel()+0x60>
    a3f0:	e5903010 	ldr	r3, [r0, #16]
    a3f4:	e2130001 	ands	r0, r3, #1
    a3f8:	0a000025 	beq	a494 <CDWHCIDevice::AllocateChannel()+0xc8>
    a3fc:	e3a00000 	mov	r0, #0
    a400:	e3a03001 	mov	r3, #1
    a404:	ea000002 	b	a414 <CDWHCIDevice::AllocateChannel()+0x48>
    a408:	e5942010 	ldr	r2, [r4, #16]
    a40c:	e1120003 	tst	r2, r3
    a410:	0a000013 	beq	a464 <CDWHCIDevice::AllocateChannel()+0x98>
    a414:	e2800001 	add	r0, r0, #1
    a418:	e1500001 	cmp	r0, r1
    a41c:	e1a03083 	lsl	r3, r3, #1
    a420:	3afffff8 	bcc	a408 <CDWHCIDevice::AllocateChannel()+0x3c>
    a424:	e35c0000 	cmp	ip, #0
    a428:	1a000017 	bne	a48c <CDWHCIDevice::AllocateChannel()+0xc0>
    a42c:	e3a00010 	mov	r0, #16
    a430:	e28dd008 	add	sp, sp, #8
    a434:	e8bd8010 	pop	{r4, pc}
    a438:	e1a0000c 	mov	r0, ip
    a43c:	eb005c7e 	bl	2163c <EnterCritical>
    a440:	e594100c 	ldr	r1, [r4, #12]
    a444:	e3510000 	cmp	r1, #0
    a448:	0594c014 	ldreq	ip, [r4, #20]
    a44c:	0afffff4 	beq	a424 <CDWHCIDevice::AllocateChannel()+0x58>
    a450:	e5943010 	ldr	r3, [r4, #16]
    a454:	e594c014 	ldr	ip, [r4, #20]
    a458:	e2130001 	ands	r0, r3, #1
    a45c:	1affffe6 	bne	a3fc <CDWHCIDevice::AllocateChannel()+0x30>
    a460:	e3a03001 	mov	r3, #1
    a464:	e5942010 	ldr	r2, [r4, #16]
    a468:	e35c0000 	cmp	ip, #0
    a46c:	e1823003 	orr	r3, r2, r3
    a470:	e5843010 	str	r3, [r4, #16]
    a474:	0affffed 	beq	a430 <CDWHCIDevice::AllocateChannel()+0x64>
    a478:	e58d0004 	str	r0, [sp, #4]
    a47c:	eb005c9b 	bl	216f0 <LeaveCritical>
    a480:	e59d0004 	ldr	r0, [sp, #4]
    a484:	e28dd008 	add	sp, sp, #8
    a488:	e8bd8010 	pop	{r4, pc}
    a48c:	eb005c97 	bl	216f0 <LeaveCritical>
    a490:	eaffffe5 	b	a42c <CDWHCIDevice::AllocateChannel()+0x60>
    a494:	e5943010 	ldr	r3, [r4, #16]
    a498:	e3833001 	orr	r3, r3, #1
    a49c:	e5843010 	str	r3, [r4, #16]
    a4a0:	eaffffe2 	b	a430 <CDWHCIDevice::AllocateChannel()+0x64>

0000a4a4 <CDWHCIDevice::FreeChannel(unsigned int)>:
    a4a4:	e590300c 	ldr	r3, [r0, #12]
    a4a8:	e92d4070 	push	{r4, r5, r6, lr}
    a4ac:	e1530001 	cmp	r3, r1
    a4b0:	e1a04000 	mov	r4, r0
    a4b4:	e1a06001 	mov	r6, r1
    a4b8:	9a000016 	bls	a518 <CDWHCIDevice::FreeChannel(unsigned int)+0x74>
    a4bc:	e3a05001 	mov	r5, #1
    a4c0:	e5940014 	ldr	r0, [r4, #20]
    a4c4:	e1a05615 	lsl	r5, r5, r6
    a4c8:	e3500000 	cmp	r0, #0
    a4cc:	1a00000f 	bne	a510 <CDWHCIDevice::FreeChannel(unsigned int)+0x6c>
    a4d0:	e5943010 	ldr	r3, [r4, #16]
    a4d4:	e1150003 	tst	r5, r3
    a4d8:	0a000007 	beq	a4fc <CDWHCIDevice::FreeChannel(unsigned int)+0x58>
    a4dc:	e5943010 	ldr	r3, [r4, #16]
    a4e0:	e5942014 	ldr	r2, [r4, #20]
    a4e4:	e1c35005 	bic	r5, r3, r5
    a4e8:	e3520000 	cmp	r2, #0
    a4ec:	e5845010 	str	r5, [r4, #16]
    a4f0:	08bd8070 	popeq	{r4, r5, r6, pc}
    a4f4:	e8bd4070 	pop	{r4, r5, r6, lr}
    a4f8:	ea005c7c 	b	216f0 <LeaveCritical>
    a4fc:	e59f2028 	ldr	r2, [pc, #40]	; a52c <CDWHCIDevice::FreeChannel(unsigned int)+0x88>
    a500:	e59f1028 	ldr	r1, [pc, #40]	; a530 <CDWHCIDevice::FreeChannel(unsigned int)+0x8c>
    a504:	e59f0028 	ldr	r0, [pc, #40]	; a534 <CDWHCIDevice::FreeChannel(unsigned int)+0x90>
    a508:	eb003f11 	bl	1a154 <assertion_failed>
    a50c:	eafffff2 	b	a4dc <CDWHCIDevice::FreeChannel(unsigned int)+0x38>
    a510:	eb005c49 	bl	2163c <EnterCritical>
    a514:	eaffffed 	b	a4d0 <CDWHCIDevice::FreeChannel(unsigned int)+0x2c>
    a518:	e59f2018 	ldr	r2, [pc, #24]	; a538 <CDWHCIDevice::FreeChannel(unsigned int)+0x94>
    a51c:	e59f100c 	ldr	r1, [pc, #12]	; a530 <CDWHCIDevice::FreeChannel(unsigned int)+0x8c>
    a520:	e59f0014 	ldr	r0, [pc, #20]	; a53c <CDWHCIDevice::FreeChannel(unsigned int)+0x98>
    a524:	eb003f0a 	bl	1a154 <assertion_failed>
    a528:	eaffffe3 	b	a4bc <CDWHCIDevice::FreeChannel(unsigned int)+0x18>
    a52c:	0000052e 	.word	0x0000052e
    a530:	000230ec 	.word	0x000230ec
    a534:	000231a0 	.word	0x000231a0
    a538:	00000529 	.word	0x00000529
    a53c:	00023148 	.word	0x00023148

0000a540 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)>:
    a540:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    a544:	e2517000 	subs	r7, r1, #0
    a548:	e24dd00c 	sub	sp, sp, #12
    a54c:	e1a04000 	mov	r4, r0
    a550:	e1a08002 	mov	r8, r2
    a554:	e1a09003 	mov	r9, r3
    a558:	0a000048 	beq	a680 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x140>
    a55c:	e1a00004 	mov	r0, r4
    a560:	ebffff99 	bl	a3cc <CDWHCIDevice::AllocateChannel()>
    a564:	e594300c 	ldr	r3, [r4, #12]
    a568:	e1a05000 	mov	r5, r0
    a56c:	e1500003 	cmp	r0, r3
    a570:	23a07000 	movcs	r7, #0
    a574:	3a000002 	bcc	a584 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x44>
    a578:	e1a00007 	mov	r0, r7
    a57c:	e28dd00c 	add	sp, sp, #12
    a580:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    a584:	e3a00054 	mov	r0, #84	; 0x54
    a588:	eb0009b0 	bl	cc50 <CDWHCITransferStageData::operator new(unsigned int)>
    a58c:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
    a590:	e58d9000 	str	r9, [sp]
    a594:	e58d3004 	str	r3, [sp, #4]
    a598:	e1a02007 	mov	r2, r7
    a59c:	e1a03008 	mov	r3, r8
    a5a0:	e1a01005 	mov	r1, r5
    a5a4:	e0848105 	add	r8, r4, r5, lsl #2
    a5a8:	e1a06000 	mov	r6, r0
    a5ac:	eb0007ca 	bl	c4dc <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)>
    a5b0:	e5983018 	ldr	r3, [r8, #24]
    a5b4:	e3530000 	cmp	r3, #0
    a5b8:	0a000003 	beq	a5cc <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x8c>
    a5bc:	e59f20d0 	ldr	r2, [pc, #208]	; a694 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x154>
    a5c0:	e59f10d0 	ldr	r1, [pc, #208]	; a698 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x158>
    a5c4:	e59f00d0 	ldr	r0, [pc, #208]	; a69c <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x15c>
    a5c8:	eb003ee1 	bl	1a154 <assertion_failed>
    a5cc:	e1a01005 	mov	r1, r5
    a5d0:	e1a00004 	mov	r0, r4
    a5d4:	e5886018 	str	r6, [r8, #24]
    a5d8:	ebfffdb7 	bl	9cbc <CDWHCIDevice::EnableChannelInterrupt(unsigned int)>
    a5dc:	e1a00006 	mov	r0, r6
    a5e0:	eb000907 	bl	ca04 <CDWHCITransferStageData::IsSplit() const>
    a5e4:	e2501000 	subs	r1, r0, #0
    a5e8:	e1a00006 	mov	r0, r6
    a5ec:	1a000007 	bne	a610 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0xd0>
    a5f0:	eb000799 	bl	c45c <CDWHCITransferStageData::SetState(unsigned int)>
    a5f4:	e3a07001 	mov	r7, #1
    a5f8:	e1a00004 	mov	r0, r4
    a5fc:	e1a01006 	mov	r1, r6
    a600:	ebfffedd 	bl	a17c <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>
    a604:	e1a00007 	mov	r0, r7
    a608:	e28dd00c 	add	sp, sp, #12
    a60c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    a610:	eb000799 	bl	c47c <CDWHCITransferStageData::BeginSplitCycle()>
    a614:	e2507000 	subs	r7, r0, #0
    a618:	1a00000c 	bne	a650 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x110>
    a61c:	e1a01005 	mov	r1, r5
    a620:	e1a00004 	mov	r0, r4
    a624:	ebfffdc1 	bl	9d30 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    a628:	e1a00006 	mov	r0, r6
    a62c:	eb0006fa 	bl	c21c <CDWHCITransferStageData::~CDWHCITransferStageData()>
    a630:	e1a00006 	mov	r0, r6
    a634:	e3a01054 	mov	r1, #84	; 0x54
    a638:	eb00099d 	bl	ccb4 <CDWHCITransferStageData::operator delete(void*, unsigned int)>
    a63c:	e5887018 	str	r7, [r8, #24]
    a640:	e1a01005 	mov	r1, r5
    a644:	e1a00004 	mov	r0, r4
    a648:	ebffff95 	bl	a4a4 <CDWHCIDevice::FreeChannel(unsigned int)>
    a64c:	eaffffc9 	b	a578 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x38>
    a650:	e1a00006 	mov	r0, r6
    a654:	e3a01001 	mov	r1, #1
    a658:	eb00077f 	bl	c45c <CDWHCITransferStageData::SetState(unsigned int)>
    a65c:	e3a01000 	mov	r1, #0
    a660:	e1a00006 	mov	r0, r6
    a664:	eb00076e 	bl	c424 <CDWHCITransferStageData::SetSplitComplete(bool)>
    a668:	e1a00006 	mov	r0, r6
    a66c:	eb000975 	bl	cc48 <CDWHCITransferStageData::GetFrameScheduler() const>
    a670:	e5903000 	ldr	r3, [r0]
    a674:	e5933008 	ldr	r3, [r3, #8]
    a678:	e12fff33 	blx	r3
    a67c:	eaffffdc 	b	a5f4 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0xb4>
    a680:	e59f2018 	ldr	r2, [pc, #24]	; a6a0 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x160>
    a684:	e59f100c 	ldr	r1, [pc, #12]	; a698 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x158>
    a688:	e59f0014 	ldr	r0, [pc, #20]	; a6a4 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x164>
    a68c:	eb003eb0 	bl	1a154 <assertion_failed>
    a690:	eaffffb1 	b	a55c <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x1c>
    a694:	00000282 	.word	0x00000282
    a698:	000230ec 	.word	0x000230ec
    a69c:	000231d0 	.word	0x000231d0
    a6a0:	00000271 	.word	0x00000271
    a6a4:	000231c4 	.word	0x000231c4

0000a6a8 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)>:
    a6a8:	e92d4070 	push	{r4, r5, r6, lr}
    a6ac:	e3a03000 	mov	r3, #0
    a6b0:	e24dd008 	sub	sp, sp, #8
    a6b4:	e1a05000 	mov	r5, r0
    a6b8:	e1a04001 	mov	r4, r1
    a6bc:	e1a06002 	mov	r6, r2
    a6c0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    a6c4:	e1510003 	cmp	r1, r3
    a6c8:	0a000025 	beq	a764 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xbc>
    a6cc:	e1a00004 	mov	r0, r4
    a6d0:	eb000f61 	bl	e45c <CUSBRequest::GetEndpoint() const>
    a6d4:	eb000e4a 	bl	e004 <CUSBEndpoint::GetType() const>
    a6d8:	e3500001 	cmp	r0, #1
    a6dc:	0a000008 	beq	a704 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0x5c>
    a6e0:	e1a00004 	mov	r0, r4
    a6e4:	eb000f5c 	bl	e45c <CUSBRequest::GetEndpoint() const>
    a6e8:	eb000e45 	bl	e004 <CUSBEndpoint::GetType() const>
    a6ec:	e3500002 	cmp	r0, #2
    a6f0:	0a000003 	beq	a704 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0x5c>
    a6f4:	e3a020e8 	mov	r2, #232	; 0xe8
    a6f8:	e59f1078 	ldr	r1, [pc, #120]	; a778 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xd0>
    a6fc:	e59f0078 	ldr	r0, [pc, #120]	; a77c <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xd4>
    a700:	eb003e93 	bl	1a154 <assertion_failed>
    a704:	e1a00004 	mov	r0, r4
    a708:	eb000fa0 	bl	e590 <CUSBRequest::GetBufLen() const>
    a70c:	e3500000 	cmp	r0, #0
    a710:	1a000003 	bne	a724 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0x7c>
    a714:	e3a020e9 	mov	r2, #233	; 0xe9
    a718:	e59f1058 	ldr	r1, [pc, #88]	; a778 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xd0>
    a71c:	e59f005c 	ldr	r0, [pc, #92]	; a780 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xd8>
    a720:	eb003e8b 	bl	1a154 <assertion_failed>
    a724:	e3a01000 	mov	r1, #0
    a728:	e1a00004 	mov	r0, r4
    a72c:	eb000f5a 	bl	e49c <CUSBRequest::SetStatus(int)>
    a730:	e1a00004 	mov	r0, r4
    a734:	eb000f48 	bl	e45c <CUSBRequest::GetEndpoint() const>
    a738:	eb000e33 	bl	e00c <CUSBEndpoint::IsDirectionIn() const>
    a73c:	e58d6000 	str	r6, [sp]
    a740:	e1a02000 	mov	r2, r0
    a744:	e1a01004 	mov	r1, r4
    a748:	e1a00005 	mov	r0, r5
    a74c:	e3a03000 	mov	r3, #0
    a750:	ebffff7a 	bl	a540 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)>
    a754:	e3a03000 	mov	r3, #0
    a758:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    a75c:	e28dd008 	add	sp, sp, #8
    a760:	e8bd8070 	pop	{r4, r5, r6, pc}
    a764:	e3a020e6 	mov	r2, #230	; 0xe6
    a768:	e59f1008 	ldr	r1, [pc, #8]	; a778 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xd0>
    a76c:	e59f0010 	ldr	r0, [pc, #16]	; a784 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xdc>
    a770:	eb003e77 	bl	1a154 <assertion_failed>
    a774:	eaffffd4 	b	a6cc <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0x24>
    a778:	000230ec 	.word	0x000230ec
    a77c:	000231ec 	.word	0x000231ec
    a780:	00023260 	.word	0x00023260
    a784:	000231c4 	.word	0x000231c4

0000a788 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)>:
    a788:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    a78c:	e0807101 	add	r7, r0, r1, lsl #2
    a790:	e5974018 	ldr	r4, [r7, #24]
    a794:	e24dd020 	sub	sp, sp, #32
    a798:	e3540000 	cmp	r4, #0
    a79c:	e1a05000 	mov	r5, r0
    a7a0:	e1a06001 	mov	r6, r1
    a7a4:	0a0000cd 	beq	aae0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x358>
    a7a8:	e1a00004 	mov	r0, r4
    a7ac:	eb000915 	bl	cc08 <CDWHCITransferStageData::GetURB() const>
    a7b0:	e2508000 	subs	r8, r0, #0
    a7b4:	0a0000ce 	beq	aaf4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x36c>
    a7b8:	e1a00004 	mov	r0, r4
    a7bc:	eb00072c 	bl	c474 <CDWHCITransferStageData::GetSubState() const>
    a7c0:	e3500000 	cmp	r0, #0
    a7c4:	0a00005f 	beq	a948 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x1c0>
    a7c8:	e3500001 	cmp	r0, #1
    a7cc:	0a00002e 	beq	a88c <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x104>
    a7d0:	e59f24a4 	ldr	r2, [pc, #1188]	; ac7c <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x4f4>
    a7d4:	e59f14a4 	ldr	r1, [pc, #1188]	; ac80 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x4f8>
    a7d8:	e59f04a4 	ldr	r0, [pc, #1188]	; ac84 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x4fc>
    a7dc:	eb003e5c 	bl	1a154 <assertion_failed>
    a7e0:	e1a00004 	mov	r0, r4
    a7e4:	eb00071e 	bl	c464 <CDWHCITransferStageData::GetState() const>
    a7e8:	e3500001 	cmp	r0, #1
    a7ec:	e1a09000 	mov	r9, r0
    a7f0:	0a000078 	beq	a9d8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x250>
    a7f4:	3a000068 	bcc	a99c <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x214>
    a7f8:	e3500002 	cmp	r0, #2
    a7fc:	1a000056 	bne	a95c <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x1d4>
    a800:	e1a00004 	mov	r0, r4
    a804:	eb0008d5 	bl	cb60 <CDWHCITransferStageData::GetTransactionStatus() const>
    a808:	e59f3478 	ldr	r3, [pc, #1144]	; ac88 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x500>
    a80c:	e1a09000 	mov	r9, r0
    a810:	e0033000 	and	r3, r3, r0
    a814:	e3530000 	cmp	r3, #0
    a818:	0a00007d 	beq	aa14 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x28c>
    a81c:	eb00483f 	bl	1c920 <CLogger::Get()>
    a820:	e59f1464 	ldr	r1, [pc, #1124]	; ac8c <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x504>
    a824:	e58d9000 	str	r9, [sp]
    a828:	e59f3460 	ldr	r3, [pc, #1120]	; ac90 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x508>
    a82c:	e3a02001 	mov	r2, #1
    a830:	eb0049e3 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    a834:	e3a01000 	mov	r1, #0
    a838:	e1a00008 	mov	r0, r8
    a83c:	eb000f16 	bl	e49c <CUSBRequest::SetStatus(int)>
    a840:	e1a01006 	mov	r1, r6
    a844:	e1a00005 	mov	r0, r5
    a848:	ebfffd38 	bl	9d30 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    a84c:	e3540000 	cmp	r4, #0
    a850:	0a000004 	beq	a868 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0xe0>
    a854:	e1a00004 	mov	r0, r4
    a858:	eb00066f 	bl	c21c <CDWHCITransferStageData::~CDWHCITransferStageData()>
    a85c:	e1a00004 	mov	r0, r4
    a860:	e3a01054 	mov	r1, #84	; 0x54
    a864:	eb000912 	bl	ccb4 <CDWHCITransferStageData::operator delete(void*, unsigned int)>
    a868:	e3a03000 	mov	r3, #0
    a86c:	e1a01006 	mov	r1, r6
    a870:	e1a00005 	mov	r0, r5
    a874:	e5873018 	str	r3, [r7, #24]
    a878:	ebffff09 	bl	a4a4 <CDWHCIDevice::FreeChannel(unsigned int)>
    a87c:	e1a00008 	mov	r0, r8
    a880:	eb000f4f 	bl	e5c4 <CUSBRequest::CallCompletionRoutine()>
    a884:	e28dd020 	add	sp, sp, #32
    a888:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    a88c:	e1a00004 	mov	r0, r4
    a890:	eb000846 	bl	c9b0 <CDWHCITransferStageData::GetDMAAddress() const>
    a894:	e1a09000 	mov	r9, r0
    a898:	e1a00004 	mov	r0, r4
    a89c:	eb000854 	bl	c9f4 <CDWHCITransferStageData::GetBytesToTransfer() const>
    a8a0:	e1a01000 	mov	r1, r0
    a8a4:	e1a00009 	mov	r0, r9
    a8a8:	eb005ba6 	bl	21748 <CleanAndInvalidateDataCacheRange>
    a8ac:	e59f13e0 	ldr	r1, [pc, #992]	; ac94 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x50c>
    a8b0:	e1a09286 	lsl	r9, r6, #5
    a8b4:	e0891001 	add	r1, r9, r1
    a8b8:	e28d0008 	add	r0, sp, #8
    a8bc:	eb000598 	bl	bf24 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a8c0:	e28d0008 	add	r0, sp, #8
    a8c4:	eb00059f 	bl	bf48 <CDWHCIRegister::Read()>
    a8c8:	e59f13c8 	ldr	r1, [pc, #968]	; ac98 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x510>
    a8cc:	e28d0014 	add	r0, sp, #20
    a8d0:	e0891001 	add	r1, r9, r1
    a8d4:	eb000592 	bl	bf24 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a8d8:	e28d0014 	add	r0, sp, #20
    a8dc:	eb000599 	bl	bf48 <CDWHCIRegister::Read()>
    a8e0:	e3500002 	cmp	r0, #2
    a8e4:	0a000087 	beq	ab08 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x380>
    a8e8:	e1a00004 	mov	r0, r4
    a8ec:	eb0006e6 	bl	c48c <CDWHCITransferStageData::IsPeriodic() const>
    a8f0:	e3500000 	cmp	r0, #0
    a8f4:	1a00001e 	bne	a974 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x1ec>
    a8f8:	e28d0014 	add	r0, sp, #20
    a8fc:	eb000591 	bl	bf48 <CDWHCIRegister::Read()>
    a900:	e1a0a000 	mov	sl, r0
    a904:	e28d0008 	add	r0, sp, #8
    a908:	eb0005a4 	bl	bfa0 <CDWHCIRegister::Get() const>
    a90c:	e1a09000 	mov	r9, r0
    a910:	e28d0008 	add	r0, sp, #8
    a914:	eb0005a1 	bl	bfa0 <CDWHCIRegister::Get() const>
    a918:	e59f237c 	ldr	r2, [pc, #892]	; ac9c <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x514>
    a91c:	e3c034ff 	bic	r3, r0, #-16777216	; 0xff000000
    a920:	e3c3373e 	bic	r3, r3, #16252928	; 0xf80000
    a924:	e1a0100a 	mov	r1, sl
    a928:	e00229a9 	and	r2, r2, r9, lsr #19
    a92c:	e1a00004 	mov	r0, r4
    a930:	eb00064c 	bl	c268 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)>
    a934:	e28d0014 	add	r0, sp, #20
    a938:	eb000581 	bl	bf44 <CDWHCIRegister::~CDWHCIRegister()>
    a93c:	e28d0008 	add	r0, sp, #8
    a940:	eb00057f 	bl	bf44 <CDWHCIRegister::~CDWHCIRegister()>
    a944:	eaffffa5 	b	a7e0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x58>
    a948:	e1a01004 	mov	r1, r4
    a94c:	e1a00005 	mov	r0, r5
    a950:	ebfffd13 	bl	9da4 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)>
    a954:	e28dd020 	add	sp, sp, #32
    a958:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    a95c:	e59f233c 	ldr	r2, [pc, #828]	; aca0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x518>
    a960:	e59f1318 	ldr	r1, [pc, #792]	; ac80 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x4f8>
    a964:	e59f0318 	ldr	r0, [pc, #792]	; ac84 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x4fc>
    a968:	eb003df9 	bl	1a154 <assertion_failed>
    a96c:	e28dd020 	add	sp, sp, #32
    a970:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    a974:	e28d0008 	add	r0, sp, #8
    a978:	eb000588 	bl	bfa0 <CDWHCIRegister::Get() const>
    a97c:	e2200206 	eor	r0, r0, #1610612736	; 0x60000000
    a980:	e3100206 	tst	r0, #1610612736	; 0x60000000
    a984:	1affffdb 	bne	a8f8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x170>
    a988:	e59f2314 	ldr	r2, [pc, #788]	; aca4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x51c>
    a98c:	e59f12ec 	ldr	r1, [pc, #748]	; ac80 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x4f8>
    a990:	e59f0310 	ldr	r0, [pc, #784]	; aca8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x520>
    a994:	eb003dee 	bl	1a154 <assertion_failed>
    a998:	eaffffd6 	b	a8f8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x170>
    a99c:	e1a00004 	mov	r0, r4
    a9a0:	eb00086e 	bl	cb60 <CDWHCITransferStageData::GetTransactionStatus() const>
    a9a4:	e59f92dc 	ldr	r9, [pc, #732]	; ac88 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x500>
    a9a8:	e1a0a000 	mov	sl, r0
    a9ac:	e0099000 	and	r9, r9, r0
    a9b0:	e3590000 	cmp	r9, #0
    a9b4:	1a00006e 	bne	ab74 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x3ec>
    a9b8:	e3100050 	tst	r0, #80	; 0x50
    a9bc:	1a000085 	bne	abd8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x450>
    a9c0:	e1a00004 	mov	r0, r4
    a9c4:	eb0007f7 	bl	c9a8 <CDWHCITransferStageData::IsStatusStage() const>
    a9c8:	e3500000 	cmp	r0, #0
    a9cc:	0a00009a 	beq	ac3c <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x4b4>
    a9d0:	e3a01001 	mov	r1, #1
    a9d4:	eaffff97 	b	a838 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0xb0>
    a9d8:	e1a00004 	mov	r0, r4
    a9dc:	eb00085f 	bl	cb60 <CDWHCITransferStageData::GetTransactionStatus() const>
    a9e0:	e59f32c4 	ldr	r3, [pc, #708]	; acac <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x524>
    a9e4:	e1a0a000 	mov	sl, r0
    a9e8:	e0033000 	and	r3, r3, r0
    a9ec:	e3530000 	cmp	r3, #0
    a9f0:	0a00002d 	beq	aaac <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x324>
    a9f4:	eb0047c9 	bl	1c920 <CLogger::Get()>
    a9f8:	e59f128c 	ldr	r1, [pc, #652]	; ac8c <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x504>
    a9fc:	e58da000 	str	sl, [sp]
    aa00:	e1a02009 	mov	r2, r9
    aa04:	e59f3284 	ldr	r3, [pc, #644]	; ac90 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x508>
    aa08:	eb00496d 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    aa0c:	e3a01000 	mov	r1, #0
    aa10:	eaffff88 	b	a838 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0xb0>
    aa14:	e1a00004 	mov	r0, r4
    aa18:	eb00088a 	bl	cc48 <CDWHCITransferStageData::GetFrameScheduler() const>
    aa1c:	e5903000 	ldr	r3, [r0]
    aa20:	e1a01009 	mov	r1, r9
    aa24:	e5933010 	ldr	r3, [r3, #16]
    aa28:	e12fff33 	blx	r3
    aa2c:	e1a00004 	mov	r0, r4
    aa30:	eb000884 	bl	cc48 <CDWHCITransferStageData::GetFrameScheduler() const>
    aa34:	e5903000 	ldr	r3, [r0]
    aa38:	e593300c 	ldr	r3, [r3, #12]
    aa3c:	e12fff33 	blx	r3
    aa40:	e3500000 	cmp	r0, #0
    aa44:	1a00005f 	bne	abc8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x440>
    aa48:	e1a00004 	mov	r0, r4
    aa4c:	eb000854 	bl	cba4 <CDWHCITransferStageData::IsStageComplete() const>
    aa50:	e2509000 	subs	r9, r0, #0
    aa54:	1a000033 	bne	ab28 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x3a0>
    aa58:	e1a00004 	mov	r0, r4
    aa5c:	eb000686 	bl	c47c <CDWHCITransferStageData::BeginSplitCycle()>
    aa60:	e2501000 	subs	r1, r0, #0
    aa64:	0affff73 	beq	a838 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0xb0>
    aa68:	e1a00004 	mov	r0, r4
    aa6c:	eb000686 	bl	c48c <CDWHCITransferStageData::IsPeriodic() const>
    aa70:	e250a000 	subs	sl, r0, #0
    aa74:	0a000048 	beq	ab9c <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x414>
    aa78:	e1a00004 	mov	r0, r4
    aa7c:	eb000851 	bl	cbc8 <CDWHCITransferStageData::IsTimeout() const>
    aa80:	e3500000 	cmp	r0, #0
    aa84:	0a000072 	beq	ac54 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x4cc>
    aa88:	e1a01006 	mov	r1, r6
    aa8c:	e1a00005 	mov	r0, r5
    aa90:	ebfffca6 	bl	9d30 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    aa94:	e1a01009 	mov	r1, r9
    aa98:	e1a00008 	mov	r0, r8
    aa9c:	eb000e7e 	bl	e49c <CUSBRequest::SetStatus(int)>
    aaa0:	e3540000 	cmp	r4, #0
    aaa4:	1affff6a 	bne	a854 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0xcc>
    aaa8:	eaffff6e 	b	a868 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0xe0>
    aaac:	e1a00004 	mov	r0, r4
    aab0:	eb000864 	bl	cc48 <CDWHCITransferStageData::GetFrameScheduler() const>
    aab4:	e5903000 	ldr	r3, [r0]
    aab8:	e1a0100a 	mov	r1, sl
    aabc:	e5933010 	ldr	r3, [r3, #16]
    aac0:	e12fff33 	blx	r3
    aac4:	e1a00004 	mov	r0, r4
    aac8:	e3a01002 	mov	r1, #2
    aacc:	eb000662 	bl	c45c <CDWHCITransferStageData::SetState(unsigned int)>
    aad0:	e1a01009 	mov	r1, r9
    aad4:	e1a00004 	mov	r0, r4
    aad8:	eb000651 	bl	c424 <CDWHCITransferStageData::SetSplitComplete(bool)>
    aadc:	eaffffd2 	b	aa2c <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x2a4>
    aae0:	e59f21c8 	ldr	r2, [pc, #456]	; acb0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x528>
    aae4:	e59f1194 	ldr	r1, [pc, #404]	; ac80 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x4f8>
    aae8:	e59f01c4 	ldr	r0, [pc, #452]	; acb4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x52c>
    aaec:	eb003d98 	bl	1a154 <assertion_failed>
    aaf0:	eaffff2c 	b	a7a8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x20>
    aaf4:	e59f21bc 	ldr	r2, [pc, #444]	; acb8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x530>
    aaf8:	e59f1180 	ldr	r1, [pc, #384]	; ac80 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x4f8>
    aafc:	e59f01b8 	ldr	r0, [pc, #440]	; acbc <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x534>
    ab00:	eb003d93 	bl	1a154 <assertion_failed>
    ab04:	eaffff2b 	b	a7b8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x30>
    ab08:	e1a01004 	mov	r1, r4
    ab0c:	e1a00005 	mov	r0, r5
    ab10:	ebfffd99 	bl	a17c <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>
    ab14:	e28d0014 	add	r0, sp, #20
    ab18:	eb000509 	bl	bf44 <CDWHCIRegister::~CDWHCIRegister()>
    ab1c:	e28d0008 	add	r0, sp, #8
    ab20:	eb000507 	bl	bf44 <CDWHCIRegister::~CDWHCIRegister()>
    ab24:	eaffff8a 	b	a954 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x1cc>
    ab28:	e1a01006 	mov	r1, r6
    ab2c:	e1a00005 	mov	r0, r5
    ab30:	ebfffc7e 	bl	9d30 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    ab34:	e1a00004 	mov	r0, r4
    ab38:	eb00079a 	bl	c9a8 <CDWHCITransferStageData::IsStatusStage() const>
    ab3c:	e3500000 	cmp	r0, #0
    ab40:	0a000005 	beq	ab5c <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x3d4>
    ab44:	e3a01001 	mov	r1, #1
    ab48:	e1a00008 	mov	r0, r8
    ab4c:	eb000e52 	bl	e49c <CUSBRequest::SetStatus(int)>
    ab50:	e3540000 	cmp	r4, #0
    ab54:	1affff3e 	bne	a854 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0xcc>
    ab58:	eaffff42 	b	a868 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0xe0>
    ab5c:	e1a00004 	mov	r0, r4
    ab60:	eb000813 	bl	cbb4 <CDWHCITransferStageData::GetResultLen() const>
    ab64:	e1a01000 	mov	r1, r0
    ab68:	e1a00008 	mov	r0, r8
    ab6c:	eb000e4c 	bl	e4a4 <CUSBRequest::SetResultLen(unsigned int)>
    ab70:	eafffff3 	b	ab44 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x3bc>
    ab74:	eb004769 	bl	1c920 <CLogger::Get()>
    ab78:	e58da000 	str	sl, [sp]
    ab7c:	e59f310c 	ldr	r3, [pc, #268]	; ac90 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x508>
    ab80:	e3a02001 	mov	r2, #1
    ab84:	e59f1100 	ldr	r1, [pc, #256]	; ac8c <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x504>
    ab88:	eb00490d 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ab8c:	e3a01000 	mov	r1, #0
    ab90:	e1a00008 	mov	r0, r8
    ab94:	eb000e40 	bl	e49c <CUSBRequest::SetStatus(int)>
    ab98:	eaffff28 	b	a840 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0xb8>
    ab9c:	e3a01001 	mov	r1, #1
    aba0:	e1a00004 	mov	r0, r4
    aba4:	eb00062c 	bl	c45c <CDWHCITransferStageData::SetState(unsigned int)>
    aba8:	e1a0100a 	mov	r1, sl
    abac:	e1a00004 	mov	r0, r4
    abb0:	eb00061b 	bl	c424 <CDWHCITransferStageData::SetSplitComplete(bool)>
    abb4:	e1a00004 	mov	r0, r4
    abb8:	eb000822 	bl	cc48 <CDWHCITransferStageData::GetFrameScheduler() const>
    abbc:	e5903000 	ldr	r3, [r0]
    abc0:	e5933008 	ldr	r3, [r3, #8]
    abc4:	e12fff33 	blx	r3
    abc8:	e1a01004 	mov	r1, r4
    abcc:	e1a00005 	mov	r0, r5
    abd0:	ebfffd69 	bl	a17c <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>
    abd4:	eaffff5e 	b	a954 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x1cc>
    abd8:	e1a00004 	mov	r0, r4
    abdc:	eb00062a 	bl	c48c <CDWHCITransferStageData::IsPeriodic() const>
    abe0:	e3500000 	cmp	r0, #0
    abe4:	0affff75 	beq	a9c0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x238>
    abe8:	e1a00004 	mov	r0, r4
    abec:	eb0007f5 	bl	cbc8 <CDWHCITransferStageData::IsTimeout() const>
    abf0:	e3500000 	cmp	r0, #0
    abf4:	1affffe4 	bne	ab8c <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x404>
    abf8:	e3a01003 	mov	r1, #3
    abfc:	e1a00004 	mov	r0, r4
    ac00:	eb000615 	bl	c45c <CDWHCITransferStageData::SetState(unsigned int)>
    ac04:	e1a00008 	mov	r0, r8
    ac08:	eb000e13 	bl	e45c <CUSBRequest::GetEndpoint() const>
    ac0c:	eb000d04 	bl	e024 <CUSBEndpoint::GetInterval() const>
    ac10:	e3a01064 	mov	r1, #100	; 0x64
    ac14:	e0010091 	mul	r1, r1, r0
    ac18:	e59f30a0 	ldr	r3, [pc, #160]	; acc0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x538>
    ac1c:	e0813391 	umull	r3, r1, r1, r3
    ac20:	e5950008 	ldr	r0, [r5, #8]
    ac24:	e1a03004 	mov	r3, r4
    ac28:	e58d5000 	str	r5, [sp]
    ac2c:	e1a01321 	lsr	r1, r1, #6
    ac30:	e59f208c 	ldr	r2, [pc, #140]	; acc4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x53c>
    ac34:	eb00548e 	bl	1fe74 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
    ac38:	eaffff45 	b	a954 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x1cc>
    ac3c:	e1a00004 	mov	r0, r4
    ac40:	eb0007db 	bl	cbb4 <CDWHCITransferStageData::GetResultLen() const>
    ac44:	e1a01000 	mov	r1, r0
    ac48:	e1a00008 	mov	r0, r8
    ac4c:	eb000e14 	bl	e4a4 <CUSBRequest::SetResultLen(unsigned int)>
    ac50:	eaffff5e 	b	a9d0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x248>
    ac54:	e3a01003 	mov	r1, #3
    ac58:	e1a00004 	mov	r0, r4
    ac5c:	eb0005fe 	bl	c45c <CDWHCITransferStageData::SetState(unsigned int)>
    ac60:	e1a00008 	mov	r0, r8
    ac64:	eb000dfc 	bl	e45c <CUSBRequest::GetEndpoint() const>
    ac68:	eb000ced 	bl	e024 <CUSBEndpoint::GetInterval() const>
    ac6c:	e3a03064 	mov	r3, #100	; 0x64
    ac70:	e59f1048 	ldr	r1, [pc, #72]	; acc0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x538>
    ac74:	e0030093 	mul	r3, r3, r0
    ac78:	eaffffe7 	b	ac1c <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x494>
    ac7c:	000003a1 	.word	0x000003a1
    ac80:	000230ec 	.word	0x000230ec
    ac84:	000239a8 	.word	0x000239a8
    ac88:	0000078c 	.word	0x0000078c
    ac8c:	000230e0 	.word	0x000230e0
    ac90:	000232f0 	.word	0x000232f0
    ac94:	20980510 	.word	0x20980510
    ac98:	20980508 	.word	0x20980508
    ac9c:	000003ff 	.word	0x000003ff
    aca0:	00000482 	.word	0x00000482
    aca4:	00000399 	.word	0x00000399
    aca8:	00023278 	.word	0x00023278
    acac:	000007dc 	.word	0x000007dc
    acb0:	00000377 	.word	0x00000377
    acb4:	00023138 	.word	0x00023138
    acb8:	00000379 	.word	0x00000379
    acbc:	000231c4 	.word	0x000231c4
    acc0:	10624dd3 	.word	0x10624dd3
    acc4:	0000a35c 	.word	0x0000a35c

0000acc8 <CDWHCIDevice::InterruptHandler()>:
    acc8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    accc:	e1a07000 	mov	r7, r0
    acd0:	e24dd028 	sub	sp, sp, #40	; 0x28
    acd4:	e3a04000 	mov	r4, #0
    acd8:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
    acdc:	e59f10d8 	ldr	r1, [pc, #216]	; adbc <CDWHCIDevice::InterruptHandler()+0xf4>
    ace0:	e28d0004 	add	r0, sp, #4
    ace4:	eb00048e 	bl	bf24 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    ace8:	e28d0004 	add	r0, sp, #4
    acec:	eb000495 	bl	bf48 <CDWHCIRegister::Read()>
    acf0:	e28d0004 	add	r0, sp, #4
    acf4:	eb0004a9 	bl	bfa0 <CDWHCIRegister::Get() const>
    acf8:	e3100402 	tst	r0, #33554432	; 0x2000000
    acfc:	1a000007 	bne	ad20 <CDWHCIDevice::InterruptHandler()+0x58>
    ad00:	e28d0004 	add	r0, sp, #4
    ad04:	eb000496 	bl	bf64 <CDWHCIRegister::Write()>
    ad08:	e3a03000 	mov	r3, #0
    ad0c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    ad10:	e28d0004 	add	r0, sp, #4
    ad14:	eb00048a 	bl	bf44 <CDWHCIRegister::~CDWHCIRegister()>
    ad18:	e28dd028 	add	sp, sp, #40	; 0x28
    ad1c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ad20:	e59f1098 	ldr	r1, [pc, #152]	; adc0 <CDWHCIDevice::InterruptHandler()+0xf8>
    ad24:	e28d0010 	add	r0, sp, #16
    ad28:	eb00047d 	bl	bf24 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    ad2c:	e28d0010 	add	r0, sp, #16
    ad30:	eb000484 	bl	bf48 <CDWHCIRegister::Read()>
    ad34:	e28d0010 	add	r0, sp, #16
    ad38:	eb000489 	bl	bf64 <CDWHCIRegister::Write()>
    ad3c:	e597300c 	ldr	r3, [r7, #12]
    ad40:	e1530004 	cmp	r3, r4
    ad44:	0a000019 	beq	adb0 <CDWHCIDevice::InterruptHandler()+0xe8>
    ad48:	e3a05001 	mov	r5, #1
    ad4c:	e1a08004 	mov	r8, r4
    ad50:	e59f606c 	ldr	r6, [pc, #108]	; adc4 <CDWHCIDevice::InterruptHandler()+0xfc>
    ad54:	ea000005 	b	ad70 <CDWHCIDevice::InterruptHandler()+0xa8>
    ad58:	e597300c 	ldr	r3, [r7, #12]
    ad5c:	e2844001 	add	r4, r4, #1
    ad60:	e1530004 	cmp	r3, r4
    ad64:	e1a05085 	lsl	r5, r5, #1
    ad68:	e2866020 	add	r6, r6, #32
    ad6c:	9a00000f 	bls	adb0 <CDWHCIDevice::InterruptHandler()+0xe8>
    ad70:	e28d0010 	add	r0, sp, #16
    ad74:	eb000489 	bl	bfa0 <CDWHCIRegister::Get() const>
    ad78:	e1100005 	tst	r0, r5
    ad7c:	0afffff5 	beq	ad58 <CDWHCIDevice::InterruptHandler()+0x90>
    ad80:	e1a02008 	mov	r2, r8
    ad84:	e1a01006 	mov	r1, r6
    ad88:	e28d001c 	add	r0, sp, #28
    ad8c:	eb000468 	bl	bf34 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    ad90:	e28d001c 	add	r0, sp, #28
    ad94:	eb000472 	bl	bf64 <CDWHCIRegister::Write()>
    ad98:	e1a00007 	mov	r0, r7
    ad9c:	e1a01004 	mov	r1, r4
    ada0:	ebfffe78 	bl	a788 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)>
    ada4:	e28d001c 	add	r0, sp, #28
    ada8:	eb000465 	bl	bf44 <CDWHCIRegister::~CDWHCIRegister()>
    adac:	eaffffe9 	b	ad58 <CDWHCIDevice::InterruptHandler()+0x90>
    adb0:	e28d0010 	add	r0, sp, #16
    adb4:	eb000462 	bl	bf44 <CDWHCIRegister::~CDWHCIRegister()>
    adb8:	eaffffd0 	b	ad00 <CDWHCIDevice::InterruptHandler()+0x38>
    adbc:	20980014 	.word	0x20980014
    adc0:	20980414 	.word	0x20980414
    adc4:	2098050c 	.word	0x2098050c

0000adc8 <CDWHCIDevice::InterruptStub(void*)>:
    adc8:	e92d4010 	push	{r4, lr}
    adcc:	e2504000 	subs	r4, r0, #0
    add0:	0a000002 	beq	ade0 <CDWHCIDevice::InterruptStub(void*)+0x18>
    add4:	e1a00004 	mov	r0, r4
    add8:	e8bd4010 	pop	{r4, lr}
    addc:	eaffffb9 	b	acc8 <CDWHCIDevice::InterruptHandler()>
    ade0:	e59f0014 	ldr	r0, [pc, #20]	; adfc <CDWHCIDevice::InterruptStub(void*)+0x34>
    ade4:	e59f2014 	ldr	r2, [pc, #20]	; ae00 <CDWHCIDevice::InterruptStub(void*)+0x38>
    ade8:	e59f1014 	ldr	r1, [pc, #20]	; ae04 <CDWHCIDevice::InterruptStub(void*)+0x3c>
    adec:	eb003cd8 	bl	1a154 <assertion_failed>
    adf0:	e1a00004 	mov	r0, r4
    adf4:	e8bd4010 	pop	{r4, lr}
    adf8:	eaffffb2 	b	acc8 <CDWHCIDevice::InterruptHandler()>
    adfc:	00022ebc 	.word	0x00022ebc
    ae00:	000004e3 	.word	0x000004e3
    ae04:	000230ec 	.word	0x000230ec

0000ae08 <CDWHCIDevice::AllocateWaitBlock()>:
    ae08:	e92d4070 	push	{r4, r5, r6, lr}
    ae0c:	e1a05000 	mov	r5, r0
    ae10:	e5900070 	ldr	r0, [r0, #112]	; 0x70
    ae14:	e3500000 	cmp	r0, #0
    ae18:	1a000014 	bne	ae70 <CDWHCIDevice::AllocateWaitBlock()+0x68>
    ae1c:	e3a04000 	mov	r4, #0
    ae20:	e3a03001 	mov	r3, #1
    ae24:	e595206c 	ldr	r2, [r5, #108]	; 0x6c
    ae28:	e1120003 	tst	r2, r3
    ae2c:	0a000007 	beq	ae50 <CDWHCIDevice::AllocateWaitBlock()+0x48>
    ae30:	e2844001 	add	r4, r4, #1
    ae34:	e3540010 	cmp	r4, #16
    ae38:	e1a03083 	lsl	r3, r3, #1
    ae3c:	1afffff8 	bne	ae24 <CDWHCIDevice::AllocateWaitBlock()+0x1c>
    ae40:	e3500000 	cmp	r0, #0
    ae44:	1a000006 	bne	ae64 <CDWHCIDevice::AllocateWaitBlock()+0x5c>
    ae48:	e1a00004 	mov	r0, r4
    ae4c:	e8bd8070 	pop	{r4, r5, r6, pc}
    ae50:	e595206c 	ldr	r2, [r5, #108]	; 0x6c
    ae54:	e3500000 	cmp	r0, #0
    ae58:	e1823003 	orr	r3, r2, r3
    ae5c:	e585306c 	str	r3, [r5, #108]	; 0x6c
    ae60:	0afffff8 	beq	ae48 <CDWHCIDevice::AllocateWaitBlock()+0x40>
    ae64:	eb005a21 	bl	216f0 <LeaveCritical>
    ae68:	e1a00004 	mov	r0, r4
    ae6c:	e8bd8070 	pop	{r4, r5, r6, pc}
    ae70:	eb0059f1 	bl	2163c <EnterCritical>
    ae74:	e5950070 	ldr	r0, [r5, #112]	; 0x70
    ae78:	eaffffe7 	b	ae1c <CDWHCIDevice::AllocateWaitBlock()+0x14>

0000ae7c <CDWHCIDevice::FreeWaitBlock(unsigned int)>:
    ae7c:	e351000f 	cmp	r1, #15
    ae80:	e92d4070 	push	{r4, r5, r6, lr}
    ae84:	e1a06001 	mov	r6, r1
    ae88:	e1a04000 	mov	r4, r0
    ae8c:	8a000016 	bhi	aeec <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x70>
    ae90:	e3a05001 	mov	r5, #1
    ae94:	e5940070 	ldr	r0, [r4, #112]	; 0x70
    ae98:	e1a05615 	lsl	r5, r5, r6
    ae9c:	e3500000 	cmp	r0, #0
    aea0:	1a00000f 	bne	aee4 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x68>
    aea4:	e594306c 	ldr	r3, [r4, #108]	; 0x6c
    aea8:	e1150003 	tst	r5, r3
    aeac:	0a000007 	beq	aed0 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x54>
    aeb0:	e594306c 	ldr	r3, [r4, #108]	; 0x6c
    aeb4:	e5942070 	ldr	r2, [r4, #112]	; 0x70
    aeb8:	e1c35005 	bic	r5, r3, r5
    aebc:	e3520000 	cmp	r2, #0
    aec0:	e584506c 	str	r5, [r4, #108]	; 0x6c
    aec4:	08bd8070 	popeq	{r4, r5, r6, pc}
    aec8:	e8bd4070 	pop	{r4, r5, r6, lr}
    aecc:	ea005a07 	b	216f0 <LeaveCritical>
    aed0:	e59f2028 	ldr	r2, [pc, #40]	; af00 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x84>
    aed4:	e59f1028 	ldr	r1, [pc, #40]	; af04 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x88>
    aed8:	e59f0028 	ldr	r0, [pc, #40]	; af08 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x8c>
    aedc:	eb003c9c 	bl	1a154 <assertion_failed>
    aee0:	eafffff2 	b	aeb0 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x34>
    aee4:	eb0059d4 	bl	2163c <EnterCritical>
    aee8:	eaffffed 	b	aea4 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x28>
    aeec:	e59f2018 	ldr	r2, [pc, #24]	; af0c <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x90>
    aef0:	e59f100c 	ldr	r1, [pc, #12]	; af04 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x88>
    aef4:	e59f0014 	ldr	r0, [pc, #20]	; af10 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x94>
    aef8:	eb003c95 	bl	1a154 <assertion_failed>
    aefc:	eaffffe3 	b	ae90 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x14>
    af00:	00000553 	.word	0x00000553
    af04:	000230ec 	.word	0x000230ec
    af08:	00023314 	.word	0x00023314
    af0c:	0000054e 	.word	0x0000054e
    af10:	000230fc 	.word	0x000230fc

0000af14 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>:
    af14:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    af18:	e24dd00c 	sub	sp, sp, #12
    af1c:	e1a08002 	mov	r8, r2
    af20:	e1a07001 	mov	r7, r1
    af24:	e1a09003 	mov	r9, r3
    af28:	e1a06000 	mov	r6, r0
    af2c:	ebffffb5 	bl	ae08 <CDWHCIDevice::AllocateWaitBlock()>
    af30:	e350000f 	cmp	r0, #15
    af34:	83a08000 	movhi	r8, #0
    af38:	8a000020 	bhi	afc0 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0xac>
    af3c:	e3570000 	cmp	r7, #0
    af40:	e1a05000 	mov	r5, r0
    af44:	0a00002c 	beq	affc <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0xe8>
    af48:	e1a03006 	mov	r3, r6
    af4c:	e1a02005 	mov	r2, r5
    af50:	e59f10b8 	ldr	r1, [pc, #184]	; b010 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0xfc>
    af54:	e1a00007 	mov	r0, r7
    af58:	e0864005 	add	r4, r6, r5
    af5c:	eb000d8d 	bl	e598 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
    af60:	e5d4305c 	ldrb	r3, [r4, #92]	; 0x5c
    af64:	e3530000 	cmp	r3, #0
    af68:	1a000017 	bne	afcc <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0xb8>
    af6c:	e3a01001 	mov	r1, #1
    af70:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
    af74:	e1a02008 	mov	r2, r8
    af78:	e58d3000 	str	r3, [sp]
    af7c:	e1a00006 	mov	r0, r6
    af80:	e5c4105c 	strb	r1, [r4, #92]	; 0x5c
    af84:	e1a03009 	mov	r3, r9
    af88:	e1a01007 	mov	r1, r7
    af8c:	ebfffd6b 	bl	a540 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)>
    af90:	e2508000 	subs	r8, r0, #0
    af94:	0a000011 	beq	afe0 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0xcc>
    af98:	e5d4305c 	ldrb	r3, [r4, #92]	; 0x5c
    af9c:	e3530000 	cmp	r3, #0
    afa0:	1afffffc 	bne	af98 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x84>
    afa4:	e1a01005 	mov	r1, r5
    afa8:	e1a00006 	mov	r0, r6
    afac:	ebffffb2 	bl	ae7c <CDWHCIDevice::FreeWaitBlock(unsigned int)>
    afb0:	e1a00007 	mov	r0, r7
    afb4:	eb000d3c 	bl	e4ac <CUSBRequest::GetStatus() const>
    afb8:	e2908000 	adds	r8, r0, #0
    afbc:	13a08001 	movne	r8, #1
    afc0:	e1a00008 	mov	r0, r8
    afc4:	e28dd00c 	add	sp, sp, #12
    afc8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    afcc:	e59f2040 	ldr	r2, [pc, #64]	; b014 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x100>
    afd0:	e59f1040 	ldr	r1, [pc, #64]	; b018 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x104>
    afd4:	e59f0040 	ldr	r0, [pc, #64]	; b01c <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x108>
    afd8:	eb003c5d 	bl	1a154 <assertion_failed>
    afdc:	eaffffe2 	b	af6c <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x58>
    afe0:	e1a00006 	mov	r0, r6
    afe4:	e5c4805c 	strb	r8, [r4, #92]	; 0x5c
    afe8:	e1a01005 	mov	r1, r5
    afec:	ebffffa2 	bl	ae7c <CDWHCIDevice::FreeWaitBlock(unsigned int)>
    aff0:	e1a00008 	mov	r0, r8
    aff4:	e28dd00c 	add	sp, sp, #12
    aff8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    affc:	e59f201c 	ldr	r2, [pc, #28]	; b020 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x10c>
    b000:	e59f1010 	ldr	r1, [pc, #16]	; b018 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x104>
    b004:	e59f0018 	ldr	r0, [pc, #24]	; b024 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x110>
    b008:	eb003c51 	bl	1a154 <assertion_failed>
    b00c:	eaffffcd 	b	af48 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x34>
    b010:	0000989c 	.word	0x0000989c
    b014:	0000024e 	.word	0x0000024e
    b018:	000230ec 	.word	0x000230ec
    b01c:	0002333c 	.word	0x0002333c
    b020:	0000024b 	.word	0x0000024b
    b024:	000231c4 	.word	0x000231c4

0000b028 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)>:
    b028:	e92d4070 	push	{r4, r5, r6, lr}
    b02c:	e3a03000 	mov	r3, #0
    b030:	e24dd008 	sub	sp, sp, #8
    b034:	e1a05000 	mov	r5, r0
    b038:	e1a04001 	mov	r4, r1
    b03c:	e1a06002 	mov	r6, r2
    b040:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    b044:	e1510003 	cmp	r1, r3
    b048:	0a00008e 	beq	b288 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x260>
    b04c:	e3a01000 	mov	r1, #0
    b050:	e1a00004 	mov	r0, r4
    b054:	eb000d10 	bl	e49c <CUSBRequest::SetStatus(int)>
    b058:	e1a00004 	mov	r0, r4
    b05c:	eb000cfe 	bl	e45c <CUSBRequest::GetEndpoint() const>
    b060:	eb000be7 	bl	e004 <CUSBEndpoint::GetType() const>
    b064:	e3500000 	cmp	r0, #0
    b068:	1a000035 	bne	b144 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x11c>
    b06c:	e3560000 	cmp	r6, #0
    b070:	1a000054 	bne	b1c8 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x1a0>
    b074:	e1a00004 	mov	r0, r4
    b078:	eb000d1a 	bl	e4e8 <CUSBRequest::GetSetupData()>
    b07c:	e2506000 	subs	r6, r0, #0
    b080:	0a00008a 	beq	b2b0 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x288>
    b084:	e1d630d0 	ldrsb	r3, [r6]
    b088:	e1a00004 	mov	r0, r4
    b08c:	e3530000 	cmp	r3, #0
    b090:	ba00005a 	blt	b200 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x1d8>
    b094:	eb000d3d 	bl	e590 <CUSBRequest::GetBufLen() const>
    b098:	e2506000 	subs	r6, r0, #0
    b09c:	1a00000a 	bne	b0cc <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa4>
    b0a0:	e58d6000 	str	r6, [sp]
    b0a4:	e1a03006 	mov	r3, r6
    b0a8:	e1a02006 	mov	r2, r6
    b0ac:	e1a01004 	mov	r1, r4
    b0b0:	e1a00005 	mov	r0, r5
    b0b4:	ebffff96 	bl	af14 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    b0b8:	e3500000 	cmp	r0, #0
    b0bc:	1a000046 	bne	b1dc <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x1b4>
    b0c0:	e3a00000 	mov	r0, #0
    b0c4:	e28dd008 	add	sp, sp, #8
    b0c8:	e8bd8070 	pop	{r4, r5, r6, pc}
    b0cc:	e3a06000 	mov	r6, #0
    b0d0:	e1a01004 	mov	r1, r4
    b0d4:	e58d6000 	str	r6, [sp]
    b0d8:	e1a03006 	mov	r3, r6
    b0dc:	e1a02006 	mov	r2, r6
    b0e0:	e1a00005 	mov	r0, r5
    b0e4:	ebffff8a 	bl	af14 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    b0e8:	e1500006 	cmp	r0, r6
    b0ec:	0afffff3 	beq	b0c0 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x98>
    b0f0:	e58d6000 	str	r6, [sp]
    b0f4:	e1a03006 	mov	r3, r6
    b0f8:	e1a02006 	mov	r2, r6
    b0fc:	e1a01004 	mov	r1, r4
    b100:	e1a00005 	mov	r0, r5
    b104:	ebffff82 	bl	af14 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    b108:	e1500006 	cmp	r0, r6
    b10c:	0affffeb 	beq	b0c0 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x98>
    b110:	e3a03001 	mov	r3, #1
    b114:	e58d6000 	str	r6, [sp]
    b118:	e1a01004 	mov	r1, r4
    b11c:	e1a00005 	mov	r0, r5
    b120:	e1a02003 	mov	r2, r3
    b124:	ebffff7a 	bl	af14 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    b128:	e1500006 	cmp	r0, r6
    b12c:	0affffe3 	beq	b0c0 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x98>
    b130:	e3a03000 	mov	r3, #0
    b134:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    b138:	e3a00001 	mov	r0, #1
    b13c:	e28dd008 	add	sp, sp, #8
    b140:	e8bd8070 	pop	{r4, r5, r6, pc}
    b144:	e1a00004 	mov	r0, r4
    b148:	eb000cc3 	bl	e45c <CUSBRequest::GetEndpoint() const>
    b14c:	eb000bac 	bl	e004 <CUSBEndpoint::GetType() const>
    b150:	e3500001 	cmp	r0, #1
    b154:	0a000008 	beq	b17c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x154>
    b158:	e1a00004 	mov	r0, r4
    b15c:	eb000cbe 	bl	e45c <CUSBRequest::GetEndpoint() const>
    b160:	eb000ba7 	bl	e004 <CUSBEndpoint::GetType() const>
    b164:	e3500002 	cmp	r0, #2
    b168:	0a000003 	beq	b17c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x154>
    b16c:	e3a020d4 	mov	r2, #212	; 0xd4
    b170:	e59f114c 	ldr	r1, [pc, #332]	; b2c4 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x29c>
    b174:	e59f014c 	ldr	r0, [pc, #332]	; b2c8 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x2a0>
    b178:	eb003bf5 	bl	1a154 <assertion_failed>
    b17c:	e1a00004 	mov	r0, r4
    b180:	eb000d02 	bl	e590 <CUSBRequest::GetBufLen() const>
    b184:	e3500000 	cmp	r0, #0
    b188:	0a000039 	beq	b274 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x24c>
    b18c:	e1a00004 	mov	r0, r4
    b190:	eb000cb1 	bl	e45c <CUSBRequest::GetEndpoint() const>
    b194:	eb000b9c 	bl	e00c <CUSBEndpoint::IsDirectionIn() const>
    b198:	e58d6000 	str	r6, [sp]
    b19c:	e1a02000 	mov	r2, r0
    b1a0:	e1a01004 	mov	r1, r4
    b1a4:	e1a00005 	mov	r0, r5
    b1a8:	e3a03000 	mov	r3, #0
    b1ac:	ebffff58 	bl	af14 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    b1b0:	e3500000 	cmp	r0, #0
    b1b4:	0affffc1 	beq	b0c0 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x98>
    b1b8:	e3a03000 	mov	r3, #0
    b1bc:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    b1c0:	e3a00001 	mov	r0, #1
    b1c4:	eaffffdc 	b	b13c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x114>
    b1c8:	e3a020ac 	mov	r2, #172	; 0xac
    b1cc:	e59f10f0 	ldr	r1, [pc, #240]	; b2c4 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x29c>
    b1d0:	e59f00f4 	ldr	r0, [pc, #244]	; b2cc <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x2a4>
    b1d4:	eb003bde 	bl	1a154 <assertion_failed>
    b1d8:	eaffffa5 	b	b074 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x4c>
    b1dc:	e3a03001 	mov	r3, #1
    b1e0:	e58d6000 	str	r6, [sp]
    b1e4:	e1a01004 	mov	r1, r4
    b1e8:	e1a00005 	mov	r0, r5
    b1ec:	e1a02003 	mov	r2, r3
    b1f0:	ebffff47 	bl	af14 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    b1f4:	e3500000 	cmp	r0, #0
    b1f8:	1affffcc 	bne	b130 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x108>
    b1fc:	eaffffaf 	b	b0c0 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x98>
    b200:	eb000ce2 	bl	e590 <CUSBRequest::GetBufLen() const>
    b204:	e3500000 	cmp	r0, #0
    b208:	0a000023 	beq	b29c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x274>
    b20c:	e3a06000 	mov	r6, #0
    b210:	e1a01004 	mov	r1, r4
    b214:	e58d6000 	str	r6, [sp]
    b218:	e1a03006 	mov	r3, r6
    b21c:	e1a02006 	mov	r2, r6
    b220:	e1a00005 	mov	r0, r5
    b224:	ebffff3a 	bl	af14 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    b228:	e1500006 	cmp	r0, r6
    b22c:	0affffa3 	beq	b0c0 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x98>
    b230:	e58d6000 	str	r6, [sp]
    b234:	e1a03006 	mov	r3, r6
    b238:	e3a02001 	mov	r2, #1
    b23c:	e1a01004 	mov	r1, r4
    b240:	e1a00005 	mov	r0, r5
    b244:	ebffff32 	bl	af14 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    b248:	e3500000 	cmp	r0, #0
    b24c:	0affff9b 	beq	b0c0 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x98>
    b250:	e58d6000 	str	r6, [sp]
    b254:	e1a02006 	mov	r2, r6
    b258:	e1a01004 	mov	r1, r4
    b25c:	e1a00005 	mov	r0, r5
    b260:	e3a03001 	mov	r3, #1
    b264:	ebffff2a 	bl	af14 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    b268:	e3500000 	cmp	r0, #0
    b26c:	0affff93 	beq	b0c0 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x98>
    b270:	eaffffae 	b	b130 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x108>
    b274:	e3a020d5 	mov	r2, #213	; 0xd5
    b278:	e59f1044 	ldr	r1, [pc, #68]	; b2c4 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x29c>
    b27c:	e59f004c 	ldr	r0, [pc, #76]	; b2d0 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x2a8>
    b280:	eb003bb3 	bl	1a154 <assertion_failed>
    b284:	eaffffc0 	b	b18c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x164>
    b288:	e3a020a6 	mov	r2, #166	; 0xa6
    b28c:	e59f1030 	ldr	r1, [pc, #48]	; b2c4 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x29c>
    b290:	e59f003c 	ldr	r0, [pc, #60]	; b2d4 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x2ac>
    b294:	eb003bae 	bl	1a154 <assertion_failed>
    b298:	eaffff6b 	b	b04c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x24>
    b29c:	e3a020b3 	mov	r2, #179	; 0xb3
    b2a0:	e59f101c 	ldr	r1, [pc, #28]	; b2c4 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x29c>
    b2a4:	e59f0024 	ldr	r0, [pc, #36]	; b2d0 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x2a8>
    b2a8:	eb003ba9 	bl	1a154 <assertion_failed>
    b2ac:	eaffffd6 	b	b20c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x1e4>
    b2b0:	e3a020af 	mov	r2, #175	; 0xaf
    b2b4:	e59f1008 	ldr	r1, [pc, #8]	; b2c4 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x29c>
    b2b8:	e59f0018 	ldr	r0, [pc, #24]	; b2d8 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x2b0>
    b2bc:	eb003ba4 	bl	1a154 <assertion_failed>
    b2c0:	eaffff6f 	b	b084 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x5c>
    b2c4:	000230ec 	.word	0x000230ec
    b2c8:	000231ec 	.word	0x000231ec
    b2cc:	00023354 	.word	0x00023354
    b2d0:	00023260 	.word	0x00023260
    b2d4:	000231c4 	.word	0x000231c4
    b2d8:	00023374 	.word	0x00023374

0000b2dc <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>:
    b2dc:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b2e0:	e2516000 	subs	r6, r1, #0
    b2e4:	e1a08000 	mov	r8, r0
    b2e8:	e1a05002 	mov	r5, r2
    b2ec:	e1a09003 	mov	r9, r3
    b2f0:	e59d4028 	ldr	r4, [sp, #40]	; 0x28
    b2f4:	0a00002b 	beq	b3a8 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xcc>
    b2f8:	e3550000 	cmp	r5, #0
    b2fc:	0a000024 	beq	b394 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xb8>
    b300:	e3540000 	cmp	r4, #0
    b304:	0a00001d 	beq	b380 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xa4>
    b308:	e3a07001 	mov	r7, #1
    b30c:	e59fb0a8 	ldr	fp, [pc, #168]	; b3bc <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xe0>
    b310:	e029a007 	eor	sl, r9, r7
    b314:	ea000003 	b	b328 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x4c>
    b318:	e1a00007 	mov	r0, r7
    b31c:	eb00546a 	bl	204cc <CTimer::SimpleMsDelay(unsigned int)>
    b320:	e2544001 	subs	r4, r4, #1
    b324:	0a000011 	beq	b370 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x94>
    b328:	e1a00006 	mov	r0, r6
    b32c:	eb000305 	bl	bf48 <CDWHCIRegister::Read()>
    b330:	e1150000 	tst	r5, r0
    b334:	11a0300a 	movne	r3, sl
    b338:	01a03009 	moveq	r3, r9
    b33c:	e3530000 	cmp	r3, #0
    b340:	0a00000c 	beq	b378 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x9c>
    b344:	e5983008 	ldr	r3, [r8, #8]
    b348:	e3530000 	cmp	r3, #0
    b34c:	1afffff1 	bne	b318 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x3c>
    b350:	e1a0200b 	mov	r2, fp
    b354:	e59f1064 	ldr	r1, [pc, #100]	; b3c0 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xe4>
    b358:	e59f0064 	ldr	r0, [pc, #100]	; b3c4 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xe8>
    b35c:	eb003b7c 	bl	1a154 <assertion_failed>
    b360:	e1a00007 	mov	r0, r7
    b364:	eb005458 	bl	204cc <CTimer::SimpleMsDelay(unsigned int)>
    b368:	e2544001 	subs	r4, r4, #1
    b36c:	1affffed 	bne	b328 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x4c>
    b370:	e1a00004 	mov	r0, r4
    b374:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b378:	e3a00001 	mov	r0, #1
    b37c:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b380:	e3a02e56 	mov	r2, #1376	; 0x560
    b384:	e59f1034 	ldr	r1, [pc, #52]	; b3c0 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xe4>
    b388:	e59f0038 	ldr	r0, [pc, #56]	; b3c8 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xec>
    b38c:	eb003b70 	bl	1a154 <assertion_failed>
    b390:	eaffffdc 	b	b308 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x2c>
    b394:	e59f2030 	ldr	r2, [pc, #48]	; b3cc <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xf0>
    b398:	e59f1020 	ldr	r1, [pc, #32]	; b3c0 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xe4>
    b39c:	e59f002c 	ldr	r0, [pc, #44]	; b3d0 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xf4>
    b3a0:	eb003b6b 	bl	1a154 <assertion_failed>
    b3a4:	eaffffd5 	b	b300 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x24>
    b3a8:	e59f2024 	ldr	r2, [pc, #36]	; b3d4 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xf8>
    b3ac:	e59f100c 	ldr	r1, [pc, #12]	; b3c0 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xe4>
    b3b0:	e59f0020 	ldr	r0, [pc, #32]	; b3d8 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xfc>
    b3b4:	eb003b66 	bl	1a154 <assertion_failed>
    b3b8:	eaffffce 	b	b2f8 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x1c>
    b3bc:	00000564 	.word	0x00000564
    b3c0:	000230ec 	.word	0x000230ec
    b3c4:	00023128 	.word	0x00023128
    b3c8:	0002339c 	.word	0x0002339c
    b3cc:	0000055f 	.word	0x0000055f
    b3d0:	00023390 	.word	0x00023390
    b3d4:	0000055e 	.word	0x0000055e
    b3d8:	00023380 	.word	0x00023380

0000b3dc <CDWHCIDevice::EnableRootPort()>:
    b3dc:	e92d4030 	push	{r4, r5, lr}
    b3e0:	e24dd01c 	sub	sp, sp, #28
    b3e4:	e1a05000 	mov	r5, r0
    b3e8:	e59f10a4 	ldr	r1, [pc, #164]	; b494 <CDWHCIDevice::EnableRootPort()+0xb8>
    b3ec:	e28d000c 	add	r0, sp, #12
    b3f0:	eb0002cb 	bl	bf24 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b3f4:	e3a04014 	mov	r4, #20
    b3f8:	e3a03001 	mov	r3, #1
    b3fc:	e1a00005 	mov	r0, r5
    b400:	e28d100c 	add	r1, sp, #12
    b404:	e58d4000 	str	r4, [sp]
    b408:	e1a02003 	mov	r2, r3
    b40c:	ebffffb2 	bl	b2dc <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>
    b410:	e2505000 	subs	r5, r0, #0
    b414:	0a000019 	beq	b480 <CDWHCIDevice::EnableRootPort()+0xa4>
    b418:	e3a00064 	mov	r0, #100	; 0x64
    b41c:	eb00542a 	bl	204cc <CTimer::SimpleMsDelay(unsigned int)>
    b420:	e28d000c 	add	r0, sp, #12
    b424:	eb0002c7 	bl	bf48 <CDWHCIRegister::Read()>
    b428:	e3e0102e 	mvn	r1, #46	; 0x2e
    b42c:	e28d000c 	add	r0, sp, #12
    b430:	eb0002fc 	bl	c028 <CDWHCIRegister::And(unsigned int)>
    b434:	e3a01c01 	mov	r1, #256	; 0x100
    b438:	e28d000c 	add	r0, sp, #12
    b43c:	eb000309 	bl	c068 <CDWHCIRegister::Or(unsigned int)>
    b440:	e28d000c 	add	r0, sp, #12
    b444:	eb0002c6 	bl	bf64 <CDWHCIRegister::Write()>
    b448:	e3a00032 	mov	r0, #50	; 0x32
    b44c:	eb00541e 	bl	204cc <CTimer::SimpleMsDelay(unsigned int)>
    b450:	e28d000c 	add	r0, sp, #12
    b454:	eb0002bb 	bl	bf48 <CDWHCIRegister::Read()>
    b458:	e3e0102e 	mvn	r1, #46	; 0x2e
    b45c:	e28d000c 	add	r0, sp, #12
    b460:	eb0002f0 	bl	c028 <CDWHCIRegister::And(unsigned int)>
    b464:	e3e01c01 	mvn	r1, #256	; 0x100
    b468:	e28d000c 	add	r0, sp, #12
    b46c:	eb0002ed 	bl	c028 <CDWHCIRegister::And(unsigned int)>
    b470:	e28d000c 	add	r0, sp, #12
    b474:	eb0002ba 	bl	bf64 <CDWHCIRegister::Write()>
    b478:	e1a00004 	mov	r0, r4
    b47c:	eb005412 	bl	204cc <CTimer::SimpleMsDelay(unsigned int)>
    b480:	e28d000c 	add	r0, sp, #12
    b484:	eb0002ae 	bl	bf44 <CDWHCIRegister::~CDWHCIRegister()>
    b488:	e1a00005 	mov	r0, r5
    b48c:	e28dd01c 	add	sp, sp, #28
    b490:	e8bd8030 	pop	{r4, r5, pc}
    b494:	20980440 	.word	0x20980440

0000b498 <CDWHCIDevice::Reset()>:
    b498:	e92d4030 	push	{r4, r5, lr}
    b49c:	e1a04000 	mov	r4, r0
    b4a0:	e3a05064 	mov	r5, #100	; 0x64
    b4a4:	e24dd01c 	sub	sp, sp, #28
    b4a8:	e3a02000 	mov	r2, #0
    b4ac:	e59f1080 	ldr	r1, [pc, #128]	; b534 <CDWHCIDevice::Reset()+0x9c>
    b4b0:	e28d000c 	add	r0, sp, #12
    b4b4:	eb00029e 	bl	bf34 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    b4b8:	e28d100c 	add	r1, sp, #12
    b4bc:	e1a00004 	mov	r0, r4
    b4c0:	e58d5000 	str	r5, [sp]
    b4c4:	e3a03001 	mov	r3, #1
    b4c8:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
    b4cc:	ebffff82 	bl	b2dc <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>
    b4d0:	e3500000 	cmp	r0, #0
    b4d4:	1a000005 	bne	b4f0 <CDWHCIDevice::Reset()+0x58>
    b4d8:	e3a04000 	mov	r4, #0
    b4dc:	e28d000c 	add	r0, sp, #12
    b4e0:	eb000297 	bl	bf44 <CDWHCIRegister::~CDWHCIRegister()>
    b4e4:	e1a00004 	mov	r0, r4
    b4e8:	e28dd01c 	add	sp, sp, #28
    b4ec:	e8bd8030 	pop	{r4, r5, pc}
    b4f0:	e3a01001 	mov	r1, #1
    b4f4:	e28d000c 	add	r0, sp, #12
    b4f8:	eb0002da 	bl	c068 <CDWHCIRegister::Or(unsigned int)>
    b4fc:	e28d000c 	add	r0, sp, #12
    b500:	eb000297 	bl	bf64 <CDWHCIRegister::Write()>
    b504:	e3a0300a 	mov	r3, #10
    b508:	e1a00004 	mov	r0, r4
    b50c:	e58d3000 	str	r3, [sp]
    b510:	e3a02001 	mov	r2, #1
    b514:	e3a03000 	mov	r3, #0
    b518:	e28d100c 	add	r1, sp, #12
    b51c:	ebffff6e 	bl	b2dc <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>
    b520:	e2504000 	subs	r4, r0, #0
    b524:	0affffeb 	beq	b4d8 <CDWHCIDevice::Reset()+0x40>
    b528:	e1a00005 	mov	r0, r5
    b52c:	eb0053e6 	bl	204cc <CTimer::SimpleMsDelay(unsigned int)>
    b530:	eaffffe9 	b	b4dc <CDWHCIDevice::Reset()+0x44>
    b534:	20980010 	.word	0x20980010

0000b538 <CDWHCIDevice::InitCore()>:
    b538:	e92d4030 	push	{r4, r5, lr}
    b53c:	e1a04000 	mov	r4, r0
    b540:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    b544:	e59f1218 	ldr	r1, [pc, #536]	; b764 <CDWHCIDevice::InitCore()+0x22c>
    b548:	e28d0004 	add	r0, sp, #4
    b54c:	eb000274 	bl	bf24 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b550:	e28d0004 	add	r0, sp, #4
    b554:	eb00027b 	bl	bf48 <CDWHCIRegister::Read()>
    b558:	e28d0004 	add	r0, sp, #4
    b55c:	e3e01601 	mvn	r1, #1048576	; 0x100000
    b560:	eb0002b0 	bl	c028 <CDWHCIRegister::And(unsigned int)>
    b564:	e3e01501 	mvn	r1, #4194304	; 0x400000
    b568:	e28d0004 	add	r0, sp, #4
    b56c:	eb0002ad 	bl	c028 <CDWHCIRegister::And(unsigned int)>
    b570:	e28d0004 	add	r0, sp, #4
    b574:	eb00027a 	bl	bf64 <CDWHCIRegister::Write()>
    b578:	e1a00004 	mov	r0, r4
    b57c:	ebffffc5 	bl	b498 <CDWHCIDevice::Reset()>
    b580:	e2505000 	subs	r5, r0, #0
    b584:	0a000059 	beq	b6f0 <CDWHCIDevice::InitCore()+0x1b8>
    b588:	e28d0004 	add	r0, sp, #4
    b58c:	eb00026d 	bl	bf48 <CDWHCIRegister::Read()>
    b590:	e3e01010 	mvn	r1, #16
    b594:	e28d0004 	add	r0, sp, #4
    b598:	eb0002a2 	bl	c028 <CDWHCIRegister::And(unsigned int)>
    b59c:	e3e01008 	mvn	r1, #8
    b5a0:	e28d0004 	add	r0, sp, #4
    b5a4:	eb00029f 	bl	c028 <CDWHCIRegister::And(unsigned int)>
    b5a8:	e28d0004 	add	r0, sp, #4
    b5ac:	eb00026c 	bl	bf64 <CDWHCIRegister::Write()>
    b5b0:	e59f11b0 	ldr	r1, [pc, #432]	; b768 <CDWHCIDevice::InitCore()+0x230>
    b5b4:	e28d0010 	add	r0, sp, #16
    b5b8:	eb000259 	bl	bf24 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b5bc:	e28d0010 	add	r0, sp, #16
    b5c0:	eb000260 	bl	bf48 <CDWHCIRegister::Read()>
    b5c4:	e28d0010 	add	r0, sp, #16
    b5c8:	eb000274 	bl	bfa0 <CDWHCIRegister::Get() const>
    b5cc:	e1a001a0 	lsr	r0, r0, #3
    b5d0:	e2000003 	and	r0, r0, #3
    b5d4:	e3500002 	cmp	r0, #2
    b5d8:	0a000003 	beq	b5ec <CDWHCIDevice::InitCore()+0xb4>
    b5dc:	e59f2188 	ldr	r2, [pc, #392]	; b76c <CDWHCIDevice::InitCore()+0x234>
    b5e0:	e59f1188 	ldr	r1, [pc, #392]	; b770 <CDWHCIDevice::InitCore()+0x238>
    b5e4:	e59f0188 	ldr	r0, [pc, #392]	; b774 <CDWHCIDevice::InitCore()+0x23c>
    b5e8:	eb003ad9 	bl	1a154 <assertion_failed>
    b5ec:	e28d0004 	add	r0, sp, #4
    b5f0:	eb000254 	bl	bf48 <CDWHCIRegister::Read()>
    b5f4:	e28d0010 	add	r0, sp, #16
    b5f8:	eb000268 	bl	bfa0 <CDWHCIRegister::Get() const>
    b5fc:	e1a00320 	lsr	r0, r0, #6
    b600:	e2000003 	and	r0, r0, #3
    b604:	e3500002 	cmp	r0, #2
    b608:	0a000048 	beq	b730 <CDWHCIDevice::InitCore()+0x1f8>
    b60c:	e3e01802 	mvn	r1, #131072	; 0x20000
    b610:	e28d0004 	add	r0, sp, #4
    b614:	eb000283 	bl	c028 <CDWHCIRegister::And(unsigned int)>
    b618:	e3e01702 	mvn	r1, #524288	; 0x80000
    b61c:	e28d0004 	add	r0, sp, #4
    b620:	eb000280 	bl	c028 <CDWHCIRegister::And(unsigned int)>
    b624:	e28d0004 	add	r0, sp, #4
    b628:	eb00024d 	bl	bf64 <CDWHCIRegister::Write()>
    b62c:	e594300c 	ldr	r3, [r4, #12]
    b630:	e3530000 	cmp	r3, #0
    b634:	1a000038 	bne	b71c <CDWHCIDevice::InitCore()+0x1e4>
    b638:	e28d0010 	add	r0, sp, #16
    b63c:	eb000257 	bl	bfa0 <CDWHCIRegister::Get() const>
    b640:	e1a00720 	lsr	r0, r0, #14
    b644:	e200000f 	and	r0, r0, #15
    b648:	e2403003 	sub	r3, r0, #3
    b64c:	e353000c 	cmp	r3, #12
    b650:	e2800001 	add	r0, r0, #1
    b654:	e584000c 	str	r0, [r4, #12]
    b658:	8a00002a 	bhi	b708 <CDWHCIDevice::InitCore()+0x1d0>
    b65c:	e59f1114 	ldr	r1, [pc, #276]	; b778 <CDWHCIDevice::InitCore()+0x240>
    b660:	e28d001c 	add	r0, sp, #28
    b664:	eb00022e 	bl	bf24 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b668:	e28d001c 	add	r0, sp, #28
    b66c:	eb000235 	bl	bf48 <CDWHCIRegister::Read()>
    b670:	e28d001c 	add	r0, sp, #28
    b674:	e3a01020 	mov	r1, #32
    b678:	eb00027a 	bl	c068 <CDWHCIRegister::Or(unsigned int)>
    b67c:	e28d001c 	add	r0, sp, #28
    b680:	e3a01010 	mov	r1, #16
    b684:	eb000277 	bl	c068 <CDWHCIRegister::Or(unsigned int)>
    b688:	e3e01006 	mvn	r1, #6
    b68c:	e28d001c 	add	r0, sp, #28
    b690:	eb000264 	bl	c028 <CDWHCIRegister::And(unsigned int)>
    b694:	e28d001c 	add	r0, sp, #28
    b698:	eb000231 	bl	bf64 <CDWHCIRegister::Write()>
    b69c:	e28d0004 	add	r0, sp, #4
    b6a0:	eb000228 	bl	bf48 <CDWHCIRegister::Read()>
    b6a4:	e3e01c02 	mvn	r1, #512	; 0x200
    b6a8:	e28d0004 	add	r0, sp, #4
    b6ac:	eb00025d 	bl	c028 <CDWHCIRegister::And(unsigned int)>
    b6b0:	e3e01c01 	mvn	r1, #256	; 0x100
    b6b4:	e28d0004 	add	r0, sp, #4
    b6b8:	eb00025a 	bl	c028 <CDWHCIRegister::And(unsigned int)>
    b6bc:	e28d0004 	add	r0, sp, #4
    b6c0:	eb000227 	bl	bf64 <CDWHCIRegister::Write()>
    b6c4:	e1a00004 	mov	r0, r4
    b6c8:	ebfff956 	bl	9c28 <CDWHCIDevice::EnableCommonInterrupts()>
    b6cc:	e28d001c 	add	r0, sp, #28
    b6d0:	eb00021b 	bl	bf44 <CDWHCIRegister::~CDWHCIRegister()>
    b6d4:	e28d0010 	add	r0, sp, #16
    b6d8:	eb000219 	bl	bf44 <CDWHCIRegister::~CDWHCIRegister()>
    b6dc:	e28d0004 	add	r0, sp, #4
    b6e0:	eb000217 	bl	bf44 <CDWHCIRegister::~CDWHCIRegister()>
    b6e4:	e1a00005 	mov	r0, r5
    b6e8:	e28dd02c 	add	sp, sp, #44	; 0x2c
    b6ec:	e8bd8030 	pop	{r4, r5, pc}
    b6f0:	eb00448a 	bl	1c920 <CLogger::Get()>
    b6f4:	e59f3080 	ldr	r3, [pc, #128]	; b77c <CDWHCIDevice::InitCore()+0x244>
    b6f8:	e3a02001 	mov	r2, #1
    b6fc:	e59f107c 	ldr	r1, [pc, #124]	; b780 <CDWHCIDevice::InitCore()+0x248>
    b700:	eb00462f 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b704:	eafffff4 	b	b6dc <CDWHCIDevice::InitCore()+0x1a4>
    b708:	e59f2074 	ldr	r2, [pc, #116]	; b784 <CDWHCIDevice::InitCore()+0x24c>
    b70c:	e59f105c 	ldr	r1, [pc, #92]	; b770 <CDWHCIDevice::InitCore()+0x238>
    b710:	e59f0070 	ldr	r0, [pc, #112]	; b788 <CDWHCIDevice::InitCore()+0x250>
    b714:	eb003a8e 	bl	1a154 <assertion_failed>
    b718:	eaffffcf 	b	b65c <CDWHCIDevice::InitCore()+0x124>
    b71c:	e59f2068 	ldr	r2, [pc, #104]	; b78c <CDWHCIDevice::InitCore()+0x254>
    b720:	e59f1048 	ldr	r1, [pc, #72]	; b770 <CDWHCIDevice::InitCore()+0x238>
    b724:	e59f0064 	ldr	r0, [pc, #100]	; b790 <CDWHCIDevice::InitCore()+0x258>
    b728:	eb003a89 	bl	1a154 <assertion_failed>
    b72c:	eaffffc1 	b	b638 <CDWHCIDevice::InitCore()+0x100>
    b730:	e28d0010 	add	r0, sp, #16
    b734:	eb000219 	bl	bfa0 <CDWHCIRegister::Get() const>
    b738:	e1a00420 	lsr	r0, r0, #8
    b73c:	e2000003 	and	r0, r0, #3
    b740:	e3500001 	cmp	r0, #1
    b744:	1affffb0 	bne	b60c <CDWHCIDevice::InitCore()+0xd4>
    b748:	e28d0004 	add	r0, sp, #4
    b74c:	e3a01802 	mov	r1, #131072	; 0x20000
    b750:	eb000244 	bl	c068 <CDWHCIRegister::Or(unsigned int)>
    b754:	e3a01702 	mov	r1, #524288	; 0x80000
    b758:	e28d0004 	add	r0, sp, #4
    b75c:	eb000241 	bl	c068 <CDWHCIRegister::Or(unsigned int)>
    b760:	eaffffaf 	b	b624 <CDWHCIDevice::InitCore()+0xec>
    b764:	2098000c 	.word	0x2098000c
    b768:	20980048 	.word	0x20980048
    b76c:	0000013b 	.word	0x0000013b
    b770:	000230ec 	.word	0x000230ec
    b774:	000233bc 	.word	0x000233bc
    b778:	20980008 	.word	0x20980008
    b77c:	000233ac 	.word	0x000233ac
    b780:	000230e0 	.word	0x000230e0
    b784:	0000014d 	.word	0x0000014d
    b788:	00023408 	.word	0x00023408
    b78c:	0000014b 	.word	0x0000014b
    b790:	000233f4 	.word	0x000233f4

0000b794 <CDWHCIDevice::FlushTxFIFO(unsigned int)>:
    b794:	e92d4030 	push	{r4, r5, lr}
    b798:	e1a05001 	mov	r5, r1
    b79c:	e24dd01c 	sub	sp, sp, #28
    b7a0:	e3a02000 	mov	r2, #0
    b7a4:	e1a04000 	mov	r4, r0
    b7a8:	e59f107c 	ldr	r1, [pc, #124]	; b82c <CDWHCIDevice::FlushTxFIFO(unsigned int)+0x98>
    b7ac:	e28d000c 	add	r0, sp, #12
    b7b0:	eb0001df 	bl	bf34 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    b7b4:	e28d000c 	add	r0, sp, #12
    b7b8:	e3a01020 	mov	r1, #32
    b7bc:	eb000229 	bl	c068 <CDWHCIRegister::Or(unsigned int)>
    b7c0:	e28d000c 	add	r0, sp, #12
    b7c4:	e3e01d1f 	mvn	r1, #1984	; 0x7c0
    b7c8:	eb000216 	bl	c028 <CDWHCIRegister::And(unsigned int)>
    b7cc:	e1a01305 	lsl	r1, r5, #6
    b7d0:	e28d000c 	add	r0, sp, #12
    b7d4:	eb000223 	bl	c068 <CDWHCIRegister::Or(unsigned int)>
    b7d8:	e28d000c 	add	r0, sp, #12
    b7dc:	eb0001e0 	bl	bf64 <CDWHCIRegister::Write()>
    b7e0:	e3a0300a 	mov	r3, #10
    b7e4:	e1a00004 	mov	r0, r4
    b7e8:	e58d3000 	str	r3, [sp]
    b7ec:	e28d100c 	add	r1, sp, #12
    b7f0:	e3a03000 	mov	r3, #0
    b7f4:	e3a02020 	mov	r2, #32
    b7f8:	ebfffeb7 	bl	b2dc <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>
    b7fc:	e3500000 	cmp	r0, #0
    b800:	1a000003 	bne	b814 <CDWHCIDevice::FlushTxFIFO(unsigned int)+0x80>
    b804:	e28d000c 	add	r0, sp, #12
    b808:	eb0001cd 	bl	bf44 <CDWHCIRegister::~CDWHCIRegister()>
    b80c:	e28dd01c 	add	sp, sp, #28
    b810:	e8bd8030 	pop	{r4, r5, pc}
    b814:	e3a00001 	mov	r0, #1
    b818:	eb005332 	bl	204e8 <CTimer::SimpleusDelay(unsigned int)>
    b81c:	e28d000c 	add	r0, sp, #12
    b820:	eb0001c7 	bl	bf44 <CDWHCIRegister::~CDWHCIRegister()>
    b824:	e28dd01c 	add	sp, sp, #28
    b828:	e8bd8030 	pop	{r4, r5, pc}
    b82c:	20980010 	.word	0x20980010

0000b830 <CDWHCIDevice::FlushRxFIFO()>:
    b830:	e92d4010 	push	{r4, lr}
    b834:	e24dd018 	sub	sp, sp, #24
    b838:	e3a02000 	mov	r2, #0
    b83c:	e1a04000 	mov	r4, r0
    b840:	e59f1064 	ldr	r1, [pc, #100]	; b8ac <CDWHCIDevice::FlushRxFIFO()+0x7c>
    b844:	e28d000c 	add	r0, sp, #12
    b848:	eb0001b9 	bl	bf34 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    b84c:	e3a01010 	mov	r1, #16
    b850:	e28d000c 	add	r0, sp, #12
    b854:	eb000203 	bl	c068 <CDWHCIRegister::Or(unsigned int)>
    b858:	e28d000c 	add	r0, sp, #12
    b85c:	eb0001c0 	bl	bf64 <CDWHCIRegister::Write()>
    b860:	e3a0300a 	mov	r3, #10
    b864:	e1a00004 	mov	r0, r4
    b868:	e58d3000 	str	r3, [sp]
    b86c:	e28d100c 	add	r1, sp, #12
    b870:	e3a03000 	mov	r3, #0
    b874:	e3a02010 	mov	r2, #16
    b878:	ebfffe97 	bl	b2dc <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>
    b87c:	e3500000 	cmp	r0, #0
    b880:	1a000003 	bne	b894 <CDWHCIDevice::FlushRxFIFO()+0x64>
    b884:	e28d000c 	add	r0, sp, #12
    b888:	eb0001ad 	bl	bf44 <CDWHCIRegister::~CDWHCIRegister()>
    b88c:	e28dd018 	add	sp, sp, #24
    b890:	e8bd8010 	pop	{r4, pc}
    b894:	e3a00001 	mov	r0, #1
    b898:	eb005312 	bl	204e8 <CTimer::SimpleusDelay(unsigned int)>
    b89c:	e28d000c 	add	r0, sp, #12
    b8a0:	eb0001a7 	bl	bf44 <CDWHCIRegister::~CDWHCIRegister()>
    b8a4:	e28dd018 	add	sp, sp, #24
    b8a8:	e8bd8010 	pop	{r4, pc}
    b8ac:	20980010 	.word	0x20980010

0000b8b0 <CDWHCIDevice::InitHost()>:
    b8b0:	e92d4010 	push	{r4, lr}
    b8b4:	e24dd068 	sub	sp, sp, #104	; 0x68
    b8b8:	e3a02000 	mov	r2, #0
    b8bc:	e59f11cc 	ldr	r1, [pc, #460]	; ba90 <CDWHCIDevice::InitHost()+0x1e0>
    b8c0:	e1a04000 	mov	r4, r0
    b8c4:	e28d0008 	add	r0, sp, #8
    b8c8:	eb000199 	bl	bf34 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    b8cc:	e28d0008 	add	r0, sp, #8
    b8d0:	eb0001a3 	bl	bf64 <CDWHCIRegister::Write()>
    b8d4:	e59f11b8 	ldr	r1, [pc, #440]	; ba94 <CDWHCIDevice::InitHost()+0x1e4>
    b8d8:	e28d0014 	add	r0, sp, #20
    b8dc:	eb000190 	bl	bf24 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b8e0:	e28d0014 	add	r0, sp, #20
    b8e4:	eb000197 	bl	bf48 <CDWHCIRegister::Read()>
    b8e8:	e28d0014 	add	r0, sp, #20
    b8ec:	e3e01003 	mvn	r1, #3
    b8f0:	eb0001cc 	bl	c028 <CDWHCIRegister::And(unsigned int)>
    b8f4:	e59f119c 	ldr	r1, [pc, #412]	; ba98 <CDWHCIDevice::InitHost()+0x1e8>
    b8f8:	e28d0020 	add	r0, sp, #32
    b8fc:	eb000188 	bl	bf24 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b900:	e59f1194 	ldr	r1, [pc, #404]	; ba9c <CDWHCIDevice::InitHost()+0x1ec>
    b904:	e28d002c 	add	r0, sp, #44	; 0x2c
    b908:	eb000185 	bl	bf24 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b90c:	e28d0020 	add	r0, sp, #32
    b910:	eb00018c 	bl	bf48 <CDWHCIRegister::Read()>
    b914:	e1a00320 	lsr	r0, r0, #6
    b918:	e2000003 	and	r0, r0, #3
    b91c:	e3500002 	cmp	r0, #2
    b920:	0a00004d 	beq	ba5c <CDWHCIDevice::InitHost()+0x1ac>
    b924:	e3a01000 	mov	r1, #0
    b928:	e28d0014 	add	r0, sp, #20
    b92c:	eb0001cd 	bl	c068 <CDWHCIRegister::Or(unsigned int)>
    b930:	e28d0014 	add	r0, sp, #20
    b934:	eb00018a 	bl	bf64 <CDWHCIRegister::Write()>
    b938:	e3a02b01 	mov	r2, #1024	; 0x400
    b93c:	e59f115c 	ldr	r1, [pc, #348]	; baa0 <CDWHCIDevice::InitHost()+0x1f0>
    b940:	e28d0038 	add	r0, sp, #56	; 0x38
    b944:	eb00017a 	bl	bf34 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    b948:	e28d0038 	add	r0, sp, #56	; 0x38
    b94c:	eb000184 	bl	bf64 <CDWHCIRegister::Write()>
    b950:	e3a02000 	mov	r2, #0
    b954:	e59f1148 	ldr	r1, [pc, #328]	; baa4 <CDWHCIDevice::InitHost()+0x1f4>
    b958:	e28d0044 	add	r0, sp, #68	; 0x44
    b95c:	eb000174 	bl	bf34 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    b960:	e28d0044 	add	r0, sp, #68	; 0x44
    b964:	e3a01b01 	mov	r1, #1024	; 0x400
    b968:	eb0001be 	bl	c068 <CDWHCIRegister::Or(unsigned int)>
    b96c:	e3a01301 	mov	r1, #67108864	; 0x4000000
    b970:	e28d0044 	add	r0, sp, #68	; 0x44
    b974:	eb0001bb 	bl	c068 <CDWHCIRegister::Or(unsigned int)>
    b978:	e28d0044 	add	r0, sp, #68	; 0x44
    b97c:	eb000178 	bl	bf64 <CDWHCIRegister::Write()>
    b980:	e3a02000 	mov	r2, #0
    b984:	e59f111c 	ldr	r1, [pc, #284]	; baa8 <CDWHCIDevice::InitHost()+0x1f8>
    b988:	e28d0050 	add	r0, sp, #80	; 0x50
    b98c:	eb000168 	bl	bf34 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    b990:	e28d0050 	add	r0, sp, #80	; 0x50
    b994:	e3a01b02 	mov	r1, #2048	; 0x800
    b998:	eb0001b2 	bl	c068 <CDWHCIRegister::Or(unsigned int)>
    b99c:	e3a01301 	mov	r1, #67108864	; 0x4000000
    b9a0:	e28d0050 	add	r0, sp, #80	; 0x50
    b9a4:	eb0001af 	bl	c068 <CDWHCIRegister::Or(unsigned int)>
    b9a8:	e28d0050 	add	r0, sp, #80	; 0x50
    b9ac:	eb00016c 	bl	bf64 <CDWHCIRegister::Write()>
    b9b0:	e3a01010 	mov	r1, #16
    b9b4:	e1a00004 	mov	r0, r4
    b9b8:	ebffff75 	bl	b794 <CDWHCIDevice::FlushTxFIFO(unsigned int)>
    b9bc:	e1a00004 	mov	r0, r4
    b9c0:	ebffff9a 	bl	b830 <CDWHCIDevice::FlushRxFIFO()>
    b9c4:	e59f10e0 	ldr	r1, [pc, #224]	; baac <CDWHCIDevice::InitHost()+0x1fc>
    b9c8:	e28d005c 	add	r0, sp, #92	; 0x5c
    b9cc:	eb000154 	bl	bf24 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b9d0:	e28d005c 	add	r0, sp, #92	; 0x5c
    b9d4:	eb00015b 	bl	bf48 <CDWHCIRegister::Read()>
    b9d8:	e28d005c 	add	r0, sp, #92	; 0x5c
    b9dc:	e3e0102e 	mvn	r1, #46	; 0x2e
    b9e0:	eb000190 	bl	c028 <CDWHCIRegister::And(unsigned int)>
    b9e4:	e28d005c 	add	r0, sp, #92	; 0x5c
    b9e8:	eb00016c 	bl	bfa0 <CDWHCIRegister::Get() const>
    b9ec:	e3100a01 	tst	r0, #4096	; 0x1000
    b9f0:	1a000004 	bne	ba08 <CDWHCIDevice::InitHost()+0x158>
    b9f4:	e28d005c 	add	r0, sp, #92	; 0x5c
    b9f8:	e3a01a01 	mov	r1, #4096	; 0x1000
    b9fc:	eb000199 	bl	c068 <CDWHCIRegister::Or(unsigned int)>
    ba00:	e28d005c 	add	r0, sp, #92	; 0x5c
    ba04:	eb000156 	bl	bf64 <CDWHCIRegister::Write()>
    ba08:	e1a00004 	mov	r0, r4
    ba0c:	ebfff893 	bl	9c60 <CDWHCIDevice::EnableHostInterrupts()>
    ba10:	e28d005c 	add	r0, sp, #92	; 0x5c
    ba14:	eb00014a 	bl	bf44 <CDWHCIRegister::~CDWHCIRegister()>
    ba18:	e28d0050 	add	r0, sp, #80	; 0x50
    ba1c:	eb000148 	bl	bf44 <CDWHCIRegister::~CDWHCIRegister()>
    ba20:	e28d0044 	add	r0, sp, #68	; 0x44
    ba24:	eb000146 	bl	bf44 <CDWHCIRegister::~CDWHCIRegister()>
    ba28:	e28d0038 	add	r0, sp, #56	; 0x38
    ba2c:	eb000144 	bl	bf44 <CDWHCIRegister::~CDWHCIRegister()>
    ba30:	e28d002c 	add	r0, sp, #44	; 0x2c
    ba34:	eb000142 	bl	bf44 <CDWHCIRegister::~CDWHCIRegister()>
    ba38:	e28d0020 	add	r0, sp, #32
    ba3c:	eb000140 	bl	bf44 <CDWHCIRegister::~CDWHCIRegister()>
    ba40:	e28d0014 	add	r0, sp, #20
    ba44:	eb00013e 	bl	bf44 <CDWHCIRegister::~CDWHCIRegister()>
    ba48:	e28d0008 	add	r0, sp, #8
    ba4c:	eb00013c 	bl	bf44 <CDWHCIRegister::~CDWHCIRegister()>
    ba50:	e3a00001 	mov	r0, #1
    ba54:	e28dd068 	add	sp, sp, #104	; 0x68
    ba58:	e8bd8010 	pop	{r4, pc}
    ba5c:	e28d0020 	add	r0, sp, #32
    ba60:	eb00014e 	bl	bfa0 <CDWHCIRegister::Get() const>
    ba64:	e1a01420 	lsr	r1, r0, #8
    ba68:	e2011003 	and	r1, r1, #3
    ba6c:	e3510001 	cmp	r1, #1
    ba70:	1affffab 	bne	b924 <CDWHCIDevice::InitHost()+0x74>
    ba74:	e28d002c 	add	r0, sp, #44	; 0x2c
    ba78:	e58d1004 	str	r1, [sp, #4]
    ba7c:	eb000131 	bl	bf48 <CDWHCIRegister::Read()>
    ba80:	e3100802 	tst	r0, #131072	; 0x20000
    ba84:	e59d1004 	ldr	r1, [sp, #4]
    ba88:	1affffa6 	bne	b928 <CDWHCIDevice::InitHost()+0x78>
    ba8c:	eaffffa4 	b	b924 <CDWHCIDevice::InitHost()+0x74>
    ba90:	20980e00 	.word	0x20980e00
    ba94:	20980400 	.word	0x20980400
    ba98:	20980048 	.word	0x20980048
    ba9c:	2098000c 	.word	0x2098000c
    baa0:	20980024 	.word	0x20980024
    baa4:	20980028 	.word	0x20980028
    baa8:	20980100 	.word	0x20980100
    baac:	20980440 	.word	0x20980440

0000bab0 <CDWHCIDevice::Initialize()>:
    bab0:	e92d4070 	push	{r4, r5, r6, lr}
    bab4:	e3a01001 	mov	r1, #1
    bab8:	e24dd020 	sub	sp, sp, #32
    babc:	e1a04000 	mov	r4, r0
    bac0:	e3a00020 	mov	r0, #32
    bac4:	eb000b1f 	bl	e748 <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)>
    bac8:	e3a01001 	mov	r1, #1
    bacc:	e3a00010 	mov	r0, #16
    bad0:	eb0004ab 	bl	cd84 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)>
    bad4:	e3a01001 	mov	r1, #1
    bad8:	e3a00010 	mov	r0, #16
    badc:	eb00130e 	bl	1071c <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)>
    bae0:	e3a01001 	mov	r1, #1
    bae4:	e3a00010 	mov	r0, #16
    bae8:	eb00142f 	bl	10bac <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)>
    baec:	e3a01001 	mov	r1, #1
    baf0:	e3a00010 	mov	r0, #16
    baf4:	eb002419 	bl	14b60 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)>
    baf8:	e3a03000 	mov	r3, #0
    bafc:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    bb00:	e5943004 	ldr	r3, [r4, #4]
    bb04:	e3530000 	cmp	r3, #0
    bb08:	0a00004d 	beq	bc44 <CDWHCIDevice::Initialize()+0x194>
    bb0c:	e5943008 	ldr	r3, [r4, #8]
    bb10:	e3530000 	cmp	r3, #0
    bb14:	0a00004f 	beq	bc58 <CDWHCIDevice::Initialize()+0x1a8>
    bb18:	e59f11c4 	ldr	r1, [pc, #452]	; bce4 <CDWHCIDevice::Initialize()+0x234>
    bb1c:	e28d0008 	add	r0, sp, #8
    bb20:	eb0000ff 	bl	bf24 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    bb24:	e28d0008 	add	r0, sp, #8
    bb28:	eb000106 	bl	bf48 <CDWHCIRegister::Read()>
    bb2c:	e59f31b4 	ldr	r3, [pc, #436]	; bce8 <CDWHCIDevice::Initialize()+0x238>
    bb30:	e1500003 	cmp	r0, r3
    bb34:	0a00000f 	beq	bb78 <CDWHCIDevice::Initialize()+0xc8>
    bb38:	eb004378 	bl	1c920 <CLogger::Get()>
    bb3c:	e1a04000 	mov	r4, r0
    bb40:	e28d0008 	add	r0, sp, #8
    bb44:	eb000115 	bl	bfa0 <CDWHCIRegister::Get() const>
    bb48:	e59f319c 	ldr	r3, [pc, #412]	; bcec <CDWHCIDevice::Initialize()+0x23c>
    bb4c:	e58d0000 	str	r0, [sp]
    bb50:	e3a02001 	mov	r2, #1
    bb54:	e1a00004 	mov	r0, r4
    bb58:	e59f1190 	ldr	r1, [pc, #400]	; bcf0 <CDWHCIDevice::Initialize()+0x240>
    bb5c:	eb004518 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    bb60:	e3a05000 	mov	r5, #0
    bb64:	e28d0008 	add	r0, sp, #8
    bb68:	eb0000f5 	bl	bf44 <CDWHCIRegister::~CDWHCIRegister()>
    bb6c:	e1a00005 	mov	r0, r5
    bb70:	e28dd020 	add	sp, sp, #32
    bb74:	e8bd8070 	pop	{r4, r5, r6, pc}
    bb78:	e1a00004 	mov	r0, r4
    bb7c:	ebfff7fe 	bl	9b7c <CDWHCIDevice::PowerOn()>
    bb80:	e2505000 	subs	r5, r0, #0
    bb84:	0a000028 	beq	bc2c <CDWHCIDevice::Initialize()+0x17c>
    bb88:	e59f1164 	ldr	r1, [pc, #356]	; bcf4 <CDWHCIDevice::Initialize()+0x244>
    bb8c:	e28d0014 	add	r0, sp, #20
    bb90:	eb0000e3 	bl	bf24 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    bb94:	e28d0014 	add	r0, sp, #20
    bb98:	eb0000ea 	bl	bf48 <CDWHCIRegister::Read()>
    bb9c:	e28d0014 	add	r0, sp, #20
    bba0:	e3e01001 	mvn	r1, #1
    bba4:	eb00011f 	bl	c028 <CDWHCIRegister::And(unsigned int)>
    bba8:	e28d0014 	add	r0, sp, #20
    bbac:	eb0000ec 	bl	bf64 <CDWHCIRegister::Write()>
    bbb0:	e5940004 	ldr	r0, [r4, #4]
    bbb4:	e3500000 	cmp	r0, #0
    bbb8:	0a00003c 	beq	bcb0 <CDWHCIDevice::Initialize()+0x200>
    bbbc:	e1a03004 	mov	r3, r4
    bbc0:	e59f2130 	ldr	r2, [pc, #304]	; bcf8 <CDWHCIDevice::Initialize()+0x248>
    bbc4:	e3a01009 	mov	r1, #9
    bbc8:	eb0040bb 	bl	1bebc <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    bbcc:	e1a00004 	mov	r0, r4
    bbd0:	ebfffe58 	bl	b538 <CDWHCIDevice::InitCore()>
    bbd4:	e2505000 	subs	r5, r0, #0
    bbd8:	0a00000d 	beq	bc14 <CDWHCIDevice::Initialize()+0x164>
    bbdc:	e1a00004 	mov	r0, r4
    bbe0:	ebfff7ff 	bl	9be4 <CDWHCIDevice::EnableGlobalInterrupts()>
    bbe4:	e1a00004 	mov	r0, r4
    bbe8:	ebffff30 	bl	b8b0 <CDWHCIDevice::InitHost()>
    bbec:	e2505000 	subs	r5, r0, #0
    bbf0:	1a00001d 	bne	bc6c <CDWHCIDevice::Initialize()+0x1bc>
    bbf4:	eb004349 	bl	1c920 <CLogger::Get()>
    bbf8:	e59f30fc 	ldr	r3, [pc, #252]	; bcfc <CDWHCIDevice::Initialize()+0x24c>
    bbfc:	e3a02001 	mov	r2, #1
    bc00:	e59f10e8 	ldr	r1, [pc, #232]	; bcf0 <CDWHCIDevice::Initialize()+0x240>
    bc04:	eb0044ee 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    bc08:	e28d0014 	add	r0, sp, #20
    bc0c:	eb0000cc 	bl	bf44 <CDWHCIRegister::~CDWHCIRegister()>
    bc10:	eaffffd3 	b	bb64 <CDWHCIDevice::Initialize()+0xb4>
    bc14:	eb004341 	bl	1c920 <CLogger::Get()>
    bc18:	e59f30e0 	ldr	r3, [pc, #224]	; bd00 <CDWHCIDevice::Initialize()+0x250>
    bc1c:	e3a02001 	mov	r2, #1
    bc20:	e59f10c8 	ldr	r1, [pc, #200]	; bcf0 <CDWHCIDevice::Initialize()+0x240>
    bc24:	eb0044e6 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    bc28:	eafffff6 	b	bc08 <CDWHCIDevice::Initialize()+0x158>
    bc2c:	eb00433b 	bl	1c920 <CLogger::Get()>
    bc30:	e59f30cc 	ldr	r3, [pc, #204]	; bd04 <CDWHCIDevice::Initialize()+0x254>
    bc34:	e3a02001 	mov	r2, #1
    bc38:	e59f10b0 	ldr	r1, [pc, #176]	; bcf0 <CDWHCIDevice::Initialize()+0x240>
    bc3c:	eb0044e0 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    bc40:	eaffffc7 	b	bb64 <CDWHCIDevice::Initialize()+0xb4>
    bc44:	e3a02067 	mov	r2, #103	; 0x67
    bc48:	e59f10b8 	ldr	r1, [pc, #184]	; bd08 <CDWHCIDevice::Initialize()+0x258>
    bc4c:	e59f00b8 	ldr	r0, [pc, #184]	; bd0c <CDWHCIDevice::Initialize()+0x25c>
    bc50:	eb00393f 	bl	1a154 <assertion_failed>
    bc54:	eaffffac 	b	bb0c <CDWHCIDevice::Initialize()+0x5c>
    bc58:	e3a02068 	mov	r2, #104	; 0x68
    bc5c:	e59f10a4 	ldr	r1, [pc, #164]	; bd08 <CDWHCIDevice::Initialize()+0x258>
    bc60:	e59f00a8 	ldr	r0, [pc, #168]	; bd10 <CDWHCIDevice::Initialize()+0x260>
    bc64:	eb00393a 	bl	1a154 <assertion_failed>
    bc68:	eaffffaa 	b	bb18 <CDWHCIDevice::Initialize()+0x68>
    bc6c:	e1a00004 	mov	r0, r4
    bc70:	ebfffdd9 	bl	b3dc <CDWHCIDevice::EnableRootPort()>
    bc74:	e2506000 	subs	r6, r0, #0
    bc78:	0a000006 	beq	bc98 <CDWHCIDevice::Initialize()+0x1e8>
    bc7c:	e2840074 	add	r0, r4, #116	; 0x74
    bc80:	eb001508 	bl	110a8 <CDWHCIRootPort::Initialize()>
    bc84:	e2505000 	subs	r5, r0, #0
    bc88:	0a00000e 	beq	bcc8 <CDWHCIDevice::Initialize()+0x218>
    bc8c:	e3a03000 	mov	r3, #0
    bc90:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    bc94:	eaffffdb 	b	bc08 <CDWHCIDevice::Initialize()+0x158>
    bc98:	eb004320 	bl	1c920 <CLogger::Get()>
    bc9c:	e59f3070 	ldr	r3, [pc, #112]	; bd14 <CDWHCIDevice::Initialize()+0x264>
    bca0:	e3a02002 	mov	r2, #2
    bca4:	e59f1044 	ldr	r1, [pc, #68]	; bcf0 <CDWHCIDevice::Initialize()+0x240>
    bca8:	eb0044c5 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    bcac:	eaffffd5 	b	bc08 <CDWHCIDevice::Initialize()+0x158>
    bcb0:	e59f0054 	ldr	r0, [pc, #84]	; bd0c <CDWHCIDevice::Initialize()+0x25c>
    bcb4:	e3a0207d 	mov	r2, #125	; 0x7d
    bcb8:	e59f1048 	ldr	r1, [pc, #72]	; bd08 <CDWHCIDevice::Initialize()+0x258>
    bcbc:	eb003924 	bl	1a154 <assertion_failed>
    bcc0:	e5940004 	ldr	r0, [r4, #4]
    bcc4:	eaffffbc 	b	bbbc <CDWHCIDevice::Initialize()+0x10c>
    bcc8:	eb004314 	bl	1c920 <CLogger::Get()>
    bccc:	e59f3044 	ldr	r3, [pc, #68]	; bd18 <CDWHCIDevice::Initialize()+0x268>
    bcd0:	e3a02002 	mov	r2, #2
    bcd4:	e59f1014 	ldr	r1, [pc, #20]	; bcf0 <CDWHCIDevice::Initialize()+0x240>
    bcd8:	e1a05006 	mov	r5, r6
    bcdc:	eb0044b8 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    bce0:	eaffffc8 	b	bc08 <CDWHCIDevice::Initialize()+0x158>
    bce4:	20980040 	.word	0x20980040
    bce8:	4f54280a 	.word	0x4f54280a
    bcec:	00023440 	.word	0x00023440
    bcf0:	000230e0 	.word	0x000230e0
    bcf4:	20980008 	.word	0x20980008
    bcf8:	0000adc8 	.word	0x0000adc8
    bcfc:	00023480 	.word	0x00023480
    bd00:	00023468 	.word	0x00023468
    bd04:	00023458 	.word	0x00023458
    bd08:	000230ec 	.word	0x000230ec
    bd0c:	00022e78 	.word	0x00022e78
    bd10:	00023128 	.word	0x00023128
    bd14:	00023498 	.word	0x00023498
    bd18:	000234bc 	.word	0x000234bc

0000bd1c <CDWHCIDevice::DumpRegister(char const*, unsigned int)>:
    bd1c:	e92d4030 	push	{r4, r5, lr}
    bd20:	e24dd01c 	sub	sp, sp, #28
    bd24:	e1a05001 	mov	r5, r1
    bd28:	e28d000c 	add	r0, sp, #12
    bd2c:	e1a01002 	mov	r1, r2
    bd30:	eb00007b 	bl	bf24 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    bd34:	e3a03000 	mov	r3, #0
    bd38:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    bd3c:	eb0042f7 	bl	1c920 <CLogger::Get()>
    bd40:	e1a04000 	mov	r4, r0
    bd44:	e28d000c 	add	r0, sp, #12
    bd48:	eb00007e 	bl	bf48 <CDWHCIRegister::Read()>
    bd4c:	e59f3020 	ldr	r3, [pc, #32]	; bd74 <CDWHCIDevice::DumpRegister(char const*, unsigned int)+0x58>
    bd50:	e88d0021 	stm	sp, {r0, r5}
    bd54:	e3a02004 	mov	r2, #4
    bd58:	e1a00004 	mov	r0, r4
    bd5c:	e59f1014 	ldr	r1, [pc, #20]	; bd78 <CDWHCIDevice::DumpRegister(char const*, unsigned int)+0x5c>
    bd60:	eb004497 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    bd64:	e28d000c 	add	r0, sp, #12
    bd68:	eb000075 	bl	bf44 <CDWHCIRegister::~CDWHCIRegister()>
    bd6c:	e28dd01c 	add	sp, sp, #28
    bd70:	e8bd8030 	pop	{r4, r5, pc}
    bd74:	0002311c 	.word	0x0002311c
    bd78:	000230e0 	.word	0x000230e0

0000bd7c <CDWHCIDevice::DumpStatus(unsigned int)>:
    bd7c:	e92d4070 	push	{r4, r5, r6, lr}
    bd80:	e1a05001 	mov	r5, r1
    bd84:	e59f0104 	ldr	r0, [pc, #260]	; be90 <CDWHCIDevice::DumpStatus(unsigned int)+0x114>
    bd88:	e59f1104 	ldr	r1, [pc, #260]	; be94 <CDWHCIDevice::DumpStatus(unsigned int)+0x118>
    bd8c:	ebfff6f7 	bl	9970 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    bd90:	e59f1100 	ldr	r1, [pc, #256]	; be98 <CDWHCIDevice::DumpStatus(unsigned int)+0x11c>
    bd94:	e59f0100 	ldr	r0, [pc, #256]	; be9c <CDWHCIDevice::DumpStatus(unsigned int)+0x120>
    bd98:	ebfff6f4 	bl	9970 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    bd9c:	e59f10fc 	ldr	r1, [pc, #252]	; bea0 <CDWHCIDevice::DumpStatus(unsigned int)+0x124>
    bda0:	e59f00fc 	ldr	r0, [pc, #252]	; bea4 <CDWHCIDevice::DumpStatus(unsigned int)+0x128>
    bda4:	ebfff6f1 	bl	9970 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    bda8:	e59f10f8 	ldr	r1, [pc, #248]	; bea8 <CDWHCIDevice::DumpStatus(unsigned int)+0x12c>
    bdac:	e59f00f8 	ldr	r0, [pc, #248]	; beac <CDWHCIDevice::DumpStatus(unsigned int)+0x130>
    bdb0:	ebfff6ee 	bl	9970 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    bdb4:	e59f10f4 	ldr	r1, [pc, #244]	; beb0 <CDWHCIDevice::DumpStatus(unsigned int)+0x134>
    bdb8:	e59f00f4 	ldr	r0, [pc, #244]	; beb4 <CDWHCIDevice::DumpStatus(unsigned int)+0x138>
    bdbc:	ebfff6eb 	bl	9970 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    bdc0:	e59f10f0 	ldr	r1, [pc, #240]	; beb8 <CDWHCIDevice::DumpStatus(unsigned int)+0x13c>
    bdc4:	e59f00f0 	ldr	r0, [pc, #240]	; bebc <CDWHCIDevice::DumpStatus(unsigned int)+0x140>
    bdc8:	ebfff6e8 	bl	9970 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    bdcc:	e59f10ec 	ldr	r1, [pc, #236]	; bec0 <CDWHCIDevice::DumpStatus(unsigned int)+0x144>
    bdd0:	e59f00ec 	ldr	r0, [pc, #236]	; bec4 <CDWHCIDevice::DumpStatus(unsigned int)+0x148>
    bdd4:	ebfff6e5 	bl	9970 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    bdd8:	e59f10e8 	ldr	r1, [pc, #232]	; bec8 <CDWHCIDevice::DumpStatus(unsigned int)+0x14c>
    bddc:	e59f00e8 	ldr	r0, [pc, #232]	; becc <CDWHCIDevice::DumpStatus(unsigned int)+0x150>
    bde0:	ebfff6e2 	bl	9970 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    bde4:	e59f10e4 	ldr	r1, [pc, #228]	; bed0 <CDWHCIDevice::DumpStatus(unsigned int)+0x154>
    bde8:	e59f00e4 	ldr	r0, [pc, #228]	; bed4 <CDWHCIDevice::DumpStatus(unsigned int)+0x158>
    bdec:	ebfff6df 	bl	9970 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    bdf0:	e59f10e0 	ldr	r1, [pc, #224]	; bed8 <CDWHCIDevice::DumpStatus(unsigned int)+0x15c>
    bdf4:	e59f00e0 	ldr	r0, [pc, #224]	; bedc <CDWHCIDevice::DumpStatus(unsigned int)+0x160>
    bdf8:	ebfff6dc 	bl	9970 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    bdfc:	e59f10dc 	ldr	r1, [pc, #220]	; bee0 <CDWHCIDevice::DumpStatus(unsigned int)+0x164>
    be00:	e59f00dc 	ldr	r0, [pc, #220]	; bee4 <CDWHCIDevice::DumpStatus(unsigned int)+0x168>
    be04:	ebfff6d9 	bl	9970 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    be08:	e59f40d8 	ldr	r4, [pc, #216]	; bee8 <CDWHCIDevice::DumpStatus(unsigned int)+0x16c>
    be0c:	e59f10d8 	ldr	r1, [pc, #216]	; beec <CDWHCIDevice::DumpStatus(unsigned int)+0x170>
    be10:	e59f00d8 	ldr	r0, [pc, #216]	; bef0 <CDWHCIDevice::DumpStatus(unsigned int)+0x174>
    be14:	ebfff6d5 	bl	9970 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    be18:	e59f10d4 	ldr	r1, [pc, #212]	; bef4 <CDWHCIDevice::DumpStatus(unsigned int)+0x178>
    be1c:	e59f00d4 	ldr	r0, [pc, #212]	; bef8 <CDWHCIDevice::DumpStatus(unsigned int)+0x17c>
    be20:	ebfff6d2 	bl	9970 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    be24:	e0854004 	add	r4, r5, r4
    be28:	e59f10cc 	ldr	r1, [pc, #204]	; befc <CDWHCIDevice::DumpStatus(unsigned int)+0x180>
    be2c:	e59f00cc 	ldr	r0, [pc, #204]	; bf00 <CDWHCIDevice::DumpStatus(unsigned int)+0x184>
    be30:	e1a04284 	lsl	r4, r4, #5
    be34:	ebfff6cd 	bl	9970 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    be38:	e59f10c4 	ldr	r1, [pc, #196]	; bf04 <CDWHCIDevice::DumpStatus(unsigned int)+0x188>
    be3c:	e59f00c4 	ldr	r0, [pc, #196]	; bf08 <CDWHCIDevice::DumpStatus(unsigned int)+0x18c>
    be40:	ebfff6ca 	bl	9970 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    be44:	e1a01004 	mov	r1, r4
    be48:	e59f00bc 	ldr	r0, [pc, #188]	; bf0c <CDWHCIDevice::DumpStatus(unsigned int)+0x190>
    be4c:	ebfff6c7 	bl	9970 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    be50:	e2841004 	add	r1, r4, #4
    be54:	e59f00b4 	ldr	r0, [pc, #180]	; bf10 <CDWHCIDevice::DumpStatus(unsigned int)+0x194>
    be58:	ebfff6c4 	bl	9970 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    be5c:	e2841008 	add	r1, r4, #8
    be60:	e59f00ac 	ldr	r0, [pc, #172]	; bf14 <CDWHCIDevice::DumpStatus(unsigned int)+0x198>
    be64:	ebfff6c1 	bl	9970 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    be68:	e284100c 	add	r1, r4, #12
    be6c:	e59f00a4 	ldr	r0, [pc, #164]	; bf18 <CDWHCIDevice::DumpStatus(unsigned int)+0x19c>
    be70:	ebfff6be 	bl	9970 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    be74:	e2841010 	add	r1, r4, #16
    be78:	e59f009c 	ldr	r0, [pc, #156]	; bf1c <CDWHCIDevice::DumpStatus(unsigned int)+0x1a0>
    be7c:	ebfff6bb 	bl	9970 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    be80:	e2841014 	add	r1, r4, #20
    be84:	e59f0094 	ldr	r0, [pc, #148]	; bf20 <CDWHCIDevice::DumpStatus(unsigned int)+0x1a4>
    be88:	e8bd4070 	pop	{r4, r5, r6, lr}
    be8c:	eafff6b7 	b	9970 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    be90:	000234d8 	.word	0x000234d8
    be94:	20980000 	.word	0x20980000
    be98:	20980008 	.word	0x20980008
    be9c:	000234e4 	.word	0x000234e4
    bea0:	2098000c 	.word	0x2098000c
    bea4:	000234ec 	.word	0x000234ec
    bea8:	20980010 	.word	0x20980010
    beac:	000234f4 	.word	0x000234f4
    beb0:	20980014 	.word	0x20980014
    beb4:	000234fc 	.word	0x000234fc
    beb8:	20980018 	.word	0x20980018
    bebc:	00023508 	.word	0x00023508
    bec0:	20980024 	.word	0x20980024
    bec4:	00023514 	.word	0x00023514
    bec8:	20980028 	.word	0x20980028
    becc:	00023520 	.word	0x00023520
    bed0:	2098002c 	.word	0x2098002c
    bed4:	00023534 	.word	0x00023534
    bed8:	20980100 	.word	0x20980100
    bedc:	00023544 	.word	0x00023544
    bee0:	20980400 	.word	0x20980400
    bee4:	0002355c 	.word	0x0002355c
    bee8:	0104c028 	.word	0x0104c028
    beec:	20980410 	.word	0x20980410
    bef0:	00023568 	.word	0x00023568
    bef4:	20980414 	.word	0x20980414
    bef8:	00023580 	.word	0x00023580
    befc:	20980418 	.word	0x20980418
    bf00:	00023594 	.word	0x00023594
    bf04:	20980440 	.word	0x20980440
    bf08:	000235ac 	.word	0x000235ac
    bf0c:	000235b8 	.word	0x000235b8
    bf10:	000235d0 	.word	0x000235d0
    bf14:	000235e8 	.word	0x000235e8
    bf18:	000235fc 	.word	0x000235fc
    bf1c:	00023614 	.word	0x00023614
    bf20:	0002362c 	.word	0x0002362c

0000bf24 <CDWHCIRegister::CDWHCIRegister(unsigned int)>:
    bf24:	e3a02000 	mov	r2, #0
    bf28:	e5801004 	str	r1, [r0, #4]
    bf2c:	e5c02000 	strb	r2, [r0]
    bf30:	e12fff1e 	bx	lr

0000bf34 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>:
    bf34:	e3a0c001 	mov	ip, #1
    bf38:	e9800006 	stmib	r0, {r1, r2}
    bf3c:	e5c0c000 	strb	ip, [r0]
    bf40:	e12fff1e 	bx	lr

0000bf44 <CDWHCIRegister::~CDWHCIRegister()>:
    bf44:	e12fff1e 	bx	lr

0000bf48 <CDWHCIRegister::Read()>:
    bf48:	e1a03000 	mov	r3, r0
    bf4c:	e3a02001 	mov	r2, #1
    bf50:	e5901004 	ldr	r1, [r0, #4]
    bf54:	e5910000 	ldr	r0, [r1]
    bf58:	e5c32000 	strb	r2, [r3]
    bf5c:	e5830008 	str	r0, [r3, #8]
    bf60:	e12fff1e 	bx	lr

0000bf64 <CDWHCIRegister::Write()>:
    bf64:	e5d03000 	ldrb	r3, [r0]
    bf68:	e92d4010 	push	{r4, lr}
    bf6c:	e3530000 	cmp	r3, #0
    bf70:	e1a04000 	mov	r4, r0
    bf74:	1a000003 	bne	bf88 <CDWHCIRegister::Write()+0x24>
    bf78:	e3a02035 	mov	r2, #53	; 0x35
    bf7c:	e59f1014 	ldr	r1, [pc, #20]	; bf98 <CDWHCIRegister::Write()+0x34>
    bf80:	e59f0014 	ldr	r0, [pc, #20]	; bf9c <CDWHCIRegister::Write()+0x38>
    bf84:	eb003872 	bl	1a154 <assertion_failed>
    bf88:	e5942008 	ldr	r2, [r4, #8]
    bf8c:	e5943004 	ldr	r3, [r4, #4]
    bf90:	e5832000 	str	r2, [r3]
    bf94:	e8bd8010 	pop	{r4, pc}
    bf98:	00023644 	.word	0x00023644
    bf9c:	00023658 	.word	0x00023658

0000bfa0 <CDWHCIRegister::Get() const>:
    bfa0:	e5d03000 	ldrb	r3, [r0]
    bfa4:	e92d4010 	push	{r4, lr}
    bfa8:	e3530000 	cmp	r3, #0
    bfac:	e1a04000 	mov	r4, r0
    bfb0:	1a000003 	bne	bfc4 <CDWHCIRegister::Get() const+0x24>
    bfb4:	e3a0203b 	mov	r2, #59	; 0x3b
    bfb8:	e59f100c 	ldr	r1, [pc, #12]	; bfcc <CDWHCIRegister::Get() const+0x2c>
    bfbc:	e59f000c 	ldr	r0, [pc, #12]	; bfd0 <CDWHCIRegister::Get() const+0x30>
    bfc0:	eb003863 	bl	1a154 <assertion_failed>
    bfc4:	e5940008 	ldr	r0, [r4, #8]
    bfc8:	e8bd8010 	pop	{r4, pc}
    bfcc:	00023644 	.word	0x00023644
    bfd0:	00023658 	.word	0x00023658

0000bfd4 <CDWHCIRegister::Set(unsigned int)>:
    bfd4:	e3a03001 	mov	r3, #1
    bfd8:	e5801008 	str	r1, [r0, #8]
    bfdc:	e5c03000 	strb	r3, [r0]
    bfe0:	e12fff1e 	bx	lr

0000bfe4 <CDWHCIRegister::IsSet(unsigned int) const>:
    bfe4:	e5d03000 	ldrb	r3, [r0]
    bfe8:	e92d4070 	push	{r4, r5, r6, lr}
    bfec:	e3530000 	cmp	r3, #0
    bff0:	e1a04000 	mov	r4, r0
    bff4:	e1a05001 	mov	r5, r1
    bff8:	1a000003 	bne	c00c <CDWHCIRegister::IsSet(unsigned int) const+0x28>
    bffc:	e3a02047 	mov	r2, #71	; 0x47
    c000:	e59f1018 	ldr	r1, [pc, #24]	; c020 <CDWHCIRegister::IsSet(unsigned int) const+0x3c>
    c004:	e59f0018 	ldr	r0, [pc, #24]	; c024 <CDWHCIRegister::IsSet(unsigned int) const+0x40>
    c008:	eb003851 	bl	1a154 <assertion_failed>
    c00c:	e5943008 	ldr	r3, [r4, #8]
    c010:	e1150003 	tst	r5, r3
    c014:	13a00001 	movne	r0, #1
    c018:	03a00000 	moveq	r0, #0
    c01c:	e8bd8070 	pop	{r4, r5, r6, pc}
    c020:	00023644 	.word	0x00023644
    c024:	00023658 	.word	0x00023658

0000c028 <CDWHCIRegister::And(unsigned int)>:
    c028:	e5d03000 	ldrb	r3, [r0]
    c02c:	e92d4070 	push	{r4, r5, r6, lr}
    c030:	e3530000 	cmp	r3, #0
    c034:	e1a04000 	mov	r4, r0
    c038:	e1a05001 	mov	r5, r1
    c03c:	1a000003 	bne	c050 <CDWHCIRegister::And(unsigned int)+0x28>
    c040:	e3a0204d 	mov	r2, #77	; 0x4d
    c044:	e59f1014 	ldr	r1, [pc, #20]	; c060 <CDWHCIRegister::And(unsigned int)+0x38>
    c048:	e59f0014 	ldr	r0, [pc, #20]	; c064 <CDWHCIRegister::And(unsigned int)+0x3c>
    c04c:	eb003840 	bl	1a154 <assertion_failed>
    c050:	e5941008 	ldr	r1, [r4, #8]
    c054:	e0011005 	and	r1, r1, r5
    c058:	e5841008 	str	r1, [r4, #8]
    c05c:	e8bd8070 	pop	{r4, r5, r6, pc}
    c060:	00023644 	.word	0x00023644
    c064:	00023658 	.word	0x00023658

0000c068 <CDWHCIRegister::Or(unsigned int)>:
    c068:	e5d03000 	ldrb	r3, [r0]
    c06c:	e92d4070 	push	{r4, r5, r6, lr}
    c070:	e3530000 	cmp	r3, #0
    c074:	e1a04000 	mov	r4, r0
    c078:	e1a05001 	mov	r5, r1
    c07c:	1a000003 	bne	c090 <CDWHCIRegister::Or(unsigned int)+0x28>
    c080:	e3a02053 	mov	r2, #83	; 0x53
    c084:	e59f1014 	ldr	r1, [pc, #20]	; c0a0 <CDWHCIRegister::Or(unsigned int)+0x38>
    c088:	e59f0014 	ldr	r0, [pc, #20]	; c0a4 <CDWHCIRegister::Or(unsigned int)+0x3c>
    c08c:	eb003830 	bl	1a154 <assertion_failed>
    c090:	e5941008 	ldr	r1, [r4, #8]
    c094:	e1811005 	orr	r1, r1, r5
    c098:	e5841008 	str	r1, [r4, #8]
    c09c:	e8bd8070 	pop	{r4, r5, r6, pc}
    c0a0:	00023644 	.word	0x00023644
    c0a4:	00023658 	.word	0x00023658

0000c0a8 <CDWHCIRegister::ClearBit(unsigned int)>:
    c0a8:	e5d03000 	ldrb	r3, [r0]
    c0ac:	e92d4070 	push	{r4, r5, r6, lr}
    c0b0:	e3530000 	cmp	r3, #0
    c0b4:	e1a04000 	mov	r4, r0
    c0b8:	e1a05001 	mov	r5, r1
    c0bc:	0a00000a 	beq	c0ec <CDWHCIRegister::ClearBit(unsigned int)+0x44>
    c0c0:	e355001f 	cmp	r5, #31
    c0c4:	9a000003 	bls	c0d8 <CDWHCIRegister::ClearBit(unsigned int)+0x30>
    c0c8:	e3a0205a 	mov	r2, #90	; 0x5a
    c0cc:	e59f102c 	ldr	r1, [pc, #44]	; c100 <CDWHCIRegister::ClearBit(unsigned int)+0x58>
    c0d0:	e59f002c 	ldr	r0, [pc, #44]	; c104 <CDWHCIRegister::ClearBit(unsigned int)+0x5c>
    c0d4:	eb00381e 	bl	1a154 <assertion_failed>
    c0d8:	e3a03001 	mov	r3, #1
    c0dc:	e5941008 	ldr	r1, [r4, #8]
    c0e0:	e1c11513 	bic	r1, r1, r3, lsl r5
    c0e4:	e5841008 	str	r1, [r4, #8]
    c0e8:	e8bd8070 	pop	{r4, r5, r6, pc}
    c0ec:	e3a02059 	mov	r2, #89	; 0x59
    c0f0:	e59f1008 	ldr	r1, [pc, #8]	; c100 <CDWHCIRegister::ClearBit(unsigned int)+0x58>
    c0f4:	e59f000c 	ldr	r0, [pc, #12]	; c108 <CDWHCIRegister::ClearBit(unsigned int)+0x60>
    c0f8:	eb003815 	bl	1a154 <assertion_failed>
    c0fc:	eaffffef 	b	c0c0 <CDWHCIRegister::ClearBit(unsigned int)+0x18>
    c100:	00023644 	.word	0x00023644
    c104:	00023664 	.word	0x00023664
    c108:	00023658 	.word	0x00023658

0000c10c <CDWHCIRegister::SetBit(unsigned int)>:
    c10c:	e5d03000 	ldrb	r3, [r0]
    c110:	e92d4070 	push	{r4, r5, r6, lr}
    c114:	e3530000 	cmp	r3, #0
    c118:	e1a04000 	mov	r4, r0
    c11c:	e1a05001 	mov	r5, r1
    c120:	0a00000a 	beq	c150 <CDWHCIRegister::SetBit(unsigned int)+0x44>
    c124:	e355001f 	cmp	r5, #31
    c128:	9a000003 	bls	c13c <CDWHCIRegister::SetBit(unsigned int)+0x30>
    c12c:	e3a02061 	mov	r2, #97	; 0x61
    c130:	e59f102c 	ldr	r1, [pc, #44]	; c164 <CDWHCIRegister::SetBit(unsigned int)+0x58>
    c134:	e59f002c 	ldr	r0, [pc, #44]	; c168 <CDWHCIRegister::SetBit(unsigned int)+0x5c>
    c138:	eb003805 	bl	1a154 <assertion_failed>
    c13c:	e3a03001 	mov	r3, #1
    c140:	e5941008 	ldr	r1, [r4, #8]
    c144:	e1811513 	orr	r1, r1, r3, lsl r5
    c148:	e5841008 	str	r1, [r4, #8]
    c14c:	e8bd8070 	pop	{r4, r5, r6, pc}
    c150:	e3a02060 	mov	r2, #96	; 0x60
    c154:	e59f1008 	ldr	r1, [pc, #8]	; c164 <CDWHCIRegister::SetBit(unsigned int)+0x58>
    c158:	e59f000c 	ldr	r0, [pc, #12]	; c16c <CDWHCIRegister::SetBit(unsigned int)+0x60>
    c15c:	eb0037fc 	bl	1a154 <assertion_failed>
    c160:	eaffffef 	b	c124 <CDWHCIRegister::SetBit(unsigned int)+0x18>
    c164:	00023644 	.word	0x00023644
    c168:	00023664 	.word	0x00023664
    c16c:	00023658 	.word	0x00023658

0000c170 <CDWHCIRegister::ClearAll()>:
    c170:	e3a02000 	mov	r2, #0
    c174:	e3a03001 	mov	r3, #1
    c178:	e5802008 	str	r2, [r0, #8]
    c17c:	e5c03000 	strb	r3, [r0]
    c180:	e12fff1e 	bx	lr

0000c184 <CDWHCIRegister::SetAll()>:
    c184:	e3e02000 	mvn	r2, #0
    c188:	e3a03001 	mov	r3, #1
    c18c:	e5802008 	str	r2, [r0, #8]
    c190:	e5c03000 	strb	r3, [r0]
    c194:	e12fff1e 	bx	lr

0000c198 <CDWHCIRegister::Dump() const>:
    c198:	e92d4010 	push	{r4, lr}
    c19c:	e5d03000 	ldrb	r3, [r0]
    c1a0:	e24dd008 	sub	sp, sp, #8
    c1a4:	e3530000 	cmp	r3, #0
    c1a8:	e1a04000 	mov	r4, r0
    c1ac:	1a00000a 	bne	c1dc <CDWHCIRegister::Dump() const+0x44>
    c1b0:	eb0041da 	bl	1c920 <CLogger::Get()>
    c1b4:	e5942004 	ldr	r2, [r4, #4]
    c1b8:	e59f3050 	ldr	r3, [pc, #80]	; c210 <CDWHCIRegister::Dump() const+0x78>
    c1bc:	e1a02a02 	lsl	r2, r2, #20
    c1c0:	e1a02a22 	lsr	r2, r2, #20
    c1c4:	e58d2000 	str	r2, [sp]
    c1c8:	e59f1044 	ldr	r1, [pc, #68]	; c214 <CDWHCIRegister::Dump() const+0x7c>
    c1cc:	e3a02004 	mov	r2, #4
    c1d0:	eb00437b 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c1d4:	e28dd008 	add	sp, sp, #8
    c1d8:	e8bd8010 	pop	{r4, pc}
    c1dc:	eb0041cf 	bl	1c920 <CLogger::Get()>
    c1e0:	e5943004 	ldr	r3, [r4, #4]
    c1e4:	e5942008 	ldr	r2, [r4, #8]
    c1e8:	e1a03a03 	lsl	r3, r3, #20
    c1ec:	e1a03a23 	lsr	r3, r3, #20
    c1f0:	e58d3000 	str	r3, [sp]
    c1f4:	e58d2004 	str	r2, [sp, #4]
    c1f8:	e59f3018 	ldr	r3, [pc, #24]	; c218 <CDWHCIRegister::Dump() const+0x80>
    c1fc:	e3a02004 	mov	r2, #4
    c200:	e59f100c 	ldr	r1, [pc, #12]	; c214 <CDWHCIRegister::Dump() const+0x7c>
    c204:	eb00436e 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c208:	e28dd008 	add	sp, sp, #8
    c20c:	e8bd8010 	pop	{r4, pc}
    c210:	000236a4 	.word	0x000236a4
    c214:	0002369c 	.word	0x0002369c
    c218:	00023680 	.word	0x00023680

0000c21c <CDWHCITransferStageData::~CDWHCITransferStageData()>:
    c21c:	e92d4010 	push	{r4, lr}
    c220:	e1a04000 	mov	r4, r0
    c224:	e5900050 	ldr	r0, [r0, #80]	; 0x50
    c228:	e3500000 	cmp	r0, #0
    c22c:	0a000002 	beq	c23c <CDWHCITransferStageData::~CDWHCITransferStageData()+0x20>
    c230:	e5903000 	ldr	r3, [r0]
    c234:	e5933004 	ldr	r3, [r3, #4]
    c238:	e12fff33 	blx	r3
    c23c:	e3a03000 	mov	r3, #0
    c240:	e5940044 	ldr	r0, [r4, #68]	; 0x44
    c244:	e5843050 	str	r3, [r4, #80]	; 0x50
    c248:	e1500003 	cmp	r0, r3
    c24c:	e5843048 	str	r3, [r4, #72]	; 0x48
    c250:	0a000000 	beq	c258 <CDWHCITransferStageData::~CDWHCITransferStageData()+0x3c>
    c254:	eb005555 	bl	217b0 <operator delete[](void*)>
    c258:	e1a00004 	mov	r0, r4
    c25c:	e8bd8010 	pop	{r4, pc}

0000c260 <CDWHCITransferStageData::SetChannelNumber(unsigned int)>:
    c260:	e5801000 	str	r1, [r0]
    c264:	e12fff1e 	bx	lr

0000c268 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)>:
    c268:	e92d4070 	push	{r4, r5, r6, lr}
    c26c:	e1a04000 	mov	r4, r0
    c270:	e59f0194 	ldr	r0, [pc, #404]	; c40c <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x1a4>
    c274:	e5841040 	str	r1, [r4, #64]	; 0x40
    c278:	e0000001 	and	r0, r0, r1
    c27c:	e3500000 	cmp	r0, #0
    c280:	0a000006 	beq	c2a0 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x38>
    c284:	e3110010 	tst	r1, #16
    c288:	08bd8070 	popeq	{r4, r5, r6, pc}
    c28c:	e5940004 	ldr	r0, [r4, #4]
    c290:	eb0008e0 	bl	e618 <CUSBRequest::IsCompleteOnNAK() const>
    c294:	e3500000 	cmp	r0, #0
    c298:	1a000041 	bne	c3a4 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x13c>
    c29c:	e8bd8070 	pop	{r4, r5, r6, pc}
    c2a0:	e5d40010 	ldrb	r0, [r4, #16]
    c2a4:	e5945030 	ldr	r5, [r4, #48]	; 0x30
    c2a8:	e594102c 	ldr	r1, [r4, #44]	; 0x2c
    c2ac:	e3500000 	cmp	r0, #0
    c2b0:	e0455002 	sub	r5, r5, r2
    c2b4:	e0413003 	sub	r3, r1, r3
    c2b8:	1a000018 	bne	c320 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0xb8>
    c2bc:	e5941034 	ldr	r1, [r4, #52]	; 0x34
    c2c0:	e5942048 	ldr	r2, [r4, #72]	; 0x48
    c2c4:	e0811003 	add	r1, r1, r3
    c2c8:	e0823003 	add	r3, r2, r3
    c2cc:	e5841034 	str	r1, [r4, #52]	; 0x34
    c2d0:	e5843048 	str	r3, [r4, #72]	; 0x48
    c2d4:	e5d42009 	ldrb	r2, [r4, #9]
    c2d8:	e1a01005 	mov	r1, r5
    c2dc:	e5940018 	ldr	r0, [r4, #24]
    c2e0:	eb00076e 	bl	e0a0 <CUSBEndpoint::SkipPID(unsigned int, bool)>
    c2e4:	e5942028 	ldr	r2, [r4, #40]	; 0x28
    c2e8:	e1550002 	cmp	r5, r2
    c2ec:	8a000026 	bhi	c38c <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x124>
    c2f0:	e5940024 	ldr	r0, [r4, #36]	; 0x24
    c2f4:	e5941034 	ldr	r1, [r4, #52]	; 0x34
    c2f8:	e594c02c 	ldr	ip, [r4, #44]	; 0x2c
    c2fc:	e0403001 	sub	r3, r0, r1
    c300:	e0422005 	sub	r2, r2, r5
    c304:	e153000c 	cmp	r3, ip
    c308:	e5842028 	str	r2, [r4, #40]	; 0x28
    c30c:	28bd8070 	popcs	{r4, r5, r6, pc}
    c310:	e1500001 	cmp	r0, r1
    c314:	3a000034 	bcc	c3ec <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x184>
    c318:	e584302c 	str	r3, [r4, #44]	; 0x2c
    c31c:	e8bd8070 	pop	{r4, r5, r6, pc}
    c320:	e5d40011 	ldrb	r0, [r4, #17]
    c324:	e3530000 	cmp	r3, #0
    c328:	13a02000 	movne	r2, #0
    c32c:	02002001 	andeq	r2, r0, #1
    c330:	e3520000 	cmp	r2, #0
    c334:	0a000009 	beq	c360 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0xf8>
    c338:	e3510000 	cmp	r1, #0
    c33c:	15941020 	ldrne	r1, [r4, #32]
    c340:	10010591 	mulne	r1, r1, r5
    c344:	e5942034 	ldr	r2, [r4, #52]	; 0x34
    c348:	e5943048 	ldr	r3, [r4, #72]	; 0x48
    c34c:	e0822001 	add	r2, r2, r1
    c350:	e0831001 	add	r1, r3, r1
    c354:	e5842034 	str	r2, [r4, #52]	; 0x34
    c358:	e5841048 	str	r1, [r4, #72]	; 0x48
    c35c:	eaffffdc 	b	c2d4 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x6c>
    c360:	e5941034 	ldr	r1, [r4, #52]	; 0x34
    c364:	e5942048 	ldr	r2, [r4, #72]	; 0x48
    c368:	e0811003 	add	r1, r1, r3
    c36c:	e3500000 	cmp	r0, #0
    c370:	e0823003 	add	r3, r2, r3
    c374:	e5841034 	str	r1, [r4, #52]	; 0x34
    c378:	e5843048 	str	r3, [r4, #72]	; 0x48
    c37c:	1affffd4 	bne	c2d4 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x6c>
    c380:	e5942028 	ldr	r2, [r4, #40]	; 0x28
    c384:	e1550002 	cmp	r5, r2
    c388:	9affffd8 	bls	c2f0 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x88>
    c38c:	e3a020d6 	mov	r2, #214	; 0xd6
    c390:	e59f1078 	ldr	r1, [pc, #120]	; c410 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x1a8>
    c394:	e59f0078 	ldr	r0, [pc, #120]	; c414 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x1ac>
    c398:	eb00376d 	bl	1a154 <assertion_failed>
    c39c:	e5942028 	ldr	r2, [r4, #40]	; 0x28
    c3a0:	eaffffd2 	b	c2f0 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x88>
    c3a4:	e5940018 	ldr	r0, [r4, #24]
    c3a8:	eb000715 	bl	e004 <CUSBEndpoint::GetType() const>
    c3ac:	e3500001 	cmp	r0, #1
    c3b0:	0a000003 	beq	c3c4 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x15c>
    c3b4:	e3a020b9 	mov	r2, #185	; 0xb9
    c3b8:	e59f1050 	ldr	r1, [pc, #80]	; c410 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x1a8>
    c3bc:	e59f0054 	ldr	r0, [pc, #84]	; c418 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x1b0>
    c3c0:	eb003763 	bl	1a154 <assertion_failed>
    c3c4:	e5d43008 	ldrb	r3, [r4, #8]
    c3c8:	e3530000 	cmp	r3, #0
    c3cc:	1a000003 	bne	c3e0 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x178>
    c3d0:	e3a020ba 	mov	r2, #186	; 0xba
    c3d4:	e59f1034 	ldr	r1, [pc, #52]	; c410 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x1a8>
    c3d8:	e59f003c 	ldr	r0, [pc, #60]	; c41c <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x1b4>
    c3dc:	eb00375c 	bl	1a154 <assertion_failed>
    c3e0:	e3a03000 	mov	r3, #0
    c3e4:	e5843028 	str	r3, [r4, #40]	; 0x28
    c3e8:	e8bd8070 	pop	{r4, r5, r6, pc}
    c3ec:	e3a020dc 	mov	r2, #220	; 0xdc
    c3f0:	e59f1018 	ldr	r1, [pc, #24]	; c410 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x1a8>
    c3f4:	e59f0024 	ldr	r0, [pc, #36]	; c420 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x1b8>
    c3f8:	eb003755 	bl	1a154 <assertion_failed>
    c3fc:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    c400:	e5942034 	ldr	r2, [r4, #52]	; 0x34
    c404:	e0433002 	sub	r3, r3, r2
    c408:	eaffffc2 	b	c318 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0xb0>
    c40c:	000007dc 	.word	0x000007dc
    c410:	000236c4 	.word	0x000236c4
    c414:	00023710 	.word	0x00023710
    c418:	000236dc 	.word	0x000236dc
    c41c:	00023708 	.word	0x00023708
    c420:	00023734 	.word	0x00023734

0000c424 <CDWHCITransferStageData::SetSplitComplete(bool)>:
    c424:	e5d03010 	ldrb	r3, [r0, #16]
    c428:	e92d4070 	push	{r4, r5, r6, lr}
    c42c:	e3530000 	cmp	r3, #0
    c430:	e1a04000 	mov	r4, r0
    c434:	e1a05001 	mov	r5, r1
    c438:	1a000003 	bne	c44c <CDWHCITransferStageData::SetSplitComplete(bool)+0x28>
    c43c:	e3a020e3 	mov	r2, #227	; 0xe3
    c440:	e59f100c 	ldr	r1, [pc, #12]	; c454 <CDWHCITransferStageData::SetSplitComplete(bool)+0x30>
    c444:	e59f000c 	ldr	r0, [pc, #12]	; c458 <CDWHCITransferStageData::SetSplitComplete(bool)+0x34>
    c448:	eb003741 	bl	1a154 <assertion_failed>
    c44c:	e5c45011 	strb	r5, [r4, #17]
    c450:	e8bd8070 	pop	{r4, r5, r6, pc}
    c454:	000236c4 	.word	0x000236c4
    c458:	00023760 	.word	0x00023760

0000c45c <CDWHCITransferStageData::SetState(unsigned int)>:
    c45c:	e5801038 	str	r1, [r0, #56]	; 0x38
    c460:	e12fff1e 	bx	lr

0000c464 <CDWHCITransferStageData::GetState() const>:
    c464:	e5900038 	ldr	r0, [r0, #56]	; 0x38
    c468:	e12fff1e 	bx	lr

0000c46c <CDWHCITransferStageData::SetSubState(unsigned int)>:
    c46c:	e580103c 	str	r1, [r0, #60]	; 0x3c
    c470:	e12fff1e 	bx	lr

0000c474 <CDWHCITransferStageData::GetSubState() const>:
    c474:	e590003c 	ldr	r0, [r0, #60]	; 0x3c
    c478:	e12fff1e 	bx	lr

0000c47c <CDWHCITransferStageData::BeginSplitCycle()>:
    c47c:	e3a00001 	mov	r0, #1
    c480:	e12fff1e 	bx	lr

0000c484 <CDWHCITransferStageData::GetChannelNumber() const>:
    c484:	e5900000 	ldr	r0, [r0]
    c488:	e12fff1e 	bx	lr

0000c48c <CDWHCITransferStageData::IsPeriodic() const>:
    c48c:	e92d4010 	push	{r4, lr}
    c490:	e1a04000 	mov	r4, r0
    c494:	e5900018 	ldr	r0, [r0, #24]
    c498:	e3500000 	cmp	r0, #0
    c49c:	0a000006 	beq	c4bc <CDWHCITransferStageData::IsPeriodic() const+0x30>
    c4a0:	eb0006d7 	bl	e004 <CUSBEndpoint::GetType() const>
    c4a4:	e2400002 	sub	r0, r0, #2
    c4a8:	e6ef0070 	uxtb	r0, r0
    c4ac:	e3500001 	cmp	r0, #1
    c4b0:	83a00000 	movhi	r0, #0
    c4b4:	93a00001 	movls	r0, #1
    c4b8:	e8bd8010 	pop	{r4, pc}
    c4bc:	e59f0010 	ldr	r0, [pc, #16]	; c4d4 <CDWHCITransferStageData::IsPeriodic() const+0x48>
    c4c0:	e3a02f42 	mov	r2, #264	; 0x108
    c4c4:	e59f100c 	ldr	r1, [pc, #12]	; c4d8 <CDWHCITransferStageData::IsPeriodic() const+0x4c>
    c4c8:	eb003721 	bl	1a154 <assertion_failed>
    c4cc:	e5940018 	ldr	r0, [r4, #24]
    c4d0:	eafffff2 	b	c4a0 <CDWHCITransferStageData::IsPeriodic() const+0x14>
    c4d4:	00023774 	.word	0x00023774
    c4d8:	000236c4 	.word	0x000236c4

0000c4dc <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)>:
    c4dc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c4e0:	e1a05002 	mov	r5, r2
    c4e4:	e3a02000 	mov	r2, #0
    c4e8:	e5dd6018 	ldrb	r6, [sp, #24]
    c4ec:	e1550002 	cmp	r5, r2
    c4f0:	e1a04000 	mov	r4, r0
    c4f4:	e8800022 	stm	r0, {r1, r5}
    c4f8:	e5c03008 	strb	r3, [r0, #8]
    c4fc:	e5c06009 	strb	r6, [r0, #9]
    c500:	e580200c 	str	r2, [r0, #12]
    c504:	e5c02011 	strb	r2, [r0, #17]
    c508:	e5802034 	str	r2, [r0, #52]	; 0x34
    c50c:	e5802038 	str	r2, [r0, #56]	; 0x38
    c510:	e580203c 	str	r2, [r0, #60]	; 0x3c
    c514:	e5802040 	str	r2, [r0, #64]	; 0x40
    c518:	e5802044 	str	r2, [r0, #68]	; 0x44
    c51c:	e580204c 	str	r2, [r0, #76]	; 0x4c
    c520:	e5802050 	str	r2, [r0, #80]	; 0x50
    c524:	e59d701c 	ldr	r7, [sp, #28]
    c528:	0a000098 	beq	c790 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2b4>
    c52c:	e1a00005 	mov	r0, r5
    c530:	eb0007c9 	bl	e45c <CUSBRequest::GetEndpoint() const>
    c534:	e3500000 	cmp	r0, #0
    c538:	e5840018 	str	r0, [r4, #24]
    c53c:	0a000098 	beq	c7a4 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2c8>
    c540:	eb00069d 	bl	dfbc <CUSBEndpoint::GetDevice() const>
    c544:	e3500000 	cmp	r0, #0
    c548:	e5840014 	str	r0, [r4, #20]
    c54c:	0a00009a 	beq	c7bc <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2e0>
    c550:	eb00033d 	bl	d24c <CUSBDevice::GetSpeed() const>
    c554:	e5c4001c 	strb	r0, [r4, #28]
    c558:	e5940018 	ldr	r0, [r4, #24]
    c55c:	eb0006ae 	bl	e01c <CUSBEndpoint::GetMaxPacketSize() const>
    c560:	e5840020 	str	r0, [r4, #32]
    c564:	e5940014 	ldr	r0, [r4, #20]
    c568:	eb000339 	bl	d254 <CUSBDevice::IsSplit() const>
    c56c:	e3560000 	cmp	r6, #0
    c570:	e5c40010 	strb	r0, [r4, #16]
    c574:	0a00004f 	beq	c6b8 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x1dc>
    c578:	e5943044 	ldr	r3, [r4, #68]	; 0x44
    c57c:	e3530000 	cmp	r3, #0
    c580:	0a000003 	beq	c594 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0xb8>
    c584:	e3a02061 	mov	r2, #97	; 0x61
    c588:	e59f1244 	ldr	r1, [pc, #580]	; c7d4 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2f8>
    c58c:	e59f0244 	ldr	r0, [pc, #580]	; c7d8 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2fc>
    c590:	eb0036ef 	bl	1a154 <assertion_failed>
    c594:	e3a00004 	mov	r0, #4
    c598:	eb005482 	bl	217a8 <operator new[](unsigned int)>
    c59c:	e3a02000 	mov	r2, #0
    c5a0:	e3a03001 	mov	r3, #1
    c5a4:	e5840044 	str	r0, [r4, #68]	; 0x44
    c5a8:	e5840048 	str	r0, [r4, #72]	; 0x48
    c5ac:	e5842024 	str	r2, [r4, #36]	; 0x24
    c5b0:	e584202c 	str	r2, [r4, #44]	; 0x2c
    c5b4:	e5843028 	str	r3, [r4, #40]	; 0x28
    c5b8:	e5843030 	str	r3, [r4, #48]	; 0x30
    c5bc:	e3100003 	tst	r0, #3
    c5c0:	1a00005f 	bne	c744 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x268>
    c5c4:	e5d43010 	ldrb	r3, [r4, #16]
    c5c8:	e3530000 	cmp	r3, #0
    c5cc:	0a00000c 	beq	c604 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x128>
    c5d0:	e1a00004 	mov	r0, r4
    c5d4:	ebffffac 	bl	c48c <CDWHCITransferStageData::IsPeriodic() const>
    c5d8:	e3500000 	cmp	r0, #0
    c5dc:	0a00002f 	beq	c6a0 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x1c4>
    c5e0:	e3a00014 	mov	r0, #20
    c5e4:	eb001120 	bl	10a6c <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)>
    c5e8:	e1a05000 	mov	r5, r0
    c5ec:	eb001108 	bl	10a14 <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()>
    c5f0:	e5845050 	str	r5, [r4, #80]	; 0x50
    c5f4:	e3570000 	cmp	r7, #0
    c5f8:	1a000013 	bne	c64c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x170>
    c5fc:	e1a00004 	mov	r0, r4
    c600:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    c604:	e5940014 	ldr	r0, [r4, #20]
    c608:	eb000313 	bl	d25c <CUSBDevice::GetHubAddress() const>
    c60c:	e3500000 	cmp	r0, #0
    c610:	1afffff7 	bne	c5f4 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x118>
    c614:	e5d4301c 	ldrb	r3, [r4, #28]
    c618:	e3530002 	cmp	r3, #2
    c61c:	0afffff4 	beq	c5f4 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x118>
    c620:	e1a00004 	mov	r0, r4
    c624:	ebffff98 	bl	c48c <CDWHCITransferStageData::IsPeriodic() const>
    c628:	e1a06000 	mov	r6, r0
    c62c:	e3a00008 	mov	r0, #8
    c630:	eb0020fa 	bl	14a20 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)>
    c634:	e1a05000 	mov	r5, r0
    c638:	e1a01006 	mov	r1, r6
    c63c:	eb0020f0 	bl	14a04 <CDWHCIFrameSchedulerNoSplit::CDWHCIFrameSchedulerNoSplit(bool)>
    c640:	e3570000 	cmp	r7, #0
    c644:	e5845050 	str	r5, [r4, #80]	; 0x50
    c648:	0affffeb 	beq	c5fc <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x120>
    c64c:	e5940018 	ldr	r0, [r4, #24]
    c650:	eb00066b 	bl	e004 <CUSBEndpoint::GetType() const>
    c654:	e3500002 	cmp	r0, #2
    c658:	0a000003 	beq	c66c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x190>
    c65c:	e3a02088 	mov	r2, #136	; 0x88
    c660:	e59f116c 	ldr	r1, [pc, #364]	; c7d4 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2f8>
    c664:	e59f0170 	ldr	r0, [pc, #368]	; c7dc <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x300>
    c668:	eb0036b9 	bl	1a154 <assertion_failed>
    c66c:	e3a03064 	mov	r3, #100	; 0x64
    c670:	e0030793 	mul	r3, r3, r7
    c674:	e59f2164 	ldr	r2, [pc, #356]	; c7e0 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x304>
    c678:	e0832392 	umull	r2, r3, r2, r3
    c67c:	e1a03323 	lsr	r3, r3, #6
    c680:	e3530000 	cmp	r3, #0
    c684:	e584300c 	str	r3, [r4, #12]
    c688:	0a00003b 	beq	c77c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2a0>
    c68c:	eb004fc7 	bl	205b0 <CTimer::Get()>
    c690:	eb004cff 	bl	1fa94 <CTimer::GetTicks() const>
    c694:	e584004c 	str	r0, [r4, #76]	; 0x4c
    c698:	e1a00004 	mov	r0, r4
    c69c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    c6a0:	e3a00010 	mov	r0, #16
    c6a4:	eb000fcc 	bl	105dc <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)>
    c6a8:	e1a05000 	mov	r5, r0
    c6ac:	eb000fb6 	bl	1058c <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()>
    c6b0:	e5845050 	str	r5, [r4, #80]	; 0x50
    c6b4:	eaffffce 	b	c5f4 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x118>
    c6b8:	e1a01006 	mov	r1, r6
    c6bc:	e5940018 	ldr	r0, [r4, #24]
    c6c0:	eb000664 	bl	e058 <CUSBEndpoint::GetNextPID(bool)>
    c6c4:	e3500000 	cmp	r0, #0
    c6c8:	e1a00005 	mov	r0, r5
    c6cc:	0a000021 	beq	c758 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x27c>
    c6d0:	eb00079b 	bl	e544 <CUSBRequest::GetBuffer()>
    c6d4:	e5840048 	str	r0, [r4, #72]	; 0x48
    c6d8:	e1a00005 	mov	r0, r5
    c6dc:	eb0007ab 	bl	e590 <CUSBRequest::GetBufLen() const>
    c6e0:	e1a05000 	mov	r5, r0
    c6e4:	e5840024 	str	r0, [r4, #36]	; 0x24
    c6e8:	e5946020 	ldr	r6, [r4, #32]
    c6ec:	e2460001 	sub	r0, r6, #1
    c6f0:	e0800005 	add	r0, r0, r5
    c6f4:	e1a01006 	mov	r1, r6
    c6f8:	ebfff421 	bl	9784 <__udivsi3>
    c6fc:	e5d43010 	ldrb	r3, [r4, #16]
    c700:	e5840028 	str	r0, [r4, #40]	; 0x28
    c704:	e3530000 	cmp	r3, #0
    c708:	0a000017 	beq	c76c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x290>
    c70c:	e1560005 	cmp	r6, r5
    c710:	31a05006 	movcc	r5, r6
    c714:	e3a03001 	mov	r3, #1
    c718:	e5940048 	ldr	r0, [r4, #72]	; 0x48
    c71c:	e584502c 	str	r5, [r4, #44]	; 0x2c
    c720:	e5843030 	str	r3, [r4, #48]	; 0x30
    c724:	e3500000 	cmp	r0, #0
    c728:	1affffa3 	bne	c5bc <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0xe0>
    c72c:	e59f00b0 	ldr	r0, [pc, #176]	; c7e4 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x308>
    c730:	e3a0206c 	mov	r2, #108	; 0x6c
    c734:	e59f1098 	ldr	r1, [pc, #152]	; c7d4 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2f8>
    c738:	eb003685 	bl	1a154 <assertion_failed>
    c73c:	e5940048 	ldr	r0, [r4, #72]	; 0x48
    c740:	eaffff9d 	b	c5bc <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0xe0>
    c744:	e3a0206d 	mov	r2, #109	; 0x6d
    c748:	e59f1084 	ldr	r1, [pc, #132]	; c7d4 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2f8>
    c74c:	e59f0094 	ldr	r0, [pc, #148]	; c7e8 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x30c>
    c750:	eb00367f 	bl	1a154 <assertion_failed>
    c754:	eaffff9a 	b	c5c4 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0xe8>
    c758:	eb000762 	bl	e4e8 <CUSBRequest::GetSetupData()>
    c75c:	e3a05008 	mov	r5, #8
    c760:	e5840048 	str	r0, [r4, #72]	; 0x48
    c764:	e5845024 	str	r5, [r4, #36]	; 0x24
    c768:	eaffffde 	b	c6e8 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x20c>
    c76c:	e5840030 	str	r0, [r4, #48]	; 0x30
    c770:	e584502c 	str	r5, [r4, #44]	; 0x2c
    c774:	e5940048 	ldr	r0, [r4, #72]	; 0x48
    c778:	eaffffe9 	b	c724 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x248>
    c77c:	e3a0208b 	mov	r2, #139	; 0x8b
    c780:	e59f104c 	ldr	r1, [pc, #76]	; c7d4 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2f8>
    c784:	e59f0060 	ldr	r0, [pc, #96]	; c7ec <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x310>
    c788:	eb003671 	bl	1a154 <assertion_failed>
    c78c:	eaffffbe 	b	c68c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x1b0>
    c790:	e3a02031 	mov	r2, #49	; 0x31
    c794:	e59f1038 	ldr	r1, [pc, #56]	; c7d4 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2f8>
    c798:	e59f0050 	ldr	r0, [pc, #80]	; c7f0 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x314>
    c79c:	eb00366c 	bl	1a154 <assertion_failed>
    c7a0:	eaffff61 	b	c52c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x50>
    c7a4:	e59f0048 	ldr	r0, [pc, #72]	; c7f4 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x318>
    c7a8:	e3a02034 	mov	r2, #52	; 0x34
    c7ac:	e59f1020 	ldr	r1, [pc, #32]	; c7d4 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2f8>
    c7b0:	eb003667 	bl	1a154 <assertion_failed>
    c7b4:	e5940018 	ldr	r0, [r4, #24]
    c7b8:	eaffff60 	b	c540 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x64>
    c7bc:	e59f0034 	ldr	r0, [pc, #52]	; c7f8 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x31c>
    c7c0:	e3a02036 	mov	r2, #54	; 0x36
    c7c4:	e59f1008 	ldr	r1, [pc, #8]	; c7d4 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2f8>
    c7c8:	eb003661 	bl	1a154 <assertion_failed>
    c7cc:	e5940014 	ldr	r0, [r4, #20]
    c7d0:	eaffff5e 	b	c550 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x74>
    c7d4:	000236c4 	.word	0x000236c4
    c7d8:	000237a4 	.word	0x000237a4
    c7dc:	000237f8 	.word	0x000237f8
    c7e0:	10624dd3 	.word	0x10624dd3
    c7e4:	000237b8 	.word	0x000237b8
    c7e8:	000237d0 	.word	0x000237d0
    c7ec:	0002382c 	.word	0x0002382c
    c7f0:	00023788 	.word	0x00023788
    c7f4:	00023774 	.word	0x00023774
    c7f8:	00023794 	.word	0x00023794

0000c7fc <CDWHCITransferStageData::GetDeviceAddress() const>:
    c7fc:	e5903014 	ldr	r3, [r0, #20]
    c800:	e3530000 	cmp	r3, #0
    c804:	0a000001 	beq	c810 <CDWHCITransferStageData::GetDeviceAddress() const+0x14>
    c808:	e1a00003 	mov	r0, r3
    c80c:	ea00028c 	b	d244 <CUSBDevice::GetAddress() const>
    c810:	e92d4010 	push	{r4, lr}
    c814:	e1a04000 	mov	r4, r0
    c818:	e59f2018 	ldr	r2, [pc, #24]	; c838 <CDWHCITransferStageData::GetDeviceAddress() const+0x3c>
    c81c:	e59f0018 	ldr	r0, [pc, #24]	; c83c <CDWHCITransferStageData::GetDeviceAddress() const+0x40>
    c820:	e59f1018 	ldr	r1, [pc, #24]	; c840 <CDWHCITransferStageData::GetDeviceAddress() const+0x44>
    c824:	eb00364a 	bl	1a154 <assertion_failed>
    c828:	e5943014 	ldr	r3, [r4, #20]
    c82c:	e8bd4010 	pop	{r4, lr}
    c830:	e1a00003 	mov	r0, r3
    c834:	ea000282 	b	d244 <CUSBDevice::GetAddress() const>
    c838:	00000111 	.word	0x00000111
    c83c:	00023794 	.word	0x00023794
    c840:	000236c4 	.word	0x000236c4

0000c844 <CDWHCITransferStageData::GetEndpointType() const>:
    c844:	e92d4010 	push	{r4, lr}
    c848:	e1a04000 	mov	r4, r0
    c84c:	e5900018 	ldr	r0, [r0, #24]
    c850:	e3500000 	cmp	r0, #0
    c854:	0a00000f 	beq	c898 <CDWHCITransferStageData::GetEndpointType() const+0x54>
    c858:	eb0005e9 	bl	e004 <CUSBEndpoint::GetType() const>
    c85c:	e3500001 	cmp	r0, #1
    c860:	0a00000a 	beq	c890 <CDWHCITransferStageData::GetEndpointType() const+0x4c>
    c864:	3a000007 	bcc	c888 <CDWHCITransferStageData::GetEndpointType() const+0x44>
    c868:	e3500002 	cmp	r0, #2
    c86c:	1a000001 	bne	c878 <CDWHCITransferStageData::GetEndpointType() const+0x34>
    c870:	e3a00003 	mov	r0, #3
    c874:	e8bd8010 	pop	{r4, pc}
    c878:	e59f2030 	ldr	r2, [pc, #48]	; c8b0 <CDWHCITransferStageData::GetEndpointType() const+0x6c>
    c87c:	e59f1030 	ldr	r1, [pc, #48]	; c8b4 <CDWHCITransferStageData::GetEndpointType() const+0x70>
    c880:	e59f0030 	ldr	r0, [pc, #48]	; c8b8 <CDWHCITransferStageData::GetEndpointType() const+0x74>
    c884:	eb003632 	bl	1a154 <assertion_failed>
    c888:	e3a00000 	mov	r0, #0
    c88c:	e8bd8010 	pop	{r4, pc}
    c890:	e3a00002 	mov	r0, #2
    c894:	e8bd8010 	pop	{r4, pc}
    c898:	e59f001c 	ldr	r0, [pc, #28]	; c8bc <CDWHCITransferStageData::GetEndpointType() const+0x78>
    c89c:	e59f201c 	ldr	r2, [pc, #28]	; c8c0 <CDWHCITransferStageData::GetEndpointType() const+0x7c>
    c8a0:	e59f100c 	ldr	r1, [pc, #12]	; c8b4 <CDWHCITransferStageData::GetEndpointType() const+0x70>
    c8a4:	eb00362a 	bl	1a154 <assertion_failed>
    c8a8:	e5940018 	ldr	r0, [r4, #24]
    c8ac:	eaffffe9 	b	c858 <CDWHCITransferStageData::GetEndpointType() const+0x14>
    c8b0:	0000012a 	.word	0x0000012a
    c8b4:	000236c4 	.word	0x000236c4
    c8b8:	000239a8 	.word	0x000239a8
    c8bc:	00023774 	.word	0x00023774
    c8c0:	00000117 	.word	0x00000117

0000c8c4 <CDWHCITransferStageData::GetEndpointNumber() const>:
    c8c4:	e5903018 	ldr	r3, [r0, #24]
    c8c8:	e3530000 	cmp	r3, #0
    c8cc:	0a000001 	beq	c8d8 <CDWHCITransferStageData::GetEndpointNumber() const+0x14>
    c8d0:	e1a00003 	mov	r0, r3
    c8d4:	ea0005c8 	b	dffc <CUSBEndpoint::GetNumber() const>
    c8d8:	e92d4010 	push	{r4, lr}
    c8dc:	e1a04000 	mov	r4, r0
    c8e0:	e59f2018 	ldr	r2, [pc, #24]	; c900 <CDWHCITransferStageData::GetEndpointNumber() const+0x3c>
    c8e4:	e59f0018 	ldr	r0, [pc, #24]	; c904 <CDWHCITransferStageData::GetEndpointNumber() const+0x40>
    c8e8:	e59f1018 	ldr	r1, [pc, #24]	; c908 <CDWHCITransferStageData::GetEndpointNumber() const+0x44>
    c8ec:	eb003618 	bl	1a154 <assertion_failed>
    c8f0:	e5943018 	ldr	r3, [r4, #24]
    c8f4:	e8bd4010 	pop	{r4, lr}
    c8f8:	e1a00003 	mov	r0, r3
    c8fc:	ea0005be 	b	dffc <CUSBEndpoint::GetNumber() const>
    c900:	00000133 	.word	0x00000133
    c904:	00023774 	.word	0x00023774
    c908:	000236c4 	.word	0x000236c4

0000c90c <CDWHCITransferStageData::GetMaxPacketSize() const>:
    c90c:	e5900020 	ldr	r0, [r0, #32]
    c910:	e12fff1e 	bx	lr

0000c914 <CDWHCITransferStageData::GetSpeed() const>:
    c914:	e5d0001c 	ldrb	r0, [r0, #28]
    c918:	e12fff1e 	bx	lr

0000c91c <CDWHCITransferStageData::GetPID() const>:
    c91c:	e92d4010 	push	{r4, lr}
    c920:	e1a04000 	mov	r4, r0
    c924:	e5900018 	ldr	r0, [r0, #24]
    c928:	e3500000 	cmp	r0, #0
    c92c:	0a000010 	beq	c974 <CDWHCITransferStageData::GetPID() const+0x58>
    c930:	e5d41009 	ldrb	r1, [r4, #9]
    c934:	eb0005c7 	bl	e058 <CUSBEndpoint::GetNextPID(bool)>
    c938:	e3500001 	cmp	r0, #1
    c93c:	0a00000a 	beq	c96c <CDWHCITransferStageData::GetPID() const+0x50>
    c940:	3a000007 	bcc	c964 <CDWHCITransferStageData::GetPID() const+0x48>
    c944:	e3500002 	cmp	r0, #2
    c948:	08bd8010 	popeq	{r4, pc}
    c94c:	e59f2038 	ldr	r2, [pc, #56]	; c98c <CDWHCITransferStageData::GetPID() const+0x70>
    c950:	e59f1038 	ldr	r1, [pc, #56]	; c990 <CDWHCITransferStageData::GetPID() const+0x74>
    c954:	e59f0038 	ldr	r0, [pc, #56]	; c994 <CDWHCITransferStageData::GetPID() const+0x78>
    c958:	eb0035fd 	bl	1a154 <assertion_failed>
    c95c:	e3a00000 	mov	r0, #0
    c960:	e8bd8010 	pop	{r4, pc}
    c964:	e3a00003 	mov	r0, #3
    c968:	e8bd8010 	pop	{r4, pc}
    c96c:	e3a00000 	mov	r0, #0
    c970:	e8bd8010 	pop	{r4, pc}
    c974:	e59f001c 	ldr	r0, [pc, #28]	; c998 <CDWHCITransferStageData::GetPID() const+0x7c>
    c978:	e59f201c 	ldr	r2, [pc, #28]	; c99c <CDWHCITransferStageData::GetPID() const+0x80>
    c97c:	e59f100c 	ldr	r1, [pc, #12]	; c990 <CDWHCITransferStageData::GetPID() const+0x74>
    c980:	eb0035f3 	bl	1a154 <assertion_failed>
    c984:	e5940018 	ldr	r0, [r4, #24]
    c988:	eaffffe8 	b	c930 <CDWHCITransferStageData::GetPID() const+0x14>
    c98c:	00000156 	.word	0x00000156
    c990:	000236c4 	.word	0x000236c4
    c994:	000239a8 	.word	0x000239a8
    c998:	00023774 	.word	0x00023774
    c99c:	00000143 	.word	0x00000143

0000c9a0 <CDWHCITransferStageData::IsDirectionIn() const>:
    c9a0:	e5d00008 	ldrb	r0, [r0, #8]
    c9a4:	e12fff1e 	bx	lr

0000c9a8 <CDWHCITransferStageData::IsStatusStage() const>:
    c9a8:	e5d00009 	ldrb	r0, [r0, #9]
    c9ac:	e12fff1e 	bx	lr

0000c9b0 <CDWHCITransferStageData::GetDMAAddress() const>:
    c9b0:	e5903048 	ldr	r3, [r0, #72]	; 0x48
    c9b4:	e3530000 	cmp	r3, #0
    c9b8:	0a000001 	beq	c9c4 <CDWHCITransferStageData::GetDMAAddress() const+0x14>
    c9bc:	e1a00003 	mov	r0, r3
    c9c0:	e12fff1e 	bx	lr
    c9c4:	e92d4010 	push	{r4, lr}
    c9c8:	e1a04000 	mov	r4, r0
    c9cc:	e59f2014 	ldr	r2, [pc, #20]	; c9e8 <CDWHCITransferStageData::GetDMAAddress() const+0x38>
    c9d0:	e59f1014 	ldr	r1, [pc, #20]	; c9ec <CDWHCITransferStageData::GetDMAAddress() const+0x3c>
    c9d4:	e59f0014 	ldr	r0, [pc, #20]	; c9f0 <CDWHCITransferStageData::GetDMAAddress() const+0x40>
    c9d8:	eb0035dd 	bl	1a154 <assertion_failed>
    c9dc:	e5943048 	ldr	r3, [r4, #72]	; 0x48
    c9e0:	e1a00003 	mov	r0, r3
    c9e4:	e8bd8010 	pop	{r4, pc}
    c9e8:	00000169 	.word	0x00000169
    c9ec:	000236c4 	.word	0x000236c4
    c9f0:	000237b8 	.word	0x000237b8

0000c9f4 <CDWHCITransferStageData::GetBytesToTransfer() const>:
    c9f4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    c9f8:	e12fff1e 	bx	lr

0000c9fc <CDWHCITransferStageData::GetPacketsToTransfer() const>:
    c9fc:	e5900030 	ldr	r0, [r0, #48]	; 0x30
    ca00:	e12fff1e 	bx	lr

0000ca04 <CDWHCITransferStageData::IsSplit() const>:
    ca04:	e5d00010 	ldrb	r0, [r0, #16]
    ca08:	e12fff1e 	bx	lr

0000ca0c <CDWHCITransferStageData::IsSplitComplete() const>:
    ca0c:	e5d03010 	ldrb	r3, [r0, #16]
    ca10:	e92d4010 	push	{r4, lr}
    ca14:	e3530000 	cmp	r3, #0
    ca18:	e1a04000 	mov	r4, r0
    ca1c:	1a000003 	bne	ca30 <CDWHCITransferStageData::IsSplitComplete() const+0x24>
    ca20:	e59f2010 	ldr	r2, [pc, #16]	; ca38 <CDWHCITransferStageData::IsSplitComplete() const+0x2c>
    ca24:	e59f1010 	ldr	r1, [pc, #16]	; ca3c <CDWHCITransferStageData::IsSplitComplete() const+0x30>
    ca28:	e59f0010 	ldr	r0, [pc, #16]	; ca40 <CDWHCITransferStageData::IsSplitComplete() const+0x34>
    ca2c:	eb0035c8 	bl	1a154 <assertion_failed>
    ca30:	e5d40011 	ldrb	r0, [r4, #17]
    ca34:	e8bd8010 	pop	{r4, pc}
    ca38:	0000017f 	.word	0x0000017f
    ca3c:	000236c4 	.word	0x000236c4
    ca40:	00023760 	.word	0x00023760

0000ca44 <CDWHCITransferStageData::GetHubAddress() const>:
    ca44:	e5d03010 	ldrb	r3, [r0, #16]
    ca48:	e92d4010 	push	{r4, lr}
    ca4c:	e3530000 	cmp	r3, #0
    ca50:	e1a04000 	mov	r4, r0
    ca54:	0a000004 	beq	ca6c <CDWHCITransferStageData::GetHubAddress() const+0x28>
    ca58:	e5940014 	ldr	r0, [r4, #20]
    ca5c:	e3500000 	cmp	r0, #0
    ca60:	0a000008 	beq	ca88 <CDWHCITransferStageData::GetHubAddress() const+0x44>
    ca64:	e8bd4010 	pop	{r4, lr}
    ca68:	ea0001fb 	b	d25c <CUSBDevice::GetHubAddress() const>
    ca6c:	e59f0030 	ldr	r0, [pc, #48]	; caa4 <CDWHCITransferStageData::GetHubAddress() const+0x60>
    ca70:	e59f2030 	ldr	r2, [pc, #48]	; caa8 <CDWHCITransferStageData::GetHubAddress() const+0x64>
    ca74:	e59f1030 	ldr	r1, [pc, #48]	; caac <CDWHCITransferStageData::GetHubAddress() const+0x68>
    ca78:	eb0035b5 	bl	1a154 <assertion_failed>
    ca7c:	e5940014 	ldr	r0, [r4, #20]
    ca80:	e3500000 	cmp	r0, #0
    ca84:	1afffff6 	bne	ca64 <CDWHCITransferStageData::GetHubAddress() const+0x20>
    ca88:	e59f0020 	ldr	r0, [pc, #32]	; cab0 <CDWHCITransferStageData::GetHubAddress() const+0x6c>
    ca8c:	e3a02f62 	mov	r2, #392	; 0x188
    ca90:	e59f1014 	ldr	r1, [pc, #20]	; caac <CDWHCITransferStageData::GetHubAddress() const+0x68>
    ca94:	eb0035ae 	bl	1a154 <assertion_failed>
    ca98:	e5940014 	ldr	r0, [r4, #20]
    ca9c:	e8bd4010 	pop	{r4, lr}
    caa0:	ea0001ed 	b	d25c <CUSBDevice::GetHubAddress() const>
    caa4:	00023760 	.word	0x00023760
    caa8:	00000186 	.word	0x00000186
    caac:	000236c4 	.word	0x000236c4
    cab0:	00023794 	.word	0x00023794

0000cab4 <CDWHCITransferStageData::GetHubPortAddress() const>:
    cab4:	e5d03010 	ldrb	r3, [r0, #16]
    cab8:	e92d4010 	push	{r4, lr}
    cabc:	e3530000 	cmp	r3, #0
    cac0:	e1a04000 	mov	r4, r0
    cac4:	0a000004 	beq	cadc <CDWHCITransferStageData::GetHubPortAddress() const+0x28>
    cac8:	e5940014 	ldr	r0, [r4, #20]
    cacc:	e3500000 	cmp	r0, #0
    cad0:	0a000008 	beq	caf8 <CDWHCITransferStageData::GetHubPortAddress() const+0x44>
    cad4:	e8bd4010 	pop	{r4, lr}
    cad8:	ea0001e1 	b	d264 <CUSBDevice::GetHubPortNumber() const>
    cadc:	e59f0030 	ldr	r0, [pc, #48]	; cb14 <CDWHCITransferStageData::GetHubPortAddress() const+0x60>
    cae0:	e59f2030 	ldr	r2, [pc, #48]	; cb18 <CDWHCITransferStageData::GetHubPortAddress() const+0x64>
    cae4:	e59f1030 	ldr	r1, [pc, #48]	; cb1c <CDWHCITransferStageData::GetHubPortAddress() const+0x68>
    cae8:	eb003599 	bl	1a154 <assertion_failed>
    caec:	e5940014 	ldr	r0, [r4, #20]
    caf0:	e3500000 	cmp	r0, #0
    caf4:	1afffff6 	bne	cad4 <CDWHCITransferStageData::GetHubPortAddress() const+0x20>
    caf8:	e59f0020 	ldr	r0, [pc, #32]	; cb20 <CDWHCITransferStageData::GetHubPortAddress() const+0x6c>
    cafc:	e3a02e19 	mov	r2, #400	; 0x190
    cb00:	e59f1014 	ldr	r1, [pc, #20]	; cb1c <CDWHCITransferStageData::GetHubPortAddress() const+0x68>
    cb04:	eb003592 	bl	1a154 <assertion_failed>
    cb08:	e5940014 	ldr	r0, [r4, #20]
    cb0c:	e8bd4010 	pop	{r4, lr}
    cb10:	ea0001d3 	b	d264 <CUSBDevice::GetHubPortNumber() const>
    cb14:	00023760 	.word	0x00023760
    cb18:	0000018e 	.word	0x0000018e
    cb1c:	000236c4 	.word	0x000236c4
    cb20:	00023794 	.word	0x00023794

0000cb24 <CDWHCITransferStageData::GetSplitPosition() const>:
    cb24:	e3a00003 	mov	r0, #3
    cb28:	e12fff1e 	bx	lr

0000cb2c <CDWHCITransferStageData::GetStatusMask() const>:
    cb2c:	e5d03010 	ldrb	r3, [r0, #16]
    cb30:	e3530000 	cmp	r3, #0
    cb34:	0a000001 	beq	cb40 <CDWHCITransferStageData::GetStatusMask() const+0x14>
    cb38:	e59f0018 	ldr	r0, [pc, #24]	; cb58 <CDWHCITransferStageData::GetStatusMask() const+0x2c>
    cb3c:	e12fff1e 	bx	lr
    cb40:	e92d4010 	push	{r4, lr}
    cb44:	ebfffe50 	bl	c48c <CDWHCITransferStageData::IsPeriodic() const>
    cb48:	e3500000 	cmp	r0, #0
    cb4c:	059f0008 	ldreq	r0, [pc, #8]	; cb5c <CDWHCITransferStageData::GetStatusMask() const+0x30>
    cb50:	159f0000 	ldrne	r0, [pc]	; cb58 <CDWHCITransferStageData::GetStatusMask() const+0x2c>
    cb54:	e8bd8010 	pop	{r4, pc}
    cb58:	000007ff 	.word	0x000007ff
    cb5c:	0000078f 	.word	0x0000078f

0000cb60 <CDWHCITransferStageData::GetTransactionStatus() const>:
    cb60:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    cb64:	e3530000 	cmp	r3, #0
    cb68:	0a000001 	beq	cb74 <CDWHCITransferStageData::GetTransactionStatus() const+0x14>
    cb6c:	e1a00003 	mov	r0, r3
    cb70:	e12fff1e 	bx	lr
    cb74:	e92d4010 	push	{r4, lr}
    cb78:	e1a04000 	mov	r4, r0
    cb7c:	e59f2014 	ldr	r2, [pc, #20]	; cb98 <CDWHCITransferStageData::GetTransactionStatus() const+0x38>
    cb80:	e59f1014 	ldr	r1, [pc, #20]	; cb9c <CDWHCITransferStageData::GetTransactionStatus() const+0x3c>
    cb84:	e59f0014 	ldr	r0, [pc, #20]	; cba0 <CDWHCITransferStageData::GetTransactionStatus() const+0x40>
    cb88:	eb003571 	bl	1a154 <assertion_failed>
    cb8c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    cb90:	e1a00003 	mov	r0, r3
    cb94:	e8bd8010 	pop	{r4, pc}
    cb98:	000001ad 	.word	0x000001ad
    cb9c:	000236c4 	.word	0x000236c4
    cba0:	00023840 	.word	0x00023840

0000cba4 <CDWHCITransferStageData::IsStageComplete() const>:
    cba4:	e5900028 	ldr	r0, [r0, #40]	; 0x28
    cba8:	e16f0f10 	clz	r0, r0
    cbac:	e1a002a0 	lsr	r0, r0, #5
    cbb0:	e12fff1e 	bx	lr

0000cbb4 <CDWHCITransferStageData::GetResultLen() const>:
    cbb4:	e5902034 	ldr	r2, [r0, #52]	; 0x34
    cbb8:	e5900024 	ldr	r0, [r0, #36]	; 0x24
    cbbc:	e1520000 	cmp	r2, r0
    cbc0:	31a00002 	movcc	r0, r2
    cbc4:	e12fff1e 	bx	lr

0000cbc8 <CDWHCITransferStageData::IsTimeout() const>:
    cbc8:	e590300c 	ldr	r3, [r0, #12]
    cbcc:	e3530000 	cmp	r3, #0
    cbd0:	1a000001 	bne	cbdc <CDWHCITransferStageData::IsTimeout() const+0x14>
    cbd4:	e1a00003 	mov	r0, r3
    cbd8:	e12fff1e 	bx	lr
    cbdc:	e92d4010 	push	{r4, lr}
    cbe0:	e1a04000 	mov	r4, r0
    cbe4:	eb004e71 	bl	205b0 <CTimer::Get()>
    cbe8:	eb004ba9 	bl	1fa94 <CTimer::GetTicks() const>
    cbec:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    cbf0:	e594200c 	ldr	r2, [r4, #12]
    cbf4:	e0400003 	sub	r0, r0, r3
    cbf8:	e1500002 	cmp	r0, r2
    cbfc:	33a00000 	movcc	r0, #0
    cc00:	23a00001 	movcs	r0, #1
    cc04:	e8bd8010 	pop	{r4, pc}

0000cc08 <CDWHCITransferStageData::GetURB() const>:
    cc08:	e5903004 	ldr	r3, [r0, #4]
    cc0c:	e3530000 	cmp	r3, #0
    cc10:	0a000001 	beq	cc1c <CDWHCITransferStageData::GetURB() const+0x14>
    cc14:	e1a00003 	mov	r0, r3
    cc18:	e12fff1e 	bx	lr
    cc1c:	e92d4010 	push	{r4, lr}
    cc20:	e1a04000 	mov	r4, r0
    cc24:	e3a02f73 	mov	r2, #460	; 0x1cc
    cc28:	e59f1010 	ldr	r1, [pc, #16]	; cc40 <CDWHCITransferStageData::GetURB() const+0x38>
    cc2c:	e59f0010 	ldr	r0, [pc, #16]	; cc44 <CDWHCITransferStageData::GetURB() const+0x3c>
    cc30:	eb003547 	bl	1a154 <assertion_failed>
    cc34:	e5943004 	ldr	r3, [r4, #4]
    cc38:	e1a00003 	mov	r0, r3
    cc3c:	e8bd8010 	pop	{r4, pc}
    cc40:	000236c4 	.word	0x000236c4
    cc44:	00023788 	.word	0x00023788

0000cc48 <CDWHCITransferStageData::GetFrameScheduler() const>:
    cc48:	e5900050 	ldr	r0, [r0, #80]	; 0x50
    cc4c:	e12fff1e 	bx	lr

0000cc50 <CDWHCITransferStageData::operator new(unsigned int)>:
    cc50:	e3500054 	cmp	r0, #84	; 0x54
    cc54:	e92d4010 	push	{r4, lr}
    cc58:	0a000003 	beq	cc6c <CDWHCITransferStageData::operator new(unsigned int)+0x1c>
    cc5c:	e59f203c 	ldr	r2, [pc, #60]	; cca0 <CDWHCITransferStageData::operator new(unsigned int)+0x50>
    cc60:	e59f103c 	ldr	r1, [pc, #60]	; cca4 <CDWHCITransferStageData::operator new(unsigned int)+0x54>
    cc64:	e59f003c 	ldr	r0, [pc, #60]	; cca8 <CDWHCITransferStageData::operator new(unsigned int)+0x58>
    cc68:	eb003539 	bl	1a154 <assertion_failed>
    cc6c:	e59f4038 	ldr	r4, [pc, #56]	; ccac <CDWHCITransferStageData::operator new(unsigned int)+0x5c>
    cc70:	e5940000 	ldr	r0, [r4]
    cc74:	e3500000 	cmp	r0, #0
    cc78:	0a000001 	beq	cc84 <CDWHCITransferStageData::operator new(unsigned int)+0x34>
    cc7c:	e8bd4010 	pop	{r4, lr}
    cc80:	ea003651 	b	1a5cc <CClassAllocator::Allocate()>
    cc84:	e59f0024 	ldr	r0, [pc, #36]	; ccb0 <CDWHCITransferStageData::operator new(unsigned int)+0x60>
    cc88:	e59f2010 	ldr	r2, [pc, #16]	; cca0 <CDWHCITransferStageData::operator new(unsigned int)+0x50>
    cc8c:	e59f1010 	ldr	r1, [pc, #16]	; cca4 <CDWHCITransferStageData::operator new(unsigned int)+0x54>
    cc90:	eb00352f 	bl	1a154 <assertion_failed>
    cc94:	e5940000 	ldr	r0, [r4]
    cc98:	e8bd4010 	pop	{r4, lr}
    cc9c:	ea00364a 	b	1a5cc <CClassAllocator::Allocate()>
    cca0:	000001d5 	.word	0x000001d5
    cca4:	000236c4 	.word	0x000236c4
    cca8:	0002385c 	.word	0x0002385c
    ccac:	0002999c 	.word	0x0002999c
    ccb0:	00023888 	.word	0x00023888

0000ccb4 <CDWHCITransferStageData::operator delete(void*, unsigned int)>:
    ccb4:	e3510054 	cmp	r1, #84	; 0x54
    ccb8:	e92d4070 	push	{r4, r5, r6, lr}
    ccbc:	e1a05000 	mov	r5, r0
    ccc0:	0a000003 	beq	ccd4 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x20>
    ccc4:	e59f2044 	ldr	r2, [pc, #68]	; cd10 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x5c>
    ccc8:	e59f1044 	ldr	r1, [pc, #68]	; cd14 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x60>
    cccc:	e59f0044 	ldr	r0, [pc, #68]	; cd18 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x64>
    ccd0:	eb00351f 	bl	1a154 <assertion_failed>
    ccd4:	e59f4040 	ldr	r4, [pc, #64]	; cd1c <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x68>
    ccd8:	e5940000 	ldr	r0, [r4]
    ccdc:	e3500000 	cmp	r0, #0
    cce0:	0a000002 	beq	ccf0 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x3c>
    cce4:	e1a01005 	mov	r1, r5
    cce8:	e8bd4070 	pop	{r4, r5, r6, lr}
    ccec:	ea003671 	b	1a6b8 <CClassAllocator::Free(void*)>
    ccf0:	e59f101c 	ldr	r1, [pc, #28]	; cd14 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x60>
    ccf4:	e59f0024 	ldr	r0, [pc, #36]	; cd20 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x6c>
    ccf8:	e59f2010 	ldr	r2, [pc, #16]	; cd10 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x5c>
    ccfc:	eb003514 	bl	1a154 <assertion_failed>
    cd00:	e5940000 	ldr	r0, [r4]
    cd04:	e1a01005 	mov	r1, r5
    cd08:	e8bd4070 	pop	{r4, r5, r6, lr}
    cd0c:	ea003669 	b	1a6b8 <CClassAllocator::Free(void*)>
    cd10:	000001d5 	.word	0x000001d5
    cd14:	000236c4 	.word	0x000236c4
    cd18:	0002385c 	.word	0x0002385c
    cd1c:	0002999c 	.word	0x0002999c
    cd20:	00023888 	.word	0x00023888

0000cd24 <CDWHCITransferStageData::InitAllocator(unsigned int)>:
    cd24:	e92d4070 	push	{r4, r5, r6, lr}
    cd28:	e59f4040 	ldr	r4, [pc, #64]	; cd70 <CDWHCITransferStageData::InitAllocator(unsigned int)+0x4c>
    cd2c:	e1a06000 	mov	r6, r0
    cd30:	e5943000 	ldr	r3, [r4]
    cd34:	e3530000 	cmp	r3, #0
    cd38:	0a000003 	beq	cd4c <CDWHCITransferStageData::InitAllocator(unsigned int)+0x28>
    cd3c:	e59f2030 	ldr	r2, [pc, #48]	; cd74 <CDWHCITransferStageData::InitAllocator(unsigned int)+0x50>
    cd40:	e59f1030 	ldr	r1, [pc, #48]	; cd78 <CDWHCITransferStageData::InitAllocator(unsigned int)+0x54>
    cd44:	e59f0030 	ldr	r0, [pc, #48]	; cd7c <CDWHCITransferStageData::InitAllocator(unsigned int)+0x58>
    cd48:	eb003501 	bl	1a154 <assertion_failed>
    cd4c:	e3a0001c 	mov	r0, #28
    cd50:	eb005293 	bl	217a4 <operator new(unsigned int)>
    cd54:	e1a05000 	mov	r5, r0
    cd58:	e1a02006 	mov	r2, r6
    cd5c:	e59f301c 	ldr	r3, [pc, #28]	; cd80 <CDWHCITransferStageData::InitAllocator(unsigned int)+0x5c>
    cd60:	e3a01054 	mov	r1, #84	; 0x54
    cd64:	eb0035ff 	bl	1a568 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
    cd68:	e5845000 	str	r5, [r4]
    cd6c:	e8bd8070 	pop	{r4, r5, r6, pc}
    cd70:	0002999c 	.word	0x0002999c
    cd74:	000001d5 	.word	0x000001d5
    cd78:	000236c4 	.word	0x000236c4
    cd7c:	0002389c 	.word	0x0002389c
    cd80:	000238b0 	.word	0x000238b0

0000cd84 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)>:
    cd84:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    cd88:	e59f4054 	ldr	r4, [pc, #84]	; cde4 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)+0x60>
    cd8c:	e24dd00c 	sub	sp, sp, #12
    cd90:	e5943000 	ldr	r3, [r4]
    cd94:	e1a06000 	mov	r6, r0
    cd98:	e3530000 	cmp	r3, #0
    cd9c:	e1a07001 	mov	r7, r1
    cda0:	0a000003 	beq	cdb4 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)+0x30>
    cda4:	e59f203c 	ldr	r2, [pc, #60]	; cde8 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)+0x64>
    cda8:	e59f103c 	ldr	r1, [pc, #60]	; cdec <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)+0x68>
    cdac:	e59f003c 	ldr	r0, [pc, #60]	; cdf0 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)+0x6c>
    cdb0:	eb0034e7 	bl	1a154 <assertion_failed>
    cdb4:	e3a0001c 	mov	r0, #28
    cdb8:	eb005279 	bl	217a4 <operator new(unsigned int)>
    cdbc:	e59f1030 	ldr	r1, [pc, #48]	; cdf4 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)+0x70>
    cdc0:	e1a03007 	mov	r3, r7
    cdc4:	e58d1000 	str	r1, [sp]
    cdc8:	e1a02006 	mov	r2, r6
    cdcc:	e3a01054 	mov	r1, #84	; 0x54
    cdd0:	e1a05000 	mov	r5, r0
    cdd4:	eb0035ef 	bl	1a598 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
    cdd8:	e5845000 	str	r5, [r4]
    cddc:	e28dd00c 	add	sp, sp, #12
    cde0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    cde4:	0002999c 	.word	0x0002999c
    cde8:	000001d5 	.word	0x000001d5
    cdec:	000236c4 	.word	0x000236c4
    cdf0:	0002389c 	.word	0x0002389c
    cdf4:	000238b0 	.word	0x000238b0

0000cdf8 <CUSBDevice::~CUSBDevice()>:
    cdf8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    cdfc:	e1a04000 	mov	r4, r0
    ce00:	e1a07000 	mov	r7, r0
    ce04:	e3a06000 	mov	r6, #0
    ce08:	e59f3098 	ldr	r3, [pc, #152]	; cea8 <CUSBDevice::~CUSBDevice()+0xb0>
    ce0c:	e2805044 	add	r5, r0, #68	; 0x44
    ce10:	e484301c 	str	r3, [r4], #28
    ce14:	e5940004 	ldr	r0, [r4, #4]
    ce18:	e3500000 	cmp	r0, #0
    ce1c:	0a000002 	beq	ce2c <CUSBDevice::~CUSBDevice()+0x34>
    ce20:	e5903000 	ldr	r3, [r0]
    ce24:	e5933004 	ldr	r3, [r3, #4]
    ce28:	e12fff33 	blx	r3
    ce2c:	e5a46004 	str	r6, [r4, #4]!
    ce30:	e1540005 	cmp	r4, r5
    ce34:	1afffff6 	bne	ce14 <CUSBDevice::~CUSBDevice()+0x1c>
    ce38:	e597401c 	ldr	r4, [r7, #28]
    ce3c:	e3540000 	cmp	r4, #0
    ce40:	0a000004 	beq	ce58 <CUSBDevice::~CUSBDevice()+0x60>
    ce44:	e1a00004 	mov	r0, r4
    ce48:	eb002595 	bl	164a4 <CUSBConfigurationParser::~CUSBConfigurationParser()>
    ce4c:	e1a00004 	mov	r0, r4
    ce50:	e3a0101c 	mov	r1, #28
    ce54:	eb005256 	bl	217b4 <operator delete(void*, unsigned int)>
    ce58:	e3a04000 	mov	r4, #0
    ce5c:	e3a01009 	mov	r1, #9
    ce60:	e5970018 	ldr	r0, [r7, #24]
    ce64:	e587401c 	str	r4, [r7, #28]
    ce68:	eb005251 	bl	217b4 <operator delete(void*, unsigned int)>
    ce6c:	e5874018 	str	r4, [r7, #24]
    ce70:	e3a01012 	mov	r1, #18
    ce74:	e5970014 	ldr	r0, [r7, #20]
    ce78:	eb00524d 	bl	217b4 <operator delete(void*, unsigned int)>
    ce7c:	e597500c 	ldr	r5, [r7, #12]
    ce80:	e5874014 	str	r4, [r7, #20]
    ce84:	e1550004 	cmp	r5, r4
    ce88:	0a000004 	beq	cea0 <CUSBDevice::~CUSBDevice()+0xa8>
    ce8c:	e1a00005 	mov	r0, r5
    ce90:	eb000448 	bl	dfb8 <CUSBEndpoint::~CUSBEndpoint()>
    ce94:	e1a00005 	mov	r0, r5
    ce98:	e3a01014 	mov	r1, #20
    ce9c:	eb005244 	bl	217b4 <operator delete(void*, unsigned int)>
    cea0:	e1a00007 	mov	r0, r7
    cea4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    cea8:	000238d0 	.word	0x000238d0

0000ceac <CUSBDevice::~CUSBDevice()>:
    ceac:	e92d4010 	push	{r4, lr}
    ceb0:	e1a04000 	mov	r4, r0
    ceb4:	ebffffcf 	bl	cdf8 <CUSBDevice::~CUSBDevice()>
    ceb8:	e1a00004 	mov	r0, r4
    cebc:	e3a01048 	mov	r1, #72	; 0x48
    cec0:	eb00523b 	bl	217b4 <operator delete(void*, unsigned int)>
    cec4:	e1a00004 	mov	r0, r4
    cec8:	e8bd8010 	pop	{r4, pc}

0000cecc <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, bool, unsigned char, unsigned char)>:
    cecc:	e92d4070 	push	{r4, r5, r6, lr}
    ced0:	e1a04000 	mov	r4, r0
    ced4:	e3a00000 	mov	r0, #0
    ced8:	e59fe0bc 	ldr	lr, [pc, #188]	; cf9c <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, bool, unsigned char, unsigned char)+0xd0>
    cedc:	e5ddc010 	ldrb	ip, [sp, #16]
    cee0:	e5dd5014 	ldrb	r5, [sp, #20]
    cee4:	e1510000 	cmp	r1, r0
    cee8:	e5841004 	str	r1, [r4, #4]
    ceec:	e5c42009 	strb	r2, [r4, #9]
    cef0:	e5c43010 	strb	r3, [r4, #16]
    cef4:	e584e000 	str	lr, [r4]
    cef8:	e5c4c011 	strb	ip, [r4, #17]
    cefc:	e5c40008 	strb	r0, [r4, #8]
    cf00:	e584000c 	str	r0, [r4, #12]
    cf04:	e5840014 	str	r0, [r4, #20]
    cf08:	e5840018 	str	r0, [r4, #24]
    cf0c:	e584001c 	str	r0, [r4, #28]
    cf10:	e5c45012 	strb	r5, [r4, #18]
    cf14:	0a000014 	beq	cf6c <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, bool, unsigned char, unsigned char)+0xa0>
    cf18:	e3a00014 	mov	r0, #20
    cf1c:	eb005220 	bl	217a4 <operator new(unsigned int)>
    cf20:	e1a06000 	mov	r6, r0
    cf24:	e1a01004 	mov	r1, r4
    cf28:	eb000378 	bl	dd10 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)>
    cf2c:	e3550000 	cmp	r5, #0
    cf30:	e584600c 	str	r6, [r4, #12]
    cf34:	0a000007 	beq	cf58 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, bool, unsigned char, unsigned char)+0x8c>
    cf38:	e3a01000 	mov	r1, #0
    cf3c:	e284301c 	add	r3, r4, #28
    cf40:	e2842044 	add	r2, r4, #68	; 0x44
    cf44:	e5a31004 	str	r1, [r3, #4]!
    cf48:	e1520003 	cmp	r2, r3
    cf4c:	1afffffc 	bne	cf44 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, bool, unsigned char, unsigned char)+0x78>
    cf50:	e1a00004 	mov	r0, r4
    cf54:	e8bd8070 	pop	{r4, r5, r6, pc}
    cf58:	e3a02037 	mov	r2, #55	; 0x37
    cf5c:	e59f103c 	ldr	r1, [pc, #60]	; cfa0 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, bool, unsigned char, unsigned char)+0xd4>
    cf60:	e59f003c 	ldr	r0, [pc, #60]	; cfa4 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, bool, unsigned char, unsigned char)+0xd8>
    cf64:	eb00347a 	bl	1a154 <assertion_failed>
    cf68:	eafffff2 	b	cf38 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, bool, unsigned char, unsigned char)+0x6c>
    cf6c:	e3a02031 	mov	r2, #49	; 0x31
    cf70:	e59f1028 	ldr	r1, [pc, #40]	; cfa0 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, bool, unsigned char, unsigned char)+0xd4>
    cf74:	e59f002c 	ldr	r0, [pc, #44]	; cfa8 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, bool, unsigned char, unsigned char)+0xdc>
    cf78:	eb003475 	bl	1a154 <assertion_failed>
    cf7c:	e594300c 	ldr	r3, [r4, #12]
    cf80:	e3530000 	cmp	r3, #0
    cf84:	0affffe3 	beq	cf18 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, bool, unsigned char, unsigned char)+0x4c>
    cf88:	e3a02033 	mov	r2, #51	; 0x33
    cf8c:	e59f100c 	ldr	r1, [pc, #12]	; cfa0 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, bool, unsigned char, unsigned char)+0xd4>
    cf90:	e59f0014 	ldr	r0, [pc, #20]	; cfac <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, bool, unsigned char, unsigned char)+0xe0>
    cf94:	eb00346e 	bl	1a154 <assertion_failed>
    cf98:	eaffffde 	b	cf18 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, bool, unsigned char, unsigned char)+0x4c>
    cf9c:	000238d0 	.word	0x000238d0
    cfa0:	000238e8 	.word	0x000238e8
    cfa4:	0002391c 	.word	0x0002391c
    cfa8:	000238f8 	.word	0x000238f8
    cfac:	00023908 	.word	0x00023908

0000cfb0 <CUSBDevice::GetName(TDeviceNameSelector) const>:
    cfb0:	e92d4070 	push	{r4, r5, r6, lr}
    cfb4:	e1a06000 	mov	r6, r0
    cfb8:	e24dd008 	sub	sp, sp, #8
    cfbc:	e3a00010 	mov	r0, #16
    cfc0:	e1a05001 	mov	r5, r1
    cfc4:	eb0051f6 	bl	217a4 <operator new(unsigned int)>
    cfc8:	e1a04000 	mov	r4, r0
    cfcc:	eb0045e0 	bl	1e754 <CString::CString()>
    cfd0:	e3550000 	cmp	r5, #0
    cfd4:	0a00001a 	beq	d044 <CUSBDevice::GetName(TDeviceNameSelector) const+0x94>
    cfd8:	e3550001 	cmp	r5, #1
    cfdc:	0a000009 	beq	d008 <CUSBDevice::GetName(TDeviceNameSelector) const+0x58>
    cfe0:	e3a02e1a 	mov	r2, #416	; 0x1a0
    cfe4:	e59f10c4 	ldr	r1, [pc, #196]	; d0b0 <CUSBDevice::GetName(TDeviceNameSelector) const+0x100>
    cfe8:	e59f00c4 	ldr	r0, [pc, #196]	; d0b4 <CUSBDevice::GetName(TDeviceNameSelector) const+0x104>
    cfec:	eb003458 	bl	1a154 <assertion_failed>
    cff0:	e59f10c0 	ldr	r1, [pc, #192]	; d0b8 <CUSBDevice::GetName(TDeviceNameSelector) const+0x108>
    cff4:	e1a00004 	mov	r0, r4
    cff8:	eb0045f1 	bl	1e7c4 <CString::operator=(char const*)>
    cffc:	e1a00004 	mov	r0, r4
    d000:	e28dd008 	add	sp, sp, #8
    d004:	e8bd8070 	pop	{r4, r5, r6, pc}
    d008:	e5961014 	ldr	r1, [r6, #20]
    d00c:	e3510000 	cmp	r1, #0
    d010:	0a000020 	beq	d098 <CUSBDevice::GetName(TDeviceNameSelector) const+0xe8>
    d014:	e5d12004 	ldrb	r2, [r1, #4]
    d018:	e2423001 	sub	r3, r2, #1
    d01c:	e6ef3073 	uxtb	r3, r3
    d020:	e35300fd 	cmp	r3, #253	; 0xfd
    d024:	8afffff1 	bhi	cff0 <CUSBDevice::GetName(TDeviceNameSelector) const+0x40>
    d028:	e5d13005 	ldrb	r3, [r1, #5]
    d02c:	e5d11006 	ldrb	r1, [r1, #6]
    d030:	e1a00004 	mov	r0, r4
    d034:	e58d1000 	str	r1, [sp]
    d038:	e59f107c 	ldr	r1, [pc, #124]	; d0bc <CUSBDevice::GetName(TDeviceNameSelector) const+0x10c>
    d03c:	eb0049b2 	bl	1f70c <CString::Format(char const*, ...)>
    d040:	eaffffed 	b	cffc <CUSBDevice::GetName(TDeviceNameSelector) const+0x4c>
    d044:	e5961014 	ldr	r1, [r6, #20]
    d048:	e3510000 	cmp	r1, #0
    d04c:	0a00000b 	beq	d080 <CUSBDevice::GetName(TDeviceNameSelector) const+0xd0>
    d050:	e5d1000b 	ldrb	r0, [r1, #11]
    d054:	e5d1300a 	ldrb	r3, [r1, #10]
    d058:	e5d12008 	ldrb	r2, [r1, #8]
    d05c:	e5d11009 	ldrb	r1, [r1, #9]
    d060:	e1833400 	orr	r3, r3, r0, lsl #8
    d064:	e1822401 	orr	r2, r2, r1, lsl #8
    d068:	e1a00004 	mov	r0, r4
    d06c:	e59f104c 	ldr	r1, [pc, #76]	; d0c0 <CUSBDevice::GetName(TDeviceNameSelector) const+0x110>
    d070:	eb0049a5 	bl	1f70c <CString::Format(char const*, ...)>
    d074:	e1a00004 	mov	r0, r4
    d078:	e28dd008 	add	sp, sp, #8
    d07c:	e8bd8070 	pop	{r4, r5, r6, pc}
    d080:	e59f1028 	ldr	r1, [pc, #40]	; d0b0 <CUSBDevice::GetName(TDeviceNameSelector) const+0x100>
    d084:	e3a02f63 	mov	r2, #396	; 0x18c
    d088:	e59f0034 	ldr	r0, [pc, #52]	; d0c4 <CUSBDevice::GetName(TDeviceNameSelector) const+0x114>
    d08c:	eb003430 	bl	1a154 <assertion_failed>
    d090:	e5961014 	ldr	r1, [r6, #20]
    d094:	eaffffed 	b	d050 <CUSBDevice::GetName(TDeviceNameSelector) const+0xa0>
    d098:	e59f1010 	ldr	r1, [pc, #16]	; d0b0 <CUSBDevice::GetName(TDeviceNameSelector) const+0x100>
    d09c:	e59f2024 	ldr	r2, [pc, #36]	; d0c8 <CUSBDevice::GetName(TDeviceNameSelector) const+0x118>
    d0a0:	e59f001c 	ldr	r0, [pc, #28]	; d0c4 <CUSBDevice::GetName(TDeviceNameSelector) const+0x114>
    d0a4:	eb00342a 	bl	1a154 <assertion_failed>
    d0a8:	e5961014 	ldr	r1, [r6, #20]
    d0ac:	eaffffd8 	b	d014 <CUSBDevice::GetName(TDeviceNameSelector) const+0x64>
    d0b0:	000238e8 	.word	0x000238e8
    d0b4:	000239a8 	.word	0x000239a8
    d0b8:	00023960 	.word	0x00023960
    d0bc:	00023954 	.word	0x00023954
    d0c0:	00023948 	.word	0x00023948
    d0c4:	00023934 	.word	0x00023934
    d0c8:	00000193 	.word	0x00000193

0000d0cc <CUSBDevice::GetNames() const>:
    d0cc:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d0d0:	e1a07000 	mov	r7, r0
    d0d4:	e3a00010 	mov	r0, #16
    d0d8:	eb0051b1 	bl	217a4 <operator new(unsigned int)>
    d0dc:	e3a04000 	mov	r4, #0
    d0e0:	e1a06000 	mov	r6, r0
    d0e4:	e1a0b004 	mov	fp, r4
    d0e8:	eb004599 	bl	1e754 <CString::CString()>
    d0ec:	e59f8104 	ldr	r8, [pc, #260]	; d1f8 <CUSBDevice::GetNames() const+0x12c>
    d0f0:	e59f9104 	ldr	r9, [pc, #260]	; d1fc <CUSBDevice::GetNames() const+0x130>
    d0f4:	e59fa104 	ldr	sl, [pc, #260]	; d200 <CUSBDevice::GetNames() const+0x134>
    d0f8:	e6ef1074 	uxtb	r1, r4
    d0fc:	e1a00007 	mov	r0, r7
    d100:	ebffffaa 	bl	cfb0 <CUSBDevice::GetName(TDeviceNameSelector) const>
    d104:	e2505000 	subs	r5, r0, #0
    d108:	0a000028 	beq	d1b0 <CUSBDevice::GetNames() const+0xe4>
    d10c:	e1a01008 	mov	r1, r8
    d110:	eb0045f8 	bl	1e8f8 <CString::Compare(char const*) const>
    d114:	e3500000 	cmp	r0, #0
    d118:	1a00000f 	bne	d15c <CUSBDevice::GetNames() const+0x90>
    d11c:	e5953000 	ldr	r3, [r5]
    d120:	e1a00005 	mov	r0, r5
    d124:	e5933004 	ldr	r3, [r3, #4]
    d128:	e12fff33 	blx	r3
    d12c:	e2844001 	add	r4, r4, #1
    d130:	e3540002 	cmp	r4, #2
    d134:	1affffef 	bne	d0f8 <CUSBDevice::GetNames() const+0x2c>
    d138:	e1a00006 	mov	r0, r6
    d13c:	eb0045c8 	bl	1e864 <CString::GetLength() const>
    d140:	e3500000 	cmp	r0, #0
    d144:	1a000002 	bne	d154 <CUSBDevice::GetNames() const+0x88>
    d148:	e59f10a8 	ldr	r1, [pc, #168]	; d1f8 <CUSBDevice::GetNames() const+0x12c>
    d14c:	e1a00006 	mov	r0, r6
    d150:	eb00459b 	bl	1e7c4 <CString::operator=(char const*)>
    d154:	e1a00006 	mov	r0, r6
    d158:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d15c:	e1a00006 	mov	r0, r6
    d160:	eb0045bf 	bl	1e864 <CString::GetLength() const>
    d164:	e3500000 	cmp	r0, #0
    d168:	0a00000a 	beq	d198 <CUSBDevice::GetNames() const+0xcc>
    d16c:	e1a01009 	mov	r1, r9
    d170:	e1a00006 	mov	r0, r6
    d174:	eb0045be 	bl	1e874 <CString::Append(char const*)>
    d178:	e1a00005 	mov	r0, r5
    d17c:	eb00458a 	bl	1e7ac <CString::operator char const*() const>
    d180:	e1a01000 	mov	r1, r0
    d184:	e1a00006 	mov	r0, r6
    d188:	eb0045b9 	bl	1e874 <CString::Append(char const*)>
    d18c:	e3550000 	cmp	r5, #0
    d190:	0affffe5 	beq	d12c <CUSBDevice::GetNames() const+0x60>
    d194:	eaffffe0 	b	d11c <CUSBDevice::GetNames() const+0x50>
    d198:	e1a00005 	mov	r0, r5
    d19c:	eb004582 	bl	1e7ac <CString::operator char const*() const>
    d1a0:	e1a01000 	mov	r1, r0
    d1a4:	e1a00006 	mov	r0, r6
    d1a8:	eb0045b1 	bl	1e874 <CString::Append(char const*)>
    d1ac:	eaffffda 	b	d11c <CUSBDevice::GetNames() const+0x50>
    d1b0:	e1a0200a 	mov	r2, sl
    d1b4:	e59f1048 	ldr	r1, [pc, #72]	; d204 <CUSBDevice::GetNames() const+0x138>
    d1b8:	e59f0048 	ldr	r0, [pc, #72]	; d208 <CUSBDevice::GetNames() const+0x13c>
    d1bc:	eb0033e4 	bl	1a154 <assertion_failed>
    d1c0:	e1a01008 	mov	r1, r8
    d1c4:	e1a0000b 	mov	r0, fp
    d1c8:	eb0045ca 	bl	1e8f8 <CString::Compare(char const*) const>
    d1cc:	e3500000 	cmp	r0, #0
    d1d0:	0affffd5 	beq	d12c <CUSBDevice::GetNames() const+0x60>
    d1d4:	e1a00006 	mov	r0, r6
    d1d8:	eb0045a1 	bl	1e864 <CString::GetLength() const>
    d1dc:	e3500000 	cmp	r0, #0
    d1e0:	1affffe1 	bne	d16c <CUSBDevice::GetNames() const+0xa0>
    d1e4:	eb004570 	bl	1e7ac <CString::operator char const*() const>
    d1e8:	e1a01000 	mov	r1, r0
    d1ec:	e1a00006 	mov	r0, r6
    d1f0:	eb00459f 	bl	1e874 <CString::Append(char const*)>
    d1f4:	eaffffcc 	b	d12c <CUSBDevice::GetNames() const+0x60>
    d1f8:	00023960 	.word	0x00023960
    d1fc:	00023974 	.word	0x00023974
    d200:	000001b1 	.word	0x000001b1
    d204:	000238e8 	.word	0x000238e8
    d208:	00023968 	.word	0x00023968

0000d20c <CUSBDevice::SetAddress(unsigned char)>:
    d20c:	e351007f 	cmp	r1, #127	; 0x7f
    d210:	e92d4070 	push	{r4, r5, r6, lr}
    d214:	e1a04001 	mov	r4, r1
    d218:	e1a05000 	mov	r5, r0
    d21c:	da000003 	ble	d230 <CUSBDevice::SetAddress(unsigned char)+0x24>
    d220:	e59f2010 	ldr	r2, [pc, #16]	; d238 <CUSBDevice::SetAddress(unsigned char)+0x2c>
    d224:	e59f1010 	ldr	r1, [pc, #16]	; d23c <CUSBDevice::SetAddress(unsigned char)+0x30>
    d228:	e59f0010 	ldr	r0, [pc, #16]	; d240 <CUSBDevice::SetAddress(unsigned char)+0x34>
    d22c:	eb0033c8 	bl	1a154 <assertion_failed>
    d230:	e5c54008 	strb	r4, [r5, #8]
    d234:	e8bd8070 	pop	{r4, r5, r6, pc}
    d238:	000001ca 	.word	0x000001ca
    d23c:	000238e8 	.word	0x000238e8
    d240:	00023978 	.word	0x00023978

0000d244 <CUSBDevice::GetAddress() const>:
    d244:	e5d00008 	ldrb	r0, [r0, #8]
    d248:	e12fff1e 	bx	lr

0000d24c <CUSBDevice::GetSpeed() const>:
    d24c:	e5d00009 	ldrb	r0, [r0, #9]
    d250:	e12fff1e 	bx	lr

0000d254 <CUSBDevice::IsSplit() const>:
    d254:	e5d00010 	ldrb	r0, [r0, #16]
    d258:	e12fff1e 	bx	lr

0000d25c <CUSBDevice::GetHubAddress() const>:
    d25c:	e5d00011 	ldrb	r0, [r0, #17]
    d260:	e12fff1e 	bx	lr

0000d264 <CUSBDevice::GetHubPortNumber() const>:
    d264:	e5d00012 	ldrb	r0, [r0, #18]
    d268:	e12fff1e 	bx	lr

0000d26c <CUSBDevice::GetEndpoint0() const>:
    d26c:	e590300c 	ldr	r3, [r0, #12]
    d270:	e3530000 	cmp	r3, #0
    d274:	0a000001 	beq	d280 <CUSBDevice::GetEndpoint0() const+0x14>
    d278:	e1a00003 	mov	r0, r3
    d27c:	e12fff1e 	bx	lr
    d280:	e92d4010 	push	{r4, lr}
    d284:	e1a04000 	mov	r4, r0
    d288:	e59f2014 	ldr	r2, [pc, #20]	; d2a4 <CUSBDevice::GetEndpoint0() const+0x38>
    d28c:	e59f1014 	ldr	r1, [pc, #20]	; d2a8 <CUSBDevice::GetEndpoint0() const+0x3c>
    d290:	e59f0014 	ldr	r0, [pc, #20]	; d2ac <CUSBDevice::GetEndpoint0() const+0x40>
    d294:	eb0033ae 	bl	1a154 <assertion_failed>
    d298:	e594300c 	ldr	r3, [r4, #12]
    d29c:	e1a00003 	mov	r0, r3
    d2a0:	e8bd8010 	pop	{r4, pc}
    d2a4:	000001eb 	.word	0x000001eb
    d2a8:	000238e8 	.word	0x000238e8
    d2ac:	00023998 	.word	0x00023998

0000d2b0 <CUSBDevice::GetHost() const>:
    d2b0:	e5903004 	ldr	r3, [r0, #4]
    d2b4:	e3530000 	cmp	r3, #0
    d2b8:	0a000001 	beq	d2c4 <CUSBDevice::GetHost() const+0x14>
    d2bc:	e1a00003 	mov	r0, r3
    d2c0:	e12fff1e 	bx	lr
    d2c4:	e92d4010 	push	{r4, lr}
    d2c8:	e1a04000 	mov	r4, r0
    d2cc:	e59f2014 	ldr	r2, [pc, #20]	; d2e8 <CUSBDevice::GetHost() const+0x38>
    d2d0:	e59f1014 	ldr	r1, [pc, #20]	; d2ec <CUSBDevice::GetHost() const+0x3c>
    d2d4:	e59f0014 	ldr	r0, [pc, #20]	; d2f0 <CUSBDevice::GetHost() const+0x40>
    d2d8:	eb00339d 	bl	1a154 <assertion_failed>
    d2dc:	e5943004 	ldr	r3, [r4, #4]
    d2e0:	e1a00003 	mov	r0, r3
    d2e4:	e8bd8010 	pop	{r4, pc}
    d2e8:	000001f1 	.word	0x000001f1
    d2ec:	000238e8 	.word	0x000238e8
    d2f0:	000238f8 	.word	0x000238f8

0000d2f4 <CUSBDevice::GetDeviceDescriptor() const>:
    d2f4:	e5903014 	ldr	r3, [r0, #20]
    d2f8:	e3530000 	cmp	r3, #0
    d2fc:	0a000001 	beq	d308 <CUSBDevice::GetDeviceDescriptor() const+0x14>
    d300:	e1a00003 	mov	r0, r3
    d304:	e12fff1e 	bx	lr
    d308:	e92d4010 	push	{r4, lr}
    d30c:	e1a04000 	mov	r4, r0
    d310:	e59f2014 	ldr	r2, [pc, #20]	; d32c <CUSBDevice::GetDeviceDescriptor() const+0x38>
    d314:	e59f1014 	ldr	r1, [pc, #20]	; d330 <CUSBDevice::GetDeviceDescriptor() const+0x3c>
    d318:	e59f0014 	ldr	r0, [pc, #20]	; d334 <CUSBDevice::GetDeviceDescriptor() const+0x40>
    d31c:	eb00338c 	bl	1a154 <assertion_failed>
    d320:	e5943014 	ldr	r3, [r4, #20]
    d324:	e1a00003 	mov	r0, r3
    d328:	e8bd8010 	pop	{r4, pc}
    d32c:	000001f7 	.word	0x000001f7
    d330:	000238e8 	.word	0x000238e8
    d334:	00023934 	.word	0x00023934

0000d338 <CUSBDevice::GetConfigurationDescriptor() const>:
    d338:	e5903018 	ldr	r3, [r0, #24]
    d33c:	e3530000 	cmp	r3, #0
    d340:	0a000001 	beq	d34c <CUSBDevice::GetConfigurationDescriptor() const+0x14>
    d344:	e1a00003 	mov	r0, r3
    d348:	e12fff1e 	bx	lr
    d34c:	e92d4010 	push	{r4, lr}
    d350:	e1a04000 	mov	r4, r0
    d354:	e59f2014 	ldr	r2, [pc, #20]	; d370 <CUSBDevice::GetConfigurationDescriptor() const+0x38>
    d358:	e59f1014 	ldr	r1, [pc, #20]	; d374 <CUSBDevice::GetConfigurationDescriptor() const+0x3c>
    d35c:	e59f0014 	ldr	r0, [pc, #20]	; d378 <CUSBDevice::GetConfigurationDescriptor() const+0x40>
    d360:	eb00337b 	bl	1a154 <assertion_failed>
    d364:	e5943018 	ldr	r3, [r4, #24]
    d368:	e1a00003 	mov	r0, r3
    d36c:	e8bd8010 	pop	{r4, pc}
    d370:	000001fd 	.word	0x000001fd
    d374:	000238e8 	.word	0x000238e8
    d378:	000239ac 	.word	0x000239ac

0000d37c <CUSBDevice::GetDescriptor(unsigned char)>:
    d37c:	e92d4070 	push	{r4, r5, r6, lr}
    d380:	e1a04000 	mov	r4, r0
    d384:	e590001c 	ldr	r0, [r0, #28]
    d388:	e1a05001 	mov	r5, r1
    d38c:	e3500000 	cmp	r0, #0
    d390:	0a000002 	beq	d3a0 <CUSBDevice::GetDescriptor(unsigned char)+0x24>
    d394:	e1a01005 	mov	r1, r5
    d398:	e8bd4070 	pop	{r4, r5, r6, lr}
    d39c:	ea002443 	b	164b0 <CUSBConfigurationParser::GetDescriptor(unsigned char)>
    d3a0:	e59f1018 	ldr	r1, [pc, #24]	; d3c0 <CUSBDevice::GetDescriptor(unsigned char)+0x44>
    d3a4:	e59f0018 	ldr	r0, [pc, #24]	; d3c4 <CUSBDevice::GetDescriptor(unsigned char)+0x48>
    d3a8:	e59f2018 	ldr	r2, [pc, #24]	; d3c8 <CUSBDevice::GetDescriptor(unsigned char)+0x4c>
    d3ac:	eb003368 	bl	1a154 <assertion_failed>
    d3b0:	e594001c 	ldr	r0, [r4, #28]
    d3b4:	e1a01005 	mov	r1, r5
    d3b8:	e8bd4070 	pop	{r4, r5, r6, lr}
    d3bc:	ea00243b 	b	164b0 <CUSBConfigurationParser::GetDescriptor(unsigned char)>
    d3c0:	000238e8 	.word	0x000238e8
    d3c4:	000239c0 	.word	0x000239c0
    d3c8:	00000203 	.word	0x00000203

0000d3cc <CUSBDevice::ConfigurationError(char const*) const>:
    d3cc:	e92d4070 	push	{r4, r5, r6, lr}
    d3d0:	e1a04000 	mov	r4, r0
    d3d4:	e590001c 	ldr	r0, [r0, #28]
    d3d8:	e1a05001 	mov	r5, r1
    d3dc:	e3500000 	cmp	r0, #0
    d3e0:	0a000002 	beq	d3f0 <CUSBDevice::ConfigurationError(char const*) const+0x24>
    d3e4:	e1a01005 	mov	r1, r5
    d3e8:	e8bd4070 	pop	{r4, r5, r6, lr}
    d3ec:	ea00247d 	b	165e8 <CUSBConfigurationParser::Error(char const*) const>
    d3f0:	e59f1018 	ldr	r1, [pc, #24]	; d410 <CUSBDevice::ConfigurationError(char const*) const+0x44>
    d3f4:	e59f0018 	ldr	r0, [pc, #24]	; d414 <CUSBDevice::ConfigurationError(char const*) const+0x48>
    d3f8:	e59f2018 	ldr	r2, [pc, #24]	; d418 <CUSBDevice::ConfigurationError(char const*) const+0x4c>
    d3fc:	eb003354 	bl	1a154 <assertion_failed>
    d400:	e594001c 	ldr	r0, [r4, #28]
    d404:	e1a01005 	mov	r1, r5
    d408:	e8bd4070 	pop	{r4, r5, r6, lr}
    d40c:	ea002475 	b	165e8 <CUSBConfigurationParser::Error(char const*) const>
    d410:	000238e8 	.word	0x000238e8
    d414:	000239c0 	.word	0x000239c0
    d418:	00000209 	.word	0x00000209

0000d41c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>:
    d41c:	e92d000c 	push	{r2, r3}
    d420:	e92d4070 	push	{r4, r5, r6, lr}
    d424:	e24dd020 	sub	sp, sp, #32
    d428:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
    d42c:	e1a05000 	mov	r5, r0
    d430:	e3540000 	cmp	r4, #0
    d434:	e1a06001 	mov	r6, r1
    d438:	0a00001b 	beq	d4ac <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0x90>
    d43c:	e28d0010 	add	r0, sp, #16
    d440:	eb0044c3 	bl	1e754 <CString::CString()>
    d444:	e5d52012 	ldrb	r2, [r5, #18]
    d448:	e5d53011 	ldrb	r3, [r5, #17]
    d44c:	e59f106c 	ldr	r1, [pc, #108]	; d4c0 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0xa4>
    d450:	e28d0010 	add	r0, sp, #16
    d454:	e58d2000 	str	r2, [sp]
    d458:	e59f2064 	ldr	r2, [pc, #100]	; d4c4 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0xa8>
    d45c:	eb0048aa 	bl	1f70c <CString::Format(char const*, ...)>
    d460:	e28d3034 	add	r3, sp, #52	; 0x34
    d464:	e58d300c 	str	r3, [sp, #12]
    d468:	eb003d2c 	bl	1c920 <CLogger::Get()>
    d46c:	e1a05000 	mov	r5, r0
    d470:	e28d0010 	add	r0, sp, #16
    d474:	eb0044cc 	bl	1e7ac <CString::operator char const*() const>
    d478:	e59dc00c 	ldr	ip, [sp, #12]
    d47c:	e1a01000 	mov	r1, r0
    d480:	e1a03004 	mov	r3, r4
    d484:	e1a00005 	mov	r0, r5
    d488:	e1a02006 	mov	r2, r6
    d48c:	e58dc000 	str	ip, [sp]
    d490:	eb003e4e 	bl	1cdd0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
    d494:	e28d0010 	add	r0, sp, #16
    d498:	eb00447a 	bl	1e688 <CString::~CString()>
    d49c:	e28dd020 	add	sp, sp, #32
    d4a0:	e8bd4070 	pop	{r4, r5, r6, lr}
    d4a4:	e28dd008 	add	sp, sp, #8
    d4a8:	e12fff1e 	bx	lr
    d4ac:	e59f2014 	ldr	r2, [pc, #20]	; d4c8 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0xac>
    d4b0:	e59f1014 	ldr	r1, [pc, #20]	; d4cc <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0xb0>
    d4b4:	e59f0014 	ldr	r0, [pc, #20]	; d4d0 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0xb4>
    d4b8:	eb003325 	bl	1a154 <assertion_failed>
    d4bc:	eaffffde 	b	d43c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0x20>
    d4c0:	000239e8 	.word	0x000239e8
    d4c4:	000238e0 	.word	0x000238e0
    d4c8:	0000020f 	.word	0x0000020f
    d4cc:	000238e8 	.word	0x000238e8
    d4d0:	000239d8 	.word	0x000239d8

0000d4d4 <CUSBDevice::Initialize()>:
    d4d4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d4d8:	e5903014 	ldr	r3, [r0, #20]
    d4dc:	e24dd014 	sub	sp, sp, #20
    d4e0:	e3530000 	cmp	r3, #0
    d4e4:	e1a04000 	mov	r4, r0
    d4e8:	0a000003 	beq	d4fc <CUSBDevice::Initialize()+0x28>
    d4ec:	e3a02061 	mov	r2, #97	; 0x61
    d4f0:	e59f168c 	ldr	r1, [pc, #1676]	; db84 <CUSBDevice::Initialize()+0x6b0>
    d4f4:	e59f068c 	ldr	r0, [pc, #1676]	; db88 <CUSBDevice::Initialize()+0x6b4>
    d4f8:	eb003315 	bl	1a154 <assertion_failed>
    d4fc:	e3a00012 	mov	r0, #18
    d500:	eb0050a7 	bl	217a4 <operator new(unsigned int)>
    d504:	e5943004 	ldr	r3, [r4, #4]
    d508:	e5840014 	str	r0, [r4, #20]
    d50c:	e3530000 	cmp	r3, #0
    d510:	0a000080 	beq	d718 <CUSBDevice::Initialize()+0x244>
    d514:	e594100c 	ldr	r1, [r4, #12]
    d518:	e3510000 	cmp	r1, #0
    d51c:	0a000082 	beq	d72c <CUSBDevice::Initialize()+0x258>
    d520:	e3a06000 	mov	r6, #0
    d524:	e3a0c008 	mov	ip, #8
    d528:	e3a05080 	mov	r5, #128	; 0x80
    d52c:	e5942014 	ldr	r2, [r4, #20]
    d530:	e5940004 	ldr	r0, [r4, #4]
    d534:	e1a03006 	mov	r3, r6
    d538:	e88d1004 	stm	sp, {r2, ip}
    d53c:	e58d600c 	str	r6, [sp, #12]
    d540:	e58d5008 	str	r5, [sp, #8]
    d544:	e3a02001 	mov	r2, #1
    d548:	eb000350 	bl	e290 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    d54c:	e3500008 	cmp	r0, #8
    d550:	1a000012 	bne	d5a0 <CUSBDevice::Initialize()+0xcc>
    d554:	e5943014 	ldr	r3, [r4, #20]
    d558:	e5d37000 	ldrb	r7, [r3]
    d55c:	e3570012 	cmp	r7, #18
    d560:	1a000002 	bne	d570 <CUSBDevice::Initialize()+0x9c>
    d564:	e5d38001 	ldrb	r8, [r3, #1]
    d568:	e3580001 	cmp	r8, #1
    d56c:	0a000017 	beq	d5d0 <CUSBDevice::Initialize()+0xfc>
    d570:	e3a05000 	mov	r5, #0
    d574:	e59f2610 	ldr	r2, [pc, #1552]	; db8c <CUSBDevice::Initialize()+0x6b8>
    d578:	e3a01001 	mov	r1, #1
    d57c:	e1a00004 	mov	r0, r4
    d580:	ebffffa5 	bl	d41c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    d584:	e3a01012 	mov	r1, #18
    d588:	e5940014 	ldr	r0, [r4, #20]
    d58c:	eb005088 	bl	217b4 <operator delete(void*, unsigned int)>
    d590:	e5845014 	str	r5, [r4, #20]
    d594:	e1a00005 	mov	r0, r5
    d598:	e28dd014 	add	sp, sp, #20
    d59c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d5a0:	e3a01001 	mov	r1, #1
    d5a4:	e59f25e4 	ldr	r2, [pc, #1508]	; db90 <CUSBDevice::Initialize()+0x6bc>
    d5a8:	e1a05006 	mov	r5, r6
    d5ac:	e1a00004 	mov	r0, r4
    d5b0:	ebffff99 	bl	d41c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    d5b4:	e5940014 	ldr	r0, [r4, #20]
    d5b8:	e3a01012 	mov	r1, #18
    d5bc:	eb00507c 	bl	217b4 <operator delete(void*, unsigned int)>
    d5c0:	e1a00005 	mov	r0, r5
    d5c4:	e5846014 	str	r6, [r4, #20]
    d5c8:	e28dd014 	add	sp, sp, #20
    d5cc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d5d0:	e5d31007 	ldrb	r1, [r3, #7]
    d5d4:	e594000c 	ldr	r0, [r4, #12]
    d5d8:	eb00028d 	bl	e014 <CUSBEndpoint::SetMaxPacketSize(unsigned int)>
    d5dc:	e5943014 	ldr	r3, [r4, #20]
    d5e0:	e594100c 	ldr	r1, [r4, #12]
    d5e4:	e5940004 	ldr	r0, [r4, #4]
    d5e8:	e1a02008 	mov	r2, r8
    d5ec:	e88d0088 	stm	sp, {r3, r7}
    d5f0:	e58d600c 	str	r6, [sp, #12]
    d5f4:	e58d5008 	str	r5, [sp, #8]
    d5f8:	e1a03006 	mov	r3, r6
    d5fc:	eb000323 	bl	e290 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    d600:	e3500012 	cmp	r0, #18
    d604:	1a00004e 	bne	d744 <CUSBDevice::Initialize()+0x270>
    d608:	e59f3584 	ldr	r3, [pc, #1412]	; db94 <CUSBDevice::Initialize()+0x6c0>
    d60c:	e5d37000 	ldrb	r7, [r3]
    d610:	e2872001 	add	r2, r7, #1
    d614:	e357007f 	cmp	r7, #127	; 0x7f
    d618:	e5c32000 	strb	r2, [r3]
    d61c:	ca00004b 	bgt	d750 <CUSBDevice::Initialize()+0x27c>
    d620:	e1a02007 	mov	r2, r7
    d624:	e594100c 	ldr	r1, [r4, #12]
    d628:	e5940004 	ldr	r0, [r4, #4]
    d62c:	eb000325 	bl	e2c8 <CUSBHostController::SetAddress(CUSBEndpoint*, unsigned char)>
    d630:	e2505000 	subs	r5, r0, #0
    d634:	0a000055 	beq	d790 <CUSBDevice::Initialize()+0x2bc>
    d638:	e5943018 	ldr	r3, [r4, #24]
    d63c:	e5c47008 	strb	r7, [r4, #8]
    d640:	e3530000 	cmp	r3, #0
    d644:	0a000003 	beq	d658 <CUSBDevice::Initialize()+0x184>
    d648:	e3a020a5 	mov	r2, #165	; 0xa5
    d64c:	e59f1530 	ldr	r1, [pc, #1328]	; db84 <CUSBDevice::Initialize()+0x6b0>
    d650:	e59f0540 	ldr	r0, [pc, #1344]	; db98 <CUSBDevice::Initialize()+0x6c4>
    d654:	eb0032be 	bl	1a154 <assertion_failed>
    d658:	e3a00009 	mov	r0, #9
    d65c:	eb005050 	bl	217a4 <operator new(unsigned int)>
    d660:	e5942014 	ldr	r2, [r4, #20]
    d664:	e5840018 	str	r0, [r4, #24]
    d668:	e5d23008 	ldrb	r3, [r2, #8]
    d66c:	e5d2c009 	ldrb	ip, [r2, #9]
    d670:	e59f1524 	ldr	r1, [pc, #1316]	; db9c <CUSBDevice::Initialize()+0x6c8>
    d674:	e183340c 	orr	r3, r3, ip, lsl #8
    d678:	e1530001 	cmp	r3, r1
    d67c:	05d2500a 	ldrbeq	r5, [r2, #10]
    d680:	05d2200b 	ldrbeq	r2, [r2, #11]
    d684:	059f3514 	ldreq	r3, [pc, #1300]	; dba0 <CUSBDevice::Initialize()+0x6cc>
    d688:	01855402 	orreq	r5, r5, r2, lsl #8
    d68c:	00455003 	subeq	r5, r5, r3
    d690:	016f5f15 	clzeq	r5, r5
    d694:	13a05000 	movne	r5, #0
    d698:	e3a07009 	mov	r7, #9
    d69c:	e3a06000 	mov	r6, #0
    d6a0:	e3a08080 	mov	r8, #128	; 0x80
    d6a4:	e5943004 	ldr	r3, [r4, #4]
    d6a8:	01a052a5 	lsreq	r5, r5, #5
    d6ac:	e594100c 	ldr	r1, [r4, #12]
    d6b0:	e3a02002 	mov	r2, #2
    d6b4:	e58d0000 	str	r0, [sp]
    d6b8:	e58d600c 	str	r6, [sp, #12]
    d6bc:	e1a00003 	mov	r0, r3
    d6c0:	e98d0180 	stmib	sp, {r7, r8}
    d6c4:	e1a03005 	mov	r3, r5
    d6c8:	eb0002f0 	bl	e290 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    d6cc:	e1500007 	cmp	r0, r7
    d6d0:	1a000024 	bne	d768 <CUSBDevice::Initialize()+0x294>
    d6d4:	e5940018 	ldr	r0, [r4, #24]
    d6d8:	e5d07000 	ldrb	r7, [r0]
    d6dc:	e3570009 	cmp	r7, #9
    d6e0:	1a000002 	bne	d6f0 <CUSBDevice::Initialize()+0x21c>
    d6e4:	e5d09001 	ldrb	r9, [r0, #1]
    d6e8:	e3590002 	cmp	r9, #2
    d6ec:	0a00002d 	beq	d7a8 <CUSBDevice::Initialize()+0x2d4>
    d6f0:	e3a05000 	mov	r5, #0
    d6f4:	e59f24a8 	ldr	r2, [pc, #1192]	; dba4 <CUSBDevice::Initialize()+0x6d0>
    d6f8:	e3a01001 	mov	r1, #1
    d6fc:	e1a00004 	mov	r0, r4
    d700:	ebffff45 	bl	d41c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    d704:	e3a01009 	mov	r1, #9
    d708:	e5940018 	ldr	r0, [r4, #24]
    d70c:	eb005028 	bl	217b4 <operator delete(void*, unsigned int)>
    d710:	e5845018 	str	r5, [r4, #24]
    d714:	eaffff9e 	b	d594 <CUSBDevice::Initialize()+0xc0>
    d718:	e3a02065 	mov	r2, #101	; 0x65
    d71c:	e59f1460 	ldr	r1, [pc, #1120]	; db84 <CUSBDevice::Initialize()+0x6b0>
    d720:	e59f0480 	ldr	r0, [pc, #1152]	; dba8 <CUSBDevice::Initialize()+0x6d4>
    d724:	eb00328a 	bl	1a154 <assertion_failed>
    d728:	eaffff79 	b	d514 <CUSBDevice::Initialize()+0x40>
    d72c:	e59f1450 	ldr	r1, [pc, #1104]	; db84 <CUSBDevice::Initialize()+0x6b0>
    d730:	e3a02066 	mov	r2, #102	; 0x66
    d734:	e59f0470 	ldr	r0, [pc, #1136]	; dbac <CUSBDevice::Initialize()+0x6d8>
    d738:	eb003285 	bl	1a154 <assertion_failed>
    d73c:	e594100c 	ldr	r1, [r4, #12]
    d740:	eaffff76 	b	d520 <CUSBDevice::Initialize()+0x4c>
    d744:	e1a01008 	mov	r1, r8
    d748:	e59f2460 	ldr	r2, [pc, #1120]	; dbb0 <CUSBDevice::Initialize()+0x6dc>
    d74c:	eaffff95 	b	d5a8 <CUSBDevice::Initialize()+0xd4>
    d750:	e1a01008 	mov	r1, r8
    d754:	e1a00004 	mov	r0, r4
    d758:	e59f2454 	ldr	r2, [pc, #1108]	; dbb4 <CUSBDevice::Initialize()+0x6e0>
    d75c:	e1a05006 	mov	r5, r6
    d760:	ebffff2d 	bl	d41c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    d764:	eaffff8a 	b	d594 <CUSBDevice::Initialize()+0xc0>
    d768:	e59f2448 	ldr	r2, [pc, #1096]	; dbb8 <CUSBDevice::Initialize()+0x6e4>
    d76c:	e3a01001 	mov	r1, #1
    d770:	e1a00004 	mov	r0, r4
    d774:	ebffff28 	bl	d41c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    d778:	e1a01007 	mov	r1, r7
    d77c:	e5940018 	ldr	r0, [r4, #24]
    d780:	eb00500b 	bl	217b4 <operator delete(void*, unsigned int)>
    d784:	e1a05006 	mov	r5, r6
    d788:	e5846018 	str	r6, [r4, #24]
    d78c:	eaffff80 	b	d594 <CUSBDevice::Initialize()+0xc0>
    d790:	e1a03007 	mov	r3, r7
    d794:	e1a01008 	mov	r1, r8
    d798:	e1a00004 	mov	r0, r4
    d79c:	e59f2418 	ldr	r2, [pc, #1048]	; dbbc <CUSBDevice::Initialize()+0x6e8>
    d7a0:	ebffff1d 	bl	d41c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    d7a4:	eaffff7a 	b	d594 <CUSBDevice::Initialize()+0xc0>
    d7a8:	e5d0a002 	ldrb	sl, [r0, #2]
    d7ac:	e5d03003 	ldrb	r3, [r0, #3]
    d7b0:	e18aa403 	orr	sl, sl, r3, lsl #8
    d7b4:	e35a0c02 	cmp	sl, #512	; 0x200
    d7b8:	caffffcc 	bgt	d6f0 <CUSBDevice::Initialize()+0x21c>
    d7bc:	e1a01007 	mov	r1, r7
    d7c0:	eb004ffb 	bl	217b4 <operator delete(void*, unsigned int)>
    d7c4:	e1a0000a 	mov	r0, sl
    d7c8:	eb004ff6 	bl	217a8 <operator new[](unsigned int)>
    d7cc:	e1a03000 	mov	r3, r0
    d7d0:	e594100c 	ldr	r1, [r4, #12]
    d7d4:	e5843018 	str	r3, [r4, #24]
    d7d8:	e5940004 	ldr	r0, [r4, #4]
    d7dc:	e1a02009 	mov	r2, r9
    d7e0:	e58d3000 	str	r3, [sp]
    d7e4:	e58d600c 	str	r6, [sp, #12]
    d7e8:	e58d8008 	str	r8, [sp, #8]
    d7ec:	e58da004 	str	sl, [sp, #4]
    d7f0:	e1a03005 	mov	r3, r5
    d7f4:	eb0002a5 	bl	e290 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    d7f8:	e15a0000 	cmp	sl, r0
    d7fc:	1a000098 	bne	da64 <CUSBDevice::Initialize()+0x590>
    d800:	e594301c 	ldr	r3, [r4, #28]
    d804:	e3530000 	cmp	r3, #0
    d808:	0a000003 	beq	d81c <CUSBDevice::Initialize()+0x348>
    d80c:	e3a020e3 	mov	r2, #227	; 0xe3
    d810:	e59f136c 	ldr	r1, [pc, #876]	; db84 <CUSBDevice::Initialize()+0x6b0>
    d814:	e59f03a4 	ldr	r0, [pc, #932]	; dbc0 <CUSBDevice::Initialize()+0x6ec>
    d818:	eb00324d 	bl	1a154 <assertion_failed>
    d81c:	e3a0001c 	mov	r0, #28
    d820:	eb004fdf 	bl	217a4 <operator new(unsigned int)>
    d824:	e1a05000 	mov	r5, r0
    d828:	e1a0200a 	mov	r2, sl
    d82c:	e5941018 	ldr	r1, [r4, #24]
    d830:	eb0022a9 	bl	162dc <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)>
    d834:	e584501c 	str	r5, [r4, #28]
    d838:	e1a00005 	mov	r0, r5
    d83c:	eb002319 	bl	164a8 <CUSBConfigurationParser::IsValid() const>
    d840:	e2505000 	subs	r5, r0, #0
    d844:	e1a00004 	mov	r0, r4
    d848:	0a000087 	beq	da6c <CUSBDevice::Initialize()+0x598>
    d84c:	ebfffe1e 	bl	d0cc <CUSBDevice::GetNames() const>
    d850:	e2506000 	subs	r6, r0, #0
    d854:	0a00009c 	beq	dacc <CUSBDevice::Initialize()+0x5f8>
    d858:	eb0043d3 	bl	1e7ac <CString::operator char const*() const>
    d85c:	e59f2360 	ldr	r2, [pc, #864]	; dbc4 <CUSBDevice::Initialize()+0x6f0>
    d860:	e1a03000 	mov	r3, r0
    d864:	e3a01003 	mov	r1, #3
    d868:	e1a00004 	mov	r0, r4
    d86c:	ebfffeea 	bl	d41c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    d870:	e5963000 	ldr	r3, [r6]
    d874:	e1a00006 	mov	r0, r6
    d878:	e5933004 	ldr	r3, [r3, #4]
    d87c:	e12fff33 	blx	r3
    d880:	e3a09000 	mov	r9, #0
    d884:	e1a08009 	mov	r8, r9
    d888:	e59fb338 	ldr	fp, [pc, #824]	; dbc8 <CUSBDevice::Initialize()+0x6f4>
    d88c:	e3a01004 	mov	r1, #4
    d890:	e594001c 	ldr	r0, [r4, #28]
    d894:	eb002305 	bl	164b0 <CUSBConfigurationParser::GetDescriptor(unsigned char)>
    d898:	e3500000 	cmp	r0, #0
    d89c:	0a000075 	beq	da78 <CUSBDevice::Initialize()+0x5a4>
    d8a0:	e5d06002 	ldrb	r6, [r0, #2]
    d8a4:	e1560009 	cmp	r6, r9
    d8a8:	ca000007 	bgt	d8cc <CUSBDevice::Initialize()+0x3f8>
    d8ac:	e1590006 	cmp	r9, r6
    d8b0:	0a000005 	beq	d8cc <CUSBDevice::Initialize()+0x3f8>
    d8b4:	e5d03003 	ldrb	r3, [r0, #3]
    d8b8:	e1a0200b 	mov	r2, fp
    d8bc:	e3a01004 	mov	r1, #4
    d8c0:	e1a00004 	mov	r0, r4
    d8c4:	ebfffed4 	bl	d41c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    d8c8:	eaffffef 	b	d88c <CUSBDevice::Initialize()+0x3b8>
    d8cc:	e594301c 	ldr	r3, [r4, #28]
    d8d0:	e3530000 	cmp	r3, #0
    d8d4:	0a00006f 	beq	da98 <CUSBDevice::Initialize()+0x5c4>
    d8d8:	e0847108 	add	r7, r4, r8, lsl #2
    d8dc:	e5973020 	ldr	r3, [r7, #32]
    d8e0:	e3530000 	cmp	r3, #0
    d8e4:	0a00003a 	beq	d9d4 <CUSBDevice::Initialize()+0x500>
    d8e8:	e59f22dc 	ldr	r2, [pc, #732]	; dbcc <CUSBDevice::Initialize()+0x6f8>
    d8ec:	e59f1290 	ldr	r1, [pc, #656]	; db84 <CUSBDevice::Initialize()+0x6b0>
    d8f0:	e59f02d8 	ldr	r0, [pc, #728]	; dbd0 <CUSBDevice::Initialize()+0x6fc>
    d8f4:	eb003216 	bl	1a154 <assertion_failed>
    d8f8:	e3a00010 	mov	r0, #16
    d8fc:	eb004fa8 	bl	217a4 <operator new(unsigned int)>
    d900:	e1a09000 	mov	r9, r0
    d904:	e594201c 	ldr	r2, [r4, #28]
    d908:	e1a01004 	mov	r1, r4
    d90c:	eb001a61 	bl	14298 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)>
    d910:	e1a00009 	mov	r0, r9
    d914:	e5879020 	str	r9, [r7, #32]
    d918:	e5903000 	ldr	r3, [r0]
    d91c:	e5933014 	ldr	r3, [r3, #20]
    d920:	e12fff33 	blx	r3
    d924:	e250a000 	subs	sl, r0, #0
    d928:	0a00001b 	beq	d99c <CUSBDevice::Initialize()+0x4c8>
    d92c:	e3580000 	cmp	r8, #0
    d930:	0a000030 	beq	d9f8 <CUSBDevice::Initialize()+0x524>
    d934:	e5970020 	ldr	r0, [r7, #32]
    d938:	eb001ac7 	bl	1445c <CUSBFunction::GetInterfaceName() const>
    d93c:	e2509000 	subs	r9, r0, #0
    d940:	0a000077 	beq	db24 <CUSBDevice::Initialize()+0x650>
    d944:	e59f1288 	ldr	r1, [pc, #648]	; dbd4 <CUSBDevice::Initialize()+0x700>
    d948:	eb0043ea 	bl	1e8f8 <CString::Compare(char const*) const>
    d94c:	e3500000 	cmp	r0, #0
    d950:	1a00007c 	bne	db48 <CUSBDevice::Initialize()+0x674>
    d954:	e5993000 	ldr	r3, [r9]
    d958:	e1a00009 	mov	r0, r9
    d95c:	e5933004 	ldr	r3, [r3, #4]
    d960:	e12fff33 	blx	r3
    d964:	e5970020 	ldr	r0, [r7, #32]
    d968:	e3500000 	cmp	r0, #0
    d96c:	0a000004 	beq	d984 <CUSBDevice::Initialize()+0x4b0>
    d970:	e5903000 	ldr	r3, [r0]
    d974:	e5933004 	ldr	r3, [r3, #4]
    d978:	e12fff33 	blx	r3
    d97c:	e3a03000 	mov	r3, #0
    d980:	e5873020 	str	r3, [r7, #32]
    d984:	e59f224c 	ldr	r2, [pc, #588]	; dbd8 <CUSBDevice::Initialize()+0x704>
    d988:	e3a01002 	mov	r1, #2
    d98c:	e1a00004 	mov	r0, r4
    d990:	e1a09006 	mov	r9, r6
    d994:	ebfffea0 	bl	d41c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    d998:	eaffffbb 	b	d88c <CUSBDevice::Initialize()+0x3b8>
    d99c:	e1a00004 	mov	r0, r4
    d9a0:	e59f2234 	ldr	r2, [pc, #564]	; dbdc <CUSBDevice::Initialize()+0x708>
    d9a4:	e3a01001 	mov	r1, #1
    d9a8:	ebfffe9b 	bl	d41c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    d9ac:	e5970020 	ldr	r0, [r7, #32]
    d9b0:	e3500000 	cmp	r0, #0
    d9b4:	0a000002 	beq	d9c4 <CUSBDevice::Initialize()+0x4f0>
    d9b8:	e5903000 	ldr	r3, [r0]
    d9bc:	e5933004 	ldr	r3, [r3, #4]
    d9c0:	e12fff33 	blx	r3
    d9c4:	e3a03000 	mov	r3, #0
    d9c8:	e1a09006 	mov	r9, r6
    d9cc:	e5873020 	str	r3, [r7, #32]
    d9d0:	eaffffad 	b	d88c <CUSBDevice::Initialize()+0x3b8>
    d9d4:	e3a00010 	mov	r0, #16
    d9d8:	eb004f71 	bl	217a4 <operator new(unsigned int)>
    d9dc:	e1a09000 	mov	r9, r0
    d9e0:	e594201c 	ldr	r2, [r4, #28]
    d9e4:	e1a01004 	mov	r1, r4
    d9e8:	eb001a2a 	bl	14298 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)>
    d9ec:	e5879020 	str	r9, [r7, #32]
    d9f0:	e1a00009 	mov	r0, r9
    d9f4:	eaffffc7 	b	d918 <CUSBDevice::Initialize()+0x444>
    d9f8:	e1a01008 	mov	r1, r8
    d9fc:	e1a00004 	mov	r0, r4
    da00:	e5949020 	ldr	r9, [r4, #32]
    da04:	ebfffd69 	bl	cfb0 <CUSBDevice::GetName(TDeviceNameSelector) const>
    da08:	e1a01000 	mov	r1, r0
    da0c:	e1a00009 	mov	r0, r9
    da10:	eb000368 	bl	e7b8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>
    da14:	e2509000 	subs	r9, r0, #0
    da18:	0a000037 	beq	dafc <CUSBDevice::Initialize()+0x628>
    da1c:	e5940020 	ldr	r0, [r4, #32]
    da20:	e3500000 	cmp	r0, #0
    da24:	0a00000b 	beq	da58 <CUSBDevice::Initialize()+0x584>
    da28:	e5903000 	ldr	r3, [r0]
    da2c:	e5933004 	ldr	r3, [r3, #4]
    da30:	e12fff33 	blx	r3
    da34:	e3590000 	cmp	r9, #0
    da38:	0a000021 	beq	dac4 <CUSBDevice::Initialize()+0x5f0>
    da3c:	e2888001 	add	r8, r8, #1
    da40:	e358000a 	cmp	r8, #10
    da44:	e5879020 	str	r9, [r7, #32]
    da48:	0a000017 	beq	daac <CUSBDevice::Initialize()+0x5d8>
    da4c:	e2866001 	add	r6, r6, #1
    da50:	e6ef9076 	uxtb	r9, r6
    da54:	eaffff8c 	b	d88c <CUSBDevice::Initialize()+0x3b8>
    da58:	e5849020 	str	r9, [r4, #32]
    da5c:	e3a08001 	mov	r8, #1
    da60:	eafffff9 	b	da4c <CUSBDevice::Initialize()+0x578>
    da64:	e59f2174 	ldr	r2, [pc, #372]	; dbe0 <CUSBDevice::Initialize()+0x70c>
    da68:	eaffff3f 	b	d76c <CUSBDevice::Initialize()+0x298>
    da6c:	e59f1170 	ldr	r1, [pc, #368]	; dbe4 <CUSBDevice::Initialize()+0x710>
    da70:	ebfffe55 	bl	d3cc <CUSBDevice::ConfigurationError(char const*) const>
    da74:	eafffec6 	b	d594 <CUSBDevice::Initialize()+0xc0>
    da78:	e3580000 	cmp	r8, #0
    da7c:	1afffec4 	bne	d594 <CUSBDevice::Initialize()+0xc0>
    da80:	e1a00004 	mov	r0, r4
    da84:	e59f215c 	ldr	r2, [pc, #348]	; dbe8 <CUSBDevice::Initialize()+0x714>
    da88:	e3a01002 	mov	r1, #2
    da8c:	e1a05008 	mov	r5, r8
    da90:	ebfffe61 	bl	d41c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    da94:	eafffebe 	b	d594 <CUSBDevice::Initialize()+0xc0>
    da98:	e59f214c 	ldr	r2, [pc, #332]	; dbec <CUSBDevice::Initialize()+0x718>
    da9c:	e59f10e0 	ldr	r1, [pc, #224]	; db84 <CUSBDevice::Initialize()+0x6b0>
    daa0:	e59f0148 	ldr	r0, [pc, #328]	; dbf0 <CUSBDevice::Initialize()+0x71c>
    daa4:	eb0031aa 	bl	1a154 <assertion_failed>
    daa8:	eaffff8a 	b	d8d8 <CUSBDevice::Initialize()+0x404>
    daac:	e1a00004 	mov	r0, r4
    dab0:	e59f213c 	ldr	r2, [pc, #316]	; dbf4 <CUSBDevice::Initialize()+0x720>
    dab4:	e3a01002 	mov	r1, #2
    dab8:	e1a0500a 	mov	r5, sl
    dabc:	ebfffe56 	bl	d41c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    dac0:	eafffeb3 	b	d594 <CUSBDevice::Initialize()+0xc0>
    dac4:	e5879020 	str	r9, [r7, #32]
    dac8:	eaffffad 	b	d984 <CUSBDevice::Initialize()+0x4b0>
    dacc:	e3a020ef 	mov	r2, #239	; 0xef
    dad0:	e59f10ac 	ldr	r1, [pc, #172]	; db84 <CUSBDevice::Initialize()+0x6b0>
    dad4:	e59f011c 	ldr	r0, [pc, #284]	; dbf8 <CUSBDevice::Initialize()+0x724>
    dad8:	eb00319d 	bl	1a154 <assertion_failed>
    dadc:	e1a00006 	mov	r0, r6
    dae0:	eb004331 	bl	1e7ac <CString::operator char const*() const>
    dae4:	e59f20d8 	ldr	r2, [pc, #216]	; dbc4 <CUSBDevice::Initialize()+0x6f0>
    dae8:	e1a03000 	mov	r3, r0
    daec:	e3a01003 	mov	r1, #3
    daf0:	e1a00004 	mov	r0, r4
    daf4:	ebfffe48 	bl	d41c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    daf8:	eaffff60 	b	d880 <CUSBDevice::Initialize()+0x3ac>
    dafc:	e3a01001 	mov	r1, #1
    db00:	e1a00004 	mov	r0, r4
    db04:	e5949020 	ldr	r9, [r4, #32]
    db08:	ebfffd28 	bl	cfb0 <CUSBDevice::GetName(TDeviceNameSelector) const>
    db0c:	e1a01000 	mov	r1, r0
    db10:	e1a00009 	mov	r0, r9
    db14:	eb000327 	bl	e7b8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>
    db18:	e2509000 	subs	r9, r0, #0
    db1c:	0affff84 	beq	d934 <CUSBDevice::Initialize()+0x460>
    db20:	eaffffbd 	b	da1c <CUSBDevice::Initialize()+0x548>
    db24:	e59f20d0 	ldr	r2, [pc, #208]	; dbfc <CUSBDevice::Initialize()+0x728>
    db28:	e59f1054 	ldr	r1, [pc, #84]	; db84 <CUSBDevice::Initialize()+0x6b0>
    db2c:	e59f00cc 	ldr	r0, [pc, #204]	; dc00 <CUSBDevice::Initialize()+0x72c>
    db30:	eb003187 	bl	1a154 <assertion_failed>
    db34:	e59f1098 	ldr	r1, [pc, #152]	; dbd4 <CUSBDevice::Initialize()+0x700>
    db38:	e1a00009 	mov	r0, r9
    db3c:	eb00436d 	bl	1e8f8 <CString::Compare(char const*) const>
    db40:	e3500000 	cmp	r0, #0
    db44:	0affff86 	beq	d964 <CUSBDevice::Initialize()+0x490>
    db48:	e1a00009 	mov	r0, r9
    db4c:	eb004316 	bl	1e7ac <CString::operator char const*() const>
    db50:	e59f20ac 	ldr	r2, [pc, #172]	; dc04 <CUSBDevice::Initialize()+0x730>
    db54:	e1a03000 	mov	r3, r0
    db58:	e3a01003 	mov	r1, #3
    db5c:	e1a00004 	mov	r0, r4
    db60:	ebfffe2d 	bl	d41c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    db64:	e1a01009 	mov	r1, r9
    db68:	e5970020 	ldr	r0, [r7, #32]
    db6c:	eb000311 	bl	e7b8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>
    db70:	e1a09000 	mov	r9, r0
    db74:	e5970020 	ldr	r0, [r7, #32]
    db78:	e3500000 	cmp	r0, #0
    db7c:	1affffa9 	bne	da28 <CUSBDevice::Initialize()+0x554>
    db80:	eaffffab 	b	da34 <CUSBDevice::Initialize()+0x560>
    db84:	000238e8 	.word	0x000238e8
    db88:	000239f0 	.word	0x000239f0
    db8c:	00023a2c 	.word	0x00023a2c
    db90:	00023a04 	.word	0x00023a04
    db94:	00029754 	.word	0x00029754
    db98:	00023a94 	.word	0x00023a94
    db9c:	00000525 	.word	0x00000525
    dba0:	0000a4a2 	.word	0x0000a4a2
    dba4:	00023ad4 	.word	0x00023ad4
    dba8:	000238f8 	.word	0x000238f8
    dbac:	00023998 	.word	0x00023998
    dbb0:	00023a48 	.word	0x00023a48
    dbb4:	00023a68 	.word	0x00023a68
    dbb8:	00023aa8 	.word	0x00023aa8
    dbbc:	00023a7c 	.word	0x00023a7c
    dbc0:	00023b1c 	.word	0x00023b1c
    dbc4:	00023b40 	.word	0x00023b40
    dbc8:	00023b50 	.word	0x00023b50
    dbcc:	00000113 	.word	0x00000113
    dbd0:	00023b70 	.word	0x00023b70
    dbd4:	00023960 	.word	0x00023960
    dbd8:	00023bbc 	.word	0x00023bbc
    dbdc:	00023b8c 	.word	0x00023b8c
    dbe0:	00023af8 	.word	0x00023af8
    dbe4:	000238e0 	.word	0x000238e0
    dbe8:	00023bf8 	.word	0x00023bf8
    dbec:	00000112 	.word	0x00000112
    dbf0:	000239c0 	.word	0x000239c0
    dbf4:	00023bd8 	.word	0x00023bd8
    dbf8:	00023b34 	.word	0x00023b34
    dbfc:	0000012f 	.word	0x0000012f
    dc00:	00023968 	.word	0x00023968
    dc04:	00023ba8 	.word	0x00023ba8

0000dc08 <CUSBDevice::Configure()>:
    dc08:	e5903004 	ldr	r3, [r0, #4]
    dc0c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    dc10:	e3530000 	cmp	r3, #0
    dc14:	e1a05000 	mov	r5, r0
    dc18:	0a00002c 	beq	dcd0 <CUSBDevice::Configure()+0xc8>
    dc1c:	e595300c 	ldr	r3, [r5, #12]
    dc20:	e3530000 	cmp	r3, #0
    dc24:	0a00002e 	beq	dce4 <CUSBDevice::Configure()+0xdc>
    dc28:	e5956018 	ldr	r6, [r5, #24]
    dc2c:	e3560000 	cmp	r6, #0
    dc30:	0a00001c 	beq	dca8 <CUSBDevice::Configure()+0xa0>
    dc34:	e5d62005 	ldrb	r2, [r6, #5]
    dc38:	e595100c 	ldr	r1, [r5, #12]
    dc3c:	e5950004 	ldr	r0, [r5, #4]
    dc40:	eb0001b3 	bl	e314 <CUSBHostController::SetConfiguration(CUSBEndpoint*, unsigned char)>
    dc44:	e2506000 	subs	r6, r0, #0
    dc48:	0a000018 	beq	dcb0 <CUSBDevice::Configure()+0xa8>
    dc4c:	e3a06000 	mov	r6, #0
    dc50:	e1a07006 	mov	r7, r6
    dc54:	e2854020 	add	r4, r5, #32
    dc58:	e2855048 	add	r5, r5, #72	; 0x48
    dc5c:	e5940000 	ldr	r0, [r4]
    dc60:	e3500000 	cmp	r0, #0
    dc64:	0a00000c 	beq	dc9c <CUSBDevice::Configure()+0x94>
    dc68:	e5903000 	ldr	r3, [r0]
    dc6c:	e5933018 	ldr	r3, [r3, #24]
    dc70:	e12fff33 	blx	r3
    dc74:	e3500000 	cmp	r0, #0
    dc78:	11a06000 	movne	r6, r0
    dc7c:	1a000006 	bne	dc9c <CUSBDevice::Configure()+0x94>
    dc80:	e5940000 	ldr	r0, [r4]
    dc84:	e3500000 	cmp	r0, #0
    dc88:	0a000002 	beq	dc98 <CUSBDevice::Configure()+0x90>
    dc8c:	e5903000 	ldr	r3, [r0]
    dc90:	e5933004 	ldr	r3, [r3, #4]
    dc94:	e12fff33 	blx	r3
    dc98:	e5847000 	str	r7, [r4]
    dc9c:	e2844004 	add	r4, r4, #4
    dca0:	e1550004 	cmp	r5, r4
    dca4:	1affffec 	bne	dc5c <CUSBDevice::Configure()+0x54>
    dca8:	e1a00006 	mov	r0, r6
    dcac:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    dcb0:	e5953018 	ldr	r3, [r5, #24]
    dcb4:	e1a00005 	mov	r0, r5
    dcb8:	e5d33005 	ldrb	r3, [r3, #5]
    dcbc:	e59f2034 	ldr	r2, [pc, #52]	; dcf8 <CUSBDevice::Configure()+0xf0>
    dcc0:	e3a01001 	mov	r1, #1
    dcc4:	ebfffdd4 	bl	d41c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    dcc8:	e1a00006 	mov	r0, r6
    dccc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    dcd0:	e59f2024 	ldr	r2, [pc, #36]	; dcfc <CUSBDevice::Configure()+0xf4>
    dcd4:	e59f1024 	ldr	r1, [pc, #36]	; dd00 <CUSBDevice::Configure()+0xf8>
    dcd8:	e59f0024 	ldr	r0, [pc, #36]	; dd04 <CUSBDevice::Configure()+0xfc>
    dcdc:	eb00311c 	bl	1a154 <assertion_failed>
    dce0:	eaffffcd 	b	dc1c <CUSBDevice::Configure()+0x14>
    dce4:	e59f201c 	ldr	r2, [pc, #28]	; dd08 <CUSBDevice::Configure()+0x100>
    dce8:	e59f1010 	ldr	r1, [pc, #16]	; dd00 <CUSBDevice::Configure()+0xf8>
    dcec:	e59f0018 	ldr	r0, [pc, #24]	; dd0c <CUSBDevice::Configure()+0x104>
    dcf0:	eb003117 	bl	1a154 <assertion_failed>
    dcf4:	eaffffcb 	b	dc28 <CUSBDevice::Configure()+0x20>
    dcf8:	00023c1c 	.word	0x00023c1c
    dcfc:	0000015e 	.word	0x0000015e
    dd00:	000238e8 	.word	0x000238e8
    dd04:	000238f8 	.word	0x000238f8
    dd08:	0000015f 	.word	0x0000015f
    dd0c:	00023998 	.word	0x00023998

0000dd10 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)>:
    dd10:	e3a03000 	mov	r3, #0
    dd14:	e92d4010 	push	{r4, lr}
    dd18:	e3a02001 	mov	r2, #1
    dd1c:	e1a04000 	mov	r4, r0
    dd20:	e3a00008 	mov	r0, #8
    dd24:	e1510003 	cmp	r1, r3
    dd28:	e5841000 	str	r1, [r4]
    dd2c:	e5840008 	str	r0, [r4, #8]
    dd30:	e584200c 	str	r2, [r4, #12]
    dd34:	e5c43004 	strb	r3, [r4, #4]
    dd38:	e5c43005 	strb	r3, [r4, #5]
    dd3c:	e5c43006 	strb	r3, [r4, #6]
    dd40:	e5c43010 	strb	r3, [r4, #16]
    dd44:	0a000001 	beq	dd50 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)+0x40>
    dd48:	e1a00004 	mov	r0, r4
    dd4c:	e8bd8010 	pop	{r4, pc}
    dd50:	e3a02021 	mov	r2, #33	; 0x21
    dd54:	e59f100c 	ldr	r1, [pc, #12]	; dd68 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)+0x58>
    dd58:	e59f000c 	ldr	r0, [pc, #12]	; dd6c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)+0x5c>
    dd5c:	eb0030fc 	bl	1a154 <assertion_failed>
    dd60:	e1a00004 	mov	r0, r4
    dd64:	e8bd8010 	pop	{r4, pc}
    dd68:	00023c3c 	.word	0x00023c3c
    dd6c:	00023794 	.word	0x00023794

0000dd70 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>:
    dd70:	e3a03001 	mov	r3, #1
    dd74:	e3510000 	cmp	r1, #0
    dd78:	e92d4070 	push	{r4, r5, r6, lr}
    dd7c:	e1a04000 	mov	r4, r0
    dd80:	e5801000 	str	r1, [r0]
    dd84:	e1a05002 	mov	r5, r2
    dd88:	e580300c 	str	r3, [r0, #12]
    dd8c:	0a00005b 	beq	df00 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x190>
    dd90:	e3550000 	cmp	r5, #0
    dd94:	0a000054 	beq	deec <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x17c>
    dd98:	e5d53000 	ldrb	r3, [r5]
    dd9c:	e3530006 	cmp	r3, #6
    dda0:	9a00003b 	bls	de94 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x124>
    dda4:	e5d53001 	ldrb	r3, [r5, #1]
    dda8:	e3530005 	cmp	r3, #5
    ddac:	0a000003 	beq	ddc0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x50>
    ddb0:	e3a0202c 	mov	r2, #44	; 0x2c
    ddb4:	e59f1158 	ldr	r1, [pc, #344]	; df14 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x1a4>
    ddb8:	e59f0158 	ldr	r0, [pc, #344]	; df18 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x1a8>
    ddbc:	eb0030e4 	bl	1a154 <assertion_failed>
    ddc0:	e5d53003 	ldrb	r3, [r5, #3]
    ddc4:	e2033003 	and	r3, r3, #3
    ddc8:	e3530002 	cmp	r3, #2
    ddcc:	0a000022 	beq	de5c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xec>
    ddd0:	e3530003 	cmp	r3, #3
    ddd4:	1a00001a 	bne	de44 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xd4>
    ddd8:	e3a03002 	mov	r3, #2
    dddc:	e3a06001 	mov	r6, #1
    dde0:	e5c43005 	strb	r3, [r4, #5]
    dde4:	e5c46010 	strb	r6, [r4, #16]
    dde8:	e5d53002 	ldrb	r3, [r5, #2]
    ddec:	e203200f 	and	r2, r3, #15
    ddf0:	e1a033a3 	lsr	r3, r3, #7
    ddf4:	e5c42004 	strb	r2, [r4, #4]
    ddf8:	e5c43006 	strb	r3, [r4, #6]
    ddfc:	e5d53004 	ldrb	r3, [r5, #4]
    de00:	e5d52005 	ldrb	r2, [r5, #5]
    de04:	e1833402 	orr	r3, r3, r2, lsl #8
    de08:	e5843008 	str	r3, [r4, #8]
    de0c:	e5d55006 	ldrb	r5, [r5, #6]
    de10:	e3550000 	cmp	r5, #0
    de14:	0a00002e 	beq	ded4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x164>
    de18:	e5940000 	ldr	r0, [r4]
    de1c:	ebfffd0a 	bl	d24c <CUSBDevice::GetSpeed() const>
    de20:	e3500002 	cmp	r0, #2
    de24:	0a00001f 	beq	dea8 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x138>
    de28:	e584500c 	str	r5, [r4, #12]
    de2c:	e3550013 	cmp	r5, #19
    de30:	8a000007 	bhi	de54 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xe4>
    de34:	e3a03014 	mov	r3, #20
    de38:	e1a00004 	mov	r0, r4
    de3c:	e584300c 	str	r3, [r4, #12]
    de40:	e8bd8070 	pop	{r4, r5, r6, pc}
    de44:	e3a0203b 	mov	r2, #59	; 0x3b
    de48:	e59f10c4 	ldr	r1, [pc, #196]	; df14 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x1a4>
    de4c:	e59f00c8 	ldr	r0, [pc, #200]	; df1c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x1ac>
    de50:	eb0030bf 	bl	1a154 <assertion_failed>
    de54:	e1a00004 	mov	r0, r4
    de58:	e8bd8070 	pop	{r4, r5, r6, pc}
    de5c:	e3a03001 	mov	r3, #1
    de60:	e5c43005 	strb	r3, [r4, #5]
    de64:	e5c43010 	strb	r3, [r4, #16]
    de68:	e5d53002 	ldrb	r3, [r5, #2]
    de6c:	e1a00004 	mov	r0, r4
    de70:	e203200f 	and	r2, r3, #15
    de74:	e1a033a3 	lsr	r3, r3, #7
    de78:	e5c42004 	strb	r2, [r4, #4]
    de7c:	e5c43006 	strb	r3, [r4, #6]
    de80:	e5d53004 	ldrb	r3, [r5, #4]
    de84:	e5d52005 	ldrb	r2, [r5, #5]
    de88:	e1833402 	orr	r3, r3, r2, lsl #8
    de8c:	e5843008 	str	r3, [r4, #8]
    de90:	e8bd8070 	pop	{r4, r5, r6, pc}
    de94:	e3a0202b 	mov	r2, #43	; 0x2b
    de98:	e59f1074 	ldr	r1, [pc, #116]	; df14 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x1a4>
    de9c:	e59f007c 	ldr	r0, [pc, #124]	; df20 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x1b0>
    dea0:	eb0030ab 	bl	1a154 <assertion_failed>
    dea4:	eaffffbe 	b	dda4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x34>
    dea8:	e3550010 	cmp	r5, #16
    deac:	c3a03a01 	movgt	r3, #4096	; 0x1000
    deb0:	c584300c 	strgt	r3, [r4, #12]
    deb4:	caffffe6 	bgt	de54 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xe4>
    deb8:	e2453001 	sub	r3, r5, #1
    debc:	e1a05316 	lsl	r5, r6, r3
    dec0:	e1a051a5 	lsr	r5, r5, #3
    dec4:	e3550000 	cmp	r5, #0
    dec8:	e584500c 	str	r5, [r4, #12]
    decc:	0affffd8 	beq	de34 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xc4>
    ded0:	eaffffd5 	b	de2c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xbc>
    ded4:	e5940000 	ldr	r0, [r4]
    ded8:	ebfffcdb 	bl	d24c <CUSBDevice::GetSpeed() const>
    dedc:	e3500002 	cmp	r0, #2
    dee0:	11a05006 	movne	r5, r6
    dee4:	1affffcf 	bne	de28 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xb8>
    dee8:	eaffffd1 	b	de34 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xc4>
    deec:	e3a0202a 	mov	r2, #42	; 0x2a
    def0:	e59f101c 	ldr	r1, [pc, #28]	; df14 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x1a4>
    def4:	e59f0028 	ldr	r0, [pc, #40]	; df24 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x1b4>
    def8:	eb003095 	bl	1a154 <assertion_failed>
    defc:	eaffffa5 	b	dd98 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x28>
    df00:	e3a02028 	mov	r2, #40	; 0x28
    df04:	e59f1008 	ldr	r1, [pc, #8]	; df14 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x1a4>
    df08:	e59f0018 	ldr	r0, [pc, #24]	; df28 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x1b8>
    df0c:	eb003090 	bl	1a154 <assertion_failed>
    df10:	eaffff9e 	b	dd90 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x20>
    df14:	00023c3c 	.word	0x00023c3c
    df18:	00023c78 	.word	0x00023c78
    df1c:	000239a8 	.word	0x000239a8
    df20:	00023c58 	.word	0x00023c58
    df24:	00023c4c 	.word	0x00023c4c
    df28:	00023794 	.word	0x00023794

0000df2c <CUSBEndpoint::CUSBEndpoint(CUSBEndpoint*, CUSBDevice*)>:
    df2c:	e92d4070 	push	{r4, r5, r6, lr}
    df30:	e2515000 	subs	r5, r1, #0
    df34:	e1a04000 	mov	r4, r0
    df38:	e1a06002 	mov	r6, r2
    df3c:	0a000015 	beq	df98 <CUSBEndpoint::CUSBEndpoint(CUSBEndpoint*, CUSBDevice*)+0x6c>
    df40:	e3560000 	cmp	r6, #0
    df44:	e5846000 	str	r6, [r4]
    df48:	0a00000d 	beq	df84 <CUSBEndpoint::CUSBEndpoint(CUSBEndpoint*, CUSBDevice*)+0x58>
    df4c:	e5d53004 	ldrb	r3, [r5, #4]
    df50:	e1a00004 	mov	r0, r4
    df54:	e5c43004 	strb	r3, [r4, #4]
    df58:	e5d5e005 	ldrb	lr, [r5, #5]
    df5c:	e5d5c006 	ldrb	ip, [r5, #6]
    df60:	e5951008 	ldr	r1, [r5, #8]
    df64:	e595200c 	ldr	r2, [r5, #12]
    df68:	e5d53010 	ldrb	r3, [r5, #16]
    df6c:	e5c4e005 	strb	lr, [r4, #5]
    df70:	e5c4c006 	strb	ip, [r4, #6]
    df74:	e5841008 	str	r1, [r4, #8]
    df78:	e584200c 	str	r2, [r4, #12]
    df7c:	e5c43010 	strb	r3, [r4, #16]
    df80:	e8bd8070 	pop	{r4, r5, r6, pc}
    df84:	e3a02070 	mov	r2, #112	; 0x70
    df88:	e59f101c 	ldr	r1, [pc, #28]	; dfac <CUSBEndpoint::CUSBEndpoint(CUSBEndpoint*, CUSBDevice*)+0x80>
    df8c:	e59f001c 	ldr	r0, [pc, #28]	; dfb0 <CUSBEndpoint::CUSBEndpoint(CUSBEndpoint*, CUSBDevice*)+0x84>
    df90:	eb00306f 	bl	1a154 <assertion_failed>
    df94:	eaffffec 	b	df4c <CUSBEndpoint::CUSBEndpoint(CUSBEndpoint*, CUSBDevice*)+0x20>
    df98:	e3a0206d 	mov	r2, #109	; 0x6d
    df9c:	e59f1008 	ldr	r1, [pc, #8]	; dfac <CUSBEndpoint::CUSBEndpoint(CUSBEndpoint*, CUSBDevice*)+0x80>
    dfa0:	e59f000c 	ldr	r0, [pc, #12]	; dfb4 <CUSBEndpoint::CUSBEndpoint(CUSBEndpoint*, CUSBDevice*)+0x88>
    dfa4:	eb00306a 	bl	1a154 <assertion_failed>
    dfa8:	eaffffe4 	b	df40 <CUSBEndpoint::CUSBEndpoint(CUSBEndpoint*, CUSBDevice*)+0x14>
    dfac:	00023c3c 	.word	0x00023c3c
    dfb0:	00023794 	.word	0x00023794
    dfb4:	00023ca8 	.word	0x00023ca8

0000dfb8 <CUSBEndpoint::~CUSBEndpoint()>:
    dfb8:	e12fff1e 	bx	lr

0000dfbc <CUSBEndpoint::GetDevice() const>:
    dfbc:	e5903000 	ldr	r3, [r0]
    dfc0:	e3530000 	cmp	r3, #0
    dfc4:	0a000001 	beq	dfd0 <CUSBEndpoint::GetDevice() const+0x14>
    dfc8:	e1a00003 	mov	r0, r3
    dfcc:	e12fff1e 	bx	lr
    dfd0:	e92d4010 	push	{r4, lr}
    dfd4:	e1a04000 	mov	r4, r0
    dfd8:	e3a02081 	mov	r2, #129	; 0x81
    dfdc:	e59f1010 	ldr	r1, [pc, #16]	; dff4 <CUSBEndpoint::GetDevice() const+0x38>
    dfe0:	e59f0010 	ldr	r0, [pc, #16]	; dff8 <CUSBEndpoint::GetDevice() const+0x3c>
    dfe4:	eb00305a 	bl	1a154 <assertion_failed>
    dfe8:	e5943000 	ldr	r3, [r4]
    dfec:	e1a00003 	mov	r0, r3
    dff0:	e8bd8010 	pop	{r4, pc}
    dff4:	00023c3c 	.word	0x00023c3c
    dff8:	00023794 	.word	0x00023794

0000dffc <CUSBEndpoint::GetNumber() const>:
    dffc:	e5d00004 	ldrb	r0, [r0, #4]
    e000:	e12fff1e 	bx	lr

0000e004 <CUSBEndpoint::GetType() const>:
    e004:	e5d00005 	ldrb	r0, [r0, #5]
    e008:	e12fff1e 	bx	lr

0000e00c <CUSBEndpoint::IsDirectionIn() const>:
    e00c:	e5d00006 	ldrb	r0, [r0, #6]
    e010:	e12fff1e 	bx	lr

0000e014 <CUSBEndpoint::SetMaxPacketSize(unsigned int)>:
    e014:	e5801008 	str	r1, [r0, #8]
    e018:	e12fff1e 	bx	lr

0000e01c <CUSBEndpoint::GetMaxPacketSize() const>:
    e01c:	e5900008 	ldr	r0, [r0, #8]
    e020:	e12fff1e 	bx	lr

0000e024 <CUSBEndpoint::GetInterval() const>:
    e024:	e5d03005 	ldrb	r3, [r0, #5]
    e028:	e92d4010 	push	{r4, lr}
    e02c:	e3530002 	cmp	r3, #2
    e030:	e1a04000 	mov	r4, r0
    e034:	0a000003 	beq	e048 <CUSBEndpoint::GetInterval() const+0x24>
    e038:	e3a020a0 	mov	r2, #160	; 0xa0
    e03c:	e59f100c 	ldr	r1, [pc, #12]	; e050 <CUSBEndpoint::GetInterval() const+0x2c>
    e040:	e59f000c 	ldr	r0, [pc, #12]	; e054 <CUSBEndpoint::GetInterval() const+0x30>
    e044:	eb003042 	bl	1a154 <assertion_failed>
    e048:	e594000c 	ldr	r0, [r4, #12]
    e04c:	e8bd8010 	pop	{r4, pc}
    e050:	00023c3c 	.word	0x00023c3c
    e054:	00023cb8 	.word	0x00023cb8

0000e058 <CUSBEndpoint::GetNextPID(bool)>:
    e058:	e3510000 	cmp	r1, #0
    e05c:	0a000004 	beq	e074 <CUSBEndpoint::GetNextPID(bool)+0x1c>
    e060:	e5d03005 	ldrb	r3, [r0, #5]
    e064:	e3530000 	cmp	r3, #0
    e068:	1a000003 	bne	e07c <CUSBEndpoint::GetNextPID(bool)+0x24>
    e06c:	e3a00002 	mov	r0, #2
    e070:	e12fff1e 	bx	lr
    e074:	e5d00010 	ldrb	r0, [r0, #16]
    e078:	e12fff1e 	bx	lr
    e07c:	e92d4010 	push	{r4, lr}
    e080:	e3a020a9 	mov	r2, #169	; 0xa9
    e084:	e59f100c 	ldr	r1, [pc, #12]	; e098 <CUSBEndpoint::GetNextPID(bool)+0x40>
    e088:	e59f000c 	ldr	r0, [pc, #12]	; e09c <CUSBEndpoint::GetNextPID(bool)+0x44>
    e08c:	eb003030 	bl	1a154 <assertion_failed>
    e090:	e3a00002 	mov	r0, #2
    e094:	e8bd8010 	pop	{r4, pc}
    e098:	00023c3c 	.word	0x00023c3c
    e09c:	00023cd8 	.word	0x00023cd8

0000e0a0 <CUSBEndpoint::SkipPID(unsigned int, bool)>:
    e0a0:	e5d03005 	ldrb	r3, [r0, #5]
    e0a4:	e92d4070 	push	{r4, r5, r6, lr}
    e0a8:	e3530002 	cmp	r3, #2
    e0ac:	e1a04000 	mov	r4, r0
    e0b0:	e1a06001 	mov	r6, r1
    e0b4:	e1a05002 	mov	r5, r2
    e0b8:	8a000011 	bhi	e104 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x64>
    e0bc:	e3550000 	cmp	r5, #0
    e0c0:	1a000009 	bne	e0ec <CUSBEndpoint::SkipPID(unsigned int, bool)+0x4c>
    e0c4:	e5d43010 	ldrb	r3, [r4, #16]
    e0c8:	e3530001 	cmp	r3, #1
    e0cc:	0a00001b 	beq	e140 <CUSBEndpoint::SkipPID(unsigned int, bool)+0xa0>
    e0d0:	3a00001c 	bcc	e148 <CUSBEndpoint::SkipPID(unsigned int, bool)+0xa8>
    e0d4:	e3530002 	cmp	r3, #2
    e0d8:	1a000013 	bne	e12c <CUSBEndpoint::SkipPID(unsigned int, bool)+0x8c>
    e0dc:	e3160001 	tst	r6, #1
    e0e0:	13a03001 	movne	r3, #1
    e0e4:	15c43010 	strbne	r3, [r4, #16]
    e0e8:	e8bd8070 	pop	{r4, r5, r6, pc}
    e0ec:	e5d43005 	ldrb	r3, [r4, #5]
    e0f0:	e3530000 	cmp	r3, #0
    e0f4:	1a000007 	bne	e118 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x78>
    e0f8:	e3a03000 	mov	r3, #0
    e0fc:	e5c43010 	strb	r3, [r4, #16]
    e100:	e8bd8070 	pop	{r4, r5, r6, pc}
    e104:	e3a020b5 	mov	r2, #181	; 0xb5
    e108:	e59f1044 	ldr	r1, [pc, #68]	; e154 <CUSBEndpoint::SkipPID(unsigned int, bool)+0xb4>
    e10c:	e59f0044 	ldr	r0, [pc, #68]	; e158 <CUSBEndpoint::SkipPID(unsigned int, bool)+0xb8>
    e110:	eb00300f 	bl	1a154 <assertion_failed>
    e114:	eaffffe8 	b	e0bc <CUSBEndpoint::SkipPID(unsigned int, bool)+0x1c>
    e118:	e3a020d4 	mov	r2, #212	; 0xd4
    e11c:	e59f1030 	ldr	r1, [pc, #48]	; e154 <CUSBEndpoint::SkipPID(unsigned int, bool)+0xb4>
    e120:	e59f0034 	ldr	r0, [pc, #52]	; e15c <CUSBEndpoint::SkipPID(unsigned int, bool)+0xbc>
    e124:	eb00300a 	bl	1a154 <assertion_failed>
    e128:	eafffff2 	b	e0f8 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x58>
    e12c:	e3a020ce 	mov	r2, #206	; 0xce
    e130:	e8bd4070 	pop	{r4, r5, r6, lr}
    e134:	e59f1018 	ldr	r1, [pc, #24]	; e154 <CUSBEndpoint::SkipPID(unsigned int, bool)+0xb4>
    e138:	e59f0020 	ldr	r0, [pc, #32]	; e160 <CUSBEndpoint::SkipPID(unsigned int, bool)+0xc0>
    e13c:	ea003004 	b	1a154 <assertion_failed>
    e140:	e3160001 	tst	r6, #1
    e144:	08bd8070 	popeq	{r4, r5, r6, pc}
    e148:	e3a03002 	mov	r3, #2
    e14c:	e5c43010 	strb	r3, [r4, #16]
    e150:	e8bd8070 	pop	{r4, r5, r6, pc}
    e154:	00023c3c 	.word	0x00023c3c
    e158:	00023cf8 	.word	0x00023cf8
    e15c:	00023cd8 	.word	0x00023cd8
    e160:	000239a8 	.word	0x000239a8

0000e164 <CUSBEndpoint::ResetPID()>:
    e164:	e5d03005 	ldrb	r3, [r0, #5]
    e168:	e92d4010 	push	{r4, lr}
    e16c:	e3530001 	cmp	r3, #1
    e170:	e1a04000 	mov	r4, r0
    e174:	0a000003 	beq	e188 <CUSBEndpoint::ResetPID()+0x24>
    e178:	e3a020dc 	mov	r2, #220	; 0xdc
    e17c:	e59f1010 	ldr	r1, [pc, #16]	; e194 <CUSBEndpoint::ResetPID()+0x30>
    e180:	e59f0010 	ldr	r0, [pc, #16]	; e198 <CUSBEndpoint::ResetPID()+0x34>
    e184:	eb002ff2 	bl	1a154 <assertion_failed>
    e188:	e3a03001 	mov	r3, #1
    e18c:	e5c43010 	strb	r3, [r4, #16]
    e190:	e8bd8010 	pop	{r4, pc}
    e194:	00023c3c 	.word	0x00023c3c
    e198:	00023d58 	.word	0x00023d58

0000e19c <CUSBHostController::CUSBHostController()>:
    e19c:	e59f3004 	ldr	r3, [pc, #4]	; e1a8 <CUSBHostController::CUSBHostController()+0xc>
    e1a0:	e5803000 	str	r3, [r0]
    e1a4:	e12fff1e 	bx	lr
    e1a8:	00023d7c 	.word	0x00023d7c

0000e1ac <CUSBHostController::~CUSBHostController()>:
    e1ac:	e12fff1e 	bx	lr

0000e1b0 <CUSBHostController::~CUSBHostController()>:
    e1b0:	e92d4010 	push	{r4, lr}
    e1b4:	e1a04000 	mov	r4, r0
    e1b8:	e3a01004 	mov	r1, #4
    e1bc:	eb004d7c 	bl	217b4 <operator delete(void*, unsigned int)>
    e1c0:	e1a00004 	mov	r0, r4
    e1c4:	e8bd8010 	pop	{r4, pc}

0000e1c8 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>:
    e1c8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e1cc:	e1a06000 	mov	r6, r0
    e1d0:	e24dd034 	sub	sp, sp, #52	; 0x34
    e1d4:	e3a00008 	mov	r0, #8
    e1d8:	e1dd56b4 	ldrh	r5, [sp, #100]	; 0x64
    e1dc:	e1a0a002 	mov	sl, r2
    e1e0:	e1a09003 	mov	r9, r3
    e1e4:	e1dd85b8 	ldrh	r8, [sp, #88]	; 0x58
    e1e8:	e1dd75bc 	ldrh	r7, [sp, #92]	; 0x5c
    e1ec:	e1a0b001 	mov	fp, r1
    e1f0:	eb004d6b 	bl	217a4 <operator new(unsigned int)>
    e1f4:	e1a04000 	mov	r4, r0
    e1f8:	e58d0000 	str	r0, [sp]
    e1fc:	e1a02428 	lsr	r2, r8, #8
    e200:	e5c0a000 	strb	sl, [r0]
    e204:	e5c09001 	strb	r9, [r0, #1]
    e208:	e1a00427 	lsr	r0, r7, #8
    e20c:	e1a0c425 	lsr	ip, r5, #8
    e210:	e1a0100b 	mov	r1, fp
    e214:	e5c42003 	strb	r2, [r4, #3]
    e218:	e1a03005 	mov	r3, r5
    e21c:	e59d2060 	ldr	r2, [sp, #96]	; 0x60
    e220:	e5c40005 	strb	r0, [r4, #5]
    e224:	e28d0008 	add	r0, sp, #8
    e228:	e5c4c007 	strb	ip, [r4, #7]
    e22c:	e5c48002 	strb	r8, [r4, #2]
    e230:	e5c47004 	strb	r7, [r4, #4]
    e234:	e5c45006 	strb	r5, [r4, #6]
    e238:	eb000061 	bl	e3c4 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
    e23c:	e5963000 	ldr	r3, [r6]
    e240:	e1a00006 	mov	r0, r6
    e244:	e5933008 	ldr	r3, [r3, #8]
    e248:	e28d1008 	add	r1, sp, #8
    e24c:	e3a02000 	mov	r2, #0
    e250:	e12fff33 	blx	r3
    e254:	e3500000 	cmp	r0, #0
    e258:	0a00000a 	beq	e288 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)+0xc0>
    e25c:	e28d0008 	add	r0, sp, #8
    e260:	eb000093 	bl	e4b4 <CUSBRequest::GetResultLength() const>
    e264:	e1a05000 	mov	r5, r0
    e268:	e1a00004 	mov	r0, r4
    e26c:	e3a01008 	mov	r1, #8
    e270:	eb004d4f 	bl	217b4 <operator delete(void*, unsigned int)>
    e274:	e28d0008 	add	r0, sp, #8
    e278:	eb000076 	bl	e458 <CUSBRequest::~CUSBRequest()>
    e27c:	e1a00005 	mov	r0, r5
    e280:	e28dd034 	add	sp, sp, #52	; 0x34
    e284:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e288:	e3e05000 	mvn	r5, #0
    e28c:	eafffff5 	b	e268 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)+0xa0>

0000e290 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>:
    e290:	e92d4030 	push	{r4, r5, lr}
    e294:	e59d500c 	ldr	r5, [sp, #12]
    e298:	e5dd4014 	ldrb	r4, [sp, #20]
    e29c:	e1dde1b8 	ldrh	lr, [sp, #24]
    e2a0:	e1ddc1b0 	ldrh	ip, [sp, #16]
    e2a4:	e1833402 	orr	r3, r3, r2, lsl #8
    e2a8:	e58d300c 	str	r3, [sp, #12]
    e2ac:	e58d5014 	str	r5, [sp, #20]
    e2b0:	e1a02004 	mov	r2, r4
    e2b4:	e58de010 	str	lr, [sp, #16]
    e2b8:	e58dc018 	str	ip, [sp, #24]
    e2bc:	e3a03006 	mov	r3, #6
    e2c0:	e8bd4030 	pop	{r4, r5, lr}
    e2c4:	eaffffbf 	b	e1c8 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>

0000e2c8 <CUSBHostController::SetAddress(CUSBEndpoint*, unsigned char)>:
    e2c8:	e92d4010 	push	{r4, lr}
    e2cc:	e3a04000 	mov	r4, #0
    e2d0:	e24dd010 	sub	sp, sp, #16
    e2d4:	e58d2000 	str	r2, [sp]
    e2d8:	e58d400c 	str	r4, [sp, #12]
    e2dc:	e58d4008 	str	r4, [sp, #8]
    e2e0:	e58d4004 	str	r4, [sp, #4]
    e2e4:	e1a02004 	mov	r2, r4
    e2e8:	e3a03005 	mov	r3, #5
    e2ec:	ebffffb5 	bl	e1c8 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    e2f0:	e1500004 	cmp	r0, r4
    e2f4:	b1a00004 	movlt	r0, r4
    e2f8:	ba000003 	blt	e30c <CUSBHostController::SetAddress(CUSBEndpoint*, unsigned char)+0x44>
    e2fc:	eb0048ab 	bl	205b0 <CTimer::Get()>
    e300:	e3a00032 	mov	r0, #50	; 0x32
    e304:	eb004870 	bl	204cc <CTimer::SimpleMsDelay(unsigned int)>
    e308:	e3a00001 	mov	r0, #1
    e30c:	e28dd010 	add	sp, sp, #16
    e310:	e8bd8010 	pop	{r4, pc}

0000e314 <CUSBHostController::SetConfiguration(CUSBEndpoint*, unsigned char)>:
    e314:	e92d4010 	push	{r4, lr}
    e318:	e3a04000 	mov	r4, #0
    e31c:	e24dd010 	sub	sp, sp, #16
    e320:	e58d2000 	str	r2, [sp]
    e324:	e58d400c 	str	r4, [sp, #12]
    e328:	e58d4008 	str	r4, [sp, #8]
    e32c:	e58d4004 	str	r4, [sp, #4]
    e330:	e1a02004 	mov	r2, r4
    e334:	e3a03009 	mov	r3, #9
    e338:	ebffffa2 	bl	e1c8 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    e33c:	e1500004 	cmp	r0, r4
    e340:	b1a00004 	movlt	r0, r4
    e344:	ba000003 	blt	e358 <CUSBHostController::SetConfiguration(CUSBEndpoint*, unsigned char)+0x44>
    e348:	eb004898 	bl	205b0 <CTimer::Get()>
    e34c:	e3a00032 	mov	r0, #50	; 0x32
    e350:	eb00485d 	bl	204cc <CTimer::SimpleMsDelay(unsigned int)>
    e354:	e3a00001 	mov	r0, #1
    e358:	e28dd010 	add	sp, sp, #16
    e35c:	e8bd8010 	pop	{r4, pc}

0000e360 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>:
    e360:	e3a0c000 	mov	ip, #0
    e364:	e92d4010 	push	{r4, lr}
    e368:	e1a04000 	mov	r4, r0
    e36c:	e24dd030 	sub	sp, sp, #48	; 0x30
    e370:	e58dc000 	str	ip, [sp]
    e374:	e28d0008 	add	r0, sp, #8
    e378:	eb000011 	bl	e3c4 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
    e37c:	e5943000 	ldr	r3, [r4]
    e380:	e1a00004 	mov	r0, r4
    e384:	e5933008 	ldr	r3, [r3, #8]
    e388:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
    e38c:	e28d1008 	add	r1, sp, #8
    e390:	e12fff33 	blx	r3
    e394:	e3500000 	cmp	r0, #0
    e398:	0a000007 	beq	e3bc <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)+0x5c>
    e39c:	e28d0008 	add	r0, sp, #8
    e3a0:	eb000043 	bl	e4b4 <CUSBRequest::GetResultLength() const>
    e3a4:	e1a04000 	mov	r4, r0
    e3a8:	e28d0008 	add	r0, sp, #8
    e3ac:	eb000029 	bl	e458 <CUSBRequest::~CUSBRequest()>
    e3b0:	e1a00004 	mov	r0, r4
    e3b4:	e28dd030 	add	sp, sp, #48	; 0x30
    e3b8:	e8bd8010 	pop	{r4, pc}
    e3bc:	e3e04000 	mvn	r4, #0
    e3c0:	eafffff8 	b	e3a8 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)+0x48>

0000e3c4 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>:
    e3c4:	e92d4010 	push	{r4, lr}
    e3c8:	e1a04000 	mov	r4, r0
    e3cc:	e3a00000 	mov	r0, #0
    e3d0:	e59dc008 	ldr	ip, [sp, #8]
    e3d4:	e1510000 	cmp	r1, r0
    e3d8:	e5841000 	str	r1, [r4]
    e3dc:	e584300c 	str	r3, [r4, #12]
    e3e0:	e5842008 	str	r2, [r4, #8]
    e3e4:	e584c004 	str	ip, [r4, #4]
    e3e8:	e5840010 	str	r0, [r4, #16]
    e3ec:	e5840014 	str	r0, [r4, #20]
    e3f0:	e5840018 	str	r0, [r4, #24]
    e3f4:	e584001c 	str	r0, [r4, #28]
    e3f8:	e5840020 	str	r0, [r4, #32]
    e3fc:	e5c40024 	strb	r0, [r4, #36]	; 0x24
    e400:	0a00000b 	beq	e434 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x70>
    e404:	e3520000 	cmp	r2, #0
    e408:	0a000001 	beq	e414 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x50>
    e40c:	e1a00004 	mov	r0, r4
    e410:	e8bd8010 	pop	{r4, pc}
    e414:	e594300c 	ldr	r3, [r4, #12]
    e418:	e3530000 	cmp	r3, #0
    e41c:	0afffffa 	beq	e40c <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x48>
    e420:	e3a02024 	mov	r2, #36	; 0x24
    e424:	e59f1020 	ldr	r1, [pc, #32]	; e44c <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x88>
    e428:	e59f0020 	ldr	r0, [pc, #32]	; e450 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x8c>
    e42c:	eb002f48 	bl	1a154 <assertion_failed>
    e430:	eafffff5 	b	e40c <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x48>
    e434:	e3a02023 	mov	r2, #35	; 0x23
    e438:	e59f100c 	ldr	r1, [pc, #12]	; e44c <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x88>
    e43c:	e59f0010 	ldr	r0, [pc, #16]	; e454 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x90>
    e440:	eb002f43 	bl	1a154 <assertion_failed>
    e444:	e5942008 	ldr	r2, [r4, #8]
    e448:	eaffffed 	b	e404 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x40>
    e44c:	00023d8c 	.word	0x00023d8c
    e450:	00023d9c 	.word	0x00023d9c
    e454:	00023774 	.word	0x00023774

0000e458 <CUSBRequest::~CUSBRequest()>:
    e458:	e12fff1e 	bx	lr

0000e45c <CUSBRequest::GetEndpoint() const>:
    e45c:	e5903000 	ldr	r3, [r0]
    e460:	e3530000 	cmp	r3, #0
    e464:	0a000001 	beq	e470 <CUSBRequest::GetEndpoint() const+0x14>
    e468:	e1a00003 	mov	r0, r3
    e46c:	e12fff1e 	bx	lr
    e470:	e92d4010 	push	{r4, lr}
    e474:	e1a04000 	mov	r4, r0
    e478:	e3a02031 	mov	r2, #49	; 0x31
    e47c:	e59f1010 	ldr	r1, [pc, #16]	; e494 <CUSBRequest::GetEndpoint() const+0x38>
    e480:	e59f0010 	ldr	r0, [pc, #16]	; e498 <CUSBRequest::GetEndpoint() const+0x3c>
    e484:	eb002f32 	bl	1a154 <assertion_failed>
    e488:	e5943000 	ldr	r3, [r4]
    e48c:	e1a00003 	mov	r0, r3
    e490:	e8bd8010 	pop	{r4, pc}
    e494:	00023d8c 	.word	0x00023d8c
    e498:	00023774 	.word	0x00023774

0000e49c <CUSBRequest::SetStatus(int)>:
    e49c:	e5801010 	str	r1, [r0, #16]
    e4a0:	e12fff1e 	bx	lr

0000e4a4 <CUSBRequest::SetResultLen(unsigned int)>:
    e4a4:	e5801014 	str	r1, [r0, #20]
    e4a8:	e12fff1e 	bx	lr

0000e4ac <CUSBRequest::GetStatus() const>:
    e4ac:	e5900010 	ldr	r0, [r0, #16]
    e4b0:	e12fff1e 	bx	lr

0000e4b4 <CUSBRequest::GetResultLength() const>:
    e4b4:	e5903010 	ldr	r3, [r0, #16]
    e4b8:	e92d4010 	push	{r4, lr}
    e4bc:	e3530000 	cmp	r3, #0
    e4c0:	e1a04000 	mov	r4, r0
    e4c4:	1a000003 	bne	e4d8 <CUSBRequest::GetResultLength() const+0x24>
    e4c8:	e3a02046 	mov	r2, #70	; 0x46
    e4cc:	e59f100c 	ldr	r1, [pc, #12]	; e4e0 <CUSBRequest::GetResultLength() const+0x2c>
    e4d0:	e59f000c 	ldr	r0, [pc, #12]	; e4e4 <CUSBRequest::GetResultLength() const+0x30>
    e4d4:	eb002f1e 	bl	1a154 <assertion_failed>
    e4d8:	e5940014 	ldr	r0, [r4, #20]
    e4dc:	e8bd8010 	pop	{r4, pc}
    e4e0:	00023d8c 	.word	0x00023d8c
    e4e4:	00023dc0 	.word	0x00023dc0

0000e4e8 <CUSBRequest::GetSetupData()>:
    e4e8:	e92d4010 	push	{r4, lr}
    e4ec:	e1a04000 	mov	r4, r0
    e4f0:	e5900000 	ldr	r0, [r0]
    e4f4:	ebfffec2 	bl	e004 <CUSBEndpoint::GetType() const>
    e4f8:	e3500000 	cmp	r0, #0
    e4fc:	1a000008 	bne	e524 <CUSBRequest::GetSetupData()+0x3c>
    e500:	e5940004 	ldr	r0, [r4, #4]
    e504:	e3500000 	cmp	r0, #0
    e508:	18bd8010 	popne	{r4, pc}
    e50c:	e3a0204e 	mov	r2, #78	; 0x4e
    e510:	e59f1020 	ldr	r1, [pc, #32]	; e538 <CUSBRequest::GetSetupData()+0x50>
    e514:	e59f0020 	ldr	r0, [pc, #32]	; e53c <CUSBRequest::GetSetupData()+0x54>
    e518:	eb002f0d 	bl	1a154 <assertion_failed>
    e51c:	e5940004 	ldr	r0, [r4, #4]
    e520:	e8bd8010 	pop	{r4, pc}
    e524:	e3a0204d 	mov	r2, #77	; 0x4d
    e528:	e59f1008 	ldr	r1, [pc, #8]	; e538 <CUSBRequest::GetSetupData()+0x50>
    e52c:	e59f000c 	ldr	r0, [pc, #12]	; e540 <CUSBRequest::GetSetupData()+0x58>
    e530:	eb002f07 	bl	1a154 <assertion_failed>
    e534:	eafffff1 	b	e500 <CUSBRequest::GetSetupData()+0x18>
    e538:	00023d8c 	.word	0x00023d8c
    e53c:	00023dfc 	.word	0x00023dfc
    e540:	00023dcc 	.word	0x00023dcc

0000e544 <CUSBRequest::GetBuffer()>:
    e544:	e5903008 	ldr	r3, [r0, #8]
    e548:	e3530000 	cmp	r3, #0
    e54c:	0a000001 	beq	e558 <CUSBRequest::GetBuffer()+0x14>
    e550:	e1a00003 	mov	r0, r3
    e554:	e12fff1e 	bx	lr
    e558:	e590200c 	ldr	r2, [r0, #12]
    e55c:	e3520000 	cmp	r2, #0
    e560:	0afffffa 	beq	e550 <CUSBRequest::GetBuffer()+0xc>
    e564:	e92d4010 	push	{r4, lr}
    e568:	e1a04000 	mov	r4, r0
    e56c:	e3a02056 	mov	r2, #86	; 0x56
    e570:	e59f1010 	ldr	r1, [pc, #16]	; e588 <CUSBRequest::GetBuffer()+0x44>
    e574:	e59f0010 	ldr	r0, [pc, #16]	; e58c <CUSBRequest::GetBuffer()+0x48>
    e578:	eb002ef5 	bl	1a154 <assertion_failed>
    e57c:	e5943008 	ldr	r3, [r4, #8]
    e580:	e1a00003 	mov	r0, r3
    e584:	e8bd8010 	pop	{r4, pc}
    e588:	00023d8c 	.word	0x00023d8c
    e58c:	00023d9c 	.word	0x00023d9c

0000e590 <CUSBRequest::GetBufLen() const>:
    e590:	e590000c 	ldr	r0, [r0, #12]
    e594:	e12fff1e 	bx	lr

0000e598 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>:
    e598:	e3510000 	cmp	r1, #0
    e59c:	e5801018 	str	r1, [r0, #24]
    e5a0:	e580201c 	str	r2, [r0, #28]
    e5a4:	e5803020 	str	r3, [r0, #32]
    e5a8:	112fff1e 	bxne	lr
    e5ac:	e3a02066 	mov	r2, #102	; 0x66
    e5b0:	e59f1004 	ldr	r1, [pc, #4]	; e5bc <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)+0x24>
    e5b4:	e59f0004 	ldr	r0, [pc, #4]	; e5c0 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)+0x28>
    e5b8:	ea002ee5 	b	1a154 <assertion_failed>
    e5bc:	00023d8c 	.word	0x00023d8c
    e5c0:	00023e10 	.word	0x00023e10

0000e5c4 <CUSBRequest::CallCompletionRoutine()>:
    e5c4:	e5903018 	ldr	r3, [r0, #24]
    e5c8:	e92d4010 	push	{r4, lr}
    e5cc:	e3530000 	cmp	r3, #0
    e5d0:	e1a04000 	mov	r4, r0
    e5d4:	0a000004 	beq	e5ec <CUSBRequest::CallCompletionRoutine()+0x28>
    e5d8:	e5942020 	ldr	r2, [r4, #32]
    e5dc:	e594101c 	ldr	r1, [r4, #28]
    e5e0:	e1a00004 	mov	r0, r4
    e5e4:	e8bd4010 	pop	{r4, lr}
    e5e8:	e12fff13 	bx	r3
    e5ec:	e3a0206b 	mov	r2, #107	; 0x6b
    e5f0:	e59f100c 	ldr	r1, [pc, #12]	; e604 <CUSBRequest::CallCompletionRoutine()+0x40>
    e5f4:	e59f000c 	ldr	r0, [pc, #12]	; e608 <CUSBRequest::CallCompletionRoutine()+0x44>
    e5f8:	eb002ed5 	bl	1a154 <assertion_failed>
    e5fc:	e5943018 	ldr	r3, [r4, #24]
    e600:	eafffff4 	b	e5d8 <CUSBRequest::CallCompletionRoutine()+0x14>
    e604:	00023d8c 	.word	0x00023d8c
    e608:	00023e10 	.word	0x00023e10

0000e60c <CUSBRequest::SetCompleteOnNAK()>:
    e60c:	e3a03001 	mov	r3, #1
    e610:	e5c03024 	strb	r3, [r0, #36]	; 0x24
    e614:	e12fff1e 	bx	lr

0000e618 <CUSBRequest::IsCompleteOnNAK() const>:
    e618:	e5d00024 	ldrb	r0, [r0, #36]	; 0x24
    e61c:	e12fff1e 	bx	lr

0000e620 <CUSBRequest::operator new(unsigned int)>:
    e620:	e3500028 	cmp	r0, #40	; 0x28
    e624:	e92d4010 	push	{r4, lr}
    e628:	0a000003 	beq	e63c <CUSBRequest::operator new(unsigned int)+0x1c>
    e62c:	e3a0207a 	mov	r2, #122	; 0x7a
    e630:	e59f1038 	ldr	r1, [pc, #56]	; e670 <CUSBRequest::operator new(unsigned int)+0x50>
    e634:	e59f0038 	ldr	r0, [pc, #56]	; e674 <CUSBRequest::operator new(unsigned int)+0x54>
    e638:	eb002ec5 	bl	1a154 <assertion_failed>
    e63c:	e59f4034 	ldr	r4, [pc, #52]	; e678 <CUSBRequest::operator new(unsigned int)+0x58>
    e640:	e5940000 	ldr	r0, [r4]
    e644:	e3500000 	cmp	r0, #0
    e648:	0a000001 	beq	e654 <CUSBRequest::operator new(unsigned int)+0x34>
    e64c:	e8bd4010 	pop	{r4, lr}
    e650:	ea002fdd 	b	1a5cc <CClassAllocator::Allocate()>
    e654:	e59f0020 	ldr	r0, [pc, #32]	; e67c <CUSBRequest::operator new(unsigned int)+0x5c>
    e658:	e3a0207a 	mov	r2, #122	; 0x7a
    e65c:	e59f100c 	ldr	r1, [pc, #12]	; e670 <CUSBRequest::operator new(unsigned int)+0x50>
    e660:	eb002ebb 	bl	1a154 <assertion_failed>
    e664:	e5940000 	ldr	r0, [r4]
    e668:	e8bd4010 	pop	{r4, lr}
    e66c:	ea002fd6 	b	1a5cc <CClassAllocator::Allocate()>
    e670:	00023d8c 	.word	0x00023d8c
    e674:	00023e2c 	.word	0x00023e2c
    e678:	000299a0 	.word	0x000299a0
    e67c:	00023888 	.word	0x00023888

0000e680 <CUSBRequest::operator delete(void*, unsigned int)>:
    e680:	e3510028 	cmp	r1, #40	; 0x28
    e684:	e92d4070 	push	{r4, r5, r6, lr}
    e688:	e1a05000 	mov	r5, r0
    e68c:	0a000003 	beq	e6a0 <CUSBRequest::operator delete(void*, unsigned int)+0x20>
    e690:	e3a0207a 	mov	r2, #122	; 0x7a
    e694:	e59f1040 	ldr	r1, [pc, #64]	; e6dc <CUSBRequest::operator delete(void*, unsigned int)+0x5c>
    e698:	e59f0040 	ldr	r0, [pc, #64]	; e6e0 <CUSBRequest::operator delete(void*, unsigned int)+0x60>
    e69c:	eb002eac 	bl	1a154 <assertion_failed>
    e6a0:	e59f403c 	ldr	r4, [pc, #60]	; e6e4 <CUSBRequest::operator delete(void*, unsigned int)+0x64>
    e6a4:	e5940000 	ldr	r0, [r4]
    e6a8:	e3500000 	cmp	r0, #0
    e6ac:	0a000002 	beq	e6bc <CUSBRequest::operator delete(void*, unsigned int)+0x3c>
    e6b0:	e1a01005 	mov	r1, r5
    e6b4:	e8bd4070 	pop	{r4, r5, r6, lr}
    e6b8:	ea002ffe 	b	1a6b8 <CClassAllocator::Free(void*)>
    e6bc:	e59f1018 	ldr	r1, [pc, #24]	; e6dc <CUSBRequest::operator delete(void*, unsigned int)+0x5c>
    e6c0:	e59f0020 	ldr	r0, [pc, #32]	; e6e8 <CUSBRequest::operator delete(void*, unsigned int)+0x68>
    e6c4:	e3a0207a 	mov	r2, #122	; 0x7a
    e6c8:	eb002ea1 	bl	1a154 <assertion_failed>
    e6cc:	e5940000 	ldr	r0, [r4]
    e6d0:	e1a01005 	mov	r1, r5
    e6d4:	e8bd4070 	pop	{r4, r5, r6, lr}
    e6d8:	ea002ff6 	b	1a6b8 <CClassAllocator::Free(void*)>
    e6dc:	00023d8c 	.word	0x00023d8c
    e6e0:	00023e2c 	.word	0x00023e2c
    e6e4:	000299a0 	.word	0x000299a0
    e6e8:	00023888 	.word	0x00023888

0000e6ec <CUSBRequest::InitAllocator(unsigned int)>:
    e6ec:	e92d4070 	push	{r4, r5, r6, lr}
    e6f0:	e59f4040 	ldr	r4, [pc, #64]	; e738 <CUSBRequest::InitAllocator(unsigned int)+0x4c>
    e6f4:	e1a06000 	mov	r6, r0
    e6f8:	e5943000 	ldr	r3, [r4]
    e6fc:	e3530000 	cmp	r3, #0
    e700:	0a000003 	beq	e714 <CUSBRequest::InitAllocator(unsigned int)+0x28>
    e704:	e3a0207a 	mov	r2, #122	; 0x7a
    e708:	e59f102c 	ldr	r1, [pc, #44]	; e73c <CUSBRequest::InitAllocator(unsigned int)+0x50>
    e70c:	e59f002c 	ldr	r0, [pc, #44]	; e740 <CUSBRequest::InitAllocator(unsigned int)+0x54>
    e710:	eb002e8f 	bl	1a154 <assertion_failed>
    e714:	e3a0001c 	mov	r0, #28
    e718:	eb004c21 	bl	217a4 <operator new(unsigned int)>
    e71c:	e1a05000 	mov	r5, r0
    e720:	e1a02006 	mov	r2, r6
    e724:	e59f3018 	ldr	r3, [pc, #24]	; e744 <CUSBRequest::InitAllocator(unsigned int)+0x58>
    e728:	e3a01028 	mov	r1, #40	; 0x28
    e72c:	eb002f8d 	bl	1a568 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
    e730:	e5845000 	str	r5, [r4]
    e734:	e8bd8070 	pop	{r4, r5, r6, pc}
    e738:	000299a0 	.word	0x000299a0
    e73c:	00023d8c 	.word	0x00023d8c
    e740:	0002389c 	.word	0x0002389c
    e744:	00023e4c 	.word	0x00023e4c

0000e748 <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)>:
    e748:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    e74c:	e59f4054 	ldr	r4, [pc, #84]	; e7a8 <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)+0x60>
    e750:	e24dd00c 	sub	sp, sp, #12
    e754:	e5943000 	ldr	r3, [r4]
    e758:	e1a06000 	mov	r6, r0
    e75c:	e3530000 	cmp	r3, #0
    e760:	e1a07001 	mov	r7, r1
    e764:	0a000003 	beq	e778 <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)+0x30>
    e768:	e3a0207a 	mov	r2, #122	; 0x7a
    e76c:	e59f1038 	ldr	r1, [pc, #56]	; e7ac <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)+0x64>
    e770:	e59f0038 	ldr	r0, [pc, #56]	; e7b0 <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)+0x68>
    e774:	eb002e76 	bl	1a154 <assertion_failed>
    e778:	e3a0001c 	mov	r0, #28
    e77c:	eb004c08 	bl	217a4 <operator new(unsigned int)>
    e780:	e59f102c 	ldr	r1, [pc, #44]	; e7b4 <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)+0x6c>
    e784:	e1a03007 	mov	r3, r7
    e788:	e58d1000 	str	r1, [sp]
    e78c:	e1a02006 	mov	r2, r6
    e790:	e3a01028 	mov	r1, #40	; 0x28
    e794:	e1a05000 	mov	r5, r0
    e798:	eb002f7e 	bl	1a598 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
    e79c:	e5845000 	str	r5, [r4]
    e7a0:	e28dd00c 	add	sp, sp, #12
    e7a4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    e7a8:	000299a0 	.word	0x000299a0
    e7ac:	00023d8c 	.word	0x00023d8c
    e7b0:	0002389c 	.word	0x0002389c
    e7b4:	00023e4c 	.word	0x00023e4c

0000e7b8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>:
    e7b8:	e92d4070 	push	{r4, r5, r6, lr}
    e7bc:	e2506000 	subs	r6, r0, #0
    e7c0:	e1a04001 	mov	r4, r1
    e7c4:	0a000043 	beq	e8d8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x120>
    e7c8:	e3540000 	cmp	r4, #0
    e7cc:	0a000046 	beq	e8ec <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x134>
    e7d0:	e59f13e0 	ldr	r1, [pc, #992]	; ebb8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x400>
    e7d4:	e1a00004 	mov	r0, r4
    e7d8:	eb004046 	bl	1e8f8 <CString::Compare(char const*) const>
    e7dc:	e3500000 	cmp	r0, #0
    e7e0:	1a000016 	bne	e840 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x88>
    e7e4:	e3a00058 	mov	r0, #88	; 0x58
    e7e8:	eb004bed 	bl	217a4 <operator new(unsigned int)>
    e7ec:	e1a01006 	mov	r1, r6
    e7f0:	e1a05000 	mov	r5, r0
    e7f4:	eb00013a 	bl	ece4 <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)>
    e7f8:	e1a00005 	mov	r0, r5
    e7fc:	eb001741 	bl	14508 <CUSBFunction::GetDevice() const>
    e800:	e1a06000 	mov	r6, r0
    e804:	e1a00004 	mov	r0, r4
    e808:	eb003fe7 	bl	1e7ac <CString::operator char const*() const>
    e80c:	e59f23a8 	ldr	r2, [pc, #936]	; ebbc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x404>
    e810:	e1a03000 	mov	r3, r0
    e814:	e3a01003 	mov	r1, #3
    e818:	e1a00006 	mov	r0, r6
    e81c:	ebfffafe 	bl	d41c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    e820:	e3540000 	cmp	r4, #0
    e824:	0a000003 	beq	e838 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x80>
    e828:	e5943000 	ldr	r3, [r4]
    e82c:	e1a00004 	mov	r0, r4
    e830:	e5933004 	ldr	r3, [r3, #4]
    e834:	e12fff33 	blx	r3
    e838:	e1a00005 	mov	r0, r5
    e83c:	e8bd8070 	pop	{r4, r5, r6, pc}
    e840:	e59f1378 	ldr	r1, [pc, #888]	; ebc0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x408>
    e844:	e1a00004 	mov	r0, r4
    e848:	eb00402a 	bl	1e8f8 <CString::Compare(char const*) const>
    e84c:	e3500000 	cmp	r0, #0
    e850:	0affffe3 	beq	e7e4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x2c>
    e854:	e59f1368 	ldr	r1, [pc, #872]	; ebc4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40c>
    e858:	e1a00004 	mov	r0, r4
    e85c:	eb004025 	bl	1e8f8 <CString::Compare(char const*) const>
    e860:	e3500000 	cmp	r0, #0
    e864:	1a000005 	bne	e880 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0xc8>
    e868:	e3a00030 	mov	r0, #48	; 0x30
    e86c:	eb004bcc 	bl	217a4 <operator new(unsigned int)>
    e870:	e1a01006 	mov	r1, r6
    e874:	e1a05000 	mov	r5, r0
    e878:	eb0003cd 	bl	f7b4 <CUSBBulkOnlyMassStorageDevice::CUSBBulkOnlyMassStorageDevice(CUSBFunction*)>
    e87c:	eaffffdd 	b	e7f8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    e880:	e59f1340 	ldr	r1, [pc, #832]	; ebc8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x410>
    e884:	e1a00004 	mov	r0, r4
    e888:	eb00401a 	bl	1e8f8 <CString::Compare(char const*) const>
    e88c:	e3500000 	cmp	r0, #0
    e890:	0a00000a 	beq	e8c0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x108>
    e894:	e59f1330 	ldr	r1, [pc, #816]	; ebcc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x414>
    e898:	e1a00004 	mov	r0, r4
    e89c:	eb004015 	bl	1e8f8 <CString::Compare(char const*) const>
    e8a0:	e3500000 	cmp	r0, #0
    e8a4:	1a000015 	bne	e900 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x148>
    e8a8:	e3a00030 	mov	r0, #48	; 0x30
    e8ac:	eb004bbc 	bl	217a4 <operator new(unsigned int)>
    e8b0:	e1a01006 	mov	r1, r6
    e8b4:	e1a05000 	mov	r5, r0
    e8b8:	eb000d08 	bl	11ce0 <CUSBMouseDevice::CUSBMouseDevice(CUSBFunction*)>
    e8bc:	eaffffcd 	b	e7f8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    e8c0:	e3a00e45 	mov	r0, #1104	; 0x450
    e8c4:	eb004bb6 	bl	217a4 <operator new(unsigned int)>
    e8c8:	e1a01006 	mov	r1, r6
    e8cc:	e1a05000 	mov	r5, r0
    e8d0:	eb000947 	bl	10df4 <CUSBKeyboardDevice::CUSBKeyboardDevice(CUSBFunction*)>
    e8d4:	eaffffc7 	b	e7f8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    e8d8:	e3a0202b 	mov	r2, #43	; 0x2b
    e8dc:	e59f12ec 	ldr	r1, [pc, #748]	; ebd0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x418>
    e8e0:	e59f02ec 	ldr	r0, [pc, #748]	; ebd4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x41c>
    e8e4:	eb002e1a 	bl	1a154 <assertion_failed>
    e8e8:	eaffffb6 	b	e7c8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x10>
    e8ec:	e3a0202c 	mov	r2, #44	; 0x2c
    e8f0:	e59f12d8 	ldr	r1, [pc, #728]	; ebd0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x418>
    e8f4:	e59f02dc 	ldr	r0, [pc, #732]	; ebd8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x420>
    e8f8:	eb002e15 	bl	1a154 <assertion_failed>
    e8fc:	eaffffb3 	b	e7d0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x18>
    e900:	e59f12d4 	ldr	r1, [pc, #724]	; ebdc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x424>
    e904:	e1a00004 	mov	r0, r4
    e908:	eb003ffa 	bl	1e8f8 <CString::Compare(char const*) const>
    e90c:	e3500000 	cmp	r0, #0
    e910:	0a00000a 	beq	e940 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x188>
    e914:	e59f12c4 	ldr	r1, [pc, #708]	; ebe0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x428>
    e918:	e1a00004 	mov	r0, r4
    e91c:	eb003ff5 	bl	1e8f8 <CString::Compare(char const*) const>
    e920:	e3500000 	cmp	r0, #0
    e924:	1a00000c 	bne	e95c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x1a4>
    e928:	e3a00f5b 	mov	r0, #364	; 0x16c
    e92c:	eb004b9c 	bl	217a4 <operator new(unsigned int)>
    e930:	e1a01006 	mov	r1, r6
    e934:	e1a05000 	mov	r5, r0
    e938:	eb000f77 	bl	1271c <CUSBGamePadPS3Device::CUSBGamePadPS3Device(CUSBFunction*)>
    e93c:	eaffffad 	b	e7f8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    e940:	e3a00f4f 	mov	r0, #316	; 0x13c
    e944:	eb004b96 	bl	217a4 <operator new(unsigned int)>
    e948:	e1a01006 	mov	r1, r6
    e94c:	e3a02001 	mov	r2, #1
    e950:	e1a05000 	mov	r5, r0
    e954:	eb000d04 	bl	11d6c <CUSBGamePadStandardDevice::CUSBGamePadStandardDevice(CUSBFunction*, bool)>
    e958:	eaffffa6 	b	e7f8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    e95c:	e59f1280 	ldr	r1, [pc, #640]	; ebe4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x42c>
    e960:	e1a00004 	mov	r0, r4
    e964:	eb003fe3 	bl	1e8f8 <CString::Compare(char const*) const>
    e968:	e3500000 	cmp	r0, #0
    e96c:	1a000005 	bne	e988 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x1d0>
    e970:	e3a00f53 	mov	r0, #332	; 0x14c
    e974:	eb004b8a 	bl	217a4 <operator new(unsigned int)>
    e978:	e1a01006 	mov	r1, r6
    e97c:	e1a05000 	mov	r5, r0
    e980:	eb0010ca 	bl	12cb0 <CUSBGamePadPS4Device::CUSBGamePadPS4Device(CUSBFunction*)>
    e984:	eaffff9b 	b	e7f8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    e988:	e59f1258 	ldr	r1, [pc, #600]	; ebe8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x430>
    e98c:	e1a00004 	mov	r0, r4
    e990:	eb003fd8 	bl	1e8f8 <CString::Compare(char const*) const>
    e994:	e3500000 	cmp	r0, #0
    e998:	0afffff4 	beq	e970 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x1b8>
    e99c:	e59f1248 	ldr	r1, [pc, #584]	; ebec <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x434>
    e9a0:	e1a00004 	mov	r0, r4
    e9a4:	eb003fd3 	bl	1e8f8 <CString::Compare(char const*) const>
    e9a8:	e3500000 	cmp	r0, #0
    e9ac:	1a000005 	bne	e9c8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x210>
    e9b0:	e3a00e13 	mov	r0, #304	; 0x130
    e9b4:	eb004b7a 	bl	217a4 <operator new(unsigned int)>
    e9b8:	e1a01006 	mov	r1, r6
    e9bc:	e1a05000 	mov	r5, r0
    e9c0:	eb00130c 	bl	135f8 <CUSBGamePadXbox360Device::CUSBGamePadXbox360Device(CUSBFunction*)>
    e9c4:	eaffff8b 	b	e7f8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    e9c8:	e59f1220 	ldr	r1, [pc, #544]	; ebf0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x438>
    e9cc:	e1a00004 	mov	r0, r4
    e9d0:	eb003fc8 	bl	1e8f8 <CString::Compare(char const*) const>
    e9d4:	e3500000 	cmp	r0, #0
    e9d8:	0afffff4 	beq	e9b0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x1f8>
    e9dc:	e59f1210 	ldr	r1, [pc, #528]	; ebf4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x43c>
    e9e0:	e1a00004 	mov	r0, r4
    e9e4:	eb003fc3 	bl	1e8f8 <CString::Compare(char const*) const>
    e9e8:	e3500000 	cmp	r0, #0
    e9ec:	1a000005 	bne	ea08 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x250>
    e9f0:	e3a00f4d 	mov	r0, #308	; 0x134
    e9f4:	eb004b6a 	bl	217a4 <operator new(unsigned int)>
    e9f8:	e1a01006 	mov	r1, r6
    e9fc:	e1a05000 	mov	r5, r0
    ea00:	eb001417 	bl	13a64 <CUSBGamePadXboxOneDevice::CUSBGamePadXboxOneDevice(CUSBFunction*)>
    ea04:	eaffff7b 	b	e7f8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    ea08:	e59f11e8 	ldr	r1, [pc, #488]	; ebf8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x440>
    ea0c:	e1a00004 	mov	r0, r4
    ea10:	eb003fb8 	bl	1e8f8 <CString::Compare(char const*) const>
    ea14:	e3500000 	cmp	r0, #0
    ea18:	0afffff4 	beq	e9f0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x238>
    ea1c:	e59f11d8 	ldr	r1, [pc, #472]	; ebfc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x444>
    ea20:	e1a00004 	mov	r0, r4
    ea24:	eb003fb3 	bl	1e8f8 <CString::Compare(char const*) const>
    ea28:	e3500000 	cmp	r0, #0
    ea2c:	0affffef 	beq	e9f0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x238>
    ea30:	e59f11c8 	ldr	r1, [pc, #456]	; ec00 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x448>
    ea34:	e1a00004 	mov	r0, r4
    ea38:	eb003fae 	bl	1e8f8 <CString::Compare(char const*) const>
    ea3c:	e3500000 	cmp	r0, #0
    ea40:	0affffea 	beq	e9f0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x238>
    ea44:	e59f11b8 	ldr	r1, [pc, #440]	; ec04 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x44c>
    ea48:	e1a00004 	mov	r0, r4
    ea4c:	eb003fa9 	bl	1e8f8 <CString::Compare(char const*) const>
    ea50:	e3500000 	cmp	r0, #0
    ea54:	1a000005 	bne	ea70 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x2b8>
    ea58:	e3a00f4d 	mov	r0, #308	; 0x134
    ea5c:	eb004b50 	bl	217a4 <operator new(unsigned int)>
    ea60:	e1a01006 	mov	r1, r6
    ea64:	e1a05000 	mov	r5, r0
    ea68:	eb001526 	bl	13f08 <CUSBGamePadSwitchProDevice::CUSBGamePadSwitchProDevice(CUSBFunction*)>
    ea6c:	eaffff61 	b	e7f8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    ea70:	e59f1190 	ldr	r1, [pc, #400]	; ec08 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x450>
    ea74:	e1a00004 	mov	r0, r4
    ea78:	eb003f9e 	bl	1e8f8 <CString::Compare(char const*) const>
    ea7c:	e3500000 	cmp	r0, #0
    ea80:	1a000005 	bne	ea9c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x2e4>
    ea84:	e3a0001c 	mov	r0, #28
    ea88:	eb004b45 	bl	217a4 <operator new(unsigned int)>
    ea8c:	e1a01006 	mov	r1, r6
    ea90:	e1a05000 	mov	r5, r0
    ea94:	eb00189d 	bl	14d10 <CUSBPrinterDevice::CUSBPrinterDevice(CUSBFunction*)>
    ea98:	eaffff56 	b	e7f8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    ea9c:	e59f1168 	ldr	r1, [pc, #360]	; ec0c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x454>
    eaa0:	e1a00004 	mov	r0, r4
    eaa4:	eb003f93 	bl	1e8f8 <CString::Compare(char const*) const>
    eaa8:	e3500000 	cmp	r0, #0
    eaac:	0afffff4 	beq	ea84 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x2cc>
    eab0:	e59f1158 	ldr	r1, [pc, #344]	; ec10 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x458>
    eab4:	e1a00004 	mov	r0, r4
    eab8:	eb003f8e 	bl	1e8f8 <CString::Compare(char const*) const>
    eabc:	e3500000 	cmp	r0, #0
    eac0:	1a000005 	bne	eadc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x324>
    eac4:	e3a00020 	mov	r0, #32
    eac8:	eb004b35 	bl	217a4 <operator new(unsigned int)>
    eacc:	e1a01006 	mov	r1, r6
    ead0:	e1a05000 	mov	r5, r0
    ead4:	eb002109 	bl	16f00 <CSMSC951xDevice::CSMSC951xDevice(CUSBFunction*)>
    ead8:	eaffff46 	b	e7f8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    eadc:	e59f1130 	ldr	r1, [pc, #304]	; ec14 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x45c>
    eae0:	e1a00004 	mov	r0, r4
    eae4:	eb003f83 	bl	1e8f8 <CString::Compare(char const*) const>
    eae8:	e3500000 	cmp	r0, #0
    eaec:	1a000005 	bne	eb08 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x350>
    eaf0:	e3a00020 	mov	r0, #32
    eaf4:	eb004b2a 	bl	217a4 <operator new(unsigned int)>
    eaf8:	e1a01006 	mov	r1, r6
    eafc:	e1a05000 	mov	r5, r0
    eb00:	eb0023da 	bl	17a70 <CLAN7800Device::CLAN7800Device(CUSBFunction*)>
    eb04:	eaffff3b 	b	e7f8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    eb08:	e59f1108 	ldr	r1, [pc, #264]	; ec18 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x460>
    eb0c:	e1a00004 	mov	r0, r4
    eb10:	eb003f78 	bl	1e8f8 <CString::Compare(char const*) const>
    eb14:	e3500000 	cmp	r0, #0
    eb18:	1a000005 	bne	eb34 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x37c>
    eb1c:	e3a00028 	mov	r0, #40	; 0x28
    eb20:	eb004b1f 	bl	217a4 <operator new(unsigned int)>
    eb24:	e1a01006 	mov	r1, r6
    eb28:	e1a05000 	mov	r5, r0
    eb2c:	eb001941 	bl	15038 <CUSBBluetoothDevice::CUSBBluetoothDevice(CUSBFunction*)>
    eb30:	eaffff30 	b	e7f8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    eb34:	e59f10e0 	ldr	r1, [pc, #224]	; ec1c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x464>
    eb38:	e1a00004 	mov	r0, r4
    eb3c:	eb003f6d 	bl	1e8f8 <CString::Compare(char const*) const>
    eb40:	e3500000 	cmp	r0, #0
    eb44:	0afffff4 	beq	eb1c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x364>
    eb48:	e59f10d0 	ldr	r1, [pc, #208]	; ec20 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x468>
    eb4c:	e1a00004 	mov	r0, r4
    eb50:	eb003f68 	bl	1e8f8 <CString::Compare(char const*) const>
    eb54:	e3500000 	cmp	r0, #0
    eb58:	1a000005 	bne	eb74 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x3bc>
    eb5c:	e3a00028 	mov	r0, #40	; 0x28
    eb60:	eb004b0f 	bl	217a4 <operator new(unsigned int)>
    eb64:	e1a01006 	mov	r1, r6
    eb68:	e1a05000 	mov	r5, r0
    eb6c:	eb001abd 	bl	15668 <CUSBMIDIDevice::CUSBMIDIDevice(CUSBFunction*)>
    eb70:	eaffff20 	b	e7f8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    eb74:	e59f10a8 	ldr	r1, [pc, #168]	; ec24 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x46c>
    eb78:	e1a00004 	mov	r0, r4
    eb7c:	eb003f5d 	bl	1e8f8 <CString::Compare(char const*) const>
    eb80:	e3500000 	cmp	r0, #0
    eb84:	0afffff4 	beq	eb5c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x3a4>
    eb88:	e59f1098 	ldr	r1, [pc, #152]	; ec28 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x470>
    eb8c:	e1a00004 	mov	r0, r4
    eb90:	eb003f58 	bl	1e8f8 <CString::Compare(char const*) const>
    eb94:	e3500000 	cmp	r0, #0
    eb98:	13a05000 	movne	r5, #0
    eb9c:	1affff1f 	bne	e820 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x68>
    eba0:	e3a00020 	mov	r0, #32
    eba4:	eb004afe 	bl	217a4 <operator new(unsigned int)>
    eba8:	e1a01006 	mov	r1, r6
    ebac:	e1a05000 	mov	r5, r0
    ebb0:	eb001ce9 	bl	15f5c <CUSBCDCEthernetDevice::CUSBCDCEthernetDevice(CUSBFunction*)>
    ebb4:	eaffff0f 	b	e7f8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    ebb8:	00023e80 	.word	0x00023e80
    ebbc:	00023fac 	.word	0x00023fac
    ebc0:	00023e8c 	.word	0x00023e8c
    ebc4:	00023f58 	.word	0x00023f58
    ebc8:	00023e98 	.word	0x00023e98
    ebcc:	00023ea4 	.word	0x00023ea4
    ebd0:	00023e58 	.word	0x00023e58
    ebd4:	00023e70 	.word	0x00023e70
    ebd8:	00023968 	.word	0x00023968
    ebdc:	00023eb0 	.word	0x00023eb0
    ebe0:	00023ebc 	.word	0x00023ebc
    ebe4:	00023ec8 	.word	0x00023ec8
    ebe8:	00023ed4 	.word	0x00023ed4
    ebec:	00023f64 	.word	0x00023f64
    ebf0:	00023ee0 	.word	0x00023ee0
    ebf4:	00023f70 	.word	0x00023f70
    ebf8:	00023eec 	.word	0x00023eec
    ebfc:	00023ef8 	.word	0x00023ef8
    ec00:	00023f04 	.word	0x00023f04
    ec04:	00023f7c 	.word	0x00023f7c
    ec08:	00023f10 	.word	0x00023f10
    ec0c:	00023f1c 	.word	0x00023f1c
    ec10:	00023f88 	.word	0x00023f88
    ec14:	00023f28 	.word	0x00023f28
    ec18:	00023f34 	.word	0x00023f34
    ec1c:	00023f40 	.word	0x00023f40
    ec20:	00023f94 	.word	0x00023f94
    ec24:	00023f4c 	.word	0x00023f4c
    ec28:	00023fa0 	.word	0x00023fa0

0000ec2c <CUSBStandardHub::~CUSBStandardHub()>:
    ec2c:	e5902014 	ldr	r2, [r0, #20]
    ec30:	e59f3088 	ldr	r3, [pc, #136]	; ecc0 <CUSBStandardHub::~CUSBStandardHub()+0x94>
    ec34:	e3520000 	cmp	r2, #0
    ec38:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    ec3c:	e1a07000 	mov	r7, r0
    ec40:	e5803000 	str	r3, [r0]
    ec44:	0a000013 	beq	ec98 <CUSBStandardHub::~CUSBStandardHub()+0x6c>
    ec48:	e3a04000 	mov	r4, #0
    ec4c:	e3a09004 	mov	r9, #4
    ec50:	e1a08004 	mov	r8, r4
    ec54:	e2805014 	add	r5, r0, #20
    ec58:	e2806034 	add	r6, r0, #52	; 0x34
    ec5c:	e5960004 	ldr	r0, [r6, #4]
    ec60:	e1a01009 	mov	r1, r9
    ec64:	eb004ad2 	bl	217b4 <operator delete(void*, unsigned int)>
    ec68:	e5950004 	ldr	r0, [r5, #4]
    ec6c:	e2844001 	add	r4, r4, #1
    ec70:	e3500000 	cmp	r0, #0
    ec74:	e5a68004 	str	r8, [r6, #4]!
    ec78:	0a000002 	beq	ec88 <CUSBStandardHub::~CUSBStandardHub()+0x5c>
    ec7c:	e5903000 	ldr	r3, [r0]
    ec80:	e5933004 	ldr	r3, [r3, #4]
    ec84:	e12fff33 	blx	r3
    ec88:	e5973014 	ldr	r3, [r7, #20]
    ec8c:	e5a58004 	str	r8, [r5, #4]!
    ec90:	e1530004 	cmp	r3, r4
    ec94:	8afffff0 	bhi	ec5c <CUSBStandardHub::~CUSBStandardHub()+0x30>
    ec98:	e3a04000 	mov	r4, #0
    ec9c:	e3a01009 	mov	r1, #9
    eca0:	e5970010 	ldr	r0, [r7, #16]
    eca4:	e5874014 	str	r4, [r7, #20]
    eca8:	eb004ac1 	bl	217b4 <operator delete(void*, unsigned int)>
    ecac:	e5874010 	str	r4, [r7, #16]
    ecb0:	e1a00007 	mov	r0, r7
    ecb4:	eb001559 	bl	14220 <CUSBFunction::~CUSBFunction()>
    ecb8:	e1a00007 	mov	r0, r7
    ecbc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    ecc0:	00023fd0 	.word	0x00023fd0

0000ecc4 <CUSBStandardHub::~CUSBStandardHub()>:
    ecc4:	e92d4010 	push	{r4, lr}
    ecc8:	e1a04000 	mov	r4, r0
    eccc:	ebffffd6 	bl	ec2c <CUSBStandardHub::~CUSBStandardHub()>
    ecd0:	e1a00004 	mov	r0, r4
    ecd4:	e3a01058 	mov	r1, #88	; 0x58
    ecd8:	eb004ab5 	bl	217b4 <operator delete(void*, unsigned int)>
    ecdc:	e1a00004 	mov	r0, r4
    ece0:	e8bd8010 	pop	{r4, pc}

0000ece4 <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)>:
    ece4:	e92d4010 	push	{r4, lr}
    ece8:	e1a04000 	mov	r4, r0
    ecec:	eb001599 	bl	14358 <CUSBFunction::CUSBFunction(CUSBFunction*)>
    ecf0:	e3a03000 	mov	r3, #0
    ecf4:	e2840038 	add	r0, r4, #56	; 0x38
    ecf8:	e1a01000 	mov	r1, r0
    ecfc:	e59fc028 	ldr	ip, [pc, #40]	; ed2c <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)+0x48>
    ed00:	e1a02003 	mov	r2, r3
    ed04:	e5843010 	str	r3, [r4, #16]
    ed08:	e5843014 	str	r3, [r4, #20]
    ed0c:	e584c000 	str	ip, [r4]
    ed10:	e2843018 	add	r3, r4, #24
    ed14:	e4832004 	str	r2, [r3], #4
    ed18:	e1530000 	cmp	r3, r0
    ed1c:	e4812004 	str	r2, [r1], #4
    ed20:	1afffffb 	bne	ed14 <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)+0x30>
    ed24:	e1a00004 	mov	r0, r4
    ed28:	e8bd8010 	pop	{r4, pc}
    ed2c:	00023fd0 	.word	0x00023fd0

0000ed30 <CUSBStandardHub::EnumeratePorts()>:
    ed30:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ed34:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    ed38:	e1a06000 	mov	r6, r0
    ed3c:	eb001612 	bl	1458c <CUSBFunction::GetHost() const>
    ed40:	e250b000 	subs	fp, r0, #0
    ed44:	0a0001a7 	beq	f3e8 <CUSBStandardHub::EnumeratePorts()+0x6b8>
    ed48:	e1a00006 	mov	r0, r6
    ed4c:	eb0015fd 	bl	14548 <CUSBFunction::GetEndpoint0() const>
    ed50:	e250a000 	subs	sl, r0, #0
    ed54:	0a0001a8 	beq	f3fc <CUSBStandardHub::EnumeratePorts()+0x6cc>
    ed58:	e5963014 	ldr	r3, [r6, #20]
    ed5c:	e3530000 	cmp	r3, #0
    ed60:	0a000020 	beq	ede8 <CUSBStandardHub::EnumeratePorts()+0xb8>
    ed64:	e3a03000 	mov	r3, #0
    ed68:	e3a08008 	mov	r8, #8
    ed6c:	e1a04003 	mov	r4, r3
    ed70:	e3a07003 	mov	r7, #3
    ed74:	e3a05023 	mov	r5, #35	; 0x23
    ed78:	e1a09003 	mov	r9, r3
    ed7c:	ea000002 	b	ed8c <CUSBStandardHub::EnumeratePorts()+0x5c>
    ed80:	e5963014 	ldr	r3, [r6, #20]
    ed84:	e1530009 	cmp	r3, r9
    ed88:	9a00001d 	bls	ee04 <CUSBStandardHub::EnumeratePorts()+0xd4>
    ed8c:	e2899001 	add	r9, r9, #1
    ed90:	e6ff3079 	uxth	r3, r9
    ed94:	e58d3004 	str	r3, [sp, #4]
    ed98:	e58d400c 	str	r4, [sp, #12]
    ed9c:	e58d4008 	str	r4, [sp, #8]
    eda0:	e58d8000 	str	r8, [sp]
    eda4:	e1a03007 	mov	r3, r7
    eda8:	e1a02005 	mov	r2, r5
    edac:	e1a0100a 	mov	r1, sl
    edb0:	e1a0000b 	mov	r0, fp
    edb4:	ebfffd03 	bl	e1c8 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    edb8:	e3500000 	cmp	r0, #0
    edbc:	aaffffef 	bge	ed80 <CUSBStandardHub::EnumeratePorts()+0x50>
    edc0:	eb0036d6 	bl	1c920 <CLogger::Get()>
    edc4:	e58d9000 	str	r9, [sp]
    edc8:	e59f36b0 	ldr	r3, [pc, #1712]	; f480 <CUSBStandardHub::EnumeratePorts()+0x750>
    edcc:	e3a02001 	mov	r2, #1
    edd0:	e59f16ac 	ldr	r1, [pc, #1708]	; f484 <CUSBStandardHub::EnumeratePorts()+0x754>
    edd4:	eb00387a 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    edd8:	e3a09000 	mov	r9, #0
    eddc:	e1a00009 	mov	r0, r9
    ede0:	e28dd02c 	add	sp, sp, #44	; 0x2c
    ede4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ede8:	e3a02091 	mov	r2, #145	; 0x91
    edec:	e59f1694 	ldr	r1, [pc, #1684]	; f488 <CUSBStandardHub::EnumeratePorts()+0x758>
    edf0:	e59f0694 	ldr	r0, [pc, #1684]	; f48c <CUSBStandardHub::EnumeratePorts()+0x75c>
    edf4:	eb002cd6 	bl	1a154 <assertion_failed>
    edf8:	e5963014 	ldr	r3, [r6, #20]
    edfc:	e3530000 	cmp	r3, #0
    ee00:	1affffd7 	bne	ed64 <CUSBStandardHub::EnumeratePorts()+0x34>
    ee04:	eb003569 	bl	1c3b0 <CKernelOptions::Get()>
    ee08:	e3500000 	cmp	r0, #0
    ee0c:	0a000097 	beq	f070 <CUSBStandardHub::EnumeratePorts()+0x340>
    ee10:	eb00355b 	bl	1c384 <CKernelOptions::GetUSBPowerDelay() const>
    ee14:	e2504000 	subs	r4, r0, #0
    ee18:	0a000094 	beq	f070 <CUSBStandardHub::EnumeratePorts()+0x340>
    ee1c:	eb0045e3 	bl	205b0 <CTimer::Get()>
    ee20:	e1a00004 	mov	r0, r4
    ee24:	eb0045a8 	bl	204cc <CTimer::SimpleMsDelay(unsigned int)>
    ee28:	e5963014 	ldr	r3, [r6, #20]
    ee2c:	e3530000 	cmp	r3, #0
    ee30:	0a0000a1 	beq	f0bc <CUSBStandardHub::EnumeratePorts()+0x38c>
    ee34:	e2863018 	add	r3, r6, #24
    ee38:	e58d3024 	str	r3, [sp, #36]	; 0x24
    ee3c:	e1a09003 	mov	r9, r3
    ee40:	e3a04001 	mov	r4, #1
    ee44:	e59f863c 	ldr	r8, [pc, #1596]	; f488 <CUSBStandardHub::EnumeratePorts()+0x758>
    ee48:	e2865034 	add	r5, r6, #52	; 0x34
    ee4c:	ea00000a 	b	ee7c <CUSBStandardHub::EnumeratePorts()+0x14c>
    ee50:	eb0036b2 	bl	1c920 <CLogger::Get()>
    ee54:	e58d4000 	str	r4, [sp]
    ee58:	e59f3630 	ldr	r3, [pc, #1584]	; f490 <CUSBStandardHub::EnumeratePorts()+0x760>
    ee5c:	e3a02001 	mov	r2, #1
    ee60:	e59f161c 	ldr	r1, [pc, #1564]	; f484 <CUSBStandardHub::EnumeratePorts()+0x754>
    ee64:	eb003856 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ee68:	e5963014 	ldr	r3, [r6, #20]
    ee6c:	e2899004 	add	r9, r9, #4
    ee70:	e1530004 	cmp	r3, r4
    ee74:	e2844001 	add	r4, r4, #1
    ee78:	9a0000c8 	bls	f1a0 <CUSBStandardHub::EnumeratePorts()+0x470>
    ee7c:	e5953004 	ldr	r3, [r5, #4]
    ee80:	e3530000 	cmp	r3, #0
    ee84:	0a000003 	beq	ee98 <CUSBStandardHub::EnumeratePorts()+0x168>
    ee88:	e3a020b1 	mov	r2, #177	; 0xb1
    ee8c:	e1a01008 	mov	r1, r8
    ee90:	e59f05fc 	ldr	r0, [pc, #1532]	; f494 <CUSBStandardHub::EnumeratePorts()+0x764>
    ee94:	eb002cae 	bl	1a154 <assertion_failed>
    ee98:	e3a00004 	mov	r0, #4
    ee9c:	eb004a40 	bl	217a4 <operator new(unsigned int)>
    eea0:	e3a02004 	mov	r2, #4
    eea4:	e3a03000 	mov	r3, #0
    eea8:	e6ff7074 	uxth	r7, r4
    eeac:	e5a50004 	str	r0, [r5, #4]!
    eeb0:	e1a0100a 	mov	r1, sl
    eeb4:	e58d0008 	str	r0, [sp, #8]
    eeb8:	e58d200c 	str	r2, [sp, #12]
    eebc:	e88d0088 	stm	sp, {r3, r7}
    eec0:	e3a020a3 	mov	r2, #163	; 0xa3
    eec4:	e1a0000b 	mov	r0, fp
    eec8:	ebfffcbe 	bl	e1c8 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    eecc:	e3500004 	cmp	r0, #4
    eed0:	1affffde 	bne	ee50 <CUSBStandardHub::EnumeratePorts()+0x120>
    eed4:	e5952000 	ldr	r2, [r5]
    eed8:	e5d23000 	ldrb	r3, [r2]
    eedc:	e5d22001 	ldrb	r2, [r2, #1]
    eee0:	e1833402 	orr	r3, r3, r2, lsl #8
    eee4:	e3130c01 	tst	r3, #256	; 0x100
    eee8:	0a000062 	beq	f078 <CUSBStandardHub::EnumeratePorts()+0x348>
    eeec:	e3130001 	tst	r3, #1
    eef0:	0affffdc 	beq	ee68 <CUSBStandardHub::EnumeratePorts()+0x138>
    eef4:	e3a03000 	mov	r3, #0
    eef8:	e58d300c 	str	r3, [sp, #12]
    eefc:	e58d3008 	str	r3, [sp, #8]
    ef00:	e3a03004 	mov	r3, #4
    ef04:	e58d7004 	str	r7, [sp, #4]
    ef08:	e58d3000 	str	r3, [sp]
    ef0c:	e3a02023 	mov	r2, #35	; 0x23
    ef10:	e3a03003 	mov	r3, #3
    ef14:	e1a0100a 	mov	r1, sl
    ef18:	e1a0000b 	mov	r0, fp
    ef1c:	ebfffca9 	bl	e1c8 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    ef20:	e3500000 	cmp	r0, #0
    ef24:	ba00005c 	blt	f09c <CUSBStandardHub::EnumeratePorts()+0x36c>
    ef28:	eb0045a0 	bl	205b0 <CTimer::Get()>
    ef2c:	e3a00064 	mov	r0, #100	; 0x64
    ef30:	eb004565 	bl	204cc <CTimer::SimpleMsDelay(unsigned int)>
    ef34:	e3a02004 	mov	r2, #4
    ef38:	e5953000 	ldr	r3, [r5]
    ef3c:	e58d200c 	str	r2, [sp, #12]
    ef40:	e3a02000 	mov	r2, #0
    ef44:	e58d3008 	str	r3, [sp, #8]
    ef48:	e58d2000 	str	r2, [sp]
    ef4c:	e1a03002 	mov	r3, r2
    ef50:	e58d7004 	str	r7, [sp, #4]
    ef54:	e3a020a3 	mov	r2, #163	; 0xa3
    ef58:	e1a0100a 	mov	r1, sl
    ef5c:	e1a0000b 	mov	r0, fp
    ef60:	ebfffc98 	bl	e1c8 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    ef64:	e3500004 	cmp	r0, #4
    ef68:	1a00012d 	bne	f424 <CUSBStandardHub::EnumeratePorts()+0x6f4>
    ef6c:	e5952000 	ldr	r2, [r5]
    ef70:	e5d23000 	ldrb	r3, [r2]
    ef74:	e5d22001 	ldrb	r2, [r2, #1]
    ef78:	e1833402 	orr	r3, r3, r2, lsl #8
    ef7c:	e3130002 	tst	r3, #2
    ef80:	0a0000b2 	beq	f250 <CUSBStandardHub::EnumeratePorts()+0x520>
    ef84:	e2132008 	ands	r2, r3, #8
    ef88:	1a000127 	bne	f42c <CUSBStandardHub::EnumeratePorts()+0x6fc>
    ef8c:	e3130c02 	tst	r3, #512	; 0x200
    ef90:	158d2020 	strne	r2, [sp, #32]
    ef94:	1a000003 	bne	efa8 <CUSBStandardHub::EnumeratePorts()+0x278>
    ef98:	e3130b01 	tst	r3, #1024	; 0x400
    ef9c:	03a03001 	moveq	r3, #1
    efa0:	13a03002 	movne	r3, #2
    efa4:	e58d3020 	str	r3, [sp, #32]
    efa8:	e1a00006 	mov	r0, r6
    efac:	eb001555 	bl	14508 <CUSBFunction::GetDevice() const>
    efb0:	e2507000 	subs	r7, r0, #0
    efb4:	0a000115 	beq	f410 <CUSBStandardHub::EnumeratePorts()+0x6e0>
    efb8:	e1a00007 	mov	r0, r7
    efbc:	ebfff8a4 	bl	d254 <CUSBDevice::IsSplit() const>
    efc0:	e58d0014 	str	r0, [sp, #20]
    efc4:	e1a00007 	mov	r0, r7
    efc8:	ebfff8a3 	bl	d25c <CUSBDevice::GetHubAddress() const>
    efcc:	e58d0018 	str	r0, [sp, #24]
    efd0:	e1a00007 	mov	r0, r7
    efd4:	ebfff8a2 	bl	d264 <CUSBDevice::GetHubPortNumber() const>
    efd8:	e59d3014 	ldr	r3, [sp, #20]
    efdc:	e58d001c 	str	r0, [sp, #28]
    efe0:	e3530000 	cmp	r3, #0
    efe4:	0a0000a0 	beq	f26c <CUSBStandardHub::EnumeratePorts()+0x53c>
    efe8:	e5993000 	ldr	r3, [r9]
    efec:	e3530000 	cmp	r3, #0
    eff0:	0a000003 	beq	f004 <CUSBStandardHub::EnumeratePorts()+0x2d4>
    eff4:	e59f249c 	ldr	r2, [pc, #1180]	; f498 <CUSBStandardHub::EnumeratePorts()+0x768>
    eff8:	e1a01008 	mov	r1, r8
    effc:	e59f0498 	ldr	r0, [pc, #1176]	; f49c <CUSBStandardHub::EnumeratePorts()+0x76c>
    f000:	eb002c53 	bl	1a154 <assertion_failed>
    f004:	e3a00048 	mov	r0, #72	; 0x48
    f008:	eb0049e5 	bl	217a4 <operator new(unsigned int)>
    f00c:	e1a07000 	mov	r7, r0
    f010:	e59d301c 	ldr	r3, [sp, #28]
    f014:	e59d2020 	ldr	r2, [sp, #32]
    f018:	e58d3004 	str	r3, [sp, #4]
    f01c:	e59d3018 	ldr	r3, [sp, #24]
    f020:	e1a0100b 	mov	r1, fp
    f024:	e58d3000 	str	r3, [sp]
    f028:	e59d3014 	ldr	r3, [sp, #20]
    f02c:	ebfff7a6 	bl	cecc <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, bool, unsigned char, unsigned char)>
    f030:	e1a00007 	mov	r0, r7
    f034:	e5897000 	str	r7, [r9]
    f038:	e5903000 	ldr	r3, [r0]
    f03c:	e5933008 	ldr	r3, [r3, #8]
    f040:	e12fff33 	blx	r3
    f044:	e3500000 	cmp	r0, #0
    f048:	1affff86 	bne	ee68 <CUSBStandardHub::EnumeratePorts()+0x138>
    f04c:	e5990000 	ldr	r0, [r9]
    f050:	e3500000 	cmp	r0, #0
    f054:	0a000002 	beq	f064 <CUSBStandardHub::EnumeratePorts()+0x334>
    f058:	e5903000 	ldr	r3, [r0]
    f05c:	e5933004 	ldr	r3, [r3, #4]
    f060:	e12fff33 	blx	r3
    f064:	e3a03000 	mov	r3, #0
    f068:	e5893000 	str	r3, [r9]
    f06c:	eaffff7d 	b	ee68 <CUSBStandardHub::EnumeratePorts()+0x138>
    f070:	e59f4428 	ldr	r4, [pc, #1064]	; f4a0 <CUSBStandardHub::EnumeratePorts()+0x770>
    f074:	eaffff68 	b	ee1c <CUSBStandardHub::EnumeratePorts()+0xec>
    f078:	e3a020bf 	mov	r2, #191	; 0xbf
    f07c:	e1a01008 	mov	r1, r8
    f080:	e59f041c 	ldr	r0, [pc, #1052]	; f4a4 <CUSBStandardHub::EnumeratePorts()+0x774>
    f084:	eb002c32 	bl	1a154 <assertion_failed>
    f088:	e5952000 	ldr	r2, [r5]
    f08c:	e5d23000 	ldrb	r3, [r2]
    f090:	e5d22001 	ldrb	r2, [r2, #1]
    f094:	e1833402 	orr	r3, r3, r2, lsl #8
    f098:	eaffff93 	b	eeec <CUSBStandardHub::EnumeratePorts()+0x1bc>
    f09c:	eb00361f 	bl	1c920 <CLogger::Get()>
    f0a0:	e58d4000 	str	r4, [sp]
    f0a4:	e59f33fc 	ldr	r3, [pc, #1020]	; f4a8 <CUSBStandardHub::EnumeratePorts()+0x778>
    f0a8:	e3a02001 	mov	r2, #1
    f0ac:	e59f13d0 	ldr	r1, [pc, #976]	; f484 <CUSBStandardHub::EnumeratePorts()+0x754>
    f0b0:	eb0037c3 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f0b4:	eaffff6b 	b	ee68 <CUSBStandardHub::EnumeratePorts()+0x138>
    f0b8:	e59db014 	ldr	fp, [sp, #20]
    f0bc:	e3a00004 	mov	r0, #4
    f0c0:	eb0049b7 	bl	217a4 <operator new(unsigned int)>
    f0c4:	e3a09000 	mov	r9, #0
    f0c8:	e3a04004 	mov	r4, #4
    f0cc:	e58d0014 	str	r0, [sp, #20]
    f0d0:	e58d0008 	str	r0, [sp, #8]
    f0d4:	e58d400c 	str	r4, [sp, #12]
    f0d8:	e58d9004 	str	r9, [sp, #4]
    f0dc:	e58d9000 	str	r9, [sp]
    f0e0:	e1a03009 	mov	r3, r9
    f0e4:	e3a020a0 	mov	r2, #160	; 0xa0
    f0e8:	e1a0100a 	mov	r1, sl
    f0ec:	e1a0000b 	mov	r0, fp
    f0f0:	ebfffc34 	bl	e1c8 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    f0f4:	e1500004 	cmp	r0, r4
    f0f8:	e1a05000 	mov	r5, r0
    f0fc:	1a0000a0 	bne	f384 <CUSBStandardHub::EnumeratePorts()+0x654>
    f100:	e59d3014 	ldr	r3, [sp, #20]
    f104:	e5d37000 	ldrb	r7, [r3]
    f108:	e2177002 	ands	r7, r7, #2
    f10c:	0a000068 	beq	f2b4 <CUSBStandardHub::EnumeratePorts()+0x584>
    f110:	e5963014 	ldr	r3, [r6, #20]
    f114:	e3530000 	cmp	r3, #0
    f118:	0a000014 	beq	f170 <CUSBStandardHub::EnumeratePorts()+0x440>
    f11c:	e3a05001 	mov	r5, #1
    f120:	e1a04009 	mov	r4, r9
    f124:	e3a08008 	mov	r8, #8
    f128:	e1a09005 	mov	r9, r5
    f12c:	e3a07023 	mov	r7, #35	; 0x23
    f130:	ea000000 	b	f138 <CUSBStandardHub::EnumeratePorts()+0x408>
    f134:	e1a05002 	mov	r5, r2
    f138:	e6ff3075 	uxth	r3, r5
    f13c:	e58d3004 	str	r3, [sp, #4]
    f140:	e1a02007 	mov	r2, r7
    f144:	e1a03009 	mov	r3, r9
    f148:	e58d400c 	str	r4, [sp, #12]
    f14c:	e58d4008 	str	r4, [sp, #8]
    f150:	e58d8000 	str	r8, [sp]
    f154:	e1a0100a 	mov	r1, sl
    f158:	e1a0000b 	mov	r0, fp
    f15c:	ebfffc19 	bl	e1c8 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    f160:	e5963014 	ldr	r3, [r6, #20]
    f164:	e2852001 	add	r2, r5, #1
    f168:	e1550003 	cmp	r5, r3
    f16c:	3afffff0 	bcc	f134 <CUSBStandardHub::EnumeratePorts()+0x404>
    f170:	e3a09000 	mov	r9, #0
    f174:	eb0035e9 	bl	1c920 <CLogger::Get()>
    f178:	e59f332c 	ldr	r3, [pc, #812]	; f4ac <CUSBStandardHub::EnumeratePorts()+0x77c>
    f17c:	e3a02001 	mov	r2, #1
    f180:	e59f12fc 	ldr	r1, [pc, #764]	; f484 <CUSBStandardHub::EnumeratePorts()+0x754>
    f184:	eb00378e 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f188:	e59d0014 	ldr	r0, [sp, #20]
    f18c:	e3a01004 	mov	r1, #4
    f190:	eb004987 	bl	217b4 <operator delete(void*, unsigned int)>
    f194:	e1a00009 	mov	r0, r9
    f198:	e28dd02c 	add	sp, sp, #44	; 0x2c
    f19c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f1a0:	e3530000 	cmp	r3, #0
    f1a4:	0affffc4 	beq	f0bc <CUSBStandardHub::EnumeratePorts()+0x38c>
    f1a8:	e58db014 	str	fp, [sp, #20]
    f1ac:	e3a04001 	mov	r4, #1
    f1b0:	e59f52cc 	ldr	r5, [pc, #716]	; f484 <CUSBStandardHub::EnumeratePorts()+0x754>
    f1b4:	e59f92f4 	ldr	r9, [pc, #756]	; f4b0 <CUSBStandardHub::EnumeratePorts()+0x780>
    f1b8:	e3a08002 	mov	r8, #2
    f1bc:	e3a07000 	mov	r7, #0
    f1c0:	e59db024 	ldr	fp, [sp, #36]	; 0x24
    f1c4:	ea000011 	b	f210 <CUSBStandardHub::EnumeratePorts()+0x4e0>
    f1c8:	eb0035d4 	bl	1c920 <CLogger::Get()>
    f1cc:	e58d4000 	str	r4, [sp]
    f1d0:	e1a03009 	mov	r3, r9
    f1d4:	e1a02008 	mov	r2, r8
    f1d8:	e1a01005 	mov	r1, r5
    f1dc:	eb003778 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f1e0:	e59b0000 	ldr	r0, [fp]
    f1e4:	e3500000 	cmp	r0, #0
    f1e8:	0a000002 	beq	f1f8 <CUSBStandardHub::EnumeratePorts()+0x4c8>
    f1ec:	e5903000 	ldr	r3, [r0]
    f1f0:	e5933004 	ldr	r3, [r3, #4]
    f1f4:	e12fff33 	blx	r3
    f1f8:	e5963014 	ldr	r3, [r6, #20]
    f1fc:	e58b7000 	str	r7, [fp]
    f200:	e1530004 	cmp	r3, r4
    f204:	e28bb004 	add	fp, fp, #4
    f208:	e2844001 	add	r4, r4, #1
    f20c:	9affffa9 	bls	f0b8 <CUSBStandardHub::EnumeratePorts()+0x388>
    f210:	e59b0000 	ldr	r0, [fp]
    f214:	e3500000 	cmp	r0, #0
    f218:	0afffff8 	beq	f200 <CUSBStandardHub::EnumeratePorts()+0x4d0>
    f21c:	e5903000 	ldr	r3, [r0]
    f220:	e593300c 	ldr	r3, [r3, #12]
    f224:	e12fff33 	blx	r3
    f228:	e3500000 	cmp	r0, #0
    f22c:	0affffe5 	beq	f1c8 <CUSBStandardHub::EnumeratePorts()+0x498>
    f230:	eb0035ba 	bl	1c920 <CLogger::Get()>
    f234:	e59f3278 	ldr	r3, [pc, #632]	; f4b4 <CUSBStandardHub::EnumeratePorts()+0x784>
    f238:	e58d4000 	str	r4, [sp]
    f23c:	e3a02004 	mov	r2, #4
    f240:	e1a01005 	mov	r1, r5
    f244:	eb00375e 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f248:	e5963014 	ldr	r3, [r6, #20]
    f24c:	eaffffeb 	b	f200 <CUSBStandardHub::EnumeratePorts()+0x4d0>
    f250:	eb0035b2 	bl	1c920 <CLogger::Get()>
    f254:	e58d4000 	str	r4, [sp]
    f258:	e59f3258 	ldr	r3, [pc, #600]	; f4b8 <CUSBStandardHub::EnumeratePorts()+0x788>
    f25c:	e3a02001 	mov	r2, #1
    f260:	e59f121c 	ldr	r1, [pc, #540]	; f484 <CUSBStandardHub::EnumeratePorts()+0x754>
    f264:	eb003756 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f268:	eafffefe 	b	ee68 <CUSBStandardHub::EnumeratePorts()+0x138>
    f26c:	e1a00007 	mov	r0, r7
    f270:	ebfff7f5 	bl	d24c <CUSBDevice::GetSpeed() const>
    f274:	e3500002 	cmp	r0, #2
    f278:	1affff5a 	bne	efe8 <CUSBStandardHub::EnumeratePorts()+0x2b8>
    f27c:	e59d3020 	ldr	r3, [sp, #32]
    f280:	e3530002 	cmp	r3, #2
    f284:	0affff57 	beq	efe8 <CUSBStandardHub::EnumeratePorts()+0x2b8>
    f288:	e1a00007 	mov	r0, r7
    f28c:	ebfff7ec 	bl	d244 <CUSBDevice::GetAddress() const>
    f290:	e5993000 	ldr	r3, [r9]
    f294:	e6ef2074 	uxtb	r2, r4
    f298:	e3530000 	cmp	r3, #0
    f29c:	e58d0018 	str	r0, [sp, #24]
    f2a0:	e58d201c 	str	r2, [sp, #28]
    f2a4:	0a000041 	beq	f3b0 <CUSBStandardHub::EnumeratePorts()+0x680>
    f2a8:	e3a03001 	mov	r3, #1
    f2ac:	e58d3014 	str	r3, [sp, #20]
    f2b0:	eaffff4f 	b	eff4 <CUSBStandardHub::EnumeratePorts()+0x2c4>
    f2b4:	e59d0014 	ldr	r0, [sp, #20]
    f2b8:	e1a01005 	mov	r1, r5
    f2bc:	eb00493c 	bl	217b4 <operator delete(void*, unsigned int)>
    f2c0:	e5963014 	ldr	r3, [r6, #20]
    f2c4:	e3530000 	cmp	r3, #0
    f2c8:	0a00006a 	beq	f478 <CUSBStandardHub::EnumeratePorts()+0x748>
    f2cc:	e3a04001 	mov	r4, #1
    f2d0:	e58d5014 	str	r5, [sp, #20]
    f2d4:	e1a09004 	mov	r9, r4
    f2d8:	e2865038 	add	r5, r6, #56	; 0x38
    f2dc:	ea000004 	b	f2f4 <CUSBStandardHub::EnumeratePorts()+0x5c4>
    f2e0:	e5963014 	ldr	r3, [r6, #20]
    f2e4:	e2855004 	add	r5, r5, #4
    f2e8:	e1530004 	cmp	r3, r4
    f2ec:	e2844001 	add	r4, r4, #1
    f2f0:	9afffeb9 	bls	eddc <CUSBStandardHub::EnumeratePorts()+0xac>
    f2f4:	e5953000 	ldr	r3, [r5]
    f2f8:	e59d2014 	ldr	r2, [sp, #20]
    f2fc:	e6ff8074 	uxth	r8, r4
    f300:	e58d200c 	str	r2, [sp, #12]
    f304:	e58d3008 	str	r3, [sp, #8]
    f308:	e58d7000 	str	r7, [sp]
    f30c:	e58d8004 	str	r8, [sp, #4]
    f310:	e3a03000 	mov	r3, #0
    f314:	e3a020a3 	mov	r2, #163	; 0xa3
    f318:	e1a0100a 	mov	r1, sl
    f31c:	e1a0000b 	mov	r0, fp
    f320:	ebfffba8 	bl	e1c8 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    f324:	e3500004 	cmp	r0, #4
    f328:	1affffec 	bne	f2e0 <CUSBStandardHub::EnumeratePorts()+0x5b0>
    f32c:	e5953000 	ldr	r3, [r5]
    f330:	e5d33000 	ldrb	r3, [r3]
    f334:	e3130008 	tst	r3, #8
    f338:	0affffe8 	beq	f2e0 <CUSBStandardHub::EnumeratePorts()+0x5b0>
    f33c:	e3a03008 	mov	r3, #8
    f340:	e3a02023 	mov	r2, #35	; 0x23
    f344:	e1a0100a 	mov	r1, sl
    f348:	e58d3000 	str	r3, [sp]
    f34c:	e58d700c 	str	r7, [sp, #12]
    f350:	e3a03001 	mov	r3, #1
    f354:	e58d7008 	str	r7, [sp, #8]
    f358:	e58d8004 	str	r8, [sp, #4]
    f35c:	e1a0000b 	mov	r0, fp
    f360:	ebfffb98 	bl	e1c8 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    f364:	eb00356d 	bl	1c920 <CLogger::Get()>
    f368:	e58d4000 	str	r4, [sp]
    f36c:	e59f3148 	ldr	r3, [pc, #328]	; f4bc <CUSBStandardHub::EnumeratePorts()+0x78c>
    f370:	e3a02001 	mov	r2, #1
    f374:	e59f1108 	ldr	r1, [pc, #264]	; f484 <CUSBStandardHub::EnumeratePorts()+0x754>
    f378:	eb003711 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f37c:	e1a09007 	mov	r9, r7
    f380:	eaffffd6 	b	f2e0 <CUSBStandardHub::EnumeratePorts()+0x5b0>
    f384:	eb003565 	bl	1c920 <CLogger::Get()>
    f388:	e59f3130 	ldr	r3, [pc, #304]	; f4c0 <CUSBStandardHub::EnumeratePorts()+0x790>
    f38c:	e3a02001 	mov	r2, #1
    f390:	e59f10ec 	ldr	r1, [pc, #236]	; f484 <CUSBStandardHub::EnumeratePorts()+0x754>
    f394:	eb00370a 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f398:	e59d0014 	ldr	r0, [sp, #20]
    f39c:	e1a01004 	mov	r1, r4
    f3a0:	eb004903 	bl	217b4 <operator delete(void*, unsigned int)>
    f3a4:	e1a00009 	mov	r0, r9
    f3a8:	e28dd02c 	add	sp, sp, #44	; 0x2c
    f3ac:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f3b0:	e3a00048 	mov	r0, #72	; 0x48
    f3b4:	eb0048fa 	bl	217a4 <operator new(unsigned int)>
    f3b8:	e1a07000 	mov	r7, r0
    f3bc:	e6ef3074 	uxtb	r3, r4
    f3c0:	e58d3004 	str	r3, [sp, #4]
    f3c4:	e59d3018 	ldr	r3, [sp, #24]
    f3c8:	e59d2020 	ldr	r2, [sp, #32]
    f3cc:	e58d3000 	str	r3, [sp]
    f3d0:	e1a0100b 	mov	r1, fp
    f3d4:	e3a03001 	mov	r3, #1
    f3d8:	ebfff6bb 	bl	cecc <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, bool, unsigned char, unsigned char)>
    f3dc:	e5897000 	str	r7, [r9]
    f3e0:	e1a00007 	mov	r0, r7
    f3e4:	eaffff13 	b	f038 <CUSBStandardHub::EnumeratePorts()+0x308>
    f3e8:	e3a0208c 	mov	r2, #140	; 0x8c
    f3ec:	e59f1094 	ldr	r1, [pc, #148]	; f488 <CUSBStandardHub::EnumeratePorts()+0x758>
    f3f0:	e59f00cc 	ldr	r0, [pc, #204]	; f4c4 <CUSBStandardHub::EnumeratePorts()+0x794>
    f3f4:	eb002b56 	bl	1a154 <assertion_failed>
    f3f8:	eafffe52 	b	ed48 <CUSBStandardHub::EnumeratePorts()+0x18>
    f3fc:	e3a0208f 	mov	r2, #143	; 0x8f
    f400:	e59f1080 	ldr	r1, [pc, #128]	; f488 <CUSBStandardHub::EnumeratePorts()+0x758>
    f404:	e59f00bc 	ldr	r0, [pc, #188]	; f4c8 <CUSBStandardHub::EnumeratePorts()+0x798>
    f408:	eb002b51 	bl	1a154 <assertion_failed>
    f40c:	eafffe51 	b	ed58 <CUSBStandardHub::EnumeratePorts()+0x28>
    f410:	e3a020fd 	mov	r2, #253	; 0xfd
    f414:	e1a01008 	mov	r1, r8
    f418:	e59f00ac 	ldr	r0, [pc, #172]	; f4cc <CUSBStandardHub::EnumeratePorts()+0x79c>
    f41c:	eb002b4c 	bl	1a154 <assertion_failed>
    f420:	eafffee4 	b	efb8 <CUSBStandardHub::EnumeratePorts()+0x288>
    f424:	e3a09000 	mov	r9, #0
    f428:	eafffe6b 	b	eddc <CUSBStandardHub::EnumeratePorts()+0xac>
    f42c:	e3a02000 	mov	r2, #0
    f430:	e3a03008 	mov	r3, #8
    f434:	e1a0100a 	mov	r1, sl
    f438:	e58d200c 	str	r2, [sp, #12]
    f43c:	e58d2008 	str	r2, [sp, #8]
    f440:	e58d3000 	str	r3, [sp]
    f444:	e3a02023 	mov	r2, #35	; 0x23
    f448:	e3a03001 	mov	r3, #1
    f44c:	e58d7004 	str	r7, [sp, #4]
    f450:	e1a0000b 	mov	r0, fp
    f454:	ebfffb5b 	bl	e1c8 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    f458:	eb003530 	bl	1c920 <CLogger::Get()>
    f45c:	e58d4000 	str	r4, [sp]
    f460:	e59f3054 	ldr	r3, [pc, #84]	; f4bc <CUSBStandardHub::EnumeratePorts()+0x78c>
    f464:	e3a02001 	mov	r2, #1
    f468:	e59f1014 	ldr	r1, [pc, #20]	; f484 <CUSBStandardHub::EnumeratePorts()+0x754>
    f46c:	e3a09000 	mov	r9, #0
    f470:	eb0036d3 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f474:	eafffe58 	b	eddc <CUSBStandardHub::EnumeratePorts()+0xac>
    f478:	e3a09001 	mov	r9, #1
    f47c:	eafffe56 	b	eddc <CUSBStandardHub::EnumeratePorts()+0xac>
    f480:	00024034 	.word	0x00024034
    f484:	00023fec 	.word	0x00023fec
    f488:	00023ff4 	.word	0x00023ff4
    f48c:	00024024 	.word	0x00024024
    f490:	00024064 	.word	0x00024064
    f494:	0002404c 	.word	0x0002404c
    f498:	0000010e 	.word	0x0000010e
    f49c:	0002411c 	.word	0x0002411c
    f4a0:	000001fe 	.word	0x000001fe
    f4a4:	00024084 	.word	0x00024084
    f4a8:	000240b8 	.word	0x000240b8
    f4ac:	0002418c 	.word	0x0002418c
    f4b0:	00024134 	.word	0x00024134
    f4b4:	00024158 	.word	0x00024158
    f4b8:	000240d0 	.word	0x000240d0
    f4bc:	000240e8 	.word	0x000240e8
    f4c0:	00024174 	.word	0x00024174
    f4c4:	00024008 	.word	0x00024008
    f4c8:	00024014 	.word	0x00024014
    f4cc:	0002410c 	.word	0x0002410c

0000f4d0 <CUSBStandardHub::Configure()>:
    f4d0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    f4d4:	e24dd024 	sub	sp, sp, #36	; 0x24
    f4d8:	e1a04000 	mov	r4, r0
    f4dc:	eb0013f9 	bl	144c8 <CUSBFunction::GetNumEndpoints() const>
    f4e0:	e3500001 	cmp	r0, #1
    f4e4:	0a000006 	beq	f504 <CUSBStandardHub::Configure()+0x34>
    f4e8:	e1a00004 	mov	r0, r4
    f4ec:	e59f11d0 	ldr	r1, [pc, #464]	; f6c4 <CUSBStandardHub::Configure()+0x1f4>
    f4f0:	eb00147a 	bl	146e0 <CUSBFunction::ConfigurationError(char const*) const>
    f4f4:	e3a05000 	mov	r5, #0
    f4f8:	e1a00005 	mov	r0, r5
    f4fc:	e28dd024 	add	sp, sp, #36	; 0x24
    f500:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    f504:	e1a06000 	mov	r6, r0
    f508:	e3a01005 	mov	r1, #5
    f50c:	e1a00004 	mov	r0, r4
    f510:	eb00145f 	bl	14694 <CUSBFunction::GetDescriptor(unsigned char)>
    f514:	e3500000 	cmp	r0, #0
    f518:	0afffff2 	beq	f4e8 <CUSBStandardHub::Configure()+0x18>
    f51c:	e1d030d2 	ldrsb	r3, [r0, #2]
    f520:	e3530000 	cmp	r3, #0
    f524:	aaffffef 	bge	f4e8 <CUSBStandardHub::Configure()+0x18>
    f528:	e5d03003 	ldrb	r3, [r0, #3]
    f52c:	e203303f 	and	r3, r3, #63	; 0x3f
    f530:	e3530003 	cmp	r3, #3
    f534:	1affffeb 	bne	f4e8 <CUSBStandardHub::Configure()+0x18>
    f538:	e1a00004 	mov	r0, r4
    f53c:	eb001423 	bl	145d0 <CUSBFunction::Configure()>
    f540:	e2505000 	subs	r5, r0, #0
    f544:	0a000045 	beq	f660 <CUSBStandardHub::Configure()+0x190>
    f548:	e5943010 	ldr	r3, [r4, #16]
    f54c:	e3530000 	cmp	r3, #0
    f550:	0a000003 	beq	f564 <CUSBStandardHub::Configure()+0x94>
    f554:	e3a0205a 	mov	r2, #90	; 0x5a
    f558:	e59f1168 	ldr	r1, [pc, #360]	; f6c8 <CUSBStandardHub::Configure()+0x1f8>
    f55c:	e59f0168 	ldr	r0, [pc, #360]	; f6cc <CUSBStandardHub::Configure()+0x1fc>
    f560:	eb002afb 	bl	1a154 <assertion_failed>
    f564:	e3a00009 	mov	r0, #9
    f568:	eb00488d 	bl	217a4 <operator new(unsigned int)>
    f56c:	e5840010 	str	r0, [r4, #16]
    f570:	e1a00004 	mov	r0, r4
    f574:	eb001404 	bl	1458c <CUSBFunction::GetHost() const>
    f578:	e1a07000 	mov	r7, r0
    f57c:	e1a00004 	mov	r0, r4
    f580:	eb0013f0 	bl	14548 <CUSBFunction::GetEndpoint0() const>
    f584:	e3a06000 	mov	r6, #0
    f588:	e3a0c0a0 	mov	ip, #160	; 0xa0
    f58c:	e3a05009 	mov	r5, #9
    f590:	e5942010 	ldr	r2, [r4, #16]
    f594:	e1a01000 	mov	r1, r0
    f598:	e88d1024 	stm	sp, {r2, r5, ip}
    f59c:	e1a00007 	mov	r0, r7
    f5a0:	e58d600c 	str	r6, [sp, #12]
    f5a4:	e1a03006 	mov	r3, r6
    f5a8:	e3a02029 	mov	r2, #41	; 0x29
    f5ac:	ebfffb37 	bl	e290 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    f5b0:	e1500005 	cmp	r0, r5
    f5b4:	e1a07000 	mov	r7, r0
    f5b8:	1a00001d 	bne	f634 <CUSBStandardHub::Configure()+0x164>
    f5bc:	e5943010 	ldr	r3, [r4, #16]
    f5c0:	e5d33002 	ldrb	r3, [r3, #2]
    f5c4:	e3530008 	cmp	r3, #8
    f5c8:	e5843014 	str	r3, [r4, #20]
    f5cc:	8a000029 	bhi	f678 <CUSBStandardHub::Configure()+0x1a8>
    f5d0:	e28d0010 	add	r0, sp, #16
    f5d4:	eb003c5e 	bl	1e754 <CString::CString()>
    f5d8:	e59f30f0 	ldr	r3, [pc, #240]	; f6d0 <CUSBStandardHub::Configure()+0x200>
    f5dc:	e59f10f0 	ldr	r1, [pc, #240]	; f6d4 <CUSBStandardHub::Configure()+0x204>
    f5e0:	e5932000 	ldr	r2, [r3]
    f5e4:	e28d0010 	add	r0, sp, #16
    f5e8:	e282c001 	add	ip, r2, #1
    f5ec:	e583c000 	str	ip, [r3]
    f5f0:	eb004045 	bl	1f70c <CString::Format(char const*, ...)>
    f5f4:	eb002dcf 	bl	1ad38 <CDeviceNameService::Get()>
    f5f8:	e1a05000 	mov	r5, r0
    f5fc:	e28d0010 	add	r0, sp, #16
    f600:	eb003c69 	bl	1e7ac <CString::operator char const*() const>
    f604:	e1a03006 	mov	r3, r6
    f608:	e1a01000 	mov	r1, r0
    f60c:	e1a02004 	mov	r2, r4
    f610:	e1a00005 	mov	r0, r5
    f614:	eb002d07 	bl	1aa38 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
    f618:	e1a00004 	mov	r0, r4
    f61c:	ebfffdc3 	bl	ed30 <CUSBStandardHub::EnumeratePorts()>
    f620:	e2505000 	subs	r5, r0, #0
    f624:	0a000020 	beq	f6ac <CUSBStandardHub::Configure()+0x1dc>
    f628:	e28d0010 	add	r0, sp, #16
    f62c:	eb003c15 	bl	1e688 <CString::~CString()>
    f630:	eaffffb0 	b	f4f8 <CUSBStandardHub::Configure()+0x28>
    f634:	eb0034b9 	bl	1c920 <CLogger::Get()>
    f638:	e59f3098 	ldr	r3, [pc, #152]	; f6d8 <CUSBStandardHub::Configure()+0x208>
    f63c:	e3a02001 	mov	r2, #1
    f640:	e59f107c 	ldr	r1, [pc, #124]	; f6c4 <CUSBStandardHub::Configure()+0x1f4>
    f644:	eb00365e 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f648:	e1a01005 	mov	r1, r5
    f64c:	e5940010 	ldr	r0, [r4, #16]
    f650:	eb004857 	bl	217b4 <operator delete(void*, unsigned int)>
    f654:	e1a05006 	mov	r5, r6
    f658:	e5846010 	str	r6, [r4, #16]
    f65c:	eaffffa5 	b	f4f8 <CUSBStandardHub::Configure()+0x28>
    f660:	eb0034ae 	bl	1c920 <CLogger::Get()>
    f664:	e1a02006 	mov	r2, r6
    f668:	e59f306c 	ldr	r3, [pc, #108]	; f6dc <CUSBStandardHub::Configure()+0x20c>
    f66c:	e59f1050 	ldr	r1, [pc, #80]	; f6c4 <CUSBStandardHub::Configure()+0x1f4>
    f670:	eb003653 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f674:	eaffff9f 	b	f4f8 <CUSBStandardHub::Configure()+0x28>
    f678:	eb0034a8 	bl	1c920 <CLogger::Get()>
    f67c:	e5942014 	ldr	r2, [r4, #20]
    f680:	e59f3058 	ldr	r3, [pc, #88]	; f6e0 <CUSBStandardHub::Configure()+0x210>
    f684:	e58d2000 	str	r2, [sp]
    f688:	e59f1034 	ldr	r1, [pc, #52]	; f6c4 <CUSBStandardHub::Configure()+0x1f4>
    f68c:	e3a02001 	mov	r2, #1
    f690:	eb00364b 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f694:	e1a01007 	mov	r1, r7
    f698:	e5940010 	ldr	r0, [r4, #16]
    f69c:	eb004844 	bl	217b4 <operator delete(void*, unsigned int)>
    f6a0:	e1a05006 	mov	r5, r6
    f6a4:	e5846010 	str	r6, [r4, #16]
    f6a8:	eaffff92 	b	f4f8 <CUSBStandardHub::Configure()+0x28>
    f6ac:	eb00349b 	bl	1c920 <CLogger::Get()>
    f6b0:	e59f302c 	ldr	r3, [pc, #44]	; f6e4 <CUSBStandardHub::Configure()+0x214>
    f6b4:	e3a02001 	mov	r2, #1
    f6b8:	e59f1004 	ldr	r1, [pc, #4]	; f6c4 <CUSBStandardHub::Configure()+0x1f4>
    f6bc:	eb003640 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f6c0:	eaffffd8 	b	f628 <CUSBStandardHub::Configure()+0x158>
    f6c4:	00023fec 	.word	0x00023fec
    f6c8:	00023ff4 	.word	0x00023ff4
    f6cc:	000241c0 	.word	0x000241c0
    f6d0:	00029758 	.word	0x00029758
    f6d4:	00024200 	.word	0x00024200
    f6d8:	000241d0 	.word	0x000241d0
    f6dc:	000241a8 	.word	0x000241a8
    f6e0:	000241ec 	.word	0x000241ec
    f6e4:	00024208 	.word	0x00024208

0000f6e8 <CUSBBulkOnlyMassStorageDevice::Seek(unsigned long long)>:
    f6e8:	e1c022f0 	strd	r2, [r0, #32]
    f6ec:	e1a01003 	mov	r1, r3
    f6f0:	e1a00002 	mov	r0, r2
    f6f4:	e12fff1e 	bx	lr

0000f6f8 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()>:
    f6f8:	e92d4070 	push	{r4, r5, r6, lr}
    f6fc:	e5905028 	ldr	r5, [r0, #40]	; 0x28
    f700:	e59f3088 	ldr	r3, [pc, #136]	; f790 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x98>
    f704:	e3550000 	cmp	r5, #0
    f708:	e1a04000 	mov	r4, r0
    f70c:	e5803000 	str	r3, [r0]
    f710:	0a000004 	beq	f728 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x30>
    f714:	e1a00005 	mov	r0, r5
    f718:	eb002896 	bl	19978 <CPartitionManager::~CPartitionManager()>
    f71c:	e1a00005 	mov	r0, r5
    f720:	e3a01024 	mov	r1, #36	; 0x24
    f724:	eb004822 	bl	217b4 <operator delete(void*, unsigned int)>
    f728:	e3a03000 	mov	r3, #0
    f72c:	e5945014 	ldr	r5, [r4, #20]
    f730:	e5843028 	str	r3, [r4, #40]	; 0x28
    f734:	e1550003 	cmp	r5, r3
    f738:	0a000004 	beq	f750 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x58>
    f73c:	e1a00005 	mov	r0, r5
    f740:	ebfffa1c 	bl	dfb8 <CUSBEndpoint::~CUSBEndpoint()>
    f744:	e1a00005 	mov	r0, r5
    f748:	e3a01014 	mov	r1, #20
    f74c:	eb004818 	bl	217b4 <operator delete(void*, unsigned int)>
    f750:	e3a03000 	mov	r3, #0
    f754:	e5945010 	ldr	r5, [r4, #16]
    f758:	e5843014 	str	r3, [r4, #20]
    f75c:	e1550003 	cmp	r5, r3
    f760:	0a000004 	beq	f778 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x80>
    f764:	e1a00005 	mov	r0, r5
    f768:	ebfffa12 	bl	dfb8 <CUSBEndpoint::~CUSBEndpoint()>
    f76c:	e1a00005 	mov	r0, r5
    f770:	e3a01014 	mov	r1, #20
    f774:	eb00480e 	bl	217b4 <operator delete(void*, unsigned int)>
    f778:	e3a03000 	mov	r3, #0
    f77c:	e1a00004 	mov	r0, r4
    f780:	e5843010 	str	r3, [r4, #16]
    f784:	eb0012a5 	bl	14220 <CUSBFunction::~CUSBFunction()>
    f788:	e1a00004 	mov	r0, r4
    f78c:	e8bd8070 	pop	{r4, r5, r6, pc}
    f790:	00024228 	.word	0x00024228

0000f794 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()>:
    f794:	e92d4010 	push	{r4, lr}
    f798:	e1a04000 	mov	r4, r0
    f79c:	ebffffd5 	bl	f6f8 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()>
    f7a0:	e1a00004 	mov	r0, r4
    f7a4:	e3a01030 	mov	r1, #48	; 0x30
    f7a8:	eb004801 	bl	217b4 <operator delete(void*, unsigned int)>
    f7ac:	e1a00004 	mov	r0, r4
    f7b0:	e8bd8010 	pop	{r4, pc}

0000f7b4 <CUSBBulkOnlyMassStorageDevice::CUSBBulkOnlyMassStorageDevice(CUSBFunction*)>:
    f7b4:	e92d4010 	push	{r4, lr}
    f7b8:	e1a04000 	mov	r4, r0
    f7bc:	eb0012e5 	bl	14358 <CUSBFunction::CUSBFunction(CUSBFunction*)>
    f7c0:	e3a03000 	mov	r3, #0
    f7c4:	e3a00000 	mov	r0, #0
    f7c8:	e3a01000 	mov	r1, #0
    f7cc:	e59f2020 	ldr	r2, [pc, #32]	; f7f4 <CUSBBulkOnlyMassStorageDevice::CUSBBulkOnlyMassStorageDevice(CUSBFunction*)+0x40>
    f7d0:	e1c402f0 	strd	r0, [r4, #32]
    f7d4:	e5842000 	str	r2, [r4]
    f7d8:	e5843010 	str	r3, [r4, #16]
    f7dc:	e5843014 	str	r3, [r4, #20]
    f7e0:	e5843018 	str	r3, [r4, #24]
    f7e4:	e584301c 	str	r3, [r4, #28]
    f7e8:	e5843028 	str	r3, [r4, #40]	; 0x28
    f7ec:	e1a00004 	mov	r0, r4
    f7f0:	e8bd8010 	pop	{r4, pc}
    f7f4:	00024228 	.word	0x00024228

0000f7f8 <CUSBBulkOnlyMassStorageDevice::GetCapacity() const>:
    f7f8:	e590001c 	ldr	r0, [r0, #28]
    f7fc:	e12fff1e 	bx	lr

0000f800 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>:
    f800:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    f804:	e2519000 	subs	r9, r1, #0
    f808:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    f80c:	e1a04000 	mov	r4, r0
    f810:	e1a08002 	mov	r8, r2
    f814:	e1a07003 	mov	r7, r3
    f818:	e59d5058 	ldr	r5, [sp, #88]	; 0x58
    f81c:	e5dd605c 	ldrb	r6, [sp, #92]	; 0x5c
    f820:	0a000066 	beq	f9c0 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x1c0>
    f824:	e2483006 	sub	r3, r8, #6
    f828:	e353000a 	cmp	r3, #10
    f82c:	8a000054 	bhi	f984 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x184>
    f830:	e2973000 	adds	r3, r7, #0
    f834:	13a03001 	movne	r3, #1
    f838:	e3550000 	cmp	r5, #0
    f83c:	03833001 	orreq	r3, r3, #1
    f840:	e3530000 	cmp	r3, #0
    f844:	0a000053 	beq	f998 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x198>
    f848:	e3a0201f 	mov	r2, #31
    f84c:	e3a01000 	mov	r1, #0
    f850:	e28d0018 	add	r0, sp, #24
    f854:	eb004364 	bl	205ec <memset>
    f858:	e3560000 	cmp	r6, #0
    f85c:	13a0e080 	movne	lr, #128	; 0x80
    f860:	03a0e000 	moveq	lr, #0
    f864:	e5dd0026 	ldrb	r0, [sp, #38]	; 0x26
    f868:	e5943018 	ldr	r3, [r4, #24]
    f86c:	e3c0201f 	bic	r2, r0, #31
    f870:	e5ddc025 	ldrb	ip, [sp, #37]	; 0x25
    f874:	e208001f 	and	r0, r8, #31
    f878:	e2833001 	add	r3, r3, #1
    f87c:	e1800002 	orr	r0, r0, r2
    f880:	e1a02008 	mov	r2, r8
    f884:	e59f81f8 	ldr	r8, [pc, #504]	; fa84 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x284>
    f888:	e5843018 	str	r3, [r4, #24]
    f88c:	e3ccc00f 	bic	ip, ip, #15
    f890:	e1a01009 	mov	r1, r9
    f894:	e5cd0026 	strb	r0, [sp, #38]	; 0x26
    f898:	e28d0027 	add	r0, sp, #39	; 0x27
    f89c:	e58d301c 	str	r3, [sp, #28]
    f8a0:	e5cdc025 	strb	ip, [sp, #37]	; 0x25
    f8a4:	e5cde024 	strb	lr, [sp, #36]	; 0x24
    f8a8:	e58d8018 	str	r8, [sp, #24]
    f8ac:	e58d5020 	str	r5, [sp, #32]
    f8b0:	eb0044bf 	bl	20bb4 <memcpy>
    f8b4:	e1a00004 	mov	r0, r4
    f8b8:	eb001333 	bl	1458c <CUSBFunction::GetHost() const>
    f8bc:	e2508000 	subs	r8, r0, #0
    f8c0:	0a000039 	beq	f9ac <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x1ac>
    f8c4:	e3a09000 	mov	r9, #0
    f8c8:	e5941014 	ldr	r1, [r4, #20]
    f8cc:	e28d2018 	add	r2, sp, #24
    f8d0:	e58d9000 	str	r9, [sp]
    f8d4:	e3a0301f 	mov	r3, #31
    f8d8:	e1a00008 	mov	r0, r8
    f8dc:	ebfffa9f 	bl	e360 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
    f8e0:	e1500009 	cmp	r0, r9
    f8e4:	ba000058 	blt	fa4c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x24c>
    f8e8:	e3550000 	cmp	r5, #0
    f8ec:	0a00000a 	beq	f91c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x11c>
    f8f0:	e5940010 	ldr	r0, [r4, #16]
    f8f4:	e3560000 	cmp	r6, #0
    f8f8:	e5941014 	ldr	r1, [r4, #20]
    f8fc:	e1a03005 	mov	r3, r5
    f900:	11a01000 	movne	r1, r0
    f904:	e58d9000 	str	r9, [sp]
    f908:	e1a02007 	mov	r2, r7
    f90c:	e1a00008 	mov	r0, r8
    f910:	ebfffa92 	bl	e360 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
    f914:	e2505000 	subs	r5, r0, #0
    f918:	ba000052 	blt	fa68 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x268>
    f91c:	e3a03000 	mov	r3, #0
    f920:	e5941010 	ldr	r1, [r4, #16]
    f924:	e1a00008 	mov	r0, r8
    f928:	e58d3000 	str	r3, [sp]
    f92c:	e28d2008 	add	r2, sp, #8
    f930:	e3a0300d 	mov	r3, #13
    f934:	ebfffa89 	bl	e360 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
    f938:	e350000d 	cmp	r0, #13
    f93c:	1a000024 	bne	f9d4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x1d4>
    f940:	e59f3140 	ldr	r3, [pc, #320]	; fa88 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x288>
    f944:	e59d2008 	ldr	r2, [sp, #8]
    f948:	e1520003 	cmp	r2, r3
    f94c:	1a000027 	bne	f9f0 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x1f0>
    f950:	e5943018 	ldr	r3, [r4, #24]
    f954:	e59d200c 	ldr	r2, [sp, #12]
    f958:	e1520003 	cmp	r2, r3
    f95c:	1a00002a 	bne	fa0c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x20c>
    f960:	e5dd3014 	ldrb	r3, [sp, #20]
    f964:	e3530000 	cmp	r3, #0
    f968:	1a00002e 	bne	fa28 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x228>
    f96c:	e59d3010 	ldr	r3, [sp, #16]
    f970:	e3530000 	cmp	r3, #0
    f974:	1a00002d 	bne	fa30 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x230>
    f978:	e1a00005 	mov	r0, r5
    f97c:	e28dd03c 	add	sp, sp, #60	; 0x3c
    f980:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    f984:	e59f2100 	ldr	r2, [pc, #256]	; fa8c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x28c>
    f988:	e59f1100 	ldr	r1, [pc, #256]	; fa90 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x290>
    f98c:	e59f0100 	ldr	r0, [pc, #256]	; fa94 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x294>
    f990:	eb0029ef 	bl	1a154 <assertion_failed>
    f994:	eaffffa5 	b	f830 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x30>
    f998:	e59f20f8 	ldr	r2, [pc, #248]	; fa98 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x298>
    f99c:	e59f10ec 	ldr	r1, [pc, #236]	; fa90 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x290>
    f9a0:	e59f00f4 	ldr	r0, [pc, #244]	; fa9c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x29c>
    f9a4:	eb0029ea 	bl	1a154 <assertion_failed>
    f9a8:	eaffffa6 	b	f848 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x48>
    f9ac:	e59f20ec 	ldr	r2, [pc, #236]	; faa0 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2a0>
    f9b0:	e59f10d8 	ldr	r1, [pc, #216]	; fa90 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x290>
    f9b4:	e59f00e8 	ldr	r0, [pc, #232]	; faa4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2a4>
    f9b8:	eb0029e5 	bl	1a154 <assertion_failed>
    f9bc:	eaffffc0 	b	f8c4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0xc4>
    f9c0:	e59f20e0 	ldr	r2, [pc, #224]	; faa8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2a8>
    f9c4:	e59f10c4 	ldr	r1, [pc, #196]	; fa90 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x290>
    f9c8:	e59f00dc 	ldr	r0, [pc, #220]	; faac <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2ac>
    f9cc:	eb0029e0 	bl	1a154 <assertion_failed>
    f9d0:	eaffff93 	b	f824 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x24>
    f9d4:	eb0033d1 	bl	1c920 <CLogger::Get()>
    f9d8:	e59f30d0 	ldr	r3, [pc, #208]	; fab0 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2b0>
    f9dc:	e3a02001 	mov	r2, #1
    f9e0:	e59f10cc 	ldr	r1, [pc, #204]	; fab4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2b4>
    f9e4:	eb003576 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f9e8:	e3e05000 	mvn	r5, #0
    f9ec:	eaffffe1 	b	f978 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x178>
    f9f0:	eb0033ca 	bl	1c920 <CLogger::Get()>
    f9f4:	e59f30bc 	ldr	r3, [pc, #188]	; fab8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2b8>
    f9f8:	e3a02001 	mov	r2, #1
    f9fc:	e59f10b0 	ldr	r1, [pc, #176]	; fab4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2b4>
    fa00:	eb00356f 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fa04:	e3e05000 	mvn	r5, #0
    fa08:	eaffffda 	b	f978 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x178>
    fa0c:	eb0033c3 	bl	1c920 <CLogger::Get()>
    fa10:	e59f30a4 	ldr	r3, [pc, #164]	; fabc <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2bc>
    fa14:	e3a02001 	mov	r2, #1
    fa18:	e59f1094 	ldr	r1, [pc, #148]	; fab4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2b4>
    fa1c:	eb003568 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fa20:	e3e05000 	mvn	r5, #0
    fa24:	eaffffd3 	b	f978 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x178>
    fa28:	e3e05000 	mvn	r5, #0
    fa2c:	eaffffd1 	b	f978 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x178>
    fa30:	eb0033ba 	bl	1c920 <CLogger::Get()>
    fa34:	e59f3084 	ldr	r3, [pc, #132]	; fac0 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2c0>
    fa38:	e3a02001 	mov	r2, #1
    fa3c:	e59f1070 	ldr	r1, [pc, #112]	; fab4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2b4>
    fa40:	eb00355f 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fa44:	e3e05000 	mvn	r5, #0
    fa48:	eaffffca 	b	f978 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x178>
    fa4c:	eb0033b3 	bl	1c920 <CLogger::Get()>
    fa50:	e59f306c 	ldr	r3, [pc, #108]	; fac4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2c4>
    fa54:	e3a02001 	mov	r2, #1
    fa58:	e59f1054 	ldr	r1, [pc, #84]	; fab4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2b4>
    fa5c:	eb003558 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fa60:	e3e05000 	mvn	r5, #0
    fa64:	eaffffc3 	b	f978 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x178>
    fa68:	eb0033ac 	bl	1c920 <CLogger::Get()>
    fa6c:	e59f3054 	ldr	r3, [pc, #84]	; fac8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2c8>
    fa70:	e3a02001 	mov	r2, #1
    fa74:	e59f1038 	ldr	r1, [pc, #56]	; fab4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2b4>
    fa78:	eb003551 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fa7c:	e3e05000 	mvn	r5, #0
    fa80:	eaffffbc 	b	f978 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x178>
    fa84:	43425355 	.word	0x43425355
    fa88:	53425355 	.word	0x53425355
    fa8c:	00000216 	.word	0x00000216
    fa90:	0002424c 	.word	0x0002424c
    fa94:	00024270 	.word	0x00024270
    fa98:	00000217 	.word	0x00000217
    fa9c:	00024294 	.word	0x00024294
    faa0:	00000226 	.word	0x00000226
    faa4:	00024008 	.word	0x00024008
    faa8:	00000215 	.word	0x00000215
    faac:	00024260 	.word	0x00024260
    fab0:	000242e0 	.word	0x000242e0
    fab4:	00024244 	.word	0x00024244
    fab8:	000242f4 	.word	0x000242f4
    fabc:	0002430c 	.word	0x0002430c
    fac0:	00024320 	.word	0x00024320
    fac4:	000242b4 	.word	0x000242b4
    fac8:	000242c8 	.word	0x000242c8

0000facc <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)>:
    facc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    fad0:	e2518000 	subs	r8, r1, #0
    fad4:	e24dd018 	sub	sp, sp, #24
    fad8:	e1a05000 	mov	r5, r0
    fadc:	e1a04002 	mov	r4, r2
    fae0:	0a000034 	beq	fbb8 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xec>
    fae4:	e1c502d0 	ldrd	r0, [r5, #32]
    fae8:	e3a03000 	mov	r3, #0
    faec:	e59f20f4 	ldr	r2, [pc, #244]	; fbe8 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0x11c>
    faf0:	e0033001 	and	r3, r3, r1
    faf4:	e0022000 	and	r2, r2, r0
    faf8:	e1923003 	orrs	r3, r2, r3
    fafc:	e3e06000 	mvn	r6, #0
    fb00:	13a03001 	movne	r3, #1
    fb04:	03a03000 	moveq	r3, #0
    fb08:	e59f70d8 	ldr	r7, [pc, #216]	; fbe8 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0x11c>
    fb0c:	e1510007 	cmp	r1, r7
    fb10:	01500006 	cmpeq	r0, r6
    fb14:	83833001 	orrhi	r3, r3, #1
    fb18:	e3530000 	cmp	r3, #0
    fb1c:	1a000021 	bne	fba8 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xdc>
    fb20:	e1a0cb84 	lsl	ip, r4, #23
    fb24:	e1a0cbac 	lsr	ip, ip, #23
    fb28:	e1a034a0 	lsr	r3, r0, #9
    fb2c:	e35c0000 	cmp	ip, #0
    fb30:	e1833b81 	orr	r3, r3, r1, lsl #23
    fb34:	1a00001b 	bne	fba8 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xdc>
    fb38:	e3a06001 	mov	r6, #1
    fb3c:	e3a0e028 	mov	lr, #40	; 0x28
    fb40:	e1a014a4 	lsr	r1, r4, #9
    fb44:	e6bf2f33 	rev	r2, r3
    fb48:	e6bf1fb1 	rev16	r1, r1
    fb4c:	e6ff1071 	uxth	r1, r1
    fb50:	e1cd20be 	strh	r2, [sp, #14]
    fb54:	e1a02822 	lsr	r2, r2, #16
    fb58:	e1a00005 	mov	r0, r5
    fb5c:	e1cd21b0 	strh	r2, [sp, #16]
    fb60:	e1a05421 	lsr	r5, r1, #8
    fb64:	e5cd1013 	strb	r1, [sp, #19]
    fb68:	e58d4000 	str	r4, [sp]
    fb6c:	e1a03008 	mov	r3, r8
    fb70:	e58d6004 	str	r6, [sp, #4]
    fb74:	e3a0200a 	mov	r2, #10
    fb78:	e28d100c 	add	r1, sp, #12
    fb7c:	e5cdc00d 	strb	ip, [sp, #13]
    fb80:	e5cdc012 	strb	ip, [sp, #18]
    fb84:	e5cdc015 	strb	ip, [sp, #21]
    fb88:	e5cd5014 	strb	r5, [sp, #20]
    fb8c:	e5cde00c 	strb	lr, [sp, #12]
    fb90:	ebffff1a 	bl	f800 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
    fb94:	e1500004 	cmp	r0, r4
    fb98:	1a00000b 	bne	fbcc <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0x100>
    fb9c:	e1a00004 	mov	r0, r4
    fba0:	e28dd018 	add	sp, sp, #24
    fba4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    fba8:	e3e04000 	mvn	r4, #0
    fbac:	e1a00004 	mov	r0, r4
    fbb0:	e28dd018 	add	sp, sp, #24
    fbb4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    fbb8:	e59f202c 	ldr	r2, [pc, #44]	; fbec <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0x120>
    fbbc:	e59f102c 	ldr	r1, [pc, #44]	; fbf0 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0x124>
    fbc0:	e59f002c 	ldr	r0, [pc, #44]	; fbf4 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0x128>
    fbc4:	eb002962 	bl	1a154 <assertion_failed>
    fbc8:	eaffffc5 	b	fae4 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0x18>
    fbcc:	eb003353 	bl	1c920 <CLogger::Get()>
    fbd0:	e1a02006 	mov	r2, r6
    fbd4:	e59f301c 	ldr	r3, [pc, #28]	; fbf8 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0x12c>
    fbd8:	e59f101c 	ldr	r1, [pc, #28]	; fbfc <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0x130>
    fbdc:	eb0034f8 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fbe0:	e3e04000 	mvn	r4, #0
    fbe4:	eaffffec 	b	fb9c <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xd0>
    fbe8:	000001ff 	.word	0x000001ff
    fbec:	000001ca 	.word	0x000001ca
    fbf0:	0002424c 	.word	0x0002424c
    fbf4:	000242a4 	.word	0x000242a4
    fbf8:	00024338 	.word	0x00024338
    fbfc:	00024244 	.word	0x00024244

0000fc00 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)>:
    fc00:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    fc04:	e2518000 	subs	r8, r1, #0
    fc08:	e24dd018 	sub	sp, sp, #24
    fc0c:	e1a05000 	mov	r5, r0
    fc10:	e1a04002 	mov	r4, r2
    fc14:	0a000032 	beq	fce4 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xe4>
    fc18:	e1c502d0 	ldrd	r0, [r5, #32]
    fc1c:	e3a03000 	mov	r3, #0
    fc20:	e59f20ec 	ldr	r2, [pc, #236]	; fd14 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0x114>
    fc24:	e0033001 	and	r3, r3, r1
    fc28:	e0022000 	and	r2, r2, r0
    fc2c:	e1923003 	orrs	r3, r2, r3
    fc30:	e3e06000 	mvn	r6, #0
    fc34:	13a03001 	movne	r3, #1
    fc38:	03a03000 	moveq	r3, #0
    fc3c:	e59f70d0 	ldr	r7, [pc, #208]	; fd14 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0x114>
    fc40:	e1510007 	cmp	r1, r7
    fc44:	01500006 	cmpeq	r0, r6
    fc48:	83833001 	orrhi	r3, r3, #1
    fc4c:	e3530000 	cmp	r3, #0
    fc50:	1a000020 	bne	fcd8 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xd8>
    fc54:	e1a0cb84 	lsl	ip, r4, #23
    fc58:	e1a0cbac 	lsr	ip, ip, #23
    fc5c:	e1a034a0 	lsr	r3, r0, #9
    fc60:	e35c0000 	cmp	ip, #0
    fc64:	e1833b81 	orr	r3, r3, r1, lsl #23
    fc68:	1a00001a 	bne	fcd8 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xd8>
    fc6c:	e3a0e008 	mov	lr, #8
    fc70:	e3a0602a 	mov	r6, #42	; 0x2a
    fc74:	e1a014a4 	lsr	r1, r4, #9
    fc78:	e6bf2f33 	rev	r2, r3
    fc7c:	e6bf1fb1 	rev16	r1, r1
    fc80:	e6ff1071 	uxth	r1, r1
    fc84:	e1cd20be 	strh	r2, [sp, #14]
    fc88:	e1a02822 	lsr	r2, r2, #16
    fc8c:	e1a00005 	mov	r0, r5
    fc90:	e1cd21b0 	strh	r2, [sp, #16]
    fc94:	e1a05e31 	lsr	r5, r1, lr
    fc98:	e5cd1013 	strb	r1, [sp, #19]
    fc9c:	e88d1010 	stm	sp, {r4, ip}
    fca0:	e1a03008 	mov	r3, r8
    fca4:	e3a0200a 	mov	r2, #10
    fca8:	e28d100c 	add	r1, sp, #12
    fcac:	e5cdc012 	strb	ip, [sp, #18]
    fcb0:	e5cdc015 	strb	ip, [sp, #21]
    fcb4:	e5cd5014 	strb	r5, [sp, #20]
    fcb8:	e5cd600c 	strb	r6, [sp, #12]
    fcbc:	e5cde00d 	strb	lr, [sp, #13]
    fcc0:	ebfffece 	bl	f800 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
    fcc4:	e3500000 	cmp	r0, #0
    fcc8:	a1a00004 	movge	r0, r4
    fccc:	ba000009 	blt	fcf8 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xf8>
    fcd0:	e28dd018 	add	sp, sp, #24
    fcd4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    fcd8:	e3e00000 	mvn	r0, #0
    fcdc:	e28dd018 	add	sp, sp, #24
    fce0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    fce4:	e59f202c 	ldr	r2, [pc, #44]	; fd18 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0x118>
    fce8:	e59f102c 	ldr	r1, [pc, #44]	; fd1c <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0x11c>
    fcec:	e59f002c 	ldr	r0, [pc, #44]	; fd20 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0x120>
    fcf0:	eb002917 	bl	1a154 <assertion_failed>
    fcf4:	eaffffc7 	b	fc18 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0x18>
    fcf8:	eb003308 	bl	1c920 <CLogger::Get()>
    fcfc:	e59f3020 	ldr	r3, [pc, #32]	; fd24 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0x124>
    fd00:	e3a02001 	mov	r2, #1
    fd04:	e59f101c 	ldr	r1, [pc, #28]	; fd28 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0x128>
    fd08:	eb0034ad 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fd0c:	e3e00000 	mvn	r0, #0
    fd10:	eaffffee 	b	fcd0 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xd0>
    fd14:	000001ff 	.word	0x000001ff
    fd18:	000001ef 	.word	0x000001ef
    fd1c:	0002424c 	.word	0x0002424c
    fd20:	000242a4 	.word	0x000242a4
    fd24:	00024348 	.word	0x00024348
    fd28:	00024244 	.word	0x00024244

0000fd2c <CUSBBulkOnlyMassStorageDevice::Reset()>:
    fd2c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    fd30:	e24dd014 	sub	sp, sp, #20
    fd34:	e1a05000 	mov	r5, r0
    fd38:	eb001213 	bl	1458c <CUSBFunction::GetHost() const>
    fd3c:	e2506000 	subs	r6, r0, #0
    fd40:	0a00002e 	beq	fe00 <CUSBBulkOnlyMassStorageDevice::Reset()+0xd4>
    fd44:	e1a00005 	mov	r0, r5
    fd48:	eb0011fe 	bl	14548 <CUSBFunction::GetEndpoint0() const>
    fd4c:	e3a04000 	mov	r4, #0
    fd50:	e1a01000 	mov	r1, r0
    fd54:	e58d400c 	str	r4, [sp, #12]
    fd58:	e58d4008 	str	r4, [sp, #8]
    fd5c:	e58d4004 	str	r4, [sp, #4]
    fd60:	e58d4000 	str	r4, [sp]
    fd64:	e3a030ff 	mov	r3, #255	; 0xff
    fd68:	e3a02021 	mov	r2, #33	; 0x21
    fd6c:	e1a00006 	mov	r0, r6
    fd70:	ebfff914 	bl	e1c8 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    fd74:	e1500004 	cmp	r0, r4
    fd78:	ba000025 	blt	fe14 <CUSBBulkOnlyMassStorageDevice::Reset()+0xe8>
    fd7c:	e1a00005 	mov	r0, r5
    fd80:	eb0011f0 	bl	14548 <CUSBFunction::GetEndpoint0() const>
    fd84:	e3a07001 	mov	r7, #1
    fd88:	e1a01000 	mov	r1, r0
    fd8c:	e58d400c 	str	r4, [sp, #12]
    fd90:	e58d4008 	str	r4, [sp, #8]
    fd94:	e88d0090 	stm	sp, {r4, r7}
    fd98:	e1a03007 	mov	r3, r7
    fd9c:	e3a02002 	mov	r2, #2
    fda0:	e1a00006 	mov	r0, r6
    fda4:	ebfff907 	bl	e1c8 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    fda8:	e3500000 	cmp	r0, #0
    fdac:	ba00001f 	blt	fe30 <CUSBBulkOnlyMassStorageDevice::Reset()+0x104>
    fdb0:	e1a00005 	mov	r0, r5
    fdb4:	eb0011e3 	bl	14548 <CUSBFunction::GetEndpoint0() const>
    fdb8:	e3a02002 	mov	r2, #2
    fdbc:	e1a01000 	mov	r1, r0
    fdc0:	e58d400c 	str	r4, [sp, #12]
    fdc4:	e58d4008 	str	r4, [sp, #8]
    fdc8:	e58d4000 	str	r4, [sp]
    fdcc:	e1a03007 	mov	r3, r7
    fdd0:	e1a00006 	mov	r0, r6
    fdd4:	e58d2004 	str	r2, [sp, #4]
    fdd8:	ebfff8fa 	bl	e1c8 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    fddc:	e3500000 	cmp	r0, #0
    fde0:	ba000019 	blt	fe4c <CUSBBulkOnlyMassStorageDevice::Reset()+0x120>
    fde4:	e5950010 	ldr	r0, [r5, #16]
    fde8:	ebfff8dd 	bl	e164 <CUSBEndpoint::ResetPID()>
    fdec:	e5950014 	ldr	r0, [r5, #20]
    fdf0:	ebfff8db 	bl	e164 <CUSBEndpoint::ResetPID()>
    fdf4:	e1a00004 	mov	r0, r4
    fdf8:	e28dd014 	add	sp, sp, #20
    fdfc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    fe00:	e59f2060 	ldr	r2, [pc, #96]	; fe68 <CUSBBulkOnlyMassStorageDevice::Reset()+0x13c>
    fe04:	e59f1060 	ldr	r1, [pc, #96]	; fe6c <CUSBBulkOnlyMassStorageDevice::Reset()+0x140>
    fe08:	e59f0060 	ldr	r0, [pc, #96]	; fe70 <CUSBBulkOnlyMassStorageDevice::Reset()+0x144>
    fe0c:	eb0028d0 	bl	1a154 <assertion_failed>
    fe10:	eaffffcb 	b	fd44 <CUSBBulkOnlyMassStorageDevice::Reset()+0x18>
    fe14:	eb0032c1 	bl	1c920 <CLogger::Get()>
    fe18:	e59f3054 	ldr	r3, [pc, #84]	; fe74 <CUSBBulkOnlyMassStorageDevice::Reset()+0x148>
    fe1c:	e3a02004 	mov	r2, #4
    fe20:	e59f1050 	ldr	r1, [pc, #80]	; fe78 <CUSBBulkOnlyMassStorageDevice::Reset()+0x14c>
    fe24:	eb003466 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fe28:	e3e00000 	mvn	r0, #0
    fe2c:	eafffff1 	b	fdf8 <CUSBBulkOnlyMassStorageDevice::Reset()+0xcc>
    fe30:	eb0032ba 	bl	1c920 <CLogger::Get()>
    fe34:	e59f3040 	ldr	r3, [pc, #64]	; fe7c <CUSBBulkOnlyMassStorageDevice::Reset()+0x150>
    fe38:	e3a02004 	mov	r2, #4
    fe3c:	e59f1034 	ldr	r1, [pc, #52]	; fe78 <CUSBBulkOnlyMassStorageDevice::Reset()+0x14c>
    fe40:	eb00345f 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fe44:	e3e00000 	mvn	r0, #0
    fe48:	eaffffea 	b	fdf8 <CUSBBulkOnlyMassStorageDevice::Reset()+0xcc>
    fe4c:	eb0032b3 	bl	1c920 <CLogger::Get()>
    fe50:	e59f3028 	ldr	r3, [pc, #40]	; fe80 <CUSBBulkOnlyMassStorageDevice::Reset()+0x154>
    fe54:	e3a02004 	mov	r2, #4
    fe58:	e59f1018 	ldr	r1, [pc, #24]	; fe78 <CUSBBulkOnlyMassStorageDevice::Reset()+0x14c>
    fe5c:	eb003458 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fe60:	e3e00000 	mvn	r0, #0
    fe64:	eaffffe3 	b	fdf8 <CUSBBulkOnlyMassStorageDevice::Reset()+0xcc>
    fe68:	00000265 	.word	0x00000265
    fe6c:	0002424c 	.word	0x0002424c
    fe70:	00024008 	.word	0x00024008
    fe74:	00024358 	.word	0x00024358
    fe78:	00024244 	.word	0x00024244
    fe7c:	0002436c 	.word	0x0002436c
    fe80:	0002438c 	.word	0x0002438c

0000fe84 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)>:
    fe84:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    fe88:	e1a06002 	mov	r6, r2
    fe8c:	e1a07000 	mov	r7, r0
    fe90:	e1a08001 	mov	r8, r1
    fe94:	e1a09002 	mov	r9, r2
    fe98:	e3a05004 	mov	r5, #4
    fe9c:	e1a02006 	mov	r2, r6
    fea0:	e1a01008 	mov	r1, r8
    fea4:	e1a00007 	mov	r0, r7
    fea8:	ebffff07 	bl	facc <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)>
    feac:	e1500006 	cmp	r0, r6
    feb0:	e1a04000 	mov	r4, r0
    feb4:	1a000001 	bne	fec0 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)+0x3c>
    feb8:	e1a00009 	mov	r0, r9
    febc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    fec0:	e1a00007 	mov	r0, r7
    fec4:	ebffff98 	bl	fd2c <CUSBBulkOnlyMassStorageDevice::Reset()>
    fec8:	e3500000 	cmp	r0, #0
    fecc:	1a000004 	bne	fee4 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)+0x60>
    fed0:	e2555001 	subs	r5, r5, #1
    fed4:	1afffff0 	bne	fe9c <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)+0x18>
    fed8:	e1a09004 	mov	r9, r4
    fedc:	e1a00009 	mov	r0, r9
    fee0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    fee4:	e1a09000 	mov	r9, r0
    fee8:	eafffff2 	b	feb8 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)+0x34>

0000feec <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)>:
    feec:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    fef0:	e1a06002 	mov	r6, r2
    fef4:	e1a07000 	mov	r7, r0
    fef8:	e1a08001 	mov	r8, r1
    fefc:	e1a09002 	mov	r9, r2
    ff00:	e3a05004 	mov	r5, #4
    ff04:	e1a02006 	mov	r2, r6
    ff08:	e1a01008 	mov	r1, r8
    ff0c:	e1a00007 	mov	r0, r7
    ff10:	ebffff3a 	bl	fc00 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)>
    ff14:	e1500006 	cmp	r0, r6
    ff18:	e1a04000 	mov	r4, r0
    ff1c:	1a000001 	bne	ff28 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)+0x3c>
    ff20:	e1a00009 	mov	r0, r9
    ff24:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    ff28:	e1a00007 	mov	r0, r7
    ff2c:	ebffff7e 	bl	fd2c <CUSBBulkOnlyMassStorageDevice::Reset()>
    ff30:	e3500000 	cmp	r0, #0
    ff34:	1a000004 	bne	ff4c <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)+0x60>
    ff38:	e2555001 	subs	r5, r5, #1
    ff3c:	1afffff0 	bne	ff04 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)+0x18>
    ff40:	e1a09004 	mov	r9, r4
    ff44:	e1a00009 	mov	r0, r9
    ff48:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    ff4c:	e1a09000 	mov	r9, r0
    ff50:	eafffff2 	b	ff20 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)+0x34>

0000ff54 <CUSBBulkOnlyMassStorageDevice::Configure()>:
    ff54:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ff58:	e24dd064 	sub	sp, sp, #100	; 0x64
    ff5c:	e1a05000 	mov	r5, r0
    ff60:	eb001158 	bl	144c8 <CUSBFunction::GetNumEndpoints() const>
    ff64:	e3500001 	cmp	r0, #1
    ff68:	c3a06005 	movgt	r6, #5
    ff6c:	c3a07014 	movgt	r7, #20
    ff70:	ca000004 	bgt	ff88 <CUSBBulkOnlyMassStorageDevice::Configure()+0x34>
    ff74:	ea0000d5 	b	102d0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x37c>
    ff78:	e5d43003 	ldrb	r3, [r4, #3]
    ff7c:	e203303f 	and	r3, r3, #63	; 0x3f
    ff80:	e3530002 	cmp	r3, #2
    ff84:	0a000091 	beq	101d0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x27c>
    ff88:	e1a01006 	mov	r1, r6
    ff8c:	e1a00005 	mov	r0, r5
    ff90:	eb0011bf 	bl	14694 <CUSBFunction::GetDescriptor(unsigned char)>
    ff94:	e2504000 	subs	r4, r0, #0
    ff98:	1afffff6 	bne	ff78 <CUSBBulkOnlyMassStorageDevice::Configure()+0x24>
    ff9c:	e5953010 	ldr	r3, [r5, #16]
    ffa0:	e1a00005 	mov	r0, r5
    ffa4:	e3530000 	cmp	r3, #0
    ffa8:	0a0000a1 	beq	10234 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2e0>
    ffac:	e5953014 	ldr	r3, [r5, #20]
    ffb0:	e3530000 	cmp	r3, #0
    ffb4:	0a00009e 	beq	10234 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2e0>
    ffb8:	eb001184 	bl	145d0 <CUSBFunction::Configure()>
    ffbc:	e2506000 	subs	r6, r0, #0
    ffc0:	0a000093 	beq	10214 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2c0>
    ffc4:	e3a0c024 	mov	ip, #36	; 0x24
    ffc8:	e3a06001 	mov	r6, #1
    ffcc:	e3a07012 	mov	r7, #18
    ffd0:	e58dc000 	str	ip, [sp]
    ffd4:	e58d6004 	str	r6, [sp, #4]
    ffd8:	e28d303c 	add	r3, sp, #60	; 0x3c
    ffdc:	e3a02006 	mov	r2, #6
    ffe0:	e28d100c 	add	r1, sp, #12
    ffe4:	e1a00005 	mov	r0, r5
    ffe8:	e5cd400d 	strb	r4, [sp, #13]
    ffec:	e5cd400e 	strb	r4, [sp, #14]
    fff0:	e5cd400f 	strb	r4, [sp, #15]
    fff4:	e5cd4011 	strb	r4, [sp, #17]
    fff8:	e5cdc010 	strb	ip, [sp, #16]
    fffc:	e5cd700c 	strb	r7, [sp, #12]
   10000:	ebfffdfe 	bl	f800 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   10004:	e3500024 	cmp	r0, #36	; 0x24
   10008:	1a0000a7 	bne	102ac <CUSBBulkOnlyMassStorageDevice::Configure()+0x358>
   1000c:	e5dd303c 	ldrb	r3, [sp, #60]	; 0x3c
   10010:	e213301f 	ands	r3, r3, #31
   10014:	1a00009a 	bne	10284 <CUSBBulkOnlyMassStorageDevice::Configure()+0x330>
   10018:	e1a04003 	mov	r4, r3
   1001c:	e3a06063 	mov	r6, #99	; 0x63
   10020:	e3a0a064 	mov	sl, #100	; 0x64
   10024:	e3a08006 	mov	r8, #6
   10028:	e3a0b003 	mov	fp, #3
   1002c:	ea000010 	b	10074 <CUSBBulkOnlyMassStorageDevice::Configure()+0x120>
   10030:	e3a09001 	mov	r9, #1
   10034:	e3a0c000 	mov	ip, #0
   10038:	e88d0280 	stm	sp, {r7, r9}
   1003c:	e28d3028 	add	r3, sp, #40	; 0x28
   10040:	e1a02008 	mov	r2, r8
   10044:	e28d101c 	add	r1, sp, #28
   10048:	e1a00005 	mov	r0, r5
   1004c:	e5cdb01c 	strb	fp, [sp, #28]
   10050:	e1cd41be 	strh	r4, [sp, #30]
   10054:	e5cd7020 	strb	r7, [sp, #32]
   10058:	e5cd4021 	strb	r4, [sp, #33]	; 0x21
   1005c:	e5cdc01d 	strb	ip, [sp, #29]
   10060:	ebfffde6 	bl	f800 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   10064:	e3500000 	cmp	r0, #0
   10068:	ba00009d 	blt	102e4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x390>
   1006c:	e2566001 	subs	r6, r6, #1
   10070:	0a0000aa 	beq	10320 <CUSBBulkOnlyMassStorageDevice::Configure()+0x3cc>
   10074:	eb00414d 	bl	205b0 <CTimer::Get()>
   10078:	e1a0000a 	mov	r0, sl
   1007c:	eb004112 	bl	204cc <CTimer::SimpleMsDelay(unsigned int)>
   10080:	e58d4004 	str	r4, [sp, #4]
   10084:	e58d4000 	str	r4, [sp]
   10088:	e3a03000 	mov	r3, #0
   1008c:	e1a02008 	mov	r2, r8
   10090:	e28d1014 	add	r1, sp, #20
   10094:	e1a00005 	mov	r0, r5
   10098:	e5cd4014 	strb	r4, [sp, #20]
   1009c:	e5cd4015 	strb	r4, [sp, #21]
   100a0:	e5cd4016 	strb	r4, [sp, #22]
   100a4:	e5cd4017 	strb	r4, [sp, #23]
   100a8:	e5cd4018 	strb	r4, [sp, #24]
   100ac:	e5cd4019 	strb	r4, [sp, #25]
   100b0:	ebfffdd2 	bl	f800 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   100b4:	e3500000 	cmp	r0, #0
   100b8:	baffffdc 	blt	10030 <CUSBBulkOnlyMassStorageDevice::Configure()+0xdc>
   100bc:	e3a02008 	mov	r2, #8
   100c0:	e3a00025 	mov	r0, #37	; 0x25
   100c4:	e3a06001 	mov	r6, #1
   100c8:	e3a0e000 	mov	lr, #0
   100cc:	e88d0044 	stm	sp, {r2, r6}
   100d0:	e5cd001c 	strb	r0, [sp, #28]
   100d4:	e28d3014 	add	r3, sp, #20
   100d8:	e28d101c 	add	r1, sp, #28
   100dc:	e3a0200a 	mov	r2, #10
   100e0:	e1a00005 	mov	r0, r5
   100e4:	e1cd41be 	strh	r4, [sp, #30]
   100e8:	e1cd42b0 	strh	r4, [sp, #32]
   100ec:	e1cd42b2 	strh	r4, [sp, #34]	; 0x22
   100f0:	e5cd4025 	strb	r4, [sp, #37]	; 0x25
   100f4:	e5cde01d 	strb	lr, [sp, #29]
   100f8:	e5cde024 	strb	lr, [sp, #36]	; 0x24
   100fc:	ebfffdbf 	bl	f800 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   10100:	e3500008 	cmp	r0, #8
   10104:	1a00008b 	bne	10338 <CUSBBulkOnlyMassStorageDevice::Configure()+0x3e4>
   10108:	e59d4018 	ldr	r4, [sp, #24]
   1010c:	e6bf4f34 	rev	r4, r4
   10110:	e3540c02 	cmp	r4, #512	; 0x200
   10114:	1a000079 	bne	10300 <CUSBBulkOnlyMassStorageDevice::Configure()+0x3ac>
   10118:	e59d3014 	ldr	r3, [sp, #20]
   1011c:	e6bf3f33 	rev	r3, r3
   10120:	e3730001 	cmn	r3, #1
   10124:	e585301c 	str	r3, [r5, #28]
   10128:	0a000096 	beq	10388 <CUSBBulkOnlyMassStorageDevice::Configure()+0x434>
   1012c:	e2833001 	add	r3, r3, #1
   10130:	e585301c 	str	r3, [r5, #28]
   10134:	eb0031f9 	bl	1c920 <CLogger::Get()>
   10138:	e595201c 	ldr	r2, [r5, #28]
   1013c:	e59f3260 	ldr	r3, [pc, #608]	; 103a4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x450>
   10140:	e1a025a2 	lsr	r2, r2, #11
   10144:	e59f125c 	ldr	r1, [pc, #604]	; 103a8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x454>
   10148:	e58d2000 	str	r2, [sp]
   1014c:	e59f4258 	ldr	r4, [pc, #600]	; 103ac <CUSBBulkOnlyMassStorageDevice::Configure()+0x458>
   10150:	e3a02004 	mov	r2, #4
   10154:	eb00339a 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10158:	e28d0028 	add	r0, sp, #40	; 0x28
   1015c:	eb00397c 	bl	1e754 <CString::CString()>
   10160:	e28d0028 	add	r0, sp, #40	; 0x28
   10164:	e5942000 	ldr	r2, [r4]
   10168:	e59f1240 	ldr	r1, [pc, #576]	; 103b0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x45c>
   1016c:	eb003d66 	bl	1f70c <CString::Format(char const*, ...)>
   10170:	e5953028 	ldr	r3, [r5, #40]	; 0x28
   10174:	e3530000 	cmp	r3, #0
   10178:	0a000003 	beq	1018c <CUSBBulkOnlyMassStorageDevice::Configure()+0x238>
   1017c:	e3a02f5f 	mov	r2, #380	; 0x17c
   10180:	e59f122c 	ldr	r1, [pc, #556]	; 103b4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x460>
   10184:	e59f022c 	ldr	r0, [pc, #556]	; 103b8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x464>
   10188:	eb0027f1 	bl	1a154 <assertion_failed>
   1018c:	e28d0028 	add	r0, sp, #40	; 0x28
   10190:	eb003985 	bl	1e7ac <CString::operator char const*() const>
   10194:	e1a07000 	mov	r7, r0
   10198:	e3a00024 	mov	r0, #36	; 0x24
   1019c:	eb004580 	bl	217a4 <operator new(unsigned int)>
   101a0:	e1a06000 	mov	r6, r0
   101a4:	e1a02007 	mov	r2, r7
   101a8:	e1a01005 	mov	r1, r5
   101ac:	eb0025e5 	bl	19948 <CPartitionManager::CPartitionManager(CDevice*, char const*)>
   101b0:	e5856028 	str	r6, [r5, #40]	; 0x28
   101b4:	e1a00006 	mov	r0, r6
   101b8:	eb002601 	bl	199c4 <CPartitionManager::Initialize()>
   101bc:	e2506000 	subs	r6, r0, #0
   101c0:	1a000063 	bne	10354 <CUSBBulkOnlyMassStorageDevice::Configure()+0x400>
   101c4:	e28d0028 	add	r0, sp, #40	; 0x28
   101c8:	eb00392e 	bl	1e688 <CString::~CString()>
   101cc:	ea000015 	b	10228 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2d4>
   101d0:	e1d430d2 	ldrsb	r3, [r4, #2]
   101d4:	e3530000 	cmp	r3, #0
   101d8:	ba00001b 	blt	1024c <CUSBBulkOnlyMassStorageDevice::Configure()+0x2f8>
   101dc:	e5953014 	ldr	r3, [r5, #20]
   101e0:	e1a00005 	mov	r0, r5
   101e4:	e3530000 	cmp	r3, #0
   101e8:	1a000011 	bne	10234 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2e0>
   101ec:	eb0010c5 	bl	14508 <CUSBFunction::GetDevice() const>
   101f0:	e1a09000 	mov	r9, r0
   101f4:	e1a00007 	mov	r0, r7
   101f8:	eb004569 	bl	217a4 <operator new(unsigned int)>
   101fc:	e1a08000 	mov	r8, r0
   10200:	e1a02004 	mov	r2, r4
   10204:	e1a01009 	mov	r1, r9
   10208:	ebfff6d8 	bl	dd70 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   1020c:	e5858014 	str	r8, [r5, #20]
   10210:	eaffff5c 	b	ff88 <CUSBBulkOnlyMassStorageDevice::Configure()+0x34>
   10214:	eb0031c1 	bl	1c920 <CLogger::Get()>
   10218:	e59f319c 	ldr	r3, [pc, #412]	; 103bc <CUSBBulkOnlyMassStorageDevice::Configure()+0x468>
   1021c:	e3a02001 	mov	r2, #1
   10220:	e59f1180 	ldr	r1, [pc, #384]	; 103a8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x454>
   10224:	eb003366 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10228:	e1a00006 	mov	r0, r6
   1022c:	e28dd064 	add	sp, sp, #100	; 0x64
   10230:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10234:	e3a06000 	mov	r6, #0
   10238:	e59f1168 	ldr	r1, [pc, #360]	; 103a8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x454>
   1023c:	eb001127 	bl	146e0 <CUSBFunction::ConfigurationError(char const*) const>
   10240:	e1a00006 	mov	r0, r6
   10244:	e28dd064 	add	sp, sp, #100	; 0x64
   10248:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1024c:	e5953010 	ldr	r3, [r5, #16]
   10250:	e1a00005 	mov	r0, r5
   10254:	e3530000 	cmp	r3, #0
   10258:	1afffff5 	bne	10234 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2e0>
   1025c:	eb0010a9 	bl	14508 <CUSBFunction::GetDevice() const>
   10260:	e1a09000 	mov	r9, r0
   10264:	e1a00007 	mov	r0, r7
   10268:	eb00454d 	bl	217a4 <operator new(unsigned int)>
   1026c:	e1a08000 	mov	r8, r0
   10270:	e1a02004 	mov	r2, r4
   10274:	e1a01009 	mov	r1, r9
   10278:	ebfff6bc 	bl	dd70 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   1027c:	e5858010 	str	r8, [r5, #16]
   10280:	eaffff40 	b	ff88 <CUSBBulkOnlyMassStorageDevice::Configure()+0x34>
   10284:	eb0031a5 	bl	1c920 <CLogger::Get()>
   10288:	e5dd303c 	ldrb	r3, [sp, #60]	; 0x3c
   1028c:	e1a02006 	mov	r2, r6
   10290:	e203301f 	and	r3, r3, #31
   10294:	e58d3000 	str	r3, [sp]
   10298:	e59f1108 	ldr	r1, [pc, #264]	; 103a8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x454>
   1029c:	e59f311c 	ldr	r3, [pc, #284]	; 103c0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x46c>
   102a0:	e1a06004 	mov	r6, r4
   102a4:	eb003346 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   102a8:	eaffffde 	b	10228 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2d4>
   102ac:	eb00319b 	bl	1c920 <CLogger::Get()>
   102b0:	e1a02006 	mov	r2, r6
   102b4:	e1a06004 	mov	r6, r4
   102b8:	e59f3104 	ldr	r3, [pc, #260]	; 103c4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x470>
   102bc:	e59f10e4 	ldr	r1, [pc, #228]	; 103a8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x454>
   102c0:	eb00333f 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   102c4:	e1a00006 	mov	r0, r6
   102c8:	e28dd064 	add	sp, sp, #100	; 0x64
   102cc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   102d0:	e1a00005 	mov	r0, r5
   102d4:	e59f10cc 	ldr	r1, [pc, #204]	; 103a8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x454>
   102d8:	eb001100 	bl	146e0 <CUSBFunction::ConfigurationError(char const*) const>
   102dc:	e3a06000 	mov	r6, #0
   102e0:	eaffffd0 	b	10228 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2d4>
   102e4:	eb00318d 	bl	1c920 <CLogger::Get()>
   102e8:	e1a02009 	mov	r2, r9
   102ec:	e59f30d4 	ldr	r3, [pc, #212]	; 103c8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x474>
   102f0:	e59f10b0 	ldr	r1, [pc, #176]	; 103a8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x454>
   102f4:	eb003332 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   102f8:	e3a06000 	mov	r6, #0
   102fc:	eaffffc9 	b	10228 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2d4>
   10300:	eb003186 	bl	1c920 <CLogger::Get()>
   10304:	e1a02006 	mov	r2, r6
   10308:	e58d4000 	str	r4, [sp]
   1030c:	e59f30b8 	ldr	r3, [pc, #184]	; 103cc <CUSBBulkOnlyMassStorageDevice::Configure()+0x478>
   10310:	e59f1090 	ldr	r1, [pc, #144]	; 103a8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x454>
   10314:	eb00332a 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10318:	e3a06000 	mov	r6, #0
   1031c:	eaffffc1 	b	10228 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2d4>
   10320:	eb00317e 	bl	1c920 <CLogger::Get()>
   10324:	e1a02009 	mov	r2, r9
   10328:	e59f30a0 	ldr	r3, [pc, #160]	; 103d0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x47c>
   1032c:	e59f1074 	ldr	r1, [pc, #116]	; 103a8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x454>
   10330:	eb003323 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10334:	eaffffbb 	b	10228 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2d4>
   10338:	eb003178 	bl	1c920 <CLogger::Get()>
   1033c:	e1a02006 	mov	r2, r6
   10340:	e59f308c 	ldr	r3, [pc, #140]	; 103d4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x480>
   10344:	e59f105c 	ldr	r1, [pc, #92]	; 103a8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x454>
   10348:	eb00331d 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1034c:	e3a06000 	mov	r6, #0
   10350:	eaffffb4 	b	10228 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2d4>
   10354:	eb002a77 	bl	1ad38 <CDeviceNameService::Get()>
   10358:	e1a07000 	mov	r7, r0
   1035c:	e28d0028 	add	r0, sp, #40	; 0x28
   10360:	eb003911 	bl	1e7ac <CString::operator char const*() const>
   10364:	e3a03001 	mov	r3, #1
   10368:	e1a01000 	mov	r1, r0
   1036c:	e1a02005 	mov	r2, r5
   10370:	e1a00007 	mov	r0, r7
   10374:	eb0029af 	bl	1aa38 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   10378:	e5943000 	ldr	r3, [r4]
   1037c:	e2833001 	add	r3, r3, #1
   10380:	e5843000 	str	r3, [r4]
   10384:	eaffff8e 	b	101c4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x270>
   10388:	eb003164 	bl	1c920 <CLogger::Get()>
   1038c:	e1a02006 	mov	r2, r6
   10390:	e59f3040 	ldr	r3, [pc, #64]	; 103d8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x484>
   10394:	e59f100c 	ldr	r1, [pc, #12]	; 103a8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x454>
   10398:	eb003309 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1039c:	e3a06000 	mov	r6, #0
   103a0:	eaffffa0 	b	10228 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2d4>
   103a4:	0002444c 	.word	0x0002444c
   103a8:	00024244 	.word	0x00024244
   103ac:	0002975c 	.word	0x0002975c
   103b0:	00024464 	.word	0x00024464
   103b4:	0002424c 	.word	0x0002424c
   103b8:	0002446c 	.word	0x0002446c
   103bc:	000241a8 	.word	0x000241a8
   103c0:	000243c4 	.word	0x000243c4
   103c4:	000243ac 	.word	0x000243ac
   103c8:	000243e4 	.word	0x000243e4
   103cc:	00024414 	.word	0x00024414
   103d0:	00024488 	.word	0x00024488
   103d4:	000243fc 	.word	0x000243fc
   103d8:	00024430 	.word	0x00024430

000103dc <CDWHCIFrameSchedulerNonPeriodic::~CDWHCIFrameSchedulerNonPeriodic()>:
   103dc:	e12fff1e 	bx	lr

000103e0 <CDWHCIFrameSchedulerNonPeriodic::StartSplit()>:
   103e0:	e3a03000 	mov	r3, #0
   103e4:	e5803008 	str	r3, [r0, #8]
   103e8:	e12fff1e 	bx	lr

000103ec <CDWHCIFrameSchedulerNonPeriodic::WaitForFrame()>:
   103ec:	e12fff1e 	bx	lr

000103f0 <CDWHCIFrameSchedulerNonPeriodic::IsOddFrame() const>:
   103f0:	e3a00000 	mov	r0, #0
   103f4:	e12fff1e 	bx	lr

000103f8 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()>:
   103f8:	e5903008 	ldr	r3, [r0, #8]
   103fc:	e92d4010 	push	{r4, lr}
   10400:	e2433001 	sub	r3, r3, #1
   10404:	e3530004 	cmp	r3, #4
   10408:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1040c:	ea000010 	b	10454 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x5c>
   10410:	0001043c 	.word	0x0001043c
   10414:	0001042c 	.word	0x0001042c
   10418:	0001042c 	.word	0x0001042c
   1041c:	00010424 	.word	0x00010424
   10420:	00010424 	.word	0x00010424
   10424:	e3a00000 	mov	r0, #0
   10428:	e8bd8010 	pop	{r4, pc}
   1042c:	e59f0038 	ldr	r0, [pc, #56]	; 1046c <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x74>
   10430:	eb00402c 	bl	204e8 <CTimer::SimpleusDelay(unsigned int)>
   10434:	e3a00001 	mov	r0, #1
   10438:	e8bd8010 	pop	{r4, pc}
   1043c:	e3a02002 	mov	r2, #2
   10440:	e3a03003 	mov	r3, #3
   10444:	e5802008 	str	r2, [r0, #8]
   10448:	e580300c 	str	r3, [r0, #12]
   1044c:	e3a00001 	mov	r0, #1
   10450:	e8bd8010 	pop	{r4, pc}
   10454:	e3a0205f 	mov	r2, #95	; 0x5f
   10458:	e59f1010 	ldr	r1, [pc, #16]	; 10470 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x78>
   1045c:	e59f0010 	ldr	r0, [pc, #16]	; 10474 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x7c>
   10460:	eb00273b 	bl	1a154 <assertion_failed>
   10464:	e3a00000 	mov	r0, #0
   10468:	e8bd8010 	pop	{r4, pc}
   1046c:	00000271 	.word	0x00000271
   10470:	000244c0 	.word	0x000244c0
   10474:	000239a8 	.word	0x000239a8

00010478 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)>:
   10478:	e92d4010 	push	{r4, lr}
   1047c:	e5903008 	ldr	r3, [r0, #8]
   10480:	e24dd010 	sub	sp, sp, #16
   10484:	e3530000 	cmp	r3, #0
   10488:	e1a04000 	mov	r4, r0
   1048c:	0a000019 	beq	104f8 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x80>
   10490:	e2433002 	sub	r3, r3, #2
   10494:	e3530001 	cmp	r3, #1
   10498:	9a000005 	bls	104b4 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x3c>
   1049c:	e3a0209b 	mov	r2, #155	; 0x9b
   104a0:	e59f10cc 	ldr	r1, [pc, #204]	; 10574 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xfc>
   104a4:	e59f00cc 	ldr	r0, [pc, #204]	; 10578 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x100>
   104a8:	e28dd010 	add	sp, sp, #16
   104ac:	e8bd4010 	pop	{r4, lr}
   104b0:	ea002727 	b	1a154 <assertion_failed>
   104b4:	e3110001 	tst	r1, #1
   104b8:	13a03004 	movne	r3, #4
   104bc:	15803008 	strne	r3, [r0, #8]
   104c0:	1a00000a 	bne	104f0 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x78>
   104c4:	e3110060 	tst	r1, #96	; 0x60
   104c8:	1a000014 	bne	10520 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xa8>
   104cc:	e3110010 	tst	r1, #16
   104d0:	0a00001d 	beq	1054c <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xd4>
   104d4:	e590300c 	ldr	r3, [r0, #12]
   104d8:	e3530000 	cmp	r3, #0
   104dc:	e2433001 	sub	r3, r3, #1
   104e0:	e580300c 	str	r3, [r0, #12]
   104e4:	0a000015 	beq	10540 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xc8>
   104e8:	e3a03003 	mov	r3, #3
   104ec:	e5843008 	str	r3, [r4, #8]
   104f0:	e28dd010 	add	sp, sp, #16
   104f4:	e8bd8010 	pop	{r4, pc}
   104f8:	e3110020 	tst	r1, #32
   104fc:	1a000003 	bne	10510 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x98>
   10500:	e3a0206b 	mov	r2, #107	; 0x6b
   10504:	e59f1068 	ldr	r1, [pc, #104]	; 10574 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xfc>
   10508:	e59f006c 	ldr	r0, [pc, #108]	; 1057c <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x104>
   1050c:	eb002710 	bl	1a154 <assertion_failed>
   10510:	e3a03001 	mov	r3, #1
   10514:	e5843008 	str	r3, [r4, #8]
   10518:	e28dd010 	add	sp, sp, #16
   1051c:	e8bd8010 	pop	{r4, pc}
   10520:	e590300c 	ldr	r3, [r0, #12]
   10524:	e3530000 	cmp	r3, #0
   10528:	e2433001 	sub	r3, r3, #1
   1052c:	e580300c 	str	r3, [r0, #12]
   10530:	1affffec 	bne	104e8 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x70>
   10534:	e3a03005 	mov	r3, #5
   10538:	e5843008 	str	r3, [r4, #8]
   1053c:	eaffffeb 	b	104f0 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x78>
   10540:	e59f0038 	ldr	r0, [pc, #56]	; 10580 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x108>
   10544:	eb003fe7 	bl	204e8 <CTimer::SimpleusDelay(unsigned int)>
   10548:	eafffff9 	b	10534 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xbc>
   1054c:	e58d100c 	str	r1, [sp, #12]
   10550:	eb0030f2 	bl	1c920 <CLogger::Get()>
   10554:	e59d100c 	ldr	r1, [sp, #12]
   10558:	e3a02001 	mov	r2, #1
   1055c:	e58d1000 	str	r1, [sp]
   10560:	e59f301c 	ldr	r3, [pc, #28]	; 10584 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x10c>
   10564:	e59f101c 	ldr	r1, [pc, #28]	; 10588 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x110>
   10568:	eb003295 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1056c:	e3a02096 	mov	r2, #150	; 0x96
   10570:	eaffffca 	b	104a0 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x28>
   10574:	000244c0 	.word	0x000244c0
   10578:	000239a8 	.word	0x000239a8
   1057c:	000244d8 	.word	0x000244d8
   10580:	00000271 	.word	0x00000271
   10584:	000244fc 	.word	0x000244fc
   10588:	00024510 	.word	0x00024510

0001058c <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()>:
   1058c:	e59f303c 	ldr	r3, [pc, #60]	; 105d0 <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()+0x44>
   10590:	e92d4010 	push	{r4, lr}
   10594:	e5803000 	str	r3, [r0]
   10598:	e1a04000 	mov	r4, r0
   1059c:	eb004003 	bl	205b0 <CTimer::Get()>
   105a0:	e3a03006 	mov	r3, #6
   105a4:	e3500000 	cmp	r0, #0
   105a8:	e9840009 	stmib	r4, {r0, r3}
   105ac:	0a000001 	beq	105b8 <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()+0x2c>
   105b0:	e1a00004 	mov	r0, r4
   105b4:	e8bd8010 	pop	{r4, pc}
   105b8:	e3a0202e 	mov	r2, #46	; 0x2e
   105bc:	e59f1010 	ldr	r1, [pc, #16]	; 105d4 <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()+0x48>
   105c0:	e59f0010 	ldr	r0, [pc, #16]	; 105d8 <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()+0x4c>
   105c4:	eb0026e2 	bl	1a154 <assertion_failed>
   105c8:	e1a00004 	mov	r0, r4
   105cc:	e8bd8010 	pop	{r4, pc}
   105d0:	000244a4 	.word	0x000244a4
   105d4:	000244c0 	.word	0x000244c0
   105d8:	00023128 	.word	0x00023128

000105dc <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)>:
   105dc:	e3500010 	cmp	r0, #16
   105e0:	e92d4010 	push	{r4, lr}
   105e4:	0a000003 	beq	105f8 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x1c>
   105e8:	e3a020bd 	mov	r2, #189	; 0xbd
   105ec:	e59f1038 	ldr	r1, [pc, #56]	; 1062c <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x50>
   105f0:	e59f0038 	ldr	r0, [pc, #56]	; 10630 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x54>
   105f4:	eb0026d6 	bl	1a154 <assertion_failed>
   105f8:	e59f4034 	ldr	r4, [pc, #52]	; 10634 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x58>
   105fc:	e5940000 	ldr	r0, [r4]
   10600:	e3500000 	cmp	r0, #0
   10604:	0a000001 	beq	10610 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x34>
   10608:	e8bd4010 	pop	{r4, lr}
   1060c:	ea0027ee 	b	1a5cc <CClassAllocator::Allocate()>
   10610:	e59f0020 	ldr	r0, [pc, #32]	; 10638 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x5c>
   10614:	e3a020bd 	mov	r2, #189	; 0xbd
   10618:	e59f100c 	ldr	r1, [pc, #12]	; 1062c <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x50>
   1061c:	eb0026cc 	bl	1a154 <assertion_failed>
   10620:	e5940000 	ldr	r0, [r4]
   10624:	e8bd4010 	pop	{r4, lr}
   10628:	ea0027e7 	b	1a5cc <CClassAllocator::Allocate()>
   1062c:	000244c0 	.word	0x000244c0
   10630:	00024518 	.word	0x00024518
   10634:	000299a4 	.word	0x000299a4
   10638:	00023888 	.word	0x00023888

0001063c <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)>:
   1063c:	e3510010 	cmp	r1, #16
   10640:	e92d4070 	push	{r4, r5, r6, lr}
   10644:	e1a05000 	mov	r5, r0
   10648:	0a000003 	beq	1065c <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x20>
   1064c:	e3a020bd 	mov	r2, #189	; 0xbd
   10650:	e59f1040 	ldr	r1, [pc, #64]	; 10698 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x5c>
   10654:	e59f0040 	ldr	r0, [pc, #64]	; 1069c <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x60>
   10658:	eb0026bd 	bl	1a154 <assertion_failed>
   1065c:	e59f403c 	ldr	r4, [pc, #60]	; 106a0 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x64>
   10660:	e5940000 	ldr	r0, [r4]
   10664:	e3500000 	cmp	r0, #0
   10668:	0a000002 	beq	10678 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x3c>
   1066c:	e1a01005 	mov	r1, r5
   10670:	e8bd4070 	pop	{r4, r5, r6, lr}
   10674:	ea00280f 	b	1a6b8 <CClassAllocator::Free(void*)>
   10678:	e59f1018 	ldr	r1, [pc, #24]	; 10698 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x5c>
   1067c:	e59f0020 	ldr	r0, [pc, #32]	; 106a4 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x68>
   10680:	e3a020bd 	mov	r2, #189	; 0xbd
   10684:	eb0026b2 	bl	1a154 <assertion_failed>
   10688:	e5940000 	ldr	r0, [r4]
   1068c:	e1a01005 	mov	r1, r5
   10690:	e8bd4070 	pop	{r4, r5, r6, lr}
   10694:	ea002807 	b	1a6b8 <CClassAllocator::Free(void*)>
   10698:	000244c0 	.word	0x000244c0
   1069c:	00024518 	.word	0x00024518
   106a0:	000299a4 	.word	0x000299a4
   106a4:	00023888 	.word	0x00023888

000106a8 <CDWHCIFrameSchedulerNonPeriodic::~CDWHCIFrameSchedulerNonPeriodic()>:
   106a8:	e92d4010 	push	{r4, lr}
   106ac:	e1a04000 	mov	r4, r0
   106b0:	e3a01010 	mov	r1, #16
   106b4:	ebffffe0 	bl	1063c <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)>
   106b8:	e1a00004 	mov	r0, r4
   106bc:	e8bd8010 	pop	{r4, pc}

000106c0 <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)>:
   106c0:	e92d4070 	push	{r4, r5, r6, lr}
   106c4:	e59f4040 	ldr	r4, [pc, #64]	; 1070c <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)+0x4c>
   106c8:	e1a06000 	mov	r6, r0
   106cc:	e5943000 	ldr	r3, [r4]
   106d0:	e3530000 	cmp	r3, #0
   106d4:	0a000003 	beq	106e8 <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)+0x28>
   106d8:	e3a020bd 	mov	r2, #189	; 0xbd
   106dc:	e59f102c 	ldr	r1, [pc, #44]	; 10710 <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)+0x50>
   106e0:	e59f002c 	ldr	r0, [pc, #44]	; 10714 <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)+0x54>
   106e4:	eb00269a 	bl	1a154 <assertion_failed>
   106e8:	e3a0001c 	mov	r0, #28
   106ec:	eb00442c 	bl	217a4 <operator new(unsigned int)>
   106f0:	e1a05000 	mov	r5, r0
   106f4:	e1a02006 	mov	r2, r6
   106f8:	e59f3018 	ldr	r3, [pc, #24]	; 10718 <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)+0x58>
   106fc:	e3a01010 	mov	r1, #16
   10700:	eb002798 	bl	1a568 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
   10704:	e5845000 	str	r5, [r4]
   10708:	e8bd8070 	pop	{r4, r5, r6, pc}
   1070c:	000299a4 	.word	0x000299a4
   10710:	000244c0 	.word	0x000244c0
   10714:	0002389c 	.word	0x0002389c
   10718:	0002454c 	.word	0x0002454c

0001071c <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)>:
   1071c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   10720:	e59f4054 	ldr	r4, [pc, #84]	; 1077c <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x60>
   10724:	e24dd00c 	sub	sp, sp, #12
   10728:	e5943000 	ldr	r3, [r4]
   1072c:	e1a06000 	mov	r6, r0
   10730:	e3530000 	cmp	r3, #0
   10734:	e1a07001 	mov	r7, r1
   10738:	0a000003 	beq	1074c <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x30>
   1073c:	e3a020bd 	mov	r2, #189	; 0xbd
   10740:	e59f1038 	ldr	r1, [pc, #56]	; 10780 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x64>
   10744:	e59f0038 	ldr	r0, [pc, #56]	; 10784 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x68>
   10748:	eb002681 	bl	1a154 <assertion_failed>
   1074c:	e3a0001c 	mov	r0, #28
   10750:	eb004413 	bl	217a4 <operator new(unsigned int)>
   10754:	e59f102c 	ldr	r1, [pc, #44]	; 10788 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x6c>
   10758:	e1a03007 	mov	r3, r7
   1075c:	e58d1000 	str	r1, [sp]
   10760:	e1a02006 	mov	r2, r6
   10764:	e3a01010 	mov	r1, #16
   10768:	e1a05000 	mov	r5, r0
   1076c:	eb002789 	bl	1a598 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
   10770:	e5845000 	str	r5, [r4]
   10774:	e28dd00c 	add	sp, sp, #12
   10778:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1077c:	000299a4 	.word	0x000299a4
   10780:	000244c0 	.word	0x000244c0
   10784:	0002389c 	.word	0x0002389c
   10788:	0002454c 	.word	0x0002454c

0001078c <CDWHCIFrameSchedulerPeriodic::~CDWHCIFrameSchedulerPeriodic()>:
   1078c:	e12fff1e 	bx	lr

00010790 <CDWHCIFrameSchedulerPeriodic::StartSplit()>:
   10790:	e3a02901 	mov	r2, #16384	; 0x4000
   10794:	e3a03000 	mov	r3, #0
   10798:	e1c021b0 	strh	r2, [r0, #16]
   1079c:	e5803008 	str	r3, [r0, #8]
   107a0:	e12fff1e 	bx	lr

000107a4 <CDWHCIFrameSchedulerPeriodic::IsOddFrame() const>:
   107a4:	e1d001b0 	ldrh	r0, [r0, #16]
   107a8:	e2000001 	and	r0, r0, #1
   107ac:	e12fff1e 	bx	lr

000107b0 <CDWHCIFrameSchedulerPeriodic::WaitForFrame()>:
   107b0:	e92d4010 	push	{r4, lr}
   107b4:	e1a04000 	mov	r4, r0
   107b8:	e24dd010 	sub	sp, sp, #16
   107bc:	e28d0004 	add	r0, sp, #4
   107c0:	e59f1054 	ldr	r1, [pc, #84]	; 1081c <CDWHCIFrameSchedulerPeriodic::WaitForFrame()+0x6c>
   107c4:	ebffedd6 	bl	bf24 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   107c8:	e1d431b0 	ldrh	r3, [r4, #16]
   107cc:	e3530901 	cmp	r3, #16384	; 0x4000
   107d0:	0a000009 	beq	107fc <CDWHCIFrameSchedulerPeriodic::WaitForFrame()+0x4c>
   107d4:	e28d0004 	add	r0, sp, #4
   107d8:	ebffedda 	bl	bf48 <CDWHCIRegister::Read()>
   107dc:	e1d431b0 	ldrh	r3, [r4, #16]
   107e0:	e2000007 	and	r0, r0, #7
   107e4:	e1500003 	cmp	r0, r3
   107e8:	1afffff9 	bne	107d4 <CDWHCIFrameSchedulerPeriodic::WaitForFrame()+0x24>
   107ec:	e28d0004 	add	r0, sp, #4
   107f0:	ebffedd3 	bl	bf44 <CDWHCIRegister::~CDWHCIRegister()>
   107f4:	e28dd010 	add	sp, sp, #16
   107f8:	e8bd8010 	pop	{r4, pc}
   107fc:	e28d0004 	add	r0, sp, #4
   10800:	ebffedd0 	bl	bf48 <CDWHCIRegister::Read()>
   10804:	e2803001 	add	r3, r0, #1
   10808:	e2033007 	and	r3, r3, #7
   1080c:	e3530006 	cmp	r3, #6
   10810:	03a03007 	moveq	r3, #7
   10814:	e1c431b0 	strh	r3, [r4, #16]
   10818:	eaffffed 	b	107d4 <CDWHCIFrameSchedulerPeriodic::WaitForFrame()+0x24>
   1081c:	20980408 	.word	0x20980408

00010820 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()>:
   10820:	e5903008 	ldr	r3, [r0, #8]
   10824:	e92d4010 	push	{r4, lr}
   10828:	e2433001 	sub	r3, r3, #1
   1082c:	e1a04000 	mov	r4, r0
   10830:	e3530004 	cmp	r3, #4
   10834:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   10838:	ea00001c 	b	108b0 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0x90>
   1083c:	00010878 	.word	0x00010878
   10840:	000108b0 	.word	0x000108b0
   10844:	00010858 	.word	0x00010858
   10848:	00010850 	.word	0x00010850
   1084c:	00010850 	.word	0x00010850
   10850:	e3a00000 	mov	r0, #0
   10854:	e8bd8010 	pop	{r4, pc}
   10858:	e1d031b0 	ldrh	r3, [r0, #16]
   1085c:	e3530901 	cmp	r3, #16384	; 0x4000
   10860:	0a000018 	beq	108c8 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xa8>
   10864:	e2833001 	add	r3, r3, #1
   10868:	e2033007 	and	r3, r3, #7
   1086c:	e1c431b0 	strh	r3, [r4, #16]
   10870:	e3a00001 	mov	r0, #1
   10874:	e8bd8010 	pop	{r4, pc}
   10878:	e3a02002 	mov	r2, #2
   1087c:	e1d031b0 	ldrh	r3, [r0, #16]
   10880:	e5802008 	str	r2, [r0, #8]
   10884:	e3530901 	cmp	r3, #16384	; 0x4000
   10888:	0a000014 	beq	108e0 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xc0>
   1088c:	e3530005 	cmp	r3, #5
   10890:	03a02002 	moveq	r2, #2
   10894:	13a02003 	movne	r2, #3
   10898:	e2833002 	add	r3, r3, #2
   1089c:	e2033007 	and	r3, r3, #7
   108a0:	e1c431b0 	strh	r3, [r4, #16]
   108a4:	e584200c 	str	r2, [r4, #12]
   108a8:	e3a00001 	mov	r0, #1
   108ac:	e8bd8010 	pop	{r4, pc}
   108b0:	e3a0206e 	mov	r2, #110	; 0x6e
   108b4:	e59f103c 	ldr	r1, [pc, #60]	; 108f8 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xd8>
   108b8:	e59f003c 	ldr	r0, [pc, #60]	; 108fc <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xdc>
   108bc:	eb002624 	bl	1a154 <assertion_failed>
   108c0:	e3a00000 	mov	r0, #0
   108c4:	e8bd8010 	pop	{r4, pc}
   108c8:	e3a02062 	mov	r2, #98	; 0x62
   108cc:	e59f1024 	ldr	r1, [pc, #36]	; 108f8 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xd8>
   108d0:	e59f0028 	ldr	r0, [pc, #40]	; 10900 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xe0>
   108d4:	eb00261e 	bl	1a154 <assertion_failed>
   108d8:	e1d431b0 	ldrh	r3, [r4, #16]
   108dc:	eaffffe0 	b	10864 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0x44>
   108e0:	e3a02054 	mov	r2, #84	; 0x54
   108e4:	e59f100c 	ldr	r1, [pc, #12]	; 108f8 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xd8>
   108e8:	e59f0010 	ldr	r0, [pc, #16]	; 10900 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xe0>
   108ec:	eb002618 	bl	1a154 <assertion_failed>
   108f0:	e1d431b0 	ldrh	r3, [r4, #16]
   108f4:	eaffffe4 	b	1088c <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0x6c>
   108f8:	00024590 	.word	0x00024590
   108fc:	000239a8 	.word	0x000239a8
   10900:	000245a8 	.word	0x000245a8

00010904 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)>:
   10904:	e92d4010 	push	{r4, lr}
   10908:	e5903008 	ldr	r3, [r0, #8]
   1090c:	e24dd010 	sub	sp, sp, #16
   10910:	e3530000 	cmp	r3, #0
   10914:	e1a04000 	mov	r4, r0
   10918:	0a000016 	beq	10978 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x74>
   1091c:	e2433002 	sub	r3, r3, #2
   10920:	e3530001 	cmp	r3, #1
   10924:	9a000005 	bls	10940 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x3c>
   10928:	e3a020a6 	mov	r2, #166	; 0xa6
   1092c:	e59f10c8 	ldr	r1, [pc, #200]	; 109fc <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xf8>
   10930:	e59f00c8 	ldr	r0, [pc, #200]	; 10a00 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xfc>
   10934:	e28dd010 	add	sp, sp, #16
   10938:	e8bd4010 	pop	{r4, lr}
   1093c:	ea002604 	b	1a154 <assertion_failed>
   10940:	e3110001 	tst	r1, #1
   10944:	13a03004 	movne	r3, #4
   10948:	15803008 	strne	r3, [r0, #8]
   1094c:	1a000007 	bne	10970 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x6c>
   10950:	e3110060 	tst	r1, #96	; 0x60
   10954:	1a000011 	bne	109a0 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x9c>
   10958:	e3110010 	tst	r1, #16
   1095c:	0a00001c 	beq	109d4 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xd0>
   10960:	e59f009c 	ldr	r0, [pc, #156]	; 10a04 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x100>
   10964:	eb003edf 	bl	204e8 <CTimer::SimpleusDelay(unsigned int)>
   10968:	e3a03005 	mov	r3, #5
   1096c:	e5843008 	str	r3, [r4, #8]
   10970:	e28dd010 	add	sp, sp, #16
   10974:	e8bd8010 	pop	{r4, pc}
   10978:	e3110020 	tst	r1, #32
   1097c:	1a000003 	bne	10990 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x8c>
   10980:	e3a0207a 	mov	r2, #122	; 0x7a
   10984:	e59f1070 	ldr	r1, [pc, #112]	; 109fc <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xf8>
   10988:	e59f0078 	ldr	r0, [pc, #120]	; 10a08 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x104>
   1098c:	eb0025f0 	bl	1a154 <assertion_failed>
   10990:	e3a03001 	mov	r3, #1
   10994:	e5843008 	str	r3, [r4, #8]
   10998:	e28dd010 	add	sp, sp, #16
   1099c:	e8bd8010 	pop	{r4, pc}
   109a0:	e590300c 	ldr	r3, [r0, #12]
   109a4:	e3530000 	cmp	r3, #0
   109a8:	e2433001 	sub	r3, r3, #1
   109ac:	e580300c 	str	r3, [r0, #12]
   109b0:	13a03003 	movne	r3, #3
   109b4:	15803008 	strne	r3, [r0, #8]
   109b8:	1affffec 	bne	10970 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x6c>
   109bc:	e3a03005 	mov	r3, #5
   109c0:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   109c4:	e5843008 	str	r3, [r4, #8]
   109c8:	e28dd010 	add	sp, sp, #16
   109cc:	e8bd4010 	pop	{r4, lr}
   109d0:	ea003ec4 	b	204e8 <CTimer::SimpleusDelay(unsigned int)>
   109d4:	e58d100c 	str	r1, [sp, #12]
   109d8:	eb002fd0 	bl	1c920 <CLogger::Get()>
   109dc:	e59d100c 	ldr	r1, [sp, #12]
   109e0:	e3a02001 	mov	r2, #1
   109e4:	e58d1000 	str	r1, [sp]
   109e8:	e59f301c 	ldr	r3, [pc, #28]	; 10a0c <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x108>
   109ec:	e59f101c 	ldr	r1, [pc, #28]	; 10a10 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x10c>
   109f0:	eb003173 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   109f4:	e3a020a1 	mov	r2, #161	; 0xa1
   109f8:	eaffffcb 	b	1092c <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x28>
   109fc:	00024590 	.word	0x00024590
   10a00:	000239a8 	.word	0x000239a8
   10a04:	00000271 	.word	0x00000271
   10a08:	000244d8 	.word	0x000244d8
   10a0c:	000244fc 	.word	0x000244fc
   10a10:	00024510 	.word	0x00024510

00010a14 <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()>:
   10a14:	e59f3044 	ldr	r3, [pc, #68]	; 10a60 <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()+0x4c>
   10a18:	e92d4010 	push	{r4, lr}
   10a1c:	e5803000 	str	r3, [r0]
   10a20:	e1a04000 	mov	r4, r0
   10a24:	eb003ee1 	bl	205b0 <CTimer::Get()>
   10a28:	e3a02006 	mov	r2, #6
   10a2c:	e3a03901 	mov	r3, #16384	; 0x4000
   10a30:	e3500000 	cmp	r0, #0
   10a34:	e9840005 	stmib	r4, {r0, r2}
   10a38:	e1c431b0 	strh	r3, [r4, #16]
   10a3c:	0a000001 	beq	10a48 <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()+0x34>
   10a40:	e1a00004 	mov	r0, r4
   10a44:	e8bd8010 	pop	{r4, pc}
   10a48:	e3a02034 	mov	r2, #52	; 0x34
   10a4c:	e59f1010 	ldr	r1, [pc, #16]	; 10a64 <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()+0x50>
   10a50:	e59f0010 	ldr	r0, [pc, #16]	; 10a68 <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()+0x54>
   10a54:	eb0025be 	bl	1a154 <assertion_failed>
   10a58:	e1a00004 	mov	r0, r4
   10a5c:	e8bd8010 	pop	{r4, pc}
   10a60:	00024574 	.word	0x00024574
   10a64:	00024590 	.word	0x00024590
   10a68:	00023128 	.word	0x00023128

00010a6c <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)>:
   10a6c:	e3500014 	cmp	r0, #20
   10a70:	e92d4010 	push	{r4, lr}
   10a74:	0a000003 	beq	10a88 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x1c>
   10a78:	e3a020e2 	mov	r2, #226	; 0xe2
   10a7c:	e59f1038 	ldr	r1, [pc, #56]	; 10abc <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x50>
   10a80:	e59f0038 	ldr	r0, [pc, #56]	; 10ac0 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x54>
   10a84:	eb0025b2 	bl	1a154 <assertion_failed>
   10a88:	e59f4034 	ldr	r4, [pc, #52]	; 10ac4 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x58>
   10a8c:	e5940000 	ldr	r0, [r4]
   10a90:	e3500000 	cmp	r0, #0
   10a94:	0a000001 	beq	10aa0 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x34>
   10a98:	e8bd4010 	pop	{r4, lr}
   10a9c:	ea0026ca 	b	1a5cc <CClassAllocator::Allocate()>
   10aa0:	e59f0020 	ldr	r0, [pc, #32]	; 10ac8 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x5c>
   10aa4:	e3a020e2 	mov	r2, #226	; 0xe2
   10aa8:	e59f100c 	ldr	r1, [pc, #12]	; 10abc <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x50>
   10aac:	eb0025a8 	bl	1a154 <assertion_failed>
   10ab0:	e5940000 	ldr	r0, [r4]
   10ab4:	e8bd4010 	pop	{r4, lr}
   10ab8:	ea0026c3 	b	1a5cc <CClassAllocator::Allocate()>
   10abc:	00024590 	.word	0x00024590
   10ac0:	000245c8 	.word	0x000245c8
   10ac4:	000299a8 	.word	0x000299a8
   10ac8:	00023888 	.word	0x00023888

00010acc <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)>:
   10acc:	e3510014 	cmp	r1, #20
   10ad0:	e92d4070 	push	{r4, r5, r6, lr}
   10ad4:	e1a05000 	mov	r5, r0
   10ad8:	0a000003 	beq	10aec <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x20>
   10adc:	e3a020e2 	mov	r2, #226	; 0xe2
   10ae0:	e59f1040 	ldr	r1, [pc, #64]	; 10b28 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x5c>
   10ae4:	e59f0040 	ldr	r0, [pc, #64]	; 10b2c <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x60>
   10ae8:	eb002599 	bl	1a154 <assertion_failed>
   10aec:	e59f403c 	ldr	r4, [pc, #60]	; 10b30 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x64>
   10af0:	e5940000 	ldr	r0, [r4]
   10af4:	e3500000 	cmp	r0, #0
   10af8:	0a000002 	beq	10b08 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x3c>
   10afc:	e1a01005 	mov	r1, r5
   10b00:	e8bd4070 	pop	{r4, r5, r6, lr}
   10b04:	ea0026eb 	b	1a6b8 <CClassAllocator::Free(void*)>
   10b08:	e59f1018 	ldr	r1, [pc, #24]	; 10b28 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x5c>
   10b0c:	e59f0020 	ldr	r0, [pc, #32]	; 10b34 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x68>
   10b10:	e3a020e2 	mov	r2, #226	; 0xe2
   10b14:	eb00258e 	bl	1a154 <assertion_failed>
   10b18:	e5940000 	ldr	r0, [r4]
   10b1c:	e1a01005 	mov	r1, r5
   10b20:	e8bd4070 	pop	{r4, r5, r6, lr}
   10b24:	ea0026e3 	b	1a6b8 <CClassAllocator::Free(void*)>
   10b28:	00024590 	.word	0x00024590
   10b2c:	000245c8 	.word	0x000245c8
   10b30:	000299a8 	.word	0x000299a8
   10b34:	00023888 	.word	0x00023888

00010b38 <CDWHCIFrameSchedulerPeriodic::~CDWHCIFrameSchedulerPeriodic()>:
   10b38:	e92d4010 	push	{r4, lr}
   10b3c:	e1a04000 	mov	r4, r0
   10b40:	e3a01014 	mov	r1, #20
   10b44:	ebffffe0 	bl	10acc <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)>
   10b48:	e1a00004 	mov	r0, r4
   10b4c:	e8bd8010 	pop	{r4, pc}

00010b50 <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)>:
   10b50:	e92d4070 	push	{r4, r5, r6, lr}
   10b54:	e59f4040 	ldr	r4, [pc, #64]	; 10b9c <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)+0x4c>
   10b58:	e1a06000 	mov	r6, r0
   10b5c:	e5943000 	ldr	r3, [r4]
   10b60:	e3530000 	cmp	r3, #0
   10b64:	0a000003 	beq	10b78 <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)+0x28>
   10b68:	e3a020e2 	mov	r2, #226	; 0xe2
   10b6c:	e59f102c 	ldr	r1, [pc, #44]	; 10ba0 <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)+0x50>
   10b70:	e59f002c 	ldr	r0, [pc, #44]	; 10ba4 <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)+0x54>
   10b74:	eb002576 	bl	1a154 <assertion_failed>
   10b78:	e3a0001c 	mov	r0, #28
   10b7c:	eb004308 	bl	217a4 <operator new(unsigned int)>
   10b80:	e1a05000 	mov	r5, r0
   10b84:	e1a02006 	mov	r2, r6
   10b88:	e59f3018 	ldr	r3, [pc, #24]	; 10ba8 <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)+0x58>
   10b8c:	e3a01014 	mov	r1, #20
   10b90:	eb002674 	bl	1a568 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
   10b94:	e5845000 	str	r5, [r4]
   10b98:	e8bd8070 	pop	{r4, r5, r6, pc}
   10b9c:	000299a8 	.word	0x000299a8
   10ba0:	00024590 	.word	0x00024590
   10ba4:	0002389c 	.word	0x0002389c
   10ba8:	000245f8 	.word	0x000245f8

00010bac <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)>:
   10bac:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   10bb0:	e59f4054 	ldr	r4, [pc, #84]	; 10c0c <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x60>
   10bb4:	e24dd00c 	sub	sp, sp, #12
   10bb8:	e5943000 	ldr	r3, [r4]
   10bbc:	e1a06000 	mov	r6, r0
   10bc0:	e3530000 	cmp	r3, #0
   10bc4:	e1a07001 	mov	r7, r1
   10bc8:	0a000003 	beq	10bdc <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x30>
   10bcc:	e3a020e2 	mov	r2, #226	; 0xe2
   10bd0:	e59f1038 	ldr	r1, [pc, #56]	; 10c10 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x64>
   10bd4:	e59f0038 	ldr	r0, [pc, #56]	; 10c14 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x68>
   10bd8:	eb00255d 	bl	1a154 <assertion_failed>
   10bdc:	e3a0001c 	mov	r0, #28
   10be0:	eb0042ef 	bl	217a4 <operator new(unsigned int)>
   10be4:	e59f102c 	ldr	r1, [pc, #44]	; 10c18 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x6c>
   10be8:	e1a03007 	mov	r3, r7
   10bec:	e58d1000 	str	r1, [sp]
   10bf0:	e1a02006 	mov	r2, r6
   10bf4:	e3a01014 	mov	r1, #20
   10bf8:	e1a05000 	mov	r5, r0
   10bfc:	eb002665 	bl	1a598 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
   10c00:	e5845000 	str	r5, [r4]
   10c04:	e28dd00c 	add	sp, sp, #12
   10c08:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   10c0c:	000299a8 	.word	0x000299a8
   10c10:	00024590 	.word	0x00024590
   10c14:	0002389c 	.word	0x0002389c
   10c18:	000245f8 	.word	0x000245f8

00010c1c <CUSBKeyboardDevice::~CUSBKeyboardDevice()>:
   10c1c:	e92d4070 	push	{r4, r5, r6, lr}
   10c20:	e3a06000 	mov	r6, #0
   10c24:	e1a04000 	mov	r4, r0
   10c28:	e59f5034 	ldr	r5, [pc, #52]	; 10c64 <CUSBKeyboardDevice::~CUSBKeyboardDevice()+0x48>
   10c2c:	e580643c 	str	r6, [r0, #1084]	; 0x43c
   10c30:	e2853008 	add	r3, r5, #8
   10c34:	e5803000 	str	r3, [r0]
   10c38:	eb00283e 	bl	1ad38 <CDeviceNameService::Get()>
   10c3c:	e1a03006 	mov	r3, r6
   10c40:	e2851028 	add	r1, r5, #40	; 0x28
   10c44:	e594244c 	ldr	r2, [r4, #1100]	; 0x44c
   10c48:	eb002862 	bl	1add8 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   10c4c:	e2840024 	add	r0, r4, #36	; 0x24
   10c50:	eb001fd2 	bl	18ba0 <CKeyboardBehaviour::~CKeyboardBehaviour()>
   10c54:	e1a00004 	mov	r0, r4
   10c58:	eb0001b7 	bl	1133c <CUSBHIDDevice::~CUSBHIDDevice()>
   10c5c:	e1a00004 	mov	r0, r4
   10c60:	e8bd8070 	pop	{r4, r5, r6, pc}
   10c64:	00024618 	.word	0x00024618

00010c68 <CUSBKeyboardDevice::~CUSBKeyboardDevice()>:
   10c68:	e92d4010 	push	{r4, lr}
   10c6c:	e1a04000 	mov	r4, r0
   10c70:	ebffffe9 	bl	10c1c <CUSBKeyboardDevice::~CUSBKeyboardDevice()>
   10c74:	e1a00004 	mov	r0, r4
   10c78:	e3a01e45 	mov	r1, #1104	; 0x450
   10c7c:	eb0042cc 	bl	217b4 <operator delete(void*, unsigned int)>
   10c80:	e1a00004 	mov	r0, r4
   10c84:	e8bd8010 	pop	{r4, pc}

00010c88 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)>:
   10c88:	e2522008 	subs	r2, r2, #8
   10c8c:	13a02001 	movne	r2, #1
   10c90:	e3510000 	cmp	r1, #0
   10c94:	03822001 	orreq	r2, r2, #1
   10c98:	e3520000 	cmp	r2, #0
   10c9c:	112fff1e 	bxne	lr
   10ca0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10ca4:	e590343c 	ldr	r3, [r0, #1084]	; 0x43c
   10ca8:	e24dd00c 	sub	sp, sp, #12
   10cac:	e3530000 	cmp	r3, #0
   10cb0:	e1a07001 	mov	r7, r1
   10cb4:	0a000004 	beq	10ccc <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x44>
   10cb8:	e5d70000 	ldrb	r0, [r7]
   10cbc:	e2811002 	add	r1, r1, #2
   10cc0:	e28dd00c 	add	sp, sp, #12
   10cc4:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10cc8:	e12fff13 	bx	r3
   10ccc:	e1a06000 	mov	r6, r0
   10cd0:	e1a04003 	mov	r4, r3
   10cd4:	e3a05080 	mov	r5, #128	; 0x80
   10cd8:	e3a09001 	mov	r9, #1
   10cdc:	e2808024 	add	r8, r0, #36	; 0x24
   10ce0:	ea000006 	b	10d00 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x78>
   10ce4:	e1120003 	tst	r2, r3
   10ce8:	1a00003d 	bne	10de4 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x15c>
   10cec:	e2844001 	add	r4, r4, #1
   10cf0:	e2855001 	add	r5, r5, #1
   10cf4:	e3540008 	cmp	r4, #8
   10cf8:	e6ef5075 	uxtb	r5, r5
   10cfc:	0a00000a 	beq	10d2c <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xa4>
   10d00:	e5d72000 	ldrb	r2, [r7]
   10d04:	e1a03419 	lsl	r3, r9, r4
   10d08:	e1120003 	tst	r2, r3
   10d0c:	e5d62440 	ldrb	r2, [r6, #1088]	; 0x440
   10d10:	0afffff3 	beq	10ce4 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x5c>
   10d14:	e1120003 	tst	r2, r3
   10d18:	1afffff3 	bne	10cec <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x64>
   10d1c:	e1a01005 	mov	r1, r5
   10d20:	e1a00008 	mov	r0, r8
   10d24:	eb00200b 	bl	18d58 <CKeyboardBehaviour::KeyPressed(unsigned char)>
   10d28:	eaffffef 	b	10cec <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x64>
   10d2c:	e2868d11 	add	r8, r6, #1088	; 0x440
   10d30:	e2885002 	add	r5, r8, #2
   10d34:	e1a0b005 	mov	fp, r5
   10d38:	e2863024 	add	r3, r6, #36	; 0x24
   10d3c:	e2884008 	add	r4, r8, #8
   10d40:	e2879002 	add	r9, r7, #2
   10d44:	e287a008 	add	sl, r7, #8
   10d48:	e58d3004 	str	r3, [sp, #4]
   10d4c:	e4db1001 	ldrb	r1, [fp], #1
   10d50:	e3510000 	cmp	r1, #0
   10d54:	0a000007 	beq	10d78 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xf0>
   10d58:	e1a03009 	mov	r3, r9
   10d5c:	e4d30001 	ldrb	r0, [r3], #1
   10d60:	e1500001 	cmp	r0, r1
   10d64:	0a000003 	beq	10d78 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xf0>
   10d68:	e153000a 	cmp	r3, sl
   10d6c:	1afffffa 	bne	10d5c <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xd4>
   10d70:	e59d0004 	ldr	r0, [sp, #4]
   10d74:	eb002006 	bl	18d94 <CKeyboardBehaviour::KeyReleased(unsigned char)>
   10d78:	e15b0004 	cmp	fp, r4
   10d7c:	1afffff2 	bne	10d4c <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xc4>
   10d80:	e2866024 	add	r6, r6, #36	; 0x24
   10d84:	e2879001 	add	r9, r7, #1
   10d88:	e287a007 	add	sl, r7, #7
   10d8c:	ea000001 	b	10d98 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x110>
   10d90:	e159000a 	cmp	r9, sl
   10d94:	0a00000c 	beq	10dcc <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x144>
   10d98:	e5f91001 	ldrb	r1, [r9, #1]!
   10d9c:	e3510000 	cmp	r1, #0
   10da0:	11a03005 	movne	r3, r5
   10da4:	0afffff9 	beq	10d90 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x108>
   10da8:	e4d32001 	ldrb	r2, [r3], #1
   10dac:	e1520001 	cmp	r2, r1
   10db0:	0afffff6 	beq	10d90 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x108>
   10db4:	e1530004 	cmp	r3, r4
   10db8:	1afffffa 	bne	10da8 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x120>
   10dbc:	e1a00006 	mov	r0, r6
   10dc0:	eb001fe4 	bl	18d58 <CKeyboardBehaviour::KeyPressed(unsigned char)>
   10dc4:	e159000a 	cmp	r9, sl
   10dc8:	1afffff2 	bne	10d98 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x110>
   10dcc:	e1a01007 	mov	r1, r7
   10dd0:	e1a00008 	mov	r0, r8
   10dd4:	e3a02008 	mov	r2, #8
   10dd8:	e28dd00c 	add	sp, sp, #12
   10ddc:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10de0:	ea003f73 	b	20bb4 <memcpy>
   10de4:	e1a01005 	mov	r1, r5
   10de8:	e1a00008 	mov	r0, r8
   10dec:	eb001fe8 	bl	18d94 <CKeyboardBehaviour::KeyReleased(unsigned char)>
   10df0:	eaffffbd 	b	10cec <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x64>

00010df4 <CUSBKeyboardDevice::CUSBKeyboardDevice(CUSBFunction*)>:
   10df4:	e92d4010 	push	{r4, lr}
   10df8:	e1a04000 	mov	r4, r0
   10dfc:	e3a02008 	mov	r2, #8
   10e00:	eb000139 	bl	112ec <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>
   10e04:	e1a00004 	mov	r0, r4
   10e08:	e59f3028 	ldr	r3, [pc, #40]	; 10e38 <CUSBKeyboardDevice::CUSBKeyboardDevice(CUSBFunction*)+0x44>
   10e0c:	e4803024 	str	r3, [r0], #36	; 0x24
   10e10:	eb001f55 	bl	18b6c <CKeyboardBehaviour::CKeyboardBehaviour()>
   10e14:	e3a01000 	mov	r1, #0
   10e18:	e2840d11 	add	r0, r4, #1088	; 0x440
   10e1c:	e584143c 	str	r1, [r4, #1084]	; 0x43c
   10e20:	e5c41448 	strb	r1, [r4, #1096]	; 0x448
   10e24:	e584144c 	str	r1, [r4, #1100]	; 0x44c
   10e28:	e3a02008 	mov	r2, #8
   10e2c:	eb003dee 	bl	205ec <memset>
   10e30:	e1a00004 	mov	r0, r4
   10e34:	e8bd8010 	pop	{r4, pc}
   10e38:	00024620 	.word	0x00024620

00010e3c <CUSBKeyboardDevice::RegisterKeyPressedHandler(void (*)(char const*))>:
   10e3c:	e2800024 	add	r0, r0, #36	; 0x24
   10e40:	ea001f60 	b	18bc8 <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))>

00010e44 <CUSBKeyboardDevice::RegisterSelectConsoleHandler(void (*)(unsigned int))>:
   10e44:	e2800024 	add	r0, r0, #36	; 0x24
   10e48:	ea001f6c 	b	18c00 <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))>

00010e4c <CUSBKeyboardDevice::RegisterShutdownHandler(void (*)())>:
   10e4c:	e2800024 	add	r0, r0, #36	; 0x24
   10e50:	ea001f78 	b	18c38 <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())>

00010e54 <CUSBKeyboardDevice::GetLEDStatus() const>:
   10e54:	e92d4010 	push	{r4, lr}
   10e58:	e2800024 	add	r0, r0, #36	; 0x24
   10e5c:	eb001f83 	bl	18c70 <CKeyboardBehaviour::GetLEDStatus() const>
   10e60:	e2003001 	and	r3, r0, #1
   10e64:	e3100002 	tst	r0, #2
   10e68:	13833002 	orrne	r3, r3, #2
   10e6c:	e3100004 	tst	r0, #4
   10e70:	13833004 	orrne	r3, r3, #4
   10e74:	e1a00003 	mov	r0, r3
   10e78:	e8bd8010 	pop	{r4, pc}

00010e7c <CUSBKeyboardDevice::RegisterKeyStatusHandlerRaw(void (*)(unsigned char, unsigned char const*))>:
   10e7c:	e92d4070 	push	{r4, r5, r6, lr}
   10e80:	e2515000 	subs	r5, r1, #0
   10e84:	e1a04000 	mov	r4, r0
   10e88:	0a000001 	beq	10e94 <CUSBKeyboardDevice::RegisterKeyStatusHandlerRaw(void (*)(unsigned char, unsigned char const*))+0x18>
   10e8c:	e584543c 	str	r5, [r4, #1084]	; 0x43c
   10e90:	e8bd8070 	pop	{r4, r5, r6, pc}
   10e94:	e3a0207d 	mov	r2, #125	; 0x7d
   10e98:	e59f100c 	ldr	r1, [pc, #12]	; 10eac <CUSBKeyboardDevice::RegisterKeyStatusHandlerRaw(void (*)(unsigned char, unsigned char const*))+0x30>
   10e9c:	e59f000c 	ldr	r0, [pc, #12]	; 10eb0 <CUSBKeyboardDevice::RegisterKeyStatusHandlerRaw(void (*)(unsigned char, unsigned char const*))+0x34>
   10ea0:	eb0024ab 	bl	1a154 <assertion_failed>
   10ea4:	e584543c 	str	r5, [r4, #1084]	; 0x43c
   10ea8:	e8bd8070 	pop	{r4, r5, r6, pc}
   10eac:	00024650 	.word	0x00024650
   10eb0:	00024660 	.word	0x00024660

00010eb4 <CUSBKeyboardDevice::SetLEDs(unsigned char)>:
   10eb4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   10eb8:	e24dd01c 	sub	sp, sp, #28
   10ebc:	e28d4018 	add	r4, sp, #24
   10ec0:	e5641004 	strb	r1, [r4, #-4]!
   10ec4:	e1a05000 	mov	r5, r0
   10ec8:	eb000daf 	bl	1458c <CUSBFunction::GetHost() const>
   10ecc:	e1a06000 	mov	r6, r0
   10ed0:	e1a00005 	mov	r0, r5
   10ed4:	eb000d9b 	bl	14548 <CUSBFunction::GetEndpoint0() const>
   10ed8:	e1a07000 	mov	r7, r0
   10edc:	e1a00005 	mov	r0, r5
   10ee0:	eb000e53 	bl	14834 <CUSBFunction::GetInterfaceNumber() const>
   10ee4:	e3a02001 	mov	r2, #1
   10ee8:	e3a03c02 	mov	r3, #512	; 0x200
   10eec:	e6ff0070 	uxth	r0, r0
   10ef0:	e98d0011 	stmib	sp, {r0, r4}
   10ef4:	e58d200c 	str	r2, [sp, #12]
   10ef8:	e58d3000 	str	r3, [sp]
   10efc:	e1a01007 	mov	r1, r7
   10f00:	e1a00006 	mov	r0, r6
   10f04:	e3a03009 	mov	r3, #9
   10f08:	e3a02021 	mov	r2, #33	; 0x21
   10f0c:	ebfff4ad 	bl	e1c8 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   10f10:	e1e00000 	mvn	r0, r0
   10f14:	e1a00fa0 	lsr	r0, r0, #31
   10f18:	e28dd01c 	add	sp, sp, #28
   10f1c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00010f20 <CUSBKeyboardDevice::Configure()>:
   10f20:	e92d4030 	push	{r4, r5, lr}
   10f24:	e3a01000 	mov	r1, #0
   10f28:	e24dd00c 	sub	sp, sp, #12
   10f2c:	e1a04000 	mov	r4, r0
   10f30:	eb00012c 	bl	113e8 <CUSBHIDDevice::Configure(unsigned int)>
   10f34:	e2505000 	subs	r5, r0, #0
   10f38:	0a000012 	beq	10f88 <CUSBKeyboardDevice::Configure()+0x68>
   10f3c:	e5d41448 	ldrb	r1, [r4, #1096]	; 0x448
   10f40:	e1a00004 	mov	r0, r4
   10f44:	ebffffda 	bl	10eb4 <CUSBKeyboardDevice::SetLEDs(unsigned char)>
   10f48:	e59f2058 	ldr	r2, [pc, #88]	; 10fa8 <CUSBKeyboardDevice::Configure()+0x88>
   10f4c:	e5923000 	ldr	r3, [r2]
   10f50:	e584344c 	str	r3, [r4, #1100]	; 0x44c
   10f54:	e2833001 	add	r3, r3, #1
   10f58:	e5823000 	str	r3, [r2]
   10f5c:	eb002775 	bl	1ad38 <CDeviceNameService::Get()>
   10f60:	e3a03000 	mov	r3, #0
   10f64:	e594244c 	ldr	r2, [r4, #1100]	; 0x44c
   10f68:	e59f103c 	ldr	r1, [pc, #60]	; 10fac <CUSBKeyboardDevice::Configure()+0x8c>
   10f6c:	e58d3000 	str	r3, [sp]
   10f70:	e1a03004 	mov	r3, r4
   10f74:	eb00277d 	bl	1ad70 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   10f78:	e1a00004 	mov	r0, r4
   10f7c:	e28dd00c 	add	sp, sp, #12
   10f80:	e8bd4030 	pop	{r4, r5, lr}
   10f84:	ea00023f 	b	11888 <CUSBHIDDevice::StartRequest()>
   10f88:	eb002e64 	bl	1c920 <CLogger::Get()>
   10f8c:	e59f301c 	ldr	r3, [pc, #28]	; 10fb0 <CUSBKeyboardDevice::Configure()+0x90>
   10f90:	e3a02001 	mov	r2, #1
   10f94:	e59f1018 	ldr	r1, [pc, #24]	; 10fb4 <CUSBKeyboardDevice::Configure()+0x94>
   10f98:	eb003009 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10f9c:	e1a00005 	mov	r0, r5
   10fa0:	e28dd00c 	add	sp, sp, #12
   10fa4:	e8bd8030 	pop	{r4, r5, pc}
   10fa8:	00029760 	.word	0x00029760
   10fac:	00024640 	.word	0x00024640
   10fb0:	0002467c 	.word	0x0002467c
   10fb4:	00024648 	.word	0x00024648

00010fb8 <CUSBKeyboardDevice::UpdateLEDs()>:
   10fb8:	e590243c 	ldr	r2, [r0, #1084]	; 0x43c
   10fbc:	e3520000 	cmp	r2, #0
   10fc0:	112fff1e 	bxne	lr
   10fc4:	e92d4010 	push	{r4, lr}
   10fc8:	e1a04000 	mov	r4, r0
   10fcc:	ebffffa0 	bl	10e54 <CUSBKeyboardDevice::GetLEDStatus() const>
   10fd0:	e5d43448 	ldrb	r3, [r4, #1096]	; 0x448
   10fd4:	e1530000 	cmp	r3, r0
   10fd8:	08bd8010 	popeq	{r4, pc}
   10fdc:	e5c40448 	strb	r0, [r4, #1096]	; 0x448
   10fe0:	e1a01000 	mov	r1, r0
   10fe4:	e1a00004 	mov	r0, r4
   10fe8:	ebffffb1 	bl	10eb4 <CUSBKeyboardDevice::SetLEDs(unsigned char)>
   10fec:	e3500000 	cmp	r0, #0
   10ff0:	18bd8010 	popne	{r4, pc}
   10ff4:	eb002e49 	bl	1c920 <CLogger::Get()>
   10ff8:	e8bd4010 	pop	{r4, lr}
   10ffc:	e59f3008 	ldr	r3, [pc, #8]	; 1100c <CUSBKeyboardDevice::UpdateLEDs()+0x54>
   11000:	e3a02001 	mov	r2, #1
   11004:	e59f1004 	ldr	r1, [pc, #4]	; 11010 <CUSBKeyboardDevice::UpdateLEDs()+0x58>
   11008:	ea002fed 	b	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1100c:	00024698 	.word	0x00024698
   11010:	00024648 	.word	0x00024648

00011014 <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)>:
   11014:	e0802002 	add	r2, r0, r2
   11018:	ea000002 	b	11028 <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)+0x14>
   1101c:	e4d03001 	ldrb	r3, [r0], #1
   11020:	e1530001 	cmp	r3, r1
   11024:	0a000003 	beq	11038 <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)+0x24>
   11028:	e1500002 	cmp	r0, r2
   1102c:	1afffffa 	bne	1101c <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)+0x8>
   11030:	e3a00000 	mov	r0, #0
   11034:	e12fff1e 	bx	lr
   11038:	e3a00001 	mov	r0, #1
   1103c:	e12fff1e 	bx	lr

00011040 <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)>:
   11040:	e3a03000 	mov	r3, #0
   11044:	e1510003 	cmp	r1, r3
   11048:	e92d4010 	push	{r4, lr}
   1104c:	e1a04000 	mov	r4, r0
   11050:	e880000a 	stm	r0, {r1, r3}
   11054:	0a000001 	beq	11060 <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)+0x20>
   11058:	e1a00004 	mov	r0, r4
   1105c:	e8bd8010 	pop	{r4, pc}
   11060:	e3a0201f 	mov	r2, #31
   11064:	e59f100c 	ldr	r1, [pc, #12]	; 11078 <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)+0x38>
   11068:	e59f000c 	ldr	r0, [pc, #12]	; 1107c <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)+0x3c>
   1106c:	eb002438 	bl	1a154 <assertion_failed>
   11070:	e1a00004 	mov	r0, r4
   11074:	e8bd8010 	pop	{r4, pc}
   11078:	000246b8 	.word	0x000246b8
   1107c:	000238f8 	.word	0x000238f8

00011080 <CDWHCIRootPort::~CDWHCIRootPort()>:
   11080:	e92d4010 	push	{r4, lr}
   11084:	e1a04000 	mov	r4, r0
   11088:	e5900004 	ldr	r0, [r0, #4]
   1108c:	e3500000 	cmp	r0, #0
   11090:	0a000002 	beq	110a0 <CDWHCIRootPort::~CDWHCIRootPort()+0x20>
   11094:	e5903000 	ldr	r3, [r0]
   11098:	e5933004 	ldr	r3, [r3, #4]
   1109c:	e12fff33 	blx	r3
   110a0:	e1a00004 	mov	r0, r4
   110a4:	e8bd8010 	pop	{r4, pc}

000110a8 <CDWHCIRootPort::Initialize()>:
   110a8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   110ac:	e1a04000 	mov	r4, r0
   110b0:	e5900000 	ldr	r0, [r0]
   110b4:	e24dd00c 	sub	sp, sp, #12
   110b8:	e3500000 	cmp	r0, #0
   110bc:	0a00004d 	beq	111f8 <CDWHCIRootPort::Initialize()+0x150>
   110c0:	ebffe278 	bl	9aa8 <CDWHCIDevice::GetPortSpeed()>
   110c4:	e3500003 	cmp	r0, #3
   110c8:	e1a05000 	mov	r5, r0
   110cc:	0a000042 	beq	111dc <CDWHCIRootPort::Initialize()+0x134>
   110d0:	e5943004 	ldr	r3, [r4, #4]
   110d4:	e3530000 	cmp	r3, #0
   110d8:	0a000003 	beq	110ec <CDWHCIRootPort::Initialize()+0x44>
   110dc:	e3a02036 	mov	r2, #54	; 0x36
   110e0:	e59f1128 	ldr	r1, [pc, #296]	; 11210 <CDWHCIRootPort::Initialize()+0x168>
   110e4:	e59f0128 	ldr	r0, [pc, #296]	; 11214 <CDWHCIRootPort::Initialize()+0x16c>
   110e8:	eb002419 	bl	1a154 <assertion_failed>
   110ec:	e3a00048 	mov	r0, #72	; 0x48
   110f0:	eb0041ab 	bl	217a4 <operator new(unsigned int)>
   110f4:	e3a07001 	mov	r7, #1
   110f8:	e3a03000 	mov	r3, #0
   110fc:	e1a06000 	mov	r6, r0
   11100:	e5941000 	ldr	r1, [r4]
   11104:	e1a02005 	mov	r2, r5
   11108:	e88d0088 	stm	sp, {r3, r7}
   1110c:	ebffef6e 	bl	cecc <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, bool, unsigned char, unsigned char)>
   11110:	e5846004 	str	r6, [r4, #4]
   11114:	e1a00006 	mov	r0, r6
   11118:	ebfff0ed 	bl	d4d4 <CUSBDevice::Initialize()>
   1111c:	e3500000 	cmp	r0, #0
   11120:	e5940004 	ldr	r0, [r4, #4]
   11124:	1a00000a 	bne	11154 <CDWHCIRootPort::Initialize()+0xac>
   11128:	e3500000 	cmp	r0, #0
   1112c:	0a000002 	beq	1113c <CDWHCIRootPort::Initialize()+0x94>
   11130:	e5903000 	ldr	r3, [r0]
   11134:	e5933004 	ldr	r3, [r3, #4]
   11138:	e12fff33 	blx	r3
   1113c:	e3a00000 	mov	r0, #0
   11140:	e1a05000 	mov	r5, r0
   11144:	e5840004 	str	r0, [r4, #4]
   11148:	e1a00005 	mov	r0, r5
   1114c:	e28dd00c 	add	sp, sp, #12
   11150:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   11154:	e5903000 	ldr	r3, [r0]
   11158:	e593300c 	ldr	r3, [r3, #12]
   1115c:	e12fff33 	blx	r3
   11160:	e2505000 	subs	r5, r0, #0
   11164:	0a000013 	beq	111b8 <CDWHCIRootPort::Initialize()+0x110>
   11168:	eb002dec 	bl	1c920 <CLogger::Get()>
   1116c:	e59f30a4 	ldr	r3, [pc, #164]	; 11218 <CDWHCIRootPort::Initialize()+0x170>
   11170:	e3a02004 	mov	r2, #4
   11174:	e59f10a0 	ldr	r1, [pc, #160]	; 1121c <CDWHCIRootPort::Initialize()+0x174>
   11178:	eb002f91 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1117c:	e5940000 	ldr	r0, [r4]
   11180:	ebffe25d 	bl	9afc <CDWHCIDevice::OvercurrentDetected()>
   11184:	e3500000 	cmp	r0, #0
   11188:	0affffee 	beq	11148 <CDWHCIRootPort::Initialize()+0xa0>
   1118c:	eb002de3 	bl	1c920 <CLogger::Get()>
   11190:	e1a02007 	mov	r2, r7
   11194:	e59f3084 	ldr	r3, [pc, #132]	; 11220 <CDWHCIRootPort::Initialize()+0x178>
   11198:	e59f107c 	ldr	r1, [pc, #124]	; 1121c <CDWHCIRootPort::Initialize()+0x174>
   1119c:	eb002f88 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   111a0:	e5940000 	ldr	r0, [r4]
   111a4:	ebffe263 	bl	9b38 <CDWHCIDevice::DisableRootPort()>
   111a8:	e5940004 	ldr	r0, [r4, #4]
   111ac:	e3500000 	cmp	r0, #0
   111b0:	1affffde 	bne	11130 <CDWHCIRootPort::Initialize()+0x88>
   111b4:	eaffffe0 	b	1113c <CDWHCIRootPort::Initialize()+0x94>
   111b8:	eb002dd8 	bl	1c920 <CLogger::Get()>
   111bc:	e59f3060 	ldr	r3, [pc, #96]	; 11224 <CDWHCIRootPort::Initialize()+0x17c>
   111c0:	e3a02002 	mov	r2, #2
   111c4:	e59f1050 	ldr	r1, [pc, #80]	; 1121c <CDWHCIRootPort::Initialize()+0x174>
   111c8:	eb002f7d 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   111cc:	e5940004 	ldr	r0, [r4, #4]
   111d0:	e3500000 	cmp	r0, #0
   111d4:	1affffd5 	bne	11130 <CDWHCIRootPort::Initialize()+0x88>
   111d8:	eaffffd7 	b	1113c <CDWHCIRootPort::Initialize()+0x94>
   111dc:	eb002dcf 	bl	1c920 <CLogger::Get()>
   111e0:	e59f3040 	ldr	r3, [pc, #64]	; 11228 <CDWHCIRootPort::Initialize()+0x180>
   111e4:	e3a02001 	mov	r2, #1
   111e8:	e59f102c 	ldr	r1, [pc, #44]	; 1121c <CDWHCIRootPort::Initialize()+0x174>
   111ec:	eb002f74 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   111f0:	e3a05000 	mov	r5, #0
   111f4:	eaffffd3 	b	11148 <CDWHCIRootPort::Initialize()+0xa0>
   111f8:	e59f002c 	ldr	r0, [pc, #44]	; 1122c <CDWHCIRootPort::Initialize()+0x184>
   111fc:	e3a0202c 	mov	r2, #44	; 0x2c
   11200:	e59f1008 	ldr	r1, [pc, #8]	; 11210 <CDWHCIRootPort::Initialize()+0x168>
   11204:	eb0023d2 	bl	1a154 <assertion_failed>
   11208:	e5940000 	ldr	r0, [r4]
   1120c:	eaffffab 	b	110c0 <CDWHCIRootPort::Initialize()+0x18>
   11210:	000246b8 	.word	0x000246b8
   11214:	000246e8 	.word	0x000246e8
   11218:	00024710 	.word	0x00024710
   1121c:	000246b0 	.word	0x000246b0
   11220:	00024724 	.word	0x00024724
   11224:	000246f8 	.word	0x000246f8
   11228:	000246cc 	.word	0x000246cc
   1122c:	000238f8 	.word	0x000238f8

00011230 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)>:
   11230:	e92d4070 	push	{r4, r5, r6, lr}
   11234:	e2505000 	subs	r5, r0, #0
   11238:	e1a04001 	mov	r4, r1
   1123c:	0a000012 	beq	1128c <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x5c>
   11240:	ebfff499 	bl	e4ac <CUSBRequest::GetStatus() const>
   11244:	e3500000 	cmp	r0, #0
   11248:	0a000009 	beq	11274 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x44>
   1124c:	e1a00005 	mov	r0, r5
   11250:	ebfff480 	bl	e458 <CUSBRequest::~CUSBRequest()>
   11254:	e1a00005 	mov	r0, r5
   11258:	e3a01028 	mov	r1, #40	; 0x28
   1125c:	ebfff507 	bl	e680 <CUSBRequest::operator delete(void*, unsigned int)>
   11260:	e3540000 	cmp	r4, #0
   11264:	0a000016 	beq	112c4 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x94>
   11268:	e1a00004 	mov	r0, r4
   1126c:	e8bd4070 	pop	{r4, r5, r6, lr}
   11270:	ea00414e 	b	217b0 <operator delete[](void*)>
   11274:	eb002da9 	bl	1c920 <CLogger::Get()>
   11278:	e59f3058 	ldr	r3, [pc, #88]	; 112d8 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0xa8>
   1127c:	e3a02002 	mov	r2, #2
   11280:	e59f1054 	ldr	r1, [pc, #84]	; 112dc <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0xac>
   11284:	eb002f4e 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11288:	eaffffef 	b	1124c <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x1c>
   1128c:	e3a020af 	mov	r2, #175	; 0xaf
   11290:	e59f1048 	ldr	r1, [pc, #72]	; 112e0 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0xb0>
   11294:	e59f0048 	ldr	r0, [pc, #72]	; 112e4 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0xb4>
   11298:	eb0023ad 	bl	1a154 <assertion_failed>
   1129c:	e1a00005 	mov	r0, r5
   112a0:	ebfff481 	bl	e4ac <CUSBRequest::GetStatus() const>
   112a4:	e3500000 	cmp	r0, #0
   112a8:	1affffec 	bne	11260 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x30>
   112ac:	eb002d9b 	bl	1c920 <CLogger::Get()>
   112b0:	e59f3020 	ldr	r3, [pc, #32]	; 112d8 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0xa8>
   112b4:	e3a02002 	mov	r2, #2
   112b8:	e59f101c 	ldr	r1, [pc, #28]	; 112dc <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0xac>
   112bc:	eb002f40 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   112c0:	eaffffe6 	b	11260 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x30>
   112c4:	e3a020b8 	mov	r2, #184	; 0xb8
   112c8:	e8bd4070 	pop	{r4, r5, r6, lr}
   112cc:	e59f100c 	ldr	r1, [pc, #12]	; 112e0 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0xb0>
   112d0:	e59f0010 	ldr	r0, [pc, #16]	; 112e8 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0xb8>
   112d4:	ea00239e 	b	1a154 <assertion_failed>
   112d8:	00024794 	.word	0x00024794
   112dc:	0002473c 	.word	0x0002473c
   112e0:	0002476c 	.word	0x0002476c
   112e4:	000231c4 	.word	0x000231c4
   112e8:	00024780 	.word	0x00024780

000112ec <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>:
   112ec:	e92d4070 	push	{r4, r5, r6, lr}
   112f0:	e1a04000 	mov	r4, r0
   112f4:	e1a05002 	mov	r5, r2
   112f8:	eb000c16 	bl	14358 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   112fc:	e3a03000 	mov	r3, #0
   11300:	e59f2030 	ldr	r2, [pc, #48]	; 11338 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)+0x4c>
   11304:	e1550003 	cmp	r5, r3
   11308:	e5845010 	str	r5, [r4, #16]
   1130c:	e5842000 	str	r2, [r4]
   11310:	e5843014 	str	r3, [r4, #20]
   11314:	e5843018 	str	r3, [r4, #24]
   11318:	e584301c 	str	r3, [r4, #28]
   1131c:	e5843020 	str	r3, [r4, #32]
   11320:	0a000002 	beq	11330 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)+0x44>
   11324:	e1a00005 	mov	r0, r5
   11328:	eb00411e 	bl	217a8 <operator new[](unsigned int)>
   1132c:	e5840020 	str	r0, [r4, #32]
   11330:	e1a00004 	mov	r0, r4
   11334:	e8bd8070 	pop	{r4, r5, r6, pc}
   11338:	0002474c 	.word	0x0002474c

0001133c <CUSBHIDDevice::~CUSBHIDDevice()>:
   1133c:	e92d4070 	push	{r4, r5, r6, lr}
   11340:	e1a04000 	mov	r4, r0
   11344:	e5900020 	ldr	r0, [r0, #32]
   11348:	e59f3074 	ldr	r3, [pc, #116]	; 113c4 <CUSBHIDDevice::~CUSBHIDDevice()+0x88>
   1134c:	e3500000 	cmp	r0, #0
   11350:	e5843000 	str	r3, [r4]
   11354:	0a000000 	beq	1135c <CUSBHIDDevice::~CUSBHIDDevice()+0x20>
   11358:	eb004114 	bl	217b0 <operator delete[](void*)>
   1135c:	e3a03000 	mov	r3, #0
   11360:	e5945018 	ldr	r5, [r4, #24]
   11364:	e5843020 	str	r3, [r4, #32]
   11368:	e1550003 	cmp	r5, r3
   1136c:	0a000004 	beq	11384 <CUSBHIDDevice::~CUSBHIDDevice()+0x48>
   11370:	e1a00005 	mov	r0, r5
   11374:	ebfff30f 	bl	dfb8 <CUSBEndpoint::~CUSBEndpoint()>
   11378:	e1a00005 	mov	r0, r5
   1137c:	e3a01014 	mov	r1, #20
   11380:	eb00410b 	bl	217b4 <operator delete(void*, unsigned int)>
   11384:	e3a03000 	mov	r3, #0
   11388:	e5945014 	ldr	r5, [r4, #20]
   1138c:	e5843018 	str	r3, [r4, #24]
   11390:	e1550003 	cmp	r5, r3
   11394:	0a000004 	beq	113ac <CUSBHIDDevice::~CUSBHIDDevice()+0x70>
   11398:	e1a00005 	mov	r0, r5
   1139c:	ebfff305 	bl	dfb8 <CUSBEndpoint::~CUSBEndpoint()>
   113a0:	e1a00005 	mov	r0, r5
   113a4:	e3a01014 	mov	r1, #20
   113a8:	eb004101 	bl	217b4 <operator delete(void*, unsigned int)>
   113ac:	e3a03000 	mov	r3, #0
   113b0:	e1a00004 	mov	r0, r4
   113b4:	e5843014 	str	r3, [r4, #20]
   113b8:	eb000b98 	bl	14220 <CUSBFunction::~CUSBFunction()>
   113bc:	e1a00004 	mov	r0, r4
   113c0:	e8bd8070 	pop	{r4, r5, r6, pc}
   113c4:	0002474c 	.word	0x0002474c

000113c8 <CUSBHIDDevice::~CUSBHIDDevice()>:
   113c8:	e92d4010 	push	{r4, lr}
   113cc:	e1a04000 	mov	r4, r0
   113d0:	ebffffd9 	bl	1133c <CUSBHIDDevice::~CUSBHIDDevice()>
   113d4:	e1a00004 	mov	r0, r4
   113d8:	e3a01024 	mov	r1, #36	; 0x24
   113dc:	eb0040f4 	bl	217b4 <operator delete(void*, unsigned int)>
   113e0:	e1a00004 	mov	r0, r4
   113e4:	e8bd8010 	pop	{r4, pc}

000113e8 <CUSBHIDDevice::Configure(unsigned int)>:
   113e8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   113ec:	e24dd010 	sub	sp, sp, #16
   113f0:	e1a07001 	mov	r7, r1
   113f4:	e1a05000 	mov	r5, r0
   113f8:	eb000c32 	bl	144c8 <CUSBFunction::GetNumEndpoints() const>
   113fc:	e2506000 	subs	r6, r0, #0
   11400:	13a06005 	movne	r6, #5
   11404:	13a08014 	movne	r8, #20
   11408:	1a000004 	bne	11420 <CUSBHIDDevice::Configure(unsigned int)+0x38>
   1140c:	ea00005d 	b	11588 <CUSBHIDDevice::Configure(unsigned int)+0x1a0>
   11410:	e5d43003 	ldrb	r3, [r4, #3]
   11414:	e203303f 	and	r3, r3, #63	; 0x3f
   11418:	e3530003 	cmp	r3, #3
   1141c:	0a00001a 	beq	1148c <CUSBHIDDevice::Configure(unsigned int)+0xa4>
   11420:	e1a01006 	mov	r1, r6
   11424:	e1a00005 	mov	r0, r5
   11428:	eb000c99 	bl	14694 <CUSBFunction::GetDescriptor(unsigned char)>
   1142c:	e2504000 	subs	r4, r0, #0
   11430:	1afffff6 	bne	11410 <CUSBHIDDevice::Configure(unsigned int)+0x28>
   11434:	e5956014 	ldr	r6, [r5, #20]
   11438:	e1a00005 	mov	r0, r5
   1143c:	e3560000 	cmp	r6, #0
   11440:	0a00004d 	beq	1157c <CUSBHIDDevice::Configure(unsigned int)+0x194>
   11444:	eb000c61 	bl	145d0 <CUSBFunction::Configure()>
   11448:	e2506000 	subs	r6, r0, #0
   1144c:	0a00001f 	beq	114d0 <CUSBHIDDevice::Configure(unsigned int)+0xe8>
   11450:	e1a00005 	mov	r0, r5
   11454:	eb000d06 	bl	14874 <CUSBFunction::GetInterfaceClass() const>
   11458:	e3500003 	cmp	r0, #3
   1145c:	0a00004d 	beq	11598 <CUSBHIDDevice::Configure(unsigned int)+0x1b0>
   11460:	e5953010 	ldr	r3, [r5, #16]
   11464:	e3530000 	cmp	r3, #0
   11468:	0a000020 	beq	114f0 <CUSBHIDDevice::Configure(unsigned int)+0x108>
   1146c:	e5953020 	ldr	r3, [r5, #32]
   11470:	e3530000 	cmp	r3, #0
   11474:	1a00001a 	bne	114e4 <CUSBHIDDevice::Configure(unsigned int)+0xfc>
   11478:	e3a02082 	mov	r2, #130	; 0x82
   1147c:	e59f11a4 	ldr	r1, [pc, #420]	; 11628 <CUSBHIDDevice::Configure(unsigned int)+0x240>
   11480:	e59f01a4 	ldr	r0, [pc, #420]	; 1162c <CUSBHIDDevice::Configure(unsigned int)+0x244>
   11484:	eb002332 	bl	1a154 <assertion_failed>
   11488:	ea000015 	b	114e4 <CUSBHIDDevice::Configure(unsigned int)+0xfc>
   1148c:	e1d430d2 	ldrsb	r3, [r4, #2]
   11490:	e3530000 	cmp	r3, #0
   11494:	ba000025 	blt	11530 <CUSBHIDDevice::Configure(unsigned int)+0x148>
   11498:	e5953018 	ldr	r3, [r5, #24]
   1149c:	e1a00005 	mov	r0, r5
   114a0:	e3530000 	cmp	r3, #0
   114a4:	1a00005b 	bne	11618 <CUSBHIDDevice::Configure(unsigned int)+0x230>
   114a8:	eb000c16 	bl	14508 <CUSBFunction::GetDevice() const>
   114ac:	e1a0a000 	mov	sl, r0
   114b0:	e1a00008 	mov	r0, r8
   114b4:	eb0040ba 	bl	217a4 <operator new(unsigned int)>
   114b8:	e1a09000 	mov	r9, r0
   114bc:	e1a02004 	mov	r2, r4
   114c0:	e1a0100a 	mov	r1, sl
   114c4:	ebfff229 	bl	dd70 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   114c8:	e5859018 	str	r9, [r5, #24]
   114cc:	eaffffd3 	b	11420 <CUSBHIDDevice::Configure(unsigned int)+0x38>
   114d0:	eb002d12 	bl	1c920 <CLogger::Get()>
   114d4:	e59f3154 	ldr	r3, [pc, #340]	; 11630 <CUSBHIDDevice::Configure(unsigned int)+0x248>
   114d8:	e3a02001 	mov	r2, #1
   114dc:	e59f1150 	ldr	r1, [pc, #336]	; 11634 <CUSBHIDDevice::Configure(unsigned int)+0x24c>
   114e0:	eb002eb7 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   114e4:	e1a00006 	mov	r0, r6
   114e8:	e28dd010 	add	sp, sp, #16
   114ec:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   114f0:	e3570000 	cmp	r7, #0
   114f4:	e5857010 	str	r7, [r5, #16]
   114f8:	0a00001a 	beq	11568 <CUSBHIDDevice::Configure(unsigned int)+0x180>
   114fc:	e5953020 	ldr	r3, [r5, #32]
   11500:	e3530000 	cmp	r3, #0
   11504:	0a000003 	beq	11518 <CUSBHIDDevice::Configure(unsigned int)+0x130>
   11508:	e3a0207f 	mov	r2, #127	; 0x7f
   1150c:	e59f1114 	ldr	r1, [pc, #276]	; 11628 <CUSBHIDDevice::Configure(unsigned int)+0x240>
   11510:	e59f0120 	ldr	r0, [pc, #288]	; 11638 <CUSBHIDDevice::Configure(unsigned int)+0x250>
   11514:	eb00230e 	bl	1a154 <assertion_failed>
   11518:	e5950010 	ldr	r0, [r5, #16]
   1151c:	eb0040a1 	bl	217a8 <operator new[](unsigned int)>
   11520:	e5850020 	str	r0, [r5, #32]
   11524:	e1a00006 	mov	r0, r6
   11528:	e28dd010 	add	sp, sp, #16
   1152c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11530:	e5953014 	ldr	r3, [r5, #20]
   11534:	e1a00005 	mov	r0, r5
   11538:	e3530000 	cmp	r3, #0
   1153c:	1a000035 	bne	11618 <CUSBHIDDevice::Configure(unsigned int)+0x230>
   11540:	eb000bf0 	bl	14508 <CUSBFunction::GetDevice() const>
   11544:	e1a0a000 	mov	sl, r0
   11548:	e1a00008 	mov	r0, r8
   1154c:	eb004094 	bl	217a4 <operator new(unsigned int)>
   11550:	e1a09000 	mov	r9, r0
   11554:	e1a02004 	mov	r2, r4
   11558:	e1a0100a 	mov	r1, sl
   1155c:	ebfff203 	bl	dd70 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   11560:	e5859014 	str	r9, [r5, #20]
   11564:	eaffffad 	b	11420 <CUSBHIDDevice::Configure(unsigned int)+0x38>
   11568:	e3a0207d 	mov	r2, #125	; 0x7d
   1156c:	e59f10b4 	ldr	r1, [pc, #180]	; 11628 <CUSBHIDDevice::Configure(unsigned int)+0x240>
   11570:	e59f00c4 	ldr	r0, [pc, #196]	; 1163c <CUSBHIDDevice::Configure(unsigned int)+0x254>
   11574:	eb0022f6 	bl	1a154 <assertion_failed>
   11578:	eaffffdf 	b	114fc <CUSBHIDDevice::Configure(unsigned int)+0x114>
   1157c:	e59f10b0 	ldr	r1, [pc, #176]	; 11634 <CUSBHIDDevice::Configure(unsigned int)+0x24c>
   11580:	eb000c56 	bl	146e0 <CUSBFunction::ConfigurationError(char const*) const>
   11584:	eaffffd6 	b	114e4 <CUSBHIDDevice::Configure(unsigned int)+0xfc>
   11588:	e1a00005 	mov	r0, r5
   1158c:	e59f10a0 	ldr	r1, [pc, #160]	; 11634 <CUSBHIDDevice::Configure(unsigned int)+0x24c>
   11590:	eb000c52 	bl	146e0 <CUSBFunction::ConfigurationError(char const*) const>
   11594:	eaffffd2 	b	114e4 <CUSBHIDDevice::Configure(unsigned int)+0xfc>
   11598:	e1a00005 	mov	r0, r5
   1159c:	eb000cc4 	bl	148b4 <CUSBFunction::GetInterfaceSubClass() const>
   115a0:	e3500001 	cmp	r0, #1
   115a4:	e1a0a000 	mov	sl, r0
   115a8:	1affffac 	bne	11460 <CUSBHIDDevice::Configure(unsigned int)+0x78>
   115ac:	e1a00005 	mov	r0, r5
   115b0:	eb000bf5 	bl	1458c <CUSBFunction::GetHost() const>
   115b4:	e1a08000 	mov	r8, r0
   115b8:	e1a00005 	mov	r0, r5
   115bc:	eb000be1 	bl	14548 <CUSBFunction::GetEndpoint0() const>
   115c0:	e1a09000 	mov	r9, r0
   115c4:	e1a00005 	mov	r0, r5
   115c8:	eb000c99 	bl	14834 <CUSBFunction::GetInterfaceNumber() const>
   115cc:	e6ff0070 	uxth	r0, r0
   115d0:	e58d0004 	str	r0, [sp, #4]
   115d4:	e1a01009 	mov	r1, r9
   115d8:	e1a00008 	mov	r0, r8
   115dc:	e58d400c 	str	r4, [sp, #12]
   115e0:	e58d4008 	str	r4, [sp, #8]
   115e4:	e58d4000 	str	r4, [sp]
   115e8:	e3a0300b 	mov	r3, #11
   115ec:	e3a02021 	mov	r2, #33	; 0x21
   115f0:	ebfff2f4 	bl	e1c8 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   115f4:	e3500000 	cmp	r0, #0
   115f8:	aaffff98 	bge	11460 <CUSBHIDDevice::Configure(unsigned int)+0x78>
   115fc:	eb002cc7 	bl	1c920 <CLogger::Get()>
   11600:	e1a0200a 	mov	r2, sl
   11604:	e59f3034 	ldr	r3, [pc, #52]	; 11640 <CUSBHIDDevice::Configure(unsigned int)+0x258>
   11608:	e59f1024 	ldr	r1, [pc, #36]	; 11634 <CUSBHIDDevice::Configure(unsigned int)+0x24c>
   1160c:	e1a06004 	mov	r6, r4
   11610:	eb002e6b 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11614:	eaffffb2 	b	114e4 <CUSBHIDDevice::Configure(unsigned int)+0xfc>
   11618:	e59f1014 	ldr	r1, [pc, #20]	; 11634 <CUSBHIDDevice::Configure(unsigned int)+0x24c>
   1161c:	eb000c2f 	bl	146e0 <CUSBFunction::ConfigurationError(char const*) const>
   11620:	e3a06000 	mov	r6, #0
   11624:	eaffffae 	b	114e4 <CUSBHIDDevice::Configure(unsigned int)+0xfc>
   11628:	0002476c 	.word	0x0002476c
   1162c:	000247fc 	.word	0x000247fc
   11630:	000241a8 	.word	0x000241a8
   11634:	0002473c 	.word	0x0002473c
   11638:	000247e4 	.word	0x000247e4
   1163c:	000247cc 	.word	0x000247cc
   11640:	000247b0 	.word	0x000247b0

00011644 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>:
   11644:	e590c018 	ldr	ip, [r0, #24]
   11648:	e35c0000 	cmp	ip, #0
   1164c:	0a000019 	beq	116b8 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x74>
   11650:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   11654:	e3510000 	cmp	r1, #0
   11658:	e24dd00c 	sub	sp, sp, #12
   1165c:	e1a07003 	mov	r7, r3
   11660:	e1a06002 	mov	r6, r2
   11664:	e1a05001 	mov	r5, r1
   11668:	e1a04000 	mov	r4, r0
   1166c:	0a000013 	beq	116c0 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x7c>
   11670:	e3560000 	cmp	r6, #0
   11674:	0a00000a 	beq	116a4 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x60>
   11678:	e1a00004 	mov	r0, r4
   1167c:	eb000bc2 	bl	1458c <CUSBFunction::GetHost() const>
   11680:	e5941018 	ldr	r1, [r4, #24]
   11684:	e1a03006 	mov	r3, r6
   11688:	e58d7000 	str	r7, [sp]
   1168c:	e1a02005 	mov	r2, r5
   11690:	ebfff332 	bl	e360 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   11694:	e1e00000 	mvn	r0, r0
   11698:	e1a00fa0 	lsr	r0, r0, #31
   1169c:	e28dd00c 	add	sp, sp, #12
   116a0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   116a4:	e3a0208f 	mov	r2, #143	; 0x8f
   116a8:	e59f1024 	ldr	r1, [pc, #36]	; 116d4 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x90>
   116ac:	e59f0024 	ldr	r0, [pc, #36]	; 116d8 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x94>
   116b0:	eb0022a7 	bl	1a154 <assertion_failed>
   116b4:	eaffffef 	b	11678 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x34>
   116b8:	e1a0000c 	mov	r0, ip
   116bc:	e12fff1e 	bx	lr
   116c0:	e3a0208e 	mov	r2, #142	; 0x8e
   116c4:	e59f1008 	ldr	r1, [pc, #8]	; 116d4 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x90>
   116c8:	e59f000c 	ldr	r0, [pc, #12]	; 116dc <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x98>
   116cc:	eb0022a0 	bl	1a154 <assertion_failed>
   116d0:	eaffffe6 	b	11670 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x2c>
   116d4:	0002476c 	.word	0x0002476c
   116d8:	00024814 	.word	0x00024814
   116dc:	000242a4 	.word	0x000242a4

000116e0 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)>:
   116e0:	e590c018 	ldr	ip, [r0, #24]
   116e4:	e35c0000 	cmp	ip, #0
   116e8:	0a00002b 	beq	1179c <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xbc>
   116ec:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   116f0:	e3510000 	cmp	r1, #0
   116f4:	e24dd008 	sub	sp, sp, #8
   116f8:	e1a07003 	mov	r7, r3
   116fc:	e1a05002 	mov	r5, r2
   11700:	e1a06001 	mov	r6, r1
   11704:	e1a04000 	mov	r4, r0
   11708:	0a000025 	beq	117a4 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xc4>
   1170c:	e3550000 	cmp	r5, #0
   11710:	0a00001c 	beq	11788 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xa8>
   11714:	e1a00005 	mov	r0, r5
   11718:	eb004022 	bl	217a8 <operator new[](unsigned int)>
   1171c:	e1a02005 	mov	r2, r5
   11720:	e1a01006 	mov	r1, r6
   11724:	e1a08000 	mov	r8, r0
   11728:	eb003d21 	bl	20bb4 <memcpy>
   1172c:	e3a00028 	mov	r0, #40	; 0x28
   11730:	ebfff3ba 	bl	e620 <CUSBRequest::operator new(unsigned int)>
   11734:	e3a0c000 	mov	ip, #0
   11738:	e1a06000 	mov	r6, r0
   1173c:	e5941018 	ldr	r1, [r4, #24]
   11740:	e1a03005 	mov	r3, r5
   11744:	e58dc000 	str	ip, [sp]
   11748:	e1a02008 	mov	r2, r8
   1174c:	ebfff31c 	bl	e3c4 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   11750:	e1a03004 	mov	r3, r4
   11754:	e1a02008 	mov	r2, r8
   11758:	e1a00006 	mov	r0, r6
   1175c:	e59f1054 	ldr	r1, [pc, #84]	; 117b8 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xd8>
   11760:	ebfff38c 	bl	e598 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   11764:	e1a00004 	mov	r0, r4
   11768:	eb000b87 	bl	1458c <CUSBFunction::GetHost() const>
   1176c:	e1a01006 	mov	r1, r6
   11770:	e1a02007 	mov	r2, r7
   11774:	e5903000 	ldr	r3, [r0]
   11778:	e593300c 	ldr	r3, [r3, #12]
   1177c:	e28dd008 	add	sp, sp, #8
   11780:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   11784:	e12fff13 	bx	r3
   11788:	e3a020a1 	mov	r2, #161	; 0xa1
   1178c:	e59f1028 	ldr	r1, [pc, #40]	; 117bc <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xdc>
   11790:	e59f0028 	ldr	r0, [pc, #40]	; 117c0 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xe0>
   11794:	eb00226e 	bl	1a154 <assertion_failed>
   11798:	eaffffdd 	b	11714 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0x34>
   1179c:	e1a0000c 	mov	r0, ip
   117a0:	e12fff1e 	bx	lr
   117a4:	e3a020a0 	mov	r2, #160	; 0xa0
   117a8:	e59f100c 	ldr	r1, [pc, #12]	; 117bc <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xdc>
   117ac:	e59f0010 	ldr	r0, [pc, #16]	; 117c4 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xe4>
   117b0:	eb002267 	bl	1a154 <assertion_failed>
   117b4:	eaffffd4 	b	1170c <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0x2c>
   117b8:	00011230 	.word	0x00011230
   117bc:	0002476c 	.word	0x0002476c
   117c0:	00024814 	.word	0x00024814
   117c4:	000242a4 	.word	0x000242a4

000117c8 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>:
   117c8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   117cc:	e1a04000 	mov	r4, r0
   117d0:	e590001c 	ldr	r0, [r0, #28]
   117d4:	e24dd00c 	sub	sp, sp, #12
   117d8:	e3500000 	cmp	r0, #0
   117dc:	e1a05001 	mov	r5, r1
   117e0:	e1a06002 	mov	r6, r2
   117e4:	e1a07003 	mov	r7, r3
   117e8:	0a000003 	beq	117fc <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x34>
   117ec:	e3a020be 	mov	r2, #190	; 0xbe
   117f0:	e59f107c 	ldr	r1, [pc, #124]	; 11874 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xac>
   117f4:	e59f007c 	ldr	r0, [pc, #124]	; 11878 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xb0>
   117f8:	eb002255 	bl	1a154 <assertion_failed>
   117fc:	e5943014 	ldr	r3, [r4, #20]
   11800:	e3530000 	cmp	r3, #0
   11804:	0a000015 	beq	11860 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x98>
   11808:	e3550000 	cmp	r5, #0
   1180c:	0a00000e 	beq	1184c <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x84>
   11810:	e3560000 	cmp	r6, #0
   11814:	1a000003 	bne	11828 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x60>
   11818:	e3a020c2 	mov	r2, #194	; 0xc2
   1181c:	e59f1050 	ldr	r1, [pc, #80]	; 11874 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xac>
   11820:	e59f0054 	ldr	r0, [pc, #84]	; 1187c <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xb4>
   11824:	eb00224a 	bl	1a154 <assertion_failed>
   11828:	e1a00004 	mov	r0, r4
   1182c:	eb000b56 	bl	1458c <CUSBFunction::GetHost() const>
   11830:	e5941014 	ldr	r1, [r4, #20]
   11834:	e1a03006 	mov	r3, r6
   11838:	e58d7000 	str	r7, [sp]
   1183c:	e1a02005 	mov	r2, r5
   11840:	ebfff2c6 	bl	e360 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   11844:	e28dd00c 	add	sp, sp, #12
   11848:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1184c:	e3a020c1 	mov	r2, #193	; 0xc1
   11850:	e59f101c 	ldr	r1, [pc, #28]	; 11874 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xac>
   11854:	e59f0024 	ldr	r0, [pc, #36]	; 11880 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xb8>
   11858:	eb00223d 	bl	1a154 <assertion_failed>
   1185c:	eaffffeb 	b	11810 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x48>
   11860:	e3a020c0 	mov	r2, #192	; 0xc0
   11864:	e59f1008 	ldr	r1, [pc, #8]	; 11874 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xac>
   11868:	e59f0014 	ldr	r0, [pc, #20]	; 11884 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xbc>
   1186c:	eb002238 	bl	1a154 <assertion_failed>
   11870:	eaffffe4 	b	11808 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x40>
   11874:	0002476c 	.word	0x0002476c
   11878:	00024824 	.word	0x00024824
   1187c:	00024814 	.word	0x00024814
   11880:	000242a4 	.word	0x000242a4
   11884:	00024830 	.word	0x00024830

00011888 <CUSBHIDDevice::StartRequest()>:
   11888:	e92d4070 	push	{r4, r5, r6, lr}
   1188c:	e5903014 	ldr	r3, [r0, #20]
   11890:	e24dd008 	sub	sp, sp, #8
   11894:	e3530000 	cmp	r3, #0
   11898:	e1a04000 	mov	r4, r0
   1189c:	0a000038 	beq	11984 <CUSBHIDDevice::StartRequest()+0xfc>
   118a0:	e5943020 	ldr	r3, [r4, #32]
   118a4:	e3530000 	cmp	r3, #0
   118a8:	0a000030 	beq	11970 <CUSBHIDDevice::StartRequest()+0xe8>
   118ac:	e594301c 	ldr	r3, [r4, #28]
   118b0:	e3530000 	cmp	r3, #0
   118b4:	0a000003 	beq	118c8 <CUSBHIDDevice::StartRequest()+0x40>
   118b8:	e3a020cb 	mov	r2, #203	; 0xcb
   118bc:	e59f10d4 	ldr	r1, [pc, #212]	; 11998 <CUSBHIDDevice::StartRequest()+0x110>
   118c0:	e59f00d4 	ldr	r0, [pc, #212]	; 1199c <CUSBHIDDevice::StartRequest()+0x114>
   118c4:	eb002222 	bl	1a154 <assertion_failed>
   118c8:	e5945010 	ldr	r5, [r4, #16]
   118cc:	e3550000 	cmp	r5, #0
   118d0:	0a000017 	beq	11934 <CUSBHIDDevice::StartRequest()+0xac>
   118d4:	e3a00028 	mov	r0, #40	; 0x28
   118d8:	ebfff350 	bl	e620 <CUSBRequest::operator new(unsigned int)>
   118dc:	e3a0c000 	mov	ip, #0
   118e0:	e1a05000 	mov	r5, r0
   118e4:	e5943010 	ldr	r3, [r4, #16]
   118e8:	e5942020 	ldr	r2, [r4, #32]
   118ec:	e5941014 	ldr	r1, [r4, #20]
   118f0:	e58dc000 	str	ip, [sp]
   118f4:	ebfff2b2 	bl	e3c4 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   118f8:	e1a00005 	mov	r0, r5
   118fc:	e584501c 	str	r5, [r4, #28]
   11900:	e1a03004 	mov	r3, r4
   11904:	e3a02000 	mov	r2, #0
   11908:	e59f1090 	ldr	r1, [pc, #144]	; 119a0 <CUSBHIDDevice::StartRequest()+0x118>
   1190c:	ebfff321 	bl	e598 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   11910:	e1a00004 	mov	r0, r4
   11914:	eb000b1c 	bl	1458c <CUSBFunction::GetHost() const>
   11918:	e3a02000 	mov	r2, #0
   1191c:	e5903000 	ldr	r3, [r0]
   11920:	e594101c 	ldr	r1, [r4, #28]
   11924:	e593300c 	ldr	r3, [r3, #12]
   11928:	e28dd008 	add	sp, sp, #8
   1192c:	e8bd4070 	pop	{r4, r5, r6, lr}
   11930:	e12fff13 	bx	r3
   11934:	e3a020cc 	mov	r2, #204	; 0xcc
   11938:	e59f1058 	ldr	r1, [pc, #88]	; 11998 <CUSBHIDDevice::StartRequest()+0x110>
   1193c:	e59f0060 	ldr	r0, [pc, #96]	; 119a4 <CUSBHIDDevice::StartRequest()+0x11c>
   11940:	eb002203 	bl	1a154 <assertion_failed>
   11944:	e3a00028 	mov	r0, #40	; 0x28
   11948:	ebfff334 	bl	e620 <CUSBRequest::operator new(unsigned int)>
   1194c:	e1a06000 	mov	r6, r0
   11950:	e5943010 	ldr	r3, [r4, #16]
   11954:	e5942020 	ldr	r2, [r4, #32]
   11958:	e5941014 	ldr	r1, [r4, #20]
   1195c:	e58d5000 	str	r5, [sp]
   11960:	ebfff297 	bl	e3c4 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   11964:	e1a00006 	mov	r0, r6
   11968:	e584601c 	str	r6, [r4, #28]
   1196c:	eaffffe3 	b	11900 <CUSBHIDDevice::StartRequest()+0x78>
   11970:	e3a020c9 	mov	r2, #201	; 0xc9
   11974:	e59f101c 	ldr	r1, [pc, #28]	; 11998 <CUSBHIDDevice::StartRequest()+0x110>
   11978:	e59f0028 	ldr	r0, [pc, #40]	; 119a8 <CUSBHIDDevice::StartRequest()+0x120>
   1197c:	eb0021f4 	bl	1a154 <assertion_failed>
   11980:	eaffffc9 	b	118ac <CUSBHIDDevice::StartRequest()+0x24>
   11984:	e3a020c8 	mov	r2, #200	; 0xc8
   11988:	e59f1008 	ldr	r1, [pc, #8]	; 11998 <CUSBHIDDevice::StartRequest()+0x110>
   1198c:	e59f0018 	ldr	r0, [pc, #24]	; 119ac <CUSBHIDDevice::StartRequest()+0x124>
   11990:	eb0021ef 	bl	1a154 <assertion_failed>
   11994:	eaffffc1 	b	118a0 <CUSBHIDDevice::StartRequest()+0x18>
   11998:	0002476c 	.word	0x0002476c
   1199c:	00024824 	.word	0x00024824
   119a0:	00011a9c 	.word	0x00011a9c
   119a4:	000247cc 	.word	0x000247cc
   119a8:	000247fc 	.word	0x000247fc
   119ac:	00024830 	.word	0x00024830

000119b0 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)>:
   119b0:	e92d4070 	push	{r4, r5, r6, lr}
   119b4:	e2515000 	subs	r5, r1, #0
   119b8:	e1a04000 	mov	r4, r0
   119bc:	0a00002c 	beq	11a74 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xc4>
   119c0:	e594301c 	ldr	r3, [r4, #28]
   119c4:	e1550003 	cmp	r5, r3
   119c8:	0a000003 	beq	119dc <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x2c>
   119cc:	e3a020d7 	mov	r2, #215	; 0xd7
   119d0:	e59f10b0 	ldr	r1, [pc, #176]	; 11a88 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xd8>
   119d4:	e59f00b0 	ldr	r0, [pc, #176]	; 11a8c <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xdc>
   119d8:	eb0021dd 	bl	1a154 <assertion_failed>
   119dc:	e1a00005 	mov	r0, r5
   119e0:	ebfff2b1 	bl	e4ac <CUSBRequest::GetStatus() const>
   119e4:	e2502000 	subs	r2, r0, #0
   119e8:	e5943000 	ldr	r3, [r4]
   119ec:	0a00001b 	beq	11a60 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xb0>
   119f0:	e1a00005 	mov	r0, r5
   119f4:	e5946020 	ldr	r6, [r4, #32]
   119f8:	e593501c 	ldr	r5, [r3, #28]
   119fc:	ebfff2ac 	bl	e4b4 <CUSBRequest::GetResultLength() const>
   11a00:	e1a01006 	mov	r1, r6
   11a04:	e1a02000 	mov	r2, r0
   11a08:	e1a00004 	mov	r0, r4
   11a0c:	e12fff35 	blx	r5
   11a10:	e594501c 	ldr	r5, [r4, #28]
   11a14:	e3550000 	cmp	r5, #0
   11a18:	0a000004 	beq	11a30 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x80>
   11a1c:	e1a00005 	mov	r0, r5
   11a20:	ebfff28c 	bl	e458 <CUSBRequest::~CUSBRequest()>
   11a24:	e1a00005 	mov	r0, r5
   11a28:	e3a01028 	mov	r1, #40	; 0x28
   11a2c:	ebfff313 	bl	e680 <CUSBRequest::operator delete(void*, unsigned int)>
   11a30:	e3a03000 	mov	r3, #0
   11a34:	e1a00004 	mov	r0, r4
   11a38:	e584301c 	str	r3, [r4, #28]
   11a3c:	ebffff91 	bl	11888 <CUSBHIDDevice::StartRequest()>
   11a40:	e3500000 	cmp	r0, #0
   11a44:	18bd8070 	popne	{r4, r5, r6, pc}
   11a48:	eb002bb4 	bl	1c920 <CLogger::Get()>
   11a4c:	e8bd4070 	pop	{r4, r5, r6, lr}
   11a50:	e59f3038 	ldr	r3, [pc, #56]	; 11a90 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xe0>
   11a54:	e3a02001 	mov	r2, #1
   11a58:	e59f1034 	ldr	r1, [pc, #52]	; 11a94 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xe4>
   11a5c:	ea002d58 	b	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11a60:	e593301c 	ldr	r3, [r3, #28]
   11a64:	e1a01002 	mov	r1, r2
   11a68:	e1a00004 	mov	r0, r4
   11a6c:	e12fff33 	blx	r3
   11a70:	eaffffe6 	b	11a10 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x60>
   11a74:	e3a020d6 	mov	r2, #214	; 0xd6
   11a78:	e59f1008 	ldr	r1, [pc, #8]	; 11a88 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xd8>
   11a7c:	e59f0014 	ldr	r0, [pc, #20]	; 11a98 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xe8>
   11a80:	eb0021b3 	bl	1a154 <assertion_failed>
   11a84:	eaffffcd 	b	119c0 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x10>
   11a88:	0002476c 	.word	0x0002476c
   11a8c:	00024848 	.word	0x00024848
   11a90:	00024858 	.word	0x00024858
   11a94:	0002473c 	.word	0x0002473c
   11a98:	000231c4 	.word	0x000231c4

00011a9c <CUSBHIDDevice::CompletionStub(CUSBRequest*, void*, void*)>:
   11a9c:	e92d4070 	push	{r4, r5, r6, lr}
   11aa0:	e2524000 	subs	r4, r2, #0
   11aa4:	e1a05000 	mov	r5, r0
   11aa8:	0a000003 	beq	11abc <CUSBHIDDevice::CompletionStub(CUSBRequest*, void*, void*)+0x20>
   11aac:	e1a01005 	mov	r1, r5
   11ab0:	e1a00004 	mov	r0, r4
   11ab4:	e8bd4070 	pop	{r4, r5, r6, lr}
   11ab8:	eaffffbc 	b	119b0 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)>
   11abc:	e59f1018 	ldr	r1, [pc, #24]	; 11adc <CUSBHIDDevice::CompletionStub(CUSBRequest*, void*, void*)+0x40>
   11ac0:	e59f0018 	ldr	r0, [pc, #24]	; 11ae0 <CUSBHIDDevice::CompletionStub(CUSBRequest*, void*, void*)+0x44>
   11ac4:	e3a020ee 	mov	r2, #238	; 0xee
   11ac8:	eb0021a1 	bl	1a154 <assertion_failed>
   11acc:	e1a01005 	mov	r1, r5
   11ad0:	e1a00004 	mov	r0, r4
   11ad4:	e8bd4070 	pop	{r4, r5, r6, lr}
   11ad8:	eaffffb4 	b	119b0 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)>
   11adc:	0002476c 	.word	0x0002476c
   11ae0:	00022ebc 	.word	0x00022ebc

00011ae4 <CUSBMouseDevice::~CUSBMouseDevice()>:
   11ae4:	e92d4010 	push	{r4, lr}
   11ae8:	e1a04000 	mov	r4, r0
   11aec:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   11af0:	e59f3044 	ldr	r3, [pc, #68]	; 11b3c <CUSBMouseDevice::~CUSBMouseDevice()+0x58>
   11af4:	e3500000 	cmp	r0, #0
   11af8:	e5843000 	str	r3, [r4]
   11afc:	0a000002 	beq	11b0c <CUSBMouseDevice::~CUSBMouseDevice()+0x28>
   11b00:	e5903000 	ldr	r3, [r0]
   11b04:	e5933004 	ldr	r3, [r3, #4]
   11b08:	e12fff33 	blx	r3
   11b0c:	e3a03000 	mov	r3, #0
   11b10:	e5940028 	ldr	r0, [r4, #40]	; 0x28
   11b14:	e5843024 	str	r3, [r4, #36]	; 0x24
   11b18:	e1500003 	cmp	r0, r3
   11b1c:	0a000000 	beq	11b24 <CUSBMouseDevice::~CUSBMouseDevice()+0x40>
   11b20:	eb003f22 	bl	217b0 <operator delete[](void*)>
   11b24:	e3a03000 	mov	r3, #0
   11b28:	e1a00004 	mov	r0, r4
   11b2c:	e5843028 	str	r3, [r4, #40]	; 0x28
   11b30:	ebfffe01 	bl	1133c <CUSBHIDDevice::~CUSBHIDDevice()>
   11b34:	e1a00004 	mov	r0, r4
   11b38:	e8bd8010 	pop	{r4, pc}
   11b3c:	00024878 	.word	0x00024878

00011b40 <CUSBMouseDevice::~CUSBMouseDevice()>:
   11b40:	e92d4010 	push	{r4, lr}
   11b44:	e1a04000 	mov	r4, r0
   11b48:	ebffffe5 	bl	11ae4 <CUSBMouseDevice::~CUSBMouseDevice()>
   11b4c:	e1a00004 	mov	r0, r4
   11b50:	e3a01030 	mov	r1, #48	; 0x30
   11b54:	eb003f16 	bl	217b4 <operator delete(void*, unsigned int)>
   11b58:	e1a00004 	mov	r0, r4
   11b5c:	e8bd8010 	pop	{r4, pc}

00011b60 <CUSBMouseDevice::Configure()>:
   11b60:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   11b64:	e3a01021 	mov	r1, #33	; 0x21
   11b68:	e24dd014 	sub	sp, sp, #20
   11b6c:	e1a04000 	mov	r4, r0
   11b70:	eb000ac7 	bl	14694 <CUSBFunction::GetDescriptor(unsigned char)>
   11b74:	e2505000 	subs	r5, r0, #0
   11b78:	0a000003 	beq	11b8c <CUSBMouseDevice::Configure()+0x2c>
   11b7c:	e5d50007 	ldrb	r0, [r5, #7]
   11b80:	e5d53008 	ldrb	r3, [r5, #8]
   11b84:	e1900403 	orrs	r0, r0, r3, lsl #8
   11b88:	1a000006 	bne	11ba8 <CUSBMouseDevice::Configure()+0x48>
   11b8c:	e1a00004 	mov	r0, r4
   11b90:	e59f10f0 	ldr	r1, [pc, #240]	; 11c88 <CUSBMouseDevice::Configure()+0x128>
   11b94:	eb000ad1 	bl	146e0 <CUSBFunction::ConfigurationError(char const*) const>
   11b98:	e3a05000 	mov	r5, #0
   11b9c:	e1a00005 	mov	r0, r5
   11ba0:	e28dd014 	add	sp, sp, #20
   11ba4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   11ba8:	e1c402bc 	strh	r0, [r4, #44]	; 0x2c
   11bac:	eb003efd 	bl	217a8 <operator new[](unsigned int)>
   11bb0:	e5840028 	str	r0, [r4, #40]	; 0x28
   11bb4:	e1a00004 	mov	r0, r4
   11bb8:	eb000a73 	bl	1458c <CUSBFunction::GetHost() const>
   11bbc:	e1a06000 	mov	r6, r0
   11bc0:	e1a00004 	mov	r0, r4
   11bc4:	eb000a5f 	bl	14548 <CUSBFunction::GetEndpoint0() const>
   11bc8:	e1a07000 	mov	r7, r0
   11bcc:	e1a00004 	mov	r0, r4
   11bd0:	e5d55006 	ldrb	r5, [r5, #6]
   11bd4:	e5948028 	ldr	r8, [r4, #40]	; 0x28
   11bd8:	e1d492bc 	ldrh	r9, [r4, #44]	; 0x2c
   11bdc:	eb000b14 	bl	14834 <CUSBFunction::GetInterfaceNumber() const>
   11be0:	e3a03081 	mov	r3, #129	; 0x81
   11be4:	e6ff0070 	uxth	r0, r0
   11be8:	e58d000c 	str	r0, [sp, #12]
   11bec:	e58d3008 	str	r3, [sp, #8]
   11bf0:	e88d0300 	stm	sp, {r8, r9}
   11bf4:	e3a03000 	mov	r3, #0
   11bf8:	e1a02005 	mov	r2, r5
   11bfc:	e1a01007 	mov	r1, r7
   11c00:	e1a00006 	mov	r0, r6
   11c04:	ebfff1a1 	bl	e290 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   11c08:	e1d432bc 	ldrh	r3, [r4, #44]	; 0x2c
   11c0c:	e1500003 	cmp	r0, r3
   11c10:	0a000008 	beq	11c38 <CUSBMouseDevice::Configure()+0xd8>
   11c14:	e3a05000 	mov	r5, #0
   11c18:	eb002b40 	bl	1c920 <CLogger::Get()>
   11c1c:	e59f3068 	ldr	r3, [pc, #104]	; 11c8c <CUSBMouseDevice::Configure()+0x12c>
   11c20:	e3a02001 	mov	r2, #1
   11c24:	e59f105c 	ldr	r1, [pc, #92]	; 11c88 <CUSBMouseDevice::Configure()+0x128>
   11c28:	eb002ce5 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11c2c:	e1a00005 	mov	r0, r5
   11c30:	e28dd014 	add	sp, sp, #20
   11c34:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   11c38:	e3a01000 	mov	r1, #0
   11c3c:	e1a00004 	mov	r0, r4
   11c40:	ebfffde8 	bl	113e8 <CUSBHIDDevice::Configure(unsigned int)>
   11c44:	e2505000 	subs	r5, r0, #0
   11c48:	0a000008 	beq	11c70 <CUSBMouseDevice::Configure()+0x110>
   11c4c:	e3a00028 	mov	r0, #40	; 0x28
   11c50:	eb003ed3 	bl	217a4 <operator new(unsigned int)>
   11c54:	e1a05000 	mov	r5, r0
   11c58:	eb001da9 	bl	19304 <CMouseDevice::CMouseDevice()>
   11c5c:	e1a00004 	mov	r0, r4
   11c60:	e5845024 	str	r5, [r4, #36]	; 0x24
   11c64:	e28dd014 	add	sp, sp, #20
   11c68:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
   11c6c:	eaffff05 	b	11888 <CUSBHIDDevice::StartRequest()>
   11c70:	eb002b2a 	bl	1c920 <CLogger::Get()>
   11c74:	e59f3014 	ldr	r3, [pc, #20]	; 11c90 <CUSBMouseDevice::Configure()+0x130>
   11c78:	e3a02001 	mov	r2, #1
   11c7c:	e59f1004 	ldr	r1, [pc, #4]	; 11c88 <CUSBMouseDevice::Configure()+0x128>
   11c80:	eb002ccf 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11c84:	eaffffc4 	b	11b9c <CUSBMouseDevice::Configure()+0x3c>
   11c88:	00024898 	.word	0x00024898
   11c8c:	000248a0 	.word	0x000248a0
   11c90:	0002467c 	.word	0x0002467c

00011c94 <CUSBMouseDevice::ReportHandler(unsigned char const*, unsigned int)>:
   11c94:	e2913000 	adds	r3, r1, #0
   11c98:	13a03001 	movne	r3, #1
   11c9c:	e3520003 	cmp	r2, #3
   11ca0:	13a03000 	movne	r3, #0
   11ca4:	e3530000 	cmp	r3, #0
   11ca8:	e1a02001 	mov	r2, r1
   11cac:	012fff1e 	bxeq	lr
   11cb0:	e5d13000 	ldrb	r3, [r1]
   11cb4:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   11cb8:	e3130002 	tst	r3, #2
   11cbc:	e2031001 	and	r1, r3, #1
   11cc0:	13811002 	orrne	r1, r1, #2
   11cc4:	e3130004 	tst	r3, #4
   11cc8:	13811004 	orrne	r1, r1, #4
   11ccc:	e3500000 	cmp	r0, #0
   11cd0:	012fff1e 	bxeq	lr
   11cd4:	e1d230d2 	ldrsb	r3, [r2, #2]
   11cd8:	e1d220d1 	ldrsb	r2, [r2, #1]
   11cdc:	ea001dc5 	b	193f8 <CMouseDevice::ReportHandler(unsigned int, int, int)>

00011ce0 <CUSBMouseDevice::CUSBMouseDevice(CUSBFunction*)>:
   11ce0:	e92d4010 	push	{r4, lr}
   11ce4:	e3a02003 	mov	r2, #3
   11ce8:	e1a04000 	mov	r4, r0
   11cec:	ebfffd7e 	bl	112ec <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>
   11cf0:	e3a03000 	mov	r3, #0
   11cf4:	e59f2010 	ldr	r2, [pc, #16]	; 11d0c <CUSBMouseDevice::CUSBMouseDevice(CUSBFunction*)+0x2c>
   11cf8:	e5843024 	str	r3, [r4, #36]	; 0x24
   11cfc:	e5842000 	str	r2, [r4]
   11d00:	e5843028 	str	r3, [r4, #40]	; 0x28
   11d04:	e1a00004 	mov	r0, r4
   11d08:	e8bd8010 	pop	{r4, pc}
   11d0c:	00024878 	.word	0x00024878

00011d10 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>:
   11d10:	e92d4010 	push	{r4, lr}
   11d14:	e1a04000 	mov	r4, r0
   11d18:	e5900134 	ldr	r0, [r0, #308]	; 0x134
   11d1c:	e59f3024 	ldr	r3, [pc, #36]	; 11d48 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()+0x38>
   11d20:	e3500000 	cmp	r0, #0
   11d24:	e5843000 	str	r3, [r4]
   11d28:	0a000000 	beq	11d30 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()+0x20>
   11d2c:	eb003e9f 	bl	217b0 <operator delete[](void*)>
   11d30:	e3a03000 	mov	r3, #0
   11d34:	e1a00004 	mov	r0, r4
   11d38:	e5843134 	str	r3, [r4, #308]	; 0x134
   11d3c:	eb001b71 	bl	18b08 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   11d40:	e1a00004 	mov	r0, r4
   11d44:	e8bd8010 	pop	{r4, pc}
   11d48:	000248cc 	.word	0x000248cc

00011d4c <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>:
   11d4c:	e92d4010 	push	{r4, lr}
   11d50:	e1a04000 	mov	r4, r0
   11d54:	ebffffed 	bl	11d10 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>
   11d58:	e1a00004 	mov	r0, r4
   11d5c:	e3a01f4f 	mov	r1, #316	; 0x13c
   11d60:	eb003e93 	bl	217b4 <operator delete(void*, unsigned int)>
   11d64:	e1a00004 	mov	r0, r4
   11d68:	e8bd8010 	pop	{r4, pc}

00011d6c <CUSBGamePadStandardDevice::CUSBGamePadStandardDevice(CUSBFunction*, bool)>:
   11d6c:	e92d4070 	push	{r4, r5, r6, lr}
   11d70:	e1a04000 	mov	r4, r0
   11d74:	e1a05002 	mov	r5, r2
   11d78:	eb001b50 	bl	18ac0 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   11d7c:	e3a03000 	mov	r3, #0
   11d80:	e59f0018 	ldr	r0, [pc, #24]	; 11da0 <CUSBGamePadStandardDevice::CUSBGamePadStandardDevice(CUSBFunction*, bool)+0x34>
   11d84:	e2841f4e 	add	r1, r4, #312	; 0x138
   11d88:	e5840000 	str	r0, [r4]
   11d8c:	e5c45130 	strb	r5, [r4, #304]	; 0x130
   11d90:	e5843134 	str	r3, [r4, #308]	; 0x134
   11d94:	e1a00004 	mov	r0, r4
   11d98:	e1c130b0 	strh	r3, [r1]
   11d9c:	e8bd8070 	pop	{r4, r5, r6, pc}
   11da0:	000248cc 	.word	0x000248cc

00011da4 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>:
   11da4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11da8:	e0814002 	add	r4, r1, r2
   11dac:	e2846007 	add	r6, r4, #7
   11db0:	e1a061a6 	lsr	r6, r6, #3
   11db4:	e1a0e1a1 	lsr	lr, r1, #3
   11db8:	e15e0006 	cmp	lr, r6
   11dbc:	e24dd00c 	sub	sp, sp, #12
   11dc0:	2a000037 	bcs	11ea4 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0x100>
   11dc4:	e3a07001 	mov	r7, #1
   11dc8:	e3a05000 	mov	r5, #0
   11dcc:	e2011007 	and	r1, r1, #7
   11dd0:	e0828001 	add	r8, r2, r1
   11dd4:	e1a08817 	lsl	r8, r7, r8
   11dd8:	e6ef8078 	uxtb	r8, r8
   11ddc:	e1a07117 	lsl	r7, r7, r1
   11de0:	e6ef7077 	uxtb	r7, r7
   11de4:	e2489001 	sub	r9, r8, #1
   11de8:	e2444001 	sub	r4, r4, #1
   11dec:	e0488007 	sub	r8, r8, r7
   11df0:	e6ef9079 	uxtb	r9, r9
   11df4:	e2677000 	rsb	r7, r7, #0
   11df8:	e1a03005 	mov	r3, r5
   11dfc:	e1a0c00e 	mov	ip, lr
   11e00:	e1a041a4 	lsr	r4, r4, #3
   11e04:	e080000e 	add	r0, r0, lr
   11e08:	e58d9004 	str	r9, [sp, #4]
   11e0c:	e6ef8078 	uxtb	r8, r8
   11e10:	e6ef7077 	uxtb	r7, r7
   11e14:	e261b008 	rsb	fp, r1, #8
   11e18:	ea00000e 	b	11e58 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xb4>
   11e1c:	e15e000c 	cmp	lr, ip
   11e20:	0a000018 	beq	11e88 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xe4>
   11e24:	e15c0004 	cmp	ip, r4
   11e28:	05d09000 	ldrbeq	r9, [r0]
   11e2c:	059da004 	ldreq	sl, [sp, #4]
   11e30:	12855008 	addne	r5, r5, #8
   11e34:	15d0a000 	ldrbne	sl, [r0]
   11e38:	0009900a 	andeq	r9, r9, sl
   11e3c:	10429005 	subne	r9, r2, r5
   11e40:	01833009 	orreq	r3, r3, r9
   11e44:	1183391a 	orrne	r3, r3, sl, lsl r9
   11e48:	e28cc001 	add	ip, ip, #1
   11e4c:	e15c0006 	cmp	ip, r6
   11e50:	e2800001 	add	r0, r0, #1
   11e54:	0a000008 	beq	11e7c <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xd8>
   11e58:	e15e0004 	cmp	lr, r4
   11e5c:	1affffee 	bne	11e1c <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0x78>
   11e60:	e5d03000 	ldrb	r3, [r0]
   11e64:	e28cc001 	add	ip, ip, #1
   11e68:	e0033008 	and	r3, r3, r8
   11e6c:	e15c0006 	cmp	ip, r6
   11e70:	e1a03153 	asr	r3, r3, r1
   11e74:	e2800001 	add	r0, r0, #1
   11e78:	1afffff6 	bne	11e58 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xb4>
   11e7c:	e1a00003 	mov	r0, r3
   11e80:	e28dd00c 	add	sp, sp, #12
   11e84:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e88:	e5d03000 	ldrb	r3, [r0]
   11e8c:	e085500b 	add	r5, r5, fp
   11e90:	e0033007 	and	r3, r3, r7
   11e94:	e1a03153 	asr	r3, r3, r1
   11e98:	e0429005 	sub	r9, r2, r5
   11e9c:	e1a03913 	lsl	r3, r3, r9
   11ea0:	eaffffe8 	b	11e48 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xa4>
   11ea4:	e3a03000 	mov	r3, #0
   11ea8:	eafffff3 	b	11e7c <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xd8>

00011eac <CUSBGamePadStandardDevice::BitGetSigned(void const*, unsigned int, unsigned int)>:
   11eac:	e92d4010 	push	{r4, lr}
   11eb0:	e1a04002 	mov	r4, r2
   11eb4:	ebffffba 	bl	11da4 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   11eb8:	e3a02001 	mov	r2, #1
   11ebc:	e2443001 	sub	r3, r4, #1
   11ec0:	e0103312 	ands	r3, r0, r2, lsl r3
   11ec4:	11a02412 	lslne	r2, r2, r4
   11ec8:	12622000 	rsbne	r2, r2, #0
   11ecc:	11800002 	orrne	r0, r0, r2
   11ed0:	e8bd8010 	pop	{r4, pc}

00011ed4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)>:
   11ed4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ed8:	e5905134 	ldr	r5, [r0, #308]	; 0x134
   11edc:	e24dd034 	sub	sp, sp, #52	; 0x34
   11ee0:	e3550000 	cmp	r5, #0
   11ee4:	e58d0014 	str	r0, [sp, #20]
   11ee8:	e58d1000 	str	r1, [sp]
   11eec:	0a000109 	beq	12318 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x444>
   11ef0:	e3a09000 	mov	r9, #0
   11ef4:	e59f3450 	ldr	r3, [pc, #1104]	; 1234c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x478>
   11ef8:	e1a07009 	mov	r7, r9
   11efc:	e1a02003 	mov	r2, r3
   11f00:	e1a0a009 	mov	sl, r9
   11f04:	e1a0b009 	mov	fp, r9
   11f08:	e1a08009 	mov	r8, r9
   11f0c:	e58d300c 	str	r3, [sp, #12]
   11f10:	e59d3014 	ldr	r3, [sp, #20]
   11f14:	e58d9020 	str	r9, [sp, #32]
   11f18:	e2833f4e 	add	r3, r3, #312	; 0x138
   11f1c:	e1d340b0 	ldrh	r4, [r3]
   11f20:	e58d901c 	str	r9, [sp, #28]
   11f24:	e58d9004 	str	r9, [sp, #4]
   11f28:	e58d2010 	str	r2, [sp, #16]
   11f2c:	e58d2018 	str	r2, [sp, #24]
   11f30:	e58d2008 	str	r2, [sp, #8]
   11f34:	e3540000 	cmp	r4, #0
   11f38:	0a000024 	beq	11fd0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xfc>
   11f3c:	e1d530d0 	ldrsb	r3, [r5]
   11f40:	e2032003 	and	r2, r3, #3
   11f44:	e3520001 	cmp	r2, #1
   11f48:	0a00004e 	beq	12088 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1b4>
   11f4c:	e3520002 	cmp	r2, #2
   11f50:	0a000045 	beq	1206c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x198>
   11f54:	e3520000 	cmp	r2, #0
   11f58:	0a00003e 	beq	12058 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x184>
   11f5c:	e1d560d3 	ldrsb	r6, [r5, #3]
   11f60:	e1d520d2 	ldrsb	r2, [r5, #2]
   11f64:	e1d510d1 	ldrsb	r1, [r5, #1]
   11f68:	e1a06806 	lsl	r6, r6, #16
   11f6c:	e1866402 	orr	r6, r6, r2, lsl #8
   11f70:	e1d520d4 	ldrsb	r2, [r5, #4]
   11f74:	e2444005 	sub	r4, r4, #5
   11f78:	e1866001 	orr	r6, r6, r1
   11f7c:	e6ff4074 	uxth	r4, r4
   11f80:	e1866c02 	orr	r6, r6, r2, lsl #24
   11f84:	e2855005 	add	r5, r5, #5
   11f88:	e20330fc 	and	r3, r3, #252	; 0xfc
   11f8c:	e3530084 	cmp	r3, #132	; 0x84
   11f90:	0a000024 	beq	12028 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x154>
   11f94:	e3530034 	cmp	r3, #52	; 0x34
   11f98:	0a00003f 	beq	1209c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1c8>
   11f9c:	ca000016 	bgt	11ffc <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x128>
   11fa0:	e3530008 	cmp	r3, #8
   11fa4:	0a00003e 	beq	120a4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1d0>
   11fa8:	da00004c 	ble	120e0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x20c>
   11fac:	e3530014 	cmp	r3, #20
   11fb0:	058d6018 	streq	r6, [sp, #24]
   11fb4:	0affffde 	beq	11f34 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   11fb8:	e3530024 	cmp	r3, #36	; 0x24
   11fbc:	e59d2008 	ldr	r2, [sp, #8]
   11fc0:	01a02006 	moveq	r2, r6
   11fc4:	e3540000 	cmp	r4, #0
   11fc8:	e58d2008 	str	r2, [sp, #8]
   11fcc:	1affffda 	bne	11f3c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x68>
   11fd0:	e59d1014 	ldr	r1, [sp, #20]
   11fd4:	e59d001c 	ldr	r0, [sp, #28]
   11fd8:	e28b3007 	add	r3, fp, #7
   11fdc:	e5810024 	str	r0, [r1, #36]	; 0x24
   11fe0:	e59d0020 	ldr	r0, [sp, #32]
   11fe4:	e1a031a3 	lsr	r3, r3, #3
   11fe8:	e2812f4a 	add	r2, r1, #296	; 0x128
   11fec:	e58100e8 	str	r0, [r1, #232]	; 0xe8
   11ff0:	e1c230b0 	strh	r3, [r2]
   11ff4:	e28dd034 	add	sp, sp, #52	; 0x34
   11ff8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ffc:	e3530074 	cmp	r3, #116	; 0x74
   12000:	01a0a006 	moveq	sl, r6
   12004:	0affffca 	beq	11f34 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   12008:	da00003b 	ble	120fc <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x228>
   1200c:	e3530080 	cmp	r3, #128	; 0x80
   12010:	0a00002b 	beq	120c4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1f0>
   12014:	e3530094 	cmp	r3, #148	; 0x94
   12018:	e59d2004 	ldr	r2, [sp, #4]
   1201c:	01a02006 	moveq	r2, r6
   12020:	e58d2004 	str	r2, [sp, #4]
   12024:	eaffffc2 	b	11f34 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   12028:	e3570000 	cmp	r7, #0
   1202c:	1affffe7 	bne	11fd0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xfc>
   12030:	e3a02008 	mov	r2, #8
   12034:	e1a01008 	mov	r1, r8
   12038:	e59d0000 	ldr	r0, [sp]
   1203c:	ebffff58 	bl	11da4 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   12040:	e3500000 	cmp	r0, #0
   12044:	11500006 	cmpne	r0, r6
   12048:	1affffe9 	bne	11ff4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x120>
   1204c:	e1a07006 	mov	r7, r6
   12050:	e3a0b008 	mov	fp, #8
   12054:	eaffffb6 	b	11f34 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   12058:	e2444001 	sub	r4, r4, #1
   1205c:	e6ff4074 	uxth	r4, r4
   12060:	e2855001 	add	r5, r5, #1
   12064:	e1a06008 	mov	r6, r8
   12068:	eaffffc6 	b	11f88 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xb4>
   1206c:	e5d56001 	ldrb	r6, [r5, #1]
   12070:	e1d520d2 	ldrsb	r2, [r5, #2]
   12074:	e2444003 	sub	r4, r4, #3
   12078:	e6ff4074 	uxth	r4, r4
   1207c:	e1866402 	orr	r6, r6, r2, lsl #8
   12080:	e2855003 	add	r5, r5, #3
   12084:	eaffffbf 	b	11f88 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xb4>
   12088:	e2444002 	sub	r4, r4, #2
   1208c:	e1d560d1 	ldrsb	r6, [r5, #1]
   12090:	e6ff4074 	uxth	r4, r4
   12094:	e2855002 	add	r5, r5, #2
   12098:	eaffffba 	b	11f88 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xb4>
   1209c:	e58d6010 	str	r6, [sp, #16]
   120a0:	eaffffa3 	b	11f34 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   120a4:	e3560036 	cmp	r6, #54	; 0x36
   120a8:	ca000018 	bgt	12110 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x23c>
   120ac:	e3560030 	cmp	r6, #48	; 0x30
   120b0:	aa00002d 	bge	1216c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x298>
   120b4:	e2466004 	sub	r6, r6, #4
   120b8:	e3560001 	cmp	r6, #1
   120bc:	93a09001 	movls	r9, #1
   120c0:	eaffff9b 	b	11f34 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   120c4:	e2066003 	and	r6, r6, #3
   120c8:	e3560002 	cmp	r6, #2
   120cc:	0a000014 	beq	12124 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x250>
   120d0:	e59d3004 	ldr	r3, [sp, #4]
   120d4:	e0060a93 	mul	r6, r3, sl
   120d8:	e08bb006 	add	fp, fp, r6
   120dc:	eaffff94 	b	11f34 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   120e0:	e3530004 	cmp	r3, #4
   120e4:	1affff92 	bne	11f34 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   120e8:	e3560009 	cmp	r6, #9
   120ec:	1affff90 	bne	11f34 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   120f0:	e3590001 	cmp	r9, #1
   120f4:	03a09002 	moveq	r9, #2
   120f8:	eaffff8d 	b	11f34 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   120fc:	e3530044 	cmp	r3, #68	; 0x44
   12100:	e59d200c 	ldr	r2, [sp, #12]
   12104:	01a02006 	moveq	r2, r6
   12108:	e58d200c 	str	r2, [sp, #12]
   1210c:	eaffff88 	b	11f34 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   12110:	e3560039 	cmp	r6, #57	; 0x39
   12114:	1affff86 	bne	11f34 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   12118:	e3590001 	cmp	r9, #1
   1211c:	03a09004 	moveq	r9, #4
   12120:	eaffff83 	b	11f34 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   12124:	e3590003 	cmp	r9, #3
   12128:	0a000012 	beq	12178 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x2a4>
   1212c:	e3590004 	cmp	r9, #4
   12130:	0a00004f 	beq	12274 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x3a0>
   12134:	e59d3004 	ldr	r3, [sp, #4]
   12138:	e3590002 	cmp	r9, #2
   1213c:	e0060a93 	mul	r6, r3, sl
   12140:	1affffe4 	bne	120d8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x204>
   12144:	e59d2014 	ldr	r2, [sp, #20]
   12148:	e1a0100b 	mov	r1, fp
   1214c:	e5823104 	str	r3, [r2, #260]	; 0x104
   12150:	e59d0000 	ldr	r0, [sp]
   12154:	e1a02006 	mov	r2, r6
   12158:	ebffff11 	bl	11da4 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   1215c:	e59d2014 	ldr	r2, [sp, #20]
   12160:	e3a09001 	mov	r9, #1
   12164:	e5820108 	str	r0, [r2, #264]	; 0x108
   12168:	eaffffda 	b	120d8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x204>
   1216c:	e3590001 	cmp	r9, #1
   12170:	03a09003 	moveq	r9, #3
   12174:	eaffff6e 	b	11f34 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   12178:	e59d3004 	ldr	r3, [sp, #4]
   1217c:	e3530000 	cmp	r3, #0
   12180:	0a00006e 	beq	12340 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x46c>
   12184:	e59d2018 	ldr	r2, [sp, #24]
   12188:	e59f01bc 	ldr	r0, [pc, #444]	; 1234c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x478>
   1218c:	e59d1010 	ldr	r1, [sp, #16]
   12190:	e1520000 	cmp	r2, r0
   12194:	e1a03002 	mov	r3, r2
   12198:	01a03001 	moveq	r3, r1
   1219c:	e59fc1a8 	ldr	ip, [pc, #424]	; 1234c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x478>
   121a0:	e59d1008 	ldr	r1, [sp, #8]
   121a4:	e59d000c 	ldr	r0, [sp, #12]
   121a8:	e151000c 	cmp	r1, ip
   121ac:	e1a02003 	mov	r2, r3
   121b0:	e1a03001 	mov	r3, r1
   121b4:	01a03000 	moveq	r3, r0
   121b8:	e1a01003 	mov	r1, r3
   121bc:	e1a0300b 	mov	r3, fp
   121c0:	e59d001c 	ldr	r0, [sp, #28]
   121c4:	e59dc014 	ldr	ip, [sp, #20]
   121c8:	e0806080 	add	r6, r0, r0, lsl #1
   121cc:	e58db01c 	str	fp, [sp, #28]
   121d0:	e58d7024 	str	r7, [sp, #36]	; 0x24
   121d4:	e58d5028 	str	r5, [sp, #40]	; 0x28
   121d8:	e58d402c 	str	r4, [sp, #44]	; 0x2c
   121dc:	e3a09000 	mov	r9, #0
   121e0:	e08c6106 	add	r6, ip, r6, lsl #2
   121e4:	e1a05000 	mov	r5, r0
   121e8:	e1a07002 	mov	r7, r2
   121ec:	e1a0b001 	mov	fp, r1
   121f0:	e1a04003 	mov	r4, r3
   121f4:	ea00000d 	b	12230 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x35c>
   121f8:	ebfffee9 	bl	11da4 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   121fc:	e2899001 	add	r9, r9, #1
   12200:	e359000f 	cmp	r9, #15
   12204:	93a02000 	movls	r2, #0
   12208:	83a02001 	movhi	r2, #1
   1220c:	e59d3004 	ldr	r3, [sp, #4]
   12210:	e5860028 	str	r0, [r6, #40]	; 0x28
   12214:	e1530009 	cmp	r3, r9
   12218:	93822001 	orrls	r2, r2, #1
   1221c:	e3520000 	cmp	r2, #0
   12220:	e2855001 	add	r5, r5, #1
   12224:	e286600c 	add	r6, r6, #12
   12228:	e084400a 	add	r4, r4, sl
   1222c:	1a000008 	bne	12254 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x380>
   12230:	e3570000 	cmp	r7, #0
   12234:	e1a0200a 	mov	r2, sl
   12238:	e1a01004 	mov	r1, r4
   1223c:	e586702c 	str	r7, [r6, #44]	; 0x2c
   12240:	e586b030 	str	fp, [r6, #48]	; 0x30
   12244:	e59d0000 	ldr	r0, [sp]
   12248:	aaffffea 	bge	121f8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x324>
   1224c:	ebffff16 	bl	11eac <CUSBGamePadStandardDevice::BitGetSigned(void const*, unsigned int, unsigned int)>
   12250:	eaffffe9 	b	121fc <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x328>
   12254:	e59db01c 	ldr	fp, [sp, #28]
   12258:	e59d7024 	ldr	r7, [sp, #36]	; 0x24
   1225c:	e58d501c 	str	r5, [sp, #28]
   12260:	e59d402c 	ldr	r4, [sp, #44]	; 0x2c
   12264:	e59d5028 	ldr	r5, [sp, #40]	; 0x28
   12268:	e0060a93 	mul	r6, r3, sl
   1226c:	e3a09001 	mov	r9, #1
   12270:	eaffff98 	b	120d8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x204>
   12274:	e59d2004 	ldr	r2, [sp, #4]
   12278:	e3520000 	cmp	r2, #0
   1227c:	0a00002c 	beq	12334 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x460>
   12280:	e59d1020 	ldr	r1, [sp, #32]
   12284:	e59d0014 	ldr	r0, [sp, #20]
   12288:	e281303b 	add	r3, r1, #59	; 0x3b
   1228c:	e0803103 	add	r3, r0, r3, lsl #2
   12290:	e58d7024 	str	r7, [sp, #36]	; 0x24
   12294:	e58d5028 	str	r5, [sp, #40]	; 0x28
   12298:	e58d402c 	str	r4, [sp, #44]	; 0x2c
   1229c:	e3a06000 	mov	r6, #0
   122a0:	e1a07001 	mov	r7, r1
   122a4:	e1a04002 	mov	r4, r2
   122a8:	e1a05003 	mov	r5, r3
   122ac:	e1a0900b 	mov	r9, fp
   122b0:	e58db020 	str	fp, [sp, #32]
   122b4:	e59db000 	ldr	fp, [sp]
   122b8:	e1a0200a 	mov	r2, sl
   122bc:	e2866001 	add	r6, r6, #1
   122c0:	e1a01009 	mov	r1, r9
   122c4:	e1a0000b 	mov	r0, fp
   122c8:	ebfffeb5 	bl	11da4 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   122cc:	e3560005 	cmp	r6, #5
   122d0:	93a02000 	movls	r2, #0
   122d4:	83a02001 	movhi	r2, #1
   122d8:	e1540006 	cmp	r4, r6
   122dc:	93822001 	orrls	r2, r2, #1
   122e0:	e3520000 	cmp	r2, #0
   122e4:	e2877001 	add	r7, r7, #1
   122e8:	e089900a 	add	r9, r9, sl
   122ec:	e4850004 	str	r0, [r5], #4
   122f0:	0afffff0 	beq	122b8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x3e4>
   122f4:	e59d3004 	ldr	r3, [sp, #4]
   122f8:	e59db020 	ldr	fp, [sp, #32]
   122fc:	e59d5028 	ldr	r5, [sp, #40]	; 0x28
   12300:	e58d7020 	str	r7, [sp, #32]
   12304:	e59d402c 	ldr	r4, [sp, #44]	; 0x2c
   12308:	e59d7024 	ldr	r7, [sp, #36]	; 0x24
   1230c:	e0060a93 	mul	r6, r3, sl
   12310:	e3a09001 	mov	r9, #1
   12314:	eaffff6f 	b	120d8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x204>
   12318:	e3a020a2 	mov	r2, #162	; 0xa2
   1231c:	e59f102c 	ldr	r1, [pc, #44]	; 12350 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x47c>
   12320:	e59f002c 	ldr	r0, [pc, #44]	; 12354 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x480>
   12324:	eb001f8a 	bl	1a154 <assertion_failed>
   12328:	e59d3014 	ldr	r3, [sp, #20]
   1232c:	e5935134 	ldr	r5, [r3, #308]	; 0x134
   12330:	eafffeee 	b	11ef0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1c>
   12334:	e59d6004 	ldr	r6, [sp, #4]
   12338:	e3a09001 	mov	r9, #1
   1233c:	eaffff65 	b	120d8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x204>
   12340:	e1a06008 	mov	r6, r8
   12344:	e3a09001 	mov	r9, #1
   12348:	eaffff62 	b	120d8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x204>
   1234c:	f8a432eb 	.word	0xf8a432eb
   12350:	00024914 	.word	0x00024914
   12354:	0002492c 	.word	0x0002492c

00012358 <CUSBGamePadStandardDevice::Configure()>:
   12358:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1235c:	e3a01021 	mov	r1, #33	; 0x21
   12360:	e24dd078 	sub	sp, sp, #120	; 0x78
   12364:	e1a04000 	mov	r4, r0
   12368:	eb0008c9 	bl	14694 <CUSBFunction::GetDescriptor(unsigned char)>
   1236c:	e2505000 	subs	r5, r0, #0
   12370:	0a000003 	beq	12384 <CUSBGamePadStandardDevice::Configure()+0x2c>
   12374:	e5d50007 	ldrb	r0, [r5, #7]
   12378:	e5d53008 	ldrb	r3, [r5, #8]
   1237c:	e1900403 	orrs	r0, r0, r3, lsl #8
   12380:	1a000006 	bne	123a0 <CUSBGamePadStandardDevice::Configure()+0x48>
   12384:	e1a00004 	mov	r0, r4
   12388:	e59f115c 	ldr	r1, [pc, #348]	; 124ec <CUSBGamePadStandardDevice::Configure()+0x194>
   1238c:	eb0008d3 	bl	146e0 <CUSBFunction::ConfigurationError(char const*) const>
   12390:	e3a05000 	mov	r5, #0
   12394:	e1a00005 	mov	r0, r5
   12398:	e28dd078 	add	sp, sp, #120	; 0x78
   1239c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   123a0:	e2846f4e 	add	r6, r4, #312	; 0x138
   123a4:	e1c600b0 	strh	r0, [r6]
   123a8:	eb003cfe 	bl	217a8 <operator new[](unsigned int)>
   123ac:	e5840134 	str	r0, [r4, #308]	; 0x134
   123b0:	e1a00004 	mov	r0, r4
   123b4:	eb000874 	bl	1458c <CUSBFunction::GetHost() const>
   123b8:	e1a07000 	mov	r7, r0
   123bc:	e1a00004 	mov	r0, r4
   123c0:	eb000860 	bl	14548 <CUSBFunction::GetEndpoint0() const>
   123c4:	e1a08000 	mov	r8, r0
   123c8:	e1a00004 	mov	r0, r4
   123cc:	e5d55006 	ldrb	r5, [r5, #6]
   123d0:	e1d6a0b0 	ldrh	sl, [r6]
   123d4:	e5949134 	ldr	r9, [r4, #308]	; 0x134
   123d8:	eb000915 	bl	14834 <CUSBFunction::GetInterfaceNumber() const>
   123dc:	e3a03081 	mov	r3, #129	; 0x81
   123e0:	e6ff0070 	uxth	r0, r0
   123e4:	e58d000c 	str	r0, [sp, #12]
   123e8:	e58d3008 	str	r3, [sp, #8]
   123ec:	e58da004 	str	sl, [sp, #4]
   123f0:	e3a03000 	mov	r3, #0
   123f4:	e58d9000 	str	r9, [sp]
   123f8:	e1a02005 	mov	r2, r5
   123fc:	e1a01008 	mov	r1, r8
   12400:	e1a00007 	mov	r0, r7
   12404:	ebffefa1 	bl	e290 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   12408:	e1d630b0 	ldrh	r3, [r6]
   1240c:	e1500003 	cmp	r0, r3
   12410:	0a000008 	beq	12438 <CUSBGamePadStandardDevice::Configure()+0xe0>
   12414:	e3a05000 	mov	r5, #0
   12418:	eb002940 	bl	1c920 <CLogger::Get()>
   1241c:	e59f30cc 	ldr	r3, [pc, #204]	; 124f0 <CUSBGamePadStandardDevice::Configure()+0x198>
   12420:	e3a02001 	mov	r2, #1
   12424:	e59f10c0 	ldr	r1, [pc, #192]	; 124ec <CUSBGamePadStandardDevice::Configure()+0x194>
   12428:	eb002ae5 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1242c:	e1a00005 	mov	r0, r5
   12430:	e28dd078 	add	sp, sp, #120	; 0x78
   12434:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12438:	e3a02064 	mov	r2, #100	; 0x64
   1243c:	e3a01000 	mov	r1, #0
   12440:	e28d0014 	add	r0, sp, #20
   12444:	eb003868 	bl	205ec <memset>
   12448:	e5943000 	ldr	r3, [r4]
   1244c:	e28d1014 	add	r1, sp, #20
   12450:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   12454:	e1a00004 	mov	r0, r4
   12458:	e12fff33 	blx	r3
   1245c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   12460:	e3530000 	cmp	r3, #0
   12464:	1a000002 	bne	12474 <CUSBGamePadStandardDevice::Configure()+0x11c>
   12468:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
   1246c:	e3530000 	cmp	r3, #0
   12470:	0a00000e 	beq	124b0 <CUSBGamePadStandardDevice::Configure()+0x158>
   12474:	e2843f4a 	add	r3, r4, #296	; 0x128
   12478:	e1d330b0 	ldrh	r3, [r3]
   1247c:	e3530000 	cmp	r3, #0
   12480:	0a00000e 	beq	124c0 <CUSBGamePadStandardDevice::Configure()+0x168>
   12484:	e1a00004 	mov	r0, r4
   12488:	eb00195e 	bl	18a08 <CUSBGamePadDevice::Configure()>
   1248c:	e2505000 	subs	r5, r0, #0
   12490:	0a00000f 	beq	124d4 <CUSBGamePadStandardDevice::Configure()+0x17c>
   12494:	e5d43130 	ldrb	r3, [r4, #304]	; 0x130
   12498:	e3530000 	cmp	r3, #0
   1249c:	0affffbc 	beq	12394 <CUSBGamePadStandardDevice::Configure()+0x3c>
   124a0:	e1a00004 	mov	r0, r4
   124a4:	ebfffcf7 	bl	11888 <CUSBHIDDevice::StartRequest()>
   124a8:	e1a05000 	mov	r5, r0
   124ac:	eaffffb8 	b	12394 <CUSBGamePadStandardDevice::Configure()+0x3c>
   124b0:	e5945104 	ldr	r5, [r4, #260]	; 0x104
   124b4:	e3550000 	cmp	r5, #0
   124b8:	1affffed 	bne	12474 <CUSBGamePadStandardDevice::Configure()+0x11c>
   124bc:	eaffffb4 	b	12394 <CUSBGamePadStandardDevice::Configure()+0x3c>
   124c0:	e3a02085 	mov	r2, #133	; 0x85
   124c4:	e59f1028 	ldr	r1, [pc, #40]	; 124f4 <CUSBGamePadStandardDevice::Configure()+0x19c>
   124c8:	e59f0028 	ldr	r0, [pc, #40]	; 124f8 <CUSBGamePadStandardDevice::Configure()+0x1a0>
   124cc:	eb001f20 	bl	1a154 <assertion_failed>
   124d0:	eaffffeb 	b	12484 <CUSBGamePadStandardDevice::Configure()+0x12c>
   124d4:	eb002911 	bl	1c920 <CLogger::Get()>
   124d8:	e59f301c 	ldr	r3, [pc, #28]	; 124fc <CUSBGamePadStandardDevice::Configure()+0x1a4>
   124dc:	e3a02001 	mov	r2, #1
   124e0:	e59f1004 	ldr	r1, [pc, #4]	; 124ec <CUSBGamePadStandardDevice::Configure()+0x194>
   124e4:	eb002ab6 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   124e8:	eaffffa9 	b	12394 <CUSBGamePadStandardDevice::Configure()+0x3c>
   124ec:	00024908 	.word	0x00024908
   124f0:	000248a0 	.word	0x000248a0
   124f4:	00024914 	.word	0x00024914
   124f8:	00024948 	.word	0x00024948
   124fc:	0002495c 	.word	0x0002495c

00012500 <CUSBGamePadDevice::GetProperties()>:
   12500:	e3a00000 	mov	r0, #0
   12504:	e12fff1e 	bx	lr

00012508 <CUSBGamePadDevice::SetLEDMode(TGamePadLEDMode)>:
   12508:	e3a00000 	mov	r0, #0
   1250c:	e12fff1e 	bx	lr

00012510 <CUSBGamePadDevice::SetLEDMode(unsigned int, unsigned char, unsigned char)>:
   12510:	e3a00000 	mov	r0, #0
   12514:	e12fff1e 	bx	lr

00012518 <CUSBGamePadDevice::SetRumbleMode(TGamePadRumbleMode)>:
   12518:	e3a00000 	mov	r0, #0
   1251c:	e12fff1e 	bx	lr

00012520 <CUSBGamePadPS3Device::~CUSBGamePadPS3Device()>:
   12520:	e92d4010 	push	{r4, lr}
   12524:	e1a04000 	mov	r4, r0
   12528:	e59f300c 	ldr	r3, [pc, #12]	; 1253c <CUSBGamePadPS3Device::~CUSBGamePadPS3Device()+0x1c>
   1252c:	e5803000 	str	r3, [r0]
   12530:	ebfffdf6 	bl	11d10 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>
   12534:	e1a00004 	mov	r0, r4
   12538:	e8bd8010 	pop	{r4, pc}
   1253c:	00024984 	.word	0x00024984

00012540 <CUSBGamePadPS3Device::~CUSBGamePadPS3Device()>:
   12540:	e92d4010 	push	{r4, lr}
   12544:	e1a04000 	mov	r4, r0
   12548:	e59f3018 	ldr	r3, [pc, #24]	; 12568 <CUSBGamePadPS3Device::~CUSBGamePadPS3Device()+0x28>
   1254c:	e5803000 	str	r3, [r0]
   12550:	ebfffdee 	bl	11d10 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>
   12554:	e1a00004 	mov	r0, r4
   12558:	e3a01f5b 	mov	r1, #364	; 0x16c
   1255c:	eb003c94 	bl	217b4 <operator delete(void*, unsigned int)>
   12560:	e1a00004 	mov	r0, r4
   12564:	e8bd8010 	pop	{r4, pc}
   12568:	00024984 	.word	0x00024984

0001256c <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)>:
   1256c:	e92d4070 	push	{r4, r5, r6, lr}
   12570:	e1a05001 	mov	r5, r1
   12574:	e24dd040 	sub	sp, sp, #64	; 0x40
   12578:	e2801f4f 	add	r1, r0, #316	; 0x13c
   1257c:	e1a04000 	mov	r4, r0
   12580:	e3a02030 	mov	r2, #48	; 0x30
   12584:	e28d0010 	add	r0, sp, #16
   12588:	eb003989 	bl	20bb4 <memcpy>
   1258c:	e3550001 	cmp	r5, #1
   12590:	0a00002f 	beq	12654 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0xe8>
   12594:	3a000028 	bcc	1263c <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0xd0>
   12598:	e3550002 	cmp	r5, #2
   1259c:	1a00001f 	bne	12620 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0xb4>
   125a0:	e3e03001 	mvn	r3, #1
   125a4:	e3a01000 	mov	r1, #0
   125a8:	e3e02000 	mvn	r2, #0
   125ac:	e5cd3011 	strb	r3, [sp, #17]
   125b0:	e5cd3013 	strb	r3, [sp, #19]
   125b4:	e5cd1012 	strb	r1, [sp, #18]
   125b8:	e5cd2014 	strb	r2, [sp, #20]
   125bc:	e1a00004 	mov	r0, r4
   125c0:	eb0007f1 	bl	1458c <CUSBFunction::GetHost() const>
   125c4:	e1a05000 	mov	r5, r0
   125c8:	e1a00004 	mov	r0, r4
   125cc:	eb0007dd 	bl	14548 <CUSBFunction::GetEndpoint0() const>
   125d0:	e1a06000 	mov	r6, r0
   125d4:	e1a00004 	mov	r0, r4
   125d8:	eb000895 	bl	14834 <CUSBFunction::GetInterfaceNumber() const>
   125dc:	e3a02030 	mov	r2, #48	; 0x30
   125e0:	e59f308c 	ldr	r3, [pc, #140]	; 12674 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x108>
   125e4:	e28dc010 	add	ip, sp, #16
   125e8:	e6ff0070 	uxth	r0, r0
   125ec:	e58d0004 	str	r0, [sp, #4]
   125f0:	e58d200c 	str	r2, [sp, #12]
   125f4:	e58d3000 	str	r3, [sp]
   125f8:	e1a01006 	mov	r1, r6
   125fc:	e1a00005 	mov	r0, r5
   12600:	e58dc008 	str	ip, [sp, #8]
   12604:	e3a03009 	mov	r3, #9
   12608:	e3a02021 	mov	r2, #33	; 0x21
   1260c:	ebffeeed 	bl	e1c8 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   12610:	e1e00000 	mvn	r0, r0
   12614:	e1a00fa0 	lsr	r0, r0, #31
   12618:	e28dd040 	add	sp, sp, #64	; 0x40
   1261c:	e8bd8070 	pop	{r4, r5, r6, pc}
   12620:	e59f2050 	ldr	r2, [pc, #80]	; 12678 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x10c>
   12624:	e59f1050 	ldr	r1, [pc, #80]	; 1267c <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x110>
   12628:	e59f0050 	ldr	r0, [pc, #80]	; 12680 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x114>
   1262c:	eb001ec8 	bl	1a154 <assertion_failed>
   12630:	e3a00000 	mov	r0, #0
   12634:	e28dd040 	add	sp, sp, #64	; 0x40
   12638:	e8bd8070 	pop	{r4, r5, r6, pc}
   1263c:	e3a03000 	mov	r3, #0
   12640:	e5cd3011 	strb	r3, [sp, #17]
   12644:	e5cd3012 	strb	r3, [sp, #18]
   12648:	e5cd3013 	strb	r3, [sp, #19]
   1264c:	e5cd3014 	strb	r3, [sp, #20]
   12650:	eaffffd9 	b	125bc <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x50>
   12654:	e3e03001 	mvn	r3, #1
   12658:	e3e01000 	mvn	r1, #0
   1265c:	e3a02000 	mov	r2, #0
   12660:	e5cd3011 	strb	r3, [sp, #17]
   12664:	e5cd3013 	strb	r3, [sp, #19]
   12668:	e5cd1012 	strb	r1, [sp, #18]
   1266c:	e5cd2014 	strb	r2, [sp, #20]
   12670:	eaffffd1 	b	125bc <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x50>
   12674:	00000201 	.word	0x00000201
   12678:	0000010d 	.word	0x0000010d
   1267c:	00024a38 	.word	0x00024a38
   12680:	000239a8 	.word	0x000239a8

00012684 <CUSBGamePadPS3Device::SetLEDMode(TGamePadLEDMode)>:
   12684:	e351000a 	cmp	r1, #10
   12688:	9a000001 	bls	12694 <CUSBGamePadPS3Device::SetLEDMode(TGamePadLEDMode)+0x10>
   1268c:	e3a00000 	mov	r0, #0
   12690:	e12fff1e 	bx	lr
   12694:	e59f3078 	ldr	r3, [pc, #120]	; 12714 <CUSBGamePadPS3Device::SetLEDMode(TGamePadLEDMode)+0x90>
   12698:	e92d4070 	push	{r4, r5, r6, lr}
   1269c:	e0831001 	add	r1, r3, r1
   126a0:	e5d13044 	ldrb	r3, [r1, #68]	; 0x44
   126a4:	e24dd010 	sub	sp, sp, #16
   126a8:	e1a03083 	lsl	r3, r3, #1
   126ac:	e5c03145 	strb	r3, [r0, #325]	; 0x145
   126b0:	e1a04000 	mov	r4, r0
   126b4:	eb0007b4 	bl	1458c <CUSBFunction::GetHost() const>
   126b8:	e1a05000 	mov	r5, r0
   126bc:	e1a00004 	mov	r0, r4
   126c0:	eb0007a0 	bl	14548 <CUSBFunction::GetEndpoint0() const>
   126c4:	e1a06000 	mov	r6, r0
   126c8:	e1a00004 	mov	r0, r4
   126cc:	eb000858 	bl	14834 <CUSBFunction::GetInterfaceNumber() const>
   126d0:	e3a02030 	mov	r2, #48	; 0x30
   126d4:	e59f303c 	ldr	r3, [pc, #60]	; 12718 <CUSBGamePadPS3Device::SetLEDMode(TGamePadLEDMode)+0x94>
   126d8:	e6ff0070 	uxth	r0, r0
   126dc:	e2844f4f 	add	r4, r4, #316	; 0x13c
   126e0:	e58d0004 	str	r0, [sp, #4]
   126e4:	e58d200c 	str	r2, [sp, #12]
   126e8:	e58d3000 	str	r3, [sp]
   126ec:	e1a01006 	mov	r1, r6
   126f0:	e1a00005 	mov	r0, r5
   126f4:	e58d4008 	str	r4, [sp, #8]
   126f8:	e3a03009 	mov	r3, #9
   126fc:	e3a02021 	mov	r2, #33	; 0x21
   12700:	ebffeeb0 	bl	e1c8 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   12704:	e1e00000 	mvn	r0, r0
   12708:	e1a00fa0 	lsr	r0, r0, #31
   1270c:	e28dd010 	add	sp, sp, #16
   12710:	e8bd8070 	pop	{r4, r5, r6, pc}
   12714:	0002497c 	.word	0x0002497c
   12718:	00000201 	.word	0x00000201

0001271c <CUSBGamePadPS3Device::CUSBGamePadPS3Device(CUSBFunction*)>:
   1271c:	e92d4070 	push	{r4, r5, r6, lr}
   12720:	e3a02000 	mov	r2, #0
   12724:	e1a04000 	mov	r4, r0
   12728:	ebfffd8f 	bl	11d6c <CUSBGamePadStandardDevice::CUSBGamePadStandardDevice(CUSBFunction*, bool)>
   1272c:	e3a03000 	mov	r3, #0
   12730:	e59f5030 	ldr	r5, [pc, #48]	; 12768 <CUSBGamePadPS3Device::CUSBGamePadPS3Device(CUSBFunction*)+0x4c>
   12734:	e1a00004 	mov	r0, r4
   12738:	e2852008 	add	r2, r5, #8
   1273c:	e5842000 	str	r2, [r4]
   12740:	e3a01003 	mov	r1, #3
   12744:	e1a02003 	mov	r2, r3
   12748:	eb000800 	bl	14750 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)>
   1274c:	e2851050 	add	r1, r5, #80	; 0x50
   12750:	e5c4013a 	strb	r0, [r4, #314]	; 0x13a
   12754:	e3a02030 	mov	r2, #48	; 0x30
   12758:	e2840f4f 	add	r0, r4, #316	; 0x13c
   1275c:	eb003914 	bl	20bb4 <memcpy>
   12760:	e1a00004 	mov	r0, r4
   12764:	e8bd8070 	pop	{r4, r5, r6, pc}
   12768:	0002497c 	.word	0x0002497c

0001276c <CUSBGamePadPS3Device::PS3Enable()>:
   1276c:	e92d4070 	push	{r4, r5, r6, lr}
   12770:	e24dd010 	sub	sp, sp, #16
   12774:	e1a04000 	mov	r4, r0
   12778:	eb000783 	bl	1458c <CUSBFunction::GetHost() const>
   1277c:	e1a05000 	mov	r5, r0
   12780:	e1a00004 	mov	r0, r4
   12784:	eb00076f 	bl	14548 <CUSBFunction::GetEndpoint0() const>
   12788:	e1a06000 	mov	r6, r0
   1278c:	e1a00004 	mov	r0, r4
   12790:	eb000827 	bl	14834 <CUSBFunction::GetInterfaceNumber() const>
   12794:	e3a0c004 	mov	ip, #4
   12798:	e3a02ffd 	mov	r2, #1012	; 0x3f4
   1279c:	e59f3054 	ldr	r3, [pc, #84]	; 127f8 <CUSBGamePadPS3Device::PS3Enable()+0x8c>
   127a0:	e6ff0070 	uxth	r0, r0
   127a4:	e58d0004 	str	r0, [sp, #4]
   127a8:	e58d2000 	str	r2, [sp]
   127ac:	e58d3008 	str	r3, [sp, #8]
   127b0:	e1a01006 	mov	r1, r6
   127b4:	e1a00005 	mov	r0, r5
   127b8:	e58dc00c 	str	ip, [sp, #12]
   127bc:	e3a03009 	mov	r3, #9
   127c0:	e3a02021 	mov	r2, #33	; 0x21
   127c4:	ebffee7f 	bl	e1c8 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   127c8:	e3500000 	cmp	r0, #0
   127cc:	ba000006 	blt	127ec <CUSBGamePadPS3Device::PS3Enable()+0x80>
   127d0:	e1a00004 	mov	r0, r4
   127d4:	e5943000 	ldr	r3, [r4]
   127d8:	e5d4112c 	ldrb	r1, [r4, #300]	; 0x12c
   127dc:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   127e0:	e28dd010 	add	sp, sp, #16
   127e4:	e8bd4070 	pop	{r4, r5, r6, lr}
   127e8:	e12fff13 	bx	r3
   127ec:	e3a00000 	mov	r0, #0
   127f0:	e28dd010 	add	sp, sp, #16
   127f4:	e8bd8070 	pop	{r4, r5, r6, pc}
   127f8:	00029764 	.word	0x00029764

000127fc <CUSBGamePadPS3Device::Configure()>:
   127fc:	e92d4030 	push	{r4, r5, lr}
   12800:	e5d0513a 	ldrb	r5, [r0, #314]	; 0x13a
   12804:	e24dd00c 	sub	sp, sp, #12
   12808:	e3550000 	cmp	r5, #0
   1280c:	0a00001e 	beq	1288c <CUSBGamePadPS3Device::Configure()+0x90>
   12810:	e1a04000 	mov	r4, r0
   12814:	ebfffecf 	bl	12358 <CUSBGamePadStandardDevice::Configure()>
   12818:	e2505000 	subs	r5, r0, #0
   1281c:	0a00002a 	beq	128cc <CUSBGamePadPS3Device::Configure()+0xd0>
   12820:	e2845f4a 	add	r5, r4, #296	; 0x128
   12824:	e1d530b0 	ldrh	r3, [r5]
   12828:	e2433031 	sub	r3, r3, #49	; 0x31
   1282c:	e3530001 	cmp	r3, #1
   12830:	8a00001a 	bhi	128a0 <CUSBGamePadPS3Device::Configure()+0xa4>
   12834:	e3a01010 	mov	r1, #16
   12838:	e3a0c013 	mov	ip, #19
   1283c:	e1a03004 	mov	r3, r4
   12840:	e3a02000 	mov	r2, #0
   12844:	e3a000ff 	mov	r0, #255	; 0xff
   12848:	e5841024 	str	r1, [r4, #36]	; 0x24
   1284c:	e584c104 	str	ip, [r4, #260]	; 0x104
   12850:	e28410c0 	add	r1, r4, #192	; 0xc0
   12854:	e583202c 	str	r2, [r3, #44]	; 0x2c
   12858:	e5830030 	str	r0, [r3, #48]	; 0x30
   1285c:	e283300c 	add	r3, r3, #12
   12860:	e1530001 	cmp	r3, r1
   12864:	1afffffa 	bne	12854 <CUSBGamePadPS3Device::Configure()+0x58>
   12868:	e58420e8 	str	r2, [r4, #232]	; 0xe8
   1286c:	e1a00004 	mov	r0, r4
   12870:	ebffffbd 	bl	1276c <CUSBGamePadPS3Device::PS3Enable()>
   12874:	e2505000 	subs	r5, r0, #0
   12878:	0a00001b 	beq	128ec <CUSBGamePadPS3Device::Configure()+0xf0>
   1287c:	e1a00004 	mov	r0, r4
   12880:	e28dd00c 	add	sp, sp, #12
   12884:	e8bd4030 	pop	{r4, r5, lr}
   12888:	eafffbfe 	b	11888 <CUSBHIDDevice::StartRequest()>
   1288c:	e59f1078 	ldr	r1, [pc, #120]	; 1290c <CUSBGamePadPS3Device::Configure()+0x110>
   12890:	eb000792 	bl	146e0 <CUSBFunction::ConfigurationError(char const*) const>
   12894:	e1a00005 	mov	r0, r5
   12898:	e28dd00c 	add	sp, sp, #12
   1289c:	e8bd8030 	pop	{r4, r5, pc}
   128a0:	eb00281e 	bl	1c920 <CLogger::Get()>
   128a4:	e1d520b0 	ldrh	r2, [r5]
   128a8:	e3a05000 	mov	r5, #0
   128ac:	e58d2000 	str	r2, [sp]
   128b0:	e59f3058 	ldr	r3, [pc, #88]	; 12910 <CUSBGamePadPS3Device::Configure()+0x114>
   128b4:	e3a02001 	mov	r2, #1
   128b8:	e59f104c 	ldr	r1, [pc, #76]	; 1290c <CUSBGamePadPS3Device::Configure()+0x110>
   128bc:	eb0029c0 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   128c0:	e1a00005 	mov	r0, r5
   128c4:	e28dd00c 	add	sp, sp, #12
   128c8:	e8bd8030 	pop	{r4, r5, pc}
   128cc:	eb002813 	bl	1c920 <CLogger::Get()>
   128d0:	e59f303c 	ldr	r3, [pc, #60]	; 12914 <CUSBGamePadPS3Device::Configure()+0x118>
   128d4:	e3a02001 	mov	r2, #1
   128d8:	e59f102c 	ldr	r1, [pc, #44]	; 1290c <CUSBGamePadPS3Device::Configure()+0x110>
   128dc:	eb0029b8 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   128e0:	e1a00005 	mov	r0, r5
   128e4:	e28dd00c 	add	sp, sp, #12
   128e8:	e8bd8030 	pop	{r4, r5, pc}
   128ec:	eb00280b 	bl	1c920 <CLogger::Get()>
   128f0:	e59f3020 	ldr	r3, [pc, #32]	; 12918 <CUSBGamePadPS3Device::Configure()+0x11c>
   128f4:	e3a02001 	mov	r2, #1
   128f8:	e59f100c 	ldr	r1, [pc, #12]	; 1290c <CUSBGamePadPS3Device::Configure()+0x110>
   128fc:	eb0029b0 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12900:	e1a00005 	mov	r0, r5
   12904:	e28dd00c 	add	sp, sp, #12
   12908:	e8bd8030 	pop	{r4, r5, pc}
   1290c:	000249fc 	.word	0x000249fc
   12910:	00024a4c 	.word	0x00024a4c
   12914:	0002495c 	.word	0x0002495c
   12918:	00024a68 	.word	0x00024a68

0001291c <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)>:
   1291c:	e2803f4a 	add	r3, r0, #296	; 0x128
   12920:	e1d330b0 	ldrh	r3, [r3]
   12924:	e92d4070 	push	{r4, r5, r6, lr}
   12928:	e3530031 	cmp	r3, #49	; 0x31
   1292c:	e1a04000 	mov	r4, r0
   12930:	e1a05001 	mov	r5, r1
   12934:	0a000007 	beq	12958 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x3c>
   12938:	e3530032 	cmp	r3, #50	; 0x32
   1293c:	0a000043 	beq	12a50 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x134>
   12940:	e3530000 	cmp	r3, #0
   12944:	0a00003f 	beq	12a48 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x12c>
   12948:	e3a02091 	mov	r2, #145	; 0x91
   1294c:	e59f1118 	ldr	r1, [pc, #280]	; 12a6c <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x150>
   12950:	e59f0118 	ldr	r0, [pc, #280]	; 12a70 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x154>
   12954:	eb001dfe 	bl	1a154 <assertion_failed>
   12958:	e3550000 	cmp	r5, #0
   1295c:	0a00003d 	beq	12a58 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x13c>
   12960:	e5d50003 	ldrb	r0, [r5, #3]
   12964:	e5d52002 	ldrb	r2, [r5, #2]
   12968:	e5d51004 	ldrb	r1, [r5, #4]
   1296c:	e1822400 	orr	r2, r2, r0, lsl #8
   12970:	e5d50005 	ldrb	r0, [r5, #5]
   12974:	e1822801 	orr	r2, r2, r1, lsl #16
   12978:	e59f10f4 	ldr	r1, [pc, #244]	; 12a74 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x158>
   1297c:	e1822c00 	orr	r2, r2, r0, lsl #24
   12980:	e59f00f0 	ldr	r0, [pc, #240]	; 12a78 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x15c>
   12984:	e1a0c682 	lsl	ip, r2, #13
   12988:	e00112a2 	and	r1, r1, r2, lsr #5
   1298c:	e1811eac 	orr	r1, r1, ip, lsr #29
   12990:	e0002582 	and	r2, r0, r2, lsl #11
   12994:	e1812002 	orr	r2, r1, r2
   12998:	e5842108 	str	r2, [r4, #264]	; 0x108
   1299c:	e5d52006 	ldrb	r2, [r5, #6]
   129a0:	e3a03006 	mov	r3, #6
   129a4:	e5842028 	str	r2, [r4, #40]	; 0x28
   129a8:	e5d51007 	ldrb	r1, [r5, #7]
   129ac:	e59f00c8 	ldr	r0, [pc, #200]	; 12a7c <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x160>
   129b0:	e5841034 	str	r1, [r4, #52]	; 0x34
   129b4:	e5d51008 	ldrb	r1, [r5, #8]
   129b8:	e285200d 	add	r2, r5, #13
   129bc:	e5841040 	str	r1, [r4, #64]	; 0x40
   129c0:	e5d51009 	ldrb	r1, [r5, #9]
   129c4:	e285c019 	add	ip, r5, #25
   129c8:	e584104c 	str	r1, [r4, #76]	; 0x4c
   129cc:	ea000000 	b	129d4 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0xb8>
   129d0:	e5b03004 	ldr	r3, [r0, #4]!
   129d4:	e5f21001 	ldrb	r1, [r2, #1]!
   129d8:	e0833083 	add	r3, r3, r3, lsl #1
   129dc:	e0843103 	add	r3, r4, r3, lsl #2
   129e0:	e15c0002 	cmp	ip, r2
   129e4:	e5831028 	str	r1, [r3, #40]	; 0x28
   129e8:	1afffff8 	bne	129d0 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0xb4>
   129ec:	e3a01000 	mov	r1, #0
   129f0:	e59fc088 	ldr	ip, [pc, #136]	; 12a80 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x164>
   129f4:	e2840f43 	add	r0, r4, #268	; 0x10c
   129f8:	e2812014 	add	r2, r1, #20
   129fc:	e0852082 	add	r2, r5, r2, lsl #1
   12a00:	e5d23001 	ldrb	r3, [r2, #1]
   12a04:	e5d22002 	ldrb	r2, [r2, #2]
   12a08:	e2811001 	add	r1, r1, #1
   12a0c:	e1833402 	orr	r3, r3, r2, lsl #8
   12a10:	e6bf3fb3 	rev16	r3, r3
   12a14:	e6ff3073 	uxth	r3, r3
   12a18:	e04c3003 	sub	r3, ip, r3
   12a1c:	e3510003 	cmp	r1, #3
   12a20:	e4803004 	str	r3, [r0], #4
   12a24:	1afffff3 	bne	129f8 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0xdc>
   12a28:	e5d5302f 	ldrb	r3, [r5, #47]	; 0x2f
   12a2c:	e5d52030 	ldrb	r2, [r5, #48]	; 0x30
   12a30:	e1833402 	orr	r3, r3, r2, lsl #8
   12a34:	e6bf3fb3 	rev16	r3, r3
   12a38:	e6ff3073 	uxth	r3, r3
   12a3c:	e2433006 	sub	r3, r3, #6
   12a40:	e5843120 	str	r3, [r4, #288]	; 0x120
   12a44:	e8bd8070 	pop	{r4, r5, r6, pc}
   12a48:	e8bd4070 	pop	{r4, r5, r6, lr}
   12a4c:	eafffd20 	b	11ed4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)>
   12a50:	e2815001 	add	r5, r1, #1
   12a54:	eaffffbf 	b	12958 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x3c>
   12a58:	e3a02096 	mov	r2, #150	; 0x96
   12a5c:	e59f1008 	ldr	r1, [pc, #8]	; 12a6c <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x150>
   12a60:	e59f001c 	ldr	r0, [pc, #28]	; 12a84 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x168>
   12a64:	eb001dba 	bl	1a154 <assertion_failed>
   12a68:	eaffffbc 	b	12960 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x44>
   12a6c:	00024a38 	.word	0x00024a38
   12a70:	000239a8 	.word	0x000239a8
   12a74:	000007f8 	.word	0x000007f8
   12a78:	0007f800 	.word	0x0007f800
   12a7c:	00024a08 	.word	0x00024a08
   12a80:	000001ff 	.word	0x000001ff
   12a84:	00024a88 	.word	0x00024a88

00012a88 <CUSBGamePadPS3Device::GetProperties()>:
   12a88:	e3a0001b 	mov	r0, #27
   12a8c:	e12fff1e 	bx	lr

00012a90 <CUSBGamePadPS4Device::DecodeReport(unsigned char const*)>:
   12a90:	e5d13001 	ldrb	r3, [r1, #1]
   12a94:	e5d12005 	ldrb	r2, [r1, #5]
   12a98:	e5803028 	str	r3, [r0, #40]	; 0x28
   12a9c:	e5d13002 	ldrb	r3, [r1, #2]
   12aa0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   12aa4:	e5803034 	str	r3, [r0, #52]	; 0x34
   12aa8:	e5d13003 	ldrb	r3, [r1, #3]
   12aac:	e59fc18c 	ldr	ip, [pc, #396]	; 12c40 <CUSBGamePadPS4Device::DecodeReport(unsigned char const*)+0x1b0>
   12ab0:	e5803040 	str	r3, [r0, #64]	; 0x40
   12ab4:	e5d1e004 	ldrb	lr, [r1, #4]
   12ab8:	e5d13005 	ldrb	r3, [r1, #5]
   12abc:	e580e04c 	str	lr, [r0, #76]	; 0x4c
   12ac0:	e202200f 	and	r2, r2, #15
   12ac4:	e5d1e008 	ldrb	lr, [r1, #8]
   12ac8:	e79cc102 	ldr	ip, [ip, r2, lsl #2]
   12acc:	e3130080 	tst	r3, #128	; 0x80
   12ad0:	e580e058 	str	lr, [r0, #88]	; 0x58
   12ad4:	e5d1e009 	ldrb	lr, [r1, #9]
   12ad8:	e580c108 	str	ip, [r0, #264]	; 0x108
   12adc:	138cc080 	orrne	ip, ip, #128	; 0x80
   12ae0:	1580c108 	strne	ip, [r0, #264]	; 0x108
   12ae4:	e3130040 	tst	r3, #64	; 0x40
   12ae8:	e58020ec 	str	r2, [r0, #236]	; 0xec
   12aec:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   12af0:	e580e064 	str	lr, [r0, #100]	; 0x64
   12af4:	13822c01 	orrne	r2, r2, #256	; 0x100
   12af8:	15802108 	strne	r2, [r0, #264]	; 0x108
   12afc:	e3130020 	tst	r3, #32
   12b00:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   12b04:	13822c02 	orrne	r2, r2, #512	; 0x200
   12b08:	15802108 	strne	r2, [r0, #264]	; 0x108
   12b0c:	e3130010 	tst	r3, #16
   12b10:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   12b14:	13833b01 	orrne	r3, r3, #1024	; 0x400
   12b18:	15803108 	strne	r3, [r0, #264]	; 0x108
   12b1c:	e5d13006 	ldrb	r3, [r1, #6]
   12b20:	e3130080 	tst	r3, #128	; 0x80
   12b24:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   12b28:	13822a02 	orrne	r2, r2, #8192	; 0x2000
   12b2c:	15802108 	strne	r2, [r0, #264]	; 0x108
   12b30:	e3130040 	tst	r3, #64	; 0x40
   12b34:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   12b38:	13822a01 	orrne	r2, r2, #4096	; 0x1000
   12b3c:	15802108 	strne	r2, [r0, #264]	; 0x108
   12b40:	e3130020 	tst	r3, #32
   12b44:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   12b48:	13822901 	orrne	r2, r2, #16384	; 0x4000
   12b4c:	15802108 	strne	r2, [r0, #264]	; 0x108
   12b50:	e3130010 	tst	r3, #16
   12b54:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   12b58:	13822b02 	orrne	r2, r2, #2048	; 0x800
   12b5c:	15802108 	strne	r2, [r0, #264]	; 0x108
   12b60:	e3130008 	tst	r3, #8
   12b64:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   12b68:	13822010 	orrne	r2, r2, #16
   12b6c:	15802108 	strne	r2, [r0, #264]	; 0x108
   12b70:	e3130004 	tst	r3, #4
   12b74:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   12b78:	13822008 	orrne	r2, r2, #8
   12b7c:	15802108 	strne	r2, [r0, #264]	; 0x108
   12b80:	e3130002 	tst	r3, #2
   12b84:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   12b88:	13822040 	orrne	r2, r2, #64	; 0x40
   12b8c:	15802108 	strne	r2, [r0, #264]	; 0x108
   12b90:	e3130001 	tst	r3, #1
   12b94:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   12b98:	13833020 	orrne	r3, r3, #32
   12b9c:	15803108 	strne	r3, [r0, #264]	; 0x108
   12ba0:	e5d13007 	ldrb	r3, [r1, #7]
   12ba4:	e3130002 	tst	r3, #2
   12ba8:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   12bac:	13822602 	orrne	r2, r2, #2097152	; 0x200000
   12bb0:	15802108 	strne	r2, [r0, #264]	; 0x108
   12bb4:	e3130001 	tst	r3, #1
   12bb8:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   12bbc:	13833001 	orrne	r3, r3, #1
   12bc0:	15803108 	strne	r3, [r0, #264]	; 0x108
   12bc4:	e5d12014 	ldrb	r2, [r1, #20]
   12bc8:	e5d13013 	ldrb	r3, [r1, #19]
   12bcc:	e1833402 	orr	r3, r3, r2, lsl #8
   12bd0:	e6bf3073 	sxth	r3, r3
   12bd4:	e580310c 	str	r3, [r0, #268]	; 0x10c
   12bd8:	e5d12018 	ldrb	r2, [r1, #24]
   12bdc:	e5d13017 	ldrb	r3, [r1, #23]
   12be0:	e1833402 	orr	r3, r3, r2, lsl #8
   12be4:	e6bf3073 	sxth	r3, r3
   12be8:	e5803110 	str	r3, [r0, #272]	; 0x110
   12bec:	e5d12016 	ldrb	r2, [r1, #22]
   12bf0:	e5d13015 	ldrb	r3, [r1, #21]
   12bf4:	e1833402 	orr	r3, r3, r2, lsl #8
   12bf8:	e6bf3073 	sxth	r3, r3
   12bfc:	e5803114 	str	r3, [r0, #276]	; 0x114
   12c00:	e5d12012 	ldrb	r2, [r1, #18]
   12c04:	e5d13011 	ldrb	r3, [r1, #17]
   12c08:	e1833402 	orr	r3, r3, r2, lsl #8
   12c0c:	e6bf3073 	sxth	r3, r3
   12c10:	e5803118 	str	r3, [r0, #280]	; 0x118
   12c14:	e5d1200e 	ldrb	r2, [r1, #14]
   12c18:	e5d1300d 	ldrb	r3, [r1, #13]
   12c1c:	e1833402 	orr	r3, r3, r2, lsl #8
   12c20:	e6bf3073 	sxth	r3, r3
   12c24:	e580311c 	str	r3, [r0, #284]	; 0x11c
   12c28:	e5d1300f 	ldrb	r3, [r1, #15]
   12c2c:	e5d12010 	ldrb	r2, [r1, #16]
   12c30:	e1833402 	orr	r3, r3, r2, lsl #8
   12c34:	e6bf3073 	sxth	r3, r3
   12c38:	e5803120 	str	r3, [r0, #288]	; 0x120
   12c3c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   12c40:	00024a98 	.word	0x00024a98

00012c44 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()>:
   12c44:	e92d4010 	push	{r4, lr}
   12c48:	e1a04000 	mov	r4, r0
   12c4c:	e5900140 	ldr	r0, [r0, #320]	; 0x140
   12c50:	e59f3034 	ldr	r3, [pc, #52]	; 12c8c <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()+0x48>
   12c54:	e3500000 	cmp	r0, #0
   12c58:	e5843000 	str	r3, [r4]
   12c5c:	0a000002 	beq	12c6c <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()+0x28>
   12c60:	e5903000 	ldr	r3, [r0]
   12c64:	e5933004 	ldr	r3, [r3, #4]
   12c68:	e12fff33 	blx	r3
   12c6c:	e594013c 	ldr	r0, [r4, #316]	; 0x13c
   12c70:	e3500000 	cmp	r0, #0
   12c74:	0a000000 	beq	12c7c <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()+0x38>
   12c78:	eb003acc 	bl	217b0 <operator delete[](void*)>
   12c7c:	e1a00004 	mov	r0, r4
   12c80:	eb0017a0 	bl	18b08 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   12c84:	e1a00004 	mov	r0, r4
   12c88:	e8bd8010 	pop	{r4, pc}
   12c8c:	00024ac4 	.word	0x00024ac4

00012c90 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()>:
   12c90:	e92d4010 	push	{r4, lr}
   12c94:	e1a04000 	mov	r4, r0
   12c98:	ebffffe9 	bl	12c44 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()>
   12c9c:	e1a00004 	mov	r0, r4
   12ca0:	e3a01f53 	mov	r1, #332	; 0x14c
   12ca4:	eb003ac2 	bl	217b4 <operator delete(void*, unsigned int)>
   12ca8:	e1a00004 	mov	r0, r4
   12cac:	e8bd8010 	pop	{r4, pc}

00012cb0 <CUSBGamePadPS4Device::CUSBGamePadPS4Device(CUSBFunction*)>:
   12cb0:	e92d4010 	push	{r4, lr}
   12cb4:	e1a04000 	mov	r4, r0
   12cb8:	eb001780 	bl	18ac0 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   12cbc:	e3a03000 	mov	r3, #0
   12cc0:	e59f2030 	ldr	r2, [pc, #48]	; 12cf8 <CUSBGamePadPS4Device::CUSBGamePadPS4Device(CUSBFunction*)+0x48>
   12cc4:	e1a00004 	mov	r0, r4
   12cc8:	e5842000 	str	r2, [r4]
   12ccc:	e3a01003 	mov	r1, #3
   12cd0:	e1a02003 	mov	r2, r3
   12cd4:	eb00069d 	bl	14750 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)>
   12cd8:	e3a03000 	mov	r3, #0
   12cdc:	e5c40130 	strb	r0, [r4, #304]	; 0x130
   12ce0:	e584313c 	str	r3, [r4, #316]	; 0x13c
   12ce4:	e5843140 	str	r3, [r4, #320]	; 0x140
   12ce8:	e5c43144 	strb	r3, [r4, #324]	; 0x144
   12cec:	e5c43145 	strb	r3, [r4, #325]	; 0x145
   12cf0:	e1a00004 	mov	r0, r4
   12cf4:	e8bd8010 	pop	{r4, pc}
   12cf8:	00024ac4 	.word	0x00024ac4

00012cfc <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)>:
   12cfc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12d00:	e5d13007 	ldrb	r3, [r1, #7]
   12d04:	e24dd008 	sub	sp, sp, #8
   12d08:	e2133002 	ands	r3, r3, #2
   12d0c:	e1a06001 	mov	r6, r1
   12d10:	e1a05000 	mov	r5, r0
   12d14:	e5d02144 	ldrb	r2, [r0, #324]	; 0x144
   12d18:	1a00004f 	bne	12e5c <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x160>
   12d1c:	e3520000 	cmp	r2, #0
   12d20:	1a000050 	bne	12e68 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x16c>
   12d24:	e5d67021 	ldrb	r7, [r6, #33]	; 0x21
   12d28:	e5d64023 	ldrb	r4, [r6, #35]	; 0x23
   12d2c:	e2473001 	sub	r3, r7, #1
   12d30:	e3530002 	cmp	r3, #2
   12d34:	83a07001 	movhi	r7, #1
   12d38:	e1b043a4 	lsrs	r4, r4, #7
   12d3c:	1a00004e 	bne	12e7c <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x180>
   12d40:	e1a03004 	mov	r3, r4
   12d44:	e5d50145 	ldrb	r0, [r5, #325]	; 0x145
   12d48:	e0833004 	add	r3, r3, r4
   12d4c:	e3500000 	cmp	r0, #0
   12d50:	e0863003 	add	r3, r6, r3
   12d54:	1a000025 	bne	12df0 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xf4>
   12d58:	e5d3e025 	ldrb	lr, [r3, #37]	; 0x25
   12d5c:	e5d3c024 	ldrb	ip, [r3, #36]	; 0x24
   12d60:	e5d31026 	ldrb	r1, [r3, #38]	; 0x26
   12d64:	e20e300f 	and	r3, lr, #15
   12d68:	e18cc403 	orr	ip, ip, r3, lsl #8
   12d6c:	e1a08000 	mov	r8, r0
   12d70:	e1a03000 	mov	r3, r0
   12d74:	e1a01201 	lsl	r1, r1, #4
   12d78:	e181122e 	orr	r1, r1, lr, lsr #4
   12d7c:	e2859f51 	add	r9, r5, #324	; 0x144
   12d80:	e285ef52 	add	lr, r5, #328	; 0x148
   12d84:	e3a0a001 	mov	sl, #1
   12d88:	e1902002 	orrs	r2, r0, r2
   12d8c:	e5c5a145 	strb	sl, [r5, #325]	; 0x145
   12d90:	e1c9c0b2 	strh	ip, [r9, #2]
   12d94:	e1ce10b0 	strh	r1, [lr]
   12d98:	0a000005 	beq	12db4 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xb8>
   12d9c:	e5950140 	ldr	r0, [r5, #320]	; 0x140
   12da0:	e3500000 	cmp	r0, #0
   12da4:	0a00003e 	beq	12ea4 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x1a8>
   12da8:	e1a02008 	mov	r2, r8
   12dac:	e5d51144 	ldrb	r1, [r5, #324]	; 0x144
   12db0:	eb001990 	bl	193f8 <CMouseDevice::ReportHandler(unsigned int, int, int)>
   12db4:	e3a01000 	mov	r1, #0
   12db8:	e2844001 	add	r4, r4, #1
   12dbc:	e1a03184 	lsl	r3, r4, #3
   12dc0:	e0832004 	add	r2, r3, r4
   12dc4:	e1570004 	cmp	r7, r4
   12dc8:	e0862002 	add	r2, r6, r2
   12dcc:	0a000005 	beq	12de8 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xec>
   12dd0:	e5d20023 	ldrb	r0, [r2, #35]	; 0x23
   12dd4:	e1a02001 	mov	r2, r1
   12dd8:	e1b003a0 	lsrs	r0, r0, #7
   12ddc:	0affffd8 	beq	12d44 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x48>
   12de0:	e5c51145 	strb	r1, [r5, #325]	; 0x145
   12de4:	eafffff3 	b	12db8 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xbc>
   12de8:	e28dd008 	add	sp, sp, #8
   12dec:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12df0:	e5d3a025 	ldrb	sl, [r3, #37]	; 0x25
   12df4:	e5d3c024 	ldrb	ip, [r3, #36]	; 0x24
   12df8:	e2859f51 	add	r9, r5, #324	; 0x144
   12dfc:	e20a100f 	and	r1, sl, #15
   12e00:	e1d980b2 	ldrh	r8, [r9, #2]
   12e04:	e18cc401 	orr	ip, ip, r1, lsl #8
   12e08:	e04c8008 	sub	r8, ip, r8
   12e0c:	e358007f 	cmp	r8, #127	; 0x7f
   12e10:	e3e0007e 	mvn	r0, #126	; 0x7e
   12e14:	a3a0807f 	movge	r8, #127	; 0x7f
   12e18:	e5d31026 	ldrb	r1, [r3, #38]	; 0x26
   12e1c:	e285ef52 	add	lr, r5, #328	; 0x148
   12e20:	e1a01201 	lsl	r1, r1, #4
   12e24:	e1de30b0 	ldrh	r3, [lr]
   12e28:	e181122a 	orr	r1, r1, sl, lsr #4
   12e2c:	e0413003 	sub	r3, r1, r3
   12e30:	e1580000 	cmp	r8, r0
   12e34:	b1a08000 	movlt	r8, r0
   12e38:	e353007f 	cmp	r3, #127	; 0x7f
   12e3c:	a3a0307f 	movge	r3, #127	; 0x7f
   12e40:	e1530000 	cmp	r3, r0
   12e44:	b1a03000 	movlt	r3, r0
   12e48:	e3580000 	cmp	r8, #0
   12e4c:	03530000 	cmpeq	r3, #0
   12e50:	13a00001 	movne	r0, #1
   12e54:	03a00000 	moveq	r0, #0
   12e58:	eaffffc9 	b	12d84 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x88>
   12e5c:	e3520000 	cmp	r2, #0
   12e60:	13a02000 	movne	r2, #0
   12e64:	1affffae 	bne	12d24 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x28>
   12e68:	e2933000 	adds	r3, r3, #0
   12e6c:	13a03001 	movne	r3, #1
   12e70:	e3a02001 	mov	r2, #1
   12e74:	e5c53144 	strb	r3, [r5, #324]	; 0x144
   12e78:	eaffffa9 	b	12d24 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x28>
   12e7c:	e3a04000 	mov	r4, #0
   12e80:	e1520004 	cmp	r2, r4
   12e84:	e5c54145 	strb	r4, [r5, #325]	; 0x145
   12e88:	01a04002 	moveq	r4, r2
   12e8c:	0affffc8 	beq	12db4 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xb8>
   12e90:	e5950140 	ldr	r0, [r5, #320]	; 0x140
   12e94:	e1a03004 	mov	r3, r4
   12e98:	e3500000 	cmp	r0, #0
   12e9c:	e1a08004 	mov	r8, r4
   12ea0:	1affffc0 	bne	12da8 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xac>
   12ea4:	e59f0018 	ldr	r0, [pc, #24]	; 12ec4 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x1c8>
   12ea8:	e59f2018 	ldr	r2, [pc, #24]	; 12ec8 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x1cc>
   12eac:	e59f1018 	ldr	r1, [pc, #24]	; 12ecc <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x1d0>
   12eb0:	e58d3004 	str	r3, [sp, #4]
   12eb4:	eb001ca6 	bl	1a154 <assertion_failed>
   12eb8:	e5950140 	ldr	r0, [r5, #320]	; 0x140
   12ebc:	e59d3004 	ldr	r3, [sp, #4]
   12ec0:	eaffffb8 	b	12da8 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xac>
   12ec4:	00024b20 	.word	0x00024b20
   12ec8:	0000015a 	.word	0x0000015a
   12ecc:	00024b0c 	.word	0x00024b0c

00012ed0 <CUSBGamePadPS4Device::ReportHandler(unsigned char const*, unsigned int)>:
   12ed0:	e2913000 	adds	r3, r1, #0
   12ed4:	13a03001 	movne	r3, #1
   12ed8:	e3520040 	cmp	r2, #64	; 0x40
   12edc:	13a03000 	movne	r3, #0
   12ee0:	e2532000 	subs	r2, r3, #0
   12ee4:	012fff1e 	bxeq	lr
   12ee8:	e92d4070 	push	{r4, r5, r6, lr}
   12eec:	e1a04000 	mov	r4, r0
   12ef0:	e5903000 	ldr	r3, [r0]
   12ef4:	e1a05001 	mov	r5, r1
   12ef8:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   12efc:	e12fff33 	blx	r3
   12f00:	e5943124 	ldr	r3, [r4, #292]	; 0x124
   12f04:	e3530000 	cmp	r3, #0
   12f08:	0a000003 	beq	12f1c <CUSBGamePadPS4Device::ReportHandler(unsigned char const*, unsigned int)+0x4c>
   12f0c:	e594012c 	ldr	r0, [r4, #300]	; 0x12c
   12f10:	e2841024 	add	r1, r4, #36	; 0x24
   12f14:	e2400001 	sub	r0, r0, #1
   12f18:	e12fff33 	blx	r3
   12f1c:	e5943140 	ldr	r3, [r4, #320]	; 0x140
   12f20:	e3530000 	cmp	r3, #0
   12f24:	08bd8070 	popeq	{r4, r5, r6, pc}
   12f28:	e1a01005 	mov	r1, r5
   12f2c:	e1a00004 	mov	r0, r4
   12f30:	e8bd4070 	pop	{r4, r5, r6, lr}
   12f34:	eaffff70 	b	12cfc <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)>

00012f38 <CUSBGamePadPS4Device::SendLedRumbleCommand()>:
   12f38:	e92d4010 	push	{r4, lr}
   12f3c:	e590213c 	ldr	r2, [r0, #316]	; 0x13c
   12f40:	e5d0c131 	ldrb	ip, [r0, #305]	; 0x131
   12f44:	e3a03000 	mov	r3, #0
   12f48:	e5c2c003 	strb	ip, [r2, #3]
   12f4c:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
   12f50:	e5d0e133 	ldrb	lr, [r0, #307]	; 0x133
   12f54:	e3a02020 	mov	r2, #32
   12f58:	e5cce004 	strb	lr, [ip, #4]
   12f5c:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
   12f60:	e5d0e132 	ldrb	lr, [r0, #306]	; 0x132
   12f64:	e5cce005 	strb	lr, [ip, #5]
   12f68:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
   12f6c:	e5d0e134 	ldrb	lr, [r0, #308]	; 0x134
   12f70:	e5cce006 	strb	lr, [ip, #6]
   12f74:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
   12f78:	e5d0e135 	ldrb	lr, [r0, #309]	; 0x135
   12f7c:	e5cce007 	strb	lr, [ip, #7]
   12f80:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
   12f84:	e5d0e136 	ldrb	lr, [r0, #310]	; 0x136
   12f88:	e5cce008 	strb	lr, [ip, #8]
   12f8c:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
   12f90:	e5d0e137 	ldrb	lr, [r0, #311]	; 0x137
   12f94:	e5cce009 	strb	lr, [ip, #9]
   12f98:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
   12f9c:	e5d0e138 	ldrb	lr, [r0, #312]	; 0x138
   12fa0:	e5cce00a 	strb	lr, [ip, #10]
   12fa4:	e590113c 	ldr	r1, [r0, #316]	; 0x13c
   12fa8:	ebfff9a5 	bl	11644 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   12fac:	e2504000 	subs	r4, r0, #0
   12fb0:	1a000004 	bne	12fc8 <CUSBGamePadPS4Device::SendLedRumbleCommand()+0x90>
   12fb4:	eb002659 	bl	1c920 <CLogger::Get()>
   12fb8:	e59f3010 	ldr	r3, [pc, #16]	; 12fd0 <CUSBGamePadPS4Device::SendLedRumbleCommand()+0x98>
   12fbc:	e3a02001 	mov	r2, #1
   12fc0:	e59f100c 	ldr	r1, [pc, #12]	; 12fd4 <CUSBGamePadPS4Device::SendLedRumbleCommand()+0x9c>
   12fc4:	eb0027fe 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12fc8:	e1a00004 	mov	r0, r4
   12fcc:	e8bd8010 	pop	{r4, pc}
   12fd0:	00024b34 	.word	0x00024b34
   12fd4:	00024b00 	.word	0x00024b00

00012fd8 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)>:
   12fd8:	e2411001 	sub	r1, r1, #1
   12fdc:	e3510006 	cmp	r1, #6
   12fe0:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
   12fe4:	ea000044 	b	130fc <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0x124>
   12fe8:	00013024 	.word	0x00013024
   12fec:	00013048 	.word	0x00013048
   12ff0:	0001306c 	.word	0x0001306c
   12ff4:	00013090 	.word	0x00013090
   12ff8:	000130b4 	.word	0x000130b4
   12ffc:	000130d8 	.word	0x000130d8
   13000:	00013004 	.word	0x00013004
   13004:	e3e03000 	mvn	r3, #0
   13008:	e3a0207f 	mov	r2, #127	; 0x7f
   1300c:	e5c03134 	strb	r3, [r0, #308]	; 0x134
   13010:	e5c03135 	strb	r3, [r0, #309]	; 0x135
   13014:	e5c03136 	strb	r3, [r0, #310]	; 0x136
   13018:	e5c03138 	strb	r3, [r0, #312]	; 0x138
   1301c:	e5c02137 	strb	r2, [r0, #311]	; 0x137
   13020:	eaffffc4 	b	12f38 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   13024:	e3a02000 	mov	r2, #0
   13028:	e3e03000 	mvn	r3, #0
   1302c:	e3a0107f 	mov	r1, #127	; 0x7f
   13030:	e5c02134 	strb	r2, [r0, #308]	; 0x134
   13034:	e5c02135 	strb	r2, [r0, #309]	; 0x135
   13038:	e5c03136 	strb	r3, [r0, #310]	; 0x136
   1303c:	e5c03138 	strb	r3, [r0, #312]	; 0x138
   13040:	e5c01137 	strb	r1, [r0, #311]	; 0x137
   13044:	eaffffbb 	b	12f38 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   13048:	e3e02000 	mvn	r2, #0
   1304c:	e3a03000 	mov	r3, #0
   13050:	e3a0107f 	mov	r1, #127	; 0x7f
   13054:	e5c02134 	strb	r2, [r0, #308]	; 0x134
   13058:	e5c02138 	strb	r2, [r0, #312]	; 0x138
   1305c:	e5c03135 	strb	r3, [r0, #309]	; 0x135
   13060:	e5c03136 	strb	r3, [r0, #310]	; 0x136
   13064:	e5c01137 	strb	r1, [r0, #311]	; 0x137
   13068:	eaffffb2 	b	12f38 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   1306c:	e3e03000 	mvn	r3, #0
   13070:	e3a01000 	mov	r1, #0
   13074:	e3a0207f 	mov	r2, #127	; 0x7f
   13078:	e5c03134 	strb	r3, [r0, #308]	; 0x134
   1307c:	e5c03136 	strb	r3, [r0, #310]	; 0x136
   13080:	e5c03138 	strb	r3, [r0, #312]	; 0x138
   13084:	e5c01135 	strb	r1, [r0, #309]	; 0x135
   13088:	e5c02137 	strb	r2, [r0, #311]	; 0x137
   1308c:	eaffffa9 	b	12f38 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   13090:	e3a02000 	mov	r2, #0
   13094:	e3e03000 	mvn	r3, #0
   13098:	e3a0107f 	mov	r1, #127	; 0x7f
   1309c:	e5c02134 	strb	r2, [r0, #308]	; 0x134
   130a0:	e5c02136 	strb	r2, [r0, #310]	; 0x136
   130a4:	e5c03135 	strb	r3, [r0, #309]	; 0x135
   130a8:	e5c03138 	strb	r3, [r0, #312]	; 0x138
   130ac:	e5c01137 	strb	r1, [r0, #311]	; 0x137
   130b0:	eaffffa0 	b	12f38 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   130b4:	e3e03000 	mvn	r3, #0
   130b8:	e3a01000 	mov	r1, #0
   130bc:	e3a0207f 	mov	r2, #127	; 0x7f
   130c0:	e5c01134 	strb	r1, [r0, #308]	; 0x134
   130c4:	e5c03135 	strb	r3, [r0, #309]	; 0x135
   130c8:	e5c03136 	strb	r3, [r0, #310]	; 0x136
   130cc:	e5c03138 	strb	r3, [r0, #312]	; 0x138
   130d0:	e5c02137 	strb	r2, [r0, #311]	; 0x137
   130d4:	eaffff97 	b	12f38 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   130d8:	e3e03000 	mvn	r3, #0
   130dc:	e3a01000 	mov	r1, #0
   130e0:	e3a0207f 	mov	r2, #127	; 0x7f
   130e4:	e5c03134 	strb	r3, [r0, #308]	; 0x134
   130e8:	e5c03135 	strb	r3, [r0, #309]	; 0x135
   130ec:	e5c03138 	strb	r3, [r0, #312]	; 0x138
   130f0:	e5c01136 	strb	r1, [r0, #310]	; 0x136
   130f4:	e5c02137 	strb	r2, [r0, #311]	; 0x137
   130f8:	eaffff8e 	b	12f38 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   130fc:	e3a03000 	mov	r3, #0
   13100:	e5c03134 	strb	r3, [r0, #308]	; 0x134
   13104:	e5c03135 	strb	r3, [r0, #309]	; 0x135
   13108:	e5c03136 	strb	r3, [r0, #310]	; 0x136
   1310c:	e5c03137 	strb	r3, [r0, #311]	; 0x137
   13110:	e5c03138 	strb	r3, [r0, #312]	; 0x138
   13114:	eaffff87 	b	12f38 <CUSBGamePadPS4Device::SendLedRumbleCommand()>

00013118 <CUSBGamePadPS4Device::SetLEDMode(unsigned int, unsigned char, unsigned char)>:
   13118:	e92d4010 	push	{r4, lr}
   1311c:	e1a04821 	lsr	r4, r1, #16
   13120:	e1a0e421 	lsr	lr, r1, #8
   13124:	e5c04134 	strb	r4, [r0, #308]	; 0x134
   13128:	e5c01136 	strb	r1, [r0, #310]	; 0x136
   1312c:	e5c0e135 	strb	lr, [r0, #309]	; 0x135
   13130:	e5c02137 	strb	r2, [r0, #311]	; 0x137
   13134:	e5c03138 	strb	r3, [r0, #312]	; 0x138
   13138:	e8bd4010 	pop	{r4, lr}
   1313c:	eaffff7d 	b	12f38 <CUSBGamePadPS4Device::SendLedRumbleCommand()>

00013140 <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)>:
   13140:	e3510001 	cmp	r1, #1
   13144:	0a000011 	beq	13190 <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)+0x50>
   13148:	3a00000a 	bcc	13178 <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)+0x38>
   1314c:	e3510002 	cmp	r1, #2
   13150:	1a000006 	bne	13170 <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)+0x30>
   13154:	e3e0100c 	mvn	r1, #12
   13158:	e3a02000 	mov	r2, #0
   1315c:	e3e03000 	mvn	r3, #0
   13160:	e5c01131 	strb	r1, [r0, #305]	; 0x131
   13164:	e5c02133 	strb	r2, [r0, #307]	; 0x133
   13168:	e5c03132 	strb	r3, [r0, #306]	; 0x132
   1316c:	eaffff71 	b	12f38 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   13170:	e3a00001 	mov	r0, #1
   13174:	e12fff1e 	bx	lr
   13178:	e3a03000 	mov	r3, #0
   1317c:	e3e0200f 	mvn	r2, #15
   13180:	e5c03133 	strb	r3, [r0, #307]	; 0x133
   13184:	e5c02131 	strb	r2, [r0, #305]	; 0x131
   13188:	e5c03132 	strb	r3, [r0, #306]	; 0x132
   1318c:	eaffff69 	b	12f38 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   13190:	e3e0100c 	mvn	r1, #12
   13194:	e3e02000 	mvn	r2, #0
   13198:	e3a03000 	mov	r3, #0
   1319c:	e5c01131 	strb	r1, [r0, #305]	; 0x131
   131a0:	e5c02133 	strb	r2, [r0, #307]	; 0x133
   131a4:	e5c03132 	strb	r3, [r0, #306]	; 0x132
   131a8:	eaffff62 	b	12f38 <CUSBGamePadPS4Device::SendLedRumbleCommand()>

000131ac <CUSBGamePadPS4Device::DisableTouchpad()>:
   131ac:	e3a02000 	mov	r2, #0
   131b0:	e59f3004 	ldr	r3, [pc, #4]	; 131bc <CUSBGamePadPS4Device::DisableTouchpad()+0x10>
   131b4:	e5c32000 	strb	r2, [r3]
   131b8:	e12fff1e 	bx	lr
   131bc:	00029768 	.word	0x00029768

000131c0 <CUSBGamePadPS4Device::Configure()>:
   131c0:	e92d4070 	push	{r4, r5, r6, lr}
   131c4:	e5d05130 	ldrb	r5, [r0, #304]	; 0x130
   131c8:	e3550000 	cmp	r5, #0
   131cc:	0a00003f 	beq	132d0 <CUSBGamePadPS4Device::Configure()+0x110>
   131d0:	e3a02040 	mov	r2, #64	; 0x40
   131d4:	e2803f4a 	add	r3, r0, #296	; 0x128
   131d8:	e1c320b0 	strh	r2, [r3]
   131dc:	e1a04000 	mov	r4, r0
   131e0:	eb001608 	bl	18a08 <CUSBGamePadDevice::Configure()>
   131e4:	e2505000 	subs	r5, r0, #0
   131e8:	0a00003c 	beq	132e0 <CUSBGamePadPS4Device::Configure()+0x120>
   131ec:	e59f3120 	ldr	r3, [pc, #288]	; 13314 <CUSBGamePadPS4Device::Configure()+0x154>
   131f0:	e5d33000 	ldrb	r3, [r3]
   131f4:	e3530000 	cmp	r3, #0
   131f8:	1a00003f 	bne	132fc <CUSBGamePadPS4Device::Configure()+0x13c>
   131fc:	e3a02006 	mov	r2, #6
   13200:	e3a0c00e 	mov	ip, #14
   13204:	e3a00001 	mov	r0, #1
   13208:	e1a03004 	mov	r3, r4
   1320c:	e3a05000 	mov	r5, #0
   13210:	e3a010ff 	mov	r1, #255	; 0xff
   13214:	e5842024 	str	r2, [r4, #36]	; 0x24
   13218:	e584c104 	str	ip, [r4, #260]	; 0x104
   1321c:	e58400e8 	str	r0, [r4, #232]	; 0xe8
   13220:	e2842048 	add	r2, r4, #72	; 0x48
   13224:	e583502c 	str	r5, [r3, #44]	; 0x2c
   13228:	e5831030 	str	r1, [r3, #48]	; 0x30
   1322c:	e283300c 	add	r3, r3, #12
   13230:	e1520003 	cmp	r2, r3
   13234:	1afffffa 	bne	13224 <CUSBGamePadPS4Device::Configure()+0x64>
   13238:	e3a00020 	mov	r0, #32
   1323c:	eb003959 	bl	217a8 <operator new[](unsigned int)>
   13240:	e3a06005 	mov	r6, #5
   13244:	e3a02020 	mov	r2, #32
   13248:	e584013c 	str	r0, [r4, #316]	; 0x13c
   1324c:	e3a01000 	mov	r1, #0
   13250:	eb0034e5 	bl	205ec <memset>
   13254:	e3a0c007 	mov	ip, #7
   13258:	e3e03000 	mvn	r3, #0
   1325c:	e3a0e004 	mov	lr, #4
   13260:	e3e0100f 	mvn	r1, #15
   13264:	e3a0207f 	mov	r2, #127	; 0x7f
   13268:	e594013c 	ldr	r0, [r4, #316]	; 0x13c
   1326c:	e5c06000 	strb	r6, [r0]
   13270:	e594013c 	ldr	r0, [r4, #316]	; 0x13c
   13274:	e5c0c001 	strb	ip, [r0, #1]
   13278:	e594c13c 	ldr	ip, [r4, #316]	; 0x13c
   1327c:	e1a00004 	mov	r0, r4
   13280:	e5cce002 	strb	lr, [ip, #2]
   13284:	e5c41131 	strb	r1, [r4, #305]	; 0x131
   13288:	e5c43134 	strb	r3, [r4, #308]	; 0x134
   1328c:	e5c43135 	strb	r3, [r4, #309]	; 0x135
   13290:	e5c43136 	strb	r3, [r4, #310]	; 0x136
   13294:	e5c43138 	strb	r3, [r4, #312]	; 0x138
   13298:	e5c42137 	strb	r2, [r4, #311]	; 0x137
   1329c:	e5c45133 	strb	r5, [r4, #307]	; 0x133
   132a0:	e5c45132 	strb	r5, [r4, #306]	; 0x132
   132a4:	ebffff23 	bl	12f38 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   132a8:	e5c45134 	strb	r5, [r4, #308]	; 0x134
   132ac:	e5c45135 	strb	r5, [r4, #309]	; 0x135
   132b0:	e5c45136 	strb	r5, [r4, #310]	; 0x136
   132b4:	e3a000fa 	mov	r0, #250	; 0xfa
   132b8:	eb003483 	bl	204cc <CTimer::SimpleMsDelay(unsigned int)>
   132bc:	e1a00004 	mov	r0, r4
   132c0:	ebffff1c 	bl	12f38 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   132c4:	e1a00004 	mov	r0, r4
   132c8:	e8bd4070 	pop	{r4, r5, r6, lr}
   132cc:	eafff96d 	b	11888 <CUSBHIDDevice::StartRequest()>
   132d0:	e59f1040 	ldr	r1, [pc, #64]	; 13318 <CUSBGamePadPS4Device::Configure()+0x158>
   132d4:	eb000501 	bl	146e0 <CUSBFunction::ConfigurationError(char const*) const>
   132d8:	e1a00005 	mov	r0, r5
   132dc:	e8bd8070 	pop	{r4, r5, r6, pc}
   132e0:	eb00258e 	bl	1c920 <CLogger::Get()>
   132e4:	e59f3030 	ldr	r3, [pc, #48]	; 1331c <CUSBGamePadPS4Device::Configure()+0x15c>
   132e8:	e3a02001 	mov	r2, #1
   132ec:	e59f1024 	ldr	r1, [pc, #36]	; 13318 <CUSBGamePadPS4Device::Configure()+0x158>
   132f0:	eb002733 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   132f4:	e1a00005 	mov	r0, r5
   132f8:	e8bd8070 	pop	{r4, r5, r6, pc}
   132fc:	e3a00028 	mov	r0, #40	; 0x28
   13300:	eb003927 	bl	217a4 <operator new(unsigned int)>
   13304:	e1a05000 	mov	r5, r0
   13308:	eb0017fd 	bl	19304 <CMouseDevice::CMouseDevice()>
   1330c:	e5845140 	str	r5, [r4, #320]	; 0x140
   13310:	eaffffb9 	b	131fc <CUSBGamePadPS4Device::Configure()+0x3c>
   13314:	00029768 	.word	0x00029768
   13318:	00024b00 	.word	0x00024b00
   1331c:	0002495c 	.word	0x0002495c

00013320 <CUSBGamePadPS4Device::GetProperties()>:
   13320:	e3a0003f 	mov	r0, #63	; 0x3f
   13324:	e12fff1e 	bx	lr

00013328 <CUSBGamePadXbox360Device::~CUSBGamePadXbox360Device()>:
   13328:	e92d4010 	push	{r4, lr}
   1332c:	e1a04000 	mov	r4, r0
   13330:	e59f300c 	ldr	r3, [pc, #12]	; 13344 <CUSBGamePadXbox360Device::~CUSBGamePadXbox360Device()+0x1c>
   13334:	e5803000 	str	r3, [r0]
   13338:	eb0015f2 	bl	18b08 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   1333c:	e1a00004 	mov	r0, r4
   13340:	e8bd8010 	pop	{r4, pc}
   13344:	00024b5c 	.word	0x00024b5c

00013348 <CUSBGamePadXbox360Device::~CUSBGamePadXbox360Device()>:
   13348:	e92d4010 	push	{r4, lr}
   1334c:	e1a04000 	mov	r4, r0
   13350:	e59f3018 	ldr	r3, [pc, #24]	; 13370 <CUSBGamePadXbox360Device::~CUSBGamePadXbox360Device()+0x28>
   13354:	e5803000 	str	r3, [r0]
   13358:	eb0015ea 	bl	18b08 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   1335c:	e1a00004 	mov	r0, r4
   13360:	e3a01e13 	mov	r1, #304	; 0x130
   13364:	eb003912 	bl	217b4 <operator delete(void*, unsigned int)>
   13368:	e1a00004 	mov	r0, r4
   1336c:	e8bd8010 	pop	{r4, pc}
   13370:	00024b5c 	.word	0x00024b5c

00013374 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)>:
   13374:	e92d4070 	push	{r4, r5, r6, lr}
   13378:	e2515000 	subs	r5, r1, #0
   1337c:	e1a04000 	mov	r4, r0
   13380:	0a00003f 	beq	13484 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x110>
   13384:	e5d53000 	ldrb	r3, [r5]
   13388:	e5d52001 	ldrb	r2, [r5, #1]
   1338c:	e1833402 	orr	r3, r3, r2, lsl #8
   13390:	e3530b05 	cmp	r3, #5120	; 0x1400
   13394:	0a000003 	beq	133a8 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x34>
   13398:	e3a02078 	mov	r2, #120	; 0x78
   1339c:	e59f10f4 	ldr	r1, [pc, #244]	; 13498 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x124>
   133a0:	e59f00f4 	ldr	r0, [pc, #244]	; 1349c <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x128>
   133a4:	eb001b6a 	bl	1a154 <assertion_failed>
   133a8:	e3a00000 	mov	r0, #0
   133ac:	e5d51003 	ldrb	r1, [r5, #3]
   133b0:	e5d52002 	ldrb	r2, [r5, #2]
   133b4:	e59f30e4 	ldr	r3, [pc, #228]	; 134a0 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x12c>
   133b8:	e1822401 	orr	r2, r2, r1, lsl #8
   133bc:	e5840108 	str	r0, [r4, #264]	; 0x108
   133c0:	e2831040 	add	r1, r3, #64	; 0x40
   133c4:	e3120001 	tst	r2, #1
   133c8:	1593c000 	ldrne	ip, [r3]
   133cc:	15940108 	ldrne	r0, [r4, #264]	; 0x108
   133d0:	e2833004 	add	r3, r3, #4
   133d4:	1180000c 	orrne	r0, r0, ip
   133d8:	15840108 	strne	r0, [r4, #264]	; 0x108
   133dc:	e1510003 	cmp	r1, r3
   133e0:	e1a020a2 	lsr	r2, r2, #1
   133e4:	1afffff6 	bne	133c4 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x50>
   133e8:	e3a00000 	mov	r0, #0
   133ec:	e1a02000 	mov	r2, r0
   133f0:	e5d53006 	ldrb	r3, [r5, #6]
   133f4:	e5d5c007 	ldrb	ip, [r5, #7]
   133f8:	e183340c 	orr	r3, r3, ip, lsl #8
   133fc:	e6bf3073 	sxth	r3, r3
   13400:	e2833902 	add	r3, r3, #32768	; 0x8000
   13404:	e1a03423 	lsr	r3, r3, #8
   13408:	e2800001 	add	r0, r0, #1
   1340c:	e0822082 	add	r2, r2, r2, lsl #1
   13410:	e0842102 	add	r2, r4, r2, lsl #2
   13414:	e3500004 	cmp	r0, #4
   13418:	e085c080 	add	ip, r5, r0, lsl #1
   1341c:	e5823028 	str	r3, [r2, #40]	; 0x28
   13420:	0a00000a 	beq	13450 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0xdc>
   13424:	e5dc3006 	ldrb	r3, [ip, #6]
   13428:	e5dcc007 	ldrb	ip, [ip, #7]
   1342c:	e7912100 	ldr	r2, [r1, r0, lsl #2]
   13430:	e183340c 	orr	r3, r3, ip, lsl #8
   13434:	e6bf3073 	sxth	r3, r3
   13438:	e3c2c002 	bic	ip, r2, #2
   1343c:	e2833902 	add	r3, r3, #32768	; 0x8000
   13440:	e35c0001 	cmp	ip, #1
   13444:	e1a03423 	lsr	r3, r3, #8
   13448:	026330ff 	rsbeq	r3, r3, #255	; 0xff
   1344c:	eaffffed 	b	13408 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x94>
   13450:	e5d53004 	ldrb	r3, [r5, #4]
   13454:	e353007f 	cmp	r3, #127	; 0x7f
   13458:	e5843058 	str	r3, [r4, #88]	; 0x58
   1345c:	c5943108 	ldrgt	r3, [r4, #264]	; 0x108
   13460:	c3833008 	orrgt	r3, r3, #8
   13464:	c5843108 	strgt	r3, [r4, #264]	; 0x108
   13468:	e5d53005 	ldrb	r3, [r5, #5]
   1346c:	e353007f 	cmp	r3, #127	; 0x7f
   13470:	e5843064 	str	r3, [r4, #100]	; 0x64
   13474:	c5943108 	ldrgt	r3, [r4, #264]	; 0x108
   13478:	c3833010 	orrgt	r3, r3, #16
   1347c:	c5843108 	strgt	r3, [r4, #264]	; 0x108
   13480:	e8bd8070 	pop	{r4, r5, r6, pc}
   13484:	e3a02077 	mov	r2, #119	; 0x77
   13488:	e59f1008 	ldr	r1, [pc, #8]	; 13498 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x124>
   1348c:	e59f0010 	ldr	r0, [pc, #16]	; 134a4 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x130>
   13490:	eb001b2f 	bl	1a154 <assertion_failed>
   13494:	eaffffba 	b	13384 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x10>
   13498:	00024c08 	.word	0x00024c08
   1349c:	00024c20 	.word	0x00024c20
   134a0:	00024b98 	.word	0x00024b98
   134a4:	00024a88 	.word	0x00024a88

000134a8 <CUSBGamePadXbox360Device::ReportHandler(unsigned char const*, unsigned int)>:
   134a8:	e2913000 	adds	r3, r1, #0
   134ac:	13a03001 	movne	r3, #1
   134b0:	e352000e 	cmp	r2, #14
   134b4:	13a03000 	movne	r3, #0
   134b8:	e2532000 	subs	r2, r3, #0
   134bc:	012fff1e 	bxeq	lr
   134c0:	e5d1c000 	ldrb	ip, [r1]
   134c4:	e35c0000 	cmp	ip, #0
   134c8:	112fff1e 	bxne	lr
   134cc:	e5d13001 	ldrb	r3, [r1, #1]
   134d0:	e3530014 	cmp	r3, #20
   134d4:	112fff1e 	bxne	lr
   134d8:	e5903124 	ldr	r3, [r0, #292]	; 0x124
   134dc:	e92d4070 	push	{r4, r5, r6, lr}
   134e0:	e3530000 	cmp	r3, #0
   134e4:	e1a04000 	mov	r4, r0
   134e8:	08bd8070 	popeq	{r4, r5, r6, pc}
   134ec:	e1a05000 	mov	r5, r0
   134f0:	e4953024 	ldr	r3, [r5], #36	; 0x24
   134f4:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   134f8:	e12fff33 	blx	r3
   134fc:	e594012c 	ldr	r0, [r4, #300]	; 0x12c
   13500:	e1a01005 	mov	r1, r5
   13504:	e5943124 	ldr	r3, [r4, #292]	; 0x124
   13508:	e2400001 	sub	r0, r0, #1
   1350c:	e8bd4070 	pop	{r4, r5, r6, lr}
   13510:	e12fff13 	bx	r3

00013514 <CUSBGamePadXbox360Device::SetLEDMode(TGamePadLEDMode)>:
   13514:	e3510004 	cmp	r1, #4
   13518:	9a000001 	bls	13524 <CUSBGamePadXbox360Device::SetLEDMode(TGamePadLEDMode)+0x10>
   1351c:	e3a00000 	mov	r0, #0
   13520:	e12fff1e 	bx	lr
   13524:	e3a0c003 	mov	ip, #3
   13528:	e92d4010 	push	{r4, lr}
   1352c:	e3a0e001 	mov	lr, #1
   13530:	e59f302c 	ldr	r3, [pc, #44]	; 13564 <CUSBGamePadXbox360Device::SetLEDMode(TGamePadLEDMode)+0x50>
   13534:	e24dd008 	sub	sp, sp, #8
   13538:	e0831001 	add	r1, r3, r1
   1353c:	e5d1409c 	ldrb	r4, [r1, #156]	; 0x9c
   13540:	e1a0200c 	mov	r2, ip
   13544:	e3a03000 	mov	r3, #0
   13548:	e28d1004 	add	r1, sp, #4
   1354c:	e5cd4006 	strb	r4, [sp, #6]
   13550:	e5cdc005 	strb	ip, [sp, #5]
   13554:	e5cde004 	strb	lr, [sp, #4]
   13558:	ebfff839 	bl	11644 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   1355c:	e28dd008 	add	sp, sp, #8
   13560:	e8bd8010 	pop	{r4, pc}
   13564:	00024b54 	.word	0x00024b54

00013568 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)>:
   13568:	e92d4030 	push	{r4, r5, lr}
   1356c:	e24dd00c 	sub	sp, sp, #12
   13570:	e1a04001 	mov	r4, r1
   13574:	e1a05000 	mov	r5, r0
   13578:	e3a02008 	mov	r2, #8
   1357c:	e1a0000d 	mov	r0, sp
   13580:	e3a01000 	mov	r1, #0
   13584:	eb003418 	bl	205ec <memset>
   13588:	e3a03008 	mov	r3, #8
   1358c:	e3540001 	cmp	r4, #1
   13590:	e5cd3001 	strb	r3, [sp, #1]
   13594:	0a000012 	beq	135e4 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x7c>
   13598:	3a000003 	bcc	135ac <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x44>
   1359c:	e3540002 	cmp	r4, #2
   135a0:	1a000008 	bne	135c8 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x60>
   135a4:	e3e03000 	mvn	r3, #0
   135a8:	e5cd3003 	strb	r3, [sp, #3]
   135ac:	e1a0100d 	mov	r1, sp
   135b0:	e1a00005 	mov	r0, r5
   135b4:	e3a03000 	mov	r3, #0
   135b8:	e3a02008 	mov	r2, #8
   135bc:	ebfff820 	bl	11644 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   135c0:	e28dd00c 	add	sp, sp, #12
   135c4:	e8bd8030 	pop	{r4, r5, pc}
   135c8:	e3a020e5 	mov	r2, #229	; 0xe5
   135cc:	e59f101c 	ldr	r1, [pc, #28]	; 135f0 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x88>
   135d0:	e59f001c 	ldr	r0, [pc, #28]	; 135f4 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x8c>
   135d4:	eb001ade 	bl	1a154 <assertion_failed>
   135d8:	e3a00000 	mov	r0, #0
   135dc:	e28dd00c 	add	sp, sp, #12
   135e0:	e8bd8030 	pop	{r4, r5, pc}
   135e4:	e3e03000 	mvn	r3, #0
   135e8:	e5cd3004 	strb	r3, [sp, #4]
   135ec:	eaffffee 	b	135ac <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x44>
   135f0:	00024c08 	.word	0x00024c08
   135f4:	000239a8 	.word	0x000239a8

000135f8 <CUSBGamePadXbox360Device::CUSBGamePadXbox360Device(CUSBFunction*)>:
   135f8:	e92d4010 	push	{r4, lr}
   135fc:	e1a04000 	mov	r4, r0
   13600:	eb00152e 	bl	18ac0 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   13604:	e59f3008 	ldr	r3, [pc, #8]	; 13614 <CUSBGamePadXbox360Device::CUSBGamePadXbox360Device(CUSBFunction*)+0x1c>
   13608:	e1a00004 	mov	r0, r4
   1360c:	e5843000 	str	r3, [r4]
   13610:	e8bd8010 	pop	{r4, pc}
   13614:	00024b5c 	.word	0x00024b5c

00013618 <CUSBGamePadXbox360Device::Configure()>:
   13618:	e3a0200e 	mov	r2, #14
   1361c:	e2803f4a 	add	r3, r0, #296	; 0x128
   13620:	e92d4070 	push	{r4, r5, r6, lr}
   13624:	e1c320b0 	strh	r2, [r3]
   13628:	e1a04000 	mov	r4, r0
   1362c:	eb0014f5 	bl	18a08 <CUSBGamePadDevice::Configure()>
   13630:	e2505000 	subs	r5, r0, #0
   13634:	0a00001e 	beq	136b4 <CUSBGamePadXbox360Device::Configure()+0x9c>
   13638:	e3a03000 	mov	r3, #0
   1363c:	e3a020ff 	mov	r2, #255	; 0xff
   13640:	e3a0c012 	mov	ip, #18
   13644:	e3a00006 	mov	r0, #6
   13648:	e5941000 	ldr	r1, [r4]
   1364c:	e5840024 	str	r0, [r4, #36]	; 0x24
   13650:	e584302c 	str	r3, [r4, #44]	; 0x2c
   13654:	e5843038 	str	r3, [r4, #56]	; 0x38
   13658:	e5843044 	str	r3, [r4, #68]	; 0x44
   1365c:	e5843050 	str	r3, [r4, #80]	; 0x50
   13660:	e584305c 	str	r3, [r4, #92]	; 0x5c
   13664:	e5843068 	str	r3, [r4, #104]	; 0x68
   13668:	e58430e8 	str	r3, [r4, #232]	; 0xe8
   1366c:	e584c104 	str	ip, [r4, #260]	; 0x104
   13670:	e591302c 	ldr	r3, [r1, #44]	; 0x2c
   13674:	e5842030 	str	r2, [r4, #48]	; 0x30
   13678:	e584203c 	str	r2, [r4, #60]	; 0x3c
   1367c:	e5842048 	str	r2, [r4, #72]	; 0x48
   13680:	e5842054 	str	r2, [r4, #84]	; 0x54
   13684:	e5842060 	str	r2, [r4, #96]	; 0x60
   13688:	e584206c 	str	r2, [r4, #108]	; 0x6c
   1368c:	e5d4112c 	ldrb	r1, [r4, #300]	; 0x12c
   13690:	e1a00004 	mov	r0, r4
   13694:	e12fff33 	blx	r3
   13698:	e2505000 	subs	r5, r0, #0
   1369c:	1a000001 	bne	136a8 <CUSBGamePadXbox360Device::Configure()+0x90>
   136a0:	e1a00005 	mov	r0, r5
   136a4:	e8bd8070 	pop	{r4, r5, r6, pc}
   136a8:	e1a00004 	mov	r0, r4
   136ac:	e8bd4070 	pop	{r4, r5, r6, lr}
   136b0:	eafff874 	b	11888 <CUSBHIDDevice::StartRequest()>
   136b4:	eb002499 	bl	1c920 <CLogger::Get()>
   136b8:	e59f3010 	ldr	r3, [pc, #16]	; 136d0 <CUSBGamePadXbox360Device::Configure()+0xb8>
   136bc:	e3a02001 	mov	r2, #1
   136c0:	e59f100c 	ldr	r1, [pc, #12]	; 136d4 <CUSBGamePadXbox360Device::Configure()+0xbc>
   136c4:	eb00263e 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   136c8:	e1a00005 	mov	r0, r5
   136cc:	e8bd8070 	pop	{r4, r5, r6, pc}
   136d0:	0002495c 	.word	0x0002495c
   136d4:	00024bf8 	.word	0x00024bf8

000136d8 <CUSBGamePadXbox360Device::GetProperties()>:
   136d8:	e3a0000b 	mov	r0, #11
   136dc:	e12fff1e 	bx	lr

000136e0 <CUSBGamePadXboxOneDevice::DecodeReport(unsigned char const*)>:
   136e0:	e3a02000 	mov	r2, #0
   136e4:	e5d13004 	ldrb	r3, [r1, #4]
   136e8:	e5802108 	str	r2, [r0, #264]	; 0x108
   136ec:	e3130004 	tst	r3, #4
   136f0:	13a02901 	movne	r2, #16384	; 0x4000
   136f4:	15802108 	strne	r2, [r0, #264]	; 0x108
   136f8:	e3130008 	tst	r3, #8
   136fc:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   13700:	13822b02 	orrne	r2, r2, #2048	; 0x800
   13704:	15802108 	strne	r2, [r0, #264]	; 0x108
   13708:	e3130010 	tst	r3, #16
   1370c:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   13710:	13822c02 	orrne	r2, r2, #512	; 0x200
   13714:	15802108 	strne	r2, [r0, #264]	; 0x108
   13718:	e3130020 	tst	r3, #32
   1371c:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   13720:	13822c01 	orrne	r2, r2, #256	; 0x100
   13724:	15802108 	strne	r2, [r0, #264]	; 0x108
   13728:	e3130040 	tst	r3, #64	; 0x40
   1372c:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   13730:	13822b01 	orrne	r2, r2, #1024	; 0x400
   13734:	15802108 	strne	r2, [r0, #264]	; 0x108
   13738:	e1b033a3 	lsrs	r3, r3, #7
   1373c:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   13740:	13833080 	orrne	r3, r3, #128	; 0x80
   13744:	15803108 	strne	r3, [r0, #264]	; 0x108
   13748:	e5d13005 	ldrb	r3, [r1, #5]
   1374c:	e3130001 	tst	r3, #1
   13750:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   13754:	13822902 	orrne	r2, r2, #32768	; 0x8000
   13758:	15802108 	strne	r2, [r0, #264]	; 0x108
   1375c:	e3130002 	tst	r3, #2
   13760:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   13764:	13822802 	orrne	r2, r2, #131072	; 0x20000
   13768:	15802108 	strne	r2, [r0, #264]	; 0x108
   1376c:	e3130004 	tst	r3, #4
   13770:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   13774:	13822701 	orrne	r2, r2, #262144	; 0x40000
   13778:	15802108 	strne	r2, [r0, #264]	; 0x108
   1377c:	e3130008 	tst	r3, #8
   13780:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   13784:	13822801 	orrne	r2, r2, #65536	; 0x10000
   13788:	15802108 	strne	r2, [r0, #264]	; 0x108
   1378c:	e3130010 	tst	r3, #16
   13790:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   13794:	13822020 	orrne	r2, r2, #32
   13798:	15802108 	strne	r2, [r0, #264]	; 0x108
   1379c:	e3130020 	tst	r3, #32
   137a0:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   137a4:	13822040 	orrne	r2, r2, #64	; 0x40
   137a8:	15802108 	strne	r2, [r0, #264]	; 0x108
   137ac:	e3130040 	tst	r3, #64	; 0x40
   137b0:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   137b4:	13822a01 	orrne	r2, r2, #4096	; 0x1000
   137b8:	15802108 	strne	r2, [r0, #264]	; 0x108
   137bc:	e1b033a3 	lsrs	r3, r3, #7
   137c0:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   137c4:	13833a02 	orrne	r3, r3, #8192	; 0x2000
   137c8:	15803108 	strne	r3, [r0, #264]	; 0x108
   137cc:	e5d12007 	ldrb	r2, [r1, #7]
   137d0:	e5d13006 	ldrb	r3, [r1, #6]
   137d4:	e1833402 	orr	r3, r3, r2, lsl #8
   137d8:	e1a03143 	asr	r3, r3, #2
   137dc:	e353007f 	cmp	r3, #127	; 0x7f
   137e0:	e5803058 	str	r3, [r0, #88]	; 0x58
   137e4:	c5903108 	ldrgt	r3, [r0, #264]	; 0x108
   137e8:	c3833008 	orrgt	r3, r3, #8
   137ec:	c5803108 	strgt	r3, [r0, #264]	; 0x108
   137f0:	e5d12009 	ldrb	r2, [r1, #9]
   137f4:	e5d13008 	ldrb	r3, [r1, #8]
   137f8:	e1833402 	orr	r3, r3, r2, lsl #8
   137fc:	e1a03143 	asr	r3, r3, #2
   13800:	e353007f 	cmp	r3, #127	; 0x7f
   13804:	e5803064 	str	r3, [r0, #100]	; 0x64
   13808:	c5903108 	ldrgt	r3, [r0, #264]	; 0x108
   1380c:	c3833010 	orrgt	r3, r3, #16
   13810:	c5803108 	strgt	r3, [r0, #264]	; 0x108
   13814:	e5d1200b 	ldrb	r2, [r1, #11]
   13818:	e5d1300a 	ldrb	r3, [r1, #10]
   1381c:	e1833402 	orr	r3, r3, r2, lsl #8
   13820:	e6bf3073 	sxth	r3, r3
   13824:	e2833902 	add	r3, r3, #32768	; 0x8000
   13828:	e1a03423 	lsr	r3, r3, #8
   1382c:	e5803028 	str	r3, [r0, #40]	; 0x28
   13830:	e5d1200d 	ldrb	r2, [r1, #13]
   13834:	e5d1300c 	ldrb	r3, [r1, #12]
   13838:	e1833402 	orr	r3, r3, r2, lsl #8
   1383c:	e6bf3073 	sxth	r3, r3
   13840:	e2833902 	add	r3, r3, #32768	; 0x8000
   13844:	e1a03423 	lsr	r3, r3, #8
   13848:	e26330ff 	rsb	r3, r3, #255	; 0xff
   1384c:	e5803034 	str	r3, [r0, #52]	; 0x34
   13850:	e5d1200f 	ldrb	r2, [r1, #15]
   13854:	e5d1300e 	ldrb	r3, [r1, #14]
   13858:	e1833402 	orr	r3, r3, r2, lsl #8
   1385c:	e6bf3073 	sxth	r3, r3
   13860:	e2833902 	add	r3, r3, #32768	; 0x8000
   13864:	e1a03423 	lsr	r3, r3, #8
   13868:	e5803040 	str	r3, [r0, #64]	; 0x40
   1386c:	e5d13010 	ldrb	r3, [r1, #16]
   13870:	e5d12011 	ldrb	r2, [r1, #17]
   13874:	e1833402 	orr	r3, r3, r2, lsl #8
   13878:	e6bf3073 	sxth	r3, r3
   1387c:	e2833902 	add	r3, r3, #32768	; 0x8000
   13880:	e1a03423 	lsr	r3, r3, #8
   13884:	e26330ff 	rsb	r3, r3, #255	; 0xff
   13888:	e580304c 	str	r3, [r0, #76]	; 0x4c
   1388c:	e12fff1e 	bx	lr

00013890 <CUSBGamePadXboxOneDevice::~CUSBGamePadXboxOneDevice()>:
   13890:	e92d4010 	push	{r4, lr}
   13894:	e1a04000 	mov	r4, r0
   13898:	e59f300c 	ldr	r3, [pc, #12]	; 138ac <CUSBGamePadXboxOneDevice::~CUSBGamePadXboxOneDevice()+0x1c>
   1389c:	e5803000 	str	r3, [r0]
   138a0:	eb001498 	bl	18b08 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   138a4:	e1a00004 	mov	r0, r4
   138a8:	e8bd8010 	pop	{r4, pc}
   138ac:	00024c4c 	.word	0x00024c4c

000138b0 <CUSBGamePadXboxOneDevice::~CUSBGamePadXboxOneDevice()>:
   138b0:	e92d4010 	push	{r4, lr}
   138b4:	e1a04000 	mov	r4, r0
   138b8:	e59f3018 	ldr	r3, [pc, #24]	; 138d8 <CUSBGamePadXboxOneDevice::~CUSBGamePadXboxOneDevice()+0x28>
   138bc:	e5803000 	str	r3, [r0]
   138c0:	eb001490 	bl	18b08 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   138c4:	e1a00004 	mov	r0, r4
   138c8:	e3a01f4d 	mov	r1, #308	; 0x134
   138cc:	eb0037b8 	bl	217b4 <operator delete(void*, unsigned int)>
   138d0:	e1a00004 	mov	r0, r4
   138d4:	e8bd8010 	pop	{r4, pc}
   138d8:	00024c4c 	.word	0x00024c4c

000138dc <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)>:
   138dc:	e2513000 	subs	r3, r1, #0
   138e0:	012fff1e 	bxeq	lr
   138e4:	e92d4030 	push	{r4, r5, lr}
   138e8:	e3520006 	cmp	r2, #6
   138ec:	e24dd014 	sub	sp, sp, #20
   138f0:	e1a04000 	mov	r4, r0
   138f4:	e1a0c003 	mov	ip, r3
   138f8:	0a00000b 	beq	1392c <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x50>
   138fc:	e5903124 	ldr	r3, [r0, #292]	; 0x124
   13900:	e2933000 	adds	r3, r3, #0
   13904:	13a03001 	movne	r3, #1
   13908:	e3520012 	cmp	r2, #18
   1390c:	13a03000 	movne	r3, #0
   13910:	e3530000 	cmp	r3, #0
   13914:	0a000002 	beq	13924 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x48>
   13918:	e5dc3000 	ldrb	r3, [ip]
   1391c:	e3530020 	cmp	r3, #32
   13920:	0a00001b 	beq	13994 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0xb8>
   13924:	e28dd014 	add	sp, sp, #20
   13928:	e8bd8030 	pop	{r4, r5, pc}
   1392c:	e5d33000 	ldrb	r3, [r3]
   13930:	e3530007 	cmp	r3, #7
   13934:	1afffffa 	bne	13924 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x48>
   13938:	e5dc3001 	ldrb	r3, [ip, #1]
   1393c:	e3530030 	cmp	r3, #48	; 0x30
   13940:	1afffff7 	bne	13924 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x48>
   13944:	e1a0e00d 	mov	lr, sp
   13948:	e59f506c 	ldr	r5, [pc, #108]	; 139bc <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0xe0>
   1394c:	e5dcc002 	ldrb	ip, [ip, #2]
   13950:	e895000f 	ldm	r5, {r0, r1, r2, r3}
   13954:	e8ae0007 	stmia	lr!, {r0, r1, r2}
   13958:	e1a00004 	mov	r0, r4
   1395c:	e5ce3000 	strb	r3, [lr]
   13960:	e3a0200d 	mov	r2, #13
   13964:	e3a03000 	mov	r3, #0
   13968:	e1a0100d 	mov	r1, sp
   1396c:	e5cdc002 	strb	ip, [sp, #2]
   13970:	ebfff75a 	bl	116e0 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)>
   13974:	e3500000 	cmp	r0, #0
   13978:	1affffe9 	bne	13924 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x48>
   1397c:	eb0023e7 	bl	1c920 <CLogger::Get()>
   13980:	e2851010 	add	r1, r5, #16
   13984:	e59f3034 	ldr	r3, [pc, #52]	; 139c0 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0xe4>
   13988:	e3a02001 	mov	r2, #1
   1398c:	eb00258c 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13990:	eaffffe3 	b	13924 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x48>
   13994:	e1a05000 	mov	r5, r0
   13998:	e4953024 	ldr	r3, [r5], #36	; 0x24
   1399c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   139a0:	e12fff33 	blx	r3
   139a4:	e594012c 	ldr	r0, [r4, #300]	; 0x12c
   139a8:	e1a01005 	mov	r1, r5
   139ac:	e2400001 	sub	r0, r0, #1
   139b0:	e5943124 	ldr	r3, [r4, #292]	; 0x124
   139b4:	e12fff33 	blx	r3
   139b8:	eaffffd9 	b	13924 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x48>
   139bc:	00024c88 	.word	0x00024c88
   139c0:	00024cc0 	.word	0x00024cc0

000139c4 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)>:
   139c4:	e92d4010 	push	{r4, lr}
   139c8:	e24dd010 	sub	sp, sp, #16
   139cc:	e1a0c00d 	mov	ip, sp
   139d0:	e1a04001 	mov	r4, r1
   139d4:	e59f307c 	ldr	r3, [pc, #124]	; 13a58 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x94>
   139d8:	e1a0e000 	mov	lr, r0
   139dc:	e893000f 	ldm	r3, {r0, r1, r2, r3}
   139e0:	e8ac0007 	stmia	ip!, {r0, r1, r2}
   139e4:	e3540001 	cmp	r4, #1
   139e8:	e5cc3000 	strb	r3, [ip]
   139ec:	0a000016 	beq	13a4c <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x88>
   139f0:	3a000003 	bcc	13a04 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x40>
   139f4:	e3540002 	cmp	r4, #2
   139f8:	1a00000c 	bne	13a30 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x6c>
   139fc:	e3e03000 	mvn	r3, #0
   13a00:	e5cd3008 	strb	r3, [sp, #8]
   13a04:	e5dec130 	ldrb	ip, [lr, #304]	; 0x130
   13a08:	e1a0100d 	mov	r1, sp
   13a0c:	e28c3001 	add	r3, ip, #1
   13a10:	e5ce3130 	strb	r3, [lr, #304]	; 0x130
   13a14:	e1a0000e 	mov	r0, lr
   13a18:	e3a03000 	mov	r3, #0
   13a1c:	e3a0200d 	mov	r2, #13
   13a20:	e5cdc002 	strb	ip, [sp, #2]
   13a24:	ebfff706 	bl	11644 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   13a28:	e28dd010 	add	sp, sp, #16
   13a2c:	e8bd8010 	pop	{r4, pc}
   13a30:	e3a020ee 	mov	r2, #238	; 0xee
   13a34:	e59f1020 	ldr	r1, [pc, #32]	; 13a5c <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x98>
   13a38:	e59f0020 	ldr	r0, [pc, #32]	; 13a60 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x9c>
   13a3c:	eb0019c4 	bl	1a154 <assertion_failed>
   13a40:	e3a00000 	mov	r0, #0
   13a44:	e28dd010 	add	sp, sp, #16
   13a48:	e8bd8010 	pop	{r4, pc}
   13a4c:	e3e03000 	mvn	r3, #0
   13a50:	e5cd3009 	strb	r3, [sp, #9]
   13a54:	eaffffea 	b	13a04 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x40>
   13a58:	00024ca8 	.word	0x00024ca8
   13a5c:	00024cd4 	.word	0x00024cd4
   13a60:	000239a8 	.word	0x000239a8

00013a64 <CUSBGamePadXboxOneDevice::CUSBGamePadXboxOneDevice(CUSBFunction*)>:
   13a64:	e92d4010 	push	{r4, lr}
   13a68:	e1a04000 	mov	r4, r0
   13a6c:	eb001413 	bl	18ac0 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   13a70:	e3a02000 	mov	r2, #0
   13a74:	e59f300c 	ldr	r3, [pc, #12]	; 13a88 <CUSBGamePadXboxOneDevice::CUSBGamePadXboxOneDevice(CUSBFunction*)+0x24>
   13a78:	e5c42130 	strb	r2, [r4, #304]	; 0x130
   13a7c:	e5843000 	str	r3, [r4]
   13a80:	e1a00004 	mov	r0, r4
   13a84:	e8bd8010 	pop	{r4, pc}
   13a88:	00024c4c 	.word	0x00024c4c

00013a8c <CUSBGamePadXboxOneDevice::Configure()>:
   13a8c:	e3a02040 	mov	r2, #64	; 0x40
   13a90:	e92d4070 	push	{r4, r5, r6, lr}
   13a94:	e2803f4a 	add	r3, r0, #296	; 0x128
   13a98:	e24dd008 	sub	sp, sp, #8
   13a9c:	e1c320b0 	strh	r2, [r3]
   13aa0:	e1a04000 	mov	r4, r0
   13aa4:	eb0013d7 	bl	18a08 <CUSBGamePadDevice::Configure()>
   13aa8:	e2505000 	subs	r5, r0, #0
   13aac:	0a00002a 	beq	13b5c <CUSBGamePadXboxOneDevice::Configure()+0xd0>
   13ab0:	e3a03000 	mov	r3, #0
   13ab4:	e3a020ff 	mov	r2, #255	; 0xff
   13ab8:	e3a01010 	mov	r1, #16
   13abc:	e3a0c006 	mov	ip, #6
   13ac0:	e59f60b4 	ldr	r6, [pc, #180]	; 13b7c <CUSBGamePadXboxOneDevice::Configure()+0xf0>
   13ac4:	e5841104 	str	r1, [r4, #260]	; 0x104
   13ac8:	e5842030 	str	r2, [r4, #48]	; 0x30
   13acc:	e8960003 	ldm	r6, {r0, r1}
   13ad0:	e584203c 	str	r2, [r4, #60]	; 0x3c
   13ad4:	e58d0000 	str	r0, [sp]
   13ad8:	e5cd1004 	strb	r1, [sp, #4]
   13adc:	e5842048 	str	r2, [r4, #72]	; 0x48
   13ae0:	e5842054 	str	r2, [r4, #84]	; 0x54
   13ae4:	e5842060 	str	r2, [r4, #96]	; 0x60
   13ae8:	e584206c 	str	r2, [r4, #108]	; 0x6c
   13aec:	e584c024 	str	ip, [r4, #36]	; 0x24
   13af0:	e584302c 	str	r3, [r4, #44]	; 0x2c
   13af4:	e5843038 	str	r3, [r4, #56]	; 0x38
   13af8:	e5843044 	str	r3, [r4, #68]	; 0x44
   13afc:	e5843050 	str	r3, [r4, #80]	; 0x50
   13b00:	e584305c 	str	r3, [r4, #92]	; 0x5c
   13b04:	e5843068 	str	r3, [r4, #104]	; 0x68
   13b08:	e58430e8 	str	r3, [r4, #232]	; 0xe8
   13b0c:	e3a02005 	mov	r2, #5
   13b10:	e1a0100d 	mov	r1, sp
   13b14:	e1a00004 	mov	r0, r4
   13b18:	ebfff6c9 	bl	11644 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   13b1c:	e2505000 	subs	r5, r0, #0
   13b20:	0a000005 	beq	13b3c <CUSBGamePadXboxOneDevice::Configure()+0xb0>
   13b24:	e1a00004 	mov	r0, r4
   13b28:	ebfff756 	bl	11888 <CUSBHIDDevice::StartRequest()>
   13b2c:	e1a05000 	mov	r5, r0
   13b30:	e1a00005 	mov	r0, r5
   13b34:	e28dd008 	add	sp, sp, #8
   13b38:	e8bd8070 	pop	{r4, r5, r6, pc}
   13b3c:	eb002377 	bl	1c920 <CLogger::Get()>
   13b40:	e2461020 	sub	r1, r6, #32
   13b44:	e59f3034 	ldr	r3, [pc, #52]	; 13b80 <CUSBGamePadXboxOneDevice::Configure()+0xf4>
   13b48:	e3a02001 	mov	r2, #1
   13b4c:	eb00251c 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13b50:	e1a00005 	mov	r0, r5
   13b54:	e28dd008 	add	sp, sp, #8
   13b58:	e8bd8070 	pop	{r4, r5, r6, pc}
   13b5c:	eb00236f 	bl	1c920 <CLogger::Get()>
   13b60:	e59f301c 	ldr	r3, [pc, #28]	; 13b84 <CUSBGamePadXboxOneDevice::Configure()+0xf8>
   13b64:	e3a02001 	mov	r2, #1
   13b68:	e59f1018 	ldr	r1, [pc, #24]	; 13b88 <CUSBGamePadXboxOneDevice::Configure()+0xfc>
   13b6c:	eb002514 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13b70:	e1a00005 	mov	r0, r5
   13b74:	e28dd008 	add	sp, sp, #8
   13b78:	e8bd8070 	pop	{r4, r5, r6, pc}
   13b7c:	00024cb8 	.word	0x00024cb8
   13b80:	00024cec 	.word	0x00024cec
   13b84:	0002495c 	.word	0x0002495c
   13b88:	00024c98 	.word	0x00024c98

00013b8c <CUSBGamePadXboxOneDevice::GetProperties()>:
   13b8c:	e3a00009 	mov	r0, #9
   13b90:	e12fff1e 	bx	lr

00013b94 <CUSBGamePadSwitchProDevice::~CUSBGamePadSwitchProDevice()>:
   13b94:	e92d4010 	push	{r4, lr}
   13b98:	e1a04000 	mov	r4, r0
   13b9c:	e59f300c 	ldr	r3, [pc, #12]	; 13bb0 <CUSBGamePadSwitchProDevice::~CUSBGamePadSwitchProDevice()+0x1c>
   13ba0:	e5803000 	str	r3, [r0]
   13ba4:	eb0013d7 	bl	18b08 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   13ba8:	e1a00004 	mov	r0, r4
   13bac:	e8bd8010 	pop	{r4, pc}
   13bb0:	00024d0c 	.word	0x00024d0c

00013bb4 <CUSBGamePadSwitchProDevice::~CUSBGamePadSwitchProDevice()>:
   13bb4:	e92d4010 	push	{r4, lr}
   13bb8:	e1a04000 	mov	r4, r0
   13bbc:	e59f3018 	ldr	r3, [pc, #24]	; 13bdc <CUSBGamePadSwitchProDevice::~CUSBGamePadSwitchProDevice()+0x28>
   13bc0:	e5803000 	str	r3, [r0]
   13bc4:	eb0013cf 	bl	18b08 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   13bc8:	e1a00004 	mov	r0, r4
   13bcc:	e3a01f4d 	mov	r1, #308	; 0x134
   13bd0:	eb0036f7 	bl	217b4 <operator delete(void*, unsigned int)>
   13bd4:	e1a00004 	mov	r0, r4
   13bd8:	e8bd8010 	pop	{r4, pc}
   13bdc:	00024d0c 	.word	0x00024d0c

00013be0 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)>:
   13be0:	e5d13000 	ldrb	r3, [r1]
   13be4:	e3530030 	cmp	r3, #48	; 0x30
   13be8:	1a00005e 	bne	13d68 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x188>
   13bec:	e3a02000 	mov	r2, #0
   13bf0:	e5d13003 	ldrb	r3, [r1, #3]
   13bf4:	e5802108 	str	r2, [r0, #264]	; 0x108
   13bf8:	e3130001 	tst	r3, #1
   13bfc:	13a02080 	movne	r2, #128	; 0x80
   13c00:	15802108 	strne	r2, [r0, #264]	; 0x108
   13c04:	e3130002 	tst	r3, #2
   13c08:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   13c0c:	13822b01 	orrne	r2, r2, #1024	; 0x400
   13c10:	15802108 	strne	r2, [r0, #264]	; 0x108
   13c14:	e3130004 	tst	r3, #4
   13c18:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   13c1c:	13822c01 	orrne	r2, r2, #256	; 0x100
   13c20:	15802108 	strne	r2, [r0, #264]	; 0x108
   13c24:	e3130008 	tst	r3, #8
   13c28:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   13c2c:	13822c02 	orrne	r2, r2, #512	; 0x200
   13c30:	15802108 	strne	r2, [r0, #264]	; 0x108
   13c34:	e3130040 	tst	r3, #64	; 0x40
   13c38:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   13c3c:	13822040 	orrne	r2, r2, #64	; 0x40
   13c40:	15802108 	strne	r2, [r0, #264]	; 0x108
   13c44:	e3130080 	tst	r3, #128	; 0x80
   13c48:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   13c4c:	13833010 	orrne	r3, r3, #16
   13c50:	15803108 	strne	r3, [r0, #264]	; 0x108
   13c54:	e5d13004 	ldrb	r3, [r1, #4]
   13c58:	e3130001 	tst	r3, #1
   13c5c:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   13c60:	13822702 	orrne	r2, r2, #524288	; 0x80000
   13c64:	15802108 	strne	r2, [r0, #264]	; 0x108
   13c68:	e3130002 	tst	r3, #2
   13c6c:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   13c70:	13822601 	orrne	r2, r2, #1048576	; 0x100000
   13c74:	15802108 	strne	r2, [r0, #264]	; 0x108
   13c78:	e3130004 	tst	r3, #4
   13c7c:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   13c80:	13822a02 	orrne	r2, r2, #8192	; 0x2000
   13c84:	15802108 	strne	r2, [r0, #264]	; 0x108
   13c88:	e3130008 	tst	r3, #8
   13c8c:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   13c90:	13822a01 	orrne	r2, r2, #4096	; 0x1000
   13c94:	15802108 	strne	r2, [r0, #264]	; 0x108
   13c98:	e3130010 	tst	r3, #16
   13c9c:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   13ca0:	13822001 	orrne	r2, r2, #1
   13ca4:	15802108 	strne	r2, [r0, #264]	; 0x108
   13ca8:	e3130020 	tst	r3, #32
   13cac:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   13cb0:	13833b02 	orrne	r3, r3, #2048	; 0x800
   13cb4:	15803108 	strne	r3, [r0, #264]	; 0x108
   13cb8:	e5d13005 	ldrb	r3, [r1, #5]
   13cbc:	e3130001 	tst	r3, #1
   13cc0:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   13cc4:	13822802 	orrne	r2, r2, #131072	; 0x20000
   13cc8:	15802108 	strne	r2, [r0, #264]	; 0x108
   13ccc:	e3130002 	tst	r3, #2
   13cd0:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   13cd4:	13822902 	orrne	r2, r2, #32768	; 0x8000
   13cd8:	15802108 	strne	r2, [r0, #264]	; 0x108
   13cdc:	e3130004 	tst	r3, #4
   13ce0:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   13ce4:	13822801 	orrne	r2, r2, #65536	; 0x10000
   13ce8:	15802108 	strne	r2, [r0, #264]	; 0x108
   13cec:	e3130008 	tst	r3, #8
   13cf0:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   13cf4:	13822701 	orrne	r2, r2, #262144	; 0x40000
   13cf8:	15802108 	strne	r2, [r0, #264]	; 0x108
   13cfc:	e3130040 	tst	r3, #64	; 0x40
   13d00:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   13d04:	13822020 	orrne	r2, r2, #32
   13d08:	15802108 	strne	r2, [r0, #264]	; 0x108
   13d0c:	e3130080 	tst	r3, #128	; 0x80
   13d10:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   13d14:	13833008 	orrne	r3, r3, #8
   13d18:	15803108 	strne	r3, [r0, #264]	; 0x108
   13d1c:	e5d12007 	ldrb	r2, [r1, #7]
   13d20:	e5d13006 	ldrb	r3, [r1, #6]
   13d24:	e1833402 	orr	r3, r3, r2, lsl #8
   13d28:	e1a03243 	asr	r3, r3, #4
   13d2c:	e6ef3073 	uxtb	r3, r3
   13d30:	e5803028 	str	r3, [r0, #40]	; 0x28
   13d34:	e5d13008 	ldrb	r3, [r1, #8]
   13d38:	e26330ff 	rsb	r3, r3, #255	; 0xff
   13d3c:	e5803034 	str	r3, [r0, #52]	; 0x34
   13d40:	e5d13009 	ldrb	r3, [r1, #9]
   13d44:	e5d1200a 	ldrb	r2, [r1, #10]
   13d48:	e1833402 	orr	r3, r3, r2, lsl #8
   13d4c:	e1a03243 	asr	r3, r3, #4
   13d50:	e6ef3073 	uxtb	r3, r3
   13d54:	e5803040 	str	r3, [r0, #64]	; 0x40
   13d58:	e5d1300b 	ldrb	r3, [r1, #11]
   13d5c:	e26330ff 	rsb	r3, r3, #255	; 0xff
   13d60:	e580304c 	str	r3, [r0, #76]	; 0x4c
   13d64:	e12fff1e 	bx	lr
   13d68:	e92d4010 	push	{r4, lr}
   13d6c:	e1a04001 	mov	r4, r1
   13d70:	e24dd008 	sub	sp, sp, #8
   13d74:	eb0022e9 	bl	1c920 <CLogger::Get()>
   13d78:	e5d42000 	ldrb	r2, [r4]
   13d7c:	e59f3014 	ldr	r3, [pc, #20]	; 13d98 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x1b8>
   13d80:	e58d2000 	str	r2, [sp]
   13d84:	e59f1010 	ldr	r1, [pc, #16]	; 13d9c <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x1bc>
   13d88:	e3a02003 	mov	r2, #3
   13d8c:	eb00248c 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13d90:	e28dd008 	add	sp, sp, #8
   13d94:	e8bd8010 	pop	{r4, pc}
   13d98:	00024d70 	.word	0x00024d70
   13d9c:	00024d48 	.word	0x00024d48

00013da0 <CUSBGamePadSwitchProDevice::SetLEDMode(TGamePadLEDMode)>:
   13da0:	e92d4070 	push	{r4, r5, r6, lr}
   13da4:	e1a05000 	mov	r5, r0
   13da8:	e1a06001 	mov	r6, r1
   13dac:	e5d03131 	ldrb	r3, [r0, #305]	; 0x131
   13db0:	e24dd010 	sub	sp, sp, #16
   13db4:	e59f4058 	ldr	r4, [pc, #88]	; 13e14 <CUSBGamePadSwitchProDevice::SetLEDMode(TGamePadLEDMode)+0x74>
   13db8:	e2832001 	add	r2, r3, #1
   13dbc:	e28de004 	add	lr, sp, #4
   13dc0:	e203c00f 	and	ip, r3, #15
   13dc4:	e5c02131 	strb	r2, [r0, #305]	; 0x131
   13dc8:	e3a03000 	mov	r3, #0
   13dcc:	e8940007 	ldm	r4, {r0, r1, r2}
   13dd0:	e88e0007 	stm	lr, {r0, r1, r2}
   13dd4:	e1a00005 	mov	r0, r5
   13dd8:	e1a0100e 	mov	r1, lr
   13ddc:	e3a0200c 	mov	r2, #12
   13de0:	e5cdc005 	strb	ip, [sp, #5]
   13de4:	e5cd600f 	strb	r6, [sp, #15]
   13de8:	ebfff615 	bl	11644 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   13dec:	e2505000 	subs	r5, r0, #0
   13df0:	1a000004 	bne	13e08 <CUSBGamePadSwitchProDevice::SetLEDMode(TGamePadLEDMode)+0x68>
   13df4:	eb0022c9 	bl	1c920 <CLogger::Get()>
   13df8:	e2441010 	sub	r1, r4, #16
   13dfc:	e59f3014 	ldr	r3, [pc, #20]	; 13e18 <CUSBGamePadSwitchProDevice::SetLEDMode(TGamePadLEDMode)+0x78>
   13e00:	e3a02001 	mov	r2, #1
   13e04:	eb00246e 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13e08:	e1a00005 	mov	r0, r5
   13e0c:	e28dd010 	add	sp, sp, #16
   13e10:	e8bd8070 	pop	{r4, r5, r6, pc}
   13e14:	00024d58 	.word	0x00024d58
   13e18:	00024d8c 	.word	0x00024d8c

00013e1c <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)>:
   13e1c:	e92d4010 	push	{r4, lr}
   13e20:	e1a0e001 	mov	lr, r1
   13e24:	e24dd010 	sub	sp, sp, #16
   13e28:	e59f20cc 	ldr	r2, [pc, #204]	; 13efc <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0xe0>
   13e2c:	e28d3004 	add	r3, sp, #4
   13e30:	e1a0c000 	mov	ip, r0
   13e34:	e8920007 	ldm	r2, {r0, r1, r2}
   13e38:	e8a30003 	stmia	r3!, {r0, r1}
   13e3c:	e35e0001 	cmp	lr, #1
   13e40:	e1c320b0 	strh	r2, [r3]
   13e44:	0a000023 	beq	13ed8 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0xbc>
   13e48:	3a000007 	bcc	13e6c <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0x50>
   13e4c:	e35e0002 	cmp	lr, #2
   13e50:	1a00001c 	bne	13ec8 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0xac>
   13e54:	e3a01020 	mov	r1, #32
   13e58:	e3a02062 	mov	r2, #98	; 0x62
   13e5c:	e3e03000 	mvn	r3, #0
   13e60:	e5cd1007 	strb	r1, [sp, #7]
   13e64:	e5cd2008 	strb	r2, [sp, #8]
   13e68:	e5cd3009 	strb	r3, [sp, #9]
   13e6c:	e5dc3131 	ldrb	r3, [ip, #305]	; 0x131
   13e70:	e1a0000c 	mov	r0, ip
   13e74:	e2832001 	add	r2, r3, #1
   13e78:	e5cc2131 	strb	r2, [ip, #305]	; 0x131
   13e7c:	e28d1004 	add	r1, sp, #4
   13e80:	e203c00f 	and	ip, r3, #15
   13e84:	e3a0200a 	mov	r2, #10
   13e88:	e3a03000 	mov	r3, #0
   13e8c:	e5cdc005 	strb	ip, [sp, #5]
   13e90:	ebfff5eb 	bl	11644 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   13e94:	e2504000 	subs	r4, r0, #0
   13e98:	0a000002 	beq	13ea8 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0x8c>
   13e9c:	e1a00004 	mov	r0, r4
   13ea0:	e28dd010 	add	sp, sp, #16
   13ea4:	e8bd8010 	pop	{r4, pc}
   13ea8:	eb00229c 	bl	1c920 <CLogger::Get()>
   13eac:	e59f304c 	ldr	r3, [pc, #76]	; 13f00 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0xe4>
   13eb0:	e3a02001 	mov	r2, #1
   13eb4:	e59f1048 	ldr	r1, [pc, #72]	; 13f04 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0xe8>
   13eb8:	eb002441 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13ebc:	e1a00004 	mov	r0, r4
   13ec0:	e28dd010 	add	sp, sp, #16
   13ec4:	e8bd8010 	pop	{r4, pc}
   13ec8:	e3a04001 	mov	r4, #1
   13ecc:	e1a00004 	mov	r0, r4
   13ed0:	e28dd010 	add	sp, sp, #16
   13ed4:	e8bd8010 	pop	{r4, pc}
   13ed8:	e3e00067 	mvn	r0, #103	; 0x67
   13edc:	e3a01020 	mov	r1, #32
   13ee0:	e3a02062 	mov	r2, #98	; 0x62
   13ee4:	e3e03000 	mvn	r3, #0
   13ee8:	e5cd000a 	strb	r0, [sp, #10]
   13eec:	e5cd100b 	strb	r1, [sp, #11]
   13ef0:	e5cd200c 	strb	r2, [sp, #12]
   13ef4:	e5cd300d 	strb	r3, [sp, #13]
   13ef8:	eaffffdb 	b	13e6c <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0x50>
   13efc:	00024d64 	.word	0x00024d64
   13f00:	00024da0 	.word	0x00024da0
   13f04:	00024d48 	.word	0x00024d48

00013f08 <CUSBGamePadSwitchProDevice::CUSBGamePadSwitchProDevice(CUSBFunction*)>:
   13f08:	e92d4010 	push	{r4, lr}
   13f0c:	e1a04000 	mov	r4, r0
   13f10:	eb0012ea 	bl	18ac0 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   13f14:	e3a03000 	mov	r3, #0
   13f18:	e59f2024 	ldr	r2, [pc, #36]	; 13f44 <CUSBGamePadSwitchProDevice::CUSBGamePadSwitchProDevice(CUSBFunction*)+0x3c>
   13f1c:	e1a00004 	mov	r0, r4
   13f20:	e5842000 	str	r2, [r4]
   13f24:	e3a01003 	mov	r1, #3
   13f28:	e1a02003 	mov	r2, r3
   13f2c:	eb000207 	bl	14750 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)>
   13f30:	e3a03000 	mov	r3, #0
   13f34:	e5c40130 	strb	r0, [r4, #304]	; 0x130
   13f38:	e5c43131 	strb	r3, [r4, #305]	; 0x131
   13f3c:	e1a00004 	mov	r0, r4
   13f40:	e8bd8010 	pop	{r4, pc}
   13f44:	00024d0c 	.word	0x00024d0c

00013f48 <CUSBGamePadSwitchProDevice::Configure()>:
   13f48:	e92d4bf0 	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13f4c:	e5d05130 	ldrb	r5, [r0, #304]	; 0x130
   13f50:	e28db01c 	add	fp, sp, #28
   13f54:	e3550000 	cmp	r5, #0
   13f58:	0a00003a 	beq	14048 <CUSBGamePadSwitchProDevice::Configure()+0x100>
   13f5c:	e3a03040 	mov	r3, #64	; 0x40
   13f60:	e2807f4a 	add	r7, r0, #296	; 0x128
   13f64:	e1c730b0 	strh	r3, [r7]
   13f68:	e1a04000 	mov	r4, r0
   13f6c:	eb0012a5 	bl	18a08 <CUSBGamePadDevice::Configure()>
   13f70:	e2505000 	subs	r5, r0, #0
   13f74:	0a000038 	beq	1405c <CUSBGamePadSwitchProDevice::Configure()+0x114>
   13f78:	e3a03012 	mov	r3, #18
   13f7c:	e3a06000 	mov	r6, #0
   13f80:	e3a000ff 	mov	r0, #255	; 0xff
   13f84:	e3a0c004 	mov	ip, #4
   13f88:	e1d720b0 	ldrh	r2, [r7]
   13f8c:	e5843104 	str	r3, [r4, #260]	; 0x104
   13f90:	e2823007 	add	r3, r2, #7
   13f94:	e3c33007 	bic	r3, r3, #7
   13f98:	e04dd003 	sub	sp, sp, r3
   13f9c:	e1a0100d 	mov	r1, sp
   13fa0:	e1a03006 	mov	r3, r6
   13fa4:	e584c024 	str	ip, [r4, #36]	; 0x24
   13fa8:	e5840030 	str	r0, [r4, #48]	; 0x30
   13fac:	e584003c 	str	r0, [r4, #60]	; 0x3c
   13fb0:	e5840048 	str	r0, [r4, #72]	; 0x48
   13fb4:	e5840054 	str	r0, [r4, #84]	; 0x54
   13fb8:	e58460e8 	str	r6, [r4, #232]	; 0xe8
   13fbc:	e584602c 	str	r6, [r4, #44]	; 0x2c
   13fc0:	e5846038 	str	r6, [r4, #56]	; 0x38
   13fc4:	e5846044 	str	r6, [r4, #68]	; 0x44
   13fc8:	e5846050 	str	r6, [r4, #80]	; 0x50
   13fcc:	e1a00004 	mov	r0, r4
   13fd0:	ebfff5fc 	bl	117c8 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>
   13fd4:	e1a03006 	mov	r3, r6
   13fd8:	e3a02002 	mov	r2, #2
   13fdc:	e59f1200 	ldr	r1, [pc, #512]	; 141e4 <CUSBGamePadSwitchProDevice::Configure()+0x29c>
   13fe0:	e1a00004 	mov	r0, r4
   13fe4:	ebfff596 	bl	11644 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   13fe8:	e2505000 	subs	r5, r0, #0
   13fec:	0a000022 	beq	1407c <CUSBGamePadSwitchProDevice::Configure()+0x134>
   13ff0:	e1a03006 	mov	r3, r6
   13ff4:	e1d720b0 	ldrh	r2, [r7]
   13ff8:	e1a0100d 	mov	r1, sp
   13ffc:	e1a00004 	mov	r0, r4
   14000:	ebfff5f0 	bl	117c8 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>
   14004:	e3500000 	cmp	r0, #0
   14008:	da00003e 	ble	14108 <CUSBGamePadSwitchProDevice::Configure()+0x1c0>
   1400c:	e5dd3000 	ldrb	r3, [sp]
   14010:	e3530081 	cmp	r3, #129	; 0x81
   14014:	1a000002 	bne	14024 <CUSBGamePadSwitchProDevice::Configure()+0xdc>
   14018:	e5dd3001 	ldrb	r3, [sp, #1]
   1401c:	e3530003 	cmp	r3, #3
   14020:	0a00001d 	beq	1409c <CUSBGamePadSwitchProDevice::Configure()+0x154>
   14024:	eb00223d 	bl	1c920 <CLogger::Get()>
   14028:	e59f31b8 	ldr	r3, [pc, #440]	; 141e8 <CUSBGamePadSwitchProDevice::Configure()+0x2a0>
   1402c:	e3a02001 	mov	r2, #1
   14030:	e59f11b4 	ldr	r1, [pc, #436]	; 141ec <CUSBGamePadSwitchProDevice::Configure()+0x2a4>
   14034:	eb0023e2 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14038:	e3a05000 	mov	r5, #0
   1403c:	e1a00005 	mov	r0, r5
   14040:	e24bd01c 	sub	sp, fp, #28
   14044:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14048:	e59f119c 	ldr	r1, [pc, #412]	; 141ec <CUSBGamePadSwitchProDevice::Configure()+0x2a4>
   1404c:	eb0001a3 	bl	146e0 <CUSBFunction::ConfigurationError(char const*) const>
   14050:	e1a00005 	mov	r0, r5
   14054:	e24bd01c 	sub	sp, fp, #28
   14058:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1405c:	eb00222f 	bl	1c920 <CLogger::Get()>
   14060:	e59f3188 	ldr	r3, [pc, #392]	; 141f0 <CUSBGamePadSwitchProDevice::Configure()+0x2a8>
   14064:	e3a02001 	mov	r2, #1
   14068:	e59f117c 	ldr	r1, [pc, #380]	; 141ec <CUSBGamePadSwitchProDevice::Configure()+0x2a4>
   1406c:	eb0023d4 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14070:	e1a00005 	mov	r0, r5
   14074:	e24bd01c 	sub	sp, fp, #28
   14078:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1407c:	eb002227 	bl	1c920 <CLogger::Get()>
   14080:	e59f3160 	ldr	r3, [pc, #352]	; 141e8 <CUSBGamePadSwitchProDevice::Configure()+0x2a0>
   14084:	e3a02001 	mov	r2, #1
   14088:	e59f115c 	ldr	r1, [pc, #348]	; 141ec <CUSBGamePadSwitchProDevice::Configure()+0x2a4>
   1408c:	eb0023cc 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14090:	e1a00005 	mov	r0, r5
   14094:	e24bd01c 	sub	sp, fp, #28
   14098:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1409c:	e1a03006 	mov	r3, r6
   140a0:	e3a02002 	mov	r2, #2
   140a4:	e59f1148 	ldr	r1, [pc, #328]	; 141f4 <CUSBGamePadSwitchProDevice::Configure()+0x2ac>
   140a8:	e1a00004 	mov	r0, r4
   140ac:	ebfff564 	bl	11644 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   140b0:	e2505000 	subs	r5, r0, #0
   140b4:	0a00001a 	beq	14124 <CUSBGamePadSwitchProDevice::Configure()+0x1dc>
   140b8:	e1a03006 	mov	r3, r6
   140bc:	e1d720b0 	ldrh	r2, [r7]
   140c0:	e1a0100d 	mov	r1, sp
   140c4:	e1a00004 	mov	r0, r4
   140c8:	ebfff5be 	bl	117c8 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>
   140cc:	e3500000 	cmp	r0, #0
   140d0:	da000030 	ble	14198 <CUSBGamePadSwitchProDevice::Configure()+0x250>
   140d4:	e5dd3000 	ldrb	r3, [sp]
   140d8:	e3530081 	cmp	r3, #129	; 0x81
   140dc:	1a000002 	bne	140ec <CUSBGamePadSwitchProDevice::Configure()+0x1a4>
   140e0:	e5dd3001 	ldrb	r3, [sp, #1]
   140e4:	e3530002 	cmp	r3, #2
   140e8:	0a000013 	beq	1413c <CUSBGamePadSwitchProDevice::Configure()+0x1f4>
   140ec:	eb00220b 	bl	1c920 <CLogger::Get()>
   140f0:	e59f3100 	ldr	r3, [pc, #256]	; 141f8 <CUSBGamePadSwitchProDevice::Configure()+0x2b0>
   140f4:	e3a02001 	mov	r2, #1
   140f8:	e59f10ec 	ldr	r1, [pc, #236]	; 141ec <CUSBGamePadSwitchProDevice::Configure()+0x2a4>
   140fc:	eb0023b0 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14100:	e3a05000 	mov	r5, #0
   14104:	eaffffcc 	b	1403c <CUSBGamePadSwitchProDevice::Configure()+0xf4>
   14108:	eb002204 	bl	1c920 <CLogger::Get()>
   1410c:	e59f30e8 	ldr	r3, [pc, #232]	; 141fc <CUSBGamePadSwitchProDevice::Configure()+0x2b4>
   14110:	e3a02001 	mov	r2, #1
   14114:	e59f10d0 	ldr	r1, [pc, #208]	; 141ec <CUSBGamePadSwitchProDevice::Configure()+0x2a4>
   14118:	e1a05006 	mov	r5, r6
   1411c:	eb0023a8 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14120:	eaffffc5 	b	1403c <CUSBGamePadSwitchProDevice::Configure()+0xf4>
   14124:	eb0021fd 	bl	1c920 <CLogger::Get()>
   14128:	e59f30c8 	ldr	r3, [pc, #200]	; 141f8 <CUSBGamePadSwitchProDevice::Configure()+0x2b0>
   1412c:	e3a02001 	mov	r2, #1
   14130:	e59f10b4 	ldr	r1, [pc, #180]	; 141ec <CUSBGamePadSwitchProDevice::Configure()+0x2a4>
   14134:	eb0023a2 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14138:	eaffffbf 	b	1403c <CUSBGamePadSwitchProDevice::Configure()+0xf4>
   1413c:	e3a03000 	mov	r3, #0
   14140:	e3a02002 	mov	r2, #2
   14144:	e59f10b4 	ldr	r1, [pc, #180]	; 14200 <CUSBGamePadSwitchProDevice::Configure()+0x2b8>
   14148:	e1a00004 	mov	r0, r4
   1414c:	ebfff53c 	bl	11644 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   14150:	e2505000 	subs	r5, r0, #0
   14154:	0a000016 	beq	141b4 <CUSBGamePadSwitchProDevice::Configure()+0x26c>
   14158:	e5943000 	ldr	r3, [r4]
   1415c:	e5d4112c 	ldrb	r1, [r4, #300]	; 0x12c
   14160:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   14164:	e1a00004 	mov	r0, r4
   14168:	e12fff33 	blx	r3
   1416c:	e1d720b0 	ldrh	r2, [r7]
   14170:	e1a0100d 	mov	r1, sp
   14174:	e3a03000 	mov	r3, #0
   14178:	e1a00004 	mov	r0, r4
   1417c:	ebfff591 	bl	117c8 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>
   14180:	e3500000 	cmp	r0, #0
   14184:	da000010 	ble	141cc <CUSBGamePadSwitchProDevice::Configure()+0x284>
   14188:	e1a00004 	mov	r0, r4
   1418c:	ebfff5bd 	bl	11888 <CUSBHIDDevice::StartRequest()>
   14190:	e1a05000 	mov	r5, r0
   14194:	eaffffa8 	b	1403c <CUSBGamePadSwitchProDevice::Configure()+0xf4>
   14198:	eb0021e0 	bl	1c920 <CLogger::Get()>
   1419c:	e59f3060 	ldr	r3, [pc, #96]	; 14204 <CUSBGamePadSwitchProDevice::Configure()+0x2bc>
   141a0:	e3a02001 	mov	r2, #1
   141a4:	e59f1040 	ldr	r1, [pc, #64]	; 141ec <CUSBGamePadSwitchProDevice::Configure()+0x2a4>
   141a8:	e1a05006 	mov	r5, r6
   141ac:	eb002384 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   141b0:	eaffffa1 	b	1403c <CUSBGamePadSwitchProDevice::Configure()+0xf4>
   141b4:	eb0021d9 	bl	1c920 <CLogger::Get()>
   141b8:	e59f3048 	ldr	r3, [pc, #72]	; 14208 <CUSBGamePadSwitchProDevice::Configure()+0x2c0>
   141bc:	e3a02001 	mov	r2, #1
   141c0:	e59f1024 	ldr	r1, [pc, #36]	; 141ec <CUSBGamePadSwitchProDevice::Configure()+0x2a4>
   141c4:	eb00237e 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   141c8:	eaffff9b 	b	1403c <CUSBGamePadSwitchProDevice::Configure()+0xf4>
   141cc:	eb0021d3 	bl	1c920 <CLogger::Get()>
   141d0:	e59f3034 	ldr	r3, [pc, #52]	; 1420c <CUSBGamePadSwitchProDevice::Configure()+0x2c4>
   141d4:	e3a02001 	mov	r2, #1
   141d8:	e59f100c 	ldr	r1, [pc, #12]	; 141ec <CUSBGamePadSwitchProDevice::Configure()+0x2a4>
   141dc:	eb002378 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   141e0:	eaffffe8 	b	14188 <CUSBGamePadSwitchProDevice::Configure()+0x240>
   141e4:	0002976c 	.word	0x0002976c
   141e8:	00024db8 	.word	0x00024db8
   141ec:	00024d48 	.word	0x00024d48
   141f0:	0002495c 	.word	0x0002495c
   141f4:	00029770 	.word	0x00029770
   141f8:	00024df8 	.word	0x00024df8
   141fc:	00024dd8 	.word	0x00024dd8
   14200:	00029774 	.word	0x00029774
   14204:	00024e14 	.word	0x00024e14
   14208:	00024e30 	.word	0x00024e30
   1420c:	00024e50 	.word	0x00024e50

00014210 <CUSBGamePadSwitchProDevice::GetProperties()>:
   14210:	e3a0004b 	mov	r0, #75	; 0x4b
   14214:	e12fff1e 	bx	lr

00014218 <CUSBFunction::Initialize()>:
   14218:	e3a00001 	mov	r0, #1
   1421c:	e12fff1e 	bx	lr

00014220 <CUSBFunction::~CUSBFunction()>:
   14220:	e3a03000 	mov	r3, #0
   14224:	e92d4070 	push	{r4, r5, r6, lr}
   14228:	e5905008 	ldr	r5, [r0, #8]
   1422c:	e59f2040 	ldr	r2, [pc, #64]	; 14274 <CUSBFunction::~CUSBFunction()+0x54>
   14230:	e1550003 	cmp	r5, r3
   14234:	e1a04000 	mov	r4, r0
   14238:	e5802000 	str	r2, [r0]
   1423c:	e580300c 	str	r3, [r0, #12]
   14240:	0a000004 	beq	14258 <CUSBFunction::~CUSBFunction()+0x38>
   14244:	e1a00005 	mov	r0, r5
   14248:	eb000895 	bl	164a4 <CUSBConfigurationParser::~CUSBConfigurationParser()>
   1424c:	e1a00005 	mov	r0, r5
   14250:	e3a0101c 	mov	r1, #28
   14254:	eb003556 	bl	217b4 <operator delete(void*, unsigned int)>
   14258:	e3a03000 	mov	r3, #0
   1425c:	e1a00004 	mov	r0, r4
   14260:	e5843008 	str	r3, [r4, #8]
   14264:	e5843004 	str	r3, [r4, #4]
   14268:	eb0019b5 	bl	1a944 <CDevice::~CDevice()>
   1426c:	e1a00004 	mov	r0, r4
   14270:	e8bd8070 	pop	{r4, r5, r6, pc}
   14274:	00024e74 	.word	0x00024e74

00014278 <CUSBFunction::~CUSBFunction()>:
   14278:	e92d4010 	push	{r4, lr}
   1427c:	e1a04000 	mov	r4, r0
   14280:	ebffffe6 	bl	14220 <CUSBFunction::~CUSBFunction()>
   14284:	e1a00004 	mov	r0, r4
   14288:	e3a01010 	mov	r1, #16
   1428c:	eb003548 	bl	217b4 <operator delete(void*, unsigned int)>
   14290:	e1a00004 	mov	r0, r4
   14294:	e8bd8010 	pop	{r4, pc}

00014298 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)>:
   14298:	e92d4070 	push	{r4, r5, r6, lr}
   1429c:	e1a04000 	mov	r4, r0
   142a0:	e1a05001 	mov	r5, r1
   142a4:	e1a06002 	mov	r6, r2
   142a8:	eb0019b1 	bl	1a974 <CDevice::CDevice()>
   142ac:	e3a03000 	mov	r3, #0
   142b0:	e59f208c 	ldr	r2, [pc, #140]	; 14344 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xac>
   142b4:	e1550003 	cmp	r5, r3
   142b8:	e8840024 	stm	r4, {r2, r5}
   142bc:	e5843008 	str	r3, [r4, #8]
   142c0:	e584300c 	str	r3, [r4, #12]
   142c4:	0a000014 	beq	1431c <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0x84>
   142c8:	e3560000 	cmp	r6, #0
   142cc:	0a000017 	beq	14330 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0x98>
   142d0:	e3a0001c 	mov	r0, #28
   142d4:	eb003532 	bl	217a4 <operator new(unsigned int)>
   142d8:	e1a05000 	mov	r5, r0
   142dc:	e1a01006 	mov	r1, r6
   142e0:	eb000858 	bl	16448 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)>
   142e4:	e5845008 	str	r5, [r4, #8]
   142e8:	e1a00005 	mov	r0, r5
   142ec:	eb0008a7 	bl	16590 <CUSBConfigurationParser::GetCurrentDescriptor()>
   142f0:	e3500000 	cmp	r0, #0
   142f4:	e584000c 	str	r0, [r4, #12]
   142f8:	0a000001 	beq	14304 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0x6c>
   142fc:	e1a00004 	mov	r0, r4
   14300:	e8bd8070 	pop	{r4, r5, r6, pc}
   14304:	e3a02029 	mov	r2, #41	; 0x29
   14308:	e59f1038 	ldr	r1, [pc, #56]	; 14348 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xb0>
   1430c:	e59f0038 	ldr	r0, [pc, #56]	; 1434c <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xb4>
   14310:	eb00178f 	bl	1a154 <assertion_failed>
   14314:	e1a00004 	mov	r0, r4
   14318:	e8bd8070 	pop	{r4, r5, r6, pc}
   1431c:	e3a02022 	mov	r2, #34	; 0x22
   14320:	e59f1020 	ldr	r1, [pc, #32]	; 14348 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xb0>
   14324:	e59f0024 	ldr	r0, [pc, #36]	; 14350 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xb8>
   14328:	eb001789 	bl	1a154 <assertion_failed>
   1432c:	eaffffe5 	b	142c8 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0x30>
   14330:	e3a02024 	mov	r2, #36	; 0x24
   14334:	e59f100c 	ldr	r1, [pc, #12]	; 14348 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xb0>
   14338:	e59f0014 	ldr	r0, [pc, #20]	; 14354 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xbc>
   1433c:	eb001784 	bl	1a154 <assertion_failed>
   14340:	eaffffe2 	b	142d0 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0x38>
   14344:	00024e74 	.word	0x00024e74
   14348:	00024e98 	.word	0x00024e98
   1434c:	00024ebc 	.word	0x00024ebc
   14350:	00023794 	.word	0x00023794
   14354:	00024ea8 	.word	0x00024ea8

00014358 <CUSBFunction::CUSBFunction(CUSBFunction*)>:
   14358:	e92d4070 	push	{r4, r5, r6, lr}
   1435c:	e1a04000 	mov	r4, r0
   14360:	e1a05001 	mov	r5, r1
   14364:	eb001982 	bl	1a974 <CDevice::CDevice()>
   14368:	e3a03000 	mov	r3, #0
   1436c:	e59f20d0 	ldr	r2, [pc, #208]	; 14444 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xec>
   14370:	e1550003 	cmp	r5, r3
   14374:	e884000c 	stm	r4, {r2, r3}
   14378:	e5843008 	str	r3, [r4, #8]
   1437c:	e584300c 	str	r3, [r4, #12]
   14380:	0a000019 	beq	143ec <CUSBFunction::CUSBFunction(CUSBFunction*)+0x94>
   14384:	e5953004 	ldr	r3, [r5, #4]
   14388:	e3530000 	cmp	r3, #0
   1438c:	e5843004 	str	r3, [r4, #4]
   14390:	0a00001a 	beq	14400 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xa8>
   14394:	e5953008 	ldr	r3, [r5, #8]
   14398:	e3530000 	cmp	r3, #0
   1439c:	0a00001c 	beq	14414 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xbc>
   143a0:	e3a0001c 	mov	r0, #28
   143a4:	eb0034fe 	bl	217a4 <operator new(unsigned int)>
   143a8:	e1a06000 	mov	r6, r0
   143ac:	e5951008 	ldr	r1, [r5, #8]
   143b0:	eb000824 	bl	16448 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)>
   143b4:	e1a00006 	mov	r0, r6
   143b8:	e5846008 	str	r6, [r4, #8]
   143bc:	eb000873 	bl	16590 <CUSBConfigurationParser::GetCurrentDescriptor()>
   143c0:	e3500000 	cmp	r0, #0
   143c4:	e584000c 	str	r0, [r4, #12]
   143c8:	0a000001 	beq	143d4 <CUSBFunction::CUSBFunction(CUSBFunction*)+0x7c>
   143cc:	e1a00004 	mov	r0, r4
   143d0:	e8bd8070 	pop	{r4, r5, r6, pc}
   143d4:	e3a0203a 	mov	r2, #58	; 0x3a
   143d8:	e59f1068 	ldr	r1, [pc, #104]	; 14448 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xf0>
   143dc:	e59f0068 	ldr	r0, [pc, #104]	; 1444c <CUSBFunction::CUSBFunction(CUSBFunction*)+0xf4>
   143e0:	eb00175b 	bl	1a154 <assertion_failed>
   143e4:	e1a00004 	mov	r0, r4
   143e8:	e8bd8070 	pop	{r4, r5, r6, pc}
   143ec:	e3a02031 	mov	r2, #49	; 0x31
   143f0:	e59f1050 	ldr	r1, [pc, #80]	; 14448 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xf0>
   143f4:	e59f0054 	ldr	r0, [pc, #84]	; 14450 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xf8>
   143f8:	eb001755 	bl	1a154 <assertion_failed>
   143fc:	eaffffe0 	b	14384 <CUSBFunction::CUSBFunction(CUSBFunction*)+0x2c>
   14400:	e3a02033 	mov	r2, #51	; 0x33
   14404:	e59f103c 	ldr	r1, [pc, #60]	; 14448 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xf0>
   14408:	e59f0044 	ldr	r0, [pc, #68]	; 14454 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xfc>
   1440c:	eb001750 	bl	1a154 <assertion_failed>
   14410:	eaffffdf 	b	14394 <CUSBFunction::CUSBFunction(CUSBFunction*)+0x3c>
   14414:	e3a02035 	mov	r2, #53	; 0x35
   14418:	e59f1028 	ldr	r1, [pc, #40]	; 14448 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xf0>
   1441c:	e59f0034 	ldr	r0, [pc, #52]	; 14458 <CUSBFunction::CUSBFunction(CUSBFunction*)+0x100>
   14420:	eb00174b 	bl	1a154 <assertion_failed>
   14424:	e3a0001c 	mov	r0, #28
   14428:	eb0034dd 	bl	217a4 <operator new(unsigned int)>
   1442c:	e1a06000 	mov	r6, r0
   14430:	e5951008 	ldr	r1, [r5, #8]
   14434:	eb000803 	bl	16448 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)>
   14438:	e1a00006 	mov	r0, r6
   1443c:	e5846008 	str	r6, [r4, #8]
   14440:	eaffffdd 	b	143bc <CUSBFunction::CUSBFunction(CUSBFunction*)+0x64>
   14444:	00024e74 	.word	0x00024e74
   14448:	00024e98 	.word	0x00024e98
   1444c:	00024ebc 	.word	0x00024ebc
   14450:	00024ed4 	.word	0x00024ed4
   14454:	00023794 	.word	0x00023794
   14458:	00024ee4 	.word	0x00024ee4

0001445c <CUSBFunction::GetInterfaceName() const>:
   1445c:	e92d4030 	push	{r4, r5, lr}
   14460:	e1a05000 	mov	r5, r0
   14464:	e24dd00c 	sub	sp, sp, #12
   14468:	e3a00010 	mov	r0, #16
   1446c:	eb0034cc 	bl	217a4 <operator new(unsigned int)>
   14470:	e59f1048 	ldr	r1, [pc, #72]	; 144c0 <CUSBFunction::GetInterfaceName() const+0x64>
   14474:	e1a04000 	mov	r4, r0
   14478:	eb0028bb 	bl	1e76c <CString::CString(char const*)>
   1447c:	e595100c 	ldr	r1, [r5, #12]
   14480:	e3510000 	cmp	r1, #0
   14484:	0a00000a 	beq	144b4 <CUSBFunction::GetInterfaceName() const+0x58>
   14488:	e5d12005 	ldrb	r2, [r1, #5]
   1448c:	e2423001 	sub	r3, r2, #1
   14490:	e6ef3073 	uxtb	r3, r3
   14494:	e35300fd 	cmp	r3, #253	; 0xfd
   14498:	8a000005 	bhi	144b4 <CUSBFunction::GetInterfaceName() const+0x58>
   1449c:	e5d13006 	ldrb	r3, [r1, #6]
   144a0:	e5d11007 	ldrb	r1, [r1, #7]
   144a4:	e1a00004 	mov	r0, r4
   144a8:	e58d1000 	str	r1, [sp]
   144ac:	e59f1010 	ldr	r1, [pc, #16]	; 144c4 <CUSBFunction::GetInterfaceName() const+0x68>
   144b0:	eb002c95 	bl	1f70c <CString::Format(char const*, ...)>
   144b4:	e1a00004 	mov	r0, r4
   144b8:	e28dd00c 	add	sp, sp, #12
   144bc:	e8bd8030 	pop	{r4, r5, pc}
   144c0:	00023960 	.word	0x00023960
   144c4:	00024f04 	.word	0x00024f04

000144c8 <CUSBFunction::GetNumEndpoints() const>:
   144c8:	e590300c 	ldr	r3, [r0, #12]
   144cc:	e3530000 	cmp	r3, #0
   144d0:	0a000001 	beq	144dc <CUSBFunction::GetNumEndpoints() const+0x14>
   144d4:	e5d30004 	ldrb	r0, [r3, #4]
   144d8:	e12fff1e 	bx	lr
   144dc:	e92d4010 	push	{r4, lr}
   144e0:	e1a04000 	mov	r4, r0
   144e4:	e3a02073 	mov	r2, #115	; 0x73
   144e8:	e59f1010 	ldr	r1, [pc, #16]	; 14500 <CUSBFunction::GetNumEndpoints() const+0x38>
   144ec:	e59f0010 	ldr	r0, [pc, #16]	; 14504 <CUSBFunction::GetNumEndpoints() const+0x3c>
   144f0:	eb001717 	bl	1a154 <assertion_failed>
   144f4:	e594300c 	ldr	r3, [r4, #12]
   144f8:	e5d30004 	ldrb	r0, [r3, #4]
   144fc:	e8bd8010 	pop	{r4, pc}
   14500:	00024e98 	.word	0x00024e98
   14504:	00024ebc 	.word	0x00024ebc

00014508 <CUSBFunction::GetDevice() const>:
   14508:	e5903004 	ldr	r3, [r0, #4]
   1450c:	e3530000 	cmp	r3, #0
   14510:	0a000001 	beq	1451c <CUSBFunction::GetDevice() const+0x14>
   14514:	e1a00003 	mov	r0, r3
   14518:	e12fff1e 	bx	lr
   1451c:	e92d4010 	push	{r4, lr}
   14520:	e1a04000 	mov	r4, r0
   14524:	e3a02079 	mov	r2, #121	; 0x79
   14528:	e59f1010 	ldr	r1, [pc, #16]	; 14540 <CUSBFunction::GetDevice() const+0x38>
   1452c:	e59f0010 	ldr	r0, [pc, #16]	; 14544 <CUSBFunction::GetDevice() const+0x3c>
   14530:	eb001707 	bl	1a154 <assertion_failed>
   14534:	e5943004 	ldr	r3, [r4, #4]
   14538:	e1a00003 	mov	r0, r3
   1453c:	e8bd8010 	pop	{r4, pc}
   14540:	00024e98 	.word	0x00024e98
   14544:	00023794 	.word	0x00023794

00014548 <CUSBFunction::GetEndpoint0() const>:
   14548:	e5903004 	ldr	r3, [r0, #4]
   1454c:	e3530000 	cmp	r3, #0
   14550:	0a000001 	beq	1455c <CUSBFunction::GetEndpoint0() const+0x14>
   14554:	e1a00003 	mov	r0, r3
   14558:	eaffe343 	b	d26c <CUSBDevice::GetEndpoint0() const>
   1455c:	e92d4010 	push	{r4, lr}
   14560:	e1a04000 	mov	r4, r0
   14564:	e3a0207f 	mov	r2, #127	; 0x7f
   14568:	e59f0014 	ldr	r0, [pc, #20]	; 14584 <CUSBFunction::GetEndpoint0() const+0x3c>
   1456c:	e59f1014 	ldr	r1, [pc, #20]	; 14588 <CUSBFunction::GetEndpoint0() const+0x40>
   14570:	eb0016f7 	bl	1a154 <assertion_failed>
   14574:	e5943004 	ldr	r3, [r4, #4]
   14578:	e8bd4010 	pop	{r4, lr}
   1457c:	e1a00003 	mov	r0, r3
   14580:	eaffe339 	b	d26c <CUSBDevice::GetEndpoint0() const>
   14584:	00023794 	.word	0x00023794
   14588:	00024e98 	.word	0x00024e98

0001458c <CUSBFunction::GetHost() const>:
   1458c:	e5903004 	ldr	r3, [r0, #4]
   14590:	e3530000 	cmp	r3, #0
   14594:	0a000001 	beq	145a0 <CUSBFunction::GetHost() const+0x14>
   14598:	e1a00003 	mov	r0, r3
   1459c:	eaffe343 	b	d2b0 <CUSBDevice::GetHost() const>
   145a0:	e92d4010 	push	{r4, lr}
   145a4:	e1a04000 	mov	r4, r0
   145a8:	e3a02085 	mov	r2, #133	; 0x85
   145ac:	e59f0014 	ldr	r0, [pc, #20]	; 145c8 <CUSBFunction::GetHost() const+0x3c>
   145b0:	e59f1014 	ldr	r1, [pc, #20]	; 145cc <CUSBFunction::GetHost() const+0x40>
   145b4:	eb0016e6 	bl	1a154 <assertion_failed>
   145b8:	e5943004 	ldr	r3, [r4, #4]
   145bc:	e8bd4010 	pop	{r4, lr}
   145c0:	e1a00003 	mov	r0, r3
   145c4:	eaffe339 	b	d2b0 <CUSBDevice::GetHost() const>
   145c8:	00023794 	.word	0x00023794
   145cc:	00024e98 	.word	0x00024e98

000145d0 <CUSBFunction::Configure()>:
   145d0:	e92d4070 	push	{r4, r5, r6, lr}
   145d4:	e590300c 	ldr	r3, [r0, #12]
   145d8:	e24dd010 	sub	sp, sp, #16
   145dc:	e3530000 	cmp	r3, #0
   145e0:	e1a05000 	mov	r5, r0
   145e4:	0a000020 	beq	1466c <CUSBFunction::Configure()+0x9c>
   145e8:	e5d33003 	ldrb	r3, [r3, #3]
   145ec:	e3530000 	cmp	r3, #0
   145f0:	1a000002 	bne	14600 <CUSBFunction::Configure()+0x30>
   145f4:	e3a00001 	mov	r0, #1
   145f8:	e28dd010 	add	sp, sp, #16
   145fc:	e8bd8070 	pop	{r4, r5, r6, pc}
   14600:	e1a00005 	mov	r0, r5
   14604:	ebffffe0 	bl	1458c <CUSBFunction::GetHost() const>
   14608:	e3a04000 	mov	r4, #0
   1460c:	e1a06000 	mov	r6, r0
   14610:	e1a00005 	mov	r0, r5
   14614:	ebffffcb 	bl	14548 <CUSBFunction::GetEndpoint0() const>
   14618:	e595300c 	ldr	r3, [r5, #12]
   1461c:	e58d400c 	str	r4, [sp, #12]
   14620:	e58d4008 	str	r4, [sp, #8]
   14624:	e5d32002 	ldrb	r2, [r3, #2]
   14628:	e1a01000 	mov	r1, r0
   1462c:	e58d2004 	str	r2, [sp, #4]
   14630:	e5d33003 	ldrb	r3, [r3, #3]
   14634:	e1a00006 	mov	r0, r6
   14638:	e58d3000 	str	r3, [sp]
   1463c:	e3a02001 	mov	r2, #1
   14640:	e3a0300b 	mov	r3, #11
   14644:	ebffe6df 	bl	e1c8 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   14648:	e1500004 	cmp	r0, r4
   1464c:	aaffffe8 	bge	145f4 <CUSBFunction::Configure()+0x24>
   14650:	eb0020b2 	bl	1c920 <CLogger::Get()>
   14654:	e59f3028 	ldr	r3, [pc, #40]	; 14684 <CUSBFunction::Configure()+0xb4>
   14658:	e3a02001 	mov	r2, #1
   1465c:	e59f1024 	ldr	r1, [pc, #36]	; 14688 <CUSBFunction::Configure()+0xb8>
   14660:	eb002257 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14664:	e1a00004 	mov	r0, r4
   14668:	eaffffe2 	b	145f8 <CUSBFunction::Configure()+0x28>
   1466c:	e3a0204e 	mov	r2, #78	; 0x4e
   14670:	e59f1014 	ldr	r1, [pc, #20]	; 1468c <CUSBFunction::Configure()+0xbc>
   14674:	e59f0014 	ldr	r0, [pc, #20]	; 14690 <CUSBFunction::Configure()+0xc0>
   14678:	eb0016b5 	bl	1a154 <assertion_failed>
   1467c:	e595300c 	ldr	r3, [r5, #12]
   14680:	eaffffd8 	b	145e8 <CUSBFunction::Configure()+0x18>
   14684:	000241a8 	.word	0x000241a8
   14688:	00024e90 	.word	0x00024e90
   1468c:	00024e98 	.word	0x00024e98
   14690:	00024ebc 	.word	0x00024ebc

00014694 <CUSBFunction::GetDescriptor(unsigned char)>:
   14694:	e92d4070 	push	{r4, r5, r6, lr}
   14698:	e1a04000 	mov	r4, r0
   1469c:	e5900008 	ldr	r0, [r0, #8]
   146a0:	e1a05001 	mov	r5, r1
   146a4:	e3500000 	cmp	r0, #0
   146a8:	0a000002 	beq	146b8 <CUSBFunction::GetDescriptor(unsigned char)+0x24>
   146ac:	e1a01005 	mov	r1, r5
   146b0:	e8bd4070 	pop	{r4, r5, r6, lr}
   146b4:	ea00077d 	b	164b0 <CUSBConfigurationParser::GetDescriptor(unsigned char)>
   146b8:	e59f1018 	ldr	r1, [pc, #24]	; 146d8 <CUSBFunction::GetDescriptor(unsigned char)+0x44>
   146bc:	e59f0018 	ldr	r0, [pc, #24]	; 146dc <CUSBFunction::GetDescriptor(unsigned char)+0x48>
   146c0:	e3a0208b 	mov	r2, #139	; 0x8b
   146c4:	eb0016a2 	bl	1a154 <assertion_failed>
   146c8:	e5940008 	ldr	r0, [r4, #8]
   146cc:	e1a01005 	mov	r1, r5
   146d0:	e8bd4070 	pop	{r4, r5, r6, lr}
   146d4:	ea000775 	b	164b0 <CUSBConfigurationParser::GetDescriptor(unsigned char)>
   146d8:	00024e98 	.word	0x00024e98
   146dc:	000239c0 	.word	0x000239c0

000146e0 <CUSBFunction::ConfigurationError(char const*) const>:
   146e0:	e5903008 	ldr	r3, [r0, #8]
   146e4:	e92d4070 	push	{r4, r5, r6, lr}
   146e8:	e3530000 	cmp	r3, #0
   146ec:	e1a04000 	mov	r4, r0
   146f0:	e1a05001 	mov	r5, r1
   146f4:	0a00000d 	beq	14730 <CUSBFunction::ConfigurationError(char const*) const+0x50>
   146f8:	e3550000 	cmp	r5, #0
   146fc:	0a000003 	beq	14710 <CUSBFunction::ConfigurationError(char const*) const+0x30>
   14700:	e1a01005 	mov	r1, r5
   14704:	e5940008 	ldr	r0, [r4, #8]
   14708:	e8bd4070 	pop	{r4, r5, r6, lr}
   1470c:	ea0007b5 	b	165e8 <CUSBConfigurationParser::Error(char const*) const>
   14710:	e59f102c 	ldr	r1, [pc, #44]	; 14744 <CUSBFunction::ConfigurationError(char const*) const+0x64>
   14714:	e59f002c 	ldr	r0, [pc, #44]	; 14748 <CUSBFunction::ConfigurationError(char const*) const+0x68>
   14718:	e3a02092 	mov	r2, #146	; 0x92
   1471c:	eb00168c 	bl	1a154 <assertion_failed>
   14720:	e1a01005 	mov	r1, r5
   14724:	e5940008 	ldr	r0, [r4, #8]
   14728:	e8bd4070 	pop	{r4, r5, r6, lr}
   1472c:	ea0007ad 	b	165e8 <CUSBConfigurationParser::Error(char const*) const>
   14730:	e3a02091 	mov	r2, #145	; 0x91
   14734:	e59f1008 	ldr	r1, [pc, #8]	; 14744 <CUSBFunction::ConfigurationError(char const*) const+0x64>
   14738:	e59f000c 	ldr	r0, [pc, #12]	; 1474c <CUSBFunction::ConfigurationError(char const*) const+0x6c>
   1473c:	eb001684 	bl	1a154 <assertion_failed>
   14740:	eaffffec 	b	146f8 <CUSBFunction::ConfigurationError(char const*) const+0x18>
   14744:	00024e98 	.word	0x00024e98
   14748:	00024f10 	.word	0x00024f10
   1474c:	000239c0 	.word	0x000239c0

00014750 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)>:
   14750:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   14754:	e1a04000 	mov	r4, r0
   14758:	e590000c 	ldr	r0, [r0, #12]
   1475c:	e1a06001 	mov	r6, r1
   14760:	e3500000 	cmp	r0, #0
   14764:	e1a07002 	mov	r7, r2
   14768:	e1a08003 	mov	r8, r3
   1476c:	0a00001d 	beq	147e8 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x98>
   14770:	e5943008 	ldr	r3, [r4, #8]
   14774:	e3530000 	cmp	r3, #0
   14778:	0a00001f 	beq	147fc <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xac>
   1477c:	e5943004 	ldr	r3, [r4, #4]
   14780:	e3530000 	cmp	r3, #0
   14784:	0a000021 	beq	14810 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xc0>
   14788:	e594000c 	ldr	r0, [r4, #12]
   1478c:	e3a05004 	mov	r5, #4
   14790:	ea000008 	b	147b8 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x68>
   14794:	e1a01005 	mov	r1, r5
   14798:	e5940004 	ldr	r0, [r4, #4]
   1479c:	ebffe2f6 	bl	d37c <CUSBDevice::GetDescriptor(unsigned char)>
   147a0:	e1a01005 	mov	r1, r5
   147a4:	e5940008 	ldr	r0, [r4, #8]
   147a8:	eb000740 	bl	164b0 <CUSBConfigurationParser::GetDescriptor(unsigned char)>
   147ac:	e3500000 	cmp	r0, #0
   147b0:	e584000c 	str	r0, [r4, #12]
   147b4:	0a00000a 	beq	147e4 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x94>
   147b8:	e5d03005 	ldrb	r3, [r0, #5]
   147bc:	e1530006 	cmp	r3, r6
   147c0:	1afffff3 	bne	14794 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x44>
   147c4:	e5d03006 	ldrb	r3, [r0, #6]
   147c8:	e1530007 	cmp	r3, r7
   147cc:	1afffff0 	bne	14794 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x44>
   147d0:	e5d03007 	ldrb	r3, [r0, #7]
   147d4:	e1530008 	cmp	r3, r8
   147d8:	1affffed 	bne	14794 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x44>
   147dc:	e3a00001 	mov	r0, #1
   147e0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   147e4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   147e8:	e3a02098 	mov	r2, #152	; 0x98
   147ec:	e59f1030 	ldr	r1, [pc, #48]	; 14824 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xd4>
   147f0:	e59f0030 	ldr	r0, [pc, #48]	; 14828 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xd8>
   147f4:	eb001656 	bl	1a154 <assertion_failed>
   147f8:	eaffffdc 	b	14770 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x20>
   147fc:	e3a02099 	mov	r2, #153	; 0x99
   14800:	e59f101c 	ldr	r1, [pc, #28]	; 14824 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xd4>
   14804:	e59f0020 	ldr	r0, [pc, #32]	; 1482c <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xdc>
   14808:	eb001651 	bl	1a154 <assertion_failed>
   1480c:	eaffffda 	b	1477c <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x2c>
   14810:	e3a0209a 	mov	r2, #154	; 0x9a
   14814:	e59f1008 	ldr	r1, [pc, #8]	; 14824 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xd4>
   14818:	e59f0010 	ldr	r0, [pc, #16]	; 14830 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xe0>
   1481c:	eb00164c 	bl	1a154 <assertion_failed>
   14820:	eaffffd8 	b	14788 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x38>
   14824:	00024e98 	.word	0x00024e98
   14828:	00024ebc 	.word	0x00024ebc
   1482c:	000239c0 	.word	0x000239c0
   14830:	00023794 	.word	0x00023794

00014834 <CUSBFunction::GetInterfaceNumber() const>:
   14834:	e590300c 	ldr	r3, [r0, #12]
   14838:	e3530000 	cmp	r3, #0
   1483c:	0a000001 	beq	14848 <CUSBFunction::GetInterfaceNumber() const+0x14>
   14840:	e5d30002 	ldrb	r0, [r3, #2]
   14844:	e12fff1e 	bx	lr
   14848:	e92d4010 	push	{r4, lr}
   1484c:	e1a04000 	mov	r4, r0
   14850:	e3a020b0 	mov	r2, #176	; 0xb0
   14854:	e59f1010 	ldr	r1, [pc, #16]	; 1486c <CUSBFunction::GetInterfaceNumber() const+0x38>
   14858:	e59f0010 	ldr	r0, [pc, #16]	; 14870 <CUSBFunction::GetInterfaceNumber() const+0x3c>
   1485c:	eb00163c 	bl	1a154 <assertion_failed>
   14860:	e594300c 	ldr	r3, [r4, #12]
   14864:	e5d30002 	ldrb	r0, [r3, #2]
   14868:	e8bd8010 	pop	{r4, pc}
   1486c:	00024e98 	.word	0x00024e98
   14870:	00024ebc 	.word	0x00024ebc

00014874 <CUSBFunction::GetInterfaceClass() const>:
   14874:	e590300c 	ldr	r3, [r0, #12]
   14878:	e3530000 	cmp	r3, #0
   1487c:	0a000001 	beq	14888 <CUSBFunction::GetInterfaceClass() const+0x14>
   14880:	e5d30005 	ldrb	r0, [r3, #5]
   14884:	e12fff1e 	bx	lr
   14888:	e92d4010 	push	{r4, lr}
   1488c:	e1a04000 	mov	r4, r0
   14890:	e3a020b6 	mov	r2, #182	; 0xb6
   14894:	e59f1010 	ldr	r1, [pc, #16]	; 148ac <CUSBFunction::GetInterfaceClass() const+0x38>
   14898:	e59f0010 	ldr	r0, [pc, #16]	; 148b0 <CUSBFunction::GetInterfaceClass() const+0x3c>
   1489c:	eb00162c 	bl	1a154 <assertion_failed>
   148a0:	e594300c 	ldr	r3, [r4, #12]
   148a4:	e5d30005 	ldrb	r0, [r3, #5]
   148a8:	e8bd8010 	pop	{r4, pc}
   148ac:	00024e98 	.word	0x00024e98
   148b0:	00024ebc 	.word	0x00024ebc

000148b4 <CUSBFunction::GetInterfaceSubClass() const>:
   148b4:	e590300c 	ldr	r3, [r0, #12]
   148b8:	e3530000 	cmp	r3, #0
   148bc:	0a000001 	beq	148c8 <CUSBFunction::GetInterfaceSubClass() const+0x14>
   148c0:	e5d30006 	ldrb	r0, [r3, #6]
   148c4:	e12fff1e 	bx	lr
   148c8:	e92d4010 	push	{r4, lr}
   148cc:	e1a04000 	mov	r4, r0
   148d0:	e3a020bc 	mov	r2, #188	; 0xbc
   148d4:	e59f1010 	ldr	r1, [pc, #16]	; 148ec <CUSBFunction::GetInterfaceSubClass() const+0x38>
   148d8:	e59f0010 	ldr	r0, [pc, #16]	; 148f0 <CUSBFunction::GetInterfaceSubClass() const+0x3c>
   148dc:	eb00161c 	bl	1a154 <assertion_failed>
   148e0:	e594300c 	ldr	r3, [r4, #12]
   148e4:	e5d30006 	ldrb	r0, [r3, #6]
   148e8:	e8bd8010 	pop	{r4, pc}
   148ec:	00024e98 	.word	0x00024e98
   148f0:	00024ebc 	.word	0x00024ebc

000148f4 <CUSBFunction::GetInterfaceProtocol() const>:
   148f4:	e590300c 	ldr	r3, [r0, #12]
   148f8:	e3530000 	cmp	r3, #0
   148fc:	0a000001 	beq	14908 <CUSBFunction::GetInterfaceProtocol() const+0x14>
   14900:	e5d30007 	ldrb	r0, [r3, #7]
   14904:	e12fff1e 	bx	lr
   14908:	e92d4010 	push	{r4, lr}
   1490c:	e1a04000 	mov	r4, r0
   14910:	e3a020c2 	mov	r2, #194	; 0xc2
   14914:	e59f1010 	ldr	r1, [pc, #16]	; 1492c <CUSBFunction::GetInterfaceProtocol() const+0x38>
   14918:	e59f0010 	ldr	r0, [pc, #16]	; 14930 <CUSBFunction::GetInterfaceProtocol() const+0x3c>
   1491c:	eb00160c 	bl	1a154 <assertion_failed>
   14920:	e594300c 	ldr	r3, [r4, #12]
   14924:	e5d30007 	ldrb	r0, [r3, #7]
   14928:	e8bd8010 	pop	{r4, pc}
   1492c:	00024e98 	.word	0x00024e98
   14930:	00024ebc 	.word	0x00024ebc

00014934 <CDWHCIFrameSchedulerNoSplit::~CDWHCIFrameSchedulerNoSplit()>:
   14934:	e12fff1e 	bx	lr

00014938 <CDWHCIFrameSchedulerNoSplit::IsOddFrame() const>:
   14938:	e1d000b6 	ldrh	r0, [r0, #6]
   1493c:	e2000001 	and	r0, r0, #1
   14940:	e12fff1e 	bx	lr

00014944 <CDWHCIFrameSchedulerNoSplit::StartSplit()>:
   14944:	e3a02026 	mov	r2, #38	; 0x26
   14948:	e59f1004 	ldr	r1, [pc, #4]	; 14954 <CDWHCIFrameSchedulerNoSplit::StartSplit()+0x10>
   1494c:	e59f0004 	ldr	r0, [pc, #4]	; 14958 <CDWHCIFrameSchedulerNoSplit::StartSplit()+0x14>
   14950:	ea0015ff 	b	1a154 <assertion_failed>
   14954:	00024f44 	.word	0x00024f44
   14958:	000239a8 	.word	0x000239a8

0001495c <CDWHCIFrameSchedulerNoSplit::CompleteSplit()>:
   1495c:	e92d4010 	push	{r4, lr}
   14960:	e3a0202b 	mov	r2, #43	; 0x2b
   14964:	e59f100c 	ldr	r1, [pc, #12]	; 14978 <CDWHCIFrameSchedulerNoSplit::CompleteSplit()+0x1c>
   14968:	e59f000c 	ldr	r0, [pc, #12]	; 1497c <CDWHCIFrameSchedulerNoSplit::CompleteSplit()+0x20>
   1496c:	eb0015f8 	bl	1a154 <assertion_failed>
   14970:	e3a00000 	mov	r0, #0
   14974:	e8bd8010 	pop	{r4, pc}
   14978:	00024f44 	.word	0x00024f44
   1497c:	000239a8 	.word	0x000239a8

00014980 <CDWHCIFrameSchedulerNoSplit::TransactionComplete(unsigned int)>:
   14980:	e3a02031 	mov	r2, #49	; 0x31
   14984:	e59f1004 	ldr	r1, [pc, #4]	; 14990 <CDWHCIFrameSchedulerNoSplit::TransactionComplete(unsigned int)+0x10>
   14988:	e59f0004 	ldr	r0, [pc, #4]	; 14994 <CDWHCIFrameSchedulerNoSplit::TransactionComplete(unsigned int)+0x14>
   1498c:	ea0015f0 	b	1a154 <assertion_failed>
   14990:	00024f44 	.word	0x00024f44
   14994:	000239a8 	.word	0x000239a8

00014998 <CDWHCIFrameSchedulerNoSplit::WaitForFrame()>:
   14998:	e92d4030 	push	{r4, r5, lr}
   1499c:	e24dd014 	sub	sp, sp, #20
   149a0:	e1a05000 	mov	r5, r0
   149a4:	e59f1050 	ldr	r1, [pc, #80]	; 149fc <CDWHCIFrameSchedulerNoSplit::WaitForFrame()+0x64>
   149a8:	e28d0004 	add	r0, sp, #4
   149ac:	ebffdd5c 	bl	bf24 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   149b0:	e28d0004 	add	r0, sp, #4
   149b4:	ebffdd63 	bl	bf48 <CDWHCIRegister::Read()>
   149b8:	e59f4040 	ldr	r4, [pc, #64]	; 14a00 <CDWHCIFrameSchedulerNoSplit::WaitForFrame()+0x68>
   149bc:	e5d53004 	ldrb	r3, [r5, #4]
   149c0:	e2800001 	add	r0, r0, #1
   149c4:	e0000004 	and	r0, r0, r4
   149c8:	e3530000 	cmp	r3, #0
   149cc:	e1c500b6 	strh	r0, [r5, #6]
   149d0:	1a000005 	bne	149ec <CDWHCIFrameSchedulerNoSplit::WaitForFrame()+0x54>
   149d4:	e28d0004 	add	r0, sp, #4
   149d8:	ebffdd5a 	bl	bf48 <CDWHCIRegister::Read()>
   149dc:	e1d530b6 	ldrh	r3, [r5, #6]
   149e0:	e0000004 	and	r0, r0, r4
   149e4:	e1500003 	cmp	r0, r3
   149e8:	1afffff9 	bne	149d4 <CDWHCIFrameSchedulerNoSplit::WaitForFrame()+0x3c>
   149ec:	e28d0004 	add	r0, sp, #4
   149f0:	ebffdd53 	bl	bf44 <CDWHCIRegister::~CDWHCIRegister()>
   149f4:	e28dd014 	add	sp, sp, #20
   149f8:	e8bd8030 	pop	{r4, r5, pc}
   149fc:	20980408 	.word	0x20980408
   14a00:	00003fff 	.word	0x00003fff

00014a04 <CDWHCIFrameSchedulerNoSplit::CDWHCIFrameSchedulerNoSplit(bool)>:
   14a04:	e3a02901 	mov	r2, #16384	; 0x4000
   14a08:	e59fc00c 	ldr	ip, [pc, #12]	; 14a1c <CDWHCIFrameSchedulerNoSplit::CDWHCIFrameSchedulerNoSplit(bool)+0x18>
   14a0c:	e5c01004 	strb	r1, [r0, #4]
   14a10:	e580c000 	str	ip, [r0]
   14a14:	e1c020b6 	strh	r2, [r0, #6]
   14a18:	e12fff1e 	bx	lr
   14a1c:	00024f28 	.word	0x00024f28

00014a20 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)>:
   14a20:	e3500008 	cmp	r0, #8
   14a24:	e92d4010 	push	{r4, lr}
   14a28:	0a000003 	beq	14a3c <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x1c>
   14a2c:	e3a0205a 	mov	r2, #90	; 0x5a
   14a30:	e59f1038 	ldr	r1, [pc, #56]	; 14a70 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x50>
   14a34:	e59f0038 	ldr	r0, [pc, #56]	; 14a74 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x54>
   14a38:	eb0015c5 	bl	1a154 <assertion_failed>
   14a3c:	e59f4034 	ldr	r4, [pc, #52]	; 14a78 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x58>
   14a40:	e5940000 	ldr	r0, [r4]
   14a44:	e3500000 	cmp	r0, #0
   14a48:	0a000001 	beq	14a54 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x34>
   14a4c:	e8bd4010 	pop	{r4, lr}
   14a50:	ea0016dd 	b	1a5cc <CClassAllocator::Allocate()>
   14a54:	e59f0020 	ldr	r0, [pc, #32]	; 14a7c <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x5c>
   14a58:	e3a0205a 	mov	r2, #90	; 0x5a
   14a5c:	e59f100c 	ldr	r1, [pc, #12]	; 14a70 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x50>
   14a60:	eb0015bb 	bl	1a154 <assertion_failed>
   14a64:	e5940000 	ldr	r0, [r4]
   14a68:	e8bd4010 	pop	{r4, lr}
   14a6c:	ea0016d6 	b	1a5cc <CClassAllocator::Allocate()>
   14a70:	00024f44 	.word	0x00024f44
   14a74:	00024f60 	.word	0x00024f60
   14a78:	000299ac 	.word	0x000299ac
   14a7c:	00023888 	.word	0x00023888

00014a80 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)>:
   14a80:	e3510008 	cmp	r1, #8
   14a84:	e92d4070 	push	{r4, r5, r6, lr}
   14a88:	e1a05000 	mov	r5, r0
   14a8c:	0a000003 	beq	14aa0 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x20>
   14a90:	e3a0205a 	mov	r2, #90	; 0x5a
   14a94:	e59f1040 	ldr	r1, [pc, #64]	; 14adc <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x5c>
   14a98:	e59f0040 	ldr	r0, [pc, #64]	; 14ae0 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x60>
   14a9c:	eb0015ac 	bl	1a154 <assertion_failed>
   14aa0:	e59f403c 	ldr	r4, [pc, #60]	; 14ae4 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x64>
   14aa4:	e5940000 	ldr	r0, [r4]
   14aa8:	e3500000 	cmp	r0, #0
   14aac:	0a000002 	beq	14abc <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x3c>
   14ab0:	e1a01005 	mov	r1, r5
   14ab4:	e8bd4070 	pop	{r4, r5, r6, lr}
   14ab8:	ea0016fe 	b	1a6b8 <CClassAllocator::Free(void*)>
   14abc:	e59f1018 	ldr	r1, [pc, #24]	; 14adc <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x5c>
   14ac0:	e59f0020 	ldr	r0, [pc, #32]	; 14ae8 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x68>
   14ac4:	e3a0205a 	mov	r2, #90	; 0x5a
   14ac8:	eb0015a1 	bl	1a154 <assertion_failed>
   14acc:	e5940000 	ldr	r0, [r4]
   14ad0:	e1a01005 	mov	r1, r5
   14ad4:	e8bd4070 	pop	{r4, r5, r6, lr}
   14ad8:	ea0016f6 	b	1a6b8 <CClassAllocator::Free(void*)>
   14adc:	00024f44 	.word	0x00024f44
   14ae0:	00024f60 	.word	0x00024f60
   14ae4:	000299ac 	.word	0x000299ac
   14ae8:	00023888 	.word	0x00023888

00014aec <CDWHCIFrameSchedulerNoSplit::~CDWHCIFrameSchedulerNoSplit()>:
   14aec:	e92d4010 	push	{r4, lr}
   14af0:	e1a04000 	mov	r4, r0
   14af4:	e3a01008 	mov	r1, #8
   14af8:	ebffffe0 	bl	14a80 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)>
   14afc:	e1a00004 	mov	r0, r4
   14b00:	e8bd8010 	pop	{r4, pc}

00014b04 <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)>:
   14b04:	e92d4070 	push	{r4, r5, r6, lr}
   14b08:	e59f4040 	ldr	r4, [pc, #64]	; 14b50 <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)+0x4c>
   14b0c:	e1a06000 	mov	r6, r0
   14b10:	e5943000 	ldr	r3, [r4]
   14b14:	e3530000 	cmp	r3, #0
   14b18:	0a000003 	beq	14b2c <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)+0x28>
   14b1c:	e3a0205a 	mov	r2, #90	; 0x5a
   14b20:	e59f102c 	ldr	r1, [pc, #44]	; 14b54 <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)+0x50>
   14b24:	e59f002c 	ldr	r0, [pc, #44]	; 14b58 <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)+0x54>
   14b28:	eb001589 	bl	1a154 <assertion_failed>
   14b2c:	e3a0001c 	mov	r0, #28
   14b30:	eb00331b 	bl	217a4 <operator new(unsigned int)>
   14b34:	e1a05000 	mov	r5, r0
   14b38:	e1a02006 	mov	r2, r6
   14b3c:	e59f3018 	ldr	r3, [pc, #24]	; 14b5c <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)+0x58>
   14b40:	e3a01008 	mov	r1, #8
   14b44:	eb001687 	bl	1a568 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
   14b48:	e5845000 	str	r5, [r4]
   14b4c:	e8bd8070 	pop	{r4, r5, r6, pc}
   14b50:	000299ac 	.word	0x000299ac
   14b54:	00024f44 	.word	0x00024f44
   14b58:	0002389c 	.word	0x0002389c
   14b5c:	00024f90 	.word	0x00024f90

00014b60 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)>:
   14b60:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   14b64:	e59f4054 	ldr	r4, [pc, #84]	; 14bc0 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)+0x60>
   14b68:	e24dd00c 	sub	sp, sp, #12
   14b6c:	e5943000 	ldr	r3, [r4]
   14b70:	e1a06000 	mov	r6, r0
   14b74:	e3530000 	cmp	r3, #0
   14b78:	e1a07001 	mov	r7, r1
   14b7c:	0a000003 	beq	14b90 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)+0x30>
   14b80:	e3a0205a 	mov	r2, #90	; 0x5a
   14b84:	e59f1038 	ldr	r1, [pc, #56]	; 14bc4 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)+0x64>
   14b88:	e59f0038 	ldr	r0, [pc, #56]	; 14bc8 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)+0x68>
   14b8c:	eb001570 	bl	1a154 <assertion_failed>
   14b90:	e3a0001c 	mov	r0, #28
   14b94:	eb003302 	bl	217a4 <operator new(unsigned int)>
   14b98:	e59f102c 	ldr	r1, [pc, #44]	; 14bcc <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)+0x6c>
   14b9c:	e1a03007 	mov	r3, r7
   14ba0:	e58d1000 	str	r1, [sp]
   14ba4:	e1a02006 	mov	r2, r6
   14ba8:	e3a01008 	mov	r1, #8
   14bac:	e1a05000 	mov	r5, r0
   14bb0:	eb001678 	bl	1a598 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
   14bb4:	e5845000 	str	r5, [r4]
   14bb8:	e28dd00c 	add	sp, sp, #12
   14bbc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   14bc0:	000299ac 	.word	0x000299ac
   14bc4:	00024f44 	.word	0x00024f44
   14bc8:	0002389c 	.word	0x0002389c
   14bcc:	00024f90 	.word	0x00024f90

00014bd0 <CUSBPrinterDevice::~CUSBPrinterDevice()>:
   14bd0:	e92d4070 	push	{r4, r5, r6, lr}
   14bd4:	e5905018 	ldr	r5, [r0, #24]
   14bd8:	e59f3060 	ldr	r3, [pc, #96]	; 14c40 <CUSBPrinterDevice::~CUSBPrinterDevice()+0x70>
   14bdc:	e3550000 	cmp	r5, #0
   14be0:	e1a04000 	mov	r4, r0
   14be4:	e5803000 	str	r3, [r0]
   14be8:	0a000004 	beq	14c00 <CUSBPrinterDevice::~CUSBPrinterDevice()+0x30>
   14bec:	e1a00005 	mov	r0, r5
   14bf0:	ebffe4f0 	bl	dfb8 <CUSBEndpoint::~CUSBEndpoint()>
   14bf4:	e1a00005 	mov	r0, r5
   14bf8:	e3a01014 	mov	r1, #20
   14bfc:	eb0032ec 	bl	217b4 <operator delete(void*, unsigned int)>
   14c00:	e3a03000 	mov	r3, #0
   14c04:	e5945014 	ldr	r5, [r4, #20]
   14c08:	e5843018 	str	r3, [r4, #24]
   14c0c:	e1550003 	cmp	r5, r3
   14c10:	0a000004 	beq	14c28 <CUSBPrinterDevice::~CUSBPrinterDevice()+0x58>
   14c14:	e1a00005 	mov	r0, r5
   14c18:	ebffe4e6 	bl	dfb8 <CUSBEndpoint::~CUSBEndpoint()>
   14c1c:	e1a00005 	mov	r0, r5
   14c20:	e3a01014 	mov	r1, #20
   14c24:	eb0032e2 	bl	217b4 <operator delete(void*, unsigned int)>
   14c28:	e3a03000 	mov	r3, #0
   14c2c:	e1a00004 	mov	r0, r4
   14c30:	e5843014 	str	r3, [r4, #20]
   14c34:	ebfffd79 	bl	14220 <CUSBFunction::~CUSBFunction()>
   14c38:	e1a00004 	mov	r0, r4
   14c3c:	e8bd8070 	pop	{r4, r5, r6, pc}
   14c40:	00024fb4 	.word	0x00024fb4

00014c44 <CUSBPrinterDevice::~CUSBPrinterDevice()>:
   14c44:	e92d4010 	push	{r4, lr}
   14c48:	e1a04000 	mov	r4, r0
   14c4c:	ebffffdf 	bl	14bd0 <CUSBPrinterDevice::~CUSBPrinterDevice()>
   14c50:	e1a00004 	mov	r0, r4
   14c54:	e3a0101c 	mov	r1, #28
   14c58:	eb0032d5 	bl	217b4 <operator delete(void*, unsigned int)>
   14c5c:	e1a00004 	mov	r0, r4
   14c60:	e8bd8010 	pop	{r4, pc}

00014c64 <CUSBPrinterDevice::Write(void const*, unsigned int)>:
   14c64:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   14c68:	e2517000 	subs	r7, r1, #0
   14c6c:	e24dd00c 	sub	sp, sp, #12
   14c70:	e1a05000 	mov	r5, r0
   14c74:	e1a04002 	mov	r4, r2
   14c78:	0a000016 	beq	14cd8 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x74>
   14c7c:	e3540000 	cmp	r4, #0
   14c80:	0a00000f 	beq	14cc4 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x60>
   14c84:	e1a00005 	mov	r0, r5
   14c88:	ebfffe3f 	bl	1458c <CUSBFunction::GetHost() const>
   14c8c:	e2506000 	subs	r6, r0, #0
   14c90:	0a000015 	beq	14cec <CUSBPrinterDevice::Write(void const*, unsigned int)+0x88>
   14c94:	e3a03000 	mov	r3, #0
   14c98:	e5951018 	ldr	r1, [r5, #24]
   14c9c:	e1a02007 	mov	r2, r7
   14ca0:	e58d3000 	str	r3, [sp]
   14ca4:	e1a00006 	mov	r0, r6
   14ca8:	e1a03004 	mov	r3, r4
   14cac:	ebffe5ab 	bl	e360 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   14cb0:	e3500000 	cmp	r0, #0
   14cb4:	a1a00004 	movge	r0, r4
   14cb8:	b3e00000 	mvnlt	r0, #0
   14cbc:	e28dd00c 	add	sp, sp, #12
   14cc0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   14cc4:	e3a0207f 	mov	r2, #127	; 0x7f
   14cc8:	e59f1030 	ldr	r1, [pc, #48]	; 14d00 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x9c>
   14ccc:	e59f0030 	ldr	r0, [pc, #48]	; 14d04 <CUSBPrinterDevice::Write(void const*, unsigned int)+0xa0>
   14cd0:	eb00151f 	bl	1a154 <assertion_failed>
   14cd4:	eaffffea 	b	14c84 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x20>
   14cd8:	e3a0207e 	mov	r2, #126	; 0x7e
   14cdc:	e59f101c 	ldr	r1, [pc, #28]	; 14d00 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x9c>
   14ce0:	e59f0020 	ldr	r0, [pc, #32]	; 14d08 <CUSBPrinterDevice::Write(void const*, unsigned int)+0xa4>
   14ce4:	eb00151a 	bl	1a154 <assertion_failed>
   14ce8:	eaffffe3 	b	14c7c <CUSBPrinterDevice::Write(void const*, unsigned int)+0x18>
   14cec:	e3a02082 	mov	r2, #130	; 0x82
   14cf0:	e59f1008 	ldr	r1, [pc, #8]	; 14d00 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x9c>
   14cf4:	e59f0010 	ldr	r0, [pc, #16]	; 14d0c <CUSBPrinterDevice::Write(void const*, unsigned int)+0xa8>
   14cf8:	eb001515 	bl	1a154 <assertion_failed>
   14cfc:	eaffffe4 	b	14c94 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x30>
   14d00:	00024fd8 	.word	0x00024fd8
   14d04:	00024fe8 	.word	0x00024fe8
   14d08:	000242a4 	.word	0x000242a4
   14d0c:	00024008 	.word	0x00024008

00014d10 <CUSBPrinterDevice::CUSBPrinterDevice(CUSBFunction*)>:
   14d10:	e92d4010 	push	{r4, lr}
   14d14:	e1a04000 	mov	r4, r0
   14d18:	ebfffd8e 	bl	14358 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   14d1c:	e3a03000 	mov	r3, #0
   14d20:	e59f2014 	ldr	r2, [pc, #20]	; 14d3c <CUSBPrinterDevice::CUSBPrinterDevice(CUSBFunction*)+0x2c>
   14d24:	e5c43010 	strb	r3, [r4, #16]
   14d28:	e5842000 	str	r2, [r4]
   14d2c:	e5843014 	str	r3, [r4, #20]
   14d30:	e5843018 	str	r3, [r4, #24]
   14d34:	e1a00004 	mov	r0, r4
   14d38:	e8bd8010 	pop	{r4, pc}
   14d3c:	00024fb4 	.word	0x00024fb4

00014d40 <CUSBPrinterDevice::Configure()>:
   14d40:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   14d44:	e24dd01c 	sub	sp, sp, #28
   14d48:	e1a05000 	mov	r5, r0
   14d4c:	ebfffee8 	bl	148f4 <CUSBFunction::GetInterfaceProtocol() const>
   14d50:	e2403001 	sub	r3, r0, #1
   14d54:	e3530001 	cmp	r3, #1
   14d58:	e5c50010 	strb	r0, [r5, #16]
   14d5c:	9a00000a 	bls	14d8c <CUSBPrinterDevice::Configure()+0x4c>
   14d60:	eb001eee 	bl	1c920 <CLogger::Get()>
   14d64:	e5d52010 	ldrb	r2, [r5, #16]
   14d68:	e59f31d8 	ldr	r3, [pc, #472]	; 14f48 <CUSBPrinterDevice::Configure()+0x208>
   14d6c:	e58d2000 	str	r2, [sp]
   14d70:	e59f11d4 	ldr	r1, [pc, #468]	; 14f4c <CUSBPrinterDevice::Configure()+0x20c>
   14d74:	e3a02001 	mov	r2, #1
   14d78:	eb002091 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14d7c:	e3a04000 	mov	r4, #0
   14d80:	e1a00004 	mov	r0, r4
   14d84:	e28dd01c 	add	sp, sp, #28
   14d88:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   14d8c:	e1a00005 	mov	r0, r5
   14d90:	ebfffdcc 	bl	144c8 <CUSBFunction::GetNumEndpoints() const>
   14d94:	e5d53010 	ldrb	r3, [r5, #16]
   14d98:	e3530001 	cmp	r3, #1
   14d9c:	03a03001 	moveq	r3, #1
   14da0:	13a03002 	movne	r3, #2
   14da4:	e1530000 	cmp	r3, r0
   14da8:	d3a06005 	movle	r6, #5
   14dac:	d3a07014 	movle	r7, #20
   14db0:	da000004 	ble	14dc8 <CUSBPrinterDevice::Configure()+0x88>
   14db4:	ea000053 	b	14f08 <CUSBPrinterDevice::Configure()+0x1c8>
   14db8:	e5d43003 	ldrb	r3, [r4, #3]
   14dbc:	e203303f 	and	r3, r3, #63	; 0x3f
   14dc0:	e3530002 	cmp	r3, #2
   14dc4:	0a000028 	beq	14e6c <CUSBPrinterDevice::Configure()+0x12c>
   14dc8:	e1a01006 	mov	r1, r6
   14dcc:	e1a00005 	mov	r0, r5
   14dd0:	ebfffe2f 	bl	14694 <CUSBFunction::GetDescriptor(unsigned char)>
   14dd4:	e2504000 	subs	r4, r0, #0
   14dd8:	1afffff6 	bne	14db8 <CUSBPrinterDevice::Configure()+0x78>
   14ddc:	e5954018 	ldr	r4, [r5, #24]
   14de0:	e3540000 	cmp	r4, #0
   14de4:	0a00004c 	beq	14f1c <CUSBPrinterDevice::Configure()+0x1dc>
   14de8:	e5d53010 	ldrb	r3, [r5, #16]
   14dec:	e1a00005 	mov	r0, r5
   14df0:	e3530001 	cmp	r3, #1
   14df4:	0a000002 	beq	14e04 <CUSBPrinterDevice::Configure()+0xc4>
   14df8:	e5954014 	ldr	r4, [r5, #20]
   14dfc:	e3540000 	cmp	r4, #0
   14e00:	0a000049 	beq	14f2c <CUSBPrinterDevice::Configure()+0x1ec>
   14e04:	ebfffdf1 	bl	145d0 <CUSBFunction::Configure()>
   14e08:	e2504000 	subs	r4, r0, #0
   14e0c:	0a000027 	beq	14eb0 <CUSBPrinterDevice::Configure()+0x170>
   14e10:	e28d0008 	add	r0, sp, #8
   14e14:	eb00264e 	bl	1e754 <CString::CString()>
   14e18:	e59f3130 	ldr	r3, [pc, #304]	; 14f50 <CUSBPrinterDevice::Configure()+0x210>
   14e1c:	e59f1130 	ldr	r1, [pc, #304]	; 14f54 <CUSBPrinterDevice::Configure()+0x214>
   14e20:	e5932000 	ldr	r2, [r3]
   14e24:	e28d0008 	add	r0, sp, #8
   14e28:	e282c001 	add	ip, r2, #1
   14e2c:	e583c000 	str	ip, [r3]
   14e30:	eb002a35 	bl	1f70c <CString::Format(char const*, ...)>
   14e34:	eb0017bf 	bl	1ad38 <CDeviceNameService::Get()>
   14e38:	e1a06000 	mov	r6, r0
   14e3c:	e28d0008 	add	r0, sp, #8
   14e40:	eb002659 	bl	1e7ac <CString::operator char const*() const>
   14e44:	e1a02005 	mov	r2, r5
   14e48:	e1a01000 	mov	r1, r0
   14e4c:	e3a03000 	mov	r3, #0
   14e50:	e1a00006 	mov	r0, r6
   14e54:	eb0016f7 	bl	1aa38 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   14e58:	e28d0008 	add	r0, sp, #8
   14e5c:	eb002609 	bl	1e688 <CString::~CString()>
   14e60:	e1a00004 	mov	r0, r4
   14e64:	e28dd01c 	add	sp, sp, #28
   14e68:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   14e6c:	e1d430d2 	ldrsb	r3, [r4, #2]
   14e70:	e3530000 	cmp	r3, #0
   14e74:	ba000015 	blt	14ed0 <CUSBPrinterDevice::Configure()+0x190>
   14e78:	e5953018 	ldr	r3, [r5, #24]
   14e7c:	e1a00005 	mov	r0, r5
   14e80:	e3530000 	cmp	r3, #0
   14e84:	1a00002b 	bne	14f38 <CUSBPrinterDevice::Configure()+0x1f8>
   14e88:	ebfffd9e 	bl	14508 <CUSBFunction::GetDevice() const>
   14e8c:	e1a09000 	mov	r9, r0
   14e90:	e1a00007 	mov	r0, r7
   14e94:	eb003242 	bl	217a4 <operator new(unsigned int)>
   14e98:	e1a08000 	mov	r8, r0
   14e9c:	e1a02004 	mov	r2, r4
   14ea0:	e1a01009 	mov	r1, r9
   14ea4:	ebffe3b1 	bl	dd70 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   14ea8:	e5858018 	str	r8, [r5, #24]
   14eac:	eaffffc5 	b	14dc8 <CUSBPrinterDevice::Configure()+0x88>
   14eb0:	eb001e9a 	bl	1c920 <CLogger::Get()>
   14eb4:	e59f309c 	ldr	r3, [pc, #156]	; 14f58 <CUSBPrinterDevice::Configure()+0x218>
   14eb8:	e3a02001 	mov	r2, #1
   14ebc:	e59f1088 	ldr	r1, [pc, #136]	; 14f4c <CUSBPrinterDevice::Configure()+0x20c>
   14ec0:	eb00203f 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14ec4:	e1a00004 	mov	r0, r4
   14ec8:	e28dd01c 	add	sp, sp, #28
   14ecc:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   14ed0:	e5953014 	ldr	r3, [r5, #20]
   14ed4:	e1a00005 	mov	r0, r5
   14ed8:	e3530000 	cmp	r3, #0
   14edc:	1a000015 	bne	14f38 <CUSBPrinterDevice::Configure()+0x1f8>
   14ee0:	ebfffd88 	bl	14508 <CUSBFunction::GetDevice() const>
   14ee4:	e1a09000 	mov	r9, r0
   14ee8:	e1a00007 	mov	r0, r7
   14eec:	eb00322c 	bl	217a4 <operator new(unsigned int)>
   14ef0:	e1a08000 	mov	r8, r0
   14ef4:	e1a02004 	mov	r2, r4
   14ef8:	e1a01009 	mov	r1, r9
   14efc:	ebffe39b 	bl	dd70 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   14f00:	e5858014 	str	r8, [r5, #20]
   14f04:	eaffffaf 	b	14dc8 <CUSBPrinterDevice::Configure()+0x88>
   14f08:	e1a00005 	mov	r0, r5
   14f0c:	e59f1038 	ldr	r1, [pc, #56]	; 14f4c <CUSBPrinterDevice::Configure()+0x20c>
   14f10:	ebfffdf2 	bl	146e0 <CUSBFunction::ConfigurationError(char const*) const>
   14f14:	e3a04000 	mov	r4, #0
   14f18:	eaffff98 	b	14d80 <CUSBPrinterDevice::Configure()+0x40>
   14f1c:	e1a00005 	mov	r0, r5
   14f20:	e59f1024 	ldr	r1, [pc, #36]	; 14f4c <CUSBPrinterDevice::Configure()+0x20c>
   14f24:	ebfffded 	bl	146e0 <CUSBFunction::ConfigurationError(char const*) const>
   14f28:	eaffff94 	b	14d80 <CUSBPrinterDevice::Configure()+0x40>
   14f2c:	e59f1018 	ldr	r1, [pc, #24]	; 14f4c <CUSBPrinterDevice::Configure()+0x20c>
   14f30:	ebfffdea 	bl	146e0 <CUSBFunction::ConfigurationError(char const*) const>
   14f34:	eaffff91 	b	14d80 <CUSBPrinterDevice::Configure()+0x40>
   14f38:	e59f100c 	ldr	r1, [pc, #12]	; 14f4c <CUSBPrinterDevice::Configure()+0x20c>
   14f3c:	ebfffde7 	bl	146e0 <CUSBFunction::ConfigurationError(char const*) const>
   14f40:	e3a04000 	mov	r4, #0
   14f44:	eaffff8d 	b	14d80 <CUSBPrinterDevice::Configure()+0x40>
   14f48:	00024ff4 	.word	0x00024ff4
   14f4c:	00024fd0 	.word	0x00024fd0
   14f50:	00029778 	.word	0x00029778
   14f54:	00025014 	.word	0x00025014
   14f58:	000241a8 	.word	0x000241a8

00014f5c <CUSBBluetoothDevice::~CUSBBluetoothDevice()>:
   14f5c:	e3a03000 	mov	r3, #0
   14f60:	e92d4070 	push	{r4, r5, r6, lr}
   14f64:	e1a04000 	mov	r4, r0
   14f68:	e5900020 	ldr	r0, [r0, #32]
   14f6c:	e59f20a0 	ldr	r2, [pc, #160]	; 15014 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0xb8>
   14f70:	e1500003 	cmp	r0, r3
   14f74:	e5842000 	str	r2, [r4]
   14f78:	e5843024 	str	r3, [r4, #36]	; 0x24
   14f7c:	0a000000 	beq	14f84 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0x28>
   14f80:	eb00320a 	bl	217b0 <operator delete[](void*)>
   14f84:	e3a03000 	mov	r3, #0
   14f88:	e5945018 	ldr	r5, [r4, #24]
   14f8c:	e5843020 	str	r3, [r4, #32]
   14f90:	e1550003 	cmp	r5, r3
   14f94:	0a000004 	beq	14fac <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0x50>
   14f98:	e1a00005 	mov	r0, r5
   14f9c:	ebffe405 	bl	dfb8 <CUSBEndpoint::~CUSBEndpoint()>
   14fa0:	e1a00005 	mov	r0, r5
   14fa4:	e3a01014 	mov	r1, #20
   14fa8:	eb003201 	bl	217b4 <operator delete(void*, unsigned int)>
   14fac:	e3a03000 	mov	r3, #0
   14fb0:	e5945014 	ldr	r5, [r4, #20]
   14fb4:	e5843018 	str	r3, [r4, #24]
   14fb8:	e1550003 	cmp	r5, r3
   14fbc:	0a000004 	beq	14fd4 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0x78>
   14fc0:	e1a00005 	mov	r0, r5
   14fc4:	ebffe3fb 	bl	dfb8 <CUSBEndpoint::~CUSBEndpoint()>
   14fc8:	e1a00005 	mov	r0, r5
   14fcc:	e3a01014 	mov	r1, #20
   14fd0:	eb0031f7 	bl	217b4 <operator delete(void*, unsigned int)>
   14fd4:	e3a03000 	mov	r3, #0
   14fd8:	e5945010 	ldr	r5, [r4, #16]
   14fdc:	e5843014 	str	r3, [r4, #20]
   14fe0:	e1550003 	cmp	r5, r3
   14fe4:	0a000004 	beq	14ffc <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0xa0>
   14fe8:	e1a00005 	mov	r0, r5
   14fec:	ebffe3f1 	bl	dfb8 <CUSBEndpoint::~CUSBEndpoint()>
   14ff0:	e1a00005 	mov	r0, r5
   14ff4:	e3a01014 	mov	r1, #20
   14ff8:	eb0031ed 	bl	217b4 <operator delete(void*, unsigned int)>
   14ffc:	e3a03000 	mov	r3, #0
   15000:	e1a00004 	mov	r0, r4
   15004:	e5843010 	str	r3, [r4, #16]
   15008:	ebfffc84 	bl	14220 <CUSBFunction::~CUSBFunction()>
   1500c:	e1a00004 	mov	r0, r4
   15010:	e8bd8070 	pop	{r4, r5, r6, pc}
   15014:	00025024 	.word	0x00025024

00015018 <CUSBBluetoothDevice::~CUSBBluetoothDevice()>:
   15018:	e92d4010 	push	{r4, lr}
   1501c:	e1a04000 	mov	r4, r0
   15020:	ebffffcd 	bl	14f5c <CUSBBluetoothDevice::~CUSBBluetoothDevice()>
   15024:	e1a00004 	mov	r0, r4
   15028:	e3a01028 	mov	r1, #40	; 0x28
   1502c:	eb0031e0 	bl	217b4 <operator delete(void*, unsigned int)>
   15030:	e1a00004 	mov	r0, r4
   15034:	e8bd8010 	pop	{r4, pc}

00015038 <CUSBBluetoothDevice::CUSBBluetoothDevice(CUSBFunction*)>:
   15038:	e92d4010 	push	{r4, lr}
   1503c:	e1a04000 	mov	r4, r0
   15040:	ebfffcc4 	bl	14358 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   15044:	e3a03000 	mov	r3, #0
   15048:	e59f2020 	ldr	r2, [pc, #32]	; 15070 <CUSBBluetoothDevice::CUSBBluetoothDevice(CUSBFunction*)+0x38>
   1504c:	e5843010 	str	r3, [r4, #16]
   15050:	e5842000 	str	r2, [r4]
   15054:	e5843014 	str	r3, [r4, #20]
   15058:	e5843018 	str	r3, [r4, #24]
   1505c:	e584301c 	str	r3, [r4, #28]
   15060:	e5843020 	str	r3, [r4, #32]
   15064:	e5843024 	str	r3, [r4, #36]	; 0x24
   15068:	e1a00004 	mov	r0, r4
   1506c:	e8bd8010 	pop	{r4, pc}
   15070:	00025024 	.word	0x00025024

00015074 <CUSBBluetoothDevice::SendHCICommand(void const*, unsigned int)>:
   15074:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   15078:	e24dd014 	sub	sp, sp, #20
   1507c:	e1a06001 	mov	r6, r1
   15080:	e1a04002 	mov	r4, r2
   15084:	e1a07000 	mov	r7, r0
   15088:	ebfffd3f 	bl	1458c <CUSBFunction::GetHost() const>
   1508c:	e1a05000 	mov	r5, r0
   15090:	e1a00007 	mov	r0, r7
   15094:	ebfffd2b 	bl	14548 <CUSBFunction::GetEndpoint0() const>
   15098:	e3a03000 	mov	r3, #0
   1509c:	e6ff4074 	uxth	r4, r4
   150a0:	e1a01000 	mov	r1, r0
   150a4:	e58d6008 	str	r6, [sp, #8]
   150a8:	e58d400c 	str	r4, [sp, #12]
   150ac:	e1a00005 	mov	r0, r5
   150b0:	e58d3004 	str	r3, [sp, #4]
   150b4:	e58d3000 	str	r3, [sp]
   150b8:	e3a02020 	mov	r2, #32
   150bc:	ebffe441 	bl	e1c8 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   150c0:	e1e00000 	mvn	r0, r0
   150c4:	e1a00fa0 	lsr	r0, r0, #31
   150c8:	e28dd014 	add	sp, sp, #20
   150cc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

000150d0 <CUSBBluetoothDevice::StartRequest()>:
   150d0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   150d4:	e5903010 	ldr	r3, [r0, #16]
   150d8:	e24dd00c 	sub	sp, sp, #12
   150dc:	e3530000 	cmp	r3, #0
   150e0:	e1a04000 	mov	r4, r0
   150e4:	0a000037 	beq	151c8 <CUSBBluetoothDevice::StartRequest()+0xf8>
   150e8:	e5943020 	ldr	r3, [r4, #32]
   150ec:	e3530000 	cmp	r3, #0
   150f0:	0a00002f 	beq	151b4 <CUSBBluetoothDevice::StartRequest()+0xe4>
   150f4:	e594601c 	ldr	r6, [r4, #28]
   150f8:	e3560000 	cmp	r6, #0
   150fc:	0a00001e 	beq	1517c <CUSBBluetoothDevice::StartRequest()+0xac>
   15100:	e3a020a6 	mov	r2, #166	; 0xa6
   15104:	e59f10d0 	ldr	r1, [pc, #208]	; 151dc <CUSBBluetoothDevice::StartRequest()+0x10c>
   15108:	e59f00d0 	ldr	r0, [pc, #208]	; 151e0 <CUSBBluetoothDevice::StartRequest()+0x110>
   1510c:	eb001410 	bl	1a154 <assertion_failed>
   15110:	e5940010 	ldr	r0, [r4, #16]
   15114:	ebffe3c0 	bl	e01c <CUSBEndpoint::GetMaxPacketSize() const>
   15118:	e1a06000 	mov	r6, r0
   1511c:	e3a00028 	mov	r0, #40	; 0x28
   15120:	ebffe53e 	bl	e620 <CUSBRequest::operator new(unsigned int)>
   15124:	e3a0c000 	mov	ip, #0
   15128:	e1a05000 	mov	r5, r0
   1512c:	e5942020 	ldr	r2, [r4, #32]
   15130:	e5941010 	ldr	r1, [r4, #16]
   15134:	e1a03006 	mov	r3, r6
   15138:	e58dc000 	str	ip, [sp]
   1513c:	ebffe4a0 	bl	e3c4 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   15140:	e1a00005 	mov	r0, r5
   15144:	e584501c 	str	r5, [r4, #28]
   15148:	e1a03004 	mov	r3, r4
   1514c:	e3a02000 	mov	r2, #0
   15150:	e59f108c 	ldr	r1, [pc, #140]	; 151e4 <CUSBBluetoothDevice::StartRequest()+0x114>
   15154:	ebffe50f 	bl	e598 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   15158:	e1a00004 	mov	r0, r4
   1515c:	ebfffd0a 	bl	1458c <CUSBFunction::GetHost() const>
   15160:	e3a02000 	mov	r2, #0
   15164:	e5903000 	ldr	r3, [r0]
   15168:	e594101c 	ldr	r1, [r4, #28]
   1516c:	e593300c 	ldr	r3, [r3, #12]
   15170:	e28dd00c 	add	sp, sp, #12
   15174:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   15178:	e12fff13 	bx	r3
   1517c:	e5940010 	ldr	r0, [r4, #16]
   15180:	ebffe3a5 	bl	e01c <CUSBEndpoint::GetMaxPacketSize() const>
   15184:	e1a07000 	mov	r7, r0
   15188:	e3a00028 	mov	r0, #40	; 0x28
   1518c:	ebffe523 	bl	e620 <CUSBRequest::operator new(unsigned int)>
   15190:	e1a05000 	mov	r5, r0
   15194:	e5942020 	ldr	r2, [r4, #32]
   15198:	e5941010 	ldr	r1, [r4, #16]
   1519c:	e1a03007 	mov	r3, r7
   151a0:	e58d6000 	str	r6, [sp]
   151a4:	ebffe486 	bl	e3c4 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   151a8:	e584501c 	str	r5, [r4, #28]
   151ac:	e1a00005 	mov	r0, r5
   151b0:	eaffffe4 	b	15148 <CUSBBluetoothDevice::StartRequest()+0x78>
   151b4:	e3a020a4 	mov	r2, #164	; 0xa4
   151b8:	e59f101c 	ldr	r1, [pc, #28]	; 151dc <CUSBBluetoothDevice::StartRequest()+0x10c>
   151bc:	e59f0024 	ldr	r0, [pc, #36]	; 151e8 <CUSBBluetoothDevice::StartRequest()+0x118>
   151c0:	eb0013e3 	bl	1a154 <assertion_failed>
   151c4:	eaffffca 	b	150f4 <CUSBBluetoothDevice::StartRequest()+0x24>
   151c8:	e3a020a3 	mov	r2, #163	; 0xa3
   151cc:	e59f1008 	ldr	r1, [pc, #8]	; 151dc <CUSBBluetoothDevice::StartRequest()+0x10c>
   151d0:	e59f0014 	ldr	r0, [pc, #20]	; 151ec <CUSBBluetoothDevice::StartRequest()+0x11c>
   151d4:	eb0013de 	bl	1a154 <assertion_failed>
   151d8:	eaffffc2 	b	150e8 <CUSBBluetoothDevice::StartRequest()+0x18>
   151dc:	00025048 	.word	0x00025048
   151e0:	00024824 	.word	0x00024824
   151e4:	00015368 	.word	0x00015368
   151e8:	00025078 	.word	0x00025078
   151ec:	0002505c 	.word	0x0002505c

000151f0 <CUSBBluetoothDevice::RegisterHCIEventHandler(void (*)(void const*, unsigned int))>:
   151f0:	e3510000 	cmp	r1, #0
   151f4:	e92d4010 	push	{r4, lr}
   151f8:	e1a04000 	mov	r4, r0
   151fc:	e5801024 	str	r1, [r0, #36]	; 0x24
   15200:	0a000002 	beq	15210 <CUSBBluetoothDevice::RegisterHCIEventHandler(void (*)(void const*, unsigned int))+0x20>
   15204:	e1a00004 	mov	r0, r4
   15208:	e8bd4010 	pop	{r4, lr}
   1520c:	eaffffaf 	b	150d0 <CUSBBluetoothDevice::StartRequest()>
   15210:	e59f0014 	ldr	r0, [pc, #20]	; 1522c <CUSBBluetoothDevice::RegisterHCIEventHandler(void (*)(void const*, unsigned int))+0x3c>
   15214:	e3a0209c 	mov	r2, #156	; 0x9c
   15218:	e59f1010 	ldr	r1, [pc, #16]	; 15230 <CUSBBluetoothDevice::RegisterHCIEventHandler(void (*)(void const*, unsigned int))+0x40>
   1521c:	eb0013cc 	bl	1a154 <assertion_failed>
   15220:	e1a00004 	mov	r0, r4
   15224:	e8bd4010 	pop	{r4, lr}
   15228:	eaffffa8 	b	150d0 <CUSBBluetoothDevice::StartRequest()>
   1522c:	0002508c 	.word	0x0002508c
   15230:	00025048 	.word	0x00025048

00015234 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)>:
   15234:	e92d4070 	push	{r4, r5, r6, lr}
   15238:	e2515000 	subs	r5, r1, #0
   1523c:	e1a04000 	mov	r4, r0
   15240:	0a000035 	beq	1531c <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xe8>
   15244:	e594301c 	ldr	r3, [r4, #28]
   15248:	e1550003 	cmp	r5, r3
   1524c:	0a000003 	beq	15260 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x2c>
   15250:	e3a020b3 	mov	r2, #179	; 0xb3
   15254:	e59f10ec 	ldr	r1, [pc, #236]	; 15348 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x114>
   15258:	e59f00ec 	ldr	r0, [pc, #236]	; 1534c <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x118>
   1525c:	eb0013bc 	bl	1a154 <assertion_failed>
   15260:	e5943020 	ldr	r3, [r4, #32]
   15264:	e3530000 	cmp	r3, #0
   15268:	0a000026 	beq	15308 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xd4>
   1526c:	e1a00005 	mov	r0, r5
   15270:	ebffe48d 	bl	e4ac <CUSBRequest::GetStatus() const>
   15274:	e3500000 	cmp	r0, #0
   15278:	0a00001c 	beq	152f0 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xbc>
   1527c:	e5946024 	ldr	r6, [r4, #36]	; 0x24
   15280:	e3560000 	cmp	r6, #0
   15284:	0a000029 	beq	15330 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xfc>
   15288:	e1a00005 	mov	r0, r5
   1528c:	e5945020 	ldr	r5, [r4, #32]
   15290:	ebffe487 	bl	e4b4 <CUSBRequest::GetResultLength() const>
   15294:	e1a01000 	mov	r1, r0
   15298:	e1a00005 	mov	r0, r5
   1529c:	e12fff36 	blx	r6
   152a0:	e594501c 	ldr	r5, [r4, #28]
   152a4:	e3550000 	cmp	r5, #0
   152a8:	0a000004 	beq	152c0 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x8c>
   152ac:	e1a00005 	mov	r0, r5
   152b0:	ebffe468 	bl	e458 <CUSBRequest::~CUSBRequest()>
   152b4:	e1a00005 	mov	r0, r5
   152b8:	e3a01028 	mov	r1, #40	; 0x28
   152bc:	ebffe4ef 	bl	e680 <CUSBRequest::operator delete(void*, unsigned int)>
   152c0:	e3a03000 	mov	r3, #0
   152c4:	e1a00004 	mov	r0, r4
   152c8:	e584301c 	str	r3, [r4, #28]
   152cc:	ebffff7f 	bl	150d0 <CUSBBluetoothDevice::StartRequest()>
   152d0:	e3500000 	cmp	r0, #0
   152d4:	18bd8070 	popne	{r4, r5, r6, pc}
   152d8:	eb001d90 	bl	1c920 <CLogger::Get()>
   152dc:	e8bd4070 	pop	{r4, r5, r6, lr}
   152e0:	e59f3068 	ldr	r3, [pc, #104]	; 15350 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x11c>
   152e4:	e3a02001 	mov	r2, #1
   152e8:	e59f1064 	ldr	r1, [pc, #100]	; 15354 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x120>
   152ec:	ea001f34 	b	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   152f0:	eb001d8a 	bl	1c920 <CLogger::Get()>
   152f4:	e59f305c 	ldr	r3, [pc, #92]	; 15358 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x124>
   152f8:	e3a02002 	mov	r2, #2
   152fc:	e59f1050 	ldr	r1, [pc, #80]	; 15354 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x120>
   15300:	eb001f2f 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15304:	eaffffe5 	b	152a0 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x6c>
   15308:	e3a020b4 	mov	r2, #180	; 0xb4
   1530c:	e59f1034 	ldr	r1, [pc, #52]	; 15348 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x114>
   15310:	e59f0044 	ldr	r0, [pc, #68]	; 1535c <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x128>
   15314:	eb00138e 	bl	1a154 <assertion_failed>
   15318:	eaffffd3 	b	1526c <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x38>
   1531c:	e3a020b2 	mov	r2, #178	; 0xb2
   15320:	e59f1020 	ldr	r1, [pc, #32]	; 15348 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x114>
   15324:	e59f0034 	ldr	r0, [pc, #52]	; 15360 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x12c>
   15328:	eb001389 	bl	1a154 <assertion_failed>
   1532c:	eaffffc4 	b	15244 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x10>
   15330:	e3a020b8 	mov	r2, #184	; 0xb8
   15334:	e59f100c 	ldr	r1, [pc, #12]	; 15348 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x114>
   15338:	e59f0024 	ldr	r0, [pc, #36]	; 15364 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x130>
   1533c:	eb001384 	bl	1a154 <assertion_failed>
   15340:	e5946024 	ldr	r6, [r4, #36]	; 0x24
   15344:	eaffffcf 	b	15288 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x54>
   15348:	00025048 	.word	0x00025048
   1534c:	00024848 	.word	0x00024848
   15350:	00024858 	.word	0x00024858
   15354:	00025040 	.word	0x00025040
   15358:	000250a4 	.word	0x000250a4
   1535c:	00025078 	.word	0x00025078
   15360:	000231c4 	.word	0x000231c4
   15364:	0002508c 	.word	0x0002508c

00015368 <CUSBBluetoothDevice::CompletionStub(CUSBRequest*, void*, void*)>:
   15368:	e92d4070 	push	{r4, r5, r6, lr}
   1536c:	e2524000 	subs	r4, r2, #0
   15370:	e1a05000 	mov	r5, r0
   15374:	0a000003 	beq	15388 <CUSBBluetoothDevice::CompletionStub(CUSBRequest*, void*, void*)+0x20>
   15378:	e1a01005 	mov	r1, r5
   1537c:	e1a00004 	mov	r0, r4
   15380:	e8bd4070 	pop	{r4, r5, r6, lr}
   15384:	eaffffaa 	b	15234 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)>
   15388:	e59f1018 	ldr	r1, [pc, #24]	; 153a8 <CUSBBluetoothDevice::CompletionStub(CUSBRequest*, void*, void*)+0x40>
   1538c:	e59f0018 	ldr	r0, [pc, #24]	; 153ac <CUSBBluetoothDevice::CompletionStub(CUSBRequest*, void*, void*)+0x44>
   15390:	e3a020cc 	mov	r2, #204	; 0xcc
   15394:	eb00136e 	bl	1a154 <assertion_failed>
   15398:	e1a01005 	mov	r1, r5
   1539c:	e1a00004 	mov	r0, r4
   153a0:	e8bd4070 	pop	{r4, r5, r6, lr}
   153a4:	eaffffa2 	b	15234 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)>
   153a8:	00025048 	.word	0x00025048
   153ac:	00022ebc 	.word	0x00022ebc

000153b0 <CUSBBluetoothDevice::Configure()>:
   153b0:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   153b4:	e24dd014 	sub	sp, sp, #20
   153b8:	e1a05000 	mov	r5, r0
   153bc:	ebfffd1c 	bl	14834 <CUSBFunction::GetInterfaceNumber() const>
   153c0:	e2506000 	subs	r6, r0, #0
   153c4:	1a000043 	bne	154d8 <CUSBBluetoothDevice::Configure()+0x128>
   153c8:	e1a00005 	mov	r0, r5
   153cc:	ebfffc3d 	bl	144c8 <CUSBFunction::GetNumEndpoints() const>
   153d0:	e3500003 	cmp	r0, #3
   153d4:	03a06005 	moveq	r6, #5
   153d8:	03a07014 	moveq	r7, #20
   153dc:	1a000037 	bne	154c0 <CUSBBluetoothDevice::Configure()+0x110>
   153e0:	e1a01006 	mov	r1, r6
   153e4:	e1a00005 	mov	r0, r5
   153e8:	ebfffca9 	bl	14694 <CUSBFunction::GetDescriptor(unsigned char)>
   153ec:	e2504000 	subs	r4, r0, #0
   153f0:	0a000041 	beq	154fc <CUSBBluetoothDevice::Configure()+0x14c>
   153f4:	e5d42003 	ldrb	r2, [r4, #3]
   153f8:	e202203f 	and	r2, r2, #63	; 0x3f
   153fc:	e3520002 	cmp	r2, #2
   15400:	0a00000f 	beq	15444 <CUSBBluetoothDevice::Configure()+0x94>
   15404:	e3520003 	cmp	r2, #3
   15408:	1afffff4 	bne	153e0 <CUSBBluetoothDevice::Configure()+0x30>
   1540c:	e5953010 	ldr	r3, [r5, #16]
   15410:	e1a00005 	mov	r0, r5
   15414:	e3530000 	cmp	r3, #0
   15418:	1a000060 	bne	155a0 <CUSBBluetoothDevice::Configure()+0x1f0>
   1541c:	ebfffc39 	bl	14508 <CUSBFunction::GetDevice() const>
   15420:	e1a09000 	mov	r9, r0
   15424:	e1a00007 	mov	r0, r7
   15428:	eb0030dd 	bl	217a4 <operator new(unsigned int)>
   1542c:	e1a08000 	mov	r8, r0
   15430:	e1a02004 	mov	r2, r4
   15434:	e1a01009 	mov	r1, r9
   15438:	ebffe24c 	bl	dd70 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   1543c:	e5858010 	str	r8, [r5, #16]
   15440:	eaffffe6 	b	153e0 <CUSBBluetoothDevice::Configure()+0x30>
   15444:	e1d430d2 	ldrsb	r3, [r4, #2]
   15448:	e3530000 	cmp	r3, #0
   1544c:	ba00000d 	blt	15488 <CUSBBluetoothDevice::Configure()+0xd8>
   15450:	e5953018 	ldr	r3, [r5, #24]
   15454:	e1a00005 	mov	r0, r5
   15458:	e3530000 	cmp	r3, #0
   1545c:	1a00004f 	bne	155a0 <CUSBBluetoothDevice::Configure()+0x1f0>
   15460:	ebfffc28 	bl	14508 <CUSBFunction::GetDevice() const>
   15464:	e1a09000 	mov	r9, r0
   15468:	e1a00007 	mov	r0, r7
   1546c:	eb0030cc 	bl	217a4 <operator new(unsigned int)>
   15470:	e1a08000 	mov	r8, r0
   15474:	e1a02004 	mov	r2, r4
   15478:	e1a01009 	mov	r1, r9
   1547c:	ebffe23b 	bl	dd70 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   15480:	e5858018 	str	r8, [r5, #24]
   15484:	eaffffd5 	b	153e0 <CUSBBluetoothDevice::Configure()+0x30>
   15488:	e5953014 	ldr	r3, [r5, #20]
   1548c:	e1a00005 	mov	r0, r5
   15490:	e3530000 	cmp	r3, #0
   15494:	1a000041 	bne	155a0 <CUSBBluetoothDevice::Configure()+0x1f0>
   15498:	ebfffc1a 	bl	14508 <CUSBFunction::GetDevice() const>
   1549c:	e1a09000 	mov	r9, r0
   154a0:	e1a00007 	mov	r0, r7
   154a4:	eb0030be 	bl	217a4 <operator new(unsigned int)>
   154a8:	e1a08000 	mov	r8, r0
   154ac:	e1a02004 	mov	r2, r4
   154b0:	e1a01009 	mov	r1, r9
   154b4:	ebffe22d 	bl	dd70 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   154b8:	e5858014 	str	r8, [r5, #20]
   154bc:	eaffffc7 	b	153e0 <CUSBBluetoothDevice::Configure()+0x30>
   154c0:	e1a00005 	mov	r0, r5
   154c4:	e59f1104 	ldr	r1, [pc, #260]	; 155d0 <CUSBBluetoothDevice::Configure()+0x220>
   154c8:	ebfffc84 	bl	146e0 <CUSBFunction::ConfigurationError(char const*) const>
   154cc:	e1a00006 	mov	r0, r6
   154d0:	e28dd014 	add	sp, sp, #20
   154d4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   154d8:	e3a06000 	mov	r6, #0
   154dc:	eb001d0f 	bl	1c920 <CLogger::Get()>
   154e0:	e59f30ec 	ldr	r3, [pc, #236]	; 155d4 <CUSBBluetoothDevice::Configure()+0x224>
   154e4:	e3a02002 	mov	r2, #2
   154e8:	e59f10e0 	ldr	r1, [pc, #224]	; 155d0 <CUSBBluetoothDevice::Configure()+0x220>
   154ec:	eb001eb4 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   154f0:	e1a00006 	mov	r0, r6
   154f4:	e28dd014 	add	sp, sp, #20
   154f8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   154fc:	e5953014 	ldr	r3, [r5, #20]
   15500:	e3530000 	cmp	r3, #0
   15504:	0a000024 	beq	1559c <CUSBBluetoothDevice::Configure()+0x1ec>
   15508:	e5953018 	ldr	r3, [r5, #24]
   1550c:	e3530000 	cmp	r3, #0
   15510:	0a000021 	beq	1559c <CUSBBluetoothDevice::Configure()+0x1ec>
   15514:	e5953010 	ldr	r3, [r5, #16]
   15518:	e3530000 	cmp	r3, #0
   1551c:	0a00001e 	beq	1559c <CUSBBluetoothDevice::Configure()+0x1ec>
   15520:	e1a00005 	mov	r0, r5
   15524:	ebfffc29 	bl	145d0 <CUSBFunction::Configure()>
   15528:	e2506000 	subs	r6, r0, #0
   1552c:	0a000021 	beq	155b8 <CUSBBluetoothDevice::Configure()+0x208>
   15530:	e5950010 	ldr	r0, [r5, #16]
   15534:	ebffe2b8 	bl	e01c <CUSBEndpoint::GetMaxPacketSize() const>
   15538:	eb00309a 	bl	217a8 <operator new[](unsigned int)>
   1553c:	e5850020 	str	r0, [r5, #32]
   15540:	e1a0000d 	mov	r0, sp
   15544:	eb002482 	bl	1e754 <CString::CString()>
   15548:	e59f3088 	ldr	r3, [pc, #136]	; 155d8 <CUSBBluetoothDevice::Configure()+0x228>
   1554c:	e59f1088 	ldr	r1, [pc, #136]	; 155dc <CUSBBluetoothDevice::Configure()+0x22c>
   15550:	e5932000 	ldr	r2, [r3]
   15554:	e1a0000d 	mov	r0, sp
   15558:	e282c001 	add	ip, r2, #1
   1555c:	e583c000 	str	ip, [r3]
   15560:	eb002869 	bl	1f70c <CString::Format(char const*, ...)>
   15564:	eb0015f3 	bl	1ad38 <CDeviceNameService::Get()>
   15568:	e1a07000 	mov	r7, r0
   1556c:	e1a0000d 	mov	r0, sp
   15570:	eb00248d 	bl	1e7ac <CString::operator char const*() const>
   15574:	e1a03004 	mov	r3, r4
   15578:	e1a01000 	mov	r1, r0
   1557c:	e1a02005 	mov	r2, r5
   15580:	e1a00007 	mov	r0, r7
   15584:	eb00152b 	bl	1aa38 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   15588:	e1a0000d 	mov	r0, sp
   1558c:	eb00243d 	bl	1e688 <CString::~CString()>
   15590:	e1a00006 	mov	r0, r6
   15594:	e28dd014 	add	sp, sp, #20
   15598:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1559c:	e1a00005 	mov	r0, r5
   155a0:	e3a06000 	mov	r6, #0
   155a4:	e59f1024 	ldr	r1, [pc, #36]	; 155d0 <CUSBBluetoothDevice::Configure()+0x220>
   155a8:	ebfffc4c 	bl	146e0 <CUSBFunction::ConfigurationError(char const*) const>
   155ac:	e1a00006 	mov	r0, r6
   155b0:	e28dd014 	add	sp, sp, #20
   155b4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   155b8:	eb001cd8 	bl	1c920 <CLogger::Get()>
   155bc:	e59f301c 	ldr	r3, [pc, #28]	; 155e0 <CUSBBluetoothDevice::Configure()+0x230>
   155c0:	e3a02001 	mov	r2, #1
   155c4:	e59f1004 	ldr	r1, [pc, #4]	; 155d0 <CUSBBluetoothDevice::Configure()+0x220>
   155c8:	eb001e7d 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   155cc:	eaffffbe 	b	154cc <CUSBBluetoothDevice::Configure()+0x11c>
   155d0:	00025040 	.word	0x00025040
   155d4:	000250b4 	.word	0x000250b4
   155d8:	0002977c 	.word	0x0002977c
   155dc:	000250d8 	.word	0x000250d8
   155e0:	000241a8 	.word	0x000241a8

000155e4 <CUSBMIDIDevice::~CUSBMIDIDevice()>:
   155e4:	e92d4070 	push	{r4, r5, r6, lr}
   155e8:	e1a04000 	mov	r4, r0
   155ec:	e5900020 	ldr	r0, [r0, #32]
   155f0:	e59f304c 	ldr	r3, [pc, #76]	; 15644 <CUSBMIDIDevice::~CUSBMIDIDevice()+0x60>
   155f4:	e3500000 	cmp	r0, #0
   155f8:	e5843000 	str	r3, [r4]
   155fc:	0a000002 	beq	1560c <CUSBMIDIDevice::~CUSBMIDIDevice()+0x28>
   15600:	eb00306a 	bl	217b0 <operator delete[](void*)>
   15604:	e3a03000 	mov	r3, #0
   15608:	e5843020 	str	r3, [r4, #32]
   1560c:	e5945010 	ldr	r5, [r4, #16]
   15610:	e3550000 	cmp	r5, #0
   15614:	0a000006 	beq	15634 <CUSBMIDIDevice::~CUSBMIDIDevice()+0x50>
   15618:	e1a00005 	mov	r0, r5
   1561c:	ebffe265 	bl	dfb8 <CUSBEndpoint::~CUSBEndpoint()>
   15620:	e1a00005 	mov	r0, r5
   15624:	e3a01014 	mov	r1, #20
   15628:	eb003061 	bl	217b4 <operator delete(void*, unsigned int)>
   1562c:	e3a03000 	mov	r3, #0
   15630:	e5843010 	str	r3, [r4, #16]
   15634:	e1a00004 	mov	r0, r4
   15638:	ebfffaf8 	bl	14220 <CUSBFunction::~CUSBFunction()>
   1563c:	e1a00004 	mov	r0, r4
   15640:	e8bd8070 	pop	{r4, r5, r6, pc}
   15644:	000250e8 	.word	0x000250e8

00015648 <CUSBMIDIDevice::~CUSBMIDIDevice()>:
   15648:	e92d4010 	push	{r4, lr}
   1564c:	e1a04000 	mov	r4, r0
   15650:	ebffffe3 	bl	155e4 <CUSBMIDIDevice::~CUSBMIDIDevice()>
   15654:	e1a00004 	mov	r0, r4
   15658:	e3a01028 	mov	r1, #40	; 0x28
   1565c:	eb003054 	bl	217b4 <operator delete(void*, unsigned int)>
   15660:	e1a00004 	mov	r0, r4
   15664:	e8bd8010 	pop	{r4, pc}

00015668 <CUSBMIDIDevice::CUSBMIDIDevice(CUSBFunction*)>:
   15668:	e92d4010 	push	{r4, lr}
   1566c:	e1a04000 	mov	r4, r0
   15670:	ebfffb38 	bl	14358 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   15674:	e3a03000 	mov	r3, #0
   15678:	e59f201c 	ldr	r2, [pc, #28]	; 1569c <CUSBMIDIDevice::CUSBMIDIDevice(CUSBFunction*)+0x34>
   1567c:	e5843010 	str	r3, [r4, #16]
   15680:	e5842000 	str	r2, [r4]
   15684:	e5843014 	str	r3, [r4, #20]
   15688:	e5843018 	str	r3, [r4, #24]
   1568c:	e5843020 	str	r3, [r4, #32]
   15690:	e5843024 	str	r3, [r4, #36]	; 0x24
   15694:	e1a00004 	mov	r0, r4
   15698:	e8bd8010 	pop	{r4, pc}
   1569c:	000250e8 	.word	0x000250e8

000156a0 <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))>:
   156a0:	e5903014 	ldr	r3, [r0, #20]
   156a4:	e92d4070 	push	{r4, r5, r6, lr}
   156a8:	e3530000 	cmp	r3, #0
   156ac:	e1a04000 	mov	r4, r0
   156b0:	e1a05001 	mov	r5, r1
   156b4:	0a000003 	beq	156c8 <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))+0x28>
   156b8:	e3a02099 	mov	r2, #153	; 0x99
   156bc:	e59f1024 	ldr	r1, [pc, #36]	; 156e8 <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))+0x48>
   156c0:	e59f0024 	ldr	r0, [pc, #36]	; 156ec <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))+0x4c>
   156c4:	eb0012a2 	bl	1a154 <assertion_failed>
   156c8:	e3550000 	cmp	r5, #0
   156cc:	e5845014 	str	r5, [r4, #20]
   156d0:	18bd8070 	popne	{r4, r5, r6, pc}
   156d4:	e3a0209b 	mov	r2, #155	; 0x9b
   156d8:	e8bd4070 	pop	{r4, r5, r6, lr}
   156dc:	e59f1004 	ldr	r1, [pc, #4]	; 156e8 <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))+0x48>
   156e0:	e59f0008 	ldr	r0, [pc, #8]	; 156f0 <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))+0x50>
   156e4:	ea00129a 	b	1a154 <assertion_failed>
   156e8:	0002514c 	.word	0x0002514c
   156ec:	00025158 	.word	0x00025158
   156f0:	00025170 	.word	0x00025170

000156f4 <CUSBMIDIDevice::StartRequest()>:
   156f4:	e92d4070 	push	{r4, r5, r6, lr}
   156f8:	e5903010 	ldr	r3, [r0, #16]
   156fc:	e24dd008 	sub	sp, sp, #8
   15700:	e3530000 	cmp	r3, #0
   15704:	e1a04000 	mov	r4, r0
   15708:	0a000035 	beq	157e4 <CUSBMIDIDevice::StartRequest()+0xf0>
   1570c:	e5943020 	ldr	r3, [r4, #32]
   15710:	e3530000 	cmp	r3, #0
   15714:	0a000037 	beq	157f8 <CUSBMIDIDevice::StartRequest()+0x104>
   15718:	e5943018 	ldr	r3, [r4, #24]
   1571c:	e3530000 	cmp	r3, #0
   15720:	0a000003 	beq	15734 <CUSBMIDIDevice::StartRequest()+0x40>
   15724:	e3a020a3 	mov	r2, #163	; 0xa3
   15728:	e59f10dc 	ldr	r1, [pc, #220]	; 1580c <CUSBMIDIDevice::StartRequest()+0x118>
   1572c:	e59f00dc 	ldr	r0, [pc, #220]	; 15810 <CUSBMIDIDevice::StartRequest()+0x11c>
   15730:	eb001287 	bl	1a154 <assertion_failed>
   15734:	e1d451bc 	ldrh	r5, [r4, #28]
   15738:	e3550000 	cmp	r5, #0
   1573c:	0a000019 	beq	157a8 <CUSBMIDIDevice::StartRequest()+0xb4>
   15740:	e3a00028 	mov	r0, #40	; 0x28
   15744:	ebffe3b5 	bl	e620 <CUSBRequest::operator new(unsigned int)>
   15748:	e3a0c000 	mov	ip, #0
   1574c:	e1a05000 	mov	r5, r0
   15750:	e1d431bc 	ldrh	r3, [r4, #28]
   15754:	e5942020 	ldr	r2, [r4, #32]
   15758:	e5941010 	ldr	r1, [r4, #16]
   1575c:	e58dc000 	str	ip, [sp]
   15760:	ebffe317 	bl	e3c4 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   15764:	e1a00005 	mov	r0, r5
   15768:	e5845018 	str	r5, [r4, #24]
   1576c:	e1a03004 	mov	r3, r4
   15770:	e3a02000 	mov	r2, #0
   15774:	e59f1098 	ldr	r1, [pc, #152]	; 15814 <CUSBMIDIDevice::StartRequest()+0x120>
   15778:	ebffe386 	bl	e598 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   1577c:	e5940018 	ldr	r0, [r4, #24]
   15780:	ebffe3a1 	bl	e60c <CUSBRequest::SetCompleteOnNAK()>
   15784:	e1a00004 	mov	r0, r4
   15788:	ebfffb7f 	bl	1458c <CUSBFunction::GetHost() const>
   1578c:	e3a02000 	mov	r2, #0
   15790:	e5903000 	ldr	r3, [r0]
   15794:	e5941018 	ldr	r1, [r4, #24]
   15798:	e593300c 	ldr	r3, [r3, #12]
   1579c:	e28dd008 	add	sp, sp, #8
   157a0:	e8bd4070 	pop	{r4, r5, r6, lr}
   157a4:	e12fff13 	bx	r3
   157a8:	e3a020a4 	mov	r2, #164	; 0xa4
   157ac:	e59f1058 	ldr	r1, [pc, #88]	; 1580c <CUSBMIDIDevice::StartRequest()+0x118>
   157b0:	e59f0060 	ldr	r0, [pc, #96]	; 15818 <CUSBMIDIDevice::StartRequest()+0x124>
   157b4:	eb001266 	bl	1a154 <assertion_failed>
   157b8:	e3a00028 	mov	r0, #40	; 0x28
   157bc:	ebffe397 	bl	e620 <CUSBRequest::operator new(unsigned int)>
   157c0:	e1a06000 	mov	r6, r0
   157c4:	e1d431bc 	ldrh	r3, [r4, #28]
   157c8:	e5942020 	ldr	r2, [r4, #32]
   157cc:	e5941010 	ldr	r1, [r4, #16]
   157d0:	e58d5000 	str	r5, [sp]
   157d4:	ebffe2fa 	bl	e3c4 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   157d8:	e1a00006 	mov	r0, r6
   157dc:	e5846018 	str	r6, [r4, #24]
   157e0:	eaffffe1 	b	1576c <CUSBMIDIDevice::StartRequest()+0x78>
   157e4:	e3a020a0 	mov	r2, #160	; 0xa0
   157e8:	e59f101c 	ldr	r1, [pc, #28]	; 1580c <CUSBMIDIDevice::StartRequest()+0x118>
   157ec:	e59f0028 	ldr	r0, [pc, #40]	; 1581c <CUSBMIDIDevice::StartRequest()+0x128>
   157f0:	eb001257 	bl	1a154 <assertion_failed>
   157f4:	eaffffc4 	b	1570c <CUSBMIDIDevice::StartRequest()+0x18>
   157f8:	e3a020a1 	mov	r2, #161	; 0xa1
   157fc:	e59f1008 	ldr	r1, [pc, #8]	; 1580c <CUSBMIDIDevice::StartRequest()+0x118>
   15800:	e59f0018 	ldr	r0, [pc, #24]	; 15820 <CUSBMIDIDevice::StartRequest()+0x12c>
   15804:	eb001252 	bl	1a154 <assertion_failed>
   15808:	eaffffc2 	b	15718 <CUSBMIDIDevice::StartRequest()+0x24>
   1580c:	0002514c 	.word	0x0002514c
   15810:	00024824 	.word	0x00024824
   15814:	000159f4 	.word	0x000159f4
   15818:	000251b4 	.word	0x000251b4
   1581c:	00025188 	.word	0x00025188
   15820:	0002519c 	.word	0x0002519c

00015824 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)>:
   15824:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   15828:	e2514000 	subs	r4, r1, #0
   1582c:	e24dd00c 	sub	sp, sp, #12
   15830:	e1a05000 	mov	r5, r0
   15834:	0a00005b 	beq	159a8 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x184>
   15838:	e5953018 	ldr	r3, [r5, #24]
   1583c:	e1540003 	cmp	r4, r3
   15840:	0a000003 	beq	15854 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x30>
   15844:	e3a020b1 	mov	r2, #177	; 0xb1
   15848:	e59f1184 	ldr	r1, [pc, #388]	; 159d4 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1b0>
   1584c:	e59f0184 	ldr	r0, [pc, #388]	; 159d8 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1b4>
   15850:	eb00123f 	bl	1a154 <assertion_failed>
   15854:	e1a00004 	mov	r0, r4
   15858:	ebffe313 	bl	e4ac <CUSBRequest::GetStatus() const>
   1585c:	e3500000 	cmp	r0, #0
   15860:	1a000020 	bne	158e8 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0xc4>
   15864:	e5954018 	ldr	r4, [r5, #24]
   15868:	e3540000 	cmp	r4, #0
   1586c:	13a09000 	movne	r9, #0
   15870:	0a000008 	beq	15898 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x74>
   15874:	e1a00004 	mov	r0, r4
   15878:	ebffe2f6 	bl	e458 <CUSBRequest::~CUSBRequest()>
   1587c:	e1a00004 	mov	r0, r4
   15880:	e3a01028 	mov	r1, #40	; 0x28
   15884:	ebffe37d 	bl	e680 <CUSBRequest::operator delete(void*, unsigned int)>
   15888:	e3a03000 	mov	r3, #0
   1588c:	e1590003 	cmp	r9, r3
   15890:	e5853018 	str	r3, [r5, #24]
   15894:	1a00003f 	bne	15998 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x174>
   15898:	e5953024 	ldr	r3, [r5, #36]	; 0x24
   1589c:	e3530000 	cmp	r3, #0
   158a0:	1a000037 	bne	15984 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x160>
   158a4:	eb002b41 	bl	205b0 <CTimer::Get()>
   158a8:	e58d5000 	str	r5, [sp]
   158ac:	e3a03000 	mov	r3, #0
   158b0:	e59f2124 	ldr	r2, [pc, #292]	; 159dc <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1b8>
   158b4:	e3a01001 	mov	r1, #1
   158b8:	eb00296d 	bl	1fe74 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
   158bc:	e3500000 	cmp	r0, #0
   158c0:	e5850024 	str	r0, [r5, #36]	; 0x24
   158c4:	0a000001 	beq	158d0 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0xac>
   158c8:	e28dd00c 	add	sp, sp, #12
   158cc:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   158d0:	e3a020d9 	mov	r2, #217	; 0xd9
   158d4:	e59f10f8 	ldr	r1, [pc, #248]	; 159d4 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1b0>
   158d8:	e59f0100 	ldr	r0, [pc, #256]	; 159e0 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1bc>
   158dc:	e28dd00c 	add	sp, sp, #12
   158e0:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
   158e4:	ea00121a 	b	1a154 <assertion_failed>
   158e8:	e1a00004 	mov	r0, r4
   158ec:	ebffe2f0 	bl	e4b4 <CUSBRequest::GetResultLength() const>
   158f0:	e3100003 	tst	r0, #3
   158f4:	1affffda 	bne	15864 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x40>
   158f8:	e5958020 	ldr	r8, [r5, #32]
   158fc:	e3580000 	cmp	r8, #0
   15900:	0a00002d 	beq	159bc <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x198>
   15904:	e1a00004 	mov	r0, r4
   15908:	ebffe2e9 	bl	e4b4 <CUSBRequest::GetResultLength() const>
   1590c:	e5954020 	ldr	r4, [r5, #32]
   15910:	e0888000 	add	r8, r8, r0
   15914:	e1580004 	cmp	r8, r4
   15918:	9affffd1 	bls	15864 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x40>
   1591c:	e3a09000 	mov	r9, #0
   15920:	e3a07001 	mov	r7, #1
   15924:	e59f60b8 	ldr	r6, [pc, #184]	; 159e4 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1c0>
   15928:	e2844001 	add	r4, r4, #1
   1592c:	e5540001 	ldrb	r0, [r4, #-1]
   15930:	e3500000 	cmp	r0, #0
   15934:	0a00000a 	beq	15964 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x140>
   15938:	e5959014 	ldr	r9, [r5, #20]
   1593c:	e200300f 	and	r3, r0, #15
   15940:	e3590000 	cmp	r9, #0
   15944:	e0863103 	add	r3, r6, r3, lsl #2
   15948:	e1a00220 	lsr	r0, r0, #4
   1594c:	01a09007 	moveq	r9, r7
   15950:	0a000003 	beq	15964 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x140>
   15954:	e5932024 	ldr	r2, [r3, #36]	; 0x24
   15958:	e1a01004 	mov	r1, r4
   1595c:	e12fff39 	blx	r9
   15960:	e1a09007 	mov	r9, r7
   15964:	e2843003 	add	r3, r4, #3
   15968:	e1580003 	cmp	r8, r3
   1596c:	e2844004 	add	r4, r4, #4
   15970:	8affffed 	bhi	1592c <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x108>
   15974:	e5954018 	ldr	r4, [r5, #24]
   15978:	e3540000 	cmp	r4, #0
   1597c:	1affffbc 	bne	15874 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x50>
   15980:	eaffffc0 	b	15888 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x64>
   15984:	e3a020d7 	mov	r2, #215	; 0xd7
   15988:	e59f1044 	ldr	r1, [pc, #68]	; 159d4 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1b0>
   1598c:	e59f0054 	ldr	r0, [pc, #84]	; 159e8 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1c4>
   15990:	eb0011ef 	bl	1a154 <assertion_failed>
   15994:	eaffffc2 	b	158a4 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x80>
   15998:	e1a00005 	mov	r0, r5
   1599c:	e28dd00c 	add	sp, sp, #12
   159a0:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
   159a4:	eaffff52 	b	156f4 <CUSBMIDIDevice::StartRequest()>
   159a8:	e3a020b0 	mov	r2, #176	; 0xb0
   159ac:	e59f1020 	ldr	r1, [pc, #32]	; 159d4 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1b0>
   159b0:	e59f0034 	ldr	r0, [pc, #52]	; 159ec <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1c8>
   159b4:	eb0011e6 	bl	1a154 <assertion_failed>
   159b8:	eaffff9e 	b	15838 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x14>
   159bc:	e3a020b8 	mov	r2, #184	; 0xb8
   159c0:	e59f100c 	ldr	r1, [pc, #12]	; 159d4 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1b0>
   159c4:	e59f0024 	ldr	r0, [pc, #36]	; 159f0 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1cc>
   159c8:	eb0011e1 	bl	1a154 <assertion_failed>
   159cc:	e5958020 	ldr	r8, [r5, #32]
   159d0:	eaffffcb 	b	15904 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0xe0>
   159d4:	0002514c 	.word	0x0002514c
   159d8:	00024848 	.word	0x00024848
   159dc:	00015a7c 	.word	0x00015a7c
   159e0:	000251d8 	.word	0x000251d8
   159e4:	000250e0 	.word	0x000250e0
   159e8:	000251c8 	.word	0x000251c8
   159ec:	000231c4 	.word	0x000231c4
   159f0:	0002519c 	.word	0x0002519c

000159f4 <CUSBMIDIDevice::CompletionStub(CUSBRequest*, void*, void*)>:
   159f4:	e92d4070 	push	{r4, r5, r6, lr}
   159f8:	e2524000 	subs	r4, r2, #0
   159fc:	e1a05000 	mov	r5, r0
   15a00:	0a000003 	beq	15a14 <CUSBMIDIDevice::CompletionStub(CUSBRequest*, void*, void*)+0x20>
   15a04:	e1a01005 	mov	r1, r5
   15a08:	e1a00004 	mov	r0, r4
   15a0c:	e8bd4070 	pop	{r4, r5, r6, lr}
   15a10:	eaffff83 	b	15824 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)>
   15a14:	e59f1018 	ldr	r1, [pc, #24]	; 15a34 <CUSBMIDIDevice::CompletionStub(CUSBRequest*, void*, void*)+0x40>
   15a18:	e59f0018 	ldr	r0, [pc, #24]	; 15a38 <CUSBMIDIDevice::CompletionStub(CUSBRequest*, void*, void*)+0x44>
   15a1c:	e3a020e0 	mov	r2, #224	; 0xe0
   15a20:	eb0011cb 	bl	1a154 <assertion_failed>
   15a24:	e1a01005 	mov	r1, r5
   15a28:	e1a00004 	mov	r0, r4
   15a2c:	e8bd4070 	pop	{r4, r5, r6, lr}
   15a30:	eaffff7b 	b	15824 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)>
   15a34:	0002514c 	.word	0x0002514c
   15a38:	00022ebc 	.word	0x00022ebc

00015a3c <CUSBMIDIDevice::TimerHandler(unsigned int)>:
   15a3c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   15a40:	e92d4010 	push	{r4, lr}
   15a44:	e1530001 	cmp	r3, r1
   15a48:	e1a04000 	mov	r4, r0
   15a4c:	0a000003 	beq	15a60 <CUSBMIDIDevice::TimerHandler(unsigned int)+0x24>
   15a50:	e3a020e7 	mov	r2, #231	; 0xe7
   15a54:	e59f1018 	ldr	r1, [pc, #24]	; 15a74 <CUSBMIDIDevice::TimerHandler(unsigned int)+0x38>
   15a58:	e59f0018 	ldr	r0, [pc, #24]	; 15a78 <CUSBMIDIDevice::TimerHandler(unsigned int)+0x3c>
   15a5c:	eb0011bc 	bl	1a154 <assertion_failed>
   15a60:	e3a03000 	mov	r3, #0
   15a64:	e1a00004 	mov	r0, r4
   15a68:	e5843024 	str	r3, [r4, #36]	; 0x24
   15a6c:	e8bd4010 	pop	{r4, lr}
   15a70:	eaffff1f 	b	156f4 <CUSBMIDIDevice::StartRequest()>
   15a74:	0002514c 	.word	0x0002514c
   15a78:	000251e8 	.word	0x000251e8

00015a7c <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)>:
   15a7c:	e92d4070 	push	{r4, r5, r6, lr}
   15a80:	e2524000 	subs	r4, r2, #0
   15a84:	e1a05000 	mov	r5, r0
   15a88:	0a000003 	beq	15a9c <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)+0x20>
   15a8c:	e1a01005 	mov	r1, r5
   15a90:	e1a00004 	mov	r0, r4
   15a94:	e8bd4070 	pop	{r4, r5, r6, lr}
   15a98:	eaffffe7 	b	15a3c <CUSBMIDIDevice::TimerHandler(unsigned int)>
   15a9c:	e59f1018 	ldr	r1, [pc, #24]	; 15abc <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)+0x40>
   15aa0:	e59f0018 	ldr	r0, [pc, #24]	; 15ac0 <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)+0x44>
   15aa4:	e3a020f0 	mov	r2, #240	; 0xf0
   15aa8:	eb0011a9 	bl	1a154 <assertion_failed>
   15aac:	e1a01005 	mov	r1, r5
   15ab0:	e1a00004 	mov	r0, r4
   15ab4:	e8bd4070 	pop	{r4, r5, r6, lr}
   15ab8:	eaffffdf 	b	15a3c <CUSBMIDIDevice::TimerHandler(unsigned int)>
   15abc:	0002514c 	.word	0x0002514c
   15ac0:	00022ebc 	.word	0x00022ebc

00015ac4 <CUSBMIDIDevice::Configure()>:
   15ac4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ac8:	e24dd01c 	sub	sp, sp, #28
   15acc:	e1a05000 	mov	r5, r0
   15ad0:	ebfffa7c 	bl	144c8 <CUSBFunction::GetNumEndpoints() const>
   15ad4:	e2506000 	subs	r6, r0, #0
   15ad8:	e1a00005 	mov	r0, r5
   15adc:	0a000073 	beq	15cb0 <CUSBMIDIDevice::Configure()+0x1ec>
   15ae0:	ebfffa88 	bl	14508 <CUSBFunction::GetDevice() const>
   15ae4:	ebffde02 	bl	d2f4 <CUSBDevice::GetDeviceDescriptor() const>
   15ae8:	e2504000 	subs	r4, r0, #0
   15aec:	0a000077 	beq	15cd0 <CUSBMIDIDevice::Configure()+0x20c>
   15af0:	e5d43008 	ldrb	r3, [r4, #8]
   15af4:	e5d41009 	ldrb	r1, [r4, #9]
   15af8:	e59f21f8 	ldr	r2, [pc, #504]	; 15cf8 <CUSBMIDIDevice::Configure()+0x234>
   15afc:	e1833401 	orr	r3, r3, r1, lsl #8
   15b00:	e1530002 	cmp	r3, r2
   15b04:	05d4700a 	ldrbeq	r7, [r4, #10]
   15b08:	05d4200b 	ldrbeq	r2, [r4, #11]
   15b0c:	059f31e8 	ldreq	r3, [pc, #488]	; 15cfc <CUSBMIDIDevice::Configure()+0x238>
   15b10:	01877402 	orreq	r7, r7, r2, lsl #8
   15b14:	00477003 	subeq	r7, r7, r3
   15b18:	016f7f17 	clzeq	r7, r7
   15b1c:	13a07000 	movne	r7, #0
   15b20:	e3a06005 	mov	r6, #5
   15b24:	e3a08014 	mov	r8, #20
   15b28:	e3a0b07d 	mov	fp, #125	; 0x7d
   15b2c:	e59fa1cc 	ldr	sl, [pc, #460]	; 15d00 <CUSBMIDIDevice::Configure()+0x23c>
   15b30:	01a072a7 	lsreq	r7, r7, #5
   15b34:	e1a01006 	mov	r1, r6
   15b38:	e1a00005 	mov	r0, r5
   15b3c:	ebfffad4 	bl	14694 <CUSBFunction::GetDescriptor(unsigned char)>
   15b40:	e2504000 	subs	r4, r0, #0
   15b44:	0a000026 	beq	15be4 <CUSBMIDIDevice::Configure()+0x120>
   15b48:	e1d430d2 	ldrsb	r3, [r4, #2]
   15b4c:	e3530000 	cmp	r3, #0
   15b50:	aafffff7 	bge	15b34 <CUSBMIDIDevice::Configure()+0x70>
   15b54:	e5d43003 	ldrb	r3, [r4, #3]
   15b58:	e203303f 	and	r3, r3, #63	; 0x3f
   15b5c:	e3530002 	cmp	r3, #2
   15b60:	1afffff3 	bne	15b34 <CUSBMIDIDevice::Configure()+0x70>
   15b64:	e3570000 	cmp	r7, #0
   15b68:	0a000046 	beq	15c88 <CUSBMIDIDevice::Configure()+0x1c4>
   15b6c:	e5953010 	ldr	r3, [r5, #16]
   15b70:	e3530000 	cmp	r3, #0
   15b74:	1a00005a 	bne	15ce4 <CUSBMIDIDevice::Configure()+0x220>
   15b78:	e1a00005 	mov	r0, r5
   15b7c:	ebfffa61 	bl	14508 <CUSBFunction::GetDevice() const>
   15b80:	e58d0004 	str	r0, [sp, #4]
   15b84:	e1a00008 	mov	r0, r8
   15b88:	eb002f05 	bl	217a4 <operator new(unsigned int)>
   15b8c:	e1a09000 	mov	r9, r0
   15b90:	e1a02004 	mov	r2, r4
   15b94:	e59d1004 	ldr	r1, [sp, #4]
   15b98:	ebffe074 	bl	dd70 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   15b9c:	e5859010 	str	r9, [r5, #16]
   15ba0:	e5d40004 	ldrb	r0, [r4, #4]
   15ba4:	e5d42005 	ldrb	r2, [r4, #5]
   15ba8:	e5953020 	ldr	r3, [r5, #32]
   15bac:	e1800402 	orr	r0, r0, r2, lsl #8
   15bb0:	e3c00003 	bic	r0, r0, #3
   15bb4:	e6ff0070 	uxth	r0, r0
   15bb8:	e3530000 	cmp	r3, #0
   15bbc:	e1c501bc 	strh	r0, [r5, #28]
   15bc0:	0a00003f 	beq	15cc4 <CUSBMIDIDevice::Configure()+0x200>
   15bc4:	e1a0200b 	mov	r2, fp
   15bc8:	e1a0100a 	mov	r1, sl
   15bcc:	e59f0130 	ldr	r0, [pc, #304]	; 15d04 <CUSBMIDIDevice::Configure()+0x240>
   15bd0:	eb00115f 	bl	1a154 <assertion_failed>
   15bd4:	e1d501bc 	ldrh	r0, [r5, #28]
   15bd8:	eb002ef2 	bl	217a8 <operator new[](unsigned int)>
   15bdc:	e5850020 	str	r0, [r5, #32]
   15be0:	eaffffd3 	b	15b34 <CUSBMIDIDevice::Configure()+0x70>
   15be4:	e5956010 	ldr	r6, [r5, #16]
   15be8:	e1a00005 	mov	r0, r5
   15bec:	e3560000 	cmp	r6, #0
   15bf0:	0a00002e 	beq	15cb0 <CUSBMIDIDevice::Configure()+0x1ec>
   15bf4:	ebfffa75 	bl	145d0 <CUSBFunction::Configure()>
   15bf8:	e2506000 	subs	r6, r0, #0
   15bfc:	0a000019 	beq	15c68 <CUSBMIDIDevice::Configure()+0x1a4>
   15c00:	e28d0008 	add	r0, sp, #8
   15c04:	eb0022d2 	bl	1e754 <CString::CString()>
   15c08:	e59f30f8 	ldr	r3, [pc, #248]	; 15d08 <CUSBMIDIDevice::Configure()+0x244>
   15c0c:	e59f10f8 	ldr	r1, [pc, #248]	; 15d0c <CUSBMIDIDevice::Configure()+0x248>
   15c10:	e5932000 	ldr	r2, [r3]
   15c14:	e28d0008 	add	r0, sp, #8
   15c18:	e282c001 	add	ip, r2, #1
   15c1c:	e583c000 	str	ip, [r3]
   15c20:	eb0026b9 	bl	1f70c <CString::Format(char const*, ...)>
   15c24:	eb001443 	bl	1ad38 <CDeviceNameService::Get()>
   15c28:	e1a06000 	mov	r6, r0
   15c2c:	e28d0008 	add	r0, sp, #8
   15c30:	eb0022dd 	bl	1e7ac <CString::operator char const*() const>
   15c34:	e1a03004 	mov	r3, r4
   15c38:	e1a01000 	mov	r1, r0
   15c3c:	e1a02005 	mov	r2, r5
   15c40:	e1a00006 	mov	r0, r6
   15c44:	eb00137b 	bl	1aa38 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   15c48:	e1a00005 	mov	r0, r5
   15c4c:	ebfffea8 	bl	156f4 <CUSBMIDIDevice::StartRequest()>
   15c50:	e1a06000 	mov	r6, r0
   15c54:	e28d0008 	add	r0, sp, #8
   15c58:	eb00228a 	bl	1e688 <CString::~CString()>
   15c5c:	e1a00006 	mov	r0, r6
   15c60:	e28dd01c 	add	sp, sp, #28
   15c64:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c68:	eb001b2c 	bl	1c920 <CLogger::Get()>
   15c6c:	e59f309c 	ldr	r3, [pc, #156]	; 15d10 <CUSBMIDIDevice::Configure()+0x24c>
   15c70:	e3a02001 	mov	r2, #1
   15c74:	e59f1098 	ldr	r1, [pc, #152]	; 15d14 <CUSBMIDIDevice::Configure()+0x250>
   15c78:	eb001cd1 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15c7c:	e1a00006 	mov	r0, r6
   15c80:	e28dd01c 	add	sp, sp, #28
   15c84:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c88:	e3a01025 	mov	r1, #37	; 0x25
   15c8c:	e1a00005 	mov	r0, r5
   15c90:	ebfffa7f 	bl	14694 <CUSBFunction::GetDescriptor(unsigned char)>
   15c94:	e3500000 	cmp	r0, #0
   15c98:	0affffa5 	beq	15b34 <CUSBMIDIDevice::Configure()+0x70>
   15c9c:	e5d43000 	ldrb	r3, [r4]
   15ca0:	e0843003 	add	r3, r4, r3
   15ca4:	e1500003 	cmp	r0, r3
   15ca8:	1affffa1 	bne	15b34 <CUSBMIDIDevice::Configure()+0x70>
   15cac:	eaffffae 	b	15b6c <CUSBMIDIDevice::Configure()+0xa8>
   15cb0:	e59f105c 	ldr	r1, [pc, #92]	; 15d14 <CUSBMIDIDevice::Configure()+0x250>
   15cb4:	ebfffa89 	bl	146e0 <CUSBFunction::ConfigurationError(char const*) const>
   15cb8:	e1a00006 	mov	r0, r6
   15cbc:	e28dd01c 	add	sp, sp, #28
   15cc0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15cc4:	eb002eb7 	bl	217a8 <operator new[](unsigned int)>
   15cc8:	e5850020 	str	r0, [r5, #32]
   15ccc:	eaffff98 	b	15b34 <CUSBMIDIDevice::Configure()+0x70>
   15cd0:	e3a02051 	mov	r2, #81	; 0x51
   15cd4:	e59f1024 	ldr	r1, [pc, #36]	; 15d00 <CUSBMIDIDevice::Configure()+0x23c>
   15cd8:	e59f0038 	ldr	r0, [pc, #56]	; 15d18 <CUSBMIDIDevice::Configure()+0x254>
   15cdc:	eb00111c 	bl	1a154 <assertion_failed>
   15ce0:	eaffff82 	b	15af0 <CUSBMIDIDevice::Configure()+0x2c>
   15ce4:	e1a00005 	mov	r0, r5
   15ce8:	e59f1024 	ldr	r1, [pc, #36]	; 15d14 <CUSBMIDIDevice::Configure()+0x250>
   15cec:	ebfffa7b 	bl	146e0 <CUSBFunction::ConfigurationError(char const*) const>
   15cf0:	e3a06000 	mov	r6, #0
   15cf4:	eaffffd8 	b	15c5c <CUSBMIDIDevice::Configure()+0x198>
   15cf8:	00000582 	.word	0x00000582
   15cfc:	0000012a 	.word	0x0000012a
   15d00:	0002514c 	.word	0x0002514c
   15d04:	00025210 	.word	0x00025210
   15d08:	00029780 	.word	0x00029780
   15d0c:	00025228 	.word	0x00025228
   15d10:	000241a8 	.word	0x000241a8
   15d14:	00025144 	.word	0x00025144
   15d18:	000251fc 	.word	0x000251fc

00015d1c <CUSBCDCEthernetDevice::GetMACAddress() const>:
   15d1c:	e2800018 	add	r0, r0, #24
   15d20:	e12fff1e 	bx	lr

00015d24 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>:
   15d24:	e92d4070 	push	{r4, r5, r6, lr}
   15d28:	e5905014 	ldr	r5, [r0, #20]
   15d2c:	e59f3068 	ldr	r3, [pc, #104]	; 15d9c <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()+0x78>
   15d30:	e3550000 	cmp	r5, #0
   15d34:	e1a04000 	mov	r4, r0
   15d38:	e5803000 	str	r3, [r0]
   15d3c:	0a000004 	beq	15d54 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()+0x30>
   15d40:	e1a00005 	mov	r0, r5
   15d44:	ebffe09b 	bl	dfb8 <CUSBEndpoint::~CUSBEndpoint()>
   15d48:	e1a00005 	mov	r0, r5
   15d4c:	e3a01014 	mov	r1, #20
   15d50:	eb002e97 	bl	217b4 <operator delete(void*, unsigned int)>
   15d54:	e3a03000 	mov	r3, #0
   15d58:	e5945010 	ldr	r5, [r4, #16]
   15d5c:	e5843014 	str	r3, [r4, #20]
   15d60:	e1550003 	cmp	r5, r3
   15d64:	0a000004 	beq	15d7c <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()+0x58>
   15d68:	e1a00005 	mov	r0, r5
   15d6c:	ebffe091 	bl	dfb8 <CUSBEndpoint::~CUSBEndpoint()>
   15d70:	e1a00005 	mov	r0, r5
   15d74:	e3a01014 	mov	r1, #20
   15d78:	eb002e8d 	bl	217b4 <operator delete(void*, unsigned int)>
   15d7c:	e3a03000 	mov	r3, #0
   15d80:	e2840018 	add	r0, r4, #24
   15d84:	e5843010 	str	r3, [r4, #16]
   15d88:	eb000a0d 	bl	185c4 <CMACAddress::~CMACAddress()>
   15d8c:	e1a00004 	mov	r0, r4
   15d90:	eb000abb 	bl	18884 <CNetDevice::~CNetDevice()>
   15d94:	e1a00004 	mov	r0, r4
   15d98:	e8bd8070 	pop	{r4, r5, r6, pc}
   15d9c:	00025238 	.word	0x00025238

00015da0 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>:
   15da0:	e92d4010 	push	{r4, lr}
   15da4:	e1a04000 	mov	r4, r0
   15da8:	ebffffdd 	bl	15d24 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>
   15dac:	e1a00004 	mov	r0, r4
   15db0:	e3a01020 	mov	r1, #32
   15db4:	eb002e7e 	bl	217b4 <operator delete(void*, unsigned int)>
   15db8:	e1a00004 	mov	r0, r4
   15dbc:	e8bd8010 	pop	{r4, pc}

00015dc0 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)>:
   15dc0:	e92d4070 	push	{r4, r5, r6, lr}
   15dc4:	e5903014 	ldr	r3, [r0, #20]
   15dc8:	e24dd008 	sub	sp, sp, #8
   15dcc:	e3530000 	cmp	r3, #0
   15dd0:	e1a04000 	mov	r4, r0
   15dd4:	e1a05001 	mov	r5, r1
   15dd8:	e1a06002 	mov	r6, r2
   15ddc:	0a000018 	beq	15e44 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x84>
   15de0:	e3550000 	cmp	r5, #0
   15de4:	0a000011 	beq	15e30 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x70>
   15de8:	e3560d19 	cmp	r6, #1600	; 0x640
   15dec:	9a000003 	bls	15e00 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x40>
   15df0:	e3a020ac 	mov	r2, #172	; 0xac
   15df4:	e59f105c 	ldr	r1, [pc, #92]	; 15e58 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x98>
   15df8:	e59f005c 	ldr	r0, [pc, #92]	; 15e5c <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x9c>
   15dfc:	eb0010d4 	bl	1a154 <assertion_failed>
   15e00:	e1a00004 	mov	r0, r4
   15e04:	ebfff9e0 	bl	1458c <CUSBFunction::GetHost() const>
   15e08:	e3a0c000 	mov	ip, #0
   15e0c:	e5941014 	ldr	r1, [r4, #20]
   15e10:	e1a03006 	mov	r3, r6
   15e14:	e1a02005 	mov	r2, r5
   15e18:	e58dc000 	str	ip, [sp]
   15e1c:	ebffe14f 	bl	e360 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   15e20:	e1e00000 	mvn	r0, r0
   15e24:	e1a00fa0 	lsr	r0, r0, #31
   15e28:	e28dd008 	add	sp, sp, #8
   15e2c:	e8bd8070 	pop	{r4, r5, r6, pc}
   15e30:	e3a020ab 	mov	r2, #171	; 0xab
   15e34:	e59f101c 	ldr	r1, [pc, #28]	; 15e58 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x98>
   15e38:	e59f0020 	ldr	r0, [pc, #32]	; 15e60 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0xa0>
   15e3c:	eb0010c4 	bl	1a154 <assertion_failed>
   15e40:	eaffffe8 	b	15de8 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x28>
   15e44:	e3a020aa 	mov	r2, #170	; 0xaa
   15e48:	e59f1008 	ldr	r1, [pc, #8]	; 15e58 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x98>
   15e4c:	e59f0010 	ldr	r0, [pc, #16]	; 15e64 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0xa4>
   15e50:	eb0010bf 	bl	1a154 <assertion_failed>
   15e54:	eaffffe1 	b	15de0 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x20>
   15e58:	00025270 	.word	0x00025270
   15e5c:	0002529c 	.word	0x0002529c
   15e60:	000242a4 	.word	0x000242a4
   15e64:	00025284 	.word	0x00025284

00015e68 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)>:
   15e68:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   15e6c:	e5903010 	ldr	r3, [r0, #16]
   15e70:	e24dd034 	sub	sp, sp, #52	; 0x34
   15e74:	e3530000 	cmp	r3, #0
   15e78:	e1a04000 	mov	r4, r0
   15e7c:	e1a06001 	mov	r6, r1
   15e80:	e1a07002 	mov	r7, r2
   15e84:	0a000026 	beq	15f24 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xbc>
   15e88:	e3560000 	cmp	r6, #0
   15e8c:	0a00001f 	beq	15f10 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xa8>
   15e90:	e3a05000 	mov	r5, #0
   15e94:	e5941010 	ldr	r1, [r4, #16]
   15e98:	e1a02006 	mov	r2, r6
   15e9c:	e3a03d19 	mov	r3, #1600	; 0x640
   15ea0:	e58d5000 	str	r5, [sp]
   15ea4:	e28d0008 	add	r0, sp, #8
   15ea8:	ebffe145 	bl	e3c4 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   15eac:	e28d0008 	add	r0, sp, #8
   15eb0:	ebffe1d5 	bl	e60c <CUSBRequest::SetCompleteOnNAK()>
   15eb4:	e1a00004 	mov	r0, r4
   15eb8:	ebfff9b3 	bl	1458c <CUSBFunction::GetHost() const>
   15ebc:	e5903000 	ldr	r3, [r0]
   15ec0:	e1a02005 	mov	r2, r5
   15ec4:	e5933008 	ldr	r3, [r3, #8]
   15ec8:	e28d1008 	add	r1, sp, #8
   15ecc:	e12fff33 	blx	r3
   15ed0:	e2504000 	subs	r4, r0, #0
   15ed4:	1a000005 	bne	15ef0 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0x88>
   15ed8:	e3a04000 	mov	r4, #0
   15edc:	e28d0008 	add	r0, sp, #8
   15ee0:	ebffe15c 	bl	e458 <CUSBRequest::~CUSBRequest()>
   15ee4:	e1a00004 	mov	r0, r4
   15ee8:	e28dd034 	add	sp, sp, #52	; 0x34
   15eec:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   15ef0:	e28d0008 	add	r0, sp, #8
   15ef4:	ebffe16e 	bl	e4b4 <CUSBRequest::GetResultLength() const>
   15ef8:	e2505000 	subs	r5, r0, #0
   15efc:	0afffff5 	beq	15ed8 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0x70>
   15f00:	e3570000 	cmp	r7, #0
   15f04:	0a00000b 	beq	15f38 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xd0>
   15f08:	e5875000 	str	r5, [r7]
   15f0c:	eafffff2 	b	15edc <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0x74>
   15f10:	e3a020b3 	mov	r2, #179	; 0xb3
   15f14:	e59f1030 	ldr	r1, [pc, #48]	; 15f4c <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xe4>
   15f18:	e59f0030 	ldr	r0, [pc, #48]	; 15f50 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xe8>
   15f1c:	eb00108c 	bl	1a154 <assertion_failed>
   15f20:	eaffffda 	b	15e90 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0x28>
   15f24:	e3a020b2 	mov	r2, #178	; 0xb2
   15f28:	e59f101c 	ldr	r1, [pc, #28]	; 15f4c <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xe4>
   15f2c:	e59f0020 	ldr	r0, [pc, #32]	; 15f54 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xec>
   15f30:	eb001087 	bl	1a154 <assertion_failed>
   15f34:	eaffffd3 	b	15e88 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0x20>
   15f38:	e3a020c3 	mov	r2, #195	; 0xc3
   15f3c:	e59f1008 	ldr	r1, [pc, #8]	; 15f4c <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xe4>
   15f40:	e59f0010 	ldr	r0, [pc, #16]	; 15f58 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xf0>
   15f44:	eb001082 	bl	1a154 <assertion_failed>
   15f48:	eaffffee 	b	15f08 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xa0>
   15f4c:	00025270 	.word	0x00025270
   15f50:	000242a4 	.word	0x000242a4
   15f54:	000252bc 	.word	0x000252bc
   15f58:	000252d4 	.word	0x000252d4

00015f5c <CUSBCDCEthernetDevice::CUSBCDCEthernetDevice(CUSBFunction*)>:
   15f5c:	e92d4010 	push	{r4, lr}
   15f60:	e1a04000 	mov	r4, r0
   15f64:	eb000a3e 	bl	18864 <CNetDevice::CNetDevice(CUSBFunction*)>
   15f68:	e3a03000 	mov	r3, #0
   15f6c:	e59f2018 	ldr	r2, [pc, #24]	; 15f8c <CUSBCDCEthernetDevice::CUSBCDCEthernetDevice(CUSBFunction*)+0x30>
   15f70:	e5843010 	str	r3, [r4, #16]
   15f74:	e5842000 	str	r2, [r4]
   15f78:	e5843014 	str	r3, [r4, #20]
   15f7c:	e2840018 	add	r0, r4, #24
   15f80:	eb00098c 	bl	185b8 <CMACAddress::CMACAddress()>
   15f84:	e1a00004 	mov	r0, r4
   15f88:	e8bd8010 	pop	{r4, pc}
   15f8c:	00025238 	.word	0x00025238

00015f90 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)>:
   15f90:	e92d4070 	push	{r4, r5, r6, lr}
   15f94:	e24dd018 	sub	sp, sp, #24
   15f98:	e1a04001 	mov	r4, r1
   15f9c:	e1a05000 	mov	r5, r0
   15fa0:	ebfff958 	bl	14508 <CUSBFunction::GetDevice() const>
   15fa4:	e1a01000 	mov	r1, r0
   15fa8:	e28d000c 	add	r0, sp, #12
   15fac:	eb0001a8 	bl	16654 <CUSBString::CUSBString(CUSBDevice*)>
   15fb0:	e3540000 	cmp	r4, #0
   15fb4:	1a000005 	bne	15fd0 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x40>
   15fb8:	e3a04000 	mov	r4, #0
   15fbc:	e28d000c 	add	r0, sp, #12
   15fc0:	eb0001f4 	bl	16798 <CUSBString::~CUSBString()>
   15fc4:	e1a00004 	mov	r0, r4
   15fc8:	e28dd018 	add	sp, sp, #24
   15fcc:	e8bd8070 	pop	{r4, r5, r6, pc}
   15fd0:	e28d000c 	add	r0, sp, #12
   15fd4:	eb0002a7 	bl	16a78 <CUSBString::GetLanguageID()>
   15fd8:	e1a01004 	mov	r1, r4
   15fdc:	e1a02000 	mov	r2, r0
   15fe0:	e28d000c 	add	r0, sp, #12
   15fe4:	eb0001fb 	bl	167d8 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)>
   15fe8:	e2504000 	subs	r4, r0, #0
   15fec:	0afffff1 	beq	15fb8 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x28>
   15ff0:	e28d000c 	add	r0, sp, #12
   15ff4:	eb00029d 	bl	16a70 <CUSBString::Get() const>
   15ff8:	e2506000 	subs	r6, r0, #0
   15ffc:	0a00001b 	beq	16070 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0xe0>
   16000:	e2861002 	add	r1, r6, #2
   16004:	e286c00e 	add	ip, r6, #14
   16008:	e28d0003 	add	r0, sp, #3
   1600c:	e15130d2 	ldrsb	r3, [r1, #-2]
   16010:	e3530039 	cmp	r3, #57	; 0x39
   16014:	c2433007 	subgt	r3, r3, #7
   16018:	c6af3073 	sxtbgt	r3, r3
   1601c:	e2433030 	sub	r3, r3, #48	; 0x30
   16020:	e6ef2073 	uxtb	r2, r3
   16024:	e352000f 	cmp	r2, #15
   16028:	8affffe2 	bhi	15fb8 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x28>
   1602c:	e15130d1 	ldrsb	r3, [r1, #-1]
   16030:	e2811002 	add	r1, r1, #2
   16034:	e3530039 	cmp	r3, #57	; 0x39
   16038:	c2433007 	subgt	r3, r3, #7
   1603c:	c6af3073 	sxtbgt	r3, r3
   16040:	e2433030 	sub	r3, r3, #48	; 0x30
   16044:	e6ef3073 	uxtb	r3, r3
   16048:	e353000f 	cmp	r3, #15
   1604c:	e1833202 	orr	r3, r3, r2, lsl #4
   16050:	8affffd8 	bhi	15fb8 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x28>
   16054:	e15c0001 	cmp	ip, r1
   16058:	e5e03001 	strb	r3, [r0, #1]!
   1605c:	1affffea 	bne	1600c <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x7c>
   16060:	e2850018 	add	r0, r5, #24
   16064:	e28d1004 	add	r1, sp, #4
   16068:	eb000977 	bl	1864c <CMACAddress::Set(unsigned char const*)>
   1606c:	eaffffd2 	b	15fbc <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x2c>
   16070:	e3a020d3 	mov	r2, #211	; 0xd3
   16074:	e59f1008 	ldr	r1, [pc, #8]	; 16084 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0xf4>
   16078:	e59f0008 	ldr	r0, [pc, #8]	; 16088 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0xf8>
   1607c:	eb001034 	bl	1a154 <assertion_failed>
   16080:	eaffffde 	b	16000 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x70>
   16084:	00025270 	.word	0x00025270
   16088:	000252e8 	.word	0x000252e8

0001608c <CUSBCDCEthernetDevice::Configure()>:
   1608c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   16090:	e1a05000 	mov	r5, r0
   16094:	e24dd01c 	sub	sp, sp, #28
   16098:	e3a06024 	mov	r6, #36	; 0x24
   1609c:	ea000002 	b	160ac <CUSBCDCEthernetDevice::Configure()+0x20>
   160a0:	e5d43002 	ldrb	r3, [r4, #2]
   160a4:	e353000f 	cmp	r3, #15
   160a8:	0a00000a 	beq	160d8 <CUSBCDCEthernetDevice::Configure()+0x4c>
   160ac:	e1a01006 	mov	r1, r6
   160b0:	e1a00005 	mov	r0, r5
   160b4:	ebfff976 	bl	14694 <CUSBFunction::GetDescriptor(unsigned char)>
   160b8:	e2504000 	subs	r4, r0, #0
   160bc:	1afffff7 	bne	160a0 <CUSBCDCEthernetDevice::Configure()+0x14>
   160c0:	e1a00005 	mov	r0, r5
   160c4:	e59f11f0 	ldr	r1, [pc, #496]	; 162bc <CUSBCDCEthernetDevice::Configure()+0x230>
   160c8:	ebfff984 	bl	146e0 <CUSBFunction::ConfigurationError(char const*) const>
   160cc:	e1a00004 	mov	r0, r4
   160d0:	e28dd01c 	add	sp, sp, #28
   160d4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   160d8:	e3a06004 	mov	r6, #4
   160dc:	e1a01006 	mov	r1, r6
   160e0:	e1a00005 	mov	r0, r5
   160e4:	ebfff96a 	bl	14694 <CUSBFunction::GetDescriptor(unsigned char)>
   160e8:	e2503000 	subs	r3, r0, #0
   160ec:	0a00003c 	beq	161e4 <CUSBCDCEthernetDevice::Configure()+0x158>
   160f0:	e5d32005 	ldrb	r2, [r3, #5]
   160f4:	e352000a 	cmp	r2, #10
   160f8:	1afffff7 	bne	160dc <CUSBCDCEthernetDevice::Configure()+0x50>
   160fc:	e5d32006 	ldrb	r2, [r3, #6]
   16100:	e3520000 	cmp	r2, #0
   16104:	1afffff4 	bne	160dc <CUSBCDCEthernetDevice::Configure()+0x50>
   16108:	e5d32007 	ldrb	r2, [r3, #7]
   1610c:	e3520000 	cmp	r2, #0
   16110:	1afffff1 	bne	160dc <CUSBCDCEthernetDevice::Configure()+0x50>
   16114:	e5d33004 	ldrb	r3, [r3, #4]
   16118:	e3530001 	cmp	r3, #1
   1611c:	daffffee 	ble	160dc <CUSBCDCEthernetDevice::Configure()+0x50>
   16120:	e5d41003 	ldrb	r1, [r4, #3]
   16124:	e1a00005 	mov	r0, r5
   16128:	ebffff98 	bl	15f90 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)>
   1612c:	e2504000 	subs	r4, r0, #0
   16130:	0a000043 	beq	16244 <CUSBCDCEthernetDevice::Configure()+0x1b8>
   16134:	e28d0008 	add	r0, sp, #8
   16138:	eb002185 	bl	1e754 <CString::CString()>
   1613c:	e28d1008 	add	r1, sp, #8
   16140:	e2850018 	add	r0, r5, #24
   16144:	eb0009a1 	bl	187d0 <CMACAddress::Format(CString*) const>
   16148:	eb0019f4 	bl	1c920 <CLogger::Get()>
   1614c:	e1a04000 	mov	r4, r0
   16150:	e28d0008 	add	r0, sp, #8
   16154:	eb002194 	bl	1e7ac <CString::operator char const*() const>
   16158:	e59f3160 	ldr	r3, [pc, #352]	; 162c0 <CUSBCDCEthernetDevice::Configure()+0x234>
   1615c:	e58d0000 	str	r0, [sp]
   16160:	e3a02004 	mov	r2, #4
   16164:	e1a00004 	mov	r0, r4
   16168:	e59f114c 	ldr	r1, [pc, #332]	; 162bc <CUSBCDCEthernetDevice::Configure()+0x230>
   1616c:	eb001b94 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16170:	e3a06005 	mov	r6, #5
   16174:	e3a07014 	mov	r7, #20
   16178:	ea000003 	b	1618c <CUSBCDCEthernetDevice::Configure()+0x100>
   1617c:	e5d43003 	ldrb	r3, [r4, #3]
   16180:	e203303f 	and	r3, r3, #63	; 0x3f
   16184:	e3530002 	cmp	r3, #2
   16188:	0a00001c 	beq	16200 <CUSBCDCEthernetDevice::Configure()+0x174>
   1618c:	e1a01006 	mov	r1, r6
   16190:	e1a00005 	mov	r0, r5
   16194:	ebfff93e 	bl	14694 <CUSBFunction::GetDescriptor(unsigned char)>
   16198:	e2504000 	subs	r4, r0, #0
   1619c:	1afffff6 	bne	1617c <CUSBCDCEthernetDevice::Configure()+0xf0>
   161a0:	e5953010 	ldr	r3, [r5, #16]
   161a4:	e1a00005 	mov	r0, r5
   161a8:	e3530000 	cmp	r3, #0
   161ac:	0a000030 	beq	16274 <CUSBCDCEthernetDevice::Configure()+0x1e8>
   161b0:	e5953014 	ldr	r3, [r5, #20]
   161b4:	e3530000 	cmp	r3, #0
   161b8:	0a00002d 	beq	16274 <CUSBCDCEthernetDevice::Configure()+0x1e8>
   161bc:	ebfff903 	bl	145d0 <CUSBFunction::Configure()>
   161c0:	e2504000 	subs	r4, r0, #0
   161c4:	0a000024 	beq	1625c <CUSBCDCEthernetDevice::Configure()+0x1d0>
   161c8:	e1a00005 	mov	r0, r5
   161cc:	eb0009c6 	bl	188ec <CNetDevice::AddNetDevice()>
   161d0:	e28d0008 	add	r0, sp, #8
   161d4:	eb00212b 	bl	1e688 <CString::~CString()>
   161d8:	e1a00004 	mov	r0, r4
   161dc:	e28dd01c 	add	sp, sp, #28
   161e0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   161e4:	e1a04003 	mov	r4, r3
   161e8:	e1a00005 	mov	r0, r5
   161ec:	e59f10c8 	ldr	r1, [pc, #200]	; 162bc <CUSBCDCEthernetDevice::Configure()+0x230>
   161f0:	ebfff93a 	bl	146e0 <CUSBFunction::ConfigurationError(char const*) const>
   161f4:	e1a00004 	mov	r0, r4
   161f8:	e28dd01c 	add	sp, sp, #28
   161fc:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   16200:	e1d430d2 	ldrsb	r3, [r4, #2]
   16204:	e3530000 	cmp	r3, #0
   16208:	ba00001d 	blt	16284 <CUSBCDCEthernetDevice::Configure()+0x1f8>
   1620c:	e5953014 	ldr	r3, [r5, #20]
   16210:	e1a00005 	mov	r0, r5
   16214:	e3530000 	cmp	r3, #0
   16218:	1a000015 	bne	16274 <CUSBCDCEthernetDevice::Configure()+0x1e8>
   1621c:	ebfff8b9 	bl	14508 <CUSBFunction::GetDevice() const>
   16220:	e1a09000 	mov	r9, r0
   16224:	e1a00007 	mov	r0, r7
   16228:	eb002d5d 	bl	217a4 <operator new(unsigned int)>
   1622c:	e1a08000 	mov	r8, r0
   16230:	e1a02004 	mov	r2, r4
   16234:	e1a01009 	mov	r1, r9
   16238:	ebffdecc 	bl	dd70 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   1623c:	e5858014 	str	r8, [r5, #20]
   16240:	eaffffd1 	b	1618c <CUSBCDCEthernetDevice::Configure()+0x100>
   16244:	eb0019b5 	bl	1c920 <CLogger::Get()>
   16248:	e59f3074 	ldr	r3, [pc, #116]	; 162c4 <CUSBCDCEthernetDevice::Configure()+0x238>
   1624c:	e3a02001 	mov	r2, #1
   16250:	e59f1064 	ldr	r1, [pc, #100]	; 162bc <CUSBCDCEthernetDevice::Configure()+0x230>
   16254:	eb001b5a 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16258:	eaffff9b 	b	160cc <CUSBCDCEthernetDevice::Configure()+0x40>
   1625c:	eb0019af 	bl	1c920 <CLogger::Get()>
   16260:	e59f3060 	ldr	r3, [pc, #96]	; 162c8 <CUSBCDCEthernetDevice::Configure()+0x23c>
   16264:	e3a02001 	mov	r2, #1
   16268:	e59f104c 	ldr	r1, [pc, #76]	; 162bc <CUSBCDCEthernetDevice::Configure()+0x230>
   1626c:	eb001b54 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16270:	eaffffd6 	b	161d0 <CUSBCDCEthernetDevice::Configure()+0x144>
   16274:	e59f1040 	ldr	r1, [pc, #64]	; 162bc <CUSBCDCEthernetDevice::Configure()+0x230>
   16278:	ebfff918 	bl	146e0 <CUSBFunction::ConfigurationError(char const*) const>
   1627c:	e3a04000 	mov	r4, #0
   16280:	eaffffd2 	b	161d0 <CUSBCDCEthernetDevice::Configure()+0x144>
   16284:	e5953010 	ldr	r3, [r5, #16]
   16288:	e1a00005 	mov	r0, r5
   1628c:	e3530000 	cmp	r3, #0
   16290:	1afffff7 	bne	16274 <CUSBCDCEthernetDevice::Configure()+0x1e8>
   16294:	ebfff89b 	bl	14508 <CUSBFunction::GetDevice() const>
   16298:	e1a09000 	mov	r9, r0
   1629c:	e1a00007 	mov	r0, r7
   162a0:	eb002d3f 	bl	217a4 <operator new(unsigned int)>
   162a4:	e1a08000 	mov	r8, r0
   162a8:	e1a02004 	mov	r2, r4
   162ac:	e1a01009 	mov	r1, r9
   162b0:	ebffdeae 	bl	dd70 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   162b4:	e5858010 	str	r8, [r5, #16]
   162b8:	eaffffb3 	b	1618c <CUSBCDCEthernetDevice::Configure()+0x100>
   162bc:	00025268 	.word	0x00025268
   162c0:	00025310 	.word	0x00025310
   162c4:	000252f8 	.word	0x000252f8
   162c8:	000241a8 	.word	0x000241a8

000162cc <CNetDevice::IsLinkUp()>:
   162cc:	e3a00001 	mov	r0, #1
   162d0:	e12fff1e 	bx	lr

000162d4 <CNetDevice::GetLinkSpeed()>:
   162d4:	e3a00006 	mov	r0, #6
   162d8:	e12fff1e 	bx	lr

000162dc <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)>:
   162dc:	e3a03000 	mov	r3, #0
   162e0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   162e4:	e1a05002 	mov	r5, r2
   162e8:	e1510003 	cmp	r1, r3
   162ec:	e0812002 	add	r2, r1, r2
   162f0:	e5c03008 	strb	r3, [r0, #8]
   162f4:	e5803014 	str	r3, [r0, #20]
   162f8:	e1a04000 	mov	r4, r0
   162fc:	e8800022 	stm	r0, {r1, r5}
   16300:	e5801010 	str	r1, [r0, #16]
   16304:	e5801018 	str	r1, [r0, #24]
   16308:	e580200c 	str	r2, [r0, #12]
   1630c:	11a03005 	movne	r3, r5
   16310:	0a00003f 	beq	16414 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x138>
   16314:	e2433004 	sub	r3, r3, #4
   16318:	e3530f7f 	cmp	r3, #508	; 0x1fc
   1631c:	8a000003 	bhi	16330 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x54>
   16320:	e5943000 	ldr	r3, [r4]
   16324:	e5d32000 	ldrb	r2, [r3]
   16328:	e3520009 	cmp	r2, #9
   1632c:	0a000001 	beq	16338 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x5c>
   16330:	e1a00004 	mov	r0, r4
   16334:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   16338:	e5d32001 	ldrb	r2, [r3, #1]
   1633c:	e3520002 	cmp	r2, #2
   16340:	1afffffa 	bne	16330 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x54>
   16344:	e5d3c002 	ldrb	ip, [r3, #2]
   16348:	e5d32003 	ldrb	r2, [r3, #3]
   1634c:	e18cc402 	orr	ip, ip, r2, lsl #8
   16350:	e155000c 	cmp	r5, ip
   16354:	3afffff5 	bcc	16330 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x54>
   16358:	e3a05000 	mov	r5, #0
   1635c:	8083c00c 	addhi	ip, r3, ip
   16360:	9594c00c 	ldrls	ip, [r4, #12]
   16364:	8584c00c 	strhi	ip, [r4, #12]
   16368:	e3a06009 	mov	r6, #9
   1636c:	e1a0e005 	mov	lr, r5
   16370:	e3a08007 	mov	r8, #7
   16374:	e3a07001 	mov	r7, #1
   16378:	ea000005 	b	16394 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xb8>
   1637c:	e3520005 	cmp	r2, #5
   16380:	0a00001c 	beq	163f8 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x11c>
   16384:	e3520002 	cmp	r2, #2
   16388:	0a000016 	beq	163e8 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x10c>
   1638c:	e1a03001 	mov	r3, r1
   16390:	e1a0e002 	mov	lr, r2
   16394:	e2832002 	add	r2, r3, #2
   16398:	e15c0002 	cmp	ip, r2
   1639c:	9a000022 	bls	1642c <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x150>
   163a0:	e5d30000 	ldrb	r0, [r3]
   163a4:	e5d32001 	ldrb	r2, [r3, #1]
   163a8:	e0831000 	add	r1, r3, r0
   163ac:	e151000c 	cmp	r1, ip
   163b0:	8a00000a 	bhi	163e0 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x104>
   163b4:	e3520004 	cmp	r2, #4
   163b8:	1affffef 	bne	1637c <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xa0>
   163bc:	e35e0000 	cmp	lr, #0
   163c0:	0a000006 	beq	163e0 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x104>
   163c4:	e5d35005 	ldrb	r5, [r3, #5]
   163c8:	e1a0e006 	mov	lr, r6
   163cc:	e2455001 	sub	r5, r5, #1
   163d0:	e16f5f15 	clz	r5, r5
   163d4:	e1a052a5 	lsr	r5, r5, #5
   163d8:	e150000e 	cmp	r0, lr
   163dc:	0affffea 	beq	1638c <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xb0>
   163e0:	e5843018 	str	r3, [r4, #24]
   163e4:	eaffffd1 	b	16330 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x54>
   163e8:	e35e0000 	cmp	lr, #0
   163ec:	1afffffb 	bne	163e0 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x104>
   163f0:	e1a0e006 	mov	lr, r6
   163f4:	eafffff7 	b	163d8 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xfc>
   163f8:	e31e00fd 	tst	lr, #253	; 0xfd
   163fc:	0afffff7 	beq	163e0 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x104>
   16400:	e3550000 	cmp	r5, #0
   16404:	11a0e006 	movne	lr, r6
   16408:	11a05007 	movne	r5, r7
   1640c:	01a0e008 	moveq	lr, r8
   16410:	eafffff0 	b	163d8 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xfc>
   16414:	e3a02024 	mov	r2, #36	; 0x24
   16418:	e59f1020 	ldr	r1, [pc, #32]	; 16440 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x164>
   1641c:	e59f0020 	ldr	r0, [pc, #32]	; 16444 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x168>
   16420:	eb000f4b 	bl	1a154 <assertion_failed>
   16424:	e5943004 	ldr	r3, [r4, #4]
   16428:	eaffffb9 	b	16314 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x38>
   1642c:	e153000c 	cmp	r3, ip
   16430:	1affffea 	bne	163e0 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x104>
   16434:	e3a03001 	mov	r3, #1
   16438:	e5c43008 	strb	r3, [r4, #8]
   1643c:	eaffffbb 	b	16330 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x54>
   16440:	00025324 	.word	0x00025324
   16444:	00025338 	.word	0x00025338

00016448 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)>:
   16448:	e92d4070 	push	{r4, r5, r6, lr}
   1644c:	e2515000 	subs	r5, r1, #0
   16450:	e1a04000 	mov	r4, r0
   16454:	0a00000b 	beq	16488 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)+0x40>
   16458:	e8954040 	ldm	r5, {r6, lr}
   1645c:	e5d5c008 	ldrb	ip, [r5, #8]
   16460:	e285000c 	add	r0, r5, #12
   16464:	e890000f 	ldm	r0, {r0, r1, r2, r3}
   16468:	e8844040 	stm	r4, {r6, lr}
   1646c:	e584000c 	str	r0, [r4, #12]
   16470:	e5c4c008 	strb	ip, [r4, #8]
   16474:	e5841010 	str	r1, [r4, #16]
   16478:	e5842014 	str	r2, [r4, #20]
   1647c:	e5843018 	str	r3, [r4, #24]
   16480:	e1a00004 	mov	r0, r4
   16484:	e8bd8070 	pop	{r4, r5, r6, pc}
   16488:	e3a02082 	mov	r2, #130	; 0x82
   1648c:	e59f1008 	ldr	r1, [pc, #8]	; 1649c <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)+0x54>
   16490:	e59f0008 	ldr	r0, [pc, #8]	; 164a0 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)+0x58>
   16494:	eb000f2e 	bl	1a154 <assertion_failed>
   16498:	eaffffee 	b	16458 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)+0x10>
   1649c:	00025324 	.word	0x00025324
   164a0:	00025348 	.word	0x00025348

000164a4 <CUSBConfigurationParser::~CUSBConfigurationParser()>:
   164a4:	e12fff1e 	bx	lr

000164a8 <CUSBConfigurationParser::IsValid() const>:
   164a8:	e5d00008 	ldrb	r0, [r0, #8]
   164ac:	e12fff1e 	bx	lr

000164b0 <CUSBConfigurationParser::GetDescriptor(unsigned char)>:
   164b0:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   164b4:	e5d03008 	ldrb	r3, [r0, #8]
   164b8:	e1a06000 	mov	r6, r0
   164bc:	e3530000 	cmp	r3, #0
   164c0:	e1a07001 	mov	r7, r1
   164c4:	0a000029 	beq	16570 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xc0>
   164c8:	e5963010 	ldr	r3, [r6, #16]
   164cc:	e596200c 	ldr	r2, [r6, #12]
   164d0:	e1530002 	cmp	r3, r2
   164d4:	2a00001c 	bcs	1654c <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x9c>
   164d8:	e247b005 	sub	fp, r7, #5
   164dc:	e16fbf1b 	clz	fp, fp
   164e0:	e3a0a0a9 	mov	sl, #169	; 0xa9
   164e4:	e1a0b2ab 	lsr	fp, fp, #5
   164e8:	e59f9094 	ldr	r9, [pc, #148]	; 16584 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xd4>
   164ec:	e59f8094 	ldr	r8, [pc, #148]	; 16588 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xd8>
   164f0:	ea00000b 	b	16524 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x74>
   164f4:	e3550004 	cmp	r5, #4
   164f8:	13a03000 	movne	r3, #0
   164fc:	020b3001 	andeq	r3, fp, #1
   16500:	e3530000 	cmp	r3, #0
   16504:	1a000010 	bne	1654c <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x9c>
   16508:	e1550007 	cmp	r5, r7
   1650c:	0a000011 	beq	16558 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xa8>
   16510:	e596200c 	ldr	r2, [r6, #12]
   16514:	e1a03004 	mov	r3, r4
   16518:	e1520004 	cmp	r2, r4
   1651c:	e5864010 	str	r4, [r6, #16]
   16520:	9a000009 	bls	1654c <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x9c>
   16524:	e5d34000 	ldrb	r4, [r3]
   16528:	e5d35001 	ldrb	r5, [r3, #1]
   1652c:	e0834004 	add	r4, r3, r4
   16530:	e1540002 	cmp	r4, r2
   16534:	9affffee 	bls	164f4 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x44>
   16538:	e1a0200a 	mov	r2, sl
   1653c:	e1a01009 	mov	r1, r9
   16540:	e1a00008 	mov	r0, r8
   16544:	eb000f02 	bl	1a154 <assertion_failed>
   16548:	eaffffe9 	b	164f4 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x44>
   1654c:	e3a00000 	mov	r0, #0
   16550:	e5860014 	str	r0, [r6, #20]
   16554:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16558:	e5960010 	ldr	r0, [r6, #16]
   1655c:	e5864010 	str	r4, [r6, #16]
   16560:	e3500000 	cmp	r0, #0
   16564:	15860018 	strne	r0, [r6, #24]
   16568:	e5860014 	str	r0, [r6, #20]
   1656c:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16570:	e3a0209f 	mov	r2, #159	; 0x9f
   16574:	e59f1008 	ldr	r1, [pc, #8]	; 16584 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xd4>
   16578:	e59f000c 	ldr	r0, [pc, #12]	; 1658c <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xdc>
   1657c:	eb000ef4 	bl	1a154 <assertion_failed>
   16580:	eaffffd0 	b	164c8 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x18>
   16584:	00025324 	.word	0x00025324
   16588:	00025358 	.word	0x00025358
   1658c:	00023658 	.word	0x00023658

00016590 <CUSBConfigurationParser::GetCurrentDescriptor()>:
   16590:	e5d03008 	ldrb	r3, [r0, #8]
   16594:	e92d4010 	push	{r4, lr}
   16598:	e3530000 	cmp	r3, #0
   1659c:	e1a04000 	mov	r4, r0
   165a0:	0a000008 	beq	165c8 <CUSBConfigurationParser::GetCurrentDescriptor()+0x38>
   165a4:	e5940014 	ldr	r0, [r4, #20]
   165a8:	e3500000 	cmp	r0, #0
   165ac:	18bd8010 	popne	{r4, pc}
   165b0:	e3a020c8 	mov	r2, #200	; 0xc8
   165b4:	e59f1020 	ldr	r1, [pc, #32]	; 165dc <CUSBConfigurationParser::GetCurrentDescriptor()+0x4c>
   165b8:	e59f0020 	ldr	r0, [pc, #32]	; 165e0 <CUSBConfigurationParser::GetCurrentDescriptor()+0x50>
   165bc:	eb000ee4 	bl	1a154 <assertion_failed>
   165c0:	e5940014 	ldr	r0, [r4, #20]
   165c4:	e8bd8010 	pop	{r4, pc}
   165c8:	e3a020c7 	mov	r2, #199	; 0xc7
   165cc:	e59f1008 	ldr	r1, [pc, #8]	; 165dc <CUSBConfigurationParser::GetCurrentDescriptor()+0x4c>
   165d0:	e59f000c 	ldr	r0, [pc, #12]	; 165e4 <CUSBConfigurationParser::GetCurrentDescriptor()+0x54>
   165d4:	eb000ede 	bl	1a154 <assertion_failed>
   165d8:	eafffff1 	b	165a4 <CUSBConfigurationParser::GetCurrentDescriptor()+0x14>
   165dc:	00025324 	.word	0x00025324
   165e0:	00025374 	.word	0x00025374
   165e4:	00023658 	.word	0x00023658

000165e8 <CUSBConfigurationParser::Error(char const*) const>:
   165e8:	e92d4030 	push	{r4, r5, lr}
   165ec:	e2515000 	subs	r5, r1, #0
   165f0:	e24dd00c 	sub	sp, sp, #12
   165f4:	e1a04000 	mov	r4, r0
   165f8:	0a00000d 	beq	16634 <CUSBConfigurationParser::Error(char const*) const+0x4c>
   165fc:	eb0018c7 	bl	1c920 <CLogger::Get()>
   16600:	e5941000 	ldr	r1, [r4]
   16604:	e5942018 	ldr	r2, [r4, #24]
   16608:	e59f3038 	ldr	r3, [pc, #56]	; 16648 <CUSBConfigurationParser::Error(char const*) const+0x60>
   1660c:	e0422001 	sub	r2, r2, r1
   16610:	e58d2000 	str	r2, [sp]
   16614:	e1a01005 	mov	r1, r5
   16618:	e3a02001 	mov	r2, #1
   1661c:	eb001a68 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16620:	e8940003 	ldm	r4, {r0, r1}
   16624:	e1a02005 	mov	r2, r5
   16628:	e28dd00c 	add	sp, sp, #12
   1662c:	e8bd4030 	pop	{r4, r5, lr}
   16630:	ea001054 	b	1a788 <debug_hexdump(void const*, unsigned int, char const*)>
   16634:	e3a020cf 	mov	r2, #207	; 0xcf
   16638:	e59f100c 	ldr	r1, [pc, #12]	; 1664c <CUSBConfigurationParser::Error(char const*) const+0x64>
   1663c:	e59f000c 	ldr	r0, [pc, #12]	; 16650 <CUSBConfigurationParser::Error(char const*) const+0x68>
   16640:	eb000ec3 	bl	1a154 <assertion_failed>
   16644:	eaffffec 	b	165fc <CUSBConfigurationParser::Error(char const*) const+0x14>
   16648:	00025390 	.word	0x00025390
   1664c:	00025324 	.word	0x00025324
   16650:	00024f10 	.word	0x00024f10

00016654 <CUSBString::CUSBString(CUSBDevice*)>:
   16654:	e3a03000 	mov	r3, #0
   16658:	e92d4070 	push	{r4, r5, r6, lr}
   1665c:	e880000a 	stm	r0, {r1, r3}
   16660:	e1a04000 	mov	r4, r0
   16664:	e3a00010 	mov	r0, #16
   16668:	eb002c4d 	bl	217a4 <operator new(unsigned int)>
   1666c:	e1a05000 	mov	r5, r0
   16670:	eb002037 	bl	1e754 <CString::CString()>
   16674:	e5943000 	ldr	r3, [r4]
   16678:	e5845008 	str	r5, [r4, #8]
   1667c:	e3530000 	cmp	r3, #0
   16680:	0a000001 	beq	1668c <CUSBString::CUSBString(CUSBDevice*)+0x38>
   16684:	e1a00004 	mov	r0, r4
   16688:	e8bd8070 	pop	{r4, r5, r6, pc}
   1668c:	e3a02023 	mov	r2, #35	; 0x23
   16690:	e59f1028 	ldr	r1, [pc, #40]	; 166c0 <CUSBString::CUSBString(CUSBDevice*)+0x6c>
   16694:	e59f0028 	ldr	r0, [pc, #40]	; 166c4 <CUSBString::CUSBString(CUSBDevice*)+0x70>
   16698:	eb000ead 	bl	1a154 <assertion_failed>
   1669c:	e5943008 	ldr	r3, [r4, #8]
   166a0:	e3530000 	cmp	r3, #0
   166a4:	1afffff6 	bne	16684 <CUSBString::CUSBString(CUSBDevice*)+0x30>
   166a8:	e3a02024 	mov	r2, #36	; 0x24
   166ac:	e59f100c 	ldr	r1, [pc, #12]	; 166c0 <CUSBString::CUSBString(CUSBDevice*)+0x6c>
   166b0:	e59f0010 	ldr	r0, [pc, #16]	; 166c8 <CUSBString::CUSBString(CUSBDevice*)+0x74>
   166b4:	eb000ea6 	bl	1a154 <assertion_failed>
   166b8:	e1a00004 	mov	r0, r4
   166bc:	e8bd8070 	pop	{r4, r5, r6, pc}
   166c0:	000253c0 	.word	0x000253c0
   166c4:	00023794 	.word	0x00023794
   166c8:	000253d0 	.word	0x000253d0

000166cc <CUSBString::CUSBString(CUSBString*)>:
   166cc:	e3a03000 	mov	r3, #0
   166d0:	e92d4070 	push	{r4, r5, r6, lr}
   166d4:	e5803004 	str	r3, [r0, #4]
   166d8:	e1a04000 	mov	r4, r0
   166dc:	e3a00010 	mov	r0, #16
   166e0:	e1a05001 	mov	r5, r1
   166e4:	eb002c2e 	bl	217a4 <operator new(unsigned int)>
   166e8:	e1a06000 	mov	r6, r0
   166ec:	eb002018 	bl	1e754 <CString::CString()>
   166f0:	e3550000 	cmp	r5, #0
   166f4:	e5846008 	str	r6, [r4, #8]
   166f8:	0a000018 	beq	16760 <CUSBString::CUSBString(CUSBString*)+0x94>
   166fc:	e895000c 	ldm	r5, {r2, r3}
   16700:	e3530000 	cmp	r3, #0
   16704:	e5842000 	str	r2, [r4]
   16708:	0a000005 	beq	16724 <CUSBString::CUSBString(CUSBString*)+0x58>
   1670c:	e5d30000 	ldrb	r0, [r3]
   16710:	eb002c24 	bl	217a8 <operator new[](unsigned int)>
   16714:	e5840004 	str	r0, [r4, #4]
   16718:	e5951004 	ldr	r1, [r5, #4]
   1671c:	e5d12000 	ldrb	r2, [r1]
   16720:	eb002923 	bl	20bb4 <memcpy>
   16724:	e5943008 	ldr	r3, [r4, #8]
   16728:	e3530000 	cmp	r3, #0
   1672c:	0a000010 	beq	16774 <CUSBString::CUSBString(CUSBString*)+0xa8>
   16730:	e5953008 	ldr	r3, [r5, #8]
   16734:	e3530000 	cmp	r3, #0
   16738:	0a000002 	beq	16748 <CUSBString::CUSBString(CUSBString*)+0x7c>
   1673c:	e5843008 	str	r3, [r4, #8]
   16740:	e1a00004 	mov	r0, r4
   16744:	e8bd8070 	pop	{r4, r5, r6, pc}
   16748:	e3a02036 	mov	r2, #54	; 0x36
   1674c:	e59f1034 	ldr	r1, [pc, #52]	; 16788 <CUSBString::CUSBString(CUSBString*)+0xbc>
   16750:	e59f0034 	ldr	r0, [pc, #52]	; 1678c <CUSBString::CUSBString(CUSBString*)+0xc0>
   16754:	eb000e7e 	bl	1a154 <assertion_failed>
   16758:	e5953008 	ldr	r3, [r5, #8]
   1675c:	eafffff6 	b	1673c <CUSBString::CUSBString(CUSBString*)+0x70>
   16760:	e3a0202b 	mov	r2, #43	; 0x2b
   16764:	e59f101c 	ldr	r1, [pc, #28]	; 16788 <CUSBString::CUSBString(CUSBString*)+0xbc>
   16768:	e59f0020 	ldr	r0, [pc, #32]	; 16790 <CUSBString::CUSBString(CUSBString*)+0xc4>
   1676c:	eb000e78 	bl	1a154 <assertion_failed>
   16770:	eaffffe1 	b	166fc <CUSBString::CUSBString(CUSBString*)+0x30>
   16774:	e3a02035 	mov	r2, #53	; 0x35
   16778:	e59f1008 	ldr	r1, [pc, #8]	; 16788 <CUSBString::CUSBString(CUSBString*)+0xbc>
   1677c:	e59f0010 	ldr	r0, [pc, #16]	; 16794 <CUSBString::CUSBString(CUSBString*)+0xc8>
   16780:	eb000e73 	bl	1a154 <assertion_failed>
   16784:	eaffffe9 	b	16730 <CUSBString::CUSBString(CUSBString*)+0x64>
   16788:	000253c0 	.word	0x000253c0
   1678c:	000253e0 	.word	0x000253e0
   16790:	00023e70 	.word	0x00023e70
   16794:	000253d0 	.word	0x000253d0

00016798 <CUSBString::~CUSBString()>:
   16798:	e92d4010 	push	{r4, lr}
   1679c:	e1a04000 	mov	r4, r0
   167a0:	e5900008 	ldr	r0, [r0, #8]
   167a4:	e3500000 	cmp	r0, #0
   167a8:	0a000002 	beq	167b8 <CUSBString::~CUSBString()+0x20>
   167ac:	e5903000 	ldr	r3, [r0]
   167b0:	e5933004 	ldr	r3, [r3, #4]
   167b4:	e12fff33 	blx	r3
   167b8:	e3a03000 	mov	r3, #0
   167bc:	e5940004 	ldr	r0, [r4, #4]
   167c0:	e5843008 	str	r3, [r4, #8]
   167c4:	e1500003 	cmp	r0, r3
   167c8:	0a000000 	beq	167d0 <CUSBString::~CUSBString()+0x38>
   167cc:	eb002bf7 	bl	217b0 <operator delete[](void*)>
   167d0:	e1a00004 	mov	r0, r4
   167d4:	e8bd8010 	pop	{r4, pc}

000167d8 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)>:
   167d8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   167dc:	e2516000 	subs	r6, r1, #0
   167e0:	e28db020 	add	fp, sp, #32
   167e4:	e24dd01c 	sub	sp, sp, #28
   167e8:	e1a04000 	mov	r4, r0
   167ec:	e1a07002 	mov	r7, r2
   167f0:	0a000054 	beq	16948 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x170>
   167f4:	e5940004 	ldr	r0, [r4, #4]
   167f8:	e3500000 	cmp	r0, #0
   167fc:	0a000000 	beq	16804 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x2c>
   16800:	eb002bea 	bl	217b0 <operator delete[](void*)>
   16804:	e3a00004 	mov	r0, #4
   16808:	eb002be6 	bl	217a8 <operator new[](unsigned int)>
   1680c:	e5840004 	str	r0, [r4, #4]
   16810:	e5940000 	ldr	r0, [r4]
   16814:	e3500000 	cmp	r0, #0
   16818:	0a00004f 	beq	1695c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x184>
   1681c:	ebffdaa3 	bl	d2b0 <CUSBDevice::GetHost() const>
   16820:	e1a05000 	mov	r5, r0
   16824:	e5940000 	ldr	r0, [r4]
   16828:	ebffda8f 	bl	d26c <CUSBDevice::GetEndpoint0() const>
   1682c:	e3a08080 	mov	r8, #128	; 0x80
   16830:	e3a02004 	mov	r2, #4
   16834:	e5943004 	ldr	r3, [r4, #4]
   16838:	e1a01000 	mov	r1, r0
   1683c:	e98d0104 	stmib	sp, {r2, r8}
   16840:	e58d3000 	str	r3, [sp]
   16844:	e58d700c 	str	r7, [sp, #12]
   16848:	e1a00005 	mov	r0, r5
   1684c:	e1a03006 	mov	r3, r6
   16850:	e3a02003 	mov	r2, #3
   16854:	ebffde8d 	bl	e290 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   16858:	e3500000 	cmp	r0, #0
   1685c:	ba000009 	blt	16888 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xb0>
   16860:	e5940004 	ldr	r0, [r4, #4]
   16864:	e5d05000 	ldrb	r5, [r0]
   16868:	e3550001 	cmp	r5, #1
   1686c:	e1a03005 	mov	r3, r5
   16870:	da000004 	ble	16888 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xb0>
   16874:	e2159001 	ands	r9, r5, #1
   16878:	1a000002 	bne	16888 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xb0>
   1687c:	e5d0a001 	ldrb	sl, [r0, #1]
   16880:	e35a0003 	cmp	sl, #3
   16884:	0a000002 	beq	16894 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xbc>
   16888:	e3a00000 	mov	r0, #0
   1688c:	e24bd020 	sub	sp, fp, #32
   16890:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16894:	e3550004 	cmp	r5, #4
   16898:	ca000035 	bgt	16974 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x19c>
   1689c:	e3550002 	cmp	r5, #2
   168a0:	0a000064 	beq	16a38 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x260>
   168a4:	e2435002 	sub	r5, r3, #2
   168a8:	e0855fa5 	add	r5, r5, r5, lsr #31
   168ac:	e1a060c5 	asr	r6, r5, #1
   168b0:	e356007e 	cmp	r6, #126	; 0x7e
   168b4:	8a000055 	bhi	16a10 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x238>
   168b8:	e2863008 	add	r3, r6, #8
   168bc:	e3c33007 	bic	r3, r3, #7
   168c0:	e04dd003 	sub	sp, sp, r3
   168c4:	e3560000 	cmp	r6, #0
   168c8:	e28d7010 	add	r7, sp, #16
   168cc:	0a00000c 	beq	16904 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x12c>
   168d0:	e3a02000 	mov	r2, #0
   168d4:	e247e001 	sub	lr, r7, #1
   168d8:	e080c082 	add	ip, r0, r2, lsl #1
   168dc:	e5dc1003 	ldrb	r1, [ip, #3]
   168e0:	e5dc3002 	ldrb	r3, [ip, #2]
   168e4:	e2822001 	add	r2, r2, #1
   168e8:	e1833401 	orr	r3, r3, r1, lsl #8
   168ec:	e2431020 	sub	r1, r3, #32
   168f0:	e351005e 	cmp	r1, #94	; 0x5e
   168f4:	83a0305f 	movhi	r3, #95	; 0x5f
   168f8:	e1560002 	cmp	r6, r2
   168fc:	e5ee3001 	strb	r3, [lr, #1]!
   16900:	1afffff4 	bne	168d8 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x100>
   16904:	e3a03000 	mov	r3, #0
   16908:	e5940008 	ldr	r0, [r4, #8]
   1690c:	e7c730c5 	strb	r3, [r7, r5, asr #1]
   16910:	e1500003 	cmp	r0, r3
   16914:	0a000002 	beq	16924 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x14c>
   16918:	e5903000 	ldr	r3, [r0]
   1691c:	e5933004 	ldr	r3, [r3, #4]
   16920:	e12fff33 	blx	r3
   16924:	e3a00010 	mov	r0, #16
   16928:	eb002b9d 	bl	217a4 <operator new(unsigned int)>
   1692c:	e1a01007 	mov	r1, r7
   16930:	e1a05000 	mov	r5, r0
   16934:	eb001f8c 	bl	1e76c <CString::CString(char const*)>
   16938:	e3a00001 	mov	r0, #1
   1693c:	e5845008 	str	r5, [r4, #8]
   16940:	e24bd020 	sub	sp, fp, #32
   16944:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16948:	e3a02047 	mov	r2, #71	; 0x47
   1694c:	e59f1104 	ldr	r1, [pc, #260]	; 16a58 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x280>
   16950:	e59f0104 	ldr	r0, [pc, #260]	; 16a5c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x284>
   16954:	eb000dfe 	bl	1a154 <assertion_failed>
   16958:	eaffffa5 	b	167f4 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x1c>
   1695c:	e59f00fc 	ldr	r0, [pc, #252]	; 16a60 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x288>
   16960:	e3a0204d 	mov	r2, #77	; 0x4d
   16964:	e59f10ec 	ldr	r1, [pc, #236]	; 16a58 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x280>
   16968:	eb000df9 	bl	1a154 <assertion_failed>
   1696c:	e5940000 	ldr	r0, [r4]
   16970:	eaffffa9 	b	1681c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x44>
   16974:	e3a01002 	mov	r1, #2
   16978:	eb002b8d 	bl	217b4 <operator delete(void*, unsigned int)>
   1697c:	e1a00005 	mov	r0, r5
   16980:	eb002b88 	bl	217a8 <operator new[](unsigned int)>
   16984:	e5840004 	str	r0, [r4, #4]
   16988:	e5940000 	ldr	r0, [r4]
   1698c:	ebffda47 	bl	d2b0 <CUSBDevice::GetHost() const>
   16990:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
   16994:	e5940000 	ldr	r0, [r4]
   16998:	ebffda33 	bl	d26c <CUSBDevice::GetEndpoint0() const>
   1699c:	e594c004 	ldr	ip, [r4, #4]
   169a0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   169a4:	e1a01000 	mov	r1, r0
   169a8:	e58d700c 	str	r7, [sp, #12]
   169ac:	e1a00003 	mov	r0, r3
   169b0:	e98d0120 	stmib	sp, {r5, r8}
   169b4:	e1a03006 	mov	r3, r6
   169b8:	e1a0200a 	mov	r2, sl
   169bc:	e58dc000 	str	ip, [sp]
   169c0:	ebffde32 	bl	e290 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   169c4:	e1550000 	cmp	r5, r0
   169c8:	1affffae 	bne	16888 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xb0>
   169cc:	e5940004 	ldr	r0, [r4, #4]
   169d0:	e5d03000 	ldrb	r3, [r0]
   169d4:	e1530005 	cmp	r3, r5
   169d8:	1affffaa 	bne	16888 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xb0>
   169dc:	e5d03001 	ldrb	r3, [r0, #1]
   169e0:	e3530003 	cmp	r3, #3
   169e4:	1affffa7 	bne	16888 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xb0>
   169e8:	e3590000 	cmp	r9, #0
   169ec:	01a03005 	moveq	r3, r5
   169f0:	0affffab 	beq	168a4 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xcc>
   169f4:	e59f0068 	ldr	r0, [pc, #104]	; 16a64 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x28c>
   169f8:	e3a02076 	mov	r2, #118	; 0x76
   169fc:	e59f1054 	ldr	r1, [pc, #84]	; 16a58 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x280>
   16a00:	eb000dd3 	bl	1a154 <assertion_failed>
   16a04:	e5940004 	ldr	r0, [r4, #4]
   16a08:	e5d03000 	ldrb	r3, [r0]
   16a0c:	eaffffa4 	b	168a4 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xcc>
   16a10:	e59f0050 	ldr	r0, [pc, #80]	; 16a68 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x290>
   16a14:	e3a02079 	mov	r2, #121	; 0x79
   16a18:	e59f1038 	ldr	r1, [pc, #56]	; 16a58 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x280>
   16a1c:	eb000dcc 	bl	1a154 <assertion_failed>
   16a20:	e2863008 	add	r3, r6, #8
   16a24:	e3c33007 	bic	r3, r3, #7
   16a28:	e04dd003 	sub	sp, sp, r3
   16a2c:	e28d7010 	add	r7, sp, #16
   16a30:	e5940004 	ldr	r0, [r4, #4]
   16a34:	eaffffa5 	b	168d0 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xf8>
   16a38:	e59f002c 	ldr	r0, [pc, #44]	; 16a6c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x294>
   16a3c:	e3a02075 	mov	r2, #117	; 0x75
   16a40:	e59f1010 	ldr	r1, [pc, #16]	; 16a58 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x280>
   16a44:	eb000dc2 	bl	1a154 <assertion_failed>
   16a48:	e5940004 	ldr	r0, [r4, #4]
   16a4c:	e5d05000 	ldrb	r5, [r0]
   16a50:	e2059001 	and	r9, r5, #1
   16a54:	eaffffe3 	b	169e8 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x210>
   16a58:	000253c0 	.word	0x000253c0
   16a5c:	000253f8 	.word	0x000253f8
   16a60:	00023794 	.word	0x00023794
   16a64:	00025420 	.word	0x00025420
   16a68:	00025444 	.word	0x00025444
   16a6c:	00025404 	.word	0x00025404

00016a70 <CUSBString::Get() const>:
   16a70:	e5900008 	ldr	r0, [r0, #8]
   16a74:	ea001f4c 	b	1e7ac <CString::operator char const*() const>

00016a78 <CUSBString::GetLanguageID()>:
   16a78:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16a7c:	e1a05000 	mov	r5, r0
   16a80:	e24dd010 	sub	sp, sp, #16
   16a84:	e3a00004 	mov	r0, #4
   16a88:	eb002b46 	bl	217a8 <operator new[](unsigned int)>
   16a8c:	e1a04000 	mov	r4, r0
   16a90:	e5950000 	ldr	r0, [r5]
   16a94:	e3500000 	cmp	r0, #0
   16a98:	0a000035 	beq	16b74 <CUSBString::GetLanguageID()+0xfc>
   16a9c:	ebffda03 	bl	d2b0 <CUSBDevice::GetHost() const>
   16aa0:	e1a06000 	mov	r6, r0
   16aa4:	e5950000 	ldr	r0, [r5]
   16aa8:	ebffd9ef 	bl	d26c <CUSBDevice::GetEndpoint0() const>
   16aac:	e3a07080 	mov	r7, #128	; 0x80
   16ab0:	e3a03000 	mov	r3, #0
   16ab4:	e3a02004 	mov	r2, #4
   16ab8:	e1a01000 	mov	r1, r0
   16abc:	e98d0084 	stmib	sp, {r2, r7}
   16ac0:	e58d4000 	str	r4, [sp]
   16ac4:	e1a00006 	mov	r0, r6
   16ac8:	e58d300c 	str	r3, [sp, #12]
   16acc:	e3a02003 	mov	r2, #3
   16ad0:	ebffddee 	bl	e290 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   16ad4:	e3500000 	cmp	r0, #0
   16ad8:	ba000002 	blt	16ae8 <CUSBString::GetLanguageID()+0x70>
   16adc:	e5d46000 	ldrb	r6, [r4]
   16ae0:	e3560003 	cmp	r6, #3
   16ae4:	ca000005 	bgt	16b00 <CUSBString::GetLanguageID()+0x88>
   16ae8:	e1a00004 	mov	r0, r4
   16aec:	eb002b2f 	bl	217b0 <operator delete[](void*)>
   16af0:	e59f5100 	ldr	r5, [pc, #256]	; 16bf8 <CUSBString::GetLanguageID()+0x180>
   16af4:	e1a00005 	mov	r0, r5
   16af8:	e28dd010 	add	sp, sp, #16
   16afc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16b00:	e2168001 	ands	r8, r6, #1
   16b04:	1afffff7 	bne	16ae8 <CUSBString::GetLanguageID()+0x70>
   16b08:	e5d49001 	ldrb	r9, [r4, #1]
   16b0c:	e3590003 	cmp	r9, #3
   16b10:	1afffff4 	bne	16ae8 <CUSBString::GetLanguageID()+0x70>
   16b14:	e3560004 	cmp	r6, #4
   16b18:	1a00001b 	bne	16b8c <CUSBString::GetLanguageID()+0x114>
   16b1c:	e5d45002 	ldrb	r5, [r4, #2]
   16b20:	e5d43003 	ldrb	r3, [r4, #3]
   16b24:	e59f00cc 	ldr	r0, [pc, #204]	; 16bf8 <CUSBString::GetLanguageID()+0x180>
   16b28:	e1855403 	orr	r5, r5, r3, lsl #8
   16b2c:	e2466002 	sub	r6, r6, #2
   16b30:	e1550000 	cmp	r5, r0
   16b34:	e1a060c6 	asr	r6, r6, #1
   16b38:	0affffea 	beq	16ae8 <CUSBString::GetLanguageID()+0x70>
   16b3c:	e3a03000 	mov	r3, #0
   16b40:	ea000004 	b	16b58 <CUSBString::GetLanguageID()+0xe0>
   16b44:	e5d12002 	ldrb	r2, [r1, #2]
   16b48:	e5d11003 	ldrb	r1, [r1, #3]
   16b4c:	e1822401 	orr	r2, r2, r1, lsl #8
   16b50:	e1520000 	cmp	r2, r0
   16b54:	0affffe3 	beq	16ae8 <CUSBString::GetLanguageID()+0x70>
   16b58:	e2833001 	add	r3, r3, #1
   16b5c:	e1560003 	cmp	r6, r3
   16b60:	e0841083 	add	r1, r4, r3, lsl #1
   16b64:	1afffff6 	bne	16b44 <CUSBString::GetLanguageID()+0xcc>
   16b68:	e1a00004 	mov	r0, r4
   16b6c:	eb002b0f 	bl	217b0 <operator delete[](void*)>
   16b70:	eaffffdf 	b	16af4 <CUSBString::GetLanguageID()+0x7c>
   16b74:	e59f0080 	ldr	r0, [pc, #128]	; 16bfc <CUSBString::GetLanguageID()+0x184>
   16b78:	e3a0209a 	mov	r2, #154	; 0x9a
   16b7c:	e59f107c 	ldr	r1, [pc, #124]	; 16c00 <CUSBString::GetLanguageID()+0x188>
   16b80:	eb000d73 	bl	1a154 <assertion_failed>
   16b84:	e5950000 	ldr	r0, [r5]
   16b88:	eaffffc3 	b	16a9c <CUSBString::GetLanguageID()+0x24>
   16b8c:	e1a00004 	mov	r0, r4
   16b90:	eb002b06 	bl	217b0 <operator delete[](void*)>
   16b94:	e1a00006 	mov	r0, r6
   16b98:	eb002b02 	bl	217a8 <operator new[](unsigned int)>
   16b9c:	e1a04000 	mov	r4, r0
   16ba0:	e5950000 	ldr	r0, [r5]
   16ba4:	ebffd9c1 	bl	d2b0 <CUSBDevice::GetHost() const>
   16ba8:	e1a0a000 	mov	sl, r0
   16bac:	e5950000 	ldr	r0, [r5]
   16bb0:	ebffd9ad 	bl	d26c <CUSBDevice::GetEndpoint0() const>
   16bb4:	e58d4000 	str	r4, [sp]
   16bb8:	e1a01000 	mov	r1, r0
   16bbc:	e58d800c 	str	r8, [sp, #12]
   16bc0:	e1a0000a 	mov	r0, sl
   16bc4:	e98d00c0 	stmib	sp, {r6, r7}
   16bc8:	e1a03008 	mov	r3, r8
   16bcc:	e1a02009 	mov	r2, r9
   16bd0:	ebffddae 	bl	e290 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   16bd4:	e1560000 	cmp	r6, r0
   16bd8:	1affffc2 	bne	16ae8 <CUSBString::GetLanguageID()+0x70>
   16bdc:	e5d43000 	ldrb	r3, [r4]
   16be0:	e1530006 	cmp	r3, r6
   16be4:	1affffbf 	bne	16ae8 <CUSBString::GetLanguageID()+0x70>
   16be8:	e5d43001 	ldrb	r3, [r4, #1]
   16bec:	e3530003 	cmp	r3, #3
   16bf0:	1affffbc 	bne	16ae8 <CUSBString::GetLanguageID()+0x70>
   16bf4:	eaffffc8 	b	16b1c <CUSBString::GetLanguageID()+0xa4>
   16bf8:	00000409 	.word	0x00000409
   16bfc:	00023794 	.word	0x00023794
   16c00:	000253c0 	.word	0x000253c0

00016c04 <CSMSC951xDevice::GetMACAddress() const>:
   16c04:	e2800018 	add	r0, r0, #24
   16c08:	e12fff1e 	bx	lr

00016c0c <CSMSC951xDevice::~CSMSC951xDevice()>:
   16c0c:	e92d4070 	push	{r4, r5, r6, lr}
   16c10:	e5905014 	ldr	r5, [r0, #20]
   16c14:	e59f3068 	ldr	r3, [pc, #104]	; 16c84 <CSMSC951xDevice::~CSMSC951xDevice()+0x78>
   16c18:	e3550000 	cmp	r5, #0
   16c1c:	e1a04000 	mov	r4, r0
   16c20:	e5803000 	str	r3, [r0]
   16c24:	0a000004 	beq	16c3c <CSMSC951xDevice::~CSMSC951xDevice()+0x30>
   16c28:	e1a00005 	mov	r0, r5
   16c2c:	ebffdce1 	bl	dfb8 <CUSBEndpoint::~CUSBEndpoint()>
   16c30:	e1a00005 	mov	r0, r5
   16c34:	e3a01014 	mov	r1, #20
   16c38:	eb002add 	bl	217b4 <operator delete(void*, unsigned int)>
   16c3c:	e3a03000 	mov	r3, #0
   16c40:	e5945010 	ldr	r5, [r4, #16]
   16c44:	e5843014 	str	r3, [r4, #20]
   16c48:	e1550003 	cmp	r5, r3
   16c4c:	0a000004 	beq	16c64 <CSMSC951xDevice::~CSMSC951xDevice()+0x58>
   16c50:	e1a00005 	mov	r0, r5
   16c54:	ebffdcd7 	bl	dfb8 <CUSBEndpoint::~CUSBEndpoint()>
   16c58:	e1a00005 	mov	r0, r5
   16c5c:	e3a01014 	mov	r1, #20
   16c60:	eb002ad3 	bl	217b4 <operator delete(void*, unsigned int)>
   16c64:	e3a03000 	mov	r3, #0
   16c68:	e2840018 	add	r0, r4, #24
   16c6c:	e5843010 	str	r3, [r4, #16]
   16c70:	eb000653 	bl	185c4 <CMACAddress::~CMACAddress()>
   16c74:	e1a00004 	mov	r0, r4
   16c78:	eb000701 	bl	18884 <CNetDevice::~CNetDevice()>
   16c7c:	e1a00004 	mov	r0, r4
   16c80:	e8bd8070 	pop	{r4, r5, r6, pc}
   16c84:	00025464 	.word	0x00025464

00016c88 <CSMSC951xDevice::~CSMSC951xDevice()>:
   16c88:	e92d4010 	push	{r4, lr}
   16c8c:	e1a04000 	mov	r4, r0
   16c90:	ebffffdd 	bl	16c0c <CSMSC951xDevice::~CSMSC951xDevice()>
   16c94:	e1a00004 	mov	r0, r4
   16c98:	e3a01020 	mov	r1, #32
   16c9c:	eb002ac4 	bl	217b4 <operator delete(void*, unsigned int)>
   16ca0:	e1a00004 	mov	r0, r4
   16ca4:	e8bd8010 	pop	{r4, pc}

00016ca8 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)>:
   16ca8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   16cac:	e5903010 	ldr	r3, [r0, #16]
   16cb0:	e24dd030 	sub	sp, sp, #48	; 0x30
   16cb4:	e3530000 	cmp	r3, #0
   16cb8:	e1a04000 	mov	r4, r0
   16cbc:	e1a05001 	mov	r5, r1
   16cc0:	e1a07002 	mov	r7, r2
   16cc4:	0a000034 	beq	16d9c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0xf4>
   16cc8:	e3550000 	cmp	r5, #0
   16ccc:	0a000037 	beq	16db0 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x108>
   16cd0:	e3a06000 	mov	r6, #0
   16cd4:	e5941010 	ldr	r1, [r4, #16]
   16cd8:	e3a03d19 	mov	r3, #1600	; 0x640
   16cdc:	e1a02005 	mov	r2, r5
   16ce0:	e58d6000 	str	r6, [sp]
   16ce4:	e28d0008 	add	r0, sp, #8
   16ce8:	ebffddb5 	bl	e3c4 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   16cec:	e1a00004 	mov	r0, r4
   16cf0:	ebfff625 	bl	1458c <CUSBFunction::GetHost() const>
   16cf4:	e5903000 	ldr	r3, [r0]
   16cf8:	e1a02006 	mov	r2, r6
   16cfc:	e5933008 	ldr	r3, [r3, #8]
   16d00:	e28d1008 	add	r1, sp, #8
   16d04:	e12fff33 	blx	r3
   16d08:	e2504000 	subs	r4, r0, #0
   16d0c:	1a000005 	bne	16d28 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x80>
   16d10:	e3a04000 	mov	r4, #0
   16d14:	e28d0008 	add	r0, sp, #8
   16d18:	ebffddce 	bl	e458 <CUSBRequest::~CUSBRequest()>
   16d1c:	e1a00004 	mov	r0, r4
   16d20:	e28dd030 	add	sp, sp, #48	; 0x30
   16d24:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   16d28:	e28d0008 	add	r0, sp, #8
   16d2c:	ebffdde0 	bl	e4b4 <CUSBRequest::GetResultLength() const>
   16d30:	e3500003 	cmp	r0, #3
   16d34:	9afffff5 	bls	16d10 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x68>
   16d38:	e5958000 	ldr	r8, [r5]
   16d3c:	e59f30c8 	ldr	r3, [pc, #200]	; 16e0c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x164>
   16d40:	e0033008 	and	r3, r3, r8
   16d44:	e3530000 	cmp	r3, #0
   16d48:	1a000022 	bne	16dd8 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x130>
   16d4c:	e59f60bc 	ldr	r6, [pc, #188]	; 16e10 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x168>
   16d50:	e2400004 	sub	r0, r0, #4
   16d54:	e0066828 	and	r6, r6, r8, lsr #16
   16d58:	e1560000 	cmp	r6, r0
   16d5c:	0a000003 	beq	16d70 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0xc8>
   16d60:	e59f20ac 	ldr	r2, [pc, #172]	; 16e14 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x16c>
   16d64:	e59f10ac 	ldr	r1, [pc, #172]	; 16e18 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x170>
   16d68:	e59f00ac 	ldr	r0, [pc, #172]	; 16e1c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x174>
   16d6c:	eb000cf8 	bl	1a154 <assertion_failed>
   16d70:	e3560004 	cmp	r6, #4
   16d74:	9a000012 	bls	16dc4 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x11c>
   16d78:	e2466004 	sub	r6, r6, #4
   16d7c:	e1a02006 	mov	r2, r6
   16d80:	e2851004 	add	r1, r5, #4
   16d84:	e1a00005 	mov	r0, r5
   16d88:	eb002789 	bl	20bb4 <memcpy>
   16d8c:	e3570000 	cmp	r7, #0
   16d90:	0a000018 	beq	16df8 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x150>
   16d94:	e5876000 	str	r6, [r7]
   16d98:	eaffffdd 	b	16d14 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x6c>
   16d9c:	e59f207c 	ldr	r2, [pc, #124]	; 16e20 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x178>
   16da0:	e59f1070 	ldr	r1, [pc, #112]	; 16e18 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x170>
   16da4:	e59f0078 	ldr	r0, [pc, #120]	; 16e24 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x17c>
   16da8:	eb000ce9 	bl	1a154 <assertion_failed>
   16dac:	eaffffc5 	b	16cc8 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x20>
   16db0:	e3a02f45 	mov	r2, #276	; 0x114
   16db4:	e59f105c 	ldr	r1, [pc, #92]	; 16e18 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x170>
   16db8:	e59f0068 	ldr	r0, [pc, #104]	; 16e28 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x180>
   16dbc:	eb000ce4 	bl	1a154 <assertion_failed>
   16dc0:	eaffffc2 	b	16cd0 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x28>
   16dc4:	e3a02f4b 	mov	r2, #300	; 0x12c
   16dc8:	e59f1048 	ldr	r1, [pc, #72]	; 16e18 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x170>
   16dcc:	e59f0058 	ldr	r0, [pc, #88]	; 16e2c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x184>
   16dd0:	eb000cdf 	bl	1a154 <assertion_failed>
   16dd4:	eaffffcd 	b	16d10 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x68>
   16dd8:	eb0016d0 	bl	1c920 <CLogger::Get()>
   16ddc:	e58d8000 	str	r8, [sp]
   16de0:	e59f3048 	ldr	r3, [pc, #72]	; 16e30 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x188>
   16de4:	e3a02002 	mov	r2, #2
   16de8:	e59f1044 	ldr	r1, [pc, #68]	; 16e34 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x18c>
   16dec:	e1a04006 	mov	r4, r6
   16df0:	eb001873 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16df4:	eaffffc6 	b	16d14 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x6c>
   16df8:	e59f2038 	ldr	r2, [pc, #56]	; 16e38 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x190>
   16dfc:	e59f1014 	ldr	r1, [pc, #20]	; 16e18 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x170>
   16e00:	e59f0034 	ldr	r0, [pc, #52]	; 16e3c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x194>
   16e04:	eb000cd2 	bl	1a154 <assertion_failed>
   16e08:	eaffffe1 	b	16d94 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0xec>
   16e0c:	400090de 	.word	0x400090de
   16e10:	00003fff 	.word	0x00003fff
   16e14:	0000012b 	.word	0x0000012b
   16e18:	000254a8 	.word	0x000254a8
   16e1c:	000254d0 	.word	0x000254d0
   16e20:	00000113 	.word	0x00000113
   16e24:	000252bc 	.word	0x000252bc
   16e28:	000242a4 	.word	0x000242a4
   16e2c:	000254f0 	.word	0x000254f0
   16e30:	000254b8 	.word	0x000254b8
   16e34:	00025494 	.word	0x00025494
   16e38:	00000137 	.word	0x00000137
   16e3c:	000252d4 	.word	0x000252d4

00016e40 <CSMSC951xDevice::SendFrame(void const*, unsigned int) [clone .part.0]>:
   16e40:	e92d4070 	push	{r4, r5, r6, lr}
   16e44:	e2516000 	subs	r6, r1, #0
   16e48:	e24dde65 	sub	sp, sp, #1616	; 0x650
   16e4c:	e1a05000 	mov	r5, r0
   16e50:	e1a04002 	mov	r4, r2
   16e54:	0a000015 	beq	16eb0 <CSMSC951xDevice::SendFrame(void const*, unsigned int) [clone .part.0]+0x70>
   16e58:	e1a02004 	mov	r2, r4
   16e5c:	e1a01006 	mov	r1, r6
   16e60:	e28d0010 	add	r0, sp, #16
   16e64:	eb002752 	bl	20bb4 <memcpy>
   16e68:	e5952014 	ldr	r2, [r5, #20]
   16e6c:	e3843a03 	orr	r3, r4, #12288	; 0x3000
   16e70:	e3520000 	cmp	r2, #0
   16e74:	e58d400c 	str	r4, [sp, #12]
   16e78:	e58d3008 	str	r3, [sp, #8]
   16e7c:	0a000010 	beq	16ec4 <CSMSC951xDevice::SendFrame(void const*, unsigned int) [clone .part.0]+0x84>
   16e80:	e1a00005 	mov	r0, r5
   16e84:	ebfff5c0 	bl	1458c <CUSBFunction::GetHost() const>
   16e88:	e3a0c000 	mov	ip, #0
   16e8c:	e5951014 	ldr	r1, [r5, #20]
   16e90:	e2843008 	add	r3, r4, #8
   16e94:	e28d2008 	add	r2, sp, #8
   16e98:	e58dc000 	str	ip, [sp]
   16e9c:	ebffdd2f 	bl	e360 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   16ea0:	e1e00000 	mvn	r0, r0
   16ea4:	e1a00fa0 	lsr	r0, r0, #31
   16ea8:	e28dde65 	add	sp, sp, #1616	; 0x650
   16eac:	e8bd8070 	pop	{r4, r5, r6, pc}
   16eb0:	e59f2020 	ldr	r2, [pc, #32]	; 16ed8 <CSMSC951xDevice::SendFrame(void const*, unsigned int) [clone .part.0]+0x98>
   16eb4:	e59f1020 	ldr	r1, [pc, #32]	; 16edc <CSMSC951xDevice::SendFrame(void const*, unsigned int) [clone .part.0]+0x9c>
   16eb8:	e59f0020 	ldr	r0, [pc, #32]	; 16ee0 <CSMSC951xDevice::SendFrame(void const*, unsigned int) [clone .part.0]+0xa0>
   16ebc:	eb000ca4 	bl	1a154 <assertion_failed>
   16ec0:	eaffffe4 	b	16e58 <CSMSC951xDevice::SendFrame(void const*, unsigned int) [clone .part.0]+0x18>
   16ec4:	e59f2018 	ldr	r2, [pc, #24]	; 16ee4 <CSMSC951xDevice::SendFrame(void const*, unsigned int) [clone .part.0]+0xa4>
   16ec8:	e59f100c 	ldr	r1, [pc, #12]	; 16edc <CSMSC951xDevice::SendFrame(void const*, unsigned int) [clone .part.0]+0x9c>
   16ecc:	e59f0014 	ldr	r0, [pc, #20]	; 16ee8 <CSMSC951xDevice::SendFrame(void const*, unsigned int) [clone .part.0]+0xa8>
   16ed0:	eb000c9f 	bl	1a154 <assertion_failed>
   16ed4:	eaffffe9 	b	16e80 <CSMSC951xDevice::SendFrame(void const*, unsigned int) [clone .part.0]+0x40>
   16ed8:	00000106 	.word	0x00000106
   16edc:	000254a8 	.word	0x000254a8
   16ee0:	000242a4 	.word	0x000242a4
   16ee4:	0000010d 	.word	0x0000010d
   16ee8:	00025284 	.word	0x00025284

00016eec <CSMSC951xDevice::SendFrame(void const*, unsigned int)>:
   16eec:	e3520d19 	cmp	r2, #1600	; 0x640
   16ef0:	8a000000 	bhi	16ef8 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0xc>
   16ef4:	eaffffd1 	b	16e40 <CSMSC951xDevice::SendFrame(void const*, unsigned int) [clone .part.0]>
   16ef8:	e3a00000 	mov	r0, #0
   16efc:	e12fff1e 	bx	lr

00016f00 <CSMSC951xDevice::CSMSC951xDevice(CUSBFunction*)>:
   16f00:	e92d4010 	push	{r4, lr}
   16f04:	e1a04000 	mov	r4, r0
   16f08:	eb000655 	bl	18864 <CNetDevice::CNetDevice(CUSBFunction*)>
   16f0c:	e3a03000 	mov	r3, #0
   16f10:	e59f2018 	ldr	r2, [pc, #24]	; 16f30 <CSMSC951xDevice::CSMSC951xDevice(CUSBFunction*)+0x30>
   16f14:	e5843010 	str	r3, [r4, #16]
   16f18:	e5842000 	str	r2, [r4]
   16f1c:	e5843014 	str	r3, [r4, #20]
   16f20:	e2840018 	add	r0, r4, #24
   16f24:	eb0005a3 	bl	185b8 <CMACAddress::CMACAddress()>
   16f28:	e1a00004 	mov	r0, r4
   16f2c:	e8bd8010 	pop	{r4, pc}
   16f30:	00025464 	.word	0x00025464

00016f34 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>:
   16f34:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   16f38:	e24dd01c 	sub	sp, sp, #28
   16f3c:	e28d5018 	add	r5, sp, #24
   16f40:	e5252004 	str	r2, [r5, #-4]!
   16f44:	e1a04001 	mov	r4, r1
   16f48:	e1a07000 	mov	r7, r0
   16f4c:	ebfff58e 	bl	1458c <CUSBFunction::GetHost() const>
   16f50:	e1a06000 	mov	r6, r0
   16f54:	e1a00007 	mov	r0, r7
   16f58:	ebfff57a 	bl	14548 <CUSBFunction::GetEndpoint0() const>
   16f5c:	e3a02004 	mov	r2, #4
   16f60:	e3a03000 	mov	r3, #0
   16f64:	e6ff4074 	uxth	r4, r4
   16f68:	e1a01000 	mov	r1, r0
   16f6c:	e58d200c 	str	r2, [sp, #12]
   16f70:	e58d3000 	str	r3, [sp]
   16f74:	e58d5008 	str	r5, [sp, #8]
   16f78:	e58d4004 	str	r4, [sp, #4]
   16f7c:	e1a00006 	mov	r0, r6
   16f80:	e3a030a0 	mov	r3, #160	; 0xa0
   16f84:	e3a02040 	mov	r2, #64	; 0x40
   16f88:	ebffdc8e 	bl	e1c8 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   16f8c:	e1e00000 	mvn	r0, r0
   16f90:	e1a00fa0 	lsr	r0, r0, #31
   16f94:	e28dd01c 	add	sp, sp, #28
   16f98:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00016f9c <CSMSC951xDevice::ReadReg(unsigned int, unsigned int*)>:
   16f9c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   16fa0:	e24dd014 	sub	sp, sp, #20
   16fa4:	e1a06002 	mov	r6, r2
   16fa8:	e1a04001 	mov	r4, r1
   16fac:	e1a07000 	mov	r7, r0
   16fb0:	ebfff575 	bl	1458c <CUSBFunction::GetHost() const>
   16fb4:	e1a05000 	mov	r5, r0
   16fb8:	e1a00007 	mov	r0, r7
   16fbc:	ebfff561 	bl	14548 <CUSBFunction::GetEndpoint0() const>
   16fc0:	e3a0c004 	mov	ip, #4
   16fc4:	e3a03000 	mov	r3, #0
   16fc8:	e6ff4074 	uxth	r4, r4
   16fcc:	e1a01000 	mov	r1, r0
   16fd0:	e58d3000 	str	r3, [sp]
   16fd4:	e58d6008 	str	r6, [sp, #8]
   16fd8:	e58d4004 	str	r4, [sp, #4]
   16fdc:	e1a00005 	mov	r0, r5
   16fe0:	e58dc00c 	str	ip, [sp, #12]
   16fe4:	e3a030a1 	mov	r3, #161	; 0xa1
   16fe8:	e3a020c0 	mov	r2, #192	; 0xc0
   16fec:	ebffdc75 	bl	e1c8 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   16ff0:	e2400004 	sub	r0, r0, #4
   16ff4:	e16f0f10 	clz	r0, r0
   16ff8:	e1a002a0 	lsr	r0, r0, #5
   16ffc:	e28dd014 	add	sp, sp, #20
   17000:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00017004 <CSMSC951xDevice::PHYWaitNotBusy()>:
   17004:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   17008:	e24dd00c 	sub	sp, sp, #12
   1700c:	e1a07000 	mov	r7, r0
   17010:	eb002566 	bl	205b0 <CTimer::Get()>
   17014:	e2504000 	subs	r4, r0, #0
   17018:	0a000015 	beq	17074 <CSMSC951xDevice::PHYWaitNotBusy()+0x70>
   1701c:	e1a00004 	mov	r0, r4
   17020:	eb00229b 	bl	1fa94 <CTimer::GetTicks() const>
   17024:	e3a06f45 	mov	r6, #276	; 0x114
   17028:	e1a05000 	mov	r5, r0
   1702c:	ea000008 	b	17054 <CSMSC951xDevice::PHYWaitNotBusy()+0x50>
   17030:	e28d2004 	add	r2, sp, #4
   17034:	e1a01006 	mov	r1, r6
   17038:	e1a00007 	mov	r0, r7
   1703c:	ebffffd6 	bl	16f9c <CSMSC951xDevice::ReadReg(unsigned int, unsigned int*)>
   17040:	e3500000 	cmp	r0, #0
   17044:	0a000007 	beq	17068 <CSMSC951xDevice::PHYWaitNotBusy()+0x64>
   17048:	e59d3004 	ldr	r3, [sp, #4]
   1704c:	e3130001 	tst	r3, #1
   17050:	0a000005 	beq	1706c <CSMSC951xDevice::PHYWaitNotBusy()+0x68>
   17054:	e1a00004 	mov	r0, r4
   17058:	eb00228d 	bl	1fa94 <CTimer::GetTicks() const>
   1705c:	e0400005 	sub	r0, r0, r5
   17060:	e3500063 	cmp	r0, #99	; 0x63
   17064:	9afffff1 	bls	17030 <CSMSC951xDevice::PHYWaitNotBusy()+0x2c>
   17068:	e3a00000 	mov	r0, #0
   1706c:	e28dd00c 	add	sp, sp, #12
   17070:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   17074:	e59f200c 	ldr	r2, [pc, #12]	; 17088 <CSMSC951xDevice::PHYWaitNotBusy()+0x84>
   17078:	e59f100c 	ldr	r1, [pc, #12]	; 1708c <CSMSC951xDevice::PHYWaitNotBusy()+0x88>
   1707c:	e59f000c 	ldr	r0, [pc, #12]	; 17090 <CSMSC951xDevice::PHYWaitNotBusy()+0x8c>
   17080:	eb000c33 	bl	1a154 <assertion_failed>
   17084:	eaffffe4 	b	1701c <CSMSC951xDevice::PHYWaitNotBusy()+0x18>
   17088:	0000018e 	.word	0x0000018e
   1708c:	000254a8 	.word	0x000254a8
   17090:	00025504 	.word	0x00025504

00017094 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)>:
   17094:	e351001f 	cmp	r1, #31
   17098:	e92d4070 	push	{r4, r5, r6, lr}
   1709c:	e1a05001 	mov	r5, r1
   170a0:	e1a04000 	mov	r4, r0
   170a4:	e1a06002 	mov	r6, r2
   170a8:	ca000005 	bgt	170c4 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x30>
   170ac:	e1a00004 	mov	r0, r4
   170b0:	ebffffd3 	bl	17004 <CSMSC951xDevice::PHYWaitNotBusy()>
   170b4:	e3500000 	cmp	r0, #0
   170b8:	1a000009 	bne	170e4 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x50>
   170bc:	e3a00000 	mov	r0, #0
   170c0:	e8bd8070 	pop	{r4, r5, r6, pc}
   170c4:	e59f2058 	ldr	r2, [pc, #88]	; 17124 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x90>
   170c8:	e59f1058 	ldr	r1, [pc, #88]	; 17128 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x94>
   170cc:	e59f0058 	ldr	r0, [pc, #88]	; 1712c <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x98>
   170d0:	eb000c1f 	bl	1a154 <assertion_failed>
   170d4:	e1a00004 	mov	r0, r4
   170d8:	ebffffc9 	bl	17004 <CSMSC951xDevice::PHYWaitNotBusy()>
   170dc:	e3500000 	cmp	r0, #0
   170e0:	0afffff5 	beq	170bc <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x28>
   170e4:	e1a02006 	mov	r2, r6
   170e8:	e3a01f46 	mov	r1, #280	; 0x118
   170ec:	e1a00004 	mov	r0, r4
   170f0:	ebffff8f 	bl	16f34 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   170f4:	e3500000 	cmp	r0, #0
   170f8:	0affffef 	beq	170bc <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x28>
   170fc:	e59f202c 	ldr	r2, [pc, #44]	; 17130 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x9c>
   17100:	e3a01f45 	mov	r1, #276	; 0x114
   17104:	e1822305 	orr	r2, r2, r5, lsl #6
   17108:	e1a00004 	mov	r0, r4
   1710c:	ebffff88 	bl	16f34 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   17110:	e3500000 	cmp	r0, #0
   17114:	0affffe8 	beq	170bc <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x28>
   17118:	e1a00004 	mov	r0, r4
   1711c:	e8bd4070 	pop	{r4, r5, r6, lr}
   17120:	eaffffb7 	b	17004 <CSMSC951xDevice::PHYWaitNotBusy()>
   17124:	00000162 	.word	0x00000162
   17128:	000254a8 	.word	0x000254a8
   1712c:	00025510 	.word	0x00025510
   17130:	00000803 	.word	0x00000803

00017134 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)>:
   17134:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   17138:	e351001f 	cmp	r1, #31
   1713c:	e24dd00c 	sub	sp, sp, #12
   17140:	e1a06001 	mov	r6, r1
   17144:	e1a04000 	mov	r4, r0
   17148:	e1a07002 	mov	r7, r2
   1714c:	ca000011 	bgt	17198 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x64>
   17150:	e1a00004 	mov	r0, r4
   17154:	ebffffaa 	bl	17004 <CSMSC951xDevice::PHYWaitNotBusy()>
   17158:	e2505000 	subs	r5, r0, #0
   1715c:	1a000002 	bne	1716c <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x38>
   17160:	e1a00005 	mov	r0, r5
   17164:	e28dd00c 	add	sp, sp, #12
   17168:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1716c:	e59f2090 	ldr	r2, [pc, #144]	; 17204 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xd0>
   17170:	e3a01f45 	mov	r1, #276	; 0x114
   17174:	e1822306 	orr	r2, r2, r6, lsl #6
   17178:	e1a00004 	mov	r0, r4
   1717c:	ebffff6c 	bl	16f34 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   17180:	e3500000 	cmp	r0, #0
   17184:	1a000008 	bne	171ac <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x78>
   17188:	e3a05000 	mov	r5, #0
   1718c:	e1a00005 	mov	r0, r5
   17190:	e28dd00c 	add	sp, sp, #12
   17194:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   17198:	e59f2068 	ldr	r2, [pc, #104]	; 17208 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xd4>
   1719c:	e59f1068 	ldr	r1, [pc, #104]	; 1720c <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xd8>
   171a0:	e59f0068 	ldr	r0, [pc, #104]	; 17210 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xdc>
   171a4:	eb000bea 	bl	1a154 <assertion_failed>
   171a8:	eaffffe8 	b	17150 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x1c>
   171ac:	e1a00004 	mov	r0, r4
   171b0:	ebffff93 	bl	17004 <CSMSC951xDevice::PHYWaitNotBusy()>
   171b4:	e3500000 	cmp	r0, #0
   171b8:	0afffff2 	beq	17188 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x54>
   171bc:	e1a00004 	mov	r0, r4
   171c0:	e28d2004 	add	r2, sp, #4
   171c4:	e3a01f46 	mov	r1, #280	; 0x118
   171c8:	ebffff73 	bl	16f9c <CSMSC951xDevice::ReadReg(unsigned int, unsigned int*)>
   171cc:	e2505000 	subs	r5, r0, #0
   171d0:	0affffec 	beq	17188 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x54>
   171d4:	e3570000 	cmp	r7, #0
   171d8:	0a000004 	beq	171f0 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xbc>
   171dc:	e1a00005 	mov	r0, r5
   171e0:	e59d3004 	ldr	r3, [sp, #4]
   171e4:	e1c730b0 	strh	r3, [r7]
   171e8:	e28dd00c 	add	sp, sp, #12
   171ec:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   171f0:	e59f201c 	ldr	r2, [pc, #28]	; 17214 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xe0>
   171f4:	e59f1010 	ldr	r1, [pc, #16]	; 1720c <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xd8>
   171f8:	e59f0018 	ldr	r0, [pc, #24]	; 17218 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xe4>
   171fc:	eb000bd4 	bl	1a154 <assertion_failed>
   17200:	eafffff5 	b	171dc <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xa8>
   17204:	00000801 	.word	0x00000801
   17208:	00000175 	.word	0x00000175
   1720c:	000254a8 	.word	0x000254a8
   17210:	00025510 	.word	0x00025510
   17214:	00000185 	.word	0x00000185
   17218:	00025520 	.word	0x00025520

0001721c <CSMSC951xDevice::IsLinkUp()>:
   1721c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   17220:	e24dd00c 	sub	sp, sp, #12
   17224:	e28d2006 	add	r2, sp, #6
   17228:	e3a01001 	mov	r1, #1
   1722c:	ebffffc0 	bl	17134 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)>
   17230:	e3500000 	cmp	r0, #0
   17234:	11dd00b6 	ldrhne	r0, [sp, #6]
   17238:	11a00120 	lsrne	r0, r0, #2
   1723c:	12000001 	andne	r0, r0, #1
   17240:	e28dd00c 	add	sp, sp, #12
   17244:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00017248 <CSMSC951xDevice::GetLinkSpeed()>:
   17248:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   1724c:	e24dd00c 	sub	sp, sp, #12
   17250:	e28d2006 	add	r2, sp, #6
   17254:	e3a0101f 	mov	r1, #31
   17258:	ebffffb5 	bl	17134 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)>
   1725c:	e3500000 	cmp	r0, #0
   17260:	1a000002 	bne	17270 <CSMSC951xDevice::GetLinkSpeed()+0x28>
   17264:	e3a00006 	mov	r0, #6
   17268:	e28dd00c 	add	sp, sp, #12
   1726c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   17270:	e1dd30b6 	ldrh	r3, [sp, #6]
   17274:	e3130a01 	tst	r3, #4096	; 0x1000
   17278:	0afffff9 	beq	17264 <CSMSC951xDevice::GetLinkSpeed()+0x1c>
   1727c:	e1a03143 	asr	r3, r3, #2
   17280:	e2033007 	and	r3, r3, #7
   17284:	e2433001 	sub	r3, r3, #1
   17288:	e3530005 	cmp	r3, #5
   1728c:	8afffff4 	bhi	17264 <CSMSC951xDevice::GetLinkSpeed()+0x1c>
   17290:	e59f2008 	ldr	r2, [pc, #8]	; 172a0 <CSMSC951xDevice::GetLinkSpeed()+0x58>
   17294:	e0823003 	add	r3, r2, r3
   17298:	e5d30044 	ldrb	r0, [r3, #68]	; 0x44
   1729c:	eafffff1 	b	17268 <CSMSC951xDevice::GetLinkSpeed()+0x20>
   172a0:	0002545c 	.word	0x0002545c

000172a4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>:
   172a4:	e92d4030 	push	{r4, r5, lr}
   172a8:	e1a04002 	mov	r4, r2
   172ac:	e24dd014 	sub	sp, sp, #20
   172b0:	e1a05001 	mov	r5, r1
   172b4:	e28d200c 	add	r2, sp, #12
   172b8:	e1a01004 	mov	r1, r4
   172bc:	ebffff36 	bl	16f9c <CSMSC951xDevice::ReadReg(unsigned int, unsigned int*)>
   172c0:	e3500000 	cmp	r0, #0
   172c4:	0a000008 	beq	172ec <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0x48>
   172c8:	eb001594 	bl	1c920 <CLogger::Get()>
   172cc:	e59d300c 	ldr	r3, [sp, #12]
   172d0:	e3a02004 	mov	r2, #4
   172d4:	e88d0028 	stm	sp, {r3, r5}
   172d8:	e59f102c 	ldr	r1, [pc, #44]	; 1730c <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0x68>
   172dc:	e59f302c 	ldr	r3, [pc, #44]	; 17310 <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0x6c>
   172e0:	eb001737 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   172e4:	e28dd014 	add	sp, sp, #20
   172e8:	e8bd8030 	pop	{r4, r5, pc}
   172ec:	eb00158b 	bl	1c920 <CLogger::Get()>
   172f0:	e58d4000 	str	r4, [sp]
   172f4:	e59f3018 	ldr	r3, [pc, #24]	; 17314 <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0x70>
   172f8:	e3a02001 	mov	r2, #1
   172fc:	e59f1008 	ldr	r1, [pc, #8]	; 1730c <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0x68>
   17300:	eb00172f 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17304:	e28dd014 	add	sp, sp, #20
   17308:	e8bd8030 	pop	{r4, r5, pc}
   1730c:	00025494 	.word	0x00025494
   17310:	00025548 	.word	0x00025548
   17314:	0002552c 	.word	0x0002552c

00017318 <CSMSC951xDevice::DumpRegs()>:
   17318:	e92d4010 	push	{r4, lr}
   1731c:	e1a04000 	mov	r4, r0
   17320:	e3a02000 	mov	r2, #0
   17324:	e59f1134 	ldr	r1, [pc, #308]	; 17460 <CSMSC951xDevice::DumpRegs()+0x148>
   17328:	ebffffdd 	bl	172a4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1732c:	e1a00004 	mov	r0, r4
   17330:	e3a02008 	mov	r2, #8
   17334:	e59f1128 	ldr	r1, [pc, #296]	; 17464 <CSMSC951xDevice::DumpRegs()+0x14c>
   17338:	ebffffd9 	bl	172a4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1733c:	e1a00004 	mov	r0, r4
   17340:	e3a0200c 	mov	r2, #12
   17344:	e59f111c 	ldr	r1, [pc, #284]	; 17468 <CSMSC951xDevice::DumpRegs()+0x150>
   17348:	ebffffd5 	bl	172a4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1734c:	e1a00004 	mov	r0, r4
   17350:	e3a02010 	mov	r2, #16
   17354:	e59f1110 	ldr	r1, [pc, #272]	; 1746c <CSMSC951xDevice::DumpRegs()+0x154>
   17358:	ebffffd1 	bl	172a4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1735c:	e1a00004 	mov	r0, r4
   17360:	e3a02014 	mov	r2, #20
   17364:	e59f1104 	ldr	r1, [pc, #260]	; 17470 <CSMSC951xDevice::DumpRegs()+0x158>
   17368:	ebffffcd 	bl	172a4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1736c:	e1a00004 	mov	r0, r4
   17370:	e3a02018 	mov	r2, #24
   17374:	e59f10f8 	ldr	r1, [pc, #248]	; 17474 <CSMSC951xDevice::DumpRegs()+0x15c>
   17378:	ebffffc9 	bl	172a4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1737c:	e1a00004 	mov	r0, r4
   17380:	e3a02020 	mov	r2, #32
   17384:	e59f10ec 	ldr	r1, [pc, #236]	; 17478 <CSMSC951xDevice::DumpRegs()+0x160>
   17388:	ebffffc5 	bl	172a4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1738c:	e1a00004 	mov	r0, r4
   17390:	e3a02024 	mov	r2, #36	; 0x24
   17394:	e59f10e0 	ldr	r1, [pc, #224]	; 1747c <CSMSC951xDevice::DumpRegs()+0x164>
   17398:	ebffffc1 	bl	172a4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1739c:	e1a00004 	mov	r0, r4
   173a0:	e3a02028 	mov	r2, #40	; 0x28
   173a4:	e59f10d4 	ldr	r1, [pc, #212]	; 17480 <CSMSC951xDevice::DumpRegs()+0x168>
   173a8:	ebffffbd 	bl	172a4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   173ac:	e1a00004 	mov	r0, r4
   173b0:	e3a0202c 	mov	r2, #44	; 0x2c
   173b4:	e59f10c8 	ldr	r1, [pc, #200]	; 17484 <CSMSC951xDevice::DumpRegs()+0x16c>
   173b8:	ebffffb9 	bl	172a4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   173bc:	e1a00004 	mov	r0, r4
   173c0:	e3a02038 	mov	r2, #56	; 0x38
   173c4:	e59f10bc 	ldr	r1, [pc, #188]	; 17488 <CSMSC951xDevice::DumpRegs()+0x170>
   173c8:	ebffffb5 	bl	172a4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   173cc:	e1a00004 	mov	r0, r4
   173d0:	e3a02068 	mov	r2, #104	; 0x68
   173d4:	e59f10b0 	ldr	r1, [pc, #176]	; 1748c <CSMSC951xDevice::DumpRegs()+0x174>
   173d8:	ebffffb1 	bl	172a4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   173dc:	e1a00004 	mov	r0, r4
   173e0:	e3a0206c 	mov	r2, #108	; 0x6c
   173e4:	e59f10a4 	ldr	r1, [pc, #164]	; 17490 <CSMSC951xDevice::DumpRegs()+0x178>
   173e8:	ebffffad 	bl	172a4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   173ec:	e1a00004 	mov	r0, r4
   173f0:	e3a02c01 	mov	r2, #256	; 0x100
   173f4:	e59f1098 	ldr	r1, [pc, #152]	; 17494 <CSMSC951xDevice::DumpRegs()+0x17c>
   173f8:	ebffffa9 	bl	172a4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   173fc:	e1a00004 	mov	r0, r4
   17400:	e3a02f41 	mov	r2, #260	; 0x104
   17404:	e59f108c 	ldr	r1, [pc, #140]	; 17498 <CSMSC951xDevice::DumpRegs()+0x180>
   17408:	ebffffa5 	bl	172a4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1740c:	e1a00004 	mov	r0, r4
   17410:	e3a02f42 	mov	r2, #264	; 0x108
   17414:	e59f1080 	ldr	r1, [pc, #128]	; 1749c <CSMSC951xDevice::DumpRegs()+0x184>
   17418:	ebffffa1 	bl	172a4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1741c:	e1a00004 	mov	r0, r4
   17420:	e3a02f43 	mov	r2, #268	; 0x10c
   17424:	e59f1074 	ldr	r1, [pc, #116]	; 174a0 <CSMSC951xDevice::DumpRegs()+0x188>
   17428:	ebffff9d 	bl	172a4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1742c:	e1a00004 	mov	r0, r4
   17430:	e3a02e11 	mov	r2, #272	; 0x110
   17434:	e59f1068 	ldr	r1, [pc, #104]	; 174a4 <CSMSC951xDevice::DumpRegs()+0x18c>
   17438:	ebffff99 	bl	172a4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1743c:	e1a00004 	mov	r0, r4
   17440:	e3a02f47 	mov	r2, #284	; 0x11c
   17444:	e59f105c 	ldr	r1, [pc, #92]	; 174a8 <CSMSC951xDevice::DumpRegs()+0x190>
   17448:	ebffff95 	bl	172a4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1744c:	e1a00004 	mov	r0, r4
   17450:	e8bd4010 	pop	{r4, lr}
   17454:	e3a02f4b 	mov	r2, #300	; 0x12c
   17458:	e59f104c 	ldr	r1, [pc, #76]	; 174ac <CSMSC951xDevice::DumpRegs()+0x194>
   1745c:	eaffff90 	b	172a4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   17460:	00025550 	.word	0x00025550
   17464:	00025558 	.word	0x00025558
   17468:	00025560 	.word	0x00025560
   1746c:	00025568 	.word	0x00025568
   17470:	00025570 	.word	0x00025570
   17474:	00025578 	.word	0x00025578
   17478:	00025584 	.word	0x00025584
   1747c:	0002558c 	.word	0x0002558c
   17480:	00025590 	.word	0x00025590
   17484:	0002559c 	.word	0x0002559c
   17488:	000255a4 	.word	0x000255a4
   1748c:	000255b0 	.word	0x000255b0
   17490:	000255bc 	.word	0x000255bc
   17494:	000255c8 	.word	0x000255c8
   17498:	000255d0 	.word	0x000255d0
   1749c:	000255d8 	.word	0x000255d8
   174a0:	000255e0 	.word	0x000255e0
   174a4:	000255e8 	.word	0x000255e8
   174a8:	000255f0 	.word	0x000255f0
   174ac:	000255f8 	.word	0x000255f8

000174b0 <CSMSC951xDevice::Configure()>:
   174b0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   174b4:	e3a06000 	mov	r6, #0
   174b8:	e24dd038 	sub	sp, sp, #56	; 0x38
   174bc:	e1a05000 	mov	r5, r0
   174c0:	e28d0008 	add	r0, sp, #8
   174c4:	eb000b46 	bl	1a1e4 <CBcmPropertyTags::CBcmPropertyTags()>
   174c8:	e28d0008 	add	r0, sp, #8
   174cc:	e58d6000 	str	r6, [sp]
   174d0:	e3a03014 	mov	r3, #20
   174d4:	e28d2024 	add	r2, sp, #36	; 0x24
   174d8:	e59f1274 	ldr	r1, [pc, #628]	; 17754 <CSMSC951xDevice::Configure()+0x2a4>
   174dc:	eb000b97 	bl	1a340 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   174e0:	e2504000 	subs	r4, r0, #0
   174e4:	0a00003c 	beq	175dc <CSMSC951xDevice::Configure()+0x12c>
   174e8:	e2857018 	add	r7, r5, #24
   174ec:	e28d1030 	add	r1, sp, #48	; 0x30
   174f0:	e1a00007 	mov	r0, r7
   174f4:	eb000454 	bl	1864c <CMACAddress::Set(unsigned char const*)>
   174f8:	e28d0014 	add	r0, sp, #20
   174fc:	eb001c94 	bl	1e754 <CString::CString()>
   17500:	e28d1014 	add	r1, sp, #20
   17504:	e1a00007 	mov	r0, r7
   17508:	eb0004b0 	bl	187d0 <CMACAddress::Format(CString*) const>
   1750c:	eb001503 	bl	1c920 <CLogger::Get()>
   17510:	e1a04000 	mov	r4, r0
   17514:	e28d0014 	add	r0, sp, #20
   17518:	eb001ca3 	bl	1e7ac <CString::operator char const*() const>
   1751c:	e59f3234 	ldr	r3, [pc, #564]	; 17758 <CSMSC951xDevice::Configure()+0x2a8>
   17520:	e58d0000 	str	r0, [sp]
   17524:	e3a02004 	mov	r2, #4
   17528:	e1a00004 	mov	r0, r4
   1752c:	e59f1228 	ldr	r1, [pc, #552]	; 1775c <CSMSC951xDevice::Configure()+0x2ac>
   17530:	eb0016a3 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17534:	e1a00005 	mov	r0, r5
   17538:	ebfff3e2 	bl	144c8 <CUSBFunction::GetNumEndpoints() const>
   1753c:	e3500003 	cmp	r0, #3
   17540:	03a06005 	moveq	r6, #5
   17544:	03a08014 	moveq	r8, #20
   17548:	0a00000e 	beq	17588 <CSMSC951xDevice::Configure()+0xd8>
   1754c:	e1a00005 	mov	r0, r5
   17550:	e59f1204 	ldr	r1, [pc, #516]	; 1775c <CSMSC951xDevice::Configure()+0x2ac>
   17554:	e1a04006 	mov	r4, r6
   17558:	ebfff460 	bl	146e0 <CUSBFunction::ConfigurationError(char const*) const>
   1755c:	e28d0014 	add	r0, sp, #20
   17560:	eb001c48 	bl	1e688 <CString::~CString()>
   17564:	e28d0008 	add	r0, sp, #8
   17568:	eb000b23 	bl	1a1fc <CBcmPropertyTags::~CBcmPropertyTags()>
   1756c:	e1a00004 	mov	r0, r4
   17570:	e28dd038 	add	sp, sp, #56	; 0x38
   17574:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17578:	e5d43003 	ldrb	r3, [r4, #3]
   1757c:	e203303f 	and	r3, r3, #63	; 0x3f
   17580:	e3530002 	cmp	r3, #2
   17584:	0a00001a 	beq	175f4 <CSMSC951xDevice::Configure()+0x144>
   17588:	e1a01006 	mov	r1, r6
   1758c:	e1a00005 	mov	r0, r5
   17590:	ebfff43f 	bl	14694 <CUSBFunction::GetDescriptor(unsigned char)>
   17594:	e2504000 	subs	r4, r0, #0
   17598:	1afffff6 	bne	17578 <CSMSC951xDevice::Configure()+0xc8>
   1759c:	e5953010 	ldr	r3, [r5, #16]
   175a0:	e1a00005 	mov	r0, r5
   175a4:	e3530000 	cmp	r3, #0
   175a8:	0a000022 	beq	17638 <CSMSC951xDevice::Configure()+0x188>
   175ac:	e5953014 	ldr	r3, [r5, #20]
   175b0:	e3530000 	cmp	r3, #0
   175b4:	0a00001f 	beq	17638 <CSMSC951xDevice::Configure()+0x188>
   175b8:	ebfff404 	bl	145d0 <CUSBFunction::Configure()>
   175bc:	e2504000 	subs	r4, r0, #0
   175c0:	1a000020 	bne	17648 <CSMSC951xDevice::Configure()+0x198>
   175c4:	eb0014d5 	bl	1c920 <CLogger::Get()>
   175c8:	e59f3190 	ldr	r3, [pc, #400]	; 17760 <CSMSC951xDevice::Configure()+0x2b0>
   175cc:	e3a02001 	mov	r2, #1
   175d0:	e59f1184 	ldr	r1, [pc, #388]	; 1775c <CSMSC951xDevice::Configure()+0x2ac>
   175d4:	eb00167a 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   175d8:	eaffffdf 	b	1755c <CSMSC951xDevice::Configure()+0xac>
   175dc:	eb0014cf 	bl	1c920 <CLogger::Get()>
   175e0:	e59f317c 	ldr	r3, [pc, #380]	; 17764 <CSMSC951xDevice::Configure()+0x2b4>
   175e4:	e3a02001 	mov	r2, #1
   175e8:	e59f116c 	ldr	r1, [pc, #364]	; 1775c <CSMSC951xDevice::Configure()+0x2ac>
   175ec:	eb001674 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   175f0:	eaffffdb 	b	17564 <CSMSC951xDevice::Configure()+0xb4>
   175f4:	e1d430d2 	ldrsb	r3, [r4, #2]
   175f8:	e3530000 	cmp	r3, #0
   175fc:	ba000024 	blt	17694 <CSMSC951xDevice::Configure()+0x1e4>
   17600:	e5953014 	ldr	r3, [r5, #20]
   17604:	e1a00005 	mov	r0, r5
   17608:	e3530000 	cmp	r3, #0
   1760c:	1a000009 	bne	17638 <CSMSC951xDevice::Configure()+0x188>
   17610:	ebfff3bc 	bl	14508 <CUSBFunction::GetDevice() const>
   17614:	e1a0a000 	mov	sl, r0
   17618:	e1a00008 	mov	r0, r8
   1761c:	eb002860 	bl	217a4 <operator new(unsigned int)>
   17620:	e1a09000 	mov	r9, r0
   17624:	e1a02004 	mov	r2, r4
   17628:	e1a0100a 	mov	r1, sl
   1762c:	ebffd9cf 	bl	dd70 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   17630:	e5859014 	str	r9, [r5, #20]
   17634:	eaffffd3 	b	17588 <CSMSC951xDevice::Configure()+0xd8>
   17638:	e59f111c 	ldr	r1, [pc, #284]	; 1775c <CSMSC951xDevice::Configure()+0x2ac>
   1763c:	ebfff427 	bl	146e0 <CUSBFunction::ConfigurationError(char const*) const>
   17640:	e3a04000 	mov	r4, #0
   17644:	eaffffc4 	b	1755c <CSMSC951xDevice::Configure()+0xac>
   17648:	e1a00007 	mov	r0, r7
   1764c:	e28d100c 	add	r1, sp, #12
   17650:	eb00042a 	bl	18700 <CMACAddress::CopyTo(unsigned char*) const>
   17654:	e5dd2011 	ldrb	r2, [sp, #17]
   17658:	e5dd3010 	ldrb	r3, [sp, #16]
   1765c:	e3a01f41 	mov	r1, #260	; 0x104
   17660:	e1832402 	orr	r2, r3, r2, lsl #8
   17664:	e1a00005 	mov	r0, r5
   17668:	e59d400c 	ldr	r4, [sp, #12]
   1766c:	ebfffe30 	bl	16f34 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   17670:	e3500000 	cmp	r0, #0
   17674:	1a000014 	bne	176cc <CSMSC951xDevice::Configure()+0x21c>
   17678:	eb0014a8 	bl	1c920 <CLogger::Get()>
   1767c:	e59f30e4 	ldr	r3, [pc, #228]	; 17768 <CSMSC951xDevice::Configure()+0x2b8>
   17680:	e3a02001 	mov	r2, #1
   17684:	e59f10d0 	ldr	r1, [pc, #208]	; 1775c <CSMSC951xDevice::Configure()+0x2ac>
   17688:	eb00164d 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1768c:	e3a04000 	mov	r4, #0
   17690:	eaffffb1 	b	1755c <CSMSC951xDevice::Configure()+0xac>
   17694:	e5953010 	ldr	r3, [r5, #16]
   17698:	e1a00005 	mov	r0, r5
   1769c:	e3530000 	cmp	r3, #0
   176a0:	1affffe4 	bne	17638 <CSMSC951xDevice::Configure()+0x188>
   176a4:	ebfff397 	bl	14508 <CUSBFunction::GetDevice() const>
   176a8:	e1a0a000 	mov	sl, r0
   176ac:	e1a00008 	mov	r0, r8
   176b0:	eb00283b 	bl	217a4 <operator new(unsigned int)>
   176b4:	e1a09000 	mov	r9, r0
   176b8:	e1a02004 	mov	r2, r4
   176bc:	e1a0100a 	mov	r1, sl
   176c0:	ebffd9aa 	bl	dd70 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   176c4:	e5859010 	str	r9, [r5, #16]
   176c8:	eaffffae 	b	17588 <CSMSC951xDevice::Configure()+0xd8>
   176cc:	e1a02004 	mov	r2, r4
   176d0:	e3a01f42 	mov	r1, #264	; 0x108
   176d4:	e1a00005 	mov	r0, r5
   176d8:	ebfffe15 	bl	16f34 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   176dc:	e3500000 	cmp	r0, #0
   176e0:	0affffe4 	beq	17678 <CSMSC951xDevice::Configure()+0x1c8>
   176e4:	e59f2080 	ldr	r2, [pc, #128]	; 1776c <CSMSC951xDevice::Configure()+0x2bc>
   176e8:	e3a01024 	mov	r1, #36	; 0x24
   176ec:	e1a00005 	mov	r0, r5
   176f0:	ebfffe0f 	bl	16f34 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   176f4:	e3500000 	cmp	r0, #0
   176f8:	1a000006 	bne	17718 <CSMSC951xDevice::Configure()+0x268>
   176fc:	eb001487 	bl	1c920 <CLogger::Get()>
   17700:	e59f3068 	ldr	r3, [pc, #104]	; 17770 <CSMSC951xDevice::Configure()+0x2c0>
   17704:	e3a02001 	mov	r2, #1
   17708:	e59f104c 	ldr	r1, [pc, #76]	; 1775c <CSMSC951xDevice::Configure()+0x2ac>
   1770c:	eb00162c 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17710:	e3a04000 	mov	r4, #0
   17714:	eaffff90 	b	1755c <CSMSC951xDevice::Configure()+0xac>
   17718:	e59f2054 	ldr	r2, [pc, #84]	; 17774 <CSMSC951xDevice::Configure()+0x2c4>
   1771c:	e3a01c01 	mov	r1, #256	; 0x100
   17720:	e1a00005 	mov	r0, r5
   17724:	ebfffe02 	bl	16f34 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   17728:	e3500000 	cmp	r0, #0
   1772c:	0afffff2 	beq	176fc <CSMSC951xDevice::Configure()+0x24c>
   17730:	e3a02004 	mov	r2, #4
   17734:	e3a01010 	mov	r1, #16
   17738:	e1a00005 	mov	r0, r5
   1773c:	ebfffdfc 	bl	16f34 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   17740:	e2504000 	subs	r4, r0, #0
   17744:	0affffec 	beq	176fc <CSMSC951xDevice::Configure()+0x24c>
   17748:	e1a00005 	mov	r0, r5
   1774c:	eb000466 	bl	188ec <CNetDevice::AddNetDevice()>
   17750:	eaffff81 	b	1755c <CSMSC951xDevice::Configure()+0xac>
   17754:	00010003 	.word	0x00010003
   17758:	00025310 	.word	0x00025310
   1775c:	00025494 	.word	0x00025494
   17760:	000241a8 	.word	0x000241a8
   17764:	000252f8 	.word	0x000252f8
   17768:	00025600 	.word	0x00025600
   1776c:	01110000 	.word	0x01110000
   17770:	00025618 	.word	0x00025618
   17774:	0080000c 	.word	0x0080000c

00017778 <CLAN7800Device::GetMACAddress() const>:
   17778:	e2800018 	add	r0, r0, #24
   1777c:	e12fff1e 	bx	lr

00017780 <CLAN7800Device::~CLAN7800Device()>:
   17780:	e92d4070 	push	{r4, r5, r6, lr}
   17784:	e5905014 	ldr	r5, [r0, #20]
   17788:	e59f3068 	ldr	r3, [pc, #104]	; 177f8 <CLAN7800Device::~CLAN7800Device()+0x78>
   1778c:	e3550000 	cmp	r5, #0
   17790:	e1a04000 	mov	r4, r0
   17794:	e5803000 	str	r3, [r0]
   17798:	0a000004 	beq	177b0 <CLAN7800Device::~CLAN7800Device()+0x30>
   1779c:	e1a00005 	mov	r0, r5
   177a0:	ebffda04 	bl	dfb8 <CUSBEndpoint::~CUSBEndpoint()>
   177a4:	e1a00005 	mov	r0, r5
   177a8:	e3a01014 	mov	r1, #20
   177ac:	eb002800 	bl	217b4 <operator delete(void*, unsigned int)>
   177b0:	e3a03000 	mov	r3, #0
   177b4:	e5945010 	ldr	r5, [r4, #16]
   177b8:	e5843014 	str	r3, [r4, #20]
   177bc:	e1550003 	cmp	r5, r3
   177c0:	0a000004 	beq	177d8 <CLAN7800Device::~CLAN7800Device()+0x58>
   177c4:	e1a00005 	mov	r0, r5
   177c8:	ebffd9fa 	bl	dfb8 <CUSBEndpoint::~CUSBEndpoint()>
   177cc:	e1a00005 	mov	r0, r5
   177d0:	e3a01014 	mov	r1, #20
   177d4:	eb0027f6 	bl	217b4 <operator delete(void*, unsigned int)>
   177d8:	e3a03000 	mov	r3, #0
   177dc:	e2840018 	add	r0, r4, #24
   177e0:	e5843010 	str	r3, [r4, #16]
   177e4:	eb000376 	bl	185c4 <CMACAddress::~CMACAddress()>
   177e8:	e1a00004 	mov	r0, r4
   177ec:	eb000424 	bl	18884 <CNetDevice::~CNetDevice()>
   177f0:	e1a00004 	mov	r0, r4
   177f4:	e8bd8070 	pop	{r4, r5, r6, pc}
   177f8:	00025634 	.word	0x00025634

000177fc <CLAN7800Device::~CLAN7800Device()>:
   177fc:	e92d4010 	push	{r4, lr}
   17800:	e1a04000 	mov	r4, r0
   17804:	ebffffdd 	bl	17780 <CLAN7800Device::~CLAN7800Device()>
   17808:	e1a00004 	mov	r0, r4
   1780c:	e3a01020 	mov	r1, #32
   17810:	eb0027e7 	bl	217b4 <operator delete(void*, unsigned int)>
   17814:	e1a00004 	mov	r0, r4
   17818:	e8bd8010 	pop	{r4, pc}

0001781c <CLAN7800Device::ReceiveFrame(void*, unsigned int*)>:
   1781c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   17820:	e5903010 	ldr	r3, [r0, #16]
   17824:	e24dd030 	sub	sp, sp, #48	; 0x30
   17828:	e3530000 	cmp	r3, #0
   1782c:	e1a04000 	mov	r4, r0
   17830:	e1a05001 	mov	r5, r1
   17834:	e1a08002 	mov	r8, r2
   17838:	0a000032 	beq	17908 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0xec>
   1783c:	e3550000 	cmp	r5, #0
   17840:	0a000035 	beq	1791c <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x100>
   17844:	e3a06000 	mov	r6, #0
   17848:	e5941010 	ldr	r1, [r4, #16]
   1784c:	e3a03d19 	mov	r3, #1600	; 0x640
   17850:	e1a02005 	mov	r2, r5
   17854:	e58d6000 	str	r6, [sp]
   17858:	e28d0008 	add	r0, sp, #8
   1785c:	ebffdad8 	bl	e3c4 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   17860:	e1a00004 	mov	r0, r4
   17864:	ebfff348 	bl	1458c <CUSBFunction::GetHost() const>
   17868:	e5903000 	ldr	r3, [r0]
   1786c:	e1a02006 	mov	r2, r6
   17870:	e5933008 	ldr	r3, [r3, #8]
   17874:	e28d1008 	add	r1, sp, #8
   17878:	e12fff33 	blx	r3
   1787c:	e2504000 	subs	r4, r0, #0
   17880:	1a000005 	bne	1789c <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x80>
   17884:	e3a04000 	mov	r4, #0
   17888:	e28d0008 	add	r0, sp, #8
   1788c:	ebffdaf1 	bl	e458 <CUSBRequest::~CUSBRequest()>
   17890:	e1a00004 	mov	r0, r4
   17894:	e28dd030 	add	sp, sp, #48	; 0x30
   17898:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1789c:	e28d0008 	add	r0, sp, #8
   178a0:	ebffdb03 	bl	e4b4 <CUSBRequest::GetResultLength() const>
   178a4:	e3500009 	cmp	r0, #9
   178a8:	9afffff5 	bls	17884 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x68>
   178ac:	e5957000 	ldr	r7, [r5]
   178b0:	e3170501 	tst	r7, #4194304	; 0x400000
   178b4:	1a000022 	bne	17944 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x128>
   178b8:	e1a07907 	lsl	r7, r7, #18
   178bc:	e1a07927 	lsr	r7, r7, #18
   178c0:	e240000a 	sub	r0, r0, #10
   178c4:	e1570000 	cmp	r7, r0
   178c8:	0a000003 	beq	178dc <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0xc0>
   178cc:	e59f20a4 	ldr	r2, [pc, #164]	; 17978 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x15c>
   178d0:	e59f10a4 	ldr	r1, [pc, #164]	; 1797c <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x160>
   178d4:	e59f00a4 	ldr	r0, [pc, #164]	; 17980 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x164>
   178d8:	eb000a1d 	bl	1a154 <assertion_failed>
   178dc:	e3570004 	cmp	r7, #4
   178e0:	9a000012 	bls	17930 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x114>
   178e4:	e2476004 	sub	r6, r7, #4
   178e8:	e1a02006 	mov	r2, r6
   178ec:	e285100a 	add	r1, r5, #10
   178f0:	e1a00005 	mov	r0, r5
   178f4:	eb0024ae 	bl	20bb4 <memcpy>
   178f8:	e3580000 	cmp	r8, #0
   178fc:	0a000018 	beq	17964 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x148>
   17900:	e5886000 	str	r6, [r8]
   17904:	eaffffdf 	b	17888 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x6c>
   17908:	e59f2074 	ldr	r2, [pc, #116]	; 17984 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x168>
   1790c:	e59f1068 	ldr	r1, [pc, #104]	; 1797c <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x160>
   17910:	e59f0070 	ldr	r0, [pc, #112]	; 17988 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x16c>
   17914:	eb000a0e 	bl	1a154 <assertion_failed>
   17918:	eaffffc7 	b	1783c <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x20>
   1791c:	e3a02d07 	mov	r2, #448	; 0x1c0
   17920:	e59f1054 	ldr	r1, [pc, #84]	; 1797c <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x160>
   17924:	e59f0060 	ldr	r0, [pc, #96]	; 1798c <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x170>
   17928:	eb000a09 	bl	1a154 <assertion_failed>
   1792c:	eaffffc4 	b	17844 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x28>
   17930:	e3a02f76 	mov	r2, #472	; 0x1d8
   17934:	e59f1040 	ldr	r1, [pc, #64]	; 1797c <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x160>
   17938:	e59f0050 	ldr	r0, [pc, #80]	; 17990 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x174>
   1793c:	eb000a04 	bl	1a154 <assertion_failed>
   17940:	eaffffcf 	b	17884 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x68>
   17944:	eb0013f5 	bl	1c920 <CLogger::Get()>
   17948:	e58d7000 	str	r7, [sp]
   1794c:	e59f3040 	ldr	r3, [pc, #64]	; 17994 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x178>
   17950:	e3a02002 	mov	r2, #2
   17954:	e59f103c 	ldr	r1, [pc, #60]	; 17998 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x17c>
   17958:	e1a04006 	mov	r4, r6
   1795c:	eb001598 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17960:	eaffffc8 	b	17888 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x6c>
   17964:	e59f2030 	ldr	r2, [pc, #48]	; 1799c <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x180>
   17968:	e59f100c 	ldr	r1, [pc, #12]	; 1797c <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x160>
   1796c:	e59f002c 	ldr	r0, [pc, #44]	; 179a0 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x184>
   17970:	eb0009f7 	bl	1a154 <assertion_failed>
   17974:	eaffffe1 	b	17900 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0xe4>
   17978:	000001d7 	.word	0x000001d7
   1797c:	0002566c 	.word	0x0002566c
   17980:	00025678 	.word	0x00025678
   17984:	000001bf 	.word	0x000001bf
   17988:	000252bc 	.word	0x000252bc
   1798c:	000242a4 	.word	0x000242a4
   17990:	000254f0 	.word	0x000254f0
   17994:	000254b8 	.word	0x000254b8
   17998:	00025664 	.word	0x00025664
   1799c:	000001e3 	.word	0x000001e3
   179a0:	000252d4 	.word	0x000252d4

000179a4 <CLAN7800Device::SendFrame(void const*, unsigned int) [clone .part.0]>:
   179a4:	e92d4070 	push	{r4, r5, r6, lr}
   179a8:	e2516000 	subs	r6, r1, #0
   179ac:	e24dde65 	sub	sp, sp, #1616	; 0x650
   179b0:	e1a05000 	mov	r5, r0
   179b4:	e1a04002 	mov	r4, r2
   179b8:	0a000018 	beq	17a20 <CLAN7800Device::SendFrame(void const*, unsigned int) [clone .part.0]+0x7c>
   179bc:	e1a01006 	mov	r1, r6
   179c0:	e1a02004 	mov	r2, r4
   179c4:	e28d0010 	add	r0, sp, #16
   179c8:	eb002479 	bl	20bb4 <memcpy>
   179cc:	e3a02000 	mov	r2, #0
   179d0:	e3c434ff 	bic	r3, r4, #-16777216	; 0xff000000
   179d4:	e5951014 	ldr	r1, [r5, #20]
   179d8:	e3c3360f 	bic	r3, r3, #15728640	; 0xf00000
   179dc:	e3833501 	orr	r3, r3, #4194304	; 0x400000
   179e0:	e1510002 	cmp	r1, r2
   179e4:	e58d3008 	str	r3, [sp, #8]
   179e8:	e58d200c 	str	r2, [sp, #12]
   179ec:	0a000010 	beq	17a34 <CLAN7800Device::SendFrame(void const*, unsigned int) [clone .part.0]+0x90>
   179f0:	e1a00005 	mov	r0, r5
   179f4:	ebfff2e4 	bl	1458c <CUSBFunction::GetHost() const>
   179f8:	e3a0c000 	mov	ip, #0
   179fc:	e5951014 	ldr	r1, [r5, #20]
   17a00:	e2843008 	add	r3, r4, #8
   17a04:	e28d2008 	add	r2, sp, #8
   17a08:	e58dc000 	str	ip, [sp]
   17a0c:	ebffda53 	bl	e360 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   17a10:	e1e00000 	mvn	r0, r0
   17a14:	e1a00fa0 	lsr	r0, r0, #31
   17a18:	e28dde65 	add	sp, sp, #1616	; 0x650
   17a1c:	e8bd8070 	pop	{r4, r5, r6, pc}
   17a20:	e59f2020 	ldr	r2, [pc, #32]	; 17a48 <CLAN7800Device::SendFrame(void const*, unsigned int) [clone .part.0]+0xa4>
   17a24:	e59f1020 	ldr	r1, [pc, #32]	; 17a4c <CLAN7800Device::SendFrame(void const*, unsigned int) [clone .part.0]+0xa8>
   17a28:	e59f0020 	ldr	r0, [pc, #32]	; 17a50 <CLAN7800Device::SendFrame(void const*, unsigned int) [clone .part.0]+0xac>
   17a2c:	eb0009c8 	bl	1a154 <assertion_failed>
   17a30:	eaffffe1 	b	179bc <CLAN7800Device::SendFrame(void const*, unsigned int) [clone .part.0]+0x18>
   17a34:	e59f2018 	ldr	r2, [pc, #24]	; 17a54 <CLAN7800Device::SendFrame(void const*, unsigned int) [clone .part.0]+0xb0>
   17a38:	e59f100c 	ldr	r1, [pc, #12]	; 17a4c <CLAN7800Device::SendFrame(void const*, unsigned int) [clone .part.0]+0xa8>
   17a3c:	e59f0014 	ldr	r0, [pc, #20]	; 17a58 <CLAN7800Device::SendFrame(void const*, unsigned int) [clone .part.0]+0xb4>
   17a40:	eb0009c3 	bl	1a154 <assertion_failed>
   17a44:	eaffffe9 	b	179f0 <CLAN7800Device::SendFrame(void const*, unsigned int) [clone .part.0]+0x4c>
   17a48:	000001b2 	.word	0x000001b2
   17a4c:	0002566c 	.word	0x0002566c
   17a50:	000242a4 	.word	0x000242a4
   17a54:	000001b9 	.word	0x000001b9
   17a58:	00025284 	.word	0x00025284

00017a5c <CLAN7800Device::SendFrame(void const*, unsigned int)>:
   17a5c:	e3520d19 	cmp	r2, #1600	; 0x640
   17a60:	8a000000 	bhi	17a68 <CLAN7800Device::SendFrame(void const*, unsigned int)+0xc>
   17a64:	eaffffce 	b	179a4 <CLAN7800Device::SendFrame(void const*, unsigned int) [clone .part.0]>
   17a68:	e3a00000 	mov	r0, #0
   17a6c:	e12fff1e 	bx	lr

00017a70 <CLAN7800Device::CLAN7800Device(CUSBFunction*)>:
   17a70:	e92d4010 	push	{r4, lr}
   17a74:	e1a04000 	mov	r4, r0
   17a78:	eb000379 	bl	18864 <CNetDevice::CNetDevice(CUSBFunction*)>
   17a7c:	e3a03000 	mov	r3, #0
   17a80:	e59f2018 	ldr	r2, [pc, #24]	; 17aa0 <CLAN7800Device::CLAN7800Device(CUSBFunction*)+0x30>
   17a84:	e5843010 	str	r3, [r4, #16]
   17a88:	e5842000 	str	r2, [r4]
   17a8c:	e5843014 	str	r3, [r4, #20]
   17a90:	e2840018 	add	r0, r4, #24
   17a94:	eb0002c7 	bl	185b8 <CMACAddress::CMACAddress()>
   17a98:	e1a00004 	mov	r0, r4
   17a9c:	e8bd8010 	pop	{r4, pc}
   17aa0:	00025634 	.word	0x00025634

00017aa4 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>:
   17aa4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   17aa8:	e24dd01c 	sub	sp, sp, #28
   17aac:	e28d5018 	add	r5, sp, #24
   17ab0:	e1a06001 	mov	r6, r1
   17ab4:	e5252004 	str	r2, [r5, #-4]!
   17ab8:	e1a04000 	mov	r4, r0
   17abc:	ebfff2b2 	bl	1458c <CUSBFunction::GetHost() const>
   17ac0:	e1a07000 	mov	r7, r0
   17ac4:	e1a00004 	mov	r0, r4
   17ac8:	ebfff29e 	bl	14548 <CUSBFunction::GetEndpoint0() const>
   17acc:	e3a04000 	mov	r4, #0
   17ad0:	e3a03004 	mov	r3, #4
   17ad4:	e6ff2076 	uxth	r2, r6
   17ad8:	e1a01000 	mov	r1, r0
   17adc:	e58d2004 	str	r2, [sp, #4]
   17ae0:	e58d300c 	str	r3, [sp, #12]
   17ae4:	e58d5008 	str	r5, [sp, #8]
   17ae8:	e1a00007 	mov	r0, r7
   17aec:	e58d4000 	str	r4, [sp]
   17af0:	e3a030a0 	mov	r3, #160	; 0xa0
   17af4:	e3a02040 	mov	r2, #64	; 0x40
   17af8:	ebffd9b2 	bl	e1c8 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   17afc:	e1500004 	cmp	r0, r4
   17b00:	a3a00001 	movge	r0, #1
   17b04:	ba000001 	blt	17b10 <CLAN7800Device::WriteReg(unsigned int, unsigned int)+0x6c>
   17b08:	e28dd01c 	add	sp, sp, #28
   17b0c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   17b10:	eb001382 	bl	1c920 <CLogger::Get()>
   17b14:	e58d6000 	str	r6, [sp]
   17b18:	e59f3014 	ldr	r3, [pc, #20]	; 17b34 <CLAN7800Device::WriteReg(unsigned int, unsigned int)+0x90>
   17b1c:	e3a02002 	mov	r2, #2
   17b20:	e59f1010 	ldr	r1, [pc, #16]	; 17b38 <CLAN7800Device::WriteReg(unsigned int, unsigned int)+0x94>
   17b24:	eb001526 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17b28:	e1a00004 	mov	r0, r4
   17b2c:	e28dd01c 	add	sp, sp, #28
   17b30:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   17b34:	000256a8 	.word	0x000256a8
   17b38:	00025664 	.word	0x00025664

00017b3c <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>:
   17b3c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   17b40:	e24dd014 	sub	sp, sp, #20
   17b44:	e1a05001 	mov	r5, r1
   17b48:	e1a07002 	mov	r7, r2
   17b4c:	e1a04000 	mov	r4, r0
   17b50:	ebfff28d 	bl	1458c <CUSBFunction::GetHost() const>
   17b54:	e1a06000 	mov	r6, r0
   17b58:	e1a00004 	mov	r0, r4
   17b5c:	ebfff279 	bl	14548 <CUSBFunction::GetEndpoint0() const>
   17b60:	e3a04000 	mov	r4, #0
   17b64:	e3a03004 	mov	r3, #4
   17b68:	e6ffc075 	uxth	ip, r5
   17b6c:	e1a01000 	mov	r1, r0
   17b70:	e58d300c 	str	r3, [sp, #12]
   17b74:	e58d7008 	str	r7, [sp, #8]
   17b78:	e58dc004 	str	ip, [sp, #4]
   17b7c:	e1a00006 	mov	r0, r6
   17b80:	e58d4000 	str	r4, [sp]
   17b84:	e3a030a1 	mov	r3, #161	; 0xa1
   17b88:	e3a020c0 	mov	r2, #192	; 0xc0
   17b8c:	ebffd98d 	bl	e1c8 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   17b90:	e3500004 	cmp	r0, #4
   17b94:	03a00001 	moveq	r0, #1
   17b98:	0a000006 	beq	17bb8 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)+0x7c>
   17b9c:	eb00135f 	bl	1c920 <CLogger::Get()>
   17ba0:	e58d5000 	str	r5, [sp]
   17ba4:	e59f3014 	ldr	r3, [pc, #20]	; 17bc0 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)+0x84>
   17ba8:	e3a02002 	mov	r2, #2
   17bac:	e59f1010 	ldr	r1, [pc, #16]	; 17bc4 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)+0x88>
   17bb0:	eb001503 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17bb4:	e1a00004 	mov	r0, r4
   17bb8:	e28dd014 	add	sp, sp, #20
   17bbc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   17bc0:	0002552c 	.word	0x0002552c
   17bc4:	00025664 	.word	0x00025664

00017bc8 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
   17bc8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17bcc:	e24dd00c 	sub	sp, sp, #12
   17bd0:	e1a08000 	mov	r8, r0
   17bd4:	e1a09001 	mov	r9, r1
   17bd8:	e1a0a002 	mov	sl, r2
   17bdc:	e1a0b003 	mov	fp, r3
   17be0:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
   17be4:	e59d7034 	ldr	r7, [sp, #52]	; 0x34
   17be8:	eb002270 	bl	205b0 <CTimer::Get()>
   17bec:	e2505000 	subs	r5, r0, #0
   17bf0:	0a00001a 	beq	17c60 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x98>
   17bf4:	e1a00005 	mov	r0, r5
   17bf8:	eb001fa5 	bl	1fa94 <CTimer::GetTicks() const>
   17bfc:	e1a06000 	mov	r6, r0
   17c00:	ea00000e 	b	17c40 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x78>
   17c04:	e1a00005 	mov	r0, r5
   17c08:	eb001fa1 	bl	1fa94 <CTimer::GetTicks() const>
   17c0c:	e0400006 	sub	r0, r0, r6
   17c10:	e1500007 	cmp	r0, r7
   17c14:	2a00000e 	bcs	17c54 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x8c>
   17c18:	e28d2004 	add	r2, sp, #4
   17c1c:	e1a01009 	mov	r1, r9
   17c20:	e1a00008 	mov	r0, r8
   17c24:	ebffffc4 	bl	17b3c <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   17c28:	e3500000 	cmp	r0, #0
   17c2c:	0a000008 	beq	17c54 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x8c>
   17c30:	e59d3004 	ldr	r3, [sp, #4]
   17c34:	e003300a 	and	r3, r3, sl
   17c38:	e153000b 	cmp	r3, fp
   17c3c:	0a000005 	beq	17c58 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x90>
   17c40:	e3540000 	cmp	r4, #0
   17c44:	0affffee 	beq	17c04 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x3c>
   17c48:	e1a00004 	mov	r0, r4
   17c4c:	eb002225 	bl	204e8 <CTimer::SimpleusDelay(unsigned int)>
   17c50:	eaffffeb 	b	17c04 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x3c>
   17c54:	e3a00000 	mov	r0, #0
   17c58:	e28dd00c 	add	sp, sp, #12
   17c5c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17c60:	e59f200c 	ldr	r2, [pc, #12]	; 17c74 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xac>
   17c64:	e59f100c 	ldr	r1, [pc, #12]	; 17c78 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xb0>
   17c68:	e59f000c 	ldr	r0, [pc, #12]	; 17c7c <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xb4>
   17c6c:	eb000938 	bl	1a154 <assertion_failed>
   17c70:	eaffffdf 	b	17bf4 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x2c>
   17c74:	0000028e 	.word	0x0000028e
   17c78:	0002566c 	.word	0x0002566c
   17c7c:	00025504 	.word	0x00025504

00017c80 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)>:
   17c80:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   17c84:	e351001f 	cmp	r1, #31
   17c88:	e24dd008 	sub	sp, sp, #8
   17c8c:	e1a04001 	mov	r4, r1
   17c90:	e1a06000 	mov	r6, r0
   17c94:	e1a08002 	mov	r8, r2
   17c98:	ca00000c 	bgt	17cd0 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0x50>
   17c9c:	e3a05000 	mov	r5, #0
   17ca0:	e3a07064 	mov	r7, #100	; 0x64
   17ca4:	e1a03005 	mov	r3, r5
   17ca8:	e88d00a0 	stm	sp, {r5, r7}
   17cac:	e3a02001 	mov	r2, #1
   17cb0:	e3a01e12 	mov	r1, #288	; 0x120
   17cb4:	e1a00006 	mov	r0, r6
   17cb8:	ebffffc2 	bl	17bc8 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   17cbc:	e1500005 	cmp	r0, r5
   17cc0:	1a000007 	bne	17ce4 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0x64>
   17cc4:	e3a00000 	mov	r0, #0
   17cc8:	e28dd008 	add	sp, sp, #8
   17ccc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   17cd0:	e59f2068 	ldr	r2, [pc, #104]	; 17d40 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0xc0>
   17cd4:	e59f1068 	ldr	r1, [pc, #104]	; 17d44 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0xc4>
   17cd8:	e59f0068 	ldr	r0, [pc, #104]	; 17d48 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0xc8>
   17cdc:	eb00091c 	bl	1a154 <assertion_failed>
   17ce0:	eaffffed 	b	17c9c <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0x1c>
   17ce4:	e1a02008 	mov	r2, r8
   17ce8:	e3a01f49 	mov	r1, #292	; 0x124
   17cec:	e1a00006 	mov	r0, r6
   17cf0:	ebffff6b 	bl	17aa4 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   17cf4:	e3500000 	cmp	r0, #0
   17cf8:	0afffff1 	beq	17cc4 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0x44>
   17cfc:	e1a02304 	lsl	r2, r4, #6
   17d00:	e2022d1f 	and	r2, r2, #1984	; 0x7c0
   17d04:	e3822b02 	orr	r2, r2, #2048	; 0x800
   17d08:	e3822003 	orr	r2, r2, #3
   17d0c:	e3a01e12 	mov	r1, #288	; 0x120
   17d10:	e1a00006 	mov	r0, r6
   17d14:	ebffff62 	bl	17aa4 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   17d18:	e3500000 	cmp	r0, #0
   17d1c:	0affffe8 	beq	17cc4 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0x44>
   17d20:	e88d00a0 	stm	sp, {r5, r7}
   17d24:	e1a03005 	mov	r3, r5
   17d28:	e1a00006 	mov	r0, r6
   17d2c:	e3a02001 	mov	r2, #1
   17d30:	e3a01e12 	mov	r1, #288	; 0x120
   17d34:	ebffffa3 	bl	17bc8 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   17d38:	e28dd008 	add	sp, sp, #8
   17d3c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   17d40:	00000259 	.word	0x00000259
   17d44:	0002566c 	.word	0x0002566c
   17d48:	00025510 	.word	0x00025510

00017d4c <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>:
   17d4c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   17d50:	e351001f 	cmp	r1, #31
   17d54:	e24dd014 	sub	sp, sp, #20
   17d58:	e1a04001 	mov	r4, r1
   17d5c:	e1a06000 	mov	r6, r0
   17d60:	e1a09002 	mov	r9, r2
   17d64:	ca000019 	bgt	17dd0 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x84>
   17d68:	e3a05000 	mov	r5, #0
   17d6c:	e3a08064 	mov	r8, #100	; 0x64
   17d70:	e1a03005 	mov	r3, r5
   17d74:	e88d0120 	stm	sp, {r5, r8}
   17d78:	e3a02001 	mov	r2, #1
   17d7c:	e3a01e12 	mov	r1, #288	; 0x120
   17d80:	e1a00006 	mov	r0, r6
   17d84:	ebffff8f 	bl	17bc8 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   17d88:	e2507000 	subs	r7, r0, #0
   17d8c:	1a000002 	bne	17d9c <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x50>
   17d90:	e1a00007 	mov	r0, r7
   17d94:	e28dd014 	add	sp, sp, #20
   17d98:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   17d9c:	e1a02304 	lsl	r2, r4, #6
   17da0:	e2022d1f 	and	r2, r2, #1984	; 0x7c0
   17da4:	e3822b02 	orr	r2, r2, #2048	; 0x800
   17da8:	e3822001 	orr	r2, r2, #1
   17dac:	e3a01e12 	mov	r1, #288	; 0x120
   17db0:	e1a00006 	mov	r0, r6
   17db4:	ebffff3a 	bl	17aa4 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   17db8:	e1500005 	cmp	r0, r5
   17dbc:	1a000008 	bne	17de4 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x98>
   17dc0:	e3a07000 	mov	r7, #0
   17dc4:	e1a00007 	mov	r0, r7
   17dc8:	e28dd014 	add	sp, sp, #20
   17dcc:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   17dd0:	e3a02e27 	mov	r2, #624	; 0x270
   17dd4:	e59f1070 	ldr	r1, [pc, #112]	; 17e4c <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x100>
   17dd8:	e59f0070 	ldr	r0, [pc, #112]	; 17e50 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x104>
   17ddc:	eb0008dc 	bl	1a154 <assertion_failed>
   17de0:	eaffffe0 	b	17d68 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x1c>
   17de4:	e88d0120 	stm	sp, {r5, r8}
   17de8:	e1a03005 	mov	r3, r5
   17dec:	e3a02001 	mov	r2, #1
   17df0:	e3a01e12 	mov	r1, #288	; 0x120
   17df4:	e1a00006 	mov	r0, r6
   17df8:	ebffff72 	bl	17bc8 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   17dfc:	e3500000 	cmp	r0, #0
   17e00:	0affffee 	beq	17dc0 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x74>
   17e04:	e1a00006 	mov	r0, r6
   17e08:	e28d200c 	add	r2, sp, #12
   17e0c:	e3a01f49 	mov	r1, #292	; 0x124
   17e10:	ebffff49 	bl	17b3c <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   17e14:	e2507000 	subs	r7, r0, #0
   17e18:	0affffe8 	beq	17dc0 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x74>
   17e1c:	e3590000 	cmp	r9, #0
   17e20:	0a000004 	beq	17e38 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0xec>
   17e24:	e1a00007 	mov	r0, r7
   17e28:	e59d300c 	ldr	r3, [sp, #12]
   17e2c:	e1c930b0 	strh	r3, [r9]
   17e30:	e28dd014 	add	sp, sp, #20
   17e34:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   17e38:	e3a02fa1 	mov	r2, #644	; 0x284
   17e3c:	e59f1008 	ldr	r1, [pc, #8]	; 17e4c <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x100>
   17e40:	e59f000c 	ldr	r0, [pc, #12]	; 17e54 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x108>
   17e44:	eb0008c2 	bl	1a154 <assertion_failed>
   17e48:	eafffff5 	b	17e24 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0xd8>
   17e4c:	0002566c 	.word	0x0002566c
   17e50:	00025510 	.word	0x00025510
   17e54:	00025520 	.word	0x00025520

00017e58 <CLAN7800Device::IsLinkUp()>:
   17e58:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   17e5c:	e24dd00c 	sub	sp, sp, #12
   17e60:	e28d2006 	add	r2, sp, #6
   17e64:	e3a01001 	mov	r1, #1
   17e68:	ebffffb7 	bl	17d4c <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>
   17e6c:	e3500000 	cmp	r0, #0
   17e70:	11dd00b6 	ldrhne	r0, [sp, #6]
   17e74:	11a00120 	lsrne	r0, r0, #2
   17e78:	12000001 	andne	r0, r0, #1
   17e7c:	e28dd00c 	add	sp, sp, #12
   17e80:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00017e84 <CLAN7800Device::GetLinkSpeed()>:
   17e84:	e92d4010 	push	{r4, lr}
   17e88:	e3a02000 	mov	r2, #0
   17e8c:	e24dd008 	sub	sp, sp, #8
   17e90:	e3a0101f 	mov	r1, #31
   17e94:	e1a04000 	mov	r4, r0
   17e98:	ebffff78 	bl	17c80 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)>
   17e9c:	e3500000 	cmp	r0, #0
   17ea0:	1a000002 	bne	17eb0 <CLAN7800Device::GetLinkSpeed()+0x2c>
   17ea4:	e3a00006 	mov	r0, #6
   17ea8:	e28dd008 	add	sp, sp, #8
   17eac:	e8bd8010 	pop	{r4, pc}
   17eb0:	e1a00004 	mov	r0, r4
   17eb4:	e28d2006 	add	r2, sp, #6
   17eb8:	e3a0101c 	mov	r1, #28
   17ebc:	ebffffa2 	bl	17d4c <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>
   17ec0:	e3500000 	cmp	r0, #0
   17ec4:	0afffff6 	beq	17ea4 <CLAN7800Device::GetLinkSpeed()+0x20>
   17ec8:	e1dd30b6 	ldrh	r3, [sp, #6]
   17ecc:	e3130901 	tst	r3, #16384	; 0x4000
   17ed0:	1a00000d 	bne	17f0c <CLAN7800Device::GetLinkSpeed()+0x88>
   17ed4:	e3130902 	tst	r3, #32768	; 0x8000
   17ed8:	0afffff1 	beq	17ea4 <CLAN7800Device::GetLinkSpeed()+0x20>
   17edc:	e1a031c3 	asr	r3, r3, #3
   17ee0:	e2033007 	and	r3, r3, #7
   17ee4:	e3530006 	cmp	r3, #6
   17ee8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   17eec:	eaffffec 	b	17ea4 <CLAN7800Device::GetLinkSpeed()+0x20>
   17ef0:	00017f2c 	.word	0x00017f2c
   17ef4:	00017f24 	.word	0x00017f24
   17ef8:	00017f4c 	.word	0x00017f4c
   17efc:	00017ea4 	.word	0x00017ea4
   17f00:	00017f44 	.word	0x00017f44
   17f04:	00017f3c 	.word	0x00017f3c
   17f08:	00017f34 	.word	0x00017f34
   17f0c:	e59f2040 	ldr	r2, [pc, #64]	; 17f54 <CLAN7800Device::GetLinkSpeed()+0xd0>
   17f10:	e59f1040 	ldr	r1, [pc, #64]	; 17f58 <CLAN7800Device::GetLinkSpeed()+0xd4>
   17f14:	e59f0040 	ldr	r0, [pc, #64]	; 17f5c <CLAN7800Device::GetLinkSpeed()+0xd8>
   17f18:	eb00088d 	bl	1a154 <assertion_failed>
   17f1c:	e1dd30b6 	ldrh	r3, [sp, #6]
   17f20:	eaffffeb 	b	17ed4 <CLAN7800Device::GetLinkSpeed()+0x50>
   17f24:	e3a00002 	mov	r0, #2
   17f28:	eaffffde 	b	17ea8 <CLAN7800Device::GetLinkSpeed()+0x24>
   17f2c:	e3a00000 	mov	r0, #0
   17f30:	eaffffdc 	b	17ea8 <CLAN7800Device::GetLinkSpeed()+0x24>
   17f34:	e3a00005 	mov	r0, #5
   17f38:	eaffffda 	b	17ea8 <CLAN7800Device::GetLinkSpeed()+0x24>
   17f3c:	e3a00003 	mov	r0, #3
   17f40:	eaffffd8 	b	17ea8 <CLAN7800Device::GetLinkSpeed()+0x24>
   17f44:	e3a00001 	mov	r0, #1
   17f48:	eaffffd6 	b	17ea8 <CLAN7800Device::GetLinkSpeed()+0x24>
   17f4c:	e3a00004 	mov	r0, #4
   17f50:	eaffffd4 	b	17ea8 <CLAN7800Device::GetLinkSpeed()+0x24>
   17f54:	00000203 	.word	0x00000203
   17f58:	0002566c 	.word	0x0002566c
   17f5c:	000256c4 	.word	0x000256c4

00017f60 <CLAN7800Device::InitPHY()>:
   17f60:	e92d4010 	push	{r4, lr}
   17f64:	e3a02000 	mov	r2, #0
   17f68:	e24dd008 	sub	sp, sp, #8
   17f6c:	e3a0101f 	mov	r1, #31
   17f70:	e1a04000 	mov	r4, r0
   17f74:	ebffff41 	bl	17c80 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)>
   17f78:	e3500000 	cmp	r0, #0
   17f7c:	1a000001 	bne	17f88 <CLAN7800Device::InitPHY()+0x28>
   17f80:	e28dd008 	add	sp, sp, #8
   17f84:	e8bd8010 	pop	{r4, pc}
   17f88:	e28d2006 	add	r2, sp, #6
   17f8c:	e3a0101d 	mov	r1, #29
   17f90:	e1a00004 	mov	r0, r4
   17f94:	ebffff6c 	bl	17d4c <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>
   17f98:	e3500000 	cmp	r0, #0
   17f9c:	0afffff7 	beq	17f80 <CLAN7800Device::InitPHY()+0x20>
   17fa0:	e1dd30b6 	ldrh	r3, [sp, #6]
   17fa4:	e1a00004 	mov	r0, r4
   17fa8:	e3c330ff 	bic	r3, r3, #255	; 0xff
   17fac:	e3833061 	orr	r3, r3, #97	; 0x61
   17fb0:	e1a02003 	mov	r2, r3
   17fb4:	e3a0101d 	mov	r1, #29
   17fb8:	e1cd30b6 	strh	r3, [sp, #6]
   17fbc:	ebffff2f 	bl	17c80 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)>
   17fc0:	e28dd008 	add	sp, sp, #8
   17fc4:	e8bd8010 	pop	{r4, pc}

00017fc8 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>:
   17fc8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   17fcc:	e24dd00c 	sub	sp, sp, #12
   17fd0:	e1a06002 	mov	r6, r2
   17fd4:	e28d2004 	add	r2, sp, #4
   17fd8:	e1a04003 	mov	r4, r3
   17fdc:	e1a05000 	mov	r5, r0
   17fe0:	e1a07001 	mov	r7, r1
   17fe4:	ebfffed4 	bl	17b3c <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   17fe8:	e3500000 	cmp	r0, #0
   17fec:	0a000007 	beq	18010 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)+0x48>
   17ff0:	e59d3004 	ldr	r3, [sp, #4]
   17ff4:	e1a01007 	mov	r1, r7
   17ff8:	e0044003 	and	r4, r4, r3
   17ffc:	e1844006 	orr	r4, r4, r6
   18000:	e1a00005 	mov	r0, r5
   18004:	e1a02004 	mov	r2, r4
   18008:	e58d4004 	str	r4, [sp, #4]
   1800c:	ebfffea4 	bl	17aa4 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   18010:	e28dd00c 	add	sp, sp, #12
   18014:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00018018 <CLAN7800Device::InitMACAddress()>:
   18018:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1801c:	e24dd034 	sub	sp, sp, #52	; 0x34
   18020:	e1a04000 	mov	r4, r0
   18024:	e28d0008 	add	r0, sp, #8
   18028:	eb00086d 	bl	1a1e4 <CBcmPropertyTags::CBcmPropertyTags()>
   1802c:	e3a03000 	mov	r3, #0
   18030:	e28d0008 	add	r0, sp, #8
   18034:	e58d3000 	str	r3, [sp]
   18038:	e28d201c 	add	r2, sp, #28
   1803c:	e3a03014 	mov	r3, #20
   18040:	e59f10e0 	ldr	r1, [pc, #224]	; 18128 <CLAN7800Device::InitMACAddress()+0x110>
   18044:	eb0008bd 	bl	1a340 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   18048:	e3500000 	cmp	r0, #0
   1804c:	1a000005 	bne	18068 <CLAN7800Device::InitMACAddress()+0x50>
   18050:	e3a04000 	mov	r4, #0
   18054:	e28d0008 	add	r0, sp, #8
   18058:	eb000867 	bl	1a1fc <CBcmPropertyTags::~CBcmPropertyTags()>
   1805c:	e1a00004 	mov	r0, r4
   18060:	e28dd034 	add	sp, sp, #52	; 0x34
   18064:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   18068:	e2846018 	add	r6, r4, #24
   1806c:	e1a00006 	mov	r0, r6
   18070:	e28d1028 	add	r1, sp, #40	; 0x28
   18074:	eb000174 	bl	1864c <CMACAddress::Set(unsigned char const*)>
   18078:	e59d5028 	ldr	r5, [sp, #40]	; 0x28
   1807c:	e3a01f47 	mov	r1, #284	; 0x11c
   18080:	e1a02005 	mov	r2, r5
   18084:	e1a00004 	mov	r0, r4
   18088:	e1dd72bc 	ldrh	r7, [sp, #44]	; 0x2c
   1808c:	ebfffe84 	bl	17aa4 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   18090:	e3500000 	cmp	r0, #0
   18094:	0affffed 	beq	18050 <CLAN7800Device::InitMACAddress()+0x38>
   18098:	e1a02007 	mov	r2, r7
   1809c:	e3a01f46 	mov	r1, #280	; 0x118
   180a0:	e1a00004 	mov	r0, r4
   180a4:	ebfffe7e 	bl	17aa4 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   180a8:	e3500000 	cmp	r0, #0
   180ac:	0affffe7 	beq	18050 <CLAN7800Device::InitMACAddress()+0x38>
   180b0:	e1a02005 	mov	r2, r5
   180b4:	e59f1070 	ldr	r1, [pc, #112]	; 1812c <CLAN7800Device::InitMACAddress()+0x114>
   180b8:	e1a00004 	mov	r0, r4
   180bc:	ebfffe78 	bl	17aa4 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   180c0:	e3500000 	cmp	r0, #0
   180c4:	0affffe1 	beq	18050 <CLAN7800Device::InitMACAddress()+0x38>
   180c8:	e1a00004 	mov	r0, r4
   180cc:	e3872102 	orr	r2, r7, #-2147483648	; 0x80000000
   180d0:	e3a01b01 	mov	r1, #1024	; 0x400
   180d4:	ebfffe72 	bl	17aa4 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   180d8:	e2504000 	subs	r4, r0, #0
   180dc:	0affffdb 	beq	18050 <CLAN7800Device::InitMACAddress()+0x38>
   180e0:	e28d000c 	add	r0, sp, #12
   180e4:	eb00199a 	bl	1e754 <CString::CString()>
   180e8:	e28d100c 	add	r1, sp, #12
   180ec:	e1a00006 	mov	r0, r6
   180f0:	eb0001b6 	bl	187d0 <CMACAddress::Format(CString*) const>
   180f4:	eb001209 	bl	1c920 <CLogger::Get()>
   180f8:	e1a05000 	mov	r5, r0
   180fc:	e28d000c 	add	r0, sp, #12
   18100:	eb0019a9 	bl	1e7ac <CString::operator char const*() const>
   18104:	e59f3024 	ldr	r3, [pc, #36]	; 18130 <CLAN7800Device::InitMACAddress()+0x118>
   18108:	e58d0000 	str	r0, [sp]
   1810c:	e3a02004 	mov	r2, #4
   18110:	e1a00005 	mov	r0, r5
   18114:	e59f1018 	ldr	r1, [pc, #24]	; 18134 <CLAN7800Device::InitMACAddress()+0x11c>
   18118:	eb0013a9 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1811c:	e28d000c 	add	r0, sp, #12
   18120:	eb001958 	bl	1e688 <CString::~CString()>
   18124:	eaffffca 	b	18054 <CLAN7800Device::InitMACAddress()+0x3c>
   18128:	00010003 	.word	0x00010003
   1812c:	00000404 	.word	0x00000404
   18130:	00025310 	.word	0x00025310
   18134:	00025664 	.word	0x00025664

00018138 <CLAN7800Device::Configure()>:
   18138:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   1813c:	e24dd014 	sub	sp, sp, #20
   18140:	e1a05000 	mov	r5, r0
   18144:	ebfff0df 	bl	144c8 <CUSBFunction::GetNumEndpoints() const>
   18148:	e3500003 	cmp	r0, #3
   1814c:	03a06005 	moveq	r6, #5
   18150:	03a07014 	moveq	r7, #20
   18154:	0a000004 	beq	1816c <CLAN7800Device::Configure()+0x34>
   18158:	ea000034 	b	18230 <CLAN7800Device::Configure()+0xf8>
   1815c:	e5d43003 	ldrb	r3, [r4, #3]
   18160:	e203303f 	and	r3, r3, #63	; 0x3f
   18164:	e3530002 	cmp	r3, #2
   18168:	0a00001f 	beq	181ec <CLAN7800Device::Configure()+0xb4>
   1816c:	e1a01006 	mov	r1, r6
   18170:	e1a00005 	mov	r0, r5
   18174:	ebfff146 	bl	14694 <CUSBFunction::GetDescriptor(unsigned char)>
   18178:	e2504000 	subs	r4, r0, #0
   1817c:	1afffff6 	bne	1815c <CLAN7800Device::Configure()+0x24>
   18180:	e5953010 	ldr	r3, [r5, #16]
   18184:	e1a00005 	mov	r0, r5
   18188:	e3530000 	cmp	r3, #0
   1818c:	0a00004f 	beq	182d0 <CLAN7800Device::Configure()+0x198>
   18190:	e5953014 	ldr	r3, [r5, #20]
   18194:	e3530000 	cmp	r3, #0
   18198:	0a00004c 	beq	182d0 <CLAN7800Device::Configure()+0x198>
   1819c:	ebfff10b 	bl	145d0 <CUSBFunction::Configure()>
   181a0:	e2506000 	subs	r6, r0, #0
   181a4:	0a00004f 	beq	182e8 <CLAN7800Device::Configure()+0x1b0>
   181a8:	e28d200c 	add	r2, sp, #12
   181ac:	e1a01004 	mov	r1, r4
   181b0:	e1a00005 	mov	r0, r5
   181b4:	ebfffe60 	bl	17b3c <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   181b8:	e3500000 	cmp	r0, #0
   181bc:	1a000030 	bne	18284 <CLAN7800Device::Configure()+0x14c>
   181c0:	eb0011d6 	bl	1c920 <CLogger::Get()>
   181c4:	e1dd20be 	ldrh	r2, [sp, #14]
   181c8:	e59f33c0 	ldr	r3, [pc, #960]	; 18590 <CLAN7800Device::Configure()+0x458>
   181cc:	e58d2000 	str	r2, [sp]
   181d0:	e59f13bc 	ldr	r1, [pc, #956]	; 18594 <CLAN7800Device::Configure()+0x45c>
   181d4:	e3a02001 	mov	r2, #1
   181d8:	eb001379 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   181dc:	e3a06000 	mov	r6, #0
   181e0:	e1a00006 	mov	r0, r6
   181e4:	e28dd014 	add	sp, sp, #20
   181e8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   181ec:	e1d430d2 	ldrsb	r3, [r4, #2]
   181f0:	e3530000 	cmp	r3, #0
   181f4:	ba000014 	blt	1824c <CLAN7800Device::Configure()+0x114>
   181f8:	e5953014 	ldr	r3, [r5, #20]
   181fc:	e1a00005 	mov	r0, r5
   18200:	e3530000 	cmp	r3, #0
   18204:	1a000031 	bne	182d0 <CLAN7800Device::Configure()+0x198>
   18208:	ebfff0be 	bl	14508 <CUSBFunction::GetDevice() const>
   1820c:	e1a09000 	mov	r9, r0
   18210:	e1a00007 	mov	r0, r7
   18214:	eb002562 	bl	217a4 <operator new(unsigned int)>
   18218:	e1a08000 	mov	r8, r0
   1821c:	e1a02004 	mov	r2, r4
   18220:	e1a01009 	mov	r1, r9
   18224:	ebffd6d1 	bl	dd70 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   18228:	e5858014 	str	r8, [r5, #20]
   1822c:	eaffffce 	b	1816c <CLAN7800Device::Configure()+0x34>
   18230:	e3a06000 	mov	r6, #0
   18234:	e1a00005 	mov	r0, r5
   18238:	e59f1354 	ldr	r1, [pc, #852]	; 18594 <CLAN7800Device::Configure()+0x45c>
   1823c:	ebfff127 	bl	146e0 <CUSBFunction::ConfigurationError(char const*) const>
   18240:	e1a00006 	mov	r0, r6
   18244:	e28dd014 	add	sp, sp, #20
   18248:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1824c:	e5953010 	ldr	r3, [r5, #16]
   18250:	e1a00005 	mov	r0, r5
   18254:	e3530000 	cmp	r3, #0
   18258:	1a00001c 	bne	182d0 <CLAN7800Device::Configure()+0x198>
   1825c:	ebfff0a9 	bl	14508 <CUSBFunction::GetDevice() const>
   18260:	e1a09000 	mov	r9, r0
   18264:	e1a00007 	mov	r0, r7
   18268:	eb00254d 	bl	217a4 <operator new(unsigned int)>
   1826c:	e1a08000 	mov	r8, r0
   18270:	e1a02004 	mov	r2, r4
   18274:	e1a01009 	mov	r1, r9
   18278:	ebffd6bc 	bl	dd70 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   1827c:	e5858010 	str	r8, [r5, #16]
   18280:	eaffffb9 	b	1816c <CLAN7800Device::Configure()+0x34>
   18284:	e1dd30be 	ldrh	r3, [sp, #14]
   18288:	e3530b1e 	cmp	r3, #30720	; 0x7800
   1828c:	1affffcb 	bne	181c0 <CLAN7800Device::Configure()+0x88>
   18290:	e3e03000 	mvn	r3, #0
   18294:	e3a02002 	mov	r2, #2
   18298:	e3a01010 	mov	r1, #16
   1829c:	e1a00005 	mov	r0, r5
   182a0:	ebffff48 	bl	17fc8 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   182a4:	e3500000 	cmp	r0, #0
   182a8:	1a000016 	bne	18308 <CLAN7800Device::Configure()+0x1d0>
   182ac:	e3a06000 	mov	r6, #0
   182b0:	eb00119a 	bl	1c920 <CLogger::Get()>
   182b4:	e59f32dc 	ldr	r3, [pc, #732]	; 18598 <CLAN7800Device::Configure()+0x460>
   182b8:	e3a02001 	mov	r2, #1
   182bc:	e59f12d0 	ldr	r1, [pc, #720]	; 18594 <CLAN7800Device::Configure()+0x45c>
   182c0:	eb00133f 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   182c4:	e1a00006 	mov	r0, r6
   182c8:	e28dd014 	add	sp, sp, #20
   182cc:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   182d0:	e3a06000 	mov	r6, #0
   182d4:	e59f12b8 	ldr	r1, [pc, #696]	; 18594 <CLAN7800Device::Configure()+0x45c>
   182d8:	ebfff100 	bl	146e0 <CUSBFunction::ConfigurationError(char const*) const>
   182dc:	e1a00006 	mov	r0, r6
   182e0:	e28dd014 	add	sp, sp, #20
   182e4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   182e8:	eb00118c 	bl	1c920 <CLogger::Get()>
   182ec:	e59f32a8 	ldr	r3, [pc, #680]	; 1859c <CLAN7800Device::Configure()+0x464>
   182f0:	e3a02001 	mov	r2, #1
   182f4:	e59f1298 	ldr	r1, [pc, #664]	; 18594 <CLAN7800Device::Configure()+0x45c>
   182f8:	eb001331 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   182fc:	e1a00006 	mov	r0, r6
   18300:	e28dd014 	add	sp, sp, #20
   18304:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   18308:	e3a01064 	mov	r1, #100	; 0x64
   1830c:	e3a02ffa 	mov	r2, #1000	; 0x3e8
   18310:	e58d1004 	str	r1, [sp, #4]
   18314:	e58d2000 	str	r2, [sp]
   18318:	e1a03004 	mov	r3, r4
   1831c:	e3a02002 	mov	r2, #2
   18320:	e3a01010 	mov	r1, #16
   18324:	e1a00005 	mov	r0, r5
   18328:	ebfffe26 	bl	17bc8 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   1832c:	e3500000 	cmp	r0, #0
   18330:	0affffdd 	beq	182ac <CLAN7800Device::Configure()+0x174>
   18334:	e1a00005 	mov	r0, r5
   18338:	ebffff36 	bl	18018 <CLAN7800Device::InitMACAddress()>
   1833c:	e2506000 	subs	r6, r0, #0
   18340:	0a000052 	beq	18490 <CLAN7800Device::Configure()+0x358>
   18344:	e3a02018 	mov	r2, #24
   18348:	e3a01090 	mov	r1, #144	; 0x90
   1834c:	e1a00005 	mov	r0, r5
   18350:	ebfffdd3 	bl	17aa4 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   18354:	e3500000 	cmp	r0, #0
   18358:	0affff9f 	beq	181dc <CLAN7800Device::Configure()+0xa4>
   1835c:	e3a02b02 	mov	r2, #2048	; 0x800
   18360:	e3a01094 	mov	r1, #148	; 0x94
   18364:	e1a00005 	mov	r0, r5
   18368:	ebfffdcd 	bl	17aa4 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   1836c:	e3500000 	cmp	r0, #0
   18370:	0affff99 	beq	181dc <CLAN7800Device::Configure()+0xa4>
   18374:	e3e03010 	mvn	r3, #16
   18378:	e3a02603 	mov	r2, #3145728	; 0x300000
   1837c:	e3a01010 	mov	r1, #16
   18380:	e1a00005 	mov	r0, r5
   18384:	ebffff0f 	bl	17fc8 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   18388:	e3500000 	cmp	r0, #0
   1838c:	0affff92 	beq	181dc <CLAN7800Device::Configure()+0xa4>
   18390:	e3e03040 	mvn	r3, #64	; 0x40
   18394:	e3a02020 	mov	r2, #32
   18398:	e3a01080 	mov	r1, #128	; 0x80
   1839c:	e1a00005 	mov	r0, r5
   183a0:	ebffff08 	bl	17fc8 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   183a4:	e3500000 	cmp	r0, #0
   183a8:	0affff8b 	beq	181dc <CLAN7800Device::Configure()+0xa4>
   183ac:	e3a02017 	mov	r2, #23
   183b0:	e3a010c8 	mov	r1, #200	; 0xc8
   183b4:	e1a00005 	mov	r0, r5
   183b8:	ebfffdb9 	bl	17aa4 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   183bc:	e3500000 	cmp	r0, #0
   183c0:	0affff85 	beq	181dc <CLAN7800Device::Configure()+0xa4>
   183c4:	e3a02017 	mov	r2, #23
   183c8:	e3a010cc 	mov	r1, #204	; 0xcc
   183cc:	e1a00005 	mov	r0, r5
   183d0:	ebfffdb3 	bl	17aa4 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   183d4:	e3500000 	cmp	r0, #0
   183d8:	0affff7f 	beq	181dc <CLAN7800Device::Configure()+0xa4>
   183dc:	e3a02000 	mov	r2, #0
   183e0:	e3a01098 	mov	r1, #152	; 0x98
   183e4:	e1a00005 	mov	r0, r5
   183e8:	ebfffdad 	bl	17aa4 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   183ec:	e3500000 	cmp	r0, #0
   183f0:	0affff79 	beq	181dc <CLAN7800Device::Configure()+0xa4>
   183f4:	e3e02000 	mvn	r2, #0
   183f8:	e3a0100c 	mov	r1, #12
   183fc:	e1a00005 	mov	r0, r5
   18400:	ebfffda7 	bl	17aa4 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   18404:	e3500000 	cmp	r0, #0
   18408:	0affff73 	beq	181dc <CLAN7800Device::Configure()+0xa4>
   1840c:	e3a02000 	mov	r2, #0
   18410:	e3a01f43 	mov	r1, #268	; 0x10c
   18414:	e1a00005 	mov	r0, r5
   18418:	ebfffda1 	bl	17aa4 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   1841c:	e3500000 	cmp	r0, #0
   18420:	0affff6d 	beq	181dc <CLAN7800Device::Configure()+0xa4>
   18424:	e3a02000 	mov	r2, #0
   18428:	e3a010d0 	mov	r1, #208	; 0xd0
   1842c:	e1a00005 	mov	r0, r5
   18430:	ebfffd9b 	bl	17aa4 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   18434:	e3500000 	cmp	r0, #0
   18438:	0affff67 	beq	181dc <CLAN7800Device::Configure()+0xa4>
   1843c:	e3e03000 	mvn	r3, #0
   18440:	e59f2158 	ldr	r2, [pc, #344]	; 185a0 <CLAN7800Device::Configure()+0x468>
   18444:	e3a010b0 	mov	r1, #176	; 0xb0
   18448:	e1a00005 	mov	r0, r5
   1844c:	ebfffedd 	bl	17fc8 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   18450:	e3500000 	cmp	r0, #0
   18454:	0affff60 	beq	181dc <CLAN7800Device::Configure()+0xa4>
   18458:	e3e03000 	mvn	r3, #0
   1845c:	e3a02010 	mov	r2, #16
   18460:	e3a01014 	mov	r1, #20
   18464:	e1a00005 	mov	r0, r5
   18468:	ebfffed6 	bl	17fc8 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   1846c:	e3500000 	cmp	r0, #0
   18470:	1a00000c 	bne	184a8 <CLAN7800Device::Configure()+0x370>
   18474:	eb001129 	bl	1c920 <CLogger::Get()>
   18478:	e59f3124 	ldr	r3, [pc, #292]	; 185a4 <CLAN7800Device::Configure()+0x46c>
   1847c:	e3a02001 	mov	r2, #1
   18480:	e59f110c 	ldr	r1, [pc, #268]	; 18594 <CLAN7800Device::Configure()+0x45c>
   18484:	eb0012ce 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18488:	e3a06000 	mov	r6, #0
   1848c:	eaffff53 	b	181e0 <CLAN7800Device::Configure()+0xa8>
   18490:	eb001122 	bl	1c920 <CLogger::Get()>
   18494:	e59f310c 	ldr	r3, [pc, #268]	; 185a8 <CLAN7800Device::Configure()+0x470>
   18498:	e3a02001 	mov	r2, #1
   1849c:	e59f10f0 	ldr	r1, [pc, #240]	; 18594 <CLAN7800Device::Configure()+0x45c>
   184a0:	eb0012c7 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   184a4:	eaffff4d 	b	181e0 <CLAN7800Device::Configure()+0xa8>
   184a8:	e3a02ffa 	mov	r2, #1000	; 0x3e8
   184ac:	e3a03064 	mov	r3, #100	; 0x64
   184b0:	e3a01014 	mov	r1, #20
   184b4:	e88d000c 	stm	sp, {r2, r3}
   184b8:	e1a00005 	mov	r0, r5
   184bc:	e3a03080 	mov	r3, #128	; 0x80
   184c0:	e3a02090 	mov	r2, #144	; 0x90
   184c4:	ebfffdbf 	bl	17bc8 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   184c8:	e3500000 	cmp	r0, #0
   184cc:	0affffe8 	beq	18474 <CLAN7800Device::Configure()+0x33c>
   184d0:	e3e03000 	mvn	r3, #0
   184d4:	e3a02b06 	mov	r2, #6144	; 0x1800
   184d8:	e3a01c01 	mov	r1, #256	; 0x100
   184dc:	e1a00005 	mov	r0, r5
   184e0:	ebfffeb8 	bl	17fc8 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   184e4:	e3500000 	cmp	r0, #0
   184e8:	0affff3b 	beq	181dc <CLAN7800Device::Configure()+0xa4>
   184ec:	e3e03000 	mvn	r3, #0
   184f0:	e3a02001 	mov	r2, #1
   184f4:	e3a01f42 	mov	r1, #264	; 0x108
   184f8:	e1a00005 	mov	r0, r5
   184fc:	ebfffeb1 	bl	17fc8 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   18500:	e3500000 	cmp	r0, #0
   18504:	0affff34 	beq	181dc <CLAN7800Device::Configure()+0xa4>
   18508:	e3e03000 	mvn	r3, #0
   1850c:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
   18510:	e3a010c4 	mov	r1, #196	; 0xc4
   18514:	e1a00005 	mov	r0, r5
   18518:	ebfffeaa 	bl	17fc8 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   1851c:	e3500000 	cmp	r0, #0
   18520:	0affff2d 	beq	181dc <CLAN7800Device::Configure()+0xa4>
   18524:	e59f3080 	ldr	r3, [pc, #128]	; 185ac <CLAN7800Device::Configure()+0x474>
   18528:	e59f2080 	ldr	r2, [pc, #128]	; 185b0 <CLAN7800Device::Configure()+0x478>
   1852c:	e3a01f41 	mov	r1, #260	; 0x104
   18530:	e1a00005 	mov	r0, r5
   18534:	ebfffea3 	bl	17fc8 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   18538:	e3500000 	cmp	r0, #0
   1853c:	0affff26 	beq	181dc <CLAN7800Device::Configure()+0xa4>
   18540:	e3e03000 	mvn	r3, #0
   18544:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
   18548:	e3a010c0 	mov	r1, #192	; 0xc0
   1854c:	e1a00005 	mov	r0, r5
   18550:	ebfffe9c 	bl	17fc8 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   18554:	e3500000 	cmp	r0, #0
   18558:	0affff1f 	beq	181dc <CLAN7800Device::Configure()+0xa4>
   1855c:	e1a00005 	mov	r0, r5
   18560:	ebfffe7e 	bl	17f60 <CLAN7800Device::InitPHY()>
   18564:	e2506000 	subs	r6, r0, #0
   18568:	0a000002 	beq	18578 <CLAN7800Device::Configure()+0x440>
   1856c:	e1a00005 	mov	r0, r5
   18570:	eb0000dd 	bl	188ec <CNetDevice::AddNetDevice()>
   18574:	eaffff19 	b	181e0 <CLAN7800Device::Configure()+0xa8>
   18578:	eb0010e8 	bl	1c920 <CLogger::Get()>
   1857c:	e59f3030 	ldr	r3, [pc, #48]	; 185b4 <CLAN7800Device::Configure()+0x47c>
   18580:	e3a02001 	mov	r2, #1
   18584:	e59f1008 	ldr	r1, [pc, #8]	; 18594 <CLAN7800Device::Configure()+0x45c>
   18588:	eb00128d 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1858c:	eaffff13 	b	181e0 <CLAN7800Device::Configure()+0xa8>
   18590:	00025724 	.word	0x00025724
   18594:	00025664 	.word	0x00025664
   18598:	000256ec 	.word	0x000256ec
   1859c:	000241a8 	.word	0x000241a8
   185a0:	00000402 	.word	0x00000402
   185a4:	0002573c 	.word	0x0002573c
   185a8:	000256fc 	.word	0x000256fc
   185ac:	c000ffff 	.word	0xc000ffff
   185b0:	05ee0001 	.word	0x05ee0001
   185b4:	00025714 	.word	0x00025714

000185b8 <CMACAddress::CMACAddress()>:
   185b8:	e3a02000 	mov	r2, #0
   185bc:	e5c02000 	strb	r2, [r0]
   185c0:	e12fff1e 	bx	lr

000185c4 <CMACAddress::~CMACAddress()>:
   185c4:	e12fff1e 	bx	lr

000185c8 <CMACAddress::operator==(CMACAddress const&) const>:
   185c8:	e5d03000 	ldrb	r3, [r0]
   185cc:	e92d4070 	push	{r4, r5, r6, lr}
   185d0:	e3530000 	cmp	r3, #0
   185d4:	e1a04000 	mov	r4, r0
   185d8:	e1a05001 	mov	r5, r1
   185dc:	0a00000e 	beq	1861c <CMACAddress::operator==(CMACAddress const&) const+0x54>
   185e0:	e5d53000 	ldrb	r3, [r5]
   185e4:	e2844001 	add	r4, r4, #1
   185e8:	e3530000 	cmp	r3, #0
   185ec:	1a000003 	bne	18600 <CMACAddress::operator==(CMACAddress const&) const+0x38>
   185f0:	e3a02041 	mov	r2, #65	; 0x41
   185f4:	e59f1034 	ldr	r1, [pc, #52]	; 18630 <CMACAddress::operator==(CMACAddress const&) const+0x68>
   185f8:	e59f0034 	ldr	r0, [pc, #52]	; 18634 <CMACAddress::operator==(CMACAddress const&) const+0x6c>
   185fc:	eb0006d4 	bl	1a154 <assertion_failed>
   18600:	e2851001 	add	r1, r5, #1
   18604:	e1a00004 	mov	r0, r4
   18608:	e3a02006 	mov	r2, #6
   1860c:	eb001fff 	bl	20610 <memcmp>
   18610:	e16f0f10 	clz	r0, r0
   18614:	e1a002a0 	lsr	r0, r0, #5
   18618:	e8bd8070 	pop	{r4, r5, r6, pc}
   1861c:	e3a02029 	mov	r2, #41	; 0x29
   18620:	e59f1008 	ldr	r1, [pc, #8]	; 18630 <CMACAddress::operator==(CMACAddress const&) const+0x68>
   18624:	e59f0008 	ldr	r0, [pc, #8]	; 18634 <CMACAddress::operator==(CMACAddress const&) const+0x6c>
   18628:	eb0006c9 	bl	1a154 <assertion_failed>
   1862c:	eaffffeb 	b	185e0 <CMACAddress::operator==(CMACAddress const&) const+0x18>
   18630:	00025750 	.word	0x00025750
   18634:	00023658 	.word	0x00023658

00018638 <CMACAddress::operator!=(CMACAddress const&) const>:
   18638:	e92d4010 	push	{r4, lr}
   1863c:	ebffffe1 	bl	185c8 <CMACAddress::operator==(CMACAddress const&) const>
   18640:	e2200001 	eor	r0, r0, #1
   18644:	e6ef0070 	uxtb	r0, r0
   18648:	e8bd8010 	pop	{r4, pc}

0001864c <CMACAddress::Set(unsigned char const*)>:
   1864c:	e92d4070 	push	{r4, r5, r6, lr}
   18650:	e2515000 	subs	r5, r1, #0
   18654:	e1a04000 	mov	r4, r0
   18658:	0a000006 	beq	18678 <CMACAddress::Set(unsigned char const*)+0x2c>
   1865c:	e1a01005 	mov	r1, r5
   18660:	e3a02006 	mov	r2, #6
   18664:	e2840001 	add	r0, r4, #1
   18668:	eb002151 	bl	20bb4 <memcpy>
   1866c:	e3a03001 	mov	r3, #1
   18670:	e5c43000 	strb	r3, [r4]
   18674:	e8bd8070 	pop	{r4, r5, r6, pc}
   18678:	e3a02034 	mov	r2, #52	; 0x34
   1867c:	e59f1008 	ldr	r1, [pc, #8]	; 1868c <CMACAddress::Set(unsigned char const*)+0x40>
   18680:	e59f0008 	ldr	r0, [pc, #8]	; 18690 <CMACAddress::Set(unsigned char const*)+0x44>
   18684:	eb0006b2 	bl	1a154 <assertion_failed>
   18688:	eafffff3 	b	1865c <CMACAddress::Set(unsigned char const*)+0x10>
   1868c:	00025750 	.word	0x00025750
   18690:	00025760 	.word	0x00025760

00018694 <CMACAddress::CMACAddress(unsigned char const*)>:
   18694:	e92d4010 	push	{r4, lr}
   18698:	e1a04000 	mov	r4, r0
   1869c:	ebffffea 	bl	1864c <CMACAddress::Set(unsigned char const*)>
   186a0:	e1a00004 	mov	r0, r4
   186a4:	e8bd8010 	pop	{r4, pc}

000186a8 <CMACAddress::SetBroadcast()>:
   186a8:	e92d4010 	push	{r4, lr}
   186ac:	e3a02006 	mov	r2, #6
   186b0:	e1a04000 	mov	r4, r0
   186b4:	e3a010ff 	mov	r1, #255	; 0xff
   186b8:	e2800001 	add	r0, r0, #1
   186bc:	eb001fca 	bl	205ec <memset>
   186c0:	e3a03001 	mov	r3, #1
   186c4:	e5c43000 	strb	r3, [r4]
   186c8:	e8bd8010 	pop	{r4, pc}

000186cc <CMACAddress::Get() const>:
   186cc:	e5d03000 	ldrb	r3, [r0]
   186d0:	e92d4010 	push	{r4, lr}
   186d4:	e3530000 	cmp	r3, #0
   186d8:	e1a04000 	mov	r4, r0
   186dc:	1a000003 	bne	186f0 <CMACAddress::Get() const+0x24>
   186e0:	e3a02041 	mov	r2, #65	; 0x41
   186e4:	e59f100c 	ldr	r1, [pc, #12]	; 186f8 <CMACAddress::Get() const+0x2c>
   186e8:	e59f000c 	ldr	r0, [pc, #12]	; 186fc <CMACAddress::Get() const+0x30>
   186ec:	eb000698 	bl	1a154 <assertion_failed>
   186f0:	e2840001 	add	r0, r4, #1
   186f4:	e8bd8010 	pop	{r4, pc}
   186f8:	00025750 	.word	0x00025750
   186fc:	00023658 	.word	0x00023658

00018700 <CMACAddress::CopyTo(unsigned char*) const>:
   18700:	e5d03000 	ldrb	r3, [r0]
   18704:	e92d4070 	push	{r4, r5, r6, lr}
   18708:	e3530000 	cmp	r3, #0
   1870c:	e1a05000 	mov	r5, r0
   18710:	e1a04001 	mov	r4, r1
   18714:	0a000006 	beq	18734 <CMACAddress::CopyTo(unsigned char*) const+0x34>
   18718:	e3540000 	cmp	r4, #0
   1871c:	0a00000a 	beq	1874c <CMACAddress::CopyTo(unsigned char*) const+0x4c>
   18720:	e2851001 	add	r1, r5, #1
   18724:	e1a00004 	mov	r0, r4
   18728:	e8bd4070 	pop	{r4, r5, r6, lr}
   1872c:	e3a02006 	mov	r2, #6
   18730:	ea00211f 	b	20bb4 <memcpy>
   18734:	e3a02047 	mov	r2, #71	; 0x47
   18738:	e59f1020 	ldr	r1, [pc, #32]	; 18760 <CMACAddress::CopyTo(unsigned char*) const+0x60>
   1873c:	e59f0020 	ldr	r0, [pc, #32]	; 18764 <CMACAddress::CopyTo(unsigned char*) const+0x64>
   18740:	eb000683 	bl	1a154 <assertion_failed>
   18744:	e3540000 	cmp	r4, #0
   18748:	1afffff4 	bne	18720 <CMACAddress::CopyTo(unsigned char*) const+0x20>
   1874c:	e3a02048 	mov	r2, #72	; 0x48
   18750:	e59f1008 	ldr	r1, [pc, #8]	; 18760 <CMACAddress::CopyTo(unsigned char*) const+0x60>
   18754:	e59f000c 	ldr	r0, [pc, #12]	; 18768 <CMACAddress::CopyTo(unsigned char*) const+0x68>
   18758:	eb00067d 	bl	1a154 <assertion_failed>
   1875c:	eaffffef 	b	18720 <CMACAddress::CopyTo(unsigned char*) const+0x20>
   18760:	00025750 	.word	0x00025750
   18764:	00023658 	.word	0x00023658
   18768:	000242a4 	.word	0x000242a4

0001876c <CMACAddress::IsBroadcast() const>:
   1876c:	e5d03000 	ldrb	r3, [r0]
   18770:	e92d4010 	push	{r4, lr}
   18774:	e3530000 	cmp	r3, #0
   18778:	e1a04000 	mov	r4, r0
   1877c:	0a000008 	beq	187a4 <CMACAddress::IsBroadcast() const+0x38>
   18780:	e2843001 	add	r3, r4, #1
   18784:	e2840007 	add	r0, r4, #7
   18788:	e4d32001 	ldrb	r2, [r3], #1
   1878c:	e35200ff 	cmp	r2, #255	; 0xff
   18790:	1a000008 	bne	187b8 <CMACAddress::IsBroadcast() const+0x4c>
   18794:	e1530000 	cmp	r3, r0
   18798:	1afffffa 	bne	18788 <CMACAddress::IsBroadcast() const+0x1c>
   1879c:	e3a00001 	mov	r0, #1
   187a0:	e8bd8010 	pop	{r4, pc}
   187a4:	e3a0204e 	mov	r2, #78	; 0x4e
   187a8:	e59f1010 	ldr	r1, [pc, #16]	; 187c0 <CMACAddress::IsBroadcast() const+0x54>
   187ac:	e59f0010 	ldr	r0, [pc, #16]	; 187c4 <CMACAddress::IsBroadcast() const+0x58>
   187b0:	eb000667 	bl	1a154 <assertion_failed>
   187b4:	eafffff1 	b	18780 <CMACAddress::IsBroadcast() const+0x14>
   187b8:	e3a00000 	mov	r0, #0
   187bc:	e8bd8010 	pop	{r4, pc}
   187c0:	00025750 	.word	0x00025750
   187c4:	00023658 	.word	0x00023658

000187c8 <CMACAddress::GetSize() const>:
   187c8:	e3a00006 	mov	r0, #6
   187cc:	e12fff1e 	bx	lr

000187d0 <CMACAddress::Format(CString*) const>:
   187d0:	e92d4070 	push	{r4, r5, r6, lr}
   187d4:	e5d03000 	ldrb	r3, [r0]
   187d8:	e24dd010 	sub	sp, sp, #16
   187dc:	e3530000 	cmp	r3, #0
   187e0:	e1a04000 	mov	r4, r0
   187e4:	e1a05001 	mov	r5, r1
   187e8:	0a00000e 	beq	18828 <CMACAddress::Format(CString*) const+0x58>
   187ec:	e3550000 	cmp	r5, #0
   187f0:	0a000012 	beq	18840 <CMACAddress::Format(CString*) const+0x70>
   187f4:	e5d41003 	ldrb	r1, [r4, #3]
   187f8:	e5d46006 	ldrb	r6, [r4, #6]
   187fc:	e5d4e005 	ldrb	lr, [r4, #5]
   18800:	e5d4c004 	ldrb	ip, [r4, #4]
   18804:	e5d43002 	ldrb	r3, [r4, #2]
   18808:	e5d42001 	ldrb	r2, [r4, #1]
   1880c:	e1a00005 	mov	r0, r5
   18810:	e88d5002 	stm	sp, {r1, ip, lr}
   18814:	e58d600c 	str	r6, [sp, #12]
   18818:	e59f1034 	ldr	r1, [pc, #52]	; 18854 <CMACAddress::Format(CString*) const+0x84>
   1881c:	eb001bba 	bl	1f70c <CString::Format(char const*, ...)>
   18820:	e28dd010 	add	sp, sp, #16
   18824:	e8bd8070 	pop	{r4, r5, r6, pc}
   18828:	e3a02062 	mov	r2, #98	; 0x62
   1882c:	e59f1024 	ldr	r1, [pc, #36]	; 18858 <CMACAddress::Format(CString*) const+0x88>
   18830:	e59f0024 	ldr	r0, [pc, #36]	; 1885c <CMACAddress::Format(CString*) const+0x8c>
   18834:	eb000646 	bl	1a154 <assertion_failed>
   18838:	e3550000 	cmp	r5, #0
   1883c:	1affffec 	bne	187f4 <CMACAddress::Format(CString*) const+0x24>
   18840:	e3a02063 	mov	r2, #99	; 0x63
   18844:	e59f100c 	ldr	r1, [pc, #12]	; 18858 <CMACAddress::Format(CString*) const+0x88>
   18848:	e59f0010 	ldr	r0, [pc, #16]	; 18860 <CMACAddress::Format(CString*) const+0x90>
   1884c:	eb000640 	bl	1a154 <assertion_failed>
   18850:	eaffffe7 	b	187f4 <CMACAddress::Format(CString*) const+0x24>
   18854:	00025780 	.word	0x00025780
   18858:	00025750 	.word	0x00025750
   1885c:	00023658 	.word	0x00023658
   18860:	00025770 	.word	0x00025770

00018864 <CNetDevice::CNetDevice(CUSBFunction*)>:
   18864:	e92d4010 	push	{r4, lr}
   18868:	e1a04000 	mov	r4, r0
   1886c:	ebffeeb9 	bl	14358 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   18870:	e59f3008 	ldr	r3, [pc, #8]	; 18880 <CNetDevice::CNetDevice(CUSBFunction*)+0x1c>
   18874:	e1a00004 	mov	r0, r4
   18878:	e5843000 	str	r3, [r4]
   1887c:	e8bd8010 	pop	{r4, pc}
   18880:	000257a8 	.word	0x000257a8

00018884 <CNetDevice::~CNetDevice()>:
   18884:	e92d4010 	push	{r4, lr}
   18888:	e1a04000 	mov	r4, r0
   1888c:	e59f300c 	ldr	r3, [pc, #12]	; 188a0 <CNetDevice::~CNetDevice()+0x1c>
   18890:	e5803000 	str	r3, [r0]
   18894:	ebffee61 	bl	14220 <CUSBFunction::~CUSBFunction()>
   18898:	e1a00004 	mov	r0, r4
   1889c:	e8bd8010 	pop	{r4, pc}
   188a0:	000257a8 	.word	0x000257a8

000188a4 <CNetDevice::~CNetDevice()>:
   188a4:	e92d4010 	push	{r4, lr}
   188a8:	e1a04000 	mov	r4, r0
   188ac:	e59f3018 	ldr	r3, [pc, #24]	; 188cc <CNetDevice::~CNetDevice()+0x28>
   188b0:	e5803000 	str	r3, [r0]
   188b4:	ebffee59 	bl	14220 <CUSBFunction::~CUSBFunction()>
   188b8:	e1a00004 	mov	r0, r4
   188bc:	e3a01010 	mov	r1, #16
   188c0:	eb0023bb 	bl	217b4 <operator delete(void*, unsigned int)>
   188c4:	e1a00004 	mov	r0, r4
   188c8:	e8bd8010 	pop	{r4, pc}
   188cc:	000257a8 	.word	0x000257a8

000188d0 <CNetDevice::GetSpeedString(TNetDeviceSpeed)>:
   188d0:	e3500005 	cmp	r0, #5
   188d4:	d59f3008 	ldrle	r3, [pc, #8]	; 188e4 <CNetDevice::GetSpeedString(TNetDeviceSpeed)+0x14>
   188d8:	d7930100 	ldrle	r0, [r3, r0, lsl #2]
   188dc:	c59f0004 	ldrgt	r0, [pc, #4]	; 188e8 <CNetDevice::GetSpeedString(TNetDeviceSpeed)+0x18>
   188e0:	e12fff1e 	bx	lr
   188e4:	00029784 	.word	0x00029784
   188e8:	00027d48 	.word	0x00027d48

000188ec <CNetDevice::AddNetDevice()>:
   188ec:	e92d4030 	push	{r4, r5, lr}
   188f0:	e24dd014 	sub	sp, sp, #20
   188f4:	e1a05000 	mov	r5, r0
   188f8:	e1a0000d 	mov	r0, sp
   188fc:	eb001794 	bl	1e754 <CString::CString()>
   18900:	e59f3048 	ldr	r3, [pc, #72]	; 18950 <CNetDevice::AddNetDevice()+0x64>
   18904:	e59f1048 	ldr	r1, [pc, #72]	; 18954 <CNetDevice::AddNetDevice()+0x68>
   18908:	e5932000 	ldr	r2, [r3]
   1890c:	e1a0000d 	mov	r0, sp
   18910:	e282c001 	add	ip, r2, #1
   18914:	e583c000 	str	ip, [r3]
   18918:	eb001b7b 	bl	1f70c <CString::Format(char const*, ...)>
   1891c:	eb000905 	bl	1ad38 <CDeviceNameService::Get()>
   18920:	e1a04000 	mov	r4, r0
   18924:	e1a0000d 	mov	r0, sp
   18928:	eb00179f 	bl	1e7ac <CString::operator char const*() const>
   1892c:	e1a02005 	mov	r2, r5
   18930:	e1a01000 	mov	r1, r0
   18934:	e3a03000 	mov	r3, #0
   18938:	e1a00004 	mov	r0, r4
   1893c:	eb00083d 	bl	1aa38 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   18940:	e1a0000d 	mov	r0, sp
   18944:	eb00174f 	bl	1e688 <CString::~CString()>
   18948:	e28dd014 	add	sp, sp, #20
   1894c:	e8bd8030 	pop	{r4, r5, pc}
   18950:	000299b0 	.word	0x000299b0
   18954:	000257d8 	.word	0x000257d8

00018958 <CUSBGamePadDevice::GetInitialState()>:
   18958:	e2800024 	add	r0, r0, #36	; 0x24
   1895c:	e12fff1e 	bx	lr

00018960 <CUSBGamePadDevice::ReportHandler(unsigned char const*, unsigned int)>:
   18960:	e3510000 	cmp	r1, #0
   18964:	012fff1e 	bxeq	lr
   18968:	e280cf4a 	add	ip, r0, #296	; 0x128
   1896c:	e1dcc0b0 	ldrh	ip, [ip]
   18970:	e92d4070 	push	{r4, r5, r6, lr}
   18974:	e15c0002 	cmp	ip, r2
   18978:	e1a04000 	mov	r4, r0
   1897c:	18bd8070 	popne	{r4, r5, r6, pc}
   18980:	e5902124 	ldr	r2, [r0, #292]	; 0x124
   18984:	e3520000 	cmp	r2, #0
   18988:	08bd8070 	popeq	{r4, r5, r6, pc}
   1898c:	e1a05000 	mov	r5, r0
   18990:	e4953024 	ldr	r3, [r5], #36	; 0x24
   18994:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   18998:	e12fff33 	blx	r3
   1899c:	e594012c 	ldr	r0, [r4, #300]	; 0x12c
   189a0:	e1a01005 	mov	r1, r5
   189a4:	e5943124 	ldr	r3, [r4, #292]	; 0x124
   189a8:	e2400001 	sub	r0, r0, #1
   189ac:	e8bd4070 	pop	{r4, r5, r6, lr}
   189b0:	e12fff13 	bx	r3

000189b4 <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))>:
   189b4:	e5903124 	ldr	r3, [r0, #292]	; 0x124
   189b8:	e92d4070 	push	{r4, r5, r6, lr}
   189bc:	e3530000 	cmp	r3, #0
   189c0:	e1a04000 	mov	r4, r0
   189c4:	e1a05001 	mov	r5, r1
   189c8:	0a000003 	beq	189dc <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))+0x28>
   189cc:	e3a0204b 	mov	r2, #75	; 0x4b
   189d0:	e59f1024 	ldr	r1, [pc, #36]	; 189fc <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))+0x48>
   189d4:	e59f0024 	ldr	r0, [pc, #36]	; 18a00 <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))+0x4c>
   189d8:	eb0005dd 	bl	1a154 <assertion_failed>
   189dc:	e3550000 	cmp	r5, #0
   189e0:	e5845124 	str	r5, [r4, #292]	; 0x124
   189e4:	18bd8070 	popne	{r4, r5, r6, pc}
   189e8:	e3a0204d 	mov	r2, #77	; 0x4d
   189ec:	e8bd4070 	pop	{r4, r5, r6, lr}
   189f0:	e59f1004 	ldr	r1, [pc, #4]	; 189fc <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))+0x48>
   189f4:	e59f0008 	ldr	r0, [pc, #8]	; 18a04 <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))+0x50>
   189f8:	ea0005d5 	b	1a154 <assertion_failed>
   189fc:	000258c4 	.word	0x000258c4
   18a00:	000258d4 	.word	0x000258d4
   18a04:	000258ec 	.word	0x000258ec

00018a08 <CUSBGamePadDevice::Configure()>:
   18a08:	e92d4030 	push	{r4, r5, lr}
   18a0c:	e2805f4a 	add	r5, r0, #296	; 0x128
   18a10:	e1d510b0 	ldrh	r1, [r5]
   18a14:	e24dd00c 	sub	sp, sp, #12
   18a18:	e3510000 	cmp	r1, #0
   18a1c:	e1a04000 	mov	r4, r0
   18a20:	0a00001a 	beq	18a90 <CUSBGamePadDevice::Configure()+0x88>
   18a24:	e1a00004 	mov	r0, r4
   18a28:	ebffe26e 	bl	113e8 <CUSBHIDDevice::Configure(unsigned int)>
   18a2c:	e2505000 	subs	r5, r0, #0
   18a30:	0a00000e 	beq	18a70 <CUSBGamePadDevice::Configure()+0x68>
   18a34:	e59f206c 	ldr	r2, [pc, #108]	; 18aa8 <CUSBGamePadDevice::Configure()+0xa0>
   18a38:	e5923000 	ldr	r3, [r2]
   18a3c:	e584312c 	str	r3, [r4, #300]	; 0x12c
   18a40:	e2833001 	add	r3, r3, #1
   18a44:	e5823000 	str	r3, [r2]
   18a48:	eb0008ba 	bl	1ad38 <CDeviceNameService::Get()>
   18a4c:	e3a03000 	mov	r3, #0
   18a50:	e594212c 	ldr	r2, [r4, #300]	; 0x12c
   18a54:	e59f1050 	ldr	r1, [pc, #80]	; 18aac <CUSBGamePadDevice::Configure()+0xa4>
   18a58:	e58d3000 	str	r3, [sp]
   18a5c:	e1a03004 	mov	r3, r4
   18a60:	eb0008c2 	bl	1ad70 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   18a64:	e1a00005 	mov	r0, r5
   18a68:	e28dd00c 	add	sp, sp, #12
   18a6c:	e8bd8030 	pop	{r4, r5, pc}
   18a70:	eb000faa 	bl	1c920 <CLogger::Get()>
   18a74:	e59f3034 	ldr	r3, [pc, #52]	; 18ab0 <CUSBGamePadDevice::Configure()+0xa8>
   18a78:	e3a02001 	mov	r2, #1
   18a7c:	e59f1030 	ldr	r1, [pc, #48]	; 18ab4 <CUSBGamePadDevice::Configure()+0xac>
   18a80:	eb00114f 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18a84:	e1a00005 	mov	r0, r5
   18a88:	e28dd00c 	add	sp, sp, #12
   18a8c:	e8bd8030 	pop	{r4, r5, pc}
   18a90:	e59f1020 	ldr	r1, [pc, #32]	; 18ab8 <CUSBGamePadDevice::Configure()+0xb0>
   18a94:	e3a02035 	mov	r2, #53	; 0x35
   18a98:	e59f001c 	ldr	r0, [pc, #28]	; 18abc <CUSBGamePadDevice::Configure()+0xb4>
   18a9c:	eb0005ac 	bl	1a154 <assertion_failed>
   18aa0:	e1d510b0 	ldrh	r1, [r5]
   18aa4:	eaffffde 	b	18a24 <CUSBGamePadDevice::Configure()+0x1c>
   18aa8:	0002979c 	.word	0x0002979c
   18aac:	00025878 	.word	0x00025878
   18ab0:	0002467c 	.word	0x0002467c
   18ab4:	00025870 	.word	0x00025870
   18ab8:	000258c4 	.word	0x000258c4
   18abc:	00024948 	.word	0x00024948

00018ac0 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>:
   18ac0:	e92d4010 	push	{r4, lr}
   18ac4:	e3a02000 	mov	r2, #0
   18ac8:	e1a04000 	mov	r4, r0
   18acc:	ebffe206 	bl	112ec <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>
   18ad0:	e3a03000 	mov	r3, #0
   18ad4:	e59f1028 	ldr	r1, [pc, #40]	; 18b04 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)+0x44>
   18ad8:	e2842f4a 	add	r2, r4, #296	; 0x128
   18adc:	e5841000 	str	r1, [r4]
   18ae0:	e5843124 	str	r3, [r4, #292]	; 0x124
   18ae4:	e1a01003 	mov	r1, r3
   18ae8:	e1c230b0 	strh	r3, [r2]
   18aec:	e2840024 	add	r0, r4, #36	; 0x24
   18af0:	e584312c 	str	r3, [r4, #300]	; 0x12c
   18af4:	e3a02c01 	mov	r2, #256	; 0x100
   18af8:	eb001ebb 	bl	205ec <memset>
   18afc:	e1a00004 	mov	r0, r4
   18b00:	e8bd8010 	pop	{r4, pc}
   18b04:	00025888 	.word	0x00025888

00018b08 <CUSBGamePadDevice::~CUSBGamePadDevice()>:
   18b08:	e92d4070 	push	{r4, r5, r6, lr}
   18b0c:	e3a06000 	mov	r6, #0
   18b10:	e1a04000 	mov	r4, r0
   18b14:	e59f502c 	ldr	r5, [pc, #44]	; 18b48 <CUSBGamePadDevice::~CUSBGamePadDevice()+0x40>
   18b18:	e5806124 	str	r6, [r0, #292]	; 0x124
   18b1c:	e2853018 	add	r3, r5, #24
   18b20:	e5803000 	str	r3, [r0]
   18b24:	eb000883 	bl	1ad38 <CDeviceNameService::Get()>
   18b28:	e1a03006 	mov	r3, r6
   18b2c:	e2851008 	add	r1, r5, #8
   18b30:	e594212c 	ldr	r2, [r4, #300]	; 0x12c
   18b34:	eb0008a7 	bl	1add8 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   18b38:	e1a00004 	mov	r0, r4
   18b3c:	ebffe1fe 	bl	1133c <CUSBHIDDevice::~CUSBHIDDevice()>
   18b40:	e1a00004 	mov	r0, r4
   18b44:	e8bd8070 	pop	{r4, r5, r6, pc}
   18b48:	00025870 	.word	0x00025870

00018b4c <CUSBGamePadDevice::~CUSBGamePadDevice()>:
   18b4c:	e92d4010 	push	{r4, lr}
   18b50:	e1a04000 	mov	r4, r0
   18b54:	ebffffeb 	bl	18b08 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   18b58:	e1a00004 	mov	r0, r4
   18b5c:	e3a01e13 	mov	r1, #304	; 0x130
   18b60:	eb002313 	bl	217b4 <operator delete(void*, unsigned int)>
   18b64:	e1a00004 	mov	r0, r4
   18b68:	e8bd8010 	pop	{r4, pc}

00018b6c <CKeyboardBehaviour::CKeyboardBehaviour()>:
   18b6c:	e92d4010 	push	{r4, lr}
   18b70:	e3a03000 	mov	r3, #0
   18b74:	e1a04000 	mov	r4, r0
   18b78:	e2800014 	add	r0, r0, #20
   18b7c:	e5843000 	str	r3, [r4]
   18b80:	e5843004 	str	r3, [r4, #4]
   18b84:	e5843008 	str	r3, [r4, #8]
   18b88:	e5c4300c 	strb	r3, [r4, #12]
   18b8c:	e5c4300d 	strb	r3, [r4, #13]
   18b90:	e5843010 	str	r3, [r4, #16]
   18b94:	eb000197 	bl	191f8 <CKeyMap::CKeyMap()>
   18b98:	e1a00004 	mov	r0, r4
   18b9c:	e8bd8010 	pop	{r4, pc}

00018ba0 <CKeyboardBehaviour::~CKeyboardBehaviour()>:
   18ba0:	e92d4010 	push	{r4, lr}
   18ba4:	e3a03000 	mov	r3, #0
   18ba8:	e1a04000 	mov	r4, r0
   18bac:	e2800014 	add	r0, r0, #20
   18bb0:	e5843000 	str	r3, [r4]
   18bb4:	e5843004 	str	r3, [r4, #4]
   18bb8:	e5843008 	str	r3, [r4, #8]
   18bbc:	eb0000c4 	bl	18ed4 <CKeyMap::~CKeyMap()>
   18bc0:	e1a00004 	mov	r0, r4
   18bc4:	e8bd8010 	pop	{r4, pc}

00018bc8 <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))>:
   18bc8:	e92d4070 	push	{r4, r5, r6, lr}
   18bcc:	e2515000 	subs	r5, r1, #0
   18bd0:	e1a04000 	mov	r4, r0
   18bd4:	0a000001 	beq	18be0 <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))+0x18>
   18bd8:	e5845000 	str	r5, [r4]
   18bdc:	e8bd8070 	pop	{r4, r5, r6, pc}
   18be0:	e3a0202f 	mov	r2, #47	; 0x2f
   18be4:	e59f100c 	ldr	r1, [pc, #12]	; 18bf8 <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))+0x30>
   18be8:	e59f000c 	ldr	r0, [pc, #12]	; 18bfc <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))+0x34>
   18bec:	eb000558 	bl	1a154 <assertion_failed>
   18bf0:	e5845000 	str	r5, [r4]
   18bf4:	e8bd8070 	pop	{r4, r5, r6, pc}
   18bf8:	00025904 	.word	0x00025904
   18bfc:	0002591c 	.word	0x0002591c

00018c00 <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))>:
   18c00:	e92d4070 	push	{r4, r5, r6, lr}
   18c04:	e2515000 	subs	r5, r1, #0
   18c08:	e1a04000 	mov	r4, r0
   18c0c:	0a000001 	beq	18c18 <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))+0x18>
   18c10:	e5845004 	str	r5, [r4, #4]
   18c14:	e8bd8070 	pop	{r4, r5, r6, pc}
   18c18:	e3a02035 	mov	r2, #53	; 0x35
   18c1c:	e59f100c 	ldr	r1, [pc, #12]	; 18c30 <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))+0x30>
   18c20:	e59f000c 	ldr	r0, [pc, #12]	; 18c34 <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))+0x34>
   18c24:	eb00054a 	bl	1a154 <assertion_failed>
   18c28:	e5845004 	str	r5, [r4, #4]
   18c2c:	e8bd8070 	pop	{r4, r5, r6, pc}
   18c30:	00025904 	.word	0x00025904
   18c34:	00025934 	.word	0x00025934

00018c38 <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())>:
   18c38:	e92d4070 	push	{r4, r5, r6, lr}
   18c3c:	e2515000 	subs	r5, r1, #0
   18c40:	e1a04000 	mov	r4, r0
   18c44:	0a000001 	beq	18c50 <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())+0x18>
   18c48:	e5845008 	str	r5, [r4, #8]
   18c4c:	e8bd8070 	pop	{r4, r5, r6, pc}
   18c50:	e3a0203b 	mov	r2, #59	; 0x3b
   18c54:	e59f100c 	ldr	r1, [pc, #12]	; 18c68 <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())+0x30>
   18c58:	e59f000c 	ldr	r0, [pc, #12]	; 18c6c <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())+0x34>
   18c5c:	eb00053c 	bl	1a154 <assertion_failed>
   18c60:	e5845008 	str	r5, [r4, #8]
   18c64:	e8bd8070 	pop	{r4, r5, r6, pc}
   18c68:	00025904 	.word	0x00025904
   18c6c:	00025950 	.word	0x00025950

00018c70 <CKeyboardBehaviour::GetLEDStatus() const>:
   18c70:	e2800014 	add	r0, r0, #20
   18c74:	ea00012d 	b	19130 <CKeyMap::GetLEDStatus() const>

00018c78 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)>:
   18c78:	e92d4070 	push	{r4, r5, r6, lr}
   18c7c:	e5d0600c 	ldrb	r6, [r0, #12]
   18c80:	e2805014 	add	r5, r0, #20
   18c84:	e24dd008 	sub	sp, sp, #8
   18c88:	e1a04000 	mov	r4, r0
   18c8c:	e1a02006 	mov	r2, r6
   18c90:	e1a00005 	mov	r0, r5
   18c94:	eb0000b2 	bl	18f64 <CKeyMap::Translate(unsigned char, unsigned char)>
   18c98:	e2403e13 	sub	r3, r0, #304	; 0x130
   18c9c:	e2433003 	sub	r3, r3, #3
   18ca0:	e353000f 	cmp	r3, #15
   18ca4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   18ca8:	ea00001d 	b	18d24 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0xac>
   18cac:	00018d04 	.word	0x00018d04
   18cb0:	00018d04 	.word	0x00018d04
   18cb4:	00018d04 	.word	0x00018d04
   18cb8:	00018cec 	.word	0x00018cec
   18cbc:	00018cec 	.word	0x00018cec
   18cc0:	00018cec 	.word	0x00018cec
   18cc4:	00018cec 	.word	0x00018cec
   18cc8:	00018cec 	.word	0x00018cec
   18ccc:	00018cec 	.word	0x00018cec
   18cd0:	00018cec 	.word	0x00018cec
   18cd4:	00018cec 	.word	0x00018cec
   18cd8:	00018cec 	.word	0x00018cec
   18cdc:	00018cec 	.word	0x00018cec
   18ce0:	00018cec 	.word	0x00018cec
   18ce4:	00018cec 	.word	0x00018cec
   18ce8:	00018d0c 	.word	0x00018d0c
   18cec:	e5943004 	ldr	r3, [r4, #4]
   18cf0:	e3530000 	cmp	r3, #0
   18cf4:	0a000002 	beq	18d04 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x8c>
   18cf8:	e2400f4d 	sub	r0, r0, #308	; 0x134
   18cfc:	e2400002 	sub	r0, r0, #2
   18d00:	e12fff33 	blx	r3
   18d04:	e28dd008 	add	sp, sp, #8
   18d08:	e8bd8070 	pop	{r4, r5, r6, pc}
   18d0c:	e5943008 	ldr	r3, [r4, #8]
   18d10:	e3530000 	cmp	r3, #0
   18d14:	0afffffa 	beq	18d04 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x8c>
   18d18:	e12fff33 	blx	r3
   18d1c:	e28dd008 	add	sp, sp, #8
   18d20:	e8bd8070 	pop	{r4, r5, r6, pc}
   18d24:	e1a01000 	mov	r1, r0
   18d28:	e1a02006 	mov	r2, r6
   18d2c:	e1a00005 	mov	r0, r5
   18d30:	e28d3004 	add	r3, sp, #4
   18d34:	eb0000cd 	bl	19070 <CKeyMap::GetString(unsigned short, unsigned char, char*) const>
   18d38:	e3500000 	cmp	r0, #0
   18d3c:	0afffff0 	beq	18d04 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x8c>
   18d40:	e5943000 	ldr	r3, [r4]
   18d44:	e3530000 	cmp	r3, #0
   18d48:	0affffed 	beq	18d04 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x8c>
   18d4c:	e12fff33 	blx	r3
   18d50:	e28dd008 	add	sp, sp, #8
   18d54:	e8bd8070 	pop	{r4, r5, r6, pc}

00018d58 <CKeyboardBehaviour::KeyPressed(unsigned char)>:
   18d58:	e241c080 	sub	ip, r1, #128	; 0x80
   18d5c:	e6ef307c 	uxtb	r3, ip
   18d60:	e3530007 	cmp	r3, #7
   18d64:	e1a03000 	mov	r3, r0
   18d68:	8a000004 	bhi	18d80 <CKeyboardBehaviour::KeyPressed(unsigned char)+0x28>
   18d6c:	e3a01001 	mov	r1, #1
   18d70:	e5d0200c 	ldrb	r2, [r0, #12]
   18d74:	e182cc11 	orr	ip, r2, r1, lsl ip
   18d78:	e5c0c00c 	strb	ip, [r0, #12]
   18d7c:	e12fff1e 	bx	lr
   18d80:	e5d0c00d 	ldrb	ip, [r0, #13]
   18d84:	e15c0001 	cmp	ip, r1
   18d88:	012fff1e 	bxeq	lr
   18d8c:	e5c3100d 	strb	r1, [r3, #13]
   18d90:	eaffffb8 	b	18c78 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)>

00018d94 <CKeyboardBehaviour::KeyReleased(unsigned char)>:
   18d94:	e2413080 	sub	r3, r1, #128	; 0x80
   18d98:	e6ef2073 	uxtb	r2, r3
   18d9c:	e3520007 	cmp	r2, #7
   18da0:	8a000004 	bhi	18db8 <CKeyboardBehaviour::KeyReleased(unsigned char)+0x24>
   18da4:	e3a01001 	mov	r1, #1
   18da8:	e5d0200c 	ldrb	r2, [r0, #12]
   18dac:	e1c23311 	bic	r3, r2, r1, lsl r3
   18db0:	e5c0300c 	strb	r3, [r0, #12]
   18db4:	e12fff1e 	bx	lr
   18db8:	e5d0300d 	ldrb	r3, [r0, #13]
   18dbc:	e1530001 	cmp	r3, r1
   18dc0:	112fff1e 	bxne	lr
   18dc4:	e5903010 	ldr	r3, [r0, #16]
   18dc8:	e92d4010 	push	{r4, lr}
   18dcc:	e3530000 	cmp	r3, #0
   18dd0:	e1a04000 	mov	r4, r0
   18dd4:	1a000002 	bne	18de4 <CKeyboardBehaviour::KeyReleased(unsigned char)+0x50>
   18dd8:	e3a03000 	mov	r3, #0
   18ddc:	e5c4300d 	strb	r3, [r4, #13]
   18de0:	e8bd8010 	pop	{r4, pc}
   18de4:	eb001df1 	bl	205b0 <CTimer::Get()>
   18de8:	e5941010 	ldr	r1, [r4, #16]
   18dec:	eb001c7a 	bl	1ffdc <CTimer::CancelKernelTimer(unsigned int)>
   18df0:	e3a03000 	mov	r3, #0
   18df4:	e5843010 	str	r3, [r4, #16]
   18df8:	eafffff6 	b	18dd8 <CKeyboardBehaviour::KeyReleased(unsigned char)+0x44>

00018dfc <CKeyboardBehaviour::TimerHandler(unsigned int)>:
   18dfc:	e92d4010 	push	{r4, lr}
   18e00:	e5903010 	ldr	r3, [r0, #16]
   18e04:	e24dd008 	sub	sp, sp, #8
   18e08:	e1530001 	cmp	r3, r1
   18e0c:	e1a04000 	mov	r4, r0
   18e10:	0a000003 	beq	18e24 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x28>
   18e14:	e3a020b0 	mov	r2, #176	; 0xb0
   18e18:	e59f105c 	ldr	r1, [pc, #92]	; 18e7c <CKeyboardBehaviour::TimerHandler(unsigned int)+0x80>
   18e1c:	e59f005c 	ldr	r0, [pc, #92]	; 18e80 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x84>
   18e20:	eb0004cb 	bl	1a154 <assertion_failed>
   18e24:	e5d4100d 	ldrb	r1, [r4, #13]
   18e28:	e3510000 	cmp	r1, #0
   18e2c:	1a000001 	bne	18e38 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x3c>
   18e30:	e28dd008 	add	sp, sp, #8
   18e34:	e8bd8010 	pop	{r4, pc}
   18e38:	e1a00004 	mov	r0, r4
   18e3c:	ebffff8d 	bl	18c78 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)>
   18e40:	eb001dda 	bl	205b0 <CTimer::Get()>
   18e44:	e58d4000 	str	r4, [sp]
   18e48:	e3a03000 	mov	r3, #0
   18e4c:	e59f2030 	ldr	r2, [pc, #48]	; 18e84 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x88>
   18e50:	e3a01008 	mov	r1, #8
   18e54:	eb001c06 	bl	1fe74 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
   18e58:	e3500000 	cmp	r0, #0
   18e5c:	e5840010 	str	r0, [r4, #16]
   18e60:	1afffff2 	bne	18e30 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x34>
   18e64:	e3a020b7 	mov	r2, #183	; 0xb7
   18e68:	e59f100c 	ldr	r1, [pc, #12]	; 18e7c <CKeyboardBehaviour::TimerHandler(unsigned int)+0x80>
   18e6c:	e59f0014 	ldr	r0, [pc, #20]	; 18e88 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x8c>
   18e70:	e28dd008 	add	sp, sp, #8
   18e74:	e8bd4010 	pop	{r4, lr}
   18e78:	ea0004b5 	b	1a154 <assertion_failed>
   18e7c:	00025904 	.word	0x00025904
   18e80:	00025968 	.word	0x00025968
   18e84:	00018e8c 	.word	0x00018e8c
   18e88:	000251d8 	.word	0x000251d8

00018e8c <CKeyboardBehaviour::TimerStub(unsigned int, void*, void*)>:
   18e8c:	e92d4070 	push	{r4, r5, r6, lr}
   18e90:	e2524000 	subs	r4, r2, #0
   18e94:	e1a05000 	mov	r5, r0
   18e98:	0a000003 	beq	18eac <CKeyboardBehaviour::TimerStub(unsigned int, void*, void*)+0x20>
   18e9c:	e1a01005 	mov	r1, r5
   18ea0:	e1a00004 	mov	r0, r4
   18ea4:	e8bd4070 	pop	{r4, r5, r6, lr}
   18ea8:	eaffffd3 	b	18dfc <CKeyboardBehaviour::TimerHandler(unsigned int)>
   18eac:	e59f1018 	ldr	r1, [pc, #24]	; 18ecc <CKeyboardBehaviour::TimerStub(unsigned int, void*, void*)+0x40>
   18eb0:	e59f0018 	ldr	r0, [pc, #24]	; 18ed0 <CKeyboardBehaviour::TimerStub(unsigned int, void*, void*)+0x44>
   18eb4:	e3a020be 	mov	r2, #190	; 0xbe
   18eb8:	eb0004a5 	bl	1a154 <assertion_failed>
   18ebc:	e1a01005 	mov	r1, r5
   18ec0:	e1a00004 	mov	r0, r4
   18ec4:	e8bd4070 	pop	{r4, r5, r6, lr}
   18ec8:	eaffffcb 	b	18dfc <CKeyboardBehaviour::TimerHandler(unsigned int)>
   18ecc:	00025904 	.word	0x00025904
   18ed0:	00022ebc 	.word	0x00022ebc

00018ed4 <CKeyMap::~CKeyMap()>:
   18ed4:	e12fff1e 	bx	lr

00018ed8 <CKeyMap::ClearTable(unsigned char)>:
   18ed8:	e3510003 	cmp	r1, #3
   18edc:	ca000009 	bgt	18f08 <CKeyMap::ClearTable(unsigned char)+0x30>
   18ee0:	e3a0c000 	mov	ip, #0
   18ee4:	e1a03081 	lsl	r3, r1, #1
   18ee8:	e2832b01 	add	r2, r3, #1024	; 0x400
   18eec:	e0802002 	add	r2, r0, r2
   18ef0:	e0803003 	add	r3, r0, r3
   18ef4:	e0c3c0b8 	strh	ip, [r3], #8
   18ef8:	e1530002 	cmp	r3, r2
   18efc:	1afffffc 	bne	18ef4 <CKeyMap::ClearTable(unsigned char)+0x1c>
   18f00:	e3a00001 	mov	r0, #1
   18f04:	e12fff1e 	bx	lr
   18f08:	e3a00000 	mov	r0, #0
   18f0c:	e12fff1e 	bx	lr

00018f10 <CKeyMap::SetEntry(unsigned char, unsigned char, unsigned short)>:
   18f10:	e16fcf12 	clz	ip, r2
   18f14:	e1a0c2ac 	lsr	ip, ip, #5
   18f18:	e3510003 	cmp	r1, #3
   18f1c:	c38cc001 	orrgt	ip, ip, #1
   18f20:	e35c0000 	cmp	ip, #0
   18f24:	1a00000a 	bne	18f54 <CKeyMap::SetEntry(unsigned char, unsigned char, unsigned short)+0x44>
   18f28:	e352007f 	cmp	r2, #127	; 0x7f
   18f2c:	ca000009 	bgt	18f58 <CKeyMap::SetEntry(unsigned char, unsigned char, unsigned short)+0x48>
   18f30:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   18f34:	e59fe024 	ldr	lr, [pc, #36]	; 18f60 <CKeyMap::SetEntry(unsigned char, unsigned char, unsigned short)+0x50>
   18f38:	e153000e 	cmp	r3, lr
   18f3c:	d3a0c001 	movle	ip, #1
   18f40:	d0811102 	addle	r1, r1, r2, lsl #2
   18f44:	d1a01081 	lslle	r1, r1, #1
   18f48:	d18030b1 	strhle	r3, [r0, r1]
   18f4c:	e1a0000c 	mov	r0, ip
   18f50:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   18f54:	e3a0c000 	mov	ip, #0
   18f58:	e1a0000c 	mov	r0, ip
   18f5c:	e12fff1e 	bx	lr
   18f60:	00000132 	.word	0x00000132

00018f64 <CKeyMap::Translate(unsigned char, unsigned char)>:
   18f64:	e6af3071 	sxtb	r3, r1
   18f68:	e3530000 	cmp	r3, #0
   18f6c:	da000023 	ble	19000 <CKeyMap::Translate(unsigned char, unsigned char)+0x9c>
   18f70:	e1a03181 	lsl	r3, r1, #3
   18f74:	e19030b3 	ldrh	r3, [r0, r3]
   18f78:	e3530f42 	cmp	r3, #264	; 0x108
   18f7c:	0a000022 	beq	1900c <CKeyMap::Translate(unsigned char, unsigned char)+0xa8>
   18f80:	e243cf43 	sub	ip, r3, #268	; 0x10c
   18f84:	e24cc003 	sub	ip, ip, #3
   18f88:	e35c000b 	cmp	ip, #11
   18f8c:	8a000003 	bhi	18fa0 <CKeyMap::Translate(unsigned char, unsigned char)+0x3c>
   18f90:	e3120004 	tst	r2, #4
   18f94:	12833027 	addne	r3, r3, #39	; 0x27
   18f98:	16ff3073 	uxthne	r3, r3
   18f9c:	1a000018 	bne	19004 <CKeyMap::Translate(unsigned char, unsigned char)+0xa0>
   18fa0:	e312008c 	tst	r2, #140	; 0x8c
   18fa4:	1a000015 	bne	19000 <CKeyMap::Translate(unsigned char, unsigned char)+0x9c>
   18fa8:	e2413053 	sub	r3, r1, #83	; 0x53
   18fac:	e3530010 	cmp	r3, #16
   18fb0:	9a00001b 	bls	19024 <CKeyMap::Translate(unsigned char, unsigned char)+0xc0>
   18fb4:	e3120040 	tst	r2, #64	; 0x40
   18fb8:	0a000025 	beq	19054 <CKeyMap::Translate(unsigned char, unsigned char)+0xf0>
   18fbc:	e3120022 	tst	r2, #34	; 0x22
   18fc0:	13a03003 	movne	r3, #3
   18fc4:	03a03002 	moveq	r3, #2
   18fc8:	e0831101 	add	r1, r3, r1, lsl #2
   18fcc:	e1a01081 	lsl	r1, r1, #1
   18fd0:	e19030b1 	ldrh	r3, [r0, r1]
   18fd4:	e59f2088 	ldr	r2, [pc, #136]	; 19064 <CKeyMap::Translate(unsigned char, unsigned char)+0x100>
   18fd8:	e1530002 	cmp	r3, r2
   18fdc:	0a000017 	beq	19040 <CKeyMap::Translate(unsigned char, unsigned char)+0xdc>
   18fe0:	e3530e12 	cmp	r3, #288	; 0x120
   18fe4:	0a000010 	beq	1902c <CKeyMap::Translate(unsigned char, unsigned char)+0xc8>
   18fe8:	e3530f47 	cmp	r3, #284	; 0x11c
   18fec:	05d02400 	ldrbeq	r2, [r0, #1024]	; 0x400
   18ff0:	02833017 	addeq	r3, r3, #23
   18ff4:	02222001 	eoreq	r2, r2, #1
   18ff8:	05c02400 	strbeq	r2, [r0, #1024]	; 0x400
   18ffc:	ea000000 	b	19004 <CKeyMap::Translate(unsigned char, unsigned char)+0xa0>
   19000:	e3a03000 	mov	r3, #0
   19004:	e1a00003 	mov	r0, r3
   19008:	e12fff1e 	bx	lr
   1900c:	e3120011 	tst	r2, #17
   19010:	0affffe2 	beq	18fa0 <CKeyMap::Translate(unsigned char, unsigned char)+0x3c>
   19014:	e3120004 	tst	r2, #4
   19018:	159f3048 	ldrne	r3, [pc, #72]	; 19068 <CKeyMap::Translate(unsigned char, unsigned char)+0x104>
   1901c:	1afffff8 	bne	19004 <CKeyMap::Translate(unsigned char, unsigned char)+0xa0>
   19020:	eaffffde 	b	18fa0 <CKeyMap::Translate(unsigned char, unsigned char)+0x3c>
   19024:	e5d03401 	ldrb	r3, [r0, #1025]	; 0x401
   19028:	eaffffe6 	b	18fc8 <CKeyMap::Translate(unsigned char, unsigned char)+0x64>
   1902c:	e5d02401 	ldrb	r2, [r0, #1025]	; 0x401
   19030:	e3a03f4d 	mov	r3, #308	; 0x134
   19034:	e2222001 	eor	r2, r2, #1
   19038:	e5c02401 	strb	r2, [r0, #1025]	; 0x401
   1903c:	eafffff0 	b	19004 <CKeyMap::Translate(unsigned char, unsigned char)+0xa0>
   19040:	e5d02402 	ldrb	r2, [r0, #1026]	; 0x402
   19044:	e59f3020 	ldr	r3, [pc, #32]	; 1906c <CKeyMap::Translate(unsigned char, unsigned char)+0x108>
   19048:	e2222001 	eor	r2, r2, #1
   1904c:	e5c02402 	strb	r2, [r0, #1026]	; 0x402
   19050:	eaffffeb 	b	19004 <CKeyMap::Translate(unsigned char, unsigned char)+0xa0>
   19054:	e3120022 	tst	r2, #34	; 0x22
   19058:	13a03001 	movne	r3, #1
   1905c:	03a03000 	moveq	r3, #0
   19060:	eaffffd8 	b	18fc8 <CKeyMap::Translate(unsigned char, unsigned char)+0x64>
   19064:	0000011e 	.word	0x0000011e
   19068:	00000142 	.word	0x00000142
   1906c:	00000135 	.word	0x00000135

00019070 <CKeyMap::GetString(unsigned short, unsigned char, char*) const>:
   19070:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   19074:	e241c021 	sub	ip, r1, #33	; 0x21
   19078:	e59fe0a8 	ldr	lr, [pc, #168]	; 19128 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xb8>
   1907c:	e6ffc07c 	uxth	ip, ip
   19080:	e15c000e 	cmp	ip, lr
   19084:	8a000025 	bhi	19120 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xb0>
   19088:	e241cc01 	sub	ip, r1, #256	; 0x100
   1908c:	e6ffe07c 	uxth	lr, ip
   19090:	e35e0032 	cmp	lr, #50	; 0x32
   19094:	9a00001e 	bls	19114 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xa4>
   19098:	e3120011 	tst	r2, #17
   1909c:	e6af2071 	sxtb	r2, r1
   190a0:	0a000009 	beq	190cc <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x5c>
   190a4:	e6ef1071 	uxtb	r1, r1
   190a8:	e2412061 	sub	r2, r1, #97	; 0x61
   190ac:	e3520019 	cmp	r2, #25
   190b0:	8a00001a 	bhi	19120 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xb0>
   190b4:	e3a02000 	mov	r2, #0
   190b8:	e2411060 	sub	r1, r1, #96	; 0x60
   190bc:	e5c31000 	strb	r1, [r3]
   190c0:	e5c32001 	strb	r2, [r3, #1]
   190c4:	e1a00003 	mov	r0, r3
   190c8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   190cc:	e5d00400 	ldrb	r0, [r0, #1024]	; 0x400
   190d0:	e3500000 	cmp	r0, #0
   190d4:	0a000009 	beq	19100 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x90>
   190d8:	e6ef1071 	uxtb	r1, r1
   190dc:	e2410041 	sub	r0, r1, #65	; 0x41
   190e0:	e3500019 	cmp	r0, #25
   190e4:	92811020 	addls	r1, r1, #32
   190e8:	96af2071 	sxtbls	r2, r1
   190ec:	9a000003 	bls	19100 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x90>
   190f0:	e2410061 	sub	r0, r1, #97	; 0x61
   190f4:	e3500019 	cmp	r0, #25
   190f8:	92411020 	subls	r1, r1, #32
   190fc:	96af2071 	sxtbls	r2, r1
   19100:	e3a01000 	mov	r1, #0
   19104:	e5c32000 	strb	r2, [r3]
   19108:	e5c31001 	strb	r1, [r3, #1]
   1910c:	e1a00003 	mov	r0, r3
   19110:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   19114:	e59f3010 	ldr	r3, [pc, #16]	; 1912c <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xbc>
   19118:	e793010c 	ldr	r0, [r3, ip, lsl #2]
   1911c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   19120:	e3a00000 	mov	r0, #0
   19124:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   19128:	00000111 	.word	0x00000111
   1912c:	000297a0 	.word	0x000297a0

00019130 <CKeyMap::GetLEDStatus() const>:
   19130:	e5d03400 	ldrb	r3, [r0, #1024]	; 0x400
   19134:	e5d02401 	ldrb	r2, [r0, #1025]	; 0x401
   19138:	e3530000 	cmp	r3, #0
   1913c:	13a03002 	movne	r3, #2
   19140:	03a03000 	moveq	r3, #0
   19144:	e3520000 	cmp	r2, #0
   19148:	e5d02402 	ldrb	r2, [r0, #1026]	; 0x402
   1914c:	13833001 	orrne	r3, r3, #1
   19150:	e3520000 	cmp	r2, #0
   19154:	13833004 	orrne	r3, r3, #4
   19158:	e1a00003 	mov	r0, r3
   1915c:	e12fff1e 	bx	lr

00019160 <CKeyMap::LookupDefaultMap(char const*)>:
   19160:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19164:	e59f4078 	ldr	r4, [pc, #120]	; 191e4 <CKeyMap::LookupDefaultMap(char const*)+0x84>
   19168:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
   1916c:	e3530000 	cmp	r3, #0
   19170:	0a000016 	beq	191d0 <CKeyMap::LookupDefaultMap(char const*)+0x70>
   19174:	e1a05000 	mov	r5, r0
   19178:	e3a06000 	mov	r6, #0
   1917c:	e59f9064 	ldr	r9, [pc, #100]	; 191e8 <CKeyMap::LookupDefaultMap(char const*)+0x88>
   19180:	e59f8064 	ldr	r8, [pc, #100]	; 191ec <CKeyMap::LookupDefaultMap(char const*)+0x8c>
   19184:	e59f7064 	ldr	r7, [pc, #100]	; 191f0 <CKeyMap::LookupDefaultMap(char const*)+0x90>
   19188:	e28440cc 	add	r4, r4, #204	; 0xcc
   1918c:	ea000008 	b	191b4 <CKeyMap::LookupDefaultMap(char const*)+0x54>
   19190:	e1a01005 	mov	r1, r5
   19194:	e4940004 	ldr	r0, [r4], #4
   19198:	eb001d3d 	bl	20694 <strcmp>
   1919c:	e3500000 	cmp	r0, #0
   191a0:	0a00000c 	beq	191d8 <CKeyMap::LookupDefaultMap(char const*)+0x78>
   191a4:	e5943000 	ldr	r3, [r4]
   191a8:	e2866001 	add	r6, r6, #1
   191ac:	e3530000 	cmp	r3, #0
   191b0:	0a000006 	beq	191d0 <CKeyMap::LookupDefaultMap(char const*)+0x70>
   191b4:	e3550000 	cmp	r5, #0
   191b8:	1afffff4 	bne	19190 <CKeyMap::LookupDefaultMap(char const*)+0x30>
   191bc:	e1a02009 	mov	r2, r9
   191c0:	e1a01008 	mov	r1, r8
   191c4:	e1a00007 	mov	r0, r7
   191c8:	eb0003e1 	bl	1a154 <assertion_failed>
   191cc:	eaffffef 	b	19190 <CKeyMap::LookupDefaultMap(char const*)+0x30>
   191d0:	e3a00000 	mov	r0, #0
   191d4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   191d8:	e59f0014 	ldr	r0, [pc, #20]	; 191f4 <CKeyMap::LookupDefaultMap(char const*)+0x94>
   191dc:	e0800506 	add	r0, r0, r6, lsl #10
   191e0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   191e4:	000297a0 	.word	0x000297a0
   191e8:	0000013f 	.word	0x0000013f
   191ec:	0002717c 	.word	0x0002717c
   191f0:	00027188 	.word	0x00027188
   191f4:	0002597c 	.word	0x0002597c

000191f8 <CKeyMap::CKeyMap()>:
   191f8:	e3a03000 	mov	r3, #0
   191fc:	e3a02001 	mov	r2, #1
   19200:	e92d4070 	push	{r4, r5, r6, lr}
   19204:	e5c02401 	strb	r2, [r0, #1025]	; 0x401
   19208:	e5c03400 	strb	r3, [r0, #1024]	; 0x400
   1920c:	e5c03402 	strb	r3, [r0, #1026]	; 0x402
   19210:	e1a04000 	mov	r4, r0
   19214:	eb000c65 	bl	1c3b0 <CKernelOptions::Get()>
   19218:	eb000c57 	bl	1c37c <CKernelOptions::GetKeyMap() const>
   1921c:	e2505000 	subs	r5, r0, #0
   19220:	0a000012 	beq	19270 <CKeyMap::CKeyMap()+0x78>
   19224:	e1a00005 	mov	r0, r5
   19228:	ebffffcc 	bl	19160 <CKeyMap::LookupDefaultMap(char const*)>
   1922c:	e2501000 	subs	r1, r0, #0
   19230:	0a000004 	beq	19248 <CKeyMap::CKeyMap()+0x50>
   19234:	e3a02b01 	mov	r2, #1024	; 0x400
   19238:	e1a00004 	mov	r0, r4
   1923c:	eb001e5c 	bl	20bb4 <memcpy>
   19240:	e1a00004 	mov	r0, r4
   19244:	e8bd8070 	pop	{r4, r5, r6, pc}
   19248:	e59f0034 	ldr	r0, [pc, #52]	; 19284 <CKeyMap::CKeyMap()+0x8c>
   1924c:	ebffffc3 	bl	19160 <CKeyMap::LookupDefaultMap(char const*)>
   19250:	e2501000 	subs	r1, r0, #0
   19254:	1afffff6 	bne	19234 <CKeyMap::CKeyMap()+0x3c>
   19258:	e59f1028 	ldr	r1, [pc, #40]	; 19288 <CKeyMap::CKeyMap()+0x90>
   1925c:	e3a02080 	mov	r2, #128	; 0x80
   19260:	e59f0024 	ldr	r0, [pc, #36]	; 1928c <CKeyMap::CKeyMap()+0x94>
   19264:	eb0003ba 	bl	1a154 <assertion_failed>
   19268:	e59f1020 	ldr	r1, [pc, #32]	; 19290 <CKeyMap::CKeyMap()+0x98>
   1926c:	eafffff0 	b	19234 <CKeyMap::CKeyMap()+0x3c>
   19270:	e3a0207a 	mov	r2, #122	; 0x7a
   19274:	e59f100c 	ldr	r1, [pc, #12]	; 19288 <CKeyMap::CKeyMap()+0x90>
   19278:	e59f0014 	ldr	r0, [pc, #20]	; 19294 <CKeyMap::CKeyMap()+0x9c>
   1927c:	eb0003b4 	bl	1a154 <assertion_failed>
   19280:	eaffffe7 	b	19224 <CKeyMap::CKeyMap()+0x2c>
   19284:	00027198 	.word	0x00027198
   19288:	0002717c 	.word	0x0002717c
   1928c:	0002719c 	.word	0x0002719c
   19290:	0002597c 	.word	0x0002597c
   19294:	00027188 	.word	0x00027188

00019298 <CMouseDevice::~CMouseDevice()>:
   19298:	e92d4070 	push	{r4, r5, r6, lr}
   1929c:	e3a06000 	mov	r6, #0
   192a0:	e1a04000 	mov	r4, r0
   192a4:	e59f5034 	ldr	r5, [pc, #52]	; 192e0 <CMouseDevice::~CMouseDevice()+0x48>
   192a8:	e5806020 	str	r6, [r0, #32]
   192ac:	e2853008 	add	r3, r5, #8
   192b0:	e5803000 	str	r3, [r0]
   192b4:	eb00069f 	bl	1ad38 <CDeviceNameService::Get()>
   192b8:	e1a03006 	mov	r3, r6
   192bc:	e285101c 	add	r1, r5, #28
   192c0:	e5942024 	ldr	r2, [r4, #36]	; 0x24
   192c4:	eb0006c3 	bl	1add8 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   192c8:	e2840004 	add	r0, r4, #4
   192cc:	eb000062 	bl	1945c <CMouseBehaviour::~CMouseBehaviour()>
   192d0:	e1a00004 	mov	r0, r4
   192d4:	eb00059a 	bl	1a944 <CDevice::~CDevice()>
   192d8:	e1a00004 	mov	r0, r4
   192dc:	e8bd8070 	pop	{r4, r5, r6, pc}
   192e0:	00027294 	.word	0x00027294

000192e4 <CMouseDevice::~CMouseDevice()>:
   192e4:	e92d4010 	push	{r4, lr}
   192e8:	e1a04000 	mov	r4, r0
   192ec:	ebffffe9 	bl	19298 <CMouseDevice::~CMouseDevice()>
   192f0:	e1a00004 	mov	r0, r4
   192f4:	e3a01028 	mov	r1, #40	; 0x28
   192f8:	eb00212d 	bl	217b4 <operator delete(void*, unsigned int)>
   192fc:	e1a00004 	mov	r0, r4
   19300:	e8bd8010 	pop	{r4, pc}

00019304 <CMouseDevice::CMouseDevice()>:
   19304:	e92d4070 	push	{r4, r5, r6, lr}
   19308:	e1a04000 	mov	r4, r0
   1930c:	e24dd008 	sub	sp, sp, #8
   19310:	eb000597 	bl	1a974 <CDevice::CDevice()>
   19314:	e1a00004 	mov	r0, r4
   19318:	e3a06000 	mov	r6, #0
   1931c:	e59f5044 	ldr	r5, [pc, #68]	; 19368 <CMouseDevice::CMouseDevice()+0x64>
   19320:	e2853008 	add	r3, r5, #8
   19324:	e4803004 	str	r3, [r0], #4
   19328:	eb000041 	bl	19434 <CMouseBehaviour::CMouseBehaviour()>
   1932c:	e59f2038 	ldr	r2, [pc, #56]	; 1936c <CMouseDevice::CMouseDevice()+0x68>
   19330:	e5846020 	str	r6, [r4, #32]
   19334:	e5923000 	ldr	r3, [r2]
   19338:	e5843024 	str	r3, [r4, #36]	; 0x24
   1933c:	e2833001 	add	r3, r3, #1
   19340:	e5823000 	str	r3, [r2]
   19344:	eb00067b 	bl	1ad38 <CDeviceNameService::Get()>
   19348:	e5942024 	ldr	r2, [r4, #36]	; 0x24
   1934c:	e285101c 	add	r1, r5, #28
   19350:	e58d6000 	str	r6, [sp]
   19354:	e1a03004 	mov	r3, r4
   19358:	eb000684 	bl	1ad70 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   1935c:	e1a00004 	mov	r0, r4
   19360:	e28dd008 	add	sp, sp, #8
   19364:	e8bd8070 	pop	{r4, r5, r6, pc}
   19368:	00027294 	.word	0x00027294
   1936c:	00029888 	.word	0x00029888

00019370 <CMouseDevice::Setup(unsigned int, unsigned int)>:
   19370:	e2800004 	add	r0, r0, #4
   19374:	ea000039 	b	19460 <CMouseBehaviour::Setup(unsigned int, unsigned int)>

00019378 <CMouseDevice::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))>:
   19378:	e2800004 	add	r0, r0, #4
   1937c:	ea00008e 	b	195bc <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))>

00019380 <CMouseDevice::SetCursor(unsigned int, unsigned int)>:
   19380:	e2800004 	add	r0, r0, #4
   19384:	ea00011a 	b	197f4 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)>

00019388 <CMouseDevice::ShowCursor(bool)>:
   19388:	e2800004 	add	r0, r0, #4
   1938c:	ea000143 	b	198a0 <CMouseBehaviour::ShowCursor(bool)>

00019390 <CMouseDevice::UpdateCursor()>:
   19390:	e5903020 	ldr	r3, [r0, #32]
   19394:	e3530000 	cmp	r3, #0
   19398:	112fff1e 	bxne	lr
   1939c:	e2800004 	add	r0, r0, #4
   193a0:	ea00015c 	b	19918 <CMouseBehaviour::UpdateCursor()>

000193a4 <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int))>:
   193a4:	e5903020 	ldr	r3, [r0, #32]
   193a8:	e92d4070 	push	{r4, r5, r6, lr}
   193ac:	e3530000 	cmp	r3, #0
   193b0:	e1a04000 	mov	r4, r0
   193b4:	e1a05001 	mov	r5, r1
   193b8:	0a000003 	beq	193cc <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int))+0x28>
   193bc:	e3a02048 	mov	r2, #72	; 0x48
   193c0:	e59f1024 	ldr	r1, [pc, #36]	; 193ec <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int))+0x48>
   193c4:	e59f0024 	ldr	r0, [pc, #36]	; 193f0 <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int))+0x4c>
   193c8:	eb000361 	bl	1a154 <assertion_failed>
   193cc:	e3550000 	cmp	r5, #0
   193d0:	e5845020 	str	r5, [r4, #32]
   193d4:	18bd8070 	popne	{r4, r5, r6, pc}
   193d8:	e3a0204a 	mov	r2, #74	; 0x4a
   193dc:	e8bd4070 	pop	{r4, r5, r6, lr}
   193e0:	e59f1004 	ldr	r1, [pc, #4]	; 193ec <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int))+0x48>
   193e4:	e59f0008 	ldr	r0, [pc, #8]	; 193f4 <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int))+0x50>
   193e8:	ea000359 	b	1a154 <assertion_failed>
   193ec:	000272b8 	.word	0x000272b8
   193f0:	000258d4 	.word	0x000258d4
   193f4:	000258ec 	.word	0x000258ec

000193f8 <CMouseDevice::ReportHandler(unsigned int, int, int)>:
   193f8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   193fc:	e1a04000 	mov	r4, r0
   19400:	e2800004 	add	r0, r0, #4
   19404:	e1a07003 	mov	r7, r3
   19408:	e1a05001 	mov	r5, r1
   1940c:	e1a06002 	mov	r6, r2
   19410:	eb00007e 	bl	19610 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)>
   19414:	e5943020 	ldr	r3, [r4, #32]
   19418:	e3530000 	cmp	r3, #0
   1941c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   19420:	e1a02007 	mov	r2, r7
   19424:	e1a01006 	mov	r1, r6
   19428:	e1a00005 	mov	r0, r5
   1942c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   19430:	e12fff13 	bx	r3

00019434 <CMouseBehaviour::CMouseBehaviour()>:
   19434:	e3a02000 	mov	r2, #0
   19438:	e5802000 	str	r2, [r0]
   1943c:	e5802004 	str	r2, [r0, #4]
   19440:	e5802008 	str	r2, [r0, #8]
   19444:	e580200c 	str	r2, [r0, #12]
   19448:	e5c02010 	strb	r2, [r0, #16]
   1944c:	e5c02011 	strb	r2, [r0, #17]
   19450:	e5802014 	str	r2, [r0, #20]
   19454:	e5802018 	str	r2, [r0, #24]
   19458:	e12fff1e 	bx	lr

0001945c <CMouseBehaviour::~CMouseBehaviour()>:
   1945c:	e12fff1e 	bx	lr

00019460 <CMouseBehaviour::Setup(unsigned int, unsigned int)>:
   19460:	e92d4070 	push	{r4, r5, r6, lr}
   19464:	e5903000 	ldr	r3, [r0]
   19468:	e24dd030 	sub	sp, sp, #48	; 0x30
   1946c:	e3530000 	cmp	r3, #0
   19470:	e1a04000 	mov	r4, r0
   19474:	e1a06001 	mov	r6, r1
   19478:	e1a05002 	mov	r5, r2
   1947c:	1a00002c 	bne	19534 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0xd4>
   19480:	e3560000 	cmp	r6, #0
   19484:	e5846000 	str	r6, [r4]
   19488:	0a000030 	beq	19550 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0xf0>
   1948c:	e5943004 	ldr	r3, [r4, #4]
   19490:	e3530000 	cmp	r3, #0
   19494:	1a000034 	bne	1956c <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x10c>
   19498:	e3550000 	cmp	r5, #0
   1949c:	e5845004 	str	r5, [r4, #4]
   194a0:	0a000038 	beq	19588 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x128>
   194a4:	e5943000 	ldr	r3, [r4]
   194a8:	e2855001 	add	r5, r5, #1
   194ac:	e2833001 	add	r3, r3, #1
   194b0:	e1a030a3 	lsr	r3, r3, #1
   194b4:	e1a050a5 	lsr	r5, r5, #1
   194b8:	e584500c 	str	r5, [r4, #12]
   194bc:	e5843008 	str	r3, [r4, #8]
   194c0:	e28d0008 	add	r0, sp, #8
   194c4:	eb000346 	bl	1a1e4 <CBcmPropertyTags::CBcmPropertyTags()>
   194c8:	e3a03018 	mov	r3, #24
   194cc:	e3a0e000 	mov	lr, #0
   194d0:	e3a04010 	mov	r4, #16
   194d4:	e59fc0c4 	ldr	ip, [pc, #196]	; 195a0 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x140>
   194d8:	e58d3000 	str	r3, [sp]
   194dc:	e3ccc103 	bic	ip, ip, #-1073741824	; 0xc0000000
   194e0:	e38cc101 	orr	ip, ip, #1073741824	; 0x40000000
   194e4:	e3a03024 	mov	r3, #36	; 0x24
   194e8:	e28d200c 	add	r2, sp, #12
   194ec:	e59f10b0 	ldr	r1, [pc, #176]	; 195a4 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x144>
   194f0:	e28d0008 	add	r0, sp, #8
   194f4:	e58dc024 	str	ip, [sp, #36]	; 0x24
   194f8:	e58d4018 	str	r4, [sp, #24]
   194fc:	e58d401c 	str	r4, [sp, #28]
   19500:	e58de020 	str	lr, [sp, #32]
   19504:	e58de028 	str	lr, [sp, #40]	; 0x28
   19508:	e58de02c 	str	lr, [sp, #44]	; 0x2c
   1950c:	eb00038b 	bl	1a340 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   19510:	e2504000 	subs	r4, r0, #0
   19514:	159d4018 	ldrne	r4, [sp, #24]
   19518:	e28d0008 	add	r0, sp, #8
   1951c:	116f4f14 	clzne	r4, r4
   19520:	11a042a4 	lsrne	r4, r4, #5
   19524:	eb000334 	bl	1a1fc <CBcmPropertyTags::~CBcmPropertyTags()>
   19528:	e1a00004 	mov	r0, r4
   1952c:	e28dd030 	add	sp, sp, #48	; 0x30
   19530:	e8bd8070 	pop	{r4, r5, r6, pc}
   19534:	e3a0204c 	mov	r2, #76	; 0x4c
   19538:	e59f1068 	ldr	r1, [pc, #104]	; 195a8 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x148>
   1953c:	e59f0068 	ldr	r0, [pc, #104]	; 195ac <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x14c>
   19540:	eb000303 	bl	1a154 <assertion_failed>
   19544:	e3560000 	cmp	r6, #0
   19548:	e5846000 	str	r6, [r4]
   1954c:	1affffce 	bne	1948c <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x2c>
   19550:	e3a0204e 	mov	r2, #78	; 0x4e
   19554:	e59f104c 	ldr	r1, [pc, #76]	; 195a8 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x148>
   19558:	e59f0050 	ldr	r0, [pc, #80]	; 195b0 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x150>
   1955c:	eb0002fc 	bl	1a154 <assertion_failed>
   19560:	e5943004 	ldr	r3, [r4, #4]
   19564:	e3530000 	cmp	r3, #0
   19568:	0affffca 	beq	19498 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x38>
   1956c:	e3a02050 	mov	r2, #80	; 0x50
   19570:	e59f1030 	ldr	r1, [pc, #48]	; 195a8 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x148>
   19574:	e59f0038 	ldr	r0, [pc, #56]	; 195b4 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x154>
   19578:	eb0002f5 	bl	1a154 <assertion_failed>
   1957c:	e3550000 	cmp	r5, #0
   19580:	e5845004 	str	r5, [r4, #4]
   19584:	1affffc6 	bne	194a4 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x44>
   19588:	e3a02052 	mov	r2, #82	; 0x52
   1958c:	e59f1014 	ldr	r1, [pc, #20]	; 195a8 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x148>
   19590:	e59f0020 	ldr	r0, [pc, #32]	; 195b8 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x158>
   19594:	eb0002ee 	bl	1a154 <assertion_failed>
   19598:	e5945004 	ldr	r5, [r4, #4]
   1959c:	eaffffc0 	b	194a4 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x44>
   195a0:	000272c4 	.word	0x000272c4
   195a4:	00008010 	.word	0x00008010
   195a8:	000276c4 	.word	0x000276c4
   195ac:	000276d8 	.word	0x000276d8
   195b0:	000276ec 	.word	0x000276ec
   195b4:	00027700 	.word	0x00027700
   195b8:	00027718 	.word	0x00027718

000195bc <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))>:
   195bc:	e5903018 	ldr	r3, [r0, #24]
   195c0:	e92d4070 	push	{r4, r5, r6, lr}
   195c4:	e3530000 	cmp	r3, #0
   195c8:	e1a04000 	mov	r4, r0
   195cc:	e1a05001 	mov	r5, r1
   195d0:	0a000003 	beq	195e4 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))+0x28>
   195d4:	e3a0206e 	mov	r2, #110	; 0x6e
   195d8:	e59f1024 	ldr	r1, [pc, #36]	; 19604 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))+0x48>
   195dc:	e59f0024 	ldr	r0, [pc, #36]	; 19608 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))+0x4c>
   195e0:	eb0002db 	bl	1a154 <assertion_failed>
   195e4:	e3550000 	cmp	r5, #0
   195e8:	e5845018 	str	r5, [r4, #24]
   195ec:	18bd8070 	popne	{r4, r5, r6, pc}
   195f0:	e3a02070 	mov	r2, #112	; 0x70
   195f4:	e8bd4070 	pop	{r4, r5, r6, lr}
   195f8:	e59f1004 	ldr	r1, [pc, #4]	; 19604 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))+0x48>
   195fc:	e59f0008 	ldr	r0, [pc, #8]	; 1960c <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))+0x50>
   19600:	ea0002d3 	b	1a154 <assertion_failed>
   19604:	000276c4 	.word	0x000276c4
   19608:	0002772c 	.word	0x0002772c
   1960c:	0002508c 	.word	0x0002508c

00019610 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)>:
   19610:	e590c000 	ldr	ip, [r0]
   19614:	e35c0000 	cmp	ip, #0
   19618:	012fff1e 	bxeq	lr
   1961c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19620:	e590e004 	ldr	lr, [r0, #4]
   19624:	e35e0000 	cmp	lr, #0
   19628:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1962c:	e1a04000 	mov	r4, r0
   19630:	e1a05001 	mov	r5, r1
   19634:	e0822182 	add	r2, r2, r2, lsl #3
   19638:	e59f113c 	ldr	r1, [pc, #316]	; 1977c <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x16c>
   1963c:	e1a02082 	lsl	r2, r2, #1
   19640:	e0833183 	add	r3, r3, r3, lsl #3
   19644:	e0c60291 	smull	r0, r6, r1, r2
   19648:	e1a03083 	lsl	r3, r3, #1
   1964c:	e0c10391 	smull	r0, r1, r1, r3
   19650:	e1a02fc2 	asr	r2, r2, #31
   19654:	e5940008 	ldr	r0, [r4, #8]
   19658:	e0622146 	rsb	r2, r2, r6, asr #2
   1965c:	e1a03fc3 	asr	r3, r3, #31
   19660:	e0633141 	rsb	r3, r3, r1, asr #2
   19664:	e0822000 	add	r2, r2, r0
   19668:	e594100c 	ldr	r1, [r4, #12]
   1966c:	e15c0002 	cmp	ip, r2
   19670:	e0813003 	add	r3, r1, r3
   19674:	9a00002c 	bls	1972c <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x11c>
   19678:	e15e0003 	cmp	lr, r3
   1967c:	e584300c 	str	r3, [r4, #12]
   19680:	e5842008 	str	r2, [r4, #8]
   19684:	8a000037 	bhi	19768 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x158>
   19688:	e1500002 	cmp	r0, r2
   1968c:	e584100c 	str	r1, [r4, #12]
   19690:	0a000008 	beq	196b8 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xa8>
   19694:	e3a03001 	mov	r3, #1
   19698:	e5946018 	ldr	r6, [r4, #24]
   1969c:	e5c43010 	strb	r3, [r4, #16]
   196a0:	e3560000 	cmp	r6, #0
   196a4:	0a000027 	beq	19748 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x138>
   196a8:	e594300c 	ldr	r3, [r4, #12]
   196ac:	e1a01005 	mov	r1, r5
   196b0:	e3a00000 	mov	r0, #0
   196b4:	e12fff36 	blx	r6
   196b8:	e5943014 	ldr	r3, [r4, #20]
   196bc:	e1550003 	cmp	r5, r3
   196c0:	0a000020 	beq	19748 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x138>
   196c4:	e5942018 	ldr	r2, [r4, #24]
   196c8:	e3520000 	cmp	r2, #0
   196cc:	0a00001d 	beq	19748 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x138>
   196d0:	e3a06000 	mov	r6, #0
   196d4:	e3a07001 	mov	r7, #1
   196d8:	e1a01617 	lsl	r1, r7, r6
   196dc:	e1110003 	tst	r1, r3
   196e0:	e3a08002 	mov	r8, #2
   196e4:	0a000008 	beq	1970c <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xfc>
   196e8:	e1150001 	tst	r5, r1
   196ec:	0a000017 	beq	19750 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x140>
   196f0:	e2866001 	add	r6, r6, #1
   196f4:	e3560003 	cmp	r6, #3
   196f8:	0a000012 	beq	19748 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x138>
   196fc:	e5943014 	ldr	r3, [r4, #20]
   19700:	e1a01617 	lsl	r1, r7, r6
   19704:	e1110003 	tst	r1, r3
   19708:	1afffff6 	bne	196e8 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xd8>
   1970c:	e1150001 	tst	r5, r1
   19710:	0afffff6 	beq	196f0 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xe0>
   19714:	e5949018 	ldr	r9, [r4, #24]
   19718:	e594300c 	ldr	r3, [r4, #12]
   1971c:	e5942008 	ldr	r2, [r4, #8]
   19720:	e1a00007 	mov	r0, r7
   19724:	e12fff39 	blx	r9
   19728:	eafffff0 	b	196f0 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xe0>
   1972c:	e15e0003 	cmp	lr, r3
   19730:	e584300c 	str	r3, [r4, #12]
   19734:	9a00000e 	bls	19774 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x164>
   19738:	e1510003 	cmp	r1, r3
   1973c:	11a02000 	movne	r2, r0
   19740:	1affffd3 	bne	19694 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x84>
   19744:	eaffffdb 	b	196b8 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xa8>
   19748:	e5845014 	str	r5, [r4, #20]
   1974c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19750:	e5949018 	ldr	r9, [r4, #24]
   19754:	e594300c 	ldr	r3, [r4, #12]
   19758:	e5942008 	ldr	r2, [r4, #8]
   1975c:	e1a00008 	mov	r0, r8
   19760:	e12fff39 	blx	r9
   19764:	eaffffe1 	b	196f0 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xe0>
   19768:	e1500002 	cmp	r0, r2
   1976c:	1affffc8 	bne	19694 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x84>
   19770:	eafffff0 	b	19738 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x128>
   19774:	e584100c 	str	r1, [r4, #12]
   19778:	eaffffce 	b	196b8 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xa8>
   1977c:	66666667 	.word	0x66666667

00019780 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>:
   19780:	e92d4070 	push	{r4, r5, r6, lr}
   19784:	e24dd028 	sub	sp, sp, #40	; 0x28
   19788:	e1a05000 	mov	r5, r0
   1978c:	e28d0008 	add	r0, sp, #8
   19790:	e1a04001 	mov	r4, r1
   19794:	e1a06002 	mov	r6, r2
   19798:	eb000291 	bl	1a1e4 <CBcmPropertyTags::CBcmPropertyTags()>
   1979c:	e3a03010 	mov	r3, #16
   197a0:	e3a0c001 	mov	ip, #1
   197a4:	e58d3000 	str	r3, [sp]
   197a8:	e28d200c 	add	r2, sp, #12
   197ac:	e3a0301c 	mov	r3, #28
   197b0:	e59f1038 	ldr	r1, [pc, #56]	; 197f0 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)+0x70>
   197b4:	e28d0008 	add	r0, sp, #8
   197b8:	e58d4020 	str	r4, [sp, #32]
   197bc:	e58dc024 	str	ip, [sp, #36]	; 0x24
   197c0:	e58d6018 	str	r6, [sp, #24]
   197c4:	e58d501c 	str	r5, [sp, #28]
   197c8:	eb0002dc 	bl	1a340 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   197cc:	e2504000 	subs	r4, r0, #0
   197d0:	159d4018 	ldrne	r4, [sp, #24]
   197d4:	e28d0008 	add	r0, sp, #8
   197d8:	116f4f14 	clzne	r4, r4
   197dc:	11a042a4 	lsrne	r4, r4, #5
   197e0:	eb000285 	bl	1a1fc <CBcmPropertyTags::~CBcmPropertyTags()>
   197e4:	e1a00004 	mov	r0, r4
   197e8:	e28dd028 	add	sp, sp, #40	; 0x28
   197ec:	e8bd8070 	pop	{r4, r5, r6, pc}
   197f0:	00008011 	.word	0x00008011

000197f4 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)>:
   197f4:	e5903000 	ldr	r3, [r0]
   197f8:	e92d4070 	push	{r4, r5, r6, lr}
   197fc:	e3530000 	cmp	r3, #0
   19800:	e1a04000 	mov	r4, r0
   19804:	e1a05001 	mov	r5, r1
   19808:	e1a06002 	mov	r6, r2
   1980c:	0a000016 	beq	1986c <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x78>
   19810:	e5943004 	ldr	r3, [r4, #4]
   19814:	e3530000 	cmp	r3, #0
   19818:	0a00000e 	beq	19858 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x64>
   1981c:	e5943000 	ldr	r3, [r4]
   19820:	e1530005 	cmp	r3, r5
   19824:	9a000009 	bls	19850 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x5c>
   19828:	e5943004 	ldr	r3, [r4, #4]
   1982c:	e1530006 	cmp	r3, r6
   19830:	9a000006 	bls	19850 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x5c>
   19834:	e5d43011 	ldrb	r3, [r4, #17]
   19838:	e5845008 	str	r5, [r4, #8]
   1983c:	e3530000 	cmp	r3, #0
   19840:	e584600c 	str	r6, [r4, #12]
   19844:	1a00000d 	bne	19880 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x8c>
   19848:	e3a00001 	mov	r0, #1
   1984c:	e8bd8070 	pop	{r4, r5, r6, pc}
   19850:	e3a00000 	mov	r0, #0
   19854:	e8bd8070 	pop	{r4, r5, r6, pc}
   19858:	e3a02076 	mov	r2, #118	; 0x76
   1985c:	e59f1030 	ldr	r1, [pc, #48]	; 19894 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0xa0>
   19860:	e59f0030 	ldr	r0, [pc, #48]	; 19898 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0xa4>
   19864:	eb00023a 	bl	1a154 <assertion_failed>
   19868:	eaffffeb 	b	1981c <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x28>
   1986c:	e3a02075 	mov	r2, #117	; 0x75
   19870:	e59f101c 	ldr	r1, [pc, #28]	; 19894 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0xa0>
   19874:	e59f0020 	ldr	r0, [pc, #32]	; 1989c <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0xa8>
   19878:	eb000235 	bl	1a154 <assertion_failed>
   1987c:	eaffffe3 	b	19810 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x1c>
   19880:	e1a01006 	mov	r1, r6
   19884:	e1a00005 	mov	r0, r5
   19888:	e8bd4070 	pop	{r4, r5, r6, lr}
   1988c:	e3a02001 	mov	r2, #1
   19890:	eaffffba 	b	19780 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>
   19894:	000276c4 	.word	0x000276c4
   19898:	00027718 	.word	0x00027718
   1989c:	000276ec 	.word	0x000276ec

000198a0 <CMouseBehaviour::ShowCursor(bool)>:
   198a0:	e5902008 	ldr	r2, [r0, #8]
   198a4:	e5903000 	ldr	r3, [r0]
   198a8:	e92d4070 	push	{r4, r5, r6, lr}
   198ac:	e1520003 	cmp	r2, r3
   198b0:	e5d05011 	ldrb	r5, [r0, #17]
   198b4:	e1a04000 	mov	r4, r0
   198b8:	e5c01011 	strb	r1, [r0, #17]
   198bc:	2a00000d 	bcs	198f8 <CMouseBehaviour::ShowCursor(bool)+0x58>
   198c0:	e594100c 	ldr	r1, [r4, #12]
   198c4:	e5943004 	ldr	r3, [r4, #4]
   198c8:	e1510003 	cmp	r1, r3
   198cc:	3a000004 	bcc	198e4 <CMouseBehaviour::ShowCursor(bool)+0x44>
   198d0:	e59f1034 	ldr	r1, [pc, #52]	; 1990c <CMouseBehaviour::ShowCursor(bool)+0x6c>
   198d4:	e3a0208e 	mov	r2, #142	; 0x8e
   198d8:	e59f0030 	ldr	r0, [pc, #48]	; 19910 <CMouseBehaviour::ShowCursor(bool)+0x70>
   198dc:	eb00021c 	bl	1a154 <assertion_failed>
   198e0:	e594100c 	ldr	r1, [r4, #12]
   198e4:	e5d42011 	ldrb	r2, [r4, #17]
   198e8:	e5940008 	ldr	r0, [r4, #8]
   198ec:	ebffffa3 	bl	19780 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>
   198f0:	e1a00005 	mov	r0, r5
   198f4:	e8bd8070 	pop	{r4, r5, r6, pc}
   198f8:	e3a0208d 	mov	r2, #141	; 0x8d
   198fc:	e59f1008 	ldr	r1, [pc, #8]	; 1990c <CMouseBehaviour::ShowCursor(bool)+0x6c>
   19900:	e59f000c 	ldr	r0, [pc, #12]	; 19914 <CMouseBehaviour::ShowCursor(bool)+0x74>
   19904:	eb000212 	bl	1a154 <assertion_failed>
   19908:	eaffffec 	b	198c0 <CMouseBehaviour::ShowCursor(bool)+0x20>
   1990c:	000276c4 	.word	0x000276c4
   19910:	00027760 	.word	0x00027760
   19914:	00027744 	.word	0x00027744

00019918 <CMouseBehaviour::UpdateCursor()>:
   19918:	e5d03011 	ldrb	r3, [r0, #17]
   1991c:	e3530000 	cmp	r3, #0
   19920:	012fff1e 	bxeq	lr
   19924:	e5d03010 	ldrb	r3, [r0, #16]
   19928:	e3530000 	cmp	r3, #0
   1992c:	012fff1e 	bxeq	lr
   19930:	e3a03000 	mov	r3, #0
   19934:	e590100c 	ldr	r1, [r0, #12]
   19938:	e5c03010 	strb	r3, [r0, #16]
   1993c:	e3a02001 	mov	r2, #1
   19940:	e5900008 	ldr	r0, [r0, #8]
   19944:	eaffff8d 	b	19780 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>

00019948 <CPartitionManager::CPartitionManager(CDevice*, char const*)>:
   19948:	e92d4010 	push	{r4, lr}
   1994c:	e1a04000 	mov	r4, r0
   19950:	e4801004 	str	r1, [r0], #4
   19954:	e1a01002 	mov	r1, r2
   19958:	eb001383 	bl	1e76c <CString::CString(char const*)>
   1995c:	e3a03000 	mov	r3, #0
   19960:	e1a00004 	mov	r0, r4
   19964:	e5843014 	str	r3, [r4, #20]
   19968:	e5843018 	str	r3, [r4, #24]
   1996c:	e584301c 	str	r3, [r4, #28]
   19970:	e5843020 	str	r3, [r4, #32]
   19974:	e8bd8010 	pop	{r4, pc}

00019978 <CPartitionManager::~CPartitionManager()>:
   19978:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1997c:	e1a06000 	mov	r6, r0
   19980:	e3a05000 	mov	r5, #0
   19984:	e2804014 	add	r4, r0, #20
   19988:	e2807024 	add	r7, r0, #36	; 0x24
   1998c:	e5940000 	ldr	r0, [r4]
   19990:	e3500000 	cmp	r0, #0
   19994:	0a000002 	beq	199a4 <CPartitionManager::~CPartitionManager()+0x2c>
   19998:	e5903000 	ldr	r3, [r0]
   1999c:	e5933004 	ldr	r3, [r3, #4]
   199a0:	e12fff33 	blx	r3
   199a4:	e4845004 	str	r5, [r4], #4
   199a8:	e1540007 	cmp	r4, r7
   199ac:	1afffff6 	bne	1998c <CPartitionManager::~CPartitionManager()+0x14>
   199b0:	e1a00006 	mov	r0, r6
   199b4:	e4805004 	str	r5, [r0], #4
   199b8:	eb001332 	bl	1e688 <CString::~CString()>
   199bc:	e1a00006 	mov	r0, r6
   199c0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

000199c4 <CPartitionManager::Initialize()>:
   199c4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   199c8:	e1a06000 	mov	r6, r0
   199cc:	e5900000 	ldr	r0, [r0]
   199d0:	e3a03000 	mov	r3, #0
   199d4:	e5901000 	ldr	r1, [r0]
   199d8:	e24ddf87 	sub	sp, sp, #540	; 0x21c
   199dc:	e3a02000 	mov	r2, #0
   199e0:	e5911010 	ldr	r1, [r1, #16]
   199e4:	e12fff31 	blx	r1
   199e8:	e1903001 	orrs	r3, r0, r1
   199ec:	0a000007 	beq	19a10 <CPartitionManager::Initialize()+0x4c>
   199f0:	eb000bca 	bl	1c920 <CLogger::Get()>
   199f4:	e59f31f0 	ldr	r3, [pc, #496]	; 19bec <CPartitionManager::Initialize()+0x228>
   199f8:	e3a02001 	mov	r2, #1
   199fc:	e59f11ec 	ldr	r1, [pc, #492]	; 19bf0 <CPartitionManager::Initialize()+0x22c>
   19a00:	eb000d6f 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   19a04:	e3a00000 	mov	r0, #0
   19a08:	e28ddf87 	add	sp, sp, #540	; 0x21c
   19a0c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19a10:	e5960000 	ldr	r0, [r6]
   19a14:	e28d1018 	add	r1, sp, #24
   19a18:	e5903000 	ldr	r3, [r0]
   19a1c:	e3a02c02 	mov	r2, #512	; 0x200
   19a20:	e5933008 	ldr	r3, [r3, #8]
   19a24:	e12fff33 	blx	r3
   19a28:	e3500c02 	cmp	r0, #512	; 0x200
   19a2c:	1affffef 	bne	199f0 <CPartitionManager::Initialize()+0x2c>
   19a30:	e28d3f85 	add	r3, sp, #532	; 0x214
   19a34:	e2833002 	add	r3, r3, #2
   19a38:	e1d320b0 	ldrh	r2, [r3]
   19a3c:	e59f31b0 	ldr	r3, [pc, #432]	; 19bf4 <CPartitionManager::Initialize()+0x230>
   19a40:	e1520003 	cmp	r2, r3
   19a44:	1a000060 	bne	19bcc <CPartitionManager::Initialize()+0x208>
   19a48:	e3a04000 	mov	r4, #0
   19a4c:	e1a09004 	mov	r9, r4
   19a50:	e1a08004 	mov	r8, r4
   19a54:	e59f719c 	ldr	r7, [pc, #412]	; 19bf8 <CPartitionManager::Initialize()+0x234>
   19a58:	e59fb19c 	ldr	fp, [pc, #412]	; 19bfc <CPartitionManager::Initialize()+0x238>
   19a5c:	e2865014 	add	r5, r6, #20
   19a60:	e28d3018 	add	r3, sp, #24
   19a64:	e0833204 	add	r3, r3, r4, lsl #4
   19a68:	e5d321c2 	ldrb	r2, [r3, #450]	; 0x1c2
   19a6c:	e28d1f86 	add	r1, sp, #536	; 0x218
   19a70:	e352000f 	cmp	r2, #15
   19a74:	91e03237 	mvnls	r3, r7, lsr r2
   19a78:	81a03008 	movhi	r3, r8
   19a7c:	92033001 	andls	r3, r3, #1
   19a80:	92233001 	eorls	r3, r3, #1
   19a84:	e35200ef 	cmp	r2, #239	; 0xef
   19a88:	11a02003 	movne	r2, r3
   19a8c:	03832001 	orreq	r2, r3, #1
   19a90:	e284301c 	add	r3, r4, #28
   19a94:	e0811203 	add	r1, r1, r3, lsl #4
   19a98:	e3520000 	cmp	r2, #0
   19a9c:	e2410f7e 	sub	r0, r1, #504	; 0x1f8
   19aa0:	e2844001 	add	r4, r4, #1
   19aa4:	1a00003a 	bne	19b94 <CPartitionManager::Initialize()+0x1d0>
   19aa8:	e15020b2 	ldrh	r2, [r0, #-2]
   19aac:	e1d000b0 	ldrh	r0, [r0]
   19ab0:	e2411f7d 	sub	r1, r1, #500	; 0x1f4
   19ab4:	e1922800 	orrs	r2, r2, r0, lsl #16
   19ab8:	0a000035 	beq	19b94 <CPartitionManager::Initialize()+0x1d0>
   19abc:	e15120b2 	ldrh	r2, [r1, #-2]
   19ac0:	e1d110b0 	ldrh	r1, [r1]
   19ac4:	e1922801 	orrs	r2, r2, r1, lsl #16
   19ac8:	0a000031 	beq	19b94 <CPartitionManager::Initialize()+0x1d0>
   19acc:	e5952000 	ldr	r2, [r5]
   19ad0:	e1a0a006 	mov	sl, r6
   19ad4:	e3520000 	cmp	r2, #0
   19ad8:	e2899001 	add	r9, r9, #1
   19adc:	0a000005 	beq	19af8 <CPartitionManager::Initialize()+0x134>
   19ae0:	e3a02070 	mov	r2, #112	; 0x70
   19ae4:	e59f1114 	ldr	r1, [pc, #276]	; 19c00 <CPartitionManager::Initialize()+0x23c>
   19ae8:	e59f0114 	ldr	r0, [pc, #276]	; 19c04 <CPartitionManager::Initialize()+0x240>
   19aec:	e58d3000 	str	r3, [sp]
   19af0:	eb000197 	bl	1a154 <assertion_failed>
   19af4:	e59d3000 	ldr	r3, [sp]
   19af8:	e3a00020 	mov	r0, #32
   19afc:	e58d3004 	str	r3, [sp, #4]
   19b00:	eb001f27 	bl	217a4 <operator new(unsigned int)>
   19b04:	e59d3004 	ldr	r3, [sp, #4]
   19b08:	e28d2f86 	add	r2, sp, #536	; 0x218
   19b0c:	e0823203 	add	r3, r2, r3, lsl #4
   19b10:	e58d0000 	str	r0, [sp]
   19b14:	e2432f7d 	sub	r2, r3, #500	; 0x1f4
   19b18:	e2431f7e 	sub	r1, r3, #504	; 0x1f8
   19b1c:	e1d2c0b0 	ldrh	ip, [r2]
   19b20:	e15230b2 	ldrh	r3, [r2, #-2]
   19b24:	e15120b2 	ldrh	r2, [r1, #-2]
   19b28:	e1d110b0 	ldrh	r1, [r1]
   19b2c:	e183380c 	orr	r3, r3, ip, lsl #16
   19b30:	e1822801 	orr	r2, r2, r1, lsl #16
   19b34:	e49a1004 	ldr	r1, [sl], #4
   19b38:	eb0000d8 	bl	19ea0 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)>
   19b3c:	e59d3000 	ldr	r3, [sp]
   19b40:	e28d0008 	add	r0, sp, #8
   19b44:	e5853000 	str	r3, [r5]
   19b48:	eb001301 	bl	1e754 <CString::CString()>
   19b4c:	e1a0000a 	mov	r0, sl
   19b50:	eb001315 	bl	1e7ac <CString::operator char const*() const>
   19b54:	e1a03009 	mov	r3, r9
   19b58:	e1a02000 	mov	r2, r0
   19b5c:	e1a0100b 	mov	r1, fp
   19b60:	e28d0008 	add	r0, sp, #8
   19b64:	eb0016e8 	bl	1f70c <CString::Format(char const*, ...)>
   19b68:	eb000472 	bl	1ad38 <CDeviceNameService::Get()>
   19b6c:	e1a0a000 	mov	sl, r0
   19b70:	e28d0008 	add	r0, sp, #8
   19b74:	eb00130c 	bl	1e7ac <CString::operator char const*() const>
   19b78:	e3a03001 	mov	r3, #1
   19b7c:	e1a01000 	mov	r1, r0
   19b80:	e5952000 	ldr	r2, [r5]
   19b84:	e1a0000a 	mov	r0, sl
   19b88:	eb0003aa 	bl	1aa38 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   19b8c:	e28d0008 	add	r0, sp, #8
   19b90:	eb0012bc 	bl	1e688 <CString::~CString()>
   19b94:	e3540004 	cmp	r4, #4
   19b98:	e2855004 	add	r5, r5, #4
   19b9c:	1affffaf 	bne	19a60 <CPartitionManager::Initialize()+0x9c>
   19ba0:	e3590000 	cmp	r9, #0
   19ba4:	13a00001 	movne	r0, #1
   19ba8:	1affff96 	bne	19a08 <CPartitionManager::Initialize()+0x44>
   19bac:	eb000b5b 	bl	1c920 <CLogger::Get()>
   19bb0:	e59f3050 	ldr	r3, [pc, #80]	; 19c08 <CPartitionManager::Initialize()+0x244>
   19bb4:	e3a02002 	mov	r2, #2
   19bb8:	e59f1030 	ldr	r1, [pc, #48]	; 19bf0 <CPartitionManager::Initialize()+0x22c>
   19bbc:	eb000d00 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   19bc0:	e3a00001 	mov	r0, #1
   19bc4:	e28ddf87 	add	sp, sp, #540	; 0x21c
   19bc8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19bcc:	eb000b53 	bl	1c920 <CLogger::Get()>
   19bd0:	e59f3034 	ldr	r3, [pc, #52]	; 19c0c <CPartitionManager::Initialize()+0x248>
   19bd4:	e3a02002 	mov	r2, #2
   19bd8:	e59f1010 	ldr	r1, [pc, #16]	; 19bf0 <CPartitionManager::Initialize()+0x22c>
   19bdc:	eb000cf8 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   19be0:	e3a00001 	mov	r0, #1
   19be4:	e28ddf87 	add	sp, sp, #540	; 0x21c
   19be8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19bec:	000277f4 	.word	0x000277f4
   19bf0:	0002777c 	.word	0x0002777c
   19bf4:	0000aa55 	.word	0x0000aa55
   19bf8:	00008021 	.word	0x00008021
   19bfc:	000277c8 	.word	0x000277c8
   19c00:	00027798 	.word	0x00027798
   19c04:	000277b0 	.word	0x000277b0
   19c08:	000277d0 	.word	0x000277d0
   19c0c:	00027784 	.word	0x00027784

00019c10 <CPartition::Read(void*, unsigned int)>:
   19c10:	e5d03018 	ldrb	r3, [r0, #24]
   19c14:	e3530000 	cmp	r3, #0
   19c18:	1a000021 	bne	19ca4 <CPartition::Read(void*, unsigned int)+0x94>
   19c1c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19c20:	e1c061d0 	ldrd	r6, [r0, #16]
   19c24:	e3a05000 	mov	r5, #0
   19c28:	e3a09000 	mov	r9, #0
   19c2c:	e59f4080 	ldr	r4, [pc, #128]	; 19cb4 <CPartition::Read(void*, unsigned int)+0xa4>
   19c30:	e590800c 	ldr	r8, [r0, #12]
   19c34:	e0944002 	adds	r4, r4, r2
   19c38:	e2a55000 	adc	r5, r5, #0
   19c3c:	e0944006 	adds	r4, r4, r6
   19c40:	e0a55007 	adc	r5, r5, r7
   19c44:	e1a064a4 	lsr	r6, r4, #9
   19c48:	e1a074a5 	lsr	r7, r5, #9
   19c4c:	e1866b85 	orr	r6, r6, r5, lsl #23
   19c50:	e1570009 	cmp	r7, r9
   19c54:	01560008 	cmpeq	r6, r8
   19c58:	8a000013 	bhi	19cac <CPartition::Read(void*, unsigned int)+0x9c>
   19c5c:	e1a04000 	mov	r4, r0
   19c60:	e5900004 	ldr	r0, [r0, #4]
   19c64:	e1a05002 	mov	r5, r2
   19c68:	e3500000 	cmp	r0, #0
   19c6c:	e1a06001 	mov	r6, r1
   19c70:	0a000005 	beq	19c8c <CPartition::Read(void*, unsigned int)+0x7c>
   19c74:	e5903000 	ldr	r3, [r0]
   19c78:	e1a02005 	mov	r2, r5
   19c7c:	e1a01006 	mov	r1, r6
   19c80:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   19c84:	e5933008 	ldr	r3, [r3, #8]
   19c88:	e12fff13 	bx	r3
   19c8c:	e59f0024 	ldr	r0, [pc, #36]	; 19cb8 <CPartition::Read(void*, unsigned int)+0xa8>
   19c90:	e3a02035 	mov	r2, #53	; 0x35
   19c94:	e59f1020 	ldr	r1, [pc, #32]	; 19cbc <CPartition::Read(void*, unsigned int)+0xac>
   19c98:	eb00012d 	bl	1a154 <assertion_failed>
   19c9c:	e5940004 	ldr	r0, [r4, #4]
   19ca0:	eafffff3 	b	19c74 <CPartition::Read(void*, unsigned int)+0x64>
   19ca4:	e3e00000 	mvn	r0, #0
   19ca8:	e12fff1e 	bx	lr
   19cac:	e3e00000 	mvn	r0, #0
   19cb0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19cb4:	000001ff 	.word	0x000001ff
   19cb8:	00023794 	.word	0x00023794
   19cbc:	00027820 	.word	0x00027820

00019cc0 <CPartition::Write(void const*, unsigned int)>:
   19cc0:	e5d03018 	ldrb	r3, [r0, #24]
   19cc4:	e3530000 	cmp	r3, #0
   19cc8:	1a000021 	bne	19d54 <CPartition::Write(void const*, unsigned int)+0x94>
   19ccc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19cd0:	e1c061d0 	ldrd	r6, [r0, #16]
   19cd4:	e3a05000 	mov	r5, #0
   19cd8:	e3a09000 	mov	r9, #0
   19cdc:	e59f4080 	ldr	r4, [pc, #128]	; 19d64 <CPartition::Write(void const*, unsigned int)+0xa4>
   19ce0:	e590800c 	ldr	r8, [r0, #12]
   19ce4:	e0944002 	adds	r4, r4, r2
   19ce8:	e2a55000 	adc	r5, r5, #0
   19cec:	e0944006 	adds	r4, r4, r6
   19cf0:	e0a55007 	adc	r5, r5, r7
   19cf4:	e1a064a4 	lsr	r6, r4, #9
   19cf8:	e1a074a5 	lsr	r7, r5, #9
   19cfc:	e1866b85 	orr	r6, r6, r5, lsl #23
   19d00:	e1570009 	cmp	r7, r9
   19d04:	01560008 	cmpeq	r6, r8
   19d08:	8a000013 	bhi	19d5c <CPartition::Write(void const*, unsigned int)+0x9c>
   19d0c:	e1a04000 	mov	r4, r0
   19d10:	e5900004 	ldr	r0, [r0, #4]
   19d14:	e1a05002 	mov	r5, r2
   19d18:	e3500000 	cmp	r0, #0
   19d1c:	e1a06001 	mov	r6, r1
   19d20:	0a000005 	beq	19d3c <CPartition::Write(void const*, unsigned int)+0x7c>
   19d24:	e5903000 	ldr	r3, [r0]
   19d28:	e1a02005 	mov	r2, r5
   19d2c:	e1a01006 	mov	r1, r6
   19d30:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   19d34:	e593300c 	ldr	r3, [r3, #12]
   19d38:	e12fff13 	bx	r3
   19d3c:	e59f0024 	ldr	r0, [pc, #36]	; 19d68 <CPartition::Write(void const*, unsigned int)+0xa8>
   19d40:	e3a02047 	mov	r2, #71	; 0x47
   19d44:	e59f1020 	ldr	r1, [pc, #32]	; 19d6c <CPartition::Write(void const*, unsigned int)+0xac>
   19d48:	eb000101 	bl	1a154 <assertion_failed>
   19d4c:	e5940004 	ldr	r0, [r4, #4]
   19d50:	eafffff3 	b	19d24 <CPartition::Write(void const*, unsigned int)+0x64>
   19d54:	e3e00000 	mvn	r0, #0
   19d58:	e12fff1e 	bx	lr
   19d5c:	e3e00000 	mvn	r0, #0
   19d60:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19d64:	000001ff 	.word	0x000001ff
   19d68:	00023794 	.word	0x00023794
   19d6c:	00027820 	.word	0x00027820

00019d70 <CPartition::~CPartition()>:
   19d70:	e3a02000 	mov	r2, #0
   19d74:	e92d4010 	push	{r4, lr}
   19d78:	e1a04000 	mov	r4, r0
   19d7c:	e59f3010 	ldr	r3, [pc, #16]	; 19d94 <CPartition::~CPartition()+0x24>
   19d80:	e5802004 	str	r2, [r0, #4]
   19d84:	e5803000 	str	r3, [r0]
   19d88:	eb0002ed 	bl	1a944 <CDevice::~CDevice()>
   19d8c:	e1a00004 	mov	r0, r4
   19d90:	e8bd8010 	pop	{r4, pc}
   19d94:	0002780c 	.word	0x0002780c

00019d98 <CPartition::~CPartition()>:
   19d98:	e3a02000 	mov	r2, #0
   19d9c:	e92d4010 	push	{r4, lr}
   19da0:	e1a04000 	mov	r4, r0
   19da4:	e59f301c 	ldr	r3, [pc, #28]	; 19dc8 <CPartition::~CPartition()+0x30>
   19da8:	e5802004 	str	r2, [r0, #4]
   19dac:	e5803000 	str	r3, [r0]
   19db0:	eb0002e3 	bl	1a944 <CDevice::~CDevice()>
   19db4:	e1a00004 	mov	r0, r4
   19db8:	e3a01020 	mov	r1, #32
   19dbc:	eb001e7c 	bl	217b4 <operator delete(void*, unsigned int)>
   19dc0:	e1a00004 	mov	r0, r4
   19dc4:	e8bd8010 	pop	{r4, pc}
   19dc8:	0002780c 	.word	0x0002780c

00019dcc <CPartition::Seek(unsigned long long)>:
   19dcc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19dd0:	e3a05000 	mov	r5, #0
   19dd4:	e3a01001 	mov	r1, #1
   19dd8:	e59f40b4 	ldr	r4, [pc, #180]	; 19e94 <CPartition::Seek(unsigned long long)+0xc8>
   19ddc:	e0055003 	and	r5, r5, r3
   19de0:	e0044002 	and	r4, r4, r2
   19de4:	e194c005 	orrs	ip, r4, r5
   19de8:	e5c01018 	strb	r1, [r0, #24]
   19dec:	0a000002 	beq	19dfc <CPartition::Seek(unsigned long long)+0x30>
   19df0:	e3e00000 	mvn	r0, #0
   19df4:	e1a01000 	mov	r1, r0
   19df8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19dfc:	e3a07000 	mov	r7, #0
   19e00:	e590600c 	ldr	r6, [r0, #12]
   19e04:	e1a044a2 	lsr	r4, r2, #9
   19e08:	e1a054a3 	lsr	r5, r3, #9
   19e0c:	e1844b83 	orr	r4, r4, r3, lsl #23
   19e10:	e1550007 	cmp	r5, r7
   19e14:	01540006 	cmpeq	r4, r6
   19e18:	2afffff4 	bcs	19df0 <CPartition::Seek(unsigned long long)+0x24>
   19e1c:	e1a07003 	mov	r7, r3
   19e20:	e1a04000 	mov	r4, r0
   19e24:	e9900009 	ldmib	r0, {r0, r3}
   19e28:	e1a08483 	lsl	r8, r3, #9
   19e2c:	e0988002 	adds	r8, r8, r2
   19e30:	e1a09ba3 	lsr	r9, r3, #23
   19e34:	e0a99007 	adc	r9, r9, r7
   19e38:	e3500000 	cmp	r0, #0
   19e3c:	e1a06002 	mov	r6, r2
   19e40:	0a00000d 	beq	19e7c <CPartition::Seek(unsigned long long)+0xb0>
   19e44:	e5903000 	ldr	r3, [r0]
   19e48:	e1a02008 	mov	r2, r8
   19e4c:	e5931010 	ldr	r1, [r3, #16]
   19e50:	e1a03009 	mov	r3, r9
   19e54:	e12fff31 	blx	r1
   19e58:	e1590001 	cmp	r9, r1
   19e5c:	01580000 	cmpeq	r8, r0
   19e60:	1affffe2 	bne	19df0 <CPartition::Seek(unsigned long long)+0x24>
   19e64:	e3a03000 	mov	r3, #0
   19e68:	e1a00006 	mov	r0, r6
   19e6c:	e1a01007 	mov	r1, r7
   19e70:	e1c461f0 	strd	r6, [r4, #16]
   19e74:	e5c43018 	strb	r3, [r4, #24]
   19e78:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19e7c:	e59f0014 	ldr	r0, [pc, #20]	; 19e98 <CPartition::Seek(unsigned long long)+0xcc>
   19e80:	e3a02059 	mov	r2, #89	; 0x59
   19e84:	e59f1010 	ldr	r1, [pc, #16]	; 19e9c <CPartition::Seek(unsigned long long)+0xd0>
   19e88:	eb0000b1 	bl	1a154 <assertion_failed>
   19e8c:	e5940004 	ldr	r0, [r4, #4]
   19e90:	eaffffeb 	b	19e44 <CPartition::Seek(unsigned long long)+0x78>
   19e94:	000001ff 	.word	0x000001ff
   19e98:	00023794 	.word	0x00023794
   19e9c:	00027820 	.word	0x00027820

00019ea0 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)>:
   19ea0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19ea4:	e1a05001 	mov	r5, r1
   19ea8:	e1a04000 	mov	r4, r0
   19eac:	e1a09002 	mov	r9, r2
   19eb0:	e1a08003 	mov	r8, r3
   19eb4:	e3a06000 	mov	r6, #0
   19eb8:	eb0002ad 	bl	1a974 <CDevice::CDevice()>
   19ebc:	e3a07000 	mov	r7, #0
   19ec0:	e3a01001 	mov	r1, #1
   19ec4:	e59f0038 	ldr	r0, [pc, #56]	; 19f04 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)+0x64>
   19ec8:	e3550000 	cmp	r5, #0
   19ecc:	e9840220 	stmib	r4, {r5, r9}
   19ed0:	e584800c 	str	r8, [r4, #12]
   19ed4:	e5840000 	str	r0, [r4]
   19ed8:	e1c461f0 	strd	r6, [r4, #16]
   19edc:	e5c41018 	strb	r1, [r4, #24]
   19ee0:	0a000001 	beq	19eec <CPartition::CPartition(CDevice*, unsigned int, unsigned int)+0x4c>
   19ee4:	e1a00004 	mov	r0, r4
   19ee8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19eec:	e3a0201f 	mov	r2, #31
   19ef0:	e59f1010 	ldr	r1, [pc, #16]	; 19f08 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)+0x68>
   19ef4:	e59f0010 	ldr	r0, [pc, #16]	; 19f0c <CPartition::CPartition(CDevice*, unsigned int, unsigned int)+0x6c>
   19ef8:	eb000095 	bl	1a154 <assertion_failed>
   19efc:	e1a00004 	mov	r0, r4
   19f00:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19f04:	0002780c 	.word	0x0002780c
   19f08:	00027820 	.word	0x00027820
   19f0c:	00023794 	.word	0x00023794

00019f10 <CActLED::~CActLED()>:
   19f10:	e3a02000 	mov	r2, #0
   19f14:	e59f3004 	ldr	r3, [pc, #4]	; 19f20 <CActLED::~CActLED()+0x10>
   19f18:	e5832000 	str	r2, [r3]
   19f1c:	e12fff1e 	bx	lr
   19f20:	000299b4 	.word	0x000299b4

00019f24 <CActLED::On()>:
   19f24:	e5903000 	ldr	r3, [r0]
   19f28:	e3530000 	cmp	r3, #0
   19f2c:	0a000002 	beq	19f3c <CActLED::On()+0x18>
   19f30:	e5d01008 	ldrb	r1, [r0, #8]
   19f34:	e1a00003 	mov	r0, r3
   19f38:	ea000459 	b	1b0a4 <CGPIOPin::Write(unsigned int)>
   19f3c:	e5903004 	ldr	r3, [r0, #4]
   19f40:	e3530000 	cmp	r3, #0
   19f44:	012fff1e 	bxeq	lr
   19f48:	e5d01008 	ldrb	r1, [r0, #8]
   19f4c:	e1a00003 	mov	r0, r3
   19f50:	ea001baf 	b	20e14 <CVirtualGPIOPin::Write(unsigned int)>

00019f54 <CActLED::Off()>:
   19f54:	e5903000 	ldr	r3, [r0]
   19f58:	e3530000 	cmp	r3, #0
   19f5c:	0a000003 	beq	19f70 <CActLED::Off()+0x1c>
   19f60:	e5d01008 	ldrb	r1, [r0, #8]
   19f64:	e1a00003 	mov	r0, r3
   19f68:	e2211001 	eor	r1, r1, #1
   19f6c:	ea00044c 	b	1b0a4 <CGPIOPin::Write(unsigned int)>
   19f70:	e5903004 	ldr	r3, [r0, #4]
   19f74:	e3530000 	cmp	r3, #0
   19f78:	012fff1e 	bxeq	lr
   19f7c:	e5d01008 	ldrb	r1, [r0, #8]
   19f80:	e1a00003 	mov	r0, r3
   19f84:	e2211001 	eor	r1, r1, #1
   19f88:	ea001ba1 	b	20e14 <CVirtualGPIOPin::Write(unsigned int)>

00019f8c <CActLED::CActLED()>:
   19f8c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   19f90:	e3a05000 	mov	r5, #0
   19f94:	e1a04000 	mov	r4, r0
   19f98:	e24dd024 	sub	sp, sp, #36	; 0x24
   19f9c:	e59f314c 	ldr	r3, [pc, #332]	; 1a0f0 <CActLED::CActLED()+0x164>
   19fa0:	e5805000 	str	r5, [r0]
   19fa4:	e5805004 	str	r5, [r0, #4]
   19fa8:	e28d000c 	add	r0, sp, #12
   19fac:	e5834000 	str	r4, [r3]
   19fb0:	eb00008b 	bl	1a1e4 <CBcmPropertyTags::CBcmPropertyTags()>
   19fb4:	e3a03010 	mov	r3, #16
   19fb8:	e58d5000 	str	r5, [sp]
   19fbc:	e28d000c 	add	r0, sp, #12
   19fc0:	e08d2003 	add	r2, sp, r3
   19fc4:	e59f1128 	ldr	r1, [pc, #296]	; 1a0f4 <CActLED::CActLED()+0x168>
   19fc8:	eb0000dc 	bl	1a340 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   19fcc:	e2506000 	subs	r6, r0, #0
   19fd0:	0a00001f 	beq	1a054 <CActLED::CActLED()+0xc8>
   19fd4:	e59d301c 	ldr	r3, [sp, #28]
   19fd8:	e3130502 	tst	r3, #8388608	; 0x800000
   19fdc:	0a000021 	beq	1a068 <CActLED::CActLED()+0xdc>
   19fe0:	e1a03223 	lsr	r3, r3, #4
   19fe4:	e6ef3073 	uxtb	r3, r3
   19fe8:	e243200d 	sub	r2, r3, #13
   19fec:	e3530008 	cmp	r3, #8
   19ff0:	13520001 	cmpne	r2, #1
   19ff4:	93a01001 	movls	r1, #1
   19ff8:	83a01000 	movhi	r1, #0
   19ffc:	e353000c 	cmp	r3, #12
   1a000:	13530009 	cmpne	r3, #9
   1a004:	03a06001 	moveq	r6, #1
   1a008:	13a06000 	movne	r6, #0
   1a00c:	e3530001 	cmp	r3, #1
   1a010:	9a000017 	bls	1a074 <CActLED::CActLED()+0xe8>
   1a014:	e3510000 	cmp	r1, #0
   1a018:	0a00002a 	beq	1a0c8 <CActLED::CActLED()+0x13c>
   1a01c:	e3520001 	cmp	r2, #1
   1a020:	8a000020 	bhi	1a0a8 <CActLED::CActLED()+0x11c>
   1a024:	e3a00028 	mov	r0, #40	; 0x28
   1a028:	eb001ddd 	bl	217a4 <operator new(unsigned int)>
   1a02c:	e3a02001 	mov	r2, #1
   1a030:	e1a07000 	mov	r7, r0
   1a034:	e1a03005 	mov	r3, r5
   1a038:	e3a0101d 	mov	r1, #29
   1a03c:	e0266002 	eor	r6, r6, r2
   1a040:	eb0006b9 	bl	1bb2c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
   1a044:	e5847000 	str	r7, [r4]
   1a048:	e5c46008 	strb	r6, [r4, #8]
   1a04c:	e1a00004 	mov	r0, r4
   1a050:	ebffffbf 	bl	19f54 <CActLED::Off()>
   1a054:	e28d000c 	add	r0, sp, #12
   1a058:	eb000067 	bl	1a1fc <CBcmPropertyTags::~CBcmPropertyTags()>
   1a05c:	e1a00004 	mov	r0, r4
   1a060:	e28dd024 	add	sp, sp, #36	; 0x24
   1a064:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1a068:	e6ff3073 	uxth	r3, r3
   1a06c:	e353000f 	cmp	r3, #15
   1a070:	8a000015 	bhi	1a0cc <CActLED::CActLED()+0x140>
   1a074:	e3a00028 	mov	r0, #40	; 0x28
   1a078:	eb001dc9 	bl	217a4 <operator new(unsigned int)>
   1a07c:	e3a03000 	mov	r3, #0
   1a080:	e3a02001 	mov	r2, #1
   1a084:	e3a01010 	mov	r1, #16
   1a088:	e1a05000 	mov	r5, r0
   1a08c:	eb0006a6 	bl	1bb2c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
   1a090:	e3a03000 	mov	r3, #0
   1a094:	e5845000 	str	r5, [r4]
   1a098:	e5c43008 	strb	r3, [r4, #8]
   1a09c:	e1a00004 	mov	r0, r4
   1a0a0:	ebffffab 	bl	19f54 <CActLED::Off()>
   1a0a4:	eaffffea 	b	1a054 <CActLED::CActLED()+0xc8>
   1a0a8:	e3a00010 	mov	r0, #16
   1a0ac:	eb001dbc 	bl	217a4 <operator new(unsigned int)>
   1a0b0:	e1a07000 	mov	r7, r0
   1a0b4:	e1a01005 	mov	r1, r5
   1a0b8:	eb001b04 	bl	20cd0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)>
   1a0bc:	e2266001 	eor	r6, r6, #1
   1a0c0:	e5847004 	str	r7, [r4, #4]
   1a0c4:	eaffffdf 	b	1a048 <CActLED::CActLED()+0xbc>
   1a0c8:	e2266001 	eor	r6, r6, #1
   1a0cc:	e3a00028 	mov	r0, #40	; 0x28
   1a0d0:	eb001db3 	bl	217a4 <operator new(unsigned int)>
   1a0d4:	e1a05000 	mov	r5, r0
   1a0d8:	e3a03000 	mov	r3, #0
   1a0dc:	e3a02001 	mov	r2, #1
   1a0e0:	e3a0102f 	mov	r1, #47	; 0x2f
   1a0e4:	eb000690 	bl	1bb2c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
   1a0e8:	e5845000 	str	r5, [r4]
   1a0ec:	eaffffd5 	b	1a048 <CActLED::CActLED()+0xbc>
   1a0f0:	000299b4 	.word	0x000299b4
   1a0f4:	00010002 	.word	0x00010002

0001a0f8 <CActLED::Blink(unsigned int, unsigned int, unsigned int)>:
   1a0f8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1a0fc:	e2516000 	subs	r6, r1, #0
   1a100:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   1a104:	e1a08003 	mov	r8, r3
   1a108:	e1a07002 	mov	r7, r2
   1a10c:	e1a05000 	mov	r5, r0
   1a110:	e3a04001 	mov	r4, #1
   1a114:	e1a00005 	mov	r0, r5
   1a118:	ebffff81 	bl	19f24 <CActLED::On()>
   1a11c:	e1a00007 	mov	r0, r7
   1a120:	eb0018e9 	bl	204cc <CTimer::SimpleMsDelay(unsigned int)>
   1a124:	e1a00005 	mov	r0, r5
   1a128:	ebffff89 	bl	19f54 <CActLED::Off()>
   1a12c:	e2844001 	add	r4, r4, #1
   1a130:	e1a00008 	mov	r0, r8
   1a134:	eb0018e4 	bl	204cc <CTimer::SimpleMsDelay(unsigned int)>
   1a138:	e1560004 	cmp	r6, r4
   1a13c:	2afffff4 	bcs	1a114 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x1c>
   1a140:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0001a144 <CActLED::Get()>:
   1a144:	e59f3004 	ldr	r3, [pc, #4]	; 1a150 <CActLED::Get()+0xc>
   1a148:	e5930000 	ldr	r0, [r3]
   1a14c:	e12fff1e 	bx	lr
   1a150:	000299b4 	.word	0x000299b4

0001a154 <assertion_failed>:
   1a154:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1a158:	e1a05000 	mov	r5, r0
   1a15c:	e24dd01c 	sub	sp, sp, #28
   1a160:	e1a06001 	mov	r6, r1
   1a164:	e1a07002 	mov	r7, r2
   1a168:	e1a0400d 	mov	r4, sp
   1a16c:	eb0007f4 	bl	1c144 <CInterruptSystem::DisableFIQ()>
   1a170:	f1080040 	cpsie	f
   1a174:	e28d0008 	add	r0, sp, #8
   1a178:	eb001175 	bl	1e754 <CString::CString()>
   1a17c:	e1a03007 	mov	r3, r7
   1a180:	e1a02006 	mov	r2, r6
   1a184:	e28d0008 	add	r0, sp, #8
   1a188:	e59f104c 	ldr	r1, [pc, #76]	; 1a1dc <assertion_failed+0x88>
   1a18c:	eb00155e 	bl	1f70c <CString::Format(char const*, ...)>
   1a190:	e28d0008 	add	r0, sp, #8
   1a194:	eb001184 	bl	1e7ac <CString::operator char const*() const>
   1a198:	e1a01000 	mov	r1, r0
   1a19c:	e1a00004 	mov	r0, r4
   1a1a0:	eb0001be 	bl	1a8a0 <debug_stacktrace(unsigned int const*, char const*)>
   1a1a4:	eb0009dd 	bl	1c920 <CLogger::Get()>
   1a1a8:	e1a04000 	mov	r4, r0
   1a1ac:	e28d0008 	add	r0, sp, #8
   1a1b0:	eb00117d 	bl	1e7ac <CString::operator char const*() const>
   1a1b4:	e59f3024 	ldr	r3, [pc, #36]	; 1a1e0 <assertion_failed+0x8c>
   1a1b8:	e1a01000 	mov	r1, r0
   1a1bc:	e3a02000 	mov	r2, #0
   1a1c0:	e1a00004 	mov	r0, r4
   1a1c4:	e58d5000 	str	r5, [sp]
   1a1c8:	eb000b7d 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1a1cc:	e28d0008 	add	r0, sp, #8
   1a1d0:	eb00112c 	bl	1e688 <CString::~CString()>
   1a1d4:	e28dd01c 	add	sp, sp, #28
   1a1d8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1a1dc:	00027830 	.word	0x00027830
   1a1e0:	00027838 	.word	0x00027838

0001a1e4 <CBcmPropertyTags::CBcmPropertyTags()>:
   1a1e4:	e92d4010 	push	{r4, lr}
   1a1e8:	e1a04000 	mov	r4, r0
   1a1ec:	e3a01008 	mov	r1, #8
   1a1f0:	eb00201d 	bl	2226c <CBcmMailBox::CBcmMailBox(unsigned int)>
   1a1f4:	e1a00004 	mov	r0, r4
   1a1f8:	e8bd8010 	pop	{r4, pc}

0001a1fc <CBcmPropertyTags::~CBcmPropertyTags()>:
   1a1fc:	e92d4010 	push	{r4, lr}
   1a200:	e1a04000 	mov	r4, r0
   1a204:	eb00201a 	bl	22274 <CBcmMailBox::~CBcmMailBox()>
   1a208:	e1a00004 	mov	r0, r4
   1a20c:	e8bd8010 	pop	{r4, pc}

0001a210 <CBcmPropertyTags::GetTags(void*, unsigned int)>:
   1a210:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a214:	e2519000 	subs	r9, r1, #0
   1a218:	e1a0a000 	mov	sl, r0
   1a21c:	e1a07002 	mov	r7, r2
   1a220:	0a00003d 	beq	1a31c <CBcmPropertyTags::GetTags(void*, unsigned int)+0x10c>
   1a224:	e357000f 	cmp	r7, #15
   1a228:	9a000036 	bls	1a308 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xf8>
   1a22c:	e287600c 	add	r6, r7, #12
   1a230:	e3160003 	tst	r6, #3
   1a234:	1a00002e 	bne	1a2f4 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xe4>
   1a238:	e3a00000 	mov	r0, #0
   1a23c:	eb001cc7 	bl	21560 <CMemorySystem::GetCoherentPage(unsigned int)>
   1a240:	e3a05000 	mov	r5, #0
   1a244:	e1a04000 	mov	r4, r0
   1a248:	e1a01426 	lsr	r1, r6, #8
   1a24c:	e1a02826 	lsr	r2, r6, #16
   1a250:	e1a03c26 	lsr	r3, r6, #24
   1a254:	e2808008 	add	r8, r0, #8
   1a258:	e5c06000 	strb	r6, [r0]
   1a25c:	e5c01001 	strb	r1, [r0, #1]
   1a260:	e5c02002 	strb	r2, [r0, #2]
   1a264:	e5c03003 	strb	r3, [r0, #3]
   1a268:	e1a02007 	mov	r2, r7
   1a26c:	e1a00008 	mov	r0, r8
   1a270:	e5c45004 	strb	r5, [r4, #4]
   1a274:	e5c45005 	strb	r5, [r4, #5]
   1a278:	e5c45006 	strb	r5, [r4, #6]
   1a27c:	e5c45007 	strb	r5, [r4, #7]
   1a280:	e1a01009 	mov	r1, r9
   1a284:	eb001a4a 	bl	20bb4 <memcpy>
   1a288:	e7885007 	str	r5, [r8, r7]
   1a28c:	ee075f9a 	mcr	15, 0, r5, cr7, cr10, {4}
   1a290:	e3c46103 	bic	r6, r4, #-1073741824	; 0xc0000000
   1a294:	e3866101 	orr	r6, r6, #1073741824	; 0x40000000
   1a298:	e1a0000a 	mov	r0, sl
   1a29c:	e1a01006 	mov	r1, r6
   1a2a0:	eb002023 	bl	22334 <CBcmMailBox::WriteRead(unsigned int)>
   1a2a4:	e1560000 	cmp	r6, r0
   1a2a8:	0a000001 	beq	1a2b4 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xa4>
   1a2ac:	e3a00000 	mov	r0, #0
   1a2b0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a2b4:	ee075fba 	mcr	15, 0, r5, cr7, cr10, {5}
   1a2b8:	e5d42005 	ldrb	r2, [r4, #5]
   1a2bc:	e5d43004 	ldrb	r3, [r4, #4]
   1a2c0:	e5d41006 	ldrb	r1, [r4, #6]
   1a2c4:	e1833402 	orr	r3, r3, r2, lsl #8
   1a2c8:	e5d42007 	ldrb	r2, [r4, #7]
   1a2cc:	e1833801 	orr	r3, r3, r1, lsl #16
   1a2d0:	e1833c02 	orr	r3, r3, r2, lsl #24
   1a2d4:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
   1a2d8:	1afffff3 	bne	1a2ac <CBcmPropertyTags::GetTags(void*, unsigned int)+0x9c>
   1a2dc:	e1a02007 	mov	r2, r7
   1a2e0:	e1a01008 	mov	r1, r8
   1a2e4:	e1a00009 	mov	r0, r9
   1a2e8:	eb001a31 	bl	20bb4 <memcpy>
   1a2ec:	e3a00001 	mov	r0, #1
   1a2f0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a2f4:	e3a02053 	mov	r2, #83	; 0x53
   1a2f8:	e59f1030 	ldr	r1, [pc, #48]	; 1a330 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x120>
   1a2fc:	e59f0030 	ldr	r0, [pc, #48]	; 1a334 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x124>
   1a300:	ebffff93 	bl	1a154 <assertion_failed>
   1a304:	eaffffcb 	b	1a238 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x28>
   1a308:	e3a02051 	mov	r2, #81	; 0x51
   1a30c:	e59f101c 	ldr	r1, [pc, #28]	; 1a330 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x120>
   1a310:	e59f0020 	ldr	r0, [pc, #32]	; 1a338 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x128>
   1a314:	ebffff8e 	bl	1a154 <assertion_failed>
   1a318:	eaffffc3 	b	1a22c <CBcmPropertyTags::GetTags(void*, unsigned int)+0x1c>
   1a31c:	e3a02050 	mov	r2, #80	; 0x50
   1a320:	e59f1008 	ldr	r1, [pc, #8]	; 1a330 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x120>
   1a324:	e59f0010 	ldr	r0, [pc, #16]	; 1a33c <CBcmPropertyTags::GetTags(void*, unsigned int)+0x12c>
   1a328:	ebffff89 	bl	1a154 <assertion_failed>
   1a32c:	eaffffbc 	b	1a224 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x14>
   1a330:	00027850 	.word	0x00027850
   1a334:	0002789c 	.word	0x0002789c
   1a338:	00027870 	.word	0x00027870
   1a33c:	00027864 	.word	0x00027864

0001a340 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>:
   1a340:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1a344:	e2524000 	subs	r4, r2, #0
   1a348:	e1a08000 	mov	r8, r0
   1a34c:	e1a06001 	mov	r6, r1
   1a350:	e1a07003 	mov	r7, r3
   1a354:	e59d5018 	ldr	r5, [sp, #24]
   1a358:	0a000038 	beq	1a440 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x100>
   1a35c:	e357000f 	cmp	r7, #15
   1a360:	9a000031 	bls	1a42c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xec>
   1a364:	e3c52102 	bic	r2, r5, #-2147483648	; 0x80000000
   1a368:	e247100c 	sub	r1, r7, #12
   1a36c:	e1a03422 	lsr	r3, r2, #8
   1a370:	e1a0c822 	lsr	ip, r2, #16
   1a374:	e5c43009 	strb	r3, [r4, #9]
   1a378:	e1a03421 	lsr	r3, r1, #8
   1a37c:	e1a0e821 	lsr	lr, r1, #16
   1a380:	e5c42008 	strb	r2, [r4, #8]
   1a384:	e5c46000 	strb	r6, [r4]
   1a388:	e1a02c22 	lsr	r2, r2, #24
   1a38c:	e5c4c00a 	strb	ip, [r4, #10]
   1a390:	e5c41004 	strb	r1, [r4, #4]
   1a394:	e1a0cc21 	lsr	ip, r1, #24
   1a398:	e5c43005 	strb	r3, [r4, #5]
   1a39c:	e1a01426 	lsr	r1, r6, #8
   1a3a0:	e1a03826 	lsr	r3, r6, #16
   1a3a4:	e1a06c26 	lsr	r6, r6, #24
   1a3a8:	e5c4200b 	strb	r2, [r4, #11]
   1a3ac:	e5c41001 	strb	r1, [r4, #1]
   1a3b0:	e1a00008 	mov	r0, r8
   1a3b4:	e1a02007 	mov	r2, r7
   1a3b8:	e5c4e006 	strb	lr, [r4, #6]
   1a3bc:	e5c4c007 	strb	ip, [r4, #7]
   1a3c0:	e5c43002 	strb	r3, [r4, #2]
   1a3c4:	e5c46003 	strb	r6, [r4, #3]
   1a3c8:	e1a01004 	mov	r1, r4
   1a3cc:	ebffff8f 	bl	1a210 <CBcmPropertyTags::GetTags(void*, unsigned int)>
   1a3d0:	e3500000 	cmp	r0, #0
   1a3d4:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   1a3d8:	e5d43009 	ldrb	r3, [r4, #9]
   1a3dc:	e5d40008 	ldrb	r0, [r4, #8]
   1a3e0:	e5d4200a 	ldrb	r2, [r4, #10]
   1a3e4:	e1800403 	orr	r0, r0, r3, lsl #8
   1a3e8:	e5d4300b 	ldrb	r3, [r4, #11]
   1a3ec:	e1800802 	orr	r0, r0, r2, lsl #16
   1a3f0:	e1900c03 	orrs	r0, r0, r3, lsl #24
   1a3f4:	4a000001 	bmi	1a400 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xc0>
   1a3f8:	e3a00000 	mov	r0, #0
   1a3fc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1a400:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
   1a404:	e1a01420 	lsr	r1, r0, #8
   1a408:	e1a02820 	lsr	r2, r0, #16
   1a40c:	e1a03c20 	lsr	r3, r0, #24
   1a410:	e5c40008 	strb	r0, [r4, #8]
   1a414:	e2900000 	adds	r0, r0, #0
   1a418:	e5c41009 	strb	r1, [r4, #9]
   1a41c:	e5c4200a 	strb	r2, [r4, #10]
   1a420:	e5c4300b 	strb	r3, [r4, #11]
   1a424:	13a00001 	movne	r0, #1
   1a428:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1a42c:	e3a02034 	mov	r2, #52	; 0x34
   1a430:	e59f101c 	ldr	r1, [pc, #28]	; 1a454 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x114>
   1a434:	e59f001c 	ldr	r0, [pc, #28]	; 1a458 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x118>
   1a438:	ebffff45 	bl	1a154 <assertion_failed>
   1a43c:	eaffffc8 	b	1a364 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x24>
   1a440:	e3a02033 	mov	r2, #51	; 0x33
   1a444:	e59f1008 	ldr	r1, [pc, #8]	; 1a454 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x114>
   1a448:	e59f000c 	ldr	r0, [pc, #12]	; 1a45c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x11c>
   1a44c:	ebffff40 	bl	1a154 <assertion_failed>
   1a450:	eaffffc1 	b	1a35c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x1c>
   1a454:	00027850 	.word	0x00027850
   1a458:	000278c0 	.word	0x000278c0
   1a45c:	000278b4 	.word	0x000278b4

0001a460 <CClassAllocator::~CClassAllocator()>:
   1a460:	e3a03000 	mov	r3, #0
   1a464:	e92d4010 	push	{r4, lr}
   1a468:	e1a04000 	mov	r4, r0
   1a46c:	e590000c 	ldr	r0, [r0, #12]
   1a470:	e5843010 	str	r3, [r4, #16]
   1a474:	e1500003 	cmp	r0, r3
   1a478:	0a000000 	beq	1a480 <CClassAllocator::~CClassAllocator()+0x20>
   1a47c:	eb001d6b 	bl	21a30 <free>
   1a480:	e1a00004 	mov	r0, r4
   1a484:	e8bd8010 	pop	{r4, pc}

0001a488 <CClassAllocator::Init(unsigned int, unsigned int)>:
   1a488:	e3510000 	cmp	r1, #0
   1a48c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1a490:	e1a05000 	mov	r5, r0
   1a494:	03a00020 	moveq	r0, #32
   1a498:	1281001f 	addne	r0, r1, #31
   1a49c:	13c0000f 	bicne	r0, r0, #15
   1a4a0:	e3520000 	cmp	r2, #0
   1a4a4:	e1a04002 	mov	r4, r2
   1a4a8:	e5850000 	str	r0, [r5]
   1a4ac:	0a00001c 	beq	1a524 <CClassAllocator::Init(unsigned int, unsigned int)+0x9c>
   1a4b0:	e5854004 	str	r4, [r5, #4]
   1a4b4:	e0000490 	mul	r0, r0, r4
   1a4b8:	eb001cde 	bl	21838 <malloc>
   1a4bc:	e3500000 	cmp	r0, #0
   1a4c0:	e585000c 	str	r0, [r5, #12]
   1a4c4:	0a000021 	beq	1a550 <CClassAllocator::Init(unsigned int, unsigned int)+0xc8>
   1a4c8:	e310000f 	tst	r0, #15
   1a4cc:	1a00001a 	bne	1a53c <CClassAllocator::Init(unsigned int, unsigned int)+0xb4>
   1a4d0:	e595e004 	ldr	lr, [r5, #4]
   1a4d4:	e35e0000 	cmp	lr, #0
   1a4d8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   1a4dc:	e595700c 	ldr	r7, [r5, #12]
   1a4e0:	e5954000 	ldr	r4, [r5]
   1a4e4:	e1a03007 	mov	r3, r7
   1a4e8:	e5950010 	ldr	r0, [r5, #16]
   1a4ec:	e3a01000 	mov	r1, #0
   1a4f0:	e59f6060 	ldr	r6, [pc, #96]	; 1a558 <CClassAllocator::Init(unsigned int, unsigned int)+0xd0>
   1a4f4:	ea000000 	b	1a4fc <CClassAllocator::Init(unsigned int, unsigned int)+0x74>
   1a4f8:	e1a01002 	mov	r1, r2
   1a4fc:	e2812001 	add	r2, r1, #1
   1a500:	e152000e 	cmp	r2, lr
   1a504:	e583000c 	str	r0, [r3, #12]
   1a508:	e5836000 	str	r6, [r3]
   1a50c:	e1a00003 	mov	r0, r3
   1a510:	e0833004 	add	r3, r3, r4
   1a514:	1afffff7 	bne	1a4f8 <CClassAllocator::Init(unsigned int, unsigned int)+0x70>
   1a518:	e0217194 	mla	r1, r4, r1, r7
   1a51c:	e5851010 	str	r1, [r5, #16]
   1a520:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1a524:	e59f0030 	ldr	r0, [pc, #48]	; 1a55c <CClassAllocator::Init(unsigned int, unsigned int)+0xd4>
   1a528:	e3a02055 	mov	r2, #85	; 0x55
   1a52c:	e59f102c 	ldr	r1, [pc, #44]	; 1a560 <CClassAllocator::Init(unsigned int, unsigned int)+0xd8>
   1a530:	ebffff07 	bl	1a154 <assertion_failed>
   1a534:	e5950000 	ldr	r0, [r5]
   1a538:	eaffffdc 	b	1a4b0 <CClassAllocator::Init(unsigned int, unsigned int)+0x28>
   1a53c:	e3a0205f 	mov	r2, #95	; 0x5f
   1a540:	e59f1018 	ldr	r1, [pc, #24]	; 1a560 <CClassAllocator::Init(unsigned int, unsigned int)+0xd8>
   1a544:	e59f0018 	ldr	r0, [pc, #24]	; 1a564 <CClassAllocator::Init(unsigned int, unsigned int)+0xdc>
   1a548:	ebffff01 	bl	1a154 <assertion_failed>
   1a54c:	eaffffdf 	b	1a4d0 <CClassAllocator::Init(unsigned int, unsigned int)+0x48>
   1a550:	e5850004 	str	r0, [r5, #4]
   1a554:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1a558:	4f425350 	.word	0x4f425350
   1a55c:	000278fc 	.word	0x000278fc
   1a560:	000278e8 	.word	0x000278e8
   1a564:	00027914 	.word	0x00027914

0001a568 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>:
   1a568:	e92d4010 	push	{r4, lr}
   1a56c:	e3a0c000 	mov	ip, #0
   1a570:	e3a0e001 	mov	lr, #1
   1a574:	e1a04000 	mov	r4, r0
   1a578:	e5803008 	str	r3, [r0, #8]
   1a57c:	e580e018 	str	lr, [r0, #24]
   1a580:	e580c00c 	str	ip, [r0, #12]
   1a584:	e580c010 	str	ip, [r0, #16]
   1a588:	e5c0c014 	strb	ip, [r0, #20]
   1a58c:	ebffffbd 	bl	1a488 <CClassAllocator::Init(unsigned int, unsigned int)>
   1a590:	e1a00004 	mov	r0, r4
   1a594:	e8bd8010 	pop	{r4, pc}

0001a598 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>:
   1a598:	e92d4070 	push	{r4, r5, r6, lr}
   1a59c:	e3a0c000 	mov	ip, #0
   1a5a0:	e3a0e001 	mov	lr, #1
   1a5a4:	e1a04000 	mov	r4, r0
   1a5a8:	e59d5010 	ldr	r5, [sp, #16]
   1a5ac:	e5803018 	str	r3, [r0, #24]
   1a5b0:	e5805008 	str	r5, [r0, #8]
   1a5b4:	e5c0e014 	strb	lr, [r0, #20]
   1a5b8:	e580c00c 	str	ip, [r0, #12]
   1a5bc:	e580c010 	str	ip, [r0, #16]
   1a5c0:	ebffffb0 	bl	1a488 <CClassAllocator::Init(unsigned int, unsigned int)>
   1a5c4:	e1a00004 	mov	r0, r4
   1a5c8:	e8bd8070 	pop	{r4, r5, r6, pc}

0001a5cc <CClassAllocator::Allocate()>:
   1a5cc:	e92d4030 	push	{r4, r5, lr}
   1a5d0:	e5d03014 	ldrb	r3, [r0, #20]
   1a5d4:	e24dd00c 	sub	sp, sp, #12
   1a5d8:	e3530000 	cmp	r3, #0
   1a5dc:	e1a05000 	mov	r5, r0
   1a5e0:	0a000002 	beq	1a5f0 <CClassAllocator::Allocate()+0x24>
   1a5e4:	e5900018 	ldr	r0, [r0, #24]
   1a5e8:	e3500000 	cmp	r0, #0
   1a5ec:	1a000019 	bne	1a658 <CClassAllocator::Allocate()+0x8c>
   1a5f0:	e5954010 	ldr	r4, [r5, #16]
   1a5f4:	e3540000 	cmp	r4, #0
   1a5f8:	0a000021 	beq	1a684 <CClassAllocator::Allocate()+0xb8>
   1a5fc:	e59f30a4 	ldr	r3, [pc, #164]	; 1a6a8 <CClassAllocator::Allocate()+0xdc>
   1a600:	e5942000 	ldr	r2, [r4]
   1a604:	e1520003 	cmp	r2, r3
   1a608:	0a000003 	beq	1a61c <CClassAllocator::Allocate()+0x50>
   1a60c:	e3a02082 	mov	r2, #130	; 0x82
   1a610:	e59f1094 	ldr	r1, [pc, #148]	; 1a6ac <CClassAllocator::Allocate()+0xe0>
   1a614:	e59f0094 	ldr	r0, [pc, #148]	; 1a6b0 <CClassAllocator::Allocate()+0xe4>
   1a618:	ebfffecd 	bl	1a154 <assertion_failed>
   1a61c:	e3a03000 	mov	r3, #0
   1a620:	e5d51014 	ldrb	r1, [r5, #20]
   1a624:	e594200c 	ldr	r2, [r4, #12]
   1a628:	e1510003 	cmp	r1, r3
   1a62c:	e5852010 	str	r2, [r5, #16]
   1a630:	e584300c 	str	r3, [r4, #12]
   1a634:	1a000002 	bne	1a644 <CClassAllocator::Allocate()+0x78>
   1a638:	e2840010 	add	r0, r4, #16
   1a63c:	e28dd00c 	add	sp, sp, #12
   1a640:	e8bd8030 	pop	{r4, r5, pc}
   1a644:	e5953018 	ldr	r3, [r5, #24]
   1a648:	e3530000 	cmp	r3, #0
   1a64c:	0afffff9 	beq	1a638 <CClassAllocator::Allocate()+0x6c>
   1a650:	eb001c26 	bl	216f0 <LeaveCritical>
   1a654:	eafffff7 	b	1a638 <CClassAllocator::Allocate()+0x6c>
   1a658:	eb001bf7 	bl	2163c <EnterCritical>
   1a65c:	e5954010 	ldr	r4, [r5, #16]
   1a660:	e3540000 	cmp	r4, #0
   1a664:	1affffe4 	bne	1a5fc <CClassAllocator::Allocate()+0x30>
   1a668:	e5d53014 	ldrb	r3, [r5, #20]
   1a66c:	e3530000 	cmp	r3, #0
   1a670:	0a000003 	beq	1a684 <CClassAllocator::Allocate()+0xb8>
   1a674:	e5953018 	ldr	r3, [r5, #24]
   1a678:	e3530000 	cmp	r3, #0
   1a67c:	0a000000 	beq	1a684 <CClassAllocator::Allocate()+0xb8>
   1a680:	eb001c1a 	bl	216f0 <LeaveCritical>
   1a684:	eb0008a5 	bl	1c920 <CLogger::Get()>
   1a688:	e5953004 	ldr	r3, [r5, #4]
   1a68c:	e5951008 	ldr	r1, [r5, #8]
   1a690:	e3a02000 	mov	r2, #0
   1a694:	e58d3000 	str	r3, [sp]
   1a698:	e59f3014 	ldr	r3, [pc, #20]	; 1a6b4 <CClassAllocator::Allocate()+0xe8>
   1a69c:	eb000a48 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1a6a0:	e3a00000 	mov	r0, #0
   1a6a4:	eaffffe4 	b	1a63c <CClassAllocator::Allocate()+0x70>
   1a6a8:	4f425350 	.word	0x4f425350
   1a6ac:	000278e8 	.word	0x000278e8
   1a6b0:	0002797c 	.word	0x0002797c
   1a6b4:	00027950 	.word	0x00027950

0001a6b8 <CClassAllocator::Free(void*)>:
   1a6b8:	e92d4070 	push	{r4, r5, r6, lr}
   1a6bc:	e2514000 	subs	r4, r1, #0
   1a6c0:	e1a05000 	mov	r5, r0
   1a6c4:	0a000025 	beq	1a760 <CClassAllocator::Free(void*)+0xa8>
   1a6c8:	e59f30a4 	ldr	r3, [pc, #164]	; 1a774 <CClassAllocator::Free(void*)+0xbc>
   1a6cc:	e5142010 	ldr	r2, [r4, #-16]
   1a6d0:	e2446010 	sub	r6, r4, #16
   1a6d4:	e1520003 	cmp	r2, r3
   1a6d8:	0a000003 	beq	1a6ec <CClassAllocator::Free(void*)+0x34>
   1a6dc:	e3a02094 	mov	r2, #148	; 0x94
   1a6e0:	e59f1090 	ldr	r1, [pc, #144]	; 1a778 <CClassAllocator::Free(void*)+0xc0>
   1a6e4:	e59f0090 	ldr	r0, [pc, #144]	; 1a77c <CClassAllocator::Free(void*)+0xc4>
   1a6e8:	ebfffe99 	bl	1a154 <assertion_failed>
   1a6ec:	e5143004 	ldr	r3, [r4, #-4]
   1a6f0:	e3530000 	cmp	r3, #0
   1a6f4:	0a000003 	beq	1a708 <CClassAllocator::Free(void*)+0x50>
   1a6f8:	e3a02095 	mov	r2, #149	; 0x95
   1a6fc:	e59f1074 	ldr	r1, [pc, #116]	; 1a778 <CClassAllocator::Free(void*)+0xc0>
   1a700:	e59f0078 	ldr	r0, [pc, #120]	; 1a780 <CClassAllocator::Free(void*)+0xc8>
   1a704:	ebfffe92 	bl	1a154 <assertion_failed>
   1a708:	e5d53014 	ldrb	r3, [r5, #20]
   1a70c:	e3530000 	cmp	r3, #0
   1a710:	0a000002 	beq	1a720 <CClassAllocator::Free(void*)+0x68>
   1a714:	e5950018 	ldr	r0, [r5, #24]
   1a718:	e3500000 	cmp	r0, #0
   1a71c:	1a000003 	bne	1a730 <CClassAllocator::Free(void*)+0x78>
   1a720:	e5953010 	ldr	r3, [r5, #16]
   1a724:	e5043004 	str	r3, [r4, #-4]
   1a728:	e5856010 	str	r6, [r5, #16]
   1a72c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1a730:	eb001bc1 	bl	2163c <EnterCritical>
   1a734:	e5d52014 	ldrb	r2, [r5, #20]
   1a738:	e5953010 	ldr	r3, [r5, #16]
   1a73c:	e3520000 	cmp	r2, #0
   1a740:	e5043004 	str	r3, [r4, #-4]
   1a744:	e5856010 	str	r6, [r5, #16]
   1a748:	08bd8070 	popeq	{r4, r5, r6, pc}
   1a74c:	e5950018 	ldr	r0, [r5, #24]
   1a750:	e3500000 	cmp	r0, #0
   1a754:	08bd8070 	popeq	{r4, r5, r6, pc}
   1a758:	e8bd4070 	pop	{r4, r5, r6, lr}
   1a75c:	ea001be3 	b	216f0 <LeaveCritical>
   1a760:	e3a02090 	mov	r2, #144	; 0x90
   1a764:	e59f100c 	ldr	r1, [pc, #12]	; 1a778 <CClassAllocator::Free(void*)+0xc0>
   1a768:	e59f0014 	ldr	r0, [pc, #20]	; 1a784 <CClassAllocator::Free(void*)+0xcc>
   1a76c:	ebfffe78 	bl	1a154 <assertion_failed>
   1a770:	eaffffd4 	b	1a6c8 <CClassAllocator::Free(void*)+0x10>
   1a774:	4f425350 	.word	0x4f425350
   1a778:	000278e8 	.word	0x000278e8
   1a77c:	000279a8 	.word	0x000279a8
   1a780:	000279c4 	.word	0x000279c4
   1a784:	0002799c 	.word	0x0002799c

0001a788 <debug_hexdump(void const*, unsigned int, char const*)>:
   1a788:	e3520000 	cmp	r2, #0
   1a78c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a790:	e1a05001 	mov	r5, r1
   1a794:	e59f60f4 	ldr	r6, [pc, #244]	; 1a890 <debug_hexdump(void const*, unsigned int, char const*)+0x108>
   1a798:	e1a04000 	mov	r4, r0
   1a79c:	11a06002 	movne	r6, r2
   1a7a0:	e24dd04c 	sub	sp, sp, #76	; 0x4c
   1a7a4:	eb00085d 	bl	1c920 <CLogger::Get()>
   1a7a8:	e58d4004 	str	r4, [sp, #4]
   1a7ac:	e58d5000 	str	r5, [sp]
   1a7b0:	e1a01006 	mov	r1, r6
   1a7b4:	e59f30d8 	ldr	r3, [pc, #216]	; 1a894 <debug_hexdump(void const*, unsigned int, char const*)+0x10c>
   1a7b8:	e3a02004 	mov	r2, #4
   1a7bc:	eb000a00 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1a7c0:	e3550000 	cmp	r5, #0
   1a7c4:	0a00002b 	beq	1a878 <debug_hexdump(void const*, unsigned int, char const*)+0xf0>
   1a7c8:	e3a09004 	mov	r9, #4
   1a7cc:	e59f80c4 	ldr	r8, [pc, #196]	; 1a898 <debug_hexdump(void const*, unsigned int, char const*)+0x110>
   1a7d0:	e59f70c4 	ldr	r7, [pc, #196]	; 1a89c <debug_hexdump(void const*, unsigned int, char const*)+0x114>
   1a7d4:	eb000851 	bl	1c920 <CLogger::Get()>
   1a7d8:	e5d4a00f 	ldrb	sl, [r4, #15]
   1a7dc:	e5d4e00e 	ldrb	lr, [r4, #14]
   1a7e0:	e5d4c00d 	ldrb	ip, [r4, #13]
   1a7e4:	e5d4300c 	ldrb	r3, [r4, #12]
   1a7e8:	e5d4200b 	ldrb	r2, [r4, #11]
   1a7ec:	e5d4100a 	ldrb	r1, [r4, #10]
   1a7f0:	e5d4b009 	ldrb	fp, [r4, #9]
   1a7f4:	e58da040 	str	sl, [sp, #64]	; 0x40
   1a7f8:	e5d4a008 	ldrb	sl, [r4, #8]
   1a7fc:	e58de03c 	str	lr, [sp, #60]	; 0x3c
   1a800:	e5d4e007 	ldrb	lr, [r4, #7]
   1a804:	e58dc038 	str	ip, [sp, #56]	; 0x38
   1a808:	e5d4c006 	ldrb	ip, [r4, #6]
   1a80c:	e58d3034 	str	r3, [sp, #52]	; 0x34
   1a810:	e5d43005 	ldrb	r3, [r4, #5]
   1a814:	e58d2030 	str	r2, [sp, #48]	; 0x30
   1a818:	e5d42004 	ldrb	r2, [r4, #4]
   1a81c:	e58d102c 	str	r1, [sp, #44]	; 0x2c
   1a820:	e5d41003 	ldrb	r1, [r4, #3]
   1a824:	e58db028 	str	fp, [sp, #40]	; 0x28
   1a828:	e5d4b002 	ldrb	fp, [r4, #2]
   1a82c:	e58da024 	str	sl, [sp, #36]	; 0x24
   1a830:	e5d4a001 	ldrb	sl, [r4, #1]
   1a834:	e58de020 	str	lr, [sp, #32]
   1a838:	e5d4e000 	ldrb	lr, [r4]
   1a83c:	e58dc01c 	str	ip, [sp, #28]
   1a840:	e58d3018 	str	r3, [sp, #24]
   1a844:	e004c008 	and	ip, r4, r8
   1a848:	e58d2014 	str	r2, [sp, #20]
   1a84c:	e58d1010 	str	r1, [sp, #16]
   1a850:	e1a03007 	mov	r3, r7
   1a854:	e1a02009 	mov	r2, r9
   1a858:	e1a01006 	mov	r1, r6
   1a85c:	e58db00c 	str	fp, [sp, #12]
   1a860:	e58da008 	str	sl, [sp, #8]
   1a864:	e88d5000 	stm	sp, {ip, lr}
   1a868:	eb0009d5 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1a86c:	e355000f 	cmp	r5, #15
   1a870:	e2844010 	add	r4, r4, #16
   1a874:	8a000001 	bhi	1a880 <debug_hexdump(void const*, unsigned int, char const*)+0xf8>
   1a878:	e28dd04c 	add	sp, sp, #76	; 0x4c
   1a87c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a880:	e2555010 	subs	r5, r5, #16
   1a884:	1affffd2 	bne	1a7d4 <debug_hexdump(void const*, unsigned int, char const*)+0x4c>
   1a888:	e28dd04c 	add	sp, sp, #76	; 0x4c
   1a88c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a890:	000279d8 	.word	0x000279d8
   1a894:	000279e0 	.word	0x000279e0
   1a898:	0000ffff 	.word	0x0000ffff
   1a89c:	00027a08 	.word	0x00027a08

0001a8a0 <debug_stacktrace(unsigned int const*, char const*)>:
   1a8a0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a8a4:	e3510000 	cmp	r1, #0
   1a8a8:	e59f8084 	ldr	r8, [pc, #132]	; 1a934 <debug_stacktrace(unsigned int const*, char const*)+0x94>
   1a8ac:	e24dd008 	sub	sp, sp, #8
   1a8b0:	e1a05000 	mov	r5, r0
   1a8b4:	11a08001 	movne	r8, r1
   1a8b8:	e3a04000 	mov	r4, #0
   1a8bc:	e3a0a004 	mov	sl, #4
   1a8c0:	e59f6070 	ldr	r6, [pc, #112]	; 1a938 <debug_stacktrace(unsigned int const*, char const*)+0x98>
   1a8c4:	e59f7070 	ldr	r7, [pc, #112]	; 1a93c <debug_stacktrace(unsigned int const*, char const*)+0x9c>
   1a8c8:	e59f9070 	ldr	r9, [pc, #112]	; 1a940 <debug_stacktrace(unsigned int const*, char const*)+0xa0>
   1a8cc:	ea000003 	b	1a8e0 <debug_stacktrace(unsigned int const*, char const*)+0x40>
   1a8d0:	e2844001 	add	r4, r4, #1
   1a8d4:	e3540040 	cmp	r4, #64	; 0x40
   1a8d8:	e2855004 	add	r5, r5, #4
   1a8dc:	0a000012 	beq	1a92c <debug_stacktrace(unsigned int const*, char const*)+0x8c>
   1a8e0:	e5953000 	ldr	r3, [r5]
   1a8e4:	e1530006 	cmp	r3, r6
   1a8e8:	9afffff8 	bls	1a8d0 <debug_stacktrace(unsigned int const*, char const*)+0x30>
   1a8ec:	e1530007 	cmp	r3, r7
   1a8f0:	2afffff6 	bcs	1a8d0 <debug_stacktrace(unsigned int const*, char const*)+0x30>
   1a8f4:	e3130003 	tst	r3, #3
   1a8f8:	1afffff4 	bne	1a8d0 <debug_stacktrace(unsigned int const*, char const*)+0x30>
   1a8fc:	eb000807 	bl	1c920 <CLogger::Get()>
   1a900:	e5953000 	ldr	r3, [r5]
   1a904:	e1a0200a 	mov	r2, sl
   1a908:	e58d4000 	str	r4, [sp]
   1a90c:	e58d3004 	str	r3, [sp, #4]
   1a910:	e1a01008 	mov	r1, r8
   1a914:	e1a03009 	mov	r3, r9
   1a918:	e2844001 	add	r4, r4, #1
   1a91c:	eb0009a8 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1a920:	e3540040 	cmp	r4, #64	; 0x40
   1a924:	e2855004 	add	r5, r5, #4
   1a928:	1affffec 	bne	1a8e0 <debug_stacktrace(unsigned int const*, char const*)+0x40>
   1a92c:	e28dd008 	add	sp, sp, #8
   1a930:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a934:	000279d8 	.word	0x000279d8
   1a938:	00007fff 	.word	0x00007fff
   1a93c:	00022cf4 	.word	0x00022cf4
   1a940:	00027a60 	.word	0x00027a60

0001a944 <CDevice::~CDevice()>:
   1a944:	e12fff1e 	bx	lr

0001a948 <CDevice::Read(void*, unsigned int)>:
   1a948:	e3e00000 	mvn	r0, #0
   1a94c:	e12fff1e 	bx	lr

0001a950 <CDevice::Seek(unsigned long long)>:
   1a950:	e3e00000 	mvn	r0, #0
   1a954:	e3e01000 	mvn	r1, #0
   1a958:	e12fff1e 	bx	lr

0001a95c <CDevice::~CDevice()>:
   1a95c:	e92d4010 	push	{r4, lr}
   1a960:	e1a04000 	mov	r4, r0
   1a964:	e3a01004 	mov	r1, #4
   1a968:	eb001b91 	bl	217b4 <operator delete(void*, unsigned int)>
   1a96c:	e1a00004 	mov	r0, r4
   1a970:	e8bd8010 	pop	{r4, pc}

0001a974 <CDevice::CDevice()>:
   1a974:	e59f3004 	ldr	r3, [pc, #4]	; 1a980 <CDevice::CDevice()+0xc>
   1a978:	e5803000 	str	r3, [r0]
   1a97c:	e12fff1e 	bx	lr
   1a980:	00027a7c 	.word	0x00027a7c

0001a984 <CDeviceNameService::CDeviceNameService()>:
   1a984:	e3a03000 	mov	r3, #0
   1a988:	e92d4070 	push	{r4, r5, r6, lr}
   1a98c:	e59f5030 	ldr	r5, [pc, #48]	; 1a9c4 <CDeviceNameService::CDeviceNameService()+0x40>
   1a990:	e1a04000 	mov	r4, r0
   1a994:	e5952000 	ldr	r2, [r5]
   1a998:	e5803000 	str	r3, [r0]
   1a99c:	e1520003 	cmp	r2, r3
   1a9a0:	e5803004 	str	r3, [r0, #4]
   1a9a4:	0a000003 	beq	1a9b8 <CDeviceNameService::CDeviceNameService()+0x34>
   1a9a8:	e3a0201f 	mov	r2, #31
   1a9ac:	e59f1014 	ldr	r1, [pc, #20]	; 1a9c8 <CDeviceNameService::CDeviceNameService()+0x44>
   1a9b0:	e59f0014 	ldr	r0, [pc, #20]	; 1a9cc <CDeviceNameService::CDeviceNameService()+0x48>
   1a9b4:	ebfffde6 	bl	1a154 <assertion_failed>
   1a9b8:	e5854000 	str	r4, [r5]
   1a9bc:	e1a00004 	mov	r0, r4
   1a9c0:	e8bd8070 	pop	{r4, r5, r6, pc}
   1a9c4:	000299b8 	.word	0x000299b8
   1a9c8:	00027a90 	.word	0x00027a90
   1a9cc:	00027aa8 	.word	0x00027aa8

0001a9d0 <CDeviceNameService::~CDeviceNameService()>:
   1a9d0:	e5903000 	ldr	r3, [r0]
   1a9d4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1a9d8:	e3530000 	cmp	r3, #0
   1a9dc:	e1a05000 	mov	r5, r0
   1a9e0:	0a00000e 	beq	1aa20 <CDeviceNameService::~CDeviceNameService()+0x50>
   1a9e4:	e3a06000 	mov	r6, #0
   1a9e8:	e3a07010 	mov	r7, #16
   1a9ec:	e5930004 	ldr	r0, [r3, #4]
   1a9f0:	e5934000 	ldr	r4, [r3]
   1a9f4:	e3500000 	cmp	r0, #0
   1a9f8:	0a000000 	beq	1aa00 <CDeviceNameService::~CDeviceNameService()+0x30>
   1a9fc:	eb001b6b 	bl	217b0 <operator delete[](void*)>
   1aa00:	e5950000 	ldr	r0, [r5]
   1aa04:	e1a01007 	mov	r1, r7
   1aa08:	e5806004 	str	r6, [r0, #4]
   1aa0c:	e5806008 	str	r6, [r0, #8]
   1aa10:	eb001b67 	bl	217b4 <operator delete(void*, unsigned int)>
   1aa14:	e2543000 	subs	r3, r4, #0
   1aa18:	e5854000 	str	r4, [r5]
   1aa1c:	1afffff2 	bne	1a9ec <CDeviceNameService::~CDeviceNameService()+0x1c>
   1aa20:	e3a02000 	mov	r2, #0
   1aa24:	e59f3008 	ldr	r3, [pc, #8]	; 1aa34 <CDeviceNameService::~CDeviceNameService()+0x64>
   1aa28:	e1a00005 	mov	r0, r5
   1aa2c:	e5832000 	str	r2, [r3]
   1aa30:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1aa34:	000299b8 	.word	0x000299b8

0001aa38 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>:
   1aa38:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1aa3c:	e1a05000 	mov	r5, r0
   1aa40:	e5900004 	ldr	r0, [r0, #4]
   1aa44:	e1a06001 	mov	r6, r1
   1aa48:	e3500000 	cmp	r0, #0
   1aa4c:	e1a07002 	mov	r7, r2
   1aa50:	e1a08003 	mov	r8, r3
   1aa54:	1a000017 	bne	1aab8 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x80>
   1aa58:	e3a00010 	mov	r0, #16
   1aa5c:	eb001b50 	bl	217a4 <operator new(unsigned int)>
   1aa60:	e3560000 	cmp	r6, #0
   1aa64:	e1a04000 	mov	r4, r0
   1aa68:	0a000019 	beq	1aad4 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x9c>
   1aa6c:	e1a00006 	mov	r0, r6
   1aa70:	eb0016fd 	bl	2066c <strlen>
   1aa74:	e2800001 	add	r0, r0, #1
   1aa78:	eb001b4a 	bl	217a8 <operator new[](unsigned int)>
   1aa7c:	e1a01006 	mov	r1, r6
   1aa80:	e5840004 	str	r0, [r4, #4]
   1aa84:	eb001776 	bl	20864 <strcpy>
   1aa88:	e3570000 	cmp	r7, #0
   1aa8c:	0a00000b 	beq	1aac0 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x88>
   1aa90:	e5952004 	ldr	r2, [r5, #4]
   1aa94:	e5953000 	ldr	r3, [r5]
   1aa98:	e3520000 	cmp	r2, #0
   1aa9c:	e5847008 	str	r7, [r4, #8]
   1aaa0:	e5c4800c 	strb	r8, [r4, #12]
   1aaa4:	e5843000 	str	r3, [r4]
   1aaa8:	e5854000 	str	r4, [r5]
   1aaac:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   1aab0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1aab4:	ea001b0d 	b	216f0 <LeaveCritical>
   1aab8:	eb001adf 	bl	2163c <EnterCritical>
   1aabc:	eaffffe5 	b	1aa58 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x20>
   1aac0:	e3a02040 	mov	r2, #64	; 0x40
   1aac4:	e59f101c 	ldr	r1, [pc, #28]	; 1aae8 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xb0>
   1aac8:	e59f001c 	ldr	r0, [pc, #28]	; 1aaec <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xb4>
   1aacc:	ebfffda0 	bl	1a154 <assertion_failed>
   1aad0:	eaffffee 	b	1aa90 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x58>
   1aad4:	e3a0203b 	mov	r2, #59	; 0x3b
   1aad8:	e59f1008 	ldr	r1, [pc, #8]	; 1aae8 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xb0>
   1aadc:	e59f000c 	ldr	r0, [pc, #12]	; 1aaf0 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xb8>
   1aae0:	ebfffd9b 	bl	1a154 <assertion_failed>
   1aae4:	eaffffe0 	b	1aa6c <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x34>
   1aae8:	00027a90 	.word	0x00027a90
   1aaec:	00027ab4 	.word	0x00027ab4
   1aaf0:	00023968 	.word	0x00023968

0001aaf4 <CDeviceNameService::RemoveDevice(char const*, bool)>:
   1aaf4:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aaf8:	e2516000 	subs	r6, r1, #0
   1aafc:	e1a08000 	mov	r8, r0
   1ab00:	e1a07002 	mov	r7, r2
   1ab04:	0a000040 	beq	1ac0c <CDeviceNameService::RemoveDevice(char const*, bool)+0x118>
   1ab08:	e5980004 	ldr	r0, [r8, #4]
   1ab0c:	e3500000 	cmp	r0, #0
   1ab10:	1a00002e 	bne	1abd0 <CDeviceNameService::RemoveDevice(char const*, bool)+0xdc>
   1ab14:	e5984000 	ldr	r4, [r8]
   1ab18:	e3540000 	cmp	r4, #0
   1ab1c:	0a000039 	beq	1ac08 <CDeviceNameService::RemoveDevice(char const*, bool)+0x114>
   1ab20:	e3a05000 	mov	r5, #0
   1ab24:	e3a0b05e 	mov	fp, #94	; 0x5e
   1ab28:	e59fa0f0 	ldr	sl, [pc, #240]	; 1ac20 <CDeviceNameService::RemoveDevice(char const*, bool)+0x12c>
   1ab2c:	e59f90f0 	ldr	r9, [pc, #240]	; 1ac24 <CDeviceNameService::RemoveDevice(char const*, bool)+0x130>
   1ab30:	ea00000b 	b	1ab64 <CDeviceNameService::RemoveDevice(char const*, bool)+0x70>
   1ab34:	e1a00006 	mov	r0, r6
   1ab38:	eb0016d5 	bl	20694 <strcmp>
   1ab3c:	e3500000 	cmp	r0, #0
   1ab40:	1a000002 	bne	1ab50 <CDeviceNameService::RemoveDevice(char const*, bool)+0x5c>
   1ab44:	e5d4300c 	ldrb	r3, [r4, #12]
   1ab48:	e1530007 	cmp	r3, r7
   1ab4c:	0a00000d 	beq	1ab88 <CDeviceNameService::RemoveDevice(char const*, bool)+0x94>
   1ab50:	e5943000 	ldr	r3, [r4]
   1ab54:	e1a05004 	mov	r5, r4
   1ab58:	e3530000 	cmp	r3, #0
   1ab5c:	0a00001f 	beq	1abe0 <CDeviceNameService::RemoveDevice(char const*, bool)+0xec>
   1ab60:	e1a04003 	mov	r4, r3
   1ab64:	e5941004 	ldr	r1, [r4, #4]
   1ab68:	e3510000 	cmp	r1, #0
   1ab6c:	1afffff0 	bne	1ab34 <CDeviceNameService::RemoveDevice(char const*, bool)+0x40>
   1ab70:	e1a0100a 	mov	r1, sl
   1ab74:	e1a0200b 	mov	r2, fp
   1ab78:	e1a00009 	mov	r0, r9
   1ab7c:	ebfffd74 	bl	1a154 <assertion_failed>
   1ab80:	e5941004 	ldr	r1, [r4, #4]
   1ab84:	eaffffea 	b	1ab34 <CDeviceNameService::RemoveDevice(char const*, bool)+0x40>
   1ab88:	e3550000 	cmp	r5, #0
   1ab8c:	0a00001a 	beq	1abfc <CDeviceNameService::RemoveDevice(char const*, bool)+0x108>
   1ab90:	e5943000 	ldr	r3, [r4]
   1ab94:	e5853000 	str	r3, [r5]
   1ab98:	e5983004 	ldr	r3, [r8, #4]
   1ab9c:	e3530000 	cmp	r3, #0
   1aba0:	1a000013 	bne	1abf4 <CDeviceNameService::RemoveDevice(char const*, bool)+0x100>
   1aba4:	e5940004 	ldr	r0, [r4, #4]
   1aba8:	e3500000 	cmp	r0, #0
   1abac:	0a000000 	beq	1abb4 <CDeviceNameService::RemoveDevice(char const*, bool)+0xc0>
   1abb0:	eb001afe 	bl	217b0 <operator delete[](void*)>
   1abb4:	e3a03000 	mov	r3, #0
   1abb8:	e1a00004 	mov	r0, r4
   1abbc:	e5843004 	str	r3, [r4, #4]
   1abc0:	e5843008 	str	r3, [r4, #8]
   1abc4:	e3a01010 	mov	r1, #16
   1abc8:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1abcc:	ea001af8 	b	217b4 <operator delete(void*, unsigned int)>
   1abd0:	eb001a99 	bl	2163c <EnterCritical>
   1abd4:	e5984000 	ldr	r4, [r8]
   1abd8:	e3540000 	cmp	r4, #0
   1abdc:	1affffcf 	bne	1ab20 <CDeviceNameService::RemoveDevice(char const*, bool)+0x2c>
   1abe0:	e5983004 	ldr	r3, [r8, #4]
   1abe4:	e3530000 	cmp	r3, #0
   1abe8:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1abec:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1abf0:	ea001abe 	b	216f0 <LeaveCritical>
   1abf4:	eb001abd 	bl	216f0 <LeaveCritical>
   1abf8:	eaffffe9 	b	1aba4 <CDeviceNameService::RemoveDevice(char const*, bool)+0xb0>
   1abfc:	e5943000 	ldr	r3, [r4]
   1ac00:	e5883000 	str	r3, [r8]
   1ac04:	eaffffe3 	b	1ab98 <CDeviceNameService::RemoveDevice(char const*, bool)+0xa4>
   1ac08:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ac0c:	e3a02056 	mov	r2, #86	; 0x56
   1ac10:	e59f1008 	ldr	r1, [pc, #8]	; 1ac20 <CDeviceNameService::RemoveDevice(char const*, bool)+0x12c>
   1ac14:	e59f000c 	ldr	r0, [pc, #12]	; 1ac28 <CDeviceNameService::RemoveDevice(char const*, bool)+0x134>
   1ac18:	ebfffd4d 	bl	1a154 <assertion_failed>
   1ac1c:	eaffffb9 	b	1ab08 <CDeviceNameService::RemoveDevice(char const*, bool)+0x14>
   1ac20:	00027a90 	.word	0x00027a90
   1ac24:	00027ac4 	.word	0x00027ac4
   1ac28:	00023968 	.word	0x00023968

0001ac2c <CDeviceNameService::GetDevice(char const*, bool)>:
   1ac2c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ac30:	e2515000 	subs	r5, r1, #0
   1ac34:	e1a07000 	mov	r7, r0
   1ac38:	e1a06002 	mov	r6, r2
   1ac3c:	0a000034 	beq	1ad14 <CDeviceNameService::GetDevice(char const*, bool)+0xe8>
   1ac40:	e5970004 	ldr	r0, [r7, #4]
   1ac44:	e3500000 	cmp	r0, #0
   1ac48:	1a000019 	bne	1acb4 <CDeviceNameService::GetDevice(char const*, bool)+0x88>
   1ac4c:	e5974000 	ldr	r4, [r7]
   1ac50:	e3540000 	cmp	r4, #0
   1ac54:	0a00001e 	beq	1acd4 <CDeviceNameService::GetDevice(char const*, bool)+0xa8>
   1ac58:	e3a0a092 	mov	sl, #146	; 0x92
   1ac5c:	e59f90c4 	ldr	r9, [pc, #196]	; 1ad28 <CDeviceNameService::GetDevice(char const*, bool)+0xfc>
   1ac60:	e59f80c4 	ldr	r8, [pc, #196]	; 1ad2c <CDeviceNameService::GetDevice(char const*, bool)+0x100>
   1ac64:	ea000009 	b	1ac90 <CDeviceNameService::GetDevice(char const*, bool)+0x64>
   1ac68:	e1a00005 	mov	r0, r5
   1ac6c:	eb001688 	bl	20694 <strcmp>
   1ac70:	e3500000 	cmp	r0, #0
   1ac74:	1a000002 	bne	1ac84 <CDeviceNameService::GetDevice(char const*, bool)+0x58>
   1ac78:	e5d4300c 	ldrb	r3, [r4, #12]
   1ac7c:	e1530006 	cmp	r3, r6
   1ac80:	0a000016 	beq	1ace0 <CDeviceNameService::GetDevice(char const*, bool)+0xb4>
   1ac84:	e5944000 	ldr	r4, [r4]
   1ac88:	e3540000 	cmp	r4, #0
   1ac8c:	0a00000c 	beq	1acc4 <CDeviceNameService::GetDevice(char const*, bool)+0x98>
   1ac90:	e5941004 	ldr	r1, [r4, #4]
   1ac94:	e3510000 	cmp	r1, #0
   1ac98:	1afffff2 	bne	1ac68 <CDeviceNameService::GetDevice(char const*, bool)+0x3c>
   1ac9c:	e1a01009 	mov	r1, r9
   1aca0:	e1a0200a 	mov	r2, sl
   1aca4:	e1a00008 	mov	r0, r8
   1aca8:	ebfffd29 	bl	1a154 <assertion_failed>
   1acac:	e5941004 	ldr	r1, [r4, #4]
   1acb0:	eaffffec 	b	1ac68 <CDeviceNameService::GetDevice(char const*, bool)+0x3c>
   1acb4:	eb001a60 	bl	2163c <EnterCritical>
   1acb8:	e5974000 	ldr	r4, [r7]
   1acbc:	e3540000 	cmp	r4, #0
   1acc0:	1affffe4 	bne	1ac58 <CDeviceNameService::GetDevice(char const*, bool)+0x2c>
   1acc4:	e5973004 	ldr	r3, [r7, #4]
   1acc8:	e3530000 	cmp	r3, #0
   1accc:	0a000000 	beq	1acd4 <CDeviceNameService::GetDevice(char const*, bool)+0xa8>
   1acd0:	eb001a86 	bl	216f0 <LeaveCritical>
   1acd4:	e3a04000 	mov	r4, #0
   1acd8:	e1a00004 	mov	r0, r4
   1acdc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ace0:	e5973004 	ldr	r3, [r7, #4]
   1ace4:	e5944008 	ldr	r4, [r4, #8]
   1ace8:	e3530000 	cmp	r3, #0
   1acec:	1a000006 	bne	1ad0c <CDeviceNameService::GetDevice(char const*, bool)+0xe0>
   1acf0:	e3540000 	cmp	r4, #0
   1acf4:	1afffff7 	bne	1acd8 <CDeviceNameService::GetDevice(char const*, bool)+0xac>
   1acf8:	e3a0209a 	mov	r2, #154	; 0x9a
   1acfc:	e59f1024 	ldr	r1, [pc, #36]	; 1ad28 <CDeviceNameService::GetDevice(char const*, bool)+0xfc>
   1ad00:	e59f0028 	ldr	r0, [pc, #40]	; 1ad30 <CDeviceNameService::GetDevice(char const*, bool)+0x104>
   1ad04:	ebfffd12 	bl	1a154 <assertion_failed>
   1ad08:	eafffff2 	b	1acd8 <CDeviceNameService::GetDevice(char const*, bool)+0xac>
   1ad0c:	eb001a77 	bl	216f0 <LeaveCritical>
   1ad10:	eafffff6 	b	1acf0 <CDeviceNameService::GetDevice(char const*, bool)+0xc4>
   1ad14:	e3a0208b 	mov	r2, #139	; 0x8b
   1ad18:	e59f1008 	ldr	r1, [pc, #8]	; 1ad28 <CDeviceNameService::GetDevice(char const*, bool)+0xfc>
   1ad1c:	e59f0010 	ldr	r0, [pc, #16]	; 1ad34 <CDeviceNameService::GetDevice(char const*, bool)+0x108>
   1ad20:	ebfffd0b 	bl	1a154 <assertion_failed>
   1ad24:	eaffffc5 	b	1ac40 <CDeviceNameService::GetDevice(char const*, bool)+0x14>
   1ad28:	00027a90 	.word	0x00027a90
   1ad2c:	00027ac4 	.word	0x00027ac4
   1ad30:	00027ad8 	.word	0x00027ad8
   1ad34:	00023968 	.word	0x00023968

0001ad38 <CDeviceNameService::Get()>:
   1ad38:	e92d4010 	push	{r4, lr}
   1ad3c:	e59f4020 	ldr	r4, [pc, #32]	; 1ad64 <CDeviceNameService::Get()+0x2c>
   1ad40:	e5940000 	ldr	r0, [r4]
   1ad44:	e3500000 	cmp	r0, #0
   1ad48:	18bd8010 	popne	{r4, pc}
   1ad4c:	e3a020cc 	mov	r2, #204	; 0xcc
   1ad50:	e59f1010 	ldr	r1, [pc, #16]	; 1ad68 <CDeviceNameService::Get()+0x30>
   1ad54:	e59f0010 	ldr	r0, [pc, #16]	; 1ad6c <CDeviceNameService::Get()+0x34>
   1ad58:	ebfffcfd 	bl	1a154 <assertion_failed>
   1ad5c:	e5940000 	ldr	r0, [r4]
   1ad60:	e8bd8010 	pop	{r4, pc}
   1ad64:	000299b8 	.word	0x000299b8
   1ad68:	00027a90 	.word	0x00027a90
   1ad6c:	00027ae8 	.word	0x00027ae8

0001ad70 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>:
   1ad70:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1ad74:	e1a07001 	mov	r7, r1
   1ad78:	e1a08002 	mov	r8, r2
   1ad7c:	e24dd010 	sub	sp, sp, #16
   1ad80:	e1a04000 	mov	r4, r0
   1ad84:	e1a0000d 	mov	r0, sp
   1ad88:	e1a05003 	mov	r5, r3
   1ad8c:	e5dd6028 	ldrb	r6, [sp, #40]	; 0x28
   1ad90:	eb000e6f 	bl	1e754 <CString::CString()>
   1ad94:	e1a03008 	mov	r3, r8
   1ad98:	e1a02007 	mov	r2, r7
   1ad9c:	e1a0000d 	mov	r0, sp
   1ada0:	e59f102c 	ldr	r1, [pc, #44]	; 1add4 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)+0x64>
   1ada4:	eb001258 	bl	1f70c <CString::Format(char const*, ...)>
   1ada8:	e1a0000d 	mov	r0, sp
   1adac:	eb000e7e 	bl	1e7ac <CString::operator char const*() const>
   1adb0:	e1a03006 	mov	r3, r6
   1adb4:	e1a01000 	mov	r1, r0
   1adb8:	e1a02005 	mov	r2, r5
   1adbc:	e1a00004 	mov	r0, r4
   1adc0:	ebffff1c 	bl	1aa38 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   1adc4:	e1a0000d 	mov	r0, sp
   1adc8:	eb000e2e 	bl	1e688 <CString::~CString()>
   1adcc:	e28dd010 	add	sp, sp, #16
   1add0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1add4:	00027af4 	.word	0x00027af4

0001add8 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>:
   1add8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1addc:	e1a06001 	mov	r6, r1
   1ade0:	e1a07002 	mov	r7, r2
   1ade4:	e24dd014 	sub	sp, sp, #20
   1ade8:	e1a04000 	mov	r4, r0
   1adec:	e1a0000d 	mov	r0, sp
   1adf0:	e1a05003 	mov	r5, r3
   1adf4:	eb000e56 	bl	1e754 <CString::CString()>
   1adf8:	e1a03007 	mov	r3, r7
   1adfc:	e1a02006 	mov	r2, r6
   1ae00:	e1a0000d 	mov	r0, sp
   1ae04:	e59f1028 	ldr	r1, [pc, #40]	; 1ae34 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)+0x5c>
   1ae08:	eb00123f 	bl	1f70c <CString::Format(char const*, ...)>
   1ae0c:	e1a0000d 	mov	r0, sp
   1ae10:	eb000e65 	bl	1e7ac <CString::operator char const*() const>
   1ae14:	e1a02005 	mov	r2, r5
   1ae18:	e1a01000 	mov	r1, r0
   1ae1c:	e1a00004 	mov	r0, r4
   1ae20:	ebffff33 	bl	1aaf4 <CDeviceNameService::RemoveDevice(char const*, bool)>
   1ae24:	e1a0000d 	mov	r0, sp
   1ae28:	eb000e16 	bl	1e688 <CString::~CString()>
   1ae2c:	e28dd014 	add	sp, sp, #20
   1ae30:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1ae34:	00027af4 	.word	0x00027af4

0001ae38 <CDeviceNameService::GetDevice(char const*, unsigned int, bool)>:
   1ae38:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1ae3c:	e1a06001 	mov	r6, r1
   1ae40:	e1a07002 	mov	r7, r2
   1ae44:	e24dd014 	sub	sp, sp, #20
   1ae48:	e1a04000 	mov	r4, r0
   1ae4c:	e1a0000d 	mov	r0, sp
   1ae50:	e1a05003 	mov	r5, r3
   1ae54:	eb000e3e 	bl	1e754 <CString::CString()>
   1ae58:	e1a03007 	mov	r3, r7
   1ae5c:	e1a02006 	mov	r2, r6
   1ae60:	e1a0000d 	mov	r0, sp
   1ae64:	e59f1030 	ldr	r1, [pc, #48]	; 1ae9c <CDeviceNameService::GetDevice(char const*, unsigned int, bool)+0x64>
   1ae68:	eb001227 	bl	1f70c <CString::Format(char const*, ...)>
   1ae6c:	e1a0000d 	mov	r0, sp
   1ae70:	eb000e4d 	bl	1e7ac <CString::operator char const*() const>
   1ae74:	e1a02005 	mov	r2, r5
   1ae78:	e1a01000 	mov	r1, r0
   1ae7c:	e1a00004 	mov	r0, r4
   1ae80:	ebffff69 	bl	1ac2c <CDeviceNameService::GetDevice(char const*, bool)>
   1ae84:	e1a04000 	mov	r4, r0
   1ae88:	e1a0000d 	mov	r0, sp
   1ae8c:	eb000dfd 	bl	1e688 <CString::~CString()>
   1ae90:	e1a00004 	mov	r0, r4
   1ae94:	e28dd014 	add	sp, sp, #20
   1ae98:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1ae9c:	00027af4 	.word	0x00027af4

0001aea0 <CDeviceNameService::ListDevices(CDevice*)>:
   1aea0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aea4:	e2516000 	subs	r6, r1, #0
   1aea8:	e24dd01c 	sub	sp, sp, #28
   1aeac:	e1a04000 	mov	r4, r0
   1aeb0:	0a000036 	beq	1af90 <CDeviceNameService::ListDevices(CDevice*)+0xf0>
   1aeb4:	e5944000 	ldr	r4, [r4]
   1aeb8:	e3540000 	cmp	r4, #0
   1aebc:	0a00002b 	beq	1af70 <CDeviceNameService::ListDevices(CDevice*)+0xd0>
   1aec0:	e3a05000 	mov	r5, #0
   1aec4:	e3a0b0b9 	mov	fp, #185	; 0xb9
   1aec8:	e59f80d4 	ldr	r8, [pc, #212]	; 1afa4 <CDeviceNameService::ListDevices(CDevice*)+0x104>
   1aecc:	e28d0008 	add	r0, sp, #8
   1aed0:	eb000e1f 	bl	1e754 <CString::CString()>
   1aed4:	e5943004 	ldr	r3, [r4, #4]
   1aed8:	e2855001 	add	r5, r5, #1
   1aedc:	e3530000 	cmp	r3, #0
   1aee0:	0a000024 	beq	1af78 <CDeviceNameService::ListDevices(CDevice*)+0xd8>
   1aee4:	e2157003 	ands	r7, r5, #3
   1aee8:	13a01020 	movne	r1, #32
   1aeec:	03a0100a 	moveq	r1, #10
   1aef0:	e5d4200c 	ldrb	r2, [r4, #12]
   1aef4:	e28d0008 	add	r0, sp, #8
   1aef8:	e3520000 	cmp	r2, #0
   1aefc:	03a02063 	moveq	r2, #99	; 0x63
   1af00:	13a02062 	movne	r2, #98	; 0x62
   1af04:	e58d1000 	str	r1, [sp]
   1af08:	e1a01008 	mov	r1, r8
   1af0c:	eb0011fe 	bl	1f70c <CString::Format(char const*, ...)>
   1af10:	e5963000 	ldr	r3, [r6]
   1af14:	e28d0008 	add	r0, sp, #8
   1af18:	e593900c 	ldr	r9, [r3, #12]
   1af1c:	eb000e22 	bl	1e7ac <CString::operator char const*() const>
   1af20:	e1a0a000 	mov	sl, r0
   1af24:	e28d0008 	add	r0, sp, #8
   1af28:	eb000e4d 	bl	1e864 <CString::GetLength() const>
   1af2c:	e1a0100a 	mov	r1, sl
   1af30:	e1a02000 	mov	r2, r0
   1af34:	e1a00006 	mov	r0, r6
   1af38:	e12fff39 	blx	r9
   1af3c:	e5944000 	ldr	r4, [r4]
   1af40:	e28d0008 	add	r0, sp, #8
   1af44:	eb000dcf 	bl	1e688 <CString::~CString()>
   1af48:	e3540000 	cmp	r4, #0
   1af4c:	1affffde 	bne	1aecc <CDeviceNameService::ListDevices(CDevice*)+0x2c>
   1af50:	e3570000 	cmp	r7, #0
   1af54:	0a000005 	beq	1af70 <CDeviceNameService::ListDevices(CDevice*)+0xd0>
   1af58:	e5963000 	ldr	r3, [r6]
   1af5c:	e1a00006 	mov	r0, r6
   1af60:	e593300c 	ldr	r3, [r3, #12]
   1af64:	e3a02001 	mov	r2, #1
   1af68:	e59f1038 	ldr	r1, [pc, #56]	; 1afa8 <CDeviceNameService::ListDevices(CDevice*)+0x108>
   1af6c:	e12fff33 	blx	r3
   1af70:	e28dd01c 	add	sp, sp, #28
   1af74:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1af78:	e1a0200b 	mov	r2, fp
   1af7c:	e59f1028 	ldr	r1, [pc, #40]	; 1afac <CDeviceNameService::ListDevices(CDevice*)+0x10c>
   1af80:	e59f0028 	ldr	r0, [pc, #40]	; 1afb0 <CDeviceNameService::ListDevices(CDevice*)+0x110>
   1af84:	ebfffc72 	bl	1a154 <assertion_failed>
   1af88:	e5943004 	ldr	r3, [r4, #4]
   1af8c:	eaffffd4 	b	1aee4 <CDeviceNameService::ListDevices(CDevice*)+0x44>
   1af90:	e3a020b0 	mov	r2, #176	; 0xb0
   1af94:	e59f1010 	ldr	r1, [pc, #16]	; 1afac <CDeviceNameService::ListDevices(CDevice*)+0x10c>
   1af98:	e59f0014 	ldr	r0, [pc, #20]	; 1afb4 <CDeviceNameService::ListDevices(CDevice*)+0x114>
   1af9c:	ebfffc6c 	bl	1a154 <assertion_failed>
   1afa0:	eaffffc3 	b	1aeb4 <CDeviceNameService::ListDevices(CDevice*)+0x14>
   1afa4:	00027b0c 	.word	0x00027b0c
   1afa8:	000271d4 	.word	0x000271d4
   1afac:	00027a90 	.word	0x00027a90
   1afb0:	00027ac4 	.word	0x00027ac4
   1afb4:	00027afc 	.word	0x00027afc

0001afb8 <CGPIOPin::~CGPIOPin()>:
   1afb8:	e12fff1e 	bx	lr

0001afbc <CGPIOPin::~CGPIOPin()>:
   1afbc:	e92d4010 	push	{r4, lr}
   1afc0:	e1a04000 	mov	r4, r0
   1afc4:	e3a01028 	mov	r1, #40	; 0x28
   1afc8:	eb0019f9 	bl	217b4 <operator delete(void*, unsigned int)>
   1afcc:	e1a00004 	mov	r0, r4
   1afd0:	e8bd8010 	pop	{r4, pc}

0001afd4 <CGPIOPin::CGPIOPin()>:
   1afd4:	e92d4010 	push	{r4, lr}
   1afd8:	e3a01000 	mov	r1, #0
   1afdc:	e3a02006 	mov	r2, #6
   1afe0:	e3a04036 	mov	r4, #54	; 0x36
   1afe4:	e3a0c00a 	mov	ip, #10
   1afe8:	e59fe01c 	ldr	lr, [pc, #28]	; 1b00c <CGPIOPin::CGPIOPin()+0x38>
   1afec:	e5804004 	str	r4, [r0, #4]
   1aff0:	e580e000 	str	lr, [r0]
   1aff4:	e5c0c010 	strb	ip, [r0, #16]
   1aff8:	e5801018 	str	r1, [r0, #24]
   1affc:	e580101c 	str	r1, [r0, #28]
   1b000:	e5c02024 	strb	r2, [r0, #36]	; 0x24
   1b004:	e5c02025 	strb	r2, [r0, #37]	; 0x25
   1b008:	e8bd8010 	pop	{r4, pc}
   1b00c:	00027b20 	.word	0x00027b20

0001b010 <CGPIOPin::AssignPin(unsigned int)>:
   1b010:	e5903004 	ldr	r3, [r0, #4]
   1b014:	e92d4070 	push	{r4, r5, r6, lr}
   1b018:	e3530036 	cmp	r3, #54	; 0x36
   1b01c:	e1a05000 	mov	r5, r0
   1b020:	e1a04001 	mov	r4, r1
   1b024:	0a000003 	beq	1b038 <CGPIOPin::AssignPin(unsigned int)+0x28>
   1b028:	e3a02040 	mov	r2, #64	; 0x40
   1b02c:	e59f1064 	ldr	r1, [pc, #100]	; 1b098 <CGPIOPin::AssignPin(unsigned int)+0x88>
   1b030:	e59f0064 	ldr	r0, [pc, #100]	; 1b09c <CGPIOPin::AssignPin(unsigned int)+0x8c>
   1b034:	ebfffc46 	bl	1a154 <assertion_failed>
   1b038:	e3540035 	cmp	r4, #53	; 0x35
   1b03c:	e5854004 	str	r4, [r5, #4]
   1b040:	8a000007 	bhi	1b064 <CGPIOPin::AssignPin(unsigned int)+0x54>
   1b044:	e3a03001 	mov	r3, #1
   1b048:	e204201f 	and	r2, r4, #31
   1b04c:	e1a042a4 	lsr	r4, r4, #5
   1b050:	e1a03213 	lsl	r3, r3, r2
   1b054:	e1a04104 	lsl	r4, r4, #2
   1b058:	e585300c 	str	r3, [r5, #12]
   1b05c:	e5854008 	str	r4, [r5, #8]
   1b060:	e8bd8070 	pop	{r4, r5, r6, pc}
   1b064:	eb0008ea 	bl	1d414 <CMachineInfo::Get()>
   1b068:	e6ef1074 	uxtb	r1, r4
   1b06c:	eb0008bb 	bl	1d360 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>
   1b070:	e3500035 	cmp	r0, #53	; 0x35
   1b074:	e1a04000 	mov	r4, r0
   1b078:	e5850004 	str	r0, [r5, #4]
   1b07c:	9afffff0 	bls	1b044 <CGPIOPin::AssignPin(unsigned int)+0x34>
   1b080:	e3a02047 	mov	r2, #71	; 0x47
   1b084:	e59f100c 	ldr	r1, [pc, #12]	; 1b098 <CGPIOPin::AssignPin(unsigned int)+0x88>
   1b088:	e59f0010 	ldr	r0, [pc, #16]	; 1b0a0 <CGPIOPin::AssignPin(unsigned int)+0x90>
   1b08c:	ebfffc30 	bl	1a154 <assertion_failed>
   1b090:	e5954004 	ldr	r4, [r5, #4]
   1b094:	eaffffea 	b	1b044 <CGPIOPin::AssignPin(unsigned int)+0x34>
   1b098:	00027b40 	.word	0x00027b40
   1b09c:	00027b4c 	.word	0x00027b4c
   1b0a0:	00027b60 	.word	0x00027b60

0001b0a4 <CGPIOPin::Write(unsigned int)>:
   1b0a4:	e5903004 	ldr	r3, [r0, #4]
   1b0a8:	e92d4070 	push	{r4, r5, r6, lr}
   1b0ac:	e3530035 	cmp	r3, #53	; 0x35
   1b0b0:	e1a04000 	mov	r4, r0
   1b0b4:	e1a05001 	mov	r5, r1
   1b0b8:	8a00001e 	bhi	1b138 <CGPIOPin::Write(unsigned int)+0x94>
   1b0bc:	e5d43010 	ldrb	r3, [r4, #16]
   1b0c0:	e3530003 	cmp	r3, #3
   1b0c4:	ca000016 	bgt	1b124 <CGPIOPin::Write(unsigned int)+0x80>
   1b0c8:	e3a03000 	mov	r3, #0
   1b0cc:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   1b0d0:	e3550001 	cmp	r5, #1
   1b0d4:	9a00000b 	bls	1b108 <CGPIOPin::Write(unsigned int)+0x64>
   1b0d8:	e3a02098 	mov	r2, #152	; 0x98
   1b0dc:	e59f1068 	ldr	r1, [pc, #104]	; 1b14c <CGPIOPin::Write(unsigned int)+0xa8>
   1b0e0:	e59f0068 	ldr	r0, [pc, #104]	; 1b150 <CGPIOPin::Write(unsigned int)+0xac>
   1b0e4:	ebfffc1a 	bl	1a154 <assertion_failed>
   1b0e8:	e5845014 	str	r5, [r4, #20]
   1b0ec:	e59f5060 	ldr	r5, [pc, #96]	; 1b154 <CGPIOPin::Write(unsigned int)+0xb0>
   1b0f0:	e594100c 	ldr	r1, [r4, #12]
   1b0f4:	e5942008 	ldr	r2, [r4, #8]
   1b0f8:	e3a03000 	mov	r3, #0
   1b0fc:	e7851002 	str	r1, [r5, r2]
   1b100:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   1b104:	e8bd8070 	pop	{r4, r5, r6, pc}
   1b108:	e59f3044 	ldr	r3, [pc, #68]	; 1b154 <CGPIOPin::Write(unsigned int)+0xb0>
   1b10c:	e59f2044 	ldr	r2, [pc, #68]	; 1b158 <CGPIOPin::Write(unsigned int)+0xb4>
   1b110:	e3550000 	cmp	r5, #0
   1b114:	e5845014 	str	r5, [r4, #20]
   1b118:	11a05003 	movne	r5, r3
   1b11c:	01a05002 	moveq	r5, r2
   1b120:	eafffff2 	b	1b0f0 <CGPIOPin::Write(unsigned int)+0x4c>
   1b124:	e3a02094 	mov	r2, #148	; 0x94
   1b128:	e59f101c 	ldr	r1, [pc, #28]	; 1b14c <CGPIOPin::Write(unsigned int)+0xa8>
   1b12c:	e59f0028 	ldr	r0, [pc, #40]	; 1b15c <CGPIOPin::Write(unsigned int)+0xb8>
   1b130:	ebfffc07 	bl	1a154 <assertion_failed>
   1b134:	eaffffe3 	b	1b0c8 <CGPIOPin::Write(unsigned int)+0x24>
   1b138:	e3a02091 	mov	r2, #145	; 0x91
   1b13c:	e59f1008 	ldr	r1, [pc, #8]	; 1b14c <CGPIOPin::Write(unsigned int)+0xa8>
   1b140:	e59f0018 	ldr	r0, [pc, #24]	; 1b160 <CGPIOPin::Write(unsigned int)+0xbc>
   1b144:	ebfffc02 	bl	1a154 <assertion_failed>
   1b148:	eaffffdb 	b	1b0bc <CGPIOPin::Write(unsigned int)+0x18>
   1b14c:	00027b40 	.word	0x00027b40
   1b150:	00027b98 	.word	0x00027b98
   1b154:	2020001c 	.word	0x2020001c
   1b158:	20200028 	.word	0x20200028
   1b15c:	00027b74 	.word	0x00027b74
   1b160:	00027b60 	.word	0x00027b60

0001b164 <CGPIOPin::Read() const>:
   1b164:	e5903004 	ldr	r3, [r0, #4]
   1b168:	e92d4010 	push	{r4, lr}
   1b16c:	e3530035 	cmp	r3, #53	; 0x35
   1b170:	e1a04000 	mov	r4, r0
   1b174:	8a000013 	bhi	1b1c8 <CGPIOPin::Read() const+0x64>
   1b178:	e5d43010 	ldrb	r3, [r4, #16]
   1b17c:	e2432002 	sub	r2, r3, #2
   1b180:	e3530000 	cmp	r3, #0
   1b184:	13520001 	cmpne	r2, #1
   1b188:	9a000003 	bls	1b19c <CGPIOPin::Read() const+0x38>
   1b18c:	e3a020a8 	mov	r2, #168	; 0xa8
   1b190:	e59f1044 	ldr	r1, [pc, #68]	; 1b1dc <CGPIOPin::Read() const+0x78>
   1b194:	e59f0044 	ldr	r0, [pc, #68]	; 1b1e0 <CGPIOPin::Read() const+0x7c>
   1b198:	ebfffbed 	bl	1a154 <assertion_failed>
   1b19c:	e3a03000 	mov	r3, #0
   1b1a0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   1b1a4:	e59f1038 	ldr	r1, [pc, #56]	; 1b1e4 <CGPIOPin::Read() const+0x80>
   1b1a8:	e5940008 	ldr	r0, [r4, #8]
   1b1ac:	e594200c 	ldr	r2, [r4, #12]
   1b1b0:	e7901001 	ldr	r1, [r0, r1]
   1b1b4:	e1110002 	tst	r1, r2
   1b1b8:	13a00001 	movne	r0, #1
   1b1bc:	01a00003 	moveq	r0, r3
   1b1c0:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   1b1c4:	e8bd8010 	pop	{r4, pc}
   1b1c8:	e3a020a4 	mov	r2, #164	; 0xa4
   1b1cc:	e59f1008 	ldr	r1, [pc, #8]	; 1b1dc <CGPIOPin::Read() const+0x78>
   1b1d0:	e59f0010 	ldr	r0, [pc, #16]	; 1b1e8 <CGPIOPin::Read() const+0x84>
   1b1d4:	ebfffbde 	bl	1a154 <assertion_failed>
   1b1d8:	eaffffe6 	b	1b178 <CGPIOPin::Read() const+0x14>
   1b1dc:	00027b40 	.word	0x00027b40
   1b1e0:	00027bb8 	.word	0x00027bb8
   1b1e4:	20200034 	.word	0x20200034
   1b1e8:	00027b60 	.word	0x00027b60

0001b1ec <CGPIOPin::Invert()>:
   1b1ec:	e5d03010 	ldrb	r3, [r0, #16]
   1b1f0:	e92d4010 	push	{r4, lr}
   1b1f4:	e3530001 	cmp	r3, #1
   1b1f8:	e1a04000 	mov	r4, r0
   1b1fc:	0a000003 	beq	1b210 <CGPIOPin::Invert()+0x24>
   1b200:	e3a020b5 	mov	r2, #181	; 0xb5
   1b204:	e59f1018 	ldr	r1, [pc, #24]	; 1b224 <CGPIOPin::Invert()+0x38>
   1b208:	e59f0018 	ldr	r0, [pc, #24]	; 1b228 <CGPIOPin::Invert()+0x3c>
   1b20c:	ebfffbd0 	bl	1a154 <assertion_failed>
   1b210:	e5941014 	ldr	r1, [r4, #20]
   1b214:	e1a00004 	mov	r0, r4
   1b218:	e8bd4010 	pop	{r4, lr}
   1b21c:	e2211001 	eor	r1, r1, #1
   1b220:	eaffff9f 	b	1b0a4 <CGPIOPin::Write(unsigned int)>
   1b224:	00027b40 	.word	0x00027b40
   1b228:	00027c14 	.word	0x00027c14

0001b22c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)>:
   1b22c:	e5d03010 	ldrb	r3, [r0, #16]
   1b230:	e92d4070 	push	{r4, r5, r6, lr}
   1b234:	e1a05001 	mov	r5, r1
   1b238:	e2431002 	sub	r1, r3, #2
   1b23c:	e3530000 	cmp	r3, #0
   1b240:	13510001 	cmpne	r1, #1
   1b244:	e1a04000 	mov	r4, r0
   1b248:	e1a06002 	mov	r6, r2
   1b24c:	9a000003 	bls	1b260 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x34>
   1b250:	e3a020be 	mov	r2, #190	; 0xbe
   1b254:	e59f10b4 	ldr	r1, [pc, #180]	; 1b310 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe4>
   1b258:	e59f00b4 	ldr	r0, [pc, #180]	; 1b314 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe8>
   1b25c:	ebfffbbc 	bl	1a154 <assertion_failed>
   1b260:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
   1b264:	e3530006 	cmp	r3, #6
   1b268:	0a000003 	beq	1b27c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x50>
   1b26c:	e3a020c0 	mov	r2, #192	; 0xc0
   1b270:	e59f1098 	ldr	r1, [pc, #152]	; 1b310 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe4>
   1b274:	e59f009c 	ldr	r0, [pc, #156]	; 1b318 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xec>
   1b278:	ebfffbb5 	bl	1a154 <assertion_failed>
   1b27c:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
   1b280:	e3530006 	cmp	r3, #6
   1b284:	0a000003 	beq	1b298 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x6c>
   1b288:	e3a020c1 	mov	r2, #193	; 0xc1
   1b28c:	e59f107c 	ldr	r1, [pc, #124]	; 1b310 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe4>
   1b290:	e59f0084 	ldr	r0, [pc, #132]	; 1b31c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xf0>
   1b294:	ebfffbae 	bl	1a154 <assertion_failed>
   1b298:	e3550000 	cmp	r5, #0
   1b29c:	0a000016 	beq	1b2fc <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xd0>
   1b2a0:	e594301c 	ldr	r3, [r4, #28]
   1b2a4:	e3530000 	cmp	r3, #0
   1b2a8:	0a000003 	beq	1b2bc <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x90>
   1b2ac:	e3a020c4 	mov	r2, #196	; 0xc4
   1b2b0:	e59f1058 	ldr	r1, [pc, #88]	; 1b310 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe4>
   1b2b4:	e59f0064 	ldr	r0, [pc, #100]	; 1b320 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xf4>
   1b2b8:	ebfffba5 	bl	1a154 <assertion_failed>
   1b2bc:	e5940018 	ldr	r0, [r4, #24]
   1b2c0:	e584501c 	str	r5, [r4, #28]
   1b2c4:	e3500000 	cmp	r0, #0
   1b2c8:	e5846020 	str	r6, [r4, #32]
   1b2cc:	0a000002 	beq	1b2dc <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xb0>
   1b2d0:	e1a01004 	mov	r1, r4
   1b2d4:	e8bd4070 	pop	{r4, r5, r6, lr}
   1b2d8:	ea001cc3 	b	225ec <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
   1b2dc:	e59f102c 	ldr	r1, [pc, #44]	; 1b310 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe4>
   1b2e0:	e59f003c 	ldr	r0, [pc, #60]	; 1b324 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xf8>
   1b2e4:	e3a020c9 	mov	r2, #201	; 0xc9
   1b2e8:	ebfffb99 	bl	1a154 <assertion_failed>
   1b2ec:	e5940018 	ldr	r0, [r4, #24]
   1b2f0:	e1a01004 	mov	r1, r4
   1b2f4:	e8bd4070 	pop	{r4, r5, r6, lr}
   1b2f8:	ea001cbb 	b	225ec <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
   1b2fc:	e3a020c3 	mov	r2, #195	; 0xc3
   1b300:	e59f1008 	ldr	r1, [pc, #8]	; 1b310 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe4>
   1b304:	e59f001c 	ldr	r0, [pc, #28]	; 1b328 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xfc>
   1b308:	ebfffb91 	bl	1a154 <assertion_failed>
   1b30c:	eaffffe3 	b	1b2a0 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x74>
   1b310:	00027b40 	.word	0x00027b40
   1b314:	00027bb8 	.word	0x00027bb8
   1b318:	00027c30 	.word	0x00027c30
   1b31c:	00027c54 	.word	0x00027c54
   1b320:	00027c7c 	.word	0x00027c7c
   1b324:	00027c8c 	.word	0x00027c8c
   1b328:	00027dfc 	.word	0x00027dfc

0001b32c <CGPIOPin::DisconnectInterrupt()>:
   1b32c:	e5d03010 	ldrb	r3, [r0, #16]
   1b330:	e92d4010 	push	{r4, lr}
   1b334:	e2432002 	sub	r2, r3, #2
   1b338:	e3530000 	cmp	r3, #0
   1b33c:	13520001 	cmpne	r2, #1
   1b340:	e1a04000 	mov	r4, r0
   1b344:	9a000003 	bls	1b358 <CGPIOPin::DisconnectInterrupt()+0x2c>
   1b348:	e3a020d1 	mov	r2, #209	; 0xd1
   1b34c:	e59f109c 	ldr	r1, [pc, #156]	; 1b3f0 <CGPIOPin::DisconnectInterrupt()+0xc4>
   1b350:	e59f009c 	ldr	r0, [pc, #156]	; 1b3f4 <CGPIOPin::DisconnectInterrupt()+0xc8>
   1b354:	ebfffb7e 	bl	1a154 <assertion_failed>
   1b358:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
   1b35c:	e3530006 	cmp	r3, #6
   1b360:	0a000003 	beq	1b374 <CGPIOPin::DisconnectInterrupt()+0x48>
   1b364:	e3a020d3 	mov	r2, #211	; 0xd3
   1b368:	e59f1080 	ldr	r1, [pc, #128]	; 1b3f0 <CGPIOPin::DisconnectInterrupt()+0xc4>
   1b36c:	e59f0084 	ldr	r0, [pc, #132]	; 1b3f8 <CGPIOPin::DisconnectInterrupt()+0xcc>
   1b370:	ebfffb77 	bl	1a154 <assertion_failed>
   1b374:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
   1b378:	e3530006 	cmp	r3, #6
   1b37c:	0a000003 	beq	1b390 <CGPIOPin::DisconnectInterrupt()+0x64>
   1b380:	e3a020d4 	mov	r2, #212	; 0xd4
   1b384:	e59f1064 	ldr	r1, [pc, #100]	; 1b3f0 <CGPIOPin::DisconnectInterrupt()+0xc4>
   1b388:	e59f006c 	ldr	r0, [pc, #108]	; 1b3fc <CGPIOPin::DisconnectInterrupt()+0xd0>
   1b38c:	ebfffb70 	bl	1a154 <assertion_failed>
   1b390:	e594301c 	ldr	r3, [r4, #28]
   1b394:	e3530000 	cmp	r3, #0
   1b398:	0a00000f 	beq	1b3dc <CGPIOPin::DisconnectInterrupt()+0xb0>
   1b39c:	e3a03000 	mov	r3, #0
   1b3a0:	e5940018 	ldr	r0, [r4, #24]
   1b3a4:	e584301c 	str	r3, [r4, #28]
   1b3a8:	e1500003 	cmp	r0, r3
   1b3ac:	0a000002 	beq	1b3bc <CGPIOPin::DisconnectInterrupt()+0x90>
   1b3b0:	e1a01004 	mov	r1, r4
   1b3b4:	e8bd4010 	pop	{r4, lr}
   1b3b8:	ea001cb4 	b	22690 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
   1b3bc:	e59f102c 	ldr	r1, [pc, #44]	; 1b3f0 <CGPIOPin::DisconnectInterrupt()+0xc4>
   1b3c0:	e59f0038 	ldr	r0, [pc, #56]	; 1b400 <CGPIOPin::DisconnectInterrupt()+0xd4>
   1b3c4:	e3a020d9 	mov	r2, #217	; 0xd9
   1b3c8:	ebfffb61 	bl	1a154 <assertion_failed>
   1b3cc:	e5940018 	ldr	r0, [r4, #24]
   1b3d0:	e1a01004 	mov	r1, r4
   1b3d4:	e8bd4010 	pop	{r4, lr}
   1b3d8:	ea001cac 	b	22690 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
   1b3dc:	e3a020d6 	mov	r2, #214	; 0xd6
   1b3e0:	e59f1008 	ldr	r1, [pc, #8]	; 1b3f0 <CGPIOPin::DisconnectInterrupt()+0xc4>
   1b3e4:	e59f0018 	ldr	r0, [pc, #24]	; 1b404 <CGPIOPin::DisconnectInterrupt()+0xd8>
   1b3e8:	ebfffb59 	bl	1a154 <assertion_failed>
   1b3ec:	eaffffea 	b	1b39c <CGPIOPin::DisconnectInterrupt()+0x70>
   1b3f0:	00027b40 	.word	0x00027b40
   1b3f4:	00027bb8 	.word	0x00027bb8
   1b3f8:	00027c30 	.word	0x00027c30
   1b3fc:	00027c54 	.word	0x00027c54
   1b400:	00027c8c 	.word	0x00027c8c
   1b404:	00027c9c 	.word	0x00027c9c

0001b408 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)>:
   1b408:	e5d03010 	ldrb	r3, [r0, #16]
   1b40c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1b410:	e2432002 	sub	r2, r3, #2
   1b414:	e3530000 	cmp	r3, #0
   1b418:	13520001 	cmpne	r2, #1
   1b41c:	e1a04000 	mov	r4, r0
   1b420:	e1a05001 	mov	r5, r1
   1b424:	9a000003 	bls	1b438 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x30>
   1b428:	e3a020e1 	mov	r2, #225	; 0xe1
   1b42c:	e59f10d8 	ldr	r1, [pc, #216]	; 1b50c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x104>
   1b430:	e59f00d8 	ldr	r0, [pc, #216]	; 1b510 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x108>
   1b434:	ebfffb46 	bl	1a154 <assertion_failed>
   1b438:	e594301c 	ldr	r3, [r4, #28]
   1b43c:	e3530000 	cmp	r3, #0
   1b440:	0a00002c 	beq	1b4f8 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf0>
   1b444:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
   1b448:	e3530006 	cmp	r3, #6
   1b44c:	0a000003 	beq	1b460 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x58>
   1b450:	e3a020e4 	mov	r2, #228	; 0xe4
   1b454:	e59f10b0 	ldr	r1, [pc, #176]	; 1b50c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x104>
   1b458:	e59f00b4 	ldr	r0, [pc, #180]	; 1b514 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x10c>
   1b45c:	ebfffb3c 	bl	1a154 <assertion_failed>
   1b460:	e3550005 	cmp	r5, #5
   1b464:	ca000017 	bgt	1b4c8 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xc0>
   1b468:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
   1b46c:	e1530005 	cmp	r3, r5
   1b470:	0a00001b 	beq	1b4e4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xdc>
   1b474:	e59f709c 	ldr	r7, [pc, #156]	; 1b518 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x110>
   1b478:	e5942008 	ldr	r2, [r4, #8]
   1b47c:	e5970000 	ldr	r0, [r7]
   1b480:	e59f6094 	ldr	r6, [pc, #148]	; 1b51c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x114>
   1b484:	e0853085 	add	r3, r5, r5, lsl #1
   1b488:	e3500000 	cmp	r0, #0
   1b48c:	e5c45024 	strb	r5, [r4, #36]	; 0x24
   1b490:	e0826006 	add	r6, r2, r6
   1b494:	e1a05103 	lsl	r5, r3, #2
   1b498:	1a000008 	bne	1b4c0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xb8>
   1b49c:	e594200c 	ldr	r2, [r4, #12]
   1b4a0:	e7963005 	ldr	r3, [r6, r5]
   1b4a4:	e1833002 	orr	r3, r3, r2
   1b4a8:	e7863005 	str	r3, [r6, r5]
   1b4ac:	e5973000 	ldr	r3, [r7]
   1b4b0:	e3530000 	cmp	r3, #0
   1b4b4:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   1b4b8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1b4bc:	ea00188b 	b	216f0 <LeaveCritical>
   1b4c0:	eb00185d 	bl	2163c <EnterCritical>
   1b4c4:	eafffff4 	b	1b49c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x94>
   1b4c8:	e3a020e5 	mov	r2, #229	; 0xe5
   1b4cc:	e59f1038 	ldr	r1, [pc, #56]	; 1b50c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x104>
   1b4d0:	e59f0048 	ldr	r0, [pc, #72]	; 1b520 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x118>
   1b4d4:	ebfffb1e 	bl	1a154 <assertion_failed>
   1b4d8:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
   1b4dc:	e1530005 	cmp	r3, r5
   1b4e0:	1affffe3 	bne	1b474 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x6c>
   1b4e4:	e3a020e6 	mov	r2, #230	; 0xe6
   1b4e8:	e59f101c 	ldr	r1, [pc, #28]	; 1b50c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x104>
   1b4ec:	e59f0030 	ldr	r0, [pc, #48]	; 1b524 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x11c>
   1b4f0:	ebfffb17 	bl	1a154 <assertion_failed>
   1b4f4:	eaffffde 	b	1b474 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x6c>
   1b4f8:	e3a020e2 	mov	r2, #226	; 0xe2
   1b4fc:	e59f1008 	ldr	r1, [pc, #8]	; 1b50c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x104>
   1b500:	e59f0020 	ldr	r0, [pc, #32]	; 1b528 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x120>
   1b504:	ebfffb12 	bl	1a154 <assertion_failed>
   1b508:	eaffffcd 	b	1b444 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x3c>
   1b50c:	00027b40 	.word	0x00027b40
   1b510:	00027bb8 	.word	0x00027bb8
   1b514:	00027c30 	.word	0x00027c30
   1b518:	000299bc 	.word	0x000299bc
   1b51c:	2020004c 	.word	0x2020004c
   1b520:	00027cac 	.word	0x00027cac
   1b524:	00027cd0 	.word	0x00027cd0
   1b528:	00027c9c 	.word	0x00027c9c

0001b52c <CGPIOPin::DisableInterrupt()>:
   1b52c:	e5d03010 	ldrb	r3, [r0, #16]
   1b530:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1b534:	e2432002 	sub	r2, r3, #2
   1b538:	e3530000 	cmp	r3, #0
   1b53c:	13520001 	cmpne	r2, #1
   1b540:	e1a05000 	mov	r5, r0
   1b544:	9a000003 	bls	1b558 <CGPIOPin::DisableInterrupt()+0x2c>
   1b548:	e3a020f7 	mov	r2, #247	; 0xf7
   1b54c:	e59f1080 	ldr	r1, [pc, #128]	; 1b5d4 <CGPIOPin::DisableInterrupt()+0xa8>
   1b550:	e59f0080 	ldr	r0, [pc, #128]	; 1b5d8 <CGPIOPin::DisableInterrupt()+0xac>
   1b554:	ebfffafe 	bl	1a154 <assertion_failed>
   1b558:	e5d53024 	ldrb	r3, [r5, #36]	; 0x24
   1b55c:	e3530005 	cmp	r3, #5
   1b560:	ca000015 	bgt	1b5bc <CGPIOPin::DisableInterrupt()+0x90>
   1b564:	e59f7070 	ldr	r7, [pc, #112]	; 1b5dc <CGPIOPin::DisableInterrupt()+0xb0>
   1b568:	e5952008 	ldr	r2, [r5, #8]
   1b56c:	e5970000 	ldr	r0, [r7]
   1b570:	e59f6068 	ldr	r6, [pc, #104]	; 1b5e0 <CGPIOPin::DisableInterrupt()+0xb4>
   1b574:	e0833083 	add	r3, r3, r3, lsl #1
   1b578:	e3500000 	cmp	r0, #0
   1b57c:	e1a04103 	lsl	r4, r3, #2
   1b580:	e0826006 	add	r6, r2, r6
   1b584:	1a00000a 	bne	1b5b4 <CGPIOPin::DisableInterrupt()+0x88>
   1b588:	e7963004 	ldr	r3, [r6, r4]
   1b58c:	e595200c 	ldr	r2, [r5, #12]
   1b590:	e1c33002 	bic	r3, r3, r2
   1b594:	e7863004 	str	r3, [r6, r4]
   1b598:	e5973000 	ldr	r3, [r7]
   1b59c:	e3530000 	cmp	r3, #0
   1b5a0:	0a000000 	beq	1b5a8 <CGPIOPin::DisableInterrupt()+0x7c>
   1b5a4:	eb001851 	bl	216f0 <LeaveCritical>
   1b5a8:	e3a03006 	mov	r3, #6
   1b5ac:	e5c53024 	strb	r3, [r5, #36]	; 0x24
   1b5b0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1b5b4:	eb001820 	bl	2163c <EnterCritical>
   1b5b8:	eafffff2 	b	1b588 <CGPIOPin::DisableInterrupt()+0x5c>
   1b5bc:	e3a020f9 	mov	r2, #249	; 0xf9
   1b5c0:	e59f100c 	ldr	r1, [pc, #12]	; 1b5d4 <CGPIOPin::DisableInterrupt()+0xa8>
   1b5c4:	e59f0018 	ldr	r0, [pc, #24]	; 1b5e4 <CGPIOPin::DisableInterrupt()+0xb8>
   1b5c8:	ebfffae1 	bl	1a154 <assertion_failed>
   1b5cc:	e5d53024 	ldrb	r3, [r5, #36]	; 0x24
   1b5d0:	eaffffe3 	b	1b564 <CGPIOPin::DisableInterrupt()+0x38>
   1b5d4:	00027b40 	.word	0x00027b40
   1b5d8:	00027bb8 	.word	0x00027bb8
   1b5dc:	000299bc 	.word	0x000299bc
   1b5e0:	2020004c 	.word	0x2020004c
   1b5e4:	00027cec 	.word	0x00027cec

0001b5e8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)>:
   1b5e8:	e5d03010 	ldrb	r3, [r0, #16]
   1b5ec:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1b5f0:	e2432002 	sub	r2, r3, #2
   1b5f4:	e3530000 	cmp	r3, #0
   1b5f8:	13520001 	cmpne	r2, #1
   1b5fc:	e1a04000 	mov	r4, r0
   1b600:	e1a05001 	mov	r5, r1
   1b604:	9a000003 	bls	1b618 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x30>
   1b608:	e59f20dc 	ldr	r2, [pc, #220]	; 1b6ec <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x104>
   1b60c:	e59f10dc 	ldr	r1, [pc, #220]	; 1b6f0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x108>
   1b610:	e59f00dc 	ldr	r0, [pc, #220]	; 1b6f4 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x10c>
   1b614:	ebffface 	bl	1a154 <assertion_failed>
   1b618:	e594301c 	ldr	r3, [r4, #28]
   1b61c:	e3530000 	cmp	r3, #0
   1b620:	0a00002c 	beq	1b6d8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf0>
   1b624:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
   1b628:	e3530006 	cmp	r3, #6
   1b62c:	0a000003 	beq	1b640 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x58>
   1b630:	e59f20c0 	ldr	r2, [pc, #192]	; 1b6f8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x110>
   1b634:	e59f10b4 	ldr	r1, [pc, #180]	; 1b6f0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x108>
   1b638:	e59f00bc 	ldr	r0, [pc, #188]	; 1b6fc <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x114>
   1b63c:	ebfffac4 	bl	1a154 <assertion_failed>
   1b640:	e3550005 	cmp	r5, #5
   1b644:	ca000017 	bgt	1b6a8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xc0>
   1b648:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
   1b64c:	e1530005 	cmp	r3, r5
   1b650:	0a00001b 	beq	1b6c4 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xdc>
   1b654:	e59f70a4 	ldr	r7, [pc, #164]	; 1b700 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x118>
   1b658:	e5942008 	ldr	r2, [r4, #8]
   1b65c:	e5970000 	ldr	r0, [r7]
   1b660:	e59f609c 	ldr	r6, [pc, #156]	; 1b704 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x11c>
   1b664:	e0853085 	add	r3, r5, r5, lsl #1
   1b668:	e3500000 	cmp	r0, #0
   1b66c:	e5c45025 	strb	r5, [r4, #37]	; 0x25
   1b670:	e0826006 	add	r6, r2, r6
   1b674:	e1a05103 	lsl	r5, r3, #2
   1b678:	1a000008 	bne	1b6a0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xb8>
   1b67c:	e594200c 	ldr	r2, [r4, #12]
   1b680:	e7963005 	ldr	r3, [r6, r5]
   1b684:	e1833002 	orr	r3, r3, r2
   1b688:	e7863005 	str	r3, [r6, r5]
   1b68c:	e5973000 	ldr	r3, [r7]
   1b690:	e3530000 	cmp	r3, #0
   1b694:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   1b698:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1b69c:	ea001813 	b	216f0 <LeaveCritical>
   1b6a0:	eb0017e5 	bl	2163c <EnterCritical>
   1b6a4:	eafffff4 	b	1b67c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x94>
   1b6a8:	e59f2058 	ldr	r2, [pc, #88]	; 1b708 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x120>
   1b6ac:	e59f103c 	ldr	r1, [pc, #60]	; 1b6f0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x108>
   1b6b0:	e59f0054 	ldr	r0, [pc, #84]	; 1b70c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x124>
   1b6b4:	ebfffaa6 	bl	1a154 <assertion_failed>
   1b6b8:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
   1b6bc:	e1530005 	cmp	r3, r5
   1b6c0:	1affffe3 	bne	1b654 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x6c>
   1b6c4:	e59f2044 	ldr	r2, [pc, #68]	; 1b710 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x128>
   1b6c8:	e59f1020 	ldr	r1, [pc, #32]	; 1b6f0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x108>
   1b6cc:	e59f0040 	ldr	r0, [pc, #64]	; 1b714 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x12c>
   1b6d0:	ebfffa9f 	bl	1a154 <assertion_failed>
   1b6d4:	eaffffde 	b	1b654 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x6c>
   1b6d8:	e59f2038 	ldr	r2, [pc, #56]	; 1b718 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x130>
   1b6dc:	e59f100c 	ldr	r1, [pc, #12]	; 1b6f0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x108>
   1b6e0:	e59f0034 	ldr	r0, [pc, #52]	; 1b71c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x134>
   1b6e4:	ebfffa9a 	bl	1a154 <assertion_failed>
   1b6e8:	eaffffcd 	b	1b624 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x3c>
   1b6ec:	0000010a 	.word	0x0000010a
   1b6f0:	00027b40 	.word	0x00027b40
   1b6f4:	00027bb8 	.word	0x00027bb8
   1b6f8:	0000010d 	.word	0x0000010d
   1b6fc:	00027c54 	.word	0x00027c54
   1b700:	000299bc 	.word	0x000299bc
   1b704:	2020004c 	.word	0x2020004c
   1b708:	0000010e 	.word	0x0000010e
   1b70c:	00027cac 	.word	0x00027cac
   1b710:	0000010f 	.word	0x0000010f
   1b714:	00027d10 	.word	0x00027d10
   1b718:	0000010b 	.word	0x0000010b
   1b71c:	00027c9c 	.word	0x00027c9c

0001b720 <CGPIOPin::DisableInterrupt2()>:
   1b720:	e5d03010 	ldrb	r3, [r0, #16]
   1b724:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1b728:	e2432002 	sub	r2, r3, #2
   1b72c:	e3530000 	cmp	r3, #0
   1b730:	13520001 	cmpne	r2, #1
   1b734:	e1a05000 	mov	r5, r0
   1b738:	9a000003 	bls	1b74c <CGPIOPin::DisableInterrupt2()+0x2c>
   1b73c:	e3a02e12 	mov	r2, #288	; 0x120
   1b740:	e59f1080 	ldr	r1, [pc, #128]	; 1b7c8 <CGPIOPin::DisableInterrupt2()+0xa8>
   1b744:	e59f0080 	ldr	r0, [pc, #128]	; 1b7cc <CGPIOPin::DisableInterrupt2()+0xac>
   1b748:	ebfffa81 	bl	1a154 <assertion_failed>
   1b74c:	e5d53025 	ldrb	r3, [r5, #37]	; 0x25
   1b750:	e3530005 	cmp	r3, #5
   1b754:	ca000015 	bgt	1b7b0 <CGPIOPin::DisableInterrupt2()+0x90>
   1b758:	e59f7070 	ldr	r7, [pc, #112]	; 1b7d0 <CGPIOPin::DisableInterrupt2()+0xb0>
   1b75c:	e5952008 	ldr	r2, [r5, #8]
   1b760:	e5970000 	ldr	r0, [r7]
   1b764:	e59f6068 	ldr	r6, [pc, #104]	; 1b7d4 <CGPIOPin::DisableInterrupt2()+0xb4>
   1b768:	e0833083 	add	r3, r3, r3, lsl #1
   1b76c:	e3500000 	cmp	r0, #0
   1b770:	e1a04103 	lsl	r4, r3, #2
   1b774:	e0826006 	add	r6, r2, r6
   1b778:	1a00000a 	bne	1b7a8 <CGPIOPin::DisableInterrupt2()+0x88>
   1b77c:	e7963004 	ldr	r3, [r6, r4]
   1b780:	e595200c 	ldr	r2, [r5, #12]
   1b784:	e1c33002 	bic	r3, r3, r2
   1b788:	e7863004 	str	r3, [r6, r4]
   1b78c:	e5973000 	ldr	r3, [r7]
   1b790:	e3530000 	cmp	r3, #0
   1b794:	0a000000 	beq	1b79c <CGPIOPin::DisableInterrupt2()+0x7c>
   1b798:	eb0017d4 	bl	216f0 <LeaveCritical>
   1b79c:	e3a03006 	mov	r3, #6
   1b7a0:	e5c53025 	strb	r3, [r5, #37]	; 0x25
   1b7a4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1b7a8:	eb0017a3 	bl	2163c <EnterCritical>
   1b7ac:	eafffff2 	b	1b77c <CGPIOPin::DisableInterrupt2()+0x5c>
   1b7b0:	e59f2020 	ldr	r2, [pc, #32]	; 1b7d8 <CGPIOPin::DisableInterrupt2()+0xb8>
   1b7b4:	e59f100c 	ldr	r1, [pc, #12]	; 1b7c8 <CGPIOPin::DisableInterrupt2()+0xa8>
   1b7b8:	e59f001c 	ldr	r0, [pc, #28]	; 1b7dc <CGPIOPin::DisableInterrupt2()+0xbc>
   1b7bc:	ebfffa64 	bl	1a154 <assertion_failed>
   1b7c0:	e5d53025 	ldrb	r3, [r5, #37]	; 0x25
   1b7c4:	eaffffe3 	b	1b758 <CGPIOPin::DisableInterrupt2()+0x38>
   1b7c8:	00027b40 	.word	0x00027b40
   1b7cc:	00027bb8 	.word	0x00027bb8
   1b7d0:	000299bc 	.word	0x000299bc
   1b7d4:	2020004c 	.word	0x2020004c
   1b7d8:	00000122 	.word	0x00000122
   1b7dc:	00027d2c 	.word	0x00027d2c

0001b7e0 <CGPIOPin::ReadAll()>:
   1b7e0:	e59f3004 	ldr	r3, [pc, #4]	; 1b7ec <CGPIOPin::ReadAll()+0xc>
   1b7e4:	e5930034 	ldr	r0, [r3, #52]	; 0x34
   1b7e8:	e12fff1e 	bx	lr
   1b7ec:	20200000 	.word	0x20200000

0001b7f0 <CGPIOPin::SetPullUpMode(unsigned int)>:
   1b7f0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b7f4:	e1a08000 	mov	r8, r0
   1b7f8:	e59f4078 	ldr	r4, [pc, #120]	; 1b878 <CGPIOPin::SetPullUpMode(unsigned int)+0x88>
   1b7fc:	e1a09001 	mov	r9, r1
   1b800:	e5940000 	ldr	r0, [r4]
   1b804:	e5986008 	ldr	r6, [r8, #8]
   1b808:	e3500000 	cmp	r0, #0
   1b80c:	e59f5068 	ldr	r5, [pc, #104]	; 1b87c <CGPIOPin::SetPullUpMode(unsigned int)+0x8c>
   1b810:	1a000016 	bne	1b870 <CGPIOPin::SetPullUpMode(unsigned int)+0x80>
   1b814:	e3590002 	cmp	r9, #2
   1b818:	8a00000f 	bhi	1b85c <CGPIOPin::SetPullUpMode(unsigned int)+0x6c>
   1b81c:	e59f705c 	ldr	r7, [pc, #92]	; 1b880 <CGPIOPin::SetPullUpMode(unsigned int)+0x90>
   1b820:	e3a00005 	mov	r0, #5
   1b824:	e5879094 	str	r9, [r7, #148]	; 0x94
   1b828:	eb00132e 	bl	204e8 <CTimer::SimpleusDelay(unsigned int)>
   1b82c:	e598300c 	ldr	r3, [r8, #12]
   1b830:	e3a00005 	mov	r0, #5
   1b834:	e7863005 	str	r3, [r6, r5]
   1b838:	eb00132a 	bl	204e8 <CTimer::SimpleusDelay(unsigned int)>
   1b83c:	e3a03000 	mov	r3, #0
   1b840:	e5873094 	str	r3, [r7, #148]	; 0x94
   1b844:	e7863005 	str	r3, [r6, r5]
   1b848:	e5943000 	ldr	r3, [r4]
   1b84c:	e3530000 	cmp	r3, #0
   1b850:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b854:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b858:	ea0017a4 	b	216f0 <LeaveCritical>
   1b85c:	e59f2020 	ldr	r2, [pc, #32]	; 1b884 <CGPIOPin::SetPullUpMode(unsigned int)+0x94>
   1b860:	e59f1020 	ldr	r1, [pc, #32]	; 1b888 <CGPIOPin::SetPullUpMode(unsigned int)+0x98>
   1b864:	e59f0020 	ldr	r0, [pc, #32]	; 1b88c <CGPIOPin::SetPullUpMode(unsigned int)+0x9c>
   1b868:	ebfffa39 	bl	1a154 <assertion_failed>
   1b86c:	eaffffea 	b	1b81c <CGPIOPin::SetPullUpMode(unsigned int)+0x2c>
   1b870:	eb001771 	bl	2163c <EnterCritical>
   1b874:	eaffffe6 	b	1b814 <CGPIOPin::SetPullUpMode(unsigned int)+0x24>
   1b878:	000299bc 	.word	0x000299bc
   1b87c:	20200098 	.word	0x20200098
   1b880:	20200000 	.word	0x20200000
   1b884:	0000013b 	.word	0x0000013b
   1b888:	00027b40 	.word	0x00027b40
   1b88c:	00027d50 	.word	0x00027d50

0001b890 <CGPIOPin::SetAlternateFunction(unsigned int)>:
   1b890:	e5902004 	ldr	r2, [r0, #4]
   1b894:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1b898:	e3520035 	cmp	r2, #53	; 0x35
   1b89c:	e1a06001 	mov	r6, r1
   1b8a0:	8a000022 	bhi	1b930 <CGPIOPin::SetAlternateFunction(unsigned int)+0xa0>
   1b8a4:	e59f30a0 	ldr	r3, [pc, #160]	; 1b94c <CGPIOPin::SetAlternateFunction(unsigned int)+0xbc>
   1b8a8:	e3560005 	cmp	r6, #5
   1b8ac:	e0831293 	umull	r1, r3, r3, r2
   1b8b0:	e1a031a3 	lsr	r3, r3, #3
   1b8b4:	e2835302 	add	r5, r3, #134217728	; 0x8000000
   1b8b8:	e0833103 	add	r3, r3, r3, lsl #2
   1b8bc:	e2855702 	add	r5, r5, #524288	; 0x80000
   1b8c0:	e0423083 	sub	r3, r2, r3, lsl #1
   1b8c4:	e1a05105 	lsl	r5, r5, #2
   1b8c8:	e0834083 	add	r4, r3, r3, lsl #1
   1b8cc:	8a000012 	bhi	1b91c <CGPIOPin::SetAlternateFunction(unsigned int)+0x8c>
   1b8d0:	e59f7078 	ldr	r7, [pc, #120]	; 1b950 <CGPIOPin::SetAlternateFunction(unsigned int)+0xc0>
   1b8d4:	e5970000 	ldr	r0, [r7]
   1b8d8:	e3500000 	cmp	r0, #0
   1b8dc:	1a00000c 	bne	1b914 <CGPIOPin::SetAlternateFunction(unsigned int)+0x84>
   1b8e0:	e3a01007 	mov	r1, #7
   1b8e4:	e59f3068 	ldr	r3, [pc, #104]	; 1b954 <CGPIOPin::SetAlternateFunction(unsigned int)+0xc4>
   1b8e8:	e5952000 	ldr	r2, [r5]
   1b8ec:	e0836106 	add	r6, r3, r6, lsl #2
   1b8f0:	e5963010 	ldr	r3, [r6, #16]
   1b8f4:	e1c22411 	bic	r2, r2, r1, lsl r4
   1b8f8:	e1824413 	orr	r4, r2, r3, lsl r4
   1b8fc:	e5854000 	str	r4, [r5]
   1b900:	e5973000 	ldr	r3, [r7]
   1b904:	e3530000 	cmp	r3, #0
   1b908:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   1b90c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1b910:	ea001776 	b	216f0 <LeaveCritical>
   1b914:	eb001748 	bl	2163c <EnterCritical>
   1b918:	eafffff0 	b	1b8e0 <CGPIOPin::SetAlternateFunction(unsigned int)+0x50>
   1b91c:	e3a02f53 	mov	r2, #332	; 0x14c
   1b920:	e59f1030 	ldr	r1, [pc, #48]	; 1b958 <CGPIOPin::SetAlternateFunction(unsigned int)+0xc8>
   1b924:	e59f0030 	ldr	r0, [pc, #48]	; 1b95c <CGPIOPin::SetAlternateFunction(unsigned int)+0xcc>
   1b928:	ebfffa09 	bl	1a154 <assertion_failed>
   1b92c:	eaffffe7 	b	1b8d0 <CGPIOPin::SetAlternateFunction(unsigned int)+0x40>
   1b930:	e1a04000 	mov	r4, r0
   1b934:	e3a02f52 	mov	r2, #328	; 0x148
   1b938:	e59f1018 	ldr	r1, [pc, #24]	; 1b958 <CGPIOPin::SetAlternateFunction(unsigned int)+0xc8>
   1b93c:	e59f001c 	ldr	r0, [pc, #28]	; 1b960 <CGPIOPin::SetAlternateFunction(unsigned int)+0xd0>
   1b940:	ebfffa03 	bl	1a154 <assertion_failed>
   1b944:	e5942004 	ldr	r2, [r4, #4]
   1b948:	eaffffd5 	b	1b8a4 <CGPIOPin::SetAlternateFunction(unsigned int)+0x14>
   1b94c:	cccccccd 	.word	0xcccccccd
   1b950:	000299bc 	.word	0x000299bc
   1b954:	00027b18 	.word	0x00027b18
   1b958:	00027b40 	.word	0x00027b40
   1b95c:	00027d5c 	.word	0x00027d5c
   1b960:	00027b60 	.word	0x00027b60

0001b964 <CGPIOPin::SetMode(TGPIOMode, bool)>:
   1b964:	e3510009 	cmp	r1, #9
   1b968:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1b96c:	e1a05001 	mov	r5, r1
   1b970:	e1a04000 	mov	r4, r0
   1b974:	e1a06002 	mov	r6, r2
   1b978:	ca00003f 	bgt	1ba7c <CGPIOPin::SetMode(TGPIOMode, bool)+0x118>
   1b97c:	e5c45010 	strb	r5, [r4, #16]
   1b980:	e3a02000 	mov	r2, #0
   1b984:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
   1b988:	e5d43010 	ldrb	r3, [r4, #16]
   1b98c:	e2431004 	sub	r1, r3, #4
   1b990:	e6ef0071 	uxtb	r0, r1
   1b994:	e3500005 	cmp	r0, #5
   1b998:	9a000030 	bls	1ba60 <CGPIOPin::SetMode(TGPIOMode, bool)+0xfc>
   1b99c:	e3530001 	cmp	r3, #1
   1b9a0:	13a03000 	movne	r3, #0
   1b9a4:	02063001 	andeq	r3, r6, #1
   1b9a8:	e3530000 	cmp	r3, #0
   1b9ac:	1a000055 	bne	1bb08 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1a4>
   1b9b0:	e5943004 	ldr	r3, [r4, #4]
   1b9b4:	e3530035 	cmp	r3, #53	; 0x35
   1b9b8:	8a00003a 	bhi	1baa8 <CGPIOPin::SetMode(TGPIOMode, bool)+0x144>
   1b9bc:	e59f5154 	ldr	r5, [pc, #340]	; 1bb18 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1b4>
   1b9c0:	e59f8154 	ldr	r8, [pc, #340]	; 1bb1c <CGPIOPin::SetMode(TGPIOMode, bool)+0x1b8>
   1b9c4:	e0852395 	umull	r2, r5, r5, r3
   1b9c8:	e5980000 	ldr	r0, [r8]
   1b9cc:	e1a051a5 	lsr	r5, r5, #3
   1b9d0:	e2857302 	add	r7, r5, #134217728	; 0x8000000
   1b9d4:	e0855105 	add	r5, r5, r5, lsl #2
   1b9d8:	e2877702 	add	r7, r7, #524288	; 0x80000
   1b9dc:	e0435085 	sub	r5, r3, r5, lsl #1
   1b9e0:	e3500000 	cmp	r0, #0
   1b9e4:	e1a07107 	lsl	r7, r7, #2
   1b9e8:	e0855085 	add	r5, r5, r5, lsl #1
   1b9ec:	1a000033 	bne	1bac0 <CGPIOPin::SetMode(TGPIOMode, bool)+0x15c>
   1b9f0:	e5d42010 	ldrb	r2, [r4, #16]
   1b9f4:	e3a01007 	mov	r1, #7
   1b9f8:	e2422001 	sub	r2, r2, #1
   1b9fc:	e16f2f12 	clz	r2, r2
   1ba00:	e5973000 	ldr	r3, [r7]
   1ba04:	e1a022a2 	lsr	r2, r2, #5
   1ba08:	e1c33511 	bic	r3, r3, r1, lsl r5
   1ba0c:	e1835512 	orr	r5, r3, r2, lsl r5
   1ba10:	e5875000 	str	r5, [r7]
   1ba14:	e5983000 	ldr	r3, [r8]
   1ba18:	e3530000 	cmp	r3, #0
   1ba1c:	1a000029 	bne	1bac8 <CGPIOPin::SetMode(TGPIOMode, bool)+0x164>
   1ba20:	e3560000 	cmp	r6, #0
   1ba24:	0a00000a 	beq	1ba54 <CGPIOPin::SetMode(TGPIOMode, bool)+0xf0>
   1ba28:	e5d43010 	ldrb	r3, [r4, #16]
   1ba2c:	e3530003 	cmp	r3, #3
   1ba30:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1ba34:	ea000006 	b	1ba54 <CGPIOPin::SetMode(TGPIOMode, bool)+0xf0>
   1ba38:	0001baf8 	.word	0x0001baf8
   1ba3c:	0001bae8 	.word	0x0001bae8
   1ba40:	0001bad8 	.word	0x0001bad8
   1ba44:	0001ba48 	.word	0x0001ba48
   1ba48:	e1a00004 	mov	r0, r4
   1ba4c:	e3a01001 	mov	r1, #1
   1ba50:	ebffff66 	bl	1b7f0 <CGPIOPin::SetPullUpMode(unsigned int)>
   1ba54:	e3a03000 	mov	r3, #0
   1ba58:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   1ba5c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1ba60:	e1560002 	cmp	r6, r2
   1ba64:	1a000009 	bne	1ba90 <CGPIOPin::SetMode(TGPIOMode, bool)+0x12c>
   1ba68:	e1a00004 	mov	r0, r4
   1ba6c:	ebffff87 	bl	1b890 <CGPIOPin::SetAlternateFunction(unsigned int)>
   1ba70:	e3a03000 	mov	r3, #0
   1ba74:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   1ba78:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1ba7c:	e3a0204f 	mov	r2, #79	; 0x4f
   1ba80:	e59f1098 	ldr	r1, [pc, #152]	; 1bb20 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1bc>
   1ba84:	e59f0098 	ldr	r0, [pc, #152]	; 1bb24 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1c0>
   1ba88:	ebfff9b1 	bl	1a154 <assertion_failed>
   1ba8c:	eaffffba 	b	1b97c <CGPIOPin::SetMode(TGPIOMode, bool)+0x18>
   1ba90:	e1a01002 	mov	r1, r2
   1ba94:	e1a00004 	mov	r0, r4
   1ba98:	ebffff54 	bl	1b7f0 <CGPIOPin::SetPullUpMode(unsigned int)>
   1ba9c:	e5d43010 	ldrb	r3, [r4, #16]
   1baa0:	e2431004 	sub	r1, r3, #4
   1baa4:	eaffffef 	b	1ba68 <CGPIOPin::SetMode(TGPIOMode, bool)+0x104>
   1baa8:	e3a02068 	mov	r2, #104	; 0x68
   1baac:	e59f106c 	ldr	r1, [pc, #108]	; 1bb20 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1bc>
   1bab0:	e59f0070 	ldr	r0, [pc, #112]	; 1bb28 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1c4>
   1bab4:	ebfff9a6 	bl	1a154 <assertion_failed>
   1bab8:	e5943004 	ldr	r3, [r4, #4]
   1babc:	eaffffbe 	b	1b9bc <CGPIOPin::SetMode(TGPIOMode, bool)+0x58>
   1bac0:	eb0016dd 	bl	2163c <EnterCritical>
   1bac4:	eaffffc9 	b	1b9f0 <CGPIOPin::SetMode(TGPIOMode, bool)+0x8c>
   1bac8:	eb001708 	bl	216f0 <LeaveCritical>
   1bacc:	e3560000 	cmp	r6, #0
   1bad0:	0affffdf 	beq	1ba54 <CGPIOPin::SetMode(TGPIOMode, bool)+0xf0>
   1bad4:	eaffffd3 	b	1ba28 <CGPIOPin::SetMode(TGPIOMode, bool)+0xc4>
   1bad8:	e1a00004 	mov	r0, r4
   1badc:	e3a01002 	mov	r1, #2
   1bae0:	ebffff42 	bl	1b7f0 <CGPIOPin::SetPullUpMode(unsigned int)>
   1bae4:	eaffffda 	b	1ba54 <CGPIOPin::SetMode(TGPIOMode, bool)+0xf0>
   1bae8:	e1a00004 	mov	r0, r4
   1baec:	e3a01000 	mov	r1, #0
   1baf0:	ebfffd6b 	bl	1b0a4 <CGPIOPin::Write(unsigned int)>
   1baf4:	eaffffd6 	b	1ba54 <CGPIOPin::SetMode(TGPIOMode, bool)+0xf0>
   1baf8:	e1a00004 	mov	r0, r4
   1bafc:	e3a01000 	mov	r1, #0
   1bb00:	ebffff3a 	bl	1b7f0 <CGPIOPin::SetPullUpMode(unsigned int)>
   1bb04:	eaffffd2 	b	1ba54 <CGPIOPin::SetMode(TGPIOMode, bool)+0xf0>
   1bb08:	e1a01002 	mov	r1, r2
   1bb0c:	e1a00004 	mov	r0, r4
   1bb10:	ebffff36 	bl	1b7f0 <CGPIOPin::SetPullUpMode(unsigned int)>
   1bb14:	eaffffa5 	b	1b9b0 <CGPIOPin::SetMode(TGPIOMode, bool)+0x4c>
   1bb18:	cccccccd 	.word	0xcccccccd
   1bb1c:	000299bc 	.word	0x000299bc
   1bb20:	00027b40 	.word	0x00027b40
   1bb24:	00027d6c 	.word	0x00027d6c
   1bb28:	00027b60 	.word	0x00027b60

0001bb2c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>:
   1bb2c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1bb30:	e3a0c006 	mov	ip, #6
   1bb34:	e3a0e000 	mov	lr, #0
   1bb38:	e3a07036 	mov	r7, #54	; 0x36
   1bb3c:	e3a0600a 	mov	r6, #10
   1bb40:	e1a04000 	mov	r4, r0
   1bb44:	e1a05002 	mov	r5, r2
   1bb48:	e5803018 	str	r3, [r0, #24]
   1bb4c:	e59f302c 	ldr	r3, [pc, #44]	; 1bb80 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x54>
   1bb50:	e580e01c 	str	lr, [r0, #28]
   1bb54:	e8800088 	stm	r0, {r3, r7}
   1bb58:	e5c0c024 	strb	ip, [r0, #36]	; 0x24
   1bb5c:	e5c0c025 	strb	ip, [r0, #37]	; 0x25
   1bb60:	e5c06010 	strb	r6, [r0, #16]
   1bb64:	ebfffd29 	bl	1b010 <CGPIOPin::AssignPin(unsigned int)>
   1bb68:	e1a00004 	mov	r0, r4
   1bb6c:	e1a01005 	mov	r1, r5
   1bb70:	e3a02001 	mov	r2, #1
   1bb74:	ebffff7a 	bl	1b964 <CGPIOPin::SetMode(TGPIOMode, bool)>
   1bb78:	e1a00004 	mov	r0, r4
   1bb7c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1bb80:	00027b20 	.word	0x00027b20

0001bb84 <CGPIOPin::InterruptHandler()>:
   1bb84:	e5d03010 	ldrb	r3, [r0, #16]
   1bb88:	e92d4010 	push	{r4, lr}
   1bb8c:	e2432002 	sub	r2, r3, #2
   1bb90:	e3530000 	cmp	r3, #0
   1bb94:	13520001 	cmpne	r2, #1
   1bb98:	e1a04000 	mov	r4, r0
   1bb9c:	9a000003 	bls	1bbb0 <CGPIOPin::InterruptHandler()+0x2c>
   1bba0:	e59f2074 	ldr	r2, [pc, #116]	; 1bc1c <CGPIOPin::InterruptHandler()+0x98>
   1bba4:	e59f1074 	ldr	r1, [pc, #116]	; 1bc20 <CGPIOPin::InterruptHandler()+0x9c>
   1bba8:	e59f0074 	ldr	r0, [pc, #116]	; 1bc24 <CGPIOPin::InterruptHandler()+0xa0>
   1bbac:	ebfff968 	bl	1a154 <assertion_failed>
   1bbb0:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
   1bbb4:	e3530005 	cmp	r3, #5
   1bbb8:	da000002 	ble	1bbc8 <CGPIOPin::InterruptHandler()+0x44>
   1bbbc:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
   1bbc0:	e3530005 	cmp	r3, #5
   1bbc4:	ca000005 	bgt	1bbe0 <CGPIOPin::InterruptHandler()+0x5c>
   1bbc8:	e594301c 	ldr	r3, [r4, #28]
   1bbcc:	e3530000 	cmp	r3, #0
   1bbd0:	0a000009 	beq	1bbfc <CGPIOPin::InterruptHandler()+0x78>
   1bbd4:	e5940020 	ldr	r0, [r4, #32]
   1bbd8:	e8bd4010 	pop	{r4, lr}
   1bbdc:	e12fff13 	bx	r3
   1bbe0:	e59f2040 	ldr	r2, [pc, #64]	; 1bc28 <CGPIOPin::InterruptHandler()+0xa4>
   1bbe4:	e59f1034 	ldr	r1, [pc, #52]	; 1bc20 <CGPIOPin::InterruptHandler()+0x9c>
   1bbe8:	e59f003c 	ldr	r0, [pc, #60]	; 1bc2c <CGPIOPin::InterruptHandler()+0xa8>
   1bbec:	ebfff958 	bl	1a154 <assertion_failed>
   1bbf0:	e594301c 	ldr	r3, [r4, #28]
   1bbf4:	e3530000 	cmp	r3, #0
   1bbf8:	1afffff5 	bne	1bbd4 <CGPIOPin::InterruptHandler()+0x50>
   1bbfc:	e59f002c 	ldr	r0, [pc, #44]	; 1bc30 <CGPIOPin::InterruptHandler()+0xac>
   1bc00:	e59f202c 	ldr	r2, [pc, #44]	; 1bc34 <CGPIOPin::InterruptHandler()+0xb0>
   1bc04:	e59f1014 	ldr	r1, [pc, #20]	; 1bc20 <CGPIOPin::InterruptHandler()+0x9c>
   1bc08:	ebfff951 	bl	1a154 <assertion_failed>
   1bc0c:	e594301c 	ldr	r3, [r4, #28]
   1bc10:	e5940020 	ldr	r0, [r4, #32]
   1bc14:	e8bd4010 	pop	{r4, lr}
   1bc18:	e12fff13 	bx	r3
   1bc1c:	0000015b 	.word	0x0000015b
   1bc20:	00027b40 	.word	0x00027b40
   1bc24:	00027bb8 	.word	0x00027bb8
   1bc28:	0000015d 	.word	0x0000015d
   1bc2c:	00027d84 	.word	0x00027d84
   1bc30:	00027c9c 	.word	0x00027c9c
   1bc34:	0000015f 	.word	0x0000015f

0001bc38 <CGPIOPin::DisableAllInterrupts(unsigned int)>:
   1bc38:	e3500035 	cmp	r0, #53	; 0x35
   1bc3c:	e92d4070 	push	{r4, r5, r6, lr}
   1bc40:	e1a05000 	mov	r5, r0
   1bc44:	8a00001e 	bhi	1bcc4 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x8c>
   1bc48:	e3a02001 	mov	r2, #1
   1bc4c:	e59f6084 	ldr	r6, [pc, #132]	; 1bcd8 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xa0>
   1bc50:	e59f4084 	ldr	r4, [pc, #132]	; 1bcdc <CGPIOPin::DisableAllInterrupts(unsigned int)+0xa4>
   1bc54:	e5960000 	ldr	r0, [r6]
   1bc58:	e08442a5 	add	r4, r4, r5, lsr #5
   1bc5c:	e3500000 	cmp	r0, #0
   1bc60:	e205501f 	and	r5, r5, #31
   1bc64:	e1a04104 	lsl	r4, r4, #2
   1bc68:	e1a05512 	lsl	r5, r2, r5
   1bc6c:	1a00000f 	bne	1bcb0 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x78>
   1bc70:	e59f3068 	ldr	r3, [pc, #104]	; 1bce0 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xa8>
   1bc74:	e1540003 	cmp	r4, r3
   1bc78:	8a00000b 	bhi	1bcac <CGPIOPin::DisableAllInterrupts(unsigned int)+0x74>
   1bc7c:	e1e02005 	mvn	r2, r5
   1bc80:	e59f1058 	ldr	r1, [pc, #88]	; 1bce0 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xa8>
   1bc84:	e5943000 	ldr	r3, [r4]
   1bc88:	e0033002 	and	r3, r3, r2
   1bc8c:	e484300c 	str	r3, [r4], #12
   1bc90:	e1540001 	cmp	r4, r1
   1bc94:	9afffffa 	bls	1bc84 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x4c>
   1bc98:	e5963000 	ldr	r3, [r6]
   1bc9c:	e3530000 	cmp	r3, #0
   1bca0:	08bd8070 	popeq	{r4, r5, r6, pc}
   1bca4:	e8bd4070 	pop	{r4, r5, r6, lr}
   1bca8:	ea001690 	b	216f0 <LeaveCritical>
   1bcac:	e8bd8070 	pop	{r4, r5, r6, pc}
   1bcb0:	eb001661 	bl	2163c <EnterCritical>
   1bcb4:	e59f3024 	ldr	r3, [pc, #36]	; 1bce0 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xa8>
   1bcb8:	e1540003 	cmp	r4, r3
   1bcbc:	9affffee 	bls	1bc7c <CGPIOPin::DisableAllInterrupts(unsigned int)+0x44>
   1bcc0:	eafffff4 	b	1bc98 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x60>
   1bcc4:	e59f2018 	ldr	r2, [pc, #24]	; 1bce4 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xac>
   1bcc8:	e59f1018 	ldr	r1, [pc, #24]	; 1bce8 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xb0>
   1bccc:	e59f0018 	ldr	r0, [pc, #24]	; 1bcec <CGPIOPin::DisableAllInterrupts(unsigned int)+0xb4>
   1bcd0:	ebfff91f 	bl	1a154 <assertion_failed>
   1bcd4:	eaffffdb 	b	1bc48 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x10>
   1bcd8:	000299bc 	.word	0x000299bc
   1bcdc:	08080013 	.word	0x08080013
   1bce0:	2020008b 	.word	0x2020008b
   1bce4:	00000165 	.word	0x00000165
   1bce8:	00027b40 	.word	0x00027b40
   1bcec:	00027dd0 	.word	0x00027dd0

0001bcf0 <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE>:
   1bcf0:	e3a02001 	mov	r2, #1
   1bcf4:	e59f3004 	ldr	r3, [pc, #4]	; 1bd00 <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE+0x10>
   1bcf8:	e5832000 	str	r2, [r3]
   1bcfc:	e12fff1e 	bx	lr
   1bd00:	000299bc 	.word	0x000299bc

0001bd04 <CInterruptSystem::CInterruptSystem()>:
   1bd04:	e1a0c000 	mov	ip, r0
   1bd08:	e2802f47 	add	r2, r0, #284	; 0x11c
   1bd0c:	e1a00002 	mov	r0, r2
   1bd10:	e3a01000 	mov	r1, #0
   1bd14:	e24c3004 	sub	r3, ip, #4
   1bd18:	e5a31004 	str	r1, [r3, #4]!
   1bd1c:	e1530000 	cmp	r3, r0
   1bd20:	e5a21004 	str	r1, [r2, #4]!
   1bd24:	1afffffb 	bne	1bd18 <CInterruptSystem::CInterruptSystem()+0x14>
   1bd28:	e59f3008 	ldr	r3, [pc, #8]	; 1bd38 <CInterruptSystem::CInterruptSystem()+0x34>
   1bd2c:	e1a0000c 	mov	r0, ip
   1bd30:	e583c000 	str	ip, [r3]
   1bd34:	e12fff1e 	bx	lr
   1bd38:	000299c0 	.word	0x000299c0

0001bd3c <CInterruptSystem::~CInterruptSystem()>:
   1bd3c:	e3a02000 	mov	r2, #0
   1bd40:	e59f3004 	ldr	r3, [pc, #4]	; 1bd4c <CInterruptSystem::~CInterruptSystem()+0x10>
   1bd44:	e5832000 	str	r2, [r3]
   1bd48:	e12fff1e 	bx	lr
   1bd4c:	000299c0 	.word	0x000299c0

0001bd50 <CInterruptSystem::Initialize()>:
   1bd50:	e92d4010 	push	{r4, lr}
   1bd54:	e3a04000 	mov	r4, #0
   1bd58:	e59f2050 	ldr	r2, [pc, #80]	; 1bdb0 <CInterruptSystem::Initialize()+0x60>
   1bd5c:	e59f3050 	ldr	r3, [pc, #80]	; 1bdb4 <CInterruptSystem::Initialize()+0x64>
   1bd60:	e1a02142 	asr	r2, r2, #2
   1bd64:	e1a03143 	asr	r3, r3, #2
   1bd68:	e2422002 	sub	r2, r2, #2
   1bd6c:	e2433002 	sub	r3, r3, #2
   1bd70:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
   1bd74:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
   1bd78:	e5842018 	str	r2, [r4, #24]
   1bd7c:	e584301c 	str	r3, [r4, #28]
   1bd80:	eb00167f 	bl	21784 <SyncDataAndInstructionCache>
   1bd84:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   1bd88:	e3e02000 	mvn	r2, #0
   1bd8c:	e59f3024 	ldr	r3, [pc, #36]	; 1bdb8 <CInterruptSystem::Initialize()+0x68>
   1bd90:	e583420c 	str	r4, [r3, #524]	; 0x20c
   1bd94:	e583221c 	str	r2, [r3, #540]	; 0x21c
   1bd98:	e5832220 	str	r2, [r3, #544]	; 0x220
   1bd9c:	e5832224 	str	r2, [r3, #548]	; 0x224
   1bda0:	ee074fba 	mcr	15, 0, r4, cr7, cr10, {5}
   1bda4:	f1080080 	cpsie	i
   1bda8:	e3a00001 	mov	r0, #1
   1bdac:	e8bd8010 	pop	{r4, pc}
   1bdb0:	00021218 	.word	0x00021218
   1bdb4:	00021224 	.word	0x00021224
   1bdb8:	2000b000 	.word	0x2000b000

0001bdbc <CInterruptSystem::DisconnectFIQ()>:
   1bdbc:	e92d4010 	push	{r4, lr}
   1bdc0:	e59f4068 	ldr	r4, [pc, #104]	; 1be30 <CInterruptSystem::DisconnectFIQ()+0x74>
   1bdc4:	e5d42001 	ldrb	r2, [r4, #1]
   1bdc8:	e5d43000 	ldrb	r3, [r4]
   1bdcc:	e5d41002 	ldrb	r1, [r4, #2]
   1bdd0:	e1833402 	orr	r3, r3, r2, lsl #8
   1bdd4:	e5d42003 	ldrb	r2, [r4, #3]
   1bdd8:	e1833801 	orr	r3, r3, r1, lsl #16
   1bddc:	e1933c02 	orrs	r3, r3, r2, lsl #24
   1bde0:	0a00000d 	beq	1be1c <CInterruptSystem::DisconnectFIQ()+0x60>
   1bde4:	e3a03000 	mov	r3, #0
   1bde8:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   1bdec:	e59f2040 	ldr	r2, [pc, #64]	; 1be34 <CInterruptSystem::DisconnectFIQ()+0x78>
   1bdf0:	e582320c 	str	r3, [r2, #524]	; 0x20c
   1bdf4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   1bdf8:	e5c43000 	strb	r3, [r4]
   1bdfc:	e5c43001 	strb	r3, [r4, #1]
   1be00:	e5c43002 	strb	r3, [r4, #2]
   1be04:	e5c43003 	strb	r3, [r4, #3]
   1be08:	e5c43004 	strb	r3, [r4, #4]
   1be0c:	e5c43005 	strb	r3, [r4, #5]
   1be10:	e5c43006 	strb	r3, [r4, #6]
   1be14:	e5c43007 	strb	r3, [r4, #7]
   1be18:	e8bd8010 	pop	{r4, pc}
   1be1c:	e3a02086 	mov	r2, #134	; 0x86
   1be20:	e59f1010 	ldr	r1, [pc, #16]	; 1be38 <CInterruptSystem::DisconnectFIQ()+0x7c>
   1be24:	e59f0010 	ldr	r0, [pc, #16]	; 1be3c <CInterruptSystem::DisconnectFIQ()+0x80>
   1be28:	ebfff8c9 	bl	1a154 <assertion_failed>
   1be2c:	eaffffec 	b	1bde4 <CInterruptSystem::DisconnectFIQ()+0x28>
   1be30:	000298d0 	.word	0x000298d0
   1be34:	2000b000 	.word	0x2000b000
   1be38:	00027de4 	.word	0x00027de4
   1be3c:	00027df4 	.word	0x00027df4

0001be40 <CInterruptSystem::EnableIRQ(unsigned int)>:
   1be40:	e92d4010 	push	{r4, lr}
   1be44:	e3a03000 	mov	r3, #0
   1be48:	e1a04000 	mov	r4, r0
   1be4c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   1be50:	e3500047 	cmp	r0, #71	; 0x47
   1be54:	8a00000d 	bhi	1be90 <CInterruptSystem::EnableIRQ(unsigned int)+0x50>
   1be58:	e350001f 	cmp	r0, #31
   1be5c:	8a000007 	bhi	1be80 <CInterruptSystem::EnableIRQ(unsigned int)+0x40>
   1be60:	e59f2040 	ldr	r2, [pc, #64]	; 1bea8 <CInterruptSystem::EnableIRQ(unsigned int)+0x68>
   1be64:	e3a03001 	mov	r3, #1
   1be68:	e204401f 	and	r4, r4, #31
   1be6c:	e1a04413 	lsl	r4, r3, r4
   1be70:	e5824000 	str	r4, [r2]
   1be74:	e3a03000 	mov	r3, #0
   1be78:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   1be7c:	e8bd8010 	pop	{r4, pc}
   1be80:	e350003f 	cmp	r0, #63	; 0x3f
   1be84:	959f2020 	ldrls	r2, [pc, #32]	; 1beac <CInterruptSystem::EnableIRQ(unsigned int)+0x6c>
   1be88:	859f2020 	ldrhi	r2, [pc, #32]	; 1beb0 <CInterruptSystem::EnableIRQ(unsigned int)+0x70>
   1be8c:	eafffff4 	b	1be64 <CInterruptSystem::EnableIRQ(unsigned int)+0x24>
   1be90:	e3a02092 	mov	r2, #146	; 0x92
   1be94:	e59f1018 	ldr	r1, [pc, #24]	; 1beb4 <CInterruptSystem::EnableIRQ(unsigned int)+0x74>
   1be98:	e59f0018 	ldr	r0, [pc, #24]	; 1beb8 <CInterruptSystem::EnableIRQ(unsigned int)+0x78>
   1be9c:	ebfff8ac 	bl	1a154 <assertion_failed>
   1bea0:	e59f2008 	ldr	r2, [pc, #8]	; 1beb0 <CInterruptSystem::EnableIRQ(unsigned int)+0x70>
   1bea4:	eaffffee 	b	1be64 <CInterruptSystem::EnableIRQ(unsigned int)+0x24>
   1bea8:	2000b210 	.word	0x2000b210
   1beac:	2000b214 	.word	0x2000b214
   1beb0:	2000b218 	.word	0x2000b218
   1beb4:	00027de4 	.word	0x00027de4
   1beb8:	00027e0c 	.word	0x00027e0c

0001bebc <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>:
   1bebc:	e3510047 	cmp	r1, #71	; 0x47
   1bec0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1bec4:	e1a04001 	mov	r4, r1
   1bec8:	e1a05000 	mov	r5, r0
   1becc:	e1a08002 	mov	r8, r2
   1bed0:	e1a07003 	mov	r7, r3
   1bed4:	8a00000c 	bhi	1bf0c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x50>
   1bed8:	e7953104 	ldr	r3, [r5, r4, lsl #2]
   1bedc:	e0856104 	add	r6, r5, r4, lsl #2
   1bee0:	e3530000 	cmp	r3, #0
   1bee4:	0a000003 	beq	1bef8 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x3c>
   1bee8:	e3a02062 	mov	r2, #98	; 0x62
   1beec:	e59f102c 	ldr	r1, [pc, #44]	; 1bf20 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x64>
   1bef0:	e59f002c 	ldr	r0, [pc, #44]	; 1bf24 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x68>
   1bef4:	ebfff896 	bl	1a154 <assertion_failed>
   1bef8:	e7858104 	str	r8, [r5, r4, lsl #2]
   1befc:	e1a00004 	mov	r0, r4
   1bf00:	e5867120 	str	r7, [r6, #288]	; 0x120
   1bf04:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1bf08:	eaffffcc 	b	1be40 <CInterruptSystem::EnableIRQ(unsigned int)>
   1bf0c:	e3a02061 	mov	r2, #97	; 0x61
   1bf10:	e59f1008 	ldr	r1, [pc, #8]	; 1bf20 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x64>
   1bf14:	e59f000c 	ldr	r0, [pc, #12]	; 1bf28 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x6c>
   1bf18:	ebfff88d 	bl	1a154 <assertion_failed>
   1bf1c:	eaffffed 	b	1bed8 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x1c>
   1bf20:	00027de4 	.word	0x00027de4
   1bf24:	00027e20 	.word	0x00027e20
   1bf28:	00027e0c 	.word	0x00027e0c

0001bf2c <CInterruptSystem::DisableIRQ(unsigned int)>:
   1bf2c:	e92d4010 	push	{r4, lr}
   1bf30:	e3a03000 	mov	r3, #0
   1bf34:	e1a04000 	mov	r4, r0
   1bf38:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   1bf3c:	e3500047 	cmp	r0, #71	; 0x47
   1bf40:	8a00000d 	bhi	1bf7c <CInterruptSystem::DisableIRQ(unsigned int)+0x50>
   1bf44:	e350001f 	cmp	r0, #31
   1bf48:	8a000007 	bhi	1bf6c <CInterruptSystem::DisableIRQ(unsigned int)+0x40>
   1bf4c:	e59f2040 	ldr	r2, [pc, #64]	; 1bf94 <CInterruptSystem::DisableIRQ(unsigned int)+0x68>
   1bf50:	e3a03001 	mov	r3, #1
   1bf54:	e204401f 	and	r4, r4, #31
   1bf58:	e1a04413 	lsl	r4, r3, r4
   1bf5c:	e5824000 	str	r4, [r2]
   1bf60:	e3a03000 	mov	r3, #0
   1bf64:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   1bf68:	e8bd8010 	pop	{r4, pc}
   1bf6c:	e350003f 	cmp	r0, #63	; 0x3f
   1bf70:	959f2020 	ldrls	r2, [pc, #32]	; 1bf98 <CInterruptSystem::DisableIRQ(unsigned int)+0x6c>
   1bf74:	859f2020 	ldrhi	r2, [pc, #32]	; 1bf9c <CInterruptSystem::DisableIRQ(unsigned int)+0x70>
   1bf78:	eafffff4 	b	1bf50 <CInterruptSystem::DisableIRQ(unsigned int)+0x24>
   1bf7c:	e3a0209d 	mov	r2, #157	; 0x9d
   1bf80:	e59f1018 	ldr	r1, [pc, #24]	; 1bfa0 <CInterruptSystem::DisableIRQ(unsigned int)+0x74>
   1bf84:	e59f0018 	ldr	r0, [pc, #24]	; 1bfa4 <CInterruptSystem::DisableIRQ(unsigned int)+0x78>
   1bf88:	ebfff871 	bl	1a154 <assertion_failed>
   1bf8c:	e59f2008 	ldr	r2, [pc, #8]	; 1bf9c <CInterruptSystem::DisableIRQ(unsigned int)+0x70>
   1bf90:	eaffffee 	b	1bf50 <CInterruptSystem::DisableIRQ(unsigned int)+0x24>
   1bf94:	2000b21c 	.word	0x2000b21c
   1bf98:	2000b220 	.word	0x2000b220
   1bf9c:	2000b224 	.word	0x2000b224
   1bfa0:	00027de4 	.word	0x00027de4
   1bfa4:	00027e0c 	.word	0x00027e0c

0001bfa8 <CInterruptSystem::DisconnectIRQ(unsigned int)>:
   1bfa8:	e3510047 	cmp	r1, #71	; 0x47
   1bfac:	e92d4070 	push	{r4, r5, r6, lr}
   1bfb0:	e1a04001 	mov	r4, r1
   1bfb4:	e1a05000 	mov	r5, r0
   1bfb8:	8a000009 	bhi	1bfe4 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x3c>
   1bfbc:	e7953104 	ldr	r3, [r5, r4, lsl #2]
   1bfc0:	e0856104 	add	r6, r5, r4, lsl #2
   1bfc4:	e3530000 	cmp	r3, #0
   1bfc8:	0a00000d 	beq	1c004 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x5c>
   1bfcc:	e1a00004 	mov	r0, r4
   1bfd0:	ebffffd5 	bl	1bf2c <CInterruptSystem::DisableIRQ(unsigned int)>
   1bfd4:	e3a03000 	mov	r3, #0
   1bfd8:	e7853104 	str	r3, [r5, r4, lsl #2]
   1bfdc:	e5863120 	str	r3, [r6, #288]	; 0x120
   1bfe0:	e8bd8070 	pop	{r4, r5, r6, pc}
   1bfe4:	e3a0206c 	mov	r2, #108	; 0x6c
   1bfe8:	e59f1028 	ldr	r1, [pc, #40]	; 1c018 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x70>
   1bfec:	e59f0028 	ldr	r0, [pc, #40]	; 1c01c <CInterruptSystem::DisconnectIRQ(unsigned int)+0x74>
   1bff0:	ebfff857 	bl	1a154 <assertion_failed>
   1bff4:	e7953104 	ldr	r3, [r5, r4, lsl #2]
   1bff8:	e0856104 	add	r6, r5, r4, lsl #2
   1bffc:	e3530000 	cmp	r3, #0
   1c000:	1afffff1 	bne	1bfcc <CInterruptSystem::DisconnectIRQ(unsigned int)+0x24>
   1c004:	e3a0206d 	mov	r2, #109	; 0x6d
   1c008:	e59f1008 	ldr	r1, [pc, #8]	; 1c018 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x70>
   1c00c:	e59f000c 	ldr	r0, [pc, #12]	; 1c020 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x78>
   1c010:	ebfff84f 	bl	1a154 <assertion_failed>
   1c014:	eaffffec 	b	1bfcc <CInterruptSystem::DisconnectIRQ(unsigned int)+0x24>
   1c018:	00027de4 	.word	0x00027de4
   1c01c:	00027e0c 	.word	0x00027e0c
   1c020:	00027e3c 	.word	0x00027e3c

0001c024 <CInterruptSystem::EnableFIQ(unsigned int)>:
   1c024:	e92d4010 	push	{r4, lr}
   1c028:	e3a03000 	mov	r3, #0
   1c02c:	e1a04000 	mov	r4, r0
   1c030:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   1c034:	e3500047 	cmp	r0, #71	; 0x47
   1c038:	9a000003 	bls	1c04c <CInterruptSystem::EnableFIQ(unsigned int)+0x28>
   1c03c:	e3a020a8 	mov	r2, #168	; 0xa8
   1c040:	e59f101c 	ldr	r1, [pc, #28]	; 1c064 <CInterruptSystem::EnableFIQ(unsigned int)+0x40>
   1c044:	e59f001c 	ldr	r0, [pc, #28]	; 1c068 <CInterruptSystem::EnableFIQ(unsigned int)+0x44>
   1c048:	ebfff841 	bl	1a154 <assertion_failed>
   1c04c:	e59f3018 	ldr	r3, [pc, #24]	; 1c06c <CInterruptSystem::EnableFIQ(unsigned int)+0x48>
   1c050:	e3844080 	orr	r4, r4, #128	; 0x80
   1c054:	e583420c 	str	r4, [r3, #524]	; 0x20c
   1c058:	e3a03000 	mov	r3, #0
   1c05c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   1c060:	e8bd8010 	pop	{r4, pc}
   1c064:	00027de4 	.word	0x00027de4
   1c068:	00027e58 	.word	0x00027e58
   1c06c:	2000b000 	.word	0x2000b000

0001c070 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>:
   1c070:	e3510047 	cmp	r1, #71	; 0x47
   1c074:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1c078:	e1a07001 	mov	r7, r1
   1c07c:	e1a06002 	mov	r6, r2
   1c080:	e1a05003 	mov	r5, r3
   1c084:	8a00001f 	bhi	1c108 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x98>
   1c088:	e3560000 	cmp	r6, #0
   1c08c:	0a000022 	beq	1c11c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xac>
   1c090:	e59f4098 	ldr	r4, [pc, #152]	; 1c130 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc0>
   1c094:	e5d42001 	ldrb	r2, [r4, #1]
   1c098:	e5d43000 	ldrb	r3, [r4]
   1c09c:	e5d41002 	ldrb	r1, [r4, #2]
   1c0a0:	e1833402 	orr	r3, r3, r2, lsl #8
   1c0a4:	e5d42003 	ldrb	r2, [r4, #3]
   1c0a8:	e1833801 	orr	r3, r3, r1, lsl #16
   1c0ac:	e1933c02 	orrs	r3, r3, r2, lsl #24
   1c0b0:	0a000003 	beq	1c0c4 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x54>
   1c0b4:	e3a0207c 	mov	r2, #124	; 0x7c
   1c0b8:	e59f1074 	ldr	r1, [pc, #116]	; 1c134 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc4>
   1c0bc:	e59f0074 	ldr	r0, [pc, #116]	; 1c138 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc8>
   1c0c0:	ebfff823 	bl	1a154 <assertion_failed>
   1c0c4:	e1a0e426 	lsr	lr, r6, #8
   1c0c8:	e1a0c826 	lsr	ip, r6, #16
   1c0cc:	e1a01c26 	lsr	r1, r6, #24
   1c0d0:	e1a02425 	lsr	r2, r5, #8
   1c0d4:	e1a03825 	lsr	r3, r5, #16
   1c0d8:	e5c45004 	strb	r5, [r4, #4]
   1c0dc:	e1a05c25 	lsr	r5, r5, #24
   1c0e0:	e1a00007 	mov	r0, r7
   1c0e4:	e5c46000 	strb	r6, [r4]
   1c0e8:	e5c4e001 	strb	lr, [r4, #1]
   1c0ec:	e5c4c002 	strb	ip, [r4, #2]
   1c0f0:	e5c41003 	strb	r1, [r4, #3]
   1c0f4:	e5c42005 	strb	r2, [r4, #5]
   1c0f8:	e5c43006 	strb	r3, [r4, #6]
   1c0fc:	e5c45007 	strb	r5, [r4, #7]
   1c100:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1c104:	eaffffc6 	b	1c024 <CInterruptSystem::EnableFIQ(unsigned int)>
   1c108:	e3a0207a 	mov	r2, #122	; 0x7a
   1c10c:	e59f1020 	ldr	r1, [pc, #32]	; 1c134 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc4>
   1c110:	e59f0024 	ldr	r0, [pc, #36]	; 1c13c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xcc>
   1c114:	ebfff80e 	bl	1a154 <assertion_failed>
   1c118:	eaffffda 	b	1c088 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x18>
   1c11c:	e3a0207b 	mov	r2, #123	; 0x7b
   1c120:	e59f100c 	ldr	r1, [pc, #12]	; 1c134 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc4>
   1c124:	e59f0014 	ldr	r0, [pc, #20]	; 1c140 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xd0>
   1c128:	ebfff809 	bl	1a154 <assertion_failed>
   1c12c:	eaffffd7 	b	1c090 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x20>
   1c130:	000298d0 	.word	0x000298d0
   1c134:	00027de4 	.word	0x00027de4
   1c138:	00027e6c 	.word	0x00027e6c
   1c13c:	00027e58 	.word	0x00027e58
   1c140:	00027dfc 	.word	0x00027dfc

0001c144 <CInterruptSystem::DisableFIQ()>:
   1c144:	e3a03000 	mov	r3, #0
   1c148:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   1c14c:	e59f2008 	ldr	r2, [pc, #8]	; 1c15c <CInterruptSystem::DisableFIQ()+0x18>
   1c150:	e582320c 	str	r3, [r2, #524]	; 0x20c
   1c154:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   1c158:	e12fff1e 	bx	lr
   1c15c:	2000b000 	.word	0x2000b000

0001c160 <CInterruptSystem::Get()>:
   1c160:	e92d4010 	push	{r4, lr}
   1c164:	e59f4020 	ldr	r4, [pc, #32]	; 1c18c <CInterruptSystem::Get()+0x2c>
   1c168:	e5940000 	ldr	r0, [r4]
   1c16c:	e3500000 	cmp	r0, #0
   1c170:	18bd8010 	popne	{r4, pc}
   1c174:	e3a020ba 	mov	r2, #186	; 0xba
   1c178:	e59f1010 	ldr	r1, [pc, #16]	; 1c190 <CInterruptSystem::Get()+0x30>
   1c17c:	e59f0010 	ldr	r0, [pc, #16]	; 1c194 <CInterruptSystem::Get()+0x34>
   1c180:	ebfff7f3 	bl	1a154 <assertion_failed>
   1c184:	e5940000 	ldr	r0, [r4]
   1c188:	e8bd8010 	pop	{r4, pc}
   1c18c:	000299c0 	.word	0x000299c0
   1c190:	00027de4 	.word	0x00027de4
   1c194:	00022d0c 	.word	0x00022d0c

0001c198 <CInterruptSystem::CallIRQHandler(unsigned int)>:
   1c198:	e3510047 	cmp	r1, #71	; 0x47
   1c19c:	e92d4070 	push	{r4, r5, r6, lr}
   1c1a0:	e1a06001 	mov	r6, r1
   1c1a4:	e1a05000 	mov	r5, r0
   1c1a8:	8a000007 	bhi	1c1cc <CInterruptSystem::CallIRQHandler(unsigned int)+0x34>
   1c1ac:	e7954106 	ldr	r4, [r5, r6, lsl #2]
   1c1b0:	e0855106 	add	r5, r5, r6, lsl #2
   1c1b4:	e3540000 	cmp	r4, #0
   1c1b8:	0a00000b 	beq	1c1ec <CInterruptSystem::CallIRQHandler(unsigned int)+0x54>
   1c1bc:	e5950120 	ldr	r0, [r5, #288]	; 0x120
   1c1c0:	e12fff34 	blx	r4
   1c1c4:	e3a00001 	mov	r0, #1
   1c1c8:	e8bd8070 	pop	{r4, r5, r6, pc}
   1c1cc:	e3a020c0 	mov	r2, #192	; 0xc0
   1c1d0:	e59f1024 	ldr	r1, [pc, #36]	; 1c1fc <CInterruptSystem::CallIRQHandler(unsigned int)+0x64>
   1c1d4:	e59f0024 	ldr	r0, [pc, #36]	; 1c200 <CInterruptSystem::CallIRQHandler(unsigned int)+0x68>
   1c1d8:	ebfff7dd 	bl	1a154 <assertion_failed>
   1c1dc:	e7954106 	ldr	r4, [r5, r6, lsl #2]
   1c1e0:	e0855106 	add	r5, r5, r6, lsl #2
   1c1e4:	e3540000 	cmp	r4, #0
   1c1e8:	1afffff3 	bne	1c1bc <CInterruptSystem::CallIRQHandler(unsigned int)+0x24>
   1c1ec:	e1a00006 	mov	r0, r6
   1c1f0:	ebffff4d 	bl	1bf2c <CInterruptSystem::DisableIRQ(unsigned int)>
   1c1f4:	e1a00004 	mov	r0, r4
   1c1f8:	e8bd8070 	pop	{r4, r5, r6, pc}
   1c1fc:	00027de4 	.word	0x00027de4
   1c200:	00027e0c 	.word	0x00027e0c

0001c204 <CInterruptSystem::InterruptHandler()>:
   1c204:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1c208:	e59f70a8 	ldr	r7, [pc, #168]	; 1c2b8 <CInterruptSystem::InterruptHandler()+0xb4>
   1c20c:	e24dd010 	sub	sp, sp, #16
   1c210:	e5973000 	ldr	r3, [r7]
   1c214:	e3530000 	cmp	r3, #0
   1c218:	0a000021 	beq	1c2a4 <CInterruptSystem::InterruptHandler()+0xa0>
   1c21c:	e3a06000 	mov	r6, #0
   1c220:	ee076f9a 	mcr	15, 0, r6, cr7, cr10, {4}
   1c224:	e59f3090 	ldr	r3, [pc, #144]	; 1c2bc <CInterruptSystem::InterruptHandler()+0xb8>
   1c228:	e5932204 	ldr	r2, [r3, #516]	; 0x204
   1c22c:	e58d2004 	str	r2, [sp, #4]
   1c230:	e5932208 	ldr	r2, [r3, #520]	; 0x208
   1c234:	e58d2008 	str	r2, [sp, #8]
   1c238:	e5933200 	ldr	r3, [r3, #512]	; 0x200
   1c23c:	e6ef3073 	uxtb	r3, r3
   1c240:	e58d300c 	str	r3, [sp, #12]
   1c244:	ee076fba 	mcr	15, 0, r6, cr7, cr10, {5}
   1c248:	e28d8004 	add	r8, sp, #4
   1c24c:	e4984004 	ldr	r4, [r8], #4
   1c250:	e3540000 	cmp	r4, #0
   1c254:	0a00000d 	beq	1c290 <CInterruptSystem::InterruptHandler()+0x8c>
   1c258:	e1a05006 	mov	r5, r6
   1c25c:	ea000002 	b	1c26c <CInterruptSystem::InterruptHandler()+0x68>
   1c260:	e1b040a4 	lsrs	r4, r4, #1
   1c264:	e2855001 	add	r5, r5, #1
   1c268:	0a000008 	beq	1c290 <CInterruptSystem::InterruptHandler()+0x8c>
   1c26c:	e3140001 	tst	r4, #1
   1c270:	0afffffa 	beq	1c260 <CInterruptSystem::InterruptHandler()+0x5c>
   1c274:	e1a01005 	mov	r1, r5
   1c278:	e5970000 	ldr	r0, [r7]
   1c27c:	ebffffc5 	bl	1c198 <CInterruptSystem::CallIRQHandler(unsigned int)>
   1c280:	e3500000 	cmp	r0, #0
   1c284:	0afffff5 	beq	1c260 <CInterruptSystem::InterruptHandler()+0x5c>
   1c288:	e28dd010 	add	sp, sp, #16
   1c28c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1c290:	e2866020 	add	r6, r6, #32
   1c294:	e3560060 	cmp	r6, #96	; 0x60
   1c298:	1affffeb 	bne	1c24c <CInterruptSystem::InterruptHandler()+0x48>
   1c29c:	e28dd010 	add	sp, sp, #16
   1c2a0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1c2a4:	e3a020d3 	mov	r2, #211	; 0xd3
   1c2a8:	e59f1010 	ldr	r1, [pc, #16]	; 1c2c0 <CInterruptSystem::InterruptHandler()+0xbc>
   1c2ac:	e59f0010 	ldr	r0, [pc, #16]	; 1c2c4 <CInterruptSystem::InterruptHandler()+0xc0>
   1c2b0:	ebfff7a7 	bl	1a154 <assertion_failed>
   1c2b4:	eaffffd8 	b	1c21c <CInterruptSystem::InterruptHandler()+0x18>
   1c2b8:	000299c0 	.word	0x000299c0
   1c2bc:	2000b000 	.word	0x2000b000
   1c2c0:	00027de4 	.word	0x00027de4
   1c2c4:	00022d0c 	.word	0x00022d0c

0001c2c8 <InterruptHandler>:
   1c2c8:	e92d4010 	push	{r4, lr}
   1c2cc:	e3a04000 	mov	r4, #0
   1c2d0:	ee074fba 	mcr	15, 0, r4, cr7, cr10, {5}
   1c2d4:	ebffffca 	bl	1c204 <CInterruptSystem::InterruptHandler()>
   1c2d8:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   1c2dc:	e8bd8010 	pop	{r4, pc}

0001c2e0 <CKernelOptions::GetDecimal(char*) [clone .part.0]>:
   1c2e0:	e3a01000 	mov	r1, #0
   1c2e4:	ea00000a 	b	1c314 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x34>
   1c2e8:	e3520009 	cmp	r2, #9
   1c2ec:	8a000011 	bhi	1c338 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x58>
   1c2f0:	e3730001 	cmn	r3, #1
   1c2f4:	13a02000 	movne	r2, #0
   1c2f8:	03a02001 	moveq	r2, #1
   1c2fc:	e1510003 	cmp	r1, r3
   1c300:	91a01002 	movls	r1, r2
   1c304:	83821001 	orrhi	r1, r2, #1
   1c308:	e3510000 	cmp	r1, #0
   1c30c:	1a000009 	bne	1c338 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x58>
   1c310:	e1a01003 	mov	r1, r3
   1c314:	e0d0c0d1 	ldrsb	ip, [r0], #1
   1c318:	e0813101 	add	r3, r1, r1, lsl #2
   1c31c:	e24c2030 	sub	r2, ip, #48	; 0x30
   1c320:	e35c0000 	cmp	ip, #0
   1c324:	e0823083 	add	r3, r2, r3, lsl #1
   1c328:	e6ef2072 	uxtb	r2, r2
   1c32c:	1affffed 	bne	1c2e8 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x8>
   1c330:	e1a00001 	mov	r0, r1
   1c334:	e12fff1e 	bx	lr
   1c338:	e3e01000 	mvn	r1, #0
   1c33c:	e1a00001 	mov	r0, r1
   1c340:	e12fff1e 	bx	lr

0001c344 <CKernelOptions::~CKernelOptions()>:
   1c344:	e3a02000 	mov	r2, #0
   1c348:	e59f3004 	ldr	r3, [pc, #4]	; 1c354 <CKernelOptions::~CKernelOptions()+0x10>
   1c34c:	e5832000 	str	r2, [r3]
   1c350:	e12fff1e 	bx	lr
   1c354:	000299c4 	.word	0x000299c4

0001c358 <CKernelOptions::GetWidth() const>:
   1c358:	e5900810 	ldr	r0, [r0, #2064]	; 0x810
   1c35c:	e12fff1e 	bx	lr

0001c360 <CKernelOptions::GetHeight() const>:
   1c360:	e5900814 	ldr	r0, [r0, #2068]	; 0x814
   1c364:	e12fff1e 	bx	lr

0001c368 <CKernelOptions::GetLogDevice() const>:
   1c368:	e2800e81 	add	r0, r0, #2064	; 0x810
   1c36c:	e2800008 	add	r0, r0, #8
   1c370:	e12fff1e 	bx	lr

0001c374 <CKernelOptions::GetLogLevel() const>:
   1c374:	e590082c 	ldr	r0, [r0, #2092]	; 0x82c
   1c378:	e12fff1e 	bx	lr

0001c37c <CKernelOptions::GetKeyMap() const>:
   1c37c:	e2800e83 	add	r0, r0, #2096	; 0x830
   1c380:	e12fff1e 	bx	lr

0001c384 <CKernelOptions::GetUSBPowerDelay() const>:
   1c384:	e5900834 	ldr	r0, [r0, #2100]	; 0x834
   1c388:	e12fff1e 	bx	lr

0001c38c <CKernelOptions::GetSoundDevice() const>:
   1c38c:	e2800e83 	add	r0, r0, #2096	; 0x830
   1c390:	e2800008 	add	r0, r0, #8
   1c394:	e12fff1e 	bx	lr

0001c398 <CKernelOptions::GetSoundOption() const>:
   1c398:	e590084c 	ldr	r0, [r0, #2124]	; 0x84c
   1c39c:	e12fff1e 	bx	lr

0001c3a0 <CKernelOptions::GetCPUSpeed() const>:
   1c3a0:	e5d00850 	ldrb	r0, [r0, #2128]	; 0x850
   1c3a4:	e12fff1e 	bx	lr

0001c3a8 <CKernelOptions::GetSoCMaxTemp() const>:
   1c3a8:	e5900854 	ldr	r0, [r0, #2132]	; 0x854
   1c3ac:	e12fff1e 	bx	lr

0001c3b0 <CKernelOptions::Get()>:
   1c3b0:	e59f3004 	ldr	r3, [pc, #4]	; 1c3bc <CKernelOptions::Get()+0xc>
   1c3b4:	e5930000 	ldr	r0, [r3]
   1c3b8:	e12fff1e 	bx	lr
   1c3bc:	000299c4 	.word	0x000299c4

0001c3c0 <CKernelOptions::GetToken()>:
   1c3c0:	e590380c 	ldr	r3, [r0, #2060]	; 0x80c
   1c3c4:	e1d320d0 	ldrsb	r2, [r3]
   1c3c8:	e3520000 	cmp	r2, #0
   1c3cc:	1a000005 	bne	1c3e8 <CKernelOptions::GetToken()+0x28>
   1c3d0:	ea000016 	b	1c430 <CKernelOptions::GetToken()+0x70>
   1c3d4:	e2833001 	add	r3, r3, #1
   1c3d8:	e580380c 	str	r3, [r0, #2060]	; 0x80c
   1c3dc:	e1d320d0 	ldrsb	r2, [r3]
   1c3e0:	e3520000 	cmp	r2, #0
   1c3e4:	0a000011 	beq	1c430 <CKernelOptions::GetToken()+0x70>
   1c3e8:	e3520020 	cmp	r2, #32
   1c3ec:	0afffff8 	beq	1c3d4 <CKernelOptions::GetToken()+0x14>
   1c3f0:	e1a02003 	mov	r2, r3
   1c3f4:	ea000000 	b	1c3fc <CKernelOptions::GetToken()+0x3c>
   1c3f8:	e1a02001 	mov	r2, r1
   1c3fc:	e2821001 	add	r1, r2, #1
   1c400:	e580180c 	str	r1, [r0, #2060]	; 0x80c
   1c404:	e1d2c0d1 	ldrsb	ip, [r2, #1]
   1c408:	e35c0000 	cmp	ip, #0
   1c40c:	0a000008 	beq	1c434 <CKernelOptions::GetToken()+0x74>
   1c410:	e35c0020 	cmp	ip, #32
   1c414:	1afffff7 	bne	1c3f8 <CKernelOptions::GetToken()+0x38>
   1c418:	e3a0c000 	mov	ip, #0
   1c41c:	e2822002 	add	r2, r2, #2
   1c420:	e580280c 	str	r2, [r0, #2060]	; 0x80c
   1c424:	e5c1c000 	strb	ip, [r1]
   1c428:	e1a00003 	mov	r0, r3
   1c42c:	e12fff1e 	bx	lr
   1c430:	e3a03000 	mov	r3, #0
   1c434:	e1a00003 	mov	r0, r3
   1c438:	e12fff1e 	bx	lr

0001c43c <CKernelOptions::CKernelOptions()>:
   1c43c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c440:	e3a02004 	mov	r2, #4
   1c444:	e1a04000 	mov	r4, r0
   1c448:	e3a05000 	mov	r5, #0
   1c44c:	e3a0303c 	mov	r3, #60	; 0x3c
   1c450:	e2807e81 	add	r7, r0, #2064	; 0x810
   1c454:	e2877008 	add	r7, r7, #8
   1c458:	e580282c 	str	r2, [r0, #2092]	; 0x82c
   1c45c:	e5803854 	str	r3, [r0, #2132]	; 0x854
   1c460:	e24dd014 	sub	sp, sp, #20
   1c464:	e59f1348 	ldr	r1, [pc, #840]	; 1c7b4 <CKernelOptions::CKernelOptions()+0x378>
   1c468:	e1a00007 	mov	r0, r7
   1c46c:	e5845810 	str	r5, [r4, #2064]	; 0x810
   1c470:	e5845814 	str	r5, [r4, #2068]	; 0x814
   1c474:	e5845834 	str	r5, [r4, #2100]	; 0x834
   1c478:	e584584c 	str	r5, [r4, #2124]	; 0x84c
   1c47c:	e5c45850 	strb	r5, [r4, #2128]	; 0x850
   1c480:	e2849e83 	add	r9, r4, #2096	; 0x830
   1c484:	eb0010f6 	bl	20864 <strcpy>
   1c488:	e59f1328 	ldr	r1, [pc, #808]	; 1c7b8 <CKernelOptions::CKernelOptions()+0x37c>
   1c48c:	e1a00009 	mov	r0, r9
   1c490:	eb0010f3 	bl	20864 <strcpy>
   1c494:	e59f3320 	ldr	r3, [pc, #800]	; 1c7bc <CKernelOptions::CKernelOptions()+0x380>
   1c498:	e5c45838 	strb	r5, [r4, #2104]	; 0x838
   1c49c:	e28d000c 	add	r0, sp, #12
   1c4a0:	e5834000 	str	r4, [r3]
   1c4a4:	ebfff74e 	bl	1a1e4 <CBcmPropertyTags::CBcmPropertyTags()>
   1c4a8:	e58d5000 	str	r5, [sp]
   1c4ac:	e1a02004 	mov	r2, r4
   1c4b0:	e28d000c 	add	r0, sp, #12
   1c4b4:	e59f3304 	ldr	r3, [pc, #772]	; 1c7c0 <CKernelOptions::CKernelOptions()+0x384>
   1c4b8:	e59f1304 	ldr	r1, [pc, #772]	; 1c7c4 <CKernelOptions::CKernelOptions()+0x388>
   1c4bc:	ebfff79f 	bl	1a340 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   1c4c0:	e1500005 	cmp	r0, r5
   1c4c4:	0a000037 	beq	1c5a8 <CKernelOptions::CKernelOptions()+0x16c>
   1c4c8:	e5943008 	ldr	r3, [r4, #8]
   1c4cc:	e3530b02 	cmp	r3, #2048	; 0x800
   1c4d0:	2a000034 	bcs	1c5a8 <CKernelOptions::CKernelOptions()+0x16c>
   1c4d4:	e0843003 	add	r3, r4, r3
   1c4d8:	e284200c 	add	r2, r4, #12
   1c4dc:	e59f82e4 	ldr	r8, [pc, #740]	; 1c7c8 <CKernelOptions::CKernelOptions()+0x38c>
   1c4e0:	e59fa2e4 	ldr	sl, [pc, #740]	; 1c7cc <CKernelOptions::CKernelOptions()+0x390>
   1c4e4:	e5c3500c 	strb	r5, [r3, #12]
   1c4e8:	e584280c 	str	r2, [r4, #2060]	; 0x80c
   1c4ec:	e1a00004 	mov	r0, r4
   1c4f0:	ebffffb2 	bl	1c3c0 <CKernelOptions::GetToken()>
   1c4f4:	e2506000 	subs	r6, r0, #0
   1c4f8:	0a00002a 	beq	1c5a8 <CKernelOptions::CKernelOptions()+0x16c>
   1c4fc:	e1d630d0 	ldrsb	r3, [r6]
   1c500:	e3530000 	cmp	r3, #0
   1c504:	0a000008 	beq	1c52c <CKernelOptions::CKernelOptions()+0xf0>
   1c508:	e353003d 	cmp	r3, #61	; 0x3d
   1c50c:	e1a05006 	mov	r5, r6
   1c510:	1a000002 	bne	1c520 <CKernelOptions::CKernelOptions()+0xe4>
   1c514:	ea000028 	b	1c5bc <CKernelOptions::CKernelOptions()+0x180>
   1c518:	e353003d 	cmp	r3, #61	; 0x3d
   1c51c:	0a000026 	beq	1c5bc <CKernelOptions::CKernelOptions()+0x180>
   1c520:	e1f530d1 	ldrsb	r3, [r5, #1]!
   1c524:	e3530000 	cmp	r3, #0
   1c528:	1afffffa 	bne	1c518 <CKernelOptions::CKernelOptions()+0xdc>
   1c52c:	e1a01008 	mov	r1, r8
   1c530:	e1a00006 	mov	r0, r6
   1c534:	eb001056 	bl	20694 <strcmp>
   1c538:	e3500000 	cmp	r0, #0
   1c53c:	0affffea 	beq	1c4ec <CKernelOptions::CKernelOptions()+0xb0>
   1c540:	e1a0100a 	mov	r1, sl
   1c544:	e1a00006 	mov	r0, r6
   1c548:	eb001051 	bl	20694 <strcmp>
   1c54c:	e3500000 	cmp	r0, #0
   1c550:	13a0b000 	movne	fp, #0
   1c554:	0affffe4 	beq	1c4ec <CKernelOptions::CKernelOptions()+0xb0>
   1c558:	e59f1270 	ldr	r1, [pc, #624]	; 1c7d0 <CKernelOptions::CKernelOptions()+0x394>
   1c55c:	e1a00006 	mov	r0, r6
   1c560:	eb00104b 	bl	20694 <strcmp>
   1c564:	e2505000 	subs	r5, r0, #0
   1c568:	0a000027 	beq	1c60c <CKernelOptions::CKernelOptions()+0x1d0>
   1c56c:	e59f1260 	ldr	r1, [pc, #608]	; 1c7d4 <CKernelOptions::CKernelOptions()+0x398>
   1c570:	e1a00006 	mov	r0, r6
   1c574:	eb001046 	bl	20694 <strcmp>
   1c578:	e3500000 	cmp	r0, #0
   1c57c:	1a000028 	bne	1c624 <CKernelOptions::CKernelOptions()+0x1e8>
   1c580:	e35b0000 	cmp	fp, #0
   1c584:	0affffd8 	beq	1c4ec <CKernelOptions::CKernelOptions()+0xb0>
   1c588:	e1db30d0 	ldrsb	r3, [fp]
   1c58c:	e3530000 	cmp	r3, #0
   1c590:	0affffd5 	beq	1c4ec <CKernelOptions::CKernelOptions()+0xb0>
   1c594:	e1a0000b 	mov	r0, fp
   1c598:	ebffff50 	bl	1c2e0 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   1c59c:	e3500004 	cmp	r0, #4
   1c5a0:	9584082c 	strls	r0, [r4, #2092]	; 0x82c
   1c5a4:	eaffffd0 	b	1c4ec <CKernelOptions::CKernelOptions()+0xb0>
   1c5a8:	e28d000c 	add	r0, sp, #12
   1c5ac:	ebfff712 	bl	1a1fc <CBcmPropertyTags::~CBcmPropertyTags()>
   1c5b0:	e1a00004 	mov	r0, r4
   1c5b4:	e28dd014 	add	sp, sp, #20
   1c5b8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c5bc:	e3a03000 	mov	r3, #0
   1c5c0:	e1a01008 	mov	r1, r8
   1c5c4:	e5c53000 	strb	r3, [r5]
   1c5c8:	e1a00006 	mov	r0, r6
   1c5cc:	eb001030 	bl	20694 <strcmp>
   1c5d0:	e3500000 	cmp	r0, #0
   1c5d4:	e285b001 	add	fp, r5, #1
   1c5d8:	1a000047 	bne	1c6fc <CKernelOptions::CKernelOptions()+0x2c0>
   1c5dc:	e35b0000 	cmp	fp, #0
   1c5e0:	0affffc1 	beq	1c4ec <CKernelOptions::CKernelOptions()+0xb0>
   1c5e4:	e1d530d1 	ldrsb	r3, [r5, #1]
   1c5e8:	e3530000 	cmp	r3, #0
   1c5ec:	0affffbe 	beq	1c4ec <CKernelOptions::CKernelOptions()+0xb0>
   1c5f0:	e1a0000b 	mov	r0, fp
   1c5f4:	ebffff39 	bl	1c2e0 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   1c5f8:	e59f31d8 	ldr	r3, [pc, #472]	; 1c7d8 <CKernelOptions::CKernelOptions()+0x39c>
   1c5fc:	e2402d0a 	sub	r2, r0, #640	; 0x280
   1c600:	e1520003 	cmp	r2, r3
   1c604:	95840810 	strls	r0, [r4, #2064]	; 0x810
   1c608:	eaffffb7 	b	1c4ec <CKernelOptions::CKernelOptions()+0xb0>
   1c60c:	e1a0100b 	mov	r1, fp
   1c610:	e3a02013 	mov	r2, #19
   1c614:	e1a00007 	mov	r0, r7
   1c618:	eb00109c 	bl	20890 <strncpy>
   1c61c:	e5c4582b 	strb	r5, [r4, #2091]	; 0x82b
   1c620:	eaffffb1 	b	1c4ec <CKernelOptions::CKernelOptions()+0xb0>
   1c624:	e59f11b0 	ldr	r1, [pc, #432]	; 1c7dc <CKernelOptions::CKernelOptions()+0x3a0>
   1c628:	e1a00006 	mov	r0, r6
   1c62c:	eb001018 	bl	20694 <strcmp>
   1c630:	e2505000 	subs	r5, r0, #0
   1c634:	1a000005 	bne	1c650 <CKernelOptions::CKernelOptions()+0x214>
   1c638:	e1a0100b 	mov	r1, fp
   1c63c:	e3a02002 	mov	r2, #2
   1c640:	e1a00009 	mov	r0, r9
   1c644:	eb001091 	bl	20890 <strncpy>
   1c648:	e5c45832 	strb	r5, [r4, #2098]	; 0x832
   1c64c:	eaffffa6 	b	1c4ec <CKernelOptions::CKernelOptions()+0xb0>
   1c650:	e59f1188 	ldr	r1, [pc, #392]	; 1c7e0 <CKernelOptions::CKernelOptions()+0x3a4>
   1c654:	e1a00006 	mov	r0, r6
   1c658:	eb00100d 	bl	20694 <strcmp>
   1c65c:	e3500000 	cmp	r0, #0
   1c660:	1a00000b 	bne	1c694 <CKernelOptions::CKernelOptions()+0x258>
   1c664:	e35b0000 	cmp	fp, #0
   1c668:	0affff9f 	beq	1c4ec <CKernelOptions::CKernelOptions()+0xb0>
   1c66c:	e1db30d0 	ldrsb	r3, [fp]
   1c670:	e3530000 	cmp	r3, #0
   1c674:	0affff9c 	beq	1c4ec <CKernelOptions::CKernelOptions()+0xb0>
   1c678:	e1a0000b 	mov	r0, fp
   1c67c:	ebffff17 	bl	1c2e0 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   1c680:	e59f315c 	ldr	r3, [pc, #348]	; 1c7e4 <CKernelOptions::CKernelOptions()+0x3a8>
   1c684:	e24020c8 	sub	r2, r0, #200	; 0xc8
   1c688:	e1520003 	cmp	r2, r3
   1c68c:	95840834 	strls	r0, [r4, #2100]	; 0x834
   1c690:	eaffff95 	b	1c4ec <CKernelOptions::CKernelOptions()+0xb0>
   1c694:	e59f114c 	ldr	r1, [pc, #332]	; 1c7e8 <CKernelOptions::CKernelOptions()+0x3ac>
   1c698:	e1a00006 	mov	r0, r6
   1c69c:	eb000ffc 	bl	20694 <strcmp>
   1c6a0:	e2505000 	subs	r5, r0, #0
   1c6a4:	1a000005 	bne	1c6c0 <CKernelOptions::CKernelOptions()+0x284>
   1c6a8:	e1a0100b 	mov	r1, fp
   1c6ac:	e3a02013 	mov	r2, #19
   1c6b0:	e2890008 	add	r0, r9, #8
   1c6b4:	eb001075 	bl	20890 <strncpy>
   1c6b8:	e5c4584b 	strb	r5, [r4, #2123]	; 0x84b
   1c6bc:	eaffff8a 	b	1c4ec <CKernelOptions::CKernelOptions()+0xb0>
   1c6c0:	e59f1124 	ldr	r1, [pc, #292]	; 1c7ec <CKernelOptions::CKernelOptions()+0x3b0>
   1c6c4:	e1a00006 	mov	r0, r6
   1c6c8:	eb000ff1 	bl	20694 <strcmp>
   1c6cc:	e3500000 	cmp	r0, #0
   1c6d0:	1a000019 	bne	1c73c <CKernelOptions::CKernelOptions()+0x300>
   1c6d4:	e35b0000 	cmp	fp, #0
   1c6d8:	0affff83 	beq	1c4ec <CKernelOptions::CKernelOptions()+0xb0>
   1c6dc:	e1db30d0 	ldrsb	r3, [fp]
   1c6e0:	e3530000 	cmp	r3, #0
   1c6e4:	0affff80 	beq	1c4ec <CKernelOptions::CKernelOptions()+0xb0>
   1c6e8:	e1a0000b 	mov	r0, fp
   1c6ec:	ebfffefb 	bl	1c2e0 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   1c6f0:	e3500002 	cmp	r0, #2
   1c6f4:	9584084c 	strls	r0, [r4, #2124]	; 0x84c
   1c6f8:	eaffff7b 	b	1c4ec <CKernelOptions::CKernelOptions()+0xb0>
   1c6fc:	e1a0100a 	mov	r1, sl
   1c700:	e1a00006 	mov	r0, r6
   1c704:	eb000fe2 	bl	20694 <strcmp>
   1c708:	e3500000 	cmp	r0, #0
   1c70c:	1affff91 	bne	1c558 <CKernelOptions::CKernelOptions()+0x11c>
   1c710:	e35b0000 	cmp	fp, #0
   1c714:	0affff74 	beq	1c4ec <CKernelOptions::CKernelOptions()+0xb0>
   1c718:	e1d530d1 	ldrsb	r3, [r5, #1]
   1c71c:	e3530000 	cmp	r3, #0
   1c720:	0affff71 	beq	1c4ec <CKernelOptions::CKernelOptions()+0xb0>
   1c724:	e1a0000b 	mov	r0, fp
   1c728:	ebfffeec 	bl	1c2e0 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   1c72c:	e2403e1e 	sub	r3, r0, #480	; 0x1e0
   1c730:	e3530f96 	cmp	r3, #600	; 0x258
   1c734:	95840814 	strls	r0, [r4, #2068]	; 0x814
   1c738:	eaffff6b 	b	1c4ec <CKernelOptions::CKernelOptions()+0xb0>
   1c73c:	e59f10ac 	ldr	r1, [pc, #172]	; 1c7f0 <CKernelOptions::CKernelOptions()+0x3b4>
   1c740:	e1a00006 	mov	r0, r6
   1c744:	eb000fd2 	bl	20694 <strcmp>
   1c748:	e3500000 	cmp	r0, #0
   1c74c:	1a000006 	bne	1c76c <CKernelOptions::CKernelOptions()+0x330>
   1c750:	e1a0000b 	mov	r0, fp
   1c754:	e59f1098 	ldr	r1, [pc, #152]	; 1c7f4 <CKernelOptions::CKernelOptions()+0x3b8>
   1c758:	eb000fcd 	bl	20694 <strcmp>
   1c75c:	e3500000 	cmp	r0, #0
   1c760:	03a03001 	moveq	r3, #1
   1c764:	05c43850 	strbeq	r3, [r4, #2128]	; 0x850
   1c768:	eaffff5f 	b	1c4ec <CKernelOptions::CKernelOptions()+0xb0>
   1c76c:	e1a00006 	mov	r0, r6
   1c770:	e59f1080 	ldr	r1, [pc, #128]	; 1c7f8 <CKernelOptions::CKernelOptions()+0x3bc>
   1c774:	eb000fc6 	bl	20694 <strcmp>
   1c778:	e2903000 	adds	r3, r0, #0
   1c77c:	13a03001 	movne	r3, #1
   1c780:	e35b0000 	cmp	fp, #0
   1c784:	03833001 	orreq	r3, r3, #1
   1c788:	e3530000 	cmp	r3, #0
   1c78c:	1affff56 	bne	1c4ec <CKernelOptions::CKernelOptions()+0xb0>
   1c790:	e1db30d0 	ldrsb	r3, [fp]
   1c794:	e3530000 	cmp	r3, #0
   1c798:	0affff53 	beq	1c4ec <CKernelOptions::CKernelOptions()+0xb0>
   1c79c:	e1a0000b 	mov	r0, fp
   1c7a0:	ebfffece 	bl	1c2e0 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   1c7a4:	e2403028 	sub	r3, r0, #40	; 0x28
   1c7a8:	e3530026 	cmp	r3, #38	; 0x26
   1c7ac:	95840854 	strls	r0, [r4, #2132]	; 0x854
   1c7b0:	eaffff4d 	b	1c4ec <CKernelOptions::CKernelOptions()+0xb0>
   1c7b4:	00027e84 	.word	0x00027e84
   1c7b8:	00027198 	.word	0x00027198
   1c7bc:	000299c4 	.word	0x000299c4
   1c7c0:	0000080c 	.word	0x0000080c
   1c7c4:	00050001 	.word	0x00050001
   1c7c8:	00027ef4 	.word	0x00027ef4
   1c7cc:	00027e8c 	.word	0x00027e8c
   1c7d0:	00027e94 	.word	0x00027e94
   1c7d4:	00027e9c 	.word	0x00027e9c
   1c7d8:	0000053c 	.word	0x0000053c
   1c7dc:	00027ea8 	.word	0x00027ea8
   1c7e0:	00027eb0 	.word	0x00027eb0
   1c7e4:	00001e78 	.word	0x00001e78
   1c7e8:	00027ec0 	.word	0x00027ec0
   1c7ec:	00027ecc 	.word	0x00027ecc
   1c7f0:	00027ed8 	.word	0x00027ed8
   1c7f4:	00027ee0 	.word	0x00027ee0
   1c7f8:	00027ee8 	.word	0x00027ee8

0001c7fc <CKernelOptions::GetOptionValue(char*)>:
   1c7fc:	e1d030d0 	ldrsb	r3, [r0]
   1c800:	e3530000 	cmp	r3, #0
   1c804:	1a000003 	bne	1c818 <CKernelOptions::GetOptionValue(char*)+0x1c>
   1c808:	ea000007 	b	1c82c <CKernelOptions::GetOptionValue(char*)+0x30>
   1c80c:	e1f030d1 	ldrsb	r3, [r0, #1]!
   1c810:	e3530000 	cmp	r3, #0
   1c814:	0a000004 	beq	1c82c <CKernelOptions::GetOptionValue(char*)+0x30>
   1c818:	e353003d 	cmp	r3, #61	; 0x3d
   1c81c:	1afffffa 	bne	1c80c <CKernelOptions::GetOptionValue(char*)+0x10>
   1c820:	e3a02000 	mov	r2, #0
   1c824:	e2803001 	add	r3, r0, #1
   1c828:	e5c02000 	strb	r2, [r0]
   1c82c:	e1a00003 	mov	r0, r3
   1c830:	e12fff1e 	bx	lr

0001c834 <CKernelOptions::GetDecimal(char*)>:
   1c834:	e2503000 	subs	r3, r0, #0
   1c838:	0a000002 	beq	1c848 <CKernelOptions::GetDecimal(char*)+0x14>
   1c83c:	e1d330d0 	ldrsb	r3, [r3]
   1c840:	e3530000 	cmp	r3, #0
   1c844:	1a000001 	bne	1c850 <CKernelOptions::GetDecimal(char*)+0x1c>
   1c848:	e3e00000 	mvn	r0, #0
   1c84c:	e12fff1e 	bx	lr
   1c850:	eafffea2 	b	1c2e0 <CKernelOptions::GetDecimal(char*) [clone .part.0]>

0001c854 <CLogger::CLogger(unsigned int, CTimer*)>:
   1c854:	e92d4010 	push	{r4, lr}
   1c858:	e3a03000 	mov	r3, #0
   1c85c:	e1a04000 	mov	r4, r0
   1c860:	e3a00001 	mov	r0, #1
   1c864:	e884000e 	stm	r4, {r1, r2, r3}
   1c868:	e584300c 	str	r3, [r4, #12]
   1c86c:	e5843010 	str	r3, [r4, #16]
   1c870:	e5843014 	str	r3, [r4, #20]
   1c874:	e58430e4 	str	r3, [r4, #228]	; 0xe4
   1c878:	e58430e8 	str	r3, [r4, #232]	; 0xe8
   1c87c:	e58430f0 	str	r3, [r4, #240]	; 0xf0
   1c880:	e58430f4 	str	r3, [r4, #244]	; 0xf4
   1c884:	e5840018 	str	r0, [r4, #24]
   1c888:	e58400ec 	str	r0, [r4, #236]	; 0xec
   1c88c:	e3a00901 	mov	r0, #16384	; 0x4000
   1c890:	eb0013c4 	bl	217a8 <operator new[](unsigned int)>
   1c894:	e59f300c 	ldr	r3, [pc, #12]	; 1c8a8 <CLogger::CLogger(unsigned int, CTimer*)+0x54>
   1c898:	e584000c 	str	r0, [r4, #12]
   1c89c:	e5834000 	str	r4, [r3]
   1c8a0:	e1a00004 	mov	r0, r4
   1c8a4:	e8bd8010 	pop	{r4, pc}
   1c8a8:	000299c8 	.word	0x000299c8

0001c8ac <CLogger::~CLogger()>:
   1c8ac:	e3a02000 	mov	r2, #0
   1c8b0:	e59f1064 	ldr	r1, [pc, #100]	; 1c91c <CLogger::~CLogger()+0x70>
   1c8b4:	e92d4070 	push	{r4, r5, r6, lr}
   1c8b8:	e59030e8 	ldr	r3, [r0, #232]	; 0xe8
   1c8bc:	e1a04000 	mov	r4, r0
   1c8c0:	e1a06002 	mov	r6, r2
   1c8c4:	e3a05f42 	mov	r5, #264	; 0x108
   1c8c8:	e5812000 	str	r2, [r1]
   1c8cc:	ea000008 	b	1c8f4 <CLogger::~CLogger()+0x48>
   1c8d0:	e591001c 	ldr	r0, [r1, #28]
   1c8d4:	e1a01005 	mov	r1, r5
   1c8d8:	eb0013b5 	bl	217b4 <operator delete(void*, unsigned int)>
   1c8dc:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
   1c8e0:	e2833001 	add	r3, r3, #1
   1c8e4:	e3530032 	cmp	r3, #50	; 0x32
   1c8e8:	e58430e8 	str	r3, [r4, #232]	; 0xe8
   1c8ec:	03a03000 	moveq	r3, #0
   1c8f0:	058460e8 	streq	r6, [r4, #232]	; 0xe8
   1c8f4:	e59420e4 	ldr	r2, [r4, #228]	; 0xe4
   1c8f8:	e0841103 	add	r1, r4, r3, lsl #2
   1c8fc:	e1520003 	cmp	r2, r3
   1c900:	1afffff2 	bne	1c8d0 <CLogger::~CLogger()+0x24>
   1c904:	e594000c 	ldr	r0, [r4, #12]
   1c908:	e3500000 	cmp	r0, #0
   1c90c:	0a000000 	beq	1c914 <CLogger::~CLogger()+0x68>
   1c910:	eb0013a6 	bl	217b0 <operator delete[](void*)>
   1c914:	e1a00004 	mov	r0, r4
   1c918:	e8bd8070 	pop	{r4, r5, r6, pc}
   1c91c:	000299c8 	.word	0x000299c8

0001c920 <CLogger::Get()>:
   1c920:	e59f3004 	ldr	r3, [pc, #4]	; 1c92c <CLogger::Get()+0xc>
   1c924:	e5930000 	ldr	r0, [r3]
   1c928:	e12fff1e 	bx	lr
   1c92c:	000299c8 	.word	0x000299c8

0001c930 <CLogger::Write(char const*)>:
   1c930:	e92d4070 	push	{r4, r5, r6, lr}
   1c934:	e1a04000 	mov	r4, r0
   1c938:	e1a00001 	mov	r0, r1
   1c93c:	e1a05001 	mov	r5, r1
   1c940:	eb000f49 	bl	2066c <strlen>
   1c944:	e1a06000 	mov	r6, r0
   1c948:	e5940008 	ldr	r0, [r4, #8]
   1c94c:	e1a02006 	mov	r2, r6
   1c950:	e5903000 	ldr	r3, [r0]
   1c954:	e1a01005 	mov	r1, r5
   1c958:	e593300c 	ldr	r3, [r3, #12]
   1c95c:	e12fff33 	blx	r3
   1c960:	e5940018 	ldr	r0, [r4, #24]
   1c964:	e3500000 	cmp	r0, #0
   1c968:	1a000018 	bne	1c9d0 <CLogger::Write(char const*)+0xa0>
   1c96c:	e59f2064 	ldr	r2, [pc, #100]	; 1c9d8 <CLogger::Write(char const*)+0xa8>
   1c970:	e0850006 	add	r0, r5, r6
   1c974:	e1550000 	cmp	r5, r0
   1c978:	0a00000f 	beq	1c9bc <CLogger::Write(char const*)+0x8c>
   1c97c:	e0d510d1 	ldrsb	r1, [r5], #1
   1c980:	e351000d 	cmp	r1, #13
   1c984:	0afffffa 	beq	1c974 <CLogger::Write(char const*)+0x44>
   1c988:	e594c010 	ldr	ip, [r4, #16]
   1c98c:	e594e00c 	ldr	lr, [r4, #12]
   1c990:	e7ce100c 	strb	r1, [lr, ip]
   1c994:	e5943010 	ldr	r3, [r4, #16]
   1c998:	e5941014 	ldr	r1, [r4, #20]
   1c99c:	e2833001 	add	r3, r3, #1
   1c9a0:	e0033002 	and	r3, r3, r2
   1c9a4:	e1530001 	cmp	r3, r1
   1c9a8:	e5843010 	str	r3, [r4, #16]
   1c9ac:	1afffff0 	bne	1c974 <CLogger::Write(char const*)+0x44>
   1c9b0:	e2433001 	sub	r3, r3, #1
   1c9b4:	e0033002 	and	r3, r3, r2
   1c9b8:	e5843010 	str	r3, [r4, #16]
   1c9bc:	e5943018 	ldr	r3, [r4, #24]
   1c9c0:	e3530000 	cmp	r3, #0
   1c9c4:	08bd8070 	popeq	{r4, r5, r6, pc}
   1c9c8:	e8bd4070 	pop	{r4, r5, r6, lr}
   1c9cc:	ea001347 	b	216f0 <LeaveCritical>
   1c9d0:	eb001319 	bl	2163c <EnterCritical>
   1c9d4:	eaffffe4 	b	1c96c <CLogger::Write(char const*)+0x3c>
   1c9d8:	00003fff 	.word	0x00003fff

0001c9dc <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)>:
   1c9dc:	e590c000 	ldr	ip, [r0]
   1c9e0:	e152000c 	cmp	r2, ip
   1c9e4:	812fff1e 	bxhi	lr
   1c9e8:	e92d4070 	push	{r4, r5, r6, lr}
   1c9ec:	e1a05003 	mov	r5, r3
   1c9f0:	e3a03000 	mov	r3, #0
   1c9f4:	e24dd0c8 	sub	sp, sp, #200	; 0xc8
   1c9f8:	e1520003 	cmp	r2, r3
   1c9fc:	e1a04000 	mov	r4, r0
   1ca00:	e5cd3000 	strb	r3, [sp]
   1ca04:	0a00000f 	beq	1ca48 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x6c>
   1ca08:	e1a0000d 	mov	r0, sp
   1ca0c:	eb000fb2 	bl	208dc <strcat>
   1ca10:	e1a0000d 	mov	r0, sp
   1ca14:	e59f1088 	ldr	r1, [pc, #136]	; 1caa4 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xc8>
   1ca18:	eb000faf 	bl	208dc <strcat>
   1ca1c:	e1a01005 	mov	r1, r5
   1ca20:	e1a0000d 	mov	r0, sp
   1ca24:	eb000fac 	bl	208dc <strcat>
   1ca28:	e1a0000d 	mov	r0, sp
   1ca2c:	e59f1074 	ldr	r1, [pc, #116]	; 1caa8 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xcc>
   1ca30:	eb000fa9 	bl	208dc <strcat>
   1ca34:	e1a0100d 	mov	r1, sp
   1ca38:	e1a00004 	mov	r0, r4
   1ca3c:	ebffffbb 	bl	1c930 <CLogger::Write(char const*)>
   1ca40:	e28dd0c8 	add	sp, sp, #200	; 0xc8
   1ca44:	e8bd8070 	pop	{r4, r5, r6, pc}
   1ca48:	e1a06001 	mov	r6, r1
   1ca4c:	e1a0000d 	mov	r0, sp
   1ca50:	e59f1054 	ldr	r1, [pc, #84]	; 1caac <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd0>
   1ca54:	eb000f82 	bl	20864 <strcpy>
   1ca58:	e1a01006 	mov	r1, r6
   1ca5c:	e1a0000d 	mov	r0, sp
   1ca60:	eb000f9d 	bl	208dc <strcat>
   1ca64:	e59f1038 	ldr	r1, [pc, #56]	; 1caa4 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xc8>
   1ca68:	e1a0000d 	mov	r0, sp
   1ca6c:	eb000f9a 	bl	208dc <strcat>
   1ca70:	e1a01005 	mov	r1, r5
   1ca74:	e1a0000d 	mov	r0, sp
   1ca78:	eb000f97 	bl	208dc <strcat>
   1ca7c:	e59f102c 	ldr	r1, [pc, #44]	; 1cab0 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd4>
   1ca80:	e1a0000d 	mov	r0, sp
   1ca84:	eb000f94 	bl	208dc <strcat>
   1ca88:	e59f1018 	ldr	r1, [pc, #24]	; 1caa8 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xcc>
   1ca8c:	e1a0000d 	mov	r0, sp
   1ca90:	eb000f91 	bl	208dc <strcat>
   1ca94:	e1a0100d 	mov	r1, sp
   1ca98:	e1a00004 	mov	r0, r4
   1ca9c:	ebffffa3 	bl	1c930 <CLogger::Write(char const*)>
   1caa0:	eb000b26 	bl	1f740 <halt>
   1caa4:	00027f04 	.word	0x00027f04
   1caa8:	000271d4 	.word	0x000271d4
   1caac:	00027efc 	.word	0x00027efc
   1cab0:	00027f08 	.word	0x00027f08

0001cab4 <CLogger::Read(void*, unsigned int)>:
   1cab4:	e92d4070 	push	{r4, r5, r6, lr}
   1cab8:	e1a04000 	mov	r4, r0
   1cabc:	e5900018 	ldr	r0, [r0, #24]
   1cac0:	e1a05001 	mov	r5, r1
   1cac4:	e3500000 	cmp	r0, #0
   1cac8:	e1a06002 	mov	r6, r2
   1cacc:	1a00001c 	bne	1cb44 <CLogger::Read(void*, unsigned int)+0x90>
   1cad0:	e5942010 	ldr	r2, [r4, #16]
   1cad4:	e5943014 	ldr	r3, [r4, #20]
   1cad8:	e1520003 	cmp	r2, r3
   1cadc:	0a000021 	beq	1cb68 <CLogger::Read(void*, unsigned int)+0xb4>
   1cae0:	e1a01005 	mov	r1, r5
   1cae4:	e59f2088 	ldr	r2, [pc, #136]	; 1cb74 <CLogger::Read(void*, unsigned int)+0xc0>
   1cae8:	e3a05000 	mov	r5, #0
   1caec:	ea00000a 	b	1cb1c <CLogger::Read(void*, unsigned int)+0x68>
   1caf0:	e594000c 	ldr	r0, [r4, #12]
   1caf4:	e2855001 	add	r5, r5, #1
   1caf8:	e19030d3 	ldrsb	r3, [r0, r3]
   1cafc:	e4c13001 	strb	r3, [r1], #1
   1cb00:	e5943014 	ldr	r3, [r4, #20]
   1cb04:	e5940010 	ldr	r0, [r4, #16]
   1cb08:	e2833001 	add	r3, r3, #1
   1cb0c:	e0033002 	and	r3, r3, r2
   1cb10:	e1530000 	cmp	r3, r0
   1cb14:	e5843014 	str	r3, [r4, #20]
   1cb18:	0a000001 	beq	1cb24 <CLogger::Read(void*, unsigned int)+0x70>
   1cb1c:	e1550006 	cmp	r5, r6
   1cb20:	1afffff2 	bne	1caf0 <CLogger::Read(void*, unsigned int)+0x3c>
   1cb24:	e5943018 	ldr	r3, [r4, #24]
   1cb28:	e3530000 	cmp	r3, #0
   1cb2c:	1a000001 	bne	1cb38 <CLogger::Read(void*, unsigned int)+0x84>
   1cb30:	e1a00005 	mov	r0, r5
   1cb34:	e8bd8070 	pop	{r4, r5, r6, pc}
   1cb38:	eb0012ec 	bl	216f0 <LeaveCritical>
   1cb3c:	e1a00005 	mov	r0, r5
   1cb40:	e8bd8070 	pop	{r4, r5, r6, pc}
   1cb44:	eb0012bc 	bl	2163c <EnterCritical>
   1cb48:	e5942010 	ldr	r2, [r4, #16]
   1cb4c:	e5943014 	ldr	r3, [r4, #20]
   1cb50:	e1520003 	cmp	r2, r3
   1cb54:	1affffe1 	bne	1cae0 <CLogger::Read(void*, unsigned int)+0x2c>
   1cb58:	e5943018 	ldr	r3, [r4, #24]
   1cb5c:	e3530000 	cmp	r3, #0
   1cb60:	0a000000 	beq	1cb68 <CLogger::Read(void*, unsigned int)+0xb4>
   1cb64:	eb0012e1 	bl	216f0 <LeaveCritical>
   1cb68:	e3e05000 	mvn	r5, #0
   1cb6c:	e1a00005 	mov	r0, r5
   1cb70:	e8bd8070 	pop	{r4, r5, r6, pc}
   1cb74:	00003fff 	.word	0x00003fff

0001cb78 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>:
   1cb78:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   1cb7c:	e1a05000 	mov	r5, r0
   1cb80:	e24dd00c 	sub	sp, sp, #12
   1cb84:	e3a00f42 	mov	r0, #264	; 0x108
   1cb88:	e1a07003 	mov	r7, r3
   1cb8c:	e1a09002 	mov	r9, r2
   1cb90:	e1a08001 	mov	r8, r1
   1cb94:	eb001302 	bl	217a4 <operator new(unsigned int)>
   1cb98:	e3a06000 	mov	r6, #0
   1cb9c:	e1a04000 	mov	r4, r0
   1cba0:	e1a01008 	mov	r1, r8
   1cba4:	e3a02032 	mov	r2, #50	; 0x32
   1cba8:	e4c09001 	strb	r9, [r0], #1
   1cbac:	eb000f37 	bl	20890 <strncpy>
   1cbb0:	e1a01007 	mov	r1, r7
   1cbb4:	e2840033 	add	r0, r4, #51	; 0x33
   1cbb8:	e3a020c8 	mov	r2, #200	; 0xc8
   1cbbc:	e5c46032 	strb	r6, [r4, #50]	; 0x32
   1cbc0:	eb000f32 	bl	20890 <strncpy>
   1cbc4:	e5950004 	ldr	r0, [r5, #4]
   1cbc8:	e5c460fa 	strb	r6, [r4, #250]	; 0xfa
   1cbcc:	e1500006 	cmp	r0, r6
   1cbd0:	0a000004 	beq	1cbe8 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x70>
   1cbd4:	e28d2004 	add	r2, sp, #4
   1cbd8:	e1a0100d 	mov	r1, sp
   1cbdc:	eb000bb2 	bl	1faac <CTimer::GetLocalTime(unsigned int*, unsigned int*)>
   1cbe0:	e1500006 	cmp	r0, r6
   1cbe4:	1a000021 	bne	1cc70 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xf8>
   1cbe8:	e3a03000 	mov	r3, #0
   1cbec:	e59500ec 	ldr	r0, [r5, #236]	; 0xec
   1cbf0:	e58430fc 	str	r3, [r4, #252]	; 0xfc
   1cbf4:	e3500000 	cmp	r0, #0
   1cbf8:	e5843100 	str	r3, [r4, #256]	; 0x100
   1cbfc:	e5843104 	str	r3, [r4, #260]	; 0x104
   1cc00:	1a000027 	bne	1cca4 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x12c>
   1cc04:	e59520e4 	ldr	r2, [r5, #228]	; 0xe4
   1cc08:	e2823001 	add	r3, r2, #1
   1cc0c:	e3530032 	cmp	r3, #50	; 0x32
   1cc10:	e0852102 	add	r2, r5, r2, lsl #2
   1cc14:	e582401c 	str	r4, [r2, #28]
   1cc18:	03a02000 	moveq	r2, #0
   1cc1c:	01a03002 	moveq	r3, r2
   1cc20:	058520e4 	streq	r2, [r5, #228]	; 0xe4
   1cc24:	e59520e8 	ldr	r2, [r5, #232]	; 0xe8
   1cc28:	158530e4 	strne	r3, [r5, #228]	; 0xe4
   1cc2c:	e1520003 	cmp	r2, r3
   1cc30:	0a00001e 	beq	1ccb0 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x138>
   1cc34:	e3500000 	cmp	r0, #0
   1cc38:	13a04000 	movne	r4, #0
   1cc3c:	0a000005 	beq	1cc58 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xe0>
   1cc40:	eb0012aa 	bl	216f0 <LeaveCritical>
   1cc44:	e3540000 	cmp	r4, #0
   1cc48:	0a000002 	beq	1cc58 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xe0>
   1cc4c:	e1a00004 	mov	r0, r4
   1cc50:	e3a01f42 	mov	r1, #264	; 0x108
   1cc54:	eb0012d6 	bl	217b4 <operator delete(void*, unsigned int)>
   1cc58:	e59530f0 	ldr	r3, [r5, #240]	; 0xf0
   1cc5c:	e3530000 	cmp	r3, #0
   1cc60:	0a000000 	beq	1cc68 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xf0>
   1cc64:	e12fff33 	blx	r3
   1cc68:	e28dd00c 	add	sp, sp, #12
   1cc6c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1cc70:	e59d3004 	ldr	r3, [sp, #4]
   1cc74:	e59f105c 	ldr	r1, [pc, #92]	; 1ccd8 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x160>
   1cc78:	e59d2000 	ldr	r2, [sp]
   1cc7c:	e0831391 	umull	r1, r3, r1, r3
   1cc80:	e1a036a3 	lsr	r3, r3, #13
   1cc84:	e5950004 	ldr	r0, [r5, #4]
   1cc88:	e5843100 	str	r3, [r4, #256]	; 0x100
   1cc8c:	e58420fc 	str	r2, [r4, #252]	; 0xfc
   1cc90:	eb000b57 	bl	1f9f4 <CTimer::GetTimeZone() const>
   1cc94:	e5840104 	str	r0, [r4, #260]	; 0x104
   1cc98:	e59500ec 	ldr	r0, [r5, #236]	; 0xec
   1cc9c:	e3500000 	cmp	r0, #0
   1cca0:	0affffd7 	beq	1cc04 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x8c>
   1cca4:	eb001264 	bl	2163c <EnterCritical>
   1cca8:	e59500ec 	ldr	r0, [r5, #236]	; 0xec
   1ccac:	eaffffd4 	b	1cc04 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x8c>
   1ccb0:	e2832001 	add	r2, r3, #1
   1ccb4:	e3520032 	cmp	r2, #50	; 0x32
   1ccb8:	e0853103 	add	r3, r5, r3, lsl #2
   1ccbc:	e593401c 	ldr	r4, [r3, #28]
   1ccc0:	03a03000 	moveq	r3, #0
   1ccc4:	158520e8 	strne	r2, [r5, #232]	; 0xe8
   1ccc8:	058530e8 	streq	r3, [r5, #232]	; 0xe8
   1cccc:	e3500000 	cmp	r0, #0
   1ccd0:	0affffdb 	beq	1cc44 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xcc>
   1ccd4:	eaffffd9 	b	1cc40 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xc8>
   1ccd8:	d1b71759 	.word	0xd1b71759

0001ccdc <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)>:
   1ccdc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1cce0:	e1a04000 	mov	r4, r0
   1cce4:	e59000ec 	ldr	r0, [r0, #236]	; 0xec
   1cce8:	e1a07001 	mov	r7, r1
   1ccec:	e3500000 	cmp	r0, #0
   1ccf0:	e1a08002 	mov	r8, r2
   1ccf4:	e1a06003 	mov	r6, r3
   1ccf8:	1a000022 	bne	1cd88 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xac>
   1ccfc:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
   1cd00:	e59420e4 	ldr	r2, [r4, #228]	; 0xe4
   1cd04:	e1530002 	cmp	r3, r2
   1cd08:	0a000028 	beq	1cdb0 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xd4>
   1cd0c:	e283c001 	add	ip, r3, #1
   1cd10:	e35c0032 	cmp	ip, #50	; 0x32
   1cd14:	e0843103 	add	r3, r4, r3, lsl #2
   1cd18:	e593501c 	ldr	r5, [r3, #28]
   1cd1c:	03a03000 	moveq	r3, #0
   1cd20:	1584c0e8 	strne	ip, [r4, #232]	; 0xe8
   1cd24:	058430e8 	streq	r3, [r4, #232]	; 0xe8
   1cd28:	e3500000 	cmp	r0, #0
   1cd2c:	1a000021 	bne	1cdb8 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xdc>
   1cd30:	e1a01005 	mov	r1, r5
   1cd34:	e4d12001 	ldrb	r2, [r1], #1
   1cd38:	e1a00008 	mov	r0, r8
   1cd3c:	e5c72000 	strb	r2, [r7]
   1cd40:	eb000ec7 	bl	20864 <strcpy>
   1cd44:	e2851033 	add	r1, r5, #51	; 0x33
   1cd48:	e1a00006 	mov	r0, r6
   1cd4c:	eb000ec4 	bl	20864 <strcpy>
   1cd50:	e59520fc 	ldr	r2, [r5, #252]	; 0xfc
   1cd54:	e59d1018 	ldr	r1, [sp, #24]
   1cd58:	e5953100 	ldr	r3, [r5, #256]	; 0x100
   1cd5c:	e5812000 	str	r2, [r1]
   1cd60:	e59d201c 	ldr	r2, [sp, #28]
   1cd64:	e1a00005 	mov	r0, r5
   1cd68:	e5823000 	str	r3, [r2]
   1cd6c:	e5953104 	ldr	r3, [r5, #260]	; 0x104
   1cd70:	e59d2020 	ldr	r2, [sp, #32]
   1cd74:	e3a01f42 	mov	r1, #264	; 0x108
   1cd78:	e5823000 	str	r3, [r2]
   1cd7c:	eb00128c 	bl	217b4 <operator delete(void*, unsigned int)>
   1cd80:	e3a00001 	mov	r0, #1
   1cd84:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1cd88:	eb00122b 	bl	2163c <EnterCritical>
   1cd8c:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
   1cd90:	e59420e4 	ldr	r2, [r4, #228]	; 0xe4
   1cd94:	e1520003 	cmp	r2, r3
   1cd98:	159400ec 	ldrne	r0, [r4, #236]	; 0xec
   1cd9c:	1affffda 	bne	1cd0c <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x30>
   1cda0:	e59430ec 	ldr	r3, [r4, #236]	; 0xec
   1cda4:	e3530000 	cmp	r3, #0
   1cda8:	0a000000 	beq	1cdb0 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xd4>
   1cdac:	eb00124f 	bl	216f0 <LeaveCritical>
   1cdb0:	e3a00000 	mov	r0, #0
   1cdb4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1cdb8:	eb00124c 	bl	216f0 <LeaveCritical>
   1cdbc:	eaffffdb 	b	1cd30 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x54>

0001cdc0 <CLogger::RegisterEventNotificationHandler(void (*)())>:
   1cdc0:	e58010f0 	str	r1, [r0, #240]	; 0xf0
   1cdc4:	e12fff1e 	bx	lr

0001cdc8 <CLogger::RegisterPanicHandler(void (*)())>:
   1cdc8:	e58010f4 	str	r1, [r0, #244]	; 0xf4
   1cdcc:	e12fff1e 	bx	lr

0001cdd0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>:
   1cdd0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1cdd4:	e1a07003 	mov	r7, r3
   1cdd8:	e24dd024 	sub	sp, sp, #36	; 0x24
   1cddc:	e1a04000 	mov	r4, r0
   1cde0:	e1a0000d 	mov	r0, sp
   1cde4:	e1a05002 	mov	r5, r2
   1cde8:	e1a06001 	mov	r6, r1
   1cdec:	eb000658 	bl	1e754 <CString::CString()>
   1cdf0:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
   1cdf4:	e1a01007 	mov	r1, r7
   1cdf8:	e1a0000d 	mov	r0, sp
   1cdfc:	eb000821 	bl	1ee88 <CString::FormatV(char const*, std::__va_list)>
   1ce00:	e1a0000d 	mov	r0, sp
   1ce04:	eb000668 	bl	1e7ac <CString::operator char const*() const>
   1ce08:	e1a02005 	mov	r2, r5
   1ce0c:	e1a03000 	mov	r3, r0
   1ce10:	e1a01006 	mov	r1, r6
   1ce14:	e1a00004 	mov	r0, r4
   1ce18:	ebffff56 	bl	1cb78 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>
   1ce1c:	e5943000 	ldr	r3, [r4]
   1ce20:	e1550003 	cmp	r5, r3
   1ce24:	8a00002c 	bhi	1cedc <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x10c>
   1ce28:	e28d0010 	add	r0, sp, #16
   1ce2c:	eb000648 	bl	1e754 <CString::CString()>
   1ce30:	e3550000 	cmp	r5, #0
   1ce34:	0a00002c 	beq	1ceec <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x11c>
   1ce38:	e5940004 	ldr	r0, [r4, #4]
   1ce3c:	e3500000 	cmp	r0, #0
   1ce40:	0a00004a 	beq	1cf70 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1a0>
   1ce44:	eb000b89 	bl	1fc70 <CTimer::GetTimeString()>
   1ce48:	e2507000 	subs	r7, r0, #0
   1ce4c:	0a000047 	beq	1cf70 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1a0>
   1ce50:	e1a00007 	mov	r0, r7
   1ce54:	eb000654 	bl	1e7ac <CString::operator char const*() const>
   1ce58:	e1a01000 	mov	r1, r0
   1ce5c:	e28d0010 	add	r0, sp, #16
   1ce60:	eb000683 	bl	1e874 <CString::Append(char const*)>
   1ce64:	e59f1144 	ldr	r1, [pc, #324]	; 1cfb0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e0>
   1ce68:	e28d0010 	add	r0, sp, #16
   1ce6c:	eb000680 	bl	1e874 <CString::Append(char const*)>
   1ce70:	e5973000 	ldr	r3, [r7]
   1ce74:	e1a00007 	mov	r0, r7
   1ce78:	e5933004 	ldr	r3, [r3, #4]
   1ce7c:	e12fff33 	blx	r3
   1ce80:	e1a01006 	mov	r1, r6
   1ce84:	e28d0010 	add	r0, sp, #16
   1ce88:	eb000679 	bl	1e874 <CString::Append(char const*)>
   1ce8c:	e59f1120 	ldr	r1, [pc, #288]	; 1cfb4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e4>
   1ce90:	e28d0010 	add	r0, sp, #16
   1ce94:	eb000676 	bl	1e874 <CString::Append(char const*)>
   1ce98:	e1a0000d 	mov	r0, sp
   1ce9c:	eb000642 	bl	1e7ac <CString::operator char const*() const>
   1cea0:	e1a01000 	mov	r1, r0
   1cea4:	e28d0010 	add	r0, sp, #16
   1cea8:	eb000671 	bl	1e874 <CString::Append(char const*)>
   1ceac:	e3550000 	cmp	r5, #0
   1ceb0:	0a00001e 	beq	1cf30 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x160>
   1ceb4:	e59f10fc 	ldr	r1, [pc, #252]	; 1cfb8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e8>
   1ceb8:	e28d0010 	add	r0, sp, #16
   1cebc:	eb00066c 	bl	1e874 <CString::Append(char const*)>
   1cec0:	e28d0010 	add	r0, sp, #16
   1cec4:	eb000638 	bl	1e7ac <CString::operator char const*() const>
   1cec8:	e1a01000 	mov	r1, r0
   1cecc:	e1a00004 	mov	r0, r4
   1ced0:	ebfffe96 	bl	1c930 <CLogger::Write(char const*)>
   1ced4:	e28d0010 	add	r0, sp, #16
   1ced8:	eb0005ea 	bl	1e688 <CString::~CString()>
   1cedc:	e1a0000d 	mov	r0, sp
   1cee0:	eb0005e8 	bl	1e688 <CString::~CString()>
   1cee4:	e28dd024 	add	sp, sp, #36	; 0x24
   1cee8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1ceec:	e59f10c8 	ldr	r1, [pc, #200]	; 1cfbc <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1ec>
   1cef0:	e28d0010 	add	r0, sp, #16
   1cef4:	eb000632 	bl	1e7c4 <CString::operator=(char const*)>
   1cef8:	e5940004 	ldr	r0, [r4, #4]
   1cefc:	e3500000 	cmp	r0, #0
   1cf00:	1a000026 	bne	1cfa0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1d0>
   1cf04:	e1a01006 	mov	r1, r6
   1cf08:	e28d0010 	add	r0, sp, #16
   1cf0c:	eb000658 	bl	1e874 <CString::Append(char const*)>
   1cf10:	e59f109c 	ldr	r1, [pc, #156]	; 1cfb4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e4>
   1cf14:	e28d0010 	add	r0, sp, #16
   1cf18:	eb000655 	bl	1e874 <CString::Append(char const*)>
   1cf1c:	e1a0000d 	mov	r0, sp
   1cf20:	eb000621 	bl	1e7ac <CString::operator char const*() const>
   1cf24:	e1a01000 	mov	r1, r0
   1cf28:	e28d0010 	add	r0, sp, #16
   1cf2c:	eb000650 	bl	1e874 <CString::Append(char const*)>
   1cf30:	e59f1088 	ldr	r1, [pc, #136]	; 1cfc0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1f0>
   1cf34:	e28d0010 	add	r0, sp, #16
   1cf38:	eb00064d 	bl	1e874 <CString::Append(char const*)>
   1cf3c:	e59f1074 	ldr	r1, [pc, #116]	; 1cfb8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e8>
   1cf40:	e28d0010 	add	r0, sp, #16
   1cf44:	eb00064a 	bl	1e874 <CString::Append(char const*)>
   1cf48:	e28d0010 	add	r0, sp, #16
   1cf4c:	eb000616 	bl	1e7ac <CString::operator char const*() const>
   1cf50:	e1a01000 	mov	r1, r0
   1cf54:	e1a00004 	mov	r0, r4
   1cf58:	ebfffe74 	bl	1c930 <CLogger::Write(char const*)>
   1cf5c:	e59430f4 	ldr	r3, [r4, #244]	; 0xf4
   1cf60:	e3530000 	cmp	r3, #0
   1cf64:	0a000000 	beq	1cf6c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x19c>
   1cf68:	e12fff33 	blx	r3
   1cf6c:	eb0009f3 	bl	1f740 <halt>
   1cf70:	e1a01006 	mov	r1, r6
   1cf74:	e28d0010 	add	r0, sp, #16
   1cf78:	eb00063d 	bl	1e874 <CString::Append(char const*)>
   1cf7c:	e59f1030 	ldr	r1, [pc, #48]	; 1cfb4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e4>
   1cf80:	e28d0010 	add	r0, sp, #16
   1cf84:	eb00063a 	bl	1e874 <CString::Append(char const*)>
   1cf88:	e1a0000d 	mov	r0, sp
   1cf8c:	eb000606 	bl	1e7ac <CString::operator char const*() const>
   1cf90:	e1a01000 	mov	r1, r0
   1cf94:	e28d0010 	add	r0, sp, #16
   1cf98:	eb000635 	bl	1e874 <CString::Append(char const*)>
   1cf9c:	eaffffc4 	b	1ceb4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xe4>
   1cfa0:	eb000b32 	bl	1fc70 <CTimer::GetTimeString()>
   1cfa4:	e2507000 	subs	r7, r0, #0
   1cfa8:	1affffa8 	bne	1ce50 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x80>
   1cfac:	eaffffd4 	b	1cf04 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x134>
   1cfb0:	000271c4 	.word	0x000271c4
   1cfb4:	00027f04 	.word	0x00027f04
   1cfb8:	000271d4 	.word	0x000271d4
   1cfbc:	00027efc 	.word	0x00027efc
   1cfc0:	00027f08 	.word	0x00027f08

0001cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>:
   1cfc4:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)
   1cfc8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   1cfcc:	e24dd010 	sub	sp, sp, #16
   1cfd0:	e28dc018 	add	ip, sp, #24
   1cfd4:	e58dc000 	str	ip, [sp]
   1cfd8:	e59d3014 	ldr	r3, [sp, #20]
   1cfdc:	e58dc00c 	str	ip, [sp, #12]
   1cfe0:	ebffff7a 	bl	1cdd0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
   1cfe4:	e28dd010 	add	sp, sp, #16
   1cfe8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   1cfec:	e28dd004 	add	sp, sp, #4
   1cff0:	e12fff1e 	bx	lr

0001cff4 <CLogger::Initialize(CDevice*)>:
   1cff4:	e92d4010 	push	{r4, lr}
   1cff8:	e5801008 	str	r1, [r0, #8]
   1cffc:	e24dd008 	sub	sp, sp, #8
   1d000:	e1a04000 	mov	r4, r0
   1d004:	eb000102 	bl	1d414 <CMachineInfo::Get()>
   1d008:	eb00008b 	bl	1d23c <CMachineInfo::GetMachineName() const>
   1d00c:	e59f301c 	ldr	r3, [pc, #28]	; 1d030 <CLogger::Initialize(CDevice*)+0x3c>
   1d010:	e58d0000 	str	r0, [sp]
   1d014:	e3a02003 	mov	r2, #3
   1d018:	e1a00004 	mov	r0, r4
   1d01c:	e59f1010 	ldr	r1, [pc, #16]	; 1d034 <CLogger::Initialize(CDevice*)+0x40>
   1d020:	ebffffe7 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1d024:	e3a00001 	mov	r0, #1
   1d028:	e28dd008 	add	sp, sp, #8
   1d02c:	e8bd8010 	pop	{r4, pc}
   1d030:	00027f10 	.word	0x00027f10
   1d034:	00027f28 	.word	0x00027f28

0001d038 <CMachineInfo::CMachineInfo()>:
   1d038:	e3a03000 	mov	r3, #0
   1d03c:	e92d4030 	push	{r4, r5, lr}
   1d040:	e3a01003 	mov	r1, #3
   1d044:	e1a04000 	mov	r4, r0
   1d048:	e3a0000e 	mov	r0, #14
   1d04c:	e59f21a8 	ldr	r2, [pc, #424]	; 1d1fc <CMachineInfo::CMachineInfo()+0x1c4>
   1d050:	e24dd024 	sub	sp, sp, #36	; 0x24
   1d054:	e5925000 	ldr	r5, [r2]
   1d058:	e5c40004 	strb	r0, [r4, #4]
   1d05c:	e1550003 	cmp	r5, r3
   1d060:	e5c41010 	strb	r1, [r4, #16]
   1d064:	e5843000 	str	r3, [r4]
   1d068:	e5843008 	str	r3, [r4, #8]
   1d06c:	e584300c 	str	r3, [r4, #12]
   1d070:	e5843014 	str	r3, [r4, #20]
   1d074:	0a00000e 	beq	1d0b4 <CMachineInfo::CMachineInfo()+0x7c>
   1d078:	e595e000 	ldr	lr, [r5]
   1d07c:	e5d5c004 	ldrb	ip, [r5, #4]
   1d080:	e5950008 	ldr	r0, [r5, #8]
   1d084:	e595100c 	ldr	r1, [r5, #12]
   1d088:	e5d52010 	ldrb	r2, [r5, #16]
   1d08c:	e5953014 	ldr	r3, [r5, #20]
   1d090:	e584e000 	str	lr, [r4]
   1d094:	e5c4c004 	strb	ip, [r4, #4]
   1d098:	e5840008 	str	r0, [r4, #8]
   1d09c:	e584100c 	str	r1, [r4, #12]
   1d0a0:	e5c42010 	strb	r2, [r4, #16]
   1d0a4:	e5843014 	str	r3, [r4, #20]
   1d0a8:	e1a00004 	mov	r0, r4
   1d0ac:	e28dd024 	add	sp, sp, #36	; 0x24
   1d0b0:	e8bd8030 	pop	{r4, r5, pc}
   1d0b4:	e28d000c 	add	r0, sp, #12
   1d0b8:	e5824000 	str	r4, [r2]
   1d0bc:	ebfff448 	bl	1a1e4 <CBcmPropertyTags::CBcmPropertyTags()>
   1d0c0:	e3a03010 	mov	r3, #16
   1d0c4:	e58d5000 	str	r5, [sp]
   1d0c8:	e28d000c 	add	r0, sp, #12
   1d0cc:	e08d2003 	add	r2, sp, r3
   1d0d0:	e59f1128 	ldr	r1, [pc, #296]	; 1d200 <CMachineInfo::CMachineInfo()+0x1c8>
   1d0d4:	ebfff499 	bl	1a340 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   1d0d8:	e3500000 	cmp	r0, #0
   1d0dc:	0a00000c 	beq	1d114 <CMachineInfo::CMachineInfo()+0xdc>
   1d0e0:	e59d101c 	ldr	r1, [sp, #28]
   1d0e4:	e2113502 	ands	r3, r1, #8388608	; 0x800000
   1d0e8:	e5841000 	str	r1, [r4]
   1d0ec:	1a00000b 	bne	1d120 <CMachineInfo::CMachineInfo()+0xe8>
   1d0f0:	e3a02002 	mov	r2, #2
   1d0f4:	e59f0108 	ldr	r0, [pc, #264]	; 1d204 <CMachineInfo::CMachineInfo()+0x1cc>
   1d0f8:	ea000000 	b	1d100 <CMachineInfo::CMachineInfo()+0xc8>
   1d0fc:	e7902203 	ldr	r2, [r0, r3, lsl #4]
   1d100:	e1510002 	cmp	r1, r2
   1d104:	0a000012 	beq	1d154 <CMachineInfo::CMachineInfo()+0x11c>
   1d108:	e2833001 	add	r3, r3, #1
   1d10c:	e3530011 	cmp	r3, #17
   1d110:	1afffff9 	bne	1d0fc <CMachineInfo::CMachineInfo()+0xc4>
   1d114:	e28d000c 	add	r0, sp, #12
   1d118:	ebfff437 	bl	1a1fc <CBcmPropertyTags::~CBcmPropertyTags()>
   1d11c:	eaffffe1 	b	1d0a8 <CMachineInfo::CMachineInfo()+0x70>
   1d120:	e1a00221 	lsr	r0, r1, #4
   1d124:	e1a03005 	mov	r3, r5
   1d128:	e59f20d8 	ldr	r2, [pc, #216]	; 1d208 <CMachineInfo::CMachineInfo()+0x1d0>
   1d12c:	e6ef0070 	uxtb	r0, r0
   1d130:	ea000000 	b	1d138 <CMachineInfo::CMachineInfo()+0x100>
   1d134:	e512500c 	ldr	r5, [r2, #-12]
   1d138:	e1550000 	cmp	r5, r0
   1d13c:	0a000011 	beq	1d188 <CMachineInfo::CMachineInfo()+0x150>
   1d140:	e2833001 	add	r3, r3, #1
   1d144:	e353000c 	cmp	r3, #12
   1d148:	e282200c 	add	r2, r2, #12
   1d14c:	1afffff8 	bne	1d134 <CMachineInfo::CMachineInfo()+0xfc>
   1d150:	eaffffef 	b	1d114 <CMachineInfo::CMachineInfo()+0xdc>
   1d154:	e3a00001 	mov	r0, #1
   1d158:	e3a01000 	mov	r1, #0
   1d15c:	e59f20a8 	ldr	r2, [pc, #168]	; 1d20c <CMachineInfo::CMachineInfo()+0x1d4>
   1d160:	e5840008 	str	r0, [r4, #8]
   1d164:	e0823203 	add	r3, r2, r3, lsl #4
   1d168:	e5d30094 	ldrb	r0, [r3, #148]	; 0x94
   1d16c:	e5932098 	ldr	r2, [r3, #152]	; 0x98
   1d170:	e593309c 	ldr	r3, [r3, #156]	; 0x9c
   1d174:	e5c40004 	strb	r0, [r4, #4]
   1d178:	e584200c 	str	r2, [r4, #12]
   1d17c:	e5843014 	str	r3, [r4, #20]
   1d180:	e5c41010 	strb	r1, [r4, #16]
   1d184:	eaffffe2 	b	1d114 <CMachineInfo::CMachineInfo()+0xdc>
   1d188:	e3a0cc01 	mov	ip, #256	; 0x100
   1d18c:	e59f2078 	ldr	r2, [pc, #120]	; 1d20c <CMachineInfo::CMachineInfo()+0x1d4>
   1d190:	e0833083 	add	r3, r3, r3, lsl #1
   1d194:	e0823103 	add	r3, r2, r3, lsl #2
   1d198:	e1a00621 	lsr	r0, r1, #12
   1d19c:	e1a02a21 	lsr	r2, r1, #20
   1d1a0:	e2022007 	and	r2, r2, #7
   1d1a4:	e200000f 	and	r0, r0, #15
   1d1a8:	e5d3e004 	ldrb	lr, [r3, #4]
   1d1ac:	e3500002 	cmp	r0, #2
   1d1b0:	e5935008 	ldr	r5, [r3, #8]
   1d1b4:	e201300f 	and	r3, r1, #15
   1d1b8:	e1a0121c 	lsl	r1, ip, r2
   1d1bc:	e5841014 	str	r1, [r4, #20]
   1d1c0:	83a01003 	movhi	r1, #3
   1d1c4:	e5c40010 	strb	r0, [r4, #16]
   1d1c8:	85c41010 	strbhi	r1, [r4, #16]
   1d1cc:	e3520000 	cmp	r2, #0
   1d1d0:	035e0003 	cmpeq	lr, #3
   1d1d4:	e2833001 	add	r3, r3, #1
   1d1d8:	e5c4e004 	strb	lr, [r4, #4]
   1d1dc:	e5845008 	str	r5, [r4, #8]
   1d1e0:	e584300c 	str	r3, [r4, #12]
   1d1e4:	1affffca 	bne	1d114 <CMachineInfo::CMachineInfo()+0xdc>
   1d1e8:	e3530001 	cmp	r3, #1
   1d1ec:	13a03002 	movne	r3, #2
   1d1f0:	03a03001 	moveq	r3, #1
   1d1f4:	e5c43004 	strb	r3, [r4, #4]
   1d1f8:	eaffffc5 	b	1d114 <CMachineInfo::CMachineInfo()+0xdc>
   1d1fc:	000299cc 	.word	0x000299cc
   1d200:	00010002 	.word	0x00010002
   1d204:	00027fc0 	.word	0x00027fc0
   1d208:	00027f3c 	.word	0x00027f3c
   1d20c:	00027f30 	.word	0x00027f30

0001d210 <CMachineInfo::~CMachineInfo()>:
   1d210:	e3a0200e 	mov	r2, #14
   1d214:	e59f3014 	ldr	r3, [pc, #20]	; 1d230 <CMachineInfo::~CMachineInfo()+0x20>
   1d218:	e5c02004 	strb	r2, [r0, #4]
   1d21c:	e5932000 	ldr	r2, [r3]
   1d220:	e1500002 	cmp	r0, r2
   1d224:	03a02000 	moveq	r2, #0
   1d228:	05832000 	streq	r2, [r3]
   1d22c:	e12fff1e 	bx	lr
   1d230:	000299cc 	.word	0x000299cc

0001d234 <CMachineInfo::GetMachineModel() const>:
   1d234:	e5d00004 	ldrb	r0, [r0, #4]
   1d238:	e12fff1e 	bx	lr

0001d23c <CMachineInfo::GetMachineName() const>:
   1d23c:	e5d02004 	ldrb	r2, [r0, #4]
   1d240:	e59f3008 	ldr	r3, [pc, #8]	; 1d250 <CMachineInfo::GetMachineName() const+0x14>
   1d244:	e0833102 	add	r3, r3, r2, lsl #2
   1d248:	e59301a0 	ldr	r0, [r3, #416]	; 0x1a0
   1d24c:	e12fff1e 	bx	lr
   1d250:	00027f30 	.word	0x00027f30

0001d254 <CMachineInfo::GetModelMajor() const>:
   1d254:	e5900008 	ldr	r0, [r0, #8]
   1d258:	e12fff1e 	bx	lr

0001d25c <CMachineInfo::GetModelRevision() const>:
   1d25c:	e590000c 	ldr	r0, [r0, #12]
   1d260:	e12fff1e 	bx	lr

0001d264 <CMachineInfo::GetSoCType() const>:
   1d264:	e5d00010 	ldrb	r0, [r0, #16]
   1d268:	e12fff1e 	bx	lr

0001d26c <CMachineInfo::GetRAMSize() const>:
   1d26c:	e5900014 	ldr	r0, [r0, #20]
   1d270:	e12fff1e 	bx	lr

0001d274 <CMachineInfo::GetSoCName() const>:
   1d274:	e5d02010 	ldrb	r2, [r0, #16]
   1d278:	e59f3008 	ldr	r3, [pc, #8]	; 1d288 <CMachineInfo::GetSoCName() const+0x14>
   1d27c:	e0833102 	add	r3, r3, r2, lsl #2
   1d280:	e59301dc 	ldr	r0, [r3, #476]	; 0x1dc
   1d284:	e12fff1e 	bx	lr
   1d288:	00027f30 	.word	0x00027f30

0001d28c <CMachineInfo::GetRevisionRaw() const>:
   1d28c:	e5900000 	ldr	r0, [r0]
   1d290:	e12fff1e 	bx	lr

0001d294 <CMachineInfo::GetClockRate(unsigned int) const>:
   1d294:	e92d4070 	push	{r4, r5, r6, lr}
   1d298:	e24dd020 	sub	sp, sp, #32
   1d29c:	e1a06000 	mov	r6, r0
   1d2a0:	e28d0008 	add	r0, sp, #8
   1d2a4:	e1a05001 	mov	r5, r1
   1d2a8:	ebfff3cd 	bl	1a1e4 <CBcmPropertyTags::CBcmPropertyTags()>
   1d2ac:	e3a03004 	mov	r3, #4
   1d2b0:	e28d0008 	add	r0, sp, #8
   1d2b4:	e58d3000 	str	r3, [sp]
   1d2b8:	e28d200c 	add	r2, sp, #12
   1d2bc:	e3a03014 	mov	r3, #20
   1d2c0:	e59f1078 	ldr	r1, [pc, #120]	; 1d340 <CMachineInfo::GetClockRate(unsigned int) const+0xac>
   1d2c4:	e58d5018 	str	r5, [sp, #24]
   1d2c8:	ebfff41c 	bl	1a340 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   1d2cc:	e2504000 	subs	r4, r0, #0
   1d2d0:	1a00000e 	bne	1d310 <CMachineInfo::GetClockRate(unsigned int) const+0x7c>
   1d2d4:	e3550002 	cmp	r5, #2
   1d2d8:	0a00000e 	beq	1d318 <CMachineInfo::GetClockRate(unsigned int) const+0x84>
   1d2dc:	e3550004 	cmp	r5, #4
   1d2e0:	0a000010 	beq	1d328 <CMachineInfo::GetClockRate(unsigned int) const+0x94>
   1d2e4:	e3550001 	cmp	r5, #1
   1d2e8:	0a00000c 	beq	1d320 <CMachineInfo::GetClockRate(unsigned int) const+0x8c>
   1d2ec:	e59f2050 	ldr	r2, [pc, #80]	; 1d344 <CMachineInfo::GetClockRate(unsigned int) const+0xb0>
   1d2f0:	e59f1050 	ldr	r1, [pc, #80]	; 1d348 <CMachineInfo::GetClockRate(unsigned int) const+0xb4>
   1d2f4:	e59f0050 	ldr	r0, [pc, #80]	; 1d34c <CMachineInfo::GetClockRate(unsigned int) const+0xb8>
   1d2f8:	ebfff395 	bl	1a154 <assertion_failed>
   1d2fc:	e28d0008 	add	r0, sp, #8
   1d300:	ebfff3bd 	bl	1a1fc <CBcmPropertyTags::~CBcmPropertyTags()>
   1d304:	e1a00004 	mov	r0, r4
   1d308:	e28dd020 	add	sp, sp, #32
   1d30c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1d310:	e59d401c 	ldr	r4, [sp, #28]
   1d314:	eafffff8 	b	1d2fc <CMachineInfo::GetClockRate(unsigned int) const+0x68>
   1d318:	e59f4030 	ldr	r4, [pc, #48]	; 1d350 <CMachineInfo::GetClockRate(unsigned int) const+0xbc>
   1d31c:	eafffff6 	b	1d2fc <CMachineInfo::GetClockRate(unsigned int) const+0x68>
   1d320:	e59f402c 	ldr	r4, [pc, #44]	; 1d354 <CMachineInfo::GetClockRate(unsigned int) const+0xc0>
   1d324:	eafffff4 	b	1d2fc <CMachineInfo::GetClockRate(unsigned int) const+0x68>
   1d328:	e5962008 	ldr	r2, [r6, #8]
   1d32c:	e59f3024 	ldr	r3, [pc, #36]	; 1d358 <CMachineInfo::GetClockRate(unsigned int) const+0xc4>
   1d330:	e3520002 	cmp	r2, #2
   1d334:	e59f4020 	ldr	r4, [pc, #32]	; 1d35c <CMachineInfo::GetClockRate(unsigned int) const+0xc8>
   1d338:	81a04003 	movhi	r4, r3
   1d33c:	eaffffee 	b	1d2fc <CMachineInfo::GetClockRate(unsigned int) const+0x68>
   1d340:	00030002 	.word	0x00030002
   1d344:	00000115 	.word	0x00000115
   1d348:	0002811c 	.word	0x0002811c
   1d34c:	000239a8 	.word	0x000239a8
   1d350:	02dc6c00 	.word	0x02dc6c00
   1d354:	05f5e100 	.word	0x05f5e100
   1d358:	11e1a300 	.word	0x11e1a300
   1d35c:	0ee6b280 	.word	0x0ee6b280

0001d360 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>:
   1d360:	e3510036 	cmp	r1, #54	; 0x36
   1d364:	0a00000d 	beq	1d3a0 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x40>
   1d368:	e3510037 	cmp	r1, #55	; 0x37
   1d36c:	1a000004 	bne	1d384 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x24>
   1d370:	e5d00004 	ldrb	r0, [r0, #4]
   1d374:	e3500003 	cmp	r0, #3
   1d378:	c3a00028 	movgt	r0, #40	; 0x28
   1d37c:	d3a0002d 	movle	r0, #45	; 0x2d
   1d380:	e12fff1e 	bx	lr
   1d384:	e92d4010 	push	{r4, lr}
   1d388:	e59f2038 	ldr	r2, [pc, #56]	; 1d3c8 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x68>
   1d38c:	e59f1038 	ldr	r1, [pc, #56]	; 1d3cc <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x6c>
   1d390:	e59f0038 	ldr	r0, [pc, #56]	; 1d3d0 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x70>
   1d394:	ebfff36e 	bl	1a154 <assertion_failed>
   1d398:	e3a00000 	mov	r0, #0
   1d39c:	e8bd8010 	pop	{r4, pc}
   1d3a0:	e5d03004 	ldrb	r3, [r0, #4]
   1d3a4:	e3530003 	cmp	r3, #3
   1d3a8:	ca000001 	bgt	1d3b4 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x54>
   1d3ac:	e3a00028 	mov	r0, #40	; 0x28
   1d3b0:	e12fff1e 	bx	lr
   1d3b4:	e5900008 	ldr	r0, [r0, #8]
   1d3b8:	e3500002 	cmp	r0, #2
   1d3bc:	93a0002d 	movls	r0, #45	; 0x2d
   1d3c0:	83a00029 	movhi	r0, #41	; 0x29
   1d3c4:	e12fff1e 	bx	lr
   1d3c8:	0000014e 	.word	0x0000014e
   1d3cc:	0002811c 	.word	0x0002811c
   1d3d0:	000239a8 	.word	0x000239a8

0001d3d4 <CMachineInfo::GetDevice(TDeviceId) const>:
   1d3d4:	e3510000 	cmp	r1, #0
   1d3d8:	1a000003 	bne	1d3ec <CMachineInfo::GetDevice(TDeviceId) const+0x18>
   1d3dc:	e5d00004 	ldrb	r0, [r0, #4]
   1d3e0:	e2500001 	subs	r0, r0, #1
   1d3e4:	13a00001 	movne	r0, #1
   1d3e8:	e12fff1e 	bx	lr
   1d3ec:	e92d4010 	push	{r4, lr}
   1d3f0:	e59f2010 	ldr	r2, [pc, #16]	; 1d408 <CMachineInfo::GetDevice(TDeviceId) const+0x34>
   1d3f4:	e59f1010 	ldr	r1, [pc, #16]	; 1d40c <CMachineInfo::GetDevice(TDeviceId) const+0x38>
   1d3f8:	e59f0010 	ldr	r0, [pc, #16]	; 1d410 <CMachineInfo::GetDevice(TDeviceId) const+0x3c>
   1d3fc:	ebfff354 	bl	1a154 <assertion_failed>
   1d400:	e3a00000 	mov	r0, #0
   1d404:	e8bd8010 	pop	{r4, pc}
   1d408:	00000167 	.word	0x00000167
   1d40c:	0002811c 	.word	0x0002811c
   1d410:	000239a8 	.word	0x000239a8

0001d414 <CMachineInfo::Get()>:
   1d414:	e92d4010 	push	{r4, lr}
   1d418:	e59f4020 	ldr	r4, [pc, #32]	; 1d440 <CMachineInfo::Get()+0x2c>
   1d41c:	e5940000 	ldr	r0, [r4]
   1d420:	e3500000 	cmp	r0, #0
   1d424:	18bd8010 	popne	{r4, pc}
   1d428:	e3a02e17 	mov	r2, #368	; 0x170
   1d42c:	e59f1010 	ldr	r1, [pc, #16]	; 1d444 <CMachineInfo::Get()+0x30>
   1d430:	e59f0010 	ldr	r0, [pc, #16]	; 1d448 <CMachineInfo::Get()+0x34>
   1d434:	ebfff346 	bl	1a154 <assertion_failed>
   1d438:	e5940000 	ldr	r0, [r4]
   1d43c:	e8bd8010 	pop	{r4, pc}
   1d440:	000299cc 	.word	0x000299cc
   1d444:	0002811c 	.word	0x0002811c
   1d448:	00022d0c 	.word	0x00022d0c

0001d44c <CScreenDevice::~CScreenDevice()>:
   1d44c:	e5d0200c 	ldrb	r2, [r0, #12]
   1d450:	e59f3068 	ldr	r3, [pc, #104]	; 1d4c0 <CScreenDevice::~CScreenDevice()+0x74>
   1d454:	e3520000 	cmp	r2, #0
   1d458:	e92d4070 	push	{r4, r5, r6, lr}
   1d45c:	e1a04000 	mov	r4, r0
   1d460:	e5803000 	str	r3, [r0]
   1d464:	0a000003 	beq	1d478 <CScreenDevice::~CScreenDevice()+0x2c>
   1d468:	e5900018 	ldr	r0, [r0, #24]
   1d46c:	e3500000 	cmp	r0, #0
   1d470:	0a000000 	beq	1d478 <CScreenDevice::~CScreenDevice()+0x2c>
   1d474:	eb0010cd 	bl	217b0 <operator delete[](void*)>
   1d478:	e3a03000 	mov	r3, #0
   1d47c:	e5945010 	ldr	r5, [r4, #16]
   1d480:	e5843018 	str	r3, [r4, #24]
   1d484:	e1550003 	cmp	r5, r3
   1d488:	0a000004 	beq	1d4a0 <CScreenDevice::~CScreenDevice()+0x54>
   1d48c:	e1a00005 	mov	r0, r5
   1d490:	eb0012d4 	bl	21fe8 <CBcmFrameBuffer::~CBcmFrameBuffer()>
   1d494:	e1a00005 	mov	r0, r5
   1d498:	e3a01094 	mov	r1, #148	; 0x94
   1d49c:	eb0010c4 	bl	217b4 <operator delete(void*, unsigned int)>
   1d4a0:	e3a03000 	mov	r3, #0
   1d4a4:	e2840014 	add	r0, r4, #20
   1d4a8:	e5843010 	str	r3, [r4, #16]
   1d4ac:	eb0013d5 	bl	22408 <CCharGenerator::~CCharGenerator()>
   1d4b0:	e1a00004 	mov	r0, r4
   1d4b4:	ebfff522 	bl	1a944 <CDevice::~CDevice()>
   1d4b8:	e1a00004 	mov	r0, r4
   1d4bc:	e8bd8070 	pop	{r4, r5, r6, pc}
   1d4c0:	00028270 	.word	0x00028270

0001d4c4 <CScreenDevice::~CScreenDevice()>:
   1d4c4:	e92d4010 	push	{r4, lr}
   1d4c8:	e1a04000 	mov	r4, r0
   1d4cc:	ebffffde 	bl	1d44c <CScreenDevice::~CScreenDevice()>
   1d4d0:	e1a00004 	mov	r0, r4
   1d4d4:	e3a0105c 	mov	r1, #92	; 0x5c
   1d4d8:	eb0010b5 	bl	217b4 <operator delete(void*, unsigned int)>
   1d4dc:	e1a00004 	mov	r0, r4
   1d4e0:	e8bd8010 	pop	{r4, pc}

0001d4e4 <CScreenDevice::InvertCursor() [clone .part.6]>:
   1d4e4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1d4e8:	e2806014 	add	r6, r0, #20
   1d4ec:	e1a05000 	mov	r5, r0
   1d4f0:	e1a00006 	mov	r0, r6
   1d4f4:	eb0013c8 	bl	2241c <CCharGenerator::GetUnderline() const>
   1d4f8:	e3a08000 	mov	r8, #0
   1d4fc:	e1a07000 	mov	r7, r0
   1d500:	e1a00006 	mov	r0, r6
   1d504:	eb0013c2 	bl	22414 <CCharGenerator::GetCharHeight() const>
   1d508:	e1500007 	cmp	r0, r7
   1d50c:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
   1d510:	e3a04000 	mov	r4, #0
   1d514:	ea000013 	b	1d568 <CScreenDevice::InvertCursor() [clone .part.6]+0x84>
   1d518:	e595303c 	ldr	r3, [r5, #60]	; 0x3c
   1d51c:	e5952024 	ldr	r2, [r5, #36]	; 0x24
   1d520:	e0843003 	add	r3, r4, r3
   1d524:	e1530002 	cmp	r3, r2
   1d528:	2a00000d 	bcs	1d564 <CScreenDevice::InvertCursor() [clone .part.6]+0x80>
   1d52c:	e5952040 	ldr	r2, [r5, #64]	; 0x40
   1d530:	e5951028 	ldr	r1, [r5, #40]	; 0x28
   1d534:	e0872002 	add	r2, r7, r2
   1d538:	e1520001 	cmp	r2, r1
   1d53c:	2a000008 	bcs	1d564 <CScreenDevice::InvertCursor() [clone .part.6]+0x80>
   1d540:	e5950020 	ldr	r0, [r5, #32]
   1d544:	e5951018 	ldr	r1, [r5, #24]
   1d548:	e0233290 	mla	r3, r0, r2, r3
   1d54c:	e1a03083 	lsl	r3, r3, #1
   1d550:	e19120b3 	ldrh	r2, [r1, r3]
   1d554:	e3520000 	cmp	r2, #0
   1d558:	01d524b6 	ldrheq	r2, [r5, #70]	; 0x46
   1d55c:	118180b3 	strhne	r8, [r1, r3]
   1d560:	018120b3 	strheq	r2, [r1, r3]
   1d564:	e2844001 	add	r4, r4, #1
   1d568:	e1a00006 	mov	r0, r6
   1d56c:	eb0013a6 	bl	2240c <CCharGenerator::GetCharWidth() const>
   1d570:	e1500004 	cmp	r0, r4
   1d574:	8affffe7 	bhi	1d518 <CScreenDevice::InvertCursor() [clone .part.6]+0x34>
   1d578:	e2877001 	add	r7, r7, #1
   1d57c:	eaffffdf 	b	1d500 <CScreenDevice::InvertCursor() [clone .part.6]+0x1c>

0001d580 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool)>:
   1d580:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1d584:	e1a04000 	mov	r4, r0
   1d588:	e3a05000 	mov	r5, #0
   1d58c:	e1a07002 	mov	r7, r2
   1d590:	e1a06003 	mov	r6, r3
   1d594:	e1a08001 	mov	r8, r1
   1d598:	ebfff4f5 	bl	1a974 <CDevice::CDevice()>
   1d59c:	e59f0050 	ldr	r0, [pc, #80]	; 1d5f4 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool)+0x74>
   1d5a0:	e5848004 	str	r8, [r4, #4]
   1d5a4:	e5840000 	str	r0, [r4]
   1d5a8:	e5847008 	str	r7, [r4, #8]
   1d5ac:	e5c4600c 	strb	r6, [r4, #12]
   1d5b0:	e5845010 	str	r5, [r4, #16]
   1d5b4:	e2840014 	add	r0, r4, #20
   1d5b8:	eb00138f 	bl	223fc <CCharGenerator::CCharGenerator()>
   1d5bc:	e3a03001 	mov	r3, #1
   1d5c0:	e3e02020 	mvn	r2, #32
   1d5c4:	e5845018 	str	r5, [r4, #24]
   1d5c8:	e5845030 	str	r5, [r4, #48]	; 0x30
   1d5cc:	e5845034 	str	r5, [r4, #52]	; 0x34
   1d5d0:	e584503c 	str	r5, [r4, #60]	; 0x3c
   1d5d4:	e5845040 	str	r5, [r4, #64]	; 0x40
   1d5d8:	e5c45048 	strb	r5, [r4, #72]	; 0x48
   1d5dc:	e5c45054 	strb	r5, [r4, #84]	; 0x54
   1d5e0:	e1c424b6 	strh	r2, [r4, #70]	; 0x46
   1d5e4:	e5c43044 	strb	r3, [r4, #68]	; 0x44
   1d5e8:	e5843058 	str	r3, [r4, #88]	; 0x58
   1d5ec:	e1a00004 	mov	r0, r4
   1d5f0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1d5f4:	00028270 	.word	0x00028270

0001d5f8 <CScreenDevice::GetWidth() const>:
   1d5f8:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   1d5fc:	e12fff1e 	bx	lr

0001d600 <CScreenDevice::GetHeight() const>:
   1d600:	e5900028 	ldr	r0, [r0, #40]	; 0x28
   1d604:	e12fff1e 	bx	lr

0001d608 <CScreenDevice::GetColumns() const>:
   1d608:	e92d4010 	push	{r4, lr}
   1d60c:	e2800014 	add	r0, r0, #20
   1d610:	e5904010 	ldr	r4, [r0, #16]
   1d614:	eb00137c 	bl	2240c <CCharGenerator::GetCharWidth() const>
   1d618:	e1a01000 	mov	r1, r0
   1d61c:	e1a00004 	mov	r0, r4
   1d620:	ebffb057 	bl	9784 <__udivsi3>
   1d624:	e8bd8010 	pop	{r4, pc}

0001d628 <CScreenDevice::GetRows() const>:
   1d628:	e92d4010 	push	{r4, lr}
   1d62c:	e2800014 	add	r0, r0, #20
   1d630:	e5904018 	ldr	r4, [r0, #24]
   1d634:	eb001376 	bl	22414 <CCharGenerator::GetCharHeight() const>
   1d638:	e1a01000 	mov	r1, r0
   1d63c:	e1a00004 	mov	r0, r4
   1d640:	ebffb04f 	bl	9784 <__udivsi3>
   1d644:	e8bd8010 	pop	{r4, pc}

0001d648 <CScreenDevice::GetStatus()>:
   1d648:	e591c018 	ldr	ip, [r1, #24]
   1d64c:	e591201c 	ldr	r2, [r1, #28]
   1d650:	e92d4070 	push	{r4, r5, r6, lr}
   1d654:	e580c000 	str	ip, [r0]
   1d658:	e5915030 	ldr	r5, [r1, #48]	; 0x30
   1d65c:	e5914034 	ldr	r4, [r1, #52]	; 0x34
   1d660:	e591e038 	ldr	lr, [r1, #56]	; 0x38
   1d664:	e591c03c 	ldr	ip, [r1, #60]	; 0x3c
   1d668:	e5802004 	str	r2, [r0, #4]
   1d66c:	e5912040 	ldr	r2, [r1, #64]	; 0x40
   1d670:	e5805008 	str	r5, [r0, #8]
   1d674:	e5d16044 	ldrb	r6, [r1, #68]	; 0x44
   1d678:	e580400c 	str	r4, [r0, #12]
   1d67c:	e1d154b6 	ldrh	r5, [r1, #70]	; 0x46
   1d680:	e580e010 	str	lr, [r0, #16]
   1d684:	e5d14048 	ldrb	r4, [r1, #72]	; 0x48
   1d688:	e580c014 	str	ip, [r0, #20]
   1d68c:	e591e04c 	ldr	lr, [r1, #76]	; 0x4c
   1d690:	e5802018 	str	r2, [r0, #24]
   1d694:	e591c050 	ldr	ip, [r1, #80]	; 0x50
   1d698:	e5d12054 	ldrb	r2, [r1, #84]	; 0x54
   1d69c:	e5c0601c 	strb	r6, [r0, #28]
   1d6a0:	e1c051be 	strh	r5, [r0, #30]
   1d6a4:	e5c04020 	strb	r4, [r0, #32]
   1d6a8:	e580e024 	str	lr, [r0, #36]	; 0x24
   1d6ac:	e580c028 	str	ip, [r0, #40]	; 0x28
   1d6b0:	e5c0202c 	strb	r2, [r0, #44]	; 0x2c
   1d6b4:	e8bd8070 	pop	{r4, r5, r6, pc}

0001d6b8 <CScreenDevice::SetStatus(TScreenStatus const&)>:
   1d6b8:	e590201c 	ldr	r2, [r0, #28]
   1d6bc:	e5913004 	ldr	r3, [r1, #4]
   1d6c0:	e1520003 	cmp	r2, r3
   1d6c4:	0a000001 	beq	1d6d0 <CScreenDevice::SetStatus(TScreenStatus const&)+0x18>
   1d6c8:	e3a00000 	mov	r0, #0
   1d6cc:	e12fff1e 	bx	lr
   1d6d0:	e590c020 	ldr	ip, [r0, #32]
   1d6d4:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1d6d8:	e15c0003 	cmp	ip, r3
   1d6dc:	1afffff9 	bne	1d6c8 <CScreenDevice::SetStatus(TScreenStatus const&)+0x10>
   1d6e0:	e92d4070 	push	{r4, r5, r6, lr}
   1d6e4:	e1a04000 	mov	r4, r0
   1d6e8:	e5900058 	ldr	r0, [r0, #88]	; 0x58
   1d6ec:	e1a05001 	mov	r5, r1
   1d6f0:	e3500000 	cmp	r0, #0
   1d6f4:	1a000023 	bne	1d788 <CScreenDevice::SetStatus(TScreenStatus const&)+0xd0>
   1d6f8:	e5d43054 	ldrb	r3, [r4, #84]	; 0x54
   1d6fc:	e3530000 	cmp	r3, #0
   1d700:	1a000002 	bne	1d710 <CScreenDevice::SetStatus(TScreenStatus const&)+0x58>
   1d704:	e5d1302c 	ldrb	r3, [r1, #44]	; 0x2c
   1d708:	e3530000 	cmp	r3, #0
   1d70c:	0a000001 	beq	1d718 <CScreenDevice::SetStatus(TScreenStatus const&)+0x60>
   1d710:	e3a00000 	mov	r0, #0
   1d714:	e8bd8070 	pop	{r4, r5, r6, pc}
   1d718:	e5951000 	ldr	r1, [r5]
   1d71c:	e5940018 	ldr	r0, [r4, #24]
   1d720:	eb000d23 	bl	20bb4 <memcpy>
   1d724:	e5940058 	ldr	r0, [r4, #88]	; 0x58
   1d728:	e2851008 	add	r1, r5, #8
   1d72c:	e891004e 	ldm	r1, {r1, r2, r3, r6}
   1d730:	e595e018 	ldr	lr, [r5, #24]
   1d734:	e5d5c01c 	ldrb	ip, [r5, #28]
   1d738:	e3500000 	cmp	r0, #0
   1d73c:	e5841030 	str	r1, [r4, #48]	; 0x30
   1d740:	e1d501be 	ldrh	r0, [r5, #30]
   1d744:	e5d51020 	ldrb	r1, [r5, #32]
   1d748:	e5842034 	str	r2, [r4, #52]	; 0x34
   1d74c:	e5843038 	str	r3, [r4, #56]	; 0x38
   1d750:	e5952024 	ldr	r2, [r5, #36]	; 0x24
   1d754:	e5953028 	ldr	r3, [r5, #40]	; 0x28
   1d758:	e584603c 	str	r6, [r4, #60]	; 0x3c
   1d75c:	e584e040 	str	lr, [r4, #64]	; 0x40
   1d760:	e5c4c044 	strb	ip, [r4, #68]	; 0x44
   1d764:	e1c404b6 	strh	r0, [r4, #70]	; 0x46
   1d768:	e5c41048 	strb	r1, [r4, #72]	; 0x48
   1d76c:	e584204c 	str	r2, [r4, #76]	; 0x4c
   1d770:	e5843050 	str	r3, [r4, #80]	; 0x50
   1d774:	1a000010 	bne	1d7bc <CScreenDevice::SetStatus(TScreenStatus const&)+0x104>
   1d778:	e3a03000 	mov	r3, #0
   1d77c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   1d780:	e3a00001 	mov	r0, #1
   1d784:	e8bd8070 	pop	{r4, r5, r6, pc}
   1d788:	eb000fab 	bl	2163c <EnterCritical>
   1d78c:	e5d43054 	ldrb	r3, [r4, #84]	; 0x54
   1d790:	e3530000 	cmp	r3, #0
   1d794:	1a000003 	bne	1d7a8 <CScreenDevice::SetStatus(TScreenStatus const&)+0xf0>
   1d798:	e5d5302c 	ldrb	r3, [r5, #44]	; 0x2c
   1d79c:	e3530000 	cmp	r3, #0
   1d7a0:	0594201c 	ldreq	r2, [r4, #28]
   1d7a4:	0affffdb 	beq	1d718 <CScreenDevice::SetStatus(TScreenStatus const&)+0x60>
   1d7a8:	e5943058 	ldr	r3, [r4, #88]	; 0x58
   1d7ac:	e3530000 	cmp	r3, #0
   1d7b0:	0affffd6 	beq	1d710 <CScreenDevice::SetStatus(TScreenStatus const&)+0x58>
   1d7b4:	eb000fcd 	bl	216f0 <LeaveCritical>
   1d7b8:	eaffffd4 	b	1d710 <CScreenDevice::SetStatus(TScreenStatus const&)+0x58>
   1d7bc:	eb000fcb 	bl	216f0 <LeaveCritical>
   1d7c0:	eaffffec 	b	1d778 <CScreenDevice::SetStatus(TScreenStatus const&)+0xc0>

0001d7c4 <CScreenDevice::CarriageReturn()>:
   1d7c4:	e3a03000 	mov	r3, #0
   1d7c8:	e580303c 	str	r3, [r0, #60]	; 0x3c
   1d7cc:	e12fff1e 	bx	lr

0001d7d0 <CScreenDevice::CursorHome()>:
   1d7d0:	e3a02000 	mov	r2, #0
   1d7d4:	e5903034 	ldr	r3, [r0, #52]	; 0x34
   1d7d8:	e580203c 	str	r2, [r0, #60]	; 0x3c
   1d7dc:	e5803040 	str	r3, [r0, #64]	; 0x40
   1d7e0:	e12fff1e 	bx	lr

0001d7e4 <CScreenDevice::CursorLeft()>:
   1d7e4:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
   1d7e8:	e92d4070 	push	{r4, r5, r6, lr}
   1d7ec:	e3530000 	cmp	r3, #0
   1d7f0:	e1a04000 	mov	r4, r0
   1d7f4:	1a00000f 	bne	1d838 <CScreenDevice::CursorLeft()+0x54>
   1d7f8:	e5902040 	ldr	r2, [r0, #64]	; 0x40
   1d7fc:	e5903034 	ldr	r3, [r0, #52]	; 0x34
   1d800:	e1520003 	cmp	r2, r3
   1d804:	98bd8070 	popls	{r4, r5, r6, pc}
   1d808:	e2806014 	add	r6, r0, #20
   1d80c:	e1a00006 	mov	r0, r6
   1d810:	e5945024 	ldr	r5, [r4, #36]	; 0x24
   1d814:	eb0012fc 	bl	2240c <CCharGenerator::GetCharWidth() const>
   1d818:	e0450000 	sub	r0, r5, r0
   1d81c:	e584003c 	str	r0, [r4, #60]	; 0x3c
   1d820:	e1a00006 	mov	r0, r6
   1d824:	eb0012fa 	bl	22414 <CCharGenerator::GetCharHeight() const>
   1d828:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   1d82c:	e0430000 	sub	r0, r3, r0
   1d830:	e5840040 	str	r0, [r4, #64]	; 0x40
   1d834:	e8bd8070 	pop	{r4, r5, r6, pc}
   1d838:	e2800014 	add	r0, r0, #20
   1d83c:	eb0012f2 	bl	2240c <CCharGenerator::GetCharWidth() const>
   1d840:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
   1d844:	e0430000 	sub	r0, r3, r0
   1d848:	e584003c 	str	r0, [r4, #60]	; 0x3c
   1d84c:	e8bd8070 	pop	{r4, r5, r6, pc}

0001d850 <CScreenDevice::CursorMove(unsigned int, unsigned int)>:
   1d850:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1d854:	e2806014 	add	r6, r0, #20
   1d858:	e1a04002 	mov	r4, r2
   1d85c:	e1a05000 	mov	r5, r0
   1d860:	e1a00006 	mov	r0, r6
   1d864:	e1a07001 	mov	r7, r1
   1d868:	eb0012e7 	bl	2240c <CCharGenerator::GetCharWidth() const>
   1d86c:	e2444001 	sub	r4, r4, #1
   1d870:	e0040490 	mul	r4, r0, r4
   1d874:	e1a00006 	mov	r0, r6
   1d878:	eb0012e5 	bl	22414 <CCharGenerator::GetCharHeight() const>
   1d87c:	e5953024 	ldr	r3, [r5, #36]	; 0x24
   1d880:	e1540003 	cmp	r4, r3
   1d884:	28bd81f0 	popcs	{r4, r5, r6, r7, r8, pc}
   1d888:	e2477001 	sub	r7, r7, #1
   1d88c:	e0000790 	mul	r0, r0, r7
   1d890:	e5953034 	ldr	r3, [r5, #52]	; 0x34
   1d894:	e1500003 	cmp	r0, r3
   1d898:	38bd81f0 	popcc	{r4, r5, r6, r7, r8, pc}
   1d89c:	e5953038 	ldr	r3, [r5, #56]	; 0x38
   1d8a0:	e1500003 	cmp	r0, r3
   1d8a4:	3585403c 	strcc	r4, [r5, #60]	; 0x3c
   1d8a8:	35850040 	strcc	r0, [r5, #64]	; 0x40
   1d8ac:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0001d8b0 <CScreenDevice::CursorUp()>:
   1d8b0:	e5902040 	ldr	r2, [r0, #64]	; 0x40
   1d8b4:	e5903034 	ldr	r3, [r0, #52]	; 0x34
   1d8b8:	e1520003 	cmp	r2, r3
   1d8bc:	912fff1e 	bxls	lr
   1d8c0:	e92d4010 	push	{r4, lr}
   1d8c4:	e1a04000 	mov	r4, r0
   1d8c8:	e2800014 	add	r0, r0, #20
   1d8cc:	eb0012d0 	bl	22414 <CCharGenerator::GetCharHeight() const>
   1d8d0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   1d8d4:	e0430000 	sub	r0, r3, r0
   1d8d8:	e5840040 	str	r0, [r4, #64]	; 0x40
   1d8dc:	e8bd8010 	pop	{r4, pc}

0001d8e0 <CScreenDevice::DeleteChars(unsigned int)>:
   1d8e0:	e12fff1e 	bx	lr

0001d8e4 <CScreenDevice::DeleteLines(unsigned int)>:
   1d8e4:	e12fff1e 	bx	lr

0001d8e8 <CScreenDevice::InsertLines(unsigned int)>:
   1d8e8:	e12fff1e 	bx	lr

0001d8ec <CScreenDevice::InsertMode(bool)>:
   1d8ec:	e5c01048 	strb	r1, [r0, #72]	; 0x48
   1d8f0:	e12fff1e 	bx	lr

0001d8f4 <CScreenDevice::ReverseScroll()>:
   1d8f4:	e12fff1e 	bx	lr

0001d8f8 <CScreenDevice::SetCursorMode(bool)>:
   1d8f8:	e5c01044 	strb	r1, [r0, #68]	; 0x44
   1d8fc:	e12fff1e 	bx	lr

0001d900 <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>:
   1d900:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1d904:	e2807014 	add	r7, r0, #20
   1d908:	e1a06000 	mov	r6, r0
   1d90c:	e1a04001 	mov	r4, r1
   1d910:	e1a00007 	mov	r0, r7
   1d914:	e1a05002 	mov	r5, r2
   1d918:	eb0012bd 	bl	22414 <CCharGenerator::GetCharHeight() const>
   1d91c:	e2444001 	sub	r4, r4, #1
   1d920:	e0040490 	mul	r4, r0, r4
   1d924:	e1a00007 	mov	r0, r7
   1d928:	eb0012b9 	bl	22414 <CCharGenerator::GetCharHeight() const>
   1d92c:	e0000095 	mul	r0, r5, r0
   1d930:	e596202c 	ldr	r2, [r6, #44]	; 0x2c
   1d934:	e3500000 	cmp	r0, #0
   1d938:	11540002 	cmpne	r4, r2
   1d93c:	33a03001 	movcc	r3, #1
   1d940:	23a03000 	movcs	r3, #0
   1d944:	e1500002 	cmp	r0, r2
   1d948:	83a03000 	movhi	r3, #0
   1d94c:	92033001 	andls	r3, r3, #1
   1d950:	e1540000 	cmp	r4, r0
   1d954:	23a03000 	movcs	r3, #0
   1d958:	32033001 	andcc	r3, r3, #1
   1d95c:	e3530000 	cmp	r3, #0
   1d960:	e3a03000 	mov	r3, #0
   1d964:	05964034 	ldreq	r4, [r6, #52]	; 0x34
   1d968:	15864034 	strne	r4, [r6, #52]	; 0x34
   1d96c:	15860038 	strne	r0, [r6, #56]	; 0x38
   1d970:	e5864040 	str	r4, [r6, #64]	; 0x40
   1d974:	e586303c 	str	r3, [r6, #60]	; 0x3c
   1d978:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0001d97c <CScreenDevice::SetStandoutMode(unsigned int)>:
   1d97c:	e351001b 	cmp	r1, #27
   1d980:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
   1d984:	ea00001d 	b	1da00 <CScreenDevice::SetStandoutMode(unsigned int)+0x84>
   1d988:	0001da10 	.word	0x0001da10
   1d98c:	0001da04 	.word	0x0001da04
   1d990:	0001d9f8 	.word	0x0001d9f8
   1d994:	0001da00 	.word	0x0001da00
   1d998:	0001da00 	.word	0x0001da00
   1d99c:	0001da00 	.word	0x0001da00
   1d9a0:	0001da00 	.word	0x0001da00
   1d9a4:	0001da00 	.word	0x0001da00
   1d9a8:	0001da00 	.word	0x0001da00
   1d9ac:	0001da00 	.word	0x0001da00
   1d9b0:	0001da00 	.word	0x0001da00
   1d9b4:	0001da00 	.word	0x0001da00
   1d9b8:	0001da00 	.word	0x0001da00
   1d9bc:	0001da00 	.word	0x0001da00
   1d9c0:	0001da00 	.word	0x0001da00
   1d9c4:	0001da00 	.word	0x0001da00
   1d9c8:	0001da00 	.word	0x0001da00
   1d9cc:	0001da00 	.word	0x0001da00
   1d9d0:	0001da00 	.word	0x0001da00
   1d9d4:	0001da00 	.word	0x0001da00
   1d9d8:	0001da00 	.word	0x0001da00
   1d9dc:	0001da00 	.word	0x0001da00
   1d9e0:	0001da00 	.word	0x0001da00
   1d9e4:	0001da00 	.word	0x0001da00
   1d9e8:	0001da00 	.word	0x0001da00
   1d9ec:	0001da00 	.word	0x0001da00
   1d9f0:	0001da00 	.word	0x0001da00
   1d9f4:	0001da10 	.word	0x0001da10
   1d9f8:	e3a0301f 	mov	r3, #31
   1d9fc:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
   1da00:	e12fff1e 	bx	lr
   1da04:	e3a03b3e 	mov	r3, #63488	; 0xf800
   1da08:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
   1da0c:	e12fff1e 	bx	lr
   1da10:	e3e03020 	mvn	r3, #32
   1da14:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
   1da18:	e12fff1e 	bx	lr

0001da1c <CScreenDevice::Scroll()>:
   1da1c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1da20:	e1a07000 	mov	r7, r0
   1da24:	e2800014 	add	r0, r0, #20
   1da28:	eb001279 	bl	22414 <CCharGenerator::GetCharHeight() const>
   1da2c:	e5973034 	ldr	r3, [r7, #52]	; 0x34
   1da30:	e5974038 	ldr	r4, [r7, #56]	; 0x38
   1da34:	e5975020 	ldr	r5, [r7, #32]
   1da38:	e0444003 	sub	r4, r4, r3
   1da3c:	e1a02085 	lsl	r2, r5, #1
   1da40:	e0444000 	sub	r4, r4, r0
   1da44:	e0040492 	mul	r4, r2, r4
   1da48:	e0050395 	mul	r5, r5, r3
   1da4c:	e5978018 	ldr	r8, [r7, #24]
   1da50:	e3540000 	cmp	r4, #0
   1da54:	e1a06000 	mov	r6, r0
   1da58:	e0885085 	add	r5, r8, r5, lsl #1
   1da5c:	1a000007 	bne	1da80 <CScreenDevice::Scroll()+0x64>
   1da60:	e0020692 	mul	r2, r2, r6
   1da64:	e1b02122 	lsrs	r2, r2, #2
   1da68:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1da6c:	e1a00005 	mov	r0, r5
   1da70:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1da74:	e1a02102 	lsl	r2, r2, #2
   1da78:	e3a01000 	mov	r1, #0
   1da7c:	ea000ada 	b	205ec <memset>
   1da80:	e0803003 	add	r3, r0, r3
   1da84:	e0288392 	mla	r8, r2, r3, r8
   1da88:	e3c4900f 	bic	r9, r4, #15
   1da8c:	e1a01008 	mov	r1, r8
   1da90:	e1a02009 	mov	r2, r9
   1da94:	e1a00005 	mov	r0, r5
   1da98:	eb000c45 	bl	20bb4 <memcpy>
   1da9c:	e204200e 	and	r2, r4, #14
   1daa0:	e0850009 	add	r0, r5, r9
   1daa4:	e0881009 	add	r1, r8, r9
   1daa8:	eb000c41 	bl	20bb4 <memcpy>
   1daac:	e5972020 	ldr	r2, [r7, #32]
   1dab0:	e3c44003 	bic	r4, r4, #3
   1dab4:	e1a02082 	lsl	r2, r2, #1
   1dab8:	e0855004 	add	r5, r5, r4
   1dabc:	eaffffe7 	b	1da60 <CScreenDevice::Scroll()+0x44>

0001dac0 <CScreenDevice::CursorDown()>:
   1dac0:	e92d4070 	push	{r4, r5, r6, lr}
   1dac4:	e1a04000 	mov	r4, r0
   1dac8:	e2805014 	add	r5, r0, #20
   1dacc:	e1a00005 	mov	r0, r5
   1dad0:	eb00124f 	bl	22414 <CCharGenerator::GetCharHeight() const>
   1dad4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   1dad8:	e5942038 	ldr	r2, [r4, #56]	; 0x38
   1dadc:	e0800003 	add	r0, r0, r3
   1dae0:	e1500002 	cmp	r0, r2
   1dae4:	e5840040 	str	r0, [r4, #64]	; 0x40
   1dae8:	38bd8070 	popcc	{r4, r5, r6, pc}
   1daec:	e1a00004 	mov	r0, r4
   1daf0:	ebffffc9 	bl	1da1c <CScreenDevice::Scroll()>
   1daf4:	e1a00005 	mov	r0, r5
   1daf8:	eb001245 	bl	22414 <CCharGenerator::GetCharHeight() const>
   1dafc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   1db00:	e0430000 	sub	r0, r3, r0
   1db04:	e5840040 	str	r0, [r4, #64]	; 0x40
   1db08:	e8bd8070 	pop	{r4, r5, r6, pc}

0001db0c <CScreenDevice::NewLine()>:
   1db0c:	e3a02000 	mov	r2, #0
   1db10:	e580203c 	str	r2, [r0, #60]	; 0x3c
   1db14:	eaffffe9 	b	1dac0 <CScreenDevice::CursorDown()>

0001db18 <CScreenDevice::CursorRight()>:
   1db18:	e92d4010 	push	{r4, lr}
   1db1c:	e1a04000 	mov	r4, r0
   1db20:	e2800014 	add	r0, r0, #20
   1db24:	eb001238 	bl	2240c <CCharGenerator::GetCharWidth() const>
   1db28:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
   1db2c:	e5942024 	ldr	r2, [r4, #36]	; 0x24
   1db30:	e0800003 	add	r0, r0, r3
   1db34:	e1500002 	cmp	r0, r2
   1db38:	e584003c 	str	r0, [r4, #60]	; 0x3c
   1db3c:	38bd8010 	popcc	{r4, pc}
   1db40:	e3a03000 	mov	r3, #0
   1db44:	e1a00004 	mov	r0, r4
   1db48:	e584303c 	str	r3, [r4, #60]	; 0x3c
   1db4c:	e8bd4010 	pop	{r4, lr}
   1db50:	eaffffda 	b	1dac0 <CScreenDevice::CursorDown()>

0001db54 <CScreenDevice::Tabulator()>:
   1db54:	e92d4070 	push	{r4, r5, r6, lr}
   1db58:	e1a05000 	mov	r5, r0
   1db5c:	e2800014 	add	r0, r0, #20
   1db60:	eb001229 	bl	2240c <CCharGenerator::GetCharWidth() const>
   1db64:	e595303c 	ldr	r3, [r5, #60]	; 0x3c
   1db68:	e1a04180 	lsl	r4, r0, #3
   1db6c:	e0840003 	add	r0, r4, r3
   1db70:	e1a01004 	mov	r1, r4
   1db74:	ebffaf02 	bl	9784 <__udivsi3>
   1db78:	e0000094 	mul	r0, r4, r0
   1db7c:	e5953024 	ldr	r3, [r5, #36]	; 0x24
   1db80:	e585003c 	str	r0, [r5, #60]	; 0x3c
   1db84:	e1500003 	cmp	r0, r3
   1db88:	38bd8070 	popcc	{r4, r5, r6, pc}
   1db8c:	e3a03000 	mov	r3, #0
   1db90:	e1a00005 	mov	r0, r5
   1db94:	e585303c 	str	r3, [r5, #60]	; 0x3c
   1db98:	e8bd4070 	pop	{r4, r5, r6, lr}
   1db9c:	eaffffc7 	b	1dac0 <CScreenDevice::CursorDown()>

0001dba0 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>:
   1dba0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dba4:	e2806014 	add	r6, r0, #20
   1dba8:	e24dd00c 	sub	sp, sp, #12
   1dbac:	e1a07000 	mov	r7, r0
   1dbb0:	e1a00006 	mov	r0, r6
   1dbb4:	e1a0a001 	mov	sl, r1
   1dbb8:	e1a09002 	mov	r9, r2
   1dbbc:	e58d3004 	str	r3, [sp, #4]
   1dbc0:	e3a08000 	mov	r8, #0
   1dbc4:	e1ddb3b0 	ldrh	fp, [sp, #48]	; 0x30
   1dbc8:	eb001211 	bl	22414 <CCharGenerator::GetCharHeight() const>
   1dbcc:	e1580000 	cmp	r8, r0
   1dbd0:	2a000025 	bcs	1dc6c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xcc>
   1dbd4:	e59d3004 	ldr	r3, [sp, #4]
   1dbd8:	e3a04000 	mov	r4, #0
   1dbdc:	e0883003 	add	r3, r8, r3
   1dbe0:	e58d3000 	str	r3, [sp]
   1dbe4:	ea000000 	b	1dbec <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x4c>
   1dbe8:	e2844001 	add	r4, r4, #1
   1dbec:	e1a00006 	mov	r0, r6
   1dbf0:	eb001205 	bl	2240c <CCharGenerator::GetCharWidth() const>
   1dbf4:	e1540000 	cmp	r4, r0
   1dbf8:	e0845009 	add	r5, r4, r9
   1dbfc:	2a000015 	bcs	1dc58 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xb8>
   1dc00:	e1a03008 	mov	r3, r8
   1dc04:	e1a02004 	mov	r2, r4
   1dc08:	e1a0100a 	mov	r1, sl
   1dc0c:	e1a00006 	mov	r0, r6
   1dc10:	eb001203 	bl	22424 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>
   1dc14:	e5973024 	ldr	r3, [r7, #36]	; 0x24
   1dc18:	e3500000 	cmp	r0, #0
   1dc1c:	11a0000b 	movne	r0, fp
   1dc20:	03a00000 	moveq	r0, #0
   1dc24:	e1550003 	cmp	r5, r3
   1dc28:	2affffee 	bcs	1dbe8 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x48>
   1dc2c:	e5973028 	ldr	r3, [r7, #40]	; 0x28
   1dc30:	e59d2000 	ldr	r2, [sp]
   1dc34:	e1520003 	cmp	r2, r3
   1dc38:	2affffea 	bcs	1dbe8 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x48>
   1dc3c:	e5973020 	ldr	r3, [r7, #32]
   1dc40:	e59d1000 	ldr	r1, [sp]
   1dc44:	e5972018 	ldr	r2, [r7, #24]
   1dc48:	e0255193 	mla	r5, r3, r1, r5
   1dc4c:	e1a05085 	lsl	r5, r5, #1
   1dc50:	e18200b5 	strh	r0, [r2, r5]
   1dc54:	eaffffe3 	b	1dbe8 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x48>
   1dc58:	e1a00006 	mov	r0, r6
   1dc5c:	eb0011ec 	bl	22414 <CCharGenerator::GetCharHeight() const>
   1dc60:	e2888001 	add	r8, r8, #1
   1dc64:	e1580000 	cmp	r8, r0
   1dc68:	3affffd9 	bcc	1dbd4 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x34>
   1dc6c:	e28dd00c 	add	sp, sp, #12
   1dc70:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001dc74 <CScreenDevice::DisplayChar(char)>:
   1dc74:	e6ef3071 	uxtb	r3, r1
   1dc78:	e353001f 	cmp	r3, #31
   1dc7c:	912fff1e 	bxls	lr
   1dc80:	e92d4010 	push	{r4, lr}
   1dc84:	e1a04000 	mov	r4, r0
   1dc88:	e1d0c4b6 	ldrh	ip, [r0, #70]	; 0x46
   1dc8c:	e24dd008 	sub	sp, sp, #8
   1dc90:	e5903040 	ldr	r3, [r0, #64]	; 0x40
   1dc94:	e590203c 	ldr	r2, [r0, #60]	; 0x3c
   1dc98:	e58dc000 	str	ip, [sp]
   1dc9c:	ebffffbf 	bl	1dba0 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
   1dca0:	e1a00004 	mov	r0, r4
   1dca4:	e28dd008 	add	sp, sp, #8
   1dca8:	e8bd4010 	pop	{r4, lr}
   1dcac:	eaffff99 	b	1db18 <CScreenDevice::CursorRight()>

0001dcb0 <CScreenDevice::EraseChar(unsigned int, unsigned int)>:
   1dcb0:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dcb4:	e3a08000 	mov	r8, #0
   1dcb8:	e1a0b000 	mov	fp, r0
   1dcbc:	e1a06001 	mov	r6, r1
   1dcc0:	e1a0a002 	mov	sl, r2
   1dcc4:	e1a09008 	mov	r9, r8
   1dcc8:	e2805014 	add	r5, r0, #20
   1dccc:	e1a00005 	mov	r0, r5
   1dcd0:	eb0011cf 	bl	22414 <CCharGenerator::GetCharHeight() const>
   1dcd4:	e1580000 	cmp	r8, r0
   1dcd8:	28bd8ff8 	popcs	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dcdc:	e3a04000 	mov	r4, #0
   1dce0:	e088700a 	add	r7, r8, sl
   1dce4:	e1a00005 	mov	r0, r5
   1dce8:	eb0011c7 	bl	2240c <CCharGenerator::GetCharWidth() const>
   1dcec:	e1540000 	cmp	r4, r0
   1dcf0:	e0843006 	add	r3, r4, r6
   1dcf4:	2a00000c 	bcs	1dd2c <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x7c>
   1dcf8:	e59b2024 	ldr	r2, [fp, #36]	; 0x24
   1dcfc:	e2844001 	add	r4, r4, #1
   1dd00:	e1530002 	cmp	r3, r2
   1dd04:	2afffff6 	bcs	1dce4 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x34>
   1dd08:	e59b2028 	ldr	r2, [fp, #40]	; 0x28
   1dd0c:	e1570002 	cmp	r7, r2
   1dd10:	2afffff3 	bcs	1dce4 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x34>
   1dd14:	e59b2020 	ldr	r2, [fp, #32]
   1dd18:	e59b1018 	ldr	r1, [fp, #24]
   1dd1c:	e0233792 	mla	r3, r2, r7, r3
   1dd20:	e1a03083 	lsl	r3, r3, #1
   1dd24:	e18190b3 	strh	r9, [r1, r3]
   1dd28:	eaffffed 	b	1dce4 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x34>
   1dd2c:	e2888001 	add	r8, r8, #1
   1dd30:	eaffffe5 	b	1dccc <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x1c>

0001dd34 <CScreenDevice::ClearLineEnd()>:
   1dd34:	e92d4070 	push	{r4, r5, r6, lr}
   1dd38:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1dd3c:	e590403c 	ldr	r4, [r0, #60]	; 0x3c
   1dd40:	e1540003 	cmp	r4, r3
   1dd44:	28bd8070 	popcs	{r4, r5, r6, pc}
   1dd48:	e1a05000 	mov	r5, r0
   1dd4c:	e2806014 	add	r6, r0, #20
   1dd50:	e1a01004 	mov	r1, r4
   1dd54:	e5952040 	ldr	r2, [r5, #64]	; 0x40
   1dd58:	e1a00005 	mov	r0, r5
   1dd5c:	ebffffd3 	bl	1dcb0 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
   1dd60:	e1a00006 	mov	r0, r6
   1dd64:	eb0011a8 	bl	2240c <CCharGenerator::GetCharWidth() const>
   1dd68:	e5953024 	ldr	r3, [r5, #36]	; 0x24
   1dd6c:	e0844000 	add	r4, r4, r0
   1dd70:	e1530004 	cmp	r3, r4
   1dd74:	8afffff5 	bhi	1dd50 <CScreenDevice::ClearLineEnd()+0x1c>
   1dd78:	e8bd8070 	pop	{r4, r5, r6, pc}

0001dd7c <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>:
   1dd7c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1dd80:	e1a05000 	mov	r5, r0
   1dd84:	e2807014 	add	r7, r0, #20
   1dd88:	e1a00007 	mov	r0, r7
   1dd8c:	e1a06001 	mov	r6, r1
   1dd90:	e595403c 	ldr	r4, [r5, #60]	; 0x3c
   1dd94:	eb00119c 	bl	2240c <CCharGenerator::GetCharWidth() const>
   1dd98:	e0204096 	mla	r0, r6, r0, r4
   1dd9c:	e5956024 	ldr	r6, [r5, #36]	; 0x24
   1dda0:	e595403c 	ldr	r4, [r5, #60]	; 0x3c
   1dda4:	e1500006 	cmp	r0, r6
   1dda8:	31a06000 	movcc	r6, r0
   1ddac:	e1540006 	cmp	r4, r6
   1ddb0:	28bd81f0 	popcs	{r4, r5, r6, r7, r8, pc}
   1ddb4:	e1a01004 	mov	r1, r4
   1ddb8:	e5952040 	ldr	r2, [r5, #64]	; 0x40
   1ddbc:	e1a00005 	mov	r0, r5
   1ddc0:	ebffffba 	bl	1dcb0 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
   1ddc4:	e1a00007 	mov	r0, r7
   1ddc8:	eb00118f 	bl	2240c <CCharGenerator::GetCharWidth() const>
   1ddcc:	e0844000 	add	r4, r4, r0
   1ddd0:	e1540006 	cmp	r4, r6
   1ddd4:	3afffff6 	bcc	1ddb4 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]+0x38>
   1ddd8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0001dddc <CScreenDevice::EraseChars(unsigned int)>:
   1dddc:	e3510000 	cmp	r1, #0
   1dde0:	012fff1e 	bxeq	lr
   1dde4:	eaffffe4 	b	1dd7c <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>

0001dde8 <CScreenDevice::ClearDisplayEnd()>:
   1dde8:	e92d4070 	push	{r4, r5, r6, lr}
   1ddec:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1ddf0:	e590403c 	ldr	r4, [r0, #60]	; 0x3c
   1ddf4:	e1a05000 	mov	r5, r0
   1ddf8:	e1540003 	cmp	r4, r3
   1ddfc:	e2806014 	add	r6, r0, #20
   1de00:	2a000009 	bcs	1de2c <CScreenDevice::ClearDisplayEnd()+0x44>
   1de04:	e1a01004 	mov	r1, r4
   1de08:	e5952040 	ldr	r2, [r5, #64]	; 0x40
   1de0c:	e1a00005 	mov	r0, r5
   1de10:	ebffffa6 	bl	1dcb0 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
   1de14:	e1a00006 	mov	r0, r6
   1de18:	eb00117b 	bl	2240c <CCharGenerator::GetCharWidth() const>
   1de1c:	e5953024 	ldr	r3, [r5, #36]	; 0x24
   1de20:	e0844000 	add	r4, r4, r0
   1de24:	e1530004 	cmp	r3, r4
   1de28:	8afffff5 	bhi	1de04 <CScreenDevice::ClearDisplayEnd()+0x1c>
   1de2c:	e1a00006 	mov	r0, r6
   1de30:	e5954040 	ldr	r4, [r5, #64]	; 0x40
   1de34:	eb001176 	bl	22414 <CCharGenerator::GetCharHeight() const>
   1de38:	e5953020 	ldr	r3, [r5, #32]
   1de3c:	e0840000 	add	r0, r4, r0
   1de40:	e0000093 	mul	r0, r3, r0
   1de44:	e595201c 	ldr	r2, [r5, #28]
   1de48:	e5953018 	ldr	r3, [r5, #24]
   1de4c:	e07020a2 	rsbs	r2, r0, r2, lsr #1
   1de50:	0a000004 	beq	1de68 <CScreenDevice::ClearDisplayEnd()+0x80>
   1de54:	e8bd4070 	pop	{r4, r5, r6, lr}
   1de58:	e1a02082 	lsl	r2, r2, #1
   1de5c:	e0830080 	add	r0, r3, r0, lsl #1
   1de60:	e3a01000 	mov	r1, #0
   1de64:	ea0009e0 	b	205ec <memset>
   1de68:	e8bd8070 	pop	{r4, r5, r6, pc}

0001de6c <CScreenDevice::Write(char)>:
   1de6c:	e92d4010 	push	{r4, lr}
   1de70:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   1de74:	e24dd008 	sub	sp, sp, #8
   1de78:	e1a04000 	mov	r4, r0
   1de7c:	e3530007 	cmp	r3, #7
   1de80:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1de84:	ea000010 	b	1decc <CScreenDevice::Write(char)+0x60>
   1de88:	0001df18 	.word	0x0001df18
   1de8c:	0001df78 	.word	0x0001df78
   1de90:	0001df94 	.word	0x0001df94
   1de94:	0001dfec 	.word	0x0001dfec
   1de98:	0001e0c8 	.word	0x0001e0c8
   1de9c:	0001e0e8 	.word	0x0001e0e8
   1dea0:	0001e108 	.word	0x0001e108
   1dea4:	0001dedc 	.word	0x0001dedc
   1dea8:	e5902034 	ldr	r2, [r0, #52]	; 0x34
   1deac:	e5903040 	ldr	r3, [r0, #64]	; 0x40
   1deb0:	e1520003 	cmp	r2, r3
   1deb4:	2a000004 	bcs	1decc <CScreenDevice::Write(char)+0x60>
   1deb8:	e2800014 	add	r0, r0, #20
   1debc:	eb001154 	bl	22414 <CCharGenerator::GetCharHeight() const>
   1dec0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   1dec4:	e0433000 	sub	r3, r3, r0
   1dec8:	e5843040 	str	r3, [r4, #64]	; 0x40
   1decc:	e3a03000 	mov	r3, #0
   1ded0:	e5843030 	str	r3, [r4, #48]	; 0x30
   1ded4:	e28dd008 	add	sp, sp, #8
   1ded8:	e8bd8010 	pop	{r4, pc}
   1dedc:	e3510068 	cmp	r1, #104	; 0x68
   1dee0:	0a000097 	beq	1e144 <CScreenDevice::Write(char)+0x2d8>
   1dee4:	e351006c 	cmp	r1, #108	; 0x6c
   1dee8:	0a000095 	beq	1e144 <CScreenDevice::Write(char)+0x2d8>
   1deec:	e2411030 	sub	r1, r1, #48	; 0x30
   1def0:	e6ef3071 	uxtb	r3, r1
   1def4:	e3530009 	cmp	r3, #9
   1def8:	8afffff3 	bhi	1decc <CScreenDevice::Write(char)+0x60>
   1defc:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   1df00:	e0833103 	add	r3, r3, r3, lsl #2
   1df04:	e0811083 	add	r1, r1, r3, lsl #1
   1df08:	e3510063 	cmp	r1, #99	; 0x63
   1df0c:	e584104c 	str	r1, [r4, #76]	; 0x4c
   1df10:	8affffed 	bhi	1decc <CScreenDevice::Write(char)+0x60>
   1df14:	eaffffee 	b	1ded4 <CScreenDevice::Write(char)+0x68>
   1df18:	e2413008 	sub	r3, r1, #8
   1df1c:	e3530013 	cmp	r3, #19
   1df20:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1df24:	ea0000d3 	b	1e278 <CScreenDevice::Write(char)+0x40c>
   1df28:	0001e1b0 	.word	0x0001e1b0
   1df2c:	0001e1a4 	.word	0x0001e1a4
   1df30:	0001e190 	.word	0x0001e190
   1df34:	0001e278 	.word	0x0001e278
   1df38:	0001e278 	.word	0x0001e278
   1df3c:	0001e184 	.word	0x0001e184
   1df40:	0001e278 	.word	0x0001e278
   1df44:	0001e278 	.word	0x0001e278
   1df48:	0001e278 	.word	0x0001e278
   1df4c:	0001e278 	.word	0x0001e278
   1df50:	0001e278 	.word	0x0001e278
   1df54:	0001e278 	.word	0x0001e278
   1df58:	0001e278 	.word	0x0001e278
   1df5c:	0001e278 	.word	0x0001e278
   1df60:	0001e278 	.word	0x0001e278
   1df64:	0001e278 	.word	0x0001e278
   1df68:	0001e278 	.word	0x0001e278
   1df6c:	0001e278 	.word	0x0001e278
   1df70:	0001e278 	.word	0x0001e278
   1df74:	0001e178 	.word	0x0001e178
   1df78:	e351004d 	cmp	r1, #77	; 0x4d
   1df7c:	0affffd2 	beq	1decc <CScreenDevice::Write(char)+0x60>
   1df80:	e351005b 	cmp	r1, #91	; 0x5b
   1df84:	03a03002 	moveq	r3, #2
   1df88:	05803030 	streq	r3, [r0, #48]	; 0x30
   1df8c:	0affffd0 	beq	1ded4 <CScreenDevice::Write(char)+0x68>
   1df90:	eaffffcd 	b	1decc <CScreenDevice::Write(char)+0x60>
   1df94:	e241303f 	sub	r3, r1, #63	; 0x3f
   1df98:	e3530011 	cmp	r3, #17
   1df9c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1dfa0:	ea0000de 	b	1e320 <CScreenDevice::Write(char)+0x4b4>
   1dfa4:	0001e2d4 	.word	0x0001e2d4
   1dfa8:	0001e320 	.word	0x0001e320
   1dfac:	0001dea8 	.word	0x0001dea8
   1dfb0:	0001e300 	.word	0x0001e300
   1dfb4:	0001e2f0 	.word	0x0001e2f0
   1dfb8:	0001e2e0 	.word	0x0001e2e0
   1dfbc:	0001e320 	.word	0x0001e320
   1dfc0:	0001e320 	.word	0x0001e320
   1dfc4:	0001e320 	.word	0x0001e320
   1dfc8:	0001e2bc 	.word	0x0001e2bc
   1dfcc:	0001e320 	.word	0x0001e320
   1dfd0:	0001e2ac 	.word	0x0001e2ac
   1dfd4:	0001e310 	.word	0x0001e310
   1dfd8:	0001decc 	.word	0x0001decc
   1dfdc:	0001decc 	.word	0x0001decc
   1dfe0:	0001e320 	.word	0x0001e320
   1dfe4:	0001e320 	.word	0x0001e320
   1dfe8:	0001decc 	.word	0x0001decc
   1dfec:	e241303b 	sub	r3, r1, #59	; 0x3b
   1dff0:	e3530032 	cmp	r3, #50	; 0x32
   1dff4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1dff8:	eaffffbb 	b	1deec <CScreenDevice::Write(char)+0x80>
   1dffc:	0001e26c 	.word	0x0001e26c
   1e000:	0001deec 	.word	0x0001deec
   1e004:	0001deec 	.word	0x0001deec
   1e008:	0001deec 	.word	0x0001deec
   1e00c:	0001deec 	.word	0x0001deec
   1e010:	0001deec 	.word	0x0001deec
   1e014:	0001deec 	.word	0x0001deec
   1e018:	0001deec 	.word	0x0001deec
   1e01c:	0001deec 	.word	0x0001deec
   1e020:	0001deec 	.word	0x0001deec
   1e024:	0001deec 	.word	0x0001deec
   1e028:	0001deec 	.word	0x0001deec
   1e02c:	0001deec 	.word	0x0001deec
   1e030:	0001deec 	.word	0x0001deec
   1e034:	0001deec 	.word	0x0001deec
   1e038:	0001deec 	.word	0x0001deec
   1e03c:	0001deec 	.word	0x0001deec
   1e040:	0001decc 	.word	0x0001decc
   1e044:	0001decc 	.word	0x0001decc
   1e048:	0001deec 	.word	0x0001deec
   1e04c:	0001deec 	.word	0x0001deec
   1e050:	0001decc 	.word	0x0001decc
   1e054:	0001deec 	.word	0x0001deec
   1e058:	0001deec 	.word	0x0001deec
   1e05c:	0001deec 	.word	0x0001deec
   1e060:	0001deec 	.word	0x0001deec
   1e064:	0001deec 	.word	0x0001deec
   1e068:	0001deec 	.word	0x0001deec
   1e06c:	0001deec 	.word	0x0001deec
   1e070:	0001e1bc 	.word	0x0001e1bc
   1e074:	0001deec 	.word	0x0001deec
   1e078:	0001deec 	.word	0x0001deec
   1e07c:	0001deec 	.word	0x0001deec
   1e080:	0001deec 	.word	0x0001deec
   1e084:	0001deec 	.word	0x0001deec
   1e088:	0001deec 	.word	0x0001deec
   1e08c:	0001deec 	.word	0x0001deec
   1e090:	0001deec 	.word	0x0001deec
   1e094:	0001deec 	.word	0x0001deec
   1e098:	0001deec 	.word	0x0001deec
   1e09c:	0001deec 	.word	0x0001deec
   1e0a0:	0001deec 	.word	0x0001deec
   1e0a4:	0001deec 	.word	0x0001deec
   1e0a8:	0001deec 	.word	0x0001deec
   1e0ac:	0001deec 	.word	0x0001deec
   1e0b0:	0001e1d0 	.word	0x0001e1d0
   1e0b4:	0001deec 	.word	0x0001deec
   1e0b8:	0001deec 	.word	0x0001deec
   1e0bc:	0001deec 	.word	0x0001deec
   1e0c0:	0001e1d0 	.word	0x0001e1d0
   1e0c4:	0001e1ec 	.word	0x0001e1ec
   1e0c8:	e2411030 	sub	r1, r1, #48	; 0x30
   1e0cc:	e6ef3071 	uxtb	r3, r1
   1e0d0:	e3530009 	cmp	r3, #9
   1e0d4:	8affff7c 	bhi	1decc <CScreenDevice::Write(char)+0x60>
   1e0d8:	e3a03007 	mov	r3, #7
   1e0dc:	e580104c 	str	r1, [r0, #76]	; 0x4c
   1e0e0:	e5803030 	str	r3, [r0, #48]	; 0x30
   1e0e4:	eaffff7a 	b	1ded4 <CScreenDevice::Write(char)+0x68>
   1e0e8:	e2411030 	sub	r1, r1, #48	; 0x30
   1e0ec:	e6ef3071 	uxtb	r3, r1
   1e0f0:	e3530009 	cmp	r3, #9
   1e0f4:	8affff74 	bhi	1decc <CScreenDevice::Write(char)+0x60>
   1e0f8:	e3a03006 	mov	r3, #6
   1e0fc:	e5801050 	str	r1, [r0, #80]	; 0x50
   1e100:	e5803030 	str	r3, [r0, #48]	; 0x30
   1e104:	eaffff72 	b	1ded4 <CScreenDevice::Write(char)+0x68>
   1e108:	e3510048 	cmp	r1, #72	; 0x48
   1e10c:	0a000094 	beq	1e364 <CScreenDevice::Write(char)+0x4f8>
   1e110:	e3510072 	cmp	r1, #114	; 0x72
   1e114:	0a000011 	beq	1e160 <CScreenDevice::Write(char)+0x2f4>
   1e118:	e2411030 	sub	r1, r1, #48	; 0x30
   1e11c:	e6ef3071 	uxtb	r3, r1
   1e120:	e3530009 	cmp	r3, #9
   1e124:	8affff68 	bhi	1decc <CScreenDevice::Write(char)+0x60>
   1e128:	e5903050 	ldr	r3, [r0, #80]	; 0x50
   1e12c:	e0833103 	add	r3, r3, r3, lsl #2
   1e130:	e0811083 	add	r1, r1, r3, lsl #1
   1e134:	e35100c7 	cmp	r1, #199	; 0xc7
   1e138:	e5801050 	str	r1, [r0, #80]	; 0x50
   1e13c:	8affff62 	bhi	1decc <CScreenDevice::Write(char)+0x60>
   1e140:	eaffff63 	b	1ded4 <CScreenDevice::Write(char)+0x68>
   1e144:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   1e148:	e3530019 	cmp	r3, #25
   1e14c:	02411068 	subeq	r1, r1, #104	; 0x68
   1e150:	016f1f11 	clzeq	r1, r1
   1e154:	01a012a1 	lsreq	r1, r1, #5
   1e158:	05c41044 	strbeq	r1, [r4, #68]	; 0x44
   1e15c:	eaffff5a 	b	1decc <CScreenDevice::Write(char)+0x60>
   1e160:	e5902050 	ldr	r2, [r0, #80]	; 0x50
   1e164:	e590104c 	ldr	r1, [r0, #76]	; 0x4c
   1e168:	ebfffde4 	bl	1d900 <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>
   1e16c:	e3a03000 	mov	r3, #0
   1e170:	e5843030 	str	r3, [r4, #48]	; 0x30
   1e174:	eaffff56 	b	1ded4 <CScreenDevice::Write(char)+0x68>
   1e178:	e3a03001 	mov	r3, #1
   1e17c:	e5803030 	str	r3, [r0, #48]	; 0x30
   1e180:	eaffff53 	b	1ded4 <CScreenDevice::Write(char)+0x68>
   1e184:	e3a03000 	mov	r3, #0
   1e188:	e580303c 	str	r3, [r0, #60]	; 0x3c
   1e18c:	eaffff50 	b	1ded4 <CScreenDevice::Write(char)+0x68>
   1e190:	e3a03000 	mov	r3, #0
   1e194:	e580303c 	str	r3, [r0, #60]	; 0x3c
   1e198:	e28dd008 	add	sp, sp, #8
   1e19c:	e8bd4010 	pop	{r4, lr}
   1e1a0:	eafffe46 	b	1dac0 <CScreenDevice::CursorDown()>
   1e1a4:	e28dd008 	add	sp, sp, #8
   1e1a8:	e8bd4010 	pop	{r4, lr}
   1e1ac:	eafffe68 	b	1db54 <CScreenDevice::Tabulator()>
   1e1b0:	e28dd008 	add	sp, sp, #8
   1e1b4:	e8bd4010 	pop	{r4, lr}
   1e1b8:	eafffd89 	b	1d7e4 <CScreenDevice::CursorLeft()>
   1e1bc:	e590104c 	ldr	r1, [r0, #76]	; 0x4c
   1e1c0:	e3510000 	cmp	r1, #0
   1e1c4:	0affff40 	beq	1decc <CScreenDevice::Write(char)+0x60>
   1e1c8:	ebfffeeb 	bl	1dd7c <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>
   1e1cc:	eaffff3e 	b	1decc <CScreenDevice::Write(char)+0x60>
   1e1d0:	e590304c 	ldr	r3, [r0, #76]	; 0x4c
   1e1d4:	e3530004 	cmp	r3, #4
   1e1d8:	02411068 	subeq	r1, r1, #104	; 0x68
   1e1dc:	016f1f11 	clzeq	r1, r1
   1e1e0:	01a012a1 	lsreq	r1, r1, #5
   1e1e4:	05c01048 	strbeq	r1, [r0, #72]	; 0x48
   1e1e8:	eaffff37 	b	1decc <CScreenDevice::Write(char)+0x60>
   1e1ec:	e590304c 	ldr	r3, [r0, #76]	; 0x4c
   1e1f0:	e353001b 	cmp	r3, #27
   1e1f4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1e1f8:	eaffff33 	b	1decc <CScreenDevice::Write(char)+0x60>
   1e1fc:	0001e358 	.word	0x0001e358
   1e200:	0001e34c 	.word	0x0001e34c
   1e204:	0001e340 	.word	0x0001e340
   1e208:	0001decc 	.word	0x0001decc
   1e20c:	0001decc 	.word	0x0001decc
   1e210:	0001decc 	.word	0x0001decc
   1e214:	0001decc 	.word	0x0001decc
   1e218:	0001decc 	.word	0x0001decc
   1e21c:	0001decc 	.word	0x0001decc
   1e220:	0001decc 	.word	0x0001decc
   1e224:	0001decc 	.word	0x0001decc
   1e228:	0001decc 	.word	0x0001decc
   1e22c:	0001decc 	.word	0x0001decc
   1e230:	0001decc 	.word	0x0001decc
   1e234:	0001decc 	.word	0x0001decc
   1e238:	0001decc 	.word	0x0001decc
   1e23c:	0001decc 	.word	0x0001decc
   1e240:	0001decc 	.word	0x0001decc
   1e244:	0001decc 	.word	0x0001decc
   1e248:	0001decc 	.word	0x0001decc
   1e24c:	0001decc 	.word	0x0001decc
   1e250:	0001decc 	.word	0x0001decc
   1e254:	0001decc 	.word	0x0001decc
   1e258:	0001decc 	.word	0x0001decc
   1e25c:	0001decc 	.word	0x0001decc
   1e260:	0001decc 	.word	0x0001decc
   1e264:	0001decc 	.word	0x0001decc
   1e268:	0001e358 	.word	0x0001e358
   1e26c:	e3a03005 	mov	r3, #5
   1e270:	e5803030 	str	r3, [r0, #48]	; 0x30
   1e274:	eaffff16 	b	1ded4 <CScreenDevice::Write(char)+0x68>
   1e278:	e6ef3071 	uxtb	r3, r1
   1e27c:	e353001f 	cmp	r3, #31
   1e280:	9affff13 	bls	1ded4 <CScreenDevice::Write(char)+0x68>
   1e284:	e5903040 	ldr	r3, [r0, #64]	; 0x40
   1e288:	e590203c 	ldr	r2, [r0, #60]	; 0x3c
   1e28c:	e1d004b6 	ldrh	r0, [r0, #70]	; 0x46
   1e290:	e58d0000 	str	r0, [sp]
   1e294:	e1a00004 	mov	r0, r4
   1e298:	ebfffe40 	bl	1dba0 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
   1e29c:	e1a00004 	mov	r0, r4
   1e2a0:	e28dd008 	add	sp, sp, #8
   1e2a4:	e8bd4010 	pop	{r4, lr}
   1e2a8:	eafffe1a 	b	1db18 <CScreenDevice::CursorRight()>
   1e2ac:	ebfffecd 	bl	1dde8 <CScreenDevice::ClearDisplayEnd()>
   1e2b0:	e3a03000 	mov	r3, #0
   1e2b4:	e5843030 	str	r3, [r4, #48]	; 0x30
   1e2b8:	eaffff05 	b	1ded4 <CScreenDevice::Write(char)+0x68>
   1e2bc:	e3a03000 	mov	r3, #0
   1e2c0:	e5902034 	ldr	r2, [r0, #52]	; 0x34
   1e2c4:	e580303c 	str	r3, [r0, #60]	; 0x3c
   1e2c8:	e5803030 	str	r3, [r0, #48]	; 0x30
   1e2cc:	e5802040 	str	r2, [r0, #64]	; 0x40
   1e2d0:	eafffeff 	b	1ded4 <CScreenDevice::Write(char)+0x68>
   1e2d4:	e3a03004 	mov	r3, #4
   1e2d8:	e5803030 	str	r3, [r0, #48]	; 0x30
   1e2dc:	eafffefc 	b	1ded4 <CScreenDevice::Write(char)+0x68>
   1e2e0:	ebfffd3f 	bl	1d7e4 <CScreenDevice::CursorLeft()>
   1e2e4:	e3a03000 	mov	r3, #0
   1e2e8:	e5843030 	str	r3, [r4, #48]	; 0x30
   1e2ec:	eafffef8 	b	1ded4 <CScreenDevice::Write(char)+0x68>
   1e2f0:	ebfffe08 	bl	1db18 <CScreenDevice::CursorRight()>
   1e2f4:	e3a03000 	mov	r3, #0
   1e2f8:	e5843030 	str	r3, [r4, #48]	; 0x30
   1e2fc:	eafffef4 	b	1ded4 <CScreenDevice::Write(char)+0x68>
   1e300:	ebfffdee 	bl	1dac0 <CScreenDevice::CursorDown()>
   1e304:	e3a03000 	mov	r3, #0
   1e308:	e5843030 	str	r3, [r4, #48]	; 0x30
   1e30c:	eafffef0 	b	1ded4 <CScreenDevice::Write(char)+0x68>
   1e310:	ebfffe87 	bl	1dd34 <CScreenDevice::ClearLineEnd()>
   1e314:	e3a03000 	mov	r3, #0
   1e318:	e5843030 	str	r3, [r4, #48]	; 0x30
   1e31c:	eafffeec 	b	1ded4 <CScreenDevice::Write(char)+0x68>
   1e320:	e2411030 	sub	r1, r1, #48	; 0x30
   1e324:	e6ef3071 	uxtb	r3, r1
   1e328:	e3530009 	cmp	r3, #9
   1e32c:	8afffee6 	bhi	1decc <CScreenDevice::Write(char)+0x60>
   1e330:	e3a03003 	mov	r3, #3
   1e334:	e580104c 	str	r1, [r0, #76]	; 0x4c
   1e338:	e5803030 	str	r3, [r0, #48]	; 0x30
   1e33c:	eafffee4 	b	1ded4 <CScreenDevice::Write(char)+0x68>
   1e340:	e3a0301f 	mov	r3, #31
   1e344:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
   1e348:	eafffedf 	b	1decc <CScreenDevice::Write(char)+0x60>
   1e34c:	e3a03b3e 	mov	r3, #63488	; 0xf800
   1e350:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
   1e354:	eafffedc 	b	1decc <CScreenDevice::Write(char)+0x60>
   1e358:	e3e03020 	mvn	r3, #32
   1e35c:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
   1e360:	eafffed9 	b	1decc <CScreenDevice::Write(char)+0x60>
   1e364:	e5902050 	ldr	r2, [r0, #80]	; 0x50
   1e368:	e590104c 	ldr	r1, [r0, #76]	; 0x4c
   1e36c:	ebfffd37 	bl	1d850 <CScreenDevice::CursorMove(unsigned int, unsigned int)>
   1e370:	e3a03000 	mov	r3, #0
   1e374:	e5843030 	str	r3, [r4, #48]	; 0x30
   1e378:	eafffed5 	b	1ded4 <CScreenDevice::Write(char)+0x68>

0001e37c <CScreenDevice::Write(void const*, unsigned int)>:
   1e37c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1e380:	e1a05000 	mov	r5, r0
   1e384:	e5900058 	ldr	r0, [r0, #88]	; 0x58
   1e388:	e1a07001 	mov	r7, r1
   1e38c:	e3500000 	cmp	r0, #0
   1e390:	e1a04002 	mov	r4, r2
   1e394:	1a000028 	bne	1e43c <CScreenDevice::Write(void const*, unsigned int)+0xc0>
   1e398:	e3a02001 	mov	r2, #1
   1e39c:	e5d53044 	ldrb	r3, [r5, #68]	; 0x44
   1e3a0:	e5c52054 	strb	r2, [r5, #84]	; 0x54
   1e3a4:	e3530000 	cmp	r3, #0
   1e3a8:	1a00001c 	bne	1e420 <CScreenDevice::Write(void const*, unsigned int)+0xa4>
   1e3ac:	e3540000 	cmp	r4, #0
   1e3b0:	e2446001 	sub	r6, r4, #1
   1e3b4:	01a06004 	moveq	r6, r4
   1e3b8:	0a00000b 	beq	1e3ec <CScreenDevice::Write(void const*, unsigned int)+0x70>
   1e3bc:	e1a04007 	mov	r4, r7
   1e3c0:	e0d410d1 	ldrsb	r1, [r4], #1
   1e3c4:	e1a00005 	mov	r0, r5
   1e3c8:	ebfffea7 	bl	1de6c <CScreenDevice::Write(char)>
   1e3cc:	e2643001 	rsb	r3, r4, #1
   1e3d0:	e0833006 	add	r3, r3, r6
   1e3d4:	e1770003 	cmn	r7, r3
   1e3d8:	1afffff8 	bne	1e3c0 <CScreenDevice::Write(void const*, unsigned int)+0x44>
   1e3dc:	e2866001 	add	r6, r6, #1
   1e3e0:	e5d53044 	ldrb	r3, [r5, #68]	; 0x44
   1e3e4:	e3530000 	cmp	r3, #0
   1e3e8:	1a000009 	bne	1e414 <CScreenDevice::Write(void const*, unsigned int)+0x98>
   1e3ec:	e3a02000 	mov	r2, #0
   1e3f0:	e5953058 	ldr	r3, [r5, #88]	; 0x58
   1e3f4:	e5c52054 	strb	r2, [r5, #84]	; 0x54
   1e3f8:	e1530002 	cmp	r3, r2
   1e3fc:	0a000000 	beq	1e404 <CScreenDevice::Write(void const*, unsigned int)+0x88>
   1e400:	eb000cba 	bl	216f0 <LeaveCritical>
   1e404:	e3a03000 	mov	r3, #0
   1e408:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   1e40c:	e1a00006 	mov	r0, r6
   1e410:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1e414:	e1a00005 	mov	r0, r5
   1e418:	ebfffc31 	bl	1d4e4 <CScreenDevice::InvertCursor() [clone .part.6]>
   1e41c:	eafffff2 	b	1e3ec <CScreenDevice::Write(void const*, unsigned int)+0x70>
   1e420:	e1a00005 	mov	r0, r5
   1e424:	ebfffc2e 	bl	1d4e4 <CScreenDevice::InvertCursor() [clone .part.6]>
   1e428:	e3540000 	cmp	r4, #0
   1e42c:	e2446001 	sub	r6, r4, #1
   1e430:	1affffe1 	bne	1e3bc <CScreenDevice::Write(void const*, unsigned int)+0x40>
   1e434:	e1a06004 	mov	r6, r4
   1e438:	eaffffe8 	b	1e3e0 <CScreenDevice::Write(void const*, unsigned int)+0x64>
   1e43c:	eb000c7e 	bl	2163c <EnterCritical>
   1e440:	eaffffd4 	b	1e398 <CScreenDevice::Write(void const*, unsigned int)+0x1c>

0001e444 <CScreenDevice::Initialize()>:
   1e444:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1e448:	e5d0500c 	ldrb	r5, [r0, #12]
   1e44c:	e24dd00c 	sub	sp, sp, #12
   1e450:	e3550000 	cmp	r5, #0
   1e454:	e1a04000 	mov	r4, r0
   1e458:	0a00002a 	beq	1e508 <CScreenDevice::Initialize()+0xc4>
   1e45c:	e5903004 	ldr	r3, [r0, #4]
   1e460:	e5902008 	ldr	r2, [r0, #8]
   1e464:	e5803024 	str	r3, [r0, #36]	; 0x24
   1e468:	e0000392 	mul	r0, r2, r3
   1e46c:	e370010f 	cmn	r0, #-1073741821	; 0xc0000003
   1e470:	e1a00080 	lsl	r0, r0, #1
   1e474:	e584001c 	str	r0, [r4, #28]
   1e478:	e5843020 	str	r3, [r4, #32]
   1e47c:	23e00000 	mvncs	r0, #0
   1e480:	e5842028 	str	r2, [r4, #40]	; 0x28
   1e484:	eb000cc7 	bl	217a8 <operator new[](unsigned int)>
   1e488:	e5947028 	ldr	r7, [r4, #40]	; 0x28
   1e48c:	e5840018 	str	r0, [r4, #24]
   1e490:	e2846014 	add	r6, r4, #20
   1e494:	e1a00006 	mov	r0, r6
   1e498:	eb000fdd 	bl	22414 <CCharGenerator::GetCharHeight() const>
   1e49c:	e1a01000 	mov	r1, r0
   1e4a0:	e1a00007 	mov	r0, r7
   1e4a4:	ebffacb6 	bl	9784 <__udivsi3>
   1e4a8:	e1a05000 	mov	r5, r0
   1e4ac:	e1a00006 	mov	r0, r6
   1e4b0:	eb000fd7 	bl	22414 <CCharGenerator::GetCharHeight() const>
   1e4b4:	e3a02000 	mov	r2, #0
   1e4b8:	e0000590 	mul	r0, r0, r5
   1e4bc:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   1e4c0:	e584002c 	str	r0, [r4, #44]	; 0x2c
   1e4c4:	e5840038 	str	r0, [r4, #56]	; 0x38
   1e4c8:	e5843040 	str	r3, [r4, #64]	; 0x40
   1e4cc:	e584203c 	str	r2, [r4, #60]	; 0x3c
   1e4d0:	e1a00004 	mov	r0, r4
   1e4d4:	ebfffe43 	bl	1dde8 <CScreenDevice::ClearDisplayEnd()>
   1e4d8:	e5d43044 	ldrb	r3, [r4, #68]	; 0x44
   1e4dc:	e3530000 	cmp	r3, #0
   1e4e0:	1a00002f 	bne	1e5a4 <CScreenDevice::Initialize()+0x160>
   1e4e4:	ebfff213 	bl	1ad38 <CDeviceNameService::Get()>
   1e4e8:	e1a02004 	mov	r2, r4
   1e4ec:	e3a03000 	mov	r3, #0
   1e4f0:	e59f10b8 	ldr	r1, [pc, #184]	; 1e5b0 <CScreenDevice::Initialize()+0x16c>
   1e4f4:	ebfff14f 	bl	1aa38 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   1e4f8:	e3a05001 	mov	r5, #1
   1e4fc:	e1a00005 	mov	r0, r5
   1e500:	e28dd00c 	add	sp, sp, #12
   1e504:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1e508:	e3a00094 	mov	r0, #148	; 0x94
   1e50c:	eb000ca4 	bl	217a4 <operator new(unsigned int)>
   1e510:	e9940006 	ldmib	r4, {r1, r2}
   1e514:	e1a06000 	mov	r6, r0
   1e518:	e3a03010 	mov	r3, #16
   1e51c:	e58d5004 	str	r5, [sp, #4]
   1e520:	e58d5000 	str	r5, [sp]
   1e524:	eb000e61 	bl	21eb0 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   1e528:	e5846010 	str	r6, [r4, #16]
   1e52c:	e1a00006 	mov	r0, r6
   1e530:	eb000ed7 	bl	22094 <CBcmFrameBuffer::Initialize()>
   1e534:	e3500000 	cmp	r0, #0
   1e538:	0affffef 	beq	1e4fc <CScreenDevice::Initialize()+0xb8>
   1e53c:	e5940010 	ldr	r0, [r4, #16]
   1e540:	eb000f0d 	bl	2217c <CBcmFrameBuffer::GetDepth() const>
   1e544:	e3500010 	cmp	r0, #16
   1e548:	1affffeb 	bne	1e4fc <CScreenDevice::Initialize()+0xb8>
   1e54c:	e5940010 	ldr	r0, [r4, #16]
   1e550:	eb000f0b 	bl	22184 <CBcmFrameBuffer::GetBuffer() const>
   1e554:	e5840018 	str	r0, [r4, #24]
   1e558:	e5940010 	ldr	r0, [r4, #16]
   1e55c:	eb000f0a 	bl	2218c <CBcmFrameBuffer::GetSize() const>
   1e560:	e584001c 	str	r0, [r4, #28]
   1e564:	e5940010 	ldr	r0, [r4, #16]
   1e568:	eb000f01 	bl	22174 <CBcmFrameBuffer::GetPitch() const>
   1e56c:	e5840020 	str	r0, [r4, #32]
   1e570:	e5940010 	ldr	r0, [r4, #16]
   1e574:	eb000ef6 	bl	22154 <CBcmFrameBuffer::GetWidth() const>
   1e578:	e5840024 	str	r0, [r4, #36]	; 0x24
   1e57c:	e5940010 	ldr	r0, [r4, #16]
   1e580:	eb000ef5 	bl	2215c <CBcmFrameBuffer::GetHeight() const>
   1e584:	e5943020 	ldr	r3, [r4, #32]
   1e588:	e1a07000 	mov	r7, r0
   1e58c:	e3130003 	tst	r3, #3
   1e590:	01a030a3 	lsreq	r3, r3, #1
   1e594:	e5840028 	str	r0, [r4, #40]	; 0x28
   1e598:	05843020 	streq	r3, [r4, #32]
   1e59c:	0affffbb 	beq	1e490 <CScreenDevice::Initialize()+0x4c>
   1e5a0:	eaffffd5 	b	1e4fc <CScreenDevice::Initialize()+0xb8>
   1e5a4:	e1a00004 	mov	r0, r4
   1e5a8:	ebfffbcd 	bl	1d4e4 <CScreenDevice::InvertCursor() [clone .part.6]>
   1e5ac:	eaffffcc 	b	1e4e4 <CScreenDevice::Initialize()+0xa0>
   1e5b0:	00027e84 	.word	0x00027e84

0001e5b4 <CScreenDevice::InvertCursor()>:
   1e5b4:	e5d03044 	ldrb	r3, [r0, #68]	; 0x44
   1e5b8:	e3530000 	cmp	r3, #0
   1e5bc:	012fff1e 	bxeq	lr
   1e5c0:	eafffbc7 	b	1d4e4 <CScreenDevice::InvertCursor() [clone .part.6]>

0001e5c4 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)>:
   1e5c4:	e590c024 	ldr	ip, [r0, #36]	; 0x24
   1e5c8:	e15c0001 	cmp	ip, r1
   1e5cc:	912fff1e 	bxls	lr
   1e5d0:	e590c028 	ldr	ip, [r0, #40]	; 0x28
   1e5d4:	e15c0002 	cmp	ip, r2
   1e5d8:	8590c020 	ldrhi	ip, [r0, #32]
   1e5dc:	85900018 	ldrhi	r0, [r0, #24]
   1e5e0:	8022129c 	mlahi	r2, ip, r2, r1
   1e5e4:	81a02082 	lslhi	r2, r2, #1
   1e5e8:	818030b2 	strhhi	r3, [r0, r2]
   1e5ec:	e12fff1e 	bx	lr

0001e5f0 <CScreenDevice::GetPixel(unsigned int, unsigned int)>:
   1e5f0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1e5f4:	e1530001 	cmp	r3, r1
   1e5f8:	9a000008 	bls	1e620 <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x30>
   1e5fc:	e5903028 	ldr	r3, [r0, #40]	; 0x28
   1e600:	e1530002 	cmp	r3, r2
   1e604:	9a000005 	bls	1e620 <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x30>
   1e608:	e590c020 	ldr	ip, [r0, #32]
   1e60c:	e5903018 	ldr	r3, [r0, #24]
   1e610:	e022129c 	mla	r2, ip, r2, r1
   1e614:	e1a02082 	lsl	r2, r2, #1
   1e618:	e19300b2 	ldrh	r0, [r3, r2]
   1e61c:	e12fff1e 	bx	lr
   1e620:	e3a00000 	mov	r0, #0
   1e624:	e12fff1e 	bx	lr

0001e628 <CScreenDevice::Rotor(unsigned int, unsigned int)>:
   1e628:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1e62c:	e1a05000 	mov	r5, r0
   1e630:	e24dd00c 	sub	sp, sp, #12
   1e634:	e1a04001 	mov	r4, r1
   1e638:	e2800014 	add	r0, r0, #20
   1e63c:	e1a06002 	mov	r6, r2
   1e640:	e5957024 	ldr	r7, [r5, #36]	; 0x24
   1e644:	eb000f70 	bl	2240c <CCharGenerator::GetCharWidth() const>
   1e648:	e3a0cb3e 	mov	ip, #63488	; 0xf800
   1e64c:	e2044003 	and	r4, r4, #3
   1e650:	e0200094 	mla	r0, r4, r0, r0
   1e654:	e59f3024 	ldr	r3, [pc, #36]	; 1e680 <CScreenDevice::Rotor(unsigned int, unsigned int)+0x58>
   1e658:	e2066003 	and	r6, r6, #3
   1e65c:	e0833006 	add	r3, r3, r6
   1e660:	e1d311dc 	ldrsb	r1, [r3, #28]
   1e664:	e0472000 	sub	r2, r7, r0
   1e668:	e58dc000 	str	ip, [sp]
   1e66c:	e1a00005 	mov	r0, r5
   1e670:	e3a03000 	mov	r3, #0
   1e674:	ebfffd49 	bl	1dba0 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
   1e678:	e28dd00c 	add	sp, sp, #12
   1e67c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1e680:	00028268 	.word	0x00028268
   1e684:	00000000 	.word	0x00000000

0001e688 <CString::~CString()>:
   1e688:	e92d4010 	push	{r4, lr}
   1e68c:	e1a04000 	mov	r4, r0
   1e690:	e5900004 	ldr	r0, [r0, #4]
   1e694:	e59f3014 	ldr	r3, [pc, #20]	; 1e6b0 <CString::~CString()+0x28>
   1e698:	e3500000 	cmp	r0, #0
   1e69c:	e5843000 	str	r3, [r4]
   1e6a0:	0a000000 	beq	1e6a8 <CString::~CString()+0x20>
   1e6a4:	eb000c41 	bl	217b0 <operator delete[](void*)>
   1e6a8:	e1a00004 	mov	r0, r4
   1e6ac:	e8bd8010 	pop	{r4, pc}
   1e6b0:	00028294 	.word	0x00028294

0001e6b4 <CString::~CString()>:
   1e6b4:	e92d4010 	push	{r4, lr}
   1e6b8:	e1a04000 	mov	r4, r0
   1e6bc:	e5900004 	ldr	r0, [r0, #4]
   1e6c0:	e59f3020 	ldr	r3, [pc, #32]	; 1e6e8 <CString::~CString()+0x34>
   1e6c4:	e3500000 	cmp	r0, #0
   1e6c8:	e5843000 	str	r3, [r4]
   1e6cc:	0a000000 	beq	1e6d4 <CString::~CString()+0x20>
   1e6d0:	eb000c36 	bl	217b0 <operator delete[](void*)>
   1e6d4:	e1a00004 	mov	r0, r4
   1e6d8:	e3a01010 	mov	r1, #16
   1e6dc:	eb000c34 	bl	217b4 <operator delete(void*, unsigned int)>
   1e6e0:	e1a00004 	mov	r0, r4
   1e6e4:	e8bd8010 	pop	{r4, pc}
   1e6e8:	00028294 	.word	0x00028294

0001e6ec <CString::ReserveSpace(unsigned int) [clone .part.0]>:
   1e6ec:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1e6f0:	e990002c 	ldmib	r0, {r2, r3, r5}
   1e6f4:	e0455002 	sub	r5, r5, r2
   1e6f8:	e0851001 	add	r1, r5, r1
   1e6fc:	e2812001 	add	r2, r1, #1
   1e700:	e1520003 	cmp	r2, r3
   1e704:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
   1e708:	e1a04000 	mov	r4, r0
   1e70c:	e2816041 	add	r6, r1, #65	; 0x41
   1e710:	e1a00006 	mov	r0, r6
   1e714:	eb000c23 	bl	217a8 <operator new[](unsigned int)>
   1e718:	e3a02000 	mov	r2, #0
   1e71c:	e594300c 	ldr	r3, [r4, #12]
   1e720:	e1a07000 	mov	r7, r0
   1e724:	e5c32000 	strb	r2, [r3]
   1e728:	e5941004 	ldr	r1, [r4, #4]
   1e72c:	eb00084c 	bl	20864 <strcpy>
   1e730:	e5940004 	ldr	r0, [r4, #4]
   1e734:	e3500000 	cmp	r0, #0
   1e738:	0a000000 	beq	1e740 <CString::ReserveSpace(unsigned int) [clone .part.0]+0x54>
   1e73c:	eb000c1b 	bl	217b0 <operator delete[](void*)>
   1e740:	e0875005 	add	r5, r7, r5
   1e744:	e584500c 	str	r5, [r4, #12]
   1e748:	e5847004 	str	r7, [r4, #4]
   1e74c:	e5846008 	str	r6, [r4, #8]
   1e750:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0001e754 <CString::CString()>:
   1e754:	e3a02000 	mov	r2, #0
   1e758:	e59f1008 	ldr	r1, [pc, #8]	; 1e768 <CString::CString()+0x14>
   1e75c:	e5802008 	str	r2, [r0, #8]
   1e760:	e8800006 	stm	r0, {r1, r2}
   1e764:	e12fff1e 	bx	lr
   1e768:	00028294 	.word	0x00028294

0001e76c <CString::CString(char const*)>:
   1e76c:	e92d4070 	push	{r4, r5, r6, lr}
   1e770:	e1a04000 	mov	r4, r0
   1e774:	e59f302c 	ldr	r3, [pc, #44]	; 1e7a8 <CString::CString(char const*)+0x3c>
   1e778:	e1a00001 	mov	r0, r1
   1e77c:	e5843000 	str	r3, [r4]
   1e780:	e1a05001 	mov	r5, r1
   1e784:	eb0007b8 	bl	2066c <strlen>
   1e788:	e2800001 	add	r0, r0, #1
   1e78c:	e5840008 	str	r0, [r4, #8]
   1e790:	eb000c04 	bl	217a8 <operator new[](unsigned int)>
   1e794:	e1a01005 	mov	r1, r5
   1e798:	e5840004 	str	r0, [r4, #4]
   1e79c:	eb000830 	bl	20864 <strcpy>
   1e7a0:	e1a00004 	mov	r0, r4
   1e7a4:	e8bd8070 	pop	{r4, r5, r6, pc}
   1e7a8:	00028294 	.word	0x00028294

0001e7ac <CString::operator char const*() const>:
   1e7ac:	e5900004 	ldr	r0, [r0, #4]
   1e7b0:	e59f3008 	ldr	r3, [pc, #8]	; 1e7c0 <CString::operator char const*() const+0x14>
   1e7b4:	e3500000 	cmp	r0, #0
   1e7b8:	01a00003 	moveq	r0, r3
   1e7bc:	e12fff1e 	bx	lr
   1e7c0:	00024cd0 	.word	0x00024cd0

0001e7c4 <CString::operator=(char const*)>:
   1e7c4:	e92d4070 	push	{r4, r5, r6, lr}
   1e7c8:	e1a04000 	mov	r4, r0
   1e7cc:	e5900004 	ldr	r0, [r0, #4]
   1e7d0:	e1a05001 	mov	r5, r1
   1e7d4:	e3500000 	cmp	r0, #0
   1e7d8:	0a000000 	beq	1e7e0 <CString::operator=(char const*)+0x1c>
   1e7dc:	eb000bf3 	bl	217b0 <operator delete[](void*)>
   1e7e0:	e1a00005 	mov	r0, r5
   1e7e4:	eb0007a0 	bl	2066c <strlen>
   1e7e8:	e2800001 	add	r0, r0, #1
   1e7ec:	e5840008 	str	r0, [r4, #8]
   1e7f0:	eb000bec 	bl	217a8 <operator new[](unsigned int)>
   1e7f4:	e1a01005 	mov	r1, r5
   1e7f8:	e5840004 	str	r0, [r4, #4]
   1e7fc:	eb000818 	bl	20864 <strcpy>
   1e800:	e5940004 	ldr	r0, [r4, #4]
   1e804:	e8bd8070 	pop	{r4, r5, r6, pc}

0001e808 <CString::operator=(CString const&)>:
   1e808:	e92d4070 	push	{r4, r5, r6, lr}
   1e80c:	e1a04000 	mov	r4, r0
   1e810:	e5900004 	ldr	r0, [r0, #4]
   1e814:	e1a06001 	mov	r6, r1
   1e818:	e3500000 	cmp	r0, #0
   1e81c:	0a000000 	beq	1e824 <CString::operator=(CString const&)+0x1c>
   1e820:	eb000be2 	bl	217b0 <operator delete[](void*)>
   1e824:	e5960004 	ldr	r0, [r6, #4]
   1e828:	e59f5030 	ldr	r5, [pc, #48]	; 1e860 <CString::operator=(CString const&)+0x58>
   1e82c:	e3500000 	cmp	r0, #0
   1e830:	01a00005 	moveq	r0, r5
   1e834:	eb00078c 	bl	2066c <strlen>
   1e838:	e2800001 	add	r0, r0, #1
   1e83c:	e5840008 	str	r0, [r4, #8]
   1e840:	eb000bd8 	bl	217a8 <operator new[](unsigned int)>
   1e844:	e5840004 	str	r0, [r4, #4]
   1e848:	e5961004 	ldr	r1, [r6, #4]
   1e84c:	e3510000 	cmp	r1, #0
   1e850:	01a01005 	moveq	r1, r5
   1e854:	eb000802 	bl	20864 <strcpy>
   1e858:	e1a00004 	mov	r0, r4
   1e85c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1e860:	00024cd0 	.word	0x00024cd0

0001e864 <CString::GetLength() const>:
   1e864:	e5900004 	ldr	r0, [r0, #4]
   1e868:	e3500000 	cmp	r0, #0
   1e86c:	012fff1e 	bxeq	lr
   1e870:	ea00077d 	b	2066c <strlen>

0001e874 <CString::Append(char const*)>:
   1e874:	e92d4070 	push	{r4, r5, r6, lr}
   1e878:	e3a03001 	mov	r3, #1
   1e87c:	e1a04000 	mov	r4, r0
   1e880:	e5900004 	ldr	r0, [r0, #4]
   1e884:	e1a06001 	mov	r6, r1
   1e888:	e3500000 	cmp	r0, #0
   1e88c:	e5843008 	str	r3, [r4, #8]
   1e890:	0a000003 	beq	1e8a4 <CString::Append(char const*)+0x30>
   1e894:	eb000774 	bl	2066c <strlen>
   1e898:	e5943008 	ldr	r3, [r4, #8]
   1e89c:	e0830000 	add	r0, r3, r0
   1e8a0:	e5840008 	str	r0, [r4, #8]
   1e8a4:	e1a00006 	mov	r0, r6
   1e8a8:	eb00076f 	bl	2066c <strlen>
   1e8ac:	e5943008 	ldr	r3, [r4, #8]
   1e8b0:	e0800003 	add	r0, r0, r3
   1e8b4:	e5840008 	str	r0, [r4, #8]
   1e8b8:	eb000bba 	bl	217a8 <operator new[](unsigned int)>
   1e8bc:	e5941004 	ldr	r1, [r4, #4]
   1e8c0:	e1a05000 	mov	r5, r0
   1e8c4:	e3510000 	cmp	r1, #0
   1e8c8:	05c01000 	strbeq	r1, [r0]
   1e8cc:	0a000004 	beq	1e8e4 <CString::Append(char const*)+0x70>
   1e8d0:	eb0007e3 	bl	20864 <strcpy>
   1e8d4:	e5940004 	ldr	r0, [r4, #4]
   1e8d8:	e3500000 	cmp	r0, #0
   1e8dc:	0a000000 	beq	1e8e4 <CString::Append(char const*)+0x70>
   1e8e0:	eb000bb2 	bl	217b0 <operator delete[](void*)>
   1e8e4:	e1a01006 	mov	r1, r6
   1e8e8:	e1a00005 	mov	r0, r5
   1e8ec:	eb0007fa 	bl	208dc <strcat>
   1e8f0:	e5845004 	str	r5, [r4, #4]
   1e8f4:	e8bd8070 	pop	{r4, r5, r6, pc}

0001e8f8 <CString::Compare(char const*) const>:
   1e8f8:	e5900004 	ldr	r0, [r0, #4]
   1e8fc:	ea000764 	b	20694 <strcmp>

0001e900 <CString::Find(char) const>:
   1e900:	e5902004 	ldr	r2, [r0, #4]
   1e904:	e1d230d0 	ldrsb	r3, [r2]
   1e908:	e3530000 	cmp	r3, #0
   1e90c:	0a000009 	beq	1e938 <CString::Find(char) const+0x38>
   1e910:	e1510003 	cmp	r1, r3
   1e914:	e3a00000 	mov	r0, #0
   1e918:	1a000002 	bne	1e928 <CString::Find(char) const+0x28>
   1e91c:	ea000007 	b	1e940 <CString::Find(char) const+0x40>
   1e920:	e1530001 	cmp	r3, r1
   1e924:	012fff1e 	bxeq	lr
   1e928:	e1f230d1 	ldrsb	r3, [r2, #1]!
   1e92c:	e2800001 	add	r0, r0, #1
   1e930:	e3530000 	cmp	r3, #0
   1e934:	1afffff9 	bne	1e920 <CString::Find(char) const+0x20>
   1e938:	e3e00000 	mvn	r0, #0
   1e93c:	e12fff1e 	bx	lr
   1e940:	e12fff1e 	bx	lr

0001e944 <CString::PutChar(char, unsigned int)>:
   1e944:	e92d4070 	push	{r4, r5, r6, lr}
   1e948:	e2524000 	subs	r4, r2, #0
   1e94c:	08bd8070 	popeq	{r4, r5, r6, pc}
   1e950:	e1a06001 	mov	r6, r1
   1e954:	e1a01004 	mov	r1, r4
   1e958:	e1a05000 	mov	r5, r0
   1e95c:	ebffff62 	bl	1e6ec <CString::ReserveSpace(unsigned int) [clone .part.0]>
   1e960:	e2443001 	sub	r3, r4, #1
   1e964:	e595200c 	ldr	r2, [r5, #12]
   1e968:	e2433001 	sub	r3, r3, #1
   1e96c:	e2820001 	add	r0, r2, #1
   1e970:	e3730001 	cmn	r3, #1
   1e974:	e585000c 	str	r0, [r5, #12]
   1e978:	e5c26000 	strb	r6, [r2]
   1e97c:	1afffff8 	bne	1e964 <CString::PutChar(char, unsigned int)+0x20>
   1e980:	e8bd8070 	pop	{r4, r5, r6, pc}

0001e984 <CString::PutString(char const*)>:
   1e984:	e92d4070 	push	{r4, r5, r6, lr}
   1e988:	e1a04000 	mov	r4, r0
   1e98c:	e1a00001 	mov	r0, r1
   1e990:	e1a05001 	mov	r5, r1
   1e994:	eb000734 	bl	2066c <strlen>
   1e998:	e2506000 	subs	r6, r0, #0
   1e99c:	0a000002 	beq	1e9ac <CString::PutString(char const*)+0x28>
   1e9a0:	e1a01006 	mov	r1, r6
   1e9a4:	e1a00004 	mov	r0, r4
   1e9a8:	ebffff4f 	bl	1e6ec <CString::ReserveSpace(unsigned int) [clone .part.0]>
   1e9ac:	e1a01005 	mov	r1, r5
   1e9b0:	e594000c 	ldr	r0, [r4, #12]
   1e9b4:	eb0007aa 	bl	20864 <strcpy>
   1e9b8:	e594100c 	ldr	r1, [r4, #12]
   1e9bc:	e0811006 	add	r1, r1, r6
   1e9c0:	e584100c 	str	r1, [r4, #12]
   1e9c4:	e8bd8070 	pop	{r4, r5, r6, pc}

0001e9c8 <CString::Replace(char const*, char const*)>:
   1e9c8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e9cc:	e1d180d0 	ldrsb	r8, [r1]
   1e9d0:	e24dd014 	sub	sp, sp, #20
   1e9d4:	e3580000 	cmp	r8, #0
   1e9d8:	1a000002 	bne	1e9e8 <CString::Replace(char const*, char const*)+0x20>
   1e9dc:	e1a00008 	mov	r0, r8
   1e9e0:	e28dd014 	add	sp, sp, #20
   1e9e4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e9e8:	e1a0a000 	mov	sl, r0
   1e9ec:	e1a07001 	mov	r7, r1
   1e9f0:	e5901004 	ldr	r1, [r0, #4]
   1e9f4:	e1a0000d 	mov	r0, sp
   1e9f8:	e1a09002 	mov	r9, r2
   1e9fc:	ebffff5a 	bl	1e76c <CString::CString(char const*)>
   1ea00:	e59a0004 	ldr	r0, [sl, #4]
   1ea04:	e3500000 	cmp	r0, #0
   1ea08:	0a000000 	beq	1ea10 <CString::Replace(char const*, char const*)+0x48>
   1ea0c:	eb000b67 	bl	217b0 <operator delete[](void*)>
   1ea10:	e3a00040 	mov	r0, #64	; 0x40
   1ea14:	e58a0008 	str	r0, [sl, #8]
   1ea18:	eb000b62 	bl	217a8 <operator new[](unsigned int)>
   1ea1c:	e3a08000 	mov	r8, #0
   1ea20:	e3a06001 	mov	r6, #1
   1ea24:	e59d4004 	ldr	r4, [sp, #4]
   1ea28:	e58a0004 	str	r0, [sl, #4]
   1ea2c:	e58a000c 	str	r0, [sl, #12]
   1ea30:	e1d710d0 	ldrsb	r1, [r7]
   1ea34:	e1a00004 	mov	r0, r4
   1ea38:	eb0007b8 	bl	20920 <strchr>
   1ea3c:	e2505000 	subs	r5, r0, #0
   1ea40:	0a00002d 	beq	1eafc <CString::Replace(char const*, char const*)+0x134>
   1ea44:	e1540005 	cmp	r4, r5
   1ea48:	2a000039 	bcs	1eb34 <CString::Replace(char const*, char const*)+0x16c>
   1ea4c:	e1a01006 	mov	r1, r6
   1ea50:	e1a0000a 	mov	r0, sl
   1ea54:	e0d4b0d1 	ldrsb	fp, [r4], #1
   1ea58:	ebffff23 	bl	1e6ec <CString::ReserveSpace(unsigned int) [clone .part.0]>
   1ea5c:	e59a300c 	ldr	r3, [sl, #12]
   1ea60:	e1550004 	cmp	r5, r4
   1ea64:	e2832001 	add	r2, r3, #1
   1ea68:	e58a200c 	str	r2, [sl, #12]
   1ea6c:	e5c3b000 	strb	fp, [r3]
   1ea70:	1afffff5 	bne	1ea4c <CString::Replace(char const*, char const*)+0x84>
   1ea74:	e1a0c005 	mov	ip, r5
   1ea78:	e2854001 	add	r4, r5, #1
   1ea7c:	e1d730d1 	ldrsb	r3, [r7, #1]
   1ea80:	e2871001 	add	r1, r7, #1
   1ea84:	e3530000 	cmp	r3, #0
   1ea88:	0a00000c 	beq	1eac0 <CString::Replace(char const*, char const*)+0xf8>
   1ea8c:	e1d520d1 	ldrsb	r2, [r5, #1]
   1ea90:	e1520003 	cmp	r2, r3
   1ea94:	1a00000e 	bne	1ead4 <CString::Replace(char const*, char const*)+0x10c>
   1ea98:	e2853002 	add	r3, r5, #2
   1ea9c:	ea000003 	b	1eab0 <CString::Replace(char const*, char const*)+0xe8>
   1eaa0:	e1d400d0 	ldrsb	r0, [r4]
   1eaa4:	e2833001 	add	r3, r3, #1
   1eaa8:	e1500002 	cmp	r0, r2
   1eaac:	1a000008 	bne	1ead4 <CString::Replace(char const*, char const*)+0x10c>
   1eab0:	e1f120d1 	ldrsb	r2, [r1, #1]!
   1eab4:	e1a04003 	mov	r4, r3
   1eab8:	e3520000 	cmp	r2, #0
   1eabc:	1afffff7 	bne	1eaa0 <CString::Replace(char const*, char const*)+0xd8>
   1eac0:	e1a01009 	mov	r1, r9
   1eac4:	e1a0000a 	mov	r0, sl
   1eac8:	e2888001 	add	r8, r8, #1
   1eacc:	ebffffac 	bl	1e984 <CString::PutString(char const*)>
   1ead0:	eaffffd6 	b	1ea30 <CString::Replace(char const*, char const*)+0x68>
   1ead4:	e1a01006 	mov	r1, r6
   1ead8:	e1a0000a 	mov	r0, sl
   1eadc:	e1dc50d0 	ldrsb	r5, [ip]
   1eae0:	e28c4001 	add	r4, ip, #1
   1eae4:	ebffff00 	bl	1e6ec <CString::ReserveSpace(unsigned int) [clone .part.0]>
   1eae8:	e59a300c 	ldr	r3, [sl, #12]
   1eaec:	e2832001 	add	r2, r3, #1
   1eaf0:	e58a200c 	str	r2, [sl, #12]
   1eaf4:	e5c35000 	strb	r5, [r3]
   1eaf8:	eaffffcc 	b	1ea30 <CString::Replace(char const*, char const*)+0x68>
   1eafc:	e1a0000a 	mov	r0, sl
   1eb00:	e1a01004 	mov	r1, r4
   1eb04:	ebffff9e 	bl	1e984 <CString::PutString(char const*)>
   1eb08:	e59a200c 	ldr	r2, [sl, #12]
   1eb0c:	e59f302c 	ldr	r3, [pc, #44]	; 1eb40 <CString::Replace(char const*, char const*)+0x178>
   1eb10:	e5c25000 	strb	r5, [r2]
   1eb14:	e59d0004 	ldr	r0, [sp, #4]
   1eb18:	e58d3000 	str	r3, [sp]
   1eb1c:	e3500000 	cmp	r0, #0
   1eb20:	0affffad 	beq	1e9dc <CString::Replace(char const*, char const*)+0x14>
   1eb24:	eb000b21 	bl	217b0 <operator delete[](void*)>
   1eb28:	e1a00008 	mov	r0, r8
   1eb2c:	e28dd014 	add	sp, sp, #20
   1eb30:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eb34:	e1a0c004 	mov	ip, r4
   1eb38:	e2854001 	add	r4, r5, #1
   1eb3c:	eaffffce 	b	1ea7c <CString::Replace(char const*, char const*)+0xb4>
   1eb40:	00028294 	.word	0x00028294

0001eb44 <CString::ReserveSpace(unsigned int)>:
   1eb44:	e3510000 	cmp	r1, #0
   1eb48:	012fff1e 	bxeq	lr
   1eb4c:	eafffee6 	b	1e6ec <CString::ReserveSpace(unsigned int) [clone .part.0]>

0001eb50 <CString::ntoa(char*, unsigned long, unsigned int, bool)>:
   1eb50:	e1510002 	cmp	r1, r2
   1eb54:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1eb58:	e1a05001 	mov	r5, r1
   1eb5c:	e1a07002 	mov	r7, r2
   1eb60:	e1a09000 	mov	r9, r0
   1eb64:	e1a08003 	mov	r8, r3
   1eb68:	23a0a001 	movcs	sl, #1
   1eb6c:	3a000022 	bcc	1ebfc <CString::ntoa(char*, unsigned long, unsigned int, bool)+0xac>
   1eb70:	e00a0a97 	mul	sl, r7, sl
   1eb74:	e1a00005 	mov	r0, r5
   1eb78:	e1a0100a 	mov	r1, sl
   1eb7c:	ebffab00 	bl	9784 <__udivsi3>
   1eb80:	e1500007 	cmp	r0, r7
   1eb84:	e1a04000 	mov	r4, r0
   1eb88:	2afffff8 	bcs	1eb70 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x20>
   1eb8c:	e3580000 	cmp	r8, #0
   1eb90:	13a08037 	movne	r8, #55	; 0x37
   1eb94:	03a08057 	moveq	r8, #87	; 0x57
   1eb98:	e1a06009 	mov	r6, r9
   1eb9c:	ea000003 	b	1ebb0 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x60>
   1eba0:	e1a0100a 	mov	r1, sl
   1eba4:	e1a00005 	mov	r0, r5
   1eba8:	ebffaaf5 	bl	9784 <__udivsi3>
   1ebac:	e1a04000 	mov	r4, r0
   1ebb0:	e1a00005 	mov	r0, r5
   1ebb4:	e1a0100a 	mov	r1, sl
   1ebb8:	ebffab2e 	bl	9878 <__aeabi_uidivmod>
   1ebbc:	e3540009 	cmp	r4, #9
   1ebc0:	e2843030 	add	r3, r4, #48	; 0x30
   1ebc4:	80884004 	addhi	r4, r8, r4
   1ebc8:	96af4073 	sxtbls	r4, r3
   1ebcc:	86af4074 	sxtbhi	r4, r4
   1ebd0:	e2866001 	add	r6, r6, #1
   1ebd4:	e1a0000a 	mov	r0, sl
   1ebd8:	e1a05001 	mov	r5, r1
   1ebdc:	e5464001 	strb	r4, [r6, #-1]
   1ebe0:	e1a01007 	mov	r1, r7
   1ebe4:	ebffaae6 	bl	9784 <__udivsi3>
   1ebe8:	e250a000 	subs	sl, r0, #0
   1ebec:	1affffeb 	bne	1eba0 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x50>
   1ebf0:	e5c6a000 	strb	sl, [r6]
   1ebf4:	e1a00009 	mov	r0, r9
   1ebf8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ebfc:	e1a04001 	mov	r4, r1
   1ec00:	e3a0a001 	mov	sl, #1
   1ec04:	eaffffe0 	b	1eb8c <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x3c>

0001ec08 <CString::ftoa(char*, double, unsigned int)>:
   1ec08:	eeb50bc0 	vcmpe.f64	d0, #0.0
   1ec0c:	eef1fa10 	vmrs	APSR_nzcv, fpscr
   1ec10:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ec14:	ed9f7b95 	vldr	d7, [pc, #596]	; 1ee70 <CString::ftoa(char*, double, unsigned int)+0x268>
   1ec18:	ed2d8b02 	vpush	{d8}
   1ec1c:	eeb08b40 	vmov.f64	d8, d0
   1ec20:	4eb18b40 	vnegmi.f64	d8, d0
   1ec24:	43a0302d 	movmi	r3, #45	; 0x2d
   1ec28:	eeb48bc7 	vcmpe.f64	d8, d7
   1ec2c:	45c03000 	strbmi	r3, [r0]
   1ec30:	4280b001 	addmi	fp, r0, #1
   1ec34:	51a0b000 	movpl	fp, r0
   1ec38:	eef1fa10 	vmrs	APSR_nzcv, fpscr
   1ec3c:	e24dd01c 	sub	sp, sp, #28
   1ec40:	e1a0a000 	mov	sl, r0
   1ec44:	e58d1004 	str	r1, [sp, #4]
   1ec48:	ca000079 	bgt	1ee34 <CString::ftoa(char*, double, unsigned int)+0x22c>
   1ec4c:	eefc7bc8 	vcvt.u32.f64	s15, d8
   1ec50:	ee177a90 	vmov	r7, s15
   1ec54:	e3570009 	cmp	r7, #9
   1ec58:	83a04001 	movhi	r4, #1
   1ec5c:	9a00007b 	bls	1ee50 <CString::ftoa(char*, double, unsigned int)+0x248>
   1ec60:	e0844104 	add	r4, r4, r4, lsl #2
   1ec64:	e1a04084 	lsl	r4, r4, #1
   1ec68:	e1a01004 	mov	r1, r4
   1ec6c:	e1a00007 	mov	r0, r7
   1ec70:	ebffaac3 	bl	9784 <__udivsi3>
   1ec74:	e3500009 	cmp	r0, #9
   1ec78:	e1a05000 	mov	r5, r0
   1ec7c:	8afffff7 	bhi	1ec60 <CString::ftoa(char*, double, unsigned int)+0x58>
   1ec80:	e1a0600b 	mov	r6, fp
   1ec84:	e1a09007 	mov	r9, r7
   1ec88:	e59f81f0 	ldr	r8, [pc, #496]	; 1ee80 <CString::ftoa(char*, double, unsigned int)+0x278>
   1ec8c:	ea000003 	b	1eca0 <CString::ftoa(char*, double, unsigned int)+0x98>
   1ec90:	e1a01004 	mov	r1, r4
   1ec94:	e1a00009 	mov	r0, r9
   1ec98:	ebffaab9 	bl	9784 <__udivsi3>
   1ec9c:	e1a05000 	mov	r5, r0
   1eca0:	e1a00009 	mov	r0, r9
   1eca4:	e1a01004 	mov	r1, r4
   1eca8:	ebffaaf2 	bl	9878 <__aeabi_uidivmod>
   1ecac:	e0843498 	umull	r3, r4, r8, r4
   1ecb0:	e3550009 	cmp	r5, #9
   1ecb4:	e2852030 	add	r2, r5, #48	; 0x30
   1ecb8:	82855057 	addhi	r5, r5, #87	; 0x57
   1ecbc:	96af5072 	sxtbls	r5, r2
   1ecc0:	86af5075 	sxtbhi	r5, r5
   1ecc4:	e2866001 	add	r6, r6, #1
   1ecc8:	e1b041a4 	lsrs	r4, r4, #3
   1eccc:	e1a09001 	mov	r9, r1
   1ecd0:	e5465001 	strb	r5, [r6, #-1]
   1ecd4:	1affffed 	bne	1ec90 <CString::ftoa(char*, double, unsigned int)+0x88>
   1ecd8:	e59d3004 	ldr	r3, [sp, #4]
   1ecdc:	e5c64000 	strb	r4, [r6]
   1ece0:	e3530000 	cmp	r3, #0
   1ece4:	1a000003 	bne	1ecf8 <CString::ftoa(char*, double, unsigned int)+0xf0>
   1ece8:	e1a0000a 	mov	r0, sl
   1ecec:	e28dd01c 	add	sp, sp, #28
   1ecf0:	ecbd8b02 	vpop	{d8}
   1ecf4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ecf8:	e1a0000b 	mov	r0, fp
   1ecfc:	eb00065a 	bl	2066c <strlen>
   1ed00:	e59d3004 	ldr	r3, [sp, #4]
   1ed04:	e08b2000 	add	r2, fp, r0
   1ed08:	e3530009 	cmp	r3, #9
   1ed0c:	31a09003 	movcc	r9, r3
   1ed10:	23a09009 	movcs	r9, #9
   1ed14:	e3a0302e 	mov	r3, #46	; 0x2e
   1ed18:	e3590001 	cmp	r9, #1
   1ed1c:	e7cb3000 	strb	r3, [fp, r0]
   1ed20:	e58d2004 	str	r2, [sp, #4]
   1ed24:	e282b001 	add	fp, r2, #1
   1ed28:	0a00004e 	beq	1ee68 <CString::ftoa(char*, double, unsigned int)+0x260>
   1ed2c:	e3a02002 	mov	r2, #2
   1ed30:	e3a0300a 	mov	r3, #10
   1ed34:	e2822001 	add	r2, r2, #1
   1ed38:	e0833103 	add	r3, r3, r3, lsl #2
   1ed3c:	e1520009 	cmp	r2, r9
   1ed40:	e1a03083 	lsl	r3, r3, #1
   1ed44:	9afffffa 	bls	1ed34 <CString::ftoa(char*, double, unsigned int)+0x12c>
   1ed48:	ee073a90 	vmov	s15, r3
   1ed4c:	eeb87b67 	vcvt.f64.u32	d7, s15
   1ed50:	ee067a90 	vmov	s13, r7
   1ed54:	eeb86b66 	vcvt.f64.u32	d6, s13
   1ed58:	ee386b46 	vsub.f64	d6, d8, d6
   1ed5c:	ee267b07 	vmul.f64	d7, d6, d7
   1ed60:	eefc7bc7 	vcvt.u32.f64	s15, d7
   1ed64:	ee178a90 	vmov	r8, s15
   1ed68:	e3580009 	cmp	r8, #9
   1ed6c:	83a04001 	movhi	r4, #1
   1ed70:	9a000039 	bls	1ee5c <CString::ftoa(char*, double, unsigned int)+0x254>
   1ed74:	e0844104 	add	r4, r4, r4, lsl #2
   1ed78:	e1a04084 	lsl	r4, r4, #1
   1ed7c:	e1a01004 	mov	r1, r4
   1ed80:	e1a00008 	mov	r0, r8
   1ed84:	ebffaa7e 	bl	9784 <__udivsi3>
   1ed88:	e3500009 	cmp	r0, #9
   1ed8c:	e1a05000 	mov	r5, r0
   1ed90:	8afffff7 	bhi	1ed74 <CString::ftoa(char*, double, unsigned int)+0x16c>
   1ed94:	e28d600c 	add	r6, sp, #12
   1ed98:	e59f70e0 	ldr	r7, [pc, #224]	; 1ee80 <CString::ftoa(char*, double, unsigned int)+0x278>
   1ed9c:	ea000003 	b	1edb0 <CString::ftoa(char*, double, unsigned int)+0x1a8>
   1eda0:	e1a01004 	mov	r1, r4
   1eda4:	e1a00008 	mov	r0, r8
   1eda8:	ebffaa75 	bl	9784 <__udivsi3>
   1edac:	e1a05000 	mov	r5, r0
   1edb0:	e1a00008 	mov	r0, r8
   1edb4:	e1a01004 	mov	r1, r4
   1edb8:	ebffaaae 	bl	9878 <__aeabi_uidivmod>
   1edbc:	e0843497 	umull	r3, r4, r7, r4
   1edc0:	e3550009 	cmp	r5, #9
   1edc4:	e2852030 	add	r2, r5, #48	; 0x30
   1edc8:	82855057 	addhi	r5, r5, #87	; 0x57
   1edcc:	96af5072 	sxtbls	r5, r2
   1edd0:	86af5075 	sxtbhi	r5, r5
   1edd4:	e2866001 	add	r6, r6, #1
   1edd8:	e1b041a4 	lsrs	r4, r4, #3
   1eddc:	e1a08001 	mov	r8, r1
   1ede0:	e5465001 	strb	r5, [r6, #-1]
   1ede4:	1affffed 	bne	1eda0 <CString::ftoa(char*, double, unsigned int)+0x198>
   1ede8:	e28d000c 	add	r0, sp, #12
   1edec:	e5c64000 	strb	r4, [r6]
   1edf0:	eb00061d 	bl	2066c <strlen>
   1edf4:	e0599000 	subs	r9, r9, r0
   1edf8:	0a000006 	beq	1ee18 <CString::ftoa(char*, double, unsigned int)+0x210>
   1edfc:	e3a02030 	mov	r2, #48	; 0x30
   1ee00:	e59d8004 	ldr	r8, [sp, #4]
   1ee04:	e0883009 	add	r3, r8, r9
   1ee08:	e5e82001 	strb	r2, [r8, #1]!
   1ee0c:	e1580003 	cmp	r8, r3
   1ee10:	1afffffc 	bne	1ee08 <CString::ftoa(char*, double, unsigned int)+0x200>
   1ee14:	e08bb009 	add	fp, fp, r9
   1ee18:	e28d100c 	add	r1, sp, #12
   1ee1c:	e1a0000b 	mov	r0, fp
   1ee20:	eb00068f 	bl	20864 <strcpy>
   1ee24:	e1a0000a 	mov	r0, sl
   1ee28:	e28dd01c 	add	sp, sp, #28
   1ee2c:	ecbd8b02 	vpop	{d8}
   1ee30:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ee34:	e1a0000b 	mov	r0, fp
   1ee38:	e59f1044 	ldr	r1, [pc, #68]	; 1ee84 <CString::ftoa(char*, double, unsigned int)+0x27c>
   1ee3c:	eb000688 	bl	20864 <strcpy>
   1ee40:	e1a0000a 	mov	r0, sl
   1ee44:	e28dd01c 	add	sp, sp, #28
   1ee48:	ecbd8b02 	vpop	{d8}
   1ee4c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ee50:	ee175a90 	vmov	r5, s15
   1ee54:	e3a04001 	mov	r4, #1
   1ee58:	eaffff88 	b	1ec80 <CString::ftoa(char*, double, unsigned int)+0x78>
   1ee5c:	ee175a90 	vmov	r5, s15
   1ee60:	e3a04001 	mov	r4, #1
   1ee64:	eaffffca 	b	1ed94 <CString::ftoa(char*, double, unsigned int)+0x18c>
   1ee68:	ed9f7b02 	vldr	d7, [pc, #8]	; 1ee78 <CString::ftoa(char*, double, unsigned int)+0x270>
   1ee6c:	eaffffb7 	b	1ed50 <CString::ftoa(char*, double, unsigned int)+0x148>
   1ee70:	ffe00000 	.word	0xffe00000
   1ee74:	41efffff 	.word	0x41efffff
   1ee78:	00000000 	.word	0x00000000
   1ee7c:	40240000 	.word	0x40240000
   1ee80:	cccccccd 	.word	0xcccccccd
   1ee84:	0002829c 	.word	0x0002829c

0001ee88 <CString::FormatV(char const*, std::__va_list)>:
   1ee88:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ee8c:	e1a0b000 	mov	fp, r0
   1ee90:	e5900004 	ldr	r0, [r0, #4]
   1ee94:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   1ee98:	e3500000 	cmp	r0, #0
   1ee9c:	e1a05001 	mov	r5, r1
   1eea0:	e58d2000 	str	r2, [sp]
   1eea4:	0a000000 	beq	1eeac <CString::FormatV(char const*, std::__va_list)+0x24>
   1eea8:	eb000a40 	bl	217b0 <operator delete[](void*)>
   1eeac:	e3a00040 	mov	r0, #64	; 0x40
   1eeb0:	e58b0008 	str	r0, [fp, #8]
   1eeb4:	eb000a3b 	bl	217a8 <operator new[](unsigned int)>
   1eeb8:	e58b0004 	str	r0, [fp, #4]
   1eebc:	e58b000c 	str	r0, [fp, #12]
   1eec0:	e1d540d0 	ldrsb	r4, [r5]
   1eec4:	e3540000 	cmp	r4, #0
   1eec8:	0a0000a2 	beq	1f158 <CString::FormatV(char const*, std::__va_list)+0x2d0>
   1eecc:	e3540025 	cmp	r4, #37	; 0x25
   1eed0:	13a01001 	movne	r1, #1
   1eed4:	11a0000b 	movne	r0, fp
   1eed8:	1a000152 	bne	1f428 <CString::FormatV(char const*, std::__va_list)+0x5a0>
   1eedc:	e1d560d1 	ldrsb	r6, [r5, #1]
   1eee0:	e3560025 	cmp	r6, #37	; 0x25
   1eee4:	0a000165 	beq	1f480 <CString::FormatV(char const*, std::__va_list)+0x5f8>
   1eee8:	e356002d 	cmp	r6, #45	; 0x2d
   1eeec:	03a03001 	moveq	r3, #1
   1eef0:	13a03000 	movne	r3, #0
   1eef4:	01d560d2 	ldrsbeq	r6, [r5, #2]
   1eef8:	158d3004 	strne	r3, [sp, #4]
   1eefc:	058d3004 	streq	r3, [sp, #4]
   1ef00:	02855002 	addeq	r5, r5, #2
   1ef04:	12855001 	addne	r5, r5, #1
   1ef08:	e3560030 	cmp	r6, #48	; 0x30
   1ef0c:	03a03001 	moveq	r3, #1
   1ef10:	13a03000 	movne	r3, #0
   1ef14:	01d560d1 	ldrsbeq	r6, [r5, #1]
   1ef18:	058d3008 	streq	r3, [sp, #8]
   1ef1c:	00855003 	addeq	r5, r5, r3
   1ef20:	158d3008 	strne	r3, [sp, #8]
   1ef24:	e2463030 	sub	r3, r6, #48	; 0x30
   1ef28:	e6ef3073 	uxtb	r3, r3
   1ef2c:	e3530009 	cmp	r3, #9
   1ef30:	e3a04000 	mov	r4, #0
   1ef34:	8a000007 	bhi	1ef58 <CString::FormatV(char const*, std::__va_list)+0xd0>
   1ef38:	e0844104 	add	r4, r4, r4, lsl #2
   1ef3c:	e0864084 	add	r4, r6, r4, lsl #1
   1ef40:	e1f560d1 	ldrsb	r6, [r5, #1]!
   1ef44:	e2444030 	sub	r4, r4, #48	; 0x30
   1ef48:	e2463030 	sub	r3, r6, #48	; 0x30
   1ef4c:	e6ef3073 	uxtb	r3, r3
   1ef50:	e3530009 	cmp	r3, #9
   1ef54:	9afffff7 	bls	1ef38 <CString::FormatV(char const*, std::__va_list)+0xb0>
   1ef58:	e356002e 	cmp	r6, #46	; 0x2e
   1ef5c:	0a000137 	beq	1f440 <CString::FormatV(char const*, std::__va_list)+0x5b8>
   1ef60:	e3a01006 	mov	r1, #6
   1ef64:	e1d570d0 	ldrsb	r7, [r5]
   1ef68:	e357006c 	cmp	r7, #108	; 0x6c
   1ef6c:	03a02001 	moveq	r2, #1
   1ef70:	01d570d1 	ldrsbeq	r7, [r5, #1]
   1ef74:	00855002 	addeq	r5, r5, r2
   1ef78:	e2473058 	sub	r3, r7, #88	; 0x58
   1ef7c:	e3530020 	cmp	r3, #32
   1ef80:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1ef84:	ea00011c 	b	1f3fc <CString::FormatV(char const*, std::__va_list)+0x574>
   1ef88:	0001f378 	.word	0x0001f378
   1ef8c:	0001f3fc 	.word	0x0001f3fc
   1ef90:	0001f3fc 	.word	0x0001f3fc
   1ef94:	0001f3fc 	.word	0x0001f3fc
   1ef98:	0001f3fc 	.word	0x0001f3fc
   1ef9c:	0001f3fc 	.word	0x0001f3fc
   1efa0:	0001f3fc 	.word	0x0001f3fc
   1efa4:	0001f3fc 	.word	0x0001f3fc
   1efa8:	0001f3fc 	.word	0x0001f3fc
   1efac:	0001f3fc 	.word	0x0001f3fc
   1efb0:	0001f3fc 	.word	0x0001f3fc
   1efb4:	0001f304 	.word	0x0001f304
   1efb8:	0001f1e0 	.word	0x0001f1e0
   1efbc:	0001f3fc 	.word	0x0001f3fc
   1efc0:	0001f168 	.word	0x0001f168
   1efc4:	0001f3fc 	.word	0x0001f3fc
   1efc8:	0001f3fc 	.word	0x0001f3fc
   1efcc:	0001f1e0 	.word	0x0001f1e0
   1efd0:	0001f3fc 	.word	0x0001f3fc
   1efd4:	0001f3fc 	.word	0x0001f3fc
   1efd8:	0001f3fc 	.word	0x0001f3fc
   1efdc:	0001f3fc 	.word	0x0001f3fc
   1efe0:	0001f3fc 	.word	0x0001f3fc
   1efe4:	0001f00c 	.word	0x0001f00c
   1efe8:	0001f378 	.word	0x0001f378
   1efec:	0001f3fc 	.word	0x0001f3fc
   1eff0:	0001f3fc 	.word	0x0001f3fc
   1eff4:	0001f388 	.word	0x0001f388
   1eff8:	0001f3fc 	.word	0x0001f3fc
   1effc:	0001f380 	.word	0x0001f380
   1f000:	0001f3fc 	.word	0x0001f3fc
   1f004:	0001f3fc 	.word	0x0001f3fc
   1f008:	0001f378 	.word	0x0001f378
   1f00c:	e3a09008 	mov	r9, #8
   1f010:	e59d3000 	ldr	r3, [sp]
   1f014:	e5936000 	ldr	r6, [r3]
   1f018:	e2833004 	add	r3, r3, #4
   1f01c:	e1560009 	cmp	r6, r9
   1f020:	e58d3000 	str	r3, [sp]
   1f024:	23a0a001 	movcs	sl, #1
   1f028:	3a0001aa 	bcc	1f6d8 <CString::FormatV(char const*, std::__va_list)+0x850>
   1f02c:	e00a0a99 	mul	sl, r9, sl
   1f030:	e1a00006 	mov	r0, r6
   1f034:	e1a0100a 	mov	r1, sl
   1f038:	ebffa9d1 	bl	9784 <__udivsi3>
   1f03c:	e1590000 	cmp	r9, r0
   1f040:	9afffff9 	bls	1f02c <CString::FormatV(char const*, std::__va_list)+0x1a4>
   1f044:	e1a03000 	mov	r3, r0
   1f048:	e3570058 	cmp	r7, #88	; 0x58
   1f04c:	13a07057 	movne	r7, #87	; 0x57
   1f050:	03a07037 	moveq	r7, #55	; 0x37
   1f054:	e1a02005 	mov	r2, r5
   1f058:	e58d400c 	str	r4, [sp, #12]
   1f05c:	e1a0500a 	mov	r5, sl
   1f060:	e1a04007 	mov	r4, r7
   1f064:	e28d8010 	add	r8, sp, #16
   1f068:	e1a07006 	mov	r7, r6
   1f06c:	e1a0a002 	mov	sl, r2
   1f070:	e1a06003 	mov	r6, r3
   1f074:	ea000003 	b	1f088 <CString::FormatV(char const*, std::__va_list)+0x200>
   1f078:	e1a01005 	mov	r1, r5
   1f07c:	e1a00007 	mov	r0, r7
   1f080:	ebffa9bf 	bl	9784 <__udivsi3>
   1f084:	e1a06000 	mov	r6, r0
   1f088:	e1a00007 	mov	r0, r7
   1f08c:	e1a01005 	mov	r1, r5
   1f090:	ebffa9f8 	bl	9878 <__aeabi_uidivmod>
   1f094:	e3560009 	cmp	r6, #9
   1f098:	e2862030 	add	r2, r6, #48	; 0x30
   1f09c:	80846006 	addhi	r6, r4, r6
   1f0a0:	96af6072 	sxtbls	r6, r2
   1f0a4:	86af6076 	sxtbhi	r6, r6
   1f0a8:	e2888001 	add	r8, r8, #1
   1f0ac:	e1a00005 	mov	r0, r5
   1f0b0:	e1a07001 	mov	r7, r1
   1f0b4:	e5486001 	strb	r6, [r8, #-1]
   1f0b8:	e1a01009 	mov	r1, r9
   1f0bc:	ebffa9b0 	bl	9784 <__udivsi3>
   1f0c0:	e2505000 	subs	r5, r0, #0
   1f0c4:	1affffeb 	bne	1f078 <CString::FormatV(char const*, std::__va_list)+0x1f0>
   1f0c8:	e1a0300a 	mov	r3, sl
   1f0cc:	e1a0a005 	mov	sl, r5
   1f0d0:	e28d0010 	add	r0, sp, #16
   1f0d4:	e5c8a000 	strb	sl, [r8]
   1f0d8:	e1a05003 	mov	r5, r3
   1f0dc:	e59d400c 	ldr	r4, [sp, #12]
   1f0e0:	eb000561 	bl	2066c <strlen>
   1f0e4:	e59d3004 	ldr	r3, [sp, #4]
   1f0e8:	e1a06000 	mov	r6, r0
   1f0ec:	e3530000 	cmp	r3, #0
   1f0f0:	1a0000eb 	bne	1f4a4 <CString::FormatV(char const*, std::__va_list)+0x61c>
   1f0f4:	e1500004 	cmp	r0, r4
   1f0f8:	2a00000f 	bcs	1f13c <CString::FormatV(char const*, std::__va_list)+0x2b4>
   1f0fc:	e59d3008 	ldr	r3, [sp, #8]
   1f100:	e0444000 	sub	r4, r4, r0
   1f104:	e3530000 	cmp	r3, #0
   1f108:	e1a01004 	mov	r1, r4
   1f10c:	e1a0000b 	mov	r0, fp
   1f110:	03a07020 	moveq	r7, #32
   1f114:	13a07030 	movne	r7, #48	; 0x30
   1f118:	ebfffd73 	bl	1e6ec <CString::ReserveSpace(unsigned int) [clone .part.0]>
   1f11c:	e2443001 	sub	r3, r4, #1
   1f120:	e59b200c 	ldr	r2, [fp, #12]
   1f124:	e2433001 	sub	r3, r3, #1
   1f128:	e2821001 	add	r1, r2, #1
   1f12c:	e3730001 	cmn	r3, #1
   1f130:	e58b100c 	str	r1, [fp, #12]
   1f134:	e5c27000 	strb	r7, [r2]
   1f138:	1afffff8 	bne	1f120 <CString::FormatV(char const*, std::__va_list)+0x298>
   1f13c:	e28d1010 	add	r1, sp, #16
   1f140:	e1a0000b 	mov	r0, fp
   1f144:	ebfffe0e 	bl	1e984 <CString::PutString(char const*)>
   1f148:	e2855001 	add	r5, r5, #1
   1f14c:	e1d540d0 	ldrsb	r4, [r5]
   1f150:	e3540000 	cmp	r4, #0
   1f154:	1affff5c 	bne	1eecc <CString::FormatV(char const*, std::__va_list)+0x44>
   1f158:	e59b300c 	ldr	r3, [fp, #12]
   1f15c:	e5c34000 	strb	r4, [r3]
   1f160:	e28dd02c 	add	sp, sp, #44	; 0x2c
   1f164:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f168:	e59d3000 	ldr	r3, [sp]
   1f16c:	e28d0010 	add	r0, sp, #16
   1f170:	e2833007 	add	r3, r3, #7
   1f174:	e3c33007 	bic	r3, r3, #7
   1f178:	ed930b00 	vldr	d0, [r3]
   1f17c:	e2833008 	add	r3, r3, #8
   1f180:	e58d3000 	str	r3, [sp]
   1f184:	ebfffe9f 	bl	1ec08 <CString::ftoa(char*, double, unsigned int)>
   1f188:	e28d0010 	add	r0, sp, #16
   1f18c:	eb000536 	bl	2066c <strlen>
   1f190:	e59d3004 	ldr	r3, [sp, #4]
   1f194:	e1a06000 	mov	r6, r0
   1f198:	e3530000 	cmp	r3, #0
   1f19c:	1a000108 	bne	1f5c4 <CString::FormatV(char const*, std::__va_list)+0x73c>
   1f1a0:	e1500004 	cmp	r0, r4
   1f1a4:	2affffe4 	bcs	1f13c <CString::FormatV(char const*, std::__va_list)+0x2b4>
   1f1a8:	e0444000 	sub	r4, r4, r0
   1f1ac:	e1a01004 	mov	r1, r4
   1f1b0:	e1a0000b 	mov	r0, fp
   1f1b4:	ebfffd4c 	bl	1e6ec <CString::ReserveSpace(unsigned int) [clone .part.0]>
   1f1b8:	e2443001 	sub	r3, r4, #1
   1f1bc:	e59b200c 	ldr	r2, [fp, #12]
   1f1c0:	e2433001 	sub	r3, r3, #1
   1f1c4:	e2821001 	add	r1, r2, #1
   1f1c8:	e58b100c 	str	r1, [fp, #12]
   1f1cc:	e3a01020 	mov	r1, #32
   1f1d0:	e3730001 	cmn	r3, #1
   1f1d4:	e5c21000 	strb	r1, [r2]
   1f1d8:	1afffff7 	bne	1f1bc <CString::FormatV(char const*, std::__va_list)+0x334>
   1f1dc:	eaffffd6 	b	1f13c <CString::FormatV(char const*, std::__va_list)+0x2b4>
   1f1e0:	e59d3000 	ldr	r3, [sp]
   1f1e4:	e5936000 	ldr	r6, [r3]
   1f1e8:	e2833004 	add	r3, r3, #4
   1f1ec:	e3560000 	cmp	r6, #0
   1f1f0:	b3a08001 	movlt	r8, #1
   1f1f4:	a3a08000 	movge	r8, #0
   1f1f8:	e58d3000 	str	r3, [sp]
   1f1fc:	b1a03008 	movlt	r3, r8
   1f200:	b2666000 	rsblt	r6, r6, #0
   1f204:	b58d300c 	strlt	r3, [sp, #12]
   1f208:	a58d800c 	strge	r8, [sp, #12]
   1f20c:	e3560009 	cmp	r6, #9
   1f210:	e1a07006 	mov	r7, r6
   1f214:	c3a0a001 	movgt	sl, #1
   1f218:	da00012b 	ble	1f6cc <CString::FormatV(char const*, std::__va_list)+0x844>
   1f21c:	e08aa10a 	add	sl, sl, sl, lsl #2
   1f220:	e1a0a08a 	lsl	sl, sl, #1
   1f224:	e1a0100a 	mov	r1, sl
   1f228:	e1a00006 	mov	r0, r6
   1f22c:	ebffa954 	bl	9784 <__udivsi3>
   1f230:	e3500009 	cmp	r0, #9
   1f234:	8afffff8 	bhi	1f21c <CString::FormatV(char const*, std::__va_list)+0x394>
   1f238:	e1a09000 	mov	r9, r0
   1f23c:	e28d6010 	add	r6, sp, #16
   1f240:	ea000003 	b	1f254 <CString::FormatV(char const*, std::__va_list)+0x3cc>
   1f244:	e1a0100a 	mov	r1, sl
   1f248:	e1a00007 	mov	r0, r7
   1f24c:	ebffa94c 	bl	9784 <__udivsi3>
   1f250:	e1a09000 	mov	r9, r0
   1f254:	e1a00007 	mov	r0, r7
   1f258:	e1a0100a 	mov	r1, sl
   1f25c:	ebffa985 	bl	9878 <__aeabi_uidivmod>
   1f260:	e3590009 	cmp	r9, #9
   1f264:	e2893030 	add	r3, r9, #48	; 0x30
   1f268:	96af9073 	sxtbls	r9, r3
   1f26c:	e59f3494 	ldr	r3, [pc, #1172]	; 1f708 <CString::FormatV(char const*, std::__va_list)+0x880>
   1f270:	82899057 	addhi	r9, r9, #87	; 0x57
   1f274:	e08a3a93 	umull	r3, sl, r3, sl
   1f278:	86af9079 	sxtbhi	r9, r9
   1f27c:	e2866001 	add	r6, r6, #1
   1f280:	e1b0a1aa 	lsrs	sl, sl, #3
   1f284:	e1a07001 	mov	r7, r1
   1f288:	e5469001 	strb	r9, [r6, #-1]
   1f28c:	1affffec 	bne	1f244 <CString::FormatV(char const*, std::__va_list)+0x3bc>
   1f290:	e28d0010 	add	r0, sp, #16
   1f294:	e5c6a000 	strb	sl, [r6]
   1f298:	eb0004f3 	bl	2066c <strlen>
   1f29c:	e59d3004 	ldr	r3, [sp, #4]
   1f2a0:	e0888000 	add	r8, r8, r0
   1f2a4:	e3530000 	cmp	r3, #0
   1f2a8:	0a000090 	beq	1f4f0 <CString::FormatV(char const*, std::__va_list)+0x668>
   1f2ac:	e59d300c 	ldr	r3, [sp, #12]
   1f2b0:	e3530000 	cmp	r3, #0
   1f2b4:	1a0000fb 	bne	1f6a8 <CString::FormatV(char const*, std::__va_list)+0x820>
   1f2b8:	e28d1010 	add	r1, sp, #16
   1f2bc:	e1a0000b 	mov	r0, fp
   1f2c0:	ebfffdaf 	bl	1e984 <CString::PutString(char const*)>
   1f2c4:	e1580004 	cmp	r8, r4
   1f2c8:	2affff9e 	bcs	1f148 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   1f2cc:	e0444008 	sub	r4, r4, r8
   1f2d0:	e1a01004 	mov	r1, r4
   1f2d4:	e1a0000b 	mov	r0, fp
   1f2d8:	ebfffd03 	bl	1e6ec <CString::ReserveSpace(unsigned int) [clone .part.0]>
   1f2dc:	e2443001 	sub	r3, r4, #1
   1f2e0:	e59b200c 	ldr	r2, [fp, #12]
   1f2e4:	e2433001 	sub	r3, r3, #1
   1f2e8:	e2821001 	add	r1, r2, #1
   1f2ec:	e58b100c 	str	r1, [fp, #12]
   1f2f0:	e3a01020 	mov	r1, #32
   1f2f4:	e3730001 	cmn	r3, #1
   1f2f8:	e5c21000 	strb	r1, [r2]
   1f2fc:	1afffff7 	bne	1f2e0 <CString::FormatV(char const*, std::__va_list)+0x458>
   1f300:	eaffff90 	b	1f148 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   1f304:	e59d3004 	ldr	r3, [sp, #4]
   1f308:	e3530000 	cmp	r3, #0
   1f30c:	e59d3000 	ldr	r3, [sp]
   1f310:	e2836004 	add	r6, r3, #4
   1f314:	e1d370d0 	ldrsb	r7, [r3]
   1f318:	1a000092 	bne	1f568 <CString::FormatV(char const*, std::__va_list)+0x6e0>
   1f31c:	e3540001 	cmp	r4, #1
   1f320:	9a00000b 	bls	1f354 <CString::FormatV(char const*, std::__va_list)+0x4cc>
   1f324:	e2441001 	sub	r1, r4, #1
   1f328:	e1a0000b 	mov	r0, fp
   1f32c:	ebfffcee 	bl	1e6ec <CString::ReserveSpace(unsigned int) [clone .part.0]>
   1f330:	e2444002 	sub	r4, r4, #2
   1f334:	e59b300c 	ldr	r3, [fp, #12]
   1f338:	e2444001 	sub	r4, r4, #1
   1f33c:	e2832001 	add	r2, r3, #1
   1f340:	e58b200c 	str	r2, [fp, #12]
   1f344:	e3a02020 	mov	r2, #32
   1f348:	e3740001 	cmn	r4, #1
   1f34c:	e5c32000 	strb	r2, [r3]
   1f350:	1afffff7 	bne	1f334 <CString::FormatV(char const*, std::__va_list)+0x4ac>
   1f354:	e3a01001 	mov	r1, #1
   1f358:	e1a0000b 	mov	r0, fp
   1f35c:	ebfffce2 	bl	1e6ec <CString::ReserveSpace(unsigned int) [clone .part.0]>
   1f360:	e59b300c 	ldr	r3, [fp, #12]
   1f364:	e58d6000 	str	r6, [sp]
   1f368:	e2832001 	add	r2, r3, #1
   1f36c:	e58b200c 	str	r2, [fp, #12]
   1f370:	e5c37000 	strb	r7, [r3]
   1f374:	eaffff73 	b	1f148 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   1f378:	e3a09010 	mov	r9, #16
   1f37c:	eaffff23 	b	1f010 <CString::FormatV(char const*, std::__va_list)+0x188>
   1f380:	e3a0900a 	mov	r9, #10
   1f384:	eaffff21 	b	1f010 <CString::FormatV(char const*, std::__va_list)+0x188>
   1f388:	e59d3000 	ldr	r3, [sp]
   1f38c:	e5938000 	ldr	r8, [r3]
   1f390:	e2836004 	add	r6, r3, #4
   1f394:	e1a00008 	mov	r0, r8
   1f398:	eb0004b3 	bl	2066c <strlen>
   1f39c:	e59d3004 	ldr	r3, [sp, #4]
   1f3a0:	e1a07000 	mov	r7, r0
   1f3a4:	e3530000 	cmp	r3, #0
   1f3a8:	1a000098 	bne	1f610 <CString::FormatV(char const*, std::__va_list)+0x788>
   1f3ac:	e1500004 	cmp	r0, r4
   1f3b0:	2a00000c 	bcs	1f3e8 <CString::FormatV(char const*, std::__va_list)+0x560>
   1f3b4:	e0444000 	sub	r4, r4, r0
   1f3b8:	e1a01004 	mov	r1, r4
   1f3bc:	e1a0000b 	mov	r0, fp
   1f3c0:	ebfffcc9 	bl	1e6ec <CString::ReserveSpace(unsigned int) [clone .part.0]>
   1f3c4:	e2443001 	sub	r3, r4, #1
   1f3c8:	e59b200c 	ldr	r2, [fp, #12]
   1f3cc:	e2433001 	sub	r3, r3, #1
   1f3d0:	e2821001 	add	r1, r2, #1
   1f3d4:	e58b100c 	str	r1, [fp, #12]
   1f3d8:	e3a01020 	mov	r1, #32
   1f3dc:	e3730001 	cmn	r3, #1
   1f3e0:	e5c21000 	strb	r1, [r2]
   1f3e4:	1afffff7 	bne	1f3c8 <CString::FormatV(char const*, std::__va_list)+0x540>
   1f3e8:	e1a01008 	mov	r1, r8
   1f3ec:	e1a0000b 	mov	r0, fp
   1f3f0:	e58d6000 	str	r6, [sp]
   1f3f4:	ebfffd62 	bl	1e984 <CString::PutString(char const*)>
   1f3f8:	eaffff52 	b	1f148 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   1f3fc:	e3a01001 	mov	r1, #1
   1f400:	e1a0000b 	mov	r0, fp
   1f404:	ebfffcb8 	bl	1e6ec <CString::ReserveSpace(unsigned int) [clone .part.0]>
   1f408:	e3a01001 	mov	r1, #1
   1f40c:	e59b300c 	ldr	r3, [fp, #12]
   1f410:	e1a0000b 	mov	r0, fp
   1f414:	e0832001 	add	r2, r3, r1
   1f418:	e58b200c 	str	r2, [fp, #12]
   1f41c:	e3a02025 	mov	r2, #37	; 0x25
   1f420:	e5c32000 	strb	r2, [r3]
   1f424:	e1d540d0 	ldrsb	r4, [r5]
   1f428:	ebfffcaf 	bl	1e6ec <CString::ReserveSpace(unsigned int) [clone .part.0]>
   1f42c:	e59b300c 	ldr	r3, [fp, #12]
   1f430:	e2832001 	add	r2, r3, #1
   1f434:	e58b200c 	str	r2, [fp, #12]
   1f438:	e5c34000 	strb	r4, [r3]
   1f43c:	eaffff41 	b	1f148 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   1f440:	e1d570d1 	ldrsb	r7, [r5, #1]
   1f444:	e3a01000 	mov	r1, #0
   1f448:	e2473030 	sub	r3, r7, #48	; 0x30
   1f44c:	e6ef3073 	uxtb	r3, r3
   1f450:	e3530009 	cmp	r3, #9
   1f454:	e2855001 	add	r5, r5, #1
   1f458:	8afffec2 	bhi	1ef68 <CString::FormatV(char const*, std::__va_list)+0xe0>
   1f45c:	e0811101 	add	r1, r1, r1, lsl #2
   1f460:	e0871081 	add	r1, r7, r1, lsl #1
   1f464:	e1f570d1 	ldrsb	r7, [r5, #1]!
   1f468:	e2411030 	sub	r1, r1, #48	; 0x30
   1f46c:	e2473030 	sub	r3, r7, #48	; 0x30
   1f470:	e6ef3073 	uxtb	r3, r3
   1f474:	e3530009 	cmp	r3, #9
   1f478:	9afffff7 	bls	1f45c <CString::FormatV(char const*, std::__va_list)+0x5d4>
   1f47c:	eafffeb9 	b	1ef68 <CString::FormatV(char const*, std::__va_list)+0xe0>
   1f480:	e3a01001 	mov	r1, #1
   1f484:	e1a0000b 	mov	r0, fp
   1f488:	ebfffc97 	bl	1e6ec <CString::ReserveSpace(unsigned int) [clone .part.0]>
   1f48c:	e59b300c 	ldr	r3, [fp, #12]
   1f490:	e2855002 	add	r5, r5, #2
   1f494:	e2832001 	add	r2, r3, #1
   1f498:	e58b200c 	str	r2, [fp, #12]
   1f49c:	e5c36000 	strb	r6, [r3]
   1f4a0:	eafffe86 	b	1eec0 <CString::FormatV(char const*, std::__va_list)+0x38>
   1f4a4:	e28d1010 	add	r1, sp, #16
   1f4a8:	e1a0000b 	mov	r0, fp
   1f4ac:	ebfffd34 	bl	1e984 <CString::PutString(char const*)>
   1f4b0:	e1560004 	cmp	r6, r4
   1f4b4:	2affff23 	bcs	1f148 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   1f4b8:	e0444006 	sub	r4, r4, r6
   1f4bc:	e1a01004 	mov	r1, r4
   1f4c0:	e1a0000b 	mov	r0, fp
   1f4c4:	ebfffc88 	bl	1e6ec <CString::ReserveSpace(unsigned int) [clone .part.0]>
   1f4c8:	e2443001 	sub	r3, r4, #1
   1f4cc:	e59b200c 	ldr	r2, [fp, #12]
   1f4d0:	e2433001 	sub	r3, r3, #1
   1f4d4:	e2821001 	add	r1, r2, #1
   1f4d8:	e58b100c 	str	r1, [fp, #12]
   1f4dc:	e3a01020 	mov	r1, #32
   1f4e0:	e3730001 	cmn	r3, #1
   1f4e4:	e5c21000 	strb	r1, [r2]
   1f4e8:	1afffff7 	bne	1f4cc <CString::FormatV(char const*, std::__va_list)+0x644>
   1f4ec:	eaffff15 	b	1f148 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   1f4f0:	e59d3008 	ldr	r3, [sp, #8]
   1f4f4:	e3530000 	cmp	r3, #0
   1f4f8:	1a000057 	bne	1f65c <CString::FormatV(char const*, std::__va_list)+0x7d4>
   1f4fc:	e1580004 	cmp	r8, r4
   1f500:	2a00000c 	bcs	1f538 <CString::FormatV(char const*, std::__va_list)+0x6b0>
   1f504:	e0444008 	sub	r4, r4, r8
   1f508:	e1a01004 	mov	r1, r4
   1f50c:	e1a0000b 	mov	r0, fp
   1f510:	ebfffc75 	bl	1e6ec <CString::ReserveSpace(unsigned int) [clone .part.0]>
   1f514:	e2443001 	sub	r3, r4, #1
   1f518:	e59b200c 	ldr	r2, [fp, #12]
   1f51c:	e2433001 	sub	r3, r3, #1
   1f520:	e2821001 	add	r1, r2, #1
   1f524:	e58b100c 	str	r1, [fp, #12]
   1f528:	e3a01020 	mov	r1, #32
   1f52c:	e3730001 	cmn	r3, #1
   1f530:	e5c21000 	strb	r1, [r2]
   1f534:	1afffff7 	bne	1f518 <CString::FormatV(char const*, std::__va_list)+0x690>
   1f538:	e59d300c 	ldr	r3, [sp, #12]
   1f53c:	e3530000 	cmp	r3, #0
   1f540:	0afffefd 	beq	1f13c <CString::FormatV(char const*, std::__va_list)+0x2b4>
   1f544:	e3a01001 	mov	r1, #1
   1f548:	e1a0000b 	mov	r0, fp
   1f54c:	ebfffc66 	bl	1e6ec <CString::ReserveSpace(unsigned int) [clone .part.0]>
   1f550:	e3a0202d 	mov	r2, #45	; 0x2d
   1f554:	e59b300c 	ldr	r3, [fp, #12]
   1f558:	e2831001 	add	r1, r3, #1
   1f55c:	e58b100c 	str	r1, [fp, #12]
   1f560:	e5c32000 	strb	r2, [r3]
   1f564:	eafffef4 	b	1f13c <CString::FormatV(char const*, std::__va_list)+0x2b4>
   1f568:	e3a01001 	mov	r1, #1
   1f56c:	e1a0000b 	mov	r0, fp
   1f570:	ebfffc5d 	bl	1e6ec <CString::ReserveSpace(unsigned int) [clone .part.0]>
   1f574:	e59b300c 	ldr	r3, [fp, #12]
   1f578:	e3540001 	cmp	r4, #1
   1f57c:	e2832001 	add	r2, r3, #1
   1f580:	e58b200c 	str	r2, [fp, #12]
   1f584:	e5c37000 	strb	r7, [r3]
   1f588:	9a00000b 	bls	1f5bc <CString::FormatV(char const*, std::__va_list)+0x734>
   1f58c:	e2441001 	sub	r1, r4, #1
   1f590:	e1a0000b 	mov	r0, fp
   1f594:	ebfffc54 	bl	1e6ec <CString::ReserveSpace(unsigned int) [clone .part.0]>
   1f598:	e2444002 	sub	r4, r4, #2
   1f59c:	e59b300c 	ldr	r3, [fp, #12]
   1f5a0:	e2444001 	sub	r4, r4, #1
   1f5a4:	e2832001 	add	r2, r3, #1
   1f5a8:	e58b200c 	str	r2, [fp, #12]
   1f5ac:	e3a02020 	mov	r2, #32
   1f5b0:	e3740001 	cmn	r4, #1
   1f5b4:	e5c32000 	strb	r2, [r3]
   1f5b8:	1afffff7 	bne	1f59c <CString::FormatV(char const*, std::__va_list)+0x714>
   1f5bc:	e58d6000 	str	r6, [sp]
   1f5c0:	eafffee0 	b	1f148 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   1f5c4:	e28d1010 	add	r1, sp, #16
   1f5c8:	e1a0000b 	mov	r0, fp
   1f5cc:	ebfffcec 	bl	1e984 <CString::PutString(char const*)>
   1f5d0:	e1560004 	cmp	r6, r4
   1f5d4:	2afffedb 	bcs	1f148 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   1f5d8:	e0444006 	sub	r4, r4, r6
   1f5dc:	e1a01004 	mov	r1, r4
   1f5e0:	e1a0000b 	mov	r0, fp
   1f5e4:	ebfffc40 	bl	1e6ec <CString::ReserveSpace(unsigned int) [clone .part.0]>
   1f5e8:	e2443001 	sub	r3, r4, #1
   1f5ec:	e59b200c 	ldr	r2, [fp, #12]
   1f5f0:	e2433001 	sub	r3, r3, #1
   1f5f4:	e2821001 	add	r1, r2, #1
   1f5f8:	e58b100c 	str	r1, [fp, #12]
   1f5fc:	e3a01020 	mov	r1, #32
   1f600:	e3730001 	cmn	r3, #1
   1f604:	e5c21000 	strb	r1, [r2]
   1f608:	1afffff7 	bne	1f5ec <CString::FormatV(char const*, std::__va_list)+0x764>
   1f60c:	eafffecd 	b	1f148 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   1f610:	e1a01008 	mov	r1, r8
   1f614:	e1a0000b 	mov	r0, fp
   1f618:	ebfffcd9 	bl	1e984 <CString::PutString(char const*)>
   1f61c:	e1570004 	cmp	r7, r4
   1f620:	2affffe5 	bcs	1f5bc <CString::FormatV(char const*, std::__va_list)+0x734>
   1f624:	e0444007 	sub	r4, r4, r7
   1f628:	e1a01004 	mov	r1, r4
   1f62c:	e1a0000b 	mov	r0, fp
   1f630:	ebfffc2d 	bl	1e6ec <CString::ReserveSpace(unsigned int) [clone .part.0]>
   1f634:	e2443001 	sub	r3, r4, #1
   1f638:	e59b200c 	ldr	r2, [fp, #12]
   1f63c:	e2433001 	sub	r3, r3, #1
   1f640:	e2821001 	add	r1, r2, #1
   1f644:	e58b100c 	str	r1, [fp, #12]
   1f648:	e3a01020 	mov	r1, #32
   1f64c:	e3730001 	cmn	r3, #1
   1f650:	e5c21000 	strb	r1, [r2]
   1f654:	1afffff7 	bne	1f638 <CString::FormatV(char const*, std::__va_list)+0x7b0>
   1f658:	eaffffd7 	b	1f5bc <CString::FormatV(char const*, std::__va_list)+0x734>
   1f65c:	e59d300c 	ldr	r3, [sp, #12]
   1f660:	e3530000 	cmp	r3, #0
   1f664:	1a00001e 	bne	1f6e4 <CString::FormatV(char const*, std::__va_list)+0x85c>
   1f668:	e1580004 	cmp	r8, r4
   1f66c:	2afffeb2 	bcs	1f13c <CString::FormatV(char const*, std::__va_list)+0x2b4>
   1f670:	e0444008 	sub	r4, r4, r8
   1f674:	e1a0000b 	mov	r0, fp
   1f678:	e1a01004 	mov	r1, r4
   1f67c:	ebfffc1a 	bl	1e6ec <CString::ReserveSpace(unsigned int) [clone .part.0]>
   1f680:	e3a00030 	mov	r0, #48	; 0x30
   1f684:	e2443001 	sub	r3, r4, #1
   1f688:	e59b200c 	ldr	r2, [fp, #12]
   1f68c:	e2433001 	sub	r3, r3, #1
   1f690:	e2821001 	add	r1, r2, #1
   1f694:	e3730001 	cmn	r3, #1
   1f698:	e58b100c 	str	r1, [fp, #12]
   1f69c:	e5c20000 	strb	r0, [r2]
   1f6a0:	1afffff8 	bne	1f688 <CString::FormatV(char const*, std::__va_list)+0x800>
   1f6a4:	eafffea4 	b	1f13c <CString::FormatV(char const*, std::__va_list)+0x2b4>
   1f6a8:	e3a01001 	mov	r1, #1
   1f6ac:	e1a0000b 	mov	r0, fp
   1f6b0:	ebfffc0d 	bl	1e6ec <CString::ReserveSpace(unsigned int) [clone .part.0]>
   1f6b4:	e3a0202d 	mov	r2, #45	; 0x2d
   1f6b8:	e59b300c 	ldr	r3, [fp, #12]
   1f6bc:	e2831001 	add	r1, r3, #1
   1f6c0:	e58b100c 	str	r1, [fp, #12]
   1f6c4:	e5c32000 	strb	r2, [r3]
   1f6c8:	eafffefa 	b	1f2b8 <CString::FormatV(char const*, std::__va_list)+0x430>
   1f6cc:	e1a09006 	mov	r9, r6
   1f6d0:	e3a0a001 	mov	sl, #1
   1f6d4:	eafffed8 	b	1f23c <CString::FormatV(char const*, std::__va_list)+0x3b4>
   1f6d8:	e1a03006 	mov	r3, r6
   1f6dc:	e3a0a001 	mov	sl, #1
   1f6e0:	eafffe58 	b	1f048 <CString::FormatV(char const*, std::__va_list)+0x1c0>
   1f6e4:	e3a01001 	mov	r1, #1
   1f6e8:	e1a0000b 	mov	r0, fp
   1f6ec:	ebfffbfe 	bl	1e6ec <CString::ReserveSpace(unsigned int) [clone .part.0]>
   1f6f0:	e3a0202d 	mov	r2, #45	; 0x2d
   1f6f4:	e59b300c 	ldr	r3, [fp, #12]
   1f6f8:	e2831001 	add	r1, r3, #1
   1f6fc:	e58b100c 	str	r1, [fp, #12]
   1f700:	e5c32000 	strb	r2, [r3]
   1f704:	eaffffd7 	b	1f668 <CString::FormatV(char const*, std::__va_list)+0x7e0>
   1f708:	cccccccd 	.word	0xcccccccd

0001f70c <CString::Format(char const*, ...)>:
   1f70c:	e92d000e 	push	{r1, r2, r3}
   1f710:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   1f714:	e24dd008 	sub	sp, sp, #8
   1f718:	e28d3010 	add	r3, sp, #16
   1f71c:	e1a02003 	mov	r2, r3
   1f720:	e59d100c 	ldr	r1, [sp, #12]
   1f724:	e58d3004 	str	r3, [sp, #4]
   1f728:	ebfffdd6 	bl	1ee88 <CString::FormatV(char const*, std::__va_list)>
   1f72c:	e28dd008 	add	sp, sp, #8
   1f730:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   1f734:	e28dd00c 	add	sp, sp, #12
   1f738:	e12fff1e 	bx	lr

0001f73c <__aeabi_atexit>:
   1f73c:	e12fff1e 	bx	lr

0001f740 <halt>:
   1f740:	f10c0080 	cpsid	i
   1f744:	f10c0040 	cpsid	f
   1f748:	eafffffe 	b	1f748 <halt+0x8>

0001f74c <reboot>:
   1f74c:	e3a03000 	mov	r3, #0
   1f750:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   1f754:	e59f3010 	ldr	r3, [pc, #16]	; 1f76c <reboot+0x20>
   1f758:	e59f1010 	ldr	r1, [pc, #16]	; 1f770 <reboot+0x24>
   1f75c:	e59f2010 	ldr	r2, [pc, #16]	; 1f774 <reboot+0x28>
   1f760:	e5831024 	str	r1, [r3, #36]	; 0x24
   1f764:	e583201c 	str	r2, [r3, #28]
   1f768:	eafffffe 	b	1f768 <reboot+0x1c>
   1f76c:	20100000 	.word	0x20100000
   1f770:	5a000001 	.word	0x5a000001
   1f774:	5a000020 	.word	0x5a000020

0001f778 <sysinit>:
   1f778:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   1f77c:	e24dd01c 	sub	sp, sp, #28
   1f780:	f1080040 	cpsie	f
   1f784:	ee113f50 	mrc	15, 0, r3, cr1, cr0, {2}
   1f788:	e383360f 	orr	r3, r3, #15728640	; 0xf00000
   1f78c:	ee013f50 	mcr	15, 0, r3, cr1, cr0, {2}
   1f790:	e3a02000 	mov	r2, #0
   1f794:	ee072f95 	mcr	15, 0, r2, cr7, cr5, {4}
   1f798:	e3a03101 	mov	r3, #1073741824	; 0x40000000
   1f79c:	eee83a10 	vmsr	fpexc, r3
   1f7a0:	e3a03402 	mov	r3, #33554432	; 0x2000000
   1f7a4:	eee13a10 	vmsr	fpscr, r3
   1f7a8:	e59f3068 	ldr	r3, [pc, #104]	; 1f818 <sysinit+0xa0>
   1f7ac:	e59f1068 	ldr	r1, [pc, #104]	; 1f81c <sysinit+0xa4>
   1f7b0:	e1530001 	cmp	r3, r1
   1f7b4:	2a000002 	bcs	1f7c4 <sysinit+0x4c>
   1f7b8:	e4c32001 	strb	r2, [r3], #1
   1f7bc:	e1530001 	cmp	r3, r1
   1f7c0:	1afffffc 	bne	1f7b8 <sysinit+0x40>
   1f7c4:	e1a0000d 	mov	r0, sp
   1f7c8:	ebfff61a 	bl	1d038 <CMachineInfo::CMachineInfo()>
   1f7cc:	e59f504c 	ldr	r5, [pc, #76]	; 1f820 <sysinit+0xa8>
   1f7d0:	e59f304c 	ldr	r3, [pc, #76]	; 1f824 <sysinit+0xac>
   1f7d4:	e1550003 	cmp	r5, r3
   1f7d8:	2a000009 	bcs	1f804 <sysinit+0x8c>
   1f7dc:	e1e06005 	mvn	r6, r5
   1f7e0:	e3a04000 	mov	r4, #0
   1f7e4:	e0866003 	add	r6, r6, r3
   1f7e8:	e1a06126 	lsr	r6, r6, #2
   1f7ec:	e2866001 	add	r6, r6, #1
   1f7f0:	e2844001 	add	r4, r4, #1
   1f7f4:	e4953004 	ldr	r3, [r5], #4
   1f7f8:	e12fff33 	blx	r3
   1f7fc:	e1540006 	cmp	r4, r6
   1f800:	1afffffa 	bne	1f7f0 <sysinit+0x78>
   1f804:	ebffa217 	bl	8068 <main>
   1f808:	e3500001 	cmp	r0, #1
   1f80c:	0a000000 	beq	1f814 <sysinit+0x9c>
   1f810:	ebffffca 	bl	1f740 <halt>
   1f814:	ebffffcc 	bl	1f74c <reboot>
   1f818:	0002998c 	.word	0x0002998c
   1f81c:	00029a5c 	.word	0x00029a5c
   1f820:	00029744 	.word	0x00029744
   1f824:	00029754 	.word	0x00029754

0001f828 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]>:
   1f828:	e2800001 	add	r0, r0, #1
   1f82c:	e3a03000 	mov	r3, #0
   1f830:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   1f834:	e59f3020 	ldr	r3, [pc, #32]	; 1f85c <CTimer::SimpleusDelay(unsigned int) [clone .part.0]+0x34>
   1f838:	e1a01003 	mov	r1, r3
   1f83c:	e5932004 	ldr	r2, [r3, #4]
   1f840:	e5913004 	ldr	r3, [r1, #4]
   1f844:	e0433002 	sub	r3, r3, r2
   1f848:	e1500003 	cmp	r0, r3
   1f84c:	8afffffb 	bhi	1f840 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]+0x18>
   1f850:	e3a03000 	mov	r3, #0
   1f854:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   1f858:	e12fff1e 	bx	lr
   1f85c:	20003000 	.word	0x20003000

0001f860 <CTimer::CTimer(CInterruptSystem*)>:
   1f860:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1f864:	e3a05000 	mov	r5, #0
   1f868:	e3a07001 	mov	r7, #1
   1f86c:	e1a04000 	mov	r4, r0
   1f870:	e59f605c 	ldr	r6, [pc, #92]	; 1f8d4 <CTimer::CTimer(CInterruptSystem*)+0x74>
   1f874:	e5805004 	str	r5, [r0, #4]
   1f878:	e5801000 	str	r1, [r0]
   1f87c:	e5805008 	str	r5, [r0, #8]
   1f880:	e5805014 	str	r5, [r0, #20]
   1f884:	e5807010 	str	r7, [r0, #16]
   1f888:	e580500c 	str	r5, [r0, #12]
   1f88c:	e2800018 	add	r0, r0, #24
   1f890:	eb000be8 	bl	22838 <CPtrList::CPtrList()>
   1f894:	e5961000 	ldr	r1, [r6]
   1f898:	e59f2038 	ldr	r2, [pc, #56]	; 1f8d8 <CTimer::CTimer(CInterruptSystem*)+0x78>
   1f89c:	e59f3038 	ldr	r3, [pc, #56]	; 1f8dc <CTimer::CTimer(CInterruptSystem*)+0x7c>
   1f8a0:	e1510005 	cmp	r1, r5
   1f8a4:	e584701c 	str	r7, [r4, #28]
   1f8a8:	e5845028 	str	r5, [r4, #40]	; 0x28
   1f8ac:	e5842020 	str	r2, [r4, #32]
   1f8b0:	e5843024 	str	r3, [r4, #36]	; 0x24
   1f8b4:	0a000003 	beq	1f8c8 <CTimer::CTimer(CInterruptSystem*)+0x68>
   1f8b8:	e3a0203d 	mov	r2, #61	; 0x3d
   1f8bc:	e59f101c 	ldr	r1, [pc, #28]	; 1f8e0 <CTimer::CTimer(CInterruptSystem*)+0x80>
   1f8c0:	e59f001c 	ldr	r0, [pc, #28]	; 1f8e4 <CTimer::CTimer(CInterruptSystem*)+0x84>
   1f8c4:	ebffea22 	bl	1a154 <assertion_failed>
   1f8c8:	e5864000 	str	r4, [r6]
   1f8cc:	e1a00004 	mov	r0, r4
   1f8d0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1f8d4:	000299d4 	.word	0x000299d4
   1f8d8:	00055730 	.word	0x00055730
   1f8dc:	0000015e 	.word	0x0000015e
   1f8e0:	000282e0 	.word	0x000282e0
   1f8e4:	000282ec 	.word	0x000282ec

0001f8e8 <CTimer::~CTimer()>:
   1f8e8:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f8ec:	e1a0a000 	mov	sl, r0
   1f8f0:	e5900000 	ldr	r0, [r0]
   1f8f4:	e3500000 	cmp	r0, #0
   1f8f8:	0a000028 	beq	1f9a0 <CTimer::~CTimer()+0xb8>
   1f8fc:	e3a01003 	mov	r1, #3
   1f900:	ebfff1a8 	bl	1bfa8 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   1f904:	e3a0904b 	mov	r9, #75	; 0x4b
   1f908:	e59f70a8 	ldr	r7, [pc, #168]	; 1f9b8 <CTimer::~CTimer()+0xd0>
   1f90c:	e59f60a8 	ldr	r6, [pc, #168]	; 1f9bc <CTimer::~CTimer()+0xd4>
   1f910:	e59f80a8 	ldr	r8, [pc, #168]	; 1f9c0 <CTimer::~CTimer()+0xd8>
   1f914:	e28a4018 	add	r4, sl, #24
   1f918:	ea000011 	b	1f964 <CTimer::~CTimer()+0x7c>
   1f91c:	e1a01005 	mov	r1, r5
   1f920:	e1a00004 	mov	r0, r4
   1f924:	eb000beb 	bl	228d8 <CPtrList::GetPtr(TPtrListElement*)>
   1f928:	e250b000 	subs	fp, r0, #0
   1f92c:	0a000016 	beq	1f98c <CTimer::~CTimer()+0xa4>
   1f930:	e59b3000 	ldr	r3, [fp]
   1f934:	e1530006 	cmp	r3, r6
   1f938:	0a000003 	beq	1f94c <CTimer::~CTimer()+0x64>
   1f93c:	e1a02009 	mov	r2, r9
   1f940:	e1a01007 	mov	r1, r7
   1f944:	e1a00008 	mov	r0, r8
   1f948:	ebffea01 	bl	1a154 <assertion_failed>
   1f94c:	e1a01005 	mov	r1, r5
   1f950:	e1a00004 	mov	r0, r4
   1f954:	eb000c74 	bl	22b2c <CPtrList::Remove(TPtrListElement*)>
   1f958:	e1a0000b 	mov	r0, fp
   1f95c:	e3a01014 	mov	r1, #20
   1f960:	eb000793 	bl	217b4 <operator delete(void*, unsigned int)>
   1f964:	e1a00004 	mov	r0, r4
   1f968:	eb000bc2 	bl	22878 <CPtrList::GetFirst()>
   1f96c:	e2505000 	subs	r5, r0, #0
   1f970:	1affffe9 	bne	1f91c <CTimer::~CTimer()+0x34>
   1f974:	e59f3048 	ldr	r3, [pc, #72]	; 1f9c4 <CTimer::~CTimer()+0xdc>
   1f978:	e1a00004 	mov	r0, r4
   1f97c:	e5835000 	str	r5, [r3]
   1f980:	eb000baf 	bl	22844 <CPtrList::~CPtrList()>
   1f984:	e1a0000a 	mov	r0, sl
   1f988:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f98c:	e3a0204a 	mov	r2, #74	; 0x4a
   1f990:	e1a01007 	mov	r1, r7
   1f994:	e59f002c 	ldr	r0, [pc, #44]	; 1f9c8 <CTimer::~CTimer()+0xe0>
   1f998:	ebffe9ed 	bl	1a154 <assertion_failed>
   1f99c:	eaffffe3 	b	1f930 <CTimer::~CTimer()+0x48>
   1f9a0:	e59f0024 	ldr	r0, [pc, #36]	; 1f9cc <CTimer::~CTimer()+0xe4>
   1f9a4:	e3a02043 	mov	r2, #67	; 0x43
   1f9a8:	e59f1008 	ldr	r1, [pc, #8]	; 1f9b8 <CTimer::~CTimer()+0xd0>
   1f9ac:	ebffe9e8 	bl	1a154 <assertion_failed>
   1f9b0:	e59a0000 	ldr	r0, [sl]
   1f9b4:	eaffffd0 	b	1f8fc <CTimer::~CTimer()+0x14>
   1f9b8:	000282e0 	.word	0x000282e0
   1f9bc:	4b544d43 	.word	0x4b544d43
   1f9c0:	000282fc 	.word	0x000282fc
   1f9c4:	000299d4 	.word	0x000299d4
   1f9c8:	00025504 	.word	0x00025504
   1f9cc:	00022e78 	.word	0x00022e78

0001f9d0 <CTimer::SetTimeZone(int)>:
   1f9d0:	e59f2018 	ldr	r2, [pc, #24]	; 1f9f0 <CTimer::SetTimeZone(int)+0x20>
   1f9d4:	e2813e59 	add	r3, r1, #1424	; 0x590
   1f9d8:	e283300f 	add	r3, r3, #15
   1f9dc:	e1530002 	cmp	r3, r2
   1f9e0:	95801014 	strls	r1, [r0, #20]
   1f9e4:	93a00001 	movls	r0, #1
   1f9e8:	83a00000 	movhi	r0, #0
   1f9ec:	e12fff1e 	bx	lr
   1f9f0:	00000b3e 	.word	0x00000b3e

0001f9f4 <CTimer::GetTimeZone() const>:
   1f9f4:	e5900014 	ldr	r0, [r0, #20]
   1f9f8:	e12fff1e 	bx	lr

0001f9fc <CTimer::SetTime(unsigned int, bool)>:
   1f9fc:	e3520000 	cmp	r2, #0
   1fa00:	e92d4070 	push	{r4, r5, r6, lr}
   1fa04:	e1a04000 	mov	r4, r0
   1fa08:	e1a05001 	mov	r5, r1
   1fa0c:	1a000004 	bne	1fa24 <CTimer::SetTime(unsigned int, bool)+0x28>
   1fa10:	e5903014 	ldr	r3, [r0, #20]
   1fa14:	e0633203 	rsb	r3, r3, r3, lsl #4
   1fa18:	e1b03103 	lsls	r3, r3, #2
   1fa1c:	4a00000e 	bmi	1fa5c <CTimer::SetTime(unsigned int, bool)+0x60>
   1fa20:	e0855003 	add	r5, r5, r3
   1fa24:	e5940010 	ldr	r0, [r4, #16]
   1fa28:	e3500000 	cmp	r0, #0
   1fa2c:	1a000002 	bne	1fa3c <CTimer::SetTime(unsigned int, bool)+0x40>
   1fa30:	e3a00001 	mov	r0, #1
   1fa34:	e584500c 	str	r5, [r4, #12]
   1fa38:	e8bd8070 	pop	{r4, r5, r6, pc}
   1fa3c:	eb0006fe 	bl	2163c <EnterCritical>
   1fa40:	e5943010 	ldr	r3, [r4, #16]
   1fa44:	e584500c 	str	r5, [r4, #12]
   1fa48:	e3530000 	cmp	r3, #0
   1fa4c:	0a000007 	beq	1fa70 <CTimer::SetTime(unsigned int, bool)+0x74>
   1fa50:	eb000726 	bl	216f0 <LeaveCritical>
   1fa54:	e3a00001 	mov	r0, #1
   1fa58:	e8bd8070 	pop	{r4, r5, r6, pc}
   1fa5c:	e2631000 	rsb	r1, r3, #0
   1fa60:	e1510005 	cmp	r1, r5
   1fa64:	daffffed 	ble	1fa20 <CTimer::SetTime(unsigned int, bool)+0x24>
   1fa68:	e1a00002 	mov	r0, r2
   1fa6c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1fa70:	e3a00001 	mov	r0, #1
   1fa74:	e8bd8070 	pop	{r4, r5, r6, pc}

0001fa78 <CTimer::GetClockTicks()>:
   1fa78:	e3a03000 	mov	r3, #0
   1fa7c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   1fa80:	e59f2008 	ldr	r2, [pc, #8]	; 1fa90 <CTimer::GetClockTicks()+0x18>
   1fa84:	e5920004 	ldr	r0, [r2, #4]
   1fa88:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   1fa8c:	e12fff1e 	bx	lr
   1fa90:	20003000 	.word	0x20003000

0001fa94 <CTimer::GetTicks() const>:
   1fa94:	e5900004 	ldr	r0, [r0, #4]
   1fa98:	e12fff1e 	bx	lr

0001fa9c <CTimer::GetUptime() const>:
   1fa9c:	e5900008 	ldr	r0, [r0, #8]
   1faa0:	e12fff1e 	bx	lr

0001faa4 <CTimer::GetTime() const>:
   1faa4:	e590000c 	ldr	r0, [r0, #12]
   1faa8:	e12fff1e 	bx	lr

0001faac <CTimer::GetLocalTime(unsigned int*, unsigned int*)>:
   1faac:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1fab0:	e1a04000 	mov	r4, r0
   1fab4:	e5900010 	ldr	r0, [r0, #16]
   1fab8:	e1a06001 	mov	r6, r1
   1fabc:	e3500000 	cmp	r0, #0
   1fac0:	e1a05002 	mov	r5, r2
   1fac4:	1a000011 	bne	1fb10 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x64>
   1fac8:	e594700c 	ldr	r7, [r4, #12]
   1facc:	e5944004 	ldr	r4, [r4, #4]
   1fad0:	e3560000 	cmp	r6, #0
   1fad4:	0a00001a 	beq	1fb44 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x98>
   1fad8:	e3550000 	cmp	r5, #0
   1fadc:	e5867000 	str	r7, [r6]
   1fae0:	0a000012 	beq	1fb30 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x84>
   1fae4:	e3a03064 	mov	r3, #100	; 0x64
   1fae8:	e59f2068 	ldr	r2, [pc, #104]	; 1fb58 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xac>
   1faec:	e59f1068 	ldr	r1, [pc, #104]	; 1fb5c <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb0>
   1faf0:	e0820492 	umull	r0, r2, r2, r4
   1faf4:	e1a022a2 	lsr	r2, r2, #5
   1faf8:	e0030293 	mul	r3, r3, r2
   1fafc:	e0443003 	sub	r3, r4, r3
   1fb00:	e0030391 	mul	r3, r1, r3
   1fb04:	e3a00001 	mov	r0, #1
   1fb08:	e5853000 	str	r3, [r5]
   1fb0c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1fb10:	eb0006c9 	bl	2163c <EnterCritical>
   1fb14:	e5943010 	ldr	r3, [r4, #16]
   1fb18:	e594700c 	ldr	r7, [r4, #12]
   1fb1c:	e3530000 	cmp	r3, #0
   1fb20:	e5944004 	ldr	r4, [r4, #4]
   1fb24:	0affffe9 	beq	1fad0 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x24>
   1fb28:	eb0006f0 	bl	216f0 <LeaveCritical>
   1fb2c:	eaffffe7 	b	1fad0 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x24>
   1fb30:	e3a020dd 	mov	r2, #221	; 0xdd
   1fb34:	e59f1024 	ldr	r1, [pc, #36]	; 1fb60 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb4>
   1fb38:	e59f0024 	ldr	r0, [pc, #36]	; 1fb64 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb8>
   1fb3c:	ebffe984 	bl	1a154 <assertion_failed>
   1fb40:	eaffffe7 	b	1fae4 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x38>
   1fb44:	e3a020da 	mov	r2, #218	; 0xda
   1fb48:	e59f1010 	ldr	r1, [pc, #16]	; 1fb60 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb4>
   1fb4c:	e59f0014 	ldr	r0, [pc, #20]	; 1fb68 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xbc>
   1fb50:	ebffe97f 	bl	1a154 <assertion_failed>
   1fb54:	eaffffdf 	b	1fad8 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x2c>
   1fb58:	51eb851f 	.word	0x51eb851f
   1fb5c:	00002710 	.word	0x00002710
   1fb60:	000282e0 	.word	0x000282e0
   1fb64:	00028334 	.word	0x00028334
   1fb68:	00028324 	.word	0x00028324

0001fb6c <CTimer::GetUniversalTime() const>:
   1fb6c:	e5903014 	ldr	r3, [r0, #20]
   1fb70:	e590000c 	ldr	r0, [r0, #12]
   1fb74:	e0633203 	rsb	r3, r3, r3, lsl #4
   1fb78:	e1a03103 	lsl	r3, r3, #2
   1fb7c:	e1530000 	cmp	r3, r0
   1fb80:	d0400003 	suble	r0, r0, r3
   1fb84:	c3a00000 	movgt	r0, #0
   1fb88:	e12fff1e 	bx	lr

0001fb8c <CTimer::GetUniversalTime(unsigned int*, unsigned int*)>:
   1fb8c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1fb90:	e1a05000 	mov	r5, r0
   1fb94:	e5900010 	ldr	r0, [r0, #16]
   1fb98:	e1a09001 	mov	r9, r1
   1fb9c:	e3500000 	cmp	r0, #0
   1fba0:	e1a07002 	mov	r7, r2
   1fba4:	1a000019 	bne	1fc10 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x84>
   1fba8:	e595600c 	ldr	r6, [r5, #12]
   1fbac:	e5958004 	ldr	r8, [r5, #4]
   1fbb0:	e5953014 	ldr	r3, [r5, #20]
   1fbb4:	e0633203 	rsb	r3, r3, r3, lsl #4
   1fbb8:	e1a04103 	lsl	r4, r3, #2
   1fbbc:	e1540006 	cmp	r4, r6
   1fbc0:	ca000010 	bgt	1fc08 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x7c>
   1fbc4:	e3590000 	cmp	r9, #0
   1fbc8:	0a00001d 	beq	1fc44 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xb8>
   1fbcc:	e0464004 	sub	r4, r6, r4
   1fbd0:	e3570000 	cmp	r7, #0
   1fbd4:	e5894000 	str	r4, [r9]
   1fbd8:	0a000014 	beq	1fc30 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xa4>
   1fbdc:	e3a03064 	mov	r3, #100	; 0x64
   1fbe0:	e59f2070 	ldr	r2, [pc, #112]	; 1fc58 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xcc>
   1fbe4:	e59f1070 	ldr	r1, [pc, #112]	; 1fc5c <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd0>
   1fbe8:	e0820892 	umull	r0, r2, r2, r8
   1fbec:	e1a022a2 	lsr	r2, r2, #5
   1fbf0:	e0030293 	mul	r3, r3, r2
   1fbf4:	e0483003 	sub	r3, r8, r3
   1fbf8:	e0030391 	mul	r3, r1, r3
   1fbfc:	e3a00001 	mov	r0, #1
   1fc00:	e5873000 	str	r3, [r7]
   1fc04:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1fc08:	e3a00000 	mov	r0, #0
   1fc0c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1fc10:	eb000689 	bl	2163c <EnterCritical>
   1fc14:	e5953010 	ldr	r3, [r5, #16]
   1fc18:	e595600c 	ldr	r6, [r5, #12]
   1fc1c:	e3530000 	cmp	r3, #0
   1fc20:	e5958004 	ldr	r8, [r5, #4]
   1fc24:	0affffe1 	beq	1fbb0 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x24>
   1fc28:	eb0006b0 	bl	216f0 <LeaveCritical>
   1fc2c:	eaffffdf 	b	1fbb0 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x24>
   1fc30:	e59f2028 	ldr	r2, [pc, #40]	; 1fc60 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd4>
   1fc34:	e59f1028 	ldr	r1, [pc, #40]	; 1fc64 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd8>
   1fc38:	e59f0028 	ldr	r0, [pc, #40]	; 1fc68 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xdc>
   1fc3c:	ebffe944 	bl	1a154 <assertion_failed>
   1fc40:	eaffffe5 	b	1fbdc <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x50>
   1fc44:	e3a020ff 	mov	r2, #255	; 0xff
   1fc48:	e59f1014 	ldr	r1, [pc, #20]	; 1fc64 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd8>
   1fc4c:	e59f0018 	ldr	r0, [pc, #24]	; 1fc6c <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xe0>
   1fc50:	ebffe93f 	bl	1a154 <assertion_failed>
   1fc54:	eaffffdc 	b	1fbcc <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x40>
   1fc58:	51eb851f 	.word	0x51eb851f
   1fc5c:	00002710 	.word	0x00002710
   1fc60:	00000102 	.word	0x00000102
   1fc64:	000282e0 	.word	0x000282e0
   1fc68:	00028334 	.word	0x00028334
   1fc6c:	00028324 	.word	0x00028324

0001fc70 <CTimer::GetTimeString()>:
   1fc70:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fc74:	e1a05000 	mov	r5, r0
   1fc78:	e5900010 	ldr	r0, [r0, #16]
   1fc7c:	e24dd014 	sub	sp, sp, #20
   1fc80:	e3500000 	cmp	r0, #0
   1fc84:	1a000065 	bne	1fe20 <CTimer::GetTimeString()+0x1b0>
   1fc88:	e595400c 	ldr	r4, [r5, #12]
   1fc8c:	e5959004 	ldr	r9, [r5, #4]
   1fc90:	e1940009 	orrs	r0, r4, r9
   1fc94:	0a00003e 	beq	1fd94 <CTimer::GetTimeString()+0x124>
   1fc98:	e59f61a0 	ldr	r6, [pc, #416]	; 1fe40 <CTimer::GetTimeString()+0x1d0>
   1fc9c:	e59f81a0 	ldr	r8, [pc, #416]	; 1fe44 <CTimer::GetTimeString()+0x1d4>
   1fca0:	e0873496 	umull	r3, r7, r6, r4
   1fca4:	e1a072a7 	lsr	r7, r7, #5
   1fca8:	e0863796 	umull	r3, r6, r6, r7
   1fcac:	e59f3194 	ldr	r3, [pc, #404]	; 1fe48 <CTimer::GetTimeString()+0x1d8>
   1fcb0:	e0882498 	umull	r2, r8, r8, r4
   1fcb4:	e0832493 	umull	r2, r3, r3, r4
   1fcb8:	e1a062a6 	lsr	r6, r6, #5
   1fcbc:	e0666206 	rsb	r6, r6, r6, lsl #4
   1fcc0:	e0672207 	rsb	r2, r7, r7, lsl #4
   1fcc4:	e0476106 	sub	r6, r7, r6, lsl #2
   1fcc8:	e3a0a064 	mov	sl, #100	; 0x64
   1fccc:	e0447102 	sub	r7, r4, r2, lsl #2
   1fcd0:	e3a0be19 	mov	fp, #400	; 0x190
   1fcd4:	e59f5170 	ldr	r5, [pc, #368]	; 1fe4c <CTimer::GetTimeString()+0x1dc>
   1fcd8:	e59fe170 	ldr	lr, [pc, #368]	; 1fe50 <CTimer::GetTimeString()+0x1e0>
   1fcdc:	e59fc170 	ldr	ip, [pc, #368]	; 1fe54 <CTimer::GetTimeString()+0x1e4>
   1fce0:	e59f0170 	ldr	r0, [pc, #368]	; 1fe58 <CTimer::GetTimeString()+0x1e8>
   1fce4:	e1a085a8 	lsr	r8, r8, #11
   1fce8:	e1a04823 	lsr	r4, r3, #16
   1fcec:	ea00000a 	b	1fd1c <CTimer::GetTimeString()+0xac>
   1fcf0:	e001019b 	mul	r1, fp, r1
   1fcf4:	e0451001 	sub	r1, r5, r1
   1fcf8:	e16f1f11 	clz	r1, r1
   1fcfc:	e1a012a1 	lsr	r1, r1, #5
   1fd00:	e3510000 	cmp	r1, #0
   1fd04:	01a0300c 	moveq	r3, ip
   1fd08:	11a03000 	movne	r3, r0
   1fd0c:	e1540003 	cmp	r4, r3
   1fd10:	3a000021 	bcc	1fd9c <CTimer::GetTimeString()+0x12c>
   1fd14:	e0444003 	sub	r4, r4, r3
   1fd18:	e2855001 	add	r5, r5, #1
   1fd1c:	e081359e 	umull	r3, r1, lr, r5
   1fd20:	e1a032a1 	lsr	r3, r1, #5
   1fd24:	e003039a 	mul	r3, sl, r3
   1fd28:	e1550003 	cmp	r5, r3
   1fd2c:	e1a013a1 	lsr	r1, r1, #7
   1fd30:	0affffee 	beq	1fcf0 <CTimer::GetTimeString()+0x80>
   1fd34:	e3150003 	tst	r5, #3
   1fd38:	03a01001 	moveq	r1, #1
   1fd3c:	13a01000 	movne	r1, #0
   1fd40:	eaffffee 	b	1fd00 <CTimer::GetTimeString()+0x90>
   1fd44:	e3a03064 	mov	r3, #100	; 0x64
   1fd48:	e59fb100 	ldr	fp, [pc, #256]	; 1fe50 <CTimer::GetTimeString()+0x1e0>
   1fd4c:	e3a00010 	mov	r0, #16
   1fd50:	e08b299b 	umull	r2, fp, fp, r9
   1fd54:	e1a0b2ab 	lsr	fp, fp, #5
   1fd58:	e00b0b93 	mul	fp, r3, fp
   1fd5c:	eb000690 	bl	217a4 <operator new(unsigned int)>
   1fd60:	e049b00b 	sub	fp, r9, fp
   1fd64:	e1a09000 	mov	r9, r0
   1fd68:	ebfffa79 	bl	1e754 <CString::CString()>
   1fd6c:	e59f30e8 	ldr	r3, [pc, #232]	; 1fe5c <CTimer::GetTimeString()+0x1ec>
   1fd70:	e1550003 	cmp	r5, r3
   1fd74:	8a000018 	bhi	1fddc <CTimer::GetTimeString()+0x16c>
   1fd78:	e1a00009 	mov	r0, r9
   1fd7c:	e88d0880 	stm	sp, {r7, fp}
   1fd80:	e1a03006 	mov	r3, r6
   1fd84:	e1a02008 	mov	r2, r8
   1fd88:	e59f10d0 	ldr	r1, [pc, #208]	; 1fe60 <CTimer::GetTimeString()+0x1f0>
   1fd8c:	ebfffe5e 	bl	1f70c <CString::Format(char const*, ...)>
   1fd90:	e1a00009 	mov	r0, r9
   1fd94:	e28dd014 	add	sp, sp, #20
   1fd98:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fd9c:	e3a0a000 	mov	sl, #0
   1fda0:	e3a0001d 	mov	r0, #29
   1fda4:	e59f20b8 	ldr	r2, [pc, #184]	; 1fe64 <CTimer::GetTimeString()+0x1f4>
   1fda8:	ea000004 	b	1fdc0 <CTimer::GetTimeString()+0x150>
   1fdac:	e1a03000 	mov	r3, r0
   1fdb0:	e1540003 	cmp	r4, r3
   1fdb4:	3affffe2 	bcc	1fd44 <CTimer::GetTimeString()+0xd4>
   1fdb8:	e0444003 	sub	r4, r4, r3
   1fdbc:	e28aa001 	add	sl, sl, #1
   1fdc0:	e35a0001 	cmp	sl, #1
   1fdc4:	13a03000 	movne	r3, #0
   1fdc8:	02013001 	andeq	r3, r1, #1
   1fdcc:	e3530000 	cmp	r3, #0
   1fdd0:	1afffff5 	bne	1fdac <CTimer::GetTimeString()+0x13c>
   1fdd4:	e792310a 	ldr	r3, [r2, sl, lsl #2]
   1fdd8:	eafffff4 	b	1fdb0 <CTimer::GetTimeString()+0x140>
   1fddc:	e59f3084 	ldr	r3, [pc, #132]	; 1fe68 <CTimer::GetTimeString()+0x1f8>
   1fde0:	e58db00c 	str	fp, [sp, #12]
   1fde4:	e0832893 	umull	r2, r3, r3, r8
   1fde8:	e1a03223 	lsr	r3, r3, #4
   1fdec:	e0833083 	add	r3, r3, r3, lsl #1
   1fdf0:	e59f2074 	ldr	r2, [pc, #116]	; 1fe6c <CTimer::GetTimeString()+0x1fc>
   1fdf4:	e0488183 	sub	r8, r8, r3, lsl #3
   1fdf8:	e792210a 	ldr	r2, [r2, sl, lsl #2]
   1fdfc:	e1a00009 	mov	r0, r9
   1fe00:	e98d00c0 	stmib	sp, {r6, r7}
   1fe04:	e2843001 	add	r3, r4, #1
   1fe08:	e58d8000 	str	r8, [sp]
   1fe0c:	e59f105c 	ldr	r1, [pc, #92]	; 1fe70 <CTimer::GetTimeString()+0x200>
   1fe10:	ebfffe3d 	bl	1f70c <CString::Format(char const*, ...)>
   1fe14:	e1a00009 	mov	r0, r9
   1fe18:	e28dd014 	add	sp, sp, #20
   1fe1c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fe20:	eb000605 	bl	2163c <EnterCritical>
   1fe24:	e5953010 	ldr	r3, [r5, #16]
   1fe28:	e595400c 	ldr	r4, [r5, #12]
   1fe2c:	e3530000 	cmp	r3, #0
   1fe30:	e5959004 	ldr	r9, [r5, #4]
   1fe34:	0affff95 	beq	1fc90 <CTimer::GetTimeString()+0x20>
   1fe38:	eb00062c 	bl	216f0 <LeaveCritical>
   1fe3c:	eaffff93 	b	1fc90 <CTimer::GetTimeString()+0x20>
   1fe40:	88888889 	.word	0x88888889
   1fe44:	91a2b3c5 	.word	0x91a2b3c5
   1fe48:	c22e4507 	.word	0xc22e4507
   1fe4c:	000007b2 	.word	0x000007b2
   1fe50:	51eb851f 	.word	0x51eb851f
   1fe54:	0000016d 	.word	0x0000016d
   1fe58:	0000016e 	.word	0x0000016e
   1fe5c:	000007b7 	.word	0x000007b7
   1fe60:	00028364 	.word	0x00028364
   1fe64:	000282a8 	.word	0x000282a8
   1fe68:	aaaaaaab 	.word	0xaaaaaaab
   1fe6c:	0002988c 	.word	0x0002988c
   1fe70:	00028348 	.word	0x00028348

0001fe74 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>:
   1fe74:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fe78:	e1a09000 	mov	r9, r0
   1fe7c:	e24dd00c 	sub	sp, sp, #12
   1fe80:	e58d0004 	str	r0, [sp, #4]
   1fe84:	e1a04002 	mov	r4, r2
   1fe88:	e3a00014 	mov	r0, #20
   1fe8c:	e1a06001 	mov	r6, r1
   1fe90:	e1a07003 	mov	r7, r3
   1fe94:	e59d5030 	ldr	r5, [sp, #48]	; 0x30
   1fe98:	eb000641 	bl	217a4 <operator new(unsigned int)>
   1fe9c:	e5991004 	ldr	r1, [r9, #4]
   1fea0:	e3540000 	cmp	r4, #0
   1fea4:	e1a08000 	mov	r8, r0
   1fea8:	e0816006 	add	r6, r1, r6
   1feac:	0a00003d 	beq	1ffa8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x134>
   1feb0:	e59d3004 	ldr	r3, [sp, #4]
   1feb4:	e59f2100 	ldr	r2, [pc, #256]	; 1ffbc <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x148>
   1feb8:	e593001c 	ldr	r0, [r3, #28]
   1febc:	e98800d0 	stmib	r8, {r4, r6, r7}
   1fec0:	e3500000 	cmp	r0, #0
   1fec4:	e5885010 	str	r5, [r8, #16]
   1fec8:	e5882000 	str	r2, [r8]
   1fecc:	1a000033 	bne	1ffa0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x12c>
   1fed0:	e59d3004 	ldr	r3, [sp, #4]
   1fed4:	e2835018 	add	r5, r3, #24
   1fed8:	e1a00005 	mov	r0, r5
   1fedc:	eb000a65 	bl	22878 <CPtrList::GetFirst()>
   1fee0:	e2504000 	subs	r4, r0, #0
   1fee4:	0a000028 	beq	1ff8c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x118>
   1fee8:	e59f90d0 	ldr	r9, [pc, #208]	; 1ffc0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x14c>
   1feec:	e59f70c8 	ldr	r7, [pc, #200]	; 1ffbc <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x148>
   1fef0:	e59fb0cc 	ldr	fp, [pc, #204]	; 1ffc4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x150>
   1fef4:	ea000010 	b	1ff3c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xc8>
   1fef8:	e59a3000 	ldr	r3, [sl]
   1fefc:	e1530007 	cmp	r3, r7
   1ff00:	0a000003 	beq	1ff14 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xa0>
   1ff04:	e1a0200b 	mov	r2, fp
   1ff08:	e1a01009 	mov	r1, r9
   1ff0c:	e59f00b4 	ldr	r0, [pc, #180]	; 1ffc8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x154>
   1ff10:	ebffe88f 	bl	1a154 <assertion_failed>
   1ff14:	e59a3008 	ldr	r3, [sl, #8]
   1ff18:	e1a01004 	mov	r1, r4
   1ff1c:	e0433006 	sub	r3, r3, r6
   1ff20:	e3530000 	cmp	r3, #0
   1ff24:	e1a00005 	mov	r0, r5
   1ff28:	ca00000d 	bgt	1ff64 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xf0>
   1ff2c:	eb000a53 	bl	22880 <CPtrList::GetNext(TPtrListElement*)>
   1ff30:	e3500000 	cmp	r0, #0
   1ff34:	0a000014 	beq	1ff8c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x118>
   1ff38:	e1a04000 	mov	r4, r0
   1ff3c:	e1a01004 	mov	r1, r4
   1ff40:	e1a00005 	mov	r0, r5
   1ff44:	eb000a63 	bl	228d8 <CPtrList::GetPtr(TPtrListElement*)>
   1ff48:	e250a000 	subs	sl, r0, #0
   1ff4c:	1affffe9 	bne	1fef8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x84>
   1ff50:	e59f2074 	ldr	r2, [pc, #116]	; 1ffcc <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x158>
   1ff54:	e1a01009 	mov	r1, r9
   1ff58:	e59f0070 	ldr	r0, [pc, #112]	; 1ffd0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x15c>
   1ff5c:	ebffe87c 	bl	1a154 <assertion_failed>
   1ff60:	eaffffe4 	b	1fef8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x84>
   1ff64:	e1a02008 	mov	r2, r8
   1ff68:	eb000a70 	bl	22930 <CPtrList::InsertBefore(TPtrListElement*, void*)>
   1ff6c:	e59d3004 	ldr	r3, [sp, #4]
   1ff70:	e593301c 	ldr	r3, [r3, #28]
   1ff74:	e3530000 	cmp	r3, #0
   1ff78:	0a000000 	beq	1ff80 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x10c>
   1ff7c:	eb0005db 	bl	216f0 <LeaveCritical>
   1ff80:	e1a00008 	mov	r0, r8
   1ff84:	e28dd00c 	add	sp, sp, #12
   1ff88:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ff8c:	e1a01004 	mov	r1, r4
   1ff90:	e1a00005 	mov	r0, r5
   1ff94:	e1a02008 	mov	r2, r8
   1ff98:	eb000aa5 	bl	22a34 <CPtrList::InsertAfter(TPtrListElement*, void*)>
   1ff9c:	eafffff2 	b	1ff6c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xf8>
   1ffa0:	eb0005a5 	bl	2163c <EnterCritical>
   1ffa4:	eaffffc9 	b	1fed0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x5c>
   1ffa8:	e59f2024 	ldr	r2, [pc, #36]	; 1ffd4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x160>
   1ffac:	e59f100c 	ldr	r1, [pc, #12]	; 1ffc0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x14c>
   1ffb0:	e59f0020 	ldr	r0, [pc, #32]	; 1ffd8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x164>
   1ffb4:	ebffe866 	bl	1a154 <assertion_failed>
   1ffb8:	eaffffbc 	b	1feb0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x3c>
   1ffbc:	4b544d43 	.word	0x4b544d43
   1ffc0:	000282e0 	.word	0x000282e0
   1ffc4:	0000016a 	.word	0x0000016a
   1ffc8:	00028388 	.word	0x00028388
   1ffcc:	00000169 	.word	0x00000169
   1ffd0:	00028378 	.word	0x00028378
   1ffd4:	00000159 	.word	0x00000159
   1ffd8:	00027dfc 	.word	0x00027dfc

0001ffdc <CTimer::CancelKernelTimer(unsigned int)>:
   1ffdc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1ffe0:	e2514000 	subs	r4, r1, #0
   1ffe4:	e1a05000 	mov	r5, r0
   1ffe8:	0a00001f 	beq	2006c <CTimer::CancelKernelTimer(unsigned int)+0x90>
   1ffec:	e595001c 	ldr	r0, [r5, #28]
   1fff0:	e3500000 	cmp	r0, #0
   1fff4:	1a00001a 	bne	20064 <CTimer::CancelKernelTimer(unsigned int)+0x88>
   1fff8:	e2856018 	add	r6, r5, #24
   1fffc:	e1a00006 	mov	r0, r6
   20000:	e1a01004 	mov	r1, r4
   20004:	eb000b1b 	bl	22c78 <CPtrList::Find(void*)>
   20008:	e2507000 	subs	r7, r0, #0
   2000c:	0a00000f 	beq	20050 <CTimer::CancelKernelTimer(unsigned int)+0x74>
   20010:	e59f3068 	ldr	r3, [pc, #104]	; 20080 <CTimer::CancelKernelTimer(unsigned int)+0xa4>
   20014:	e5942000 	ldr	r2, [r4]
   20018:	e1520003 	cmp	r2, r3
   2001c:	0a000003 	beq	20030 <CTimer::CancelKernelTimer(unsigned int)+0x54>
   20020:	e59f205c 	ldr	r2, [pc, #92]	; 20084 <CTimer::CancelKernelTimer(unsigned int)+0xa8>
   20024:	e59f105c 	ldr	r1, [pc, #92]	; 20088 <CTimer::CancelKernelTimer(unsigned int)+0xac>
   20028:	e59f005c 	ldr	r0, [pc, #92]	; 2008c <CTimer::CancelKernelTimer(unsigned int)+0xb0>
   2002c:	ebffe848 	bl	1a154 <assertion_failed>
   20030:	e1a01007 	mov	r1, r7
   20034:	e1a00006 	mov	r0, r6
   20038:	eb000abb 	bl	22b2c <CPtrList::Remove(TPtrListElement*)>
   2003c:	e3a03000 	mov	r3, #0
   20040:	e1a00004 	mov	r0, r4
   20044:	e5843000 	str	r3, [r4]
   20048:	e3a01014 	mov	r1, #20
   2004c:	eb0005d8 	bl	217b4 <operator delete(void*, unsigned int)>
   20050:	e595301c 	ldr	r3, [r5, #28]
   20054:	e3530000 	cmp	r3, #0
   20058:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   2005c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   20060:	ea0005a2 	b	216f0 <LeaveCritical>
   20064:	eb000574 	bl	2163c <EnterCritical>
   20068:	eaffffe2 	b	1fff8 <CTimer::CancelKernelTimer(unsigned int)+0x1c>
   2006c:	e59f201c 	ldr	r2, [pc, #28]	; 20090 <CTimer::CancelKernelTimer(unsigned int)+0xb4>
   20070:	e59f1010 	ldr	r1, [pc, #16]	; 20088 <CTimer::CancelKernelTimer(unsigned int)+0xac>
   20074:	e59f0018 	ldr	r0, [pc, #24]	; 20094 <CTimer::CancelKernelTimer(unsigned int)+0xb8>
   20078:	ebffe835 	bl	1a154 <assertion_failed>
   2007c:	eaffffda 	b	1ffec <CTimer::CancelKernelTimer(unsigned int)+0x10>
   20080:	4b544d43 	.word	0x4b544d43
   20084:	0000018d 	.word	0x0000018d
   20088:	000282e0 	.word	0x000282e0
   2008c:	000282fc 	.word	0x000282fc
   20090:	00000186 	.word	0x00000186
   20094:	00025504 	.word	0x00025504

00020098 <CTimer::PollKernelTimers()>:
   20098:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2009c:	e1a05000 	mov	r5, r0
   200a0:	e590001c 	ldr	r0, [r0, #28]
   200a4:	e3500000 	cmp	r0, #0
   200a8:	1a00004a 	bne	201d8 <CTimer::PollKernelTimers()+0x140>
   200ac:	e2856018 	add	r6, r5, #24
   200b0:	e1a00006 	mov	r0, r6
   200b4:	eb0009ef 	bl	22878 <CPtrList::GetFirst()>
   200b8:	e2504000 	subs	r4, r0, #0
   200bc:	0a00003b 	beq	201b0 <CTimer::PollKernelTimers()+0x118>
   200c0:	e59f9118 	ldr	r9, [pc, #280]	; 201e0 <CTimer::PollKernelTimers()+0x148>
   200c4:	e59f8118 	ldr	r8, [pc, #280]	; 201e4 <CTimer::PollKernelTimers()+0x14c>
   200c8:	e59fa118 	ldr	sl, [pc, #280]	; 201e8 <CTimer::PollKernelTimers()+0x150>
   200cc:	ea000010 	b	20114 <CTimer::PollKernelTimers()+0x7c>
   200d0:	e5974004 	ldr	r4, [r7, #4]
   200d4:	e3540000 	cmp	r4, #0
   200d8:	0a00002c 	beq	20190 <CTimer::PollKernelTimers()+0xf8>
   200dc:	e5972010 	ldr	r2, [r7, #16]
   200e0:	e597100c 	ldr	r1, [r7, #12]
   200e4:	e1a00007 	mov	r0, r7
   200e8:	e12fff34 	blx	r4
   200ec:	e3a03000 	mov	r3, #0
   200f0:	e1a00007 	mov	r0, r7
   200f4:	e5873000 	str	r3, [r7]
   200f8:	e3a01014 	mov	r1, #20
   200fc:	eb0005ac 	bl	217b4 <operator delete(void*, unsigned int)>
   20100:	e595001c 	ldr	r0, [r5, #28]
   20104:	e3500000 	cmp	r0, #0
   20108:	1a000025 	bne	201a4 <CTimer::PollKernelTimers()+0x10c>
   2010c:	e25b4000 	subs	r4, fp, #0
   20110:	0a000026 	beq	201b0 <CTimer::PollKernelTimers()+0x118>
   20114:	e1a01004 	mov	r1, r4
   20118:	e1a00006 	mov	r0, r6
   2011c:	eb0009ed 	bl	228d8 <CPtrList::GetPtr(TPtrListElement*)>
   20120:	e2507000 	subs	r7, r0, #0
   20124:	0a000026 	beq	201c4 <CTimer::PollKernelTimers()+0x12c>
   20128:	e5973000 	ldr	r3, [r7]
   2012c:	e1530008 	cmp	r3, r8
   20130:	0a000003 	beq	20144 <CTimer::PollKernelTimers()+0xac>
   20134:	e59f20b0 	ldr	r2, [pc, #176]	; 201ec <CTimer::PollKernelTimers()+0x154>
   20138:	e1a01009 	mov	r1, r9
   2013c:	e1a0000a 	mov	r0, sl
   20140:	ebffe803 	bl	1a154 <assertion_failed>
   20144:	e5952004 	ldr	r2, [r5, #4]
   20148:	e5973008 	ldr	r3, [r7, #8]
   2014c:	e0433002 	sub	r3, r3, r2
   20150:	e3530000 	cmp	r3, #0
   20154:	ca000015 	bgt	201b0 <CTimer::PollKernelTimers()+0x118>
   20158:	e1a01004 	mov	r1, r4
   2015c:	e1a00006 	mov	r0, r6
   20160:	eb0009c6 	bl	22880 <CPtrList::GetNext(TPtrListElement*)>
   20164:	e1a01004 	mov	r1, r4
   20168:	e1a0b000 	mov	fp, r0
   2016c:	e1a00006 	mov	r0, r6
   20170:	eb000a6d 	bl	22b2c <CPtrList::Remove(TPtrListElement*)>
   20174:	e595301c 	ldr	r3, [r5, #28]
   20178:	e3530000 	cmp	r3, #0
   2017c:	0affffd3 	beq	200d0 <CTimer::PollKernelTimers()+0x38>
   20180:	eb00055a 	bl	216f0 <LeaveCritical>
   20184:	e5974004 	ldr	r4, [r7, #4]
   20188:	e3540000 	cmp	r4, #0
   2018c:	1affffd2 	bne	200dc <CTimer::PollKernelTimers()+0x44>
   20190:	e59f2058 	ldr	r2, [pc, #88]	; 201f0 <CTimer::PollKernelTimers()+0x158>
   20194:	e1a01009 	mov	r1, r9
   20198:	e59f0054 	ldr	r0, [pc, #84]	; 201f4 <CTimer::PollKernelTimers()+0x15c>
   2019c:	ebffe7ec 	bl	1a154 <assertion_failed>
   201a0:	eaffffcd 	b	200dc <CTimer::PollKernelTimers()+0x44>
   201a4:	eb000524 	bl	2163c <EnterCritical>
   201a8:	e25b4000 	subs	r4, fp, #0
   201ac:	1affffd8 	bne	20114 <CTimer::PollKernelTimers()+0x7c>
   201b0:	e595301c 	ldr	r3, [r5, #28]
   201b4:	e3530000 	cmp	r3, #0
   201b8:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   201bc:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   201c0:	ea00054a 	b	216f0 <LeaveCritical>
   201c4:	e59f202c 	ldr	r2, [pc, #44]	; 201f8 <CTimer::PollKernelTimers()+0x160>
   201c8:	e1a01009 	mov	r1, r9
   201cc:	e59f0028 	ldr	r0, [pc, #40]	; 201fc <CTimer::PollKernelTimers()+0x164>
   201d0:	ebffe7df 	bl	1a154 <assertion_failed>
   201d4:	eaffffd3 	b	20128 <CTimer::PollKernelTimers()+0x90>
   201d8:	eb000517 	bl	2163c <EnterCritical>
   201dc:	eaffffb2 	b	200ac <CTimer::PollKernelTimers()+0x14>
   201e0:	000282e0 	.word	0x000282e0
   201e4:	4b544d43 	.word	0x4b544d43
   201e8:	000282fc 	.word	0x000282fc
   201ec:	000001a3 	.word	0x000001a3
   201f0:	000001b1 	.word	0x000001b1
   201f4:	00027dfc 	.word	0x00027dfc
   201f8:	000001a2 	.word	0x000001a2
   201fc:	00025504 	.word	0x00025504

00020200 <CTimer::InterruptHandler()>:
   20200:	e92d4010 	push	{r4, lr}
   20204:	e3a03000 	mov	r3, #0
   20208:	e1a04000 	mov	r4, r0
   2020c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   20210:	e59f20e4 	ldr	r2, [pc, #228]	; 202fc <CTimer::InterruptHandler()+0xfc>
   20214:	e5923018 	ldr	r3, [r2, #24]
   20218:	e2833c27 	add	r3, r3, #9984	; 0x2700
   2021c:	e2833010 	add	r3, r3, #16
   20220:	e5823018 	str	r3, [r2, #24]
   20224:	e5921004 	ldr	r1, [r2, #4]
   20228:	e1530001 	cmp	r3, r1
   2022c:	e3a01008 	mov	r1, #8
   20230:	35923004 	ldrcc	r3, [r2, #4]
   20234:	32833c27 	addcc	r3, r3, #9984	; 0x2700
   20238:	32833010 	addcc	r3, r3, #16
   2023c:	35823018 	strcc	r3, [r2, #24]
   20240:	e59f20b4 	ldr	r2, [pc, #180]	; 202fc <CTimer::InterruptHandler()+0xfc>
   20244:	e3a03000 	mov	r3, #0
   20248:	e5821000 	str	r1, [r2]
   2024c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   20250:	e5900010 	ldr	r0, [r0, #16]
   20254:	e1500003 	cmp	r0, r3
   20258:	1a00001a 	bne	202c8 <CTimer::InterruptHandler()+0xc8>
   2025c:	e3a01064 	mov	r1, #100	; 0x64
   20260:	e5942004 	ldr	r2, [r4, #4]
   20264:	e59f3094 	ldr	r3, [pc, #148]	; 20300 <CTimer::InterruptHandler()+0x100>
   20268:	e2822001 	add	r2, r2, #1
   2026c:	e0830293 	umull	r0, r3, r3, r2
   20270:	e1a032a3 	lsr	r3, r3, #5
   20274:	e0030391 	mul	r3, r1, r3
   20278:	e0523003 	subs	r3, r2, r3
   2027c:	e5842004 	str	r2, [r4, #4]
   20280:	1a000007 	bne	202a4 <CTimer::InterruptHandler()+0xa4>
   20284:	e5942008 	ldr	r2, [r4, #8]
   20288:	e2822001 	add	r2, r2, #1
   2028c:	e5842008 	str	r2, [r4, #8]
   20290:	e594200c 	ldr	r2, [r4, #12]
   20294:	e2822001 	add	r2, r2, #1
   20298:	e584200c 	str	r2, [r4, #12]
   2029c:	e3530000 	cmp	r3, #0
   202a0:	1a000006 	bne	202c0 <CTimer::InterruptHandler()+0xc0>
   202a4:	e1a00004 	mov	r0, r4
   202a8:	ebffff7a 	bl	20098 <CTimer::PollKernelTimers()>
   202ac:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   202b0:	e3530000 	cmp	r3, #0
   202b4:	08bd8010 	popeq	{r4, pc}
   202b8:	e8bd4010 	pop	{r4, lr}
   202bc:	e12fff13 	bx	r3
   202c0:	eb00050a 	bl	216f0 <LeaveCritical>
   202c4:	eafffff6 	b	202a4 <CTimer::InterruptHandler()+0xa4>
   202c8:	eb0004db 	bl	2163c <EnterCritical>
   202cc:	e3a01064 	mov	r1, #100	; 0x64
   202d0:	e5943004 	ldr	r3, [r4, #4]
   202d4:	e59f2024 	ldr	r2, [pc, #36]	; 20300 <CTimer::InterruptHandler()+0x100>
   202d8:	e2833001 	add	r3, r3, #1
   202dc:	e0820392 	umull	r0, r2, r2, r3
   202e0:	e1a022a2 	lsr	r2, r2, #5
   202e4:	e0020291 	mul	r2, r1, r2
   202e8:	e1530002 	cmp	r3, r2
   202ec:	e5843004 	str	r3, [r4, #4]
   202f0:	e5943010 	ldr	r3, [r4, #16]
   202f4:	1affffe8 	bne	2029c <CTimer::InterruptHandler()+0x9c>
   202f8:	eaffffe1 	b	20284 <CTimer::InterruptHandler()+0x84>
   202fc:	20003000 	.word	0x20003000
   20300:	51eb851f 	.word	0x51eb851f

00020304 <CTimer::InterruptHandler(void*)>:
   20304:	e92d4010 	push	{r4, lr}
   20308:	e2504000 	subs	r4, r0, #0
   2030c:	0a000002 	beq	2031c <CTimer::InterruptHandler(void*)+0x18>
   20310:	e1a00004 	mov	r0, r4
   20314:	e8bd4010 	pop	{r4, lr}
   20318:	eaffffb8 	b	20200 <CTimer::InterruptHandler()>
   2031c:	e59f0014 	ldr	r0, [pc, #20]	; 20338 <CTimer::InterruptHandler(void*)+0x34>
   20320:	e59f2014 	ldr	r2, [pc, #20]	; 2033c <CTimer::InterruptHandler(void*)+0x38>
   20324:	e59f1014 	ldr	r1, [pc, #20]	; 20340 <CTimer::InterruptHandler(void*)+0x3c>
   20328:	ebffe789 	bl	1a154 <assertion_failed>
   2032c:	e1a00004 	mov	r0, r4
   20330:	e8bd4010 	pop	{r4, lr}
   20334:	eaffffb1 	b	20200 <CTimer::InterruptHandler()>
   20338:	00022ebc 	.word	0x00022ebc
   2033c:	000001ea 	.word	0x000001ea
   20340:	000282e0 	.word	0x000282e0

00020344 <CTimer::TuneMsDelay()>:
   20344:	e92d4070 	push	{r4, r5, r6, lr}
   20348:	e1a05000 	mov	r5, r0
   2034c:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   20350:	e5953020 	ldr	r3, [r5, #32]
   20354:	e24dd008 	sub	sp, sp, #8
   20358:	e0000390 	mul	r0, r0, r3
   2035c:	e5954004 	ldr	r4, [r5, #4]
   20360:	eb000850 	bl	224a8 <DelayLoop>
   20364:	e5951004 	ldr	r1, [r5, #4]
   20368:	e59f0068 	ldr	r0, [pc, #104]	; 203d8 <CTimer::TuneMsDelay()+0x94>
   2036c:	e0411004 	sub	r1, r1, r4
   20370:	ebffa503 	bl	9784 <__udivsi3>
   20374:	e5953020 	ldr	r3, [r5, #32]
   20378:	e59f405c 	ldr	r4, [pc, #92]	; 203dc <CTimer::TuneMsDelay()+0x98>
   2037c:	e0030093 	mul	r3, r3, r0
   20380:	e0832394 	umull	r2, r3, r4, r3
   20384:	e59f1054 	ldr	r1, [pc, #84]	; 203e0 <CTimer::TuneMsDelay()+0x9c>
   20388:	e1a032a3 	lsr	r3, r3, #5
   2038c:	e2832f7d 	add	r2, r3, #500	; 0x1f4
   20390:	e0821291 	umull	r1, r2, r1, r2
   20394:	e1a06000 	mov	r6, r0
   20398:	e1a02322 	lsr	r2, r2, #6
   2039c:	e5852024 	str	r2, [r5, #36]	; 0x24
   203a0:	e5853020 	str	r3, [r5, #32]
   203a4:	ebfff15d 	bl	1c920 <CLogger::Get()>
   203a8:	e3a03064 	mov	r3, #100	; 0x64
   203ac:	e0842694 	umull	r2, r4, r4, r6
   203b0:	e1a042a4 	lsr	r4, r4, #5
   203b4:	e0030493 	mul	r3, r3, r4
   203b8:	e0466003 	sub	r6, r6, r3
   203bc:	e88d0050 	stm	sp, {r4, r6}
   203c0:	e59f301c 	ldr	r3, [pc, #28]	; 203e4 <CTimer::TuneMsDelay()+0xa0>
   203c4:	e3a02003 	mov	r2, #3
   203c8:	e59f1018 	ldr	r1, [pc, #24]	; 203e8 <CTimer::TuneMsDelay()+0xa4>
   203cc:	ebfff2fc 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   203d0:	e28dd008 	add	sp, sp, #8
   203d4:	e8bd8070 	pop	{r4, r5, r6, pc}
   203d8:	00002710 	.word	0x00002710
   203dc:	51eb851f 	.word	0x51eb851f
   203e0:	10624dd3 	.word	0x10624dd3
   203e4:	000283b0 	.word	0x000283b0
   203e8:	000282d8 	.word	0x000282d8

000203ec <CTimer::Initialize()>:
   203ec:	e92d4070 	push	{r4, r5, r6, lr}
   203f0:	e1a04000 	mov	r4, r0
   203f4:	e5900000 	ldr	r0, [r0]
   203f8:	e3500000 	cmp	r0, #0
   203fc:	0a000011 	beq	20448 <CTimer::Initialize()+0x5c>
   20400:	e1a03004 	mov	r3, r4
   20404:	e59f2054 	ldr	r2, [pc, #84]	; 20460 <CTimer::Initialize()+0x74>
   20408:	e3a01003 	mov	r1, #3
   2040c:	ebffeeaa 	bl	1bebc <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   20410:	e3a05000 	mov	r5, #0
   20414:	ee075f9a 	mcr	15, 0, r5, cr7, cr10, {4}
   20418:	e59f2044 	ldr	r2, [pc, #68]	; 20464 <CTimer::Initialize()+0x78>
   2041c:	e59f3044 	ldr	r3, [pc, #68]	; 20468 <CTimer::Initialize()+0x7c>
   20420:	e1a00004 	mov	r0, r4
   20424:	e5823004 	str	r3, [r2, #4]
   20428:	e5923004 	ldr	r3, [r2, #4]
   2042c:	e2833c27 	add	r3, r3, #9984	; 0x2700
   20430:	e2833010 	add	r3, r3, #16
   20434:	e5823018 	str	r3, [r2, #24]
   20438:	ebffffc1 	bl	20344 <CTimer::TuneMsDelay()>
   2043c:	ee075fba 	mcr	15, 0, r5, cr7, cr10, {5}
   20440:	e3a00001 	mov	r0, #1
   20444:	e8bd8070 	pop	{r4, r5, r6, pc}
   20448:	e59f001c 	ldr	r0, [pc, #28]	; 2046c <CTimer::Initialize()+0x80>
   2044c:	e3a02057 	mov	r2, #87	; 0x57
   20450:	e59f1018 	ldr	r1, [pc, #24]	; 20470 <CTimer::Initialize()+0x84>
   20454:	ebffe73e 	bl	1a154 <assertion_failed>
   20458:	e5940000 	ldr	r0, [r4]
   2045c:	eaffffe7 	b	20400 <CTimer::Initialize()+0x14>
   20460:	00020304 	.word	0x00020304
   20464:	20003000 	.word	0x20003000
   20468:	fe363c80 	.word	0xfe363c80
   2046c:	00022e78 	.word	0x00022e78
   20470:	000282e0 	.word	0x000282e0

00020474 <CTimer::RegisterPeriodicHandler(void (*)())>:
   20474:	e5903028 	ldr	r3, [r0, #40]	; 0x28
   20478:	e92d4070 	push	{r4, r5, r6, lr}
   2047c:	e3530000 	cmp	r3, #0
   20480:	e1a04000 	mov	r4, r0
   20484:	e1a05001 	mov	r5, r1
   20488:	0a000003 	beq	2049c <CTimer::RegisterPeriodicHandler(void (*)())+0x28>
   2048c:	e3a02c02 	mov	r2, #512	; 0x200
   20490:	e59f1024 	ldr	r1, [pc, #36]	; 204bc <CTimer::RegisterPeriodicHandler(void (*)())+0x48>
   20494:	e59f0024 	ldr	r0, [pc, #36]	; 204c0 <CTimer::RegisterPeriodicHandler(void (*)())+0x4c>
   20498:	ebffe72d 	bl	1a154 <assertion_failed>
   2049c:	e3550000 	cmp	r5, #0
   204a0:	e5845028 	str	r5, [r4, #40]	; 0x28
   204a4:	18bd8070 	popne	{r4, r5, r6, pc}
   204a8:	e59f2014 	ldr	r2, [pc, #20]	; 204c4 <CTimer::RegisterPeriodicHandler(void (*)())+0x50>
   204ac:	e59f1008 	ldr	r1, [pc, #8]	; 204bc <CTimer::RegisterPeriodicHandler(void (*)())+0x48>
   204b0:	e59f0010 	ldr	r0, [pc, #16]	; 204c8 <CTimer::RegisterPeriodicHandler(void (*)())+0x54>
   204b4:	e8bd4070 	pop	{r4, r5, r6, lr}
   204b8:	eaffe725 	b	1a154 <assertion_failed>
   204bc:	000282e0 	.word	0x000282e0
   204c0:	000283c8 	.word	0x000283c8
   204c4:	00000202 	.word	0x00000202
   204c8:	000283e0 	.word	0x000283e0

000204cc <CTimer::SimpleMsDelay(unsigned int)>:
   204cc:	e3500000 	cmp	r0, #0
   204d0:	012fff1e 	bxeq	lr
   204d4:	e3a03ffa 	mov	r3, #1000	; 0x3e8
   204d8:	e0000093 	mul	r0, r3, r0
   204dc:	e3500000 	cmp	r0, #0
   204e0:	012fff1e 	bxeq	lr
   204e4:	eafffccf 	b	1f828 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]>

000204e8 <CTimer::SimpleusDelay(unsigned int)>:
   204e8:	e3500000 	cmp	r0, #0
   204ec:	012fff1e 	bxeq	lr
   204f0:	eafffccc 	b	1f828 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]>

000204f4 <CTimer::IsLeapYear(unsigned int)>:
   204f4:	e3a02064 	mov	r2, #100	; 0x64
   204f8:	e59f303c 	ldr	r3, [pc, #60]	; 2053c <CTimer::IsLeapYear(unsigned int)+0x48>
   204fc:	e0831093 	umull	r1, r3, r3, r0
   20500:	e1a012a3 	lsr	r1, r3, #5
   20504:	e0020192 	mul	r2, r2, r1
   20508:	e1500002 	cmp	r0, r2
   2050c:	0a000003 	beq	20520 <CTimer::IsLeapYear(unsigned int)+0x2c>
   20510:	e3100003 	tst	r0, #3
   20514:	03a00001 	moveq	r0, #1
   20518:	13a00000 	movne	r0, #0
   2051c:	e12fff1e 	bx	lr
   20520:	e3a02e19 	mov	r2, #400	; 0x190
   20524:	e1a033a3 	lsr	r3, r3, #7
   20528:	e0030392 	mul	r3, r2, r3
   2052c:	e0400003 	sub	r0, r0, r3
   20530:	e16f0f10 	clz	r0, r0
   20534:	e1a002a0 	lsr	r0, r0, #5
   20538:	e12fff1e 	bx	lr
   2053c:	51eb851f 	.word	0x51eb851f

00020540 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)>:
   20540:	e3500001 	cmp	r0, #1
   20544:	0a000002 	beq	20554 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x14>
   20548:	e59f3058 	ldr	r3, [pc, #88]	; 205a8 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x68>
   2054c:	e7930100 	ldr	r0, [r3, r0, lsl #2]
   20550:	e12fff1e 	bx	lr
   20554:	e3a02064 	mov	r2, #100	; 0x64
   20558:	e59f304c 	ldr	r3, [pc, #76]	; 205ac <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x6c>
   2055c:	e083c193 	umull	ip, r3, r3, r1
   20560:	e1a0c2a3 	lsr	ip, r3, #5
   20564:	e0020c92 	mul	r2, r2, ip
   20568:	e1510002 	cmp	r1, r2
   2056c:	0a000006 	beq	2058c <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x4c>
   20570:	e3110003 	tst	r1, #3
   20574:	03a01001 	moveq	r1, #1
   20578:	13a01000 	movne	r1, #0
   2057c:	e3510000 	cmp	r1, #0
   20580:	0afffff0 	beq	20548 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x8>
   20584:	e3a0001d 	mov	r0, #29
   20588:	e12fff1e 	bx	lr
   2058c:	e3a02e19 	mov	r2, #400	; 0x190
   20590:	e1a033a3 	lsr	r3, r3, #7
   20594:	e0030392 	mul	r3, r2, r3
   20598:	e0411003 	sub	r1, r1, r3
   2059c:	e16f1f11 	clz	r1, r1
   205a0:	e1a012a1 	lsr	r1, r1, #5
   205a4:	eafffff4 	b	2057c <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x3c>
   205a8:	000282a8 	.word	0x000282a8
   205ac:	51eb851f 	.word	0x51eb851f

000205b0 <CTimer::Get()>:
   205b0:	e92d4010 	push	{r4, lr}
   205b4:	e59f4020 	ldr	r4, [pc, #32]	; 205dc <CTimer::Get()+0x2c>
   205b8:	e5940000 	ldr	r0, [r4]
   205bc:	e3500000 	cmp	r0, #0
   205c0:	18bd8010 	popne	{r4, pc}
   205c4:	e59f2014 	ldr	r2, [pc, #20]	; 205e0 <CTimer::Get()+0x30>
   205c8:	e59f1014 	ldr	r1, [pc, #20]	; 205e4 <CTimer::Get()+0x34>
   205cc:	e59f0014 	ldr	r0, [pc, #20]	; 205e8 <CTimer::Get()+0x38>
   205d0:	ebffe6df 	bl	1a154 <assertion_failed>
   205d4:	e5940000 	ldr	r0, [r4]
   205d8:	e8bd8010 	pop	{r4, pc}
   205dc:	000299d4 	.word	0x000299d4
   205e0:	0000023e 	.word	0x0000023e
   205e4:	000282e0 	.word	0x000282e0
   205e8:	00022d0c 	.word	0x00022d0c

000205ec <memset>:
   205ec:	e3520000 	cmp	r2, #0
   205f0:	012fff1e 	bxeq	lr
   205f4:	e1a03000 	mov	r3, r0
   205f8:	e6af1071 	sxtb	r1, r1
   205fc:	e0802002 	add	r2, r0, r2
   20600:	e4c31001 	strb	r1, [r3], #1
   20604:	e1530002 	cmp	r3, r2
   20608:	1afffffc 	bne	20600 <memset+0x14>
   2060c:	e12fff1e 	bx	lr

00020610 <memcmp>:
   20610:	e3520000 	cmp	r2, #0
   20614:	0a00000e 	beq	20654 <memcmp+0x44>
   20618:	e5d0c000 	ldrb	ip, [r0]
   2061c:	e5d13000 	ldrb	r3, [r1]
   20620:	e15c0003 	cmp	ip, r3
   20624:	ca00000c 	bgt	2065c <memcmp+0x4c>
   20628:	ba00000d 	blt	20664 <memcmp+0x54>
   2062c:	e0812002 	add	r2, r1, r2
   20630:	e2811001 	add	r1, r1, #1
   20634:	ea000004 	b	2064c <memcmp+0x3c>
   20638:	e5f0c001 	ldrb	ip, [r0, #1]!
   2063c:	e4d13001 	ldrb	r3, [r1], #1
   20640:	e15c0003 	cmp	ip, r3
   20644:	ca000004 	bgt	2065c <memcmp+0x4c>
   20648:	ba000005 	blt	20664 <memcmp+0x54>
   2064c:	e1510002 	cmp	r1, r2
   20650:	1afffff8 	bne	20638 <memcmp+0x28>
   20654:	e3a00000 	mov	r0, #0
   20658:	e12fff1e 	bx	lr
   2065c:	e3a00001 	mov	r0, #1
   20660:	e12fff1e 	bx	lr
   20664:	e3e00000 	mvn	r0, #0
   20668:	e12fff1e 	bx	lr

0002066c <strlen>:
   2066c:	e1d010d0 	ldrsb	r1, [r0]
   20670:	e2803001 	add	r3, r0, #1
   20674:	e3510000 	cmp	r1, #0
   20678:	0a000003 	beq	2068c <strlen+0x20>
   2067c:	e0431000 	sub	r1, r3, r0
   20680:	e0d320d1 	ldrsb	r2, [r3], #1
   20684:	e3520000 	cmp	r2, #0
   20688:	1afffffb 	bne	2067c <strlen+0x10>
   2068c:	e1a00001 	mov	r0, r1
   20690:	e12fff1e 	bx	lr

00020694 <strcmp>:
   20694:	e1d030d0 	ldrsb	r3, [r0]
   20698:	e1d120d0 	ldrsb	r2, [r1]
   2069c:	e3530000 	cmp	r3, #0
   206a0:	1a000007 	bne	206c4 <strcmp+0x30>
   206a4:	ea000008 	b	206cc <strcmp+0x38>
   206a8:	e1530002 	cmp	r3, r2
   206ac:	ca00000b 	bgt	206e0 <strcmp+0x4c>
   206b0:	ba00000c 	blt	206e8 <strcmp+0x54>
   206b4:	e1f030d1 	ldrsb	r3, [r0, #1]!
   206b8:	e3530000 	cmp	r3, #0
   206bc:	0a00000b 	beq	206f0 <strcmp+0x5c>
   206c0:	e1f120d1 	ldrsb	r2, [r1, #1]!
   206c4:	e3520000 	cmp	r2, #0
   206c8:	1afffff6 	bne	206a8 <strcmp+0x14>
   206cc:	e1530002 	cmp	r3, r2
   206d0:	ca000002 	bgt	206e0 <strcmp+0x4c>
   206d4:	b3e00000 	mvnlt	r0, #0
   206d8:	a3a00000 	movge	r0, #0
   206dc:	e12fff1e 	bx	lr
   206e0:	e3a00001 	mov	r0, #1
   206e4:	e12fff1e 	bx	lr
   206e8:	e3e00000 	mvn	r0, #0
   206ec:	e12fff1e 	bx	lr
   206f0:	e1d120d1 	ldrsb	r2, [r1, #1]
   206f4:	e1530002 	cmp	r3, r2
   206f8:	dafffff5 	ble	206d4 <strcmp+0x40>
   206fc:	eafffff7 	b	206e0 <strcmp+0x4c>

00020700 <strcasecmp>:
   20700:	e2400001 	sub	r0, r0, #1
   20704:	e1f030d1 	ldrsb	r3, [r0, #1]!
   20708:	e2432061 	sub	r2, r3, #97	; 0x61
   2070c:	e3520019 	cmp	r2, #25
   20710:	92433020 	subls	r3, r3, #32
   20714:	e3530000 	cmp	r3, #0
   20718:	0a00001f 	beq	2079c <strcasecmp+0x9c>
   2071c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   20720:	e0d120d1 	ldrsb	r2, [r1], #1
   20724:	e242c061 	sub	ip, r2, #97	; 0x61
   20728:	e35c0019 	cmp	ip, #25
   2072c:	81a0e002 	movhi	lr, r2
   20730:	9242e020 	subls	lr, r2, #32
   20734:	e35e0000 	cmp	lr, #0
   20738:	1a000006 	bne	20758 <strcasecmp+0x58>
   2073c:	e35c0019 	cmp	ip, #25
   20740:	92422020 	subls	r2, r2, #32
   20744:	e1530002 	cmp	r3, r2
   20748:	ca000011 	bgt	20794 <strcasecmp+0x94>
   2074c:	b3e00000 	mvnlt	r0, #0
   20750:	a3a00000 	movge	r0, #0
   20754:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   20758:	e153000e 	cmp	r3, lr
   2075c:	ca00000c 	bgt	20794 <strcasecmp+0x94>
   20760:	ba000016 	blt	207c0 <strcasecmp+0xc0>
   20764:	e1f030d1 	ldrsb	r3, [r0, #1]!
   20768:	e2432061 	sub	r2, r3, #97	; 0x61
   2076c:	e3520019 	cmp	r2, #25
   20770:	92433020 	subls	r3, r3, #32
   20774:	e3530000 	cmp	r3, #0
   20778:	1affffe8 	bne	20720 <strcasecmp+0x20>
   2077c:	e1d120d0 	ldrsb	r2, [r1]
   20780:	e242c061 	sub	ip, r2, #97	; 0x61
   20784:	e35c0019 	cmp	ip, #25
   20788:	92422020 	subls	r2, r2, #32
   2078c:	e1530002 	cmp	r3, r2
   20790:	daffffed 	ble	2074c <strcasecmp+0x4c>
   20794:	e3a00001 	mov	r0, #1
   20798:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   2079c:	e1d120d0 	ldrsb	r2, [r1]
   207a0:	e242c061 	sub	ip, r2, #97	; 0x61
   207a4:	e35c0019 	cmp	ip, #25
   207a8:	92422020 	subls	r2, r2, #32
   207ac:	e1530002 	cmp	r3, r2
   207b0:	ca000004 	bgt	207c8 <strcasecmp+0xc8>
   207b4:	b3e00000 	mvnlt	r0, #0
   207b8:	a3a00000 	movge	r0, #0
   207bc:	e12fff1e 	bx	lr
   207c0:	e3e00000 	mvn	r0, #0
   207c4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   207c8:	e3a00001 	mov	r0, #1
   207cc:	e12fff1e 	bx	lr

000207d0 <strncmp>:
   207d0:	e3520000 	cmp	r2, #0
   207d4:	0a000016 	beq	20834 <strncmp+0x64>
   207d8:	e1d030d0 	ldrsb	r3, [r0]
   207dc:	e1d1c0d0 	ldrsb	ip, [r1]
   207e0:	e3530000 	cmp	r3, #0
   207e4:	0a000015 	beq	20840 <strncmp+0x70>
   207e8:	e35c0000 	cmp	ip, #0
   207ec:	0a000013 	beq	20840 <strncmp+0x70>
   207f0:	e15c0003 	cmp	ip, r3
   207f4:	ba000016 	blt	20854 <strncmp+0x84>
   207f8:	d0802002 	addle	r2, r0, r2
   207fc:	d2800001 	addle	r0, r0, #1
   20800:	da000009 	ble	2082c <strncmp+0x5c>
   20804:	ea000014 	b	2085c <strncmp+0x8c>
   20808:	e0d030d1 	ldrsb	r3, [r0], #1
   2080c:	e3530000 	cmp	r3, #0
   20810:	0a000009 	beq	2083c <strncmp+0x6c>
   20814:	e1f1c0d1 	ldrsb	ip, [r1, #1]!
   20818:	e35c0000 	cmp	ip, #0
   2081c:	0a000007 	beq	20840 <strncmp+0x70>
   20820:	e153000c 	cmp	r3, ip
   20824:	ca00000a 	bgt	20854 <strncmp+0x84>
   20828:	ba00000b 	blt	2085c <strncmp+0x8c>
   2082c:	e1500002 	cmp	r0, r2
   20830:	1afffff4 	bne	20808 <strncmp+0x38>
   20834:	e3a00000 	mov	r0, #0
   20838:	e12fff1e 	bx	lr
   2083c:	e1d1c0d1 	ldrsb	ip, [r1, #1]
   20840:	e153000c 	cmp	r3, ip
   20844:	ca000002 	bgt	20854 <strncmp+0x84>
   20848:	b3e00000 	mvnlt	r0, #0
   2084c:	a3a00000 	movge	r0, #0
   20850:	e12fff1e 	bx	lr
   20854:	e3a00001 	mov	r0, #1
   20858:	e12fff1e 	bx	lr
   2085c:	e3e00000 	mvn	r0, #0
   20860:	e12fff1e 	bx	lr

00020864 <strcpy>:
   20864:	e1d130d0 	ldrsb	r3, [r1]
   20868:	e1a02000 	mov	r2, r0
   2086c:	e3530000 	cmp	r3, #0
   20870:	0a000003 	beq	20884 <strcpy+0x20>
   20874:	e4c23001 	strb	r3, [r2], #1
   20878:	e1f130d1 	ldrsb	r3, [r1, #1]!
   2087c:	e3530000 	cmp	r3, #0
   20880:	1afffffb 	bne	20874 <strcpy+0x10>
   20884:	e3a03000 	mov	r3, #0
   20888:	e5c23000 	strb	r3, [r2]
   2088c:	e12fff1e 	bx	lr

00020890 <strncpy>:
   20890:	e3520000 	cmp	r2, #0
   20894:	012fff1e 	bxeq	lr
   20898:	e1d1c0d0 	ldrsb	ip, [r1]
   2089c:	e35c0000 	cmp	ip, #0
   208a0:	0a000009 	beq	208cc <strncpy+0x3c>
   208a4:	e0802002 	add	r2, r0, r2
   208a8:	e1a03000 	mov	r3, r0
   208ac:	ea000002 	b	208bc <strncpy+0x2c>
   208b0:	e1f1c0d1 	ldrsb	ip, [r1, #1]!
   208b4:	e35c0000 	cmp	ip, #0
   208b8:	0a000004 	beq	208d0 <strncpy+0x40>
   208bc:	e4c3c001 	strb	ip, [r3], #1
   208c0:	e1530002 	cmp	r3, r2
   208c4:	1afffff9 	bne	208b0 <strncpy+0x20>
   208c8:	e12fff1e 	bx	lr
   208cc:	e1a03000 	mov	r3, r0
   208d0:	e3a02000 	mov	r2, #0
   208d4:	e5c32000 	strb	r2, [r3]
   208d8:	e12fff1e 	bx	lr

000208dc <strcat>:
   208dc:	e1d030d0 	ldrsb	r3, [r0]
   208e0:	e3530000 	cmp	r3, #0
   208e4:	e1a03000 	mov	r3, r0
   208e8:	0a000002 	beq	208f8 <strcat+0x1c>
   208ec:	e1f320d1 	ldrsb	r2, [r3, #1]!
   208f0:	e3520000 	cmp	r2, #0
   208f4:	1afffffc 	bne	208ec <strcat+0x10>
   208f8:	e1d120d0 	ldrsb	r2, [r1]
   208fc:	e3520000 	cmp	r2, #0
   20900:	0a000003 	beq	20914 <strcat+0x38>
   20904:	e4c32001 	strb	r2, [r3], #1
   20908:	e1f120d1 	ldrsb	r2, [r1, #1]!
   2090c:	e3520000 	cmp	r2, #0
   20910:	1afffffb 	bne	20904 <strcat+0x28>
   20914:	e3a02000 	mov	r2, #0
   20918:	e5c32000 	strb	r2, [r3]
   2091c:	e12fff1e 	bx	lr

00020920 <strchr>:
   20920:	e1d020d0 	ldrsb	r2, [r0]
   20924:	e3520000 	cmp	r2, #0
   20928:	0a000009 	beq	20954 <strchr+0x34>
   2092c:	e1510002 	cmp	r1, r2
   20930:	1a000002 	bne	20940 <strchr+0x20>
   20934:	ea000008 	b	2095c <strchr+0x3c>
   20938:	e1530001 	cmp	r3, r1
   2093c:	012fff1e 	bxeq	lr
   20940:	e1f030d1 	ldrsb	r3, [r0, #1]!
   20944:	e3530000 	cmp	r3, #0
   20948:	1afffffa 	bne	20938 <strchr+0x18>
   2094c:	e1a00003 	mov	r0, r3
   20950:	e12fff1e 	bx	lr
   20954:	e1a00002 	mov	r0, r2
   20958:	e12fff1e 	bx	lr
   2095c:	e12fff1e 	bx	lr

00020960 <strtok_r>:
   20960:	e3500000 	cmp	r0, #0
   20964:	0a00002c 	beq	20a1c <strtok_r+0xbc>
   20968:	e92d4030 	push	{r4, r5, lr}
   2096c:	e1d0e0d0 	ldrsb	lr, [r0]
   20970:	e35e0000 	cmp	lr, #0
   20974:	11d140d0 	ldrsbne	r4, [r1]
   20978:	0a000024 	beq	20a10 <strtok_r+0xb0>
   2097c:	e3540000 	cmp	r4, #0
   20980:	0a000008 	beq	209a8 <strtok_r+0x48>
   20984:	e15e0004 	cmp	lr, r4
   20988:	0a000019 	beq	209f4 <strtok_r+0x94>
   2098c:	e1a0c001 	mov	ip, r1
   20990:	ea000001 	b	2099c <strtok_r+0x3c>
   20994:	e15e0003 	cmp	lr, r3
   20998:	0a000015 	beq	209f4 <strtok_r+0x94>
   2099c:	e1fc30d1 	ldrsb	r3, [ip, #1]!
   209a0:	e3530000 	cmp	r3, #0
   209a4:	1afffffa 	bne	20994 <strtok_r+0x34>
   209a8:	e35e0000 	cmp	lr, #0
   209ac:	0a000017 	beq	20a10 <strtok_r+0xb0>
   209b0:	e1a05000 	mov	r5, r0
   209b4:	e3540000 	cmp	r4, #0
   209b8:	0a000008 	beq	209e0 <strtok_r+0x80>
   209bc:	e15e0004 	cmp	lr, r4
   209c0:	0a00000d 	beq	209fc <strtok_r+0x9c>
   209c4:	e1a0c001 	mov	ip, r1
   209c8:	ea000001 	b	209d4 <strtok_r+0x74>
   209cc:	e15e0003 	cmp	lr, r3
   209d0:	0a000009 	beq	209fc <strtok_r+0x9c>
   209d4:	e1fc30d1 	ldrsb	r3, [ip, #1]!
   209d8:	e3530000 	cmp	r3, #0
   209dc:	1afffffa 	bne	209cc <strtok_r+0x6c>
   209e0:	e1f5e0d1 	ldrsb	lr, [r5, #1]!
   209e4:	e35e0000 	cmp	lr, #0
   209e8:	1afffff1 	bne	209b4 <strtok_r+0x54>
   209ec:	e5825000 	str	r5, [r2]
   209f0:	e8bd8030 	pop	{r4, r5, pc}
   209f4:	e1f0e0d1 	ldrsb	lr, [r0, #1]!
   209f8:	eaffffdf 	b	2097c <strtok_r+0x1c>
   209fc:	e3a03000 	mov	r3, #0
   20a00:	e2855001 	add	r5, r5, #1
   20a04:	e5453001 	strb	r3, [r5, #-1]
   20a08:	e5825000 	str	r5, [r2]
   20a0c:	e8bd8030 	pop	{r4, r5, pc}
   20a10:	e3a00000 	mov	r0, #0
   20a14:	e5820000 	str	r0, [r2]
   20a18:	e8bd8030 	pop	{r4, r5, pc}
   20a1c:	e5920000 	ldr	r0, [r2]
   20a20:	e3500000 	cmp	r0, #0
   20a24:	1affffcf 	bne	20968 <strtok_r+0x8>
   20a28:	e12fff1e 	bx	lr

00020a2c <strtoul>:
   20a2c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   20a30:	e3510000 	cmp	r1, #0
   20a34:	e2425002 	sub	r5, r2, #2
   20a38:	15810000 	strne	r0, [r1]
   20a3c:	e3520000 	cmp	r2, #0
   20a40:	13550022 	cmpne	r5, #34	; 0x22
   20a44:	e3c2e010 	bic	lr, r2, #16
   20a48:	83a05001 	movhi	r5, #1
   20a4c:	93a05000 	movls	r5, #0
   20a50:	8a000037 	bhi	20b34 <strtoul+0x108>
   20a54:	e1d0c0d0 	ldrsb	ip, [r0]
   20a58:	e1a04000 	mov	r4, r0
   20a5c:	e24c3009 	sub	r3, ip, #9
   20a60:	e35c0020 	cmp	ip, #32
   20a64:	e2800001 	add	r0, r0, #1
   20a68:	e6ef3073 	uxtb	r3, r3
   20a6c:	0afffff8 	beq	20a54 <strtoul+0x28>
   20a70:	e3530004 	cmp	r3, #4
   20a74:	9afffff6 	bls	20a54 <strtoul+0x28>
   20a78:	e35c002b 	cmp	ip, #43	; 0x2b
   20a7c:	0a00002e 	beq	20b3c <strtoul+0x110>
   20a80:	e35c002d 	cmp	ip, #45	; 0x2d
   20a84:	01d4c0d1 	ldrsbeq	ip, [r4, #1]
   20a88:	03a07001 	moveq	r7, #1
   20a8c:	01a04000 	moveq	r4, r0
   20a90:	13a07000 	movne	r7, #0
   20a94:	e35c0030 	cmp	ip, #48	; 0x30
   20a98:	0a00002c 	beq	20b50 <strtoul+0x124>
   20a9c:	e3520000 	cmp	r2, #0
   20aa0:	03a0200a 	moveq	r2, #10
   20aa4:	e35c002f 	cmp	ip, #47	; 0x2f
   20aa8:	e1a0300c 	mov	r3, ip
   20aac:	da00001d 	ble	20b28 <strtoul+0xfc>
   20ab0:	e3a0e000 	mov	lr, #0
   20ab4:	e3a05001 	mov	r5, #1
   20ab8:	e1a0600e 	mov	r6, lr
   20abc:	ea000008 	b	20ae4 <strtoul+0xb8>
   20ac0:	e020329e 	mla	r0, lr, r2, r3
   20ac4:	e150000e 	cmp	r0, lr
   20ac8:	3a000029 	bcc	20b74 <strtoul+0x148>
   20acc:	e1f430d1 	ldrsb	r3, [r4, #1]!
   20ad0:	e1a05006 	mov	r5, r6
   20ad4:	e353002f 	cmp	r3, #47	; 0x2f
   20ad8:	e1a0c003 	mov	ip, r3
   20adc:	da000029 	ble	20b88 <strtoul+0x15c>
   20ae0:	e1a0e000 	mov	lr, r0
   20ae4:	e24cc061 	sub	ip, ip, #97	; 0x61
   20ae8:	e35c0019 	cmp	ip, #25
   20aec:	92433020 	subls	r3, r3, #32
   20af0:	e3530040 	cmp	r3, #64	; 0x40
   20af4:	c2433007 	subgt	r3, r3, #7
   20af8:	e2433030 	sub	r3, r3, #48	; 0x30
   20afc:	e1520003 	cmp	r2, r3
   20b00:	caffffee 	bgt	20ac0 <strtoul+0x94>
   20b04:	e1a0000e 	mov	r0, lr
   20b08:	e2255001 	eor	r5, r5, #1
   20b0c:	e3510000 	cmp	r1, #0
   20b10:	e0055007 	and	r5, r5, r7
   20b14:	0a000000 	beq	20b1c <strtoul+0xf0>
   20b18:	e5814000 	str	r4, [r1]
   20b1c:	e3550000 	cmp	r5, #0
   20b20:	12600000 	rsbne	r0, r0, #0
   20b24:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   20b28:	e3510000 	cmp	r1, #0
   20b2c:	13a00000 	movne	r0, #0
   20b30:	1afffff8 	bne	20b18 <strtoul+0xec>
   20b34:	e3a00000 	mov	r0, #0
   20b38:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   20b3c:	e1d4c0d1 	ldrsb	ip, [r4, #1]
   20b40:	e3a07000 	mov	r7, #0
   20b44:	e35c0030 	cmp	ip, #48	; 0x30
   20b48:	e1a04000 	mov	r4, r0
   20b4c:	1affffd2 	bne	20a9c <strtoul+0x70>
   20b50:	e1d4c0d1 	ldrsb	ip, [r4, #1]
   20b54:	e2840001 	add	r0, r4, #1
   20b58:	e3cc3020 	bic	r3, ip, #32
   20b5c:	e3530058 	cmp	r3, #88	; 0x58
   20b60:	0a00000a 	beq	20b90 <strtoul+0x164>
   20b64:	e3520000 	cmp	r2, #0
   20b68:	e1a04000 	mov	r4, r0
   20b6c:	03a02008 	moveq	r2, #8
   20b70:	eaffffcb 	b	20aa4 <strtoul+0x78>
   20b74:	e3510000 	cmp	r1, #0
   20b78:	0a00000a 	beq	20ba8 <strtoul+0x17c>
   20b7c:	e5814000 	str	r4, [r1]
   20b80:	e3e00000 	mvn	r0, #0
   20b84:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   20b88:	e3a05001 	mov	r5, #1
   20b8c:	eaffffde 	b	20b0c <strtoul+0xe0>
   20b90:	e35e0000 	cmp	lr, #0
   20b94:	1affffe6 	bne	20b34 <strtoul+0x108>
   20b98:	e1d4c0d2 	ldrsb	ip, [r4, #2]
   20b9c:	e3a02010 	mov	r2, #16
   20ba0:	e2844002 	add	r4, r4, #2
   20ba4:	eaffffbe 	b	20aa4 <strtoul+0x78>
   20ba8:	e3e00000 	mvn	r0, #0
   20bac:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00020bb0 <char2int>:
   20bb0:	e12fff1e 	bx	lr

00020bb4 <memcpy>:
   20bb4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
   20bb8:	e352007f 	cmp	r2, #127	; 0x7f
   20bbc:	9a00000b 	bls	20bf0 <memcpy+0x3c>
   20bc0:	e3110003 	tst	r1, #3
   20bc4:	1a000009 	bne	20bf0 <memcpy+0x3c>
   20bc8:	e3100003 	tst	r0, #3
   20bcc:	1a000007 	bne	20bf0 <memcpy+0x3c>
   20bd0:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
   20bd4:	e8b107f8 	ldm	r1!, {r3, r4, r5, r6, r7, r8, r9, sl}
   20bd8:	e2422020 	sub	r2, r2, #32
   20bdc:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
   20be0:	f5d1f040 	pld	[r1, #64]	; 0x40
   20be4:	e352001f 	cmp	r2, #31
   20be8:	8afffff9 	bhi	20bd4 <memcpy+0x20>
   20bec:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
   20bf0:	e3520000 	cmp	r2, #0
   20bf4:	0a000003 	beq	20c08 <memcpy+0x54>
   20bf8:	e4d13001 	ldrb	r3, [r1], #1
   20bfc:	e2522001 	subs	r2, r2, #1
   20c00:	e4c03001 	strb	r3, [r0], #1
   20c04:	1afffffb 	bne	20bf8 <memcpy+0x44>
   20c08:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
   20c0c:	e12fff1e 	bx	lr

00020c10 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
   20c10:	e12fff1e 	bx	lr

00020c14 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
   20c14:	e92d4010 	push	{r4, lr}
   20c18:	e1a04000 	mov	r4, r0
   20c1c:	e3a01010 	mov	r1, #16
   20c20:	eb0002e3 	bl	217b4 <operator delete(void*, unsigned int)>
   20c24:	e1a00004 	mov	r0, r4
   20c28:	e8bd8010 	pop	{r4, pc}

00020c2c <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]>:
   20c2c:	e92d4070 	push	{r4, r5, r6, lr}
   20c30:	e59f5094 	ldr	r5, [pc, #148]	; 20ccc <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0xa0>
   20c34:	e1a04000 	mov	r4, r0
   20c38:	e5950000 	ldr	r0, [r5]
   20c3c:	e1a06001 	mov	r6, r1
   20c40:	e3500000 	cmp	r0, #0
   20c44:	1a00001a 	bne	20cb4 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x88>
   20c48:	e1d400bc 	ldrh	r0, [r4, #12]
   20c4c:	e1d430be 	ldrh	r3, [r4, #14]
   20c50:	e5846008 	str	r6, [r4, #8]
   20c54:	e0402003 	sub	r2, r0, r3
   20c58:	e6bf2072 	sxth	r2, r2
   20c5c:	e3520000 	cmp	r2, #0
   20c60:	da00000c 	ble	20c98 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x6c>
   20c64:	e3560000 	cmp	r6, #0
   20c68:	1a00000c 	bne	20ca0 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x74>
   20c6c:	e2833001 	add	r3, r3, #1
   20c70:	e6ff3073 	uxth	r3, r3
   20c74:	e1c430be 	strh	r3, [r4, #14]
   20c78:	e5941004 	ldr	r1, [r4, #4]
   20c7c:	e5952004 	ldr	r2, [r5, #4]
   20c80:	e1833800 	orr	r3, r3, r0, lsl #16
   20c84:	e7823101 	str	r3, [r2, r1, lsl #2]
   20c88:	e5953000 	ldr	r3, [r5]
   20c8c:	e3530000 	cmp	r3, #0
   20c90:	1a000005 	bne	20cac <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x80>
   20c94:	e8bd8070 	pop	{r4, r5, r6, pc}
   20c98:	e3560000 	cmp	r6, #0
   20c9c:	1a000006 	bne	20cbc <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x90>
   20ca0:	e5953000 	ldr	r3, [r5]
   20ca4:	e3530000 	cmp	r3, #0
   20ca8:	08bd8070 	popeq	{r4, r5, r6, pc}
   20cac:	e8bd4070 	pop	{r4, r5, r6, lr}
   20cb0:	ea00028e 	b	216f0 <LeaveCritical>
   20cb4:	eb000260 	bl	2163c <EnterCritical>
   20cb8:	eaffffe2 	b	20c48 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x1c>
   20cbc:	e2800001 	add	r0, r0, #1
   20cc0:	e6ff0070 	uxth	r0, r0
   20cc4:	e1c400bc 	strh	r0, [r4, #12]
   20cc8:	eaffffea 	b	20c78 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x4c>
   20ccc:	000299d8 	.word	0x000299d8

00020cd0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)>:
   20cd0:	e3a03000 	mov	r3, #0
   20cd4:	e92d4030 	push	{r4, r5, lr}
   20cd8:	e59f2124 	ldr	r2, [pc, #292]	; 20e04 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x134>
   20cdc:	e3510001 	cmp	r1, #1
   20ce0:	e24dd024 	sub	sp, sp, #36	; 0x24
   20ce4:	e1a04000 	mov	r4, r0
   20ce8:	e5801004 	str	r1, [r0, #4]
   20cec:	e5802000 	str	r2, [r0]
   20cf0:	e1c030bc 	strh	r3, [r0, #12]
   20cf4:	e1c030be 	strh	r3, [r0, #14]
   20cf8:	9a000002 	bls	20d08 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x38>
   20cfc:	e1a00004 	mov	r0, r4
   20d00:	e28dd024 	add	sp, sp, #36	; 0x24
   20d04:	e8bd8030 	pop	{r4, r5, pc}
   20d08:	e59f50f8 	ldr	r5, [pc, #248]	; 20e08 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x138>
   20d0c:	e5950000 	ldr	r0, [r5]
   20d10:	e1500003 	cmp	r0, r3
   20d14:	1a00002c 	bne	20dcc <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0xfc>
   20d18:	e5953004 	ldr	r3, [r5, #4]
   20d1c:	e3530000 	cmp	r3, #0
   20d20:	0a000011 	beq	20d6c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x9c>
   20d24:	e3a01000 	mov	r1, #0
   20d28:	e5942004 	ldr	r2, [r4, #4]
   20d2c:	e7831102 	str	r1, [r3, r2, lsl #2]
   20d30:	e5953000 	ldr	r3, [r5]
   20d34:	e3530000 	cmp	r3, #0
   20d38:	1a000009 	bne	20d64 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x94>
   20d3c:	e5943004 	ldr	r3, [r4, #4]
   20d40:	e3530001 	cmp	r3, #1
   20d44:	8affffec 	bhi	20cfc <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x2c>
   20d48:	e5953004 	ldr	r3, [r5, #4]
   20d4c:	e3530000 	cmp	r3, #0
   20d50:	0affffe9 	beq	20cfc <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x2c>
   20d54:	e3a01000 	mov	r1, #0
   20d58:	e1a00004 	mov	r0, r4
   20d5c:	ebffffb2 	bl	20c2c <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]>
   20d60:	eaffffe5 	b	20cfc <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x2c>
   20d64:	eb000261 	bl	216f0 <LeaveCritical>
   20d68:	eafffff3 	b	20d3c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x6c>
   20d6c:	e3a00001 	mov	r0, #1
   20d70:	eb0001fa 	bl	21560 <CMemorySystem::GetCoherentPage(unsigned int)>
   20d74:	e5850004 	str	r0, [r5, #4]
   20d78:	e28d000c 	add	r0, sp, #12
   20d7c:	ebffe518 	bl	1a1e4 <CBcmPropertyTags::CBcmPropertyTags()>
   20d80:	e3a03004 	mov	r3, #4
   20d84:	e595c004 	ldr	ip, [r5, #4]
   20d88:	e58d3000 	str	r3, [sp]
   20d8c:	e3ccc103 	bic	ip, ip, #-1073741824	; 0xc0000000
   20d90:	e38cc101 	orr	ip, ip, #1073741824	; 0x40000000
   20d94:	e28d000c 	add	r0, sp, #12
   20d98:	e28d2010 	add	r2, sp, #16
   20d9c:	e3a03010 	mov	r3, #16
   20da0:	e59f1064 	ldr	r1, [pc, #100]	; 20e0c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x13c>
   20da4:	e58dc01c 	str	ip, [sp, #28]
   20da8:	ebffe564 	bl	1a340 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   20dac:	e3500000 	cmp	r0, #0
   20db0:	0a000007 	beq	20dd4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x104>
   20db4:	e28d000c 	add	r0, sp, #12
   20db8:	ebffe50f 	bl	1a1fc <CBcmPropertyTags::~CBcmPropertyTags()>
   20dbc:	e5953004 	ldr	r3, [r5, #4]
   20dc0:	e3530000 	cmp	r3, #0
   20dc4:	0affffd9 	beq	20d30 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x60>
   20dc8:	eaffffd5 	b	20d24 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x54>
   20dcc:	eb00021a 	bl	2163c <EnterCritical>
   20dd0:	eaffffd0 	b	20d18 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x48>
   20dd4:	e3a03010 	mov	r3, #16
   20dd8:	e58d0000 	str	r0, [sp]
   20ddc:	e28d2010 	add	r2, sp, #16
   20de0:	e59f1028 	ldr	r1, [pc, #40]	; 20e10 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x140>
   20de4:	e28d000c 	add	r0, sp, #12
   20de8:	ebffe554 	bl	1a340 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   20dec:	e3500000 	cmp	r0, #0
   20df0:	159d301c 	ldrne	r3, [sp, #28]
   20df4:	05850004 	streq	r0, [r5, #4]
   20df8:	13c33103 	bicne	r3, r3, #-1073741824	; 0xc0000000
   20dfc:	15853004 	strne	r3, [r5, #4]
   20e00:	eaffffeb 	b	20db4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0xe4>
   20e04:	00028430 	.word	0x00028430
   20e08:	000299d8 	.word	0x000299d8
   20e0c:	00048020 	.word	0x00048020
   20e10:	00040010 	.word	0x00040010

00020e14 <CVirtualGPIOPin::Write(unsigned int)>:
   20e14:	e5902004 	ldr	r2, [r0, #4]
   20e18:	e1a03001 	mov	r3, r1
   20e1c:	e3520001 	cmp	r2, #1
   20e20:	812fff1e 	bxhi	lr
   20e24:	e3510001 	cmp	r1, #1
   20e28:	93a03000 	movls	r3, #0
   20e2c:	83a03001 	movhi	r3, #1
   20e30:	e59f2014 	ldr	r2, [pc, #20]	; 20e4c <CVirtualGPIOPin::Write(unsigned int)+0x38>
   20e34:	e5922004 	ldr	r2, [r2, #4]
   20e38:	e3520000 	cmp	r2, #0
   20e3c:	03833001 	orreq	r3, r3, #1
   20e40:	e3530000 	cmp	r3, #0
   20e44:	112fff1e 	bxne	lr
   20e48:	eaffff77 	b	20c2c <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]>
   20e4c:	000299d8 	.word	0x000299d8

00020e50 <CVirtualGPIOPin::Invert()>:
   20e50:	e5901008 	ldr	r1, [r0, #8]
   20e54:	e2211001 	eor	r1, r1, #1
   20e58:	eaffffed 	b	20e14 <CVirtualGPIOPin::Write(unsigned int)>

00020e5c <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE>:
   20e5c:	e3a02000 	mov	r2, #0
   20e60:	e59f3004 	ldr	r3, [pc, #4]	; 20e6c <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE+0x10>
   20e64:	e5832000 	str	r2, [r3]
   20e68:	e12fff1e 	bx	lr
   20e6c:	000299d8 	.word	0x000299d8

00020e70 <CExceptionHandler::CExceptionHandler()>:
   20e70:	e92d4070 	push	{r4, r5, r6, lr}
   20e74:	e59f506c 	ldr	r5, [pc, #108]	; 20ee8 <CExceptionHandler::CExceptionHandler()+0x78>
   20e78:	e1a04000 	mov	r4, r0
   20e7c:	e5953000 	ldr	r3, [r5]
   20e80:	e3530000 	cmp	r3, #0
   20e84:	0a000003 	beq	20e98 <CExceptionHandler::CExceptionHandler()+0x28>
   20e88:	e3a02030 	mov	r2, #48	; 0x30
   20e8c:	e59f1058 	ldr	r1, [pc, #88]	; 20eec <CExceptionHandler::CExceptionHandler()+0x7c>
   20e90:	e59f0058 	ldr	r0, [pc, #88]	; 20ef0 <CExceptionHandler::CExceptionHandler()+0x80>
   20e94:	ebffe4ae 	bl	1a154 <assertion_failed>
   20e98:	e3a00000 	mov	r0, #0
   20e9c:	e59f1050 	ldr	r1, [pc, #80]	; 20ef4 <CExceptionHandler::CExceptionHandler()+0x84>
   20ea0:	e59f2050 	ldr	r2, [pc, #80]	; 20ef8 <CExceptionHandler::CExceptionHandler()+0x88>
   20ea4:	e59f3050 	ldr	r3, [pc, #80]	; 20efc <CExceptionHandler::CExceptionHandler()+0x8c>
   20ea8:	e1a01141 	asr	r1, r1, #2
   20eac:	e1a02142 	asr	r2, r2, #2
   20eb0:	e1a03143 	asr	r3, r3, #2
   20eb4:	e2411002 	sub	r1, r1, #2
   20eb8:	e2422002 	sub	r2, r2, #2
   20ebc:	e2433002 	sub	r3, r3, #2
   20ec0:	e38114ea 	orr	r1, r1, #-369098752	; 0xea000000
   20ec4:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
   20ec8:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
   20ecc:	e5854000 	str	r4, [r5]
   20ed0:	e5801004 	str	r1, [r0, #4]
   20ed4:	e580200c 	str	r2, [r0, #12]
   20ed8:	e5803010 	str	r3, [r0, #16]
   20edc:	eb000228 	bl	21784 <SyncDataAndInstructionCache>
   20ee0:	e1a00004 	mov	r0, r4
   20ee4:	e8bd8070 	pop	{r4, r5, r6, pc}
   20ee8:	000299e0 	.word	0x000299e0
   20eec:	00028440 	.word	0x00028440
   20ef0:	000282ec 	.word	0x000282ec
   20ef4:	00021210 	.word	0x00021210
   20ef8:	00021170 	.word	0x00021170
   20efc:	000211b8 	.word	0x000211b8

00020f00 <CExceptionHandler::~CExceptionHandler()>:
   20f00:	e3a02000 	mov	r2, #0
   20f04:	e59f3004 	ldr	r3, [pc, #4]	; 20f10 <CExceptionHandler::~CExceptionHandler()+0x10>
   20f08:	e5832000 	str	r2, [r3]
   20f0c:	e12fff1e 	bx	lr
   20f10:	000299e0 	.word	0x000299e0

00020f14 <CExceptionHandler::Throw(unsigned int)>:
   20f14:	e92d4010 	push	{r4, lr}
   20f18:	e1a04001 	mov	r4, r1
   20f1c:	e24dd008 	sub	sp, sp, #8
   20f20:	ebffee7e 	bl	1c920 <CLogger::Get()>
   20f24:	e59f201c 	ldr	r2, [pc, #28]	; 20f48 <CExceptionHandler::Throw(unsigned int)+0x34>
   20f28:	e59f301c 	ldr	r3, [pc, #28]	; 20f4c <CExceptionHandler::Throw(unsigned int)+0x38>
   20f2c:	e7921104 	ldr	r1, [r2, r4, lsl #2]
   20f30:	e3a02000 	mov	r2, #0
   20f34:	e58d1000 	str	r1, [sp]
   20f38:	e59f1010 	ldr	r1, [pc, #16]	; 20f50 <CExceptionHandler::Throw(unsigned int)+0x3c>
   20f3c:	ebfff020 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   20f40:	e28dd008 	add	sp, sp, #8
   20f44:	e8bd8010 	pop	{r4, pc}
   20f48:	000298bc 	.word	0x000298bc
   20f4c:	00028458 	.word	0x00028458
   20f50:	00028438 	.word	0x00028438

00020f54 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>:
   20f54:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   20f58:	e3510002 	cmp	r1, #2
   20f5c:	e24dd024 	sub	sp, sp, #36	; 0x24
   20f60:	e1a05001 	mov	r5, r1
   20f64:	e1a04002 	mov	r4, r2
   20f68:	0a000028 	beq	21010 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xbc>
   20f6c:	e3510003 	cmp	r1, #3
   20f70:	0a000020 	beq	20ff8 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xa4>
   20f74:	e3a08000 	mov	r8, #0
   20f78:	e1a09008 	mov	r9, r8
   20f7c:	e3540000 	cmp	r4, #0
   20f80:	0a000025 	beq	2101c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xc8>
   20f84:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   20f88:	e5947048 	ldr	r7, [r4, #72]	; 0x48
   20f8c:	e203301f 	and	r3, r3, #31
   20f90:	e3530011 	cmp	r3, #17
   20f94:	e5946044 	ldr	r6, [r4, #68]	; 0x44
   20f98:	0a000019 	beq	21004 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xb0>
   20f9c:	e3530012 	cmp	r3, #18
   20fa0:	089400c0 	ldmeq	r4, {r6, r7}
   20fa4:	e59f1084 	ldr	r1, [pc, #132]	; 21030 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xdc>
   20fa8:	e1a00006 	mov	r0, r6
   20fac:	ebffe63b 	bl	1a8a0 <debug_stacktrace(unsigned int const*, char const*)>
   20fb0:	ebffee5a 	bl	1c920 <CLogger::Get()>
   20fb4:	e59f3078 	ldr	r3, [pc, #120]	; 21034 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe0>
   20fb8:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
   20fbc:	e7931105 	ldr	r1, [r3, r5, lsl #2]
   20fc0:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   20fc4:	e58d1000 	str	r1, [sp]
   20fc8:	e58d2018 	str	r2, [sp, #24]
   20fcc:	e58d3004 	str	r3, [sp, #4]
   20fd0:	e58d7014 	str	r7, [sp, #20]
   20fd4:	e58d6010 	str	r6, [sp, #16]
   20fd8:	e58d800c 	str	r8, [sp, #12]
   20fdc:	e58d9008 	str	r9, [sp, #8]
   20fe0:	e59f3050 	ldr	r3, [pc, #80]	; 21038 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe4>
   20fe4:	e3a02000 	mov	r2, #0
   20fe8:	e59f1040 	ldr	r1, [pc, #64]	; 21030 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xdc>
   20fec:	ebffeff4 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   20ff0:	e28dd024 	add	sp, sp, #36	; 0x24
   20ff4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   20ff8:	ee159f10 	mrc	15, 0, r9, cr5, cr0, {0}
   20ffc:	ee168f10 	mrc	15, 0, r8, cr6, cr0, {0}
   21000:	eaffffdd 	b	20f7c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x28>
   21004:	e594700c 	ldr	r7, [r4, #12]
   21008:	e5946008 	ldr	r6, [r4, #8]
   2100c:	eaffffe4 	b	20fa4 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x50>
   21010:	ee159f30 	mrc	15, 0, r9, cr5, cr0, {1}
   21014:	ee168f50 	mrc	15, 0, r8, cr6, cr0, {2}
   21018:	eaffffd7 	b	20f7c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x28>
   2101c:	e3a02069 	mov	r2, #105	; 0x69
   21020:	e59f1014 	ldr	r1, [pc, #20]	; 2103c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe8>
   21024:	e59f0014 	ldr	r0, [pc, #20]	; 21040 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xec>
   21028:	ebffe449 	bl	1a154 <assertion_failed>
   2102c:	eaffffd4 	b	20f84 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x30>
   21030:	00028438 	.word	0x00028438
   21034:	000298bc 	.word	0x000298bc
   21038:	00028474 	.word	0x00028474
   2103c:	00028440 	.word	0x00028440
   21040:	00028468 	.word	0x00028468

00021044 <CExceptionHandler::Get()>:
   21044:	e92d4010 	push	{r4, lr}
   21048:	e59f4020 	ldr	r4, [pc, #32]	; 21070 <CExceptionHandler::Get()+0x2c>
   2104c:	e5940000 	ldr	r0, [r4]
   21050:	e3500000 	cmp	r0, #0
   21054:	18bd8010 	popne	{r4, pc}
   21058:	e3a02087 	mov	r2, #135	; 0x87
   2105c:	e59f1010 	ldr	r1, [pc, #16]	; 21074 <CExceptionHandler::Get()+0x30>
   21060:	e59f0010 	ldr	r0, [pc, #16]	; 21078 <CExceptionHandler::Get()+0x34>
   21064:	ebffe43a 	bl	1a154 <assertion_failed>
   21068:	e5940000 	ldr	r0, [r4]
   2106c:	e8bd8010 	pop	{r4, pc}
   21070:	000299e0 	.word	0x000299e0
   21074:	00028440 	.word	0x00028440
   21078:	00022d0c 	.word	0x00022d0c

0002107c <ExceptionHandler>:
   2107c:	e92d4070 	push	{r4, r5, r6, lr}
   21080:	e3a03000 	mov	r3, #0
   21084:	e1a05000 	mov	r5, r0
   21088:	e1a06001 	mov	r6, r1
   2108c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   21090:	ebffec2b 	bl	1c144 <CInterruptSystem::DisableFIQ()>
   21094:	f1080040 	cpsie	f
   21098:	e59f403c 	ldr	r4, [pc, #60]	; 210dc <ExceptionHandler+0x60>
   2109c:	e5940000 	ldr	r0, [r4]
   210a0:	e3500000 	cmp	r0, #0
   210a4:	0a000003 	beq	210b8 <ExceptionHandler+0x3c>
   210a8:	e1a02006 	mov	r2, r6
   210ac:	e1a01005 	mov	r1, r5
   210b0:	e8bd4070 	pop	{r4, r5, r6, lr}
   210b4:	eaffffa6 	b	20f54 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>
   210b8:	e3a02087 	mov	r2, #135	; 0x87
   210bc:	e59f101c 	ldr	r1, [pc, #28]	; 210e0 <ExceptionHandler+0x64>
   210c0:	e59f001c 	ldr	r0, [pc, #28]	; 210e4 <ExceptionHandler+0x68>
   210c4:	ebffe422 	bl	1a154 <assertion_failed>
   210c8:	e5940000 	ldr	r0, [r4]
   210cc:	e1a02006 	mov	r2, r6
   210d0:	e1a01005 	mov	r1, r5
   210d4:	e8bd4070 	pop	{r4, r5, r6, lr}
   210d8:	eaffff9d 	b	20f54 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>
   210dc:	000299e0 	.word	0x000299e0
   210e0:	00028440 	.word	0x00028440
   210e4:	00022d0c 	.word	0x00022d0c

000210e8 <raise>:
   210e8:	e92d4010 	push	{r4, lr}
   210ec:	e59f4030 	ldr	r4, [pc, #48]	; 21124 <raise+0x3c>
   210f0:	e5940000 	ldr	r0, [r4]
   210f4:	e3500000 	cmp	r0, #0
   210f8:	0a000003 	beq	2110c <raise+0x24>
   210fc:	e3a01004 	mov	r1, #4
   21100:	ebffff83 	bl	20f14 <CExceptionHandler::Throw(unsigned int)>
   21104:	e3a00000 	mov	r0, #0
   21108:	e8bd8010 	pop	{r4, pc}
   2110c:	e59f0014 	ldr	r0, [pc, #20]	; 21128 <raise+0x40>
   21110:	e3a02087 	mov	r2, #135	; 0x87
   21114:	e59f1010 	ldr	r1, [pc, #16]	; 2112c <raise+0x44>
   21118:	ebffe40d 	bl	1a154 <assertion_failed>
   2111c:	e5940000 	ldr	r0, [r4]
   21120:	eafffff5 	b	210fc <raise+0x14>
   21124:	000299e0 	.word	0x000299e0
   21128:	00022d0c 	.word	0x00022d0c
   2112c:	00028440 	.word	0x00028440

00021130 <UndefinedInstructionInternal>:
   21130:	e24ee004 	sub	lr, lr, #4
   21134:	e92d4000 	stmfd	sp!, {lr}
   21138:	e14fe000 	mrs	lr, SPSR
   2113c:	e92d4000 	stmfd	sp!, {lr}
   21140:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   21144:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   21148:	e1a0100d 	mov	r1, sp
   2114c:	f1020012 	cps	#18
   21150:	e1a0200d 	mov	r2, sp
   21154:	e1a0300e 	mov	r3, lr
   21158:	f1020011 	cps	#17
   2115c:	e1a0400d 	mov	r4, sp
   21160:	e1a0500e 	mov	r5, lr
   21164:	f102001f 	cps	#31
   21168:	e1a0d001 	mov	sp, r1
   2116c:	e92d003c 	push	{r2, r3, r4, r5}
   21170:	e1a0100d 	mov	r1, sp
   21174:	e3a00001 	mov	r0, #1
   21178:	eaffffbf 	b	2107c <ExceptionHandler>

0002117c <PrefetchAbortStub>:
   2117c:	e24ee004 	sub	lr, lr, #4
   21180:	e92d4000 	stmfd	sp!, {lr}
   21184:	e14fe000 	mrs	lr, SPSR
   21188:	e92d4000 	stmfd	sp!, {lr}
   2118c:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   21190:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   21194:	e1a0100d 	mov	r1, sp
   21198:	f1020012 	cps	#18
   2119c:	e1a0200d 	mov	r2, sp
   211a0:	e1a0300e 	mov	r3, lr
   211a4:	f1020011 	cps	#17
   211a8:	e1a0400d 	mov	r4, sp
   211ac:	e1a0500e 	mov	r5, lr
   211b0:	f102001f 	cps	#31
   211b4:	e1a0d001 	mov	sp, r1
   211b8:	e92d003c 	push	{r2, r3, r4, r5}
   211bc:	e1a0100d 	mov	r1, sp
   211c0:	e3a00002 	mov	r0, #2
   211c4:	eaffffac 	b	2107c <ExceptionHandler>

000211c8 <DataAbortStub>:
   211c8:	e24ee008 	sub	lr, lr, #8
   211cc:	e92d4000 	stmfd	sp!, {lr}
   211d0:	e14fe000 	mrs	lr, SPSR
   211d4:	e92d4000 	stmfd	sp!, {lr}
   211d8:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   211dc:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   211e0:	e1a0100d 	mov	r1, sp
   211e4:	f1020012 	cps	#18
   211e8:	e1a0200d 	mov	r2, sp
   211ec:	e1a0300e 	mov	r3, lr
   211f0:	f1020011 	cps	#17
   211f4:	e1a0400d 	mov	r4, sp
   211f8:	e1a0500e 	mov	r5, lr
   211fc:	f102001f 	cps	#31
   21200:	e1a0d001 	mov	sp, r1
   21204:	e92d003c 	push	{r2, r3, r4, r5}
   21208:	e1a0100d 	mov	r1, sp
   2120c:	e3a00003 	mov	r0, #3
   21210:	eaffff99 	b	2107c <ExceptionHandler>

00021214 <UndefinedInstructionStub>:
   21214:	e92d4001 	push	{r0, lr}
   21218:	eef80a10 	vmrs	r0, fpexc
   2121c:	e3100102 	tst	r0, #-2147483648	; 0x80000000
   21220:	0affffc2 	beq	21130 <UndefinedInstructionInternal>
   21224:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
   21228:	eee80a10 	vmsr	fpexc, r0
   2122c:	e8fd8001 	ldm	sp!, {r0, pc}^

00021230 <IRQStub>:
   21230:	e24ee004 	sub	lr, lr, #4
   21234:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
   21238:	ebffec22 	bl	1c2c8 <InterruptHandler>
   2123c:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^

00021240 <FIQStub>:
   21240:	e24ee004 	sub	lr, lr, #4
   21244:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
   21248:	e3a03000 	mov	r3, #0
   2124c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   21250:	e59f2040 	ldr	r2, [pc, #64]	; 21298 <FIQStub+0x58>
   21254:	e5921000 	ldr	r1, [r2]
   21258:	e3510000 	cmp	r1, #0
   2125c:	0a000004 	beq	21274 <FIQStub+0x34>
   21260:	e5920004 	ldr	r0, [r2, #4]
   21264:	e12fff31 	blx	r1
   21268:	e3a03000 	mov	r3, #0
   2126c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   21270:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^
   21274:	e3a03000 	mov	r3, #0
   21278:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2127c:	e59f1018 	ldr	r1, [pc, #24]	; 2129c <FIQStub+0x5c>
   21280:	e3a00000 	mov	r0, #0
   21284:	e5810000 	str	r0, [r1]
   21288:	e3a03000 	mov	r3, #0
   2128c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   21290:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   21294:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^
   21298:	000298d0 	.word	0x000298d0
   2129c:	2000b20c 	.word	0x2000b20c

000212a0 <CMemorySystem::~CMemorySystem()>:
   212a0:	e59f3068 	ldr	r3, [pc, #104]	; 21310 <CMemorySystem::~CMemorySystem()+0x70>
   212a4:	e92d4070 	push	{r4, r5, r6, lr}
   212a8:	e5932000 	ldr	r2, [r3]
   212ac:	e1a04000 	mov	r4, r0
   212b0:	e1520000 	cmp	r2, r0
   212b4:	0a000001 	beq	212c0 <CMemorySystem::~CMemorySystem()+0x20>
   212b8:	e1a00004 	mov	r0, r4
   212bc:	e8bd8070 	pop	{r4, r5, r6, pc}
   212c0:	e3a02000 	mov	r2, #0
   212c4:	e5d01000 	ldrb	r1, [r0]
   212c8:	e5832000 	str	r2, [r3]
   212cc:	e1510002 	cmp	r1, r2
   212d0:	0a000004 	beq	212e8 <CMemorySystem::~CMemorySystem()+0x48>
   212d4:	ee111f10 	mrc	15, 0, r1, cr1, cr0, {0}
   212d8:	e59f3034 	ldr	r3, [pc, #52]	; 21314 <CMemorySystem::~CMemorySystem()+0x74>
   212dc:	e0033001 	and	r3, r3, r1
   212e0:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
   212e4:	ee082f17 	mcr	15, 0, r2, cr8, cr7, {0}
   212e8:	e5945008 	ldr	r5, [r4, #8]
   212ec:	e3550000 	cmp	r5, #0
   212f0:	0afffff0 	beq	212b8 <CMemorySystem::~CMemorySystem()+0x18>
   212f4:	e1a00005 	mov	r0, r5
   212f8:	eb0000c5 	bl	21614 <CPageTable::~CPageTable()>
   212fc:	e1a00005 	mov	r0, r5
   21300:	e3a01004 	mov	r1, #4
   21304:	eb00012a 	bl	217b4 <operator delete(void*, unsigned int)>
   21308:	e1a00004 	mov	r0, r4
   2130c:	e8bd8070 	pop	{r4, r5, r6, pc}
   21310:	000299e4 	.word	0x000299e4
   21314:	ff7fe7fa 	.word	0xff7fe7fa

00021318 <CMemorySystem::GetMemSize() const>:
   21318:	e92d4010 	push	{r4, lr}
   2131c:	e59f402c 	ldr	r4, [pc, #44]	; 21350 <CMemorySystem::GetMemSize() const+0x38>
   21320:	e5943000 	ldr	r3, [r4]
   21324:	e3530000 	cmp	r3, #0
   21328:	0a000001 	beq	21334 <CMemorySystem::GetMemSize() const+0x1c>
   2132c:	e5930004 	ldr	r0, [r3, #4]
   21330:	e8bd8010 	pop	{r4, pc}
   21334:	e3a02082 	mov	r2, #130	; 0x82
   21338:	e59f1014 	ldr	r1, [pc, #20]	; 21354 <CMemorySystem::GetMemSize() const+0x3c>
   2133c:	e59f0014 	ldr	r0, [pc, #20]	; 21358 <CMemorySystem::GetMemSize() const+0x40>
   21340:	ebffe383 	bl	1a154 <assertion_failed>
   21344:	e5943000 	ldr	r3, [r4]
   21348:	e5930004 	ldr	r0, [r3, #4]
   2134c:	e8bd8010 	pop	{r4, pc}
   21350:	000299e4 	.word	0x000299e4
   21354:	000284fc 	.word	0x000284fc
   21358:	00022d0c 	.word	0x00022d0c

0002135c <CMemorySystem::Get()>:
   2135c:	e92d4010 	push	{r4, lr}
   21360:	e59f4020 	ldr	r4, [pc, #32]	; 21388 <CMemorySystem::Get()+0x2c>
   21364:	e5940000 	ldr	r0, [r4]
   21368:	e3500000 	cmp	r0, #0
   2136c:	18bd8010 	popne	{r4, pc}
   21370:	e3a02088 	mov	r2, #136	; 0x88
   21374:	e59f1010 	ldr	r1, [pc, #16]	; 2138c <CMemorySystem::Get()+0x30>
   21378:	e59f0010 	ldr	r0, [pc, #16]	; 21390 <CMemorySystem::Get()+0x34>
   2137c:	ebffe374 	bl	1a154 <assertion_failed>
   21380:	e5940000 	ldr	r0, [r4]
   21384:	e8bd8010 	pop	{r4, pc}
   21388:	000299e4 	.word	0x000299e4
   2138c:	000284fc 	.word	0x000284fc
   21390:	00022d0c 	.word	0x00022d0c

00021394 <CMemorySystem::EnableMMU()>:
   21394:	e5d03000 	ldrb	r3, [r0]
   21398:	e92d4010 	push	{r4, lr}
   2139c:	e3530000 	cmp	r3, #0
   213a0:	e1a04000 	mov	r4, r0
   213a4:	0a00001c 	beq	2141c <CMemorySystem::EnableMMU()+0x88>
   213a8:	ee113f30 	mrc	15, 0, r3, cr1, cr0, {1}
   213ac:	e3833040 	orr	r3, r3, #64	; 0x40
   213b0:	ee013f30 	mcr	15, 0, r3, cr1, cr0, {1}
   213b4:	ee103f70 	mrc	15, 0, r3, cr0, cr0, {3}
   213b8:	e3130001 	tst	r3, #1
   213bc:	1a00001b 	bne	21430 <CMemorySystem::EnableMMU()+0x9c>
   213c0:	e3a03000 	mov	r3, #0
   213c4:	ee023f50 	mcr	15, 0, r3, cr2, cr0, {2}
   213c8:	e5940008 	ldr	r0, [r4, #8]
   213cc:	e1500003 	cmp	r0, r3
   213d0:	0a00001b 	beq	21444 <CMemorySystem::EnableMMU()+0xb0>
   213d4:	eb00008f 	bl	21618 <CPageTable::GetBaseAddress() const>
   213d8:	ee020f10 	mcr	15, 0, r0, cr2, cr0, {0}
   213dc:	e3a03001 	mov	r3, #1
   213e0:	ee033f10 	mcr	15, 0, r3, cr3, cr0, {0}
   213e4:	e3a03000 	mov	r3, #0
   213e8:	ee073f16 	mcr	15, 0, r3, cr7, cr6, {0}
   213ec:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   213f0:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   213f4:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   213f8:	ee083f17 	mcr	15, 0, r3, cr8, cr7, {0}
   213fc:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   21400:	ee073f95 	mcr	15, 0, r3, cr7, cr5, {4}
   21404:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
   21408:	e59f204c 	ldr	r2, [pc, #76]	; 2145c <CMemorySystem::EnableMMU()+0xc8>
   2140c:	e3c33002 	bic	r3, r3, #2
   21410:	e1832002 	orr	r2, r3, r2
   21414:	ee012f10 	mcr	15, 0, r2, cr1, cr0, {0}
   21418:	e8bd8010 	pop	{r4, pc}
   2141c:	e3a0208e 	mov	r2, #142	; 0x8e
   21420:	e59f1038 	ldr	r1, [pc, #56]	; 21460 <CMemorySystem::EnableMMU()+0xcc>
   21424:	e59f0038 	ldr	r0, [pc, #56]	; 21464 <CMemorySystem::EnableMMU()+0xd0>
   21428:	ebffe349 	bl	1a154 <assertion_failed>
   2142c:	eaffffdd 	b	213a8 <CMemorySystem::EnableMMU()+0x14>
   21430:	e3a0209b 	mov	r2, #155	; 0x9b
   21434:	e59f1024 	ldr	r1, [pc, #36]	; 21460 <CMemorySystem::EnableMMU()+0xcc>
   21438:	e59f0028 	ldr	r0, [pc, #40]	; 21468 <CMemorySystem::EnableMMU()+0xd4>
   2143c:	ebffe344 	bl	1a154 <assertion_failed>
   21440:	eaffffde 	b	213c0 <CMemorySystem::EnableMMU()+0x2c>
   21444:	e59f0020 	ldr	r0, [pc, #32]	; 2146c <CMemorySystem::EnableMMU()+0xd8>
   21448:	e3a020a1 	mov	r2, #161	; 0xa1
   2144c:	e59f100c 	ldr	r1, [pc, #12]	; 21460 <CMemorySystem::EnableMMU()+0xcc>
   21450:	ebffe33f 	bl	1a154 <assertion_failed>
   21454:	e5940008 	ldr	r0, [r4, #8]
   21458:	eaffffdd 	b	213d4 <CMemorySystem::EnableMMU()+0x40>
   2145c:	00c01805 	.word	0x00c01805
   21460:	000284fc 	.word	0x000284fc
   21464:	00028508 	.word	0x00028508
   21468:	00028518 	.word	0x00028518
   2146c:	00028544 	.word	0x00028544

00021470 <CMemorySystem::CMemorySystem(bool)>:
   21470:	e3a03000 	mov	r3, #0
   21474:	e92d4030 	push	{r4, r5, lr}
   21478:	e59f20d0 	ldr	r2, [pc, #208]	; 21550 <CMemorySystem::CMemorySystem(bool)+0xe0>
   2147c:	e24dd024 	sub	sp, sp, #36	; 0x24
   21480:	e5925000 	ldr	r5, [r2]
   21484:	e1a04000 	mov	r4, r0
   21488:	e1550003 	cmp	r5, r3
   2148c:	e5c01000 	strb	r1, [r0]
   21490:	e5803004 	str	r3, [r0, #4]
   21494:	e5803008 	str	r3, [r0, #8]
   21498:	0a000002 	beq	214a8 <CMemorySystem::CMemorySystem(bool)+0x38>
   2149c:	e1a00004 	mov	r0, r4
   214a0:	e28dd024 	add	sp, sp, #36	; 0x24
   214a4:	e8bd8030 	pop	{r4, r5, pc}
   214a8:	e28d0008 	add	r0, sp, #8
   214ac:	e5824000 	str	r4, [r2]
   214b0:	ebffe34b 	bl	1a1e4 <CBcmPropertyTags::CBcmPropertyTags()>
   214b4:	e58d5000 	str	r5, [sp]
   214b8:	e28d0008 	add	r0, sp, #8
   214bc:	e3a03014 	mov	r3, #20
   214c0:	e28d200c 	add	r2, sp, #12
   214c4:	e59f1088 	ldr	r1, [pc, #136]	; 21554 <CMemorySystem::CMemorySystem(bool)+0xe4>
   214c8:	ebffe39c 	bl	1a340 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   214cc:	e3500000 	cmp	r0, #0
   214d0:	0a000018 	beq	21538 <CMemorySystem::CMemorySystem(bool)+0xc8>
   214d4:	e59d0018 	ldr	r0, [sp, #24]
   214d8:	e3500000 	cmp	r0, #0
   214dc:	0a000019 	beq	21548 <CMemorySystem::CMemorySystem(bool)+0xd8>
   214e0:	e59f1070 	ldr	r1, [pc, #112]	; 21558 <CMemorySystem::CMemorySystem(bool)+0xe8>
   214e4:	e59f0070 	ldr	r0, [pc, #112]	; 2155c <CMemorySystem::CMemorySystem(bool)+0xec>
   214e8:	e3a02047 	mov	r2, #71	; 0x47
   214ec:	ebffe318 	bl	1a154 <assertion_failed>
   214f0:	e59d101c 	ldr	r1, [sp, #28]
   214f4:	e59d0018 	ldr	r0, [sp, #24]
   214f8:	e5841004 	str	r1, [r4, #4]
   214fc:	eb0000b4 	bl	217d4 <mem_init>
   21500:	e5d43000 	ldrb	r3, [r4]
   21504:	e3530000 	cmp	r3, #0
   21508:	0a000007 	beq	2152c <CMemorySystem::CMemorySystem(bool)+0xbc>
   2150c:	e3a00004 	mov	r0, #4
   21510:	eb0000a3 	bl	217a4 <operator new(unsigned int)>
   21514:	e1a05000 	mov	r5, r0
   21518:	e5941004 	ldr	r1, [r4, #4]
   2151c:	eb000012 	bl	2156c <CPageTable::CPageTable(unsigned int)>
   21520:	e5845008 	str	r5, [r4, #8]
   21524:	e1a00004 	mov	r0, r4
   21528:	ebffff99 	bl	21394 <CMemorySystem::EnableMMU()>
   2152c:	e28d0008 	add	r0, sp, #8
   21530:	ebffe331 	bl	1a1fc <CBcmPropertyTags::~CBcmPropertyTags()>
   21534:	eaffffd8 	b	2149c <CMemorySystem::CMemorySystem(bool)+0x2c>
   21538:	e3a01303 	mov	r1, #201326592	; 0xc000000
   2153c:	e58d0018 	str	r0, [sp, #24]
   21540:	e58d101c 	str	r1, [sp, #28]
   21544:	eaffffeb 	b	214f8 <CMemorySystem::CMemorySystem(bool)+0x88>
   21548:	e59d101c 	ldr	r1, [sp, #28]
   2154c:	eaffffe9 	b	214f8 <CMemorySystem::CMemorySystem(bool)+0x88>
   21550:	000299e4 	.word	0x000299e4
   21554:	00010005 	.word	0x00010005
   21558:	000284fc 	.word	0x000284fc
   2155c:	00028558 	.word	0x00028558

00021560 <CMemorySystem::GetCoherentPage(unsigned int)>:
   21560:	e1a00600 	lsl	r0, r0, #12
   21564:	e2800501 	add	r0, r0, #4194304	; 0x400000
   21568:	e12fff1e 	bx	lr

0002156c <CPageTable::CPageTable(unsigned int)>:
   2156c:	e3a02709 	mov	r2, #2359296	; 0x240000
   21570:	e3a03000 	mov	r3, #0
   21574:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   21578:	e59fc074 	ldr	ip, [pc, #116]	; 215f4 <CPageTable::CPageTable(unsigned int)+0x88>
   2157c:	e59f4074 	ldr	r4, [pc, #116]	; 215f8 <CPageTable::CPageTable(unsigned int)+0x8c>
   21580:	e59f5074 	ldr	r5, [pc, #116]	; 215fc <CPageTable::CPageTable(unsigned int)+0x90>
   21584:	e59f9074 	ldr	r9, [pc, #116]	; 21600 <CPageTable::CPageTable(unsigned int)+0x94>
   21588:	e59f8074 	ldr	r8, [pc, #116]	; 21604 <CPageTable::CPageTable(unsigned int)+0x98>
   2158c:	e59f7074 	ldr	r7, [pc, #116]	; 21608 <CPageTable::CPageTable(unsigned int)+0x9c>
   21590:	e59f6074 	ldr	r6, [pc, #116]	; 2160c <CPageTable::CPageTable(unsigned int)+0xa0>
   21594:	e59fe074 	ldr	lr, [pc, #116]	; 21610 <CPageTable::CPageTable(unsigned int)+0xa4>
   21598:	e5802000 	str	r2, [r0]
   2159c:	e1530004 	cmp	r3, r4
   215a0:	31a02005 	movcc	r2, r5
   215a4:	3a000007 	bcc	215c8 <CPageTable::CPageTable(unsigned int)+0x5c>
   215a8:	e3530501 	cmp	r3, #4194304	; 0x400000
   215ac:	0a00000e 	beq	215ec <CPageTable::CPageTable(unsigned int)+0x80>
   215b0:	e1510003 	cmp	r1, r3
   215b4:	81a02008 	movhi	r2, r8
   215b8:	8a000002 	bhi	215c8 <CPageTable::CPageTable(unsigned int)+0x5c>
   215bc:	e1530007 	cmp	r3, r7
   215c0:	91a02006 	movls	r2, r6
   215c4:	83a02000 	movhi	r2, #0
   215c8:	e1822003 	orr	r2, r2, r3
   215cc:	e5ac2004 	str	r2, [ip, #4]!
   215d0:	e15c000e 	cmp	ip, lr
   215d4:	e2833601 	add	r3, r3, #1048576	; 0x100000
   215d8:	1affffef 	bne	2159c <CPageTable::CPageTable(unsigned int)+0x30>
   215dc:	e3a03000 	mov	r3, #0
   215e0:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
   215e4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   215e8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   215ec:	e1a02009 	mov	r2, r9
   215f0:	eafffff4 	b	215c8 <CPageTable::CPageTable(unsigned int)+0x5c>
   215f4:	0023fffc 	.word	0x0023fffc
   215f8:	00022cf4 	.word	0x00022cf4
   215fc:	0000040e 	.word	0x0000040e
   21600:	00010412 	.word	0x00010412
   21604:	0000041e 	.word	0x0000041e
   21608:	20fffffe 	.word	0x20fffffe
   2160c:	00010416 	.word	0x00010416
   21610:	00243ffc 	.word	0x00243ffc

00021614 <CPageTable::~CPageTable()>:
   21614:	e12fff1e 	bx	lr

00021618 <CPageTable::GetBaseAddress() const>:
   21618:	e5900000 	ldr	r0, [r0]
   2161c:	e3800001 	orr	r0, r0, #1
   21620:	e12fff1e 	bx	lr

00021624 <CurrentExecutionLevel>:
   21624:	e10f0000 	mrs	r0, CPSR
   21628:	e3100040 	tst	r0, #64	; 0x40
   2162c:	01a003a0 	lsreq	r0, r0, #7
   21630:	02000001 	andeq	r0, r0, #1
   21634:	13a00002 	movne	r0, #2
   21638:	e12fff1e 	bx	lr

0002163c <EnterCritical>:
   2163c:	e2403001 	sub	r3, r0, #1
   21640:	e3530001 	cmp	r3, #1
   21644:	e92d4070 	push	{r4, r5, r6, lr}
   21648:	e1a05000 	mov	r5, r0
   2164c:	9a000003 	bls	21660 <EnterCritical+0x24>
   21650:	e3a02064 	mov	r2, #100	; 0x64
   21654:	e59f1080 	ldr	r1, [pc, #128]	; 216dc <EnterCritical+0xa0>
   21658:	e59f0080 	ldr	r0, [pc, #128]	; 216e0 <EnterCritical+0xa4>
   2165c:	ebffe2bc 	bl	1a154 <assertion_failed>
   21660:	e10f6000 	mrs	r6, CPSR
   21664:	e3550002 	cmp	r5, #2
   21668:	0a000001 	beq	21674 <EnterCritical+0x38>
   2166c:	e3160040 	tst	r6, #64	; 0x40
   21670:	1a000014 	bne	216c8 <EnterCritical+0x8c>
   21674:	f10c00c0 	cpsid	if
   21678:	e59f4064 	ldr	r4, [pc, #100]	; 216e4 <EnterCritical+0xa8>
   2167c:	e5943000 	ldr	r3, [r4]
   21680:	e3530013 	cmp	r3, #19
   21684:	8a00000a 	bhi	216b4 <EnterCritical+0x78>
   21688:	e5943000 	ldr	r3, [r4]
   2168c:	e3550001 	cmp	r5, #1
   21690:	e2832001 	add	r2, r3, #1
   21694:	e0843103 	add	r3, r4, r3, lsl #2
   21698:	e5842000 	str	r2, [r4]
   2169c:	e5836004 	str	r6, [r3, #4]
   216a0:	1a000000 	bne	216a8 <EnterCritical+0x6c>
   216a4:	f1080040 	cpsie	f
   216a8:	e3a03000 	mov	r3, #0
   216ac:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   216b0:	e8bd8070 	pop	{r4, r5, r6, pc}
   216b4:	e3a0206e 	mov	r2, #110	; 0x6e
   216b8:	e59f101c 	ldr	r1, [pc, #28]	; 216dc <EnterCritical+0xa0>
   216bc:	e59f0024 	ldr	r0, [pc, #36]	; 216e8 <EnterCritical+0xac>
   216c0:	ebffe2a3 	bl	1a154 <assertion_failed>
   216c4:	eaffffef 	b	21688 <EnterCritical+0x4c>
   216c8:	e3a0206a 	mov	r2, #106	; 0x6a
   216cc:	e59f1008 	ldr	r1, [pc, #8]	; 216dc <EnterCritical+0xa0>
   216d0:	e59f0014 	ldr	r0, [pc, #20]	; 216ec <EnterCritical+0xb0>
   216d4:	ebffe29e 	bl	1a154 <assertion_failed>
   216d8:	eaffffe5 	b	21674 <EnterCritical+0x38>
   216dc:	00028574 	.word	0x00028574
   216e0:	00028584 	.word	0x00028584
   216e4:	000299e8 	.word	0x000299e8
   216e8:	000285ec 	.word	0x000285ec
   216ec:	000285bc 	.word	0x000285bc

000216f0 <LeaveCritical>:
   216f0:	e92d4010 	push	{r4, lr}
   216f4:	e3a03000 	mov	r3, #0
   216f8:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   216fc:	f10c0040 	cpsid	f
   21700:	e59f4034 	ldr	r4, [pc, #52]	; 2173c <LeaveCritical+0x4c>
   21704:	e5943000 	ldr	r3, [r4]
   21708:	e3530000 	cmp	r3, #0
   2170c:	1a000003 	bne	21720 <LeaveCritical+0x30>
   21710:	e3a0207f 	mov	r2, #127	; 0x7f
   21714:	e59f1024 	ldr	r1, [pc, #36]	; 21740 <LeaveCritical+0x50>
   21718:	e59f0024 	ldr	r0, [pc, #36]	; 21744 <LeaveCritical+0x54>
   2171c:	ebffe28c 	bl	1a154 <assertion_failed>
   21720:	e5943000 	ldr	r3, [r4]
   21724:	e2433001 	sub	r3, r3, #1
   21728:	e5843000 	str	r3, [r4]
   2172c:	e0844103 	add	r4, r4, r3, lsl #2
   21730:	e5943004 	ldr	r3, [r4, #4]
   21734:	e121f003 	msr	CPSR_c, r3
   21738:	e8bd8010 	pop	{r4, pc}
   2173c:	000299e8 	.word	0x000299e8
   21740:	00028574 	.word	0x00028574
   21744:	00028614 	.word	0x00028614

00021748 <CleanAndInvalidateDataCacheRange>:
   21748:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
   2174c:	e2813020 	add	r3, r1, #32
   21750:	e353001f 	cmp	r3, #31
   21754:	82800020 	addhi	r0, r0, #32
   21758:	83c1101f 	bichi	r1, r1, #31
   2175c:	80801001 	addhi	r1, r0, r1
   21760:	8a000001 	bhi	2176c <CleanAndInvalidateDataCacheRange+0x24>
   21764:	ea000003 	b	21778 <CleanAndInvalidateDataCacheRange+0x30>
   21768:	e2800020 	add	r0, r0, #32
   2176c:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
   21770:	e1510000 	cmp	r1, r0
   21774:	1afffffb 	bne	21768 <CleanAndInvalidateDataCacheRange+0x20>
   21778:	e3a03000 	mov	r3, #0
   2177c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   21780:	e12fff1e 	bx	lr

00021784 <SyncDataAndInstructionCache>:
   21784:	e3a03000 	mov	r3, #0
   21788:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
   2178c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   21790:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   21794:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   21798:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2179c:	ee073f95 	mcr	15, 0, r3, cr7, cr5, {4}
   217a0:	e12fff1e 	bx	lr

000217a4 <operator new(unsigned int)>:
   217a4:	ea000023 	b	21838 <malloc>

000217a8 <operator new[](unsigned int)>:
   217a8:	ea000022 	b	21838 <malloc>

000217ac <operator delete(void*)>:
   217ac:	ea00009f 	b	21a30 <free>

000217b0 <operator delete[](void*)>:
   217b0:	ea00009e 	b	21a30 <free>

000217b4 <operator delete(void*, unsigned int)>:
   217b4:	ea00009d 	b	21a30 <free>

000217b8 <operator delete[](void*, unsigned int)>:
   217b8:	ea00009c 	b	21a30 <free>

000217bc <__cxa_pure_virtual>:
   217bc:	e3a02018 	mov	r2, #24
   217c0:	e59f1004 	ldr	r1, [pc, #4]	; 217cc <__cxa_pure_virtual+0x10>
   217c4:	e59f0004 	ldr	r0, [pc, #4]	; 217d0 <__cxa_pure_virtual+0x14>
   217c8:	eaffe261 	b	1a154 <assertion_failed>
   217cc:	0002862c 	.word	0x0002862c
   217d0:	000239a8 	.word	0x000239a8

000217d4 <mem_init>:
   217d4:	e3500605 	cmp	r0, #5242880	; 0x500000
   217d8:	21a0c000 	movcs	ip, r0
   217dc:	33a0c605 	movcc	ip, #5242880	; 0x500000
   217e0:	e0801001 	add	r1, r0, r1
   217e4:	e24139ff 	sub	r3, r1, #4177920	; 0x3fc000
   217e8:	e2433a03 	sub	r3, r3, #12288	; 0x3000
   217ec:	e59f2018 	ldr	r2, [pc, #24]	; 2180c <mem_init+0x38>
   217f0:	e3c33eff 	bic	r3, r3, #4080	; 0xff0
   217f4:	e2410501 	sub	r0, r1, #4194304	; 0x400000
   217f8:	e3c3300f 	bic	r3, r3, #15
   217fc:	e582c000 	str	ip, [r2]
   21800:	e582100c 	str	r1, [r2, #12]
   21804:	e9820009 	stmib	r2, {r0, r3}
   21808:	e12fff1e 	bx	lr
   2180c:	00029a3c 	.word	0x00029a3c

00021810 <mem_get_size>:
   21810:	e59f301c 	ldr	r3, [pc, #28]	; 21834 <mem_get_size+0x24>
   21814:	e5930004 	ldr	r0, [r3, #4]
   21818:	e5931000 	ldr	r1, [r3]
   2181c:	e593200c 	ldr	r2, [r3, #12]
   21820:	e5933008 	ldr	r3, [r3, #8]
   21824:	e0400001 	sub	r0, r0, r1
   21828:	e0423003 	sub	r3, r2, r3
   2182c:	e0800003 	add	r0, r0, r3
   21830:	e12fff1e 	bx	lr
   21834:	00029a3c 	.word	0x00029a3c

00021838 <malloc>:
   21838:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2183c:	e59f71c8 	ldr	r7, [pc, #456]	; 21a0c <malloc+0x1d4>
   21840:	e1a05000 	mov	r5, r0
   21844:	e5973000 	ldr	r3, [r7]
   21848:	e3530000 	cmp	r3, #0
   2184c:	0a000069 	beq	219f8 <malloc+0x1c0>
   21850:	e5970010 	ldr	r0, [r7, #16]
   21854:	e3500000 	cmp	r0, #0
   21858:	1a000057 	bne	219bc <malloc+0x184>
   2185c:	e59f21ac 	ldr	r2, [pc, #428]	; 21a10 <malloc+0x1d8>
   21860:	e5923000 	ldr	r3, [r2]
   21864:	e3530000 	cmp	r3, #0
   21868:	0a000008 	beq	21890 <malloc+0x58>
   2186c:	e1550003 	cmp	r5, r3
   21870:	e1a04002 	mov	r4, r2
   21874:	8a000002 	bhi	21884 <malloc+0x4c>
   21878:	ea000024 	b	21910 <malloc+0xd8>
   2187c:	e1530005 	cmp	r3, r5
   21880:	2a000022 	bcs	21910 <malloc+0xd8>
   21884:	e5b43008 	ldr	r3, [r4, #8]!
   21888:	e3530000 	cmp	r3, #0
   2188c:	1afffffa 	bne	2187c <malloc+0x44>
   21890:	e5976000 	ldr	r6, [r7]
   21894:	e285301f 	add	r3, r5, #31
   21898:	e3c3300f 	bic	r3, r3, #15
   2189c:	e0863003 	add	r3, r6, r3
   218a0:	e1560003 	cmp	r6, r3
   218a4:	2a000046 	bcs	219c4 <malloc+0x18c>
   218a8:	e5971004 	ldr	r1, [r7, #4]
   218ac:	e5920040 	ldr	r0, [r2, #64]	; 0x40
   218b0:	e0411000 	sub	r1, r1, r0
   218b4:	e1530001 	cmp	r3, r1
   218b8:	8a000041 	bhi	219c4 <malloc+0x18c>
   218bc:	e3a0e043 	mov	lr, #67	; 0x43
   218c0:	e3a0c04d 	mov	ip, #77	; 0x4d
   218c4:	e3a0004c 	mov	r0, #76	; 0x4c
   218c8:	e3a01042 	mov	r1, #66	; 0x42
   218cc:	e5873000 	str	r3, [r7]
   218d0:	e1a03825 	lsr	r3, r5, #16
   218d4:	e5c63006 	strb	r3, [r6, #6]
   218d8:	e5973010 	ldr	r3, [r7, #16]
   218dc:	e1a02425 	lsr	r2, r5, #8
   218e0:	e5c65004 	strb	r5, [r6, #4]
   218e4:	e3530000 	cmp	r3, #0
   218e8:	e1a05c25 	lsr	r5, r5, #24
   218ec:	e5c6e000 	strb	lr, [r6]
   218f0:	e5c6c001 	strb	ip, [r6, #1]
   218f4:	e5c60002 	strb	r0, [r6, #2]
   218f8:	e5c61003 	strb	r1, [r6, #3]
   218fc:	e5c62005 	strb	r2, [r6, #5]
   21900:	e5c65007 	strb	r5, [r6, #7]
   21904:	0a00001e 	beq	21984 <malloc+0x14c>
   21908:	ebffff78 	bl	216f0 <LeaveCritical>
   2190c:	ea00001c 	b	21984 <malloc+0x14c>
   21910:	e5946004 	ldr	r6, [r4, #4]
   21914:	e3560000 	cmp	r6, #0
   21918:	01a05003 	moveq	r5, r3
   2191c:	0affffdb 	beq	21890 <malloc+0x58>
   21920:	e5d61001 	ldrb	r1, [r6, #1]
   21924:	e5d63000 	ldrb	r3, [r6]
   21928:	e5d62002 	ldrb	r2, [r6, #2]
   2192c:	e1833401 	orr	r3, r3, r1, lsl #8
   21930:	e5d61003 	ldrb	r1, [r6, #3]
   21934:	e1833802 	orr	r3, r3, r2, lsl #16
   21938:	e59f20d4 	ldr	r2, [pc, #212]	; 21a14 <malloc+0x1dc>
   2193c:	e1833c01 	orr	r3, r3, r1, lsl #24
   21940:	e1530002 	cmp	r3, r2
   21944:	0a000003 	beq	21958 <malloc+0x120>
   21948:	e3a0208a 	mov	r2, #138	; 0x8a
   2194c:	e59f10c4 	ldr	r1, [pc, #196]	; 21a18 <malloc+0x1e0>
   21950:	e59f00c4 	ldr	r0, [pc, #196]	; 21a1c <malloc+0x1e4>
   21954:	ebffe1fe 	bl	1a154 <assertion_failed>
   21958:	e5d62009 	ldrb	r2, [r6, #9]
   2195c:	e5d63008 	ldrb	r3, [r6, #8]
   21960:	e5d6100a 	ldrb	r1, [r6, #10]
   21964:	e1833402 	orr	r3, r3, r2, lsl #8
   21968:	e5d6200b 	ldrb	r2, [r6, #11]
   2196c:	e1833801 	orr	r3, r3, r1, lsl #16
   21970:	e1833c02 	orr	r3, r3, r2, lsl #24
   21974:	e5843004 	str	r3, [r4, #4]
   21978:	e5973010 	ldr	r3, [r7, #16]
   2197c:	e3530000 	cmp	r3, #0
   21980:	1affffe0 	bne	21908 <malloc+0xd0>
   21984:	e3a03000 	mov	r3, #0
   21988:	e2864010 	add	r4, r6, #16
   2198c:	e314000f 	tst	r4, #15
   21990:	e5c63008 	strb	r3, [r6, #8]
   21994:	e5c63009 	strb	r3, [r6, #9]
   21998:	e5c6300a 	strb	r3, [r6, #10]
   2199c:	e5c6300b 	strb	r3, [r6, #11]
   219a0:	0a000003 	beq	219b4 <malloc+0x17c>
   219a4:	e3a020b3 	mov	r2, #179	; 0xb3
   219a8:	e59f1068 	ldr	r1, [pc, #104]	; 21a18 <malloc+0x1e0>
   219ac:	e59f006c 	ldr	r0, [pc, #108]	; 21a20 <malloc+0x1e8>
   219b0:	ebffe1e7 	bl	1a154 <assertion_failed>
   219b4:	e1a00004 	mov	r0, r4
   219b8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   219bc:	ebffff1e 	bl	2163c <EnterCritical>
   219c0:	eaffffa5 	b	2185c <malloc+0x24>
   219c4:	e3a01000 	mov	r1, #0
   219c8:	e5973010 	ldr	r3, [r7, #16]
   219cc:	e5821040 	str	r1, [r2, #64]	; 0x40
   219d0:	e1530001 	cmp	r3, r1
   219d4:	0a000000 	beq	219dc <malloc+0x1a4>
   219d8:	ebffff44 	bl	216f0 <LeaveCritical>
   219dc:	ebffebcf 	bl	1c920 <CLogger::Get()>
   219e0:	e59f303c 	ldr	r3, [pc, #60]	; 21a24 <malloc+0x1ec>
   219e4:	e3a02000 	mov	r2, #0
   219e8:	e59f1038 	ldr	r1, [pc, #56]	; 21a28 <malloc+0x1f0>
   219ec:	ebffed74 	bl	1cfc4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   219f0:	e3a04000 	mov	r4, #0
   219f4:	eaffffee 	b	219b4 <malloc+0x17c>
   219f8:	e3a02070 	mov	r2, #112	; 0x70
   219fc:	e59f1014 	ldr	r1, [pc, #20]	; 21a18 <malloc+0x1e0>
   21a00:	e59f0024 	ldr	r0, [pc, #36]	; 21a2c <malloc+0x1f4>
   21a04:	ebffe1d2 	bl	1a154 <assertion_failed>
   21a08:	eaffff90 	b	21850 <malloc+0x18>
   21a0c:	00029a3c 	.word	0x00029a3c
   21a10:	000298d8 	.word	0x000298d8
   21a14:	424c4d43 	.word	0x424c4d43
   21a18:	0002863c 	.word	0x0002863c
   21a1c:	0002865c 	.word	0x0002865c
   21a20:	00028698 	.word	0x00028698
   21a24:	00028680 	.word	0x00028680
   21a28:	00028690 	.word	0x00028690
   21a2c:	00028648 	.word	0x00028648

00021a30 <free>:
   21a30:	e3500000 	cmp	r0, #0
   21a34:	012fff1e 	bxeq	lr
   21a38:	e92d4070 	push	{r4, r5, r6, lr}
   21a3c:	e2405010 	sub	r5, r0, #16
   21a40:	e5d51001 	ldrb	r1, [r5, #1]
   21a44:	e5503010 	ldrb	r3, [r0, #-16]
   21a48:	e5d52002 	ldrb	r2, [r5, #2]
   21a4c:	e1833401 	orr	r3, r3, r1, lsl #8
   21a50:	e5d51003 	ldrb	r1, [r5, #3]
   21a54:	e1833802 	orr	r3, r3, r2, lsl #16
   21a58:	e59f20dc 	ldr	r2, [pc, #220]	; 21b3c <free+0x10c>
   21a5c:	e1833c01 	orr	r3, r3, r1, lsl #24
   21a60:	e1530002 	cmp	r3, r2
   21a64:	0a000003 	beq	21a78 <free+0x48>
   21a68:	e3a020c0 	mov	r2, #192	; 0xc0
   21a6c:	e59f10cc 	ldr	r1, [pc, #204]	; 21b40 <free+0x110>
   21a70:	e59f00cc 	ldr	r0, [pc, #204]	; 21b44 <free+0x114>
   21a74:	ebffe1b6 	bl	1a154 <assertion_failed>
   21a78:	e59f40c8 	ldr	r4, [pc, #200]	; 21b48 <free+0x118>
   21a7c:	e5943000 	ldr	r3, [r4]
   21a80:	e3530000 	cmp	r3, #0
   21a84:	08bd8070 	popeq	{r4, r5, r6, pc}
   21a88:	e5d51005 	ldrb	r1, [r5, #5]
   21a8c:	e5d52004 	ldrb	r2, [r5, #4]
   21a90:	e5d50006 	ldrb	r0, [r5, #6]
   21a94:	e1822401 	orr	r2, r2, r1, lsl #8
   21a98:	e5d51007 	ldrb	r1, [r5, #7]
   21a9c:	e1822800 	orr	r2, r2, r0, lsl #16
   21aa0:	e1822c01 	orr	r2, r2, r1, lsl #24
   21aa4:	e1520003 	cmp	r2, r3
   21aa8:	1a000002 	bne	21ab8 <free+0x88>
   21aac:	ea000005 	b	21ac8 <free+0x98>
   21ab0:	e1530002 	cmp	r3, r2
   21ab4:	0a000003 	beq	21ac8 <free+0x98>
   21ab8:	e5b43008 	ldr	r3, [r4, #8]!
   21abc:	e3530000 	cmp	r3, #0
   21ac0:	1afffffa 	bne	21ab0 <free+0x80>
   21ac4:	e8bd8070 	pop	{r4, r5, r6, pc}
   21ac8:	e59f607c 	ldr	r6, [pc, #124]	; 21b4c <free+0x11c>
   21acc:	e5960010 	ldr	r0, [r6, #16]
   21ad0:	e3500000 	cmp	r0, #0
   21ad4:	1a000009 	bne	21b00 <free+0xd0>
   21ad8:	e5d40004 	ldrb	r0, [r4, #4]
   21adc:	e5d41005 	ldrb	r1, [r4, #5]
   21ae0:	e5d42006 	ldrb	r2, [r4, #6]
   21ae4:	e5d43007 	ldrb	r3, [r4, #7]
   21ae8:	e5c50008 	strb	r0, [r5, #8]
   21aec:	e5c51009 	strb	r1, [r5, #9]
   21af0:	e5c5200a 	strb	r2, [r5, #10]
   21af4:	e5c5300b 	strb	r3, [r5, #11]
   21af8:	e5845004 	str	r5, [r4, #4]
   21afc:	e8bd8070 	pop	{r4, r5, r6, pc}
   21b00:	ebfffecd 	bl	2163c <EnterCritical>
   21b04:	e596c010 	ldr	ip, [r6, #16]
   21b08:	e5d40004 	ldrb	r0, [r4, #4]
   21b0c:	e5d41005 	ldrb	r1, [r4, #5]
   21b10:	e5d42006 	ldrb	r2, [r4, #6]
   21b14:	e5d43007 	ldrb	r3, [r4, #7]
   21b18:	e35c0000 	cmp	ip, #0
   21b1c:	e5c50008 	strb	r0, [r5, #8]
   21b20:	e5c51009 	strb	r1, [r5, #9]
   21b24:	e5c5200a 	strb	r2, [r5, #10]
   21b28:	e5c5300b 	strb	r3, [r5, #11]
   21b2c:	e5845004 	str	r5, [r4, #4]
   21b30:	08bd8070 	popeq	{r4, r5, r6, pc}
   21b34:	e8bd4070 	pop	{r4, r5, r6, lr}
   21b38:	eafffeec 	b	216f0 <LeaveCritical>
   21b3c:	424c4d43 	.word	0x424c4d43
   21b40:	0002863c 	.word	0x0002863c
   21b44:	0002865c 	.word	0x0002865c
   21b48:	000298d8 	.word	0x000298d8
   21b4c:	00029a3c 	.word	0x00029a3c

00021b50 <calloc>:
   21b50:	e92d4070 	push	{r4, r5, r6, lr}
   21b54:	e0040190 	mul	r4, r0, r1
   21b58:	e3540000 	cmp	r4, #0
   21b5c:	03a04001 	moveq	r4, #1
   21b60:	e1540000 	cmp	r4, r0
   21b64:	3a000008 	bcc	21b8c <calloc+0x3c>
   21b68:	e1a00004 	mov	r0, r4
   21b6c:	ebffff31 	bl	21838 <malloc>
   21b70:	e2505000 	subs	r5, r0, #0
   21b74:	0a000002 	beq	21b84 <calloc+0x34>
   21b78:	e1a02004 	mov	r2, r4
   21b7c:	e3a01000 	mov	r1, #0
   21b80:	ebfffa99 	bl	205ec <memset>
   21b84:	e1a00005 	mov	r0, r5
   21b88:	e8bd8070 	pop	{r4, r5, r6, pc}
   21b8c:	e3a020e2 	mov	r2, #226	; 0xe2
   21b90:	e59f1008 	ldr	r1, [pc, #8]	; 21ba0 <calloc+0x50>
   21b94:	e59f0008 	ldr	r0, [pc, #8]	; 21ba4 <calloc+0x54>
   21b98:	ebffe16d 	bl	1a154 <assertion_failed>
   21b9c:	eafffff1 	b	21b68 <calloc+0x18>
   21ba0:	0002863c 	.word	0x0002863c
   21ba4:	000286c4 	.word	0x000286c4

00021ba8 <realloc>:
   21ba8:	e92d4070 	push	{r4, r5, r6, lr}
   21bac:	e2505000 	subs	r5, r0, #0
   21bb0:	e1a06001 	mov	r6, r1
   21bb4:	0a00002d 	beq	21c70 <realloc+0xc8>
   21bb8:	e3510000 	cmp	r1, #0
   21bbc:	0a000027 	beq	21c60 <realloc+0xb8>
   21bc0:	e2454010 	sub	r4, r5, #16
   21bc4:	e5d41001 	ldrb	r1, [r4, #1]
   21bc8:	e5553010 	ldrb	r3, [r5, #-16]
   21bcc:	e5d42002 	ldrb	r2, [r4, #2]
   21bd0:	e1833401 	orr	r3, r3, r1, lsl #8
   21bd4:	e5d41003 	ldrb	r1, [r4, #3]
   21bd8:	e1833802 	orr	r3, r3, r2, lsl #16
   21bdc:	e59f20a0 	ldr	r2, [pc, #160]	; 21c84 <realloc+0xdc>
   21be0:	e1833c01 	orr	r3, r3, r1, lsl #24
   21be4:	e1530002 	cmp	r3, r2
   21be8:	0a000003 	beq	21bfc <realloc+0x54>
   21bec:	e3a020fc 	mov	r2, #252	; 0xfc
   21bf0:	e59f1090 	ldr	r1, [pc, #144]	; 21c88 <realloc+0xe0>
   21bf4:	e59f0090 	ldr	r0, [pc, #144]	; 21c8c <realloc+0xe4>
   21bf8:	ebffe155 	bl	1a154 <assertion_failed>
   21bfc:	e5d42005 	ldrb	r2, [r4, #5]
   21c00:	e5d43004 	ldrb	r3, [r4, #4]
   21c04:	e5d41006 	ldrb	r1, [r4, #6]
   21c08:	e1833402 	orr	r3, r3, r2, lsl #8
   21c0c:	e5d42007 	ldrb	r2, [r4, #7]
   21c10:	e1833801 	orr	r3, r3, r1, lsl #16
   21c14:	e1833c02 	orr	r3, r3, r2, lsl #24
   21c18:	e1560003 	cmp	r6, r3
   21c1c:	8a000001 	bhi	21c28 <realloc+0x80>
   21c20:	e1a00005 	mov	r0, r5
   21c24:	e8bd8070 	pop	{r4, r5, r6, pc}
   21c28:	e1a00006 	mov	r0, r6
   21c2c:	ebffff01 	bl	21838 <malloc>
   21c30:	e2506000 	subs	r6, r0, #0
   21c34:	0a000010 	beq	21c7c <realloc+0xd4>
   21c38:	e5d42005 	ldrb	r2, [r4, #5]
   21c3c:	e5d43004 	ldrb	r3, [r4, #4]
   21c40:	e5d41006 	ldrb	r1, [r4, #6]
   21c44:	e1833402 	orr	r3, r3, r2, lsl #8
   21c48:	e5d42007 	ldrb	r2, [r4, #7]
   21c4c:	e1833801 	orr	r3, r3, r1, lsl #16
   21c50:	e1832c02 	orr	r2, r3, r2, lsl #24
   21c54:	e1a01005 	mov	r1, r5
   21c58:	ebfffbd5 	bl	20bb4 <memcpy>
   21c5c:	e1a00005 	mov	r0, r5
   21c60:	e1a05006 	mov	r5, r6
   21c64:	ebffff71 	bl	21a30 <free>
   21c68:	e1a00005 	mov	r0, r5
   21c6c:	e8bd8070 	pop	{r4, r5, r6, pc}
   21c70:	e1a00001 	mov	r0, r1
   21c74:	e8bd4070 	pop	{r4, r5, r6, lr}
   21c78:	eafffeee 	b	21838 <malloc>
   21c7c:	e1a05006 	mov	r5, r6
   21c80:	eaffffe6 	b	21c20 <realloc+0x78>
   21c84:	424c4d43 	.word	0x424c4d43
   21c88:	0002863c 	.word	0x0002863c
   21c8c:	0002865c 	.word	0x0002865c

00021c90 <palloc>:
   21c90:	e92d4070 	push	{r4, r5, r6, lr}
   21c94:	e59f50c4 	ldr	r5, [pc, #196]	; 21d60 <palloc+0xd0>
   21c98:	e5953008 	ldr	r3, [r5, #8]
   21c9c:	e3530000 	cmp	r3, #0
   21ca0:	0a000029 	beq	21d4c <palloc+0xbc>
   21ca4:	e5950014 	ldr	r0, [r5, #20]
   21ca8:	e3500000 	cmp	r0, #0
   21cac:	1a000016 	bne	21d0c <palloc+0x7c>
   21cb0:	e5954018 	ldr	r4, [r5, #24]
   21cb4:	e3540000 	cmp	r4, #0
   21cb8:	0a000017 	beq	21d1c <palloc+0x8c>
   21cbc:	e59f30a0 	ldr	r3, [pc, #160]	; 21d64 <palloc+0xd4>
   21cc0:	e5942000 	ldr	r2, [r4]
   21cc4:	e1520003 	cmp	r2, r3
   21cc8:	0a000003 	beq	21cdc <palloc+0x4c>
   21ccc:	e59f2094 	ldr	r2, [pc, #148]	; 21d68 <palloc+0xd8>
   21cd0:	e59f1094 	ldr	r1, [pc, #148]	; 21d6c <palloc+0xdc>
   21cd4:	e59f0094 	ldr	r0, [pc, #148]	; 21d70 <palloc+0xe0>
   21cd8:	ebffe11d 	bl	1a154 <assertion_failed>
   21cdc:	e3a02000 	mov	r2, #0
   21ce0:	e5943004 	ldr	r3, [r4, #4]
   21ce4:	e5842000 	str	r2, [r4]
   21ce8:	e5853018 	str	r3, [r5, #24]
   21cec:	e5953014 	ldr	r3, [r5, #20]
   21cf0:	e3530000 	cmp	r3, #0
   21cf4:	1a000001 	bne	21d00 <palloc+0x70>
   21cf8:	e1a00004 	mov	r0, r4
   21cfc:	e8bd8070 	pop	{r4, r5, r6, pc}
   21d00:	ebfffe7a 	bl	216f0 <LeaveCritical>
   21d04:	e1a00004 	mov	r0, r4
   21d08:	e8bd8070 	pop	{r4, r5, r6, pc}
   21d0c:	ebfffe4a 	bl	2163c <EnterCritical>
   21d10:	e5954018 	ldr	r4, [r5, #24]
   21d14:	e3540000 	cmp	r4, #0
   21d18:	1affffe7 	bne	21cbc <palloc+0x2c>
   21d1c:	e5954008 	ldr	r4, [r5, #8]
   21d20:	e595200c 	ldr	r2, [r5, #12]
   21d24:	e2843a01 	add	r3, r4, #4096	; 0x1000
   21d28:	e1530002 	cmp	r3, r2
   21d2c:	e5853008 	str	r3, [r5, #8]
   21d30:	9affffed 	bls	21cec <palloc+0x5c>
   21d34:	e5954014 	ldr	r4, [r5, #20]
   21d38:	e3540000 	cmp	r4, #0
   21d3c:	0affffed 	beq	21cf8 <palloc+0x68>
   21d40:	ebfffe6a 	bl	216f0 <LeaveCritical>
   21d44:	e3a00000 	mov	r0, #0
   21d48:	e8bd8070 	pop	{r4, r5, r6, pc}
   21d4c:	e59f2020 	ldr	r2, [pc, #32]	; 21d74 <palloc+0xe4>
   21d50:	e59f1014 	ldr	r1, [pc, #20]	; 21d6c <palloc+0xdc>
   21d54:	e59f001c 	ldr	r0, [pc, #28]	; 21d78 <palloc+0xe8>
   21d58:	ebffe0fd 	bl	1a154 <assertion_failed>
   21d5c:	eaffffd0 	b	21ca4 <palloc+0x14>
   21d60:	00029a3c 	.word	0x00029a3c
   21d64:	50474d43 	.word	0x50474d43
   21d68:	0000011f 	.word	0x0000011f
   21d6c:	0002863c 	.word	0x0002863c
   21d70:	000286ec 	.word	0x000286ec
   21d74:	00000111 	.word	0x00000111
   21d78:	000286d8 	.word	0x000286d8

00021d7c <pfree>:
   21d7c:	e92d4070 	push	{r4, r5, r6, lr}
   21d80:	e2504000 	subs	r4, r0, #0
   21d84:	08bd8070 	popeq	{r4, r5, r6, pc}
   21d88:	e59f5044 	ldr	r5, [pc, #68]	; 21dd4 <pfree+0x58>
   21d8c:	e5950014 	ldr	r0, [r5, #20]
   21d90:	e3500000 	cmp	r0, #0
   21d94:	1a000004 	bne	21dac <pfree+0x30>
   21d98:	e5952018 	ldr	r2, [r5, #24]
   21d9c:	e59f1034 	ldr	r1, [pc, #52]	; 21dd8 <pfree+0x5c>
   21da0:	e5854018 	str	r4, [r5, #24]
   21da4:	e8840006 	stm	r4, {r1, r2}
   21da8:	e8bd8070 	pop	{r4, r5, r6, pc}
   21dac:	ebfffe22 	bl	2163c <EnterCritical>
   21db0:	e5951014 	ldr	r1, [r5, #20]
   21db4:	e5953018 	ldr	r3, [r5, #24]
   21db8:	e59f2018 	ldr	r2, [pc, #24]	; 21dd8 <pfree+0x5c>
   21dbc:	e3510000 	cmp	r1, #0
   21dc0:	e884000c 	stm	r4, {r2, r3}
   21dc4:	e5854018 	str	r4, [r5, #24]
   21dc8:	08bd8070 	popeq	{r4, r5, r6, pc}
   21dcc:	e8bd4070 	pop	{r4, r5, r6, lr}
   21dd0:	eafffe46 	b	216f0 <LeaveCritical>
   21dd4:	00029a3c 	.word	0x00029a3c
   21dd8:	50474d43 	.word	0x50474d43

00021ddc <_GLOBAL__sub_I_mem_init>:
   21ddc:	e3a02001 	mov	r2, #1
   21de0:	e59f3008 	ldr	r3, [pc, #8]	; 21df0 <_GLOBAL__sub_I_mem_init+0x14>
   21de4:	e5832010 	str	r2, [r3, #16]
   21de8:	e5832014 	str	r2, [r3, #20]
   21dec:	e12fff1e 	bx	lr
   21df0:	00029a3c 	.word	0x00029a3c

00021df4 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>:
   21df4:	e3a02000 	mov	r2, #0
   21df8:	e3a01001 	mov	r1, #1
   21dfc:	e92d4030 	push	{r4, r5, lr}
   21e00:	e1a04000 	mov	r4, r0
   21e04:	e5903020 	ldr	r3, [r0, #32]
   21e08:	e24dd014 	sub	sp, sp, #20
   21e0c:	e5c31011 	strb	r1, [r3, #17]
   21e10:	e5c3200c 	strb	r2, [r3, #12]
   21e14:	e5c3200d 	strb	r2, [r3, #13]
   21e18:	e5c3200e 	strb	r2, [r3, #14]
   21e1c:	e5c3200f 	strb	r2, [r3, #15]
   21e20:	e5c32010 	strb	r2, [r3, #16]
   21e24:	e5c32012 	strb	r2, [r3, #18]
   21e28:	e5c32013 	strb	r2, [r3, #19]
   21e2c:	e28d000c 	add	r0, sp, #12
   21e30:	ebffe0eb 	bl	1a1e4 <CBcmPropertyTags::CBcmPropertyTags()>
   21e34:	e59f306c 	ldr	r3, [pc, #108]	; 21ea8 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0xb4>
   21e38:	e5942020 	ldr	r2, [r4, #32]
   21e3c:	e28d000c 	add	r0, sp, #12
   21e40:	e58d3000 	str	r3, [sp]
   21e44:	e59f1060 	ldr	r1, [pc, #96]	; 21eac <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0xb8>
   21e48:	e283300c 	add	r3, r3, #12
   21e4c:	ebffe13b 	bl	1a340 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   21e50:	e2505000 	subs	r5, r0, #0
   21e54:	0a000008 	beq	21e7c <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x88>
   21e58:	e5942020 	ldr	r2, [r4, #32]
   21e5c:	e5d2300c 	ldrb	r3, [r2, #12]
   21e60:	e5d2000d 	ldrb	r0, [r2, #13]
   21e64:	e5d2100e 	ldrb	r1, [r2, #14]
   21e68:	e1833400 	orr	r3, r3, r0, lsl #8
   21e6c:	e5d2200f 	ldrb	r2, [r2, #15]
   21e70:	e1833801 	orr	r3, r3, r1, lsl #16
   21e74:	e1933c02 	orrs	r3, r3, r2, lsl #24
   21e78:	0a000005 	beq	21e94 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0xa0>
   21e7c:	e3a05000 	mov	r5, #0
   21e80:	e28d000c 	add	r0, sp, #12
   21e84:	ebffe0dc 	bl	1a1fc <CBcmPropertyTags::~CBcmPropertyTags()>
   21e88:	e1a00005 	mov	r0, r5
   21e8c:	e28dd014 	add	sp, sp, #20
   21e90:	e8bd8030 	pop	{r4, r5, pc}
   21e94:	e28d000c 	add	r0, sp, #12
   21e98:	ebffe0d7 	bl	1a1fc <CBcmPropertyTags::~CBcmPropertyTags()>
   21e9c:	e1a00005 	mov	r0, r5
   21ea0:	e28dd014 	add	sp, sp, #20
   21ea4:	e8bd8030 	pop	{r4, r5, pc}
   21ea8:	00000408 	.word	0x00000408
   21eac:	0004800b 	.word	0x0004800b

00021eb0 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
   21eb0:	e92d4030 	push	{r4, r5, lr}
   21eb4:	e3510000 	cmp	r1, #0
   21eb8:	13520000 	cmpne	r2, #0
   21ebc:	e1a04000 	mov	r4, r0
   21ec0:	e3a05000 	mov	r5, #0
   21ec4:	e24dd024 	sub	sp, sp, #36	; 0x24
   21ec8:	e59dc034 	ldr	ip, [sp, #52]	; 0x34
   21ecc:	e59d0030 	ldr	r0, [sp, #48]	; 0x30
   21ed0:	e8840006 	stm	r4, {r1, r2}
   21ed4:	e5843010 	str	r3, [r4, #16]
   21ed8:	e584c00c 	str	ip, [r4, #12]
   21edc:	e5840008 	str	r0, [r4, #8]
   21ee0:	e5845014 	str	r5, [r4, #20]
   21ee4:	e5845018 	str	r5, [r4, #24]
   21ee8:	e584501c 	str	r5, [r4, #28]
   21eec:	e5845020 	str	r5, [r4, #32]
   21ef0:	1a000010 	bne	21f38 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x88>
   21ef4:	e28d0008 	add	r0, sp, #8
   21ef8:	ebffe0b9 	bl	1a1e4 <CBcmPropertyTags::CBcmPropertyTags()>
   21efc:	e58d5000 	str	r5, [sp]
   21f00:	e28d0008 	add	r0, sp, #8
   21f04:	e3a03014 	mov	r3, #20
   21f08:	e28d200c 	add	r2, sp, #12
   21f0c:	e59f10c8 	ldr	r1, [pc, #200]	; 21fdc <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x12c>
   21f10:	ebffe10a 	bl	1a340 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   21f14:	e1500005 	cmp	r0, r5
   21f18:	1a000026 	bne	21fb8 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x108>
   21f1c:	e3a02d0a 	mov	r2, #640	; 0x280
   21f20:	e3a03e1e 	mov	r3, #480	; 0x1e0
   21f24:	e884000c 	stm	r4, {r2, r3}
   21f28:	e28d0008 	add	r0, sp, #8
   21f2c:	ebffe0b2 	bl	1a1fc <CBcmPropertyTags::~CBcmPropertyTags()>
   21f30:	e5940008 	ldr	r0, [r4, #8]
   21f34:	e5943010 	ldr	r3, [r4, #16]
   21f38:	e3500000 	cmp	r0, #0
   21f3c:	0a000019 	beq	21fa8 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xf8>
   21f40:	e594200c 	ldr	r2, [r4, #12]
   21f44:	e3520000 	cmp	r2, #0
   21f48:	0a000016 	beq	21fa8 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xf8>
   21f4c:	e3530008 	cmp	r3, #8
   21f50:	8a000006 	bhi	21f70 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xc0>
   21f54:	e59f0084 	ldr	r0, [pc, #132]	; 21fe0 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x130>
   21f58:	ebfffe12 	bl	217a8 <operator new[](unsigned int)>
   21f5c:	e3a02b01 	mov	r2, #1024	; 0x400
   21f60:	e5840020 	str	r0, [r4, #32]
   21f64:	e3a01000 	mov	r1, #0
   21f68:	e2800014 	add	r0, r0, #20
   21f6c:	ebfff99e 	bl	205ec <memset>
   21f70:	e3a02070 	mov	r2, #112	; 0x70
   21f74:	e59f1068 	ldr	r1, [pc, #104]	; 21fe4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x134>
   21f78:	e2840024 	add	r0, r4, #36	; 0x24
   21f7c:	ebfffb0c 	bl	20bb4 <memcpy>
   21f80:	e994000f 	ldmib	r4, {r0, r1, r2, r3}
   21f84:	e5840034 	str	r0, [r4, #52]	; 0x34
   21f88:	e1a00004 	mov	r0, r4
   21f8c:	e594c000 	ldr	ip, [r4]
   21f90:	e5841044 	str	r1, [r4, #68]	; 0x44
   21f94:	e584c030 	str	ip, [r4, #48]	; 0x30
   21f98:	e5842048 	str	r2, [r4, #72]	; 0x48
   21f9c:	e5843058 	str	r3, [r4, #88]	; 0x58
   21fa0:	e28dd024 	add	sp, sp, #36	; 0x24
   21fa4:	e8bd8030 	pop	{r4, r5, pc}
   21fa8:	e8940006 	ldm	r4, {r1, r2}
   21fac:	e5841008 	str	r1, [r4, #8]
   21fb0:	e584200c 	str	r2, [r4, #12]
   21fb4:	eaffffe4 	b	21f4c <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x9c>
   21fb8:	e59d2018 	ldr	r2, [sp, #24]
   21fbc:	e59d301c 	ldr	r3, [sp, #28]
   21fc0:	e2420d0a 	sub	r0, r2, #640	; 0x280
   21fc4:	e2431e1e 	sub	r1, r3, #480	; 0x1e0
   21fc8:	e3510f96 	cmp	r1, #600	; 0x258
   21fcc:	93500c05 	cmpls	r0, #1280	; 0x500
   21fd0:	e884000c 	stm	r4, {r2, r3}
   21fd4:	9affffd3 	bls	21f28 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x78>
   21fd8:	eaffffcf 	b	21f1c <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
   21fdc:	00040003 	.word	0x00040003
   21fe0:	00000414 	.word	0x00000414
   21fe4:	0002991c 	.word	0x0002991c

00021fe8 <CBcmFrameBuffer::~CBcmFrameBuffer()>:
   21fe8:	e92d4010 	push	{r4, lr}
   21fec:	e1a04000 	mov	r4, r0
   21ff0:	e3a01014 	mov	r1, #20
   21ff4:	e5900020 	ldr	r0, [r0, #32]
   21ff8:	ebfffded 	bl	217b4 <operator delete(void*, unsigned int)>
   21ffc:	e1a00004 	mov	r0, r4
   22000:	e8bd8010 	pop	{r4, pc}

00022004 <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)>:
   22004:	e5903010 	ldr	r3, [r0, #16]
   22008:	e3530008 	cmp	r3, #8
   2200c:	812fff1e 	bxhi	lr
   22010:	e1a03982 	lsl	r3, r2, #19
   22014:	e1a0c5a2 	lsr	ip, r2, #11
   22018:	e203373e 	and	r3, r3, #16252928	; 0xf80000
   2201c:	e183318c 	orr	r3, r3, ip, lsl #3
   22020:	e1a02282 	lsl	r2, r2, #5
   22024:	e5900020 	ldr	r0, [r0, #32]
   22028:	e38334ff 	orr	r3, r3, #-16777216	; 0xff000000
   2202c:	e2022b3f 	and	r2, r2, #64512	; 0xfc00
   22030:	e1822003 	orr	r2, r2, r3
   22034:	e2811004 	add	r1, r1, #4
   22038:	e0801101 	add	r1, r0, r1, lsl #2
   2203c:	e1a0c422 	lsr	ip, r2, #8
   22040:	e1a00822 	lsr	r0, r2, #16
   22044:	e1a03c22 	lsr	r3, r2, #24
   22048:	e5c12004 	strb	r2, [r1, #4]
   2204c:	e5c1c005 	strb	ip, [r1, #5]
   22050:	e5c10006 	strb	r0, [r1, #6]
   22054:	e5c13007 	strb	r3, [r1, #7]
   22058:	e12fff1e 	bx	lr

0002205c <CBcmFrameBuffer::SetPalette32(unsigned char, unsigned int)>:
   2205c:	e5903010 	ldr	r3, [r0, #16]
   22060:	e3530008 	cmp	r3, #8
   22064:	812fff1e 	bxhi	lr
   22068:	e5903020 	ldr	r3, [r0, #32]
   2206c:	e2811004 	add	r1, r1, #4
   22070:	e0831101 	add	r1, r3, r1, lsl #2
   22074:	e1a0c422 	lsr	ip, r2, #8
   22078:	e1a00822 	lsr	r0, r2, #16
   2207c:	e1a03c22 	lsr	r3, r2, #24
   22080:	e5c12004 	strb	r2, [r1, #4]
   22084:	e5c1c005 	strb	ip, [r1, #5]
   22088:	e5c10006 	strb	r0, [r1, #6]
   2208c:	e5c13007 	strb	r3, [r1, #7]
   22090:	e12fff1e 	bx	lr

00022094 <CBcmFrameBuffer::Initialize()>:
   22094:	e92d4030 	push	{r4, r5, lr}
   22098:	e1a04000 	mov	r4, r0
   2209c:	e24dd00c 	sub	sp, sp, #12
   220a0:	e28d0004 	add	r0, sp, #4
   220a4:	ebffe04e 	bl	1a1e4 <CBcmPropertyTags::CBcmPropertyTags()>
   220a8:	e2841024 	add	r1, r4, #36	; 0x24
   220ac:	e28d0004 	add	r0, sp, #4
   220b0:	e3a02070 	mov	r2, #112	; 0x70
   220b4:	ebffe055 	bl	1a210 <CBcmPropertyTags::GetTags(void*, unsigned int)>
   220b8:	e2505000 	subs	r5, r0, #0
   220bc:	0a00001f 	beq	22140 <CBcmFrameBuffer::Initialize()+0xac>
   220c0:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   220c4:	e3530000 	cmp	r3, #0
   220c8:	0a00001b 	beq	2213c <CBcmFrameBuffer::Initialize()+0xa8>
   220cc:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   220d0:	e3530000 	cmp	r3, #0
   220d4:	0a000018 	beq	2213c <CBcmFrameBuffer::Initialize()+0xa8>
   220d8:	e5943044 	ldr	r3, [r4, #68]	; 0x44
   220dc:	e3530000 	cmp	r3, #0
   220e0:	0a000015 	beq	2213c <CBcmFrameBuffer::Initialize()+0xa8>
   220e4:	e5943048 	ldr	r3, [r4, #72]	; 0x48
   220e8:	e3530000 	cmp	r3, #0
   220ec:	0a000012 	beq	2213c <CBcmFrameBuffer::Initialize()+0xa8>
   220f0:	e5943058 	ldr	r3, [r4, #88]	; 0x58
   220f4:	e3530000 	cmp	r3, #0
   220f8:	0a00000f 	beq	2213c <CBcmFrameBuffer::Initialize()+0xa8>
   220fc:	e594307c 	ldr	r3, [r4, #124]	; 0x7c
   22100:	e3530000 	cmp	r3, #0
   22104:	0a00000c 	beq	2213c <CBcmFrameBuffer::Initialize()+0xa8>
   22108:	e5940010 	ldr	r0, [r4, #16]
   2210c:	e5941080 	ldr	r1, [r4, #128]	; 0x80
   22110:	e5942090 	ldr	r2, [r4, #144]	; 0x90
   22114:	e3c33103 	bic	r3, r3, #-1073741824	; 0xc0000000
   22118:	e3500008 	cmp	r0, #8
   2211c:	e5843014 	str	r3, [r4, #20]
   22120:	e5841018 	str	r1, [r4, #24]
   22124:	e584201c 	str	r2, [r4, #28]
   22128:	8a000004 	bhi	22140 <CBcmFrameBuffer::Initialize()+0xac>
   2212c:	e1a00004 	mov	r0, r4
   22130:	ebffff2f 	bl	21df4 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>
   22134:	e1a05000 	mov	r5, r0
   22138:	ea000000 	b	22140 <CBcmFrameBuffer::Initialize()+0xac>
   2213c:	e1a05003 	mov	r5, r3
   22140:	e28d0004 	add	r0, sp, #4
   22144:	ebffe02c 	bl	1a1fc <CBcmPropertyTags::~CBcmPropertyTags()>
   22148:	e1a00005 	mov	r0, r5
   2214c:	e28dd00c 	add	sp, sp, #12
   22150:	e8bd8030 	pop	{r4, r5, pc}

00022154 <CBcmFrameBuffer::GetWidth() const>:
   22154:	e5900000 	ldr	r0, [r0]
   22158:	e12fff1e 	bx	lr

0002215c <CBcmFrameBuffer::GetHeight() const>:
   2215c:	e5900004 	ldr	r0, [r0, #4]
   22160:	e12fff1e 	bx	lr

00022164 <CBcmFrameBuffer::GetVirtWidth() const>:
   22164:	e5900008 	ldr	r0, [r0, #8]
   22168:	e12fff1e 	bx	lr

0002216c <CBcmFrameBuffer::GetVirtHeight() const>:
   2216c:	e590000c 	ldr	r0, [r0, #12]
   22170:	e12fff1e 	bx	lr

00022174 <CBcmFrameBuffer::GetPitch() const>:
   22174:	e590001c 	ldr	r0, [r0, #28]
   22178:	e12fff1e 	bx	lr

0002217c <CBcmFrameBuffer::GetDepth() const>:
   2217c:	e5900010 	ldr	r0, [r0, #16]
   22180:	e12fff1e 	bx	lr

00022184 <CBcmFrameBuffer::GetBuffer() const>:
   22184:	e5900014 	ldr	r0, [r0, #20]
   22188:	e12fff1e 	bx	lr

0002218c <CBcmFrameBuffer::GetSize() const>:
   2218c:	e5900018 	ldr	r0, [r0, #24]
   22190:	e12fff1e 	bx	lr

00022194 <CBcmFrameBuffer::UpdatePalette()>:
   22194:	e5903010 	ldr	r3, [r0, #16]
   22198:	e3530008 	cmp	r3, #8
   2219c:	9a000001 	bls	221a8 <CBcmFrameBuffer::UpdatePalette()+0x14>
   221a0:	e3a00001 	mov	r0, #1
   221a4:	e12fff1e 	bx	lr
   221a8:	eaffff11 	b	21df4 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>

000221ac <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)>:
   221ac:	e92d4070 	push	{r4, r5, r6, lr}
   221b0:	e24dd020 	sub	sp, sp, #32
   221b4:	e28d0008 	add	r0, sp, #8
   221b8:	e1a05001 	mov	r5, r1
   221bc:	e1a06002 	mov	r6, r2
   221c0:	ebffe007 	bl	1a1e4 <CBcmPropertyTags::CBcmPropertyTags()>
   221c4:	e3a03008 	mov	r3, #8
   221c8:	e28d200c 	add	r2, sp, #12
   221cc:	e08d0003 	add	r0, sp, r3
   221d0:	e58d3000 	str	r3, [sp]
   221d4:	e59f1044 	ldr	r1, [pc, #68]	; 22220 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x74>
   221d8:	e3a03014 	mov	r3, #20
   221dc:	e58d5018 	str	r5, [sp, #24]
   221e0:	e58d601c 	str	r6, [sp, #28]
   221e4:	ebffe055 	bl	1a340 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   221e8:	e2504000 	subs	r4, r0, #0
   221ec:	0a000006 	beq	2220c <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x60>
   221f0:	e59d3018 	ldr	r3, [sp, #24]
   221f4:	e1550003 	cmp	r5, r3
   221f8:	059d401c 	ldreq	r4, [sp, #28]
   221fc:	13a04000 	movne	r4, #0
   22200:	00444006 	subeq	r4, r4, r6
   22204:	016f4f14 	clzeq	r4, r4
   22208:	01a042a4 	lsreq	r4, r4, #5
   2220c:	e28d0008 	add	r0, sp, #8
   22210:	ebffdff9 	bl	1a1fc <CBcmPropertyTags::~CBcmPropertyTags()>
   22214:	e1a00004 	mov	r0, r4
   22218:	e28dd020 	add	sp, sp, #32
   2221c:	e8bd8070 	pop	{r4, r5, r6, pc}
   22220:	00048009 	.word	0x00048009

00022224 <CBcmFrameBuffer::WaitForVerticalSync()>:
   22224:	e92d4010 	push	{r4, lr}
   22228:	e24dd020 	sub	sp, sp, #32
   2222c:	e28d000c 	add	r0, sp, #12
   22230:	ebffdfeb 	bl	1a1e4 <CBcmPropertyTags::CBcmPropertyTags()>
   22234:	e3a03000 	mov	r3, #0
   22238:	e58d3000 	str	r3, [sp]
   2223c:	e3a03010 	mov	r3, #16
   22240:	e59f1020 	ldr	r1, [pc, #32]	; 22268 <CBcmFrameBuffer::WaitForVerticalSync()+0x44>
   22244:	e08d2003 	add	r2, sp, r3
   22248:	e28d000c 	add	r0, sp, #12
   2224c:	ebffe03b 	bl	1a340 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   22250:	e1a04000 	mov	r4, r0
   22254:	e28d000c 	add	r0, sp, #12
   22258:	ebffdfe7 	bl	1a1fc <CBcmPropertyTags::~CBcmPropertyTags()>
   2225c:	e1a00004 	mov	r0, r4
   22260:	e28dd020 	add	sp, sp, #32
   22264:	e8bd8010 	pop	{r4, pc}
   22268:	0004800e 	.word	0x0004800e

0002226c <CBcmMailBox::CBcmMailBox(unsigned int)>:
   2226c:	e5801000 	str	r1, [r0]
   22270:	e12fff1e 	bx	lr

00022274 <CBcmMailBox::~CBcmMailBox()>:
   22274:	e12fff1e 	bx	lr

00022278 <CBcmMailBox::Flush()>:
   22278:	e92d4070 	push	{r4, r5, r6, lr}
   2227c:	e59f4028 	ldr	r4, [pc, #40]	; 222ac <CBcmMailBox::Flush()+0x34>
   22280:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   22284:	e3130101 	tst	r3, #1073741824	; 0x40000000
   22288:	18bd8070 	popne	{r4, r5, r6, pc}
   2228c:	e3a05014 	mov	r5, #20
   22290:	e1a00005 	mov	r0, r5
   22294:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
   22298:	ebfff88b 	bl	204cc <CTimer::SimpleMsDelay(unsigned int)>
   2229c:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   222a0:	e3130101 	tst	r3, #1073741824	; 0x40000000
   222a4:	0afffff9 	beq	22290 <CBcmMailBox::Flush()+0x18>
   222a8:	e8bd8070 	pop	{r4, r5, r6, pc}
   222ac:	2000b000 	.word	0x2000b000

000222b0 <CBcmMailBox::Read()>:
   222b0:	e5901000 	ldr	r1, [r0]
   222b4:	e59f2020 	ldr	r2, [pc, #32]	; 222dc <CBcmMailBox::Read()+0x2c>
   222b8:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   222bc:	e3130101 	tst	r3, #1073741824	; 0x40000000
   222c0:	1afffffc 	bne	222b8 <CBcmMailBox::Read()+0x8>
   222c4:	e5920880 	ldr	r0, [r2, #2176]	; 0x880
   222c8:	e200300f 	and	r3, r0, #15
   222cc:	e1510003 	cmp	r1, r3
   222d0:	1afffff8 	bne	222b8 <CBcmMailBox::Read()+0x8>
   222d4:	e3c0000f 	bic	r0, r0, #15
   222d8:	e12fff1e 	bx	lr
   222dc:	2000b000 	.word	0x2000b000

000222e0 <CBcmMailBox::Write(unsigned int)>:
   222e0:	e92d4070 	push	{r4, r5, r6, lr}
   222e4:	e1a05000 	mov	r5, r0
   222e8:	e1a04001 	mov	r4, r1
   222ec:	e59f2034 	ldr	r2, [pc, #52]	; 22328 <CBcmMailBox::Write(unsigned int)+0x48>
   222f0:	e59238b8 	ldr	r3, [r2, #2232]	; 0x8b8
   222f4:	e3530000 	cmp	r3, #0
   222f8:	bafffffc 	blt	222f0 <CBcmMailBox::Write(unsigned int)+0x10>
   222fc:	e314000f 	tst	r4, #15
   22300:	0a000003 	beq	22314 <CBcmMailBox::Write(unsigned int)+0x34>
   22304:	e3a0205b 	mov	r2, #91	; 0x5b
   22308:	e59f101c 	ldr	r1, [pc, #28]	; 2232c <CBcmMailBox::Write(unsigned int)+0x4c>
   2230c:	e59f001c 	ldr	r0, [pc, #28]	; 22330 <CBcmMailBox::Write(unsigned int)+0x50>
   22310:	ebffdf8f 	bl	1a154 <assertion_failed>
   22314:	e5952000 	ldr	r2, [r5]
   22318:	e59f3008 	ldr	r3, [pc, #8]	; 22328 <CBcmMailBox::Write(unsigned int)+0x48>
   2231c:	e1844002 	orr	r4, r4, r2
   22320:	e58348a0 	str	r4, [r3, #2208]	; 0x8a0
   22324:	e8bd8070 	pop	{r4, r5, r6, pc}
   22328:	2000b000 	.word	0x2000b000
   2232c:	00028710 	.word	0x00028710
   22330:	00028720 	.word	0x00028720

00022334 <CBcmMailBox::WriteRead(unsigned int)>:
   22334:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   22338:	e3a03000 	mov	r3, #0
   2233c:	e1a07000 	mov	r7, r0
   22340:	e1a08001 	mov	r8, r1
   22344:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   22348:	e59f5090 	ldr	r5, [pc, #144]	; 223e0 <CBcmMailBox::WriteRead(unsigned int)+0xac>
   2234c:	e5950000 	ldr	r0, [r5]
   22350:	e1500003 	cmp	r0, r3
   22354:	1a00001f 	bne	223d8 <CBcmMailBox::WriteRead(unsigned int)+0xa4>
   22358:	e59f4084 	ldr	r4, [pc, #132]	; 223e4 <CBcmMailBox::WriteRead(unsigned int)+0xb0>
   2235c:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   22360:	e3130101 	tst	r3, #1073741824	; 0x40000000
   22364:	1a000006 	bne	22384 <CBcmMailBox::WriteRead(unsigned int)+0x50>
   22368:	e3a06014 	mov	r6, #20
   2236c:	e1a00006 	mov	r0, r6
   22370:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
   22374:	ebfff854 	bl	204cc <CTimer::SimpleMsDelay(unsigned int)>
   22378:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   2237c:	e3130101 	tst	r3, #1073741824	; 0x40000000
   22380:	0afffff9 	beq	2236c <CBcmMailBox::WriteRead(unsigned int)+0x38>
   22384:	e1a00007 	mov	r0, r7
   22388:	e1a01008 	mov	r1, r8
   2238c:	ebffffd3 	bl	222e0 <CBcmMailBox::Write(unsigned int)>
   22390:	e5970000 	ldr	r0, [r7]
   22394:	e59f2048 	ldr	r2, [pc, #72]	; 223e4 <CBcmMailBox::WriteRead(unsigned int)+0xb0>
   22398:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   2239c:	e3130101 	tst	r3, #1073741824	; 0x40000000
   223a0:	1afffffc 	bne	22398 <CBcmMailBox::WriteRead(unsigned int)+0x64>
   223a4:	e5923880 	ldr	r3, [r2, #2176]	; 0x880
   223a8:	e203100f 	and	r1, r3, #15
   223ac:	e1510000 	cmp	r1, r0
   223b0:	1afffff8 	bne	22398 <CBcmMailBox::WriteRead(unsigned int)+0x64>
   223b4:	e5952000 	ldr	r2, [r5]
   223b8:	e3c3400f 	bic	r4, r3, #15
   223bc:	e3520000 	cmp	r2, #0
   223c0:	0a000000 	beq	223c8 <CBcmMailBox::WriteRead(unsigned int)+0x94>
   223c4:	ebfffcc9 	bl	216f0 <LeaveCritical>
   223c8:	e3a03000 	mov	r3, #0
   223cc:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   223d0:	e1a00004 	mov	r0, r4
   223d4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   223d8:	ebfffc97 	bl	2163c <EnterCritical>
   223dc:	eaffffdd 	b	22358 <CBcmMailBox::WriteRead(unsigned int)+0x24>
   223e0:	00029a58 	.word	0x00029a58
   223e4:	2000b000 	.word	0x2000b000

000223e8 <_GLOBAL__sub_I__ZN11CBcmMailBox10s_SpinLockE>:
   223e8:	e3a02000 	mov	r2, #0
   223ec:	e59f3004 	ldr	r3, [pc, #4]	; 223f8 <_GLOBAL__sub_I__ZN11CBcmMailBox10s_SpinLockE+0x10>
   223f0:	e5832000 	str	r2, [r3]
   223f4:	e12fff1e 	bx	lr
   223f8:	00029a58 	.word	0x00029a58

000223fc <CCharGenerator::CCharGenerator()>:
   223fc:	e3a03008 	mov	r3, #8
   22400:	e5803000 	str	r3, [r0]
   22404:	e12fff1e 	bx	lr

00022408 <CCharGenerator::~CCharGenerator()>:
   22408:	e12fff1e 	bx	lr

0002240c <CCharGenerator::GetCharWidth() const>:
   2240c:	e5900000 	ldr	r0, [r0]
   22410:	e12fff1e 	bx	lr

00022414 <CCharGenerator::GetCharHeight() const>:
   22414:	e3a00013 	mov	r0, #19
   22418:	e12fff1e 	bx	lr

0002241c <CCharGenerator::GetUnderline() const>:
   2241c:	e3a00010 	mov	r0, #16
   22420:	e12fff1e 	bx	lr

00022424 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>:
   22424:	e6ef1071 	uxtb	r1, r1
   22428:	e92d4070 	push	{r4, r5, r6, lr}
   2242c:	e2414021 	sub	r4, r1, #33	; 0x21
   22430:	e35400de 	cmp	r4, #222	; 0xde
   22434:	8a00000e 	bhi	22474 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x50>
   22438:	e1a06003 	mov	r6, r3
   2243c:	e5903000 	ldr	r3, [r0]
   22440:	e1a05002 	mov	r5, r2
   22444:	e1530002 	cmp	r3, r2
   22448:	9a00000b 	bls	2247c <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x58>
   2244c:	e356000f 	cmp	r6, #15
   22450:	8a000007 	bhi	22474 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x50>
   22454:	e3a02080 	mov	r2, #128	; 0x80
   22458:	e59f1038 	ldr	r1, [pc, #56]	; 22498 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x74>
   2245c:	e0814204 	add	r4, r1, r4, lsl #4
   22460:	e7d43006 	ldrb	r3, [r4, r6]
   22464:	e0133552 	ands	r3, r3, r2, asr r5
   22468:	13a00001 	movne	r0, #1
   2246c:	03a00000 	moveq	r0, #0
   22470:	e8bd8070 	pop	{r4, r5, r6, pc}
   22474:	e3a00000 	mov	r0, #0
   22478:	e8bd8070 	pop	{r4, r5, r6, pc}
   2247c:	e3a0204e 	mov	r2, #78	; 0x4e
   22480:	e59f1014 	ldr	r1, [pc, #20]	; 2249c <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x78>
   22484:	e59f0014 	ldr	r0, [pc, #20]	; 224a0 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x7c>
   22488:	ebffdf31 	bl	1a154 <assertion_failed>
   2248c:	e356000f 	cmp	r6, #15
   22490:	9affffef 	bls	22454 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x30>
   22494:	eafffff6 	b	22474 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x50>
   22498:	00028734 	.word	0x00028734
   2249c:	00029524 	.word	0x00029524
   224a0:	00029538 	.word	0x00029538
   224a4:	00000000 	.word	0x00000000

000224a8 <DelayLoop>:
   224a8:	e2500001 	subs	r0, r0, #1
   224ac:	8afffffd 	bhi	224a8 <DelayLoop>
   224b0:	e1a0f00e 	mov	pc, lr

000224b4 <CGPIOManager::CGPIOManager(CInterruptSystem*)>:
   224b4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   224b8:	e3a0e000 	mov	lr, #0
   224bc:	e1a03000 	mov	r3, r0
   224c0:	e1a0c00e 	mov	ip, lr
   224c4:	e5801000 	str	r1, [r0]
   224c8:	e28020dc 	add	r2, r0, #220	; 0xdc
   224cc:	e5e3e004 	strb	lr, [r3, #4]!
   224d0:	e5a3c004 	str	ip, [r3, #4]!
   224d4:	e1530002 	cmp	r3, r2
   224d8:	1afffffc 	bne	224d0 <CGPIOManager::CGPIOManager(CInterruptSystem*)+0x1c>
   224dc:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

000224e0 <CGPIOManager::~CGPIOManager()>:
   224e0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   224e4:	e1a09000 	mov	r9, r0
   224e8:	e3a0802c 	mov	r8, #44	; 0x2c
   224ec:	e59f706c 	ldr	r7, [pc, #108]	; 22560 <CGPIOManager::~CGPIOManager()+0x80>
   224f0:	e59f606c 	ldr	r6, [pc, #108]	; 22564 <CGPIOManager::~CGPIOManager()+0x84>
   224f4:	e2804004 	add	r4, r0, #4
   224f8:	e28050dc 	add	r5, r0, #220	; 0xdc
   224fc:	e5b43004 	ldr	r3, [r4, #4]!
   22500:	e3530000 	cmp	r3, #0
   22504:	0a000003 	beq	22518 <CGPIOManager::~CGPIOManager()+0x38>
   22508:	e1a02008 	mov	r2, r8
   2250c:	e1a01007 	mov	r1, r7
   22510:	e1a00006 	mov	r0, r6
   22514:	ebffdf0e 	bl	1a154 <assertion_failed>
   22518:	e1540005 	cmp	r4, r5
   2251c:	1afffff6 	bne	224fc <CGPIOManager::~CGPIOManager()+0x1c>
   22520:	e5d93004 	ldrb	r3, [r9, #4]
   22524:	e3530000 	cmp	r3, #0
   22528:	0a000004 	beq	22540 <CGPIOManager::~CGPIOManager()+0x60>
   2252c:	e5990000 	ldr	r0, [r9]
   22530:	e3500000 	cmp	r0, #0
   22534:	0a000003 	beq	22548 <CGPIOManager::~CGPIOManager()+0x68>
   22538:	e3a01034 	mov	r1, #52	; 0x34
   2253c:	ebffe699 	bl	1bfa8 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   22540:	e1a00009 	mov	r0, r9
   22544:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   22548:	e59f0018 	ldr	r0, [pc, #24]	; 22568 <CGPIOManager::~CGPIOManager()+0x88>
   2254c:	e3a02032 	mov	r2, #50	; 0x32
   22550:	e59f1008 	ldr	r1, [pc, #8]	; 22560 <CGPIOManager::~CGPIOManager()+0x80>
   22554:	ebffdefe 	bl	1a154 <assertion_failed>
   22558:	e5990000 	ldr	r0, [r9]
   2255c:	eafffff5 	b	22538 <CGPIOManager::~CGPIOManager()+0x58>
   22560:	00029550 	.word	0x00029550
   22564:	00029560 	.word	0x00029560
   22568:	00029574 	.word	0x00029574

0002256c <CGPIOManager::Initialize()>:
   2256c:	e5d03004 	ldrb	r3, [r0, #4]
   22570:	e92d4010 	push	{r4, lr}
   22574:	e3530000 	cmp	r3, #0
   22578:	e1a04000 	mov	r4, r0
   2257c:	1a000009 	bne	225a8 <CGPIOManager::Initialize()+0x3c>
   22580:	e5940000 	ldr	r0, [r4]
   22584:	e3500000 	cmp	r0, #0
   22588:	0a00000d 	beq	225c4 <CGPIOManager::Initialize()+0x58>
   2258c:	e1a03004 	mov	r3, r4
   22590:	e59f2044 	ldr	r2, [pc, #68]	; 225dc <CGPIOManager::Initialize()+0x70>
   22594:	e3a01034 	mov	r1, #52	; 0x34
   22598:	ebffe647 	bl	1bebc <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   2259c:	e3a00001 	mov	r0, #1
   225a0:	e5c40004 	strb	r0, [r4, #4]
   225a4:	e8bd8010 	pop	{r4, pc}
   225a8:	e59f0030 	ldr	r0, [pc, #48]	; 225e0 <CGPIOManager::Initialize()+0x74>
   225ac:	e3a0203b 	mov	r2, #59	; 0x3b
   225b0:	e59f102c 	ldr	r1, [pc, #44]	; 225e4 <CGPIOManager::Initialize()+0x78>
   225b4:	ebffdee6 	bl	1a154 <assertion_failed>
   225b8:	e5940000 	ldr	r0, [r4]
   225bc:	e3500000 	cmp	r0, #0
   225c0:	1afffff1 	bne	2258c <CGPIOManager::Initialize()+0x20>
   225c4:	e59f001c 	ldr	r0, [pc, #28]	; 225e8 <CGPIOManager::Initialize()+0x7c>
   225c8:	e3a0203c 	mov	r2, #60	; 0x3c
   225cc:	e59f1010 	ldr	r1, [pc, #16]	; 225e4 <CGPIOManager::Initialize()+0x78>
   225d0:	ebffdedf 	bl	1a154 <assertion_failed>
   225d4:	e5940000 	ldr	r0, [r4]
   225d8:	eaffffeb 	b	2258c <CGPIOManager::Initialize()+0x20>
   225dc:	000227fc 	.word	0x000227fc
   225e0:	00029588 	.word	0x00029588
   225e4:	00029550 	.word	0x00029550
   225e8:	00029574 	.word	0x00029574

000225ec <CGPIOManager::ConnectInterrupt(CGPIOPin*)>:
   225ec:	e5d03004 	ldrb	r3, [r0, #4]
   225f0:	e92d4070 	push	{r4, r5, r6, lr}
   225f4:	e3530000 	cmp	r3, #0
   225f8:	e1a04000 	mov	r4, r0
   225fc:	e1a05001 	mov	r5, r1
   22600:	0a00000e 	beq	22640 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x54>
   22604:	e3550000 	cmp	r5, #0
   22608:	0a000016 	beq	22668 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x7c>
   2260c:	e5956004 	ldr	r6, [r5, #4]
   22610:	e3560035 	cmp	r6, #53	; 0x35
   22614:	8a00000e 	bhi	22654 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x68>
   22618:	e0844106 	add	r4, r4, r6, lsl #2
   2261c:	e5943008 	ldr	r3, [r4, #8]
   22620:	e3530000 	cmp	r3, #0
   22624:	0a000003 	beq	22638 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x4c>
   22628:	e3a0204b 	mov	r2, #75	; 0x4b
   2262c:	e59f1048 	ldr	r1, [pc, #72]	; 2267c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x90>
   22630:	e59f0048 	ldr	r0, [pc, #72]	; 22680 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x94>
   22634:	ebffdec6 	bl	1a154 <assertion_failed>
   22638:	e5845008 	str	r5, [r4, #8]
   2263c:	e8bd8070 	pop	{r4, r5, r6, pc}
   22640:	e3a02045 	mov	r2, #69	; 0x45
   22644:	e59f1030 	ldr	r1, [pc, #48]	; 2267c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x90>
   22648:	e59f0034 	ldr	r0, [pc, #52]	; 22684 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x98>
   2264c:	ebffdec0 	bl	1a154 <assertion_failed>
   22650:	eaffffeb 	b	22604 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x18>
   22654:	e3a02049 	mov	r2, #73	; 0x49
   22658:	e59f101c 	ldr	r1, [pc, #28]	; 2267c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x90>
   2265c:	e59f0024 	ldr	r0, [pc, #36]	; 22688 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x9c>
   22660:	ebffdebb 	bl	1a154 <assertion_failed>
   22664:	eaffffeb 	b	22618 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x2c>
   22668:	e3a02047 	mov	r2, #71	; 0x47
   2266c:	e59f1008 	ldr	r1, [pc, #8]	; 2267c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x90>
   22670:	e59f0014 	ldr	r0, [pc, #20]	; 2268c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0xa0>
   22674:	ebffdeb6 	bl	1a154 <assertion_failed>
   22678:	eaffffe3 	b	2260c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x20>
   2267c:	00029550 	.word	0x00029550
   22680:	00029560 	.word	0x00029560
   22684:	0002959c 	.word	0x0002959c
   22688:	00027dd0 	.word	0x00027dd0
   2268c:	000295ac 	.word	0x000295ac

00022690 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>:
   22690:	e5d03004 	ldrb	r3, [r0, #4]
   22694:	e92d4070 	push	{r4, r5, r6, lr}
   22698:	e3530000 	cmp	r3, #0
   2269c:	e1a04000 	mov	r4, r0
   226a0:	e1a05001 	mov	r5, r1
   226a4:	0a00000b 	beq	226d8 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x48>
   226a8:	e3550000 	cmp	r5, #0
   226ac:	0a00001b 	beq	22720 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x90>
   226b0:	e5955004 	ldr	r5, [r5, #4]
   226b4:	e3550035 	cmp	r5, #53	; 0x35
   226b8:	8a00000b 	bhi	226ec <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x5c>
   226bc:	e0844105 	add	r4, r4, r5, lsl #2
   226c0:	e5943008 	ldr	r3, [r4, #8]
   226c4:	e3530000 	cmp	r3, #0
   226c8:	0a00000f 	beq	2270c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x7c>
   226cc:	e3a03000 	mov	r3, #0
   226d0:	e5843008 	str	r3, [r4, #8]
   226d4:	e8bd8070 	pop	{r4, r5, r6, pc}
   226d8:	e3a02052 	mov	r2, #82	; 0x52
   226dc:	e59f1050 	ldr	r1, [pc, #80]	; 22734 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xa4>
   226e0:	e59f0050 	ldr	r0, [pc, #80]	; 22738 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xa8>
   226e4:	ebffde9a 	bl	1a154 <assertion_failed>
   226e8:	eaffffee 	b	226a8 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x18>
   226ec:	e3a02056 	mov	r2, #86	; 0x56
   226f0:	e59f103c 	ldr	r1, [pc, #60]	; 22734 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xa4>
   226f4:	e59f0040 	ldr	r0, [pc, #64]	; 2273c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xac>
   226f8:	e0844105 	add	r4, r4, r5, lsl #2
   226fc:	ebffde94 	bl	1a154 <assertion_failed>
   22700:	e5943008 	ldr	r3, [r4, #8]
   22704:	e3530000 	cmp	r3, #0
   22708:	1affffef 	bne	226cc <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x3c>
   2270c:	e3a02058 	mov	r2, #88	; 0x58
   22710:	e59f101c 	ldr	r1, [pc, #28]	; 22734 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xa4>
   22714:	e59f0024 	ldr	r0, [pc, #36]	; 22740 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xb0>
   22718:	ebffde8d 	bl	1a154 <assertion_failed>
   2271c:	eaffffea 	b	226cc <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x3c>
   22720:	e3a02054 	mov	r2, #84	; 0x54
   22724:	e59f1008 	ldr	r1, [pc, #8]	; 22734 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xa4>
   22728:	e59f0014 	ldr	r0, [pc, #20]	; 22744 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xb4>
   2272c:	ebffde88 	bl	1a154 <assertion_failed>
   22730:	eaffffde 	b	226b0 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x20>
   22734:	00029550 	.word	0x00029550
   22738:	0002959c 	.word	0x0002959c
   2273c:	00027dd0 	.word	0x00027dd0
   22740:	000295b8 	.word	0x000295b8
   22744:	000295ac 	.word	0x000295ac

00022748 <CGPIOManager::InterruptHandler()>:
   22748:	e5d03004 	ldrb	r3, [r0, #4]
   2274c:	e92d4070 	push	{r4, r5, r6, lr}
   22750:	e3530000 	cmp	r3, #0
   22754:	e1a05000 	mov	r5, r0
   22758:	0a00001b 	beq	227cc <CGPIOManager::InterruptHandler()+0x84>
   2275c:	e3a04000 	mov	r4, #0
   22760:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   22764:	e59f2080 	ldr	r2, [pc, #128]	; 227ec <CGPIOManager::InterruptHandler()+0xa4>
   22768:	e5923040 	ldr	r3, [r2, #64]	; 0x40
   2276c:	ea000005 	b	22788 <CGPIOManager::InterruptHandler()+0x40>
   22770:	e2844001 	add	r4, r4, #1
   22774:	e314001f 	tst	r4, #31
   22778:	11a030a3 	lsrne	r3, r3, #1
   2277c:	05923044 	ldreq	r3, [r2, #68]	; 0x44
   22780:	e3540036 	cmp	r4, #54	; 0x36
   22784:	0a00000d 	beq	227c0 <CGPIOManager::InterruptHandler()+0x78>
   22788:	e3130001 	tst	r3, #1
   2278c:	0afffff7 	beq	22770 <CGPIOManager::InterruptHandler()+0x28>
   22790:	e3a03001 	mov	r3, #1
   22794:	e2842002 	add	r2, r4, #2
   22798:	e7950102 	ldr	r0, [r5, r2, lsl #2]
   2279c:	e204501f 	and	r5, r4, #31
   227a0:	e3500000 	cmp	r0, #0
   227a4:	e1a05513 	lsl	r5, r3, r5
   227a8:	0a00000c 	beq	227e0 <CGPIOManager::InterruptHandler()+0x98>
   227ac:	ebffe4f4 	bl	1bb84 <CGPIOPin::InterruptHandler()>
   227b0:	e59f3038 	ldr	r3, [pc, #56]	; 227f0 <CGPIOManager::InterruptHandler()+0xa8>
   227b4:	e08342a4 	add	r4, r3, r4, lsr #5
   227b8:	e1a04104 	lsl	r4, r4, #2
   227bc:	e5845000 	str	r5, [r4]
   227c0:	e3a03000 	mov	r3, #0
   227c4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   227c8:	e8bd8070 	pop	{r4, r5, r6, pc}
   227cc:	e3a0205e 	mov	r2, #94	; 0x5e
   227d0:	e59f101c 	ldr	r1, [pc, #28]	; 227f4 <CGPIOManager::InterruptHandler()+0xac>
   227d4:	e59f001c 	ldr	r0, [pc, #28]	; 227f8 <CGPIOManager::InterruptHandler()+0xb0>
   227d8:	ebffde5d 	bl	1a154 <assertion_failed>
   227dc:	eaffffde 	b	2275c <CGPIOManager::InterruptHandler()+0x14>
   227e0:	e1a00004 	mov	r0, r4
   227e4:	ebffe513 	bl	1bc38 <CGPIOPin::DisableAllInterrupts(unsigned int)>
   227e8:	eafffff0 	b	227b0 <CGPIOManager::InterruptHandler()+0x68>
   227ec:	20200000 	.word	0x20200000
   227f0:	08080010 	.word	0x08080010
   227f4:	00029550 	.word	0x00029550
   227f8:	0002959c 	.word	0x0002959c

000227fc <CGPIOManager::InterruptStub(void*)>:
   227fc:	e92d4010 	push	{r4, lr}
   22800:	e2504000 	subs	r4, r0, #0
   22804:	0a000002 	beq	22814 <CGPIOManager::InterruptStub(void*)+0x18>
   22808:	e1a00004 	mov	r0, r4
   2280c:	e8bd4010 	pop	{r4, lr}
   22810:	eaffffcc 	b	22748 <CGPIOManager::InterruptHandler()>
   22814:	e59f0014 	ldr	r0, [pc, #20]	; 22830 <CGPIOManager::InterruptStub(void*)+0x34>
   22818:	e3a0208a 	mov	r2, #138	; 0x8a
   2281c:	e59f1010 	ldr	r1, [pc, #16]	; 22834 <CGPIOManager::InterruptStub(void*)+0x38>
   22820:	ebffde4b 	bl	1a154 <assertion_failed>
   22824:	e1a00004 	mov	r0, r4
   22828:	e8bd4010 	pop	{r4, lr}
   2282c:	eaffffc5 	b	22748 <CGPIOManager::InterruptHandler()>
   22830:	00023194 	.word	0x00023194
   22834:	00029550 	.word	0x00029550

00022838 <CPtrList::CPtrList()>:
   22838:	e3a02000 	mov	r2, #0
   2283c:	e5802000 	str	r2, [r0]
   22840:	e12fff1e 	bx	lr

00022844 <CPtrList::~CPtrList()>:
   22844:	e5903000 	ldr	r3, [r0]
   22848:	e92d4010 	push	{r4, lr}
   2284c:	e3530000 	cmp	r3, #0
   22850:	e1a04000 	mov	r4, r0
   22854:	0a000003 	beq	22868 <CPtrList::~CPtrList()+0x24>
   22858:	e3a0202a 	mov	r2, #42	; 0x2a
   2285c:	e59f100c 	ldr	r1, [pc, #12]	; 22870 <CPtrList::~CPtrList()+0x2c>
   22860:	e59f000c 	ldr	r0, [pc, #12]	; 22874 <CPtrList::~CPtrList()+0x30>
   22864:	ebffde3a 	bl	1a154 <assertion_failed>
   22868:	e1a00004 	mov	r0, r4
   2286c:	e8bd8010 	pop	{r4, pc}
   22870:	000295cc 	.word	0x000295cc
   22874:	000295d8 	.word	0x000295d8

00022878 <CPtrList::GetFirst()>:
   22878:	e5900000 	ldr	r0, [r0]
   2287c:	e12fff1e 	bx	lr

00022880 <CPtrList::GetNext(TPtrListElement*)>:
   22880:	e92d4010 	push	{r4, lr}
   22884:	e2514000 	subs	r4, r1, #0
   22888:	0a000009 	beq	228b4 <CPtrList::GetNext(TPtrListElement*)+0x34>
   2288c:	e59f3034 	ldr	r3, [pc, #52]	; 228c8 <CPtrList::GetNext(TPtrListElement*)+0x48>
   22890:	e5942000 	ldr	r2, [r4]
   22894:	e1520003 	cmp	r2, r3
   22898:	0a000003 	beq	228ac <CPtrList::GetNext(TPtrListElement*)+0x2c>
   2289c:	e3a02035 	mov	r2, #53	; 0x35
   228a0:	e59f1024 	ldr	r1, [pc, #36]	; 228cc <CPtrList::GetNext(TPtrListElement*)+0x4c>
   228a4:	e59f0024 	ldr	r0, [pc, #36]	; 228d0 <CPtrList::GetNext(TPtrListElement*)+0x50>
   228a8:	ebffde29 	bl	1a154 <assertion_failed>
   228ac:	e5940008 	ldr	r0, [r4, #8]
   228b0:	e8bd8010 	pop	{r4, pc}
   228b4:	e3a02034 	mov	r2, #52	; 0x34
   228b8:	e59f100c 	ldr	r1, [pc, #12]	; 228cc <CPtrList::GetNext(TPtrListElement*)+0x4c>
   228bc:	e59f0010 	ldr	r0, [pc, #16]	; 228d4 <CPtrList::GetNext(TPtrListElement*)+0x54>
   228c0:	ebffde23 	bl	1a154 <assertion_failed>
   228c4:	eafffff0 	b	2288c <CPtrList::GetNext(TPtrListElement*)+0xc>
   228c8:	504c4d43 	.word	0x504c4d43
   228cc:	000295cc 	.word	0x000295cc
   228d0:	000295f8 	.word	0x000295f8
   228d4:	000295e8 	.word	0x000295e8

000228d8 <CPtrList::GetPtr(TPtrListElement*)>:
   228d8:	e92d4010 	push	{r4, lr}
   228dc:	e2514000 	subs	r4, r1, #0
   228e0:	0a000009 	beq	2290c <CPtrList::GetPtr(TPtrListElement*)+0x34>
   228e4:	e59f3034 	ldr	r3, [pc, #52]	; 22920 <CPtrList::GetPtr(TPtrListElement*)+0x48>
   228e8:	e5942000 	ldr	r2, [r4]
   228ec:	e1520003 	cmp	r2, r3
   228f0:	0a000003 	beq	22904 <CPtrList::GetPtr(TPtrListElement*)+0x2c>
   228f4:	e3a0203d 	mov	r2, #61	; 0x3d
   228f8:	e59f1024 	ldr	r1, [pc, #36]	; 22924 <CPtrList::GetPtr(TPtrListElement*)+0x4c>
   228fc:	e59f0024 	ldr	r0, [pc, #36]	; 22928 <CPtrList::GetPtr(TPtrListElement*)+0x50>
   22900:	ebffde13 	bl	1a154 <assertion_failed>
   22904:	e594000c 	ldr	r0, [r4, #12]
   22908:	e8bd8010 	pop	{r4, pc}
   2290c:	e3a0203c 	mov	r2, #60	; 0x3c
   22910:	e59f100c 	ldr	r1, [pc, #12]	; 22924 <CPtrList::GetPtr(TPtrListElement*)+0x4c>
   22914:	e59f0010 	ldr	r0, [pc, #16]	; 2292c <CPtrList::GetPtr(TPtrListElement*)+0x54>
   22918:	ebffde0d 	bl	1a154 <assertion_failed>
   2291c:	eafffff0 	b	228e4 <CPtrList::GetPtr(TPtrListElement*)+0xc>
   22920:	504c4d43 	.word	0x504c4d43
   22924:	000295cc 	.word	0x000295cc
   22928:	000295f8 	.word	0x000295f8
   2292c:	000295e8 	.word	0x000295e8

00022930 <CPtrList::InsertBefore(TPtrListElement*, void*)>:
   22930:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   22934:	e1a06000 	mov	r6, r0
   22938:	e3a00010 	mov	r0, #16
   2293c:	e1a07002 	mov	r7, r2
   22940:	e1a04001 	mov	r4, r1
   22944:	ebfffb96 	bl	217a4 <operator new(unsigned int)>
   22948:	e5962000 	ldr	r2, [r6]
   2294c:	e59f30c8 	ldr	r3, [pc, #200]	; 22a1c <CPtrList::InsertBefore(TPtrListElement*, void*)+0xec>
   22950:	e3520000 	cmp	r2, #0
   22954:	e1a05000 	mov	r5, r0
   22958:	e580700c 	str	r7, [r0, #12]
   2295c:	e5803000 	str	r3, [r0]
   22960:	0a000023 	beq	229f4 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xc4>
   22964:	e3540000 	cmp	r4, #0
   22968:	0a000026 	beq	22a08 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd8>
   2296c:	e59f30a8 	ldr	r3, [pc, #168]	; 22a1c <CPtrList::InsertBefore(TPtrListElement*, void*)+0xec>
   22970:	e5942000 	ldr	r2, [r4]
   22974:	e1520003 	cmp	r2, r3
   22978:	0a000003 	beq	2298c <CPtrList::InsertBefore(TPtrListElement*, void*)+0x5c>
   2297c:	e3a0204e 	mov	r2, #78	; 0x4e
   22980:	e59f1098 	ldr	r1, [pc, #152]	; 22a20 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf0>
   22984:	e59f0098 	ldr	r0, [pc, #152]	; 22a24 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf4>
   22988:	ebffddf1 	bl	1a154 <assertion_failed>
   2298c:	e5963000 	ldr	r3, [r6]
   22990:	e1540003 	cmp	r4, r3
   22994:	0a000010 	beq	229dc <CPtrList::InsertBefore(TPtrListElement*, void*)+0xac>
   22998:	e5943004 	ldr	r3, [r4, #4]
   2299c:	e5854008 	str	r4, [r5, #8]
   229a0:	e3530000 	cmp	r3, #0
   229a4:	e5853004 	str	r3, [r5, #4]
   229a8:	0a000009 	beq	229d4 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xa4>
   229ac:	e59f2068 	ldr	r2, [pc, #104]	; 22a1c <CPtrList::InsertBefore(TPtrListElement*, void*)+0xec>
   229b0:	e5931000 	ldr	r1, [r3]
   229b4:	e1510002 	cmp	r1, r2
   229b8:	0a000004 	beq	229d0 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xa0>
   229bc:	e3a02060 	mov	r2, #96	; 0x60
   229c0:	e59f1058 	ldr	r1, [pc, #88]	; 22a20 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf0>
   229c4:	e59f005c 	ldr	r0, [pc, #92]	; 22a28 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf8>
   229c8:	ebffdde1 	bl	1a154 <assertion_failed>
   229cc:	e5943004 	ldr	r3, [r4, #4]
   229d0:	e5835008 	str	r5, [r3, #8]
   229d4:	e5845004 	str	r5, [r4, #4]
   229d8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   229dc:	e3a03000 	mov	r3, #0
   229e0:	e5845004 	str	r5, [r4, #4]
   229e4:	e5854008 	str	r4, [r5, #8]
   229e8:	e5865000 	str	r5, [r6]
   229ec:	e5853004 	str	r3, [r5, #4]
   229f0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   229f4:	e3a0204c 	mov	r2, #76	; 0x4c
   229f8:	e59f1020 	ldr	r1, [pc, #32]	; 22a20 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf0>
   229fc:	e59f0028 	ldr	r0, [pc, #40]	; 22a2c <CPtrList::InsertBefore(TPtrListElement*, void*)+0xfc>
   22a00:	ebffddd3 	bl	1a154 <assertion_failed>
   22a04:	eaffffd6 	b	22964 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x34>
   22a08:	e3a0204d 	mov	r2, #77	; 0x4d
   22a0c:	e59f100c 	ldr	r1, [pc, #12]	; 22a20 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf0>
   22a10:	e59f0018 	ldr	r0, [pc, #24]	; 22a30 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x100>
   22a14:	ebffddce 	bl	1a154 <assertion_failed>
   22a18:	eaffffd3 	b	2296c <CPtrList::InsertBefore(TPtrListElement*, void*)+0x3c>
   22a1c:	504c4d43 	.word	0x504c4d43
   22a20:	000295cc 	.word	0x000295cc
   22a24:	00029638 	.word	0x00029638
   22a28:	0002965c 	.word	0x0002965c
   22a2c:	0002961c 	.word	0x0002961c
   22a30:	0002962c 	.word	0x0002962c

00022a34 <CPtrList::InsertAfter(TPtrListElement*, void*)>:
   22a34:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   22a38:	e1a06000 	mov	r6, r0
   22a3c:	e1a05001 	mov	r5, r1
   22a40:	e3a00010 	mov	r0, #16
   22a44:	e1a07002 	mov	r7, r2
   22a48:	ebfffb55 	bl	217a4 <operator new(unsigned int)>
   22a4c:	e59f30c0 	ldr	r3, [pc, #192]	; 22b14 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe0>
   22a50:	e3550000 	cmp	r5, #0
   22a54:	e5803000 	str	r3, [r0]
   22a58:	e1a04000 	mov	r4, r0
   22a5c:	e580700c 	str	r7, [r0, #12]
   22a60:	e5963000 	ldr	r3, [r6]
   22a64:	0a00001a 	beq	22ad4 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xa0>
   22a68:	e3530000 	cmp	r3, #0
   22a6c:	0a000023 	beq	22b00 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xcc>
   22a70:	e59f309c 	ldr	r3, [pc, #156]	; 22b14 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe0>
   22a74:	e5952000 	ldr	r2, [r5]
   22a78:	e1520003 	cmp	r2, r3
   22a7c:	0a000003 	beq	22a90 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x5c>
   22a80:	e3a0207e 	mov	r2, #126	; 0x7e
   22a84:	e59f108c 	ldr	r1, [pc, #140]	; 22b18 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe4>
   22a88:	e59f008c 	ldr	r0, [pc, #140]	; 22b1c <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe8>
   22a8c:	ebffddb0 	bl	1a154 <assertion_failed>
   22a90:	e5953008 	ldr	r3, [r5, #8]
   22a94:	e5845004 	str	r5, [r4, #4]
   22a98:	e3530000 	cmp	r3, #0
   22a9c:	e5843008 	str	r3, [r4, #8]
   22aa0:	0a000009 	beq	22acc <CPtrList::InsertAfter(TPtrListElement*, void*)+0x98>
   22aa4:	e59f2068 	ldr	r2, [pc, #104]	; 22b14 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe0>
   22aa8:	e5931000 	ldr	r1, [r3]
   22aac:	e1510002 	cmp	r1, r2
   22ab0:	0a000004 	beq	22ac8 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x94>
   22ab4:	e3a02085 	mov	r2, #133	; 0x85
   22ab8:	e59f1058 	ldr	r1, [pc, #88]	; 22b18 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe4>
   22abc:	e59f005c 	ldr	r0, [pc, #92]	; 22b20 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xec>
   22ac0:	ebffdda3 	bl	1a154 <assertion_failed>
   22ac4:	e5953008 	ldr	r3, [r5, #8]
   22ac8:	e5834004 	str	r4, [r3, #4]
   22acc:	e5854008 	str	r4, [r5, #8]
   22ad0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   22ad4:	e3530000 	cmp	r3, #0
   22ad8:	0a000003 	beq	22aec <CPtrList::InsertAfter(TPtrListElement*, void*)+0xb8>
   22adc:	e3a02074 	mov	r2, #116	; 0x74
   22ae0:	e59f1030 	ldr	r1, [pc, #48]	; 22b18 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe4>
   22ae4:	e59f0038 	ldr	r0, [pc, #56]	; 22b24 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xf0>
   22ae8:	ebffdd99 	bl	1a154 <assertion_failed>
   22aec:	e3a03000 	mov	r3, #0
   22af0:	e5864000 	str	r4, [r6]
   22af4:	e5843004 	str	r3, [r4, #4]
   22af8:	e5843008 	str	r3, [r4, #8]
   22afc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   22b00:	e3a0207d 	mov	r2, #125	; 0x7d
   22b04:	e59f100c 	ldr	r1, [pc, #12]	; 22b18 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe4>
   22b08:	e59f0018 	ldr	r0, [pc, #24]	; 22b28 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xf4>
   22b0c:	ebffdd90 	bl	1a154 <assertion_failed>
   22b10:	eaffffd6 	b	22a70 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x3c>
   22b14:	504c4d43 	.word	0x504c4d43
   22b18:	000295cc 	.word	0x000295cc
   22b1c:	00029684 	.word	0x00029684
   22b20:	000296a8 	.word	0x000296a8
   22b24:	000295d8 	.word	0x000295d8
   22b28:	0002961c 	.word	0x0002961c

00022b2c <CPtrList::Remove(TPtrListElement*)>:
   22b2c:	e92d4070 	push	{r4, r5, r6, lr}
   22b30:	e2514000 	subs	r4, r1, #0
   22b34:	e1a05000 	mov	r5, r0
   22b38:	0a00003c 	beq	22c30 <CPtrList::Remove(TPtrListElement*)+0x104>
   22b3c:	e59f3118 	ldr	r3, [pc, #280]	; 22c5c <CPtrList::Remove(TPtrListElement*)+0x130>
   22b40:	e5942000 	ldr	r2, [r4]
   22b44:	e1520003 	cmp	r2, r3
   22b48:	0a000003 	beq	22b5c <CPtrList::Remove(TPtrListElement*)+0x30>
   22b4c:	e3a02090 	mov	r2, #144	; 0x90
   22b50:	e59f1108 	ldr	r1, [pc, #264]	; 22c60 <CPtrList::Remove(TPtrListElement*)+0x134>
   22b54:	e59f0108 	ldr	r0, [pc, #264]	; 22c64 <CPtrList::Remove(TPtrListElement*)+0x138>
   22b58:	ebffdd7d 	bl	1a154 <assertion_failed>
   22b5c:	e5953000 	ldr	r3, [r5]
   22b60:	e1540003 	cmp	r4, r3
   22b64:	0a000021 	beq	22bf0 <CPtrList::Remove(TPtrListElement*)+0xc4>
   22b68:	e5943004 	ldr	r3, [r4, #4]
   22b6c:	e3530000 	cmp	r3, #0
   22b70:	0a000033 	beq	22c44 <CPtrList::Remove(TPtrListElement*)+0x118>
   22b74:	e59f20e0 	ldr	r2, [pc, #224]	; 22c5c <CPtrList::Remove(TPtrListElement*)+0x130>
   22b78:	e5931000 	ldr	r1, [r3]
   22b7c:	e1510002 	cmp	r1, r2
   22b80:	0a000004 	beq	22b98 <CPtrList::Remove(TPtrListElement*)+0x6c>
   22b84:	e3a0209f 	mov	r2, #159	; 0x9f
   22b88:	e59f10d0 	ldr	r1, [pc, #208]	; 22c60 <CPtrList::Remove(TPtrListElement*)+0x134>
   22b8c:	e59f00d4 	ldr	r0, [pc, #212]	; 22c68 <CPtrList::Remove(TPtrListElement*)+0x13c>
   22b90:	ebffdd6f 	bl	1a154 <assertion_failed>
   22b94:	e5943004 	ldr	r3, [r4, #4]
   22b98:	e5942008 	ldr	r2, [r4, #8]
   22b9c:	e5832008 	str	r2, [r3, #8]
   22ba0:	e5942008 	ldr	r2, [r4, #8]
   22ba4:	e3520000 	cmp	r2, #0
   22ba8:	0a00000a 	beq	22bd8 <CPtrList::Remove(TPtrListElement*)+0xac>
   22bac:	e59f10a8 	ldr	r1, [pc, #168]	; 22c5c <CPtrList::Remove(TPtrListElement*)+0x130>
   22bb0:	e5920000 	ldr	r0, [r2]
   22bb4:	e1500001 	cmp	r0, r1
   22bb8:	0a000005 	beq	22bd4 <CPtrList::Remove(TPtrListElement*)+0xa8>
   22bbc:	e3a020a4 	mov	r2, #164	; 0xa4
   22bc0:	e59f1098 	ldr	r1, [pc, #152]	; 22c60 <CPtrList::Remove(TPtrListElement*)+0x134>
   22bc4:	e59f00a0 	ldr	r0, [pc, #160]	; 22c6c <CPtrList::Remove(TPtrListElement*)+0x140>
   22bc8:	ebffdd61 	bl	1a154 <assertion_failed>
   22bcc:	e5942008 	ldr	r2, [r4, #8]
   22bd0:	e5943004 	ldr	r3, [r4, #4]
   22bd4:	e5823004 	str	r3, [r2, #4]
   22bd8:	e3a03000 	mov	r3, #0
   22bdc:	e1a00004 	mov	r0, r4
   22be0:	e5843000 	str	r3, [r4]
   22be4:	e3a01010 	mov	r1, #16
   22be8:	e8bd4070 	pop	{r4, r5, r6, lr}
   22bec:	eafffaf0 	b	217b4 <operator delete(void*, unsigned int)>
   22bf0:	e5943008 	ldr	r3, [r4, #8]
   22bf4:	e3530000 	cmp	r3, #0
   22bf8:	e5853000 	str	r3, [r5]
   22bfc:	0afffff5 	beq	22bd8 <CPtrList::Remove(TPtrListElement*)+0xac>
   22c00:	e59f2054 	ldr	r2, [pc, #84]	; 22c5c <CPtrList::Remove(TPtrListElement*)+0x130>
   22c04:	e5931000 	ldr	r1, [r3]
   22c08:	e1510002 	cmp	r1, r2
   22c0c:	0a000004 	beq	22c24 <CPtrList::Remove(TPtrListElement*)+0xf8>
   22c10:	e3a02098 	mov	r2, #152	; 0x98
   22c14:	e59f1044 	ldr	r1, [pc, #68]	; 22c60 <CPtrList::Remove(TPtrListElement*)+0x134>
   22c18:	e59f004c 	ldr	r0, [pc, #76]	; 22c6c <CPtrList::Remove(TPtrListElement*)+0x140>
   22c1c:	ebffdd4c 	bl	1a154 <assertion_failed>
   22c20:	e5943008 	ldr	r3, [r4, #8]
   22c24:	e3a02000 	mov	r2, #0
   22c28:	e5832004 	str	r2, [r3, #4]
   22c2c:	eaffffe9 	b	22bd8 <CPtrList::Remove(TPtrListElement*)+0xac>
   22c30:	e3a0208f 	mov	r2, #143	; 0x8f
   22c34:	e59f1024 	ldr	r1, [pc, #36]	; 22c60 <CPtrList::Remove(TPtrListElement*)+0x134>
   22c38:	e59f0030 	ldr	r0, [pc, #48]	; 22c70 <CPtrList::Remove(TPtrListElement*)+0x144>
   22c3c:	ebffdd44 	bl	1a154 <assertion_failed>
   22c40:	eaffffbd 	b	22b3c <CPtrList::Remove(TPtrListElement*)+0x10>
   22c44:	e3a0209e 	mov	r2, #158	; 0x9e
   22c48:	e59f1010 	ldr	r1, [pc, #16]	; 22c60 <CPtrList::Remove(TPtrListElement*)+0x134>
   22c4c:	e59f0020 	ldr	r0, [pc, #32]	; 22c74 <CPtrList::Remove(TPtrListElement*)+0x148>
   22c50:	ebffdd3f 	bl	1a154 <assertion_failed>
   22c54:	e5943004 	ldr	r3, [r4, #4]
   22c58:	eaffffc5 	b	22b74 <CPtrList::Remove(TPtrListElement*)+0x48>
   22c5c:	504c4d43 	.word	0x504c4d43
   22c60:	000295cc 	.word	0x000295cc
   22c64:	000295f8 	.word	0x000295f8
   22c68:	00029718 	.word	0x00029718
   22c6c:	000296d4 	.word	0x000296d4
   22c70:	000295e8 	.word	0x000295e8
   22c74:	00029700 	.word	0x00029700

00022c78 <CPtrList::Find(void*)>:
   22c78:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   22c7c:	e5904000 	ldr	r4, [r0]
   22c80:	e3540000 	cmp	r4, #0
   22c84:	0a000014 	beq	22cdc <CPtrList::Find(void*)+0x64>
   22c88:	e1a05001 	mov	r5, r1
   22c8c:	e3a090b3 	mov	r9, #179	; 0xb3
   22c90:	e59f6050 	ldr	r6, [pc, #80]	; 22ce8 <CPtrList::Find(void*)+0x70>
   22c94:	e59f8050 	ldr	r8, [pc, #80]	; 22cec <CPtrList::Find(void*)+0x74>
   22c98:	e59f7050 	ldr	r7, [pc, #80]	; 22cf0 <CPtrList::Find(void*)+0x78>
   22c9c:	ea000002 	b	22cac <CPtrList::Find(void*)+0x34>
   22ca0:	e5944008 	ldr	r4, [r4, #8]
   22ca4:	e3540000 	cmp	r4, #0
   22ca8:	0a00000b 	beq	22cdc <CPtrList::Find(void*)+0x64>
   22cac:	e5943000 	ldr	r3, [r4]
   22cb0:	e1530006 	cmp	r3, r6
   22cb4:	0a000003 	beq	22cc8 <CPtrList::Find(void*)+0x50>
   22cb8:	e1a02009 	mov	r2, r9
   22cbc:	e1a01008 	mov	r1, r8
   22cc0:	e1a00007 	mov	r0, r7
   22cc4:	ebffdd22 	bl	1a154 <assertion_failed>
   22cc8:	e594300c 	ldr	r3, [r4, #12]
   22ccc:	e1530005 	cmp	r3, r5
   22cd0:	1afffff2 	bne	22ca0 <CPtrList::Find(void*)+0x28>
   22cd4:	e1a00004 	mov	r0, r4
   22cd8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   22cdc:	e3a04000 	mov	r4, #0
   22ce0:	e1a00004 	mov	r0, r4
   22ce4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   22ce8:	504c4d43 	.word	0x504c4d43
   22cec:	000295cc 	.word	0x000295cc
   22cf0:	000295f8 	.word	0x000295f8
