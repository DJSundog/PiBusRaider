
kernel.elf:     file format elf32-littlearm


Disassembly of section .init:

00008000 <_start>:
    8000:	e10f0000 	mrs	r0, CPSR
    8004:	e220001a 	eor	r0, r0, #26
    8008:	e310001f 	tst	r0, #31
    800c:	e3c0001f 	bic	r0, r0, #31
    8010:	e38000d3 	orr	r0, r0, #211	; 0xd3
    8014:	1a000004 	bne	802c <_start+0x2c>
    8018:	e3800c01 	orr	r0, r0, #256	; 0x100
    801c:	e28fe00c 	add	lr, pc, #12
    8020:	e16ff000 	msr	SPSR_fsxc, r0
    8024:	e12ef30e 	.word	0xe12ef30e
    8028:	e160006e 	.word	0xe160006e
    802c:	e121f000 	msr	CPSR_c, r0
    8030:	e3a00000 	mov	r0, #0
    8034:	ee0c0f10 	mcr	15, 0, r0, cr12, cr0, {0}
    8038:	f1020011 	cps	#17
    803c:	e3a0d709 	mov	sp, #2359296	; 0x240000
    8040:	f1020012 	cps	#18
    8044:	e3a0d98e 	mov	sp, #2326528	; 0x238000
    8048:	f1020017 	cps	#23
    804c:	e3a0d823 	mov	sp, #2293760	; 0x230000
    8050:	f102001b 	cps	#27
    8054:	e3a0d823 	mov	sp, #2293760	; 0x230000
    8058:	f102001f 	cps	#31
    805c:	e3a0d98a 	mov	sp, #2260992	; 0x228000
    8060:	ea00227e 	b	10a60 <sysinit>

Disassembly of section .text:

00008068 <main>:
    8068:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    806c:	e24ddb97 	sub	sp, sp, #154624	; 0x25c00
    8070:	e24dd0c4 	sub	sp, sp, #196	; 0xc4
    8074:	e1a0000d 	mov	r0, sp
    8078:	eb000009 	bl	80a4 <CKernel::CKernel()>
    807c:	e1a0000d 	mov	r0, sp
    8080:	eb00003f 	bl	8184 <CKernel::Initialize()>
    8084:	e3500000 	cmp	r0, #0
    8088:	0a000004 	beq	80a0 <main+0x38>
    808c:	e1a0000d 	mov	r0, sp
    8090:	eb000080 	bl	8298 <CKernel::Run()>
    8094:	e3500002 	cmp	r0, #2
    8098:	1a000000 	bne	80a0 <main+0x38>
    809c:	eb002264 	bl	10a34 <reboot>
    80a0:	eb002260 	bl	10a28 <halt>

000080a4 <CKernel::CKernel()>:
    80a4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    80a8:	e1a04000 	mov	r4, r0
    80ac:	e3a01001 	mov	r1, #1
    80b0:	e280700c 	add	r7, r0, #12
    80b4:	e2845018 	add	r5, r4, #24
    80b8:	eb0028f6 	bl	12498 <CMemorySystem::CMemorySystem(bool)>
    80bc:	e1a00007 	mov	r0, r7
    80c0:	eb000a03 	bl	a8d4 <CActLED::CActLED()>
    80c4:	e2846e87 	add	r6, r4, #2160	; 0x870
    80c8:	e1a00005 	mov	r0, r5
    80cc:	eb001262 	bl	ca5c <CKernelOptions::CKernelOptions()>
    80d0:	e1a00006 	mov	r0, r6
    80d4:	eb000bb2 	bl	afa4 <CDeviceNameService::CDeviceNameService()>
    80d8:	e1a00005 	mov	r0, r5
    80dc:	eb001225 	bl	c978 <CKernelOptions::GetWidth() const>
    80e0:	e1a08000 	mov	r8, r0
    80e4:	e1a00005 	mov	r0, r5
    80e8:	eb001224 	bl	c980 <CKernelOptions::GetHeight() const>
    80ec:	e2845b82 	add	r5, r4, #133120	; 0x20800
    80f0:	e3a03000 	mov	r3, #0
    80f4:	e1a02000 	mov	r2, r0
    80f8:	e1a01008 	mov	r1, r8
    80fc:	e2860008 	add	r0, r6, #8
    8100:	eb0016a6 	bl	dba0 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool)>
    8104:	e2856f6b 	add	r6, r5, #428	; 0x1ac
    8108:	e2840e8d 	add	r0, r4, #2256	; 0x8d0
    810c:	e1a01006 	mov	r1, r6
    8110:	e3a02000 	mov	r2, #0
    8114:	e2800004 	add	r0, r0, #4
    8118:	eb001b55 	bl	ee74 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool)>
    811c:	e2855ffb 	add	r5, r5, #1004	; 0x3ec
    8120:	e1a00006 	mov	r0, r6
    8124:	eb00107e 	bl	c324 <CInterruptSystem::CInterruptSystem()>
    8128:	e2848b83 	add	r8, r4, #134144	; 0x20c00
    812c:	e1a01006 	mov	r1, r6
    8130:	e1a00005 	mov	r0, r5
    8134:	eb002283 	bl	10b48 <CTimer::CTimer(CInterruptSystem*)>
    8138:	e1a02005 	mov	r2, r5
    813c:	e3a01004 	mov	r1, #4
    8140:	e2880018 	add	r0, r8, #24
    8144:	eb00134a 	bl	ce74 <CLogger::CLogger(unsigned int, CTimer*)>
    8148:	e3a02000 	mov	r2, #0
    814c:	e2843802 	add	r3, r4, #131072	; 0x20000
    8150:	e5c32d10 	strb	r2, [r3, #3344]	; 0xd10
    8154:	e2880f45 	add	r0, r8, #276	; 0x114
    8158:	eb0003e5 	bl	90f4 <BusRaider::BusRaider()>
    815c:	e59fc01c 	ldr	ip, [pc, #28]	; 8180 <CKernel::CKernel()+0xdc>
    8160:	e1a00007 	mov	r0, r7
    8164:	e3a03f7d 	mov	r3, #500	; 0x1f4
    8168:	e3a020c8 	mov	r2, #200	; 0xc8
    816c:	e3a01005 	mov	r1, #5
    8170:	e58c4000 	str	r4, [ip]
    8174:	eb000a31 	bl	aa40 <CActLED::Blink(unsigned int, unsigned int, unsigned int)>
    8178:	e1a00004 	mov	r0, r4
    817c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8180:	00016668 	.word	0x00016668

00008184 <CKernel::Initialize()>:
    8184:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8188:	e2805b82 	add	r5, r0, #133120	; 0x20800
    818c:	e1a04000 	mov	r4, r0
    8190:	e2850f6b 	add	r0, r5, #428	; 0x1ac
    8194:	eb001075 	bl	c370 <CInterruptSystem::Initialize()>
    8198:	e3500000 	cmp	r0, #0
    819c:	1a000001 	bne	81a8 <CKernel::Initialize()+0x24>
    81a0:	e3a00000 	mov	r0, #0
    81a4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    81a8:	e2847e87 	add	r7, r4, #2160	; 0x870
    81ac:	e2870008 	add	r0, r7, #8
    81b0:	eb001a2b 	bl	ea64 <CScreenDevice::Initialize()>
    81b4:	e3500000 	cmp	r0, #0
    81b8:	0afffff8 	beq	81a0 <CKernel::Initialize()+0x1c>
    81bc:	e2846e8d 	add	r6, r4, #2256	; 0x8d0
    81c0:	e2866004 	add	r6, r6, #4
    81c4:	e1a00006 	mov	r0, r6
    81c8:	e59f1044 	ldr	r1, [pc, #68]	; 8214 <CKernel::Initialize()+0x90>
    81cc:	eb001b59 	bl	ef38 <CSerialDevice::Initialize(unsigned int)>
    81d0:	e3500000 	cmp	r0, #0
    81d4:	0afffff1 	beq	81a0 <CKernel::Initialize()+0x1c>
    81d8:	e2840018 	add	r0, r4, #24
    81dc:	eb0011e9 	bl	c988 <CKernelOptions::GetLogDevice() const>
    81e0:	e3a02000 	mov	r2, #0
    81e4:	e1a01000 	mov	r1, r0
    81e8:	e1a00007 	mov	r0, r7
    81ec:	eb000c16 	bl	b24c <CDeviceNameService::GetDevice(char const*, bool)>
    81f0:	e2840b83 	add	r0, r4, #134144	; 0x20c00
    81f4:	e1a01006 	mov	r1, r6
    81f8:	e2800018 	add	r0, r0, #24
    81fc:	eb001504 	bl	d614 <CLogger::Initialize(CDevice*)>
    8200:	e3500000 	cmp	r0, #0
    8204:	0affffe5 	beq	81a0 <CKernel::Initialize()+0x1c>
    8208:	e2850ffb 	add	r0, r5, #1004	; 0x3ec
    820c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    8210:	ea00252f 	b	116d4 <CTimer::Initialize()>
    8214:	0001c200 	.word	0x0001c200

00008218 <CKernel::~CKernel()>:
    8218:	e92d4070 	push	{r4, r5, r6, lr}
    821c:	e3a02000 	mov	r2, #0
    8220:	e1a04000 	mov	r4, r0
    8224:	e59f3068 	ldr	r3, [pc, #104]	; 8294 <CKernel::~CKernel()+0x7c>
    8228:	e2806b83 	add	r6, r0, #134144	; 0x20c00
    822c:	e2860f45 	add	r0, r6, #276	; 0x114
    8230:	e5832000 	str	r2, [r3]
    8234:	e2845b82 	add	r5, r4, #133120	; 0x20800
    8238:	eb0003bf 	bl	913c <BusRaider::~BusRaider()>
    823c:	e2860018 	add	r0, r6, #24
    8240:	eb001321 	bl	cecc <CLogger::~CLogger()>
    8244:	e2850ffb 	add	r0, r5, #1004	; 0x3ec
    8248:	eb002260 	bl	10bd0 <CTimer::~CTimer()>
    824c:	e2850f6b 	add	r0, r5, #428	; 0x1ac
    8250:	eb001041 	bl	c35c <CInterruptSystem::~CInterruptSystem()>
    8254:	e2840e8d 	add	r0, r4, #2256	; 0x8d0
    8258:	e2845e87 	add	r5, r4, #2160	; 0x870
    825c:	e2800004 	add	r0, r0, #4
    8260:	eb001d89 	bl	f88c <CSerialDevice::~CSerialDevice()>
    8264:	e2850008 	add	r0, r5, #8
    8268:	eb0015ff 	bl	da6c <CScreenDevice::~CScreenDevice()>
    826c:	e1a00005 	mov	r0, r5
    8270:	eb000b5e 	bl	aff0 <CDeviceNameService::~CDeviceNameService()>
    8274:	e2840018 	add	r0, r4, #24
    8278:	eb0011b9 	bl	c964 <CKernelOptions::~CKernelOptions()>
    827c:	e284000c 	add	r0, r4, #12
    8280:	eb000974 	bl	a858 <CActLED::~CActLED()>
    8284:	e1a00004 	mov	r0, r4
    8288:	eb00280e 	bl	122c8 <CMemorySystem::~CMemorySystem()>
    828c:	e1a00004 	mov	r0, r4
    8290:	e8bd8070 	pop	{r4, r5, r6, pc}
    8294:	00016668 	.word	0x00016668

00008298 <CKernel::Run()>:
    8298:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    829c:	e3a09000 	mov	r9, #0
    82a0:	e1a08009 	mov	r8, r9
    82a4:	e24ddb01 	sub	sp, sp, #1024	; 0x400
    82a8:	e24dd004 	sub	sp, sp, #4
    82ac:	e2803b83 	add	r3, r0, #134144	; 0x20c00
    82b0:	e2804b82 	add	r4, r0, #133120	; 0x20800
    82b4:	e2805e8d 	add	r5, r0, #2256	; 0x8d0
    82b8:	e58d3014 	str	r3, [sp, #20]
    82bc:	e59fb12c 	ldr	fp, [pc, #300]	; 83f0 <CKernel::Run()+0x158>
    82c0:	e2833018 	add	r3, r3, #24
    82c4:	e2844ffb 	add	r4, r4, #1004	; 0x3ec
    82c8:	e2855004 	add	r5, r5, #4
    82cc:	e58d3010 	str	r3, [sp, #16]
    82d0:	e1a00004 	mov	r0, r4
    82d4:	eb0022a8 	bl	10d7c <CTimer::GetTicks() const>
    82d8:	e3a06000 	mov	r6, #0
    82dc:	e59d3014 	ldr	r3, [sp, #20]
    82e0:	e2807f7d 	add	r7, r0, #500	; 0x1f4
    82e4:	e283af45 	add	sl, r3, #276	; 0x114
    82e8:	e3a02ffa 	mov	r2, #1000	; 0x3e8
    82ec:	e28d1018 	add	r1, sp, #24
    82f0:	e1a00005 	mov	r0, r5
    82f4:	eb001a6a 	bl	eca4 <CSerialDevice::Read(void*, unsigned int)>
    82f8:	e2503000 	subs	r3, r0, #0
    82fc:	da000005 	ble	8318 <CKernel::Run()+0x80>
    8300:	e1a02003 	mov	r2, r3
    8304:	e28d1018 	add	r1, sp, #24
    8308:	e1a0000a 	mov	r0, sl
    830c:	e0888003 	add	r8, r8, r3
    8310:	e0866003 	add	r6, r6, r3
    8314:	eb000399 	bl	9180 <BusRaider::handleSerialRxBuffer(unsigned char const*, int)>
    8318:	e1a00004 	mov	r0, r4
    831c:	eb002296 	bl	10d7c <CTimer::GetTicks() const>
    8320:	e1500007 	cmp	r0, r7
    8324:	9affffef 	bls	82e8 <CKernel::Run()+0x50>
    8328:	e28d0018 	add	r0, sp, #24
    832c:	eb001dc2 	bl	fa3c <CString::CString()>
    8330:	eb0015bf 	bl	da34 <CMachineInfo::Get()>
    8334:	e3a01002 	mov	r1, #2
    8338:	eb00155d 	bl	d8b4 <CMachineInfo::GetClockRate(unsigned int) const>
    833c:	e59d7010 	ldr	r7, [sp, #16]
    8340:	e59f30ac 	ldr	r3, [pc, #172]	; 83f4 <CKernel::Run()+0x15c>
    8344:	e58d0000 	str	r0, [sp]
    8348:	e3a02003 	mov	r2, #3
    834c:	e1a0100b 	mov	r1, fp
    8350:	e1a00007 	mov	r0, r7
    8354:	eb0014a2 	bl	d5e4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8358:	e59f3098 	ldr	r3, [pc, #152]	; 83f8 <CKernel::Run()+0x160>
    835c:	e3a02003 	mov	r2, #3
    8360:	e1a0100b 	mov	r1, fp
    8364:	e1a00007 	mov	r0, r7
    8368:	eb00149d 	bl	d5e4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    836c:	e1a00004 	mov	r0, r4
    8370:	eb002281 	bl	10d7c <CTimer::GetTicks() const>
    8374:	e2899001 	add	r9, r9, #1
    8378:	e3a03003 	mov	r3, #3
    837c:	e1a02009 	mov	r2, r9
    8380:	e59f1074 	ldr	r1, [pc, #116]	; 83fc <CKernel::Run()+0x164>
    8384:	e58d0008 	str	r0, [sp, #8]
    8388:	e88d0140 	stm	sp, {r6, r8}
    838c:	e28d0018 	add	r0, sp, #24
    8390:	eb002197 	bl	109f4 <CString::Format(char const*, ...)>
    8394:	e28d0018 	add	r0, sp, #24
    8398:	eb001dbd 	bl	fa94 <CString::operator char const*() const>
    839c:	e1a06000 	mov	r6, r0
    83a0:	e28d0018 	add	r0, sp, #24
    83a4:	eb001de8 	bl	fb4c <CString::GetLength() const>
    83a8:	e1a01006 	mov	r1, r6
    83ac:	e1a02000 	mov	r2, r0
    83b0:	e1a00005 	mov	r0, r5
    83b4:	eb001c36 	bl	f494 <CSerialDevice::Write(void const*, unsigned int)>
    83b8:	e28d0018 	add	r0, sp, #24
    83bc:	eb001d6b 	bl	f970 <CString::~CString()>
    83c0:	e3590003 	cmp	r9, #3
    83c4:	1affffc1 	bne	82d0 <CKernel::Run()+0x38>
    83c8:	e3a0200b 	mov	r2, #11
    83cc:	e59f102c 	ldr	r1, [pc, #44]	; 8400 <CKernel::Run()+0x168>
    83d0:	e1a00005 	mov	r0, r5
    83d4:	eb001c2e 	bl	f494 <CSerialDevice::Write(void const*, unsigned int)>
    83d8:	e3a00ffa 	mov	r0, #1000	; 0x3e8
    83dc:	eb0024f4 	bl	117b4 <CTimer::SimpleMsDelay(unsigned int)>
    83e0:	e3a00002 	mov	r0, #2
    83e4:	e28ddb01 	add	sp, sp, #1024	; 0x400
    83e8:	e28dd004 	add	sp, sp, #4
    83ec:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    83f0:	00013fc4 	.word	0x00013fc4
    83f4:	00013fcc 	.word	0x00013fcc
    83f8:	00013fdc 	.word	0x00013fdc
    83fc:	00013fe8 	.word	0x00013fe8
    8400:	0001402c 	.word	0x0001402c

00008404 <CRdSerialDevice::Read(void*, unsigned int)>:
    8404:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8408:	e2516000 	subs	r6, r1, #0
    840c:	e1a04000 	mov	r4, r0
    8410:	e1a05002 	mov	r5, r2
    8414:	0a000059 	beq	8580 <CRdSerialDevice::Read(void*, unsigned int)+0x17c>
    8418:	e59430a4 	ldr	r3, [r4, #164]	; 0xa4
    841c:	e3530000 	cmp	r3, #0
    8420:	0a000033 	beq	84f4 <CRdSerialDevice::Read(void*, unsigned int)+0xf0>
    8424:	e2847a01 	add	r7, r4, #4096	; 0x1000
    8428:	e59700d0 	ldr	r0, [r7, #208]	; 0xd0
    842c:	e3500000 	cmp	r0, #0
    8430:	1a00002a 	bne	84e0 <CRdSerialDevice::Read(void*, unsigned int)+0xdc>
    8434:	e59438b4 	ldr	r3, [r4, #2228]	; 0x8b4
    8438:	e3530000 	cmp	r3, #0
    843c:	ba00001f 	blt	84c0 <CRdSerialDevice::Read(void*, unsigned int)+0xbc>
    8440:	e3550000 	cmp	r5, #0
    8444:	0a000020 	beq	84cc <CRdSerialDevice::Read(void*, unsigned int)+0xc8>
    8448:	e59438ac 	ldr	r3, [r4, #2220]	; 0x8ac
    844c:	e59428b0 	ldr	r2, [r4, #2224]	; 0x8b0
    8450:	e1520003 	cmp	r2, r3
    8454:	0a000054 	beq	85ac <CRdSerialDevice::Read(void*, unsigned int)+0x1a8>
    8458:	e0862005 	add	r2, r6, r5
    845c:	e1a01006 	mov	r1, r6
    8460:	e59fc154 	ldr	ip, [pc, #340]	; 85bc <CRdSerialDevice::Read(void*, unsigned int)+0x1b8>
    8464:	ea000003 	b	8478 <CRdSerialDevice::Read(void*, unsigned int)+0x74>
    8468:	e59408ac 	ldr	r0, [r4, #2220]	; 0x8ac
    846c:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
    8470:	e1500003 	cmp	r0, r3
    8474:	0a000014 	beq	84cc <CRdSerialDevice::Read(void*, unsigned int)+0xc8>
    8478:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
    847c:	e2830001 	add	r0, r3, #1
    8480:	e58408b0 	str	r0, [r4, #2224]	; 0x8b0
    8484:	e0843003 	add	r3, r4, r3
    8488:	e5d330aa 	ldrb	r3, [r3, #170]	; 0xaa
    848c:	e4c13001 	strb	r3, [r1], #1
    8490:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
    8494:	e1510002 	cmp	r1, r2
    8498:	e003300c 	and	r3, r3, ip
    849c:	e58438b0 	str	r3, [r4, #2224]	; 0x8b0
    84a0:	e0415006 	sub	r5, r1, r6
    84a4:	1affffef 	bne	8468 <CRdSerialDevice::Read(void*, unsigned int)+0x64>
    84a8:	e59730d0 	ldr	r3, [r7, #208]	; 0xd0
    84ac:	e3530000 	cmp	r3, #0
    84b0:	0a000008 	beq	84d8 <CRdSerialDevice::Read(void*, unsigned int)+0xd4>
    84b4:	eb002897 	bl	12718 <LeaveCritical>
    84b8:	e1a00005 	mov	r0, r5
    84bc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    84c0:	e3a03000 	mov	r3, #0
    84c4:	e59458b4 	ldr	r5, [r4, #2228]	; 0x8b4
    84c8:	e58438b4 	str	r3, [r4, #2228]	; 0x8b4
    84cc:	e59730d0 	ldr	r3, [r7, #208]	; 0xd0
    84d0:	e3530000 	cmp	r3, #0
    84d4:	1afffff6 	bne	84b4 <CRdSerialDevice::Read(void*, unsigned int)+0xb0>
    84d8:	e1a00005 	mov	r0, r5
    84dc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    84e0:	eb00285f 	bl	12664 <EnterCritical>
    84e4:	e59438b4 	ldr	r3, [r4, #2228]	; 0x8b4
    84e8:	e3530000 	cmp	r3, #0
    84ec:	aaffffd3 	bge	8440 <CRdSerialDevice::Read(void*, unsigned int)+0x3c>
    84f0:	eafffff2 	b	84c0 <CRdSerialDevice::Read(void*, unsigned int)+0xbc>
    84f4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    84f8:	e3550000 	cmp	r5, #0
    84fc:	0a00001b 	beq	8570 <CRdSerialDevice::Read(void*, unsigned int)+0x16c>
    8500:	e59f00b8 	ldr	r0, [pc, #184]	; 85c0 <CRdSerialDevice::Read(void*, unsigned int)+0x1bc>
    8504:	e5902018 	ldr	r2, [r0, #24]
    8508:	e3120010 	tst	r2, #16
    850c:	1a000028 	bne	85b4 <CRdSerialDevice::Read(void*, unsigned int)+0x1b0>
    8510:	e5903000 	ldr	r3, [r0]
    8514:	e3130b01 	tst	r3, #1024	; 0x400
    8518:	1a00001d 	bne	8594 <CRdSerialDevice::Read(void*, unsigned int)+0x190>
    851c:	e3130b02 	tst	r3, #2048	; 0x800
    8520:	1a00001d 	bne	859c <CRdSerialDevice::Read(void*, unsigned int)+0x198>
    8524:	e3130c01 	tst	r3, #256	; 0x100
    8528:	00862005 	addeq	r2, r6, r5
    852c:	01a01006 	moveq	r1, r6
    8530:	0a00000a 	beq	8560 <CRdSerialDevice::Read(void*, unsigned int)+0x15c>
    8534:	ea00001a 	b	85a4 <CRdSerialDevice::Read(void*, unsigned int)+0x1a0>
    8538:	e5903018 	ldr	r3, [r0, #24]
    853c:	e3130010 	tst	r3, #16
    8540:	1a00000a 	bne	8570 <CRdSerialDevice::Read(void*, unsigned int)+0x16c>
    8544:	e5903000 	ldr	r3, [r0]
    8548:	e3130b01 	tst	r3, #1024	; 0x400
    854c:	1a000010 	bne	8594 <CRdSerialDevice::Read(void*, unsigned int)+0x190>
    8550:	e3130b02 	tst	r3, #2048	; 0x800
    8554:	1a000010 	bne	859c <CRdSerialDevice::Read(void*, unsigned int)+0x198>
    8558:	e3130c01 	tst	r3, #256	; 0x100
    855c:	1a000010 	bne	85a4 <CRdSerialDevice::Read(void*, unsigned int)+0x1a0>
    8560:	e4c13001 	strb	r3, [r1], #1
    8564:	e1510002 	cmp	r1, r2
    8568:	e0415006 	sub	r5, r1, r6
    856c:	1afffff1 	bne	8538 <CRdSerialDevice::Read(void*, unsigned int)+0x134>
    8570:	e3a03000 	mov	r3, #0
    8574:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    8578:	e1a00005 	mov	r0, r5
    857c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8580:	e59f203c 	ldr	r2, [pc, #60]	; 85c4 <CRdSerialDevice::Read(void*, unsigned int)+0x1c0>
    8584:	e59f103c 	ldr	r1, [pc, #60]	; 85c8 <CRdSerialDevice::Read(void*, unsigned int)+0x1c4>
    8588:	e59f003c 	ldr	r0, [pc, #60]	; 85cc <CRdSerialDevice::Read(void*, unsigned int)+0x1c8>
    858c:	eb000942 	bl	aa9c <assertion_failed>
    8590:	eaffffa0 	b	8418 <CRdSerialDevice::Read(void*, unsigned int)+0x14>
    8594:	e3e05000 	mvn	r5, #0
    8598:	eafffff4 	b	8570 <CRdSerialDevice::Read(void*, unsigned int)+0x16c>
    859c:	e3e05001 	mvn	r5, #1
    85a0:	eafffff2 	b	8570 <CRdSerialDevice::Read(void*, unsigned int)+0x16c>
    85a4:	e3e05002 	mvn	r5, #2
    85a8:	eafffff0 	b	8570 <CRdSerialDevice::Read(void*, unsigned int)+0x16c>
    85ac:	e3a05000 	mov	r5, #0
    85b0:	eaffffc5 	b	84cc <CRdSerialDevice::Read(void*, unsigned int)+0xc8>
    85b4:	e1a05003 	mov	r5, r3
    85b8:	eaffffec 	b	8570 <CRdSerialDevice::Read(void*, unsigned int)+0x16c>
    85bc:	000007ff 	.word	0x000007ff
    85c0:	20201000 	.word	0x20201000
    85c4:	00000101 	.word	0x00000101
    85c8:	00014054 	.word	0x00014054
    85cc:	00014068 	.word	0x00014068

000085d0 <CRdSerialDevice::CRdSerialDevice(CInterruptSystem*, bool)>:
    85d0:	e92d4070 	push	{r4, r5, r6, lr}
    85d4:	e1a04000 	mov	r4, r0
    85d8:	e1a05002 	mov	r5, r2
    85dc:	e1a06001 	mov	r6, r1
    85e0:	eb000a6b 	bl	af94 <CDevice::CDevice()>
    85e4:	e1a00004 	mov	r0, r4
    85e8:	e3a03000 	mov	r3, #0
    85ec:	e59f1098 	ldr	r1, [pc, #152]	; 868c <CRdSerialDevice::CRdSerialDevice(CInterruptSystem*, bool)+0xbc>
    85f0:	e1a02003 	mov	r2, r3
    85f4:	e4801004 	str	r1, [r0], #4
    85f8:	e3a01020 	mov	r1, #32
    85fc:	eb000ed2 	bl	c14c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    8600:	e3a03000 	mov	r3, #0
    8604:	e284002c 	add	r0, r4, #44	; 0x2c
    8608:	e1a02003 	mov	r2, r3
    860c:	e3a01021 	mov	r1, #33	; 0x21
    8610:	eb000ecd 	bl	c14c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    8614:	e2840054 	add	r0, r4, #84	; 0x54
    8618:	e3a03000 	mov	r3, #0
    861c:	e3a02004 	mov	r2, #4
    8620:	e3a0100e 	mov	r1, #14
    8624:	eb000ec8 	bl	c14c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    8628:	e284007c 	add	r0, r4, #124	; 0x7c
    862c:	e3a03000 	mov	r3, #0
    8630:	e3a02004 	mov	r2, #4
    8634:	e3a0100f 	mov	r1, #15
    8638:	eb000ec3 	bl	c14c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    863c:	e3550000 	cmp	r5, #0
    8640:	e3a03000 	mov	r3, #0
    8644:	e3a01001 	mov	r1, #1
    8648:	13a0c002 	movne	ip, #2
    864c:	03a0c001 	moveq	ip, #1
    8650:	e2842a01 	add	r2, r4, #4096	; 0x1000
    8654:	e58438ac 	str	r3, [r4, #2220]	; 0x8ac
    8658:	e58460a4 	str	r6, [r4, #164]	; 0xa4
    865c:	e58438b0 	str	r3, [r4, #2224]	; 0x8b0
    8660:	e5c450a8 	strb	r5, [r4, #168]	; 0xa8
    8664:	e5c430a9 	strb	r3, [r4, #169]	; 0xa9
    8668:	e58438b4 	str	r3, [r4, #2228]	; 0x8b4
    866c:	e1a00004 	mov	r0, r4
    8670:	e58230b8 	str	r3, [r2, #184]	; 0xb8
    8674:	e582c0d0 	str	ip, [r2, #208]	; 0xd0
    8678:	e58230c4 	str	r3, [r2, #196]	; 0xc4
    867c:	e58230bc 	str	r3, [r2, #188]	; 0xbc
    8680:	e58210c0 	str	r1, [r2, #192]	; 0xc0
    8684:	e58210d4 	str	r1, [r2, #212]	; 0xd4
    8688:	e8bd8070 	pop	{r4, r5, r6, pc}
    868c:	00014040 	.word	0x00014040

00008690 <CRdSerialDevice::Initialize(unsigned int)>:
    8690:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8694:	e1a08001 	mov	r8, r1
    8698:	e1a04000 	mov	r4, r0
    869c:	eb0014e4 	bl	da34 <CMachineInfo::Get()>
    86a0:	e3a01002 	mov	r1, #2
    86a4:	eb001482 	bl	d8b4 <CMachineInfo::GetClockRate(unsigned int) const>
    86a8:	e2505000 	subs	r5, r0, #0
    86ac:	e2487f4b 	sub	r7, r8, #300	; 0x12c
    86b0:	e1a06208 	lsl	r6, r8, #4
    86b4:	0a000045 	beq	87d0 <CRdSerialDevice::Initialize(unsigned int)+0x140>
    86b8:	e59f3158 	ldr	r3, [pc, #344]	; 8818 <CRdSerialDevice::Initialize(unsigned int)+0x188>
    86bc:	e1570003 	cmp	r7, r3
    86c0:	8a00003d 	bhi	87bc <CRdSerialDevice::Initialize(unsigned int)+0x12c>
    86c4:	e1a01006 	mov	r1, r6
    86c8:	e1a00005 	mov	r0, r5
    86cc:	eb00081b 	bl	a740 <__udivsi3>
    86d0:	e59f3144 	ldr	r3, [pc, #324]	; 881c <CRdSerialDevice::Initialize(unsigned int)+0x18c>
    86d4:	e2402001 	sub	r2, r0, #1
    86d8:	e1520003 	cmp	r2, r3
    86dc:	e1a07000 	mov	r7, r0
    86e0:	8a000042 	bhi	87f0 <CRdSerialDevice::Initialize(unsigned int)+0x160>
    86e4:	e1a00005 	mov	r0, r5
    86e8:	e1a01006 	mov	r1, r6
    86ec:	eb000850 	bl	a834 <__aeabi_uidivmod>
    86f0:	e1a00181 	lsl	r0, r1, #3
    86f4:	e1a01008 	mov	r1, r8
    86f8:	eb000810 	bl	a740 <__udivsi3>
    86fc:	e2005001 	and	r5, r0, #1
    8700:	e08550a0 	add	r5, r5, r0, lsr #1
    8704:	e355003f 	cmp	r5, #63	; 0x3f
    8708:	8a00003d 	bhi	8804 <CRdSerialDevice::Initialize(unsigned int)+0x174>
    870c:	e59400a4 	ldr	r0, [r4, #164]	; 0xa4
    8710:	e3500000 	cmp	r0, #0
    8714:	0a000008 	beq	873c <CRdSerialDevice::Initialize(unsigned int)+0xac>
    8718:	e5d430a8 	ldrb	r3, [r4, #168]	; 0xa8
    871c:	e59f20fc 	ldr	r2, [pc, #252]	; 8820 <CRdSerialDevice::Initialize(unsigned int)+0x190>
    8720:	e3530000 	cmp	r3, #0
    8724:	e3a01039 	mov	r1, #57	; 0x39
    8728:	e1a03004 	mov	r3, r4
    872c:	0a000020 	beq	87b4 <CRdSerialDevice::Initialize(unsigned int)+0x124>
    8730:	eb000fd6 	bl	c690 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>
    8734:	e3a03001 	mov	r3, #1
    8738:	e5c430a9 	strb	r3, [r4, #169]	; 0xa9
    873c:	e3a02000 	mov	r2, #0
    8740:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
    8744:	e59f30d8 	ldr	r3, [pc, #216]	; 8824 <CRdSerialDevice::Initialize(unsigned int)+0x194>
    8748:	e59f10d8 	ldr	r1, [pc, #216]	; 8828 <CRdSerialDevice::Initialize(unsigned int)+0x198>
    874c:	e5832038 	str	r2, [r3, #56]	; 0x38
    8750:	e5831044 	str	r1, [r3, #68]	; 0x44
    8754:	e5837024 	str	r7, [r3, #36]	; 0x24
    8758:	e5835028 	str	r5, [r3, #40]	; 0x28
    875c:	e59420a4 	ldr	r2, [r4, #164]	; 0xa4
    8760:	e3a05000 	mov	r5, #0
    8764:	e3520000 	cmp	r2, #0
    8768:	13a02e45 	movne	r2, #1104	; 0x450
    876c:	03a02060 	moveq	r2, #96	; 0x60
    8770:	13a00009 	movne	r0, #9
    8774:	13a01070 	movne	r1, #112	; 0x70
    8778:	15830034 	strne	r0, [r3, #52]	; 0x34
    877c:	0583202c 	streq	r2, [r3, #44]	; 0x2c
    8780:	1583102c 	strne	r1, [r3, #44]	; 0x2c
    8784:	15832038 	strne	r2, [r3, #56]	; 0x38
    8788:	e59f3094 	ldr	r3, [pc, #148]	; 8824 <CRdSerialDevice::Initialize(unsigned int)+0x194>
    878c:	e59f2098 	ldr	r2, [pc, #152]	; 882c <CRdSerialDevice::Initialize(unsigned int)+0x19c>
    8790:	e5832030 	str	r2, [r3, #48]	; 0x30
    8794:	ee075fba 	mcr	15, 0, r5, cr7, cr10, {5}
    8798:	eb000aee 	bl	b358 <CDeviceNameService::Get()>
    879c:	e1a03005 	mov	r3, r5
    87a0:	e1a02004 	mov	r2, r4
    87a4:	e59f1084 	ldr	r1, [pc, #132]	; 8830 <CRdSerialDevice::Initialize(unsigned int)+0x1a0>
    87a8:	eb000a2a 	bl	b058 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
    87ac:	e3a00001 	mov	r0, #1
    87b0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    87b4:	eb000f48 	bl	c4dc <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    87b8:	eaffffdd 	b	8734 <CRdSerialDevice::Initialize(unsigned int)+0xa4>
    87bc:	e3a0208c 	mov	r2, #140	; 0x8c
    87c0:	e59f106c 	ldr	r1, [pc, #108]	; 8834 <CRdSerialDevice::Initialize(unsigned int)+0x1a4>
    87c4:	e59f006c 	ldr	r0, [pc, #108]	; 8838 <CRdSerialDevice::Initialize(unsigned int)+0x1a8>
    87c8:	eb0008b3 	bl	aa9c <assertion_failed>
    87cc:	eaffffbc 	b	86c4 <CRdSerialDevice::Initialize(unsigned int)+0x34>
    87d0:	e3a0208a 	mov	r2, #138	; 0x8a
    87d4:	e59f1058 	ldr	r1, [pc, #88]	; 8834 <CRdSerialDevice::Initialize(unsigned int)+0x1a4>
    87d8:	e59f005c 	ldr	r0, [pc, #92]	; 883c <CRdSerialDevice::Initialize(unsigned int)+0x1ac>
    87dc:	eb0008ae 	bl	aa9c <assertion_failed>
    87e0:	e59f3030 	ldr	r3, [pc, #48]	; 8818 <CRdSerialDevice::Initialize(unsigned int)+0x188>
    87e4:	e1570003 	cmp	r7, r3
    87e8:	91a07005 	movls	r7, r5
    87ec:	8afffff2 	bhi	87bc <CRdSerialDevice::Initialize(unsigned int)+0x12c>
    87f0:	e3a0208f 	mov	r2, #143	; 0x8f
    87f4:	e59f1038 	ldr	r1, [pc, #56]	; 8834 <CRdSerialDevice::Initialize(unsigned int)+0x1a4>
    87f8:	e59f0040 	ldr	r0, [pc, #64]	; 8840 <CRdSerialDevice::Initialize(unsigned int)+0x1b0>
    87fc:	eb0008a6 	bl	aa9c <assertion_failed>
    8800:	eaffffb7 	b	86e4 <CRdSerialDevice::Initialize(unsigned int)+0x54>
    8804:	e3a02092 	mov	r2, #146	; 0x92
    8808:	e59f1024 	ldr	r1, [pc, #36]	; 8834 <CRdSerialDevice::Initialize(unsigned int)+0x1a4>
    880c:	e59f0030 	ldr	r0, [pc, #48]	; 8844 <CRdSerialDevice::Initialize(unsigned int)+0x1b4>
    8810:	eb0008a1 	bl	aa9c <assertion_failed>
    8814:	eaffffbc 	b	870c <CRdSerialDevice::Initialize(unsigned int)+0x7c>
    8818:	003d07d4 	.word	0x003d07d4
    881c:	0000fffe 	.word	0x0000fffe
    8820:	00008fa0 	.word	0x00008fa0
    8824:	20201000 	.word	0x20201000
    8828:	000007ff 	.word	0x000007ff
    882c:	00000301 	.word	0x00000301
    8830:	000140e8 	.word	0x000140e8
    8834:	00014054 	.word	0x00014054
    8838:	00014084 	.word	0x00014084
    883c:	00014074 	.word	0x00014074
    8840:	000140b0 	.word	0x000140b0
    8844:	000140d4 	.word	0x000140d4

00008848 <CRdSerialDevice::GetOptions() const>:
    8848:	e2800a01 	add	r0, r0, #4096	; 0x1000
    884c:	e59000c0 	ldr	r0, [r0, #192]	; 0xc0
    8850:	e12fff1e 	bx	lr

00008854 <CRdSerialDevice::SetOptions(unsigned int)>:
    8854:	e2800a01 	add	r0, r0, #4096	; 0x1000
    8858:	e58010c0 	str	r1, [r0, #192]	; 0xc0
    885c:	e12fff1e 	bx	lr

00008860 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())>:
    8860:	e92d4070 	push	{r4, r5, r6, lr}
    8864:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
    8868:	e1a04000 	mov	r4, r0
    886c:	e3530000 	cmp	r3, #0
    8870:	e1a05001 	mov	r5, r1
    8874:	e1a06002 	mov	r6, r2
    8878:	0a00001d 	beq	88f4 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x94>
    887c:	e2844a01 	add	r4, r4, #4096	; 0x1000
    8880:	e59430c4 	ldr	r3, [r4, #196]	; 0xc4
    8884:	e3530000 	cmp	r3, #0
    8888:	0a000003 	beq	889c <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x3c>
    888c:	e59f2088 	ldr	r2, [pc, #136]	; 891c <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xbc>
    8890:	e59f1088 	ldr	r1, [pc, #136]	; 8920 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc0>
    8894:	e59f0088 	ldr	r0, [pc, #136]	; 8924 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc4>
    8898:	eb00087f 	bl	aa9c <assertion_failed>
    889c:	e3550000 	cmp	r5, #0
    88a0:	0a000018 	beq	8908 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xa8>
    88a4:	e1d530d0 	ldrsb	r3, [r5]
    88a8:	e3530000 	cmp	r3, #0
    88ac:	0a000005 	beq	88c8 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x68>
    88b0:	e3560000 	cmp	r6, #0
    88b4:	0a000009 	beq	88e0 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x80>
    88b8:	e58460cc 	str	r6, [r4, #204]	; 0xcc
    88bc:	e58450c8 	str	r5, [r4, #200]	; 0xc8
    88c0:	e58450c4 	str	r5, [r4, #196]	; 0xc4
    88c4:	e8bd8070 	pop	{r4, r5, r6, pc}
    88c8:	e3a02f57 	mov	r2, #348	; 0x15c
    88cc:	e59f104c 	ldr	r1, [pc, #76]	; 8920 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc0>
    88d0:	e59f0050 	ldr	r0, [pc, #80]	; 8928 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc8>
    88d4:	eb000870 	bl	aa9c <assertion_failed>
    88d8:	e3560000 	cmp	r6, #0
    88dc:	1afffff5 	bne	88b8 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x58>
    88e0:	e59f2044 	ldr	r2, [pc, #68]	; 892c <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xcc>
    88e4:	e59f1034 	ldr	r1, [pc, #52]	; 8920 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc0>
    88e8:	e59f0040 	ldr	r0, [pc, #64]	; 8930 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xd0>
    88ec:	eb00086a 	bl	aa9c <assertion_failed>
    88f0:	eafffff0 	b	88b8 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x58>
    88f4:	e3a02f56 	mov	r2, #344	; 0x158
    88f8:	e59f1020 	ldr	r1, [pc, #32]	; 8920 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc0>
    88fc:	e59f0030 	ldr	r0, [pc, #48]	; 8934 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xd4>
    8900:	eb000865 	bl	aa9c <assertion_failed>
    8904:	eaffffdc 	b	887c <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x1c>
    8908:	e59f2028 	ldr	r2, [pc, #40]	; 8938 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xd8>
    890c:	e59f100c 	ldr	r1, [pc, #12]	; 8920 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc0>
    8910:	e59f0024 	ldr	r0, [pc, #36]	; 893c <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xdc>
    8914:	eb000860 	bl	aa9c <assertion_failed>
    8918:	eaffffe1 	b	88a4 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x44>
    891c:	00000159 	.word	0x00000159
    8920:	00014054 	.word	0x00014054
    8924:	00014108 	.word	0x00014108
    8928:	00014124 	.word	0x00014124
    892c:	0000015d 	.word	0x0000015d
    8930:	00014bc8 	.word	0x00014bc8
    8934:	000140f0 	.word	0x000140f0
    8938:	0000015b 	.word	0x0000015b
    893c:	00014118 	.word	0x00014118

00008940 <CRdSerialDevice::AvailableForWrite()>:
    8940:	e92d4010 	push	{r4, lr}
    8944:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
    8948:	e1a04000 	mov	r4, r0
    894c:	e3530000 	cmp	r3, #0
    8950:	0a000014 	beq	89a8 <CRdSerialDevice::AvailableForWrite()+0x68>
    8954:	e2844a01 	add	r4, r4, #4096	; 0x1000
    8958:	e59400d0 	ldr	r0, [r4, #208]	; 0xd0
    895c:	e3500000 	cmp	r0, #0
    8960:	1a00000d 	bne	899c <CRdSerialDevice::AvailableForWrite()+0x5c>
    8964:	e59420bc 	ldr	r2, [r4, #188]	; 0xbc
    8968:	e59430b8 	ldr	r3, [r4, #184]	; 0xb8
    896c:	e1520003 	cmp	r2, r3
    8970:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    8974:	e59420b8 	ldr	r2, [r4, #184]	; 0xb8
    8978:	92834e7f 	addls	r4, r3, #2032	; 0x7f0
    897c:	9284400f 	addls	r4, r4, #15
    8980:	82434001 	subhi	r4, r3, #1
    8984:	e3500000 	cmp	r0, #0
    8988:	e0444002 	sub	r4, r4, r2
    898c:	0a000000 	beq	8994 <CRdSerialDevice::AvailableForWrite()+0x54>
    8990:	eb002760 	bl	12718 <LeaveCritical>
    8994:	e1a00004 	mov	r0, r4
    8998:	e8bd8010 	pop	{r4, pc}
    899c:	eb002730 	bl	12664 <EnterCritical>
    89a0:	e59400d0 	ldr	r0, [r4, #208]	; 0xd0
    89a4:	eaffffee 	b	8964 <CRdSerialDevice::AvailableForWrite()+0x24>
    89a8:	e59f200c 	ldr	r2, [pc, #12]	; 89bc <CRdSerialDevice::AvailableForWrite()+0x7c>
    89ac:	e59f100c 	ldr	r1, [pc, #12]	; 89c0 <CRdSerialDevice::AvailableForWrite()+0x80>
    89b0:	e59f000c 	ldr	r0, [pc, #12]	; 89c4 <CRdSerialDevice::AvailableForWrite()+0x84>
    89b4:	eb000838 	bl	aa9c <assertion_failed>
    89b8:	eaffffe5 	b	8954 <CRdSerialDevice::AvailableForWrite()+0x14>
    89bc:	00000167 	.word	0x00000167
    89c0:	00014054 	.word	0x00014054
    89c4:	000140f0 	.word	0x000140f0

000089c8 <CRdSerialDevice::AvailableForRead()>:
    89c8:	e92d4070 	push	{r4, r5, r6, lr}
    89cc:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
    89d0:	e1a04000 	mov	r4, r0
    89d4:	e3530000 	cmp	r3, #0
    89d8:	0a000014 	beq	8a30 <CRdSerialDevice::AvailableForRead()+0x68>
    89dc:	e2845a01 	add	r5, r4, #4096	; 0x1000
    89e0:	e59500d0 	ldr	r0, [r5, #208]	; 0xd0
    89e4:	e3500000 	cmp	r0, #0
    89e8:	1a00000d 	bne	8a24 <CRdSerialDevice::AvailableForRead()+0x5c>
    89ec:	e59428ac 	ldr	r2, [r4, #2220]	; 0x8ac
    89f0:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
    89f4:	e1520003 	cmp	r2, r3
    89f8:	e59438ac 	ldr	r3, [r4, #2220]	; 0x8ac
    89fc:	359428b0 	ldrcc	r2, [r4, #2224]	; 0x8b0
    8a00:	259448b0 	ldrcs	r4, [r4, #2224]	; 0x8b0
    8a04:	32834b02 	addcc	r4, r3, #2048	; 0x800
    8a08:	30444002 	subcc	r4, r4, r2
    8a0c:	20434004 	subcs	r4, r3, r4
    8a10:	e3500000 	cmp	r0, #0
    8a14:	0a000000 	beq	8a1c <CRdSerialDevice::AvailableForRead()+0x54>
    8a18:	eb00273e 	bl	12718 <LeaveCritical>
    8a1c:	e1a00004 	mov	r0, r4
    8a20:	e8bd8070 	pop	{r4, r5, r6, pc}
    8a24:	eb00270e 	bl	12664 <EnterCritical>
    8a28:	e59500d0 	ldr	r0, [r5, #208]	; 0xd0
    8a2c:	eaffffee 	b	89ec <CRdSerialDevice::AvailableForRead()+0x24>
    8a30:	e3a02f5f 	mov	r2, #380	; 0x17c
    8a34:	e59f1008 	ldr	r1, [pc, #8]	; 8a44 <CRdSerialDevice::AvailableForRead()+0x7c>
    8a38:	e59f0008 	ldr	r0, [pc, #8]	; 8a48 <CRdSerialDevice::AvailableForRead()+0x80>
    8a3c:	eb000816 	bl	aa9c <assertion_failed>
    8a40:	eaffffe5 	b	89dc <CRdSerialDevice::AvailableForRead()+0x14>
    8a44:	00014054 	.word	0x00014054
    8a48:	000140f0 	.word	0x000140f0

00008a4c <CRdSerialDevice::Peek()>:
    8a4c:	e92d4070 	push	{r4, r5, r6, lr}
    8a50:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
    8a54:	e1a04000 	mov	r4, r0
    8a58:	e3530000 	cmp	r3, #0
    8a5c:	0a00001b 	beq	8ad0 <CRdSerialDevice::Peek()+0x84>
    8a60:	e2845a01 	add	r5, r4, #4096	; 0x1000
    8a64:	e59500d0 	ldr	r0, [r5, #208]	; 0xd0
    8a68:	e3500000 	cmp	r0, #0
    8a6c:	1a000008 	bne	8a94 <CRdSerialDevice::Peek()+0x48>
    8a70:	e59428ac 	ldr	r2, [r4, #2220]	; 0x8ac
    8a74:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
    8a78:	e1520003 	cmp	r2, r3
    8a7c:	0a000018 	beq	8ae4 <CRdSerialDevice::Peek()+0x98>
    8a80:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
    8a84:	e0844003 	add	r4, r4, r3
    8a88:	e5d440aa 	ldrb	r4, [r4, #170]	; 0xaa
    8a8c:	e1a00004 	mov	r0, r4
    8a90:	e8bd8070 	pop	{r4, r5, r6, pc}
    8a94:	eb0026f2 	bl	12664 <EnterCritical>
    8a98:	e59428ac 	ldr	r2, [r4, #2220]	; 0x8ac
    8a9c:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
    8aa0:	e1520003 	cmp	r2, r3
    8aa4:	159438b0 	ldrne	r3, [r4, #2224]	; 0x8b0
    8aa8:	059520d0 	ldreq	r2, [r5, #208]	; 0xd0
    8aac:	159520d0 	ldrne	r2, [r5, #208]	; 0xd0
    8ab0:	10844003 	addne	r4, r4, r3
    8ab4:	03e04000 	mvneq	r4, #0
    8ab8:	15d440aa 	ldrbne	r4, [r4, #170]	; 0xaa
    8abc:	e3520000 	cmp	r2, #0
    8ac0:	0afffff1 	beq	8a8c <CRdSerialDevice::Peek()+0x40>
    8ac4:	eb002713 	bl	12718 <LeaveCritical>
    8ac8:	e1a00004 	mov	r0, r4
    8acc:	e8bd8070 	pop	{r4, r5, r6, pc}
    8ad0:	e59f2014 	ldr	r2, [pc, #20]	; 8aec <CRdSerialDevice::Peek()+0xa0>
    8ad4:	e59f1014 	ldr	r1, [pc, #20]	; 8af0 <CRdSerialDevice::Peek()+0xa4>
    8ad8:	e59f0014 	ldr	r0, [pc, #20]	; 8af4 <CRdSerialDevice::Peek()+0xa8>
    8adc:	eb0007ee 	bl	aa9c <assertion_failed>
    8ae0:	eaffffde 	b	8a60 <CRdSerialDevice::Peek()+0x14>
    8ae4:	e3e04000 	mvn	r4, #0
    8ae8:	eaffffe7 	b	8a8c <CRdSerialDevice::Peek()+0x40>
    8aec:	00000191 	.word	0x00000191
    8af0:	00014054 	.word	0x00014054
    8af4:	000140f0 	.word	0x000140f0

00008af8 <CRdSerialDevice::Flush()>:
    8af8:	e3a03000 	mov	r3, #0
    8afc:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    8b00:	e59f2010 	ldr	r2, [pc, #16]	; 8b18 <CRdSerialDevice::Flush()+0x20>
    8b04:	e5923018 	ldr	r3, [r2, #24]
    8b08:	e2133008 	ands	r3, r3, #8
    8b0c:	1afffffc 	bne	8b04 <CRdSerialDevice::Flush()+0xc>
    8b10:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    8b14:	e12fff1e 	bx	lr
    8b18:	20201000 	.word	0x20201000

00008b1c <CRdSerialDevice::Write(unsigned char)>:
    8b1c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8b20:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
    8b24:	e3530000 	cmp	r3, #0
    8b28:	0a000027 	beq	8bcc <CRdSerialDevice::Write(unsigned char)+0xb0>
    8b2c:	e2805a01 	add	r5, r0, #4096	; 0x1000
    8b30:	e59520d0 	ldr	r2, [r5, #208]	; 0xd0
    8b34:	e1a06001 	mov	r6, r1
    8b38:	e3520000 	cmp	r2, #0
    8b3c:	e1a04000 	mov	r4, r0
    8b40:	1a000015 	bne	8b9c <CRdSerialDevice::Write(unsigned char)+0x80>
    8b44:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
    8b48:	e59510bc 	ldr	r1, [r5, #188]	; 0xbc
    8b4c:	e2833001 	add	r3, r3, #1
    8b50:	e1a03a83 	lsl	r3, r3, #21
    8b54:	e1a03aa3 	lsr	r3, r3, #21
    8b58:	e1530001 	cmp	r3, r1
    8b5c:	0a000024 	beq	8bf4 <CRdSerialDevice::Write(unsigned char)+0xd8>
    8b60:	e3a07001 	mov	r7, #1
    8b64:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
    8b68:	e0840003 	add	r0, r4, r3
    8b6c:	e0833007 	add	r3, r3, r7
    8b70:	e58530b8 	str	r3, [r5, #184]	; 0xb8
    8b74:	e5c068b8 	strb	r6, [r0, #2232]	; 0x8b8
    8b78:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
    8b7c:	e1a03a83 	lsl	r3, r3, #21
    8b80:	e1a03aa3 	lsr	r3, r3, #21
    8b84:	e58530b8 	str	r3, [r5, #184]	; 0xb8
    8b88:	e3520000 	cmp	r2, #0
    8b8c:	0a000000 	beq	8b94 <CRdSerialDevice::Write(unsigned char)+0x78>
    8b90:	eb0026e0 	bl	12718 <LeaveCritical>
    8b94:	e1a00007 	mov	r0, r7
    8b98:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8b9c:	e1a00002 	mov	r0, r2
    8ba0:	eb0026af 	bl	12664 <EnterCritical>
    8ba4:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
    8ba8:	e59520bc 	ldr	r2, [r5, #188]	; 0xbc
    8bac:	e2833001 	add	r3, r3, #1
    8bb0:	e1a03a83 	lsl	r3, r3, #21
    8bb4:	e1a03aa3 	lsr	r3, r3, #21
    8bb8:	e1530002 	cmp	r3, r2
    8bbc:	03a07000 	moveq	r7, #0
    8bc0:	e59520d0 	ldr	r2, [r5, #208]	; 0xd0
    8bc4:	1affffe5 	bne	8b60 <CRdSerialDevice::Write(unsigned char)+0x44>
    8bc8:	eaffffee 	b	8b88 <CRdSerialDevice::Write(unsigned char)+0x6c>
    8bcc:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    8bd0:	e59f2028 	ldr	r2, [pc, #40]	; 8c00 <CRdSerialDevice::Write(unsigned char)+0xe4>
    8bd4:	e5923018 	ldr	r3, [r2, #24]
    8bd8:	e2133020 	ands	r3, r3, #32
    8bdc:	1afffffc 	bne	8bd4 <CRdSerialDevice::Write(unsigned char)+0xb8>
    8be0:	e5821000 	str	r1, [r2]
    8be4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    8be8:	e3a07001 	mov	r7, #1
    8bec:	e1a00007 	mov	r0, r7
    8bf0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8bf4:	e1a07002 	mov	r7, r2
    8bf8:	e1a00007 	mov	r0, r7
    8bfc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8c00:	20201000 	.word	0x20201000

00008c04 <CRdSerialDevice::Write(void const*, unsigned int)>:
    8c04:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8c08:	e2806a01 	add	r6, r0, #4096	; 0x1000
    8c0c:	e1a07000 	mov	r7, r0
    8c10:	e59600d4 	ldr	r0, [r6, #212]	; 0xd4
    8c14:	e1a04001 	mov	r4, r1
    8c18:	e3500000 	cmp	r0, #0
    8c1c:	e1a08002 	mov	r8, r2
    8c20:	1a000052 	bne	8d70 <CRdSerialDevice::Write(void const*, unsigned int)+0x16c>
    8c24:	e3540000 	cmp	r4, #0
    8c28:	0a000053 	beq	8d7c <CRdSerialDevice::Write(void const*, unsigned int)+0x178>
    8c2c:	e3580000 	cmp	r8, #0
    8c30:	0a00005b 	beq	8da4 <CRdSerialDevice::Write(void const*, unsigned int)+0x1a0>
    8c34:	e3a05000 	mov	r5, #0
    8c38:	e2444001 	sub	r4, r4, #1
    8c3c:	ea000002 	b	8c4c <CRdSerialDevice::Write(void const*, unsigned int)+0x48>
    8c40:	e2855001 	add	r5, r5, #1
    8c44:	e1550008 	cmp	r5, r8
    8c48:	0a00000f 	beq	8c8c <CRdSerialDevice::Write(void const*, unsigned int)+0x88>
    8c4c:	e5f41001 	ldrb	r1, [r4, #1]!
    8c50:	e1a00007 	mov	r0, r7
    8c54:	ebffffb0 	bl	8b1c <CRdSerialDevice::Write(unsigned char)>
    8c58:	e3500000 	cmp	r0, #0
    8c5c:	0a00000a 	beq	8c8c <CRdSerialDevice::Write(void const*, unsigned int)+0x88>
    8c60:	e5d43000 	ldrb	r3, [r4]
    8c64:	e353000a 	cmp	r3, #10
    8c68:	1afffff4 	bne	8c40 <CRdSerialDevice::Write(void const*, unsigned int)+0x3c>
    8c6c:	e59630c0 	ldr	r3, [r6, #192]	; 0xc0
    8c70:	e3130001 	tst	r3, #1
    8c74:	0afffff1 	beq	8c40 <CRdSerialDevice::Write(void const*, unsigned int)+0x3c>
    8c78:	e3a0100d 	mov	r1, #13
    8c7c:	e1a00007 	mov	r0, r7
    8c80:	ebffffa5 	bl	8b1c <CRdSerialDevice::Write(unsigned char)>
    8c84:	e3500000 	cmp	r0, #0
    8c88:	1affffec 	bne	8c40 <CRdSerialDevice::Write(void const*, unsigned int)+0x3c>
    8c8c:	e59630d4 	ldr	r3, [r6, #212]	; 0xd4
    8c90:	e3530000 	cmp	r3, #0
    8c94:	1a000033 	bne	8d68 <CRdSerialDevice::Write(void const*, unsigned int)+0x164>
    8c98:	e59730a4 	ldr	r3, [r7, #164]	; 0xa4
    8c9c:	e3530000 	cmp	r3, #0
    8ca0:	0a000028 	beq	8d48 <CRdSerialDevice::Write(void const*, unsigned int)+0x144>
    8ca4:	e59600d0 	ldr	r0, [r6, #208]	; 0xd0
    8ca8:	e3500000 	cmp	r0, #0
    8cac:	1a000027 	bne	8d50 <CRdSerialDevice::Write(void const*, unsigned int)+0x14c>
    8cb0:	e59630b8 	ldr	r3, [r6, #184]	; 0xb8
    8cb4:	e59620bc 	ldr	r2, [r6, #188]	; 0xbc
    8cb8:	e1520003 	cmp	r2, r3
    8cbc:	0a000021 	beq	8d48 <CRdSerialDevice::Write(void const*, unsigned int)+0x144>
    8cc0:	e3a03000 	mov	r3, #0
    8cc4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    8cc8:	e59630b8 	ldr	r3, [r6, #184]	; 0xb8
    8ccc:	e59620bc 	ldr	r2, [r6, #188]	; 0xbc
    8cd0:	e1520003 	cmp	r2, r3
    8cd4:	0a000015 	beq	8d30 <CRdSerialDevice::Write(void const*, unsigned int)+0x12c>
    8cd8:	e59f20cc 	ldr	r2, [pc, #204]	; 8dac <CRdSerialDevice::Write(void const*, unsigned int)+0x1a8>
    8cdc:	e5923018 	ldr	r3, [r2, #24]
    8ce0:	e3130020 	tst	r3, #32
    8ce4:	1a000029 	bne	8d90 <CRdSerialDevice::Write(void const*, unsigned int)+0x18c>
    8ce8:	e59f00c0 	ldr	r0, [pc, #192]	; 8db0 <CRdSerialDevice::Write(void const*, unsigned int)+0x1ac>
    8cec:	ea000002 	b	8cfc <CRdSerialDevice::Write(void const*, unsigned int)+0xf8>
    8cf0:	e5923018 	ldr	r3, [r2, #24]
    8cf4:	e3130020 	tst	r3, #32
    8cf8:	1a000024 	bne	8d90 <CRdSerialDevice::Write(void const*, unsigned int)+0x18c>
    8cfc:	e59630bc 	ldr	r3, [r6, #188]	; 0xbc
    8d00:	e2831001 	add	r1, r3, #1
    8d04:	e58610bc 	str	r1, [r6, #188]	; 0xbc
    8d08:	e0873003 	add	r3, r7, r3
    8d0c:	e5d338b8 	ldrb	r3, [r3, #2232]	; 0x8b8
    8d10:	e5823000 	str	r3, [r2]
    8d14:	e59630bc 	ldr	r3, [r6, #188]	; 0xbc
    8d18:	e0033000 	and	r3, r3, r0
    8d1c:	e58630bc 	str	r3, [r6, #188]	; 0xbc
    8d20:	e59610b8 	ldr	r1, [r6, #184]	; 0xb8
    8d24:	e59630bc 	ldr	r3, [r6, #188]	; 0xbc
    8d28:	e1510003 	cmp	r1, r3
    8d2c:	1affffef 	bne	8cf0 <CRdSerialDevice::Write(void const*, unsigned int)+0xec>
    8d30:	e3a03000 	mov	r3, #0
    8d34:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    8d38:	e59630d0 	ldr	r3, [r6, #208]	; 0xd0
    8d3c:	e3530000 	cmp	r3, #0
    8d40:	0a000000 	beq	8d48 <CRdSerialDevice::Write(void const*, unsigned int)+0x144>
    8d44:	eb002673 	bl	12718 <LeaveCritical>
    8d48:	e1a00005 	mov	r0, r5
    8d4c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8d50:	eb002643 	bl	12664 <EnterCritical>
    8d54:	e59620b8 	ldr	r2, [r6, #184]	; 0xb8
    8d58:	e59630bc 	ldr	r3, [r6, #188]	; 0xbc
    8d5c:	e1520003 	cmp	r2, r3
    8d60:	1affffd6 	bne	8cc0 <CRdSerialDevice::Write(void const*, unsigned int)+0xbc>
    8d64:	eafffff3 	b	8d38 <CRdSerialDevice::Write(void const*, unsigned int)+0x134>
    8d68:	eb00266a 	bl	12718 <LeaveCritical>
    8d6c:	eaffffc9 	b	8c98 <CRdSerialDevice::Write(void const*, unsigned int)+0x94>
    8d70:	eb00263b 	bl	12664 <EnterCritical>
    8d74:	e3540000 	cmp	r4, #0
    8d78:	1affffab 	bne	8c2c <CRdSerialDevice::Write(void const*, unsigned int)+0x28>
    8d7c:	e3a020c3 	mov	r2, #195	; 0xc3
    8d80:	e59f102c 	ldr	r1, [pc, #44]	; 8db4 <CRdSerialDevice::Write(void const*, unsigned int)+0x1b0>
    8d84:	e59f002c 	ldr	r0, [pc, #44]	; 8db8 <CRdSerialDevice::Write(void const*, unsigned int)+0x1b4>
    8d88:	eb000743 	bl	aa9c <assertion_failed>
    8d8c:	eaffffa6 	b	8c2c <CRdSerialDevice::Write(void const*, unsigned int)+0x28>
    8d90:	e59f2014 	ldr	r2, [pc, #20]	; 8dac <CRdSerialDevice::Write(void const*, unsigned int)+0x1a8>
    8d94:	e5923038 	ldr	r3, [r2, #56]	; 0x38
    8d98:	e3833020 	orr	r3, r3, #32
    8d9c:	e5823038 	str	r3, [r2, #56]	; 0x38
    8da0:	eaffffe2 	b	8d30 <CRdSerialDevice::Write(void const*, unsigned int)+0x12c>
    8da4:	e1a05008 	mov	r5, r8
    8da8:	eaffffb7 	b	8c8c <CRdSerialDevice::Write(void const*, unsigned int)+0x88>
    8dac:	20201000 	.word	0x20201000
    8db0:	000007ff 	.word	0x000007ff
    8db4:	00014054 	.word	0x00014054
    8db8:	00014068 	.word	0x00014068

00008dbc <CRdSerialDevice::InterruptHandler()>:
    8dbc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    8dc0:	e2804a01 	add	r4, r0, #4096	; 0x1000
    8dc4:	e1a05000 	mov	r5, r0
    8dc8:	e59400d0 	ldr	r0, [r4, #208]	; 0xd0
    8dcc:	e3500000 	cmp	r0, #0
    8dd0:	1a00006a 	bne	8f80 <CRdSerialDevice::InterruptHandler()+0x1c4>
    8dd4:	e3a06000 	mov	r6, #0
    8dd8:	ee076f9a 	mcr	15, 0, r6, cr7, cr10, {4}
    8ddc:	e59f31b4 	ldr	r3, [pc, #436]	; 8f98 <CRdSerialDevice::InterruptHandler()+0x1dc>
    8de0:	e3e07002 	mvn	r7, #2
    8de4:	e1a01003 	mov	r1, r3
    8de8:	e3e0c001 	mvn	ip, #1
    8dec:	e3e0e000 	mvn	lr, #0
    8df0:	e5932040 	ldr	r2, [r3, #64]	; 0x40
    8df4:	e59f01a0 	ldr	r0, [pc, #416]	; 8f9c <CRdSerialDevice::InterruptHandler()+0x1e0>
    8df8:	e5832044 	str	r2, [r3, #68]	; 0x44
    8dfc:	e5913018 	ldr	r3, [r1, #24]
    8e00:	e3130010 	tst	r3, #16
    8e04:	1a000024 	bne	8e9c <CRdSerialDevice::InterruptHandler()+0xe0>
    8e08:	e5912000 	ldr	r2, [r1]
    8e0c:	e3120b01 	tst	r2, #1024	; 0x400
    8e10:	0a000045 	beq	8f2c <CRdSerialDevice::InterruptHandler()+0x170>
    8e14:	e59538b4 	ldr	r3, [r5, #2228]	; 0x8b4
    8e18:	e3530000 	cmp	r3, #0
    8e1c:	0585e8b4 	streq	lr, [r5, #2228]	; 0x8b4
    8e20:	e59480c4 	ldr	r8, [r4, #196]	; 0xc4
    8e24:	e3580000 	cmp	r8, #0
    8e28:	0a00000a 	beq	8e58 <CRdSerialDevice::InterruptHandler()+0x9c>
    8e2c:	e59490c8 	ldr	r9, [r4, #200]	; 0xc8
    8e30:	e6af3072 	sxtb	r3, r2
    8e34:	e1d9a0d0 	ldrsb	sl, [r9]
    8e38:	e15a0003 	cmp	sl, r3
    8e3c:	158480c8 	strne	r8, [r4, #200]	; 0xc8
    8e40:	1a000004 	bne	8e58 <CRdSerialDevice::InterruptHandler()+0x9c>
    8e44:	e2893001 	add	r3, r9, #1
    8e48:	e58430c8 	str	r3, [r4, #200]	; 0xc8
    8e4c:	e1d930d1 	ldrsb	r3, [r9, #1]
    8e50:	e3530000 	cmp	r3, #0
    8e54:	03a06001 	moveq	r6, #1
    8e58:	e59538ac 	ldr	r3, [r5, #2220]	; 0x8ac
    8e5c:	e59588b0 	ldr	r8, [r5, #2224]	; 0x8b0
    8e60:	e2833001 	add	r3, r3, #1
    8e64:	e0033000 	and	r3, r3, r0
    8e68:	e1530008 	cmp	r3, r8
    8e6c:	0a000034 	beq	8f44 <CRdSerialDevice::InterruptHandler()+0x188>
    8e70:	e59538ac 	ldr	r3, [r5, #2220]	; 0x8ac
    8e74:	e2838001 	add	r8, r3, #1
    8e78:	e0853003 	add	r3, r5, r3
    8e7c:	e58588ac 	str	r8, [r5, #2220]	; 0x8ac
    8e80:	e5c320aa 	strb	r2, [r3, #170]	; 0xaa
    8e84:	e59538ac 	ldr	r3, [r5, #2220]	; 0x8ac
    8e88:	e0033000 	and	r3, r3, r0
    8e8c:	e58538ac 	str	r3, [r5, #2220]	; 0x8ac
    8e90:	e5913018 	ldr	r3, [r1, #24]
    8e94:	e3130010 	tst	r3, #16
    8e98:	0affffda 	beq	8e08 <CRdSerialDevice::InterruptHandler()+0x4c>
    8e9c:	e5913018 	ldr	r3, [r1, #24]
    8ea0:	e3130020 	tst	r3, #32
    8ea4:	1a000016 	bne	8f04 <CRdSerialDevice::InterruptHandler()+0x148>
    8ea8:	e59430b8 	ldr	r3, [r4, #184]	; 0xb8
    8eac:	e59420bc 	ldr	r2, [r4, #188]	; 0xbc
    8eb0:	e1520003 	cmp	r2, r3
    8eb4:	0a00002c 	beq	8f6c <CRdSerialDevice::InterruptHandler()+0x1b0>
    8eb8:	e59f20d8 	ldr	r2, [pc, #216]	; 8f98 <CRdSerialDevice::InterruptHandler()+0x1dc>
    8ebc:	e59f00d8 	ldr	r0, [pc, #216]	; 8f9c <CRdSerialDevice::InterruptHandler()+0x1e0>
    8ec0:	ea000003 	b	8ed4 <CRdSerialDevice::InterruptHandler()+0x118>
    8ec4:	e59410b8 	ldr	r1, [r4, #184]	; 0xb8
    8ec8:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    8ecc:	e1510003 	cmp	r1, r3
    8ed0:	0a000025 	beq	8f6c <CRdSerialDevice::InterruptHandler()+0x1b0>
    8ed4:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    8ed8:	e2831001 	add	r1, r3, #1
    8edc:	e58410bc 	str	r1, [r4, #188]	; 0xbc
    8ee0:	e0853003 	add	r3, r5, r3
    8ee4:	e5d338b8 	ldrb	r3, [r3, #2232]	; 0x8b8
    8ee8:	e5823000 	str	r3, [r2]
    8eec:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    8ef0:	e0033000 	and	r3, r3, r0
    8ef4:	e58430bc 	str	r3, [r4, #188]	; 0xbc
    8ef8:	e5923018 	ldr	r3, [r2, #24]
    8efc:	e3130020 	tst	r3, #32
    8f00:	0affffef 	beq	8ec4 <CRdSerialDevice::InterruptHandler()+0x108>
    8f04:	e3a03000 	mov	r3, #0
    8f08:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    8f0c:	e59430d0 	ldr	r3, [r4, #208]	; 0xd0
    8f10:	e3530000 	cmp	r3, #0
    8f14:	1a00001b 	bne	8f88 <CRdSerialDevice::InterruptHandler()+0x1cc>
    8f18:	e3560000 	cmp	r6, #0
    8f1c:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    8f20:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
    8f24:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    8f28:	e12fff13 	bx	r3
    8f2c:	e3120b02 	tst	r2, #2048	; 0x800
    8f30:	0a000007 	beq	8f54 <CRdSerialDevice::InterruptHandler()+0x198>
    8f34:	e59538b4 	ldr	r3, [r5, #2228]	; 0x8b4
    8f38:	e3530000 	cmp	r3, #0
    8f3c:	0585c8b4 	streq	ip, [r5, #2228]	; 0x8b4
    8f40:	eaffffb6 	b	8e20 <CRdSerialDevice::InterruptHandler()+0x64>
    8f44:	e59538b4 	ldr	r3, [r5, #2228]	; 0x8b4
    8f48:	e3530000 	cmp	r3, #0
    8f4c:	0585c8b4 	streq	ip, [r5, #2228]	; 0x8b4
    8f50:	eaffffa9 	b	8dfc <CRdSerialDevice::InterruptHandler()+0x40>
    8f54:	e3120c01 	tst	r2, #256	; 0x100
    8f58:	0affffb0 	beq	8e20 <CRdSerialDevice::InterruptHandler()+0x64>
    8f5c:	e59538b4 	ldr	r3, [r5, #2228]	; 0x8b4
    8f60:	e3530000 	cmp	r3, #0
    8f64:	058578b4 	streq	r7, [r5, #2228]	; 0x8b4
    8f68:	eaffffac 	b	8e20 <CRdSerialDevice::InterruptHandler()+0x64>
    8f6c:	e59f2024 	ldr	r2, [pc, #36]	; 8f98 <CRdSerialDevice::InterruptHandler()+0x1dc>
    8f70:	e5923038 	ldr	r3, [r2, #56]	; 0x38
    8f74:	e3c33020 	bic	r3, r3, #32
    8f78:	e5823038 	str	r3, [r2, #56]	; 0x38
    8f7c:	eaffffe0 	b	8f04 <CRdSerialDevice::InterruptHandler()+0x148>
    8f80:	eb0025b7 	bl	12664 <EnterCritical>
    8f84:	eaffff92 	b	8dd4 <CRdSerialDevice::InterruptHandler()+0x18>
    8f88:	eb0025e2 	bl	12718 <LeaveCritical>
    8f8c:	e3560000 	cmp	r6, #0
    8f90:	1affffe2 	bne	8f20 <CRdSerialDevice::InterruptHandler()+0x164>
    8f94:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    8f98:	20201000 	.word	0x20201000
    8f9c:	000007ff 	.word	0x000007ff

00008fa0 <CRdSerialDevice::InterruptStub(void*)>:
    8fa0:	e92d4010 	push	{r4, lr}
    8fa4:	e2504000 	subs	r4, r0, #0
    8fa8:	0a000002 	beq	8fb8 <CRdSerialDevice::InterruptStub(void*)+0x18>
    8fac:	e1a00004 	mov	r0, r4
    8fb0:	e8bd4010 	pop	{r4, lr}
    8fb4:	eaffff80 	b	8dbc <CRdSerialDevice::InterruptHandler()>
    8fb8:	e59f0014 	ldr	r0, [pc, #20]	; 8fd4 <CRdSerialDevice::InterruptStub(void*)+0x34>
    8fbc:	e59f2014 	ldr	r2, [pc, #20]	; 8fd8 <CRdSerialDevice::InterruptStub(void*)+0x38>
    8fc0:	e59f1014 	ldr	r1, [pc, #20]	; 8fdc <CRdSerialDevice::InterruptStub(void*)+0x3c>
    8fc4:	eb0006b4 	bl	aa9c <assertion_failed>
    8fc8:	e1a00004 	mov	r0, r4
    8fcc:	e8bd4010 	pop	{r4, lr}
    8fd0:	eaffff79 	b	8dbc <CRdSerialDevice::InterruptHandler()>
    8fd4:	00014134 	.word	0x00014134
    8fd8:	0000022e 	.word	0x0000022e
    8fdc:	00014054 	.word	0x00014054

00008fe0 <CRdSerialDevice::~CRdSerialDevice()>:
    8fe0:	e59f20a4 	ldr	r2, [pc, #164]	; 908c <CRdSerialDevice::~CRdSerialDevice()+0xac>
    8fe4:	e92d4010 	push	{r4, lr}
    8fe8:	e3a03000 	mov	r3, #0
    8fec:	e1a04000 	mov	r4, r0
    8ff0:	e5802000 	str	r2, [r0]
    8ff4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    8ff8:	e59f2090 	ldr	r2, [pc, #144]	; 9090 <CRdSerialDevice::~CRdSerialDevice()+0xb0>
    8ffc:	e5823038 	str	r3, [r2, #56]	; 0x38
    9000:	e5823030 	str	r3, [r2, #48]	; 0x30
    9004:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    9008:	e5d030a9 	ldrb	r3, [r0, #169]	; 0xa9
    900c:	e3530000 	cmp	r3, #0
    9010:	0a000006 	beq	9030 <CRdSerialDevice::~CRdSerialDevice()+0x50>
    9014:	e59000a4 	ldr	r0, [r0, #164]	; 0xa4
    9018:	e3500000 	cmp	r0, #0
    901c:	0a000014 	beq	9074 <CRdSerialDevice::~CRdSerialDevice()+0x94>
    9020:	e5d430a8 	ldrb	r3, [r4, #168]	; 0xa8
    9024:	e3530000 	cmp	r3, #0
    9028:	0a00000e 	beq	9068 <CRdSerialDevice::~CRdSerialDevice()+0x88>
    902c:	eb000cea 	bl	c3dc <CInterruptSystem::DisconnectFIQ()>
    9030:	e3a03000 	mov	r3, #0
    9034:	e284007c 	add	r0, r4, #124	; 0x7c
    9038:	e58430a4 	str	r3, [r4, #164]	; 0xa4
    903c:	eb000965 	bl	b5d8 <CGPIOPin::~CGPIOPin()>
    9040:	e2840054 	add	r0, r4, #84	; 0x54
    9044:	eb000963 	bl	b5d8 <CGPIOPin::~CGPIOPin()>
    9048:	e284002c 	add	r0, r4, #44	; 0x2c
    904c:	eb000961 	bl	b5d8 <CGPIOPin::~CGPIOPin()>
    9050:	e2840004 	add	r0, r4, #4
    9054:	eb00095f 	bl	b5d8 <CGPIOPin::~CGPIOPin()>
    9058:	e1a00004 	mov	r0, r4
    905c:	eb0007c0 	bl	af64 <CDevice::~CDevice()>
    9060:	e1a00004 	mov	r0, r4
    9064:	e8bd8010 	pop	{r4, pc}
    9068:	e3a01039 	mov	r1, #57	; 0x39
    906c:	eb000d55 	bl	c5c8 <CInterruptSystem::DisconnectIRQ(unsigned int)>
    9070:	eaffffee 	b	9030 <CRdSerialDevice::~CRdSerialDevice()+0x50>
    9074:	e59f0018 	ldr	r0, [pc, #24]	; 9094 <CRdSerialDevice::~CRdSerialDevice()+0xb4>
    9078:	e3a02079 	mov	r2, #121	; 0x79
    907c:	e59f1014 	ldr	r1, [pc, #20]	; 9098 <CRdSerialDevice::~CRdSerialDevice()+0xb8>
    9080:	eb000685 	bl	aa9c <assertion_failed>
    9084:	e59400a4 	ldr	r0, [r4, #164]	; 0xa4
    9088:	eaffffe4 	b	9020 <CRdSerialDevice::~CRdSerialDevice()+0x40>
    908c:	00014040 	.word	0x00014040
    9090:	20201000 	.word	0x20201000
    9094:	000140f0 	.word	0x000140f0
    9098:	00014054 	.word	0x00014054

0000909c <CRdSerialDevice::~CRdSerialDevice()>:
    909c:	e92d4010 	push	{r4, lr}
    90a0:	e1a04000 	mov	r4, r0
    90a4:	ebffffcd 	bl	8fe0 <CRdSerialDevice::~CRdSerialDevice()>
    90a8:	e1a00004 	mov	r0, r4
    90ac:	e59f1008 	ldr	r1, [pc, #8]	; 90bc <CRdSerialDevice::~CRdSerialDevice()+0x20>
    90b0:	eb0025c9 	bl	127dc <operator delete(void*, unsigned int)>
    90b4:	e1a00004 	mov	r0, r4
    90b8:	e8bd8010 	pop	{r4, pc}
    90bc:	000010d8 	.word	0x000010d8

000090c0 <BusRaider::static_putBytesToSerial(unsigned char const*, int)>:
    90c0:	e12fff1e 	bx	lr

000090c4 <BusRaider::static_doChangeMachine(char const*)>:
    90c4:	e59f201c 	ldr	r2, [pc, #28]	; 90e8 <BusRaider::static_doChangeMachine(char const*)+0x24>
    90c8:	e5922000 	ldr	r2, [r2]
    90cc:	e3520000 	cmp	r2, #0
    90d0:	012fff1e 	bxeq	lr
    90d4:	e1a03000 	mov	r3, r0
    90d8:	e59f200c 	ldr	r2, [pc, #12]	; 90ec <BusRaider::static_doChangeMachine(char const*)+0x28>
    90dc:	e3a01003 	mov	r1, #3
    90e0:	e59f0008 	ldr	r0, [pc, #8]	; 90f0 <BusRaider::static_doChangeMachine(char const*)+0x2c>
    90e4:	ea000026 	b	9184 <LogWrite(char const*, unsigned int, char const*, ...)>
    90e8:	0001666c 	.word	0x0001666c
    90ec:	0001414c 	.word	0x0001414c
    90f0:	00014140 	.word	0x00014140

000090f4 <BusRaider::BusRaider()>:
    90f4:	e92d4010 	push	{r4, lr}
    90f8:	e1a04000 	mov	r4, r0
    90fc:	eb00032b 	bl	9db0 <CommandHandler::CommandHandler()>
    9100:	e59f0020 	ldr	r0, [pc, #32]	; 9128 <BusRaider::BusRaider()+0x34>
    9104:	e59f1020 	ldr	r1, [pc, #32]	; 912c <BusRaider::BusRaider()+0x38>
    9108:	e59fc020 	ldr	ip, [pc, #32]	; 9130 <BusRaider::BusRaider()+0x3c>
    910c:	e59f3020 	ldr	r3, [pc, #32]	; 9134 <BusRaider::BusRaider()+0x40>
    9110:	e59f2020 	ldr	r2, [pc, #32]	; 9138 <BusRaider::BusRaider()+0x44>
    9114:	e5804000 	str	r4, [r0]
    9118:	e581c000 	str	ip, [r1]
    911c:	e1a00004 	mov	r0, r4
    9120:	e5832000 	str	r2, [r3]
    9124:	e8bd8010 	pop	{r4, pc}
    9128:	0001666c 	.word	0x0001666c
    912c:	00016674 	.word	0x00016674
    9130:	000090c0 	.word	0x000090c0
    9134:	00016678 	.word	0x00016678
    9138:	000090c4 	.word	0x000090c4

0000913c <BusRaider::~BusRaider()>:
    913c:	e92d4010 	push	{r4, lr}
    9140:	e3a02000 	mov	r2, #0
    9144:	e1a04000 	mov	r4, r0
    9148:	e59f300c 	ldr	r3, [pc, #12]	; 915c <BusRaider::~BusRaider()+0x20>
    914c:	e5832000 	str	r2, [r3]
    9150:	eb000331 	bl	9e1c <CommandHandler::~CommandHandler()>
    9154:	e1a00004 	mov	r0, r4
    9158:	e8bd8010 	pop	{r4, pc}
    915c:	0001666c 	.word	0x0001666c

00009160 <BusRaider::putBytesToSerial(unsigned char const*, int)>:
    9160:	e12fff1e 	bx	lr

00009164 <BusRaider::doChangeMachine(char const*)>:
    9164:	e1a03001 	mov	r3, r1
    9168:	e59f2008 	ldr	r2, [pc, #8]	; 9178 <BusRaider::doChangeMachine(char const*)+0x14>
    916c:	e3a01003 	mov	r1, #3
    9170:	e59f0004 	ldr	r0, [pc, #4]	; 917c <BusRaider::doChangeMachine(char const*)+0x18>
    9174:	ea000002 	b	9184 <LogWrite(char const*, unsigned int, char const*, ...)>
    9178:	0001414c 	.word	0x0001414c
    917c:	00014140 	.word	0x00014140

00009180 <BusRaider::handleSerialRxBuffer(unsigned char const*, int)>:
    9180:	ea000326 	b	9e20 <CommandHandler::handleBuffer(unsigned char const*, int)>

00009184 <LogWrite(char const*, unsigned int, char const*, ...)>:
    9184:	e92d000c 	push	{r2, r3}
    9188:	e92d4030 	push	{r4, r5, lr}
    918c:	e24dd014 	sub	sp, sp, #20
    9190:	e1a05000 	mov	r5, r0
    9194:	e1a04001 	mov	r4, r1
    9198:	eb000f68 	bl	cf40 <CLogger::Get()>
    919c:	e3500000 	cmp	r0, #0
    91a0:	0a00000d 	beq	91dc <LogWrite(char const*, unsigned int, char const*, ...)+0x58>
    91a4:	e2441002 	sub	r1, r4, #2
    91a8:	e3510002 	cmp	r1, #2
    91ac:	83a04001 	movhi	r4, #1
    91b0:	959f3034 	ldrls	r3, [pc, #52]	; 91ec <LogWrite(char const*, unsigned int, char const*, ...)+0x68>
    91b4:	97d34001 	ldrbls	r4, [r3, r1]
    91b8:	e28d3024 	add	r3, sp, #36	; 0x24
    91bc:	e58d300c 	str	r3, [sp, #12]
    91c0:	eb000f5e 	bl	cf40 <CLogger::Get()>
    91c4:	e59d300c 	ldr	r3, [sp, #12]
    91c8:	e1a02004 	mov	r2, r4
    91cc:	e58d3000 	str	r3, [sp]
    91d0:	e1a01005 	mov	r1, r5
    91d4:	e59d3020 	ldr	r3, [sp, #32]
    91d8:	eb001084 	bl	d3f0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
    91dc:	e28dd014 	add	sp, sp, #20
    91e0:	e8bd4030 	pop	{r4, r5, lr}
    91e4:	e28dd008 	add	sp, sp, #8
    91e8:	e12fff1e 	bx	lr
    91ec:	00014164 	.word	0x00014164

000091f0 <strlcat(char*, char const*, unsigned int)>:
    91f0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    91f4:	e1a04002 	mov	r4, r2
    91f8:	e1a07001 	mov	r7, r1
    91fc:	e1a06000 	mov	r6, r0
    9200:	eb0021d3 	bl	11954 <strlen>
    9204:	e2442001 	sub	r2, r4, #1
    9208:	e0524000 	subs	r4, r2, r0
    920c:	e1a05000 	mov	r5, r0
    9210:	0a00000a 	beq	9240 <strlcat(char*, char const*, unsigned int)+0x50>
    9214:	e1a00007 	mov	r0, r7
    9218:	eb0021cd 	bl	11954 <strlen>
    921c:	e1540000 	cmp	r4, r0
    9220:	21a04000 	movcs	r4, r0
    9224:	e1a01007 	mov	r1, r7
    9228:	e0860005 	add	r0, r6, r5
    922c:	e1a02004 	mov	r2, r4
    9230:	eb002319 	bl	11e9c <memcpy>
    9234:	e3a03000 	mov	r3, #0
    9238:	e0855004 	add	r5, r5, r4
    923c:	e7c63005 	strb	r3, [r6, r5]
    9240:	e1a00005 	mov	r0, r5
    9244:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00009248 <strlcpy(char*, char const*, unsigned int)>:
    9248:	e92d4070 	push	{r4, r5, r6, lr}
    924c:	e1a05000 	mov	r5, r0
    9250:	e1a04002 	mov	r4, r2
    9254:	e1a00001 	mov	r0, r1
    9258:	e1a06001 	mov	r6, r1
    925c:	eb0021bc 	bl	11954 <strlen>
    9260:	e2444001 	sub	r4, r4, #1
    9264:	e1540000 	cmp	r4, r0
    9268:	21a04000 	movcs	r4, r0
    926c:	e1a01006 	mov	r1, r6
    9270:	e1a02004 	mov	r2, r4
    9274:	e1a00005 	mov	r0, r5
    9278:	eb002307 	bl	11e9c <memcpy>
    927c:	e3a03000 	mov	r3, #0
    9280:	e1a00004 	mov	r0, r4
    9284:	e7c53004 	strb	r3, [r5, r4]
    9288:	e8bd8070 	pop	{r4, r5, r6, pc}

0000928c <jsonGetValueForKey(char const*, char const*, char*, int)>:
    928c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    9290:	e1a07001 	mov	r7, r1
    9294:	e24ddf56 	sub	sp, sp, #344	; 0x158
    9298:	e1a08000 	mov	r8, r0
    929c:	e28d000c 	add	r0, sp, #12
    92a0:	e1a0a002 	mov	sl, r2
    92a4:	e1a09003 	mov	r9, r3
    92a8:	eb00003d 	bl	93a4 <JSMNR_init(JSMNR_parser*)>
    92ac:	e1a00007 	mov	r0, r7
    92b0:	eb0021a7 	bl	11954 <strlen>
    92b4:	e3a04014 	mov	r4, #20
    92b8:	e1a02000 	mov	r2, r0
    92bc:	e1a01007 	mov	r1, r7
    92c0:	e28d000c 	add	r0, sp, #12
    92c4:	e58d4000 	str	r4, [sp]
    92c8:	e28d3018 	add	r3, sp, #24
    92cc:	eb00005e 	bl	944c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)>
    92d0:	e2506000 	subs	r6, r0, #0
    92d4:	ba000024 	blt	936c <jsonGetValueForKey(char const*, char const*, char*, int)+0xe0>
    92d8:	128d4018 	addne	r4, sp, #24
    92dc:	13a05000 	movne	r5, #0
    92e0:	1a000003 	bne	92f4 <jsonGetValueForKey(char const*, char const*, char*, int)+0x68>
    92e4:	ea00001d 	b	9360 <jsonGetValueForKey(char const*, char const*, char*, int)+0xd4>
    92e8:	e1560005 	cmp	r6, r5
    92ec:	e2844010 	add	r4, r4, #16
    92f0:	0a00001a 	beq	9360 <jsonGetValueForKey(char const*, char const*, char*, int)+0xd4>
    92f4:	e5d42000 	ldrb	r2, [r4]
    92f8:	e2855001 	add	r5, r5, #1
    92fc:	e3520003 	cmp	r2, #3
    9300:	1afffff8 	bne	92e8 <jsonGetValueForKey(char const*, char const*, char*, int)+0x5c>
    9304:	e1a00008 	mov	r0, r8
    9308:	eb002191 	bl	11954 <strlen>
    930c:	e994000a 	ldmib	r4, {r1, r3}
    9310:	e0433001 	sub	r3, r3, r1
    9314:	e1500003 	cmp	r0, r3
    9318:	1afffff2 	bne	92e8 <jsonGetValueForKey(char const*, char const*, char*, int)+0x5c>
    931c:	e1a02000 	mov	r2, r0
    9320:	e0870001 	add	r0, r7, r1
    9324:	e1a01008 	mov	r1, r8
    9328:	eb0021e2 	bl	11ab8 <strncmp>
    932c:	e3500000 	cmp	r0, #0
    9330:	1affffec 	bne	92e8 <jsonGetValueForKey(char const*, char const*, char*, int)+0x5c>
    9334:	e5941014 	ldr	r1, [r4, #20]
    9338:	e5942018 	ldr	r2, [r4, #24]
    933c:	e0422001 	sub	r2, r2, r1
    9340:	e1520009 	cmp	r2, r9
    9344:	aa000005 	bge	9360 <jsonGetValueForKey(char const*, char const*, char*, int)+0xd4>
    9348:	e2822001 	add	r2, r2, #1
    934c:	e0871001 	add	r1, r7, r1
    9350:	e1a0000a 	mov	r0, sl
    9354:	ebffffbb 	bl	9248 <strlcpy(char*, char const*, unsigned int)>
    9358:	e3a00001 	mov	r0, #1
    935c:	ea000000 	b	9364 <jsonGetValueForKey(char const*, char const*, char*, int)+0xd8>
    9360:	e3a00000 	mov	r0, #0
    9364:	e28ddf56 	add	sp, sp, #344	; 0x158
    9368:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    936c:	e1a00007 	mov	r0, r7
    9370:	eb002177 	bl	11954 <strlen>
    9374:	e58d4000 	str	r4, [sp]
    9378:	e58d0004 	str	r0, [sp, #4]
    937c:	e1a03006 	mov	r3, r6
    9380:	e59f2014 	ldr	r2, [pc, #20]	; 939c <jsonGetValueForKey(char const*, char const*, char*, int)+0x110>
    9384:	e3a01004 	mov	r1, #4
    9388:	e59f0010 	ldr	r0, [pc, #16]	; 93a0 <jsonGetValueForKey(char const*, char const*, char*, int)+0x114>
    938c:	ebffff7c 	bl	9184 <LogWrite(char const*, unsigned int, char const*, ...)>
    9390:	e3a00000 	mov	r0, #0
    9394:	e28ddf56 	add	sp, sp, #344	; 0x158
    9398:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    939c:	00014168 	.word	0x00014168
    93a0:	00014194 	.word	0x00014194

000093a4 <JSMNR_init(JSMNR_parser*)>:
    93a4:	e3a03000 	mov	r3, #0
    93a8:	e3e02000 	mvn	r2, #0
    93ac:	e5803000 	str	r3, [r0]
    93b0:	e5802008 	str	r2, [r0, #8]
    93b4:	e5803004 	str	r3, [r0, #4]
    93b8:	e12fff1e 	bx	lr

000093bc <JSMNR_logLongStr(char const*, char const*, bool)>:
    93bc:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    93c0:	e2526000 	subs	r6, r2, #0
    93c4:	e24dd05c 	sub	sp, sp, #92	; 0x5c
    93c8:	e1a02000 	mov	r2, r0
    93cc:	e1a05001 	mov	r5, r1
    93d0:	0a000018 	beq	9438 <JSMNR_logLongStr(char const*, char const*, bool)+0x7c>
    93d4:	e3a01003 	mov	r1, #3
    93d8:	e59f0068 	ldr	r0, [pc, #104]	; 9448 <JSMNR_logLongStr(char const*, char const*, bool)+0x8c>
    93dc:	ebffff68 	bl	9184 <LogWrite(char const*, unsigned int, char const*, ...)>
    93e0:	e3a04000 	mov	r4, #0
    93e4:	e59f705c 	ldr	r7, [pc, #92]	; 9448 <JSMNR_logLongStr(char const*, char const*, bool)+0x8c>
    93e8:	ea00000b 	b	941c <JSMNR_logLongStr(char const*, char const*, bool)+0x60>
    93ec:	e3a02051 	mov	r2, #81	; 0x51
    93f0:	e28d0004 	add	r0, sp, #4
    93f4:	ebffff93 	bl	9248 <strlcpy(char*, char const*, unsigned int)>
    93f8:	e3a03000 	mov	r3, #0
    93fc:	e1560003 	cmp	r6, r3
    9400:	e28d2004 	add	r2, sp, #4
    9404:	13a01003 	movne	r1, #3
    9408:	03a01004 	moveq	r1, #4
    940c:	e1a00007 	mov	r0, r7
    9410:	e5cd3054 	strb	r3, [sp, #84]	; 0x54
    9414:	ebffff5a 	bl	9184 <LogWrite(char const*, unsigned int, char const*, ...)>
    9418:	e2844050 	add	r4, r4, #80	; 0x50
    941c:	e1a00005 	mov	r0, r5
    9420:	eb00214b 	bl	11954 <strlen>
    9424:	e1500004 	cmp	r0, r4
    9428:	e0851004 	add	r1, r5, r4
    942c:	8affffee 	bhi	93ec <JSMNR_logLongStr(char const*, char const*, bool)+0x30>
    9430:	e28dd05c 	add	sp, sp, #92	; 0x5c
    9434:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    9438:	e3a01004 	mov	r1, #4
    943c:	e59f0004 	ldr	r0, [pc, #4]	; 9448 <JSMNR_logLongStr(char const*, char const*, bool)+0x8c>
    9440:	ebffff4f 	bl	9184 <LogWrite(char const*, unsigned int, char const*, ...)>
    9444:	eaffffe5 	b	93e0 <JSMNR_logLongStr(char const*, char const*, bool)+0x24>
    9448:	0001419c 	.word	0x0001419c

0000944c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)>:
    944c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9450:	e5905000 	ldr	r5, [r0]
    9454:	e24dd01c 	sub	sp, sp, #28
    9458:	e1520005 	cmp	r2, r5
    945c:	e58d3010 	str	r3, [sp, #16]
    9460:	e5908004 	ldr	r8, [r0, #4]
    9464:	9a0000bc 	bls	975c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x310>
    9468:	e1a07003 	mov	r7, r3
    946c:	e19130d5 	ldrsb	r3, [r1, r5]
    9470:	e081e005 	add	lr, r1, r5
    9474:	e3530000 	cmp	r3, #0
    9478:	0a0000b7 	beq	975c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x310>
    947c:	e1a04000 	mov	r4, r0
    9480:	e58d0014 	str	r0, [sp, #20]
    9484:	e1a06001 	mov	r6, r1
    9488:	e59d0040 	ldr	r0, [sp, #64]	; 0x40
    948c:	ea000010 	b	94d4 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x88>
    9490:	e353005d 	cmp	r3, #93	; 0x5d
    9494:	0a0000ca 	beq	97c4 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x378>
    9498:	ca0000c5 	bgt	97b4 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x368>
    949c:	e353003a 	cmp	r3, #58	; 0x3a
    94a0:	1a00013f 	bne	99a4 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x558>
    94a4:	e5943004 	ldr	r3, [r4, #4]
    94a8:	e594e000 	ldr	lr, [r4]
    94ac:	e2433001 	sub	r3, r3, #1
    94b0:	e5843008 	str	r3, [r4, #8]
    94b4:	e28e5001 	add	r5, lr, #1
    94b8:	e1550002 	cmp	r5, r2
    94bc:	e5845000 	str	r5, [r4]
    94c0:	2a0000a4 	bcs	9758 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x30c>
    94c4:	e19630d5 	ldrsb	r3, [r6, r5]
    94c8:	e086e005 	add	lr, r6, r5
    94cc:	e3530000 	cmp	r3, #0
    94d0:	0a0000a0 	beq	9758 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x30c>
    94d4:	e353002c 	cmp	r3, #44	; 0x2c
    94d8:	0a00014f 	beq	9a1c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x5d0>
    94dc:	caffffeb 	bgt	9490 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x44>
    94e0:	e353000d 	cmp	r3, #13
    94e4:	0a000096 	beq	9744 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x2f8>
    94e8:	da0000e4 	ble	9880 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x434>
    94ec:	e3530020 	cmp	r3, #32
    94f0:	0a000093 	beq	9744 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x2f8>
    94f4:	e3530022 	cmp	r3, #34	; 0x22
    94f8:	1a0000e3 	bne	988c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x440>
    94fc:	e2859001 	add	r9, r5, #1
    9500:	e1520009 	cmp	r2, r9
    9504:	e5849000 	str	r9, [r4]
    9508:	e1a01009 	mov	r1, r9
    950c:	9a0000d6 	bls	986c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x420>
    9510:	e19630d9 	ldrsb	r3, [r6, r9]
    9514:	e3530000 	cmp	r3, #0
    9518:	1a000008 	bne	9540 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0xf4>
    951c:	ea0000d2 	b	986c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x420>
    9520:	e594e000 	ldr	lr, [r4]
    9524:	e28e1001 	add	r1, lr, #1
    9528:	e1520001 	cmp	r2, r1
    952c:	e5841000 	str	r1, [r4]
    9530:	9a0000cd 	bls	986c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x420>
    9534:	e19630d1 	ldrsb	r3, [r6, r1]
    9538:	e3530000 	cmp	r3, #0
    953c:	0a0000ca 	beq	986c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x420>
    9540:	e3530022 	cmp	r3, #34	; 0x22
    9544:	0a000168 	beq	9aec <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x6a0>
    9548:	e353005c 	cmp	r3, #92	; 0x5c
    954c:	1afffff3 	bne	9520 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0xd4>
    9550:	e281e001 	add	lr, r1, #1
    9554:	e152000e 	cmp	r2, lr
    9558:	9afffff0 	bls	9520 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0xd4>
    955c:	e584e000 	str	lr, [r4]
    9560:	e19630de 	ldrsb	r3, [r6, lr]
    9564:	e086a00e 	add	sl, r6, lr
    9568:	e243c022 	sub	ip, r3, #34	; 0x22
    956c:	e35c0053 	cmp	ip, #83	; 0x53
    9570:	979ff10c 	ldrls	pc, [pc, ip, lsl #2]
    9574:	ea00006d 	b	9730 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x2e4>
    9578:	00009524 	.word	0x00009524
    957c:	00009730 	.word	0x00009730
    9580:	00009730 	.word	0x00009730
    9584:	00009730 	.word	0x00009730
    9588:	00009730 	.word	0x00009730
    958c:	00009730 	.word	0x00009730
    9590:	00009730 	.word	0x00009730
    9594:	00009730 	.word	0x00009730
    9598:	00009730 	.word	0x00009730
    959c:	00009730 	.word	0x00009730
    95a0:	00009730 	.word	0x00009730
    95a4:	00009730 	.word	0x00009730
    95a8:	00009730 	.word	0x00009730
    95ac:	00009524 	.word	0x00009524
    95b0:	00009730 	.word	0x00009730
    95b4:	00009730 	.word	0x00009730
    95b8:	00009730 	.word	0x00009730
    95bc:	00009730 	.word	0x00009730
    95c0:	00009730 	.word	0x00009730
    95c4:	00009730 	.word	0x00009730
    95c8:	00009730 	.word	0x00009730
    95cc:	00009730 	.word	0x00009730
    95d0:	00009730 	.word	0x00009730
    95d4:	00009730 	.word	0x00009730
    95d8:	00009730 	.word	0x00009730
    95dc:	00009730 	.word	0x00009730
    95e0:	00009730 	.word	0x00009730
    95e4:	00009730 	.word	0x00009730
    95e8:	00009730 	.word	0x00009730
    95ec:	00009730 	.word	0x00009730
    95f0:	00009730 	.word	0x00009730
    95f4:	00009730 	.word	0x00009730
    95f8:	00009730 	.word	0x00009730
    95fc:	00009730 	.word	0x00009730
    9600:	00009730 	.word	0x00009730
    9604:	00009730 	.word	0x00009730
    9608:	00009730 	.word	0x00009730
    960c:	00009730 	.word	0x00009730
    9610:	00009730 	.word	0x00009730
    9614:	00009730 	.word	0x00009730
    9618:	00009730 	.word	0x00009730
    961c:	00009730 	.word	0x00009730
    9620:	00009730 	.word	0x00009730
    9624:	00009730 	.word	0x00009730
    9628:	00009730 	.word	0x00009730
    962c:	00009730 	.word	0x00009730
    9630:	00009730 	.word	0x00009730
    9634:	00009730 	.word	0x00009730
    9638:	00009730 	.word	0x00009730
    963c:	00009730 	.word	0x00009730
    9640:	00009730 	.word	0x00009730
    9644:	00009730 	.word	0x00009730
    9648:	00009730 	.word	0x00009730
    964c:	00009730 	.word	0x00009730
    9650:	00009730 	.word	0x00009730
    9654:	00009730 	.word	0x00009730
    9658:	00009730 	.word	0x00009730
    965c:	00009730 	.word	0x00009730
    9660:	00009524 	.word	0x00009524
    9664:	00009730 	.word	0x00009730
    9668:	00009730 	.word	0x00009730
    966c:	00009730 	.word	0x00009730
    9670:	00009730 	.word	0x00009730
    9674:	00009730 	.word	0x00009730
    9678:	00009524 	.word	0x00009524
    967c:	00009730 	.word	0x00009730
    9680:	00009730 	.word	0x00009730
    9684:	00009730 	.word	0x00009730
    9688:	00009524 	.word	0x00009524
    968c:	00009730 	.word	0x00009730
    9690:	00009730 	.word	0x00009730
    9694:	00009730 	.word	0x00009730
    9698:	00009730 	.word	0x00009730
    969c:	00009730 	.word	0x00009730
    96a0:	00009730 	.word	0x00009730
    96a4:	00009730 	.word	0x00009730
    96a8:	00009524 	.word	0x00009524
    96ac:	00009730 	.word	0x00009730
    96b0:	00009730 	.word	0x00009730
    96b4:	00009730 	.word	0x00009730
    96b8:	00009524 	.word	0x00009524
    96bc:	00009730 	.word	0x00009730
    96c0:	00009524 	.word	0x00009524
    96c4:	000096c8 	.word	0x000096c8
    96c8:	e281e002 	add	lr, r1, #2
    96cc:	e584e000 	str	lr, [r4]
    96d0:	e2811006 	add	r1, r1, #6
    96d4:	e152000e 	cmp	r2, lr
    96d8:	0a00005e 	beq	9858 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x40c>
    96dc:	e1fa30d1 	ldrsb	r3, [sl, #1]!
    96e0:	e6efc073 	uxtb	ip, r3
    96e4:	e3ccb020 	bic	fp, ip, #32
    96e8:	e3530000 	cmp	r3, #0
    96ec:	e24cc030 	sub	ip, ip, #48	; 0x30
    96f0:	e24bb041 	sub	fp, fp, #65	; 0x41
    96f4:	0a000057 	beq	9858 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x40c>
    96f8:	e35c0009 	cmp	ip, #9
    96fc:	9a000051 	bls	9848 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x3fc>
    9700:	e35b0005 	cmp	fp, #5
    9704:	9a00004f 	bls	9848 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x3fc>
    9708:	e59f247c 	ldr	r2, [pc, #1148]	; 9b8c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x740>
    970c:	e58de000 	str	lr, [sp]
    9710:	e3e08001 	mvn	r8, #1
    9714:	e3a01004 	mov	r1, #4
    9718:	e59f0470 	ldr	r0, [pc, #1136]	; 9b90 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x744>
    971c:	ebfffe98 	bl	9184 <LogWrite(char const*, unsigned int, char const*, ...)>
    9720:	e5845000 	str	r5, [r4]
    9724:	e1a00008 	mov	r0, r8
    9728:	e28dd01c 	add	sp, sp, #28
    972c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9730:	e58de000 	str	lr, [sp]
    9734:	e59f2458 	ldr	r2, [pc, #1112]	; 9b94 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x748>
    9738:	eafffff4 	b	9710 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x2c4>
    973c:	e3710001 	cmn	r1, #1
    9740:	0a000033 	beq	9814 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x3c8>
    9744:	e594e000 	ldr	lr, [r4]
    9748:	e28e5001 	add	r5, lr, #1
    974c:	e1550002 	cmp	r5, r2
    9750:	e5845000 	str	r5, [r4]
    9754:	3affff5a 	bcc	94c4 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x78>
    9758:	e59d0014 	ldr	r0, [sp, #20]
    975c:	e59d1010 	ldr	r1, [sp, #16]
    9760:	e3510000 	cmp	r1, #0
    9764:	0affffee 	beq	9724 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x2d8>
    9768:	e5903004 	ldr	r3, [r0, #4]
    976c:	e2532001 	subs	r2, r3, #1
    9770:	4affffeb 	bmi	9724 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x2d8>
    9774:	e0813203 	add	r3, r1, r3, lsl #4
    9778:	ea000002 	b	9788 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x33c>
    977c:	e3720001 	cmn	r2, #1
    9780:	e2433010 	sub	r3, r3, #16
    9784:	0affffe6 	beq	9724 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x2d8>
    9788:	e513100c 	ldr	r1, [r3, #-12]
    978c:	e2422001 	sub	r2, r2, #1
    9790:	e3710001 	cmn	r1, #1
    9794:	0afffff8 	beq	977c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x330>
    9798:	e5131008 	ldr	r1, [r3, #-8]
    979c:	e3710001 	cmn	r1, #1
    97a0:	1afffff5 	bne	977c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x330>
    97a4:	e3e08002 	mvn	r8, #2
    97a8:	e1a00008 	mov	r0, r8
    97ac:	e28dd01c 	add	sp, sp, #28
    97b0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    97b4:	e353007b 	cmp	r3, #123	; 0x7b
    97b8:	0a00007b 	beq	99ac <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x560>
    97bc:	e353007d 	cmp	r3, #125	; 0x7d
    97c0:	1a000031 	bne	988c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x440>
    97c4:	e3570000 	cmp	r7, #0
    97c8:	0affffdd 	beq	9744 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x2f8>
    97cc:	e594a004 	ldr	sl, [r4, #4]
    97d0:	e353007d 	cmp	r3, #125	; 0x7d
    97d4:	13a0b002 	movne	fp, #2
    97d8:	03a0b001 	moveq	fp, #1
    97dc:	e25a1001 	subs	r1, sl, #1
    97e0:	4affffd5 	bmi	973c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x2f0>
    97e4:	e24ac21f 	sub	ip, sl, #-268435455	; 0xf0000001
    97e8:	e087c20c 	add	ip, r7, ip, lsl #4
    97ec:	e59c3004 	ldr	r3, [ip, #4]
    97f0:	e3730001 	cmn	r3, #1
    97f4:	0a000002 	beq	9804 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x3b8>
    97f8:	e59c9008 	ldr	r9, [ip, #8]
    97fc:	e3790001 	cmn	r9, #1
    9800:	0a0000a4 	beq	9a98 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x64c>
    9804:	e2411001 	sub	r1, r1, #1
    9808:	e3710001 	cmn	r1, #1
    980c:	e24cc010 	sub	ip, ip, #16
    9810:	1afffff5 	bne	97ec <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x3a0>
    9814:	e1de30d0 	ldrsb	r3, [lr]
    9818:	e59f2378 	ldr	r2, [pc, #888]	; 9b98 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x74c>
    981c:	e88d0c08 	stm	sp, {r3, sl, fp}
    9820:	e3a01003 	mov	r1, #3
    9824:	e1a03005 	mov	r3, r5
    9828:	e59f0360 	ldr	r0, [pc, #864]	; 9b90 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x744>
    982c:	ebfffe54 	bl	9184 <LogWrite(char const*, unsigned int, char const*, ...)>
    9830:	e1a01006 	mov	r1, r6
    9834:	e3a02001 	mov	r2, #1
    9838:	e59f035c 	ldr	r0, [pc, #860]	; 9b9c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x750>
    983c:	ebfffede 	bl	93bc <JSMNR_logLongStr(char const*, char const*, bool)>
    9840:	e3e08001 	mvn	r8, #1
    9844:	eaffffb6 	b	9724 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x2d8>
    9848:	e28ee001 	add	lr, lr, #1
    984c:	e15e0001 	cmp	lr, r1
    9850:	e584e000 	str	lr, [r4]
    9854:	1affff9e 	bne	96d4 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x288>
    9858:	e24ee001 	sub	lr, lr, #1
    985c:	e28e1001 	add	r1, lr, #1
    9860:	e1520001 	cmp	r2, r1
    9864:	e5841000 	str	r1, [r4]
    9868:	8affff31 	bhi	9534 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0xe8>
    986c:	e3e08002 	mvn	r8, #2
    9870:	e1a00008 	mov	r0, r8
    9874:	e5845000 	str	r5, [r4]
    9878:	e28dd01c 	add	sp, sp, #28
    987c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9880:	e2433009 	sub	r3, r3, #9
    9884:	e3530001 	cmp	r3, #1
    9888:	9affffad 	bls	9744 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x2f8>
    988c:	e5941000 	ldr	r1, [r4]
    9890:	e1520001 	cmp	r2, r1
    9894:	9a00001d 	bls	9910 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x4c4>
    9898:	e19630d1 	ldrsb	r3, [r6, r1]
    989c:	e086e001 	add	lr, r6, r1
    98a0:	e3530000 	cmp	r3, #0
    98a4:	1a000011 	bne	98f0 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x4a4>
    98a8:	ea000018 	b	9910 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x4c4>
    98ac:	e3530009 	cmp	r3, #9
    98b0:	ba000003 	blt	98c4 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x478>
    98b4:	e353000a 	cmp	r3, #10
    98b8:	da000014 	ble	9910 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x4c4>
    98bc:	e353000d 	cmp	r3, #13
    98c0:	0a000012 	beq	9910 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x4c4>
    98c4:	e243c020 	sub	ip, r3, #32
    98c8:	e6efc07c 	uxtb	ip, ip
    98cc:	e35c005e 	cmp	ip, #94	; 0x5e
    98d0:	8a000030 	bhi	9998 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x54c>
    98d4:	e2811001 	add	r1, r1, #1
    98d8:	e1520001 	cmp	r2, r1
    98dc:	e5841000 	str	r1, [r4]
    98e0:	0a00000a 	beq	9910 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x4c4>
    98e4:	e1fe30d1 	ldrsb	r3, [lr, #1]!
    98e8:	e3530000 	cmp	r3, #0
    98ec:	0a000007 	beq	9910 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x4c4>
    98f0:	e3530020 	cmp	r3, #32
    98f4:	0a000005 	beq	9910 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x4c4>
    98f8:	daffffeb 	ble	98ac <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x460>
    98fc:	e353003a 	cmp	r3, #58	; 0x3a
    9900:	0a000002 	beq	9910 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x4c4>
    9904:	ca00001b 	bgt	9978 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x52c>
    9908:	e353002c 	cmp	r3, #44	; 0x2c
    990c:	1affffec 	bne	98c4 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x478>
    9910:	e3570000 	cmp	r7, #0
    9914:	0241e001 	subeq	lr, r1, #1
    9918:	02888001 	addeq	r8, r8, #1
    991c:	0afffee4 	beq	94b4 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x68>
    9920:	e594c004 	ldr	ip, [r4, #4]
    9924:	e150000c 	cmp	r0, ip
    9928:	9a00008c 	bls	9b60 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x714>
    992c:	e28ce001 	add	lr, ip, #1
    9930:	e584e004 	str	lr, [r4, #4]
    9934:	e3a0e000 	mov	lr, #0
    9938:	e087920c 	add	r9, r7, ip, lsl #4
    993c:	e5943008 	ldr	r3, [r4, #8]
    9940:	e589e00c 	str	lr, [r9, #12]
    9944:	e3a0e004 	mov	lr, #4
    9948:	e3730001 	cmn	r3, #1
    994c:	10873203 	addne	r3, r7, r3, lsl #4
    9950:	e7c7e20c 	strb	lr, [r7, ip, lsl #4]
    9954:	e5891008 	str	r1, [r9, #8]
    9958:	e241e001 	sub	lr, r1, #1
    995c:	1593100c 	ldrne	r1, [r3, #12]
    9960:	e5895004 	str	r5, [r9, #4]
    9964:	12811001 	addne	r1, r1, #1
    9968:	e584e000 	str	lr, [r4]
    996c:	e2888001 	add	r8, r8, #1
    9970:	1583100c 	strne	r1, [r3, #12]
    9974:	eafffece 	b	94b4 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x68>
    9978:	e353005d 	cmp	r3, #93	; 0x5d
    997c:	0affffe3 	beq	9910 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x4c4>
    9980:	e353007d 	cmp	r3, #125	; 0x7d
    9984:	0affffe1 	beq	9910 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x4c4>
    9988:	e243c020 	sub	ip, r3, #32
    998c:	e6efc07c 	uxtb	ip, ip
    9990:	e35c005e 	cmp	ip, #94	; 0x5e
    9994:	9affffce 	bls	98d4 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x488>
    9998:	e58d1000 	str	r1, [sp]
    999c:	e59f21fc 	ldr	r2, [pc, #508]	; 9ba0 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x754>
    99a0:	eaffff5a 	b	9710 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x2c4>
    99a4:	e353005b 	cmp	r3, #91	; 0x5b
    99a8:	1affffb7 	bne	988c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x440>
    99ac:	e3570000 	cmp	r7, #0
    99b0:	e2888001 	add	r8, r8, #1
    99b4:	0affff62 	beq	9744 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x2f8>
    99b8:	e5941004 	ldr	r1, [r4, #4]
    99bc:	e1500001 	cmp	r0, r1
    99c0:	9a000064 	bls	9b58 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x70c>
    99c4:	e2819001 	add	r9, r1, #1
    99c8:	e5849004 	str	r9, [r4, #4]
    99cc:	e3e09000 	mvn	r9, #0
    99d0:	e087c201 	add	ip, r7, r1, lsl #4
    99d4:	e594e008 	ldr	lr, [r4, #8]
    99d8:	e58c9004 	str	r9, [ip, #4]
    99dc:	e58c9008 	str	r9, [ip, #8]
    99e0:	e3a09000 	mov	r9, #0
    99e4:	e37e0001 	cmn	lr, #1
    99e8:	e58c900c 	str	r9, [ip, #12]
    99ec:	1087e20e 	addne	lr, r7, lr, lsl #4
    99f0:	159e900c 	ldrne	r9, [lr, #12]
    99f4:	12899001 	addne	r9, r9, #1
    99f8:	158e900c 	strne	r9, [lr, #12]
    99fc:	e353007b 	cmp	r3, #123	; 0x7b
    9a00:	13a03002 	movne	r3, #2
    9a04:	03a03001 	moveq	r3, #1
    9a08:	e594e000 	ldr	lr, [r4]
    9a0c:	e7c73201 	strb	r3, [r7, r1, lsl #4]
    9a10:	e58c5004 	str	r5, [ip, #4]
    9a14:	e5841008 	str	r1, [r4, #8]
    9a18:	eafffea5 	b	94b4 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x68>
    9a1c:	e3570000 	cmp	r7, #0
    9a20:	e594e000 	ldr	lr, [r4]
    9a24:	0afffea2 	beq	94b4 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x68>
    9a28:	e5943008 	ldr	r3, [r4, #8]
    9a2c:	e3730001 	cmn	r3, #1
    9a30:	0afffe9f 	beq	94b4 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x68>
    9a34:	e7d73203 	ldrb	r3, [r7, r3, lsl #4]
    9a38:	e2433001 	sub	r3, r3, #1
    9a3c:	e3530001 	cmp	r3, #1
    9a40:	9afffe9b 	bls	94b4 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x68>
    9a44:	e5943004 	ldr	r3, [r4, #4]
    9a48:	e253c001 	subs	ip, r3, #1
    9a4c:	4afffe98 	bmi	94b4 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x68>
    9a50:	e0873203 	add	r3, r7, r3, lsl #4
    9a54:	ea000003 	b	9a68 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x61c>
    9a58:	e24cc001 	sub	ip, ip, #1
    9a5c:	e37c0001 	cmn	ip, #1
    9a60:	e2433010 	sub	r3, r3, #16
    9a64:	0afffe92 	beq	94b4 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x68>
    9a68:	e5531010 	ldrb	r1, [r3, #-16]
    9a6c:	e2411001 	sub	r1, r1, #1
    9a70:	e3510001 	cmp	r1, #1
    9a74:	8afffff7 	bhi	9a58 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x60c>
    9a78:	e513100c 	ldr	r1, [r3, #-12]
    9a7c:	e3710001 	cmn	r1, #1
    9a80:	0afffff4 	beq	9a58 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x60c>
    9a84:	e5131008 	ldr	r1, [r3, #-8]
    9a88:	e3710001 	cmn	r1, #1
    9a8c:	1afffff1 	bne	9a58 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x60c>
    9a90:	e584c008 	str	ip, [r4, #8]
    9a94:	eafffe86 	b	94b4 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x68>
    9a98:	e5dce000 	ldrb	lr, [ip]
    9a9c:	e15e000b 	cmp	lr, fp
    9aa0:	1a000031 	bne	9b6c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x720>
    9aa4:	e2855001 	add	r5, r5, #1
    9aa8:	e5849008 	str	r9, [r4, #8]
    9aac:	e594e000 	ldr	lr, [r4]
    9ab0:	e0873201 	add	r3, r7, r1, lsl #4
    9ab4:	e58c5008 	str	r5, [ip, #8]
    9ab8:	ea000003 	b	9acc <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x680>
    9abc:	e2411001 	sub	r1, r1, #1
    9ac0:	e3710001 	cmn	r1, #1
    9ac4:	e2433010 	sub	r3, r3, #16
    9ac8:	0afffe79 	beq	94b4 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x68>
    9acc:	e593c004 	ldr	ip, [r3, #4]
    9ad0:	e37c0001 	cmn	ip, #1
    9ad4:	0afffff8 	beq	9abc <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x670>
    9ad8:	e593c008 	ldr	ip, [r3, #8]
    9adc:	e37c0001 	cmn	ip, #1
    9ae0:	1afffff5 	bne	9abc <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x670>
    9ae4:	e5841008 	str	r1, [r4, #8]
    9ae8:	eafffe71 	b	94b4 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x68>
    9aec:	e3570000 	cmp	r7, #0
    9af0:	0a000015 	beq	9b4c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x700>
    9af4:	e594c004 	ldr	ip, [r4, #4]
    9af8:	e150000c 	cmp	r0, ip
    9afc:	9a000017 	bls	9b60 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x714>
    9b00:	e3a05000 	mov	r5, #0
    9b04:	e28ce001 	add	lr, ip, #1
    9b08:	e584e004 	str	lr, [r4, #4]
    9b0c:	e087e20c 	add	lr, r7, ip, lsl #4
    9b10:	e5943008 	ldr	r3, [r4, #8]
    9b14:	e58e500c 	str	r5, [lr, #12]
    9b18:	e3a05003 	mov	r5, #3
    9b1c:	e3730001 	cmn	r3, #1
    9b20:	e7c7520c 	strb	r5, [r7, ip, lsl #4]
    9b24:	e2888001 	add	r8, r8, #1
    9b28:	e58e9004 	str	r9, [lr, #4]
    9b2c:	e58e1008 	str	r1, [lr, #8]
    9b30:	0affff03 	beq	9744 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x2f8>
    9b34:	e0873203 	add	r3, r7, r3, lsl #4
    9b38:	e593100c 	ldr	r1, [r3, #12]
    9b3c:	e594e000 	ldr	lr, [r4]
    9b40:	e2811001 	add	r1, r1, #1
    9b44:	e583100c 	str	r1, [r3, #12]
    9b48:	eafffe59 	b	94b4 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x68>
    9b4c:	e2888001 	add	r8, r8, #1
    9b50:	e594e000 	ldr	lr, [r4]
    9b54:	eafffe56 	b	94b4 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x68>
    9b58:	e3e08000 	mvn	r8, #0
    9b5c:	eafffef0 	b	9724 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x2d8>
    9b60:	e5845000 	str	r5, [r4]
    9b64:	e3e08000 	mvn	r8, #0
    9b68:	eafffeed 	b	9724 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x2d8>
    9b6c:	e58db004 	str	fp, [sp, #4]
    9b70:	e58de000 	str	lr, [sp]
    9b74:	e59f2028 	ldr	r2, [pc, #40]	; 9ba4 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x758>
    9b78:	e3a01003 	mov	r1, #3
    9b7c:	e59f000c 	ldr	r0, [pc, #12]	; 9b90 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x744>
    9b80:	ebfffd7f 	bl	9184 <LogWrite(char const*, unsigned int, char const*, ...)>
    9b84:	e3e08001 	mvn	r8, #1
    9b88:	eafffee5 	b	9724 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x2d8>
    9b8c:	0001421c 	.word	0x0001421c
    9b90:	0001419c 	.word	0x0001419c
    9b94:	00014244 	.word	0x00014244
    9b98:	000141c4 	.word	0x000141c4
    9b9c:	00014208 	.word	0x00014208
    9ba0:	0001426c 	.word	0x0001426c
    9ba4:	000141a4 	.word	0x000141a4

00009ba8 <OTAUpdate::performUpdate(unsigned char*, int)>:
    9ba8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    9bac:	e59f911c 	ldr	r9, [pc, #284]	; 9cd0 <OTAUpdate::performUpdate(unsigned char*, int)+0x128>
    9bb0:	e24dd008 	sub	sp, sp, #8
    9bb4:	e5995000 	ldr	r5, [r9]
    9bb8:	e1a0a000 	mov	sl, r0
    9bbc:	e2855050 	add	r5, r5, #80	; 0x50
    9bc0:	e0856001 	add	r6, r5, r1
    9bc4:	e1a00006 	mov	r0, r6
    9bc8:	e1a07001 	mov	r7, r1
    9bcc:	eb0022ff 	bl	127d0 <operator new[](unsigned int)>
    9bd0:	e1a05000 	mov	r5, r0
    9bd4:	e5992000 	ldr	r2, [r9]
    9bd8:	e59f10f4 	ldr	r1, [pc, #244]	; 9cd4 <OTAUpdate::performUpdate(unsigned char*, int)+0x12c>
    9bdc:	eb0020ae 	bl	11e9c <memcpy>
    9be0:	e5998000 	ldr	r8, [r9]
    9be4:	e1a02007 	mov	r2, r7
    9be8:	e0858008 	add	r8, r5, r8
    9bec:	e1a0100a 	mov	r1, sl
    9bf0:	e1a00008 	mov	r0, r8
    9bf4:	eb0020a8 	bl	11e9c <memcpy>
    9bf8:	e5992000 	ldr	r2, [r9]
    9bfc:	e59f40d4 	ldr	r4, [pc, #212]	; 9cd8 <OTAUpdate::performUpdate(unsigned char*, int)+0x130>
    9c00:	e0872002 	add	r2, r7, r2
    9c04:	e1a03005 	mov	r3, r5
    9c08:	e58d2000 	str	r2, [sp]
    9c0c:	e1a00004 	mov	r0, r4
    9c10:	e59f20c4 	ldr	r2, [pc, #196]	; 9cdc <OTAUpdate::performUpdate(unsigned char*, int)+0x134>
    9c14:	e3a01004 	mov	r1, #4
    9c18:	ebfffd59 	bl	9184 <LogWrite(char const*, unsigned int, char const*, ...)>
    9c1c:	e1a00004 	mov	r0, r4
    9c20:	e59f20b8 	ldr	r2, [pc, #184]	; 9ce0 <OTAUpdate::performUpdate(unsigned char*, int)+0x138>
    9c24:	e3a01004 	mov	r1, #4
    9c28:	ebfffd55 	bl	9184 <LogWrite(char const*, unsigned int, char const*, ...)>
    9c2c:	e1a02004 	mov	r2, r4
    9c30:	e1a0000a 	mov	r0, sl
    9c34:	e3a01080 	mov	r1, #128	; 0x80
    9c38:	eb00045a 	bl	ada8 <debug_hexdump(void const*, unsigned int, char const*)>
    9c3c:	e1a00004 	mov	r0, r4
    9c40:	e59f209c 	ldr	r2, [pc, #156]	; 9ce4 <OTAUpdate::performUpdate(unsigned char*, int)+0x13c>
    9c44:	e3a01004 	mov	r1, #4
    9c48:	ebfffd4d 	bl	9184 <LogWrite(char const*, unsigned int, char const*, ...)>
    9c4c:	e1a02004 	mov	r2, r4
    9c50:	e3a01080 	mov	r1, #128	; 0x80
    9c54:	e3a00902 	mov	r0, #32768	; 0x8000
    9c58:	eb000452 	bl	ada8 <debug_hexdump(void const*, unsigned int, char const*)>
    9c5c:	e1a00004 	mov	r0, r4
    9c60:	e59f2080 	ldr	r2, [pc, #128]	; 9ce8 <OTAUpdate::performUpdate(unsigned char*, int)+0x140>
    9c64:	e3a01004 	mov	r1, #4
    9c68:	ebfffd45 	bl	9184 <LogWrite(char const*, unsigned int, char const*, ...)>
    9c6c:	e1a02004 	mov	r2, r4
    9c70:	e1a00005 	mov	r0, r5
    9c74:	e3a01080 	mov	r1, #128	; 0x80
    9c78:	eb00044a 	bl	ada8 <debug_hexdump(void const*, unsigned int, char const*)>
    9c7c:	e3a03000 	mov	r3, #0
    9c80:	e59f2064 	ldr	r2, [pc, #100]	; 9cec <OTAUpdate::performUpdate(unsigned char*, int)+0x144>
    9c84:	e3a01004 	mov	r1, #4
    9c88:	e1a00004 	mov	r0, r4
    9c8c:	ebfffd3c 	bl	9184 <LogWrite(char const*, unsigned int, char const*, ...)>
    9c90:	e3a00f7d 	mov	r0, #500	; 0x1f4
    9c94:	eb001ec6 	bl	117b4 <CTimer::SimpleMsDelay(unsigned int)>
    9c98:	eb0022c3 	bl	127ac <SyncDataAndInstructionCache>
    9c9c:	e3a03902 	mov	r3, #32768	; 0x8000
    9ca0:	e0855006 	add	r5, r5, r6
    9ca4:	e1a01008 	mov	r1, r8
    9ca8:	e1a02007 	mov	r2, r7
    9cac:	e1a00003 	mov	r0, r3
    9cb0:	e58d5000 	str	r5, [sp]
    9cb4:	eb00001d 	bl	9d30 <lowlevBlockCopyExecRelocatable>
    9cb8:	e1a00004 	mov	r0, r4
    9cbc:	e3a01004 	mov	r1, #4
    9cc0:	e59f2028 	ldr	r2, [pc, #40]	; 9cf0 <OTAUpdate::performUpdate(unsigned char*, int)+0x148>
    9cc4:	e28dd008 	add	sp, sp, #8
    9cc8:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    9ccc:	eafffd2c 	b	9184 <LogWrite(char const*, unsigned int, char const*, ...)>
    9cd0:	00009d40 	.word	0x00009d40
    9cd4:	00009d30 	.word	0x00009d30
    9cd8:	00014294 	.word	0x00014294
    9cdc:	000142a0 	.word	0x000142a0
    9ce0:	000142c4 	.word	0x000142c4
    9ce4:	000142cc 	.word	0x000142cc
    9ce8:	000142d4 	.word	0x000142d4
    9cec:	000142e0 	.word	0x000142e0
    9cf0:	000142fc 	.word	0x000142fc

00009cf4 <lowlevDisableIRQ>:
    9cf4:	f10c0080 	cpsid	i
    9cf8:	e12fff1e 	bx	lr

00009cfc <lowlevEnableIRQ>:
    9cfc:	f1080080 	cpsie	i
    9d00:	e12fff1e 	bx	lr

00009d04 <lowlevDisableFIQ>:
    9d04:	f10c0040 	cpsid	f
    9d08:	e12fff1e 	bx	lr

00009d0c <lowlevEnableFIQ>:
    9d0c:	f1080040 	cpsie	f
    9d10:	e12fff1e 	bx	lr

00009d14 <lowlevCycleDelay>:
    9d14:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
    9d18:	e1a00000 	nop			; (mov r0, r0)
    9d1c:	e1a000c0 	asr	r0, r0, #1

00009d20 <loopit>:
    9d20:	e2500001 	subs	r0, r0, #1
    9d24:	1afffffd 	bne	9d20 <loopit>
    9d28:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
    9d2c:	e12fff1e 	bx	lr

00009d30 <lowlevBlockCopyExecRelocatable>:
    9d30:	e59f0030 	ldr	r0, [pc, #48]	; 9d68 <lowlevStoreAbs8+0x14>
    9d34:	e3a01902 	mov	r1, #32768	; 0x8000
    9d38:	e5801000 	str	r1, [r0]
    9d3c:	e12fff1e 	bx	lr

00009d40 <lowlevBlockCopyExecRelocatableLen>:
    9d40:	00000010 	.word	0x00000010
    9d44:	e12fff1e 	bx	lr

00009d48 <lowlevGoto>:
    9d48:	e1a00000 	nop			; (mov r0, r0)
    9d4c:	e12fff10 	bx	r0
    9d50:	e12fff1e 	bx	lr

00009d54 <lowlevStoreAbs8>:
    9d54:	e1a00000 	nop			; (mov r0, r0)
    9d58:	e1a01001 	mov	r1, r1
    9d5c:	e5c01000 	strb	r1, [r0]
    9d60:	e12fff1e 	bx	lr
    9d64:	e12fff1e 	bx	lr
    9d68:	20200020 	.word	0x20200020

00009d6c <CommandHandler::static_hdlcPutCh(unsigned char)>:
    9d6c:	e59f3038 	ldr	r3, [pc, #56]	; 9dac <CommandHandler::static_hdlcPutCh(unsigned char)+0x40>
    9d70:	e5932000 	ldr	r2, [r3]
    9d74:	e3520000 	cmp	r2, #0
    9d78:	012fff1e 	bxeq	lr
    9d7c:	e5932004 	ldr	r2, [r3, #4]
    9d80:	e3520000 	cmp	r2, #0
    9d84:	012fff1e 	bxeq	lr
    9d88:	e1a03000 	mov	r3, r0
    9d8c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    9d90:	e24dd00c 	sub	sp, sp, #12
    9d94:	e28d0008 	add	r0, sp, #8
    9d98:	e5603004 	strb	r3, [r0, #-4]!
    9d9c:	e3a01001 	mov	r1, #1
    9da0:	e12fff32 	blx	r2
    9da4:	e28dd00c 	add	sp, sp, #12
    9da8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    9dac:	00016670 	.word	0x00016670

00009db0 <CommandHandler::CommandHandler()>:
    9db0:	e92d4030 	push	{r4, r5, lr}
    9db4:	e3a04000 	mov	r4, #0
    9db8:	e1a05000 	mov	r5, r0
    9dbc:	e24dd00c 	sub	sp, sp, #12
    9dc0:	e58d4000 	str	r4, [sp]
    9dc4:	e3a03001 	mov	r3, #1
    9dc8:	e59f2040 	ldr	r2, [pc, #64]	; 9e10 <CommandHandler::CommandHandler()+0x60>
    9dcc:	e59f1040 	ldr	r1, [pc, #64]	; 9e14 <CommandHandler::CommandHandler()+0x64>
    9dd0:	e2800008 	add	r0, r0, #8
    9dd4:	eb000172 	bl	a3a4 <MiniHDLC::MiniHDLC(void (*)(unsigned char), void (*)(unsigned char const*, int), bool, bool)>
    9dd8:	e1a00005 	mov	r0, r5
    9ddc:	e59f2034 	ldr	r2, [pc, #52]	; 9e18 <CommandHandler::CommandHandler()+0x68>
    9de0:	e2853901 	add	r3, r5, #16384	; 0x4000
    9de4:	e5834f9c 	str	r4, [r3, #3996]	; 0xf9c
    9de8:	e5834fa0 	str	r4, [r3, #4000]	; 0xfa0
    9dec:	e5834fa4 	str	r4, [r3, #4004]	; 0xfa4
    9df0:	e5834fa8 	str	r4, [r3, #4008]	; 0xfa8
    9df4:	e5824004 	str	r4, [r2, #4]
    9df8:	e5824008 	str	r4, [r2, #8]
    9dfc:	e5825000 	str	r5, [r2]
    9e00:	e5854004 	str	r4, [r5, #4]
    9e04:	e5854000 	str	r4, [r5]
    9e08:	e28dd00c 	add	sp, sp, #12
    9e0c:	e8bd8030 	pop	{r4, r5, pc}
    9e10:	0000a2f0 	.word	0x0000a2f0
    9e14:	00009d6c 	.word	0x00009d6c
    9e18:	00016670 	.word	0x00016670

00009e1c <CommandHandler::~CommandHandler()>:
    9e1c:	e12fff1e 	bx	lr

00009e20 <CommandHandler::handleBuffer(unsigned char const*, int)>:
    9e20:	e2800008 	add	r0, r0, #8
    9e24:	ea0001b9 	b	a510 <MiniHDLC::handleBuffer(unsigned char const*, int)>

00009e28 <CommandHandler::hdlcPutCh(unsigned char)>:
    9e28:	e59f3028 	ldr	r3, [pc, #40]	; 9e58 <CommandHandler::hdlcPutCh(unsigned char)+0x30>
    9e2c:	e5933004 	ldr	r3, [r3, #4]
    9e30:	e3530000 	cmp	r3, #0
    9e34:	012fff1e 	bxeq	lr
    9e38:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    9e3c:	e24dd00c 	sub	sp, sp, #12
    9e40:	e28d0008 	add	r0, sp, #8
    9e44:	e5601004 	strb	r1, [r0, #-4]!
    9e48:	e3a01001 	mov	r1, #1
    9e4c:	e12fff33 	blx	r3
    9e50:	e28dd00c 	add	sp, sp, #12
    9e54:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    9e58:	00016670 	.word	0x00016670

00009e5c <CommandHandler::handleFileStart(char const*, unsigned char const*, int)>:
    9e5c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9e60:	e2804c4e 	add	r4, r0, #19968	; 0x4e00
    9e64:	e2846044 	add	r6, r4, #68	; 0x44
    9e68:	e24dd018 	sub	sp, sp, #24
    9e6c:	e1a05000 	mov	r5, r0
    9e70:	e1a02006 	mov	r2, r6
    9e74:	e3a03064 	mov	r3, #100	; 0x64
    9e78:	e59f011c 	ldr	r0, [pc, #284]	; 9f9c <CommandHandler::handleFileStart(char const*, unsigned char const*, int)+0x140>
    9e7c:	e1a07001 	mov	r7, r1
    9e80:	ebfffd01 	bl	928c <jsonGetValueForKey(char const*, char const*, char*, int)>
    9e84:	e3500000 	cmp	r0, #0
    9e88:	1a000001 	bne	9e94 <CommandHandler::handleFileStart(char const*, unsigned char const*, int)+0x38>
    9e8c:	e28dd018 	add	sp, sp, #24
    9e90:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9e94:	e2855901 	add	r5, r5, #16384	; 0x4000
    9e98:	e5952f9c 	ldr	r2, [r5, #3996]	; 0xf9c
    9e9c:	e1a03006 	mov	r3, r6
    9ea0:	e58d2000 	str	r2, [sp]
    9ea4:	e3a01003 	mov	r1, #3
    9ea8:	e59f20f0 	ldr	r2, [pc, #240]	; 9fa0 <CommandHandler::handleFileStart(char const*, unsigned char const*, int)+0x144>
    9eac:	e59f00f0 	ldr	r0, [pc, #240]	; 9fa4 <CommandHandler::handleFileStart(char const*, unsigned char const*, int)+0x148>
    9eb0:	ebfffcb3 	bl	9184 <LogWrite(char const*, unsigned int, char const*, ...)>
    9eb4:	e3a03028 	mov	r3, #40	; 0x28
    9eb8:	e28420a9 	add	r2, r4, #169	; 0xa9
    9ebc:	e1a01007 	mov	r1, r7
    9ec0:	e59f00e0 	ldr	r0, [pc, #224]	; 9fa8 <CommandHandler::handleFileStart(char const*, unsigned char const*, int)+0x14c>
    9ec4:	ebfffcf0 	bl	928c <jsonGetValueForKey(char const*, char const*, char*, int)>
    9ec8:	e3500000 	cmp	r0, #0
    9ecc:	0affffee 	beq	9e8c <CommandHandler::handleFileStart(char const*, unsigned char const*, int)+0x30>
    9ed0:	e1a03006 	mov	r3, r6
    9ed4:	e59f20d0 	ldr	r2, [pc, #208]	; 9fac <CommandHandler::handleFileStart(char const*, unsigned char const*, int)+0x150>
    9ed8:	e3a01003 	mov	r1, #3
    9edc:	e59f00c0 	ldr	r0, [pc, #192]	; 9fa4 <CommandHandler::handleFileStart(char const*, unsigned char const*, int)+0x148>
    9ee0:	ebfffca7 	bl	9184 <LogWrite(char const*, unsigned int, char const*, ...)>
    9ee4:	e28d200c 	add	r2, sp, #12
    9ee8:	e3a0300a 	mov	r3, #10
    9eec:	e1a01007 	mov	r1, r7
    9ef0:	e59f00b8 	ldr	r0, [pc, #184]	; 9fb0 <CommandHandler::handleFileStart(char const*, unsigned char const*, int)+0x154>
    9ef4:	ebfffce4 	bl	928c <jsonGetValueForKey(char const*, char const*, char*, int)>
    9ef8:	e3500000 	cmp	r0, #0
    9efc:	0affffe2 	beq	9e8c <CommandHandler::handleFileStart(char const*, unsigned char const*, int)+0x30>
    9f00:	e28d300c 	add	r3, sp, #12
    9f04:	e59f20a8 	ldr	r2, [pc, #168]	; 9fb4 <CommandHandler::handleFileStart(char const*, unsigned char const*, int)+0x158>
    9f08:	e3a01003 	mov	r1, #3
    9f0c:	e59f0090 	ldr	r0, [pc, #144]	; 9fa4 <CommandHandler::handleFileStart(char const*, unsigned char const*, int)+0x148>
    9f10:	ebfffc9b 	bl	9184 <LogWrite(char const*, unsigned int, char const*, ...)>
    9f14:	e28d000c 	add	r0, sp, #12
    9f18:	e3a0200a 	mov	r2, #10
    9f1c:	e3a01000 	mov	r1, #0
    9f20:	eb001f7b 	bl	11d14 <strtoul>
    9f24:	e2508000 	subs	r8, r0, #0
    9f28:	daffffd7 	ble	9e8c <CommandHandler::handleFileStart(char const*, unsigned char const*, int)+0x30>
    9f2c:	e1a03008 	mov	r3, r8
    9f30:	e59f2080 	ldr	r2, [pc, #128]	; 9fb8 <CommandHandler::handleFileStart(char const*, unsigned char const*, int)+0x15c>
    9f34:	e3a01003 	mov	r1, #3
    9f38:	e59f0064 	ldr	r0, [pc, #100]	; 9fa4 <CommandHandler::handleFileStart(char const*, unsigned char const*, int)+0x148>
    9f3c:	ebfffc90 	bl	9184 <LogWrite(char const*, unsigned int, char const*, ...)>
    9f40:	e1a01007 	mov	r1, r7
    9f44:	e28400d2 	add	r0, r4, #210	; 0xd2
    9f48:	e3a020c8 	mov	r2, #200	; 0xc8
    9f4c:	ebfffcbd 	bl	9248 <strlcpy(char*, char const*, unsigned int)>
    9f50:	e5950f9c 	ldr	r0, [r5, #3996]	; 0xf9c
    9f54:	e3500000 	cmp	r0, #0
    9f58:	0a000000 	beq	9f60 <CommandHandler::handleFileStart(char const*, unsigned char const*, int)+0x104>
    9f5c:	eb00221d 	bl	127d8 <operator delete[](void*)>
    9f60:	e1a00008 	mov	r0, r8
    9f64:	eb002219 	bl	127d0 <operator new[](unsigned int)>
    9f68:	e3a02000 	mov	r2, #0
    9f6c:	e5850f9c 	str	r0, [r5, #3996]	; 0xf9c
    9f70:	e1a03006 	mov	r3, r6
    9f74:	e58d0000 	str	r0, [sp]
    9f78:	e3a01003 	mov	r1, #3
    9f7c:	e5858fa0 	str	r8, [r5, #4000]	; 0xfa0
    9f80:	e59f001c 	ldr	r0, [pc, #28]	; 9fa4 <CommandHandler::handleFileStart(char const*, unsigned char const*, int)+0x148>
    9f84:	e58d8004 	str	r8, [sp, #4]
    9f88:	e5852fa4 	str	r2, [r5, #4004]	; 0xfa4
    9f8c:	e5852fa8 	str	r2, [r5, #4008]	; 0xfa8
    9f90:	e59f2024 	ldr	r2, [pc, #36]	; 9fbc <CommandHandler::handleFileStart(char const*, unsigned char const*, int)+0x160>
    9f94:	ebfffc7a 	bl	9184 <LogWrite(char const*, unsigned int, char const*, ...)>
    9f98:	eaffffbb 	b	9e8c <CommandHandler::handleFileStart(char const*, unsigned char const*, int)+0x30>
    9f9c:	00014318 	.word	0x00014318
    9fa0:	00014324 	.word	0x00014324
    9fa4:	00014308 	.word	0x00014308
    9fa8:	00014340 	.word	0x00014340
    9fac:	0001434c 	.word	0x0001434c
    9fb0:	00014360 	.word	0x00014360
    9fb4:	00014368 	.word	0x00014368
    9fb8:	00014380 	.word	0x00014380
    9fbc:	00014394 	.word	0x00014394

00009fc0 <CommandHandler::handleFileBlock(char const*, unsigned char const*, int)>:
    9fc0:	e92d4070 	push	{r4, r5, r6, lr}
    9fc4:	e2806901 	add	r6, r0, #16384	; 0x4000
    9fc8:	e5960f9c 	ldr	r0, [r6, #3996]	; 0xf9c
    9fcc:	e24dd018 	sub	sp, sp, #24
    9fd0:	e3500000 	cmp	r0, #0
    9fd4:	0a000007 	beq	9ff8 <CommandHandler::handleFileBlock(char const*, unsigned char const*, int)+0x38>
    9fd8:	e1a05003 	mov	r5, r3
    9fdc:	e1a04002 	mov	r4, r2
    9fe0:	e3a0300a 	mov	r3, #10
    9fe4:	e28d200c 	add	r2, sp, #12
    9fe8:	e59f007c 	ldr	r0, [pc, #124]	; a06c <CommandHandler::handleFileBlock(char const*, unsigned char const*, int)+0xac>
    9fec:	ebfffca6 	bl	928c <jsonGetValueForKey(char const*, char const*, char*, int)>
    9ff0:	e3500000 	cmp	r0, #0
    9ff4:	1a000001 	bne	a000 <CommandHandler::handleFileBlock(char const*, unsigned char const*, int)+0x40>
    9ff8:	e28dd018 	add	sp, sp, #24
    9ffc:	e8bd8070 	pop	{r4, r5, r6, pc}
    a000:	e28d000c 	add	r0, sp, #12
    a004:	e3a0200a 	mov	r2, #10
    a008:	e3a01000 	mov	r1, #0
    a00c:	eb001f40 	bl	11d14 <strtoul>
    a010:	e3500000 	cmp	r0, #0
    a014:	bafffff7 	blt	9ff8 <CommandHandler::handleFileBlock(char const*, unsigned char const*, int)+0x38>
    a018:	e5963fa0 	ldr	r3, [r6, #4000]	; 0xfa0
    a01c:	e0802005 	add	r2, r0, r5
    a020:	e1520003 	cmp	r2, r3
    a024:	cafffff3 	bgt	9ff8 <CommandHandler::handleFileBlock(char const*, unsigned char const*, int)+0x38>
    a028:	e5963f9c 	ldr	r3, [r6, #3996]	; 0xf9c
    a02c:	e1a01004 	mov	r1, r4
    a030:	e1a02005 	mov	r2, r5
    a034:	e0830000 	add	r0, r3, r0
    a038:	eb001f97 	bl	11e9c <memcpy>
    a03c:	e5963fa4 	ldr	r3, [r6, #4004]	; 0xfa4
    a040:	e5961fa8 	ldr	r1, [r6, #4008]	; 0xfa8
    a044:	e0853003 	add	r3, r5, r3
    a048:	e2811001 	add	r1, r1, #1
    a04c:	e5861fa8 	str	r1, [r6, #4008]	; 0xfa8
    a050:	e5863fa4 	str	r3, [r6, #4004]	; 0xfa4
    a054:	e59f2014 	ldr	r2, [pc, #20]	; a070 <CommandHandler::handleFileBlock(char const*, unsigned char const*, int)+0xb0>
    a058:	e58d1000 	str	r1, [sp]
    a05c:	e59f0010 	ldr	r0, [pc, #16]	; a074 <CommandHandler::handleFileBlock(char const*, unsigned char const*, int)+0xb4>
    a060:	e3a01004 	mov	r1, #4
    a064:	ebfffc46 	bl	9184 <LogWrite(char const*, unsigned int, char const*, ...)>
    a068:	eaffffe2 	b	9ff8 <CommandHandler::handleFileBlock(char const*, unsigned char const*, int)+0x38>
    a06c:	000143bc 	.word	0x000143bc
    a070:	000143c4 	.word	0x000143c4
    a074:	00014308 	.word	0x00014308

0000a078 <CommandHandler::handleFileEnd(char const*, unsigned char const*, int)>:
    a078:	e92d4070 	push	{r4, r5, r6, lr}
    a07c:	e2805901 	add	r5, r0, #16384	; 0x4000
    a080:	e5953f9c 	ldr	r3, [r5, #3996]	; 0xf9c
    a084:	e24dd018 	sub	sp, sp, #24
    a088:	e3530000 	cmp	r3, #0
    a08c:	0a000006 	beq	a0ac <CommandHandler::handleFileEnd(char const*, unsigned char const*, int)+0x34>
    a090:	e1a04000 	mov	r4, r0
    a094:	e28d200c 	add	r2, sp, #12
    a098:	e3a0300a 	mov	r3, #10
    a09c:	e59f00ac 	ldr	r0, [pc, #172]	; a150 <CommandHandler::handleFileEnd(char const*, unsigned char const*, int)+0xd8>
    a0a0:	ebfffc79 	bl	928c <jsonGetValueForKey(char const*, char const*, char*, int)>
    a0a4:	e3500000 	cmp	r0, #0
    a0a8:	1a000001 	bne	a0b4 <CommandHandler::handleFileEnd(char const*, unsigned char const*, int)+0x3c>
    a0ac:	e28dd018 	add	sp, sp, #24
    a0b0:	e8bd8070 	pop	{r4, r5, r6, pc}
    a0b4:	e3a0200a 	mov	r2, #10
    a0b8:	e28d000c 	add	r0, sp, #12
    a0bc:	e3a01000 	mov	r1, #0
    a0c0:	eb001f13 	bl	11d14 <strtoul>
    a0c4:	e5952fa8 	ldr	r2, [r5, #4008]	; 0xfa8
    a0c8:	e2844c4e 	add	r4, r4, #19968	; 0x4e00
    a0cc:	e1520000 	cmp	r2, r0
    a0d0:	e2846044 	add	r6, r4, #68	; 0x44
    a0d4:	0a000008 	beq	a0fc <CommandHandler::handleFileEnd(char const*, unsigned char const*, int)+0x84>
    a0d8:	e58d0004 	str	r0, [sp, #4]
    a0dc:	e58d2000 	str	r2, [sp]
    a0e0:	e1a03006 	mov	r3, r6
    a0e4:	e59f2068 	ldr	r2, [pc, #104]	; a154 <CommandHandler::handleFileEnd(char const*, unsigned char const*, int)+0xdc>
    a0e8:	e3a01002 	mov	r1, #2
    a0ec:	e59f0064 	ldr	r0, [pc, #100]	; a158 <CommandHandler::handleFileEnd(char const*, unsigned char const*, int)+0xe0>
    a0f0:	ebfffc23 	bl	9184 <LogWrite(char const*, unsigned int, char const*, ...)>
    a0f4:	e28dd018 	add	sp, sp, #24
    a0f8:	e8bd8070 	pop	{r4, r5, r6, pc}
    a0fc:	e28400a9 	add	r0, r4, #169	; 0xa9
    a100:	e59f1054 	ldr	r1, [pc, #84]	; a15c <CommandHandler::handleFileEnd(char const*, unsigned char const*, int)+0xe4>
    a104:	eb001e37 	bl	119e8 <strcasecmp>
    a108:	e5952fa4 	ldr	r2, [r5, #4004]	; 0xfa4
    a10c:	e3500000 	cmp	r0, #0
    a110:	e1a03006 	mov	r3, r6
    a114:	e58d2000 	str	r2, [sp]
    a118:	1a000007 	bne	a13c <CommandHandler::handleFileEnd(char const*, unsigned char const*, int)+0xc4>
    a11c:	e59f203c 	ldr	r2, [pc, #60]	; a160 <CommandHandler::handleFileEnd(char const*, unsigned char const*, int)+0xe8>
    a120:	e3a01004 	mov	r1, #4
    a124:	e59f002c 	ldr	r0, [pc, #44]	; a158 <CommandHandler::handleFileEnd(char const*, unsigned char const*, int)+0xe0>
    a128:	ebfffc15 	bl	9184 <LogWrite(char const*, unsigned int, char const*, ...)>
    a12c:	e5951fa4 	ldr	r1, [r5, #4004]	; 0xfa4
    a130:	e5950f9c 	ldr	r0, [r5, #3996]	; 0xf9c
    a134:	ebfffe9b 	bl	9ba8 <OTAUpdate::performUpdate(unsigned char*, int)>
    a138:	eaffffdb 	b	a0ac <CommandHandler::handleFileEnd(char const*, unsigned char const*, int)+0x34>
    a13c:	e59f2020 	ldr	r2, [pc, #32]	; a164 <CommandHandler::handleFileEnd(char const*, unsigned char const*, int)+0xec>
    a140:	e3a01004 	mov	r1, #4
    a144:	e59f000c 	ldr	r0, [pc, #12]	; a158 <CommandHandler::handleFileEnd(char const*, unsigned char const*, int)+0xe0>
    a148:	ebfffc0d 	bl	9184 <LogWrite(char const*, unsigned int, char const*, ...)>
    a14c:	eaffffd6 	b	a0ac <CommandHandler::handleFileEnd(char const*, unsigned char const*, int)+0x34>
    a150:	000143e0 	.word	0x000143e0
    a154:	000143ec 	.word	0x000143ec
    a158:	00014308 	.word	0x00014308
    a15c:	00014418 	.word	0x00014418
    a160:	00014424 	.word	0x00014424
    a164:	00014450 	.word	0x00014450

0000a168 <CommandHandler::processCommand(char const*, unsigned char const*, int)>:
    a168:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    a16c:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    a170:	e1a05000 	mov	r5, r0
    a174:	e1a06002 	mov	r6, r2
    a178:	e1a07003 	mov	r7, r3
    a17c:	e28d2008 	add	r2, sp, #8
    a180:	e3a0301e 	mov	r3, #30
    a184:	e59f00c8 	ldr	r0, [pc, #200]	; a254 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0xec>
    a188:	e1a04001 	mov	r4, r1
    a18c:	ebfffc3e 	bl	928c <jsonGetValueForKey(char const*, char const*, char*, int)>
    a190:	e3500000 	cmp	r0, #0
    a194:	1a000001 	bne	a1a0 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x38>
    a198:	e28dd02c 	add	sp, sp, #44	; 0x2c
    a19c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    a1a0:	e28d3008 	add	r3, sp, #8
    a1a4:	e58d3000 	str	r3, [sp]
    a1a8:	e59f20a8 	ldr	r2, [pc, #168]	; a258 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0xf0>
    a1ac:	e1a03004 	mov	r3, r4
    a1b0:	e3a01003 	mov	r1, #3
    a1b4:	e59f00a0 	ldr	r0, [pc, #160]	; a25c <CommandHandler::processCommand(char const*, unsigned char const*, int)+0xf4>
    a1b8:	ebfffbf1 	bl	9184 <LogWrite(char const*, unsigned int, char const*, ...)>
    a1bc:	e59f109c 	ldr	r1, [pc, #156]	; a260 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0xf8>
    a1c0:	e28d0008 	add	r0, sp, #8
    a1c4:	eb001e07 	bl	119e8 <strcasecmp>
    a1c8:	e3500000 	cmp	r0, #0
    a1cc:	0a00000a 	beq	a1fc <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x94>
    a1d0:	e59f108c 	ldr	r1, [pc, #140]	; a264 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0xfc>
    a1d4:	e28d0008 	add	r0, sp, #8
    a1d8:	eb001e02 	bl	119e8 <strcasecmp>
    a1dc:	e3500000 	cmp	r0, #0
    a1e0:	1a000010 	bne	a228 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0xc0>
    a1e4:	e1a03007 	mov	r3, r7
    a1e8:	e1a02006 	mov	r2, r6
    a1ec:	e1a01004 	mov	r1, r4
    a1f0:	e1a00005 	mov	r0, r5
    a1f4:	ebffff71 	bl	9fc0 <CommandHandler::handleFileBlock(char const*, unsigned char const*, int)>
    a1f8:	eaffffe6 	b	a198 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x30>
    a1fc:	e59f2064 	ldr	r2, [pc, #100]	; a268 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x100>
    a200:	e3a01003 	mov	r1, #3
    a204:	e59f0050 	ldr	r0, [pc, #80]	; a25c <CommandHandler::processCommand(char const*, unsigned char const*, int)+0xf4>
    a208:	ebfffbdd 	bl	9184 <LogWrite(char const*, unsigned int, char const*, ...)>
    a20c:	e1a03007 	mov	r3, r7
    a210:	e1a02006 	mov	r2, r6
    a214:	e1a01004 	mov	r1, r4
    a218:	e1a00005 	mov	r0, r5
    a21c:	ebffff0e 	bl	9e5c <CommandHandler::handleFileStart(char const*, unsigned char const*, int)>
    a220:	e28dd02c 	add	sp, sp, #44	; 0x2c
    a224:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    a228:	e28d0008 	add	r0, sp, #8
    a22c:	e59f1038 	ldr	r1, [pc, #56]	; a26c <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x104>
    a230:	eb001dec 	bl	119e8 <strcasecmp>
    a234:	e3500000 	cmp	r0, #0
    a238:	1affffd6 	bne	a198 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x30>
    a23c:	e1a03007 	mov	r3, r7
    a240:	e1a02006 	mov	r2, r6
    a244:	e1a01004 	mov	r1, r4
    a248:	e1a00005 	mov	r0, r5
    a24c:	ebffff89 	bl	a078 <CommandHandler::handleFileEnd(char const*, unsigned char const*, int)>
    a250:	eaffffd0 	b	a198 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x30>
    a254:	00014468 	.word	0x00014468
    a258:	00014470 	.word	0x00014470
    a25c:	00014308 	.word	0x00014308
    a260:	00014494 	.word	0x00014494
    a264:	000144b8 	.word	0x000144b8
    a268:	0001449c 	.word	0x0001449c
    a26c:	000144c0 	.word	0x000144c0

0000a270 <CommandHandler::hdlcFrameRx(unsigned char const*, int)>:
    a270:	e92d4070 	push	{r4, r5, r6, lr}
    a274:	e1a04002 	mov	r4, r2
    a278:	e1c020d0 	ldrd	r2, [r0]
    a27c:	e1a06001 	mov	r6, r1
    a280:	e24dd0d8 	sub	sp, sp, #216	; 0xd8
    a284:	e0843003 	add	r3, r4, r3
    a288:	e2822001 	add	r2, r2, #1
    a28c:	e1c020f0 	strd	r2, [r0]
    a290:	e1a05000 	mov	r5, r0
    a294:	e58d2000 	str	r2, [sp]
    a298:	e3a01003 	mov	r1, #3
    a29c:	e59f2044 	ldr	r2, [pc, #68]	; a2e8 <CommandHandler::hdlcFrameRx(unsigned char const*, int)+0x78>
    a2a0:	e59f0044 	ldr	r0, [pc, #68]	; a2ec <CommandHandler::hdlcFrameRx(unsigned char const*, int)+0x7c>
    a2a4:	ebfffbb6 	bl	9184 <LogWrite(char const*, unsigned int, char const*, ...)>
    a2a8:	e1a01006 	mov	r1, r6
    a2ac:	e3a020c8 	mov	r2, #200	; 0xc8
    a2b0:	e28d000c 	add	r0, sp, #12
    a2b4:	ebfffbe3 	bl	9248 <strlcpy(char*, char const*, unsigned int)>
    a2b8:	e28d000c 	add	r0, sp, #12
    a2bc:	eb001da4 	bl	11954 <strlen>
    a2c0:	e0443000 	sub	r3, r4, r0
    a2c4:	e2802001 	add	r2, r0, #1
    a2c8:	e2433001 	sub	r3, r3, #1
    a2cc:	e0862002 	add	r2, r6, r2
    a2d0:	e1c33fc3 	bic	r3, r3, r3, asr #31
    a2d4:	e28d100c 	add	r1, sp, #12
    a2d8:	e1a00005 	mov	r0, r5
    a2dc:	ebffffa1 	bl	a168 <CommandHandler::processCommand(char const*, unsigned char const*, int)>
    a2e0:	e28dd0d8 	add	sp, sp, #216	; 0xd8
    a2e4:	e8bd8070 	pop	{r4, r5, r6, pc}
    a2e8:	000144c8 	.word	0x000144c8
    a2ec:	00014308 	.word	0x00014308

0000a2f0 <CommandHandler::static_hdlcFrameRx(unsigned char const*, int)>:
    a2f0:	e59f3018 	ldr	r3, [pc, #24]	; a310 <CommandHandler::static_hdlcFrameRx(unsigned char const*, int)+0x20>
    a2f4:	e5933000 	ldr	r3, [r3]
    a2f8:	e3530000 	cmp	r3, #0
    a2fc:	012fff1e 	bxeq	lr
    a300:	e1a02001 	mov	r2, r1
    a304:	e1a01000 	mov	r1, r0
    a308:	e1a00003 	mov	r0, r3
    a30c:	eaffffd7 	b	a270 <CommandHandler::hdlcFrameRx(unsigned char const*, int)>
    a310:	00016670 	.word	0x00016670

0000a314 <CommandHandler::service()>:
    a314:	e12fff1e 	bx	lr

0000a318 <MiniHDLC::handleChar(unsigned char) [clone .part.0]>:
    a318:	e92d4010 	push	{r4, lr}
    a31c:	e5903004 	ldr	r3, [r0, #4]
    a320:	e1a04000 	mov	r4, r0
    a324:	e3530001 	cmp	r3, #1
    a328:	da00000d 	ble	a364 <MiniHDLC::handleChar(unsigned char) [clone .part.0]+0x4c>
    a32c:	e5d02001 	ldrb	r2, [r0, #1]
    a330:	e2431002 	sub	r1, r3, #2
    a334:	e0803003 	add	r3, r0, r3
    a338:	e0800001 	add	r0, r0, r1
    a33c:	e3520000 	cmp	r2, #0
    a340:	e5d33017 	ldrb	r3, [r3, #23]
    a344:	e5d02018 	ldrb	r2, [r0, #24]
    a348:	01823403 	orreq	r3, r2, r3, lsl #8
    a34c:	11833402 	orrne	r3, r3, r2, lsl #8
    a350:	e6bf3073 	sxth	r3, r3
    a354:	e1d420b8 	ldrh	r2, [r4, #8]
    a358:	e6ff3073 	uxth	r3, r3
    a35c:	e1520003 	cmp	r2, r3
    a360:	0a000005 	beq	a37c <MiniHDLC::handleChar(unsigned char) [clone .part.0]+0x64>
    a364:	e3a03000 	mov	r3, #0
    a368:	e3e02000 	mvn	r2, #0
    a36c:	e5c4300a 	strb	r3, [r4, #10]
    a370:	e5843004 	str	r3, [r4, #4]
    a374:	e1c420b8 	strh	r2, [r4, #8]
    a378:	e8bd8010 	pop	{r4, pc}
    a37c:	e3a02000 	mov	r2, #0
    a380:	e59f3018 	ldr	r3, [pc, #24]	; a3a0 <MiniHDLC::handleChar(unsigned char) [clone .part.0]+0x88>
    a384:	e5c02018 	strb	r2, [r0, #24]
    a388:	e5933000 	ldr	r3, [r3]
    a38c:	e1530002 	cmp	r3, r2
    a390:	0afffff3 	beq	a364 <MiniHDLC::handleChar(unsigned char) [clone .part.0]+0x4c>
    a394:	e2840018 	add	r0, r4, #24
    a398:	e12fff33 	blx	r3
    a39c:	eafffff0 	b	a364 <MiniHDLC::handleChar(unsigned char) [clone .part.0]+0x4c>
    a3a0:	0001667c 	.word	0x0001667c

0000a3a4 <MiniHDLC::MiniHDLC(void (*)(unsigned char), void (*)(unsigned char const*, int), bool, bool)>:
    a3a4:	e92d4030 	push	{r4, r5, lr}
    a3a8:	e3a0e000 	mov	lr, #0
    a3ac:	e3e05000 	mvn	r5, #0
    a3b0:	e59f4030 	ldr	r4, [pc, #48]	; a3e8 <MiniHDLC::MiniHDLC(void (*)(unsigned char), void (*)(unsigned char const*, int), bool, bool)+0x44>
    a3b4:	e1c050b8 	strh	r5, [r0, #8]
    a3b8:	e5842000 	str	r2, [r4]
    a3bc:	e5dd200c 	ldrb	r2, [sp, #12]
    a3c0:	e5841004 	str	r1, [r4, #4]
    a3c4:	e580e004 	str	lr, [r0, #4]
    a3c8:	e5c03001 	strb	r3, [r0, #1]
    a3cc:	e5c02000 	strb	r2, [r0]
    a3d0:	e5c0e00a 	strb	lr, [r0, #10]
    a3d4:	e5c0e00b 	strb	lr, [r0, #11]
    a3d8:	e5c0e00c 	strb	lr, [r0, #12]
    a3dc:	e580e010 	str	lr, [r0, #16]
    a3e0:	e580e014 	str	lr, [r0, #20]
    a3e4:	e8bd8030 	pop	{r4, r5, pc}
    a3e8:	0001667c 	.word	0x0001667c

0000a3ec <MiniHDLC::handleChar(unsigned char)>:
    a3ec:	e351007e 	cmp	r1, #126	; 0x7e
    a3f0:	e1a03000 	mov	r3, r0
    a3f4:	0a00001e 	beq	a474 <MiniHDLC::handleChar(unsigned char)+0x88>
    a3f8:	e5d0200a 	ldrb	r2, [r0, #10]
    a3fc:	e3520000 	cmp	r2, #0
    a400:	1a000017 	bne	a464 <MiniHDLC::handleChar(unsigned char)+0x78>
    a404:	e351007d 	cmp	r1, #125	; 0x7d
    a408:	0a00001a 	beq	a478 <MiniHDLC::handleChar(unsigned char)+0x8c>
    a40c:	e5932004 	ldr	r2, [r3, #4]
    a410:	e0830002 	add	r0, r3, r2
    a414:	e3520001 	cmp	r2, #1
    a418:	e5c01018 	strb	r1, [r0, #24]
    a41c:	da000007 	ble	a440 <MiniHDLC::handleChar(unsigned char)+0x54>
    a420:	e5d01016 	ldrb	r1, [r0, #22]
    a424:	e1d300b8 	ldrh	r0, [r3, #8]
    a428:	e59fc054 	ldr	ip, [pc, #84]	; a484 <MiniHDLC::handleChar(unsigned char)+0x98>
    a42c:	e0211420 	eor	r1, r1, r0, lsr #8
    a430:	e1a01081 	lsl	r1, r1, #1
    a434:	e19c10b1 	ldrh	r1, [ip, r1]
    a438:	e0211400 	eor	r1, r1, r0, lsl #8
    a43c:	e1c310b8 	strh	r1, [r3, #8]
    a440:	e59f1040 	ldr	r1, [pc, #64]	; a488 <MiniHDLC::handleChar(unsigned char)+0x9c>
    a444:	e2822001 	add	r2, r2, #1
    a448:	e1520001 	cmp	r2, r1
    a44c:	03a01000 	moveq	r1, #0
    a450:	03e02000 	mvneq	r2, #0
    a454:	15832004 	strne	r2, [r3, #4]
    a458:	05831004 	streq	r1, [r3, #4]
    a45c:	01c320b8 	strheq	r2, [r3, #8]
    a460:	e12fff1e 	bx	lr
    a464:	e3a02000 	mov	r2, #0
    a468:	e2211020 	eor	r1, r1, #32
    a46c:	e5c0200a 	strb	r2, [r0, #10]
    a470:	eaffffe5 	b	a40c <MiniHDLC::handleChar(unsigned char)+0x20>
    a474:	eaffffa7 	b	a318 <MiniHDLC::handleChar(unsigned char) [clone .part.0]>
    a478:	e3a02001 	mov	r2, #1
    a47c:	e5c0200a 	strb	r2, [r0, #10]
    a480:	e12fff1e 	bx	lr
    a484:	000144e0 	.word	0x000144e0
    a488:	00004e20 	.word	0x00004e20

0000a48c <MiniHDLC::handleBit(unsigned char)>:
    a48c:	e3510000 	cmp	r1, #0
    a490:	13e0107f 	mvnne	r1, #127	; 0x7f
    a494:	e5d0300b 	ldrb	r3, [r0, #11]
    a498:	e92d4010 	push	{r4, lr}
    a49c:	e1a030a3 	lsr	r3, r3, #1
    a4a0:	11833001 	orrne	r3, r3, r1
    a4a4:	e6ef3073 	uxtb	r3, r3
    a4a8:	e353007e 	cmp	r3, #126	; 0x7e
    a4ac:	e1a04000 	mov	r4, r0
    a4b0:	e5c0300b 	strb	r3, [r0, #11]
    a4b4:	0a000010 	beq	a4fc <MiniHDLC::handleBit(unsigned char)+0x70>
    a4b8:	e20330fc 	and	r3, r3, #252	; 0xfc
    a4bc:	e353007c 	cmp	r3, #124	; 0x7c
    a4c0:	08bd8010 	popeq	{r4, pc}
    a4c4:	e5d0200c 	ldrb	r2, [r0, #12]
    a4c8:	e5903010 	ldr	r3, [r0, #16]
    a4cc:	e18110a2 	orr	r1, r1, r2, lsr #1
    a4d0:	e2833001 	add	r3, r3, #1
    a4d4:	e6ef1071 	uxtb	r1, r1
    a4d8:	e3530008 	cmp	r3, #8
    a4dc:	e5c0100c 	strb	r1, [r0, #12]
    a4e0:	e5803010 	str	r3, [r0, #16]
    a4e4:	18bd8010 	popne	{r4, pc}
    a4e8:	ebffffbf 	bl	a3ec <MiniHDLC::handleChar(unsigned char)>
    a4ec:	e3a03000 	mov	r3, #0
    a4f0:	e5c4300c 	strb	r3, [r4, #12]
    a4f4:	e5843010 	str	r3, [r4, #16]
    a4f8:	e8bd8010 	pop	{r4, pc}
    a4fc:	ebffff85 	bl	a318 <MiniHDLC::handleChar(unsigned char) [clone .part.0]>
    a500:	e3a03000 	mov	r3, #0
    a504:	e5c4300c 	strb	r3, [r4, #12]
    a508:	e5843010 	str	r3, [r4, #16]
    a50c:	e8bd8010 	pop	{r4, pc}

0000a510 <MiniHDLC::handleBuffer(unsigned char const*, int)>:
    a510:	e92d4070 	push	{r4, r5, r6, lr}
    a514:	e2525000 	subs	r5, r2, #0
    a518:	d8bd8070 	pople	{r4, r5, r6, pc}
    a51c:	e1a06000 	mov	r6, r0
    a520:	e2414001 	sub	r4, r1, #1
    a524:	e0845005 	add	r5, r4, r5
    a528:	e5f41001 	ldrb	r1, [r4, #1]!
    a52c:	e1a00006 	mov	r0, r6
    a530:	ebffffad 	bl	a3ec <MiniHDLC::handleChar(unsigned char)>
    a534:	e1540005 	cmp	r4, r5
    a538:	1afffffa 	bne	a528 <MiniHDLC::handleBuffer(unsigned char const*, int)+0x18>
    a53c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000a540 <MiniHDLC::crcUpdateCCITT(unsigned short, unsigned char)>:
    a540:	e59f3014 	ldr	r3, [pc, #20]	; a55c <MiniHDLC::crcUpdateCCITT(unsigned short, unsigned char)+0x1c>
    a544:	e0222421 	eor	r2, r2, r1, lsr #8
    a548:	e1a02082 	lsl	r2, r2, #1
    a54c:	e19300b2 	ldrh	r0, [r3, r2]
    a550:	e0200401 	eor	r0, r0, r1, lsl #8
    a554:	e6ff0070 	uxth	r0, r0
    a558:	e12fff1e 	bx	lr
    a55c:	000144e0 	.word	0x000144e0

0000a560 <MiniHDLC::sendChar(unsigned char)>:
    a560:	e92d4070 	push	{r4, r5, r6, lr}
    a564:	e5d03000 	ldrb	r3, [r0]
    a568:	e59f6048 	ldr	r6, [pc, #72]	; a5b8 <MiniHDLC::sendChar(unsigned char)+0x58>
    a56c:	e3530000 	cmp	r3, #0
    a570:	e1a04001 	mov	r4, r1
    a574:	e5963004 	ldr	r3, [r6, #4]
    a578:	0a000009 	beq	a5a4 <MiniHDLC::sendChar(unsigned char)+0x44>
    a57c:	e3a05008 	mov	r5, #8
    a580:	e3530000 	cmp	r3, #0
    a584:	e2040001 	and	r0, r4, #1
    a588:	0a000000 	beq	a590 <MiniHDLC::sendChar(unsigned char)+0x30>
    a58c:	e12fff33 	blx	r3
    a590:	e2555001 	subs	r5, r5, #1
    a594:	e1a040a4 	lsr	r4, r4, #1
    a598:	08bd8070 	popeq	{r4, r5, r6, pc}
    a59c:	e5963004 	ldr	r3, [r6, #4]
    a5a0:	eafffff6 	b	a580 <MiniHDLC::sendChar(unsigned char)+0x20>
    a5a4:	e3530000 	cmp	r3, #0
    a5a8:	08bd8070 	popeq	{r4, r5, r6, pc}
    a5ac:	e1a00001 	mov	r0, r1
    a5b0:	e8bd4070 	pop	{r4, r5, r6, lr}
    a5b4:	e12fff13 	bx	r3
    a5b8:	0001667c 	.word	0x0001667c

0000a5bc <MiniHDLC::sendCharWithStuffing(unsigned char)>:
    a5bc:	e5d03000 	ldrb	r3, [r0]
    a5c0:	e3530000 	cmp	r3, #0
    a5c4:	0a00001f 	beq	a648 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x8c>
    a5c8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    a5cc:	e1a09000 	mov	r9, r0
    a5d0:	e1a04001 	mov	r4, r1
    a5d4:	e3a05008 	mov	r5, #8
    a5d8:	e3a08000 	mov	r8, #0
    a5dc:	e59f7068 	ldr	r7, [pc, #104]	; a64c <MiniHDLC::sendCharWithStuffing(unsigned char)+0x90>
    a5e0:	ea000007 	b	a604 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x48>
    a5e4:	e5993014 	ldr	r3, [r9, #20]
    a5e8:	e2833001 	add	r3, r3, #1
    a5ec:	e3530005 	cmp	r3, #5
    a5f0:	e5893014 	str	r3, [r9, #20]
    a5f4:	0a00000c 	beq	a62c <MiniHDLC::sendCharWithStuffing(unsigned char)+0x70>
    a5f8:	e2555001 	subs	r5, r5, #1
    a5fc:	e1a040a4 	lsr	r4, r4, #1
    a600:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    a604:	e5973004 	ldr	r3, [r7, #4]
    a608:	e2046001 	and	r6, r4, #1
    a60c:	e3530000 	cmp	r3, #0
    a610:	0a000001 	beq	a61c <MiniHDLC::sendCharWithStuffing(unsigned char)+0x60>
    a614:	e1a00006 	mov	r0, r6
    a618:	e12fff33 	blx	r3
    a61c:	e3560000 	cmp	r6, #0
    a620:	1affffef 	bne	a5e4 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x28>
    a624:	e5898014 	str	r8, [r9, #20]
    a628:	eafffff2 	b	a5f8 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x3c>
    a62c:	e5973004 	ldr	r3, [r7, #4]
    a630:	e3530000 	cmp	r3, #0
    a634:	0afffffa 	beq	a624 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x68>
    a638:	e3a00000 	mov	r0, #0
    a63c:	e12fff33 	blx	r3
    a640:	e5898014 	str	r8, [r9, #20]
    a644:	eaffffeb 	b	a5f8 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x3c>
    a648:	eaffffc4 	b	a560 <MiniHDLC::sendChar(unsigned char)>
    a64c:	0001667c 	.word	0x0001667c

0000a650 <MiniHDLC::sendEscaped(unsigned char)>:
    a650:	e241307d 	sub	r3, r1, #125	; 0x7d
    a654:	e3530001 	cmp	r3, #1
    a658:	e92d4070 	push	{r4, r5, r6, lr}
    a65c:	e1a04001 	mov	r4, r1
    a660:	e1a05000 	mov	r5, r0
    a664:	9a000003 	bls	a678 <MiniHDLC::sendEscaped(unsigned char)+0x28>
    a668:	e1a01004 	mov	r1, r4
    a66c:	e1a00005 	mov	r0, r5
    a670:	e8bd4070 	pop	{r4, r5, r6, lr}
    a674:	eaffffd0 	b	a5bc <MiniHDLC::sendCharWithStuffing(unsigned char)>
    a678:	e3a0107d 	mov	r1, #125	; 0x7d
    a67c:	e2244020 	eor	r4, r4, #32
    a680:	ebffffcd 	bl	a5bc <MiniHDLC::sendCharWithStuffing(unsigned char)>
    a684:	e1a01004 	mov	r1, r4
    a688:	e1a00005 	mov	r0, r5
    a68c:	e8bd4070 	pop	{r4, r5, r6, lr}
    a690:	eaffffc9 	b	a5bc <MiniHDLC::sendCharWithStuffing(unsigned char)>

0000a694 <MiniHDLC::sendFrame(unsigned char const*, int)>:
    a694:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a698:	e1a06002 	mov	r6, r2
    a69c:	e1a08001 	mov	r8, r1
    a6a0:	e3a0107e 	mov	r1, #126	; 0x7e
    a6a4:	e1a05000 	mov	r5, r0
    a6a8:	ebffffac 	bl	a560 <MiniHDLC::sendChar(unsigned char)>
    a6ac:	e3560000 	cmp	r6, #0
    a6b0:	0a00001d 	beq	a72c <MiniHDLC::sendFrame(unsigned char const*, int)+0x98>
    a6b4:	e59fc07c 	ldr	ip, [pc, #124]	; a738 <MiniHDLC::sendFrame(unsigned char const*, int)+0xa4>
    a6b8:	e59f707c 	ldr	r7, [pc, #124]	; a73c <MiniHDLC::sendFrame(unsigned char const*, int)+0xa8>
    a6bc:	e0886006 	add	r6, r8, r6
    a6c0:	e4d81001 	ldrb	r1, [r8], #1
    a6c4:	e1a00005 	mov	r0, r5
    a6c8:	e021342c 	eor	r3, r1, ip, lsr #8
    a6cc:	e1a03083 	lsl	r3, r3, #1
    a6d0:	e19740b3 	ldrh	r4, [r7, r3]
    a6d4:	e024440c 	eor	r4, r4, ip, lsl #8
    a6d8:	e6bf4074 	sxth	r4, r4
    a6dc:	ebffffdb 	bl	a650 <MiniHDLC::sendEscaped(unsigned char)>
    a6e0:	e1580006 	cmp	r8, r6
    a6e4:	e6ffc074 	uxth	ip, r4
    a6e8:	1afffff4 	bne	a6c0 <MiniHDLC::sendFrame(unsigned char const*, int)+0x2c>
    a6ec:	e6ef1074 	uxtb	r1, r4
    a6f0:	e1a0c42c 	lsr	ip, ip, #8
    a6f4:	e5d53001 	ldrb	r3, [r5, #1]
    a6f8:	e1a00005 	mov	r0, r5
    a6fc:	e3530000 	cmp	r3, #0
    a700:	11a06001 	movne	r6, r1
    a704:	01a0600c 	moveq	r6, ip
    a708:	11a0100c 	movne	r1, ip
    a70c:	ebffffcf 	bl	a650 <MiniHDLC::sendEscaped(unsigned char)>
    a710:	e1a01006 	mov	r1, r6
    a714:	e1a00005 	mov	r0, r5
    a718:	ebffffcc 	bl	a650 <MiniHDLC::sendEscaped(unsigned char)>
    a71c:	e1a00005 	mov	r0, r5
    a720:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    a724:	e3a0107e 	mov	r1, #126	; 0x7e
    a728:	eaffff8c 	b	a560 <MiniHDLC::sendChar(unsigned char)>
    a72c:	e3a0c0ff 	mov	ip, #255	; 0xff
    a730:	e1a0100c 	mov	r1, ip
    a734:	eaffffee 	b	a6f4 <MiniHDLC::sendFrame(unsigned char const*, int)+0x60>
    a738:	0000ffff 	.word	0x0000ffff
    a73c:	000144e0 	.word	0x000144e0

0000a740 <__udivsi3>:
    a740:	e2512001 	subs	r2, r1, #1
    a744:	012fff1e 	bxeq	lr
    a748:	3a000036 	bcc	a828 <__udivsi3+0xe8>
    a74c:	e1500001 	cmp	r0, r1
    a750:	9a000022 	bls	a7e0 <__udivsi3+0xa0>
    a754:	e1110002 	tst	r1, r2
    a758:	0a000023 	beq	a7ec <__udivsi3+0xac>
    a75c:	e311020e 	tst	r1, #-536870912	; 0xe0000000
    a760:	01a01181 	lsleq	r1, r1, #3
    a764:	03a03008 	moveq	r3, #8
    a768:	13a03001 	movne	r3, #1
    a76c:	e3510201 	cmp	r1, #268435456	; 0x10000000
    a770:	31510000 	cmpcc	r1, r0
    a774:	31a01201 	lslcc	r1, r1, #4
    a778:	31a03203 	lslcc	r3, r3, #4
    a77c:	3afffffa 	bcc	a76c <__udivsi3+0x2c>
    a780:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    a784:	31510000 	cmpcc	r1, r0
    a788:	31a01081 	lslcc	r1, r1, #1
    a78c:	31a03083 	lslcc	r3, r3, #1
    a790:	3afffffa 	bcc	a780 <__udivsi3+0x40>
    a794:	e3a02000 	mov	r2, #0
    a798:	e1500001 	cmp	r0, r1
    a79c:	20400001 	subcs	r0, r0, r1
    a7a0:	21822003 	orrcs	r2, r2, r3
    a7a4:	e15000a1 	cmp	r0, r1, lsr #1
    a7a8:	204000a1 	subcs	r0, r0, r1, lsr #1
    a7ac:	218220a3 	orrcs	r2, r2, r3, lsr #1
    a7b0:	e1500121 	cmp	r0, r1, lsr #2
    a7b4:	20400121 	subcs	r0, r0, r1, lsr #2
    a7b8:	21822123 	orrcs	r2, r2, r3, lsr #2
    a7bc:	e15001a1 	cmp	r0, r1, lsr #3
    a7c0:	204001a1 	subcs	r0, r0, r1, lsr #3
    a7c4:	218221a3 	orrcs	r2, r2, r3, lsr #3
    a7c8:	e3500000 	cmp	r0, #0
    a7cc:	11b03223 	lsrsne	r3, r3, #4
    a7d0:	11a01221 	lsrne	r1, r1, #4
    a7d4:	1affffef 	bne	a798 <__udivsi3+0x58>
    a7d8:	e1a00002 	mov	r0, r2
    a7dc:	e12fff1e 	bx	lr
    a7e0:	03a00001 	moveq	r0, #1
    a7e4:	13a00000 	movne	r0, #0
    a7e8:	e12fff1e 	bx	lr
    a7ec:	e3510801 	cmp	r1, #65536	; 0x10000
    a7f0:	21a01821 	lsrcs	r1, r1, #16
    a7f4:	23a02010 	movcs	r2, #16
    a7f8:	33a02000 	movcc	r2, #0
    a7fc:	e3510c01 	cmp	r1, #256	; 0x100
    a800:	21a01421 	lsrcs	r1, r1, #8
    a804:	22822008 	addcs	r2, r2, #8
    a808:	e3510010 	cmp	r1, #16
    a80c:	21a01221 	lsrcs	r1, r1, #4
    a810:	22822004 	addcs	r2, r2, #4
    a814:	e3510004 	cmp	r1, #4
    a818:	82822003 	addhi	r2, r2, #3
    a81c:	908220a1 	addls	r2, r2, r1, lsr #1
    a820:	e1a00230 	lsr	r0, r0, r2
    a824:	e12fff1e 	bx	lr
    a828:	e3500000 	cmp	r0, #0
    a82c:	13e00000 	mvnne	r0, #0
    a830:	ea000007 	b	a854 <__aeabi_idiv0>

0000a834 <__aeabi_uidivmod>:
    a834:	e3510000 	cmp	r1, #0
    a838:	0afffffa 	beq	a828 <__udivsi3+0xe8>
    a83c:	e92d4003 	push	{r0, r1, lr}
    a840:	ebffffbe 	bl	a740 <__udivsi3>
    a844:	e8bd4006 	pop	{r1, r2, lr}
    a848:	e0030092 	mul	r3, r2, r0
    a84c:	e0411003 	sub	r1, r1, r3
    a850:	e12fff1e 	bx	lr

0000a854 <__aeabi_idiv0>:
    a854:	e12fff1e 	bx	lr

0000a858 <CActLED::~CActLED()>:
    a858:	e3a02000 	mov	r2, #0
    a85c:	e59f3004 	ldr	r3, [pc, #4]	; a868 <CActLED::~CActLED()+0x10>
    a860:	e5832000 	str	r2, [r3]
    a864:	e12fff1e 	bx	lr
    a868:	00016684 	.word	0x00016684

0000a86c <CActLED::On()>:
    a86c:	e5903000 	ldr	r3, [r0]
    a870:	e3530000 	cmp	r3, #0
    a874:	0a000002 	beq	a884 <CActLED::On()+0x18>
    a878:	e5d01008 	ldrb	r1, [r0, #8]
    a87c:	e1a00003 	mov	r0, r3
    a880:	ea00038f 	b	b6c4 <CGPIOPin::Write(unsigned int)>
    a884:	e5903004 	ldr	r3, [r0, #4]
    a888:	e3530000 	cmp	r3, #0
    a88c:	012fff1e 	bxeq	lr
    a890:	e5d01008 	ldrb	r1, [r0, #8]
    a894:	e1a00003 	mov	r0, r3
    a898:	ea001e17 	b	120fc <CVirtualGPIOPin::Write(unsigned int)>

0000a89c <CActLED::Off()>:
    a89c:	e5903000 	ldr	r3, [r0]
    a8a0:	e3530000 	cmp	r3, #0
    a8a4:	0a000003 	beq	a8b8 <CActLED::Off()+0x1c>
    a8a8:	e5d01008 	ldrb	r1, [r0, #8]
    a8ac:	e1a00003 	mov	r0, r3
    a8b0:	e2211001 	eor	r1, r1, #1
    a8b4:	ea000382 	b	b6c4 <CGPIOPin::Write(unsigned int)>
    a8b8:	e5903004 	ldr	r3, [r0, #4]
    a8bc:	e3530000 	cmp	r3, #0
    a8c0:	012fff1e 	bxeq	lr
    a8c4:	e5d01008 	ldrb	r1, [r0, #8]
    a8c8:	e1a00003 	mov	r0, r3
    a8cc:	e2211001 	eor	r1, r1, #1
    a8d0:	ea001e09 	b	120fc <CVirtualGPIOPin::Write(unsigned int)>

0000a8d4 <CActLED::CActLED()>:
    a8d4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    a8d8:	e3a05000 	mov	r5, #0
    a8dc:	e1a04000 	mov	r4, r0
    a8e0:	e24dd024 	sub	sp, sp, #36	; 0x24
    a8e4:	e59f314c 	ldr	r3, [pc, #332]	; aa38 <CActLED::CActLED()+0x164>
    a8e8:	e5805000 	str	r5, [r0]
    a8ec:	e5805004 	str	r5, [r0, #4]
    a8f0:	e28d000c 	add	r0, sp, #12
    a8f4:	e5834000 	str	r4, [r3]
    a8f8:	eb00008b 	bl	ab2c <CBcmPropertyTags::CBcmPropertyTags()>
    a8fc:	e3a03010 	mov	r3, #16
    a900:	e58d5000 	str	r5, [sp]
    a904:	e28d000c 	add	r0, sp, #12
    a908:	e08d2003 	add	r2, sp, r3
    a90c:	e59f1128 	ldr	r1, [pc, #296]	; aa3c <CActLED::CActLED()+0x168>
    a910:	eb0000dc 	bl	ac88 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    a914:	e2506000 	subs	r6, r0, #0
    a918:	0a00001f 	beq	a99c <CActLED::CActLED()+0xc8>
    a91c:	e59d301c 	ldr	r3, [sp, #28]
    a920:	e3130502 	tst	r3, #8388608	; 0x800000
    a924:	0a000021 	beq	a9b0 <CActLED::CActLED()+0xdc>
    a928:	e1a03223 	lsr	r3, r3, #4
    a92c:	e6ef3073 	uxtb	r3, r3
    a930:	e243200d 	sub	r2, r3, #13
    a934:	e3530008 	cmp	r3, #8
    a938:	13520001 	cmpne	r2, #1
    a93c:	93a01001 	movls	r1, #1
    a940:	83a01000 	movhi	r1, #0
    a944:	e353000c 	cmp	r3, #12
    a948:	13530009 	cmpne	r3, #9
    a94c:	03a06001 	moveq	r6, #1
    a950:	13a06000 	movne	r6, #0
    a954:	e3530001 	cmp	r3, #1
    a958:	9a000017 	bls	a9bc <CActLED::CActLED()+0xe8>
    a95c:	e3510000 	cmp	r1, #0
    a960:	0a00002a 	beq	aa10 <CActLED::CActLED()+0x13c>
    a964:	e3520001 	cmp	r2, #1
    a968:	8a000020 	bhi	a9f0 <CActLED::CActLED()+0x11c>
    a96c:	e3a00028 	mov	r0, #40	; 0x28
    a970:	eb001f95 	bl	127cc <operator new(unsigned int)>
    a974:	e3a02001 	mov	r2, #1
    a978:	e1a07000 	mov	r7, r0
    a97c:	e1a03005 	mov	r3, r5
    a980:	e3a0101d 	mov	r1, #29
    a984:	e0266002 	eor	r6, r6, r2
    a988:	eb0005ef 	bl	c14c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    a98c:	e5847000 	str	r7, [r4]
    a990:	e5c46008 	strb	r6, [r4, #8]
    a994:	e1a00004 	mov	r0, r4
    a998:	ebffffbf 	bl	a89c <CActLED::Off()>
    a99c:	e28d000c 	add	r0, sp, #12
    a9a0:	eb000067 	bl	ab44 <CBcmPropertyTags::~CBcmPropertyTags()>
    a9a4:	e1a00004 	mov	r0, r4
    a9a8:	e28dd024 	add	sp, sp, #36	; 0x24
    a9ac:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    a9b0:	e6ff3073 	uxth	r3, r3
    a9b4:	e353000f 	cmp	r3, #15
    a9b8:	8a000015 	bhi	aa14 <CActLED::CActLED()+0x140>
    a9bc:	e3a00028 	mov	r0, #40	; 0x28
    a9c0:	eb001f81 	bl	127cc <operator new(unsigned int)>
    a9c4:	e3a03000 	mov	r3, #0
    a9c8:	e3a02001 	mov	r2, #1
    a9cc:	e3a01010 	mov	r1, #16
    a9d0:	e1a05000 	mov	r5, r0
    a9d4:	eb0005dc 	bl	c14c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    a9d8:	e3a03000 	mov	r3, #0
    a9dc:	e5845000 	str	r5, [r4]
    a9e0:	e5c43008 	strb	r3, [r4, #8]
    a9e4:	e1a00004 	mov	r0, r4
    a9e8:	ebffffab 	bl	a89c <CActLED::Off()>
    a9ec:	eaffffea 	b	a99c <CActLED::CActLED()+0xc8>
    a9f0:	e3a00010 	mov	r0, #16
    a9f4:	eb001f74 	bl	127cc <operator new(unsigned int)>
    a9f8:	e1a07000 	mov	r7, r0
    a9fc:	e1a01005 	mov	r1, r5
    aa00:	eb001d6c 	bl	11fb8 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)>
    aa04:	e2266001 	eor	r6, r6, #1
    aa08:	e5847004 	str	r7, [r4, #4]
    aa0c:	eaffffdf 	b	a990 <CActLED::CActLED()+0xbc>
    aa10:	e2266001 	eor	r6, r6, #1
    aa14:	e3a00028 	mov	r0, #40	; 0x28
    aa18:	eb001f6b 	bl	127cc <operator new(unsigned int)>
    aa1c:	e1a05000 	mov	r5, r0
    aa20:	e3a03000 	mov	r3, #0
    aa24:	e3a02001 	mov	r2, #1
    aa28:	e3a0102f 	mov	r1, #47	; 0x2f
    aa2c:	eb0005c6 	bl	c14c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    aa30:	e5845000 	str	r5, [r4]
    aa34:	eaffffd5 	b	a990 <CActLED::CActLED()+0xbc>
    aa38:	00016684 	.word	0x00016684
    aa3c:	00010002 	.word	0x00010002

0000aa40 <CActLED::Blink(unsigned int, unsigned int, unsigned int)>:
    aa40:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    aa44:	e2516000 	subs	r6, r1, #0
    aa48:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    aa4c:	e1a08003 	mov	r8, r3
    aa50:	e1a07002 	mov	r7, r2
    aa54:	e1a05000 	mov	r5, r0
    aa58:	e3a04001 	mov	r4, #1
    aa5c:	e1a00005 	mov	r0, r5
    aa60:	ebffff81 	bl	a86c <CActLED::On()>
    aa64:	e1a00007 	mov	r0, r7
    aa68:	eb001b51 	bl	117b4 <CTimer::SimpleMsDelay(unsigned int)>
    aa6c:	e1a00005 	mov	r0, r5
    aa70:	ebffff89 	bl	a89c <CActLED::Off()>
    aa74:	e2844001 	add	r4, r4, #1
    aa78:	e1a00008 	mov	r0, r8
    aa7c:	eb001b4c 	bl	117b4 <CTimer::SimpleMsDelay(unsigned int)>
    aa80:	e1560004 	cmp	r6, r4
    aa84:	2afffff4 	bcs	aa5c <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x1c>
    aa88:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000aa8c <CActLED::Get()>:
    aa8c:	e59f3004 	ldr	r3, [pc, #4]	; aa98 <CActLED::Get()+0xc>
    aa90:	e5930000 	ldr	r0, [r3]
    aa94:	e12fff1e 	bx	lr
    aa98:	00016684 	.word	0x00016684

0000aa9c <assertion_failed>:
    aa9c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    aaa0:	e1a05000 	mov	r5, r0
    aaa4:	e24dd01c 	sub	sp, sp, #28
    aaa8:	e1a06001 	mov	r6, r1
    aaac:	e1a07002 	mov	r7, r2
    aab0:	e1a0400d 	mov	r4, sp
    aab4:	eb00072a 	bl	c764 <CInterruptSystem::DisableFIQ()>
    aab8:	f1080040 	cpsie	f
    aabc:	e28d0008 	add	r0, sp, #8
    aac0:	eb0013dd 	bl	fa3c <CString::CString()>
    aac4:	e1a03007 	mov	r3, r7
    aac8:	e1a02006 	mov	r2, r6
    aacc:	e28d0008 	add	r0, sp, #8
    aad0:	e59f104c 	ldr	r1, [pc, #76]	; ab24 <assertion_failed+0x88>
    aad4:	eb0017c6 	bl	109f4 <CString::Format(char const*, ...)>
    aad8:	e28d0008 	add	r0, sp, #8
    aadc:	eb0013ec 	bl	fa94 <CString::operator char const*() const>
    aae0:	e1a01000 	mov	r1, r0
    aae4:	e1a00004 	mov	r0, r4
    aae8:	eb0000f4 	bl	aec0 <debug_stacktrace(unsigned int const*, char const*)>
    aaec:	eb000913 	bl	cf40 <CLogger::Get()>
    aaf0:	e1a04000 	mov	r4, r0
    aaf4:	e28d0008 	add	r0, sp, #8
    aaf8:	eb0013e5 	bl	fa94 <CString::operator char const*() const>
    aafc:	e59f3024 	ldr	r3, [pc, #36]	; ab28 <assertion_failed+0x8c>
    ab00:	e1a01000 	mov	r1, r0
    ab04:	e3a02000 	mov	r2, #0
    ab08:	e1a00004 	mov	r0, r4
    ab0c:	e58d5000 	str	r5, [sp]
    ab10:	eb000ab3 	bl	d5e4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ab14:	e28d0008 	add	r0, sp, #8
    ab18:	eb001394 	bl	f970 <CString::~CString()>
    ab1c:	e28dd01c 	add	sp, sp, #28
    ab20:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    ab24:	000146e0 	.word	0x000146e0
    ab28:	000146e8 	.word	0x000146e8

0000ab2c <CBcmPropertyTags::CBcmPropertyTags()>:
    ab2c:	e92d4010 	push	{r4, lr}
    ab30:	e1a04000 	mov	r4, r0
    ab34:	e3a01008 	mov	r1, #8
    ab38:	eb0021cf 	bl	1327c <CBcmMailBox::CBcmMailBox(unsigned int)>
    ab3c:	e1a00004 	mov	r0, r4
    ab40:	e8bd8010 	pop	{r4, pc}

0000ab44 <CBcmPropertyTags::~CBcmPropertyTags()>:
    ab44:	e92d4010 	push	{r4, lr}
    ab48:	e1a04000 	mov	r4, r0
    ab4c:	eb0021cc 	bl	13284 <CBcmMailBox::~CBcmMailBox()>
    ab50:	e1a00004 	mov	r0, r4
    ab54:	e8bd8010 	pop	{r4, pc}

0000ab58 <CBcmPropertyTags::GetTags(void*, unsigned int)>:
    ab58:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    ab5c:	e2519000 	subs	r9, r1, #0
    ab60:	e1a0a000 	mov	sl, r0
    ab64:	e1a07002 	mov	r7, r2
    ab68:	0a00003d 	beq	ac64 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x10c>
    ab6c:	e357000f 	cmp	r7, #15
    ab70:	9a000036 	bls	ac50 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xf8>
    ab74:	e287600c 	add	r6, r7, #12
    ab78:	e3160003 	tst	r6, #3
    ab7c:	1a00002e 	bne	ac3c <CBcmPropertyTags::GetTags(void*, unsigned int)+0xe4>
    ab80:	e3a00000 	mov	r0, #0
    ab84:	eb001e7f 	bl	12588 <CMemorySystem::GetCoherentPage(unsigned int)>
    ab88:	e3a05000 	mov	r5, #0
    ab8c:	e1a04000 	mov	r4, r0
    ab90:	e1a01426 	lsr	r1, r6, #8
    ab94:	e1a02826 	lsr	r2, r6, #16
    ab98:	e1a03c26 	lsr	r3, r6, #24
    ab9c:	e2808008 	add	r8, r0, #8
    aba0:	e5c06000 	strb	r6, [r0]
    aba4:	e5c01001 	strb	r1, [r0, #1]
    aba8:	e5c02002 	strb	r2, [r0, #2]
    abac:	e5c03003 	strb	r3, [r0, #3]
    abb0:	e1a02007 	mov	r2, r7
    abb4:	e1a00008 	mov	r0, r8
    abb8:	e5c45004 	strb	r5, [r4, #4]
    abbc:	e5c45005 	strb	r5, [r4, #5]
    abc0:	e5c45006 	strb	r5, [r4, #6]
    abc4:	e5c45007 	strb	r5, [r4, #7]
    abc8:	e1a01009 	mov	r1, r9
    abcc:	eb001cb2 	bl	11e9c <memcpy>
    abd0:	e7885007 	str	r5, [r8, r7]
    abd4:	ee075f9a 	mcr	15, 0, r5, cr7, cr10, {4}
    abd8:	e3c46103 	bic	r6, r4, #-1073741824	; 0xc0000000
    abdc:	e3866101 	orr	r6, r6, #1073741824	; 0x40000000
    abe0:	e1a0000a 	mov	r0, sl
    abe4:	e1a01006 	mov	r1, r6
    abe8:	eb0021d5 	bl	13344 <CBcmMailBox::WriteRead(unsigned int)>
    abec:	e1560000 	cmp	r6, r0
    abf0:	0a000001 	beq	abfc <CBcmPropertyTags::GetTags(void*, unsigned int)+0xa4>
    abf4:	e3a00000 	mov	r0, #0
    abf8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    abfc:	ee075fba 	mcr	15, 0, r5, cr7, cr10, {5}
    ac00:	e5d42005 	ldrb	r2, [r4, #5]
    ac04:	e5d43004 	ldrb	r3, [r4, #4]
    ac08:	e5d41006 	ldrb	r1, [r4, #6]
    ac0c:	e1833402 	orr	r3, r3, r2, lsl #8
    ac10:	e5d42007 	ldrb	r2, [r4, #7]
    ac14:	e1833801 	orr	r3, r3, r1, lsl #16
    ac18:	e1833c02 	orr	r3, r3, r2, lsl #24
    ac1c:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
    ac20:	1afffff3 	bne	abf4 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x9c>
    ac24:	e1a02007 	mov	r2, r7
    ac28:	e1a01008 	mov	r1, r8
    ac2c:	e1a00009 	mov	r0, r9
    ac30:	eb001c99 	bl	11e9c <memcpy>
    ac34:	e3a00001 	mov	r0, #1
    ac38:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    ac3c:	e3a02053 	mov	r2, #83	; 0x53
    ac40:	e59f1030 	ldr	r1, [pc, #48]	; ac78 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x120>
    ac44:	e59f0030 	ldr	r0, [pc, #48]	; ac7c <CBcmPropertyTags::GetTags(void*, unsigned int)+0x124>
    ac48:	ebffff93 	bl	aa9c <assertion_failed>
    ac4c:	eaffffcb 	b	ab80 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x28>
    ac50:	e3a02051 	mov	r2, #81	; 0x51
    ac54:	e59f101c 	ldr	r1, [pc, #28]	; ac78 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x120>
    ac58:	e59f0020 	ldr	r0, [pc, #32]	; ac80 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x128>
    ac5c:	ebffff8e 	bl	aa9c <assertion_failed>
    ac60:	eaffffc3 	b	ab74 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x1c>
    ac64:	e3a02050 	mov	r2, #80	; 0x50
    ac68:	e59f1008 	ldr	r1, [pc, #8]	; ac78 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x120>
    ac6c:	e59f0010 	ldr	r0, [pc, #16]	; ac84 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x12c>
    ac70:	ebffff89 	bl	aa9c <assertion_failed>
    ac74:	eaffffbc 	b	ab6c <CBcmPropertyTags::GetTags(void*, unsigned int)+0x14>
    ac78:	00014700 	.word	0x00014700
    ac7c:	0001474c 	.word	0x0001474c
    ac80:	00014720 	.word	0x00014720
    ac84:	00014714 	.word	0x00014714

0000ac88 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>:
    ac88:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    ac8c:	e2524000 	subs	r4, r2, #0
    ac90:	e1a08000 	mov	r8, r0
    ac94:	e1a06001 	mov	r6, r1
    ac98:	e1a07003 	mov	r7, r3
    ac9c:	e59d5018 	ldr	r5, [sp, #24]
    aca0:	0a000038 	beq	ad88 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x100>
    aca4:	e357000f 	cmp	r7, #15
    aca8:	9a000031 	bls	ad74 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xec>
    acac:	e3c52102 	bic	r2, r5, #-2147483648	; 0x80000000
    acb0:	e247100c 	sub	r1, r7, #12
    acb4:	e1a03422 	lsr	r3, r2, #8
    acb8:	e1a0c822 	lsr	ip, r2, #16
    acbc:	e5c43009 	strb	r3, [r4, #9]
    acc0:	e1a03421 	lsr	r3, r1, #8
    acc4:	e1a0e821 	lsr	lr, r1, #16
    acc8:	e5c42008 	strb	r2, [r4, #8]
    accc:	e5c46000 	strb	r6, [r4]
    acd0:	e1a02c22 	lsr	r2, r2, #24
    acd4:	e5c4c00a 	strb	ip, [r4, #10]
    acd8:	e5c41004 	strb	r1, [r4, #4]
    acdc:	e1a0cc21 	lsr	ip, r1, #24
    ace0:	e5c43005 	strb	r3, [r4, #5]
    ace4:	e1a01426 	lsr	r1, r6, #8
    ace8:	e1a03826 	lsr	r3, r6, #16
    acec:	e1a06c26 	lsr	r6, r6, #24
    acf0:	e5c4200b 	strb	r2, [r4, #11]
    acf4:	e5c41001 	strb	r1, [r4, #1]
    acf8:	e1a00008 	mov	r0, r8
    acfc:	e1a02007 	mov	r2, r7
    ad00:	e5c4e006 	strb	lr, [r4, #6]
    ad04:	e5c4c007 	strb	ip, [r4, #7]
    ad08:	e5c43002 	strb	r3, [r4, #2]
    ad0c:	e5c46003 	strb	r6, [r4, #3]
    ad10:	e1a01004 	mov	r1, r4
    ad14:	ebffff8f 	bl	ab58 <CBcmPropertyTags::GetTags(void*, unsigned int)>
    ad18:	e3500000 	cmp	r0, #0
    ad1c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    ad20:	e5d43009 	ldrb	r3, [r4, #9]
    ad24:	e5d40008 	ldrb	r0, [r4, #8]
    ad28:	e5d4200a 	ldrb	r2, [r4, #10]
    ad2c:	e1800403 	orr	r0, r0, r3, lsl #8
    ad30:	e5d4300b 	ldrb	r3, [r4, #11]
    ad34:	e1800802 	orr	r0, r0, r2, lsl #16
    ad38:	e1900c03 	orrs	r0, r0, r3, lsl #24
    ad3c:	4a000001 	bmi	ad48 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xc0>
    ad40:	e3a00000 	mov	r0, #0
    ad44:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ad48:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
    ad4c:	e1a01420 	lsr	r1, r0, #8
    ad50:	e1a02820 	lsr	r2, r0, #16
    ad54:	e1a03c20 	lsr	r3, r0, #24
    ad58:	e5c40008 	strb	r0, [r4, #8]
    ad5c:	e2900000 	adds	r0, r0, #0
    ad60:	e5c41009 	strb	r1, [r4, #9]
    ad64:	e5c4200a 	strb	r2, [r4, #10]
    ad68:	e5c4300b 	strb	r3, [r4, #11]
    ad6c:	13a00001 	movne	r0, #1
    ad70:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ad74:	e3a02034 	mov	r2, #52	; 0x34
    ad78:	e59f101c 	ldr	r1, [pc, #28]	; ad9c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x114>
    ad7c:	e59f001c 	ldr	r0, [pc, #28]	; ada0 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x118>
    ad80:	ebffff45 	bl	aa9c <assertion_failed>
    ad84:	eaffffc8 	b	acac <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x24>
    ad88:	e3a02033 	mov	r2, #51	; 0x33
    ad8c:	e59f1008 	ldr	r1, [pc, #8]	; ad9c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x114>
    ad90:	e59f000c 	ldr	r0, [pc, #12]	; ada4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x11c>
    ad94:	ebffff40 	bl	aa9c <assertion_failed>
    ad98:	eaffffc1 	b	aca4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x1c>
    ad9c:	00014700 	.word	0x00014700
    ada0:	00014770 	.word	0x00014770
    ada4:	00014764 	.word	0x00014764

0000ada8 <debug_hexdump(void const*, unsigned int, char const*)>:
    ada8:	e3520000 	cmp	r2, #0
    adac:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    adb0:	e1a05001 	mov	r5, r1
    adb4:	e59f60f4 	ldr	r6, [pc, #244]	; aeb0 <debug_hexdump(void const*, unsigned int, char const*)+0x108>
    adb8:	e1a04000 	mov	r4, r0
    adbc:	11a06002 	movne	r6, r2
    adc0:	e24dd04c 	sub	sp, sp, #76	; 0x4c
    adc4:	eb00085d 	bl	cf40 <CLogger::Get()>
    adc8:	e58d4004 	str	r4, [sp, #4]
    adcc:	e58d5000 	str	r5, [sp]
    add0:	e1a01006 	mov	r1, r6
    add4:	e59f30d8 	ldr	r3, [pc, #216]	; aeb4 <debug_hexdump(void const*, unsigned int, char const*)+0x10c>
    add8:	e3a02004 	mov	r2, #4
    addc:	eb000a00 	bl	d5e4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ade0:	e3550000 	cmp	r5, #0
    ade4:	0a00002b 	beq	ae98 <debug_hexdump(void const*, unsigned int, char const*)+0xf0>
    ade8:	e3a09004 	mov	r9, #4
    adec:	e59f80c4 	ldr	r8, [pc, #196]	; aeb8 <debug_hexdump(void const*, unsigned int, char const*)+0x110>
    adf0:	e59f70c4 	ldr	r7, [pc, #196]	; aebc <debug_hexdump(void const*, unsigned int, char const*)+0x114>
    adf4:	eb000851 	bl	cf40 <CLogger::Get()>
    adf8:	e5d4a00f 	ldrb	sl, [r4, #15]
    adfc:	e5d4e00e 	ldrb	lr, [r4, #14]
    ae00:	e5d4c00d 	ldrb	ip, [r4, #13]
    ae04:	e5d4300c 	ldrb	r3, [r4, #12]
    ae08:	e5d4200b 	ldrb	r2, [r4, #11]
    ae0c:	e5d4100a 	ldrb	r1, [r4, #10]
    ae10:	e5d4b009 	ldrb	fp, [r4, #9]
    ae14:	e58da040 	str	sl, [sp, #64]	; 0x40
    ae18:	e5d4a008 	ldrb	sl, [r4, #8]
    ae1c:	e58de03c 	str	lr, [sp, #60]	; 0x3c
    ae20:	e5d4e007 	ldrb	lr, [r4, #7]
    ae24:	e58dc038 	str	ip, [sp, #56]	; 0x38
    ae28:	e5d4c006 	ldrb	ip, [r4, #6]
    ae2c:	e58d3034 	str	r3, [sp, #52]	; 0x34
    ae30:	e5d43005 	ldrb	r3, [r4, #5]
    ae34:	e58d2030 	str	r2, [sp, #48]	; 0x30
    ae38:	e5d42004 	ldrb	r2, [r4, #4]
    ae3c:	e58d102c 	str	r1, [sp, #44]	; 0x2c
    ae40:	e5d41003 	ldrb	r1, [r4, #3]
    ae44:	e58db028 	str	fp, [sp, #40]	; 0x28
    ae48:	e5d4b002 	ldrb	fp, [r4, #2]
    ae4c:	e58da024 	str	sl, [sp, #36]	; 0x24
    ae50:	e5d4a001 	ldrb	sl, [r4, #1]
    ae54:	e58de020 	str	lr, [sp, #32]
    ae58:	e5d4e000 	ldrb	lr, [r4]
    ae5c:	e58dc01c 	str	ip, [sp, #28]
    ae60:	e58d3018 	str	r3, [sp, #24]
    ae64:	e004c008 	and	ip, r4, r8
    ae68:	e58d2014 	str	r2, [sp, #20]
    ae6c:	e58d1010 	str	r1, [sp, #16]
    ae70:	e1a03007 	mov	r3, r7
    ae74:	e1a02009 	mov	r2, r9
    ae78:	e1a01006 	mov	r1, r6
    ae7c:	e58db00c 	str	fp, [sp, #12]
    ae80:	e58da008 	str	sl, [sp, #8]
    ae84:	e88d5000 	stm	sp, {ip, lr}
    ae88:	eb0009d5 	bl	d5e4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ae8c:	e355000f 	cmp	r5, #15
    ae90:	e2844010 	add	r4, r4, #16
    ae94:	8a000001 	bhi	aea0 <debug_hexdump(void const*, unsigned int, char const*)+0xf8>
    ae98:	e28dd04c 	add	sp, sp, #76	; 0x4c
    ae9c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aea0:	e2555010 	subs	r5, r5, #16
    aea4:	1affffd2 	bne	adf4 <debug_hexdump(void const*, unsigned int, char const*)+0x4c>
    aea8:	e28dd04c 	add	sp, sp, #76	; 0x4c
    aeac:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aeb0:	00014798 	.word	0x00014798
    aeb4:	000147a0 	.word	0x000147a0
    aeb8:	0000ffff 	.word	0x0000ffff
    aebc:	000147c8 	.word	0x000147c8

0000aec0 <debug_stacktrace(unsigned int const*, char const*)>:
    aec0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    aec4:	e3510000 	cmp	r1, #0
    aec8:	e59f8084 	ldr	r8, [pc, #132]	; af54 <debug_stacktrace(unsigned int const*, char const*)+0x94>
    aecc:	e24dd008 	sub	sp, sp, #8
    aed0:	e1a05000 	mov	r5, r0
    aed4:	11a08001 	movne	r8, r1
    aed8:	e3a04000 	mov	r4, #0
    aedc:	e3a0a004 	mov	sl, #4
    aee0:	e59f6070 	ldr	r6, [pc, #112]	; af58 <debug_stacktrace(unsigned int const*, char const*)+0x98>
    aee4:	e59f7070 	ldr	r7, [pc, #112]	; af5c <debug_stacktrace(unsigned int const*, char const*)+0x9c>
    aee8:	e59f9070 	ldr	r9, [pc, #112]	; af60 <debug_stacktrace(unsigned int const*, char const*)+0xa0>
    aeec:	ea000003 	b	af00 <debug_stacktrace(unsigned int const*, char const*)+0x40>
    aef0:	e2844001 	add	r4, r4, #1
    aef4:	e3540040 	cmp	r4, #64	; 0x40
    aef8:	e2855004 	add	r5, r5, #4
    aefc:	0a000012 	beq	af4c <debug_stacktrace(unsigned int const*, char const*)+0x8c>
    af00:	e5953000 	ldr	r3, [r5]
    af04:	e1530006 	cmp	r3, r6
    af08:	9afffff8 	bls	aef0 <debug_stacktrace(unsigned int const*, char const*)+0x30>
    af0c:	e1530007 	cmp	r3, r7
    af10:	2afffff6 	bcs	aef0 <debug_stacktrace(unsigned int const*, char const*)+0x30>
    af14:	e3130003 	tst	r3, #3
    af18:	1afffff4 	bne	aef0 <debug_stacktrace(unsigned int const*, char const*)+0x30>
    af1c:	eb000807 	bl	cf40 <CLogger::Get()>
    af20:	e5953000 	ldr	r3, [r5]
    af24:	e1a0200a 	mov	r2, sl
    af28:	e58d4000 	str	r4, [sp]
    af2c:	e58d3004 	str	r3, [sp, #4]
    af30:	e1a01008 	mov	r1, r8
    af34:	e1a03009 	mov	r3, r9
    af38:	e2844001 	add	r4, r4, #1
    af3c:	eb0009a8 	bl	d5e4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    af40:	e3540040 	cmp	r4, #64	; 0x40
    af44:	e2855004 	add	r5, r5, #4
    af48:	1affffec 	bne	af00 <debug_stacktrace(unsigned int const*, char const*)+0x40>
    af4c:	e28dd008 	add	sp, sp, #8
    af50:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    af54:	00014798 	.word	0x00014798
    af58:	00007fff 	.word	0x00007fff
    af5c:	00013fc4 	.word	0x00013fc4
    af60:	00014820 	.word	0x00014820

0000af64 <CDevice::~CDevice()>:
    af64:	e12fff1e 	bx	lr

0000af68 <CDevice::Read(void*, unsigned int)>:
    af68:	e3e00000 	mvn	r0, #0
    af6c:	e12fff1e 	bx	lr

0000af70 <CDevice::Seek(unsigned long long)>:
    af70:	e3e00000 	mvn	r0, #0
    af74:	e3e01000 	mvn	r1, #0
    af78:	e12fff1e 	bx	lr

0000af7c <CDevice::~CDevice()>:
    af7c:	e92d4010 	push	{r4, lr}
    af80:	e1a04000 	mov	r4, r0
    af84:	e3a01004 	mov	r1, #4
    af88:	eb001e13 	bl	127dc <operator delete(void*, unsigned int)>
    af8c:	e1a00004 	mov	r0, r4
    af90:	e8bd8010 	pop	{r4, pc}

0000af94 <CDevice::CDevice()>:
    af94:	e59f3004 	ldr	r3, [pc, #4]	; afa0 <CDevice::CDevice()+0xc>
    af98:	e5803000 	str	r3, [r0]
    af9c:	e12fff1e 	bx	lr
    afa0:	0001483c 	.word	0x0001483c

0000afa4 <CDeviceNameService::CDeviceNameService()>:
    afa4:	e3a03000 	mov	r3, #0
    afa8:	e92d4070 	push	{r4, r5, r6, lr}
    afac:	e59f5030 	ldr	r5, [pc, #48]	; afe4 <CDeviceNameService::CDeviceNameService()+0x40>
    afb0:	e1a04000 	mov	r4, r0
    afb4:	e5952000 	ldr	r2, [r5]
    afb8:	e5803000 	str	r3, [r0]
    afbc:	e1520003 	cmp	r2, r3
    afc0:	e5803004 	str	r3, [r0, #4]
    afc4:	0a000003 	beq	afd8 <CDeviceNameService::CDeviceNameService()+0x34>
    afc8:	e3a0201f 	mov	r2, #31
    afcc:	e59f1014 	ldr	r1, [pc, #20]	; afe8 <CDeviceNameService::CDeviceNameService()+0x44>
    afd0:	e59f0014 	ldr	r0, [pc, #20]	; afec <CDeviceNameService::CDeviceNameService()+0x48>
    afd4:	ebfffeb0 	bl	aa9c <assertion_failed>
    afd8:	e5854000 	str	r4, [r5]
    afdc:	e1a00004 	mov	r0, r4
    afe0:	e8bd8070 	pop	{r4, r5, r6, pc}
    afe4:	00016688 	.word	0x00016688
    afe8:	00014850 	.word	0x00014850
    afec:	00014868 	.word	0x00014868

0000aff0 <CDeviceNameService::~CDeviceNameService()>:
    aff0:	e5903000 	ldr	r3, [r0]
    aff4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    aff8:	e3530000 	cmp	r3, #0
    affc:	e1a05000 	mov	r5, r0
    b000:	0a00000e 	beq	b040 <CDeviceNameService::~CDeviceNameService()+0x50>
    b004:	e3a06000 	mov	r6, #0
    b008:	e3a07010 	mov	r7, #16
    b00c:	e5930004 	ldr	r0, [r3, #4]
    b010:	e5934000 	ldr	r4, [r3]
    b014:	e3500000 	cmp	r0, #0
    b018:	0a000000 	beq	b020 <CDeviceNameService::~CDeviceNameService()+0x30>
    b01c:	eb001ded 	bl	127d8 <operator delete[](void*)>
    b020:	e5950000 	ldr	r0, [r5]
    b024:	e1a01007 	mov	r1, r7
    b028:	e5806004 	str	r6, [r0, #4]
    b02c:	e5806008 	str	r6, [r0, #8]
    b030:	eb001de9 	bl	127dc <operator delete(void*, unsigned int)>
    b034:	e2543000 	subs	r3, r4, #0
    b038:	e5854000 	str	r4, [r5]
    b03c:	1afffff2 	bne	b00c <CDeviceNameService::~CDeviceNameService()+0x1c>
    b040:	e3a02000 	mov	r2, #0
    b044:	e59f3008 	ldr	r3, [pc, #8]	; b054 <CDeviceNameService::~CDeviceNameService()+0x64>
    b048:	e1a00005 	mov	r0, r5
    b04c:	e5832000 	str	r2, [r3]
    b050:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    b054:	00016688 	.word	0x00016688

0000b058 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>:
    b058:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b05c:	e1a05000 	mov	r5, r0
    b060:	e5900004 	ldr	r0, [r0, #4]
    b064:	e1a06001 	mov	r6, r1
    b068:	e3500000 	cmp	r0, #0
    b06c:	e1a07002 	mov	r7, r2
    b070:	e1a08003 	mov	r8, r3
    b074:	1a000017 	bne	b0d8 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x80>
    b078:	e3a00010 	mov	r0, #16
    b07c:	eb001dd2 	bl	127cc <operator new(unsigned int)>
    b080:	e3560000 	cmp	r6, #0
    b084:	e1a04000 	mov	r4, r0
    b088:	0a000019 	beq	b0f4 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x9c>
    b08c:	e1a00006 	mov	r0, r6
    b090:	eb001a2f 	bl	11954 <strlen>
    b094:	e2800001 	add	r0, r0, #1
    b098:	eb001dcc 	bl	127d0 <operator new[](unsigned int)>
    b09c:	e1a01006 	mov	r1, r6
    b0a0:	e5840004 	str	r0, [r4, #4]
    b0a4:	eb001aa8 	bl	11b4c <strcpy>
    b0a8:	e3570000 	cmp	r7, #0
    b0ac:	0a00000b 	beq	b0e0 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x88>
    b0b0:	e5952004 	ldr	r2, [r5, #4]
    b0b4:	e5953000 	ldr	r3, [r5]
    b0b8:	e3520000 	cmp	r2, #0
    b0bc:	e5847008 	str	r7, [r4, #8]
    b0c0:	e5c4800c 	strb	r8, [r4, #12]
    b0c4:	e5843000 	str	r3, [r4]
    b0c8:	e5854000 	str	r4, [r5]
    b0cc:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    b0d0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    b0d4:	ea001d8f 	b	12718 <LeaveCritical>
    b0d8:	eb001d61 	bl	12664 <EnterCritical>
    b0dc:	eaffffe5 	b	b078 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x20>
    b0e0:	e3a02040 	mov	r2, #64	; 0x40
    b0e4:	e59f101c 	ldr	r1, [pc, #28]	; b108 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xb0>
    b0e8:	e59f001c 	ldr	r0, [pc, #28]	; b10c <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xb4>
    b0ec:	ebfffe6a 	bl	aa9c <assertion_failed>
    b0f0:	eaffffee 	b	b0b0 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x58>
    b0f4:	e3a0203b 	mov	r2, #59	; 0x3b
    b0f8:	e59f1008 	ldr	r1, [pc, #8]	; b108 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xb0>
    b0fc:	e59f000c 	ldr	r0, [pc, #12]	; b110 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xb8>
    b100:	ebfffe65 	bl	aa9c <assertion_failed>
    b104:	eaffffe0 	b	b08c <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x34>
    b108:	00014850 	.word	0x00014850
    b10c:	00014880 	.word	0x00014880
    b110:	00014874 	.word	0x00014874

0000b114 <CDeviceNameService::RemoveDevice(char const*, bool)>:
    b114:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b118:	e2516000 	subs	r6, r1, #0
    b11c:	e1a08000 	mov	r8, r0
    b120:	e1a07002 	mov	r7, r2
    b124:	0a000040 	beq	b22c <CDeviceNameService::RemoveDevice(char const*, bool)+0x118>
    b128:	e5980004 	ldr	r0, [r8, #4]
    b12c:	e3500000 	cmp	r0, #0
    b130:	1a00002e 	bne	b1f0 <CDeviceNameService::RemoveDevice(char const*, bool)+0xdc>
    b134:	e5984000 	ldr	r4, [r8]
    b138:	e3540000 	cmp	r4, #0
    b13c:	0a000039 	beq	b228 <CDeviceNameService::RemoveDevice(char const*, bool)+0x114>
    b140:	e3a05000 	mov	r5, #0
    b144:	e3a0b05e 	mov	fp, #94	; 0x5e
    b148:	e59fa0f0 	ldr	sl, [pc, #240]	; b240 <CDeviceNameService::RemoveDevice(char const*, bool)+0x12c>
    b14c:	e59f90f0 	ldr	r9, [pc, #240]	; b244 <CDeviceNameService::RemoveDevice(char const*, bool)+0x130>
    b150:	ea00000b 	b	b184 <CDeviceNameService::RemoveDevice(char const*, bool)+0x70>
    b154:	e1a00006 	mov	r0, r6
    b158:	eb001a07 	bl	1197c <strcmp>
    b15c:	e3500000 	cmp	r0, #0
    b160:	1a000002 	bne	b170 <CDeviceNameService::RemoveDevice(char const*, bool)+0x5c>
    b164:	e5d4300c 	ldrb	r3, [r4, #12]
    b168:	e1530007 	cmp	r3, r7
    b16c:	0a00000d 	beq	b1a8 <CDeviceNameService::RemoveDevice(char const*, bool)+0x94>
    b170:	e5943000 	ldr	r3, [r4]
    b174:	e1a05004 	mov	r5, r4
    b178:	e3530000 	cmp	r3, #0
    b17c:	0a00001f 	beq	b200 <CDeviceNameService::RemoveDevice(char const*, bool)+0xec>
    b180:	e1a04003 	mov	r4, r3
    b184:	e5941004 	ldr	r1, [r4, #4]
    b188:	e3510000 	cmp	r1, #0
    b18c:	1afffff0 	bne	b154 <CDeviceNameService::RemoveDevice(char const*, bool)+0x40>
    b190:	e1a0100a 	mov	r1, sl
    b194:	e1a0200b 	mov	r2, fp
    b198:	e1a00009 	mov	r0, r9
    b19c:	ebfffe3e 	bl	aa9c <assertion_failed>
    b1a0:	e5941004 	ldr	r1, [r4, #4]
    b1a4:	eaffffea 	b	b154 <CDeviceNameService::RemoveDevice(char const*, bool)+0x40>
    b1a8:	e3550000 	cmp	r5, #0
    b1ac:	0a00001a 	beq	b21c <CDeviceNameService::RemoveDevice(char const*, bool)+0x108>
    b1b0:	e5943000 	ldr	r3, [r4]
    b1b4:	e5853000 	str	r3, [r5]
    b1b8:	e5983004 	ldr	r3, [r8, #4]
    b1bc:	e3530000 	cmp	r3, #0
    b1c0:	1a000013 	bne	b214 <CDeviceNameService::RemoveDevice(char const*, bool)+0x100>
    b1c4:	e5940004 	ldr	r0, [r4, #4]
    b1c8:	e3500000 	cmp	r0, #0
    b1cc:	0a000000 	beq	b1d4 <CDeviceNameService::RemoveDevice(char const*, bool)+0xc0>
    b1d0:	eb001d80 	bl	127d8 <operator delete[](void*)>
    b1d4:	e3a03000 	mov	r3, #0
    b1d8:	e1a00004 	mov	r0, r4
    b1dc:	e5843004 	str	r3, [r4, #4]
    b1e0:	e5843008 	str	r3, [r4, #8]
    b1e4:	e3a01010 	mov	r1, #16
    b1e8:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b1ec:	ea001d7a 	b	127dc <operator delete(void*, unsigned int)>
    b1f0:	eb001d1b 	bl	12664 <EnterCritical>
    b1f4:	e5984000 	ldr	r4, [r8]
    b1f8:	e3540000 	cmp	r4, #0
    b1fc:	1affffcf 	bne	b140 <CDeviceNameService::RemoveDevice(char const*, bool)+0x2c>
    b200:	e5983004 	ldr	r3, [r8, #4]
    b204:	e3530000 	cmp	r3, #0
    b208:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b20c:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b210:	ea001d40 	b	12718 <LeaveCritical>
    b214:	eb001d3f 	bl	12718 <LeaveCritical>
    b218:	eaffffe9 	b	b1c4 <CDeviceNameService::RemoveDevice(char const*, bool)+0xb0>
    b21c:	e5943000 	ldr	r3, [r4]
    b220:	e5883000 	str	r3, [r8]
    b224:	eaffffe3 	b	b1b8 <CDeviceNameService::RemoveDevice(char const*, bool)+0xa4>
    b228:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b22c:	e3a02056 	mov	r2, #86	; 0x56
    b230:	e59f1008 	ldr	r1, [pc, #8]	; b240 <CDeviceNameService::RemoveDevice(char const*, bool)+0x12c>
    b234:	e59f000c 	ldr	r0, [pc, #12]	; b248 <CDeviceNameService::RemoveDevice(char const*, bool)+0x134>
    b238:	ebfffe17 	bl	aa9c <assertion_failed>
    b23c:	eaffffb9 	b	b128 <CDeviceNameService::RemoveDevice(char const*, bool)+0x14>
    b240:	00014850 	.word	0x00014850
    b244:	00014890 	.word	0x00014890
    b248:	00014874 	.word	0x00014874

0000b24c <CDeviceNameService::GetDevice(char const*, bool)>:
    b24c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    b250:	e2515000 	subs	r5, r1, #0
    b254:	e1a07000 	mov	r7, r0
    b258:	e1a06002 	mov	r6, r2
    b25c:	0a000034 	beq	b334 <CDeviceNameService::GetDevice(char const*, bool)+0xe8>
    b260:	e5970004 	ldr	r0, [r7, #4]
    b264:	e3500000 	cmp	r0, #0
    b268:	1a000019 	bne	b2d4 <CDeviceNameService::GetDevice(char const*, bool)+0x88>
    b26c:	e5974000 	ldr	r4, [r7]
    b270:	e3540000 	cmp	r4, #0
    b274:	0a00001e 	beq	b2f4 <CDeviceNameService::GetDevice(char const*, bool)+0xa8>
    b278:	e3a0a092 	mov	sl, #146	; 0x92
    b27c:	e59f90c4 	ldr	r9, [pc, #196]	; b348 <CDeviceNameService::GetDevice(char const*, bool)+0xfc>
    b280:	e59f80c4 	ldr	r8, [pc, #196]	; b34c <CDeviceNameService::GetDevice(char const*, bool)+0x100>
    b284:	ea000009 	b	b2b0 <CDeviceNameService::GetDevice(char const*, bool)+0x64>
    b288:	e1a00005 	mov	r0, r5
    b28c:	eb0019ba 	bl	1197c <strcmp>
    b290:	e3500000 	cmp	r0, #0
    b294:	1a000002 	bne	b2a4 <CDeviceNameService::GetDevice(char const*, bool)+0x58>
    b298:	e5d4300c 	ldrb	r3, [r4, #12]
    b29c:	e1530006 	cmp	r3, r6
    b2a0:	0a000016 	beq	b300 <CDeviceNameService::GetDevice(char const*, bool)+0xb4>
    b2a4:	e5944000 	ldr	r4, [r4]
    b2a8:	e3540000 	cmp	r4, #0
    b2ac:	0a00000c 	beq	b2e4 <CDeviceNameService::GetDevice(char const*, bool)+0x98>
    b2b0:	e5941004 	ldr	r1, [r4, #4]
    b2b4:	e3510000 	cmp	r1, #0
    b2b8:	1afffff2 	bne	b288 <CDeviceNameService::GetDevice(char const*, bool)+0x3c>
    b2bc:	e1a01009 	mov	r1, r9
    b2c0:	e1a0200a 	mov	r2, sl
    b2c4:	e1a00008 	mov	r0, r8
    b2c8:	ebfffdf3 	bl	aa9c <assertion_failed>
    b2cc:	e5941004 	ldr	r1, [r4, #4]
    b2d0:	eaffffec 	b	b288 <CDeviceNameService::GetDevice(char const*, bool)+0x3c>
    b2d4:	eb001ce2 	bl	12664 <EnterCritical>
    b2d8:	e5974000 	ldr	r4, [r7]
    b2dc:	e3540000 	cmp	r4, #0
    b2e0:	1affffe4 	bne	b278 <CDeviceNameService::GetDevice(char const*, bool)+0x2c>
    b2e4:	e5973004 	ldr	r3, [r7, #4]
    b2e8:	e3530000 	cmp	r3, #0
    b2ec:	0a000000 	beq	b2f4 <CDeviceNameService::GetDevice(char const*, bool)+0xa8>
    b2f0:	eb001d08 	bl	12718 <LeaveCritical>
    b2f4:	e3a04000 	mov	r4, #0
    b2f8:	e1a00004 	mov	r0, r4
    b2fc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    b300:	e5973004 	ldr	r3, [r7, #4]
    b304:	e5944008 	ldr	r4, [r4, #8]
    b308:	e3530000 	cmp	r3, #0
    b30c:	1a000006 	bne	b32c <CDeviceNameService::GetDevice(char const*, bool)+0xe0>
    b310:	e3540000 	cmp	r4, #0
    b314:	1afffff7 	bne	b2f8 <CDeviceNameService::GetDevice(char const*, bool)+0xac>
    b318:	e3a0209a 	mov	r2, #154	; 0x9a
    b31c:	e59f1024 	ldr	r1, [pc, #36]	; b348 <CDeviceNameService::GetDevice(char const*, bool)+0xfc>
    b320:	e59f0028 	ldr	r0, [pc, #40]	; b350 <CDeviceNameService::GetDevice(char const*, bool)+0x104>
    b324:	ebfffddc 	bl	aa9c <assertion_failed>
    b328:	eafffff2 	b	b2f8 <CDeviceNameService::GetDevice(char const*, bool)+0xac>
    b32c:	eb001cf9 	bl	12718 <LeaveCritical>
    b330:	eafffff6 	b	b310 <CDeviceNameService::GetDevice(char const*, bool)+0xc4>
    b334:	e3a0208b 	mov	r2, #139	; 0x8b
    b338:	e59f1008 	ldr	r1, [pc, #8]	; b348 <CDeviceNameService::GetDevice(char const*, bool)+0xfc>
    b33c:	e59f0010 	ldr	r0, [pc, #16]	; b354 <CDeviceNameService::GetDevice(char const*, bool)+0x108>
    b340:	ebfffdd5 	bl	aa9c <assertion_failed>
    b344:	eaffffc5 	b	b260 <CDeviceNameService::GetDevice(char const*, bool)+0x14>
    b348:	00014850 	.word	0x00014850
    b34c:	00014890 	.word	0x00014890
    b350:	000148a4 	.word	0x000148a4
    b354:	00014874 	.word	0x00014874

0000b358 <CDeviceNameService::Get()>:
    b358:	e92d4010 	push	{r4, lr}
    b35c:	e59f4020 	ldr	r4, [pc, #32]	; b384 <CDeviceNameService::Get()+0x2c>
    b360:	e5940000 	ldr	r0, [r4]
    b364:	e3500000 	cmp	r0, #0
    b368:	18bd8010 	popne	{r4, pc}
    b36c:	e3a020cc 	mov	r2, #204	; 0xcc
    b370:	e59f1010 	ldr	r1, [pc, #16]	; b388 <CDeviceNameService::Get()+0x30>
    b374:	e59f0010 	ldr	r0, [pc, #16]	; b38c <CDeviceNameService::Get()+0x34>
    b378:	ebfffdc7 	bl	aa9c <assertion_failed>
    b37c:	e5940000 	ldr	r0, [r4]
    b380:	e8bd8010 	pop	{r4, pc}
    b384:	00016688 	.word	0x00016688
    b388:	00014850 	.word	0x00014850
    b38c:	000148b4 	.word	0x000148b4

0000b390 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>:
    b390:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b394:	e1a07001 	mov	r7, r1
    b398:	e1a08002 	mov	r8, r2
    b39c:	e24dd010 	sub	sp, sp, #16
    b3a0:	e1a04000 	mov	r4, r0
    b3a4:	e1a0000d 	mov	r0, sp
    b3a8:	e1a05003 	mov	r5, r3
    b3ac:	e5dd6028 	ldrb	r6, [sp, #40]	; 0x28
    b3b0:	eb0011a1 	bl	fa3c <CString::CString()>
    b3b4:	e1a03008 	mov	r3, r8
    b3b8:	e1a02007 	mov	r2, r7
    b3bc:	e1a0000d 	mov	r0, sp
    b3c0:	e59f102c 	ldr	r1, [pc, #44]	; b3f4 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)+0x64>
    b3c4:	eb00158a 	bl	109f4 <CString::Format(char const*, ...)>
    b3c8:	e1a0000d 	mov	r0, sp
    b3cc:	eb0011b0 	bl	fa94 <CString::operator char const*() const>
    b3d0:	e1a03006 	mov	r3, r6
    b3d4:	e1a01000 	mov	r1, r0
    b3d8:	e1a02005 	mov	r2, r5
    b3dc:	e1a00004 	mov	r0, r4
    b3e0:	ebffff1c 	bl	b058 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
    b3e4:	e1a0000d 	mov	r0, sp
    b3e8:	eb001160 	bl	f970 <CString::~CString()>
    b3ec:	e28dd010 	add	sp, sp, #16
    b3f0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    b3f4:	000148c0 	.word	0x000148c0

0000b3f8 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>:
    b3f8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    b3fc:	e1a06001 	mov	r6, r1
    b400:	e1a07002 	mov	r7, r2
    b404:	e24dd014 	sub	sp, sp, #20
    b408:	e1a04000 	mov	r4, r0
    b40c:	e1a0000d 	mov	r0, sp
    b410:	e1a05003 	mov	r5, r3
    b414:	eb001188 	bl	fa3c <CString::CString()>
    b418:	e1a03007 	mov	r3, r7
    b41c:	e1a02006 	mov	r2, r6
    b420:	e1a0000d 	mov	r0, sp
    b424:	e59f1028 	ldr	r1, [pc, #40]	; b454 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)+0x5c>
    b428:	eb001571 	bl	109f4 <CString::Format(char const*, ...)>
    b42c:	e1a0000d 	mov	r0, sp
    b430:	eb001197 	bl	fa94 <CString::operator char const*() const>
    b434:	e1a02005 	mov	r2, r5
    b438:	e1a01000 	mov	r1, r0
    b43c:	e1a00004 	mov	r0, r4
    b440:	ebffff33 	bl	b114 <CDeviceNameService::RemoveDevice(char const*, bool)>
    b444:	e1a0000d 	mov	r0, sp
    b448:	eb001148 	bl	f970 <CString::~CString()>
    b44c:	e28dd014 	add	sp, sp, #20
    b450:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    b454:	000148c0 	.word	0x000148c0

0000b458 <CDeviceNameService::GetDevice(char const*, unsigned int, bool)>:
    b458:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    b45c:	e1a06001 	mov	r6, r1
    b460:	e1a07002 	mov	r7, r2
    b464:	e24dd014 	sub	sp, sp, #20
    b468:	e1a04000 	mov	r4, r0
    b46c:	e1a0000d 	mov	r0, sp
    b470:	e1a05003 	mov	r5, r3
    b474:	eb001170 	bl	fa3c <CString::CString()>
    b478:	e1a03007 	mov	r3, r7
    b47c:	e1a02006 	mov	r2, r6
    b480:	e1a0000d 	mov	r0, sp
    b484:	e59f1030 	ldr	r1, [pc, #48]	; b4bc <CDeviceNameService::GetDevice(char const*, unsigned int, bool)+0x64>
    b488:	eb001559 	bl	109f4 <CString::Format(char const*, ...)>
    b48c:	e1a0000d 	mov	r0, sp
    b490:	eb00117f 	bl	fa94 <CString::operator char const*() const>
    b494:	e1a02005 	mov	r2, r5
    b498:	e1a01000 	mov	r1, r0
    b49c:	e1a00004 	mov	r0, r4
    b4a0:	ebffff69 	bl	b24c <CDeviceNameService::GetDevice(char const*, bool)>
    b4a4:	e1a04000 	mov	r4, r0
    b4a8:	e1a0000d 	mov	r0, sp
    b4ac:	eb00112f 	bl	f970 <CString::~CString()>
    b4b0:	e1a00004 	mov	r0, r4
    b4b4:	e28dd014 	add	sp, sp, #20
    b4b8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    b4bc:	000148c0 	.word	0x000148c0

0000b4c0 <CDeviceNameService::ListDevices(CDevice*)>:
    b4c0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b4c4:	e2516000 	subs	r6, r1, #0
    b4c8:	e24dd01c 	sub	sp, sp, #28
    b4cc:	e1a04000 	mov	r4, r0
    b4d0:	0a000036 	beq	b5b0 <CDeviceNameService::ListDevices(CDevice*)+0xf0>
    b4d4:	e5944000 	ldr	r4, [r4]
    b4d8:	e3540000 	cmp	r4, #0
    b4dc:	0a00002b 	beq	b590 <CDeviceNameService::ListDevices(CDevice*)+0xd0>
    b4e0:	e3a05000 	mov	r5, #0
    b4e4:	e3a0b0b9 	mov	fp, #185	; 0xb9
    b4e8:	e59f80d4 	ldr	r8, [pc, #212]	; b5c4 <CDeviceNameService::ListDevices(CDevice*)+0x104>
    b4ec:	e28d0008 	add	r0, sp, #8
    b4f0:	eb001151 	bl	fa3c <CString::CString()>
    b4f4:	e5943004 	ldr	r3, [r4, #4]
    b4f8:	e2855001 	add	r5, r5, #1
    b4fc:	e3530000 	cmp	r3, #0
    b500:	0a000024 	beq	b598 <CDeviceNameService::ListDevices(CDevice*)+0xd8>
    b504:	e2157003 	ands	r7, r5, #3
    b508:	13a01020 	movne	r1, #32
    b50c:	03a0100a 	moveq	r1, #10
    b510:	e5d4200c 	ldrb	r2, [r4, #12]
    b514:	e28d0008 	add	r0, sp, #8
    b518:	e3520000 	cmp	r2, #0
    b51c:	03a02063 	moveq	r2, #99	; 0x63
    b520:	13a02062 	movne	r2, #98	; 0x62
    b524:	e58d1000 	str	r1, [sp]
    b528:	e1a01008 	mov	r1, r8
    b52c:	eb001530 	bl	109f4 <CString::Format(char const*, ...)>
    b530:	e5963000 	ldr	r3, [r6]
    b534:	e28d0008 	add	r0, sp, #8
    b538:	e593900c 	ldr	r9, [r3, #12]
    b53c:	eb001154 	bl	fa94 <CString::operator char const*() const>
    b540:	e1a0a000 	mov	sl, r0
    b544:	e28d0008 	add	r0, sp, #8
    b548:	eb00117f 	bl	fb4c <CString::GetLength() const>
    b54c:	e1a0100a 	mov	r1, sl
    b550:	e1a02000 	mov	r2, r0
    b554:	e1a00006 	mov	r0, r6
    b558:	e12fff39 	blx	r9
    b55c:	e5944000 	ldr	r4, [r4]
    b560:	e28d0008 	add	r0, sp, #8
    b564:	eb001101 	bl	f970 <CString::~CString()>
    b568:	e3540000 	cmp	r4, #0
    b56c:	1affffde 	bne	b4ec <CDeviceNameService::ListDevices(CDevice*)+0x2c>
    b570:	e3570000 	cmp	r7, #0
    b574:	0a000005 	beq	b590 <CDeviceNameService::ListDevices(CDevice*)+0xd0>
    b578:	e5963000 	ldr	r3, [r6]
    b57c:	e1a00006 	mov	r0, r6
    b580:	e593300c 	ldr	r3, [r3, #12]
    b584:	e3a02001 	mov	r2, #1
    b588:	e59f1038 	ldr	r1, [pc, #56]	; b5c8 <CDeviceNameService::ListDevices(CDevice*)+0x108>
    b58c:	e12fff33 	blx	r3
    b590:	e28dd01c 	add	sp, sp, #28
    b594:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b598:	e1a0200b 	mov	r2, fp
    b59c:	e59f1028 	ldr	r1, [pc, #40]	; b5cc <CDeviceNameService::ListDevices(CDevice*)+0x10c>
    b5a0:	e59f0028 	ldr	r0, [pc, #40]	; b5d0 <CDeviceNameService::ListDevices(CDevice*)+0x110>
    b5a4:	ebfffd3c 	bl	aa9c <assertion_failed>
    b5a8:	e5943004 	ldr	r3, [r4, #4]
    b5ac:	eaffffd4 	b	b504 <CDeviceNameService::ListDevices(CDevice*)+0x44>
    b5b0:	e3a020b0 	mov	r2, #176	; 0xb0
    b5b4:	e59f1010 	ldr	r1, [pc, #16]	; b5cc <CDeviceNameService::ListDevices(CDevice*)+0x10c>
    b5b8:	e59f0014 	ldr	r0, [pc, #20]	; b5d4 <CDeviceNameService::ListDevices(CDevice*)+0x114>
    b5bc:	ebfffd36 	bl	aa9c <assertion_failed>
    b5c0:	eaffffc3 	b	b4d4 <CDeviceNameService::ListDevices(CDevice*)+0x14>
    b5c4:	000148d8 	.word	0x000148d8
    b5c8:	00013fd8 	.word	0x00013fd8
    b5cc:	00014850 	.word	0x00014850
    b5d0:	00014890 	.word	0x00014890
    b5d4:	000148c8 	.word	0x000148c8

0000b5d8 <CGPIOPin::~CGPIOPin()>:
    b5d8:	e12fff1e 	bx	lr

0000b5dc <CGPIOPin::~CGPIOPin()>:
    b5dc:	e92d4010 	push	{r4, lr}
    b5e0:	e1a04000 	mov	r4, r0
    b5e4:	e3a01028 	mov	r1, #40	; 0x28
    b5e8:	eb001c7b 	bl	127dc <operator delete(void*, unsigned int)>
    b5ec:	e1a00004 	mov	r0, r4
    b5f0:	e8bd8010 	pop	{r4, pc}

0000b5f4 <CGPIOPin::CGPIOPin()>:
    b5f4:	e92d4010 	push	{r4, lr}
    b5f8:	e3a01000 	mov	r1, #0
    b5fc:	e3a02006 	mov	r2, #6
    b600:	e3a04036 	mov	r4, #54	; 0x36
    b604:	e3a0c00a 	mov	ip, #10
    b608:	e59fe01c 	ldr	lr, [pc, #28]	; b62c <CGPIOPin::CGPIOPin()+0x38>
    b60c:	e5804004 	str	r4, [r0, #4]
    b610:	e580e000 	str	lr, [r0]
    b614:	e5c0c010 	strb	ip, [r0, #16]
    b618:	e5801018 	str	r1, [r0, #24]
    b61c:	e580101c 	str	r1, [r0, #28]
    b620:	e5c02024 	strb	r2, [r0, #36]	; 0x24
    b624:	e5c02025 	strb	r2, [r0, #37]	; 0x25
    b628:	e8bd8010 	pop	{r4, pc}
    b62c:	000148ec 	.word	0x000148ec

0000b630 <CGPIOPin::AssignPin(unsigned int)>:
    b630:	e5903004 	ldr	r3, [r0, #4]
    b634:	e92d4070 	push	{r4, r5, r6, lr}
    b638:	e3530036 	cmp	r3, #54	; 0x36
    b63c:	e1a05000 	mov	r5, r0
    b640:	e1a04001 	mov	r4, r1
    b644:	0a000003 	beq	b658 <CGPIOPin::AssignPin(unsigned int)+0x28>
    b648:	e3a02040 	mov	r2, #64	; 0x40
    b64c:	e59f1064 	ldr	r1, [pc, #100]	; b6b8 <CGPIOPin::AssignPin(unsigned int)+0x88>
    b650:	e59f0064 	ldr	r0, [pc, #100]	; b6bc <CGPIOPin::AssignPin(unsigned int)+0x8c>
    b654:	ebfffd10 	bl	aa9c <assertion_failed>
    b658:	e3540035 	cmp	r4, #53	; 0x35
    b65c:	e5854004 	str	r4, [r5, #4]
    b660:	8a000007 	bhi	b684 <CGPIOPin::AssignPin(unsigned int)+0x54>
    b664:	e3a03001 	mov	r3, #1
    b668:	e204201f 	and	r2, r4, #31
    b66c:	e1a042a4 	lsr	r4, r4, #5
    b670:	e1a03213 	lsl	r3, r3, r2
    b674:	e1a04104 	lsl	r4, r4, #2
    b678:	e585300c 	str	r3, [r5, #12]
    b67c:	e5854008 	str	r4, [r5, #8]
    b680:	e8bd8070 	pop	{r4, r5, r6, pc}
    b684:	eb0008ea 	bl	da34 <CMachineInfo::Get()>
    b688:	e6ef1074 	uxtb	r1, r4
    b68c:	eb0008bb 	bl	d980 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>
    b690:	e3500035 	cmp	r0, #53	; 0x35
    b694:	e1a04000 	mov	r4, r0
    b698:	e5850004 	str	r0, [r5, #4]
    b69c:	9afffff0 	bls	b664 <CGPIOPin::AssignPin(unsigned int)+0x34>
    b6a0:	e3a02047 	mov	r2, #71	; 0x47
    b6a4:	e59f100c 	ldr	r1, [pc, #12]	; b6b8 <CGPIOPin::AssignPin(unsigned int)+0x88>
    b6a8:	e59f0010 	ldr	r0, [pc, #16]	; b6c0 <CGPIOPin::AssignPin(unsigned int)+0x90>
    b6ac:	ebfffcfa 	bl	aa9c <assertion_failed>
    b6b0:	e5954004 	ldr	r4, [r5, #4]
    b6b4:	eaffffea 	b	b664 <CGPIOPin::AssignPin(unsigned int)+0x34>
    b6b8:	0001490c 	.word	0x0001490c
    b6bc:	00014918 	.word	0x00014918
    b6c0:	0001492c 	.word	0x0001492c

0000b6c4 <CGPIOPin::Write(unsigned int)>:
    b6c4:	e5903004 	ldr	r3, [r0, #4]
    b6c8:	e92d4070 	push	{r4, r5, r6, lr}
    b6cc:	e3530035 	cmp	r3, #53	; 0x35
    b6d0:	e1a04000 	mov	r4, r0
    b6d4:	e1a05001 	mov	r5, r1
    b6d8:	8a00001e 	bhi	b758 <CGPIOPin::Write(unsigned int)+0x94>
    b6dc:	e5d43010 	ldrb	r3, [r4, #16]
    b6e0:	e3530003 	cmp	r3, #3
    b6e4:	ca000016 	bgt	b744 <CGPIOPin::Write(unsigned int)+0x80>
    b6e8:	e3a03000 	mov	r3, #0
    b6ec:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    b6f0:	e3550001 	cmp	r5, #1
    b6f4:	9a00000b 	bls	b728 <CGPIOPin::Write(unsigned int)+0x64>
    b6f8:	e3a02098 	mov	r2, #152	; 0x98
    b6fc:	e59f1068 	ldr	r1, [pc, #104]	; b76c <CGPIOPin::Write(unsigned int)+0xa8>
    b700:	e59f0068 	ldr	r0, [pc, #104]	; b770 <CGPIOPin::Write(unsigned int)+0xac>
    b704:	ebfffce4 	bl	aa9c <assertion_failed>
    b708:	e5845014 	str	r5, [r4, #20]
    b70c:	e59f5060 	ldr	r5, [pc, #96]	; b774 <CGPIOPin::Write(unsigned int)+0xb0>
    b710:	e594100c 	ldr	r1, [r4, #12]
    b714:	e5942008 	ldr	r2, [r4, #8]
    b718:	e3a03000 	mov	r3, #0
    b71c:	e7851002 	str	r1, [r5, r2]
    b720:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    b724:	e8bd8070 	pop	{r4, r5, r6, pc}
    b728:	e59f3044 	ldr	r3, [pc, #68]	; b774 <CGPIOPin::Write(unsigned int)+0xb0>
    b72c:	e59f2044 	ldr	r2, [pc, #68]	; b778 <CGPIOPin::Write(unsigned int)+0xb4>
    b730:	e3550000 	cmp	r5, #0
    b734:	e5845014 	str	r5, [r4, #20]
    b738:	11a05003 	movne	r5, r3
    b73c:	01a05002 	moveq	r5, r2
    b740:	eafffff2 	b	b710 <CGPIOPin::Write(unsigned int)+0x4c>
    b744:	e3a02094 	mov	r2, #148	; 0x94
    b748:	e59f101c 	ldr	r1, [pc, #28]	; b76c <CGPIOPin::Write(unsigned int)+0xa8>
    b74c:	e59f0028 	ldr	r0, [pc, #40]	; b77c <CGPIOPin::Write(unsigned int)+0xb8>
    b750:	ebfffcd1 	bl	aa9c <assertion_failed>
    b754:	eaffffe3 	b	b6e8 <CGPIOPin::Write(unsigned int)+0x24>
    b758:	e3a02091 	mov	r2, #145	; 0x91
    b75c:	e59f1008 	ldr	r1, [pc, #8]	; b76c <CGPIOPin::Write(unsigned int)+0xa8>
    b760:	e59f0018 	ldr	r0, [pc, #24]	; b780 <CGPIOPin::Write(unsigned int)+0xbc>
    b764:	ebfffccc 	bl	aa9c <assertion_failed>
    b768:	eaffffdb 	b	b6dc <CGPIOPin::Write(unsigned int)+0x18>
    b76c:	0001490c 	.word	0x0001490c
    b770:	00014964 	.word	0x00014964
    b774:	2020001c 	.word	0x2020001c
    b778:	20200028 	.word	0x20200028
    b77c:	00014940 	.word	0x00014940
    b780:	0001492c 	.word	0x0001492c

0000b784 <CGPIOPin::Read() const>:
    b784:	e5903004 	ldr	r3, [r0, #4]
    b788:	e92d4010 	push	{r4, lr}
    b78c:	e3530035 	cmp	r3, #53	; 0x35
    b790:	e1a04000 	mov	r4, r0
    b794:	8a000013 	bhi	b7e8 <CGPIOPin::Read() const+0x64>
    b798:	e5d43010 	ldrb	r3, [r4, #16]
    b79c:	e2432002 	sub	r2, r3, #2
    b7a0:	e3530000 	cmp	r3, #0
    b7a4:	13520001 	cmpne	r2, #1
    b7a8:	9a000003 	bls	b7bc <CGPIOPin::Read() const+0x38>
    b7ac:	e3a020a8 	mov	r2, #168	; 0xa8
    b7b0:	e59f1044 	ldr	r1, [pc, #68]	; b7fc <CGPIOPin::Read() const+0x78>
    b7b4:	e59f0044 	ldr	r0, [pc, #68]	; b800 <CGPIOPin::Read() const+0x7c>
    b7b8:	ebfffcb7 	bl	aa9c <assertion_failed>
    b7bc:	e3a03000 	mov	r3, #0
    b7c0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    b7c4:	e59f1038 	ldr	r1, [pc, #56]	; b804 <CGPIOPin::Read() const+0x80>
    b7c8:	e5940008 	ldr	r0, [r4, #8]
    b7cc:	e594200c 	ldr	r2, [r4, #12]
    b7d0:	e7901001 	ldr	r1, [r0, r1]
    b7d4:	e1110002 	tst	r1, r2
    b7d8:	13a00001 	movne	r0, #1
    b7dc:	01a00003 	moveq	r0, r3
    b7e0:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    b7e4:	e8bd8010 	pop	{r4, pc}
    b7e8:	e3a020a4 	mov	r2, #164	; 0xa4
    b7ec:	e59f1008 	ldr	r1, [pc, #8]	; b7fc <CGPIOPin::Read() const+0x78>
    b7f0:	e59f0010 	ldr	r0, [pc, #16]	; b808 <CGPIOPin::Read() const+0x84>
    b7f4:	ebfffca8 	bl	aa9c <assertion_failed>
    b7f8:	eaffffe6 	b	b798 <CGPIOPin::Read() const+0x14>
    b7fc:	0001490c 	.word	0x0001490c
    b800:	00014984 	.word	0x00014984
    b804:	20200034 	.word	0x20200034
    b808:	0001492c 	.word	0x0001492c

0000b80c <CGPIOPin::Invert()>:
    b80c:	e5d03010 	ldrb	r3, [r0, #16]
    b810:	e92d4010 	push	{r4, lr}
    b814:	e3530001 	cmp	r3, #1
    b818:	e1a04000 	mov	r4, r0
    b81c:	0a000003 	beq	b830 <CGPIOPin::Invert()+0x24>
    b820:	e3a020b5 	mov	r2, #181	; 0xb5
    b824:	e59f1018 	ldr	r1, [pc, #24]	; b844 <CGPIOPin::Invert()+0x38>
    b828:	e59f0018 	ldr	r0, [pc, #24]	; b848 <CGPIOPin::Invert()+0x3c>
    b82c:	ebfffc9a 	bl	aa9c <assertion_failed>
    b830:	e5941014 	ldr	r1, [r4, #20]
    b834:	e1a00004 	mov	r0, r4
    b838:	e8bd4010 	pop	{r4, lr}
    b83c:	e2211001 	eor	r1, r1, #1
    b840:	eaffff9f 	b	b6c4 <CGPIOPin::Write(unsigned int)>
    b844:	0001490c 	.word	0x0001490c
    b848:	000149e0 	.word	0x000149e0

0000b84c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)>:
    b84c:	e5d03010 	ldrb	r3, [r0, #16]
    b850:	e92d4070 	push	{r4, r5, r6, lr}
    b854:	e1a05001 	mov	r5, r1
    b858:	e2431002 	sub	r1, r3, #2
    b85c:	e3530000 	cmp	r3, #0
    b860:	13510001 	cmpne	r1, #1
    b864:	e1a04000 	mov	r4, r0
    b868:	e1a06002 	mov	r6, r2
    b86c:	9a000003 	bls	b880 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x34>
    b870:	e3a020be 	mov	r2, #190	; 0xbe
    b874:	e59f10b4 	ldr	r1, [pc, #180]	; b930 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe4>
    b878:	e59f00b4 	ldr	r0, [pc, #180]	; b934 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe8>
    b87c:	ebfffc86 	bl	aa9c <assertion_failed>
    b880:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    b884:	e3530006 	cmp	r3, #6
    b888:	0a000003 	beq	b89c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x50>
    b88c:	e3a020c0 	mov	r2, #192	; 0xc0
    b890:	e59f1098 	ldr	r1, [pc, #152]	; b930 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe4>
    b894:	e59f009c 	ldr	r0, [pc, #156]	; b938 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xec>
    b898:	ebfffc7f 	bl	aa9c <assertion_failed>
    b89c:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    b8a0:	e3530006 	cmp	r3, #6
    b8a4:	0a000003 	beq	b8b8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x6c>
    b8a8:	e3a020c1 	mov	r2, #193	; 0xc1
    b8ac:	e59f107c 	ldr	r1, [pc, #124]	; b930 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe4>
    b8b0:	e59f0084 	ldr	r0, [pc, #132]	; b93c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xf0>
    b8b4:	ebfffc78 	bl	aa9c <assertion_failed>
    b8b8:	e3550000 	cmp	r5, #0
    b8bc:	0a000016 	beq	b91c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xd0>
    b8c0:	e594301c 	ldr	r3, [r4, #28]
    b8c4:	e3530000 	cmp	r3, #0
    b8c8:	0a000003 	beq	b8dc <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x90>
    b8cc:	e3a020c4 	mov	r2, #196	; 0xc4
    b8d0:	e59f1058 	ldr	r1, [pc, #88]	; b930 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe4>
    b8d4:	e59f0064 	ldr	r0, [pc, #100]	; b940 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xf4>
    b8d8:	ebfffc6f 	bl	aa9c <assertion_failed>
    b8dc:	e5940018 	ldr	r0, [r4, #24]
    b8e0:	e584501c 	str	r5, [r4, #28]
    b8e4:	e3500000 	cmp	r0, #0
    b8e8:	e5846020 	str	r6, [r4, #32]
    b8ec:	0a000002 	beq	b8fc <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xb0>
    b8f0:	e1a01004 	mov	r1, r4
    b8f4:	e8bd4070 	pop	{r4, r5, r6, lr}
    b8f8:	ea001f3f 	b	135fc <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
    b8fc:	e59f102c 	ldr	r1, [pc, #44]	; b930 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe4>
    b900:	e59f003c 	ldr	r0, [pc, #60]	; b944 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xf8>
    b904:	e3a020c9 	mov	r2, #201	; 0xc9
    b908:	ebfffc63 	bl	aa9c <assertion_failed>
    b90c:	e5940018 	ldr	r0, [r4, #24]
    b910:	e1a01004 	mov	r1, r4
    b914:	e8bd4070 	pop	{r4, r5, r6, lr}
    b918:	ea001f37 	b	135fc <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
    b91c:	e3a020c3 	mov	r2, #195	; 0xc3
    b920:	e59f1008 	ldr	r1, [pc, #8]	; b930 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe4>
    b924:	e59f001c 	ldr	r0, [pc, #28]	; b948 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xfc>
    b928:	ebfffc5b 	bl	aa9c <assertion_failed>
    b92c:	eaffffe3 	b	b8c0 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x74>
    b930:	0001490c 	.word	0x0001490c
    b934:	00014984 	.word	0x00014984
    b938:	000149fc 	.word	0x000149fc
    b93c:	00014a20 	.word	0x00014a20
    b940:	00014a48 	.word	0x00014a48
    b944:	00014a58 	.word	0x00014a58
    b948:	00014bc8 	.word	0x00014bc8

0000b94c <CGPIOPin::DisconnectInterrupt()>:
    b94c:	e5d03010 	ldrb	r3, [r0, #16]
    b950:	e92d4010 	push	{r4, lr}
    b954:	e2432002 	sub	r2, r3, #2
    b958:	e3530000 	cmp	r3, #0
    b95c:	13520001 	cmpne	r2, #1
    b960:	e1a04000 	mov	r4, r0
    b964:	9a000003 	bls	b978 <CGPIOPin::DisconnectInterrupt()+0x2c>
    b968:	e3a020d1 	mov	r2, #209	; 0xd1
    b96c:	e59f109c 	ldr	r1, [pc, #156]	; ba10 <CGPIOPin::DisconnectInterrupt()+0xc4>
    b970:	e59f009c 	ldr	r0, [pc, #156]	; ba14 <CGPIOPin::DisconnectInterrupt()+0xc8>
    b974:	ebfffc48 	bl	aa9c <assertion_failed>
    b978:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    b97c:	e3530006 	cmp	r3, #6
    b980:	0a000003 	beq	b994 <CGPIOPin::DisconnectInterrupt()+0x48>
    b984:	e3a020d3 	mov	r2, #211	; 0xd3
    b988:	e59f1080 	ldr	r1, [pc, #128]	; ba10 <CGPIOPin::DisconnectInterrupt()+0xc4>
    b98c:	e59f0084 	ldr	r0, [pc, #132]	; ba18 <CGPIOPin::DisconnectInterrupt()+0xcc>
    b990:	ebfffc41 	bl	aa9c <assertion_failed>
    b994:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    b998:	e3530006 	cmp	r3, #6
    b99c:	0a000003 	beq	b9b0 <CGPIOPin::DisconnectInterrupt()+0x64>
    b9a0:	e3a020d4 	mov	r2, #212	; 0xd4
    b9a4:	e59f1064 	ldr	r1, [pc, #100]	; ba10 <CGPIOPin::DisconnectInterrupt()+0xc4>
    b9a8:	e59f006c 	ldr	r0, [pc, #108]	; ba1c <CGPIOPin::DisconnectInterrupt()+0xd0>
    b9ac:	ebfffc3a 	bl	aa9c <assertion_failed>
    b9b0:	e594301c 	ldr	r3, [r4, #28]
    b9b4:	e3530000 	cmp	r3, #0
    b9b8:	0a00000f 	beq	b9fc <CGPIOPin::DisconnectInterrupt()+0xb0>
    b9bc:	e3a03000 	mov	r3, #0
    b9c0:	e5940018 	ldr	r0, [r4, #24]
    b9c4:	e584301c 	str	r3, [r4, #28]
    b9c8:	e1500003 	cmp	r0, r3
    b9cc:	0a000002 	beq	b9dc <CGPIOPin::DisconnectInterrupt()+0x90>
    b9d0:	e1a01004 	mov	r1, r4
    b9d4:	e8bd4010 	pop	{r4, lr}
    b9d8:	ea001f30 	b	136a0 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
    b9dc:	e59f102c 	ldr	r1, [pc, #44]	; ba10 <CGPIOPin::DisconnectInterrupt()+0xc4>
    b9e0:	e59f0038 	ldr	r0, [pc, #56]	; ba20 <CGPIOPin::DisconnectInterrupt()+0xd4>
    b9e4:	e3a020d9 	mov	r2, #217	; 0xd9
    b9e8:	ebfffc2b 	bl	aa9c <assertion_failed>
    b9ec:	e5940018 	ldr	r0, [r4, #24]
    b9f0:	e1a01004 	mov	r1, r4
    b9f4:	e8bd4010 	pop	{r4, lr}
    b9f8:	ea001f28 	b	136a0 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
    b9fc:	e3a020d6 	mov	r2, #214	; 0xd6
    ba00:	e59f1008 	ldr	r1, [pc, #8]	; ba10 <CGPIOPin::DisconnectInterrupt()+0xc4>
    ba04:	e59f0018 	ldr	r0, [pc, #24]	; ba24 <CGPIOPin::DisconnectInterrupt()+0xd8>
    ba08:	ebfffc23 	bl	aa9c <assertion_failed>
    ba0c:	eaffffea 	b	b9bc <CGPIOPin::DisconnectInterrupt()+0x70>
    ba10:	0001490c 	.word	0x0001490c
    ba14:	00014984 	.word	0x00014984
    ba18:	000149fc 	.word	0x000149fc
    ba1c:	00014a20 	.word	0x00014a20
    ba20:	00014a58 	.word	0x00014a58
    ba24:	00014a68 	.word	0x00014a68

0000ba28 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)>:
    ba28:	e5d03010 	ldrb	r3, [r0, #16]
    ba2c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    ba30:	e2432002 	sub	r2, r3, #2
    ba34:	e3530000 	cmp	r3, #0
    ba38:	13520001 	cmpne	r2, #1
    ba3c:	e1a04000 	mov	r4, r0
    ba40:	e1a05001 	mov	r5, r1
    ba44:	9a000003 	bls	ba58 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x30>
    ba48:	e3a020e1 	mov	r2, #225	; 0xe1
    ba4c:	e59f10d8 	ldr	r1, [pc, #216]	; bb2c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x104>
    ba50:	e59f00d8 	ldr	r0, [pc, #216]	; bb30 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x108>
    ba54:	ebfffc10 	bl	aa9c <assertion_failed>
    ba58:	e594301c 	ldr	r3, [r4, #28]
    ba5c:	e3530000 	cmp	r3, #0
    ba60:	0a00002c 	beq	bb18 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf0>
    ba64:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    ba68:	e3530006 	cmp	r3, #6
    ba6c:	0a000003 	beq	ba80 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x58>
    ba70:	e3a020e4 	mov	r2, #228	; 0xe4
    ba74:	e59f10b0 	ldr	r1, [pc, #176]	; bb2c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x104>
    ba78:	e59f00b4 	ldr	r0, [pc, #180]	; bb34 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x10c>
    ba7c:	ebfffc06 	bl	aa9c <assertion_failed>
    ba80:	e3550005 	cmp	r5, #5
    ba84:	ca000017 	bgt	bae8 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xc0>
    ba88:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    ba8c:	e1530005 	cmp	r3, r5
    ba90:	0a00001b 	beq	bb04 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xdc>
    ba94:	e59f709c 	ldr	r7, [pc, #156]	; bb38 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x110>
    ba98:	e5942008 	ldr	r2, [r4, #8]
    ba9c:	e5970000 	ldr	r0, [r7]
    baa0:	e59f6094 	ldr	r6, [pc, #148]	; bb3c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x114>
    baa4:	e0853085 	add	r3, r5, r5, lsl #1
    baa8:	e3500000 	cmp	r0, #0
    baac:	e5c45024 	strb	r5, [r4, #36]	; 0x24
    bab0:	e0826006 	add	r6, r2, r6
    bab4:	e1a05103 	lsl	r5, r3, #2
    bab8:	1a000008 	bne	bae0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xb8>
    babc:	e594200c 	ldr	r2, [r4, #12]
    bac0:	e7963005 	ldr	r3, [r6, r5]
    bac4:	e1833002 	orr	r3, r3, r2
    bac8:	e7863005 	str	r3, [r6, r5]
    bacc:	e5973000 	ldr	r3, [r7]
    bad0:	e3530000 	cmp	r3, #0
    bad4:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    bad8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    badc:	ea001b0d 	b	12718 <LeaveCritical>
    bae0:	eb001adf 	bl	12664 <EnterCritical>
    bae4:	eafffff4 	b	babc <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x94>
    bae8:	e3a020e5 	mov	r2, #229	; 0xe5
    baec:	e59f1038 	ldr	r1, [pc, #56]	; bb2c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x104>
    baf0:	e59f0048 	ldr	r0, [pc, #72]	; bb40 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x118>
    baf4:	ebfffbe8 	bl	aa9c <assertion_failed>
    baf8:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    bafc:	e1530005 	cmp	r3, r5
    bb00:	1affffe3 	bne	ba94 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x6c>
    bb04:	e3a020e6 	mov	r2, #230	; 0xe6
    bb08:	e59f101c 	ldr	r1, [pc, #28]	; bb2c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x104>
    bb0c:	e59f0030 	ldr	r0, [pc, #48]	; bb44 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x11c>
    bb10:	ebfffbe1 	bl	aa9c <assertion_failed>
    bb14:	eaffffde 	b	ba94 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x6c>
    bb18:	e3a020e2 	mov	r2, #226	; 0xe2
    bb1c:	e59f1008 	ldr	r1, [pc, #8]	; bb2c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x104>
    bb20:	e59f0020 	ldr	r0, [pc, #32]	; bb48 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x120>
    bb24:	ebfffbdc 	bl	aa9c <assertion_failed>
    bb28:	eaffffcd 	b	ba64 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x3c>
    bb2c:	0001490c 	.word	0x0001490c
    bb30:	00014984 	.word	0x00014984
    bb34:	000149fc 	.word	0x000149fc
    bb38:	0001668c 	.word	0x0001668c
    bb3c:	2020004c 	.word	0x2020004c
    bb40:	00014a78 	.word	0x00014a78
    bb44:	00014a9c 	.word	0x00014a9c
    bb48:	00014a68 	.word	0x00014a68

0000bb4c <CGPIOPin::DisableInterrupt()>:
    bb4c:	e5d03010 	ldrb	r3, [r0, #16]
    bb50:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    bb54:	e2432002 	sub	r2, r3, #2
    bb58:	e3530000 	cmp	r3, #0
    bb5c:	13520001 	cmpne	r2, #1
    bb60:	e1a05000 	mov	r5, r0
    bb64:	9a000003 	bls	bb78 <CGPIOPin::DisableInterrupt()+0x2c>
    bb68:	e3a020f7 	mov	r2, #247	; 0xf7
    bb6c:	e59f1080 	ldr	r1, [pc, #128]	; bbf4 <CGPIOPin::DisableInterrupt()+0xa8>
    bb70:	e59f0080 	ldr	r0, [pc, #128]	; bbf8 <CGPIOPin::DisableInterrupt()+0xac>
    bb74:	ebfffbc8 	bl	aa9c <assertion_failed>
    bb78:	e5d53024 	ldrb	r3, [r5, #36]	; 0x24
    bb7c:	e3530005 	cmp	r3, #5
    bb80:	ca000015 	bgt	bbdc <CGPIOPin::DisableInterrupt()+0x90>
    bb84:	e59f7070 	ldr	r7, [pc, #112]	; bbfc <CGPIOPin::DisableInterrupt()+0xb0>
    bb88:	e5952008 	ldr	r2, [r5, #8]
    bb8c:	e5970000 	ldr	r0, [r7]
    bb90:	e59f6068 	ldr	r6, [pc, #104]	; bc00 <CGPIOPin::DisableInterrupt()+0xb4>
    bb94:	e0833083 	add	r3, r3, r3, lsl #1
    bb98:	e3500000 	cmp	r0, #0
    bb9c:	e1a04103 	lsl	r4, r3, #2
    bba0:	e0826006 	add	r6, r2, r6
    bba4:	1a00000a 	bne	bbd4 <CGPIOPin::DisableInterrupt()+0x88>
    bba8:	e7963004 	ldr	r3, [r6, r4]
    bbac:	e595200c 	ldr	r2, [r5, #12]
    bbb0:	e1c33002 	bic	r3, r3, r2
    bbb4:	e7863004 	str	r3, [r6, r4]
    bbb8:	e5973000 	ldr	r3, [r7]
    bbbc:	e3530000 	cmp	r3, #0
    bbc0:	0a000000 	beq	bbc8 <CGPIOPin::DisableInterrupt()+0x7c>
    bbc4:	eb001ad3 	bl	12718 <LeaveCritical>
    bbc8:	e3a03006 	mov	r3, #6
    bbcc:	e5c53024 	strb	r3, [r5, #36]	; 0x24
    bbd0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    bbd4:	eb001aa2 	bl	12664 <EnterCritical>
    bbd8:	eafffff2 	b	bba8 <CGPIOPin::DisableInterrupt()+0x5c>
    bbdc:	e3a020f9 	mov	r2, #249	; 0xf9
    bbe0:	e59f100c 	ldr	r1, [pc, #12]	; bbf4 <CGPIOPin::DisableInterrupt()+0xa8>
    bbe4:	e59f0018 	ldr	r0, [pc, #24]	; bc04 <CGPIOPin::DisableInterrupt()+0xb8>
    bbe8:	ebfffbab 	bl	aa9c <assertion_failed>
    bbec:	e5d53024 	ldrb	r3, [r5, #36]	; 0x24
    bbf0:	eaffffe3 	b	bb84 <CGPIOPin::DisableInterrupt()+0x38>
    bbf4:	0001490c 	.word	0x0001490c
    bbf8:	00014984 	.word	0x00014984
    bbfc:	0001668c 	.word	0x0001668c
    bc00:	2020004c 	.word	0x2020004c
    bc04:	00014ab8 	.word	0x00014ab8

0000bc08 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)>:
    bc08:	e5d03010 	ldrb	r3, [r0, #16]
    bc0c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    bc10:	e2432002 	sub	r2, r3, #2
    bc14:	e3530000 	cmp	r3, #0
    bc18:	13520001 	cmpne	r2, #1
    bc1c:	e1a04000 	mov	r4, r0
    bc20:	e1a05001 	mov	r5, r1
    bc24:	9a000003 	bls	bc38 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x30>
    bc28:	e59f20dc 	ldr	r2, [pc, #220]	; bd0c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x104>
    bc2c:	e59f10dc 	ldr	r1, [pc, #220]	; bd10 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x108>
    bc30:	e59f00dc 	ldr	r0, [pc, #220]	; bd14 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x10c>
    bc34:	ebfffb98 	bl	aa9c <assertion_failed>
    bc38:	e594301c 	ldr	r3, [r4, #28]
    bc3c:	e3530000 	cmp	r3, #0
    bc40:	0a00002c 	beq	bcf8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf0>
    bc44:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    bc48:	e3530006 	cmp	r3, #6
    bc4c:	0a000003 	beq	bc60 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x58>
    bc50:	e59f20c0 	ldr	r2, [pc, #192]	; bd18 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x110>
    bc54:	e59f10b4 	ldr	r1, [pc, #180]	; bd10 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x108>
    bc58:	e59f00bc 	ldr	r0, [pc, #188]	; bd1c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x114>
    bc5c:	ebfffb8e 	bl	aa9c <assertion_failed>
    bc60:	e3550005 	cmp	r5, #5
    bc64:	ca000017 	bgt	bcc8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xc0>
    bc68:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    bc6c:	e1530005 	cmp	r3, r5
    bc70:	0a00001b 	beq	bce4 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xdc>
    bc74:	e59f70a4 	ldr	r7, [pc, #164]	; bd20 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x118>
    bc78:	e5942008 	ldr	r2, [r4, #8]
    bc7c:	e5970000 	ldr	r0, [r7]
    bc80:	e59f609c 	ldr	r6, [pc, #156]	; bd24 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x11c>
    bc84:	e0853085 	add	r3, r5, r5, lsl #1
    bc88:	e3500000 	cmp	r0, #0
    bc8c:	e5c45025 	strb	r5, [r4, #37]	; 0x25
    bc90:	e0826006 	add	r6, r2, r6
    bc94:	e1a05103 	lsl	r5, r3, #2
    bc98:	1a000008 	bne	bcc0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xb8>
    bc9c:	e594200c 	ldr	r2, [r4, #12]
    bca0:	e7963005 	ldr	r3, [r6, r5]
    bca4:	e1833002 	orr	r3, r3, r2
    bca8:	e7863005 	str	r3, [r6, r5]
    bcac:	e5973000 	ldr	r3, [r7]
    bcb0:	e3530000 	cmp	r3, #0
    bcb4:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    bcb8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    bcbc:	ea001a95 	b	12718 <LeaveCritical>
    bcc0:	eb001a67 	bl	12664 <EnterCritical>
    bcc4:	eafffff4 	b	bc9c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x94>
    bcc8:	e59f2058 	ldr	r2, [pc, #88]	; bd28 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x120>
    bccc:	e59f103c 	ldr	r1, [pc, #60]	; bd10 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x108>
    bcd0:	e59f0054 	ldr	r0, [pc, #84]	; bd2c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x124>
    bcd4:	ebfffb70 	bl	aa9c <assertion_failed>
    bcd8:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    bcdc:	e1530005 	cmp	r3, r5
    bce0:	1affffe3 	bne	bc74 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x6c>
    bce4:	e59f2044 	ldr	r2, [pc, #68]	; bd30 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x128>
    bce8:	e59f1020 	ldr	r1, [pc, #32]	; bd10 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x108>
    bcec:	e59f0040 	ldr	r0, [pc, #64]	; bd34 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x12c>
    bcf0:	ebfffb69 	bl	aa9c <assertion_failed>
    bcf4:	eaffffde 	b	bc74 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x6c>
    bcf8:	e59f2038 	ldr	r2, [pc, #56]	; bd38 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x130>
    bcfc:	e59f100c 	ldr	r1, [pc, #12]	; bd10 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x108>
    bd00:	e59f0034 	ldr	r0, [pc, #52]	; bd3c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x134>
    bd04:	ebfffb64 	bl	aa9c <assertion_failed>
    bd08:	eaffffcd 	b	bc44 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x3c>
    bd0c:	0000010a 	.word	0x0000010a
    bd10:	0001490c 	.word	0x0001490c
    bd14:	00014984 	.word	0x00014984
    bd18:	0000010d 	.word	0x0000010d
    bd1c:	00014a20 	.word	0x00014a20
    bd20:	0001668c 	.word	0x0001668c
    bd24:	2020004c 	.word	0x2020004c
    bd28:	0000010e 	.word	0x0000010e
    bd2c:	00014a78 	.word	0x00014a78
    bd30:	0000010f 	.word	0x0000010f
    bd34:	00014adc 	.word	0x00014adc
    bd38:	0000010b 	.word	0x0000010b
    bd3c:	00014a68 	.word	0x00014a68

0000bd40 <CGPIOPin::DisableInterrupt2()>:
    bd40:	e5d03010 	ldrb	r3, [r0, #16]
    bd44:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    bd48:	e2432002 	sub	r2, r3, #2
    bd4c:	e3530000 	cmp	r3, #0
    bd50:	13520001 	cmpne	r2, #1
    bd54:	e1a05000 	mov	r5, r0
    bd58:	9a000003 	bls	bd6c <CGPIOPin::DisableInterrupt2()+0x2c>
    bd5c:	e3a02e12 	mov	r2, #288	; 0x120
    bd60:	e59f1080 	ldr	r1, [pc, #128]	; bde8 <CGPIOPin::DisableInterrupt2()+0xa8>
    bd64:	e59f0080 	ldr	r0, [pc, #128]	; bdec <CGPIOPin::DisableInterrupt2()+0xac>
    bd68:	ebfffb4b 	bl	aa9c <assertion_failed>
    bd6c:	e5d53025 	ldrb	r3, [r5, #37]	; 0x25
    bd70:	e3530005 	cmp	r3, #5
    bd74:	ca000015 	bgt	bdd0 <CGPIOPin::DisableInterrupt2()+0x90>
    bd78:	e59f7070 	ldr	r7, [pc, #112]	; bdf0 <CGPIOPin::DisableInterrupt2()+0xb0>
    bd7c:	e5952008 	ldr	r2, [r5, #8]
    bd80:	e5970000 	ldr	r0, [r7]
    bd84:	e59f6068 	ldr	r6, [pc, #104]	; bdf4 <CGPIOPin::DisableInterrupt2()+0xb4>
    bd88:	e0833083 	add	r3, r3, r3, lsl #1
    bd8c:	e3500000 	cmp	r0, #0
    bd90:	e1a04103 	lsl	r4, r3, #2
    bd94:	e0826006 	add	r6, r2, r6
    bd98:	1a00000a 	bne	bdc8 <CGPIOPin::DisableInterrupt2()+0x88>
    bd9c:	e7963004 	ldr	r3, [r6, r4]
    bda0:	e595200c 	ldr	r2, [r5, #12]
    bda4:	e1c33002 	bic	r3, r3, r2
    bda8:	e7863004 	str	r3, [r6, r4]
    bdac:	e5973000 	ldr	r3, [r7]
    bdb0:	e3530000 	cmp	r3, #0
    bdb4:	0a000000 	beq	bdbc <CGPIOPin::DisableInterrupt2()+0x7c>
    bdb8:	eb001a56 	bl	12718 <LeaveCritical>
    bdbc:	e3a03006 	mov	r3, #6
    bdc0:	e5c53025 	strb	r3, [r5, #37]	; 0x25
    bdc4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    bdc8:	eb001a25 	bl	12664 <EnterCritical>
    bdcc:	eafffff2 	b	bd9c <CGPIOPin::DisableInterrupt2()+0x5c>
    bdd0:	e59f2020 	ldr	r2, [pc, #32]	; bdf8 <CGPIOPin::DisableInterrupt2()+0xb8>
    bdd4:	e59f100c 	ldr	r1, [pc, #12]	; bde8 <CGPIOPin::DisableInterrupt2()+0xa8>
    bdd8:	e59f001c 	ldr	r0, [pc, #28]	; bdfc <CGPIOPin::DisableInterrupt2()+0xbc>
    bddc:	ebfffb2e 	bl	aa9c <assertion_failed>
    bde0:	e5d53025 	ldrb	r3, [r5, #37]	; 0x25
    bde4:	eaffffe3 	b	bd78 <CGPIOPin::DisableInterrupt2()+0x38>
    bde8:	0001490c 	.word	0x0001490c
    bdec:	00014984 	.word	0x00014984
    bdf0:	0001668c 	.word	0x0001668c
    bdf4:	2020004c 	.word	0x2020004c
    bdf8:	00000122 	.word	0x00000122
    bdfc:	00014af8 	.word	0x00014af8

0000be00 <CGPIOPin::ReadAll()>:
    be00:	e59f3004 	ldr	r3, [pc, #4]	; be0c <CGPIOPin::ReadAll()+0xc>
    be04:	e5930034 	ldr	r0, [r3, #52]	; 0x34
    be08:	e12fff1e 	bx	lr
    be0c:	20200000 	.word	0x20200000

0000be10 <CGPIOPin::SetPullUpMode(unsigned int)>:
    be10:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    be14:	e1a08000 	mov	r8, r0
    be18:	e59f4078 	ldr	r4, [pc, #120]	; be98 <CGPIOPin::SetPullUpMode(unsigned int)+0x88>
    be1c:	e1a09001 	mov	r9, r1
    be20:	e5940000 	ldr	r0, [r4]
    be24:	e5986008 	ldr	r6, [r8, #8]
    be28:	e3500000 	cmp	r0, #0
    be2c:	e59f5068 	ldr	r5, [pc, #104]	; be9c <CGPIOPin::SetPullUpMode(unsigned int)+0x8c>
    be30:	1a000016 	bne	be90 <CGPIOPin::SetPullUpMode(unsigned int)+0x80>
    be34:	e3590002 	cmp	r9, #2
    be38:	8a00000f 	bhi	be7c <CGPIOPin::SetPullUpMode(unsigned int)+0x6c>
    be3c:	e59f705c 	ldr	r7, [pc, #92]	; bea0 <CGPIOPin::SetPullUpMode(unsigned int)+0x90>
    be40:	e3a00005 	mov	r0, #5
    be44:	e5879094 	str	r9, [r7, #148]	; 0x94
    be48:	eb001660 	bl	117d0 <CTimer::SimpleusDelay(unsigned int)>
    be4c:	e598300c 	ldr	r3, [r8, #12]
    be50:	e3a00005 	mov	r0, #5
    be54:	e7863005 	str	r3, [r6, r5]
    be58:	eb00165c 	bl	117d0 <CTimer::SimpleusDelay(unsigned int)>
    be5c:	e3a03000 	mov	r3, #0
    be60:	e5873094 	str	r3, [r7, #148]	; 0x94
    be64:	e7863005 	str	r3, [r6, r5]
    be68:	e5943000 	ldr	r3, [r4]
    be6c:	e3530000 	cmp	r3, #0
    be70:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    be74:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    be78:	ea001a26 	b	12718 <LeaveCritical>
    be7c:	e59f2020 	ldr	r2, [pc, #32]	; bea4 <CGPIOPin::SetPullUpMode(unsigned int)+0x94>
    be80:	e59f1020 	ldr	r1, [pc, #32]	; bea8 <CGPIOPin::SetPullUpMode(unsigned int)+0x98>
    be84:	e59f0020 	ldr	r0, [pc, #32]	; beac <CGPIOPin::SetPullUpMode(unsigned int)+0x9c>
    be88:	ebfffb03 	bl	aa9c <assertion_failed>
    be8c:	eaffffea 	b	be3c <CGPIOPin::SetPullUpMode(unsigned int)+0x2c>
    be90:	eb0019f3 	bl	12664 <EnterCritical>
    be94:	eaffffe6 	b	be34 <CGPIOPin::SetPullUpMode(unsigned int)+0x24>
    be98:	0001668c 	.word	0x0001668c
    be9c:	20200098 	.word	0x20200098
    bea0:	20200000 	.word	0x20200000
    bea4:	0000013b 	.word	0x0000013b
    bea8:	0001490c 	.word	0x0001490c
    beac:	00014b1c 	.word	0x00014b1c

0000beb0 <CGPIOPin::SetAlternateFunction(unsigned int)>:
    beb0:	e5902004 	ldr	r2, [r0, #4]
    beb4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    beb8:	e3520035 	cmp	r2, #53	; 0x35
    bebc:	e1a06001 	mov	r6, r1
    bec0:	8a000022 	bhi	bf50 <CGPIOPin::SetAlternateFunction(unsigned int)+0xa0>
    bec4:	e59f30a0 	ldr	r3, [pc, #160]	; bf6c <CGPIOPin::SetAlternateFunction(unsigned int)+0xbc>
    bec8:	e3560005 	cmp	r6, #5
    becc:	e0831293 	umull	r1, r3, r3, r2
    bed0:	e1a031a3 	lsr	r3, r3, #3
    bed4:	e2835302 	add	r5, r3, #134217728	; 0x8000000
    bed8:	e0833103 	add	r3, r3, r3, lsl #2
    bedc:	e2855702 	add	r5, r5, #524288	; 0x80000
    bee0:	e0423083 	sub	r3, r2, r3, lsl #1
    bee4:	e1a05105 	lsl	r5, r5, #2
    bee8:	e0834083 	add	r4, r3, r3, lsl #1
    beec:	8a000012 	bhi	bf3c <CGPIOPin::SetAlternateFunction(unsigned int)+0x8c>
    bef0:	e59f7078 	ldr	r7, [pc, #120]	; bf70 <CGPIOPin::SetAlternateFunction(unsigned int)+0xc0>
    bef4:	e5970000 	ldr	r0, [r7]
    bef8:	e3500000 	cmp	r0, #0
    befc:	1a00000c 	bne	bf34 <CGPIOPin::SetAlternateFunction(unsigned int)+0x84>
    bf00:	e3a01007 	mov	r1, #7
    bf04:	e59f3068 	ldr	r3, [pc, #104]	; bf74 <CGPIOPin::SetAlternateFunction(unsigned int)+0xc4>
    bf08:	e5952000 	ldr	r2, [r5]
    bf0c:	e0836106 	add	r6, r3, r6, lsl #2
    bf10:	e5963010 	ldr	r3, [r6, #16]
    bf14:	e1c22411 	bic	r2, r2, r1, lsl r4
    bf18:	e1824413 	orr	r4, r2, r3, lsl r4
    bf1c:	e5854000 	str	r4, [r5]
    bf20:	e5973000 	ldr	r3, [r7]
    bf24:	e3530000 	cmp	r3, #0
    bf28:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    bf2c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    bf30:	ea0019f8 	b	12718 <LeaveCritical>
    bf34:	eb0019ca 	bl	12664 <EnterCritical>
    bf38:	eafffff0 	b	bf00 <CGPIOPin::SetAlternateFunction(unsigned int)+0x50>
    bf3c:	e3a02f53 	mov	r2, #332	; 0x14c
    bf40:	e59f1030 	ldr	r1, [pc, #48]	; bf78 <CGPIOPin::SetAlternateFunction(unsigned int)+0xc8>
    bf44:	e59f0030 	ldr	r0, [pc, #48]	; bf7c <CGPIOPin::SetAlternateFunction(unsigned int)+0xcc>
    bf48:	ebfffad3 	bl	aa9c <assertion_failed>
    bf4c:	eaffffe7 	b	bef0 <CGPIOPin::SetAlternateFunction(unsigned int)+0x40>
    bf50:	e1a04000 	mov	r4, r0
    bf54:	e3a02f52 	mov	r2, #328	; 0x148
    bf58:	e59f1018 	ldr	r1, [pc, #24]	; bf78 <CGPIOPin::SetAlternateFunction(unsigned int)+0xc8>
    bf5c:	e59f001c 	ldr	r0, [pc, #28]	; bf80 <CGPIOPin::SetAlternateFunction(unsigned int)+0xd0>
    bf60:	ebfffacd 	bl	aa9c <assertion_failed>
    bf64:	e5942004 	ldr	r2, [r4, #4]
    bf68:	eaffffd5 	b	bec4 <CGPIOPin::SetAlternateFunction(unsigned int)+0x14>
    bf6c:	cccccccd 	.word	0xcccccccd
    bf70:	0001668c 	.word	0x0001668c
    bf74:	000148e4 	.word	0x000148e4
    bf78:	0001490c 	.word	0x0001490c
    bf7c:	00014b28 	.word	0x00014b28
    bf80:	0001492c 	.word	0x0001492c

0000bf84 <CGPIOPin::SetMode(TGPIOMode, bool)>:
    bf84:	e3510009 	cmp	r1, #9
    bf88:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    bf8c:	e1a05001 	mov	r5, r1
    bf90:	e1a04000 	mov	r4, r0
    bf94:	e1a06002 	mov	r6, r2
    bf98:	ca00003f 	bgt	c09c <CGPIOPin::SetMode(TGPIOMode, bool)+0x118>
    bf9c:	e5c45010 	strb	r5, [r4, #16]
    bfa0:	e3a02000 	mov	r2, #0
    bfa4:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
    bfa8:	e5d43010 	ldrb	r3, [r4, #16]
    bfac:	e2431004 	sub	r1, r3, #4
    bfb0:	e6ef0071 	uxtb	r0, r1
    bfb4:	e3500005 	cmp	r0, #5
    bfb8:	9a000030 	bls	c080 <CGPIOPin::SetMode(TGPIOMode, bool)+0xfc>
    bfbc:	e3530001 	cmp	r3, #1
    bfc0:	13a03000 	movne	r3, #0
    bfc4:	02063001 	andeq	r3, r6, #1
    bfc8:	e3530000 	cmp	r3, #0
    bfcc:	1a000055 	bne	c128 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1a4>
    bfd0:	e5943004 	ldr	r3, [r4, #4]
    bfd4:	e3530035 	cmp	r3, #53	; 0x35
    bfd8:	8a00003a 	bhi	c0c8 <CGPIOPin::SetMode(TGPIOMode, bool)+0x144>
    bfdc:	e59f5154 	ldr	r5, [pc, #340]	; c138 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1b4>
    bfe0:	e59f8154 	ldr	r8, [pc, #340]	; c13c <CGPIOPin::SetMode(TGPIOMode, bool)+0x1b8>
    bfe4:	e0852395 	umull	r2, r5, r5, r3
    bfe8:	e5980000 	ldr	r0, [r8]
    bfec:	e1a051a5 	lsr	r5, r5, #3
    bff0:	e2857302 	add	r7, r5, #134217728	; 0x8000000
    bff4:	e0855105 	add	r5, r5, r5, lsl #2
    bff8:	e2877702 	add	r7, r7, #524288	; 0x80000
    bffc:	e0435085 	sub	r5, r3, r5, lsl #1
    c000:	e3500000 	cmp	r0, #0
    c004:	e1a07107 	lsl	r7, r7, #2
    c008:	e0855085 	add	r5, r5, r5, lsl #1
    c00c:	1a000033 	bne	c0e0 <CGPIOPin::SetMode(TGPIOMode, bool)+0x15c>
    c010:	e5d42010 	ldrb	r2, [r4, #16]
    c014:	e3a01007 	mov	r1, #7
    c018:	e2422001 	sub	r2, r2, #1
    c01c:	e16f2f12 	clz	r2, r2
    c020:	e5973000 	ldr	r3, [r7]
    c024:	e1a022a2 	lsr	r2, r2, #5
    c028:	e1c33511 	bic	r3, r3, r1, lsl r5
    c02c:	e1835512 	orr	r5, r3, r2, lsl r5
    c030:	e5875000 	str	r5, [r7]
    c034:	e5983000 	ldr	r3, [r8]
    c038:	e3530000 	cmp	r3, #0
    c03c:	1a000029 	bne	c0e8 <CGPIOPin::SetMode(TGPIOMode, bool)+0x164>
    c040:	e3560000 	cmp	r6, #0
    c044:	0a00000a 	beq	c074 <CGPIOPin::SetMode(TGPIOMode, bool)+0xf0>
    c048:	e5d43010 	ldrb	r3, [r4, #16]
    c04c:	e3530003 	cmp	r3, #3
    c050:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    c054:	ea000006 	b	c074 <CGPIOPin::SetMode(TGPIOMode, bool)+0xf0>
    c058:	0000c118 	.word	0x0000c118
    c05c:	0000c108 	.word	0x0000c108
    c060:	0000c0f8 	.word	0x0000c0f8
    c064:	0000c068 	.word	0x0000c068
    c068:	e1a00004 	mov	r0, r4
    c06c:	e3a01001 	mov	r1, #1
    c070:	ebffff66 	bl	be10 <CGPIOPin::SetPullUpMode(unsigned int)>
    c074:	e3a03000 	mov	r3, #0
    c078:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    c07c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    c080:	e1560002 	cmp	r6, r2
    c084:	1a000009 	bne	c0b0 <CGPIOPin::SetMode(TGPIOMode, bool)+0x12c>
    c088:	e1a00004 	mov	r0, r4
    c08c:	ebffff87 	bl	beb0 <CGPIOPin::SetAlternateFunction(unsigned int)>
    c090:	e3a03000 	mov	r3, #0
    c094:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    c098:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    c09c:	e3a0204f 	mov	r2, #79	; 0x4f
    c0a0:	e59f1098 	ldr	r1, [pc, #152]	; c140 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1bc>
    c0a4:	e59f0098 	ldr	r0, [pc, #152]	; c144 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1c0>
    c0a8:	ebfffa7b 	bl	aa9c <assertion_failed>
    c0ac:	eaffffba 	b	bf9c <CGPIOPin::SetMode(TGPIOMode, bool)+0x18>
    c0b0:	e1a01002 	mov	r1, r2
    c0b4:	e1a00004 	mov	r0, r4
    c0b8:	ebffff54 	bl	be10 <CGPIOPin::SetPullUpMode(unsigned int)>
    c0bc:	e5d43010 	ldrb	r3, [r4, #16]
    c0c0:	e2431004 	sub	r1, r3, #4
    c0c4:	eaffffef 	b	c088 <CGPIOPin::SetMode(TGPIOMode, bool)+0x104>
    c0c8:	e3a02068 	mov	r2, #104	; 0x68
    c0cc:	e59f106c 	ldr	r1, [pc, #108]	; c140 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1bc>
    c0d0:	e59f0070 	ldr	r0, [pc, #112]	; c148 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1c4>
    c0d4:	ebfffa70 	bl	aa9c <assertion_failed>
    c0d8:	e5943004 	ldr	r3, [r4, #4]
    c0dc:	eaffffbe 	b	bfdc <CGPIOPin::SetMode(TGPIOMode, bool)+0x58>
    c0e0:	eb00195f 	bl	12664 <EnterCritical>
    c0e4:	eaffffc9 	b	c010 <CGPIOPin::SetMode(TGPIOMode, bool)+0x8c>
    c0e8:	eb00198a 	bl	12718 <LeaveCritical>
    c0ec:	e3560000 	cmp	r6, #0
    c0f0:	0affffdf 	beq	c074 <CGPIOPin::SetMode(TGPIOMode, bool)+0xf0>
    c0f4:	eaffffd3 	b	c048 <CGPIOPin::SetMode(TGPIOMode, bool)+0xc4>
    c0f8:	e1a00004 	mov	r0, r4
    c0fc:	e3a01002 	mov	r1, #2
    c100:	ebffff42 	bl	be10 <CGPIOPin::SetPullUpMode(unsigned int)>
    c104:	eaffffda 	b	c074 <CGPIOPin::SetMode(TGPIOMode, bool)+0xf0>
    c108:	e1a00004 	mov	r0, r4
    c10c:	e3a01000 	mov	r1, #0
    c110:	ebfffd6b 	bl	b6c4 <CGPIOPin::Write(unsigned int)>
    c114:	eaffffd6 	b	c074 <CGPIOPin::SetMode(TGPIOMode, bool)+0xf0>
    c118:	e1a00004 	mov	r0, r4
    c11c:	e3a01000 	mov	r1, #0
    c120:	ebffff3a 	bl	be10 <CGPIOPin::SetPullUpMode(unsigned int)>
    c124:	eaffffd2 	b	c074 <CGPIOPin::SetMode(TGPIOMode, bool)+0xf0>
    c128:	e1a01002 	mov	r1, r2
    c12c:	e1a00004 	mov	r0, r4
    c130:	ebffff36 	bl	be10 <CGPIOPin::SetPullUpMode(unsigned int)>
    c134:	eaffffa5 	b	bfd0 <CGPIOPin::SetMode(TGPIOMode, bool)+0x4c>
    c138:	cccccccd 	.word	0xcccccccd
    c13c:	0001668c 	.word	0x0001668c
    c140:	0001490c 	.word	0x0001490c
    c144:	00014b38 	.word	0x00014b38
    c148:	0001492c 	.word	0x0001492c

0000c14c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>:
    c14c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c150:	e3a0c006 	mov	ip, #6
    c154:	e3a0e000 	mov	lr, #0
    c158:	e3a07036 	mov	r7, #54	; 0x36
    c15c:	e3a0600a 	mov	r6, #10
    c160:	e1a04000 	mov	r4, r0
    c164:	e1a05002 	mov	r5, r2
    c168:	e5803018 	str	r3, [r0, #24]
    c16c:	e59f302c 	ldr	r3, [pc, #44]	; c1a0 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x54>
    c170:	e580e01c 	str	lr, [r0, #28]
    c174:	e8800088 	stm	r0, {r3, r7}
    c178:	e5c0c024 	strb	ip, [r0, #36]	; 0x24
    c17c:	e5c0c025 	strb	ip, [r0, #37]	; 0x25
    c180:	e5c06010 	strb	r6, [r0, #16]
    c184:	ebfffd29 	bl	b630 <CGPIOPin::AssignPin(unsigned int)>
    c188:	e1a00004 	mov	r0, r4
    c18c:	e1a01005 	mov	r1, r5
    c190:	e3a02001 	mov	r2, #1
    c194:	ebffff7a 	bl	bf84 <CGPIOPin::SetMode(TGPIOMode, bool)>
    c198:	e1a00004 	mov	r0, r4
    c19c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    c1a0:	000148ec 	.word	0x000148ec

0000c1a4 <CGPIOPin::InterruptHandler()>:
    c1a4:	e5d03010 	ldrb	r3, [r0, #16]
    c1a8:	e92d4010 	push	{r4, lr}
    c1ac:	e2432002 	sub	r2, r3, #2
    c1b0:	e3530000 	cmp	r3, #0
    c1b4:	13520001 	cmpne	r2, #1
    c1b8:	e1a04000 	mov	r4, r0
    c1bc:	9a000003 	bls	c1d0 <CGPIOPin::InterruptHandler()+0x2c>
    c1c0:	e59f2074 	ldr	r2, [pc, #116]	; c23c <CGPIOPin::InterruptHandler()+0x98>
    c1c4:	e59f1074 	ldr	r1, [pc, #116]	; c240 <CGPIOPin::InterruptHandler()+0x9c>
    c1c8:	e59f0074 	ldr	r0, [pc, #116]	; c244 <CGPIOPin::InterruptHandler()+0xa0>
    c1cc:	ebfffa32 	bl	aa9c <assertion_failed>
    c1d0:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    c1d4:	e3530005 	cmp	r3, #5
    c1d8:	da000002 	ble	c1e8 <CGPIOPin::InterruptHandler()+0x44>
    c1dc:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    c1e0:	e3530005 	cmp	r3, #5
    c1e4:	ca000005 	bgt	c200 <CGPIOPin::InterruptHandler()+0x5c>
    c1e8:	e594301c 	ldr	r3, [r4, #28]
    c1ec:	e3530000 	cmp	r3, #0
    c1f0:	0a000009 	beq	c21c <CGPIOPin::InterruptHandler()+0x78>
    c1f4:	e5940020 	ldr	r0, [r4, #32]
    c1f8:	e8bd4010 	pop	{r4, lr}
    c1fc:	e12fff13 	bx	r3
    c200:	e59f2040 	ldr	r2, [pc, #64]	; c248 <CGPIOPin::InterruptHandler()+0xa4>
    c204:	e59f1034 	ldr	r1, [pc, #52]	; c240 <CGPIOPin::InterruptHandler()+0x9c>
    c208:	e59f003c 	ldr	r0, [pc, #60]	; c24c <CGPIOPin::InterruptHandler()+0xa8>
    c20c:	ebfffa22 	bl	aa9c <assertion_failed>
    c210:	e594301c 	ldr	r3, [r4, #28]
    c214:	e3530000 	cmp	r3, #0
    c218:	1afffff5 	bne	c1f4 <CGPIOPin::InterruptHandler()+0x50>
    c21c:	e59f002c 	ldr	r0, [pc, #44]	; c250 <CGPIOPin::InterruptHandler()+0xac>
    c220:	e59f202c 	ldr	r2, [pc, #44]	; c254 <CGPIOPin::InterruptHandler()+0xb0>
    c224:	e59f1014 	ldr	r1, [pc, #20]	; c240 <CGPIOPin::InterruptHandler()+0x9c>
    c228:	ebfffa1b 	bl	aa9c <assertion_failed>
    c22c:	e594301c 	ldr	r3, [r4, #28]
    c230:	e5940020 	ldr	r0, [r4, #32]
    c234:	e8bd4010 	pop	{r4, lr}
    c238:	e12fff13 	bx	r3
    c23c:	0000015b 	.word	0x0000015b
    c240:	0001490c 	.word	0x0001490c
    c244:	00014984 	.word	0x00014984
    c248:	0000015d 	.word	0x0000015d
    c24c:	00014b50 	.word	0x00014b50
    c250:	00014a68 	.word	0x00014a68
    c254:	0000015f 	.word	0x0000015f

0000c258 <CGPIOPin::DisableAllInterrupts(unsigned int)>:
    c258:	e3500035 	cmp	r0, #53	; 0x35
    c25c:	e92d4070 	push	{r4, r5, r6, lr}
    c260:	e1a05000 	mov	r5, r0
    c264:	8a00001e 	bhi	c2e4 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x8c>
    c268:	e3a02001 	mov	r2, #1
    c26c:	e59f6084 	ldr	r6, [pc, #132]	; c2f8 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xa0>
    c270:	e59f4084 	ldr	r4, [pc, #132]	; c2fc <CGPIOPin::DisableAllInterrupts(unsigned int)+0xa4>
    c274:	e5960000 	ldr	r0, [r6]
    c278:	e08442a5 	add	r4, r4, r5, lsr #5
    c27c:	e3500000 	cmp	r0, #0
    c280:	e205501f 	and	r5, r5, #31
    c284:	e1a04104 	lsl	r4, r4, #2
    c288:	e1a05512 	lsl	r5, r2, r5
    c28c:	1a00000f 	bne	c2d0 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x78>
    c290:	e59f3068 	ldr	r3, [pc, #104]	; c300 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xa8>
    c294:	e1540003 	cmp	r4, r3
    c298:	8a00000b 	bhi	c2cc <CGPIOPin::DisableAllInterrupts(unsigned int)+0x74>
    c29c:	e1e02005 	mvn	r2, r5
    c2a0:	e59f1058 	ldr	r1, [pc, #88]	; c300 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xa8>
    c2a4:	e5943000 	ldr	r3, [r4]
    c2a8:	e0033002 	and	r3, r3, r2
    c2ac:	e484300c 	str	r3, [r4], #12
    c2b0:	e1540001 	cmp	r4, r1
    c2b4:	9afffffa 	bls	c2a4 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x4c>
    c2b8:	e5963000 	ldr	r3, [r6]
    c2bc:	e3530000 	cmp	r3, #0
    c2c0:	08bd8070 	popeq	{r4, r5, r6, pc}
    c2c4:	e8bd4070 	pop	{r4, r5, r6, lr}
    c2c8:	ea001912 	b	12718 <LeaveCritical>
    c2cc:	e8bd8070 	pop	{r4, r5, r6, pc}
    c2d0:	eb0018e3 	bl	12664 <EnterCritical>
    c2d4:	e59f3024 	ldr	r3, [pc, #36]	; c300 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xa8>
    c2d8:	e1540003 	cmp	r4, r3
    c2dc:	9affffee 	bls	c29c <CGPIOPin::DisableAllInterrupts(unsigned int)+0x44>
    c2e0:	eafffff4 	b	c2b8 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x60>
    c2e4:	e59f2018 	ldr	r2, [pc, #24]	; c304 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xac>
    c2e8:	e59f1018 	ldr	r1, [pc, #24]	; c308 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xb0>
    c2ec:	e59f0018 	ldr	r0, [pc, #24]	; c30c <CGPIOPin::DisableAllInterrupts(unsigned int)+0xb4>
    c2f0:	ebfff9e9 	bl	aa9c <assertion_failed>
    c2f4:	eaffffdb 	b	c268 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x10>
    c2f8:	0001668c 	.word	0x0001668c
    c2fc:	08080013 	.word	0x08080013
    c300:	2020008b 	.word	0x2020008b
    c304:	00000165 	.word	0x00000165
    c308:	0001490c 	.word	0x0001490c
    c30c:	00014b9c 	.word	0x00014b9c

0000c310 <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE>:
    c310:	e3a02001 	mov	r2, #1
    c314:	e59f3004 	ldr	r3, [pc, #4]	; c320 <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE+0x10>
    c318:	e5832000 	str	r2, [r3]
    c31c:	e12fff1e 	bx	lr
    c320:	0001668c 	.word	0x0001668c

0000c324 <CInterruptSystem::CInterruptSystem()>:
    c324:	e1a0c000 	mov	ip, r0
    c328:	e2802f47 	add	r2, r0, #284	; 0x11c
    c32c:	e1a00002 	mov	r0, r2
    c330:	e3a01000 	mov	r1, #0
    c334:	e24c3004 	sub	r3, ip, #4
    c338:	e5a31004 	str	r1, [r3, #4]!
    c33c:	e1530000 	cmp	r3, r0
    c340:	e5a21004 	str	r1, [r2, #4]!
    c344:	1afffffb 	bne	c338 <CInterruptSystem::CInterruptSystem()+0x14>
    c348:	e59f3008 	ldr	r3, [pc, #8]	; c358 <CInterruptSystem::CInterruptSystem()+0x34>
    c34c:	e1a0000c 	mov	r0, ip
    c350:	e583c000 	str	ip, [r3]
    c354:	e12fff1e 	bx	lr
    c358:	00016690 	.word	0x00016690

0000c35c <CInterruptSystem::~CInterruptSystem()>:
    c35c:	e3a02000 	mov	r2, #0
    c360:	e59f3004 	ldr	r3, [pc, #4]	; c36c <CInterruptSystem::~CInterruptSystem()+0x10>
    c364:	e5832000 	str	r2, [r3]
    c368:	e12fff1e 	bx	lr
    c36c:	00016690 	.word	0x00016690

0000c370 <CInterruptSystem::Initialize()>:
    c370:	e92d4010 	push	{r4, lr}
    c374:	e3a04000 	mov	r4, #0
    c378:	e59f2050 	ldr	r2, [pc, #80]	; c3d0 <CInterruptSystem::Initialize()+0x60>
    c37c:	e59f3050 	ldr	r3, [pc, #80]	; c3d4 <CInterruptSystem::Initialize()+0x64>
    c380:	e1a02142 	asr	r2, r2, #2
    c384:	e1a03143 	asr	r3, r3, #2
    c388:	e2422002 	sub	r2, r2, #2
    c38c:	e2433002 	sub	r3, r3, #2
    c390:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
    c394:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
    c398:	e5842018 	str	r2, [r4, #24]
    c39c:	e584301c 	str	r3, [r4, #28]
    c3a0:	eb001901 	bl	127ac <SyncDataAndInstructionCache>
    c3a4:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
    c3a8:	e3e02000 	mvn	r2, #0
    c3ac:	e59f3024 	ldr	r3, [pc, #36]	; c3d8 <CInterruptSystem::Initialize()+0x68>
    c3b0:	e583420c 	str	r4, [r3, #524]	; 0x20c
    c3b4:	e583221c 	str	r2, [r3, #540]	; 0x21c
    c3b8:	e5832220 	str	r2, [r3, #544]	; 0x220
    c3bc:	e5832224 	str	r2, [r3, #548]	; 0x224
    c3c0:	ee074fba 	mcr	15, 0, r4, cr7, cr10, {5}
    c3c4:	f1080080 	cpsie	i
    c3c8:	e3a00001 	mov	r0, #1
    c3cc:	e8bd8010 	pop	{r4, pc}
    c3d0:	00012240 	.word	0x00012240
    c3d4:	0001224c 	.word	0x0001224c
    c3d8:	2000b000 	.word	0x2000b000

0000c3dc <CInterruptSystem::DisconnectFIQ()>:
    c3dc:	e92d4010 	push	{r4, lr}
    c3e0:	e59f4068 	ldr	r4, [pc, #104]	; c450 <CInterruptSystem::DisconnectFIQ()+0x74>
    c3e4:	e5d42001 	ldrb	r2, [r4, #1]
    c3e8:	e5d43000 	ldrb	r3, [r4]
    c3ec:	e5d41002 	ldrb	r1, [r4, #2]
    c3f0:	e1833402 	orr	r3, r3, r2, lsl #8
    c3f4:	e5d42003 	ldrb	r2, [r4, #3]
    c3f8:	e1833801 	orr	r3, r3, r1, lsl #16
    c3fc:	e1933c02 	orrs	r3, r3, r2, lsl #24
    c400:	0a00000d 	beq	c43c <CInterruptSystem::DisconnectFIQ()+0x60>
    c404:	e3a03000 	mov	r3, #0
    c408:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    c40c:	e59f2040 	ldr	r2, [pc, #64]	; c454 <CInterruptSystem::DisconnectFIQ()+0x78>
    c410:	e582320c 	str	r3, [r2, #524]	; 0x20c
    c414:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    c418:	e5c43000 	strb	r3, [r4]
    c41c:	e5c43001 	strb	r3, [r4, #1]
    c420:	e5c43002 	strb	r3, [r4, #2]
    c424:	e5c43003 	strb	r3, [r4, #3]
    c428:	e5c43004 	strb	r3, [r4, #4]
    c42c:	e5c43005 	strb	r3, [r4, #5]
    c430:	e5c43006 	strb	r3, [r4, #6]
    c434:	e5c43007 	strb	r3, [r4, #7]
    c438:	e8bd8010 	pop	{r4, pc}
    c43c:	e3a02086 	mov	r2, #134	; 0x86
    c440:	e59f1010 	ldr	r1, [pc, #16]	; c458 <CInterruptSystem::DisconnectFIQ()+0x7c>
    c444:	e59f0010 	ldr	r0, [pc, #16]	; c45c <CInterruptSystem::DisconnectFIQ()+0x80>
    c448:	ebfff993 	bl	aa9c <assertion_failed>
    c44c:	eaffffec 	b	c404 <CInterruptSystem::DisconnectFIQ()+0x28>
    c450:	00016598 	.word	0x00016598
    c454:	2000b000 	.word	0x2000b000
    c458:	00014bb0 	.word	0x00014bb0
    c45c:	00014bc0 	.word	0x00014bc0

0000c460 <CInterruptSystem::EnableIRQ(unsigned int)>:
    c460:	e92d4010 	push	{r4, lr}
    c464:	e3a03000 	mov	r3, #0
    c468:	e1a04000 	mov	r4, r0
    c46c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    c470:	e3500047 	cmp	r0, #71	; 0x47
    c474:	8a00000d 	bhi	c4b0 <CInterruptSystem::EnableIRQ(unsigned int)+0x50>
    c478:	e350001f 	cmp	r0, #31
    c47c:	8a000007 	bhi	c4a0 <CInterruptSystem::EnableIRQ(unsigned int)+0x40>
    c480:	e59f2040 	ldr	r2, [pc, #64]	; c4c8 <CInterruptSystem::EnableIRQ(unsigned int)+0x68>
    c484:	e3a03001 	mov	r3, #1
    c488:	e204401f 	and	r4, r4, #31
    c48c:	e1a04413 	lsl	r4, r3, r4
    c490:	e5824000 	str	r4, [r2]
    c494:	e3a03000 	mov	r3, #0
    c498:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    c49c:	e8bd8010 	pop	{r4, pc}
    c4a0:	e350003f 	cmp	r0, #63	; 0x3f
    c4a4:	959f2020 	ldrls	r2, [pc, #32]	; c4cc <CInterruptSystem::EnableIRQ(unsigned int)+0x6c>
    c4a8:	859f2020 	ldrhi	r2, [pc, #32]	; c4d0 <CInterruptSystem::EnableIRQ(unsigned int)+0x70>
    c4ac:	eafffff4 	b	c484 <CInterruptSystem::EnableIRQ(unsigned int)+0x24>
    c4b0:	e3a02092 	mov	r2, #146	; 0x92
    c4b4:	e59f1018 	ldr	r1, [pc, #24]	; c4d4 <CInterruptSystem::EnableIRQ(unsigned int)+0x74>
    c4b8:	e59f0018 	ldr	r0, [pc, #24]	; c4d8 <CInterruptSystem::EnableIRQ(unsigned int)+0x78>
    c4bc:	ebfff976 	bl	aa9c <assertion_failed>
    c4c0:	e59f2008 	ldr	r2, [pc, #8]	; c4d0 <CInterruptSystem::EnableIRQ(unsigned int)+0x70>
    c4c4:	eaffffee 	b	c484 <CInterruptSystem::EnableIRQ(unsigned int)+0x24>
    c4c8:	2000b210 	.word	0x2000b210
    c4cc:	2000b214 	.word	0x2000b214
    c4d0:	2000b218 	.word	0x2000b218
    c4d4:	00014bb0 	.word	0x00014bb0
    c4d8:	00014bd8 	.word	0x00014bd8

0000c4dc <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>:
    c4dc:	e3510047 	cmp	r1, #71	; 0x47
    c4e0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c4e4:	e1a04001 	mov	r4, r1
    c4e8:	e1a05000 	mov	r5, r0
    c4ec:	e1a08002 	mov	r8, r2
    c4f0:	e1a07003 	mov	r7, r3
    c4f4:	8a00000c 	bhi	c52c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x50>
    c4f8:	e7953104 	ldr	r3, [r5, r4, lsl #2]
    c4fc:	e0856104 	add	r6, r5, r4, lsl #2
    c500:	e3530000 	cmp	r3, #0
    c504:	0a000003 	beq	c518 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x3c>
    c508:	e3a02062 	mov	r2, #98	; 0x62
    c50c:	e59f102c 	ldr	r1, [pc, #44]	; c540 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x64>
    c510:	e59f002c 	ldr	r0, [pc, #44]	; c544 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x68>
    c514:	ebfff960 	bl	aa9c <assertion_failed>
    c518:	e7858104 	str	r8, [r5, r4, lsl #2]
    c51c:	e1a00004 	mov	r0, r4
    c520:	e5867120 	str	r7, [r6, #288]	; 0x120
    c524:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    c528:	eaffffcc 	b	c460 <CInterruptSystem::EnableIRQ(unsigned int)>
    c52c:	e3a02061 	mov	r2, #97	; 0x61
    c530:	e59f1008 	ldr	r1, [pc, #8]	; c540 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x64>
    c534:	e59f000c 	ldr	r0, [pc, #12]	; c548 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x6c>
    c538:	ebfff957 	bl	aa9c <assertion_failed>
    c53c:	eaffffed 	b	c4f8 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x1c>
    c540:	00014bb0 	.word	0x00014bb0
    c544:	00014bec 	.word	0x00014bec
    c548:	00014bd8 	.word	0x00014bd8

0000c54c <CInterruptSystem::DisableIRQ(unsigned int)>:
    c54c:	e92d4010 	push	{r4, lr}
    c550:	e3a03000 	mov	r3, #0
    c554:	e1a04000 	mov	r4, r0
    c558:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    c55c:	e3500047 	cmp	r0, #71	; 0x47
    c560:	8a00000d 	bhi	c59c <CInterruptSystem::DisableIRQ(unsigned int)+0x50>
    c564:	e350001f 	cmp	r0, #31
    c568:	8a000007 	bhi	c58c <CInterruptSystem::DisableIRQ(unsigned int)+0x40>
    c56c:	e59f2040 	ldr	r2, [pc, #64]	; c5b4 <CInterruptSystem::DisableIRQ(unsigned int)+0x68>
    c570:	e3a03001 	mov	r3, #1
    c574:	e204401f 	and	r4, r4, #31
    c578:	e1a04413 	lsl	r4, r3, r4
    c57c:	e5824000 	str	r4, [r2]
    c580:	e3a03000 	mov	r3, #0
    c584:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    c588:	e8bd8010 	pop	{r4, pc}
    c58c:	e350003f 	cmp	r0, #63	; 0x3f
    c590:	959f2020 	ldrls	r2, [pc, #32]	; c5b8 <CInterruptSystem::DisableIRQ(unsigned int)+0x6c>
    c594:	859f2020 	ldrhi	r2, [pc, #32]	; c5bc <CInterruptSystem::DisableIRQ(unsigned int)+0x70>
    c598:	eafffff4 	b	c570 <CInterruptSystem::DisableIRQ(unsigned int)+0x24>
    c59c:	e3a0209d 	mov	r2, #157	; 0x9d
    c5a0:	e59f1018 	ldr	r1, [pc, #24]	; c5c0 <CInterruptSystem::DisableIRQ(unsigned int)+0x74>
    c5a4:	e59f0018 	ldr	r0, [pc, #24]	; c5c4 <CInterruptSystem::DisableIRQ(unsigned int)+0x78>
    c5a8:	ebfff93b 	bl	aa9c <assertion_failed>
    c5ac:	e59f2008 	ldr	r2, [pc, #8]	; c5bc <CInterruptSystem::DisableIRQ(unsigned int)+0x70>
    c5b0:	eaffffee 	b	c570 <CInterruptSystem::DisableIRQ(unsigned int)+0x24>
    c5b4:	2000b21c 	.word	0x2000b21c
    c5b8:	2000b220 	.word	0x2000b220
    c5bc:	2000b224 	.word	0x2000b224
    c5c0:	00014bb0 	.word	0x00014bb0
    c5c4:	00014bd8 	.word	0x00014bd8

0000c5c8 <CInterruptSystem::DisconnectIRQ(unsigned int)>:
    c5c8:	e3510047 	cmp	r1, #71	; 0x47
    c5cc:	e92d4070 	push	{r4, r5, r6, lr}
    c5d0:	e1a04001 	mov	r4, r1
    c5d4:	e1a05000 	mov	r5, r0
    c5d8:	8a000009 	bhi	c604 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x3c>
    c5dc:	e7953104 	ldr	r3, [r5, r4, lsl #2]
    c5e0:	e0856104 	add	r6, r5, r4, lsl #2
    c5e4:	e3530000 	cmp	r3, #0
    c5e8:	0a00000d 	beq	c624 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x5c>
    c5ec:	e1a00004 	mov	r0, r4
    c5f0:	ebffffd5 	bl	c54c <CInterruptSystem::DisableIRQ(unsigned int)>
    c5f4:	e3a03000 	mov	r3, #0
    c5f8:	e7853104 	str	r3, [r5, r4, lsl #2]
    c5fc:	e5863120 	str	r3, [r6, #288]	; 0x120
    c600:	e8bd8070 	pop	{r4, r5, r6, pc}
    c604:	e3a0206c 	mov	r2, #108	; 0x6c
    c608:	e59f1028 	ldr	r1, [pc, #40]	; c638 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x70>
    c60c:	e59f0028 	ldr	r0, [pc, #40]	; c63c <CInterruptSystem::DisconnectIRQ(unsigned int)+0x74>
    c610:	ebfff921 	bl	aa9c <assertion_failed>
    c614:	e7953104 	ldr	r3, [r5, r4, lsl #2]
    c618:	e0856104 	add	r6, r5, r4, lsl #2
    c61c:	e3530000 	cmp	r3, #0
    c620:	1afffff1 	bne	c5ec <CInterruptSystem::DisconnectIRQ(unsigned int)+0x24>
    c624:	e3a0206d 	mov	r2, #109	; 0x6d
    c628:	e59f1008 	ldr	r1, [pc, #8]	; c638 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x70>
    c62c:	e59f000c 	ldr	r0, [pc, #12]	; c640 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x78>
    c630:	ebfff919 	bl	aa9c <assertion_failed>
    c634:	eaffffec 	b	c5ec <CInterruptSystem::DisconnectIRQ(unsigned int)+0x24>
    c638:	00014bb0 	.word	0x00014bb0
    c63c:	00014bd8 	.word	0x00014bd8
    c640:	00014c08 	.word	0x00014c08

0000c644 <CInterruptSystem::EnableFIQ(unsigned int)>:
    c644:	e92d4010 	push	{r4, lr}
    c648:	e3a03000 	mov	r3, #0
    c64c:	e1a04000 	mov	r4, r0
    c650:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    c654:	e3500047 	cmp	r0, #71	; 0x47
    c658:	9a000003 	bls	c66c <CInterruptSystem::EnableFIQ(unsigned int)+0x28>
    c65c:	e3a020a8 	mov	r2, #168	; 0xa8
    c660:	e59f101c 	ldr	r1, [pc, #28]	; c684 <CInterruptSystem::EnableFIQ(unsigned int)+0x40>
    c664:	e59f001c 	ldr	r0, [pc, #28]	; c688 <CInterruptSystem::EnableFIQ(unsigned int)+0x44>
    c668:	ebfff90b 	bl	aa9c <assertion_failed>
    c66c:	e59f3018 	ldr	r3, [pc, #24]	; c68c <CInterruptSystem::EnableFIQ(unsigned int)+0x48>
    c670:	e3844080 	orr	r4, r4, #128	; 0x80
    c674:	e583420c 	str	r4, [r3, #524]	; 0x20c
    c678:	e3a03000 	mov	r3, #0
    c67c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    c680:	e8bd8010 	pop	{r4, pc}
    c684:	00014bb0 	.word	0x00014bb0
    c688:	00014c24 	.word	0x00014c24
    c68c:	2000b000 	.word	0x2000b000

0000c690 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>:
    c690:	e3510047 	cmp	r1, #71	; 0x47
    c694:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c698:	e1a07001 	mov	r7, r1
    c69c:	e1a06002 	mov	r6, r2
    c6a0:	e1a05003 	mov	r5, r3
    c6a4:	8a00001f 	bhi	c728 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x98>
    c6a8:	e3560000 	cmp	r6, #0
    c6ac:	0a000022 	beq	c73c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xac>
    c6b0:	e59f4098 	ldr	r4, [pc, #152]	; c750 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc0>
    c6b4:	e5d42001 	ldrb	r2, [r4, #1]
    c6b8:	e5d43000 	ldrb	r3, [r4]
    c6bc:	e5d41002 	ldrb	r1, [r4, #2]
    c6c0:	e1833402 	orr	r3, r3, r2, lsl #8
    c6c4:	e5d42003 	ldrb	r2, [r4, #3]
    c6c8:	e1833801 	orr	r3, r3, r1, lsl #16
    c6cc:	e1933c02 	orrs	r3, r3, r2, lsl #24
    c6d0:	0a000003 	beq	c6e4 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x54>
    c6d4:	e3a0207c 	mov	r2, #124	; 0x7c
    c6d8:	e59f1074 	ldr	r1, [pc, #116]	; c754 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc4>
    c6dc:	e59f0074 	ldr	r0, [pc, #116]	; c758 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc8>
    c6e0:	ebfff8ed 	bl	aa9c <assertion_failed>
    c6e4:	e1a0e426 	lsr	lr, r6, #8
    c6e8:	e1a0c826 	lsr	ip, r6, #16
    c6ec:	e1a01c26 	lsr	r1, r6, #24
    c6f0:	e1a02425 	lsr	r2, r5, #8
    c6f4:	e1a03825 	lsr	r3, r5, #16
    c6f8:	e5c45004 	strb	r5, [r4, #4]
    c6fc:	e1a05c25 	lsr	r5, r5, #24
    c700:	e1a00007 	mov	r0, r7
    c704:	e5c46000 	strb	r6, [r4]
    c708:	e5c4e001 	strb	lr, [r4, #1]
    c70c:	e5c4c002 	strb	ip, [r4, #2]
    c710:	e5c41003 	strb	r1, [r4, #3]
    c714:	e5c42005 	strb	r2, [r4, #5]
    c718:	e5c43006 	strb	r3, [r4, #6]
    c71c:	e5c45007 	strb	r5, [r4, #7]
    c720:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    c724:	eaffffc6 	b	c644 <CInterruptSystem::EnableFIQ(unsigned int)>
    c728:	e3a0207a 	mov	r2, #122	; 0x7a
    c72c:	e59f1020 	ldr	r1, [pc, #32]	; c754 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc4>
    c730:	e59f0024 	ldr	r0, [pc, #36]	; c75c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xcc>
    c734:	ebfff8d8 	bl	aa9c <assertion_failed>
    c738:	eaffffda 	b	c6a8 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x18>
    c73c:	e3a0207b 	mov	r2, #123	; 0x7b
    c740:	e59f100c 	ldr	r1, [pc, #12]	; c754 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc4>
    c744:	e59f0014 	ldr	r0, [pc, #20]	; c760 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xd0>
    c748:	ebfff8d3 	bl	aa9c <assertion_failed>
    c74c:	eaffffd7 	b	c6b0 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x20>
    c750:	00016598 	.word	0x00016598
    c754:	00014bb0 	.word	0x00014bb0
    c758:	00014c38 	.word	0x00014c38
    c75c:	00014c24 	.word	0x00014c24
    c760:	00014bc8 	.word	0x00014bc8

0000c764 <CInterruptSystem::DisableFIQ()>:
    c764:	e3a03000 	mov	r3, #0
    c768:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    c76c:	e59f2008 	ldr	r2, [pc, #8]	; c77c <CInterruptSystem::DisableFIQ()+0x18>
    c770:	e582320c 	str	r3, [r2, #524]	; 0x20c
    c774:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    c778:	e12fff1e 	bx	lr
    c77c:	2000b000 	.word	0x2000b000

0000c780 <CInterruptSystem::Get()>:
    c780:	e92d4010 	push	{r4, lr}
    c784:	e59f4020 	ldr	r4, [pc, #32]	; c7ac <CInterruptSystem::Get()+0x2c>
    c788:	e5940000 	ldr	r0, [r4]
    c78c:	e3500000 	cmp	r0, #0
    c790:	18bd8010 	popne	{r4, pc}
    c794:	e3a020ba 	mov	r2, #186	; 0xba
    c798:	e59f1010 	ldr	r1, [pc, #16]	; c7b0 <CInterruptSystem::Get()+0x30>
    c79c:	e59f0010 	ldr	r0, [pc, #16]	; c7b4 <CInterruptSystem::Get()+0x34>
    c7a0:	ebfff8bd 	bl	aa9c <assertion_failed>
    c7a4:	e5940000 	ldr	r0, [r4]
    c7a8:	e8bd8010 	pop	{r4, pc}
    c7ac:	00016690 	.word	0x00016690
    c7b0:	00014bb0 	.word	0x00014bb0
    c7b4:	00014c50 	.word	0x00014c50

0000c7b8 <CInterruptSystem::CallIRQHandler(unsigned int)>:
    c7b8:	e3510047 	cmp	r1, #71	; 0x47
    c7bc:	e92d4070 	push	{r4, r5, r6, lr}
    c7c0:	e1a06001 	mov	r6, r1
    c7c4:	e1a05000 	mov	r5, r0
    c7c8:	8a000007 	bhi	c7ec <CInterruptSystem::CallIRQHandler(unsigned int)+0x34>
    c7cc:	e7954106 	ldr	r4, [r5, r6, lsl #2]
    c7d0:	e0855106 	add	r5, r5, r6, lsl #2
    c7d4:	e3540000 	cmp	r4, #0
    c7d8:	0a00000b 	beq	c80c <CInterruptSystem::CallIRQHandler(unsigned int)+0x54>
    c7dc:	e5950120 	ldr	r0, [r5, #288]	; 0x120
    c7e0:	e12fff34 	blx	r4
    c7e4:	e3a00001 	mov	r0, #1
    c7e8:	e8bd8070 	pop	{r4, r5, r6, pc}
    c7ec:	e3a020c0 	mov	r2, #192	; 0xc0
    c7f0:	e59f1024 	ldr	r1, [pc, #36]	; c81c <CInterruptSystem::CallIRQHandler(unsigned int)+0x64>
    c7f4:	e59f0024 	ldr	r0, [pc, #36]	; c820 <CInterruptSystem::CallIRQHandler(unsigned int)+0x68>
    c7f8:	ebfff8a7 	bl	aa9c <assertion_failed>
    c7fc:	e7954106 	ldr	r4, [r5, r6, lsl #2]
    c800:	e0855106 	add	r5, r5, r6, lsl #2
    c804:	e3540000 	cmp	r4, #0
    c808:	1afffff3 	bne	c7dc <CInterruptSystem::CallIRQHandler(unsigned int)+0x24>
    c80c:	e1a00006 	mov	r0, r6
    c810:	ebffff4d 	bl	c54c <CInterruptSystem::DisableIRQ(unsigned int)>
    c814:	e1a00004 	mov	r0, r4
    c818:	e8bd8070 	pop	{r4, r5, r6, pc}
    c81c:	00014bb0 	.word	0x00014bb0
    c820:	00014bd8 	.word	0x00014bd8

0000c824 <CInterruptSystem::InterruptHandler()>:
    c824:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c828:	e59f70a8 	ldr	r7, [pc, #168]	; c8d8 <CInterruptSystem::InterruptHandler()+0xb4>
    c82c:	e24dd010 	sub	sp, sp, #16
    c830:	e5973000 	ldr	r3, [r7]
    c834:	e3530000 	cmp	r3, #0
    c838:	0a000021 	beq	c8c4 <CInterruptSystem::InterruptHandler()+0xa0>
    c83c:	e3a06000 	mov	r6, #0
    c840:	ee076f9a 	mcr	15, 0, r6, cr7, cr10, {4}
    c844:	e59f3090 	ldr	r3, [pc, #144]	; c8dc <CInterruptSystem::InterruptHandler()+0xb8>
    c848:	e5932204 	ldr	r2, [r3, #516]	; 0x204
    c84c:	e58d2004 	str	r2, [sp, #4]
    c850:	e5932208 	ldr	r2, [r3, #520]	; 0x208
    c854:	e58d2008 	str	r2, [sp, #8]
    c858:	e5933200 	ldr	r3, [r3, #512]	; 0x200
    c85c:	e6ef3073 	uxtb	r3, r3
    c860:	e58d300c 	str	r3, [sp, #12]
    c864:	ee076fba 	mcr	15, 0, r6, cr7, cr10, {5}
    c868:	e28d8004 	add	r8, sp, #4
    c86c:	e4984004 	ldr	r4, [r8], #4
    c870:	e3540000 	cmp	r4, #0
    c874:	0a00000d 	beq	c8b0 <CInterruptSystem::InterruptHandler()+0x8c>
    c878:	e1a05006 	mov	r5, r6
    c87c:	ea000002 	b	c88c <CInterruptSystem::InterruptHandler()+0x68>
    c880:	e1b040a4 	lsrs	r4, r4, #1
    c884:	e2855001 	add	r5, r5, #1
    c888:	0a000008 	beq	c8b0 <CInterruptSystem::InterruptHandler()+0x8c>
    c88c:	e3140001 	tst	r4, #1
    c890:	0afffffa 	beq	c880 <CInterruptSystem::InterruptHandler()+0x5c>
    c894:	e1a01005 	mov	r1, r5
    c898:	e5970000 	ldr	r0, [r7]
    c89c:	ebffffc5 	bl	c7b8 <CInterruptSystem::CallIRQHandler(unsigned int)>
    c8a0:	e3500000 	cmp	r0, #0
    c8a4:	0afffff5 	beq	c880 <CInterruptSystem::InterruptHandler()+0x5c>
    c8a8:	e28dd010 	add	sp, sp, #16
    c8ac:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    c8b0:	e2866020 	add	r6, r6, #32
    c8b4:	e3560060 	cmp	r6, #96	; 0x60
    c8b8:	1affffeb 	bne	c86c <CInterruptSystem::InterruptHandler()+0x48>
    c8bc:	e28dd010 	add	sp, sp, #16
    c8c0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    c8c4:	e3a020d3 	mov	r2, #211	; 0xd3
    c8c8:	e59f1010 	ldr	r1, [pc, #16]	; c8e0 <CInterruptSystem::InterruptHandler()+0xbc>
    c8cc:	e59f0010 	ldr	r0, [pc, #16]	; c8e4 <CInterruptSystem::InterruptHandler()+0xc0>
    c8d0:	ebfff871 	bl	aa9c <assertion_failed>
    c8d4:	eaffffd8 	b	c83c <CInterruptSystem::InterruptHandler()+0x18>
    c8d8:	00016690 	.word	0x00016690
    c8dc:	2000b000 	.word	0x2000b000
    c8e0:	00014bb0 	.word	0x00014bb0
    c8e4:	00014c50 	.word	0x00014c50

0000c8e8 <InterruptHandler>:
    c8e8:	e92d4010 	push	{r4, lr}
    c8ec:	e3a04000 	mov	r4, #0
    c8f0:	ee074fba 	mcr	15, 0, r4, cr7, cr10, {5}
    c8f4:	ebffffca 	bl	c824 <CInterruptSystem::InterruptHandler()>
    c8f8:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
    c8fc:	e8bd8010 	pop	{r4, pc}

0000c900 <CKernelOptions::GetDecimal(char*) [clone .part.0]>:
    c900:	e3a01000 	mov	r1, #0
    c904:	ea00000a 	b	c934 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x34>
    c908:	e3520009 	cmp	r2, #9
    c90c:	8a000011 	bhi	c958 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x58>
    c910:	e3730001 	cmn	r3, #1
    c914:	13a02000 	movne	r2, #0
    c918:	03a02001 	moveq	r2, #1
    c91c:	e1510003 	cmp	r1, r3
    c920:	91a01002 	movls	r1, r2
    c924:	83821001 	orrhi	r1, r2, #1
    c928:	e3510000 	cmp	r1, #0
    c92c:	1a000009 	bne	c958 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x58>
    c930:	e1a01003 	mov	r1, r3
    c934:	e0d0c0d1 	ldrsb	ip, [r0], #1
    c938:	e0813101 	add	r3, r1, r1, lsl #2
    c93c:	e24c2030 	sub	r2, ip, #48	; 0x30
    c940:	e35c0000 	cmp	ip, #0
    c944:	e0823083 	add	r3, r2, r3, lsl #1
    c948:	e6ef2072 	uxtb	r2, r2
    c94c:	1affffed 	bne	c908 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x8>
    c950:	e1a00001 	mov	r0, r1
    c954:	e12fff1e 	bx	lr
    c958:	e3e01000 	mvn	r1, #0
    c95c:	e1a00001 	mov	r0, r1
    c960:	e12fff1e 	bx	lr

0000c964 <CKernelOptions::~CKernelOptions()>:
    c964:	e3a02000 	mov	r2, #0
    c968:	e59f3004 	ldr	r3, [pc, #4]	; c974 <CKernelOptions::~CKernelOptions()+0x10>
    c96c:	e5832000 	str	r2, [r3]
    c970:	e12fff1e 	bx	lr
    c974:	00016694 	.word	0x00016694

0000c978 <CKernelOptions::GetWidth() const>:
    c978:	e5900810 	ldr	r0, [r0, #2064]	; 0x810
    c97c:	e12fff1e 	bx	lr

0000c980 <CKernelOptions::GetHeight() const>:
    c980:	e5900814 	ldr	r0, [r0, #2068]	; 0x814
    c984:	e12fff1e 	bx	lr

0000c988 <CKernelOptions::GetLogDevice() const>:
    c988:	e2800e81 	add	r0, r0, #2064	; 0x810
    c98c:	e2800008 	add	r0, r0, #8
    c990:	e12fff1e 	bx	lr

0000c994 <CKernelOptions::GetLogLevel() const>:
    c994:	e590082c 	ldr	r0, [r0, #2092]	; 0x82c
    c998:	e12fff1e 	bx	lr

0000c99c <CKernelOptions::GetKeyMap() const>:
    c99c:	e2800e83 	add	r0, r0, #2096	; 0x830
    c9a0:	e12fff1e 	bx	lr

0000c9a4 <CKernelOptions::GetUSBPowerDelay() const>:
    c9a4:	e5900834 	ldr	r0, [r0, #2100]	; 0x834
    c9a8:	e12fff1e 	bx	lr

0000c9ac <CKernelOptions::GetSoundDevice() const>:
    c9ac:	e2800e83 	add	r0, r0, #2096	; 0x830
    c9b0:	e2800008 	add	r0, r0, #8
    c9b4:	e12fff1e 	bx	lr

0000c9b8 <CKernelOptions::GetSoundOption() const>:
    c9b8:	e590084c 	ldr	r0, [r0, #2124]	; 0x84c
    c9bc:	e12fff1e 	bx	lr

0000c9c0 <CKernelOptions::GetCPUSpeed() const>:
    c9c0:	e5d00850 	ldrb	r0, [r0, #2128]	; 0x850
    c9c4:	e12fff1e 	bx	lr

0000c9c8 <CKernelOptions::GetSoCMaxTemp() const>:
    c9c8:	e5900854 	ldr	r0, [r0, #2132]	; 0x854
    c9cc:	e12fff1e 	bx	lr

0000c9d0 <CKernelOptions::Get()>:
    c9d0:	e59f3004 	ldr	r3, [pc, #4]	; c9dc <CKernelOptions::Get()+0xc>
    c9d4:	e5930000 	ldr	r0, [r3]
    c9d8:	e12fff1e 	bx	lr
    c9dc:	00016694 	.word	0x00016694

0000c9e0 <CKernelOptions::GetToken()>:
    c9e0:	e590380c 	ldr	r3, [r0, #2060]	; 0x80c
    c9e4:	e1d320d0 	ldrsb	r2, [r3]
    c9e8:	e3520000 	cmp	r2, #0
    c9ec:	1a000005 	bne	ca08 <CKernelOptions::GetToken()+0x28>
    c9f0:	ea000016 	b	ca50 <CKernelOptions::GetToken()+0x70>
    c9f4:	e2833001 	add	r3, r3, #1
    c9f8:	e580380c 	str	r3, [r0, #2060]	; 0x80c
    c9fc:	e1d320d0 	ldrsb	r2, [r3]
    ca00:	e3520000 	cmp	r2, #0
    ca04:	0a000011 	beq	ca50 <CKernelOptions::GetToken()+0x70>
    ca08:	e3520020 	cmp	r2, #32
    ca0c:	0afffff8 	beq	c9f4 <CKernelOptions::GetToken()+0x14>
    ca10:	e1a02003 	mov	r2, r3
    ca14:	ea000000 	b	ca1c <CKernelOptions::GetToken()+0x3c>
    ca18:	e1a02001 	mov	r2, r1
    ca1c:	e2821001 	add	r1, r2, #1
    ca20:	e580180c 	str	r1, [r0, #2060]	; 0x80c
    ca24:	e1d2c0d1 	ldrsb	ip, [r2, #1]
    ca28:	e35c0000 	cmp	ip, #0
    ca2c:	0a000008 	beq	ca54 <CKernelOptions::GetToken()+0x74>
    ca30:	e35c0020 	cmp	ip, #32
    ca34:	1afffff7 	bne	ca18 <CKernelOptions::GetToken()+0x38>
    ca38:	e3a0c000 	mov	ip, #0
    ca3c:	e2822002 	add	r2, r2, #2
    ca40:	e580280c 	str	r2, [r0, #2060]	; 0x80c
    ca44:	e5c1c000 	strb	ip, [r1]
    ca48:	e1a00003 	mov	r0, r3
    ca4c:	e12fff1e 	bx	lr
    ca50:	e3a03000 	mov	r3, #0
    ca54:	e1a00003 	mov	r0, r3
    ca58:	e12fff1e 	bx	lr

0000ca5c <CKernelOptions::CKernelOptions()>:
    ca5c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ca60:	e3a02004 	mov	r2, #4
    ca64:	e1a04000 	mov	r4, r0
    ca68:	e3a05000 	mov	r5, #0
    ca6c:	e3a0303c 	mov	r3, #60	; 0x3c
    ca70:	e2807e81 	add	r7, r0, #2064	; 0x810
    ca74:	e2877008 	add	r7, r7, #8
    ca78:	e580282c 	str	r2, [r0, #2092]	; 0x82c
    ca7c:	e5803854 	str	r3, [r0, #2132]	; 0x854
    ca80:	e24dd014 	sub	sp, sp, #20
    ca84:	e59f1348 	ldr	r1, [pc, #840]	; cdd4 <CKernelOptions::CKernelOptions()+0x378>
    ca88:	e1a00007 	mov	r0, r7
    ca8c:	e5845810 	str	r5, [r4, #2064]	; 0x810
    ca90:	e5845814 	str	r5, [r4, #2068]	; 0x814
    ca94:	e5845834 	str	r5, [r4, #2100]	; 0x834
    ca98:	e584584c 	str	r5, [r4, #2124]	; 0x84c
    ca9c:	e5c45850 	strb	r5, [r4, #2128]	; 0x850
    caa0:	e2849e83 	add	r9, r4, #2096	; 0x830
    caa4:	eb001428 	bl	11b4c <strcpy>
    caa8:	e59f1328 	ldr	r1, [pc, #808]	; cdd8 <CKernelOptions::CKernelOptions()+0x37c>
    caac:	e1a00009 	mov	r0, r9
    cab0:	eb001425 	bl	11b4c <strcpy>
    cab4:	e59f3320 	ldr	r3, [pc, #800]	; cddc <CKernelOptions::CKernelOptions()+0x380>
    cab8:	e5c45838 	strb	r5, [r4, #2104]	; 0x838
    cabc:	e28d000c 	add	r0, sp, #12
    cac0:	e5834000 	str	r4, [r3]
    cac4:	ebfff818 	bl	ab2c <CBcmPropertyTags::CBcmPropertyTags()>
    cac8:	e58d5000 	str	r5, [sp]
    cacc:	e1a02004 	mov	r2, r4
    cad0:	e28d000c 	add	r0, sp, #12
    cad4:	e59f3304 	ldr	r3, [pc, #772]	; cde0 <CKernelOptions::CKernelOptions()+0x384>
    cad8:	e59f1304 	ldr	r1, [pc, #772]	; cde4 <CKernelOptions::CKernelOptions()+0x388>
    cadc:	ebfff869 	bl	ac88 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    cae0:	e1500005 	cmp	r0, r5
    cae4:	0a000037 	beq	cbc8 <CKernelOptions::CKernelOptions()+0x16c>
    cae8:	e5943008 	ldr	r3, [r4, #8]
    caec:	e3530b02 	cmp	r3, #2048	; 0x800
    caf0:	2a000034 	bcs	cbc8 <CKernelOptions::CKernelOptions()+0x16c>
    caf4:	e0843003 	add	r3, r4, r3
    caf8:	e284200c 	add	r2, r4, #12
    cafc:	e59f82e4 	ldr	r8, [pc, #740]	; cde8 <CKernelOptions::CKernelOptions()+0x38c>
    cb00:	e59fa2e4 	ldr	sl, [pc, #740]	; cdec <CKernelOptions::CKernelOptions()+0x390>
    cb04:	e5c3500c 	strb	r5, [r3, #12]
    cb08:	e584280c 	str	r2, [r4, #2060]	; 0x80c
    cb0c:	e1a00004 	mov	r0, r4
    cb10:	ebffffb2 	bl	c9e0 <CKernelOptions::GetToken()>
    cb14:	e2506000 	subs	r6, r0, #0
    cb18:	0a00002a 	beq	cbc8 <CKernelOptions::CKernelOptions()+0x16c>
    cb1c:	e1d630d0 	ldrsb	r3, [r6]
    cb20:	e3530000 	cmp	r3, #0
    cb24:	0a000008 	beq	cb4c <CKernelOptions::CKernelOptions()+0xf0>
    cb28:	e353003d 	cmp	r3, #61	; 0x3d
    cb2c:	e1a05006 	mov	r5, r6
    cb30:	1a000002 	bne	cb40 <CKernelOptions::CKernelOptions()+0xe4>
    cb34:	ea000028 	b	cbdc <CKernelOptions::CKernelOptions()+0x180>
    cb38:	e353003d 	cmp	r3, #61	; 0x3d
    cb3c:	0a000026 	beq	cbdc <CKernelOptions::CKernelOptions()+0x180>
    cb40:	e1f530d1 	ldrsb	r3, [r5, #1]!
    cb44:	e3530000 	cmp	r3, #0
    cb48:	1afffffa 	bne	cb38 <CKernelOptions::CKernelOptions()+0xdc>
    cb4c:	e1a01008 	mov	r1, r8
    cb50:	e1a00006 	mov	r0, r6
    cb54:	eb001388 	bl	1197c <strcmp>
    cb58:	e3500000 	cmp	r0, #0
    cb5c:	0affffea 	beq	cb0c <CKernelOptions::CKernelOptions()+0xb0>
    cb60:	e1a0100a 	mov	r1, sl
    cb64:	e1a00006 	mov	r0, r6
    cb68:	eb001383 	bl	1197c <strcmp>
    cb6c:	e3500000 	cmp	r0, #0
    cb70:	13a0b000 	movne	fp, #0
    cb74:	0affffe4 	beq	cb0c <CKernelOptions::CKernelOptions()+0xb0>
    cb78:	e59f1270 	ldr	r1, [pc, #624]	; cdf0 <CKernelOptions::CKernelOptions()+0x394>
    cb7c:	e1a00006 	mov	r0, r6
    cb80:	eb00137d 	bl	1197c <strcmp>
    cb84:	e2505000 	subs	r5, r0, #0
    cb88:	0a000027 	beq	cc2c <CKernelOptions::CKernelOptions()+0x1d0>
    cb8c:	e59f1260 	ldr	r1, [pc, #608]	; cdf4 <CKernelOptions::CKernelOptions()+0x398>
    cb90:	e1a00006 	mov	r0, r6
    cb94:	eb001378 	bl	1197c <strcmp>
    cb98:	e3500000 	cmp	r0, #0
    cb9c:	1a000028 	bne	cc44 <CKernelOptions::CKernelOptions()+0x1e8>
    cba0:	e35b0000 	cmp	fp, #0
    cba4:	0affffd8 	beq	cb0c <CKernelOptions::CKernelOptions()+0xb0>
    cba8:	e1db30d0 	ldrsb	r3, [fp]
    cbac:	e3530000 	cmp	r3, #0
    cbb0:	0affffd5 	beq	cb0c <CKernelOptions::CKernelOptions()+0xb0>
    cbb4:	e1a0000b 	mov	r0, fp
    cbb8:	ebffff50 	bl	c900 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    cbbc:	e3500004 	cmp	r0, #4
    cbc0:	9584082c 	strls	r0, [r4, #2092]	; 0x82c
    cbc4:	eaffffd0 	b	cb0c <CKernelOptions::CKernelOptions()+0xb0>
    cbc8:	e28d000c 	add	r0, sp, #12
    cbcc:	ebfff7dc 	bl	ab44 <CBcmPropertyTags::~CBcmPropertyTags()>
    cbd0:	e1a00004 	mov	r0, r4
    cbd4:	e28dd014 	add	sp, sp, #20
    cbd8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cbdc:	e3a03000 	mov	r3, #0
    cbe0:	e1a01008 	mov	r1, r8
    cbe4:	e5c53000 	strb	r3, [r5]
    cbe8:	e1a00006 	mov	r0, r6
    cbec:	eb001362 	bl	1197c <strcmp>
    cbf0:	e3500000 	cmp	r0, #0
    cbf4:	e285b001 	add	fp, r5, #1
    cbf8:	1a000047 	bne	cd1c <CKernelOptions::CKernelOptions()+0x2c0>
    cbfc:	e35b0000 	cmp	fp, #0
    cc00:	0affffc1 	beq	cb0c <CKernelOptions::CKernelOptions()+0xb0>
    cc04:	e1d530d1 	ldrsb	r3, [r5, #1]
    cc08:	e3530000 	cmp	r3, #0
    cc0c:	0affffbe 	beq	cb0c <CKernelOptions::CKernelOptions()+0xb0>
    cc10:	e1a0000b 	mov	r0, fp
    cc14:	ebffff39 	bl	c900 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    cc18:	e59f31d8 	ldr	r3, [pc, #472]	; cdf8 <CKernelOptions::CKernelOptions()+0x39c>
    cc1c:	e2402d0a 	sub	r2, r0, #640	; 0x280
    cc20:	e1520003 	cmp	r2, r3
    cc24:	95840810 	strls	r0, [r4, #2064]	; 0x810
    cc28:	eaffffb7 	b	cb0c <CKernelOptions::CKernelOptions()+0xb0>
    cc2c:	e1a0100b 	mov	r1, fp
    cc30:	e3a02013 	mov	r2, #19
    cc34:	e1a00007 	mov	r0, r7
    cc38:	eb0013ce 	bl	11b78 <strncpy>
    cc3c:	e5c4582b 	strb	r5, [r4, #2091]	; 0x82b
    cc40:	eaffffb1 	b	cb0c <CKernelOptions::CKernelOptions()+0xb0>
    cc44:	e59f11b0 	ldr	r1, [pc, #432]	; cdfc <CKernelOptions::CKernelOptions()+0x3a0>
    cc48:	e1a00006 	mov	r0, r6
    cc4c:	eb00134a 	bl	1197c <strcmp>
    cc50:	e2505000 	subs	r5, r0, #0
    cc54:	1a000005 	bne	cc70 <CKernelOptions::CKernelOptions()+0x214>
    cc58:	e1a0100b 	mov	r1, fp
    cc5c:	e3a02002 	mov	r2, #2
    cc60:	e1a00009 	mov	r0, r9
    cc64:	eb0013c3 	bl	11b78 <strncpy>
    cc68:	e5c45832 	strb	r5, [r4, #2098]	; 0x832
    cc6c:	eaffffa6 	b	cb0c <CKernelOptions::CKernelOptions()+0xb0>
    cc70:	e59f1188 	ldr	r1, [pc, #392]	; ce00 <CKernelOptions::CKernelOptions()+0x3a4>
    cc74:	e1a00006 	mov	r0, r6
    cc78:	eb00133f 	bl	1197c <strcmp>
    cc7c:	e3500000 	cmp	r0, #0
    cc80:	1a00000b 	bne	ccb4 <CKernelOptions::CKernelOptions()+0x258>
    cc84:	e35b0000 	cmp	fp, #0
    cc88:	0affff9f 	beq	cb0c <CKernelOptions::CKernelOptions()+0xb0>
    cc8c:	e1db30d0 	ldrsb	r3, [fp]
    cc90:	e3530000 	cmp	r3, #0
    cc94:	0affff9c 	beq	cb0c <CKernelOptions::CKernelOptions()+0xb0>
    cc98:	e1a0000b 	mov	r0, fp
    cc9c:	ebffff17 	bl	c900 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    cca0:	e59f315c 	ldr	r3, [pc, #348]	; ce04 <CKernelOptions::CKernelOptions()+0x3a8>
    cca4:	e24020c8 	sub	r2, r0, #200	; 0xc8
    cca8:	e1520003 	cmp	r2, r3
    ccac:	95840834 	strls	r0, [r4, #2100]	; 0x834
    ccb0:	eaffff95 	b	cb0c <CKernelOptions::CKernelOptions()+0xb0>
    ccb4:	e59f114c 	ldr	r1, [pc, #332]	; ce08 <CKernelOptions::CKernelOptions()+0x3ac>
    ccb8:	e1a00006 	mov	r0, r6
    ccbc:	eb00132e 	bl	1197c <strcmp>
    ccc0:	e2505000 	subs	r5, r0, #0
    ccc4:	1a000005 	bne	cce0 <CKernelOptions::CKernelOptions()+0x284>
    ccc8:	e1a0100b 	mov	r1, fp
    cccc:	e3a02013 	mov	r2, #19
    ccd0:	e2890008 	add	r0, r9, #8
    ccd4:	eb0013a7 	bl	11b78 <strncpy>
    ccd8:	e5c4584b 	strb	r5, [r4, #2123]	; 0x84b
    ccdc:	eaffff8a 	b	cb0c <CKernelOptions::CKernelOptions()+0xb0>
    cce0:	e59f1124 	ldr	r1, [pc, #292]	; ce0c <CKernelOptions::CKernelOptions()+0x3b0>
    cce4:	e1a00006 	mov	r0, r6
    cce8:	eb001323 	bl	1197c <strcmp>
    ccec:	e3500000 	cmp	r0, #0
    ccf0:	1a000019 	bne	cd5c <CKernelOptions::CKernelOptions()+0x300>
    ccf4:	e35b0000 	cmp	fp, #0
    ccf8:	0affff83 	beq	cb0c <CKernelOptions::CKernelOptions()+0xb0>
    ccfc:	e1db30d0 	ldrsb	r3, [fp]
    cd00:	e3530000 	cmp	r3, #0
    cd04:	0affff80 	beq	cb0c <CKernelOptions::CKernelOptions()+0xb0>
    cd08:	e1a0000b 	mov	r0, fp
    cd0c:	ebfffefb 	bl	c900 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    cd10:	e3500002 	cmp	r0, #2
    cd14:	9584084c 	strls	r0, [r4, #2124]	; 0x84c
    cd18:	eaffff7b 	b	cb0c <CKernelOptions::CKernelOptions()+0xb0>
    cd1c:	e1a0100a 	mov	r1, sl
    cd20:	e1a00006 	mov	r0, r6
    cd24:	eb001314 	bl	1197c <strcmp>
    cd28:	e3500000 	cmp	r0, #0
    cd2c:	1affff91 	bne	cb78 <CKernelOptions::CKernelOptions()+0x11c>
    cd30:	e35b0000 	cmp	fp, #0
    cd34:	0affff74 	beq	cb0c <CKernelOptions::CKernelOptions()+0xb0>
    cd38:	e1d530d1 	ldrsb	r3, [r5, #1]
    cd3c:	e3530000 	cmp	r3, #0
    cd40:	0affff71 	beq	cb0c <CKernelOptions::CKernelOptions()+0xb0>
    cd44:	e1a0000b 	mov	r0, fp
    cd48:	ebfffeec 	bl	c900 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    cd4c:	e2403e1e 	sub	r3, r0, #480	; 0x1e0
    cd50:	e3530f96 	cmp	r3, #600	; 0x258
    cd54:	95840814 	strls	r0, [r4, #2068]	; 0x814
    cd58:	eaffff6b 	b	cb0c <CKernelOptions::CKernelOptions()+0xb0>
    cd5c:	e59f10ac 	ldr	r1, [pc, #172]	; ce10 <CKernelOptions::CKernelOptions()+0x3b4>
    cd60:	e1a00006 	mov	r0, r6
    cd64:	eb001304 	bl	1197c <strcmp>
    cd68:	e3500000 	cmp	r0, #0
    cd6c:	1a000006 	bne	cd8c <CKernelOptions::CKernelOptions()+0x330>
    cd70:	e1a0000b 	mov	r0, fp
    cd74:	e59f1098 	ldr	r1, [pc, #152]	; ce14 <CKernelOptions::CKernelOptions()+0x3b8>
    cd78:	eb0012ff 	bl	1197c <strcmp>
    cd7c:	e3500000 	cmp	r0, #0
    cd80:	03a03001 	moveq	r3, #1
    cd84:	05c43850 	strbeq	r3, [r4, #2128]	; 0x850
    cd88:	eaffff5f 	b	cb0c <CKernelOptions::CKernelOptions()+0xb0>
    cd8c:	e1a00006 	mov	r0, r6
    cd90:	e59f1080 	ldr	r1, [pc, #128]	; ce18 <CKernelOptions::CKernelOptions()+0x3bc>
    cd94:	eb0012f8 	bl	1197c <strcmp>
    cd98:	e2903000 	adds	r3, r0, #0
    cd9c:	13a03001 	movne	r3, #1
    cda0:	e35b0000 	cmp	fp, #0
    cda4:	03833001 	orreq	r3, r3, #1
    cda8:	e3530000 	cmp	r3, #0
    cdac:	1affff56 	bne	cb0c <CKernelOptions::CKernelOptions()+0xb0>
    cdb0:	e1db30d0 	ldrsb	r3, [fp]
    cdb4:	e3530000 	cmp	r3, #0
    cdb8:	0affff53 	beq	cb0c <CKernelOptions::CKernelOptions()+0xb0>
    cdbc:	e1a0000b 	mov	r0, fp
    cdc0:	ebfffece 	bl	c900 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    cdc4:	e2403028 	sub	r3, r0, #40	; 0x28
    cdc8:	e3530026 	cmp	r3, #38	; 0x26
    cdcc:	95840854 	strls	r0, [r4, #2132]	; 0x854
    cdd0:	eaffff4d 	b	cb0c <CKernelOptions::CKernelOptions()+0xb0>
    cdd4:	00014c60 	.word	0x00014c60
    cdd8:	00014c68 	.word	0x00014c68
    cddc:	00016694 	.word	0x00016694
    cde0:	0000080c 	.word	0x0000080c
    cde4:	00050001 	.word	0x00050001
    cde8:	00014cd4 	.word	0x00014cd4
    cdec:	00014c6c 	.word	0x00014c6c
    cdf0:	00014c74 	.word	0x00014c74
    cdf4:	00014c7c 	.word	0x00014c7c
    cdf8:	0000053c 	.word	0x0000053c
    cdfc:	00014c88 	.word	0x00014c88
    ce00:	00014c90 	.word	0x00014c90
    ce04:	00001e78 	.word	0x00001e78
    ce08:	00014ca0 	.word	0x00014ca0
    ce0c:	00014cac 	.word	0x00014cac
    ce10:	00014cb8 	.word	0x00014cb8
    ce14:	00014cc0 	.word	0x00014cc0
    ce18:	00014cc8 	.word	0x00014cc8

0000ce1c <CKernelOptions::GetOptionValue(char*)>:
    ce1c:	e1d030d0 	ldrsb	r3, [r0]
    ce20:	e3530000 	cmp	r3, #0
    ce24:	1a000003 	bne	ce38 <CKernelOptions::GetOptionValue(char*)+0x1c>
    ce28:	ea000007 	b	ce4c <CKernelOptions::GetOptionValue(char*)+0x30>
    ce2c:	e1f030d1 	ldrsb	r3, [r0, #1]!
    ce30:	e3530000 	cmp	r3, #0
    ce34:	0a000004 	beq	ce4c <CKernelOptions::GetOptionValue(char*)+0x30>
    ce38:	e353003d 	cmp	r3, #61	; 0x3d
    ce3c:	1afffffa 	bne	ce2c <CKernelOptions::GetOptionValue(char*)+0x10>
    ce40:	e3a02000 	mov	r2, #0
    ce44:	e2803001 	add	r3, r0, #1
    ce48:	e5c02000 	strb	r2, [r0]
    ce4c:	e1a00003 	mov	r0, r3
    ce50:	e12fff1e 	bx	lr

0000ce54 <CKernelOptions::GetDecimal(char*)>:
    ce54:	e2503000 	subs	r3, r0, #0
    ce58:	0a000002 	beq	ce68 <CKernelOptions::GetDecimal(char*)+0x14>
    ce5c:	e1d330d0 	ldrsb	r3, [r3]
    ce60:	e3530000 	cmp	r3, #0
    ce64:	1a000001 	bne	ce70 <CKernelOptions::GetDecimal(char*)+0x1c>
    ce68:	e3e00000 	mvn	r0, #0
    ce6c:	e12fff1e 	bx	lr
    ce70:	eafffea2 	b	c900 <CKernelOptions::GetDecimal(char*) [clone .part.0]>

0000ce74 <CLogger::CLogger(unsigned int, CTimer*)>:
    ce74:	e92d4010 	push	{r4, lr}
    ce78:	e3a03000 	mov	r3, #0
    ce7c:	e1a04000 	mov	r4, r0
    ce80:	e3a00001 	mov	r0, #1
    ce84:	e884000e 	stm	r4, {r1, r2, r3}
    ce88:	e584300c 	str	r3, [r4, #12]
    ce8c:	e5843010 	str	r3, [r4, #16]
    ce90:	e5843014 	str	r3, [r4, #20]
    ce94:	e58430e4 	str	r3, [r4, #228]	; 0xe4
    ce98:	e58430e8 	str	r3, [r4, #232]	; 0xe8
    ce9c:	e58430f0 	str	r3, [r4, #240]	; 0xf0
    cea0:	e58430f4 	str	r3, [r4, #244]	; 0xf4
    cea4:	e5840018 	str	r0, [r4, #24]
    cea8:	e58400ec 	str	r0, [r4, #236]	; 0xec
    ceac:	e3a00901 	mov	r0, #16384	; 0x4000
    ceb0:	eb001646 	bl	127d0 <operator new[](unsigned int)>
    ceb4:	e59f300c 	ldr	r3, [pc, #12]	; cec8 <CLogger::CLogger(unsigned int, CTimer*)+0x54>
    ceb8:	e584000c 	str	r0, [r4, #12]
    cebc:	e5834000 	str	r4, [r3]
    cec0:	e1a00004 	mov	r0, r4
    cec4:	e8bd8010 	pop	{r4, pc}
    cec8:	00016698 	.word	0x00016698

0000cecc <CLogger::~CLogger()>:
    cecc:	e3a02000 	mov	r2, #0
    ced0:	e59f1064 	ldr	r1, [pc, #100]	; cf3c <CLogger::~CLogger()+0x70>
    ced4:	e92d4070 	push	{r4, r5, r6, lr}
    ced8:	e59030e8 	ldr	r3, [r0, #232]	; 0xe8
    cedc:	e1a04000 	mov	r4, r0
    cee0:	e1a06002 	mov	r6, r2
    cee4:	e3a05f42 	mov	r5, #264	; 0x108
    cee8:	e5812000 	str	r2, [r1]
    ceec:	ea000008 	b	cf14 <CLogger::~CLogger()+0x48>
    cef0:	e591001c 	ldr	r0, [r1, #28]
    cef4:	e1a01005 	mov	r1, r5
    cef8:	eb001637 	bl	127dc <operator delete(void*, unsigned int)>
    cefc:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
    cf00:	e2833001 	add	r3, r3, #1
    cf04:	e3530032 	cmp	r3, #50	; 0x32
    cf08:	e58430e8 	str	r3, [r4, #232]	; 0xe8
    cf0c:	03a03000 	moveq	r3, #0
    cf10:	058460e8 	streq	r6, [r4, #232]	; 0xe8
    cf14:	e59420e4 	ldr	r2, [r4, #228]	; 0xe4
    cf18:	e0841103 	add	r1, r4, r3, lsl #2
    cf1c:	e1520003 	cmp	r2, r3
    cf20:	1afffff2 	bne	cef0 <CLogger::~CLogger()+0x24>
    cf24:	e594000c 	ldr	r0, [r4, #12]
    cf28:	e3500000 	cmp	r0, #0
    cf2c:	0a000000 	beq	cf34 <CLogger::~CLogger()+0x68>
    cf30:	eb001628 	bl	127d8 <operator delete[](void*)>
    cf34:	e1a00004 	mov	r0, r4
    cf38:	e8bd8070 	pop	{r4, r5, r6, pc}
    cf3c:	00016698 	.word	0x00016698

0000cf40 <CLogger::Get()>:
    cf40:	e59f3004 	ldr	r3, [pc, #4]	; cf4c <CLogger::Get()+0xc>
    cf44:	e5930000 	ldr	r0, [r3]
    cf48:	e12fff1e 	bx	lr
    cf4c:	00016698 	.word	0x00016698

0000cf50 <CLogger::Write(char const*)>:
    cf50:	e92d4070 	push	{r4, r5, r6, lr}
    cf54:	e1a04000 	mov	r4, r0
    cf58:	e1a00001 	mov	r0, r1
    cf5c:	e1a05001 	mov	r5, r1
    cf60:	eb00127b 	bl	11954 <strlen>
    cf64:	e1a06000 	mov	r6, r0
    cf68:	e5940008 	ldr	r0, [r4, #8]
    cf6c:	e1a02006 	mov	r2, r6
    cf70:	e5903000 	ldr	r3, [r0]
    cf74:	e1a01005 	mov	r1, r5
    cf78:	e593300c 	ldr	r3, [r3, #12]
    cf7c:	e12fff33 	blx	r3
    cf80:	e5940018 	ldr	r0, [r4, #24]
    cf84:	e3500000 	cmp	r0, #0
    cf88:	1a000018 	bne	cff0 <CLogger::Write(char const*)+0xa0>
    cf8c:	e59f2064 	ldr	r2, [pc, #100]	; cff8 <CLogger::Write(char const*)+0xa8>
    cf90:	e0850006 	add	r0, r5, r6
    cf94:	e1550000 	cmp	r5, r0
    cf98:	0a00000f 	beq	cfdc <CLogger::Write(char const*)+0x8c>
    cf9c:	e0d510d1 	ldrsb	r1, [r5], #1
    cfa0:	e351000d 	cmp	r1, #13
    cfa4:	0afffffa 	beq	cf94 <CLogger::Write(char const*)+0x44>
    cfa8:	e594c010 	ldr	ip, [r4, #16]
    cfac:	e594e00c 	ldr	lr, [r4, #12]
    cfb0:	e7ce100c 	strb	r1, [lr, ip]
    cfb4:	e5943010 	ldr	r3, [r4, #16]
    cfb8:	e5941014 	ldr	r1, [r4, #20]
    cfbc:	e2833001 	add	r3, r3, #1
    cfc0:	e0033002 	and	r3, r3, r2
    cfc4:	e1530001 	cmp	r3, r1
    cfc8:	e5843010 	str	r3, [r4, #16]
    cfcc:	1afffff0 	bne	cf94 <CLogger::Write(char const*)+0x44>
    cfd0:	e2433001 	sub	r3, r3, #1
    cfd4:	e0033002 	and	r3, r3, r2
    cfd8:	e5843010 	str	r3, [r4, #16]
    cfdc:	e5943018 	ldr	r3, [r4, #24]
    cfe0:	e3530000 	cmp	r3, #0
    cfe4:	08bd8070 	popeq	{r4, r5, r6, pc}
    cfe8:	e8bd4070 	pop	{r4, r5, r6, lr}
    cfec:	ea0015c9 	b	12718 <LeaveCritical>
    cff0:	eb00159b 	bl	12664 <EnterCritical>
    cff4:	eaffffe4 	b	cf8c <CLogger::Write(char const*)+0x3c>
    cff8:	00003fff 	.word	0x00003fff

0000cffc <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)>:
    cffc:	e590c000 	ldr	ip, [r0]
    d000:	e152000c 	cmp	r2, ip
    d004:	812fff1e 	bxhi	lr
    d008:	e92d4070 	push	{r4, r5, r6, lr}
    d00c:	e1a05003 	mov	r5, r3
    d010:	e3a03000 	mov	r3, #0
    d014:	e24dd0c8 	sub	sp, sp, #200	; 0xc8
    d018:	e1520003 	cmp	r2, r3
    d01c:	e1a04000 	mov	r4, r0
    d020:	e5cd3000 	strb	r3, [sp]
    d024:	0a00000f 	beq	d068 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x6c>
    d028:	e1a0000d 	mov	r0, sp
    d02c:	eb0012e4 	bl	11bc4 <strcat>
    d030:	e1a0000d 	mov	r0, sp
    d034:	e59f1088 	ldr	r1, [pc, #136]	; d0c4 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xc8>
    d038:	eb0012e1 	bl	11bc4 <strcat>
    d03c:	e1a01005 	mov	r1, r5
    d040:	e1a0000d 	mov	r0, sp
    d044:	eb0012de 	bl	11bc4 <strcat>
    d048:	e1a0000d 	mov	r0, sp
    d04c:	e59f1074 	ldr	r1, [pc, #116]	; d0c8 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xcc>
    d050:	eb0012db 	bl	11bc4 <strcat>
    d054:	e1a0100d 	mov	r1, sp
    d058:	e1a00004 	mov	r0, r4
    d05c:	ebffffbb 	bl	cf50 <CLogger::Write(char const*)>
    d060:	e28dd0c8 	add	sp, sp, #200	; 0xc8
    d064:	e8bd8070 	pop	{r4, r5, r6, pc}
    d068:	e1a06001 	mov	r6, r1
    d06c:	e1a0000d 	mov	r0, sp
    d070:	e59f1054 	ldr	r1, [pc, #84]	; d0cc <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd0>
    d074:	eb0012b4 	bl	11b4c <strcpy>
    d078:	e1a01006 	mov	r1, r6
    d07c:	e1a0000d 	mov	r0, sp
    d080:	eb0012cf 	bl	11bc4 <strcat>
    d084:	e59f1038 	ldr	r1, [pc, #56]	; d0c4 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xc8>
    d088:	e1a0000d 	mov	r0, sp
    d08c:	eb0012cc 	bl	11bc4 <strcat>
    d090:	e1a01005 	mov	r1, r5
    d094:	e1a0000d 	mov	r0, sp
    d098:	eb0012c9 	bl	11bc4 <strcat>
    d09c:	e59f102c 	ldr	r1, [pc, #44]	; d0d0 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd4>
    d0a0:	e1a0000d 	mov	r0, sp
    d0a4:	eb0012c6 	bl	11bc4 <strcat>
    d0a8:	e59f1018 	ldr	r1, [pc, #24]	; d0c8 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xcc>
    d0ac:	e1a0000d 	mov	r0, sp
    d0b0:	eb0012c3 	bl	11bc4 <strcat>
    d0b4:	e1a0100d 	mov	r1, sp
    d0b8:	e1a00004 	mov	r0, r4
    d0bc:	ebffffa3 	bl	cf50 <CLogger::Write(char const*)>
    d0c0:	eb000e58 	bl	10a28 <halt>
    d0c4:	00014ce4 	.word	0x00014ce4
    d0c8:	00013fd8 	.word	0x00013fd8
    d0cc:	00014cdc 	.word	0x00014cdc
    d0d0:	00014ce8 	.word	0x00014ce8

0000d0d4 <CLogger::Read(void*, unsigned int)>:
    d0d4:	e92d4070 	push	{r4, r5, r6, lr}
    d0d8:	e1a04000 	mov	r4, r0
    d0dc:	e5900018 	ldr	r0, [r0, #24]
    d0e0:	e1a05001 	mov	r5, r1
    d0e4:	e3500000 	cmp	r0, #0
    d0e8:	e1a06002 	mov	r6, r2
    d0ec:	1a00001c 	bne	d164 <CLogger::Read(void*, unsigned int)+0x90>
    d0f0:	e5942010 	ldr	r2, [r4, #16]
    d0f4:	e5943014 	ldr	r3, [r4, #20]
    d0f8:	e1520003 	cmp	r2, r3
    d0fc:	0a000021 	beq	d188 <CLogger::Read(void*, unsigned int)+0xb4>
    d100:	e1a01005 	mov	r1, r5
    d104:	e59f2088 	ldr	r2, [pc, #136]	; d194 <CLogger::Read(void*, unsigned int)+0xc0>
    d108:	e3a05000 	mov	r5, #0
    d10c:	ea00000a 	b	d13c <CLogger::Read(void*, unsigned int)+0x68>
    d110:	e594000c 	ldr	r0, [r4, #12]
    d114:	e2855001 	add	r5, r5, #1
    d118:	e19030d3 	ldrsb	r3, [r0, r3]
    d11c:	e4c13001 	strb	r3, [r1], #1
    d120:	e5943014 	ldr	r3, [r4, #20]
    d124:	e5940010 	ldr	r0, [r4, #16]
    d128:	e2833001 	add	r3, r3, #1
    d12c:	e0033002 	and	r3, r3, r2
    d130:	e1530000 	cmp	r3, r0
    d134:	e5843014 	str	r3, [r4, #20]
    d138:	0a000001 	beq	d144 <CLogger::Read(void*, unsigned int)+0x70>
    d13c:	e1550006 	cmp	r5, r6
    d140:	1afffff2 	bne	d110 <CLogger::Read(void*, unsigned int)+0x3c>
    d144:	e5943018 	ldr	r3, [r4, #24]
    d148:	e3530000 	cmp	r3, #0
    d14c:	1a000001 	bne	d158 <CLogger::Read(void*, unsigned int)+0x84>
    d150:	e1a00005 	mov	r0, r5
    d154:	e8bd8070 	pop	{r4, r5, r6, pc}
    d158:	eb00156e 	bl	12718 <LeaveCritical>
    d15c:	e1a00005 	mov	r0, r5
    d160:	e8bd8070 	pop	{r4, r5, r6, pc}
    d164:	eb00153e 	bl	12664 <EnterCritical>
    d168:	e5942010 	ldr	r2, [r4, #16]
    d16c:	e5943014 	ldr	r3, [r4, #20]
    d170:	e1520003 	cmp	r2, r3
    d174:	1affffe1 	bne	d100 <CLogger::Read(void*, unsigned int)+0x2c>
    d178:	e5943018 	ldr	r3, [r4, #24]
    d17c:	e3530000 	cmp	r3, #0
    d180:	0a000000 	beq	d188 <CLogger::Read(void*, unsigned int)+0xb4>
    d184:	eb001563 	bl	12718 <LeaveCritical>
    d188:	e3e05000 	mvn	r5, #0
    d18c:	e1a00005 	mov	r0, r5
    d190:	e8bd8070 	pop	{r4, r5, r6, pc}
    d194:	00003fff 	.word	0x00003fff

0000d198 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>:
    d198:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    d19c:	e1a05000 	mov	r5, r0
    d1a0:	e24dd00c 	sub	sp, sp, #12
    d1a4:	e3a00f42 	mov	r0, #264	; 0x108
    d1a8:	e1a07003 	mov	r7, r3
    d1ac:	e1a09002 	mov	r9, r2
    d1b0:	e1a08001 	mov	r8, r1
    d1b4:	eb001584 	bl	127cc <operator new(unsigned int)>
    d1b8:	e3a06000 	mov	r6, #0
    d1bc:	e1a04000 	mov	r4, r0
    d1c0:	e1a01008 	mov	r1, r8
    d1c4:	e3a02032 	mov	r2, #50	; 0x32
    d1c8:	e4c09001 	strb	r9, [r0], #1
    d1cc:	eb001269 	bl	11b78 <strncpy>
    d1d0:	e1a01007 	mov	r1, r7
    d1d4:	e2840033 	add	r0, r4, #51	; 0x33
    d1d8:	e3a020c8 	mov	r2, #200	; 0xc8
    d1dc:	e5c46032 	strb	r6, [r4, #50]	; 0x32
    d1e0:	eb001264 	bl	11b78 <strncpy>
    d1e4:	e5950004 	ldr	r0, [r5, #4]
    d1e8:	e5c460fa 	strb	r6, [r4, #250]	; 0xfa
    d1ec:	e1500006 	cmp	r0, r6
    d1f0:	0a000004 	beq	d208 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x70>
    d1f4:	e28d2004 	add	r2, sp, #4
    d1f8:	e1a0100d 	mov	r1, sp
    d1fc:	eb000ee4 	bl	10d94 <CTimer::GetLocalTime(unsigned int*, unsigned int*)>
    d200:	e1500006 	cmp	r0, r6
    d204:	1a000021 	bne	d290 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xf8>
    d208:	e3a03000 	mov	r3, #0
    d20c:	e59500ec 	ldr	r0, [r5, #236]	; 0xec
    d210:	e58430fc 	str	r3, [r4, #252]	; 0xfc
    d214:	e3500000 	cmp	r0, #0
    d218:	e5843100 	str	r3, [r4, #256]	; 0x100
    d21c:	e5843104 	str	r3, [r4, #260]	; 0x104
    d220:	1a000027 	bne	d2c4 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x12c>
    d224:	e59520e4 	ldr	r2, [r5, #228]	; 0xe4
    d228:	e2823001 	add	r3, r2, #1
    d22c:	e3530032 	cmp	r3, #50	; 0x32
    d230:	e0852102 	add	r2, r5, r2, lsl #2
    d234:	e582401c 	str	r4, [r2, #28]
    d238:	03a02000 	moveq	r2, #0
    d23c:	01a03002 	moveq	r3, r2
    d240:	058520e4 	streq	r2, [r5, #228]	; 0xe4
    d244:	e59520e8 	ldr	r2, [r5, #232]	; 0xe8
    d248:	158530e4 	strne	r3, [r5, #228]	; 0xe4
    d24c:	e1520003 	cmp	r2, r3
    d250:	0a00001e 	beq	d2d0 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x138>
    d254:	e3500000 	cmp	r0, #0
    d258:	13a04000 	movne	r4, #0
    d25c:	0a000005 	beq	d278 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xe0>
    d260:	eb00152c 	bl	12718 <LeaveCritical>
    d264:	e3540000 	cmp	r4, #0
    d268:	0a000002 	beq	d278 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xe0>
    d26c:	e1a00004 	mov	r0, r4
    d270:	e3a01f42 	mov	r1, #264	; 0x108
    d274:	eb001558 	bl	127dc <operator delete(void*, unsigned int)>
    d278:	e59530f0 	ldr	r3, [r5, #240]	; 0xf0
    d27c:	e3530000 	cmp	r3, #0
    d280:	0a000000 	beq	d288 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xf0>
    d284:	e12fff33 	blx	r3
    d288:	e28dd00c 	add	sp, sp, #12
    d28c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    d290:	e59d3004 	ldr	r3, [sp, #4]
    d294:	e59f105c 	ldr	r1, [pc, #92]	; d2f8 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x160>
    d298:	e59d2000 	ldr	r2, [sp]
    d29c:	e0831391 	umull	r1, r3, r1, r3
    d2a0:	e1a036a3 	lsr	r3, r3, #13
    d2a4:	e5950004 	ldr	r0, [r5, #4]
    d2a8:	e5843100 	str	r3, [r4, #256]	; 0x100
    d2ac:	e58420fc 	str	r2, [r4, #252]	; 0xfc
    d2b0:	eb000e89 	bl	10cdc <CTimer::GetTimeZone() const>
    d2b4:	e5840104 	str	r0, [r4, #260]	; 0x104
    d2b8:	e59500ec 	ldr	r0, [r5, #236]	; 0xec
    d2bc:	e3500000 	cmp	r0, #0
    d2c0:	0affffd7 	beq	d224 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x8c>
    d2c4:	eb0014e6 	bl	12664 <EnterCritical>
    d2c8:	e59500ec 	ldr	r0, [r5, #236]	; 0xec
    d2cc:	eaffffd4 	b	d224 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x8c>
    d2d0:	e2832001 	add	r2, r3, #1
    d2d4:	e3520032 	cmp	r2, #50	; 0x32
    d2d8:	e0853103 	add	r3, r5, r3, lsl #2
    d2dc:	e593401c 	ldr	r4, [r3, #28]
    d2e0:	03a03000 	moveq	r3, #0
    d2e4:	158520e8 	strne	r2, [r5, #232]	; 0xe8
    d2e8:	058530e8 	streq	r3, [r5, #232]	; 0xe8
    d2ec:	e3500000 	cmp	r0, #0
    d2f0:	0affffdb 	beq	d264 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xcc>
    d2f4:	eaffffd9 	b	d260 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xc8>
    d2f8:	d1b71759 	.word	0xd1b71759

0000d2fc <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)>:
    d2fc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d300:	e1a04000 	mov	r4, r0
    d304:	e59000ec 	ldr	r0, [r0, #236]	; 0xec
    d308:	e1a07001 	mov	r7, r1
    d30c:	e3500000 	cmp	r0, #0
    d310:	e1a08002 	mov	r8, r2
    d314:	e1a06003 	mov	r6, r3
    d318:	1a000022 	bne	d3a8 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xac>
    d31c:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
    d320:	e59420e4 	ldr	r2, [r4, #228]	; 0xe4
    d324:	e1530002 	cmp	r3, r2
    d328:	0a000028 	beq	d3d0 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xd4>
    d32c:	e283c001 	add	ip, r3, #1
    d330:	e35c0032 	cmp	ip, #50	; 0x32
    d334:	e0843103 	add	r3, r4, r3, lsl #2
    d338:	e593501c 	ldr	r5, [r3, #28]
    d33c:	03a03000 	moveq	r3, #0
    d340:	1584c0e8 	strne	ip, [r4, #232]	; 0xe8
    d344:	058430e8 	streq	r3, [r4, #232]	; 0xe8
    d348:	e3500000 	cmp	r0, #0
    d34c:	1a000021 	bne	d3d8 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xdc>
    d350:	e1a01005 	mov	r1, r5
    d354:	e4d12001 	ldrb	r2, [r1], #1
    d358:	e1a00008 	mov	r0, r8
    d35c:	e5c72000 	strb	r2, [r7]
    d360:	eb0011f9 	bl	11b4c <strcpy>
    d364:	e2851033 	add	r1, r5, #51	; 0x33
    d368:	e1a00006 	mov	r0, r6
    d36c:	eb0011f6 	bl	11b4c <strcpy>
    d370:	e59520fc 	ldr	r2, [r5, #252]	; 0xfc
    d374:	e59d1018 	ldr	r1, [sp, #24]
    d378:	e5953100 	ldr	r3, [r5, #256]	; 0x100
    d37c:	e5812000 	str	r2, [r1]
    d380:	e59d201c 	ldr	r2, [sp, #28]
    d384:	e1a00005 	mov	r0, r5
    d388:	e5823000 	str	r3, [r2]
    d38c:	e5953104 	ldr	r3, [r5, #260]	; 0x104
    d390:	e59d2020 	ldr	r2, [sp, #32]
    d394:	e3a01f42 	mov	r1, #264	; 0x108
    d398:	e5823000 	str	r3, [r2]
    d39c:	eb00150e 	bl	127dc <operator delete(void*, unsigned int)>
    d3a0:	e3a00001 	mov	r0, #1
    d3a4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    d3a8:	eb0014ad 	bl	12664 <EnterCritical>
    d3ac:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
    d3b0:	e59420e4 	ldr	r2, [r4, #228]	; 0xe4
    d3b4:	e1520003 	cmp	r2, r3
    d3b8:	159400ec 	ldrne	r0, [r4, #236]	; 0xec
    d3bc:	1affffda 	bne	d32c <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x30>
    d3c0:	e59430ec 	ldr	r3, [r4, #236]	; 0xec
    d3c4:	e3530000 	cmp	r3, #0
    d3c8:	0a000000 	beq	d3d0 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xd4>
    d3cc:	eb0014d1 	bl	12718 <LeaveCritical>
    d3d0:	e3a00000 	mov	r0, #0
    d3d4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    d3d8:	eb0014ce 	bl	12718 <LeaveCritical>
    d3dc:	eaffffdb 	b	d350 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x54>

0000d3e0 <CLogger::RegisterEventNotificationHandler(void (*)())>:
    d3e0:	e58010f0 	str	r1, [r0, #240]	; 0xf0
    d3e4:	e12fff1e 	bx	lr

0000d3e8 <CLogger::RegisterPanicHandler(void (*)())>:
    d3e8:	e58010f4 	str	r1, [r0, #244]	; 0xf4
    d3ec:	e12fff1e 	bx	lr

0000d3f0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>:
    d3f0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    d3f4:	e1a07003 	mov	r7, r3
    d3f8:	e24dd024 	sub	sp, sp, #36	; 0x24
    d3fc:	e1a04000 	mov	r4, r0
    d400:	e1a0000d 	mov	r0, sp
    d404:	e1a05002 	mov	r5, r2
    d408:	e1a06001 	mov	r6, r1
    d40c:	eb00098a 	bl	fa3c <CString::CString()>
    d410:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
    d414:	e1a01007 	mov	r1, r7
    d418:	e1a0000d 	mov	r0, sp
    d41c:	eb000b53 	bl	10170 <CString::FormatV(char const*, std::__va_list)>
    d420:	e1a0000d 	mov	r0, sp
    d424:	eb00099a 	bl	fa94 <CString::operator char const*() const>
    d428:	e1a02005 	mov	r2, r5
    d42c:	e1a03000 	mov	r3, r0
    d430:	e1a01006 	mov	r1, r6
    d434:	e1a00004 	mov	r0, r4
    d438:	ebffff56 	bl	d198 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>
    d43c:	e5943000 	ldr	r3, [r4]
    d440:	e1550003 	cmp	r5, r3
    d444:	8a00002c 	bhi	d4fc <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x10c>
    d448:	e28d0010 	add	r0, sp, #16
    d44c:	eb00097a 	bl	fa3c <CString::CString()>
    d450:	e3550000 	cmp	r5, #0
    d454:	0a00002c 	beq	d50c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x11c>
    d458:	e5940004 	ldr	r0, [r4, #4]
    d45c:	e3500000 	cmp	r0, #0
    d460:	0a00004a 	beq	d590 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1a0>
    d464:	eb000ebb 	bl	10f58 <CTimer::GetTimeString()>
    d468:	e2507000 	subs	r7, r0, #0
    d46c:	0a000047 	beq	d590 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1a0>
    d470:	e1a00007 	mov	r0, r7
    d474:	eb000986 	bl	fa94 <CString::operator char const*() const>
    d478:	e1a01000 	mov	r1, r0
    d47c:	e28d0010 	add	r0, sp, #16
    d480:	eb0009b5 	bl	fb5c <CString::Append(char const*)>
    d484:	e59f1144 	ldr	r1, [pc, #324]	; d5d0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e0>
    d488:	e28d0010 	add	r0, sp, #16
    d48c:	eb0009b2 	bl	fb5c <CString::Append(char const*)>
    d490:	e5973000 	ldr	r3, [r7]
    d494:	e1a00007 	mov	r0, r7
    d498:	e5933004 	ldr	r3, [r3, #4]
    d49c:	e12fff33 	blx	r3
    d4a0:	e1a01006 	mov	r1, r6
    d4a4:	e28d0010 	add	r0, sp, #16
    d4a8:	eb0009ab 	bl	fb5c <CString::Append(char const*)>
    d4ac:	e59f1120 	ldr	r1, [pc, #288]	; d5d4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e4>
    d4b0:	e28d0010 	add	r0, sp, #16
    d4b4:	eb0009a8 	bl	fb5c <CString::Append(char const*)>
    d4b8:	e1a0000d 	mov	r0, sp
    d4bc:	eb000974 	bl	fa94 <CString::operator char const*() const>
    d4c0:	e1a01000 	mov	r1, r0
    d4c4:	e28d0010 	add	r0, sp, #16
    d4c8:	eb0009a3 	bl	fb5c <CString::Append(char const*)>
    d4cc:	e3550000 	cmp	r5, #0
    d4d0:	0a00001e 	beq	d550 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x160>
    d4d4:	e59f10fc 	ldr	r1, [pc, #252]	; d5d8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e8>
    d4d8:	e28d0010 	add	r0, sp, #16
    d4dc:	eb00099e 	bl	fb5c <CString::Append(char const*)>
    d4e0:	e28d0010 	add	r0, sp, #16
    d4e4:	eb00096a 	bl	fa94 <CString::operator char const*() const>
    d4e8:	e1a01000 	mov	r1, r0
    d4ec:	e1a00004 	mov	r0, r4
    d4f0:	ebfffe96 	bl	cf50 <CLogger::Write(char const*)>
    d4f4:	e28d0010 	add	r0, sp, #16
    d4f8:	eb00091c 	bl	f970 <CString::~CString()>
    d4fc:	e1a0000d 	mov	r0, sp
    d500:	eb00091a 	bl	f970 <CString::~CString()>
    d504:	e28dd024 	add	sp, sp, #36	; 0x24
    d508:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    d50c:	e59f10c8 	ldr	r1, [pc, #200]	; d5dc <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1ec>
    d510:	e28d0010 	add	r0, sp, #16
    d514:	eb000964 	bl	faac <CString::operator=(char const*)>
    d518:	e5940004 	ldr	r0, [r4, #4]
    d51c:	e3500000 	cmp	r0, #0
    d520:	1a000026 	bne	d5c0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1d0>
    d524:	e1a01006 	mov	r1, r6
    d528:	e28d0010 	add	r0, sp, #16
    d52c:	eb00098a 	bl	fb5c <CString::Append(char const*)>
    d530:	e59f109c 	ldr	r1, [pc, #156]	; d5d4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e4>
    d534:	e28d0010 	add	r0, sp, #16
    d538:	eb000987 	bl	fb5c <CString::Append(char const*)>
    d53c:	e1a0000d 	mov	r0, sp
    d540:	eb000953 	bl	fa94 <CString::operator char const*() const>
    d544:	e1a01000 	mov	r1, r0
    d548:	e28d0010 	add	r0, sp, #16
    d54c:	eb000982 	bl	fb5c <CString::Append(char const*)>
    d550:	e59f1088 	ldr	r1, [pc, #136]	; d5e0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1f0>
    d554:	e28d0010 	add	r0, sp, #16
    d558:	eb00097f 	bl	fb5c <CString::Append(char const*)>
    d55c:	e59f1074 	ldr	r1, [pc, #116]	; d5d8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e8>
    d560:	e28d0010 	add	r0, sp, #16
    d564:	eb00097c 	bl	fb5c <CString::Append(char const*)>
    d568:	e28d0010 	add	r0, sp, #16
    d56c:	eb000948 	bl	fa94 <CString::operator char const*() const>
    d570:	e1a01000 	mov	r1, r0
    d574:	e1a00004 	mov	r0, r4
    d578:	ebfffe74 	bl	cf50 <CLogger::Write(char const*)>
    d57c:	e59430f4 	ldr	r3, [r4, #244]	; 0xf4
    d580:	e3530000 	cmp	r3, #0
    d584:	0a000000 	beq	d58c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x19c>
    d588:	e12fff33 	blx	r3
    d58c:	eb000d25 	bl	10a28 <halt>
    d590:	e1a01006 	mov	r1, r6
    d594:	e28d0010 	add	r0, sp, #16
    d598:	eb00096f 	bl	fb5c <CString::Append(char const*)>
    d59c:	e59f1030 	ldr	r1, [pc, #48]	; d5d4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e4>
    d5a0:	e28d0010 	add	r0, sp, #16
    d5a4:	eb00096c 	bl	fb5c <CString::Append(char const*)>
    d5a8:	e1a0000d 	mov	r0, sp
    d5ac:	eb000938 	bl	fa94 <CString::operator char const*() const>
    d5b0:	e1a01000 	mov	r1, r0
    d5b4:	e28d0010 	add	r0, sp, #16
    d5b8:	eb000967 	bl	fb5c <CString::Append(char const*)>
    d5bc:	eaffffc4 	b	d4d4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xe4>
    d5c0:	eb000e64 	bl	10f58 <CTimer::GetTimeString()>
    d5c4:	e2507000 	subs	r7, r0, #0
    d5c8:	1affffa8 	bne	d470 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x80>
    d5cc:	eaffffd4 	b	d524 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x134>
    d5d0:	00014cf0 	.word	0x00014cf0
    d5d4:	00014ce4 	.word	0x00014ce4
    d5d8:	00013fd8 	.word	0x00013fd8
    d5dc:	00014cdc 	.word	0x00014cdc
    d5e0:	00014ce8 	.word	0x00014ce8

0000d5e4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>:
    d5e4:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)
    d5e8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    d5ec:	e24dd010 	sub	sp, sp, #16
    d5f0:	e28dc018 	add	ip, sp, #24
    d5f4:	e58dc000 	str	ip, [sp]
    d5f8:	e59d3014 	ldr	r3, [sp, #20]
    d5fc:	e58dc00c 	str	ip, [sp, #12]
    d600:	ebffff7a 	bl	d3f0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
    d604:	e28dd010 	add	sp, sp, #16
    d608:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    d60c:	e28dd004 	add	sp, sp, #4
    d610:	e12fff1e 	bx	lr

0000d614 <CLogger::Initialize(CDevice*)>:
    d614:	e92d4010 	push	{r4, lr}
    d618:	e5801008 	str	r1, [r0, #8]
    d61c:	e24dd008 	sub	sp, sp, #8
    d620:	e1a04000 	mov	r4, r0
    d624:	eb000102 	bl	da34 <CMachineInfo::Get()>
    d628:	eb00008b 	bl	d85c <CMachineInfo::GetMachineName() const>
    d62c:	e59f301c 	ldr	r3, [pc, #28]	; d650 <CLogger::Initialize(CDevice*)+0x3c>
    d630:	e58d0000 	str	r0, [sp]
    d634:	e3a02003 	mov	r2, #3
    d638:	e1a00004 	mov	r0, r4
    d63c:	e59f1010 	ldr	r1, [pc, #16]	; d654 <CLogger::Initialize(CDevice*)+0x40>
    d640:	ebffffe7 	bl	d5e4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    d644:	e3a00001 	mov	r0, #1
    d648:	e28dd008 	add	sp, sp, #8
    d64c:	e8bd8010 	pop	{r4, pc}
    d650:	00014cf4 	.word	0x00014cf4
    d654:	00014d0c 	.word	0x00014d0c

0000d658 <CMachineInfo::CMachineInfo()>:
    d658:	e3a03000 	mov	r3, #0
    d65c:	e92d4030 	push	{r4, r5, lr}
    d660:	e3a01003 	mov	r1, #3
    d664:	e1a04000 	mov	r4, r0
    d668:	e3a0000e 	mov	r0, #14
    d66c:	e59f21a8 	ldr	r2, [pc, #424]	; d81c <CMachineInfo::CMachineInfo()+0x1c4>
    d670:	e24dd024 	sub	sp, sp, #36	; 0x24
    d674:	e5925000 	ldr	r5, [r2]
    d678:	e5c40004 	strb	r0, [r4, #4]
    d67c:	e1550003 	cmp	r5, r3
    d680:	e5c41010 	strb	r1, [r4, #16]
    d684:	e5843000 	str	r3, [r4]
    d688:	e5843008 	str	r3, [r4, #8]
    d68c:	e584300c 	str	r3, [r4, #12]
    d690:	e5843014 	str	r3, [r4, #20]
    d694:	0a00000e 	beq	d6d4 <CMachineInfo::CMachineInfo()+0x7c>
    d698:	e595e000 	ldr	lr, [r5]
    d69c:	e5d5c004 	ldrb	ip, [r5, #4]
    d6a0:	e5950008 	ldr	r0, [r5, #8]
    d6a4:	e595100c 	ldr	r1, [r5, #12]
    d6a8:	e5d52010 	ldrb	r2, [r5, #16]
    d6ac:	e5953014 	ldr	r3, [r5, #20]
    d6b0:	e584e000 	str	lr, [r4]
    d6b4:	e5c4c004 	strb	ip, [r4, #4]
    d6b8:	e5840008 	str	r0, [r4, #8]
    d6bc:	e584100c 	str	r1, [r4, #12]
    d6c0:	e5c42010 	strb	r2, [r4, #16]
    d6c4:	e5843014 	str	r3, [r4, #20]
    d6c8:	e1a00004 	mov	r0, r4
    d6cc:	e28dd024 	add	sp, sp, #36	; 0x24
    d6d0:	e8bd8030 	pop	{r4, r5, pc}
    d6d4:	e28d000c 	add	r0, sp, #12
    d6d8:	e5824000 	str	r4, [r2]
    d6dc:	ebfff512 	bl	ab2c <CBcmPropertyTags::CBcmPropertyTags()>
    d6e0:	e3a03010 	mov	r3, #16
    d6e4:	e58d5000 	str	r5, [sp]
    d6e8:	e28d000c 	add	r0, sp, #12
    d6ec:	e08d2003 	add	r2, sp, r3
    d6f0:	e59f1128 	ldr	r1, [pc, #296]	; d820 <CMachineInfo::CMachineInfo()+0x1c8>
    d6f4:	ebfff563 	bl	ac88 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    d6f8:	e3500000 	cmp	r0, #0
    d6fc:	0a00000c 	beq	d734 <CMachineInfo::CMachineInfo()+0xdc>
    d700:	e59d101c 	ldr	r1, [sp, #28]
    d704:	e2113502 	ands	r3, r1, #8388608	; 0x800000
    d708:	e5841000 	str	r1, [r4]
    d70c:	1a00000b 	bne	d740 <CMachineInfo::CMachineInfo()+0xe8>
    d710:	e3a02002 	mov	r2, #2
    d714:	e59f0108 	ldr	r0, [pc, #264]	; d824 <CMachineInfo::CMachineInfo()+0x1cc>
    d718:	ea000000 	b	d720 <CMachineInfo::CMachineInfo()+0xc8>
    d71c:	e7902203 	ldr	r2, [r0, r3, lsl #4]
    d720:	e1510002 	cmp	r1, r2
    d724:	0a000012 	beq	d774 <CMachineInfo::CMachineInfo()+0x11c>
    d728:	e2833001 	add	r3, r3, #1
    d72c:	e3530011 	cmp	r3, #17
    d730:	1afffff9 	bne	d71c <CMachineInfo::CMachineInfo()+0xc4>
    d734:	e28d000c 	add	r0, sp, #12
    d738:	ebfff501 	bl	ab44 <CBcmPropertyTags::~CBcmPropertyTags()>
    d73c:	eaffffe1 	b	d6c8 <CMachineInfo::CMachineInfo()+0x70>
    d740:	e1a00221 	lsr	r0, r1, #4
    d744:	e1a03005 	mov	r3, r5
    d748:	e59f20d8 	ldr	r2, [pc, #216]	; d828 <CMachineInfo::CMachineInfo()+0x1d0>
    d74c:	e6ef0070 	uxtb	r0, r0
    d750:	ea000000 	b	d758 <CMachineInfo::CMachineInfo()+0x100>
    d754:	e512500c 	ldr	r5, [r2, #-12]
    d758:	e1550000 	cmp	r5, r0
    d75c:	0a000011 	beq	d7a8 <CMachineInfo::CMachineInfo()+0x150>
    d760:	e2833001 	add	r3, r3, #1
    d764:	e353000c 	cmp	r3, #12
    d768:	e282200c 	add	r2, r2, #12
    d76c:	1afffff8 	bne	d754 <CMachineInfo::CMachineInfo()+0xfc>
    d770:	eaffffef 	b	d734 <CMachineInfo::CMachineInfo()+0xdc>
    d774:	e3a00001 	mov	r0, #1
    d778:	e3a01000 	mov	r1, #0
    d77c:	e59f20a8 	ldr	r2, [pc, #168]	; d82c <CMachineInfo::CMachineInfo()+0x1d4>
    d780:	e5840008 	str	r0, [r4, #8]
    d784:	e0823203 	add	r3, r2, r3, lsl #4
    d788:	e5d30094 	ldrb	r0, [r3, #148]	; 0x94
    d78c:	e5932098 	ldr	r2, [r3, #152]	; 0x98
    d790:	e593309c 	ldr	r3, [r3, #156]	; 0x9c
    d794:	e5c40004 	strb	r0, [r4, #4]
    d798:	e584200c 	str	r2, [r4, #12]
    d79c:	e5843014 	str	r3, [r4, #20]
    d7a0:	e5c41010 	strb	r1, [r4, #16]
    d7a4:	eaffffe2 	b	d734 <CMachineInfo::CMachineInfo()+0xdc>
    d7a8:	e3a0cc01 	mov	ip, #256	; 0x100
    d7ac:	e59f2078 	ldr	r2, [pc, #120]	; d82c <CMachineInfo::CMachineInfo()+0x1d4>
    d7b0:	e0833083 	add	r3, r3, r3, lsl #1
    d7b4:	e0823103 	add	r3, r2, r3, lsl #2
    d7b8:	e1a00621 	lsr	r0, r1, #12
    d7bc:	e1a02a21 	lsr	r2, r1, #20
    d7c0:	e2022007 	and	r2, r2, #7
    d7c4:	e200000f 	and	r0, r0, #15
    d7c8:	e5d3e004 	ldrb	lr, [r3, #4]
    d7cc:	e3500002 	cmp	r0, #2
    d7d0:	e5935008 	ldr	r5, [r3, #8]
    d7d4:	e201300f 	and	r3, r1, #15
    d7d8:	e1a0121c 	lsl	r1, ip, r2
    d7dc:	e5841014 	str	r1, [r4, #20]
    d7e0:	83a01003 	movhi	r1, #3
    d7e4:	e5c40010 	strb	r0, [r4, #16]
    d7e8:	85c41010 	strbhi	r1, [r4, #16]
    d7ec:	e3520000 	cmp	r2, #0
    d7f0:	035e0003 	cmpeq	lr, #3
    d7f4:	e2833001 	add	r3, r3, #1
    d7f8:	e5c4e004 	strb	lr, [r4, #4]
    d7fc:	e5845008 	str	r5, [r4, #8]
    d800:	e584300c 	str	r3, [r4, #12]
    d804:	1affffca 	bne	d734 <CMachineInfo::CMachineInfo()+0xdc>
    d808:	e3530001 	cmp	r3, #1
    d80c:	13a03002 	movne	r3, #2
    d810:	03a03001 	moveq	r3, #1
    d814:	e5c43004 	strb	r3, [r4, #4]
    d818:	eaffffc5 	b	d734 <CMachineInfo::CMachineInfo()+0xdc>
    d81c:	0001669c 	.word	0x0001669c
    d820:	00010002 	.word	0x00010002
    d824:	00014da4 	.word	0x00014da4
    d828:	00014d20 	.word	0x00014d20
    d82c:	00014d14 	.word	0x00014d14

0000d830 <CMachineInfo::~CMachineInfo()>:
    d830:	e3a0200e 	mov	r2, #14
    d834:	e59f3014 	ldr	r3, [pc, #20]	; d850 <CMachineInfo::~CMachineInfo()+0x20>
    d838:	e5c02004 	strb	r2, [r0, #4]
    d83c:	e5932000 	ldr	r2, [r3]
    d840:	e1500002 	cmp	r0, r2
    d844:	03a02000 	moveq	r2, #0
    d848:	05832000 	streq	r2, [r3]
    d84c:	e12fff1e 	bx	lr
    d850:	0001669c 	.word	0x0001669c

0000d854 <CMachineInfo::GetMachineModel() const>:
    d854:	e5d00004 	ldrb	r0, [r0, #4]
    d858:	e12fff1e 	bx	lr

0000d85c <CMachineInfo::GetMachineName() const>:
    d85c:	e5d02004 	ldrb	r2, [r0, #4]
    d860:	e59f3008 	ldr	r3, [pc, #8]	; d870 <CMachineInfo::GetMachineName() const+0x14>
    d864:	e0833102 	add	r3, r3, r2, lsl #2
    d868:	e59301a0 	ldr	r0, [r3, #416]	; 0x1a0
    d86c:	e12fff1e 	bx	lr
    d870:	00014d14 	.word	0x00014d14

0000d874 <CMachineInfo::GetModelMajor() const>:
    d874:	e5900008 	ldr	r0, [r0, #8]
    d878:	e12fff1e 	bx	lr

0000d87c <CMachineInfo::GetModelRevision() const>:
    d87c:	e590000c 	ldr	r0, [r0, #12]
    d880:	e12fff1e 	bx	lr

0000d884 <CMachineInfo::GetSoCType() const>:
    d884:	e5d00010 	ldrb	r0, [r0, #16]
    d888:	e12fff1e 	bx	lr

0000d88c <CMachineInfo::GetRAMSize() const>:
    d88c:	e5900014 	ldr	r0, [r0, #20]
    d890:	e12fff1e 	bx	lr

0000d894 <CMachineInfo::GetSoCName() const>:
    d894:	e5d02010 	ldrb	r2, [r0, #16]
    d898:	e59f3008 	ldr	r3, [pc, #8]	; d8a8 <CMachineInfo::GetSoCName() const+0x14>
    d89c:	e0833102 	add	r3, r3, r2, lsl #2
    d8a0:	e59301dc 	ldr	r0, [r3, #476]	; 0x1dc
    d8a4:	e12fff1e 	bx	lr
    d8a8:	00014d14 	.word	0x00014d14

0000d8ac <CMachineInfo::GetRevisionRaw() const>:
    d8ac:	e5900000 	ldr	r0, [r0]
    d8b0:	e12fff1e 	bx	lr

0000d8b4 <CMachineInfo::GetClockRate(unsigned int) const>:
    d8b4:	e92d4070 	push	{r4, r5, r6, lr}
    d8b8:	e24dd020 	sub	sp, sp, #32
    d8bc:	e1a06000 	mov	r6, r0
    d8c0:	e28d0008 	add	r0, sp, #8
    d8c4:	e1a05001 	mov	r5, r1
    d8c8:	ebfff497 	bl	ab2c <CBcmPropertyTags::CBcmPropertyTags()>
    d8cc:	e3a03004 	mov	r3, #4
    d8d0:	e28d0008 	add	r0, sp, #8
    d8d4:	e58d3000 	str	r3, [sp]
    d8d8:	e28d200c 	add	r2, sp, #12
    d8dc:	e3a03014 	mov	r3, #20
    d8e0:	e59f1078 	ldr	r1, [pc, #120]	; d960 <CMachineInfo::GetClockRate(unsigned int) const+0xac>
    d8e4:	e58d5018 	str	r5, [sp, #24]
    d8e8:	ebfff4e6 	bl	ac88 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    d8ec:	e2504000 	subs	r4, r0, #0
    d8f0:	1a00000e 	bne	d930 <CMachineInfo::GetClockRate(unsigned int) const+0x7c>
    d8f4:	e3550002 	cmp	r5, #2
    d8f8:	0a00000e 	beq	d938 <CMachineInfo::GetClockRate(unsigned int) const+0x84>
    d8fc:	e3550004 	cmp	r5, #4
    d900:	0a000010 	beq	d948 <CMachineInfo::GetClockRate(unsigned int) const+0x94>
    d904:	e3550001 	cmp	r5, #1
    d908:	0a00000c 	beq	d940 <CMachineInfo::GetClockRate(unsigned int) const+0x8c>
    d90c:	e59f2050 	ldr	r2, [pc, #80]	; d964 <CMachineInfo::GetClockRate(unsigned int) const+0xb0>
    d910:	e59f1050 	ldr	r1, [pc, #80]	; d968 <CMachineInfo::GetClockRate(unsigned int) const+0xb4>
    d914:	e59f0050 	ldr	r0, [pc, #80]	; d96c <CMachineInfo::GetClockRate(unsigned int) const+0xb8>
    d918:	ebfff45f 	bl	aa9c <assertion_failed>
    d91c:	e28d0008 	add	r0, sp, #8
    d920:	ebfff487 	bl	ab44 <CBcmPropertyTags::~CBcmPropertyTags()>
    d924:	e1a00004 	mov	r0, r4
    d928:	e28dd020 	add	sp, sp, #32
    d92c:	e8bd8070 	pop	{r4, r5, r6, pc}
    d930:	e59d401c 	ldr	r4, [sp, #28]
    d934:	eafffff8 	b	d91c <CMachineInfo::GetClockRate(unsigned int) const+0x68>
    d938:	e59f4030 	ldr	r4, [pc, #48]	; d970 <CMachineInfo::GetClockRate(unsigned int) const+0xbc>
    d93c:	eafffff6 	b	d91c <CMachineInfo::GetClockRate(unsigned int) const+0x68>
    d940:	e59f402c 	ldr	r4, [pc, #44]	; d974 <CMachineInfo::GetClockRate(unsigned int) const+0xc0>
    d944:	eafffff4 	b	d91c <CMachineInfo::GetClockRate(unsigned int) const+0x68>
    d948:	e5962008 	ldr	r2, [r6, #8]
    d94c:	e59f3024 	ldr	r3, [pc, #36]	; d978 <CMachineInfo::GetClockRate(unsigned int) const+0xc4>
    d950:	e3520002 	cmp	r2, #2
    d954:	e59f4020 	ldr	r4, [pc, #32]	; d97c <CMachineInfo::GetClockRate(unsigned int) const+0xc8>
    d958:	81a04003 	movhi	r4, r3
    d95c:	eaffffee 	b	d91c <CMachineInfo::GetClockRate(unsigned int) const+0x68>
    d960:	00030002 	.word	0x00030002
    d964:	00000115 	.word	0x00000115
    d968:	00014f00 	.word	0x00014f00
    d96c:	00014c20 	.word	0x00014c20
    d970:	02dc6c00 	.word	0x02dc6c00
    d974:	05f5e100 	.word	0x05f5e100
    d978:	11e1a300 	.word	0x11e1a300
    d97c:	0ee6b280 	.word	0x0ee6b280

0000d980 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>:
    d980:	e3510036 	cmp	r1, #54	; 0x36
    d984:	0a00000d 	beq	d9c0 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x40>
    d988:	e3510037 	cmp	r1, #55	; 0x37
    d98c:	1a000004 	bne	d9a4 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x24>
    d990:	e5d00004 	ldrb	r0, [r0, #4]
    d994:	e3500003 	cmp	r0, #3
    d998:	c3a00028 	movgt	r0, #40	; 0x28
    d99c:	d3a0002d 	movle	r0, #45	; 0x2d
    d9a0:	e12fff1e 	bx	lr
    d9a4:	e92d4010 	push	{r4, lr}
    d9a8:	e59f2038 	ldr	r2, [pc, #56]	; d9e8 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x68>
    d9ac:	e59f1038 	ldr	r1, [pc, #56]	; d9ec <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x6c>
    d9b0:	e59f0038 	ldr	r0, [pc, #56]	; d9f0 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x70>
    d9b4:	ebfff438 	bl	aa9c <assertion_failed>
    d9b8:	e3a00000 	mov	r0, #0
    d9bc:	e8bd8010 	pop	{r4, pc}
    d9c0:	e5d03004 	ldrb	r3, [r0, #4]
    d9c4:	e3530003 	cmp	r3, #3
    d9c8:	ca000001 	bgt	d9d4 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x54>
    d9cc:	e3a00028 	mov	r0, #40	; 0x28
    d9d0:	e12fff1e 	bx	lr
    d9d4:	e5900008 	ldr	r0, [r0, #8]
    d9d8:	e3500002 	cmp	r0, #2
    d9dc:	93a0002d 	movls	r0, #45	; 0x2d
    d9e0:	83a00029 	movhi	r0, #41	; 0x29
    d9e4:	e12fff1e 	bx	lr
    d9e8:	0000014e 	.word	0x0000014e
    d9ec:	00014f00 	.word	0x00014f00
    d9f0:	00014c20 	.word	0x00014c20

0000d9f4 <CMachineInfo::GetDevice(TDeviceId) const>:
    d9f4:	e3510000 	cmp	r1, #0
    d9f8:	1a000003 	bne	da0c <CMachineInfo::GetDevice(TDeviceId) const+0x18>
    d9fc:	e5d00004 	ldrb	r0, [r0, #4]
    da00:	e2500001 	subs	r0, r0, #1
    da04:	13a00001 	movne	r0, #1
    da08:	e12fff1e 	bx	lr
    da0c:	e92d4010 	push	{r4, lr}
    da10:	e59f2010 	ldr	r2, [pc, #16]	; da28 <CMachineInfo::GetDevice(TDeviceId) const+0x34>
    da14:	e59f1010 	ldr	r1, [pc, #16]	; da2c <CMachineInfo::GetDevice(TDeviceId) const+0x38>
    da18:	e59f0010 	ldr	r0, [pc, #16]	; da30 <CMachineInfo::GetDevice(TDeviceId) const+0x3c>
    da1c:	ebfff41e 	bl	aa9c <assertion_failed>
    da20:	e3a00000 	mov	r0, #0
    da24:	e8bd8010 	pop	{r4, pc}
    da28:	00000167 	.word	0x00000167
    da2c:	00014f00 	.word	0x00014f00
    da30:	00014c20 	.word	0x00014c20

0000da34 <CMachineInfo::Get()>:
    da34:	e92d4010 	push	{r4, lr}
    da38:	e59f4020 	ldr	r4, [pc, #32]	; da60 <CMachineInfo::Get()+0x2c>
    da3c:	e5940000 	ldr	r0, [r4]
    da40:	e3500000 	cmp	r0, #0
    da44:	18bd8010 	popne	{r4, pc}
    da48:	e3a02e17 	mov	r2, #368	; 0x170
    da4c:	e59f1010 	ldr	r1, [pc, #16]	; da64 <CMachineInfo::Get()+0x30>
    da50:	e59f0010 	ldr	r0, [pc, #16]	; da68 <CMachineInfo::Get()+0x34>
    da54:	ebfff410 	bl	aa9c <assertion_failed>
    da58:	e5940000 	ldr	r0, [r4]
    da5c:	e8bd8010 	pop	{r4, pc}
    da60:	0001669c 	.word	0x0001669c
    da64:	00014f00 	.word	0x00014f00
    da68:	00014c50 	.word	0x00014c50

0000da6c <CScreenDevice::~CScreenDevice()>:
    da6c:	e5d0200c 	ldrb	r2, [r0, #12]
    da70:	e59f3068 	ldr	r3, [pc, #104]	; dae0 <CScreenDevice::~CScreenDevice()+0x74>
    da74:	e3520000 	cmp	r2, #0
    da78:	e92d4070 	push	{r4, r5, r6, lr}
    da7c:	e1a04000 	mov	r4, r0
    da80:	e5803000 	str	r3, [r0]
    da84:	0a000003 	beq	da98 <CScreenDevice::~CScreenDevice()+0x2c>
    da88:	e5900018 	ldr	r0, [r0, #24]
    da8c:	e3500000 	cmp	r0, #0
    da90:	0a000000 	beq	da98 <CScreenDevice::~CScreenDevice()+0x2c>
    da94:	eb00134f 	bl	127d8 <operator delete[](void*)>
    da98:	e3a03000 	mov	r3, #0
    da9c:	e5945010 	ldr	r5, [r4, #16]
    daa0:	e5843018 	str	r3, [r4, #24]
    daa4:	e1550003 	cmp	r5, r3
    daa8:	0a000004 	beq	dac0 <CScreenDevice::~CScreenDevice()+0x54>
    daac:	e1a00005 	mov	r0, r5
    dab0:	eb001550 	bl	12ff8 <CBcmFrameBuffer::~CBcmFrameBuffer()>
    dab4:	e1a00005 	mov	r0, r5
    dab8:	e3a01094 	mov	r1, #148	; 0x94
    dabc:	eb001346 	bl	127dc <operator delete(void*, unsigned int)>
    dac0:	e3a03000 	mov	r3, #0
    dac4:	e2840014 	add	r0, r4, #20
    dac8:	e5843010 	str	r3, [r4, #16]
    dacc:	eb001651 	bl	13418 <CCharGenerator::~CCharGenerator()>
    dad0:	e1a00004 	mov	r0, r4
    dad4:	ebfff522 	bl	af64 <CDevice::~CDevice()>
    dad8:	e1a00004 	mov	r0, r4
    dadc:	e8bd8070 	pop	{r4, r5, r6, pc}
    dae0:	00015054 	.word	0x00015054

0000dae4 <CScreenDevice::~CScreenDevice()>:
    dae4:	e92d4010 	push	{r4, lr}
    dae8:	e1a04000 	mov	r4, r0
    daec:	ebffffde 	bl	da6c <CScreenDevice::~CScreenDevice()>
    daf0:	e1a00004 	mov	r0, r4
    daf4:	e3a0105c 	mov	r1, #92	; 0x5c
    daf8:	eb001337 	bl	127dc <operator delete(void*, unsigned int)>
    dafc:	e1a00004 	mov	r0, r4
    db00:	e8bd8010 	pop	{r4, pc}

0000db04 <CScreenDevice::InvertCursor() [clone .part.6]>:
    db04:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    db08:	e2806014 	add	r6, r0, #20
    db0c:	e1a05000 	mov	r5, r0
    db10:	e1a00006 	mov	r0, r6
    db14:	eb001644 	bl	1342c <CCharGenerator::GetUnderline() const>
    db18:	e3a08000 	mov	r8, #0
    db1c:	e1a07000 	mov	r7, r0
    db20:	e1a00006 	mov	r0, r6
    db24:	eb00163e 	bl	13424 <CCharGenerator::GetCharHeight() const>
    db28:	e1500007 	cmp	r0, r7
    db2c:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
    db30:	e3a04000 	mov	r4, #0
    db34:	ea000013 	b	db88 <CScreenDevice::InvertCursor() [clone .part.6]+0x84>
    db38:	e595303c 	ldr	r3, [r5, #60]	; 0x3c
    db3c:	e5952024 	ldr	r2, [r5, #36]	; 0x24
    db40:	e0843003 	add	r3, r4, r3
    db44:	e1530002 	cmp	r3, r2
    db48:	2a00000d 	bcs	db84 <CScreenDevice::InvertCursor() [clone .part.6]+0x80>
    db4c:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    db50:	e5951028 	ldr	r1, [r5, #40]	; 0x28
    db54:	e0872002 	add	r2, r7, r2
    db58:	e1520001 	cmp	r2, r1
    db5c:	2a000008 	bcs	db84 <CScreenDevice::InvertCursor() [clone .part.6]+0x80>
    db60:	e5950020 	ldr	r0, [r5, #32]
    db64:	e5951018 	ldr	r1, [r5, #24]
    db68:	e0233290 	mla	r3, r0, r2, r3
    db6c:	e1a03083 	lsl	r3, r3, #1
    db70:	e19120b3 	ldrh	r2, [r1, r3]
    db74:	e3520000 	cmp	r2, #0
    db78:	01d524b6 	ldrheq	r2, [r5, #70]	; 0x46
    db7c:	118180b3 	strhne	r8, [r1, r3]
    db80:	018120b3 	strheq	r2, [r1, r3]
    db84:	e2844001 	add	r4, r4, #1
    db88:	e1a00006 	mov	r0, r6
    db8c:	eb001622 	bl	1341c <CCharGenerator::GetCharWidth() const>
    db90:	e1500004 	cmp	r0, r4
    db94:	8affffe7 	bhi	db38 <CScreenDevice::InvertCursor() [clone .part.6]+0x34>
    db98:	e2877001 	add	r7, r7, #1
    db9c:	eaffffdf 	b	db20 <CScreenDevice::InvertCursor() [clone .part.6]+0x1c>

0000dba0 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool)>:
    dba0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    dba4:	e1a04000 	mov	r4, r0
    dba8:	e3a05000 	mov	r5, #0
    dbac:	e1a07002 	mov	r7, r2
    dbb0:	e1a06003 	mov	r6, r3
    dbb4:	e1a08001 	mov	r8, r1
    dbb8:	ebfff4f5 	bl	af94 <CDevice::CDevice()>
    dbbc:	e59f0050 	ldr	r0, [pc, #80]	; dc14 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool)+0x74>
    dbc0:	e5848004 	str	r8, [r4, #4]
    dbc4:	e5840000 	str	r0, [r4]
    dbc8:	e5847008 	str	r7, [r4, #8]
    dbcc:	e5c4600c 	strb	r6, [r4, #12]
    dbd0:	e5845010 	str	r5, [r4, #16]
    dbd4:	e2840014 	add	r0, r4, #20
    dbd8:	eb00160b 	bl	1340c <CCharGenerator::CCharGenerator()>
    dbdc:	e3a03001 	mov	r3, #1
    dbe0:	e3e02020 	mvn	r2, #32
    dbe4:	e5845018 	str	r5, [r4, #24]
    dbe8:	e5845030 	str	r5, [r4, #48]	; 0x30
    dbec:	e5845034 	str	r5, [r4, #52]	; 0x34
    dbf0:	e584503c 	str	r5, [r4, #60]	; 0x3c
    dbf4:	e5845040 	str	r5, [r4, #64]	; 0x40
    dbf8:	e5c45048 	strb	r5, [r4, #72]	; 0x48
    dbfc:	e5c45054 	strb	r5, [r4, #84]	; 0x54
    dc00:	e1c424b6 	strh	r2, [r4, #70]	; 0x46
    dc04:	e5c43044 	strb	r3, [r4, #68]	; 0x44
    dc08:	e5843058 	str	r3, [r4, #88]	; 0x58
    dc0c:	e1a00004 	mov	r0, r4
    dc10:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    dc14:	00015054 	.word	0x00015054

0000dc18 <CScreenDevice::GetWidth() const>:
    dc18:	e5900024 	ldr	r0, [r0, #36]	; 0x24
    dc1c:	e12fff1e 	bx	lr

0000dc20 <CScreenDevice::GetHeight() const>:
    dc20:	e5900028 	ldr	r0, [r0, #40]	; 0x28
    dc24:	e12fff1e 	bx	lr

0000dc28 <CScreenDevice::GetColumns() const>:
    dc28:	e92d4010 	push	{r4, lr}
    dc2c:	e2800014 	add	r0, r0, #20
    dc30:	e5904010 	ldr	r4, [r0, #16]
    dc34:	eb0015f8 	bl	1341c <CCharGenerator::GetCharWidth() const>
    dc38:	e1a01000 	mov	r1, r0
    dc3c:	e1a00004 	mov	r0, r4
    dc40:	ebfff2be 	bl	a740 <__udivsi3>
    dc44:	e8bd8010 	pop	{r4, pc}

0000dc48 <CScreenDevice::GetRows() const>:
    dc48:	e92d4010 	push	{r4, lr}
    dc4c:	e2800014 	add	r0, r0, #20
    dc50:	e5904018 	ldr	r4, [r0, #24]
    dc54:	eb0015f2 	bl	13424 <CCharGenerator::GetCharHeight() const>
    dc58:	e1a01000 	mov	r1, r0
    dc5c:	e1a00004 	mov	r0, r4
    dc60:	ebfff2b6 	bl	a740 <__udivsi3>
    dc64:	e8bd8010 	pop	{r4, pc}

0000dc68 <CScreenDevice::GetStatus()>:
    dc68:	e591c018 	ldr	ip, [r1, #24]
    dc6c:	e591201c 	ldr	r2, [r1, #28]
    dc70:	e92d4070 	push	{r4, r5, r6, lr}
    dc74:	e580c000 	str	ip, [r0]
    dc78:	e5915030 	ldr	r5, [r1, #48]	; 0x30
    dc7c:	e5914034 	ldr	r4, [r1, #52]	; 0x34
    dc80:	e591e038 	ldr	lr, [r1, #56]	; 0x38
    dc84:	e591c03c 	ldr	ip, [r1, #60]	; 0x3c
    dc88:	e5802004 	str	r2, [r0, #4]
    dc8c:	e5912040 	ldr	r2, [r1, #64]	; 0x40
    dc90:	e5805008 	str	r5, [r0, #8]
    dc94:	e5d16044 	ldrb	r6, [r1, #68]	; 0x44
    dc98:	e580400c 	str	r4, [r0, #12]
    dc9c:	e1d154b6 	ldrh	r5, [r1, #70]	; 0x46
    dca0:	e580e010 	str	lr, [r0, #16]
    dca4:	e5d14048 	ldrb	r4, [r1, #72]	; 0x48
    dca8:	e580c014 	str	ip, [r0, #20]
    dcac:	e591e04c 	ldr	lr, [r1, #76]	; 0x4c
    dcb0:	e5802018 	str	r2, [r0, #24]
    dcb4:	e591c050 	ldr	ip, [r1, #80]	; 0x50
    dcb8:	e5d12054 	ldrb	r2, [r1, #84]	; 0x54
    dcbc:	e5c0601c 	strb	r6, [r0, #28]
    dcc0:	e1c051be 	strh	r5, [r0, #30]
    dcc4:	e5c04020 	strb	r4, [r0, #32]
    dcc8:	e580e024 	str	lr, [r0, #36]	; 0x24
    dccc:	e580c028 	str	ip, [r0, #40]	; 0x28
    dcd0:	e5c0202c 	strb	r2, [r0, #44]	; 0x2c
    dcd4:	e8bd8070 	pop	{r4, r5, r6, pc}

0000dcd8 <CScreenDevice::SetStatus(TScreenStatus const&)>:
    dcd8:	e590201c 	ldr	r2, [r0, #28]
    dcdc:	e5913004 	ldr	r3, [r1, #4]
    dce0:	e1520003 	cmp	r2, r3
    dce4:	0a000001 	beq	dcf0 <CScreenDevice::SetStatus(TScreenStatus const&)+0x18>
    dce8:	e3a00000 	mov	r0, #0
    dcec:	e12fff1e 	bx	lr
    dcf0:	e590c020 	ldr	ip, [r0, #32]
    dcf4:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    dcf8:	e15c0003 	cmp	ip, r3
    dcfc:	1afffff9 	bne	dce8 <CScreenDevice::SetStatus(TScreenStatus const&)+0x10>
    dd00:	e92d4070 	push	{r4, r5, r6, lr}
    dd04:	e1a04000 	mov	r4, r0
    dd08:	e5900058 	ldr	r0, [r0, #88]	; 0x58
    dd0c:	e1a05001 	mov	r5, r1
    dd10:	e3500000 	cmp	r0, #0
    dd14:	1a000023 	bne	dda8 <CScreenDevice::SetStatus(TScreenStatus const&)+0xd0>
    dd18:	e5d43054 	ldrb	r3, [r4, #84]	; 0x54
    dd1c:	e3530000 	cmp	r3, #0
    dd20:	1a000002 	bne	dd30 <CScreenDevice::SetStatus(TScreenStatus const&)+0x58>
    dd24:	e5d1302c 	ldrb	r3, [r1, #44]	; 0x2c
    dd28:	e3530000 	cmp	r3, #0
    dd2c:	0a000001 	beq	dd38 <CScreenDevice::SetStatus(TScreenStatus const&)+0x60>
    dd30:	e3a00000 	mov	r0, #0
    dd34:	e8bd8070 	pop	{r4, r5, r6, pc}
    dd38:	e5951000 	ldr	r1, [r5]
    dd3c:	e5940018 	ldr	r0, [r4, #24]
    dd40:	eb001055 	bl	11e9c <memcpy>
    dd44:	e5940058 	ldr	r0, [r4, #88]	; 0x58
    dd48:	e2851008 	add	r1, r5, #8
    dd4c:	e891004e 	ldm	r1, {r1, r2, r3, r6}
    dd50:	e595e018 	ldr	lr, [r5, #24]
    dd54:	e5d5c01c 	ldrb	ip, [r5, #28]
    dd58:	e3500000 	cmp	r0, #0
    dd5c:	e5841030 	str	r1, [r4, #48]	; 0x30
    dd60:	e1d501be 	ldrh	r0, [r5, #30]
    dd64:	e5d51020 	ldrb	r1, [r5, #32]
    dd68:	e5842034 	str	r2, [r4, #52]	; 0x34
    dd6c:	e5843038 	str	r3, [r4, #56]	; 0x38
    dd70:	e5952024 	ldr	r2, [r5, #36]	; 0x24
    dd74:	e5953028 	ldr	r3, [r5, #40]	; 0x28
    dd78:	e584603c 	str	r6, [r4, #60]	; 0x3c
    dd7c:	e584e040 	str	lr, [r4, #64]	; 0x40
    dd80:	e5c4c044 	strb	ip, [r4, #68]	; 0x44
    dd84:	e1c404b6 	strh	r0, [r4, #70]	; 0x46
    dd88:	e5c41048 	strb	r1, [r4, #72]	; 0x48
    dd8c:	e584204c 	str	r2, [r4, #76]	; 0x4c
    dd90:	e5843050 	str	r3, [r4, #80]	; 0x50
    dd94:	1a000010 	bne	dddc <CScreenDevice::SetStatus(TScreenStatus const&)+0x104>
    dd98:	e3a03000 	mov	r3, #0
    dd9c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    dda0:	e3a00001 	mov	r0, #1
    dda4:	e8bd8070 	pop	{r4, r5, r6, pc}
    dda8:	eb00122d 	bl	12664 <EnterCritical>
    ddac:	e5d43054 	ldrb	r3, [r4, #84]	; 0x54
    ddb0:	e3530000 	cmp	r3, #0
    ddb4:	1a000003 	bne	ddc8 <CScreenDevice::SetStatus(TScreenStatus const&)+0xf0>
    ddb8:	e5d5302c 	ldrb	r3, [r5, #44]	; 0x2c
    ddbc:	e3530000 	cmp	r3, #0
    ddc0:	0594201c 	ldreq	r2, [r4, #28]
    ddc4:	0affffdb 	beq	dd38 <CScreenDevice::SetStatus(TScreenStatus const&)+0x60>
    ddc8:	e5943058 	ldr	r3, [r4, #88]	; 0x58
    ddcc:	e3530000 	cmp	r3, #0
    ddd0:	0affffd6 	beq	dd30 <CScreenDevice::SetStatus(TScreenStatus const&)+0x58>
    ddd4:	eb00124f 	bl	12718 <LeaveCritical>
    ddd8:	eaffffd4 	b	dd30 <CScreenDevice::SetStatus(TScreenStatus const&)+0x58>
    dddc:	eb00124d 	bl	12718 <LeaveCritical>
    dde0:	eaffffec 	b	dd98 <CScreenDevice::SetStatus(TScreenStatus const&)+0xc0>

0000dde4 <CScreenDevice::CarriageReturn()>:
    dde4:	e3a03000 	mov	r3, #0
    dde8:	e580303c 	str	r3, [r0, #60]	; 0x3c
    ddec:	e12fff1e 	bx	lr

0000ddf0 <CScreenDevice::CursorHome()>:
    ddf0:	e3a02000 	mov	r2, #0
    ddf4:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    ddf8:	e580203c 	str	r2, [r0, #60]	; 0x3c
    ddfc:	e5803040 	str	r3, [r0, #64]	; 0x40
    de00:	e12fff1e 	bx	lr

0000de04 <CScreenDevice::CursorLeft()>:
    de04:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    de08:	e92d4070 	push	{r4, r5, r6, lr}
    de0c:	e3530000 	cmp	r3, #0
    de10:	e1a04000 	mov	r4, r0
    de14:	1a00000f 	bne	de58 <CScreenDevice::CursorLeft()+0x54>
    de18:	e5902040 	ldr	r2, [r0, #64]	; 0x40
    de1c:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    de20:	e1520003 	cmp	r2, r3
    de24:	98bd8070 	popls	{r4, r5, r6, pc}
    de28:	e2806014 	add	r6, r0, #20
    de2c:	e1a00006 	mov	r0, r6
    de30:	e5945024 	ldr	r5, [r4, #36]	; 0x24
    de34:	eb001578 	bl	1341c <CCharGenerator::GetCharWidth() const>
    de38:	e0450000 	sub	r0, r5, r0
    de3c:	e584003c 	str	r0, [r4, #60]	; 0x3c
    de40:	e1a00006 	mov	r0, r6
    de44:	eb001576 	bl	13424 <CCharGenerator::GetCharHeight() const>
    de48:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    de4c:	e0430000 	sub	r0, r3, r0
    de50:	e5840040 	str	r0, [r4, #64]	; 0x40
    de54:	e8bd8070 	pop	{r4, r5, r6, pc}
    de58:	e2800014 	add	r0, r0, #20
    de5c:	eb00156e 	bl	1341c <CCharGenerator::GetCharWidth() const>
    de60:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    de64:	e0430000 	sub	r0, r3, r0
    de68:	e584003c 	str	r0, [r4, #60]	; 0x3c
    de6c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000de70 <CScreenDevice::CursorMove(unsigned int, unsigned int)>:
    de70:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    de74:	e2806014 	add	r6, r0, #20
    de78:	e1a04002 	mov	r4, r2
    de7c:	e1a05000 	mov	r5, r0
    de80:	e1a00006 	mov	r0, r6
    de84:	e1a07001 	mov	r7, r1
    de88:	eb001563 	bl	1341c <CCharGenerator::GetCharWidth() const>
    de8c:	e2444001 	sub	r4, r4, #1
    de90:	e0040490 	mul	r4, r0, r4
    de94:	e1a00006 	mov	r0, r6
    de98:	eb001561 	bl	13424 <CCharGenerator::GetCharHeight() const>
    de9c:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    dea0:	e1540003 	cmp	r4, r3
    dea4:	28bd81f0 	popcs	{r4, r5, r6, r7, r8, pc}
    dea8:	e2477001 	sub	r7, r7, #1
    deac:	e0000790 	mul	r0, r0, r7
    deb0:	e5953034 	ldr	r3, [r5, #52]	; 0x34
    deb4:	e1500003 	cmp	r0, r3
    deb8:	38bd81f0 	popcc	{r4, r5, r6, r7, r8, pc}
    debc:	e5953038 	ldr	r3, [r5, #56]	; 0x38
    dec0:	e1500003 	cmp	r0, r3
    dec4:	3585403c 	strcc	r4, [r5, #60]	; 0x3c
    dec8:	35850040 	strcc	r0, [r5, #64]	; 0x40
    decc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000ded0 <CScreenDevice::CursorUp()>:
    ded0:	e5902040 	ldr	r2, [r0, #64]	; 0x40
    ded4:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    ded8:	e1520003 	cmp	r2, r3
    dedc:	912fff1e 	bxls	lr
    dee0:	e92d4010 	push	{r4, lr}
    dee4:	e1a04000 	mov	r4, r0
    dee8:	e2800014 	add	r0, r0, #20
    deec:	eb00154c 	bl	13424 <CCharGenerator::GetCharHeight() const>
    def0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    def4:	e0430000 	sub	r0, r3, r0
    def8:	e5840040 	str	r0, [r4, #64]	; 0x40
    defc:	e8bd8010 	pop	{r4, pc}

0000df00 <CScreenDevice::DeleteChars(unsigned int)>:
    df00:	e12fff1e 	bx	lr

0000df04 <CScreenDevice::DeleteLines(unsigned int)>:
    df04:	e12fff1e 	bx	lr

0000df08 <CScreenDevice::InsertLines(unsigned int)>:
    df08:	e12fff1e 	bx	lr

0000df0c <CScreenDevice::InsertMode(bool)>:
    df0c:	e5c01048 	strb	r1, [r0, #72]	; 0x48
    df10:	e12fff1e 	bx	lr

0000df14 <CScreenDevice::ReverseScroll()>:
    df14:	e12fff1e 	bx	lr

0000df18 <CScreenDevice::SetCursorMode(bool)>:
    df18:	e5c01044 	strb	r1, [r0, #68]	; 0x44
    df1c:	e12fff1e 	bx	lr

0000df20 <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>:
    df20:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    df24:	e2807014 	add	r7, r0, #20
    df28:	e1a06000 	mov	r6, r0
    df2c:	e1a04001 	mov	r4, r1
    df30:	e1a00007 	mov	r0, r7
    df34:	e1a05002 	mov	r5, r2
    df38:	eb001539 	bl	13424 <CCharGenerator::GetCharHeight() const>
    df3c:	e2444001 	sub	r4, r4, #1
    df40:	e0040490 	mul	r4, r0, r4
    df44:	e1a00007 	mov	r0, r7
    df48:	eb001535 	bl	13424 <CCharGenerator::GetCharHeight() const>
    df4c:	e0000095 	mul	r0, r5, r0
    df50:	e596202c 	ldr	r2, [r6, #44]	; 0x2c
    df54:	e3500000 	cmp	r0, #0
    df58:	11540002 	cmpne	r4, r2
    df5c:	33a03001 	movcc	r3, #1
    df60:	23a03000 	movcs	r3, #0
    df64:	e1500002 	cmp	r0, r2
    df68:	83a03000 	movhi	r3, #0
    df6c:	92033001 	andls	r3, r3, #1
    df70:	e1540000 	cmp	r4, r0
    df74:	23a03000 	movcs	r3, #0
    df78:	32033001 	andcc	r3, r3, #1
    df7c:	e3530000 	cmp	r3, #0
    df80:	e3a03000 	mov	r3, #0
    df84:	05964034 	ldreq	r4, [r6, #52]	; 0x34
    df88:	15864034 	strne	r4, [r6, #52]	; 0x34
    df8c:	15860038 	strne	r0, [r6, #56]	; 0x38
    df90:	e5864040 	str	r4, [r6, #64]	; 0x40
    df94:	e586303c 	str	r3, [r6, #60]	; 0x3c
    df98:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000df9c <CScreenDevice::SetStandoutMode(unsigned int)>:
    df9c:	e351001b 	cmp	r1, #27
    dfa0:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
    dfa4:	ea00001d 	b	e020 <CScreenDevice::SetStandoutMode(unsigned int)+0x84>
    dfa8:	0000e030 	.word	0x0000e030
    dfac:	0000e024 	.word	0x0000e024
    dfb0:	0000e018 	.word	0x0000e018
    dfb4:	0000e020 	.word	0x0000e020
    dfb8:	0000e020 	.word	0x0000e020
    dfbc:	0000e020 	.word	0x0000e020
    dfc0:	0000e020 	.word	0x0000e020
    dfc4:	0000e020 	.word	0x0000e020
    dfc8:	0000e020 	.word	0x0000e020
    dfcc:	0000e020 	.word	0x0000e020
    dfd0:	0000e020 	.word	0x0000e020
    dfd4:	0000e020 	.word	0x0000e020
    dfd8:	0000e020 	.word	0x0000e020
    dfdc:	0000e020 	.word	0x0000e020
    dfe0:	0000e020 	.word	0x0000e020
    dfe4:	0000e020 	.word	0x0000e020
    dfe8:	0000e020 	.word	0x0000e020
    dfec:	0000e020 	.word	0x0000e020
    dff0:	0000e020 	.word	0x0000e020
    dff4:	0000e020 	.word	0x0000e020
    dff8:	0000e020 	.word	0x0000e020
    dffc:	0000e020 	.word	0x0000e020
    e000:	0000e020 	.word	0x0000e020
    e004:	0000e020 	.word	0x0000e020
    e008:	0000e020 	.word	0x0000e020
    e00c:	0000e020 	.word	0x0000e020
    e010:	0000e020 	.word	0x0000e020
    e014:	0000e030 	.word	0x0000e030
    e018:	e3a0301f 	mov	r3, #31
    e01c:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
    e020:	e12fff1e 	bx	lr
    e024:	e3a03b3e 	mov	r3, #63488	; 0xf800
    e028:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
    e02c:	e12fff1e 	bx	lr
    e030:	e3e03020 	mvn	r3, #32
    e034:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
    e038:	e12fff1e 	bx	lr

0000e03c <CScreenDevice::Scroll()>:
    e03c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    e040:	e1a07000 	mov	r7, r0
    e044:	e2800014 	add	r0, r0, #20
    e048:	eb0014f5 	bl	13424 <CCharGenerator::GetCharHeight() const>
    e04c:	e5973034 	ldr	r3, [r7, #52]	; 0x34
    e050:	e5974038 	ldr	r4, [r7, #56]	; 0x38
    e054:	e5975020 	ldr	r5, [r7, #32]
    e058:	e0444003 	sub	r4, r4, r3
    e05c:	e1a02085 	lsl	r2, r5, #1
    e060:	e0444000 	sub	r4, r4, r0
    e064:	e0040492 	mul	r4, r2, r4
    e068:	e0050395 	mul	r5, r5, r3
    e06c:	e5978018 	ldr	r8, [r7, #24]
    e070:	e3540000 	cmp	r4, #0
    e074:	e1a06000 	mov	r6, r0
    e078:	e0885085 	add	r5, r8, r5, lsl #1
    e07c:	1a000007 	bne	e0a0 <CScreenDevice::Scroll()+0x64>
    e080:	e0020692 	mul	r2, r2, r6
    e084:	e1b02122 	lsrs	r2, r2, #2
    e088:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    e08c:	e1a00005 	mov	r0, r5
    e090:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    e094:	e1a02102 	lsl	r2, r2, #2
    e098:	e3a01000 	mov	r1, #0
    e09c:	ea000e0c 	b	118d4 <memset>
    e0a0:	e0803003 	add	r3, r0, r3
    e0a4:	e0288392 	mla	r8, r2, r3, r8
    e0a8:	e3c4900f 	bic	r9, r4, #15
    e0ac:	e1a01008 	mov	r1, r8
    e0b0:	e1a02009 	mov	r2, r9
    e0b4:	e1a00005 	mov	r0, r5
    e0b8:	eb000f77 	bl	11e9c <memcpy>
    e0bc:	e204200e 	and	r2, r4, #14
    e0c0:	e0850009 	add	r0, r5, r9
    e0c4:	e0881009 	add	r1, r8, r9
    e0c8:	eb000f73 	bl	11e9c <memcpy>
    e0cc:	e5972020 	ldr	r2, [r7, #32]
    e0d0:	e3c44003 	bic	r4, r4, #3
    e0d4:	e1a02082 	lsl	r2, r2, #1
    e0d8:	e0855004 	add	r5, r5, r4
    e0dc:	eaffffe7 	b	e080 <CScreenDevice::Scroll()+0x44>

0000e0e0 <CScreenDevice::CursorDown()>:
    e0e0:	e92d4070 	push	{r4, r5, r6, lr}
    e0e4:	e1a04000 	mov	r4, r0
    e0e8:	e2805014 	add	r5, r0, #20
    e0ec:	e1a00005 	mov	r0, r5
    e0f0:	eb0014cb 	bl	13424 <CCharGenerator::GetCharHeight() const>
    e0f4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    e0f8:	e5942038 	ldr	r2, [r4, #56]	; 0x38
    e0fc:	e0800003 	add	r0, r0, r3
    e100:	e1500002 	cmp	r0, r2
    e104:	e5840040 	str	r0, [r4, #64]	; 0x40
    e108:	38bd8070 	popcc	{r4, r5, r6, pc}
    e10c:	e1a00004 	mov	r0, r4
    e110:	ebffffc9 	bl	e03c <CScreenDevice::Scroll()>
    e114:	e1a00005 	mov	r0, r5
    e118:	eb0014c1 	bl	13424 <CCharGenerator::GetCharHeight() const>
    e11c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    e120:	e0430000 	sub	r0, r3, r0
    e124:	e5840040 	str	r0, [r4, #64]	; 0x40
    e128:	e8bd8070 	pop	{r4, r5, r6, pc}

0000e12c <CScreenDevice::NewLine()>:
    e12c:	e3a02000 	mov	r2, #0
    e130:	e580203c 	str	r2, [r0, #60]	; 0x3c
    e134:	eaffffe9 	b	e0e0 <CScreenDevice::CursorDown()>

0000e138 <CScreenDevice::CursorRight()>:
    e138:	e92d4010 	push	{r4, lr}
    e13c:	e1a04000 	mov	r4, r0
    e140:	e2800014 	add	r0, r0, #20
    e144:	eb0014b4 	bl	1341c <CCharGenerator::GetCharWidth() const>
    e148:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    e14c:	e5942024 	ldr	r2, [r4, #36]	; 0x24
    e150:	e0800003 	add	r0, r0, r3
    e154:	e1500002 	cmp	r0, r2
    e158:	e584003c 	str	r0, [r4, #60]	; 0x3c
    e15c:	38bd8010 	popcc	{r4, pc}
    e160:	e3a03000 	mov	r3, #0
    e164:	e1a00004 	mov	r0, r4
    e168:	e584303c 	str	r3, [r4, #60]	; 0x3c
    e16c:	e8bd4010 	pop	{r4, lr}
    e170:	eaffffda 	b	e0e0 <CScreenDevice::CursorDown()>

0000e174 <CScreenDevice::Tabulator()>:
    e174:	e92d4070 	push	{r4, r5, r6, lr}
    e178:	e1a05000 	mov	r5, r0
    e17c:	e2800014 	add	r0, r0, #20
    e180:	eb0014a5 	bl	1341c <CCharGenerator::GetCharWidth() const>
    e184:	e595303c 	ldr	r3, [r5, #60]	; 0x3c
    e188:	e1a04180 	lsl	r4, r0, #3
    e18c:	e0840003 	add	r0, r4, r3
    e190:	e1a01004 	mov	r1, r4
    e194:	ebfff169 	bl	a740 <__udivsi3>
    e198:	e0000094 	mul	r0, r4, r0
    e19c:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    e1a0:	e585003c 	str	r0, [r5, #60]	; 0x3c
    e1a4:	e1500003 	cmp	r0, r3
    e1a8:	38bd8070 	popcc	{r4, r5, r6, pc}
    e1ac:	e3a03000 	mov	r3, #0
    e1b0:	e1a00005 	mov	r0, r5
    e1b4:	e585303c 	str	r3, [r5, #60]	; 0x3c
    e1b8:	e8bd4070 	pop	{r4, r5, r6, lr}
    e1bc:	eaffffc7 	b	e0e0 <CScreenDevice::CursorDown()>

0000e1c0 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>:
    e1c0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e1c4:	e2806014 	add	r6, r0, #20
    e1c8:	e24dd00c 	sub	sp, sp, #12
    e1cc:	e1a07000 	mov	r7, r0
    e1d0:	e1a00006 	mov	r0, r6
    e1d4:	e1a0a001 	mov	sl, r1
    e1d8:	e1a09002 	mov	r9, r2
    e1dc:	e58d3004 	str	r3, [sp, #4]
    e1e0:	e3a08000 	mov	r8, #0
    e1e4:	e1ddb3b0 	ldrh	fp, [sp, #48]	; 0x30
    e1e8:	eb00148d 	bl	13424 <CCharGenerator::GetCharHeight() const>
    e1ec:	e1580000 	cmp	r8, r0
    e1f0:	2a000025 	bcs	e28c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xcc>
    e1f4:	e59d3004 	ldr	r3, [sp, #4]
    e1f8:	e3a04000 	mov	r4, #0
    e1fc:	e0883003 	add	r3, r8, r3
    e200:	e58d3000 	str	r3, [sp]
    e204:	ea000000 	b	e20c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x4c>
    e208:	e2844001 	add	r4, r4, #1
    e20c:	e1a00006 	mov	r0, r6
    e210:	eb001481 	bl	1341c <CCharGenerator::GetCharWidth() const>
    e214:	e1540000 	cmp	r4, r0
    e218:	e0845009 	add	r5, r4, r9
    e21c:	2a000015 	bcs	e278 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xb8>
    e220:	e1a03008 	mov	r3, r8
    e224:	e1a02004 	mov	r2, r4
    e228:	e1a0100a 	mov	r1, sl
    e22c:	e1a00006 	mov	r0, r6
    e230:	eb00147f 	bl	13434 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>
    e234:	e5973024 	ldr	r3, [r7, #36]	; 0x24
    e238:	e3500000 	cmp	r0, #0
    e23c:	11a0000b 	movne	r0, fp
    e240:	03a00000 	moveq	r0, #0
    e244:	e1550003 	cmp	r5, r3
    e248:	2affffee 	bcs	e208 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x48>
    e24c:	e5973028 	ldr	r3, [r7, #40]	; 0x28
    e250:	e59d2000 	ldr	r2, [sp]
    e254:	e1520003 	cmp	r2, r3
    e258:	2affffea 	bcs	e208 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x48>
    e25c:	e5973020 	ldr	r3, [r7, #32]
    e260:	e59d1000 	ldr	r1, [sp]
    e264:	e5972018 	ldr	r2, [r7, #24]
    e268:	e0255193 	mla	r5, r3, r1, r5
    e26c:	e1a05085 	lsl	r5, r5, #1
    e270:	e18200b5 	strh	r0, [r2, r5]
    e274:	eaffffe3 	b	e208 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x48>
    e278:	e1a00006 	mov	r0, r6
    e27c:	eb001468 	bl	13424 <CCharGenerator::GetCharHeight() const>
    e280:	e2888001 	add	r8, r8, #1
    e284:	e1580000 	cmp	r8, r0
    e288:	3affffd9 	bcc	e1f4 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x34>
    e28c:	e28dd00c 	add	sp, sp, #12
    e290:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000e294 <CScreenDevice::DisplayChar(char)>:
    e294:	e6ef3071 	uxtb	r3, r1
    e298:	e353001f 	cmp	r3, #31
    e29c:	912fff1e 	bxls	lr
    e2a0:	e92d4010 	push	{r4, lr}
    e2a4:	e1a04000 	mov	r4, r0
    e2a8:	e1d0c4b6 	ldrh	ip, [r0, #70]	; 0x46
    e2ac:	e24dd008 	sub	sp, sp, #8
    e2b0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    e2b4:	e590203c 	ldr	r2, [r0, #60]	; 0x3c
    e2b8:	e58dc000 	str	ip, [sp]
    e2bc:	ebffffbf 	bl	e1c0 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
    e2c0:	e1a00004 	mov	r0, r4
    e2c4:	e28dd008 	add	sp, sp, #8
    e2c8:	e8bd4010 	pop	{r4, lr}
    e2cc:	eaffff99 	b	e138 <CScreenDevice::CursorRight()>

0000e2d0 <CScreenDevice::EraseChar(unsigned int, unsigned int)>:
    e2d0:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e2d4:	e3a08000 	mov	r8, #0
    e2d8:	e1a0b000 	mov	fp, r0
    e2dc:	e1a06001 	mov	r6, r1
    e2e0:	e1a0a002 	mov	sl, r2
    e2e4:	e1a09008 	mov	r9, r8
    e2e8:	e2805014 	add	r5, r0, #20
    e2ec:	e1a00005 	mov	r0, r5
    e2f0:	eb00144b 	bl	13424 <CCharGenerator::GetCharHeight() const>
    e2f4:	e1580000 	cmp	r8, r0
    e2f8:	28bd8ff8 	popcs	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e2fc:	e3a04000 	mov	r4, #0
    e300:	e088700a 	add	r7, r8, sl
    e304:	e1a00005 	mov	r0, r5
    e308:	eb001443 	bl	1341c <CCharGenerator::GetCharWidth() const>
    e30c:	e1540000 	cmp	r4, r0
    e310:	e0843006 	add	r3, r4, r6
    e314:	2a00000c 	bcs	e34c <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x7c>
    e318:	e59b2024 	ldr	r2, [fp, #36]	; 0x24
    e31c:	e2844001 	add	r4, r4, #1
    e320:	e1530002 	cmp	r3, r2
    e324:	2afffff6 	bcs	e304 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x34>
    e328:	e59b2028 	ldr	r2, [fp, #40]	; 0x28
    e32c:	e1570002 	cmp	r7, r2
    e330:	2afffff3 	bcs	e304 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x34>
    e334:	e59b2020 	ldr	r2, [fp, #32]
    e338:	e59b1018 	ldr	r1, [fp, #24]
    e33c:	e0233792 	mla	r3, r2, r7, r3
    e340:	e1a03083 	lsl	r3, r3, #1
    e344:	e18190b3 	strh	r9, [r1, r3]
    e348:	eaffffed 	b	e304 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x34>
    e34c:	e2888001 	add	r8, r8, #1
    e350:	eaffffe5 	b	e2ec <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x1c>

0000e354 <CScreenDevice::ClearLineEnd()>:
    e354:	e92d4070 	push	{r4, r5, r6, lr}
    e358:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    e35c:	e590403c 	ldr	r4, [r0, #60]	; 0x3c
    e360:	e1540003 	cmp	r4, r3
    e364:	28bd8070 	popcs	{r4, r5, r6, pc}
    e368:	e1a05000 	mov	r5, r0
    e36c:	e2806014 	add	r6, r0, #20
    e370:	e1a01004 	mov	r1, r4
    e374:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    e378:	e1a00005 	mov	r0, r5
    e37c:	ebffffd3 	bl	e2d0 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    e380:	e1a00006 	mov	r0, r6
    e384:	eb001424 	bl	1341c <CCharGenerator::GetCharWidth() const>
    e388:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    e38c:	e0844000 	add	r4, r4, r0
    e390:	e1530004 	cmp	r3, r4
    e394:	8afffff5 	bhi	e370 <CScreenDevice::ClearLineEnd()+0x1c>
    e398:	e8bd8070 	pop	{r4, r5, r6, pc}

0000e39c <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>:
    e39c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    e3a0:	e1a05000 	mov	r5, r0
    e3a4:	e2807014 	add	r7, r0, #20
    e3a8:	e1a00007 	mov	r0, r7
    e3ac:	e1a06001 	mov	r6, r1
    e3b0:	e595403c 	ldr	r4, [r5, #60]	; 0x3c
    e3b4:	eb001418 	bl	1341c <CCharGenerator::GetCharWidth() const>
    e3b8:	e0204096 	mla	r0, r6, r0, r4
    e3bc:	e5956024 	ldr	r6, [r5, #36]	; 0x24
    e3c0:	e595403c 	ldr	r4, [r5, #60]	; 0x3c
    e3c4:	e1500006 	cmp	r0, r6
    e3c8:	31a06000 	movcc	r6, r0
    e3cc:	e1540006 	cmp	r4, r6
    e3d0:	28bd81f0 	popcs	{r4, r5, r6, r7, r8, pc}
    e3d4:	e1a01004 	mov	r1, r4
    e3d8:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    e3dc:	e1a00005 	mov	r0, r5
    e3e0:	ebffffba 	bl	e2d0 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    e3e4:	e1a00007 	mov	r0, r7
    e3e8:	eb00140b 	bl	1341c <CCharGenerator::GetCharWidth() const>
    e3ec:	e0844000 	add	r4, r4, r0
    e3f0:	e1540006 	cmp	r4, r6
    e3f4:	3afffff6 	bcc	e3d4 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]+0x38>
    e3f8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000e3fc <CScreenDevice::EraseChars(unsigned int)>:
    e3fc:	e3510000 	cmp	r1, #0
    e400:	012fff1e 	bxeq	lr
    e404:	eaffffe4 	b	e39c <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>

0000e408 <CScreenDevice::ClearDisplayEnd()>:
    e408:	e92d4070 	push	{r4, r5, r6, lr}
    e40c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    e410:	e590403c 	ldr	r4, [r0, #60]	; 0x3c
    e414:	e1a05000 	mov	r5, r0
    e418:	e1540003 	cmp	r4, r3
    e41c:	e2806014 	add	r6, r0, #20
    e420:	2a000009 	bcs	e44c <CScreenDevice::ClearDisplayEnd()+0x44>
    e424:	e1a01004 	mov	r1, r4
    e428:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    e42c:	e1a00005 	mov	r0, r5
    e430:	ebffffa6 	bl	e2d0 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    e434:	e1a00006 	mov	r0, r6
    e438:	eb0013f7 	bl	1341c <CCharGenerator::GetCharWidth() const>
    e43c:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    e440:	e0844000 	add	r4, r4, r0
    e444:	e1530004 	cmp	r3, r4
    e448:	8afffff5 	bhi	e424 <CScreenDevice::ClearDisplayEnd()+0x1c>
    e44c:	e1a00006 	mov	r0, r6
    e450:	e5954040 	ldr	r4, [r5, #64]	; 0x40
    e454:	eb0013f2 	bl	13424 <CCharGenerator::GetCharHeight() const>
    e458:	e5953020 	ldr	r3, [r5, #32]
    e45c:	e0840000 	add	r0, r4, r0
    e460:	e0000093 	mul	r0, r3, r0
    e464:	e595201c 	ldr	r2, [r5, #28]
    e468:	e5953018 	ldr	r3, [r5, #24]
    e46c:	e07020a2 	rsbs	r2, r0, r2, lsr #1
    e470:	0a000004 	beq	e488 <CScreenDevice::ClearDisplayEnd()+0x80>
    e474:	e8bd4070 	pop	{r4, r5, r6, lr}
    e478:	e1a02082 	lsl	r2, r2, #1
    e47c:	e0830080 	add	r0, r3, r0, lsl #1
    e480:	e3a01000 	mov	r1, #0
    e484:	ea000d12 	b	118d4 <memset>
    e488:	e8bd8070 	pop	{r4, r5, r6, pc}

0000e48c <CScreenDevice::Write(char)>:
    e48c:	e92d4010 	push	{r4, lr}
    e490:	e5903030 	ldr	r3, [r0, #48]	; 0x30
    e494:	e24dd008 	sub	sp, sp, #8
    e498:	e1a04000 	mov	r4, r0
    e49c:	e3530007 	cmp	r3, #7
    e4a0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    e4a4:	ea000010 	b	e4ec <CScreenDevice::Write(char)+0x60>
    e4a8:	0000e538 	.word	0x0000e538
    e4ac:	0000e598 	.word	0x0000e598
    e4b0:	0000e5b4 	.word	0x0000e5b4
    e4b4:	0000e60c 	.word	0x0000e60c
    e4b8:	0000e6e8 	.word	0x0000e6e8
    e4bc:	0000e708 	.word	0x0000e708
    e4c0:	0000e728 	.word	0x0000e728
    e4c4:	0000e4fc 	.word	0x0000e4fc
    e4c8:	e5902034 	ldr	r2, [r0, #52]	; 0x34
    e4cc:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    e4d0:	e1520003 	cmp	r2, r3
    e4d4:	2a000004 	bcs	e4ec <CScreenDevice::Write(char)+0x60>
    e4d8:	e2800014 	add	r0, r0, #20
    e4dc:	eb0013d0 	bl	13424 <CCharGenerator::GetCharHeight() const>
    e4e0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    e4e4:	e0433000 	sub	r3, r3, r0
    e4e8:	e5843040 	str	r3, [r4, #64]	; 0x40
    e4ec:	e3a03000 	mov	r3, #0
    e4f0:	e5843030 	str	r3, [r4, #48]	; 0x30
    e4f4:	e28dd008 	add	sp, sp, #8
    e4f8:	e8bd8010 	pop	{r4, pc}
    e4fc:	e3510068 	cmp	r1, #104	; 0x68
    e500:	0a000097 	beq	e764 <CScreenDevice::Write(char)+0x2d8>
    e504:	e351006c 	cmp	r1, #108	; 0x6c
    e508:	0a000095 	beq	e764 <CScreenDevice::Write(char)+0x2d8>
    e50c:	e2411030 	sub	r1, r1, #48	; 0x30
    e510:	e6ef3071 	uxtb	r3, r1
    e514:	e3530009 	cmp	r3, #9
    e518:	8afffff3 	bhi	e4ec <CScreenDevice::Write(char)+0x60>
    e51c:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    e520:	e0833103 	add	r3, r3, r3, lsl #2
    e524:	e0811083 	add	r1, r1, r3, lsl #1
    e528:	e3510063 	cmp	r1, #99	; 0x63
    e52c:	e584104c 	str	r1, [r4, #76]	; 0x4c
    e530:	8affffed 	bhi	e4ec <CScreenDevice::Write(char)+0x60>
    e534:	eaffffee 	b	e4f4 <CScreenDevice::Write(char)+0x68>
    e538:	e2413008 	sub	r3, r1, #8
    e53c:	e3530013 	cmp	r3, #19
    e540:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    e544:	ea0000d3 	b	e898 <CScreenDevice::Write(char)+0x40c>
    e548:	0000e7d0 	.word	0x0000e7d0
    e54c:	0000e7c4 	.word	0x0000e7c4
    e550:	0000e7b0 	.word	0x0000e7b0
    e554:	0000e898 	.word	0x0000e898
    e558:	0000e898 	.word	0x0000e898
    e55c:	0000e7a4 	.word	0x0000e7a4
    e560:	0000e898 	.word	0x0000e898
    e564:	0000e898 	.word	0x0000e898
    e568:	0000e898 	.word	0x0000e898
    e56c:	0000e898 	.word	0x0000e898
    e570:	0000e898 	.word	0x0000e898
    e574:	0000e898 	.word	0x0000e898
    e578:	0000e898 	.word	0x0000e898
    e57c:	0000e898 	.word	0x0000e898
    e580:	0000e898 	.word	0x0000e898
    e584:	0000e898 	.word	0x0000e898
    e588:	0000e898 	.word	0x0000e898
    e58c:	0000e898 	.word	0x0000e898
    e590:	0000e898 	.word	0x0000e898
    e594:	0000e798 	.word	0x0000e798
    e598:	e351004d 	cmp	r1, #77	; 0x4d
    e59c:	0affffd2 	beq	e4ec <CScreenDevice::Write(char)+0x60>
    e5a0:	e351005b 	cmp	r1, #91	; 0x5b
    e5a4:	03a03002 	moveq	r3, #2
    e5a8:	05803030 	streq	r3, [r0, #48]	; 0x30
    e5ac:	0affffd0 	beq	e4f4 <CScreenDevice::Write(char)+0x68>
    e5b0:	eaffffcd 	b	e4ec <CScreenDevice::Write(char)+0x60>
    e5b4:	e241303f 	sub	r3, r1, #63	; 0x3f
    e5b8:	e3530011 	cmp	r3, #17
    e5bc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    e5c0:	ea0000de 	b	e940 <CScreenDevice::Write(char)+0x4b4>
    e5c4:	0000e8f4 	.word	0x0000e8f4
    e5c8:	0000e940 	.word	0x0000e940
    e5cc:	0000e4c8 	.word	0x0000e4c8
    e5d0:	0000e920 	.word	0x0000e920
    e5d4:	0000e910 	.word	0x0000e910
    e5d8:	0000e900 	.word	0x0000e900
    e5dc:	0000e940 	.word	0x0000e940
    e5e0:	0000e940 	.word	0x0000e940
    e5e4:	0000e940 	.word	0x0000e940
    e5e8:	0000e8dc 	.word	0x0000e8dc
    e5ec:	0000e940 	.word	0x0000e940
    e5f0:	0000e8cc 	.word	0x0000e8cc
    e5f4:	0000e930 	.word	0x0000e930
    e5f8:	0000e4ec 	.word	0x0000e4ec
    e5fc:	0000e4ec 	.word	0x0000e4ec
    e600:	0000e940 	.word	0x0000e940
    e604:	0000e940 	.word	0x0000e940
    e608:	0000e4ec 	.word	0x0000e4ec
    e60c:	e241303b 	sub	r3, r1, #59	; 0x3b
    e610:	e3530032 	cmp	r3, #50	; 0x32
    e614:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    e618:	eaffffbb 	b	e50c <CScreenDevice::Write(char)+0x80>
    e61c:	0000e88c 	.word	0x0000e88c
    e620:	0000e50c 	.word	0x0000e50c
    e624:	0000e50c 	.word	0x0000e50c
    e628:	0000e50c 	.word	0x0000e50c
    e62c:	0000e50c 	.word	0x0000e50c
    e630:	0000e50c 	.word	0x0000e50c
    e634:	0000e50c 	.word	0x0000e50c
    e638:	0000e50c 	.word	0x0000e50c
    e63c:	0000e50c 	.word	0x0000e50c
    e640:	0000e50c 	.word	0x0000e50c
    e644:	0000e50c 	.word	0x0000e50c
    e648:	0000e50c 	.word	0x0000e50c
    e64c:	0000e50c 	.word	0x0000e50c
    e650:	0000e50c 	.word	0x0000e50c
    e654:	0000e50c 	.word	0x0000e50c
    e658:	0000e50c 	.word	0x0000e50c
    e65c:	0000e50c 	.word	0x0000e50c
    e660:	0000e4ec 	.word	0x0000e4ec
    e664:	0000e4ec 	.word	0x0000e4ec
    e668:	0000e50c 	.word	0x0000e50c
    e66c:	0000e50c 	.word	0x0000e50c
    e670:	0000e4ec 	.word	0x0000e4ec
    e674:	0000e50c 	.word	0x0000e50c
    e678:	0000e50c 	.word	0x0000e50c
    e67c:	0000e50c 	.word	0x0000e50c
    e680:	0000e50c 	.word	0x0000e50c
    e684:	0000e50c 	.word	0x0000e50c
    e688:	0000e50c 	.word	0x0000e50c
    e68c:	0000e50c 	.word	0x0000e50c
    e690:	0000e7dc 	.word	0x0000e7dc
    e694:	0000e50c 	.word	0x0000e50c
    e698:	0000e50c 	.word	0x0000e50c
    e69c:	0000e50c 	.word	0x0000e50c
    e6a0:	0000e50c 	.word	0x0000e50c
    e6a4:	0000e50c 	.word	0x0000e50c
    e6a8:	0000e50c 	.word	0x0000e50c
    e6ac:	0000e50c 	.word	0x0000e50c
    e6b0:	0000e50c 	.word	0x0000e50c
    e6b4:	0000e50c 	.word	0x0000e50c
    e6b8:	0000e50c 	.word	0x0000e50c
    e6bc:	0000e50c 	.word	0x0000e50c
    e6c0:	0000e50c 	.word	0x0000e50c
    e6c4:	0000e50c 	.word	0x0000e50c
    e6c8:	0000e50c 	.word	0x0000e50c
    e6cc:	0000e50c 	.word	0x0000e50c
    e6d0:	0000e7f0 	.word	0x0000e7f0
    e6d4:	0000e50c 	.word	0x0000e50c
    e6d8:	0000e50c 	.word	0x0000e50c
    e6dc:	0000e50c 	.word	0x0000e50c
    e6e0:	0000e7f0 	.word	0x0000e7f0
    e6e4:	0000e80c 	.word	0x0000e80c
    e6e8:	e2411030 	sub	r1, r1, #48	; 0x30
    e6ec:	e6ef3071 	uxtb	r3, r1
    e6f0:	e3530009 	cmp	r3, #9
    e6f4:	8affff7c 	bhi	e4ec <CScreenDevice::Write(char)+0x60>
    e6f8:	e3a03007 	mov	r3, #7
    e6fc:	e580104c 	str	r1, [r0, #76]	; 0x4c
    e700:	e5803030 	str	r3, [r0, #48]	; 0x30
    e704:	eaffff7a 	b	e4f4 <CScreenDevice::Write(char)+0x68>
    e708:	e2411030 	sub	r1, r1, #48	; 0x30
    e70c:	e6ef3071 	uxtb	r3, r1
    e710:	e3530009 	cmp	r3, #9
    e714:	8affff74 	bhi	e4ec <CScreenDevice::Write(char)+0x60>
    e718:	e3a03006 	mov	r3, #6
    e71c:	e5801050 	str	r1, [r0, #80]	; 0x50
    e720:	e5803030 	str	r3, [r0, #48]	; 0x30
    e724:	eaffff72 	b	e4f4 <CScreenDevice::Write(char)+0x68>
    e728:	e3510048 	cmp	r1, #72	; 0x48
    e72c:	0a000094 	beq	e984 <CScreenDevice::Write(char)+0x4f8>
    e730:	e3510072 	cmp	r1, #114	; 0x72
    e734:	0a000011 	beq	e780 <CScreenDevice::Write(char)+0x2f4>
    e738:	e2411030 	sub	r1, r1, #48	; 0x30
    e73c:	e6ef3071 	uxtb	r3, r1
    e740:	e3530009 	cmp	r3, #9
    e744:	8affff68 	bhi	e4ec <CScreenDevice::Write(char)+0x60>
    e748:	e5903050 	ldr	r3, [r0, #80]	; 0x50
    e74c:	e0833103 	add	r3, r3, r3, lsl #2
    e750:	e0811083 	add	r1, r1, r3, lsl #1
    e754:	e35100c7 	cmp	r1, #199	; 0xc7
    e758:	e5801050 	str	r1, [r0, #80]	; 0x50
    e75c:	8affff62 	bhi	e4ec <CScreenDevice::Write(char)+0x60>
    e760:	eaffff63 	b	e4f4 <CScreenDevice::Write(char)+0x68>
    e764:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    e768:	e3530019 	cmp	r3, #25
    e76c:	02411068 	subeq	r1, r1, #104	; 0x68
    e770:	016f1f11 	clzeq	r1, r1
    e774:	01a012a1 	lsreq	r1, r1, #5
    e778:	05c41044 	strbeq	r1, [r4, #68]	; 0x44
    e77c:	eaffff5a 	b	e4ec <CScreenDevice::Write(char)+0x60>
    e780:	e5902050 	ldr	r2, [r0, #80]	; 0x50
    e784:	e590104c 	ldr	r1, [r0, #76]	; 0x4c
    e788:	ebfffde4 	bl	df20 <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>
    e78c:	e3a03000 	mov	r3, #0
    e790:	e5843030 	str	r3, [r4, #48]	; 0x30
    e794:	eaffff56 	b	e4f4 <CScreenDevice::Write(char)+0x68>
    e798:	e3a03001 	mov	r3, #1
    e79c:	e5803030 	str	r3, [r0, #48]	; 0x30
    e7a0:	eaffff53 	b	e4f4 <CScreenDevice::Write(char)+0x68>
    e7a4:	e3a03000 	mov	r3, #0
    e7a8:	e580303c 	str	r3, [r0, #60]	; 0x3c
    e7ac:	eaffff50 	b	e4f4 <CScreenDevice::Write(char)+0x68>
    e7b0:	e3a03000 	mov	r3, #0
    e7b4:	e580303c 	str	r3, [r0, #60]	; 0x3c
    e7b8:	e28dd008 	add	sp, sp, #8
    e7bc:	e8bd4010 	pop	{r4, lr}
    e7c0:	eafffe46 	b	e0e0 <CScreenDevice::CursorDown()>
    e7c4:	e28dd008 	add	sp, sp, #8
    e7c8:	e8bd4010 	pop	{r4, lr}
    e7cc:	eafffe68 	b	e174 <CScreenDevice::Tabulator()>
    e7d0:	e28dd008 	add	sp, sp, #8
    e7d4:	e8bd4010 	pop	{r4, lr}
    e7d8:	eafffd89 	b	de04 <CScreenDevice::CursorLeft()>
    e7dc:	e590104c 	ldr	r1, [r0, #76]	; 0x4c
    e7e0:	e3510000 	cmp	r1, #0
    e7e4:	0affff40 	beq	e4ec <CScreenDevice::Write(char)+0x60>
    e7e8:	ebfffeeb 	bl	e39c <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>
    e7ec:	eaffff3e 	b	e4ec <CScreenDevice::Write(char)+0x60>
    e7f0:	e590304c 	ldr	r3, [r0, #76]	; 0x4c
    e7f4:	e3530004 	cmp	r3, #4
    e7f8:	02411068 	subeq	r1, r1, #104	; 0x68
    e7fc:	016f1f11 	clzeq	r1, r1
    e800:	01a012a1 	lsreq	r1, r1, #5
    e804:	05c01048 	strbeq	r1, [r0, #72]	; 0x48
    e808:	eaffff37 	b	e4ec <CScreenDevice::Write(char)+0x60>
    e80c:	e590304c 	ldr	r3, [r0, #76]	; 0x4c
    e810:	e353001b 	cmp	r3, #27
    e814:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    e818:	eaffff33 	b	e4ec <CScreenDevice::Write(char)+0x60>
    e81c:	0000e978 	.word	0x0000e978
    e820:	0000e96c 	.word	0x0000e96c
    e824:	0000e960 	.word	0x0000e960
    e828:	0000e4ec 	.word	0x0000e4ec
    e82c:	0000e4ec 	.word	0x0000e4ec
    e830:	0000e4ec 	.word	0x0000e4ec
    e834:	0000e4ec 	.word	0x0000e4ec
    e838:	0000e4ec 	.word	0x0000e4ec
    e83c:	0000e4ec 	.word	0x0000e4ec
    e840:	0000e4ec 	.word	0x0000e4ec
    e844:	0000e4ec 	.word	0x0000e4ec
    e848:	0000e4ec 	.word	0x0000e4ec
    e84c:	0000e4ec 	.word	0x0000e4ec
    e850:	0000e4ec 	.word	0x0000e4ec
    e854:	0000e4ec 	.word	0x0000e4ec
    e858:	0000e4ec 	.word	0x0000e4ec
    e85c:	0000e4ec 	.word	0x0000e4ec
    e860:	0000e4ec 	.word	0x0000e4ec
    e864:	0000e4ec 	.word	0x0000e4ec
    e868:	0000e4ec 	.word	0x0000e4ec
    e86c:	0000e4ec 	.word	0x0000e4ec
    e870:	0000e4ec 	.word	0x0000e4ec
    e874:	0000e4ec 	.word	0x0000e4ec
    e878:	0000e4ec 	.word	0x0000e4ec
    e87c:	0000e4ec 	.word	0x0000e4ec
    e880:	0000e4ec 	.word	0x0000e4ec
    e884:	0000e4ec 	.word	0x0000e4ec
    e888:	0000e978 	.word	0x0000e978
    e88c:	e3a03005 	mov	r3, #5
    e890:	e5803030 	str	r3, [r0, #48]	; 0x30
    e894:	eaffff16 	b	e4f4 <CScreenDevice::Write(char)+0x68>
    e898:	e6ef3071 	uxtb	r3, r1
    e89c:	e353001f 	cmp	r3, #31
    e8a0:	9affff13 	bls	e4f4 <CScreenDevice::Write(char)+0x68>
    e8a4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    e8a8:	e590203c 	ldr	r2, [r0, #60]	; 0x3c
    e8ac:	e1d004b6 	ldrh	r0, [r0, #70]	; 0x46
    e8b0:	e58d0000 	str	r0, [sp]
    e8b4:	e1a00004 	mov	r0, r4
    e8b8:	ebfffe40 	bl	e1c0 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
    e8bc:	e1a00004 	mov	r0, r4
    e8c0:	e28dd008 	add	sp, sp, #8
    e8c4:	e8bd4010 	pop	{r4, lr}
    e8c8:	eafffe1a 	b	e138 <CScreenDevice::CursorRight()>
    e8cc:	ebfffecd 	bl	e408 <CScreenDevice::ClearDisplayEnd()>
    e8d0:	e3a03000 	mov	r3, #0
    e8d4:	e5843030 	str	r3, [r4, #48]	; 0x30
    e8d8:	eaffff05 	b	e4f4 <CScreenDevice::Write(char)+0x68>
    e8dc:	e3a03000 	mov	r3, #0
    e8e0:	e5902034 	ldr	r2, [r0, #52]	; 0x34
    e8e4:	e580303c 	str	r3, [r0, #60]	; 0x3c
    e8e8:	e5803030 	str	r3, [r0, #48]	; 0x30
    e8ec:	e5802040 	str	r2, [r0, #64]	; 0x40
    e8f0:	eafffeff 	b	e4f4 <CScreenDevice::Write(char)+0x68>
    e8f4:	e3a03004 	mov	r3, #4
    e8f8:	e5803030 	str	r3, [r0, #48]	; 0x30
    e8fc:	eafffefc 	b	e4f4 <CScreenDevice::Write(char)+0x68>
    e900:	ebfffd3f 	bl	de04 <CScreenDevice::CursorLeft()>
    e904:	e3a03000 	mov	r3, #0
    e908:	e5843030 	str	r3, [r4, #48]	; 0x30
    e90c:	eafffef8 	b	e4f4 <CScreenDevice::Write(char)+0x68>
    e910:	ebfffe08 	bl	e138 <CScreenDevice::CursorRight()>
    e914:	e3a03000 	mov	r3, #0
    e918:	e5843030 	str	r3, [r4, #48]	; 0x30
    e91c:	eafffef4 	b	e4f4 <CScreenDevice::Write(char)+0x68>
    e920:	ebfffdee 	bl	e0e0 <CScreenDevice::CursorDown()>
    e924:	e3a03000 	mov	r3, #0
    e928:	e5843030 	str	r3, [r4, #48]	; 0x30
    e92c:	eafffef0 	b	e4f4 <CScreenDevice::Write(char)+0x68>
    e930:	ebfffe87 	bl	e354 <CScreenDevice::ClearLineEnd()>
    e934:	e3a03000 	mov	r3, #0
    e938:	e5843030 	str	r3, [r4, #48]	; 0x30
    e93c:	eafffeec 	b	e4f4 <CScreenDevice::Write(char)+0x68>
    e940:	e2411030 	sub	r1, r1, #48	; 0x30
    e944:	e6ef3071 	uxtb	r3, r1
    e948:	e3530009 	cmp	r3, #9
    e94c:	8afffee6 	bhi	e4ec <CScreenDevice::Write(char)+0x60>
    e950:	e3a03003 	mov	r3, #3
    e954:	e580104c 	str	r1, [r0, #76]	; 0x4c
    e958:	e5803030 	str	r3, [r0, #48]	; 0x30
    e95c:	eafffee4 	b	e4f4 <CScreenDevice::Write(char)+0x68>
    e960:	e3a0301f 	mov	r3, #31
    e964:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
    e968:	eafffedf 	b	e4ec <CScreenDevice::Write(char)+0x60>
    e96c:	e3a03b3e 	mov	r3, #63488	; 0xf800
    e970:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
    e974:	eafffedc 	b	e4ec <CScreenDevice::Write(char)+0x60>
    e978:	e3e03020 	mvn	r3, #32
    e97c:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
    e980:	eafffed9 	b	e4ec <CScreenDevice::Write(char)+0x60>
    e984:	e5902050 	ldr	r2, [r0, #80]	; 0x50
    e988:	e590104c 	ldr	r1, [r0, #76]	; 0x4c
    e98c:	ebfffd37 	bl	de70 <CScreenDevice::CursorMove(unsigned int, unsigned int)>
    e990:	e3a03000 	mov	r3, #0
    e994:	e5843030 	str	r3, [r4, #48]	; 0x30
    e998:	eafffed5 	b	e4f4 <CScreenDevice::Write(char)+0x68>

0000e99c <CScreenDevice::Write(void const*, unsigned int)>:
    e99c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    e9a0:	e1a05000 	mov	r5, r0
    e9a4:	e5900058 	ldr	r0, [r0, #88]	; 0x58
    e9a8:	e1a07001 	mov	r7, r1
    e9ac:	e3500000 	cmp	r0, #0
    e9b0:	e1a04002 	mov	r4, r2
    e9b4:	1a000028 	bne	ea5c <CScreenDevice::Write(void const*, unsigned int)+0xc0>
    e9b8:	e3a02001 	mov	r2, #1
    e9bc:	e5d53044 	ldrb	r3, [r5, #68]	; 0x44
    e9c0:	e5c52054 	strb	r2, [r5, #84]	; 0x54
    e9c4:	e3530000 	cmp	r3, #0
    e9c8:	1a00001c 	bne	ea40 <CScreenDevice::Write(void const*, unsigned int)+0xa4>
    e9cc:	e3540000 	cmp	r4, #0
    e9d0:	e2446001 	sub	r6, r4, #1
    e9d4:	01a06004 	moveq	r6, r4
    e9d8:	0a00000b 	beq	ea0c <CScreenDevice::Write(void const*, unsigned int)+0x70>
    e9dc:	e1a04007 	mov	r4, r7
    e9e0:	e0d410d1 	ldrsb	r1, [r4], #1
    e9e4:	e1a00005 	mov	r0, r5
    e9e8:	ebfffea7 	bl	e48c <CScreenDevice::Write(char)>
    e9ec:	e2643001 	rsb	r3, r4, #1
    e9f0:	e0833006 	add	r3, r3, r6
    e9f4:	e1770003 	cmn	r7, r3
    e9f8:	1afffff8 	bne	e9e0 <CScreenDevice::Write(void const*, unsigned int)+0x44>
    e9fc:	e2866001 	add	r6, r6, #1
    ea00:	e5d53044 	ldrb	r3, [r5, #68]	; 0x44
    ea04:	e3530000 	cmp	r3, #0
    ea08:	1a000009 	bne	ea34 <CScreenDevice::Write(void const*, unsigned int)+0x98>
    ea0c:	e3a02000 	mov	r2, #0
    ea10:	e5953058 	ldr	r3, [r5, #88]	; 0x58
    ea14:	e5c52054 	strb	r2, [r5, #84]	; 0x54
    ea18:	e1530002 	cmp	r3, r2
    ea1c:	0a000000 	beq	ea24 <CScreenDevice::Write(void const*, unsigned int)+0x88>
    ea20:	eb000f3c 	bl	12718 <LeaveCritical>
    ea24:	e3a03000 	mov	r3, #0
    ea28:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    ea2c:	e1a00006 	mov	r0, r6
    ea30:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ea34:	e1a00005 	mov	r0, r5
    ea38:	ebfffc31 	bl	db04 <CScreenDevice::InvertCursor() [clone .part.6]>
    ea3c:	eafffff2 	b	ea0c <CScreenDevice::Write(void const*, unsigned int)+0x70>
    ea40:	e1a00005 	mov	r0, r5
    ea44:	ebfffc2e 	bl	db04 <CScreenDevice::InvertCursor() [clone .part.6]>
    ea48:	e3540000 	cmp	r4, #0
    ea4c:	e2446001 	sub	r6, r4, #1
    ea50:	1affffe1 	bne	e9dc <CScreenDevice::Write(void const*, unsigned int)+0x40>
    ea54:	e1a06004 	mov	r6, r4
    ea58:	eaffffe8 	b	ea00 <CScreenDevice::Write(void const*, unsigned int)+0x64>
    ea5c:	eb000f00 	bl	12664 <EnterCritical>
    ea60:	eaffffd4 	b	e9b8 <CScreenDevice::Write(void const*, unsigned int)+0x1c>

0000ea64 <CScreenDevice::Initialize()>:
    ea64:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    ea68:	e5d0500c 	ldrb	r5, [r0, #12]
    ea6c:	e24dd00c 	sub	sp, sp, #12
    ea70:	e3550000 	cmp	r5, #0
    ea74:	e1a04000 	mov	r4, r0
    ea78:	0a00002a 	beq	eb28 <CScreenDevice::Initialize()+0xc4>
    ea7c:	e5903004 	ldr	r3, [r0, #4]
    ea80:	e5902008 	ldr	r2, [r0, #8]
    ea84:	e5803024 	str	r3, [r0, #36]	; 0x24
    ea88:	e0000392 	mul	r0, r2, r3
    ea8c:	e370010f 	cmn	r0, #-1073741821	; 0xc0000003
    ea90:	e1a00080 	lsl	r0, r0, #1
    ea94:	e584001c 	str	r0, [r4, #28]
    ea98:	e5843020 	str	r3, [r4, #32]
    ea9c:	23e00000 	mvncs	r0, #0
    eaa0:	e5842028 	str	r2, [r4, #40]	; 0x28
    eaa4:	eb000f49 	bl	127d0 <operator new[](unsigned int)>
    eaa8:	e5947028 	ldr	r7, [r4, #40]	; 0x28
    eaac:	e5840018 	str	r0, [r4, #24]
    eab0:	e2846014 	add	r6, r4, #20
    eab4:	e1a00006 	mov	r0, r6
    eab8:	eb001259 	bl	13424 <CCharGenerator::GetCharHeight() const>
    eabc:	e1a01000 	mov	r1, r0
    eac0:	e1a00007 	mov	r0, r7
    eac4:	ebffef1d 	bl	a740 <__udivsi3>
    eac8:	e1a05000 	mov	r5, r0
    eacc:	e1a00006 	mov	r0, r6
    ead0:	eb001253 	bl	13424 <CCharGenerator::GetCharHeight() const>
    ead4:	e3a02000 	mov	r2, #0
    ead8:	e0000590 	mul	r0, r0, r5
    eadc:	e5943034 	ldr	r3, [r4, #52]	; 0x34
    eae0:	e584002c 	str	r0, [r4, #44]	; 0x2c
    eae4:	e5840038 	str	r0, [r4, #56]	; 0x38
    eae8:	e5843040 	str	r3, [r4, #64]	; 0x40
    eaec:	e584203c 	str	r2, [r4, #60]	; 0x3c
    eaf0:	e1a00004 	mov	r0, r4
    eaf4:	ebfffe43 	bl	e408 <CScreenDevice::ClearDisplayEnd()>
    eaf8:	e5d43044 	ldrb	r3, [r4, #68]	; 0x44
    eafc:	e3530000 	cmp	r3, #0
    eb00:	1a00002f 	bne	ebc4 <CScreenDevice::Initialize()+0x160>
    eb04:	ebfff213 	bl	b358 <CDeviceNameService::Get()>
    eb08:	e1a02004 	mov	r2, r4
    eb0c:	e3a03000 	mov	r3, #0
    eb10:	e59f10b8 	ldr	r1, [pc, #184]	; ebd0 <CScreenDevice::Initialize()+0x16c>
    eb14:	ebfff14f 	bl	b058 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
    eb18:	e3a05001 	mov	r5, #1
    eb1c:	e1a00005 	mov	r0, r5
    eb20:	e28dd00c 	add	sp, sp, #12
    eb24:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    eb28:	e3a00094 	mov	r0, #148	; 0x94
    eb2c:	eb000f26 	bl	127cc <operator new(unsigned int)>
    eb30:	e9940006 	ldmib	r4, {r1, r2}
    eb34:	e1a06000 	mov	r6, r0
    eb38:	e3a03010 	mov	r3, #16
    eb3c:	e58d5004 	str	r5, [sp, #4]
    eb40:	e58d5000 	str	r5, [sp]
    eb44:	eb0010dd 	bl	12ec0 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    eb48:	e5846010 	str	r6, [r4, #16]
    eb4c:	e1a00006 	mov	r0, r6
    eb50:	eb001153 	bl	130a4 <CBcmFrameBuffer::Initialize()>
    eb54:	e3500000 	cmp	r0, #0
    eb58:	0affffef 	beq	eb1c <CScreenDevice::Initialize()+0xb8>
    eb5c:	e5940010 	ldr	r0, [r4, #16]
    eb60:	eb001189 	bl	1318c <CBcmFrameBuffer::GetDepth() const>
    eb64:	e3500010 	cmp	r0, #16
    eb68:	1affffeb 	bne	eb1c <CScreenDevice::Initialize()+0xb8>
    eb6c:	e5940010 	ldr	r0, [r4, #16]
    eb70:	eb001187 	bl	13194 <CBcmFrameBuffer::GetBuffer() const>
    eb74:	e5840018 	str	r0, [r4, #24]
    eb78:	e5940010 	ldr	r0, [r4, #16]
    eb7c:	eb001186 	bl	1319c <CBcmFrameBuffer::GetSize() const>
    eb80:	e584001c 	str	r0, [r4, #28]
    eb84:	e5940010 	ldr	r0, [r4, #16]
    eb88:	eb00117d 	bl	13184 <CBcmFrameBuffer::GetPitch() const>
    eb8c:	e5840020 	str	r0, [r4, #32]
    eb90:	e5940010 	ldr	r0, [r4, #16]
    eb94:	eb001172 	bl	13164 <CBcmFrameBuffer::GetWidth() const>
    eb98:	e5840024 	str	r0, [r4, #36]	; 0x24
    eb9c:	e5940010 	ldr	r0, [r4, #16]
    eba0:	eb001171 	bl	1316c <CBcmFrameBuffer::GetHeight() const>
    eba4:	e5943020 	ldr	r3, [r4, #32]
    eba8:	e1a07000 	mov	r7, r0
    ebac:	e3130003 	tst	r3, #3
    ebb0:	01a030a3 	lsreq	r3, r3, #1
    ebb4:	e5840028 	str	r0, [r4, #40]	; 0x28
    ebb8:	05843020 	streq	r3, [r4, #32]
    ebbc:	0affffbb 	beq	eab0 <CScreenDevice::Initialize()+0x4c>
    ebc0:	eaffffd5 	b	eb1c <CScreenDevice::Initialize()+0xb8>
    ebc4:	e1a00004 	mov	r0, r4
    ebc8:	ebfffbcd 	bl	db04 <CScreenDevice::InvertCursor() [clone .part.6]>
    ebcc:	eaffffcc 	b	eb04 <CScreenDevice::Initialize()+0xa0>
    ebd0:	00014c60 	.word	0x00014c60

0000ebd4 <CScreenDevice::InvertCursor()>:
    ebd4:	e5d03044 	ldrb	r3, [r0, #68]	; 0x44
    ebd8:	e3530000 	cmp	r3, #0
    ebdc:	012fff1e 	bxeq	lr
    ebe0:	eafffbc7 	b	db04 <CScreenDevice::InvertCursor() [clone .part.6]>

0000ebe4 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)>:
    ebe4:	e590c024 	ldr	ip, [r0, #36]	; 0x24
    ebe8:	e15c0001 	cmp	ip, r1
    ebec:	912fff1e 	bxls	lr
    ebf0:	e590c028 	ldr	ip, [r0, #40]	; 0x28
    ebf4:	e15c0002 	cmp	ip, r2
    ebf8:	8590c020 	ldrhi	ip, [r0, #32]
    ebfc:	85900018 	ldrhi	r0, [r0, #24]
    ec00:	8022129c 	mlahi	r2, ip, r2, r1
    ec04:	81a02082 	lslhi	r2, r2, #1
    ec08:	818030b2 	strhhi	r3, [r0, r2]
    ec0c:	e12fff1e 	bx	lr

0000ec10 <CScreenDevice::GetPixel(unsigned int, unsigned int)>:
    ec10:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    ec14:	e1530001 	cmp	r3, r1
    ec18:	9a000008 	bls	ec40 <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x30>
    ec1c:	e5903028 	ldr	r3, [r0, #40]	; 0x28
    ec20:	e1530002 	cmp	r3, r2
    ec24:	9a000005 	bls	ec40 <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x30>
    ec28:	e590c020 	ldr	ip, [r0, #32]
    ec2c:	e5903018 	ldr	r3, [r0, #24]
    ec30:	e022129c 	mla	r2, ip, r2, r1
    ec34:	e1a02082 	lsl	r2, r2, #1
    ec38:	e19300b2 	ldrh	r0, [r3, r2]
    ec3c:	e12fff1e 	bx	lr
    ec40:	e3a00000 	mov	r0, #0
    ec44:	e12fff1e 	bx	lr

0000ec48 <CScreenDevice::Rotor(unsigned int, unsigned int)>:
    ec48:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    ec4c:	e1a05000 	mov	r5, r0
    ec50:	e24dd00c 	sub	sp, sp, #12
    ec54:	e1a04001 	mov	r4, r1
    ec58:	e2800014 	add	r0, r0, #20
    ec5c:	e1a06002 	mov	r6, r2
    ec60:	e5957024 	ldr	r7, [r5, #36]	; 0x24
    ec64:	eb0011ec 	bl	1341c <CCharGenerator::GetCharWidth() const>
    ec68:	e3a0cb3e 	mov	ip, #63488	; 0xf800
    ec6c:	e2044003 	and	r4, r4, #3
    ec70:	e0200094 	mla	r0, r4, r0, r0
    ec74:	e59f3024 	ldr	r3, [pc, #36]	; eca0 <CScreenDevice::Rotor(unsigned int, unsigned int)+0x58>
    ec78:	e2066003 	and	r6, r6, #3
    ec7c:	e0833006 	add	r3, r3, r6
    ec80:	e1d311dc 	ldrsb	r1, [r3, #28]
    ec84:	e0472000 	sub	r2, r7, r0
    ec88:	e58dc000 	str	ip, [sp]
    ec8c:	e1a00005 	mov	r0, r5
    ec90:	e3a03000 	mov	r3, #0
    ec94:	ebfffd49 	bl	e1c0 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
    ec98:	e28dd00c 	add	sp, sp, #12
    ec9c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    eca0:	0001504c 	.word	0x0001504c

0000eca4 <CSerialDevice::Read(void*, unsigned int)>:
    eca4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    eca8:	e2514000 	subs	r4, r1, #0
    ecac:	e1a05000 	mov	r5, r0
    ecb0:	e1a08002 	mov	r8, r2
    ecb4:	0a00005a 	beq	ee24 <CSerialDevice::Read(void*, unsigned int)+0x180>
    ecb8:	e59530a4 	ldr	r3, [r5, #164]	; 0xa4
    ecbc:	e3530000 	cmp	r3, #0
    ecc0:	0a000034 	beq	ed98 <CSerialDevice::Read(void*, unsigned int)+0xf4>
    ecc4:	e2856802 	add	r6, r5, #131072	; 0x20000
    ecc8:	e59600d0 	ldr	r0, [r6, #208]	; 0xd0
    eccc:	e3500000 	cmp	r0, #0
    ecd0:	1a000022 	bne	ed60 <CSerialDevice::Read(void*, unsigned int)+0xbc>
    ecd4:	e2853801 	add	r3, r5, #65536	; 0x10000
    ecd8:	e59320b4 	ldr	r2, [r3, #180]	; 0xb4
    ecdc:	e3520000 	cmp	r2, #0
    ece0:	ba000023 	blt	ed74 <CSerialDevice::Read(void*, unsigned int)+0xd0>
    ece4:	e3580000 	cmp	r8, #0
    ece8:	0a000017 	beq	ed4c <CSerialDevice::Read(void*, unsigned int)+0xa8>
    ecec:	e59320ac 	ldr	r2, [r3, #172]	; 0xac
    ecf0:	e59310b0 	ldr	r1, [r3, #176]	; 0xb0
    ecf4:	e1510002 	cmp	r1, r2
    ecf8:	0a000054 	beq	ee50 <CSerialDevice::Read(void*, unsigned int)+0x1ac>
    ecfc:	e0842008 	add	r2, r4, r8
    ed00:	e1a0c004 	mov	ip, r4
    ed04:	e59fe154 	ldr	lr, [pc, #340]	; ee60 <CSerialDevice::Read(void*, unsigned int)+0x1bc>
    ed08:	ea000003 	b	ed1c <CSerialDevice::Read(void*, unsigned int)+0x78>
    ed0c:	e59370ac 	ldr	r7, [r3, #172]	; 0xac
    ed10:	e59310b0 	ldr	r1, [r3, #176]	; 0xb0
    ed14:	e1570001 	cmp	r7, r1
    ed18:	0a00000b 	beq	ed4c <CSerialDevice::Read(void*, unsigned int)+0xa8>
    ed1c:	e59310b0 	ldr	r1, [r3, #176]	; 0xb0
    ed20:	e2810001 	add	r0, r1, #1
    ed24:	e58300b0 	str	r0, [r3, #176]	; 0xb0
    ed28:	e0851001 	add	r1, r5, r1
    ed2c:	e5d110aa 	ldrb	r1, [r1, #170]	; 0xaa
    ed30:	e4cc1001 	strb	r1, [ip], #1
    ed34:	e59310b0 	ldr	r1, [r3, #176]	; 0xb0
    ed38:	e15c0002 	cmp	ip, r2
    ed3c:	e001100e 	and	r1, r1, lr
    ed40:	e58310b0 	str	r1, [r3, #176]	; 0xb0
    ed44:	e04c8004 	sub	r8, ip, r4
    ed48:	1affffef 	bne	ed0c <CSerialDevice::Read(void*, unsigned int)+0x68>
    ed4c:	e59630d0 	ldr	r3, [r6, #208]	; 0xd0
    ed50:	e3530000 	cmp	r3, #0
    ed54:	1a00000c 	bne	ed8c <CSerialDevice::Read(void*, unsigned int)+0xe8>
    ed58:	e1a00008 	mov	r0, r8
    ed5c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ed60:	eb000e3f 	bl	12664 <EnterCritical>
    ed64:	e2853801 	add	r3, r5, #65536	; 0x10000
    ed68:	e59320b4 	ldr	r2, [r3, #180]	; 0xb4
    ed6c:	e3520000 	cmp	r2, #0
    ed70:	aaffffdb 	bge	ece4 <CSerialDevice::Read(void*, unsigned int)+0x40>
    ed74:	e3a02000 	mov	r2, #0
    ed78:	e59380b4 	ldr	r8, [r3, #180]	; 0xb4
    ed7c:	e58320b4 	str	r2, [r3, #180]	; 0xb4
    ed80:	e59630d0 	ldr	r3, [r6, #208]	; 0xd0
    ed84:	e3530000 	cmp	r3, #0
    ed88:	0afffff2 	beq	ed58 <CSerialDevice::Read(void*, unsigned int)+0xb4>
    ed8c:	eb000e61 	bl	12718 <LeaveCritical>
    ed90:	e1a00008 	mov	r0, r8
    ed94:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ed98:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    ed9c:	e3580000 	cmp	r8, #0
    eda0:	0a00001b 	beq	ee14 <CSerialDevice::Read(void*, unsigned int)+0x170>
    eda4:	e59fc0b8 	ldr	ip, [pc, #184]	; ee64 <CSerialDevice::Read(void*, unsigned int)+0x1c0>
    eda8:	e59c2018 	ldr	r2, [ip, #24]
    edac:	e3120010 	tst	r2, #16
    edb0:	1a000028 	bne	ee58 <CSerialDevice::Read(void*, unsigned int)+0x1b4>
    edb4:	e59c3000 	ldr	r3, [ip]
    edb8:	e3130b01 	tst	r3, #1024	; 0x400
    edbc:	1a00001d 	bne	ee38 <CSerialDevice::Read(void*, unsigned int)+0x194>
    edc0:	e3130b02 	tst	r3, #2048	; 0x800
    edc4:	1a00001d 	bne	ee40 <CSerialDevice::Read(void*, unsigned int)+0x19c>
    edc8:	e3130c01 	tst	r3, #256	; 0x100
    edcc:	1a00001d 	bne	ee48 <CSerialDevice::Read(void*, unsigned int)+0x1a4>
    edd0:	e0842008 	add	r2, r4, r8
    edd4:	e1a01004 	mov	r1, r4
    edd8:	ea000009 	b	ee04 <CSerialDevice::Read(void*, unsigned int)+0x160>
    eddc:	e59c3018 	ldr	r3, [ip, #24]
    ede0:	e3130010 	tst	r3, #16
    ede4:	1a00000a 	bne	ee14 <CSerialDevice::Read(void*, unsigned int)+0x170>
    ede8:	e59c3000 	ldr	r3, [ip]
    edec:	e3130b01 	tst	r3, #1024	; 0x400
    edf0:	1a000010 	bne	ee38 <CSerialDevice::Read(void*, unsigned int)+0x194>
    edf4:	e3130b02 	tst	r3, #2048	; 0x800
    edf8:	1a000010 	bne	ee40 <CSerialDevice::Read(void*, unsigned int)+0x19c>
    edfc:	e3130c01 	tst	r3, #256	; 0x100
    ee00:	1a000010 	bne	ee48 <CSerialDevice::Read(void*, unsigned int)+0x1a4>
    ee04:	e4c13001 	strb	r3, [r1], #1
    ee08:	e1510002 	cmp	r1, r2
    ee0c:	e0418004 	sub	r8, r1, r4
    ee10:	1afffff1 	bne	eddc <CSerialDevice::Read(void*, unsigned int)+0x138>
    ee14:	e3a03000 	mov	r3, #0
    ee18:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    ee1c:	e1a00008 	mov	r0, r8
    ee20:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ee24:	e59f203c 	ldr	r2, [pc, #60]	; ee68 <CSerialDevice::Read(void*, unsigned int)+0x1c4>
    ee28:	e59f103c 	ldr	r1, [pc, #60]	; ee6c <CSerialDevice::Read(void*, unsigned int)+0x1c8>
    ee2c:	e59f003c 	ldr	r0, [pc, #60]	; ee70 <CSerialDevice::Read(void*, unsigned int)+0x1cc>
    ee30:	ebffef19 	bl	aa9c <assertion_failed>
    ee34:	eaffff9f 	b	ecb8 <CSerialDevice::Read(void*, unsigned int)+0x14>
    ee38:	e3e08000 	mvn	r8, #0
    ee3c:	eafffff4 	b	ee14 <CSerialDevice::Read(void*, unsigned int)+0x170>
    ee40:	e3e08001 	mvn	r8, #1
    ee44:	eafffff2 	b	ee14 <CSerialDevice::Read(void*, unsigned int)+0x170>
    ee48:	e3e08002 	mvn	r8, #2
    ee4c:	eafffff0 	b	ee14 <CSerialDevice::Read(void*, unsigned int)+0x170>
    ee50:	e3a08000 	mov	r8, #0
    ee54:	eaffffbc 	b	ed4c <CSerialDevice::Read(void*, unsigned int)+0xa8>
    ee58:	e1a08003 	mov	r8, r3
    ee5c:	eaffffec 	b	ee14 <CSerialDevice::Read(void*, unsigned int)+0x170>
    ee60:	0000ffff 	.word	0x0000ffff
    ee64:	20201000 	.word	0x20201000
    ee68:	00000101 	.word	0x00000101
    ee6c:	0001508c 	.word	0x0001508c
    ee70:	00014068 	.word	0x00014068

0000ee74 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool)>:
    ee74:	e92d4070 	push	{r4, r5, r6, lr}
    ee78:	e1a04000 	mov	r4, r0
    ee7c:	e1a05002 	mov	r5, r2
    ee80:	e1a06001 	mov	r6, r1
    ee84:	ebfff042 	bl	af94 <CDevice::CDevice()>
    ee88:	e1a00004 	mov	r0, r4
    ee8c:	e3a03000 	mov	r3, #0
    ee90:	e59f109c 	ldr	r1, [pc, #156]	; ef34 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool)+0xc0>
    ee94:	e1a02003 	mov	r2, r3
    ee98:	e4801004 	str	r1, [r0], #4
    ee9c:	e3a01020 	mov	r1, #32
    eea0:	ebfff4a9 	bl	c14c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    eea4:	e3a03000 	mov	r3, #0
    eea8:	e284002c 	add	r0, r4, #44	; 0x2c
    eeac:	e1a02003 	mov	r2, r3
    eeb0:	e3a01021 	mov	r1, #33	; 0x21
    eeb4:	ebfff4a4 	bl	c14c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    eeb8:	e2840054 	add	r0, r4, #84	; 0x54
    eebc:	e3a03000 	mov	r3, #0
    eec0:	e3a02004 	mov	r2, #4
    eec4:	e3a0100e 	mov	r1, #14
    eec8:	ebfff49f 	bl	c14c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    eecc:	e284007c 	add	r0, r4, #124	; 0x7c
    eed0:	e3a03000 	mov	r3, #0
    eed4:	e3a02004 	mov	r2, #4
    eed8:	e3a0100f 	mov	r1, #15
    eedc:	ebfff49a 	bl	c14c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    eee0:	e3550000 	cmp	r5, #0
    eee4:	e3a03000 	mov	r3, #0
    eee8:	e3a0c001 	mov	ip, #1
    eeec:	13a0e002 	movne	lr, #2
    eef0:	03a0e001 	moveq	lr, #1
    eef4:	e2842802 	add	r2, r4, #131072	; 0x20000
    eef8:	e2841801 	add	r1, r4, #65536	; 0x10000
    eefc:	e58460a4 	str	r6, [r4, #164]	; 0xa4
    ef00:	e5c450a8 	strb	r5, [r4, #168]	; 0xa8
    ef04:	e5c430a9 	strb	r3, [r4, #169]	; 0xa9
    ef08:	e1a00004 	mov	r0, r4
    ef0c:	e58130ac 	str	r3, [r1, #172]	; 0xac
    ef10:	e58130b0 	str	r3, [r1, #176]	; 0xb0
    ef14:	e58130b4 	str	r3, [r1, #180]	; 0xb4
    ef18:	e58230b8 	str	r3, [r2, #184]	; 0xb8
    ef1c:	e582e0d0 	str	lr, [r2, #208]	; 0xd0
    ef20:	e58230c4 	str	r3, [r2, #196]	; 0xc4
    ef24:	e58230bc 	str	r3, [r2, #188]	; 0xbc
    ef28:	e582c0c0 	str	ip, [r2, #192]	; 0xc0
    ef2c:	e582c0d4 	str	ip, [r2, #212]	; 0xd4
    ef30:	e8bd8070 	pop	{r4, r5, r6, pc}
    ef34:	00015078 	.word	0x00015078

0000ef38 <CSerialDevice::Initialize(unsigned int)>:
    ef38:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    ef3c:	e1a07001 	mov	r7, r1
    ef40:	e1a04000 	mov	r4, r0
    ef44:	ebfffaba 	bl	da34 <CMachineInfo::Get()>
    ef48:	e3a01002 	mov	r1, #2
    ef4c:	ebfffa58 	bl	d8b4 <CMachineInfo::GetClockRate(unsigned int) const>
    ef50:	e2508000 	subs	r8, r0, #0
    ef54:	0a000051 	beq	f0a0 <CSerialDevice::Initialize(unsigned int)+0x168>
    ef58:	e59f3154 	ldr	r3, [pc, #340]	; f0b4 <CSerialDevice::Initialize(unsigned int)+0x17c>
    ef5c:	e2472f4b 	sub	r2, r7, #300	; 0x12c
    ef60:	e1520003 	cmp	r2, r3
    ef64:	8a000048 	bhi	f08c <CSerialDevice::Initialize(unsigned int)+0x154>
    ef68:	e1a05207 	lsl	r5, r7, #4
    ef6c:	e1a01005 	mov	r1, r5
    ef70:	e1a00008 	mov	r0, r8
    ef74:	ebffedf1 	bl	a740 <__udivsi3>
    ef78:	e59f3138 	ldr	r3, [pc, #312]	; f0b8 <CSerialDevice::Initialize(unsigned int)+0x180>
    ef7c:	e2402001 	sub	r2, r0, #1
    ef80:	e1520003 	cmp	r2, r3
    ef84:	e1a06000 	mov	r6, r0
    ef88:	8a00003a 	bhi	f078 <CSerialDevice::Initialize(unsigned int)+0x140>
    ef8c:	e1a01005 	mov	r1, r5
    ef90:	e1a00008 	mov	r0, r8
    ef94:	ebffee26 	bl	a834 <__aeabi_uidivmod>
    ef98:	e1a00181 	lsl	r0, r1, #3
    ef9c:	e1a01007 	mov	r1, r7
    efa0:	ebffede6 	bl	a740 <__udivsi3>
    efa4:	e2005001 	and	r5, r0, #1
    efa8:	e08550a0 	add	r5, r5, r0, lsr #1
    efac:	e355003f 	cmp	r5, #63	; 0x3f
    efb0:	8a00002b 	bhi	f064 <CSerialDevice::Initialize(unsigned int)+0x12c>
    efb4:	e59400a4 	ldr	r0, [r4, #164]	; 0xa4
    efb8:	e3500000 	cmp	r0, #0
    efbc:	0a000008 	beq	efe4 <CSerialDevice::Initialize(unsigned int)+0xac>
    efc0:	e5d430a8 	ldrb	r3, [r4, #168]	; 0xa8
    efc4:	e59f20f0 	ldr	r2, [pc, #240]	; f0bc <CSerialDevice::Initialize(unsigned int)+0x184>
    efc8:	e3530000 	cmp	r3, #0
    efcc:	e3a01039 	mov	r1, #57	; 0x39
    efd0:	e1a03004 	mov	r3, r4
    efd4:	0a000020 	beq	f05c <CSerialDevice::Initialize(unsigned int)+0x124>
    efd8:	ebfff5ac 	bl	c690 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>
    efdc:	e3a03001 	mov	r3, #1
    efe0:	e5c430a9 	strb	r3, [r4, #169]	; 0xa9
    efe4:	e3a02000 	mov	r2, #0
    efe8:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
    efec:	e59400a4 	ldr	r0, [r4, #164]	; 0xa4
    eff0:	e59f30c8 	ldr	r3, [pc, #200]	; f0c0 <CSerialDevice::Initialize(unsigned int)+0x188>
    eff4:	e59f10c8 	ldr	r1, [pc, #200]	; f0c4 <CSerialDevice::Initialize(unsigned int)+0x18c>
    eff8:	e1500002 	cmp	r0, r2
    effc:	e5832038 	str	r2, [r3, #56]	; 0x38
    f000:	13a00009 	movne	r0, #9
    f004:	e5831044 	str	r1, [r3, #68]	; 0x44
    f008:	13a02e45 	movne	r2, #1104	; 0x450
    f00c:	03a02060 	moveq	r2, #96	; 0x60
    f010:	13a01070 	movne	r1, #112	; 0x70
    f014:	e5836024 	str	r6, [r3, #36]	; 0x24
    f018:	e5835028 	str	r5, [r3, #40]	; 0x28
    f01c:	15830034 	strne	r0, [r3, #52]	; 0x34
    f020:	0583202c 	streq	r2, [r3, #44]	; 0x2c
    f024:	1583102c 	strne	r1, [r3, #44]	; 0x2c
    f028:	15832038 	strne	r2, [r3, #56]	; 0x38
    f02c:	e59f308c 	ldr	r3, [pc, #140]	; f0c0 <CSerialDevice::Initialize(unsigned int)+0x188>
    f030:	e59f2090 	ldr	r2, [pc, #144]	; f0c8 <CSerialDevice::Initialize(unsigned int)+0x190>
    f034:	e3a05000 	mov	r5, #0
    f038:	e5832030 	str	r2, [r3, #48]	; 0x30
    f03c:	ee075fba 	mcr	15, 0, r5, cr7, cr10, {5}
    f040:	ebfff0c4 	bl	b358 <CDeviceNameService::Get()>
    f044:	e1a03005 	mov	r3, r5
    f048:	e1a02004 	mov	r2, r4
    f04c:	e59f1078 	ldr	r1, [pc, #120]	; f0cc <CSerialDevice::Initialize(unsigned int)+0x194>
    f050:	ebfff000 	bl	b058 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
    f054:	e3a00001 	mov	r0, #1
    f058:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f05c:	ebfff51e 	bl	c4dc <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    f060:	eaffffdd 	b	efdc <CSerialDevice::Initialize(unsigned int)+0xa4>
    f064:	e3a02092 	mov	r2, #146	; 0x92
    f068:	e59f1060 	ldr	r1, [pc, #96]	; f0d0 <CSerialDevice::Initialize(unsigned int)+0x198>
    f06c:	e59f0060 	ldr	r0, [pc, #96]	; f0d4 <CSerialDevice::Initialize(unsigned int)+0x19c>
    f070:	ebffee89 	bl	aa9c <assertion_failed>
    f074:	eaffffce 	b	efb4 <CSerialDevice::Initialize(unsigned int)+0x7c>
    f078:	e3a0208f 	mov	r2, #143	; 0x8f
    f07c:	e59f104c 	ldr	r1, [pc, #76]	; f0d0 <CSerialDevice::Initialize(unsigned int)+0x198>
    f080:	e59f0050 	ldr	r0, [pc, #80]	; f0d8 <CSerialDevice::Initialize(unsigned int)+0x1a0>
    f084:	ebffee84 	bl	aa9c <assertion_failed>
    f088:	eaffffbf 	b	ef8c <CSerialDevice::Initialize(unsigned int)+0x54>
    f08c:	e3a0208c 	mov	r2, #140	; 0x8c
    f090:	e59f1038 	ldr	r1, [pc, #56]	; f0d0 <CSerialDevice::Initialize(unsigned int)+0x198>
    f094:	e59f0040 	ldr	r0, [pc, #64]	; f0dc <CSerialDevice::Initialize(unsigned int)+0x1a4>
    f098:	ebffee7f 	bl	aa9c <assertion_failed>
    f09c:	eaffffb1 	b	ef68 <CSerialDevice::Initialize(unsigned int)+0x30>
    f0a0:	e3a0208a 	mov	r2, #138	; 0x8a
    f0a4:	e59f1024 	ldr	r1, [pc, #36]	; f0d0 <CSerialDevice::Initialize(unsigned int)+0x198>
    f0a8:	e59f0030 	ldr	r0, [pc, #48]	; f0e0 <CSerialDevice::Initialize(unsigned int)+0x1a8>
    f0ac:	ebffee7a 	bl	aa9c <assertion_failed>
    f0b0:	eaffffa8 	b	ef58 <CSerialDevice::Initialize(unsigned int)+0x20>
    f0b4:	003d07d4 	.word	0x003d07d4
    f0b8:	0000fffe 	.word	0x0000fffe
    f0bc:	0000f84c 	.word	0x0000f84c
    f0c0:	20201000 	.word	0x20201000
    f0c4:	000007ff 	.word	0x000007ff
    f0c8:	00000301 	.word	0x00000301
    f0cc:	000140e8 	.word	0x000140e8
    f0d0:	0001508c 	.word	0x0001508c
    f0d4:	000140d4 	.word	0x000140d4
    f0d8:	000140b0 	.word	0x000140b0
    f0dc:	00014084 	.word	0x00014084
    f0e0:	00014074 	.word	0x00014074

0000f0e4 <CSerialDevice::GetOptions() const>:
    f0e4:	e2800802 	add	r0, r0, #131072	; 0x20000
    f0e8:	e59000c0 	ldr	r0, [r0, #192]	; 0xc0
    f0ec:	e12fff1e 	bx	lr

0000f0f0 <CSerialDevice::SetOptions(unsigned int)>:
    f0f0:	e2800802 	add	r0, r0, #131072	; 0x20000
    f0f4:	e58010c0 	str	r1, [r0, #192]	; 0xc0
    f0f8:	e12fff1e 	bx	lr

0000f0fc <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())>:
    f0fc:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
    f100:	e92d4070 	push	{r4, r5, r6, lr}
    f104:	e3530000 	cmp	r3, #0
    f108:	e1a04000 	mov	r4, r0
    f10c:	e1a05001 	mov	r5, r1
    f110:	e1a06002 	mov	r6, r2
    f114:	0a00001d 	beq	f190 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x94>
    f118:	e2844802 	add	r4, r4, #131072	; 0x20000
    f11c:	e59430c4 	ldr	r3, [r4, #196]	; 0xc4
    f120:	e3530000 	cmp	r3, #0
    f124:	0a000003 	beq	f138 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x3c>
    f128:	e59f2088 	ldr	r2, [pc, #136]	; f1b8 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xbc>
    f12c:	e59f1088 	ldr	r1, [pc, #136]	; f1bc <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc0>
    f130:	e59f0088 	ldr	r0, [pc, #136]	; f1c0 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc4>
    f134:	ebffee58 	bl	aa9c <assertion_failed>
    f138:	e3550000 	cmp	r5, #0
    f13c:	0a000018 	beq	f1a4 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xa8>
    f140:	e1d530d0 	ldrsb	r3, [r5]
    f144:	e3530000 	cmp	r3, #0
    f148:	0a000005 	beq	f164 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x68>
    f14c:	e3560000 	cmp	r6, #0
    f150:	0a000009 	beq	f17c <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x80>
    f154:	e58460cc 	str	r6, [r4, #204]	; 0xcc
    f158:	e58450c8 	str	r5, [r4, #200]	; 0xc8
    f15c:	e58450c4 	str	r5, [r4, #196]	; 0xc4
    f160:	e8bd8070 	pop	{r4, r5, r6, pc}
    f164:	e3a02f57 	mov	r2, #348	; 0x15c
    f168:	e59f104c 	ldr	r1, [pc, #76]	; f1bc <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc0>
    f16c:	e59f0050 	ldr	r0, [pc, #80]	; f1c4 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc8>
    f170:	ebffee49 	bl	aa9c <assertion_failed>
    f174:	e3560000 	cmp	r6, #0
    f178:	1afffff5 	bne	f154 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x58>
    f17c:	e59f2044 	ldr	r2, [pc, #68]	; f1c8 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xcc>
    f180:	e59f1034 	ldr	r1, [pc, #52]	; f1bc <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc0>
    f184:	e59f0040 	ldr	r0, [pc, #64]	; f1cc <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xd0>
    f188:	ebffee43 	bl	aa9c <assertion_failed>
    f18c:	eafffff0 	b	f154 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x58>
    f190:	e3a02f56 	mov	r2, #344	; 0x158
    f194:	e59f1020 	ldr	r1, [pc, #32]	; f1bc <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc0>
    f198:	e59f0030 	ldr	r0, [pc, #48]	; f1d0 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xd4>
    f19c:	ebffee3e 	bl	aa9c <assertion_failed>
    f1a0:	eaffffdc 	b	f118 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x1c>
    f1a4:	e59f2028 	ldr	r2, [pc, #40]	; f1d4 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xd8>
    f1a8:	e59f100c 	ldr	r1, [pc, #12]	; f1bc <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc0>
    f1ac:	e59f0024 	ldr	r0, [pc, #36]	; f1d8 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xdc>
    f1b0:	ebffee39 	bl	aa9c <assertion_failed>
    f1b4:	eaffffe1 	b	f140 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x44>
    f1b8:	00000159 	.word	0x00000159
    f1bc:	0001508c 	.word	0x0001508c
    f1c0:	00014108 	.word	0x00014108
    f1c4:	00014124 	.word	0x00014124
    f1c8:	0000015d 	.word	0x0000015d
    f1cc:	00014bc8 	.word	0x00014bc8
    f1d0:	000140f0 	.word	0x000140f0
    f1d4:	0000015b 	.word	0x0000015b
    f1d8:	00014118 	.word	0x00014118

0000f1dc <CSerialDevice::AvailableForWrite()>:
    f1dc:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
    f1e0:	e92d4010 	push	{r4, lr}
    f1e4:	e3530000 	cmp	r3, #0
    f1e8:	e1a04000 	mov	r4, r0
    f1ec:	0a000014 	beq	f244 <CSerialDevice::AvailableForWrite()+0x68>
    f1f0:	e2844802 	add	r4, r4, #131072	; 0x20000
    f1f4:	e59400d0 	ldr	r0, [r4, #208]	; 0xd0
    f1f8:	e3500000 	cmp	r0, #0
    f1fc:	1a00000d 	bne	f238 <CSerialDevice::AvailableForWrite()+0x5c>
    f200:	e59420bc 	ldr	r2, [r4, #188]	; 0xbc
    f204:	e59430b8 	ldr	r3, [r4, #184]	; 0xb8
    f208:	e1520003 	cmp	r2, r3
    f20c:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    f210:	e59420b8 	ldr	r2, [r4, #184]	; 0xb8
    f214:	92834cff 	addls	r4, r3, #65280	; 0xff00
    f218:	928440ff 	addls	r4, r4, #255	; 0xff
    f21c:	82434001 	subhi	r4, r3, #1
    f220:	e3500000 	cmp	r0, #0
    f224:	e0444002 	sub	r4, r4, r2
    f228:	0a000000 	beq	f230 <CSerialDevice::AvailableForWrite()+0x54>
    f22c:	eb000d39 	bl	12718 <LeaveCritical>
    f230:	e1a00004 	mov	r0, r4
    f234:	e8bd8010 	pop	{r4, pc}
    f238:	eb000d09 	bl	12664 <EnterCritical>
    f23c:	e59400d0 	ldr	r0, [r4, #208]	; 0xd0
    f240:	eaffffee 	b	f200 <CSerialDevice::AvailableForWrite()+0x24>
    f244:	e59f200c 	ldr	r2, [pc, #12]	; f258 <CSerialDevice::AvailableForWrite()+0x7c>
    f248:	e59f100c 	ldr	r1, [pc, #12]	; f25c <CSerialDevice::AvailableForWrite()+0x80>
    f24c:	e59f000c 	ldr	r0, [pc, #12]	; f260 <CSerialDevice::AvailableForWrite()+0x84>
    f250:	ebffee11 	bl	aa9c <assertion_failed>
    f254:	eaffffe5 	b	f1f0 <CSerialDevice::AvailableForWrite()+0x14>
    f258:	00000167 	.word	0x00000167
    f25c:	0001508c 	.word	0x0001508c
    f260:	000140f0 	.word	0x000140f0

0000f264 <CSerialDevice::AvailableForRead()>:
    f264:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
    f268:	e92d4070 	push	{r4, r5, r6, lr}
    f26c:	e3530000 	cmp	r3, #0
    f270:	e1a04000 	mov	r4, r0
    f274:	0a000013 	beq	f2c8 <CSerialDevice::AvailableForRead()+0x64>
    f278:	e2845802 	add	r5, r4, #131072	; 0x20000
    f27c:	e59500d0 	ldr	r0, [r5, #208]	; 0xd0
    f280:	e3500000 	cmp	r0, #0
    f284:	1a00000c 	bne	f2bc <CSerialDevice::AvailableForRead()+0x58>
    f288:	e2843801 	add	r3, r4, #65536	; 0x10000
    f28c:	e59310ac 	ldr	r1, [r3, #172]	; 0xac
    f290:	e59320b0 	ldr	r2, [r3, #176]	; 0xb0
    f294:	e59340ac 	ldr	r4, [r3, #172]	; 0xac
    f298:	e1510002 	cmp	r1, r2
    f29c:	e59330b0 	ldr	r3, [r3, #176]	; 0xb0
    f2a0:	32844801 	addcc	r4, r4, #65536	; 0x10000
    f2a4:	e3500000 	cmp	r0, #0
    f2a8:	e0444003 	sub	r4, r4, r3
    f2ac:	0a000000 	beq	f2b4 <CSerialDevice::AvailableForRead()+0x50>
    f2b0:	eb000d18 	bl	12718 <LeaveCritical>
    f2b4:	e1a00004 	mov	r0, r4
    f2b8:	e8bd8070 	pop	{r4, r5, r6, pc}
    f2bc:	eb000ce8 	bl	12664 <EnterCritical>
    f2c0:	e59500d0 	ldr	r0, [r5, #208]	; 0xd0
    f2c4:	eaffffef 	b	f288 <CSerialDevice::AvailableForRead()+0x24>
    f2c8:	e3a02f5f 	mov	r2, #380	; 0x17c
    f2cc:	e59f1008 	ldr	r1, [pc, #8]	; f2dc <CSerialDevice::AvailableForRead()+0x78>
    f2d0:	e59f0008 	ldr	r0, [pc, #8]	; f2e0 <CSerialDevice::AvailableForRead()+0x7c>
    f2d4:	ebffedf0 	bl	aa9c <assertion_failed>
    f2d8:	eaffffe6 	b	f278 <CSerialDevice::AvailableForRead()+0x14>
    f2dc:	0001508c 	.word	0x0001508c
    f2e0:	000140f0 	.word	0x000140f0

0000f2e4 <CSerialDevice::Peek()>:
    f2e4:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
    f2e8:	e92d4070 	push	{r4, r5, r6, lr}
    f2ec:	e3530000 	cmp	r3, #0
    f2f0:	e1a04000 	mov	r4, r0
    f2f4:	0a00001a 	beq	f364 <CSerialDevice::Peek()+0x80>
    f2f8:	e2845802 	add	r5, r4, #131072	; 0x20000
    f2fc:	e59520d0 	ldr	r2, [r5, #208]	; 0xd0
    f300:	e3520000 	cmp	r2, #0
    f304:	1a00000c 	bne	f33c <CSerialDevice::Peek()+0x58>
    f308:	e2843801 	add	r3, r4, #65536	; 0x10000
    f30c:	e59300ac 	ldr	r0, [r3, #172]	; 0xac
    f310:	e59310b0 	ldr	r1, [r3, #176]	; 0xb0
    f314:	e1500001 	cmp	r0, r1
    f318:	0a000016 	beq	f378 <CSerialDevice::Peek()+0x94>
    f31c:	e59330b0 	ldr	r3, [r3, #176]	; 0xb0
    f320:	e0844003 	add	r4, r4, r3
    f324:	e5d440aa 	ldrb	r4, [r4, #170]	; 0xaa
    f328:	e3520000 	cmp	r2, #0
    f32c:	0a000000 	beq	f334 <CSerialDevice::Peek()+0x50>
    f330:	eb000cf8 	bl	12718 <LeaveCritical>
    f334:	e1a00004 	mov	r0, r4
    f338:	e8bd8070 	pop	{r4, r5, r6, pc}
    f33c:	e1a00002 	mov	r0, r2
    f340:	eb000cc7 	bl	12664 <EnterCritical>
    f344:	e2843801 	add	r3, r4, #65536	; 0x10000
    f348:	e59310ac 	ldr	r1, [r3, #172]	; 0xac
    f34c:	e59320b0 	ldr	r2, [r3, #176]	; 0xb0
    f350:	e1510002 	cmp	r1, r2
    f354:	03e04000 	mvneq	r4, #0
    f358:	e59520d0 	ldr	r2, [r5, #208]	; 0xd0
    f35c:	1affffee 	bne	f31c <CSerialDevice::Peek()+0x38>
    f360:	eafffff0 	b	f328 <CSerialDevice::Peek()+0x44>
    f364:	e59f2014 	ldr	r2, [pc, #20]	; f380 <CSerialDevice::Peek()+0x9c>
    f368:	e59f1014 	ldr	r1, [pc, #20]	; f384 <CSerialDevice::Peek()+0xa0>
    f36c:	e59f0014 	ldr	r0, [pc, #20]	; f388 <CSerialDevice::Peek()+0xa4>
    f370:	ebffedc9 	bl	aa9c <assertion_failed>
    f374:	eaffffdf 	b	f2f8 <CSerialDevice::Peek()+0x14>
    f378:	e3e04000 	mvn	r4, #0
    f37c:	eaffffec 	b	f334 <CSerialDevice::Peek()+0x50>
    f380:	00000191 	.word	0x00000191
    f384:	0001508c 	.word	0x0001508c
    f388:	000140f0 	.word	0x000140f0

0000f38c <CSerialDevice::Flush()>:
    f38c:	e3a03000 	mov	r3, #0
    f390:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    f394:	e59f2010 	ldr	r2, [pc, #16]	; f3ac <CSerialDevice::Flush()+0x20>
    f398:	e5923018 	ldr	r3, [r2, #24]
    f39c:	e2133008 	ands	r3, r3, #8
    f3a0:	1afffffc 	bne	f398 <CSerialDevice::Flush()+0xc>
    f3a4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    f3a8:	e12fff1e 	bx	lr
    f3ac:	20201000 	.word	0x20201000

0000f3b0 <CSerialDevice::Write(unsigned char)>:
    f3b0:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
    f3b4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    f3b8:	e3530000 	cmp	r3, #0
    f3bc:	0a000029 	beq	f468 <CSerialDevice::Write(unsigned char)+0xb8>
    f3c0:	e2805802 	add	r5, r0, #131072	; 0x20000
    f3c4:	e1a04000 	mov	r4, r0
    f3c8:	e59500d0 	ldr	r0, [r5, #208]	; 0xd0
    f3cc:	e1a06001 	mov	r6, r1
    f3d0:	e3500000 	cmp	r0, #0
    f3d4:	1a000016 	bne	f434 <CSerialDevice::Write(unsigned char)+0x84>
    f3d8:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
    f3dc:	e59510bc 	ldr	r1, [r5, #188]	; 0xbc
    f3e0:	e2833001 	add	r3, r3, #1
    f3e4:	e6ff3073 	uxth	r3, r3
    f3e8:	e1530001 	cmp	r3, r1
    f3ec:	0a00001a 	beq	f45c <CSerialDevice::Write(unsigned char)+0xac>
    f3f0:	e3a07001 	mov	r7, #1
    f3f4:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
    f3f8:	e0844003 	add	r4, r4, r3
    f3fc:	e2844801 	add	r4, r4, #65536	; 0x10000
    f400:	e0833007 	add	r3, r3, r7
    f404:	e58530b8 	str	r3, [r5, #184]	; 0xb8
    f408:	e5c460b8 	strb	r6, [r4, #184]	; 0xb8
    f40c:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
    f410:	e6ff3073 	uxth	r3, r3
    f414:	e58530b8 	str	r3, [r5, #184]	; 0xb8
    f418:	e3500000 	cmp	r0, #0
    f41c:	1a000001 	bne	f428 <CSerialDevice::Write(unsigned char)+0x78>
    f420:	e1a00007 	mov	r0, r7
    f424:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f428:	eb000cba 	bl	12718 <LeaveCritical>
    f42c:	e1a00007 	mov	r0, r7
    f430:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f434:	eb000c8a 	bl	12664 <EnterCritical>
    f438:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
    f43c:	e59520bc 	ldr	r2, [r5, #188]	; 0xbc
    f440:	e2833001 	add	r3, r3, #1
    f444:	e6ff3073 	uxth	r3, r3
    f448:	e1530002 	cmp	r3, r2
    f44c:	e59500d0 	ldr	r0, [r5, #208]	; 0xd0
    f450:	03a07000 	moveq	r7, #0
    f454:	1affffe5 	bne	f3f0 <CSerialDevice::Write(unsigned char)+0x40>
    f458:	eaffffee 	b	f418 <CSerialDevice::Write(unsigned char)+0x68>
    f45c:	e1a07000 	mov	r7, r0
    f460:	e1a00007 	mov	r0, r7
    f464:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f468:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    f46c:	e59f201c 	ldr	r2, [pc, #28]	; f490 <CSerialDevice::Write(unsigned char)+0xe0>
    f470:	e5923018 	ldr	r3, [r2, #24]
    f474:	e2133020 	ands	r3, r3, #32
    f478:	1afffffc 	bne	f470 <CSerialDevice::Write(unsigned char)+0xc0>
    f47c:	e5821000 	str	r1, [r2]
    f480:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    f484:	e3a07001 	mov	r7, #1
    f488:	e1a00007 	mov	r0, r7
    f48c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f490:	20201000 	.word	0x20201000

0000f494 <CSerialDevice::Write(void const*, unsigned int)>:
    f494:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    f498:	e2804802 	add	r4, r0, #131072	; 0x20000
    f49c:	e1a07000 	mov	r7, r0
    f4a0:	e59400d4 	ldr	r0, [r4, #212]	; 0xd4
    f4a4:	e1a05001 	mov	r5, r1
    f4a8:	e3500000 	cmp	r0, #0
    f4ac:	e1a08002 	mov	r8, r2
    f4b0:	1a000054 	bne	f608 <CSerialDevice::Write(void const*, unsigned int)+0x174>
    f4b4:	e3550000 	cmp	r5, #0
    f4b8:	0a00005a 	beq	f628 <CSerialDevice::Write(void const*, unsigned int)+0x194>
    f4bc:	e3580000 	cmp	r8, #0
    f4c0:	0a00005d 	beq	f63c <CSerialDevice::Write(void const*, unsigned int)+0x1a8>
    f4c4:	e3a06000 	mov	r6, #0
    f4c8:	e3a0900d 	mov	r9, #13
    f4cc:	ea000002 	b	f4dc <CSerialDevice::Write(void const*, unsigned int)+0x48>
    f4d0:	e2866001 	add	r6, r6, #1
    f4d4:	e1560008 	cmp	r6, r8
    f4d8:	0a00000f 	beq	f51c <CSerialDevice::Write(void const*, unsigned int)+0x88>
    f4dc:	e5d51000 	ldrb	r1, [r5]
    f4e0:	e1a00007 	mov	r0, r7
    f4e4:	ebffffb1 	bl	f3b0 <CSerialDevice::Write(unsigned char)>
    f4e8:	e3500000 	cmp	r0, #0
    f4ec:	0a00000a 	beq	f51c <CSerialDevice::Write(void const*, unsigned int)+0x88>
    f4f0:	e4d53001 	ldrb	r3, [r5], #1
    f4f4:	e353000a 	cmp	r3, #10
    f4f8:	1afffff4 	bne	f4d0 <CSerialDevice::Write(void const*, unsigned int)+0x3c>
    f4fc:	e59430c0 	ldr	r3, [r4, #192]	; 0xc0
    f500:	e3130001 	tst	r3, #1
    f504:	0afffff1 	beq	f4d0 <CSerialDevice::Write(void const*, unsigned int)+0x3c>
    f508:	e1a01009 	mov	r1, r9
    f50c:	e1a00007 	mov	r0, r7
    f510:	ebffffa6 	bl	f3b0 <CSerialDevice::Write(unsigned char)>
    f514:	e3500000 	cmp	r0, #0
    f518:	1affffec 	bne	f4d0 <CSerialDevice::Write(void const*, unsigned int)+0x3c>
    f51c:	e59430d4 	ldr	r3, [r4, #212]	; 0xd4
    f520:	e3530000 	cmp	r3, #0
    f524:	1a000035 	bne	f600 <CSerialDevice::Write(void const*, unsigned int)+0x16c>
    f528:	e59730a4 	ldr	r3, [r7, #164]	; 0xa4
    f52c:	e3530000 	cmp	r3, #0
    f530:	0a000028 	beq	f5d8 <CSerialDevice::Write(void const*, unsigned int)+0x144>
    f534:	e59400d0 	ldr	r0, [r4, #208]	; 0xd0
    f538:	e3500000 	cmp	r0, #0
    f53c:	1a000033 	bne	f610 <CSerialDevice::Write(void const*, unsigned int)+0x17c>
    f540:	e59420b8 	ldr	r2, [r4, #184]	; 0xb8
    f544:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    f548:	e1520003 	cmp	r2, r3
    f54c:	0a000021 	beq	f5d8 <CSerialDevice::Write(void const*, unsigned int)+0x144>
    f550:	e3a03000 	mov	r3, #0
    f554:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    f558:	e59430b8 	ldr	r3, [r4, #184]	; 0xb8
    f55c:	e59420bc 	ldr	r2, [r4, #188]	; 0xbc
    f560:	e1520003 	cmp	r2, r3
    f564:	0a000016 	beq	f5c4 <CSerialDevice::Write(void const*, unsigned int)+0x130>
    f568:	e59f20d4 	ldr	r2, [pc, #212]	; f644 <CSerialDevice::Write(void const*, unsigned int)+0x1b0>
    f56c:	e5923018 	ldr	r3, [r2, #24]
    f570:	e3130020 	tst	r3, #32
    f574:	1a00001c 	bne	f5ec <CSerialDevice::Write(void const*, unsigned int)+0x158>
    f578:	e59f00c8 	ldr	r0, [pc, #200]	; f648 <CSerialDevice::Write(void const*, unsigned int)+0x1b4>
    f57c:	ea000002 	b	f58c <CSerialDevice::Write(void const*, unsigned int)+0xf8>
    f580:	e5923018 	ldr	r3, [r2, #24]
    f584:	e3130020 	tst	r3, #32
    f588:	1a000017 	bne	f5ec <CSerialDevice::Write(void const*, unsigned int)+0x158>
    f58c:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    f590:	e2831001 	add	r1, r3, #1
    f594:	e0873003 	add	r3, r7, r3
    f598:	e58410bc 	str	r1, [r4, #188]	; 0xbc
    f59c:	e2833801 	add	r3, r3, #65536	; 0x10000
    f5a0:	e5d330b8 	ldrb	r3, [r3, #184]	; 0xb8
    f5a4:	e5823000 	str	r3, [r2]
    f5a8:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    f5ac:	e0033000 	and	r3, r3, r0
    f5b0:	e58430bc 	str	r3, [r4, #188]	; 0xbc
    f5b4:	e59410b8 	ldr	r1, [r4, #184]	; 0xb8
    f5b8:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    f5bc:	e1510003 	cmp	r1, r3
    f5c0:	1affffee 	bne	f580 <CSerialDevice::Write(void const*, unsigned int)+0xec>
    f5c4:	e3a03000 	mov	r3, #0
    f5c8:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    f5cc:	e59430d0 	ldr	r3, [r4, #208]	; 0xd0
    f5d0:	e3530000 	cmp	r3, #0
    f5d4:	1a000001 	bne	f5e0 <CSerialDevice::Write(void const*, unsigned int)+0x14c>
    f5d8:	e1a00006 	mov	r0, r6
    f5dc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    f5e0:	eb000c4c 	bl	12718 <LeaveCritical>
    f5e4:	e1a00006 	mov	r0, r6
    f5e8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    f5ec:	e59f2050 	ldr	r2, [pc, #80]	; f644 <CSerialDevice::Write(void const*, unsigned int)+0x1b0>
    f5f0:	e5923038 	ldr	r3, [r2, #56]	; 0x38
    f5f4:	e3833020 	orr	r3, r3, #32
    f5f8:	e5823038 	str	r3, [r2, #56]	; 0x38
    f5fc:	eafffff0 	b	f5c4 <CSerialDevice::Write(void const*, unsigned int)+0x130>
    f600:	eb000c44 	bl	12718 <LeaveCritical>
    f604:	eaffffc7 	b	f528 <CSerialDevice::Write(void const*, unsigned int)+0x94>
    f608:	eb000c15 	bl	12664 <EnterCritical>
    f60c:	eaffffa8 	b	f4b4 <CSerialDevice::Write(void const*, unsigned int)+0x20>
    f610:	eb000c13 	bl	12664 <EnterCritical>
    f614:	e59420b8 	ldr	r2, [r4, #184]	; 0xb8
    f618:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    f61c:	e1520003 	cmp	r2, r3
    f620:	1affffca 	bne	f550 <CSerialDevice::Write(void const*, unsigned int)+0xbc>
    f624:	eaffffe8 	b	f5cc <CSerialDevice::Write(void const*, unsigned int)+0x138>
    f628:	e3a020c3 	mov	r2, #195	; 0xc3
    f62c:	e59f1018 	ldr	r1, [pc, #24]	; f64c <CSerialDevice::Write(void const*, unsigned int)+0x1b8>
    f630:	e59f0018 	ldr	r0, [pc, #24]	; f650 <CSerialDevice::Write(void const*, unsigned int)+0x1bc>
    f634:	ebffed18 	bl	aa9c <assertion_failed>
    f638:	eaffff9f 	b	f4bc <CSerialDevice::Write(void const*, unsigned int)+0x28>
    f63c:	e1a06008 	mov	r6, r8
    f640:	eaffffb5 	b	f51c <CSerialDevice::Write(void const*, unsigned int)+0x88>
    f644:	20201000 	.word	0x20201000
    f648:	0000ffff 	.word	0x0000ffff
    f64c:	0001508c 	.word	0x0001508c
    f650:	00014068 	.word	0x00014068

0000f654 <CSerialDevice::InterruptHandler()>:
    f654:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f658:	e2804802 	add	r4, r0, #131072	; 0x20000
    f65c:	e1a05000 	mov	r5, r0
    f660:	e59400d0 	ldr	r0, [r4, #208]	; 0xd0
    f664:	e24dd004 	sub	sp, sp, #4
    f668:	e3500000 	cmp	r0, #0
    f66c:	1a000070 	bne	f834 <CSerialDevice::InterruptHandler()+0x1e0>
    f670:	e3a06000 	mov	r6, #0
    f674:	ee076f9a 	mcr	15, 0, r6, cr7, cr10, {4}
    f678:	e59f21c4 	ldr	r2, [pc, #452]	; f844 <CSerialDevice::InterruptHandler()+0x1f0>
    f67c:	e3e08002 	mvn	r8, #2
    f680:	e1a00002 	mov	r0, r2
    f684:	e3e0e001 	mvn	lr, #1
    f688:	e3e07000 	mvn	r7, #0
    f68c:	e5921040 	ldr	r1, [r2, #64]	; 0x40
    f690:	e59fc1b0 	ldr	ip, [pc, #432]	; f848 <CSerialDevice::InterruptHandler()+0x1f4>
    f694:	e2853801 	add	r3, r5, #65536	; 0x10000
    f698:	e5821044 	str	r1, [r2, #68]	; 0x44
    f69c:	e5902018 	ldr	r2, [r0, #24]
    f6a0:	e3120010 	tst	r2, #16
    f6a4:	1a00001f 	bne	f728 <CSerialDevice::InterruptHandler()+0xd4>
    f6a8:	e5901000 	ldr	r1, [r0]
    f6ac:	e3110b01 	tst	r1, #1024	; 0x400
    f6b0:	0a000040 	beq	f7b8 <CSerialDevice::InterruptHandler()+0x164>
    f6b4:	e59320b4 	ldr	r2, [r3, #180]	; 0xb4
    f6b8:	e3520000 	cmp	r2, #0
    f6bc:	058370b4 	streq	r7, [r3, #180]	; 0xb4
    f6c0:	e59490c4 	ldr	r9, [r4, #196]	; 0xc4
    f6c4:	e3590000 	cmp	r9, #0
    f6c8:	0a000005 	beq	f6e4 <CSerialDevice::InterruptHandler()+0x90>
    f6cc:	e594a0c8 	ldr	sl, [r4, #200]	; 0xc8
    f6d0:	e6af2071 	sxtb	r2, r1
    f6d4:	e1dab0d0 	ldrsb	fp, [sl]
    f6d8:	e15b0002 	cmp	fp, r2
    f6dc:	158490c8 	strne	r9, [r4, #200]	; 0xc8
    f6e0:	0a000044 	beq	f7f8 <CSerialDevice::InterruptHandler()+0x1a4>
    f6e4:	e59320ac 	ldr	r2, [r3, #172]	; 0xac
    f6e8:	e59390b0 	ldr	r9, [r3, #176]	; 0xb0
    f6ec:	e2822001 	add	r2, r2, #1
    f6f0:	e002200c 	and	r2, r2, ip
    f6f4:	e1520009 	cmp	r2, r9
    f6f8:	0a000034 	beq	f7d0 <CSerialDevice::InterruptHandler()+0x17c>
    f6fc:	e59320ac 	ldr	r2, [r3, #172]	; 0xac
    f700:	e2829001 	add	r9, r2, #1
    f704:	e0852002 	add	r2, r5, r2
    f708:	e58390ac 	str	r9, [r3, #172]	; 0xac
    f70c:	e5c210aa 	strb	r1, [r2, #170]	; 0xaa
    f710:	e59320ac 	ldr	r2, [r3, #172]	; 0xac
    f714:	e002200c 	and	r2, r2, ip
    f718:	e58320ac 	str	r2, [r3, #172]	; 0xac
    f71c:	e5902018 	ldr	r2, [r0, #24]
    f720:	e3120010 	tst	r2, #16
    f724:	0affffdf 	beq	f6a8 <CSerialDevice::InterruptHandler()+0x54>
    f728:	e5903018 	ldr	r3, [r0, #24]
    f72c:	e3130020 	tst	r3, #32
    f730:	1a000017 	bne	f794 <CSerialDevice::InterruptHandler()+0x140>
    f734:	e59420b8 	ldr	r2, [r4, #184]	; 0xb8
    f738:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    f73c:	e1520003 	cmp	r2, r3
    f740:	0a000032 	beq	f810 <CSerialDevice::InterruptHandler()+0x1bc>
    f744:	e59f20f8 	ldr	r2, [pc, #248]	; f844 <CSerialDevice::InterruptHandler()+0x1f0>
    f748:	e59f00f8 	ldr	r0, [pc, #248]	; f848 <CSerialDevice::InterruptHandler()+0x1f4>
    f74c:	ea000003 	b	f760 <CSerialDevice::InterruptHandler()+0x10c>
    f750:	e59410b8 	ldr	r1, [r4, #184]	; 0xb8
    f754:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    f758:	e1510003 	cmp	r1, r3
    f75c:	0a00002b 	beq	f810 <CSerialDevice::InterruptHandler()+0x1bc>
    f760:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    f764:	e2831001 	add	r1, r3, #1
    f768:	e0853003 	add	r3, r5, r3
    f76c:	e58410bc 	str	r1, [r4, #188]	; 0xbc
    f770:	e2833801 	add	r3, r3, #65536	; 0x10000
    f774:	e5d330b8 	ldrb	r3, [r3, #184]	; 0xb8
    f778:	e5823000 	str	r3, [r2]
    f77c:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    f780:	e0033000 	and	r3, r3, r0
    f784:	e58430bc 	str	r3, [r4, #188]	; 0xbc
    f788:	e5923018 	ldr	r3, [r2, #24]
    f78c:	e3130020 	tst	r3, #32
    f790:	0affffee 	beq	f750 <CSerialDevice::InterruptHandler()+0xfc>
    f794:	e3a03000 	mov	r3, #0
    f798:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    f79c:	e59430d0 	ldr	r3, [r4, #208]	; 0xd0
    f7a0:	e3530000 	cmp	r3, #0
    f7a4:	1a000024 	bne	f83c <CSerialDevice::InterruptHandler()+0x1e8>
    f7a8:	e3560000 	cmp	r6, #0
    f7ac:	1a00001c 	bne	f824 <CSerialDevice::InterruptHandler()+0x1d0>
    f7b0:	e28dd004 	add	sp, sp, #4
    f7b4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f7b8:	e3110b02 	tst	r1, #2048	; 0x800
    f7bc:	0a000007 	beq	f7e0 <CSerialDevice::InterruptHandler()+0x18c>
    f7c0:	e59320b4 	ldr	r2, [r3, #180]	; 0xb4
    f7c4:	e3520000 	cmp	r2, #0
    f7c8:	0583e0b4 	streq	lr, [r3, #180]	; 0xb4
    f7cc:	eaffffbb 	b	f6c0 <CSerialDevice::InterruptHandler()+0x6c>
    f7d0:	e59320b4 	ldr	r2, [r3, #180]	; 0xb4
    f7d4:	e3520000 	cmp	r2, #0
    f7d8:	0583e0b4 	streq	lr, [r3, #180]	; 0xb4
    f7dc:	eaffffae 	b	f69c <CSerialDevice::InterruptHandler()+0x48>
    f7e0:	e3110c01 	tst	r1, #256	; 0x100
    f7e4:	0affffb5 	beq	f6c0 <CSerialDevice::InterruptHandler()+0x6c>
    f7e8:	e59320b4 	ldr	r2, [r3, #180]	; 0xb4
    f7ec:	e3520000 	cmp	r2, #0
    f7f0:	058380b4 	streq	r8, [r3, #180]	; 0xb4
    f7f4:	eaffffb1 	b	f6c0 <CSerialDevice::InterruptHandler()+0x6c>
    f7f8:	e28a2001 	add	r2, sl, #1
    f7fc:	e58420c8 	str	r2, [r4, #200]	; 0xc8
    f800:	e1da20d1 	ldrsb	r2, [sl, #1]
    f804:	e3520000 	cmp	r2, #0
    f808:	03a06001 	moveq	r6, #1
    f80c:	eaffffb4 	b	f6e4 <CSerialDevice::InterruptHandler()+0x90>
    f810:	e59f202c 	ldr	r2, [pc, #44]	; f844 <CSerialDevice::InterruptHandler()+0x1f0>
    f814:	e5923038 	ldr	r3, [r2, #56]	; 0x38
    f818:	e3c33020 	bic	r3, r3, #32
    f81c:	e5823038 	str	r3, [r2, #56]	; 0x38
    f820:	eaffffdb 	b	f794 <CSerialDevice::InterruptHandler()+0x140>
    f824:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
    f828:	e28dd004 	add	sp, sp, #4
    f82c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f830:	e12fff13 	bx	r3
    f834:	eb000b8a 	bl	12664 <EnterCritical>
    f838:	eaffff8c 	b	f670 <CSerialDevice::InterruptHandler()+0x1c>
    f83c:	eb000bb5 	bl	12718 <LeaveCritical>
    f840:	eaffffd8 	b	f7a8 <CSerialDevice::InterruptHandler()+0x154>
    f844:	20201000 	.word	0x20201000
    f848:	0000ffff 	.word	0x0000ffff

0000f84c <CSerialDevice::InterruptStub(void*)>:
    f84c:	e92d4010 	push	{r4, lr}
    f850:	e2504000 	subs	r4, r0, #0
    f854:	0a000002 	beq	f864 <CSerialDevice::InterruptStub(void*)+0x18>
    f858:	e1a00004 	mov	r0, r4
    f85c:	e8bd4010 	pop	{r4, lr}
    f860:	eaffff7b 	b	f654 <CSerialDevice::InterruptHandler()>
    f864:	e59f0014 	ldr	r0, [pc, #20]	; f880 <CSerialDevice::InterruptStub(void*)+0x34>
    f868:	e59f2014 	ldr	r2, [pc, #20]	; f884 <CSerialDevice::InterruptStub(void*)+0x38>
    f86c:	e59f1014 	ldr	r1, [pc, #20]	; f888 <CSerialDevice::InterruptStub(void*)+0x3c>
    f870:	ebffec89 	bl	aa9c <assertion_failed>
    f874:	e1a00004 	mov	r0, r4
    f878:	e8bd4010 	pop	{r4, lr}
    f87c:	eaffff74 	b	f654 <CSerialDevice::InterruptHandler()>
    f880:	00014134 	.word	0x00014134
    f884:	0000022e 	.word	0x0000022e
    f888:	0001508c 	.word	0x0001508c

0000f88c <CSerialDevice::~CSerialDevice()>:
    f88c:	e59f20a4 	ldr	r2, [pc, #164]	; f938 <CSerialDevice::~CSerialDevice()+0xac>
    f890:	e92d4010 	push	{r4, lr}
    f894:	e3a03000 	mov	r3, #0
    f898:	e1a04000 	mov	r4, r0
    f89c:	e5802000 	str	r2, [r0]
    f8a0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    f8a4:	e59f2090 	ldr	r2, [pc, #144]	; f93c <CSerialDevice::~CSerialDevice()+0xb0>
    f8a8:	e5823038 	str	r3, [r2, #56]	; 0x38
    f8ac:	e5823030 	str	r3, [r2, #48]	; 0x30
    f8b0:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    f8b4:	e5d030a9 	ldrb	r3, [r0, #169]	; 0xa9
    f8b8:	e3530000 	cmp	r3, #0
    f8bc:	0a000006 	beq	f8dc <CSerialDevice::~CSerialDevice()+0x50>
    f8c0:	e59000a4 	ldr	r0, [r0, #164]	; 0xa4
    f8c4:	e3500000 	cmp	r0, #0
    f8c8:	0a000014 	beq	f920 <CSerialDevice::~CSerialDevice()+0x94>
    f8cc:	e5d430a8 	ldrb	r3, [r4, #168]	; 0xa8
    f8d0:	e3530000 	cmp	r3, #0
    f8d4:	0a00000e 	beq	f914 <CSerialDevice::~CSerialDevice()+0x88>
    f8d8:	ebfff2bf 	bl	c3dc <CInterruptSystem::DisconnectFIQ()>
    f8dc:	e3a03000 	mov	r3, #0
    f8e0:	e284007c 	add	r0, r4, #124	; 0x7c
    f8e4:	e58430a4 	str	r3, [r4, #164]	; 0xa4
    f8e8:	ebffef3a 	bl	b5d8 <CGPIOPin::~CGPIOPin()>
    f8ec:	e2840054 	add	r0, r4, #84	; 0x54
    f8f0:	ebffef38 	bl	b5d8 <CGPIOPin::~CGPIOPin()>
    f8f4:	e284002c 	add	r0, r4, #44	; 0x2c
    f8f8:	ebffef36 	bl	b5d8 <CGPIOPin::~CGPIOPin()>
    f8fc:	e2840004 	add	r0, r4, #4
    f900:	ebffef34 	bl	b5d8 <CGPIOPin::~CGPIOPin()>
    f904:	e1a00004 	mov	r0, r4
    f908:	ebffed95 	bl	af64 <CDevice::~CDevice()>
    f90c:	e1a00004 	mov	r0, r4
    f910:	e8bd8010 	pop	{r4, pc}
    f914:	e3a01039 	mov	r1, #57	; 0x39
    f918:	ebfff32a 	bl	c5c8 <CInterruptSystem::DisconnectIRQ(unsigned int)>
    f91c:	eaffffee 	b	f8dc <CSerialDevice::~CSerialDevice()+0x50>
    f920:	e59f0018 	ldr	r0, [pc, #24]	; f940 <CSerialDevice::~CSerialDevice()+0xb4>
    f924:	e3a02079 	mov	r2, #121	; 0x79
    f928:	e59f1014 	ldr	r1, [pc, #20]	; f944 <CSerialDevice::~CSerialDevice()+0xb8>
    f92c:	ebffec5a 	bl	aa9c <assertion_failed>
    f930:	e59400a4 	ldr	r0, [r4, #164]	; 0xa4
    f934:	eaffffe4 	b	f8cc <CSerialDevice::~CSerialDevice()+0x40>
    f938:	00015078 	.word	0x00015078
    f93c:	20201000 	.word	0x20201000
    f940:	000140f0 	.word	0x000140f0
    f944:	0001508c 	.word	0x0001508c

0000f948 <CSerialDevice::~CSerialDevice()>:
    f948:	e92d4010 	push	{r4, lr}
    f94c:	e1a04000 	mov	r4, r0
    f950:	ebffffcd 	bl	f88c <CSerialDevice::~CSerialDevice()>
    f954:	e1a00004 	mov	r0, r4
    f958:	e59f1008 	ldr	r1, [pc, #8]	; f968 <CSerialDevice::~CSerialDevice()+0x20>
    f95c:	eb000b9e 	bl	127dc <operator delete(void*, unsigned int)>
    f960:	e1a00004 	mov	r0, r4
    f964:	e8bd8010 	pop	{r4, pc}
    f968:	000200d8 	.word	0x000200d8
    f96c:	00000000 	.word	0x00000000

0000f970 <CString::~CString()>:
    f970:	e92d4010 	push	{r4, lr}
    f974:	e1a04000 	mov	r4, r0
    f978:	e5900004 	ldr	r0, [r0, #4]
    f97c:	e59f3014 	ldr	r3, [pc, #20]	; f998 <CString::~CString()+0x28>
    f980:	e3500000 	cmp	r0, #0
    f984:	e5843000 	str	r3, [r4]
    f988:	0a000000 	beq	f990 <CString::~CString()+0x20>
    f98c:	eb000b91 	bl	127d8 <operator delete[](void*)>
    f990:	e1a00004 	mov	r0, r4
    f994:	e8bd8010 	pop	{r4, pc}
    f998:	000150a0 	.word	0x000150a0

0000f99c <CString::~CString()>:
    f99c:	e92d4010 	push	{r4, lr}
    f9a0:	e1a04000 	mov	r4, r0
    f9a4:	e5900004 	ldr	r0, [r0, #4]
    f9a8:	e59f3020 	ldr	r3, [pc, #32]	; f9d0 <CString::~CString()+0x34>
    f9ac:	e3500000 	cmp	r0, #0
    f9b0:	e5843000 	str	r3, [r4]
    f9b4:	0a000000 	beq	f9bc <CString::~CString()+0x20>
    f9b8:	eb000b86 	bl	127d8 <operator delete[](void*)>
    f9bc:	e1a00004 	mov	r0, r4
    f9c0:	e3a01010 	mov	r1, #16
    f9c4:	eb000b84 	bl	127dc <operator delete(void*, unsigned int)>
    f9c8:	e1a00004 	mov	r0, r4
    f9cc:	e8bd8010 	pop	{r4, pc}
    f9d0:	000150a0 	.word	0x000150a0

0000f9d4 <CString::ReserveSpace(unsigned int) [clone .part.0]>:
    f9d4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    f9d8:	e990002c 	ldmib	r0, {r2, r3, r5}
    f9dc:	e0455002 	sub	r5, r5, r2
    f9e0:	e0851001 	add	r1, r5, r1
    f9e4:	e2812001 	add	r2, r1, #1
    f9e8:	e1520003 	cmp	r2, r3
    f9ec:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
    f9f0:	e1a04000 	mov	r4, r0
    f9f4:	e2816041 	add	r6, r1, #65	; 0x41
    f9f8:	e1a00006 	mov	r0, r6
    f9fc:	eb000b73 	bl	127d0 <operator new[](unsigned int)>
    fa00:	e3a02000 	mov	r2, #0
    fa04:	e594300c 	ldr	r3, [r4, #12]
    fa08:	e1a07000 	mov	r7, r0
    fa0c:	e5c32000 	strb	r2, [r3]
    fa10:	e5941004 	ldr	r1, [r4, #4]
    fa14:	eb00084c 	bl	11b4c <strcpy>
    fa18:	e5940004 	ldr	r0, [r4, #4]
    fa1c:	e3500000 	cmp	r0, #0
    fa20:	0a000000 	beq	fa28 <CString::ReserveSpace(unsigned int) [clone .part.0]+0x54>
    fa24:	eb000b6b 	bl	127d8 <operator delete[](void*)>
    fa28:	e0875005 	add	r5, r7, r5
    fa2c:	e584500c 	str	r5, [r4, #12]
    fa30:	e5847004 	str	r7, [r4, #4]
    fa34:	e5846008 	str	r6, [r4, #8]
    fa38:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000fa3c <CString::CString()>:
    fa3c:	e3a02000 	mov	r2, #0
    fa40:	e59f1008 	ldr	r1, [pc, #8]	; fa50 <CString::CString()+0x14>
    fa44:	e5802008 	str	r2, [r0, #8]
    fa48:	e8800006 	stm	r0, {r1, r2}
    fa4c:	e12fff1e 	bx	lr
    fa50:	000150a0 	.word	0x000150a0

0000fa54 <CString::CString(char const*)>:
    fa54:	e92d4070 	push	{r4, r5, r6, lr}
    fa58:	e1a04000 	mov	r4, r0
    fa5c:	e59f302c 	ldr	r3, [pc, #44]	; fa90 <CString::CString(char const*)+0x3c>
    fa60:	e1a00001 	mov	r0, r1
    fa64:	e5843000 	str	r3, [r4]
    fa68:	e1a05001 	mov	r5, r1
    fa6c:	eb0007b8 	bl	11954 <strlen>
    fa70:	e2800001 	add	r0, r0, #1
    fa74:	e5840008 	str	r0, [r4, #8]
    fa78:	eb000b54 	bl	127d0 <operator new[](unsigned int)>
    fa7c:	e1a01005 	mov	r1, r5
    fa80:	e5840004 	str	r0, [r4, #4]
    fa84:	eb000830 	bl	11b4c <strcpy>
    fa88:	e1a00004 	mov	r0, r4
    fa8c:	e8bd8070 	pop	{r4, r5, r6, pc}
    fa90:	000150a0 	.word	0x000150a0

0000fa94 <CString::operator char const*() const>:
    fa94:	e5900004 	ldr	r0, [r0, #4]
    fa98:	e59f3008 	ldr	r3, [pc, #8]	; faa8 <CString::operator char const*() const+0x14>
    fa9c:	e3500000 	cmp	r0, #0
    faa0:	01a00003 	moveq	r0, r3
    faa4:	e12fff1e 	bx	lr
    faa8:	0001533c 	.word	0x0001533c

0000faac <CString::operator=(char const*)>:
    faac:	e92d4070 	push	{r4, r5, r6, lr}
    fab0:	e1a04000 	mov	r4, r0
    fab4:	e5900004 	ldr	r0, [r0, #4]
    fab8:	e1a05001 	mov	r5, r1
    fabc:	e3500000 	cmp	r0, #0
    fac0:	0a000000 	beq	fac8 <CString::operator=(char const*)+0x1c>
    fac4:	eb000b43 	bl	127d8 <operator delete[](void*)>
    fac8:	e1a00005 	mov	r0, r5
    facc:	eb0007a0 	bl	11954 <strlen>
    fad0:	e2800001 	add	r0, r0, #1
    fad4:	e5840008 	str	r0, [r4, #8]
    fad8:	eb000b3c 	bl	127d0 <operator new[](unsigned int)>
    fadc:	e1a01005 	mov	r1, r5
    fae0:	e5840004 	str	r0, [r4, #4]
    fae4:	eb000818 	bl	11b4c <strcpy>
    fae8:	e5940004 	ldr	r0, [r4, #4]
    faec:	e8bd8070 	pop	{r4, r5, r6, pc}

0000faf0 <CString::operator=(CString const&)>:
    faf0:	e92d4070 	push	{r4, r5, r6, lr}
    faf4:	e1a04000 	mov	r4, r0
    faf8:	e5900004 	ldr	r0, [r0, #4]
    fafc:	e1a06001 	mov	r6, r1
    fb00:	e3500000 	cmp	r0, #0
    fb04:	0a000000 	beq	fb0c <CString::operator=(CString const&)+0x1c>
    fb08:	eb000b32 	bl	127d8 <operator delete[](void*)>
    fb0c:	e5960004 	ldr	r0, [r6, #4]
    fb10:	e59f5030 	ldr	r5, [pc, #48]	; fb48 <CString::operator=(CString const&)+0x58>
    fb14:	e3500000 	cmp	r0, #0
    fb18:	01a00005 	moveq	r0, r5
    fb1c:	eb00078c 	bl	11954 <strlen>
    fb20:	e2800001 	add	r0, r0, #1
    fb24:	e5840008 	str	r0, [r4, #8]
    fb28:	eb000b28 	bl	127d0 <operator new[](unsigned int)>
    fb2c:	e5840004 	str	r0, [r4, #4]
    fb30:	e5961004 	ldr	r1, [r6, #4]
    fb34:	e3510000 	cmp	r1, #0
    fb38:	01a01005 	moveq	r1, r5
    fb3c:	eb000802 	bl	11b4c <strcpy>
    fb40:	e1a00004 	mov	r0, r4
    fb44:	e8bd8070 	pop	{r4, r5, r6, pc}
    fb48:	0001533c 	.word	0x0001533c

0000fb4c <CString::GetLength() const>:
    fb4c:	e5900004 	ldr	r0, [r0, #4]
    fb50:	e3500000 	cmp	r0, #0
    fb54:	012fff1e 	bxeq	lr
    fb58:	ea00077d 	b	11954 <strlen>

0000fb5c <CString::Append(char const*)>:
    fb5c:	e92d4070 	push	{r4, r5, r6, lr}
    fb60:	e3a03001 	mov	r3, #1
    fb64:	e1a04000 	mov	r4, r0
    fb68:	e5900004 	ldr	r0, [r0, #4]
    fb6c:	e1a06001 	mov	r6, r1
    fb70:	e3500000 	cmp	r0, #0
    fb74:	e5843008 	str	r3, [r4, #8]
    fb78:	0a000003 	beq	fb8c <CString::Append(char const*)+0x30>
    fb7c:	eb000774 	bl	11954 <strlen>
    fb80:	e5943008 	ldr	r3, [r4, #8]
    fb84:	e0830000 	add	r0, r3, r0
    fb88:	e5840008 	str	r0, [r4, #8]
    fb8c:	e1a00006 	mov	r0, r6
    fb90:	eb00076f 	bl	11954 <strlen>
    fb94:	e5943008 	ldr	r3, [r4, #8]
    fb98:	e0800003 	add	r0, r0, r3
    fb9c:	e5840008 	str	r0, [r4, #8]
    fba0:	eb000b0a 	bl	127d0 <operator new[](unsigned int)>
    fba4:	e5941004 	ldr	r1, [r4, #4]
    fba8:	e1a05000 	mov	r5, r0
    fbac:	e3510000 	cmp	r1, #0
    fbb0:	05c01000 	strbeq	r1, [r0]
    fbb4:	0a000004 	beq	fbcc <CString::Append(char const*)+0x70>
    fbb8:	eb0007e3 	bl	11b4c <strcpy>
    fbbc:	e5940004 	ldr	r0, [r4, #4]
    fbc0:	e3500000 	cmp	r0, #0
    fbc4:	0a000000 	beq	fbcc <CString::Append(char const*)+0x70>
    fbc8:	eb000b02 	bl	127d8 <operator delete[](void*)>
    fbcc:	e1a01006 	mov	r1, r6
    fbd0:	e1a00005 	mov	r0, r5
    fbd4:	eb0007fa 	bl	11bc4 <strcat>
    fbd8:	e5845004 	str	r5, [r4, #4]
    fbdc:	e8bd8070 	pop	{r4, r5, r6, pc}

0000fbe0 <CString::Compare(char const*) const>:
    fbe0:	e5900004 	ldr	r0, [r0, #4]
    fbe4:	ea000764 	b	1197c <strcmp>

0000fbe8 <CString::Find(char) const>:
    fbe8:	e5902004 	ldr	r2, [r0, #4]
    fbec:	e1d230d0 	ldrsb	r3, [r2]
    fbf0:	e3530000 	cmp	r3, #0
    fbf4:	0a000009 	beq	fc20 <CString::Find(char) const+0x38>
    fbf8:	e1510003 	cmp	r1, r3
    fbfc:	e3a00000 	mov	r0, #0
    fc00:	1a000002 	bne	fc10 <CString::Find(char) const+0x28>
    fc04:	ea000007 	b	fc28 <CString::Find(char) const+0x40>
    fc08:	e1530001 	cmp	r3, r1
    fc0c:	012fff1e 	bxeq	lr
    fc10:	e1f230d1 	ldrsb	r3, [r2, #1]!
    fc14:	e2800001 	add	r0, r0, #1
    fc18:	e3530000 	cmp	r3, #0
    fc1c:	1afffff9 	bne	fc08 <CString::Find(char) const+0x20>
    fc20:	e3e00000 	mvn	r0, #0
    fc24:	e12fff1e 	bx	lr
    fc28:	e12fff1e 	bx	lr

0000fc2c <CString::PutChar(char, unsigned int)>:
    fc2c:	e92d4070 	push	{r4, r5, r6, lr}
    fc30:	e2524000 	subs	r4, r2, #0
    fc34:	08bd8070 	popeq	{r4, r5, r6, pc}
    fc38:	e1a06001 	mov	r6, r1
    fc3c:	e1a01004 	mov	r1, r4
    fc40:	e1a05000 	mov	r5, r0
    fc44:	ebffff62 	bl	f9d4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    fc48:	e2443001 	sub	r3, r4, #1
    fc4c:	e595200c 	ldr	r2, [r5, #12]
    fc50:	e2433001 	sub	r3, r3, #1
    fc54:	e2820001 	add	r0, r2, #1
    fc58:	e3730001 	cmn	r3, #1
    fc5c:	e585000c 	str	r0, [r5, #12]
    fc60:	e5c26000 	strb	r6, [r2]
    fc64:	1afffff8 	bne	fc4c <CString::PutChar(char, unsigned int)+0x20>
    fc68:	e8bd8070 	pop	{r4, r5, r6, pc}

0000fc6c <CString::PutString(char const*)>:
    fc6c:	e92d4070 	push	{r4, r5, r6, lr}
    fc70:	e1a04000 	mov	r4, r0
    fc74:	e1a00001 	mov	r0, r1
    fc78:	e1a05001 	mov	r5, r1
    fc7c:	eb000734 	bl	11954 <strlen>
    fc80:	e2506000 	subs	r6, r0, #0
    fc84:	0a000002 	beq	fc94 <CString::PutString(char const*)+0x28>
    fc88:	e1a01006 	mov	r1, r6
    fc8c:	e1a00004 	mov	r0, r4
    fc90:	ebffff4f 	bl	f9d4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    fc94:	e1a01005 	mov	r1, r5
    fc98:	e594000c 	ldr	r0, [r4, #12]
    fc9c:	eb0007aa 	bl	11b4c <strcpy>
    fca0:	e594100c 	ldr	r1, [r4, #12]
    fca4:	e0811006 	add	r1, r1, r6
    fca8:	e584100c 	str	r1, [r4, #12]
    fcac:	e8bd8070 	pop	{r4, r5, r6, pc}

0000fcb0 <CString::Replace(char const*, char const*)>:
    fcb0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fcb4:	e1d180d0 	ldrsb	r8, [r1]
    fcb8:	e24dd014 	sub	sp, sp, #20
    fcbc:	e3580000 	cmp	r8, #0
    fcc0:	1a000002 	bne	fcd0 <CString::Replace(char const*, char const*)+0x20>
    fcc4:	e1a00008 	mov	r0, r8
    fcc8:	e28dd014 	add	sp, sp, #20
    fccc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fcd0:	e1a0a000 	mov	sl, r0
    fcd4:	e1a07001 	mov	r7, r1
    fcd8:	e5901004 	ldr	r1, [r0, #4]
    fcdc:	e1a0000d 	mov	r0, sp
    fce0:	e1a09002 	mov	r9, r2
    fce4:	ebffff5a 	bl	fa54 <CString::CString(char const*)>
    fce8:	e59a0004 	ldr	r0, [sl, #4]
    fcec:	e3500000 	cmp	r0, #0
    fcf0:	0a000000 	beq	fcf8 <CString::Replace(char const*, char const*)+0x48>
    fcf4:	eb000ab7 	bl	127d8 <operator delete[](void*)>
    fcf8:	e3a00040 	mov	r0, #64	; 0x40
    fcfc:	e58a0008 	str	r0, [sl, #8]
    fd00:	eb000ab2 	bl	127d0 <operator new[](unsigned int)>
    fd04:	e3a08000 	mov	r8, #0
    fd08:	e3a06001 	mov	r6, #1
    fd0c:	e59d4004 	ldr	r4, [sp, #4]
    fd10:	e58a0004 	str	r0, [sl, #4]
    fd14:	e58a000c 	str	r0, [sl, #12]
    fd18:	e1d710d0 	ldrsb	r1, [r7]
    fd1c:	e1a00004 	mov	r0, r4
    fd20:	eb0007b8 	bl	11c08 <strchr>
    fd24:	e2505000 	subs	r5, r0, #0
    fd28:	0a00002d 	beq	fde4 <CString::Replace(char const*, char const*)+0x134>
    fd2c:	e1540005 	cmp	r4, r5
    fd30:	2a000039 	bcs	fe1c <CString::Replace(char const*, char const*)+0x16c>
    fd34:	e1a01006 	mov	r1, r6
    fd38:	e1a0000a 	mov	r0, sl
    fd3c:	e0d4b0d1 	ldrsb	fp, [r4], #1
    fd40:	ebffff23 	bl	f9d4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    fd44:	e59a300c 	ldr	r3, [sl, #12]
    fd48:	e1550004 	cmp	r5, r4
    fd4c:	e2832001 	add	r2, r3, #1
    fd50:	e58a200c 	str	r2, [sl, #12]
    fd54:	e5c3b000 	strb	fp, [r3]
    fd58:	1afffff5 	bne	fd34 <CString::Replace(char const*, char const*)+0x84>
    fd5c:	e1a0c005 	mov	ip, r5
    fd60:	e2854001 	add	r4, r5, #1
    fd64:	e1d730d1 	ldrsb	r3, [r7, #1]
    fd68:	e2871001 	add	r1, r7, #1
    fd6c:	e3530000 	cmp	r3, #0
    fd70:	0a00000c 	beq	fda8 <CString::Replace(char const*, char const*)+0xf8>
    fd74:	e1d520d1 	ldrsb	r2, [r5, #1]
    fd78:	e1520003 	cmp	r2, r3
    fd7c:	1a00000e 	bne	fdbc <CString::Replace(char const*, char const*)+0x10c>
    fd80:	e2853002 	add	r3, r5, #2
    fd84:	ea000003 	b	fd98 <CString::Replace(char const*, char const*)+0xe8>
    fd88:	e1d400d0 	ldrsb	r0, [r4]
    fd8c:	e2833001 	add	r3, r3, #1
    fd90:	e1500002 	cmp	r0, r2
    fd94:	1a000008 	bne	fdbc <CString::Replace(char const*, char const*)+0x10c>
    fd98:	e1f120d1 	ldrsb	r2, [r1, #1]!
    fd9c:	e1a04003 	mov	r4, r3
    fda0:	e3520000 	cmp	r2, #0
    fda4:	1afffff7 	bne	fd88 <CString::Replace(char const*, char const*)+0xd8>
    fda8:	e1a01009 	mov	r1, r9
    fdac:	e1a0000a 	mov	r0, sl
    fdb0:	e2888001 	add	r8, r8, #1
    fdb4:	ebffffac 	bl	fc6c <CString::PutString(char const*)>
    fdb8:	eaffffd6 	b	fd18 <CString::Replace(char const*, char const*)+0x68>
    fdbc:	e1a01006 	mov	r1, r6
    fdc0:	e1a0000a 	mov	r0, sl
    fdc4:	e1dc50d0 	ldrsb	r5, [ip]
    fdc8:	e28c4001 	add	r4, ip, #1
    fdcc:	ebffff00 	bl	f9d4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    fdd0:	e59a300c 	ldr	r3, [sl, #12]
    fdd4:	e2832001 	add	r2, r3, #1
    fdd8:	e58a200c 	str	r2, [sl, #12]
    fddc:	e5c35000 	strb	r5, [r3]
    fde0:	eaffffcc 	b	fd18 <CString::Replace(char const*, char const*)+0x68>
    fde4:	e1a0000a 	mov	r0, sl
    fde8:	e1a01004 	mov	r1, r4
    fdec:	ebffff9e 	bl	fc6c <CString::PutString(char const*)>
    fdf0:	e59a200c 	ldr	r2, [sl, #12]
    fdf4:	e59f302c 	ldr	r3, [pc, #44]	; fe28 <CString::Replace(char const*, char const*)+0x178>
    fdf8:	e5c25000 	strb	r5, [r2]
    fdfc:	e59d0004 	ldr	r0, [sp, #4]
    fe00:	e58d3000 	str	r3, [sp]
    fe04:	e3500000 	cmp	r0, #0
    fe08:	0affffad 	beq	fcc4 <CString::Replace(char const*, char const*)+0x14>
    fe0c:	eb000a71 	bl	127d8 <operator delete[](void*)>
    fe10:	e1a00008 	mov	r0, r8
    fe14:	e28dd014 	add	sp, sp, #20
    fe18:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fe1c:	e1a0c004 	mov	ip, r4
    fe20:	e2854001 	add	r4, r5, #1
    fe24:	eaffffce 	b	fd64 <CString::Replace(char const*, char const*)+0xb4>
    fe28:	000150a0 	.word	0x000150a0

0000fe2c <CString::ReserveSpace(unsigned int)>:
    fe2c:	e3510000 	cmp	r1, #0
    fe30:	012fff1e 	bxeq	lr
    fe34:	eafffee6 	b	f9d4 <CString::ReserveSpace(unsigned int) [clone .part.0]>

0000fe38 <CString::ntoa(char*, unsigned long, unsigned int, bool)>:
    fe38:	e1510002 	cmp	r1, r2
    fe3c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    fe40:	e1a05001 	mov	r5, r1
    fe44:	e1a07002 	mov	r7, r2
    fe48:	e1a09000 	mov	r9, r0
    fe4c:	e1a08003 	mov	r8, r3
    fe50:	23a0a001 	movcs	sl, #1
    fe54:	3a000022 	bcc	fee4 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0xac>
    fe58:	e00a0a97 	mul	sl, r7, sl
    fe5c:	e1a00005 	mov	r0, r5
    fe60:	e1a0100a 	mov	r1, sl
    fe64:	ebffea35 	bl	a740 <__udivsi3>
    fe68:	e1500007 	cmp	r0, r7
    fe6c:	e1a04000 	mov	r4, r0
    fe70:	2afffff8 	bcs	fe58 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x20>
    fe74:	e3580000 	cmp	r8, #0
    fe78:	13a08037 	movne	r8, #55	; 0x37
    fe7c:	03a08057 	moveq	r8, #87	; 0x57
    fe80:	e1a06009 	mov	r6, r9
    fe84:	ea000003 	b	fe98 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x60>
    fe88:	e1a0100a 	mov	r1, sl
    fe8c:	e1a00005 	mov	r0, r5
    fe90:	ebffea2a 	bl	a740 <__udivsi3>
    fe94:	e1a04000 	mov	r4, r0
    fe98:	e1a00005 	mov	r0, r5
    fe9c:	e1a0100a 	mov	r1, sl
    fea0:	ebffea63 	bl	a834 <__aeabi_uidivmod>
    fea4:	e3540009 	cmp	r4, #9
    fea8:	e2843030 	add	r3, r4, #48	; 0x30
    feac:	80884004 	addhi	r4, r8, r4
    feb0:	96af4073 	sxtbls	r4, r3
    feb4:	86af4074 	sxtbhi	r4, r4
    feb8:	e2866001 	add	r6, r6, #1
    febc:	e1a0000a 	mov	r0, sl
    fec0:	e1a05001 	mov	r5, r1
    fec4:	e5464001 	strb	r4, [r6, #-1]
    fec8:	e1a01007 	mov	r1, r7
    fecc:	ebffea1b 	bl	a740 <__udivsi3>
    fed0:	e250a000 	subs	sl, r0, #0
    fed4:	1affffeb 	bne	fe88 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x50>
    fed8:	e5c6a000 	strb	sl, [r6]
    fedc:	e1a00009 	mov	r0, r9
    fee0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    fee4:	e1a04001 	mov	r4, r1
    fee8:	e3a0a001 	mov	sl, #1
    feec:	eaffffe0 	b	fe74 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x3c>

0000fef0 <CString::ftoa(char*, double, unsigned int)>:
    fef0:	eeb50bc0 	vcmpe.f64	d0, #0.0
    fef4:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    fef8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fefc:	ed9f7b95 	vldr	d7, [pc, #596]	; 10158 <CString::ftoa(char*, double, unsigned int)+0x268>
    ff00:	ed2d8b02 	vpush	{d8}
    ff04:	eeb08b40 	vmov.f64	d8, d0
    ff08:	4eb18b40 	vnegmi.f64	d8, d0
    ff0c:	43a0302d 	movmi	r3, #45	; 0x2d
    ff10:	eeb48bc7 	vcmpe.f64	d8, d7
    ff14:	45c03000 	strbmi	r3, [r0]
    ff18:	4280b001 	addmi	fp, r0, #1
    ff1c:	51a0b000 	movpl	fp, r0
    ff20:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    ff24:	e24dd01c 	sub	sp, sp, #28
    ff28:	e1a0a000 	mov	sl, r0
    ff2c:	e58d1004 	str	r1, [sp, #4]
    ff30:	ca000079 	bgt	1011c <CString::ftoa(char*, double, unsigned int)+0x22c>
    ff34:	eefc7bc8 	vcvt.u32.f64	s15, d8
    ff38:	ee177a90 	vmov	r7, s15
    ff3c:	e3570009 	cmp	r7, #9
    ff40:	83a04001 	movhi	r4, #1
    ff44:	9a00007b 	bls	10138 <CString::ftoa(char*, double, unsigned int)+0x248>
    ff48:	e0844104 	add	r4, r4, r4, lsl #2
    ff4c:	e1a04084 	lsl	r4, r4, #1
    ff50:	e1a01004 	mov	r1, r4
    ff54:	e1a00007 	mov	r0, r7
    ff58:	ebffe9f8 	bl	a740 <__udivsi3>
    ff5c:	e3500009 	cmp	r0, #9
    ff60:	e1a05000 	mov	r5, r0
    ff64:	8afffff7 	bhi	ff48 <CString::ftoa(char*, double, unsigned int)+0x58>
    ff68:	e1a0600b 	mov	r6, fp
    ff6c:	e1a09007 	mov	r9, r7
    ff70:	e59f81f0 	ldr	r8, [pc, #496]	; 10168 <CString::ftoa(char*, double, unsigned int)+0x278>
    ff74:	ea000003 	b	ff88 <CString::ftoa(char*, double, unsigned int)+0x98>
    ff78:	e1a01004 	mov	r1, r4
    ff7c:	e1a00009 	mov	r0, r9
    ff80:	ebffe9ee 	bl	a740 <__udivsi3>
    ff84:	e1a05000 	mov	r5, r0
    ff88:	e1a00009 	mov	r0, r9
    ff8c:	e1a01004 	mov	r1, r4
    ff90:	ebffea27 	bl	a834 <__aeabi_uidivmod>
    ff94:	e0843498 	umull	r3, r4, r8, r4
    ff98:	e3550009 	cmp	r5, #9
    ff9c:	e2852030 	add	r2, r5, #48	; 0x30
    ffa0:	82855057 	addhi	r5, r5, #87	; 0x57
    ffa4:	96af5072 	sxtbls	r5, r2
    ffa8:	86af5075 	sxtbhi	r5, r5
    ffac:	e2866001 	add	r6, r6, #1
    ffb0:	e1b041a4 	lsrs	r4, r4, #3
    ffb4:	e1a09001 	mov	r9, r1
    ffb8:	e5465001 	strb	r5, [r6, #-1]
    ffbc:	1affffed 	bne	ff78 <CString::ftoa(char*, double, unsigned int)+0x88>
    ffc0:	e59d3004 	ldr	r3, [sp, #4]
    ffc4:	e5c64000 	strb	r4, [r6]
    ffc8:	e3530000 	cmp	r3, #0
    ffcc:	1a000003 	bne	ffe0 <CString::ftoa(char*, double, unsigned int)+0xf0>
    ffd0:	e1a0000a 	mov	r0, sl
    ffd4:	e28dd01c 	add	sp, sp, #28
    ffd8:	ecbd8b02 	vpop	{d8}
    ffdc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ffe0:	e1a0000b 	mov	r0, fp
    ffe4:	eb00065a 	bl	11954 <strlen>
    ffe8:	e59d3004 	ldr	r3, [sp, #4]
    ffec:	e08b2000 	add	r2, fp, r0
    fff0:	e3530009 	cmp	r3, #9
    fff4:	31a09003 	movcc	r9, r3
    fff8:	23a09009 	movcs	r9, #9
    fffc:	e3a0302e 	mov	r3, #46	; 0x2e
   10000:	e3590001 	cmp	r9, #1
   10004:	e7cb3000 	strb	r3, [fp, r0]
   10008:	e58d2004 	str	r2, [sp, #4]
   1000c:	e282b001 	add	fp, r2, #1
   10010:	0a00004e 	beq	10150 <CString::ftoa(char*, double, unsigned int)+0x260>
   10014:	e3a02002 	mov	r2, #2
   10018:	e3a0300a 	mov	r3, #10
   1001c:	e2822001 	add	r2, r2, #1
   10020:	e0833103 	add	r3, r3, r3, lsl #2
   10024:	e1520009 	cmp	r2, r9
   10028:	e1a03083 	lsl	r3, r3, #1
   1002c:	9afffffa 	bls	1001c <CString::ftoa(char*, double, unsigned int)+0x12c>
   10030:	ee073a90 	vmov	s15, r3
   10034:	eeb87b67 	vcvt.f64.u32	d7, s15
   10038:	ee067a90 	vmov	s13, r7
   1003c:	eeb86b66 	vcvt.f64.u32	d6, s13
   10040:	ee386b46 	vsub.f64	d6, d8, d6
   10044:	ee267b07 	vmul.f64	d7, d6, d7
   10048:	eefc7bc7 	vcvt.u32.f64	s15, d7
   1004c:	ee178a90 	vmov	r8, s15
   10050:	e3580009 	cmp	r8, #9
   10054:	83a04001 	movhi	r4, #1
   10058:	9a000039 	bls	10144 <CString::ftoa(char*, double, unsigned int)+0x254>
   1005c:	e0844104 	add	r4, r4, r4, lsl #2
   10060:	e1a04084 	lsl	r4, r4, #1
   10064:	e1a01004 	mov	r1, r4
   10068:	e1a00008 	mov	r0, r8
   1006c:	ebffe9b3 	bl	a740 <__udivsi3>
   10070:	e3500009 	cmp	r0, #9
   10074:	e1a05000 	mov	r5, r0
   10078:	8afffff7 	bhi	1005c <CString::ftoa(char*, double, unsigned int)+0x16c>
   1007c:	e28d600c 	add	r6, sp, #12
   10080:	e59f70e0 	ldr	r7, [pc, #224]	; 10168 <CString::ftoa(char*, double, unsigned int)+0x278>
   10084:	ea000003 	b	10098 <CString::ftoa(char*, double, unsigned int)+0x1a8>
   10088:	e1a01004 	mov	r1, r4
   1008c:	e1a00008 	mov	r0, r8
   10090:	ebffe9aa 	bl	a740 <__udivsi3>
   10094:	e1a05000 	mov	r5, r0
   10098:	e1a00008 	mov	r0, r8
   1009c:	e1a01004 	mov	r1, r4
   100a0:	ebffe9e3 	bl	a834 <__aeabi_uidivmod>
   100a4:	e0843497 	umull	r3, r4, r7, r4
   100a8:	e3550009 	cmp	r5, #9
   100ac:	e2852030 	add	r2, r5, #48	; 0x30
   100b0:	82855057 	addhi	r5, r5, #87	; 0x57
   100b4:	96af5072 	sxtbls	r5, r2
   100b8:	86af5075 	sxtbhi	r5, r5
   100bc:	e2866001 	add	r6, r6, #1
   100c0:	e1b041a4 	lsrs	r4, r4, #3
   100c4:	e1a08001 	mov	r8, r1
   100c8:	e5465001 	strb	r5, [r6, #-1]
   100cc:	1affffed 	bne	10088 <CString::ftoa(char*, double, unsigned int)+0x198>
   100d0:	e28d000c 	add	r0, sp, #12
   100d4:	e5c64000 	strb	r4, [r6]
   100d8:	eb00061d 	bl	11954 <strlen>
   100dc:	e0599000 	subs	r9, r9, r0
   100e0:	0a000006 	beq	10100 <CString::ftoa(char*, double, unsigned int)+0x210>
   100e4:	e3a02030 	mov	r2, #48	; 0x30
   100e8:	e59d8004 	ldr	r8, [sp, #4]
   100ec:	e0883009 	add	r3, r8, r9
   100f0:	e5e82001 	strb	r2, [r8, #1]!
   100f4:	e1580003 	cmp	r8, r3
   100f8:	1afffffc 	bne	100f0 <CString::ftoa(char*, double, unsigned int)+0x200>
   100fc:	e08bb009 	add	fp, fp, r9
   10100:	e28d100c 	add	r1, sp, #12
   10104:	e1a0000b 	mov	r0, fp
   10108:	eb00068f 	bl	11b4c <strcpy>
   1010c:	e1a0000a 	mov	r0, sl
   10110:	e28dd01c 	add	sp, sp, #28
   10114:	ecbd8b02 	vpop	{d8}
   10118:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1011c:	e1a0000b 	mov	r0, fp
   10120:	e59f1044 	ldr	r1, [pc, #68]	; 1016c <CString::ftoa(char*, double, unsigned int)+0x27c>
   10124:	eb000688 	bl	11b4c <strcpy>
   10128:	e1a0000a 	mov	r0, sl
   1012c:	e28dd01c 	add	sp, sp, #28
   10130:	ecbd8b02 	vpop	{d8}
   10134:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10138:	ee175a90 	vmov	r5, s15
   1013c:	e3a04001 	mov	r4, #1
   10140:	eaffff88 	b	ff68 <CString::ftoa(char*, double, unsigned int)+0x78>
   10144:	ee175a90 	vmov	r5, s15
   10148:	e3a04001 	mov	r4, #1
   1014c:	eaffffca 	b	1007c <CString::ftoa(char*, double, unsigned int)+0x18c>
   10150:	ed9f7b02 	vldr	d7, [pc, #8]	; 10160 <CString::ftoa(char*, double, unsigned int)+0x270>
   10154:	eaffffb7 	b	10038 <CString::ftoa(char*, double, unsigned int)+0x148>
   10158:	ffe00000 	.word	0xffe00000
   1015c:	41efffff 	.word	0x41efffff
   10160:	00000000 	.word	0x00000000
   10164:	40240000 	.word	0x40240000
   10168:	cccccccd 	.word	0xcccccccd
   1016c:	000150a8 	.word	0x000150a8

00010170 <CString::FormatV(char const*, std::__va_list)>:
   10170:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10174:	e1a0b000 	mov	fp, r0
   10178:	e5900004 	ldr	r0, [r0, #4]
   1017c:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   10180:	e3500000 	cmp	r0, #0
   10184:	e1a05001 	mov	r5, r1
   10188:	e58d2000 	str	r2, [sp]
   1018c:	0a000000 	beq	10194 <CString::FormatV(char const*, std::__va_list)+0x24>
   10190:	eb000990 	bl	127d8 <operator delete[](void*)>
   10194:	e3a00040 	mov	r0, #64	; 0x40
   10198:	e58b0008 	str	r0, [fp, #8]
   1019c:	eb00098b 	bl	127d0 <operator new[](unsigned int)>
   101a0:	e58b0004 	str	r0, [fp, #4]
   101a4:	e58b000c 	str	r0, [fp, #12]
   101a8:	e1d540d0 	ldrsb	r4, [r5]
   101ac:	e3540000 	cmp	r4, #0
   101b0:	0a0000a2 	beq	10440 <CString::FormatV(char const*, std::__va_list)+0x2d0>
   101b4:	e3540025 	cmp	r4, #37	; 0x25
   101b8:	13a01001 	movne	r1, #1
   101bc:	11a0000b 	movne	r0, fp
   101c0:	1a000152 	bne	10710 <CString::FormatV(char const*, std::__va_list)+0x5a0>
   101c4:	e1d560d1 	ldrsb	r6, [r5, #1]
   101c8:	e3560025 	cmp	r6, #37	; 0x25
   101cc:	0a000165 	beq	10768 <CString::FormatV(char const*, std::__va_list)+0x5f8>
   101d0:	e356002d 	cmp	r6, #45	; 0x2d
   101d4:	03a03001 	moveq	r3, #1
   101d8:	13a03000 	movne	r3, #0
   101dc:	01d560d2 	ldrsbeq	r6, [r5, #2]
   101e0:	158d3004 	strne	r3, [sp, #4]
   101e4:	058d3004 	streq	r3, [sp, #4]
   101e8:	02855002 	addeq	r5, r5, #2
   101ec:	12855001 	addne	r5, r5, #1
   101f0:	e3560030 	cmp	r6, #48	; 0x30
   101f4:	03a03001 	moveq	r3, #1
   101f8:	13a03000 	movne	r3, #0
   101fc:	01d560d1 	ldrsbeq	r6, [r5, #1]
   10200:	058d3008 	streq	r3, [sp, #8]
   10204:	00855003 	addeq	r5, r5, r3
   10208:	158d3008 	strne	r3, [sp, #8]
   1020c:	e2463030 	sub	r3, r6, #48	; 0x30
   10210:	e6ef3073 	uxtb	r3, r3
   10214:	e3530009 	cmp	r3, #9
   10218:	e3a04000 	mov	r4, #0
   1021c:	8a000007 	bhi	10240 <CString::FormatV(char const*, std::__va_list)+0xd0>
   10220:	e0844104 	add	r4, r4, r4, lsl #2
   10224:	e0864084 	add	r4, r6, r4, lsl #1
   10228:	e1f560d1 	ldrsb	r6, [r5, #1]!
   1022c:	e2444030 	sub	r4, r4, #48	; 0x30
   10230:	e2463030 	sub	r3, r6, #48	; 0x30
   10234:	e6ef3073 	uxtb	r3, r3
   10238:	e3530009 	cmp	r3, #9
   1023c:	9afffff7 	bls	10220 <CString::FormatV(char const*, std::__va_list)+0xb0>
   10240:	e356002e 	cmp	r6, #46	; 0x2e
   10244:	0a000137 	beq	10728 <CString::FormatV(char const*, std::__va_list)+0x5b8>
   10248:	e3a01006 	mov	r1, #6
   1024c:	e1d570d0 	ldrsb	r7, [r5]
   10250:	e357006c 	cmp	r7, #108	; 0x6c
   10254:	03a02001 	moveq	r2, #1
   10258:	01d570d1 	ldrsbeq	r7, [r5, #1]
   1025c:	00855002 	addeq	r5, r5, r2
   10260:	e2473058 	sub	r3, r7, #88	; 0x58
   10264:	e3530020 	cmp	r3, #32
   10268:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1026c:	ea00011c 	b	106e4 <CString::FormatV(char const*, std::__va_list)+0x574>
   10270:	00010660 	.word	0x00010660
   10274:	000106e4 	.word	0x000106e4
   10278:	000106e4 	.word	0x000106e4
   1027c:	000106e4 	.word	0x000106e4
   10280:	000106e4 	.word	0x000106e4
   10284:	000106e4 	.word	0x000106e4
   10288:	000106e4 	.word	0x000106e4
   1028c:	000106e4 	.word	0x000106e4
   10290:	000106e4 	.word	0x000106e4
   10294:	000106e4 	.word	0x000106e4
   10298:	000106e4 	.word	0x000106e4
   1029c:	000105ec 	.word	0x000105ec
   102a0:	000104c8 	.word	0x000104c8
   102a4:	000106e4 	.word	0x000106e4
   102a8:	00010450 	.word	0x00010450
   102ac:	000106e4 	.word	0x000106e4
   102b0:	000106e4 	.word	0x000106e4
   102b4:	000104c8 	.word	0x000104c8
   102b8:	000106e4 	.word	0x000106e4
   102bc:	000106e4 	.word	0x000106e4
   102c0:	000106e4 	.word	0x000106e4
   102c4:	000106e4 	.word	0x000106e4
   102c8:	000106e4 	.word	0x000106e4
   102cc:	000102f4 	.word	0x000102f4
   102d0:	00010660 	.word	0x00010660
   102d4:	000106e4 	.word	0x000106e4
   102d8:	000106e4 	.word	0x000106e4
   102dc:	00010670 	.word	0x00010670
   102e0:	000106e4 	.word	0x000106e4
   102e4:	00010668 	.word	0x00010668
   102e8:	000106e4 	.word	0x000106e4
   102ec:	000106e4 	.word	0x000106e4
   102f0:	00010660 	.word	0x00010660
   102f4:	e3a09008 	mov	r9, #8
   102f8:	e59d3000 	ldr	r3, [sp]
   102fc:	e5936000 	ldr	r6, [r3]
   10300:	e2833004 	add	r3, r3, #4
   10304:	e1560009 	cmp	r6, r9
   10308:	e58d3000 	str	r3, [sp]
   1030c:	23a0a001 	movcs	sl, #1
   10310:	3a0001aa 	bcc	109c0 <CString::FormatV(char const*, std::__va_list)+0x850>
   10314:	e00a0a99 	mul	sl, r9, sl
   10318:	e1a00006 	mov	r0, r6
   1031c:	e1a0100a 	mov	r1, sl
   10320:	ebffe906 	bl	a740 <__udivsi3>
   10324:	e1590000 	cmp	r9, r0
   10328:	9afffff9 	bls	10314 <CString::FormatV(char const*, std::__va_list)+0x1a4>
   1032c:	e1a03000 	mov	r3, r0
   10330:	e3570058 	cmp	r7, #88	; 0x58
   10334:	13a07057 	movne	r7, #87	; 0x57
   10338:	03a07037 	moveq	r7, #55	; 0x37
   1033c:	e1a02005 	mov	r2, r5
   10340:	e58d400c 	str	r4, [sp, #12]
   10344:	e1a0500a 	mov	r5, sl
   10348:	e1a04007 	mov	r4, r7
   1034c:	e28d8010 	add	r8, sp, #16
   10350:	e1a07006 	mov	r7, r6
   10354:	e1a0a002 	mov	sl, r2
   10358:	e1a06003 	mov	r6, r3
   1035c:	ea000003 	b	10370 <CString::FormatV(char const*, std::__va_list)+0x200>
   10360:	e1a01005 	mov	r1, r5
   10364:	e1a00007 	mov	r0, r7
   10368:	ebffe8f4 	bl	a740 <__udivsi3>
   1036c:	e1a06000 	mov	r6, r0
   10370:	e1a00007 	mov	r0, r7
   10374:	e1a01005 	mov	r1, r5
   10378:	ebffe92d 	bl	a834 <__aeabi_uidivmod>
   1037c:	e3560009 	cmp	r6, #9
   10380:	e2862030 	add	r2, r6, #48	; 0x30
   10384:	80846006 	addhi	r6, r4, r6
   10388:	96af6072 	sxtbls	r6, r2
   1038c:	86af6076 	sxtbhi	r6, r6
   10390:	e2888001 	add	r8, r8, #1
   10394:	e1a00005 	mov	r0, r5
   10398:	e1a07001 	mov	r7, r1
   1039c:	e5486001 	strb	r6, [r8, #-1]
   103a0:	e1a01009 	mov	r1, r9
   103a4:	ebffe8e5 	bl	a740 <__udivsi3>
   103a8:	e2505000 	subs	r5, r0, #0
   103ac:	1affffeb 	bne	10360 <CString::FormatV(char const*, std::__va_list)+0x1f0>
   103b0:	e1a0300a 	mov	r3, sl
   103b4:	e1a0a005 	mov	sl, r5
   103b8:	e28d0010 	add	r0, sp, #16
   103bc:	e5c8a000 	strb	sl, [r8]
   103c0:	e1a05003 	mov	r5, r3
   103c4:	e59d400c 	ldr	r4, [sp, #12]
   103c8:	eb000561 	bl	11954 <strlen>
   103cc:	e59d3004 	ldr	r3, [sp, #4]
   103d0:	e1a06000 	mov	r6, r0
   103d4:	e3530000 	cmp	r3, #0
   103d8:	1a0000eb 	bne	1078c <CString::FormatV(char const*, std::__va_list)+0x61c>
   103dc:	e1500004 	cmp	r0, r4
   103e0:	2a00000f 	bcs	10424 <CString::FormatV(char const*, std::__va_list)+0x2b4>
   103e4:	e59d3008 	ldr	r3, [sp, #8]
   103e8:	e0444000 	sub	r4, r4, r0
   103ec:	e3530000 	cmp	r3, #0
   103f0:	e1a01004 	mov	r1, r4
   103f4:	e1a0000b 	mov	r0, fp
   103f8:	03a07020 	moveq	r7, #32
   103fc:	13a07030 	movne	r7, #48	; 0x30
   10400:	ebfffd73 	bl	f9d4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   10404:	e2443001 	sub	r3, r4, #1
   10408:	e59b200c 	ldr	r2, [fp, #12]
   1040c:	e2433001 	sub	r3, r3, #1
   10410:	e2821001 	add	r1, r2, #1
   10414:	e3730001 	cmn	r3, #1
   10418:	e58b100c 	str	r1, [fp, #12]
   1041c:	e5c27000 	strb	r7, [r2]
   10420:	1afffff8 	bne	10408 <CString::FormatV(char const*, std::__va_list)+0x298>
   10424:	e28d1010 	add	r1, sp, #16
   10428:	e1a0000b 	mov	r0, fp
   1042c:	ebfffe0e 	bl	fc6c <CString::PutString(char const*)>
   10430:	e2855001 	add	r5, r5, #1
   10434:	e1d540d0 	ldrsb	r4, [r5]
   10438:	e3540000 	cmp	r4, #0
   1043c:	1affff5c 	bne	101b4 <CString::FormatV(char const*, std::__va_list)+0x44>
   10440:	e59b300c 	ldr	r3, [fp, #12]
   10444:	e5c34000 	strb	r4, [r3]
   10448:	e28dd02c 	add	sp, sp, #44	; 0x2c
   1044c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10450:	e59d3000 	ldr	r3, [sp]
   10454:	e28d0010 	add	r0, sp, #16
   10458:	e2833007 	add	r3, r3, #7
   1045c:	e3c33007 	bic	r3, r3, #7
   10460:	ed930b00 	vldr	d0, [r3]
   10464:	e2833008 	add	r3, r3, #8
   10468:	e58d3000 	str	r3, [sp]
   1046c:	ebfffe9f 	bl	fef0 <CString::ftoa(char*, double, unsigned int)>
   10470:	e28d0010 	add	r0, sp, #16
   10474:	eb000536 	bl	11954 <strlen>
   10478:	e59d3004 	ldr	r3, [sp, #4]
   1047c:	e1a06000 	mov	r6, r0
   10480:	e3530000 	cmp	r3, #0
   10484:	1a000108 	bne	108ac <CString::FormatV(char const*, std::__va_list)+0x73c>
   10488:	e1500004 	cmp	r0, r4
   1048c:	2affffe4 	bcs	10424 <CString::FormatV(char const*, std::__va_list)+0x2b4>
   10490:	e0444000 	sub	r4, r4, r0
   10494:	e1a01004 	mov	r1, r4
   10498:	e1a0000b 	mov	r0, fp
   1049c:	ebfffd4c 	bl	f9d4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   104a0:	e2443001 	sub	r3, r4, #1
   104a4:	e59b200c 	ldr	r2, [fp, #12]
   104a8:	e2433001 	sub	r3, r3, #1
   104ac:	e2821001 	add	r1, r2, #1
   104b0:	e58b100c 	str	r1, [fp, #12]
   104b4:	e3a01020 	mov	r1, #32
   104b8:	e3730001 	cmn	r3, #1
   104bc:	e5c21000 	strb	r1, [r2]
   104c0:	1afffff7 	bne	104a4 <CString::FormatV(char const*, std::__va_list)+0x334>
   104c4:	eaffffd6 	b	10424 <CString::FormatV(char const*, std::__va_list)+0x2b4>
   104c8:	e59d3000 	ldr	r3, [sp]
   104cc:	e5936000 	ldr	r6, [r3]
   104d0:	e2833004 	add	r3, r3, #4
   104d4:	e3560000 	cmp	r6, #0
   104d8:	b3a08001 	movlt	r8, #1
   104dc:	a3a08000 	movge	r8, #0
   104e0:	e58d3000 	str	r3, [sp]
   104e4:	b1a03008 	movlt	r3, r8
   104e8:	b2666000 	rsblt	r6, r6, #0
   104ec:	b58d300c 	strlt	r3, [sp, #12]
   104f0:	a58d800c 	strge	r8, [sp, #12]
   104f4:	e3560009 	cmp	r6, #9
   104f8:	e1a07006 	mov	r7, r6
   104fc:	c3a0a001 	movgt	sl, #1
   10500:	da00012b 	ble	109b4 <CString::FormatV(char const*, std::__va_list)+0x844>
   10504:	e08aa10a 	add	sl, sl, sl, lsl #2
   10508:	e1a0a08a 	lsl	sl, sl, #1
   1050c:	e1a0100a 	mov	r1, sl
   10510:	e1a00006 	mov	r0, r6
   10514:	ebffe889 	bl	a740 <__udivsi3>
   10518:	e3500009 	cmp	r0, #9
   1051c:	8afffff8 	bhi	10504 <CString::FormatV(char const*, std::__va_list)+0x394>
   10520:	e1a09000 	mov	r9, r0
   10524:	e28d6010 	add	r6, sp, #16
   10528:	ea000003 	b	1053c <CString::FormatV(char const*, std::__va_list)+0x3cc>
   1052c:	e1a0100a 	mov	r1, sl
   10530:	e1a00007 	mov	r0, r7
   10534:	ebffe881 	bl	a740 <__udivsi3>
   10538:	e1a09000 	mov	r9, r0
   1053c:	e1a00007 	mov	r0, r7
   10540:	e1a0100a 	mov	r1, sl
   10544:	ebffe8ba 	bl	a834 <__aeabi_uidivmod>
   10548:	e3590009 	cmp	r9, #9
   1054c:	e2893030 	add	r3, r9, #48	; 0x30
   10550:	96af9073 	sxtbls	r9, r3
   10554:	e59f3494 	ldr	r3, [pc, #1172]	; 109f0 <CString::FormatV(char const*, std::__va_list)+0x880>
   10558:	82899057 	addhi	r9, r9, #87	; 0x57
   1055c:	e08a3a93 	umull	r3, sl, r3, sl
   10560:	86af9079 	sxtbhi	r9, r9
   10564:	e2866001 	add	r6, r6, #1
   10568:	e1b0a1aa 	lsrs	sl, sl, #3
   1056c:	e1a07001 	mov	r7, r1
   10570:	e5469001 	strb	r9, [r6, #-1]
   10574:	1affffec 	bne	1052c <CString::FormatV(char const*, std::__va_list)+0x3bc>
   10578:	e28d0010 	add	r0, sp, #16
   1057c:	e5c6a000 	strb	sl, [r6]
   10580:	eb0004f3 	bl	11954 <strlen>
   10584:	e59d3004 	ldr	r3, [sp, #4]
   10588:	e0888000 	add	r8, r8, r0
   1058c:	e3530000 	cmp	r3, #0
   10590:	0a000090 	beq	107d8 <CString::FormatV(char const*, std::__va_list)+0x668>
   10594:	e59d300c 	ldr	r3, [sp, #12]
   10598:	e3530000 	cmp	r3, #0
   1059c:	1a0000fb 	bne	10990 <CString::FormatV(char const*, std::__va_list)+0x820>
   105a0:	e28d1010 	add	r1, sp, #16
   105a4:	e1a0000b 	mov	r0, fp
   105a8:	ebfffdaf 	bl	fc6c <CString::PutString(char const*)>
   105ac:	e1580004 	cmp	r8, r4
   105b0:	2affff9e 	bcs	10430 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   105b4:	e0444008 	sub	r4, r4, r8
   105b8:	e1a01004 	mov	r1, r4
   105bc:	e1a0000b 	mov	r0, fp
   105c0:	ebfffd03 	bl	f9d4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   105c4:	e2443001 	sub	r3, r4, #1
   105c8:	e59b200c 	ldr	r2, [fp, #12]
   105cc:	e2433001 	sub	r3, r3, #1
   105d0:	e2821001 	add	r1, r2, #1
   105d4:	e58b100c 	str	r1, [fp, #12]
   105d8:	e3a01020 	mov	r1, #32
   105dc:	e3730001 	cmn	r3, #1
   105e0:	e5c21000 	strb	r1, [r2]
   105e4:	1afffff7 	bne	105c8 <CString::FormatV(char const*, std::__va_list)+0x458>
   105e8:	eaffff90 	b	10430 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   105ec:	e59d3004 	ldr	r3, [sp, #4]
   105f0:	e3530000 	cmp	r3, #0
   105f4:	e59d3000 	ldr	r3, [sp]
   105f8:	e2836004 	add	r6, r3, #4
   105fc:	e1d370d0 	ldrsb	r7, [r3]
   10600:	1a000092 	bne	10850 <CString::FormatV(char const*, std::__va_list)+0x6e0>
   10604:	e3540001 	cmp	r4, #1
   10608:	9a00000b 	bls	1063c <CString::FormatV(char const*, std::__va_list)+0x4cc>
   1060c:	e2441001 	sub	r1, r4, #1
   10610:	e1a0000b 	mov	r0, fp
   10614:	ebfffcee 	bl	f9d4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   10618:	e2444002 	sub	r4, r4, #2
   1061c:	e59b300c 	ldr	r3, [fp, #12]
   10620:	e2444001 	sub	r4, r4, #1
   10624:	e2832001 	add	r2, r3, #1
   10628:	e58b200c 	str	r2, [fp, #12]
   1062c:	e3a02020 	mov	r2, #32
   10630:	e3740001 	cmn	r4, #1
   10634:	e5c32000 	strb	r2, [r3]
   10638:	1afffff7 	bne	1061c <CString::FormatV(char const*, std::__va_list)+0x4ac>
   1063c:	e3a01001 	mov	r1, #1
   10640:	e1a0000b 	mov	r0, fp
   10644:	ebfffce2 	bl	f9d4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   10648:	e59b300c 	ldr	r3, [fp, #12]
   1064c:	e58d6000 	str	r6, [sp]
   10650:	e2832001 	add	r2, r3, #1
   10654:	e58b200c 	str	r2, [fp, #12]
   10658:	e5c37000 	strb	r7, [r3]
   1065c:	eaffff73 	b	10430 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   10660:	e3a09010 	mov	r9, #16
   10664:	eaffff23 	b	102f8 <CString::FormatV(char const*, std::__va_list)+0x188>
   10668:	e3a0900a 	mov	r9, #10
   1066c:	eaffff21 	b	102f8 <CString::FormatV(char const*, std::__va_list)+0x188>
   10670:	e59d3000 	ldr	r3, [sp]
   10674:	e5938000 	ldr	r8, [r3]
   10678:	e2836004 	add	r6, r3, #4
   1067c:	e1a00008 	mov	r0, r8
   10680:	eb0004b3 	bl	11954 <strlen>
   10684:	e59d3004 	ldr	r3, [sp, #4]
   10688:	e1a07000 	mov	r7, r0
   1068c:	e3530000 	cmp	r3, #0
   10690:	1a000098 	bne	108f8 <CString::FormatV(char const*, std::__va_list)+0x788>
   10694:	e1500004 	cmp	r0, r4
   10698:	2a00000c 	bcs	106d0 <CString::FormatV(char const*, std::__va_list)+0x560>
   1069c:	e0444000 	sub	r4, r4, r0
   106a0:	e1a01004 	mov	r1, r4
   106a4:	e1a0000b 	mov	r0, fp
   106a8:	ebfffcc9 	bl	f9d4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   106ac:	e2443001 	sub	r3, r4, #1
   106b0:	e59b200c 	ldr	r2, [fp, #12]
   106b4:	e2433001 	sub	r3, r3, #1
   106b8:	e2821001 	add	r1, r2, #1
   106bc:	e58b100c 	str	r1, [fp, #12]
   106c0:	e3a01020 	mov	r1, #32
   106c4:	e3730001 	cmn	r3, #1
   106c8:	e5c21000 	strb	r1, [r2]
   106cc:	1afffff7 	bne	106b0 <CString::FormatV(char const*, std::__va_list)+0x540>
   106d0:	e1a01008 	mov	r1, r8
   106d4:	e1a0000b 	mov	r0, fp
   106d8:	e58d6000 	str	r6, [sp]
   106dc:	ebfffd62 	bl	fc6c <CString::PutString(char const*)>
   106e0:	eaffff52 	b	10430 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   106e4:	e3a01001 	mov	r1, #1
   106e8:	e1a0000b 	mov	r0, fp
   106ec:	ebfffcb8 	bl	f9d4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   106f0:	e3a01001 	mov	r1, #1
   106f4:	e59b300c 	ldr	r3, [fp, #12]
   106f8:	e1a0000b 	mov	r0, fp
   106fc:	e0832001 	add	r2, r3, r1
   10700:	e58b200c 	str	r2, [fp, #12]
   10704:	e3a02025 	mov	r2, #37	; 0x25
   10708:	e5c32000 	strb	r2, [r3]
   1070c:	e1d540d0 	ldrsb	r4, [r5]
   10710:	ebfffcaf 	bl	f9d4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   10714:	e59b300c 	ldr	r3, [fp, #12]
   10718:	e2832001 	add	r2, r3, #1
   1071c:	e58b200c 	str	r2, [fp, #12]
   10720:	e5c34000 	strb	r4, [r3]
   10724:	eaffff41 	b	10430 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   10728:	e1d570d1 	ldrsb	r7, [r5, #1]
   1072c:	e3a01000 	mov	r1, #0
   10730:	e2473030 	sub	r3, r7, #48	; 0x30
   10734:	e6ef3073 	uxtb	r3, r3
   10738:	e3530009 	cmp	r3, #9
   1073c:	e2855001 	add	r5, r5, #1
   10740:	8afffec2 	bhi	10250 <CString::FormatV(char const*, std::__va_list)+0xe0>
   10744:	e0811101 	add	r1, r1, r1, lsl #2
   10748:	e0871081 	add	r1, r7, r1, lsl #1
   1074c:	e1f570d1 	ldrsb	r7, [r5, #1]!
   10750:	e2411030 	sub	r1, r1, #48	; 0x30
   10754:	e2473030 	sub	r3, r7, #48	; 0x30
   10758:	e6ef3073 	uxtb	r3, r3
   1075c:	e3530009 	cmp	r3, #9
   10760:	9afffff7 	bls	10744 <CString::FormatV(char const*, std::__va_list)+0x5d4>
   10764:	eafffeb9 	b	10250 <CString::FormatV(char const*, std::__va_list)+0xe0>
   10768:	e3a01001 	mov	r1, #1
   1076c:	e1a0000b 	mov	r0, fp
   10770:	ebfffc97 	bl	f9d4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   10774:	e59b300c 	ldr	r3, [fp, #12]
   10778:	e2855002 	add	r5, r5, #2
   1077c:	e2832001 	add	r2, r3, #1
   10780:	e58b200c 	str	r2, [fp, #12]
   10784:	e5c36000 	strb	r6, [r3]
   10788:	eafffe86 	b	101a8 <CString::FormatV(char const*, std::__va_list)+0x38>
   1078c:	e28d1010 	add	r1, sp, #16
   10790:	e1a0000b 	mov	r0, fp
   10794:	ebfffd34 	bl	fc6c <CString::PutString(char const*)>
   10798:	e1560004 	cmp	r6, r4
   1079c:	2affff23 	bcs	10430 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   107a0:	e0444006 	sub	r4, r4, r6
   107a4:	e1a01004 	mov	r1, r4
   107a8:	e1a0000b 	mov	r0, fp
   107ac:	ebfffc88 	bl	f9d4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   107b0:	e2443001 	sub	r3, r4, #1
   107b4:	e59b200c 	ldr	r2, [fp, #12]
   107b8:	e2433001 	sub	r3, r3, #1
   107bc:	e2821001 	add	r1, r2, #1
   107c0:	e58b100c 	str	r1, [fp, #12]
   107c4:	e3a01020 	mov	r1, #32
   107c8:	e3730001 	cmn	r3, #1
   107cc:	e5c21000 	strb	r1, [r2]
   107d0:	1afffff7 	bne	107b4 <CString::FormatV(char const*, std::__va_list)+0x644>
   107d4:	eaffff15 	b	10430 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   107d8:	e59d3008 	ldr	r3, [sp, #8]
   107dc:	e3530000 	cmp	r3, #0
   107e0:	1a000057 	bne	10944 <CString::FormatV(char const*, std::__va_list)+0x7d4>
   107e4:	e1580004 	cmp	r8, r4
   107e8:	2a00000c 	bcs	10820 <CString::FormatV(char const*, std::__va_list)+0x6b0>
   107ec:	e0444008 	sub	r4, r4, r8
   107f0:	e1a01004 	mov	r1, r4
   107f4:	e1a0000b 	mov	r0, fp
   107f8:	ebfffc75 	bl	f9d4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   107fc:	e2443001 	sub	r3, r4, #1
   10800:	e59b200c 	ldr	r2, [fp, #12]
   10804:	e2433001 	sub	r3, r3, #1
   10808:	e2821001 	add	r1, r2, #1
   1080c:	e58b100c 	str	r1, [fp, #12]
   10810:	e3a01020 	mov	r1, #32
   10814:	e3730001 	cmn	r3, #1
   10818:	e5c21000 	strb	r1, [r2]
   1081c:	1afffff7 	bne	10800 <CString::FormatV(char const*, std::__va_list)+0x690>
   10820:	e59d300c 	ldr	r3, [sp, #12]
   10824:	e3530000 	cmp	r3, #0
   10828:	0afffefd 	beq	10424 <CString::FormatV(char const*, std::__va_list)+0x2b4>
   1082c:	e3a01001 	mov	r1, #1
   10830:	e1a0000b 	mov	r0, fp
   10834:	ebfffc66 	bl	f9d4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   10838:	e3a0202d 	mov	r2, #45	; 0x2d
   1083c:	e59b300c 	ldr	r3, [fp, #12]
   10840:	e2831001 	add	r1, r3, #1
   10844:	e58b100c 	str	r1, [fp, #12]
   10848:	e5c32000 	strb	r2, [r3]
   1084c:	eafffef4 	b	10424 <CString::FormatV(char const*, std::__va_list)+0x2b4>
   10850:	e3a01001 	mov	r1, #1
   10854:	e1a0000b 	mov	r0, fp
   10858:	ebfffc5d 	bl	f9d4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   1085c:	e59b300c 	ldr	r3, [fp, #12]
   10860:	e3540001 	cmp	r4, #1
   10864:	e2832001 	add	r2, r3, #1
   10868:	e58b200c 	str	r2, [fp, #12]
   1086c:	e5c37000 	strb	r7, [r3]
   10870:	9a00000b 	bls	108a4 <CString::FormatV(char const*, std::__va_list)+0x734>
   10874:	e2441001 	sub	r1, r4, #1
   10878:	e1a0000b 	mov	r0, fp
   1087c:	ebfffc54 	bl	f9d4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   10880:	e2444002 	sub	r4, r4, #2
   10884:	e59b300c 	ldr	r3, [fp, #12]
   10888:	e2444001 	sub	r4, r4, #1
   1088c:	e2832001 	add	r2, r3, #1
   10890:	e58b200c 	str	r2, [fp, #12]
   10894:	e3a02020 	mov	r2, #32
   10898:	e3740001 	cmn	r4, #1
   1089c:	e5c32000 	strb	r2, [r3]
   108a0:	1afffff7 	bne	10884 <CString::FormatV(char const*, std::__va_list)+0x714>
   108a4:	e58d6000 	str	r6, [sp]
   108a8:	eafffee0 	b	10430 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   108ac:	e28d1010 	add	r1, sp, #16
   108b0:	e1a0000b 	mov	r0, fp
   108b4:	ebfffcec 	bl	fc6c <CString::PutString(char const*)>
   108b8:	e1560004 	cmp	r6, r4
   108bc:	2afffedb 	bcs	10430 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   108c0:	e0444006 	sub	r4, r4, r6
   108c4:	e1a01004 	mov	r1, r4
   108c8:	e1a0000b 	mov	r0, fp
   108cc:	ebfffc40 	bl	f9d4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   108d0:	e2443001 	sub	r3, r4, #1
   108d4:	e59b200c 	ldr	r2, [fp, #12]
   108d8:	e2433001 	sub	r3, r3, #1
   108dc:	e2821001 	add	r1, r2, #1
   108e0:	e58b100c 	str	r1, [fp, #12]
   108e4:	e3a01020 	mov	r1, #32
   108e8:	e3730001 	cmn	r3, #1
   108ec:	e5c21000 	strb	r1, [r2]
   108f0:	1afffff7 	bne	108d4 <CString::FormatV(char const*, std::__va_list)+0x764>
   108f4:	eafffecd 	b	10430 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   108f8:	e1a01008 	mov	r1, r8
   108fc:	e1a0000b 	mov	r0, fp
   10900:	ebfffcd9 	bl	fc6c <CString::PutString(char const*)>
   10904:	e1570004 	cmp	r7, r4
   10908:	2affffe5 	bcs	108a4 <CString::FormatV(char const*, std::__va_list)+0x734>
   1090c:	e0444007 	sub	r4, r4, r7
   10910:	e1a01004 	mov	r1, r4
   10914:	e1a0000b 	mov	r0, fp
   10918:	ebfffc2d 	bl	f9d4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   1091c:	e2443001 	sub	r3, r4, #1
   10920:	e59b200c 	ldr	r2, [fp, #12]
   10924:	e2433001 	sub	r3, r3, #1
   10928:	e2821001 	add	r1, r2, #1
   1092c:	e58b100c 	str	r1, [fp, #12]
   10930:	e3a01020 	mov	r1, #32
   10934:	e3730001 	cmn	r3, #1
   10938:	e5c21000 	strb	r1, [r2]
   1093c:	1afffff7 	bne	10920 <CString::FormatV(char const*, std::__va_list)+0x7b0>
   10940:	eaffffd7 	b	108a4 <CString::FormatV(char const*, std::__va_list)+0x734>
   10944:	e59d300c 	ldr	r3, [sp, #12]
   10948:	e3530000 	cmp	r3, #0
   1094c:	1a00001e 	bne	109cc <CString::FormatV(char const*, std::__va_list)+0x85c>
   10950:	e1580004 	cmp	r8, r4
   10954:	2afffeb2 	bcs	10424 <CString::FormatV(char const*, std::__va_list)+0x2b4>
   10958:	e0444008 	sub	r4, r4, r8
   1095c:	e1a0000b 	mov	r0, fp
   10960:	e1a01004 	mov	r1, r4
   10964:	ebfffc1a 	bl	f9d4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   10968:	e3a00030 	mov	r0, #48	; 0x30
   1096c:	e2443001 	sub	r3, r4, #1
   10970:	e59b200c 	ldr	r2, [fp, #12]
   10974:	e2433001 	sub	r3, r3, #1
   10978:	e2821001 	add	r1, r2, #1
   1097c:	e3730001 	cmn	r3, #1
   10980:	e58b100c 	str	r1, [fp, #12]
   10984:	e5c20000 	strb	r0, [r2]
   10988:	1afffff8 	bne	10970 <CString::FormatV(char const*, std::__va_list)+0x800>
   1098c:	eafffea4 	b	10424 <CString::FormatV(char const*, std::__va_list)+0x2b4>
   10990:	e3a01001 	mov	r1, #1
   10994:	e1a0000b 	mov	r0, fp
   10998:	ebfffc0d 	bl	f9d4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   1099c:	e3a0202d 	mov	r2, #45	; 0x2d
   109a0:	e59b300c 	ldr	r3, [fp, #12]
   109a4:	e2831001 	add	r1, r3, #1
   109a8:	e58b100c 	str	r1, [fp, #12]
   109ac:	e5c32000 	strb	r2, [r3]
   109b0:	eafffefa 	b	105a0 <CString::FormatV(char const*, std::__va_list)+0x430>
   109b4:	e1a09006 	mov	r9, r6
   109b8:	e3a0a001 	mov	sl, #1
   109bc:	eafffed8 	b	10524 <CString::FormatV(char const*, std::__va_list)+0x3b4>
   109c0:	e1a03006 	mov	r3, r6
   109c4:	e3a0a001 	mov	sl, #1
   109c8:	eafffe58 	b	10330 <CString::FormatV(char const*, std::__va_list)+0x1c0>
   109cc:	e3a01001 	mov	r1, #1
   109d0:	e1a0000b 	mov	r0, fp
   109d4:	ebfffbfe 	bl	f9d4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   109d8:	e3a0202d 	mov	r2, #45	; 0x2d
   109dc:	e59b300c 	ldr	r3, [fp, #12]
   109e0:	e2831001 	add	r1, r3, #1
   109e4:	e58b100c 	str	r1, [fp, #12]
   109e8:	e5c32000 	strb	r2, [r3]
   109ec:	eaffffd7 	b	10950 <CString::FormatV(char const*, std::__va_list)+0x7e0>
   109f0:	cccccccd 	.word	0xcccccccd

000109f4 <CString::Format(char const*, ...)>:
   109f4:	e92d000e 	push	{r1, r2, r3}
   109f8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   109fc:	e24dd008 	sub	sp, sp, #8
   10a00:	e28d3010 	add	r3, sp, #16
   10a04:	e1a02003 	mov	r2, r3
   10a08:	e59d100c 	ldr	r1, [sp, #12]
   10a0c:	e58d3004 	str	r3, [sp, #4]
   10a10:	ebfffdd6 	bl	10170 <CString::FormatV(char const*, std::__va_list)>
   10a14:	e28dd008 	add	sp, sp, #8
   10a18:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   10a1c:	e28dd00c 	add	sp, sp, #12
   10a20:	e12fff1e 	bx	lr

00010a24 <__aeabi_atexit>:
   10a24:	e12fff1e 	bx	lr

00010a28 <halt>:
   10a28:	f10c0080 	cpsid	i
   10a2c:	f10c0040 	cpsid	f
   10a30:	eafffffe 	b	10a30 <halt+0x8>

00010a34 <reboot>:
   10a34:	e3a03000 	mov	r3, #0
   10a38:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   10a3c:	e59f3010 	ldr	r3, [pc, #16]	; 10a54 <reboot+0x20>
   10a40:	e59f1010 	ldr	r1, [pc, #16]	; 10a58 <reboot+0x24>
   10a44:	e59f2010 	ldr	r2, [pc, #16]	; 10a5c <reboot+0x28>
   10a48:	e5831024 	str	r1, [r3, #36]	; 0x24
   10a4c:	e583201c 	str	r2, [r3, #28]
   10a50:	eafffffe 	b	10a50 <reboot+0x1c>
   10a54:	20100000 	.word	0x20100000
   10a58:	5a000001 	.word	0x5a000001
   10a5c:	5a000020 	.word	0x5a000020

00010a60 <sysinit>:
   10a60:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   10a64:	e24dd01c 	sub	sp, sp, #28
   10a68:	f1080040 	cpsie	f
   10a6c:	ee113f50 	mrc	15, 0, r3, cr1, cr0, {2}
   10a70:	e383360f 	orr	r3, r3, #15728640	; 0xf00000
   10a74:	ee013f50 	mcr	15, 0, r3, cr1, cr0, {2}
   10a78:	e3a02000 	mov	r2, #0
   10a7c:	ee072f95 	mcr	15, 0, r2, cr7, cr5, {4}
   10a80:	e3a03101 	mov	r3, #1073741824	; 0x40000000
   10a84:	eee83a10 	vmsr	fpexc, r3
   10a88:	e3a03402 	mov	r3, #33554432	; 0x2000000
   10a8c:	eee13a10 	vmsr	fpscr, r3
   10a90:	e59f3068 	ldr	r3, [pc, #104]	; 10b00 <sysinit+0xa0>
   10a94:	e59f1068 	ldr	r1, [pc, #104]	; 10b04 <sysinit+0xa4>
   10a98:	e1530001 	cmp	r3, r1
   10a9c:	2a000002 	bcs	10aac <sysinit+0x4c>
   10aa0:	e4c32001 	strb	r2, [r3], #1
   10aa4:	e1530001 	cmp	r3, r1
   10aa8:	1afffffc 	bne	10aa0 <sysinit+0x40>
   10aac:	e1a0000d 	mov	r0, sp
   10ab0:	ebfff2e8 	bl	d658 <CMachineInfo::CMachineInfo()>
   10ab4:	e59f504c 	ldr	r5, [pc, #76]	; 10b08 <sysinit+0xa8>
   10ab8:	e59f304c 	ldr	r3, [pc, #76]	; 10b0c <sysinit+0xac>
   10abc:	e1550003 	cmp	r5, r3
   10ac0:	2a000009 	bcs	10aec <sysinit+0x8c>
   10ac4:	e1e06005 	mvn	r6, r5
   10ac8:	e3a04000 	mov	r4, #0
   10acc:	e0866003 	add	r6, r6, r3
   10ad0:	e1a06126 	lsr	r6, r6, #2
   10ad4:	e2866001 	add	r6, r6, #1
   10ad8:	e2844001 	add	r4, r4, #1
   10adc:	e4953004 	ldr	r3, [r5], #4
   10ae0:	e12fff33 	blx	r3
   10ae4:	e1540006 	cmp	r4, r6
   10ae8:	1afffffa 	bne	10ad8 <sysinit+0x78>
   10aec:	ebffdd5d 	bl	8068 <main>
   10af0:	e3500001 	cmp	r0, #1
   10af4:	0a000000 	beq	10afc <sysinit+0x9c>
   10af8:	ebffffca 	bl	10a28 <halt>
   10afc:	ebffffcc 	bl	10a34 <reboot>
   10b00:	00016668 	.word	0x00016668
   10b04:	0001672c 	.word	0x0001672c
   10b08:	00016558 	.word	0x00016558
   10b0c:	00016568 	.word	0x00016568

00010b10 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]>:
   10b10:	e2800001 	add	r0, r0, #1
   10b14:	e3a03000 	mov	r3, #0
   10b18:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   10b1c:	e59f3020 	ldr	r3, [pc, #32]	; 10b44 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]+0x34>
   10b20:	e1a01003 	mov	r1, r3
   10b24:	e5932004 	ldr	r2, [r3, #4]
   10b28:	e5913004 	ldr	r3, [r1, #4]
   10b2c:	e0433002 	sub	r3, r3, r2
   10b30:	e1500003 	cmp	r0, r3
   10b34:	8afffffb 	bhi	10b28 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]+0x18>
   10b38:	e3a03000 	mov	r3, #0
   10b3c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   10b40:	e12fff1e 	bx	lr
   10b44:	20003000 	.word	0x20003000

00010b48 <CTimer::CTimer(CInterruptSystem*)>:
   10b48:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   10b4c:	e3a05000 	mov	r5, #0
   10b50:	e3a07001 	mov	r7, #1
   10b54:	e1a04000 	mov	r4, r0
   10b58:	e59f605c 	ldr	r6, [pc, #92]	; 10bbc <CTimer::CTimer(CInterruptSystem*)+0x74>
   10b5c:	e5805004 	str	r5, [r0, #4]
   10b60:	e5801000 	str	r1, [r0]
   10b64:	e5805008 	str	r5, [r0, #8]
   10b68:	e5805014 	str	r5, [r0, #20]
   10b6c:	e5807010 	str	r7, [r0, #16]
   10b70:	e580500c 	str	r5, [r0, #12]
   10b74:	e2800018 	add	r0, r0, #24
   10b78:	eb000b32 	bl	13848 <CPtrList::CPtrList()>
   10b7c:	e5961000 	ldr	r1, [r6]
   10b80:	e59f2038 	ldr	r2, [pc, #56]	; 10bc0 <CTimer::CTimer(CInterruptSystem*)+0x78>
   10b84:	e59f3038 	ldr	r3, [pc, #56]	; 10bc4 <CTimer::CTimer(CInterruptSystem*)+0x7c>
   10b88:	e1510005 	cmp	r1, r5
   10b8c:	e584701c 	str	r7, [r4, #28]
   10b90:	e5845028 	str	r5, [r4, #40]	; 0x28
   10b94:	e5842020 	str	r2, [r4, #32]
   10b98:	e5843024 	str	r3, [r4, #36]	; 0x24
   10b9c:	0a000003 	beq	10bb0 <CTimer::CTimer(CInterruptSystem*)+0x68>
   10ba0:	e3a0203d 	mov	r2, #61	; 0x3d
   10ba4:	e59f101c 	ldr	r1, [pc, #28]	; 10bc8 <CTimer::CTimer(CInterruptSystem*)+0x80>
   10ba8:	e59f001c 	ldr	r0, [pc, #28]	; 10bcc <CTimer::CTimer(CInterruptSystem*)+0x84>
   10bac:	ebffe7ba 	bl	aa9c <assertion_failed>
   10bb0:	e5864000 	str	r4, [r6]
   10bb4:	e1a00004 	mov	r0, r4
   10bb8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   10bbc:	000166a4 	.word	0x000166a4
   10bc0:	00055730 	.word	0x00055730
   10bc4:	0000015e 	.word	0x0000015e
   10bc8:	000150ec 	.word	0x000150ec
   10bcc:	000150f8 	.word	0x000150f8

00010bd0 <CTimer::~CTimer()>:
   10bd0:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10bd4:	e1a0a000 	mov	sl, r0
   10bd8:	e5900000 	ldr	r0, [r0]
   10bdc:	e3500000 	cmp	r0, #0
   10be0:	0a000028 	beq	10c88 <CTimer::~CTimer()+0xb8>
   10be4:	e3a01003 	mov	r1, #3
   10be8:	ebffee76 	bl	c5c8 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   10bec:	e3a0904b 	mov	r9, #75	; 0x4b
   10bf0:	e59f70a8 	ldr	r7, [pc, #168]	; 10ca0 <CTimer::~CTimer()+0xd0>
   10bf4:	e59f60a8 	ldr	r6, [pc, #168]	; 10ca4 <CTimer::~CTimer()+0xd4>
   10bf8:	e59f80a8 	ldr	r8, [pc, #168]	; 10ca8 <CTimer::~CTimer()+0xd8>
   10bfc:	e28a4018 	add	r4, sl, #24
   10c00:	ea000011 	b	10c4c <CTimer::~CTimer()+0x7c>
   10c04:	e1a01005 	mov	r1, r5
   10c08:	e1a00004 	mov	r0, r4
   10c0c:	eb000b35 	bl	138e8 <CPtrList::GetPtr(TPtrListElement*)>
   10c10:	e250b000 	subs	fp, r0, #0
   10c14:	0a000016 	beq	10c74 <CTimer::~CTimer()+0xa4>
   10c18:	e59b3000 	ldr	r3, [fp]
   10c1c:	e1530006 	cmp	r3, r6
   10c20:	0a000003 	beq	10c34 <CTimer::~CTimer()+0x64>
   10c24:	e1a02009 	mov	r2, r9
   10c28:	e1a01007 	mov	r1, r7
   10c2c:	e1a00008 	mov	r0, r8
   10c30:	ebffe799 	bl	aa9c <assertion_failed>
   10c34:	e1a01005 	mov	r1, r5
   10c38:	e1a00004 	mov	r0, r4
   10c3c:	eb000bbe 	bl	13b3c <CPtrList::Remove(TPtrListElement*)>
   10c40:	e1a0000b 	mov	r0, fp
   10c44:	e3a01014 	mov	r1, #20
   10c48:	eb0006e3 	bl	127dc <operator delete(void*, unsigned int)>
   10c4c:	e1a00004 	mov	r0, r4
   10c50:	eb000b0c 	bl	13888 <CPtrList::GetFirst()>
   10c54:	e2505000 	subs	r5, r0, #0
   10c58:	1affffe9 	bne	10c04 <CTimer::~CTimer()+0x34>
   10c5c:	e59f3048 	ldr	r3, [pc, #72]	; 10cac <CTimer::~CTimer()+0xdc>
   10c60:	e1a00004 	mov	r0, r4
   10c64:	e5835000 	str	r5, [r3]
   10c68:	eb000af9 	bl	13854 <CPtrList::~CPtrList()>
   10c6c:	e1a0000a 	mov	r0, sl
   10c70:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10c74:	e3a0204a 	mov	r2, #74	; 0x4a
   10c78:	e1a01007 	mov	r1, r7
   10c7c:	e59f002c 	ldr	r0, [pc, #44]	; 10cb0 <CTimer::~CTimer()+0xe0>
   10c80:	ebffe785 	bl	aa9c <assertion_failed>
   10c84:	eaffffe3 	b	10c18 <CTimer::~CTimer()+0x48>
   10c88:	e59f0024 	ldr	r0, [pc, #36]	; 10cb4 <CTimer::~CTimer()+0xe4>
   10c8c:	e3a02043 	mov	r2, #67	; 0x43
   10c90:	e59f1008 	ldr	r1, [pc, #8]	; 10ca0 <CTimer::~CTimer()+0xd0>
   10c94:	ebffe780 	bl	aa9c <assertion_failed>
   10c98:	e59a0000 	ldr	r0, [sl]
   10c9c:	eaffffd0 	b	10be4 <CTimer::~CTimer()+0x14>
   10ca0:	000150ec 	.word	0x000150ec
   10ca4:	4b544d43 	.word	0x4b544d43
   10ca8:	00015114 	.word	0x00015114
   10cac:	000166a4 	.word	0x000166a4
   10cb0:	00015108 	.word	0x00015108
   10cb4:	000140f0 	.word	0x000140f0

00010cb8 <CTimer::SetTimeZone(int)>:
   10cb8:	e59f2018 	ldr	r2, [pc, #24]	; 10cd8 <CTimer::SetTimeZone(int)+0x20>
   10cbc:	e2813e59 	add	r3, r1, #1424	; 0x590
   10cc0:	e283300f 	add	r3, r3, #15
   10cc4:	e1530002 	cmp	r3, r2
   10cc8:	95801014 	strls	r1, [r0, #20]
   10ccc:	93a00001 	movls	r0, #1
   10cd0:	83a00000 	movhi	r0, #0
   10cd4:	e12fff1e 	bx	lr
   10cd8:	00000b3e 	.word	0x00000b3e

00010cdc <CTimer::GetTimeZone() const>:
   10cdc:	e5900014 	ldr	r0, [r0, #20]
   10ce0:	e12fff1e 	bx	lr

00010ce4 <CTimer::SetTime(unsigned int, bool)>:
   10ce4:	e3520000 	cmp	r2, #0
   10ce8:	e92d4070 	push	{r4, r5, r6, lr}
   10cec:	e1a04000 	mov	r4, r0
   10cf0:	e1a05001 	mov	r5, r1
   10cf4:	1a000004 	bne	10d0c <CTimer::SetTime(unsigned int, bool)+0x28>
   10cf8:	e5903014 	ldr	r3, [r0, #20]
   10cfc:	e0633203 	rsb	r3, r3, r3, lsl #4
   10d00:	e1b03103 	lsls	r3, r3, #2
   10d04:	4a00000e 	bmi	10d44 <CTimer::SetTime(unsigned int, bool)+0x60>
   10d08:	e0855003 	add	r5, r5, r3
   10d0c:	e5940010 	ldr	r0, [r4, #16]
   10d10:	e3500000 	cmp	r0, #0
   10d14:	1a000002 	bne	10d24 <CTimer::SetTime(unsigned int, bool)+0x40>
   10d18:	e3a00001 	mov	r0, #1
   10d1c:	e584500c 	str	r5, [r4, #12]
   10d20:	e8bd8070 	pop	{r4, r5, r6, pc}
   10d24:	eb00064e 	bl	12664 <EnterCritical>
   10d28:	e5943010 	ldr	r3, [r4, #16]
   10d2c:	e584500c 	str	r5, [r4, #12]
   10d30:	e3530000 	cmp	r3, #0
   10d34:	0a000007 	beq	10d58 <CTimer::SetTime(unsigned int, bool)+0x74>
   10d38:	eb000676 	bl	12718 <LeaveCritical>
   10d3c:	e3a00001 	mov	r0, #1
   10d40:	e8bd8070 	pop	{r4, r5, r6, pc}
   10d44:	e2631000 	rsb	r1, r3, #0
   10d48:	e1510005 	cmp	r1, r5
   10d4c:	daffffed 	ble	10d08 <CTimer::SetTime(unsigned int, bool)+0x24>
   10d50:	e1a00002 	mov	r0, r2
   10d54:	e8bd8070 	pop	{r4, r5, r6, pc}
   10d58:	e3a00001 	mov	r0, #1
   10d5c:	e8bd8070 	pop	{r4, r5, r6, pc}

00010d60 <CTimer::GetClockTicks()>:
   10d60:	e3a03000 	mov	r3, #0
   10d64:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   10d68:	e59f2008 	ldr	r2, [pc, #8]	; 10d78 <CTimer::GetClockTicks()+0x18>
   10d6c:	e5920004 	ldr	r0, [r2, #4]
   10d70:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   10d74:	e12fff1e 	bx	lr
   10d78:	20003000 	.word	0x20003000

00010d7c <CTimer::GetTicks() const>:
   10d7c:	e5900004 	ldr	r0, [r0, #4]
   10d80:	e12fff1e 	bx	lr

00010d84 <CTimer::GetUptime() const>:
   10d84:	e5900008 	ldr	r0, [r0, #8]
   10d88:	e12fff1e 	bx	lr

00010d8c <CTimer::GetTime() const>:
   10d8c:	e590000c 	ldr	r0, [r0, #12]
   10d90:	e12fff1e 	bx	lr

00010d94 <CTimer::GetLocalTime(unsigned int*, unsigned int*)>:
   10d94:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   10d98:	e1a04000 	mov	r4, r0
   10d9c:	e5900010 	ldr	r0, [r0, #16]
   10da0:	e1a06001 	mov	r6, r1
   10da4:	e3500000 	cmp	r0, #0
   10da8:	e1a05002 	mov	r5, r2
   10dac:	1a000011 	bne	10df8 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x64>
   10db0:	e594700c 	ldr	r7, [r4, #12]
   10db4:	e5944004 	ldr	r4, [r4, #4]
   10db8:	e3560000 	cmp	r6, #0
   10dbc:	0a00001a 	beq	10e2c <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x98>
   10dc0:	e3550000 	cmp	r5, #0
   10dc4:	e5867000 	str	r7, [r6]
   10dc8:	0a000012 	beq	10e18 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x84>
   10dcc:	e3a03064 	mov	r3, #100	; 0x64
   10dd0:	e59f2068 	ldr	r2, [pc, #104]	; 10e40 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xac>
   10dd4:	e59f1068 	ldr	r1, [pc, #104]	; 10e44 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb0>
   10dd8:	e0820492 	umull	r0, r2, r2, r4
   10ddc:	e1a022a2 	lsr	r2, r2, #5
   10de0:	e0030293 	mul	r3, r3, r2
   10de4:	e0443003 	sub	r3, r4, r3
   10de8:	e0030391 	mul	r3, r1, r3
   10dec:	e3a00001 	mov	r0, #1
   10df0:	e5853000 	str	r3, [r5]
   10df4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   10df8:	eb000619 	bl	12664 <EnterCritical>
   10dfc:	e5943010 	ldr	r3, [r4, #16]
   10e00:	e594700c 	ldr	r7, [r4, #12]
   10e04:	e3530000 	cmp	r3, #0
   10e08:	e5944004 	ldr	r4, [r4, #4]
   10e0c:	0affffe9 	beq	10db8 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x24>
   10e10:	eb000640 	bl	12718 <LeaveCritical>
   10e14:	eaffffe7 	b	10db8 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x24>
   10e18:	e3a020dd 	mov	r2, #221	; 0xdd
   10e1c:	e59f1024 	ldr	r1, [pc, #36]	; 10e48 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb4>
   10e20:	e59f0024 	ldr	r0, [pc, #36]	; 10e4c <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb8>
   10e24:	ebffe71c 	bl	aa9c <assertion_failed>
   10e28:	eaffffe7 	b	10dcc <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x38>
   10e2c:	e3a020da 	mov	r2, #218	; 0xda
   10e30:	e59f1010 	ldr	r1, [pc, #16]	; 10e48 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb4>
   10e34:	e59f0014 	ldr	r0, [pc, #20]	; 10e50 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xbc>
   10e38:	ebffe717 	bl	aa9c <assertion_failed>
   10e3c:	eaffffdf 	b	10dc0 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x2c>
   10e40:	51eb851f 	.word	0x51eb851f
   10e44:	00002710 	.word	0x00002710
   10e48:	000150ec 	.word	0x000150ec
   10e4c:	0001514c 	.word	0x0001514c
   10e50:	0001513c 	.word	0x0001513c

00010e54 <CTimer::GetUniversalTime() const>:
   10e54:	e5903014 	ldr	r3, [r0, #20]
   10e58:	e590000c 	ldr	r0, [r0, #12]
   10e5c:	e0633203 	rsb	r3, r3, r3, lsl #4
   10e60:	e1a03103 	lsl	r3, r3, #2
   10e64:	e1530000 	cmp	r3, r0
   10e68:	d0400003 	suble	r0, r0, r3
   10e6c:	c3a00000 	movgt	r0, #0
   10e70:	e12fff1e 	bx	lr

00010e74 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)>:
   10e74:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10e78:	e1a05000 	mov	r5, r0
   10e7c:	e5900010 	ldr	r0, [r0, #16]
   10e80:	e1a09001 	mov	r9, r1
   10e84:	e3500000 	cmp	r0, #0
   10e88:	e1a07002 	mov	r7, r2
   10e8c:	1a000019 	bne	10ef8 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x84>
   10e90:	e595600c 	ldr	r6, [r5, #12]
   10e94:	e5958004 	ldr	r8, [r5, #4]
   10e98:	e5953014 	ldr	r3, [r5, #20]
   10e9c:	e0633203 	rsb	r3, r3, r3, lsl #4
   10ea0:	e1a04103 	lsl	r4, r3, #2
   10ea4:	e1540006 	cmp	r4, r6
   10ea8:	ca000010 	bgt	10ef0 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x7c>
   10eac:	e3590000 	cmp	r9, #0
   10eb0:	0a00001d 	beq	10f2c <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xb8>
   10eb4:	e0464004 	sub	r4, r6, r4
   10eb8:	e3570000 	cmp	r7, #0
   10ebc:	e5894000 	str	r4, [r9]
   10ec0:	0a000014 	beq	10f18 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xa4>
   10ec4:	e3a03064 	mov	r3, #100	; 0x64
   10ec8:	e59f2070 	ldr	r2, [pc, #112]	; 10f40 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xcc>
   10ecc:	e59f1070 	ldr	r1, [pc, #112]	; 10f44 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd0>
   10ed0:	e0820892 	umull	r0, r2, r2, r8
   10ed4:	e1a022a2 	lsr	r2, r2, #5
   10ed8:	e0030293 	mul	r3, r3, r2
   10edc:	e0483003 	sub	r3, r8, r3
   10ee0:	e0030391 	mul	r3, r1, r3
   10ee4:	e3a00001 	mov	r0, #1
   10ee8:	e5873000 	str	r3, [r7]
   10eec:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10ef0:	e3a00000 	mov	r0, #0
   10ef4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10ef8:	eb0005d9 	bl	12664 <EnterCritical>
   10efc:	e5953010 	ldr	r3, [r5, #16]
   10f00:	e595600c 	ldr	r6, [r5, #12]
   10f04:	e3530000 	cmp	r3, #0
   10f08:	e5958004 	ldr	r8, [r5, #4]
   10f0c:	0affffe1 	beq	10e98 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x24>
   10f10:	eb000600 	bl	12718 <LeaveCritical>
   10f14:	eaffffdf 	b	10e98 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x24>
   10f18:	e59f2028 	ldr	r2, [pc, #40]	; 10f48 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd4>
   10f1c:	e59f1028 	ldr	r1, [pc, #40]	; 10f4c <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd8>
   10f20:	e59f0028 	ldr	r0, [pc, #40]	; 10f50 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xdc>
   10f24:	ebffe6dc 	bl	aa9c <assertion_failed>
   10f28:	eaffffe5 	b	10ec4 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x50>
   10f2c:	e3a020ff 	mov	r2, #255	; 0xff
   10f30:	e59f1014 	ldr	r1, [pc, #20]	; 10f4c <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd8>
   10f34:	e59f0018 	ldr	r0, [pc, #24]	; 10f54 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xe0>
   10f38:	ebffe6d7 	bl	aa9c <assertion_failed>
   10f3c:	eaffffdc 	b	10eb4 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x40>
   10f40:	51eb851f 	.word	0x51eb851f
   10f44:	00002710 	.word	0x00002710
   10f48:	00000102 	.word	0x00000102
   10f4c:	000150ec 	.word	0x000150ec
   10f50:	0001514c 	.word	0x0001514c
   10f54:	0001513c 	.word	0x0001513c

00010f58 <CTimer::GetTimeString()>:
   10f58:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f5c:	e1a05000 	mov	r5, r0
   10f60:	e5900010 	ldr	r0, [r0, #16]
   10f64:	e24dd014 	sub	sp, sp, #20
   10f68:	e3500000 	cmp	r0, #0
   10f6c:	1a000065 	bne	11108 <CTimer::GetTimeString()+0x1b0>
   10f70:	e595400c 	ldr	r4, [r5, #12]
   10f74:	e5959004 	ldr	r9, [r5, #4]
   10f78:	e1940009 	orrs	r0, r4, r9
   10f7c:	0a00003e 	beq	1107c <CTimer::GetTimeString()+0x124>
   10f80:	e59f61a0 	ldr	r6, [pc, #416]	; 11128 <CTimer::GetTimeString()+0x1d0>
   10f84:	e59f81a0 	ldr	r8, [pc, #416]	; 1112c <CTimer::GetTimeString()+0x1d4>
   10f88:	e0873496 	umull	r3, r7, r6, r4
   10f8c:	e1a072a7 	lsr	r7, r7, #5
   10f90:	e0863796 	umull	r3, r6, r6, r7
   10f94:	e59f3194 	ldr	r3, [pc, #404]	; 11130 <CTimer::GetTimeString()+0x1d8>
   10f98:	e0882498 	umull	r2, r8, r8, r4
   10f9c:	e0832493 	umull	r2, r3, r3, r4
   10fa0:	e1a062a6 	lsr	r6, r6, #5
   10fa4:	e0666206 	rsb	r6, r6, r6, lsl #4
   10fa8:	e0672207 	rsb	r2, r7, r7, lsl #4
   10fac:	e0476106 	sub	r6, r7, r6, lsl #2
   10fb0:	e3a0a064 	mov	sl, #100	; 0x64
   10fb4:	e0447102 	sub	r7, r4, r2, lsl #2
   10fb8:	e3a0be19 	mov	fp, #400	; 0x190
   10fbc:	e59f5170 	ldr	r5, [pc, #368]	; 11134 <CTimer::GetTimeString()+0x1dc>
   10fc0:	e59fe170 	ldr	lr, [pc, #368]	; 11138 <CTimer::GetTimeString()+0x1e0>
   10fc4:	e59fc170 	ldr	ip, [pc, #368]	; 1113c <CTimer::GetTimeString()+0x1e4>
   10fc8:	e59f0170 	ldr	r0, [pc, #368]	; 11140 <CTimer::GetTimeString()+0x1e8>
   10fcc:	e1a085a8 	lsr	r8, r8, #11
   10fd0:	e1a04823 	lsr	r4, r3, #16
   10fd4:	ea00000a 	b	11004 <CTimer::GetTimeString()+0xac>
   10fd8:	e001019b 	mul	r1, fp, r1
   10fdc:	e0451001 	sub	r1, r5, r1
   10fe0:	e16f1f11 	clz	r1, r1
   10fe4:	e1a012a1 	lsr	r1, r1, #5
   10fe8:	e3510000 	cmp	r1, #0
   10fec:	01a0300c 	moveq	r3, ip
   10ff0:	11a03000 	movne	r3, r0
   10ff4:	e1540003 	cmp	r4, r3
   10ff8:	3a000021 	bcc	11084 <CTimer::GetTimeString()+0x12c>
   10ffc:	e0444003 	sub	r4, r4, r3
   11000:	e2855001 	add	r5, r5, #1
   11004:	e081359e 	umull	r3, r1, lr, r5
   11008:	e1a032a1 	lsr	r3, r1, #5
   1100c:	e003039a 	mul	r3, sl, r3
   11010:	e1550003 	cmp	r5, r3
   11014:	e1a013a1 	lsr	r1, r1, #7
   11018:	0affffee 	beq	10fd8 <CTimer::GetTimeString()+0x80>
   1101c:	e3150003 	tst	r5, #3
   11020:	03a01001 	moveq	r1, #1
   11024:	13a01000 	movne	r1, #0
   11028:	eaffffee 	b	10fe8 <CTimer::GetTimeString()+0x90>
   1102c:	e3a03064 	mov	r3, #100	; 0x64
   11030:	e59fb100 	ldr	fp, [pc, #256]	; 11138 <CTimer::GetTimeString()+0x1e0>
   11034:	e3a00010 	mov	r0, #16
   11038:	e08b299b 	umull	r2, fp, fp, r9
   1103c:	e1a0b2ab 	lsr	fp, fp, #5
   11040:	e00b0b93 	mul	fp, r3, fp
   11044:	eb0005e0 	bl	127cc <operator new(unsigned int)>
   11048:	e049b00b 	sub	fp, r9, fp
   1104c:	e1a09000 	mov	r9, r0
   11050:	ebfffa79 	bl	fa3c <CString::CString()>
   11054:	e59f30e8 	ldr	r3, [pc, #232]	; 11144 <CTimer::GetTimeString()+0x1ec>
   11058:	e1550003 	cmp	r5, r3
   1105c:	8a000018 	bhi	110c4 <CTimer::GetTimeString()+0x16c>
   11060:	e1a00009 	mov	r0, r9
   11064:	e88d0880 	stm	sp, {r7, fp}
   11068:	e1a03006 	mov	r3, r6
   1106c:	e1a02008 	mov	r2, r8
   11070:	e59f10d0 	ldr	r1, [pc, #208]	; 11148 <CTimer::GetTimeString()+0x1f0>
   11074:	ebfffe5e 	bl	109f4 <CString::Format(char const*, ...)>
   11078:	e1a00009 	mov	r0, r9
   1107c:	e28dd014 	add	sp, sp, #20
   11080:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11084:	e3a0a000 	mov	sl, #0
   11088:	e3a0001d 	mov	r0, #29
   1108c:	e59f20b8 	ldr	r2, [pc, #184]	; 1114c <CTimer::GetTimeString()+0x1f4>
   11090:	ea000004 	b	110a8 <CTimer::GetTimeString()+0x150>
   11094:	e1a03000 	mov	r3, r0
   11098:	e1540003 	cmp	r4, r3
   1109c:	3affffe2 	bcc	1102c <CTimer::GetTimeString()+0xd4>
   110a0:	e0444003 	sub	r4, r4, r3
   110a4:	e28aa001 	add	sl, sl, #1
   110a8:	e35a0001 	cmp	sl, #1
   110ac:	13a03000 	movne	r3, #0
   110b0:	02013001 	andeq	r3, r1, #1
   110b4:	e3530000 	cmp	r3, #0
   110b8:	1afffff5 	bne	11094 <CTimer::GetTimeString()+0x13c>
   110bc:	e792310a 	ldr	r3, [r2, sl, lsl #2]
   110c0:	eafffff4 	b	11098 <CTimer::GetTimeString()+0x140>
   110c4:	e59f3084 	ldr	r3, [pc, #132]	; 11150 <CTimer::GetTimeString()+0x1f8>
   110c8:	e58db00c 	str	fp, [sp, #12]
   110cc:	e0832893 	umull	r2, r3, r3, r8
   110d0:	e1a03223 	lsr	r3, r3, #4
   110d4:	e0833083 	add	r3, r3, r3, lsl #1
   110d8:	e59f2074 	ldr	r2, [pc, #116]	; 11154 <CTimer::GetTimeString()+0x1fc>
   110dc:	e0488183 	sub	r8, r8, r3, lsl #3
   110e0:	e792210a 	ldr	r2, [r2, sl, lsl #2]
   110e4:	e1a00009 	mov	r0, r9
   110e8:	e98d00c0 	stmib	sp, {r6, r7}
   110ec:	e2843001 	add	r3, r4, #1
   110f0:	e58d8000 	str	r8, [sp]
   110f4:	e59f105c 	ldr	r1, [pc, #92]	; 11158 <CTimer::GetTimeString()+0x200>
   110f8:	ebfffe3d 	bl	109f4 <CString::Format(char const*, ...)>
   110fc:	e1a00009 	mov	r0, r9
   11100:	e28dd014 	add	sp, sp, #20
   11104:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11108:	eb000555 	bl	12664 <EnterCritical>
   1110c:	e5953010 	ldr	r3, [r5, #16]
   11110:	e595400c 	ldr	r4, [r5, #12]
   11114:	e3530000 	cmp	r3, #0
   11118:	e5959004 	ldr	r9, [r5, #4]
   1111c:	0affff95 	beq	10f78 <CTimer::GetTimeString()+0x20>
   11120:	eb00057c 	bl	12718 <LeaveCritical>
   11124:	eaffff93 	b	10f78 <CTimer::GetTimeString()+0x20>
   11128:	88888889 	.word	0x88888889
   1112c:	91a2b3c5 	.word	0x91a2b3c5
   11130:	c22e4507 	.word	0xc22e4507
   11134:	000007b2 	.word	0x000007b2
   11138:	51eb851f 	.word	0x51eb851f
   1113c:	0000016d 	.word	0x0000016d
   11140:	0000016e 	.word	0x0000016e
   11144:	000007b7 	.word	0x000007b7
   11148:	0001517c 	.word	0x0001517c
   1114c:	000150b4 	.word	0x000150b4
   11150:	aaaaaaab 	.word	0xaaaaaaab
   11154:	00016568 	.word	0x00016568
   11158:	00015160 	.word	0x00015160

0001115c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>:
   1115c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11160:	e1a09000 	mov	r9, r0
   11164:	e24dd00c 	sub	sp, sp, #12
   11168:	e58d0004 	str	r0, [sp, #4]
   1116c:	e1a04002 	mov	r4, r2
   11170:	e3a00014 	mov	r0, #20
   11174:	e1a06001 	mov	r6, r1
   11178:	e1a07003 	mov	r7, r3
   1117c:	e59d5030 	ldr	r5, [sp, #48]	; 0x30
   11180:	eb000591 	bl	127cc <operator new(unsigned int)>
   11184:	e5991004 	ldr	r1, [r9, #4]
   11188:	e3540000 	cmp	r4, #0
   1118c:	e1a08000 	mov	r8, r0
   11190:	e0816006 	add	r6, r1, r6
   11194:	0a00003d 	beq	11290 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x134>
   11198:	e59d3004 	ldr	r3, [sp, #4]
   1119c:	e59f2100 	ldr	r2, [pc, #256]	; 112a4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x148>
   111a0:	e593001c 	ldr	r0, [r3, #28]
   111a4:	e98800d0 	stmib	r8, {r4, r6, r7}
   111a8:	e3500000 	cmp	r0, #0
   111ac:	e5885010 	str	r5, [r8, #16]
   111b0:	e5882000 	str	r2, [r8]
   111b4:	1a000033 	bne	11288 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x12c>
   111b8:	e59d3004 	ldr	r3, [sp, #4]
   111bc:	e2835018 	add	r5, r3, #24
   111c0:	e1a00005 	mov	r0, r5
   111c4:	eb0009af 	bl	13888 <CPtrList::GetFirst()>
   111c8:	e2504000 	subs	r4, r0, #0
   111cc:	0a000028 	beq	11274 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x118>
   111d0:	e59f90d0 	ldr	r9, [pc, #208]	; 112a8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x14c>
   111d4:	e59f70c8 	ldr	r7, [pc, #200]	; 112a4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x148>
   111d8:	e59fb0cc 	ldr	fp, [pc, #204]	; 112ac <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x150>
   111dc:	ea000010 	b	11224 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xc8>
   111e0:	e59a3000 	ldr	r3, [sl]
   111e4:	e1530007 	cmp	r3, r7
   111e8:	0a000003 	beq	111fc <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xa0>
   111ec:	e1a0200b 	mov	r2, fp
   111f0:	e1a01009 	mov	r1, r9
   111f4:	e59f00b4 	ldr	r0, [pc, #180]	; 112b0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x154>
   111f8:	ebffe627 	bl	aa9c <assertion_failed>
   111fc:	e59a3008 	ldr	r3, [sl, #8]
   11200:	e1a01004 	mov	r1, r4
   11204:	e0433006 	sub	r3, r3, r6
   11208:	e3530000 	cmp	r3, #0
   1120c:	e1a00005 	mov	r0, r5
   11210:	ca00000d 	bgt	1124c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xf0>
   11214:	eb00099d 	bl	13890 <CPtrList::GetNext(TPtrListElement*)>
   11218:	e3500000 	cmp	r0, #0
   1121c:	0a000014 	beq	11274 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x118>
   11220:	e1a04000 	mov	r4, r0
   11224:	e1a01004 	mov	r1, r4
   11228:	e1a00005 	mov	r0, r5
   1122c:	eb0009ad 	bl	138e8 <CPtrList::GetPtr(TPtrListElement*)>
   11230:	e250a000 	subs	sl, r0, #0
   11234:	1affffe9 	bne	111e0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x84>
   11238:	e59f2074 	ldr	r2, [pc, #116]	; 112b4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x158>
   1123c:	e1a01009 	mov	r1, r9
   11240:	e59f0070 	ldr	r0, [pc, #112]	; 112b8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x15c>
   11244:	ebffe614 	bl	aa9c <assertion_failed>
   11248:	eaffffe4 	b	111e0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x84>
   1124c:	e1a02008 	mov	r2, r8
   11250:	eb0009ba 	bl	13940 <CPtrList::InsertBefore(TPtrListElement*, void*)>
   11254:	e59d3004 	ldr	r3, [sp, #4]
   11258:	e593301c 	ldr	r3, [r3, #28]
   1125c:	e3530000 	cmp	r3, #0
   11260:	0a000000 	beq	11268 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x10c>
   11264:	eb00052b 	bl	12718 <LeaveCritical>
   11268:	e1a00008 	mov	r0, r8
   1126c:	e28dd00c 	add	sp, sp, #12
   11270:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11274:	e1a01004 	mov	r1, r4
   11278:	e1a00005 	mov	r0, r5
   1127c:	e1a02008 	mov	r2, r8
   11280:	eb0009ef 	bl	13a44 <CPtrList::InsertAfter(TPtrListElement*, void*)>
   11284:	eafffff2 	b	11254 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xf8>
   11288:	eb0004f5 	bl	12664 <EnterCritical>
   1128c:	eaffffc9 	b	111b8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x5c>
   11290:	e59f2024 	ldr	r2, [pc, #36]	; 112bc <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x160>
   11294:	e59f100c 	ldr	r1, [pc, #12]	; 112a8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x14c>
   11298:	e59f0020 	ldr	r0, [pc, #32]	; 112c0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x164>
   1129c:	ebffe5fe 	bl	aa9c <assertion_failed>
   112a0:	eaffffbc 	b	11198 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x3c>
   112a4:	4b544d43 	.word	0x4b544d43
   112a8:	000150ec 	.word	0x000150ec
   112ac:	0000016a 	.word	0x0000016a
   112b0:	000151a0 	.word	0x000151a0
   112b4:	00000169 	.word	0x00000169
   112b8:	00015190 	.word	0x00015190
   112bc:	00000159 	.word	0x00000159
   112c0:	00014bc8 	.word	0x00014bc8

000112c4 <CTimer::CancelKernelTimer(unsigned int)>:
   112c4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   112c8:	e2514000 	subs	r4, r1, #0
   112cc:	e1a05000 	mov	r5, r0
   112d0:	0a00001f 	beq	11354 <CTimer::CancelKernelTimer(unsigned int)+0x90>
   112d4:	e595001c 	ldr	r0, [r5, #28]
   112d8:	e3500000 	cmp	r0, #0
   112dc:	1a00001a 	bne	1134c <CTimer::CancelKernelTimer(unsigned int)+0x88>
   112e0:	e2856018 	add	r6, r5, #24
   112e4:	e1a00006 	mov	r0, r6
   112e8:	e1a01004 	mov	r1, r4
   112ec:	eb000a65 	bl	13c88 <CPtrList::Find(void*)>
   112f0:	e2507000 	subs	r7, r0, #0
   112f4:	0a00000f 	beq	11338 <CTimer::CancelKernelTimer(unsigned int)+0x74>
   112f8:	e59f3068 	ldr	r3, [pc, #104]	; 11368 <CTimer::CancelKernelTimer(unsigned int)+0xa4>
   112fc:	e5942000 	ldr	r2, [r4]
   11300:	e1520003 	cmp	r2, r3
   11304:	0a000003 	beq	11318 <CTimer::CancelKernelTimer(unsigned int)+0x54>
   11308:	e59f205c 	ldr	r2, [pc, #92]	; 1136c <CTimer::CancelKernelTimer(unsigned int)+0xa8>
   1130c:	e59f105c 	ldr	r1, [pc, #92]	; 11370 <CTimer::CancelKernelTimer(unsigned int)+0xac>
   11310:	e59f005c 	ldr	r0, [pc, #92]	; 11374 <CTimer::CancelKernelTimer(unsigned int)+0xb0>
   11314:	ebffe5e0 	bl	aa9c <assertion_failed>
   11318:	e1a01007 	mov	r1, r7
   1131c:	e1a00006 	mov	r0, r6
   11320:	eb000a05 	bl	13b3c <CPtrList::Remove(TPtrListElement*)>
   11324:	e3a03000 	mov	r3, #0
   11328:	e1a00004 	mov	r0, r4
   1132c:	e5843000 	str	r3, [r4]
   11330:	e3a01014 	mov	r1, #20
   11334:	eb000528 	bl	127dc <operator delete(void*, unsigned int)>
   11338:	e595301c 	ldr	r3, [r5, #28]
   1133c:	e3530000 	cmp	r3, #0
   11340:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   11344:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   11348:	ea0004f2 	b	12718 <LeaveCritical>
   1134c:	eb0004c4 	bl	12664 <EnterCritical>
   11350:	eaffffe2 	b	112e0 <CTimer::CancelKernelTimer(unsigned int)+0x1c>
   11354:	e59f201c 	ldr	r2, [pc, #28]	; 11378 <CTimer::CancelKernelTimer(unsigned int)+0xb4>
   11358:	e59f1010 	ldr	r1, [pc, #16]	; 11370 <CTimer::CancelKernelTimer(unsigned int)+0xac>
   1135c:	e59f0018 	ldr	r0, [pc, #24]	; 1137c <CTimer::CancelKernelTimer(unsigned int)+0xb8>
   11360:	ebffe5cd 	bl	aa9c <assertion_failed>
   11364:	eaffffda 	b	112d4 <CTimer::CancelKernelTimer(unsigned int)+0x10>
   11368:	4b544d43 	.word	0x4b544d43
   1136c:	0000018d 	.word	0x0000018d
   11370:	000150ec 	.word	0x000150ec
   11374:	00015114 	.word	0x00015114
   11378:	00000186 	.word	0x00000186
   1137c:	00015108 	.word	0x00015108

00011380 <CTimer::PollKernelTimers()>:
   11380:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11384:	e1a05000 	mov	r5, r0
   11388:	e590001c 	ldr	r0, [r0, #28]
   1138c:	e3500000 	cmp	r0, #0
   11390:	1a00004a 	bne	114c0 <CTimer::PollKernelTimers()+0x140>
   11394:	e2856018 	add	r6, r5, #24
   11398:	e1a00006 	mov	r0, r6
   1139c:	eb000939 	bl	13888 <CPtrList::GetFirst()>
   113a0:	e2504000 	subs	r4, r0, #0
   113a4:	0a00003b 	beq	11498 <CTimer::PollKernelTimers()+0x118>
   113a8:	e59f9118 	ldr	r9, [pc, #280]	; 114c8 <CTimer::PollKernelTimers()+0x148>
   113ac:	e59f8118 	ldr	r8, [pc, #280]	; 114cc <CTimer::PollKernelTimers()+0x14c>
   113b0:	e59fa118 	ldr	sl, [pc, #280]	; 114d0 <CTimer::PollKernelTimers()+0x150>
   113b4:	ea000010 	b	113fc <CTimer::PollKernelTimers()+0x7c>
   113b8:	e5974004 	ldr	r4, [r7, #4]
   113bc:	e3540000 	cmp	r4, #0
   113c0:	0a00002c 	beq	11478 <CTimer::PollKernelTimers()+0xf8>
   113c4:	e5972010 	ldr	r2, [r7, #16]
   113c8:	e597100c 	ldr	r1, [r7, #12]
   113cc:	e1a00007 	mov	r0, r7
   113d0:	e12fff34 	blx	r4
   113d4:	e3a03000 	mov	r3, #0
   113d8:	e1a00007 	mov	r0, r7
   113dc:	e5873000 	str	r3, [r7]
   113e0:	e3a01014 	mov	r1, #20
   113e4:	eb0004fc 	bl	127dc <operator delete(void*, unsigned int)>
   113e8:	e595001c 	ldr	r0, [r5, #28]
   113ec:	e3500000 	cmp	r0, #0
   113f0:	1a000025 	bne	1148c <CTimer::PollKernelTimers()+0x10c>
   113f4:	e25b4000 	subs	r4, fp, #0
   113f8:	0a000026 	beq	11498 <CTimer::PollKernelTimers()+0x118>
   113fc:	e1a01004 	mov	r1, r4
   11400:	e1a00006 	mov	r0, r6
   11404:	eb000937 	bl	138e8 <CPtrList::GetPtr(TPtrListElement*)>
   11408:	e2507000 	subs	r7, r0, #0
   1140c:	0a000026 	beq	114ac <CTimer::PollKernelTimers()+0x12c>
   11410:	e5973000 	ldr	r3, [r7]
   11414:	e1530008 	cmp	r3, r8
   11418:	0a000003 	beq	1142c <CTimer::PollKernelTimers()+0xac>
   1141c:	e59f20b0 	ldr	r2, [pc, #176]	; 114d4 <CTimer::PollKernelTimers()+0x154>
   11420:	e1a01009 	mov	r1, r9
   11424:	e1a0000a 	mov	r0, sl
   11428:	ebffe59b 	bl	aa9c <assertion_failed>
   1142c:	e5952004 	ldr	r2, [r5, #4]
   11430:	e5973008 	ldr	r3, [r7, #8]
   11434:	e0433002 	sub	r3, r3, r2
   11438:	e3530000 	cmp	r3, #0
   1143c:	ca000015 	bgt	11498 <CTimer::PollKernelTimers()+0x118>
   11440:	e1a01004 	mov	r1, r4
   11444:	e1a00006 	mov	r0, r6
   11448:	eb000910 	bl	13890 <CPtrList::GetNext(TPtrListElement*)>
   1144c:	e1a01004 	mov	r1, r4
   11450:	e1a0b000 	mov	fp, r0
   11454:	e1a00006 	mov	r0, r6
   11458:	eb0009b7 	bl	13b3c <CPtrList::Remove(TPtrListElement*)>
   1145c:	e595301c 	ldr	r3, [r5, #28]
   11460:	e3530000 	cmp	r3, #0
   11464:	0affffd3 	beq	113b8 <CTimer::PollKernelTimers()+0x38>
   11468:	eb0004aa 	bl	12718 <LeaveCritical>
   1146c:	e5974004 	ldr	r4, [r7, #4]
   11470:	e3540000 	cmp	r4, #0
   11474:	1affffd2 	bne	113c4 <CTimer::PollKernelTimers()+0x44>
   11478:	e59f2058 	ldr	r2, [pc, #88]	; 114d8 <CTimer::PollKernelTimers()+0x158>
   1147c:	e1a01009 	mov	r1, r9
   11480:	e59f0054 	ldr	r0, [pc, #84]	; 114dc <CTimer::PollKernelTimers()+0x15c>
   11484:	ebffe584 	bl	aa9c <assertion_failed>
   11488:	eaffffcd 	b	113c4 <CTimer::PollKernelTimers()+0x44>
   1148c:	eb000474 	bl	12664 <EnterCritical>
   11490:	e25b4000 	subs	r4, fp, #0
   11494:	1affffd8 	bne	113fc <CTimer::PollKernelTimers()+0x7c>
   11498:	e595301c 	ldr	r3, [r5, #28]
   1149c:	e3530000 	cmp	r3, #0
   114a0:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   114a4:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   114a8:	ea00049a 	b	12718 <LeaveCritical>
   114ac:	e59f202c 	ldr	r2, [pc, #44]	; 114e0 <CTimer::PollKernelTimers()+0x160>
   114b0:	e1a01009 	mov	r1, r9
   114b4:	e59f0028 	ldr	r0, [pc, #40]	; 114e4 <CTimer::PollKernelTimers()+0x164>
   114b8:	ebffe577 	bl	aa9c <assertion_failed>
   114bc:	eaffffd3 	b	11410 <CTimer::PollKernelTimers()+0x90>
   114c0:	eb000467 	bl	12664 <EnterCritical>
   114c4:	eaffffb2 	b	11394 <CTimer::PollKernelTimers()+0x14>
   114c8:	000150ec 	.word	0x000150ec
   114cc:	4b544d43 	.word	0x4b544d43
   114d0:	00015114 	.word	0x00015114
   114d4:	000001a3 	.word	0x000001a3
   114d8:	000001b1 	.word	0x000001b1
   114dc:	00014bc8 	.word	0x00014bc8
   114e0:	000001a2 	.word	0x000001a2
   114e4:	00015108 	.word	0x00015108

000114e8 <CTimer::InterruptHandler()>:
   114e8:	e92d4010 	push	{r4, lr}
   114ec:	e3a03000 	mov	r3, #0
   114f0:	e1a04000 	mov	r4, r0
   114f4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   114f8:	e59f20e4 	ldr	r2, [pc, #228]	; 115e4 <CTimer::InterruptHandler()+0xfc>
   114fc:	e5923018 	ldr	r3, [r2, #24]
   11500:	e2833c27 	add	r3, r3, #9984	; 0x2700
   11504:	e2833010 	add	r3, r3, #16
   11508:	e5823018 	str	r3, [r2, #24]
   1150c:	e5921004 	ldr	r1, [r2, #4]
   11510:	e1530001 	cmp	r3, r1
   11514:	e3a01008 	mov	r1, #8
   11518:	35923004 	ldrcc	r3, [r2, #4]
   1151c:	32833c27 	addcc	r3, r3, #9984	; 0x2700
   11520:	32833010 	addcc	r3, r3, #16
   11524:	35823018 	strcc	r3, [r2, #24]
   11528:	e59f20b4 	ldr	r2, [pc, #180]	; 115e4 <CTimer::InterruptHandler()+0xfc>
   1152c:	e3a03000 	mov	r3, #0
   11530:	e5821000 	str	r1, [r2]
   11534:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   11538:	e5900010 	ldr	r0, [r0, #16]
   1153c:	e1500003 	cmp	r0, r3
   11540:	1a00001a 	bne	115b0 <CTimer::InterruptHandler()+0xc8>
   11544:	e3a01064 	mov	r1, #100	; 0x64
   11548:	e5942004 	ldr	r2, [r4, #4]
   1154c:	e59f3094 	ldr	r3, [pc, #148]	; 115e8 <CTimer::InterruptHandler()+0x100>
   11550:	e2822001 	add	r2, r2, #1
   11554:	e0830293 	umull	r0, r3, r3, r2
   11558:	e1a032a3 	lsr	r3, r3, #5
   1155c:	e0030391 	mul	r3, r1, r3
   11560:	e0523003 	subs	r3, r2, r3
   11564:	e5842004 	str	r2, [r4, #4]
   11568:	1a000007 	bne	1158c <CTimer::InterruptHandler()+0xa4>
   1156c:	e5942008 	ldr	r2, [r4, #8]
   11570:	e2822001 	add	r2, r2, #1
   11574:	e5842008 	str	r2, [r4, #8]
   11578:	e594200c 	ldr	r2, [r4, #12]
   1157c:	e2822001 	add	r2, r2, #1
   11580:	e584200c 	str	r2, [r4, #12]
   11584:	e3530000 	cmp	r3, #0
   11588:	1a000006 	bne	115a8 <CTimer::InterruptHandler()+0xc0>
   1158c:	e1a00004 	mov	r0, r4
   11590:	ebffff7a 	bl	11380 <CTimer::PollKernelTimers()>
   11594:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   11598:	e3530000 	cmp	r3, #0
   1159c:	08bd8010 	popeq	{r4, pc}
   115a0:	e8bd4010 	pop	{r4, lr}
   115a4:	e12fff13 	bx	r3
   115a8:	eb00045a 	bl	12718 <LeaveCritical>
   115ac:	eafffff6 	b	1158c <CTimer::InterruptHandler()+0xa4>
   115b0:	eb00042b 	bl	12664 <EnterCritical>
   115b4:	e3a01064 	mov	r1, #100	; 0x64
   115b8:	e5943004 	ldr	r3, [r4, #4]
   115bc:	e59f2024 	ldr	r2, [pc, #36]	; 115e8 <CTimer::InterruptHandler()+0x100>
   115c0:	e2833001 	add	r3, r3, #1
   115c4:	e0820392 	umull	r0, r2, r2, r3
   115c8:	e1a022a2 	lsr	r2, r2, #5
   115cc:	e0020291 	mul	r2, r1, r2
   115d0:	e1530002 	cmp	r3, r2
   115d4:	e5843004 	str	r3, [r4, #4]
   115d8:	e5943010 	ldr	r3, [r4, #16]
   115dc:	1affffe8 	bne	11584 <CTimer::InterruptHandler()+0x9c>
   115e0:	eaffffe1 	b	1156c <CTimer::InterruptHandler()+0x84>
   115e4:	20003000 	.word	0x20003000
   115e8:	51eb851f 	.word	0x51eb851f

000115ec <CTimer::InterruptHandler(void*)>:
   115ec:	e92d4010 	push	{r4, lr}
   115f0:	e2504000 	subs	r4, r0, #0
   115f4:	0a000002 	beq	11604 <CTimer::InterruptHandler(void*)+0x18>
   115f8:	e1a00004 	mov	r0, r4
   115fc:	e8bd4010 	pop	{r4, lr}
   11600:	eaffffb8 	b	114e8 <CTimer::InterruptHandler()>
   11604:	e59f0014 	ldr	r0, [pc, #20]	; 11620 <CTimer::InterruptHandler(void*)+0x34>
   11608:	e59f2014 	ldr	r2, [pc, #20]	; 11624 <CTimer::InterruptHandler(void*)+0x38>
   1160c:	e59f1014 	ldr	r1, [pc, #20]	; 11628 <CTimer::InterruptHandler(void*)+0x3c>
   11610:	ebffe521 	bl	aa9c <assertion_failed>
   11614:	e1a00004 	mov	r0, r4
   11618:	e8bd4010 	pop	{r4, lr}
   1161c:	eaffffb1 	b	114e8 <CTimer::InterruptHandler()>
   11620:	00014134 	.word	0x00014134
   11624:	000001ea 	.word	0x000001ea
   11628:	000150ec 	.word	0x000150ec

0001162c <CTimer::TuneMsDelay()>:
   1162c:	e92d4070 	push	{r4, r5, r6, lr}
   11630:	e1a05000 	mov	r5, r0
   11634:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   11638:	e5953020 	ldr	r3, [r5, #32]
   1163c:	e24dd008 	sub	sp, sp, #8
   11640:	e0000390 	mul	r0, r0, r3
   11644:	e5954004 	ldr	r4, [r5, #4]
   11648:	eb00079a 	bl	134b8 <DelayLoop>
   1164c:	e5951004 	ldr	r1, [r5, #4]
   11650:	e59f0068 	ldr	r0, [pc, #104]	; 116c0 <CTimer::TuneMsDelay()+0x94>
   11654:	e0411004 	sub	r1, r1, r4
   11658:	ebffe438 	bl	a740 <__udivsi3>
   1165c:	e5953020 	ldr	r3, [r5, #32]
   11660:	e59f405c 	ldr	r4, [pc, #92]	; 116c4 <CTimer::TuneMsDelay()+0x98>
   11664:	e0030093 	mul	r3, r3, r0
   11668:	e0832394 	umull	r2, r3, r4, r3
   1166c:	e59f1054 	ldr	r1, [pc, #84]	; 116c8 <CTimer::TuneMsDelay()+0x9c>
   11670:	e1a032a3 	lsr	r3, r3, #5
   11674:	e2832f7d 	add	r2, r3, #500	; 0x1f4
   11678:	e0821291 	umull	r1, r2, r1, r2
   1167c:	e1a06000 	mov	r6, r0
   11680:	e1a02322 	lsr	r2, r2, #6
   11684:	e5852024 	str	r2, [r5, #36]	; 0x24
   11688:	e5853020 	str	r3, [r5, #32]
   1168c:	ebffee2b 	bl	cf40 <CLogger::Get()>
   11690:	e3a03064 	mov	r3, #100	; 0x64
   11694:	e0842694 	umull	r2, r4, r4, r6
   11698:	e1a042a4 	lsr	r4, r4, #5
   1169c:	e0030493 	mul	r3, r3, r4
   116a0:	e0466003 	sub	r6, r6, r3
   116a4:	e88d0050 	stm	sp, {r4, r6}
   116a8:	e59f301c 	ldr	r3, [pc, #28]	; 116cc <CTimer::TuneMsDelay()+0xa0>
   116ac:	e3a02003 	mov	r2, #3
   116b0:	e59f1018 	ldr	r1, [pc, #24]	; 116d0 <CTimer::TuneMsDelay()+0xa4>
   116b4:	ebffefca 	bl	d5e4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   116b8:	e28dd008 	add	sp, sp, #8
   116bc:	e8bd8070 	pop	{r4, r5, r6, pc}
   116c0:	00002710 	.word	0x00002710
   116c4:	51eb851f 	.word	0x51eb851f
   116c8:	10624dd3 	.word	0x10624dd3
   116cc:	000151c8 	.word	0x000151c8
   116d0:	000150e4 	.word	0x000150e4

000116d4 <CTimer::Initialize()>:
   116d4:	e92d4070 	push	{r4, r5, r6, lr}
   116d8:	e1a04000 	mov	r4, r0
   116dc:	e5900000 	ldr	r0, [r0]
   116e0:	e3500000 	cmp	r0, #0
   116e4:	0a000011 	beq	11730 <CTimer::Initialize()+0x5c>
   116e8:	e1a03004 	mov	r3, r4
   116ec:	e59f2054 	ldr	r2, [pc, #84]	; 11748 <CTimer::Initialize()+0x74>
   116f0:	e3a01003 	mov	r1, #3
   116f4:	ebffeb78 	bl	c4dc <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   116f8:	e3a05000 	mov	r5, #0
   116fc:	ee075f9a 	mcr	15, 0, r5, cr7, cr10, {4}
   11700:	e59f2044 	ldr	r2, [pc, #68]	; 1174c <CTimer::Initialize()+0x78>
   11704:	e59f3044 	ldr	r3, [pc, #68]	; 11750 <CTimer::Initialize()+0x7c>
   11708:	e1a00004 	mov	r0, r4
   1170c:	e5823004 	str	r3, [r2, #4]
   11710:	e5923004 	ldr	r3, [r2, #4]
   11714:	e2833c27 	add	r3, r3, #9984	; 0x2700
   11718:	e2833010 	add	r3, r3, #16
   1171c:	e5823018 	str	r3, [r2, #24]
   11720:	ebffffc1 	bl	1162c <CTimer::TuneMsDelay()>
   11724:	ee075fba 	mcr	15, 0, r5, cr7, cr10, {5}
   11728:	e3a00001 	mov	r0, #1
   1172c:	e8bd8070 	pop	{r4, r5, r6, pc}
   11730:	e59f001c 	ldr	r0, [pc, #28]	; 11754 <CTimer::Initialize()+0x80>
   11734:	e3a02057 	mov	r2, #87	; 0x57
   11738:	e59f1018 	ldr	r1, [pc, #24]	; 11758 <CTimer::Initialize()+0x84>
   1173c:	ebffe4d6 	bl	aa9c <assertion_failed>
   11740:	e5940000 	ldr	r0, [r4]
   11744:	eaffffe7 	b	116e8 <CTimer::Initialize()+0x14>
   11748:	000115ec 	.word	0x000115ec
   1174c:	20003000 	.word	0x20003000
   11750:	fe363c80 	.word	0xfe363c80
   11754:	000140f0 	.word	0x000140f0
   11758:	000150ec 	.word	0x000150ec

0001175c <CTimer::RegisterPeriodicHandler(void (*)())>:
   1175c:	e5903028 	ldr	r3, [r0, #40]	; 0x28
   11760:	e92d4070 	push	{r4, r5, r6, lr}
   11764:	e3530000 	cmp	r3, #0
   11768:	e1a04000 	mov	r4, r0
   1176c:	e1a05001 	mov	r5, r1
   11770:	0a000003 	beq	11784 <CTimer::RegisterPeriodicHandler(void (*)())+0x28>
   11774:	e3a02c02 	mov	r2, #512	; 0x200
   11778:	e59f1024 	ldr	r1, [pc, #36]	; 117a4 <CTimer::RegisterPeriodicHandler(void (*)())+0x48>
   1177c:	e59f0024 	ldr	r0, [pc, #36]	; 117a8 <CTimer::RegisterPeriodicHandler(void (*)())+0x4c>
   11780:	ebffe4c5 	bl	aa9c <assertion_failed>
   11784:	e3550000 	cmp	r5, #0
   11788:	e5845028 	str	r5, [r4, #40]	; 0x28
   1178c:	18bd8070 	popne	{r4, r5, r6, pc}
   11790:	e59f2014 	ldr	r2, [pc, #20]	; 117ac <CTimer::RegisterPeriodicHandler(void (*)())+0x50>
   11794:	e59f1008 	ldr	r1, [pc, #8]	; 117a4 <CTimer::RegisterPeriodicHandler(void (*)())+0x48>
   11798:	e59f0010 	ldr	r0, [pc, #16]	; 117b0 <CTimer::RegisterPeriodicHandler(void (*)())+0x54>
   1179c:	e8bd4070 	pop	{r4, r5, r6, lr}
   117a0:	eaffe4bd 	b	aa9c <assertion_failed>
   117a4:	000150ec 	.word	0x000150ec
   117a8:	000151e0 	.word	0x000151e0
   117ac:	00000202 	.word	0x00000202
   117b0:	000151f8 	.word	0x000151f8

000117b4 <CTimer::SimpleMsDelay(unsigned int)>:
   117b4:	e3500000 	cmp	r0, #0
   117b8:	012fff1e 	bxeq	lr
   117bc:	e3a03ffa 	mov	r3, #1000	; 0x3e8
   117c0:	e0000093 	mul	r0, r3, r0
   117c4:	e3500000 	cmp	r0, #0
   117c8:	012fff1e 	bxeq	lr
   117cc:	eafffccf 	b	10b10 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]>

000117d0 <CTimer::SimpleusDelay(unsigned int)>:
   117d0:	e3500000 	cmp	r0, #0
   117d4:	012fff1e 	bxeq	lr
   117d8:	eafffccc 	b	10b10 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]>

000117dc <CTimer::IsLeapYear(unsigned int)>:
   117dc:	e3a02064 	mov	r2, #100	; 0x64
   117e0:	e59f303c 	ldr	r3, [pc, #60]	; 11824 <CTimer::IsLeapYear(unsigned int)+0x48>
   117e4:	e0831093 	umull	r1, r3, r3, r0
   117e8:	e1a012a3 	lsr	r1, r3, #5
   117ec:	e0020192 	mul	r2, r2, r1
   117f0:	e1500002 	cmp	r0, r2
   117f4:	0a000003 	beq	11808 <CTimer::IsLeapYear(unsigned int)+0x2c>
   117f8:	e3100003 	tst	r0, #3
   117fc:	03a00001 	moveq	r0, #1
   11800:	13a00000 	movne	r0, #0
   11804:	e12fff1e 	bx	lr
   11808:	e3a02e19 	mov	r2, #400	; 0x190
   1180c:	e1a033a3 	lsr	r3, r3, #7
   11810:	e0030392 	mul	r3, r2, r3
   11814:	e0400003 	sub	r0, r0, r3
   11818:	e16f0f10 	clz	r0, r0
   1181c:	e1a002a0 	lsr	r0, r0, #5
   11820:	e12fff1e 	bx	lr
   11824:	51eb851f 	.word	0x51eb851f

00011828 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)>:
   11828:	e3500001 	cmp	r0, #1
   1182c:	0a000002 	beq	1183c <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x14>
   11830:	e59f3058 	ldr	r3, [pc, #88]	; 11890 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x68>
   11834:	e7930100 	ldr	r0, [r3, r0, lsl #2]
   11838:	e12fff1e 	bx	lr
   1183c:	e3a02064 	mov	r2, #100	; 0x64
   11840:	e59f304c 	ldr	r3, [pc, #76]	; 11894 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x6c>
   11844:	e083c193 	umull	ip, r3, r3, r1
   11848:	e1a0c2a3 	lsr	ip, r3, #5
   1184c:	e0020c92 	mul	r2, r2, ip
   11850:	e1510002 	cmp	r1, r2
   11854:	0a000006 	beq	11874 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x4c>
   11858:	e3110003 	tst	r1, #3
   1185c:	03a01001 	moveq	r1, #1
   11860:	13a01000 	movne	r1, #0
   11864:	e3510000 	cmp	r1, #0
   11868:	0afffff0 	beq	11830 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x8>
   1186c:	e3a0001d 	mov	r0, #29
   11870:	e12fff1e 	bx	lr
   11874:	e3a02e19 	mov	r2, #400	; 0x190
   11878:	e1a033a3 	lsr	r3, r3, #7
   1187c:	e0030392 	mul	r3, r2, r3
   11880:	e0411003 	sub	r1, r1, r3
   11884:	e16f1f11 	clz	r1, r1
   11888:	e1a012a1 	lsr	r1, r1, #5
   1188c:	eafffff4 	b	11864 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x3c>
   11890:	000150b4 	.word	0x000150b4
   11894:	51eb851f 	.word	0x51eb851f

00011898 <CTimer::Get()>:
   11898:	e92d4010 	push	{r4, lr}
   1189c:	e59f4020 	ldr	r4, [pc, #32]	; 118c4 <CTimer::Get()+0x2c>
   118a0:	e5940000 	ldr	r0, [r4]
   118a4:	e3500000 	cmp	r0, #0
   118a8:	18bd8010 	popne	{r4, pc}
   118ac:	e59f2014 	ldr	r2, [pc, #20]	; 118c8 <CTimer::Get()+0x30>
   118b0:	e59f1014 	ldr	r1, [pc, #20]	; 118cc <CTimer::Get()+0x34>
   118b4:	e59f0014 	ldr	r0, [pc, #20]	; 118d0 <CTimer::Get()+0x38>
   118b8:	ebffe477 	bl	aa9c <assertion_failed>
   118bc:	e5940000 	ldr	r0, [r4]
   118c0:	e8bd8010 	pop	{r4, pc}
   118c4:	000166a4 	.word	0x000166a4
   118c8:	0000023e 	.word	0x0000023e
   118cc:	000150ec 	.word	0x000150ec
   118d0:	00014c50 	.word	0x00014c50

000118d4 <memset>:
   118d4:	e3520000 	cmp	r2, #0
   118d8:	012fff1e 	bxeq	lr
   118dc:	e1a03000 	mov	r3, r0
   118e0:	e6af1071 	sxtb	r1, r1
   118e4:	e0802002 	add	r2, r0, r2
   118e8:	e4c31001 	strb	r1, [r3], #1
   118ec:	e1530002 	cmp	r3, r2
   118f0:	1afffffc 	bne	118e8 <memset+0x14>
   118f4:	e12fff1e 	bx	lr

000118f8 <memcmp>:
   118f8:	e3520000 	cmp	r2, #0
   118fc:	0a00000e 	beq	1193c <memcmp+0x44>
   11900:	e5d0c000 	ldrb	ip, [r0]
   11904:	e5d13000 	ldrb	r3, [r1]
   11908:	e15c0003 	cmp	ip, r3
   1190c:	ca00000c 	bgt	11944 <memcmp+0x4c>
   11910:	ba00000d 	blt	1194c <memcmp+0x54>
   11914:	e0812002 	add	r2, r1, r2
   11918:	e2811001 	add	r1, r1, #1
   1191c:	ea000004 	b	11934 <memcmp+0x3c>
   11920:	e5f0c001 	ldrb	ip, [r0, #1]!
   11924:	e4d13001 	ldrb	r3, [r1], #1
   11928:	e15c0003 	cmp	ip, r3
   1192c:	ca000004 	bgt	11944 <memcmp+0x4c>
   11930:	ba000005 	blt	1194c <memcmp+0x54>
   11934:	e1510002 	cmp	r1, r2
   11938:	1afffff8 	bne	11920 <memcmp+0x28>
   1193c:	e3a00000 	mov	r0, #0
   11940:	e12fff1e 	bx	lr
   11944:	e3a00001 	mov	r0, #1
   11948:	e12fff1e 	bx	lr
   1194c:	e3e00000 	mvn	r0, #0
   11950:	e12fff1e 	bx	lr

00011954 <strlen>:
   11954:	e1d010d0 	ldrsb	r1, [r0]
   11958:	e2803001 	add	r3, r0, #1
   1195c:	e3510000 	cmp	r1, #0
   11960:	0a000003 	beq	11974 <strlen+0x20>
   11964:	e0431000 	sub	r1, r3, r0
   11968:	e0d320d1 	ldrsb	r2, [r3], #1
   1196c:	e3520000 	cmp	r2, #0
   11970:	1afffffb 	bne	11964 <strlen+0x10>
   11974:	e1a00001 	mov	r0, r1
   11978:	e12fff1e 	bx	lr

0001197c <strcmp>:
   1197c:	e1d030d0 	ldrsb	r3, [r0]
   11980:	e1d120d0 	ldrsb	r2, [r1]
   11984:	e3530000 	cmp	r3, #0
   11988:	1a000007 	bne	119ac <strcmp+0x30>
   1198c:	ea000008 	b	119b4 <strcmp+0x38>
   11990:	e1530002 	cmp	r3, r2
   11994:	ca00000b 	bgt	119c8 <strcmp+0x4c>
   11998:	ba00000c 	blt	119d0 <strcmp+0x54>
   1199c:	e1f030d1 	ldrsb	r3, [r0, #1]!
   119a0:	e3530000 	cmp	r3, #0
   119a4:	0a00000b 	beq	119d8 <strcmp+0x5c>
   119a8:	e1f120d1 	ldrsb	r2, [r1, #1]!
   119ac:	e3520000 	cmp	r2, #0
   119b0:	1afffff6 	bne	11990 <strcmp+0x14>
   119b4:	e1530002 	cmp	r3, r2
   119b8:	ca000002 	bgt	119c8 <strcmp+0x4c>
   119bc:	b3e00000 	mvnlt	r0, #0
   119c0:	a3a00000 	movge	r0, #0
   119c4:	e12fff1e 	bx	lr
   119c8:	e3a00001 	mov	r0, #1
   119cc:	e12fff1e 	bx	lr
   119d0:	e3e00000 	mvn	r0, #0
   119d4:	e12fff1e 	bx	lr
   119d8:	e1d120d1 	ldrsb	r2, [r1, #1]
   119dc:	e1530002 	cmp	r3, r2
   119e0:	dafffff5 	ble	119bc <strcmp+0x40>
   119e4:	eafffff7 	b	119c8 <strcmp+0x4c>

000119e8 <strcasecmp>:
   119e8:	e2400001 	sub	r0, r0, #1
   119ec:	e1f030d1 	ldrsb	r3, [r0, #1]!
   119f0:	e2432061 	sub	r2, r3, #97	; 0x61
   119f4:	e3520019 	cmp	r2, #25
   119f8:	92433020 	subls	r3, r3, #32
   119fc:	e3530000 	cmp	r3, #0
   11a00:	0a00001f 	beq	11a84 <strcasecmp+0x9c>
   11a04:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   11a08:	e0d120d1 	ldrsb	r2, [r1], #1
   11a0c:	e242c061 	sub	ip, r2, #97	; 0x61
   11a10:	e35c0019 	cmp	ip, #25
   11a14:	81a0e002 	movhi	lr, r2
   11a18:	9242e020 	subls	lr, r2, #32
   11a1c:	e35e0000 	cmp	lr, #0
   11a20:	1a000006 	bne	11a40 <strcasecmp+0x58>
   11a24:	e35c0019 	cmp	ip, #25
   11a28:	92422020 	subls	r2, r2, #32
   11a2c:	e1530002 	cmp	r3, r2
   11a30:	ca000011 	bgt	11a7c <strcasecmp+0x94>
   11a34:	b3e00000 	mvnlt	r0, #0
   11a38:	a3a00000 	movge	r0, #0
   11a3c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   11a40:	e153000e 	cmp	r3, lr
   11a44:	ca00000c 	bgt	11a7c <strcasecmp+0x94>
   11a48:	ba000016 	blt	11aa8 <strcasecmp+0xc0>
   11a4c:	e1f030d1 	ldrsb	r3, [r0, #1]!
   11a50:	e2432061 	sub	r2, r3, #97	; 0x61
   11a54:	e3520019 	cmp	r2, #25
   11a58:	92433020 	subls	r3, r3, #32
   11a5c:	e3530000 	cmp	r3, #0
   11a60:	1affffe8 	bne	11a08 <strcasecmp+0x20>
   11a64:	e1d120d0 	ldrsb	r2, [r1]
   11a68:	e242c061 	sub	ip, r2, #97	; 0x61
   11a6c:	e35c0019 	cmp	ip, #25
   11a70:	92422020 	subls	r2, r2, #32
   11a74:	e1530002 	cmp	r3, r2
   11a78:	daffffed 	ble	11a34 <strcasecmp+0x4c>
   11a7c:	e3a00001 	mov	r0, #1
   11a80:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   11a84:	e1d120d0 	ldrsb	r2, [r1]
   11a88:	e242c061 	sub	ip, r2, #97	; 0x61
   11a8c:	e35c0019 	cmp	ip, #25
   11a90:	92422020 	subls	r2, r2, #32
   11a94:	e1530002 	cmp	r3, r2
   11a98:	ca000004 	bgt	11ab0 <strcasecmp+0xc8>
   11a9c:	b3e00000 	mvnlt	r0, #0
   11aa0:	a3a00000 	movge	r0, #0
   11aa4:	e12fff1e 	bx	lr
   11aa8:	e3e00000 	mvn	r0, #0
   11aac:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   11ab0:	e3a00001 	mov	r0, #1
   11ab4:	e12fff1e 	bx	lr

00011ab8 <strncmp>:
   11ab8:	e3520000 	cmp	r2, #0
   11abc:	0a000016 	beq	11b1c <strncmp+0x64>
   11ac0:	e1d030d0 	ldrsb	r3, [r0]
   11ac4:	e1d1c0d0 	ldrsb	ip, [r1]
   11ac8:	e3530000 	cmp	r3, #0
   11acc:	0a000015 	beq	11b28 <strncmp+0x70>
   11ad0:	e35c0000 	cmp	ip, #0
   11ad4:	0a000013 	beq	11b28 <strncmp+0x70>
   11ad8:	e15c0003 	cmp	ip, r3
   11adc:	ba000016 	blt	11b3c <strncmp+0x84>
   11ae0:	d0802002 	addle	r2, r0, r2
   11ae4:	d2800001 	addle	r0, r0, #1
   11ae8:	da000009 	ble	11b14 <strncmp+0x5c>
   11aec:	ea000014 	b	11b44 <strncmp+0x8c>
   11af0:	e0d030d1 	ldrsb	r3, [r0], #1
   11af4:	e3530000 	cmp	r3, #0
   11af8:	0a000009 	beq	11b24 <strncmp+0x6c>
   11afc:	e1f1c0d1 	ldrsb	ip, [r1, #1]!
   11b00:	e35c0000 	cmp	ip, #0
   11b04:	0a000007 	beq	11b28 <strncmp+0x70>
   11b08:	e153000c 	cmp	r3, ip
   11b0c:	ca00000a 	bgt	11b3c <strncmp+0x84>
   11b10:	ba00000b 	blt	11b44 <strncmp+0x8c>
   11b14:	e1500002 	cmp	r0, r2
   11b18:	1afffff4 	bne	11af0 <strncmp+0x38>
   11b1c:	e3a00000 	mov	r0, #0
   11b20:	e12fff1e 	bx	lr
   11b24:	e1d1c0d1 	ldrsb	ip, [r1, #1]
   11b28:	e153000c 	cmp	r3, ip
   11b2c:	ca000002 	bgt	11b3c <strncmp+0x84>
   11b30:	b3e00000 	mvnlt	r0, #0
   11b34:	a3a00000 	movge	r0, #0
   11b38:	e12fff1e 	bx	lr
   11b3c:	e3a00001 	mov	r0, #1
   11b40:	e12fff1e 	bx	lr
   11b44:	e3e00000 	mvn	r0, #0
   11b48:	e12fff1e 	bx	lr

00011b4c <strcpy>:
   11b4c:	e1d130d0 	ldrsb	r3, [r1]
   11b50:	e1a02000 	mov	r2, r0
   11b54:	e3530000 	cmp	r3, #0
   11b58:	0a000003 	beq	11b6c <strcpy+0x20>
   11b5c:	e4c23001 	strb	r3, [r2], #1
   11b60:	e1f130d1 	ldrsb	r3, [r1, #1]!
   11b64:	e3530000 	cmp	r3, #0
   11b68:	1afffffb 	bne	11b5c <strcpy+0x10>
   11b6c:	e3a03000 	mov	r3, #0
   11b70:	e5c23000 	strb	r3, [r2]
   11b74:	e12fff1e 	bx	lr

00011b78 <strncpy>:
   11b78:	e3520000 	cmp	r2, #0
   11b7c:	012fff1e 	bxeq	lr
   11b80:	e1d1c0d0 	ldrsb	ip, [r1]
   11b84:	e35c0000 	cmp	ip, #0
   11b88:	0a000009 	beq	11bb4 <strncpy+0x3c>
   11b8c:	e0802002 	add	r2, r0, r2
   11b90:	e1a03000 	mov	r3, r0
   11b94:	ea000002 	b	11ba4 <strncpy+0x2c>
   11b98:	e1f1c0d1 	ldrsb	ip, [r1, #1]!
   11b9c:	e35c0000 	cmp	ip, #0
   11ba0:	0a000004 	beq	11bb8 <strncpy+0x40>
   11ba4:	e4c3c001 	strb	ip, [r3], #1
   11ba8:	e1530002 	cmp	r3, r2
   11bac:	1afffff9 	bne	11b98 <strncpy+0x20>
   11bb0:	e12fff1e 	bx	lr
   11bb4:	e1a03000 	mov	r3, r0
   11bb8:	e3a02000 	mov	r2, #0
   11bbc:	e5c32000 	strb	r2, [r3]
   11bc0:	e12fff1e 	bx	lr

00011bc4 <strcat>:
   11bc4:	e1d030d0 	ldrsb	r3, [r0]
   11bc8:	e3530000 	cmp	r3, #0
   11bcc:	e1a03000 	mov	r3, r0
   11bd0:	0a000002 	beq	11be0 <strcat+0x1c>
   11bd4:	e1f320d1 	ldrsb	r2, [r3, #1]!
   11bd8:	e3520000 	cmp	r2, #0
   11bdc:	1afffffc 	bne	11bd4 <strcat+0x10>
   11be0:	e1d120d0 	ldrsb	r2, [r1]
   11be4:	e3520000 	cmp	r2, #0
   11be8:	0a000003 	beq	11bfc <strcat+0x38>
   11bec:	e4c32001 	strb	r2, [r3], #1
   11bf0:	e1f120d1 	ldrsb	r2, [r1, #1]!
   11bf4:	e3520000 	cmp	r2, #0
   11bf8:	1afffffb 	bne	11bec <strcat+0x28>
   11bfc:	e3a02000 	mov	r2, #0
   11c00:	e5c32000 	strb	r2, [r3]
   11c04:	e12fff1e 	bx	lr

00011c08 <strchr>:
   11c08:	e1d020d0 	ldrsb	r2, [r0]
   11c0c:	e3520000 	cmp	r2, #0
   11c10:	0a000009 	beq	11c3c <strchr+0x34>
   11c14:	e1510002 	cmp	r1, r2
   11c18:	1a000002 	bne	11c28 <strchr+0x20>
   11c1c:	ea000008 	b	11c44 <strchr+0x3c>
   11c20:	e1530001 	cmp	r3, r1
   11c24:	012fff1e 	bxeq	lr
   11c28:	e1f030d1 	ldrsb	r3, [r0, #1]!
   11c2c:	e3530000 	cmp	r3, #0
   11c30:	1afffffa 	bne	11c20 <strchr+0x18>
   11c34:	e1a00003 	mov	r0, r3
   11c38:	e12fff1e 	bx	lr
   11c3c:	e1a00002 	mov	r0, r2
   11c40:	e12fff1e 	bx	lr
   11c44:	e12fff1e 	bx	lr

00011c48 <strtok_r>:
   11c48:	e3500000 	cmp	r0, #0
   11c4c:	0a00002c 	beq	11d04 <strtok_r+0xbc>
   11c50:	e92d4030 	push	{r4, r5, lr}
   11c54:	e1d0e0d0 	ldrsb	lr, [r0]
   11c58:	e35e0000 	cmp	lr, #0
   11c5c:	11d140d0 	ldrsbne	r4, [r1]
   11c60:	0a000024 	beq	11cf8 <strtok_r+0xb0>
   11c64:	e3540000 	cmp	r4, #0
   11c68:	0a000008 	beq	11c90 <strtok_r+0x48>
   11c6c:	e15e0004 	cmp	lr, r4
   11c70:	0a000019 	beq	11cdc <strtok_r+0x94>
   11c74:	e1a0c001 	mov	ip, r1
   11c78:	ea000001 	b	11c84 <strtok_r+0x3c>
   11c7c:	e15e0003 	cmp	lr, r3
   11c80:	0a000015 	beq	11cdc <strtok_r+0x94>
   11c84:	e1fc30d1 	ldrsb	r3, [ip, #1]!
   11c88:	e3530000 	cmp	r3, #0
   11c8c:	1afffffa 	bne	11c7c <strtok_r+0x34>
   11c90:	e35e0000 	cmp	lr, #0
   11c94:	0a000017 	beq	11cf8 <strtok_r+0xb0>
   11c98:	e1a05000 	mov	r5, r0
   11c9c:	e3540000 	cmp	r4, #0
   11ca0:	0a000008 	beq	11cc8 <strtok_r+0x80>
   11ca4:	e15e0004 	cmp	lr, r4
   11ca8:	0a00000d 	beq	11ce4 <strtok_r+0x9c>
   11cac:	e1a0c001 	mov	ip, r1
   11cb0:	ea000001 	b	11cbc <strtok_r+0x74>
   11cb4:	e15e0003 	cmp	lr, r3
   11cb8:	0a000009 	beq	11ce4 <strtok_r+0x9c>
   11cbc:	e1fc30d1 	ldrsb	r3, [ip, #1]!
   11cc0:	e3530000 	cmp	r3, #0
   11cc4:	1afffffa 	bne	11cb4 <strtok_r+0x6c>
   11cc8:	e1f5e0d1 	ldrsb	lr, [r5, #1]!
   11ccc:	e35e0000 	cmp	lr, #0
   11cd0:	1afffff1 	bne	11c9c <strtok_r+0x54>
   11cd4:	e5825000 	str	r5, [r2]
   11cd8:	e8bd8030 	pop	{r4, r5, pc}
   11cdc:	e1f0e0d1 	ldrsb	lr, [r0, #1]!
   11ce0:	eaffffdf 	b	11c64 <strtok_r+0x1c>
   11ce4:	e3a03000 	mov	r3, #0
   11ce8:	e2855001 	add	r5, r5, #1
   11cec:	e5453001 	strb	r3, [r5, #-1]
   11cf0:	e5825000 	str	r5, [r2]
   11cf4:	e8bd8030 	pop	{r4, r5, pc}
   11cf8:	e3a00000 	mov	r0, #0
   11cfc:	e5820000 	str	r0, [r2]
   11d00:	e8bd8030 	pop	{r4, r5, pc}
   11d04:	e5920000 	ldr	r0, [r2]
   11d08:	e3500000 	cmp	r0, #0
   11d0c:	1affffcf 	bne	11c50 <strtok_r+0x8>
   11d10:	e12fff1e 	bx	lr

00011d14 <strtoul>:
   11d14:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   11d18:	e3510000 	cmp	r1, #0
   11d1c:	e2425002 	sub	r5, r2, #2
   11d20:	15810000 	strne	r0, [r1]
   11d24:	e3520000 	cmp	r2, #0
   11d28:	13550022 	cmpne	r5, #34	; 0x22
   11d2c:	e3c2e010 	bic	lr, r2, #16
   11d30:	83a05001 	movhi	r5, #1
   11d34:	93a05000 	movls	r5, #0
   11d38:	8a000037 	bhi	11e1c <strtoul+0x108>
   11d3c:	e1d0c0d0 	ldrsb	ip, [r0]
   11d40:	e1a04000 	mov	r4, r0
   11d44:	e24c3009 	sub	r3, ip, #9
   11d48:	e35c0020 	cmp	ip, #32
   11d4c:	e2800001 	add	r0, r0, #1
   11d50:	e6ef3073 	uxtb	r3, r3
   11d54:	0afffff8 	beq	11d3c <strtoul+0x28>
   11d58:	e3530004 	cmp	r3, #4
   11d5c:	9afffff6 	bls	11d3c <strtoul+0x28>
   11d60:	e35c002b 	cmp	ip, #43	; 0x2b
   11d64:	0a00002e 	beq	11e24 <strtoul+0x110>
   11d68:	e35c002d 	cmp	ip, #45	; 0x2d
   11d6c:	01d4c0d1 	ldrsbeq	ip, [r4, #1]
   11d70:	03a07001 	moveq	r7, #1
   11d74:	01a04000 	moveq	r4, r0
   11d78:	13a07000 	movne	r7, #0
   11d7c:	e35c0030 	cmp	ip, #48	; 0x30
   11d80:	0a00002c 	beq	11e38 <strtoul+0x124>
   11d84:	e3520000 	cmp	r2, #0
   11d88:	03a0200a 	moveq	r2, #10
   11d8c:	e35c002f 	cmp	ip, #47	; 0x2f
   11d90:	e1a0300c 	mov	r3, ip
   11d94:	da00001d 	ble	11e10 <strtoul+0xfc>
   11d98:	e3a0e000 	mov	lr, #0
   11d9c:	e3a05001 	mov	r5, #1
   11da0:	e1a0600e 	mov	r6, lr
   11da4:	ea000008 	b	11dcc <strtoul+0xb8>
   11da8:	e020329e 	mla	r0, lr, r2, r3
   11dac:	e150000e 	cmp	r0, lr
   11db0:	3a000029 	bcc	11e5c <strtoul+0x148>
   11db4:	e1f430d1 	ldrsb	r3, [r4, #1]!
   11db8:	e1a05006 	mov	r5, r6
   11dbc:	e353002f 	cmp	r3, #47	; 0x2f
   11dc0:	e1a0c003 	mov	ip, r3
   11dc4:	da000029 	ble	11e70 <strtoul+0x15c>
   11dc8:	e1a0e000 	mov	lr, r0
   11dcc:	e24cc061 	sub	ip, ip, #97	; 0x61
   11dd0:	e35c0019 	cmp	ip, #25
   11dd4:	92433020 	subls	r3, r3, #32
   11dd8:	e3530040 	cmp	r3, #64	; 0x40
   11ddc:	c2433007 	subgt	r3, r3, #7
   11de0:	e2433030 	sub	r3, r3, #48	; 0x30
   11de4:	e1520003 	cmp	r2, r3
   11de8:	caffffee 	bgt	11da8 <strtoul+0x94>
   11dec:	e1a0000e 	mov	r0, lr
   11df0:	e2255001 	eor	r5, r5, #1
   11df4:	e3510000 	cmp	r1, #0
   11df8:	e0055007 	and	r5, r5, r7
   11dfc:	0a000000 	beq	11e04 <strtoul+0xf0>
   11e00:	e5814000 	str	r4, [r1]
   11e04:	e3550000 	cmp	r5, #0
   11e08:	12600000 	rsbne	r0, r0, #0
   11e0c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   11e10:	e3510000 	cmp	r1, #0
   11e14:	13a00000 	movne	r0, #0
   11e18:	1afffff8 	bne	11e00 <strtoul+0xec>
   11e1c:	e3a00000 	mov	r0, #0
   11e20:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   11e24:	e1d4c0d1 	ldrsb	ip, [r4, #1]
   11e28:	e3a07000 	mov	r7, #0
   11e2c:	e35c0030 	cmp	ip, #48	; 0x30
   11e30:	e1a04000 	mov	r4, r0
   11e34:	1affffd2 	bne	11d84 <strtoul+0x70>
   11e38:	e1d4c0d1 	ldrsb	ip, [r4, #1]
   11e3c:	e2840001 	add	r0, r4, #1
   11e40:	e3cc3020 	bic	r3, ip, #32
   11e44:	e3530058 	cmp	r3, #88	; 0x58
   11e48:	0a00000a 	beq	11e78 <strtoul+0x164>
   11e4c:	e3520000 	cmp	r2, #0
   11e50:	e1a04000 	mov	r4, r0
   11e54:	03a02008 	moveq	r2, #8
   11e58:	eaffffcb 	b	11d8c <strtoul+0x78>
   11e5c:	e3510000 	cmp	r1, #0
   11e60:	0a00000a 	beq	11e90 <strtoul+0x17c>
   11e64:	e5814000 	str	r4, [r1]
   11e68:	e3e00000 	mvn	r0, #0
   11e6c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   11e70:	e3a05001 	mov	r5, #1
   11e74:	eaffffde 	b	11df4 <strtoul+0xe0>
   11e78:	e35e0000 	cmp	lr, #0
   11e7c:	1affffe6 	bne	11e1c <strtoul+0x108>
   11e80:	e1d4c0d2 	ldrsb	ip, [r4, #2]
   11e84:	e3a02010 	mov	r2, #16
   11e88:	e2844002 	add	r4, r4, #2
   11e8c:	eaffffbe 	b	11d8c <strtoul+0x78>
   11e90:	e3e00000 	mvn	r0, #0
   11e94:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00011e98 <char2int>:
   11e98:	e12fff1e 	bx	lr

00011e9c <memcpy>:
   11e9c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
   11ea0:	e352007f 	cmp	r2, #127	; 0x7f
   11ea4:	9a00000b 	bls	11ed8 <memcpy+0x3c>
   11ea8:	e3110003 	tst	r1, #3
   11eac:	1a000009 	bne	11ed8 <memcpy+0x3c>
   11eb0:	e3100003 	tst	r0, #3
   11eb4:	1a000007 	bne	11ed8 <memcpy+0x3c>
   11eb8:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
   11ebc:	e8b107f8 	ldm	r1!, {r3, r4, r5, r6, r7, r8, r9, sl}
   11ec0:	e2422020 	sub	r2, r2, #32
   11ec4:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
   11ec8:	f5d1f040 	pld	[r1, #64]	; 0x40
   11ecc:	e352001f 	cmp	r2, #31
   11ed0:	8afffff9 	bhi	11ebc <memcpy+0x20>
   11ed4:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
   11ed8:	e3520000 	cmp	r2, #0
   11edc:	0a000003 	beq	11ef0 <memcpy+0x54>
   11ee0:	e4d13001 	ldrb	r3, [r1], #1
   11ee4:	e2522001 	subs	r2, r2, #1
   11ee8:	e4c03001 	strb	r3, [r0], #1
   11eec:	1afffffb 	bne	11ee0 <memcpy+0x44>
   11ef0:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
   11ef4:	e12fff1e 	bx	lr

00011ef8 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
   11ef8:	e12fff1e 	bx	lr

00011efc <CVirtualGPIOPin::~CVirtualGPIOPin()>:
   11efc:	e92d4010 	push	{r4, lr}
   11f00:	e1a04000 	mov	r4, r0
   11f04:	e3a01010 	mov	r1, #16
   11f08:	eb000233 	bl	127dc <operator delete(void*, unsigned int)>
   11f0c:	e1a00004 	mov	r0, r4
   11f10:	e8bd8010 	pop	{r4, pc}

00011f14 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]>:
   11f14:	e92d4070 	push	{r4, r5, r6, lr}
   11f18:	e59f5094 	ldr	r5, [pc, #148]	; 11fb4 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0xa0>
   11f1c:	e1a04000 	mov	r4, r0
   11f20:	e5950000 	ldr	r0, [r5]
   11f24:	e1a06001 	mov	r6, r1
   11f28:	e3500000 	cmp	r0, #0
   11f2c:	1a00001a 	bne	11f9c <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x88>
   11f30:	e1d400bc 	ldrh	r0, [r4, #12]
   11f34:	e1d430be 	ldrh	r3, [r4, #14]
   11f38:	e5846008 	str	r6, [r4, #8]
   11f3c:	e0402003 	sub	r2, r0, r3
   11f40:	e6bf2072 	sxth	r2, r2
   11f44:	e3520000 	cmp	r2, #0
   11f48:	da00000c 	ble	11f80 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x6c>
   11f4c:	e3560000 	cmp	r6, #0
   11f50:	1a00000c 	bne	11f88 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x74>
   11f54:	e2833001 	add	r3, r3, #1
   11f58:	e6ff3073 	uxth	r3, r3
   11f5c:	e1c430be 	strh	r3, [r4, #14]
   11f60:	e5941004 	ldr	r1, [r4, #4]
   11f64:	e5952004 	ldr	r2, [r5, #4]
   11f68:	e1833800 	orr	r3, r3, r0, lsl #16
   11f6c:	e7823101 	str	r3, [r2, r1, lsl #2]
   11f70:	e5953000 	ldr	r3, [r5]
   11f74:	e3530000 	cmp	r3, #0
   11f78:	1a000005 	bne	11f94 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x80>
   11f7c:	e8bd8070 	pop	{r4, r5, r6, pc}
   11f80:	e3560000 	cmp	r6, #0
   11f84:	1a000006 	bne	11fa4 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x90>
   11f88:	e5953000 	ldr	r3, [r5]
   11f8c:	e3530000 	cmp	r3, #0
   11f90:	08bd8070 	popeq	{r4, r5, r6, pc}
   11f94:	e8bd4070 	pop	{r4, r5, r6, lr}
   11f98:	ea0001de 	b	12718 <LeaveCritical>
   11f9c:	eb0001b0 	bl	12664 <EnterCritical>
   11fa0:	eaffffe2 	b	11f30 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x1c>
   11fa4:	e2800001 	add	r0, r0, #1
   11fa8:	e6ff0070 	uxth	r0, r0
   11fac:	e1c400bc 	strh	r0, [r4, #12]
   11fb0:	eaffffea 	b	11f60 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x4c>
   11fb4:	000166a8 	.word	0x000166a8

00011fb8 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)>:
   11fb8:	e3a03000 	mov	r3, #0
   11fbc:	e92d4030 	push	{r4, r5, lr}
   11fc0:	e59f2124 	ldr	r2, [pc, #292]	; 120ec <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x134>
   11fc4:	e3510001 	cmp	r1, #1
   11fc8:	e24dd024 	sub	sp, sp, #36	; 0x24
   11fcc:	e1a04000 	mov	r4, r0
   11fd0:	e5801004 	str	r1, [r0, #4]
   11fd4:	e5802000 	str	r2, [r0]
   11fd8:	e1c030bc 	strh	r3, [r0, #12]
   11fdc:	e1c030be 	strh	r3, [r0, #14]
   11fe0:	9a000002 	bls	11ff0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x38>
   11fe4:	e1a00004 	mov	r0, r4
   11fe8:	e28dd024 	add	sp, sp, #36	; 0x24
   11fec:	e8bd8030 	pop	{r4, r5, pc}
   11ff0:	e59f50f8 	ldr	r5, [pc, #248]	; 120f0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x138>
   11ff4:	e5950000 	ldr	r0, [r5]
   11ff8:	e1500003 	cmp	r0, r3
   11ffc:	1a00002c 	bne	120b4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0xfc>
   12000:	e5953004 	ldr	r3, [r5, #4]
   12004:	e3530000 	cmp	r3, #0
   12008:	0a000011 	beq	12054 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x9c>
   1200c:	e3a01000 	mov	r1, #0
   12010:	e5942004 	ldr	r2, [r4, #4]
   12014:	e7831102 	str	r1, [r3, r2, lsl #2]
   12018:	e5953000 	ldr	r3, [r5]
   1201c:	e3530000 	cmp	r3, #0
   12020:	1a000009 	bne	1204c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x94>
   12024:	e5943004 	ldr	r3, [r4, #4]
   12028:	e3530001 	cmp	r3, #1
   1202c:	8affffec 	bhi	11fe4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x2c>
   12030:	e5953004 	ldr	r3, [r5, #4]
   12034:	e3530000 	cmp	r3, #0
   12038:	0affffe9 	beq	11fe4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x2c>
   1203c:	e3a01000 	mov	r1, #0
   12040:	e1a00004 	mov	r0, r4
   12044:	ebffffb2 	bl	11f14 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]>
   12048:	eaffffe5 	b	11fe4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x2c>
   1204c:	eb0001b1 	bl	12718 <LeaveCritical>
   12050:	eafffff3 	b	12024 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x6c>
   12054:	e3a00001 	mov	r0, #1
   12058:	eb00014a 	bl	12588 <CMemorySystem::GetCoherentPage(unsigned int)>
   1205c:	e5850004 	str	r0, [r5, #4]
   12060:	e28d000c 	add	r0, sp, #12
   12064:	ebffe2b0 	bl	ab2c <CBcmPropertyTags::CBcmPropertyTags()>
   12068:	e3a03004 	mov	r3, #4
   1206c:	e595c004 	ldr	ip, [r5, #4]
   12070:	e58d3000 	str	r3, [sp]
   12074:	e3ccc103 	bic	ip, ip, #-1073741824	; 0xc0000000
   12078:	e38cc101 	orr	ip, ip, #1073741824	; 0x40000000
   1207c:	e28d000c 	add	r0, sp, #12
   12080:	e28d2010 	add	r2, sp, #16
   12084:	e3a03010 	mov	r3, #16
   12088:	e59f1064 	ldr	r1, [pc, #100]	; 120f4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x13c>
   1208c:	e58dc01c 	str	ip, [sp, #28]
   12090:	ebffe2fc 	bl	ac88 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   12094:	e3500000 	cmp	r0, #0
   12098:	0a000007 	beq	120bc <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x104>
   1209c:	e28d000c 	add	r0, sp, #12
   120a0:	ebffe2a7 	bl	ab44 <CBcmPropertyTags::~CBcmPropertyTags()>
   120a4:	e5953004 	ldr	r3, [r5, #4]
   120a8:	e3530000 	cmp	r3, #0
   120ac:	0affffd9 	beq	12018 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x60>
   120b0:	eaffffd5 	b	1200c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x54>
   120b4:	eb00016a 	bl	12664 <EnterCritical>
   120b8:	eaffffd0 	b	12000 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x48>
   120bc:	e3a03010 	mov	r3, #16
   120c0:	e58d0000 	str	r0, [sp]
   120c4:	e28d2010 	add	r2, sp, #16
   120c8:	e59f1028 	ldr	r1, [pc, #40]	; 120f8 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x140>
   120cc:	e28d000c 	add	r0, sp, #12
   120d0:	ebffe2ec 	bl	ac88 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   120d4:	e3500000 	cmp	r0, #0
   120d8:	159d301c 	ldrne	r3, [sp, #28]
   120dc:	05850004 	streq	r0, [r5, #4]
   120e0:	13c33103 	bicne	r3, r3, #-1073741824	; 0xc0000000
   120e4:	15853004 	strne	r3, [r5, #4]
   120e8:	eaffffeb 	b	1209c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0xe4>
   120ec:	00015248 	.word	0x00015248
   120f0:	000166a8 	.word	0x000166a8
   120f4:	00048020 	.word	0x00048020
   120f8:	00040010 	.word	0x00040010

000120fc <CVirtualGPIOPin::Write(unsigned int)>:
   120fc:	e5902004 	ldr	r2, [r0, #4]
   12100:	e1a03001 	mov	r3, r1
   12104:	e3520001 	cmp	r2, #1
   12108:	812fff1e 	bxhi	lr
   1210c:	e3510001 	cmp	r1, #1
   12110:	93a03000 	movls	r3, #0
   12114:	83a03001 	movhi	r3, #1
   12118:	e59f2014 	ldr	r2, [pc, #20]	; 12134 <CVirtualGPIOPin::Write(unsigned int)+0x38>
   1211c:	e5922004 	ldr	r2, [r2, #4]
   12120:	e3520000 	cmp	r2, #0
   12124:	03833001 	orreq	r3, r3, #1
   12128:	e3530000 	cmp	r3, #0
   1212c:	112fff1e 	bxne	lr
   12130:	eaffff77 	b	11f14 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]>
   12134:	000166a8 	.word	0x000166a8

00012138 <CVirtualGPIOPin::Invert()>:
   12138:	e5901008 	ldr	r1, [r0, #8]
   1213c:	e2211001 	eor	r1, r1, #1
   12140:	eaffffed 	b	120fc <CVirtualGPIOPin::Write(unsigned int)>

00012144 <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE>:
   12144:	e3a02000 	mov	r2, #0
   12148:	e59f3004 	ldr	r3, [pc, #4]	; 12154 <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE+0x10>
   1214c:	e5832000 	str	r2, [r3]
   12150:	e12fff1e 	bx	lr
   12154:	000166a8 	.word	0x000166a8

00012158 <UndefinedInstructionInternal>:
   12158:	e24ee004 	sub	lr, lr, #4
   1215c:	e92d4000 	stmfd	sp!, {lr}
   12160:	e14fe000 	mrs	lr, SPSR
   12164:	e92d4000 	stmfd	sp!, {lr}
   12168:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   1216c:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   12170:	e1a0100d 	mov	r1, sp
   12174:	f1020012 	cps	#18
   12178:	e1a0200d 	mov	r2, sp
   1217c:	e1a0300e 	mov	r3, lr
   12180:	f1020011 	cps	#17
   12184:	e1a0400d 	mov	r4, sp
   12188:	e1a0500e 	mov	r5, lr
   1218c:	f102001f 	cps	#31
   12190:	e1a0d001 	mov	sp, r1
   12194:	e92d003c 	push	{r2, r3, r4, r5}
   12198:	e1a0100d 	mov	r1, sp
   1219c:	e3a00001 	mov	r0, #1
   121a0:	ea00075a 	b	13f10 <ExceptionHandler>

000121a4 <PrefetchAbortStub>:
   121a4:	e24ee004 	sub	lr, lr, #4
   121a8:	e92d4000 	stmfd	sp!, {lr}
   121ac:	e14fe000 	mrs	lr, SPSR
   121b0:	e92d4000 	stmfd	sp!, {lr}
   121b4:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   121b8:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   121bc:	e1a0100d 	mov	r1, sp
   121c0:	f1020012 	cps	#18
   121c4:	e1a0200d 	mov	r2, sp
   121c8:	e1a0300e 	mov	r3, lr
   121cc:	f1020011 	cps	#17
   121d0:	e1a0400d 	mov	r4, sp
   121d4:	e1a0500e 	mov	r5, lr
   121d8:	f102001f 	cps	#31
   121dc:	e1a0d001 	mov	sp, r1
   121e0:	e92d003c 	push	{r2, r3, r4, r5}
   121e4:	e1a0100d 	mov	r1, sp
   121e8:	e3a00002 	mov	r0, #2
   121ec:	ea000747 	b	13f10 <ExceptionHandler>

000121f0 <DataAbortStub>:
   121f0:	e24ee008 	sub	lr, lr, #8
   121f4:	e92d4000 	stmfd	sp!, {lr}
   121f8:	e14fe000 	mrs	lr, SPSR
   121fc:	e92d4000 	stmfd	sp!, {lr}
   12200:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   12204:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   12208:	e1a0100d 	mov	r1, sp
   1220c:	f1020012 	cps	#18
   12210:	e1a0200d 	mov	r2, sp
   12214:	e1a0300e 	mov	r3, lr
   12218:	f1020011 	cps	#17
   1221c:	e1a0400d 	mov	r4, sp
   12220:	e1a0500e 	mov	r5, lr
   12224:	f102001f 	cps	#31
   12228:	e1a0d001 	mov	sp, r1
   1222c:	e92d003c 	push	{r2, r3, r4, r5}
   12230:	e1a0100d 	mov	r1, sp
   12234:	e3a00003 	mov	r0, #3
   12238:	ea000734 	b	13f10 <ExceptionHandler>

0001223c <UndefinedInstructionStub>:
   1223c:	e92d4001 	push	{r0, lr}
   12240:	eef80a10 	vmrs	r0, fpexc
   12244:	e3100102 	tst	r0, #-2147483648	; 0x80000000
   12248:	0affffc2 	beq	12158 <UndefinedInstructionInternal>
   1224c:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
   12250:	eee80a10 	vmsr	fpexc, r0
   12254:	e8fd8001 	ldm	sp!, {r0, pc}^

00012258 <IRQStub>:
   12258:	e24ee004 	sub	lr, lr, #4
   1225c:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
   12260:	ebffe9a0 	bl	c8e8 <InterruptHandler>
   12264:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^

00012268 <FIQStub>:
   12268:	e24ee004 	sub	lr, lr, #4
   1226c:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
   12270:	e3a03000 	mov	r3, #0
   12274:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   12278:	e59f2040 	ldr	r2, [pc, #64]	; 122c0 <FIQStub+0x58>
   1227c:	e5921000 	ldr	r1, [r2]
   12280:	e3510000 	cmp	r1, #0
   12284:	0a000004 	beq	1229c <FIQStub+0x34>
   12288:	e5920004 	ldr	r0, [r2, #4]
   1228c:	e12fff31 	blx	r1
   12290:	e3a03000 	mov	r3, #0
   12294:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   12298:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^
   1229c:	e3a03000 	mov	r3, #0
   122a0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   122a4:	e59f1018 	ldr	r1, [pc, #24]	; 122c4 <FIQStub+0x5c>
   122a8:	e3a00000 	mov	r0, #0
   122ac:	e5810000 	str	r0, [r1]
   122b0:	e3a03000 	mov	r3, #0
   122b4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   122b8:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   122bc:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^
   122c0:	00016598 	.word	0x00016598
   122c4:	2000b20c 	.word	0x2000b20c

000122c8 <CMemorySystem::~CMemorySystem()>:
   122c8:	e59f3068 	ldr	r3, [pc, #104]	; 12338 <CMemorySystem::~CMemorySystem()+0x70>
   122cc:	e92d4070 	push	{r4, r5, r6, lr}
   122d0:	e5932000 	ldr	r2, [r3]
   122d4:	e1a04000 	mov	r4, r0
   122d8:	e1520000 	cmp	r2, r0
   122dc:	0a000001 	beq	122e8 <CMemorySystem::~CMemorySystem()+0x20>
   122e0:	e1a00004 	mov	r0, r4
   122e4:	e8bd8070 	pop	{r4, r5, r6, pc}
   122e8:	e3a02000 	mov	r2, #0
   122ec:	e5d01000 	ldrb	r1, [r0]
   122f0:	e5832000 	str	r2, [r3]
   122f4:	e1510002 	cmp	r1, r2
   122f8:	0a000004 	beq	12310 <CMemorySystem::~CMemorySystem()+0x48>
   122fc:	ee111f10 	mrc	15, 0, r1, cr1, cr0, {0}
   12300:	e59f3034 	ldr	r3, [pc, #52]	; 1233c <CMemorySystem::~CMemorySystem()+0x74>
   12304:	e0033001 	and	r3, r3, r1
   12308:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
   1230c:	ee082f17 	mcr	15, 0, r2, cr8, cr7, {0}
   12310:	e5945008 	ldr	r5, [r4, #8]
   12314:	e3550000 	cmp	r5, #0
   12318:	0afffff0 	beq	122e0 <CMemorySystem::~CMemorySystem()+0x18>
   1231c:	e1a00005 	mov	r0, r5
   12320:	eb0000c5 	bl	1263c <CPageTable::~CPageTable()>
   12324:	e1a00005 	mov	r0, r5
   12328:	e3a01004 	mov	r1, #4
   1232c:	eb00012a 	bl	127dc <operator delete(void*, unsigned int)>
   12330:	e1a00004 	mov	r0, r4
   12334:	e8bd8070 	pop	{r4, r5, r6, pc}
   12338:	000166b0 	.word	0x000166b0
   1233c:	ff7fe7fa 	.word	0xff7fe7fa

00012340 <CMemorySystem::GetMemSize() const>:
   12340:	e92d4010 	push	{r4, lr}
   12344:	e59f402c 	ldr	r4, [pc, #44]	; 12378 <CMemorySystem::GetMemSize() const+0x38>
   12348:	e5943000 	ldr	r3, [r4]
   1234c:	e3530000 	cmp	r3, #0
   12350:	0a000001 	beq	1235c <CMemorySystem::GetMemSize() const+0x1c>
   12354:	e5930004 	ldr	r0, [r3, #4]
   12358:	e8bd8010 	pop	{r4, pc}
   1235c:	e3a02082 	mov	r2, #130	; 0x82
   12360:	e59f1014 	ldr	r1, [pc, #20]	; 1237c <CMemorySystem::GetMemSize() const+0x3c>
   12364:	e59f0014 	ldr	r0, [pc, #20]	; 12380 <CMemorySystem::GetMemSize() const+0x40>
   12368:	ebffe1cb 	bl	aa9c <assertion_failed>
   1236c:	e5943000 	ldr	r3, [r4]
   12370:	e5930004 	ldr	r0, [r3, #4]
   12374:	e8bd8010 	pop	{r4, pc}
   12378:	000166b0 	.word	0x000166b0
   1237c:	00015250 	.word	0x00015250
   12380:	00014c50 	.word	0x00014c50

00012384 <CMemorySystem::Get()>:
   12384:	e92d4010 	push	{r4, lr}
   12388:	e59f4020 	ldr	r4, [pc, #32]	; 123b0 <CMemorySystem::Get()+0x2c>
   1238c:	e5940000 	ldr	r0, [r4]
   12390:	e3500000 	cmp	r0, #0
   12394:	18bd8010 	popne	{r4, pc}
   12398:	e3a02088 	mov	r2, #136	; 0x88
   1239c:	e59f1010 	ldr	r1, [pc, #16]	; 123b4 <CMemorySystem::Get()+0x30>
   123a0:	e59f0010 	ldr	r0, [pc, #16]	; 123b8 <CMemorySystem::Get()+0x34>
   123a4:	ebffe1bc 	bl	aa9c <assertion_failed>
   123a8:	e5940000 	ldr	r0, [r4]
   123ac:	e8bd8010 	pop	{r4, pc}
   123b0:	000166b0 	.word	0x000166b0
   123b4:	00015250 	.word	0x00015250
   123b8:	00014c50 	.word	0x00014c50

000123bc <CMemorySystem::EnableMMU()>:
   123bc:	e5d03000 	ldrb	r3, [r0]
   123c0:	e92d4010 	push	{r4, lr}
   123c4:	e3530000 	cmp	r3, #0
   123c8:	e1a04000 	mov	r4, r0
   123cc:	0a00001c 	beq	12444 <CMemorySystem::EnableMMU()+0x88>
   123d0:	ee113f30 	mrc	15, 0, r3, cr1, cr0, {1}
   123d4:	e3833040 	orr	r3, r3, #64	; 0x40
   123d8:	ee013f30 	mcr	15, 0, r3, cr1, cr0, {1}
   123dc:	ee103f70 	mrc	15, 0, r3, cr0, cr0, {3}
   123e0:	e3130001 	tst	r3, #1
   123e4:	1a00001b 	bne	12458 <CMemorySystem::EnableMMU()+0x9c>
   123e8:	e3a03000 	mov	r3, #0
   123ec:	ee023f50 	mcr	15, 0, r3, cr2, cr0, {2}
   123f0:	e5940008 	ldr	r0, [r4, #8]
   123f4:	e1500003 	cmp	r0, r3
   123f8:	0a00001b 	beq	1246c <CMemorySystem::EnableMMU()+0xb0>
   123fc:	eb00008f 	bl	12640 <CPageTable::GetBaseAddress() const>
   12400:	ee020f10 	mcr	15, 0, r0, cr2, cr0, {0}
   12404:	e3a03001 	mov	r3, #1
   12408:	ee033f10 	mcr	15, 0, r3, cr3, cr0, {0}
   1240c:	e3a03000 	mov	r3, #0
   12410:	ee073f16 	mcr	15, 0, r3, cr7, cr6, {0}
   12414:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   12418:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   1241c:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   12420:	ee083f17 	mcr	15, 0, r3, cr8, cr7, {0}
   12424:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   12428:	ee073f95 	mcr	15, 0, r3, cr7, cr5, {4}
   1242c:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
   12430:	e59f204c 	ldr	r2, [pc, #76]	; 12484 <CMemorySystem::EnableMMU()+0xc8>
   12434:	e3c33002 	bic	r3, r3, #2
   12438:	e1832002 	orr	r2, r3, r2
   1243c:	ee012f10 	mcr	15, 0, r2, cr1, cr0, {0}
   12440:	e8bd8010 	pop	{r4, pc}
   12444:	e3a0208e 	mov	r2, #142	; 0x8e
   12448:	e59f1038 	ldr	r1, [pc, #56]	; 12488 <CMemorySystem::EnableMMU()+0xcc>
   1244c:	e59f0038 	ldr	r0, [pc, #56]	; 1248c <CMemorySystem::EnableMMU()+0xd0>
   12450:	ebffe191 	bl	aa9c <assertion_failed>
   12454:	eaffffdd 	b	123d0 <CMemorySystem::EnableMMU()+0x14>
   12458:	e3a0209b 	mov	r2, #155	; 0x9b
   1245c:	e59f1024 	ldr	r1, [pc, #36]	; 12488 <CMemorySystem::EnableMMU()+0xcc>
   12460:	e59f0028 	ldr	r0, [pc, #40]	; 12490 <CMemorySystem::EnableMMU()+0xd4>
   12464:	ebffe18c 	bl	aa9c <assertion_failed>
   12468:	eaffffde 	b	123e8 <CMemorySystem::EnableMMU()+0x2c>
   1246c:	e59f0020 	ldr	r0, [pc, #32]	; 12494 <CMemorySystem::EnableMMU()+0xd8>
   12470:	e3a020a1 	mov	r2, #161	; 0xa1
   12474:	e59f100c 	ldr	r1, [pc, #12]	; 12488 <CMemorySystem::EnableMMU()+0xcc>
   12478:	ebffe187 	bl	aa9c <assertion_failed>
   1247c:	e5940008 	ldr	r0, [r4, #8]
   12480:	eaffffdd 	b	123fc <CMemorySystem::EnableMMU()+0x40>
   12484:	00c01805 	.word	0x00c01805
   12488:	00015250 	.word	0x00015250
   1248c:	0001525c 	.word	0x0001525c
   12490:	0001526c 	.word	0x0001526c
   12494:	00015298 	.word	0x00015298

00012498 <CMemorySystem::CMemorySystem(bool)>:
   12498:	e3a03000 	mov	r3, #0
   1249c:	e92d4030 	push	{r4, r5, lr}
   124a0:	e59f20d0 	ldr	r2, [pc, #208]	; 12578 <CMemorySystem::CMemorySystem(bool)+0xe0>
   124a4:	e24dd024 	sub	sp, sp, #36	; 0x24
   124a8:	e5925000 	ldr	r5, [r2]
   124ac:	e1a04000 	mov	r4, r0
   124b0:	e1550003 	cmp	r5, r3
   124b4:	e5c01000 	strb	r1, [r0]
   124b8:	e5803004 	str	r3, [r0, #4]
   124bc:	e5803008 	str	r3, [r0, #8]
   124c0:	0a000002 	beq	124d0 <CMemorySystem::CMemorySystem(bool)+0x38>
   124c4:	e1a00004 	mov	r0, r4
   124c8:	e28dd024 	add	sp, sp, #36	; 0x24
   124cc:	e8bd8030 	pop	{r4, r5, pc}
   124d0:	e28d0008 	add	r0, sp, #8
   124d4:	e5824000 	str	r4, [r2]
   124d8:	ebffe193 	bl	ab2c <CBcmPropertyTags::CBcmPropertyTags()>
   124dc:	e58d5000 	str	r5, [sp]
   124e0:	e28d0008 	add	r0, sp, #8
   124e4:	e3a03014 	mov	r3, #20
   124e8:	e28d200c 	add	r2, sp, #12
   124ec:	e59f1088 	ldr	r1, [pc, #136]	; 1257c <CMemorySystem::CMemorySystem(bool)+0xe4>
   124f0:	ebffe1e4 	bl	ac88 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   124f4:	e3500000 	cmp	r0, #0
   124f8:	0a000018 	beq	12560 <CMemorySystem::CMemorySystem(bool)+0xc8>
   124fc:	e59d0018 	ldr	r0, [sp, #24]
   12500:	e3500000 	cmp	r0, #0
   12504:	0a000019 	beq	12570 <CMemorySystem::CMemorySystem(bool)+0xd8>
   12508:	e59f1070 	ldr	r1, [pc, #112]	; 12580 <CMemorySystem::CMemorySystem(bool)+0xe8>
   1250c:	e59f0070 	ldr	r0, [pc, #112]	; 12584 <CMemorySystem::CMemorySystem(bool)+0xec>
   12510:	e3a02047 	mov	r2, #71	; 0x47
   12514:	ebffe160 	bl	aa9c <assertion_failed>
   12518:	e59d101c 	ldr	r1, [sp, #28]
   1251c:	e59d0018 	ldr	r0, [sp, #24]
   12520:	e5841004 	str	r1, [r4, #4]
   12524:	eb0000ae 	bl	127e4 <mem_init>
   12528:	e5d43000 	ldrb	r3, [r4]
   1252c:	e3530000 	cmp	r3, #0
   12530:	0a000007 	beq	12554 <CMemorySystem::CMemorySystem(bool)+0xbc>
   12534:	e3a00004 	mov	r0, #4
   12538:	eb0000a3 	bl	127cc <operator new(unsigned int)>
   1253c:	e1a05000 	mov	r5, r0
   12540:	e5941004 	ldr	r1, [r4, #4]
   12544:	eb000012 	bl	12594 <CPageTable::CPageTable(unsigned int)>
   12548:	e5845008 	str	r5, [r4, #8]
   1254c:	e1a00004 	mov	r0, r4
   12550:	ebffff99 	bl	123bc <CMemorySystem::EnableMMU()>
   12554:	e28d0008 	add	r0, sp, #8
   12558:	ebffe179 	bl	ab44 <CBcmPropertyTags::~CBcmPropertyTags()>
   1255c:	eaffffd8 	b	124c4 <CMemorySystem::CMemorySystem(bool)+0x2c>
   12560:	e3a01303 	mov	r1, #201326592	; 0xc000000
   12564:	e58d0018 	str	r0, [sp, #24]
   12568:	e58d101c 	str	r1, [sp, #28]
   1256c:	eaffffeb 	b	12520 <CMemorySystem::CMemorySystem(bool)+0x88>
   12570:	e59d101c 	ldr	r1, [sp, #28]
   12574:	eaffffe9 	b	12520 <CMemorySystem::CMemorySystem(bool)+0x88>
   12578:	000166b0 	.word	0x000166b0
   1257c:	00010005 	.word	0x00010005
   12580:	00015250 	.word	0x00015250
   12584:	000152ac 	.word	0x000152ac

00012588 <CMemorySystem::GetCoherentPage(unsigned int)>:
   12588:	e1a00600 	lsl	r0, r0, #12
   1258c:	e2800501 	add	r0, r0, #4194304	; 0x400000
   12590:	e12fff1e 	bx	lr

00012594 <CPageTable::CPageTable(unsigned int)>:
   12594:	e3a02709 	mov	r2, #2359296	; 0x240000
   12598:	e3a03000 	mov	r3, #0
   1259c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   125a0:	e59fc074 	ldr	ip, [pc, #116]	; 1261c <CPageTable::CPageTable(unsigned int)+0x88>
   125a4:	e59f4074 	ldr	r4, [pc, #116]	; 12620 <CPageTable::CPageTable(unsigned int)+0x8c>
   125a8:	e59f5074 	ldr	r5, [pc, #116]	; 12624 <CPageTable::CPageTable(unsigned int)+0x90>
   125ac:	e59f9074 	ldr	r9, [pc, #116]	; 12628 <CPageTable::CPageTable(unsigned int)+0x94>
   125b0:	e59f8074 	ldr	r8, [pc, #116]	; 1262c <CPageTable::CPageTable(unsigned int)+0x98>
   125b4:	e59f7074 	ldr	r7, [pc, #116]	; 12630 <CPageTable::CPageTable(unsigned int)+0x9c>
   125b8:	e59f6074 	ldr	r6, [pc, #116]	; 12634 <CPageTable::CPageTable(unsigned int)+0xa0>
   125bc:	e59fe074 	ldr	lr, [pc, #116]	; 12638 <CPageTable::CPageTable(unsigned int)+0xa4>
   125c0:	e5802000 	str	r2, [r0]
   125c4:	e1530004 	cmp	r3, r4
   125c8:	31a02005 	movcc	r2, r5
   125cc:	3a000007 	bcc	125f0 <CPageTable::CPageTable(unsigned int)+0x5c>
   125d0:	e3530501 	cmp	r3, #4194304	; 0x400000
   125d4:	0a00000e 	beq	12614 <CPageTable::CPageTable(unsigned int)+0x80>
   125d8:	e1510003 	cmp	r1, r3
   125dc:	81a02008 	movhi	r2, r8
   125e0:	8a000002 	bhi	125f0 <CPageTable::CPageTable(unsigned int)+0x5c>
   125e4:	e1530007 	cmp	r3, r7
   125e8:	91a02006 	movls	r2, r6
   125ec:	83a02000 	movhi	r2, #0
   125f0:	e1822003 	orr	r2, r2, r3
   125f4:	e5ac2004 	str	r2, [ip, #4]!
   125f8:	e15c000e 	cmp	ip, lr
   125fc:	e2833601 	add	r3, r3, #1048576	; 0x100000
   12600:	1affffef 	bne	125c4 <CPageTable::CPageTable(unsigned int)+0x30>
   12604:	e3a03000 	mov	r3, #0
   12608:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
   1260c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   12610:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   12614:	e1a02009 	mov	r2, r9
   12618:	eafffff4 	b	125f0 <CPageTable::CPageTable(unsigned int)+0x5c>
   1261c:	0023fffc 	.word	0x0023fffc
   12620:	00013fc4 	.word	0x00013fc4
   12624:	0000040e 	.word	0x0000040e
   12628:	00010412 	.word	0x00010412
   1262c:	0000041e 	.word	0x0000041e
   12630:	20fffffe 	.word	0x20fffffe
   12634:	00010416 	.word	0x00010416
   12638:	00243ffc 	.word	0x00243ffc

0001263c <CPageTable::~CPageTable()>:
   1263c:	e12fff1e 	bx	lr

00012640 <CPageTable::GetBaseAddress() const>:
   12640:	e5900000 	ldr	r0, [r0]
   12644:	e3800001 	orr	r0, r0, #1
   12648:	e12fff1e 	bx	lr

0001264c <CurrentExecutionLevel>:
   1264c:	e10f0000 	mrs	r0, CPSR
   12650:	e3100040 	tst	r0, #64	; 0x40
   12654:	01a003a0 	lsreq	r0, r0, #7
   12658:	02000001 	andeq	r0, r0, #1
   1265c:	13a00002 	movne	r0, #2
   12660:	e12fff1e 	bx	lr

00012664 <EnterCritical>:
   12664:	e2403001 	sub	r3, r0, #1
   12668:	e3530001 	cmp	r3, #1
   1266c:	e92d4070 	push	{r4, r5, r6, lr}
   12670:	e1a05000 	mov	r5, r0
   12674:	9a000003 	bls	12688 <EnterCritical+0x24>
   12678:	e3a02064 	mov	r2, #100	; 0x64
   1267c:	e59f1080 	ldr	r1, [pc, #128]	; 12704 <EnterCritical+0xa0>
   12680:	e59f0080 	ldr	r0, [pc, #128]	; 12708 <EnterCritical+0xa4>
   12684:	ebffe104 	bl	aa9c <assertion_failed>
   12688:	e10f6000 	mrs	r6, CPSR
   1268c:	e3550002 	cmp	r5, #2
   12690:	0a000001 	beq	1269c <EnterCritical+0x38>
   12694:	e3160040 	tst	r6, #64	; 0x40
   12698:	1a000014 	bne	126f0 <EnterCritical+0x8c>
   1269c:	f10c00c0 	cpsid	if
   126a0:	e59f4064 	ldr	r4, [pc, #100]	; 1270c <EnterCritical+0xa8>
   126a4:	e5943000 	ldr	r3, [r4]
   126a8:	e3530013 	cmp	r3, #19
   126ac:	8a00000a 	bhi	126dc <EnterCritical+0x78>
   126b0:	e5943000 	ldr	r3, [r4]
   126b4:	e3550001 	cmp	r5, #1
   126b8:	e2832001 	add	r2, r3, #1
   126bc:	e0843103 	add	r3, r4, r3, lsl #2
   126c0:	e5842000 	str	r2, [r4]
   126c4:	e5836004 	str	r6, [r3, #4]
   126c8:	1a000000 	bne	126d0 <EnterCritical+0x6c>
   126cc:	f1080040 	cpsie	f
   126d0:	e3a03000 	mov	r3, #0
   126d4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   126d8:	e8bd8070 	pop	{r4, r5, r6, pc}
   126dc:	e3a0206e 	mov	r2, #110	; 0x6e
   126e0:	e59f101c 	ldr	r1, [pc, #28]	; 12704 <EnterCritical+0xa0>
   126e4:	e59f0024 	ldr	r0, [pc, #36]	; 12710 <EnterCritical+0xac>
   126e8:	ebffe0eb 	bl	aa9c <assertion_failed>
   126ec:	eaffffef 	b	126b0 <EnterCritical+0x4c>
   126f0:	e3a0206a 	mov	r2, #106	; 0x6a
   126f4:	e59f1008 	ldr	r1, [pc, #8]	; 12704 <EnterCritical+0xa0>
   126f8:	e59f0014 	ldr	r0, [pc, #20]	; 12714 <EnterCritical+0xb0>
   126fc:	ebffe0e6 	bl	aa9c <assertion_failed>
   12700:	eaffffe5 	b	1269c <EnterCritical+0x38>
   12704:	000152c8 	.word	0x000152c8
   12708:	000152d8 	.word	0x000152d8
   1270c:	000166b4 	.word	0x000166b4
   12710:	00015340 	.word	0x00015340
   12714:	00015310 	.word	0x00015310

00012718 <LeaveCritical>:
   12718:	e92d4010 	push	{r4, lr}
   1271c:	e3a03000 	mov	r3, #0
   12720:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   12724:	f10c0040 	cpsid	f
   12728:	e59f4034 	ldr	r4, [pc, #52]	; 12764 <LeaveCritical+0x4c>
   1272c:	e5943000 	ldr	r3, [r4]
   12730:	e3530000 	cmp	r3, #0
   12734:	1a000003 	bne	12748 <LeaveCritical+0x30>
   12738:	e3a0207f 	mov	r2, #127	; 0x7f
   1273c:	e59f1024 	ldr	r1, [pc, #36]	; 12768 <LeaveCritical+0x50>
   12740:	e59f0024 	ldr	r0, [pc, #36]	; 1276c <LeaveCritical+0x54>
   12744:	ebffe0d4 	bl	aa9c <assertion_failed>
   12748:	e5943000 	ldr	r3, [r4]
   1274c:	e2433001 	sub	r3, r3, #1
   12750:	e5843000 	str	r3, [r4]
   12754:	e0844103 	add	r4, r4, r3, lsl #2
   12758:	e5943004 	ldr	r3, [r4, #4]
   1275c:	e121f003 	msr	CPSR_c, r3
   12760:	e8bd8010 	pop	{r4, pc}
   12764:	000166b4 	.word	0x000166b4
   12768:	000152c8 	.word	0x000152c8
   1276c:	00015368 	.word	0x00015368

00012770 <CleanAndInvalidateDataCacheRange>:
   12770:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
   12774:	e2813020 	add	r3, r1, #32
   12778:	e353001f 	cmp	r3, #31
   1277c:	82800020 	addhi	r0, r0, #32
   12780:	83c1101f 	bichi	r1, r1, #31
   12784:	80801001 	addhi	r1, r0, r1
   12788:	8a000001 	bhi	12794 <CleanAndInvalidateDataCacheRange+0x24>
   1278c:	ea000003 	b	127a0 <CleanAndInvalidateDataCacheRange+0x30>
   12790:	e2800020 	add	r0, r0, #32
   12794:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
   12798:	e1510000 	cmp	r1, r0
   1279c:	1afffffb 	bne	12790 <CleanAndInvalidateDataCacheRange+0x20>
   127a0:	e3a03000 	mov	r3, #0
   127a4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   127a8:	e12fff1e 	bx	lr

000127ac <SyncDataAndInstructionCache>:
   127ac:	e3a03000 	mov	r3, #0
   127b0:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
   127b4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   127b8:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   127bc:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   127c0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   127c4:	ee073f95 	mcr	15, 0, r3, cr7, cr5, {4}
   127c8:	e12fff1e 	bx	lr

000127cc <operator new(unsigned int)>:
   127cc:	ea00001d 	b	12848 <malloc>

000127d0 <operator new[](unsigned int)>:
   127d0:	ea00001c 	b	12848 <malloc>

000127d4 <operator delete(void*)>:
   127d4:	ea000099 	b	12a40 <free>

000127d8 <operator delete[](void*)>:
   127d8:	ea000098 	b	12a40 <free>

000127dc <operator delete(void*, unsigned int)>:
   127dc:	ea000097 	b	12a40 <free>

000127e0 <operator delete[](void*, unsigned int)>:
   127e0:	ea000096 	b	12a40 <free>

000127e4 <mem_init>:
   127e4:	e3500605 	cmp	r0, #5242880	; 0x500000
   127e8:	21a0c000 	movcs	ip, r0
   127ec:	33a0c605 	movcc	ip, #5242880	; 0x500000
   127f0:	e0801001 	add	r1, r0, r1
   127f4:	e24139ff 	sub	r3, r1, #4177920	; 0x3fc000
   127f8:	e2433a03 	sub	r3, r3, #12288	; 0x3000
   127fc:	e59f2018 	ldr	r2, [pc, #24]	; 1281c <mem_init+0x38>
   12800:	e3c33eff 	bic	r3, r3, #4080	; 0xff0
   12804:	e2410501 	sub	r0, r1, #4194304	; 0x400000
   12808:	e3c3300f 	bic	r3, r3, #15
   1280c:	e582c000 	str	ip, [r2]
   12810:	e582100c 	str	r1, [r2, #12]
   12814:	e9820009 	stmib	r2, {r0, r3}
   12818:	e12fff1e 	bx	lr
   1281c:	00016708 	.word	0x00016708

00012820 <mem_get_size>:
   12820:	e59f301c 	ldr	r3, [pc, #28]	; 12844 <mem_get_size+0x24>
   12824:	e5930004 	ldr	r0, [r3, #4]
   12828:	e5931000 	ldr	r1, [r3]
   1282c:	e593200c 	ldr	r2, [r3, #12]
   12830:	e5933008 	ldr	r3, [r3, #8]
   12834:	e0400001 	sub	r0, r0, r1
   12838:	e0423003 	sub	r3, r2, r3
   1283c:	e0800003 	add	r0, r0, r3
   12840:	e12fff1e 	bx	lr
   12844:	00016708 	.word	0x00016708

00012848 <malloc>:
   12848:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1284c:	e59f71c8 	ldr	r7, [pc, #456]	; 12a1c <malloc+0x1d4>
   12850:	e1a05000 	mov	r5, r0
   12854:	e5973000 	ldr	r3, [r7]
   12858:	e3530000 	cmp	r3, #0
   1285c:	0a000069 	beq	12a08 <malloc+0x1c0>
   12860:	e5970010 	ldr	r0, [r7, #16]
   12864:	e3500000 	cmp	r0, #0
   12868:	1a000057 	bne	129cc <malloc+0x184>
   1286c:	e59f21ac 	ldr	r2, [pc, #428]	; 12a20 <malloc+0x1d8>
   12870:	e5923000 	ldr	r3, [r2]
   12874:	e3530000 	cmp	r3, #0
   12878:	0a000008 	beq	128a0 <malloc+0x58>
   1287c:	e1550003 	cmp	r5, r3
   12880:	e1a04002 	mov	r4, r2
   12884:	8a000002 	bhi	12894 <malloc+0x4c>
   12888:	ea000024 	b	12920 <malloc+0xd8>
   1288c:	e1530005 	cmp	r3, r5
   12890:	2a000022 	bcs	12920 <malloc+0xd8>
   12894:	e5b43008 	ldr	r3, [r4, #8]!
   12898:	e3530000 	cmp	r3, #0
   1289c:	1afffffa 	bne	1288c <malloc+0x44>
   128a0:	e5976000 	ldr	r6, [r7]
   128a4:	e285301f 	add	r3, r5, #31
   128a8:	e3c3300f 	bic	r3, r3, #15
   128ac:	e0863003 	add	r3, r6, r3
   128b0:	e1560003 	cmp	r6, r3
   128b4:	2a000046 	bcs	129d4 <malloc+0x18c>
   128b8:	e5971004 	ldr	r1, [r7, #4]
   128bc:	e5920040 	ldr	r0, [r2, #64]	; 0x40
   128c0:	e0411000 	sub	r1, r1, r0
   128c4:	e1530001 	cmp	r3, r1
   128c8:	8a000041 	bhi	129d4 <malloc+0x18c>
   128cc:	e3a0e043 	mov	lr, #67	; 0x43
   128d0:	e3a0c04d 	mov	ip, #77	; 0x4d
   128d4:	e3a0004c 	mov	r0, #76	; 0x4c
   128d8:	e3a01042 	mov	r1, #66	; 0x42
   128dc:	e5873000 	str	r3, [r7]
   128e0:	e1a03825 	lsr	r3, r5, #16
   128e4:	e5c63006 	strb	r3, [r6, #6]
   128e8:	e5973010 	ldr	r3, [r7, #16]
   128ec:	e1a02425 	lsr	r2, r5, #8
   128f0:	e5c65004 	strb	r5, [r6, #4]
   128f4:	e3530000 	cmp	r3, #0
   128f8:	e1a05c25 	lsr	r5, r5, #24
   128fc:	e5c6e000 	strb	lr, [r6]
   12900:	e5c6c001 	strb	ip, [r6, #1]
   12904:	e5c60002 	strb	r0, [r6, #2]
   12908:	e5c61003 	strb	r1, [r6, #3]
   1290c:	e5c62005 	strb	r2, [r6, #5]
   12910:	e5c65007 	strb	r5, [r6, #7]
   12914:	0a00001e 	beq	12994 <malloc+0x14c>
   12918:	ebffff7e 	bl	12718 <LeaveCritical>
   1291c:	ea00001c 	b	12994 <malloc+0x14c>
   12920:	e5946004 	ldr	r6, [r4, #4]
   12924:	e3560000 	cmp	r6, #0
   12928:	01a05003 	moveq	r5, r3
   1292c:	0affffdb 	beq	128a0 <malloc+0x58>
   12930:	e5d61001 	ldrb	r1, [r6, #1]
   12934:	e5d63000 	ldrb	r3, [r6]
   12938:	e5d62002 	ldrb	r2, [r6, #2]
   1293c:	e1833401 	orr	r3, r3, r1, lsl #8
   12940:	e5d61003 	ldrb	r1, [r6, #3]
   12944:	e1833802 	orr	r3, r3, r2, lsl #16
   12948:	e59f20d4 	ldr	r2, [pc, #212]	; 12a24 <malloc+0x1dc>
   1294c:	e1833c01 	orr	r3, r3, r1, lsl #24
   12950:	e1530002 	cmp	r3, r2
   12954:	0a000003 	beq	12968 <malloc+0x120>
   12958:	e3a0208a 	mov	r2, #138	; 0x8a
   1295c:	e59f10c4 	ldr	r1, [pc, #196]	; 12a28 <malloc+0x1e0>
   12960:	e59f00c4 	ldr	r0, [pc, #196]	; 12a2c <malloc+0x1e4>
   12964:	ebffe04c 	bl	aa9c <assertion_failed>
   12968:	e5d62009 	ldrb	r2, [r6, #9]
   1296c:	e5d63008 	ldrb	r3, [r6, #8]
   12970:	e5d6100a 	ldrb	r1, [r6, #10]
   12974:	e1833402 	orr	r3, r3, r2, lsl #8
   12978:	e5d6200b 	ldrb	r2, [r6, #11]
   1297c:	e1833801 	orr	r3, r3, r1, lsl #16
   12980:	e1833c02 	orr	r3, r3, r2, lsl #24
   12984:	e5843004 	str	r3, [r4, #4]
   12988:	e5973010 	ldr	r3, [r7, #16]
   1298c:	e3530000 	cmp	r3, #0
   12990:	1affffe0 	bne	12918 <malloc+0xd0>
   12994:	e3a03000 	mov	r3, #0
   12998:	e2864010 	add	r4, r6, #16
   1299c:	e314000f 	tst	r4, #15
   129a0:	e5c63008 	strb	r3, [r6, #8]
   129a4:	e5c63009 	strb	r3, [r6, #9]
   129a8:	e5c6300a 	strb	r3, [r6, #10]
   129ac:	e5c6300b 	strb	r3, [r6, #11]
   129b0:	0a000003 	beq	129c4 <malloc+0x17c>
   129b4:	e3a020b3 	mov	r2, #179	; 0xb3
   129b8:	e59f1068 	ldr	r1, [pc, #104]	; 12a28 <malloc+0x1e0>
   129bc:	e59f006c 	ldr	r0, [pc, #108]	; 12a30 <malloc+0x1e8>
   129c0:	ebffe035 	bl	aa9c <assertion_failed>
   129c4:	e1a00004 	mov	r0, r4
   129c8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   129cc:	ebffff24 	bl	12664 <EnterCritical>
   129d0:	eaffffa5 	b	1286c <malloc+0x24>
   129d4:	e3a01000 	mov	r1, #0
   129d8:	e5973010 	ldr	r3, [r7, #16]
   129dc:	e5821040 	str	r1, [r2, #64]	; 0x40
   129e0:	e1530001 	cmp	r3, r1
   129e4:	0a000000 	beq	129ec <malloc+0x1a4>
   129e8:	ebffff4a 	bl	12718 <LeaveCritical>
   129ec:	ebffe953 	bl	cf40 <CLogger::Get()>
   129f0:	e59f303c 	ldr	r3, [pc, #60]	; 12a34 <malloc+0x1ec>
   129f4:	e3a02000 	mov	r2, #0
   129f8:	e59f1038 	ldr	r1, [pc, #56]	; 12a38 <malloc+0x1f0>
   129fc:	ebffeaf8 	bl	d5e4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12a00:	e3a04000 	mov	r4, #0
   12a04:	eaffffee 	b	129c4 <malloc+0x17c>
   12a08:	e3a02070 	mov	r2, #112	; 0x70
   12a0c:	e59f1014 	ldr	r1, [pc, #20]	; 12a28 <malloc+0x1e0>
   12a10:	e59f0024 	ldr	r0, [pc, #36]	; 12a3c <malloc+0x1f4>
   12a14:	ebffe020 	bl	aa9c <assertion_failed>
   12a18:	eaffff90 	b	12860 <malloc+0x18>
   12a1c:	00016708 	.word	0x00016708
   12a20:	000165a0 	.word	0x000165a0
   12a24:	424c4d43 	.word	0x424c4d43
   12a28:	00015380 	.word	0x00015380
   12a2c:	000153a0 	.word	0x000153a0
   12a30:	000153dc 	.word	0x000153dc
   12a34:	000153c4 	.word	0x000153c4
   12a38:	000153d4 	.word	0x000153d4
   12a3c:	0001538c 	.word	0x0001538c

00012a40 <free>:
   12a40:	e3500000 	cmp	r0, #0
   12a44:	012fff1e 	bxeq	lr
   12a48:	e92d4070 	push	{r4, r5, r6, lr}
   12a4c:	e2405010 	sub	r5, r0, #16
   12a50:	e5d51001 	ldrb	r1, [r5, #1]
   12a54:	e5503010 	ldrb	r3, [r0, #-16]
   12a58:	e5d52002 	ldrb	r2, [r5, #2]
   12a5c:	e1833401 	orr	r3, r3, r1, lsl #8
   12a60:	e5d51003 	ldrb	r1, [r5, #3]
   12a64:	e1833802 	orr	r3, r3, r2, lsl #16
   12a68:	e59f20dc 	ldr	r2, [pc, #220]	; 12b4c <free+0x10c>
   12a6c:	e1833c01 	orr	r3, r3, r1, lsl #24
   12a70:	e1530002 	cmp	r3, r2
   12a74:	0a000003 	beq	12a88 <free+0x48>
   12a78:	e3a020c0 	mov	r2, #192	; 0xc0
   12a7c:	e59f10cc 	ldr	r1, [pc, #204]	; 12b50 <free+0x110>
   12a80:	e59f00cc 	ldr	r0, [pc, #204]	; 12b54 <free+0x114>
   12a84:	ebffe004 	bl	aa9c <assertion_failed>
   12a88:	e59f40c8 	ldr	r4, [pc, #200]	; 12b58 <free+0x118>
   12a8c:	e5943000 	ldr	r3, [r4]
   12a90:	e3530000 	cmp	r3, #0
   12a94:	08bd8070 	popeq	{r4, r5, r6, pc}
   12a98:	e5d51005 	ldrb	r1, [r5, #5]
   12a9c:	e5d52004 	ldrb	r2, [r5, #4]
   12aa0:	e5d50006 	ldrb	r0, [r5, #6]
   12aa4:	e1822401 	orr	r2, r2, r1, lsl #8
   12aa8:	e5d51007 	ldrb	r1, [r5, #7]
   12aac:	e1822800 	orr	r2, r2, r0, lsl #16
   12ab0:	e1822c01 	orr	r2, r2, r1, lsl #24
   12ab4:	e1520003 	cmp	r2, r3
   12ab8:	1a000002 	bne	12ac8 <free+0x88>
   12abc:	ea000005 	b	12ad8 <free+0x98>
   12ac0:	e1530002 	cmp	r3, r2
   12ac4:	0a000003 	beq	12ad8 <free+0x98>
   12ac8:	e5b43008 	ldr	r3, [r4, #8]!
   12acc:	e3530000 	cmp	r3, #0
   12ad0:	1afffffa 	bne	12ac0 <free+0x80>
   12ad4:	e8bd8070 	pop	{r4, r5, r6, pc}
   12ad8:	e59f607c 	ldr	r6, [pc, #124]	; 12b5c <free+0x11c>
   12adc:	e5960010 	ldr	r0, [r6, #16]
   12ae0:	e3500000 	cmp	r0, #0
   12ae4:	1a000009 	bne	12b10 <free+0xd0>
   12ae8:	e5d40004 	ldrb	r0, [r4, #4]
   12aec:	e5d41005 	ldrb	r1, [r4, #5]
   12af0:	e5d42006 	ldrb	r2, [r4, #6]
   12af4:	e5d43007 	ldrb	r3, [r4, #7]
   12af8:	e5c50008 	strb	r0, [r5, #8]
   12afc:	e5c51009 	strb	r1, [r5, #9]
   12b00:	e5c5200a 	strb	r2, [r5, #10]
   12b04:	e5c5300b 	strb	r3, [r5, #11]
   12b08:	e5845004 	str	r5, [r4, #4]
   12b0c:	e8bd8070 	pop	{r4, r5, r6, pc}
   12b10:	ebfffed3 	bl	12664 <EnterCritical>
   12b14:	e596c010 	ldr	ip, [r6, #16]
   12b18:	e5d40004 	ldrb	r0, [r4, #4]
   12b1c:	e5d41005 	ldrb	r1, [r4, #5]
   12b20:	e5d42006 	ldrb	r2, [r4, #6]
   12b24:	e5d43007 	ldrb	r3, [r4, #7]
   12b28:	e35c0000 	cmp	ip, #0
   12b2c:	e5c50008 	strb	r0, [r5, #8]
   12b30:	e5c51009 	strb	r1, [r5, #9]
   12b34:	e5c5200a 	strb	r2, [r5, #10]
   12b38:	e5c5300b 	strb	r3, [r5, #11]
   12b3c:	e5845004 	str	r5, [r4, #4]
   12b40:	08bd8070 	popeq	{r4, r5, r6, pc}
   12b44:	e8bd4070 	pop	{r4, r5, r6, lr}
   12b48:	eafffef2 	b	12718 <LeaveCritical>
   12b4c:	424c4d43 	.word	0x424c4d43
   12b50:	00015380 	.word	0x00015380
   12b54:	000153a0 	.word	0x000153a0
   12b58:	000165a0 	.word	0x000165a0
   12b5c:	00016708 	.word	0x00016708

00012b60 <calloc>:
   12b60:	e92d4070 	push	{r4, r5, r6, lr}
   12b64:	e0040190 	mul	r4, r0, r1
   12b68:	e3540000 	cmp	r4, #0
   12b6c:	03a04001 	moveq	r4, #1
   12b70:	e1540000 	cmp	r4, r0
   12b74:	3a000008 	bcc	12b9c <calloc+0x3c>
   12b78:	e1a00004 	mov	r0, r4
   12b7c:	ebffff31 	bl	12848 <malloc>
   12b80:	e2505000 	subs	r5, r0, #0
   12b84:	0a000002 	beq	12b94 <calloc+0x34>
   12b88:	e1a02004 	mov	r2, r4
   12b8c:	e3a01000 	mov	r1, #0
   12b90:	ebfffb4f 	bl	118d4 <memset>
   12b94:	e1a00005 	mov	r0, r5
   12b98:	e8bd8070 	pop	{r4, r5, r6, pc}
   12b9c:	e3a020e2 	mov	r2, #226	; 0xe2
   12ba0:	e59f1008 	ldr	r1, [pc, #8]	; 12bb0 <calloc+0x50>
   12ba4:	e59f0008 	ldr	r0, [pc, #8]	; 12bb4 <calloc+0x54>
   12ba8:	ebffdfbb 	bl	aa9c <assertion_failed>
   12bac:	eafffff1 	b	12b78 <calloc+0x18>
   12bb0:	00015380 	.word	0x00015380
   12bb4:	00015408 	.word	0x00015408

00012bb8 <realloc>:
   12bb8:	e92d4070 	push	{r4, r5, r6, lr}
   12bbc:	e2505000 	subs	r5, r0, #0
   12bc0:	e1a06001 	mov	r6, r1
   12bc4:	0a00002d 	beq	12c80 <realloc+0xc8>
   12bc8:	e3510000 	cmp	r1, #0
   12bcc:	0a000027 	beq	12c70 <realloc+0xb8>
   12bd0:	e2454010 	sub	r4, r5, #16
   12bd4:	e5d41001 	ldrb	r1, [r4, #1]
   12bd8:	e5553010 	ldrb	r3, [r5, #-16]
   12bdc:	e5d42002 	ldrb	r2, [r4, #2]
   12be0:	e1833401 	orr	r3, r3, r1, lsl #8
   12be4:	e5d41003 	ldrb	r1, [r4, #3]
   12be8:	e1833802 	orr	r3, r3, r2, lsl #16
   12bec:	e59f20a0 	ldr	r2, [pc, #160]	; 12c94 <realloc+0xdc>
   12bf0:	e1833c01 	orr	r3, r3, r1, lsl #24
   12bf4:	e1530002 	cmp	r3, r2
   12bf8:	0a000003 	beq	12c0c <realloc+0x54>
   12bfc:	e3a020fc 	mov	r2, #252	; 0xfc
   12c00:	e59f1090 	ldr	r1, [pc, #144]	; 12c98 <realloc+0xe0>
   12c04:	e59f0090 	ldr	r0, [pc, #144]	; 12c9c <realloc+0xe4>
   12c08:	ebffdfa3 	bl	aa9c <assertion_failed>
   12c0c:	e5d42005 	ldrb	r2, [r4, #5]
   12c10:	e5d43004 	ldrb	r3, [r4, #4]
   12c14:	e5d41006 	ldrb	r1, [r4, #6]
   12c18:	e1833402 	orr	r3, r3, r2, lsl #8
   12c1c:	e5d42007 	ldrb	r2, [r4, #7]
   12c20:	e1833801 	orr	r3, r3, r1, lsl #16
   12c24:	e1833c02 	orr	r3, r3, r2, lsl #24
   12c28:	e1560003 	cmp	r6, r3
   12c2c:	8a000001 	bhi	12c38 <realloc+0x80>
   12c30:	e1a00005 	mov	r0, r5
   12c34:	e8bd8070 	pop	{r4, r5, r6, pc}
   12c38:	e1a00006 	mov	r0, r6
   12c3c:	ebffff01 	bl	12848 <malloc>
   12c40:	e2506000 	subs	r6, r0, #0
   12c44:	0a000010 	beq	12c8c <realloc+0xd4>
   12c48:	e5d42005 	ldrb	r2, [r4, #5]
   12c4c:	e5d43004 	ldrb	r3, [r4, #4]
   12c50:	e5d41006 	ldrb	r1, [r4, #6]
   12c54:	e1833402 	orr	r3, r3, r2, lsl #8
   12c58:	e5d42007 	ldrb	r2, [r4, #7]
   12c5c:	e1833801 	orr	r3, r3, r1, lsl #16
   12c60:	e1832c02 	orr	r2, r3, r2, lsl #24
   12c64:	e1a01005 	mov	r1, r5
   12c68:	ebfffc8b 	bl	11e9c <memcpy>
   12c6c:	e1a00005 	mov	r0, r5
   12c70:	e1a05006 	mov	r5, r6
   12c74:	ebffff71 	bl	12a40 <free>
   12c78:	e1a00005 	mov	r0, r5
   12c7c:	e8bd8070 	pop	{r4, r5, r6, pc}
   12c80:	e1a00001 	mov	r0, r1
   12c84:	e8bd4070 	pop	{r4, r5, r6, lr}
   12c88:	eafffeee 	b	12848 <malloc>
   12c8c:	e1a05006 	mov	r5, r6
   12c90:	eaffffe6 	b	12c30 <realloc+0x78>
   12c94:	424c4d43 	.word	0x424c4d43
   12c98:	00015380 	.word	0x00015380
   12c9c:	000153a0 	.word	0x000153a0

00012ca0 <palloc>:
   12ca0:	e92d4070 	push	{r4, r5, r6, lr}
   12ca4:	e59f50c4 	ldr	r5, [pc, #196]	; 12d70 <palloc+0xd0>
   12ca8:	e5953008 	ldr	r3, [r5, #8]
   12cac:	e3530000 	cmp	r3, #0
   12cb0:	0a000029 	beq	12d5c <palloc+0xbc>
   12cb4:	e5950014 	ldr	r0, [r5, #20]
   12cb8:	e3500000 	cmp	r0, #0
   12cbc:	1a000016 	bne	12d1c <palloc+0x7c>
   12cc0:	e5954018 	ldr	r4, [r5, #24]
   12cc4:	e3540000 	cmp	r4, #0
   12cc8:	0a000017 	beq	12d2c <palloc+0x8c>
   12ccc:	e59f30a0 	ldr	r3, [pc, #160]	; 12d74 <palloc+0xd4>
   12cd0:	e5942000 	ldr	r2, [r4]
   12cd4:	e1520003 	cmp	r2, r3
   12cd8:	0a000003 	beq	12cec <palloc+0x4c>
   12cdc:	e59f2094 	ldr	r2, [pc, #148]	; 12d78 <palloc+0xd8>
   12ce0:	e59f1094 	ldr	r1, [pc, #148]	; 12d7c <palloc+0xdc>
   12ce4:	e59f0094 	ldr	r0, [pc, #148]	; 12d80 <palloc+0xe0>
   12ce8:	ebffdf6b 	bl	aa9c <assertion_failed>
   12cec:	e3a02000 	mov	r2, #0
   12cf0:	e5943004 	ldr	r3, [r4, #4]
   12cf4:	e5842000 	str	r2, [r4]
   12cf8:	e5853018 	str	r3, [r5, #24]
   12cfc:	e5953014 	ldr	r3, [r5, #20]
   12d00:	e3530000 	cmp	r3, #0
   12d04:	1a000001 	bne	12d10 <palloc+0x70>
   12d08:	e1a00004 	mov	r0, r4
   12d0c:	e8bd8070 	pop	{r4, r5, r6, pc}
   12d10:	ebfffe80 	bl	12718 <LeaveCritical>
   12d14:	e1a00004 	mov	r0, r4
   12d18:	e8bd8070 	pop	{r4, r5, r6, pc}
   12d1c:	ebfffe50 	bl	12664 <EnterCritical>
   12d20:	e5954018 	ldr	r4, [r5, #24]
   12d24:	e3540000 	cmp	r4, #0
   12d28:	1affffe7 	bne	12ccc <palloc+0x2c>
   12d2c:	e5954008 	ldr	r4, [r5, #8]
   12d30:	e595200c 	ldr	r2, [r5, #12]
   12d34:	e2843a01 	add	r3, r4, #4096	; 0x1000
   12d38:	e1530002 	cmp	r3, r2
   12d3c:	e5853008 	str	r3, [r5, #8]
   12d40:	9affffed 	bls	12cfc <palloc+0x5c>
   12d44:	e5954014 	ldr	r4, [r5, #20]
   12d48:	e3540000 	cmp	r4, #0
   12d4c:	0affffed 	beq	12d08 <palloc+0x68>
   12d50:	ebfffe70 	bl	12718 <LeaveCritical>
   12d54:	e3a00000 	mov	r0, #0
   12d58:	e8bd8070 	pop	{r4, r5, r6, pc}
   12d5c:	e59f2020 	ldr	r2, [pc, #32]	; 12d84 <palloc+0xe4>
   12d60:	e59f1014 	ldr	r1, [pc, #20]	; 12d7c <palloc+0xdc>
   12d64:	e59f001c 	ldr	r0, [pc, #28]	; 12d88 <palloc+0xe8>
   12d68:	ebffdf4b 	bl	aa9c <assertion_failed>
   12d6c:	eaffffd0 	b	12cb4 <palloc+0x14>
   12d70:	00016708 	.word	0x00016708
   12d74:	50474d43 	.word	0x50474d43
   12d78:	0000011f 	.word	0x0000011f
   12d7c:	00015380 	.word	0x00015380
   12d80:	00015430 	.word	0x00015430
   12d84:	00000111 	.word	0x00000111
   12d88:	0001541c 	.word	0x0001541c

00012d8c <pfree>:
   12d8c:	e92d4070 	push	{r4, r5, r6, lr}
   12d90:	e2504000 	subs	r4, r0, #0
   12d94:	08bd8070 	popeq	{r4, r5, r6, pc}
   12d98:	e59f5044 	ldr	r5, [pc, #68]	; 12de4 <pfree+0x58>
   12d9c:	e5950014 	ldr	r0, [r5, #20]
   12da0:	e3500000 	cmp	r0, #0
   12da4:	1a000004 	bne	12dbc <pfree+0x30>
   12da8:	e5952018 	ldr	r2, [r5, #24]
   12dac:	e59f1034 	ldr	r1, [pc, #52]	; 12de8 <pfree+0x5c>
   12db0:	e5854018 	str	r4, [r5, #24]
   12db4:	e8840006 	stm	r4, {r1, r2}
   12db8:	e8bd8070 	pop	{r4, r5, r6, pc}
   12dbc:	ebfffe28 	bl	12664 <EnterCritical>
   12dc0:	e5951014 	ldr	r1, [r5, #20]
   12dc4:	e5953018 	ldr	r3, [r5, #24]
   12dc8:	e59f2018 	ldr	r2, [pc, #24]	; 12de8 <pfree+0x5c>
   12dcc:	e3510000 	cmp	r1, #0
   12dd0:	e884000c 	stm	r4, {r2, r3}
   12dd4:	e5854018 	str	r4, [r5, #24]
   12dd8:	08bd8070 	popeq	{r4, r5, r6, pc}
   12ddc:	e8bd4070 	pop	{r4, r5, r6, lr}
   12de0:	eafffe4c 	b	12718 <LeaveCritical>
   12de4:	00016708 	.word	0x00016708
   12de8:	50474d43 	.word	0x50474d43

00012dec <_GLOBAL__sub_I_mem_init>:
   12dec:	e3a02001 	mov	r2, #1
   12df0:	e59f3008 	ldr	r3, [pc, #8]	; 12e00 <_GLOBAL__sub_I_mem_init+0x14>
   12df4:	e5832010 	str	r2, [r3, #16]
   12df8:	e5832014 	str	r2, [r3, #20]
   12dfc:	e12fff1e 	bx	lr
   12e00:	00016708 	.word	0x00016708

00012e04 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>:
   12e04:	e3a02000 	mov	r2, #0
   12e08:	e3a01001 	mov	r1, #1
   12e0c:	e92d4030 	push	{r4, r5, lr}
   12e10:	e1a04000 	mov	r4, r0
   12e14:	e5903020 	ldr	r3, [r0, #32]
   12e18:	e24dd014 	sub	sp, sp, #20
   12e1c:	e5c31011 	strb	r1, [r3, #17]
   12e20:	e5c3200c 	strb	r2, [r3, #12]
   12e24:	e5c3200d 	strb	r2, [r3, #13]
   12e28:	e5c3200e 	strb	r2, [r3, #14]
   12e2c:	e5c3200f 	strb	r2, [r3, #15]
   12e30:	e5c32010 	strb	r2, [r3, #16]
   12e34:	e5c32012 	strb	r2, [r3, #18]
   12e38:	e5c32013 	strb	r2, [r3, #19]
   12e3c:	e28d000c 	add	r0, sp, #12
   12e40:	ebffdf39 	bl	ab2c <CBcmPropertyTags::CBcmPropertyTags()>
   12e44:	e59f306c 	ldr	r3, [pc, #108]	; 12eb8 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0xb4>
   12e48:	e5942020 	ldr	r2, [r4, #32]
   12e4c:	e28d000c 	add	r0, sp, #12
   12e50:	e58d3000 	str	r3, [sp]
   12e54:	e59f1060 	ldr	r1, [pc, #96]	; 12ebc <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0xb8>
   12e58:	e283300c 	add	r3, r3, #12
   12e5c:	ebffdf89 	bl	ac88 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   12e60:	e2505000 	subs	r5, r0, #0
   12e64:	0a000008 	beq	12e8c <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x88>
   12e68:	e5942020 	ldr	r2, [r4, #32]
   12e6c:	e5d2300c 	ldrb	r3, [r2, #12]
   12e70:	e5d2000d 	ldrb	r0, [r2, #13]
   12e74:	e5d2100e 	ldrb	r1, [r2, #14]
   12e78:	e1833400 	orr	r3, r3, r0, lsl #8
   12e7c:	e5d2200f 	ldrb	r2, [r2, #15]
   12e80:	e1833801 	orr	r3, r3, r1, lsl #16
   12e84:	e1933c02 	orrs	r3, r3, r2, lsl #24
   12e88:	0a000005 	beq	12ea4 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0xa0>
   12e8c:	e3a05000 	mov	r5, #0
   12e90:	e28d000c 	add	r0, sp, #12
   12e94:	ebffdf2a 	bl	ab44 <CBcmPropertyTags::~CBcmPropertyTags()>
   12e98:	e1a00005 	mov	r0, r5
   12e9c:	e28dd014 	add	sp, sp, #20
   12ea0:	e8bd8030 	pop	{r4, r5, pc}
   12ea4:	e28d000c 	add	r0, sp, #12
   12ea8:	ebffdf25 	bl	ab44 <CBcmPropertyTags::~CBcmPropertyTags()>
   12eac:	e1a00005 	mov	r0, r5
   12eb0:	e28dd014 	add	sp, sp, #20
   12eb4:	e8bd8030 	pop	{r4, r5, pc}
   12eb8:	00000408 	.word	0x00000408
   12ebc:	0004800b 	.word	0x0004800b

00012ec0 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
   12ec0:	e92d4030 	push	{r4, r5, lr}
   12ec4:	e3510000 	cmp	r1, #0
   12ec8:	13520000 	cmpne	r2, #0
   12ecc:	e1a04000 	mov	r4, r0
   12ed0:	e3a05000 	mov	r5, #0
   12ed4:	e24dd024 	sub	sp, sp, #36	; 0x24
   12ed8:	e59dc034 	ldr	ip, [sp, #52]	; 0x34
   12edc:	e59d0030 	ldr	r0, [sp, #48]	; 0x30
   12ee0:	e8840006 	stm	r4, {r1, r2}
   12ee4:	e5843010 	str	r3, [r4, #16]
   12ee8:	e584c00c 	str	ip, [r4, #12]
   12eec:	e5840008 	str	r0, [r4, #8]
   12ef0:	e5845014 	str	r5, [r4, #20]
   12ef4:	e5845018 	str	r5, [r4, #24]
   12ef8:	e584501c 	str	r5, [r4, #28]
   12efc:	e5845020 	str	r5, [r4, #32]
   12f00:	1a000010 	bne	12f48 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x88>
   12f04:	e28d0008 	add	r0, sp, #8
   12f08:	ebffdf07 	bl	ab2c <CBcmPropertyTags::CBcmPropertyTags()>
   12f0c:	e58d5000 	str	r5, [sp]
   12f10:	e28d0008 	add	r0, sp, #8
   12f14:	e3a03014 	mov	r3, #20
   12f18:	e28d200c 	add	r2, sp, #12
   12f1c:	e59f10c8 	ldr	r1, [pc, #200]	; 12fec <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x12c>
   12f20:	ebffdf58 	bl	ac88 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   12f24:	e1500005 	cmp	r0, r5
   12f28:	1a000026 	bne	12fc8 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x108>
   12f2c:	e3a02d0a 	mov	r2, #640	; 0x280
   12f30:	e3a03e1e 	mov	r3, #480	; 0x1e0
   12f34:	e884000c 	stm	r4, {r2, r3}
   12f38:	e28d0008 	add	r0, sp, #8
   12f3c:	ebffdf00 	bl	ab44 <CBcmPropertyTags::~CBcmPropertyTags()>
   12f40:	e5940008 	ldr	r0, [r4, #8]
   12f44:	e5943010 	ldr	r3, [r4, #16]
   12f48:	e3500000 	cmp	r0, #0
   12f4c:	0a000019 	beq	12fb8 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xf8>
   12f50:	e594200c 	ldr	r2, [r4, #12]
   12f54:	e3520000 	cmp	r2, #0
   12f58:	0a000016 	beq	12fb8 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xf8>
   12f5c:	e3530008 	cmp	r3, #8
   12f60:	8a000006 	bhi	12f80 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xc0>
   12f64:	e59f0084 	ldr	r0, [pc, #132]	; 12ff0 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x130>
   12f68:	ebfffe18 	bl	127d0 <operator new[](unsigned int)>
   12f6c:	e3a02b01 	mov	r2, #1024	; 0x400
   12f70:	e5840020 	str	r0, [r4, #32]
   12f74:	e3a01000 	mov	r1, #0
   12f78:	e2800014 	add	r0, r0, #20
   12f7c:	ebfffa54 	bl	118d4 <memset>
   12f80:	e3a02070 	mov	r2, #112	; 0x70
   12f84:	e59f1068 	ldr	r1, [pc, #104]	; 12ff4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x134>
   12f88:	e2840024 	add	r0, r4, #36	; 0x24
   12f8c:	ebfffbc2 	bl	11e9c <memcpy>
   12f90:	e994000f 	ldmib	r4, {r0, r1, r2, r3}
   12f94:	e5840034 	str	r0, [r4, #52]	; 0x34
   12f98:	e1a00004 	mov	r0, r4
   12f9c:	e594c000 	ldr	ip, [r4]
   12fa0:	e5841044 	str	r1, [r4, #68]	; 0x44
   12fa4:	e584c030 	str	ip, [r4, #48]	; 0x30
   12fa8:	e5842048 	str	r2, [r4, #72]	; 0x48
   12fac:	e5843058 	str	r3, [r4, #88]	; 0x58
   12fb0:	e28dd024 	add	sp, sp, #36	; 0x24
   12fb4:	e8bd8030 	pop	{r4, r5, pc}
   12fb8:	e8940006 	ldm	r4, {r1, r2}
   12fbc:	e5841008 	str	r1, [r4, #8]
   12fc0:	e584200c 	str	r2, [r4, #12]
   12fc4:	eaffffe4 	b	12f5c <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x9c>
   12fc8:	e59d2018 	ldr	r2, [sp, #24]
   12fcc:	e59d301c 	ldr	r3, [sp, #28]
   12fd0:	e2420d0a 	sub	r0, r2, #640	; 0x280
   12fd4:	e2431e1e 	sub	r1, r3, #480	; 0x1e0
   12fd8:	e3510f96 	cmp	r1, #600	; 0x258
   12fdc:	93500c05 	cmpls	r0, #1280	; 0x500
   12fe0:	e884000c 	stm	r4, {r2, r3}
   12fe4:	9affffd3 	bls	12f38 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x78>
   12fe8:	eaffffcf 	b	12f2c <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
   12fec:	00040003 	.word	0x00040003
   12ff0:	00000414 	.word	0x00000414
   12ff4:	000165e4 	.word	0x000165e4

00012ff8 <CBcmFrameBuffer::~CBcmFrameBuffer()>:
   12ff8:	e92d4010 	push	{r4, lr}
   12ffc:	e1a04000 	mov	r4, r0
   13000:	e3a01014 	mov	r1, #20
   13004:	e5900020 	ldr	r0, [r0, #32]
   13008:	ebfffdf3 	bl	127dc <operator delete(void*, unsigned int)>
   1300c:	e1a00004 	mov	r0, r4
   13010:	e8bd8010 	pop	{r4, pc}

00013014 <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)>:
   13014:	e5903010 	ldr	r3, [r0, #16]
   13018:	e3530008 	cmp	r3, #8
   1301c:	812fff1e 	bxhi	lr
   13020:	e1a03982 	lsl	r3, r2, #19
   13024:	e1a0c5a2 	lsr	ip, r2, #11
   13028:	e203373e 	and	r3, r3, #16252928	; 0xf80000
   1302c:	e183318c 	orr	r3, r3, ip, lsl #3
   13030:	e1a02282 	lsl	r2, r2, #5
   13034:	e5900020 	ldr	r0, [r0, #32]
   13038:	e38334ff 	orr	r3, r3, #-16777216	; 0xff000000
   1303c:	e2022b3f 	and	r2, r2, #64512	; 0xfc00
   13040:	e1822003 	orr	r2, r2, r3
   13044:	e2811004 	add	r1, r1, #4
   13048:	e0801101 	add	r1, r0, r1, lsl #2
   1304c:	e1a0c422 	lsr	ip, r2, #8
   13050:	e1a00822 	lsr	r0, r2, #16
   13054:	e1a03c22 	lsr	r3, r2, #24
   13058:	e5c12004 	strb	r2, [r1, #4]
   1305c:	e5c1c005 	strb	ip, [r1, #5]
   13060:	e5c10006 	strb	r0, [r1, #6]
   13064:	e5c13007 	strb	r3, [r1, #7]
   13068:	e12fff1e 	bx	lr

0001306c <CBcmFrameBuffer::SetPalette32(unsigned char, unsigned int)>:
   1306c:	e5903010 	ldr	r3, [r0, #16]
   13070:	e3530008 	cmp	r3, #8
   13074:	812fff1e 	bxhi	lr
   13078:	e5903020 	ldr	r3, [r0, #32]
   1307c:	e2811004 	add	r1, r1, #4
   13080:	e0831101 	add	r1, r3, r1, lsl #2
   13084:	e1a0c422 	lsr	ip, r2, #8
   13088:	e1a00822 	lsr	r0, r2, #16
   1308c:	e1a03c22 	lsr	r3, r2, #24
   13090:	e5c12004 	strb	r2, [r1, #4]
   13094:	e5c1c005 	strb	ip, [r1, #5]
   13098:	e5c10006 	strb	r0, [r1, #6]
   1309c:	e5c13007 	strb	r3, [r1, #7]
   130a0:	e12fff1e 	bx	lr

000130a4 <CBcmFrameBuffer::Initialize()>:
   130a4:	e92d4030 	push	{r4, r5, lr}
   130a8:	e1a04000 	mov	r4, r0
   130ac:	e24dd00c 	sub	sp, sp, #12
   130b0:	e28d0004 	add	r0, sp, #4
   130b4:	ebffde9c 	bl	ab2c <CBcmPropertyTags::CBcmPropertyTags()>
   130b8:	e2841024 	add	r1, r4, #36	; 0x24
   130bc:	e28d0004 	add	r0, sp, #4
   130c0:	e3a02070 	mov	r2, #112	; 0x70
   130c4:	ebffdea3 	bl	ab58 <CBcmPropertyTags::GetTags(void*, unsigned int)>
   130c8:	e2505000 	subs	r5, r0, #0
   130cc:	0a00001f 	beq	13150 <CBcmFrameBuffer::Initialize()+0xac>
   130d0:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   130d4:	e3530000 	cmp	r3, #0
   130d8:	0a00001b 	beq	1314c <CBcmFrameBuffer::Initialize()+0xa8>
   130dc:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   130e0:	e3530000 	cmp	r3, #0
   130e4:	0a000018 	beq	1314c <CBcmFrameBuffer::Initialize()+0xa8>
   130e8:	e5943044 	ldr	r3, [r4, #68]	; 0x44
   130ec:	e3530000 	cmp	r3, #0
   130f0:	0a000015 	beq	1314c <CBcmFrameBuffer::Initialize()+0xa8>
   130f4:	e5943048 	ldr	r3, [r4, #72]	; 0x48
   130f8:	e3530000 	cmp	r3, #0
   130fc:	0a000012 	beq	1314c <CBcmFrameBuffer::Initialize()+0xa8>
   13100:	e5943058 	ldr	r3, [r4, #88]	; 0x58
   13104:	e3530000 	cmp	r3, #0
   13108:	0a00000f 	beq	1314c <CBcmFrameBuffer::Initialize()+0xa8>
   1310c:	e594307c 	ldr	r3, [r4, #124]	; 0x7c
   13110:	e3530000 	cmp	r3, #0
   13114:	0a00000c 	beq	1314c <CBcmFrameBuffer::Initialize()+0xa8>
   13118:	e5940010 	ldr	r0, [r4, #16]
   1311c:	e5941080 	ldr	r1, [r4, #128]	; 0x80
   13120:	e5942090 	ldr	r2, [r4, #144]	; 0x90
   13124:	e3c33103 	bic	r3, r3, #-1073741824	; 0xc0000000
   13128:	e3500008 	cmp	r0, #8
   1312c:	e5843014 	str	r3, [r4, #20]
   13130:	e5841018 	str	r1, [r4, #24]
   13134:	e584201c 	str	r2, [r4, #28]
   13138:	8a000004 	bhi	13150 <CBcmFrameBuffer::Initialize()+0xac>
   1313c:	e1a00004 	mov	r0, r4
   13140:	ebffff2f 	bl	12e04 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>
   13144:	e1a05000 	mov	r5, r0
   13148:	ea000000 	b	13150 <CBcmFrameBuffer::Initialize()+0xac>
   1314c:	e1a05003 	mov	r5, r3
   13150:	e28d0004 	add	r0, sp, #4
   13154:	ebffde7a 	bl	ab44 <CBcmPropertyTags::~CBcmPropertyTags()>
   13158:	e1a00005 	mov	r0, r5
   1315c:	e28dd00c 	add	sp, sp, #12
   13160:	e8bd8030 	pop	{r4, r5, pc}

00013164 <CBcmFrameBuffer::GetWidth() const>:
   13164:	e5900000 	ldr	r0, [r0]
   13168:	e12fff1e 	bx	lr

0001316c <CBcmFrameBuffer::GetHeight() const>:
   1316c:	e5900004 	ldr	r0, [r0, #4]
   13170:	e12fff1e 	bx	lr

00013174 <CBcmFrameBuffer::GetVirtWidth() const>:
   13174:	e5900008 	ldr	r0, [r0, #8]
   13178:	e12fff1e 	bx	lr

0001317c <CBcmFrameBuffer::GetVirtHeight() const>:
   1317c:	e590000c 	ldr	r0, [r0, #12]
   13180:	e12fff1e 	bx	lr

00013184 <CBcmFrameBuffer::GetPitch() const>:
   13184:	e590001c 	ldr	r0, [r0, #28]
   13188:	e12fff1e 	bx	lr

0001318c <CBcmFrameBuffer::GetDepth() const>:
   1318c:	e5900010 	ldr	r0, [r0, #16]
   13190:	e12fff1e 	bx	lr

00013194 <CBcmFrameBuffer::GetBuffer() const>:
   13194:	e5900014 	ldr	r0, [r0, #20]
   13198:	e12fff1e 	bx	lr

0001319c <CBcmFrameBuffer::GetSize() const>:
   1319c:	e5900018 	ldr	r0, [r0, #24]
   131a0:	e12fff1e 	bx	lr

000131a4 <CBcmFrameBuffer::UpdatePalette()>:
   131a4:	e5903010 	ldr	r3, [r0, #16]
   131a8:	e3530008 	cmp	r3, #8
   131ac:	9a000001 	bls	131b8 <CBcmFrameBuffer::UpdatePalette()+0x14>
   131b0:	e3a00001 	mov	r0, #1
   131b4:	e12fff1e 	bx	lr
   131b8:	eaffff11 	b	12e04 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>

000131bc <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)>:
   131bc:	e92d4070 	push	{r4, r5, r6, lr}
   131c0:	e24dd020 	sub	sp, sp, #32
   131c4:	e28d0008 	add	r0, sp, #8
   131c8:	e1a05001 	mov	r5, r1
   131cc:	e1a06002 	mov	r6, r2
   131d0:	ebffde55 	bl	ab2c <CBcmPropertyTags::CBcmPropertyTags()>
   131d4:	e3a03008 	mov	r3, #8
   131d8:	e28d200c 	add	r2, sp, #12
   131dc:	e08d0003 	add	r0, sp, r3
   131e0:	e58d3000 	str	r3, [sp]
   131e4:	e59f1044 	ldr	r1, [pc, #68]	; 13230 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x74>
   131e8:	e3a03014 	mov	r3, #20
   131ec:	e58d5018 	str	r5, [sp, #24]
   131f0:	e58d601c 	str	r6, [sp, #28]
   131f4:	ebffdea3 	bl	ac88 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   131f8:	e2504000 	subs	r4, r0, #0
   131fc:	0a000006 	beq	1321c <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x60>
   13200:	e59d3018 	ldr	r3, [sp, #24]
   13204:	e1550003 	cmp	r5, r3
   13208:	059d401c 	ldreq	r4, [sp, #28]
   1320c:	13a04000 	movne	r4, #0
   13210:	00444006 	subeq	r4, r4, r6
   13214:	016f4f14 	clzeq	r4, r4
   13218:	01a042a4 	lsreq	r4, r4, #5
   1321c:	e28d0008 	add	r0, sp, #8
   13220:	ebffde47 	bl	ab44 <CBcmPropertyTags::~CBcmPropertyTags()>
   13224:	e1a00004 	mov	r0, r4
   13228:	e28dd020 	add	sp, sp, #32
   1322c:	e8bd8070 	pop	{r4, r5, r6, pc}
   13230:	00048009 	.word	0x00048009

00013234 <CBcmFrameBuffer::WaitForVerticalSync()>:
   13234:	e92d4010 	push	{r4, lr}
   13238:	e24dd020 	sub	sp, sp, #32
   1323c:	e28d000c 	add	r0, sp, #12
   13240:	ebffde39 	bl	ab2c <CBcmPropertyTags::CBcmPropertyTags()>
   13244:	e3a03000 	mov	r3, #0
   13248:	e58d3000 	str	r3, [sp]
   1324c:	e3a03010 	mov	r3, #16
   13250:	e59f1020 	ldr	r1, [pc, #32]	; 13278 <CBcmFrameBuffer::WaitForVerticalSync()+0x44>
   13254:	e08d2003 	add	r2, sp, r3
   13258:	e28d000c 	add	r0, sp, #12
   1325c:	ebffde89 	bl	ac88 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   13260:	e1a04000 	mov	r4, r0
   13264:	e28d000c 	add	r0, sp, #12
   13268:	ebffde35 	bl	ab44 <CBcmPropertyTags::~CBcmPropertyTags()>
   1326c:	e1a00004 	mov	r0, r4
   13270:	e28dd020 	add	sp, sp, #32
   13274:	e8bd8010 	pop	{r4, pc}
   13278:	0004800e 	.word	0x0004800e

0001327c <CBcmMailBox::CBcmMailBox(unsigned int)>:
   1327c:	e5801000 	str	r1, [r0]
   13280:	e12fff1e 	bx	lr

00013284 <CBcmMailBox::~CBcmMailBox()>:
   13284:	e12fff1e 	bx	lr

00013288 <CBcmMailBox::Flush()>:
   13288:	e92d4070 	push	{r4, r5, r6, lr}
   1328c:	e59f4028 	ldr	r4, [pc, #40]	; 132bc <CBcmMailBox::Flush()+0x34>
   13290:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   13294:	e3130101 	tst	r3, #1073741824	; 0x40000000
   13298:	18bd8070 	popne	{r4, r5, r6, pc}
   1329c:	e3a05014 	mov	r5, #20
   132a0:	e1a00005 	mov	r0, r5
   132a4:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
   132a8:	ebfff941 	bl	117b4 <CTimer::SimpleMsDelay(unsigned int)>
   132ac:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   132b0:	e3130101 	tst	r3, #1073741824	; 0x40000000
   132b4:	0afffff9 	beq	132a0 <CBcmMailBox::Flush()+0x18>
   132b8:	e8bd8070 	pop	{r4, r5, r6, pc}
   132bc:	2000b000 	.word	0x2000b000

000132c0 <CBcmMailBox::Read()>:
   132c0:	e5901000 	ldr	r1, [r0]
   132c4:	e59f2020 	ldr	r2, [pc, #32]	; 132ec <CBcmMailBox::Read()+0x2c>
   132c8:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   132cc:	e3130101 	tst	r3, #1073741824	; 0x40000000
   132d0:	1afffffc 	bne	132c8 <CBcmMailBox::Read()+0x8>
   132d4:	e5920880 	ldr	r0, [r2, #2176]	; 0x880
   132d8:	e200300f 	and	r3, r0, #15
   132dc:	e1510003 	cmp	r1, r3
   132e0:	1afffff8 	bne	132c8 <CBcmMailBox::Read()+0x8>
   132e4:	e3c0000f 	bic	r0, r0, #15
   132e8:	e12fff1e 	bx	lr
   132ec:	2000b000 	.word	0x2000b000

000132f0 <CBcmMailBox::Write(unsigned int)>:
   132f0:	e92d4070 	push	{r4, r5, r6, lr}
   132f4:	e1a05000 	mov	r5, r0
   132f8:	e1a04001 	mov	r4, r1
   132fc:	e59f2034 	ldr	r2, [pc, #52]	; 13338 <CBcmMailBox::Write(unsigned int)+0x48>
   13300:	e59238b8 	ldr	r3, [r2, #2232]	; 0x8b8
   13304:	e3530000 	cmp	r3, #0
   13308:	bafffffc 	blt	13300 <CBcmMailBox::Write(unsigned int)+0x10>
   1330c:	e314000f 	tst	r4, #15
   13310:	0a000003 	beq	13324 <CBcmMailBox::Write(unsigned int)+0x34>
   13314:	e3a0205b 	mov	r2, #91	; 0x5b
   13318:	e59f101c 	ldr	r1, [pc, #28]	; 1333c <CBcmMailBox::Write(unsigned int)+0x4c>
   1331c:	e59f001c 	ldr	r0, [pc, #28]	; 13340 <CBcmMailBox::Write(unsigned int)+0x50>
   13320:	ebffdddd 	bl	aa9c <assertion_failed>
   13324:	e5952000 	ldr	r2, [r5]
   13328:	e59f3008 	ldr	r3, [pc, #8]	; 13338 <CBcmMailBox::Write(unsigned int)+0x48>
   1332c:	e1844002 	orr	r4, r4, r2
   13330:	e58348a0 	str	r4, [r3, #2208]	; 0x8a0
   13334:	e8bd8070 	pop	{r4, r5, r6, pc}
   13338:	2000b000 	.word	0x2000b000
   1333c:	00015454 	.word	0x00015454
   13340:	00015464 	.word	0x00015464

00013344 <CBcmMailBox::WriteRead(unsigned int)>:
   13344:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   13348:	e3a03000 	mov	r3, #0
   1334c:	e1a07000 	mov	r7, r0
   13350:	e1a08001 	mov	r8, r1
   13354:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   13358:	e59f5090 	ldr	r5, [pc, #144]	; 133f0 <CBcmMailBox::WriteRead(unsigned int)+0xac>
   1335c:	e5950000 	ldr	r0, [r5]
   13360:	e1500003 	cmp	r0, r3
   13364:	1a00001f 	bne	133e8 <CBcmMailBox::WriteRead(unsigned int)+0xa4>
   13368:	e59f4084 	ldr	r4, [pc, #132]	; 133f4 <CBcmMailBox::WriteRead(unsigned int)+0xb0>
   1336c:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   13370:	e3130101 	tst	r3, #1073741824	; 0x40000000
   13374:	1a000006 	bne	13394 <CBcmMailBox::WriteRead(unsigned int)+0x50>
   13378:	e3a06014 	mov	r6, #20
   1337c:	e1a00006 	mov	r0, r6
   13380:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
   13384:	ebfff90a 	bl	117b4 <CTimer::SimpleMsDelay(unsigned int)>
   13388:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   1338c:	e3130101 	tst	r3, #1073741824	; 0x40000000
   13390:	0afffff9 	beq	1337c <CBcmMailBox::WriteRead(unsigned int)+0x38>
   13394:	e1a00007 	mov	r0, r7
   13398:	e1a01008 	mov	r1, r8
   1339c:	ebffffd3 	bl	132f0 <CBcmMailBox::Write(unsigned int)>
   133a0:	e5970000 	ldr	r0, [r7]
   133a4:	e59f2048 	ldr	r2, [pc, #72]	; 133f4 <CBcmMailBox::WriteRead(unsigned int)+0xb0>
   133a8:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   133ac:	e3130101 	tst	r3, #1073741824	; 0x40000000
   133b0:	1afffffc 	bne	133a8 <CBcmMailBox::WriteRead(unsigned int)+0x64>
   133b4:	e5923880 	ldr	r3, [r2, #2176]	; 0x880
   133b8:	e203100f 	and	r1, r3, #15
   133bc:	e1510000 	cmp	r1, r0
   133c0:	1afffff8 	bne	133a8 <CBcmMailBox::WriteRead(unsigned int)+0x64>
   133c4:	e5952000 	ldr	r2, [r5]
   133c8:	e3c3400f 	bic	r4, r3, #15
   133cc:	e3520000 	cmp	r2, #0
   133d0:	0a000000 	beq	133d8 <CBcmMailBox::WriteRead(unsigned int)+0x94>
   133d4:	ebfffccf 	bl	12718 <LeaveCritical>
   133d8:	e3a03000 	mov	r3, #0
   133dc:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   133e0:	e1a00004 	mov	r0, r4
   133e4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   133e8:	ebfffc9d 	bl	12664 <EnterCritical>
   133ec:	eaffffdd 	b	13368 <CBcmMailBox::WriteRead(unsigned int)+0x24>
   133f0:	00016724 	.word	0x00016724
   133f4:	2000b000 	.word	0x2000b000

000133f8 <_GLOBAL__sub_I__ZN11CBcmMailBox10s_SpinLockE>:
   133f8:	e3a02000 	mov	r2, #0
   133fc:	e59f3004 	ldr	r3, [pc, #4]	; 13408 <_GLOBAL__sub_I__ZN11CBcmMailBox10s_SpinLockE+0x10>
   13400:	e5832000 	str	r2, [r3]
   13404:	e12fff1e 	bx	lr
   13408:	00016724 	.word	0x00016724

0001340c <CCharGenerator::CCharGenerator()>:
   1340c:	e3a03008 	mov	r3, #8
   13410:	e5803000 	str	r3, [r0]
   13414:	e12fff1e 	bx	lr

00013418 <CCharGenerator::~CCharGenerator()>:
   13418:	e12fff1e 	bx	lr

0001341c <CCharGenerator::GetCharWidth() const>:
   1341c:	e5900000 	ldr	r0, [r0]
   13420:	e12fff1e 	bx	lr

00013424 <CCharGenerator::GetCharHeight() const>:
   13424:	e3a00013 	mov	r0, #19
   13428:	e12fff1e 	bx	lr

0001342c <CCharGenerator::GetUnderline() const>:
   1342c:	e3a00010 	mov	r0, #16
   13430:	e12fff1e 	bx	lr

00013434 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>:
   13434:	e6ef1071 	uxtb	r1, r1
   13438:	e92d4070 	push	{r4, r5, r6, lr}
   1343c:	e2414021 	sub	r4, r1, #33	; 0x21
   13440:	e35400de 	cmp	r4, #222	; 0xde
   13444:	8a00000e 	bhi	13484 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x50>
   13448:	e1a06003 	mov	r6, r3
   1344c:	e5903000 	ldr	r3, [r0]
   13450:	e1a05002 	mov	r5, r2
   13454:	e1530002 	cmp	r3, r2
   13458:	9a00000b 	bls	1348c <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x58>
   1345c:	e356000f 	cmp	r6, #15
   13460:	8a000007 	bhi	13484 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x50>
   13464:	e3a02080 	mov	r2, #128	; 0x80
   13468:	e59f1038 	ldr	r1, [pc, #56]	; 134a8 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x74>
   1346c:	e0814204 	add	r4, r1, r4, lsl #4
   13470:	e7d43006 	ldrb	r3, [r4, r6]
   13474:	e0133552 	ands	r3, r3, r2, asr r5
   13478:	13a00001 	movne	r0, #1
   1347c:	03a00000 	moveq	r0, #0
   13480:	e8bd8070 	pop	{r4, r5, r6, pc}
   13484:	e3a00000 	mov	r0, #0
   13488:	e8bd8070 	pop	{r4, r5, r6, pc}
   1348c:	e3a0204e 	mov	r2, #78	; 0x4e
   13490:	e59f1014 	ldr	r1, [pc, #20]	; 134ac <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x78>
   13494:	e59f0014 	ldr	r0, [pc, #20]	; 134b0 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x7c>
   13498:	ebffdd7f 	bl	aa9c <assertion_failed>
   1349c:	e356000f 	cmp	r6, #15
   134a0:	9affffef 	bls	13464 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x30>
   134a4:	eafffff6 	b	13484 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x50>
   134a8:	00015478 	.word	0x00015478
   134ac:	00016268 	.word	0x00016268
   134b0:	0001627c 	.word	0x0001627c
   134b4:	00000000 	.word	0x00000000

000134b8 <DelayLoop>:
   134b8:	e2500001 	subs	r0, r0, #1
   134bc:	8afffffd 	bhi	134b8 <DelayLoop>
   134c0:	e1a0f00e 	mov	pc, lr

000134c4 <CGPIOManager::CGPIOManager(CInterruptSystem*)>:
   134c4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   134c8:	e3a0e000 	mov	lr, #0
   134cc:	e1a03000 	mov	r3, r0
   134d0:	e1a0c00e 	mov	ip, lr
   134d4:	e5801000 	str	r1, [r0]
   134d8:	e28020dc 	add	r2, r0, #220	; 0xdc
   134dc:	e5e3e004 	strb	lr, [r3, #4]!
   134e0:	e5a3c004 	str	ip, [r3, #4]!
   134e4:	e1530002 	cmp	r3, r2
   134e8:	1afffffc 	bne	134e0 <CGPIOManager::CGPIOManager(CInterruptSystem*)+0x1c>
   134ec:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

000134f0 <CGPIOManager::~CGPIOManager()>:
   134f0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   134f4:	e1a09000 	mov	r9, r0
   134f8:	e3a0802c 	mov	r8, #44	; 0x2c
   134fc:	e59f706c 	ldr	r7, [pc, #108]	; 13570 <CGPIOManager::~CGPIOManager()+0x80>
   13500:	e59f606c 	ldr	r6, [pc, #108]	; 13574 <CGPIOManager::~CGPIOManager()+0x84>
   13504:	e2804004 	add	r4, r0, #4
   13508:	e28050dc 	add	r5, r0, #220	; 0xdc
   1350c:	e5b43004 	ldr	r3, [r4, #4]!
   13510:	e3530000 	cmp	r3, #0
   13514:	0a000003 	beq	13528 <CGPIOManager::~CGPIOManager()+0x38>
   13518:	e1a02008 	mov	r2, r8
   1351c:	e1a01007 	mov	r1, r7
   13520:	e1a00006 	mov	r0, r6
   13524:	ebffdd5c 	bl	aa9c <assertion_failed>
   13528:	e1540005 	cmp	r4, r5
   1352c:	1afffff6 	bne	1350c <CGPIOManager::~CGPIOManager()+0x1c>
   13530:	e5d93004 	ldrb	r3, [r9, #4]
   13534:	e3530000 	cmp	r3, #0
   13538:	0a000004 	beq	13550 <CGPIOManager::~CGPIOManager()+0x60>
   1353c:	e5990000 	ldr	r0, [r9]
   13540:	e3500000 	cmp	r0, #0
   13544:	0a000003 	beq	13558 <CGPIOManager::~CGPIOManager()+0x68>
   13548:	e3a01034 	mov	r1, #52	; 0x34
   1354c:	ebffe41d 	bl	c5c8 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   13550:	e1a00009 	mov	r0, r9
   13554:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13558:	e59f0018 	ldr	r0, [pc, #24]	; 13578 <CGPIOManager::~CGPIOManager()+0x88>
   1355c:	e3a02032 	mov	r2, #50	; 0x32
   13560:	e59f1008 	ldr	r1, [pc, #8]	; 13570 <CGPIOManager::~CGPIOManager()+0x80>
   13564:	ebffdd4c 	bl	aa9c <assertion_failed>
   13568:	e5990000 	ldr	r0, [r9]
   1356c:	eafffff5 	b	13548 <CGPIOManager::~CGPIOManager()+0x58>
   13570:	00016294 	.word	0x00016294
   13574:	000162a4 	.word	0x000162a4
   13578:	000162b8 	.word	0x000162b8

0001357c <CGPIOManager::Initialize()>:
   1357c:	e5d03004 	ldrb	r3, [r0, #4]
   13580:	e92d4010 	push	{r4, lr}
   13584:	e3530000 	cmp	r3, #0
   13588:	e1a04000 	mov	r4, r0
   1358c:	1a000009 	bne	135b8 <CGPIOManager::Initialize()+0x3c>
   13590:	e5940000 	ldr	r0, [r4]
   13594:	e3500000 	cmp	r0, #0
   13598:	0a00000d 	beq	135d4 <CGPIOManager::Initialize()+0x58>
   1359c:	e1a03004 	mov	r3, r4
   135a0:	e59f2044 	ldr	r2, [pc, #68]	; 135ec <CGPIOManager::Initialize()+0x70>
   135a4:	e3a01034 	mov	r1, #52	; 0x34
   135a8:	ebffe3cb 	bl	c4dc <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   135ac:	e3a00001 	mov	r0, #1
   135b0:	e5c40004 	strb	r0, [r4, #4]
   135b4:	e8bd8010 	pop	{r4, pc}
   135b8:	e59f0030 	ldr	r0, [pc, #48]	; 135f0 <CGPIOManager::Initialize()+0x74>
   135bc:	e3a0203b 	mov	r2, #59	; 0x3b
   135c0:	e59f102c 	ldr	r1, [pc, #44]	; 135f4 <CGPIOManager::Initialize()+0x78>
   135c4:	ebffdd34 	bl	aa9c <assertion_failed>
   135c8:	e5940000 	ldr	r0, [r4]
   135cc:	e3500000 	cmp	r0, #0
   135d0:	1afffff1 	bne	1359c <CGPIOManager::Initialize()+0x20>
   135d4:	e59f001c 	ldr	r0, [pc, #28]	; 135f8 <CGPIOManager::Initialize()+0x7c>
   135d8:	e3a0203c 	mov	r2, #60	; 0x3c
   135dc:	e59f1010 	ldr	r1, [pc, #16]	; 135f4 <CGPIOManager::Initialize()+0x78>
   135e0:	ebffdd2d 	bl	aa9c <assertion_failed>
   135e4:	e5940000 	ldr	r0, [r4]
   135e8:	eaffffeb 	b	1359c <CGPIOManager::Initialize()+0x20>
   135ec:	0001380c 	.word	0x0001380c
   135f0:	000162cc 	.word	0x000162cc
   135f4:	00016294 	.word	0x00016294
   135f8:	000162b8 	.word	0x000162b8

000135fc <CGPIOManager::ConnectInterrupt(CGPIOPin*)>:
   135fc:	e5d03004 	ldrb	r3, [r0, #4]
   13600:	e92d4070 	push	{r4, r5, r6, lr}
   13604:	e3530000 	cmp	r3, #0
   13608:	e1a04000 	mov	r4, r0
   1360c:	e1a05001 	mov	r5, r1
   13610:	0a00000e 	beq	13650 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x54>
   13614:	e3550000 	cmp	r5, #0
   13618:	0a000016 	beq	13678 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x7c>
   1361c:	e5956004 	ldr	r6, [r5, #4]
   13620:	e3560035 	cmp	r6, #53	; 0x35
   13624:	8a00000e 	bhi	13664 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x68>
   13628:	e0844106 	add	r4, r4, r6, lsl #2
   1362c:	e5943008 	ldr	r3, [r4, #8]
   13630:	e3530000 	cmp	r3, #0
   13634:	0a000003 	beq	13648 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x4c>
   13638:	e3a0204b 	mov	r2, #75	; 0x4b
   1363c:	e59f1048 	ldr	r1, [pc, #72]	; 1368c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x90>
   13640:	e59f0048 	ldr	r0, [pc, #72]	; 13690 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x94>
   13644:	ebffdd14 	bl	aa9c <assertion_failed>
   13648:	e5845008 	str	r5, [r4, #8]
   1364c:	e8bd8070 	pop	{r4, r5, r6, pc}
   13650:	e3a02045 	mov	r2, #69	; 0x45
   13654:	e59f1030 	ldr	r1, [pc, #48]	; 1368c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x90>
   13658:	e59f0034 	ldr	r0, [pc, #52]	; 13694 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x98>
   1365c:	ebffdd0e 	bl	aa9c <assertion_failed>
   13660:	eaffffeb 	b	13614 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x18>
   13664:	e3a02049 	mov	r2, #73	; 0x49
   13668:	e59f101c 	ldr	r1, [pc, #28]	; 1368c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x90>
   1366c:	e59f0024 	ldr	r0, [pc, #36]	; 13698 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x9c>
   13670:	ebffdd09 	bl	aa9c <assertion_failed>
   13674:	eaffffeb 	b	13628 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x2c>
   13678:	e3a02047 	mov	r2, #71	; 0x47
   1367c:	e59f1008 	ldr	r1, [pc, #8]	; 1368c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x90>
   13680:	e59f0014 	ldr	r0, [pc, #20]	; 1369c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0xa0>
   13684:	ebffdd04 	bl	aa9c <assertion_failed>
   13688:	eaffffe3 	b	1361c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x20>
   1368c:	00016294 	.word	0x00016294
   13690:	000162a4 	.word	0x000162a4
   13694:	000162e0 	.word	0x000162e0
   13698:	00014b9c 	.word	0x00014b9c
   1369c:	000162f0 	.word	0x000162f0

000136a0 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>:
   136a0:	e5d03004 	ldrb	r3, [r0, #4]
   136a4:	e92d4070 	push	{r4, r5, r6, lr}
   136a8:	e3530000 	cmp	r3, #0
   136ac:	e1a04000 	mov	r4, r0
   136b0:	e1a05001 	mov	r5, r1
   136b4:	0a00000b 	beq	136e8 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x48>
   136b8:	e3550000 	cmp	r5, #0
   136bc:	0a00001b 	beq	13730 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x90>
   136c0:	e5955004 	ldr	r5, [r5, #4]
   136c4:	e3550035 	cmp	r5, #53	; 0x35
   136c8:	8a00000b 	bhi	136fc <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x5c>
   136cc:	e0844105 	add	r4, r4, r5, lsl #2
   136d0:	e5943008 	ldr	r3, [r4, #8]
   136d4:	e3530000 	cmp	r3, #0
   136d8:	0a00000f 	beq	1371c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x7c>
   136dc:	e3a03000 	mov	r3, #0
   136e0:	e5843008 	str	r3, [r4, #8]
   136e4:	e8bd8070 	pop	{r4, r5, r6, pc}
   136e8:	e3a02052 	mov	r2, #82	; 0x52
   136ec:	e59f1050 	ldr	r1, [pc, #80]	; 13744 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xa4>
   136f0:	e59f0050 	ldr	r0, [pc, #80]	; 13748 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xa8>
   136f4:	ebffdce8 	bl	aa9c <assertion_failed>
   136f8:	eaffffee 	b	136b8 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x18>
   136fc:	e3a02056 	mov	r2, #86	; 0x56
   13700:	e59f103c 	ldr	r1, [pc, #60]	; 13744 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xa4>
   13704:	e59f0040 	ldr	r0, [pc, #64]	; 1374c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xac>
   13708:	e0844105 	add	r4, r4, r5, lsl #2
   1370c:	ebffdce2 	bl	aa9c <assertion_failed>
   13710:	e5943008 	ldr	r3, [r4, #8]
   13714:	e3530000 	cmp	r3, #0
   13718:	1affffef 	bne	136dc <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x3c>
   1371c:	e3a02058 	mov	r2, #88	; 0x58
   13720:	e59f101c 	ldr	r1, [pc, #28]	; 13744 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xa4>
   13724:	e59f0024 	ldr	r0, [pc, #36]	; 13750 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xb0>
   13728:	ebffdcdb 	bl	aa9c <assertion_failed>
   1372c:	eaffffea 	b	136dc <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x3c>
   13730:	e3a02054 	mov	r2, #84	; 0x54
   13734:	e59f1008 	ldr	r1, [pc, #8]	; 13744 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xa4>
   13738:	e59f0014 	ldr	r0, [pc, #20]	; 13754 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xb4>
   1373c:	ebffdcd6 	bl	aa9c <assertion_failed>
   13740:	eaffffde 	b	136c0 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x20>
   13744:	00016294 	.word	0x00016294
   13748:	000162e0 	.word	0x000162e0
   1374c:	00014b9c 	.word	0x00014b9c
   13750:	000162fc 	.word	0x000162fc
   13754:	000162f0 	.word	0x000162f0

00013758 <CGPIOManager::InterruptHandler()>:
   13758:	e5d03004 	ldrb	r3, [r0, #4]
   1375c:	e92d4070 	push	{r4, r5, r6, lr}
   13760:	e3530000 	cmp	r3, #0
   13764:	e1a05000 	mov	r5, r0
   13768:	0a00001b 	beq	137dc <CGPIOManager::InterruptHandler()+0x84>
   1376c:	e3a04000 	mov	r4, #0
   13770:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   13774:	e59f2080 	ldr	r2, [pc, #128]	; 137fc <CGPIOManager::InterruptHandler()+0xa4>
   13778:	e5923040 	ldr	r3, [r2, #64]	; 0x40
   1377c:	ea000005 	b	13798 <CGPIOManager::InterruptHandler()+0x40>
   13780:	e2844001 	add	r4, r4, #1
   13784:	e314001f 	tst	r4, #31
   13788:	11a030a3 	lsrne	r3, r3, #1
   1378c:	05923044 	ldreq	r3, [r2, #68]	; 0x44
   13790:	e3540036 	cmp	r4, #54	; 0x36
   13794:	0a00000d 	beq	137d0 <CGPIOManager::InterruptHandler()+0x78>
   13798:	e3130001 	tst	r3, #1
   1379c:	0afffff7 	beq	13780 <CGPIOManager::InterruptHandler()+0x28>
   137a0:	e3a03001 	mov	r3, #1
   137a4:	e2842002 	add	r2, r4, #2
   137a8:	e7950102 	ldr	r0, [r5, r2, lsl #2]
   137ac:	e204501f 	and	r5, r4, #31
   137b0:	e3500000 	cmp	r0, #0
   137b4:	e1a05513 	lsl	r5, r3, r5
   137b8:	0a00000c 	beq	137f0 <CGPIOManager::InterruptHandler()+0x98>
   137bc:	ebffe278 	bl	c1a4 <CGPIOPin::InterruptHandler()>
   137c0:	e59f3038 	ldr	r3, [pc, #56]	; 13800 <CGPIOManager::InterruptHandler()+0xa8>
   137c4:	e08342a4 	add	r4, r3, r4, lsr #5
   137c8:	e1a04104 	lsl	r4, r4, #2
   137cc:	e5845000 	str	r5, [r4]
   137d0:	e3a03000 	mov	r3, #0
   137d4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   137d8:	e8bd8070 	pop	{r4, r5, r6, pc}
   137dc:	e3a0205e 	mov	r2, #94	; 0x5e
   137e0:	e59f101c 	ldr	r1, [pc, #28]	; 13804 <CGPIOManager::InterruptHandler()+0xac>
   137e4:	e59f001c 	ldr	r0, [pc, #28]	; 13808 <CGPIOManager::InterruptHandler()+0xb0>
   137e8:	ebffdcab 	bl	aa9c <assertion_failed>
   137ec:	eaffffde 	b	1376c <CGPIOManager::InterruptHandler()+0x14>
   137f0:	e1a00004 	mov	r0, r4
   137f4:	ebffe297 	bl	c258 <CGPIOPin::DisableAllInterrupts(unsigned int)>
   137f8:	eafffff0 	b	137c0 <CGPIOManager::InterruptHandler()+0x68>
   137fc:	20200000 	.word	0x20200000
   13800:	08080010 	.word	0x08080010
   13804:	00016294 	.word	0x00016294
   13808:	000162e0 	.word	0x000162e0

0001380c <CGPIOManager::InterruptStub(void*)>:
   1380c:	e92d4010 	push	{r4, lr}
   13810:	e2504000 	subs	r4, r0, #0
   13814:	0a000002 	beq	13824 <CGPIOManager::InterruptStub(void*)+0x18>
   13818:	e1a00004 	mov	r0, r4
   1381c:	e8bd4010 	pop	{r4, lr}
   13820:	eaffffcc 	b	13758 <CGPIOManager::InterruptHandler()>
   13824:	e59f0014 	ldr	r0, [pc, #20]	; 13840 <CGPIOManager::InterruptStub(void*)+0x34>
   13828:	e3a0208a 	mov	r2, #138	; 0x8a
   1382c:	e59f1010 	ldr	r1, [pc, #16]	; 13844 <CGPIOManager::InterruptStub(void*)+0x38>
   13830:	ebffdc99 	bl	aa9c <assertion_failed>
   13834:	e1a00004 	mov	r0, r4
   13838:	e8bd4010 	pop	{r4, lr}
   1383c:	eaffffc5 	b	13758 <CGPIOManager::InterruptHandler()>
   13840:	00016310 	.word	0x00016310
   13844:	00016294 	.word	0x00016294

00013848 <CPtrList::CPtrList()>:
   13848:	e3a02000 	mov	r2, #0
   1384c:	e5802000 	str	r2, [r0]
   13850:	e12fff1e 	bx	lr

00013854 <CPtrList::~CPtrList()>:
   13854:	e5903000 	ldr	r3, [r0]
   13858:	e92d4010 	push	{r4, lr}
   1385c:	e3530000 	cmp	r3, #0
   13860:	e1a04000 	mov	r4, r0
   13864:	0a000003 	beq	13878 <CPtrList::~CPtrList()+0x24>
   13868:	e3a0202a 	mov	r2, #42	; 0x2a
   1386c:	e59f100c 	ldr	r1, [pc, #12]	; 13880 <CPtrList::~CPtrList()+0x2c>
   13870:	e59f000c 	ldr	r0, [pc, #12]	; 13884 <CPtrList::~CPtrList()+0x30>
   13874:	ebffdc88 	bl	aa9c <assertion_failed>
   13878:	e1a00004 	mov	r0, r4
   1387c:	e8bd8010 	pop	{r4, pc}
   13880:	0001631c 	.word	0x0001631c
   13884:	00016328 	.word	0x00016328

00013888 <CPtrList::GetFirst()>:
   13888:	e5900000 	ldr	r0, [r0]
   1388c:	e12fff1e 	bx	lr

00013890 <CPtrList::GetNext(TPtrListElement*)>:
   13890:	e92d4010 	push	{r4, lr}
   13894:	e2514000 	subs	r4, r1, #0
   13898:	0a000009 	beq	138c4 <CPtrList::GetNext(TPtrListElement*)+0x34>
   1389c:	e59f3034 	ldr	r3, [pc, #52]	; 138d8 <CPtrList::GetNext(TPtrListElement*)+0x48>
   138a0:	e5942000 	ldr	r2, [r4]
   138a4:	e1520003 	cmp	r2, r3
   138a8:	0a000003 	beq	138bc <CPtrList::GetNext(TPtrListElement*)+0x2c>
   138ac:	e3a02035 	mov	r2, #53	; 0x35
   138b0:	e59f1024 	ldr	r1, [pc, #36]	; 138dc <CPtrList::GetNext(TPtrListElement*)+0x4c>
   138b4:	e59f0024 	ldr	r0, [pc, #36]	; 138e0 <CPtrList::GetNext(TPtrListElement*)+0x50>
   138b8:	ebffdc77 	bl	aa9c <assertion_failed>
   138bc:	e5940008 	ldr	r0, [r4, #8]
   138c0:	e8bd8010 	pop	{r4, pc}
   138c4:	e3a02034 	mov	r2, #52	; 0x34
   138c8:	e59f100c 	ldr	r1, [pc, #12]	; 138dc <CPtrList::GetNext(TPtrListElement*)+0x4c>
   138cc:	e59f0010 	ldr	r0, [pc, #16]	; 138e4 <CPtrList::GetNext(TPtrListElement*)+0x54>
   138d0:	ebffdc71 	bl	aa9c <assertion_failed>
   138d4:	eafffff0 	b	1389c <CPtrList::GetNext(TPtrListElement*)+0xc>
   138d8:	504c4d43 	.word	0x504c4d43
   138dc:	0001631c 	.word	0x0001631c
   138e0:	00016348 	.word	0x00016348
   138e4:	00016338 	.word	0x00016338

000138e8 <CPtrList::GetPtr(TPtrListElement*)>:
   138e8:	e92d4010 	push	{r4, lr}
   138ec:	e2514000 	subs	r4, r1, #0
   138f0:	0a000009 	beq	1391c <CPtrList::GetPtr(TPtrListElement*)+0x34>
   138f4:	e59f3034 	ldr	r3, [pc, #52]	; 13930 <CPtrList::GetPtr(TPtrListElement*)+0x48>
   138f8:	e5942000 	ldr	r2, [r4]
   138fc:	e1520003 	cmp	r2, r3
   13900:	0a000003 	beq	13914 <CPtrList::GetPtr(TPtrListElement*)+0x2c>
   13904:	e3a0203d 	mov	r2, #61	; 0x3d
   13908:	e59f1024 	ldr	r1, [pc, #36]	; 13934 <CPtrList::GetPtr(TPtrListElement*)+0x4c>
   1390c:	e59f0024 	ldr	r0, [pc, #36]	; 13938 <CPtrList::GetPtr(TPtrListElement*)+0x50>
   13910:	ebffdc61 	bl	aa9c <assertion_failed>
   13914:	e594000c 	ldr	r0, [r4, #12]
   13918:	e8bd8010 	pop	{r4, pc}
   1391c:	e3a0203c 	mov	r2, #60	; 0x3c
   13920:	e59f100c 	ldr	r1, [pc, #12]	; 13934 <CPtrList::GetPtr(TPtrListElement*)+0x4c>
   13924:	e59f0010 	ldr	r0, [pc, #16]	; 1393c <CPtrList::GetPtr(TPtrListElement*)+0x54>
   13928:	ebffdc5b 	bl	aa9c <assertion_failed>
   1392c:	eafffff0 	b	138f4 <CPtrList::GetPtr(TPtrListElement*)+0xc>
   13930:	504c4d43 	.word	0x504c4d43
   13934:	0001631c 	.word	0x0001631c
   13938:	00016348 	.word	0x00016348
   1393c:	00016338 	.word	0x00016338

00013940 <CPtrList::InsertBefore(TPtrListElement*, void*)>:
   13940:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   13944:	e1a06000 	mov	r6, r0
   13948:	e3a00010 	mov	r0, #16
   1394c:	e1a07002 	mov	r7, r2
   13950:	e1a04001 	mov	r4, r1
   13954:	ebfffb9c 	bl	127cc <operator new(unsigned int)>
   13958:	e5962000 	ldr	r2, [r6]
   1395c:	e59f30c8 	ldr	r3, [pc, #200]	; 13a2c <CPtrList::InsertBefore(TPtrListElement*, void*)+0xec>
   13960:	e3520000 	cmp	r2, #0
   13964:	e1a05000 	mov	r5, r0
   13968:	e580700c 	str	r7, [r0, #12]
   1396c:	e5803000 	str	r3, [r0]
   13970:	0a000023 	beq	13a04 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xc4>
   13974:	e3540000 	cmp	r4, #0
   13978:	0a000026 	beq	13a18 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd8>
   1397c:	e59f30a8 	ldr	r3, [pc, #168]	; 13a2c <CPtrList::InsertBefore(TPtrListElement*, void*)+0xec>
   13980:	e5942000 	ldr	r2, [r4]
   13984:	e1520003 	cmp	r2, r3
   13988:	0a000003 	beq	1399c <CPtrList::InsertBefore(TPtrListElement*, void*)+0x5c>
   1398c:	e3a0204e 	mov	r2, #78	; 0x4e
   13990:	e59f1098 	ldr	r1, [pc, #152]	; 13a30 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf0>
   13994:	e59f0098 	ldr	r0, [pc, #152]	; 13a34 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf4>
   13998:	ebffdc3f 	bl	aa9c <assertion_failed>
   1399c:	e5963000 	ldr	r3, [r6]
   139a0:	e1540003 	cmp	r4, r3
   139a4:	0a000010 	beq	139ec <CPtrList::InsertBefore(TPtrListElement*, void*)+0xac>
   139a8:	e5943004 	ldr	r3, [r4, #4]
   139ac:	e5854008 	str	r4, [r5, #8]
   139b0:	e3530000 	cmp	r3, #0
   139b4:	e5853004 	str	r3, [r5, #4]
   139b8:	0a000009 	beq	139e4 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xa4>
   139bc:	e59f2068 	ldr	r2, [pc, #104]	; 13a2c <CPtrList::InsertBefore(TPtrListElement*, void*)+0xec>
   139c0:	e5931000 	ldr	r1, [r3]
   139c4:	e1510002 	cmp	r1, r2
   139c8:	0a000004 	beq	139e0 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xa0>
   139cc:	e3a02060 	mov	r2, #96	; 0x60
   139d0:	e59f1058 	ldr	r1, [pc, #88]	; 13a30 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf0>
   139d4:	e59f005c 	ldr	r0, [pc, #92]	; 13a38 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf8>
   139d8:	ebffdc2f 	bl	aa9c <assertion_failed>
   139dc:	e5943004 	ldr	r3, [r4, #4]
   139e0:	e5835008 	str	r5, [r3, #8]
   139e4:	e5845004 	str	r5, [r4, #4]
   139e8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   139ec:	e3a03000 	mov	r3, #0
   139f0:	e5845004 	str	r5, [r4, #4]
   139f4:	e5854008 	str	r4, [r5, #8]
   139f8:	e5865000 	str	r5, [r6]
   139fc:	e5853004 	str	r3, [r5, #4]
   13a00:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   13a04:	e3a0204c 	mov	r2, #76	; 0x4c
   13a08:	e59f1020 	ldr	r1, [pc, #32]	; 13a30 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf0>
   13a0c:	e59f0028 	ldr	r0, [pc, #40]	; 13a3c <CPtrList::InsertBefore(TPtrListElement*, void*)+0xfc>
   13a10:	ebffdc21 	bl	aa9c <assertion_failed>
   13a14:	eaffffd6 	b	13974 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x34>
   13a18:	e3a0204d 	mov	r2, #77	; 0x4d
   13a1c:	e59f100c 	ldr	r1, [pc, #12]	; 13a30 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf0>
   13a20:	e59f0018 	ldr	r0, [pc, #24]	; 13a40 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x100>
   13a24:	ebffdc1c 	bl	aa9c <assertion_failed>
   13a28:	eaffffd3 	b	1397c <CPtrList::InsertBefore(TPtrListElement*, void*)+0x3c>
   13a2c:	504c4d43 	.word	0x504c4d43
   13a30:	0001631c 	.word	0x0001631c
   13a34:	00016388 	.word	0x00016388
   13a38:	000163ac 	.word	0x000163ac
   13a3c:	0001636c 	.word	0x0001636c
   13a40:	0001637c 	.word	0x0001637c

00013a44 <CPtrList::InsertAfter(TPtrListElement*, void*)>:
   13a44:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   13a48:	e1a06000 	mov	r6, r0
   13a4c:	e1a05001 	mov	r5, r1
   13a50:	e3a00010 	mov	r0, #16
   13a54:	e1a07002 	mov	r7, r2
   13a58:	ebfffb5b 	bl	127cc <operator new(unsigned int)>
   13a5c:	e59f30c0 	ldr	r3, [pc, #192]	; 13b24 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe0>
   13a60:	e3550000 	cmp	r5, #0
   13a64:	e5803000 	str	r3, [r0]
   13a68:	e1a04000 	mov	r4, r0
   13a6c:	e580700c 	str	r7, [r0, #12]
   13a70:	e5963000 	ldr	r3, [r6]
   13a74:	0a00001a 	beq	13ae4 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xa0>
   13a78:	e3530000 	cmp	r3, #0
   13a7c:	0a000023 	beq	13b10 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xcc>
   13a80:	e59f309c 	ldr	r3, [pc, #156]	; 13b24 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe0>
   13a84:	e5952000 	ldr	r2, [r5]
   13a88:	e1520003 	cmp	r2, r3
   13a8c:	0a000003 	beq	13aa0 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x5c>
   13a90:	e3a0207e 	mov	r2, #126	; 0x7e
   13a94:	e59f108c 	ldr	r1, [pc, #140]	; 13b28 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe4>
   13a98:	e59f008c 	ldr	r0, [pc, #140]	; 13b2c <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe8>
   13a9c:	ebffdbfe 	bl	aa9c <assertion_failed>
   13aa0:	e5953008 	ldr	r3, [r5, #8]
   13aa4:	e5845004 	str	r5, [r4, #4]
   13aa8:	e3530000 	cmp	r3, #0
   13aac:	e5843008 	str	r3, [r4, #8]
   13ab0:	0a000009 	beq	13adc <CPtrList::InsertAfter(TPtrListElement*, void*)+0x98>
   13ab4:	e59f2068 	ldr	r2, [pc, #104]	; 13b24 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe0>
   13ab8:	e5931000 	ldr	r1, [r3]
   13abc:	e1510002 	cmp	r1, r2
   13ac0:	0a000004 	beq	13ad8 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x94>
   13ac4:	e3a02085 	mov	r2, #133	; 0x85
   13ac8:	e59f1058 	ldr	r1, [pc, #88]	; 13b28 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe4>
   13acc:	e59f005c 	ldr	r0, [pc, #92]	; 13b30 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xec>
   13ad0:	ebffdbf1 	bl	aa9c <assertion_failed>
   13ad4:	e5953008 	ldr	r3, [r5, #8]
   13ad8:	e5834004 	str	r4, [r3, #4]
   13adc:	e5854008 	str	r4, [r5, #8]
   13ae0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   13ae4:	e3530000 	cmp	r3, #0
   13ae8:	0a000003 	beq	13afc <CPtrList::InsertAfter(TPtrListElement*, void*)+0xb8>
   13aec:	e3a02074 	mov	r2, #116	; 0x74
   13af0:	e59f1030 	ldr	r1, [pc, #48]	; 13b28 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe4>
   13af4:	e59f0038 	ldr	r0, [pc, #56]	; 13b34 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xf0>
   13af8:	ebffdbe7 	bl	aa9c <assertion_failed>
   13afc:	e3a03000 	mov	r3, #0
   13b00:	e5864000 	str	r4, [r6]
   13b04:	e5843004 	str	r3, [r4, #4]
   13b08:	e5843008 	str	r3, [r4, #8]
   13b0c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   13b10:	e3a0207d 	mov	r2, #125	; 0x7d
   13b14:	e59f100c 	ldr	r1, [pc, #12]	; 13b28 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe4>
   13b18:	e59f0018 	ldr	r0, [pc, #24]	; 13b38 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xf4>
   13b1c:	ebffdbde 	bl	aa9c <assertion_failed>
   13b20:	eaffffd6 	b	13a80 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x3c>
   13b24:	504c4d43 	.word	0x504c4d43
   13b28:	0001631c 	.word	0x0001631c
   13b2c:	000163d4 	.word	0x000163d4
   13b30:	000163f8 	.word	0x000163f8
   13b34:	00016328 	.word	0x00016328
   13b38:	0001636c 	.word	0x0001636c

00013b3c <CPtrList::Remove(TPtrListElement*)>:
   13b3c:	e92d4070 	push	{r4, r5, r6, lr}
   13b40:	e2514000 	subs	r4, r1, #0
   13b44:	e1a05000 	mov	r5, r0
   13b48:	0a00003c 	beq	13c40 <CPtrList::Remove(TPtrListElement*)+0x104>
   13b4c:	e59f3118 	ldr	r3, [pc, #280]	; 13c6c <CPtrList::Remove(TPtrListElement*)+0x130>
   13b50:	e5942000 	ldr	r2, [r4]
   13b54:	e1520003 	cmp	r2, r3
   13b58:	0a000003 	beq	13b6c <CPtrList::Remove(TPtrListElement*)+0x30>
   13b5c:	e3a02090 	mov	r2, #144	; 0x90
   13b60:	e59f1108 	ldr	r1, [pc, #264]	; 13c70 <CPtrList::Remove(TPtrListElement*)+0x134>
   13b64:	e59f0108 	ldr	r0, [pc, #264]	; 13c74 <CPtrList::Remove(TPtrListElement*)+0x138>
   13b68:	ebffdbcb 	bl	aa9c <assertion_failed>
   13b6c:	e5953000 	ldr	r3, [r5]
   13b70:	e1540003 	cmp	r4, r3
   13b74:	0a000021 	beq	13c00 <CPtrList::Remove(TPtrListElement*)+0xc4>
   13b78:	e5943004 	ldr	r3, [r4, #4]
   13b7c:	e3530000 	cmp	r3, #0
   13b80:	0a000033 	beq	13c54 <CPtrList::Remove(TPtrListElement*)+0x118>
   13b84:	e59f20e0 	ldr	r2, [pc, #224]	; 13c6c <CPtrList::Remove(TPtrListElement*)+0x130>
   13b88:	e5931000 	ldr	r1, [r3]
   13b8c:	e1510002 	cmp	r1, r2
   13b90:	0a000004 	beq	13ba8 <CPtrList::Remove(TPtrListElement*)+0x6c>
   13b94:	e3a0209f 	mov	r2, #159	; 0x9f
   13b98:	e59f10d0 	ldr	r1, [pc, #208]	; 13c70 <CPtrList::Remove(TPtrListElement*)+0x134>
   13b9c:	e59f00d4 	ldr	r0, [pc, #212]	; 13c78 <CPtrList::Remove(TPtrListElement*)+0x13c>
   13ba0:	ebffdbbd 	bl	aa9c <assertion_failed>
   13ba4:	e5943004 	ldr	r3, [r4, #4]
   13ba8:	e5942008 	ldr	r2, [r4, #8]
   13bac:	e5832008 	str	r2, [r3, #8]
   13bb0:	e5942008 	ldr	r2, [r4, #8]
   13bb4:	e3520000 	cmp	r2, #0
   13bb8:	0a00000a 	beq	13be8 <CPtrList::Remove(TPtrListElement*)+0xac>
   13bbc:	e59f10a8 	ldr	r1, [pc, #168]	; 13c6c <CPtrList::Remove(TPtrListElement*)+0x130>
   13bc0:	e5920000 	ldr	r0, [r2]
   13bc4:	e1500001 	cmp	r0, r1
   13bc8:	0a000005 	beq	13be4 <CPtrList::Remove(TPtrListElement*)+0xa8>
   13bcc:	e3a020a4 	mov	r2, #164	; 0xa4
   13bd0:	e59f1098 	ldr	r1, [pc, #152]	; 13c70 <CPtrList::Remove(TPtrListElement*)+0x134>
   13bd4:	e59f00a0 	ldr	r0, [pc, #160]	; 13c7c <CPtrList::Remove(TPtrListElement*)+0x140>
   13bd8:	ebffdbaf 	bl	aa9c <assertion_failed>
   13bdc:	e5942008 	ldr	r2, [r4, #8]
   13be0:	e5943004 	ldr	r3, [r4, #4]
   13be4:	e5823004 	str	r3, [r2, #4]
   13be8:	e3a03000 	mov	r3, #0
   13bec:	e1a00004 	mov	r0, r4
   13bf0:	e5843000 	str	r3, [r4]
   13bf4:	e3a01010 	mov	r1, #16
   13bf8:	e8bd4070 	pop	{r4, r5, r6, lr}
   13bfc:	eafffaf6 	b	127dc <operator delete(void*, unsigned int)>
   13c00:	e5943008 	ldr	r3, [r4, #8]
   13c04:	e3530000 	cmp	r3, #0
   13c08:	e5853000 	str	r3, [r5]
   13c0c:	0afffff5 	beq	13be8 <CPtrList::Remove(TPtrListElement*)+0xac>
   13c10:	e59f2054 	ldr	r2, [pc, #84]	; 13c6c <CPtrList::Remove(TPtrListElement*)+0x130>
   13c14:	e5931000 	ldr	r1, [r3]
   13c18:	e1510002 	cmp	r1, r2
   13c1c:	0a000004 	beq	13c34 <CPtrList::Remove(TPtrListElement*)+0xf8>
   13c20:	e3a02098 	mov	r2, #152	; 0x98
   13c24:	e59f1044 	ldr	r1, [pc, #68]	; 13c70 <CPtrList::Remove(TPtrListElement*)+0x134>
   13c28:	e59f004c 	ldr	r0, [pc, #76]	; 13c7c <CPtrList::Remove(TPtrListElement*)+0x140>
   13c2c:	ebffdb9a 	bl	aa9c <assertion_failed>
   13c30:	e5943008 	ldr	r3, [r4, #8]
   13c34:	e3a02000 	mov	r2, #0
   13c38:	e5832004 	str	r2, [r3, #4]
   13c3c:	eaffffe9 	b	13be8 <CPtrList::Remove(TPtrListElement*)+0xac>
   13c40:	e3a0208f 	mov	r2, #143	; 0x8f
   13c44:	e59f1024 	ldr	r1, [pc, #36]	; 13c70 <CPtrList::Remove(TPtrListElement*)+0x134>
   13c48:	e59f0030 	ldr	r0, [pc, #48]	; 13c80 <CPtrList::Remove(TPtrListElement*)+0x144>
   13c4c:	ebffdb92 	bl	aa9c <assertion_failed>
   13c50:	eaffffbd 	b	13b4c <CPtrList::Remove(TPtrListElement*)+0x10>
   13c54:	e3a0209e 	mov	r2, #158	; 0x9e
   13c58:	e59f1010 	ldr	r1, [pc, #16]	; 13c70 <CPtrList::Remove(TPtrListElement*)+0x134>
   13c5c:	e59f0020 	ldr	r0, [pc, #32]	; 13c84 <CPtrList::Remove(TPtrListElement*)+0x148>
   13c60:	ebffdb8d 	bl	aa9c <assertion_failed>
   13c64:	e5943004 	ldr	r3, [r4, #4]
   13c68:	eaffffc5 	b	13b84 <CPtrList::Remove(TPtrListElement*)+0x48>
   13c6c:	504c4d43 	.word	0x504c4d43
   13c70:	0001631c 	.word	0x0001631c
   13c74:	00016348 	.word	0x00016348
   13c78:	00016468 	.word	0x00016468
   13c7c:	00016424 	.word	0x00016424
   13c80:	00016338 	.word	0x00016338
   13c84:	00016450 	.word	0x00016450

00013c88 <CPtrList::Find(void*)>:
   13c88:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13c8c:	e5904000 	ldr	r4, [r0]
   13c90:	e3540000 	cmp	r4, #0
   13c94:	0a000014 	beq	13cec <CPtrList::Find(void*)+0x64>
   13c98:	e1a05001 	mov	r5, r1
   13c9c:	e3a090b3 	mov	r9, #179	; 0xb3
   13ca0:	e59f6050 	ldr	r6, [pc, #80]	; 13cf8 <CPtrList::Find(void*)+0x70>
   13ca4:	e59f8050 	ldr	r8, [pc, #80]	; 13cfc <CPtrList::Find(void*)+0x74>
   13ca8:	e59f7050 	ldr	r7, [pc, #80]	; 13d00 <CPtrList::Find(void*)+0x78>
   13cac:	ea000002 	b	13cbc <CPtrList::Find(void*)+0x34>
   13cb0:	e5944008 	ldr	r4, [r4, #8]
   13cb4:	e3540000 	cmp	r4, #0
   13cb8:	0a00000b 	beq	13cec <CPtrList::Find(void*)+0x64>
   13cbc:	e5943000 	ldr	r3, [r4]
   13cc0:	e1530006 	cmp	r3, r6
   13cc4:	0a000003 	beq	13cd8 <CPtrList::Find(void*)+0x50>
   13cc8:	e1a02009 	mov	r2, r9
   13ccc:	e1a01008 	mov	r1, r8
   13cd0:	e1a00007 	mov	r0, r7
   13cd4:	ebffdb70 	bl	aa9c <assertion_failed>
   13cd8:	e594300c 	ldr	r3, [r4, #12]
   13cdc:	e1530005 	cmp	r3, r5
   13ce0:	1afffff2 	bne	13cb0 <CPtrList::Find(void*)+0x28>
   13ce4:	e1a00004 	mov	r0, r4
   13ce8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13cec:	e3a04000 	mov	r4, #0
   13cf0:	e1a00004 	mov	r0, r4
   13cf4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13cf8:	504c4d43 	.word	0x504c4d43
   13cfc:	0001631c 	.word	0x0001631c
   13d00:	00016348 	.word	0x00016348

00013d04 <CExceptionHandler::CExceptionHandler()>:
   13d04:	e92d4070 	push	{r4, r5, r6, lr}
   13d08:	e59f506c 	ldr	r5, [pc, #108]	; 13d7c <CExceptionHandler::CExceptionHandler()+0x78>
   13d0c:	e1a04000 	mov	r4, r0
   13d10:	e5953000 	ldr	r3, [r5]
   13d14:	e3530000 	cmp	r3, #0
   13d18:	0a000003 	beq	13d2c <CExceptionHandler::CExceptionHandler()+0x28>
   13d1c:	e3a02030 	mov	r2, #48	; 0x30
   13d20:	e59f1058 	ldr	r1, [pc, #88]	; 13d80 <CExceptionHandler::CExceptionHandler()+0x7c>
   13d24:	e59f0058 	ldr	r0, [pc, #88]	; 13d84 <CExceptionHandler::CExceptionHandler()+0x80>
   13d28:	ebffdb5b 	bl	aa9c <assertion_failed>
   13d2c:	e3a00000 	mov	r0, #0
   13d30:	e59f1050 	ldr	r1, [pc, #80]	; 13d88 <CExceptionHandler::CExceptionHandler()+0x84>
   13d34:	e59f2050 	ldr	r2, [pc, #80]	; 13d8c <CExceptionHandler::CExceptionHandler()+0x88>
   13d38:	e59f3050 	ldr	r3, [pc, #80]	; 13d90 <CExceptionHandler::CExceptionHandler()+0x8c>
   13d3c:	e1a01141 	asr	r1, r1, #2
   13d40:	e1a02142 	asr	r2, r2, #2
   13d44:	e1a03143 	asr	r3, r3, #2
   13d48:	e2411002 	sub	r1, r1, #2
   13d4c:	e2422002 	sub	r2, r2, #2
   13d50:	e2433002 	sub	r3, r3, #2
   13d54:	e38114ea 	orr	r1, r1, #-369098752	; 0xea000000
   13d58:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
   13d5c:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
   13d60:	e5854000 	str	r4, [r5]
   13d64:	e5801004 	str	r1, [r0, #4]
   13d68:	e580200c 	str	r2, [r0, #12]
   13d6c:	e5803010 	str	r3, [r0, #16]
   13d70:	ebfffa8d 	bl	127ac <SyncDataAndInstructionCache>
   13d74:	e1a00004 	mov	r0, r4
   13d78:	e8bd8070 	pop	{r4, r5, r6, pc}
   13d7c:	00016728 	.word	0x00016728
   13d80:	0001649c 	.word	0x0001649c
   13d84:	000150f8 	.word	0x000150f8
   13d88:	00012238 	.word	0x00012238
   13d8c:	00012198 	.word	0x00012198
   13d90:	000121e0 	.word	0x000121e0

00013d94 <CExceptionHandler::~CExceptionHandler()>:
   13d94:	e3a02000 	mov	r2, #0
   13d98:	e59f3004 	ldr	r3, [pc, #4]	; 13da4 <CExceptionHandler::~CExceptionHandler()+0x10>
   13d9c:	e5832000 	str	r2, [r3]
   13da0:	e12fff1e 	bx	lr
   13da4:	00016728 	.word	0x00016728

00013da8 <CExceptionHandler::Throw(unsigned int)>:
   13da8:	e92d4010 	push	{r4, lr}
   13dac:	e1a04001 	mov	r4, r1
   13db0:	e24dd008 	sub	sp, sp, #8
   13db4:	ebffe461 	bl	cf40 <CLogger::Get()>
   13db8:	e59f201c 	ldr	r2, [pc, #28]	; 13ddc <CExceptionHandler::Throw(unsigned int)+0x34>
   13dbc:	e59f301c 	ldr	r3, [pc, #28]	; 13de0 <CExceptionHandler::Throw(unsigned int)+0x38>
   13dc0:	e7921104 	ldr	r1, [r2, r4, lsl #2]
   13dc4:	e3a02000 	mov	r2, #0
   13dc8:	e58d1000 	str	r1, [sp]
   13dcc:	e59f1010 	ldr	r1, [pc, #16]	; 13de4 <CExceptionHandler::Throw(unsigned int)+0x3c>
   13dd0:	ebffe603 	bl	d5e4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13dd4:	e28dd008 	add	sp, sp, #8
   13dd8:	e8bd8010 	pop	{r4, pc}
   13ddc:	00016654 	.word	0x00016654
   13de0:	000164b4 	.word	0x000164b4
   13de4:	00016494 	.word	0x00016494

00013de8 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>:
   13de8:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   13dec:	e3510002 	cmp	r1, #2
   13df0:	e24dd024 	sub	sp, sp, #36	; 0x24
   13df4:	e1a05001 	mov	r5, r1
   13df8:	e1a04002 	mov	r4, r2
   13dfc:	0a000028 	beq	13ea4 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xbc>
   13e00:	e3510003 	cmp	r1, #3
   13e04:	0a000020 	beq	13e8c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xa4>
   13e08:	e3a08000 	mov	r8, #0
   13e0c:	e1a09008 	mov	r9, r8
   13e10:	e3540000 	cmp	r4, #0
   13e14:	0a000025 	beq	13eb0 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xc8>
   13e18:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   13e1c:	e5947048 	ldr	r7, [r4, #72]	; 0x48
   13e20:	e203301f 	and	r3, r3, #31
   13e24:	e3530011 	cmp	r3, #17
   13e28:	e5946044 	ldr	r6, [r4, #68]	; 0x44
   13e2c:	0a000019 	beq	13e98 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xb0>
   13e30:	e3530012 	cmp	r3, #18
   13e34:	089400c0 	ldmeq	r4, {r6, r7}
   13e38:	e59f1084 	ldr	r1, [pc, #132]	; 13ec4 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xdc>
   13e3c:	e1a00006 	mov	r0, r6
   13e40:	ebffdc1e 	bl	aec0 <debug_stacktrace(unsigned int const*, char const*)>
   13e44:	ebffe43d 	bl	cf40 <CLogger::Get()>
   13e48:	e59f3078 	ldr	r3, [pc, #120]	; 13ec8 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe0>
   13e4c:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
   13e50:	e7931105 	ldr	r1, [r3, r5, lsl #2]
   13e54:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   13e58:	e58d1000 	str	r1, [sp]
   13e5c:	e58d2018 	str	r2, [sp, #24]
   13e60:	e58d3004 	str	r3, [sp, #4]
   13e64:	e58d7014 	str	r7, [sp, #20]
   13e68:	e58d6010 	str	r6, [sp, #16]
   13e6c:	e58d800c 	str	r8, [sp, #12]
   13e70:	e58d9008 	str	r9, [sp, #8]
   13e74:	e59f3050 	ldr	r3, [pc, #80]	; 13ecc <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe4>
   13e78:	e3a02000 	mov	r2, #0
   13e7c:	e59f1040 	ldr	r1, [pc, #64]	; 13ec4 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xdc>
   13e80:	ebffe5d7 	bl	d5e4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13e84:	e28dd024 	add	sp, sp, #36	; 0x24
   13e88:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   13e8c:	ee159f10 	mrc	15, 0, r9, cr5, cr0, {0}
   13e90:	ee168f10 	mrc	15, 0, r8, cr6, cr0, {0}
   13e94:	eaffffdd 	b	13e10 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x28>
   13e98:	e594700c 	ldr	r7, [r4, #12]
   13e9c:	e5946008 	ldr	r6, [r4, #8]
   13ea0:	eaffffe4 	b	13e38 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x50>
   13ea4:	ee159f30 	mrc	15, 0, r9, cr5, cr0, {1}
   13ea8:	ee168f50 	mrc	15, 0, r8, cr6, cr0, {2}
   13eac:	eaffffd7 	b	13e10 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x28>
   13eb0:	e3a02069 	mov	r2, #105	; 0x69
   13eb4:	e59f1014 	ldr	r1, [pc, #20]	; 13ed0 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe8>
   13eb8:	e59f0014 	ldr	r0, [pc, #20]	; 13ed4 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xec>
   13ebc:	ebffdaf6 	bl	aa9c <assertion_failed>
   13ec0:	eaffffd4 	b	13e18 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x30>
   13ec4:	00016494 	.word	0x00016494
   13ec8:	00016654 	.word	0x00016654
   13ecc:	000164d0 	.word	0x000164d0
   13ed0:	0001649c 	.word	0x0001649c
   13ed4:	000164c4 	.word	0x000164c4

00013ed8 <CExceptionHandler::Get()>:
   13ed8:	e92d4010 	push	{r4, lr}
   13edc:	e59f4020 	ldr	r4, [pc, #32]	; 13f04 <CExceptionHandler::Get()+0x2c>
   13ee0:	e5940000 	ldr	r0, [r4]
   13ee4:	e3500000 	cmp	r0, #0
   13ee8:	18bd8010 	popne	{r4, pc}
   13eec:	e3a02087 	mov	r2, #135	; 0x87
   13ef0:	e59f1010 	ldr	r1, [pc, #16]	; 13f08 <CExceptionHandler::Get()+0x30>
   13ef4:	e59f0010 	ldr	r0, [pc, #16]	; 13f0c <CExceptionHandler::Get()+0x34>
   13ef8:	ebffdae7 	bl	aa9c <assertion_failed>
   13efc:	e5940000 	ldr	r0, [r4]
   13f00:	e8bd8010 	pop	{r4, pc}
   13f04:	00016728 	.word	0x00016728
   13f08:	0001649c 	.word	0x0001649c
   13f0c:	00014c50 	.word	0x00014c50

00013f10 <ExceptionHandler>:
   13f10:	e92d4070 	push	{r4, r5, r6, lr}
   13f14:	e3a03000 	mov	r3, #0
   13f18:	e1a05000 	mov	r5, r0
   13f1c:	e1a06001 	mov	r6, r1
   13f20:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   13f24:	ebffe20e 	bl	c764 <CInterruptSystem::DisableFIQ()>
   13f28:	f1080040 	cpsie	f
   13f2c:	e59f403c 	ldr	r4, [pc, #60]	; 13f70 <ExceptionHandler+0x60>
   13f30:	e5940000 	ldr	r0, [r4]
   13f34:	e3500000 	cmp	r0, #0
   13f38:	0a000003 	beq	13f4c <ExceptionHandler+0x3c>
   13f3c:	e1a02006 	mov	r2, r6
   13f40:	e1a01005 	mov	r1, r5
   13f44:	e8bd4070 	pop	{r4, r5, r6, lr}
   13f48:	eaffffa6 	b	13de8 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>
   13f4c:	e3a02087 	mov	r2, #135	; 0x87
   13f50:	e59f101c 	ldr	r1, [pc, #28]	; 13f74 <ExceptionHandler+0x64>
   13f54:	e59f001c 	ldr	r0, [pc, #28]	; 13f78 <ExceptionHandler+0x68>
   13f58:	ebffdacf 	bl	aa9c <assertion_failed>
   13f5c:	e5940000 	ldr	r0, [r4]
   13f60:	e1a02006 	mov	r2, r6
   13f64:	e1a01005 	mov	r1, r5
   13f68:	e8bd4070 	pop	{r4, r5, r6, lr}
   13f6c:	eaffff9d 	b	13de8 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>
   13f70:	00016728 	.word	0x00016728
   13f74:	0001649c 	.word	0x0001649c
   13f78:	00014c50 	.word	0x00014c50

00013f7c <raise>:
   13f7c:	e92d4010 	push	{r4, lr}
   13f80:	e59f4030 	ldr	r4, [pc, #48]	; 13fb8 <raise+0x3c>
   13f84:	e5940000 	ldr	r0, [r4]
   13f88:	e3500000 	cmp	r0, #0
   13f8c:	0a000003 	beq	13fa0 <raise+0x24>
   13f90:	e3a01004 	mov	r1, #4
   13f94:	ebffff83 	bl	13da8 <CExceptionHandler::Throw(unsigned int)>
   13f98:	e3a00000 	mov	r0, #0
   13f9c:	e8bd8010 	pop	{r4, pc}
   13fa0:	e59f0014 	ldr	r0, [pc, #20]	; 13fbc <raise+0x40>
   13fa4:	e3a02087 	mov	r2, #135	; 0x87
   13fa8:	e59f1010 	ldr	r1, [pc, #16]	; 13fc0 <raise+0x44>
   13fac:	ebffdaba 	bl	aa9c <assertion_failed>
   13fb0:	e5940000 	ldr	r0, [r4]
   13fb4:	eafffff5 	b	13f90 <raise+0x14>
   13fb8:	00016728 	.word	0x00016728
   13fbc:	00014c50 	.word	0x00014c50
   13fc0:	0001649c 	.word	0x0001649c
