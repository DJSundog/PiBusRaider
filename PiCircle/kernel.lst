
kernel.elf:     file format elf32-littlearm


Disassembly of section .init:

00008000 <_start>:
    8000:	e10f0000 	mrs	r0, CPSR
    8004:	e220001a 	eor	r0, r0, #26
    8008:	e310001f 	tst	r0, #31
    800c:	e3c0001f 	bic	r0, r0, #31
    8010:	e38000d3 	orr	r0, r0, #211	; 0xd3
    8014:	1a000004 	bne	802c <_start+0x2c>
    8018:	e3800c01 	orr	r0, r0, #256	; 0x100
    801c:	e28fe00c 	add	lr, pc, #12
    8020:	e16ff000 	msr	SPSR_fsxc, r0
    8024:	e12ef30e 	.word	0xe12ef30e
    8028:	e160006e 	.word	0xe160006e
    802c:	e121f000 	msr	CPSR_c, r0
    8030:	e3a00000 	mov	r0, #0
    8034:	ee0c0f10 	mcr	15, 0, r0, cr12, cr0, {0}
    8038:	f1020011 	cps	#17
    803c:	e3a0d709 	mov	sp, #2359296	; 0x240000
    8040:	f1020012 	cps	#18
    8044:	e3a0d98e 	mov	sp, #2326528	; 0x238000
    8048:	f1020017 	cps	#23
    804c:	e3a0d823 	mov	sp, #2293760	; 0x230000
    8050:	f102001b 	cps	#27
    8054:	e3a0d823 	mov	sp, #2293760	; 0x230000
    8058:	f102001f 	cps	#31
    805c:	e3a0d98a 	mov	sp, #2260992	; 0x228000
    8060:	ea006212 	b	208b0 <sysinit>

Disassembly of section .text:

00008068 <main>:
    8068:	e92d4800 	push	{fp, lr}
    806c:	e28db004 	add	fp, sp, #4
    8070:	e24ddd7a 	sub	sp, sp, #7808	; 0x1e80
    8074:	e24b3d79 	sub	r3, fp, #7744	; 0x1e40
    8078:	e2433004 	sub	r3, r3, #4
    807c:	e243303c 	sub	r3, r3, #60	; 0x3c
    8080:	e1a00003 	mov	r0, r3
    8084:	eb00009a 	bl	82f4 <CKernel::CKernel()>
    8088:	e24b3d79 	sub	r3, fp, #7744	; 0x1e40
    808c:	e2433004 	sub	r3, r3, #4
    8090:	e243303c 	sub	r3, r3, #60	; 0x3c
    8094:	e1a00003 	mov	r0, r3
    8098:	eb0000d8 	bl	8400 <CKernel::Initialize()>
    809c:	e1a03000 	mov	r3, r0
    80a0:	e2233001 	eor	r3, r3, #1
    80a4:	e6ef3073 	uxtb	r3, r3
    80a8:	e3530000 	cmp	r3, #0
    80ac:	0a000000 	beq	80b4 <main+0x4c>
    80b0:	eb0061f0 	bl	20878 <halt>
    80b4:	e24b3d79 	sub	r3, fp, #7744	; 0x1e40
    80b8:	e2433004 	sub	r3, r3, #4
    80bc:	e243303c 	sub	r3, r3, #60	; 0x3c
    80c0:	e1a00003 	mov	r0, r3
    80c4:	eb000147 	bl	85e8 <CKernel::Run()>
    80c8:	e1a03000 	mov	r3, r0
    80cc:	e54b3005 	strb	r3, [fp, #-5]
    80d0:	e55b3005 	ldrb	r3, [fp, #-5]
    80d4:	e3530002 	cmp	r3, #2
    80d8:	1a000000 	bne	80e0 <main+0x78>
    80dc:	eb0061e8 	bl	20884 <reboot>
    80e0:	eb0061e4 	bl	20878 <halt>

000080e4 <CKernel::ShutdownHandler()>:
    80e4:	e92d4010 	push	{r4, lr}
    80e8:	e59f4030 	ldr	r4, [pc, #48]	; 8120 <CKernel::ShutdownHandler()+0x3c>
    80ec:	e5943000 	ldr	r3, [r4]
    80f0:	e3530000 	cmp	r3, #0
    80f4:	0a000003 	beq	8108 <CKernel::ShutdownHandler()+0x24>
    80f8:	e3a02002 	mov	r2, #2
    80fc:	e2833a01 	add	r3, r3, #4096	; 0x1000
    8100:	e5c32d90 	strb	r2, [r3, #3472]	; 0xd90
    8104:	e8bd8010 	pop	{r4, pc}
    8108:	e3a020b0 	mov	r2, #176	; 0xb0
    810c:	e59f1010 	ldr	r1, [pc, #16]	; 8124 <CKernel::ShutdownHandler()+0x40>
    8110:	e59f0010 	ldr	r0, [pc, #16]	; 8128 <CKernel::ShutdownHandler()+0x44>
    8114:	eb00491f 	bl	1a598 <assertion_failed>
    8118:	e5943000 	ldr	r3, [r4]
    811c:	eafffff5 	b	80f8 <CKernel::ShutdownHandler()+0x14>
    8120:	0002b230 	.word	0x0002b230
    8124:	00023f4c 	.word	0x00023f4c
    8128:	00023f5c 	.word	0x00023f5c

0000812c <CKernel::KeyPressedHandler(char const*)>:
    812c:	e92d4070 	push	{r4, r5, r6, lr}
    8130:	e59f4068 	ldr	r4, [pc, #104]	; 81a0 <CKernel::KeyPressedHandler(char const*)+0x74>
    8134:	e1a06000 	mov	r6, r0
    8138:	e5940000 	ldr	r0, [r4]
    813c:	e24dd010 	sub	sp, sp, #16
    8140:	e3500000 	cmp	r0, #0
    8144:	0a00000f 	beq	8188 <CKernel::KeyPressedHandler(char const*)+0x5c>
    8148:	e3a03001 	mov	r3, #1
    814c:	e3a0e000 	mov	lr, #0
    8150:	e3a05041 	mov	r5, #65	; 0x41
    8154:	e5d6c000 	ldrb	ip, [r6]
    8158:	e5941004 	ldr	r1, [r4, #4]
    815c:	e28d2010 	add	r2, sp, #16
    8160:	e2800d76 	add	r0, r0, #7552	; 0x1d80
    8164:	e1cd50bc 	strh	r5, [sp, #12]
    8168:	e2800014 	add	r0, r0, #20
    816c:	e562c004 	strb	ip, [r2, #-4]!
    8170:	e081c003 	add	ip, r1, r3
    8174:	e88d4008 	stm	sp, {r3, lr}
    8178:	e584c004 	str	ip, [r4, #4]
    817c:	eb0003aa 	bl	902c <BusRaider::blockWrite(unsigned long, unsigned char const*, unsigned long, int, int)>
    8180:	e28dd010 	add	sp, sp, #16
    8184:	e8bd8070 	pop	{r4, r5, r6, pc}
    8188:	e59f0014 	ldr	r0, [pc, #20]	; 81a4 <CKernel::KeyPressedHandler(char const*)+0x78>
    818c:	e3a020a7 	mov	r2, #167	; 0xa7
    8190:	e59f1010 	ldr	r1, [pc, #16]	; 81a8 <CKernel::KeyPressedHandler(char const*)+0x7c>
    8194:	eb0048ff 	bl	1a598 <assertion_failed>
    8198:	e5940000 	ldr	r0, [r4]
    819c:	eaffffe9 	b	8148 <CKernel::KeyPressedHandler(char const*)+0x1c>
    81a0:	0002b230 	.word	0x0002b230
    81a4:	00023f5c 	.word	0x00023f5c
    81a8:	00023f4c 	.word	0x00023f4c

000081ac <pinRawWrite(int, bool)>:
    81ac:	e3510000 	cmp	r1, #0
    81b0:	e3a03001 	mov	r3, #1
    81b4:	0a000008 	beq	81dc <pinRawWrite(int, bool)+0x30>
    81b8:	e350001f 	cmp	r0, #31
    81bc:	c2400020 	subgt	r0, r0, #32
    81c0:	d59f2038 	ldrle	r2, [pc, #56]	; 8200 <pinRawWrite(int, bool)+0x54>
    81c4:	c59f2034 	ldrgt	r2, [pc, #52]	; 8200 <pinRawWrite(int, bool)+0x54>
    81c8:	d1a00013 	lslle	r0, r3, r0
    81cc:	c1a00013 	lslgt	r0, r3, r0
    81d0:	d582001c 	strle	r0, [r2, #28]
    81d4:	c5820020 	strgt	r0, [r2, #32]
    81d8:	e12fff1e 	bx	lr
    81dc:	e350001f 	cmp	r0, #31
    81e0:	c2400020 	subgt	r0, r0, #32
    81e4:	d59f2014 	ldrle	r2, [pc, #20]	; 8200 <pinRawWrite(int, bool)+0x54>
    81e8:	c59f2010 	ldrgt	r2, [pc, #16]	; 8200 <pinRawWrite(int, bool)+0x54>
    81ec:	d1a00013 	lslle	r0, r3, r0
    81f0:	c1a00013 	lslgt	r0, r3, r0
    81f4:	d5820028 	strle	r0, [r2, #40]	; 0x28
    81f8:	c582002c 	strgt	r0, [r2, #44]	; 0x2c
    81fc:	e12fff1e 	bx	lr
    8200:	20200000 	.word	0x20200000

00008204 <pinRawMode(int, bool, bool)>:
    8204:	e3510000 	cmp	r1, #0
    8208:	e92d4070 	push	{r4, r5, r6, lr}
    820c:	e1a04000 	mov	r4, r0
    8210:	0a00000f 	beq	8254 <pinRawMode(int, bool, bool)+0x50>
    8214:	e3a00007 	mov	r0, #7
    8218:	e59f1094 	ldr	r1, [pc, #148]	; 82b4 <pinRawMode(int, bool, bool)+0xb0>
    821c:	e1a02fc4 	asr	r2, r4, #31
    8220:	e0c13491 	smull	r3, r1, r1, r4
    8224:	e0622141 	rsb	r2, r2, r1, asr #2
    8228:	e2821302 	add	r1, r2, #134217728	; 0x8000000
    822c:	e2811702 	add	r1, r1, #524288	; 0x80000
    8230:	e0822102 	add	r2, r2, r2, lsl #2
    8234:	e1a01101 	lsl	r1, r1, #2
    8238:	e0443082 	sub	r3, r4, r2, lsl #1
    823c:	e0833083 	add	r3, r3, r3, lsl #1
    8240:	e5912000 	ldr	r2, [r1]
    8244:	e6ef3073 	uxtb	r3, r3
    8248:	e1c23310 	bic	r3, r2, r0, lsl r3
    824c:	e5813000 	str	r3, [r1]
    8250:	e8bd8070 	pop	{r4, r5, r6, pc}
    8254:	e1a01002 	mov	r1, r2
    8258:	e1a05002 	mov	r5, r2
    825c:	ebffffd2 	bl	81ac <pinRawWrite(int, bool)>
    8260:	e3a01001 	mov	r1, #1
    8264:	e3a00007 	mov	r0, #7
    8268:	e59f2044 	ldr	r2, [pc, #68]	; 82b4 <pinRawMode(int, bool, bool)+0xb0>
    826c:	e1a03fc4 	asr	r3, r4, #31
    8270:	e0c2c492 	smull	ip, r2, r2, r4
    8274:	e0633142 	rsb	r3, r3, r2, asr #2
    8278:	e283c302 	add	ip, r3, #134217728	; 0x8000000
    827c:	e28cc702 	add	ip, ip, #524288	; 0x80000
    8280:	e0833103 	add	r3, r3, r3, lsl #2
    8284:	e0443113 	sub	r3, r4, r3, lsl r1
    8288:	e1a0c10c 	lsl	ip, ip, #2
    828c:	e0833113 	add	r3, r3, r3, lsl r1
    8290:	e59c2000 	ldr	r2, [ip]
    8294:	e6ef3073 	uxtb	r3, r3
    8298:	e1c22310 	bic	r2, r2, r0, lsl r3
    829c:	e1823311 	orr	r3, r2, r1, lsl r3
    82a0:	e1a00004 	mov	r0, r4
    82a4:	e1a01005 	mov	r1, r5
    82a8:	e8bd4070 	pop	{r4, r5, r6, lr}
    82ac:	e58c3000 	str	r3, [ip]
    82b0:	eaffffbd 	b	81ac <pinRawWrite(int, bool)>
    82b4:	66666667 	.word	0x66666667

000082b8 <pinRawRead(int)>:
    82b8:	e350001f 	cmp	r0, #31
    82bc:	d59f301c 	ldrle	r3, [pc, #28]	; 82e0 <pinRawRead(int)+0x28>
    82c0:	c59f2018 	ldrgt	r2, [pc, #24]	; 82e0 <pinRawRead(int)+0x28>
    82c4:	c2403020 	subgt	r3, r0, #32
    82c8:	d5933034 	ldrle	r3, [r3, #52]	; 0x34
    82cc:	c5920038 	ldrgt	r0, [r2, #56]	; 0x38
    82d0:	d1a00033 	lsrle	r0, r3, r0
    82d4:	c1a00330 	lsrgt	r0, r0, r3
    82d8:	e2000001 	and	r0, r0, #1
    82dc:	e12fff1e 	bx	lr
    82e0:	20200000 	.word	0x20200000

000082e4 <micros()>:
    82e4:	e59f3004 	ldr	r3, [pc, #4]	; 82f0 <micros()+0xc>
    82e8:	e5930004 	ldr	r0, [r3, #4]
    82ec:	e12fff1e 	bx	lr
    82f0:	20003000 	.word	0x20003000

000082f4 <CKernel::CKernel()>:
    82f4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    82f8:	e1a04000 	mov	r4, r0
    82fc:	e3a01001 	mov	r1, #1
    8300:	e280800c 	add	r8, r0, #12
    8304:	e2846018 	add	r6, r4, #24
    8308:	eb0068a6 	bl	225a8 <CMemorySystem::CMemorySystem(bool)>
    830c:	e1a00008 	mov	r0, r8
    8310:	eb00482e 	bl	1a3d0 <CActLED::CActLED()>
    8314:	e2845e87 	add	r5, r4, #2160	; 0x870
    8318:	e1a00006 	mov	r0, r6
    831c:	eb005157 	bl	1c880 <CKernelOptions::CKernelOptions()>
    8320:	e1a00005 	mov	r0, r5
    8324:	eb004aa7 	bl	1adc8 <CDeviceNameService::CDeviceNameService()>
    8328:	e1a00006 	mov	r0, r6
    832c:	eb00511a 	bl	1c79c <CKernelOptions::GetWidth() const>
    8330:	e1a07000 	mov	r7, r0
    8334:	e1a00006 	mov	r0, r6
    8338:	eb005119 	bl	1c7a4 <CKernelOptions::GetHeight() const>
    833c:	e3a03000 	mov	r3, #0
    8340:	e1a01007 	mov	r1, r7
    8344:	e1a02000 	mov	r2, r0
    8348:	e2850008 	add	r0, r5, #8
    834c:	eb0055af 	bl	1da10 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool)>
    8350:	e3a02000 	mov	r2, #0
    8354:	e2840e8d 	add	r0, r4, #2256	; 0x8d0
    8358:	e1a01002 	mov	r1, r2
    835c:	e2845d66 	add	r5, r4, #6528	; 0x1980
    8360:	e2800004 	add	r0, r0, #4
    8364:	eb005a5c 	bl	1ecdc <CSerialDevice::CSerialDevice(CInterruptSystem*, bool)>
    8368:	e2857030 	add	r7, r5, #48	; 0x30
    836c:	e285002c 	add	r0, r5, #44	; 0x2c
    8370:	e2845d6f 	add	r5, r4, #7104	; 0x1bc0
    8374:	eb00670b 	bl	21fa8 <CExceptionHandler::CExceptionHandler()>
    8378:	e2855030 	add	r5, r5, #48	; 0x30
    837c:	e1a00007 	mov	r0, r7
    8380:	eb004f70 	bl	1c148 <CInterruptSystem::CInterruptSystem()>
    8384:	e1a01007 	mov	r1, r7
    8388:	e1a00005 	mov	r0, r5
    838c:	eb006181 	bl	20998 <CTimer::CTimer(CInterruptSystem*)>
    8390:	e1a00006 	mov	r0, r6
    8394:	eb005107 	bl	1c7b8 <CKernelOptions::GetLogLevel() const>
    8398:	e2843b07 	add	r3, r4, #7168	; 0x1c00
    839c:	e1a01000 	mov	r1, r0
    83a0:	e1a02005 	mov	r2, r5
    83a4:	e283001c 	add	r0, r3, #28
    83a8:	eb00523a 	bl	1cc98 <CLogger::CLogger(unsigned int, CTimer*)>
    83ac:	e2840c1d 	add	r0, r4, #7424	; 0x1d00
    83b0:	e1a01007 	mov	r1, r7
    83b4:	e1a02005 	mov	r2, r5
    83b8:	e2800014 	add	r0, r0, #20
    83bc:	eb000693 	bl	9e10 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)>
    83c0:	e3a02000 	mov	r2, #0
    83c4:	e2843a01 	add	r3, r4, #4096	; 0x1000
    83c8:	e2840d76 	add	r0, r4, #7552	; 0x1d80
    83cc:	e5c32d90 	strb	r2, [r3, #3472]	; 0xd90
    83d0:	e2800014 	add	r0, r0, #20
    83d4:	eb000194 	bl	8a2c <BusRaider::BusRaider()>
    83d8:	e59fc01c 	ldr	ip, [pc, #28]	; 83fc <CKernel::CKernel()+0x108>
    83dc:	e1a00008 	mov	r0, r8
    83e0:	e3a03f7d 	mov	r3, #500	; 0x1f4
    83e4:	e3a020c8 	mov	r2, #200	; 0xc8
    83e8:	e3a01005 	mov	r1, #5
    83ec:	e58c4000 	str	r4, [ip]
    83f0:	eb004851 	bl	1a53c <CActLED::Blink(unsigned int, unsigned int, unsigned int)>
    83f4:	e1a00004 	mov	r0, r4
    83f8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    83fc:	0002b230 	.word	0x0002b230

00008400 <CKernel::Initialize()>:
    8400:	e92d4070 	push	{r4, r5, r6, lr}
    8404:	e2806e87 	add	r6, r0, #2160	; 0x870
    8408:	e2865008 	add	r5, r6, #8
    840c:	e1a04000 	mov	r4, r0
    8410:	e1a00005 	mov	r0, r5
    8414:	eb00592e 	bl	1e8d4 <CScreenDevice::Initialize()>
    8418:	e3500000 	cmp	r0, #0
    841c:	1a000001 	bne	8428 <CKernel::Initialize()+0x28>
    8420:	e3a00000 	mov	r0, #0
    8424:	e8bd8070 	pop	{r4, r5, r6, pc}
    8428:	e2840e8d 	add	r0, r4, #2256	; 0x8d0
    842c:	e2800004 	add	r0, r0, #4
    8430:	e59f1078 	ldr	r1, [pc, #120]	; 84b0 <CKernel::Initialize()+0xb0>
    8434:	eb005a58 	bl	1ed9c <CSerialDevice::Initialize(unsigned int)>
    8438:	e3500000 	cmp	r0, #0
    843c:	0afffff7 	beq	8420 <CKernel::Initialize()+0x20>
    8440:	e2840018 	add	r0, r4, #24
    8444:	eb0050d8 	bl	1c7ac <CKernelOptions::GetLogDevice() const>
    8448:	e3a02000 	mov	r2, #0
    844c:	e1a01000 	mov	r1, r0
    8450:	e1a00006 	mov	r0, r6
    8454:	eb004b05 	bl	1b070 <CDeviceNameService::GetDevice(char const*, bool)>
    8458:	e2843b07 	add	r3, r4, #7168	; 0x1c00
    845c:	e3500000 	cmp	r0, #0
    8460:	11a01000 	movne	r1, r0
    8464:	01a01005 	moveq	r1, r5
    8468:	e283001c 	add	r0, r3, #28
    846c:	eb0053f1 	bl	1d438 <CLogger::Initialize(CDevice*)>
    8470:	e3500000 	cmp	r0, #0
    8474:	0affffe9 	beq	8420 <CKernel::Initialize()+0x20>
    8478:	e2840d66 	add	r0, r4, #6528	; 0x1980
    847c:	e2800030 	add	r0, r0, #48	; 0x30
    8480:	eb004f43 	bl	1c194 <CInterruptSystem::Initialize()>
    8484:	e3500000 	cmp	r0, #0
    8488:	0affffe4 	beq	8420 <CKernel::Initialize()+0x20>
    848c:	e2840d6f 	add	r0, r4, #7104	; 0x1bc0
    8490:	e2800030 	add	r0, r0, #48	; 0x30
    8494:	eb006422 	bl	21524 <CTimer::Initialize()>
    8498:	e3500000 	cmp	r0, #0
    849c:	0affffdf 	beq	8420 <CKernel::Initialize()+0x20>
    84a0:	e2840c1d 	add	r0, r4, #7424	; 0x1d00
    84a4:	e2800014 	add	r0, r0, #20
    84a8:	e8bd4070 	pop	{r4, r5, r6, lr}
    84ac:	ea000e90 	b	bef4 <CDWHCIDevice::Initialize()>
    84b0:	0001c200 	.word	0x0001c200

000084b4 <CKernel::testTiming(int)>:
    84b4:	e3a02000 	mov	r2, #0
    84b8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    84bc:	e1a08000 	mov	r8, r0
    84c0:	e24dd014 	sub	sp, sp, #20
    84c4:	e1a07001 	mov	r7, r1
    84c8:	e3a00007 	mov	r0, #7
    84cc:	e1a01002 	mov	r1, r2
    84d0:	ebffff4b 	bl	8204 <pinRawMode(int, bool, bool)>
    84d4:	e3a02000 	mov	r2, #0
    84d8:	e3a00008 	mov	r0, #8
    84dc:	e1a01002 	mov	r1, r2
    84e0:	ebffff47 	bl	8204 <pinRawMode(int, bool, bool)>
    84e4:	e59f30ec 	ldr	r3, [pc, #236]	; 85d8 <CKernel::testTiming(int)+0x124>
    84e8:	e59f20ec 	ldr	r2, [pc, #236]	; 85dc <CKernel::testTiming(int)+0x128>
    84ec:	e1a05003 	mov	r5, r3
    84f0:	e5933004 	ldr	r3, [r3, #4]
    84f4:	e2888e87 	add	r8, r8, #2160	; 0x870
    84f8:	e58d3004 	str	r3, [sp, #4]
    84fc:	e59d3004 	ldr	r3, [sp, #4]
    8500:	e3a04000 	mov	r4, #0
    8504:	e0273792 	mla	r7, r2, r7, r3
    8508:	e59d3004 	ldr	r3, [sp, #4]
    850c:	e3a0a080 	mov	sl, #128	; 0x80
    8510:	e59f60c8 	ldr	r6, [pc, #200]	; 85e0 <CKernel::testTiming(int)+0x12c>
    8514:	e59f90c8 	ldr	r9, [pc, #200]	; 85e4 <CKernel::testTiming(int)+0x130>
    8518:	e2888008 	add	r8, r8, #8
    851c:	e58d3008 	str	r3, [sp, #8]
    8520:	ea000002 	b	8530 <CKernel::testTiming(int)+0x7c>
    8524:	e1520007 	cmp	r2, r7
    8528:	8a00001e 	bhi	85a8 <CKernel::testTiming(int)+0xf4>
    852c:	e58d2004 	str	r2, [sp, #4]
    8530:	e5953004 	ldr	r3, [r5, #4]
    8534:	e3540000 	cmp	r4, #0
    8538:	1586a01c 	strne	sl, [r6, #28]
    853c:	0586a028 	streq	sl, [r6, #40]	; 0x28
    8540:	e58d300c 	str	r3, [sp, #12]
    8544:	e59d200c 	ldr	r2, [sp, #12]
    8548:	e59d3004 	ldr	r3, [sp, #4]
    854c:	e2244001 	eor	r4, r4, #1
    8550:	e1520003 	cmp	r2, r3
    8554:	9a000004 	bls	856c <CKernel::testTiming(int)+0xb8>
    8558:	e59d300c 	ldr	r3, [sp, #12]
    855c:	e59d2004 	ldr	r2, [sp, #4]
    8560:	e0433002 	sub	r3, r3, r2
    8564:	e3530005 	cmp	r3, #5
    8568:	8a000010 	bhi	85b0 <CKernel::testTiming(int)+0xfc>
    856c:	e59d3008 	ldr	r3, [sp, #8]
    8570:	e5952004 	ldr	r2, [r5, #4]
    8574:	e283393d 	add	r3, r3, #999424	; 0xf4000
    8578:	e2833d09 	add	r3, r3, #576	; 0x240
    857c:	e1530002 	cmp	r3, r2
    8580:	2affffe7 	bcs	8524 <CKernel::testTiming(int)+0x70>
    8584:	e3a02001 	mov	r2, #1
    8588:	e1a01009 	mov	r1, r9
    858c:	e1a00008 	mov	r0, r8
    8590:	eb00589d 	bl	1e80c <CScreenDevice::Write(void const*, unsigned int)>
    8594:	e5953004 	ldr	r3, [r5, #4]
    8598:	e58d3008 	str	r3, [sp, #8]
    859c:	e5952004 	ldr	r2, [r5, #4]
    85a0:	e1520007 	cmp	r2, r7
    85a4:	9affffe0 	bls	852c <CKernel::testTiming(int)+0x78>
    85a8:	e28dd014 	add	sp, sp, #20
    85ac:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    85b0:	e3a0bc01 	mov	fp, #256	; 0x100
    85b4:	e3a0000a 	mov	r0, #10
    85b8:	e586b01c 	str	fp, [r6, #28]
    85bc:	e586b01c 	str	fp, [r6, #28]
    85c0:	eb006416 	bl	21620 <CTimer::SimpleusDelay(unsigned int)>
    85c4:	e586b028 	str	fp, [r6, #40]	; 0x28
    85c8:	e3a0000a 	mov	r0, #10
    85cc:	e586b028 	str	fp, [r6, #40]	; 0x28
    85d0:	eb006412 	bl	21620 <CTimer::SimpleusDelay(unsigned int)>
    85d4:	eaffffe4 	b	856c <CKernel::testTiming(int)+0xb8>
    85d8:	20003000 	.word	0x20003000
    85dc:	000f4240 	.word	0x000f4240
    85e0:	20200000 	.word	0x20200000
    85e4:	00023f6c 	.word	0x00023f6c

000085e8 <CKernel::Run()>:
    85e8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    85ec:	e1a05000 	mov	r5, r0
    85f0:	e2804e87 	add	r4, r0, #2160	; 0x870
    85f4:	e24dde5b 	sub	sp, sp, #1456	; 0x5b0
    85f8:	e2846008 	add	r6, r4, #8
    85fc:	e2858b07 	add	r8, r5, #7168	; 0x1c00
    8600:	e24dd00c 	sub	sp, sp, #12
    8604:	e3a02008 	mov	r2, #8
    8608:	e59f11b0 	ldr	r1, [pc, #432]	; 87c0 <CKernel::Run()+0x1d8>
    860c:	e1a00006 	mov	r0, r6
    8610:	e288801c 	add	r8, r8, #28
    8614:	eb00587c 	bl	1e80c <CScreenDevice::Write(void const*, unsigned int)>
    8618:	e1a00008 	mov	r0, r8
    861c:	e59f31a0 	ldr	r3, [pc, #416]	; 87c4 <CKernel::Run()+0x1dc>
    8620:	e3a02003 	mov	r2, #3
    8624:	e59f119c 	ldr	r1, [pc, #412]	; 87c8 <CKernel::Run()+0x1e0>
    8628:	eb005376 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    862c:	e1a00004 	mov	r0, r4
    8630:	e3a02000 	mov	r2, #0
    8634:	e59f1190 	ldr	r1, [pc, #400]	; 87cc <CKernel::Run()+0x1e4>
    8638:	eb004a8c 	bl	1b070 <CDeviceNameService::GetDevice(char const*, bool)>
    863c:	e2507000 	subs	r7, r0, #0
    8640:	0a000055 	beq	879c <CKernel::Run()+0x1b4>
    8644:	e3a04000 	mov	r4, #0
    8648:	e59f1180 	ldr	r1, [pc, #384]	; 87d0 <CKernel::Run()+0x1e8>
    864c:	eb00230f 	bl	11290 <CUSBKeyboardDevice::RegisterShutdownHandler(void (*)())>
    8650:	e1a00007 	mov	r0, r7
    8654:	e59f1178 	ldr	r1, [pc, #376]	; 87d4 <CKernel::Run()+0x1ec>
    8658:	eb002308 	bl	11280 <CUSBKeyboardDevice::RegisterKeyPressedHandler(void (*)(char const*))>
    865c:	e3a02003 	mov	r2, #3
    8660:	e59f1160 	ldr	r1, [pc, #352]	; 87c8 <CKernel::Run()+0x1e0>
    8664:	e59f316c 	ldr	r3, [pc, #364]	; 87d8 <CKernel::Run()+0x1f0>
    8668:	e1a00008 	mov	r0, r8
    866c:	eb005365 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8670:	e28d3034 	add	r3, sp, #52	; 0x34
    8674:	e1a00003 	mov	r0, r3
    8678:	e58d302c 	str	r3, [sp, #44]	; 0x2c
    867c:	eb00055d 	bl	9bf8 <TargetFonts::TargetFonts()>
    8680:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
    8684:	e59f1150 	ldr	r1, [pc, #336]	; 87dc <CKernel::Run()+0x1f4>
    8688:	eb00055e 	bl	9c08 <TargetFonts::addFont(TargetFont*)>
    868c:	e1a01006 	mov	r1, r6
    8690:	e59d202c 	ldr	r2, [sp, #44]	; 0x2c
    8694:	e1a03008 	mov	r3, r8
    8698:	e28d0088 	add	r0, sp, #136	; 0x88
    869c:	eb00048f 	bl	98e0 <TargetScreen::TargetScreen(CScreenDevice&, TargetFonts&, CLogger&)>
    86a0:	e3a03002 	mov	r3, #2
    86a4:	e3e0c000 	mvn	ip, #0
    86a8:	e3a0e010 	mov	lr, #16
    86ac:	e3a06b3e 	mov	r6, #63488	; 0xf800
    86b0:	e1a0b004 	mov	fp, r4
    86b4:	e3a0a001 	mov	sl, #1
    86b8:	e58d301c 	str	r3, [sp, #28]
    86bc:	e58d3018 	str	r3, [sp, #24]
    86c0:	e59f3118 	ldr	r3, [pc, #280]	; 87e0 <CKernel::Run()+0x1f8>
    86c4:	e28d0088 	add	r0, sp, #136	; 0x88
    86c8:	e58d3004 	str	r3, [sp, #4]
    86cc:	e58d4014 	str	r4, [sp, #20]
    86d0:	e3a03040 	mov	r3, #64	; 0x40
    86d4:	e58d4010 	str	r4, [sp, #16]
    86d8:	e58d400c 	str	r4, [sp, #12]
    86dc:	e1a02004 	mov	r2, r4
    86e0:	e1a01004 	mov	r1, r4
    86e4:	e58dc024 	str	ip, [sp, #36]	; 0x24
    86e8:	e58dc020 	str	ip, [sp, #32]
    86ec:	e58d6008 	str	r6, [sp, #8]
    86f0:	e58de000 	str	lr, [sp]
    86f4:	e2855d76 	add	r5, r5, #7552	; 0x1d80
    86f8:	eb000489 	bl	9924 <TargetScreen::setup(int, int, int, int, char const*, unsigned short, unsigned short, int, int, int, int, int, int)>
    86fc:	e59f90e0 	ldr	r9, [pc, #224]	; 87e4 <CKernel::Run()+0x1fc>
    8700:	e2853014 	add	r3, r5, #20
    8704:	e58d302c 	str	r3, [sp, #44]	; 0x2c
    8708:	e3a06000 	mov	r6, #0
    870c:	e3a03b01 	mov	r3, #1024	; 0x400
    8710:	e88d0c00 	stm	sp, {sl, fp}
    8714:	e28d2f6e 	add	r2, sp, #440	; 0x1b8
    8718:	e3a01000 	mov	r1, #0
    871c:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
    8720:	eb00029a 	bl	9190 <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)>
    8724:	e28d3f6e 	add	r3, sp, #440	; 0x1b8
    8728:	e2437001 	sub	r7, r3, #1
    872c:	e1a05007 	mov	r5, r7
    8730:	e3a04000 	mov	r4, #0
    8734:	e1a02004 	mov	r2, r4
    8738:	e1a03006 	mov	r3, r6
    873c:	e5f51001 	ldrb	r1, [r5, #1]!
    8740:	e2844001 	add	r4, r4, #1
    8744:	e28d0088 	add	r0, sp, #136	; 0x88
    8748:	eb0004b2 	bl	9a18 <TargetScreen::putChar(int, int, int)>
    874c:	e3540040 	cmp	r4, #64	; 0x40
    8750:	1afffff7 	bne	8734 <CKernel::Run()+0x14c>
    8754:	e2866001 	add	r6, r6, #1
    8758:	e3560010 	cmp	r6, #16
    875c:	e2877040 	add	r7, r7, #64	; 0x40
    8760:	1afffff1 	bne	872c <CKernel::Run()+0x144>
    8764:	e3a00ffa 	mov	r0, #1000	; 0x3e8
    8768:	eb0063a5 	bl	21604 <CTimer::SimpleMsDelay(unsigned int)>
    876c:	e59f0074 	ldr	r0, [pc, #116]	; 87e8 <CKernel::Run()+0x200>
    8770:	e5994004 	ldr	r4, [r9, #4]
    8774:	eb000085 	bl	8990 <lowlevCycleDelay>
    8778:	e5992004 	ldr	r2, [r9, #4]
    877c:	e59f3068 	ldr	r3, [pc, #104]	; 87ec <CKernel::Run()+0x204>
    8780:	e0422004 	sub	r2, r2, r4
    8784:	e58d2000 	str	r2, [sp]
    8788:	e59f1038 	ldr	r1, [pc, #56]	; 87c8 <CKernel::Run()+0x1e0>
    878c:	e3a02003 	mov	r2, #3
    8790:	e1a00008 	mov	r0, r8
    8794:	eb00531b 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8798:	eaffffda 	b	8708 <CKernel::Run()+0x120>
    879c:	e1a00008 	mov	r0, r8
    87a0:	e59f3048 	ldr	r3, [pc, #72]	; 87f0 <CKernel::Run()+0x208>
    87a4:	e3a02001 	mov	r2, #1
    87a8:	e59f1018 	ldr	r1, [pc, #24]	; 87c8 <CKernel::Run()+0x1e0>
    87ac:	eb005315 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    87b0:	e3a00001 	mov	r0, #1
    87b4:	e28dde5b 	add	sp, sp, #1456	; 0x5b0
    87b8:	e28dd00c 	add	sp, sp, #12
    87bc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    87c0:	00023f70 	.word	0x00023f70
    87c4:	00023f7c 	.word	0x00023f7c
    87c8:	00023f44 	.word	0x00023f44
    87cc:	00023fa0 	.word	0x00023fa0
    87d0:	000080e4 	.word	0x000080e4
    87d4:	0000812c 	.word	0x0000812c
    87d8:	00023fbc 	.word	0x00023fbc
    87dc:	0002b23c 	.word	0x0002b23c
    87e0:	00023fd4 	.word	0x00023fd4
    87e4:	20003000 	.word	0x20003000
    87e8:	000f4240 	.word	0x000f4240
    87ec:	00023fe0 	.word	0x00023fe0
    87f0:	00023fa8 	.word	0x00023fa8

000087f4 <CKernel::~CKernel()>:
    87f4:	e92d4070 	push	{r4, r5, r6, lr}
    87f8:	e3a02000 	mov	r2, #0
    87fc:	e1a04000 	mov	r4, r0
    8800:	e59f3084 	ldr	r3, [pc, #132]	; 888c <CKernel::~CKernel()+0x98>
    8804:	e2800d76 	add	r0, r0, #7552	; 0x1d80
    8808:	e2800014 	add	r0, r0, #20
    880c:	e5832000 	str	r2, [r3]
    8810:	eb0003b9 	bl	96fc <BusRaider::~BusRaider()>
    8814:	e2840c1d 	add	r0, r4, #7424	; 0x1d00
    8818:	e2800014 	add	r0, r0, #20
    881c:	eb000547 	bl	9d40 <CDWHCIDevice::~CDWHCIDevice()>
    8820:	e2840b07 	add	r0, r4, #7168	; 0x1c00
    8824:	e280001c 	add	r0, r0, #28
    8828:	eb005130 	bl	1ccf0 <CLogger::~CLogger()>
    882c:	e2840d6f 	add	r0, r4, #7104	; 0x1bc0
    8830:	e2845d66 	add	r5, r4, #6528	; 0x1980
    8834:	e2800030 	add	r0, r0, #48	; 0x30
    8838:	eb006078 	bl	20a20 <CTimer::~CTimer()>
    883c:	e2850030 	add	r0, r5, #48	; 0x30
    8840:	eb004e4e 	bl	1c180 <CInterruptSystem::~CInterruptSystem()>
    8844:	e285002c 	add	r0, r5, #44	; 0x2c
    8848:	eb0065fa 	bl	22038 <CExceptionHandler::~CExceptionHandler()>
    884c:	e2840e8d 	add	r0, r4, #2256	; 0x8d0
    8850:	e2845e87 	add	r5, r4, #2160	; 0x870
    8854:	e2800004 	add	r0, r0, #4
    8858:	eb005ba0 	bl	1f6e0 <CSerialDevice::~CSerialDevice()>
    885c:	e2850008 	add	r0, r5, #8
    8860:	eb00541d 	bl	1d8dc <CScreenDevice::~CScreenDevice()>
    8864:	e1a00005 	mov	r0, r5
    8868:	eb004969 	bl	1ae14 <CDeviceNameService::~CDeviceNameService()>
    886c:	e2840018 	add	r0, r4, #24
    8870:	eb004fc4 	bl	1c788 <CKernelOptions::~CKernelOptions()>
    8874:	e284000c 	add	r0, r4, #12
    8878:	eb0046b5 	bl	1a354 <CActLED::~CActLED()>
    887c:	e1a00004 	mov	r0, r4
    8880:	eb0066d4 	bl	223d8 <CMemorySystem::~CMemorySystem()>
    8884:	e1a00004 	mov	r0, r4
    8888:	e8bd8070 	pop	{r4, r5, r6, pc}
    888c:	0002b230 	.word	0x0002b230

00008890 <CKernel::KeyStatusHandlerRaw(unsigned char, unsigned char const*)>:
    8890:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    8894:	e59f60dc 	ldr	r6, [pc, #220]	; 8978 <CKernel::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0xe8>
    8898:	e24dd024 	sub	sp, sp, #36	; 0x24
    889c:	e5963000 	ldr	r3, [r6]
    88a0:	e1a05000 	mov	r5, r0
    88a4:	e3530000 	cmp	r3, #0
    88a8:	e1a04001 	mov	r4, r1
    88ac:	0a00002c 	beq	8964 <CKernel::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0xd4>
    88b0:	e1a0000d 	mov	r0, sp
    88b4:	eb005bf4 	bl	1f88c <CString::CString()>
    88b8:	e1a02005 	mov	r2, r5
    88bc:	e1a0000d 	mov	r0, sp
    88c0:	e59f10b4 	ldr	r1, [pc, #180]	; 897c <CKernel::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0xec>
    88c4:	eb005fde 	bl	20844 <CString::Format(char const*, ...)>
    88c8:	e59f70b0 	ldr	r7, [pc, #176]	; 8980 <CKernel::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0xf0>
    88cc:	e2845006 	add	r5, r4, #6
    88d0:	ea000002 	b	88e0 <CKernel::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0x50>
    88d4:	e2844001 	add	r4, r4, #1
    88d8:	e1540005 	cmp	r4, r5
    88dc:	0a000012 	beq	892c <CKernel::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0x9c>
    88e0:	e5d43000 	ldrb	r3, [r4]
    88e4:	e3530000 	cmp	r3, #0
    88e8:	0afffff9 	beq	88d4 <CKernel::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0x44>
    88ec:	e28d0010 	add	r0, sp, #16
    88f0:	eb005be5 	bl	1f88c <CString::CString()>
    88f4:	e5d42000 	ldrb	r2, [r4]
    88f8:	e1a01007 	mov	r1, r7
    88fc:	e28d0010 	add	r0, sp, #16
    8900:	eb005fcf 	bl	20844 <CString::Format(char const*, ...)>
    8904:	e28d0010 	add	r0, sp, #16
    8908:	eb005bf5 	bl	1f8e4 <CString::operator char const*() const>
    890c:	e1a01000 	mov	r1, r0
    8910:	e1a0000d 	mov	r0, sp
    8914:	eb005c24 	bl	1f9ac <CString::Append(char const*)>
    8918:	e2844001 	add	r4, r4, #1
    891c:	e28d0010 	add	r0, sp, #16
    8920:	eb005ba6 	bl	1f7c0 <CString::~CString()>
    8924:	e1540005 	cmp	r4, r5
    8928:	1affffec 	bne	88e0 <CKernel::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0x50>
    892c:	e1a0000d 	mov	r0, sp
    8930:	e5964000 	ldr	r4, [r6]
    8934:	eb005bea 	bl	1f8e4 <CString::operator char const*() const>
    8938:	e2844b07 	add	r4, r4, #7168	; 0x1c00
    893c:	e284401c 	add	r4, r4, #28
    8940:	e1a03000 	mov	r3, r0
    8944:	e3a02003 	mov	r2, #3
    8948:	e1a00004 	mov	r0, r4
    894c:	e59f1030 	ldr	r1, [pc, #48]	; 8984 <CKernel::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0xf4>
    8950:	eb0052ac 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8954:	e1a0000d 	mov	r0, sp
    8958:	eb005b98 	bl	1f7c0 <CString::~CString()>
    895c:	e28dd024 	add	sp, sp, #36	; 0x24
    8960:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    8964:	e3a020b6 	mov	r2, #182	; 0xb6
    8968:	e59f1018 	ldr	r1, [pc, #24]	; 8988 <CKernel::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0xf8>
    896c:	e59f0018 	ldr	r0, [pc, #24]	; 898c <CKernel::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0xfc>
    8970:	eb004708 	bl	1a598 <assertion_failed>
    8974:	eaffffcd 	b	88b0 <CKernel::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0x20>
    8978:	0002b230 	.word	0x0002b230
    897c:	00023fe8 	.word	0x00023fe8
    8980:	00025d4c 	.word	0x00025d4c
    8984:	00023f44 	.word	0x00023f44
    8988:	00023f4c 	.word	0x00023f4c
    898c:	00023f5c 	.word	0x00023f5c

00008990 <lowlevCycleDelay>:
    8990:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
    8994:	e1a00000 	nop			; (mov r0, r0)
    8998:	e1a000c0 	asr	r0, r0, #1

0000899c <loopit>:
    899c:	e2500001 	subs	r0, r0, #1
    89a0:	1afffffd 	bne	899c <loopit>
    89a4:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
    89a8:	e12fff1e 	bx	lr

000089ac <lowlevBlockCopyExecRelocatable>:
    89ac:	e1a00000 	nop			; (mov r0, r0)
    89b0:	e1a01001 	mov	r1, r1
    89b4:	e1a02002 	mov	r2, r2
    89b8:	e1a03003 	mov	r3, r3
    89bc:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)

000089c0 <blockCopyExecRelocatableLoop>:
    89c0:	e4d13001 	ldrb	r3, [r1], #1
    89c4:	e4c03001 	strb	r3, [r0], #1
    89c8:	e2522001 	subs	r2, r2, #1
    89cc:	aafffffb 	bge	89c0 <blockCopyExecRelocatableLoop>
    89d0:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    89d4:	e12fff10 	bx	r0

000089d8 <lowlevBlockCopyExecRelocatableLen>:
    89d8:	0000002c 	.word	0x0000002c
    89dc:	e12fff1e 	bx	lr

000089e0 <lowlevGoto>:
    89e0:	e1a00000 	nop			; (mov r0, r0)
    89e4:	e12fff10 	bx	r0
    89e8:	e12fff1e 	bx	lr

000089ec <lowlevStoreAbs8>:
    89ec:	e1a00000 	nop			; (mov r0, r0)
    89f0:	e1a01001 	mov	r1, r1
    89f4:	e5c01000 	strb	r1, [r0]
    89f8:	e12fff1e 	bx	lr
    89fc:	e12fff1e 	bx	lr

00008a00 <BusRaider::pinRawWrite(int, bool) [clone .part.0]>:
    8a00:	e3a03001 	mov	r3, #1
    8a04:	e350001f 	cmp	r0, #31
    8a08:	c2400020 	subgt	r0, r0, #32
    8a0c:	d59f2014 	ldrle	r2, [pc, #20]	; 8a28 <BusRaider::pinRawWrite(int, bool) [clone .part.0]+0x28>
    8a10:	c59f2010 	ldrgt	r2, [pc, #16]	; 8a28 <BusRaider::pinRawWrite(int, bool) [clone .part.0]+0x28>
    8a14:	d1a00013 	lslle	r0, r3, r0
    8a18:	c1a00013 	lslgt	r0, r3, r0
    8a1c:	d582001c 	strle	r0, [r2, #28]
    8a20:	c5820020 	strgt	r0, [r2, #32]
    8a24:	e12fff1e 	bx	lr
    8a28:	20200000 	.word	0x20200000

00008a2c <BusRaider::BusRaider()>:
    8a2c:	e92d4070 	push	{r4, r5, r6, lr}
    8a30:	e3a03000 	mov	r3, #0
    8a34:	e1a05000 	mov	r5, r0
    8a38:	e2800014 	add	r0, r0, #20
    8a3c:	e5c53005 	strb	r3, [r5, #5]
    8a40:	eb004a74 	bl	1b418 <CGPIOPin::CGPIOPin()>
    8a44:	e285003c 	add	r0, r5, #60	; 0x3c
    8a48:	eb004a72 	bl	1b418 <CGPIOPin::CGPIOPin()>
    8a4c:	e2850064 	add	r0, r5, #100	; 0x64
    8a50:	eb004a70 	bl	1b418 <CGPIOPin::CGPIOPin()>
    8a54:	e285008c 	add	r0, r5, #140	; 0x8c
    8a58:	eb004a6e 	bl	1b418 <CGPIOPin::CGPIOPin()>
    8a5c:	e28500b4 	add	r0, r5, #180	; 0xb4
    8a60:	eb004a6c 	bl	1b418 <CGPIOPin::CGPIOPin()>
    8a64:	e28540dc 	add	r4, r5, #220	; 0xdc
    8a68:	e2856f87 	add	r6, r5, #540	; 0x21c
    8a6c:	e1a00004 	mov	r0, r4
    8a70:	e2844028 	add	r4, r4, #40	; 0x28
    8a74:	eb004a67 	bl	1b418 <CGPIOPin::CGPIOPin()>
    8a78:	e1540006 	cmp	r4, r6
    8a7c:	1afffffa 	bne	8a6c <BusRaider::BusRaider()+0x40>
    8a80:	e1a00004 	mov	r0, r4
    8a84:	eb004a63 	bl	1b418 <CGPIOPin::CGPIOPin()>
    8a88:	e2850f91 	add	r0, r5, #580	; 0x244
    8a8c:	eb004a61 	bl	1b418 <CGPIOPin::CGPIOPin()>
    8a90:	e2850f9b 	add	r0, r5, #620	; 0x26c
    8a94:	eb004a5f 	bl	1b418 <CGPIOPin::CGPIOPin()>
    8a98:	e2850fa5 	add	r0, r5, #660	; 0x294
    8a9c:	eb004a5d 	bl	1b418 <CGPIOPin::CGPIOPin()>
    8aa0:	e2850faf 	add	r0, r5, #700	; 0x2bc
    8aa4:	eb004a5b 	bl	1b418 <CGPIOPin::CGPIOPin()>
    8aa8:	e2850fb9 	add	r0, r5, #740	; 0x2e4
    8aac:	eb004a59 	bl	1b418 <CGPIOPin::CGPIOPin()>
    8ab0:	e2850fc3 	add	r0, r5, #780	; 0x30c
    8ab4:	eb004a57 	bl	1b418 <CGPIOPin::CGPIOPin()>
    8ab8:	e2850fcd 	add	r0, r5, #820	; 0x334
    8abc:	eb004a55 	bl	1b418 <CGPIOPin::CGPIOPin()>
    8ac0:	e2850fd7 	add	r0, r5, #860	; 0x35c
    8ac4:	eb004a53 	bl	1b418 <CGPIOPin::CGPIOPin()>
    8ac8:	e2850fe1 	add	r0, r5, #900	; 0x384
    8acc:	eb004a51 	bl	1b418 <CGPIOPin::CGPIOPin()>
    8ad0:	e2850feb 	add	r0, r5, #940	; 0x3ac
    8ad4:	eb004a4f 	bl	1b418 <CGPIOPin::CGPIOPin()>
    8ad8:	e3a03000 	mov	r3, #0
    8adc:	e1a00005 	mov	r0, r5
    8ae0:	e5853000 	str	r3, [r5]
    8ae4:	e5c53004 	strb	r3, [r5, #4]
    8ae8:	e5853008 	str	r3, [r5, #8]
    8aec:	e585300c 	str	r3, [r5, #12]
    8af0:	e5853010 	str	r3, [r5, #16]
    8af4:	e8bd8070 	pop	{r4, r5, r6, pc}

00008af8 <BusRaider::hostReset()>:
    8af8:	e92d4070 	push	{r4, r5, r6, lr}
    8afc:	e1a05000 	mov	r5, r0
    8b00:	eb004ea0 	bl	1c588 <CInterruptSystem::DisableFIQ()>
    8b04:	e3a02c0e 	mov	r2, #3584	; 0xe00
    8b08:	e3a03c0a 	mov	r3, #2560	; 0xa00
    8b0c:	e59f4048 	ldr	r4, [pc, #72]	; 8b5c <BusRaider::hostReset()+0x64>
    8b10:	e3a00064 	mov	r0, #100	; 0x64
    8b14:	e5842028 	str	r2, [r4, #40]	; 0x28
    8b18:	e584301c 	str	r3, [r4, #28]
    8b1c:	eb0062bf 	bl	21620 <CTimer::SimpleusDelay(unsigned int)>
    8b20:	e3a01a03 	mov	r1, #12288	; 0x3000
    8b24:	e3e03000 	mvn	r3, #0
    8b28:	e5d50004 	ldrb	r0, [r5, #4]
    8b2c:	e5952000 	ldr	r2, [r5]
    8b30:	e3500000 	cmp	r0, #0
    8b34:	e5841028 	str	r1, [r4, #40]	; 0x28
    8b38:	e584201c 	str	r2, [r4, #28]
    8b3c:	e5843040 	str	r3, [r4, #64]	; 0x40
    8b40:	0a000001 	beq	8b4c <BusRaider::hostReset()+0x54>
    8b44:	e3a00000 	mov	r0, #0
    8b48:	eb004e46 	bl	1c468 <CInterruptSystem::EnableFIQ(unsigned int)>
    8b4c:	e3a02c0e 	mov	r2, #3584	; 0xe00
    8b50:	e59f3004 	ldr	r3, [pc, #4]	; 8b5c <BusRaider::hostReset()+0x64>
    8b54:	e5832028 	str	r2, [r3, #40]	; 0x28
    8b58:	e8bd8070 	pop	{r4, r5, r6, pc}
    8b5c:	20200000 	.word	0x20200000

00008b60 <BusRaider::hostResetHold()>:
    8b60:	e92d4010 	push	{r4, lr}
    8b64:	eb004e87 	bl	1c588 <CInterruptSystem::DisableFIQ()>
    8b68:	e3a01c0e 	mov	r1, #3584	; 0xe00
    8b6c:	e3a02c0a 	mov	r2, #2560	; 0xa00
    8b70:	e59f3008 	ldr	r3, [pc, #8]	; 8b80 <BusRaider::hostResetHold()+0x20>
    8b74:	e5831028 	str	r1, [r3, #40]	; 0x28
    8b78:	e583201c 	str	r2, [r3, #28]
    8b7c:	e8bd8010 	pop	{r4, pc}
    8b80:	20200000 	.word	0x20200000

00008b84 <BusRaider::hostNMI()>:
    8b84:	e92d4070 	push	{r4, r5, r6, lr}
    8b88:	e3a03b03 	mov	r3, #3072	; 0xc00
    8b8c:	e3a05c0e 	mov	r5, #3584	; 0xe00
    8b90:	e59f4014 	ldr	r4, [pc, #20]	; 8bac <BusRaider::hostNMI()+0x28>
    8b94:	e3a0000a 	mov	r0, #10
    8b98:	e5845028 	str	r5, [r4, #40]	; 0x28
    8b9c:	e584301c 	str	r3, [r4, #28]
    8ba0:	eb00629e 	bl	21620 <CTimer::SimpleusDelay(unsigned int)>
    8ba4:	e5845028 	str	r5, [r4, #40]	; 0x28
    8ba8:	e8bd8070 	pop	{r4, r5, r6, pc}
    8bac:	20200000 	.word	0x20200000

00008bb0 <BusRaider::hostIRQ()>:
    8bb0:	e92d4070 	push	{r4, r5, r6, lr}
    8bb4:	e3a03b01 	mov	r3, #1024	; 0x400
    8bb8:	e3a05c0e 	mov	r5, #3584	; 0xe00
    8bbc:	e59f4014 	ldr	r4, [pc, #20]	; 8bd8 <BusRaider::hostIRQ()+0x28>
    8bc0:	e3a0000a 	mov	r0, #10
    8bc4:	e5845028 	str	r5, [r4, #40]	; 0x28
    8bc8:	e584301c 	str	r3, [r4, #28]
    8bcc:	eb006293 	bl	21620 <CTimer::SimpleusDelay(unsigned int)>
    8bd0:	e5845028 	str	r5, [r4, #40]	; 0x28
    8bd4:	e8bd8070 	pop	{r4, r5, r6, pc}
    8bd8:	20200000 	.word	0x20200000

00008bdc <BusRaider::controlRequestBus()>:
    8bdc:	e3a00040 	mov	r0, #64	; 0x40
    8be0:	e3a01702 	mov	r1, #524288	; 0x80000
    8be4:	e59f3014 	ldr	r3, [pc, #20]	; 8c00 <BusRaider::controlRequestBus()+0x24>
    8be8:	e5932008 	ldr	r2, [r3, #8]
    8bec:	e20224ff 	and	r2, r2, #-16777216	; 0xff000000
    8bf0:	e5832008 	str	r2, [r3, #8]
    8bf4:	e583001c 	str	r0, [r3, #28]
    8bf8:	e5831028 	str	r1, [r3, #40]	; 0x28
    8bfc:	e12fff1e 	bx	lr
    8c00:	20200000 	.word	0x20200000

00008c04 <BusRaider::controlBusAcknowledged()>:
    8c04:	e59f300c 	ldr	r3, [pc, #12]	; 8c18 <BusRaider::controlBusAcknowledged()+0x14>
    8c08:	e5930034 	ldr	r0, [r3, #52]	; 0x34
    8c0c:	e1e00120 	mvn	r0, r0, lsr #2
    8c10:	e2000001 	and	r0, r0, #1
    8c14:	e12fff1e 	bx	lr
    8c18:	20200000 	.word	0x20200000

00008c1c <BusRaider::controlTake()>:
    8c1c:	e92d4010 	push	{r4, lr}
    8c20:	e3a04001 	mov	r4, #1
    8c24:	eb004e57 	bl	1c588 <CInterruptSystem::DisableFIQ()>
    8c28:	e3a0e002 	mov	lr, #2
    8c2c:	e3a00008 	mov	r0, #8
    8c30:	e3a0c701 	mov	ip, #262144	; 0x40000
    8c34:	e3a01802 	mov	r1, #131072	; 0x20000
    8c38:	e59f3064 	ldr	r3, [pc, #100]	; 8ca4 <BusRaider::controlTake()+0x88>
    8c3c:	e583401c 	str	r4, [r3, #28]
    8c40:	e5932000 	ldr	r2, [r3]
    8c44:	e3c22007 	bic	r2, r2, #7
    8c48:	e1822004 	orr	r2, r2, r4
    8c4c:	e5832000 	str	r2, [r3]
    8c50:	e583401c 	str	r4, [r3, #28]
    8c54:	e583e01c 	str	lr, [r3, #28]
    8c58:	e5932000 	ldr	r2, [r3]
    8c5c:	e3c22038 	bic	r2, r2, #56	; 0x38
    8c60:	e1822000 	orr	r2, r2, r0
    8c64:	e5832000 	str	r2, [r3]
    8c68:	e583e01c 	str	lr, [r3, #28]
    8c6c:	e583c01c 	str	ip, [r3, #28]
    8c70:	e5932004 	ldr	r2, [r3, #4]
    8c74:	e3c22407 	bic	r2, r2, #117440512	; 0x7000000
    8c78:	e3822401 	orr	r2, r2, #16777216	; 0x1000000
    8c7c:	e5832004 	str	r2, [r3, #4]
    8c80:	e583c01c 	str	ip, [r3, #28]
    8c84:	e583101c 	str	r1, [r3, #28]
    8c88:	e5932004 	ldr	r2, [r3, #4]
    8c8c:	e3c2260e 	bic	r2, r2, #14680064	; 0xe00000
    8c90:	e3822602 	orr	r2, r2, #2097152	; 0x200000
    8c94:	e5832004 	str	r2, [r3, #4]
    8c98:	e583101c 	str	r1, [r3, #28]
    8c9c:	e5830028 	str	r0, [r3, #40]	; 0x28
    8ca0:	e8bd8010 	pop	{r4, pc}
    8ca4:	20200000 	.word	0x20200000

00008ca8 <BusRaider::controlRelease(bool)>:
    8ca8:	e3a0c008 	mov	ip, #8
    8cac:	e59f3094 	ldr	r3, [pc, #148]	; 8d48 <BusRaider::controlRelease(bool)+0xa0>
    8cb0:	e92d4070 	push	{r4, r5, r6, lr}
    8cb4:	e5932000 	ldr	r2, [r3]
    8cb8:	e5d00004 	ldrb	r0, [r0, #4]
    8cbc:	e3c22007 	bic	r2, r2, #7
    8cc0:	e5832000 	str	r2, [r3]
    8cc4:	e5932000 	ldr	r2, [r3]
    8cc8:	e3500000 	cmp	r0, #0
    8ccc:	e3c22038 	bic	r2, r2, #56	; 0x38
    8cd0:	e5832000 	str	r2, [r3]
    8cd4:	e5932004 	ldr	r2, [r3, #4]
    8cd8:	e1a04001 	mov	r4, r1
    8cdc:	e3c22407 	bic	r2, r2, #117440512	; 0x7000000
    8ce0:	e5832004 	str	r2, [r3, #4]
    8ce4:	e5932004 	ldr	r2, [r3, #4]
    8ce8:	e3c2260e 	bic	r2, r2, #14680064	; 0xe00000
    8cec:	e5832004 	str	r2, [r3, #4]
    8cf0:	e583c01c 	str	ip, [r3, #28]
    8cf4:	1a000010 	bne	8d3c <BusRaider::controlRelease(bool)+0x94>
    8cf8:	e3540000 	cmp	r4, #0
    8cfc:	1a000003 	bne	8d10 <BusRaider::controlRelease(bool)+0x68>
    8d00:	e3a02702 	mov	r2, #524288	; 0x80000
    8d04:	e59f303c 	ldr	r3, [pc, #60]	; 8d48 <BusRaider::controlRelease(bool)+0xa0>
    8d08:	e583201c 	str	r2, [r3, #28]
    8d0c:	e8bd8070 	pop	{r4, r5, r6, pc}
    8d10:	e3a05c0e 	mov	r5, #3584	; 0xe00
    8d14:	e3a02c0a 	mov	r2, #2560	; 0xa00
    8d18:	e3a03702 	mov	r3, #524288	; 0x80000
    8d1c:	e59f4024 	ldr	r4, [pc, #36]	; 8d48 <BusRaider::controlRelease(bool)+0xa0>
    8d20:	e3a0000a 	mov	r0, #10
    8d24:	e5845028 	str	r5, [r4, #40]	; 0x28
    8d28:	e584201c 	str	r2, [r4, #28]
    8d2c:	e584301c 	str	r3, [r4, #28]
    8d30:	eb00623a 	bl	21620 <CTimer::SimpleusDelay(unsigned int)>
    8d34:	e5845028 	str	r5, [r4, #40]	; 0x28
    8d38:	e8bd8070 	pop	{r4, r5, r6, pc}
    8d3c:	e3a00000 	mov	r0, #0
    8d40:	eb004dc8 	bl	1c468 <CInterruptSystem::EnableFIQ(unsigned int)>
    8d44:	eaffffeb 	b	8cf8 <BusRaider::controlRelease(bool)+0x50>
    8d48:	20200000 	.word	0x20200000

00008d4c <BusRaider::controlReqAndTake()>:
    8d4c:	e3a0c040 	mov	ip, #64	; 0x40
    8d50:	e3a01702 	mov	r1, #524288	; 0x80000
    8d54:	e59f307c 	ldr	r3, [pc, #124]	; 8dd8 <BusRaider::controlReqAndTake()+0x8c>
    8d58:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8d5c:	e5932008 	ldr	r2, [r3, #8]
    8d60:	e1a07000 	mov	r7, r0
    8d64:	e20224ff 	and	r2, r2, #-16777216	; 0xff000000
    8d68:	e5832008 	str	r2, [r3, #8]
    8d6c:	e1a05003 	mov	r5, r3
    8d70:	e583c01c 	str	ip, [r3, #28]
    8d74:	e3a04064 	mov	r4, #100	; 0x64
    8d78:	e3a06001 	mov	r6, #1
    8d7c:	e5831028 	str	r1, [r3, #40]	; 0x28
    8d80:	ea000003 	b	8d94 <BusRaider::controlReqAndTake()+0x48>
    8d84:	e1a00006 	mov	r0, r6
    8d88:	eb006224 	bl	21620 <CTimer::SimpleusDelay(unsigned int)>
    8d8c:	e2544001 	subs	r4, r4, #1
    8d90:	0a000002 	beq	8da0 <BusRaider::controlReqAndTake()+0x54>
    8d94:	e5953034 	ldr	r3, [r5, #52]	; 0x34
    8d98:	e3130004 	tst	r3, #4
    8d9c:	1afffff8 	bne	8d84 <BusRaider::controlReqAndTake()+0x38>
    8da0:	e59f3030 	ldr	r3, [pc, #48]	; 8dd8 <BusRaider::controlReqAndTake()+0x8c>
    8da4:	e5933034 	ldr	r3, [r3, #52]	; 0x34
    8da8:	e1a03123 	lsr	r3, r3, #2
    8dac:	e2134001 	ands	r4, r3, #1
    8db0:	0a000004 	beq	8dc8 <BusRaider::controlReqAndTake()+0x7c>
    8db4:	e1a00007 	mov	r0, r7
    8db8:	e3a01000 	mov	r1, #0
    8dbc:	ebffffb9 	bl	8ca8 <BusRaider::controlRelease(bool)>
    8dc0:	e3a00002 	mov	r0, #2
    8dc4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8dc8:	e1a00007 	mov	r0, r7
    8dcc:	ebffff92 	bl	8c1c <BusRaider::controlTake()>
    8dd0:	e1a00004 	mov	r0, r4
    8dd4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8dd8:	20200000 	.word	0x20200000

00008ddc <BusRaider::addrLowSet(unsigned long)>:
    8ddc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    8de0:	e3a00f7d 	mov	r0, #500	; 0x1f4
    8de4:	e59fa060 	ldr	sl, [pc, #96]	; 8e4c <BusRaider::addrLowSet(unsigned long)+0x70>
    8de8:	e1a08001 	mov	r8, r1
    8dec:	e3a09c0e 	mov	r9, #3584	; 0xe00
    8df0:	ebfffee6 	bl	8990 <lowlevCycleDelay>
    8df4:	e3a05f7d 	mov	r5, #500	; 0x1f4
    8df8:	e3a03b02 	mov	r3, #2048	; 0x800
    8dfc:	e3a04000 	mov	r4, #0
    8e00:	e1a0700a 	mov	r7, sl
    8e04:	e3a06801 	mov	r6, #65536	; 0x10000
    8e08:	e58a9028 	str	r9, [sl, #40]	; 0x28
    8e0c:	e1a00005 	mov	r0, r5
    8e10:	e58a301c 	str	r3, [sl, #28]
    8e14:	e6ef8078 	uxtb	r8, r8
    8e18:	ebfffedc 	bl	8990 <lowlevCycleDelay>
    8e1c:	e2888001 	add	r8, r8, #1
    8e20:	e58a9028 	str	r9, [sl, #40]	; 0x28
    8e24:	e1a00005 	mov	r0, r5
    8e28:	e587601c 	str	r6, [r7, #28]
    8e2c:	ebfffed7 	bl	8990 <lowlevCycleDelay>
    8e30:	e2844001 	add	r4, r4, #1
    8e34:	e5876028 	str	r6, [r7, #40]	; 0x28
    8e38:	e1a00005 	mov	r0, r5
    8e3c:	ebfffed3 	bl	8990 <lowlevCycleDelay>
    8e40:	e1540008 	cmp	r4, r8
    8e44:	1afffff6 	bne	8e24 <BusRaider::addrLowSet(unsigned long)+0x48>
    8e48:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    8e4c:	20200000 	.word	0x20200000

00008e50 <BusRaider::addrLowInc()>:
    8e50:	e92d4070 	push	{r4, r5, r6, lr}
    8e54:	e3a05801 	mov	r5, #65536	; 0x10000
    8e58:	e59f4018 	ldr	r4, [pc, #24]	; 8e78 <BusRaider::addrLowInc()+0x28>
    8e5c:	e3a00f7d 	mov	r0, #500	; 0x1f4
    8e60:	e584501c 	str	r5, [r4, #28]
    8e64:	ebfffec9 	bl	8990 <lowlevCycleDelay>
    8e68:	e5845028 	str	r5, [r4, #40]	; 0x28
    8e6c:	e3a00f7d 	mov	r0, #500	; 0x1f4
    8e70:	e8bd4070 	pop	{r4, r5, r6, lr}
    8e74:	eafffec5 	b	8990 <lowlevCycleDelay>
    8e78:	20200000 	.word	0x20200000

00008e7c <BusRaider::addrHighSet(unsigned long)>:
    8e7c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    8e80:	e1a05001 	mov	r5, r1
    8e84:	e3a06009 	mov	r6, #9
    8e88:	e3a09c0e 	mov	r9, #3584	; 0xe00
    8e8c:	e3a08f7d 	mov	r8, #500	; 0x1f4
    8e90:	e3a07080 	mov	r7, #128	; 0x80
    8e94:	e59f4044 	ldr	r4, [pc, #68]	; 8ee0 <BusRaider::addrHighSet(unsigned long)+0x64>
    8e98:	e2153080 	ands	r3, r5, #128	; 0x80
    8e9c:	e5849028 	str	r9, [r4, #40]	; 0x28
    8ea0:	e1a00008 	mov	r0, r8
    8ea4:	1584901c 	strne	r9, [r4, #28]
    8ea8:	0584301c 	streq	r3, [r4, #28]
    8eac:	ebfffeb7 	bl	8990 <lowlevCycleDelay>
    8eb0:	e584701c 	str	r7, [r4, #28]
    8eb4:	e1a00008 	mov	r0, r8
    8eb8:	ebfffeb4 	bl	8990 <lowlevCycleDelay>
    8ebc:	e2566001 	subs	r6, r6, #1
    8ec0:	e1a05085 	lsl	r5, r5, #1
    8ec4:	e5847028 	str	r7, [r4, #40]	; 0x28
    8ec8:	1afffff2 	bne	8e98 <BusRaider::addrHighSet(unsigned long)+0x1c>
    8ecc:	e3a00f7d 	mov	r0, #500	; 0x1f4
    8ed0:	ebfffeae 	bl	8990 <lowlevCycleDelay>
    8ed4:	e3a03c0e 	mov	r3, #3584	; 0xe00
    8ed8:	e5843028 	str	r3, [r4, #40]	; 0x28
    8edc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    8ee0:	20200000 	.word	0x20200000

00008ee4 <BusRaider::addrSet(unsigned int)>:
    8ee4:	e92d4070 	push	{r4, r5, r6, lr}
    8ee8:	e1a04001 	mov	r4, r1
    8eec:	e1a05000 	mov	r5, r0
    8ef0:	e1a01421 	lsr	r1, r1, #8
    8ef4:	ebffffe0 	bl	8e7c <BusRaider::addrHighSet(unsigned long)>
    8ef8:	e6ef1074 	uxtb	r1, r4
    8efc:	e1a00005 	mov	r0, r5
    8f00:	e8bd4070 	pop	{r4, r5, r6, lr}
    8f04:	eaffffb4 	b	8ddc <BusRaider::addrLowSet(unsigned long)>

00008f08 <BusRaider::byteWrite(unsigned long, int)>:
    8f08:	e1a01a01 	lsl	r1, r1, #20
    8f0c:	e20116ff 	and	r1, r1, #267386880	; 0xff00000
    8f10:	e1e00001 	mvn	r0, r1
    8f14:	e59f3074 	ldr	r3, [pc, #116]	; 8f90 <BusRaider::byteWrite(unsigned long, int)+0x88>
    8f18:	e20006ff 	and	r0, r0, #267386880	; 0xff00000
    8f1c:	e3520000 	cmp	r2, #0
    8f20:	e92d4010 	push	{r4, lr}
    8f24:	e583101c 	str	r1, [r3, #28]
    8f28:	e5830028 	str	r0, [r3, #40]	; 0x28
    8f2c:	0a00000d 	beq	8f68 <BusRaider::byteWrite(unsigned long, int)+0x60>
    8f30:	e3a02802 	mov	r2, #131072	; 0x20000
    8f34:	e3a01c02 	mov	r1, #512	; 0x200
    8f38:	e59fc054 	ldr	ip, [pc, #84]	; 8f94 <BusRaider::byteWrite(unsigned long, int)+0x8c>
    8f3c:	e3a00f7d 	mov	r0, #500	; 0x1f4
    8f40:	e583c028 	str	ip, [r3, #40]	; 0x28
    8f44:	e583101c 	str	r1, [r3, #28]
    8f48:	e5832028 	str	r2, [r3, #40]	; 0x28
    8f4c:	ebfffe8f 	bl	8990 <lowlevCycleDelay>
    8f50:	e59f2040 	ldr	r2, [pc, #64]	; 8f98 <BusRaider::byteWrite(unsigned long, int)+0x90>
    8f54:	e3a01c0e 	mov	r1, #3584	; 0xe00
    8f58:	e59f3030 	ldr	r3, [pc, #48]	; 8f90 <BusRaider::byteWrite(unsigned long, int)+0x88>
    8f5c:	e583201c 	str	r2, [r3, #28]
    8f60:	e5831028 	str	r1, [r3, #40]	; 0x28
    8f64:	e8bd8010 	pop	{r4, pc}
    8f68:	e3a02802 	mov	r2, #131072	; 0x20000
    8f6c:	e3a01c02 	mov	r1, #512	; 0x200
    8f70:	e59fc024 	ldr	ip, [pc, #36]	; 8f9c <BusRaider::byteWrite(unsigned long, int)+0x94>
    8f74:	e3a00f7d 	mov	r0, #500	; 0x1f4
    8f78:	e583c028 	str	ip, [r3, #40]	; 0x28
    8f7c:	e583101c 	str	r1, [r3, #28]
    8f80:	e5832028 	str	r2, [r3, #40]	; 0x28
    8f84:	ebfffe81 	bl	8990 <lowlevCycleDelay>
    8f88:	e59f2010 	ldr	r2, [pc, #16]	; 8fa0 <BusRaider::byteWrite(unsigned long, int)+0x98>
    8f8c:	eafffff0 	b	8f54 <BusRaider::byteWrite(unsigned long, int)+0x4c>
    8f90:	20200000 	.word	0x20200000
    8f94:	00000e42 	.word	0x00000e42
    8f98:	00020042 	.word	0x00020042
    8f9c:	00000e41 	.word	0x00000e41
    8fa0:	00020041 	.word	0x00020041

00008fa4 <BusRaider::byteRead(int)>:
    8fa4:	e3510000 	cmp	r1, #0
    8fa8:	e92d4010 	push	{r4, lr}
    8fac:	e3a03c02 	mov	r3, #512	; 0x200
    8fb0:	e59f4060 	ldr	r4, [pc, #96]	; 9018 <BusRaider::byteRead(int)+0x74>
    8fb4:	1a00000d 	bne	8ff0 <BusRaider::byteRead(int)+0x4c>
    8fb8:	e59f205c 	ldr	r2, [pc, #92]	; 901c <BusRaider::byteRead(int)+0x78>
    8fbc:	e3a00f7d 	mov	r0, #500	; 0x1f4
    8fc0:	e5842028 	str	r2, [r4, #40]	; 0x28
    8fc4:	e584301c 	str	r3, [r4, #28]
    8fc8:	ebfffe70 	bl	8990 <lowlevCycleDelay>
    8fcc:	e5940034 	ldr	r0, [r4, #52]	; 0x34
    8fd0:	e59f2048 	ldr	r2, [pc, #72]	; 9020 <BusRaider::byteRead(int)+0x7c>
    8fd4:	e1a00a20 	lsr	r0, r0, #20
    8fd8:	e6ef0070 	uxtb	r0, r0
    8fdc:	e3a01c0e 	mov	r1, #3584	; 0xe00
    8fe0:	e59f3030 	ldr	r3, [pc, #48]	; 9018 <BusRaider::byteRead(int)+0x74>
    8fe4:	e583201c 	str	r2, [r3, #28]
    8fe8:	e5831028 	str	r1, [r3, #40]	; 0x28
    8fec:	e8bd8010 	pop	{r4, pc}
    8ff0:	e59f202c 	ldr	r2, [pc, #44]	; 9024 <BusRaider::byteRead(int)+0x80>
    8ff4:	e3a00f7d 	mov	r0, #500	; 0x1f4
    8ff8:	e5842028 	str	r2, [r4, #40]	; 0x28
    8ffc:	e584301c 	str	r3, [r4, #28]
    9000:	ebfffe62 	bl	8990 <lowlevCycleDelay>
    9004:	e5940034 	ldr	r0, [r4, #52]	; 0x34
    9008:	e59f2018 	ldr	r2, [pc, #24]	; 9028 <BusRaider::byteRead(int)+0x84>
    900c:	e1a00a20 	lsr	r0, r0, #20
    9010:	e6ef0070 	uxtb	r0, r0
    9014:	eafffff0 	b	8fdc <BusRaider::byteRead(int)+0x38>
    9018:	20200000 	.word	0x20200000
    901c:	00040e01 	.word	0x00040e01
    9020:	00040001 	.word	0x00040001
    9024:	00040e02 	.word	0x00040e02
    9028:	00040002 	.word	0x00040002

0000902c <BusRaider::blockWrite(unsigned long, unsigned char const*, unsigned long, int, int)>:
    902c:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9030:	e1a09002 	mov	r9, r2
    9034:	e59d2028 	ldr	r2, [sp, #40]	; 0x28
    9038:	e1a0a003 	mov	sl, r3
    903c:	e3520000 	cmp	r2, #0
    9040:	e1a07000 	mov	r7, r0
    9044:	e1a08001 	mov	r8, r1
    9048:	0a000034 	beq	9120 <BusRaider::blockWrite(unsigned long, unsigned char const*, unsigned long, int, int)+0xf4>
    904c:	ebffff3e 	bl	8d4c <BusRaider::controlReqAndTake()>
    9050:	e3500000 	cmp	r0, #0
    9054:	1a00004a 	bne	9184 <BusRaider::blockWrite(unsigned long, unsigned char const*, unsigned long, int, int)+0x158>
    9058:	e59f4128 	ldr	r4, [pc, #296]	; 9188 <BusRaider::blockWrite(unsigned long, unsigned char const*, unsigned long, int, int)+0x15c>
    905c:	e1a01008 	mov	r1, r8
    9060:	e5943008 	ldr	r3, [r4, #8]
    9064:	e1a00007 	mov	r0, r7
    9068:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
    906c:	e5843008 	str	r3, [r4, #8]
    9070:	ebffff9b 	bl	8ee4 <BusRaider::addrSet(unsigned int)>
    9074:	e5942008 	ldr	r2, [r4, #8]
    9078:	e59f310c 	ldr	r3, [pc, #268]	; 918c <BusRaider::blockWrite(unsigned long, unsigned char const*, unsigned long, int, int)+0x160>
    907c:	e20224ff 	and	r2, r2, #-16777216	; 0xff000000
    9080:	e1823003 	orr	r3, r2, r3
    9084:	e35a0000 	cmp	sl, #0
    9088:	e5843008 	str	r3, [r4, #8]
    908c:	0a000034 	beq	9164 <BusRaider::blockWrite(unsigned long, unsigned char const*, unsigned long, int, int)+0x138>
    9090:	e1a0b009 	mov	fp, r9
    9094:	e3a06801 	mov	r6, #65536	; 0x10000
    9098:	e3a05f7d 	mov	r5, #500	; 0x1f4
    909c:	e59f40e4 	ldr	r4, [pc, #228]	; 9188 <BusRaider::blockWrite(unsigned long, unsigned char const*, unsigned long, int, int)+0x15c>
    90a0:	e0488009 	sub	r8, r8, r9
    90a4:	ea000002 	b	90b4 <BusRaider::blockWrite(unsigned long, unsigned char const*, unsigned long, int, int)+0x88>
    90a8:	e04b2009 	sub	r2, fp, r9
    90ac:	e152000a 	cmp	r2, sl
    90b0:	2a000011 	bcs	90fc <BusRaider::blockWrite(unsigned long, unsigned char const*, unsigned long, int, int)+0xd0>
    90b4:	e4db1001 	ldrb	r1, [fp], #1
    90b8:	e59d202c 	ldr	r2, [sp, #44]	; 0x2c
    90bc:	e1a00007 	mov	r0, r7
    90c0:	ebffff90 	bl	8f08 <BusRaider::byteWrite(unsigned long, int)>
    90c4:	e1a00005 	mov	r0, r5
    90c8:	e584601c 	str	r6, [r4, #28]
    90cc:	ebfffe2f 	bl	8990 <lowlevCycleDelay>
    90d0:	e5846028 	str	r6, [r4, #40]	; 0x28
    90d4:	e1a00005 	mov	r0, r5
    90d8:	ebfffe2c 	bl	8990 <lowlevCycleDelay>
    90dc:	e08b1008 	add	r1, fp, r8
    90e0:	e31100ff 	tst	r1, #255	; 0xff
    90e4:	1affffef 	bne	90a8 <BusRaider::blockWrite(unsigned long, unsigned char const*, unsigned long, int, int)+0x7c>
    90e8:	e1a00007 	mov	r0, r7
    90ec:	ebffff7c 	bl	8ee4 <BusRaider::addrSet(unsigned int)>
    90f0:	e04b2009 	sub	r2, fp, r9
    90f4:	e152000a 	cmp	r2, sl
    90f8:	3affffed 	bcc	90b4 <BusRaider::blockWrite(unsigned long, unsigned char const*, unsigned long, int, int)+0x88>
    90fc:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
    9100:	e59f2080 	ldr	r2, [pc, #128]	; 9188 <BusRaider::blockWrite(unsigned long, unsigned char const*, unsigned long, int, int)+0x15c>
    9104:	e3530000 	cmp	r3, #0
    9108:	e5923008 	ldr	r3, [r2, #8]
    910c:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
    9110:	e5823008 	str	r3, [r2, #8]
    9114:	1a000015 	bne	9170 <BusRaider::blockWrite(unsigned long, unsigned char const*, unsigned long, int, int)+0x144>
    9118:	e3a00000 	mov	r0, #0
    911c:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9120:	e59f4060 	ldr	r4, [pc, #96]	; 9188 <BusRaider::blockWrite(unsigned long, unsigned char const*, unsigned long, int, int)+0x15c>
    9124:	e5943008 	ldr	r3, [r4, #8]
    9128:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
    912c:	e5843008 	str	r3, [r4, #8]
    9130:	ebffff6b 	bl	8ee4 <BusRaider::addrSet(unsigned int)>
    9134:	e5942008 	ldr	r2, [r4, #8]
    9138:	e59f304c 	ldr	r3, [pc, #76]	; 918c <BusRaider::blockWrite(unsigned long, unsigned char const*, unsigned long, int, int)+0x160>
    913c:	e20224ff 	and	r2, r2, #-16777216	; 0xff000000
    9140:	e1823003 	orr	r3, r2, r3
    9144:	e35a0000 	cmp	sl, #0
    9148:	e5843008 	str	r3, [r4, #8]
    914c:	1affffcf 	bne	9090 <BusRaider::blockWrite(unsigned long, unsigned char const*, unsigned long, int, int)+0x64>
    9150:	e5943008 	ldr	r3, [r4, #8]
    9154:	e1a0000a 	mov	r0, sl
    9158:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
    915c:	e5843008 	str	r3, [r4, #8]
    9160:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9164:	e5943008 	ldr	r3, [r4, #8]
    9168:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
    916c:	e5843008 	str	r3, [r4, #8]
    9170:	e1a00007 	mov	r0, r7
    9174:	e3a01000 	mov	r1, #0
    9178:	ebfffeca 	bl	8ca8 <BusRaider::controlRelease(bool)>
    917c:	e3a00000 	mov	r0, #0
    9180:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9184:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9188:	20200000 	.word	0x20200000
    918c:	00249249 	.word	0x00249249

00009190 <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)>:
    9190:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9194:	e24dd00c 	sub	sp, sp, #12
    9198:	e1a07002 	mov	r7, r2
    919c:	e59d2030 	ldr	r2, [sp, #48]	; 0x30
    91a0:	e1a09003 	mov	r9, r3
    91a4:	e3520000 	cmp	r2, #0
    91a8:	e58d0004 	str	r0, [sp, #4]
    91ac:	e1a06001 	mov	r6, r1
    91b0:	0a00003d 	beq	92ac <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0x11c>
    91b4:	ebfffee4 	bl	8d4c <BusRaider::controlReqAndTake()>
    91b8:	e3500000 	cmp	r0, #0
    91bc:	1a000038 	bne	92a4 <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0x114>
    91c0:	e59f4134 	ldr	r4, [pc, #308]	; 92fc <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0x16c>
    91c4:	e59d0004 	ldr	r0, [sp, #4]
    91c8:	e5943008 	ldr	r3, [r4, #8]
    91cc:	e1a01006 	mov	r1, r6
    91d0:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
    91d4:	e5843008 	str	r3, [r4, #8]
    91d8:	ebffff41 	bl	8ee4 <BusRaider::addrSet(unsigned int)>
    91dc:	e3a03c02 	mov	r3, #512	; 0x200
    91e0:	e3590000 	cmp	r9, #0
    91e4:	e584301c 	str	r3, [r4, #28]
    91e8:	0a00003c 	beq	92e0 <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0x150>
    91ec:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
    91f0:	e0466007 	sub	r6, r6, r7
    91f4:	e3530000 	cmp	r3, #0
    91f8:	e1a03006 	mov	r3, r6
    91fc:	e59f20fc 	ldr	r2, [pc, #252]	; 9300 <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0x170>
    9200:	e59f80fc 	ldr	r8, [pc, #252]	; 9304 <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0x174>
    9204:	e3a05f7d 	mov	r5, #500	; 0x1f4
    9208:	01a08002 	moveq	r8, r2
    920c:	e3a0b801 	mov	fp, #65536	; 0x10000
    9210:	e59f40e4 	ldr	r4, [pc, #228]	; 92fc <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0x16c>
    9214:	e1a06007 	mov	r6, r7
    9218:	e1a0a003 	mov	sl, r3
    921c:	ea000002 	b	922c <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0x9c>
    9220:	e0462007 	sub	r2, r6, r7
    9224:	e1520009 	cmp	r2, r9
    9228:	2a000016 	bcs	9288 <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0xf8>
    922c:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
    9230:	e3530000 	cmp	r3, #0
    9234:	159f30cc 	ldrne	r3, [pc, #204]	; 9308 <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0x178>
    9238:	059f30cc 	ldreq	r3, [pc, #204]	; 930c <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0x17c>
    923c:	e5843028 	str	r3, [r4, #40]	; 0x28
    9240:	e1a00005 	mov	r0, r5
    9244:	ebfffdd1 	bl	8990 <lowlevCycleDelay>
    9248:	e5942034 	ldr	r2, [r4, #52]	; 0x34
    924c:	e2866001 	add	r6, r6, #1
    9250:	e1a02a22 	lsr	r2, r2, #20
    9254:	e5462001 	strb	r2, [r6, #-1]
    9258:	e1a00005 	mov	r0, r5
    925c:	e584801c 	str	r8, [r4, #28]
    9260:	ebfffdca 	bl	8990 <lowlevCycleDelay>
    9264:	e086100a 	add	r1, r6, sl
    9268:	e31100ff 	tst	r1, #255	; 0xff
    926c:	e584b028 	str	fp, [r4, #40]	; 0x28
    9270:	1affffea 	bne	9220 <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0x90>
    9274:	e59d0004 	ldr	r0, [sp, #4]
    9278:	ebffff19 	bl	8ee4 <BusRaider::addrSet(unsigned int)>
    927c:	e0462007 	sub	r2, r6, r7
    9280:	e1520009 	cmp	r2, r9
    9284:	3affffe8 	bcc	922c <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0x9c>
    9288:	e3a02c0e 	mov	r2, #3584	; 0xe00
    928c:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
    9290:	e59f3064 	ldr	r3, [pc, #100]	; 92fc <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0x16c>
    9294:	e3510000 	cmp	r1, #0
    9298:	e5832028 	str	r2, [r3, #40]	; 0x28
    929c:	1a000011 	bne	92e8 <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0x158>
    92a0:	e3a00000 	mov	r0, #0
    92a4:	e28dd00c 	add	sp, sp, #12
    92a8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    92ac:	e59f4048 	ldr	r4, [pc, #72]	; 92fc <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0x16c>
    92b0:	e5943008 	ldr	r3, [r4, #8]
    92b4:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
    92b8:	e5843008 	str	r3, [r4, #8]
    92bc:	ebffff08 	bl	8ee4 <BusRaider::addrSet(unsigned int)>
    92c0:	e3a03c02 	mov	r3, #512	; 0x200
    92c4:	e3590000 	cmp	r9, #0
    92c8:	e584301c 	str	r3, [r4, #28]
    92cc:	1affffc6 	bne	91ec <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0x5c>
    92d0:	e3a03c0e 	mov	r3, #3584	; 0xe00
    92d4:	e1a00009 	mov	r0, r9
    92d8:	e5843028 	str	r3, [r4, #40]	; 0x28
    92dc:	eafffff0 	b	92a4 <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0x114>
    92e0:	e3a03c0e 	mov	r3, #3584	; 0xe00
    92e4:	e5843028 	str	r3, [r4, #40]	; 0x28
    92e8:	e59d0004 	ldr	r0, [sp, #4]
    92ec:	e3a01000 	mov	r1, #0
    92f0:	ebfffe6c 	bl	8ca8 <BusRaider::controlRelease(bool)>
    92f4:	e3a00000 	mov	r0, #0
    92f8:	eaffffe9 	b	92a4 <BusRaider::blockRead(unsigned long, unsigned char*, unsigned long, int, int)+0x114>
    92fc:	20200000 	.word	0x20200000
    9300:	00050001 	.word	0x00050001
    9304:	00050002 	.word	0x00050002
    9308:	00040002 	.word	0x00040002
    930c:	00040001 	.word	0x00040001

00009310 <BusRaider::muxSet(int)>:
    9310:	e3a02c0e 	mov	r2, #3584	; 0xe00
    9314:	e59f300c 	ldr	r3, [pc, #12]	; 9328 <BusRaider::muxSet(int)+0x18>
    9318:	e1a01481 	lsl	r1, r1, #9
    931c:	e5832028 	str	r2, [r3, #40]	; 0x28
    9320:	e583101c 	str	r1, [r3, #28]
    9324:	e12fff1e 	bx	lr
    9328:	20200000 	.word	0x20200000

0000932c <BusRaider::muxClear()>:
    932c:	e3a02c0e 	mov	r2, #3584	; 0xe00
    9330:	e59f3004 	ldr	r3, [pc, #4]	; 933c <BusRaider::muxClear()+0x10>
    9334:	e5832028 	str	r2, [r3, #40]	; 0x28
    9338:	e12fff1e 	bx	lr
    933c:	20200000 	.word	0x20200000

00009340 <BusRaider::waitIntClear()>:
    9340:	e3e02000 	mvn	r2, #0
    9344:	e59f3004 	ldr	r3, [pc, #4]	; 9350 <BusRaider::waitIntClear()+0x10>
    9348:	e5832040 	str	r2, [r3, #64]	; 0x40
    934c:	e12fff1e 	bx	lr
    9350:	20200000 	.word	0x20200000

00009354 <BusRaider::waitIntDisable()>:
    9354:	ea004c8b 	b	1c588 <CInterruptSystem::DisableFIQ()>

00009358 <BusRaider::waitIntEnable()>:
    9358:	e3a00000 	mov	r0, #0
    935c:	ea004c41 	b	1c468 <CInterruptSystem::EnableFIQ(unsigned int)>

00009360 <BusRaider::pibSetOut()>:
    9360:	e59f1014 	ldr	r1, [pc, #20]	; 937c <BusRaider::pibSetOut()+0x1c>
    9364:	e59f3014 	ldr	r3, [pc, #20]	; 9380 <BusRaider::pibSetOut()+0x20>
    9368:	e5912008 	ldr	r2, [r1, #8]
    936c:	e20224ff 	and	r2, r2, #-16777216	; 0xff000000
    9370:	e1823003 	orr	r3, r2, r3
    9374:	e5813008 	str	r3, [r1, #8]
    9378:	e12fff1e 	bx	lr
    937c:	20200000 	.word	0x20200000
    9380:	00249249 	.word	0x00249249

00009384 <BusRaider::pibSetIn()>:
    9384:	e59f200c 	ldr	r2, [pc, #12]	; 9398 <BusRaider::pibSetIn()+0x14>
    9388:	e5923008 	ldr	r3, [r2, #8]
    938c:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
    9390:	e5823008 	str	r3, [r2, #8]
    9394:	e12fff1e 	bx	lr
    9398:	20200000 	.word	0x20200000

0000939c <BusRaider::pibSetValue(unsigned char)>:
    939c:	e1a01a01 	lsl	r1, r1, #20
    93a0:	e1e03001 	mvn	r3, r1
    93a4:	e59f200c 	ldr	r2, [pc, #12]	; 93b8 <BusRaider::pibSetValue(unsigned char)+0x1c>
    93a8:	e20336ff 	and	r3, r3, #267386880	; 0xff00000
    93ac:	e582101c 	str	r1, [r2, #28]
    93b0:	e5823028 	str	r3, [r2, #40]	; 0x28
    93b4:	e12fff1e 	bx	lr
    93b8:	20200000 	.word	0x20200000

000093bc <BusRaider::pibGetValue()>:
    93bc:	e59f300c 	ldr	r3, [pc, #12]	; 93d0 <BusRaider::pibGetValue()+0x14>
    93c0:	e5930034 	ldr	r0, [r3, #52]	; 0x34
    93c4:	e1a00a20 	lsr	r0, r0, #20
    93c8:	e6ef0070 	uxtb	r0, r0
    93cc:	e12fff1e 	bx	lr
    93d0:	20200000 	.word	0x20200000

000093d4 <BusRaider::pinRawMode(int, bool, bool)>:
    93d4:	e3520000 	cmp	r2, #0
    93d8:	1a000028 	bne	9480 <BusRaider::pinRawMode(int, bool, bool)+0xac>
    93dc:	e3530000 	cmp	r3, #0
    93e0:	e92d4010 	push	{r4, lr}
    93e4:	e1a04003 	mov	r4, r3
    93e8:	1a000034 	bne	94c0 <BusRaider::pinRawMode(int, bool, bool)+0xec>
    93ec:	e3a03001 	mov	r3, #1
    93f0:	e351001f 	cmp	r1, #31
    93f4:	d59f20dc 	ldrle	r2, [pc, #220]	; 94d8 <BusRaider::pinRawMode(int, bool, bool)+0x104>
    93f8:	c2410020 	subgt	r0, r1, #32
    93fc:	c59f20d4 	ldrgt	r2, [pc, #212]	; 94d8 <BusRaider::pinRawMode(int, bool, bool)+0x104>
    9400:	d1a03113 	lslle	r3, r3, r1
    9404:	c1a03013 	lslgt	r3, r3, r0
    9408:	d5823028 	strle	r3, [r2, #40]	; 0x28
    940c:	c582302c 	strgt	r3, [r2, #44]	; 0x2c
    9410:	e3a03001 	mov	r3, #1
    9414:	e3a0c007 	mov	ip, #7
    9418:	e59f00bc 	ldr	r0, [pc, #188]	; 94dc <BusRaider::pinRawMode(int, bool, bool)+0x108>
    941c:	e1a02fc1 	asr	r2, r1, #31
    9420:	e0c0e190 	smull	lr, r0, r0, r1
    9424:	e0622140 	rsb	r2, r2, r0, asr #2
    9428:	e2820302 	add	r0, r2, #134217728	; 0x8000000
    942c:	e2800702 	add	r0, r0, #524288	; 0x80000
    9430:	e0822102 	add	r2, r2, r2, lsl #2
    9434:	e1a00100 	lsl	r0, r0, #2
    9438:	e0412312 	sub	r2, r1, r2, lsl r3
    943c:	e590e000 	ldr	lr, [r0]
    9440:	e0822312 	add	r2, r2, r2, lsl r3
    9444:	e6ef2072 	uxtb	r2, r2
    9448:	e1cec21c 	bic	ip, lr, ip, lsl r2
    944c:	e18c2213 	orr	r2, ip, r3, lsl r2
    9450:	e3540000 	cmp	r4, #0
    9454:	e5802000 	str	r2, [r0]
    9458:	1a00001b 	bne	94cc <BusRaider::pinRawMode(int, bool, bool)+0xf8>
    945c:	e351001f 	cmp	r1, #31
    9460:	d59f2070 	ldrle	r2, [pc, #112]	; 94d8 <BusRaider::pinRawMode(int, bool, bool)+0x104>
    9464:	c2411020 	subgt	r1, r1, #32
    9468:	c59f2068 	ldrgt	r2, [pc, #104]	; 94d8 <BusRaider::pinRawMode(int, bool, bool)+0x104>
    946c:	d1a01113 	lslle	r1, r3, r1
    9470:	c1a03113 	lslgt	r3, r3, r1
    9474:	d5821028 	strle	r1, [r2, #40]	; 0x28
    9478:	c582302c 	strgt	r3, [r2, #44]	; 0x2c
    947c:	e8bd8010 	pop	{r4, pc}
    9480:	e3a00007 	mov	r0, #7
    9484:	e59f2050 	ldr	r2, [pc, #80]	; 94dc <BusRaider::pinRawMode(int, bool, bool)+0x108>
    9488:	e1a03fc1 	asr	r3, r1, #31
    948c:	e0c2c192 	smull	ip, r2, r2, r1
    9490:	e0633142 	rsb	r3, r3, r2, asr #2
    9494:	e2832302 	add	r2, r3, #134217728	; 0x8000000
    9498:	e2822702 	add	r2, r2, #524288	; 0x80000
    949c:	e0833103 	add	r3, r3, r3, lsl #2
    94a0:	e1a02102 	lsl	r2, r2, #2
    94a4:	e0411083 	sub	r1, r1, r3, lsl #1
    94a8:	e0811081 	add	r1, r1, r1, lsl #1
    94ac:	e5923000 	ldr	r3, [r2]
    94b0:	e6ef1071 	uxtb	r1, r1
    94b4:	e1c31110 	bic	r1, r3, r0, lsl r1
    94b8:	e5821000 	str	r1, [r2]
    94bc:	e12fff1e 	bx	lr
    94c0:	e1a00001 	mov	r0, r1
    94c4:	ebfffd4d 	bl	8a00 <BusRaider::pinRawWrite(int, bool) [clone .part.0]>
    94c8:	eaffffd0 	b	9410 <BusRaider::pinRawMode(int, bool, bool)+0x3c>
    94cc:	e1a00001 	mov	r0, r1
    94d0:	e8bd4010 	pop	{r4, lr}
    94d4:	eafffd49 	b	8a00 <BusRaider::pinRawWrite(int, bool) [clone .part.0]>
    94d8:	20200000 	.word	0x20200000
    94dc:	66666667 	.word	0x66666667

000094e0 <BusRaider::setPinOut(CGPIOPin&, int, bool)>:
    94e0:	e1a01002 	mov	r1, r2
    94e4:	e3a02000 	mov	r2, #0
    94e8:	eaffffb9 	b	93d4 <BusRaider::pinRawMode(int, bool, bool)>

000094ec <BusRaider::setPinIn(CGPIOPin&, int)>:
    94ec:	e1a01002 	mov	r1, r2
    94f0:	e3a03000 	mov	r3, #0
    94f4:	e3a02001 	mov	r2, #1
    94f8:	eaffffb5 	b	93d4 <BusRaider::pinRawMode(int, bool, bool)>

000094fc <BusRaider::init()>:
    94fc:	e92d4070 	push	{r4, r5, r6, lr}
    9500:	e1a04000 	mov	r4, r0
    9504:	eb004c1f 	bl	1c588 <CInterruptSystem::DisableFIQ()>
    9508:	e3a03000 	mov	r3, #0
    950c:	e1a00004 	mov	r0, r4
    9510:	e1a02003 	mov	r2, r3
    9514:	e3a0100b 	mov	r1, #11
    9518:	ebffffad 	bl	93d4 <BusRaider::pinRawMode(int, bool, bool)>
    951c:	e3a03000 	mov	r3, #0
    9520:	e1a00004 	mov	r0, r4
    9524:	e1a02003 	mov	r2, r3
    9528:	e3a01009 	mov	r1, #9
    952c:	ebffffa8 	bl	93d4 <BusRaider::pinRawMode(int, bool, bool)>
    9530:	e3a03000 	mov	r3, #0
    9534:	e1a00004 	mov	r0, r4
    9538:	e1a02003 	mov	r2, r3
    953c:	e3a0100a 	mov	r1, #10
    9540:	ebffffa3 	bl	93d4 <BusRaider::pinRawMode(int, bool, bool)>
    9544:	e1a00004 	mov	r0, r4
    9548:	e3a03001 	mov	r3, #1
    954c:	e3a02000 	mov	r2, #0
    9550:	e3a01013 	mov	r1, #19
    9554:	ebffff9e 	bl	93d4 <BusRaider::pinRawMode(int, bool, bool)>
    9558:	e3a03000 	mov	r3, #0
    955c:	e59fc130 	ldr	ip, [pc, #304]	; 9694 <BusRaider::init()+0x198>
    9560:	e1a05003 	mov	r5, r3
    9564:	e59c2000 	ldr	r2, [ip]
    9568:	e1a00004 	mov	r0, r4
    956c:	e3c22d07 	bic	r2, r2, #448	; 0x1c0
    9570:	e58c2000 	str	r2, [ip]
    9574:	e59c1008 	ldr	r1, [ip, #8]
    9578:	e1a02003 	mov	r2, r3
    957c:	e3c11007 	bic	r1, r1, #7
    9580:	e58c1008 	str	r1, [ip, #8]
    9584:	e59ce008 	ldr	lr, [ip, #8]
    9588:	e3a0100d 	mov	r1, #13
    958c:	e3cee038 	bic	lr, lr, #56	; 0x38
    9590:	e58ce008 	str	lr, [ip, #8]
    9594:	e59ce008 	ldr	lr, [ip, #8]
    9598:	e3ceed07 	bic	lr, lr, #448	; 0x1c0
    959c:	e58ce008 	str	lr, [ip, #8]
    95a0:	e59ce008 	ldr	lr, [ip, #8]
    95a4:	e3ceec0e 	bic	lr, lr, #3584	; 0xe00
    95a8:	e58ce008 	str	lr, [ip, #8]
    95ac:	e59ce008 	ldr	lr, [ip, #8]
    95b0:	e3ceea07 	bic	lr, lr, #28672	; 0x7000
    95b4:	e58ce008 	str	lr, [ip, #8]
    95b8:	e59ce008 	ldr	lr, [ip, #8]
    95bc:	e3cee90e 	bic	lr, lr, #229376	; 0x38000
    95c0:	e58ce008 	str	lr, [ip, #8]
    95c4:	e59ce008 	ldr	lr, [ip, #8]
    95c8:	e3cee707 	bic	lr, lr, #1835008	; 0x1c0000
    95cc:	e58ce008 	str	lr, [ip, #8]
    95d0:	e59ce008 	ldr	lr, [ip, #8]
    95d4:	e3cee60e 	bic	lr, lr, #14680064	; 0xe00000
    95d8:	e58ce008 	str	lr, [ip, #8]
    95dc:	e59ce000 	ldr	lr, [ip]
    95e0:	e3cee007 	bic	lr, lr, #7
    95e4:	e58ce000 	str	lr, [ip]
    95e8:	e59ce000 	ldr	lr, [ip]
    95ec:	e3cee038 	bic	lr, lr, #56	; 0x38
    95f0:	e58ce000 	str	lr, [ip]
    95f4:	e59ce004 	ldr	lr, [ip, #4]
    95f8:	e3cee407 	bic	lr, lr, #117440512	; 0x7000000
    95fc:	e58ce004 	str	lr, [ip, #4]
    9600:	e59ce004 	ldr	lr, [ip, #4]
    9604:	e3cee60e 	bic	lr, lr, #14680064	; 0xe00000
    9608:	e58ce004 	str	lr, [ip, #4]
    960c:	ebffff70 	bl	93d4 <BusRaider::pinRawMode(int, bool, bool)>
    9610:	e1a03005 	mov	r3, r5
    9614:	e1a00004 	mov	r0, r4
    9618:	e1a02005 	mov	r2, r5
    961c:	e3a0100c 	mov	r1, #12
    9620:	ebffff6b 	bl	93d4 <BusRaider::pinRawMode(int, bool, bool)>
    9624:	e1a02005 	mov	r2, r5
    9628:	e1a00004 	mov	r0, r4
    962c:	e5845000 	str	r5, [r4]
    9630:	e3a03001 	mov	r3, #1
    9634:	e3a01003 	mov	r1, #3
    9638:	ebffff65 	bl	93d4 <BusRaider::pinRawMode(int, bool, bool)>
    963c:	e1a03005 	mov	r3, r5
    9640:	e1a02005 	mov	r2, r5
    9644:	e1a00004 	mov	r0, r4
    9648:	e3a01007 	mov	r1, #7
    964c:	ebffff60 	bl	93d4 <BusRaider::pinRawMode(int, bool, bool)>
    9650:	e1a03005 	mov	r3, r5
    9654:	e1a02005 	mov	r2, r5
    9658:	e1a00004 	mov	r0, r4
    965c:	e3a01010 	mov	r1, #16
    9660:	ebffff5b 	bl	93d4 <BusRaider::pinRawMode(int, bool, bool)>
    9664:	e1a02005 	mov	r2, r5
    9668:	e1a00004 	mov	r0, r4
    966c:	e3a03001 	mov	r3, #1
    9670:	e3a01006 	mov	r1, #6
    9674:	ebffff56 	bl	93d4 <BusRaider::pinRawMode(int, bool, bool)>
    9678:	e5c45004 	strb	r5, [r4, #4]
    967c:	e1a00004 	mov	r0, r4
    9680:	e1a03005 	mov	r3, r5
    9684:	e1a02005 	mov	r2, r5
    9688:	e8bd4070 	pop	{r4, r5, r6, lr}
    968c:	e3a01008 	mov	r1, #8
    9690:	eaffff4f 	b	93d4 <BusRaider::pinRawMode(int, bool, bool)>
    9694:	20200000 	.word	0x20200000

00009698 <BusRaider::pinRawWrite(int, bool)>:
    9698:	e3520000 	cmp	r2, #0
    969c:	0a000001 	beq	96a8 <BusRaider::pinRawWrite(int, bool)+0x10>
    96a0:	e1a00001 	mov	r0, r1
    96a4:	eafffcd5 	b	8a00 <BusRaider::pinRawWrite(int, bool) [clone .part.0]>
    96a8:	e351001f 	cmp	r1, #31
    96ac:	d3a00001 	movle	r0, #1
    96b0:	c3a03001 	movgt	r3, #1
    96b4:	c2411020 	subgt	r1, r1, #32
    96b8:	d59f3014 	ldrle	r3, [pc, #20]	; 96d4 <BusRaider::pinRawWrite(int, bool)+0x3c>
    96bc:	c59f2010 	ldrgt	r2, [pc, #16]	; 96d4 <BusRaider::pinRawWrite(int, bool)+0x3c>
    96c0:	d1a01110 	lslle	r1, r0, r1
    96c4:	c1a01113 	lslgt	r1, r3, r1
    96c8:	d5831028 	strle	r1, [r3, #40]	; 0x28
    96cc:	c582102c 	strgt	r1, [r2, #44]	; 0x2c
    96d0:	e12fff1e 	bx	lr
    96d4:	20200000 	.word	0x20200000

000096d8 <BusRaider::pinRawRead(int)>:
    96d8:	e59f3018 	ldr	r3, [pc, #24]	; 96f8 <BusRaider::pinRawRead(int)+0x20>
    96dc:	e351001f 	cmp	r1, #31
    96e0:	d5930034 	ldrle	r0, [r3, #52]	; 0x34
    96e4:	c5930038 	ldrgt	r0, [r3, #56]	; 0x38
    96e8:	c2411020 	subgt	r1, r1, #32
    96ec:	e1a00130 	lsr	r0, r0, r1
    96f0:	e2000001 	and	r0, r0, #1
    96f4:	e12fff1e 	bx	lr
    96f8:	20200000 	.word	0x20200000

000096fc <BusRaider::~BusRaider()>:
    96fc:	e92d4070 	push	{r4, r5, r6, lr}
    9700:	e1a05000 	mov	r5, r0
    9704:	e2800feb 	add	r0, r0, #940	; 0x3ac
    9708:	eb00473b 	bl	1b3fc <CGPIOPin::~CGPIOPin()>
    970c:	e2850fe1 	add	r0, r5, #900	; 0x384
    9710:	eb004739 	bl	1b3fc <CGPIOPin::~CGPIOPin()>
    9714:	e2850fd7 	add	r0, r5, #860	; 0x35c
    9718:	eb004737 	bl	1b3fc <CGPIOPin::~CGPIOPin()>
    971c:	e2850fcd 	add	r0, r5, #820	; 0x334
    9720:	eb004735 	bl	1b3fc <CGPIOPin::~CGPIOPin()>
    9724:	e2850fc3 	add	r0, r5, #780	; 0x30c
    9728:	eb004733 	bl	1b3fc <CGPIOPin::~CGPIOPin()>
    972c:	e2850fb9 	add	r0, r5, #740	; 0x2e4
    9730:	eb004731 	bl	1b3fc <CGPIOPin::~CGPIOPin()>
    9734:	e2850faf 	add	r0, r5, #700	; 0x2bc
    9738:	eb00472f 	bl	1b3fc <CGPIOPin::~CGPIOPin()>
    973c:	e2850fa5 	add	r0, r5, #660	; 0x294
    9740:	eb00472d 	bl	1b3fc <CGPIOPin::~CGPIOPin()>
    9744:	e2850f9b 	add	r0, r5, #620	; 0x26c
    9748:	eb00472b 	bl	1b3fc <CGPIOPin::~CGPIOPin()>
    974c:	e2854f87 	add	r4, r5, #540	; 0x21c
    9750:	e2850f91 	add	r0, r5, #580	; 0x244
    9754:	eb004728 	bl	1b3fc <CGPIOPin::~CGPIOPin()>
    9758:	e1a00004 	mov	r0, r4
    975c:	eb004726 	bl	1b3fc <CGPIOPin::~CGPIOPin()>
    9760:	e28560dc 	add	r6, r5, #220	; 0xdc
    9764:	e5343028 	ldr	r3, [r4, #-40]!	; 0xffffffd8
    9768:	e5933000 	ldr	r3, [r3]
    976c:	e1a00004 	mov	r0, r4
    9770:	e12fff33 	blx	r3
    9774:	e1560004 	cmp	r6, r4
    9778:	1afffff9 	bne	9764 <BusRaider::~BusRaider()+0x68>
    977c:	e28500b4 	add	r0, r5, #180	; 0xb4
    9780:	e285408c 	add	r4, r5, #140	; 0x8c
    9784:	eb00471c 	bl	1b3fc <CGPIOPin::~CGPIOPin()>
    9788:	e1a00004 	mov	r0, r4
    978c:	eb00471a 	bl	1b3fc <CGPIOPin::~CGPIOPin()>
    9790:	e2856014 	add	r6, r5, #20
    9794:	e5343028 	ldr	r3, [r4, #-40]!	; 0xffffffd8
    9798:	e5933000 	ldr	r3, [r3]
    979c:	e1a00004 	mov	r0, r4
    97a0:	e12fff33 	blx	r3
    97a4:	e1560004 	cmp	r6, r4
    97a8:	1afffff9 	bne	9794 <BusRaider::~BusRaider()+0x98>
    97ac:	e1a00005 	mov	r0, r5
    97b0:	e8bd8070 	pop	{r4, r5, r6, pc}

000097b4 <TargetMemory::clear()>:
    97b4:	e3a0c000 	mov	ip, #0
    97b8:	e1a0100c 	mov	r1, ip
    97bc:	e2803801 	add	r3, r0, #65536	; 0x10000
    97c0:	e2802b41 	add	r2, r0, #66560	; 0x10400
    97c4:	e583c640 	str	ip, [r3, #1600]	; 0x640
    97c8:	e2822f91 	add	r2, r2, #580	; 0x244
    97cc:	e2833004 	add	r3, r3, #4
    97d0:	e4831008 	str	r1, [r3], #8
    97d4:	e1530002 	cmp	r3, r2
    97d8:	1afffffc 	bne	97d0 <TargetMemory::clear()+0x1c>
    97dc:	e3a01000 	mov	r1, #0
    97e0:	e2802cff 	add	r2, r0, #65280	; 0xff00
    97e4:	e28220ff 	add	r2, r2, #255	; 0xff
    97e8:	e2403001 	sub	r3, r0, #1
    97ec:	e5e31001 	strb	r1, [r3, #1]!
    97f0:	e1520003 	cmp	r2, r3
    97f4:	1afffffc 	bne	97ec <TargetMemory::clear()+0x38>
    97f8:	e12fff1e 	bx	lr

000097fc <TargetMemory::dataBlockStore(unsigned long, unsigned char const*, unsigned long)>:
    97fc:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    9800:	e2807801 	add	r7, r0, #65536	; 0x10000
    9804:	e5976640 	ldr	r6, [r7, #1600]	; 0x640
    9808:	e3560000 	cmp	r6, #0
    980c:	da000012 	ble	985c <TargetMemory::dataBlockStore(unsigned long, unsigned char const*, unsigned long)+0x60>
    9810:	e5975004 	ldr	r5, [r7, #4]
    9814:	e597c000 	ldr	ip, [r7]
    9818:	e085c00c 	add	ip, r5, ip
    981c:	e151000c 	cmp	r1, ip
    9820:	13a04000 	movne	r4, #0
    9824:	1287c008 	addne	ip, r7, #8
    9828:	1a000006 	bne	9848 <TargetMemory::dataBlockStore(unsigned long, unsigned char const*, unsigned long)+0x4c>
    982c:	ea00001c 	b	98a4 <TargetMemory::dataBlockStore(unsigned long, unsigned char const*, unsigned long)+0xa8>
    9830:	e59c5004 	ldr	r5, [ip, #4]
    9834:	e59ce000 	ldr	lr, [ip]
    9838:	e28cc008 	add	ip, ip, #8
    983c:	e085e00e 	add	lr, r5, lr
    9840:	e15e0001 	cmp	lr, r1
    9844:	0a000017 	beq	98a8 <TargetMemory::dataBlockStore(unsigned long, unsigned char const*, unsigned long)+0xac>
    9848:	e2844001 	add	r4, r4, #1
    984c:	e1540006 	cmp	r4, r6
    9850:	1afffff6 	bne	9830 <TargetMemory::dataBlockStore(unsigned long, unsigned char const*, unsigned long)+0x34>
    9854:	e35600c7 	cmp	r6, #199	; 0xc7
    9858:	ca000010 	bgt	98a0 <TargetMemory::dataBlockStore(unsigned long, unsigned char const*, unsigned long)+0xa4>
    985c:	e080c186 	add	ip, r0, r6, lsl #3
    9860:	e28cc801 	add	ip, ip, #65536	; 0x10000
    9864:	e2866001 	add	r6, r6, #1
    9868:	e88c000a 	stm	ip, {r1, r3}
    986c:	e5876640 	str	r6, [r7, #1600]	; 0x640
    9870:	e3530000 	cmp	r3, #0
    9874:	159fc044 	ldrne	ip, [pc, #68]	; 98c0 <TargetMemory::dataBlockStore(unsigned long, unsigned char const*, unsigned long)+0xc4>
    9878:	10813003 	addne	r3, r1, r3
    987c:	0a00000e 	beq	98bc <TargetMemory::dataBlockStore(unsigned long, unsigned char const*, unsigned long)+0xc0>
    9880:	e151000c 	cmp	r1, ip
    9884:	95d2e000 	ldrbls	lr, [r2]
    9888:	e2822001 	add	r2, r2, #1
    988c:	97c0e001 	strbls	lr, [r0, r1]
    9890:	e2811001 	add	r1, r1, #1
    9894:	e1510003 	cmp	r1, r3
    9898:	1afffff8 	bne	9880 <TargetMemory::dataBlockStore(unsigned long, unsigned char const*, unsigned long)+0x84>
    989c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    98a0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    98a4:	e3a04000 	mov	r4, #0
    98a8:	e2844a02 	add	r4, r4, #8192	; 0x2000
    98ac:	e0804184 	add	r4, r0, r4, lsl #3
    98b0:	e0835005 	add	r5, r3, r5
    98b4:	e5845004 	str	r5, [r4, #4]
    98b8:	eaffffec 	b	9870 <TargetMemory::dataBlockStore(unsigned long, unsigned char const*, unsigned long)+0x74>
    98bc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    98c0:	0000ffff 	.word	0x0000ffff

000098c4 <TargetMemory::getNumBlocks()>:
    98c4:	e2800801 	add	r0, r0, #65536	; 0x10000
    98c8:	e5900640 	ldr	r0, [r0, #1600]	; 0x640
    98cc:	e12fff1e 	bx	lr

000098d0 <TargetMemory::getMemoryBlock(int)>:
    98d0:	e2811a02 	add	r1, r1, #8192	; 0x2000
    98d4:	e0800181 	add	r0, r0, r1, lsl #3
    98d8:	e12fff1e 	bx	lr

000098dc <TargetMemory::memoryPtr()>:
    98dc:	e12fff1e 	bx	lr

000098e0 <TargetScreen::TargetScreen(CScreenDevice&, TargetFonts&, CLogger&)>:
    98e0:	e92d4010 	push	{r4, lr}
    98e4:	e1a04000 	mov	r4, r0
    98e8:	e8800006 	stm	r0, {r1, r2}
    98ec:	e1a01003 	mov	r1, r3
    98f0:	e3a020f8 	mov	r2, #248	; 0xf8
    98f4:	e2800008 	add	r0, r0, #8
    98f8:	eb0060fb 	bl	21cec <memcpy>
    98fc:	e3a03000 	mov	r3, #0
    9900:	e1a00004 	mov	r0, r4
    9904:	e5843100 	str	r3, [r4, #256]	; 0x100
    9908:	e8bd8010 	pop	{r4, pc}

0000990c <TargetScreen::~TargetScreen()>:
    990c:	e92d4010 	push	{r4, lr}
    9910:	e1a04000 	mov	r4, r0
    9914:	e2800008 	add	r0, r0, #8
    9918:	eb004cf4 	bl	1ccf0 <CLogger::~CLogger()>
    991c:	e1a00004 	mov	r0, r4
    9920:	e8bd8010 	pop	{r4, pc}

00009924 <TargetScreen::setup(int, int, int, int, char const*, unsigned short, unsigned short, int, int, int, int, int, int)>:
    9924:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9928:	e1a04000 	mov	r4, r0
    992c:	e1a0b001 	mov	fp, r1
    9930:	e5900004 	ldr	r0, [r0, #4]
    9934:	e59d102c 	ldr	r1, [sp, #44]	; 0x2c
    9938:	e1a0a002 	mov	sl, r2
    993c:	e1a09003 	mov	r9, r3
    9940:	e1dd73b0 	ldrh	r7, [sp, #48]	; 0x30
    9944:	e1dd83b4 	ldrh	r8, [sp, #52]	; 0x34
    9948:	e59d5048 	ldr	r5, [sp, #72]	; 0x48
    994c:	e59d604c 	ldr	r6, [sp, #76]	; 0x4c
    9950:	eb0000b2 	bl	9c20 <TargetFonts::getFont(char const*)>
    9954:	e3500000 	cmp	r0, #0
    9958:	e5840100 	str	r0, [r4, #256]	; 0x100
    995c:	0a000026 	beq	99fc <TargetScreen::setup(int, int, int, int, char const*, unsigned short, unsigned short, int, int, int, int, int, int)+0xd8>
    9960:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
    9964:	e3750001 	cmn	r5, #1
    9968:	e584b104 	str	fp, [r4, #260]	; 0x104
    996c:	e584a108 	str	sl, [r4, #264]	; 0x108
    9970:	e584910c 	str	r9, [r4, #268]	; 0x10c
    9974:	e5843110 	str	r3, [r4, #272]	; 0x110
    9978:	e5845114 	str	r5, [r4, #276]	; 0x114
    997c:	0a000014 	beq	99d4 <TargetScreen::setup(int, int, int, int, char const*, unsigned short, unsigned short, int, int, int, int, int, int)+0xb0>
    9980:	e3760001 	cmn	r6, #1
    9984:	e5846118 	str	r6, [r4, #280]	; 0x118
    9988:	0a00000b 	beq	99bc <TargetScreen::setup(int, int, int, int, char const*, unsigned short, unsigned short, int, int, int, int, int, int)+0x98>
    998c:	e59d2040 	ldr	r2, [sp, #64]	; 0x40
    9990:	e2843f49 	add	r3, r4, #292	; 0x124
    9994:	e584211c 	str	r2, [r4, #284]	; 0x11c
    9998:	e59d2044 	ldr	r2, [sp, #68]	; 0x44
    999c:	e5842120 	str	r2, [r4, #288]	; 0x120
    99a0:	e1c370b0 	strh	r7, [r3]
    99a4:	e1c380b2 	strh	r8, [r3, #2]
    99a8:	e59d3038 	ldr	r3, [sp, #56]	; 0x38
    99ac:	e5843128 	str	r3, [r4, #296]	; 0x128
    99b0:	e59d303c 	ldr	r3, [sp, #60]	; 0x3c
    99b4:	e584312c 	str	r3, [r4, #300]	; 0x12c
    99b8:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    99bc:	e5943100 	ldr	r3, [r4, #256]	; 0x100
    99c0:	e3530000 	cmp	r3, #0
    99c4:	0afffff0 	beq	998c <TargetScreen::setup(int, int, int, int, char const*, unsigned short, unsigned short, int, int, int, int, int, int)+0x68>
    99c8:	e5933008 	ldr	r3, [r3, #8]
    99cc:	e5843118 	str	r3, [r4, #280]	; 0x118
    99d0:	eaffffed 	b	998c <TargetScreen::setup(int, int, int, int, char const*, unsigned short, unsigned short, int, int, int, int, int, int)+0x68>
    99d4:	e5943100 	ldr	r3, [r4, #256]	; 0x100
    99d8:	e3530000 	cmp	r3, #0
    99dc:	05846118 	streq	r6, [r4, #280]	; 0x118
    99e0:	0affffe9 	beq	998c <TargetScreen::setup(int, int, int, int, char const*, unsigned short, unsigned short, int, int, int, int, int, int)+0x68>
    99e4:	e5932004 	ldr	r2, [r3, #4]
    99e8:	e3760001 	cmn	r6, #1
    99ec:	e5842114 	str	r2, [r4, #276]	; 0x114
    99f0:	e5846118 	str	r6, [r4, #280]	; 0x118
    99f4:	1affffe4 	bne	998c <TargetScreen::setup(int, int, int, int, char const*, unsigned short, unsigned short, int, int, int, int, int, int)+0x68>
    99f8:	eafffff2 	b	99c8 <TargetScreen::setup(int, int, int, int, char const*, unsigned short, unsigned short, int, int, int, int, int, int)+0xa4>
    99fc:	e3a0201b 	mov	r2, #27
    9a00:	e59f1008 	ldr	r1, [pc, #8]	; 9a10 <TargetScreen::setup(int, int, int, int, char const*, unsigned short, unsigned short, int, int, int, int, int, int)+0xec>
    9a04:	e59f0008 	ldr	r0, [pc, #8]	; 9a14 <TargetScreen::setup(int, int, int, int, char const*, unsigned short, unsigned short, int, int, int, int, int, int)+0xf0>
    9a08:	eb0042e2 	bl	1a598 <assertion_failed>
    9a0c:	eaffffd3 	b	9960 <TargetScreen::setup(int, int, int, int, char const*, unsigned short, unsigned short, int, int, int, int, int, int)+0x3c>
    9a10:	00024004 	.word	0x00024004
    9a14:	00024020 	.word	0x00024020

00009a18 <TargetScreen::putChar(int, int, int)>:
    9a18:	e590c100 	ldr	ip, [r0, #256]	; 0x100
    9a1c:	e35c0000 	cmp	ip, #0
    9a20:	012fff1e 	bxeq	lr
    9a24:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9a28:	e590c114 	ldr	ip, [r0, #276]	; 0x114
    9a2c:	e590e118 	ldr	lr, [r0, #280]	; 0x118
    9a30:	e0020c92 	mul	r2, r2, ip
    9a34:	e00a0e93 	mul	sl, r3, lr
    9a38:	e590b11c 	ldr	fp, [r0, #284]	; 0x11c
    9a3c:	e5903120 	ldr	r3, [r0, #288]	; 0x120
    9a40:	e35e0000 	cmp	lr, #0
    9a44:	e24dd00c 	sub	sp, sp, #12
    9a48:	e00b029b 	mul	fp, fp, r2
    9a4c:	e00a0a93 	mul	sl, r3, sl
    9a50:	da000055 	ble	9bac <TargetScreen::putChar(int, int, int)+0x194>
    9a54:	e1a05000 	mov	r5, r0
    9a58:	e3a09000 	mov	r9, #0
    9a5c:	e6ef2071 	uxtb	r2, r1
    9a60:	e58d2004 	str	r2, [sp, #4]
    9a64:	e2802f49 	add	r2, r0, #292	; 0x124
    9a68:	e58d2000 	str	r2, [sp]
    9a6c:	e35c0000 	cmp	ip, #0
    9a70:	c3a07000 	movgt	r7, #0
    9a74:	da000049 	ble	9ba0 <TargetScreen::putChar(int, int, int)+0x188>
    9a78:	e5954100 	ldr	r4, [r5, #256]	; 0x100
    9a7c:	e59d0004 	ldr	r0, [sp, #4]
    9a80:	e5942014 	ldr	r2, [r4, #20]
    9a84:	e1a01000 	mov	r1, r0
    9a88:	e1520000 	cmp	r2, r0
    9a8c:	ca000024 	bgt	9b24 <TargetScreen::putChar(int, int, int)+0x10c>
    9a90:	e5941018 	ldr	r1, [r4, #24]
    9a94:	e1510000 	cmp	r1, r0
    9a98:	ba000021 	blt	9b24 <TargetScreen::putChar(int, int, int)+0x10c>
    9a9c:	e594301c 	ldr	r3, [r4, #28]
    9aa0:	e0406002 	sub	r6, r0, r2
    9aa4:	e1560003 	cmp	r6, r3
    9aa8:	e1a01000 	mov	r1, r0
    9aac:	aa000049 	bge	9bd8 <TargetScreen::putChar(int, int, int)+0x1c0>
    9ab0:	e5943004 	ldr	r3, [r4, #4]
    9ab4:	e1530007 	cmp	r3, r7
    9ab8:	da000041 	ble	9bc4 <TargetScreen::putChar(int, int, int)+0x1ac>
    9abc:	e5943008 	ldr	r3, [r4, #8]
    9ac0:	e1530009 	cmp	r3, r9
    9ac4:	da000015 	ble	9b20 <TargetScreen::putChar(int, int, int)+0x108>
    9ac8:	e5943010 	ldr	r3, [r4, #16]
    9acc:	e5942020 	ldr	r2, [r4, #32]
    9ad0:	e3570007 	cmp	r7, #7
    9ad4:	e0222693 	mla	r2, r3, r6, r2
    9ad8:	e594300c 	ldr	r3, [r4, #12]
    9adc:	e1a061c7 	asr	r6, r7, #3
    9ae0:	e0262693 	mla	r6, r3, r6, r2
    9ae4:	e0030399 	mul	r3, r9, r3
    9ae8:	e7d61003 	ldrb	r1, [r6, r3]
    9aec:	c3a03000 	movgt	r3, #0
    9af0:	d5943004 	ldrle	r3, [r4, #4]
    9af4:	e2072007 	and	r2, r7, #7
    9af8:	d1a00fc3 	asrle	r0, r3, #31
    9afc:	d1a00ea0 	lsrle	r0, r0, #29
    9b00:	d0833000 	addle	r3, r3, r0
    9b04:	d2033007 	andle	r3, r3, #7
    9b08:	d0433000 	suble	r3, r3, r0
    9b0c:	d2633008 	rsble	r3, r3, #8
    9b10:	e0823003 	add	r3, r2, r3
    9b14:	e3a02080 	mov	r2, #128	; 0x80
    9b18:	e0113352 	ands	r3, r1, r2, asr r3
    9b1c:	1a000024 	bne	9bb4 <TargetScreen::putChar(int, int, int)+0x19c>
    9b20:	e5953120 	ldr	r3, [r5, #288]	; 0x120
    9b24:	e59d2000 	ldr	r2, [sp]
    9b28:	e1d280b2 	ldrh	r8, [r2, #2]
    9b2c:	e3530000 	cmp	r3, #0
    9b30:	e1a02003 	mov	r2, r3
    9b34:	c3a06000 	movgt	r6, #0
    9b38:	c595111c 	ldrgt	r1, [r5, #284]	; 0x11c
    9b3c:	da000012 	ble	9b8c <TargetScreen::putChar(int, int, int)+0x174>
    9b40:	e3510000 	cmp	r1, #0
    9b44:	da00000d 	ble	9b80 <TargetScreen::putChar(int, int, int)+0x168>
    9b48:	e3a04000 	mov	r4, #0
    9b4c:	e022a992 	mla	r2, r2, r9, sl
    9b50:	e021b791 	mla	r1, r1, r7, fp
    9b54:	e0822006 	add	r2, r2, r6
    9b58:	e0811004 	add	r1, r1, r4
    9b5c:	e1a03008 	mov	r3, r8
    9b60:	e5950000 	ldr	r0, [r5]
    9b64:	eb0053ba 	bl	1ea54 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)>
    9b68:	e595111c 	ldr	r1, [r5, #284]	; 0x11c
    9b6c:	e2844001 	add	r4, r4, #1
    9b70:	e1510004 	cmp	r1, r4
    9b74:	e5952120 	ldr	r2, [r5, #288]	; 0x120
    9b78:	cafffff3 	bgt	9b4c <TargetScreen::putChar(int, int, int)+0x134>
    9b7c:	e1a03002 	mov	r3, r2
    9b80:	e2866001 	add	r6, r6, #1
    9b84:	e1560003 	cmp	r6, r3
    9b88:	baffffec 	blt	9b40 <TargetScreen::putChar(int, int, int)+0x128>
    9b8c:	e595c114 	ldr	ip, [r5, #276]	; 0x114
    9b90:	e2877001 	add	r7, r7, #1
    9b94:	e15c0007 	cmp	ip, r7
    9b98:	caffffb6 	bgt	9a78 <TargetScreen::putChar(int, int, int)+0x60>
    9b9c:	e595e118 	ldr	lr, [r5, #280]	; 0x118
    9ba0:	e2899001 	add	r9, r9, #1
    9ba4:	e15e0009 	cmp	lr, r9
    9ba8:	caffffaf 	bgt	9a6c <TargetScreen::putChar(int, int, int)+0x54>
    9bac:	e28dd00c 	add	sp, sp, #12
    9bb0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9bb4:	e59d3000 	ldr	r3, [sp]
    9bb8:	e1d380b0 	ldrh	r8, [r3]
    9bbc:	e5953120 	ldr	r3, [r5, #288]	; 0x120
    9bc0:	eaffffd9 	b	9b2c <TargetScreen::putChar(int, int, int)+0x114>
    9bc4:	e3a0202f 	mov	r2, #47	; 0x2f
    9bc8:	e59f101c 	ldr	r1, [pc, #28]	; 9bec <TargetScreen::putChar(int, int, int)+0x1d4>
    9bcc:	e59f001c 	ldr	r0, [pc, #28]	; 9bf0 <TargetScreen::putChar(int, int, int)+0x1d8>
    9bd0:	eb004270 	bl	1a598 <assertion_failed>
    9bd4:	eaffffb8 	b	9abc <TargetScreen::putChar(int, int, int)+0xa4>
    9bd8:	e3a0202e 	mov	r2, #46	; 0x2e
    9bdc:	e59f1008 	ldr	r1, [pc, #8]	; 9bec <TargetScreen::putChar(int, int, int)+0x1d4>
    9be0:	e59f000c 	ldr	r0, [pc, #12]	; 9bf4 <TargetScreen::putChar(int, int, int)+0x1dc>
    9be4:	eb00426b 	bl	1a598 <assertion_failed>
    9be8:	eaffffb0 	b	9ab0 <TargetScreen::putChar(int, int, int)+0x98>
    9bec:	00024030 	.word	0x00024030
    9bf0:	0002405c 	.word	0x0002405c
    9bf4:	00024048 	.word	0x00024048

00009bf8 <TargetFonts::TargetFonts()>:
    9bf8:	e3a02000 	mov	r2, #0
    9bfc:	e5802050 	str	r2, [r0, #80]	; 0x50
    9c00:	e12fff1e 	bx	lr

00009c04 <TargetFonts::~TargetFonts()>:
    9c04:	e12fff1e 	bx	lr

00009c08 <TargetFonts::addFont(TargetFont*)>:
    9c08:	e5903050 	ldr	r3, [r0, #80]	; 0x50
    9c0c:	e3530013 	cmp	r3, #19
    9c10:	d2832001 	addle	r2, r3, #1
    9c14:	d5802050 	strle	r2, [r0, #80]	; 0x50
    9c18:	d7801103 	strle	r1, [r0, r3, lsl #2]
    9c1c:	e12fff1e 	bx	lr

00009c20 <TargetFonts::getFont(char const*)>:
    9c20:	e5903050 	ldr	r3, [r0, #80]	; 0x50
    9c24:	e3530000 	cmp	r3, #0
    9c28:	da000013 	ble	9c7c <TargetFonts::getFont(char const*)+0x5c>
    9c2c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9c30:	e1a07001 	mov	r7, r1
    9c34:	e1a06000 	mov	r6, r0
    9c38:	e3a04000 	mov	r4, #0
    9c3c:	e2405004 	sub	r5, r0, #4
    9c40:	ea000003 	b	9c54 <TargetFonts::getFont(char const*)+0x34>
    9c44:	e5963050 	ldr	r3, [r6, #80]	; 0x50
    9c48:	e2844001 	add	r4, r4, #1
    9c4c:	e1530004 	cmp	r3, r4
    9c50:	da000007 	ble	9c74 <TargetFonts::getFont(char const*)+0x54>
    9c54:	e5b53004 	ldr	r3, [r5, #4]!
    9c58:	e1a01007 	mov	r1, r7
    9c5c:	e5930000 	ldr	r0, [r3]
    9c60:	eb005ed9 	bl	217cc <strcmp>
    9c64:	e3500000 	cmp	r0, #0
    9c68:	1afffff5 	bne	9c44 <TargetFonts::getFont(char const*)+0x24>
    9c6c:	e7960104 	ldr	r0, [r6, r4, lsl #2]
    9c70:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9c74:	e3a00000 	mov	r0, #0
    9c78:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9c7c:	e3a00000 	mov	r0, #0
    9c80:	e12fff1e 	bx	lr

00009c84 <_GLOBAL__sub_I___pTRS80Level1FontBin>:
    9c84:	e3a01006 	mov	r1, #6
    9c88:	e92d4030 	push	{r4, r5, lr}
    9c8c:	e3a02008 	mov	r2, #8
    9c90:	e3a04001 	mov	r4, #1
    9c94:	e3a0e000 	mov	lr, #0
    9c98:	e3a0c0ff 	mov	ip, #255	; 0xff
    9c9c:	e3a00c01 	mov	r0, #256	; 0x100
    9ca0:	e59f302c 	ldr	r3, [pc, #44]	; 9cd4 <_GLOBAL__sub_I___pTRS80Level1FontBin+0x50>
    9ca4:	e59f502c 	ldr	r5, [pc, #44]	; 9cd8 <_GLOBAL__sub_I___pTRS80Level1FontBin+0x54>
    9ca8:	e5831004 	str	r1, [r3, #4]
    9cac:	e59f1028 	ldr	r1, [pc, #40]	; 9cdc <_GLOBAL__sub_I___pTRS80Level1FontBin+0x58>
    9cb0:	e5835000 	str	r5, [r3]
    9cb4:	e583400c 	str	r4, [r3, #12]
    9cb8:	e583e014 	str	lr, [r3, #20]
    9cbc:	e583c018 	str	ip, [r3, #24]
    9cc0:	e583001c 	str	r0, [r3, #28]
    9cc4:	e5831020 	str	r1, [r3, #32]
    9cc8:	e5832008 	str	r2, [r3, #8]
    9ccc:	e5832010 	str	r2, [r3, #16]
    9cd0:	e8bd8030 	pop	{r4, r5, pc}
    9cd4:	0002b23c 	.word	0x0002b23c
    9cd8:	00023fd4 	.word	0x00023fd4
    9cdc:	0002a7f8 	.word	0x0002a7f8

00009ce0 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)>:
    9ce0:	e92d4070 	push	{r4, r5, r6, lr}
    9ce4:	e2524000 	subs	r4, r2, #0
    9ce8:	e1a05001 	mov	r5, r1
    9cec:	0a000009 	beq	9d18 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x38>
    9cf0:	e355000f 	cmp	r5, #15
    9cf4:	9a000003 	bls	9d08 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x28>
    9cf8:	e59f202c 	ldr	r2, [pc, #44]	; 9d2c <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x4c>
    9cfc:	e59f102c 	ldr	r1, [pc, #44]	; 9d30 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x50>
    9d00:	e59f002c 	ldr	r0, [pc, #44]	; 9d34 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x54>
    9d04:	eb004223 	bl	1a598 <assertion_failed>
    9d08:	e3a03000 	mov	r3, #0
    9d0c:	e0844005 	add	r4, r4, r5
    9d10:	e5c4305c 	strb	r3, [r4, #92]	; 0x5c
    9d14:	e8bd8070 	pop	{r4, r5, r6, pc}
    9d18:	e59f2018 	ldr	r2, [pc, #24]	; 9d38 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x58>
    9d1c:	e59f100c 	ldr	r1, [pc, #12]	; 9d30 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x50>
    9d20:	e59f0014 	ldr	r0, [pc, #20]	; 9d3c <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x5c>
    9d24:	eb00421b 	bl	1a598 <assertion_failed>
    9d28:	eafffff0 	b	9cf0 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x10>
    9d2c:	00000269 	.word	0x00000269
    9d30:	00024090 	.word	0x00024090
    9d34:	000240ac 	.word	0x000240ac
    9d38:	00000266 	.word	0x00000266
    9d3c:	000240a0 	.word	0x000240a0

00009d40 <CDWHCIDevice::~CDWHCIDevice()>:
    9d40:	e3a03000 	mov	r3, #0
    9d44:	e92d4010 	push	{r4, lr}
    9d48:	e1a04000 	mov	r4, r0
    9d4c:	e59f201c 	ldr	r2, [pc, #28]	; 9d70 <CDWHCIDevice::~CDWHCIDevice()+0x30>
    9d50:	e5803008 	str	r3, [r0, #8]
    9d54:	e880000c 	stm	r0, {r2, r3}
    9d58:	e2800074 	add	r0, r0, #116	; 0x74
    9d5c:	eb001dd8 	bl	114c4 <CDWHCIRootPort::~CDWHCIRootPort()>
    9d60:	e1a00004 	mov	r0, r4
    9d64:	eb001221 	bl	e5f0 <CUSBHostController::~CUSBHostController()>
    9d68:	e1a00004 	mov	r0, r4
    9d6c:	e8bd8010 	pop	{r4, pc}
    9d70:	00024074 	.word	0x00024074

00009d74 <CDWHCIDevice::~CDWHCIDevice()>:
    9d74:	e3a03000 	mov	r3, #0
    9d78:	e92d4010 	push	{r4, lr}
    9d7c:	e1a04000 	mov	r4, r0
    9d80:	e59f2028 	ldr	r2, [pc, #40]	; 9db0 <CDWHCIDevice::~CDWHCIDevice()+0x3c>
    9d84:	e5803008 	str	r3, [r0, #8]
    9d88:	e880000c 	stm	r0, {r2, r3}
    9d8c:	e2800074 	add	r0, r0, #116	; 0x74
    9d90:	eb001dcb 	bl	114c4 <CDWHCIRootPort::~CDWHCIRootPort()>
    9d94:	e1a00004 	mov	r0, r4
    9d98:	eb001214 	bl	e5f0 <CUSBHostController::~CUSBHostController()>
    9d9c:	e1a00004 	mov	r0, r4
    9da0:	e3a0107c 	mov	r1, #124	; 0x7c
    9da4:	eb0062d0 	bl	228ec <operator delete(void*, unsigned int)>
    9da8:	e1a00004 	mov	r0, r4
    9dac:	e8bd8010 	pop	{r4, pc}
    9db0:	00024074 	.word	0x00024074

00009db4 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>:
    9db4:	e92d4030 	push	{r4, r5, lr}
    9db8:	e24dd01c 	sub	sp, sp, #28
    9dbc:	e1a05000 	mov	r5, r0
    9dc0:	e28d000c 	add	r0, sp, #12
    9dc4:	eb000967 	bl	c368 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9dc8:	e3a03000 	mov	r3, #0
    9dcc:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    9dd0:	eb004be3 	bl	1cd64 <CLogger::Get()>
    9dd4:	e1a04000 	mov	r4, r0
    9dd8:	e28d000c 	add	r0, sp, #12
    9ddc:	eb00096a 	bl	c38c <CDWHCIRegister::Read()>
    9de0:	e59f3020 	ldr	r3, [pc, #32]	; 9e08 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]+0x54>
    9de4:	e88d0021 	stm	sp, {r0, r5}
    9de8:	e3a02004 	mov	r2, #4
    9dec:	e1a00004 	mov	r0, r4
    9df0:	e59f1014 	ldr	r1, [pc, #20]	; 9e0c <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]+0x58>
    9df4:	eb004d83 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    9df8:	e28d000c 	add	r0, sp, #12
    9dfc:	eb000961 	bl	c388 <CDWHCIRegister::~CDWHCIRegister()>
    9e00:	e28dd01c 	add	sp, sp, #28
    9e04:	e8bd8030 	pop	{r4, r5, pc}
    9e08:	000240cc 	.word	0x000240cc
    9e0c:	00024084 	.word	0x00024084

00009e10 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)>:
    9e10:	e92d4070 	push	{r4, r5, r6, lr}
    9e14:	e1a04000 	mov	r4, r0
    9e18:	e1a06001 	mov	r6, r1
    9e1c:	e1a05002 	mov	r5, r2
    9e20:	eb0011ee 	bl	e5e0 <CUSBHostController::CUSBHostController()>
    9e24:	e3a03000 	mov	r3, #0
    9e28:	e3a00001 	mov	r0, #1
    9e2c:	e59fc0a8 	ldr	ip, [pc, #168]	; 9edc <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xcc>
    9e30:	e5843010 	str	r3, [r4, #16]
    9e34:	e584300c 	str	r3, [r4, #12]
    9e38:	e584306c 	str	r3, [r4, #108]	; 0x6c
    9e3c:	e5843070 	str	r3, [r4, #112]	; 0x70
    9e40:	e5840014 	str	r0, [r4, #20]
    9e44:	e5840058 	str	r0, [r4, #88]	; 0x58
    9e48:	e5846004 	str	r6, [r4, #4]
    9e4c:	e5845008 	str	r5, [r4, #8]
    9e50:	e584c000 	str	ip, [r4]
    9e54:	e1a01004 	mov	r1, r4
    9e58:	e2840074 	add	r0, r4, #116	; 0x74
    9e5c:	eb001d88 	bl	11484 <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)>
    9e60:	e5943004 	ldr	r3, [r4, #4]
    9e64:	e3530000 	cmp	r3, #0
    9e68:	0a000011 	beq	9eb4 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xa4>
    9e6c:	e5943008 	ldr	r3, [r4, #8]
    9e70:	e3530000 	cmp	r3, #0
    9e74:	0a000013 	beq	9ec8 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xb8>
    9e78:	e3a01000 	mov	r1, #0
    9e7c:	e2843014 	add	r3, r4, #20
    9e80:	e2842054 	add	r2, r4, #84	; 0x54
    9e84:	e5a31004 	str	r1, [r3, #4]!
    9e88:	e1520003 	cmp	r2, r3
    9e8c:	1afffffc 	bne	9e84 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0x74>
    9e90:	e3a03000 	mov	r3, #0
    9e94:	e1a01003 	mov	r1, r3
    9e98:	e0842003 	add	r2, r4, r3
    9e9c:	e2833001 	add	r3, r3, #1
    9ea0:	e3530010 	cmp	r3, #16
    9ea4:	e5c2105c 	strb	r1, [r2, #92]	; 0x5c
    9ea8:	1afffffa 	bne	9e98 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0x88>
    9eac:	e1a00004 	mov	r0, r4
    9eb0:	e8bd8070 	pop	{r4, r5, r6, pc}
    9eb4:	e3a02048 	mov	r2, #72	; 0x48
    9eb8:	e59f1020 	ldr	r1, [pc, #32]	; 9ee0 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xd0>
    9ebc:	e59f0020 	ldr	r0, [pc, #32]	; 9ee4 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xd4>
    9ec0:	eb0041b4 	bl	1a598 <assertion_failed>
    9ec4:	eaffffe8 	b	9e6c <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0x5c>
    9ec8:	e3a02049 	mov	r2, #73	; 0x49
    9ecc:	e59f100c 	ldr	r1, [pc, #12]	; 9ee0 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xd0>
    9ed0:	e59f0010 	ldr	r0, [pc, #16]	; 9ee8 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xd8>
    9ed4:	eb0041af 	bl	1a598 <assertion_failed>
    9ed8:	eaffffe6 	b	9e78 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0x68>
    9edc:	00024074 	.word	0x00024074
    9ee0:	00024090 	.word	0x00024090
    9ee4:	000240d8 	.word	0x000240d8
    9ee8:	000240f0 	.word	0x000240f0

00009eec <CDWHCIDevice::GetPortSpeed()>:
    9eec:	e92d4010 	push	{r4, lr}
    9ef0:	e24dd010 	sub	sp, sp, #16
    9ef4:	e59f103c 	ldr	r1, [pc, #60]	; 9f38 <CDWHCIDevice::GetPortSpeed()+0x4c>
    9ef8:	e28d0004 	add	r0, sp, #4
    9efc:	eb000919 	bl	c368 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9f00:	e28d0004 	add	r0, sp, #4
    9f04:	eb000920 	bl	c38c <CDWHCIRegister::Read()>
    9f08:	e1a008a0 	lsr	r0, r0, #17
    9f0c:	e2000003 	and	r0, r0, #3
    9f10:	e3500003 	cmp	r0, #3
    9f14:	01a04000 	moveq	r4, r0
    9f18:	159f301c 	ldrne	r3, [pc, #28]	; 9f3c <CDWHCIDevice::GetPortSpeed()+0x50>
    9f1c:	10830000 	addne	r0, r3, r0
    9f20:	15d04020 	ldrbne	r4, [r0, #32]
    9f24:	e28d0004 	add	r0, sp, #4
    9f28:	eb000916 	bl	c388 <CDWHCIRegister::~CDWHCIRegister()>
    9f2c:	e1a00004 	mov	r0, r4
    9f30:	e28dd010 	add	sp, sp, #16
    9f34:	e8bd8010 	pop	{r4, pc}
    9f38:	20980440 	.word	0x20980440
    9f3c:	0002406c 	.word	0x0002406c

00009f40 <CDWHCIDevice::OvercurrentDetected()>:
    9f40:	e92d4010 	push	{r4, lr}
    9f44:	e24dd010 	sub	sp, sp, #16
    9f48:	e59f1028 	ldr	r1, [pc, #40]	; 9f78 <CDWHCIDevice::OvercurrentDetected()+0x38>
    9f4c:	e28d0004 	add	r0, sp, #4
    9f50:	eb000904 	bl	c368 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9f54:	e28d0004 	add	r0, sp, #4
    9f58:	eb00090b 	bl	c38c <CDWHCIRegister::Read()>
    9f5c:	e1a04000 	mov	r4, r0
    9f60:	e28d0004 	add	r0, sp, #4
    9f64:	eb000907 	bl	c388 <CDWHCIRegister::~CDWHCIRegister()>
    9f68:	e1a00224 	lsr	r0, r4, #4
    9f6c:	e2000001 	and	r0, r0, #1
    9f70:	e28dd010 	add	sp, sp, #16
    9f74:	e8bd8010 	pop	{r4, pc}
    9f78:	20980440 	.word	0x20980440

00009f7c <CDWHCIDevice::DisableRootPort()>:
    9f7c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    9f80:	e24dd014 	sub	sp, sp, #20
    9f84:	e59f1030 	ldr	r1, [pc, #48]	; 9fbc <CDWHCIDevice::DisableRootPort()+0x40>
    9f88:	e28d0004 	add	r0, sp, #4
    9f8c:	eb0008f5 	bl	c368 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9f90:	e28d0004 	add	r0, sp, #4
    9f94:	eb0008fc 	bl	c38c <CDWHCIRegister::Read()>
    9f98:	e3e01a01 	mvn	r1, #4096	; 0x1000
    9f9c:	e28d0004 	add	r0, sp, #4
    9fa0:	eb000931 	bl	c46c <CDWHCIRegister::And(unsigned int)>
    9fa4:	e28d0004 	add	r0, sp, #4
    9fa8:	eb0008fe 	bl	c3a8 <CDWHCIRegister::Write()>
    9fac:	e28d0004 	add	r0, sp, #4
    9fb0:	eb0008f4 	bl	c388 <CDWHCIRegister::~CDWHCIRegister()>
    9fb4:	e28dd014 	add	sp, sp, #20
    9fb8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    9fbc:	20980440 	.word	0x20980440

00009fc0 <CDWHCIDevice::PowerOn()>:
    9fc0:	e92d4030 	push	{r4, r5, lr}
    9fc4:	e24dd024 	sub	sp, sp, #36	; 0x24
    9fc8:	e28d0008 	add	r0, sp, #8
    9fcc:	e3a05000 	mov	r5, #0
    9fd0:	eb004194 	bl	1a628 <CBcmPropertyTags::CBcmPropertyTags()>
    9fd4:	e3a0c003 	mov	ip, #3
    9fd8:	e28d0008 	add	r0, sp, #8
    9fdc:	e58d5000 	str	r5, [sp]
    9fe0:	e3a03014 	mov	r3, #20
    9fe4:	e28d200c 	add	r2, sp, #12
    9fe8:	e59f1034 	ldr	r1, [pc, #52]	; a024 <CDWHCIDevice::PowerOn()+0x64>
    9fec:	e58dc018 	str	ip, [sp, #24]
    9ff0:	e58dc01c 	str	ip, [sp, #28]
    9ff4:	eb0041e2 	bl	1a784 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    9ff8:	e2504000 	subs	r4, r0, #0
    9ffc:	0a000003 	beq	a010 <CDWHCIDevice::PowerOn()+0x50>
    a000:	e59d401c 	ldr	r4, [sp, #28]
    a004:	e3140002 	tst	r4, #2
    a008:	11a04005 	movne	r4, r5
    a00c:	02044001 	andeq	r4, r4, #1
    a010:	e28d0008 	add	r0, sp, #8
    a014:	eb004189 	bl	1a640 <CBcmPropertyTags::~CBcmPropertyTags()>
    a018:	e1a00004 	mov	r0, r4
    a01c:	e28dd024 	add	sp, sp, #36	; 0x24
    a020:	e8bd8030 	pop	{r4, r5, pc}
    a024:	00028001 	.word	0x00028001

0000a028 <CDWHCIDevice::EnableGlobalInterrupts()>:
    a028:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a02c:	e24dd014 	sub	sp, sp, #20
    a030:	e59f1030 	ldr	r1, [pc, #48]	; a068 <CDWHCIDevice::EnableGlobalInterrupts()+0x40>
    a034:	e28d0004 	add	r0, sp, #4
    a038:	eb0008ca 	bl	c368 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a03c:	e28d0004 	add	r0, sp, #4
    a040:	eb0008d1 	bl	c38c <CDWHCIRegister::Read()>
    a044:	e3a01001 	mov	r1, #1
    a048:	e28d0004 	add	r0, sp, #4
    a04c:	eb000916 	bl	c4ac <CDWHCIRegister::Or(unsigned int)>
    a050:	e28d0004 	add	r0, sp, #4
    a054:	eb0008d3 	bl	c3a8 <CDWHCIRegister::Write()>
    a058:	e28d0004 	add	r0, sp, #4
    a05c:	eb0008c9 	bl	c388 <CDWHCIRegister::~CDWHCIRegister()>
    a060:	e28dd014 	add	sp, sp, #20
    a064:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    a068:	20980008 	.word	0x20980008

0000a06c <CDWHCIDevice::EnableCommonInterrupts()>:
    a06c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a070:	e24dd014 	sub	sp, sp, #20
    a074:	e59f1024 	ldr	r1, [pc, #36]	; a0a0 <CDWHCIDevice::EnableCommonInterrupts()+0x34>
    a078:	e28d0004 	add	r0, sp, #4
    a07c:	eb0008b9 	bl	c368 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a080:	e28d0004 	add	r0, sp, #4
    a084:	eb00094f 	bl	c5c8 <CDWHCIRegister::SetAll()>
    a088:	e28d0004 	add	r0, sp, #4
    a08c:	eb0008c5 	bl	c3a8 <CDWHCIRegister::Write()>
    a090:	e28d0004 	add	r0, sp, #4
    a094:	eb0008bb 	bl	c388 <CDWHCIRegister::~CDWHCIRegister()>
    a098:	e28dd014 	add	sp, sp, #20
    a09c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    a0a0:	20980014 	.word	0x20980014

0000a0a4 <CDWHCIDevice::EnableHostInterrupts()>:
    a0a4:	e92d4010 	push	{r4, lr}
    a0a8:	e1a04000 	mov	r4, r0
    a0ac:	e24dd010 	sub	sp, sp, #16
    a0b0:	e3a02000 	mov	r2, #0
    a0b4:	e59f1040 	ldr	r1, [pc, #64]	; a0fc <CDWHCIDevice::EnableHostInterrupts()+0x58>
    a0b8:	e28d0004 	add	r0, sp, #4
    a0bc:	eb0008ad 	bl	c378 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    a0c0:	e28d0004 	add	r0, sp, #4
    a0c4:	eb0008b7 	bl	c3a8 <CDWHCIRegister::Write()>
    a0c8:	e1a00004 	mov	r0, r4
    a0cc:	ebffffe6 	bl	a06c <CDWHCIDevice::EnableCommonInterrupts()>
    a0d0:	e28d0004 	add	r0, sp, #4
    a0d4:	eb0008ac 	bl	c38c <CDWHCIRegister::Read()>
    a0d8:	e3a01402 	mov	r1, #33554432	; 0x2000000
    a0dc:	e28d0004 	add	r0, sp, #4
    a0e0:	eb0008f1 	bl	c4ac <CDWHCIRegister::Or(unsigned int)>
    a0e4:	e28d0004 	add	r0, sp, #4
    a0e8:	eb0008ae 	bl	c3a8 <CDWHCIRegister::Write()>
    a0ec:	e28d0004 	add	r0, sp, #4
    a0f0:	eb0008a4 	bl	c388 <CDWHCIRegister::~CDWHCIRegister()>
    a0f4:	e28dd010 	add	sp, sp, #16
    a0f8:	e8bd8010 	pop	{r4, pc}
    a0fc:	20980018 	.word	0x20980018

0000a100 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)>:
    a100:	e92d4030 	push	{r4, r5, lr}
    a104:	e1a04000 	mov	r4, r0
    a108:	e24dd014 	sub	sp, sp, #20
    a10c:	e1a05001 	mov	r5, r1
    a110:	e28d0004 	add	r0, sp, #4
    a114:	e59f1054 	ldr	r1, [pc, #84]	; a170 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)+0x70>
    a118:	eb000892 	bl	c368 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a11c:	e5940058 	ldr	r0, [r4, #88]	; 0x58
    a120:	e3500000 	cmp	r0, #0
    a124:	1a00000f 	bne	a168 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)+0x68>
    a128:	e28d0004 	add	r0, sp, #4
    a12c:	eb000896 	bl	c38c <CDWHCIRegister::Read()>
    a130:	e3a01001 	mov	r1, #1
    a134:	e28d0004 	add	r0, sp, #4
    a138:	e1a01511 	lsl	r1, r1, r5
    a13c:	eb0008da 	bl	c4ac <CDWHCIRegister::Or(unsigned int)>
    a140:	e28d0004 	add	r0, sp, #4
    a144:	eb000897 	bl	c3a8 <CDWHCIRegister::Write()>
    a148:	e5943058 	ldr	r3, [r4, #88]	; 0x58
    a14c:	e3530000 	cmp	r3, #0
    a150:	0a000000 	beq	a158 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)+0x58>
    a154:	eb0061b3 	bl	22828 <LeaveCritical>
    a158:	e28d0004 	add	r0, sp, #4
    a15c:	eb000889 	bl	c388 <CDWHCIRegister::~CDWHCIRegister()>
    a160:	e28dd014 	add	sp, sp, #20
    a164:	e8bd8030 	pop	{r4, r5, pc}
    a168:	eb006181 	bl	22774 <EnterCritical>
    a16c:	eaffffed 	b	a128 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)+0x28>
    a170:	20980418 	.word	0x20980418

0000a174 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>:
    a174:	e92d4030 	push	{r4, r5, lr}
    a178:	e1a04000 	mov	r4, r0
    a17c:	e24dd014 	sub	sp, sp, #20
    a180:	e1a05001 	mov	r5, r1
    a184:	e28d0004 	add	r0, sp, #4
    a188:	e59f1054 	ldr	r1, [pc, #84]	; a1e4 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)+0x70>
    a18c:	eb000875 	bl	c368 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a190:	e5940058 	ldr	r0, [r4, #88]	; 0x58
    a194:	e3500000 	cmp	r0, #0
    a198:	1a00000f 	bne	a1dc <CDWHCIDevice::DisableChannelInterrupt(unsigned int)+0x68>
    a19c:	e28d0004 	add	r0, sp, #4
    a1a0:	eb000879 	bl	c38c <CDWHCIRegister::Read()>
    a1a4:	e3a01001 	mov	r1, #1
    a1a8:	e28d0004 	add	r0, sp, #4
    a1ac:	e1e01511 	mvn	r1, r1, lsl r5
    a1b0:	eb0008ad 	bl	c46c <CDWHCIRegister::And(unsigned int)>
    a1b4:	e28d0004 	add	r0, sp, #4
    a1b8:	eb00087a 	bl	c3a8 <CDWHCIRegister::Write()>
    a1bc:	e5943058 	ldr	r3, [r4, #88]	; 0x58
    a1c0:	e3530000 	cmp	r3, #0
    a1c4:	0a000000 	beq	a1cc <CDWHCIDevice::DisableChannelInterrupt(unsigned int)+0x58>
    a1c8:	eb006196 	bl	22828 <LeaveCritical>
    a1cc:	e28d0004 	add	r0, sp, #4
    a1d0:	eb00086c 	bl	c388 <CDWHCIRegister::~CDWHCIRegister()>
    a1d4:	e28dd014 	add	sp, sp, #20
    a1d8:	e8bd8030 	pop	{r4, r5, pc}
    a1dc:	eb006164 	bl	22774 <EnterCritical>
    a1e0:	eaffffed 	b	a19c <CDWHCIDevice::DisableChannelInterrupt(unsigned int)+0x28>
    a1e4:	20980418 	.word	0x20980418

0000a1e8 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)>:
    a1e8:	e92d4070 	push	{r4, r5, r6, lr}
    a1ec:	e2514000 	subs	r4, r1, #0
    a1f0:	e24dd048 	sub	sp, sp, #72	; 0x48
    a1f4:	e1a06000 	mov	r6, r0
    a1f8:	0a0000de 	beq	a578 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x390>
    a1fc:	e1a00004 	mov	r0, r4
    a200:	eb0009b0 	bl	c8c8 <CDWHCITransferStageData::GetChannelNumber() const>
    a204:	e596300c 	ldr	r3, [r6, #12]
    a208:	e1a05000 	mov	r5, r0
    a20c:	e1500003 	cmp	r0, r3
    a210:	2a0000cf 	bcs	a554 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x36c>
    a214:	e3a01001 	mov	r1, #1
    a218:	e1a00004 	mov	r0, r4
    a21c:	eb0009a3 	bl	c8b0 <CDWHCITransferStageData::SetSubState(unsigned int)>
    a220:	e59f1364 	ldr	r1, [pc, #868]	; a58c <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3a4>
    a224:	e1a05285 	lsl	r5, r5, #5
    a228:	e0851001 	add	r1, r5, r1
    a22c:	e1a0000d 	mov	r0, sp
    a230:	eb00084c 	bl	c368 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a234:	e1a0000d 	mov	r0, sp
    a238:	eb0008e2 	bl	c5c8 <CDWHCIRegister::SetAll()>
    a23c:	e1a0000d 	mov	r0, sp
    a240:	eb000858 	bl	c3a8 <CDWHCIRegister::Write()>
    a244:	e59f1344 	ldr	r1, [pc, #836]	; a590 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3a8>
    a248:	e3a02000 	mov	r2, #0
    a24c:	e0851001 	add	r1, r5, r1
    a250:	e28d000c 	add	r0, sp, #12
    a254:	eb000847 	bl	c378 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    a258:	e1a00004 	mov	r0, r4
    a25c:	eb000af5 	bl	ce38 <CDWHCITransferStageData::GetBytesToTransfer() const>
    a260:	e3c014ff 	bic	r1, r0, #-16777216	; 0xff000000
    a264:	e3c1173e 	bic	r1, r1, #16252928	; 0xf80000
    a268:	e28d000c 	add	r0, sp, #12
    a26c:	eb00088e 	bl	c4ac <CDWHCIRegister::Or(unsigned int)>
    a270:	e1a00004 	mov	r0, r4
    a274:	eb000af1 	bl	ce40 <CDWHCITransferStageData::GetPacketsToTransfer() const>
    a278:	e59f1314 	ldr	r1, [pc, #788]	; a594 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3ac>
    a27c:	e0011980 	and	r1, r1, r0, lsl #19
    a280:	e28d000c 	add	r0, sp, #12
    a284:	eb000888 	bl	c4ac <CDWHCIRegister::Or(unsigned int)>
    a288:	e1a00004 	mov	r0, r4
    a28c:	eb000ab3 	bl	cd60 <CDWHCITransferStageData::GetPID() const>
    a290:	e1a01e80 	lsl	r1, r0, #29
    a294:	e28d000c 	add	r0, sp, #12
    a298:	eb000883 	bl	c4ac <CDWHCIRegister::Or(unsigned int)>
    a29c:	e28d000c 	add	r0, sp, #12
    a2a0:	eb000840 	bl	c3a8 <CDWHCIRegister::Write()>
    a2a4:	e1a00004 	mov	r0, r4
    a2a8:	eb000ad1 	bl	cdf4 <CDWHCITransferStageData::GetDMAAddress() const>
    a2ac:	e59f12e4 	ldr	r1, [pc, #740]	; a598 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3b0>
    a2b0:	e3c02103 	bic	r2, r0, #-1073741824	; 0xc0000000
    a2b4:	e3822101 	orr	r2, r2, #1073741824	; 0x40000000
    a2b8:	e0851001 	add	r1, r5, r1
    a2bc:	e28d0018 	add	r0, sp, #24
    a2c0:	eb00082c 	bl	c378 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    a2c4:	e28d0018 	add	r0, sp, #24
    a2c8:	eb000836 	bl	c3a8 <CDWHCIRegister::Write()>
    a2cc:	e1a00004 	mov	r0, r4
    a2d0:	eb000ac7 	bl	cdf4 <CDWHCITransferStageData::GetDMAAddress() const>
    a2d4:	e1a06000 	mov	r6, r0
    a2d8:	e1a00004 	mov	r0, r4
    a2dc:	eb000ad5 	bl	ce38 <CDWHCITransferStageData::GetBytesToTransfer() const>
    a2e0:	e1a01000 	mov	r1, r0
    a2e4:	e1a00006 	mov	r0, r6
    a2e8:	eb006164 	bl	22880 <CleanAndInvalidateDataCacheRange>
    a2ec:	e59f12a8 	ldr	r1, [pc, #680]	; a59c <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3b4>
    a2f0:	e3a02000 	mov	r2, #0
    a2f4:	e0851001 	add	r1, r5, r1
    a2f8:	e28d0024 	add	r0, sp, #36	; 0x24
    a2fc:	eb00081d 	bl	c378 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    a300:	e1a00004 	mov	r0, r4
    a304:	eb000acf 	bl	ce48 <CDWHCITransferStageData::IsSplit() const>
    a308:	e3500000 	cmp	r0, #0
    a30c:	1a000079 	bne	a4f8 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x310>
    a310:	e28d0024 	add	r0, sp, #36	; 0x24
    a314:	eb000823 	bl	c3a8 <CDWHCIRegister::Write()>
    a318:	e59f1280 	ldr	r1, [pc, #640]	; a5a0 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3b8>
    a31c:	e28d0030 	add	r0, sp, #48	; 0x30
    a320:	e0851001 	add	r1, r5, r1
    a324:	eb00080f 	bl	c368 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a328:	e28d0030 	add	r0, sp, #48	; 0x30
    a32c:	eb000816 	bl	c38c <CDWHCIRegister::Read()>
    a330:	e59f126c 	ldr	r1, [pc, #620]	; a5a4 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3bc>
    a334:	e28d0030 	add	r0, sp, #48	; 0x30
    a338:	eb00084b 	bl	c46c <CDWHCIRegister::And(unsigned int)>
    a33c:	e1a00004 	mov	r0, r4
    a340:	eb000a82 	bl	cd50 <CDWHCITransferStageData::GetMaxPacketSize() const>
    a344:	e1a01a80 	lsl	r1, r0, #21
    a348:	e1a01aa1 	lsr	r1, r1, #21
    a34c:	e28d0030 	add	r0, sp, #48	; 0x30
    a350:	eb000855 	bl	c4ac <CDWHCIRegister::Or(unsigned int)>
    a354:	e28d0030 	add	r0, sp, #48	; 0x30
    a358:	e3e01603 	mvn	r1, #3145728	; 0x300000
    a35c:	eb000842 	bl	c46c <CDWHCIRegister::And(unsigned int)>
    a360:	e28d0030 	add	r0, sp, #48	; 0x30
    a364:	e3a01601 	mov	r1, #1048576	; 0x100000
    a368:	eb00084f 	bl	c4ac <CDWHCIRegister::Or(unsigned int)>
    a36c:	e1a00004 	mov	r0, r4
    a370:	eb000a9b 	bl	cde4 <CDWHCITransferStageData::IsDirectionIn() const>
    a374:	e3500000 	cmp	r0, #0
    a378:	0a000056 	beq	a4d8 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x2f0>
    a37c:	e3a01902 	mov	r1, #32768	; 0x8000
    a380:	e28d0030 	add	r0, sp, #48	; 0x30
    a384:	eb000848 	bl	c4ac <CDWHCIRegister::Or(unsigned int)>
    a388:	e1a00004 	mov	r0, r4
    a38c:	eb000a71 	bl	cd58 <CDWHCITransferStageData::GetSpeed() const>
    a390:	e3500000 	cmp	r0, #0
    a394:	1a00004b 	bne	a4c8 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x2e0>
    a398:	e3a01802 	mov	r1, #131072	; 0x20000
    a39c:	e28d0030 	add	r0, sp, #48	; 0x30
    a3a0:	eb000841 	bl	c4ac <CDWHCIRegister::Or(unsigned int)>
    a3a4:	e3e0157f 	mvn	r1, #532676608	; 0x1fc00000
    a3a8:	e28d0030 	add	r0, sp, #48	; 0x30
    a3ac:	eb00082e 	bl	c46c <CDWHCIRegister::And(unsigned int)>
    a3b0:	e1a00004 	mov	r0, r4
    a3b4:	eb000a21 	bl	cc40 <CDWHCITransferStageData::GetDeviceAddress() const>
    a3b8:	e1a01b00 	lsl	r1, r0, #22
    a3bc:	e28d0030 	add	r0, sp, #48	; 0x30
    a3c0:	eb000839 	bl	c4ac <CDWHCIRegister::Or(unsigned int)>
    a3c4:	e3e01703 	mvn	r1, #786432	; 0xc0000
    a3c8:	e28d0030 	add	r0, sp, #48	; 0x30
    a3cc:	eb000826 	bl	c46c <CDWHCIRegister::And(unsigned int)>
    a3d0:	e1a00004 	mov	r0, r4
    a3d4:	eb000a2b 	bl	cc88 <CDWHCITransferStageData::GetEndpointType() const>
    a3d8:	e1a01900 	lsl	r1, r0, #18
    a3dc:	e28d0030 	add	r0, sp, #48	; 0x30
    a3e0:	eb000831 	bl	c4ac <CDWHCIRegister::Or(unsigned int)>
    a3e4:	e3e01b1e 	mvn	r1, #30720	; 0x7800
    a3e8:	e28d0030 	add	r0, sp, #48	; 0x30
    a3ec:	eb00081e 	bl	c46c <CDWHCIRegister::And(unsigned int)>
    a3f0:	e1a00004 	mov	r0, r4
    a3f4:	eb000a43 	bl	cd08 <CDWHCITransferStageData::GetEndpointNumber() const>
    a3f8:	e1a01580 	lsl	r1, r0, #11
    a3fc:	e28d0030 	add	r0, sp, #48	; 0x30
    a400:	eb000829 	bl	c4ac <CDWHCIRegister::Or(unsigned int)>
    a404:	e1a00004 	mov	r0, r4
    a408:	eb000b1f 	bl	d08c <CDWHCITransferStageData::GetFrameScheduler() const>
    a40c:	e2506000 	subs	r6, r0, #0
    a410:	0a00000b 	beq	a444 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x25c>
    a414:	e5963000 	ldr	r3, [r6]
    a418:	e5933014 	ldr	r3, [r3, #20]
    a41c:	e12fff33 	blx	r3
    a420:	e5963000 	ldr	r3, [r6]
    a424:	e1a00006 	mov	r0, r6
    a428:	e5933018 	ldr	r3, [r3, #24]
    a42c:	e12fff33 	blx	r3
    a430:	e3500000 	cmp	r0, #0
    a434:	1a00002b 	bne	a4e8 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x300>
    a438:	e3e01202 	mvn	r1, #536870912	; 0x20000000
    a43c:	e28d0030 	add	r0, sp, #48	; 0x30
    a440:	eb000809 	bl	c46c <CDWHCIRegister::And(unsigned int)>
    a444:	e59f115c 	ldr	r1, [pc, #348]	; a5a8 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3c0>
    a448:	e28d003c 	add	r0, sp, #60	; 0x3c
    a44c:	e0851001 	add	r1, r5, r1
    a450:	eb0007c4 	bl	c368 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a454:	e1a00004 	mov	r0, r4
    a458:	eb000ac4 	bl	cf70 <CDWHCITransferStageData::GetStatusMask() const>
    a45c:	e1a01000 	mov	r1, r0
    a460:	e28d003c 	add	r0, sp, #60	; 0x3c
    a464:	eb0007eb 	bl	c418 <CDWHCIRegister::Set(unsigned int)>
    a468:	e28d003c 	add	r0, sp, #60	; 0x3c
    a46c:	eb0007cd 	bl	c3a8 <CDWHCIRegister::Write()>
    a470:	e28d0030 	add	r0, sp, #48	; 0x30
    a474:	e3a01102 	mov	r1, #-2147483648	; 0x80000000
    a478:	eb00080b 	bl	c4ac <CDWHCIRegister::Or(unsigned int)>
    a47c:	e3e01101 	mvn	r1, #1073741824	; 0x40000000
    a480:	e28d0030 	add	r0, sp, #48	; 0x30
    a484:	eb0007f8 	bl	c46c <CDWHCIRegister::And(unsigned int)>
    a488:	e28d0030 	add	r0, sp, #48	; 0x30
    a48c:	eb0007c5 	bl	c3a8 <CDWHCIRegister::Write()>
    a490:	e28d003c 	add	r0, sp, #60	; 0x3c
    a494:	eb0007bb 	bl	c388 <CDWHCIRegister::~CDWHCIRegister()>
    a498:	e28d0030 	add	r0, sp, #48	; 0x30
    a49c:	eb0007b9 	bl	c388 <CDWHCIRegister::~CDWHCIRegister()>
    a4a0:	e28d0024 	add	r0, sp, #36	; 0x24
    a4a4:	eb0007b7 	bl	c388 <CDWHCIRegister::~CDWHCIRegister()>
    a4a8:	e28d0018 	add	r0, sp, #24
    a4ac:	eb0007b5 	bl	c388 <CDWHCIRegister::~CDWHCIRegister()>
    a4b0:	e28d000c 	add	r0, sp, #12
    a4b4:	eb0007b3 	bl	c388 <CDWHCIRegister::~CDWHCIRegister()>
    a4b8:	e1a0000d 	mov	r0, sp
    a4bc:	eb0007b1 	bl	c388 <CDWHCIRegister::~CDWHCIRegister()>
    a4c0:	e28dd048 	add	sp, sp, #72	; 0x48
    a4c4:	e8bd8070 	pop	{r4, r5, r6, pc}
    a4c8:	e3e01802 	mvn	r1, #131072	; 0x20000
    a4cc:	e28d0030 	add	r0, sp, #48	; 0x30
    a4d0:	eb0007e5 	bl	c46c <CDWHCIRegister::And(unsigned int)>
    a4d4:	eaffffb2 	b	a3a4 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x1bc>
    a4d8:	e3e01902 	mvn	r1, #32768	; 0x8000
    a4dc:	e28d0030 	add	r0, sp, #48	; 0x30
    a4e0:	eb0007e1 	bl	c46c <CDWHCIRegister::And(unsigned int)>
    a4e4:	eaffffa7 	b	a388 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x1a0>
    a4e8:	e3a01202 	mov	r1, #536870912	; 0x20000000
    a4ec:	e28d0030 	add	r0, sp, #48	; 0x30
    a4f0:	eb0007ed 	bl	c4ac <CDWHCIRegister::Or(unsigned int)>
    a4f4:	eaffffd2 	b	a444 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x25c>
    a4f8:	e1a00004 	mov	r0, r4
    a4fc:	eb000a7d 	bl	cef8 <CDWHCITransferStageData::GetHubPortAddress() const>
    a500:	e1a01000 	mov	r1, r0
    a504:	e28d0024 	add	r0, sp, #36	; 0x24
    a508:	eb0007e7 	bl	c4ac <CDWHCIRegister::Or(unsigned int)>
    a50c:	e1a00004 	mov	r0, r4
    a510:	eb000a5c 	bl	ce88 <CDWHCITransferStageData::GetHubAddress() const>
    a514:	e1a01380 	lsl	r1, r0, #7
    a518:	e28d0024 	add	r0, sp, #36	; 0x24
    a51c:	eb0007e2 	bl	c4ac <CDWHCIRegister::Or(unsigned int)>
    a520:	e1a00004 	mov	r0, r4
    a524:	eb000a8f 	bl	cf68 <CDWHCITransferStageData::GetSplitPosition() const>
    a528:	e1a01700 	lsl	r1, r0, #14
    a52c:	e28d0024 	add	r0, sp, #36	; 0x24
    a530:	eb0007dd 	bl	c4ac <CDWHCIRegister::Or(unsigned int)>
    a534:	e1a00004 	mov	r0, r4
    a538:	eb000a44 	bl	ce50 <CDWHCITransferStageData::IsSplitComplete() const>
    a53c:	e3500000 	cmp	r0, #0
    a540:	1a000008 	bne	a568 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x380>
    a544:	e3a01102 	mov	r1, #-2147483648	; 0x80000000
    a548:	e28d0024 	add	r0, sp, #36	; 0x24
    a54c:	eb0007d6 	bl	c4ac <CDWHCIRegister::Or(unsigned int)>
    a550:	eaffff6e 	b	a310 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x128>
    a554:	e59f2050 	ldr	r2, [pc, #80]	; a5ac <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3c4>
    a558:	e59f1050 	ldr	r1, [pc, #80]	; a5b0 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3c8>
    a55c:	e59f0050 	ldr	r0, [pc, #80]	; a5b4 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3cc>
    a560:	eb00400c 	bl	1a598 <assertion_failed>
    a564:	eaffff2a 	b	a214 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x2c>
    a568:	e3a01801 	mov	r1, #65536	; 0x10000
    a56c:	e28d0024 	add	r0, sp, #36	; 0x24
    a570:	eb0007cd 	bl	c4ac <CDWHCIRegister::Or(unsigned int)>
    a574:	eafffff2 	b	a544 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x35c>
    a578:	e59f2038 	ldr	r2, [pc, #56]	; a5b8 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3d0>
    a57c:	e59f102c 	ldr	r1, [pc, #44]	; a5b0 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3c8>
    a580:	e59f0034 	ldr	r0, [pc, #52]	; a5bc <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3d4>
    a584:	eb004003 	bl	1a598 <assertion_failed>
    a588:	eaffff1b 	b	a1fc <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x14>
    a58c:	20980508 	.word	0x20980508
    a590:	20980510 	.word	0x20980510
    a594:	1ff80000 	.word	0x1ff80000
    a598:	20980514 	.word	0x20980514
    a59c:	20980504 	.word	0x20980504
    a5a0:	20980500 	.word	0x20980500
    a5a4:	fffff800 	.word	0xfffff800
    a5a8:	2098050c 	.word	0x2098050c
    a5ac:	0000030b 	.word	0x0000030b
    a5b0:	00024090 	.word	0x00024090
    a5b4:	00024110 	.word	0x00024110
    a5b8:	00000309 	.word	0x00000309
    a5bc:	00024100 	.word	0x00024100

0000a5c0 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>:
    a5c0:	e92d4070 	push	{r4, r5, r6, lr}
    a5c4:	e2515000 	subs	r5, r1, #0
    a5c8:	e24dd018 	sub	sp, sp, #24
    a5cc:	e1a06000 	mov	r6, r0
    a5d0:	0a000037 	beq	a6b4 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0xf4>
    a5d4:	e1a00005 	mov	r0, r5
    a5d8:	eb0008ba 	bl	c8c8 <CDWHCITransferStageData::GetChannelNumber() const>
    a5dc:	e596300c 	ldr	r3, [r6, #12]
    a5e0:	e1a04000 	mov	r4, r0
    a5e4:	e1500003 	cmp	r0, r3
    a5e8:	2a00002c 	bcs	a6a0 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0xe0>
    a5ec:	e59f10d4 	ldr	r1, [pc, #212]	; a6c8 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x108>
    a5f0:	e1a0000d 	mov	r0, sp
    a5f4:	e0841001 	add	r1, r4, r1
    a5f8:	e1a04281 	lsl	r4, r1, #5
    a5fc:	e1a01004 	mov	r1, r4
    a600:	eb000758 	bl	c368 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a604:	e1a0000d 	mov	r0, sp
    a608:	eb00075f 	bl	c38c <CDWHCIRegister::Read()>
    a60c:	e1a0000d 	mov	r0, sp
    a610:	e3a01102 	mov	r1, #-2147483648	; 0x80000000
    a614:	eb000783 	bl	c428 <CDWHCIRegister::IsSet(unsigned int) const>
    a618:	e3500000 	cmp	r0, #0
    a61c:	1a000006 	bne	a63c <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x7c>
    a620:	e1a01005 	mov	r1, r5
    a624:	e1a00006 	mov	r0, r6
    a628:	ebfffeee 	bl	a1e8 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)>
    a62c:	e1a0000d 	mov	r0, sp
    a630:	eb000754 	bl	c388 <CDWHCIRegister::~CDWHCIRegister()>
    a634:	e28dd018 	add	sp, sp, #24
    a638:	e8bd8070 	pop	{r4, r5, r6, pc}
    a63c:	e1a00005 	mov	r0, r5
    a640:	e3a01000 	mov	r1, #0
    a644:	eb000899 	bl	c8b0 <CDWHCITransferStageData::SetSubState(unsigned int)>
    a648:	e1a0000d 	mov	r0, sp
    a64c:	e3e01102 	mvn	r1, #-2147483648	; 0x80000000
    a650:	eb000785 	bl	c46c <CDWHCIRegister::And(unsigned int)>
    a654:	e3a01101 	mov	r1, #1073741824	; 0x40000000
    a658:	e1a0000d 	mov	r0, sp
    a65c:	eb000792 	bl	c4ac <CDWHCIRegister::Or(unsigned int)>
    a660:	e1a0000d 	mov	r0, sp
    a664:	eb00074f 	bl	c3a8 <CDWHCIRegister::Write()>
    a668:	e284100c 	add	r1, r4, #12
    a66c:	e28d000c 	add	r0, sp, #12
    a670:	eb00073c 	bl	c368 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a674:	e3a01002 	mov	r1, #2
    a678:	e28d000c 	add	r0, sp, #12
    a67c:	eb000765 	bl	c418 <CDWHCIRegister::Set(unsigned int)>
    a680:	e28d000c 	add	r0, sp, #12
    a684:	eb000747 	bl	c3a8 <CDWHCIRegister::Write()>
    a688:	e28d000c 	add	r0, sp, #12
    a68c:	eb00073d 	bl	c388 <CDWHCIRegister::~CDWHCIRegister()>
    a690:	e1a0000d 	mov	r0, sp
    a694:	eb00073b 	bl	c388 <CDWHCIRegister::~CDWHCIRegister()>
    a698:	e28dd018 	add	sp, sp, #24
    a69c:	e8bd8070 	pop	{r4, r5, r6, pc}
    a6a0:	e3a02e2f 	mov	r2, #752	; 0x2f0
    a6a4:	e59f1020 	ldr	r1, [pc, #32]	; a6cc <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x10c>
    a6a8:	e59f0020 	ldr	r0, [pc, #32]	; a6d0 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x110>
    a6ac:	eb003fb9 	bl	1a598 <assertion_failed>
    a6b0:	eaffffcd 	b	a5ec <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x2c>
    a6b4:	e59f2018 	ldr	r2, [pc, #24]	; a6d4 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x114>
    a6b8:	e59f100c 	ldr	r1, [pc, #12]	; a6cc <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x10c>
    a6bc:	e59f0014 	ldr	r0, [pc, #20]	; a6d8 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x118>
    a6c0:	eb003fb4 	bl	1a598 <assertion_failed>
    a6c4:	eaffffc2 	b	a5d4 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x14>
    a6c8:	0104c028 	.word	0x0104c028
    a6cc:	00024090 	.word	0x00024090
    a6d0:	00024110 	.word	0x00024110
    a6d4:	000002ee 	.word	0x000002ee
    a6d8:	00024100 	.word	0x00024100

0000a6dc <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)>:
    a6dc:	e92d4070 	push	{r4, r5, r6, lr}
    a6e0:	e3a03000 	mov	r3, #0
    a6e4:	e1a05000 	mov	r5, r0
    a6e8:	e1a04001 	mov	r4, r1
    a6ec:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    a6f0:	e1510003 	cmp	r1, r3
    a6f4:	0a00001f 	beq	a778 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0x9c>
    a6f8:	e1a00004 	mov	r0, r4
    a6fc:	eb000869 	bl	c8a8 <CDWHCITransferStageData::GetState() const>
    a700:	e3500003 	cmp	r0, #3
    a704:	0a000003 	beq	a718 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0x3c>
    a708:	e59f207c 	ldr	r2, [pc, #124]	; a78c <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0xb0>
    a70c:	e59f107c 	ldr	r1, [pc, #124]	; a790 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0xb4>
    a710:	e59f007c 	ldr	r0, [pc, #124]	; a794 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0xb8>
    a714:	eb003f9f 	bl	1a598 <assertion_failed>
    a718:	e1a00004 	mov	r0, r4
    a71c:	eb0009c9 	bl	ce48 <CDWHCITransferStageData::IsSplit() const>
    a720:	e2501000 	subs	r1, r0, #0
    a724:	1a000007 	bne	a748 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0x6c>
    a728:	e1a00004 	mov	r0, r4
    a72c:	eb00085b 	bl	c8a0 <CDWHCITransferStageData::SetState(unsigned int)>
    a730:	e1a01004 	mov	r1, r4
    a734:	e1a00005 	mov	r0, r5
    a738:	ebffffa0 	bl	a5c0 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>
    a73c:	e3a03000 	mov	r3, #0
    a740:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    a744:	e8bd8070 	pop	{r4, r5, r6, pc}
    a748:	e1a00004 	mov	r0, r4
    a74c:	e3a01001 	mov	r1, #1
    a750:	eb000852 	bl	c8a0 <CDWHCITransferStageData::SetState(unsigned int)>
    a754:	e3a01000 	mov	r1, #0
    a758:	e1a00004 	mov	r0, r4
    a75c:	eb000841 	bl	c868 <CDWHCITransferStageData::SetSplitComplete(bool)>
    a760:	e1a00004 	mov	r0, r4
    a764:	eb000a48 	bl	d08c <CDWHCITransferStageData::GetFrameScheduler() const>
    a768:	e5903000 	ldr	r3, [r0]
    a76c:	e5933008 	ldr	r3, [r3, #8]
    a770:	e12fff33 	blx	r3
    a774:	eaffffed 	b	a730 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0x54>
    a778:	e59f2018 	ldr	r2, [pc, #24]	; a798 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0xbc>
    a77c:	e59f100c 	ldr	r1, [pc, #12]	; a790 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0xb4>
    a780:	e59f0014 	ldr	r0, [pc, #20]	; a79c <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0xc0>
    a784:	eb003f83 	bl	1a598 <assertion_failed>
    a788:	eaffffda 	b	a6f8 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0x1c>
    a78c:	000004ef 	.word	0x000004ef
    a790:	00024090 	.word	0x00024090
    a794:	00024128 	.word	0x00024128
    a798:	000004ee 	.word	0x000004ee
    a79c:	00024100 	.word	0x00024100

0000a7a0 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)>:
    a7a0:	e92d4070 	push	{r4, r5, r6, lr}
    a7a4:	e2525000 	subs	r5, r2, #0
    a7a8:	e1a04001 	mov	r4, r1
    a7ac:	0a00000d 	beq	a7e8 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x48>
    a7b0:	e3540000 	cmp	r4, #0
    a7b4:	0a000003 	beq	a7c8 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x28>
    a7b8:	e1a01004 	mov	r1, r4
    a7bc:	e1a00005 	mov	r0, r5
    a7c0:	e8bd4070 	pop	{r4, r5, r6, lr}
    a7c4:	eaffffc4 	b	a6dc <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)>
    a7c8:	e59f102c 	ldr	r1, [pc, #44]	; a7fc <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x5c>
    a7cc:	e59f002c 	ldr	r0, [pc, #44]	; a800 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x60>
    a7d0:	e59f202c 	ldr	r2, [pc, #44]	; a804 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x64>
    a7d4:	eb003f6f 	bl	1a598 <assertion_failed>
    a7d8:	e1a01004 	mov	r1, r4
    a7dc:	e1a00005 	mov	r0, r5
    a7e0:	e8bd4070 	pop	{r4, r5, r6, lr}
    a7e4:	eaffffbc 	b	a6dc <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)>
    a7e8:	e59f2018 	ldr	r2, [pc, #24]	; a808 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x68>
    a7ec:	e59f1008 	ldr	r1, [pc, #8]	; a7fc <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x5c>
    a7f0:	e59f0014 	ldr	r0, [pc, #20]	; a80c <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x6c>
    a7f4:	eb003f67 	bl	1a598 <assertion_failed>
    a7f8:	eaffffec 	b	a7b0 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x10>
    a7fc:	00024090 	.word	0x00024090
    a800:	0002415c 	.word	0x0002415c
    a804:	00000508 	.word	0x00000508
    a808:	00000505 	.word	0x00000505
    a80c:	000240a0 	.word	0x000240a0

0000a810 <CDWHCIDevice::AllocateChannel()>:
    a810:	e92d4010 	push	{r4, lr}
    a814:	e590c014 	ldr	ip, [r0, #20]
    a818:	e24dd008 	sub	sp, sp, #8
    a81c:	e35c0000 	cmp	ip, #0
    a820:	e1a04000 	mov	r4, r0
    a824:	1a000014 	bne	a87c <CDWHCIDevice::AllocateChannel()+0x6c>
    a828:	e590100c 	ldr	r1, [r0, #12]
    a82c:	e3510000 	cmp	r1, #0
    a830:	0a00000e 	beq	a870 <CDWHCIDevice::AllocateChannel()+0x60>
    a834:	e5903010 	ldr	r3, [r0, #16]
    a838:	e2130001 	ands	r0, r3, #1
    a83c:	0a000025 	beq	a8d8 <CDWHCIDevice::AllocateChannel()+0xc8>
    a840:	e3a00000 	mov	r0, #0
    a844:	e3a03001 	mov	r3, #1
    a848:	ea000002 	b	a858 <CDWHCIDevice::AllocateChannel()+0x48>
    a84c:	e5942010 	ldr	r2, [r4, #16]
    a850:	e1120003 	tst	r2, r3
    a854:	0a000013 	beq	a8a8 <CDWHCIDevice::AllocateChannel()+0x98>
    a858:	e2800001 	add	r0, r0, #1
    a85c:	e1500001 	cmp	r0, r1
    a860:	e1a03083 	lsl	r3, r3, #1
    a864:	3afffff8 	bcc	a84c <CDWHCIDevice::AllocateChannel()+0x3c>
    a868:	e35c0000 	cmp	ip, #0
    a86c:	1a000017 	bne	a8d0 <CDWHCIDevice::AllocateChannel()+0xc0>
    a870:	e3a00010 	mov	r0, #16
    a874:	e28dd008 	add	sp, sp, #8
    a878:	e8bd8010 	pop	{r4, pc}
    a87c:	e1a0000c 	mov	r0, ip
    a880:	eb005fbb 	bl	22774 <EnterCritical>
    a884:	e594100c 	ldr	r1, [r4, #12]
    a888:	e3510000 	cmp	r1, #0
    a88c:	0594c014 	ldreq	ip, [r4, #20]
    a890:	0afffff4 	beq	a868 <CDWHCIDevice::AllocateChannel()+0x58>
    a894:	e5943010 	ldr	r3, [r4, #16]
    a898:	e594c014 	ldr	ip, [r4, #20]
    a89c:	e2130001 	ands	r0, r3, #1
    a8a0:	1affffe6 	bne	a840 <CDWHCIDevice::AllocateChannel()+0x30>
    a8a4:	e3a03001 	mov	r3, #1
    a8a8:	e5942010 	ldr	r2, [r4, #16]
    a8ac:	e35c0000 	cmp	ip, #0
    a8b0:	e1823003 	orr	r3, r2, r3
    a8b4:	e5843010 	str	r3, [r4, #16]
    a8b8:	0affffed 	beq	a874 <CDWHCIDevice::AllocateChannel()+0x64>
    a8bc:	e58d0004 	str	r0, [sp, #4]
    a8c0:	eb005fd8 	bl	22828 <LeaveCritical>
    a8c4:	e59d0004 	ldr	r0, [sp, #4]
    a8c8:	e28dd008 	add	sp, sp, #8
    a8cc:	e8bd8010 	pop	{r4, pc}
    a8d0:	eb005fd4 	bl	22828 <LeaveCritical>
    a8d4:	eaffffe5 	b	a870 <CDWHCIDevice::AllocateChannel()+0x60>
    a8d8:	e5943010 	ldr	r3, [r4, #16]
    a8dc:	e3833001 	orr	r3, r3, #1
    a8e0:	e5843010 	str	r3, [r4, #16]
    a8e4:	eaffffe2 	b	a874 <CDWHCIDevice::AllocateChannel()+0x64>

0000a8e8 <CDWHCIDevice::FreeChannel(unsigned int)>:
    a8e8:	e590300c 	ldr	r3, [r0, #12]
    a8ec:	e92d4070 	push	{r4, r5, r6, lr}
    a8f0:	e1530001 	cmp	r3, r1
    a8f4:	e1a04000 	mov	r4, r0
    a8f8:	e1a06001 	mov	r6, r1
    a8fc:	9a000016 	bls	a95c <CDWHCIDevice::FreeChannel(unsigned int)+0x74>
    a900:	e3a05001 	mov	r5, #1
    a904:	e5940014 	ldr	r0, [r4, #20]
    a908:	e1a05615 	lsl	r5, r5, r6
    a90c:	e3500000 	cmp	r0, #0
    a910:	1a00000f 	bne	a954 <CDWHCIDevice::FreeChannel(unsigned int)+0x6c>
    a914:	e5943010 	ldr	r3, [r4, #16]
    a918:	e1150003 	tst	r5, r3
    a91c:	0a000007 	beq	a940 <CDWHCIDevice::FreeChannel(unsigned int)+0x58>
    a920:	e5943010 	ldr	r3, [r4, #16]
    a924:	e5942014 	ldr	r2, [r4, #20]
    a928:	e1c35005 	bic	r5, r3, r5
    a92c:	e3520000 	cmp	r2, #0
    a930:	e5845010 	str	r5, [r4, #16]
    a934:	08bd8070 	popeq	{r4, r5, r6, pc}
    a938:	e8bd4070 	pop	{r4, r5, r6, lr}
    a93c:	ea005fb9 	b	22828 <LeaveCritical>
    a940:	e59f2028 	ldr	r2, [pc, #40]	; a970 <CDWHCIDevice::FreeChannel(unsigned int)+0x88>
    a944:	e59f1028 	ldr	r1, [pc, #40]	; a974 <CDWHCIDevice::FreeChannel(unsigned int)+0x8c>
    a948:	e59f0028 	ldr	r0, [pc, #40]	; a978 <CDWHCIDevice::FreeChannel(unsigned int)+0x90>
    a94c:	eb003f11 	bl	1a598 <assertion_failed>
    a950:	eafffff2 	b	a920 <CDWHCIDevice::FreeChannel(unsigned int)+0x38>
    a954:	eb005f86 	bl	22774 <EnterCritical>
    a958:	eaffffed 	b	a914 <CDWHCIDevice::FreeChannel(unsigned int)+0x2c>
    a95c:	e59f2018 	ldr	r2, [pc, #24]	; a97c <CDWHCIDevice::FreeChannel(unsigned int)+0x94>
    a960:	e59f100c 	ldr	r1, [pc, #12]	; a974 <CDWHCIDevice::FreeChannel(unsigned int)+0x8c>
    a964:	e59f0014 	ldr	r0, [pc, #20]	; a980 <CDWHCIDevice::FreeChannel(unsigned int)+0x98>
    a968:	eb003f0a 	bl	1a598 <assertion_failed>
    a96c:	eaffffe3 	b	a900 <CDWHCIDevice::FreeChannel(unsigned int)+0x18>
    a970:	0000052e 	.word	0x0000052e
    a974:	00024090 	.word	0x00024090
    a978:	00024168 	.word	0x00024168
    a97c:	00000529 	.word	0x00000529
    a980:	00024110 	.word	0x00024110

0000a984 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)>:
    a984:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    a988:	e2517000 	subs	r7, r1, #0
    a98c:	e24dd00c 	sub	sp, sp, #12
    a990:	e1a04000 	mov	r4, r0
    a994:	e1a08002 	mov	r8, r2
    a998:	e1a09003 	mov	r9, r3
    a99c:	0a000048 	beq	aac4 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x140>
    a9a0:	e1a00004 	mov	r0, r4
    a9a4:	ebffff99 	bl	a810 <CDWHCIDevice::AllocateChannel()>
    a9a8:	e594300c 	ldr	r3, [r4, #12]
    a9ac:	e1a05000 	mov	r5, r0
    a9b0:	e1500003 	cmp	r0, r3
    a9b4:	23a07000 	movcs	r7, #0
    a9b8:	3a000002 	bcc	a9c8 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x44>
    a9bc:	e1a00007 	mov	r0, r7
    a9c0:	e28dd00c 	add	sp, sp, #12
    a9c4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    a9c8:	e3a00054 	mov	r0, #84	; 0x54
    a9cc:	eb0009b0 	bl	d094 <CDWHCITransferStageData::operator new(unsigned int)>
    a9d0:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
    a9d4:	e58d9000 	str	r9, [sp]
    a9d8:	e58d3004 	str	r3, [sp, #4]
    a9dc:	e1a02007 	mov	r2, r7
    a9e0:	e1a03008 	mov	r3, r8
    a9e4:	e1a01005 	mov	r1, r5
    a9e8:	e0848105 	add	r8, r4, r5, lsl #2
    a9ec:	e1a06000 	mov	r6, r0
    a9f0:	eb0007ca 	bl	c920 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)>
    a9f4:	e5983018 	ldr	r3, [r8, #24]
    a9f8:	e3530000 	cmp	r3, #0
    a9fc:	0a000003 	beq	aa10 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x8c>
    aa00:	e59f20d0 	ldr	r2, [pc, #208]	; aad8 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x154>
    aa04:	e59f10d0 	ldr	r1, [pc, #208]	; aadc <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x158>
    aa08:	e59f00d0 	ldr	r0, [pc, #208]	; aae0 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x15c>
    aa0c:	eb003ee1 	bl	1a598 <assertion_failed>
    aa10:	e1a01005 	mov	r1, r5
    aa14:	e1a00004 	mov	r0, r4
    aa18:	e5886018 	str	r6, [r8, #24]
    aa1c:	ebfffdb7 	bl	a100 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)>
    aa20:	e1a00006 	mov	r0, r6
    aa24:	eb000907 	bl	ce48 <CDWHCITransferStageData::IsSplit() const>
    aa28:	e2501000 	subs	r1, r0, #0
    aa2c:	e1a00006 	mov	r0, r6
    aa30:	1a000007 	bne	aa54 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0xd0>
    aa34:	eb000799 	bl	c8a0 <CDWHCITransferStageData::SetState(unsigned int)>
    aa38:	e3a07001 	mov	r7, #1
    aa3c:	e1a00004 	mov	r0, r4
    aa40:	e1a01006 	mov	r1, r6
    aa44:	ebfffedd 	bl	a5c0 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>
    aa48:	e1a00007 	mov	r0, r7
    aa4c:	e28dd00c 	add	sp, sp, #12
    aa50:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    aa54:	eb000799 	bl	c8c0 <CDWHCITransferStageData::BeginSplitCycle()>
    aa58:	e2507000 	subs	r7, r0, #0
    aa5c:	1a00000c 	bne	aa94 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x110>
    aa60:	e1a01005 	mov	r1, r5
    aa64:	e1a00004 	mov	r0, r4
    aa68:	ebfffdc1 	bl	a174 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    aa6c:	e1a00006 	mov	r0, r6
    aa70:	eb0006fa 	bl	c660 <CDWHCITransferStageData::~CDWHCITransferStageData()>
    aa74:	e1a00006 	mov	r0, r6
    aa78:	e3a01054 	mov	r1, #84	; 0x54
    aa7c:	eb00099d 	bl	d0f8 <CDWHCITransferStageData::operator delete(void*, unsigned int)>
    aa80:	e5887018 	str	r7, [r8, #24]
    aa84:	e1a01005 	mov	r1, r5
    aa88:	e1a00004 	mov	r0, r4
    aa8c:	ebffff95 	bl	a8e8 <CDWHCIDevice::FreeChannel(unsigned int)>
    aa90:	eaffffc9 	b	a9bc <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x38>
    aa94:	e1a00006 	mov	r0, r6
    aa98:	e3a01001 	mov	r1, #1
    aa9c:	eb00077f 	bl	c8a0 <CDWHCITransferStageData::SetState(unsigned int)>
    aaa0:	e3a01000 	mov	r1, #0
    aaa4:	e1a00006 	mov	r0, r6
    aaa8:	eb00076e 	bl	c868 <CDWHCITransferStageData::SetSplitComplete(bool)>
    aaac:	e1a00006 	mov	r0, r6
    aab0:	eb000975 	bl	d08c <CDWHCITransferStageData::GetFrameScheduler() const>
    aab4:	e5903000 	ldr	r3, [r0]
    aab8:	e5933008 	ldr	r3, [r3, #8]
    aabc:	e12fff33 	blx	r3
    aac0:	eaffffdc 	b	aa38 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0xb4>
    aac4:	e59f2018 	ldr	r2, [pc, #24]	; aae4 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x160>
    aac8:	e59f100c 	ldr	r1, [pc, #12]	; aadc <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x158>
    aacc:	e59f0014 	ldr	r0, [pc, #20]	; aae8 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x164>
    aad0:	eb003eb0 	bl	1a598 <assertion_failed>
    aad4:	eaffffb1 	b	a9a0 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x1c>
    aad8:	00000282 	.word	0x00000282
    aadc:	00024090 	.word	0x00024090
    aae0:	00024198 	.word	0x00024198
    aae4:	00000271 	.word	0x00000271
    aae8:	0002418c 	.word	0x0002418c

0000aaec <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)>:
    aaec:	e92d4070 	push	{r4, r5, r6, lr}
    aaf0:	e3a03000 	mov	r3, #0
    aaf4:	e24dd008 	sub	sp, sp, #8
    aaf8:	e1a05000 	mov	r5, r0
    aafc:	e1a04001 	mov	r4, r1
    ab00:	e1a06002 	mov	r6, r2
    ab04:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    ab08:	e1510003 	cmp	r1, r3
    ab0c:	0a000025 	beq	aba8 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xbc>
    ab10:	e1a00004 	mov	r0, r4
    ab14:	eb000f61 	bl	e8a0 <CUSBRequest::GetEndpoint() const>
    ab18:	eb000e4a 	bl	e448 <CUSBEndpoint::GetType() const>
    ab1c:	e3500001 	cmp	r0, #1
    ab20:	0a000008 	beq	ab48 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0x5c>
    ab24:	e1a00004 	mov	r0, r4
    ab28:	eb000f5c 	bl	e8a0 <CUSBRequest::GetEndpoint() const>
    ab2c:	eb000e45 	bl	e448 <CUSBEndpoint::GetType() const>
    ab30:	e3500002 	cmp	r0, #2
    ab34:	0a000003 	beq	ab48 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0x5c>
    ab38:	e3a020e8 	mov	r2, #232	; 0xe8
    ab3c:	e59f1078 	ldr	r1, [pc, #120]	; abbc <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xd0>
    ab40:	e59f0078 	ldr	r0, [pc, #120]	; abc0 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xd4>
    ab44:	eb003e93 	bl	1a598 <assertion_failed>
    ab48:	e1a00004 	mov	r0, r4
    ab4c:	eb000fa0 	bl	e9d4 <CUSBRequest::GetBufLen() const>
    ab50:	e3500000 	cmp	r0, #0
    ab54:	1a000003 	bne	ab68 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0x7c>
    ab58:	e3a020e9 	mov	r2, #233	; 0xe9
    ab5c:	e59f1058 	ldr	r1, [pc, #88]	; abbc <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xd0>
    ab60:	e59f005c 	ldr	r0, [pc, #92]	; abc4 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xd8>
    ab64:	eb003e8b 	bl	1a598 <assertion_failed>
    ab68:	e3a01000 	mov	r1, #0
    ab6c:	e1a00004 	mov	r0, r4
    ab70:	eb000f5a 	bl	e8e0 <CUSBRequest::SetStatus(int)>
    ab74:	e1a00004 	mov	r0, r4
    ab78:	eb000f48 	bl	e8a0 <CUSBRequest::GetEndpoint() const>
    ab7c:	eb000e33 	bl	e450 <CUSBEndpoint::IsDirectionIn() const>
    ab80:	e58d6000 	str	r6, [sp]
    ab84:	e1a02000 	mov	r2, r0
    ab88:	e1a01004 	mov	r1, r4
    ab8c:	e1a00005 	mov	r0, r5
    ab90:	e3a03000 	mov	r3, #0
    ab94:	ebffff7a 	bl	a984 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)>
    ab98:	e3a03000 	mov	r3, #0
    ab9c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    aba0:	e28dd008 	add	sp, sp, #8
    aba4:	e8bd8070 	pop	{r4, r5, r6, pc}
    aba8:	e3a020e6 	mov	r2, #230	; 0xe6
    abac:	e59f1008 	ldr	r1, [pc, #8]	; abbc <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xd0>
    abb0:	e59f0010 	ldr	r0, [pc, #16]	; abc8 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xdc>
    abb4:	eb003e77 	bl	1a598 <assertion_failed>
    abb8:	eaffffd4 	b	ab10 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0x24>
    abbc:	00024090 	.word	0x00024090
    abc0:	000241b4 	.word	0x000241b4
    abc4:	00024228 	.word	0x00024228
    abc8:	0002418c 	.word	0x0002418c

0000abcc <CDWHCIDevice::ChannelInterruptHandler(unsigned int)>:
    abcc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    abd0:	e0807101 	add	r7, r0, r1, lsl #2
    abd4:	e5974018 	ldr	r4, [r7, #24]
    abd8:	e24dd020 	sub	sp, sp, #32
    abdc:	e3540000 	cmp	r4, #0
    abe0:	e1a05000 	mov	r5, r0
    abe4:	e1a06001 	mov	r6, r1
    abe8:	0a0000cd 	beq	af24 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x358>
    abec:	e1a00004 	mov	r0, r4
    abf0:	eb000915 	bl	d04c <CDWHCITransferStageData::GetURB() const>
    abf4:	e2508000 	subs	r8, r0, #0
    abf8:	0a0000ce 	beq	af38 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x36c>
    abfc:	e1a00004 	mov	r0, r4
    ac00:	eb00072c 	bl	c8b8 <CDWHCITransferStageData::GetSubState() const>
    ac04:	e3500000 	cmp	r0, #0
    ac08:	0a00005f 	beq	ad8c <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x1c0>
    ac0c:	e3500001 	cmp	r0, #1
    ac10:	0a00002e 	beq	acd0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x104>
    ac14:	e59f24a4 	ldr	r2, [pc, #1188]	; b0c0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x4f4>
    ac18:	e59f14a4 	ldr	r1, [pc, #1188]	; b0c4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x4f8>
    ac1c:	e59f04a4 	ldr	r0, [pc, #1188]	; b0c8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x4fc>
    ac20:	eb003e5c 	bl	1a598 <assertion_failed>
    ac24:	e1a00004 	mov	r0, r4
    ac28:	eb00071e 	bl	c8a8 <CDWHCITransferStageData::GetState() const>
    ac2c:	e3500001 	cmp	r0, #1
    ac30:	e1a09000 	mov	r9, r0
    ac34:	0a000078 	beq	ae1c <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x250>
    ac38:	3a000068 	bcc	ade0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x214>
    ac3c:	e3500002 	cmp	r0, #2
    ac40:	1a000056 	bne	ada0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x1d4>
    ac44:	e1a00004 	mov	r0, r4
    ac48:	eb0008d5 	bl	cfa4 <CDWHCITransferStageData::GetTransactionStatus() const>
    ac4c:	e59f3478 	ldr	r3, [pc, #1144]	; b0cc <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x500>
    ac50:	e1a09000 	mov	r9, r0
    ac54:	e0033000 	and	r3, r3, r0
    ac58:	e3530000 	cmp	r3, #0
    ac5c:	0a00007d 	beq	ae58 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x28c>
    ac60:	eb00483f 	bl	1cd64 <CLogger::Get()>
    ac64:	e59f1464 	ldr	r1, [pc, #1124]	; b0d0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x504>
    ac68:	e58d9000 	str	r9, [sp]
    ac6c:	e59f3460 	ldr	r3, [pc, #1120]	; b0d4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x508>
    ac70:	e3a02001 	mov	r2, #1
    ac74:	eb0049e3 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ac78:	e3a01000 	mov	r1, #0
    ac7c:	e1a00008 	mov	r0, r8
    ac80:	eb000f16 	bl	e8e0 <CUSBRequest::SetStatus(int)>
    ac84:	e1a01006 	mov	r1, r6
    ac88:	e1a00005 	mov	r0, r5
    ac8c:	ebfffd38 	bl	a174 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    ac90:	e3540000 	cmp	r4, #0
    ac94:	0a000004 	beq	acac <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0xe0>
    ac98:	e1a00004 	mov	r0, r4
    ac9c:	eb00066f 	bl	c660 <CDWHCITransferStageData::~CDWHCITransferStageData()>
    aca0:	e1a00004 	mov	r0, r4
    aca4:	e3a01054 	mov	r1, #84	; 0x54
    aca8:	eb000912 	bl	d0f8 <CDWHCITransferStageData::operator delete(void*, unsigned int)>
    acac:	e3a03000 	mov	r3, #0
    acb0:	e1a01006 	mov	r1, r6
    acb4:	e1a00005 	mov	r0, r5
    acb8:	e5873018 	str	r3, [r7, #24]
    acbc:	ebffff09 	bl	a8e8 <CDWHCIDevice::FreeChannel(unsigned int)>
    acc0:	e1a00008 	mov	r0, r8
    acc4:	eb000f4f 	bl	ea08 <CUSBRequest::CallCompletionRoutine()>
    acc8:	e28dd020 	add	sp, sp, #32
    accc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    acd0:	e1a00004 	mov	r0, r4
    acd4:	eb000846 	bl	cdf4 <CDWHCITransferStageData::GetDMAAddress() const>
    acd8:	e1a09000 	mov	r9, r0
    acdc:	e1a00004 	mov	r0, r4
    ace0:	eb000854 	bl	ce38 <CDWHCITransferStageData::GetBytesToTransfer() const>
    ace4:	e1a01000 	mov	r1, r0
    ace8:	e1a00009 	mov	r0, r9
    acec:	eb005ee3 	bl	22880 <CleanAndInvalidateDataCacheRange>
    acf0:	e59f13e0 	ldr	r1, [pc, #992]	; b0d8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x50c>
    acf4:	e1a09286 	lsl	r9, r6, #5
    acf8:	e0891001 	add	r1, r9, r1
    acfc:	e28d0008 	add	r0, sp, #8
    ad00:	eb000598 	bl	c368 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    ad04:	e28d0008 	add	r0, sp, #8
    ad08:	eb00059f 	bl	c38c <CDWHCIRegister::Read()>
    ad0c:	e59f13c8 	ldr	r1, [pc, #968]	; b0dc <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x510>
    ad10:	e28d0014 	add	r0, sp, #20
    ad14:	e0891001 	add	r1, r9, r1
    ad18:	eb000592 	bl	c368 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    ad1c:	e28d0014 	add	r0, sp, #20
    ad20:	eb000599 	bl	c38c <CDWHCIRegister::Read()>
    ad24:	e3500002 	cmp	r0, #2
    ad28:	0a000087 	beq	af4c <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x380>
    ad2c:	e1a00004 	mov	r0, r4
    ad30:	eb0006e6 	bl	c8d0 <CDWHCITransferStageData::IsPeriodic() const>
    ad34:	e3500000 	cmp	r0, #0
    ad38:	1a00001e 	bne	adb8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x1ec>
    ad3c:	e28d0014 	add	r0, sp, #20
    ad40:	eb000591 	bl	c38c <CDWHCIRegister::Read()>
    ad44:	e1a0a000 	mov	sl, r0
    ad48:	e28d0008 	add	r0, sp, #8
    ad4c:	eb0005a4 	bl	c3e4 <CDWHCIRegister::Get() const>
    ad50:	e1a09000 	mov	r9, r0
    ad54:	e28d0008 	add	r0, sp, #8
    ad58:	eb0005a1 	bl	c3e4 <CDWHCIRegister::Get() const>
    ad5c:	e59f237c 	ldr	r2, [pc, #892]	; b0e0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x514>
    ad60:	e3c034ff 	bic	r3, r0, #-16777216	; 0xff000000
    ad64:	e3c3373e 	bic	r3, r3, #16252928	; 0xf80000
    ad68:	e1a0100a 	mov	r1, sl
    ad6c:	e00229a9 	and	r2, r2, r9, lsr #19
    ad70:	e1a00004 	mov	r0, r4
    ad74:	eb00064c 	bl	c6ac <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)>
    ad78:	e28d0014 	add	r0, sp, #20
    ad7c:	eb000581 	bl	c388 <CDWHCIRegister::~CDWHCIRegister()>
    ad80:	e28d0008 	add	r0, sp, #8
    ad84:	eb00057f 	bl	c388 <CDWHCIRegister::~CDWHCIRegister()>
    ad88:	eaffffa5 	b	ac24 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x58>
    ad8c:	e1a01004 	mov	r1, r4
    ad90:	e1a00005 	mov	r0, r5
    ad94:	ebfffd13 	bl	a1e8 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)>
    ad98:	e28dd020 	add	sp, sp, #32
    ad9c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    ada0:	e59f233c 	ldr	r2, [pc, #828]	; b0e4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x518>
    ada4:	e59f1318 	ldr	r1, [pc, #792]	; b0c4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x4f8>
    ada8:	e59f0318 	ldr	r0, [pc, #792]	; b0c8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x4fc>
    adac:	eb003df9 	bl	1a598 <assertion_failed>
    adb0:	e28dd020 	add	sp, sp, #32
    adb4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    adb8:	e28d0008 	add	r0, sp, #8
    adbc:	eb000588 	bl	c3e4 <CDWHCIRegister::Get() const>
    adc0:	e2200206 	eor	r0, r0, #1610612736	; 0x60000000
    adc4:	e3100206 	tst	r0, #1610612736	; 0x60000000
    adc8:	1affffdb 	bne	ad3c <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x170>
    adcc:	e59f2314 	ldr	r2, [pc, #788]	; b0e8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x51c>
    add0:	e59f12ec 	ldr	r1, [pc, #748]	; b0c4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x4f8>
    add4:	e59f0310 	ldr	r0, [pc, #784]	; b0ec <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x520>
    add8:	eb003dee 	bl	1a598 <assertion_failed>
    addc:	eaffffd6 	b	ad3c <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x170>
    ade0:	e1a00004 	mov	r0, r4
    ade4:	eb00086e 	bl	cfa4 <CDWHCITransferStageData::GetTransactionStatus() const>
    ade8:	e59f92dc 	ldr	r9, [pc, #732]	; b0cc <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x500>
    adec:	e1a0a000 	mov	sl, r0
    adf0:	e0099000 	and	r9, r9, r0
    adf4:	e3590000 	cmp	r9, #0
    adf8:	1a00006e 	bne	afb8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x3ec>
    adfc:	e3100050 	tst	r0, #80	; 0x50
    ae00:	1a000085 	bne	b01c <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x450>
    ae04:	e1a00004 	mov	r0, r4
    ae08:	eb0007f7 	bl	cdec <CDWHCITransferStageData::IsStatusStage() const>
    ae0c:	e3500000 	cmp	r0, #0
    ae10:	0a00009a 	beq	b080 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x4b4>
    ae14:	e3a01001 	mov	r1, #1
    ae18:	eaffff97 	b	ac7c <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0xb0>
    ae1c:	e1a00004 	mov	r0, r4
    ae20:	eb00085f 	bl	cfa4 <CDWHCITransferStageData::GetTransactionStatus() const>
    ae24:	e59f32c4 	ldr	r3, [pc, #708]	; b0f0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x524>
    ae28:	e1a0a000 	mov	sl, r0
    ae2c:	e0033000 	and	r3, r3, r0
    ae30:	e3530000 	cmp	r3, #0
    ae34:	0a00002d 	beq	aef0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x324>
    ae38:	eb0047c9 	bl	1cd64 <CLogger::Get()>
    ae3c:	e59f128c 	ldr	r1, [pc, #652]	; b0d0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x504>
    ae40:	e58da000 	str	sl, [sp]
    ae44:	e1a02009 	mov	r2, r9
    ae48:	e59f3284 	ldr	r3, [pc, #644]	; b0d4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x508>
    ae4c:	eb00496d 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ae50:	e3a01000 	mov	r1, #0
    ae54:	eaffff88 	b	ac7c <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0xb0>
    ae58:	e1a00004 	mov	r0, r4
    ae5c:	eb00088a 	bl	d08c <CDWHCITransferStageData::GetFrameScheduler() const>
    ae60:	e5903000 	ldr	r3, [r0]
    ae64:	e1a01009 	mov	r1, r9
    ae68:	e5933010 	ldr	r3, [r3, #16]
    ae6c:	e12fff33 	blx	r3
    ae70:	e1a00004 	mov	r0, r4
    ae74:	eb000884 	bl	d08c <CDWHCITransferStageData::GetFrameScheduler() const>
    ae78:	e5903000 	ldr	r3, [r0]
    ae7c:	e593300c 	ldr	r3, [r3, #12]
    ae80:	e12fff33 	blx	r3
    ae84:	e3500000 	cmp	r0, #0
    ae88:	1a00005f 	bne	b00c <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x440>
    ae8c:	e1a00004 	mov	r0, r4
    ae90:	eb000854 	bl	cfe8 <CDWHCITransferStageData::IsStageComplete() const>
    ae94:	e2509000 	subs	r9, r0, #0
    ae98:	1a000033 	bne	af6c <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x3a0>
    ae9c:	e1a00004 	mov	r0, r4
    aea0:	eb000686 	bl	c8c0 <CDWHCITransferStageData::BeginSplitCycle()>
    aea4:	e2501000 	subs	r1, r0, #0
    aea8:	0affff73 	beq	ac7c <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0xb0>
    aeac:	e1a00004 	mov	r0, r4
    aeb0:	eb000686 	bl	c8d0 <CDWHCITransferStageData::IsPeriodic() const>
    aeb4:	e250a000 	subs	sl, r0, #0
    aeb8:	0a000048 	beq	afe0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x414>
    aebc:	e1a00004 	mov	r0, r4
    aec0:	eb000851 	bl	d00c <CDWHCITransferStageData::IsTimeout() const>
    aec4:	e3500000 	cmp	r0, #0
    aec8:	0a000072 	beq	b098 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x4cc>
    aecc:	e1a01006 	mov	r1, r6
    aed0:	e1a00005 	mov	r0, r5
    aed4:	ebfffca6 	bl	a174 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    aed8:	e1a01009 	mov	r1, r9
    aedc:	e1a00008 	mov	r0, r8
    aee0:	eb000e7e 	bl	e8e0 <CUSBRequest::SetStatus(int)>
    aee4:	e3540000 	cmp	r4, #0
    aee8:	1affff6a 	bne	ac98 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0xcc>
    aeec:	eaffff6e 	b	acac <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0xe0>
    aef0:	e1a00004 	mov	r0, r4
    aef4:	eb000864 	bl	d08c <CDWHCITransferStageData::GetFrameScheduler() const>
    aef8:	e5903000 	ldr	r3, [r0]
    aefc:	e1a0100a 	mov	r1, sl
    af00:	e5933010 	ldr	r3, [r3, #16]
    af04:	e12fff33 	blx	r3
    af08:	e1a00004 	mov	r0, r4
    af0c:	e3a01002 	mov	r1, #2
    af10:	eb000662 	bl	c8a0 <CDWHCITransferStageData::SetState(unsigned int)>
    af14:	e1a01009 	mov	r1, r9
    af18:	e1a00004 	mov	r0, r4
    af1c:	eb000651 	bl	c868 <CDWHCITransferStageData::SetSplitComplete(bool)>
    af20:	eaffffd2 	b	ae70 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x2a4>
    af24:	e59f21c8 	ldr	r2, [pc, #456]	; b0f4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x528>
    af28:	e59f1194 	ldr	r1, [pc, #404]	; b0c4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x4f8>
    af2c:	e59f01c4 	ldr	r0, [pc, #452]	; b0f8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x52c>
    af30:	eb003d98 	bl	1a598 <assertion_failed>
    af34:	eaffff2c 	b	abec <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x20>
    af38:	e59f21bc 	ldr	r2, [pc, #444]	; b0fc <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x530>
    af3c:	e59f1180 	ldr	r1, [pc, #384]	; b0c4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x4f8>
    af40:	e59f01b8 	ldr	r0, [pc, #440]	; b100 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x534>
    af44:	eb003d93 	bl	1a598 <assertion_failed>
    af48:	eaffff2b 	b	abfc <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x30>
    af4c:	e1a01004 	mov	r1, r4
    af50:	e1a00005 	mov	r0, r5
    af54:	ebfffd99 	bl	a5c0 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>
    af58:	e28d0014 	add	r0, sp, #20
    af5c:	eb000509 	bl	c388 <CDWHCIRegister::~CDWHCIRegister()>
    af60:	e28d0008 	add	r0, sp, #8
    af64:	eb000507 	bl	c388 <CDWHCIRegister::~CDWHCIRegister()>
    af68:	eaffff8a 	b	ad98 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x1cc>
    af6c:	e1a01006 	mov	r1, r6
    af70:	e1a00005 	mov	r0, r5
    af74:	ebfffc7e 	bl	a174 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    af78:	e1a00004 	mov	r0, r4
    af7c:	eb00079a 	bl	cdec <CDWHCITransferStageData::IsStatusStage() const>
    af80:	e3500000 	cmp	r0, #0
    af84:	0a000005 	beq	afa0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x3d4>
    af88:	e3a01001 	mov	r1, #1
    af8c:	e1a00008 	mov	r0, r8
    af90:	eb000e52 	bl	e8e0 <CUSBRequest::SetStatus(int)>
    af94:	e3540000 	cmp	r4, #0
    af98:	1affff3e 	bne	ac98 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0xcc>
    af9c:	eaffff42 	b	acac <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0xe0>
    afa0:	e1a00004 	mov	r0, r4
    afa4:	eb000813 	bl	cff8 <CDWHCITransferStageData::GetResultLen() const>
    afa8:	e1a01000 	mov	r1, r0
    afac:	e1a00008 	mov	r0, r8
    afb0:	eb000e4c 	bl	e8e8 <CUSBRequest::SetResultLen(unsigned int)>
    afb4:	eafffff3 	b	af88 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x3bc>
    afb8:	eb004769 	bl	1cd64 <CLogger::Get()>
    afbc:	e58da000 	str	sl, [sp]
    afc0:	e59f310c 	ldr	r3, [pc, #268]	; b0d4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x508>
    afc4:	e3a02001 	mov	r2, #1
    afc8:	e59f1100 	ldr	r1, [pc, #256]	; b0d0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x504>
    afcc:	eb00490d 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    afd0:	e3a01000 	mov	r1, #0
    afd4:	e1a00008 	mov	r0, r8
    afd8:	eb000e40 	bl	e8e0 <CUSBRequest::SetStatus(int)>
    afdc:	eaffff28 	b	ac84 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0xb8>
    afe0:	e3a01001 	mov	r1, #1
    afe4:	e1a00004 	mov	r0, r4
    afe8:	eb00062c 	bl	c8a0 <CDWHCITransferStageData::SetState(unsigned int)>
    afec:	e1a0100a 	mov	r1, sl
    aff0:	e1a00004 	mov	r0, r4
    aff4:	eb00061b 	bl	c868 <CDWHCITransferStageData::SetSplitComplete(bool)>
    aff8:	e1a00004 	mov	r0, r4
    affc:	eb000822 	bl	d08c <CDWHCITransferStageData::GetFrameScheduler() const>
    b000:	e5903000 	ldr	r3, [r0]
    b004:	e5933008 	ldr	r3, [r3, #8]
    b008:	e12fff33 	blx	r3
    b00c:	e1a01004 	mov	r1, r4
    b010:	e1a00005 	mov	r0, r5
    b014:	ebfffd69 	bl	a5c0 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>
    b018:	eaffff5e 	b	ad98 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x1cc>
    b01c:	e1a00004 	mov	r0, r4
    b020:	eb00062a 	bl	c8d0 <CDWHCITransferStageData::IsPeriodic() const>
    b024:	e3500000 	cmp	r0, #0
    b028:	0affff75 	beq	ae04 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x238>
    b02c:	e1a00004 	mov	r0, r4
    b030:	eb0007f5 	bl	d00c <CDWHCITransferStageData::IsTimeout() const>
    b034:	e3500000 	cmp	r0, #0
    b038:	1affffe4 	bne	afd0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x404>
    b03c:	e3a01003 	mov	r1, #3
    b040:	e1a00004 	mov	r0, r4
    b044:	eb000615 	bl	c8a0 <CDWHCITransferStageData::SetState(unsigned int)>
    b048:	e1a00008 	mov	r0, r8
    b04c:	eb000e13 	bl	e8a0 <CUSBRequest::GetEndpoint() const>
    b050:	eb000d04 	bl	e468 <CUSBEndpoint::GetInterval() const>
    b054:	e3a01064 	mov	r1, #100	; 0x64
    b058:	e0010091 	mul	r1, r1, r0
    b05c:	e59f30a0 	ldr	r3, [pc, #160]	; b104 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x538>
    b060:	e0813391 	umull	r3, r1, r1, r3
    b064:	e5950008 	ldr	r0, [r5, #8]
    b068:	e1a03004 	mov	r3, r4
    b06c:	e58d5000 	str	r5, [sp]
    b070:	e1a01321 	lsr	r1, r1, #6
    b074:	e59f208c 	ldr	r2, [pc, #140]	; b108 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x53c>
    b078:	eb0057cb 	bl	20fac <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
    b07c:	eaffff45 	b	ad98 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x1cc>
    b080:	e1a00004 	mov	r0, r4
    b084:	eb0007db 	bl	cff8 <CDWHCITransferStageData::GetResultLen() const>
    b088:	e1a01000 	mov	r1, r0
    b08c:	e1a00008 	mov	r0, r8
    b090:	eb000e14 	bl	e8e8 <CUSBRequest::SetResultLen(unsigned int)>
    b094:	eaffff5e 	b	ae14 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x248>
    b098:	e3a01003 	mov	r1, #3
    b09c:	e1a00004 	mov	r0, r4
    b0a0:	eb0005fe 	bl	c8a0 <CDWHCITransferStageData::SetState(unsigned int)>
    b0a4:	e1a00008 	mov	r0, r8
    b0a8:	eb000dfc 	bl	e8a0 <CUSBRequest::GetEndpoint() const>
    b0ac:	eb000ced 	bl	e468 <CUSBEndpoint::GetInterval() const>
    b0b0:	e3a03064 	mov	r3, #100	; 0x64
    b0b4:	e59f1048 	ldr	r1, [pc, #72]	; b104 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x538>
    b0b8:	e0030093 	mul	r3, r3, r0
    b0bc:	eaffffe7 	b	b060 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x494>
    b0c0:	000003a1 	.word	0x000003a1
    b0c4:	00024090 	.word	0x00024090
    b0c8:	00024970 	.word	0x00024970
    b0cc:	0000078c 	.word	0x0000078c
    b0d0:	00024084 	.word	0x00024084
    b0d4:	000242b8 	.word	0x000242b8
    b0d8:	20980510 	.word	0x20980510
    b0dc:	20980508 	.word	0x20980508
    b0e0:	000003ff 	.word	0x000003ff
    b0e4:	00000482 	.word	0x00000482
    b0e8:	00000399 	.word	0x00000399
    b0ec:	00024240 	.word	0x00024240
    b0f0:	000007dc 	.word	0x000007dc
    b0f4:	00000377 	.word	0x00000377
    b0f8:	00024100 	.word	0x00024100
    b0fc:	00000379 	.word	0x00000379
    b100:	0002418c 	.word	0x0002418c
    b104:	10624dd3 	.word	0x10624dd3
    b108:	0000a7a0 	.word	0x0000a7a0

0000b10c <CDWHCIDevice::InterruptHandler()>:
    b10c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b110:	e1a07000 	mov	r7, r0
    b114:	e24dd028 	sub	sp, sp, #40	; 0x28
    b118:	e3a04000 	mov	r4, #0
    b11c:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
    b120:	e59f10d8 	ldr	r1, [pc, #216]	; b200 <CDWHCIDevice::InterruptHandler()+0xf4>
    b124:	e28d0004 	add	r0, sp, #4
    b128:	eb00048e 	bl	c368 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b12c:	e28d0004 	add	r0, sp, #4
    b130:	eb000495 	bl	c38c <CDWHCIRegister::Read()>
    b134:	e28d0004 	add	r0, sp, #4
    b138:	eb0004a9 	bl	c3e4 <CDWHCIRegister::Get() const>
    b13c:	e3100402 	tst	r0, #33554432	; 0x2000000
    b140:	1a000007 	bne	b164 <CDWHCIDevice::InterruptHandler()+0x58>
    b144:	e28d0004 	add	r0, sp, #4
    b148:	eb000496 	bl	c3a8 <CDWHCIRegister::Write()>
    b14c:	e3a03000 	mov	r3, #0
    b150:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    b154:	e28d0004 	add	r0, sp, #4
    b158:	eb00048a 	bl	c388 <CDWHCIRegister::~CDWHCIRegister()>
    b15c:	e28dd028 	add	sp, sp, #40	; 0x28
    b160:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    b164:	e59f1098 	ldr	r1, [pc, #152]	; b204 <CDWHCIDevice::InterruptHandler()+0xf8>
    b168:	e28d0010 	add	r0, sp, #16
    b16c:	eb00047d 	bl	c368 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b170:	e28d0010 	add	r0, sp, #16
    b174:	eb000484 	bl	c38c <CDWHCIRegister::Read()>
    b178:	e28d0010 	add	r0, sp, #16
    b17c:	eb000489 	bl	c3a8 <CDWHCIRegister::Write()>
    b180:	e597300c 	ldr	r3, [r7, #12]
    b184:	e1530004 	cmp	r3, r4
    b188:	0a000019 	beq	b1f4 <CDWHCIDevice::InterruptHandler()+0xe8>
    b18c:	e3a05001 	mov	r5, #1
    b190:	e1a08004 	mov	r8, r4
    b194:	e59f606c 	ldr	r6, [pc, #108]	; b208 <CDWHCIDevice::InterruptHandler()+0xfc>
    b198:	ea000005 	b	b1b4 <CDWHCIDevice::InterruptHandler()+0xa8>
    b19c:	e597300c 	ldr	r3, [r7, #12]
    b1a0:	e2844001 	add	r4, r4, #1
    b1a4:	e1530004 	cmp	r3, r4
    b1a8:	e1a05085 	lsl	r5, r5, #1
    b1ac:	e2866020 	add	r6, r6, #32
    b1b0:	9a00000f 	bls	b1f4 <CDWHCIDevice::InterruptHandler()+0xe8>
    b1b4:	e28d0010 	add	r0, sp, #16
    b1b8:	eb000489 	bl	c3e4 <CDWHCIRegister::Get() const>
    b1bc:	e1100005 	tst	r0, r5
    b1c0:	0afffff5 	beq	b19c <CDWHCIDevice::InterruptHandler()+0x90>
    b1c4:	e1a02008 	mov	r2, r8
    b1c8:	e1a01006 	mov	r1, r6
    b1cc:	e28d001c 	add	r0, sp, #28
    b1d0:	eb000468 	bl	c378 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    b1d4:	e28d001c 	add	r0, sp, #28
    b1d8:	eb000472 	bl	c3a8 <CDWHCIRegister::Write()>
    b1dc:	e1a00007 	mov	r0, r7
    b1e0:	e1a01004 	mov	r1, r4
    b1e4:	ebfffe78 	bl	abcc <CDWHCIDevice::ChannelInterruptHandler(unsigned int)>
    b1e8:	e28d001c 	add	r0, sp, #28
    b1ec:	eb000465 	bl	c388 <CDWHCIRegister::~CDWHCIRegister()>
    b1f0:	eaffffe9 	b	b19c <CDWHCIDevice::InterruptHandler()+0x90>
    b1f4:	e28d0010 	add	r0, sp, #16
    b1f8:	eb000462 	bl	c388 <CDWHCIRegister::~CDWHCIRegister()>
    b1fc:	eaffffd0 	b	b144 <CDWHCIDevice::InterruptHandler()+0x38>
    b200:	20980014 	.word	0x20980014
    b204:	20980414 	.word	0x20980414
    b208:	2098050c 	.word	0x2098050c

0000b20c <CDWHCIDevice::InterruptStub(void*)>:
    b20c:	e92d4010 	push	{r4, lr}
    b210:	e2504000 	subs	r4, r0, #0
    b214:	0a000002 	beq	b224 <CDWHCIDevice::InterruptStub(void*)+0x18>
    b218:	e1a00004 	mov	r0, r4
    b21c:	e8bd4010 	pop	{r4, lr}
    b220:	eaffffb9 	b	b10c <CDWHCIDevice::InterruptHandler()>
    b224:	e59f0014 	ldr	r0, [pc, #20]	; b240 <CDWHCIDevice::InterruptStub(void*)+0x34>
    b228:	e59f2014 	ldr	r2, [pc, #20]	; b244 <CDWHCIDevice::InterruptStub(void*)+0x38>
    b22c:	e59f1014 	ldr	r1, [pc, #20]	; b248 <CDWHCIDevice::InterruptStub(void*)+0x3c>
    b230:	eb003cd8 	bl	1a598 <assertion_failed>
    b234:	e1a00004 	mov	r0, r4
    b238:	e8bd4010 	pop	{r4, lr}
    b23c:	eaffffb2 	b	b10c <CDWHCIDevice::InterruptHandler()>
    b240:	000240a0 	.word	0x000240a0
    b244:	000004e3 	.word	0x000004e3
    b248:	00024090 	.word	0x00024090

0000b24c <CDWHCIDevice::AllocateWaitBlock()>:
    b24c:	e92d4070 	push	{r4, r5, r6, lr}
    b250:	e1a05000 	mov	r5, r0
    b254:	e5900070 	ldr	r0, [r0, #112]	; 0x70
    b258:	e3500000 	cmp	r0, #0
    b25c:	1a000014 	bne	b2b4 <CDWHCIDevice::AllocateWaitBlock()+0x68>
    b260:	e3a04000 	mov	r4, #0
    b264:	e3a03001 	mov	r3, #1
    b268:	e595206c 	ldr	r2, [r5, #108]	; 0x6c
    b26c:	e1120003 	tst	r2, r3
    b270:	0a000007 	beq	b294 <CDWHCIDevice::AllocateWaitBlock()+0x48>
    b274:	e2844001 	add	r4, r4, #1
    b278:	e3540010 	cmp	r4, #16
    b27c:	e1a03083 	lsl	r3, r3, #1
    b280:	1afffff8 	bne	b268 <CDWHCIDevice::AllocateWaitBlock()+0x1c>
    b284:	e3500000 	cmp	r0, #0
    b288:	1a000006 	bne	b2a8 <CDWHCIDevice::AllocateWaitBlock()+0x5c>
    b28c:	e1a00004 	mov	r0, r4
    b290:	e8bd8070 	pop	{r4, r5, r6, pc}
    b294:	e595206c 	ldr	r2, [r5, #108]	; 0x6c
    b298:	e3500000 	cmp	r0, #0
    b29c:	e1823003 	orr	r3, r2, r3
    b2a0:	e585306c 	str	r3, [r5, #108]	; 0x6c
    b2a4:	0afffff8 	beq	b28c <CDWHCIDevice::AllocateWaitBlock()+0x40>
    b2a8:	eb005d5e 	bl	22828 <LeaveCritical>
    b2ac:	e1a00004 	mov	r0, r4
    b2b0:	e8bd8070 	pop	{r4, r5, r6, pc}
    b2b4:	eb005d2e 	bl	22774 <EnterCritical>
    b2b8:	e5950070 	ldr	r0, [r5, #112]	; 0x70
    b2bc:	eaffffe7 	b	b260 <CDWHCIDevice::AllocateWaitBlock()+0x14>

0000b2c0 <CDWHCIDevice::FreeWaitBlock(unsigned int)>:
    b2c0:	e351000f 	cmp	r1, #15
    b2c4:	e92d4070 	push	{r4, r5, r6, lr}
    b2c8:	e1a06001 	mov	r6, r1
    b2cc:	e1a04000 	mov	r4, r0
    b2d0:	8a000016 	bhi	b330 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x70>
    b2d4:	e3a05001 	mov	r5, #1
    b2d8:	e5940070 	ldr	r0, [r4, #112]	; 0x70
    b2dc:	e1a05615 	lsl	r5, r5, r6
    b2e0:	e3500000 	cmp	r0, #0
    b2e4:	1a00000f 	bne	b328 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x68>
    b2e8:	e594306c 	ldr	r3, [r4, #108]	; 0x6c
    b2ec:	e1150003 	tst	r5, r3
    b2f0:	0a000007 	beq	b314 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x54>
    b2f4:	e594306c 	ldr	r3, [r4, #108]	; 0x6c
    b2f8:	e5942070 	ldr	r2, [r4, #112]	; 0x70
    b2fc:	e1c35005 	bic	r5, r3, r5
    b300:	e3520000 	cmp	r2, #0
    b304:	e584506c 	str	r5, [r4, #108]	; 0x6c
    b308:	08bd8070 	popeq	{r4, r5, r6, pc}
    b30c:	e8bd4070 	pop	{r4, r5, r6, lr}
    b310:	ea005d44 	b	22828 <LeaveCritical>
    b314:	e59f2028 	ldr	r2, [pc, #40]	; b344 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x84>
    b318:	e59f1028 	ldr	r1, [pc, #40]	; b348 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x88>
    b31c:	e59f0028 	ldr	r0, [pc, #40]	; b34c <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x8c>
    b320:	eb003c9c 	bl	1a598 <assertion_failed>
    b324:	eafffff2 	b	b2f4 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x34>
    b328:	eb005d11 	bl	22774 <EnterCritical>
    b32c:	eaffffed 	b	b2e8 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x28>
    b330:	e59f2018 	ldr	r2, [pc, #24]	; b350 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x90>
    b334:	e59f100c 	ldr	r1, [pc, #12]	; b348 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x88>
    b338:	e59f0014 	ldr	r0, [pc, #20]	; b354 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x94>
    b33c:	eb003c95 	bl	1a598 <assertion_failed>
    b340:	eaffffe3 	b	b2d4 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x14>
    b344:	00000553 	.word	0x00000553
    b348:	00024090 	.word	0x00024090
    b34c:	000242dc 	.word	0x000242dc
    b350:	0000054e 	.word	0x0000054e
    b354:	000240ac 	.word	0x000240ac

0000b358 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>:
    b358:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    b35c:	e24dd00c 	sub	sp, sp, #12
    b360:	e1a08002 	mov	r8, r2
    b364:	e1a07001 	mov	r7, r1
    b368:	e1a09003 	mov	r9, r3
    b36c:	e1a06000 	mov	r6, r0
    b370:	ebffffb5 	bl	b24c <CDWHCIDevice::AllocateWaitBlock()>
    b374:	e350000f 	cmp	r0, #15
    b378:	83a08000 	movhi	r8, #0
    b37c:	8a000020 	bhi	b404 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0xac>
    b380:	e3570000 	cmp	r7, #0
    b384:	e1a05000 	mov	r5, r0
    b388:	0a00002c 	beq	b440 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0xe8>
    b38c:	e1a03006 	mov	r3, r6
    b390:	e1a02005 	mov	r2, r5
    b394:	e59f10b8 	ldr	r1, [pc, #184]	; b454 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0xfc>
    b398:	e1a00007 	mov	r0, r7
    b39c:	e0864005 	add	r4, r6, r5
    b3a0:	eb000d8d 	bl	e9dc <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
    b3a4:	e5d4305c 	ldrb	r3, [r4, #92]	; 0x5c
    b3a8:	e3530000 	cmp	r3, #0
    b3ac:	1a000017 	bne	b410 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0xb8>
    b3b0:	e3a01001 	mov	r1, #1
    b3b4:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
    b3b8:	e1a02008 	mov	r2, r8
    b3bc:	e58d3000 	str	r3, [sp]
    b3c0:	e1a00006 	mov	r0, r6
    b3c4:	e5c4105c 	strb	r1, [r4, #92]	; 0x5c
    b3c8:	e1a03009 	mov	r3, r9
    b3cc:	e1a01007 	mov	r1, r7
    b3d0:	ebfffd6b 	bl	a984 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)>
    b3d4:	e2508000 	subs	r8, r0, #0
    b3d8:	0a000011 	beq	b424 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0xcc>
    b3dc:	e5d4305c 	ldrb	r3, [r4, #92]	; 0x5c
    b3e0:	e3530000 	cmp	r3, #0
    b3e4:	1afffffc 	bne	b3dc <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x84>
    b3e8:	e1a01005 	mov	r1, r5
    b3ec:	e1a00006 	mov	r0, r6
    b3f0:	ebffffb2 	bl	b2c0 <CDWHCIDevice::FreeWaitBlock(unsigned int)>
    b3f4:	e1a00007 	mov	r0, r7
    b3f8:	eb000d3c 	bl	e8f0 <CUSBRequest::GetStatus() const>
    b3fc:	e2908000 	adds	r8, r0, #0
    b400:	13a08001 	movne	r8, #1
    b404:	e1a00008 	mov	r0, r8
    b408:	e28dd00c 	add	sp, sp, #12
    b40c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    b410:	e59f2040 	ldr	r2, [pc, #64]	; b458 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x100>
    b414:	e59f1040 	ldr	r1, [pc, #64]	; b45c <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x104>
    b418:	e59f0040 	ldr	r0, [pc, #64]	; b460 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x108>
    b41c:	eb003c5d 	bl	1a598 <assertion_failed>
    b420:	eaffffe2 	b	b3b0 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x58>
    b424:	e1a00006 	mov	r0, r6
    b428:	e5c4805c 	strb	r8, [r4, #92]	; 0x5c
    b42c:	e1a01005 	mov	r1, r5
    b430:	ebffffa2 	bl	b2c0 <CDWHCIDevice::FreeWaitBlock(unsigned int)>
    b434:	e1a00008 	mov	r0, r8
    b438:	e28dd00c 	add	sp, sp, #12
    b43c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    b440:	e59f201c 	ldr	r2, [pc, #28]	; b464 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x10c>
    b444:	e59f1010 	ldr	r1, [pc, #16]	; b45c <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x104>
    b448:	e59f0018 	ldr	r0, [pc, #24]	; b468 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x110>
    b44c:	eb003c51 	bl	1a598 <assertion_failed>
    b450:	eaffffcd 	b	b38c <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x34>
    b454:	00009ce0 	.word	0x00009ce0
    b458:	0000024e 	.word	0x0000024e
    b45c:	00024090 	.word	0x00024090
    b460:	00024304 	.word	0x00024304
    b464:	0000024b 	.word	0x0000024b
    b468:	0002418c 	.word	0x0002418c

0000b46c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)>:
    b46c:	e92d4070 	push	{r4, r5, r6, lr}
    b470:	e3a03000 	mov	r3, #0
    b474:	e24dd008 	sub	sp, sp, #8
    b478:	e1a05000 	mov	r5, r0
    b47c:	e1a04001 	mov	r4, r1
    b480:	e1a06002 	mov	r6, r2
    b484:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    b488:	e1510003 	cmp	r1, r3
    b48c:	0a00008e 	beq	b6cc <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x260>
    b490:	e3a01000 	mov	r1, #0
    b494:	e1a00004 	mov	r0, r4
    b498:	eb000d10 	bl	e8e0 <CUSBRequest::SetStatus(int)>
    b49c:	e1a00004 	mov	r0, r4
    b4a0:	eb000cfe 	bl	e8a0 <CUSBRequest::GetEndpoint() const>
    b4a4:	eb000be7 	bl	e448 <CUSBEndpoint::GetType() const>
    b4a8:	e3500000 	cmp	r0, #0
    b4ac:	1a000035 	bne	b588 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x11c>
    b4b0:	e3560000 	cmp	r6, #0
    b4b4:	1a000054 	bne	b60c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x1a0>
    b4b8:	e1a00004 	mov	r0, r4
    b4bc:	eb000d1a 	bl	e92c <CUSBRequest::GetSetupData()>
    b4c0:	e2506000 	subs	r6, r0, #0
    b4c4:	0a00008a 	beq	b6f4 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x288>
    b4c8:	e1d630d0 	ldrsb	r3, [r6]
    b4cc:	e1a00004 	mov	r0, r4
    b4d0:	e3530000 	cmp	r3, #0
    b4d4:	ba00005a 	blt	b644 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x1d8>
    b4d8:	eb000d3d 	bl	e9d4 <CUSBRequest::GetBufLen() const>
    b4dc:	e2506000 	subs	r6, r0, #0
    b4e0:	1a00000a 	bne	b510 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa4>
    b4e4:	e58d6000 	str	r6, [sp]
    b4e8:	e1a03006 	mov	r3, r6
    b4ec:	e1a02006 	mov	r2, r6
    b4f0:	e1a01004 	mov	r1, r4
    b4f4:	e1a00005 	mov	r0, r5
    b4f8:	ebffff96 	bl	b358 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    b4fc:	e3500000 	cmp	r0, #0
    b500:	1a000046 	bne	b620 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x1b4>
    b504:	e3a00000 	mov	r0, #0
    b508:	e28dd008 	add	sp, sp, #8
    b50c:	e8bd8070 	pop	{r4, r5, r6, pc}
    b510:	e3a06000 	mov	r6, #0
    b514:	e1a01004 	mov	r1, r4
    b518:	e58d6000 	str	r6, [sp]
    b51c:	e1a03006 	mov	r3, r6
    b520:	e1a02006 	mov	r2, r6
    b524:	e1a00005 	mov	r0, r5
    b528:	ebffff8a 	bl	b358 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    b52c:	e1500006 	cmp	r0, r6
    b530:	0afffff3 	beq	b504 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x98>
    b534:	e58d6000 	str	r6, [sp]
    b538:	e1a03006 	mov	r3, r6
    b53c:	e1a02006 	mov	r2, r6
    b540:	e1a01004 	mov	r1, r4
    b544:	e1a00005 	mov	r0, r5
    b548:	ebffff82 	bl	b358 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    b54c:	e1500006 	cmp	r0, r6
    b550:	0affffeb 	beq	b504 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x98>
    b554:	e3a03001 	mov	r3, #1
    b558:	e58d6000 	str	r6, [sp]
    b55c:	e1a01004 	mov	r1, r4
    b560:	e1a00005 	mov	r0, r5
    b564:	e1a02003 	mov	r2, r3
    b568:	ebffff7a 	bl	b358 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    b56c:	e1500006 	cmp	r0, r6
    b570:	0affffe3 	beq	b504 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x98>
    b574:	e3a03000 	mov	r3, #0
    b578:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    b57c:	e3a00001 	mov	r0, #1
    b580:	e28dd008 	add	sp, sp, #8
    b584:	e8bd8070 	pop	{r4, r5, r6, pc}
    b588:	e1a00004 	mov	r0, r4
    b58c:	eb000cc3 	bl	e8a0 <CUSBRequest::GetEndpoint() const>
    b590:	eb000bac 	bl	e448 <CUSBEndpoint::GetType() const>
    b594:	e3500001 	cmp	r0, #1
    b598:	0a000008 	beq	b5c0 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x154>
    b59c:	e1a00004 	mov	r0, r4
    b5a0:	eb000cbe 	bl	e8a0 <CUSBRequest::GetEndpoint() const>
    b5a4:	eb000ba7 	bl	e448 <CUSBEndpoint::GetType() const>
    b5a8:	e3500002 	cmp	r0, #2
    b5ac:	0a000003 	beq	b5c0 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x154>
    b5b0:	e3a020d4 	mov	r2, #212	; 0xd4
    b5b4:	e59f114c 	ldr	r1, [pc, #332]	; b708 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x29c>
    b5b8:	e59f014c 	ldr	r0, [pc, #332]	; b70c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x2a0>
    b5bc:	eb003bf5 	bl	1a598 <assertion_failed>
    b5c0:	e1a00004 	mov	r0, r4
    b5c4:	eb000d02 	bl	e9d4 <CUSBRequest::GetBufLen() const>
    b5c8:	e3500000 	cmp	r0, #0
    b5cc:	0a000039 	beq	b6b8 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x24c>
    b5d0:	e1a00004 	mov	r0, r4
    b5d4:	eb000cb1 	bl	e8a0 <CUSBRequest::GetEndpoint() const>
    b5d8:	eb000b9c 	bl	e450 <CUSBEndpoint::IsDirectionIn() const>
    b5dc:	e58d6000 	str	r6, [sp]
    b5e0:	e1a02000 	mov	r2, r0
    b5e4:	e1a01004 	mov	r1, r4
    b5e8:	e1a00005 	mov	r0, r5
    b5ec:	e3a03000 	mov	r3, #0
    b5f0:	ebffff58 	bl	b358 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    b5f4:	e3500000 	cmp	r0, #0
    b5f8:	0affffc1 	beq	b504 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x98>
    b5fc:	e3a03000 	mov	r3, #0
    b600:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    b604:	e3a00001 	mov	r0, #1
    b608:	eaffffdc 	b	b580 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x114>
    b60c:	e3a020ac 	mov	r2, #172	; 0xac
    b610:	e59f10f0 	ldr	r1, [pc, #240]	; b708 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x29c>
    b614:	e59f00f4 	ldr	r0, [pc, #244]	; b710 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x2a4>
    b618:	eb003bde 	bl	1a598 <assertion_failed>
    b61c:	eaffffa5 	b	b4b8 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x4c>
    b620:	e3a03001 	mov	r3, #1
    b624:	e58d6000 	str	r6, [sp]
    b628:	e1a01004 	mov	r1, r4
    b62c:	e1a00005 	mov	r0, r5
    b630:	e1a02003 	mov	r2, r3
    b634:	ebffff47 	bl	b358 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    b638:	e3500000 	cmp	r0, #0
    b63c:	1affffcc 	bne	b574 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x108>
    b640:	eaffffaf 	b	b504 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x98>
    b644:	eb000ce2 	bl	e9d4 <CUSBRequest::GetBufLen() const>
    b648:	e3500000 	cmp	r0, #0
    b64c:	0a000023 	beq	b6e0 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x274>
    b650:	e3a06000 	mov	r6, #0
    b654:	e1a01004 	mov	r1, r4
    b658:	e58d6000 	str	r6, [sp]
    b65c:	e1a03006 	mov	r3, r6
    b660:	e1a02006 	mov	r2, r6
    b664:	e1a00005 	mov	r0, r5
    b668:	ebffff3a 	bl	b358 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    b66c:	e1500006 	cmp	r0, r6
    b670:	0affffa3 	beq	b504 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x98>
    b674:	e58d6000 	str	r6, [sp]
    b678:	e1a03006 	mov	r3, r6
    b67c:	e3a02001 	mov	r2, #1
    b680:	e1a01004 	mov	r1, r4
    b684:	e1a00005 	mov	r0, r5
    b688:	ebffff32 	bl	b358 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    b68c:	e3500000 	cmp	r0, #0
    b690:	0affff9b 	beq	b504 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x98>
    b694:	e58d6000 	str	r6, [sp]
    b698:	e1a02006 	mov	r2, r6
    b69c:	e1a01004 	mov	r1, r4
    b6a0:	e1a00005 	mov	r0, r5
    b6a4:	e3a03001 	mov	r3, #1
    b6a8:	ebffff2a 	bl	b358 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    b6ac:	e3500000 	cmp	r0, #0
    b6b0:	0affff93 	beq	b504 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x98>
    b6b4:	eaffffae 	b	b574 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x108>
    b6b8:	e3a020d5 	mov	r2, #213	; 0xd5
    b6bc:	e59f1044 	ldr	r1, [pc, #68]	; b708 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x29c>
    b6c0:	e59f004c 	ldr	r0, [pc, #76]	; b714 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x2a8>
    b6c4:	eb003bb3 	bl	1a598 <assertion_failed>
    b6c8:	eaffffc0 	b	b5d0 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x164>
    b6cc:	e3a020a6 	mov	r2, #166	; 0xa6
    b6d0:	e59f1030 	ldr	r1, [pc, #48]	; b708 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x29c>
    b6d4:	e59f003c 	ldr	r0, [pc, #60]	; b718 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x2ac>
    b6d8:	eb003bae 	bl	1a598 <assertion_failed>
    b6dc:	eaffff6b 	b	b490 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x24>
    b6e0:	e3a020b3 	mov	r2, #179	; 0xb3
    b6e4:	e59f101c 	ldr	r1, [pc, #28]	; b708 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x29c>
    b6e8:	e59f0024 	ldr	r0, [pc, #36]	; b714 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x2a8>
    b6ec:	eb003ba9 	bl	1a598 <assertion_failed>
    b6f0:	eaffffd6 	b	b650 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x1e4>
    b6f4:	e3a020af 	mov	r2, #175	; 0xaf
    b6f8:	e59f1008 	ldr	r1, [pc, #8]	; b708 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x29c>
    b6fc:	e59f0018 	ldr	r0, [pc, #24]	; b71c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x2b0>
    b700:	eb003ba4 	bl	1a598 <assertion_failed>
    b704:	eaffff6f 	b	b4c8 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x5c>
    b708:	00024090 	.word	0x00024090
    b70c:	000241b4 	.word	0x000241b4
    b710:	0002431c 	.word	0x0002431c
    b714:	00024228 	.word	0x00024228
    b718:	0002418c 	.word	0x0002418c
    b71c:	0002433c 	.word	0x0002433c

0000b720 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>:
    b720:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b724:	e2516000 	subs	r6, r1, #0
    b728:	e1a08000 	mov	r8, r0
    b72c:	e1a05002 	mov	r5, r2
    b730:	e1a09003 	mov	r9, r3
    b734:	e59d4028 	ldr	r4, [sp, #40]	; 0x28
    b738:	0a00002b 	beq	b7ec <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xcc>
    b73c:	e3550000 	cmp	r5, #0
    b740:	0a000024 	beq	b7d8 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xb8>
    b744:	e3540000 	cmp	r4, #0
    b748:	0a00001d 	beq	b7c4 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xa4>
    b74c:	e3a07001 	mov	r7, #1
    b750:	e59fb0a8 	ldr	fp, [pc, #168]	; b800 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xe0>
    b754:	e029a007 	eor	sl, r9, r7
    b758:	ea000003 	b	b76c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x4c>
    b75c:	e1a00007 	mov	r0, r7
    b760:	eb0057a7 	bl	21604 <CTimer::SimpleMsDelay(unsigned int)>
    b764:	e2544001 	subs	r4, r4, #1
    b768:	0a000011 	beq	b7b4 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x94>
    b76c:	e1a00006 	mov	r0, r6
    b770:	eb000305 	bl	c38c <CDWHCIRegister::Read()>
    b774:	e1150000 	tst	r5, r0
    b778:	11a0300a 	movne	r3, sl
    b77c:	01a03009 	moveq	r3, r9
    b780:	e3530000 	cmp	r3, #0
    b784:	0a00000c 	beq	b7bc <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x9c>
    b788:	e5983008 	ldr	r3, [r8, #8]
    b78c:	e3530000 	cmp	r3, #0
    b790:	1afffff1 	bne	b75c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x3c>
    b794:	e1a0200b 	mov	r2, fp
    b798:	e59f1064 	ldr	r1, [pc, #100]	; b804 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xe4>
    b79c:	e59f0064 	ldr	r0, [pc, #100]	; b808 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xe8>
    b7a0:	eb003b7c 	bl	1a598 <assertion_failed>
    b7a4:	e1a00007 	mov	r0, r7
    b7a8:	eb005795 	bl	21604 <CTimer::SimpleMsDelay(unsigned int)>
    b7ac:	e2544001 	subs	r4, r4, #1
    b7b0:	1affffed 	bne	b76c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x4c>
    b7b4:	e1a00004 	mov	r0, r4
    b7b8:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b7bc:	e3a00001 	mov	r0, #1
    b7c0:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b7c4:	e3a02e56 	mov	r2, #1376	; 0x560
    b7c8:	e59f1034 	ldr	r1, [pc, #52]	; b804 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xe4>
    b7cc:	e59f0038 	ldr	r0, [pc, #56]	; b80c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xec>
    b7d0:	eb003b70 	bl	1a598 <assertion_failed>
    b7d4:	eaffffdc 	b	b74c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x2c>
    b7d8:	e59f2030 	ldr	r2, [pc, #48]	; b810 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xf0>
    b7dc:	e59f1020 	ldr	r1, [pc, #32]	; b804 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xe4>
    b7e0:	e59f002c 	ldr	r0, [pc, #44]	; b814 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xf4>
    b7e4:	eb003b6b 	bl	1a598 <assertion_failed>
    b7e8:	eaffffd5 	b	b744 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x24>
    b7ec:	e59f2024 	ldr	r2, [pc, #36]	; b818 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xf8>
    b7f0:	e59f100c 	ldr	r1, [pc, #12]	; b804 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xe4>
    b7f4:	e59f0020 	ldr	r0, [pc, #32]	; b81c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xfc>
    b7f8:	eb003b66 	bl	1a598 <assertion_failed>
    b7fc:	eaffffce 	b	b73c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x1c>
    b800:	00000564 	.word	0x00000564
    b804:	00024090 	.word	0x00024090
    b808:	000240f0 	.word	0x000240f0
    b80c:	00024364 	.word	0x00024364
    b810:	0000055f 	.word	0x0000055f
    b814:	00024358 	.word	0x00024358
    b818:	0000055e 	.word	0x0000055e
    b81c:	00024348 	.word	0x00024348

0000b820 <CDWHCIDevice::EnableRootPort()>:
    b820:	e92d4030 	push	{r4, r5, lr}
    b824:	e24dd01c 	sub	sp, sp, #28
    b828:	e1a05000 	mov	r5, r0
    b82c:	e59f10a4 	ldr	r1, [pc, #164]	; b8d8 <CDWHCIDevice::EnableRootPort()+0xb8>
    b830:	e28d000c 	add	r0, sp, #12
    b834:	eb0002cb 	bl	c368 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b838:	e3a04014 	mov	r4, #20
    b83c:	e3a03001 	mov	r3, #1
    b840:	e1a00005 	mov	r0, r5
    b844:	e28d100c 	add	r1, sp, #12
    b848:	e58d4000 	str	r4, [sp]
    b84c:	e1a02003 	mov	r2, r3
    b850:	ebffffb2 	bl	b720 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>
    b854:	e2505000 	subs	r5, r0, #0
    b858:	0a000019 	beq	b8c4 <CDWHCIDevice::EnableRootPort()+0xa4>
    b85c:	e3a00064 	mov	r0, #100	; 0x64
    b860:	eb005767 	bl	21604 <CTimer::SimpleMsDelay(unsigned int)>
    b864:	e28d000c 	add	r0, sp, #12
    b868:	eb0002c7 	bl	c38c <CDWHCIRegister::Read()>
    b86c:	e3e0102e 	mvn	r1, #46	; 0x2e
    b870:	e28d000c 	add	r0, sp, #12
    b874:	eb0002fc 	bl	c46c <CDWHCIRegister::And(unsigned int)>
    b878:	e3a01c01 	mov	r1, #256	; 0x100
    b87c:	e28d000c 	add	r0, sp, #12
    b880:	eb000309 	bl	c4ac <CDWHCIRegister::Or(unsigned int)>
    b884:	e28d000c 	add	r0, sp, #12
    b888:	eb0002c6 	bl	c3a8 <CDWHCIRegister::Write()>
    b88c:	e3a00032 	mov	r0, #50	; 0x32
    b890:	eb00575b 	bl	21604 <CTimer::SimpleMsDelay(unsigned int)>
    b894:	e28d000c 	add	r0, sp, #12
    b898:	eb0002bb 	bl	c38c <CDWHCIRegister::Read()>
    b89c:	e3e0102e 	mvn	r1, #46	; 0x2e
    b8a0:	e28d000c 	add	r0, sp, #12
    b8a4:	eb0002f0 	bl	c46c <CDWHCIRegister::And(unsigned int)>
    b8a8:	e3e01c01 	mvn	r1, #256	; 0x100
    b8ac:	e28d000c 	add	r0, sp, #12
    b8b0:	eb0002ed 	bl	c46c <CDWHCIRegister::And(unsigned int)>
    b8b4:	e28d000c 	add	r0, sp, #12
    b8b8:	eb0002ba 	bl	c3a8 <CDWHCIRegister::Write()>
    b8bc:	e1a00004 	mov	r0, r4
    b8c0:	eb00574f 	bl	21604 <CTimer::SimpleMsDelay(unsigned int)>
    b8c4:	e28d000c 	add	r0, sp, #12
    b8c8:	eb0002ae 	bl	c388 <CDWHCIRegister::~CDWHCIRegister()>
    b8cc:	e1a00005 	mov	r0, r5
    b8d0:	e28dd01c 	add	sp, sp, #28
    b8d4:	e8bd8030 	pop	{r4, r5, pc}
    b8d8:	20980440 	.word	0x20980440

0000b8dc <CDWHCIDevice::Reset()>:
    b8dc:	e92d4030 	push	{r4, r5, lr}
    b8e0:	e1a04000 	mov	r4, r0
    b8e4:	e3a05064 	mov	r5, #100	; 0x64
    b8e8:	e24dd01c 	sub	sp, sp, #28
    b8ec:	e3a02000 	mov	r2, #0
    b8f0:	e59f1080 	ldr	r1, [pc, #128]	; b978 <CDWHCIDevice::Reset()+0x9c>
    b8f4:	e28d000c 	add	r0, sp, #12
    b8f8:	eb00029e 	bl	c378 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    b8fc:	e28d100c 	add	r1, sp, #12
    b900:	e1a00004 	mov	r0, r4
    b904:	e58d5000 	str	r5, [sp]
    b908:	e3a03001 	mov	r3, #1
    b90c:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
    b910:	ebffff82 	bl	b720 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>
    b914:	e3500000 	cmp	r0, #0
    b918:	1a000005 	bne	b934 <CDWHCIDevice::Reset()+0x58>
    b91c:	e3a04000 	mov	r4, #0
    b920:	e28d000c 	add	r0, sp, #12
    b924:	eb000297 	bl	c388 <CDWHCIRegister::~CDWHCIRegister()>
    b928:	e1a00004 	mov	r0, r4
    b92c:	e28dd01c 	add	sp, sp, #28
    b930:	e8bd8030 	pop	{r4, r5, pc}
    b934:	e3a01001 	mov	r1, #1
    b938:	e28d000c 	add	r0, sp, #12
    b93c:	eb0002da 	bl	c4ac <CDWHCIRegister::Or(unsigned int)>
    b940:	e28d000c 	add	r0, sp, #12
    b944:	eb000297 	bl	c3a8 <CDWHCIRegister::Write()>
    b948:	e3a0300a 	mov	r3, #10
    b94c:	e1a00004 	mov	r0, r4
    b950:	e58d3000 	str	r3, [sp]
    b954:	e3a02001 	mov	r2, #1
    b958:	e3a03000 	mov	r3, #0
    b95c:	e28d100c 	add	r1, sp, #12
    b960:	ebffff6e 	bl	b720 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>
    b964:	e2504000 	subs	r4, r0, #0
    b968:	0affffeb 	beq	b91c <CDWHCIDevice::Reset()+0x40>
    b96c:	e1a00005 	mov	r0, r5
    b970:	eb005723 	bl	21604 <CTimer::SimpleMsDelay(unsigned int)>
    b974:	eaffffe9 	b	b920 <CDWHCIDevice::Reset()+0x44>
    b978:	20980010 	.word	0x20980010

0000b97c <CDWHCIDevice::InitCore()>:
    b97c:	e92d4030 	push	{r4, r5, lr}
    b980:	e1a04000 	mov	r4, r0
    b984:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    b988:	e59f1218 	ldr	r1, [pc, #536]	; bba8 <CDWHCIDevice::InitCore()+0x22c>
    b98c:	e28d0004 	add	r0, sp, #4
    b990:	eb000274 	bl	c368 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b994:	e28d0004 	add	r0, sp, #4
    b998:	eb00027b 	bl	c38c <CDWHCIRegister::Read()>
    b99c:	e28d0004 	add	r0, sp, #4
    b9a0:	e3e01601 	mvn	r1, #1048576	; 0x100000
    b9a4:	eb0002b0 	bl	c46c <CDWHCIRegister::And(unsigned int)>
    b9a8:	e3e01501 	mvn	r1, #4194304	; 0x400000
    b9ac:	e28d0004 	add	r0, sp, #4
    b9b0:	eb0002ad 	bl	c46c <CDWHCIRegister::And(unsigned int)>
    b9b4:	e28d0004 	add	r0, sp, #4
    b9b8:	eb00027a 	bl	c3a8 <CDWHCIRegister::Write()>
    b9bc:	e1a00004 	mov	r0, r4
    b9c0:	ebffffc5 	bl	b8dc <CDWHCIDevice::Reset()>
    b9c4:	e2505000 	subs	r5, r0, #0
    b9c8:	0a000059 	beq	bb34 <CDWHCIDevice::InitCore()+0x1b8>
    b9cc:	e28d0004 	add	r0, sp, #4
    b9d0:	eb00026d 	bl	c38c <CDWHCIRegister::Read()>
    b9d4:	e3e01010 	mvn	r1, #16
    b9d8:	e28d0004 	add	r0, sp, #4
    b9dc:	eb0002a2 	bl	c46c <CDWHCIRegister::And(unsigned int)>
    b9e0:	e3e01008 	mvn	r1, #8
    b9e4:	e28d0004 	add	r0, sp, #4
    b9e8:	eb00029f 	bl	c46c <CDWHCIRegister::And(unsigned int)>
    b9ec:	e28d0004 	add	r0, sp, #4
    b9f0:	eb00026c 	bl	c3a8 <CDWHCIRegister::Write()>
    b9f4:	e59f11b0 	ldr	r1, [pc, #432]	; bbac <CDWHCIDevice::InitCore()+0x230>
    b9f8:	e28d0010 	add	r0, sp, #16
    b9fc:	eb000259 	bl	c368 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    ba00:	e28d0010 	add	r0, sp, #16
    ba04:	eb000260 	bl	c38c <CDWHCIRegister::Read()>
    ba08:	e28d0010 	add	r0, sp, #16
    ba0c:	eb000274 	bl	c3e4 <CDWHCIRegister::Get() const>
    ba10:	e1a001a0 	lsr	r0, r0, #3
    ba14:	e2000003 	and	r0, r0, #3
    ba18:	e3500002 	cmp	r0, #2
    ba1c:	0a000003 	beq	ba30 <CDWHCIDevice::InitCore()+0xb4>
    ba20:	e59f2188 	ldr	r2, [pc, #392]	; bbb0 <CDWHCIDevice::InitCore()+0x234>
    ba24:	e59f1188 	ldr	r1, [pc, #392]	; bbb4 <CDWHCIDevice::InitCore()+0x238>
    ba28:	e59f0188 	ldr	r0, [pc, #392]	; bbb8 <CDWHCIDevice::InitCore()+0x23c>
    ba2c:	eb003ad9 	bl	1a598 <assertion_failed>
    ba30:	e28d0004 	add	r0, sp, #4
    ba34:	eb000254 	bl	c38c <CDWHCIRegister::Read()>
    ba38:	e28d0010 	add	r0, sp, #16
    ba3c:	eb000268 	bl	c3e4 <CDWHCIRegister::Get() const>
    ba40:	e1a00320 	lsr	r0, r0, #6
    ba44:	e2000003 	and	r0, r0, #3
    ba48:	e3500002 	cmp	r0, #2
    ba4c:	0a000048 	beq	bb74 <CDWHCIDevice::InitCore()+0x1f8>
    ba50:	e3e01802 	mvn	r1, #131072	; 0x20000
    ba54:	e28d0004 	add	r0, sp, #4
    ba58:	eb000283 	bl	c46c <CDWHCIRegister::And(unsigned int)>
    ba5c:	e3e01702 	mvn	r1, #524288	; 0x80000
    ba60:	e28d0004 	add	r0, sp, #4
    ba64:	eb000280 	bl	c46c <CDWHCIRegister::And(unsigned int)>
    ba68:	e28d0004 	add	r0, sp, #4
    ba6c:	eb00024d 	bl	c3a8 <CDWHCIRegister::Write()>
    ba70:	e594300c 	ldr	r3, [r4, #12]
    ba74:	e3530000 	cmp	r3, #0
    ba78:	1a000038 	bne	bb60 <CDWHCIDevice::InitCore()+0x1e4>
    ba7c:	e28d0010 	add	r0, sp, #16
    ba80:	eb000257 	bl	c3e4 <CDWHCIRegister::Get() const>
    ba84:	e1a00720 	lsr	r0, r0, #14
    ba88:	e200000f 	and	r0, r0, #15
    ba8c:	e2403003 	sub	r3, r0, #3
    ba90:	e353000c 	cmp	r3, #12
    ba94:	e2800001 	add	r0, r0, #1
    ba98:	e584000c 	str	r0, [r4, #12]
    ba9c:	8a00002a 	bhi	bb4c <CDWHCIDevice::InitCore()+0x1d0>
    baa0:	e59f1114 	ldr	r1, [pc, #276]	; bbbc <CDWHCIDevice::InitCore()+0x240>
    baa4:	e28d001c 	add	r0, sp, #28
    baa8:	eb00022e 	bl	c368 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    baac:	e28d001c 	add	r0, sp, #28
    bab0:	eb000235 	bl	c38c <CDWHCIRegister::Read()>
    bab4:	e28d001c 	add	r0, sp, #28
    bab8:	e3a01020 	mov	r1, #32
    babc:	eb00027a 	bl	c4ac <CDWHCIRegister::Or(unsigned int)>
    bac0:	e28d001c 	add	r0, sp, #28
    bac4:	e3a01010 	mov	r1, #16
    bac8:	eb000277 	bl	c4ac <CDWHCIRegister::Or(unsigned int)>
    bacc:	e3e01006 	mvn	r1, #6
    bad0:	e28d001c 	add	r0, sp, #28
    bad4:	eb000264 	bl	c46c <CDWHCIRegister::And(unsigned int)>
    bad8:	e28d001c 	add	r0, sp, #28
    badc:	eb000231 	bl	c3a8 <CDWHCIRegister::Write()>
    bae0:	e28d0004 	add	r0, sp, #4
    bae4:	eb000228 	bl	c38c <CDWHCIRegister::Read()>
    bae8:	e3e01c02 	mvn	r1, #512	; 0x200
    baec:	e28d0004 	add	r0, sp, #4
    baf0:	eb00025d 	bl	c46c <CDWHCIRegister::And(unsigned int)>
    baf4:	e3e01c01 	mvn	r1, #256	; 0x100
    baf8:	e28d0004 	add	r0, sp, #4
    bafc:	eb00025a 	bl	c46c <CDWHCIRegister::And(unsigned int)>
    bb00:	e28d0004 	add	r0, sp, #4
    bb04:	eb000227 	bl	c3a8 <CDWHCIRegister::Write()>
    bb08:	e1a00004 	mov	r0, r4
    bb0c:	ebfff956 	bl	a06c <CDWHCIDevice::EnableCommonInterrupts()>
    bb10:	e28d001c 	add	r0, sp, #28
    bb14:	eb00021b 	bl	c388 <CDWHCIRegister::~CDWHCIRegister()>
    bb18:	e28d0010 	add	r0, sp, #16
    bb1c:	eb000219 	bl	c388 <CDWHCIRegister::~CDWHCIRegister()>
    bb20:	e28d0004 	add	r0, sp, #4
    bb24:	eb000217 	bl	c388 <CDWHCIRegister::~CDWHCIRegister()>
    bb28:	e1a00005 	mov	r0, r5
    bb2c:	e28dd02c 	add	sp, sp, #44	; 0x2c
    bb30:	e8bd8030 	pop	{r4, r5, pc}
    bb34:	eb00448a 	bl	1cd64 <CLogger::Get()>
    bb38:	e59f3080 	ldr	r3, [pc, #128]	; bbc0 <CDWHCIDevice::InitCore()+0x244>
    bb3c:	e3a02001 	mov	r2, #1
    bb40:	e59f107c 	ldr	r1, [pc, #124]	; bbc4 <CDWHCIDevice::InitCore()+0x248>
    bb44:	eb00462f 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    bb48:	eafffff4 	b	bb20 <CDWHCIDevice::InitCore()+0x1a4>
    bb4c:	e59f2074 	ldr	r2, [pc, #116]	; bbc8 <CDWHCIDevice::InitCore()+0x24c>
    bb50:	e59f105c 	ldr	r1, [pc, #92]	; bbb4 <CDWHCIDevice::InitCore()+0x238>
    bb54:	e59f0070 	ldr	r0, [pc, #112]	; bbcc <CDWHCIDevice::InitCore()+0x250>
    bb58:	eb003a8e 	bl	1a598 <assertion_failed>
    bb5c:	eaffffcf 	b	baa0 <CDWHCIDevice::InitCore()+0x124>
    bb60:	e59f2068 	ldr	r2, [pc, #104]	; bbd0 <CDWHCIDevice::InitCore()+0x254>
    bb64:	e59f1048 	ldr	r1, [pc, #72]	; bbb4 <CDWHCIDevice::InitCore()+0x238>
    bb68:	e59f0064 	ldr	r0, [pc, #100]	; bbd4 <CDWHCIDevice::InitCore()+0x258>
    bb6c:	eb003a89 	bl	1a598 <assertion_failed>
    bb70:	eaffffc1 	b	ba7c <CDWHCIDevice::InitCore()+0x100>
    bb74:	e28d0010 	add	r0, sp, #16
    bb78:	eb000219 	bl	c3e4 <CDWHCIRegister::Get() const>
    bb7c:	e1a00420 	lsr	r0, r0, #8
    bb80:	e2000003 	and	r0, r0, #3
    bb84:	e3500001 	cmp	r0, #1
    bb88:	1affffb0 	bne	ba50 <CDWHCIDevice::InitCore()+0xd4>
    bb8c:	e28d0004 	add	r0, sp, #4
    bb90:	e3a01802 	mov	r1, #131072	; 0x20000
    bb94:	eb000244 	bl	c4ac <CDWHCIRegister::Or(unsigned int)>
    bb98:	e3a01702 	mov	r1, #524288	; 0x80000
    bb9c:	e28d0004 	add	r0, sp, #4
    bba0:	eb000241 	bl	c4ac <CDWHCIRegister::Or(unsigned int)>
    bba4:	eaffffaf 	b	ba68 <CDWHCIDevice::InitCore()+0xec>
    bba8:	2098000c 	.word	0x2098000c
    bbac:	20980048 	.word	0x20980048
    bbb0:	0000013b 	.word	0x0000013b
    bbb4:	00024090 	.word	0x00024090
    bbb8:	00024384 	.word	0x00024384
    bbbc:	20980008 	.word	0x20980008
    bbc0:	00024374 	.word	0x00024374
    bbc4:	00024084 	.word	0x00024084
    bbc8:	0000014d 	.word	0x0000014d
    bbcc:	000243d0 	.word	0x000243d0
    bbd0:	0000014b 	.word	0x0000014b
    bbd4:	000243bc 	.word	0x000243bc

0000bbd8 <CDWHCIDevice::FlushTxFIFO(unsigned int)>:
    bbd8:	e92d4030 	push	{r4, r5, lr}
    bbdc:	e1a05001 	mov	r5, r1
    bbe0:	e24dd01c 	sub	sp, sp, #28
    bbe4:	e3a02000 	mov	r2, #0
    bbe8:	e1a04000 	mov	r4, r0
    bbec:	e59f107c 	ldr	r1, [pc, #124]	; bc70 <CDWHCIDevice::FlushTxFIFO(unsigned int)+0x98>
    bbf0:	e28d000c 	add	r0, sp, #12
    bbf4:	eb0001df 	bl	c378 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    bbf8:	e28d000c 	add	r0, sp, #12
    bbfc:	e3a01020 	mov	r1, #32
    bc00:	eb000229 	bl	c4ac <CDWHCIRegister::Or(unsigned int)>
    bc04:	e28d000c 	add	r0, sp, #12
    bc08:	e3e01d1f 	mvn	r1, #1984	; 0x7c0
    bc0c:	eb000216 	bl	c46c <CDWHCIRegister::And(unsigned int)>
    bc10:	e1a01305 	lsl	r1, r5, #6
    bc14:	e28d000c 	add	r0, sp, #12
    bc18:	eb000223 	bl	c4ac <CDWHCIRegister::Or(unsigned int)>
    bc1c:	e28d000c 	add	r0, sp, #12
    bc20:	eb0001e0 	bl	c3a8 <CDWHCIRegister::Write()>
    bc24:	e3a0300a 	mov	r3, #10
    bc28:	e1a00004 	mov	r0, r4
    bc2c:	e58d3000 	str	r3, [sp]
    bc30:	e28d100c 	add	r1, sp, #12
    bc34:	e3a03000 	mov	r3, #0
    bc38:	e3a02020 	mov	r2, #32
    bc3c:	ebfffeb7 	bl	b720 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>
    bc40:	e3500000 	cmp	r0, #0
    bc44:	1a000003 	bne	bc58 <CDWHCIDevice::FlushTxFIFO(unsigned int)+0x80>
    bc48:	e28d000c 	add	r0, sp, #12
    bc4c:	eb0001cd 	bl	c388 <CDWHCIRegister::~CDWHCIRegister()>
    bc50:	e28dd01c 	add	sp, sp, #28
    bc54:	e8bd8030 	pop	{r4, r5, pc}
    bc58:	e3a00001 	mov	r0, #1
    bc5c:	eb00566f 	bl	21620 <CTimer::SimpleusDelay(unsigned int)>
    bc60:	e28d000c 	add	r0, sp, #12
    bc64:	eb0001c7 	bl	c388 <CDWHCIRegister::~CDWHCIRegister()>
    bc68:	e28dd01c 	add	sp, sp, #28
    bc6c:	e8bd8030 	pop	{r4, r5, pc}
    bc70:	20980010 	.word	0x20980010

0000bc74 <CDWHCIDevice::FlushRxFIFO()>:
    bc74:	e92d4010 	push	{r4, lr}
    bc78:	e24dd018 	sub	sp, sp, #24
    bc7c:	e3a02000 	mov	r2, #0
    bc80:	e1a04000 	mov	r4, r0
    bc84:	e59f1064 	ldr	r1, [pc, #100]	; bcf0 <CDWHCIDevice::FlushRxFIFO()+0x7c>
    bc88:	e28d000c 	add	r0, sp, #12
    bc8c:	eb0001b9 	bl	c378 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    bc90:	e3a01010 	mov	r1, #16
    bc94:	e28d000c 	add	r0, sp, #12
    bc98:	eb000203 	bl	c4ac <CDWHCIRegister::Or(unsigned int)>
    bc9c:	e28d000c 	add	r0, sp, #12
    bca0:	eb0001c0 	bl	c3a8 <CDWHCIRegister::Write()>
    bca4:	e3a0300a 	mov	r3, #10
    bca8:	e1a00004 	mov	r0, r4
    bcac:	e58d3000 	str	r3, [sp]
    bcb0:	e28d100c 	add	r1, sp, #12
    bcb4:	e3a03000 	mov	r3, #0
    bcb8:	e3a02010 	mov	r2, #16
    bcbc:	ebfffe97 	bl	b720 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>
    bcc0:	e3500000 	cmp	r0, #0
    bcc4:	1a000003 	bne	bcd8 <CDWHCIDevice::FlushRxFIFO()+0x64>
    bcc8:	e28d000c 	add	r0, sp, #12
    bccc:	eb0001ad 	bl	c388 <CDWHCIRegister::~CDWHCIRegister()>
    bcd0:	e28dd018 	add	sp, sp, #24
    bcd4:	e8bd8010 	pop	{r4, pc}
    bcd8:	e3a00001 	mov	r0, #1
    bcdc:	eb00564f 	bl	21620 <CTimer::SimpleusDelay(unsigned int)>
    bce0:	e28d000c 	add	r0, sp, #12
    bce4:	eb0001a7 	bl	c388 <CDWHCIRegister::~CDWHCIRegister()>
    bce8:	e28dd018 	add	sp, sp, #24
    bcec:	e8bd8010 	pop	{r4, pc}
    bcf0:	20980010 	.word	0x20980010

0000bcf4 <CDWHCIDevice::InitHost()>:
    bcf4:	e92d4010 	push	{r4, lr}
    bcf8:	e24dd068 	sub	sp, sp, #104	; 0x68
    bcfc:	e3a02000 	mov	r2, #0
    bd00:	e59f11cc 	ldr	r1, [pc, #460]	; bed4 <CDWHCIDevice::InitHost()+0x1e0>
    bd04:	e1a04000 	mov	r4, r0
    bd08:	e28d0008 	add	r0, sp, #8
    bd0c:	eb000199 	bl	c378 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    bd10:	e28d0008 	add	r0, sp, #8
    bd14:	eb0001a3 	bl	c3a8 <CDWHCIRegister::Write()>
    bd18:	e59f11b8 	ldr	r1, [pc, #440]	; bed8 <CDWHCIDevice::InitHost()+0x1e4>
    bd1c:	e28d0014 	add	r0, sp, #20
    bd20:	eb000190 	bl	c368 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    bd24:	e28d0014 	add	r0, sp, #20
    bd28:	eb000197 	bl	c38c <CDWHCIRegister::Read()>
    bd2c:	e28d0014 	add	r0, sp, #20
    bd30:	e3e01003 	mvn	r1, #3
    bd34:	eb0001cc 	bl	c46c <CDWHCIRegister::And(unsigned int)>
    bd38:	e59f119c 	ldr	r1, [pc, #412]	; bedc <CDWHCIDevice::InitHost()+0x1e8>
    bd3c:	e28d0020 	add	r0, sp, #32
    bd40:	eb000188 	bl	c368 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    bd44:	e59f1194 	ldr	r1, [pc, #404]	; bee0 <CDWHCIDevice::InitHost()+0x1ec>
    bd48:	e28d002c 	add	r0, sp, #44	; 0x2c
    bd4c:	eb000185 	bl	c368 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    bd50:	e28d0020 	add	r0, sp, #32
    bd54:	eb00018c 	bl	c38c <CDWHCIRegister::Read()>
    bd58:	e1a00320 	lsr	r0, r0, #6
    bd5c:	e2000003 	and	r0, r0, #3
    bd60:	e3500002 	cmp	r0, #2
    bd64:	0a00004d 	beq	bea0 <CDWHCIDevice::InitHost()+0x1ac>
    bd68:	e3a01000 	mov	r1, #0
    bd6c:	e28d0014 	add	r0, sp, #20
    bd70:	eb0001cd 	bl	c4ac <CDWHCIRegister::Or(unsigned int)>
    bd74:	e28d0014 	add	r0, sp, #20
    bd78:	eb00018a 	bl	c3a8 <CDWHCIRegister::Write()>
    bd7c:	e3a02b01 	mov	r2, #1024	; 0x400
    bd80:	e59f115c 	ldr	r1, [pc, #348]	; bee4 <CDWHCIDevice::InitHost()+0x1f0>
    bd84:	e28d0038 	add	r0, sp, #56	; 0x38
    bd88:	eb00017a 	bl	c378 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    bd8c:	e28d0038 	add	r0, sp, #56	; 0x38
    bd90:	eb000184 	bl	c3a8 <CDWHCIRegister::Write()>
    bd94:	e3a02000 	mov	r2, #0
    bd98:	e59f1148 	ldr	r1, [pc, #328]	; bee8 <CDWHCIDevice::InitHost()+0x1f4>
    bd9c:	e28d0044 	add	r0, sp, #68	; 0x44
    bda0:	eb000174 	bl	c378 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    bda4:	e28d0044 	add	r0, sp, #68	; 0x44
    bda8:	e3a01b01 	mov	r1, #1024	; 0x400
    bdac:	eb0001be 	bl	c4ac <CDWHCIRegister::Or(unsigned int)>
    bdb0:	e3a01301 	mov	r1, #67108864	; 0x4000000
    bdb4:	e28d0044 	add	r0, sp, #68	; 0x44
    bdb8:	eb0001bb 	bl	c4ac <CDWHCIRegister::Or(unsigned int)>
    bdbc:	e28d0044 	add	r0, sp, #68	; 0x44
    bdc0:	eb000178 	bl	c3a8 <CDWHCIRegister::Write()>
    bdc4:	e3a02000 	mov	r2, #0
    bdc8:	e59f111c 	ldr	r1, [pc, #284]	; beec <CDWHCIDevice::InitHost()+0x1f8>
    bdcc:	e28d0050 	add	r0, sp, #80	; 0x50
    bdd0:	eb000168 	bl	c378 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    bdd4:	e28d0050 	add	r0, sp, #80	; 0x50
    bdd8:	e3a01b02 	mov	r1, #2048	; 0x800
    bddc:	eb0001b2 	bl	c4ac <CDWHCIRegister::Or(unsigned int)>
    bde0:	e3a01301 	mov	r1, #67108864	; 0x4000000
    bde4:	e28d0050 	add	r0, sp, #80	; 0x50
    bde8:	eb0001af 	bl	c4ac <CDWHCIRegister::Or(unsigned int)>
    bdec:	e28d0050 	add	r0, sp, #80	; 0x50
    bdf0:	eb00016c 	bl	c3a8 <CDWHCIRegister::Write()>
    bdf4:	e3a01010 	mov	r1, #16
    bdf8:	e1a00004 	mov	r0, r4
    bdfc:	ebffff75 	bl	bbd8 <CDWHCIDevice::FlushTxFIFO(unsigned int)>
    be00:	e1a00004 	mov	r0, r4
    be04:	ebffff9a 	bl	bc74 <CDWHCIDevice::FlushRxFIFO()>
    be08:	e59f10e0 	ldr	r1, [pc, #224]	; bef0 <CDWHCIDevice::InitHost()+0x1fc>
    be0c:	e28d005c 	add	r0, sp, #92	; 0x5c
    be10:	eb000154 	bl	c368 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    be14:	e28d005c 	add	r0, sp, #92	; 0x5c
    be18:	eb00015b 	bl	c38c <CDWHCIRegister::Read()>
    be1c:	e28d005c 	add	r0, sp, #92	; 0x5c
    be20:	e3e0102e 	mvn	r1, #46	; 0x2e
    be24:	eb000190 	bl	c46c <CDWHCIRegister::And(unsigned int)>
    be28:	e28d005c 	add	r0, sp, #92	; 0x5c
    be2c:	eb00016c 	bl	c3e4 <CDWHCIRegister::Get() const>
    be30:	e3100a01 	tst	r0, #4096	; 0x1000
    be34:	1a000004 	bne	be4c <CDWHCIDevice::InitHost()+0x158>
    be38:	e28d005c 	add	r0, sp, #92	; 0x5c
    be3c:	e3a01a01 	mov	r1, #4096	; 0x1000
    be40:	eb000199 	bl	c4ac <CDWHCIRegister::Or(unsigned int)>
    be44:	e28d005c 	add	r0, sp, #92	; 0x5c
    be48:	eb000156 	bl	c3a8 <CDWHCIRegister::Write()>
    be4c:	e1a00004 	mov	r0, r4
    be50:	ebfff893 	bl	a0a4 <CDWHCIDevice::EnableHostInterrupts()>
    be54:	e28d005c 	add	r0, sp, #92	; 0x5c
    be58:	eb00014a 	bl	c388 <CDWHCIRegister::~CDWHCIRegister()>
    be5c:	e28d0050 	add	r0, sp, #80	; 0x50
    be60:	eb000148 	bl	c388 <CDWHCIRegister::~CDWHCIRegister()>
    be64:	e28d0044 	add	r0, sp, #68	; 0x44
    be68:	eb000146 	bl	c388 <CDWHCIRegister::~CDWHCIRegister()>
    be6c:	e28d0038 	add	r0, sp, #56	; 0x38
    be70:	eb000144 	bl	c388 <CDWHCIRegister::~CDWHCIRegister()>
    be74:	e28d002c 	add	r0, sp, #44	; 0x2c
    be78:	eb000142 	bl	c388 <CDWHCIRegister::~CDWHCIRegister()>
    be7c:	e28d0020 	add	r0, sp, #32
    be80:	eb000140 	bl	c388 <CDWHCIRegister::~CDWHCIRegister()>
    be84:	e28d0014 	add	r0, sp, #20
    be88:	eb00013e 	bl	c388 <CDWHCIRegister::~CDWHCIRegister()>
    be8c:	e28d0008 	add	r0, sp, #8
    be90:	eb00013c 	bl	c388 <CDWHCIRegister::~CDWHCIRegister()>
    be94:	e3a00001 	mov	r0, #1
    be98:	e28dd068 	add	sp, sp, #104	; 0x68
    be9c:	e8bd8010 	pop	{r4, pc}
    bea0:	e28d0020 	add	r0, sp, #32
    bea4:	eb00014e 	bl	c3e4 <CDWHCIRegister::Get() const>
    bea8:	e1a01420 	lsr	r1, r0, #8
    beac:	e2011003 	and	r1, r1, #3
    beb0:	e3510001 	cmp	r1, #1
    beb4:	1affffab 	bne	bd68 <CDWHCIDevice::InitHost()+0x74>
    beb8:	e28d002c 	add	r0, sp, #44	; 0x2c
    bebc:	e58d1004 	str	r1, [sp, #4]
    bec0:	eb000131 	bl	c38c <CDWHCIRegister::Read()>
    bec4:	e3100802 	tst	r0, #131072	; 0x20000
    bec8:	e59d1004 	ldr	r1, [sp, #4]
    becc:	1affffa6 	bne	bd6c <CDWHCIDevice::InitHost()+0x78>
    bed0:	eaffffa4 	b	bd68 <CDWHCIDevice::InitHost()+0x74>
    bed4:	20980e00 	.word	0x20980e00
    bed8:	20980400 	.word	0x20980400
    bedc:	20980048 	.word	0x20980048
    bee0:	2098000c 	.word	0x2098000c
    bee4:	20980024 	.word	0x20980024
    bee8:	20980028 	.word	0x20980028
    beec:	20980100 	.word	0x20980100
    bef0:	20980440 	.word	0x20980440

0000bef4 <CDWHCIDevice::Initialize()>:
    bef4:	e92d4070 	push	{r4, r5, r6, lr}
    bef8:	e3a01001 	mov	r1, #1
    befc:	e24dd020 	sub	sp, sp, #32
    bf00:	e1a04000 	mov	r4, r0
    bf04:	e3a00020 	mov	r0, #32
    bf08:	eb000b1f 	bl	eb8c <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)>
    bf0c:	e3a01001 	mov	r1, #1
    bf10:	e3a00010 	mov	r0, #16
    bf14:	eb0004ab 	bl	d1c8 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)>
    bf18:	e3a01001 	mov	r1, #1
    bf1c:	e3a00010 	mov	r0, #16
    bf20:	eb00130e 	bl	10b60 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)>
    bf24:	e3a01001 	mov	r1, #1
    bf28:	e3a00010 	mov	r0, #16
    bf2c:	eb00142f 	bl	10ff0 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)>
    bf30:	e3a01001 	mov	r1, #1
    bf34:	e3a00010 	mov	r0, #16
    bf38:	eb002419 	bl	14fa4 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)>
    bf3c:	e3a03000 	mov	r3, #0
    bf40:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    bf44:	e5943004 	ldr	r3, [r4, #4]
    bf48:	e3530000 	cmp	r3, #0
    bf4c:	0a00004d 	beq	c088 <CDWHCIDevice::Initialize()+0x194>
    bf50:	e5943008 	ldr	r3, [r4, #8]
    bf54:	e3530000 	cmp	r3, #0
    bf58:	0a00004f 	beq	c09c <CDWHCIDevice::Initialize()+0x1a8>
    bf5c:	e59f11c4 	ldr	r1, [pc, #452]	; c128 <CDWHCIDevice::Initialize()+0x234>
    bf60:	e28d0008 	add	r0, sp, #8
    bf64:	eb0000ff 	bl	c368 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    bf68:	e28d0008 	add	r0, sp, #8
    bf6c:	eb000106 	bl	c38c <CDWHCIRegister::Read()>
    bf70:	e59f31b4 	ldr	r3, [pc, #436]	; c12c <CDWHCIDevice::Initialize()+0x238>
    bf74:	e1500003 	cmp	r0, r3
    bf78:	0a00000f 	beq	bfbc <CDWHCIDevice::Initialize()+0xc8>
    bf7c:	eb004378 	bl	1cd64 <CLogger::Get()>
    bf80:	e1a04000 	mov	r4, r0
    bf84:	e28d0008 	add	r0, sp, #8
    bf88:	eb000115 	bl	c3e4 <CDWHCIRegister::Get() const>
    bf8c:	e59f319c 	ldr	r3, [pc, #412]	; c130 <CDWHCIDevice::Initialize()+0x23c>
    bf90:	e58d0000 	str	r0, [sp]
    bf94:	e3a02001 	mov	r2, #1
    bf98:	e1a00004 	mov	r0, r4
    bf9c:	e59f1190 	ldr	r1, [pc, #400]	; c134 <CDWHCIDevice::Initialize()+0x240>
    bfa0:	eb004518 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    bfa4:	e3a05000 	mov	r5, #0
    bfa8:	e28d0008 	add	r0, sp, #8
    bfac:	eb0000f5 	bl	c388 <CDWHCIRegister::~CDWHCIRegister()>
    bfb0:	e1a00005 	mov	r0, r5
    bfb4:	e28dd020 	add	sp, sp, #32
    bfb8:	e8bd8070 	pop	{r4, r5, r6, pc}
    bfbc:	e1a00004 	mov	r0, r4
    bfc0:	ebfff7fe 	bl	9fc0 <CDWHCIDevice::PowerOn()>
    bfc4:	e2505000 	subs	r5, r0, #0
    bfc8:	0a000028 	beq	c070 <CDWHCIDevice::Initialize()+0x17c>
    bfcc:	e59f1164 	ldr	r1, [pc, #356]	; c138 <CDWHCIDevice::Initialize()+0x244>
    bfd0:	e28d0014 	add	r0, sp, #20
    bfd4:	eb0000e3 	bl	c368 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    bfd8:	e28d0014 	add	r0, sp, #20
    bfdc:	eb0000ea 	bl	c38c <CDWHCIRegister::Read()>
    bfe0:	e28d0014 	add	r0, sp, #20
    bfe4:	e3e01001 	mvn	r1, #1
    bfe8:	eb00011f 	bl	c46c <CDWHCIRegister::And(unsigned int)>
    bfec:	e28d0014 	add	r0, sp, #20
    bff0:	eb0000ec 	bl	c3a8 <CDWHCIRegister::Write()>
    bff4:	e5940004 	ldr	r0, [r4, #4]
    bff8:	e3500000 	cmp	r0, #0
    bffc:	0a00003c 	beq	c0f4 <CDWHCIDevice::Initialize()+0x200>
    c000:	e1a03004 	mov	r3, r4
    c004:	e59f2130 	ldr	r2, [pc, #304]	; c13c <CDWHCIDevice::Initialize()+0x248>
    c008:	e3a01009 	mov	r1, #9
    c00c:	eb0040bb 	bl	1c300 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    c010:	e1a00004 	mov	r0, r4
    c014:	ebfffe58 	bl	b97c <CDWHCIDevice::InitCore()>
    c018:	e2505000 	subs	r5, r0, #0
    c01c:	0a00000d 	beq	c058 <CDWHCIDevice::Initialize()+0x164>
    c020:	e1a00004 	mov	r0, r4
    c024:	ebfff7ff 	bl	a028 <CDWHCIDevice::EnableGlobalInterrupts()>
    c028:	e1a00004 	mov	r0, r4
    c02c:	ebffff30 	bl	bcf4 <CDWHCIDevice::InitHost()>
    c030:	e2505000 	subs	r5, r0, #0
    c034:	1a00001d 	bne	c0b0 <CDWHCIDevice::Initialize()+0x1bc>
    c038:	eb004349 	bl	1cd64 <CLogger::Get()>
    c03c:	e59f30fc 	ldr	r3, [pc, #252]	; c140 <CDWHCIDevice::Initialize()+0x24c>
    c040:	e3a02001 	mov	r2, #1
    c044:	e59f10e8 	ldr	r1, [pc, #232]	; c134 <CDWHCIDevice::Initialize()+0x240>
    c048:	eb0044ee 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c04c:	e28d0014 	add	r0, sp, #20
    c050:	eb0000cc 	bl	c388 <CDWHCIRegister::~CDWHCIRegister()>
    c054:	eaffffd3 	b	bfa8 <CDWHCIDevice::Initialize()+0xb4>
    c058:	eb004341 	bl	1cd64 <CLogger::Get()>
    c05c:	e59f30e0 	ldr	r3, [pc, #224]	; c144 <CDWHCIDevice::Initialize()+0x250>
    c060:	e3a02001 	mov	r2, #1
    c064:	e59f10c8 	ldr	r1, [pc, #200]	; c134 <CDWHCIDevice::Initialize()+0x240>
    c068:	eb0044e6 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c06c:	eafffff6 	b	c04c <CDWHCIDevice::Initialize()+0x158>
    c070:	eb00433b 	bl	1cd64 <CLogger::Get()>
    c074:	e59f30cc 	ldr	r3, [pc, #204]	; c148 <CDWHCIDevice::Initialize()+0x254>
    c078:	e3a02001 	mov	r2, #1
    c07c:	e59f10b0 	ldr	r1, [pc, #176]	; c134 <CDWHCIDevice::Initialize()+0x240>
    c080:	eb0044e0 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c084:	eaffffc7 	b	bfa8 <CDWHCIDevice::Initialize()+0xb4>
    c088:	e3a02067 	mov	r2, #103	; 0x67
    c08c:	e59f10b8 	ldr	r1, [pc, #184]	; c14c <CDWHCIDevice::Initialize()+0x258>
    c090:	e59f00b8 	ldr	r0, [pc, #184]	; c150 <CDWHCIDevice::Initialize()+0x25c>
    c094:	eb00393f 	bl	1a598 <assertion_failed>
    c098:	eaffffac 	b	bf50 <CDWHCIDevice::Initialize()+0x5c>
    c09c:	e3a02068 	mov	r2, #104	; 0x68
    c0a0:	e59f10a4 	ldr	r1, [pc, #164]	; c14c <CDWHCIDevice::Initialize()+0x258>
    c0a4:	e59f00a8 	ldr	r0, [pc, #168]	; c154 <CDWHCIDevice::Initialize()+0x260>
    c0a8:	eb00393a 	bl	1a598 <assertion_failed>
    c0ac:	eaffffaa 	b	bf5c <CDWHCIDevice::Initialize()+0x68>
    c0b0:	e1a00004 	mov	r0, r4
    c0b4:	ebfffdd9 	bl	b820 <CDWHCIDevice::EnableRootPort()>
    c0b8:	e2506000 	subs	r6, r0, #0
    c0bc:	0a000006 	beq	c0dc <CDWHCIDevice::Initialize()+0x1e8>
    c0c0:	e2840074 	add	r0, r4, #116	; 0x74
    c0c4:	eb001508 	bl	114ec <CDWHCIRootPort::Initialize()>
    c0c8:	e2505000 	subs	r5, r0, #0
    c0cc:	0a00000e 	beq	c10c <CDWHCIDevice::Initialize()+0x218>
    c0d0:	e3a03000 	mov	r3, #0
    c0d4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    c0d8:	eaffffdb 	b	c04c <CDWHCIDevice::Initialize()+0x158>
    c0dc:	eb004320 	bl	1cd64 <CLogger::Get()>
    c0e0:	e59f3070 	ldr	r3, [pc, #112]	; c158 <CDWHCIDevice::Initialize()+0x264>
    c0e4:	e3a02002 	mov	r2, #2
    c0e8:	e59f1044 	ldr	r1, [pc, #68]	; c134 <CDWHCIDevice::Initialize()+0x240>
    c0ec:	eb0044c5 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c0f0:	eaffffd5 	b	c04c <CDWHCIDevice::Initialize()+0x158>
    c0f4:	e59f0054 	ldr	r0, [pc, #84]	; c150 <CDWHCIDevice::Initialize()+0x25c>
    c0f8:	e3a0207d 	mov	r2, #125	; 0x7d
    c0fc:	e59f1048 	ldr	r1, [pc, #72]	; c14c <CDWHCIDevice::Initialize()+0x258>
    c100:	eb003924 	bl	1a598 <assertion_failed>
    c104:	e5940004 	ldr	r0, [r4, #4]
    c108:	eaffffbc 	b	c000 <CDWHCIDevice::Initialize()+0x10c>
    c10c:	eb004314 	bl	1cd64 <CLogger::Get()>
    c110:	e59f3044 	ldr	r3, [pc, #68]	; c15c <CDWHCIDevice::Initialize()+0x268>
    c114:	e3a02002 	mov	r2, #2
    c118:	e59f1014 	ldr	r1, [pc, #20]	; c134 <CDWHCIDevice::Initialize()+0x240>
    c11c:	e1a05006 	mov	r5, r6
    c120:	eb0044b8 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c124:	eaffffc8 	b	c04c <CDWHCIDevice::Initialize()+0x158>
    c128:	20980040 	.word	0x20980040
    c12c:	4f54280a 	.word	0x4f54280a
    c130:	00024408 	.word	0x00024408
    c134:	00024084 	.word	0x00024084
    c138:	20980008 	.word	0x20980008
    c13c:	0000b20c 	.word	0x0000b20c
    c140:	00024448 	.word	0x00024448
    c144:	00024430 	.word	0x00024430
    c148:	00024420 	.word	0x00024420
    c14c:	00024090 	.word	0x00024090
    c150:	000240d8 	.word	0x000240d8
    c154:	000240f0 	.word	0x000240f0
    c158:	00024460 	.word	0x00024460
    c15c:	00024484 	.word	0x00024484

0000c160 <CDWHCIDevice::DumpRegister(char const*, unsigned int)>:
    c160:	e92d4030 	push	{r4, r5, lr}
    c164:	e24dd01c 	sub	sp, sp, #28
    c168:	e1a05001 	mov	r5, r1
    c16c:	e28d000c 	add	r0, sp, #12
    c170:	e1a01002 	mov	r1, r2
    c174:	eb00007b 	bl	c368 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    c178:	e3a03000 	mov	r3, #0
    c17c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    c180:	eb0042f7 	bl	1cd64 <CLogger::Get()>
    c184:	e1a04000 	mov	r4, r0
    c188:	e28d000c 	add	r0, sp, #12
    c18c:	eb00007e 	bl	c38c <CDWHCIRegister::Read()>
    c190:	e59f3020 	ldr	r3, [pc, #32]	; c1b8 <CDWHCIDevice::DumpRegister(char const*, unsigned int)+0x58>
    c194:	e88d0021 	stm	sp, {r0, r5}
    c198:	e3a02004 	mov	r2, #4
    c19c:	e1a00004 	mov	r0, r4
    c1a0:	e59f1014 	ldr	r1, [pc, #20]	; c1bc <CDWHCIDevice::DumpRegister(char const*, unsigned int)+0x5c>
    c1a4:	eb004497 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c1a8:	e28d000c 	add	r0, sp, #12
    c1ac:	eb000075 	bl	c388 <CDWHCIRegister::~CDWHCIRegister()>
    c1b0:	e28dd01c 	add	sp, sp, #28
    c1b4:	e8bd8030 	pop	{r4, r5, pc}
    c1b8:	000240cc 	.word	0x000240cc
    c1bc:	00024084 	.word	0x00024084

0000c1c0 <CDWHCIDevice::DumpStatus(unsigned int)>:
    c1c0:	e92d4070 	push	{r4, r5, r6, lr}
    c1c4:	e1a05001 	mov	r5, r1
    c1c8:	e59f0104 	ldr	r0, [pc, #260]	; c2d4 <CDWHCIDevice::DumpStatus(unsigned int)+0x114>
    c1cc:	e59f1104 	ldr	r1, [pc, #260]	; c2d8 <CDWHCIDevice::DumpStatus(unsigned int)+0x118>
    c1d0:	ebfff6f7 	bl	9db4 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c1d4:	e59f1100 	ldr	r1, [pc, #256]	; c2dc <CDWHCIDevice::DumpStatus(unsigned int)+0x11c>
    c1d8:	e59f0100 	ldr	r0, [pc, #256]	; c2e0 <CDWHCIDevice::DumpStatus(unsigned int)+0x120>
    c1dc:	ebfff6f4 	bl	9db4 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c1e0:	e59f10fc 	ldr	r1, [pc, #252]	; c2e4 <CDWHCIDevice::DumpStatus(unsigned int)+0x124>
    c1e4:	e59f00fc 	ldr	r0, [pc, #252]	; c2e8 <CDWHCIDevice::DumpStatus(unsigned int)+0x128>
    c1e8:	ebfff6f1 	bl	9db4 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c1ec:	e59f10f8 	ldr	r1, [pc, #248]	; c2ec <CDWHCIDevice::DumpStatus(unsigned int)+0x12c>
    c1f0:	e59f00f8 	ldr	r0, [pc, #248]	; c2f0 <CDWHCIDevice::DumpStatus(unsigned int)+0x130>
    c1f4:	ebfff6ee 	bl	9db4 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c1f8:	e59f10f4 	ldr	r1, [pc, #244]	; c2f4 <CDWHCIDevice::DumpStatus(unsigned int)+0x134>
    c1fc:	e59f00f4 	ldr	r0, [pc, #244]	; c2f8 <CDWHCIDevice::DumpStatus(unsigned int)+0x138>
    c200:	ebfff6eb 	bl	9db4 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c204:	e59f10f0 	ldr	r1, [pc, #240]	; c2fc <CDWHCIDevice::DumpStatus(unsigned int)+0x13c>
    c208:	e59f00f0 	ldr	r0, [pc, #240]	; c300 <CDWHCIDevice::DumpStatus(unsigned int)+0x140>
    c20c:	ebfff6e8 	bl	9db4 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c210:	e59f10ec 	ldr	r1, [pc, #236]	; c304 <CDWHCIDevice::DumpStatus(unsigned int)+0x144>
    c214:	e59f00ec 	ldr	r0, [pc, #236]	; c308 <CDWHCIDevice::DumpStatus(unsigned int)+0x148>
    c218:	ebfff6e5 	bl	9db4 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c21c:	e59f10e8 	ldr	r1, [pc, #232]	; c30c <CDWHCIDevice::DumpStatus(unsigned int)+0x14c>
    c220:	e59f00e8 	ldr	r0, [pc, #232]	; c310 <CDWHCIDevice::DumpStatus(unsigned int)+0x150>
    c224:	ebfff6e2 	bl	9db4 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c228:	e59f10e4 	ldr	r1, [pc, #228]	; c314 <CDWHCIDevice::DumpStatus(unsigned int)+0x154>
    c22c:	e59f00e4 	ldr	r0, [pc, #228]	; c318 <CDWHCIDevice::DumpStatus(unsigned int)+0x158>
    c230:	ebfff6df 	bl	9db4 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c234:	e59f10e0 	ldr	r1, [pc, #224]	; c31c <CDWHCIDevice::DumpStatus(unsigned int)+0x15c>
    c238:	e59f00e0 	ldr	r0, [pc, #224]	; c320 <CDWHCIDevice::DumpStatus(unsigned int)+0x160>
    c23c:	ebfff6dc 	bl	9db4 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c240:	e59f10dc 	ldr	r1, [pc, #220]	; c324 <CDWHCIDevice::DumpStatus(unsigned int)+0x164>
    c244:	e59f00dc 	ldr	r0, [pc, #220]	; c328 <CDWHCIDevice::DumpStatus(unsigned int)+0x168>
    c248:	ebfff6d9 	bl	9db4 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c24c:	e59f40d8 	ldr	r4, [pc, #216]	; c32c <CDWHCIDevice::DumpStatus(unsigned int)+0x16c>
    c250:	e59f10d8 	ldr	r1, [pc, #216]	; c330 <CDWHCIDevice::DumpStatus(unsigned int)+0x170>
    c254:	e59f00d8 	ldr	r0, [pc, #216]	; c334 <CDWHCIDevice::DumpStatus(unsigned int)+0x174>
    c258:	ebfff6d5 	bl	9db4 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c25c:	e59f10d4 	ldr	r1, [pc, #212]	; c338 <CDWHCIDevice::DumpStatus(unsigned int)+0x178>
    c260:	e59f00d4 	ldr	r0, [pc, #212]	; c33c <CDWHCIDevice::DumpStatus(unsigned int)+0x17c>
    c264:	ebfff6d2 	bl	9db4 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c268:	e0854004 	add	r4, r5, r4
    c26c:	e59f10cc 	ldr	r1, [pc, #204]	; c340 <CDWHCIDevice::DumpStatus(unsigned int)+0x180>
    c270:	e59f00cc 	ldr	r0, [pc, #204]	; c344 <CDWHCIDevice::DumpStatus(unsigned int)+0x184>
    c274:	e1a04284 	lsl	r4, r4, #5
    c278:	ebfff6cd 	bl	9db4 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c27c:	e59f10c4 	ldr	r1, [pc, #196]	; c348 <CDWHCIDevice::DumpStatus(unsigned int)+0x188>
    c280:	e59f00c4 	ldr	r0, [pc, #196]	; c34c <CDWHCIDevice::DumpStatus(unsigned int)+0x18c>
    c284:	ebfff6ca 	bl	9db4 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c288:	e1a01004 	mov	r1, r4
    c28c:	e59f00bc 	ldr	r0, [pc, #188]	; c350 <CDWHCIDevice::DumpStatus(unsigned int)+0x190>
    c290:	ebfff6c7 	bl	9db4 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c294:	e2841004 	add	r1, r4, #4
    c298:	e59f00b4 	ldr	r0, [pc, #180]	; c354 <CDWHCIDevice::DumpStatus(unsigned int)+0x194>
    c29c:	ebfff6c4 	bl	9db4 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c2a0:	e2841008 	add	r1, r4, #8
    c2a4:	e59f00ac 	ldr	r0, [pc, #172]	; c358 <CDWHCIDevice::DumpStatus(unsigned int)+0x198>
    c2a8:	ebfff6c1 	bl	9db4 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c2ac:	e284100c 	add	r1, r4, #12
    c2b0:	e59f00a4 	ldr	r0, [pc, #164]	; c35c <CDWHCIDevice::DumpStatus(unsigned int)+0x19c>
    c2b4:	ebfff6be 	bl	9db4 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c2b8:	e2841010 	add	r1, r4, #16
    c2bc:	e59f009c 	ldr	r0, [pc, #156]	; c360 <CDWHCIDevice::DumpStatus(unsigned int)+0x1a0>
    c2c0:	ebfff6bb 	bl	9db4 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c2c4:	e2841014 	add	r1, r4, #20
    c2c8:	e59f0094 	ldr	r0, [pc, #148]	; c364 <CDWHCIDevice::DumpStatus(unsigned int)+0x1a4>
    c2cc:	e8bd4070 	pop	{r4, r5, r6, lr}
    c2d0:	eafff6b7 	b	9db4 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c2d4:	000244a0 	.word	0x000244a0
    c2d8:	20980000 	.word	0x20980000
    c2dc:	20980008 	.word	0x20980008
    c2e0:	000244ac 	.word	0x000244ac
    c2e4:	2098000c 	.word	0x2098000c
    c2e8:	000244b4 	.word	0x000244b4
    c2ec:	20980010 	.word	0x20980010
    c2f0:	000244bc 	.word	0x000244bc
    c2f4:	20980014 	.word	0x20980014
    c2f8:	000244c4 	.word	0x000244c4
    c2fc:	20980018 	.word	0x20980018
    c300:	000244d0 	.word	0x000244d0
    c304:	20980024 	.word	0x20980024
    c308:	000244dc 	.word	0x000244dc
    c30c:	20980028 	.word	0x20980028
    c310:	000244e8 	.word	0x000244e8
    c314:	2098002c 	.word	0x2098002c
    c318:	000244fc 	.word	0x000244fc
    c31c:	20980100 	.word	0x20980100
    c320:	0002450c 	.word	0x0002450c
    c324:	20980400 	.word	0x20980400
    c328:	00024524 	.word	0x00024524
    c32c:	0104c028 	.word	0x0104c028
    c330:	20980410 	.word	0x20980410
    c334:	00024530 	.word	0x00024530
    c338:	20980414 	.word	0x20980414
    c33c:	00024548 	.word	0x00024548
    c340:	20980418 	.word	0x20980418
    c344:	0002455c 	.word	0x0002455c
    c348:	20980440 	.word	0x20980440
    c34c:	00024574 	.word	0x00024574
    c350:	00024580 	.word	0x00024580
    c354:	00024598 	.word	0x00024598
    c358:	000245b0 	.word	0x000245b0
    c35c:	000245c4 	.word	0x000245c4
    c360:	000245dc 	.word	0x000245dc
    c364:	000245f4 	.word	0x000245f4

0000c368 <CDWHCIRegister::CDWHCIRegister(unsigned int)>:
    c368:	e3a02000 	mov	r2, #0
    c36c:	e5801004 	str	r1, [r0, #4]
    c370:	e5c02000 	strb	r2, [r0]
    c374:	e12fff1e 	bx	lr

0000c378 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>:
    c378:	e3a0c001 	mov	ip, #1
    c37c:	e9800006 	stmib	r0, {r1, r2}
    c380:	e5c0c000 	strb	ip, [r0]
    c384:	e12fff1e 	bx	lr

0000c388 <CDWHCIRegister::~CDWHCIRegister()>:
    c388:	e12fff1e 	bx	lr

0000c38c <CDWHCIRegister::Read()>:
    c38c:	e1a03000 	mov	r3, r0
    c390:	e3a02001 	mov	r2, #1
    c394:	e5901004 	ldr	r1, [r0, #4]
    c398:	e5910000 	ldr	r0, [r1]
    c39c:	e5c32000 	strb	r2, [r3]
    c3a0:	e5830008 	str	r0, [r3, #8]
    c3a4:	e12fff1e 	bx	lr

0000c3a8 <CDWHCIRegister::Write()>:
    c3a8:	e5d03000 	ldrb	r3, [r0]
    c3ac:	e92d4010 	push	{r4, lr}
    c3b0:	e3530000 	cmp	r3, #0
    c3b4:	e1a04000 	mov	r4, r0
    c3b8:	1a000003 	bne	c3cc <CDWHCIRegister::Write()+0x24>
    c3bc:	e3a02035 	mov	r2, #53	; 0x35
    c3c0:	e59f1014 	ldr	r1, [pc, #20]	; c3dc <CDWHCIRegister::Write()+0x34>
    c3c4:	e59f0014 	ldr	r0, [pc, #20]	; c3e0 <CDWHCIRegister::Write()+0x38>
    c3c8:	eb003872 	bl	1a598 <assertion_failed>
    c3cc:	e5942008 	ldr	r2, [r4, #8]
    c3d0:	e5943004 	ldr	r3, [r4, #4]
    c3d4:	e5832000 	str	r2, [r3]
    c3d8:	e8bd8010 	pop	{r4, pc}
    c3dc:	0002460c 	.word	0x0002460c
    c3e0:	00024620 	.word	0x00024620

0000c3e4 <CDWHCIRegister::Get() const>:
    c3e4:	e5d03000 	ldrb	r3, [r0]
    c3e8:	e92d4010 	push	{r4, lr}
    c3ec:	e3530000 	cmp	r3, #0
    c3f0:	e1a04000 	mov	r4, r0
    c3f4:	1a000003 	bne	c408 <CDWHCIRegister::Get() const+0x24>
    c3f8:	e3a0203b 	mov	r2, #59	; 0x3b
    c3fc:	e59f100c 	ldr	r1, [pc, #12]	; c410 <CDWHCIRegister::Get() const+0x2c>
    c400:	e59f000c 	ldr	r0, [pc, #12]	; c414 <CDWHCIRegister::Get() const+0x30>
    c404:	eb003863 	bl	1a598 <assertion_failed>
    c408:	e5940008 	ldr	r0, [r4, #8]
    c40c:	e8bd8010 	pop	{r4, pc}
    c410:	0002460c 	.word	0x0002460c
    c414:	00024620 	.word	0x00024620

0000c418 <CDWHCIRegister::Set(unsigned int)>:
    c418:	e3a03001 	mov	r3, #1
    c41c:	e5801008 	str	r1, [r0, #8]
    c420:	e5c03000 	strb	r3, [r0]
    c424:	e12fff1e 	bx	lr

0000c428 <CDWHCIRegister::IsSet(unsigned int) const>:
    c428:	e5d03000 	ldrb	r3, [r0]
    c42c:	e92d4070 	push	{r4, r5, r6, lr}
    c430:	e3530000 	cmp	r3, #0
    c434:	e1a04000 	mov	r4, r0
    c438:	e1a05001 	mov	r5, r1
    c43c:	1a000003 	bne	c450 <CDWHCIRegister::IsSet(unsigned int) const+0x28>
    c440:	e3a02047 	mov	r2, #71	; 0x47
    c444:	e59f1018 	ldr	r1, [pc, #24]	; c464 <CDWHCIRegister::IsSet(unsigned int) const+0x3c>
    c448:	e59f0018 	ldr	r0, [pc, #24]	; c468 <CDWHCIRegister::IsSet(unsigned int) const+0x40>
    c44c:	eb003851 	bl	1a598 <assertion_failed>
    c450:	e5943008 	ldr	r3, [r4, #8]
    c454:	e1150003 	tst	r5, r3
    c458:	13a00001 	movne	r0, #1
    c45c:	03a00000 	moveq	r0, #0
    c460:	e8bd8070 	pop	{r4, r5, r6, pc}
    c464:	0002460c 	.word	0x0002460c
    c468:	00024620 	.word	0x00024620

0000c46c <CDWHCIRegister::And(unsigned int)>:
    c46c:	e5d03000 	ldrb	r3, [r0]
    c470:	e92d4070 	push	{r4, r5, r6, lr}
    c474:	e3530000 	cmp	r3, #0
    c478:	e1a04000 	mov	r4, r0
    c47c:	e1a05001 	mov	r5, r1
    c480:	1a000003 	bne	c494 <CDWHCIRegister::And(unsigned int)+0x28>
    c484:	e3a0204d 	mov	r2, #77	; 0x4d
    c488:	e59f1014 	ldr	r1, [pc, #20]	; c4a4 <CDWHCIRegister::And(unsigned int)+0x38>
    c48c:	e59f0014 	ldr	r0, [pc, #20]	; c4a8 <CDWHCIRegister::And(unsigned int)+0x3c>
    c490:	eb003840 	bl	1a598 <assertion_failed>
    c494:	e5941008 	ldr	r1, [r4, #8]
    c498:	e0011005 	and	r1, r1, r5
    c49c:	e5841008 	str	r1, [r4, #8]
    c4a0:	e8bd8070 	pop	{r4, r5, r6, pc}
    c4a4:	0002460c 	.word	0x0002460c
    c4a8:	00024620 	.word	0x00024620

0000c4ac <CDWHCIRegister::Or(unsigned int)>:
    c4ac:	e5d03000 	ldrb	r3, [r0]
    c4b0:	e92d4070 	push	{r4, r5, r6, lr}
    c4b4:	e3530000 	cmp	r3, #0
    c4b8:	e1a04000 	mov	r4, r0
    c4bc:	e1a05001 	mov	r5, r1
    c4c0:	1a000003 	bne	c4d4 <CDWHCIRegister::Or(unsigned int)+0x28>
    c4c4:	e3a02053 	mov	r2, #83	; 0x53
    c4c8:	e59f1014 	ldr	r1, [pc, #20]	; c4e4 <CDWHCIRegister::Or(unsigned int)+0x38>
    c4cc:	e59f0014 	ldr	r0, [pc, #20]	; c4e8 <CDWHCIRegister::Or(unsigned int)+0x3c>
    c4d0:	eb003830 	bl	1a598 <assertion_failed>
    c4d4:	e5941008 	ldr	r1, [r4, #8]
    c4d8:	e1811005 	orr	r1, r1, r5
    c4dc:	e5841008 	str	r1, [r4, #8]
    c4e0:	e8bd8070 	pop	{r4, r5, r6, pc}
    c4e4:	0002460c 	.word	0x0002460c
    c4e8:	00024620 	.word	0x00024620

0000c4ec <CDWHCIRegister::ClearBit(unsigned int)>:
    c4ec:	e5d03000 	ldrb	r3, [r0]
    c4f0:	e92d4070 	push	{r4, r5, r6, lr}
    c4f4:	e3530000 	cmp	r3, #0
    c4f8:	e1a04000 	mov	r4, r0
    c4fc:	e1a05001 	mov	r5, r1
    c500:	0a00000a 	beq	c530 <CDWHCIRegister::ClearBit(unsigned int)+0x44>
    c504:	e355001f 	cmp	r5, #31
    c508:	9a000003 	bls	c51c <CDWHCIRegister::ClearBit(unsigned int)+0x30>
    c50c:	e3a0205a 	mov	r2, #90	; 0x5a
    c510:	e59f102c 	ldr	r1, [pc, #44]	; c544 <CDWHCIRegister::ClearBit(unsigned int)+0x58>
    c514:	e59f002c 	ldr	r0, [pc, #44]	; c548 <CDWHCIRegister::ClearBit(unsigned int)+0x5c>
    c518:	eb00381e 	bl	1a598 <assertion_failed>
    c51c:	e3a03001 	mov	r3, #1
    c520:	e5941008 	ldr	r1, [r4, #8]
    c524:	e1c11513 	bic	r1, r1, r3, lsl r5
    c528:	e5841008 	str	r1, [r4, #8]
    c52c:	e8bd8070 	pop	{r4, r5, r6, pc}
    c530:	e3a02059 	mov	r2, #89	; 0x59
    c534:	e59f1008 	ldr	r1, [pc, #8]	; c544 <CDWHCIRegister::ClearBit(unsigned int)+0x58>
    c538:	e59f000c 	ldr	r0, [pc, #12]	; c54c <CDWHCIRegister::ClearBit(unsigned int)+0x60>
    c53c:	eb003815 	bl	1a598 <assertion_failed>
    c540:	eaffffef 	b	c504 <CDWHCIRegister::ClearBit(unsigned int)+0x18>
    c544:	0002460c 	.word	0x0002460c
    c548:	0002462c 	.word	0x0002462c
    c54c:	00024620 	.word	0x00024620

0000c550 <CDWHCIRegister::SetBit(unsigned int)>:
    c550:	e5d03000 	ldrb	r3, [r0]
    c554:	e92d4070 	push	{r4, r5, r6, lr}
    c558:	e3530000 	cmp	r3, #0
    c55c:	e1a04000 	mov	r4, r0
    c560:	e1a05001 	mov	r5, r1
    c564:	0a00000a 	beq	c594 <CDWHCIRegister::SetBit(unsigned int)+0x44>
    c568:	e355001f 	cmp	r5, #31
    c56c:	9a000003 	bls	c580 <CDWHCIRegister::SetBit(unsigned int)+0x30>
    c570:	e3a02061 	mov	r2, #97	; 0x61
    c574:	e59f102c 	ldr	r1, [pc, #44]	; c5a8 <CDWHCIRegister::SetBit(unsigned int)+0x58>
    c578:	e59f002c 	ldr	r0, [pc, #44]	; c5ac <CDWHCIRegister::SetBit(unsigned int)+0x5c>
    c57c:	eb003805 	bl	1a598 <assertion_failed>
    c580:	e3a03001 	mov	r3, #1
    c584:	e5941008 	ldr	r1, [r4, #8]
    c588:	e1811513 	orr	r1, r1, r3, lsl r5
    c58c:	e5841008 	str	r1, [r4, #8]
    c590:	e8bd8070 	pop	{r4, r5, r6, pc}
    c594:	e3a02060 	mov	r2, #96	; 0x60
    c598:	e59f1008 	ldr	r1, [pc, #8]	; c5a8 <CDWHCIRegister::SetBit(unsigned int)+0x58>
    c59c:	e59f000c 	ldr	r0, [pc, #12]	; c5b0 <CDWHCIRegister::SetBit(unsigned int)+0x60>
    c5a0:	eb0037fc 	bl	1a598 <assertion_failed>
    c5a4:	eaffffef 	b	c568 <CDWHCIRegister::SetBit(unsigned int)+0x18>
    c5a8:	0002460c 	.word	0x0002460c
    c5ac:	0002462c 	.word	0x0002462c
    c5b0:	00024620 	.word	0x00024620

0000c5b4 <CDWHCIRegister::ClearAll()>:
    c5b4:	e3a02000 	mov	r2, #0
    c5b8:	e3a03001 	mov	r3, #1
    c5bc:	e5802008 	str	r2, [r0, #8]
    c5c0:	e5c03000 	strb	r3, [r0]
    c5c4:	e12fff1e 	bx	lr

0000c5c8 <CDWHCIRegister::SetAll()>:
    c5c8:	e3e02000 	mvn	r2, #0
    c5cc:	e3a03001 	mov	r3, #1
    c5d0:	e5802008 	str	r2, [r0, #8]
    c5d4:	e5c03000 	strb	r3, [r0]
    c5d8:	e12fff1e 	bx	lr

0000c5dc <CDWHCIRegister::Dump() const>:
    c5dc:	e92d4010 	push	{r4, lr}
    c5e0:	e5d03000 	ldrb	r3, [r0]
    c5e4:	e24dd008 	sub	sp, sp, #8
    c5e8:	e3530000 	cmp	r3, #0
    c5ec:	e1a04000 	mov	r4, r0
    c5f0:	1a00000a 	bne	c620 <CDWHCIRegister::Dump() const+0x44>
    c5f4:	eb0041da 	bl	1cd64 <CLogger::Get()>
    c5f8:	e5942004 	ldr	r2, [r4, #4]
    c5fc:	e59f3050 	ldr	r3, [pc, #80]	; c654 <CDWHCIRegister::Dump() const+0x78>
    c600:	e1a02a02 	lsl	r2, r2, #20
    c604:	e1a02a22 	lsr	r2, r2, #20
    c608:	e58d2000 	str	r2, [sp]
    c60c:	e59f1044 	ldr	r1, [pc, #68]	; c658 <CDWHCIRegister::Dump() const+0x7c>
    c610:	e3a02004 	mov	r2, #4
    c614:	eb00437b 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c618:	e28dd008 	add	sp, sp, #8
    c61c:	e8bd8010 	pop	{r4, pc}
    c620:	eb0041cf 	bl	1cd64 <CLogger::Get()>
    c624:	e5943004 	ldr	r3, [r4, #4]
    c628:	e5942008 	ldr	r2, [r4, #8]
    c62c:	e1a03a03 	lsl	r3, r3, #20
    c630:	e1a03a23 	lsr	r3, r3, #20
    c634:	e58d3000 	str	r3, [sp]
    c638:	e58d2004 	str	r2, [sp, #4]
    c63c:	e59f3018 	ldr	r3, [pc, #24]	; c65c <CDWHCIRegister::Dump() const+0x80>
    c640:	e3a02004 	mov	r2, #4
    c644:	e59f100c 	ldr	r1, [pc, #12]	; c658 <CDWHCIRegister::Dump() const+0x7c>
    c648:	eb00436e 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c64c:	e28dd008 	add	sp, sp, #8
    c650:	e8bd8010 	pop	{r4, pc}
    c654:	0002466c 	.word	0x0002466c
    c658:	00024664 	.word	0x00024664
    c65c:	00024648 	.word	0x00024648

0000c660 <CDWHCITransferStageData::~CDWHCITransferStageData()>:
    c660:	e92d4010 	push	{r4, lr}
    c664:	e1a04000 	mov	r4, r0
    c668:	e5900050 	ldr	r0, [r0, #80]	; 0x50
    c66c:	e3500000 	cmp	r0, #0
    c670:	0a000002 	beq	c680 <CDWHCITransferStageData::~CDWHCITransferStageData()+0x20>
    c674:	e5903000 	ldr	r3, [r0]
    c678:	e5933004 	ldr	r3, [r3, #4]
    c67c:	e12fff33 	blx	r3
    c680:	e3a03000 	mov	r3, #0
    c684:	e5940044 	ldr	r0, [r4, #68]	; 0x44
    c688:	e5843050 	str	r3, [r4, #80]	; 0x50
    c68c:	e1500003 	cmp	r0, r3
    c690:	e5843048 	str	r3, [r4, #72]	; 0x48
    c694:	0a000000 	beq	c69c <CDWHCITransferStageData::~CDWHCITransferStageData()+0x3c>
    c698:	eb005892 	bl	228e8 <operator delete[](void*)>
    c69c:	e1a00004 	mov	r0, r4
    c6a0:	e8bd8010 	pop	{r4, pc}

0000c6a4 <CDWHCITransferStageData::SetChannelNumber(unsigned int)>:
    c6a4:	e5801000 	str	r1, [r0]
    c6a8:	e12fff1e 	bx	lr

0000c6ac <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)>:
    c6ac:	e92d4070 	push	{r4, r5, r6, lr}
    c6b0:	e1a04000 	mov	r4, r0
    c6b4:	e59f0194 	ldr	r0, [pc, #404]	; c850 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x1a4>
    c6b8:	e5841040 	str	r1, [r4, #64]	; 0x40
    c6bc:	e0000001 	and	r0, r0, r1
    c6c0:	e3500000 	cmp	r0, #0
    c6c4:	0a000006 	beq	c6e4 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x38>
    c6c8:	e3110010 	tst	r1, #16
    c6cc:	08bd8070 	popeq	{r4, r5, r6, pc}
    c6d0:	e5940004 	ldr	r0, [r4, #4]
    c6d4:	eb0008e0 	bl	ea5c <CUSBRequest::IsCompleteOnNAK() const>
    c6d8:	e3500000 	cmp	r0, #0
    c6dc:	1a000041 	bne	c7e8 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x13c>
    c6e0:	e8bd8070 	pop	{r4, r5, r6, pc}
    c6e4:	e5d40010 	ldrb	r0, [r4, #16]
    c6e8:	e5945030 	ldr	r5, [r4, #48]	; 0x30
    c6ec:	e594102c 	ldr	r1, [r4, #44]	; 0x2c
    c6f0:	e3500000 	cmp	r0, #0
    c6f4:	e0455002 	sub	r5, r5, r2
    c6f8:	e0413003 	sub	r3, r1, r3
    c6fc:	1a000018 	bne	c764 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0xb8>
    c700:	e5941034 	ldr	r1, [r4, #52]	; 0x34
    c704:	e5942048 	ldr	r2, [r4, #72]	; 0x48
    c708:	e0811003 	add	r1, r1, r3
    c70c:	e0823003 	add	r3, r2, r3
    c710:	e5841034 	str	r1, [r4, #52]	; 0x34
    c714:	e5843048 	str	r3, [r4, #72]	; 0x48
    c718:	e5d42009 	ldrb	r2, [r4, #9]
    c71c:	e1a01005 	mov	r1, r5
    c720:	e5940018 	ldr	r0, [r4, #24]
    c724:	eb00076e 	bl	e4e4 <CUSBEndpoint::SkipPID(unsigned int, bool)>
    c728:	e5942028 	ldr	r2, [r4, #40]	; 0x28
    c72c:	e1550002 	cmp	r5, r2
    c730:	8a000026 	bhi	c7d0 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x124>
    c734:	e5940024 	ldr	r0, [r4, #36]	; 0x24
    c738:	e5941034 	ldr	r1, [r4, #52]	; 0x34
    c73c:	e594c02c 	ldr	ip, [r4, #44]	; 0x2c
    c740:	e0403001 	sub	r3, r0, r1
    c744:	e0422005 	sub	r2, r2, r5
    c748:	e153000c 	cmp	r3, ip
    c74c:	e5842028 	str	r2, [r4, #40]	; 0x28
    c750:	28bd8070 	popcs	{r4, r5, r6, pc}
    c754:	e1500001 	cmp	r0, r1
    c758:	3a000034 	bcc	c830 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x184>
    c75c:	e584302c 	str	r3, [r4, #44]	; 0x2c
    c760:	e8bd8070 	pop	{r4, r5, r6, pc}
    c764:	e5d40011 	ldrb	r0, [r4, #17]
    c768:	e3530000 	cmp	r3, #0
    c76c:	13a02000 	movne	r2, #0
    c770:	02002001 	andeq	r2, r0, #1
    c774:	e3520000 	cmp	r2, #0
    c778:	0a000009 	beq	c7a4 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0xf8>
    c77c:	e3510000 	cmp	r1, #0
    c780:	15941020 	ldrne	r1, [r4, #32]
    c784:	10010591 	mulne	r1, r1, r5
    c788:	e5942034 	ldr	r2, [r4, #52]	; 0x34
    c78c:	e5943048 	ldr	r3, [r4, #72]	; 0x48
    c790:	e0822001 	add	r2, r2, r1
    c794:	e0831001 	add	r1, r3, r1
    c798:	e5842034 	str	r2, [r4, #52]	; 0x34
    c79c:	e5841048 	str	r1, [r4, #72]	; 0x48
    c7a0:	eaffffdc 	b	c718 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x6c>
    c7a4:	e5941034 	ldr	r1, [r4, #52]	; 0x34
    c7a8:	e5942048 	ldr	r2, [r4, #72]	; 0x48
    c7ac:	e0811003 	add	r1, r1, r3
    c7b0:	e3500000 	cmp	r0, #0
    c7b4:	e0823003 	add	r3, r2, r3
    c7b8:	e5841034 	str	r1, [r4, #52]	; 0x34
    c7bc:	e5843048 	str	r3, [r4, #72]	; 0x48
    c7c0:	1affffd4 	bne	c718 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x6c>
    c7c4:	e5942028 	ldr	r2, [r4, #40]	; 0x28
    c7c8:	e1550002 	cmp	r5, r2
    c7cc:	9affffd8 	bls	c734 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x88>
    c7d0:	e3a020d6 	mov	r2, #214	; 0xd6
    c7d4:	e59f1078 	ldr	r1, [pc, #120]	; c854 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x1a8>
    c7d8:	e59f0078 	ldr	r0, [pc, #120]	; c858 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x1ac>
    c7dc:	eb00376d 	bl	1a598 <assertion_failed>
    c7e0:	e5942028 	ldr	r2, [r4, #40]	; 0x28
    c7e4:	eaffffd2 	b	c734 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x88>
    c7e8:	e5940018 	ldr	r0, [r4, #24]
    c7ec:	eb000715 	bl	e448 <CUSBEndpoint::GetType() const>
    c7f0:	e3500001 	cmp	r0, #1
    c7f4:	0a000003 	beq	c808 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x15c>
    c7f8:	e3a020b9 	mov	r2, #185	; 0xb9
    c7fc:	e59f1050 	ldr	r1, [pc, #80]	; c854 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x1a8>
    c800:	e59f0054 	ldr	r0, [pc, #84]	; c85c <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x1b0>
    c804:	eb003763 	bl	1a598 <assertion_failed>
    c808:	e5d43008 	ldrb	r3, [r4, #8]
    c80c:	e3530000 	cmp	r3, #0
    c810:	1a000003 	bne	c824 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x178>
    c814:	e3a020ba 	mov	r2, #186	; 0xba
    c818:	e59f1034 	ldr	r1, [pc, #52]	; c854 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x1a8>
    c81c:	e59f003c 	ldr	r0, [pc, #60]	; c860 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x1b4>
    c820:	eb00375c 	bl	1a598 <assertion_failed>
    c824:	e3a03000 	mov	r3, #0
    c828:	e5843028 	str	r3, [r4, #40]	; 0x28
    c82c:	e8bd8070 	pop	{r4, r5, r6, pc}
    c830:	e3a020dc 	mov	r2, #220	; 0xdc
    c834:	e59f1018 	ldr	r1, [pc, #24]	; c854 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x1a8>
    c838:	e59f0024 	ldr	r0, [pc, #36]	; c864 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x1b8>
    c83c:	eb003755 	bl	1a598 <assertion_failed>
    c840:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    c844:	e5942034 	ldr	r2, [r4, #52]	; 0x34
    c848:	e0433002 	sub	r3, r3, r2
    c84c:	eaffffc2 	b	c75c <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0xb0>
    c850:	000007dc 	.word	0x000007dc
    c854:	0002468c 	.word	0x0002468c
    c858:	000246d8 	.word	0x000246d8
    c85c:	000246a4 	.word	0x000246a4
    c860:	000246d0 	.word	0x000246d0
    c864:	000246fc 	.word	0x000246fc

0000c868 <CDWHCITransferStageData::SetSplitComplete(bool)>:
    c868:	e5d03010 	ldrb	r3, [r0, #16]
    c86c:	e92d4070 	push	{r4, r5, r6, lr}
    c870:	e3530000 	cmp	r3, #0
    c874:	e1a04000 	mov	r4, r0
    c878:	e1a05001 	mov	r5, r1
    c87c:	1a000003 	bne	c890 <CDWHCITransferStageData::SetSplitComplete(bool)+0x28>
    c880:	e3a020e3 	mov	r2, #227	; 0xe3
    c884:	e59f100c 	ldr	r1, [pc, #12]	; c898 <CDWHCITransferStageData::SetSplitComplete(bool)+0x30>
    c888:	e59f000c 	ldr	r0, [pc, #12]	; c89c <CDWHCITransferStageData::SetSplitComplete(bool)+0x34>
    c88c:	eb003741 	bl	1a598 <assertion_failed>
    c890:	e5c45011 	strb	r5, [r4, #17]
    c894:	e8bd8070 	pop	{r4, r5, r6, pc}
    c898:	0002468c 	.word	0x0002468c
    c89c:	00024728 	.word	0x00024728

0000c8a0 <CDWHCITransferStageData::SetState(unsigned int)>:
    c8a0:	e5801038 	str	r1, [r0, #56]	; 0x38
    c8a4:	e12fff1e 	bx	lr

0000c8a8 <CDWHCITransferStageData::GetState() const>:
    c8a8:	e5900038 	ldr	r0, [r0, #56]	; 0x38
    c8ac:	e12fff1e 	bx	lr

0000c8b0 <CDWHCITransferStageData::SetSubState(unsigned int)>:
    c8b0:	e580103c 	str	r1, [r0, #60]	; 0x3c
    c8b4:	e12fff1e 	bx	lr

0000c8b8 <CDWHCITransferStageData::GetSubState() const>:
    c8b8:	e590003c 	ldr	r0, [r0, #60]	; 0x3c
    c8bc:	e12fff1e 	bx	lr

0000c8c0 <CDWHCITransferStageData::BeginSplitCycle()>:
    c8c0:	e3a00001 	mov	r0, #1
    c8c4:	e12fff1e 	bx	lr

0000c8c8 <CDWHCITransferStageData::GetChannelNumber() const>:
    c8c8:	e5900000 	ldr	r0, [r0]
    c8cc:	e12fff1e 	bx	lr

0000c8d0 <CDWHCITransferStageData::IsPeriodic() const>:
    c8d0:	e92d4010 	push	{r4, lr}
    c8d4:	e1a04000 	mov	r4, r0
    c8d8:	e5900018 	ldr	r0, [r0, #24]
    c8dc:	e3500000 	cmp	r0, #0
    c8e0:	0a000006 	beq	c900 <CDWHCITransferStageData::IsPeriodic() const+0x30>
    c8e4:	eb0006d7 	bl	e448 <CUSBEndpoint::GetType() const>
    c8e8:	e2400002 	sub	r0, r0, #2
    c8ec:	e6ef0070 	uxtb	r0, r0
    c8f0:	e3500001 	cmp	r0, #1
    c8f4:	83a00000 	movhi	r0, #0
    c8f8:	93a00001 	movls	r0, #1
    c8fc:	e8bd8010 	pop	{r4, pc}
    c900:	e59f0010 	ldr	r0, [pc, #16]	; c918 <CDWHCITransferStageData::IsPeriodic() const+0x48>
    c904:	e3a02f42 	mov	r2, #264	; 0x108
    c908:	e59f100c 	ldr	r1, [pc, #12]	; c91c <CDWHCITransferStageData::IsPeriodic() const+0x4c>
    c90c:	eb003721 	bl	1a598 <assertion_failed>
    c910:	e5940018 	ldr	r0, [r4, #24]
    c914:	eafffff2 	b	c8e4 <CDWHCITransferStageData::IsPeriodic() const+0x14>
    c918:	0002473c 	.word	0x0002473c
    c91c:	0002468c 	.word	0x0002468c

0000c920 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)>:
    c920:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c924:	e1a05002 	mov	r5, r2
    c928:	e3a02000 	mov	r2, #0
    c92c:	e5dd6018 	ldrb	r6, [sp, #24]
    c930:	e1550002 	cmp	r5, r2
    c934:	e1a04000 	mov	r4, r0
    c938:	e8800022 	stm	r0, {r1, r5}
    c93c:	e5c03008 	strb	r3, [r0, #8]
    c940:	e5c06009 	strb	r6, [r0, #9]
    c944:	e580200c 	str	r2, [r0, #12]
    c948:	e5c02011 	strb	r2, [r0, #17]
    c94c:	e5802034 	str	r2, [r0, #52]	; 0x34
    c950:	e5802038 	str	r2, [r0, #56]	; 0x38
    c954:	e580203c 	str	r2, [r0, #60]	; 0x3c
    c958:	e5802040 	str	r2, [r0, #64]	; 0x40
    c95c:	e5802044 	str	r2, [r0, #68]	; 0x44
    c960:	e580204c 	str	r2, [r0, #76]	; 0x4c
    c964:	e5802050 	str	r2, [r0, #80]	; 0x50
    c968:	e59d701c 	ldr	r7, [sp, #28]
    c96c:	0a000098 	beq	cbd4 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2b4>
    c970:	e1a00005 	mov	r0, r5
    c974:	eb0007c9 	bl	e8a0 <CUSBRequest::GetEndpoint() const>
    c978:	e3500000 	cmp	r0, #0
    c97c:	e5840018 	str	r0, [r4, #24]
    c980:	0a000098 	beq	cbe8 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2c8>
    c984:	eb00069d 	bl	e400 <CUSBEndpoint::GetDevice() const>
    c988:	e3500000 	cmp	r0, #0
    c98c:	e5840014 	str	r0, [r4, #20]
    c990:	0a00009a 	beq	cc00 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2e0>
    c994:	eb00033d 	bl	d690 <CUSBDevice::GetSpeed() const>
    c998:	e5c4001c 	strb	r0, [r4, #28]
    c99c:	e5940018 	ldr	r0, [r4, #24]
    c9a0:	eb0006ae 	bl	e460 <CUSBEndpoint::GetMaxPacketSize() const>
    c9a4:	e5840020 	str	r0, [r4, #32]
    c9a8:	e5940014 	ldr	r0, [r4, #20]
    c9ac:	eb000339 	bl	d698 <CUSBDevice::IsSplit() const>
    c9b0:	e3560000 	cmp	r6, #0
    c9b4:	e5c40010 	strb	r0, [r4, #16]
    c9b8:	0a00004f 	beq	cafc <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x1dc>
    c9bc:	e5943044 	ldr	r3, [r4, #68]	; 0x44
    c9c0:	e3530000 	cmp	r3, #0
    c9c4:	0a000003 	beq	c9d8 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0xb8>
    c9c8:	e3a02061 	mov	r2, #97	; 0x61
    c9cc:	e59f1244 	ldr	r1, [pc, #580]	; cc18 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2f8>
    c9d0:	e59f0244 	ldr	r0, [pc, #580]	; cc1c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2fc>
    c9d4:	eb0036ef 	bl	1a598 <assertion_failed>
    c9d8:	e3a00004 	mov	r0, #4
    c9dc:	eb0057bf 	bl	228e0 <operator new[](unsigned int)>
    c9e0:	e3a02000 	mov	r2, #0
    c9e4:	e3a03001 	mov	r3, #1
    c9e8:	e5840044 	str	r0, [r4, #68]	; 0x44
    c9ec:	e5840048 	str	r0, [r4, #72]	; 0x48
    c9f0:	e5842024 	str	r2, [r4, #36]	; 0x24
    c9f4:	e584202c 	str	r2, [r4, #44]	; 0x2c
    c9f8:	e5843028 	str	r3, [r4, #40]	; 0x28
    c9fc:	e5843030 	str	r3, [r4, #48]	; 0x30
    ca00:	e3100003 	tst	r0, #3
    ca04:	1a00005f 	bne	cb88 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x268>
    ca08:	e5d43010 	ldrb	r3, [r4, #16]
    ca0c:	e3530000 	cmp	r3, #0
    ca10:	0a00000c 	beq	ca48 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x128>
    ca14:	e1a00004 	mov	r0, r4
    ca18:	ebffffac 	bl	c8d0 <CDWHCITransferStageData::IsPeriodic() const>
    ca1c:	e3500000 	cmp	r0, #0
    ca20:	0a00002f 	beq	cae4 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x1c4>
    ca24:	e3a00014 	mov	r0, #20
    ca28:	eb001120 	bl	10eb0 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)>
    ca2c:	e1a05000 	mov	r5, r0
    ca30:	eb001108 	bl	10e58 <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()>
    ca34:	e5845050 	str	r5, [r4, #80]	; 0x50
    ca38:	e3570000 	cmp	r7, #0
    ca3c:	1a000013 	bne	ca90 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x170>
    ca40:	e1a00004 	mov	r0, r4
    ca44:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ca48:	e5940014 	ldr	r0, [r4, #20]
    ca4c:	eb000313 	bl	d6a0 <CUSBDevice::GetHubAddress() const>
    ca50:	e3500000 	cmp	r0, #0
    ca54:	1afffff7 	bne	ca38 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x118>
    ca58:	e5d4301c 	ldrb	r3, [r4, #28]
    ca5c:	e3530002 	cmp	r3, #2
    ca60:	0afffff4 	beq	ca38 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x118>
    ca64:	e1a00004 	mov	r0, r4
    ca68:	ebffff98 	bl	c8d0 <CDWHCITransferStageData::IsPeriodic() const>
    ca6c:	e1a06000 	mov	r6, r0
    ca70:	e3a00008 	mov	r0, #8
    ca74:	eb0020fa 	bl	14e64 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)>
    ca78:	e1a05000 	mov	r5, r0
    ca7c:	e1a01006 	mov	r1, r6
    ca80:	eb0020f0 	bl	14e48 <CDWHCIFrameSchedulerNoSplit::CDWHCIFrameSchedulerNoSplit(bool)>
    ca84:	e3570000 	cmp	r7, #0
    ca88:	e5845050 	str	r5, [r4, #80]	; 0x50
    ca8c:	0affffeb 	beq	ca40 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x120>
    ca90:	e5940018 	ldr	r0, [r4, #24]
    ca94:	eb00066b 	bl	e448 <CUSBEndpoint::GetType() const>
    ca98:	e3500002 	cmp	r0, #2
    ca9c:	0a000003 	beq	cab0 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x190>
    caa0:	e3a02088 	mov	r2, #136	; 0x88
    caa4:	e59f116c 	ldr	r1, [pc, #364]	; cc18 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2f8>
    caa8:	e59f0170 	ldr	r0, [pc, #368]	; cc20 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x300>
    caac:	eb0036b9 	bl	1a598 <assertion_failed>
    cab0:	e3a03064 	mov	r3, #100	; 0x64
    cab4:	e0030793 	mul	r3, r3, r7
    cab8:	e59f2164 	ldr	r2, [pc, #356]	; cc24 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x304>
    cabc:	e0832392 	umull	r2, r3, r2, r3
    cac0:	e1a03323 	lsr	r3, r3, #6
    cac4:	e3530000 	cmp	r3, #0
    cac8:	e584300c 	str	r3, [r4, #12]
    cacc:	0a00003b 	beq	cbc0 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2a0>
    cad0:	eb005304 	bl	216e8 <CTimer::Get()>
    cad4:	eb00503c 	bl	20bcc <CTimer::GetTicks() const>
    cad8:	e584004c 	str	r0, [r4, #76]	; 0x4c
    cadc:	e1a00004 	mov	r0, r4
    cae0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    cae4:	e3a00010 	mov	r0, #16
    cae8:	eb000fcc 	bl	10a20 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)>
    caec:	e1a05000 	mov	r5, r0
    caf0:	eb000fb6 	bl	109d0 <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()>
    caf4:	e5845050 	str	r5, [r4, #80]	; 0x50
    caf8:	eaffffce 	b	ca38 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x118>
    cafc:	e1a01006 	mov	r1, r6
    cb00:	e5940018 	ldr	r0, [r4, #24]
    cb04:	eb000664 	bl	e49c <CUSBEndpoint::GetNextPID(bool)>
    cb08:	e3500000 	cmp	r0, #0
    cb0c:	e1a00005 	mov	r0, r5
    cb10:	0a000021 	beq	cb9c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x27c>
    cb14:	eb00079b 	bl	e988 <CUSBRequest::GetBuffer()>
    cb18:	e5840048 	str	r0, [r4, #72]	; 0x48
    cb1c:	e1a00005 	mov	r0, r5
    cb20:	eb0007ab 	bl	e9d4 <CUSBRequest::GetBufLen() const>
    cb24:	e1a05000 	mov	r5, r0
    cb28:	e5840024 	str	r0, [r4, #36]	; 0x24
    cb2c:	e5946020 	ldr	r6, [r4, #32]
    cb30:	e2460001 	sub	r0, r6, #1
    cb34:	e0800005 	add	r0, r0, r5
    cb38:	e1a01006 	mov	r1, r6
    cb3c:	eb005cba 	bl	23e2c <__aeabi_uidiv>
    cb40:	e5d43010 	ldrb	r3, [r4, #16]
    cb44:	e5840028 	str	r0, [r4, #40]	; 0x28
    cb48:	e3530000 	cmp	r3, #0
    cb4c:	0a000017 	beq	cbb0 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x290>
    cb50:	e1560005 	cmp	r6, r5
    cb54:	31a05006 	movcc	r5, r6
    cb58:	e3a03001 	mov	r3, #1
    cb5c:	e5940048 	ldr	r0, [r4, #72]	; 0x48
    cb60:	e584502c 	str	r5, [r4, #44]	; 0x2c
    cb64:	e5843030 	str	r3, [r4, #48]	; 0x30
    cb68:	e3500000 	cmp	r0, #0
    cb6c:	1affffa3 	bne	ca00 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0xe0>
    cb70:	e59f00b0 	ldr	r0, [pc, #176]	; cc28 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x308>
    cb74:	e3a0206c 	mov	r2, #108	; 0x6c
    cb78:	e59f1098 	ldr	r1, [pc, #152]	; cc18 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2f8>
    cb7c:	eb003685 	bl	1a598 <assertion_failed>
    cb80:	e5940048 	ldr	r0, [r4, #72]	; 0x48
    cb84:	eaffff9d 	b	ca00 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0xe0>
    cb88:	e3a0206d 	mov	r2, #109	; 0x6d
    cb8c:	e59f1084 	ldr	r1, [pc, #132]	; cc18 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2f8>
    cb90:	e59f0094 	ldr	r0, [pc, #148]	; cc2c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x30c>
    cb94:	eb00367f 	bl	1a598 <assertion_failed>
    cb98:	eaffff9a 	b	ca08 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0xe8>
    cb9c:	eb000762 	bl	e92c <CUSBRequest::GetSetupData()>
    cba0:	e3a05008 	mov	r5, #8
    cba4:	e5840048 	str	r0, [r4, #72]	; 0x48
    cba8:	e5845024 	str	r5, [r4, #36]	; 0x24
    cbac:	eaffffde 	b	cb2c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x20c>
    cbb0:	e5840030 	str	r0, [r4, #48]	; 0x30
    cbb4:	e584502c 	str	r5, [r4, #44]	; 0x2c
    cbb8:	e5940048 	ldr	r0, [r4, #72]	; 0x48
    cbbc:	eaffffe9 	b	cb68 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x248>
    cbc0:	e3a0208b 	mov	r2, #139	; 0x8b
    cbc4:	e59f104c 	ldr	r1, [pc, #76]	; cc18 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2f8>
    cbc8:	e59f0060 	ldr	r0, [pc, #96]	; cc30 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x310>
    cbcc:	eb003671 	bl	1a598 <assertion_failed>
    cbd0:	eaffffbe 	b	cad0 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x1b0>
    cbd4:	e3a02031 	mov	r2, #49	; 0x31
    cbd8:	e59f1038 	ldr	r1, [pc, #56]	; cc18 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2f8>
    cbdc:	e59f0050 	ldr	r0, [pc, #80]	; cc34 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x314>
    cbe0:	eb00366c 	bl	1a598 <assertion_failed>
    cbe4:	eaffff61 	b	c970 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x50>
    cbe8:	e59f0048 	ldr	r0, [pc, #72]	; cc38 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x318>
    cbec:	e3a02034 	mov	r2, #52	; 0x34
    cbf0:	e59f1020 	ldr	r1, [pc, #32]	; cc18 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2f8>
    cbf4:	eb003667 	bl	1a598 <assertion_failed>
    cbf8:	e5940018 	ldr	r0, [r4, #24]
    cbfc:	eaffff60 	b	c984 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x64>
    cc00:	e59f0034 	ldr	r0, [pc, #52]	; cc3c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x31c>
    cc04:	e3a02036 	mov	r2, #54	; 0x36
    cc08:	e59f1008 	ldr	r1, [pc, #8]	; cc18 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2f8>
    cc0c:	eb003661 	bl	1a598 <assertion_failed>
    cc10:	e5940014 	ldr	r0, [r4, #20]
    cc14:	eaffff5e 	b	c994 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x74>
    cc18:	0002468c 	.word	0x0002468c
    cc1c:	0002476c 	.word	0x0002476c
    cc20:	000247c0 	.word	0x000247c0
    cc24:	10624dd3 	.word	0x10624dd3
    cc28:	00024780 	.word	0x00024780
    cc2c:	00024798 	.word	0x00024798
    cc30:	000247f4 	.word	0x000247f4
    cc34:	00024750 	.word	0x00024750
    cc38:	0002473c 	.word	0x0002473c
    cc3c:	0002475c 	.word	0x0002475c

0000cc40 <CDWHCITransferStageData::GetDeviceAddress() const>:
    cc40:	e5903014 	ldr	r3, [r0, #20]
    cc44:	e3530000 	cmp	r3, #0
    cc48:	0a000001 	beq	cc54 <CDWHCITransferStageData::GetDeviceAddress() const+0x14>
    cc4c:	e1a00003 	mov	r0, r3
    cc50:	ea00028c 	b	d688 <CUSBDevice::GetAddress() const>
    cc54:	e92d4010 	push	{r4, lr}
    cc58:	e1a04000 	mov	r4, r0
    cc5c:	e59f2018 	ldr	r2, [pc, #24]	; cc7c <CDWHCITransferStageData::GetDeviceAddress() const+0x3c>
    cc60:	e59f0018 	ldr	r0, [pc, #24]	; cc80 <CDWHCITransferStageData::GetDeviceAddress() const+0x40>
    cc64:	e59f1018 	ldr	r1, [pc, #24]	; cc84 <CDWHCITransferStageData::GetDeviceAddress() const+0x44>
    cc68:	eb00364a 	bl	1a598 <assertion_failed>
    cc6c:	e5943014 	ldr	r3, [r4, #20]
    cc70:	e8bd4010 	pop	{r4, lr}
    cc74:	e1a00003 	mov	r0, r3
    cc78:	ea000282 	b	d688 <CUSBDevice::GetAddress() const>
    cc7c:	00000111 	.word	0x00000111
    cc80:	0002475c 	.word	0x0002475c
    cc84:	0002468c 	.word	0x0002468c

0000cc88 <CDWHCITransferStageData::GetEndpointType() const>:
    cc88:	e92d4010 	push	{r4, lr}
    cc8c:	e1a04000 	mov	r4, r0
    cc90:	e5900018 	ldr	r0, [r0, #24]
    cc94:	e3500000 	cmp	r0, #0
    cc98:	0a00000f 	beq	ccdc <CDWHCITransferStageData::GetEndpointType() const+0x54>
    cc9c:	eb0005e9 	bl	e448 <CUSBEndpoint::GetType() const>
    cca0:	e3500001 	cmp	r0, #1
    cca4:	0a00000a 	beq	ccd4 <CDWHCITransferStageData::GetEndpointType() const+0x4c>
    cca8:	3a000007 	bcc	cccc <CDWHCITransferStageData::GetEndpointType() const+0x44>
    ccac:	e3500002 	cmp	r0, #2
    ccb0:	1a000001 	bne	ccbc <CDWHCITransferStageData::GetEndpointType() const+0x34>
    ccb4:	e3a00003 	mov	r0, #3
    ccb8:	e8bd8010 	pop	{r4, pc}
    ccbc:	e59f2030 	ldr	r2, [pc, #48]	; ccf4 <CDWHCITransferStageData::GetEndpointType() const+0x6c>
    ccc0:	e59f1030 	ldr	r1, [pc, #48]	; ccf8 <CDWHCITransferStageData::GetEndpointType() const+0x70>
    ccc4:	e59f0030 	ldr	r0, [pc, #48]	; ccfc <CDWHCITransferStageData::GetEndpointType() const+0x74>
    ccc8:	eb003632 	bl	1a598 <assertion_failed>
    cccc:	e3a00000 	mov	r0, #0
    ccd0:	e8bd8010 	pop	{r4, pc}
    ccd4:	e3a00002 	mov	r0, #2
    ccd8:	e8bd8010 	pop	{r4, pc}
    ccdc:	e59f001c 	ldr	r0, [pc, #28]	; cd00 <CDWHCITransferStageData::GetEndpointType() const+0x78>
    cce0:	e59f201c 	ldr	r2, [pc, #28]	; cd04 <CDWHCITransferStageData::GetEndpointType() const+0x7c>
    cce4:	e59f100c 	ldr	r1, [pc, #12]	; ccf8 <CDWHCITransferStageData::GetEndpointType() const+0x70>
    cce8:	eb00362a 	bl	1a598 <assertion_failed>
    ccec:	e5940018 	ldr	r0, [r4, #24]
    ccf0:	eaffffe9 	b	cc9c <CDWHCITransferStageData::GetEndpointType() const+0x14>
    ccf4:	0000012a 	.word	0x0000012a
    ccf8:	0002468c 	.word	0x0002468c
    ccfc:	00024970 	.word	0x00024970
    cd00:	0002473c 	.word	0x0002473c
    cd04:	00000117 	.word	0x00000117

0000cd08 <CDWHCITransferStageData::GetEndpointNumber() const>:
    cd08:	e5903018 	ldr	r3, [r0, #24]
    cd0c:	e3530000 	cmp	r3, #0
    cd10:	0a000001 	beq	cd1c <CDWHCITransferStageData::GetEndpointNumber() const+0x14>
    cd14:	e1a00003 	mov	r0, r3
    cd18:	ea0005c8 	b	e440 <CUSBEndpoint::GetNumber() const>
    cd1c:	e92d4010 	push	{r4, lr}
    cd20:	e1a04000 	mov	r4, r0
    cd24:	e59f2018 	ldr	r2, [pc, #24]	; cd44 <CDWHCITransferStageData::GetEndpointNumber() const+0x3c>
    cd28:	e59f0018 	ldr	r0, [pc, #24]	; cd48 <CDWHCITransferStageData::GetEndpointNumber() const+0x40>
    cd2c:	e59f1018 	ldr	r1, [pc, #24]	; cd4c <CDWHCITransferStageData::GetEndpointNumber() const+0x44>
    cd30:	eb003618 	bl	1a598 <assertion_failed>
    cd34:	e5943018 	ldr	r3, [r4, #24]
    cd38:	e8bd4010 	pop	{r4, lr}
    cd3c:	e1a00003 	mov	r0, r3
    cd40:	ea0005be 	b	e440 <CUSBEndpoint::GetNumber() const>
    cd44:	00000133 	.word	0x00000133
    cd48:	0002473c 	.word	0x0002473c
    cd4c:	0002468c 	.word	0x0002468c

0000cd50 <CDWHCITransferStageData::GetMaxPacketSize() const>:
    cd50:	e5900020 	ldr	r0, [r0, #32]
    cd54:	e12fff1e 	bx	lr

0000cd58 <CDWHCITransferStageData::GetSpeed() const>:
    cd58:	e5d0001c 	ldrb	r0, [r0, #28]
    cd5c:	e12fff1e 	bx	lr

0000cd60 <CDWHCITransferStageData::GetPID() const>:
    cd60:	e92d4010 	push	{r4, lr}
    cd64:	e1a04000 	mov	r4, r0
    cd68:	e5900018 	ldr	r0, [r0, #24]
    cd6c:	e3500000 	cmp	r0, #0
    cd70:	0a000010 	beq	cdb8 <CDWHCITransferStageData::GetPID() const+0x58>
    cd74:	e5d41009 	ldrb	r1, [r4, #9]
    cd78:	eb0005c7 	bl	e49c <CUSBEndpoint::GetNextPID(bool)>
    cd7c:	e3500001 	cmp	r0, #1
    cd80:	0a00000a 	beq	cdb0 <CDWHCITransferStageData::GetPID() const+0x50>
    cd84:	3a000007 	bcc	cda8 <CDWHCITransferStageData::GetPID() const+0x48>
    cd88:	e3500002 	cmp	r0, #2
    cd8c:	08bd8010 	popeq	{r4, pc}
    cd90:	e59f2038 	ldr	r2, [pc, #56]	; cdd0 <CDWHCITransferStageData::GetPID() const+0x70>
    cd94:	e59f1038 	ldr	r1, [pc, #56]	; cdd4 <CDWHCITransferStageData::GetPID() const+0x74>
    cd98:	e59f0038 	ldr	r0, [pc, #56]	; cdd8 <CDWHCITransferStageData::GetPID() const+0x78>
    cd9c:	eb0035fd 	bl	1a598 <assertion_failed>
    cda0:	e3a00000 	mov	r0, #0
    cda4:	e8bd8010 	pop	{r4, pc}
    cda8:	e3a00003 	mov	r0, #3
    cdac:	e8bd8010 	pop	{r4, pc}
    cdb0:	e3a00000 	mov	r0, #0
    cdb4:	e8bd8010 	pop	{r4, pc}
    cdb8:	e59f001c 	ldr	r0, [pc, #28]	; cddc <CDWHCITransferStageData::GetPID() const+0x7c>
    cdbc:	e59f201c 	ldr	r2, [pc, #28]	; cde0 <CDWHCITransferStageData::GetPID() const+0x80>
    cdc0:	e59f100c 	ldr	r1, [pc, #12]	; cdd4 <CDWHCITransferStageData::GetPID() const+0x74>
    cdc4:	eb0035f3 	bl	1a598 <assertion_failed>
    cdc8:	e5940018 	ldr	r0, [r4, #24]
    cdcc:	eaffffe8 	b	cd74 <CDWHCITransferStageData::GetPID() const+0x14>
    cdd0:	00000156 	.word	0x00000156
    cdd4:	0002468c 	.word	0x0002468c
    cdd8:	00024970 	.word	0x00024970
    cddc:	0002473c 	.word	0x0002473c
    cde0:	00000143 	.word	0x00000143

0000cde4 <CDWHCITransferStageData::IsDirectionIn() const>:
    cde4:	e5d00008 	ldrb	r0, [r0, #8]
    cde8:	e12fff1e 	bx	lr

0000cdec <CDWHCITransferStageData::IsStatusStage() const>:
    cdec:	e5d00009 	ldrb	r0, [r0, #9]
    cdf0:	e12fff1e 	bx	lr

0000cdf4 <CDWHCITransferStageData::GetDMAAddress() const>:
    cdf4:	e5903048 	ldr	r3, [r0, #72]	; 0x48
    cdf8:	e3530000 	cmp	r3, #0
    cdfc:	0a000001 	beq	ce08 <CDWHCITransferStageData::GetDMAAddress() const+0x14>
    ce00:	e1a00003 	mov	r0, r3
    ce04:	e12fff1e 	bx	lr
    ce08:	e92d4010 	push	{r4, lr}
    ce0c:	e1a04000 	mov	r4, r0
    ce10:	e59f2014 	ldr	r2, [pc, #20]	; ce2c <CDWHCITransferStageData::GetDMAAddress() const+0x38>
    ce14:	e59f1014 	ldr	r1, [pc, #20]	; ce30 <CDWHCITransferStageData::GetDMAAddress() const+0x3c>
    ce18:	e59f0014 	ldr	r0, [pc, #20]	; ce34 <CDWHCITransferStageData::GetDMAAddress() const+0x40>
    ce1c:	eb0035dd 	bl	1a598 <assertion_failed>
    ce20:	e5943048 	ldr	r3, [r4, #72]	; 0x48
    ce24:	e1a00003 	mov	r0, r3
    ce28:	e8bd8010 	pop	{r4, pc}
    ce2c:	00000169 	.word	0x00000169
    ce30:	0002468c 	.word	0x0002468c
    ce34:	00024780 	.word	0x00024780

0000ce38 <CDWHCITransferStageData::GetBytesToTransfer() const>:
    ce38:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    ce3c:	e12fff1e 	bx	lr

0000ce40 <CDWHCITransferStageData::GetPacketsToTransfer() const>:
    ce40:	e5900030 	ldr	r0, [r0, #48]	; 0x30
    ce44:	e12fff1e 	bx	lr

0000ce48 <CDWHCITransferStageData::IsSplit() const>:
    ce48:	e5d00010 	ldrb	r0, [r0, #16]
    ce4c:	e12fff1e 	bx	lr

0000ce50 <CDWHCITransferStageData::IsSplitComplete() const>:
    ce50:	e5d03010 	ldrb	r3, [r0, #16]
    ce54:	e92d4010 	push	{r4, lr}
    ce58:	e3530000 	cmp	r3, #0
    ce5c:	e1a04000 	mov	r4, r0
    ce60:	1a000003 	bne	ce74 <CDWHCITransferStageData::IsSplitComplete() const+0x24>
    ce64:	e59f2010 	ldr	r2, [pc, #16]	; ce7c <CDWHCITransferStageData::IsSplitComplete() const+0x2c>
    ce68:	e59f1010 	ldr	r1, [pc, #16]	; ce80 <CDWHCITransferStageData::IsSplitComplete() const+0x30>
    ce6c:	e59f0010 	ldr	r0, [pc, #16]	; ce84 <CDWHCITransferStageData::IsSplitComplete() const+0x34>
    ce70:	eb0035c8 	bl	1a598 <assertion_failed>
    ce74:	e5d40011 	ldrb	r0, [r4, #17]
    ce78:	e8bd8010 	pop	{r4, pc}
    ce7c:	0000017f 	.word	0x0000017f
    ce80:	0002468c 	.word	0x0002468c
    ce84:	00024728 	.word	0x00024728

0000ce88 <CDWHCITransferStageData::GetHubAddress() const>:
    ce88:	e5d03010 	ldrb	r3, [r0, #16]
    ce8c:	e92d4010 	push	{r4, lr}
    ce90:	e3530000 	cmp	r3, #0
    ce94:	e1a04000 	mov	r4, r0
    ce98:	0a000004 	beq	ceb0 <CDWHCITransferStageData::GetHubAddress() const+0x28>
    ce9c:	e5940014 	ldr	r0, [r4, #20]
    cea0:	e3500000 	cmp	r0, #0
    cea4:	0a000008 	beq	cecc <CDWHCITransferStageData::GetHubAddress() const+0x44>
    cea8:	e8bd4010 	pop	{r4, lr}
    ceac:	ea0001fb 	b	d6a0 <CUSBDevice::GetHubAddress() const>
    ceb0:	e59f0030 	ldr	r0, [pc, #48]	; cee8 <CDWHCITransferStageData::GetHubAddress() const+0x60>
    ceb4:	e59f2030 	ldr	r2, [pc, #48]	; ceec <CDWHCITransferStageData::GetHubAddress() const+0x64>
    ceb8:	e59f1030 	ldr	r1, [pc, #48]	; cef0 <CDWHCITransferStageData::GetHubAddress() const+0x68>
    cebc:	eb0035b5 	bl	1a598 <assertion_failed>
    cec0:	e5940014 	ldr	r0, [r4, #20]
    cec4:	e3500000 	cmp	r0, #0
    cec8:	1afffff6 	bne	cea8 <CDWHCITransferStageData::GetHubAddress() const+0x20>
    cecc:	e59f0020 	ldr	r0, [pc, #32]	; cef4 <CDWHCITransferStageData::GetHubAddress() const+0x6c>
    ced0:	e3a02f62 	mov	r2, #392	; 0x188
    ced4:	e59f1014 	ldr	r1, [pc, #20]	; cef0 <CDWHCITransferStageData::GetHubAddress() const+0x68>
    ced8:	eb0035ae 	bl	1a598 <assertion_failed>
    cedc:	e5940014 	ldr	r0, [r4, #20]
    cee0:	e8bd4010 	pop	{r4, lr}
    cee4:	ea0001ed 	b	d6a0 <CUSBDevice::GetHubAddress() const>
    cee8:	00024728 	.word	0x00024728
    ceec:	00000186 	.word	0x00000186
    cef0:	0002468c 	.word	0x0002468c
    cef4:	0002475c 	.word	0x0002475c

0000cef8 <CDWHCITransferStageData::GetHubPortAddress() const>:
    cef8:	e5d03010 	ldrb	r3, [r0, #16]
    cefc:	e92d4010 	push	{r4, lr}
    cf00:	e3530000 	cmp	r3, #0
    cf04:	e1a04000 	mov	r4, r0
    cf08:	0a000004 	beq	cf20 <CDWHCITransferStageData::GetHubPortAddress() const+0x28>
    cf0c:	e5940014 	ldr	r0, [r4, #20]
    cf10:	e3500000 	cmp	r0, #0
    cf14:	0a000008 	beq	cf3c <CDWHCITransferStageData::GetHubPortAddress() const+0x44>
    cf18:	e8bd4010 	pop	{r4, lr}
    cf1c:	ea0001e1 	b	d6a8 <CUSBDevice::GetHubPortNumber() const>
    cf20:	e59f0030 	ldr	r0, [pc, #48]	; cf58 <CDWHCITransferStageData::GetHubPortAddress() const+0x60>
    cf24:	e59f2030 	ldr	r2, [pc, #48]	; cf5c <CDWHCITransferStageData::GetHubPortAddress() const+0x64>
    cf28:	e59f1030 	ldr	r1, [pc, #48]	; cf60 <CDWHCITransferStageData::GetHubPortAddress() const+0x68>
    cf2c:	eb003599 	bl	1a598 <assertion_failed>
    cf30:	e5940014 	ldr	r0, [r4, #20]
    cf34:	e3500000 	cmp	r0, #0
    cf38:	1afffff6 	bne	cf18 <CDWHCITransferStageData::GetHubPortAddress() const+0x20>
    cf3c:	e59f0020 	ldr	r0, [pc, #32]	; cf64 <CDWHCITransferStageData::GetHubPortAddress() const+0x6c>
    cf40:	e3a02e19 	mov	r2, #400	; 0x190
    cf44:	e59f1014 	ldr	r1, [pc, #20]	; cf60 <CDWHCITransferStageData::GetHubPortAddress() const+0x68>
    cf48:	eb003592 	bl	1a598 <assertion_failed>
    cf4c:	e5940014 	ldr	r0, [r4, #20]
    cf50:	e8bd4010 	pop	{r4, lr}
    cf54:	ea0001d3 	b	d6a8 <CUSBDevice::GetHubPortNumber() const>
    cf58:	00024728 	.word	0x00024728
    cf5c:	0000018e 	.word	0x0000018e
    cf60:	0002468c 	.word	0x0002468c
    cf64:	0002475c 	.word	0x0002475c

0000cf68 <CDWHCITransferStageData::GetSplitPosition() const>:
    cf68:	e3a00003 	mov	r0, #3
    cf6c:	e12fff1e 	bx	lr

0000cf70 <CDWHCITransferStageData::GetStatusMask() const>:
    cf70:	e5d03010 	ldrb	r3, [r0, #16]
    cf74:	e3530000 	cmp	r3, #0
    cf78:	0a000001 	beq	cf84 <CDWHCITransferStageData::GetStatusMask() const+0x14>
    cf7c:	e59f0018 	ldr	r0, [pc, #24]	; cf9c <CDWHCITransferStageData::GetStatusMask() const+0x2c>
    cf80:	e12fff1e 	bx	lr
    cf84:	e92d4010 	push	{r4, lr}
    cf88:	ebfffe50 	bl	c8d0 <CDWHCITransferStageData::IsPeriodic() const>
    cf8c:	e3500000 	cmp	r0, #0
    cf90:	059f0008 	ldreq	r0, [pc, #8]	; cfa0 <CDWHCITransferStageData::GetStatusMask() const+0x30>
    cf94:	159f0000 	ldrne	r0, [pc]	; cf9c <CDWHCITransferStageData::GetStatusMask() const+0x2c>
    cf98:	e8bd8010 	pop	{r4, pc}
    cf9c:	000007ff 	.word	0x000007ff
    cfa0:	0000078f 	.word	0x0000078f

0000cfa4 <CDWHCITransferStageData::GetTransactionStatus() const>:
    cfa4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    cfa8:	e3530000 	cmp	r3, #0
    cfac:	0a000001 	beq	cfb8 <CDWHCITransferStageData::GetTransactionStatus() const+0x14>
    cfb0:	e1a00003 	mov	r0, r3
    cfb4:	e12fff1e 	bx	lr
    cfb8:	e92d4010 	push	{r4, lr}
    cfbc:	e1a04000 	mov	r4, r0
    cfc0:	e59f2014 	ldr	r2, [pc, #20]	; cfdc <CDWHCITransferStageData::GetTransactionStatus() const+0x38>
    cfc4:	e59f1014 	ldr	r1, [pc, #20]	; cfe0 <CDWHCITransferStageData::GetTransactionStatus() const+0x3c>
    cfc8:	e59f0014 	ldr	r0, [pc, #20]	; cfe4 <CDWHCITransferStageData::GetTransactionStatus() const+0x40>
    cfcc:	eb003571 	bl	1a598 <assertion_failed>
    cfd0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    cfd4:	e1a00003 	mov	r0, r3
    cfd8:	e8bd8010 	pop	{r4, pc}
    cfdc:	000001ad 	.word	0x000001ad
    cfe0:	0002468c 	.word	0x0002468c
    cfe4:	00024808 	.word	0x00024808

0000cfe8 <CDWHCITransferStageData::IsStageComplete() const>:
    cfe8:	e5900028 	ldr	r0, [r0, #40]	; 0x28
    cfec:	e16f0f10 	clz	r0, r0
    cff0:	e1a002a0 	lsr	r0, r0, #5
    cff4:	e12fff1e 	bx	lr

0000cff8 <CDWHCITransferStageData::GetResultLen() const>:
    cff8:	e5902034 	ldr	r2, [r0, #52]	; 0x34
    cffc:	e5900024 	ldr	r0, [r0, #36]	; 0x24
    d000:	e1520000 	cmp	r2, r0
    d004:	31a00002 	movcc	r0, r2
    d008:	e12fff1e 	bx	lr

0000d00c <CDWHCITransferStageData::IsTimeout() const>:
    d00c:	e590300c 	ldr	r3, [r0, #12]
    d010:	e3530000 	cmp	r3, #0
    d014:	1a000001 	bne	d020 <CDWHCITransferStageData::IsTimeout() const+0x14>
    d018:	e1a00003 	mov	r0, r3
    d01c:	e12fff1e 	bx	lr
    d020:	e92d4010 	push	{r4, lr}
    d024:	e1a04000 	mov	r4, r0
    d028:	eb0051ae 	bl	216e8 <CTimer::Get()>
    d02c:	eb004ee6 	bl	20bcc <CTimer::GetTicks() const>
    d030:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    d034:	e594200c 	ldr	r2, [r4, #12]
    d038:	e0400003 	sub	r0, r0, r3
    d03c:	e1500002 	cmp	r0, r2
    d040:	33a00000 	movcc	r0, #0
    d044:	23a00001 	movcs	r0, #1
    d048:	e8bd8010 	pop	{r4, pc}

0000d04c <CDWHCITransferStageData::GetURB() const>:
    d04c:	e5903004 	ldr	r3, [r0, #4]
    d050:	e3530000 	cmp	r3, #0
    d054:	0a000001 	beq	d060 <CDWHCITransferStageData::GetURB() const+0x14>
    d058:	e1a00003 	mov	r0, r3
    d05c:	e12fff1e 	bx	lr
    d060:	e92d4010 	push	{r4, lr}
    d064:	e1a04000 	mov	r4, r0
    d068:	e3a02f73 	mov	r2, #460	; 0x1cc
    d06c:	e59f1010 	ldr	r1, [pc, #16]	; d084 <CDWHCITransferStageData::GetURB() const+0x38>
    d070:	e59f0010 	ldr	r0, [pc, #16]	; d088 <CDWHCITransferStageData::GetURB() const+0x3c>
    d074:	eb003547 	bl	1a598 <assertion_failed>
    d078:	e5943004 	ldr	r3, [r4, #4]
    d07c:	e1a00003 	mov	r0, r3
    d080:	e8bd8010 	pop	{r4, pc}
    d084:	0002468c 	.word	0x0002468c
    d088:	00024750 	.word	0x00024750

0000d08c <CDWHCITransferStageData::GetFrameScheduler() const>:
    d08c:	e5900050 	ldr	r0, [r0, #80]	; 0x50
    d090:	e12fff1e 	bx	lr

0000d094 <CDWHCITransferStageData::operator new(unsigned int)>:
    d094:	e3500054 	cmp	r0, #84	; 0x54
    d098:	e92d4010 	push	{r4, lr}
    d09c:	0a000003 	beq	d0b0 <CDWHCITransferStageData::operator new(unsigned int)+0x1c>
    d0a0:	e59f203c 	ldr	r2, [pc, #60]	; d0e4 <CDWHCITransferStageData::operator new(unsigned int)+0x50>
    d0a4:	e59f103c 	ldr	r1, [pc, #60]	; d0e8 <CDWHCITransferStageData::operator new(unsigned int)+0x54>
    d0a8:	e59f003c 	ldr	r0, [pc, #60]	; d0ec <CDWHCITransferStageData::operator new(unsigned int)+0x58>
    d0ac:	eb003539 	bl	1a598 <assertion_failed>
    d0b0:	e59f4038 	ldr	r4, [pc, #56]	; d0f0 <CDWHCITransferStageData::operator new(unsigned int)+0x5c>
    d0b4:	e5940000 	ldr	r0, [r4]
    d0b8:	e3500000 	cmp	r0, #0
    d0bc:	0a000001 	beq	d0c8 <CDWHCITransferStageData::operator new(unsigned int)+0x34>
    d0c0:	e8bd4010 	pop	{r4, lr}
    d0c4:	ea003651 	b	1aa10 <CClassAllocator::Allocate()>
    d0c8:	e59f0024 	ldr	r0, [pc, #36]	; d0f4 <CDWHCITransferStageData::operator new(unsigned int)+0x60>
    d0cc:	e59f2010 	ldr	r2, [pc, #16]	; d0e4 <CDWHCITransferStageData::operator new(unsigned int)+0x50>
    d0d0:	e59f1010 	ldr	r1, [pc, #16]	; d0e8 <CDWHCITransferStageData::operator new(unsigned int)+0x54>
    d0d4:	eb00352f 	bl	1a598 <assertion_failed>
    d0d8:	e5940000 	ldr	r0, [r4]
    d0dc:	e8bd4010 	pop	{r4, lr}
    d0e0:	ea00364a 	b	1aa10 <CClassAllocator::Allocate()>
    d0e4:	000001d5 	.word	0x000001d5
    d0e8:	0002468c 	.word	0x0002468c
    d0ec:	00024824 	.word	0x00024824
    d0f0:	0002b260 	.word	0x0002b260
    d0f4:	00024850 	.word	0x00024850

0000d0f8 <CDWHCITransferStageData::operator delete(void*, unsigned int)>:
    d0f8:	e3510054 	cmp	r1, #84	; 0x54
    d0fc:	e92d4070 	push	{r4, r5, r6, lr}
    d100:	e1a05000 	mov	r5, r0
    d104:	0a000003 	beq	d118 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x20>
    d108:	e59f2044 	ldr	r2, [pc, #68]	; d154 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x5c>
    d10c:	e59f1044 	ldr	r1, [pc, #68]	; d158 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x60>
    d110:	e59f0044 	ldr	r0, [pc, #68]	; d15c <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x64>
    d114:	eb00351f 	bl	1a598 <assertion_failed>
    d118:	e59f4040 	ldr	r4, [pc, #64]	; d160 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x68>
    d11c:	e5940000 	ldr	r0, [r4]
    d120:	e3500000 	cmp	r0, #0
    d124:	0a000002 	beq	d134 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x3c>
    d128:	e1a01005 	mov	r1, r5
    d12c:	e8bd4070 	pop	{r4, r5, r6, lr}
    d130:	ea003671 	b	1aafc <CClassAllocator::Free(void*)>
    d134:	e59f101c 	ldr	r1, [pc, #28]	; d158 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x60>
    d138:	e59f0024 	ldr	r0, [pc, #36]	; d164 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x6c>
    d13c:	e59f2010 	ldr	r2, [pc, #16]	; d154 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x5c>
    d140:	eb003514 	bl	1a598 <assertion_failed>
    d144:	e5940000 	ldr	r0, [r4]
    d148:	e1a01005 	mov	r1, r5
    d14c:	e8bd4070 	pop	{r4, r5, r6, lr}
    d150:	ea003669 	b	1aafc <CClassAllocator::Free(void*)>
    d154:	000001d5 	.word	0x000001d5
    d158:	0002468c 	.word	0x0002468c
    d15c:	00024824 	.word	0x00024824
    d160:	0002b260 	.word	0x0002b260
    d164:	00024850 	.word	0x00024850

0000d168 <CDWHCITransferStageData::InitAllocator(unsigned int)>:
    d168:	e92d4070 	push	{r4, r5, r6, lr}
    d16c:	e59f4040 	ldr	r4, [pc, #64]	; d1b4 <CDWHCITransferStageData::InitAllocator(unsigned int)+0x4c>
    d170:	e1a06000 	mov	r6, r0
    d174:	e5943000 	ldr	r3, [r4]
    d178:	e3530000 	cmp	r3, #0
    d17c:	0a000003 	beq	d190 <CDWHCITransferStageData::InitAllocator(unsigned int)+0x28>
    d180:	e59f2030 	ldr	r2, [pc, #48]	; d1b8 <CDWHCITransferStageData::InitAllocator(unsigned int)+0x50>
    d184:	e59f1030 	ldr	r1, [pc, #48]	; d1bc <CDWHCITransferStageData::InitAllocator(unsigned int)+0x54>
    d188:	e59f0030 	ldr	r0, [pc, #48]	; d1c0 <CDWHCITransferStageData::InitAllocator(unsigned int)+0x58>
    d18c:	eb003501 	bl	1a598 <assertion_failed>
    d190:	e3a0001c 	mov	r0, #28
    d194:	eb0055d0 	bl	228dc <operator new(unsigned int)>
    d198:	e1a05000 	mov	r5, r0
    d19c:	e1a02006 	mov	r2, r6
    d1a0:	e59f301c 	ldr	r3, [pc, #28]	; d1c4 <CDWHCITransferStageData::InitAllocator(unsigned int)+0x5c>
    d1a4:	e3a01054 	mov	r1, #84	; 0x54
    d1a8:	eb0035ff 	bl	1a9ac <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
    d1ac:	e5845000 	str	r5, [r4]
    d1b0:	e8bd8070 	pop	{r4, r5, r6, pc}
    d1b4:	0002b260 	.word	0x0002b260
    d1b8:	000001d5 	.word	0x000001d5
    d1bc:	0002468c 	.word	0x0002468c
    d1c0:	00024864 	.word	0x00024864
    d1c4:	00024878 	.word	0x00024878

0000d1c8 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)>:
    d1c8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    d1cc:	e59f4054 	ldr	r4, [pc, #84]	; d228 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)+0x60>
    d1d0:	e24dd00c 	sub	sp, sp, #12
    d1d4:	e5943000 	ldr	r3, [r4]
    d1d8:	e1a06000 	mov	r6, r0
    d1dc:	e3530000 	cmp	r3, #0
    d1e0:	e1a07001 	mov	r7, r1
    d1e4:	0a000003 	beq	d1f8 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)+0x30>
    d1e8:	e59f203c 	ldr	r2, [pc, #60]	; d22c <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)+0x64>
    d1ec:	e59f103c 	ldr	r1, [pc, #60]	; d230 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)+0x68>
    d1f0:	e59f003c 	ldr	r0, [pc, #60]	; d234 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)+0x6c>
    d1f4:	eb0034e7 	bl	1a598 <assertion_failed>
    d1f8:	e3a0001c 	mov	r0, #28
    d1fc:	eb0055b6 	bl	228dc <operator new(unsigned int)>
    d200:	e59f1030 	ldr	r1, [pc, #48]	; d238 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)+0x70>
    d204:	e1a03007 	mov	r3, r7
    d208:	e58d1000 	str	r1, [sp]
    d20c:	e1a02006 	mov	r2, r6
    d210:	e3a01054 	mov	r1, #84	; 0x54
    d214:	e1a05000 	mov	r5, r0
    d218:	eb0035ef 	bl	1a9dc <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
    d21c:	e5845000 	str	r5, [r4]
    d220:	e28dd00c 	add	sp, sp, #12
    d224:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    d228:	0002b260 	.word	0x0002b260
    d22c:	000001d5 	.word	0x000001d5
    d230:	0002468c 	.word	0x0002468c
    d234:	00024864 	.word	0x00024864
    d238:	00024878 	.word	0x00024878

0000d23c <CUSBDevice::~CUSBDevice()>:
    d23c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d240:	e1a04000 	mov	r4, r0
    d244:	e1a07000 	mov	r7, r0
    d248:	e3a06000 	mov	r6, #0
    d24c:	e59f3098 	ldr	r3, [pc, #152]	; d2ec <CUSBDevice::~CUSBDevice()+0xb0>
    d250:	e2805044 	add	r5, r0, #68	; 0x44
    d254:	e484301c 	str	r3, [r4], #28
    d258:	e5940004 	ldr	r0, [r4, #4]
    d25c:	e3500000 	cmp	r0, #0
    d260:	0a000002 	beq	d270 <CUSBDevice::~CUSBDevice()+0x34>
    d264:	e5903000 	ldr	r3, [r0]
    d268:	e5933004 	ldr	r3, [r3, #4]
    d26c:	e12fff33 	blx	r3
    d270:	e5a46004 	str	r6, [r4, #4]!
    d274:	e1540005 	cmp	r4, r5
    d278:	1afffff6 	bne	d258 <CUSBDevice::~CUSBDevice()+0x1c>
    d27c:	e597401c 	ldr	r4, [r7, #28]
    d280:	e3540000 	cmp	r4, #0
    d284:	0a000004 	beq	d29c <CUSBDevice::~CUSBDevice()+0x60>
    d288:	e1a00004 	mov	r0, r4
    d28c:	eb002595 	bl	168e8 <CUSBConfigurationParser::~CUSBConfigurationParser()>
    d290:	e1a00004 	mov	r0, r4
    d294:	e3a0101c 	mov	r1, #28
    d298:	eb005593 	bl	228ec <operator delete(void*, unsigned int)>
    d29c:	e3a04000 	mov	r4, #0
    d2a0:	e3a01009 	mov	r1, #9
    d2a4:	e5970018 	ldr	r0, [r7, #24]
    d2a8:	e587401c 	str	r4, [r7, #28]
    d2ac:	eb00558e 	bl	228ec <operator delete(void*, unsigned int)>
    d2b0:	e5874018 	str	r4, [r7, #24]
    d2b4:	e3a01012 	mov	r1, #18
    d2b8:	e5970014 	ldr	r0, [r7, #20]
    d2bc:	eb00558a 	bl	228ec <operator delete(void*, unsigned int)>
    d2c0:	e597500c 	ldr	r5, [r7, #12]
    d2c4:	e5874014 	str	r4, [r7, #20]
    d2c8:	e1550004 	cmp	r5, r4
    d2cc:	0a000004 	beq	d2e4 <CUSBDevice::~CUSBDevice()+0xa8>
    d2d0:	e1a00005 	mov	r0, r5
    d2d4:	eb000448 	bl	e3fc <CUSBEndpoint::~CUSBEndpoint()>
    d2d8:	e1a00005 	mov	r0, r5
    d2dc:	e3a01014 	mov	r1, #20
    d2e0:	eb005581 	bl	228ec <operator delete(void*, unsigned int)>
    d2e4:	e1a00007 	mov	r0, r7
    d2e8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    d2ec:	00024898 	.word	0x00024898

0000d2f0 <CUSBDevice::~CUSBDevice()>:
    d2f0:	e92d4010 	push	{r4, lr}
    d2f4:	e1a04000 	mov	r4, r0
    d2f8:	ebffffcf 	bl	d23c <CUSBDevice::~CUSBDevice()>
    d2fc:	e1a00004 	mov	r0, r4
    d300:	e3a01048 	mov	r1, #72	; 0x48
    d304:	eb005578 	bl	228ec <operator delete(void*, unsigned int)>
    d308:	e1a00004 	mov	r0, r4
    d30c:	e8bd8010 	pop	{r4, pc}

0000d310 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, bool, unsigned char, unsigned char)>:
    d310:	e92d4070 	push	{r4, r5, r6, lr}
    d314:	e1a04000 	mov	r4, r0
    d318:	e3a00000 	mov	r0, #0
    d31c:	e59fe0bc 	ldr	lr, [pc, #188]	; d3e0 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, bool, unsigned char, unsigned char)+0xd0>
    d320:	e5ddc010 	ldrb	ip, [sp, #16]
    d324:	e5dd5014 	ldrb	r5, [sp, #20]
    d328:	e1510000 	cmp	r1, r0
    d32c:	e5841004 	str	r1, [r4, #4]
    d330:	e5c42009 	strb	r2, [r4, #9]
    d334:	e5c43010 	strb	r3, [r4, #16]
    d338:	e584e000 	str	lr, [r4]
    d33c:	e5c4c011 	strb	ip, [r4, #17]
    d340:	e5c40008 	strb	r0, [r4, #8]
    d344:	e584000c 	str	r0, [r4, #12]
    d348:	e5840014 	str	r0, [r4, #20]
    d34c:	e5840018 	str	r0, [r4, #24]
    d350:	e584001c 	str	r0, [r4, #28]
    d354:	e5c45012 	strb	r5, [r4, #18]
    d358:	0a000014 	beq	d3b0 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, bool, unsigned char, unsigned char)+0xa0>
    d35c:	e3a00014 	mov	r0, #20
    d360:	eb00555d 	bl	228dc <operator new(unsigned int)>
    d364:	e1a06000 	mov	r6, r0
    d368:	e1a01004 	mov	r1, r4
    d36c:	eb000378 	bl	e154 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)>
    d370:	e3550000 	cmp	r5, #0
    d374:	e584600c 	str	r6, [r4, #12]
    d378:	0a000007 	beq	d39c <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, bool, unsigned char, unsigned char)+0x8c>
    d37c:	e3a01000 	mov	r1, #0
    d380:	e284301c 	add	r3, r4, #28
    d384:	e2842044 	add	r2, r4, #68	; 0x44
    d388:	e5a31004 	str	r1, [r3, #4]!
    d38c:	e1520003 	cmp	r2, r3
    d390:	1afffffc 	bne	d388 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, bool, unsigned char, unsigned char)+0x78>
    d394:	e1a00004 	mov	r0, r4
    d398:	e8bd8070 	pop	{r4, r5, r6, pc}
    d39c:	e3a02037 	mov	r2, #55	; 0x37
    d3a0:	e59f103c 	ldr	r1, [pc, #60]	; d3e4 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, bool, unsigned char, unsigned char)+0xd4>
    d3a4:	e59f003c 	ldr	r0, [pc, #60]	; d3e8 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, bool, unsigned char, unsigned char)+0xd8>
    d3a8:	eb00347a 	bl	1a598 <assertion_failed>
    d3ac:	eafffff2 	b	d37c <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, bool, unsigned char, unsigned char)+0x6c>
    d3b0:	e3a02031 	mov	r2, #49	; 0x31
    d3b4:	e59f1028 	ldr	r1, [pc, #40]	; d3e4 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, bool, unsigned char, unsigned char)+0xd4>
    d3b8:	e59f002c 	ldr	r0, [pc, #44]	; d3ec <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, bool, unsigned char, unsigned char)+0xdc>
    d3bc:	eb003475 	bl	1a598 <assertion_failed>
    d3c0:	e594300c 	ldr	r3, [r4, #12]
    d3c4:	e3530000 	cmp	r3, #0
    d3c8:	0affffe3 	beq	d35c <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, bool, unsigned char, unsigned char)+0x4c>
    d3cc:	e3a02033 	mov	r2, #51	; 0x33
    d3d0:	e59f100c 	ldr	r1, [pc, #12]	; d3e4 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, bool, unsigned char, unsigned char)+0xd4>
    d3d4:	e59f0014 	ldr	r0, [pc, #20]	; d3f0 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, bool, unsigned char, unsigned char)+0xe0>
    d3d8:	eb00346e 	bl	1a598 <assertion_failed>
    d3dc:	eaffffde 	b	d35c <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, bool, unsigned char, unsigned char)+0x4c>
    d3e0:	00024898 	.word	0x00024898
    d3e4:	000248b0 	.word	0x000248b0
    d3e8:	000248e4 	.word	0x000248e4
    d3ec:	000248c0 	.word	0x000248c0
    d3f0:	000248d0 	.word	0x000248d0

0000d3f4 <CUSBDevice::GetName(TDeviceNameSelector) const>:
    d3f4:	e92d4070 	push	{r4, r5, r6, lr}
    d3f8:	e1a06000 	mov	r6, r0
    d3fc:	e24dd008 	sub	sp, sp, #8
    d400:	e3a00010 	mov	r0, #16
    d404:	e1a05001 	mov	r5, r1
    d408:	eb005533 	bl	228dc <operator new(unsigned int)>
    d40c:	e1a04000 	mov	r4, r0
    d410:	eb00491d 	bl	1f88c <CString::CString()>
    d414:	e3550000 	cmp	r5, #0
    d418:	0a00001a 	beq	d488 <CUSBDevice::GetName(TDeviceNameSelector) const+0x94>
    d41c:	e3550001 	cmp	r5, #1
    d420:	0a000009 	beq	d44c <CUSBDevice::GetName(TDeviceNameSelector) const+0x58>
    d424:	e3a02e1a 	mov	r2, #416	; 0x1a0
    d428:	e59f10c4 	ldr	r1, [pc, #196]	; d4f4 <CUSBDevice::GetName(TDeviceNameSelector) const+0x100>
    d42c:	e59f00c4 	ldr	r0, [pc, #196]	; d4f8 <CUSBDevice::GetName(TDeviceNameSelector) const+0x104>
    d430:	eb003458 	bl	1a598 <assertion_failed>
    d434:	e59f10c0 	ldr	r1, [pc, #192]	; d4fc <CUSBDevice::GetName(TDeviceNameSelector) const+0x108>
    d438:	e1a00004 	mov	r0, r4
    d43c:	eb00492e 	bl	1f8fc <CString::operator=(char const*)>
    d440:	e1a00004 	mov	r0, r4
    d444:	e28dd008 	add	sp, sp, #8
    d448:	e8bd8070 	pop	{r4, r5, r6, pc}
    d44c:	e5961014 	ldr	r1, [r6, #20]
    d450:	e3510000 	cmp	r1, #0
    d454:	0a000020 	beq	d4dc <CUSBDevice::GetName(TDeviceNameSelector) const+0xe8>
    d458:	e5d12004 	ldrb	r2, [r1, #4]
    d45c:	e2423001 	sub	r3, r2, #1
    d460:	e6ef3073 	uxtb	r3, r3
    d464:	e35300fd 	cmp	r3, #253	; 0xfd
    d468:	8afffff1 	bhi	d434 <CUSBDevice::GetName(TDeviceNameSelector) const+0x40>
    d46c:	e5d13005 	ldrb	r3, [r1, #5]
    d470:	e5d11006 	ldrb	r1, [r1, #6]
    d474:	e1a00004 	mov	r0, r4
    d478:	e58d1000 	str	r1, [sp]
    d47c:	e59f107c 	ldr	r1, [pc, #124]	; d500 <CUSBDevice::GetName(TDeviceNameSelector) const+0x10c>
    d480:	eb004cef 	bl	20844 <CString::Format(char const*, ...)>
    d484:	eaffffed 	b	d440 <CUSBDevice::GetName(TDeviceNameSelector) const+0x4c>
    d488:	e5961014 	ldr	r1, [r6, #20]
    d48c:	e3510000 	cmp	r1, #0
    d490:	0a00000b 	beq	d4c4 <CUSBDevice::GetName(TDeviceNameSelector) const+0xd0>
    d494:	e5d1000b 	ldrb	r0, [r1, #11]
    d498:	e5d1300a 	ldrb	r3, [r1, #10]
    d49c:	e5d12008 	ldrb	r2, [r1, #8]
    d4a0:	e5d11009 	ldrb	r1, [r1, #9]
    d4a4:	e1833400 	orr	r3, r3, r0, lsl #8
    d4a8:	e1822401 	orr	r2, r2, r1, lsl #8
    d4ac:	e1a00004 	mov	r0, r4
    d4b0:	e59f104c 	ldr	r1, [pc, #76]	; d504 <CUSBDevice::GetName(TDeviceNameSelector) const+0x110>
    d4b4:	eb004ce2 	bl	20844 <CString::Format(char const*, ...)>
    d4b8:	e1a00004 	mov	r0, r4
    d4bc:	e28dd008 	add	sp, sp, #8
    d4c0:	e8bd8070 	pop	{r4, r5, r6, pc}
    d4c4:	e59f1028 	ldr	r1, [pc, #40]	; d4f4 <CUSBDevice::GetName(TDeviceNameSelector) const+0x100>
    d4c8:	e3a02f63 	mov	r2, #396	; 0x18c
    d4cc:	e59f0034 	ldr	r0, [pc, #52]	; d508 <CUSBDevice::GetName(TDeviceNameSelector) const+0x114>
    d4d0:	eb003430 	bl	1a598 <assertion_failed>
    d4d4:	e5961014 	ldr	r1, [r6, #20]
    d4d8:	eaffffed 	b	d494 <CUSBDevice::GetName(TDeviceNameSelector) const+0xa0>
    d4dc:	e59f1010 	ldr	r1, [pc, #16]	; d4f4 <CUSBDevice::GetName(TDeviceNameSelector) const+0x100>
    d4e0:	e59f2024 	ldr	r2, [pc, #36]	; d50c <CUSBDevice::GetName(TDeviceNameSelector) const+0x118>
    d4e4:	e59f001c 	ldr	r0, [pc, #28]	; d508 <CUSBDevice::GetName(TDeviceNameSelector) const+0x114>
    d4e8:	eb00342a 	bl	1a598 <assertion_failed>
    d4ec:	e5961014 	ldr	r1, [r6, #20]
    d4f0:	eaffffd8 	b	d458 <CUSBDevice::GetName(TDeviceNameSelector) const+0x64>
    d4f4:	000248b0 	.word	0x000248b0
    d4f8:	00024970 	.word	0x00024970
    d4fc:	00024928 	.word	0x00024928
    d500:	0002491c 	.word	0x0002491c
    d504:	00024910 	.word	0x00024910
    d508:	000248fc 	.word	0x000248fc
    d50c:	00000193 	.word	0x00000193

0000d510 <CUSBDevice::GetNames() const>:
    d510:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d514:	e1a07000 	mov	r7, r0
    d518:	e3a00010 	mov	r0, #16
    d51c:	eb0054ee 	bl	228dc <operator new(unsigned int)>
    d520:	e3a04000 	mov	r4, #0
    d524:	e1a06000 	mov	r6, r0
    d528:	e1a0b004 	mov	fp, r4
    d52c:	eb0048d6 	bl	1f88c <CString::CString()>
    d530:	e59f8104 	ldr	r8, [pc, #260]	; d63c <CUSBDevice::GetNames() const+0x12c>
    d534:	e59f9104 	ldr	r9, [pc, #260]	; d640 <CUSBDevice::GetNames() const+0x130>
    d538:	e59fa104 	ldr	sl, [pc, #260]	; d644 <CUSBDevice::GetNames() const+0x134>
    d53c:	e6ef1074 	uxtb	r1, r4
    d540:	e1a00007 	mov	r0, r7
    d544:	ebffffaa 	bl	d3f4 <CUSBDevice::GetName(TDeviceNameSelector) const>
    d548:	e2505000 	subs	r5, r0, #0
    d54c:	0a000028 	beq	d5f4 <CUSBDevice::GetNames() const+0xe4>
    d550:	e1a01008 	mov	r1, r8
    d554:	eb004935 	bl	1fa30 <CString::Compare(char const*) const>
    d558:	e3500000 	cmp	r0, #0
    d55c:	1a00000f 	bne	d5a0 <CUSBDevice::GetNames() const+0x90>
    d560:	e5953000 	ldr	r3, [r5]
    d564:	e1a00005 	mov	r0, r5
    d568:	e5933004 	ldr	r3, [r3, #4]
    d56c:	e12fff33 	blx	r3
    d570:	e2844001 	add	r4, r4, #1
    d574:	e3540002 	cmp	r4, #2
    d578:	1affffef 	bne	d53c <CUSBDevice::GetNames() const+0x2c>
    d57c:	e1a00006 	mov	r0, r6
    d580:	eb004905 	bl	1f99c <CString::GetLength() const>
    d584:	e3500000 	cmp	r0, #0
    d588:	1a000002 	bne	d598 <CUSBDevice::GetNames() const+0x88>
    d58c:	e59f10a8 	ldr	r1, [pc, #168]	; d63c <CUSBDevice::GetNames() const+0x12c>
    d590:	e1a00006 	mov	r0, r6
    d594:	eb0048d8 	bl	1f8fc <CString::operator=(char const*)>
    d598:	e1a00006 	mov	r0, r6
    d59c:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d5a0:	e1a00006 	mov	r0, r6
    d5a4:	eb0048fc 	bl	1f99c <CString::GetLength() const>
    d5a8:	e3500000 	cmp	r0, #0
    d5ac:	0a00000a 	beq	d5dc <CUSBDevice::GetNames() const+0xcc>
    d5b0:	e1a01009 	mov	r1, r9
    d5b4:	e1a00006 	mov	r0, r6
    d5b8:	eb0048fb 	bl	1f9ac <CString::Append(char const*)>
    d5bc:	e1a00005 	mov	r0, r5
    d5c0:	eb0048c7 	bl	1f8e4 <CString::operator char const*() const>
    d5c4:	e1a01000 	mov	r1, r0
    d5c8:	e1a00006 	mov	r0, r6
    d5cc:	eb0048f6 	bl	1f9ac <CString::Append(char const*)>
    d5d0:	e3550000 	cmp	r5, #0
    d5d4:	0affffe5 	beq	d570 <CUSBDevice::GetNames() const+0x60>
    d5d8:	eaffffe0 	b	d560 <CUSBDevice::GetNames() const+0x50>
    d5dc:	e1a00005 	mov	r0, r5
    d5e0:	eb0048bf 	bl	1f8e4 <CString::operator char const*() const>
    d5e4:	e1a01000 	mov	r1, r0
    d5e8:	e1a00006 	mov	r0, r6
    d5ec:	eb0048ee 	bl	1f9ac <CString::Append(char const*)>
    d5f0:	eaffffda 	b	d560 <CUSBDevice::GetNames() const+0x50>
    d5f4:	e1a0200a 	mov	r2, sl
    d5f8:	e59f1048 	ldr	r1, [pc, #72]	; d648 <CUSBDevice::GetNames() const+0x138>
    d5fc:	e59f0048 	ldr	r0, [pc, #72]	; d64c <CUSBDevice::GetNames() const+0x13c>
    d600:	eb0033e4 	bl	1a598 <assertion_failed>
    d604:	e1a01008 	mov	r1, r8
    d608:	e1a0000b 	mov	r0, fp
    d60c:	eb004907 	bl	1fa30 <CString::Compare(char const*) const>
    d610:	e3500000 	cmp	r0, #0
    d614:	0affffd5 	beq	d570 <CUSBDevice::GetNames() const+0x60>
    d618:	e1a00006 	mov	r0, r6
    d61c:	eb0048de 	bl	1f99c <CString::GetLength() const>
    d620:	e3500000 	cmp	r0, #0
    d624:	1affffe1 	bne	d5b0 <CUSBDevice::GetNames() const+0xa0>
    d628:	eb0048ad 	bl	1f8e4 <CString::operator char const*() const>
    d62c:	e1a01000 	mov	r1, r0
    d630:	e1a00006 	mov	r0, r6
    d634:	eb0048dc 	bl	1f9ac <CString::Append(char const*)>
    d638:	eaffffcc 	b	d570 <CUSBDevice::GetNames() const+0x60>
    d63c:	00024928 	.word	0x00024928
    d640:	0002493c 	.word	0x0002493c
    d644:	000001b1 	.word	0x000001b1
    d648:	000248b0 	.word	0x000248b0
    d64c:	00024930 	.word	0x00024930

0000d650 <CUSBDevice::SetAddress(unsigned char)>:
    d650:	e351007f 	cmp	r1, #127	; 0x7f
    d654:	e92d4070 	push	{r4, r5, r6, lr}
    d658:	e1a04001 	mov	r4, r1
    d65c:	e1a05000 	mov	r5, r0
    d660:	da000003 	ble	d674 <CUSBDevice::SetAddress(unsigned char)+0x24>
    d664:	e59f2010 	ldr	r2, [pc, #16]	; d67c <CUSBDevice::SetAddress(unsigned char)+0x2c>
    d668:	e59f1010 	ldr	r1, [pc, #16]	; d680 <CUSBDevice::SetAddress(unsigned char)+0x30>
    d66c:	e59f0010 	ldr	r0, [pc, #16]	; d684 <CUSBDevice::SetAddress(unsigned char)+0x34>
    d670:	eb0033c8 	bl	1a598 <assertion_failed>
    d674:	e5c54008 	strb	r4, [r5, #8]
    d678:	e8bd8070 	pop	{r4, r5, r6, pc}
    d67c:	000001ca 	.word	0x000001ca
    d680:	000248b0 	.word	0x000248b0
    d684:	00024940 	.word	0x00024940

0000d688 <CUSBDevice::GetAddress() const>:
    d688:	e5d00008 	ldrb	r0, [r0, #8]
    d68c:	e12fff1e 	bx	lr

0000d690 <CUSBDevice::GetSpeed() const>:
    d690:	e5d00009 	ldrb	r0, [r0, #9]
    d694:	e12fff1e 	bx	lr

0000d698 <CUSBDevice::IsSplit() const>:
    d698:	e5d00010 	ldrb	r0, [r0, #16]
    d69c:	e12fff1e 	bx	lr

0000d6a0 <CUSBDevice::GetHubAddress() const>:
    d6a0:	e5d00011 	ldrb	r0, [r0, #17]
    d6a4:	e12fff1e 	bx	lr

0000d6a8 <CUSBDevice::GetHubPortNumber() const>:
    d6a8:	e5d00012 	ldrb	r0, [r0, #18]
    d6ac:	e12fff1e 	bx	lr

0000d6b0 <CUSBDevice::GetEndpoint0() const>:
    d6b0:	e590300c 	ldr	r3, [r0, #12]
    d6b4:	e3530000 	cmp	r3, #0
    d6b8:	0a000001 	beq	d6c4 <CUSBDevice::GetEndpoint0() const+0x14>
    d6bc:	e1a00003 	mov	r0, r3
    d6c0:	e12fff1e 	bx	lr
    d6c4:	e92d4010 	push	{r4, lr}
    d6c8:	e1a04000 	mov	r4, r0
    d6cc:	e59f2014 	ldr	r2, [pc, #20]	; d6e8 <CUSBDevice::GetEndpoint0() const+0x38>
    d6d0:	e59f1014 	ldr	r1, [pc, #20]	; d6ec <CUSBDevice::GetEndpoint0() const+0x3c>
    d6d4:	e59f0014 	ldr	r0, [pc, #20]	; d6f0 <CUSBDevice::GetEndpoint0() const+0x40>
    d6d8:	eb0033ae 	bl	1a598 <assertion_failed>
    d6dc:	e594300c 	ldr	r3, [r4, #12]
    d6e0:	e1a00003 	mov	r0, r3
    d6e4:	e8bd8010 	pop	{r4, pc}
    d6e8:	000001eb 	.word	0x000001eb
    d6ec:	000248b0 	.word	0x000248b0
    d6f0:	00024960 	.word	0x00024960

0000d6f4 <CUSBDevice::GetHost() const>:
    d6f4:	e5903004 	ldr	r3, [r0, #4]
    d6f8:	e3530000 	cmp	r3, #0
    d6fc:	0a000001 	beq	d708 <CUSBDevice::GetHost() const+0x14>
    d700:	e1a00003 	mov	r0, r3
    d704:	e12fff1e 	bx	lr
    d708:	e92d4010 	push	{r4, lr}
    d70c:	e1a04000 	mov	r4, r0
    d710:	e59f2014 	ldr	r2, [pc, #20]	; d72c <CUSBDevice::GetHost() const+0x38>
    d714:	e59f1014 	ldr	r1, [pc, #20]	; d730 <CUSBDevice::GetHost() const+0x3c>
    d718:	e59f0014 	ldr	r0, [pc, #20]	; d734 <CUSBDevice::GetHost() const+0x40>
    d71c:	eb00339d 	bl	1a598 <assertion_failed>
    d720:	e5943004 	ldr	r3, [r4, #4]
    d724:	e1a00003 	mov	r0, r3
    d728:	e8bd8010 	pop	{r4, pc}
    d72c:	000001f1 	.word	0x000001f1
    d730:	000248b0 	.word	0x000248b0
    d734:	000248c0 	.word	0x000248c0

0000d738 <CUSBDevice::GetDeviceDescriptor() const>:
    d738:	e5903014 	ldr	r3, [r0, #20]
    d73c:	e3530000 	cmp	r3, #0
    d740:	0a000001 	beq	d74c <CUSBDevice::GetDeviceDescriptor() const+0x14>
    d744:	e1a00003 	mov	r0, r3
    d748:	e12fff1e 	bx	lr
    d74c:	e92d4010 	push	{r4, lr}
    d750:	e1a04000 	mov	r4, r0
    d754:	e59f2014 	ldr	r2, [pc, #20]	; d770 <CUSBDevice::GetDeviceDescriptor() const+0x38>
    d758:	e59f1014 	ldr	r1, [pc, #20]	; d774 <CUSBDevice::GetDeviceDescriptor() const+0x3c>
    d75c:	e59f0014 	ldr	r0, [pc, #20]	; d778 <CUSBDevice::GetDeviceDescriptor() const+0x40>
    d760:	eb00338c 	bl	1a598 <assertion_failed>
    d764:	e5943014 	ldr	r3, [r4, #20]
    d768:	e1a00003 	mov	r0, r3
    d76c:	e8bd8010 	pop	{r4, pc}
    d770:	000001f7 	.word	0x000001f7
    d774:	000248b0 	.word	0x000248b0
    d778:	000248fc 	.word	0x000248fc

0000d77c <CUSBDevice::GetConfigurationDescriptor() const>:
    d77c:	e5903018 	ldr	r3, [r0, #24]
    d780:	e3530000 	cmp	r3, #0
    d784:	0a000001 	beq	d790 <CUSBDevice::GetConfigurationDescriptor() const+0x14>
    d788:	e1a00003 	mov	r0, r3
    d78c:	e12fff1e 	bx	lr
    d790:	e92d4010 	push	{r4, lr}
    d794:	e1a04000 	mov	r4, r0
    d798:	e59f2014 	ldr	r2, [pc, #20]	; d7b4 <CUSBDevice::GetConfigurationDescriptor() const+0x38>
    d79c:	e59f1014 	ldr	r1, [pc, #20]	; d7b8 <CUSBDevice::GetConfigurationDescriptor() const+0x3c>
    d7a0:	e59f0014 	ldr	r0, [pc, #20]	; d7bc <CUSBDevice::GetConfigurationDescriptor() const+0x40>
    d7a4:	eb00337b 	bl	1a598 <assertion_failed>
    d7a8:	e5943018 	ldr	r3, [r4, #24]
    d7ac:	e1a00003 	mov	r0, r3
    d7b0:	e8bd8010 	pop	{r4, pc}
    d7b4:	000001fd 	.word	0x000001fd
    d7b8:	000248b0 	.word	0x000248b0
    d7bc:	00024974 	.word	0x00024974

0000d7c0 <CUSBDevice::GetDescriptor(unsigned char)>:
    d7c0:	e92d4070 	push	{r4, r5, r6, lr}
    d7c4:	e1a04000 	mov	r4, r0
    d7c8:	e590001c 	ldr	r0, [r0, #28]
    d7cc:	e1a05001 	mov	r5, r1
    d7d0:	e3500000 	cmp	r0, #0
    d7d4:	0a000002 	beq	d7e4 <CUSBDevice::GetDescriptor(unsigned char)+0x24>
    d7d8:	e1a01005 	mov	r1, r5
    d7dc:	e8bd4070 	pop	{r4, r5, r6, lr}
    d7e0:	ea002443 	b	168f4 <CUSBConfigurationParser::GetDescriptor(unsigned char)>
    d7e4:	e59f1018 	ldr	r1, [pc, #24]	; d804 <CUSBDevice::GetDescriptor(unsigned char)+0x44>
    d7e8:	e59f0018 	ldr	r0, [pc, #24]	; d808 <CUSBDevice::GetDescriptor(unsigned char)+0x48>
    d7ec:	e59f2018 	ldr	r2, [pc, #24]	; d80c <CUSBDevice::GetDescriptor(unsigned char)+0x4c>
    d7f0:	eb003368 	bl	1a598 <assertion_failed>
    d7f4:	e594001c 	ldr	r0, [r4, #28]
    d7f8:	e1a01005 	mov	r1, r5
    d7fc:	e8bd4070 	pop	{r4, r5, r6, lr}
    d800:	ea00243b 	b	168f4 <CUSBConfigurationParser::GetDescriptor(unsigned char)>
    d804:	000248b0 	.word	0x000248b0
    d808:	00024988 	.word	0x00024988
    d80c:	00000203 	.word	0x00000203

0000d810 <CUSBDevice::ConfigurationError(char const*) const>:
    d810:	e92d4070 	push	{r4, r5, r6, lr}
    d814:	e1a04000 	mov	r4, r0
    d818:	e590001c 	ldr	r0, [r0, #28]
    d81c:	e1a05001 	mov	r5, r1
    d820:	e3500000 	cmp	r0, #0
    d824:	0a000002 	beq	d834 <CUSBDevice::ConfigurationError(char const*) const+0x24>
    d828:	e1a01005 	mov	r1, r5
    d82c:	e8bd4070 	pop	{r4, r5, r6, lr}
    d830:	ea00247d 	b	16a2c <CUSBConfigurationParser::Error(char const*) const>
    d834:	e59f1018 	ldr	r1, [pc, #24]	; d854 <CUSBDevice::ConfigurationError(char const*) const+0x44>
    d838:	e59f0018 	ldr	r0, [pc, #24]	; d858 <CUSBDevice::ConfigurationError(char const*) const+0x48>
    d83c:	e59f2018 	ldr	r2, [pc, #24]	; d85c <CUSBDevice::ConfigurationError(char const*) const+0x4c>
    d840:	eb003354 	bl	1a598 <assertion_failed>
    d844:	e594001c 	ldr	r0, [r4, #28]
    d848:	e1a01005 	mov	r1, r5
    d84c:	e8bd4070 	pop	{r4, r5, r6, lr}
    d850:	ea002475 	b	16a2c <CUSBConfigurationParser::Error(char const*) const>
    d854:	000248b0 	.word	0x000248b0
    d858:	00024988 	.word	0x00024988
    d85c:	00000209 	.word	0x00000209

0000d860 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>:
    d860:	e92d000c 	push	{r2, r3}
    d864:	e92d4070 	push	{r4, r5, r6, lr}
    d868:	e24dd020 	sub	sp, sp, #32
    d86c:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
    d870:	e1a05000 	mov	r5, r0
    d874:	e3540000 	cmp	r4, #0
    d878:	e1a06001 	mov	r6, r1
    d87c:	0a00001b 	beq	d8f0 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0x90>
    d880:	e28d0010 	add	r0, sp, #16
    d884:	eb004800 	bl	1f88c <CString::CString()>
    d888:	e5d52012 	ldrb	r2, [r5, #18]
    d88c:	e5d53011 	ldrb	r3, [r5, #17]
    d890:	e59f106c 	ldr	r1, [pc, #108]	; d904 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0xa4>
    d894:	e28d0010 	add	r0, sp, #16
    d898:	e58d2000 	str	r2, [sp]
    d89c:	e59f2064 	ldr	r2, [pc, #100]	; d908 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0xa8>
    d8a0:	eb004be7 	bl	20844 <CString::Format(char const*, ...)>
    d8a4:	e28d3034 	add	r3, sp, #52	; 0x34
    d8a8:	e58d300c 	str	r3, [sp, #12]
    d8ac:	eb003d2c 	bl	1cd64 <CLogger::Get()>
    d8b0:	e1a05000 	mov	r5, r0
    d8b4:	e28d0010 	add	r0, sp, #16
    d8b8:	eb004809 	bl	1f8e4 <CString::operator char const*() const>
    d8bc:	e59dc00c 	ldr	ip, [sp, #12]
    d8c0:	e1a01000 	mov	r1, r0
    d8c4:	e1a03004 	mov	r3, r4
    d8c8:	e1a00005 	mov	r0, r5
    d8cc:	e1a02006 	mov	r2, r6
    d8d0:	e58dc000 	str	ip, [sp]
    d8d4:	eb003e4e 	bl	1d214 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
    d8d8:	e28d0010 	add	r0, sp, #16
    d8dc:	eb0047b7 	bl	1f7c0 <CString::~CString()>
    d8e0:	e28dd020 	add	sp, sp, #32
    d8e4:	e8bd4070 	pop	{r4, r5, r6, lr}
    d8e8:	e28dd008 	add	sp, sp, #8
    d8ec:	e12fff1e 	bx	lr
    d8f0:	e59f2014 	ldr	r2, [pc, #20]	; d90c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0xac>
    d8f4:	e59f1014 	ldr	r1, [pc, #20]	; d910 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0xb0>
    d8f8:	e59f0014 	ldr	r0, [pc, #20]	; d914 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0xb4>
    d8fc:	eb003325 	bl	1a598 <assertion_failed>
    d900:	eaffffde 	b	d880 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0x20>
    d904:	000249b0 	.word	0x000249b0
    d908:	000248a8 	.word	0x000248a8
    d90c:	0000020f 	.word	0x0000020f
    d910:	000248b0 	.word	0x000248b0
    d914:	000249a0 	.word	0x000249a0

0000d918 <CUSBDevice::Initialize()>:
    d918:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d91c:	e5903014 	ldr	r3, [r0, #20]
    d920:	e24dd014 	sub	sp, sp, #20
    d924:	e3530000 	cmp	r3, #0
    d928:	e1a04000 	mov	r4, r0
    d92c:	0a000003 	beq	d940 <CUSBDevice::Initialize()+0x28>
    d930:	e3a02061 	mov	r2, #97	; 0x61
    d934:	e59f168c 	ldr	r1, [pc, #1676]	; dfc8 <CUSBDevice::Initialize()+0x6b0>
    d938:	e59f068c 	ldr	r0, [pc, #1676]	; dfcc <CUSBDevice::Initialize()+0x6b4>
    d93c:	eb003315 	bl	1a598 <assertion_failed>
    d940:	e3a00012 	mov	r0, #18
    d944:	eb0053e4 	bl	228dc <operator new(unsigned int)>
    d948:	e5943004 	ldr	r3, [r4, #4]
    d94c:	e5840014 	str	r0, [r4, #20]
    d950:	e3530000 	cmp	r3, #0
    d954:	0a000080 	beq	db5c <CUSBDevice::Initialize()+0x244>
    d958:	e594100c 	ldr	r1, [r4, #12]
    d95c:	e3510000 	cmp	r1, #0
    d960:	0a000082 	beq	db70 <CUSBDevice::Initialize()+0x258>
    d964:	e3a06000 	mov	r6, #0
    d968:	e3a0c008 	mov	ip, #8
    d96c:	e3a05080 	mov	r5, #128	; 0x80
    d970:	e5942014 	ldr	r2, [r4, #20]
    d974:	e5940004 	ldr	r0, [r4, #4]
    d978:	e1a03006 	mov	r3, r6
    d97c:	e88d1004 	stm	sp, {r2, ip}
    d980:	e58d600c 	str	r6, [sp, #12]
    d984:	e58d5008 	str	r5, [sp, #8]
    d988:	e3a02001 	mov	r2, #1
    d98c:	eb000350 	bl	e6d4 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    d990:	e3500008 	cmp	r0, #8
    d994:	1a000012 	bne	d9e4 <CUSBDevice::Initialize()+0xcc>
    d998:	e5943014 	ldr	r3, [r4, #20]
    d99c:	e5d37000 	ldrb	r7, [r3]
    d9a0:	e3570012 	cmp	r7, #18
    d9a4:	1a000002 	bne	d9b4 <CUSBDevice::Initialize()+0x9c>
    d9a8:	e5d38001 	ldrb	r8, [r3, #1]
    d9ac:	e3580001 	cmp	r8, #1
    d9b0:	0a000017 	beq	da14 <CUSBDevice::Initialize()+0xfc>
    d9b4:	e3a05000 	mov	r5, #0
    d9b8:	e59f2610 	ldr	r2, [pc, #1552]	; dfd0 <CUSBDevice::Initialize()+0x6b8>
    d9bc:	e3a01001 	mov	r1, #1
    d9c0:	e1a00004 	mov	r0, r4
    d9c4:	ebffffa5 	bl	d860 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    d9c8:	e3a01012 	mov	r1, #18
    d9cc:	e5940014 	ldr	r0, [r4, #20]
    d9d0:	eb0053c5 	bl	228ec <operator delete(void*, unsigned int)>
    d9d4:	e5845014 	str	r5, [r4, #20]
    d9d8:	e1a00005 	mov	r0, r5
    d9dc:	e28dd014 	add	sp, sp, #20
    d9e0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d9e4:	e3a01001 	mov	r1, #1
    d9e8:	e59f25e4 	ldr	r2, [pc, #1508]	; dfd4 <CUSBDevice::Initialize()+0x6bc>
    d9ec:	e1a05006 	mov	r5, r6
    d9f0:	e1a00004 	mov	r0, r4
    d9f4:	ebffff99 	bl	d860 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    d9f8:	e5940014 	ldr	r0, [r4, #20]
    d9fc:	e3a01012 	mov	r1, #18
    da00:	eb0053b9 	bl	228ec <operator delete(void*, unsigned int)>
    da04:	e1a00005 	mov	r0, r5
    da08:	e5846014 	str	r6, [r4, #20]
    da0c:	e28dd014 	add	sp, sp, #20
    da10:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    da14:	e5d31007 	ldrb	r1, [r3, #7]
    da18:	e594000c 	ldr	r0, [r4, #12]
    da1c:	eb00028d 	bl	e458 <CUSBEndpoint::SetMaxPacketSize(unsigned int)>
    da20:	e5943014 	ldr	r3, [r4, #20]
    da24:	e594100c 	ldr	r1, [r4, #12]
    da28:	e5940004 	ldr	r0, [r4, #4]
    da2c:	e1a02008 	mov	r2, r8
    da30:	e88d0088 	stm	sp, {r3, r7}
    da34:	e58d600c 	str	r6, [sp, #12]
    da38:	e58d5008 	str	r5, [sp, #8]
    da3c:	e1a03006 	mov	r3, r6
    da40:	eb000323 	bl	e6d4 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    da44:	e3500012 	cmp	r0, #18
    da48:	1a00004e 	bne	db88 <CUSBDevice::Initialize()+0x270>
    da4c:	e59f3584 	ldr	r3, [pc, #1412]	; dfd8 <CUSBDevice::Initialize()+0x6c0>
    da50:	e5d37000 	ldrb	r7, [r3]
    da54:	e2872001 	add	r2, r7, #1
    da58:	e357007f 	cmp	r7, #127	; 0x7f
    da5c:	e5c32000 	strb	r2, [r3]
    da60:	ca00004b 	bgt	db94 <CUSBDevice::Initialize()+0x27c>
    da64:	e1a02007 	mov	r2, r7
    da68:	e594100c 	ldr	r1, [r4, #12]
    da6c:	e5940004 	ldr	r0, [r4, #4]
    da70:	eb000325 	bl	e70c <CUSBHostController::SetAddress(CUSBEndpoint*, unsigned char)>
    da74:	e2505000 	subs	r5, r0, #0
    da78:	0a000055 	beq	dbd4 <CUSBDevice::Initialize()+0x2bc>
    da7c:	e5943018 	ldr	r3, [r4, #24]
    da80:	e5c47008 	strb	r7, [r4, #8]
    da84:	e3530000 	cmp	r3, #0
    da88:	0a000003 	beq	da9c <CUSBDevice::Initialize()+0x184>
    da8c:	e3a020a5 	mov	r2, #165	; 0xa5
    da90:	e59f1530 	ldr	r1, [pc, #1328]	; dfc8 <CUSBDevice::Initialize()+0x6b0>
    da94:	e59f0540 	ldr	r0, [pc, #1344]	; dfdc <CUSBDevice::Initialize()+0x6c4>
    da98:	eb0032be 	bl	1a598 <assertion_failed>
    da9c:	e3a00009 	mov	r0, #9
    daa0:	eb00538d 	bl	228dc <operator new(unsigned int)>
    daa4:	e5942014 	ldr	r2, [r4, #20]
    daa8:	e5840018 	str	r0, [r4, #24]
    daac:	e5d23008 	ldrb	r3, [r2, #8]
    dab0:	e5d2c009 	ldrb	ip, [r2, #9]
    dab4:	e59f1524 	ldr	r1, [pc, #1316]	; dfe0 <CUSBDevice::Initialize()+0x6c8>
    dab8:	e183340c 	orr	r3, r3, ip, lsl #8
    dabc:	e1530001 	cmp	r3, r1
    dac0:	05d2500a 	ldrbeq	r5, [r2, #10]
    dac4:	05d2200b 	ldrbeq	r2, [r2, #11]
    dac8:	059f3514 	ldreq	r3, [pc, #1300]	; dfe4 <CUSBDevice::Initialize()+0x6cc>
    dacc:	01855402 	orreq	r5, r5, r2, lsl #8
    dad0:	00455003 	subeq	r5, r5, r3
    dad4:	016f5f15 	clzeq	r5, r5
    dad8:	13a05000 	movne	r5, #0
    dadc:	e3a07009 	mov	r7, #9
    dae0:	e3a06000 	mov	r6, #0
    dae4:	e3a08080 	mov	r8, #128	; 0x80
    dae8:	e5943004 	ldr	r3, [r4, #4]
    daec:	01a052a5 	lsreq	r5, r5, #5
    daf0:	e594100c 	ldr	r1, [r4, #12]
    daf4:	e3a02002 	mov	r2, #2
    daf8:	e58d0000 	str	r0, [sp]
    dafc:	e58d600c 	str	r6, [sp, #12]
    db00:	e1a00003 	mov	r0, r3
    db04:	e98d0180 	stmib	sp, {r7, r8}
    db08:	e1a03005 	mov	r3, r5
    db0c:	eb0002f0 	bl	e6d4 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    db10:	e1500007 	cmp	r0, r7
    db14:	1a000024 	bne	dbac <CUSBDevice::Initialize()+0x294>
    db18:	e5940018 	ldr	r0, [r4, #24]
    db1c:	e5d07000 	ldrb	r7, [r0]
    db20:	e3570009 	cmp	r7, #9
    db24:	1a000002 	bne	db34 <CUSBDevice::Initialize()+0x21c>
    db28:	e5d09001 	ldrb	r9, [r0, #1]
    db2c:	e3590002 	cmp	r9, #2
    db30:	0a00002d 	beq	dbec <CUSBDevice::Initialize()+0x2d4>
    db34:	e3a05000 	mov	r5, #0
    db38:	e59f24a8 	ldr	r2, [pc, #1192]	; dfe8 <CUSBDevice::Initialize()+0x6d0>
    db3c:	e3a01001 	mov	r1, #1
    db40:	e1a00004 	mov	r0, r4
    db44:	ebffff45 	bl	d860 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    db48:	e3a01009 	mov	r1, #9
    db4c:	e5940018 	ldr	r0, [r4, #24]
    db50:	eb005365 	bl	228ec <operator delete(void*, unsigned int)>
    db54:	e5845018 	str	r5, [r4, #24]
    db58:	eaffff9e 	b	d9d8 <CUSBDevice::Initialize()+0xc0>
    db5c:	e3a02065 	mov	r2, #101	; 0x65
    db60:	e59f1460 	ldr	r1, [pc, #1120]	; dfc8 <CUSBDevice::Initialize()+0x6b0>
    db64:	e59f0480 	ldr	r0, [pc, #1152]	; dfec <CUSBDevice::Initialize()+0x6d4>
    db68:	eb00328a 	bl	1a598 <assertion_failed>
    db6c:	eaffff79 	b	d958 <CUSBDevice::Initialize()+0x40>
    db70:	e59f1450 	ldr	r1, [pc, #1104]	; dfc8 <CUSBDevice::Initialize()+0x6b0>
    db74:	e3a02066 	mov	r2, #102	; 0x66
    db78:	e59f0470 	ldr	r0, [pc, #1136]	; dff0 <CUSBDevice::Initialize()+0x6d8>
    db7c:	eb003285 	bl	1a598 <assertion_failed>
    db80:	e594100c 	ldr	r1, [r4, #12]
    db84:	eaffff76 	b	d964 <CUSBDevice::Initialize()+0x4c>
    db88:	e1a01008 	mov	r1, r8
    db8c:	e59f2460 	ldr	r2, [pc, #1120]	; dff4 <CUSBDevice::Initialize()+0x6dc>
    db90:	eaffff95 	b	d9ec <CUSBDevice::Initialize()+0xd4>
    db94:	e1a01008 	mov	r1, r8
    db98:	e1a00004 	mov	r0, r4
    db9c:	e59f2454 	ldr	r2, [pc, #1108]	; dff8 <CUSBDevice::Initialize()+0x6e0>
    dba0:	e1a05006 	mov	r5, r6
    dba4:	ebffff2d 	bl	d860 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    dba8:	eaffff8a 	b	d9d8 <CUSBDevice::Initialize()+0xc0>
    dbac:	e59f2448 	ldr	r2, [pc, #1096]	; dffc <CUSBDevice::Initialize()+0x6e4>
    dbb0:	e3a01001 	mov	r1, #1
    dbb4:	e1a00004 	mov	r0, r4
    dbb8:	ebffff28 	bl	d860 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    dbbc:	e1a01007 	mov	r1, r7
    dbc0:	e5940018 	ldr	r0, [r4, #24]
    dbc4:	eb005348 	bl	228ec <operator delete(void*, unsigned int)>
    dbc8:	e1a05006 	mov	r5, r6
    dbcc:	e5846018 	str	r6, [r4, #24]
    dbd0:	eaffff80 	b	d9d8 <CUSBDevice::Initialize()+0xc0>
    dbd4:	e1a03007 	mov	r3, r7
    dbd8:	e1a01008 	mov	r1, r8
    dbdc:	e1a00004 	mov	r0, r4
    dbe0:	e59f2418 	ldr	r2, [pc, #1048]	; e000 <CUSBDevice::Initialize()+0x6e8>
    dbe4:	ebffff1d 	bl	d860 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    dbe8:	eaffff7a 	b	d9d8 <CUSBDevice::Initialize()+0xc0>
    dbec:	e5d0a002 	ldrb	sl, [r0, #2]
    dbf0:	e5d03003 	ldrb	r3, [r0, #3]
    dbf4:	e18aa403 	orr	sl, sl, r3, lsl #8
    dbf8:	e35a0c02 	cmp	sl, #512	; 0x200
    dbfc:	caffffcc 	bgt	db34 <CUSBDevice::Initialize()+0x21c>
    dc00:	e1a01007 	mov	r1, r7
    dc04:	eb005338 	bl	228ec <operator delete(void*, unsigned int)>
    dc08:	e1a0000a 	mov	r0, sl
    dc0c:	eb005333 	bl	228e0 <operator new[](unsigned int)>
    dc10:	e1a03000 	mov	r3, r0
    dc14:	e594100c 	ldr	r1, [r4, #12]
    dc18:	e5843018 	str	r3, [r4, #24]
    dc1c:	e5940004 	ldr	r0, [r4, #4]
    dc20:	e1a02009 	mov	r2, r9
    dc24:	e58d3000 	str	r3, [sp]
    dc28:	e58d600c 	str	r6, [sp, #12]
    dc2c:	e58d8008 	str	r8, [sp, #8]
    dc30:	e58da004 	str	sl, [sp, #4]
    dc34:	e1a03005 	mov	r3, r5
    dc38:	eb0002a5 	bl	e6d4 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    dc3c:	e15a0000 	cmp	sl, r0
    dc40:	1a000098 	bne	dea8 <CUSBDevice::Initialize()+0x590>
    dc44:	e594301c 	ldr	r3, [r4, #28]
    dc48:	e3530000 	cmp	r3, #0
    dc4c:	0a000003 	beq	dc60 <CUSBDevice::Initialize()+0x348>
    dc50:	e3a020e3 	mov	r2, #227	; 0xe3
    dc54:	e59f136c 	ldr	r1, [pc, #876]	; dfc8 <CUSBDevice::Initialize()+0x6b0>
    dc58:	e59f03a4 	ldr	r0, [pc, #932]	; e004 <CUSBDevice::Initialize()+0x6ec>
    dc5c:	eb00324d 	bl	1a598 <assertion_failed>
    dc60:	e3a0001c 	mov	r0, #28
    dc64:	eb00531c 	bl	228dc <operator new(unsigned int)>
    dc68:	e1a05000 	mov	r5, r0
    dc6c:	e1a0200a 	mov	r2, sl
    dc70:	e5941018 	ldr	r1, [r4, #24]
    dc74:	eb0022a9 	bl	16720 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)>
    dc78:	e584501c 	str	r5, [r4, #28]
    dc7c:	e1a00005 	mov	r0, r5
    dc80:	eb002319 	bl	168ec <CUSBConfigurationParser::IsValid() const>
    dc84:	e2505000 	subs	r5, r0, #0
    dc88:	e1a00004 	mov	r0, r4
    dc8c:	0a000087 	beq	deb0 <CUSBDevice::Initialize()+0x598>
    dc90:	ebfffe1e 	bl	d510 <CUSBDevice::GetNames() const>
    dc94:	e2506000 	subs	r6, r0, #0
    dc98:	0a00009c 	beq	df10 <CUSBDevice::Initialize()+0x5f8>
    dc9c:	eb004710 	bl	1f8e4 <CString::operator char const*() const>
    dca0:	e59f2360 	ldr	r2, [pc, #864]	; e008 <CUSBDevice::Initialize()+0x6f0>
    dca4:	e1a03000 	mov	r3, r0
    dca8:	e3a01003 	mov	r1, #3
    dcac:	e1a00004 	mov	r0, r4
    dcb0:	ebfffeea 	bl	d860 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    dcb4:	e5963000 	ldr	r3, [r6]
    dcb8:	e1a00006 	mov	r0, r6
    dcbc:	e5933004 	ldr	r3, [r3, #4]
    dcc0:	e12fff33 	blx	r3
    dcc4:	e3a09000 	mov	r9, #0
    dcc8:	e1a08009 	mov	r8, r9
    dccc:	e59fb338 	ldr	fp, [pc, #824]	; e00c <CUSBDevice::Initialize()+0x6f4>
    dcd0:	e3a01004 	mov	r1, #4
    dcd4:	e594001c 	ldr	r0, [r4, #28]
    dcd8:	eb002305 	bl	168f4 <CUSBConfigurationParser::GetDescriptor(unsigned char)>
    dcdc:	e3500000 	cmp	r0, #0
    dce0:	0a000075 	beq	debc <CUSBDevice::Initialize()+0x5a4>
    dce4:	e5d06002 	ldrb	r6, [r0, #2]
    dce8:	e1560009 	cmp	r6, r9
    dcec:	ca000007 	bgt	dd10 <CUSBDevice::Initialize()+0x3f8>
    dcf0:	e1590006 	cmp	r9, r6
    dcf4:	0a000005 	beq	dd10 <CUSBDevice::Initialize()+0x3f8>
    dcf8:	e5d03003 	ldrb	r3, [r0, #3]
    dcfc:	e1a0200b 	mov	r2, fp
    dd00:	e3a01004 	mov	r1, #4
    dd04:	e1a00004 	mov	r0, r4
    dd08:	ebfffed4 	bl	d860 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    dd0c:	eaffffef 	b	dcd0 <CUSBDevice::Initialize()+0x3b8>
    dd10:	e594301c 	ldr	r3, [r4, #28]
    dd14:	e3530000 	cmp	r3, #0
    dd18:	0a00006f 	beq	dedc <CUSBDevice::Initialize()+0x5c4>
    dd1c:	e0847108 	add	r7, r4, r8, lsl #2
    dd20:	e5973020 	ldr	r3, [r7, #32]
    dd24:	e3530000 	cmp	r3, #0
    dd28:	0a00003a 	beq	de18 <CUSBDevice::Initialize()+0x500>
    dd2c:	e59f22dc 	ldr	r2, [pc, #732]	; e010 <CUSBDevice::Initialize()+0x6f8>
    dd30:	e59f1290 	ldr	r1, [pc, #656]	; dfc8 <CUSBDevice::Initialize()+0x6b0>
    dd34:	e59f02d8 	ldr	r0, [pc, #728]	; e014 <CUSBDevice::Initialize()+0x6fc>
    dd38:	eb003216 	bl	1a598 <assertion_failed>
    dd3c:	e3a00010 	mov	r0, #16
    dd40:	eb0052e5 	bl	228dc <operator new(unsigned int)>
    dd44:	e1a09000 	mov	r9, r0
    dd48:	e594201c 	ldr	r2, [r4, #28]
    dd4c:	e1a01004 	mov	r1, r4
    dd50:	eb001a61 	bl	146dc <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)>
    dd54:	e1a00009 	mov	r0, r9
    dd58:	e5879020 	str	r9, [r7, #32]
    dd5c:	e5903000 	ldr	r3, [r0]
    dd60:	e5933014 	ldr	r3, [r3, #20]
    dd64:	e12fff33 	blx	r3
    dd68:	e250a000 	subs	sl, r0, #0
    dd6c:	0a00001b 	beq	dde0 <CUSBDevice::Initialize()+0x4c8>
    dd70:	e3580000 	cmp	r8, #0
    dd74:	0a000030 	beq	de3c <CUSBDevice::Initialize()+0x524>
    dd78:	e5970020 	ldr	r0, [r7, #32]
    dd7c:	eb001ac7 	bl	148a0 <CUSBFunction::GetInterfaceName() const>
    dd80:	e2509000 	subs	r9, r0, #0
    dd84:	0a000077 	beq	df68 <CUSBDevice::Initialize()+0x650>
    dd88:	e59f1288 	ldr	r1, [pc, #648]	; e018 <CUSBDevice::Initialize()+0x700>
    dd8c:	eb004727 	bl	1fa30 <CString::Compare(char const*) const>
    dd90:	e3500000 	cmp	r0, #0
    dd94:	1a00007c 	bne	df8c <CUSBDevice::Initialize()+0x674>
    dd98:	e5993000 	ldr	r3, [r9]
    dd9c:	e1a00009 	mov	r0, r9
    dda0:	e5933004 	ldr	r3, [r3, #4]
    dda4:	e12fff33 	blx	r3
    dda8:	e5970020 	ldr	r0, [r7, #32]
    ddac:	e3500000 	cmp	r0, #0
    ddb0:	0a000004 	beq	ddc8 <CUSBDevice::Initialize()+0x4b0>
    ddb4:	e5903000 	ldr	r3, [r0]
    ddb8:	e5933004 	ldr	r3, [r3, #4]
    ddbc:	e12fff33 	blx	r3
    ddc0:	e3a03000 	mov	r3, #0
    ddc4:	e5873020 	str	r3, [r7, #32]
    ddc8:	e59f224c 	ldr	r2, [pc, #588]	; e01c <CUSBDevice::Initialize()+0x704>
    ddcc:	e3a01002 	mov	r1, #2
    ddd0:	e1a00004 	mov	r0, r4
    ddd4:	e1a09006 	mov	r9, r6
    ddd8:	ebfffea0 	bl	d860 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    dddc:	eaffffbb 	b	dcd0 <CUSBDevice::Initialize()+0x3b8>
    dde0:	e1a00004 	mov	r0, r4
    dde4:	e59f2234 	ldr	r2, [pc, #564]	; e020 <CUSBDevice::Initialize()+0x708>
    dde8:	e3a01001 	mov	r1, #1
    ddec:	ebfffe9b 	bl	d860 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    ddf0:	e5970020 	ldr	r0, [r7, #32]
    ddf4:	e3500000 	cmp	r0, #0
    ddf8:	0a000002 	beq	de08 <CUSBDevice::Initialize()+0x4f0>
    ddfc:	e5903000 	ldr	r3, [r0]
    de00:	e5933004 	ldr	r3, [r3, #4]
    de04:	e12fff33 	blx	r3
    de08:	e3a03000 	mov	r3, #0
    de0c:	e1a09006 	mov	r9, r6
    de10:	e5873020 	str	r3, [r7, #32]
    de14:	eaffffad 	b	dcd0 <CUSBDevice::Initialize()+0x3b8>
    de18:	e3a00010 	mov	r0, #16
    de1c:	eb0052ae 	bl	228dc <operator new(unsigned int)>
    de20:	e1a09000 	mov	r9, r0
    de24:	e594201c 	ldr	r2, [r4, #28]
    de28:	e1a01004 	mov	r1, r4
    de2c:	eb001a2a 	bl	146dc <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)>
    de30:	e5879020 	str	r9, [r7, #32]
    de34:	e1a00009 	mov	r0, r9
    de38:	eaffffc7 	b	dd5c <CUSBDevice::Initialize()+0x444>
    de3c:	e1a01008 	mov	r1, r8
    de40:	e1a00004 	mov	r0, r4
    de44:	e5949020 	ldr	r9, [r4, #32]
    de48:	ebfffd69 	bl	d3f4 <CUSBDevice::GetName(TDeviceNameSelector) const>
    de4c:	e1a01000 	mov	r1, r0
    de50:	e1a00009 	mov	r0, r9
    de54:	eb000368 	bl	ebfc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>
    de58:	e2509000 	subs	r9, r0, #0
    de5c:	0a000037 	beq	df40 <CUSBDevice::Initialize()+0x628>
    de60:	e5940020 	ldr	r0, [r4, #32]
    de64:	e3500000 	cmp	r0, #0
    de68:	0a00000b 	beq	de9c <CUSBDevice::Initialize()+0x584>
    de6c:	e5903000 	ldr	r3, [r0]
    de70:	e5933004 	ldr	r3, [r3, #4]
    de74:	e12fff33 	blx	r3
    de78:	e3590000 	cmp	r9, #0
    de7c:	0a000021 	beq	df08 <CUSBDevice::Initialize()+0x5f0>
    de80:	e2888001 	add	r8, r8, #1
    de84:	e358000a 	cmp	r8, #10
    de88:	e5879020 	str	r9, [r7, #32]
    de8c:	0a000017 	beq	def0 <CUSBDevice::Initialize()+0x5d8>
    de90:	e2866001 	add	r6, r6, #1
    de94:	e6ef9076 	uxtb	r9, r6
    de98:	eaffff8c 	b	dcd0 <CUSBDevice::Initialize()+0x3b8>
    de9c:	e5849020 	str	r9, [r4, #32]
    dea0:	e3a08001 	mov	r8, #1
    dea4:	eafffff9 	b	de90 <CUSBDevice::Initialize()+0x578>
    dea8:	e59f2174 	ldr	r2, [pc, #372]	; e024 <CUSBDevice::Initialize()+0x70c>
    deac:	eaffff3f 	b	dbb0 <CUSBDevice::Initialize()+0x298>
    deb0:	e59f1170 	ldr	r1, [pc, #368]	; e028 <CUSBDevice::Initialize()+0x710>
    deb4:	ebfffe55 	bl	d810 <CUSBDevice::ConfigurationError(char const*) const>
    deb8:	eafffec6 	b	d9d8 <CUSBDevice::Initialize()+0xc0>
    debc:	e3580000 	cmp	r8, #0
    dec0:	1afffec4 	bne	d9d8 <CUSBDevice::Initialize()+0xc0>
    dec4:	e1a00004 	mov	r0, r4
    dec8:	e59f215c 	ldr	r2, [pc, #348]	; e02c <CUSBDevice::Initialize()+0x714>
    decc:	e3a01002 	mov	r1, #2
    ded0:	e1a05008 	mov	r5, r8
    ded4:	ebfffe61 	bl	d860 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    ded8:	eafffebe 	b	d9d8 <CUSBDevice::Initialize()+0xc0>
    dedc:	e59f214c 	ldr	r2, [pc, #332]	; e030 <CUSBDevice::Initialize()+0x718>
    dee0:	e59f10e0 	ldr	r1, [pc, #224]	; dfc8 <CUSBDevice::Initialize()+0x6b0>
    dee4:	e59f0148 	ldr	r0, [pc, #328]	; e034 <CUSBDevice::Initialize()+0x71c>
    dee8:	eb0031aa 	bl	1a598 <assertion_failed>
    deec:	eaffff8a 	b	dd1c <CUSBDevice::Initialize()+0x404>
    def0:	e1a00004 	mov	r0, r4
    def4:	e59f213c 	ldr	r2, [pc, #316]	; e038 <CUSBDevice::Initialize()+0x720>
    def8:	e3a01002 	mov	r1, #2
    defc:	e1a0500a 	mov	r5, sl
    df00:	ebfffe56 	bl	d860 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    df04:	eafffeb3 	b	d9d8 <CUSBDevice::Initialize()+0xc0>
    df08:	e5879020 	str	r9, [r7, #32]
    df0c:	eaffffad 	b	ddc8 <CUSBDevice::Initialize()+0x4b0>
    df10:	e3a020ef 	mov	r2, #239	; 0xef
    df14:	e59f10ac 	ldr	r1, [pc, #172]	; dfc8 <CUSBDevice::Initialize()+0x6b0>
    df18:	e59f011c 	ldr	r0, [pc, #284]	; e03c <CUSBDevice::Initialize()+0x724>
    df1c:	eb00319d 	bl	1a598 <assertion_failed>
    df20:	e1a00006 	mov	r0, r6
    df24:	eb00466e 	bl	1f8e4 <CString::operator char const*() const>
    df28:	e59f20d8 	ldr	r2, [pc, #216]	; e008 <CUSBDevice::Initialize()+0x6f0>
    df2c:	e1a03000 	mov	r3, r0
    df30:	e3a01003 	mov	r1, #3
    df34:	e1a00004 	mov	r0, r4
    df38:	ebfffe48 	bl	d860 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    df3c:	eaffff60 	b	dcc4 <CUSBDevice::Initialize()+0x3ac>
    df40:	e3a01001 	mov	r1, #1
    df44:	e1a00004 	mov	r0, r4
    df48:	e5949020 	ldr	r9, [r4, #32]
    df4c:	ebfffd28 	bl	d3f4 <CUSBDevice::GetName(TDeviceNameSelector) const>
    df50:	e1a01000 	mov	r1, r0
    df54:	e1a00009 	mov	r0, r9
    df58:	eb000327 	bl	ebfc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>
    df5c:	e2509000 	subs	r9, r0, #0
    df60:	0affff84 	beq	dd78 <CUSBDevice::Initialize()+0x460>
    df64:	eaffffbd 	b	de60 <CUSBDevice::Initialize()+0x548>
    df68:	e59f20d0 	ldr	r2, [pc, #208]	; e040 <CUSBDevice::Initialize()+0x728>
    df6c:	e59f1054 	ldr	r1, [pc, #84]	; dfc8 <CUSBDevice::Initialize()+0x6b0>
    df70:	e59f00cc 	ldr	r0, [pc, #204]	; e044 <CUSBDevice::Initialize()+0x72c>
    df74:	eb003187 	bl	1a598 <assertion_failed>
    df78:	e59f1098 	ldr	r1, [pc, #152]	; e018 <CUSBDevice::Initialize()+0x700>
    df7c:	e1a00009 	mov	r0, r9
    df80:	eb0046aa 	bl	1fa30 <CString::Compare(char const*) const>
    df84:	e3500000 	cmp	r0, #0
    df88:	0affff86 	beq	dda8 <CUSBDevice::Initialize()+0x490>
    df8c:	e1a00009 	mov	r0, r9
    df90:	eb004653 	bl	1f8e4 <CString::operator char const*() const>
    df94:	e59f20ac 	ldr	r2, [pc, #172]	; e048 <CUSBDevice::Initialize()+0x730>
    df98:	e1a03000 	mov	r3, r0
    df9c:	e3a01003 	mov	r1, #3
    dfa0:	e1a00004 	mov	r0, r4
    dfa4:	ebfffe2d 	bl	d860 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    dfa8:	e1a01009 	mov	r1, r9
    dfac:	e5970020 	ldr	r0, [r7, #32]
    dfb0:	eb000311 	bl	ebfc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>
    dfb4:	e1a09000 	mov	r9, r0
    dfb8:	e5970020 	ldr	r0, [r7, #32]
    dfbc:	e3500000 	cmp	r0, #0
    dfc0:	1affffa9 	bne	de6c <CUSBDevice::Initialize()+0x554>
    dfc4:	eaffffab 	b	de78 <CUSBDevice::Initialize()+0x560>
    dfc8:	000248b0 	.word	0x000248b0
    dfcc:	000249b8 	.word	0x000249b8
    dfd0:	000249f4 	.word	0x000249f4
    dfd4:	000249cc 	.word	0x000249cc
    dfd8:	0002aff8 	.word	0x0002aff8
    dfdc:	00024a5c 	.word	0x00024a5c
    dfe0:	00000525 	.word	0x00000525
    dfe4:	0000a4a2 	.word	0x0000a4a2
    dfe8:	00024a9c 	.word	0x00024a9c
    dfec:	000248c0 	.word	0x000248c0
    dff0:	00024960 	.word	0x00024960
    dff4:	00024a10 	.word	0x00024a10
    dff8:	00024a30 	.word	0x00024a30
    dffc:	00024a70 	.word	0x00024a70
    e000:	00024a44 	.word	0x00024a44
    e004:	00024ae4 	.word	0x00024ae4
    e008:	00024b08 	.word	0x00024b08
    e00c:	00024b18 	.word	0x00024b18
    e010:	00000113 	.word	0x00000113
    e014:	00024b38 	.word	0x00024b38
    e018:	00024928 	.word	0x00024928
    e01c:	00024b84 	.word	0x00024b84
    e020:	00024b54 	.word	0x00024b54
    e024:	00024ac0 	.word	0x00024ac0
    e028:	000248a8 	.word	0x000248a8
    e02c:	00024bc0 	.word	0x00024bc0
    e030:	00000112 	.word	0x00000112
    e034:	00024988 	.word	0x00024988
    e038:	00024ba0 	.word	0x00024ba0
    e03c:	00024afc 	.word	0x00024afc
    e040:	0000012f 	.word	0x0000012f
    e044:	00024930 	.word	0x00024930
    e048:	00024b70 	.word	0x00024b70

0000e04c <CUSBDevice::Configure()>:
    e04c:	e5903004 	ldr	r3, [r0, #4]
    e050:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    e054:	e3530000 	cmp	r3, #0
    e058:	e1a05000 	mov	r5, r0
    e05c:	0a00002c 	beq	e114 <CUSBDevice::Configure()+0xc8>
    e060:	e595300c 	ldr	r3, [r5, #12]
    e064:	e3530000 	cmp	r3, #0
    e068:	0a00002e 	beq	e128 <CUSBDevice::Configure()+0xdc>
    e06c:	e5956018 	ldr	r6, [r5, #24]
    e070:	e3560000 	cmp	r6, #0
    e074:	0a00001c 	beq	e0ec <CUSBDevice::Configure()+0xa0>
    e078:	e5d62005 	ldrb	r2, [r6, #5]
    e07c:	e595100c 	ldr	r1, [r5, #12]
    e080:	e5950004 	ldr	r0, [r5, #4]
    e084:	eb0001b3 	bl	e758 <CUSBHostController::SetConfiguration(CUSBEndpoint*, unsigned char)>
    e088:	e2506000 	subs	r6, r0, #0
    e08c:	0a000018 	beq	e0f4 <CUSBDevice::Configure()+0xa8>
    e090:	e3a06000 	mov	r6, #0
    e094:	e1a07006 	mov	r7, r6
    e098:	e2854020 	add	r4, r5, #32
    e09c:	e2855048 	add	r5, r5, #72	; 0x48
    e0a0:	e5940000 	ldr	r0, [r4]
    e0a4:	e3500000 	cmp	r0, #0
    e0a8:	0a00000c 	beq	e0e0 <CUSBDevice::Configure()+0x94>
    e0ac:	e5903000 	ldr	r3, [r0]
    e0b0:	e5933018 	ldr	r3, [r3, #24]
    e0b4:	e12fff33 	blx	r3
    e0b8:	e3500000 	cmp	r0, #0
    e0bc:	11a06000 	movne	r6, r0
    e0c0:	1a000006 	bne	e0e0 <CUSBDevice::Configure()+0x94>
    e0c4:	e5940000 	ldr	r0, [r4]
    e0c8:	e3500000 	cmp	r0, #0
    e0cc:	0a000002 	beq	e0dc <CUSBDevice::Configure()+0x90>
    e0d0:	e5903000 	ldr	r3, [r0]
    e0d4:	e5933004 	ldr	r3, [r3, #4]
    e0d8:	e12fff33 	blx	r3
    e0dc:	e5847000 	str	r7, [r4]
    e0e0:	e2844004 	add	r4, r4, #4
    e0e4:	e1550004 	cmp	r5, r4
    e0e8:	1affffec 	bne	e0a0 <CUSBDevice::Configure()+0x54>
    e0ec:	e1a00006 	mov	r0, r6
    e0f0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e0f4:	e5953018 	ldr	r3, [r5, #24]
    e0f8:	e1a00005 	mov	r0, r5
    e0fc:	e5d33005 	ldrb	r3, [r3, #5]
    e100:	e59f2034 	ldr	r2, [pc, #52]	; e13c <CUSBDevice::Configure()+0xf0>
    e104:	e3a01001 	mov	r1, #1
    e108:	ebfffdd4 	bl	d860 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    e10c:	e1a00006 	mov	r0, r6
    e110:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e114:	e59f2024 	ldr	r2, [pc, #36]	; e140 <CUSBDevice::Configure()+0xf4>
    e118:	e59f1024 	ldr	r1, [pc, #36]	; e144 <CUSBDevice::Configure()+0xf8>
    e11c:	e59f0024 	ldr	r0, [pc, #36]	; e148 <CUSBDevice::Configure()+0xfc>
    e120:	eb00311c 	bl	1a598 <assertion_failed>
    e124:	eaffffcd 	b	e060 <CUSBDevice::Configure()+0x14>
    e128:	e59f201c 	ldr	r2, [pc, #28]	; e14c <CUSBDevice::Configure()+0x100>
    e12c:	e59f1010 	ldr	r1, [pc, #16]	; e144 <CUSBDevice::Configure()+0xf8>
    e130:	e59f0018 	ldr	r0, [pc, #24]	; e150 <CUSBDevice::Configure()+0x104>
    e134:	eb003117 	bl	1a598 <assertion_failed>
    e138:	eaffffcb 	b	e06c <CUSBDevice::Configure()+0x20>
    e13c:	00024be4 	.word	0x00024be4
    e140:	0000015e 	.word	0x0000015e
    e144:	000248b0 	.word	0x000248b0
    e148:	000248c0 	.word	0x000248c0
    e14c:	0000015f 	.word	0x0000015f
    e150:	00024960 	.word	0x00024960

0000e154 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)>:
    e154:	e3a03000 	mov	r3, #0
    e158:	e92d4010 	push	{r4, lr}
    e15c:	e3a02001 	mov	r2, #1
    e160:	e1a04000 	mov	r4, r0
    e164:	e3a00008 	mov	r0, #8
    e168:	e1510003 	cmp	r1, r3
    e16c:	e5841000 	str	r1, [r4]
    e170:	e5840008 	str	r0, [r4, #8]
    e174:	e584200c 	str	r2, [r4, #12]
    e178:	e5c43004 	strb	r3, [r4, #4]
    e17c:	e5c43005 	strb	r3, [r4, #5]
    e180:	e5c43006 	strb	r3, [r4, #6]
    e184:	e5c43010 	strb	r3, [r4, #16]
    e188:	0a000001 	beq	e194 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)+0x40>
    e18c:	e1a00004 	mov	r0, r4
    e190:	e8bd8010 	pop	{r4, pc}
    e194:	e3a02021 	mov	r2, #33	; 0x21
    e198:	e59f100c 	ldr	r1, [pc, #12]	; e1ac <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)+0x58>
    e19c:	e59f000c 	ldr	r0, [pc, #12]	; e1b0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)+0x5c>
    e1a0:	eb0030fc 	bl	1a598 <assertion_failed>
    e1a4:	e1a00004 	mov	r0, r4
    e1a8:	e8bd8010 	pop	{r4, pc}
    e1ac:	00024c04 	.word	0x00024c04
    e1b0:	0002475c 	.word	0x0002475c

0000e1b4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>:
    e1b4:	e3a03001 	mov	r3, #1
    e1b8:	e3510000 	cmp	r1, #0
    e1bc:	e92d4070 	push	{r4, r5, r6, lr}
    e1c0:	e1a04000 	mov	r4, r0
    e1c4:	e5801000 	str	r1, [r0]
    e1c8:	e1a05002 	mov	r5, r2
    e1cc:	e580300c 	str	r3, [r0, #12]
    e1d0:	0a00005b 	beq	e344 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x190>
    e1d4:	e3550000 	cmp	r5, #0
    e1d8:	0a000054 	beq	e330 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x17c>
    e1dc:	e5d53000 	ldrb	r3, [r5]
    e1e0:	e3530006 	cmp	r3, #6
    e1e4:	9a00003b 	bls	e2d8 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x124>
    e1e8:	e5d53001 	ldrb	r3, [r5, #1]
    e1ec:	e3530005 	cmp	r3, #5
    e1f0:	0a000003 	beq	e204 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x50>
    e1f4:	e3a0202c 	mov	r2, #44	; 0x2c
    e1f8:	e59f1158 	ldr	r1, [pc, #344]	; e358 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x1a4>
    e1fc:	e59f0158 	ldr	r0, [pc, #344]	; e35c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x1a8>
    e200:	eb0030e4 	bl	1a598 <assertion_failed>
    e204:	e5d53003 	ldrb	r3, [r5, #3]
    e208:	e2033003 	and	r3, r3, #3
    e20c:	e3530002 	cmp	r3, #2
    e210:	0a000022 	beq	e2a0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xec>
    e214:	e3530003 	cmp	r3, #3
    e218:	1a00001a 	bne	e288 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xd4>
    e21c:	e3a03002 	mov	r3, #2
    e220:	e3a06001 	mov	r6, #1
    e224:	e5c43005 	strb	r3, [r4, #5]
    e228:	e5c46010 	strb	r6, [r4, #16]
    e22c:	e5d53002 	ldrb	r3, [r5, #2]
    e230:	e203200f 	and	r2, r3, #15
    e234:	e1a033a3 	lsr	r3, r3, #7
    e238:	e5c42004 	strb	r2, [r4, #4]
    e23c:	e5c43006 	strb	r3, [r4, #6]
    e240:	e5d53004 	ldrb	r3, [r5, #4]
    e244:	e5d52005 	ldrb	r2, [r5, #5]
    e248:	e1833402 	orr	r3, r3, r2, lsl #8
    e24c:	e5843008 	str	r3, [r4, #8]
    e250:	e5d55006 	ldrb	r5, [r5, #6]
    e254:	e3550000 	cmp	r5, #0
    e258:	0a00002e 	beq	e318 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x164>
    e25c:	e5940000 	ldr	r0, [r4]
    e260:	ebfffd0a 	bl	d690 <CUSBDevice::GetSpeed() const>
    e264:	e3500002 	cmp	r0, #2
    e268:	0a00001f 	beq	e2ec <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x138>
    e26c:	e584500c 	str	r5, [r4, #12]
    e270:	e3550013 	cmp	r5, #19
    e274:	8a000007 	bhi	e298 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xe4>
    e278:	e3a03014 	mov	r3, #20
    e27c:	e1a00004 	mov	r0, r4
    e280:	e584300c 	str	r3, [r4, #12]
    e284:	e8bd8070 	pop	{r4, r5, r6, pc}
    e288:	e3a0203b 	mov	r2, #59	; 0x3b
    e28c:	e59f10c4 	ldr	r1, [pc, #196]	; e358 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x1a4>
    e290:	e59f00c8 	ldr	r0, [pc, #200]	; e360 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x1ac>
    e294:	eb0030bf 	bl	1a598 <assertion_failed>
    e298:	e1a00004 	mov	r0, r4
    e29c:	e8bd8070 	pop	{r4, r5, r6, pc}
    e2a0:	e3a03001 	mov	r3, #1
    e2a4:	e5c43005 	strb	r3, [r4, #5]
    e2a8:	e5c43010 	strb	r3, [r4, #16]
    e2ac:	e5d53002 	ldrb	r3, [r5, #2]
    e2b0:	e1a00004 	mov	r0, r4
    e2b4:	e203200f 	and	r2, r3, #15
    e2b8:	e1a033a3 	lsr	r3, r3, #7
    e2bc:	e5c42004 	strb	r2, [r4, #4]
    e2c0:	e5c43006 	strb	r3, [r4, #6]
    e2c4:	e5d53004 	ldrb	r3, [r5, #4]
    e2c8:	e5d52005 	ldrb	r2, [r5, #5]
    e2cc:	e1833402 	orr	r3, r3, r2, lsl #8
    e2d0:	e5843008 	str	r3, [r4, #8]
    e2d4:	e8bd8070 	pop	{r4, r5, r6, pc}
    e2d8:	e3a0202b 	mov	r2, #43	; 0x2b
    e2dc:	e59f1074 	ldr	r1, [pc, #116]	; e358 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x1a4>
    e2e0:	e59f007c 	ldr	r0, [pc, #124]	; e364 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x1b0>
    e2e4:	eb0030ab 	bl	1a598 <assertion_failed>
    e2e8:	eaffffbe 	b	e1e8 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x34>
    e2ec:	e3550010 	cmp	r5, #16
    e2f0:	c3a03a01 	movgt	r3, #4096	; 0x1000
    e2f4:	c584300c 	strgt	r3, [r4, #12]
    e2f8:	caffffe6 	bgt	e298 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xe4>
    e2fc:	e2453001 	sub	r3, r5, #1
    e300:	e1a05316 	lsl	r5, r6, r3
    e304:	e1a051a5 	lsr	r5, r5, #3
    e308:	e3550000 	cmp	r5, #0
    e30c:	e584500c 	str	r5, [r4, #12]
    e310:	0affffd8 	beq	e278 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xc4>
    e314:	eaffffd5 	b	e270 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xbc>
    e318:	e5940000 	ldr	r0, [r4]
    e31c:	ebfffcdb 	bl	d690 <CUSBDevice::GetSpeed() const>
    e320:	e3500002 	cmp	r0, #2
    e324:	11a05006 	movne	r5, r6
    e328:	1affffcf 	bne	e26c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xb8>
    e32c:	eaffffd1 	b	e278 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xc4>
    e330:	e3a0202a 	mov	r2, #42	; 0x2a
    e334:	e59f101c 	ldr	r1, [pc, #28]	; e358 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x1a4>
    e338:	e59f0028 	ldr	r0, [pc, #40]	; e368 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x1b4>
    e33c:	eb003095 	bl	1a598 <assertion_failed>
    e340:	eaffffa5 	b	e1dc <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x28>
    e344:	e3a02028 	mov	r2, #40	; 0x28
    e348:	e59f1008 	ldr	r1, [pc, #8]	; e358 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x1a4>
    e34c:	e59f0018 	ldr	r0, [pc, #24]	; e36c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x1b8>
    e350:	eb003090 	bl	1a598 <assertion_failed>
    e354:	eaffff9e 	b	e1d4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x20>
    e358:	00024c04 	.word	0x00024c04
    e35c:	00024c40 	.word	0x00024c40
    e360:	00024970 	.word	0x00024970
    e364:	00024c20 	.word	0x00024c20
    e368:	00024c14 	.word	0x00024c14
    e36c:	0002475c 	.word	0x0002475c

0000e370 <CUSBEndpoint::CUSBEndpoint(CUSBEndpoint*, CUSBDevice*)>:
    e370:	e92d4070 	push	{r4, r5, r6, lr}
    e374:	e2515000 	subs	r5, r1, #0
    e378:	e1a04000 	mov	r4, r0
    e37c:	e1a06002 	mov	r6, r2
    e380:	0a000015 	beq	e3dc <CUSBEndpoint::CUSBEndpoint(CUSBEndpoint*, CUSBDevice*)+0x6c>
    e384:	e3560000 	cmp	r6, #0
    e388:	e5846000 	str	r6, [r4]
    e38c:	0a00000d 	beq	e3c8 <CUSBEndpoint::CUSBEndpoint(CUSBEndpoint*, CUSBDevice*)+0x58>
    e390:	e5d53004 	ldrb	r3, [r5, #4]
    e394:	e1a00004 	mov	r0, r4
    e398:	e5c43004 	strb	r3, [r4, #4]
    e39c:	e5d5e005 	ldrb	lr, [r5, #5]
    e3a0:	e5d5c006 	ldrb	ip, [r5, #6]
    e3a4:	e5951008 	ldr	r1, [r5, #8]
    e3a8:	e595200c 	ldr	r2, [r5, #12]
    e3ac:	e5d53010 	ldrb	r3, [r5, #16]
    e3b0:	e5c4e005 	strb	lr, [r4, #5]
    e3b4:	e5c4c006 	strb	ip, [r4, #6]
    e3b8:	e5841008 	str	r1, [r4, #8]
    e3bc:	e584200c 	str	r2, [r4, #12]
    e3c0:	e5c43010 	strb	r3, [r4, #16]
    e3c4:	e8bd8070 	pop	{r4, r5, r6, pc}
    e3c8:	e3a02070 	mov	r2, #112	; 0x70
    e3cc:	e59f101c 	ldr	r1, [pc, #28]	; e3f0 <CUSBEndpoint::CUSBEndpoint(CUSBEndpoint*, CUSBDevice*)+0x80>
    e3d0:	e59f001c 	ldr	r0, [pc, #28]	; e3f4 <CUSBEndpoint::CUSBEndpoint(CUSBEndpoint*, CUSBDevice*)+0x84>
    e3d4:	eb00306f 	bl	1a598 <assertion_failed>
    e3d8:	eaffffec 	b	e390 <CUSBEndpoint::CUSBEndpoint(CUSBEndpoint*, CUSBDevice*)+0x20>
    e3dc:	e3a0206d 	mov	r2, #109	; 0x6d
    e3e0:	e59f1008 	ldr	r1, [pc, #8]	; e3f0 <CUSBEndpoint::CUSBEndpoint(CUSBEndpoint*, CUSBDevice*)+0x80>
    e3e4:	e59f000c 	ldr	r0, [pc, #12]	; e3f8 <CUSBEndpoint::CUSBEndpoint(CUSBEndpoint*, CUSBDevice*)+0x88>
    e3e8:	eb00306a 	bl	1a598 <assertion_failed>
    e3ec:	eaffffe4 	b	e384 <CUSBEndpoint::CUSBEndpoint(CUSBEndpoint*, CUSBDevice*)+0x14>
    e3f0:	00024c04 	.word	0x00024c04
    e3f4:	0002475c 	.word	0x0002475c
    e3f8:	00024c70 	.word	0x00024c70

0000e3fc <CUSBEndpoint::~CUSBEndpoint()>:
    e3fc:	e12fff1e 	bx	lr

0000e400 <CUSBEndpoint::GetDevice() const>:
    e400:	e5903000 	ldr	r3, [r0]
    e404:	e3530000 	cmp	r3, #0
    e408:	0a000001 	beq	e414 <CUSBEndpoint::GetDevice() const+0x14>
    e40c:	e1a00003 	mov	r0, r3
    e410:	e12fff1e 	bx	lr
    e414:	e92d4010 	push	{r4, lr}
    e418:	e1a04000 	mov	r4, r0
    e41c:	e3a02081 	mov	r2, #129	; 0x81
    e420:	e59f1010 	ldr	r1, [pc, #16]	; e438 <CUSBEndpoint::GetDevice() const+0x38>
    e424:	e59f0010 	ldr	r0, [pc, #16]	; e43c <CUSBEndpoint::GetDevice() const+0x3c>
    e428:	eb00305a 	bl	1a598 <assertion_failed>
    e42c:	e5943000 	ldr	r3, [r4]
    e430:	e1a00003 	mov	r0, r3
    e434:	e8bd8010 	pop	{r4, pc}
    e438:	00024c04 	.word	0x00024c04
    e43c:	0002475c 	.word	0x0002475c

0000e440 <CUSBEndpoint::GetNumber() const>:
    e440:	e5d00004 	ldrb	r0, [r0, #4]
    e444:	e12fff1e 	bx	lr

0000e448 <CUSBEndpoint::GetType() const>:
    e448:	e5d00005 	ldrb	r0, [r0, #5]
    e44c:	e12fff1e 	bx	lr

0000e450 <CUSBEndpoint::IsDirectionIn() const>:
    e450:	e5d00006 	ldrb	r0, [r0, #6]
    e454:	e12fff1e 	bx	lr

0000e458 <CUSBEndpoint::SetMaxPacketSize(unsigned int)>:
    e458:	e5801008 	str	r1, [r0, #8]
    e45c:	e12fff1e 	bx	lr

0000e460 <CUSBEndpoint::GetMaxPacketSize() const>:
    e460:	e5900008 	ldr	r0, [r0, #8]
    e464:	e12fff1e 	bx	lr

0000e468 <CUSBEndpoint::GetInterval() const>:
    e468:	e5d03005 	ldrb	r3, [r0, #5]
    e46c:	e92d4010 	push	{r4, lr}
    e470:	e3530002 	cmp	r3, #2
    e474:	e1a04000 	mov	r4, r0
    e478:	0a000003 	beq	e48c <CUSBEndpoint::GetInterval() const+0x24>
    e47c:	e3a020a0 	mov	r2, #160	; 0xa0
    e480:	e59f100c 	ldr	r1, [pc, #12]	; e494 <CUSBEndpoint::GetInterval() const+0x2c>
    e484:	e59f000c 	ldr	r0, [pc, #12]	; e498 <CUSBEndpoint::GetInterval() const+0x30>
    e488:	eb003042 	bl	1a598 <assertion_failed>
    e48c:	e594000c 	ldr	r0, [r4, #12]
    e490:	e8bd8010 	pop	{r4, pc}
    e494:	00024c04 	.word	0x00024c04
    e498:	00024c80 	.word	0x00024c80

0000e49c <CUSBEndpoint::GetNextPID(bool)>:
    e49c:	e3510000 	cmp	r1, #0
    e4a0:	0a000004 	beq	e4b8 <CUSBEndpoint::GetNextPID(bool)+0x1c>
    e4a4:	e5d03005 	ldrb	r3, [r0, #5]
    e4a8:	e3530000 	cmp	r3, #0
    e4ac:	1a000003 	bne	e4c0 <CUSBEndpoint::GetNextPID(bool)+0x24>
    e4b0:	e3a00002 	mov	r0, #2
    e4b4:	e12fff1e 	bx	lr
    e4b8:	e5d00010 	ldrb	r0, [r0, #16]
    e4bc:	e12fff1e 	bx	lr
    e4c0:	e92d4010 	push	{r4, lr}
    e4c4:	e3a020a9 	mov	r2, #169	; 0xa9
    e4c8:	e59f100c 	ldr	r1, [pc, #12]	; e4dc <CUSBEndpoint::GetNextPID(bool)+0x40>
    e4cc:	e59f000c 	ldr	r0, [pc, #12]	; e4e0 <CUSBEndpoint::GetNextPID(bool)+0x44>
    e4d0:	eb003030 	bl	1a598 <assertion_failed>
    e4d4:	e3a00002 	mov	r0, #2
    e4d8:	e8bd8010 	pop	{r4, pc}
    e4dc:	00024c04 	.word	0x00024c04
    e4e0:	00024ca0 	.word	0x00024ca0

0000e4e4 <CUSBEndpoint::SkipPID(unsigned int, bool)>:
    e4e4:	e5d03005 	ldrb	r3, [r0, #5]
    e4e8:	e92d4070 	push	{r4, r5, r6, lr}
    e4ec:	e3530002 	cmp	r3, #2
    e4f0:	e1a04000 	mov	r4, r0
    e4f4:	e1a06001 	mov	r6, r1
    e4f8:	e1a05002 	mov	r5, r2
    e4fc:	8a000011 	bhi	e548 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x64>
    e500:	e3550000 	cmp	r5, #0
    e504:	1a000009 	bne	e530 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x4c>
    e508:	e5d43010 	ldrb	r3, [r4, #16]
    e50c:	e3530001 	cmp	r3, #1
    e510:	0a00001b 	beq	e584 <CUSBEndpoint::SkipPID(unsigned int, bool)+0xa0>
    e514:	3a00001c 	bcc	e58c <CUSBEndpoint::SkipPID(unsigned int, bool)+0xa8>
    e518:	e3530002 	cmp	r3, #2
    e51c:	1a000013 	bne	e570 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x8c>
    e520:	e3160001 	tst	r6, #1
    e524:	13a03001 	movne	r3, #1
    e528:	15c43010 	strbne	r3, [r4, #16]
    e52c:	e8bd8070 	pop	{r4, r5, r6, pc}
    e530:	e5d43005 	ldrb	r3, [r4, #5]
    e534:	e3530000 	cmp	r3, #0
    e538:	1a000007 	bne	e55c <CUSBEndpoint::SkipPID(unsigned int, bool)+0x78>
    e53c:	e3a03000 	mov	r3, #0
    e540:	e5c43010 	strb	r3, [r4, #16]
    e544:	e8bd8070 	pop	{r4, r5, r6, pc}
    e548:	e3a020b5 	mov	r2, #181	; 0xb5
    e54c:	e59f1044 	ldr	r1, [pc, #68]	; e598 <CUSBEndpoint::SkipPID(unsigned int, bool)+0xb4>
    e550:	e59f0044 	ldr	r0, [pc, #68]	; e59c <CUSBEndpoint::SkipPID(unsigned int, bool)+0xb8>
    e554:	eb00300f 	bl	1a598 <assertion_failed>
    e558:	eaffffe8 	b	e500 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x1c>
    e55c:	e3a020d4 	mov	r2, #212	; 0xd4
    e560:	e59f1030 	ldr	r1, [pc, #48]	; e598 <CUSBEndpoint::SkipPID(unsigned int, bool)+0xb4>
    e564:	e59f0034 	ldr	r0, [pc, #52]	; e5a0 <CUSBEndpoint::SkipPID(unsigned int, bool)+0xbc>
    e568:	eb00300a 	bl	1a598 <assertion_failed>
    e56c:	eafffff2 	b	e53c <CUSBEndpoint::SkipPID(unsigned int, bool)+0x58>
    e570:	e3a020ce 	mov	r2, #206	; 0xce
    e574:	e8bd4070 	pop	{r4, r5, r6, lr}
    e578:	e59f1018 	ldr	r1, [pc, #24]	; e598 <CUSBEndpoint::SkipPID(unsigned int, bool)+0xb4>
    e57c:	e59f0020 	ldr	r0, [pc, #32]	; e5a4 <CUSBEndpoint::SkipPID(unsigned int, bool)+0xc0>
    e580:	ea003004 	b	1a598 <assertion_failed>
    e584:	e3160001 	tst	r6, #1
    e588:	08bd8070 	popeq	{r4, r5, r6, pc}
    e58c:	e3a03002 	mov	r3, #2
    e590:	e5c43010 	strb	r3, [r4, #16]
    e594:	e8bd8070 	pop	{r4, r5, r6, pc}
    e598:	00024c04 	.word	0x00024c04
    e59c:	00024cc0 	.word	0x00024cc0
    e5a0:	00024ca0 	.word	0x00024ca0
    e5a4:	00024970 	.word	0x00024970

0000e5a8 <CUSBEndpoint::ResetPID()>:
    e5a8:	e5d03005 	ldrb	r3, [r0, #5]
    e5ac:	e92d4010 	push	{r4, lr}
    e5b0:	e3530001 	cmp	r3, #1
    e5b4:	e1a04000 	mov	r4, r0
    e5b8:	0a000003 	beq	e5cc <CUSBEndpoint::ResetPID()+0x24>
    e5bc:	e3a020dc 	mov	r2, #220	; 0xdc
    e5c0:	e59f1010 	ldr	r1, [pc, #16]	; e5d8 <CUSBEndpoint::ResetPID()+0x30>
    e5c4:	e59f0010 	ldr	r0, [pc, #16]	; e5dc <CUSBEndpoint::ResetPID()+0x34>
    e5c8:	eb002ff2 	bl	1a598 <assertion_failed>
    e5cc:	e3a03001 	mov	r3, #1
    e5d0:	e5c43010 	strb	r3, [r4, #16]
    e5d4:	e8bd8010 	pop	{r4, pc}
    e5d8:	00024c04 	.word	0x00024c04
    e5dc:	00024d20 	.word	0x00024d20

0000e5e0 <CUSBHostController::CUSBHostController()>:
    e5e0:	e59f3004 	ldr	r3, [pc, #4]	; e5ec <CUSBHostController::CUSBHostController()+0xc>
    e5e4:	e5803000 	str	r3, [r0]
    e5e8:	e12fff1e 	bx	lr
    e5ec:	00024d44 	.word	0x00024d44

0000e5f0 <CUSBHostController::~CUSBHostController()>:
    e5f0:	e12fff1e 	bx	lr

0000e5f4 <CUSBHostController::~CUSBHostController()>:
    e5f4:	e92d4010 	push	{r4, lr}
    e5f8:	e1a04000 	mov	r4, r0
    e5fc:	e3a01004 	mov	r1, #4
    e600:	eb0050b9 	bl	228ec <operator delete(void*, unsigned int)>
    e604:	e1a00004 	mov	r0, r4
    e608:	e8bd8010 	pop	{r4, pc}

0000e60c <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>:
    e60c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e610:	e1a06000 	mov	r6, r0
    e614:	e24dd034 	sub	sp, sp, #52	; 0x34
    e618:	e3a00008 	mov	r0, #8
    e61c:	e1dd56b4 	ldrh	r5, [sp, #100]	; 0x64
    e620:	e1a0a002 	mov	sl, r2
    e624:	e1a09003 	mov	r9, r3
    e628:	e1dd85b8 	ldrh	r8, [sp, #88]	; 0x58
    e62c:	e1dd75bc 	ldrh	r7, [sp, #92]	; 0x5c
    e630:	e1a0b001 	mov	fp, r1
    e634:	eb0050a8 	bl	228dc <operator new(unsigned int)>
    e638:	e1a04000 	mov	r4, r0
    e63c:	e58d0000 	str	r0, [sp]
    e640:	e1a02428 	lsr	r2, r8, #8
    e644:	e5c0a000 	strb	sl, [r0]
    e648:	e5c09001 	strb	r9, [r0, #1]
    e64c:	e1a00427 	lsr	r0, r7, #8
    e650:	e1a0c425 	lsr	ip, r5, #8
    e654:	e1a0100b 	mov	r1, fp
    e658:	e5c42003 	strb	r2, [r4, #3]
    e65c:	e1a03005 	mov	r3, r5
    e660:	e59d2060 	ldr	r2, [sp, #96]	; 0x60
    e664:	e5c40005 	strb	r0, [r4, #5]
    e668:	e28d0008 	add	r0, sp, #8
    e66c:	e5c4c007 	strb	ip, [r4, #7]
    e670:	e5c48002 	strb	r8, [r4, #2]
    e674:	e5c47004 	strb	r7, [r4, #4]
    e678:	e5c45006 	strb	r5, [r4, #6]
    e67c:	eb000061 	bl	e808 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
    e680:	e5963000 	ldr	r3, [r6]
    e684:	e1a00006 	mov	r0, r6
    e688:	e5933008 	ldr	r3, [r3, #8]
    e68c:	e28d1008 	add	r1, sp, #8
    e690:	e3a02000 	mov	r2, #0
    e694:	e12fff33 	blx	r3
    e698:	e3500000 	cmp	r0, #0
    e69c:	0a00000a 	beq	e6cc <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)+0xc0>
    e6a0:	e28d0008 	add	r0, sp, #8
    e6a4:	eb000093 	bl	e8f8 <CUSBRequest::GetResultLength() const>
    e6a8:	e1a05000 	mov	r5, r0
    e6ac:	e1a00004 	mov	r0, r4
    e6b0:	e3a01008 	mov	r1, #8
    e6b4:	eb00508c 	bl	228ec <operator delete(void*, unsigned int)>
    e6b8:	e28d0008 	add	r0, sp, #8
    e6bc:	eb000076 	bl	e89c <CUSBRequest::~CUSBRequest()>
    e6c0:	e1a00005 	mov	r0, r5
    e6c4:	e28dd034 	add	sp, sp, #52	; 0x34
    e6c8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e6cc:	e3e05000 	mvn	r5, #0
    e6d0:	eafffff5 	b	e6ac <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)+0xa0>

0000e6d4 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>:
    e6d4:	e92d4030 	push	{r4, r5, lr}
    e6d8:	e59d500c 	ldr	r5, [sp, #12]
    e6dc:	e5dd4014 	ldrb	r4, [sp, #20]
    e6e0:	e1dde1b8 	ldrh	lr, [sp, #24]
    e6e4:	e1ddc1b0 	ldrh	ip, [sp, #16]
    e6e8:	e1833402 	orr	r3, r3, r2, lsl #8
    e6ec:	e58d300c 	str	r3, [sp, #12]
    e6f0:	e58d5014 	str	r5, [sp, #20]
    e6f4:	e1a02004 	mov	r2, r4
    e6f8:	e58de010 	str	lr, [sp, #16]
    e6fc:	e58dc018 	str	ip, [sp, #24]
    e700:	e3a03006 	mov	r3, #6
    e704:	e8bd4030 	pop	{r4, r5, lr}
    e708:	eaffffbf 	b	e60c <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>

0000e70c <CUSBHostController::SetAddress(CUSBEndpoint*, unsigned char)>:
    e70c:	e92d4010 	push	{r4, lr}
    e710:	e3a04000 	mov	r4, #0
    e714:	e24dd010 	sub	sp, sp, #16
    e718:	e58d2000 	str	r2, [sp]
    e71c:	e58d400c 	str	r4, [sp, #12]
    e720:	e58d4008 	str	r4, [sp, #8]
    e724:	e58d4004 	str	r4, [sp, #4]
    e728:	e1a02004 	mov	r2, r4
    e72c:	e3a03005 	mov	r3, #5
    e730:	ebffffb5 	bl	e60c <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    e734:	e1500004 	cmp	r0, r4
    e738:	b1a00004 	movlt	r0, r4
    e73c:	ba000003 	blt	e750 <CUSBHostController::SetAddress(CUSBEndpoint*, unsigned char)+0x44>
    e740:	eb004be8 	bl	216e8 <CTimer::Get()>
    e744:	e3a00032 	mov	r0, #50	; 0x32
    e748:	eb004bad 	bl	21604 <CTimer::SimpleMsDelay(unsigned int)>
    e74c:	e3a00001 	mov	r0, #1
    e750:	e28dd010 	add	sp, sp, #16
    e754:	e8bd8010 	pop	{r4, pc}

0000e758 <CUSBHostController::SetConfiguration(CUSBEndpoint*, unsigned char)>:
    e758:	e92d4010 	push	{r4, lr}
    e75c:	e3a04000 	mov	r4, #0
    e760:	e24dd010 	sub	sp, sp, #16
    e764:	e58d2000 	str	r2, [sp]
    e768:	e58d400c 	str	r4, [sp, #12]
    e76c:	e58d4008 	str	r4, [sp, #8]
    e770:	e58d4004 	str	r4, [sp, #4]
    e774:	e1a02004 	mov	r2, r4
    e778:	e3a03009 	mov	r3, #9
    e77c:	ebffffa2 	bl	e60c <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    e780:	e1500004 	cmp	r0, r4
    e784:	b1a00004 	movlt	r0, r4
    e788:	ba000003 	blt	e79c <CUSBHostController::SetConfiguration(CUSBEndpoint*, unsigned char)+0x44>
    e78c:	eb004bd5 	bl	216e8 <CTimer::Get()>
    e790:	e3a00032 	mov	r0, #50	; 0x32
    e794:	eb004b9a 	bl	21604 <CTimer::SimpleMsDelay(unsigned int)>
    e798:	e3a00001 	mov	r0, #1
    e79c:	e28dd010 	add	sp, sp, #16
    e7a0:	e8bd8010 	pop	{r4, pc}

0000e7a4 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>:
    e7a4:	e3a0c000 	mov	ip, #0
    e7a8:	e92d4010 	push	{r4, lr}
    e7ac:	e1a04000 	mov	r4, r0
    e7b0:	e24dd030 	sub	sp, sp, #48	; 0x30
    e7b4:	e58dc000 	str	ip, [sp]
    e7b8:	e28d0008 	add	r0, sp, #8
    e7bc:	eb000011 	bl	e808 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
    e7c0:	e5943000 	ldr	r3, [r4]
    e7c4:	e1a00004 	mov	r0, r4
    e7c8:	e5933008 	ldr	r3, [r3, #8]
    e7cc:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
    e7d0:	e28d1008 	add	r1, sp, #8
    e7d4:	e12fff33 	blx	r3
    e7d8:	e3500000 	cmp	r0, #0
    e7dc:	0a000007 	beq	e800 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)+0x5c>
    e7e0:	e28d0008 	add	r0, sp, #8
    e7e4:	eb000043 	bl	e8f8 <CUSBRequest::GetResultLength() const>
    e7e8:	e1a04000 	mov	r4, r0
    e7ec:	e28d0008 	add	r0, sp, #8
    e7f0:	eb000029 	bl	e89c <CUSBRequest::~CUSBRequest()>
    e7f4:	e1a00004 	mov	r0, r4
    e7f8:	e28dd030 	add	sp, sp, #48	; 0x30
    e7fc:	e8bd8010 	pop	{r4, pc}
    e800:	e3e04000 	mvn	r4, #0
    e804:	eafffff8 	b	e7ec <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)+0x48>

0000e808 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>:
    e808:	e92d4010 	push	{r4, lr}
    e80c:	e1a04000 	mov	r4, r0
    e810:	e3a00000 	mov	r0, #0
    e814:	e59dc008 	ldr	ip, [sp, #8]
    e818:	e1510000 	cmp	r1, r0
    e81c:	e5841000 	str	r1, [r4]
    e820:	e584300c 	str	r3, [r4, #12]
    e824:	e5842008 	str	r2, [r4, #8]
    e828:	e584c004 	str	ip, [r4, #4]
    e82c:	e5840010 	str	r0, [r4, #16]
    e830:	e5840014 	str	r0, [r4, #20]
    e834:	e5840018 	str	r0, [r4, #24]
    e838:	e584001c 	str	r0, [r4, #28]
    e83c:	e5840020 	str	r0, [r4, #32]
    e840:	e5c40024 	strb	r0, [r4, #36]	; 0x24
    e844:	0a00000b 	beq	e878 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x70>
    e848:	e3520000 	cmp	r2, #0
    e84c:	0a000001 	beq	e858 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x50>
    e850:	e1a00004 	mov	r0, r4
    e854:	e8bd8010 	pop	{r4, pc}
    e858:	e594300c 	ldr	r3, [r4, #12]
    e85c:	e3530000 	cmp	r3, #0
    e860:	0afffffa 	beq	e850 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x48>
    e864:	e3a02024 	mov	r2, #36	; 0x24
    e868:	e59f1020 	ldr	r1, [pc, #32]	; e890 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x88>
    e86c:	e59f0020 	ldr	r0, [pc, #32]	; e894 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x8c>
    e870:	eb002f48 	bl	1a598 <assertion_failed>
    e874:	eafffff5 	b	e850 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x48>
    e878:	e3a02023 	mov	r2, #35	; 0x23
    e87c:	e59f100c 	ldr	r1, [pc, #12]	; e890 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x88>
    e880:	e59f0010 	ldr	r0, [pc, #16]	; e898 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x90>
    e884:	eb002f43 	bl	1a598 <assertion_failed>
    e888:	e5942008 	ldr	r2, [r4, #8]
    e88c:	eaffffed 	b	e848 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x40>
    e890:	00024d54 	.word	0x00024d54
    e894:	00024d64 	.word	0x00024d64
    e898:	0002473c 	.word	0x0002473c

0000e89c <CUSBRequest::~CUSBRequest()>:
    e89c:	e12fff1e 	bx	lr

0000e8a0 <CUSBRequest::GetEndpoint() const>:
    e8a0:	e5903000 	ldr	r3, [r0]
    e8a4:	e3530000 	cmp	r3, #0
    e8a8:	0a000001 	beq	e8b4 <CUSBRequest::GetEndpoint() const+0x14>
    e8ac:	e1a00003 	mov	r0, r3
    e8b0:	e12fff1e 	bx	lr
    e8b4:	e92d4010 	push	{r4, lr}
    e8b8:	e1a04000 	mov	r4, r0
    e8bc:	e3a02031 	mov	r2, #49	; 0x31
    e8c0:	e59f1010 	ldr	r1, [pc, #16]	; e8d8 <CUSBRequest::GetEndpoint() const+0x38>
    e8c4:	e59f0010 	ldr	r0, [pc, #16]	; e8dc <CUSBRequest::GetEndpoint() const+0x3c>
    e8c8:	eb002f32 	bl	1a598 <assertion_failed>
    e8cc:	e5943000 	ldr	r3, [r4]
    e8d0:	e1a00003 	mov	r0, r3
    e8d4:	e8bd8010 	pop	{r4, pc}
    e8d8:	00024d54 	.word	0x00024d54
    e8dc:	0002473c 	.word	0x0002473c

0000e8e0 <CUSBRequest::SetStatus(int)>:
    e8e0:	e5801010 	str	r1, [r0, #16]
    e8e4:	e12fff1e 	bx	lr

0000e8e8 <CUSBRequest::SetResultLen(unsigned int)>:
    e8e8:	e5801014 	str	r1, [r0, #20]
    e8ec:	e12fff1e 	bx	lr

0000e8f0 <CUSBRequest::GetStatus() const>:
    e8f0:	e5900010 	ldr	r0, [r0, #16]
    e8f4:	e12fff1e 	bx	lr

0000e8f8 <CUSBRequest::GetResultLength() const>:
    e8f8:	e5903010 	ldr	r3, [r0, #16]
    e8fc:	e92d4010 	push	{r4, lr}
    e900:	e3530000 	cmp	r3, #0
    e904:	e1a04000 	mov	r4, r0
    e908:	1a000003 	bne	e91c <CUSBRequest::GetResultLength() const+0x24>
    e90c:	e3a02046 	mov	r2, #70	; 0x46
    e910:	e59f100c 	ldr	r1, [pc, #12]	; e924 <CUSBRequest::GetResultLength() const+0x2c>
    e914:	e59f000c 	ldr	r0, [pc, #12]	; e928 <CUSBRequest::GetResultLength() const+0x30>
    e918:	eb002f1e 	bl	1a598 <assertion_failed>
    e91c:	e5940014 	ldr	r0, [r4, #20]
    e920:	e8bd8010 	pop	{r4, pc}
    e924:	00024d54 	.word	0x00024d54
    e928:	00024d88 	.word	0x00024d88

0000e92c <CUSBRequest::GetSetupData()>:
    e92c:	e92d4010 	push	{r4, lr}
    e930:	e1a04000 	mov	r4, r0
    e934:	e5900000 	ldr	r0, [r0]
    e938:	ebfffec2 	bl	e448 <CUSBEndpoint::GetType() const>
    e93c:	e3500000 	cmp	r0, #0
    e940:	1a000008 	bne	e968 <CUSBRequest::GetSetupData()+0x3c>
    e944:	e5940004 	ldr	r0, [r4, #4]
    e948:	e3500000 	cmp	r0, #0
    e94c:	18bd8010 	popne	{r4, pc}
    e950:	e3a0204e 	mov	r2, #78	; 0x4e
    e954:	e59f1020 	ldr	r1, [pc, #32]	; e97c <CUSBRequest::GetSetupData()+0x50>
    e958:	e59f0020 	ldr	r0, [pc, #32]	; e980 <CUSBRequest::GetSetupData()+0x54>
    e95c:	eb002f0d 	bl	1a598 <assertion_failed>
    e960:	e5940004 	ldr	r0, [r4, #4]
    e964:	e8bd8010 	pop	{r4, pc}
    e968:	e3a0204d 	mov	r2, #77	; 0x4d
    e96c:	e59f1008 	ldr	r1, [pc, #8]	; e97c <CUSBRequest::GetSetupData()+0x50>
    e970:	e59f000c 	ldr	r0, [pc, #12]	; e984 <CUSBRequest::GetSetupData()+0x58>
    e974:	eb002f07 	bl	1a598 <assertion_failed>
    e978:	eafffff1 	b	e944 <CUSBRequest::GetSetupData()+0x18>
    e97c:	00024d54 	.word	0x00024d54
    e980:	00024dc4 	.word	0x00024dc4
    e984:	00024d94 	.word	0x00024d94

0000e988 <CUSBRequest::GetBuffer()>:
    e988:	e5903008 	ldr	r3, [r0, #8]
    e98c:	e3530000 	cmp	r3, #0
    e990:	0a000001 	beq	e99c <CUSBRequest::GetBuffer()+0x14>
    e994:	e1a00003 	mov	r0, r3
    e998:	e12fff1e 	bx	lr
    e99c:	e590200c 	ldr	r2, [r0, #12]
    e9a0:	e3520000 	cmp	r2, #0
    e9a4:	0afffffa 	beq	e994 <CUSBRequest::GetBuffer()+0xc>
    e9a8:	e92d4010 	push	{r4, lr}
    e9ac:	e1a04000 	mov	r4, r0
    e9b0:	e3a02056 	mov	r2, #86	; 0x56
    e9b4:	e59f1010 	ldr	r1, [pc, #16]	; e9cc <CUSBRequest::GetBuffer()+0x44>
    e9b8:	e59f0010 	ldr	r0, [pc, #16]	; e9d0 <CUSBRequest::GetBuffer()+0x48>
    e9bc:	eb002ef5 	bl	1a598 <assertion_failed>
    e9c0:	e5943008 	ldr	r3, [r4, #8]
    e9c4:	e1a00003 	mov	r0, r3
    e9c8:	e8bd8010 	pop	{r4, pc}
    e9cc:	00024d54 	.word	0x00024d54
    e9d0:	00024d64 	.word	0x00024d64

0000e9d4 <CUSBRequest::GetBufLen() const>:
    e9d4:	e590000c 	ldr	r0, [r0, #12]
    e9d8:	e12fff1e 	bx	lr

0000e9dc <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>:
    e9dc:	e3510000 	cmp	r1, #0
    e9e0:	e5801018 	str	r1, [r0, #24]
    e9e4:	e580201c 	str	r2, [r0, #28]
    e9e8:	e5803020 	str	r3, [r0, #32]
    e9ec:	112fff1e 	bxne	lr
    e9f0:	e3a02066 	mov	r2, #102	; 0x66
    e9f4:	e59f1004 	ldr	r1, [pc, #4]	; ea00 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)+0x24>
    e9f8:	e59f0004 	ldr	r0, [pc, #4]	; ea04 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)+0x28>
    e9fc:	ea002ee5 	b	1a598 <assertion_failed>
    ea00:	00024d54 	.word	0x00024d54
    ea04:	00024dd8 	.word	0x00024dd8

0000ea08 <CUSBRequest::CallCompletionRoutine()>:
    ea08:	e5903018 	ldr	r3, [r0, #24]
    ea0c:	e92d4010 	push	{r4, lr}
    ea10:	e3530000 	cmp	r3, #0
    ea14:	e1a04000 	mov	r4, r0
    ea18:	0a000004 	beq	ea30 <CUSBRequest::CallCompletionRoutine()+0x28>
    ea1c:	e5942020 	ldr	r2, [r4, #32]
    ea20:	e594101c 	ldr	r1, [r4, #28]
    ea24:	e1a00004 	mov	r0, r4
    ea28:	e8bd4010 	pop	{r4, lr}
    ea2c:	e12fff13 	bx	r3
    ea30:	e3a0206b 	mov	r2, #107	; 0x6b
    ea34:	e59f100c 	ldr	r1, [pc, #12]	; ea48 <CUSBRequest::CallCompletionRoutine()+0x40>
    ea38:	e59f000c 	ldr	r0, [pc, #12]	; ea4c <CUSBRequest::CallCompletionRoutine()+0x44>
    ea3c:	eb002ed5 	bl	1a598 <assertion_failed>
    ea40:	e5943018 	ldr	r3, [r4, #24]
    ea44:	eafffff4 	b	ea1c <CUSBRequest::CallCompletionRoutine()+0x14>
    ea48:	00024d54 	.word	0x00024d54
    ea4c:	00024dd8 	.word	0x00024dd8

0000ea50 <CUSBRequest::SetCompleteOnNAK()>:
    ea50:	e3a03001 	mov	r3, #1
    ea54:	e5c03024 	strb	r3, [r0, #36]	; 0x24
    ea58:	e12fff1e 	bx	lr

0000ea5c <CUSBRequest::IsCompleteOnNAK() const>:
    ea5c:	e5d00024 	ldrb	r0, [r0, #36]	; 0x24
    ea60:	e12fff1e 	bx	lr

0000ea64 <CUSBRequest::operator new(unsigned int)>:
    ea64:	e3500028 	cmp	r0, #40	; 0x28
    ea68:	e92d4010 	push	{r4, lr}
    ea6c:	0a000003 	beq	ea80 <CUSBRequest::operator new(unsigned int)+0x1c>
    ea70:	e3a0207a 	mov	r2, #122	; 0x7a
    ea74:	e59f1038 	ldr	r1, [pc, #56]	; eab4 <CUSBRequest::operator new(unsigned int)+0x50>
    ea78:	e59f0038 	ldr	r0, [pc, #56]	; eab8 <CUSBRequest::operator new(unsigned int)+0x54>
    ea7c:	eb002ec5 	bl	1a598 <assertion_failed>
    ea80:	e59f4034 	ldr	r4, [pc, #52]	; eabc <CUSBRequest::operator new(unsigned int)+0x58>
    ea84:	e5940000 	ldr	r0, [r4]
    ea88:	e3500000 	cmp	r0, #0
    ea8c:	0a000001 	beq	ea98 <CUSBRequest::operator new(unsigned int)+0x34>
    ea90:	e8bd4010 	pop	{r4, lr}
    ea94:	ea002fdd 	b	1aa10 <CClassAllocator::Allocate()>
    ea98:	e59f0020 	ldr	r0, [pc, #32]	; eac0 <CUSBRequest::operator new(unsigned int)+0x5c>
    ea9c:	e3a0207a 	mov	r2, #122	; 0x7a
    eaa0:	e59f100c 	ldr	r1, [pc, #12]	; eab4 <CUSBRequest::operator new(unsigned int)+0x50>
    eaa4:	eb002ebb 	bl	1a598 <assertion_failed>
    eaa8:	e5940000 	ldr	r0, [r4]
    eaac:	e8bd4010 	pop	{r4, lr}
    eab0:	ea002fd6 	b	1aa10 <CClassAllocator::Allocate()>
    eab4:	00024d54 	.word	0x00024d54
    eab8:	00024df4 	.word	0x00024df4
    eabc:	0002b264 	.word	0x0002b264
    eac0:	00024850 	.word	0x00024850

0000eac4 <CUSBRequest::operator delete(void*, unsigned int)>:
    eac4:	e3510028 	cmp	r1, #40	; 0x28
    eac8:	e92d4070 	push	{r4, r5, r6, lr}
    eacc:	e1a05000 	mov	r5, r0
    ead0:	0a000003 	beq	eae4 <CUSBRequest::operator delete(void*, unsigned int)+0x20>
    ead4:	e3a0207a 	mov	r2, #122	; 0x7a
    ead8:	e59f1040 	ldr	r1, [pc, #64]	; eb20 <CUSBRequest::operator delete(void*, unsigned int)+0x5c>
    eadc:	e59f0040 	ldr	r0, [pc, #64]	; eb24 <CUSBRequest::operator delete(void*, unsigned int)+0x60>
    eae0:	eb002eac 	bl	1a598 <assertion_failed>
    eae4:	e59f403c 	ldr	r4, [pc, #60]	; eb28 <CUSBRequest::operator delete(void*, unsigned int)+0x64>
    eae8:	e5940000 	ldr	r0, [r4]
    eaec:	e3500000 	cmp	r0, #0
    eaf0:	0a000002 	beq	eb00 <CUSBRequest::operator delete(void*, unsigned int)+0x3c>
    eaf4:	e1a01005 	mov	r1, r5
    eaf8:	e8bd4070 	pop	{r4, r5, r6, lr}
    eafc:	ea002ffe 	b	1aafc <CClassAllocator::Free(void*)>
    eb00:	e59f1018 	ldr	r1, [pc, #24]	; eb20 <CUSBRequest::operator delete(void*, unsigned int)+0x5c>
    eb04:	e59f0020 	ldr	r0, [pc, #32]	; eb2c <CUSBRequest::operator delete(void*, unsigned int)+0x68>
    eb08:	e3a0207a 	mov	r2, #122	; 0x7a
    eb0c:	eb002ea1 	bl	1a598 <assertion_failed>
    eb10:	e5940000 	ldr	r0, [r4]
    eb14:	e1a01005 	mov	r1, r5
    eb18:	e8bd4070 	pop	{r4, r5, r6, lr}
    eb1c:	ea002ff6 	b	1aafc <CClassAllocator::Free(void*)>
    eb20:	00024d54 	.word	0x00024d54
    eb24:	00024df4 	.word	0x00024df4
    eb28:	0002b264 	.word	0x0002b264
    eb2c:	00024850 	.word	0x00024850

0000eb30 <CUSBRequest::InitAllocator(unsigned int)>:
    eb30:	e92d4070 	push	{r4, r5, r6, lr}
    eb34:	e59f4040 	ldr	r4, [pc, #64]	; eb7c <CUSBRequest::InitAllocator(unsigned int)+0x4c>
    eb38:	e1a06000 	mov	r6, r0
    eb3c:	e5943000 	ldr	r3, [r4]
    eb40:	e3530000 	cmp	r3, #0
    eb44:	0a000003 	beq	eb58 <CUSBRequest::InitAllocator(unsigned int)+0x28>
    eb48:	e3a0207a 	mov	r2, #122	; 0x7a
    eb4c:	e59f102c 	ldr	r1, [pc, #44]	; eb80 <CUSBRequest::InitAllocator(unsigned int)+0x50>
    eb50:	e59f002c 	ldr	r0, [pc, #44]	; eb84 <CUSBRequest::InitAllocator(unsigned int)+0x54>
    eb54:	eb002e8f 	bl	1a598 <assertion_failed>
    eb58:	e3a0001c 	mov	r0, #28
    eb5c:	eb004f5e 	bl	228dc <operator new(unsigned int)>
    eb60:	e1a05000 	mov	r5, r0
    eb64:	e1a02006 	mov	r2, r6
    eb68:	e59f3018 	ldr	r3, [pc, #24]	; eb88 <CUSBRequest::InitAllocator(unsigned int)+0x58>
    eb6c:	e3a01028 	mov	r1, #40	; 0x28
    eb70:	eb002f8d 	bl	1a9ac <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
    eb74:	e5845000 	str	r5, [r4]
    eb78:	e8bd8070 	pop	{r4, r5, r6, pc}
    eb7c:	0002b264 	.word	0x0002b264
    eb80:	00024d54 	.word	0x00024d54
    eb84:	00024864 	.word	0x00024864
    eb88:	00024e14 	.word	0x00024e14

0000eb8c <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)>:
    eb8c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    eb90:	e59f4054 	ldr	r4, [pc, #84]	; ebec <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)+0x60>
    eb94:	e24dd00c 	sub	sp, sp, #12
    eb98:	e5943000 	ldr	r3, [r4]
    eb9c:	e1a06000 	mov	r6, r0
    eba0:	e3530000 	cmp	r3, #0
    eba4:	e1a07001 	mov	r7, r1
    eba8:	0a000003 	beq	ebbc <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)+0x30>
    ebac:	e3a0207a 	mov	r2, #122	; 0x7a
    ebb0:	e59f1038 	ldr	r1, [pc, #56]	; ebf0 <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)+0x64>
    ebb4:	e59f0038 	ldr	r0, [pc, #56]	; ebf4 <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)+0x68>
    ebb8:	eb002e76 	bl	1a598 <assertion_failed>
    ebbc:	e3a0001c 	mov	r0, #28
    ebc0:	eb004f45 	bl	228dc <operator new(unsigned int)>
    ebc4:	e59f102c 	ldr	r1, [pc, #44]	; ebf8 <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)+0x6c>
    ebc8:	e1a03007 	mov	r3, r7
    ebcc:	e58d1000 	str	r1, [sp]
    ebd0:	e1a02006 	mov	r2, r6
    ebd4:	e3a01028 	mov	r1, #40	; 0x28
    ebd8:	e1a05000 	mov	r5, r0
    ebdc:	eb002f7e 	bl	1a9dc <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
    ebe0:	e5845000 	str	r5, [r4]
    ebe4:	e28dd00c 	add	sp, sp, #12
    ebe8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    ebec:	0002b264 	.word	0x0002b264
    ebf0:	00024d54 	.word	0x00024d54
    ebf4:	00024864 	.word	0x00024864
    ebf8:	00024e14 	.word	0x00024e14

0000ebfc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>:
    ebfc:	e92d4070 	push	{r4, r5, r6, lr}
    ec00:	e2506000 	subs	r6, r0, #0
    ec04:	e1a04001 	mov	r4, r1
    ec08:	0a000043 	beq	ed1c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x120>
    ec0c:	e3540000 	cmp	r4, #0
    ec10:	0a000046 	beq	ed30 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x134>
    ec14:	e59f13e0 	ldr	r1, [pc, #992]	; effc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x400>
    ec18:	e1a00004 	mov	r0, r4
    ec1c:	eb004383 	bl	1fa30 <CString::Compare(char const*) const>
    ec20:	e3500000 	cmp	r0, #0
    ec24:	1a000016 	bne	ec84 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x88>
    ec28:	e3a00058 	mov	r0, #88	; 0x58
    ec2c:	eb004f2a 	bl	228dc <operator new(unsigned int)>
    ec30:	e1a01006 	mov	r1, r6
    ec34:	e1a05000 	mov	r5, r0
    ec38:	eb00013a 	bl	f128 <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)>
    ec3c:	e1a00005 	mov	r0, r5
    ec40:	eb001741 	bl	1494c <CUSBFunction::GetDevice() const>
    ec44:	e1a06000 	mov	r6, r0
    ec48:	e1a00004 	mov	r0, r4
    ec4c:	eb004324 	bl	1f8e4 <CString::operator char const*() const>
    ec50:	e59f23a8 	ldr	r2, [pc, #936]	; f000 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x404>
    ec54:	e1a03000 	mov	r3, r0
    ec58:	e3a01003 	mov	r1, #3
    ec5c:	e1a00006 	mov	r0, r6
    ec60:	ebfffafe 	bl	d860 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    ec64:	e3540000 	cmp	r4, #0
    ec68:	0a000003 	beq	ec7c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x80>
    ec6c:	e5943000 	ldr	r3, [r4]
    ec70:	e1a00004 	mov	r0, r4
    ec74:	e5933004 	ldr	r3, [r3, #4]
    ec78:	e12fff33 	blx	r3
    ec7c:	e1a00005 	mov	r0, r5
    ec80:	e8bd8070 	pop	{r4, r5, r6, pc}
    ec84:	e59f1378 	ldr	r1, [pc, #888]	; f004 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x408>
    ec88:	e1a00004 	mov	r0, r4
    ec8c:	eb004367 	bl	1fa30 <CString::Compare(char const*) const>
    ec90:	e3500000 	cmp	r0, #0
    ec94:	0affffe3 	beq	ec28 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x2c>
    ec98:	e59f1368 	ldr	r1, [pc, #872]	; f008 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40c>
    ec9c:	e1a00004 	mov	r0, r4
    eca0:	eb004362 	bl	1fa30 <CString::Compare(char const*) const>
    eca4:	e3500000 	cmp	r0, #0
    eca8:	1a000005 	bne	ecc4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0xc8>
    ecac:	e3a00030 	mov	r0, #48	; 0x30
    ecb0:	eb004f09 	bl	228dc <operator new(unsigned int)>
    ecb4:	e1a01006 	mov	r1, r6
    ecb8:	e1a05000 	mov	r5, r0
    ecbc:	eb0003cd 	bl	fbf8 <CUSBBulkOnlyMassStorageDevice::CUSBBulkOnlyMassStorageDevice(CUSBFunction*)>
    ecc0:	eaffffdd 	b	ec3c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    ecc4:	e59f1340 	ldr	r1, [pc, #832]	; f00c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x410>
    ecc8:	e1a00004 	mov	r0, r4
    eccc:	eb004357 	bl	1fa30 <CString::Compare(char const*) const>
    ecd0:	e3500000 	cmp	r0, #0
    ecd4:	0a00000a 	beq	ed04 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x108>
    ecd8:	e59f1330 	ldr	r1, [pc, #816]	; f010 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x414>
    ecdc:	e1a00004 	mov	r0, r4
    ece0:	eb004352 	bl	1fa30 <CString::Compare(char const*) const>
    ece4:	e3500000 	cmp	r0, #0
    ece8:	1a000015 	bne	ed44 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x148>
    ecec:	e3a00030 	mov	r0, #48	; 0x30
    ecf0:	eb004ef9 	bl	228dc <operator new(unsigned int)>
    ecf4:	e1a01006 	mov	r1, r6
    ecf8:	e1a05000 	mov	r5, r0
    ecfc:	eb000d08 	bl	12124 <CUSBMouseDevice::CUSBMouseDevice(CUSBFunction*)>
    ed00:	eaffffcd 	b	ec3c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    ed04:	e3a00e45 	mov	r0, #1104	; 0x450
    ed08:	eb004ef3 	bl	228dc <operator new(unsigned int)>
    ed0c:	e1a01006 	mov	r1, r6
    ed10:	e1a05000 	mov	r5, r0
    ed14:	eb000947 	bl	11238 <CUSBKeyboardDevice::CUSBKeyboardDevice(CUSBFunction*)>
    ed18:	eaffffc7 	b	ec3c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    ed1c:	e3a0202b 	mov	r2, #43	; 0x2b
    ed20:	e59f12ec 	ldr	r1, [pc, #748]	; f014 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x418>
    ed24:	e59f02ec 	ldr	r0, [pc, #748]	; f018 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x41c>
    ed28:	eb002e1a 	bl	1a598 <assertion_failed>
    ed2c:	eaffffb6 	b	ec0c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x10>
    ed30:	e3a0202c 	mov	r2, #44	; 0x2c
    ed34:	e59f12d8 	ldr	r1, [pc, #728]	; f014 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x418>
    ed38:	e59f02dc 	ldr	r0, [pc, #732]	; f01c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x420>
    ed3c:	eb002e15 	bl	1a598 <assertion_failed>
    ed40:	eaffffb3 	b	ec14 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x18>
    ed44:	e59f12d4 	ldr	r1, [pc, #724]	; f020 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x424>
    ed48:	e1a00004 	mov	r0, r4
    ed4c:	eb004337 	bl	1fa30 <CString::Compare(char const*) const>
    ed50:	e3500000 	cmp	r0, #0
    ed54:	0a00000a 	beq	ed84 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x188>
    ed58:	e59f12c4 	ldr	r1, [pc, #708]	; f024 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x428>
    ed5c:	e1a00004 	mov	r0, r4
    ed60:	eb004332 	bl	1fa30 <CString::Compare(char const*) const>
    ed64:	e3500000 	cmp	r0, #0
    ed68:	1a00000c 	bne	eda0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x1a4>
    ed6c:	e3a00f5b 	mov	r0, #364	; 0x16c
    ed70:	eb004ed9 	bl	228dc <operator new(unsigned int)>
    ed74:	e1a01006 	mov	r1, r6
    ed78:	e1a05000 	mov	r5, r0
    ed7c:	eb000f77 	bl	12b60 <CUSBGamePadPS3Device::CUSBGamePadPS3Device(CUSBFunction*)>
    ed80:	eaffffad 	b	ec3c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    ed84:	e3a00f4f 	mov	r0, #316	; 0x13c
    ed88:	eb004ed3 	bl	228dc <operator new(unsigned int)>
    ed8c:	e1a01006 	mov	r1, r6
    ed90:	e3a02001 	mov	r2, #1
    ed94:	e1a05000 	mov	r5, r0
    ed98:	eb000d04 	bl	121b0 <CUSBGamePadStandardDevice::CUSBGamePadStandardDevice(CUSBFunction*, bool)>
    ed9c:	eaffffa6 	b	ec3c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    eda0:	e59f1280 	ldr	r1, [pc, #640]	; f028 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x42c>
    eda4:	e1a00004 	mov	r0, r4
    eda8:	eb004320 	bl	1fa30 <CString::Compare(char const*) const>
    edac:	e3500000 	cmp	r0, #0
    edb0:	1a000005 	bne	edcc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x1d0>
    edb4:	e3a00f53 	mov	r0, #332	; 0x14c
    edb8:	eb004ec7 	bl	228dc <operator new(unsigned int)>
    edbc:	e1a01006 	mov	r1, r6
    edc0:	e1a05000 	mov	r5, r0
    edc4:	eb0010ca 	bl	130f4 <CUSBGamePadPS4Device::CUSBGamePadPS4Device(CUSBFunction*)>
    edc8:	eaffff9b 	b	ec3c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    edcc:	e59f1258 	ldr	r1, [pc, #600]	; f02c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x430>
    edd0:	e1a00004 	mov	r0, r4
    edd4:	eb004315 	bl	1fa30 <CString::Compare(char const*) const>
    edd8:	e3500000 	cmp	r0, #0
    eddc:	0afffff4 	beq	edb4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x1b8>
    ede0:	e59f1248 	ldr	r1, [pc, #584]	; f030 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x434>
    ede4:	e1a00004 	mov	r0, r4
    ede8:	eb004310 	bl	1fa30 <CString::Compare(char const*) const>
    edec:	e3500000 	cmp	r0, #0
    edf0:	1a000005 	bne	ee0c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x210>
    edf4:	e3a00e13 	mov	r0, #304	; 0x130
    edf8:	eb004eb7 	bl	228dc <operator new(unsigned int)>
    edfc:	e1a01006 	mov	r1, r6
    ee00:	e1a05000 	mov	r5, r0
    ee04:	eb00130c 	bl	13a3c <CUSBGamePadXbox360Device::CUSBGamePadXbox360Device(CUSBFunction*)>
    ee08:	eaffff8b 	b	ec3c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    ee0c:	e59f1220 	ldr	r1, [pc, #544]	; f034 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x438>
    ee10:	e1a00004 	mov	r0, r4
    ee14:	eb004305 	bl	1fa30 <CString::Compare(char const*) const>
    ee18:	e3500000 	cmp	r0, #0
    ee1c:	0afffff4 	beq	edf4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x1f8>
    ee20:	e59f1210 	ldr	r1, [pc, #528]	; f038 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x43c>
    ee24:	e1a00004 	mov	r0, r4
    ee28:	eb004300 	bl	1fa30 <CString::Compare(char const*) const>
    ee2c:	e3500000 	cmp	r0, #0
    ee30:	1a000005 	bne	ee4c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x250>
    ee34:	e3a00f4d 	mov	r0, #308	; 0x134
    ee38:	eb004ea7 	bl	228dc <operator new(unsigned int)>
    ee3c:	e1a01006 	mov	r1, r6
    ee40:	e1a05000 	mov	r5, r0
    ee44:	eb001417 	bl	13ea8 <CUSBGamePadXboxOneDevice::CUSBGamePadXboxOneDevice(CUSBFunction*)>
    ee48:	eaffff7b 	b	ec3c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    ee4c:	e59f11e8 	ldr	r1, [pc, #488]	; f03c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x440>
    ee50:	e1a00004 	mov	r0, r4
    ee54:	eb0042f5 	bl	1fa30 <CString::Compare(char const*) const>
    ee58:	e3500000 	cmp	r0, #0
    ee5c:	0afffff4 	beq	ee34 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x238>
    ee60:	e59f11d8 	ldr	r1, [pc, #472]	; f040 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x444>
    ee64:	e1a00004 	mov	r0, r4
    ee68:	eb0042f0 	bl	1fa30 <CString::Compare(char const*) const>
    ee6c:	e3500000 	cmp	r0, #0
    ee70:	0affffef 	beq	ee34 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x238>
    ee74:	e59f11c8 	ldr	r1, [pc, #456]	; f044 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x448>
    ee78:	e1a00004 	mov	r0, r4
    ee7c:	eb0042eb 	bl	1fa30 <CString::Compare(char const*) const>
    ee80:	e3500000 	cmp	r0, #0
    ee84:	0affffea 	beq	ee34 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x238>
    ee88:	e59f11b8 	ldr	r1, [pc, #440]	; f048 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x44c>
    ee8c:	e1a00004 	mov	r0, r4
    ee90:	eb0042e6 	bl	1fa30 <CString::Compare(char const*) const>
    ee94:	e3500000 	cmp	r0, #0
    ee98:	1a000005 	bne	eeb4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x2b8>
    ee9c:	e3a00f4d 	mov	r0, #308	; 0x134
    eea0:	eb004e8d 	bl	228dc <operator new(unsigned int)>
    eea4:	e1a01006 	mov	r1, r6
    eea8:	e1a05000 	mov	r5, r0
    eeac:	eb001526 	bl	1434c <CUSBGamePadSwitchProDevice::CUSBGamePadSwitchProDevice(CUSBFunction*)>
    eeb0:	eaffff61 	b	ec3c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    eeb4:	e59f1190 	ldr	r1, [pc, #400]	; f04c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x450>
    eeb8:	e1a00004 	mov	r0, r4
    eebc:	eb0042db 	bl	1fa30 <CString::Compare(char const*) const>
    eec0:	e3500000 	cmp	r0, #0
    eec4:	1a000005 	bne	eee0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x2e4>
    eec8:	e3a0001c 	mov	r0, #28
    eecc:	eb004e82 	bl	228dc <operator new(unsigned int)>
    eed0:	e1a01006 	mov	r1, r6
    eed4:	e1a05000 	mov	r5, r0
    eed8:	eb00189d 	bl	15154 <CUSBPrinterDevice::CUSBPrinterDevice(CUSBFunction*)>
    eedc:	eaffff56 	b	ec3c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    eee0:	e59f1168 	ldr	r1, [pc, #360]	; f050 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x454>
    eee4:	e1a00004 	mov	r0, r4
    eee8:	eb0042d0 	bl	1fa30 <CString::Compare(char const*) const>
    eeec:	e3500000 	cmp	r0, #0
    eef0:	0afffff4 	beq	eec8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x2cc>
    eef4:	e59f1158 	ldr	r1, [pc, #344]	; f054 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x458>
    eef8:	e1a00004 	mov	r0, r4
    eefc:	eb0042cb 	bl	1fa30 <CString::Compare(char const*) const>
    ef00:	e3500000 	cmp	r0, #0
    ef04:	1a000005 	bne	ef20 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x324>
    ef08:	e3a00020 	mov	r0, #32
    ef0c:	eb004e72 	bl	228dc <operator new(unsigned int)>
    ef10:	e1a01006 	mov	r1, r6
    ef14:	e1a05000 	mov	r5, r0
    ef18:	eb002109 	bl	17344 <CSMSC951xDevice::CSMSC951xDevice(CUSBFunction*)>
    ef1c:	eaffff46 	b	ec3c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    ef20:	e59f1130 	ldr	r1, [pc, #304]	; f058 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x45c>
    ef24:	e1a00004 	mov	r0, r4
    ef28:	eb0042c0 	bl	1fa30 <CString::Compare(char const*) const>
    ef2c:	e3500000 	cmp	r0, #0
    ef30:	1a000005 	bne	ef4c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x350>
    ef34:	e3a00020 	mov	r0, #32
    ef38:	eb004e67 	bl	228dc <operator new(unsigned int)>
    ef3c:	e1a01006 	mov	r1, r6
    ef40:	e1a05000 	mov	r5, r0
    ef44:	eb0023da 	bl	17eb4 <CLAN7800Device::CLAN7800Device(CUSBFunction*)>
    ef48:	eaffff3b 	b	ec3c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    ef4c:	e59f1108 	ldr	r1, [pc, #264]	; f05c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x460>
    ef50:	e1a00004 	mov	r0, r4
    ef54:	eb0042b5 	bl	1fa30 <CString::Compare(char const*) const>
    ef58:	e3500000 	cmp	r0, #0
    ef5c:	1a000005 	bne	ef78 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x37c>
    ef60:	e3a00028 	mov	r0, #40	; 0x28
    ef64:	eb004e5c 	bl	228dc <operator new(unsigned int)>
    ef68:	e1a01006 	mov	r1, r6
    ef6c:	e1a05000 	mov	r5, r0
    ef70:	eb001941 	bl	1547c <CUSBBluetoothDevice::CUSBBluetoothDevice(CUSBFunction*)>
    ef74:	eaffff30 	b	ec3c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    ef78:	e59f10e0 	ldr	r1, [pc, #224]	; f060 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x464>
    ef7c:	e1a00004 	mov	r0, r4
    ef80:	eb0042aa 	bl	1fa30 <CString::Compare(char const*) const>
    ef84:	e3500000 	cmp	r0, #0
    ef88:	0afffff4 	beq	ef60 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x364>
    ef8c:	e59f10d0 	ldr	r1, [pc, #208]	; f064 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x468>
    ef90:	e1a00004 	mov	r0, r4
    ef94:	eb0042a5 	bl	1fa30 <CString::Compare(char const*) const>
    ef98:	e3500000 	cmp	r0, #0
    ef9c:	1a000005 	bne	efb8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x3bc>
    efa0:	e3a00028 	mov	r0, #40	; 0x28
    efa4:	eb004e4c 	bl	228dc <operator new(unsigned int)>
    efa8:	e1a01006 	mov	r1, r6
    efac:	e1a05000 	mov	r5, r0
    efb0:	eb001abd 	bl	15aac <CUSBMIDIDevice::CUSBMIDIDevice(CUSBFunction*)>
    efb4:	eaffff20 	b	ec3c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    efb8:	e59f10a8 	ldr	r1, [pc, #168]	; f068 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x46c>
    efbc:	e1a00004 	mov	r0, r4
    efc0:	eb00429a 	bl	1fa30 <CString::Compare(char const*) const>
    efc4:	e3500000 	cmp	r0, #0
    efc8:	0afffff4 	beq	efa0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x3a4>
    efcc:	e59f1098 	ldr	r1, [pc, #152]	; f06c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x470>
    efd0:	e1a00004 	mov	r0, r4
    efd4:	eb004295 	bl	1fa30 <CString::Compare(char const*) const>
    efd8:	e3500000 	cmp	r0, #0
    efdc:	13a05000 	movne	r5, #0
    efe0:	1affff1f 	bne	ec64 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x68>
    efe4:	e3a00020 	mov	r0, #32
    efe8:	eb004e3b 	bl	228dc <operator new(unsigned int)>
    efec:	e1a01006 	mov	r1, r6
    eff0:	e1a05000 	mov	r5, r0
    eff4:	eb001ce9 	bl	163a0 <CUSBCDCEthernetDevice::CUSBCDCEthernetDevice(CUSBFunction*)>
    eff8:	eaffff0f 	b	ec3c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    effc:	00024e48 	.word	0x00024e48
    f000:	00024f74 	.word	0x00024f74
    f004:	00024e54 	.word	0x00024e54
    f008:	00024f20 	.word	0x00024f20
    f00c:	00024e60 	.word	0x00024e60
    f010:	00024e6c 	.word	0x00024e6c
    f014:	00024e20 	.word	0x00024e20
    f018:	00024e38 	.word	0x00024e38
    f01c:	00024930 	.word	0x00024930
    f020:	00024e78 	.word	0x00024e78
    f024:	00024e84 	.word	0x00024e84
    f028:	00024e90 	.word	0x00024e90
    f02c:	00024e9c 	.word	0x00024e9c
    f030:	00024f2c 	.word	0x00024f2c
    f034:	00024ea8 	.word	0x00024ea8
    f038:	00024f38 	.word	0x00024f38
    f03c:	00024eb4 	.word	0x00024eb4
    f040:	00024ec0 	.word	0x00024ec0
    f044:	00024ecc 	.word	0x00024ecc
    f048:	00024f44 	.word	0x00024f44
    f04c:	00024ed8 	.word	0x00024ed8
    f050:	00024ee4 	.word	0x00024ee4
    f054:	00024f50 	.word	0x00024f50
    f058:	00024ef0 	.word	0x00024ef0
    f05c:	00024efc 	.word	0x00024efc
    f060:	00024f08 	.word	0x00024f08
    f064:	00024f5c 	.word	0x00024f5c
    f068:	00024f14 	.word	0x00024f14
    f06c:	00024f68 	.word	0x00024f68

0000f070 <CUSBStandardHub::~CUSBStandardHub()>:
    f070:	e5902014 	ldr	r2, [r0, #20]
    f074:	e59f3088 	ldr	r3, [pc, #136]	; f104 <CUSBStandardHub::~CUSBStandardHub()+0x94>
    f078:	e3520000 	cmp	r2, #0
    f07c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    f080:	e1a07000 	mov	r7, r0
    f084:	e5803000 	str	r3, [r0]
    f088:	0a000013 	beq	f0dc <CUSBStandardHub::~CUSBStandardHub()+0x6c>
    f08c:	e3a04000 	mov	r4, #0
    f090:	e3a09004 	mov	r9, #4
    f094:	e1a08004 	mov	r8, r4
    f098:	e2805014 	add	r5, r0, #20
    f09c:	e2806034 	add	r6, r0, #52	; 0x34
    f0a0:	e5960004 	ldr	r0, [r6, #4]
    f0a4:	e1a01009 	mov	r1, r9
    f0a8:	eb004e0f 	bl	228ec <operator delete(void*, unsigned int)>
    f0ac:	e5950004 	ldr	r0, [r5, #4]
    f0b0:	e2844001 	add	r4, r4, #1
    f0b4:	e3500000 	cmp	r0, #0
    f0b8:	e5a68004 	str	r8, [r6, #4]!
    f0bc:	0a000002 	beq	f0cc <CUSBStandardHub::~CUSBStandardHub()+0x5c>
    f0c0:	e5903000 	ldr	r3, [r0]
    f0c4:	e5933004 	ldr	r3, [r3, #4]
    f0c8:	e12fff33 	blx	r3
    f0cc:	e5973014 	ldr	r3, [r7, #20]
    f0d0:	e5a58004 	str	r8, [r5, #4]!
    f0d4:	e1530004 	cmp	r3, r4
    f0d8:	8afffff0 	bhi	f0a0 <CUSBStandardHub::~CUSBStandardHub()+0x30>
    f0dc:	e3a04000 	mov	r4, #0
    f0e0:	e3a01009 	mov	r1, #9
    f0e4:	e5970010 	ldr	r0, [r7, #16]
    f0e8:	e5874014 	str	r4, [r7, #20]
    f0ec:	eb004dfe 	bl	228ec <operator delete(void*, unsigned int)>
    f0f0:	e5874010 	str	r4, [r7, #16]
    f0f4:	e1a00007 	mov	r0, r7
    f0f8:	eb001559 	bl	14664 <CUSBFunction::~CUSBFunction()>
    f0fc:	e1a00007 	mov	r0, r7
    f100:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    f104:	00024f98 	.word	0x00024f98

0000f108 <CUSBStandardHub::~CUSBStandardHub()>:
    f108:	e92d4010 	push	{r4, lr}
    f10c:	e1a04000 	mov	r4, r0
    f110:	ebffffd6 	bl	f070 <CUSBStandardHub::~CUSBStandardHub()>
    f114:	e1a00004 	mov	r0, r4
    f118:	e3a01058 	mov	r1, #88	; 0x58
    f11c:	eb004df2 	bl	228ec <operator delete(void*, unsigned int)>
    f120:	e1a00004 	mov	r0, r4
    f124:	e8bd8010 	pop	{r4, pc}

0000f128 <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)>:
    f128:	e92d4010 	push	{r4, lr}
    f12c:	e1a04000 	mov	r4, r0
    f130:	eb001599 	bl	1479c <CUSBFunction::CUSBFunction(CUSBFunction*)>
    f134:	e3a03000 	mov	r3, #0
    f138:	e2840038 	add	r0, r4, #56	; 0x38
    f13c:	e1a01000 	mov	r1, r0
    f140:	e59fc028 	ldr	ip, [pc, #40]	; f170 <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)+0x48>
    f144:	e1a02003 	mov	r2, r3
    f148:	e5843010 	str	r3, [r4, #16]
    f14c:	e5843014 	str	r3, [r4, #20]
    f150:	e584c000 	str	ip, [r4]
    f154:	e2843018 	add	r3, r4, #24
    f158:	e4832004 	str	r2, [r3], #4
    f15c:	e1530000 	cmp	r3, r0
    f160:	e4812004 	str	r2, [r1], #4
    f164:	1afffffb 	bne	f158 <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)+0x30>
    f168:	e1a00004 	mov	r0, r4
    f16c:	e8bd8010 	pop	{r4, pc}
    f170:	00024f98 	.word	0x00024f98

0000f174 <CUSBStandardHub::EnumeratePorts()>:
    f174:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f178:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    f17c:	e1a06000 	mov	r6, r0
    f180:	eb001612 	bl	149d0 <CUSBFunction::GetHost() const>
    f184:	e250b000 	subs	fp, r0, #0
    f188:	0a0001a7 	beq	f82c <CUSBStandardHub::EnumeratePorts()+0x6b8>
    f18c:	e1a00006 	mov	r0, r6
    f190:	eb0015fd 	bl	1498c <CUSBFunction::GetEndpoint0() const>
    f194:	e250a000 	subs	sl, r0, #0
    f198:	0a0001a8 	beq	f840 <CUSBStandardHub::EnumeratePorts()+0x6cc>
    f19c:	e5963014 	ldr	r3, [r6, #20]
    f1a0:	e3530000 	cmp	r3, #0
    f1a4:	0a000020 	beq	f22c <CUSBStandardHub::EnumeratePorts()+0xb8>
    f1a8:	e3a03000 	mov	r3, #0
    f1ac:	e3a08008 	mov	r8, #8
    f1b0:	e1a04003 	mov	r4, r3
    f1b4:	e3a07003 	mov	r7, #3
    f1b8:	e3a05023 	mov	r5, #35	; 0x23
    f1bc:	e1a09003 	mov	r9, r3
    f1c0:	ea000002 	b	f1d0 <CUSBStandardHub::EnumeratePorts()+0x5c>
    f1c4:	e5963014 	ldr	r3, [r6, #20]
    f1c8:	e1530009 	cmp	r3, r9
    f1cc:	9a00001d 	bls	f248 <CUSBStandardHub::EnumeratePorts()+0xd4>
    f1d0:	e2899001 	add	r9, r9, #1
    f1d4:	e6ff3079 	uxth	r3, r9
    f1d8:	e58d3004 	str	r3, [sp, #4]
    f1dc:	e58d400c 	str	r4, [sp, #12]
    f1e0:	e58d4008 	str	r4, [sp, #8]
    f1e4:	e58d8000 	str	r8, [sp]
    f1e8:	e1a03007 	mov	r3, r7
    f1ec:	e1a02005 	mov	r2, r5
    f1f0:	e1a0100a 	mov	r1, sl
    f1f4:	e1a0000b 	mov	r0, fp
    f1f8:	ebfffd03 	bl	e60c <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    f1fc:	e3500000 	cmp	r0, #0
    f200:	aaffffef 	bge	f1c4 <CUSBStandardHub::EnumeratePorts()+0x50>
    f204:	eb0036d6 	bl	1cd64 <CLogger::Get()>
    f208:	e58d9000 	str	r9, [sp]
    f20c:	e59f36b0 	ldr	r3, [pc, #1712]	; f8c4 <CUSBStandardHub::EnumeratePorts()+0x750>
    f210:	e3a02001 	mov	r2, #1
    f214:	e59f16ac 	ldr	r1, [pc, #1708]	; f8c8 <CUSBStandardHub::EnumeratePorts()+0x754>
    f218:	eb00387a 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f21c:	e3a09000 	mov	r9, #0
    f220:	e1a00009 	mov	r0, r9
    f224:	e28dd02c 	add	sp, sp, #44	; 0x2c
    f228:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f22c:	e3a02091 	mov	r2, #145	; 0x91
    f230:	e59f1694 	ldr	r1, [pc, #1684]	; f8cc <CUSBStandardHub::EnumeratePorts()+0x758>
    f234:	e59f0694 	ldr	r0, [pc, #1684]	; f8d0 <CUSBStandardHub::EnumeratePorts()+0x75c>
    f238:	eb002cd6 	bl	1a598 <assertion_failed>
    f23c:	e5963014 	ldr	r3, [r6, #20]
    f240:	e3530000 	cmp	r3, #0
    f244:	1affffd7 	bne	f1a8 <CUSBStandardHub::EnumeratePorts()+0x34>
    f248:	eb003569 	bl	1c7f4 <CKernelOptions::Get()>
    f24c:	e3500000 	cmp	r0, #0
    f250:	0a000097 	beq	f4b4 <CUSBStandardHub::EnumeratePorts()+0x340>
    f254:	eb00355b 	bl	1c7c8 <CKernelOptions::GetUSBPowerDelay() const>
    f258:	e2504000 	subs	r4, r0, #0
    f25c:	0a000094 	beq	f4b4 <CUSBStandardHub::EnumeratePorts()+0x340>
    f260:	eb004920 	bl	216e8 <CTimer::Get()>
    f264:	e1a00004 	mov	r0, r4
    f268:	eb0048e5 	bl	21604 <CTimer::SimpleMsDelay(unsigned int)>
    f26c:	e5963014 	ldr	r3, [r6, #20]
    f270:	e3530000 	cmp	r3, #0
    f274:	0a0000a1 	beq	f500 <CUSBStandardHub::EnumeratePorts()+0x38c>
    f278:	e2863018 	add	r3, r6, #24
    f27c:	e58d3024 	str	r3, [sp, #36]	; 0x24
    f280:	e1a09003 	mov	r9, r3
    f284:	e3a04001 	mov	r4, #1
    f288:	e59f863c 	ldr	r8, [pc, #1596]	; f8cc <CUSBStandardHub::EnumeratePorts()+0x758>
    f28c:	e2865034 	add	r5, r6, #52	; 0x34
    f290:	ea00000a 	b	f2c0 <CUSBStandardHub::EnumeratePorts()+0x14c>
    f294:	eb0036b2 	bl	1cd64 <CLogger::Get()>
    f298:	e58d4000 	str	r4, [sp]
    f29c:	e59f3630 	ldr	r3, [pc, #1584]	; f8d4 <CUSBStandardHub::EnumeratePorts()+0x760>
    f2a0:	e3a02001 	mov	r2, #1
    f2a4:	e59f161c 	ldr	r1, [pc, #1564]	; f8c8 <CUSBStandardHub::EnumeratePorts()+0x754>
    f2a8:	eb003856 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f2ac:	e5963014 	ldr	r3, [r6, #20]
    f2b0:	e2899004 	add	r9, r9, #4
    f2b4:	e1530004 	cmp	r3, r4
    f2b8:	e2844001 	add	r4, r4, #1
    f2bc:	9a0000c8 	bls	f5e4 <CUSBStandardHub::EnumeratePorts()+0x470>
    f2c0:	e5953004 	ldr	r3, [r5, #4]
    f2c4:	e3530000 	cmp	r3, #0
    f2c8:	0a000003 	beq	f2dc <CUSBStandardHub::EnumeratePorts()+0x168>
    f2cc:	e3a020b1 	mov	r2, #177	; 0xb1
    f2d0:	e1a01008 	mov	r1, r8
    f2d4:	e59f05fc 	ldr	r0, [pc, #1532]	; f8d8 <CUSBStandardHub::EnumeratePorts()+0x764>
    f2d8:	eb002cae 	bl	1a598 <assertion_failed>
    f2dc:	e3a00004 	mov	r0, #4
    f2e0:	eb004d7d 	bl	228dc <operator new(unsigned int)>
    f2e4:	e3a02004 	mov	r2, #4
    f2e8:	e3a03000 	mov	r3, #0
    f2ec:	e6ff7074 	uxth	r7, r4
    f2f0:	e5a50004 	str	r0, [r5, #4]!
    f2f4:	e1a0100a 	mov	r1, sl
    f2f8:	e58d0008 	str	r0, [sp, #8]
    f2fc:	e58d200c 	str	r2, [sp, #12]
    f300:	e88d0088 	stm	sp, {r3, r7}
    f304:	e3a020a3 	mov	r2, #163	; 0xa3
    f308:	e1a0000b 	mov	r0, fp
    f30c:	ebfffcbe 	bl	e60c <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    f310:	e3500004 	cmp	r0, #4
    f314:	1affffde 	bne	f294 <CUSBStandardHub::EnumeratePorts()+0x120>
    f318:	e5952000 	ldr	r2, [r5]
    f31c:	e5d23000 	ldrb	r3, [r2]
    f320:	e5d22001 	ldrb	r2, [r2, #1]
    f324:	e1833402 	orr	r3, r3, r2, lsl #8
    f328:	e3130c01 	tst	r3, #256	; 0x100
    f32c:	0a000062 	beq	f4bc <CUSBStandardHub::EnumeratePorts()+0x348>
    f330:	e3130001 	tst	r3, #1
    f334:	0affffdc 	beq	f2ac <CUSBStandardHub::EnumeratePorts()+0x138>
    f338:	e3a03000 	mov	r3, #0
    f33c:	e58d300c 	str	r3, [sp, #12]
    f340:	e58d3008 	str	r3, [sp, #8]
    f344:	e3a03004 	mov	r3, #4
    f348:	e58d7004 	str	r7, [sp, #4]
    f34c:	e58d3000 	str	r3, [sp]
    f350:	e3a02023 	mov	r2, #35	; 0x23
    f354:	e3a03003 	mov	r3, #3
    f358:	e1a0100a 	mov	r1, sl
    f35c:	e1a0000b 	mov	r0, fp
    f360:	ebfffca9 	bl	e60c <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    f364:	e3500000 	cmp	r0, #0
    f368:	ba00005c 	blt	f4e0 <CUSBStandardHub::EnumeratePorts()+0x36c>
    f36c:	eb0048dd 	bl	216e8 <CTimer::Get()>
    f370:	e3a00064 	mov	r0, #100	; 0x64
    f374:	eb0048a2 	bl	21604 <CTimer::SimpleMsDelay(unsigned int)>
    f378:	e3a02004 	mov	r2, #4
    f37c:	e5953000 	ldr	r3, [r5]
    f380:	e58d200c 	str	r2, [sp, #12]
    f384:	e3a02000 	mov	r2, #0
    f388:	e58d3008 	str	r3, [sp, #8]
    f38c:	e58d2000 	str	r2, [sp]
    f390:	e1a03002 	mov	r3, r2
    f394:	e58d7004 	str	r7, [sp, #4]
    f398:	e3a020a3 	mov	r2, #163	; 0xa3
    f39c:	e1a0100a 	mov	r1, sl
    f3a0:	e1a0000b 	mov	r0, fp
    f3a4:	ebfffc98 	bl	e60c <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    f3a8:	e3500004 	cmp	r0, #4
    f3ac:	1a00012d 	bne	f868 <CUSBStandardHub::EnumeratePorts()+0x6f4>
    f3b0:	e5952000 	ldr	r2, [r5]
    f3b4:	e5d23000 	ldrb	r3, [r2]
    f3b8:	e5d22001 	ldrb	r2, [r2, #1]
    f3bc:	e1833402 	orr	r3, r3, r2, lsl #8
    f3c0:	e3130002 	tst	r3, #2
    f3c4:	0a0000b2 	beq	f694 <CUSBStandardHub::EnumeratePorts()+0x520>
    f3c8:	e2132008 	ands	r2, r3, #8
    f3cc:	1a000127 	bne	f870 <CUSBStandardHub::EnumeratePorts()+0x6fc>
    f3d0:	e3130c02 	tst	r3, #512	; 0x200
    f3d4:	158d2020 	strne	r2, [sp, #32]
    f3d8:	1a000003 	bne	f3ec <CUSBStandardHub::EnumeratePorts()+0x278>
    f3dc:	e3130b01 	tst	r3, #1024	; 0x400
    f3e0:	03a03001 	moveq	r3, #1
    f3e4:	13a03002 	movne	r3, #2
    f3e8:	e58d3020 	str	r3, [sp, #32]
    f3ec:	e1a00006 	mov	r0, r6
    f3f0:	eb001555 	bl	1494c <CUSBFunction::GetDevice() const>
    f3f4:	e2507000 	subs	r7, r0, #0
    f3f8:	0a000115 	beq	f854 <CUSBStandardHub::EnumeratePorts()+0x6e0>
    f3fc:	e1a00007 	mov	r0, r7
    f400:	ebfff8a4 	bl	d698 <CUSBDevice::IsSplit() const>
    f404:	e58d0014 	str	r0, [sp, #20]
    f408:	e1a00007 	mov	r0, r7
    f40c:	ebfff8a3 	bl	d6a0 <CUSBDevice::GetHubAddress() const>
    f410:	e58d0018 	str	r0, [sp, #24]
    f414:	e1a00007 	mov	r0, r7
    f418:	ebfff8a2 	bl	d6a8 <CUSBDevice::GetHubPortNumber() const>
    f41c:	e59d3014 	ldr	r3, [sp, #20]
    f420:	e58d001c 	str	r0, [sp, #28]
    f424:	e3530000 	cmp	r3, #0
    f428:	0a0000a0 	beq	f6b0 <CUSBStandardHub::EnumeratePorts()+0x53c>
    f42c:	e5993000 	ldr	r3, [r9]
    f430:	e3530000 	cmp	r3, #0
    f434:	0a000003 	beq	f448 <CUSBStandardHub::EnumeratePorts()+0x2d4>
    f438:	e59f249c 	ldr	r2, [pc, #1180]	; f8dc <CUSBStandardHub::EnumeratePorts()+0x768>
    f43c:	e1a01008 	mov	r1, r8
    f440:	e59f0498 	ldr	r0, [pc, #1176]	; f8e0 <CUSBStandardHub::EnumeratePorts()+0x76c>
    f444:	eb002c53 	bl	1a598 <assertion_failed>
    f448:	e3a00048 	mov	r0, #72	; 0x48
    f44c:	eb004d22 	bl	228dc <operator new(unsigned int)>
    f450:	e1a07000 	mov	r7, r0
    f454:	e59d301c 	ldr	r3, [sp, #28]
    f458:	e59d2020 	ldr	r2, [sp, #32]
    f45c:	e58d3004 	str	r3, [sp, #4]
    f460:	e59d3018 	ldr	r3, [sp, #24]
    f464:	e1a0100b 	mov	r1, fp
    f468:	e58d3000 	str	r3, [sp]
    f46c:	e59d3014 	ldr	r3, [sp, #20]
    f470:	ebfff7a6 	bl	d310 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, bool, unsigned char, unsigned char)>
    f474:	e1a00007 	mov	r0, r7
    f478:	e5897000 	str	r7, [r9]
    f47c:	e5903000 	ldr	r3, [r0]
    f480:	e5933008 	ldr	r3, [r3, #8]
    f484:	e12fff33 	blx	r3
    f488:	e3500000 	cmp	r0, #0
    f48c:	1affff86 	bne	f2ac <CUSBStandardHub::EnumeratePorts()+0x138>
    f490:	e5990000 	ldr	r0, [r9]
    f494:	e3500000 	cmp	r0, #0
    f498:	0a000002 	beq	f4a8 <CUSBStandardHub::EnumeratePorts()+0x334>
    f49c:	e5903000 	ldr	r3, [r0]
    f4a0:	e5933004 	ldr	r3, [r3, #4]
    f4a4:	e12fff33 	blx	r3
    f4a8:	e3a03000 	mov	r3, #0
    f4ac:	e5893000 	str	r3, [r9]
    f4b0:	eaffff7d 	b	f2ac <CUSBStandardHub::EnumeratePorts()+0x138>
    f4b4:	e59f4428 	ldr	r4, [pc, #1064]	; f8e4 <CUSBStandardHub::EnumeratePorts()+0x770>
    f4b8:	eaffff68 	b	f260 <CUSBStandardHub::EnumeratePorts()+0xec>
    f4bc:	e3a020bf 	mov	r2, #191	; 0xbf
    f4c0:	e1a01008 	mov	r1, r8
    f4c4:	e59f041c 	ldr	r0, [pc, #1052]	; f8e8 <CUSBStandardHub::EnumeratePorts()+0x774>
    f4c8:	eb002c32 	bl	1a598 <assertion_failed>
    f4cc:	e5952000 	ldr	r2, [r5]
    f4d0:	e5d23000 	ldrb	r3, [r2]
    f4d4:	e5d22001 	ldrb	r2, [r2, #1]
    f4d8:	e1833402 	orr	r3, r3, r2, lsl #8
    f4dc:	eaffff93 	b	f330 <CUSBStandardHub::EnumeratePorts()+0x1bc>
    f4e0:	eb00361f 	bl	1cd64 <CLogger::Get()>
    f4e4:	e58d4000 	str	r4, [sp]
    f4e8:	e59f33fc 	ldr	r3, [pc, #1020]	; f8ec <CUSBStandardHub::EnumeratePorts()+0x778>
    f4ec:	e3a02001 	mov	r2, #1
    f4f0:	e59f13d0 	ldr	r1, [pc, #976]	; f8c8 <CUSBStandardHub::EnumeratePorts()+0x754>
    f4f4:	eb0037c3 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f4f8:	eaffff6b 	b	f2ac <CUSBStandardHub::EnumeratePorts()+0x138>
    f4fc:	e59db014 	ldr	fp, [sp, #20]
    f500:	e3a00004 	mov	r0, #4
    f504:	eb004cf4 	bl	228dc <operator new(unsigned int)>
    f508:	e3a09000 	mov	r9, #0
    f50c:	e3a04004 	mov	r4, #4
    f510:	e58d0014 	str	r0, [sp, #20]
    f514:	e58d0008 	str	r0, [sp, #8]
    f518:	e58d400c 	str	r4, [sp, #12]
    f51c:	e58d9004 	str	r9, [sp, #4]
    f520:	e58d9000 	str	r9, [sp]
    f524:	e1a03009 	mov	r3, r9
    f528:	e3a020a0 	mov	r2, #160	; 0xa0
    f52c:	e1a0100a 	mov	r1, sl
    f530:	e1a0000b 	mov	r0, fp
    f534:	ebfffc34 	bl	e60c <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    f538:	e1500004 	cmp	r0, r4
    f53c:	e1a05000 	mov	r5, r0
    f540:	1a0000a0 	bne	f7c8 <CUSBStandardHub::EnumeratePorts()+0x654>
    f544:	e59d3014 	ldr	r3, [sp, #20]
    f548:	e5d37000 	ldrb	r7, [r3]
    f54c:	e2177002 	ands	r7, r7, #2
    f550:	0a000068 	beq	f6f8 <CUSBStandardHub::EnumeratePorts()+0x584>
    f554:	e5963014 	ldr	r3, [r6, #20]
    f558:	e3530000 	cmp	r3, #0
    f55c:	0a000014 	beq	f5b4 <CUSBStandardHub::EnumeratePorts()+0x440>
    f560:	e3a05001 	mov	r5, #1
    f564:	e1a04009 	mov	r4, r9
    f568:	e3a08008 	mov	r8, #8
    f56c:	e1a09005 	mov	r9, r5
    f570:	e3a07023 	mov	r7, #35	; 0x23
    f574:	ea000000 	b	f57c <CUSBStandardHub::EnumeratePorts()+0x408>
    f578:	e1a05002 	mov	r5, r2
    f57c:	e6ff3075 	uxth	r3, r5
    f580:	e58d3004 	str	r3, [sp, #4]
    f584:	e1a02007 	mov	r2, r7
    f588:	e1a03009 	mov	r3, r9
    f58c:	e58d400c 	str	r4, [sp, #12]
    f590:	e58d4008 	str	r4, [sp, #8]
    f594:	e58d8000 	str	r8, [sp]
    f598:	e1a0100a 	mov	r1, sl
    f59c:	e1a0000b 	mov	r0, fp
    f5a0:	ebfffc19 	bl	e60c <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    f5a4:	e5963014 	ldr	r3, [r6, #20]
    f5a8:	e2852001 	add	r2, r5, #1
    f5ac:	e1550003 	cmp	r5, r3
    f5b0:	3afffff0 	bcc	f578 <CUSBStandardHub::EnumeratePorts()+0x404>
    f5b4:	e3a09000 	mov	r9, #0
    f5b8:	eb0035e9 	bl	1cd64 <CLogger::Get()>
    f5bc:	e59f332c 	ldr	r3, [pc, #812]	; f8f0 <CUSBStandardHub::EnumeratePorts()+0x77c>
    f5c0:	e3a02001 	mov	r2, #1
    f5c4:	e59f12fc 	ldr	r1, [pc, #764]	; f8c8 <CUSBStandardHub::EnumeratePorts()+0x754>
    f5c8:	eb00378e 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f5cc:	e59d0014 	ldr	r0, [sp, #20]
    f5d0:	e3a01004 	mov	r1, #4
    f5d4:	eb004cc4 	bl	228ec <operator delete(void*, unsigned int)>
    f5d8:	e1a00009 	mov	r0, r9
    f5dc:	e28dd02c 	add	sp, sp, #44	; 0x2c
    f5e0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f5e4:	e3530000 	cmp	r3, #0
    f5e8:	0affffc4 	beq	f500 <CUSBStandardHub::EnumeratePorts()+0x38c>
    f5ec:	e58db014 	str	fp, [sp, #20]
    f5f0:	e3a04001 	mov	r4, #1
    f5f4:	e59f52cc 	ldr	r5, [pc, #716]	; f8c8 <CUSBStandardHub::EnumeratePorts()+0x754>
    f5f8:	e59f92f4 	ldr	r9, [pc, #756]	; f8f4 <CUSBStandardHub::EnumeratePorts()+0x780>
    f5fc:	e3a08002 	mov	r8, #2
    f600:	e3a07000 	mov	r7, #0
    f604:	e59db024 	ldr	fp, [sp, #36]	; 0x24
    f608:	ea000011 	b	f654 <CUSBStandardHub::EnumeratePorts()+0x4e0>
    f60c:	eb0035d4 	bl	1cd64 <CLogger::Get()>
    f610:	e58d4000 	str	r4, [sp]
    f614:	e1a03009 	mov	r3, r9
    f618:	e1a02008 	mov	r2, r8
    f61c:	e1a01005 	mov	r1, r5
    f620:	eb003778 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f624:	e59b0000 	ldr	r0, [fp]
    f628:	e3500000 	cmp	r0, #0
    f62c:	0a000002 	beq	f63c <CUSBStandardHub::EnumeratePorts()+0x4c8>
    f630:	e5903000 	ldr	r3, [r0]
    f634:	e5933004 	ldr	r3, [r3, #4]
    f638:	e12fff33 	blx	r3
    f63c:	e5963014 	ldr	r3, [r6, #20]
    f640:	e58b7000 	str	r7, [fp]
    f644:	e1530004 	cmp	r3, r4
    f648:	e28bb004 	add	fp, fp, #4
    f64c:	e2844001 	add	r4, r4, #1
    f650:	9affffa9 	bls	f4fc <CUSBStandardHub::EnumeratePorts()+0x388>
    f654:	e59b0000 	ldr	r0, [fp]
    f658:	e3500000 	cmp	r0, #0
    f65c:	0afffff8 	beq	f644 <CUSBStandardHub::EnumeratePorts()+0x4d0>
    f660:	e5903000 	ldr	r3, [r0]
    f664:	e593300c 	ldr	r3, [r3, #12]
    f668:	e12fff33 	blx	r3
    f66c:	e3500000 	cmp	r0, #0
    f670:	0affffe5 	beq	f60c <CUSBStandardHub::EnumeratePorts()+0x498>
    f674:	eb0035ba 	bl	1cd64 <CLogger::Get()>
    f678:	e59f3278 	ldr	r3, [pc, #632]	; f8f8 <CUSBStandardHub::EnumeratePorts()+0x784>
    f67c:	e58d4000 	str	r4, [sp]
    f680:	e3a02004 	mov	r2, #4
    f684:	e1a01005 	mov	r1, r5
    f688:	eb00375e 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f68c:	e5963014 	ldr	r3, [r6, #20]
    f690:	eaffffeb 	b	f644 <CUSBStandardHub::EnumeratePorts()+0x4d0>
    f694:	eb0035b2 	bl	1cd64 <CLogger::Get()>
    f698:	e58d4000 	str	r4, [sp]
    f69c:	e59f3258 	ldr	r3, [pc, #600]	; f8fc <CUSBStandardHub::EnumeratePorts()+0x788>
    f6a0:	e3a02001 	mov	r2, #1
    f6a4:	e59f121c 	ldr	r1, [pc, #540]	; f8c8 <CUSBStandardHub::EnumeratePorts()+0x754>
    f6a8:	eb003756 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f6ac:	eafffefe 	b	f2ac <CUSBStandardHub::EnumeratePorts()+0x138>
    f6b0:	e1a00007 	mov	r0, r7
    f6b4:	ebfff7f5 	bl	d690 <CUSBDevice::GetSpeed() const>
    f6b8:	e3500002 	cmp	r0, #2
    f6bc:	1affff5a 	bne	f42c <CUSBStandardHub::EnumeratePorts()+0x2b8>
    f6c0:	e59d3020 	ldr	r3, [sp, #32]
    f6c4:	e3530002 	cmp	r3, #2
    f6c8:	0affff57 	beq	f42c <CUSBStandardHub::EnumeratePorts()+0x2b8>
    f6cc:	e1a00007 	mov	r0, r7
    f6d0:	ebfff7ec 	bl	d688 <CUSBDevice::GetAddress() const>
    f6d4:	e5993000 	ldr	r3, [r9]
    f6d8:	e6ef2074 	uxtb	r2, r4
    f6dc:	e3530000 	cmp	r3, #0
    f6e0:	e58d0018 	str	r0, [sp, #24]
    f6e4:	e58d201c 	str	r2, [sp, #28]
    f6e8:	0a000041 	beq	f7f4 <CUSBStandardHub::EnumeratePorts()+0x680>
    f6ec:	e3a03001 	mov	r3, #1
    f6f0:	e58d3014 	str	r3, [sp, #20]
    f6f4:	eaffff4f 	b	f438 <CUSBStandardHub::EnumeratePorts()+0x2c4>
    f6f8:	e59d0014 	ldr	r0, [sp, #20]
    f6fc:	e1a01005 	mov	r1, r5
    f700:	eb004c79 	bl	228ec <operator delete(void*, unsigned int)>
    f704:	e5963014 	ldr	r3, [r6, #20]
    f708:	e3530000 	cmp	r3, #0
    f70c:	0a00006a 	beq	f8bc <CUSBStandardHub::EnumeratePorts()+0x748>
    f710:	e3a04001 	mov	r4, #1
    f714:	e58d5014 	str	r5, [sp, #20]
    f718:	e1a09004 	mov	r9, r4
    f71c:	e2865038 	add	r5, r6, #56	; 0x38
    f720:	ea000004 	b	f738 <CUSBStandardHub::EnumeratePorts()+0x5c4>
    f724:	e5963014 	ldr	r3, [r6, #20]
    f728:	e2855004 	add	r5, r5, #4
    f72c:	e1530004 	cmp	r3, r4
    f730:	e2844001 	add	r4, r4, #1
    f734:	9afffeb9 	bls	f220 <CUSBStandardHub::EnumeratePorts()+0xac>
    f738:	e5953000 	ldr	r3, [r5]
    f73c:	e59d2014 	ldr	r2, [sp, #20]
    f740:	e6ff8074 	uxth	r8, r4
    f744:	e58d200c 	str	r2, [sp, #12]
    f748:	e58d3008 	str	r3, [sp, #8]
    f74c:	e58d7000 	str	r7, [sp]
    f750:	e58d8004 	str	r8, [sp, #4]
    f754:	e3a03000 	mov	r3, #0
    f758:	e3a020a3 	mov	r2, #163	; 0xa3
    f75c:	e1a0100a 	mov	r1, sl
    f760:	e1a0000b 	mov	r0, fp
    f764:	ebfffba8 	bl	e60c <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    f768:	e3500004 	cmp	r0, #4
    f76c:	1affffec 	bne	f724 <CUSBStandardHub::EnumeratePorts()+0x5b0>
    f770:	e5953000 	ldr	r3, [r5]
    f774:	e5d33000 	ldrb	r3, [r3]
    f778:	e3130008 	tst	r3, #8
    f77c:	0affffe8 	beq	f724 <CUSBStandardHub::EnumeratePorts()+0x5b0>
    f780:	e3a03008 	mov	r3, #8
    f784:	e3a02023 	mov	r2, #35	; 0x23
    f788:	e1a0100a 	mov	r1, sl
    f78c:	e58d3000 	str	r3, [sp]
    f790:	e58d700c 	str	r7, [sp, #12]
    f794:	e3a03001 	mov	r3, #1
    f798:	e58d7008 	str	r7, [sp, #8]
    f79c:	e58d8004 	str	r8, [sp, #4]
    f7a0:	e1a0000b 	mov	r0, fp
    f7a4:	ebfffb98 	bl	e60c <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    f7a8:	eb00356d 	bl	1cd64 <CLogger::Get()>
    f7ac:	e58d4000 	str	r4, [sp]
    f7b0:	e59f3148 	ldr	r3, [pc, #328]	; f900 <CUSBStandardHub::EnumeratePorts()+0x78c>
    f7b4:	e3a02001 	mov	r2, #1
    f7b8:	e59f1108 	ldr	r1, [pc, #264]	; f8c8 <CUSBStandardHub::EnumeratePorts()+0x754>
    f7bc:	eb003711 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f7c0:	e1a09007 	mov	r9, r7
    f7c4:	eaffffd6 	b	f724 <CUSBStandardHub::EnumeratePorts()+0x5b0>
    f7c8:	eb003565 	bl	1cd64 <CLogger::Get()>
    f7cc:	e59f3130 	ldr	r3, [pc, #304]	; f904 <CUSBStandardHub::EnumeratePorts()+0x790>
    f7d0:	e3a02001 	mov	r2, #1
    f7d4:	e59f10ec 	ldr	r1, [pc, #236]	; f8c8 <CUSBStandardHub::EnumeratePorts()+0x754>
    f7d8:	eb00370a 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f7dc:	e59d0014 	ldr	r0, [sp, #20]
    f7e0:	e1a01004 	mov	r1, r4
    f7e4:	eb004c40 	bl	228ec <operator delete(void*, unsigned int)>
    f7e8:	e1a00009 	mov	r0, r9
    f7ec:	e28dd02c 	add	sp, sp, #44	; 0x2c
    f7f0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f7f4:	e3a00048 	mov	r0, #72	; 0x48
    f7f8:	eb004c37 	bl	228dc <operator new(unsigned int)>
    f7fc:	e1a07000 	mov	r7, r0
    f800:	e6ef3074 	uxtb	r3, r4
    f804:	e58d3004 	str	r3, [sp, #4]
    f808:	e59d3018 	ldr	r3, [sp, #24]
    f80c:	e59d2020 	ldr	r2, [sp, #32]
    f810:	e58d3000 	str	r3, [sp]
    f814:	e1a0100b 	mov	r1, fp
    f818:	e3a03001 	mov	r3, #1
    f81c:	ebfff6bb 	bl	d310 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, bool, unsigned char, unsigned char)>
    f820:	e5897000 	str	r7, [r9]
    f824:	e1a00007 	mov	r0, r7
    f828:	eaffff13 	b	f47c <CUSBStandardHub::EnumeratePorts()+0x308>
    f82c:	e3a0208c 	mov	r2, #140	; 0x8c
    f830:	e59f1094 	ldr	r1, [pc, #148]	; f8cc <CUSBStandardHub::EnumeratePorts()+0x758>
    f834:	e59f00cc 	ldr	r0, [pc, #204]	; f908 <CUSBStandardHub::EnumeratePorts()+0x794>
    f838:	eb002b56 	bl	1a598 <assertion_failed>
    f83c:	eafffe52 	b	f18c <CUSBStandardHub::EnumeratePorts()+0x18>
    f840:	e3a0208f 	mov	r2, #143	; 0x8f
    f844:	e59f1080 	ldr	r1, [pc, #128]	; f8cc <CUSBStandardHub::EnumeratePorts()+0x758>
    f848:	e59f00bc 	ldr	r0, [pc, #188]	; f90c <CUSBStandardHub::EnumeratePorts()+0x798>
    f84c:	eb002b51 	bl	1a598 <assertion_failed>
    f850:	eafffe51 	b	f19c <CUSBStandardHub::EnumeratePorts()+0x28>
    f854:	e3a020fd 	mov	r2, #253	; 0xfd
    f858:	e1a01008 	mov	r1, r8
    f85c:	e59f00ac 	ldr	r0, [pc, #172]	; f910 <CUSBStandardHub::EnumeratePorts()+0x79c>
    f860:	eb002b4c 	bl	1a598 <assertion_failed>
    f864:	eafffee4 	b	f3fc <CUSBStandardHub::EnumeratePorts()+0x288>
    f868:	e3a09000 	mov	r9, #0
    f86c:	eafffe6b 	b	f220 <CUSBStandardHub::EnumeratePorts()+0xac>
    f870:	e3a02000 	mov	r2, #0
    f874:	e3a03008 	mov	r3, #8
    f878:	e1a0100a 	mov	r1, sl
    f87c:	e58d200c 	str	r2, [sp, #12]
    f880:	e58d2008 	str	r2, [sp, #8]
    f884:	e58d3000 	str	r3, [sp]
    f888:	e3a02023 	mov	r2, #35	; 0x23
    f88c:	e3a03001 	mov	r3, #1
    f890:	e58d7004 	str	r7, [sp, #4]
    f894:	e1a0000b 	mov	r0, fp
    f898:	ebfffb5b 	bl	e60c <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    f89c:	eb003530 	bl	1cd64 <CLogger::Get()>
    f8a0:	e58d4000 	str	r4, [sp]
    f8a4:	e59f3054 	ldr	r3, [pc, #84]	; f900 <CUSBStandardHub::EnumeratePorts()+0x78c>
    f8a8:	e3a02001 	mov	r2, #1
    f8ac:	e59f1014 	ldr	r1, [pc, #20]	; f8c8 <CUSBStandardHub::EnumeratePorts()+0x754>
    f8b0:	e3a09000 	mov	r9, #0
    f8b4:	eb0036d3 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f8b8:	eafffe58 	b	f220 <CUSBStandardHub::EnumeratePorts()+0xac>
    f8bc:	e3a09001 	mov	r9, #1
    f8c0:	eafffe56 	b	f220 <CUSBStandardHub::EnumeratePorts()+0xac>
    f8c4:	00024ffc 	.word	0x00024ffc
    f8c8:	00024fb4 	.word	0x00024fb4
    f8cc:	00024fbc 	.word	0x00024fbc
    f8d0:	00024fec 	.word	0x00024fec
    f8d4:	0002502c 	.word	0x0002502c
    f8d8:	00025014 	.word	0x00025014
    f8dc:	0000010e 	.word	0x0000010e
    f8e0:	000250e4 	.word	0x000250e4
    f8e4:	000001fe 	.word	0x000001fe
    f8e8:	0002504c 	.word	0x0002504c
    f8ec:	00025080 	.word	0x00025080
    f8f0:	00025154 	.word	0x00025154
    f8f4:	000250fc 	.word	0x000250fc
    f8f8:	00025120 	.word	0x00025120
    f8fc:	00025098 	.word	0x00025098
    f900:	000250b0 	.word	0x000250b0
    f904:	0002513c 	.word	0x0002513c
    f908:	00024fd0 	.word	0x00024fd0
    f90c:	00024fdc 	.word	0x00024fdc
    f910:	000250d4 	.word	0x000250d4

0000f914 <CUSBStandardHub::Configure()>:
    f914:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    f918:	e24dd024 	sub	sp, sp, #36	; 0x24
    f91c:	e1a04000 	mov	r4, r0
    f920:	eb0013f9 	bl	1490c <CUSBFunction::GetNumEndpoints() const>
    f924:	e3500001 	cmp	r0, #1
    f928:	0a000006 	beq	f948 <CUSBStandardHub::Configure()+0x34>
    f92c:	e1a00004 	mov	r0, r4
    f930:	e59f11d0 	ldr	r1, [pc, #464]	; fb08 <CUSBStandardHub::Configure()+0x1f4>
    f934:	eb00147a 	bl	14b24 <CUSBFunction::ConfigurationError(char const*) const>
    f938:	e3a05000 	mov	r5, #0
    f93c:	e1a00005 	mov	r0, r5
    f940:	e28dd024 	add	sp, sp, #36	; 0x24
    f944:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    f948:	e1a06000 	mov	r6, r0
    f94c:	e3a01005 	mov	r1, #5
    f950:	e1a00004 	mov	r0, r4
    f954:	eb00145f 	bl	14ad8 <CUSBFunction::GetDescriptor(unsigned char)>
    f958:	e3500000 	cmp	r0, #0
    f95c:	0afffff2 	beq	f92c <CUSBStandardHub::Configure()+0x18>
    f960:	e1d030d2 	ldrsb	r3, [r0, #2]
    f964:	e3530000 	cmp	r3, #0
    f968:	aaffffef 	bge	f92c <CUSBStandardHub::Configure()+0x18>
    f96c:	e5d03003 	ldrb	r3, [r0, #3]
    f970:	e203303f 	and	r3, r3, #63	; 0x3f
    f974:	e3530003 	cmp	r3, #3
    f978:	1affffeb 	bne	f92c <CUSBStandardHub::Configure()+0x18>
    f97c:	e1a00004 	mov	r0, r4
    f980:	eb001423 	bl	14a14 <CUSBFunction::Configure()>
    f984:	e2505000 	subs	r5, r0, #0
    f988:	0a000045 	beq	faa4 <CUSBStandardHub::Configure()+0x190>
    f98c:	e5943010 	ldr	r3, [r4, #16]
    f990:	e3530000 	cmp	r3, #0
    f994:	0a000003 	beq	f9a8 <CUSBStandardHub::Configure()+0x94>
    f998:	e3a0205a 	mov	r2, #90	; 0x5a
    f99c:	e59f1168 	ldr	r1, [pc, #360]	; fb0c <CUSBStandardHub::Configure()+0x1f8>
    f9a0:	e59f0168 	ldr	r0, [pc, #360]	; fb10 <CUSBStandardHub::Configure()+0x1fc>
    f9a4:	eb002afb 	bl	1a598 <assertion_failed>
    f9a8:	e3a00009 	mov	r0, #9
    f9ac:	eb004bca 	bl	228dc <operator new(unsigned int)>
    f9b0:	e5840010 	str	r0, [r4, #16]
    f9b4:	e1a00004 	mov	r0, r4
    f9b8:	eb001404 	bl	149d0 <CUSBFunction::GetHost() const>
    f9bc:	e1a07000 	mov	r7, r0
    f9c0:	e1a00004 	mov	r0, r4
    f9c4:	eb0013f0 	bl	1498c <CUSBFunction::GetEndpoint0() const>
    f9c8:	e3a06000 	mov	r6, #0
    f9cc:	e3a0c0a0 	mov	ip, #160	; 0xa0
    f9d0:	e3a05009 	mov	r5, #9
    f9d4:	e5942010 	ldr	r2, [r4, #16]
    f9d8:	e1a01000 	mov	r1, r0
    f9dc:	e88d1024 	stm	sp, {r2, r5, ip}
    f9e0:	e1a00007 	mov	r0, r7
    f9e4:	e58d600c 	str	r6, [sp, #12]
    f9e8:	e1a03006 	mov	r3, r6
    f9ec:	e3a02029 	mov	r2, #41	; 0x29
    f9f0:	ebfffb37 	bl	e6d4 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    f9f4:	e1500005 	cmp	r0, r5
    f9f8:	e1a07000 	mov	r7, r0
    f9fc:	1a00001d 	bne	fa78 <CUSBStandardHub::Configure()+0x164>
    fa00:	e5943010 	ldr	r3, [r4, #16]
    fa04:	e5d33002 	ldrb	r3, [r3, #2]
    fa08:	e3530008 	cmp	r3, #8
    fa0c:	e5843014 	str	r3, [r4, #20]
    fa10:	8a000029 	bhi	fabc <CUSBStandardHub::Configure()+0x1a8>
    fa14:	e28d0010 	add	r0, sp, #16
    fa18:	eb003f9b 	bl	1f88c <CString::CString()>
    fa1c:	e59f30f0 	ldr	r3, [pc, #240]	; fb14 <CUSBStandardHub::Configure()+0x200>
    fa20:	e59f10f0 	ldr	r1, [pc, #240]	; fb18 <CUSBStandardHub::Configure()+0x204>
    fa24:	e5932000 	ldr	r2, [r3]
    fa28:	e28d0010 	add	r0, sp, #16
    fa2c:	e282c001 	add	ip, r2, #1
    fa30:	e583c000 	str	ip, [r3]
    fa34:	eb004382 	bl	20844 <CString::Format(char const*, ...)>
    fa38:	eb002dcf 	bl	1b17c <CDeviceNameService::Get()>
    fa3c:	e1a05000 	mov	r5, r0
    fa40:	e28d0010 	add	r0, sp, #16
    fa44:	eb003fa6 	bl	1f8e4 <CString::operator char const*() const>
    fa48:	e1a03006 	mov	r3, r6
    fa4c:	e1a01000 	mov	r1, r0
    fa50:	e1a02004 	mov	r2, r4
    fa54:	e1a00005 	mov	r0, r5
    fa58:	eb002d07 	bl	1ae7c <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
    fa5c:	e1a00004 	mov	r0, r4
    fa60:	ebfffdc3 	bl	f174 <CUSBStandardHub::EnumeratePorts()>
    fa64:	e2505000 	subs	r5, r0, #0
    fa68:	0a000020 	beq	faf0 <CUSBStandardHub::Configure()+0x1dc>
    fa6c:	e28d0010 	add	r0, sp, #16
    fa70:	eb003f52 	bl	1f7c0 <CString::~CString()>
    fa74:	eaffffb0 	b	f93c <CUSBStandardHub::Configure()+0x28>
    fa78:	eb0034b9 	bl	1cd64 <CLogger::Get()>
    fa7c:	e59f3098 	ldr	r3, [pc, #152]	; fb1c <CUSBStandardHub::Configure()+0x208>
    fa80:	e3a02001 	mov	r2, #1
    fa84:	e59f107c 	ldr	r1, [pc, #124]	; fb08 <CUSBStandardHub::Configure()+0x1f4>
    fa88:	eb00365e 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fa8c:	e1a01005 	mov	r1, r5
    fa90:	e5940010 	ldr	r0, [r4, #16]
    fa94:	eb004b94 	bl	228ec <operator delete(void*, unsigned int)>
    fa98:	e1a05006 	mov	r5, r6
    fa9c:	e5846010 	str	r6, [r4, #16]
    faa0:	eaffffa5 	b	f93c <CUSBStandardHub::Configure()+0x28>
    faa4:	eb0034ae 	bl	1cd64 <CLogger::Get()>
    faa8:	e1a02006 	mov	r2, r6
    faac:	e59f306c 	ldr	r3, [pc, #108]	; fb20 <CUSBStandardHub::Configure()+0x20c>
    fab0:	e59f1050 	ldr	r1, [pc, #80]	; fb08 <CUSBStandardHub::Configure()+0x1f4>
    fab4:	eb003653 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fab8:	eaffff9f 	b	f93c <CUSBStandardHub::Configure()+0x28>
    fabc:	eb0034a8 	bl	1cd64 <CLogger::Get()>
    fac0:	e5942014 	ldr	r2, [r4, #20]
    fac4:	e59f3058 	ldr	r3, [pc, #88]	; fb24 <CUSBStandardHub::Configure()+0x210>
    fac8:	e58d2000 	str	r2, [sp]
    facc:	e59f1034 	ldr	r1, [pc, #52]	; fb08 <CUSBStandardHub::Configure()+0x1f4>
    fad0:	e3a02001 	mov	r2, #1
    fad4:	eb00364b 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fad8:	e1a01007 	mov	r1, r7
    fadc:	e5940010 	ldr	r0, [r4, #16]
    fae0:	eb004b81 	bl	228ec <operator delete(void*, unsigned int)>
    fae4:	e1a05006 	mov	r5, r6
    fae8:	e5846010 	str	r6, [r4, #16]
    faec:	eaffff92 	b	f93c <CUSBStandardHub::Configure()+0x28>
    faf0:	eb00349b 	bl	1cd64 <CLogger::Get()>
    faf4:	e59f302c 	ldr	r3, [pc, #44]	; fb28 <CUSBStandardHub::Configure()+0x214>
    faf8:	e3a02001 	mov	r2, #1
    fafc:	e59f1004 	ldr	r1, [pc, #4]	; fb08 <CUSBStandardHub::Configure()+0x1f4>
    fb00:	eb003640 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fb04:	eaffffd8 	b	fa6c <CUSBStandardHub::Configure()+0x158>
    fb08:	00024fb4 	.word	0x00024fb4
    fb0c:	00024fbc 	.word	0x00024fbc
    fb10:	00025188 	.word	0x00025188
    fb14:	0002affc 	.word	0x0002affc
    fb18:	000251c8 	.word	0x000251c8
    fb1c:	00025198 	.word	0x00025198
    fb20:	00025170 	.word	0x00025170
    fb24:	000251b4 	.word	0x000251b4
    fb28:	000251d0 	.word	0x000251d0

0000fb2c <CUSBBulkOnlyMassStorageDevice::Seek(unsigned long long)>:
    fb2c:	e1c022f0 	strd	r2, [r0, #32]
    fb30:	e1a01003 	mov	r1, r3
    fb34:	e1a00002 	mov	r0, r2
    fb38:	e12fff1e 	bx	lr

0000fb3c <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()>:
    fb3c:	e92d4070 	push	{r4, r5, r6, lr}
    fb40:	e5905028 	ldr	r5, [r0, #40]	; 0x28
    fb44:	e59f3088 	ldr	r3, [pc, #136]	; fbd4 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x98>
    fb48:	e3550000 	cmp	r5, #0
    fb4c:	e1a04000 	mov	r4, r0
    fb50:	e5803000 	str	r3, [r0]
    fb54:	0a000004 	beq	fb6c <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x30>
    fb58:	e1a00005 	mov	r0, r5
    fb5c:	eb002896 	bl	19dbc <CPartitionManager::~CPartitionManager()>
    fb60:	e1a00005 	mov	r0, r5
    fb64:	e3a01024 	mov	r1, #36	; 0x24
    fb68:	eb004b5f 	bl	228ec <operator delete(void*, unsigned int)>
    fb6c:	e3a03000 	mov	r3, #0
    fb70:	e5945014 	ldr	r5, [r4, #20]
    fb74:	e5843028 	str	r3, [r4, #40]	; 0x28
    fb78:	e1550003 	cmp	r5, r3
    fb7c:	0a000004 	beq	fb94 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x58>
    fb80:	e1a00005 	mov	r0, r5
    fb84:	ebfffa1c 	bl	e3fc <CUSBEndpoint::~CUSBEndpoint()>
    fb88:	e1a00005 	mov	r0, r5
    fb8c:	e3a01014 	mov	r1, #20
    fb90:	eb004b55 	bl	228ec <operator delete(void*, unsigned int)>
    fb94:	e3a03000 	mov	r3, #0
    fb98:	e5945010 	ldr	r5, [r4, #16]
    fb9c:	e5843014 	str	r3, [r4, #20]
    fba0:	e1550003 	cmp	r5, r3
    fba4:	0a000004 	beq	fbbc <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x80>
    fba8:	e1a00005 	mov	r0, r5
    fbac:	ebfffa12 	bl	e3fc <CUSBEndpoint::~CUSBEndpoint()>
    fbb0:	e1a00005 	mov	r0, r5
    fbb4:	e3a01014 	mov	r1, #20
    fbb8:	eb004b4b 	bl	228ec <operator delete(void*, unsigned int)>
    fbbc:	e3a03000 	mov	r3, #0
    fbc0:	e1a00004 	mov	r0, r4
    fbc4:	e5843010 	str	r3, [r4, #16]
    fbc8:	eb0012a5 	bl	14664 <CUSBFunction::~CUSBFunction()>
    fbcc:	e1a00004 	mov	r0, r4
    fbd0:	e8bd8070 	pop	{r4, r5, r6, pc}
    fbd4:	000251f0 	.word	0x000251f0

0000fbd8 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()>:
    fbd8:	e92d4010 	push	{r4, lr}
    fbdc:	e1a04000 	mov	r4, r0
    fbe0:	ebffffd5 	bl	fb3c <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()>
    fbe4:	e1a00004 	mov	r0, r4
    fbe8:	e3a01030 	mov	r1, #48	; 0x30
    fbec:	eb004b3e 	bl	228ec <operator delete(void*, unsigned int)>
    fbf0:	e1a00004 	mov	r0, r4
    fbf4:	e8bd8010 	pop	{r4, pc}

0000fbf8 <CUSBBulkOnlyMassStorageDevice::CUSBBulkOnlyMassStorageDevice(CUSBFunction*)>:
    fbf8:	e92d4010 	push	{r4, lr}
    fbfc:	e1a04000 	mov	r4, r0
    fc00:	eb0012e5 	bl	1479c <CUSBFunction::CUSBFunction(CUSBFunction*)>
    fc04:	e3a03000 	mov	r3, #0
    fc08:	e3a00000 	mov	r0, #0
    fc0c:	e3a01000 	mov	r1, #0
    fc10:	e59f2020 	ldr	r2, [pc, #32]	; fc38 <CUSBBulkOnlyMassStorageDevice::CUSBBulkOnlyMassStorageDevice(CUSBFunction*)+0x40>
    fc14:	e1c402f0 	strd	r0, [r4, #32]
    fc18:	e5842000 	str	r2, [r4]
    fc1c:	e5843010 	str	r3, [r4, #16]
    fc20:	e5843014 	str	r3, [r4, #20]
    fc24:	e5843018 	str	r3, [r4, #24]
    fc28:	e584301c 	str	r3, [r4, #28]
    fc2c:	e5843028 	str	r3, [r4, #40]	; 0x28
    fc30:	e1a00004 	mov	r0, r4
    fc34:	e8bd8010 	pop	{r4, pc}
    fc38:	000251f0 	.word	0x000251f0

0000fc3c <CUSBBulkOnlyMassStorageDevice::GetCapacity() const>:
    fc3c:	e590001c 	ldr	r0, [r0, #28]
    fc40:	e12fff1e 	bx	lr

0000fc44 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>:
    fc44:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    fc48:	e2519000 	subs	r9, r1, #0
    fc4c:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    fc50:	e1a04000 	mov	r4, r0
    fc54:	e1a08002 	mov	r8, r2
    fc58:	e1a07003 	mov	r7, r3
    fc5c:	e59d5058 	ldr	r5, [sp, #88]	; 0x58
    fc60:	e5dd605c 	ldrb	r6, [sp, #92]	; 0x5c
    fc64:	0a000066 	beq	fe04 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x1c0>
    fc68:	e2483006 	sub	r3, r8, #6
    fc6c:	e353000a 	cmp	r3, #10
    fc70:	8a000054 	bhi	fdc8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x184>
    fc74:	e2973000 	adds	r3, r7, #0
    fc78:	13a03001 	movne	r3, #1
    fc7c:	e3550000 	cmp	r5, #0
    fc80:	03833001 	orreq	r3, r3, #1
    fc84:	e3530000 	cmp	r3, #0
    fc88:	0a000053 	beq	fddc <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x198>
    fc8c:	e3a0201f 	mov	r2, #31
    fc90:	e3a01000 	mov	r1, #0
    fc94:	e28d0018 	add	r0, sp, #24
    fc98:	eb0046a1 	bl	21724 <memset>
    fc9c:	e3560000 	cmp	r6, #0
    fca0:	13a0e080 	movne	lr, #128	; 0x80
    fca4:	03a0e000 	moveq	lr, #0
    fca8:	e5dd0026 	ldrb	r0, [sp, #38]	; 0x26
    fcac:	e5943018 	ldr	r3, [r4, #24]
    fcb0:	e3c0201f 	bic	r2, r0, #31
    fcb4:	e5ddc025 	ldrb	ip, [sp, #37]	; 0x25
    fcb8:	e208001f 	and	r0, r8, #31
    fcbc:	e2833001 	add	r3, r3, #1
    fcc0:	e1800002 	orr	r0, r0, r2
    fcc4:	e1a02008 	mov	r2, r8
    fcc8:	e59f81f8 	ldr	r8, [pc, #504]	; fec8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x284>
    fccc:	e5843018 	str	r3, [r4, #24]
    fcd0:	e3ccc00f 	bic	ip, ip, #15
    fcd4:	e1a01009 	mov	r1, r9
    fcd8:	e5cd0026 	strb	r0, [sp, #38]	; 0x26
    fcdc:	e28d0027 	add	r0, sp, #39	; 0x27
    fce0:	e58d301c 	str	r3, [sp, #28]
    fce4:	e5cdc025 	strb	ip, [sp, #37]	; 0x25
    fce8:	e5cde024 	strb	lr, [sp, #36]	; 0x24
    fcec:	e58d8018 	str	r8, [sp, #24]
    fcf0:	e58d5020 	str	r5, [sp, #32]
    fcf4:	eb0047fc 	bl	21cec <memcpy>
    fcf8:	e1a00004 	mov	r0, r4
    fcfc:	eb001333 	bl	149d0 <CUSBFunction::GetHost() const>
    fd00:	e2508000 	subs	r8, r0, #0
    fd04:	0a000039 	beq	fdf0 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x1ac>
    fd08:	e3a09000 	mov	r9, #0
    fd0c:	e5941014 	ldr	r1, [r4, #20]
    fd10:	e28d2018 	add	r2, sp, #24
    fd14:	e58d9000 	str	r9, [sp]
    fd18:	e3a0301f 	mov	r3, #31
    fd1c:	e1a00008 	mov	r0, r8
    fd20:	ebfffa9f 	bl	e7a4 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
    fd24:	e1500009 	cmp	r0, r9
    fd28:	ba000058 	blt	fe90 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x24c>
    fd2c:	e3550000 	cmp	r5, #0
    fd30:	0a00000a 	beq	fd60 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x11c>
    fd34:	e5940010 	ldr	r0, [r4, #16]
    fd38:	e3560000 	cmp	r6, #0
    fd3c:	e5941014 	ldr	r1, [r4, #20]
    fd40:	e1a03005 	mov	r3, r5
    fd44:	11a01000 	movne	r1, r0
    fd48:	e58d9000 	str	r9, [sp]
    fd4c:	e1a02007 	mov	r2, r7
    fd50:	e1a00008 	mov	r0, r8
    fd54:	ebfffa92 	bl	e7a4 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
    fd58:	e2505000 	subs	r5, r0, #0
    fd5c:	ba000052 	blt	feac <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x268>
    fd60:	e3a03000 	mov	r3, #0
    fd64:	e5941010 	ldr	r1, [r4, #16]
    fd68:	e1a00008 	mov	r0, r8
    fd6c:	e58d3000 	str	r3, [sp]
    fd70:	e28d2008 	add	r2, sp, #8
    fd74:	e3a0300d 	mov	r3, #13
    fd78:	ebfffa89 	bl	e7a4 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
    fd7c:	e350000d 	cmp	r0, #13
    fd80:	1a000024 	bne	fe18 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x1d4>
    fd84:	e59f3140 	ldr	r3, [pc, #320]	; fecc <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x288>
    fd88:	e59d2008 	ldr	r2, [sp, #8]
    fd8c:	e1520003 	cmp	r2, r3
    fd90:	1a000027 	bne	fe34 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x1f0>
    fd94:	e5943018 	ldr	r3, [r4, #24]
    fd98:	e59d200c 	ldr	r2, [sp, #12]
    fd9c:	e1520003 	cmp	r2, r3
    fda0:	1a00002a 	bne	fe50 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x20c>
    fda4:	e5dd3014 	ldrb	r3, [sp, #20]
    fda8:	e3530000 	cmp	r3, #0
    fdac:	1a00002e 	bne	fe6c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x228>
    fdb0:	e59d3010 	ldr	r3, [sp, #16]
    fdb4:	e3530000 	cmp	r3, #0
    fdb8:	1a00002d 	bne	fe74 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x230>
    fdbc:	e1a00005 	mov	r0, r5
    fdc0:	e28dd03c 	add	sp, sp, #60	; 0x3c
    fdc4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    fdc8:	e59f2100 	ldr	r2, [pc, #256]	; fed0 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x28c>
    fdcc:	e59f1100 	ldr	r1, [pc, #256]	; fed4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x290>
    fdd0:	e59f0100 	ldr	r0, [pc, #256]	; fed8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x294>
    fdd4:	eb0029ef 	bl	1a598 <assertion_failed>
    fdd8:	eaffffa5 	b	fc74 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x30>
    fddc:	e59f20f8 	ldr	r2, [pc, #248]	; fedc <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x298>
    fde0:	e59f10ec 	ldr	r1, [pc, #236]	; fed4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x290>
    fde4:	e59f00f4 	ldr	r0, [pc, #244]	; fee0 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x29c>
    fde8:	eb0029ea 	bl	1a598 <assertion_failed>
    fdec:	eaffffa6 	b	fc8c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x48>
    fdf0:	e59f20ec 	ldr	r2, [pc, #236]	; fee4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2a0>
    fdf4:	e59f10d8 	ldr	r1, [pc, #216]	; fed4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x290>
    fdf8:	e59f00e8 	ldr	r0, [pc, #232]	; fee8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2a4>
    fdfc:	eb0029e5 	bl	1a598 <assertion_failed>
    fe00:	eaffffc0 	b	fd08 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0xc4>
    fe04:	e59f20e0 	ldr	r2, [pc, #224]	; feec <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2a8>
    fe08:	e59f10c4 	ldr	r1, [pc, #196]	; fed4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x290>
    fe0c:	e59f00dc 	ldr	r0, [pc, #220]	; fef0 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2ac>
    fe10:	eb0029e0 	bl	1a598 <assertion_failed>
    fe14:	eaffff93 	b	fc68 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x24>
    fe18:	eb0033d1 	bl	1cd64 <CLogger::Get()>
    fe1c:	e59f30d0 	ldr	r3, [pc, #208]	; fef4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2b0>
    fe20:	e3a02001 	mov	r2, #1
    fe24:	e59f10cc 	ldr	r1, [pc, #204]	; fef8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2b4>
    fe28:	eb003576 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fe2c:	e3e05000 	mvn	r5, #0
    fe30:	eaffffe1 	b	fdbc <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x178>
    fe34:	eb0033ca 	bl	1cd64 <CLogger::Get()>
    fe38:	e59f30bc 	ldr	r3, [pc, #188]	; fefc <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2b8>
    fe3c:	e3a02001 	mov	r2, #1
    fe40:	e59f10b0 	ldr	r1, [pc, #176]	; fef8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2b4>
    fe44:	eb00356f 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fe48:	e3e05000 	mvn	r5, #0
    fe4c:	eaffffda 	b	fdbc <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x178>
    fe50:	eb0033c3 	bl	1cd64 <CLogger::Get()>
    fe54:	e59f30a4 	ldr	r3, [pc, #164]	; ff00 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2bc>
    fe58:	e3a02001 	mov	r2, #1
    fe5c:	e59f1094 	ldr	r1, [pc, #148]	; fef8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2b4>
    fe60:	eb003568 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fe64:	e3e05000 	mvn	r5, #0
    fe68:	eaffffd3 	b	fdbc <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x178>
    fe6c:	e3e05000 	mvn	r5, #0
    fe70:	eaffffd1 	b	fdbc <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x178>
    fe74:	eb0033ba 	bl	1cd64 <CLogger::Get()>
    fe78:	e59f3084 	ldr	r3, [pc, #132]	; ff04 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2c0>
    fe7c:	e3a02001 	mov	r2, #1
    fe80:	e59f1070 	ldr	r1, [pc, #112]	; fef8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2b4>
    fe84:	eb00355f 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fe88:	e3e05000 	mvn	r5, #0
    fe8c:	eaffffca 	b	fdbc <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x178>
    fe90:	eb0033b3 	bl	1cd64 <CLogger::Get()>
    fe94:	e59f306c 	ldr	r3, [pc, #108]	; ff08 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2c4>
    fe98:	e3a02001 	mov	r2, #1
    fe9c:	e59f1054 	ldr	r1, [pc, #84]	; fef8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2b4>
    fea0:	eb003558 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fea4:	e3e05000 	mvn	r5, #0
    fea8:	eaffffc3 	b	fdbc <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x178>
    feac:	eb0033ac 	bl	1cd64 <CLogger::Get()>
    feb0:	e59f3054 	ldr	r3, [pc, #84]	; ff0c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2c8>
    feb4:	e3a02001 	mov	r2, #1
    feb8:	e59f1038 	ldr	r1, [pc, #56]	; fef8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2b4>
    febc:	eb003551 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fec0:	e3e05000 	mvn	r5, #0
    fec4:	eaffffbc 	b	fdbc <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x178>
    fec8:	43425355 	.word	0x43425355
    fecc:	53425355 	.word	0x53425355
    fed0:	00000216 	.word	0x00000216
    fed4:	00025214 	.word	0x00025214
    fed8:	00025238 	.word	0x00025238
    fedc:	00000217 	.word	0x00000217
    fee0:	0002525c 	.word	0x0002525c
    fee4:	00000226 	.word	0x00000226
    fee8:	00024fd0 	.word	0x00024fd0
    feec:	00000215 	.word	0x00000215
    fef0:	00025228 	.word	0x00025228
    fef4:	000252a8 	.word	0x000252a8
    fef8:	0002520c 	.word	0x0002520c
    fefc:	000252bc 	.word	0x000252bc
    ff00:	000252d4 	.word	0x000252d4
    ff04:	000252e8 	.word	0x000252e8
    ff08:	0002527c 	.word	0x0002527c
    ff0c:	00025290 	.word	0x00025290

0000ff10 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)>:
    ff10:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    ff14:	e2518000 	subs	r8, r1, #0
    ff18:	e24dd018 	sub	sp, sp, #24
    ff1c:	e1a05000 	mov	r5, r0
    ff20:	e1a04002 	mov	r4, r2
    ff24:	0a000034 	beq	fffc <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xec>
    ff28:	e1c502d0 	ldrd	r0, [r5, #32]
    ff2c:	e3a03000 	mov	r3, #0
    ff30:	e59f20f4 	ldr	r2, [pc, #244]	; 1002c <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0x11c>
    ff34:	e0033001 	and	r3, r3, r1
    ff38:	e0022000 	and	r2, r2, r0
    ff3c:	e1923003 	orrs	r3, r2, r3
    ff40:	e3e06000 	mvn	r6, #0
    ff44:	13a03001 	movne	r3, #1
    ff48:	03a03000 	moveq	r3, #0
    ff4c:	e59f70d8 	ldr	r7, [pc, #216]	; 1002c <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0x11c>
    ff50:	e1510007 	cmp	r1, r7
    ff54:	01500006 	cmpeq	r0, r6
    ff58:	83833001 	orrhi	r3, r3, #1
    ff5c:	e3530000 	cmp	r3, #0
    ff60:	1a000021 	bne	ffec <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xdc>
    ff64:	e1a0cb84 	lsl	ip, r4, #23
    ff68:	e1a0cbac 	lsr	ip, ip, #23
    ff6c:	e1a034a0 	lsr	r3, r0, #9
    ff70:	e35c0000 	cmp	ip, #0
    ff74:	e1833b81 	orr	r3, r3, r1, lsl #23
    ff78:	1a00001b 	bne	ffec <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xdc>
    ff7c:	e3a06001 	mov	r6, #1
    ff80:	e3a0e028 	mov	lr, #40	; 0x28
    ff84:	e1a014a4 	lsr	r1, r4, #9
    ff88:	e6bf2f33 	rev	r2, r3
    ff8c:	e6bf1fb1 	rev16	r1, r1
    ff90:	e6ff1071 	uxth	r1, r1
    ff94:	e1cd20be 	strh	r2, [sp, #14]
    ff98:	e1a02822 	lsr	r2, r2, #16
    ff9c:	e1a00005 	mov	r0, r5
    ffa0:	e1cd21b0 	strh	r2, [sp, #16]
    ffa4:	e1a05421 	lsr	r5, r1, #8
    ffa8:	e5cd1013 	strb	r1, [sp, #19]
    ffac:	e58d4000 	str	r4, [sp]
    ffb0:	e1a03008 	mov	r3, r8
    ffb4:	e58d6004 	str	r6, [sp, #4]
    ffb8:	e3a0200a 	mov	r2, #10
    ffbc:	e28d100c 	add	r1, sp, #12
    ffc0:	e5cdc00d 	strb	ip, [sp, #13]
    ffc4:	e5cdc012 	strb	ip, [sp, #18]
    ffc8:	e5cdc015 	strb	ip, [sp, #21]
    ffcc:	e5cd5014 	strb	r5, [sp, #20]
    ffd0:	e5cde00c 	strb	lr, [sp, #12]
    ffd4:	ebffff1a 	bl	fc44 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
    ffd8:	e1500004 	cmp	r0, r4
    ffdc:	1a00000b 	bne	10010 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0x100>
    ffe0:	e1a00004 	mov	r0, r4
    ffe4:	e28dd018 	add	sp, sp, #24
    ffe8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ffec:	e3e04000 	mvn	r4, #0
    fff0:	e1a00004 	mov	r0, r4
    fff4:	e28dd018 	add	sp, sp, #24
    fff8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    fffc:	e59f202c 	ldr	r2, [pc, #44]	; 10030 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0x120>
   10000:	e59f102c 	ldr	r1, [pc, #44]	; 10034 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0x124>
   10004:	e59f002c 	ldr	r0, [pc, #44]	; 10038 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0x128>
   10008:	eb002962 	bl	1a598 <assertion_failed>
   1000c:	eaffffc5 	b	ff28 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0x18>
   10010:	eb003353 	bl	1cd64 <CLogger::Get()>
   10014:	e1a02006 	mov	r2, r6
   10018:	e59f301c 	ldr	r3, [pc, #28]	; 1003c <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0x12c>
   1001c:	e59f101c 	ldr	r1, [pc, #28]	; 10040 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0x130>
   10020:	eb0034f8 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10024:	e3e04000 	mvn	r4, #0
   10028:	eaffffec 	b	ffe0 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xd0>
   1002c:	000001ff 	.word	0x000001ff
   10030:	000001ca 	.word	0x000001ca
   10034:	00025214 	.word	0x00025214
   10038:	0002526c 	.word	0x0002526c
   1003c:	00025300 	.word	0x00025300
   10040:	0002520c 	.word	0x0002520c

00010044 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)>:
   10044:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   10048:	e2518000 	subs	r8, r1, #0
   1004c:	e24dd018 	sub	sp, sp, #24
   10050:	e1a05000 	mov	r5, r0
   10054:	e1a04002 	mov	r4, r2
   10058:	0a000032 	beq	10128 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xe4>
   1005c:	e1c502d0 	ldrd	r0, [r5, #32]
   10060:	e3a03000 	mov	r3, #0
   10064:	e59f20ec 	ldr	r2, [pc, #236]	; 10158 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0x114>
   10068:	e0033001 	and	r3, r3, r1
   1006c:	e0022000 	and	r2, r2, r0
   10070:	e1923003 	orrs	r3, r2, r3
   10074:	e3e06000 	mvn	r6, #0
   10078:	13a03001 	movne	r3, #1
   1007c:	03a03000 	moveq	r3, #0
   10080:	e59f70d0 	ldr	r7, [pc, #208]	; 10158 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0x114>
   10084:	e1510007 	cmp	r1, r7
   10088:	01500006 	cmpeq	r0, r6
   1008c:	83833001 	orrhi	r3, r3, #1
   10090:	e3530000 	cmp	r3, #0
   10094:	1a000020 	bne	1011c <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xd8>
   10098:	e1a0cb84 	lsl	ip, r4, #23
   1009c:	e1a0cbac 	lsr	ip, ip, #23
   100a0:	e1a034a0 	lsr	r3, r0, #9
   100a4:	e35c0000 	cmp	ip, #0
   100a8:	e1833b81 	orr	r3, r3, r1, lsl #23
   100ac:	1a00001a 	bne	1011c <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xd8>
   100b0:	e3a0e008 	mov	lr, #8
   100b4:	e3a0602a 	mov	r6, #42	; 0x2a
   100b8:	e1a014a4 	lsr	r1, r4, #9
   100bc:	e6bf2f33 	rev	r2, r3
   100c0:	e6bf1fb1 	rev16	r1, r1
   100c4:	e6ff1071 	uxth	r1, r1
   100c8:	e1cd20be 	strh	r2, [sp, #14]
   100cc:	e1a02822 	lsr	r2, r2, #16
   100d0:	e1a00005 	mov	r0, r5
   100d4:	e1cd21b0 	strh	r2, [sp, #16]
   100d8:	e1a05e31 	lsr	r5, r1, lr
   100dc:	e5cd1013 	strb	r1, [sp, #19]
   100e0:	e88d1010 	stm	sp, {r4, ip}
   100e4:	e1a03008 	mov	r3, r8
   100e8:	e3a0200a 	mov	r2, #10
   100ec:	e28d100c 	add	r1, sp, #12
   100f0:	e5cdc012 	strb	ip, [sp, #18]
   100f4:	e5cdc015 	strb	ip, [sp, #21]
   100f8:	e5cd5014 	strb	r5, [sp, #20]
   100fc:	e5cd600c 	strb	r6, [sp, #12]
   10100:	e5cde00d 	strb	lr, [sp, #13]
   10104:	ebfffece 	bl	fc44 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   10108:	e3500000 	cmp	r0, #0
   1010c:	a1a00004 	movge	r0, r4
   10110:	ba000009 	blt	1013c <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xf8>
   10114:	e28dd018 	add	sp, sp, #24
   10118:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1011c:	e3e00000 	mvn	r0, #0
   10120:	e28dd018 	add	sp, sp, #24
   10124:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   10128:	e59f202c 	ldr	r2, [pc, #44]	; 1015c <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0x118>
   1012c:	e59f102c 	ldr	r1, [pc, #44]	; 10160 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0x11c>
   10130:	e59f002c 	ldr	r0, [pc, #44]	; 10164 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0x120>
   10134:	eb002917 	bl	1a598 <assertion_failed>
   10138:	eaffffc7 	b	1005c <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0x18>
   1013c:	eb003308 	bl	1cd64 <CLogger::Get()>
   10140:	e59f3020 	ldr	r3, [pc, #32]	; 10168 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0x124>
   10144:	e3a02001 	mov	r2, #1
   10148:	e59f101c 	ldr	r1, [pc, #28]	; 1016c <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0x128>
   1014c:	eb0034ad 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10150:	e3e00000 	mvn	r0, #0
   10154:	eaffffee 	b	10114 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xd0>
   10158:	000001ff 	.word	0x000001ff
   1015c:	000001ef 	.word	0x000001ef
   10160:	00025214 	.word	0x00025214
   10164:	0002526c 	.word	0x0002526c
   10168:	00025310 	.word	0x00025310
   1016c:	0002520c 	.word	0x0002520c

00010170 <CUSBBulkOnlyMassStorageDevice::Reset()>:
   10170:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   10174:	e24dd014 	sub	sp, sp, #20
   10178:	e1a05000 	mov	r5, r0
   1017c:	eb001213 	bl	149d0 <CUSBFunction::GetHost() const>
   10180:	e2506000 	subs	r6, r0, #0
   10184:	0a00002e 	beq	10244 <CUSBBulkOnlyMassStorageDevice::Reset()+0xd4>
   10188:	e1a00005 	mov	r0, r5
   1018c:	eb0011fe 	bl	1498c <CUSBFunction::GetEndpoint0() const>
   10190:	e3a04000 	mov	r4, #0
   10194:	e1a01000 	mov	r1, r0
   10198:	e58d400c 	str	r4, [sp, #12]
   1019c:	e58d4008 	str	r4, [sp, #8]
   101a0:	e58d4004 	str	r4, [sp, #4]
   101a4:	e58d4000 	str	r4, [sp]
   101a8:	e3a030ff 	mov	r3, #255	; 0xff
   101ac:	e3a02021 	mov	r2, #33	; 0x21
   101b0:	e1a00006 	mov	r0, r6
   101b4:	ebfff914 	bl	e60c <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   101b8:	e1500004 	cmp	r0, r4
   101bc:	ba000025 	blt	10258 <CUSBBulkOnlyMassStorageDevice::Reset()+0xe8>
   101c0:	e1a00005 	mov	r0, r5
   101c4:	eb0011f0 	bl	1498c <CUSBFunction::GetEndpoint0() const>
   101c8:	e3a07001 	mov	r7, #1
   101cc:	e1a01000 	mov	r1, r0
   101d0:	e58d400c 	str	r4, [sp, #12]
   101d4:	e58d4008 	str	r4, [sp, #8]
   101d8:	e88d0090 	stm	sp, {r4, r7}
   101dc:	e1a03007 	mov	r3, r7
   101e0:	e3a02002 	mov	r2, #2
   101e4:	e1a00006 	mov	r0, r6
   101e8:	ebfff907 	bl	e60c <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   101ec:	e3500000 	cmp	r0, #0
   101f0:	ba00001f 	blt	10274 <CUSBBulkOnlyMassStorageDevice::Reset()+0x104>
   101f4:	e1a00005 	mov	r0, r5
   101f8:	eb0011e3 	bl	1498c <CUSBFunction::GetEndpoint0() const>
   101fc:	e3a02002 	mov	r2, #2
   10200:	e1a01000 	mov	r1, r0
   10204:	e58d400c 	str	r4, [sp, #12]
   10208:	e58d4008 	str	r4, [sp, #8]
   1020c:	e58d4000 	str	r4, [sp]
   10210:	e1a03007 	mov	r3, r7
   10214:	e1a00006 	mov	r0, r6
   10218:	e58d2004 	str	r2, [sp, #4]
   1021c:	ebfff8fa 	bl	e60c <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   10220:	e3500000 	cmp	r0, #0
   10224:	ba000019 	blt	10290 <CUSBBulkOnlyMassStorageDevice::Reset()+0x120>
   10228:	e5950010 	ldr	r0, [r5, #16]
   1022c:	ebfff8dd 	bl	e5a8 <CUSBEndpoint::ResetPID()>
   10230:	e5950014 	ldr	r0, [r5, #20]
   10234:	ebfff8db 	bl	e5a8 <CUSBEndpoint::ResetPID()>
   10238:	e1a00004 	mov	r0, r4
   1023c:	e28dd014 	add	sp, sp, #20
   10240:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   10244:	e59f2060 	ldr	r2, [pc, #96]	; 102ac <CUSBBulkOnlyMassStorageDevice::Reset()+0x13c>
   10248:	e59f1060 	ldr	r1, [pc, #96]	; 102b0 <CUSBBulkOnlyMassStorageDevice::Reset()+0x140>
   1024c:	e59f0060 	ldr	r0, [pc, #96]	; 102b4 <CUSBBulkOnlyMassStorageDevice::Reset()+0x144>
   10250:	eb0028d0 	bl	1a598 <assertion_failed>
   10254:	eaffffcb 	b	10188 <CUSBBulkOnlyMassStorageDevice::Reset()+0x18>
   10258:	eb0032c1 	bl	1cd64 <CLogger::Get()>
   1025c:	e59f3054 	ldr	r3, [pc, #84]	; 102b8 <CUSBBulkOnlyMassStorageDevice::Reset()+0x148>
   10260:	e3a02004 	mov	r2, #4
   10264:	e59f1050 	ldr	r1, [pc, #80]	; 102bc <CUSBBulkOnlyMassStorageDevice::Reset()+0x14c>
   10268:	eb003466 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1026c:	e3e00000 	mvn	r0, #0
   10270:	eafffff1 	b	1023c <CUSBBulkOnlyMassStorageDevice::Reset()+0xcc>
   10274:	eb0032ba 	bl	1cd64 <CLogger::Get()>
   10278:	e59f3040 	ldr	r3, [pc, #64]	; 102c0 <CUSBBulkOnlyMassStorageDevice::Reset()+0x150>
   1027c:	e3a02004 	mov	r2, #4
   10280:	e59f1034 	ldr	r1, [pc, #52]	; 102bc <CUSBBulkOnlyMassStorageDevice::Reset()+0x14c>
   10284:	eb00345f 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10288:	e3e00000 	mvn	r0, #0
   1028c:	eaffffea 	b	1023c <CUSBBulkOnlyMassStorageDevice::Reset()+0xcc>
   10290:	eb0032b3 	bl	1cd64 <CLogger::Get()>
   10294:	e59f3028 	ldr	r3, [pc, #40]	; 102c4 <CUSBBulkOnlyMassStorageDevice::Reset()+0x154>
   10298:	e3a02004 	mov	r2, #4
   1029c:	e59f1018 	ldr	r1, [pc, #24]	; 102bc <CUSBBulkOnlyMassStorageDevice::Reset()+0x14c>
   102a0:	eb003458 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   102a4:	e3e00000 	mvn	r0, #0
   102a8:	eaffffe3 	b	1023c <CUSBBulkOnlyMassStorageDevice::Reset()+0xcc>
   102ac:	00000265 	.word	0x00000265
   102b0:	00025214 	.word	0x00025214
   102b4:	00024fd0 	.word	0x00024fd0
   102b8:	00025320 	.word	0x00025320
   102bc:	0002520c 	.word	0x0002520c
   102c0:	00025334 	.word	0x00025334
   102c4:	00025354 	.word	0x00025354

000102c8 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)>:
   102c8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   102cc:	e1a06002 	mov	r6, r2
   102d0:	e1a07000 	mov	r7, r0
   102d4:	e1a08001 	mov	r8, r1
   102d8:	e1a09002 	mov	r9, r2
   102dc:	e3a05004 	mov	r5, #4
   102e0:	e1a02006 	mov	r2, r6
   102e4:	e1a01008 	mov	r1, r8
   102e8:	e1a00007 	mov	r0, r7
   102ec:	ebffff07 	bl	ff10 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)>
   102f0:	e1500006 	cmp	r0, r6
   102f4:	e1a04000 	mov	r4, r0
   102f8:	1a000001 	bne	10304 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)+0x3c>
   102fc:	e1a00009 	mov	r0, r9
   10300:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10304:	e1a00007 	mov	r0, r7
   10308:	ebffff98 	bl	10170 <CUSBBulkOnlyMassStorageDevice::Reset()>
   1030c:	e3500000 	cmp	r0, #0
   10310:	1a000004 	bne	10328 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)+0x60>
   10314:	e2555001 	subs	r5, r5, #1
   10318:	1afffff0 	bne	102e0 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)+0x18>
   1031c:	e1a09004 	mov	r9, r4
   10320:	e1a00009 	mov	r0, r9
   10324:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10328:	e1a09000 	mov	r9, r0
   1032c:	eafffff2 	b	102fc <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)+0x34>

00010330 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)>:
   10330:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10334:	e1a06002 	mov	r6, r2
   10338:	e1a07000 	mov	r7, r0
   1033c:	e1a08001 	mov	r8, r1
   10340:	e1a09002 	mov	r9, r2
   10344:	e3a05004 	mov	r5, #4
   10348:	e1a02006 	mov	r2, r6
   1034c:	e1a01008 	mov	r1, r8
   10350:	e1a00007 	mov	r0, r7
   10354:	ebffff3a 	bl	10044 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)>
   10358:	e1500006 	cmp	r0, r6
   1035c:	e1a04000 	mov	r4, r0
   10360:	1a000001 	bne	1036c <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)+0x3c>
   10364:	e1a00009 	mov	r0, r9
   10368:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1036c:	e1a00007 	mov	r0, r7
   10370:	ebffff7e 	bl	10170 <CUSBBulkOnlyMassStorageDevice::Reset()>
   10374:	e3500000 	cmp	r0, #0
   10378:	1a000004 	bne	10390 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)+0x60>
   1037c:	e2555001 	subs	r5, r5, #1
   10380:	1afffff0 	bne	10348 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)+0x18>
   10384:	e1a09004 	mov	r9, r4
   10388:	e1a00009 	mov	r0, r9
   1038c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10390:	e1a09000 	mov	r9, r0
   10394:	eafffff2 	b	10364 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)+0x34>

00010398 <CUSBBulkOnlyMassStorageDevice::Configure()>:
   10398:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1039c:	e24dd064 	sub	sp, sp, #100	; 0x64
   103a0:	e1a05000 	mov	r5, r0
   103a4:	eb001158 	bl	1490c <CUSBFunction::GetNumEndpoints() const>
   103a8:	e3500001 	cmp	r0, #1
   103ac:	c3a06005 	movgt	r6, #5
   103b0:	c3a07014 	movgt	r7, #20
   103b4:	ca000004 	bgt	103cc <CUSBBulkOnlyMassStorageDevice::Configure()+0x34>
   103b8:	ea0000d5 	b	10714 <CUSBBulkOnlyMassStorageDevice::Configure()+0x37c>
   103bc:	e5d43003 	ldrb	r3, [r4, #3]
   103c0:	e203303f 	and	r3, r3, #63	; 0x3f
   103c4:	e3530002 	cmp	r3, #2
   103c8:	0a000091 	beq	10614 <CUSBBulkOnlyMassStorageDevice::Configure()+0x27c>
   103cc:	e1a01006 	mov	r1, r6
   103d0:	e1a00005 	mov	r0, r5
   103d4:	eb0011bf 	bl	14ad8 <CUSBFunction::GetDescriptor(unsigned char)>
   103d8:	e2504000 	subs	r4, r0, #0
   103dc:	1afffff6 	bne	103bc <CUSBBulkOnlyMassStorageDevice::Configure()+0x24>
   103e0:	e5953010 	ldr	r3, [r5, #16]
   103e4:	e1a00005 	mov	r0, r5
   103e8:	e3530000 	cmp	r3, #0
   103ec:	0a0000a1 	beq	10678 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2e0>
   103f0:	e5953014 	ldr	r3, [r5, #20]
   103f4:	e3530000 	cmp	r3, #0
   103f8:	0a00009e 	beq	10678 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2e0>
   103fc:	eb001184 	bl	14a14 <CUSBFunction::Configure()>
   10400:	e2506000 	subs	r6, r0, #0
   10404:	0a000093 	beq	10658 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2c0>
   10408:	e3a0c024 	mov	ip, #36	; 0x24
   1040c:	e3a06001 	mov	r6, #1
   10410:	e3a07012 	mov	r7, #18
   10414:	e58dc000 	str	ip, [sp]
   10418:	e58d6004 	str	r6, [sp, #4]
   1041c:	e28d303c 	add	r3, sp, #60	; 0x3c
   10420:	e3a02006 	mov	r2, #6
   10424:	e28d100c 	add	r1, sp, #12
   10428:	e1a00005 	mov	r0, r5
   1042c:	e5cd400d 	strb	r4, [sp, #13]
   10430:	e5cd400e 	strb	r4, [sp, #14]
   10434:	e5cd400f 	strb	r4, [sp, #15]
   10438:	e5cd4011 	strb	r4, [sp, #17]
   1043c:	e5cdc010 	strb	ip, [sp, #16]
   10440:	e5cd700c 	strb	r7, [sp, #12]
   10444:	ebfffdfe 	bl	fc44 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   10448:	e3500024 	cmp	r0, #36	; 0x24
   1044c:	1a0000a7 	bne	106f0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x358>
   10450:	e5dd303c 	ldrb	r3, [sp, #60]	; 0x3c
   10454:	e213301f 	ands	r3, r3, #31
   10458:	1a00009a 	bne	106c8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x330>
   1045c:	e1a04003 	mov	r4, r3
   10460:	e3a06063 	mov	r6, #99	; 0x63
   10464:	e3a0a064 	mov	sl, #100	; 0x64
   10468:	e3a08006 	mov	r8, #6
   1046c:	e3a0b003 	mov	fp, #3
   10470:	ea000010 	b	104b8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x120>
   10474:	e3a09001 	mov	r9, #1
   10478:	e3a0c000 	mov	ip, #0
   1047c:	e88d0280 	stm	sp, {r7, r9}
   10480:	e28d3028 	add	r3, sp, #40	; 0x28
   10484:	e1a02008 	mov	r2, r8
   10488:	e28d101c 	add	r1, sp, #28
   1048c:	e1a00005 	mov	r0, r5
   10490:	e5cdb01c 	strb	fp, [sp, #28]
   10494:	e1cd41be 	strh	r4, [sp, #30]
   10498:	e5cd7020 	strb	r7, [sp, #32]
   1049c:	e5cd4021 	strb	r4, [sp, #33]	; 0x21
   104a0:	e5cdc01d 	strb	ip, [sp, #29]
   104a4:	ebfffde6 	bl	fc44 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   104a8:	e3500000 	cmp	r0, #0
   104ac:	ba00009d 	blt	10728 <CUSBBulkOnlyMassStorageDevice::Configure()+0x390>
   104b0:	e2566001 	subs	r6, r6, #1
   104b4:	0a0000aa 	beq	10764 <CUSBBulkOnlyMassStorageDevice::Configure()+0x3cc>
   104b8:	eb00448a 	bl	216e8 <CTimer::Get()>
   104bc:	e1a0000a 	mov	r0, sl
   104c0:	eb00444f 	bl	21604 <CTimer::SimpleMsDelay(unsigned int)>
   104c4:	e58d4004 	str	r4, [sp, #4]
   104c8:	e58d4000 	str	r4, [sp]
   104cc:	e3a03000 	mov	r3, #0
   104d0:	e1a02008 	mov	r2, r8
   104d4:	e28d1014 	add	r1, sp, #20
   104d8:	e1a00005 	mov	r0, r5
   104dc:	e5cd4014 	strb	r4, [sp, #20]
   104e0:	e5cd4015 	strb	r4, [sp, #21]
   104e4:	e5cd4016 	strb	r4, [sp, #22]
   104e8:	e5cd4017 	strb	r4, [sp, #23]
   104ec:	e5cd4018 	strb	r4, [sp, #24]
   104f0:	e5cd4019 	strb	r4, [sp, #25]
   104f4:	ebfffdd2 	bl	fc44 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   104f8:	e3500000 	cmp	r0, #0
   104fc:	baffffdc 	blt	10474 <CUSBBulkOnlyMassStorageDevice::Configure()+0xdc>
   10500:	e3a02008 	mov	r2, #8
   10504:	e3a00025 	mov	r0, #37	; 0x25
   10508:	e3a06001 	mov	r6, #1
   1050c:	e3a0e000 	mov	lr, #0
   10510:	e88d0044 	stm	sp, {r2, r6}
   10514:	e5cd001c 	strb	r0, [sp, #28]
   10518:	e28d3014 	add	r3, sp, #20
   1051c:	e28d101c 	add	r1, sp, #28
   10520:	e3a0200a 	mov	r2, #10
   10524:	e1a00005 	mov	r0, r5
   10528:	e1cd41be 	strh	r4, [sp, #30]
   1052c:	e1cd42b0 	strh	r4, [sp, #32]
   10530:	e1cd42b2 	strh	r4, [sp, #34]	; 0x22
   10534:	e5cd4025 	strb	r4, [sp, #37]	; 0x25
   10538:	e5cde01d 	strb	lr, [sp, #29]
   1053c:	e5cde024 	strb	lr, [sp, #36]	; 0x24
   10540:	ebfffdbf 	bl	fc44 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   10544:	e3500008 	cmp	r0, #8
   10548:	1a00008b 	bne	1077c <CUSBBulkOnlyMassStorageDevice::Configure()+0x3e4>
   1054c:	e59d4018 	ldr	r4, [sp, #24]
   10550:	e6bf4f34 	rev	r4, r4
   10554:	e3540c02 	cmp	r4, #512	; 0x200
   10558:	1a000079 	bne	10744 <CUSBBulkOnlyMassStorageDevice::Configure()+0x3ac>
   1055c:	e59d3014 	ldr	r3, [sp, #20]
   10560:	e6bf3f33 	rev	r3, r3
   10564:	e3730001 	cmn	r3, #1
   10568:	e585301c 	str	r3, [r5, #28]
   1056c:	0a000096 	beq	107cc <CUSBBulkOnlyMassStorageDevice::Configure()+0x434>
   10570:	e2833001 	add	r3, r3, #1
   10574:	e585301c 	str	r3, [r5, #28]
   10578:	eb0031f9 	bl	1cd64 <CLogger::Get()>
   1057c:	e595201c 	ldr	r2, [r5, #28]
   10580:	e59f3260 	ldr	r3, [pc, #608]	; 107e8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x450>
   10584:	e1a025a2 	lsr	r2, r2, #11
   10588:	e59f125c 	ldr	r1, [pc, #604]	; 107ec <CUSBBulkOnlyMassStorageDevice::Configure()+0x454>
   1058c:	e58d2000 	str	r2, [sp]
   10590:	e59f4258 	ldr	r4, [pc, #600]	; 107f0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x458>
   10594:	e3a02004 	mov	r2, #4
   10598:	eb00339a 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1059c:	e28d0028 	add	r0, sp, #40	; 0x28
   105a0:	eb003cb9 	bl	1f88c <CString::CString()>
   105a4:	e28d0028 	add	r0, sp, #40	; 0x28
   105a8:	e5942000 	ldr	r2, [r4]
   105ac:	e59f1240 	ldr	r1, [pc, #576]	; 107f4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x45c>
   105b0:	eb0040a3 	bl	20844 <CString::Format(char const*, ...)>
   105b4:	e5953028 	ldr	r3, [r5, #40]	; 0x28
   105b8:	e3530000 	cmp	r3, #0
   105bc:	0a000003 	beq	105d0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x238>
   105c0:	e3a02f5f 	mov	r2, #380	; 0x17c
   105c4:	e59f122c 	ldr	r1, [pc, #556]	; 107f8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x460>
   105c8:	e59f022c 	ldr	r0, [pc, #556]	; 107fc <CUSBBulkOnlyMassStorageDevice::Configure()+0x464>
   105cc:	eb0027f1 	bl	1a598 <assertion_failed>
   105d0:	e28d0028 	add	r0, sp, #40	; 0x28
   105d4:	eb003cc2 	bl	1f8e4 <CString::operator char const*() const>
   105d8:	e1a07000 	mov	r7, r0
   105dc:	e3a00024 	mov	r0, #36	; 0x24
   105e0:	eb0048bd 	bl	228dc <operator new(unsigned int)>
   105e4:	e1a06000 	mov	r6, r0
   105e8:	e1a02007 	mov	r2, r7
   105ec:	e1a01005 	mov	r1, r5
   105f0:	eb0025e5 	bl	19d8c <CPartitionManager::CPartitionManager(CDevice*, char const*)>
   105f4:	e5856028 	str	r6, [r5, #40]	; 0x28
   105f8:	e1a00006 	mov	r0, r6
   105fc:	eb002601 	bl	19e08 <CPartitionManager::Initialize()>
   10600:	e2506000 	subs	r6, r0, #0
   10604:	1a000063 	bne	10798 <CUSBBulkOnlyMassStorageDevice::Configure()+0x400>
   10608:	e28d0028 	add	r0, sp, #40	; 0x28
   1060c:	eb003c6b 	bl	1f7c0 <CString::~CString()>
   10610:	ea000015 	b	1066c <CUSBBulkOnlyMassStorageDevice::Configure()+0x2d4>
   10614:	e1d430d2 	ldrsb	r3, [r4, #2]
   10618:	e3530000 	cmp	r3, #0
   1061c:	ba00001b 	blt	10690 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2f8>
   10620:	e5953014 	ldr	r3, [r5, #20]
   10624:	e1a00005 	mov	r0, r5
   10628:	e3530000 	cmp	r3, #0
   1062c:	1a000011 	bne	10678 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2e0>
   10630:	eb0010c5 	bl	1494c <CUSBFunction::GetDevice() const>
   10634:	e1a09000 	mov	r9, r0
   10638:	e1a00007 	mov	r0, r7
   1063c:	eb0048a6 	bl	228dc <operator new(unsigned int)>
   10640:	e1a08000 	mov	r8, r0
   10644:	e1a02004 	mov	r2, r4
   10648:	e1a01009 	mov	r1, r9
   1064c:	ebfff6d8 	bl	e1b4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   10650:	e5858014 	str	r8, [r5, #20]
   10654:	eaffff5c 	b	103cc <CUSBBulkOnlyMassStorageDevice::Configure()+0x34>
   10658:	eb0031c1 	bl	1cd64 <CLogger::Get()>
   1065c:	e59f319c 	ldr	r3, [pc, #412]	; 10800 <CUSBBulkOnlyMassStorageDevice::Configure()+0x468>
   10660:	e3a02001 	mov	r2, #1
   10664:	e59f1180 	ldr	r1, [pc, #384]	; 107ec <CUSBBulkOnlyMassStorageDevice::Configure()+0x454>
   10668:	eb003366 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1066c:	e1a00006 	mov	r0, r6
   10670:	e28dd064 	add	sp, sp, #100	; 0x64
   10674:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10678:	e3a06000 	mov	r6, #0
   1067c:	e59f1168 	ldr	r1, [pc, #360]	; 107ec <CUSBBulkOnlyMassStorageDevice::Configure()+0x454>
   10680:	eb001127 	bl	14b24 <CUSBFunction::ConfigurationError(char const*) const>
   10684:	e1a00006 	mov	r0, r6
   10688:	e28dd064 	add	sp, sp, #100	; 0x64
   1068c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10690:	e5953010 	ldr	r3, [r5, #16]
   10694:	e1a00005 	mov	r0, r5
   10698:	e3530000 	cmp	r3, #0
   1069c:	1afffff5 	bne	10678 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2e0>
   106a0:	eb0010a9 	bl	1494c <CUSBFunction::GetDevice() const>
   106a4:	e1a09000 	mov	r9, r0
   106a8:	e1a00007 	mov	r0, r7
   106ac:	eb00488a 	bl	228dc <operator new(unsigned int)>
   106b0:	e1a08000 	mov	r8, r0
   106b4:	e1a02004 	mov	r2, r4
   106b8:	e1a01009 	mov	r1, r9
   106bc:	ebfff6bc 	bl	e1b4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   106c0:	e5858010 	str	r8, [r5, #16]
   106c4:	eaffff40 	b	103cc <CUSBBulkOnlyMassStorageDevice::Configure()+0x34>
   106c8:	eb0031a5 	bl	1cd64 <CLogger::Get()>
   106cc:	e5dd303c 	ldrb	r3, [sp, #60]	; 0x3c
   106d0:	e1a02006 	mov	r2, r6
   106d4:	e203301f 	and	r3, r3, #31
   106d8:	e58d3000 	str	r3, [sp]
   106dc:	e59f1108 	ldr	r1, [pc, #264]	; 107ec <CUSBBulkOnlyMassStorageDevice::Configure()+0x454>
   106e0:	e59f311c 	ldr	r3, [pc, #284]	; 10804 <CUSBBulkOnlyMassStorageDevice::Configure()+0x46c>
   106e4:	e1a06004 	mov	r6, r4
   106e8:	eb003346 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   106ec:	eaffffde 	b	1066c <CUSBBulkOnlyMassStorageDevice::Configure()+0x2d4>
   106f0:	eb00319b 	bl	1cd64 <CLogger::Get()>
   106f4:	e1a02006 	mov	r2, r6
   106f8:	e1a06004 	mov	r6, r4
   106fc:	e59f3104 	ldr	r3, [pc, #260]	; 10808 <CUSBBulkOnlyMassStorageDevice::Configure()+0x470>
   10700:	e59f10e4 	ldr	r1, [pc, #228]	; 107ec <CUSBBulkOnlyMassStorageDevice::Configure()+0x454>
   10704:	eb00333f 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10708:	e1a00006 	mov	r0, r6
   1070c:	e28dd064 	add	sp, sp, #100	; 0x64
   10710:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10714:	e1a00005 	mov	r0, r5
   10718:	e59f10cc 	ldr	r1, [pc, #204]	; 107ec <CUSBBulkOnlyMassStorageDevice::Configure()+0x454>
   1071c:	eb001100 	bl	14b24 <CUSBFunction::ConfigurationError(char const*) const>
   10720:	e3a06000 	mov	r6, #0
   10724:	eaffffd0 	b	1066c <CUSBBulkOnlyMassStorageDevice::Configure()+0x2d4>
   10728:	eb00318d 	bl	1cd64 <CLogger::Get()>
   1072c:	e1a02009 	mov	r2, r9
   10730:	e59f30d4 	ldr	r3, [pc, #212]	; 1080c <CUSBBulkOnlyMassStorageDevice::Configure()+0x474>
   10734:	e59f10b0 	ldr	r1, [pc, #176]	; 107ec <CUSBBulkOnlyMassStorageDevice::Configure()+0x454>
   10738:	eb003332 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1073c:	e3a06000 	mov	r6, #0
   10740:	eaffffc9 	b	1066c <CUSBBulkOnlyMassStorageDevice::Configure()+0x2d4>
   10744:	eb003186 	bl	1cd64 <CLogger::Get()>
   10748:	e1a02006 	mov	r2, r6
   1074c:	e58d4000 	str	r4, [sp]
   10750:	e59f30b8 	ldr	r3, [pc, #184]	; 10810 <CUSBBulkOnlyMassStorageDevice::Configure()+0x478>
   10754:	e59f1090 	ldr	r1, [pc, #144]	; 107ec <CUSBBulkOnlyMassStorageDevice::Configure()+0x454>
   10758:	eb00332a 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1075c:	e3a06000 	mov	r6, #0
   10760:	eaffffc1 	b	1066c <CUSBBulkOnlyMassStorageDevice::Configure()+0x2d4>
   10764:	eb00317e 	bl	1cd64 <CLogger::Get()>
   10768:	e1a02009 	mov	r2, r9
   1076c:	e59f30a0 	ldr	r3, [pc, #160]	; 10814 <CUSBBulkOnlyMassStorageDevice::Configure()+0x47c>
   10770:	e59f1074 	ldr	r1, [pc, #116]	; 107ec <CUSBBulkOnlyMassStorageDevice::Configure()+0x454>
   10774:	eb003323 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10778:	eaffffbb 	b	1066c <CUSBBulkOnlyMassStorageDevice::Configure()+0x2d4>
   1077c:	eb003178 	bl	1cd64 <CLogger::Get()>
   10780:	e1a02006 	mov	r2, r6
   10784:	e59f308c 	ldr	r3, [pc, #140]	; 10818 <CUSBBulkOnlyMassStorageDevice::Configure()+0x480>
   10788:	e59f105c 	ldr	r1, [pc, #92]	; 107ec <CUSBBulkOnlyMassStorageDevice::Configure()+0x454>
   1078c:	eb00331d 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10790:	e3a06000 	mov	r6, #0
   10794:	eaffffb4 	b	1066c <CUSBBulkOnlyMassStorageDevice::Configure()+0x2d4>
   10798:	eb002a77 	bl	1b17c <CDeviceNameService::Get()>
   1079c:	e1a07000 	mov	r7, r0
   107a0:	e28d0028 	add	r0, sp, #40	; 0x28
   107a4:	eb003c4e 	bl	1f8e4 <CString::operator char const*() const>
   107a8:	e3a03001 	mov	r3, #1
   107ac:	e1a01000 	mov	r1, r0
   107b0:	e1a02005 	mov	r2, r5
   107b4:	e1a00007 	mov	r0, r7
   107b8:	eb0029af 	bl	1ae7c <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   107bc:	e5943000 	ldr	r3, [r4]
   107c0:	e2833001 	add	r3, r3, #1
   107c4:	e5843000 	str	r3, [r4]
   107c8:	eaffff8e 	b	10608 <CUSBBulkOnlyMassStorageDevice::Configure()+0x270>
   107cc:	eb003164 	bl	1cd64 <CLogger::Get()>
   107d0:	e1a02006 	mov	r2, r6
   107d4:	e59f3040 	ldr	r3, [pc, #64]	; 1081c <CUSBBulkOnlyMassStorageDevice::Configure()+0x484>
   107d8:	e59f100c 	ldr	r1, [pc, #12]	; 107ec <CUSBBulkOnlyMassStorageDevice::Configure()+0x454>
   107dc:	eb003309 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   107e0:	e3a06000 	mov	r6, #0
   107e4:	eaffffa0 	b	1066c <CUSBBulkOnlyMassStorageDevice::Configure()+0x2d4>
   107e8:	00025414 	.word	0x00025414
   107ec:	0002520c 	.word	0x0002520c
   107f0:	0002b000 	.word	0x0002b000
   107f4:	0002542c 	.word	0x0002542c
   107f8:	00025214 	.word	0x00025214
   107fc:	00025434 	.word	0x00025434
   10800:	00025170 	.word	0x00025170
   10804:	0002538c 	.word	0x0002538c
   10808:	00025374 	.word	0x00025374
   1080c:	000253ac 	.word	0x000253ac
   10810:	000253dc 	.word	0x000253dc
   10814:	00025450 	.word	0x00025450
   10818:	000253c4 	.word	0x000253c4
   1081c:	000253f8 	.word	0x000253f8

00010820 <CDWHCIFrameSchedulerNonPeriodic::~CDWHCIFrameSchedulerNonPeriodic()>:
   10820:	e12fff1e 	bx	lr

00010824 <CDWHCIFrameSchedulerNonPeriodic::StartSplit()>:
   10824:	e3a03000 	mov	r3, #0
   10828:	e5803008 	str	r3, [r0, #8]
   1082c:	e12fff1e 	bx	lr

00010830 <CDWHCIFrameSchedulerNonPeriodic::WaitForFrame()>:
   10830:	e12fff1e 	bx	lr

00010834 <CDWHCIFrameSchedulerNonPeriodic::IsOddFrame() const>:
   10834:	e3a00000 	mov	r0, #0
   10838:	e12fff1e 	bx	lr

0001083c <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()>:
   1083c:	e5903008 	ldr	r3, [r0, #8]
   10840:	e92d4010 	push	{r4, lr}
   10844:	e2433001 	sub	r3, r3, #1
   10848:	e3530004 	cmp	r3, #4
   1084c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   10850:	ea000010 	b	10898 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x5c>
   10854:	00010880 	.word	0x00010880
   10858:	00010870 	.word	0x00010870
   1085c:	00010870 	.word	0x00010870
   10860:	00010868 	.word	0x00010868
   10864:	00010868 	.word	0x00010868
   10868:	e3a00000 	mov	r0, #0
   1086c:	e8bd8010 	pop	{r4, pc}
   10870:	e59f0038 	ldr	r0, [pc, #56]	; 108b0 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x74>
   10874:	eb004369 	bl	21620 <CTimer::SimpleusDelay(unsigned int)>
   10878:	e3a00001 	mov	r0, #1
   1087c:	e8bd8010 	pop	{r4, pc}
   10880:	e3a02002 	mov	r2, #2
   10884:	e3a03003 	mov	r3, #3
   10888:	e5802008 	str	r2, [r0, #8]
   1088c:	e580300c 	str	r3, [r0, #12]
   10890:	e3a00001 	mov	r0, #1
   10894:	e8bd8010 	pop	{r4, pc}
   10898:	e3a0205f 	mov	r2, #95	; 0x5f
   1089c:	e59f1010 	ldr	r1, [pc, #16]	; 108b4 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x78>
   108a0:	e59f0010 	ldr	r0, [pc, #16]	; 108b8 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x7c>
   108a4:	eb00273b 	bl	1a598 <assertion_failed>
   108a8:	e3a00000 	mov	r0, #0
   108ac:	e8bd8010 	pop	{r4, pc}
   108b0:	00000271 	.word	0x00000271
   108b4:	00025488 	.word	0x00025488
   108b8:	00024970 	.word	0x00024970

000108bc <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)>:
   108bc:	e92d4010 	push	{r4, lr}
   108c0:	e5903008 	ldr	r3, [r0, #8]
   108c4:	e24dd010 	sub	sp, sp, #16
   108c8:	e3530000 	cmp	r3, #0
   108cc:	e1a04000 	mov	r4, r0
   108d0:	0a000019 	beq	1093c <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x80>
   108d4:	e2433002 	sub	r3, r3, #2
   108d8:	e3530001 	cmp	r3, #1
   108dc:	9a000005 	bls	108f8 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x3c>
   108e0:	e3a0209b 	mov	r2, #155	; 0x9b
   108e4:	e59f10cc 	ldr	r1, [pc, #204]	; 109b8 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xfc>
   108e8:	e59f00cc 	ldr	r0, [pc, #204]	; 109bc <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x100>
   108ec:	e28dd010 	add	sp, sp, #16
   108f0:	e8bd4010 	pop	{r4, lr}
   108f4:	ea002727 	b	1a598 <assertion_failed>
   108f8:	e3110001 	tst	r1, #1
   108fc:	13a03004 	movne	r3, #4
   10900:	15803008 	strne	r3, [r0, #8]
   10904:	1a00000a 	bne	10934 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x78>
   10908:	e3110060 	tst	r1, #96	; 0x60
   1090c:	1a000014 	bne	10964 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xa8>
   10910:	e3110010 	tst	r1, #16
   10914:	0a00001d 	beq	10990 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xd4>
   10918:	e590300c 	ldr	r3, [r0, #12]
   1091c:	e3530000 	cmp	r3, #0
   10920:	e2433001 	sub	r3, r3, #1
   10924:	e580300c 	str	r3, [r0, #12]
   10928:	0a000015 	beq	10984 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xc8>
   1092c:	e3a03003 	mov	r3, #3
   10930:	e5843008 	str	r3, [r4, #8]
   10934:	e28dd010 	add	sp, sp, #16
   10938:	e8bd8010 	pop	{r4, pc}
   1093c:	e3110020 	tst	r1, #32
   10940:	1a000003 	bne	10954 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x98>
   10944:	e3a0206b 	mov	r2, #107	; 0x6b
   10948:	e59f1068 	ldr	r1, [pc, #104]	; 109b8 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xfc>
   1094c:	e59f006c 	ldr	r0, [pc, #108]	; 109c0 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x104>
   10950:	eb002710 	bl	1a598 <assertion_failed>
   10954:	e3a03001 	mov	r3, #1
   10958:	e5843008 	str	r3, [r4, #8]
   1095c:	e28dd010 	add	sp, sp, #16
   10960:	e8bd8010 	pop	{r4, pc}
   10964:	e590300c 	ldr	r3, [r0, #12]
   10968:	e3530000 	cmp	r3, #0
   1096c:	e2433001 	sub	r3, r3, #1
   10970:	e580300c 	str	r3, [r0, #12]
   10974:	1affffec 	bne	1092c <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x70>
   10978:	e3a03005 	mov	r3, #5
   1097c:	e5843008 	str	r3, [r4, #8]
   10980:	eaffffeb 	b	10934 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x78>
   10984:	e59f0038 	ldr	r0, [pc, #56]	; 109c4 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x108>
   10988:	eb004324 	bl	21620 <CTimer::SimpleusDelay(unsigned int)>
   1098c:	eafffff9 	b	10978 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xbc>
   10990:	e58d100c 	str	r1, [sp, #12]
   10994:	eb0030f2 	bl	1cd64 <CLogger::Get()>
   10998:	e59d100c 	ldr	r1, [sp, #12]
   1099c:	e3a02001 	mov	r2, #1
   109a0:	e58d1000 	str	r1, [sp]
   109a4:	e59f301c 	ldr	r3, [pc, #28]	; 109c8 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x10c>
   109a8:	e59f101c 	ldr	r1, [pc, #28]	; 109cc <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x110>
   109ac:	eb003295 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   109b0:	e3a02096 	mov	r2, #150	; 0x96
   109b4:	eaffffca 	b	108e4 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x28>
   109b8:	00025488 	.word	0x00025488
   109bc:	00024970 	.word	0x00024970
   109c0:	000254a0 	.word	0x000254a0
   109c4:	00000271 	.word	0x00000271
   109c8:	000254c4 	.word	0x000254c4
   109cc:	000254d8 	.word	0x000254d8

000109d0 <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()>:
   109d0:	e59f303c 	ldr	r3, [pc, #60]	; 10a14 <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()+0x44>
   109d4:	e92d4010 	push	{r4, lr}
   109d8:	e5803000 	str	r3, [r0]
   109dc:	e1a04000 	mov	r4, r0
   109e0:	eb004340 	bl	216e8 <CTimer::Get()>
   109e4:	e3a03006 	mov	r3, #6
   109e8:	e3500000 	cmp	r0, #0
   109ec:	e9840009 	stmib	r4, {r0, r3}
   109f0:	0a000001 	beq	109fc <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()+0x2c>
   109f4:	e1a00004 	mov	r0, r4
   109f8:	e8bd8010 	pop	{r4, pc}
   109fc:	e3a0202e 	mov	r2, #46	; 0x2e
   10a00:	e59f1010 	ldr	r1, [pc, #16]	; 10a18 <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()+0x48>
   10a04:	e59f0010 	ldr	r0, [pc, #16]	; 10a1c <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()+0x4c>
   10a08:	eb0026e2 	bl	1a598 <assertion_failed>
   10a0c:	e1a00004 	mov	r0, r4
   10a10:	e8bd8010 	pop	{r4, pc}
   10a14:	0002546c 	.word	0x0002546c
   10a18:	00025488 	.word	0x00025488
   10a1c:	000240f0 	.word	0x000240f0

00010a20 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)>:
   10a20:	e3500010 	cmp	r0, #16
   10a24:	e92d4010 	push	{r4, lr}
   10a28:	0a000003 	beq	10a3c <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x1c>
   10a2c:	e3a020bd 	mov	r2, #189	; 0xbd
   10a30:	e59f1038 	ldr	r1, [pc, #56]	; 10a70 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x50>
   10a34:	e59f0038 	ldr	r0, [pc, #56]	; 10a74 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x54>
   10a38:	eb0026d6 	bl	1a598 <assertion_failed>
   10a3c:	e59f4034 	ldr	r4, [pc, #52]	; 10a78 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x58>
   10a40:	e5940000 	ldr	r0, [r4]
   10a44:	e3500000 	cmp	r0, #0
   10a48:	0a000001 	beq	10a54 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x34>
   10a4c:	e8bd4010 	pop	{r4, lr}
   10a50:	ea0027ee 	b	1aa10 <CClassAllocator::Allocate()>
   10a54:	e59f0020 	ldr	r0, [pc, #32]	; 10a7c <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x5c>
   10a58:	e3a020bd 	mov	r2, #189	; 0xbd
   10a5c:	e59f100c 	ldr	r1, [pc, #12]	; 10a70 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x50>
   10a60:	eb0026cc 	bl	1a598 <assertion_failed>
   10a64:	e5940000 	ldr	r0, [r4]
   10a68:	e8bd4010 	pop	{r4, lr}
   10a6c:	ea0027e7 	b	1aa10 <CClassAllocator::Allocate()>
   10a70:	00025488 	.word	0x00025488
   10a74:	000254e0 	.word	0x000254e0
   10a78:	0002b268 	.word	0x0002b268
   10a7c:	00024850 	.word	0x00024850

00010a80 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)>:
   10a80:	e3510010 	cmp	r1, #16
   10a84:	e92d4070 	push	{r4, r5, r6, lr}
   10a88:	e1a05000 	mov	r5, r0
   10a8c:	0a000003 	beq	10aa0 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x20>
   10a90:	e3a020bd 	mov	r2, #189	; 0xbd
   10a94:	e59f1040 	ldr	r1, [pc, #64]	; 10adc <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x5c>
   10a98:	e59f0040 	ldr	r0, [pc, #64]	; 10ae0 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x60>
   10a9c:	eb0026bd 	bl	1a598 <assertion_failed>
   10aa0:	e59f403c 	ldr	r4, [pc, #60]	; 10ae4 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x64>
   10aa4:	e5940000 	ldr	r0, [r4]
   10aa8:	e3500000 	cmp	r0, #0
   10aac:	0a000002 	beq	10abc <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x3c>
   10ab0:	e1a01005 	mov	r1, r5
   10ab4:	e8bd4070 	pop	{r4, r5, r6, lr}
   10ab8:	ea00280f 	b	1aafc <CClassAllocator::Free(void*)>
   10abc:	e59f1018 	ldr	r1, [pc, #24]	; 10adc <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x5c>
   10ac0:	e59f0020 	ldr	r0, [pc, #32]	; 10ae8 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x68>
   10ac4:	e3a020bd 	mov	r2, #189	; 0xbd
   10ac8:	eb0026b2 	bl	1a598 <assertion_failed>
   10acc:	e5940000 	ldr	r0, [r4]
   10ad0:	e1a01005 	mov	r1, r5
   10ad4:	e8bd4070 	pop	{r4, r5, r6, lr}
   10ad8:	ea002807 	b	1aafc <CClassAllocator::Free(void*)>
   10adc:	00025488 	.word	0x00025488
   10ae0:	000254e0 	.word	0x000254e0
   10ae4:	0002b268 	.word	0x0002b268
   10ae8:	00024850 	.word	0x00024850

00010aec <CDWHCIFrameSchedulerNonPeriodic::~CDWHCIFrameSchedulerNonPeriodic()>:
   10aec:	e92d4010 	push	{r4, lr}
   10af0:	e1a04000 	mov	r4, r0
   10af4:	e3a01010 	mov	r1, #16
   10af8:	ebffffe0 	bl	10a80 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)>
   10afc:	e1a00004 	mov	r0, r4
   10b00:	e8bd8010 	pop	{r4, pc}

00010b04 <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)>:
   10b04:	e92d4070 	push	{r4, r5, r6, lr}
   10b08:	e59f4040 	ldr	r4, [pc, #64]	; 10b50 <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)+0x4c>
   10b0c:	e1a06000 	mov	r6, r0
   10b10:	e5943000 	ldr	r3, [r4]
   10b14:	e3530000 	cmp	r3, #0
   10b18:	0a000003 	beq	10b2c <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)+0x28>
   10b1c:	e3a020bd 	mov	r2, #189	; 0xbd
   10b20:	e59f102c 	ldr	r1, [pc, #44]	; 10b54 <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)+0x50>
   10b24:	e59f002c 	ldr	r0, [pc, #44]	; 10b58 <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)+0x54>
   10b28:	eb00269a 	bl	1a598 <assertion_failed>
   10b2c:	e3a0001c 	mov	r0, #28
   10b30:	eb004769 	bl	228dc <operator new(unsigned int)>
   10b34:	e1a05000 	mov	r5, r0
   10b38:	e1a02006 	mov	r2, r6
   10b3c:	e59f3018 	ldr	r3, [pc, #24]	; 10b5c <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)+0x58>
   10b40:	e3a01010 	mov	r1, #16
   10b44:	eb002798 	bl	1a9ac <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
   10b48:	e5845000 	str	r5, [r4]
   10b4c:	e8bd8070 	pop	{r4, r5, r6, pc}
   10b50:	0002b268 	.word	0x0002b268
   10b54:	00025488 	.word	0x00025488
   10b58:	00024864 	.word	0x00024864
   10b5c:	00025514 	.word	0x00025514

00010b60 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)>:
   10b60:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   10b64:	e59f4054 	ldr	r4, [pc, #84]	; 10bc0 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x60>
   10b68:	e24dd00c 	sub	sp, sp, #12
   10b6c:	e5943000 	ldr	r3, [r4]
   10b70:	e1a06000 	mov	r6, r0
   10b74:	e3530000 	cmp	r3, #0
   10b78:	e1a07001 	mov	r7, r1
   10b7c:	0a000003 	beq	10b90 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x30>
   10b80:	e3a020bd 	mov	r2, #189	; 0xbd
   10b84:	e59f1038 	ldr	r1, [pc, #56]	; 10bc4 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x64>
   10b88:	e59f0038 	ldr	r0, [pc, #56]	; 10bc8 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x68>
   10b8c:	eb002681 	bl	1a598 <assertion_failed>
   10b90:	e3a0001c 	mov	r0, #28
   10b94:	eb004750 	bl	228dc <operator new(unsigned int)>
   10b98:	e59f102c 	ldr	r1, [pc, #44]	; 10bcc <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x6c>
   10b9c:	e1a03007 	mov	r3, r7
   10ba0:	e58d1000 	str	r1, [sp]
   10ba4:	e1a02006 	mov	r2, r6
   10ba8:	e3a01010 	mov	r1, #16
   10bac:	e1a05000 	mov	r5, r0
   10bb0:	eb002789 	bl	1a9dc <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
   10bb4:	e5845000 	str	r5, [r4]
   10bb8:	e28dd00c 	add	sp, sp, #12
   10bbc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   10bc0:	0002b268 	.word	0x0002b268
   10bc4:	00025488 	.word	0x00025488
   10bc8:	00024864 	.word	0x00024864
   10bcc:	00025514 	.word	0x00025514

00010bd0 <CDWHCIFrameSchedulerPeriodic::~CDWHCIFrameSchedulerPeriodic()>:
   10bd0:	e12fff1e 	bx	lr

00010bd4 <CDWHCIFrameSchedulerPeriodic::StartSplit()>:
   10bd4:	e3a02901 	mov	r2, #16384	; 0x4000
   10bd8:	e3a03000 	mov	r3, #0
   10bdc:	e1c021b0 	strh	r2, [r0, #16]
   10be0:	e5803008 	str	r3, [r0, #8]
   10be4:	e12fff1e 	bx	lr

00010be8 <CDWHCIFrameSchedulerPeriodic::IsOddFrame() const>:
   10be8:	e1d001b0 	ldrh	r0, [r0, #16]
   10bec:	e2000001 	and	r0, r0, #1
   10bf0:	e12fff1e 	bx	lr

00010bf4 <CDWHCIFrameSchedulerPeriodic::WaitForFrame()>:
   10bf4:	e92d4010 	push	{r4, lr}
   10bf8:	e1a04000 	mov	r4, r0
   10bfc:	e24dd010 	sub	sp, sp, #16
   10c00:	e28d0004 	add	r0, sp, #4
   10c04:	e59f1054 	ldr	r1, [pc, #84]	; 10c60 <CDWHCIFrameSchedulerPeriodic::WaitForFrame()+0x6c>
   10c08:	ebffedd6 	bl	c368 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   10c0c:	e1d431b0 	ldrh	r3, [r4, #16]
   10c10:	e3530901 	cmp	r3, #16384	; 0x4000
   10c14:	0a000009 	beq	10c40 <CDWHCIFrameSchedulerPeriodic::WaitForFrame()+0x4c>
   10c18:	e28d0004 	add	r0, sp, #4
   10c1c:	ebffedda 	bl	c38c <CDWHCIRegister::Read()>
   10c20:	e1d431b0 	ldrh	r3, [r4, #16]
   10c24:	e2000007 	and	r0, r0, #7
   10c28:	e1500003 	cmp	r0, r3
   10c2c:	1afffff9 	bne	10c18 <CDWHCIFrameSchedulerPeriodic::WaitForFrame()+0x24>
   10c30:	e28d0004 	add	r0, sp, #4
   10c34:	ebffedd3 	bl	c388 <CDWHCIRegister::~CDWHCIRegister()>
   10c38:	e28dd010 	add	sp, sp, #16
   10c3c:	e8bd8010 	pop	{r4, pc}
   10c40:	e28d0004 	add	r0, sp, #4
   10c44:	ebffedd0 	bl	c38c <CDWHCIRegister::Read()>
   10c48:	e2803001 	add	r3, r0, #1
   10c4c:	e2033007 	and	r3, r3, #7
   10c50:	e3530006 	cmp	r3, #6
   10c54:	03a03007 	moveq	r3, #7
   10c58:	e1c431b0 	strh	r3, [r4, #16]
   10c5c:	eaffffed 	b	10c18 <CDWHCIFrameSchedulerPeriodic::WaitForFrame()+0x24>
   10c60:	20980408 	.word	0x20980408

00010c64 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()>:
   10c64:	e5903008 	ldr	r3, [r0, #8]
   10c68:	e92d4010 	push	{r4, lr}
   10c6c:	e2433001 	sub	r3, r3, #1
   10c70:	e1a04000 	mov	r4, r0
   10c74:	e3530004 	cmp	r3, #4
   10c78:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   10c7c:	ea00001c 	b	10cf4 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0x90>
   10c80:	00010cbc 	.word	0x00010cbc
   10c84:	00010cf4 	.word	0x00010cf4
   10c88:	00010c9c 	.word	0x00010c9c
   10c8c:	00010c94 	.word	0x00010c94
   10c90:	00010c94 	.word	0x00010c94
   10c94:	e3a00000 	mov	r0, #0
   10c98:	e8bd8010 	pop	{r4, pc}
   10c9c:	e1d031b0 	ldrh	r3, [r0, #16]
   10ca0:	e3530901 	cmp	r3, #16384	; 0x4000
   10ca4:	0a000018 	beq	10d0c <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xa8>
   10ca8:	e2833001 	add	r3, r3, #1
   10cac:	e2033007 	and	r3, r3, #7
   10cb0:	e1c431b0 	strh	r3, [r4, #16]
   10cb4:	e3a00001 	mov	r0, #1
   10cb8:	e8bd8010 	pop	{r4, pc}
   10cbc:	e3a02002 	mov	r2, #2
   10cc0:	e1d031b0 	ldrh	r3, [r0, #16]
   10cc4:	e5802008 	str	r2, [r0, #8]
   10cc8:	e3530901 	cmp	r3, #16384	; 0x4000
   10ccc:	0a000014 	beq	10d24 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xc0>
   10cd0:	e3530005 	cmp	r3, #5
   10cd4:	03a02002 	moveq	r2, #2
   10cd8:	13a02003 	movne	r2, #3
   10cdc:	e2833002 	add	r3, r3, #2
   10ce0:	e2033007 	and	r3, r3, #7
   10ce4:	e1c431b0 	strh	r3, [r4, #16]
   10ce8:	e584200c 	str	r2, [r4, #12]
   10cec:	e3a00001 	mov	r0, #1
   10cf0:	e8bd8010 	pop	{r4, pc}
   10cf4:	e3a0206e 	mov	r2, #110	; 0x6e
   10cf8:	e59f103c 	ldr	r1, [pc, #60]	; 10d3c <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xd8>
   10cfc:	e59f003c 	ldr	r0, [pc, #60]	; 10d40 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xdc>
   10d00:	eb002624 	bl	1a598 <assertion_failed>
   10d04:	e3a00000 	mov	r0, #0
   10d08:	e8bd8010 	pop	{r4, pc}
   10d0c:	e3a02062 	mov	r2, #98	; 0x62
   10d10:	e59f1024 	ldr	r1, [pc, #36]	; 10d3c <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xd8>
   10d14:	e59f0028 	ldr	r0, [pc, #40]	; 10d44 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xe0>
   10d18:	eb00261e 	bl	1a598 <assertion_failed>
   10d1c:	e1d431b0 	ldrh	r3, [r4, #16]
   10d20:	eaffffe0 	b	10ca8 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0x44>
   10d24:	e3a02054 	mov	r2, #84	; 0x54
   10d28:	e59f100c 	ldr	r1, [pc, #12]	; 10d3c <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xd8>
   10d2c:	e59f0010 	ldr	r0, [pc, #16]	; 10d44 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xe0>
   10d30:	eb002618 	bl	1a598 <assertion_failed>
   10d34:	e1d431b0 	ldrh	r3, [r4, #16]
   10d38:	eaffffe4 	b	10cd0 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0x6c>
   10d3c:	00025558 	.word	0x00025558
   10d40:	00024970 	.word	0x00024970
   10d44:	00025570 	.word	0x00025570

00010d48 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)>:
   10d48:	e92d4010 	push	{r4, lr}
   10d4c:	e5903008 	ldr	r3, [r0, #8]
   10d50:	e24dd010 	sub	sp, sp, #16
   10d54:	e3530000 	cmp	r3, #0
   10d58:	e1a04000 	mov	r4, r0
   10d5c:	0a000016 	beq	10dbc <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x74>
   10d60:	e2433002 	sub	r3, r3, #2
   10d64:	e3530001 	cmp	r3, #1
   10d68:	9a000005 	bls	10d84 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x3c>
   10d6c:	e3a020a6 	mov	r2, #166	; 0xa6
   10d70:	e59f10c8 	ldr	r1, [pc, #200]	; 10e40 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xf8>
   10d74:	e59f00c8 	ldr	r0, [pc, #200]	; 10e44 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xfc>
   10d78:	e28dd010 	add	sp, sp, #16
   10d7c:	e8bd4010 	pop	{r4, lr}
   10d80:	ea002604 	b	1a598 <assertion_failed>
   10d84:	e3110001 	tst	r1, #1
   10d88:	13a03004 	movne	r3, #4
   10d8c:	15803008 	strne	r3, [r0, #8]
   10d90:	1a000007 	bne	10db4 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x6c>
   10d94:	e3110060 	tst	r1, #96	; 0x60
   10d98:	1a000011 	bne	10de4 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x9c>
   10d9c:	e3110010 	tst	r1, #16
   10da0:	0a00001c 	beq	10e18 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xd0>
   10da4:	e59f009c 	ldr	r0, [pc, #156]	; 10e48 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x100>
   10da8:	eb00421c 	bl	21620 <CTimer::SimpleusDelay(unsigned int)>
   10dac:	e3a03005 	mov	r3, #5
   10db0:	e5843008 	str	r3, [r4, #8]
   10db4:	e28dd010 	add	sp, sp, #16
   10db8:	e8bd8010 	pop	{r4, pc}
   10dbc:	e3110020 	tst	r1, #32
   10dc0:	1a000003 	bne	10dd4 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x8c>
   10dc4:	e3a0207a 	mov	r2, #122	; 0x7a
   10dc8:	e59f1070 	ldr	r1, [pc, #112]	; 10e40 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xf8>
   10dcc:	e59f0078 	ldr	r0, [pc, #120]	; 10e4c <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x104>
   10dd0:	eb0025f0 	bl	1a598 <assertion_failed>
   10dd4:	e3a03001 	mov	r3, #1
   10dd8:	e5843008 	str	r3, [r4, #8]
   10ddc:	e28dd010 	add	sp, sp, #16
   10de0:	e8bd8010 	pop	{r4, pc}
   10de4:	e590300c 	ldr	r3, [r0, #12]
   10de8:	e3530000 	cmp	r3, #0
   10dec:	e2433001 	sub	r3, r3, #1
   10df0:	e580300c 	str	r3, [r0, #12]
   10df4:	13a03003 	movne	r3, #3
   10df8:	15803008 	strne	r3, [r0, #8]
   10dfc:	1affffec 	bne	10db4 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x6c>
   10e00:	e3a03005 	mov	r3, #5
   10e04:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   10e08:	e5843008 	str	r3, [r4, #8]
   10e0c:	e28dd010 	add	sp, sp, #16
   10e10:	e8bd4010 	pop	{r4, lr}
   10e14:	ea004201 	b	21620 <CTimer::SimpleusDelay(unsigned int)>
   10e18:	e58d100c 	str	r1, [sp, #12]
   10e1c:	eb002fd0 	bl	1cd64 <CLogger::Get()>
   10e20:	e59d100c 	ldr	r1, [sp, #12]
   10e24:	e3a02001 	mov	r2, #1
   10e28:	e58d1000 	str	r1, [sp]
   10e2c:	e59f301c 	ldr	r3, [pc, #28]	; 10e50 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x108>
   10e30:	e59f101c 	ldr	r1, [pc, #28]	; 10e54 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x10c>
   10e34:	eb003173 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10e38:	e3a020a1 	mov	r2, #161	; 0xa1
   10e3c:	eaffffcb 	b	10d70 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x28>
   10e40:	00025558 	.word	0x00025558
   10e44:	00024970 	.word	0x00024970
   10e48:	00000271 	.word	0x00000271
   10e4c:	000254a0 	.word	0x000254a0
   10e50:	000254c4 	.word	0x000254c4
   10e54:	000254d8 	.word	0x000254d8

00010e58 <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()>:
   10e58:	e59f3044 	ldr	r3, [pc, #68]	; 10ea4 <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()+0x4c>
   10e5c:	e92d4010 	push	{r4, lr}
   10e60:	e5803000 	str	r3, [r0]
   10e64:	e1a04000 	mov	r4, r0
   10e68:	eb00421e 	bl	216e8 <CTimer::Get()>
   10e6c:	e3a02006 	mov	r2, #6
   10e70:	e3a03901 	mov	r3, #16384	; 0x4000
   10e74:	e3500000 	cmp	r0, #0
   10e78:	e9840005 	stmib	r4, {r0, r2}
   10e7c:	e1c431b0 	strh	r3, [r4, #16]
   10e80:	0a000001 	beq	10e8c <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()+0x34>
   10e84:	e1a00004 	mov	r0, r4
   10e88:	e8bd8010 	pop	{r4, pc}
   10e8c:	e3a02034 	mov	r2, #52	; 0x34
   10e90:	e59f1010 	ldr	r1, [pc, #16]	; 10ea8 <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()+0x50>
   10e94:	e59f0010 	ldr	r0, [pc, #16]	; 10eac <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()+0x54>
   10e98:	eb0025be 	bl	1a598 <assertion_failed>
   10e9c:	e1a00004 	mov	r0, r4
   10ea0:	e8bd8010 	pop	{r4, pc}
   10ea4:	0002553c 	.word	0x0002553c
   10ea8:	00025558 	.word	0x00025558
   10eac:	000240f0 	.word	0x000240f0

00010eb0 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)>:
   10eb0:	e3500014 	cmp	r0, #20
   10eb4:	e92d4010 	push	{r4, lr}
   10eb8:	0a000003 	beq	10ecc <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x1c>
   10ebc:	e3a020e2 	mov	r2, #226	; 0xe2
   10ec0:	e59f1038 	ldr	r1, [pc, #56]	; 10f00 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x50>
   10ec4:	e59f0038 	ldr	r0, [pc, #56]	; 10f04 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x54>
   10ec8:	eb0025b2 	bl	1a598 <assertion_failed>
   10ecc:	e59f4034 	ldr	r4, [pc, #52]	; 10f08 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x58>
   10ed0:	e5940000 	ldr	r0, [r4]
   10ed4:	e3500000 	cmp	r0, #0
   10ed8:	0a000001 	beq	10ee4 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x34>
   10edc:	e8bd4010 	pop	{r4, lr}
   10ee0:	ea0026ca 	b	1aa10 <CClassAllocator::Allocate()>
   10ee4:	e59f0020 	ldr	r0, [pc, #32]	; 10f0c <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x5c>
   10ee8:	e3a020e2 	mov	r2, #226	; 0xe2
   10eec:	e59f100c 	ldr	r1, [pc, #12]	; 10f00 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x50>
   10ef0:	eb0025a8 	bl	1a598 <assertion_failed>
   10ef4:	e5940000 	ldr	r0, [r4]
   10ef8:	e8bd4010 	pop	{r4, lr}
   10efc:	ea0026c3 	b	1aa10 <CClassAllocator::Allocate()>
   10f00:	00025558 	.word	0x00025558
   10f04:	00025590 	.word	0x00025590
   10f08:	0002b26c 	.word	0x0002b26c
   10f0c:	00024850 	.word	0x00024850

00010f10 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)>:
   10f10:	e3510014 	cmp	r1, #20
   10f14:	e92d4070 	push	{r4, r5, r6, lr}
   10f18:	e1a05000 	mov	r5, r0
   10f1c:	0a000003 	beq	10f30 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x20>
   10f20:	e3a020e2 	mov	r2, #226	; 0xe2
   10f24:	e59f1040 	ldr	r1, [pc, #64]	; 10f6c <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x5c>
   10f28:	e59f0040 	ldr	r0, [pc, #64]	; 10f70 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x60>
   10f2c:	eb002599 	bl	1a598 <assertion_failed>
   10f30:	e59f403c 	ldr	r4, [pc, #60]	; 10f74 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x64>
   10f34:	e5940000 	ldr	r0, [r4]
   10f38:	e3500000 	cmp	r0, #0
   10f3c:	0a000002 	beq	10f4c <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x3c>
   10f40:	e1a01005 	mov	r1, r5
   10f44:	e8bd4070 	pop	{r4, r5, r6, lr}
   10f48:	ea0026eb 	b	1aafc <CClassAllocator::Free(void*)>
   10f4c:	e59f1018 	ldr	r1, [pc, #24]	; 10f6c <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x5c>
   10f50:	e59f0020 	ldr	r0, [pc, #32]	; 10f78 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x68>
   10f54:	e3a020e2 	mov	r2, #226	; 0xe2
   10f58:	eb00258e 	bl	1a598 <assertion_failed>
   10f5c:	e5940000 	ldr	r0, [r4]
   10f60:	e1a01005 	mov	r1, r5
   10f64:	e8bd4070 	pop	{r4, r5, r6, lr}
   10f68:	ea0026e3 	b	1aafc <CClassAllocator::Free(void*)>
   10f6c:	00025558 	.word	0x00025558
   10f70:	00025590 	.word	0x00025590
   10f74:	0002b26c 	.word	0x0002b26c
   10f78:	00024850 	.word	0x00024850

00010f7c <CDWHCIFrameSchedulerPeriodic::~CDWHCIFrameSchedulerPeriodic()>:
   10f7c:	e92d4010 	push	{r4, lr}
   10f80:	e1a04000 	mov	r4, r0
   10f84:	e3a01014 	mov	r1, #20
   10f88:	ebffffe0 	bl	10f10 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)>
   10f8c:	e1a00004 	mov	r0, r4
   10f90:	e8bd8010 	pop	{r4, pc}

00010f94 <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)>:
   10f94:	e92d4070 	push	{r4, r5, r6, lr}
   10f98:	e59f4040 	ldr	r4, [pc, #64]	; 10fe0 <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)+0x4c>
   10f9c:	e1a06000 	mov	r6, r0
   10fa0:	e5943000 	ldr	r3, [r4]
   10fa4:	e3530000 	cmp	r3, #0
   10fa8:	0a000003 	beq	10fbc <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)+0x28>
   10fac:	e3a020e2 	mov	r2, #226	; 0xe2
   10fb0:	e59f102c 	ldr	r1, [pc, #44]	; 10fe4 <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)+0x50>
   10fb4:	e59f002c 	ldr	r0, [pc, #44]	; 10fe8 <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)+0x54>
   10fb8:	eb002576 	bl	1a598 <assertion_failed>
   10fbc:	e3a0001c 	mov	r0, #28
   10fc0:	eb004645 	bl	228dc <operator new(unsigned int)>
   10fc4:	e1a05000 	mov	r5, r0
   10fc8:	e1a02006 	mov	r2, r6
   10fcc:	e59f3018 	ldr	r3, [pc, #24]	; 10fec <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)+0x58>
   10fd0:	e3a01014 	mov	r1, #20
   10fd4:	eb002674 	bl	1a9ac <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
   10fd8:	e5845000 	str	r5, [r4]
   10fdc:	e8bd8070 	pop	{r4, r5, r6, pc}
   10fe0:	0002b26c 	.word	0x0002b26c
   10fe4:	00025558 	.word	0x00025558
   10fe8:	00024864 	.word	0x00024864
   10fec:	000255c0 	.word	0x000255c0

00010ff0 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)>:
   10ff0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   10ff4:	e59f4054 	ldr	r4, [pc, #84]	; 11050 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x60>
   10ff8:	e24dd00c 	sub	sp, sp, #12
   10ffc:	e5943000 	ldr	r3, [r4]
   11000:	e1a06000 	mov	r6, r0
   11004:	e3530000 	cmp	r3, #0
   11008:	e1a07001 	mov	r7, r1
   1100c:	0a000003 	beq	11020 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x30>
   11010:	e3a020e2 	mov	r2, #226	; 0xe2
   11014:	e59f1038 	ldr	r1, [pc, #56]	; 11054 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x64>
   11018:	e59f0038 	ldr	r0, [pc, #56]	; 11058 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x68>
   1101c:	eb00255d 	bl	1a598 <assertion_failed>
   11020:	e3a0001c 	mov	r0, #28
   11024:	eb00462c 	bl	228dc <operator new(unsigned int)>
   11028:	e59f102c 	ldr	r1, [pc, #44]	; 1105c <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x6c>
   1102c:	e1a03007 	mov	r3, r7
   11030:	e58d1000 	str	r1, [sp]
   11034:	e1a02006 	mov	r2, r6
   11038:	e3a01014 	mov	r1, #20
   1103c:	e1a05000 	mov	r5, r0
   11040:	eb002665 	bl	1a9dc <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
   11044:	e5845000 	str	r5, [r4]
   11048:	e28dd00c 	add	sp, sp, #12
   1104c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   11050:	0002b26c 	.word	0x0002b26c
   11054:	00025558 	.word	0x00025558
   11058:	00024864 	.word	0x00024864
   1105c:	000255c0 	.word	0x000255c0

00011060 <CUSBKeyboardDevice::~CUSBKeyboardDevice()>:
   11060:	e92d4070 	push	{r4, r5, r6, lr}
   11064:	e3a06000 	mov	r6, #0
   11068:	e1a04000 	mov	r4, r0
   1106c:	e59f5034 	ldr	r5, [pc, #52]	; 110a8 <CUSBKeyboardDevice::~CUSBKeyboardDevice()+0x48>
   11070:	e580643c 	str	r6, [r0, #1084]	; 0x43c
   11074:	e2853008 	add	r3, r5, #8
   11078:	e5803000 	str	r3, [r0]
   1107c:	eb00283e 	bl	1b17c <CDeviceNameService::Get()>
   11080:	e1a03006 	mov	r3, r6
   11084:	e2851028 	add	r1, r5, #40	; 0x28
   11088:	e594244c 	ldr	r2, [r4, #1100]	; 0x44c
   1108c:	eb002862 	bl	1b21c <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   11090:	e2840024 	add	r0, r4, #36	; 0x24
   11094:	eb001fd2 	bl	18fe4 <CKeyboardBehaviour::~CKeyboardBehaviour()>
   11098:	e1a00004 	mov	r0, r4
   1109c:	eb0001b7 	bl	11780 <CUSBHIDDevice::~CUSBHIDDevice()>
   110a0:	e1a00004 	mov	r0, r4
   110a4:	e8bd8070 	pop	{r4, r5, r6, pc}
   110a8:	000255e0 	.word	0x000255e0

000110ac <CUSBKeyboardDevice::~CUSBKeyboardDevice()>:
   110ac:	e92d4010 	push	{r4, lr}
   110b0:	e1a04000 	mov	r4, r0
   110b4:	ebffffe9 	bl	11060 <CUSBKeyboardDevice::~CUSBKeyboardDevice()>
   110b8:	e1a00004 	mov	r0, r4
   110bc:	e3a01e45 	mov	r1, #1104	; 0x450
   110c0:	eb004609 	bl	228ec <operator delete(void*, unsigned int)>
   110c4:	e1a00004 	mov	r0, r4
   110c8:	e8bd8010 	pop	{r4, pc}

000110cc <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)>:
   110cc:	e2522008 	subs	r2, r2, #8
   110d0:	13a02001 	movne	r2, #1
   110d4:	e3510000 	cmp	r1, #0
   110d8:	03822001 	orreq	r2, r2, #1
   110dc:	e3520000 	cmp	r2, #0
   110e0:	112fff1e 	bxne	lr
   110e4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   110e8:	e590343c 	ldr	r3, [r0, #1084]	; 0x43c
   110ec:	e24dd00c 	sub	sp, sp, #12
   110f0:	e3530000 	cmp	r3, #0
   110f4:	e1a07001 	mov	r7, r1
   110f8:	0a000004 	beq	11110 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x44>
   110fc:	e5d70000 	ldrb	r0, [r7]
   11100:	e2811002 	add	r1, r1, #2
   11104:	e28dd00c 	add	sp, sp, #12
   11108:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1110c:	e12fff13 	bx	r3
   11110:	e1a06000 	mov	r6, r0
   11114:	e1a04003 	mov	r4, r3
   11118:	e3a05080 	mov	r5, #128	; 0x80
   1111c:	e3a09001 	mov	r9, #1
   11120:	e2808024 	add	r8, r0, #36	; 0x24
   11124:	ea000006 	b	11144 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x78>
   11128:	e1120003 	tst	r2, r3
   1112c:	1a00003d 	bne	11228 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x15c>
   11130:	e2844001 	add	r4, r4, #1
   11134:	e2855001 	add	r5, r5, #1
   11138:	e3540008 	cmp	r4, #8
   1113c:	e6ef5075 	uxtb	r5, r5
   11140:	0a00000a 	beq	11170 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xa4>
   11144:	e5d72000 	ldrb	r2, [r7]
   11148:	e1a03419 	lsl	r3, r9, r4
   1114c:	e1120003 	tst	r2, r3
   11150:	e5d62440 	ldrb	r2, [r6, #1088]	; 0x440
   11154:	0afffff3 	beq	11128 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x5c>
   11158:	e1120003 	tst	r2, r3
   1115c:	1afffff3 	bne	11130 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x64>
   11160:	e1a01005 	mov	r1, r5
   11164:	e1a00008 	mov	r0, r8
   11168:	eb00200b 	bl	1919c <CKeyboardBehaviour::KeyPressed(unsigned char)>
   1116c:	eaffffef 	b	11130 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x64>
   11170:	e2868d11 	add	r8, r6, #1088	; 0x440
   11174:	e2885002 	add	r5, r8, #2
   11178:	e1a0b005 	mov	fp, r5
   1117c:	e2863024 	add	r3, r6, #36	; 0x24
   11180:	e2884008 	add	r4, r8, #8
   11184:	e2879002 	add	r9, r7, #2
   11188:	e287a008 	add	sl, r7, #8
   1118c:	e58d3004 	str	r3, [sp, #4]
   11190:	e4db1001 	ldrb	r1, [fp], #1
   11194:	e3510000 	cmp	r1, #0
   11198:	0a000007 	beq	111bc <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xf0>
   1119c:	e1a03009 	mov	r3, r9
   111a0:	e4d30001 	ldrb	r0, [r3], #1
   111a4:	e1500001 	cmp	r0, r1
   111a8:	0a000003 	beq	111bc <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xf0>
   111ac:	e153000a 	cmp	r3, sl
   111b0:	1afffffa 	bne	111a0 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xd4>
   111b4:	e59d0004 	ldr	r0, [sp, #4]
   111b8:	eb002006 	bl	191d8 <CKeyboardBehaviour::KeyReleased(unsigned char)>
   111bc:	e15b0004 	cmp	fp, r4
   111c0:	1afffff2 	bne	11190 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xc4>
   111c4:	e2866024 	add	r6, r6, #36	; 0x24
   111c8:	e2879001 	add	r9, r7, #1
   111cc:	e287a007 	add	sl, r7, #7
   111d0:	ea000001 	b	111dc <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x110>
   111d4:	e159000a 	cmp	r9, sl
   111d8:	0a00000c 	beq	11210 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x144>
   111dc:	e5f91001 	ldrb	r1, [r9, #1]!
   111e0:	e3510000 	cmp	r1, #0
   111e4:	11a03005 	movne	r3, r5
   111e8:	0afffff9 	beq	111d4 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x108>
   111ec:	e4d32001 	ldrb	r2, [r3], #1
   111f0:	e1520001 	cmp	r2, r1
   111f4:	0afffff6 	beq	111d4 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x108>
   111f8:	e1530004 	cmp	r3, r4
   111fc:	1afffffa 	bne	111ec <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x120>
   11200:	e1a00006 	mov	r0, r6
   11204:	eb001fe4 	bl	1919c <CKeyboardBehaviour::KeyPressed(unsigned char)>
   11208:	e159000a 	cmp	r9, sl
   1120c:	1afffff2 	bne	111dc <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x110>
   11210:	e1a01007 	mov	r1, r7
   11214:	e1a00008 	mov	r0, r8
   11218:	e3a02008 	mov	r2, #8
   1121c:	e28dd00c 	add	sp, sp, #12
   11220:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11224:	ea0042b0 	b	21cec <memcpy>
   11228:	e1a01005 	mov	r1, r5
   1122c:	e1a00008 	mov	r0, r8
   11230:	eb001fe8 	bl	191d8 <CKeyboardBehaviour::KeyReleased(unsigned char)>
   11234:	eaffffbd 	b	11130 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x64>

00011238 <CUSBKeyboardDevice::CUSBKeyboardDevice(CUSBFunction*)>:
   11238:	e92d4010 	push	{r4, lr}
   1123c:	e1a04000 	mov	r4, r0
   11240:	e3a02008 	mov	r2, #8
   11244:	eb000139 	bl	11730 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>
   11248:	e1a00004 	mov	r0, r4
   1124c:	e59f3028 	ldr	r3, [pc, #40]	; 1127c <CUSBKeyboardDevice::CUSBKeyboardDevice(CUSBFunction*)+0x44>
   11250:	e4803024 	str	r3, [r0], #36	; 0x24
   11254:	eb001f55 	bl	18fb0 <CKeyboardBehaviour::CKeyboardBehaviour()>
   11258:	e3a01000 	mov	r1, #0
   1125c:	e2840d11 	add	r0, r4, #1088	; 0x440
   11260:	e584143c 	str	r1, [r4, #1084]	; 0x43c
   11264:	e5c41448 	strb	r1, [r4, #1096]	; 0x448
   11268:	e584144c 	str	r1, [r4, #1100]	; 0x44c
   1126c:	e3a02008 	mov	r2, #8
   11270:	eb00412b 	bl	21724 <memset>
   11274:	e1a00004 	mov	r0, r4
   11278:	e8bd8010 	pop	{r4, pc}
   1127c:	000255e8 	.word	0x000255e8

00011280 <CUSBKeyboardDevice::RegisterKeyPressedHandler(void (*)(char const*))>:
   11280:	e2800024 	add	r0, r0, #36	; 0x24
   11284:	ea001f60 	b	1900c <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))>

00011288 <CUSBKeyboardDevice::RegisterSelectConsoleHandler(void (*)(unsigned int))>:
   11288:	e2800024 	add	r0, r0, #36	; 0x24
   1128c:	ea001f6c 	b	19044 <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))>

00011290 <CUSBKeyboardDevice::RegisterShutdownHandler(void (*)())>:
   11290:	e2800024 	add	r0, r0, #36	; 0x24
   11294:	ea001f78 	b	1907c <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())>

00011298 <CUSBKeyboardDevice::GetLEDStatus() const>:
   11298:	e92d4010 	push	{r4, lr}
   1129c:	e2800024 	add	r0, r0, #36	; 0x24
   112a0:	eb001f83 	bl	190b4 <CKeyboardBehaviour::GetLEDStatus() const>
   112a4:	e2003001 	and	r3, r0, #1
   112a8:	e3100002 	tst	r0, #2
   112ac:	13833002 	orrne	r3, r3, #2
   112b0:	e3100004 	tst	r0, #4
   112b4:	13833004 	orrne	r3, r3, #4
   112b8:	e1a00003 	mov	r0, r3
   112bc:	e8bd8010 	pop	{r4, pc}

000112c0 <CUSBKeyboardDevice::RegisterKeyStatusHandlerRaw(void (*)(unsigned char, unsigned char const*))>:
   112c0:	e92d4070 	push	{r4, r5, r6, lr}
   112c4:	e2515000 	subs	r5, r1, #0
   112c8:	e1a04000 	mov	r4, r0
   112cc:	0a000001 	beq	112d8 <CUSBKeyboardDevice::RegisterKeyStatusHandlerRaw(void (*)(unsigned char, unsigned char const*))+0x18>
   112d0:	e584543c 	str	r5, [r4, #1084]	; 0x43c
   112d4:	e8bd8070 	pop	{r4, r5, r6, pc}
   112d8:	e3a0207d 	mov	r2, #125	; 0x7d
   112dc:	e59f100c 	ldr	r1, [pc, #12]	; 112f0 <CUSBKeyboardDevice::RegisterKeyStatusHandlerRaw(void (*)(unsigned char, unsigned char const*))+0x30>
   112e0:	e59f000c 	ldr	r0, [pc, #12]	; 112f4 <CUSBKeyboardDevice::RegisterKeyStatusHandlerRaw(void (*)(unsigned char, unsigned char const*))+0x34>
   112e4:	eb0024ab 	bl	1a598 <assertion_failed>
   112e8:	e584543c 	str	r5, [r4, #1084]	; 0x43c
   112ec:	e8bd8070 	pop	{r4, r5, r6, pc}
   112f0:	00025618 	.word	0x00025618
   112f4:	00025628 	.word	0x00025628

000112f8 <CUSBKeyboardDevice::SetLEDs(unsigned char)>:
   112f8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   112fc:	e24dd01c 	sub	sp, sp, #28
   11300:	e28d4018 	add	r4, sp, #24
   11304:	e5641004 	strb	r1, [r4, #-4]!
   11308:	e1a05000 	mov	r5, r0
   1130c:	eb000daf 	bl	149d0 <CUSBFunction::GetHost() const>
   11310:	e1a06000 	mov	r6, r0
   11314:	e1a00005 	mov	r0, r5
   11318:	eb000d9b 	bl	1498c <CUSBFunction::GetEndpoint0() const>
   1131c:	e1a07000 	mov	r7, r0
   11320:	e1a00005 	mov	r0, r5
   11324:	eb000e53 	bl	14c78 <CUSBFunction::GetInterfaceNumber() const>
   11328:	e3a02001 	mov	r2, #1
   1132c:	e3a03c02 	mov	r3, #512	; 0x200
   11330:	e6ff0070 	uxth	r0, r0
   11334:	e98d0011 	stmib	sp, {r0, r4}
   11338:	e58d200c 	str	r2, [sp, #12]
   1133c:	e58d3000 	str	r3, [sp]
   11340:	e1a01007 	mov	r1, r7
   11344:	e1a00006 	mov	r0, r6
   11348:	e3a03009 	mov	r3, #9
   1134c:	e3a02021 	mov	r2, #33	; 0x21
   11350:	ebfff4ad 	bl	e60c <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   11354:	e1e00000 	mvn	r0, r0
   11358:	e1a00fa0 	lsr	r0, r0, #31
   1135c:	e28dd01c 	add	sp, sp, #28
   11360:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00011364 <CUSBKeyboardDevice::Configure()>:
   11364:	e92d4030 	push	{r4, r5, lr}
   11368:	e3a01000 	mov	r1, #0
   1136c:	e24dd00c 	sub	sp, sp, #12
   11370:	e1a04000 	mov	r4, r0
   11374:	eb00012c 	bl	1182c <CUSBHIDDevice::Configure(unsigned int)>
   11378:	e2505000 	subs	r5, r0, #0
   1137c:	0a000012 	beq	113cc <CUSBKeyboardDevice::Configure()+0x68>
   11380:	e5d41448 	ldrb	r1, [r4, #1096]	; 0x448
   11384:	e1a00004 	mov	r0, r4
   11388:	ebffffda 	bl	112f8 <CUSBKeyboardDevice::SetLEDs(unsigned char)>
   1138c:	e59f2058 	ldr	r2, [pc, #88]	; 113ec <CUSBKeyboardDevice::Configure()+0x88>
   11390:	e5923000 	ldr	r3, [r2]
   11394:	e584344c 	str	r3, [r4, #1100]	; 0x44c
   11398:	e2833001 	add	r3, r3, #1
   1139c:	e5823000 	str	r3, [r2]
   113a0:	eb002775 	bl	1b17c <CDeviceNameService::Get()>
   113a4:	e3a03000 	mov	r3, #0
   113a8:	e594244c 	ldr	r2, [r4, #1100]	; 0x44c
   113ac:	e59f103c 	ldr	r1, [pc, #60]	; 113f0 <CUSBKeyboardDevice::Configure()+0x8c>
   113b0:	e58d3000 	str	r3, [sp]
   113b4:	e1a03004 	mov	r3, r4
   113b8:	eb00277d 	bl	1b1b4 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   113bc:	e1a00004 	mov	r0, r4
   113c0:	e28dd00c 	add	sp, sp, #12
   113c4:	e8bd4030 	pop	{r4, r5, lr}
   113c8:	ea00023f 	b	11ccc <CUSBHIDDevice::StartRequest()>
   113cc:	eb002e64 	bl	1cd64 <CLogger::Get()>
   113d0:	e59f301c 	ldr	r3, [pc, #28]	; 113f4 <CUSBKeyboardDevice::Configure()+0x90>
   113d4:	e3a02001 	mov	r2, #1
   113d8:	e59f1018 	ldr	r1, [pc, #24]	; 113f8 <CUSBKeyboardDevice::Configure()+0x94>
   113dc:	eb003009 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   113e0:	e1a00005 	mov	r0, r5
   113e4:	e28dd00c 	add	sp, sp, #12
   113e8:	e8bd8030 	pop	{r4, r5, pc}
   113ec:	0002b004 	.word	0x0002b004
   113f0:	00025608 	.word	0x00025608
   113f4:	00025644 	.word	0x00025644
   113f8:	00025610 	.word	0x00025610

000113fc <CUSBKeyboardDevice::UpdateLEDs()>:
   113fc:	e590243c 	ldr	r2, [r0, #1084]	; 0x43c
   11400:	e3520000 	cmp	r2, #0
   11404:	112fff1e 	bxne	lr
   11408:	e92d4010 	push	{r4, lr}
   1140c:	e1a04000 	mov	r4, r0
   11410:	ebffffa0 	bl	11298 <CUSBKeyboardDevice::GetLEDStatus() const>
   11414:	e5d43448 	ldrb	r3, [r4, #1096]	; 0x448
   11418:	e1530000 	cmp	r3, r0
   1141c:	08bd8010 	popeq	{r4, pc}
   11420:	e5c40448 	strb	r0, [r4, #1096]	; 0x448
   11424:	e1a01000 	mov	r1, r0
   11428:	e1a00004 	mov	r0, r4
   1142c:	ebffffb1 	bl	112f8 <CUSBKeyboardDevice::SetLEDs(unsigned char)>
   11430:	e3500000 	cmp	r0, #0
   11434:	18bd8010 	popne	{r4, pc}
   11438:	eb002e49 	bl	1cd64 <CLogger::Get()>
   1143c:	e8bd4010 	pop	{r4, lr}
   11440:	e59f3008 	ldr	r3, [pc, #8]	; 11450 <CUSBKeyboardDevice::UpdateLEDs()+0x54>
   11444:	e3a02001 	mov	r2, #1
   11448:	e59f1004 	ldr	r1, [pc, #4]	; 11454 <CUSBKeyboardDevice::UpdateLEDs()+0x58>
   1144c:	ea002fed 	b	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11450:	00025660 	.word	0x00025660
   11454:	00025610 	.word	0x00025610

00011458 <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)>:
   11458:	e0802002 	add	r2, r0, r2
   1145c:	ea000002 	b	1146c <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)+0x14>
   11460:	e4d03001 	ldrb	r3, [r0], #1
   11464:	e1530001 	cmp	r3, r1
   11468:	0a000003 	beq	1147c <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)+0x24>
   1146c:	e1500002 	cmp	r0, r2
   11470:	1afffffa 	bne	11460 <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)+0x8>
   11474:	e3a00000 	mov	r0, #0
   11478:	e12fff1e 	bx	lr
   1147c:	e3a00001 	mov	r0, #1
   11480:	e12fff1e 	bx	lr

00011484 <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)>:
   11484:	e3a03000 	mov	r3, #0
   11488:	e1510003 	cmp	r1, r3
   1148c:	e92d4010 	push	{r4, lr}
   11490:	e1a04000 	mov	r4, r0
   11494:	e880000a 	stm	r0, {r1, r3}
   11498:	0a000001 	beq	114a4 <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)+0x20>
   1149c:	e1a00004 	mov	r0, r4
   114a0:	e8bd8010 	pop	{r4, pc}
   114a4:	e3a0201f 	mov	r2, #31
   114a8:	e59f100c 	ldr	r1, [pc, #12]	; 114bc <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)+0x38>
   114ac:	e59f000c 	ldr	r0, [pc, #12]	; 114c0 <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)+0x3c>
   114b0:	eb002438 	bl	1a598 <assertion_failed>
   114b4:	e1a00004 	mov	r0, r4
   114b8:	e8bd8010 	pop	{r4, pc}
   114bc:	00025680 	.word	0x00025680
   114c0:	000248c0 	.word	0x000248c0

000114c4 <CDWHCIRootPort::~CDWHCIRootPort()>:
   114c4:	e92d4010 	push	{r4, lr}
   114c8:	e1a04000 	mov	r4, r0
   114cc:	e5900004 	ldr	r0, [r0, #4]
   114d0:	e3500000 	cmp	r0, #0
   114d4:	0a000002 	beq	114e4 <CDWHCIRootPort::~CDWHCIRootPort()+0x20>
   114d8:	e5903000 	ldr	r3, [r0]
   114dc:	e5933004 	ldr	r3, [r3, #4]
   114e0:	e12fff33 	blx	r3
   114e4:	e1a00004 	mov	r0, r4
   114e8:	e8bd8010 	pop	{r4, pc}

000114ec <CDWHCIRootPort::Initialize()>:
   114ec:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   114f0:	e1a04000 	mov	r4, r0
   114f4:	e5900000 	ldr	r0, [r0]
   114f8:	e24dd00c 	sub	sp, sp, #12
   114fc:	e3500000 	cmp	r0, #0
   11500:	0a00004d 	beq	1163c <CDWHCIRootPort::Initialize()+0x150>
   11504:	ebffe278 	bl	9eec <CDWHCIDevice::GetPortSpeed()>
   11508:	e3500003 	cmp	r0, #3
   1150c:	e1a05000 	mov	r5, r0
   11510:	0a000042 	beq	11620 <CDWHCIRootPort::Initialize()+0x134>
   11514:	e5943004 	ldr	r3, [r4, #4]
   11518:	e3530000 	cmp	r3, #0
   1151c:	0a000003 	beq	11530 <CDWHCIRootPort::Initialize()+0x44>
   11520:	e3a02036 	mov	r2, #54	; 0x36
   11524:	e59f1128 	ldr	r1, [pc, #296]	; 11654 <CDWHCIRootPort::Initialize()+0x168>
   11528:	e59f0128 	ldr	r0, [pc, #296]	; 11658 <CDWHCIRootPort::Initialize()+0x16c>
   1152c:	eb002419 	bl	1a598 <assertion_failed>
   11530:	e3a00048 	mov	r0, #72	; 0x48
   11534:	eb0044e8 	bl	228dc <operator new(unsigned int)>
   11538:	e3a07001 	mov	r7, #1
   1153c:	e3a03000 	mov	r3, #0
   11540:	e1a06000 	mov	r6, r0
   11544:	e5941000 	ldr	r1, [r4]
   11548:	e1a02005 	mov	r2, r5
   1154c:	e88d0088 	stm	sp, {r3, r7}
   11550:	ebffef6e 	bl	d310 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, bool, unsigned char, unsigned char)>
   11554:	e5846004 	str	r6, [r4, #4]
   11558:	e1a00006 	mov	r0, r6
   1155c:	ebfff0ed 	bl	d918 <CUSBDevice::Initialize()>
   11560:	e3500000 	cmp	r0, #0
   11564:	e5940004 	ldr	r0, [r4, #4]
   11568:	1a00000a 	bne	11598 <CDWHCIRootPort::Initialize()+0xac>
   1156c:	e3500000 	cmp	r0, #0
   11570:	0a000002 	beq	11580 <CDWHCIRootPort::Initialize()+0x94>
   11574:	e5903000 	ldr	r3, [r0]
   11578:	e5933004 	ldr	r3, [r3, #4]
   1157c:	e12fff33 	blx	r3
   11580:	e3a00000 	mov	r0, #0
   11584:	e1a05000 	mov	r5, r0
   11588:	e5840004 	str	r0, [r4, #4]
   1158c:	e1a00005 	mov	r0, r5
   11590:	e28dd00c 	add	sp, sp, #12
   11594:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   11598:	e5903000 	ldr	r3, [r0]
   1159c:	e593300c 	ldr	r3, [r3, #12]
   115a0:	e12fff33 	blx	r3
   115a4:	e2505000 	subs	r5, r0, #0
   115a8:	0a000013 	beq	115fc <CDWHCIRootPort::Initialize()+0x110>
   115ac:	eb002dec 	bl	1cd64 <CLogger::Get()>
   115b0:	e59f30a4 	ldr	r3, [pc, #164]	; 1165c <CDWHCIRootPort::Initialize()+0x170>
   115b4:	e3a02004 	mov	r2, #4
   115b8:	e59f10a0 	ldr	r1, [pc, #160]	; 11660 <CDWHCIRootPort::Initialize()+0x174>
   115bc:	eb002f91 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   115c0:	e5940000 	ldr	r0, [r4]
   115c4:	ebffe25d 	bl	9f40 <CDWHCIDevice::OvercurrentDetected()>
   115c8:	e3500000 	cmp	r0, #0
   115cc:	0affffee 	beq	1158c <CDWHCIRootPort::Initialize()+0xa0>
   115d0:	eb002de3 	bl	1cd64 <CLogger::Get()>
   115d4:	e1a02007 	mov	r2, r7
   115d8:	e59f3084 	ldr	r3, [pc, #132]	; 11664 <CDWHCIRootPort::Initialize()+0x178>
   115dc:	e59f107c 	ldr	r1, [pc, #124]	; 11660 <CDWHCIRootPort::Initialize()+0x174>
   115e0:	eb002f88 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   115e4:	e5940000 	ldr	r0, [r4]
   115e8:	ebffe263 	bl	9f7c <CDWHCIDevice::DisableRootPort()>
   115ec:	e5940004 	ldr	r0, [r4, #4]
   115f0:	e3500000 	cmp	r0, #0
   115f4:	1affffde 	bne	11574 <CDWHCIRootPort::Initialize()+0x88>
   115f8:	eaffffe0 	b	11580 <CDWHCIRootPort::Initialize()+0x94>
   115fc:	eb002dd8 	bl	1cd64 <CLogger::Get()>
   11600:	e59f3060 	ldr	r3, [pc, #96]	; 11668 <CDWHCIRootPort::Initialize()+0x17c>
   11604:	e3a02002 	mov	r2, #2
   11608:	e59f1050 	ldr	r1, [pc, #80]	; 11660 <CDWHCIRootPort::Initialize()+0x174>
   1160c:	eb002f7d 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11610:	e5940004 	ldr	r0, [r4, #4]
   11614:	e3500000 	cmp	r0, #0
   11618:	1affffd5 	bne	11574 <CDWHCIRootPort::Initialize()+0x88>
   1161c:	eaffffd7 	b	11580 <CDWHCIRootPort::Initialize()+0x94>
   11620:	eb002dcf 	bl	1cd64 <CLogger::Get()>
   11624:	e59f3040 	ldr	r3, [pc, #64]	; 1166c <CDWHCIRootPort::Initialize()+0x180>
   11628:	e3a02001 	mov	r2, #1
   1162c:	e59f102c 	ldr	r1, [pc, #44]	; 11660 <CDWHCIRootPort::Initialize()+0x174>
   11630:	eb002f74 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11634:	e3a05000 	mov	r5, #0
   11638:	eaffffd3 	b	1158c <CDWHCIRootPort::Initialize()+0xa0>
   1163c:	e59f002c 	ldr	r0, [pc, #44]	; 11670 <CDWHCIRootPort::Initialize()+0x184>
   11640:	e3a0202c 	mov	r2, #44	; 0x2c
   11644:	e59f1008 	ldr	r1, [pc, #8]	; 11654 <CDWHCIRootPort::Initialize()+0x168>
   11648:	eb0023d2 	bl	1a598 <assertion_failed>
   1164c:	e5940000 	ldr	r0, [r4]
   11650:	eaffffab 	b	11504 <CDWHCIRootPort::Initialize()+0x18>
   11654:	00025680 	.word	0x00025680
   11658:	000256b0 	.word	0x000256b0
   1165c:	000256d8 	.word	0x000256d8
   11660:	00025678 	.word	0x00025678
   11664:	000256ec 	.word	0x000256ec
   11668:	000256c0 	.word	0x000256c0
   1166c:	00025694 	.word	0x00025694
   11670:	000248c0 	.word	0x000248c0

00011674 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)>:
   11674:	e92d4070 	push	{r4, r5, r6, lr}
   11678:	e2505000 	subs	r5, r0, #0
   1167c:	e1a04001 	mov	r4, r1
   11680:	0a000012 	beq	116d0 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x5c>
   11684:	ebfff499 	bl	e8f0 <CUSBRequest::GetStatus() const>
   11688:	e3500000 	cmp	r0, #0
   1168c:	0a000009 	beq	116b8 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x44>
   11690:	e1a00005 	mov	r0, r5
   11694:	ebfff480 	bl	e89c <CUSBRequest::~CUSBRequest()>
   11698:	e1a00005 	mov	r0, r5
   1169c:	e3a01028 	mov	r1, #40	; 0x28
   116a0:	ebfff507 	bl	eac4 <CUSBRequest::operator delete(void*, unsigned int)>
   116a4:	e3540000 	cmp	r4, #0
   116a8:	0a000016 	beq	11708 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x94>
   116ac:	e1a00004 	mov	r0, r4
   116b0:	e8bd4070 	pop	{r4, r5, r6, lr}
   116b4:	ea00448b 	b	228e8 <operator delete[](void*)>
   116b8:	eb002da9 	bl	1cd64 <CLogger::Get()>
   116bc:	e59f3058 	ldr	r3, [pc, #88]	; 1171c <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0xa8>
   116c0:	e3a02002 	mov	r2, #2
   116c4:	e59f1054 	ldr	r1, [pc, #84]	; 11720 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0xac>
   116c8:	eb002f4e 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   116cc:	eaffffef 	b	11690 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x1c>
   116d0:	e3a020af 	mov	r2, #175	; 0xaf
   116d4:	e59f1048 	ldr	r1, [pc, #72]	; 11724 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0xb0>
   116d8:	e59f0048 	ldr	r0, [pc, #72]	; 11728 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0xb4>
   116dc:	eb0023ad 	bl	1a598 <assertion_failed>
   116e0:	e1a00005 	mov	r0, r5
   116e4:	ebfff481 	bl	e8f0 <CUSBRequest::GetStatus() const>
   116e8:	e3500000 	cmp	r0, #0
   116ec:	1affffec 	bne	116a4 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x30>
   116f0:	eb002d9b 	bl	1cd64 <CLogger::Get()>
   116f4:	e59f3020 	ldr	r3, [pc, #32]	; 1171c <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0xa8>
   116f8:	e3a02002 	mov	r2, #2
   116fc:	e59f101c 	ldr	r1, [pc, #28]	; 11720 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0xac>
   11700:	eb002f40 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11704:	eaffffe6 	b	116a4 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x30>
   11708:	e3a020b8 	mov	r2, #184	; 0xb8
   1170c:	e8bd4070 	pop	{r4, r5, r6, lr}
   11710:	e59f100c 	ldr	r1, [pc, #12]	; 11724 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0xb0>
   11714:	e59f0010 	ldr	r0, [pc, #16]	; 1172c <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0xb8>
   11718:	ea00239e 	b	1a598 <assertion_failed>
   1171c:	0002575c 	.word	0x0002575c
   11720:	00025704 	.word	0x00025704
   11724:	00025734 	.word	0x00025734
   11728:	0002418c 	.word	0x0002418c
   1172c:	00025748 	.word	0x00025748

00011730 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>:
   11730:	e92d4070 	push	{r4, r5, r6, lr}
   11734:	e1a04000 	mov	r4, r0
   11738:	e1a05002 	mov	r5, r2
   1173c:	eb000c16 	bl	1479c <CUSBFunction::CUSBFunction(CUSBFunction*)>
   11740:	e3a03000 	mov	r3, #0
   11744:	e59f2030 	ldr	r2, [pc, #48]	; 1177c <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)+0x4c>
   11748:	e1550003 	cmp	r5, r3
   1174c:	e5845010 	str	r5, [r4, #16]
   11750:	e5842000 	str	r2, [r4]
   11754:	e5843014 	str	r3, [r4, #20]
   11758:	e5843018 	str	r3, [r4, #24]
   1175c:	e584301c 	str	r3, [r4, #28]
   11760:	e5843020 	str	r3, [r4, #32]
   11764:	0a000002 	beq	11774 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)+0x44>
   11768:	e1a00005 	mov	r0, r5
   1176c:	eb00445b 	bl	228e0 <operator new[](unsigned int)>
   11770:	e5840020 	str	r0, [r4, #32]
   11774:	e1a00004 	mov	r0, r4
   11778:	e8bd8070 	pop	{r4, r5, r6, pc}
   1177c:	00025714 	.word	0x00025714

00011780 <CUSBHIDDevice::~CUSBHIDDevice()>:
   11780:	e92d4070 	push	{r4, r5, r6, lr}
   11784:	e1a04000 	mov	r4, r0
   11788:	e5900020 	ldr	r0, [r0, #32]
   1178c:	e59f3074 	ldr	r3, [pc, #116]	; 11808 <CUSBHIDDevice::~CUSBHIDDevice()+0x88>
   11790:	e3500000 	cmp	r0, #0
   11794:	e5843000 	str	r3, [r4]
   11798:	0a000000 	beq	117a0 <CUSBHIDDevice::~CUSBHIDDevice()+0x20>
   1179c:	eb004451 	bl	228e8 <operator delete[](void*)>
   117a0:	e3a03000 	mov	r3, #0
   117a4:	e5945018 	ldr	r5, [r4, #24]
   117a8:	e5843020 	str	r3, [r4, #32]
   117ac:	e1550003 	cmp	r5, r3
   117b0:	0a000004 	beq	117c8 <CUSBHIDDevice::~CUSBHIDDevice()+0x48>
   117b4:	e1a00005 	mov	r0, r5
   117b8:	ebfff30f 	bl	e3fc <CUSBEndpoint::~CUSBEndpoint()>
   117bc:	e1a00005 	mov	r0, r5
   117c0:	e3a01014 	mov	r1, #20
   117c4:	eb004448 	bl	228ec <operator delete(void*, unsigned int)>
   117c8:	e3a03000 	mov	r3, #0
   117cc:	e5945014 	ldr	r5, [r4, #20]
   117d0:	e5843018 	str	r3, [r4, #24]
   117d4:	e1550003 	cmp	r5, r3
   117d8:	0a000004 	beq	117f0 <CUSBHIDDevice::~CUSBHIDDevice()+0x70>
   117dc:	e1a00005 	mov	r0, r5
   117e0:	ebfff305 	bl	e3fc <CUSBEndpoint::~CUSBEndpoint()>
   117e4:	e1a00005 	mov	r0, r5
   117e8:	e3a01014 	mov	r1, #20
   117ec:	eb00443e 	bl	228ec <operator delete(void*, unsigned int)>
   117f0:	e3a03000 	mov	r3, #0
   117f4:	e1a00004 	mov	r0, r4
   117f8:	e5843014 	str	r3, [r4, #20]
   117fc:	eb000b98 	bl	14664 <CUSBFunction::~CUSBFunction()>
   11800:	e1a00004 	mov	r0, r4
   11804:	e8bd8070 	pop	{r4, r5, r6, pc}
   11808:	00025714 	.word	0x00025714

0001180c <CUSBHIDDevice::~CUSBHIDDevice()>:
   1180c:	e92d4010 	push	{r4, lr}
   11810:	e1a04000 	mov	r4, r0
   11814:	ebffffd9 	bl	11780 <CUSBHIDDevice::~CUSBHIDDevice()>
   11818:	e1a00004 	mov	r0, r4
   1181c:	e3a01024 	mov	r1, #36	; 0x24
   11820:	eb004431 	bl	228ec <operator delete(void*, unsigned int)>
   11824:	e1a00004 	mov	r0, r4
   11828:	e8bd8010 	pop	{r4, pc}

0001182c <CUSBHIDDevice::Configure(unsigned int)>:
   1182c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11830:	e24dd010 	sub	sp, sp, #16
   11834:	e1a07001 	mov	r7, r1
   11838:	e1a05000 	mov	r5, r0
   1183c:	eb000c32 	bl	1490c <CUSBFunction::GetNumEndpoints() const>
   11840:	e2506000 	subs	r6, r0, #0
   11844:	13a06005 	movne	r6, #5
   11848:	13a08014 	movne	r8, #20
   1184c:	1a000004 	bne	11864 <CUSBHIDDevice::Configure(unsigned int)+0x38>
   11850:	ea00005d 	b	119cc <CUSBHIDDevice::Configure(unsigned int)+0x1a0>
   11854:	e5d43003 	ldrb	r3, [r4, #3]
   11858:	e203303f 	and	r3, r3, #63	; 0x3f
   1185c:	e3530003 	cmp	r3, #3
   11860:	0a00001a 	beq	118d0 <CUSBHIDDevice::Configure(unsigned int)+0xa4>
   11864:	e1a01006 	mov	r1, r6
   11868:	e1a00005 	mov	r0, r5
   1186c:	eb000c99 	bl	14ad8 <CUSBFunction::GetDescriptor(unsigned char)>
   11870:	e2504000 	subs	r4, r0, #0
   11874:	1afffff6 	bne	11854 <CUSBHIDDevice::Configure(unsigned int)+0x28>
   11878:	e5956014 	ldr	r6, [r5, #20]
   1187c:	e1a00005 	mov	r0, r5
   11880:	e3560000 	cmp	r6, #0
   11884:	0a00004d 	beq	119c0 <CUSBHIDDevice::Configure(unsigned int)+0x194>
   11888:	eb000c61 	bl	14a14 <CUSBFunction::Configure()>
   1188c:	e2506000 	subs	r6, r0, #0
   11890:	0a00001f 	beq	11914 <CUSBHIDDevice::Configure(unsigned int)+0xe8>
   11894:	e1a00005 	mov	r0, r5
   11898:	eb000d06 	bl	14cb8 <CUSBFunction::GetInterfaceClass() const>
   1189c:	e3500003 	cmp	r0, #3
   118a0:	0a00004d 	beq	119dc <CUSBHIDDevice::Configure(unsigned int)+0x1b0>
   118a4:	e5953010 	ldr	r3, [r5, #16]
   118a8:	e3530000 	cmp	r3, #0
   118ac:	0a000020 	beq	11934 <CUSBHIDDevice::Configure(unsigned int)+0x108>
   118b0:	e5953020 	ldr	r3, [r5, #32]
   118b4:	e3530000 	cmp	r3, #0
   118b8:	1a00001a 	bne	11928 <CUSBHIDDevice::Configure(unsigned int)+0xfc>
   118bc:	e3a02082 	mov	r2, #130	; 0x82
   118c0:	e59f11a4 	ldr	r1, [pc, #420]	; 11a6c <CUSBHIDDevice::Configure(unsigned int)+0x240>
   118c4:	e59f01a4 	ldr	r0, [pc, #420]	; 11a70 <CUSBHIDDevice::Configure(unsigned int)+0x244>
   118c8:	eb002332 	bl	1a598 <assertion_failed>
   118cc:	ea000015 	b	11928 <CUSBHIDDevice::Configure(unsigned int)+0xfc>
   118d0:	e1d430d2 	ldrsb	r3, [r4, #2]
   118d4:	e3530000 	cmp	r3, #0
   118d8:	ba000025 	blt	11974 <CUSBHIDDevice::Configure(unsigned int)+0x148>
   118dc:	e5953018 	ldr	r3, [r5, #24]
   118e0:	e1a00005 	mov	r0, r5
   118e4:	e3530000 	cmp	r3, #0
   118e8:	1a00005b 	bne	11a5c <CUSBHIDDevice::Configure(unsigned int)+0x230>
   118ec:	eb000c16 	bl	1494c <CUSBFunction::GetDevice() const>
   118f0:	e1a0a000 	mov	sl, r0
   118f4:	e1a00008 	mov	r0, r8
   118f8:	eb0043f7 	bl	228dc <operator new(unsigned int)>
   118fc:	e1a09000 	mov	r9, r0
   11900:	e1a02004 	mov	r2, r4
   11904:	e1a0100a 	mov	r1, sl
   11908:	ebfff229 	bl	e1b4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   1190c:	e5859018 	str	r9, [r5, #24]
   11910:	eaffffd3 	b	11864 <CUSBHIDDevice::Configure(unsigned int)+0x38>
   11914:	eb002d12 	bl	1cd64 <CLogger::Get()>
   11918:	e59f3154 	ldr	r3, [pc, #340]	; 11a74 <CUSBHIDDevice::Configure(unsigned int)+0x248>
   1191c:	e3a02001 	mov	r2, #1
   11920:	e59f1150 	ldr	r1, [pc, #336]	; 11a78 <CUSBHIDDevice::Configure(unsigned int)+0x24c>
   11924:	eb002eb7 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11928:	e1a00006 	mov	r0, r6
   1192c:	e28dd010 	add	sp, sp, #16
   11930:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11934:	e3570000 	cmp	r7, #0
   11938:	e5857010 	str	r7, [r5, #16]
   1193c:	0a00001a 	beq	119ac <CUSBHIDDevice::Configure(unsigned int)+0x180>
   11940:	e5953020 	ldr	r3, [r5, #32]
   11944:	e3530000 	cmp	r3, #0
   11948:	0a000003 	beq	1195c <CUSBHIDDevice::Configure(unsigned int)+0x130>
   1194c:	e3a0207f 	mov	r2, #127	; 0x7f
   11950:	e59f1114 	ldr	r1, [pc, #276]	; 11a6c <CUSBHIDDevice::Configure(unsigned int)+0x240>
   11954:	e59f0120 	ldr	r0, [pc, #288]	; 11a7c <CUSBHIDDevice::Configure(unsigned int)+0x250>
   11958:	eb00230e 	bl	1a598 <assertion_failed>
   1195c:	e5950010 	ldr	r0, [r5, #16]
   11960:	eb0043de 	bl	228e0 <operator new[](unsigned int)>
   11964:	e5850020 	str	r0, [r5, #32]
   11968:	e1a00006 	mov	r0, r6
   1196c:	e28dd010 	add	sp, sp, #16
   11970:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11974:	e5953014 	ldr	r3, [r5, #20]
   11978:	e1a00005 	mov	r0, r5
   1197c:	e3530000 	cmp	r3, #0
   11980:	1a000035 	bne	11a5c <CUSBHIDDevice::Configure(unsigned int)+0x230>
   11984:	eb000bf0 	bl	1494c <CUSBFunction::GetDevice() const>
   11988:	e1a0a000 	mov	sl, r0
   1198c:	e1a00008 	mov	r0, r8
   11990:	eb0043d1 	bl	228dc <operator new(unsigned int)>
   11994:	e1a09000 	mov	r9, r0
   11998:	e1a02004 	mov	r2, r4
   1199c:	e1a0100a 	mov	r1, sl
   119a0:	ebfff203 	bl	e1b4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   119a4:	e5859014 	str	r9, [r5, #20]
   119a8:	eaffffad 	b	11864 <CUSBHIDDevice::Configure(unsigned int)+0x38>
   119ac:	e3a0207d 	mov	r2, #125	; 0x7d
   119b0:	e59f10b4 	ldr	r1, [pc, #180]	; 11a6c <CUSBHIDDevice::Configure(unsigned int)+0x240>
   119b4:	e59f00c4 	ldr	r0, [pc, #196]	; 11a80 <CUSBHIDDevice::Configure(unsigned int)+0x254>
   119b8:	eb0022f6 	bl	1a598 <assertion_failed>
   119bc:	eaffffdf 	b	11940 <CUSBHIDDevice::Configure(unsigned int)+0x114>
   119c0:	e59f10b0 	ldr	r1, [pc, #176]	; 11a78 <CUSBHIDDevice::Configure(unsigned int)+0x24c>
   119c4:	eb000c56 	bl	14b24 <CUSBFunction::ConfigurationError(char const*) const>
   119c8:	eaffffd6 	b	11928 <CUSBHIDDevice::Configure(unsigned int)+0xfc>
   119cc:	e1a00005 	mov	r0, r5
   119d0:	e59f10a0 	ldr	r1, [pc, #160]	; 11a78 <CUSBHIDDevice::Configure(unsigned int)+0x24c>
   119d4:	eb000c52 	bl	14b24 <CUSBFunction::ConfigurationError(char const*) const>
   119d8:	eaffffd2 	b	11928 <CUSBHIDDevice::Configure(unsigned int)+0xfc>
   119dc:	e1a00005 	mov	r0, r5
   119e0:	eb000cc4 	bl	14cf8 <CUSBFunction::GetInterfaceSubClass() const>
   119e4:	e3500001 	cmp	r0, #1
   119e8:	e1a0a000 	mov	sl, r0
   119ec:	1affffac 	bne	118a4 <CUSBHIDDevice::Configure(unsigned int)+0x78>
   119f0:	e1a00005 	mov	r0, r5
   119f4:	eb000bf5 	bl	149d0 <CUSBFunction::GetHost() const>
   119f8:	e1a08000 	mov	r8, r0
   119fc:	e1a00005 	mov	r0, r5
   11a00:	eb000be1 	bl	1498c <CUSBFunction::GetEndpoint0() const>
   11a04:	e1a09000 	mov	r9, r0
   11a08:	e1a00005 	mov	r0, r5
   11a0c:	eb000c99 	bl	14c78 <CUSBFunction::GetInterfaceNumber() const>
   11a10:	e6ff0070 	uxth	r0, r0
   11a14:	e58d0004 	str	r0, [sp, #4]
   11a18:	e1a01009 	mov	r1, r9
   11a1c:	e1a00008 	mov	r0, r8
   11a20:	e58d400c 	str	r4, [sp, #12]
   11a24:	e58d4008 	str	r4, [sp, #8]
   11a28:	e58d4000 	str	r4, [sp]
   11a2c:	e3a0300b 	mov	r3, #11
   11a30:	e3a02021 	mov	r2, #33	; 0x21
   11a34:	ebfff2f4 	bl	e60c <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   11a38:	e3500000 	cmp	r0, #0
   11a3c:	aaffff98 	bge	118a4 <CUSBHIDDevice::Configure(unsigned int)+0x78>
   11a40:	eb002cc7 	bl	1cd64 <CLogger::Get()>
   11a44:	e1a0200a 	mov	r2, sl
   11a48:	e59f3034 	ldr	r3, [pc, #52]	; 11a84 <CUSBHIDDevice::Configure(unsigned int)+0x258>
   11a4c:	e59f1024 	ldr	r1, [pc, #36]	; 11a78 <CUSBHIDDevice::Configure(unsigned int)+0x24c>
   11a50:	e1a06004 	mov	r6, r4
   11a54:	eb002e6b 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11a58:	eaffffb2 	b	11928 <CUSBHIDDevice::Configure(unsigned int)+0xfc>
   11a5c:	e59f1014 	ldr	r1, [pc, #20]	; 11a78 <CUSBHIDDevice::Configure(unsigned int)+0x24c>
   11a60:	eb000c2f 	bl	14b24 <CUSBFunction::ConfigurationError(char const*) const>
   11a64:	e3a06000 	mov	r6, #0
   11a68:	eaffffae 	b	11928 <CUSBHIDDevice::Configure(unsigned int)+0xfc>
   11a6c:	00025734 	.word	0x00025734
   11a70:	000257c4 	.word	0x000257c4
   11a74:	00025170 	.word	0x00025170
   11a78:	00025704 	.word	0x00025704
   11a7c:	000257ac 	.word	0x000257ac
   11a80:	00025794 	.word	0x00025794
   11a84:	00025778 	.word	0x00025778

00011a88 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>:
   11a88:	e590c018 	ldr	ip, [r0, #24]
   11a8c:	e35c0000 	cmp	ip, #0
   11a90:	0a000019 	beq	11afc <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x74>
   11a94:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   11a98:	e3510000 	cmp	r1, #0
   11a9c:	e24dd00c 	sub	sp, sp, #12
   11aa0:	e1a07003 	mov	r7, r3
   11aa4:	e1a06002 	mov	r6, r2
   11aa8:	e1a05001 	mov	r5, r1
   11aac:	e1a04000 	mov	r4, r0
   11ab0:	0a000013 	beq	11b04 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x7c>
   11ab4:	e3560000 	cmp	r6, #0
   11ab8:	0a00000a 	beq	11ae8 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x60>
   11abc:	e1a00004 	mov	r0, r4
   11ac0:	eb000bc2 	bl	149d0 <CUSBFunction::GetHost() const>
   11ac4:	e5941018 	ldr	r1, [r4, #24]
   11ac8:	e1a03006 	mov	r3, r6
   11acc:	e58d7000 	str	r7, [sp]
   11ad0:	e1a02005 	mov	r2, r5
   11ad4:	ebfff332 	bl	e7a4 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   11ad8:	e1e00000 	mvn	r0, r0
   11adc:	e1a00fa0 	lsr	r0, r0, #31
   11ae0:	e28dd00c 	add	sp, sp, #12
   11ae4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   11ae8:	e3a0208f 	mov	r2, #143	; 0x8f
   11aec:	e59f1024 	ldr	r1, [pc, #36]	; 11b18 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x90>
   11af0:	e59f0024 	ldr	r0, [pc, #36]	; 11b1c <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x94>
   11af4:	eb0022a7 	bl	1a598 <assertion_failed>
   11af8:	eaffffef 	b	11abc <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x34>
   11afc:	e1a0000c 	mov	r0, ip
   11b00:	e12fff1e 	bx	lr
   11b04:	e3a0208e 	mov	r2, #142	; 0x8e
   11b08:	e59f1008 	ldr	r1, [pc, #8]	; 11b18 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x90>
   11b0c:	e59f000c 	ldr	r0, [pc, #12]	; 11b20 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x98>
   11b10:	eb0022a0 	bl	1a598 <assertion_failed>
   11b14:	eaffffe6 	b	11ab4 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x2c>
   11b18:	00025734 	.word	0x00025734
   11b1c:	000257dc 	.word	0x000257dc
   11b20:	0002526c 	.word	0x0002526c

00011b24 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)>:
   11b24:	e590c018 	ldr	ip, [r0, #24]
   11b28:	e35c0000 	cmp	ip, #0
   11b2c:	0a00002b 	beq	11be0 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xbc>
   11b30:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   11b34:	e3510000 	cmp	r1, #0
   11b38:	e24dd008 	sub	sp, sp, #8
   11b3c:	e1a07003 	mov	r7, r3
   11b40:	e1a05002 	mov	r5, r2
   11b44:	e1a06001 	mov	r6, r1
   11b48:	e1a04000 	mov	r4, r0
   11b4c:	0a000025 	beq	11be8 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xc4>
   11b50:	e3550000 	cmp	r5, #0
   11b54:	0a00001c 	beq	11bcc <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xa8>
   11b58:	e1a00005 	mov	r0, r5
   11b5c:	eb00435f 	bl	228e0 <operator new[](unsigned int)>
   11b60:	e1a02005 	mov	r2, r5
   11b64:	e1a01006 	mov	r1, r6
   11b68:	e1a08000 	mov	r8, r0
   11b6c:	eb00405e 	bl	21cec <memcpy>
   11b70:	e3a00028 	mov	r0, #40	; 0x28
   11b74:	ebfff3ba 	bl	ea64 <CUSBRequest::operator new(unsigned int)>
   11b78:	e3a0c000 	mov	ip, #0
   11b7c:	e1a06000 	mov	r6, r0
   11b80:	e5941018 	ldr	r1, [r4, #24]
   11b84:	e1a03005 	mov	r3, r5
   11b88:	e58dc000 	str	ip, [sp]
   11b8c:	e1a02008 	mov	r2, r8
   11b90:	ebfff31c 	bl	e808 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   11b94:	e1a03004 	mov	r3, r4
   11b98:	e1a02008 	mov	r2, r8
   11b9c:	e1a00006 	mov	r0, r6
   11ba0:	e59f1054 	ldr	r1, [pc, #84]	; 11bfc <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xd8>
   11ba4:	ebfff38c 	bl	e9dc <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   11ba8:	e1a00004 	mov	r0, r4
   11bac:	eb000b87 	bl	149d0 <CUSBFunction::GetHost() const>
   11bb0:	e1a01006 	mov	r1, r6
   11bb4:	e1a02007 	mov	r2, r7
   11bb8:	e5903000 	ldr	r3, [r0]
   11bbc:	e593300c 	ldr	r3, [r3, #12]
   11bc0:	e28dd008 	add	sp, sp, #8
   11bc4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   11bc8:	e12fff13 	bx	r3
   11bcc:	e3a020a1 	mov	r2, #161	; 0xa1
   11bd0:	e59f1028 	ldr	r1, [pc, #40]	; 11c00 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xdc>
   11bd4:	e59f0028 	ldr	r0, [pc, #40]	; 11c04 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xe0>
   11bd8:	eb00226e 	bl	1a598 <assertion_failed>
   11bdc:	eaffffdd 	b	11b58 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0x34>
   11be0:	e1a0000c 	mov	r0, ip
   11be4:	e12fff1e 	bx	lr
   11be8:	e3a020a0 	mov	r2, #160	; 0xa0
   11bec:	e59f100c 	ldr	r1, [pc, #12]	; 11c00 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xdc>
   11bf0:	e59f0010 	ldr	r0, [pc, #16]	; 11c08 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xe4>
   11bf4:	eb002267 	bl	1a598 <assertion_failed>
   11bf8:	eaffffd4 	b	11b50 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0x2c>
   11bfc:	00011674 	.word	0x00011674
   11c00:	00025734 	.word	0x00025734
   11c04:	000257dc 	.word	0x000257dc
   11c08:	0002526c 	.word	0x0002526c

00011c0c <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>:
   11c0c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   11c10:	e1a04000 	mov	r4, r0
   11c14:	e590001c 	ldr	r0, [r0, #28]
   11c18:	e24dd00c 	sub	sp, sp, #12
   11c1c:	e3500000 	cmp	r0, #0
   11c20:	e1a05001 	mov	r5, r1
   11c24:	e1a06002 	mov	r6, r2
   11c28:	e1a07003 	mov	r7, r3
   11c2c:	0a000003 	beq	11c40 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x34>
   11c30:	e3a020be 	mov	r2, #190	; 0xbe
   11c34:	e59f107c 	ldr	r1, [pc, #124]	; 11cb8 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xac>
   11c38:	e59f007c 	ldr	r0, [pc, #124]	; 11cbc <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xb0>
   11c3c:	eb002255 	bl	1a598 <assertion_failed>
   11c40:	e5943014 	ldr	r3, [r4, #20]
   11c44:	e3530000 	cmp	r3, #0
   11c48:	0a000015 	beq	11ca4 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x98>
   11c4c:	e3550000 	cmp	r5, #0
   11c50:	0a00000e 	beq	11c90 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x84>
   11c54:	e3560000 	cmp	r6, #0
   11c58:	1a000003 	bne	11c6c <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x60>
   11c5c:	e3a020c2 	mov	r2, #194	; 0xc2
   11c60:	e59f1050 	ldr	r1, [pc, #80]	; 11cb8 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xac>
   11c64:	e59f0054 	ldr	r0, [pc, #84]	; 11cc0 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xb4>
   11c68:	eb00224a 	bl	1a598 <assertion_failed>
   11c6c:	e1a00004 	mov	r0, r4
   11c70:	eb000b56 	bl	149d0 <CUSBFunction::GetHost() const>
   11c74:	e5941014 	ldr	r1, [r4, #20]
   11c78:	e1a03006 	mov	r3, r6
   11c7c:	e58d7000 	str	r7, [sp]
   11c80:	e1a02005 	mov	r2, r5
   11c84:	ebfff2c6 	bl	e7a4 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   11c88:	e28dd00c 	add	sp, sp, #12
   11c8c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   11c90:	e3a020c1 	mov	r2, #193	; 0xc1
   11c94:	e59f101c 	ldr	r1, [pc, #28]	; 11cb8 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xac>
   11c98:	e59f0024 	ldr	r0, [pc, #36]	; 11cc4 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xb8>
   11c9c:	eb00223d 	bl	1a598 <assertion_failed>
   11ca0:	eaffffeb 	b	11c54 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x48>
   11ca4:	e3a020c0 	mov	r2, #192	; 0xc0
   11ca8:	e59f1008 	ldr	r1, [pc, #8]	; 11cb8 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xac>
   11cac:	e59f0014 	ldr	r0, [pc, #20]	; 11cc8 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xbc>
   11cb0:	eb002238 	bl	1a598 <assertion_failed>
   11cb4:	eaffffe4 	b	11c4c <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x40>
   11cb8:	00025734 	.word	0x00025734
   11cbc:	000257ec 	.word	0x000257ec
   11cc0:	000257dc 	.word	0x000257dc
   11cc4:	0002526c 	.word	0x0002526c
   11cc8:	000257f8 	.word	0x000257f8

00011ccc <CUSBHIDDevice::StartRequest()>:
   11ccc:	e92d4070 	push	{r4, r5, r6, lr}
   11cd0:	e5903014 	ldr	r3, [r0, #20]
   11cd4:	e24dd008 	sub	sp, sp, #8
   11cd8:	e3530000 	cmp	r3, #0
   11cdc:	e1a04000 	mov	r4, r0
   11ce0:	0a000038 	beq	11dc8 <CUSBHIDDevice::StartRequest()+0xfc>
   11ce4:	e5943020 	ldr	r3, [r4, #32]
   11ce8:	e3530000 	cmp	r3, #0
   11cec:	0a000030 	beq	11db4 <CUSBHIDDevice::StartRequest()+0xe8>
   11cf0:	e594301c 	ldr	r3, [r4, #28]
   11cf4:	e3530000 	cmp	r3, #0
   11cf8:	0a000003 	beq	11d0c <CUSBHIDDevice::StartRequest()+0x40>
   11cfc:	e3a020cb 	mov	r2, #203	; 0xcb
   11d00:	e59f10d4 	ldr	r1, [pc, #212]	; 11ddc <CUSBHIDDevice::StartRequest()+0x110>
   11d04:	e59f00d4 	ldr	r0, [pc, #212]	; 11de0 <CUSBHIDDevice::StartRequest()+0x114>
   11d08:	eb002222 	bl	1a598 <assertion_failed>
   11d0c:	e5945010 	ldr	r5, [r4, #16]
   11d10:	e3550000 	cmp	r5, #0
   11d14:	0a000017 	beq	11d78 <CUSBHIDDevice::StartRequest()+0xac>
   11d18:	e3a00028 	mov	r0, #40	; 0x28
   11d1c:	ebfff350 	bl	ea64 <CUSBRequest::operator new(unsigned int)>
   11d20:	e3a0c000 	mov	ip, #0
   11d24:	e1a05000 	mov	r5, r0
   11d28:	e5943010 	ldr	r3, [r4, #16]
   11d2c:	e5942020 	ldr	r2, [r4, #32]
   11d30:	e5941014 	ldr	r1, [r4, #20]
   11d34:	e58dc000 	str	ip, [sp]
   11d38:	ebfff2b2 	bl	e808 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   11d3c:	e1a00005 	mov	r0, r5
   11d40:	e584501c 	str	r5, [r4, #28]
   11d44:	e1a03004 	mov	r3, r4
   11d48:	e3a02000 	mov	r2, #0
   11d4c:	e59f1090 	ldr	r1, [pc, #144]	; 11de4 <CUSBHIDDevice::StartRequest()+0x118>
   11d50:	ebfff321 	bl	e9dc <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   11d54:	e1a00004 	mov	r0, r4
   11d58:	eb000b1c 	bl	149d0 <CUSBFunction::GetHost() const>
   11d5c:	e3a02000 	mov	r2, #0
   11d60:	e5903000 	ldr	r3, [r0]
   11d64:	e594101c 	ldr	r1, [r4, #28]
   11d68:	e593300c 	ldr	r3, [r3, #12]
   11d6c:	e28dd008 	add	sp, sp, #8
   11d70:	e8bd4070 	pop	{r4, r5, r6, lr}
   11d74:	e12fff13 	bx	r3
   11d78:	e3a020cc 	mov	r2, #204	; 0xcc
   11d7c:	e59f1058 	ldr	r1, [pc, #88]	; 11ddc <CUSBHIDDevice::StartRequest()+0x110>
   11d80:	e59f0060 	ldr	r0, [pc, #96]	; 11de8 <CUSBHIDDevice::StartRequest()+0x11c>
   11d84:	eb002203 	bl	1a598 <assertion_failed>
   11d88:	e3a00028 	mov	r0, #40	; 0x28
   11d8c:	ebfff334 	bl	ea64 <CUSBRequest::operator new(unsigned int)>
   11d90:	e1a06000 	mov	r6, r0
   11d94:	e5943010 	ldr	r3, [r4, #16]
   11d98:	e5942020 	ldr	r2, [r4, #32]
   11d9c:	e5941014 	ldr	r1, [r4, #20]
   11da0:	e58d5000 	str	r5, [sp]
   11da4:	ebfff297 	bl	e808 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   11da8:	e1a00006 	mov	r0, r6
   11dac:	e584601c 	str	r6, [r4, #28]
   11db0:	eaffffe3 	b	11d44 <CUSBHIDDevice::StartRequest()+0x78>
   11db4:	e3a020c9 	mov	r2, #201	; 0xc9
   11db8:	e59f101c 	ldr	r1, [pc, #28]	; 11ddc <CUSBHIDDevice::StartRequest()+0x110>
   11dbc:	e59f0028 	ldr	r0, [pc, #40]	; 11dec <CUSBHIDDevice::StartRequest()+0x120>
   11dc0:	eb0021f4 	bl	1a598 <assertion_failed>
   11dc4:	eaffffc9 	b	11cf0 <CUSBHIDDevice::StartRequest()+0x24>
   11dc8:	e3a020c8 	mov	r2, #200	; 0xc8
   11dcc:	e59f1008 	ldr	r1, [pc, #8]	; 11ddc <CUSBHIDDevice::StartRequest()+0x110>
   11dd0:	e59f0018 	ldr	r0, [pc, #24]	; 11df0 <CUSBHIDDevice::StartRequest()+0x124>
   11dd4:	eb0021ef 	bl	1a598 <assertion_failed>
   11dd8:	eaffffc1 	b	11ce4 <CUSBHIDDevice::StartRequest()+0x18>
   11ddc:	00025734 	.word	0x00025734
   11de0:	000257ec 	.word	0x000257ec
   11de4:	00011ee0 	.word	0x00011ee0
   11de8:	00025794 	.word	0x00025794
   11dec:	000257c4 	.word	0x000257c4
   11df0:	000257f8 	.word	0x000257f8

00011df4 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)>:
   11df4:	e92d4070 	push	{r4, r5, r6, lr}
   11df8:	e2515000 	subs	r5, r1, #0
   11dfc:	e1a04000 	mov	r4, r0
   11e00:	0a00002c 	beq	11eb8 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xc4>
   11e04:	e594301c 	ldr	r3, [r4, #28]
   11e08:	e1550003 	cmp	r5, r3
   11e0c:	0a000003 	beq	11e20 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x2c>
   11e10:	e3a020d7 	mov	r2, #215	; 0xd7
   11e14:	e59f10b0 	ldr	r1, [pc, #176]	; 11ecc <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xd8>
   11e18:	e59f00b0 	ldr	r0, [pc, #176]	; 11ed0 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xdc>
   11e1c:	eb0021dd 	bl	1a598 <assertion_failed>
   11e20:	e1a00005 	mov	r0, r5
   11e24:	ebfff2b1 	bl	e8f0 <CUSBRequest::GetStatus() const>
   11e28:	e2502000 	subs	r2, r0, #0
   11e2c:	e5943000 	ldr	r3, [r4]
   11e30:	0a00001b 	beq	11ea4 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xb0>
   11e34:	e1a00005 	mov	r0, r5
   11e38:	e5946020 	ldr	r6, [r4, #32]
   11e3c:	e593501c 	ldr	r5, [r3, #28]
   11e40:	ebfff2ac 	bl	e8f8 <CUSBRequest::GetResultLength() const>
   11e44:	e1a01006 	mov	r1, r6
   11e48:	e1a02000 	mov	r2, r0
   11e4c:	e1a00004 	mov	r0, r4
   11e50:	e12fff35 	blx	r5
   11e54:	e594501c 	ldr	r5, [r4, #28]
   11e58:	e3550000 	cmp	r5, #0
   11e5c:	0a000004 	beq	11e74 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x80>
   11e60:	e1a00005 	mov	r0, r5
   11e64:	ebfff28c 	bl	e89c <CUSBRequest::~CUSBRequest()>
   11e68:	e1a00005 	mov	r0, r5
   11e6c:	e3a01028 	mov	r1, #40	; 0x28
   11e70:	ebfff313 	bl	eac4 <CUSBRequest::operator delete(void*, unsigned int)>
   11e74:	e3a03000 	mov	r3, #0
   11e78:	e1a00004 	mov	r0, r4
   11e7c:	e584301c 	str	r3, [r4, #28]
   11e80:	ebffff91 	bl	11ccc <CUSBHIDDevice::StartRequest()>
   11e84:	e3500000 	cmp	r0, #0
   11e88:	18bd8070 	popne	{r4, r5, r6, pc}
   11e8c:	eb002bb4 	bl	1cd64 <CLogger::Get()>
   11e90:	e8bd4070 	pop	{r4, r5, r6, lr}
   11e94:	e59f3038 	ldr	r3, [pc, #56]	; 11ed4 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xe0>
   11e98:	e3a02001 	mov	r2, #1
   11e9c:	e59f1034 	ldr	r1, [pc, #52]	; 11ed8 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xe4>
   11ea0:	ea002d58 	b	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11ea4:	e593301c 	ldr	r3, [r3, #28]
   11ea8:	e1a01002 	mov	r1, r2
   11eac:	e1a00004 	mov	r0, r4
   11eb0:	e12fff33 	blx	r3
   11eb4:	eaffffe6 	b	11e54 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x60>
   11eb8:	e3a020d6 	mov	r2, #214	; 0xd6
   11ebc:	e59f1008 	ldr	r1, [pc, #8]	; 11ecc <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xd8>
   11ec0:	e59f0014 	ldr	r0, [pc, #20]	; 11edc <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xe8>
   11ec4:	eb0021b3 	bl	1a598 <assertion_failed>
   11ec8:	eaffffcd 	b	11e04 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x10>
   11ecc:	00025734 	.word	0x00025734
   11ed0:	00025810 	.word	0x00025810
   11ed4:	00025820 	.word	0x00025820
   11ed8:	00025704 	.word	0x00025704
   11edc:	0002418c 	.word	0x0002418c

00011ee0 <CUSBHIDDevice::CompletionStub(CUSBRequest*, void*, void*)>:
   11ee0:	e92d4070 	push	{r4, r5, r6, lr}
   11ee4:	e2524000 	subs	r4, r2, #0
   11ee8:	e1a05000 	mov	r5, r0
   11eec:	0a000003 	beq	11f00 <CUSBHIDDevice::CompletionStub(CUSBRequest*, void*, void*)+0x20>
   11ef0:	e1a01005 	mov	r1, r5
   11ef4:	e1a00004 	mov	r0, r4
   11ef8:	e8bd4070 	pop	{r4, r5, r6, lr}
   11efc:	eaffffbc 	b	11df4 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)>
   11f00:	e59f1018 	ldr	r1, [pc, #24]	; 11f20 <CUSBHIDDevice::CompletionStub(CUSBRequest*, void*, void*)+0x40>
   11f04:	e59f0018 	ldr	r0, [pc, #24]	; 11f24 <CUSBHIDDevice::CompletionStub(CUSBRequest*, void*, void*)+0x44>
   11f08:	e3a020ee 	mov	r2, #238	; 0xee
   11f0c:	eb0021a1 	bl	1a598 <assertion_failed>
   11f10:	e1a01005 	mov	r1, r5
   11f14:	e1a00004 	mov	r0, r4
   11f18:	e8bd4070 	pop	{r4, r5, r6, lr}
   11f1c:	eaffffb4 	b	11df4 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)>
   11f20:	00025734 	.word	0x00025734
   11f24:	000240a0 	.word	0x000240a0

00011f28 <CUSBMouseDevice::~CUSBMouseDevice()>:
   11f28:	e92d4010 	push	{r4, lr}
   11f2c:	e1a04000 	mov	r4, r0
   11f30:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   11f34:	e59f3044 	ldr	r3, [pc, #68]	; 11f80 <CUSBMouseDevice::~CUSBMouseDevice()+0x58>
   11f38:	e3500000 	cmp	r0, #0
   11f3c:	e5843000 	str	r3, [r4]
   11f40:	0a000002 	beq	11f50 <CUSBMouseDevice::~CUSBMouseDevice()+0x28>
   11f44:	e5903000 	ldr	r3, [r0]
   11f48:	e5933004 	ldr	r3, [r3, #4]
   11f4c:	e12fff33 	blx	r3
   11f50:	e3a03000 	mov	r3, #0
   11f54:	e5940028 	ldr	r0, [r4, #40]	; 0x28
   11f58:	e5843024 	str	r3, [r4, #36]	; 0x24
   11f5c:	e1500003 	cmp	r0, r3
   11f60:	0a000000 	beq	11f68 <CUSBMouseDevice::~CUSBMouseDevice()+0x40>
   11f64:	eb00425f 	bl	228e8 <operator delete[](void*)>
   11f68:	e3a03000 	mov	r3, #0
   11f6c:	e1a00004 	mov	r0, r4
   11f70:	e5843028 	str	r3, [r4, #40]	; 0x28
   11f74:	ebfffe01 	bl	11780 <CUSBHIDDevice::~CUSBHIDDevice()>
   11f78:	e1a00004 	mov	r0, r4
   11f7c:	e8bd8010 	pop	{r4, pc}
   11f80:	00025840 	.word	0x00025840

00011f84 <CUSBMouseDevice::~CUSBMouseDevice()>:
   11f84:	e92d4010 	push	{r4, lr}
   11f88:	e1a04000 	mov	r4, r0
   11f8c:	ebffffe5 	bl	11f28 <CUSBMouseDevice::~CUSBMouseDevice()>
   11f90:	e1a00004 	mov	r0, r4
   11f94:	e3a01030 	mov	r1, #48	; 0x30
   11f98:	eb004253 	bl	228ec <operator delete(void*, unsigned int)>
   11f9c:	e1a00004 	mov	r0, r4
   11fa0:	e8bd8010 	pop	{r4, pc}

00011fa4 <CUSBMouseDevice::Configure()>:
   11fa4:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   11fa8:	e3a01021 	mov	r1, #33	; 0x21
   11fac:	e24dd014 	sub	sp, sp, #20
   11fb0:	e1a04000 	mov	r4, r0
   11fb4:	eb000ac7 	bl	14ad8 <CUSBFunction::GetDescriptor(unsigned char)>
   11fb8:	e2505000 	subs	r5, r0, #0
   11fbc:	0a000003 	beq	11fd0 <CUSBMouseDevice::Configure()+0x2c>
   11fc0:	e5d50007 	ldrb	r0, [r5, #7]
   11fc4:	e5d53008 	ldrb	r3, [r5, #8]
   11fc8:	e1900403 	orrs	r0, r0, r3, lsl #8
   11fcc:	1a000006 	bne	11fec <CUSBMouseDevice::Configure()+0x48>
   11fd0:	e1a00004 	mov	r0, r4
   11fd4:	e59f10f0 	ldr	r1, [pc, #240]	; 120cc <CUSBMouseDevice::Configure()+0x128>
   11fd8:	eb000ad1 	bl	14b24 <CUSBFunction::ConfigurationError(char const*) const>
   11fdc:	e3a05000 	mov	r5, #0
   11fe0:	e1a00005 	mov	r0, r5
   11fe4:	e28dd014 	add	sp, sp, #20
   11fe8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   11fec:	e1c402bc 	strh	r0, [r4, #44]	; 0x2c
   11ff0:	eb00423a 	bl	228e0 <operator new[](unsigned int)>
   11ff4:	e5840028 	str	r0, [r4, #40]	; 0x28
   11ff8:	e1a00004 	mov	r0, r4
   11ffc:	eb000a73 	bl	149d0 <CUSBFunction::GetHost() const>
   12000:	e1a06000 	mov	r6, r0
   12004:	e1a00004 	mov	r0, r4
   12008:	eb000a5f 	bl	1498c <CUSBFunction::GetEndpoint0() const>
   1200c:	e1a07000 	mov	r7, r0
   12010:	e1a00004 	mov	r0, r4
   12014:	e5d55006 	ldrb	r5, [r5, #6]
   12018:	e5948028 	ldr	r8, [r4, #40]	; 0x28
   1201c:	e1d492bc 	ldrh	r9, [r4, #44]	; 0x2c
   12020:	eb000b14 	bl	14c78 <CUSBFunction::GetInterfaceNumber() const>
   12024:	e3a03081 	mov	r3, #129	; 0x81
   12028:	e6ff0070 	uxth	r0, r0
   1202c:	e58d000c 	str	r0, [sp, #12]
   12030:	e58d3008 	str	r3, [sp, #8]
   12034:	e88d0300 	stm	sp, {r8, r9}
   12038:	e3a03000 	mov	r3, #0
   1203c:	e1a02005 	mov	r2, r5
   12040:	e1a01007 	mov	r1, r7
   12044:	e1a00006 	mov	r0, r6
   12048:	ebfff1a1 	bl	e6d4 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   1204c:	e1d432bc 	ldrh	r3, [r4, #44]	; 0x2c
   12050:	e1500003 	cmp	r0, r3
   12054:	0a000008 	beq	1207c <CUSBMouseDevice::Configure()+0xd8>
   12058:	e3a05000 	mov	r5, #0
   1205c:	eb002b40 	bl	1cd64 <CLogger::Get()>
   12060:	e59f3068 	ldr	r3, [pc, #104]	; 120d0 <CUSBMouseDevice::Configure()+0x12c>
   12064:	e3a02001 	mov	r2, #1
   12068:	e59f105c 	ldr	r1, [pc, #92]	; 120cc <CUSBMouseDevice::Configure()+0x128>
   1206c:	eb002ce5 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12070:	e1a00005 	mov	r0, r5
   12074:	e28dd014 	add	sp, sp, #20
   12078:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1207c:	e3a01000 	mov	r1, #0
   12080:	e1a00004 	mov	r0, r4
   12084:	ebfffde8 	bl	1182c <CUSBHIDDevice::Configure(unsigned int)>
   12088:	e2505000 	subs	r5, r0, #0
   1208c:	0a000008 	beq	120b4 <CUSBMouseDevice::Configure()+0x110>
   12090:	e3a00028 	mov	r0, #40	; 0x28
   12094:	eb004210 	bl	228dc <operator new(unsigned int)>
   12098:	e1a05000 	mov	r5, r0
   1209c:	eb001da9 	bl	19748 <CMouseDevice::CMouseDevice()>
   120a0:	e1a00004 	mov	r0, r4
   120a4:	e5845024 	str	r5, [r4, #36]	; 0x24
   120a8:	e28dd014 	add	sp, sp, #20
   120ac:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
   120b0:	eaffff05 	b	11ccc <CUSBHIDDevice::StartRequest()>
   120b4:	eb002b2a 	bl	1cd64 <CLogger::Get()>
   120b8:	e59f3014 	ldr	r3, [pc, #20]	; 120d4 <CUSBMouseDevice::Configure()+0x130>
   120bc:	e3a02001 	mov	r2, #1
   120c0:	e59f1004 	ldr	r1, [pc, #4]	; 120cc <CUSBMouseDevice::Configure()+0x128>
   120c4:	eb002ccf 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   120c8:	eaffffc4 	b	11fe0 <CUSBMouseDevice::Configure()+0x3c>
   120cc:	00025860 	.word	0x00025860
   120d0:	00025868 	.word	0x00025868
   120d4:	00025644 	.word	0x00025644

000120d8 <CUSBMouseDevice::ReportHandler(unsigned char const*, unsigned int)>:
   120d8:	e2913000 	adds	r3, r1, #0
   120dc:	13a03001 	movne	r3, #1
   120e0:	e3520003 	cmp	r2, #3
   120e4:	13a03000 	movne	r3, #0
   120e8:	e3530000 	cmp	r3, #0
   120ec:	e1a02001 	mov	r2, r1
   120f0:	012fff1e 	bxeq	lr
   120f4:	e5d13000 	ldrb	r3, [r1]
   120f8:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   120fc:	e3130002 	tst	r3, #2
   12100:	e2031001 	and	r1, r3, #1
   12104:	13811002 	orrne	r1, r1, #2
   12108:	e3130004 	tst	r3, #4
   1210c:	13811004 	orrne	r1, r1, #4
   12110:	e3500000 	cmp	r0, #0
   12114:	012fff1e 	bxeq	lr
   12118:	e1d230d2 	ldrsb	r3, [r2, #2]
   1211c:	e1d220d1 	ldrsb	r2, [r2, #1]
   12120:	ea001dc5 	b	1983c <CMouseDevice::ReportHandler(unsigned int, int, int)>

00012124 <CUSBMouseDevice::CUSBMouseDevice(CUSBFunction*)>:
   12124:	e92d4010 	push	{r4, lr}
   12128:	e3a02003 	mov	r2, #3
   1212c:	e1a04000 	mov	r4, r0
   12130:	ebfffd7e 	bl	11730 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>
   12134:	e3a03000 	mov	r3, #0
   12138:	e59f2010 	ldr	r2, [pc, #16]	; 12150 <CUSBMouseDevice::CUSBMouseDevice(CUSBFunction*)+0x2c>
   1213c:	e5843024 	str	r3, [r4, #36]	; 0x24
   12140:	e5842000 	str	r2, [r4]
   12144:	e5843028 	str	r3, [r4, #40]	; 0x28
   12148:	e1a00004 	mov	r0, r4
   1214c:	e8bd8010 	pop	{r4, pc}
   12150:	00025840 	.word	0x00025840

00012154 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>:
   12154:	e92d4010 	push	{r4, lr}
   12158:	e1a04000 	mov	r4, r0
   1215c:	e5900134 	ldr	r0, [r0, #308]	; 0x134
   12160:	e59f3024 	ldr	r3, [pc, #36]	; 1218c <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()+0x38>
   12164:	e3500000 	cmp	r0, #0
   12168:	e5843000 	str	r3, [r4]
   1216c:	0a000000 	beq	12174 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()+0x20>
   12170:	eb0041dc 	bl	228e8 <operator delete[](void*)>
   12174:	e3a03000 	mov	r3, #0
   12178:	e1a00004 	mov	r0, r4
   1217c:	e5843134 	str	r3, [r4, #308]	; 0x134
   12180:	eb001b71 	bl	18f4c <CUSBGamePadDevice::~CUSBGamePadDevice()>
   12184:	e1a00004 	mov	r0, r4
   12188:	e8bd8010 	pop	{r4, pc}
   1218c:	00025894 	.word	0x00025894

00012190 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>:
   12190:	e92d4010 	push	{r4, lr}
   12194:	e1a04000 	mov	r4, r0
   12198:	ebffffed 	bl	12154 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>
   1219c:	e1a00004 	mov	r0, r4
   121a0:	e3a01f4f 	mov	r1, #316	; 0x13c
   121a4:	eb0041d0 	bl	228ec <operator delete(void*, unsigned int)>
   121a8:	e1a00004 	mov	r0, r4
   121ac:	e8bd8010 	pop	{r4, pc}

000121b0 <CUSBGamePadStandardDevice::CUSBGamePadStandardDevice(CUSBFunction*, bool)>:
   121b0:	e92d4070 	push	{r4, r5, r6, lr}
   121b4:	e1a04000 	mov	r4, r0
   121b8:	e1a05002 	mov	r5, r2
   121bc:	eb001b50 	bl	18f04 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   121c0:	e3a03000 	mov	r3, #0
   121c4:	e59f0018 	ldr	r0, [pc, #24]	; 121e4 <CUSBGamePadStandardDevice::CUSBGamePadStandardDevice(CUSBFunction*, bool)+0x34>
   121c8:	e2841f4e 	add	r1, r4, #312	; 0x138
   121cc:	e5840000 	str	r0, [r4]
   121d0:	e5c45130 	strb	r5, [r4, #304]	; 0x130
   121d4:	e5843134 	str	r3, [r4, #308]	; 0x134
   121d8:	e1a00004 	mov	r0, r4
   121dc:	e1c130b0 	strh	r3, [r1]
   121e0:	e8bd8070 	pop	{r4, r5, r6, pc}
   121e4:	00025894 	.word	0x00025894

000121e8 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>:
   121e8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   121ec:	e0814002 	add	r4, r1, r2
   121f0:	e2846007 	add	r6, r4, #7
   121f4:	e1a061a6 	lsr	r6, r6, #3
   121f8:	e1a0e1a1 	lsr	lr, r1, #3
   121fc:	e15e0006 	cmp	lr, r6
   12200:	e24dd00c 	sub	sp, sp, #12
   12204:	2a000037 	bcs	122e8 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0x100>
   12208:	e3a07001 	mov	r7, #1
   1220c:	e3a05000 	mov	r5, #0
   12210:	e2011007 	and	r1, r1, #7
   12214:	e0828001 	add	r8, r2, r1
   12218:	e1a08817 	lsl	r8, r7, r8
   1221c:	e6ef8078 	uxtb	r8, r8
   12220:	e1a07117 	lsl	r7, r7, r1
   12224:	e6ef7077 	uxtb	r7, r7
   12228:	e2489001 	sub	r9, r8, #1
   1222c:	e2444001 	sub	r4, r4, #1
   12230:	e0488007 	sub	r8, r8, r7
   12234:	e6ef9079 	uxtb	r9, r9
   12238:	e2677000 	rsb	r7, r7, #0
   1223c:	e1a03005 	mov	r3, r5
   12240:	e1a0c00e 	mov	ip, lr
   12244:	e1a041a4 	lsr	r4, r4, #3
   12248:	e080000e 	add	r0, r0, lr
   1224c:	e58d9004 	str	r9, [sp, #4]
   12250:	e6ef8078 	uxtb	r8, r8
   12254:	e6ef7077 	uxtb	r7, r7
   12258:	e261b008 	rsb	fp, r1, #8
   1225c:	ea00000e 	b	1229c <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xb4>
   12260:	e15e000c 	cmp	lr, ip
   12264:	0a000018 	beq	122cc <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xe4>
   12268:	e15c0004 	cmp	ip, r4
   1226c:	05d09000 	ldrbeq	r9, [r0]
   12270:	059da004 	ldreq	sl, [sp, #4]
   12274:	12855008 	addne	r5, r5, #8
   12278:	15d0a000 	ldrbne	sl, [r0]
   1227c:	0009900a 	andeq	r9, r9, sl
   12280:	10429005 	subne	r9, r2, r5
   12284:	01833009 	orreq	r3, r3, r9
   12288:	1183391a 	orrne	r3, r3, sl, lsl r9
   1228c:	e28cc001 	add	ip, ip, #1
   12290:	e15c0006 	cmp	ip, r6
   12294:	e2800001 	add	r0, r0, #1
   12298:	0a000008 	beq	122c0 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xd8>
   1229c:	e15e0004 	cmp	lr, r4
   122a0:	1affffee 	bne	12260 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0x78>
   122a4:	e5d03000 	ldrb	r3, [r0]
   122a8:	e28cc001 	add	ip, ip, #1
   122ac:	e0033008 	and	r3, r3, r8
   122b0:	e15c0006 	cmp	ip, r6
   122b4:	e1a03153 	asr	r3, r3, r1
   122b8:	e2800001 	add	r0, r0, #1
   122bc:	1afffff6 	bne	1229c <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xb4>
   122c0:	e1a00003 	mov	r0, r3
   122c4:	e28dd00c 	add	sp, sp, #12
   122c8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   122cc:	e5d03000 	ldrb	r3, [r0]
   122d0:	e085500b 	add	r5, r5, fp
   122d4:	e0033007 	and	r3, r3, r7
   122d8:	e1a03153 	asr	r3, r3, r1
   122dc:	e0429005 	sub	r9, r2, r5
   122e0:	e1a03913 	lsl	r3, r3, r9
   122e4:	eaffffe8 	b	1228c <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xa4>
   122e8:	e3a03000 	mov	r3, #0
   122ec:	eafffff3 	b	122c0 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xd8>

000122f0 <CUSBGamePadStandardDevice::BitGetSigned(void const*, unsigned int, unsigned int)>:
   122f0:	e92d4010 	push	{r4, lr}
   122f4:	e1a04002 	mov	r4, r2
   122f8:	ebffffba 	bl	121e8 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   122fc:	e3a02001 	mov	r2, #1
   12300:	e2443001 	sub	r3, r4, #1
   12304:	e0103312 	ands	r3, r0, r2, lsl r3
   12308:	11a02412 	lslne	r2, r2, r4
   1230c:	12622000 	rsbne	r2, r2, #0
   12310:	11800002 	orrne	r0, r0, r2
   12314:	e8bd8010 	pop	{r4, pc}

00012318 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)>:
   12318:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1231c:	e5905134 	ldr	r5, [r0, #308]	; 0x134
   12320:	e24dd034 	sub	sp, sp, #52	; 0x34
   12324:	e3550000 	cmp	r5, #0
   12328:	e58d0014 	str	r0, [sp, #20]
   1232c:	e58d1000 	str	r1, [sp]
   12330:	0a000109 	beq	1275c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x444>
   12334:	e3a09000 	mov	r9, #0
   12338:	e59f3450 	ldr	r3, [pc, #1104]	; 12790 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x478>
   1233c:	e1a07009 	mov	r7, r9
   12340:	e1a02003 	mov	r2, r3
   12344:	e1a0a009 	mov	sl, r9
   12348:	e1a0b009 	mov	fp, r9
   1234c:	e1a08009 	mov	r8, r9
   12350:	e58d300c 	str	r3, [sp, #12]
   12354:	e59d3014 	ldr	r3, [sp, #20]
   12358:	e58d9020 	str	r9, [sp, #32]
   1235c:	e2833f4e 	add	r3, r3, #312	; 0x138
   12360:	e1d340b0 	ldrh	r4, [r3]
   12364:	e58d901c 	str	r9, [sp, #28]
   12368:	e58d9004 	str	r9, [sp, #4]
   1236c:	e58d2010 	str	r2, [sp, #16]
   12370:	e58d2018 	str	r2, [sp, #24]
   12374:	e58d2008 	str	r2, [sp, #8]
   12378:	e3540000 	cmp	r4, #0
   1237c:	0a000024 	beq	12414 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xfc>
   12380:	e1d530d0 	ldrsb	r3, [r5]
   12384:	e2032003 	and	r2, r3, #3
   12388:	e3520001 	cmp	r2, #1
   1238c:	0a00004e 	beq	124cc <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1b4>
   12390:	e3520002 	cmp	r2, #2
   12394:	0a000045 	beq	124b0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x198>
   12398:	e3520000 	cmp	r2, #0
   1239c:	0a00003e 	beq	1249c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x184>
   123a0:	e1d560d3 	ldrsb	r6, [r5, #3]
   123a4:	e1d520d2 	ldrsb	r2, [r5, #2]
   123a8:	e1d510d1 	ldrsb	r1, [r5, #1]
   123ac:	e1a06806 	lsl	r6, r6, #16
   123b0:	e1866402 	orr	r6, r6, r2, lsl #8
   123b4:	e1d520d4 	ldrsb	r2, [r5, #4]
   123b8:	e2444005 	sub	r4, r4, #5
   123bc:	e1866001 	orr	r6, r6, r1
   123c0:	e6ff4074 	uxth	r4, r4
   123c4:	e1866c02 	orr	r6, r6, r2, lsl #24
   123c8:	e2855005 	add	r5, r5, #5
   123cc:	e20330fc 	and	r3, r3, #252	; 0xfc
   123d0:	e3530084 	cmp	r3, #132	; 0x84
   123d4:	0a000024 	beq	1246c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x154>
   123d8:	e3530034 	cmp	r3, #52	; 0x34
   123dc:	0a00003f 	beq	124e0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1c8>
   123e0:	ca000016 	bgt	12440 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x128>
   123e4:	e3530008 	cmp	r3, #8
   123e8:	0a00003e 	beq	124e8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1d0>
   123ec:	da00004c 	ble	12524 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x20c>
   123f0:	e3530014 	cmp	r3, #20
   123f4:	058d6018 	streq	r6, [sp, #24]
   123f8:	0affffde 	beq	12378 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   123fc:	e3530024 	cmp	r3, #36	; 0x24
   12400:	e59d2008 	ldr	r2, [sp, #8]
   12404:	01a02006 	moveq	r2, r6
   12408:	e3540000 	cmp	r4, #0
   1240c:	e58d2008 	str	r2, [sp, #8]
   12410:	1affffda 	bne	12380 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x68>
   12414:	e59d1014 	ldr	r1, [sp, #20]
   12418:	e59d001c 	ldr	r0, [sp, #28]
   1241c:	e28b3007 	add	r3, fp, #7
   12420:	e5810024 	str	r0, [r1, #36]	; 0x24
   12424:	e59d0020 	ldr	r0, [sp, #32]
   12428:	e1a031a3 	lsr	r3, r3, #3
   1242c:	e2812f4a 	add	r2, r1, #296	; 0x128
   12430:	e58100e8 	str	r0, [r1, #232]	; 0xe8
   12434:	e1c230b0 	strh	r3, [r2]
   12438:	e28dd034 	add	sp, sp, #52	; 0x34
   1243c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12440:	e3530074 	cmp	r3, #116	; 0x74
   12444:	01a0a006 	moveq	sl, r6
   12448:	0affffca 	beq	12378 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   1244c:	da00003b 	ble	12540 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x228>
   12450:	e3530080 	cmp	r3, #128	; 0x80
   12454:	0a00002b 	beq	12508 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1f0>
   12458:	e3530094 	cmp	r3, #148	; 0x94
   1245c:	e59d2004 	ldr	r2, [sp, #4]
   12460:	01a02006 	moveq	r2, r6
   12464:	e58d2004 	str	r2, [sp, #4]
   12468:	eaffffc2 	b	12378 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   1246c:	e3570000 	cmp	r7, #0
   12470:	1affffe7 	bne	12414 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xfc>
   12474:	e3a02008 	mov	r2, #8
   12478:	e1a01008 	mov	r1, r8
   1247c:	e59d0000 	ldr	r0, [sp]
   12480:	ebffff58 	bl	121e8 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   12484:	e3500000 	cmp	r0, #0
   12488:	11500006 	cmpne	r0, r6
   1248c:	1affffe9 	bne	12438 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x120>
   12490:	e1a07006 	mov	r7, r6
   12494:	e3a0b008 	mov	fp, #8
   12498:	eaffffb6 	b	12378 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   1249c:	e2444001 	sub	r4, r4, #1
   124a0:	e6ff4074 	uxth	r4, r4
   124a4:	e2855001 	add	r5, r5, #1
   124a8:	e1a06008 	mov	r6, r8
   124ac:	eaffffc6 	b	123cc <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xb4>
   124b0:	e5d56001 	ldrb	r6, [r5, #1]
   124b4:	e1d520d2 	ldrsb	r2, [r5, #2]
   124b8:	e2444003 	sub	r4, r4, #3
   124bc:	e6ff4074 	uxth	r4, r4
   124c0:	e1866402 	orr	r6, r6, r2, lsl #8
   124c4:	e2855003 	add	r5, r5, #3
   124c8:	eaffffbf 	b	123cc <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xb4>
   124cc:	e2444002 	sub	r4, r4, #2
   124d0:	e1d560d1 	ldrsb	r6, [r5, #1]
   124d4:	e6ff4074 	uxth	r4, r4
   124d8:	e2855002 	add	r5, r5, #2
   124dc:	eaffffba 	b	123cc <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xb4>
   124e0:	e58d6010 	str	r6, [sp, #16]
   124e4:	eaffffa3 	b	12378 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   124e8:	e3560036 	cmp	r6, #54	; 0x36
   124ec:	ca000018 	bgt	12554 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x23c>
   124f0:	e3560030 	cmp	r6, #48	; 0x30
   124f4:	aa00002d 	bge	125b0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x298>
   124f8:	e2466004 	sub	r6, r6, #4
   124fc:	e3560001 	cmp	r6, #1
   12500:	93a09001 	movls	r9, #1
   12504:	eaffff9b 	b	12378 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   12508:	e2066003 	and	r6, r6, #3
   1250c:	e3560002 	cmp	r6, #2
   12510:	0a000014 	beq	12568 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x250>
   12514:	e59d3004 	ldr	r3, [sp, #4]
   12518:	e0060a93 	mul	r6, r3, sl
   1251c:	e08bb006 	add	fp, fp, r6
   12520:	eaffff94 	b	12378 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   12524:	e3530004 	cmp	r3, #4
   12528:	1affff92 	bne	12378 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   1252c:	e3560009 	cmp	r6, #9
   12530:	1affff90 	bne	12378 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   12534:	e3590001 	cmp	r9, #1
   12538:	03a09002 	moveq	r9, #2
   1253c:	eaffff8d 	b	12378 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   12540:	e3530044 	cmp	r3, #68	; 0x44
   12544:	e59d200c 	ldr	r2, [sp, #12]
   12548:	01a02006 	moveq	r2, r6
   1254c:	e58d200c 	str	r2, [sp, #12]
   12550:	eaffff88 	b	12378 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   12554:	e3560039 	cmp	r6, #57	; 0x39
   12558:	1affff86 	bne	12378 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   1255c:	e3590001 	cmp	r9, #1
   12560:	03a09004 	moveq	r9, #4
   12564:	eaffff83 	b	12378 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   12568:	e3590003 	cmp	r9, #3
   1256c:	0a000012 	beq	125bc <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x2a4>
   12570:	e3590004 	cmp	r9, #4
   12574:	0a00004f 	beq	126b8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x3a0>
   12578:	e59d3004 	ldr	r3, [sp, #4]
   1257c:	e3590002 	cmp	r9, #2
   12580:	e0060a93 	mul	r6, r3, sl
   12584:	1affffe4 	bne	1251c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x204>
   12588:	e59d2014 	ldr	r2, [sp, #20]
   1258c:	e1a0100b 	mov	r1, fp
   12590:	e5823104 	str	r3, [r2, #260]	; 0x104
   12594:	e59d0000 	ldr	r0, [sp]
   12598:	e1a02006 	mov	r2, r6
   1259c:	ebffff11 	bl	121e8 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   125a0:	e59d2014 	ldr	r2, [sp, #20]
   125a4:	e3a09001 	mov	r9, #1
   125a8:	e5820108 	str	r0, [r2, #264]	; 0x108
   125ac:	eaffffda 	b	1251c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x204>
   125b0:	e3590001 	cmp	r9, #1
   125b4:	03a09003 	moveq	r9, #3
   125b8:	eaffff6e 	b	12378 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   125bc:	e59d3004 	ldr	r3, [sp, #4]
   125c0:	e3530000 	cmp	r3, #0
   125c4:	0a00006e 	beq	12784 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x46c>
   125c8:	e59d2018 	ldr	r2, [sp, #24]
   125cc:	e59f01bc 	ldr	r0, [pc, #444]	; 12790 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x478>
   125d0:	e59d1010 	ldr	r1, [sp, #16]
   125d4:	e1520000 	cmp	r2, r0
   125d8:	e1a03002 	mov	r3, r2
   125dc:	01a03001 	moveq	r3, r1
   125e0:	e59fc1a8 	ldr	ip, [pc, #424]	; 12790 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x478>
   125e4:	e59d1008 	ldr	r1, [sp, #8]
   125e8:	e59d000c 	ldr	r0, [sp, #12]
   125ec:	e151000c 	cmp	r1, ip
   125f0:	e1a02003 	mov	r2, r3
   125f4:	e1a03001 	mov	r3, r1
   125f8:	01a03000 	moveq	r3, r0
   125fc:	e1a01003 	mov	r1, r3
   12600:	e1a0300b 	mov	r3, fp
   12604:	e59d001c 	ldr	r0, [sp, #28]
   12608:	e59dc014 	ldr	ip, [sp, #20]
   1260c:	e0806080 	add	r6, r0, r0, lsl #1
   12610:	e58db01c 	str	fp, [sp, #28]
   12614:	e58d7024 	str	r7, [sp, #36]	; 0x24
   12618:	e58d5028 	str	r5, [sp, #40]	; 0x28
   1261c:	e58d402c 	str	r4, [sp, #44]	; 0x2c
   12620:	e3a09000 	mov	r9, #0
   12624:	e08c6106 	add	r6, ip, r6, lsl #2
   12628:	e1a05000 	mov	r5, r0
   1262c:	e1a07002 	mov	r7, r2
   12630:	e1a0b001 	mov	fp, r1
   12634:	e1a04003 	mov	r4, r3
   12638:	ea00000d 	b	12674 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x35c>
   1263c:	ebfffee9 	bl	121e8 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   12640:	e2899001 	add	r9, r9, #1
   12644:	e359000f 	cmp	r9, #15
   12648:	93a02000 	movls	r2, #0
   1264c:	83a02001 	movhi	r2, #1
   12650:	e59d3004 	ldr	r3, [sp, #4]
   12654:	e5860028 	str	r0, [r6, #40]	; 0x28
   12658:	e1530009 	cmp	r3, r9
   1265c:	93822001 	orrls	r2, r2, #1
   12660:	e3520000 	cmp	r2, #0
   12664:	e2855001 	add	r5, r5, #1
   12668:	e286600c 	add	r6, r6, #12
   1266c:	e084400a 	add	r4, r4, sl
   12670:	1a000008 	bne	12698 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x380>
   12674:	e3570000 	cmp	r7, #0
   12678:	e1a0200a 	mov	r2, sl
   1267c:	e1a01004 	mov	r1, r4
   12680:	e586702c 	str	r7, [r6, #44]	; 0x2c
   12684:	e586b030 	str	fp, [r6, #48]	; 0x30
   12688:	e59d0000 	ldr	r0, [sp]
   1268c:	aaffffea 	bge	1263c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x324>
   12690:	ebffff16 	bl	122f0 <CUSBGamePadStandardDevice::BitGetSigned(void const*, unsigned int, unsigned int)>
   12694:	eaffffe9 	b	12640 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x328>
   12698:	e59db01c 	ldr	fp, [sp, #28]
   1269c:	e59d7024 	ldr	r7, [sp, #36]	; 0x24
   126a0:	e58d501c 	str	r5, [sp, #28]
   126a4:	e59d402c 	ldr	r4, [sp, #44]	; 0x2c
   126a8:	e59d5028 	ldr	r5, [sp, #40]	; 0x28
   126ac:	e0060a93 	mul	r6, r3, sl
   126b0:	e3a09001 	mov	r9, #1
   126b4:	eaffff98 	b	1251c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x204>
   126b8:	e59d2004 	ldr	r2, [sp, #4]
   126bc:	e3520000 	cmp	r2, #0
   126c0:	0a00002c 	beq	12778 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x460>
   126c4:	e59d1020 	ldr	r1, [sp, #32]
   126c8:	e59d0014 	ldr	r0, [sp, #20]
   126cc:	e281303b 	add	r3, r1, #59	; 0x3b
   126d0:	e0803103 	add	r3, r0, r3, lsl #2
   126d4:	e58d7024 	str	r7, [sp, #36]	; 0x24
   126d8:	e58d5028 	str	r5, [sp, #40]	; 0x28
   126dc:	e58d402c 	str	r4, [sp, #44]	; 0x2c
   126e0:	e3a06000 	mov	r6, #0
   126e4:	e1a07001 	mov	r7, r1
   126e8:	e1a04002 	mov	r4, r2
   126ec:	e1a05003 	mov	r5, r3
   126f0:	e1a0900b 	mov	r9, fp
   126f4:	e58db020 	str	fp, [sp, #32]
   126f8:	e59db000 	ldr	fp, [sp]
   126fc:	e1a0200a 	mov	r2, sl
   12700:	e2866001 	add	r6, r6, #1
   12704:	e1a01009 	mov	r1, r9
   12708:	e1a0000b 	mov	r0, fp
   1270c:	ebfffeb5 	bl	121e8 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   12710:	e3560005 	cmp	r6, #5
   12714:	93a02000 	movls	r2, #0
   12718:	83a02001 	movhi	r2, #1
   1271c:	e1540006 	cmp	r4, r6
   12720:	93822001 	orrls	r2, r2, #1
   12724:	e3520000 	cmp	r2, #0
   12728:	e2877001 	add	r7, r7, #1
   1272c:	e089900a 	add	r9, r9, sl
   12730:	e4850004 	str	r0, [r5], #4
   12734:	0afffff0 	beq	126fc <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x3e4>
   12738:	e59d3004 	ldr	r3, [sp, #4]
   1273c:	e59db020 	ldr	fp, [sp, #32]
   12740:	e59d5028 	ldr	r5, [sp, #40]	; 0x28
   12744:	e58d7020 	str	r7, [sp, #32]
   12748:	e59d402c 	ldr	r4, [sp, #44]	; 0x2c
   1274c:	e59d7024 	ldr	r7, [sp, #36]	; 0x24
   12750:	e0060a93 	mul	r6, r3, sl
   12754:	e3a09001 	mov	r9, #1
   12758:	eaffff6f 	b	1251c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x204>
   1275c:	e3a020a2 	mov	r2, #162	; 0xa2
   12760:	e59f102c 	ldr	r1, [pc, #44]	; 12794 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x47c>
   12764:	e59f002c 	ldr	r0, [pc, #44]	; 12798 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x480>
   12768:	eb001f8a 	bl	1a598 <assertion_failed>
   1276c:	e59d3014 	ldr	r3, [sp, #20]
   12770:	e5935134 	ldr	r5, [r3, #308]	; 0x134
   12774:	eafffeee 	b	12334 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1c>
   12778:	e59d6004 	ldr	r6, [sp, #4]
   1277c:	e3a09001 	mov	r9, #1
   12780:	eaffff65 	b	1251c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x204>
   12784:	e1a06008 	mov	r6, r8
   12788:	e3a09001 	mov	r9, #1
   1278c:	eaffff62 	b	1251c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x204>
   12790:	f8a432eb 	.word	0xf8a432eb
   12794:	000258dc 	.word	0x000258dc
   12798:	000258f4 	.word	0x000258f4

0001279c <CUSBGamePadStandardDevice::Configure()>:
   1279c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   127a0:	e3a01021 	mov	r1, #33	; 0x21
   127a4:	e24dd078 	sub	sp, sp, #120	; 0x78
   127a8:	e1a04000 	mov	r4, r0
   127ac:	eb0008c9 	bl	14ad8 <CUSBFunction::GetDescriptor(unsigned char)>
   127b0:	e2505000 	subs	r5, r0, #0
   127b4:	0a000003 	beq	127c8 <CUSBGamePadStandardDevice::Configure()+0x2c>
   127b8:	e5d50007 	ldrb	r0, [r5, #7]
   127bc:	e5d53008 	ldrb	r3, [r5, #8]
   127c0:	e1900403 	orrs	r0, r0, r3, lsl #8
   127c4:	1a000006 	bne	127e4 <CUSBGamePadStandardDevice::Configure()+0x48>
   127c8:	e1a00004 	mov	r0, r4
   127cc:	e59f115c 	ldr	r1, [pc, #348]	; 12930 <CUSBGamePadStandardDevice::Configure()+0x194>
   127d0:	eb0008d3 	bl	14b24 <CUSBFunction::ConfigurationError(char const*) const>
   127d4:	e3a05000 	mov	r5, #0
   127d8:	e1a00005 	mov	r0, r5
   127dc:	e28dd078 	add	sp, sp, #120	; 0x78
   127e0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   127e4:	e2846f4e 	add	r6, r4, #312	; 0x138
   127e8:	e1c600b0 	strh	r0, [r6]
   127ec:	eb00403b 	bl	228e0 <operator new[](unsigned int)>
   127f0:	e5840134 	str	r0, [r4, #308]	; 0x134
   127f4:	e1a00004 	mov	r0, r4
   127f8:	eb000874 	bl	149d0 <CUSBFunction::GetHost() const>
   127fc:	e1a07000 	mov	r7, r0
   12800:	e1a00004 	mov	r0, r4
   12804:	eb000860 	bl	1498c <CUSBFunction::GetEndpoint0() const>
   12808:	e1a08000 	mov	r8, r0
   1280c:	e1a00004 	mov	r0, r4
   12810:	e5d55006 	ldrb	r5, [r5, #6]
   12814:	e1d6a0b0 	ldrh	sl, [r6]
   12818:	e5949134 	ldr	r9, [r4, #308]	; 0x134
   1281c:	eb000915 	bl	14c78 <CUSBFunction::GetInterfaceNumber() const>
   12820:	e3a03081 	mov	r3, #129	; 0x81
   12824:	e6ff0070 	uxth	r0, r0
   12828:	e58d000c 	str	r0, [sp, #12]
   1282c:	e58d3008 	str	r3, [sp, #8]
   12830:	e58da004 	str	sl, [sp, #4]
   12834:	e3a03000 	mov	r3, #0
   12838:	e58d9000 	str	r9, [sp]
   1283c:	e1a02005 	mov	r2, r5
   12840:	e1a01008 	mov	r1, r8
   12844:	e1a00007 	mov	r0, r7
   12848:	ebffefa1 	bl	e6d4 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   1284c:	e1d630b0 	ldrh	r3, [r6]
   12850:	e1500003 	cmp	r0, r3
   12854:	0a000008 	beq	1287c <CUSBGamePadStandardDevice::Configure()+0xe0>
   12858:	e3a05000 	mov	r5, #0
   1285c:	eb002940 	bl	1cd64 <CLogger::Get()>
   12860:	e59f30cc 	ldr	r3, [pc, #204]	; 12934 <CUSBGamePadStandardDevice::Configure()+0x198>
   12864:	e3a02001 	mov	r2, #1
   12868:	e59f10c0 	ldr	r1, [pc, #192]	; 12930 <CUSBGamePadStandardDevice::Configure()+0x194>
   1286c:	eb002ae5 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12870:	e1a00005 	mov	r0, r5
   12874:	e28dd078 	add	sp, sp, #120	; 0x78
   12878:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1287c:	e3a02064 	mov	r2, #100	; 0x64
   12880:	e3a01000 	mov	r1, #0
   12884:	e28d0014 	add	r0, sp, #20
   12888:	eb003ba5 	bl	21724 <memset>
   1288c:	e5943000 	ldr	r3, [r4]
   12890:	e28d1014 	add	r1, sp, #20
   12894:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   12898:	e1a00004 	mov	r0, r4
   1289c:	e12fff33 	blx	r3
   128a0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   128a4:	e3530000 	cmp	r3, #0
   128a8:	1a000002 	bne	128b8 <CUSBGamePadStandardDevice::Configure()+0x11c>
   128ac:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
   128b0:	e3530000 	cmp	r3, #0
   128b4:	0a00000e 	beq	128f4 <CUSBGamePadStandardDevice::Configure()+0x158>
   128b8:	e2843f4a 	add	r3, r4, #296	; 0x128
   128bc:	e1d330b0 	ldrh	r3, [r3]
   128c0:	e3530000 	cmp	r3, #0
   128c4:	0a00000e 	beq	12904 <CUSBGamePadStandardDevice::Configure()+0x168>
   128c8:	e1a00004 	mov	r0, r4
   128cc:	eb00195e 	bl	18e4c <CUSBGamePadDevice::Configure()>
   128d0:	e2505000 	subs	r5, r0, #0
   128d4:	0a00000f 	beq	12918 <CUSBGamePadStandardDevice::Configure()+0x17c>
   128d8:	e5d43130 	ldrb	r3, [r4, #304]	; 0x130
   128dc:	e3530000 	cmp	r3, #0
   128e0:	0affffbc 	beq	127d8 <CUSBGamePadStandardDevice::Configure()+0x3c>
   128e4:	e1a00004 	mov	r0, r4
   128e8:	ebfffcf7 	bl	11ccc <CUSBHIDDevice::StartRequest()>
   128ec:	e1a05000 	mov	r5, r0
   128f0:	eaffffb8 	b	127d8 <CUSBGamePadStandardDevice::Configure()+0x3c>
   128f4:	e5945104 	ldr	r5, [r4, #260]	; 0x104
   128f8:	e3550000 	cmp	r5, #0
   128fc:	1affffed 	bne	128b8 <CUSBGamePadStandardDevice::Configure()+0x11c>
   12900:	eaffffb4 	b	127d8 <CUSBGamePadStandardDevice::Configure()+0x3c>
   12904:	e3a02085 	mov	r2, #133	; 0x85
   12908:	e59f1028 	ldr	r1, [pc, #40]	; 12938 <CUSBGamePadStandardDevice::Configure()+0x19c>
   1290c:	e59f0028 	ldr	r0, [pc, #40]	; 1293c <CUSBGamePadStandardDevice::Configure()+0x1a0>
   12910:	eb001f20 	bl	1a598 <assertion_failed>
   12914:	eaffffeb 	b	128c8 <CUSBGamePadStandardDevice::Configure()+0x12c>
   12918:	eb002911 	bl	1cd64 <CLogger::Get()>
   1291c:	e59f301c 	ldr	r3, [pc, #28]	; 12940 <CUSBGamePadStandardDevice::Configure()+0x1a4>
   12920:	e3a02001 	mov	r2, #1
   12924:	e59f1004 	ldr	r1, [pc, #4]	; 12930 <CUSBGamePadStandardDevice::Configure()+0x194>
   12928:	eb002ab6 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1292c:	eaffffa9 	b	127d8 <CUSBGamePadStandardDevice::Configure()+0x3c>
   12930:	000258d0 	.word	0x000258d0
   12934:	00025868 	.word	0x00025868
   12938:	000258dc 	.word	0x000258dc
   1293c:	00025910 	.word	0x00025910
   12940:	00025924 	.word	0x00025924

00012944 <CUSBGamePadDevice::GetProperties()>:
   12944:	e3a00000 	mov	r0, #0
   12948:	e12fff1e 	bx	lr

0001294c <CUSBGamePadDevice::SetLEDMode(TGamePadLEDMode)>:
   1294c:	e3a00000 	mov	r0, #0
   12950:	e12fff1e 	bx	lr

00012954 <CUSBGamePadDevice::SetLEDMode(unsigned int, unsigned char, unsigned char)>:
   12954:	e3a00000 	mov	r0, #0
   12958:	e12fff1e 	bx	lr

0001295c <CUSBGamePadDevice::SetRumbleMode(TGamePadRumbleMode)>:
   1295c:	e3a00000 	mov	r0, #0
   12960:	e12fff1e 	bx	lr

00012964 <CUSBGamePadPS3Device::~CUSBGamePadPS3Device()>:
   12964:	e92d4010 	push	{r4, lr}
   12968:	e1a04000 	mov	r4, r0
   1296c:	e59f300c 	ldr	r3, [pc, #12]	; 12980 <CUSBGamePadPS3Device::~CUSBGamePadPS3Device()+0x1c>
   12970:	e5803000 	str	r3, [r0]
   12974:	ebfffdf6 	bl	12154 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>
   12978:	e1a00004 	mov	r0, r4
   1297c:	e8bd8010 	pop	{r4, pc}
   12980:	0002594c 	.word	0x0002594c

00012984 <CUSBGamePadPS3Device::~CUSBGamePadPS3Device()>:
   12984:	e92d4010 	push	{r4, lr}
   12988:	e1a04000 	mov	r4, r0
   1298c:	e59f3018 	ldr	r3, [pc, #24]	; 129ac <CUSBGamePadPS3Device::~CUSBGamePadPS3Device()+0x28>
   12990:	e5803000 	str	r3, [r0]
   12994:	ebfffdee 	bl	12154 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>
   12998:	e1a00004 	mov	r0, r4
   1299c:	e3a01f5b 	mov	r1, #364	; 0x16c
   129a0:	eb003fd1 	bl	228ec <operator delete(void*, unsigned int)>
   129a4:	e1a00004 	mov	r0, r4
   129a8:	e8bd8010 	pop	{r4, pc}
   129ac:	0002594c 	.word	0x0002594c

000129b0 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)>:
   129b0:	e92d4070 	push	{r4, r5, r6, lr}
   129b4:	e1a05001 	mov	r5, r1
   129b8:	e24dd040 	sub	sp, sp, #64	; 0x40
   129bc:	e2801f4f 	add	r1, r0, #316	; 0x13c
   129c0:	e1a04000 	mov	r4, r0
   129c4:	e3a02030 	mov	r2, #48	; 0x30
   129c8:	e28d0010 	add	r0, sp, #16
   129cc:	eb003cc6 	bl	21cec <memcpy>
   129d0:	e3550001 	cmp	r5, #1
   129d4:	0a00002f 	beq	12a98 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0xe8>
   129d8:	3a000028 	bcc	12a80 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0xd0>
   129dc:	e3550002 	cmp	r5, #2
   129e0:	1a00001f 	bne	12a64 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0xb4>
   129e4:	e3e03001 	mvn	r3, #1
   129e8:	e3a01000 	mov	r1, #0
   129ec:	e3e02000 	mvn	r2, #0
   129f0:	e5cd3011 	strb	r3, [sp, #17]
   129f4:	e5cd3013 	strb	r3, [sp, #19]
   129f8:	e5cd1012 	strb	r1, [sp, #18]
   129fc:	e5cd2014 	strb	r2, [sp, #20]
   12a00:	e1a00004 	mov	r0, r4
   12a04:	eb0007f1 	bl	149d0 <CUSBFunction::GetHost() const>
   12a08:	e1a05000 	mov	r5, r0
   12a0c:	e1a00004 	mov	r0, r4
   12a10:	eb0007dd 	bl	1498c <CUSBFunction::GetEndpoint0() const>
   12a14:	e1a06000 	mov	r6, r0
   12a18:	e1a00004 	mov	r0, r4
   12a1c:	eb000895 	bl	14c78 <CUSBFunction::GetInterfaceNumber() const>
   12a20:	e3a02030 	mov	r2, #48	; 0x30
   12a24:	e59f308c 	ldr	r3, [pc, #140]	; 12ab8 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x108>
   12a28:	e28dc010 	add	ip, sp, #16
   12a2c:	e6ff0070 	uxth	r0, r0
   12a30:	e58d0004 	str	r0, [sp, #4]
   12a34:	e58d200c 	str	r2, [sp, #12]
   12a38:	e58d3000 	str	r3, [sp]
   12a3c:	e1a01006 	mov	r1, r6
   12a40:	e1a00005 	mov	r0, r5
   12a44:	e58dc008 	str	ip, [sp, #8]
   12a48:	e3a03009 	mov	r3, #9
   12a4c:	e3a02021 	mov	r2, #33	; 0x21
   12a50:	ebffeeed 	bl	e60c <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   12a54:	e1e00000 	mvn	r0, r0
   12a58:	e1a00fa0 	lsr	r0, r0, #31
   12a5c:	e28dd040 	add	sp, sp, #64	; 0x40
   12a60:	e8bd8070 	pop	{r4, r5, r6, pc}
   12a64:	e59f2050 	ldr	r2, [pc, #80]	; 12abc <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x10c>
   12a68:	e59f1050 	ldr	r1, [pc, #80]	; 12ac0 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x110>
   12a6c:	e59f0050 	ldr	r0, [pc, #80]	; 12ac4 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x114>
   12a70:	eb001ec8 	bl	1a598 <assertion_failed>
   12a74:	e3a00000 	mov	r0, #0
   12a78:	e28dd040 	add	sp, sp, #64	; 0x40
   12a7c:	e8bd8070 	pop	{r4, r5, r6, pc}
   12a80:	e3a03000 	mov	r3, #0
   12a84:	e5cd3011 	strb	r3, [sp, #17]
   12a88:	e5cd3012 	strb	r3, [sp, #18]
   12a8c:	e5cd3013 	strb	r3, [sp, #19]
   12a90:	e5cd3014 	strb	r3, [sp, #20]
   12a94:	eaffffd9 	b	12a00 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x50>
   12a98:	e3e03001 	mvn	r3, #1
   12a9c:	e3e01000 	mvn	r1, #0
   12aa0:	e3a02000 	mov	r2, #0
   12aa4:	e5cd3011 	strb	r3, [sp, #17]
   12aa8:	e5cd3013 	strb	r3, [sp, #19]
   12aac:	e5cd1012 	strb	r1, [sp, #18]
   12ab0:	e5cd2014 	strb	r2, [sp, #20]
   12ab4:	eaffffd1 	b	12a00 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x50>
   12ab8:	00000201 	.word	0x00000201
   12abc:	0000010d 	.word	0x0000010d
   12ac0:	00025a00 	.word	0x00025a00
   12ac4:	00024970 	.word	0x00024970

00012ac8 <CUSBGamePadPS3Device::SetLEDMode(TGamePadLEDMode)>:
   12ac8:	e351000a 	cmp	r1, #10
   12acc:	9a000001 	bls	12ad8 <CUSBGamePadPS3Device::SetLEDMode(TGamePadLEDMode)+0x10>
   12ad0:	e3a00000 	mov	r0, #0
   12ad4:	e12fff1e 	bx	lr
   12ad8:	e59f3078 	ldr	r3, [pc, #120]	; 12b58 <CUSBGamePadPS3Device::SetLEDMode(TGamePadLEDMode)+0x90>
   12adc:	e92d4070 	push	{r4, r5, r6, lr}
   12ae0:	e0831001 	add	r1, r3, r1
   12ae4:	e5d13044 	ldrb	r3, [r1, #68]	; 0x44
   12ae8:	e24dd010 	sub	sp, sp, #16
   12aec:	e1a03083 	lsl	r3, r3, #1
   12af0:	e5c03145 	strb	r3, [r0, #325]	; 0x145
   12af4:	e1a04000 	mov	r4, r0
   12af8:	eb0007b4 	bl	149d0 <CUSBFunction::GetHost() const>
   12afc:	e1a05000 	mov	r5, r0
   12b00:	e1a00004 	mov	r0, r4
   12b04:	eb0007a0 	bl	1498c <CUSBFunction::GetEndpoint0() const>
   12b08:	e1a06000 	mov	r6, r0
   12b0c:	e1a00004 	mov	r0, r4
   12b10:	eb000858 	bl	14c78 <CUSBFunction::GetInterfaceNumber() const>
   12b14:	e3a02030 	mov	r2, #48	; 0x30
   12b18:	e59f303c 	ldr	r3, [pc, #60]	; 12b5c <CUSBGamePadPS3Device::SetLEDMode(TGamePadLEDMode)+0x94>
   12b1c:	e6ff0070 	uxth	r0, r0
   12b20:	e2844f4f 	add	r4, r4, #316	; 0x13c
   12b24:	e58d0004 	str	r0, [sp, #4]
   12b28:	e58d200c 	str	r2, [sp, #12]
   12b2c:	e58d3000 	str	r3, [sp]
   12b30:	e1a01006 	mov	r1, r6
   12b34:	e1a00005 	mov	r0, r5
   12b38:	e58d4008 	str	r4, [sp, #8]
   12b3c:	e3a03009 	mov	r3, #9
   12b40:	e3a02021 	mov	r2, #33	; 0x21
   12b44:	ebffeeb0 	bl	e60c <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   12b48:	e1e00000 	mvn	r0, r0
   12b4c:	e1a00fa0 	lsr	r0, r0, #31
   12b50:	e28dd010 	add	sp, sp, #16
   12b54:	e8bd8070 	pop	{r4, r5, r6, pc}
   12b58:	00025944 	.word	0x00025944
   12b5c:	00000201 	.word	0x00000201

00012b60 <CUSBGamePadPS3Device::CUSBGamePadPS3Device(CUSBFunction*)>:
   12b60:	e92d4070 	push	{r4, r5, r6, lr}
   12b64:	e3a02000 	mov	r2, #0
   12b68:	e1a04000 	mov	r4, r0
   12b6c:	ebfffd8f 	bl	121b0 <CUSBGamePadStandardDevice::CUSBGamePadStandardDevice(CUSBFunction*, bool)>
   12b70:	e3a03000 	mov	r3, #0
   12b74:	e59f5030 	ldr	r5, [pc, #48]	; 12bac <CUSBGamePadPS3Device::CUSBGamePadPS3Device(CUSBFunction*)+0x4c>
   12b78:	e1a00004 	mov	r0, r4
   12b7c:	e2852008 	add	r2, r5, #8
   12b80:	e5842000 	str	r2, [r4]
   12b84:	e3a01003 	mov	r1, #3
   12b88:	e1a02003 	mov	r2, r3
   12b8c:	eb000800 	bl	14b94 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)>
   12b90:	e2851050 	add	r1, r5, #80	; 0x50
   12b94:	e5c4013a 	strb	r0, [r4, #314]	; 0x13a
   12b98:	e3a02030 	mov	r2, #48	; 0x30
   12b9c:	e2840f4f 	add	r0, r4, #316	; 0x13c
   12ba0:	eb003c51 	bl	21cec <memcpy>
   12ba4:	e1a00004 	mov	r0, r4
   12ba8:	e8bd8070 	pop	{r4, r5, r6, pc}
   12bac:	00025944 	.word	0x00025944

00012bb0 <CUSBGamePadPS3Device::PS3Enable()>:
   12bb0:	e92d4070 	push	{r4, r5, r6, lr}
   12bb4:	e24dd010 	sub	sp, sp, #16
   12bb8:	e1a04000 	mov	r4, r0
   12bbc:	eb000783 	bl	149d0 <CUSBFunction::GetHost() const>
   12bc0:	e1a05000 	mov	r5, r0
   12bc4:	e1a00004 	mov	r0, r4
   12bc8:	eb00076f 	bl	1498c <CUSBFunction::GetEndpoint0() const>
   12bcc:	e1a06000 	mov	r6, r0
   12bd0:	e1a00004 	mov	r0, r4
   12bd4:	eb000827 	bl	14c78 <CUSBFunction::GetInterfaceNumber() const>
   12bd8:	e3a0c004 	mov	ip, #4
   12bdc:	e3a02ffd 	mov	r2, #1012	; 0x3f4
   12be0:	e59f3054 	ldr	r3, [pc, #84]	; 12c3c <CUSBGamePadPS3Device::PS3Enable()+0x8c>
   12be4:	e6ff0070 	uxth	r0, r0
   12be8:	e58d0004 	str	r0, [sp, #4]
   12bec:	e58d2000 	str	r2, [sp]
   12bf0:	e58d3008 	str	r3, [sp, #8]
   12bf4:	e1a01006 	mov	r1, r6
   12bf8:	e1a00005 	mov	r0, r5
   12bfc:	e58dc00c 	str	ip, [sp, #12]
   12c00:	e3a03009 	mov	r3, #9
   12c04:	e3a02021 	mov	r2, #33	; 0x21
   12c08:	ebffee7f 	bl	e60c <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   12c0c:	e3500000 	cmp	r0, #0
   12c10:	ba000006 	blt	12c30 <CUSBGamePadPS3Device::PS3Enable()+0x80>
   12c14:	e1a00004 	mov	r0, r4
   12c18:	e5943000 	ldr	r3, [r4]
   12c1c:	e5d4112c 	ldrb	r1, [r4, #300]	; 0x12c
   12c20:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   12c24:	e28dd010 	add	sp, sp, #16
   12c28:	e8bd4070 	pop	{r4, r5, r6, lr}
   12c2c:	e12fff13 	bx	r3
   12c30:	e3a00000 	mov	r0, #0
   12c34:	e28dd010 	add	sp, sp, #16
   12c38:	e8bd8070 	pop	{r4, r5, r6, pc}
   12c3c:	0002b008 	.word	0x0002b008

00012c40 <CUSBGamePadPS3Device::Configure()>:
   12c40:	e92d4030 	push	{r4, r5, lr}
   12c44:	e5d0513a 	ldrb	r5, [r0, #314]	; 0x13a
   12c48:	e24dd00c 	sub	sp, sp, #12
   12c4c:	e3550000 	cmp	r5, #0
   12c50:	0a00001e 	beq	12cd0 <CUSBGamePadPS3Device::Configure()+0x90>
   12c54:	e1a04000 	mov	r4, r0
   12c58:	ebfffecf 	bl	1279c <CUSBGamePadStandardDevice::Configure()>
   12c5c:	e2505000 	subs	r5, r0, #0
   12c60:	0a00002a 	beq	12d10 <CUSBGamePadPS3Device::Configure()+0xd0>
   12c64:	e2845f4a 	add	r5, r4, #296	; 0x128
   12c68:	e1d530b0 	ldrh	r3, [r5]
   12c6c:	e2433031 	sub	r3, r3, #49	; 0x31
   12c70:	e3530001 	cmp	r3, #1
   12c74:	8a00001a 	bhi	12ce4 <CUSBGamePadPS3Device::Configure()+0xa4>
   12c78:	e3a01010 	mov	r1, #16
   12c7c:	e3a0c013 	mov	ip, #19
   12c80:	e1a03004 	mov	r3, r4
   12c84:	e3a02000 	mov	r2, #0
   12c88:	e3a000ff 	mov	r0, #255	; 0xff
   12c8c:	e5841024 	str	r1, [r4, #36]	; 0x24
   12c90:	e584c104 	str	ip, [r4, #260]	; 0x104
   12c94:	e28410c0 	add	r1, r4, #192	; 0xc0
   12c98:	e583202c 	str	r2, [r3, #44]	; 0x2c
   12c9c:	e5830030 	str	r0, [r3, #48]	; 0x30
   12ca0:	e283300c 	add	r3, r3, #12
   12ca4:	e1530001 	cmp	r3, r1
   12ca8:	1afffffa 	bne	12c98 <CUSBGamePadPS3Device::Configure()+0x58>
   12cac:	e58420e8 	str	r2, [r4, #232]	; 0xe8
   12cb0:	e1a00004 	mov	r0, r4
   12cb4:	ebffffbd 	bl	12bb0 <CUSBGamePadPS3Device::PS3Enable()>
   12cb8:	e2505000 	subs	r5, r0, #0
   12cbc:	0a00001b 	beq	12d30 <CUSBGamePadPS3Device::Configure()+0xf0>
   12cc0:	e1a00004 	mov	r0, r4
   12cc4:	e28dd00c 	add	sp, sp, #12
   12cc8:	e8bd4030 	pop	{r4, r5, lr}
   12ccc:	eafffbfe 	b	11ccc <CUSBHIDDevice::StartRequest()>
   12cd0:	e59f1078 	ldr	r1, [pc, #120]	; 12d50 <CUSBGamePadPS3Device::Configure()+0x110>
   12cd4:	eb000792 	bl	14b24 <CUSBFunction::ConfigurationError(char const*) const>
   12cd8:	e1a00005 	mov	r0, r5
   12cdc:	e28dd00c 	add	sp, sp, #12
   12ce0:	e8bd8030 	pop	{r4, r5, pc}
   12ce4:	eb00281e 	bl	1cd64 <CLogger::Get()>
   12ce8:	e1d520b0 	ldrh	r2, [r5]
   12cec:	e3a05000 	mov	r5, #0
   12cf0:	e58d2000 	str	r2, [sp]
   12cf4:	e59f3058 	ldr	r3, [pc, #88]	; 12d54 <CUSBGamePadPS3Device::Configure()+0x114>
   12cf8:	e3a02001 	mov	r2, #1
   12cfc:	e59f104c 	ldr	r1, [pc, #76]	; 12d50 <CUSBGamePadPS3Device::Configure()+0x110>
   12d00:	eb0029c0 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12d04:	e1a00005 	mov	r0, r5
   12d08:	e28dd00c 	add	sp, sp, #12
   12d0c:	e8bd8030 	pop	{r4, r5, pc}
   12d10:	eb002813 	bl	1cd64 <CLogger::Get()>
   12d14:	e59f303c 	ldr	r3, [pc, #60]	; 12d58 <CUSBGamePadPS3Device::Configure()+0x118>
   12d18:	e3a02001 	mov	r2, #1
   12d1c:	e59f102c 	ldr	r1, [pc, #44]	; 12d50 <CUSBGamePadPS3Device::Configure()+0x110>
   12d20:	eb0029b8 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12d24:	e1a00005 	mov	r0, r5
   12d28:	e28dd00c 	add	sp, sp, #12
   12d2c:	e8bd8030 	pop	{r4, r5, pc}
   12d30:	eb00280b 	bl	1cd64 <CLogger::Get()>
   12d34:	e59f3020 	ldr	r3, [pc, #32]	; 12d5c <CUSBGamePadPS3Device::Configure()+0x11c>
   12d38:	e3a02001 	mov	r2, #1
   12d3c:	e59f100c 	ldr	r1, [pc, #12]	; 12d50 <CUSBGamePadPS3Device::Configure()+0x110>
   12d40:	eb0029b0 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12d44:	e1a00005 	mov	r0, r5
   12d48:	e28dd00c 	add	sp, sp, #12
   12d4c:	e8bd8030 	pop	{r4, r5, pc}
   12d50:	000259c4 	.word	0x000259c4
   12d54:	00025a14 	.word	0x00025a14
   12d58:	00025924 	.word	0x00025924
   12d5c:	00025a30 	.word	0x00025a30

00012d60 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)>:
   12d60:	e2803f4a 	add	r3, r0, #296	; 0x128
   12d64:	e1d330b0 	ldrh	r3, [r3]
   12d68:	e92d4070 	push	{r4, r5, r6, lr}
   12d6c:	e3530031 	cmp	r3, #49	; 0x31
   12d70:	e1a04000 	mov	r4, r0
   12d74:	e1a05001 	mov	r5, r1
   12d78:	0a000007 	beq	12d9c <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x3c>
   12d7c:	e3530032 	cmp	r3, #50	; 0x32
   12d80:	0a000043 	beq	12e94 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x134>
   12d84:	e3530000 	cmp	r3, #0
   12d88:	0a00003f 	beq	12e8c <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x12c>
   12d8c:	e3a02091 	mov	r2, #145	; 0x91
   12d90:	e59f1118 	ldr	r1, [pc, #280]	; 12eb0 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x150>
   12d94:	e59f0118 	ldr	r0, [pc, #280]	; 12eb4 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x154>
   12d98:	eb001dfe 	bl	1a598 <assertion_failed>
   12d9c:	e3550000 	cmp	r5, #0
   12da0:	0a00003d 	beq	12e9c <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x13c>
   12da4:	e5d50003 	ldrb	r0, [r5, #3]
   12da8:	e5d52002 	ldrb	r2, [r5, #2]
   12dac:	e5d51004 	ldrb	r1, [r5, #4]
   12db0:	e1822400 	orr	r2, r2, r0, lsl #8
   12db4:	e5d50005 	ldrb	r0, [r5, #5]
   12db8:	e1822801 	orr	r2, r2, r1, lsl #16
   12dbc:	e59f10f4 	ldr	r1, [pc, #244]	; 12eb8 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x158>
   12dc0:	e1822c00 	orr	r2, r2, r0, lsl #24
   12dc4:	e59f00f0 	ldr	r0, [pc, #240]	; 12ebc <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x15c>
   12dc8:	e1a0c682 	lsl	ip, r2, #13
   12dcc:	e00112a2 	and	r1, r1, r2, lsr #5
   12dd0:	e1811eac 	orr	r1, r1, ip, lsr #29
   12dd4:	e0002582 	and	r2, r0, r2, lsl #11
   12dd8:	e1812002 	orr	r2, r1, r2
   12ddc:	e5842108 	str	r2, [r4, #264]	; 0x108
   12de0:	e5d52006 	ldrb	r2, [r5, #6]
   12de4:	e3a03006 	mov	r3, #6
   12de8:	e5842028 	str	r2, [r4, #40]	; 0x28
   12dec:	e5d51007 	ldrb	r1, [r5, #7]
   12df0:	e59f00c8 	ldr	r0, [pc, #200]	; 12ec0 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x160>
   12df4:	e5841034 	str	r1, [r4, #52]	; 0x34
   12df8:	e5d51008 	ldrb	r1, [r5, #8]
   12dfc:	e285200d 	add	r2, r5, #13
   12e00:	e5841040 	str	r1, [r4, #64]	; 0x40
   12e04:	e5d51009 	ldrb	r1, [r5, #9]
   12e08:	e285c019 	add	ip, r5, #25
   12e0c:	e584104c 	str	r1, [r4, #76]	; 0x4c
   12e10:	ea000000 	b	12e18 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0xb8>
   12e14:	e5b03004 	ldr	r3, [r0, #4]!
   12e18:	e5f21001 	ldrb	r1, [r2, #1]!
   12e1c:	e0833083 	add	r3, r3, r3, lsl #1
   12e20:	e0843103 	add	r3, r4, r3, lsl #2
   12e24:	e15c0002 	cmp	ip, r2
   12e28:	e5831028 	str	r1, [r3, #40]	; 0x28
   12e2c:	1afffff8 	bne	12e14 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0xb4>
   12e30:	e3a01000 	mov	r1, #0
   12e34:	e59fc088 	ldr	ip, [pc, #136]	; 12ec4 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x164>
   12e38:	e2840f43 	add	r0, r4, #268	; 0x10c
   12e3c:	e2812014 	add	r2, r1, #20
   12e40:	e0852082 	add	r2, r5, r2, lsl #1
   12e44:	e5d23001 	ldrb	r3, [r2, #1]
   12e48:	e5d22002 	ldrb	r2, [r2, #2]
   12e4c:	e2811001 	add	r1, r1, #1
   12e50:	e1833402 	orr	r3, r3, r2, lsl #8
   12e54:	e6bf3fb3 	rev16	r3, r3
   12e58:	e6ff3073 	uxth	r3, r3
   12e5c:	e04c3003 	sub	r3, ip, r3
   12e60:	e3510003 	cmp	r1, #3
   12e64:	e4803004 	str	r3, [r0], #4
   12e68:	1afffff3 	bne	12e3c <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0xdc>
   12e6c:	e5d5302f 	ldrb	r3, [r5, #47]	; 0x2f
   12e70:	e5d52030 	ldrb	r2, [r5, #48]	; 0x30
   12e74:	e1833402 	orr	r3, r3, r2, lsl #8
   12e78:	e6bf3fb3 	rev16	r3, r3
   12e7c:	e6ff3073 	uxth	r3, r3
   12e80:	e2433006 	sub	r3, r3, #6
   12e84:	e5843120 	str	r3, [r4, #288]	; 0x120
   12e88:	e8bd8070 	pop	{r4, r5, r6, pc}
   12e8c:	e8bd4070 	pop	{r4, r5, r6, lr}
   12e90:	eafffd20 	b	12318 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)>
   12e94:	e2815001 	add	r5, r1, #1
   12e98:	eaffffbf 	b	12d9c <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x3c>
   12e9c:	e3a02096 	mov	r2, #150	; 0x96
   12ea0:	e59f1008 	ldr	r1, [pc, #8]	; 12eb0 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x150>
   12ea4:	e59f001c 	ldr	r0, [pc, #28]	; 12ec8 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x168>
   12ea8:	eb001dba 	bl	1a598 <assertion_failed>
   12eac:	eaffffbc 	b	12da4 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x44>
   12eb0:	00025a00 	.word	0x00025a00
   12eb4:	00024970 	.word	0x00024970
   12eb8:	000007f8 	.word	0x000007f8
   12ebc:	0007f800 	.word	0x0007f800
   12ec0:	000259d0 	.word	0x000259d0
   12ec4:	000001ff 	.word	0x000001ff
   12ec8:	00025a50 	.word	0x00025a50

00012ecc <CUSBGamePadPS3Device::GetProperties()>:
   12ecc:	e3a0001b 	mov	r0, #27
   12ed0:	e12fff1e 	bx	lr

00012ed4 <CUSBGamePadPS4Device::DecodeReport(unsigned char const*)>:
   12ed4:	e5d13001 	ldrb	r3, [r1, #1]
   12ed8:	e5d12005 	ldrb	r2, [r1, #5]
   12edc:	e5803028 	str	r3, [r0, #40]	; 0x28
   12ee0:	e5d13002 	ldrb	r3, [r1, #2]
   12ee4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   12ee8:	e5803034 	str	r3, [r0, #52]	; 0x34
   12eec:	e5d13003 	ldrb	r3, [r1, #3]
   12ef0:	e59fc18c 	ldr	ip, [pc, #396]	; 13084 <CUSBGamePadPS4Device::DecodeReport(unsigned char const*)+0x1b0>
   12ef4:	e5803040 	str	r3, [r0, #64]	; 0x40
   12ef8:	e5d1e004 	ldrb	lr, [r1, #4]
   12efc:	e5d13005 	ldrb	r3, [r1, #5]
   12f00:	e580e04c 	str	lr, [r0, #76]	; 0x4c
   12f04:	e202200f 	and	r2, r2, #15
   12f08:	e5d1e008 	ldrb	lr, [r1, #8]
   12f0c:	e79cc102 	ldr	ip, [ip, r2, lsl #2]
   12f10:	e3130080 	tst	r3, #128	; 0x80
   12f14:	e580e058 	str	lr, [r0, #88]	; 0x58
   12f18:	e5d1e009 	ldrb	lr, [r1, #9]
   12f1c:	e580c108 	str	ip, [r0, #264]	; 0x108
   12f20:	138cc080 	orrne	ip, ip, #128	; 0x80
   12f24:	1580c108 	strne	ip, [r0, #264]	; 0x108
   12f28:	e3130040 	tst	r3, #64	; 0x40
   12f2c:	e58020ec 	str	r2, [r0, #236]	; 0xec
   12f30:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   12f34:	e580e064 	str	lr, [r0, #100]	; 0x64
   12f38:	13822c01 	orrne	r2, r2, #256	; 0x100
   12f3c:	15802108 	strne	r2, [r0, #264]	; 0x108
   12f40:	e3130020 	tst	r3, #32
   12f44:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   12f48:	13822c02 	orrne	r2, r2, #512	; 0x200
   12f4c:	15802108 	strne	r2, [r0, #264]	; 0x108
   12f50:	e3130010 	tst	r3, #16
   12f54:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   12f58:	13833b01 	orrne	r3, r3, #1024	; 0x400
   12f5c:	15803108 	strne	r3, [r0, #264]	; 0x108
   12f60:	e5d13006 	ldrb	r3, [r1, #6]
   12f64:	e3130080 	tst	r3, #128	; 0x80
   12f68:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   12f6c:	13822a02 	orrne	r2, r2, #8192	; 0x2000
   12f70:	15802108 	strne	r2, [r0, #264]	; 0x108
   12f74:	e3130040 	tst	r3, #64	; 0x40
   12f78:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   12f7c:	13822a01 	orrne	r2, r2, #4096	; 0x1000
   12f80:	15802108 	strne	r2, [r0, #264]	; 0x108
   12f84:	e3130020 	tst	r3, #32
   12f88:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   12f8c:	13822901 	orrne	r2, r2, #16384	; 0x4000
   12f90:	15802108 	strne	r2, [r0, #264]	; 0x108
   12f94:	e3130010 	tst	r3, #16
   12f98:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   12f9c:	13822b02 	orrne	r2, r2, #2048	; 0x800
   12fa0:	15802108 	strne	r2, [r0, #264]	; 0x108
   12fa4:	e3130008 	tst	r3, #8
   12fa8:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   12fac:	13822010 	orrne	r2, r2, #16
   12fb0:	15802108 	strne	r2, [r0, #264]	; 0x108
   12fb4:	e3130004 	tst	r3, #4
   12fb8:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   12fbc:	13822008 	orrne	r2, r2, #8
   12fc0:	15802108 	strne	r2, [r0, #264]	; 0x108
   12fc4:	e3130002 	tst	r3, #2
   12fc8:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   12fcc:	13822040 	orrne	r2, r2, #64	; 0x40
   12fd0:	15802108 	strne	r2, [r0, #264]	; 0x108
   12fd4:	e3130001 	tst	r3, #1
   12fd8:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   12fdc:	13833020 	orrne	r3, r3, #32
   12fe0:	15803108 	strne	r3, [r0, #264]	; 0x108
   12fe4:	e5d13007 	ldrb	r3, [r1, #7]
   12fe8:	e3130002 	tst	r3, #2
   12fec:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   12ff0:	13822602 	orrne	r2, r2, #2097152	; 0x200000
   12ff4:	15802108 	strne	r2, [r0, #264]	; 0x108
   12ff8:	e3130001 	tst	r3, #1
   12ffc:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   13000:	13833001 	orrne	r3, r3, #1
   13004:	15803108 	strne	r3, [r0, #264]	; 0x108
   13008:	e5d12014 	ldrb	r2, [r1, #20]
   1300c:	e5d13013 	ldrb	r3, [r1, #19]
   13010:	e1833402 	orr	r3, r3, r2, lsl #8
   13014:	e6bf3073 	sxth	r3, r3
   13018:	e580310c 	str	r3, [r0, #268]	; 0x10c
   1301c:	e5d12018 	ldrb	r2, [r1, #24]
   13020:	e5d13017 	ldrb	r3, [r1, #23]
   13024:	e1833402 	orr	r3, r3, r2, lsl #8
   13028:	e6bf3073 	sxth	r3, r3
   1302c:	e5803110 	str	r3, [r0, #272]	; 0x110
   13030:	e5d12016 	ldrb	r2, [r1, #22]
   13034:	e5d13015 	ldrb	r3, [r1, #21]
   13038:	e1833402 	orr	r3, r3, r2, lsl #8
   1303c:	e6bf3073 	sxth	r3, r3
   13040:	e5803114 	str	r3, [r0, #276]	; 0x114
   13044:	e5d12012 	ldrb	r2, [r1, #18]
   13048:	e5d13011 	ldrb	r3, [r1, #17]
   1304c:	e1833402 	orr	r3, r3, r2, lsl #8
   13050:	e6bf3073 	sxth	r3, r3
   13054:	e5803118 	str	r3, [r0, #280]	; 0x118
   13058:	e5d1200e 	ldrb	r2, [r1, #14]
   1305c:	e5d1300d 	ldrb	r3, [r1, #13]
   13060:	e1833402 	orr	r3, r3, r2, lsl #8
   13064:	e6bf3073 	sxth	r3, r3
   13068:	e580311c 	str	r3, [r0, #284]	; 0x11c
   1306c:	e5d1300f 	ldrb	r3, [r1, #15]
   13070:	e5d12010 	ldrb	r2, [r1, #16]
   13074:	e1833402 	orr	r3, r3, r2, lsl #8
   13078:	e6bf3073 	sxth	r3, r3
   1307c:	e5803120 	str	r3, [r0, #288]	; 0x120
   13080:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   13084:	00025a60 	.word	0x00025a60

00013088 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()>:
   13088:	e92d4010 	push	{r4, lr}
   1308c:	e1a04000 	mov	r4, r0
   13090:	e5900140 	ldr	r0, [r0, #320]	; 0x140
   13094:	e59f3034 	ldr	r3, [pc, #52]	; 130d0 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()+0x48>
   13098:	e3500000 	cmp	r0, #0
   1309c:	e5843000 	str	r3, [r4]
   130a0:	0a000002 	beq	130b0 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()+0x28>
   130a4:	e5903000 	ldr	r3, [r0]
   130a8:	e5933004 	ldr	r3, [r3, #4]
   130ac:	e12fff33 	blx	r3
   130b0:	e594013c 	ldr	r0, [r4, #316]	; 0x13c
   130b4:	e3500000 	cmp	r0, #0
   130b8:	0a000000 	beq	130c0 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()+0x38>
   130bc:	eb003e09 	bl	228e8 <operator delete[](void*)>
   130c0:	e1a00004 	mov	r0, r4
   130c4:	eb0017a0 	bl	18f4c <CUSBGamePadDevice::~CUSBGamePadDevice()>
   130c8:	e1a00004 	mov	r0, r4
   130cc:	e8bd8010 	pop	{r4, pc}
   130d0:	00025a8c 	.word	0x00025a8c

000130d4 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()>:
   130d4:	e92d4010 	push	{r4, lr}
   130d8:	e1a04000 	mov	r4, r0
   130dc:	ebffffe9 	bl	13088 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()>
   130e0:	e1a00004 	mov	r0, r4
   130e4:	e3a01f53 	mov	r1, #332	; 0x14c
   130e8:	eb003dff 	bl	228ec <operator delete(void*, unsigned int)>
   130ec:	e1a00004 	mov	r0, r4
   130f0:	e8bd8010 	pop	{r4, pc}

000130f4 <CUSBGamePadPS4Device::CUSBGamePadPS4Device(CUSBFunction*)>:
   130f4:	e92d4010 	push	{r4, lr}
   130f8:	e1a04000 	mov	r4, r0
   130fc:	eb001780 	bl	18f04 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   13100:	e3a03000 	mov	r3, #0
   13104:	e59f2030 	ldr	r2, [pc, #48]	; 1313c <CUSBGamePadPS4Device::CUSBGamePadPS4Device(CUSBFunction*)+0x48>
   13108:	e1a00004 	mov	r0, r4
   1310c:	e5842000 	str	r2, [r4]
   13110:	e3a01003 	mov	r1, #3
   13114:	e1a02003 	mov	r2, r3
   13118:	eb00069d 	bl	14b94 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)>
   1311c:	e3a03000 	mov	r3, #0
   13120:	e5c40130 	strb	r0, [r4, #304]	; 0x130
   13124:	e584313c 	str	r3, [r4, #316]	; 0x13c
   13128:	e5843140 	str	r3, [r4, #320]	; 0x140
   1312c:	e5c43144 	strb	r3, [r4, #324]	; 0x144
   13130:	e5c43145 	strb	r3, [r4, #325]	; 0x145
   13134:	e1a00004 	mov	r0, r4
   13138:	e8bd8010 	pop	{r4, pc}
   1313c:	00025a8c 	.word	0x00025a8c

00013140 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)>:
   13140:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13144:	e5d13007 	ldrb	r3, [r1, #7]
   13148:	e24dd008 	sub	sp, sp, #8
   1314c:	e2133002 	ands	r3, r3, #2
   13150:	e1a06001 	mov	r6, r1
   13154:	e1a05000 	mov	r5, r0
   13158:	e5d02144 	ldrb	r2, [r0, #324]	; 0x144
   1315c:	1a00004f 	bne	132a0 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x160>
   13160:	e3520000 	cmp	r2, #0
   13164:	1a000050 	bne	132ac <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x16c>
   13168:	e5d67021 	ldrb	r7, [r6, #33]	; 0x21
   1316c:	e5d64023 	ldrb	r4, [r6, #35]	; 0x23
   13170:	e2473001 	sub	r3, r7, #1
   13174:	e3530002 	cmp	r3, #2
   13178:	83a07001 	movhi	r7, #1
   1317c:	e1b043a4 	lsrs	r4, r4, #7
   13180:	1a00004e 	bne	132c0 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x180>
   13184:	e1a03004 	mov	r3, r4
   13188:	e5d50145 	ldrb	r0, [r5, #325]	; 0x145
   1318c:	e0833004 	add	r3, r3, r4
   13190:	e3500000 	cmp	r0, #0
   13194:	e0863003 	add	r3, r6, r3
   13198:	1a000025 	bne	13234 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xf4>
   1319c:	e5d3e025 	ldrb	lr, [r3, #37]	; 0x25
   131a0:	e5d3c024 	ldrb	ip, [r3, #36]	; 0x24
   131a4:	e5d31026 	ldrb	r1, [r3, #38]	; 0x26
   131a8:	e20e300f 	and	r3, lr, #15
   131ac:	e18cc403 	orr	ip, ip, r3, lsl #8
   131b0:	e1a08000 	mov	r8, r0
   131b4:	e1a03000 	mov	r3, r0
   131b8:	e1a01201 	lsl	r1, r1, #4
   131bc:	e181122e 	orr	r1, r1, lr, lsr #4
   131c0:	e2859f51 	add	r9, r5, #324	; 0x144
   131c4:	e285ef52 	add	lr, r5, #328	; 0x148
   131c8:	e3a0a001 	mov	sl, #1
   131cc:	e1902002 	orrs	r2, r0, r2
   131d0:	e5c5a145 	strb	sl, [r5, #325]	; 0x145
   131d4:	e1c9c0b2 	strh	ip, [r9, #2]
   131d8:	e1ce10b0 	strh	r1, [lr]
   131dc:	0a000005 	beq	131f8 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xb8>
   131e0:	e5950140 	ldr	r0, [r5, #320]	; 0x140
   131e4:	e3500000 	cmp	r0, #0
   131e8:	0a00003e 	beq	132e8 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x1a8>
   131ec:	e1a02008 	mov	r2, r8
   131f0:	e5d51144 	ldrb	r1, [r5, #324]	; 0x144
   131f4:	eb001990 	bl	1983c <CMouseDevice::ReportHandler(unsigned int, int, int)>
   131f8:	e3a01000 	mov	r1, #0
   131fc:	e2844001 	add	r4, r4, #1
   13200:	e1a03184 	lsl	r3, r4, #3
   13204:	e0832004 	add	r2, r3, r4
   13208:	e1570004 	cmp	r7, r4
   1320c:	e0862002 	add	r2, r6, r2
   13210:	0a000005 	beq	1322c <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xec>
   13214:	e5d20023 	ldrb	r0, [r2, #35]	; 0x23
   13218:	e1a02001 	mov	r2, r1
   1321c:	e1b003a0 	lsrs	r0, r0, #7
   13220:	0affffd8 	beq	13188 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x48>
   13224:	e5c51145 	strb	r1, [r5, #325]	; 0x145
   13228:	eafffff3 	b	131fc <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xbc>
   1322c:	e28dd008 	add	sp, sp, #8
   13230:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13234:	e5d3a025 	ldrb	sl, [r3, #37]	; 0x25
   13238:	e5d3c024 	ldrb	ip, [r3, #36]	; 0x24
   1323c:	e2859f51 	add	r9, r5, #324	; 0x144
   13240:	e20a100f 	and	r1, sl, #15
   13244:	e1d980b2 	ldrh	r8, [r9, #2]
   13248:	e18cc401 	orr	ip, ip, r1, lsl #8
   1324c:	e04c8008 	sub	r8, ip, r8
   13250:	e358007f 	cmp	r8, #127	; 0x7f
   13254:	e3e0007e 	mvn	r0, #126	; 0x7e
   13258:	a3a0807f 	movge	r8, #127	; 0x7f
   1325c:	e5d31026 	ldrb	r1, [r3, #38]	; 0x26
   13260:	e285ef52 	add	lr, r5, #328	; 0x148
   13264:	e1a01201 	lsl	r1, r1, #4
   13268:	e1de30b0 	ldrh	r3, [lr]
   1326c:	e181122a 	orr	r1, r1, sl, lsr #4
   13270:	e0413003 	sub	r3, r1, r3
   13274:	e1580000 	cmp	r8, r0
   13278:	b1a08000 	movlt	r8, r0
   1327c:	e353007f 	cmp	r3, #127	; 0x7f
   13280:	a3a0307f 	movge	r3, #127	; 0x7f
   13284:	e1530000 	cmp	r3, r0
   13288:	b1a03000 	movlt	r3, r0
   1328c:	e3580000 	cmp	r8, #0
   13290:	03530000 	cmpeq	r3, #0
   13294:	13a00001 	movne	r0, #1
   13298:	03a00000 	moveq	r0, #0
   1329c:	eaffffc9 	b	131c8 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x88>
   132a0:	e3520000 	cmp	r2, #0
   132a4:	13a02000 	movne	r2, #0
   132a8:	1affffae 	bne	13168 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x28>
   132ac:	e2933000 	adds	r3, r3, #0
   132b0:	13a03001 	movne	r3, #1
   132b4:	e3a02001 	mov	r2, #1
   132b8:	e5c53144 	strb	r3, [r5, #324]	; 0x144
   132bc:	eaffffa9 	b	13168 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x28>
   132c0:	e3a04000 	mov	r4, #0
   132c4:	e1520004 	cmp	r2, r4
   132c8:	e5c54145 	strb	r4, [r5, #325]	; 0x145
   132cc:	01a04002 	moveq	r4, r2
   132d0:	0affffc8 	beq	131f8 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xb8>
   132d4:	e5950140 	ldr	r0, [r5, #320]	; 0x140
   132d8:	e1a03004 	mov	r3, r4
   132dc:	e3500000 	cmp	r0, #0
   132e0:	e1a08004 	mov	r8, r4
   132e4:	1affffc0 	bne	131ec <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xac>
   132e8:	e59f0018 	ldr	r0, [pc, #24]	; 13308 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x1c8>
   132ec:	e59f2018 	ldr	r2, [pc, #24]	; 1330c <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x1cc>
   132f0:	e59f1018 	ldr	r1, [pc, #24]	; 13310 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x1d0>
   132f4:	e58d3004 	str	r3, [sp, #4]
   132f8:	eb001ca6 	bl	1a598 <assertion_failed>
   132fc:	e5950140 	ldr	r0, [r5, #320]	; 0x140
   13300:	e59d3004 	ldr	r3, [sp, #4]
   13304:	eaffffb8 	b	131ec <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xac>
   13308:	00025ae8 	.word	0x00025ae8
   1330c:	0000015a 	.word	0x0000015a
   13310:	00025ad4 	.word	0x00025ad4

00013314 <CUSBGamePadPS4Device::ReportHandler(unsigned char const*, unsigned int)>:
   13314:	e2913000 	adds	r3, r1, #0
   13318:	13a03001 	movne	r3, #1
   1331c:	e3520040 	cmp	r2, #64	; 0x40
   13320:	13a03000 	movne	r3, #0
   13324:	e2532000 	subs	r2, r3, #0
   13328:	012fff1e 	bxeq	lr
   1332c:	e92d4070 	push	{r4, r5, r6, lr}
   13330:	e1a04000 	mov	r4, r0
   13334:	e5903000 	ldr	r3, [r0]
   13338:	e1a05001 	mov	r5, r1
   1333c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   13340:	e12fff33 	blx	r3
   13344:	e5943124 	ldr	r3, [r4, #292]	; 0x124
   13348:	e3530000 	cmp	r3, #0
   1334c:	0a000003 	beq	13360 <CUSBGamePadPS4Device::ReportHandler(unsigned char const*, unsigned int)+0x4c>
   13350:	e594012c 	ldr	r0, [r4, #300]	; 0x12c
   13354:	e2841024 	add	r1, r4, #36	; 0x24
   13358:	e2400001 	sub	r0, r0, #1
   1335c:	e12fff33 	blx	r3
   13360:	e5943140 	ldr	r3, [r4, #320]	; 0x140
   13364:	e3530000 	cmp	r3, #0
   13368:	08bd8070 	popeq	{r4, r5, r6, pc}
   1336c:	e1a01005 	mov	r1, r5
   13370:	e1a00004 	mov	r0, r4
   13374:	e8bd4070 	pop	{r4, r5, r6, lr}
   13378:	eaffff70 	b	13140 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)>

0001337c <CUSBGamePadPS4Device::SendLedRumbleCommand()>:
   1337c:	e92d4010 	push	{r4, lr}
   13380:	e590213c 	ldr	r2, [r0, #316]	; 0x13c
   13384:	e5d0c131 	ldrb	ip, [r0, #305]	; 0x131
   13388:	e3a03000 	mov	r3, #0
   1338c:	e5c2c003 	strb	ip, [r2, #3]
   13390:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
   13394:	e5d0e133 	ldrb	lr, [r0, #307]	; 0x133
   13398:	e3a02020 	mov	r2, #32
   1339c:	e5cce004 	strb	lr, [ip, #4]
   133a0:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
   133a4:	e5d0e132 	ldrb	lr, [r0, #306]	; 0x132
   133a8:	e5cce005 	strb	lr, [ip, #5]
   133ac:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
   133b0:	e5d0e134 	ldrb	lr, [r0, #308]	; 0x134
   133b4:	e5cce006 	strb	lr, [ip, #6]
   133b8:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
   133bc:	e5d0e135 	ldrb	lr, [r0, #309]	; 0x135
   133c0:	e5cce007 	strb	lr, [ip, #7]
   133c4:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
   133c8:	e5d0e136 	ldrb	lr, [r0, #310]	; 0x136
   133cc:	e5cce008 	strb	lr, [ip, #8]
   133d0:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
   133d4:	e5d0e137 	ldrb	lr, [r0, #311]	; 0x137
   133d8:	e5cce009 	strb	lr, [ip, #9]
   133dc:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
   133e0:	e5d0e138 	ldrb	lr, [r0, #312]	; 0x138
   133e4:	e5cce00a 	strb	lr, [ip, #10]
   133e8:	e590113c 	ldr	r1, [r0, #316]	; 0x13c
   133ec:	ebfff9a5 	bl	11a88 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   133f0:	e2504000 	subs	r4, r0, #0
   133f4:	1a000004 	bne	1340c <CUSBGamePadPS4Device::SendLedRumbleCommand()+0x90>
   133f8:	eb002659 	bl	1cd64 <CLogger::Get()>
   133fc:	e59f3010 	ldr	r3, [pc, #16]	; 13414 <CUSBGamePadPS4Device::SendLedRumbleCommand()+0x98>
   13400:	e3a02001 	mov	r2, #1
   13404:	e59f100c 	ldr	r1, [pc, #12]	; 13418 <CUSBGamePadPS4Device::SendLedRumbleCommand()+0x9c>
   13408:	eb0027fe 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1340c:	e1a00004 	mov	r0, r4
   13410:	e8bd8010 	pop	{r4, pc}
   13414:	00025afc 	.word	0x00025afc
   13418:	00025ac8 	.word	0x00025ac8

0001341c <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)>:
   1341c:	e2411001 	sub	r1, r1, #1
   13420:	e3510006 	cmp	r1, #6
   13424:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
   13428:	ea000044 	b	13540 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0x124>
   1342c:	00013468 	.word	0x00013468
   13430:	0001348c 	.word	0x0001348c
   13434:	000134b0 	.word	0x000134b0
   13438:	000134d4 	.word	0x000134d4
   1343c:	000134f8 	.word	0x000134f8
   13440:	0001351c 	.word	0x0001351c
   13444:	00013448 	.word	0x00013448
   13448:	e3e03000 	mvn	r3, #0
   1344c:	e3a0207f 	mov	r2, #127	; 0x7f
   13450:	e5c03134 	strb	r3, [r0, #308]	; 0x134
   13454:	e5c03135 	strb	r3, [r0, #309]	; 0x135
   13458:	e5c03136 	strb	r3, [r0, #310]	; 0x136
   1345c:	e5c03138 	strb	r3, [r0, #312]	; 0x138
   13460:	e5c02137 	strb	r2, [r0, #311]	; 0x137
   13464:	eaffffc4 	b	1337c <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   13468:	e3a02000 	mov	r2, #0
   1346c:	e3e03000 	mvn	r3, #0
   13470:	e3a0107f 	mov	r1, #127	; 0x7f
   13474:	e5c02134 	strb	r2, [r0, #308]	; 0x134
   13478:	e5c02135 	strb	r2, [r0, #309]	; 0x135
   1347c:	e5c03136 	strb	r3, [r0, #310]	; 0x136
   13480:	e5c03138 	strb	r3, [r0, #312]	; 0x138
   13484:	e5c01137 	strb	r1, [r0, #311]	; 0x137
   13488:	eaffffbb 	b	1337c <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   1348c:	e3e02000 	mvn	r2, #0
   13490:	e3a03000 	mov	r3, #0
   13494:	e3a0107f 	mov	r1, #127	; 0x7f
   13498:	e5c02134 	strb	r2, [r0, #308]	; 0x134
   1349c:	e5c02138 	strb	r2, [r0, #312]	; 0x138
   134a0:	e5c03135 	strb	r3, [r0, #309]	; 0x135
   134a4:	e5c03136 	strb	r3, [r0, #310]	; 0x136
   134a8:	e5c01137 	strb	r1, [r0, #311]	; 0x137
   134ac:	eaffffb2 	b	1337c <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   134b0:	e3e03000 	mvn	r3, #0
   134b4:	e3a01000 	mov	r1, #0
   134b8:	e3a0207f 	mov	r2, #127	; 0x7f
   134bc:	e5c03134 	strb	r3, [r0, #308]	; 0x134
   134c0:	e5c03136 	strb	r3, [r0, #310]	; 0x136
   134c4:	e5c03138 	strb	r3, [r0, #312]	; 0x138
   134c8:	e5c01135 	strb	r1, [r0, #309]	; 0x135
   134cc:	e5c02137 	strb	r2, [r0, #311]	; 0x137
   134d0:	eaffffa9 	b	1337c <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   134d4:	e3a02000 	mov	r2, #0
   134d8:	e3e03000 	mvn	r3, #0
   134dc:	e3a0107f 	mov	r1, #127	; 0x7f
   134e0:	e5c02134 	strb	r2, [r0, #308]	; 0x134
   134e4:	e5c02136 	strb	r2, [r0, #310]	; 0x136
   134e8:	e5c03135 	strb	r3, [r0, #309]	; 0x135
   134ec:	e5c03138 	strb	r3, [r0, #312]	; 0x138
   134f0:	e5c01137 	strb	r1, [r0, #311]	; 0x137
   134f4:	eaffffa0 	b	1337c <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   134f8:	e3e03000 	mvn	r3, #0
   134fc:	e3a01000 	mov	r1, #0
   13500:	e3a0207f 	mov	r2, #127	; 0x7f
   13504:	e5c01134 	strb	r1, [r0, #308]	; 0x134
   13508:	e5c03135 	strb	r3, [r0, #309]	; 0x135
   1350c:	e5c03136 	strb	r3, [r0, #310]	; 0x136
   13510:	e5c03138 	strb	r3, [r0, #312]	; 0x138
   13514:	e5c02137 	strb	r2, [r0, #311]	; 0x137
   13518:	eaffff97 	b	1337c <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   1351c:	e3e03000 	mvn	r3, #0
   13520:	e3a01000 	mov	r1, #0
   13524:	e3a0207f 	mov	r2, #127	; 0x7f
   13528:	e5c03134 	strb	r3, [r0, #308]	; 0x134
   1352c:	e5c03135 	strb	r3, [r0, #309]	; 0x135
   13530:	e5c03138 	strb	r3, [r0, #312]	; 0x138
   13534:	e5c01136 	strb	r1, [r0, #310]	; 0x136
   13538:	e5c02137 	strb	r2, [r0, #311]	; 0x137
   1353c:	eaffff8e 	b	1337c <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   13540:	e3a03000 	mov	r3, #0
   13544:	e5c03134 	strb	r3, [r0, #308]	; 0x134
   13548:	e5c03135 	strb	r3, [r0, #309]	; 0x135
   1354c:	e5c03136 	strb	r3, [r0, #310]	; 0x136
   13550:	e5c03137 	strb	r3, [r0, #311]	; 0x137
   13554:	e5c03138 	strb	r3, [r0, #312]	; 0x138
   13558:	eaffff87 	b	1337c <CUSBGamePadPS4Device::SendLedRumbleCommand()>

0001355c <CUSBGamePadPS4Device::SetLEDMode(unsigned int, unsigned char, unsigned char)>:
   1355c:	e92d4010 	push	{r4, lr}
   13560:	e1a04821 	lsr	r4, r1, #16
   13564:	e1a0e421 	lsr	lr, r1, #8
   13568:	e5c04134 	strb	r4, [r0, #308]	; 0x134
   1356c:	e5c01136 	strb	r1, [r0, #310]	; 0x136
   13570:	e5c0e135 	strb	lr, [r0, #309]	; 0x135
   13574:	e5c02137 	strb	r2, [r0, #311]	; 0x137
   13578:	e5c03138 	strb	r3, [r0, #312]	; 0x138
   1357c:	e8bd4010 	pop	{r4, lr}
   13580:	eaffff7d 	b	1337c <CUSBGamePadPS4Device::SendLedRumbleCommand()>

00013584 <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)>:
   13584:	e3510001 	cmp	r1, #1
   13588:	0a000011 	beq	135d4 <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)+0x50>
   1358c:	3a00000a 	bcc	135bc <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)+0x38>
   13590:	e3510002 	cmp	r1, #2
   13594:	1a000006 	bne	135b4 <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)+0x30>
   13598:	e3e0100c 	mvn	r1, #12
   1359c:	e3a02000 	mov	r2, #0
   135a0:	e3e03000 	mvn	r3, #0
   135a4:	e5c01131 	strb	r1, [r0, #305]	; 0x131
   135a8:	e5c02133 	strb	r2, [r0, #307]	; 0x133
   135ac:	e5c03132 	strb	r3, [r0, #306]	; 0x132
   135b0:	eaffff71 	b	1337c <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   135b4:	e3a00001 	mov	r0, #1
   135b8:	e12fff1e 	bx	lr
   135bc:	e3a03000 	mov	r3, #0
   135c0:	e3e0200f 	mvn	r2, #15
   135c4:	e5c03133 	strb	r3, [r0, #307]	; 0x133
   135c8:	e5c02131 	strb	r2, [r0, #305]	; 0x131
   135cc:	e5c03132 	strb	r3, [r0, #306]	; 0x132
   135d0:	eaffff69 	b	1337c <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   135d4:	e3e0100c 	mvn	r1, #12
   135d8:	e3e02000 	mvn	r2, #0
   135dc:	e3a03000 	mov	r3, #0
   135e0:	e5c01131 	strb	r1, [r0, #305]	; 0x131
   135e4:	e5c02133 	strb	r2, [r0, #307]	; 0x133
   135e8:	e5c03132 	strb	r3, [r0, #306]	; 0x132
   135ec:	eaffff62 	b	1337c <CUSBGamePadPS4Device::SendLedRumbleCommand()>

000135f0 <CUSBGamePadPS4Device::DisableTouchpad()>:
   135f0:	e3a02000 	mov	r2, #0
   135f4:	e59f3004 	ldr	r3, [pc, #4]	; 13600 <CUSBGamePadPS4Device::DisableTouchpad()+0x10>
   135f8:	e5c32000 	strb	r2, [r3]
   135fc:	e12fff1e 	bx	lr
   13600:	0002b00c 	.word	0x0002b00c

00013604 <CUSBGamePadPS4Device::Configure()>:
   13604:	e92d4070 	push	{r4, r5, r6, lr}
   13608:	e5d05130 	ldrb	r5, [r0, #304]	; 0x130
   1360c:	e3550000 	cmp	r5, #0
   13610:	0a00003f 	beq	13714 <CUSBGamePadPS4Device::Configure()+0x110>
   13614:	e3a02040 	mov	r2, #64	; 0x40
   13618:	e2803f4a 	add	r3, r0, #296	; 0x128
   1361c:	e1c320b0 	strh	r2, [r3]
   13620:	e1a04000 	mov	r4, r0
   13624:	eb001608 	bl	18e4c <CUSBGamePadDevice::Configure()>
   13628:	e2505000 	subs	r5, r0, #0
   1362c:	0a00003c 	beq	13724 <CUSBGamePadPS4Device::Configure()+0x120>
   13630:	e59f3120 	ldr	r3, [pc, #288]	; 13758 <CUSBGamePadPS4Device::Configure()+0x154>
   13634:	e5d33000 	ldrb	r3, [r3]
   13638:	e3530000 	cmp	r3, #0
   1363c:	1a00003f 	bne	13740 <CUSBGamePadPS4Device::Configure()+0x13c>
   13640:	e3a02006 	mov	r2, #6
   13644:	e3a0c00e 	mov	ip, #14
   13648:	e3a00001 	mov	r0, #1
   1364c:	e1a03004 	mov	r3, r4
   13650:	e3a05000 	mov	r5, #0
   13654:	e3a010ff 	mov	r1, #255	; 0xff
   13658:	e5842024 	str	r2, [r4, #36]	; 0x24
   1365c:	e584c104 	str	ip, [r4, #260]	; 0x104
   13660:	e58400e8 	str	r0, [r4, #232]	; 0xe8
   13664:	e2842048 	add	r2, r4, #72	; 0x48
   13668:	e583502c 	str	r5, [r3, #44]	; 0x2c
   1366c:	e5831030 	str	r1, [r3, #48]	; 0x30
   13670:	e283300c 	add	r3, r3, #12
   13674:	e1520003 	cmp	r2, r3
   13678:	1afffffa 	bne	13668 <CUSBGamePadPS4Device::Configure()+0x64>
   1367c:	e3a00020 	mov	r0, #32
   13680:	eb003c96 	bl	228e0 <operator new[](unsigned int)>
   13684:	e3a06005 	mov	r6, #5
   13688:	e3a02020 	mov	r2, #32
   1368c:	e584013c 	str	r0, [r4, #316]	; 0x13c
   13690:	e3a01000 	mov	r1, #0
   13694:	eb003822 	bl	21724 <memset>
   13698:	e3a0c007 	mov	ip, #7
   1369c:	e3e03000 	mvn	r3, #0
   136a0:	e3a0e004 	mov	lr, #4
   136a4:	e3e0100f 	mvn	r1, #15
   136a8:	e3a0207f 	mov	r2, #127	; 0x7f
   136ac:	e594013c 	ldr	r0, [r4, #316]	; 0x13c
   136b0:	e5c06000 	strb	r6, [r0]
   136b4:	e594013c 	ldr	r0, [r4, #316]	; 0x13c
   136b8:	e5c0c001 	strb	ip, [r0, #1]
   136bc:	e594c13c 	ldr	ip, [r4, #316]	; 0x13c
   136c0:	e1a00004 	mov	r0, r4
   136c4:	e5cce002 	strb	lr, [ip, #2]
   136c8:	e5c41131 	strb	r1, [r4, #305]	; 0x131
   136cc:	e5c43134 	strb	r3, [r4, #308]	; 0x134
   136d0:	e5c43135 	strb	r3, [r4, #309]	; 0x135
   136d4:	e5c43136 	strb	r3, [r4, #310]	; 0x136
   136d8:	e5c43138 	strb	r3, [r4, #312]	; 0x138
   136dc:	e5c42137 	strb	r2, [r4, #311]	; 0x137
   136e0:	e5c45133 	strb	r5, [r4, #307]	; 0x133
   136e4:	e5c45132 	strb	r5, [r4, #306]	; 0x132
   136e8:	ebffff23 	bl	1337c <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   136ec:	e5c45134 	strb	r5, [r4, #308]	; 0x134
   136f0:	e5c45135 	strb	r5, [r4, #309]	; 0x135
   136f4:	e5c45136 	strb	r5, [r4, #310]	; 0x136
   136f8:	e3a000fa 	mov	r0, #250	; 0xfa
   136fc:	eb0037c0 	bl	21604 <CTimer::SimpleMsDelay(unsigned int)>
   13700:	e1a00004 	mov	r0, r4
   13704:	ebffff1c 	bl	1337c <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   13708:	e1a00004 	mov	r0, r4
   1370c:	e8bd4070 	pop	{r4, r5, r6, lr}
   13710:	eafff96d 	b	11ccc <CUSBHIDDevice::StartRequest()>
   13714:	e59f1040 	ldr	r1, [pc, #64]	; 1375c <CUSBGamePadPS4Device::Configure()+0x158>
   13718:	eb000501 	bl	14b24 <CUSBFunction::ConfigurationError(char const*) const>
   1371c:	e1a00005 	mov	r0, r5
   13720:	e8bd8070 	pop	{r4, r5, r6, pc}
   13724:	eb00258e 	bl	1cd64 <CLogger::Get()>
   13728:	e59f3030 	ldr	r3, [pc, #48]	; 13760 <CUSBGamePadPS4Device::Configure()+0x15c>
   1372c:	e3a02001 	mov	r2, #1
   13730:	e59f1024 	ldr	r1, [pc, #36]	; 1375c <CUSBGamePadPS4Device::Configure()+0x158>
   13734:	eb002733 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13738:	e1a00005 	mov	r0, r5
   1373c:	e8bd8070 	pop	{r4, r5, r6, pc}
   13740:	e3a00028 	mov	r0, #40	; 0x28
   13744:	eb003c64 	bl	228dc <operator new(unsigned int)>
   13748:	e1a05000 	mov	r5, r0
   1374c:	eb0017fd 	bl	19748 <CMouseDevice::CMouseDevice()>
   13750:	e5845140 	str	r5, [r4, #320]	; 0x140
   13754:	eaffffb9 	b	13640 <CUSBGamePadPS4Device::Configure()+0x3c>
   13758:	0002b00c 	.word	0x0002b00c
   1375c:	00025ac8 	.word	0x00025ac8
   13760:	00025924 	.word	0x00025924

00013764 <CUSBGamePadPS4Device::GetProperties()>:
   13764:	e3a0003f 	mov	r0, #63	; 0x3f
   13768:	e12fff1e 	bx	lr

0001376c <CUSBGamePadXbox360Device::~CUSBGamePadXbox360Device()>:
   1376c:	e92d4010 	push	{r4, lr}
   13770:	e1a04000 	mov	r4, r0
   13774:	e59f300c 	ldr	r3, [pc, #12]	; 13788 <CUSBGamePadXbox360Device::~CUSBGamePadXbox360Device()+0x1c>
   13778:	e5803000 	str	r3, [r0]
   1377c:	eb0015f2 	bl	18f4c <CUSBGamePadDevice::~CUSBGamePadDevice()>
   13780:	e1a00004 	mov	r0, r4
   13784:	e8bd8010 	pop	{r4, pc}
   13788:	00025b24 	.word	0x00025b24

0001378c <CUSBGamePadXbox360Device::~CUSBGamePadXbox360Device()>:
   1378c:	e92d4010 	push	{r4, lr}
   13790:	e1a04000 	mov	r4, r0
   13794:	e59f3018 	ldr	r3, [pc, #24]	; 137b4 <CUSBGamePadXbox360Device::~CUSBGamePadXbox360Device()+0x28>
   13798:	e5803000 	str	r3, [r0]
   1379c:	eb0015ea 	bl	18f4c <CUSBGamePadDevice::~CUSBGamePadDevice()>
   137a0:	e1a00004 	mov	r0, r4
   137a4:	e3a01e13 	mov	r1, #304	; 0x130
   137a8:	eb003c4f 	bl	228ec <operator delete(void*, unsigned int)>
   137ac:	e1a00004 	mov	r0, r4
   137b0:	e8bd8010 	pop	{r4, pc}
   137b4:	00025b24 	.word	0x00025b24

000137b8 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)>:
   137b8:	e92d4070 	push	{r4, r5, r6, lr}
   137bc:	e2515000 	subs	r5, r1, #0
   137c0:	e1a04000 	mov	r4, r0
   137c4:	0a00003f 	beq	138c8 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x110>
   137c8:	e5d53000 	ldrb	r3, [r5]
   137cc:	e5d52001 	ldrb	r2, [r5, #1]
   137d0:	e1833402 	orr	r3, r3, r2, lsl #8
   137d4:	e3530b05 	cmp	r3, #5120	; 0x1400
   137d8:	0a000003 	beq	137ec <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x34>
   137dc:	e3a02078 	mov	r2, #120	; 0x78
   137e0:	e59f10f4 	ldr	r1, [pc, #244]	; 138dc <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x124>
   137e4:	e59f00f4 	ldr	r0, [pc, #244]	; 138e0 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x128>
   137e8:	eb001b6a 	bl	1a598 <assertion_failed>
   137ec:	e3a00000 	mov	r0, #0
   137f0:	e5d51003 	ldrb	r1, [r5, #3]
   137f4:	e5d52002 	ldrb	r2, [r5, #2]
   137f8:	e59f30e4 	ldr	r3, [pc, #228]	; 138e4 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x12c>
   137fc:	e1822401 	orr	r2, r2, r1, lsl #8
   13800:	e5840108 	str	r0, [r4, #264]	; 0x108
   13804:	e2831040 	add	r1, r3, #64	; 0x40
   13808:	e3120001 	tst	r2, #1
   1380c:	1593c000 	ldrne	ip, [r3]
   13810:	15940108 	ldrne	r0, [r4, #264]	; 0x108
   13814:	e2833004 	add	r3, r3, #4
   13818:	1180000c 	orrne	r0, r0, ip
   1381c:	15840108 	strne	r0, [r4, #264]	; 0x108
   13820:	e1510003 	cmp	r1, r3
   13824:	e1a020a2 	lsr	r2, r2, #1
   13828:	1afffff6 	bne	13808 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x50>
   1382c:	e3a00000 	mov	r0, #0
   13830:	e1a02000 	mov	r2, r0
   13834:	e5d53006 	ldrb	r3, [r5, #6]
   13838:	e5d5c007 	ldrb	ip, [r5, #7]
   1383c:	e183340c 	orr	r3, r3, ip, lsl #8
   13840:	e6bf3073 	sxth	r3, r3
   13844:	e2833902 	add	r3, r3, #32768	; 0x8000
   13848:	e1a03423 	lsr	r3, r3, #8
   1384c:	e2800001 	add	r0, r0, #1
   13850:	e0822082 	add	r2, r2, r2, lsl #1
   13854:	e0842102 	add	r2, r4, r2, lsl #2
   13858:	e3500004 	cmp	r0, #4
   1385c:	e085c080 	add	ip, r5, r0, lsl #1
   13860:	e5823028 	str	r3, [r2, #40]	; 0x28
   13864:	0a00000a 	beq	13894 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0xdc>
   13868:	e5dc3006 	ldrb	r3, [ip, #6]
   1386c:	e5dcc007 	ldrb	ip, [ip, #7]
   13870:	e7912100 	ldr	r2, [r1, r0, lsl #2]
   13874:	e183340c 	orr	r3, r3, ip, lsl #8
   13878:	e6bf3073 	sxth	r3, r3
   1387c:	e3c2c002 	bic	ip, r2, #2
   13880:	e2833902 	add	r3, r3, #32768	; 0x8000
   13884:	e35c0001 	cmp	ip, #1
   13888:	e1a03423 	lsr	r3, r3, #8
   1388c:	026330ff 	rsbeq	r3, r3, #255	; 0xff
   13890:	eaffffed 	b	1384c <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x94>
   13894:	e5d53004 	ldrb	r3, [r5, #4]
   13898:	e353007f 	cmp	r3, #127	; 0x7f
   1389c:	e5843058 	str	r3, [r4, #88]	; 0x58
   138a0:	c5943108 	ldrgt	r3, [r4, #264]	; 0x108
   138a4:	c3833008 	orrgt	r3, r3, #8
   138a8:	c5843108 	strgt	r3, [r4, #264]	; 0x108
   138ac:	e5d53005 	ldrb	r3, [r5, #5]
   138b0:	e353007f 	cmp	r3, #127	; 0x7f
   138b4:	e5843064 	str	r3, [r4, #100]	; 0x64
   138b8:	c5943108 	ldrgt	r3, [r4, #264]	; 0x108
   138bc:	c3833010 	orrgt	r3, r3, #16
   138c0:	c5843108 	strgt	r3, [r4, #264]	; 0x108
   138c4:	e8bd8070 	pop	{r4, r5, r6, pc}
   138c8:	e3a02077 	mov	r2, #119	; 0x77
   138cc:	e59f1008 	ldr	r1, [pc, #8]	; 138dc <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x124>
   138d0:	e59f0010 	ldr	r0, [pc, #16]	; 138e8 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x130>
   138d4:	eb001b2f 	bl	1a598 <assertion_failed>
   138d8:	eaffffba 	b	137c8 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x10>
   138dc:	00025bd0 	.word	0x00025bd0
   138e0:	00025be8 	.word	0x00025be8
   138e4:	00025b60 	.word	0x00025b60
   138e8:	00025a50 	.word	0x00025a50

000138ec <CUSBGamePadXbox360Device::ReportHandler(unsigned char const*, unsigned int)>:
   138ec:	e2913000 	adds	r3, r1, #0
   138f0:	13a03001 	movne	r3, #1
   138f4:	e352000e 	cmp	r2, #14
   138f8:	13a03000 	movne	r3, #0
   138fc:	e2532000 	subs	r2, r3, #0
   13900:	012fff1e 	bxeq	lr
   13904:	e5d1c000 	ldrb	ip, [r1]
   13908:	e35c0000 	cmp	ip, #0
   1390c:	112fff1e 	bxne	lr
   13910:	e5d13001 	ldrb	r3, [r1, #1]
   13914:	e3530014 	cmp	r3, #20
   13918:	112fff1e 	bxne	lr
   1391c:	e5903124 	ldr	r3, [r0, #292]	; 0x124
   13920:	e92d4070 	push	{r4, r5, r6, lr}
   13924:	e3530000 	cmp	r3, #0
   13928:	e1a04000 	mov	r4, r0
   1392c:	08bd8070 	popeq	{r4, r5, r6, pc}
   13930:	e1a05000 	mov	r5, r0
   13934:	e4953024 	ldr	r3, [r5], #36	; 0x24
   13938:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   1393c:	e12fff33 	blx	r3
   13940:	e594012c 	ldr	r0, [r4, #300]	; 0x12c
   13944:	e1a01005 	mov	r1, r5
   13948:	e5943124 	ldr	r3, [r4, #292]	; 0x124
   1394c:	e2400001 	sub	r0, r0, #1
   13950:	e8bd4070 	pop	{r4, r5, r6, lr}
   13954:	e12fff13 	bx	r3

00013958 <CUSBGamePadXbox360Device::SetLEDMode(TGamePadLEDMode)>:
   13958:	e3510004 	cmp	r1, #4
   1395c:	9a000001 	bls	13968 <CUSBGamePadXbox360Device::SetLEDMode(TGamePadLEDMode)+0x10>
   13960:	e3a00000 	mov	r0, #0
   13964:	e12fff1e 	bx	lr
   13968:	e3a0c003 	mov	ip, #3
   1396c:	e92d4010 	push	{r4, lr}
   13970:	e3a0e001 	mov	lr, #1
   13974:	e59f302c 	ldr	r3, [pc, #44]	; 139a8 <CUSBGamePadXbox360Device::SetLEDMode(TGamePadLEDMode)+0x50>
   13978:	e24dd008 	sub	sp, sp, #8
   1397c:	e0831001 	add	r1, r3, r1
   13980:	e5d1409c 	ldrb	r4, [r1, #156]	; 0x9c
   13984:	e1a0200c 	mov	r2, ip
   13988:	e3a03000 	mov	r3, #0
   1398c:	e28d1004 	add	r1, sp, #4
   13990:	e5cd4006 	strb	r4, [sp, #6]
   13994:	e5cdc005 	strb	ip, [sp, #5]
   13998:	e5cde004 	strb	lr, [sp, #4]
   1399c:	ebfff839 	bl	11a88 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   139a0:	e28dd008 	add	sp, sp, #8
   139a4:	e8bd8010 	pop	{r4, pc}
   139a8:	00025b1c 	.word	0x00025b1c

000139ac <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)>:
   139ac:	e92d4030 	push	{r4, r5, lr}
   139b0:	e24dd00c 	sub	sp, sp, #12
   139b4:	e1a04001 	mov	r4, r1
   139b8:	e1a05000 	mov	r5, r0
   139bc:	e3a02008 	mov	r2, #8
   139c0:	e1a0000d 	mov	r0, sp
   139c4:	e3a01000 	mov	r1, #0
   139c8:	eb003755 	bl	21724 <memset>
   139cc:	e3a03008 	mov	r3, #8
   139d0:	e3540001 	cmp	r4, #1
   139d4:	e5cd3001 	strb	r3, [sp, #1]
   139d8:	0a000012 	beq	13a28 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x7c>
   139dc:	3a000003 	bcc	139f0 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x44>
   139e0:	e3540002 	cmp	r4, #2
   139e4:	1a000008 	bne	13a0c <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x60>
   139e8:	e3e03000 	mvn	r3, #0
   139ec:	e5cd3003 	strb	r3, [sp, #3]
   139f0:	e1a0100d 	mov	r1, sp
   139f4:	e1a00005 	mov	r0, r5
   139f8:	e3a03000 	mov	r3, #0
   139fc:	e3a02008 	mov	r2, #8
   13a00:	ebfff820 	bl	11a88 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   13a04:	e28dd00c 	add	sp, sp, #12
   13a08:	e8bd8030 	pop	{r4, r5, pc}
   13a0c:	e3a020e5 	mov	r2, #229	; 0xe5
   13a10:	e59f101c 	ldr	r1, [pc, #28]	; 13a34 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x88>
   13a14:	e59f001c 	ldr	r0, [pc, #28]	; 13a38 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x8c>
   13a18:	eb001ade 	bl	1a598 <assertion_failed>
   13a1c:	e3a00000 	mov	r0, #0
   13a20:	e28dd00c 	add	sp, sp, #12
   13a24:	e8bd8030 	pop	{r4, r5, pc}
   13a28:	e3e03000 	mvn	r3, #0
   13a2c:	e5cd3004 	strb	r3, [sp, #4]
   13a30:	eaffffee 	b	139f0 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x44>
   13a34:	00025bd0 	.word	0x00025bd0
   13a38:	00024970 	.word	0x00024970

00013a3c <CUSBGamePadXbox360Device::CUSBGamePadXbox360Device(CUSBFunction*)>:
   13a3c:	e92d4010 	push	{r4, lr}
   13a40:	e1a04000 	mov	r4, r0
   13a44:	eb00152e 	bl	18f04 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   13a48:	e59f3008 	ldr	r3, [pc, #8]	; 13a58 <CUSBGamePadXbox360Device::CUSBGamePadXbox360Device(CUSBFunction*)+0x1c>
   13a4c:	e1a00004 	mov	r0, r4
   13a50:	e5843000 	str	r3, [r4]
   13a54:	e8bd8010 	pop	{r4, pc}
   13a58:	00025b24 	.word	0x00025b24

00013a5c <CUSBGamePadXbox360Device::Configure()>:
   13a5c:	e3a0200e 	mov	r2, #14
   13a60:	e2803f4a 	add	r3, r0, #296	; 0x128
   13a64:	e92d4070 	push	{r4, r5, r6, lr}
   13a68:	e1c320b0 	strh	r2, [r3]
   13a6c:	e1a04000 	mov	r4, r0
   13a70:	eb0014f5 	bl	18e4c <CUSBGamePadDevice::Configure()>
   13a74:	e2505000 	subs	r5, r0, #0
   13a78:	0a00001e 	beq	13af8 <CUSBGamePadXbox360Device::Configure()+0x9c>
   13a7c:	e3a03000 	mov	r3, #0
   13a80:	e3a020ff 	mov	r2, #255	; 0xff
   13a84:	e3a0c012 	mov	ip, #18
   13a88:	e3a00006 	mov	r0, #6
   13a8c:	e5941000 	ldr	r1, [r4]
   13a90:	e5840024 	str	r0, [r4, #36]	; 0x24
   13a94:	e584302c 	str	r3, [r4, #44]	; 0x2c
   13a98:	e5843038 	str	r3, [r4, #56]	; 0x38
   13a9c:	e5843044 	str	r3, [r4, #68]	; 0x44
   13aa0:	e5843050 	str	r3, [r4, #80]	; 0x50
   13aa4:	e584305c 	str	r3, [r4, #92]	; 0x5c
   13aa8:	e5843068 	str	r3, [r4, #104]	; 0x68
   13aac:	e58430e8 	str	r3, [r4, #232]	; 0xe8
   13ab0:	e584c104 	str	ip, [r4, #260]	; 0x104
   13ab4:	e591302c 	ldr	r3, [r1, #44]	; 0x2c
   13ab8:	e5842030 	str	r2, [r4, #48]	; 0x30
   13abc:	e584203c 	str	r2, [r4, #60]	; 0x3c
   13ac0:	e5842048 	str	r2, [r4, #72]	; 0x48
   13ac4:	e5842054 	str	r2, [r4, #84]	; 0x54
   13ac8:	e5842060 	str	r2, [r4, #96]	; 0x60
   13acc:	e584206c 	str	r2, [r4, #108]	; 0x6c
   13ad0:	e5d4112c 	ldrb	r1, [r4, #300]	; 0x12c
   13ad4:	e1a00004 	mov	r0, r4
   13ad8:	e12fff33 	blx	r3
   13adc:	e2505000 	subs	r5, r0, #0
   13ae0:	1a000001 	bne	13aec <CUSBGamePadXbox360Device::Configure()+0x90>
   13ae4:	e1a00005 	mov	r0, r5
   13ae8:	e8bd8070 	pop	{r4, r5, r6, pc}
   13aec:	e1a00004 	mov	r0, r4
   13af0:	e8bd4070 	pop	{r4, r5, r6, lr}
   13af4:	eafff874 	b	11ccc <CUSBHIDDevice::StartRequest()>
   13af8:	eb002499 	bl	1cd64 <CLogger::Get()>
   13afc:	e59f3010 	ldr	r3, [pc, #16]	; 13b14 <CUSBGamePadXbox360Device::Configure()+0xb8>
   13b00:	e3a02001 	mov	r2, #1
   13b04:	e59f100c 	ldr	r1, [pc, #12]	; 13b18 <CUSBGamePadXbox360Device::Configure()+0xbc>
   13b08:	eb00263e 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13b0c:	e1a00005 	mov	r0, r5
   13b10:	e8bd8070 	pop	{r4, r5, r6, pc}
   13b14:	00025924 	.word	0x00025924
   13b18:	00025bc0 	.word	0x00025bc0

00013b1c <CUSBGamePadXbox360Device::GetProperties()>:
   13b1c:	e3a0000b 	mov	r0, #11
   13b20:	e12fff1e 	bx	lr

00013b24 <CUSBGamePadXboxOneDevice::DecodeReport(unsigned char const*)>:
   13b24:	e3a02000 	mov	r2, #0
   13b28:	e5d13004 	ldrb	r3, [r1, #4]
   13b2c:	e5802108 	str	r2, [r0, #264]	; 0x108
   13b30:	e3130004 	tst	r3, #4
   13b34:	13a02901 	movne	r2, #16384	; 0x4000
   13b38:	15802108 	strne	r2, [r0, #264]	; 0x108
   13b3c:	e3130008 	tst	r3, #8
   13b40:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   13b44:	13822b02 	orrne	r2, r2, #2048	; 0x800
   13b48:	15802108 	strne	r2, [r0, #264]	; 0x108
   13b4c:	e3130010 	tst	r3, #16
   13b50:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   13b54:	13822c02 	orrne	r2, r2, #512	; 0x200
   13b58:	15802108 	strne	r2, [r0, #264]	; 0x108
   13b5c:	e3130020 	tst	r3, #32
   13b60:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   13b64:	13822c01 	orrne	r2, r2, #256	; 0x100
   13b68:	15802108 	strne	r2, [r0, #264]	; 0x108
   13b6c:	e3130040 	tst	r3, #64	; 0x40
   13b70:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   13b74:	13822b01 	orrne	r2, r2, #1024	; 0x400
   13b78:	15802108 	strne	r2, [r0, #264]	; 0x108
   13b7c:	e1b033a3 	lsrs	r3, r3, #7
   13b80:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   13b84:	13833080 	orrne	r3, r3, #128	; 0x80
   13b88:	15803108 	strne	r3, [r0, #264]	; 0x108
   13b8c:	e5d13005 	ldrb	r3, [r1, #5]
   13b90:	e3130001 	tst	r3, #1
   13b94:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   13b98:	13822902 	orrne	r2, r2, #32768	; 0x8000
   13b9c:	15802108 	strne	r2, [r0, #264]	; 0x108
   13ba0:	e3130002 	tst	r3, #2
   13ba4:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   13ba8:	13822802 	orrne	r2, r2, #131072	; 0x20000
   13bac:	15802108 	strne	r2, [r0, #264]	; 0x108
   13bb0:	e3130004 	tst	r3, #4
   13bb4:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   13bb8:	13822701 	orrne	r2, r2, #262144	; 0x40000
   13bbc:	15802108 	strne	r2, [r0, #264]	; 0x108
   13bc0:	e3130008 	tst	r3, #8
   13bc4:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   13bc8:	13822801 	orrne	r2, r2, #65536	; 0x10000
   13bcc:	15802108 	strne	r2, [r0, #264]	; 0x108
   13bd0:	e3130010 	tst	r3, #16
   13bd4:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   13bd8:	13822020 	orrne	r2, r2, #32
   13bdc:	15802108 	strne	r2, [r0, #264]	; 0x108
   13be0:	e3130020 	tst	r3, #32
   13be4:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   13be8:	13822040 	orrne	r2, r2, #64	; 0x40
   13bec:	15802108 	strne	r2, [r0, #264]	; 0x108
   13bf0:	e3130040 	tst	r3, #64	; 0x40
   13bf4:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   13bf8:	13822a01 	orrne	r2, r2, #4096	; 0x1000
   13bfc:	15802108 	strne	r2, [r0, #264]	; 0x108
   13c00:	e1b033a3 	lsrs	r3, r3, #7
   13c04:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   13c08:	13833a02 	orrne	r3, r3, #8192	; 0x2000
   13c0c:	15803108 	strne	r3, [r0, #264]	; 0x108
   13c10:	e5d12007 	ldrb	r2, [r1, #7]
   13c14:	e5d13006 	ldrb	r3, [r1, #6]
   13c18:	e1833402 	orr	r3, r3, r2, lsl #8
   13c1c:	e1a03143 	asr	r3, r3, #2
   13c20:	e353007f 	cmp	r3, #127	; 0x7f
   13c24:	e5803058 	str	r3, [r0, #88]	; 0x58
   13c28:	c5903108 	ldrgt	r3, [r0, #264]	; 0x108
   13c2c:	c3833008 	orrgt	r3, r3, #8
   13c30:	c5803108 	strgt	r3, [r0, #264]	; 0x108
   13c34:	e5d12009 	ldrb	r2, [r1, #9]
   13c38:	e5d13008 	ldrb	r3, [r1, #8]
   13c3c:	e1833402 	orr	r3, r3, r2, lsl #8
   13c40:	e1a03143 	asr	r3, r3, #2
   13c44:	e353007f 	cmp	r3, #127	; 0x7f
   13c48:	e5803064 	str	r3, [r0, #100]	; 0x64
   13c4c:	c5903108 	ldrgt	r3, [r0, #264]	; 0x108
   13c50:	c3833010 	orrgt	r3, r3, #16
   13c54:	c5803108 	strgt	r3, [r0, #264]	; 0x108
   13c58:	e5d1200b 	ldrb	r2, [r1, #11]
   13c5c:	e5d1300a 	ldrb	r3, [r1, #10]
   13c60:	e1833402 	orr	r3, r3, r2, lsl #8
   13c64:	e6bf3073 	sxth	r3, r3
   13c68:	e2833902 	add	r3, r3, #32768	; 0x8000
   13c6c:	e1a03423 	lsr	r3, r3, #8
   13c70:	e5803028 	str	r3, [r0, #40]	; 0x28
   13c74:	e5d1200d 	ldrb	r2, [r1, #13]
   13c78:	e5d1300c 	ldrb	r3, [r1, #12]
   13c7c:	e1833402 	orr	r3, r3, r2, lsl #8
   13c80:	e6bf3073 	sxth	r3, r3
   13c84:	e2833902 	add	r3, r3, #32768	; 0x8000
   13c88:	e1a03423 	lsr	r3, r3, #8
   13c8c:	e26330ff 	rsb	r3, r3, #255	; 0xff
   13c90:	e5803034 	str	r3, [r0, #52]	; 0x34
   13c94:	e5d1200f 	ldrb	r2, [r1, #15]
   13c98:	e5d1300e 	ldrb	r3, [r1, #14]
   13c9c:	e1833402 	orr	r3, r3, r2, lsl #8
   13ca0:	e6bf3073 	sxth	r3, r3
   13ca4:	e2833902 	add	r3, r3, #32768	; 0x8000
   13ca8:	e1a03423 	lsr	r3, r3, #8
   13cac:	e5803040 	str	r3, [r0, #64]	; 0x40
   13cb0:	e5d13010 	ldrb	r3, [r1, #16]
   13cb4:	e5d12011 	ldrb	r2, [r1, #17]
   13cb8:	e1833402 	orr	r3, r3, r2, lsl #8
   13cbc:	e6bf3073 	sxth	r3, r3
   13cc0:	e2833902 	add	r3, r3, #32768	; 0x8000
   13cc4:	e1a03423 	lsr	r3, r3, #8
   13cc8:	e26330ff 	rsb	r3, r3, #255	; 0xff
   13ccc:	e580304c 	str	r3, [r0, #76]	; 0x4c
   13cd0:	e12fff1e 	bx	lr

00013cd4 <CUSBGamePadXboxOneDevice::~CUSBGamePadXboxOneDevice()>:
   13cd4:	e92d4010 	push	{r4, lr}
   13cd8:	e1a04000 	mov	r4, r0
   13cdc:	e59f300c 	ldr	r3, [pc, #12]	; 13cf0 <CUSBGamePadXboxOneDevice::~CUSBGamePadXboxOneDevice()+0x1c>
   13ce0:	e5803000 	str	r3, [r0]
   13ce4:	eb001498 	bl	18f4c <CUSBGamePadDevice::~CUSBGamePadDevice()>
   13ce8:	e1a00004 	mov	r0, r4
   13cec:	e8bd8010 	pop	{r4, pc}
   13cf0:	00025c14 	.word	0x00025c14

00013cf4 <CUSBGamePadXboxOneDevice::~CUSBGamePadXboxOneDevice()>:
   13cf4:	e92d4010 	push	{r4, lr}
   13cf8:	e1a04000 	mov	r4, r0
   13cfc:	e59f3018 	ldr	r3, [pc, #24]	; 13d1c <CUSBGamePadXboxOneDevice::~CUSBGamePadXboxOneDevice()+0x28>
   13d00:	e5803000 	str	r3, [r0]
   13d04:	eb001490 	bl	18f4c <CUSBGamePadDevice::~CUSBGamePadDevice()>
   13d08:	e1a00004 	mov	r0, r4
   13d0c:	e3a01f4d 	mov	r1, #308	; 0x134
   13d10:	eb003af5 	bl	228ec <operator delete(void*, unsigned int)>
   13d14:	e1a00004 	mov	r0, r4
   13d18:	e8bd8010 	pop	{r4, pc}
   13d1c:	00025c14 	.word	0x00025c14

00013d20 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)>:
   13d20:	e2513000 	subs	r3, r1, #0
   13d24:	012fff1e 	bxeq	lr
   13d28:	e92d4030 	push	{r4, r5, lr}
   13d2c:	e3520006 	cmp	r2, #6
   13d30:	e24dd014 	sub	sp, sp, #20
   13d34:	e1a04000 	mov	r4, r0
   13d38:	e1a0c003 	mov	ip, r3
   13d3c:	0a00000b 	beq	13d70 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x50>
   13d40:	e5903124 	ldr	r3, [r0, #292]	; 0x124
   13d44:	e2933000 	adds	r3, r3, #0
   13d48:	13a03001 	movne	r3, #1
   13d4c:	e3520012 	cmp	r2, #18
   13d50:	13a03000 	movne	r3, #0
   13d54:	e3530000 	cmp	r3, #0
   13d58:	0a000002 	beq	13d68 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x48>
   13d5c:	e5dc3000 	ldrb	r3, [ip]
   13d60:	e3530020 	cmp	r3, #32
   13d64:	0a00001b 	beq	13dd8 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0xb8>
   13d68:	e28dd014 	add	sp, sp, #20
   13d6c:	e8bd8030 	pop	{r4, r5, pc}
   13d70:	e5d33000 	ldrb	r3, [r3]
   13d74:	e3530007 	cmp	r3, #7
   13d78:	1afffffa 	bne	13d68 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x48>
   13d7c:	e5dc3001 	ldrb	r3, [ip, #1]
   13d80:	e3530030 	cmp	r3, #48	; 0x30
   13d84:	1afffff7 	bne	13d68 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x48>
   13d88:	e1a0e00d 	mov	lr, sp
   13d8c:	e59f506c 	ldr	r5, [pc, #108]	; 13e00 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0xe0>
   13d90:	e5dcc002 	ldrb	ip, [ip, #2]
   13d94:	e895000f 	ldm	r5, {r0, r1, r2, r3}
   13d98:	e8ae0007 	stmia	lr!, {r0, r1, r2}
   13d9c:	e1a00004 	mov	r0, r4
   13da0:	e5ce3000 	strb	r3, [lr]
   13da4:	e3a0200d 	mov	r2, #13
   13da8:	e3a03000 	mov	r3, #0
   13dac:	e1a0100d 	mov	r1, sp
   13db0:	e5cdc002 	strb	ip, [sp, #2]
   13db4:	ebfff75a 	bl	11b24 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)>
   13db8:	e3500000 	cmp	r0, #0
   13dbc:	1affffe9 	bne	13d68 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x48>
   13dc0:	eb0023e7 	bl	1cd64 <CLogger::Get()>
   13dc4:	e2851010 	add	r1, r5, #16
   13dc8:	e59f3034 	ldr	r3, [pc, #52]	; 13e04 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0xe4>
   13dcc:	e3a02001 	mov	r2, #1
   13dd0:	eb00258c 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13dd4:	eaffffe3 	b	13d68 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x48>
   13dd8:	e1a05000 	mov	r5, r0
   13ddc:	e4953024 	ldr	r3, [r5], #36	; 0x24
   13de0:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   13de4:	e12fff33 	blx	r3
   13de8:	e594012c 	ldr	r0, [r4, #300]	; 0x12c
   13dec:	e1a01005 	mov	r1, r5
   13df0:	e2400001 	sub	r0, r0, #1
   13df4:	e5943124 	ldr	r3, [r4, #292]	; 0x124
   13df8:	e12fff33 	blx	r3
   13dfc:	eaffffd9 	b	13d68 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x48>
   13e00:	00025c50 	.word	0x00025c50
   13e04:	00025c88 	.word	0x00025c88

00013e08 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)>:
   13e08:	e92d4010 	push	{r4, lr}
   13e0c:	e24dd010 	sub	sp, sp, #16
   13e10:	e1a0c00d 	mov	ip, sp
   13e14:	e1a04001 	mov	r4, r1
   13e18:	e59f307c 	ldr	r3, [pc, #124]	; 13e9c <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x94>
   13e1c:	e1a0e000 	mov	lr, r0
   13e20:	e893000f 	ldm	r3, {r0, r1, r2, r3}
   13e24:	e8ac0007 	stmia	ip!, {r0, r1, r2}
   13e28:	e3540001 	cmp	r4, #1
   13e2c:	e5cc3000 	strb	r3, [ip]
   13e30:	0a000016 	beq	13e90 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x88>
   13e34:	3a000003 	bcc	13e48 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x40>
   13e38:	e3540002 	cmp	r4, #2
   13e3c:	1a00000c 	bne	13e74 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x6c>
   13e40:	e3e03000 	mvn	r3, #0
   13e44:	e5cd3008 	strb	r3, [sp, #8]
   13e48:	e5dec130 	ldrb	ip, [lr, #304]	; 0x130
   13e4c:	e1a0100d 	mov	r1, sp
   13e50:	e28c3001 	add	r3, ip, #1
   13e54:	e5ce3130 	strb	r3, [lr, #304]	; 0x130
   13e58:	e1a0000e 	mov	r0, lr
   13e5c:	e3a03000 	mov	r3, #0
   13e60:	e3a0200d 	mov	r2, #13
   13e64:	e5cdc002 	strb	ip, [sp, #2]
   13e68:	ebfff706 	bl	11a88 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   13e6c:	e28dd010 	add	sp, sp, #16
   13e70:	e8bd8010 	pop	{r4, pc}
   13e74:	e3a020ee 	mov	r2, #238	; 0xee
   13e78:	e59f1020 	ldr	r1, [pc, #32]	; 13ea0 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x98>
   13e7c:	e59f0020 	ldr	r0, [pc, #32]	; 13ea4 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x9c>
   13e80:	eb0019c4 	bl	1a598 <assertion_failed>
   13e84:	e3a00000 	mov	r0, #0
   13e88:	e28dd010 	add	sp, sp, #16
   13e8c:	e8bd8010 	pop	{r4, pc}
   13e90:	e3e03000 	mvn	r3, #0
   13e94:	e5cd3009 	strb	r3, [sp, #9]
   13e98:	eaffffea 	b	13e48 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x40>
   13e9c:	00025c70 	.word	0x00025c70
   13ea0:	00025c9c 	.word	0x00025c9c
   13ea4:	00024970 	.word	0x00024970

00013ea8 <CUSBGamePadXboxOneDevice::CUSBGamePadXboxOneDevice(CUSBFunction*)>:
   13ea8:	e92d4010 	push	{r4, lr}
   13eac:	e1a04000 	mov	r4, r0
   13eb0:	eb001413 	bl	18f04 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   13eb4:	e3a02000 	mov	r2, #0
   13eb8:	e59f300c 	ldr	r3, [pc, #12]	; 13ecc <CUSBGamePadXboxOneDevice::CUSBGamePadXboxOneDevice(CUSBFunction*)+0x24>
   13ebc:	e5c42130 	strb	r2, [r4, #304]	; 0x130
   13ec0:	e5843000 	str	r3, [r4]
   13ec4:	e1a00004 	mov	r0, r4
   13ec8:	e8bd8010 	pop	{r4, pc}
   13ecc:	00025c14 	.word	0x00025c14

00013ed0 <CUSBGamePadXboxOneDevice::Configure()>:
   13ed0:	e3a02040 	mov	r2, #64	; 0x40
   13ed4:	e92d4070 	push	{r4, r5, r6, lr}
   13ed8:	e2803f4a 	add	r3, r0, #296	; 0x128
   13edc:	e24dd008 	sub	sp, sp, #8
   13ee0:	e1c320b0 	strh	r2, [r3]
   13ee4:	e1a04000 	mov	r4, r0
   13ee8:	eb0013d7 	bl	18e4c <CUSBGamePadDevice::Configure()>
   13eec:	e2505000 	subs	r5, r0, #0
   13ef0:	0a00002a 	beq	13fa0 <CUSBGamePadXboxOneDevice::Configure()+0xd0>
   13ef4:	e3a03000 	mov	r3, #0
   13ef8:	e3a020ff 	mov	r2, #255	; 0xff
   13efc:	e3a01010 	mov	r1, #16
   13f00:	e3a0c006 	mov	ip, #6
   13f04:	e59f60b4 	ldr	r6, [pc, #180]	; 13fc0 <CUSBGamePadXboxOneDevice::Configure()+0xf0>
   13f08:	e5841104 	str	r1, [r4, #260]	; 0x104
   13f0c:	e5842030 	str	r2, [r4, #48]	; 0x30
   13f10:	e8960003 	ldm	r6, {r0, r1}
   13f14:	e584203c 	str	r2, [r4, #60]	; 0x3c
   13f18:	e58d0000 	str	r0, [sp]
   13f1c:	e5cd1004 	strb	r1, [sp, #4]
   13f20:	e5842048 	str	r2, [r4, #72]	; 0x48
   13f24:	e5842054 	str	r2, [r4, #84]	; 0x54
   13f28:	e5842060 	str	r2, [r4, #96]	; 0x60
   13f2c:	e584206c 	str	r2, [r4, #108]	; 0x6c
   13f30:	e584c024 	str	ip, [r4, #36]	; 0x24
   13f34:	e584302c 	str	r3, [r4, #44]	; 0x2c
   13f38:	e5843038 	str	r3, [r4, #56]	; 0x38
   13f3c:	e5843044 	str	r3, [r4, #68]	; 0x44
   13f40:	e5843050 	str	r3, [r4, #80]	; 0x50
   13f44:	e584305c 	str	r3, [r4, #92]	; 0x5c
   13f48:	e5843068 	str	r3, [r4, #104]	; 0x68
   13f4c:	e58430e8 	str	r3, [r4, #232]	; 0xe8
   13f50:	e3a02005 	mov	r2, #5
   13f54:	e1a0100d 	mov	r1, sp
   13f58:	e1a00004 	mov	r0, r4
   13f5c:	ebfff6c9 	bl	11a88 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   13f60:	e2505000 	subs	r5, r0, #0
   13f64:	0a000005 	beq	13f80 <CUSBGamePadXboxOneDevice::Configure()+0xb0>
   13f68:	e1a00004 	mov	r0, r4
   13f6c:	ebfff756 	bl	11ccc <CUSBHIDDevice::StartRequest()>
   13f70:	e1a05000 	mov	r5, r0
   13f74:	e1a00005 	mov	r0, r5
   13f78:	e28dd008 	add	sp, sp, #8
   13f7c:	e8bd8070 	pop	{r4, r5, r6, pc}
   13f80:	eb002377 	bl	1cd64 <CLogger::Get()>
   13f84:	e2461020 	sub	r1, r6, #32
   13f88:	e59f3034 	ldr	r3, [pc, #52]	; 13fc4 <CUSBGamePadXboxOneDevice::Configure()+0xf4>
   13f8c:	e3a02001 	mov	r2, #1
   13f90:	eb00251c 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13f94:	e1a00005 	mov	r0, r5
   13f98:	e28dd008 	add	sp, sp, #8
   13f9c:	e8bd8070 	pop	{r4, r5, r6, pc}
   13fa0:	eb00236f 	bl	1cd64 <CLogger::Get()>
   13fa4:	e59f301c 	ldr	r3, [pc, #28]	; 13fc8 <CUSBGamePadXboxOneDevice::Configure()+0xf8>
   13fa8:	e3a02001 	mov	r2, #1
   13fac:	e59f1018 	ldr	r1, [pc, #24]	; 13fcc <CUSBGamePadXboxOneDevice::Configure()+0xfc>
   13fb0:	eb002514 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13fb4:	e1a00005 	mov	r0, r5
   13fb8:	e28dd008 	add	sp, sp, #8
   13fbc:	e8bd8070 	pop	{r4, r5, r6, pc}
   13fc0:	00025c80 	.word	0x00025c80
   13fc4:	00025cb4 	.word	0x00025cb4
   13fc8:	00025924 	.word	0x00025924
   13fcc:	00025c60 	.word	0x00025c60

00013fd0 <CUSBGamePadXboxOneDevice::GetProperties()>:
   13fd0:	e3a00009 	mov	r0, #9
   13fd4:	e12fff1e 	bx	lr

00013fd8 <CUSBGamePadSwitchProDevice::~CUSBGamePadSwitchProDevice()>:
   13fd8:	e92d4010 	push	{r4, lr}
   13fdc:	e1a04000 	mov	r4, r0
   13fe0:	e59f300c 	ldr	r3, [pc, #12]	; 13ff4 <CUSBGamePadSwitchProDevice::~CUSBGamePadSwitchProDevice()+0x1c>
   13fe4:	e5803000 	str	r3, [r0]
   13fe8:	eb0013d7 	bl	18f4c <CUSBGamePadDevice::~CUSBGamePadDevice()>
   13fec:	e1a00004 	mov	r0, r4
   13ff0:	e8bd8010 	pop	{r4, pc}
   13ff4:	00025cd4 	.word	0x00025cd4

00013ff8 <CUSBGamePadSwitchProDevice::~CUSBGamePadSwitchProDevice()>:
   13ff8:	e92d4010 	push	{r4, lr}
   13ffc:	e1a04000 	mov	r4, r0
   14000:	e59f3018 	ldr	r3, [pc, #24]	; 14020 <CUSBGamePadSwitchProDevice::~CUSBGamePadSwitchProDevice()+0x28>
   14004:	e5803000 	str	r3, [r0]
   14008:	eb0013cf 	bl	18f4c <CUSBGamePadDevice::~CUSBGamePadDevice()>
   1400c:	e1a00004 	mov	r0, r4
   14010:	e3a01f4d 	mov	r1, #308	; 0x134
   14014:	eb003a34 	bl	228ec <operator delete(void*, unsigned int)>
   14018:	e1a00004 	mov	r0, r4
   1401c:	e8bd8010 	pop	{r4, pc}
   14020:	00025cd4 	.word	0x00025cd4

00014024 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)>:
   14024:	e5d13000 	ldrb	r3, [r1]
   14028:	e3530030 	cmp	r3, #48	; 0x30
   1402c:	1a00005e 	bne	141ac <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x188>
   14030:	e3a02000 	mov	r2, #0
   14034:	e5d13003 	ldrb	r3, [r1, #3]
   14038:	e5802108 	str	r2, [r0, #264]	; 0x108
   1403c:	e3130001 	tst	r3, #1
   14040:	13a02080 	movne	r2, #128	; 0x80
   14044:	15802108 	strne	r2, [r0, #264]	; 0x108
   14048:	e3130002 	tst	r3, #2
   1404c:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   14050:	13822b01 	orrne	r2, r2, #1024	; 0x400
   14054:	15802108 	strne	r2, [r0, #264]	; 0x108
   14058:	e3130004 	tst	r3, #4
   1405c:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   14060:	13822c01 	orrne	r2, r2, #256	; 0x100
   14064:	15802108 	strne	r2, [r0, #264]	; 0x108
   14068:	e3130008 	tst	r3, #8
   1406c:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   14070:	13822c02 	orrne	r2, r2, #512	; 0x200
   14074:	15802108 	strne	r2, [r0, #264]	; 0x108
   14078:	e3130040 	tst	r3, #64	; 0x40
   1407c:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   14080:	13822040 	orrne	r2, r2, #64	; 0x40
   14084:	15802108 	strne	r2, [r0, #264]	; 0x108
   14088:	e3130080 	tst	r3, #128	; 0x80
   1408c:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   14090:	13833010 	orrne	r3, r3, #16
   14094:	15803108 	strne	r3, [r0, #264]	; 0x108
   14098:	e5d13004 	ldrb	r3, [r1, #4]
   1409c:	e3130001 	tst	r3, #1
   140a0:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   140a4:	13822702 	orrne	r2, r2, #524288	; 0x80000
   140a8:	15802108 	strne	r2, [r0, #264]	; 0x108
   140ac:	e3130002 	tst	r3, #2
   140b0:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   140b4:	13822601 	orrne	r2, r2, #1048576	; 0x100000
   140b8:	15802108 	strne	r2, [r0, #264]	; 0x108
   140bc:	e3130004 	tst	r3, #4
   140c0:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   140c4:	13822a02 	orrne	r2, r2, #8192	; 0x2000
   140c8:	15802108 	strne	r2, [r0, #264]	; 0x108
   140cc:	e3130008 	tst	r3, #8
   140d0:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   140d4:	13822a01 	orrne	r2, r2, #4096	; 0x1000
   140d8:	15802108 	strne	r2, [r0, #264]	; 0x108
   140dc:	e3130010 	tst	r3, #16
   140e0:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   140e4:	13822001 	orrne	r2, r2, #1
   140e8:	15802108 	strne	r2, [r0, #264]	; 0x108
   140ec:	e3130020 	tst	r3, #32
   140f0:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   140f4:	13833b02 	orrne	r3, r3, #2048	; 0x800
   140f8:	15803108 	strne	r3, [r0, #264]	; 0x108
   140fc:	e5d13005 	ldrb	r3, [r1, #5]
   14100:	e3130001 	tst	r3, #1
   14104:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   14108:	13822802 	orrne	r2, r2, #131072	; 0x20000
   1410c:	15802108 	strne	r2, [r0, #264]	; 0x108
   14110:	e3130002 	tst	r3, #2
   14114:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   14118:	13822902 	orrne	r2, r2, #32768	; 0x8000
   1411c:	15802108 	strne	r2, [r0, #264]	; 0x108
   14120:	e3130004 	tst	r3, #4
   14124:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   14128:	13822801 	orrne	r2, r2, #65536	; 0x10000
   1412c:	15802108 	strne	r2, [r0, #264]	; 0x108
   14130:	e3130008 	tst	r3, #8
   14134:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   14138:	13822701 	orrne	r2, r2, #262144	; 0x40000
   1413c:	15802108 	strne	r2, [r0, #264]	; 0x108
   14140:	e3130040 	tst	r3, #64	; 0x40
   14144:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   14148:	13822020 	orrne	r2, r2, #32
   1414c:	15802108 	strne	r2, [r0, #264]	; 0x108
   14150:	e3130080 	tst	r3, #128	; 0x80
   14154:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   14158:	13833008 	orrne	r3, r3, #8
   1415c:	15803108 	strne	r3, [r0, #264]	; 0x108
   14160:	e5d12007 	ldrb	r2, [r1, #7]
   14164:	e5d13006 	ldrb	r3, [r1, #6]
   14168:	e1833402 	orr	r3, r3, r2, lsl #8
   1416c:	e1a03243 	asr	r3, r3, #4
   14170:	e6ef3073 	uxtb	r3, r3
   14174:	e5803028 	str	r3, [r0, #40]	; 0x28
   14178:	e5d13008 	ldrb	r3, [r1, #8]
   1417c:	e26330ff 	rsb	r3, r3, #255	; 0xff
   14180:	e5803034 	str	r3, [r0, #52]	; 0x34
   14184:	e5d13009 	ldrb	r3, [r1, #9]
   14188:	e5d1200a 	ldrb	r2, [r1, #10]
   1418c:	e1833402 	orr	r3, r3, r2, lsl #8
   14190:	e1a03243 	asr	r3, r3, #4
   14194:	e6ef3073 	uxtb	r3, r3
   14198:	e5803040 	str	r3, [r0, #64]	; 0x40
   1419c:	e5d1300b 	ldrb	r3, [r1, #11]
   141a0:	e26330ff 	rsb	r3, r3, #255	; 0xff
   141a4:	e580304c 	str	r3, [r0, #76]	; 0x4c
   141a8:	e12fff1e 	bx	lr
   141ac:	e92d4010 	push	{r4, lr}
   141b0:	e1a04001 	mov	r4, r1
   141b4:	e24dd008 	sub	sp, sp, #8
   141b8:	eb0022e9 	bl	1cd64 <CLogger::Get()>
   141bc:	e5d42000 	ldrb	r2, [r4]
   141c0:	e59f3014 	ldr	r3, [pc, #20]	; 141dc <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x1b8>
   141c4:	e58d2000 	str	r2, [sp]
   141c8:	e59f1010 	ldr	r1, [pc, #16]	; 141e0 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x1bc>
   141cc:	e3a02003 	mov	r2, #3
   141d0:	eb00248c 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   141d4:	e28dd008 	add	sp, sp, #8
   141d8:	e8bd8010 	pop	{r4, pc}
   141dc:	00025d38 	.word	0x00025d38
   141e0:	00025d10 	.word	0x00025d10

000141e4 <CUSBGamePadSwitchProDevice::SetLEDMode(TGamePadLEDMode)>:
   141e4:	e92d4070 	push	{r4, r5, r6, lr}
   141e8:	e1a05000 	mov	r5, r0
   141ec:	e1a06001 	mov	r6, r1
   141f0:	e5d03131 	ldrb	r3, [r0, #305]	; 0x131
   141f4:	e24dd010 	sub	sp, sp, #16
   141f8:	e59f4058 	ldr	r4, [pc, #88]	; 14258 <CUSBGamePadSwitchProDevice::SetLEDMode(TGamePadLEDMode)+0x74>
   141fc:	e2832001 	add	r2, r3, #1
   14200:	e28de004 	add	lr, sp, #4
   14204:	e203c00f 	and	ip, r3, #15
   14208:	e5c02131 	strb	r2, [r0, #305]	; 0x131
   1420c:	e3a03000 	mov	r3, #0
   14210:	e8940007 	ldm	r4, {r0, r1, r2}
   14214:	e88e0007 	stm	lr, {r0, r1, r2}
   14218:	e1a00005 	mov	r0, r5
   1421c:	e1a0100e 	mov	r1, lr
   14220:	e3a0200c 	mov	r2, #12
   14224:	e5cdc005 	strb	ip, [sp, #5]
   14228:	e5cd600f 	strb	r6, [sp, #15]
   1422c:	ebfff615 	bl	11a88 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   14230:	e2505000 	subs	r5, r0, #0
   14234:	1a000004 	bne	1424c <CUSBGamePadSwitchProDevice::SetLEDMode(TGamePadLEDMode)+0x68>
   14238:	eb0022c9 	bl	1cd64 <CLogger::Get()>
   1423c:	e2441010 	sub	r1, r4, #16
   14240:	e59f3014 	ldr	r3, [pc, #20]	; 1425c <CUSBGamePadSwitchProDevice::SetLEDMode(TGamePadLEDMode)+0x78>
   14244:	e3a02001 	mov	r2, #1
   14248:	eb00246e 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1424c:	e1a00005 	mov	r0, r5
   14250:	e28dd010 	add	sp, sp, #16
   14254:	e8bd8070 	pop	{r4, r5, r6, pc}
   14258:	00025d20 	.word	0x00025d20
   1425c:	00025d54 	.word	0x00025d54

00014260 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)>:
   14260:	e92d4010 	push	{r4, lr}
   14264:	e1a0e001 	mov	lr, r1
   14268:	e24dd010 	sub	sp, sp, #16
   1426c:	e59f20cc 	ldr	r2, [pc, #204]	; 14340 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0xe0>
   14270:	e28d3004 	add	r3, sp, #4
   14274:	e1a0c000 	mov	ip, r0
   14278:	e8920007 	ldm	r2, {r0, r1, r2}
   1427c:	e8a30003 	stmia	r3!, {r0, r1}
   14280:	e35e0001 	cmp	lr, #1
   14284:	e1c320b0 	strh	r2, [r3]
   14288:	0a000023 	beq	1431c <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0xbc>
   1428c:	3a000007 	bcc	142b0 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0x50>
   14290:	e35e0002 	cmp	lr, #2
   14294:	1a00001c 	bne	1430c <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0xac>
   14298:	e3a01020 	mov	r1, #32
   1429c:	e3a02062 	mov	r2, #98	; 0x62
   142a0:	e3e03000 	mvn	r3, #0
   142a4:	e5cd1007 	strb	r1, [sp, #7]
   142a8:	e5cd2008 	strb	r2, [sp, #8]
   142ac:	e5cd3009 	strb	r3, [sp, #9]
   142b0:	e5dc3131 	ldrb	r3, [ip, #305]	; 0x131
   142b4:	e1a0000c 	mov	r0, ip
   142b8:	e2832001 	add	r2, r3, #1
   142bc:	e5cc2131 	strb	r2, [ip, #305]	; 0x131
   142c0:	e28d1004 	add	r1, sp, #4
   142c4:	e203c00f 	and	ip, r3, #15
   142c8:	e3a0200a 	mov	r2, #10
   142cc:	e3a03000 	mov	r3, #0
   142d0:	e5cdc005 	strb	ip, [sp, #5]
   142d4:	ebfff5eb 	bl	11a88 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   142d8:	e2504000 	subs	r4, r0, #0
   142dc:	0a000002 	beq	142ec <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0x8c>
   142e0:	e1a00004 	mov	r0, r4
   142e4:	e28dd010 	add	sp, sp, #16
   142e8:	e8bd8010 	pop	{r4, pc}
   142ec:	eb00229c 	bl	1cd64 <CLogger::Get()>
   142f0:	e59f304c 	ldr	r3, [pc, #76]	; 14344 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0xe4>
   142f4:	e3a02001 	mov	r2, #1
   142f8:	e59f1048 	ldr	r1, [pc, #72]	; 14348 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0xe8>
   142fc:	eb002441 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14300:	e1a00004 	mov	r0, r4
   14304:	e28dd010 	add	sp, sp, #16
   14308:	e8bd8010 	pop	{r4, pc}
   1430c:	e3a04001 	mov	r4, #1
   14310:	e1a00004 	mov	r0, r4
   14314:	e28dd010 	add	sp, sp, #16
   14318:	e8bd8010 	pop	{r4, pc}
   1431c:	e3e00067 	mvn	r0, #103	; 0x67
   14320:	e3a01020 	mov	r1, #32
   14324:	e3a02062 	mov	r2, #98	; 0x62
   14328:	e3e03000 	mvn	r3, #0
   1432c:	e5cd000a 	strb	r0, [sp, #10]
   14330:	e5cd100b 	strb	r1, [sp, #11]
   14334:	e5cd200c 	strb	r2, [sp, #12]
   14338:	e5cd300d 	strb	r3, [sp, #13]
   1433c:	eaffffdb 	b	142b0 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0x50>
   14340:	00025d2c 	.word	0x00025d2c
   14344:	00025d68 	.word	0x00025d68
   14348:	00025d10 	.word	0x00025d10

0001434c <CUSBGamePadSwitchProDevice::CUSBGamePadSwitchProDevice(CUSBFunction*)>:
   1434c:	e92d4010 	push	{r4, lr}
   14350:	e1a04000 	mov	r4, r0
   14354:	eb0012ea 	bl	18f04 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   14358:	e3a03000 	mov	r3, #0
   1435c:	e59f2024 	ldr	r2, [pc, #36]	; 14388 <CUSBGamePadSwitchProDevice::CUSBGamePadSwitchProDevice(CUSBFunction*)+0x3c>
   14360:	e1a00004 	mov	r0, r4
   14364:	e5842000 	str	r2, [r4]
   14368:	e3a01003 	mov	r1, #3
   1436c:	e1a02003 	mov	r2, r3
   14370:	eb000207 	bl	14b94 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)>
   14374:	e3a03000 	mov	r3, #0
   14378:	e5c40130 	strb	r0, [r4, #304]	; 0x130
   1437c:	e5c43131 	strb	r3, [r4, #305]	; 0x131
   14380:	e1a00004 	mov	r0, r4
   14384:	e8bd8010 	pop	{r4, pc}
   14388:	00025cd4 	.word	0x00025cd4

0001438c <CUSBGamePadSwitchProDevice::Configure()>:
   1438c:	e92d4bf0 	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14390:	e5d05130 	ldrb	r5, [r0, #304]	; 0x130
   14394:	e28db01c 	add	fp, sp, #28
   14398:	e3550000 	cmp	r5, #0
   1439c:	0a00003a 	beq	1448c <CUSBGamePadSwitchProDevice::Configure()+0x100>
   143a0:	e3a03040 	mov	r3, #64	; 0x40
   143a4:	e2807f4a 	add	r7, r0, #296	; 0x128
   143a8:	e1c730b0 	strh	r3, [r7]
   143ac:	e1a04000 	mov	r4, r0
   143b0:	eb0012a5 	bl	18e4c <CUSBGamePadDevice::Configure()>
   143b4:	e2505000 	subs	r5, r0, #0
   143b8:	0a000038 	beq	144a0 <CUSBGamePadSwitchProDevice::Configure()+0x114>
   143bc:	e3a03012 	mov	r3, #18
   143c0:	e3a06000 	mov	r6, #0
   143c4:	e3a000ff 	mov	r0, #255	; 0xff
   143c8:	e3a0c004 	mov	ip, #4
   143cc:	e1d720b0 	ldrh	r2, [r7]
   143d0:	e5843104 	str	r3, [r4, #260]	; 0x104
   143d4:	e2823007 	add	r3, r2, #7
   143d8:	e3c33007 	bic	r3, r3, #7
   143dc:	e04dd003 	sub	sp, sp, r3
   143e0:	e1a0100d 	mov	r1, sp
   143e4:	e1a03006 	mov	r3, r6
   143e8:	e584c024 	str	ip, [r4, #36]	; 0x24
   143ec:	e5840030 	str	r0, [r4, #48]	; 0x30
   143f0:	e584003c 	str	r0, [r4, #60]	; 0x3c
   143f4:	e5840048 	str	r0, [r4, #72]	; 0x48
   143f8:	e5840054 	str	r0, [r4, #84]	; 0x54
   143fc:	e58460e8 	str	r6, [r4, #232]	; 0xe8
   14400:	e584602c 	str	r6, [r4, #44]	; 0x2c
   14404:	e5846038 	str	r6, [r4, #56]	; 0x38
   14408:	e5846044 	str	r6, [r4, #68]	; 0x44
   1440c:	e5846050 	str	r6, [r4, #80]	; 0x50
   14410:	e1a00004 	mov	r0, r4
   14414:	ebfff5fc 	bl	11c0c <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>
   14418:	e1a03006 	mov	r3, r6
   1441c:	e3a02002 	mov	r2, #2
   14420:	e59f1200 	ldr	r1, [pc, #512]	; 14628 <CUSBGamePadSwitchProDevice::Configure()+0x29c>
   14424:	e1a00004 	mov	r0, r4
   14428:	ebfff596 	bl	11a88 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   1442c:	e2505000 	subs	r5, r0, #0
   14430:	0a000022 	beq	144c0 <CUSBGamePadSwitchProDevice::Configure()+0x134>
   14434:	e1a03006 	mov	r3, r6
   14438:	e1d720b0 	ldrh	r2, [r7]
   1443c:	e1a0100d 	mov	r1, sp
   14440:	e1a00004 	mov	r0, r4
   14444:	ebfff5f0 	bl	11c0c <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>
   14448:	e3500000 	cmp	r0, #0
   1444c:	da00003e 	ble	1454c <CUSBGamePadSwitchProDevice::Configure()+0x1c0>
   14450:	e5dd3000 	ldrb	r3, [sp]
   14454:	e3530081 	cmp	r3, #129	; 0x81
   14458:	1a000002 	bne	14468 <CUSBGamePadSwitchProDevice::Configure()+0xdc>
   1445c:	e5dd3001 	ldrb	r3, [sp, #1]
   14460:	e3530003 	cmp	r3, #3
   14464:	0a00001d 	beq	144e0 <CUSBGamePadSwitchProDevice::Configure()+0x154>
   14468:	eb00223d 	bl	1cd64 <CLogger::Get()>
   1446c:	e59f31b8 	ldr	r3, [pc, #440]	; 1462c <CUSBGamePadSwitchProDevice::Configure()+0x2a0>
   14470:	e3a02001 	mov	r2, #1
   14474:	e59f11b4 	ldr	r1, [pc, #436]	; 14630 <CUSBGamePadSwitchProDevice::Configure()+0x2a4>
   14478:	eb0023e2 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1447c:	e3a05000 	mov	r5, #0
   14480:	e1a00005 	mov	r0, r5
   14484:	e24bd01c 	sub	sp, fp, #28
   14488:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1448c:	e59f119c 	ldr	r1, [pc, #412]	; 14630 <CUSBGamePadSwitchProDevice::Configure()+0x2a4>
   14490:	eb0001a3 	bl	14b24 <CUSBFunction::ConfigurationError(char const*) const>
   14494:	e1a00005 	mov	r0, r5
   14498:	e24bd01c 	sub	sp, fp, #28
   1449c:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   144a0:	eb00222f 	bl	1cd64 <CLogger::Get()>
   144a4:	e59f3188 	ldr	r3, [pc, #392]	; 14634 <CUSBGamePadSwitchProDevice::Configure()+0x2a8>
   144a8:	e3a02001 	mov	r2, #1
   144ac:	e59f117c 	ldr	r1, [pc, #380]	; 14630 <CUSBGamePadSwitchProDevice::Configure()+0x2a4>
   144b0:	eb0023d4 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   144b4:	e1a00005 	mov	r0, r5
   144b8:	e24bd01c 	sub	sp, fp, #28
   144bc:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   144c0:	eb002227 	bl	1cd64 <CLogger::Get()>
   144c4:	e59f3160 	ldr	r3, [pc, #352]	; 1462c <CUSBGamePadSwitchProDevice::Configure()+0x2a0>
   144c8:	e3a02001 	mov	r2, #1
   144cc:	e59f115c 	ldr	r1, [pc, #348]	; 14630 <CUSBGamePadSwitchProDevice::Configure()+0x2a4>
   144d0:	eb0023cc 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   144d4:	e1a00005 	mov	r0, r5
   144d8:	e24bd01c 	sub	sp, fp, #28
   144dc:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   144e0:	e1a03006 	mov	r3, r6
   144e4:	e3a02002 	mov	r2, #2
   144e8:	e59f1148 	ldr	r1, [pc, #328]	; 14638 <CUSBGamePadSwitchProDevice::Configure()+0x2ac>
   144ec:	e1a00004 	mov	r0, r4
   144f0:	ebfff564 	bl	11a88 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   144f4:	e2505000 	subs	r5, r0, #0
   144f8:	0a00001a 	beq	14568 <CUSBGamePadSwitchProDevice::Configure()+0x1dc>
   144fc:	e1a03006 	mov	r3, r6
   14500:	e1d720b0 	ldrh	r2, [r7]
   14504:	e1a0100d 	mov	r1, sp
   14508:	e1a00004 	mov	r0, r4
   1450c:	ebfff5be 	bl	11c0c <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>
   14510:	e3500000 	cmp	r0, #0
   14514:	da000030 	ble	145dc <CUSBGamePadSwitchProDevice::Configure()+0x250>
   14518:	e5dd3000 	ldrb	r3, [sp]
   1451c:	e3530081 	cmp	r3, #129	; 0x81
   14520:	1a000002 	bne	14530 <CUSBGamePadSwitchProDevice::Configure()+0x1a4>
   14524:	e5dd3001 	ldrb	r3, [sp, #1]
   14528:	e3530002 	cmp	r3, #2
   1452c:	0a000013 	beq	14580 <CUSBGamePadSwitchProDevice::Configure()+0x1f4>
   14530:	eb00220b 	bl	1cd64 <CLogger::Get()>
   14534:	e59f3100 	ldr	r3, [pc, #256]	; 1463c <CUSBGamePadSwitchProDevice::Configure()+0x2b0>
   14538:	e3a02001 	mov	r2, #1
   1453c:	e59f10ec 	ldr	r1, [pc, #236]	; 14630 <CUSBGamePadSwitchProDevice::Configure()+0x2a4>
   14540:	eb0023b0 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14544:	e3a05000 	mov	r5, #0
   14548:	eaffffcc 	b	14480 <CUSBGamePadSwitchProDevice::Configure()+0xf4>
   1454c:	eb002204 	bl	1cd64 <CLogger::Get()>
   14550:	e59f30e8 	ldr	r3, [pc, #232]	; 14640 <CUSBGamePadSwitchProDevice::Configure()+0x2b4>
   14554:	e3a02001 	mov	r2, #1
   14558:	e59f10d0 	ldr	r1, [pc, #208]	; 14630 <CUSBGamePadSwitchProDevice::Configure()+0x2a4>
   1455c:	e1a05006 	mov	r5, r6
   14560:	eb0023a8 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14564:	eaffffc5 	b	14480 <CUSBGamePadSwitchProDevice::Configure()+0xf4>
   14568:	eb0021fd 	bl	1cd64 <CLogger::Get()>
   1456c:	e59f30c8 	ldr	r3, [pc, #200]	; 1463c <CUSBGamePadSwitchProDevice::Configure()+0x2b0>
   14570:	e3a02001 	mov	r2, #1
   14574:	e59f10b4 	ldr	r1, [pc, #180]	; 14630 <CUSBGamePadSwitchProDevice::Configure()+0x2a4>
   14578:	eb0023a2 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1457c:	eaffffbf 	b	14480 <CUSBGamePadSwitchProDevice::Configure()+0xf4>
   14580:	e3a03000 	mov	r3, #0
   14584:	e3a02002 	mov	r2, #2
   14588:	e59f10b4 	ldr	r1, [pc, #180]	; 14644 <CUSBGamePadSwitchProDevice::Configure()+0x2b8>
   1458c:	e1a00004 	mov	r0, r4
   14590:	ebfff53c 	bl	11a88 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   14594:	e2505000 	subs	r5, r0, #0
   14598:	0a000016 	beq	145f8 <CUSBGamePadSwitchProDevice::Configure()+0x26c>
   1459c:	e5943000 	ldr	r3, [r4]
   145a0:	e5d4112c 	ldrb	r1, [r4, #300]	; 0x12c
   145a4:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   145a8:	e1a00004 	mov	r0, r4
   145ac:	e12fff33 	blx	r3
   145b0:	e1d720b0 	ldrh	r2, [r7]
   145b4:	e1a0100d 	mov	r1, sp
   145b8:	e3a03000 	mov	r3, #0
   145bc:	e1a00004 	mov	r0, r4
   145c0:	ebfff591 	bl	11c0c <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>
   145c4:	e3500000 	cmp	r0, #0
   145c8:	da000010 	ble	14610 <CUSBGamePadSwitchProDevice::Configure()+0x284>
   145cc:	e1a00004 	mov	r0, r4
   145d0:	ebfff5bd 	bl	11ccc <CUSBHIDDevice::StartRequest()>
   145d4:	e1a05000 	mov	r5, r0
   145d8:	eaffffa8 	b	14480 <CUSBGamePadSwitchProDevice::Configure()+0xf4>
   145dc:	eb0021e0 	bl	1cd64 <CLogger::Get()>
   145e0:	e59f3060 	ldr	r3, [pc, #96]	; 14648 <CUSBGamePadSwitchProDevice::Configure()+0x2bc>
   145e4:	e3a02001 	mov	r2, #1
   145e8:	e59f1040 	ldr	r1, [pc, #64]	; 14630 <CUSBGamePadSwitchProDevice::Configure()+0x2a4>
   145ec:	e1a05006 	mov	r5, r6
   145f0:	eb002384 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   145f4:	eaffffa1 	b	14480 <CUSBGamePadSwitchProDevice::Configure()+0xf4>
   145f8:	eb0021d9 	bl	1cd64 <CLogger::Get()>
   145fc:	e59f3048 	ldr	r3, [pc, #72]	; 1464c <CUSBGamePadSwitchProDevice::Configure()+0x2c0>
   14600:	e3a02001 	mov	r2, #1
   14604:	e59f1024 	ldr	r1, [pc, #36]	; 14630 <CUSBGamePadSwitchProDevice::Configure()+0x2a4>
   14608:	eb00237e 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1460c:	eaffff9b 	b	14480 <CUSBGamePadSwitchProDevice::Configure()+0xf4>
   14610:	eb0021d3 	bl	1cd64 <CLogger::Get()>
   14614:	e59f3034 	ldr	r3, [pc, #52]	; 14650 <CUSBGamePadSwitchProDevice::Configure()+0x2c4>
   14618:	e3a02001 	mov	r2, #1
   1461c:	e59f100c 	ldr	r1, [pc, #12]	; 14630 <CUSBGamePadSwitchProDevice::Configure()+0x2a4>
   14620:	eb002378 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14624:	eaffffe8 	b	145cc <CUSBGamePadSwitchProDevice::Configure()+0x240>
   14628:	0002b010 	.word	0x0002b010
   1462c:	00025d80 	.word	0x00025d80
   14630:	00025d10 	.word	0x00025d10
   14634:	00025924 	.word	0x00025924
   14638:	0002b014 	.word	0x0002b014
   1463c:	00025dc0 	.word	0x00025dc0
   14640:	00025da0 	.word	0x00025da0
   14644:	0002b018 	.word	0x0002b018
   14648:	00025ddc 	.word	0x00025ddc
   1464c:	00025df8 	.word	0x00025df8
   14650:	00025e18 	.word	0x00025e18

00014654 <CUSBGamePadSwitchProDevice::GetProperties()>:
   14654:	e3a0004b 	mov	r0, #75	; 0x4b
   14658:	e12fff1e 	bx	lr

0001465c <CUSBFunction::Initialize()>:
   1465c:	e3a00001 	mov	r0, #1
   14660:	e12fff1e 	bx	lr

00014664 <CUSBFunction::~CUSBFunction()>:
   14664:	e3a03000 	mov	r3, #0
   14668:	e92d4070 	push	{r4, r5, r6, lr}
   1466c:	e5905008 	ldr	r5, [r0, #8]
   14670:	e59f2040 	ldr	r2, [pc, #64]	; 146b8 <CUSBFunction::~CUSBFunction()+0x54>
   14674:	e1550003 	cmp	r5, r3
   14678:	e1a04000 	mov	r4, r0
   1467c:	e5802000 	str	r2, [r0]
   14680:	e580300c 	str	r3, [r0, #12]
   14684:	0a000004 	beq	1469c <CUSBFunction::~CUSBFunction()+0x38>
   14688:	e1a00005 	mov	r0, r5
   1468c:	eb000895 	bl	168e8 <CUSBConfigurationParser::~CUSBConfigurationParser()>
   14690:	e1a00005 	mov	r0, r5
   14694:	e3a0101c 	mov	r1, #28
   14698:	eb003893 	bl	228ec <operator delete(void*, unsigned int)>
   1469c:	e3a03000 	mov	r3, #0
   146a0:	e1a00004 	mov	r0, r4
   146a4:	e5843008 	str	r3, [r4, #8]
   146a8:	e5843004 	str	r3, [r4, #4]
   146ac:	eb0019b5 	bl	1ad88 <CDevice::~CDevice()>
   146b0:	e1a00004 	mov	r0, r4
   146b4:	e8bd8070 	pop	{r4, r5, r6, pc}
   146b8:	00025e3c 	.word	0x00025e3c

000146bc <CUSBFunction::~CUSBFunction()>:
   146bc:	e92d4010 	push	{r4, lr}
   146c0:	e1a04000 	mov	r4, r0
   146c4:	ebffffe6 	bl	14664 <CUSBFunction::~CUSBFunction()>
   146c8:	e1a00004 	mov	r0, r4
   146cc:	e3a01010 	mov	r1, #16
   146d0:	eb003885 	bl	228ec <operator delete(void*, unsigned int)>
   146d4:	e1a00004 	mov	r0, r4
   146d8:	e8bd8010 	pop	{r4, pc}

000146dc <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)>:
   146dc:	e92d4070 	push	{r4, r5, r6, lr}
   146e0:	e1a04000 	mov	r4, r0
   146e4:	e1a05001 	mov	r5, r1
   146e8:	e1a06002 	mov	r6, r2
   146ec:	eb0019b1 	bl	1adb8 <CDevice::CDevice()>
   146f0:	e3a03000 	mov	r3, #0
   146f4:	e59f208c 	ldr	r2, [pc, #140]	; 14788 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xac>
   146f8:	e1550003 	cmp	r5, r3
   146fc:	e8840024 	stm	r4, {r2, r5}
   14700:	e5843008 	str	r3, [r4, #8]
   14704:	e584300c 	str	r3, [r4, #12]
   14708:	0a000014 	beq	14760 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0x84>
   1470c:	e3560000 	cmp	r6, #0
   14710:	0a000017 	beq	14774 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0x98>
   14714:	e3a0001c 	mov	r0, #28
   14718:	eb00386f 	bl	228dc <operator new(unsigned int)>
   1471c:	e1a05000 	mov	r5, r0
   14720:	e1a01006 	mov	r1, r6
   14724:	eb000858 	bl	1688c <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)>
   14728:	e5845008 	str	r5, [r4, #8]
   1472c:	e1a00005 	mov	r0, r5
   14730:	eb0008a7 	bl	169d4 <CUSBConfigurationParser::GetCurrentDescriptor()>
   14734:	e3500000 	cmp	r0, #0
   14738:	e584000c 	str	r0, [r4, #12]
   1473c:	0a000001 	beq	14748 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0x6c>
   14740:	e1a00004 	mov	r0, r4
   14744:	e8bd8070 	pop	{r4, r5, r6, pc}
   14748:	e3a02029 	mov	r2, #41	; 0x29
   1474c:	e59f1038 	ldr	r1, [pc, #56]	; 1478c <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xb0>
   14750:	e59f0038 	ldr	r0, [pc, #56]	; 14790 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xb4>
   14754:	eb00178f 	bl	1a598 <assertion_failed>
   14758:	e1a00004 	mov	r0, r4
   1475c:	e8bd8070 	pop	{r4, r5, r6, pc}
   14760:	e3a02022 	mov	r2, #34	; 0x22
   14764:	e59f1020 	ldr	r1, [pc, #32]	; 1478c <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xb0>
   14768:	e59f0024 	ldr	r0, [pc, #36]	; 14794 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xb8>
   1476c:	eb001789 	bl	1a598 <assertion_failed>
   14770:	eaffffe5 	b	1470c <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0x30>
   14774:	e3a02024 	mov	r2, #36	; 0x24
   14778:	e59f100c 	ldr	r1, [pc, #12]	; 1478c <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xb0>
   1477c:	e59f0014 	ldr	r0, [pc, #20]	; 14798 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xbc>
   14780:	eb001784 	bl	1a598 <assertion_failed>
   14784:	eaffffe2 	b	14714 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0x38>
   14788:	00025e3c 	.word	0x00025e3c
   1478c:	00025e60 	.word	0x00025e60
   14790:	00025e84 	.word	0x00025e84
   14794:	0002475c 	.word	0x0002475c
   14798:	00025e70 	.word	0x00025e70

0001479c <CUSBFunction::CUSBFunction(CUSBFunction*)>:
   1479c:	e92d4070 	push	{r4, r5, r6, lr}
   147a0:	e1a04000 	mov	r4, r0
   147a4:	e1a05001 	mov	r5, r1
   147a8:	eb001982 	bl	1adb8 <CDevice::CDevice()>
   147ac:	e3a03000 	mov	r3, #0
   147b0:	e59f20d0 	ldr	r2, [pc, #208]	; 14888 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xec>
   147b4:	e1550003 	cmp	r5, r3
   147b8:	e884000c 	stm	r4, {r2, r3}
   147bc:	e5843008 	str	r3, [r4, #8]
   147c0:	e584300c 	str	r3, [r4, #12]
   147c4:	0a000019 	beq	14830 <CUSBFunction::CUSBFunction(CUSBFunction*)+0x94>
   147c8:	e5953004 	ldr	r3, [r5, #4]
   147cc:	e3530000 	cmp	r3, #0
   147d0:	e5843004 	str	r3, [r4, #4]
   147d4:	0a00001a 	beq	14844 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xa8>
   147d8:	e5953008 	ldr	r3, [r5, #8]
   147dc:	e3530000 	cmp	r3, #0
   147e0:	0a00001c 	beq	14858 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xbc>
   147e4:	e3a0001c 	mov	r0, #28
   147e8:	eb00383b 	bl	228dc <operator new(unsigned int)>
   147ec:	e1a06000 	mov	r6, r0
   147f0:	e5951008 	ldr	r1, [r5, #8]
   147f4:	eb000824 	bl	1688c <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)>
   147f8:	e1a00006 	mov	r0, r6
   147fc:	e5846008 	str	r6, [r4, #8]
   14800:	eb000873 	bl	169d4 <CUSBConfigurationParser::GetCurrentDescriptor()>
   14804:	e3500000 	cmp	r0, #0
   14808:	e584000c 	str	r0, [r4, #12]
   1480c:	0a000001 	beq	14818 <CUSBFunction::CUSBFunction(CUSBFunction*)+0x7c>
   14810:	e1a00004 	mov	r0, r4
   14814:	e8bd8070 	pop	{r4, r5, r6, pc}
   14818:	e3a0203a 	mov	r2, #58	; 0x3a
   1481c:	e59f1068 	ldr	r1, [pc, #104]	; 1488c <CUSBFunction::CUSBFunction(CUSBFunction*)+0xf0>
   14820:	e59f0068 	ldr	r0, [pc, #104]	; 14890 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xf4>
   14824:	eb00175b 	bl	1a598 <assertion_failed>
   14828:	e1a00004 	mov	r0, r4
   1482c:	e8bd8070 	pop	{r4, r5, r6, pc}
   14830:	e3a02031 	mov	r2, #49	; 0x31
   14834:	e59f1050 	ldr	r1, [pc, #80]	; 1488c <CUSBFunction::CUSBFunction(CUSBFunction*)+0xf0>
   14838:	e59f0054 	ldr	r0, [pc, #84]	; 14894 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xf8>
   1483c:	eb001755 	bl	1a598 <assertion_failed>
   14840:	eaffffe0 	b	147c8 <CUSBFunction::CUSBFunction(CUSBFunction*)+0x2c>
   14844:	e3a02033 	mov	r2, #51	; 0x33
   14848:	e59f103c 	ldr	r1, [pc, #60]	; 1488c <CUSBFunction::CUSBFunction(CUSBFunction*)+0xf0>
   1484c:	e59f0044 	ldr	r0, [pc, #68]	; 14898 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xfc>
   14850:	eb001750 	bl	1a598 <assertion_failed>
   14854:	eaffffdf 	b	147d8 <CUSBFunction::CUSBFunction(CUSBFunction*)+0x3c>
   14858:	e3a02035 	mov	r2, #53	; 0x35
   1485c:	e59f1028 	ldr	r1, [pc, #40]	; 1488c <CUSBFunction::CUSBFunction(CUSBFunction*)+0xf0>
   14860:	e59f0034 	ldr	r0, [pc, #52]	; 1489c <CUSBFunction::CUSBFunction(CUSBFunction*)+0x100>
   14864:	eb00174b 	bl	1a598 <assertion_failed>
   14868:	e3a0001c 	mov	r0, #28
   1486c:	eb00381a 	bl	228dc <operator new(unsigned int)>
   14870:	e1a06000 	mov	r6, r0
   14874:	e5951008 	ldr	r1, [r5, #8]
   14878:	eb000803 	bl	1688c <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)>
   1487c:	e1a00006 	mov	r0, r6
   14880:	e5846008 	str	r6, [r4, #8]
   14884:	eaffffdd 	b	14800 <CUSBFunction::CUSBFunction(CUSBFunction*)+0x64>
   14888:	00025e3c 	.word	0x00025e3c
   1488c:	00025e60 	.word	0x00025e60
   14890:	00025e84 	.word	0x00025e84
   14894:	00025e9c 	.word	0x00025e9c
   14898:	0002475c 	.word	0x0002475c
   1489c:	00025eac 	.word	0x00025eac

000148a0 <CUSBFunction::GetInterfaceName() const>:
   148a0:	e92d4030 	push	{r4, r5, lr}
   148a4:	e1a05000 	mov	r5, r0
   148a8:	e24dd00c 	sub	sp, sp, #12
   148ac:	e3a00010 	mov	r0, #16
   148b0:	eb003809 	bl	228dc <operator new(unsigned int)>
   148b4:	e59f1048 	ldr	r1, [pc, #72]	; 14904 <CUSBFunction::GetInterfaceName() const+0x64>
   148b8:	e1a04000 	mov	r4, r0
   148bc:	eb002bf8 	bl	1f8a4 <CString::CString(char const*)>
   148c0:	e595100c 	ldr	r1, [r5, #12]
   148c4:	e3510000 	cmp	r1, #0
   148c8:	0a00000a 	beq	148f8 <CUSBFunction::GetInterfaceName() const+0x58>
   148cc:	e5d12005 	ldrb	r2, [r1, #5]
   148d0:	e2423001 	sub	r3, r2, #1
   148d4:	e6ef3073 	uxtb	r3, r3
   148d8:	e35300fd 	cmp	r3, #253	; 0xfd
   148dc:	8a000005 	bhi	148f8 <CUSBFunction::GetInterfaceName() const+0x58>
   148e0:	e5d13006 	ldrb	r3, [r1, #6]
   148e4:	e5d11007 	ldrb	r1, [r1, #7]
   148e8:	e1a00004 	mov	r0, r4
   148ec:	e58d1000 	str	r1, [sp]
   148f0:	e59f1010 	ldr	r1, [pc, #16]	; 14908 <CUSBFunction::GetInterfaceName() const+0x68>
   148f4:	eb002fd2 	bl	20844 <CString::Format(char const*, ...)>
   148f8:	e1a00004 	mov	r0, r4
   148fc:	e28dd00c 	add	sp, sp, #12
   14900:	e8bd8030 	pop	{r4, r5, pc}
   14904:	00024928 	.word	0x00024928
   14908:	00025ecc 	.word	0x00025ecc

0001490c <CUSBFunction::GetNumEndpoints() const>:
   1490c:	e590300c 	ldr	r3, [r0, #12]
   14910:	e3530000 	cmp	r3, #0
   14914:	0a000001 	beq	14920 <CUSBFunction::GetNumEndpoints() const+0x14>
   14918:	e5d30004 	ldrb	r0, [r3, #4]
   1491c:	e12fff1e 	bx	lr
   14920:	e92d4010 	push	{r4, lr}
   14924:	e1a04000 	mov	r4, r0
   14928:	e3a02073 	mov	r2, #115	; 0x73
   1492c:	e59f1010 	ldr	r1, [pc, #16]	; 14944 <CUSBFunction::GetNumEndpoints() const+0x38>
   14930:	e59f0010 	ldr	r0, [pc, #16]	; 14948 <CUSBFunction::GetNumEndpoints() const+0x3c>
   14934:	eb001717 	bl	1a598 <assertion_failed>
   14938:	e594300c 	ldr	r3, [r4, #12]
   1493c:	e5d30004 	ldrb	r0, [r3, #4]
   14940:	e8bd8010 	pop	{r4, pc}
   14944:	00025e60 	.word	0x00025e60
   14948:	00025e84 	.word	0x00025e84

0001494c <CUSBFunction::GetDevice() const>:
   1494c:	e5903004 	ldr	r3, [r0, #4]
   14950:	e3530000 	cmp	r3, #0
   14954:	0a000001 	beq	14960 <CUSBFunction::GetDevice() const+0x14>
   14958:	e1a00003 	mov	r0, r3
   1495c:	e12fff1e 	bx	lr
   14960:	e92d4010 	push	{r4, lr}
   14964:	e1a04000 	mov	r4, r0
   14968:	e3a02079 	mov	r2, #121	; 0x79
   1496c:	e59f1010 	ldr	r1, [pc, #16]	; 14984 <CUSBFunction::GetDevice() const+0x38>
   14970:	e59f0010 	ldr	r0, [pc, #16]	; 14988 <CUSBFunction::GetDevice() const+0x3c>
   14974:	eb001707 	bl	1a598 <assertion_failed>
   14978:	e5943004 	ldr	r3, [r4, #4]
   1497c:	e1a00003 	mov	r0, r3
   14980:	e8bd8010 	pop	{r4, pc}
   14984:	00025e60 	.word	0x00025e60
   14988:	0002475c 	.word	0x0002475c

0001498c <CUSBFunction::GetEndpoint0() const>:
   1498c:	e5903004 	ldr	r3, [r0, #4]
   14990:	e3530000 	cmp	r3, #0
   14994:	0a000001 	beq	149a0 <CUSBFunction::GetEndpoint0() const+0x14>
   14998:	e1a00003 	mov	r0, r3
   1499c:	eaffe343 	b	d6b0 <CUSBDevice::GetEndpoint0() const>
   149a0:	e92d4010 	push	{r4, lr}
   149a4:	e1a04000 	mov	r4, r0
   149a8:	e3a0207f 	mov	r2, #127	; 0x7f
   149ac:	e59f0014 	ldr	r0, [pc, #20]	; 149c8 <CUSBFunction::GetEndpoint0() const+0x3c>
   149b0:	e59f1014 	ldr	r1, [pc, #20]	; 149cc <CUSBFunction::GetEndpoint0() const+0x40>
   149b4:	eb0016f7 	bl	1a598 <assertion_failed>
   149b8:	e5943004 	ldr	r3, [r4, #4]
   149bc:	e8bd4010 	pop	{r4, lr}
   149c0:	e1a00003 	mov	r0, r3
   149c4:	eaffe339 	b	d6b0 <CUSBDevice::GetEndpoint0() const>
   149c8:	0002475c 	.word	0x0002475c
   149cc:	00025e60 	.word	0x00025e60

000149d0 <CUSBFunction::GetHost() const>:
   149d0:	e5903004 	ldr	r3, [r0, #4]
   149d4:	e3530000 	cmp	r3, #0
   149d8:	0a000001 	beq	149e4 <CUSBFunction::GetHost() const+0x14>
   149dc:	e1a00003 	mov	r0, r3
   149e0:	eaffe343 	b	d6f4 <CUSBDevice::GetHost() const>
   149e4:	e92d4010 	push	{r4, lr}
   149e8:	e1a04000 	mov	r4, r0
   149ec:	e3a02085 	mov	r2, #133	; 0x85
   149f0:	e59f0014 	ldr	r0, [pc, #20]	; 14a0c <CUSBFunction::GetHost() const+0x3c>
   149f4:	e59f1014 	ldr	r1, [pc, #20]	; 14a10 <CUSBFunction::GetHost() const+0x40>
   149f8:	eb0016e6 	bl	1a598 <assertion_failed>
   149fc:	e5943004 	ldr	r3, [r4, #4]
   14a00:	e8bd4010 	pop	{r4, lr}
   14a04:	e1a00003 	mov	r0, r3
   14a08:	eaffe339 	b	d6f4 <CUSBDevice::GetHost() const>
   14a0c:	0002475c 	.word	0x0002475c
   14a10:	00025e60 	.word	0x00025e60

00014a14 <CUSBFunction::Configure()>:
   14a14:	e92d4070 	push	{r4, r5, r6, lr}
   14a18:	e590300c 	ldr	r3, [r0, #12]
   14a1c:	e24dd010 	sub	sp, sp, #16
   14a20:	e3530000 	cmp	r3, #0
   14a24:	e1a05000 	mov	r5, r0
   14a28:	0a000020 	beq	14ab0 <CUSBFunction::Configure()+0x9c>
   14a2c:	e5d33003 	ldrb	r3, [r3, #3]
   14a30:	e3530000 	cmp	r3, #0
   14a34:	1a000002 	bne	14a44 <CUSBFunction::Configure()+0x30>
   14a38:	e3a00001 	mov	r0, #1
   14a3c:	e28dd010 	add	sp, sp, #16
   14a40:	e8bd8070 	pop	{r4, r5, r6, pc}
   14a44:	e1a00005 	mov	r0, r5
   14a48:	ebffffe0 	bl	149d0 <CUSBFunction::GetHost() const>
   14a4c:	e3a04000 	mov	r4, #0
   14a50:	e1a06000 	mov	r6, r0
   14a54:	e1a00005 	mov	r0, r5
   14a58:	ebffffcb 	bl	1498c <CUSBFunction::GetEndpoint0() const>
   14a5c:	e595300c 	ldr	r3, [r5, #12]
   14a60:	e58d400c 	str	r4, [sp, #12]
   14a64:	e58d4008 	str	r4, [sp, #8]
   14a68:	e5d32002 	ldrb	r2, [r3, #2]
   14a6c:	e1a01000 	mov	r1, r0
   14a70:	e58d2004 	str	r2, [sp, #4]
   14a74:	e5d33003 	ldrb	r3, [r3, #3]
   14a78:	e1a00006 	mov	r0, r6
   14a7c:	e58d3000 	str	r3, [sp]
   14a80:	e3a02001 	mov	r2, #1
   14a84:	e3a0300b 	mov	r3, #11
   14a88:	ebffe6df 	bl	e60c <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   14a8c:	e1500004 	cmp	r0, r4
   14a90:	aaffffe8 	bge	14a38 <CUSBFunction::Configure()+0x24>
   14a94:	eb0020b2 	bl	1cd64 <CLogger::Get()>
   14a98:	e59f3028 	ldr	r3, [pc, #40]	; 14ac8 <CUSBFunction::Configure()+0xb4>
   14a9c:	e3a02001 	mov	r2, #1
   14aa0:	e59f1024 	ldr	r1, [pc, #36]	; 14acc <CUSBFunction::Configure()+0xb8>
   14aa4:	eb002257 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14aa8:	e1a00004 	mov	r0, r4
   14aac:	eaffffe2 	b	14a3c <CUSBFunction::Configure()+0x28>
   14ab0:	e3a0204e 	mov	r2, #78	; 0x4e
   14ab4:	e59f1014 	ldr	r1, [pc, #20]	; 14ad0 <CUSBFunction::Configure()+0xbc>
   14ab8:	e59f0014 	ldr	r0, [pc, #20]	; 14ad4 <CUSBFunction::Configure()+0xc0>
   14abc:	eb0016b5 	bl	1a598 <assertion_failed>
   14ac0:	e595300c 	ldr	r3, [r5, #12]
   14ac4:	eaffffd8 	b	14a2c <CUSBFunction::Configure()+0x18>
   14ac8:	00025170 	.word	0x00025170
   14acc:	00025e58 	.word	0x00025e58
   14ad0:	00025e60 	.word	0x00025e60
   14ad4:	00025e84 	.word	0x00025e84

00014ad8 <CUSBFunction::GetDescriptor(unsigned char)>:
   14ad8:	e92d4070 	push	{r4, r5, r6, lr}
   14adc:	e1a04000 	mov	r4, r0
   14ae0:	e5900008 	ldr	r0, [r0, #8]
   14ae4:	e1a05001 	mov	r5, r1
   14ae8:	e3500000 	cmp	r0, #0
   14aec:	0a000002 	beq	14afc <CUSBFunction::GetDescriptor(unsigned char)+0x24>
   14af0:	e1a01005 	mov	r1, r5
   14af4:	e8bd4070 	pop	{r4, r5, r6, lr}
   14af8:	ea00077d 	b	168f4 <CUSBConfigurationParser::GetDescriptor(unsigned char)>
   14afc:	e59f1018 	ldr	r1, [pc, #24]	; 14b1c <CUSBFunction::GetDescriptor(unsigned char)+0x44>
   14b00:	e59f0018 	ldr	r0, [pc, #24]	; 14b20 <CUSBFunction::GetDescriptor(unsigned char)+0x48>
   14b04:	e3a0208b 	mov	r2, #139	; 0x8b
   14b08:	eb0016a2 	bl	1a598 <assertion_failed>
   14b0c:	e5940008 	ldr	r0, [r4, #8]
   14b10:	e1a01005 	mov	r1, r5
   14b14:	e8bd4070 	pop	{r4, r5, r6, lr}
   14b18:	ea000775 	b	168f4 <CUSBConfigurationParser::GetDescriptor(unsigned char)>
   14b1c:	00025e60 	.word	0x00025e60
   14b20:	00024988 	.word	0x00024988

00014b24 <CUSBFunction::ConfigurationError(char const*) const>:
   14b24:	e5903008 	ldr	r3, [r0, #8]
   14b28:	e92d4070 	push	{r4, r5, r6, lr}
   14b2c:	e3530000 	cmp	r3, #0
   14b30:	e1a04000 	mov	r4, r0
   14b34:	e1a05001 	mov	r5, r1
   14b38:	0a00000d 	beq	14b74 <CUSBFunction::ConfigurationError(char const*) const+0x50>
   14b3c:	e3550000 	cmp	r5, #0
   14b40:	0a000003 	beq	14b54 <CUSBFunction::ConfigurationError(char const*) const+0x30>
   14b44:	e1a01005 	mov	r1, r5
   14b48:	e5940008 	ldr	r0, [r4, #8]
   14b4c:	e8bd4070 	pop	{r4, r5, r6, lr}
   14b50:	ea0007b5 	b	16a2c <CUSBConfigurationParser::Error(char const*) const>
   14b54:	e59f102c 	ldr	r1, [pc, #44]	; 14b88 <CUSBFunction::ConfigurationError(char const*) const+0x64>
   14b58:	e59f002c 	ldr	r0, [pc, #44]	; 14b8c <CUSBFunction::ConfigurationError(char const*) const+0x68>
   14b5c:	e3a02092 	mov	r2, #146	; 0x92
   14b60:	eb00168c 	bl	1a598 <assertion_failed>
   14b64:	e1a01005 	mov	r1, r5
   14b68:	e5940008 	ldr	r0, [r4, #8]
   14b6c:	e8bd4070 	pop	{r4, r5, r6, lr}
   14b70:	ea0007ad 	b	16a2c <CUSBConfigurationParser::Error(char const*) const>
   14b74:	e3a02091 	mov	r2, #145	; 0x91
   14b78:	e59f1008 	ldr	r1, [pc, #8]	; 14b88 <CUSBFunction::ConfigurationError(char const*) const+0x64>
   14b7c:	e59f000c 	ldr	r0, [pc, #12]	; 14b90 <CUSBFunction::ConfigurationError(char const*) const+0x6c>
   14b80:	eb001684 	bl	1a598 <assertion_failed>
   14b84:	eaffffec 	b	14b3c <CUSBFunction::ConfigurationError(char const*) const+0x18>
   14b88:	00025e60 	.word	0x00025e60
   14b8c:	00025ed8 	.word	0x00025ed8
   14b90:	00024988 	.word	0x00024988

00014b94 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)>:
   14b94:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   14b98:	e1a04000 	mov	r4, r0
   14b9c:	e590000c 	ldr	r0, [r0, #12]
   14ba0:	e1a06001 	mov	r6, r1
   14ba4:	e3500000 	cmp	r0, #0
   14ba8:	e1a07002 	mov	r7, r2
   14bac:	e1a08003 	mov	r8, r3
   14bb0:	0a00001d 	beq	14c2c <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x98>
   14bb4:	e5943008 	ldr	r3, [r4, #8]
   14bb8:	e3530000 	cmp	r3, #0
   14bbc:	0a00001f 	beq	14c40 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xac>
   14bc0:	e5943004 	ldr	r3, [r4, #4]
   14bc4:	e3530000 	cmp	r3, #0
   14bc8:	0a000021 	beq	14c54 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xc0>
   14bcc:	e594000c 	ldr	r0, [r4, #12]
   14bd0:	e3a05004 	mov	r5, #4
   14bd4:	ea000008 	b	14bfc <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x68>
   14bd8:	e1a01005 	mov	r1, r5
   14bdc:	e5940004 	ldr	r0, [r4, #4]
   14be0:	ebffe2f6 	bl	d7c0 <CUSBDevice::GetDescriptor(unsigned char)>
   14be4:	e1a01005 	mov	r1, r5
   14be8:	e5940008 	ldr	r0, [r4, #8]
   14bec:	eb000740 	bl	168f4 <CUSBConfigurationParser::GetDescriptor(unsigned char)>
   14bf0:	e3500000 	cmp	r0, #0
   14bf4:	e584000c 	str	r0, [r4, #12]
   14bf8:	0a00000a 	beq	14c28 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x94>
   14bfc:	e5d03005 	ldrb	r3, [r0, #5]
   14c00:	e1530006 	cmp	r3, r6
   14c04:	1afffff3 	bne	14bd8 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x44>
   14c08:	e5d03006 	ldrb	r3, [r0, #6]
   14c0c:	e1530007 	cmp	r3, r7
   14c10:	1afffff0 	bne	14bd8 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x44>
   14c14:	e5d03007 	ldrb	r3, [r0, #7]
   14c18:	e1530008 	cmp	r3, r8
   14c1c:	1affffed 	bne	14bd8 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x44>
   14c20:	e3a00001 	mov	r0, #1
   14c24:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   14c28:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   14c2c:	e3a02098 	mov	r2, #152	; 0x98
   14c30:	e59f1030 	ldr	r1, [pc, #48]	; 14c68 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xd4>
   14c34:	e59f0030 	ldr	r0, [pc, #48]	; 14c6c <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xd8>
   14c38:	eb001656 	bl	1a598 <assertion_failed>
   14c3c:	eaffffdc 	b	14bb4 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x20>
   14c40:	e3a02099 	mov	r2, #153	; 0x99
   14c44:	e59f101c 	ldr	r1, [pc, #28]	; 14c68 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xd4>
   14c48:	e59f0020 	ldr	r0, [pc, #32]	; 14c70 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xdc>
   14c4c:	eb001651 	bl	1a598 <assertion_failed>
   14c50:	eaffffda 	b	14bc0 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x2c>
   14c54:	e3a0209a 	mov	r2, #154	; 0x9a
   14c58:	e59f1008 	ldr	r1, [pc, #8]	; 14c68 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xd4>
   14c5c:	e59f0010 	ldr	r0, [pc, #16]	; 14c74 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xe0>
   14c60:	eb00164c 	bl	1a598 <assertion_failed>
   14c64:	eaffffd8 	b	14bcc <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x38>
   14c68:	00025e60 	.word	0x00025e60
   14c6c:	00025e84 	.word	0x00025e84
   14c70:	00024988 	.word	0x00024988
   14c74:	0002475c 	.word	0x0002475c

00014c78 <CUSBFunction::GetInterfaceNumber() const>:
   14c78:	e590300c 	ldr	r3, [r0, #12]
   14c7c:	e3530000 	cmp	r3, #0
   14c80:	0a000001 	beq	14c8c <CUSBFunction::GetInterfaceNumber() const+0x14>
   14c84:	e5d30002 	ldrb	r0, [r3, #2]
   14c88:	e12fff1e 	bx	lr
   14c8c:	e92d4010 	push	{r4, lr}
   14c90:	e1a04000 	mov	r4, r0
   14c94:	e3a020b0 	mov	r2, #176	; 0xb0
   14c98:	e59f1010 	ldr	r1, [pc, #16]	; 14cb0 <CUSBFunction::GetInterfaceNumber() const+0x38>
   14c9c:	e59f0010 	ldr	r0, [pc, #16]	; 14cb4 <CUSBFunction::GetInterfaceNumber() const+0x3c>
   14ca0:	eb00163c 	bl	1a598 <assertion_failed>
   14ca4:	e594300c 	ldr	r3, [r4, #12]
   14ca8:	e5d30002 	ldrb	r0, [r3, #2]
   14cac:	e8bd8010 	pop	{r4, pc}
   14cb0:	00025e60 	.word	0x00025e60
   14cb4:	00025e84 	.word	0x00025e84

00014cb8 <CUSBFunction::GetInterfaceClass() const>:
   14cb8:	e590300c 	ldr	r3, [r0, #12]
   14cbc:	e3530000 	cmp	r3, #0
   14cc0:	0a000001 	beq	14ccc <CUSBFunction::GetInterfaceClass() const+0x14>
   14cc4:	e5d30005 	ldrb	r0, [r3, #5]
   14cc8:	e12fff1e 	bx	lr
   14ccc:	e92d4010 	push	{r4, lr}
   14cd0:	e1a04000 	mov	r4, r0
   14cd4:	e3a020b6 	mov	r2, #182	; 0xb6
   14cd8:	e59f1010 	ldr	r1, [pc, #16]	; 14cf0 <CUSBFunction::GetInterfaceClass() const+0x38>
   14cdc:	e59f0010 	ldr	r0, [pc, #16]	; 14cf4 <CUSBFunction::GetInterfaceClass() const+0x3c>
   14ce0:	eb00162c 	bl	1a598 <assertion_failed>
   14ce4:	e594300c 	ldr	r3, [r4, #12]
   14ce8:	e5d30005 	ldrb	r0, [r3, #5]
   14cec:	e8bd8010 	pop	{r4, pc}
   14cf0:	00025e60 	.word	0x00025e60
   14cf4:	00025e84 	.word	0x00025e84

00014cf8 <CUSBFunction::GetInterfaceSubClass() const>:
   14cf8:	e590300c 	ldr	r3, [r0, #12]
   14cfc:	e3530000 	cmp	r3, #0
   14d00:	0a000001 	beq	14d0c <CUSBFunction::GetInterfaceSubClass() const+0x14>
   14d04:	e5d30006 	ldrb	r0, [r3, #6]
   14d08:	e12fff1e 	bx	lr
   14d0c:	e92d4010 	push	{r4, lr}
   14d10:	e1a04000 	mov	r4, r0
   14d14:	e3a020bc 	mov	r2, #188	; 0xbc
   14d18:	e59f1010 	ldr	r1, [pc, #16]	; 14d30 <CUSBFunction::GetInterfaceSubClass() const+0x38>
   14d1c:	e59f0010 	ldr	r0, [pc, #16]	; 14d34 <CUSBFunction::GetInterfaceSubClass() const+0x3c>
   14d20:	eb00161c 	bl	1a598 <assertion_failed>
   14d24:	e594300c 	ldr	r3, [r4, #12]
   14d28:	e5d30006 	ldrb	r0, [r3, #6]
   14d2c:	e8bd8010 	pop	{r4, pc}
   14d30:	00025e60 	.word	0x00025e60
   14d34:	00025e84 	.word	0x00025e84

00014d38 <CUSBFunction::GetInterfaceProtocol() const>:
   14d38:	e590300c 	ldr	r3, [r0, #12]
   14d3c:	e3530000 	cmp	r3, #0
   14d40:	0a000001 	beq	14d4c <CUSBFunction::GetInterfaceProtocol() const+0x14>
   14d44:	e5d30007 	ldrb	r0, [r3, #7]
   14d48:	e12fff1e 	bx	lr
   14d4c:	e92d4010 	push	{r4, lr}
   14d50:	e1a04000 	mov	r4, r0
   14d54:	e3a020c2 	mov	r2, #194	; 0xc2
   14d58:	e59f1010 	ldr	r1, [pc, #16]	; 14d70 <CUSBFunction::GetInterfaceProtocol() const+0x38>
   14d5c:	e59f0010 	ldr	r0, [pc, #16]	; 14d74 <CUSBFunction::GetInterfaceProtocol() const+0x3c>
   14d60:	eb00160c 	bl	1a598 <assertion_failed>
   14d64:	e594300c 	ldr	r3, [r4, #12]
   14d68:	e5d30007 	ldrb	r0, [r3, #7]
   14d6c:	e8bd8010 	pop	{r4, pc}
   14d70:	00025e60 	.word	0x00025e60
   14d74:	00025e84 	.word	0x00025e84

00014d78 <CDWHCIFrameSchedulerNoSplit::~CDWHCIFrameSchedulerNoSplit()>:
   14d78:	e12fff1e 	bx	lr

00014d7c <CDWHCIFrameSchedulerNoSplit::IsOddFrame() const>:
   14d7c:	e1d000b6 	ldrh	r0, [r0, #6]
   14d80:	e2000001 	and	r0, r0, #1
   14d84:	e12fff1e 	bx	lr

00014d88 <CDWHCIFrameSchedulerNoSplit::StartSplit()>:
   14d88:	e3a02026 	mov	r2, #38	; 0x26
   14d8c:	e59f1004 	ldr	r1, [pc, #4]	; 14d98 <CDWHCIFrameSchedulerNoSplit::StartSplit()+0x10>
   14d90:	e59f0004 	ldr	r0, [pc, #4]	; 14d9c <CDWHCIFrameSchedulerNoSplit::StartSplit()+0x14>
   14d94:	ea0015ff 	b	1a598 <assertion_failed>
   14d98:	00025f0c 	.word	0x00025f0c
   14d9c:	00024970 	.word	0x00024970

00014da0 <CDWHCIFrameSchedulerNoSplit::CompleteSplit()>:
   14da0:	e92d4010 	push	{r4, lr}
   14da4:	e3a0202b 	mov	r2, #43	; 0x2b
   14da8:	e59f100c 	ldr	r1, [pc, #12]	; 14dbc <CDWHCIFrameSchedulerNoSplit::CompleteSplit()+0x1c>
   14dac:	e59f000c 	ldr	r0, [pc, #12]	; 14dc0 <CDWHCIFrameSchedulerNoSplit::CompleteSplit()+0x20>
   14db0:	eb0015f8 	bl	1a598 <assertion_failed>
   14db4:	e3a00000 	mov	r0, #0
   14db8:	e8bd8010 	pop	{r4, pc}
   14dbc:	00025f0c 	.word	0x00025f0c
   14dc0:	00024970 	.word	0x00024970

00014dc4 <CDWHCIFrameSchedulerNoSplit::TransactionComplete(unsigned int)>:
   14dc4:	e3a02031 	mov	r2, #49	; 0x31
   14dc8:	e59f1004 	ldr	r1, [pc, #4]	; 14dd4 <CDWHCIFrameSchedulerNoSplit::TransactionComplete(unsigned int)+0x10>
   14dcc:	e59f0004 	ldr	r0, [pc, #4]	; 14dd8 <CDWHCIFrameSchedulerNoSplit::TransactionComplete(unsigned int)+0x14>
   14dd0:	ea0015f0 	b	1a598 <assertion_failed>
   14dd4:	00025f0c 	.word	0x00025f0c
   14dd8:	00024970 	.word	0x00024970

00014ddc <CDWHCIFrameSchedulerNoSplit::WaitForFrame()>:
   14ddc:	e92d4030 	push	{r4, r5, lr}
   14de0:	e24dd014 	sub	sp, sp, #20
   14de4:	e1a05000 	mov	r5, r0
   14de8:	e59f1050 	ldr	r1, [pc, #80]	; 14e40 <CDWHCIFrameSchedulerNoSplit::WaitForFrame()+0x64>
   14dec:	e28d0004 	add	r0, sp, #4
   14df0:	ebffdd5c 	bl	c368 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   14df4:	e28d0004 	add	r0, sp, #4
   14df8:	ebffdd63 	bl	c38c <CDWHCIRegister::Read()>
   14dfc:	e59f4040 	ldr	r4, [pc, #64]	; 14e44 <CDWHCIFrameSchedulerNoSplit::WaitForFrame()+0x68>
   14e00:	e5d53004 	ldrb	r3, [r5, #4]
   14e04:	e2800001 	add	r0, r0, #1
   14e08:	e0000004 	and	r0, r0, r4
   14e0c:	e3530000 	cmp	r3, #0
   14e10:	e1c500b6 	strh	r0, [r5, #6]
   14e14:	1a000005 	bne	14e30 <CDWHCIFrameSchedulerNoSplit::WaitForFrame()+0x54>
   14e18:	e28d0004 	add	r0, sp, #4
   14e1c:	ebffdd5a 	bl	c38c <CDWHCIRegister::Read()>
   14e20:	e1d530b6 	ldrh	r3, [r5, #6]
   14e24:	e0000004 	and	r0, r0, r4
   14e28:	e1500003 	cmp	r0, r3
   14e2c:	1afffff9 	bne	14e18 <CDWHCIFrameSchedulerNoSplit::WaitForFrame()+0x3c>
   14e30:	e28d0004 	add	r0, sp, #4
   14e34:	ebffdd53 	bl	c388 <CDWHCIRegister::~CDWHCIRegister()>
   14e38:	e28dd014 	add	sp, sp, #20
   14e3c:	e8bd8030 	pop	{r4, r5, pc}
   14e40:	20980408 	.word	0x20980408
   14e44:	00003fff 	.word	0x00003fff

00014e48 <CDWHCIFrameSchedulerNoSplit::CDWHCIFrameSchedulerNoSplit(bool)>:
   14e48:	e3a02901 	mov	r2, #16384	; 0x4000
   14e4c:	e59fc00c 	ldr	ip, [pc, #12]	; 14e60 <CDWHCIFrameSchedulerNoSplit::CDWHCIFrameSchedulerNoSplit(bool)+0x18>
   14e50:	e5c01004 	strb	r1, [r0, #4]
   14e54:	e580c000 	str	ip, [r0]
   14e58:	e1c020b6 	strh	r2, [r0, #6]
   14e5c:	e12fff1e 	bx	lr
   14e60:	00025ef0 	.word	0x00025ef0

00014e64 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)>:
   14e64:	e3500008 	cmp	r0, #8
   14e68:	e92d4010 	push	{r4, lr}
   14e6c:	0a000003 	beq	14e80 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x1c>
   14e70:	e3a0205a 	mov	r2, #90	; 0x5a
   14e74:	e59f1038 	ldr	r1, [pc, #56]	; 14eb4 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x50>
   14e78:	e59f0038 	ldr	r0, [pc, #56]	; 14eb8 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x54>
   14e7c:	eb0015c5 	bl	1a598 <assertion_failed>
   14e80:	e59f4034 	ldr	r4, [pc, #52]	; 14ebc <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x58>
   14e84:	e5940000 	ldr	r0, [r4]
   14e88:	e3500000 	cmp	r0, #0
   14e8c:	0a000001 	beq	14e98 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x34>
   14e90:	e8bd4010 	pop	{r4, lr}
   14e94:	ea0016dd 	b	1aa10 <CClassAllocator::Allocate()>
   14e98:	e59f0020 	ldr	r0, [pc, #32]	; 14ec0 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x5c>
   14e9c:	e3a0205a 	mov	r2, #90	; 0x5a
   14ea0:	e59f100c 	ldr	r1, [pc, #12]	; 14eb4 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x50>
   14ea4:	eb0015bb 	bl	1a598 <assertion_failed>
   14ea8:	e5940000 	ldr	r0, [r4]
   14eac:	e8bd4010 	pop	{r4, lr}
   14eb0:	ea0016d6 	b	1aa10 <CClassAllocator::Allocate()>
   14eb4:	00025f0c 	.word	0x00025f0c
   14eb8:	00025f28 	.word	0x00025f28
   14ebc:	0002b270 	.word	0x0002b270
   14ec0:	00024850 	.word	0x00024850

00014ec4 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)>:
   14ec4:	e3510008 	cmp	r1, #8
   14ec8:	e92d4070 	push	{r4, r5, r6, lr}
   14ecc:	e1a05000 	mov	r5, r0
   14ed0:	0a000003 	beq	14ee4 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x20>
   14ed4:	e3a0205a 	mov	r2, #90	; 0x5a
   14ed8:	e59f1040 	ldr	r1, [pc, #64]	; 14f20 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x5c>
   14edc:	e59f0040 	ldr	r0, [pc, #64]	; 14f24 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x60>
   14ee0:	eb0015ac 	bl	1a598 <assertion_failed>
   14ee4:	e59f403c 	ldr	r4, [pc, #60]	; 14f28 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x64>
   14ee8:	e5940000 	ldr	r0, [r4]
   14eec:	e3500000 	cmp	r0, #0
   14ef0:	0a000002 	beq	14f00 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x3c>
   14ef4:	e1a01005 	mov	r1, r5
   14ef8:	e8bd4070 	pop	{r4, r5, r6, lr}
   14efc:	ea0016fe 	b	1aafc <CClassAllocator::Free(void*)>
   14f00:	e59f1018 	ldr	r1, [pc, #24]	; 14f20 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x5c>
   14f04:	e59f0020 	ldr	r0, [pc, #32]	; 14f2c <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x68>
   14f08:	e3a0205a 	mov	r2, #90	; 0x5a
   14f0c:	eb0015a1 	bl	1a598 <assertion_failed>
   14f10:	e5940000 	ldr	r0, [r4]
   14f14:	e1a01005 	mov	r1, r5
   14f18:	e8bd4070 	pop	{r4, r5, r6, lr}
   14f1c:	ea0016f6 	b	1aafc <CClassAllocator::Free(void*)>
   14f20:	00025f0c 	.word	0x00025f0c
   14f24:	00025f28 	.word	0x00025f28
   14f28:	0002b270 	.word	0x0002b270
   14f2c:	00024850 	.word	0x00024850

00014f30 <CDWHCIFrameSchedulerNoSplit::~CDWHCIFrameSchedulerNoSplit()>:
   14f30:	e92d4010 	push	{r4, lr}
   14f34:	e1a04000 	mov	r4, r0
   14f38:	e3a01008 	mov	r1, #8
   14f3c:	ebffffe0 	bl	14ec4 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)>
   14f40:	e1a00004 	mov	r0, r4
   14f44:	e8bd8010 	pop	{r4, pc}

00014f48 <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)>:
   14f48:	e92d4070 	push	{r4, r5, r6, lr}
   14f4c:	e59f4040 	ldr	r4, [pc, #64]	; 14f94 <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)+0x4c>
   14f50:	e1a06000 	mov	r6, r0
   14f54:	e5943000 	ldr	r3, [r4]
   14f58:	e3530000 	cmp	r3, #0
   14f5c:	0a000003 	beq	14f70 <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)+0x28>
   14f60:	e3a0205a 	mov	r2, #90	; 0x5a
   14f64:	e59f102c 	ldr	r1, [pc, #44]	; 14f98 <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)+0x50>
   14f68:	e59f002c 	ldr	r0, [pc, #44]	; 14f9c <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)+0x54>
   14f6c:	eb001589 	bl	1a598 <assertion_failed>
   14f70:	e3a0001c 	mov	r0, #28
   14f74:	eb003658 	bl	228dc <operator new(unsigned int)>
   14f78:	e1a05000 	mov	r5, r0
   14f7c:	e1a02006 	mov	r2, r6
   14f80:	e59f3018 	ldr	r3, [pc, #24]	; 14fa0 <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)+0x58>
   14f84:	e3a01008 	mov	r1, #8
   14f88:	eb001687 	bl	1a9ac <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
   14f8c:	e5845000 	str	r5, [r4]
   14f90:	e8bd8070 	pop	{r4, r5, r6, pc}
   14f94:	0002b270 	.word	0x0002b270
   14f98:	00025f0c 	.word	0x00025f0c
   14f9c:	00024864 	.word	0x00024864
   14fa0:	00025f58 	.word	0x00025f58

00014fa4 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)>:
   14fa4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   14fa8:	e59f4054 	ldr	r4, [pc, #84]	; 15004 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)+0x60>
   14fac:	e24dd00c 	sub	sp, sp, #12
   14fb0:	e5943000 	ldr	r3, [r4]
   14fb4:	e1a06000 	mov	r6, r0
   14fb8:	e3530000 	cmp	r3, #0
   14fbc:	e1a07001 	mov	r7, r1
   14fc0:	0a000003 	beq	14fd4 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)+0x30>
   14fc4:	e3a0205a 	mov	r2, #90	; 0x5a
   14fc8:	e59f1038 	ldr	r1, [pc, #56]	; 15008 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)+0x64>
   14fcc:	e59f0038 	ldr	r0, [pc, #56]	; 1500c <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)+0x68>
   14fd0:	eb001570 	bl	1a598 <assertion_failed>
   14fd4:	e3a0001c 	mov	r0, #28
   14fd8:	eb00363f 	bl	228dc <operator new(unsigned int)>
   14fdc:	e59f102c 	ldr	r1, [pc, #44]	; 15010 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)+0x6c>
   14fe0:	e1a03007 	mov	r3, r7
   14fe4:	e58d1000 	str	r1, [sp]
   14fe8:	e1a02006 	mov	r2, r6
   14fec:	e3a01008 	mov	r1, #8
   14ff0:	e1a05000 	mov	r5, r0
   14ff4:	eb001678 	bl	1a9dc <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
   14ff8:	e5845000 	str	r5, [r4]
   14ffc:	e28dd00c 	add	sp, sp, #12
   15000:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   15004:	0002b270 	.word	0x0002b270
   15008:	00025f0c 	.word	0x00025f0c
   1500c:	00024864 	.word	0x00024864
   15010:	00025f58 	.word	0x00025f58

00015014 <CUSBPrinterDevice::~CUSBPrinterDevice()>:
   15014:	e92d4070 	push	{r4, r5, r6, lr}
   15018:	e5905018 	ldr	r5, [r0, #24]
   1501c:	e59f3060 	ldr	r3, [pc, #96]	; 15084 <CUSBPrinterDevice::~CUSBPrinterDevice()+0x70>
   15020:	e3550000 	cmp	r5, #0
   15024:	e1a04000 	mov	r4, r0
   15028:	e5803000 	str	r3, [r0]
   1502c:	0a000004 	beq	15044 <CUSBPrinterDevice::~CUSBPrinterDevice()+0x30>
   15030:	e1a00005 	mov	r0, r5
   15034:	ebffe4f0 	bl	e3fc <CUSBEndpoint::~CUSBEndpoint()>
   15038:	e1a00005 	mov	r0, r5
   1503c:	e3a01014 	mov	r1, #20
   15040:	eb003629 	bl	228ec <operator delete(void*, unsigned int)>
   15044:	e3a03000 	mov	r3, #0
   15048:	e5945014 	ldr	r5, [r4, #20]
   1504c:	e5843018 	str	r3, [r4, #24]
   15050:	e1550003 	cmp	r5, r3
   15054:	0a000004 	beq	1506c <CUSBPrinterDevice::~CUSBPrinterDevice()+0x58>
   15058:	e1a00005 	mov	r0, r5
   1505c:	ebffe4e6 	bl	e3fc <CUSBEndpoint::~CUSBEndpoint()>
   15060:	e1a00005 	mov	r0, r5
   15064:	e3a01014 	mov	r1, #20
   15068:	eb00361f 	bl	228ec <operator delete(void*, unsigned int)>
   1506c:	e3a03000 	mov	r3, #0
   15070:	e1a00004 	mov	r0, r4
   15074:	e5843014 	str	r3, [r4, #20]
   15078:	ebfffd79 	bl	14664 <CUSBFunction::~CUSBFunction()>
   1507c:	e1a00004 	mov	r0, r4
   15080:	e8bd8070 	pop	{r4, r5, r6, pc}
   15084:	00025f7c 	.word	0x00025f7c

00015088 <CUSBPrinterDevice::~CUSBPrinterDevice()>:
   15088:	e92d4010 	push	{r4, lr}
   1508c:	e1a04000 	mov	r4, r0
   15090:	ebffffdf 	bl	15014 <CUSBPrinterDevice::~CUSBPrinterDevice()>
   15094:	e1a00004 	mov	r0, r4
   15098:	e3a0101c 	mov	r1, #28
   1509c:	eb003612 	bl	228ec <operator delete(void*, unsigned int)>
   150a0:	e1a00004 	mov	r0, r4
   150a4:	e8bd8010 	pop	{r4, pc}

000150a8 <CUSBPrinterDevice::Write(void const*, unsigned int)>:
   150a8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   150ac:	e2517000 	subs	r7, r1, #0
   150b0:	e24dd00c 	sub	sp, sp, #12
   150b4:	e1a05000 	mov	r5, r0
   150b8:	e1a04002 	mov	r4, r2
   150bc:	0a000016 	beq	1511c <CUSBPrinterDevice::Write(void const*, unsigned int)+0x74>
   150c0:	e3540000 	cmp	r4, #0
   150c4:	0a00000f 	beq	15108 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x60>
   150c8:	e1a00005 	mov	r0, r5
   150cc:	ebfffe3f 	bl	149d0 <CUSBFunction::GetHost() const>
   150d0:	e2506000 	subs	r6, r0, #0
   150d4:	0a000015 	beq	15130 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x88>
   150d8:	e3a03000 	mov	r3, #0
   150dc:	e5951018 	ldr	r1, [r5, #24]
   150e0:	e1a02007 	mov	r2, r7
   150e4:	e58d3000 	str	r3, [sp]
   150e8:	e1a00006 	mov	r0, r6
   150ec:	e1a03004 	mov	r3, r4
   150f0:	ebffe5ab 	bl	e7a4 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   150f4:	e3500000 	cmp	r0, #0
   150f8:	a1a00004 	movge	r0, r4
   150fc:	b3e00000 	mvnlt	r0, #0
   15100:	e28dd00c 	add	sp, sp, #12
   15104:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   15108:	e3a0207f 	mov	r2, #127	; 0x7f
   1510c:	e59f1030 	ldr	r1, [pc, #48]	; 15144 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x9c>
   15110:	e59f0030 	ldr	r0, [pc, #48]	; 15148 <CUSBPrinterDevice::Write(void const*, unsigned int)+0xa0>
   15114:	eb00151f 	bl	1a598 <assertion_failed>
   15118:	eaffffea 	b	150c8 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x20>
   1511c:	e3a0207e 	mov	r2, #126	; 0x7e
   15120:	e59f101c 	ldr	r1, [pc, #28]	; 15144 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x9c>
   15124:	e59f0020 	ldr	r0, [pc, #32]	; 1514c <CUSBPrinterDevice::Write(void const*, unsigned int)+0xa4>
   15128:	eb00151a 	bl	1a598 <assertion_failed>
   1512c:	eaffffe3 	b	150c0 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x18>
   15130:	e3a02082 	mov	r2, #130	; 0x82
   15134:	e59f1008 	ldr	r1, [pc, #8]	; 15144 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x9c>
   15138:	e59f0010 	ldr	r0, [pc, #16]	; 15150 <CUSBPrinterDevice::Write(void const*, unsigned int)+0xa8>
   1513c:	eb001515 	bl	1a598 <assertion_failed>
   15140:	eaffffe4 	b	150d8 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x30>
   15144:	00025fa0 	.word	0x00025fa0
   15148:	00025fb0 	.word	0x00025fb0
   1514c:	0002526c 	.word	0x0002526c
   15150:	00024fd0 	.word	0x00024fd0

00015154 <CUSBPrinterDevice::CUSBPrinterDevice(CUSBFunction*)>:
   15154:	e92d4010 	push	{r4, lr}
   15158:	e1a04000 	mov	r4, r0
   1515c:	ebfffd8e 	bl	1479c <CUSBFunction::CUSBFunction(CUSBFunction*)>
   15160:	e3a03000 	mov	r3, #0
   15164:	e59f2014 	ldr	r2, [pc, #20]	; 15180 <CUSBPrinterDevice::CUSBPrinterDevice(CUSBFunction*)+0x2c>
   15168:	e5c43010 	strb	r3, [r4, #16]
   1516c:	e5842000 	str	r2, [r4]
   15170:	e5843014 	str	r3, [r4, #20]
   15174:	e5843018 	str	r3, [r4, #24]
   15178:	e1a00004 	mov	r0, r4
   1517c:	e8bd8010 	pop	{r4, pc}
   15180:	00025f7c 	.word	0x00025f7c

00015184 <CUSBPrinterDevice::Configure()>:
   15184:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   15188:	e24dd01c 	sub	sp, sp, #28
   1518c:	e1a05000 	mov	r5, r0
   15190:	ebfffee8 	bl	14d38 <CUSBFunction::GetInterfaceProtocol() const>
   15194:	e2403001 	sub	r3, r0, #1
   15198:	e3530001 	cmp	r3, #1
   1519c:	e5c50010 	strb	r0, [r5, #16]
   151a0:	9a00000a 	bls	151d0 <CUSBPrinterDevice::Configure()+0x4c>
   151a4:	eb001eee 	bl	1cd64 <CLogger::Get()>
   151a8:	e5d52010 	ldrb	r2, [r5, #16]
   151ac:	e59f31d8 	ldr	r3, [pc, #472]	; 1538c <CUSBPrinterDevice::Configure()+0x208>
   151b0:	e58d2000 	str	r2, [sp]
   151b4:	e59f11d4 	ldr	r1, [pc, #468]	; 15390 <CUSBPrinterDevice::Configure()+0x20c>
   151b8:	e3a02001 	mov	r2, #1
   151bc:	eb002091 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   151c0:	e3a04000 	mov	r4, #0
   151c4:	e1a00004 	mov	r0, r4
   151c8:	e28dd01c 	add	sp, sp, #28
   151cc:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   151d0:	e1a00005 	mov	r0, r5
   151d4:	ebfffdcc 	bl	1490c <CUSBFunction::GetNumEndpoints() const>
   151d8:	e5d53010 	ldrb	r3, [r5, #16]
   151dc:	e3530001 	cmp	r3, #1
   151e0:	03a03001 	moveq	r3, #1
   151e4:	13a03002 	movne	r3, #2
   151e8:	e1530000 	cmp	r3, r0
   151ec:	d3a06005 	movle	r6, #5
   151f0:	d3a07014 	movle	r7, #20
   151f4:	da000004 	ble	1520c <CUSBPrinterDevice::Configure()+0x88>
   151f8:	ea000053 	b	1534c <CUSBPrinterDevice::Configure()+0x1c8>
   151fc:	e5d43003 	ldrb	r3, [r4, #3]
   15200:	e203303f 	and	r3, r3, #63	; 0x3f
   15204:	e3530002 	cmp	r3, #2
   15208:	0a000028 	beq	152b0 <CUSBPrinterDevice::Configure()+0x12c>
   1520c:	e1a01006 	mov	r1, r6
   15210:	e1a00005 	mov	r0, r5
   15214:	ebfffe2f 	bl	14ad8 <CUSBFunction::GetDescriptor(unsigned char)>
   15218:	e2504000 	subs	r4, r0, #0
   1521c:	1afffff6 	bne	151fc <CUSBPrinterDevice::Configure()+0x78>
   15220:	e5954018 	ldr	r4, [r5, #24]
   15224:	e3540000 	cmp	r4, #0
   15228:	0a00004c 	beq	15360 <CUSBPrinterDevice::Configure()+0x1dc>
   1522c:	e5d53010 	ldrb	r3, [r5, #16]
   15230:	e1a00005 	mov	r0, r5
   15234:	e3530001 	cmp	r3, #1
   15238:	0a000002 	beq	15248 <CUSBPrinterDevice::Configure()+0xc4>
   1523c:	e5954014 	ldr	r4, [r5, #20]
   15240:	e3540000 	cmp	r4, #0
   15244:	0a000049 	beq	15370 <CUSBPrinterDevice::Configure()+0x1ec>
   15248:	ebfffdf1 	bl	14a14 <CUSBFunction::Configure()>
   1524c:	e2504000 	subs	r4, r0, #0
   15250:	0a000027 	beq	152f4 <CUSBPrinterDevice::Configure()+0x170>
   15254:	e28d0008 	add	r0, sp, #8
   15258:	eb00298b 	bl	1f88c <CString::CString()>
   1525c:	e59f3130 	ldr	r3, [pc, #304]	; 15394 <CUSBPrinterDevice::Configure()+0x210>
   15260:	e59f1130 	ldr	r1, [pc, #304]	; 15398 <CUSBPrinterDevice::Configure()+0x214>
   15264:	e5932000 	ldr	r2, [r3]
   15268:	e28d0008 	add	r0, sp, #8
   1526c:	e282c001 	add	ip, r2, #1
   15270:	e583c000 	str	ip, [r3]
   15274:	eb002d72 	bl	20844 <CString::Format(char const*, ...)>
   15278:	eb0017bf 	bl	1b17c <CDeviceNameService::Get()>
   1527c:	e1a06000 	mov	r6, r0
   15280:	e28d0008 	add	r0, sp, #8
   15284:	eb002996 	bl	1f8e4 <CString::operator char const*() const>
   15288:	e1a02005 	mov	r2, r5
   1528c:	e1a01000 	mov	r1, r0
   15290:	e3a03000 	mov	r3, #0
   15294:	e1a00006 	mov	r0, r6
   15298:	eb0016f7 	bl	1ae7c <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   1529c:	e28d0008 	add	r0, sp, #8
   152a0:	eb002946 	bl	1f7c0 <CString::~CString()>
   152a4:	e1a00004 	mov	r0, r4
   152a8:	e28dd01c 	add	sp, sp, #28
   152ac:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   152b0:	e1d430d2 	ldrsb	r3, [r4, #2]
   152b4:	e3530000 	cmp	r3, #0
   152b8:	ba000015 	blt	15314 <CUSBPrinterDevice::Configure()+0x190>
   152bc:	e5953018 	ldr	r3, [r5, #24]
   152c0:	e1a00005 	mov	r0, r5
   152c4:	e3530000 	cmp	r3, #0
   152c8:	1a00002b 	bne	1537c <CUSBPrinterDevice::Configure()+0x1f8>
   152cc:	ebfffd9e 	bl	1494c <CUSBFunction::GetDevice() const>
   152d0:	e1a09000 	mov	r9, r0
   152d4:	e1a00007 	mov	r0, r7
   152d8:	eb00357f 	bl	228dc <operator new(unsigned int)>
   152dc:	e1a08000 	mov	r8, r0
   152e0:	e1a02004 	mov	r2, r4
   152e4:	e1a01009 	mov	r1, r9
   152e8:	ebffe3b1 	bl	e1b4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   152ec:	e5858018 	str	r8, [r5, #24]
   152f0:	eaffffc5 	b	1520c <CUSBPrinterDevice::Configure()+0x88>
   152f4:	eb001e9a 	bl	1cd64 <CLogger::Get()>
   152f8:	e59f309c 	ldr	r3, [pc, #156]	; 1539c <CUSBPrinterDevice::Configure()+0x218>
   152fc:	e3a02001 	mov	r2, #1
   15300:	e59f1088 	ldr	r1, [pc, #136]	; 15390 <CUSBPrinterDevice::Configure()+0x20c>
   15304:	eb00203f 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15308:	e1a00004 	mov	r0, r4
   1530c:	e28dd01c 	add	sp, sp, #28
   15310:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   15314:	e5953014 	ldr	r3, [r5, #20]
   15318:	e1a00005 	mov	r0, r5
   1531c:	e3530000 	cmp	r3, #0
   15320:	1a000015 	bne	1537c <CUSBPrinterDevice::Configure()+0x1f8>
   15324:	ebfffd88 	bl	1494c <CUSBFunction::GetDevice() const>
   15328:	e1a09000 	mov	r9, r0
   1532c:	e1a00007 	mov	r0, r7
   15330:	eb003569 	bl	228dc <operator new(unsigned int)>
   15334:	e1a08000 	mov	r8, r0
   15338:	e1a02004 	mov	r2, r4
   1533c:	e1a01009 	mov	r1, r9
   15340:	ebffe39b 	bl	e1b4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   15344:	e5858014 	str	r8, [r5, #20]
   15348:	eaffffaf 	b	1520c <CUSBPrinterDevice::Configure()+0x88>
   1534c:	e1a00005 	mov	r0, r5
   15350:	e59f1038 	ldr	r1, [pc, #56]	; 15390 <CUSBPrinterDevice::Configure()+0x20c>
   15354:	ebfffdf2 	bl	14b24 <CUSBFunction::ConfigurationError(char const*) const>
   15358:	e3a04000 	mov	r4, #0
   1535c:	eaffff98 	b	151c4 <CUSBPrinterDevice::Configure()+0x40>
   15360:	e1a00005 	mov	r0, r5
   15364:	e59f1024 	ldr	r1, [pc, #36]	; 15390 <CUSBPrinterDevice::Configure()+0x20c>
   15368:	ebfffded 	bl	14b24 <CUSBFunction::ConfigurationError(char const*) const>
   1536c:	eaffff94 	b	151c4 <CUSBPrinterDevice::Configure()+0x40>
   15370:	e59f1018 	ldr	r1, [pc, #24]	; 15390 <CUSBPrinterDevice::Configure()+0x20c>
   15374:	ebfffdea 	bl	14b24 <CUSBFunction::ConfigurationError(char const*) const>
   15378:	eaffff91 	b	151c4 <CUSBPrinterDevice::Configure()+0x40>
   1537c:	e59f100c 	ldr	r1, [pc, #12]	; 15390 <CUSBPrinterDevice::Configure()+0x20c>
   15380:	ebfffde7 	bl	14b24 <CUSBFunction::ConfigurationError(char const*) const>
   15384:	e3a04000 	mov	r4, #0
   15388:	eaffff8d 	b	151c4 <CUSBPrinterDevice::Configure()+0x40>
   1538c:	00025fbc 	.word	0x00025fbc
   15390:	00025f98 	.word	0x00025f98
   15394:	0002b01c 	.word	0x0002b01c
   15398:	00025fdc 	.word	0x00025fdc
   1539c:	00025170 	.word	0x00025170

000153a0 <CUSBBluetoothDevice::~CUSBBluetoothDevice()>:
   153a0:	e3a03000 	mov	r3, #0
   153a4:	e92d4070 	push	{r4, r5, r6, lr}
   153a8:	e1a04000 	mov	r4, r0
   153ac:	e5900020 	ldr	r0, [r0, #32]
   153b0:	e59f20a0 	ldr	r2, [pc, #160]	; 15458 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0xb8>
   153b4:	e1500003 	cmp	r0, r3
   153b8:	e5842000 	str	r2, [r4]
   153bc:	e5843024 	str	r3, [r4, #36]	; 0x24
   153c0:	0a000000 	beq	153c8 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0x28>
   153c4:	eb003547 	bl	228e8 <operator delete[](void*)>
   153c8:	e3a03000 	mov	r3, #0
   153cc:	e5945018 	ldr	r5, [r4, #24]
   153d0:	e5843020 	str	r3, [r4, #32]
   153d4:	e1550003 	cmp	r5, r3
   153d8:	0a000004 	beq	153f0 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0x50>
   153dc:	e1a00005 	mov	r0, r5
   153e0:	ebffe405 	bl	e3fc <CUSBEndpoint::~CUSBEndpoint()>
   153e4:	e1a00005 	mov	r0, r5
   153e8:	e3a01014 	mov	r1, #20
   153ec:	eb00353e 	bl	228ec <operator delete(void*, unsigned int)>
   153f0:	e3a03000 	mov	r3, #0
   153f4:	e5945014 	ldr	r5, [r4, #20]
   153f8:	e5843018 	str	r3, [r4, #24]
   153fc:	e1550003 	cmp	r5, r3
   15400:	0a000004 	beq	15418 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0x78>
   15404:	e1a00005 	mov	r0, r5
   15408:	ebffe3fb 	bl	e3fc <CUSBEndpoint::~CUSBEndpoint()>
   1540c:	e1a00005 	mov	r0, r5
   15410:	e3a01014 	mov	r1, #20
   15414:	eb003534 	bl	228ec <operator delete(void*, unsigned int)>
   15418:	e3a03000 	mov	r3, #0
   1541c:	e5945010 	ldr	r5, [r4, #16]
   15420:	e5843014 	str	r3, [r4, #20]
   15424:	e1550003 	cmp	r5, r3
   15428:	0a000004 	beq	15440 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0xa0>
   1542c:	e1a00005 	mov	r0, r5
   15430:	ebffe3f1 	bl	e3fc <CUSBEndpoint::~CUSBEndpoint()>
   15434:	e1a00005 	mov	r0, r5
   15438:	e3a01014 	mov	r1, #20
   1543c:	eb00352a 	bl	228ec <operator delete(void*, unsigned int)>
   15440:	e3a03000 	mov	r3, #0
   15444:	e1a00004 	mov	r0, r4
   15448:	e5843010 	str	r3, [r4, #16]
   1544c:	ebfffc84 	bl	14664 <CUSBFunction::~CUSBFunction()>
   15450:	e1a00004 	mov	r0, r4
   15454:	e8bd8070 	pop	{r4, r5, r6, pc}
   15458:	00025fec 	.word	0x00025fec

0001545c <CUSBBluetoothDevice::~CUSBBluetoothDevice()>:
   1545c:	e92d4010 	push	{r4, lr}
   15460:	e1a04000 	mov	r4, r0
   15464:	ebffffcd 	bl	153a0 <CUSBBluetoothDevice::~CUSBBluetoothDevice()>
   15468:	e1a00004 	mov	r0, r4
   1546c:	e3a01028 	mov	r1, #40	; 0x28
   15470:	eb00351d 	bl	228ec <operator delete(void*, unsigned int)>
   15474:	e1a00004 	mov	r0, r4
   15478:	e8bd8010 	pop	{r4, pc}

0001547c <CUSBBluetoothDevice::CUSBBluetoothDevice(CUSBFunction*)>:
   1547c:	e92d4010 	push	{r4, lr}
   15480:	e1a04000 	mov	r4, r0
   15484:	ebfffcc4 	bl	1479c <CUSBFunction::CUSBFunction(CUSBFunction*)>
   15488:	e3a03000 	mov	r3, #0
   1548c:	e59f2020 	ldr	r2, [pc, #32]	; 154b4 <CUSBBluetoothDevice::CUSBBluetoothDevice(CUSBFunction*)+0x38>
   15490:	e5843010 	str	r3, [r4, #16]
   15494:	e5842000 	str	r2, [r4]
   15498:	e5843014 	str	r3, [r4, #20]
   1549c:	e5843018 	str	r3, [r4, #24]
   154a0:	e584301c 	str	r3, [r4, #28]
   154a4:	e5843020 	str	r3, [r4, #32]
   154a8:	e5843024 	str	r3, [r4, #36]	; 0x24
   154ac:	e1a00004 	mov	r0, r4
   154b0:	e8bd8010 	pop	{r4, pc}
   154b4:	00025fec 	.word	0x00025fec

000154b8 <CUSBBluetoothDevice::SendHCICommand(void const*, unsigned int)>:
   154b8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   154bc:	e24dd014 	sub	sp, sp, #20
   154c0:	e1a06001 	mov	r6, r1
   154c4:	e1a04002 	mov	r4, r2
   154c8:	e1a07000 	mov	r7, r0
   154cc:	ebfffd3f 	bl	149d0 <CUSBFunction::GetHost() const>
   154d0:	e1a05000 	mov	r5, r0
   154d4:	e1a00007 	mov	r0, r7
   154d8:	ebfffd2b 	bl	1498c <CUSBFunction::GetEndpoint0() const>
   154dc:	e3a03000 	mov	r3, #0
   154e0:	e6ff4074 	uxth	r4, r4
   154e4:	e1a01000 	mov	r1, r0
   154e8:	e58d6008 	str	r6, [sp, #8]
   154ec:	e58d400c 	str	r4, [sp, #12]
   154f0:	e1a00005 	mov	r0, r5
   154f4:	e58d3004 	str	r3, [sp, #4]
   154f8:	e58d3000 	str	r3, [sp]
   154fc:	e3a02020 	mov	r2, #32
   15500:	ebffe441 	bl	e60c <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   15504:	e1e00000 	mvn	r0, r0
   15508:	e1a00fa0 	lsr	r0, r0, #31
   1550c:	e28dd014 	add	sp, sp, #20
   15510:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00015514 <CUSBBluetoothDevice::StartRequest()>:
   15514:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   15518:	e5903010 	ldr	r3, [r0, #16]
   1551c:	e24dd00c 	sub	sp, sp, #12
   15520:	e3530000 	cmp	r3, #0
   15524:	e1a04000 	mov	r4, r0
   15528:	0a000037 	beq	1560c <CUSBBluetoothDevice::StartRequest()+0xf8>
   1552c:	e5943020 	ldr	r3, [r4, #32]
   15530:	e3530000 	cmp	r3, #0
   15534:	0a00002f 	beq	155f8 <CUSBBluetoothDevice::StartRequest()+0xe4>
   15538:	e594601c 	ldr	r6, [r4, #28]
   1553c:	e3560000 	cmp	r6, #0
   15540:	0a00001e 	beq	155c0 <CUSBBluetoothDevice::StartRequest()+0xac>
   15544:	e3a020a6 	mov	r2, #166	; 0xa6
   15548:	e59f10d0 	ldr	r1, [pc, #208]	; 15620 <CUSBBluetoothDevice::StartRequest()+0x10c>
   1554c:	e59f00d0 	ldr	r0, [pc, #208]	; 15624 <CUSBBluetoothDevice::StartRequest()+0x110>
   15550:	eb001410 	bl	1a598 <assertion_failed>
   15554:	e5940010 	ldr	r0, [r4, #16]
   15558:	ebffe3c0 	bl	e460 <CUSBEndpoint::GetMaxPacketSize() const>
   1555c:	e1a06000 	mov	r6, r0
   15560:	e3a00028 	mov	r0, #40	; 0x28
   15564:	ebffe53e 	bl	ea64 <CUSBRequest::operator new(unsigned int)>
   15568:	e3a0c000 	mov	ip, #0
   1556c:	e1a05000 	mov	r5, r0
   15570:	e5942020 	ldr	r2, [r4, #32]
   15574:	e5941010 	ldr	r1, [r4, #16]
   15578:	e1a03006 	mov	r3, r6
   1557c:	e58dc000 	str	ip, [sp]
   15580:	ebffe4a0 	bl	e808 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   15584:	e1a00005 	mov	r0, r5
   15588:	e584501c 	str	r5, [r4, #28]
   1558c:	e1a03004 	mov	r3, r4
   15590:	e3a02000 	mov	r2, #0
   15594:	e59f108c 	ldr	r1, [pc, #140]	; 15628 <CUSBBluetoothDevice::StartRequest()+0x114>
   15598:	ebffe50f 	bl	e9dc <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   1559c:	e1a00004 	mov	r0, r4
   155a0:	ebfffd0a 	bl	149d0 <CUSBFunction::GetHost() const>
   155a4:	e3a02000 	mov	r2, #0
   155a8:	e5903000 	ldr	r3, [r0]
   155ac:	e594101c 	ldr	r1, [r4, #28]
   155b0:	e593300c 	ldr	r3, [r3, #12]
   155b4:	e28dd00c 	add	sp, sp, #12
   155b8:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   155bc:	e12fff13 	bx	r3
   155c0:	e5940010 	ldr	r0, [r4, #16]
   155c4:	ebffe3a5 	bl	e460 <CUSBEndpoint::GetMaxPacketSize() const>
   155c8:	e1a07000 	mov	r7, r0
   155cc:	e3a00028 	mov	r0, #40	; 0x28
   155d0:	ebffe523 	bl	ea64 <CUSBRequest::operator new(unsigned int)>
   155d4:	e1a05000 	mov	r5, r0
   155d8:	e5942020 	ldr	r2, [r4, #32]
   155dc:	e5941010 	ldr	r1, [r4, #16]
   155e0:	e1a03007 	mov	r3, r7
   155e4:	e58d6000 	str	r6, [sp]
   155e8:	ebffe486 	bl	e808 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   155ec:	e584501c 	str	r5, [r4, #28]
   155f0:	e1a00005 	mov	r0, r5
   155f4:	eaffffe4 	b	1558c <CUSBBluetoothDevice::StartRequest()+0x78>
   155f8:	e3a020a4 	mov	r2, #164	; 0xa4
   155fc:	e59f101c 	ldr	r1, [pc, #28]	; 15620 <CUSBBluetoothDevice::StartRequest()+0x10c>
   15600:	e59f0024 	ldr	r0, [pc, #36]	; 1562c <CUSBBluetoothDevice::StartRequest()+0x118>
   15604:	eb0013e3 	bl	1a598 <assertion_failed>
   15608:	eaffffca 	b	15538 <CUSBBluetoothDevice::StartRequest()+0x24>
   1560c:	e3a020a3 	mov	r2, #163	; 0xa3
   15610:	e59f1008 	ldr	r1, [pc, #8]	; 15620 <CUSBBluetoothDevice::StartRequest()+0x10c>
   15614:	e59f0014 	ldr	r0, [pc, #20]	; 15630 <CUSBBluetoothDevice::StartRequest()+0x11c>
   15618:	eb0013de 	bl	1a598 <assertion_failed>
   1561c:	eaffffc2 	b	1552c <CUSBBluetoothDevice::StartRequest()+0x18>
   15620:	00026010 	.word	0x00026010
   15624:	000257ec 	.word	0x000257ec
   15628:	000157ac 	.word	0x000157ac
   1562c:	00026040 	.word	0x00026040
   15630:	00026024 	.word	0x00026024

00015634 <CUSBBluetoothDevice::RegisterHCIEventHandler(void (*)(void const*, unsigned int))>:
   15634:	e3510000 	cmp	r1, #0
   15638:	e92d4010 	push	{r4, lr}
   1563c:	e1a04000 	mov	r4, r0
   15640:	e5801024 	str	r1, [r0, #36]	; 0x24
   15644:	0a000002 	beq	15654 <CUSBBluetoothDevice::RegisterHCIEventHandler(void (*)(void const*, unsigned int))+0x20>
   15648:	e1a00004 	mov	r0, r4
   1564c:	e8bd4010 	pop	{r4, lr}
   15650:	eaffffaf 	b	15514 <CUSBBluetoothDevice::StartRequest()>
   15654:	e59f0014 	ldr	r0, [pc, #20]	; 15670 <CUSBBluetoothDevice::RegisterHCIEventHandler(void (*)(void const*, unsigned int))+0x3c>
   15658:	e3a0209c 	mov	r2, #156	; 0x9c
   1565c:	e59f1010 	ldr	r1, [pc, #16]	; 15674 <CUSBBluetoothDevice::RegisterHCIEventHandler(void (*)(void const*, unsigned int))+0x40>
   15660:	eb0013cc 	bl	1a598 <assertion_failed>
   15664:	e1a00004 	mov	r0, r4
   15668:	e8bd4010 	pop	{r4, lr}
   1566c:	eaffffa8 	b	15514 <CUSBBluetoothDevice::StartRequest()>
   15670:	00026054 	.word	0x00026054
   15674:	00026010 	.word	0x00026010

00015678 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)>:
   15678:	e92d4070 	push	{r4, r5, r6, lr}
   1567c:	e2515000 	subs	r5, r1, #0
   15680:	e1a04000 	mov	r4, r0
   15684:	0a000035 	beq	15760 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xe8>
   15688:	e594301c 	ldr	r3, [r4, #28]
   1568c:	e1550003 	cmp	r5, r3
   15690:	0a000003 	beq	156a4 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x2c>
   15694:	e3a020b3 	mov	r2, #179	; 0xb3
   15698:	e59f10ec 	ldr	r1, [pc, #236]	; 1578c <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x114>
   1569c:	e59f00ec 	ldr	r0, [pc, #236]	; 15790 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x118>
   156a0:	eb0013bc 	bl	1a598 <assertion_failed>
   156a4:	e5943020 	ldr	r3, [r4, #32]
   156a8:	e3530000 	cmp	r3, #0
   156ac:	0a000026 	beq	1574c <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xd4>
   156b0:	e1a00005 	mov	r0, r5
   156b4:	ebffe48d 	bl	e8f0 <CUSBRequest::GetStatus() const>
   156b8:	e3500000 	cmp	r0, #0
   156bc:	0a00001c 	beq	15734 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xbc>
   156c0:	e5946024 	ldr	r6, [r4, #36]	; 0x24
   156c4:	e3560000 	cmp	r6, #0
   156c8:	0a000029 	beq	15774 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xfc>
   156cc:	e1a00005 	mov	r0, r5
   156d0:	e5945020 	ldr	r5, [r4, #32]
   156d4:	ebffe487 	bl	e8f8 <CUSBRequest::GetResultLength() const>
   156d8:	e1a01000 	mov	r1, r0
   156dc:	e1a00005 	mov	r0, r5
   156e0:	e12fff36 	blx	r6
   156e4:	e594501c 	ldr	r5, [r4, #28]
   156e8:	e3550000 	cmp	r5, #0
   156ec:	0a000004 	beq	15704 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x8c>
   156f0:	e1a00005 	mov	r0, r5
   156f4:	ebffe468 	bl	e89c <CUSBRequest::~CUSBRequest()>
   156f8:	e1a00005 	mov	r0, r5
   156fc:	e3a01028 	mov	r1, #40	; 0x28
   15700:	ebffe4ef 	bl	eac4 <CUSBRequest::operator delete(void*, unsigned int)>
   15704:	e3a03000 	mov	r3, #0
   15708:	e1a00004 	mov	r0, r4
   1570c:	e584301c 	str	r3, [r4, #28]
   15710:	ebffff7f 	bl	15514 <CUSBBluetoothDevice::StartRequest()>
   15714:	e3500000 	cmp	r0, #0
   15718:	18bd8070 	popne	{r4, r5, r6, pc}
   1571c:	eb001d90 	bl	1cd64 <CLogger::Get()>
   15720:	e8bd4070 	pop	{r4, r5, r6, lr}
   15724:	e59f3068 	ldr	r3, [pc, #104]	; 15794 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x11c>
   15728:	e3a02001 	mov	r2, #1
   1572c:	e59f1064 	ldr	r1, [pc, #100]	; 15798 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x120>
   15730:	ea001f34 	b	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15734:	eb001d8a 	bl	1cd64 <CLogger::Get()>
   15738:	e59f305c 	ldr	r3, [pc, #92]	; 1579c <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x124>
   1573c:	e3a02002 	mov	r2, #2
   15740:	e59f1050 	ldr	r1, [pc, #80]	; 15798 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x120>
   15744:	eb001f2f 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15748:	eaffffe5 	b	156e4 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x6c>
   1574c:	e3a020b4 	mov	r2, #180	; 0xb4
   15750:	e59f1034 	ldr	r1, [pc, #52]	; 1578c <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x114>
   15754:	e59f0044 	ldr	r0, [pc, #68]	; 157a0 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x128>
   15758:	eb00138e 	bl	1a598 <assertion_failed>
   1575c:	eaffffd3 	b	156b0 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x38>
   15760:	e3a020b2 	mov	r2, #178	; 0xb2
   15764:	e59f1020 	ldr	r1, [pc, #32]	; 1578c <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x114>
   15768:	e59f0034 	ldr	r0, [pc, #52]	; 157a4 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x12c>
   1576c:	eb001389 	bl	1a598 <assertion_failed>
   15770:	eaffffc4 	b	15688 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x10>
   15774:	e3a020b8 	mov	r2, #184	; 0xb8
   15778:	e59f100c 	ldr	r1, [pc, #12]	; 1578c <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x114>
   1577c:	e59f0024 	ldr	r0, [pc, #36]	; 157a8 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x130>
   15780:	eb001384 	bl	1a598 <assertion_failed>
   15784:	e5946024 	ldr	r6, [r4, #36]	; 0x24
   15788:	eaffffcf 	b	156cc <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x54>
   1578c:	00026010 	.word	0x00026010
   15790:	00025810 	.word	0x00025810
   15794:	00025820 	.word	0x00025820
   15798:	00026008 	.word	0x00026008
   1579c:	0002606c 	.word	0x0002606c
   157a0:	00026040 	.word	0x00026040
   157a4:	0002418c 	.word	0x0002418c
   157a8:	00026054 	.word	0x00026054

000157ac <CUSBBluetoothDevice::CompletionStub(CUSBRequest*, void*, void*)>:
   157ac:	e92d4070 	push	{r4, r5, r6, lr}
   157b0:	e2524000 	subs	r4, r2, #0
   157b4:	e1a05000 	mov	r5, r0
   157b8:	0a000003 	beq	157cc <CUSBBluetoothDevice::CompletionStub(CUSBRequest*, void*, void*)+0x20>
   157bc:	e1a01005 	mov	r1, r5
   157c0:	e1a00004 	mov	r0, r4
   157c4:	e8bd4070 	pop	{r4, r5, r6, lr}
   157c8:	eaffffaa 	b	15678 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)>
   157cc:	e59f1018 	ldr	r1, [pc, #24]	; 157ec <CUSBBluetoothDevice::CompletionStub(CUSBRequest*, void*, void*)+0x40>
   157d0:	e59f0018 	ldr	r0, [pc, #24]	; 157f0 <CUSBBluetoothDevice::CompletionStub(CUSBRequest*, void*, void*)+0x44>
   157d4:	e3a020cc 	mov	r2, #204	; 0xcc
   157d8:	eb00136e 	bl	1a598 <assertion_failed>
   157dc:	e1a01005 	mov	r1, r5
   157e0:	e1a00004 	mov	r0, r4
   157e4:	e8bd4070 	pop	{r4, r5, r6, lr}
   157e8:	eaffffa2 	b	15678 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)>
   157ec:	00026010 	.word	0x00026010
   157f0:	000240a0 	.word	0x000240a0

000157f4 <CUSBBluetoothDevice::Configure()>:
   157f4:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   157f8:	e24dd014 	sub	sp, sp, #20
   157fc:	e1a05000 	mov	r5, r0
   15800:	ebfffd1c 	bl	14c78 <CUSBFunction::GetInterfaceNumber() const>
   15804:	e2506000 	subs	r6, r0, #0
   15808:	1a000043 	bne	1591c <CUSBBluetoothDevice::Configure()+0x128>
   1580c:	e1a00005 	mov	r0, r5
   15810:	ebfffc3d 	bl	1490c <CUSBFunction::GetNumEndpoints() const>
   15814:	e3500003 	cmp	r0, #3
   15818:	03a06005 	moveq	r6, #5
   1581c:	03a07014 	moveq	r7, #20
   15820:	1a000037 	bne	15904 <CUSBBluetoothDevice::Configure()+0x110>
   15824:	e1a01006 	mov	r1, r6
   15828:	e1a00005 	mov	r0, r5
   1582c:	ebfffca9 	bl	14ad8 <CUSBFunction::GetDescriptor(unsigned char)>
   15830:	e2504000 	subs	r4, r0, #0
   15834:	0a000041 	beq	15940 <CUSBBluetoothDevice::Configure()+0x14c>
   15838:	e5d42003 	ldrb	r2, [r4, #3]
   1583c:	e202203f 	and	r2, r2, #63	; 0x3f
   15840:	e3520002 	cmp	r2, #2
   15844:	0a00000f 	beq	15888 <CUSBBluetoothDevice::Configure()+0x94>
   15848:	e3520003 	cmp	r2, #3
   1584c:	1afffff4 	bne	15824 <CUSBBluetoothDevice::Configure()+0x30>
   15850:	e5953010 	ldr	r3, [r5, #16]
   15854:	e1a00005 	mov	r0, r5
   15858:	e3530000 	cmp	r3, #0
   1585c:	1a000060 	bne	159e4 <CUSBBluetoothDevice::Configure()+0x1f0>
   15860:	ebfffc39 	bl	1494c <CUSBFunction::GetDevice() const>
   15864:	e1a09000 	mov	r9, r0
   15868:	e1a00007 	mov	r0, r7
   1586c:	eb00341a 	bl	228dc <operator new(unsigned int)>
   15870:	e1a08000 	mov	r8, r0
   15874:	e1a02004 	mov	r2, r4
   15878:	e1a01009 	mov	r1, r9
   1587c:	ebffe24c 	bl	e1b4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   15880:	e5858010 	str	r8, [r5, #16]
   15884:	eaffffe6 	b	15824 <CUSBBluetoothDevice::Configure()+0x30>
   15888:	e1d430d2 	ldrsb	r3, [r4, #2]
   1588c:	e3530000 	cmp	r3, #0
   15890:	ba00000d 	blt	158cc <CUSBBluetoothDevice::Configure()+0xd8>
   15894:	e5953018 	ldr	r3, [r5, #24]
   15898:	e1a00005 	mov	r0, r5
   1589c:	e3530000 	cmp	r3, #0
   158a0:	1a00004f 	bne	159e4 <CUSBBluetoothDevice::Configure()+0x1f0>
   158a4:	ebfffc28 	bl	1494c <CUSBFunction::GetDevice() const>
   158a8:	e1a09000 	mov	r9, r0
   158ac:	e1a00007 	mov	r0, r7
   158b0:	eb003409 	bl	228dc <operator new(unsigned int)>
   158b4:	e1a08000 	mov	r8, r0
   158b8:	e1a02004 	mov	r2, r4
   158bc:	e1a01009 	mov	r1, r9
   158c0:	ebffe23b 	bl	e1b4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   158c4:	e5858018 	str	r8, [r5, #24]
   158c8:	eaffffd5 	b	15824 <CUSBBluetoothDevice::Configure()+0x30>
   158cc:	e5953014 	ldr	r3, [r5, #20]
   158d0:	e1a00005 	mov	r0, r5
   158d4:	e3530000 	cmp	r3, #0
   158d8:	1a000041 	bne	159e4 <CUSBBluetoothDevice::Configure()+0x1f0>
   158dc:	ebfffc1a 	bl	1494c <CUSBFunction::GetDevice() const>
   158e0:	e1a09000 	mov	r9, r0
   158e4:	e1a00007 	mov	r0, r7
   158e8:	eb0033fb 	bl	228dc <operator new(unsigned int)>
   158ec:	e1a08000 	mov	r8, r0
   158f0:	e1a02004 	mov	r2, r4
   158f4:	e1a01009 	mov	r1, r9
   158f8:	ebffe22d 	bl	e1b4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   158fc:	e5858014 	str	r8, [r5, #20]
   15900:	eaffffc7 	b	15824 <CUSBBluetoothDevice::Configure()+0x30>
   15904:	e1a00005 	mov	r0, r5
   15908:	e59f1104 	ldr	r1, [pc, #260]	; 15a14 <CUSBBluetoothDevice::Configure()+0x220>
   1590c:	ebfffc84 	bl	14b24 <CUSBFunction::ConfigurationError(char const*) const>
   15910:	e1a00006 	mov	r0, r6
   15914:	e28dd014 	add	sp, sp, #20
   15918:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1591c:	e3a06000 	mov	r6, #0
   15920:	eb001d0f 	bl	1cd64 <CLogger::Get()>
   15924:	e59f30ec 	ldr	r3, [pc, #236]	; 15a18 <CUSBBluetoothDevice::Configure()+0x224>
   15928:	e3a02002 	mov	r2, #2
   1592c:	e59f10e0 	ldr	r1, [pc, #224]	; 15a14 <CUSBBluetoothDevice::Configure()+0x220>
   15930:	eb001eb4 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15934:	e1a00006 	mov	r0, r6
   15938:	e28dd014 	add	sp, sp, #20
   1593c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   15940:	e5953014 	ldr	r3, [r5, #20]
   15944:	e3530000 	cmp	r3, #0
   15948:	0a000024 	beq	159e0 <CUSBBluetoothDevice::Configure()+0x1ec>
   1594c:	e5953018 	ldr	r3, [r5, #24]
   15950:	e3530000 	cmp	r3, #0
   15954:	0a000021 	beq	159e0 <CUSBBluetoothDevice::Configure()+0x1ec>
   15958:	e5953010 	ldr	r3, [r5, #16]
   1595c:	e3530000 	cmp	r3, #0
   15960:	0a00001e 	beq	159e0 <CUSBBluetoothDevice::Configure()+0x1ec>
   15964:	e1a00005 	mov	r0, r5
   15968:	ebfffc29 	bl	14a14 <CUSBFunction::Configure()>
   1596c:	e2506000 	subs	r6, r0, #0
   15970:	0a000021 	beq	159fc <CUSBBluetoothDevice::Configure()+0x208>
   15974:	e5950010 	ldr	r0, [r5, #16]
   15978:	ebffe2b8 	bl	e460 <CUSBEndpoint::GetMaxPacketSize() const>
   1597c:	eb0033d7 	bl	228e0 <operator new[](unsigned int)>
   15980:	e5850020 	str	r0, [r5, #32]
   15984:	e1a0000d 	mov	r0, sp
   15988:	eb0027bf 	bl	1f88c <CString::CString()>
   1598c:	e59f3088 	ldr	r3, [pc, #136]	; 15a1c <CUSBBluetoothDevice::Configure()+0x228>
   15990:	e59f1088 	ldr	r1, [pc, #136]	; 15a20 <CUSBBluetoothDevice::Configure()+0x22c>
   15994:	e5932000 	ldr	r2, [r3]
   15998:	e1a0000d 	mov	r0, sp
   1599c:	e282c001 	add	ip, r2, #1
   159a0:	e583c000 	str	ip, [r3]
   159a4:	eb002ba6 	bl	20844 <CString::Format(char const*, ...)>
   159a8:	eb0015f3 	bl	1b17c <CDeviceNameService::Get()>
   159ac:	e1a07000 	mov	r7, r0
   159b0:	e1a0000d 	mov	r0, sp
   159b4:	eb0027ca 	bl	1f8e4 <CString::operator char const*() const>
   159b8:	e1a03004 	mov	r3, r4
   159bc:	e1a01000 	mov	r1, r0
   159c0:	e1a02005 	mov	r2, r5
   159c4:	e1a00007 	mov	r0, r7
   159c8:	eb00152b 	bl	1ae7c <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   159cc:	e1a0000d 	mov	r0, sp
   159d0:	eb00277a 	bl	1f7c0 <CString::~CString()>
   159d4:	e1a00006 	mov	r0, r6
   159d8:	e28dd014 	add	sp, sp, #20
   159dc:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   159e0:	e1a00005 	mov	r0, r5
   159e4:	e3a06000 	mov	r6, #0
   159e8:	e59f1024 	ldr	r1, [pc, #36]	; 15a14 <CUSBBluetoothDevice::Configure()+0x220>
   159ec:	ebfffc4c 	bl	14b24 <CUSBFunction::ConfigurationError(char const*) const>
   159f0:	e1a00006 	mov	r0, r6
   159f4:	e28dd014 	add	sp, sp, #20
   159f8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   159fc:	eb001cd8 	bl	1cd64 <CLogger::Get()>
   15a00:	e59f301c 	ldr	r3, [pc, #28]	; 15a24 <CUSBBluetoothDevice::Configure()+0x230>
   15a04:	e3a02001 	mov	r2, #1
   15a08:	e59f1004 	ldr	r1, [pc, #4]	; 15a14 <CUSBBluetoothDevice::Configure()+0x220>
   15a0c:	eb001e7d 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15a10:	eaffffbe 	b	15910 <CUSBBluetoothDevice::Configure()+0x11c>
   15a14:	00026008 	.word	0x00026008
   15a18:	0002607c 	.word	0x0002607c
   15a1c:	0002b020 	.word	0x0002b020
   15a20:	000260a0 	.word	0x000260a0
   15a24:	00025170 	.word	0x00025170

00015a28 <CUSBMIDIDevice::~CUSBMIDIDevice()>:
   15a28:	e92d4070 	push	{r4, r5, r6, lr}
   15a2c:	e1a04000 	mov	r4, r0
   15a30:	e5900020 	ldr	r0, [r0, #32]
   15a34:	e59f304c 	ldr	r3, [pc, #76]	; 15a88 <CUSBMIDIDevice::~CUSBMIDIDevice()+0x60>
   15a38:	e3500000 	cmp	r0, #0
   15a3c:	e5843000 	str	r3, [r4]
   15a40:	0a000002 	beq	15a50 <CUSBMIDIDevice::~CUSBMIDIDevice()+0x28>
   15a44:	eb0033a7 	bl	228e8 <operator delete[](void*)>
   15a48:	e3a03000 	mov	r3, #0
   15a4c:	e5843020 	str	r3, [r4, #32]
   15a50:	e5945010 	ldr	r5, [r4, #16]
   15a54:	e3550000 	cmp	r5, #0
   15a58:	0a000006 	beq	15a78 <CUSBMIDIDevice::~CUSBMIDIDevice()+0x50>
   15a5c:	e1a00005 	mov	r0, r5
   15a60:	ebffe265 	bl	e3fc <CUSBEndpoint::~CUSBEndpoint()>
   15a64:	e1a00005 	mov	r0, r5
   15a68:	e3a01014 	mov	r1, #20
   15a6c:	eb00339e 	bl	228ec <operator delete(void*, unsigned int)>
   15a70:	e3a03000 	mov	r3, #0
   15a74:	e5843010 	str	r3, [r4, #16]
   15a78:	e1a00004 	mov	r0, r4
   15a7c:	ebfffaf8 	bl	14664 <CUSBFunction::~CUSBFunction()>
   15a80:	e1a00004 	mov	r0, r4
   15a84:	e8bd8070 	pop	{r4, r5, r6, pc}
   15a88:	000260b0 	.word	0x000260b0

00015a8c <CUSBMIDIDevice::~CUSBMIDIDevice()>:
   15a8c:	e92d4010 	push	{r4, lr}
   15a90:	e1a04000 	mov	r4, r0
   15a94:	ebffffe3 	bl	15a28 <CUSBMIDIDevice::~CUSBMIDIDevice()>
   15a98:	e1a00004 	mov	r0, r4
   15a9c:	e3a01028 	mov	r1, #40	; 0x28
   15aa0:	eb003391 	bl	228ec <operator delete(void*, unsigned int)>
   15aa4:	e1a00004 	mov	r0, r4
   15aa8:	e8bd8010 	pop	{r4, pc}

00015aac <CUSBMIDIDevice::CUSBMIDIDevice(CUSBFunction*)>:
   15aac:	e92d4010 	push	{r4, lr}
   15ab0:	e1a04000 	mov	r4, r0
   15ab4:	ebfffb38 	bl	1479c <CUSBFunction::CUSBFunction(CUSBFunction*)>
   15ab8:	e3a03000 	mov	r3, #0
   15abc:	e59f201c 	ldr	r2, [pc, #28]	; 15ae0 <CUSBMIDIDevice::CUSBMIDIDevice(CUSBFunction*)+0x34>
   15ac0:	e5843010 	str	r3, [r4, #16]
   15ac4:	e5842000 	str	r2, [r4]
   15ac8:	e5843014 	str	r3, [r4, #20]
   15acc:	e5843018 	str	r3, [r4, #24]
   15ad0:	e5843020 	str	r3, [r4, #32]
   15ad4:	e5843024 	str	r3, [r4, #36]	; 0x24
   15ad8:	e1a00004 	mov	r0, r4
   15adc:	e8bd8010 	pop	{r4, pc}
   15ae0:	000260b0 	.word	0x000260b0

00015ae4 <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))>:
   15ae4:	e5903014 	ldr	r3, [r0, #20]
   15ae8:	e92d4070 	push	{r4, r5, r6, lr}
   15aec:	e3530000 	cmp	r3, #0
   15af0:	e1a04000 	mov	r4, r0
   15af4:	e1a05001 	mov	r5, r1
   15af8:	0a000003 	beq	15b0c <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))+0x28>
   15afc:	e3a02099 	mov	r2, #153	; 0x99
   15b00:	e59f1024 	ldr	r1, [pc, #36]	; 15b2c <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))+0x48>
   15b04:	e59f0024 	ldr	r0, [pc, #36]	; 15b30 <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))+0x4c>
   15b08:	eb0012a2 	bl	1a598 <assertion_failed>
   15b0c:	e3550000 	cmp	r5, #0
   15b10:	e5845014 	str	r5, [r4, #20]
   15b14:	18bd8070 	popne	{r4, r5, r6, pc}
   15b18:	e3a0209b 	mov	r2, #155	; 0x9b
   15b1c:	e8bd4070 	pop	{r4, r5, r6, lr}
   15b20:	e59f1004 	ldr	r1, [pc, #4]	; 15b2c <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))+0x48>
   15b24:	e59f0008 	ldr	r0, [pc, #8]	; 15b34 <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))+0x50>
   15b28:	ea00129a 	b	1a598 <assertion_failed>
   15b2c:	00026114 	.word	0x00026114
   15b30:	00026120 	.word	0x00026120
   15b34:	00026138 	.word	0x00026138

00015b38 <CUSBMIDIDevice::StartRequest()>:
   15b38:	e92d4070 	push	{r4, r5, r6, lr}
   15b3c:	e5903010 	ldr	r3, [r0, #16]
   15b40:	e24dd008 	sub	sp, sp, #8
   15b44:	e3530000 	cmp	r3, #0
   15b48:	e1a04000 	mov	r4, r0
   15b4c:	0a000035 	beq	15c28 <CUSBMIDIDevice::StartRequest()+0xf0>
   15b50:	e5943020 	ldr	r3, [r4, #32]
   15b54:	e3530000 	cmp	r3, #0
   15b58:	0a000037 	beq	15c3c <CUSBMIDIDevice::StartRequest()+0x104>
   15b5c:	e5943018 	ldr	r3, [r4, #24]
   15b60:	e3530000 	cmp	r3, #0
   15b64:	0a000003 	beq	15b78 <CUSBMIDIDevice::StartRequest()+0x40>
   15b68:	e3a020a3 	mov	r2, #163	; 0xa3
   15b6c:	e59f10dc 	ldr	r1, [pc, #220]	; 15c50 <CUSBMIDIDevice::StartRequest()+0x118>
   15b70:	e59f00dc 	ldr	r0, [pc, #220]	; 15c54 <CUSBMIDIDevice::StartRequest()+0x11c>
   15b74:	eb001287 	bl	1a598 <assertion_failed>
   15b78:	e1d451bc 	ldrh	r5, [r4, #28]
   15b7c:	e3550000 	cmp	r5, #0
   15b80:	0a000019 	beq	15bec <CUSBMIDIDevice::StartRequest()+0xb4>
   15b84:	e3a00028 	mov	r0, #40	; 0x28
   15b88:	ebffe3b5 	bl	ea64 <CUSBRequest::operator new(unsigned int)>
   15b8c:	e3a0c000 	mov	ip, #0
   15b90:	e1a05000 	mov	r5, r0
   15b94:	e1d431bc 	ldrh	r3, [r4, #28]
   15b98:	e5942020 	ldr	r2, [r4, #32]
   15b9c:	e5941010 	ldr	r1, [r4, #16]
   15ba0:	e58dc000 	str	ip, [sp]
   15ba4:	ebffe317 	bl	e808 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   15ba8:	e1a00005 	mov	r0, r5
   15bac:	e5845018 	str	r5, [r4, #24]
   15bb0:	e1a03004 	mov	r3, r4
   15bb4:	e3a02000 	mov	r2, #0
   15bb8:	e59f1098 	ldr	r1, [pc, #152]	; 15c58 <CUSBMIDIDevice::StartRequest()+0x120>
   15bbc:	ebffe386 	bl	e9dc <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   15bc0:	e5940018 	ldr	r0, [r4, #24]
   15bc4:	ebffe3a1 	bl	ea50 <CUSBRequest::SetCompleteOnNAK()>
   15bc8:	e1a00004 	mov	r0, r4
   15bcc:	ebfffb7f 	bl	149d0 <CUSBFunction::GetHost() const>
   15bd0:	e3a02000 	mov	r2, #0
   15bd4:	e5903000 	ldr	r3, [r0]
   15bd8:	e5941018 	ldr	r1, [r4, #24]
   15bdc:	e593300c 	ldr	r3, [r3, #12]
   15be0:	e28dd008 	add	sp, sp, #8
   15be4:	e8bd4070 	pop	{r4, r5, r6, lr}
   15be8:	e12fff13 	bx	r3
   15bec:	e3a020a4 	mov	r2, #164	; 0xa4
   15bf0:	e59f1058 	ldr	r1, [pc, #88]	; 15c50 <CUSBMIDIDevice::StartRequest()+0x118>
   15bf4:	e59f0060 	ldr	r0, [pc, #96]	; 15c5c <CUSBMIDIDevice::StartRequest()+0x124>
   15bf8:	eb001266 	bl	1a598 <assertion_failed>
   15bfc:	e3a00028 	mov	r0, #40	; 0x28
   15c00:	ebffe397 	bl	ea64 <CUSBRequest::operator new(unsigned int)>
   15c04:	e1a06000 	mov	r6, r0
   15c08:	e1d431bc 	ldrh	r3, [r4, #28]
   15c0c:	e5942020 	ldr	r2, [r4, #32]
   15c10:	e5941010 	ldr	r1, [r4, #16]
   15c14:	e58d5000 	str	r5, [sp]
   15c18:	ebffe2fa 	bl	e808 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   15c1c:	e1a00006 	mov	r0, r6
   15c20:	e5846018 	str	r6, [r4, #24]
   15c24:	eaffffe1 	b	15bb0 <CUSBMIDIDevice::StartRequest()+0x78>
   15c28:	e3a020a0 	mov	r2, #160	; 0xa0
   15c2c:	e59f101c 	ldr	r1, [pc, #28]	; 15c50 <CUSBMIDIDevice::StartRequest()+0x118>
   15c30:	e59f0028 	ldr	r0, [pc, #40]	; 15c60 <CUSBMIDIDevice::StartRequest()+0x128>
   15c34:	eb001257 	bl	1a598 <assertion_failed>
   15c38:	eaffffc4 	b	15b50 <CUSBMIDIDevice::StartRequest()+0x18>
   15c3c:	e3a020a1 	mov	r2, #161	; 0xa1
   15c40:	e59f1008 	ldr	r1, [pc, #8]	; 15c50 <CUSBMIDIDevice::StartRequest()+0x118>
   15c44:	e59f0018 	ldr	r0, [pc, #24]	; 15c64 <CUSBMIDIDevice::StartRequest()+0x12c>
   15c48:	eb001252 	bl	1a598 <assertion_failed>
   15c4c:	eaffffc2 	b	15b5c <CUSBMIDIDevice::StartRequest()+0x24>
   15c50:	00026114 	.word	0x00026114
   15c54:	000257ec 	.word	0x000257ec
   15c58:	00015e38 	.word	0x00015e38
   15c5c:	0002617c 	.word	0x0002617c
   15c60:	00026150 	.word	0x00026150
   15c64:	00026164 	.word	0x00026164

00015c68 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)>:
   15c68:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   15c6c:	e2514000 	subs	r4, r1, #0
   15c70:	e24dd00c 	sub	sp, sp, #12
   15c74:	e1a05000 	mov	r5, r0
   15c78:	0a00005b 	beq	15dec <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x184>
   15c7c:	e5953018 	ldr	r3, [r5, #24]
   15c80:	e1540003 	cmp	r4, r3
   15c84:	0a000003 	beq	15c98 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x30>
   15c88:	e3a020b1 	mov	r2, #177	; 0xb1
   15c8c:	e59f1184 	ldr	r1, [pc, #388]	; 15e18 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1b0>
   15c90:	e59f0184 	ldr	r0, [pc, #388]	; 15e1c <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1b4>
   15c94:	eb00123f 	bl	1a598 <assertion_failed>
   15c98:	e1a00004 	mov	r0, r4
   15c9c:	ebffe313 	bl	e8f0 <CUSBRequest::GetStatus() const>
   15ca0:	e3500000 	cmp	r0, #0
   15ca4:	1a000020 	bne	15d2c <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0xc4>
   15ca8:	e5954018 	ldr	r4, [r5, #24]
   15cac:	e3540000 	cmp	r4, #0
   15cb0:	13a09000 	movne	r9, #0
   15cb4:	0a000008 	beq	15cdc <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x74>
   15cb8:	e1a00004 	mov	r0, r4
   15cbc:	ebffe2f6 	bl	e89c <CUSBRequest::~CUSBRequest()>
   15cc0:	e1a00004 	mov	r0, r4
   15cc4:	e3a01028 	mov	r1, #40	; 0x28
   15cc8:	ebffe37d 	bl	eac4 <CUSBRequest::operator delete(void*, unsigned int)>
   15ccc:	e3a03000 	mov	r3, #0
   15cd0:	e1590003 	cmp	r9, r3
   15cd4:	e5853018 	str	r3, [r5, #24]
   15cd8:	1a00003f 	bne	15ddc <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x174>
   15cdc:	e5953024 	ldr	r3, [r5, #36]	; 0x24
   15ce0:	e3530000 	cmp	r3, #0
   15ce4:	1a000037 	bne	15dc8 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x160>
   15ce8:	eb002e7e 	bl	216e8 <CTimer::Get()>
   15cec:	e58d5000 	str	r5, [sp]
   15cf0:	e3a03000 	mov	r3, #0
   15cf4:	e59f2124 	ldr	r2, [pc, #292]	; 15e20 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1b8>
   15cf8:	e3a01001 	mov	r1, #1
   15cfc:	eb002caa 	bl	20fac <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
   15d00:	e3500000 	cmp	r0, #0
   15d04:	e5850024 	str	r0, [r5, #36]	; 0x24
   15d08:	0a000001 	beq	15d14 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0xac>
   15d0c:	e28dd00c 	add	sp, sp, #12
   15d10:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   15d14:	e3a020d9 	mov	r2, #217	; 0xd9
   15d18:	e59f10f8 	ldr	r1, [pc, #248]	; 15e18 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1b0>
   15d1c:	e59f0100 	ldr	r0, [pc, #256]	; 15e24 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1bc>
   15d20:	e28dd00c 	add	sp, sp, #12
   15d24:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
   15d28:	ea00121a 	b	1a598 <assertion_failed>
   15d2c:	e1a00004 	mov	r0, r4
   15d30:	ebffe2f0 	bl	e8f8 <CUSBRequest::GetResultLength() const>
   15d34:	e3100003 	tst	r0, #3
   15d38:	1affffda 	bne	15ca8 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x40>
   15d3c:	e5958020 	ldr	r8, [r5, #32]
   15d40:	e3580000 	cmp	r8, #0
   15d44:	0a00002d 	beq	15e00 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x198>
   15d48:	e1a00004 	mov	r0, r4
   15d4c:	ebffe2e9 	bl	e8f8 <CUSBRequest::GetResultLength() const>
   15d50:	e5954020 	ldr	r4, [r5, #32]
   15d54:	e0888000 	add	r8, r8, r0
   15d58:	e1580004 	cmp	r8, r4
   15d5c:	9affffd1 	bls	15ca8 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x40>
   15d60:	e3a09000 	mov	r9, #0
   15d64:	e3a07001 	mov	r7, #1
   15d68:	e59f60b8 	ldr	r6, [pc, #184]	; 15e28 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1c0>
   15d6c:	e2844001 	add	r4, r4, #1
   15d70:	e5540001 	ldrb	r0, [r4, #-1]
   15d74:	e3500000 	cmp	r0, #0
   15d78:	0a00000a 	beq	15da8 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x140>
   15d7c:	e5959014 	ldr	r9, [r5, #20]
   15d80:	e200300f 	and	r3, r0, #15
   15d84:	e3590000 	cmp	r9, #0
   15d88:	e0863103 	add	r3, r6, r3, lsl #2
   15d8c:	e1a00220 	lsr	r0, r0, #4
   15d90:	01a09007 	moveq	r9, r7
   15d94:	0a000003 	beq	15da8 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x140>
   15d98:	e5932024 	ldr	r2, [r3, #36]	; 0x24
   15d9c:	e1a01004 	mov	r1, r4
   15da0:	e12fff39 	blx	r9
   15da4:	e1a09007 	mov	r9, r7
   15da8:	e2843003 	add	r3, r4, #3
   15dac:	e1580003 	cmp	r8, r3
   15db0:	e2844004 	add	r4, r4, #4
   15db4:	8affffed 	bhi	15d70 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x108>
   15db8:	e5954018 	ldr	r4, [r5, #24]
   15dbc:	e3540000 	cmp	r4, #0
   15dc0:	1affffbc 	bne	15cb8 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x50>
   15dc4:	eaffffc0 	b	15ccc <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x64>
   15dc8:	e3a020d7 	mov	r2, #215	; 0xd7
   15dcc:	e59f1044 	ldr	r1, [pc, #68]	; 15e18 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1b0>
   15dd0:	e59f0054 	ldr	r0, [pc, #84]	; 15e2c <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1c4>
   15dd4:	eb0011ef 	bl	1a598 <assertion_failed>
   15dd8:	eaffffc2 	b	15ce8 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x80>
   15ddc:	e1a00005 	mov	r0, r5
   15de0:	e28dd00c 	add	sp, sp, #12
   15de4:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
   15de8:	eaffff52 	b	15b38 <CUSBMIDIDevice::StartRequest()>
   15dec:	e3a020b0 	mov	r2, #176	; 0xb0
   15df0:	e59f1020 	ldr	r1, [pc, #32]	; 15e18 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1b0>
   15df4:	e59f0034 	ldr	r0, [pc, #52]	; 15e30 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1c8>
   15df8:	eb0011e6 	bl	1a598 <assertion_failed>
   15dfc:	eaffff9e 	b	15c7c <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x14>
   15e00:	e3a020b8 	mov	r2, #184	; 0xb8
   15e04:	e59f100c 	ldr	r1, [pc, #12]	; 15e18 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1b0>
   15e08:	e59f0024 	ldr	r0, [pc, #36]	; 15e34 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1cc>
   15e0c:	eb0011e1 	bl	1a598 <assertion_failed>
   15e10:	e5958020 	ldr	r8, [r5, #32]
   15e14:	eaffffcb 	b	15d48 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0xe0>
   15e18:	00026114 	.word	0x00026114
   15e1c:	00025810 	.word	0x00025810
   15e20:	00015ec0 	.word	0x00015ec0
   15e24:	000261a0 	.word	0x000261a0
   15e28:	000260a8 	.word	0x000260a8
   15e2c:	00026190 	.word	0x00026190
   15e30:	0002418c 	.word	0x0002418c
   15e34:	00026164 	.word	0x00026164

00015e38 <CUSBMIDIDevice::CompletionStub(CUSBRequest*, void*, void*)>:
   15e38:	e92d4070 	push	{r4, r5, r6, lr}
   15e3c:	e2524000 	subs	r4, r2, #0
   15e40:	e1a05000 	mov	r5, r0
   15e44:	0a000003 	beq	15e58 <CUSBMIDIDevice::CompletionStub(CUSBRequest*, void*, void*)+0x20>
   15e48:	e1a01005 	mov	r1, r5
   15e4c:	e1a00004 	mov	r0, r4
   15e50:	e8bd4070 	pop	{r4, r5, r6, lr}
   15e54:	eaffff83 	b	15c68 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)>
   15e58:	e59f1018 	ldr	r1, [pc, #24]	; 15e78 <CUSBMIDIDevice::CompletionStub(CUSBRequest*, void*, void*)+0x40>
   15e5c:	e59f0018 	ldr	r0, [pc, #24]	; 15e7c <CUSBMIDIDevice::CompletionStub(CUSBRequest*, void*, void*)+0x44>
   15e60:	e3a020e0 	mov	r2, #224	; 0xe0
   15e64:	eb0011cb 	bl	1a598 <assertion_failed>
   15e68:	e1a01005 	mov	r1, r5
   15e6c:	e1a00004 	mov	r0, r4
   15e70:	e8bd4070 	pop	{r4, r5, r6, lr}
   15e74:	eaffff7b 	b	15c68 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)>
   15e78:	00026114 	.word	0x00026114
   15e7c:	000240a0 	.word	0x000240a0

00015e80 <CUSBMIDIDevice::TimerHandler(unsigned int)>:
   15e80:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   15e84:	e92d4010 	push	{r4, lr}
   15e88:	e1530001 	cmp	r3, r1
   15e8c:	e1a04000 	mov	r4, r0
   15e90:	0a000003 	beq	15ea4 <CUSBMIDIDevice::TimerHandler(unsigned int)+0x24>
   15e94:	e3a020e7 	mov	r2, #231	; 0xe7
   15e98:	e59f1018 	ldr	r1, [pc, #24]	; 15eb8 <CUSBMIDIDevice::TimerHandler(unsigned int)+0x38>
   15e9c:	e59f0018 	ldr	r0, [pc, #24]	; 15ebc <CUSBMIDIDevice::TimerHandler(unsigned int)+0x3c>
   15ea0:	eb0011bc 	bl	1a598 <assertion_failed>
   15ea4:	e3a03000 	mov	r3, #0
   15ea8:	e1a00004 	mov	r0, r4
   15eac:	e5843024 	str	r3, [r4, #36]	; 0x24
   15eb0:	e8bd4010 	pop	{r4, lr}
   15eb4:	eaffff1f 	b	15b38 <CUSBMIDIDevice::StartRequest()>
   15eb8:	00026114 	.word	0x00026114
   15ebc:	000261b0 	.word	0x000261b0

00015ec0 <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)>:
   15ec0:	e92d4070 	push	{r4, r5, r6, lr}
   15ec4:	e2524000 	subs	r4, r2, #0
   15ec8:	e1a05000 	mov	r5, r0
   15ecc:	0a000003 	beq	15ee0 <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)+0x20>
   15ed0:	e1a01005 	mov	r1, r5
   15ed4:	e1a00004 	mov	r0, r4
   15ed8:	e8bd4070 	pop	{r4, r5, r6, lr}
   15edc:	eaffffe7 	b	15e80 <CUSBMIDIDevice::TimerHandler(unsigned int)>
   15ee0:	e59f1018 	ldr	r1, [pc, #24]	; 15f00 <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)+0x40>
   15ee4:	e59f0018 	ldr	r0, [pc, #24]	; 15f04 <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)+0x44>
   15ee8:	e3a020f0 	mov	r2, #240	; 0xf0
   15eec:	eb0011a9 	bl	1a598 <assertion_failed>
   15ef0:	e1a01005 	mov	r1, r5
   15ef4:	e1a00004 	mov	r0, r4
   15ef8:	e8bd4070 	pop	{r4, r5, r6, lr}
   15efc:	eaffffdf 	b	15e80 <CUSBMIDIDevice::TimerHandler(unsigned int)>
   15f00:	00026114 	.word	0x00026114
   15f04:	000240a0 	.word	0x000240a0

00015f08 <CUSBMIDIDevice::Configure()>:
   15f08:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15f0c:	e24dd01c 	sub	sp, sp, #28
   15f10:	e1a05000 	mov	r5, r0
   15f14:	ebfffa7c 	bl	1490c <CUSBFunction::GetNumEndpoints() const>
   15f18:	e2506000 	subs	r6, r0, #0
   15f1c:	e1a00005 	mov	r0, r5
   15f20:	0a000073 	beq	160f4 <CUSBMIDIDevice::Configure()+0x1ec>
   15f24:	ebfffa88 	bl	1494c <CUSBFunction::GetDevice() const>
   15f28:	ebffde02 	bl	d738 <CUSBDevice::GetDeviceDescriptor() const>
   15f2c:	e2504000 	subs	r4, r0, #0
   15f30:	0a000077 	beq	16114 <CUSBMIDIDevice::Configure()+0x20c>
   15f34:	e5d43008 	ldrb	r3, [r4, #8]
   15f38:	e5d41009 	ldrb	r1, [r4, #9]
   15f3c:	e59f21f8 	ldr	r2, [pc, #504]	; 1613c <CUSBMIDIDevice::Configure()+0x234>
   15f40:	e1833401 	orr	r3, r3, r1, lsl #8
   15f44:	e1530002 	cmp	r3, r2
   15f48:	05d4700a 	ldrbeq	r7, [r4, #10]
   15f4c:	05d4200b 	ldrbeq	r2, [r4, #11]
   15f50:	059f31e8 	ldreq	r3, [pc, #488]	; 16140 <CUSBMIDIDevice::Configure()+0x238>
   15f54:	01877402 	orreq	r7, r7, r2, lsl #8
   15f58:	00477003 	subeq	r7, r7, r3
   15f5c:	016f7f17 	clzeq	r7, r7
   15f60:	13a07000 	movne	r7, #0
   15f64:	e3a06005 	mov	r6, #5
   15f68:	e3a08014 	mov	r8, #20
   15f6c:	e3a0b07d 	mov	fp, #125	; 0x7d
   15f70:	e59fa1cc 	ldr	sl, [pc, #460]	; 16144 <CUSBMIDIDevice::Configure()+0x23c>
   15f74:	01a072a7 	lsreq	r7, r7, #5
   15f78:	e1a01006 	mov	r1, r6
   15f7c:	e1a00005 	mov	r0, r5
   15f80:	ebfffad4 	bl	14ad8 <CUSBFunction::GetDescriptor(unsigned char)>
   15f84:	e2504000 	subs	r4, r0, #0
   15f88:	0a000026 	beq	16028 <CUSBMIDIDevice::Configure()+0x120>
   15f8c:	e1d430d2 	ldrsb	r3, [r4, #2]
   15f90:	e3530000 	cmp	r3, #0
   15f94:	aafffff7 	bge	15f78 <CUSBMIDIDevice::Configure()+0x70>
   15f98:	e5d43003 	ldrb	r3, [r4, #3]
   15f9c:	e203303f 	and	r3, r3, #63	; 0x3f
   15fa0:	e3530002 	cmp	r3, #2
   15fa4:	1afffff3 	bne	15f78 <CUSBMIDIDevice::Configure()+0x70>
   15fa8:	e3570000 	cmp	r7, #0
   15fac:	0a000046 	beq	160cc <CUSBMIDIDevice::Configure()+0x1c4>
   15fb0:	e5953010 	ldr	r3, [r5, #16]
   15fb4:	e3530000 	cmp	r3, #0
   15fb8:	1a00005a 	bne	16128 <CUSBMIDIDevice::Configure()+0x220>
   15fbc:	e1a00005 	mov	r0, r5
   15fc0:	ebfffa61 	bl	1494c <CUSBFunction::GetDevice() const>
   15fc4:	e58d0004 	str	r0, [sp, #4]
   15fc8:	e1a00008 	mov	r0, r8
   15fcc:	eb003242 	bl	228dc <operator new(unsigned int)>
   15fd0:	e1a09000 	mov	r9, r0
   15fd4:	e1a02004 	mov	r2, r4
   15fd8:	e59d1004 	ldr	r1, [sp, #4]
   15fdc:	ebffe074 	bl	e1b4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   15fe0:	e5859010 	str	r9, [r5, #16]
   15fe4:	e5d40004 	ldrb	r0, [r4, #4]
   15fe8:	e5d42005 	ldrb	r2, [r4, #5]
   15fec:	e5953020 	ldr	r3, [r5, #32]
   15ff0:	e1800402 	orr	r0, r0, r2, lsl #8
   15ff4:	e3c00003 	bic	r0, r0, #3
   15ff8:	e6ff0070 	uxth	r0, r0
   15ffc:	e3530000 	cmp	r3, #0
   16000:	e1c501bc 	strh	r0, [r5, #28]
   16004:	0a00003f 	beq	16108 <CUSBMIDIDevice::Configure()+0x200>
   16008:	e1a0200b 	mov	r2, fp
   1600c:	e1a0100a 	mov	r1, sl
   16010:	e59f0130 	ldr	r0, [pc, #304]	; 16148 <CUSBMIDIDevice::Configure()+0x240>
   16014:	eb00115f 	bl	1a598 <assertion_failed>
   16018:	e1d501bc 	ldrh	r0, [r5, #28]
   1601c:	eb00322f 	bl	228e0 <operator new[](unsigned int)>
   16020:	e5850020 	str	r0, [r5, #32]
   16024:	eaffffd3 	b	15f78 <CUSBMIDIDevice::Configure()+0x70>
   16028:	e5956010 	ldr	r6, [r5, #16]
   1602c:	e1a00005 	mov	r0, r5
   16030:	e3560000 	cmp	r6, #0
   16034:	0a00002e 	beq	160f4 <CUSBMIDIDevice::Configure()+0x1ec>
   16038:	ebfffa75 	bl	14a14 <CUSBFunction::Configure()>
   1603c:	e2506000 	subs	r6, r0, #0
   16040:	0a000019 	beq	160ac <CUSBMIDIDevice::Configure()+0x1a4>
   16044:	e28d0008 	add	r0, sp, #8
   16048:	eb00260f 	bl	1f88c <CString::CString()>
   1604c:	e59f30f8 	ldr	r3, [pc, #248]	; 1614c <CUSBMIDIDevice::Configure()+0x244>
   16050:	e59f10f8 	ldr	r1, [pc, #248]	; 16150 <CUSBMIDIDevice::Configure()+0x248>
   16054:	e5932000 	ldr	r2, [r3]
   16058:	e28d0008 	add	r0, sp, #8
   1605c:	e282c001 	add	ip, r2, #1
   16060:	e583c000 	str	ip, [r3]
   16064:	eb0029f6 	bl	20844 <CString::Format(char const*, ...)>
   16068:	eb001443 	bl	1b17c <CDeviceNameService::Get()>
   1606c:	e1a06000 	mov	r6, r0
   16070:	e28d0008 	add	r0, sp, #8
   16074:	eb00261a 	bl	1f8e4 <CString::operator char const*() const>
   16078:	e1a03004 	mov	r3, r4
   1607c:	e1a01000 	mov	r1, r0
   16080:	e1a02005 	mov	r2, r5
   16084:	e1a00006 	mov	r0, r6
   16088:	eb00137b 	bl	1ae7c <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   1608c:	e1a00005 	mov	r0, r5
   16090:	ebfffea8 	bl	15b38 <CUSBMIDIDevice::StartRequest()>
   16094:	e1a06000 	mov	r6, r0
   16098:	e28d0008 	add	r0, sp, #8
   1609c:	eb0025c7 	bl	1f7c0 <CString::~CString()>
   160a0:	e1a00006 	mov	r0, r6
   160a4:	e28dd01c 	add	sp, sp, #28
   160a8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   160ac:	eb001b2c 	bl	1cd64 <CLogger::Get()>
   160b0:	e59f309c 	ldr	r3, [pc, #156]	; 16154 <CUSBMIDIDevice::Configure()+0x24c>
   160b4:	e3a02001 	mov	r2, #1
   160b8:	e59f1098 	ldr	r1, [pc, #152]	; 16158 <CUSBMIDIDevice::Configure()+0x250>
   160bc:	eb001cd1 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   160c0:	e1a00006 	mov	r0, r6
   160c4:	e28dd01c 	add	sp, sp, #28
   160c8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   160cc:	e3a01025 	mov	r1, #37	; 0x25
   160d0:	e1a00005 	mov	r0, r5
   160d4:	ebfffa7f 	bl	14ad8 <CUSBFunction::GetDescriptor(unsigned char)>
   160d8:	e3500000 	cmp	r0, #0
   160dc:	0affffa5 	beq	15f78 <CUSBMIDIDevice::Configure()+0x70>
   160e0:	e5d43000 	ldrb	r3, [r4]
   160e4:	e0843003 	add	r3, r4, r3
   160e8:	e1500003 	cmp	r0, r3
   160ec:	1affffa1 	bne	15f78 <CUSBMIDIDevice::Configure()+0x70>
   160f0:	eaffffae 	b	15fb0 <CUSBMIDIDevice::Configure()+0xa8>
   160f4:	e59f105c 	ldr	r1, [pc, #92]	; 16158 <CUSBMIDIDevice::Configure()+0x250>
   160f8:	ebfffa89 	bl	14b24 <CUSBFunction::ConfigurationError(char const*) const>
   160fc:	e1a00006 	mov	r0, r6
   16100:	e28dd01c 	add	sp, sp, #28
   16104:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16108:	eb0031f4 	bl	228e0 <operator new[](unsigned int)>
   1610c:	e5850020 	str	r0, [r5, #32]
   16110:	eaffff98 	b	15f78 <CUSBMIDIDevice::Configure()+0x70>
   16114:	e3a02051 	mov	r2, #81	; 0x51
   16118:	e59f1024 	ldr	r1, [pc, #36]	; 16144 <CUSBMIDIDevice::Configure()+0x23c>
   1611c:	e59f0038 	ldr	r0, [pc, #56]	; 1615c <CUSBMIDIDevice::Configure()+0x254>
   16120:	eb00111c 	bl	1a598 <assertion_failed>
   16124:	eaffff82 	b	15f34 <CUSBMIDIDevice::Configure()+0x2c>
   16128:	e1a00005 	mov	r0, r5
   1612c:	e59f1024 	ldr	r1, [pc, #36]	; 16158 <CUSBMIDIDevice::Configure()+0x250>
   16130:	ebfffa7b 	bl	14b24 <CUSBFunction::ConfigurationError(char const*) const>
   16134:	e3a06000 	mov	r6, #0
   16138:	eaffffd8 	b	160a0 <CUSBMIDIDevice::Configure()+0x198>
   1613c:	00000582 	.word	0x00000582
   16140:	0000012a 	.word	0x0000012a
   16144:	00026114 	.word	0x00026114
   16148:	000261d8 	.word	0x000261d8
   1614c:	0002b024 	.word	0x0002b024
   16150:	000261f0 	.word	0x000261f0
   16154:	00025170 	.word	0x00025170
   16158:	0002610c 	.word	0x0002610c
   1615c:	000261c4 	.word	0x000261c4

00016160 <CUSBCDCEthernetDevice::GetMACAddress() const>:
   16160:	e2800018 	add	r0, r0, #24
   16164:	e12fff1e 	bx	lr

00016168 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>:
   16168:	e92d4070 	push	{r4, r5, r6, lr}
   1616c:	e5905014 	ldr	r5, [r0, #20]
   16170:	e59f3068 	ldr	r3, [pc, #104]	; 161e0 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()+0x78>
   16174:	e3550000 	cmp	r5, #0
   16178:	e1a04000 	mov	r4, r0
   1617c:	e5803000 	str	r3, [r0]
   16180:	0a000004 	beq	16198 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()+0x30>
   16184:	e1a00005 	mov	r0, r5
   16188:	ebffe09b 	bl	e3fc <CUSBEndpoint::~CUSBEndpoint()>
   1618c:	e1a00005 	mov	r0, r5
   16190:	e3a01014 	mov	r1, #20
   16194:	eb0031d4 	bl	228ec <operator delete(void*, unsigned int)>
   16198:	e3a03000 	mov	r3, #0
   1619c:	e5945010 	ldr	r5, [r4, #16]
   161a0:	e5843014 	str	r3, [r4, #20]
   161a4:	e1550003 	cmp	r5, r3
   161a8:	0a000004 	beq	161c0 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()+0x58>
   161ac:	e1a00005 	mov	r0, r5
   161b0:	ebffe091 	bl	e3fc <CUSBEndpoint::~CUSBEndpoint()>
   161b4:	e1a00005 	mov	r0, r5
   161b8:	e3a01014 	mov	r1, #20
   161bc:	eb0031ca 	bl	228ec <operator delete(void*, unsigned int)>
   161c0:	e3a03000 	mov	r3, #0
   161c4:	e2840018 	add	r0, r4, #24
   161c8:	e5843010 	str	r3, [r4, #16]
   161cc:	eb000a0d 	bl	18a08 <CMACAddress::~CMACAddress()>
   161d0:	e1a00004 	mov	r0, r4
   161d4:	eb000abb 	bl	18cc8 <CNetDevice::~CNetDevice()>
   161d8:	e1a00004 	mov	r0, r4
   161dc:	e8bd8070 	pop	{r4, r5, r6, pc}
   161e0:	00026200 	.word	0x00026200

000161e4 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>:
   161e4:	e92d4010 	push	{r4, lr}
   161e8:	e1a04000 	mov	r4, r0
   161ec:	ebffffdd 	bl	16168 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>
   161f0:	e1a00004 	mov	r0, r4
   161f4:	e3a01020 	mov	r1, #32
   161f8:	eb0031bb 	bl	228ec <operator delete(void*, unsigned int)>
   161fc:	e1a00004 	mov	r0, r4
   16200:	e8bd8010 	pop	{r4, pc}

00016204 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)>:
   16204:	e92d4070 	push	{r4, r5, r6, lr}
   16208:	e5903014 	ldr	r3, [r0, #20]
   1620c:	e24dd008 	sub	sp, sp, #8
   16210:	e3530000 	cmp	r3, #0
   16214:	e1a04000 	mov	r4, r0
   16218:	e1a05001 	mov	r5, r1
   1621c:	e1a06002 	mov	r6, r2
   16220:	0a000018 	beq	16288 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x84>
   16224:	e3550000 	cmp	r5, #0
   16228:	0a000011 	beq	16274 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x70>
   1622c:	e3560d19 	cmp	r6, #1600	; 0x640
   16230:	9a000003 	bls	16244 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x40>
   16234:	e3a020ac 	mov	r2, #172	; 0xac
   16238:	e59f105c 	ldr	r1, [pc, #92]	; 1629c <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x98>
   1623c:	e59f005c 	ldr	r0, [pc, #92]	; 162a0 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x9c>
   16240:	eb0010d4 	bl	1a598 <assertion_failed>
   16244:	e1a00004 	mov	r0, r4
   16248:	ebfff9e0 	bl	149d0 <CUSBFunction::GetHost() const>
   1624c:	e3a0c000 	mov	ip, #0
   16250:	e5941014 	ldr	r1, [r4, #20]
   16254:	e1a03006 	mov	r3, r6
   16258:	e1a02005 	mov	r2, r5
   1625c:	e58dc000 	str	ip, [sp]
   16260:	ebffe14f 	bl	e7a4 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   16264:	e1e00000 	mvn	r0, r0
   16268:	e1a00fa0 	lsr	r0, r0, #31
   1626c:	e28dd008 	add	sp, sp, #8
   16270:	e8bd8070 	pop	{r4, r5, r6, pc}
   16274:	e3a020ab 	mov	r2, #171	; 0xab
   16278:	e59f101c 	ldr	r1, [pc, #28]	; 1629c <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x98>
   1627c:	e59f0020 	ldr	r0, [pc, #32]	; 162a4 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0xa0>
   16280:	eb0010c4 	bl	1a598 <assertion_failed>
   16284:	eaffffe8 	b	1622c <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x28>
   16288:	e3a020aa 	mov	r2, #170	; 0xaa
   1628c:	e59f1008 	ldr	r1, [pc, #8]	; 1629c <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x98>
   16290:	e59f0010 	ldr	r0, [pc, #16]	; 162a8 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0xa4>
   16294:	eb0010bf 	bl	1a598 <assertion_failed>
   16298:	eaffffe1 	b	16224 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x20>
   1629c:	00026238 	.word	0x00026238
   162a0:	00026264 	.word	0x00026264
   162a4:	0002526c 	.word	0x0002526c
   162a8:	0002624c 	.word	0x0002624c

000162ac <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)>:
   162ac:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   162b0:	e5903010 	ldr	r3, [r0, #16]
   162b4:	e24dd034 	sub	sp, sp, #52	; 0x34
   162b8:	e3530000 	cmp	r3, #0
   162bc:	e1a04000 	mov	r4, r0
   162c0:	e1a06001 	mov	r6, r1
   162c4:	e1a07002 	mov	r7, r2
   162c8:	0a000026 	beq	16368 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xbc>
   162cc:	e3560000 	cmp	r6, #0
   162d0:	0a00001f 	beq	16354 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xa8>
   162d4:	e3a05000 	mov	r5, #0
   162d8:	e5941010 	ldr	r1, [r4, #16]
   162dc:	e1a02006 	mov	r2, r6
   162e0:	e3a03d19 	mov	r3, #1600	; 0x640
   162e4:	e58d5000 	str	r5, [sp]
   162e8:	e28d0008 	add	r0, sp, #8
   162ec:	ebffe145 	bl	e808 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   162f0:	e28d0008 	add	r0, sp, #8
   162f4:	ebffe1d5 	bl	ea50 <CUSBRequest::SetCompleteOnNAK()>
   162f8:	e1a00004 	mov	r0, r4
   162fc:	ebfff9b3 	bl	149d0 <CUSBFunction::GetHost() const>
   16300:	e5903000 	ldr	r3, [r0]
   16304:	e1a02005 	mov	r2, r5
   16308:	e5933008 	ldr	r3, [r3, #8]
   1630c:	e28d1008 	add	r1, sp, #8
   16310:	e12fff33 	blx	r3
   16314:	e2504000 	subs	r4, r0, #0
   16318:	1a000005 	bne	16334 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0x88>
   1631c:	e3a04000 	mov	r4, #0
   16320:	e28d0008 	add	r0, sp, #8
   16324:	ebffe15c 	bl	e89c <CUSBRequest::~CUSBRequest()>
   16328:	e1a00004 	mov	r0, r4
   1632c:	e28dd034 	add	sp, sp, #52	; 0x34
   16330:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   16334:	e28d0008 	add	r0, sp, #8
   16338:	ebffe16e 	bl	e8f8 <CUSBRequest::GetResultLength() const>
   1633c:	e2505000 	subs	r5, r0, #0
   16340:	0afffff5 	beq	1631c <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0x70>
   16344:	e3570000 	cmp	r7, #0
   16348:	0a00000b 	beq	1637c <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xd0>
   1634c:	e5875000 	str	r5, [r7]
   16350:	eafffff2 	b	16320 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0x74>
   16354:	e3a020b3 	mov	r2, #179	; 0xb3
   16358:	e59f1030 	ldr	r1, [pc, #48]	; 16390 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xe4>
   1635c:	e59f0030 	ldr	r0, [pc, #48]	; 16394 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xe8>
   16360:	eb00108c 	bl	1a598 <assertion_failed>
   16364:	eaffffda 	b	162d4 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0x28>
   16368:	e3a020b2 	mov	r2, #178	; 0xb2
   1636c:	e59f101c 	ldr	r1, [pc, #28]	; 16390 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xe4>
   16370:	e59f0020 	ldr	r0, [pc, #32]	; 16398 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xec>
   16374:	eb001087 	bl	1a598 <assertion_failed>
   16378:	eaffffd3 	b	162cc <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0x20>
   1637c:	e3a020c3 	mov	r2, #195	; 0xc3
   16380:	e59f1008 	ldr	r1, [pc, #8]	; 16390 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xe4>
   16384:	e59f0010 	ldr	r0, [pc, #16]	; 1639c <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xf0>
   16388:	eb001082 	bl	1a598 <assertion_failed>
   1638c:	eaffffee 	b	1634c <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xa0>
   16390:	00026238 	.word	0x00026238
   16394:	0002526c 	.word	0x0002526c
   16398:	00026284 	.word	0x00026284
   1639c:	0002629c 	.word	0x0002629c

000163a0 <CUSBCDCEthernetDevice::CUSBCDCEthernetDevice(CUSBFunction*)>:
   163a0:	e92d4010 	push	{r4, lr}
   163a4:	e1a04000 	mov	r4, r0
   163a8:	eb000a3e 	bl	18ca8 <CNetDevice::CNetDevice(CUSBFunction*)>
   163ac:	e3a03000 	mov	r3, #0
   163b0:	e59f2018 	ldr	r2, [pc, #24]	; 163d0 <CUSBCDCEthernetDevice::CUSBCDCEthernetDevice(CUSBFunction*)+0x30>
   163b4:	e5843010 	str	r3, [r4, #16]
   163b8:	e5842000 	str	r2, [r4]
   163bc:	e5843014 	str	r3, [r4, #20]
   163c0:	e2840018 	add	r0, r4, #24
   163c4:	eb00098c 	bl	189fc <CMACAddress::CMACAddress()>
   163c8:	e1a00004 	mov	r0, r4
   163cc:	e8bd8010 	pop	{r4, pc}
   163d0:	00026200 	.word	0x00026200

000163d4 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)>:
   163d4:	e92d4070 	push	{r4, r5, r6, lr}
   163d8:	e24dd018 	sub	sp, sp, #24
   163dc:	e1a04001 	mov	r4, r1
   163e0:	e1a05000 	mov	r5, r0
   163e4:	ebfff958 	bl	1494c <CUSBFunction::GetDevice() const>
   163e8:	e1a01000 	mov	r1, r0
   163ec:	e28d000c 	add	r0, sp, #12
   163f0:	eb0001a8 	bl	16a98 <CUSBString::CUSBString(CUSBDevice*)>
   163f4:	e3540000 	cmp	r4, #0
   163f8:	1a000005 	bne	16414 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x40>
   163fc:	e3a04000 	mov	r4, #0
   16400:	e28d000c 	add	r0, sp, #12
   16404:	eb0001f4 	bl	16bdc <CUSBString::~CUSBString()>
   16408:	e1a00004 	mov	r0, r4
   1640c:	e28dd018 	add	sp, sp, #24
   16410:	e8bd8070 	pop	{r4, r5, r6, pc}
   16414:	e28d000c 	add	r0, sp, #12
   16418:	eb0002a7 	bl	16ebc <CUSBString::GetLanguageID()>
   1641c:	e1a01004 	mov	r1, r4
   16420:	e1a02000 	mov	r2, r0
   16424:	e28d000c 	add	r0, sp, #12
   16428:	eb0001fb 	bl	16c1c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)>
   1642c:	e2504000 	subs	r4, r0, #0
   16430:	0afffff1 	beq	163fc <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x28>
   16434:	e28d000c 	add	r0, sp, #12
   16438:	eb00029d 	bl	16eb4 <CUSBString::Get() const>
   1643c:	e2506000 	subs	r6, r0, #0
   16440:	0a00001b 	beq	164b4 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0xe0>
   16444:	e2861002 	add	r1, r6, #2
   16448:	e286c00e 	add	ip, r6, #14
   1644c:	e28d0003 	add	r0, sp, #3
   16450:	e15130d2 	ldrsb	r3, [r1, #-2]
   16454:	e3530039 	cmp	r3, #57	; 0x39
   16458:	c2433007 	subgt	r3, r3, #7
   1645c:	c6af3073 	sxtbgt	r3, r3
   16460:	e2433030 	sub	r3, r3, #48	; 0x30
   16464:	e6ef2073 	uxtb	r2, r3
   16468:	e352000f 	cmp	r2, #15
   1646c:	8affffe2 	bhi	163fc <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x28>
   16470:	e15130d1 	ldrsb	r3, [r1, #-1]
   16474:	e2811002 	add	r1, r1, #2
   16478:	e3530039 	cmp	r3, #57	; 0x39
   1647c:	c2433007 	subgt	r3, r3, #7
   16480:	c6af3073 	sxtbgt	r3, r3
   16484:	e2433030 	sub	r3, r3, #48	; 0x30
   16488:	e6ef3073 	uxtb	r3, r3
   1648c:	e353000f 	cmp	r3, #15
   16490:	e1833202 	orr	r3, r3, r2, lsl #4
   16494:	8affffd8 	bhi	163fc <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x28>
   16498:	e15c0001 	cmp	ip, r1
   1649c:	e5e03001 	strb	r3, [r0, #1]!
   164a0:	1affffea 	bne	16450 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x7c>
   164a4:	e2850018 	add	r0, r5, #24
   164a8:	e28d1004 	add	r1, sp, #4
   164ac:	eb000977 	bl	18a90 <CMACAddress::Set(unsigned char const*)>
   164b0:	eaffffd2 	b	16400 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x2c>
   164b4:	e3a020d3 	mov	r2, #211	; 0xd3
   164b8:	e59f1008 	ldr	r1, [pc, #8]	; 164c8 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0xf4>
   164bc:	e59f0008 	ldr	r0, [pc, #8]	; 164cc <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0xf8>
   164c0:	eb001034 	bl	1a598 <assertion_failed>
   164c4:	eaffffde 	b	16444 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x70>
   164c8:	00026238 	.word	0x00026238
   164cc:	000262b0 	.word	0x000262b0

000164d0 <CUSBCDCEthernetDevice::Configure()>:
   164d0:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   164d4:	e1a05000 	mov	r5, r0
   164d8:	e24dd01c 	sub	sp, sp, #28
   164dc:	e3a06024 	mov	r6, #36	; 0x24
   164e0:	ea000002 	b	164f0 <CUSBCDCEthernetDevice::Configure()+0x20>
   164e4:	e5d43002 	ldrb	r3, [r4, #2]
   164e8:	e353000f 	cmp	r3, #15
   164ec:	0a00000a 	beq	1651c <CUSBCDCEthernetDevice::Configure()+0x4c>
   164f0:	e1a01006 	mov	r1, r6
   164f4:	e1a00005 	mov	r0, r5
   164f8:	ebfff976 	bl	14ad8 <CUSBFunction::GetDescriptor(unsigned char)>
   164fc:	e2504000 	subs	r4, r0, #0
   16500:	1afffff7 	bne	164e4 <CUSBCDCEthernetDevice::Configure()+0x14>
   16504:	e1a00005 	mov	r0, r5
   16508:	e59f11f0 	ldr	r1, [pc, #496]	; 16700 <CUSBCDCEthernetDevice::Configure()+0x230>
   1650c:	ebfff984 	bl	14b24 <CUSBFunction::ConfigurationError(char const*) const>
   16510:	e1a00004 	mov	r0, r4
   16514:	e28dd01c 	add	sp, sp, #28
   16518:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1651c:	e3a06004 	mov	r6, #4
   16520:	e1a01006 	mov	r1, r6
   16524:	e1a00005 	mov	r0, r5
   16528:	ebfff96a 	bl	14ad8 <CUSBFunction::GetDescriptor(unsigned char)>
   1652c:	e2503000 	subs	r3, r0, #0
   16530:	0a00003c 	beq	16628 <CUSBCDCEthernetDevice::Configure()+0x158>
   16534:	e5d32005 	ldrb	r2, [r3, #5]
   16538:	e352000a 	cmp	r2, #10
   1653c:	1afffff7 	bne	16520 <CUSBCDCEthernetDevice::Configure()+0x50>
   16540:	e5d32006 	ldrb	r2, [r3, #6]
   16544:	e3520000 	cmp	r2, #0
   16548:	1afffff4 	bne	16520 <CUSBCDCEthernetDevice::Configure()+0x50>
   1654c:	e5d32007 	ldrb	r2, [r3, #7]
   16550:	e3520000 	cmp	r2, #0
   16554:	1afffff1 	bne	16520 <CUSBCDCEthernetDevice::Configure()+0x50>
   16558:	e5d33004 	ldrb	r3, [r3, #4]
   1655c:	e3530001 	cmp	r3, #1
   16560:	daffffee 	ble	16520 <CUSBCDCEthernetDevice::Configure()+0x50>
   16564:	e5d41003 	ldrb	r1, [r4, #3]
   16568:	e1a00005 	mov	r0, r5
   1656c:	ebffff98 	bl	163d4 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)>
   16570:	e2504000 	subs	r4, r0, #0
   16574:	0a000043 	beq	16688 <CUSBCDCEthernetDevice::Configure()+0x1b8>
   16578:	e28d0008 	add	r0, sp, #8
   1657c:	eb0024c2 	bl	1f88c <CString::CString()>
   16580:	e28d1008 	add	r1, sp, #8
   16584:	e2850018 	add	r0, r5, #24
   16588:	eb0009a1 	bl	18c14 <CMACAddress::Format(CString*) const>
   1658c:	eb0019f4 	bl	1cd64 <CLogger::Get()>
   16590:	e1a04000 	mov	r4, r0
   16594:	e28d0008 	add	r0, sp, #8
   16598:	eb0024d1 	bl	1f8e4 <CString::operator char const*() const>
   1659c:	e59f3160 	ldr	r3, [pc, #352]	; 16704 <CUSBCDCEthernetDevice::Configure()+0x234>
   165a0:	e58d0000 	str	r0, [sp]
   165a4:	e3a02004 	mov	r2, #4
   165a8:	e1a00004 	mov	r0, r4
   165ac:	e59f114c 	ldr	r1, [pc, #332]	; 16700 <CUSBCDCEthernetDevice::Configure()+0x230>
   165b0:	eb001b94 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   165b4:	e3a06005 	mov	r6, #5
   165b8:	e3a07014 	mov	r7, #20
   165bc:	ea000003 	b	165d0 <CUSBCDCEthernetDevice::Configure()+0x100>
   165c0:	e5d43003 	ldrb	r3, [r4, #3]
   165c4:	e203303f 	and	r3, r3, #63	; 0x3f
   165c8:	e3530002 	cmp	r3, #2
   165cc:	0a00001c 	beq	16644 <CUSBCDCEthernetDevice::Configure()+0x174>
   165d0:	e1a01006 	mov	r1, r6
   165d4:	e1a00005 	mov	r0, r5
   165d8:	ebfff93e 	bl	14ad8 <CUSBFunction::GetDescriptor(unsigned char)>
   165dc:	e2504000 	subs	r4, r0, #0
   165e0:	1afffff6 	bne	165c0 <CUSBCDCEthernetDevice::Configure()+0xf0>
   165e4:	e5953010 	ldr	r3, [r5, #16]
   165e8:	e1a00005 	mov	r0, r5
   165ec:	e3530000 	cmp	r3, #0
   165f0:	0a000030 	beq	166b8 <CUSBCDCEthernetDevice::Configure()+0x1e8>
   165f4:	e5953014 	ldr	r3, [r5, #20]
   165f8:	e3530000 	cmp	r3, #0
   165fc:	0a00002d 	beq	166b8 <CUSBCDCEthernetDevice::Configure()+0x1e8>
   16600:	ebfff903 	bl	14a14 <CUSBFunction::Configure()>
   16604:	e2504000 	subs	r4, r0, #0
   16608:	0a000024 	beq	166a0 <CUSBCDCEthernetDevice::Configure()+0x1d0>
   1660c:	e1a00005 	mov	r0, r5
   16610:	eb0009c6 	bl	18d30 <CNetDevice::AddNetDevice()>
   16614:	e28d0008 	add	r0, sp, #8
   16618:	eb002468 	bl	1f7c0 <CString::~CString()>
   1661c:	e1a00004 	mov	r0, r4
   16620:	e28dd01c 	add	sp, sp, #28
   16624:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   16628:	e1a04003 	mov	r4, r3
   1662c:	e1a00005 	mov	r0, r5
   16630:	e59f10c8 	ldr	r1, [pc, #200]	; 16700 <CUSBCDCEthernetDevice::Configure()+0x230>
   16634:	ebfff93a 	bl	14b24 <CUSBFunction::ConfigurationError(char const*) const>
   16638:	e1a00004 	mov	r0, r4
   1663c:	e28dd01c 	add	sp, sp, #28
   16640:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   16644:	e1d430d2 	ldrsb	r3, [r4, #2]
   16648:	e3530000 	cmp	r3, #0
   1664c:	ba00001d 	blt	166c8 <CUSBCDCEthernetDevice::Configure()+0x1f8>
   16650:	e5953014 	ldr	r3, [r5, #20]
   16654:	e1a00005 	mov	r0, r5
   16658:	e3530000 	cmp	r3, #0
   1665c:	1a000015 	bne	166b8 <CUSBCDCEthernetDevice::Configure()+0x1e8>
   16660:	ebfff8b9 	bl	1494c <CUSBFunction::GetDevice() const>
   16664:	e1a09000 	mov	r9, r0
   16668:	e1a00007 	mov	r0, r7
   1666c:	eb00309a 	bl	228dc <operator new(unsigned int)>
   16670:	e1a08000 	mov	r8, r0
   16674:	e1a02004 	mov	r2, r4
   16678:	e1a01009 	mov	r1, r9
   1667c:	ebffdecc 	bl	e1b4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   16680:	e5858014 	str	r8, [r5, #20]
   16684:	eaffffd1 	b	165d0 <CUSBCDCEthernetDevice::Configure()+0x100>
   16688:	eb0019b5 	bl	1cd64 <CLogger::Get()>
   1668c:	e59f3074 	ldr	r3, [pc, #116]	; 16708 <CUSBCDCEthernetDevice::Configure()+0x238>
   16690:	e3a02001 	mov	r2, #1
   16694:	e59f1064 	ldr	r1, [pc, #100]	; 16700 <CUSBCDCEthernetDevice::Configure()+0x230>
   16698:	eb001b5a 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1669c:	eaffff9b 	b	16510 <CUSBCDCEthernetDevice::Configure()+0x40>
   166a0:	eb0019af 	bl	1cd64 <CLogger::Get()>
   166a4:	e59f3060 	ldr	r3, [pc, #96]	; 1670c <CUSBCDCEthernetDevice::Configure()+0x23c>
   166a8:	e3a02001 	mov	r2, #1
   166ac:	e59f104c 	ldr	r1, [pc, #76]	; 16700 <CUSBCDCEthernetDevice::Configure()+0x230>
   166b0:	eb001b54 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   166b4:	eaffffd6 	b	16614 <CUSBCDCEthernetDevice::Configure()+0x144>
   166b8:	e59f1040 	ldr	r1, [pc, #64]	; 16700 <CUSBCDCEthernetDevice::Configure()+0x230>
   166bc:	ebfff918 	bl	14b24 <CUSBFunction::ConfigurationError(char const*) const>
   166c0:	e3a04000 	mov	r4, #0
   166c4:	eaffffd2 	b	16614 <CUSBCDCEthernetDevice::Configure()+0x144>
   166c8:	e5953010 	ldr	r3, [r5, #16]
   166cc:	e1a00005 	mov	r0, r5
   166d0:	e3530000 	cmp	r3, #0
   166d4:	1afffff7 	bne	166b8 <CUSBCDCEthernetDevice::Configure()+0x1e8>
   166d8:	ebfff89b 	bl	1494c <CUSBFunction::GetDevice() const>
   166dc:	e1a09000 	mov	r9, r0
   166e0:	e1a00007 	mov	r0, r7
   166e4:	eb00307c 	bl	228dc <operator new(unsigned int)>
   166e8:	e1a08000 	mov	r8, r0
   166ec:	e1a02004 	mov	r2, r4
   166f0:	e1a01009 	mov	r1, r9
   166f4:	ebffdeae 	bl	e1b4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   166f8:	e5858010 	str	r8, [r5, #16]
   166fc:	eaffffb3 	b	165d0 <CUSBCDCEthernetDevice::Configure()+0x100>
   16700:	00026230 	.word	0x00026230
   16704:	000262d8 	.word	0x000262d8
   16708:	000262c0 	.word	0x000262c0
   1670c:	00025170 	.word	0x00025170

00016710 <CNetDevice::IsLinkUp()>:
   16710:	e3a00001 	mov	r0, #1
   16714:	e12fff1e 	bx	lr

00016718 <CNetDevice::GetLinkSpeed()>:
   16718:	e3a00006 	mov	r0, #6
   1671c:	e12fff1e 	bx	lr

00016720 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)>:
   16720:	e3a03000 	mov	r3, #0
   16724:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   16728:	e1a05002 	mov	r5, r2
   1672c:	e1510003 	cmp	r1, r3
   16730:	e0812002 	add	r2, r1, r2
   16734:	e5c03008 	strb	r3, [r0, #8]
   16738:	e5803014 	str	r3, [r0, #20]
   1673c:	e1a04000 	mov	r4, r0
   16740:	e8800022 	stm	r0, {r1, r5}
   16744:	e5801010 	str	r1, [r0, #16]
   16748:	e5801018 	str	r1, [r0, #24]
   1674c:	e580200c 	str	r2, [r0, #12]
   16750:	11a03005 	movne	r3, r5
   16754:	0a00003f 	beq	16858 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x138>
   16758:	e2433004 	sub	r3, r3, #4
   1675c:	e3530f7f 	cmp	r3, #508	; 0x1fc
   16760:	8a000003 	bhi	16774 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x54>
   16764:	e5943000 	ldr	r3, [r4]
   16768:	e5d32000 	ldrb	r2, [r3]
   1676c:	e3520009 	cmp	r2, #9
   16770:	0a000001 	beq	1677c <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x5c>
   16774:	e1a00004 	mov	r0, r4
   16778:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1677c:	e5d32001 	ldrb	r2, [r3, #1]
   16780:	e3520002 	cmp	r2, #2
   16784:	1afffffa 	bne	16774 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x54>
   16788:	e5d3c002 	ldrb	ip, [r3, #2]
   1678c:	e5d32003 	ldrb	r2, [r3, #3]
   16790:	e18cc402 	orr	ip, ip, r2, lsl #8
   16794:	e155000c 	cmp	r5, ip
   16798:	3afffff5 	bcc	16774 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x54>
   1679c:	e3a05000 	mov	r5, #0
   167a0:	8083c00c 	addhi	ip, r3, ip
   167a4:	9594c00c 	ldrls	ip, [r4, #12]
   167a8:	8584c00c 	strhi	ip, [r4, #12]
   167ac:	e3a06009 	mov	r6, #9
   167b0:	e1a0e005 	mov	lr, r5
   167b4:	e3a08007 	mov	r8, #7
   167b8:	e3a07001 	mov	r7, #1
   167bc:	ea000005 	b	167d8 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xb8>
   167c0:	e3520005 	cmp	r2, #5
   167c4:	0a00001c 	beq	1683c <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x11c>
   167c8:	e3520002 	cmp	r2, #2
   167cc:	0a000016 	beq	1682c <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x10c>
   167d0:	e1a03001 	mov	r3, r1
   167d4:	e1a0e002 	mov	lr, r2
   167d8:	e2832002 	add	r2, r3, #2
   167dc:	e15c0002 	cmp	ip, r2
   167e0:	9a000022 	bls	16870 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x150>
   167e4:	e5d30000 	ldrb	r0, [r3]
   167e8:	e5d32001 	ldrb	r2, [r3, #1]
   167ec:	e0831000 	add	r1, r3, r0
   167f0:	e151000c 	cmp	r1, ip
   167f4:	8a00000a 	bhi	16824 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x104>
   167f8:	e3520004 	cmp	r2, #4
   167fc:	1affffef 	bne	167c0 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xa0>
   16800:	e35e0000 	cmp	lr, #0
   16804:	0a000006 	beq	16824 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x104>
   16808:	e5d35005 	ldrb	r5, [r3, #5]
   1680c:	e1a0e006 	mov	lr, r6
   16810:	e2455001 	sub	r5, r5, #1
   16814:	e16f5f15 	clz	r5, r5
   16818:	e1a052a5 	lsr	r5, r5, #5
   1681c:	e150000e 	cmp	r0, lr
   16820:	0affffea 	beq	167d0 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xb0>
   16824:	e5843018 	str	r3, [r4, #24]
   16828:	eaffffd1 	b	16774 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x54>
   1682c:	e35e0000 	cmp	lr, #0
   16830:	1afffffb 	bne	16824 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x104>
   16834:	e1a0e006 	mov	lr, r6
   16838:	eafffff7 	b	1681c <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xfc>
   1683c:	e31e00fd 	tst	lr, #253	; 0xfd
   16840:	0afffff7 	beq	16824 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x104>
   16844:	e3550000 	cmp	r5, #0
   16848:	11a0e006 	movne	lr, r6
   1684c:	11a05007 	movne	r5, r7
   16850:	01a0e008 	moveq	lr, r8
   16854:	eafffff0 	b	1681c <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xfc>
   16858:	e3a02024 	mov	r2, #36	; 0x24
   1685c:	e59f1020 	ldr	r1, [pc, #32]	; 16884 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x164>
   16860:	e59f0020 	ldr	r0, [pc, #32]	; 16888 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x168>
   16864:	eb000f4b 	bl	1a598 <assertion_failed>
   16868:	e5943004 	ldr	r3, [r4, #4]
   1686c:	eaffffb9 	b	16758 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x38>
   16870:	e153000c 	cmp	r3, ip
   16874:	1affffea 	bne	16824 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x104>
   16878:	e3a03001 	mov	r3, #1
   1687c:	e5c43008 	strb	r3, [r4, #8]
   16880:	eaffffbb 	b	16774 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x54>
   16884:	000262ec 	.word	0x000262ec
   16888:	00026300 	.word	0x00026300

0001688c <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)>:
   1688c:	e92d4070 	push	{r4, r5, r6, lr}
   16890:	e2515000 	subs	r5, r1, #0
   16894:	e1a04000 	mov	r4, r0
   16898:	0a00000b 	beq	168cc <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)+0x40>
   1689c:	e8954040 	ldm	r5, {r6, lr}
   168a0:	e5d5c008 	ldrb	ip, [r5, #8]
   168a4:	e285000c 	add	r0, r5, #12
   168a8:	e890000f 	ldm	r0, {r0, r1, r2, r3}
   168ac:	e8844040 	stm	r4, {r6, lr}
   168b0:	e584000c 	str	r0, [r4, #12]
   168b4:	e5c4c008 	strb	ip, [r4, #8]
   168b8:	e5841010 	str	r1, [r4, #16]
   168bc:	e5842014 	str	r2, [r4, #20]
   168c0:	e5843018 	str	r3, [r4, #24]
   168c4:	e1a00004 	mov	r0, r4
   168c8:	e8bd8070 	pop	{r4, r5, r6, pc}
   168cc:	e3a02082 	mov	r2, #130	; 0x82
   168d0:	e59f1008 	ldr	r1, [pc, #8]	; 168e0 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)+0x54>
   168d4:	e59f0008 	ldr	r0, [pc, #8]	; 168e4 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)+0x58>
   168d8:	eb000f2e 	bl	1a598 <assertion_failed>
   168dc:	eaffffee 	b	1689c <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)+0x10>
   168e0:	000262ec 	.word	0x000262ec
   168e4:	00026310 	.word	0x00026310

000168e8 <CUSBConfigurationParser::~CUSBConfigurationParser()>:
   168e8:	e12fff1e 	bx	lr

000168ec <CUSBConfigurationParser::IsValid() const>:
   168ec:	e5d00008 	ldrb	r0, [r0, #8]
   168f0:	e12fff1e 	bx	lr

000168f4 <CUSBConfigurationParser::GetDescriptor(unsigned char)>:
   168f4:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   168f8:	e5d03008 	ldrb	r3, [r0, #8]
   168fc:	e1a06000 	mov	r6, r0
   16900:	e3530000 	cmp	r3, #0
   16904:	e1a07001 	mov	r7, r1
   16908:	0a000029 	beq	169b4 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xc0>
   1690c:	e5963010 	ldr	r3, [r6, #16]
   16910:	e596200c 	ldr	r2, [r6, #12]
   16914:	e1530002 	cmp	r3, r2
   16918:	2a00001c 	bcs	16990 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x9c>
   1691c:	e247b005 	sub	fp, r7, #5
   16920:	e16fbf1b 	clz	fp, fp
   16924:	e3a0a0a9 	mov	sl, #169	; 0xa9
   16928:	e1a0b2ab 	lsr	fp, fp, #5
   1692c:	e59f9094 	ldr	r9, [pc, #148]	; 169c8 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xd4>
   16930:	e59f8094 	ldr	r8, [pc, #148]	; 169cc <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xd8>
   16934:	ea00000b 	b	16968 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x74>
   16938:	e3550004 	cmp	r5, #4
   1693c:	13a03000 	movne	r3, #0
   16940:	020b3001 	andeq	r3, fp, #1
   16944:	e3530000 	cmp	r3, #0
   16948:	1a000010 	bne	16990 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x9c>
   1694c:	e1550007 	cmp	r5, r7
   16950:	0a000011 	beq	1699c <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xa8>
   16954:	e596200c 	ldr	r2, [r6, #12]
   16958:	e1a03004 	mov	r3, r4
   1695c:	e1520004 	cmp	r2, r4
   16960:	e5864010 	str	r4, [r6, #16]
   16964:	9a000009 	bls	16990 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x9c>
   16968:	e5d34000 	ldrb	r4, [r3]
   1696c:	e5d35001 	ldrb	r5, [r3, #1]
   16970:	e0834004 	add	r4, r3, r4
   16974:	e1540002 	cmp	r4, r2
   16978:	9affffee 	bls	16938 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x44>
   1697c:	e1a0200a 	mov	r2, sl
   16980:	e1a01009 	mov	r1, r9
   16984:	e1a00008 	mov	r0, r8
   16988:	eb000f02 	bl	1a598 <assertion_failed>
   1698c:	eaffffe9 	b	16938 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x44>
   16990:	e3a00000 	mov	r0, #0
   16994:	e5860014 	str	r0, [r6, #20]
   16998:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1699c:	e5960010 	ldr	r0, [r6, #16]
   169a0:	e5864010 	str	r4, [r6, #16]
   169a4:	e3500000 	cmp	r0, #0
   169a8:	15860018 	strne	r0, [r6, #24]
   169ac:	e5860014 	str	r0, [r6, #20]
   169b0:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   169b4:	e3a0209f 	mov	r2, #159	; 0x9f
   169b8:	e59f1008 	ldr	r1, [pc, #8]	; 169c8 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xd4>
   169bc:	e59f000c 	ldr	r0, [pc, #12]	; 169d0 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xdc>
   169c0:	eb000ef4 	bl	1a598 <assertion_failed>
   169c4:	eaffffd0 	b	1690c <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x18>
   169c8:	000262ec 	.word	0x000262ec
   169cc:	00026320 	.word	0x00026320
   169d0:	00024620 	.word	0x00024620

000169d4 <CUSBConfigurationParser::GetCurrentDescriptor()>:
   169d4:	e5d03008 	ldrb	r3, [r0, #8]
   169d8:	e92d4010 	push	{r4, lr}
   169dc:	e3530000 	cmp	r3, #0
   169e0:	e1a04000 	mov	r4, r0
   169e4:	0a000008 	beq	16a0c <CUSBConfigurationParser::GetCurrentDescriptor()+0x38>
   169e8:	e5940014 	ldr	r0, [r4, #20]
   169ec:	e3500000 	cmp	r0, #0
   169f0:	18bd8010 	popne	{r4, pc}
   169f4:	e3a020c8 	mov	r2, #200	; 0xc8
   169f8:	e59f1020 	ldr	r1, [pc, #32]	; 16a20 <CUSBConfigurationParser::GetCurrentDescriptor()+0x4c>
   169fc:	e59f0020 	ldr	r0, [pc, #32]	; 16a24 <CUSBConfigurationParser::GetCurrentDescriptor()+0x50>
   16a00:	eb000ee4 	bl	1a598 <assertion_failed>
   16a04:	e5940014 	ldr	r0, [r4, #20]
   16a08:	e8bd8010 	pop	{r4, pc}
   16a0c:	e3a020c7 	mov	r2, #199	; 0xc7
   16a10:	e59f1008 	ldr	r1, [pc, #8]	; 16a20 <CUSBConfigurationParser::GetCurrentDescriptor()+0x4c>
   16a14:	e59f000c 	ldr	r0, [pc, #12]	; 16a28 <CUSBConfigurationParser::GetCurrentDescriptor()+0x54>
   16a18:	eb000ede 	bl	1a598 <assertion_failed>
   16a1c:	eafffff1 	b	169e8 <CUSBConfigurationParser::GetCurrentDescriptor()+0x14>
   16a20:	000262ec 	.word	0x000262ec
   16a24:	0002633c 	.word	0x0002633c
   16a28:	00024620 	.word	0x00024620

00016a2c <CUSBConfigurationParser::Error(char const*) const>:
   16a2c:	e92d4030 	push	{r4, r5, lr}
   16a30:	e2515000 	subs	r5, r1, #0
   16a34:	e24dd00c 	sub	sp, sp, #12
   16a38:	e1a04000 	mov	r4, r0
   16a3c:	0a00000d 	beq	16a78 <CUSBConfigurationParser::Error(char const*) const+0x4c>
   16a40:	eb0018c7 	bl	1cd64 <CLogger::Get()>
   16a44:	e5941000 	ldr	r1, [r4]
   16a48:	e5942018 	ldr	r2, [r4, #24]
   16a4c:	e59f3038 	ldr	r3, [pc, #56]	; 16a8c <CUSBConfigurationParser::Error(char const*) const+0x60>
   16a50:	e0422001 	sub	r2, r2, r1
   16a54:	e58d2000 	str	r2, [sp]
   16a58:	e1a01005 	mov	r1, r5
   16a5c:	e3a02001 	mov	r2, #1
   16a60:	eb001a68 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16a64:	e8940003 	ldm	r4, {r0, r1}
   16a68:	e1a02005 	mov	r2, r5
   16a6c:	e28dd00c 	add	sp, sp, #12
   16a70:	e8bd4030 	pop	{r4, r5, lr}
   16a74:	ea001054 	b	1abcc <debug_hexdump(void const*, unsigned int, char const*)>
   16a78:	e3a020cf 	mov	r2, #207	; 0xcf
   16a7c:	e59f100c 	ldr	r1, [pc, #12]	; 16a90 <CUSBConfigurationParser::Error(char const*) const+0x64>
   16a80:	e59f000c 	ldr	r0, [pc, #12]	; 16a94 <CUSBConfigurationParser::Error(char const*) const+0x68>
   16a84:	eb000ec3 	bl	1a598 <assertion_failed>
   16a88:	eaffffec 	b	16a40 <CUSBConfigurationParser::Error(char const*) const+0x14>
   16a8c:	00026358 	.word	0x00026358
   16a90:	000262ec 	.word	0x000262ec
   16a94:	00025ed8 	.word	0x00025ed8

00016a98 <CUSBString::CUSBString(CUSBDevice*)>:
   16a98:	e3a03000 	mov	r3, #0
   16a9c:	e92d4070 	push	{r4, r5, r6, lr}
   16aa0:	e880000a 	stm	r0, {r1, r3}
   16aa4:	e1a04000 	mov	r4, r0
   16aa8:	e3a00010 	mov	r0, #16
   16aac:	eb002f8a 	bl	228dc <operator new(unsigned int)>
   16ab0:	e1a05000 	mov	r5, r0
   16ab4:	eb002374 	bl	1f88c <CString::CString()>
   16ab8:	e5943000 	ldr	r3, [r4]
   16abc:	e5845008 	str	r5, [r4, #8]
   16ac0:	e3530000 	cmp	r3, #0
   16ac4:	0a000001 	beq	16ad0 <CUSBString::CUSBString(CUSBDevice*)+0x38>
   16ac8:	e1a00004 	mov	r0, r4
   16acc:	e8bd8070 	pop	{r4, r5, r6, pc}
   16ad0:	e3a02023 	mov	r2, #35	; 0x23
   16ad4:	e59f1028 	ldr	r1, [pc, #40]	; 16b04 <CUSBString::CUSBString(CUSBDevice*)+0x6c>
   16ad8:	e59f0028 	ldr	r0, [pc, #40]	; 16b08 <CUSBString::CUSBString(CUSBDevice*)+0x70>
   16adc:	eb000ead 	bl	1a598 <assertion_failed>
   16ae0:	e5943008 	ldr	r3, [r4, #8]
   16ae4:	e3530000 	cmp	r3, #0
   16ae8:	1afffff6 	bne	16ac8 <CUSBString::CUSBString(CUSBDevice*)+0x30>
   16aec:	e3a02024 	mov	r2, #36	; 0x24
   16af0:	e59f100c 	ldr	r1, [pc, #12]	; 16b04 <CUSBString::CUSBString(CUSBDevice*)+0x6c>
   16af4:	e59f0010 	ldr	r0, [pc, #16]	; 16b0c <CUSBString::CUSBString(CUSBDevice*)+0x74>
   16af8:	eb000ea6 	bl	1a598 <assertion_failed>
   16afc:	e1a00004 	mov	r0, r4
   16b00:	e8bd8070 	pop	{r4, r5, r6, pc}
   16b04:	00026388 	.word	0x00026388
   16b08:	0002475c 	.word	0x0002475c
   16b0c:	00026398 	.word	0x00026398

00016b10 <CUSBString::CUSBString(CUSBString*)>:
   16b10:	e3a03000 	mov	r3, #0
   16b14:	e92d4070 	push	{r4, r5, r6, lr}
   16b18:	e5803004 	str	r3, [r0, #4]
   16b1c:	e1a04000 	mov	r4, r0
   16b20:	e3a00010 	mov	r0, #16
   16b24:	e1a05001 	mov	r5, r1
   16b28:	eb002f6b 	bl	228dc <operator new(unsigned int)>
   16b2c:	e1a06000 	mov	r6, r0
   16b30:	eb002355 	bl	1f88c <CString::CString()>
   16b34:	e3550000 	cmp	r5, #0
   16b38:	e5846008 	str	r6, [r4, #8]
   16b3c:	0a000018 	beq	16ba4 <CUSBString::CUSBString(CUSBString*)+0x94>
   16b40:	e895000c 	ldm	r5, {r2, r3}
   16b44:	e3530000 	cmp	r3, #0
   16b48:	e5842000 	str	r2, [r4]
   16b4c:	0a000005 	beq	16b68 <CUSBString::CUSBString(CUSBString*)+0x58>
   16b50:	e5d30000 	ldrb	r0, [r3]
   16b54:	eb002f61 	bl	228e0 <operator new[](unsigned int)>
   16b58:	e5840004 	str	r0, [r4, #4]
   16b5c:	e5951004 	ldr	r1, [r5, #4]
   16b60:	e5d12000 	ldrb	r2, [r1]
   16b64:	eb002c60 	bl	21cec <memcpy>
   16b68:	e5943008 	ldr	r3, [r4, #8]
   16b6c:	e3530000 	cmp	r3, #0
   16b70:	0a000010 	beq	16bb8 <CUSBString::CUSBString(CUSBString*)+0xa8>
   16b74:	e5953008 	ldr	r3, [r5, #8]
   16b78:	e3530000 	cmp	r3, #0
   16b7c:	0a000002 	beq	16b8c <CUSBString::CUSBString(CUSBString*)+0x7c>
   16b80:	e5843008 	str	r3, [r4, #8]
   16b84:	e1a00004 	mov	r0, r4
   16b88:	e8bd8070 	pop	{r4, r5, r6, pc}
   16b8c:	e3a02036 	mov	r2, #54	; 0x36
   16b90:	e59f1034 	ldr	r1, [pc, #52]	; 16bcc <CUSBString::CUSBString(CUSBString*)+0xbc>
   16b94:	e59f0034 	ldr	r0, [pc, #52]	; 16bd0 <CUSBString::CUSBString(CUSBString*)+0xc0>
   16b98:	eb000e7e 	bl	1a598 <assertion_failed>
   16b9c:	e5953008 	ldr	r3, [r5, #8]
   16ba0:	eafffff6 	b	16b80 <CUSBString::CUSBString(CUSBString*)+0x70>
   16ba4:	e3a0202b 	mov	r2, #43	; 0x2b
   16ba8:	e59f101c 	ldr	r1, [pc, #28]	; 16bcc <CUSBString::CUSBString(CUSBString*)+0xbc>
   16bac:	e59f0020 	ldr	r0, [pc, #32]	; 16bd4 <CUSBString::CUSBString(CUSBString*)+0xc4>
   16bb0:	eb000e78 	bl	1a598 <assertion_failed>
   16bb4:	eaffffe1 	b	16b40 <CUSBString::CUSBString(CUSBString*)+0x30>
   16bb8:	e3a02035 	mov	r2, #53	; 0x35
   16bbc:	e59f1008 	ldr	r1, [pc, #8]	; 16bcc <CUSBString::CUSBString(CUSBString*)+0xbc>
   16bc0:	e59f0010 	ldr	r0, [pc, #16]	; 16bd8 <CUSBString::CUSBString(CUSBString*)+0xc8>
   16bc4:	eb000e73 	bl	1a598 <assertion_failed>
   16bc8:	eaffffe9 	b	16b74 <CUSBString::CUSBString(CUSBString*)+0x64>
   16bcc:	00026388 	.word	0x00026388
   16bd0:	000263a8 	.word	0x000263a8
   16bd4:	00024e38 	.word	0x00024e38
   16bd8:	00026398 	.word	0x00026398

00016bdc <CUSBString::~CUSBString()>:
   16bdc:	e92d4010 	push	{r4, lr}
   16be0:	e1a04000 	mov	r4, r0
   16be4:	e5900008 	ldr	r0, [r0, #8]
   16be8:	e3500000 	cmp	r0, #0
   16bec:	0a000002 	beq	16bfc <CUSBString::~CUSBString()+0x20>
   16bf0:	e5903000 	ldr	r3, [r0]
   16bf4:	e5933004 	ldr	r3, [r3, #4]
   16bf8:	e12fff33 	blx	r3
   16bfc:	e3a03000 	mov	r3, #0
   16c00:	e5940004 	ldr	r0, [r4, #4]
   16c04:	e5843008 	str	r3, [r4, #8]
   16c08:	e1500003 	cmp	r0, r3
   16c0c:	0a000000 	beq	16c14 <CUSBString::~CUSBString()+0x38>
   16c10:	eb002f34 	bl	228e8 <operator delete[](void*)>
   16c14:	e1a00004 	mov	r0, r4
   16c18:	e8bd8010 	pop	{r4, pc}

00016c1c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)>:
   16c1c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c20:	e2516000 	subs	r6, r1, #0
   16c24:	e28db020 	add	fp, sp, #32
   16c28:	e24dd01c 	sub	sp, sp, #28
   16c2c:	e1a04000 	mov	r4, r0
   16c30:	e1a07002 	mov	r7, r2
   16c34:	0a000054 	beq	16d8c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x170>
   16c38:	e5940004 	ldr	r0, [r4, #4]
   16c3c:	e3500000 	cmp	r0, #0
   16c40:	0a000000 	beq	16c48 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x2c>
   16c44:	eb002f27 	bl	228e8 <operator delete[](void*)>
   16c48:	e3a00004 	mov	r0, #4
   16c4c:	eb002f23 	bl	228e0 <operator new[](unsigned int)>
   16c50:	e5840004 	str	r0, [r4, #4]
   16c54:	e5940000 	ldr	r0, [r4]
   16c58:	e3500000 	cmp	r0, #0
   16c5c:	0a00004f 	beq	16da0 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x184>
   16c60:	ebffdaa3 	bl	d6f4 <CUSBDevice::GetHost() const>
   16c64:	e1a05000 	mov	r5, r0
   16c68:	e5940000 	ldr	r0, [r4]
   16c6c:	ebffda8f 	bl	d6b0 <CUSBDevice::GetEndpoint0() const>
   16c70:	e3a08080 	mov	r8, #128	; 0x80
   16c74:	e3a02004 	mov	r2, #4
   16c78:	e5943004 	ldr	r3, [r4, #4]
   16c7c:	e1a01000 	mov	r1, r0
   16c80:	e98d0104 	stmib	sp, {r2, r8}
   16c84:	e58d3000 	str	r3, [sp]
   16c88:	e58d700c 	str	r7, [sp, #12]
   16c8c:	e1a00005 	mov	r0, r5
   16c90:	e1a03006 	mov	r3, r6
   16c94:	e3a02003 	mov	r2, #3
   16c98:	ebffde8d 	bl	e6d4 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   16c9c:	e3500000 	cmp	r0, #0
   16ca0:	ba000009 	blt	16ccc <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xb0>
   16ca4:	e5940004 	ldr	r0, [r4, #4]
   16ca8:	e5d05000 	ldrb	r5, [r0]
   16cac:	e3550001 	cmp	r5, #1
   16cb0:	e1a03005 	mov	r3, r5
   16cb4:	da000004 	ble	16ccc <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xb0>
   16cb8:	e2159001 	ands	r9, r5, #1
   16cbc:	1a000002 	bne	16ccc <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xb0>
   16cc0:	e5d0a001 	ldrb	sl, [r0, #1]
   16cc4:	e35a0003 	cmp	sl, #3
   16cc8:	0a000002 	beq	16cd8 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xbc>
   16ccc:	e3a00000 	mov	r0, #0
   16cd0:	e24bd020 	sub	sp, fp, #32
   16cd4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16cd8:	e3550004 	cmp	r5, #4
   16cdc:	ca000035 	bgt	16db8 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x19c>
   16ce0:	e3550002 	cmp	r5, #2
   16ce4:	0a000064 	beq	16e7c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x260>
   16ce8:	e2435002 	sub	r5, r3, #2
   16cec:	e0855fa5 	add	r5, r5, r5, lsr #31
   16cf0:	e1a060c5 	asr	r6, r5, #1
   16cf4:	e356007e 	cmp	r6, #126	; 0x7e
   16cf8:	8a000055 	bhi	16e54 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x238>
   16cfc:	e2863008 	add	r3, r6, #8
   16d00:	e3c33007 	bic	r3, r3, #7
   16d04:	e04dd003 	sub	sp, sp, r3
   16d08:	e3560000 	cmp	r6, #0
   16d0c:	e28d7010 	add	r7, sp, #16
   16d10:	0a00000c 	beq	16d48 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x12c>
   16d14:	e3a02000 	mov	r2, #0
   16d18:	e247e001 	sub	lr, r7, #1
   16d1c:	e080c082 	add	ip, r0, r2, lsl #1
   16d20:	e5dc1003 	ldrb	r1, [ip, #3]
   16d24:	e5dc3002 	ldrb	r3, [ip, #2]
   16d28:	e2822001 	add	r2, r2, #1
   16d2c:	e1833401 	orr	r3, r3, r1, lsl #8
   16d30:	e2431020 	sub	r1, r3, #32
   16d34:	e351005e 	cmp	r1, #94	; 0x5e
   16d38:	83a0305f 	movhi	r3, #95	; 0x5f
   16d3c:	e1560002 	cmp	r6, r2
   16d40:	e5ee3001 	strb	r3, [lr, #1]!
   16d44:	1afffff4 	bne	16d1c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x100>
   16d48:	e3a03000 	mov	r3, #0
   16d4c:	e5940008 	ldr	r0, [r4, #8]
   16d50:	e7c730c5 	strb	r3, [r7, r5, asr #1]
   16d54:	e1500003 	cmp	r0, r3
   16d58:	0a000002 	beq	16d68 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x14c>
   16d5c:	e5903000 	ldr	r3, [r0]
   16d60:	e5933004 	ldr	r3, [r3, #4]
   16d64:	e12fff33 	blx	r3
   16d68:	e3a00010 	mov	r0, #16
   16d6c:	eb002eda 	bl	228dc <operator new(unsigned int)>
   16d70:	e1a01007 	mov	r1, r7
   16d74:	e1a05000 	mov	r5, r0
   16d78:	eb0022c9 	bl	1f8a4 <CString::CString(char const*)>
   16d7c:	e3a00001 	mov	r0, #1
   16d80:	e5845008 	str	r5, [r4, #8]
   16d84:	e24bd020 	sub	sp, fp, #32
   16d88:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d8c:	e3a02047 	mov	r2, #71	; 0x47
   16d90:	e59f1104 	ldr	r1, [pc, #260]	; 16e9c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x280>
   16d94:	e59f0104 	ldr	r0, [pc, #260]	; 16ea0 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x284>
   16d98:	eb000dfe 	bl	1a598 <assertion_failed>
   16d9c:	eaffffa5 	b	16c38 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x1c>
   16da0:	e59f00fc 	ldr	r0, [pc, #252]	; 16ea4 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x288>
   16da4:	e3a0204d 	mov	r2, #77	; 0x4d
   16da8:	e59f10ec 	ldr	r1, [pc, #236]	; 16e9c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x280>
   16dac:	eb000df9 	bl	1a598 <assertion_failed>
   16db0:	e5940000 	ldr	r0, [r4]
   16db4:	eaffffa9 	b	16c60 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x44>
   16db8:	e3a01002 	mov	r1, #2
   16dbc:	eb002eca 	bl	228ec <operator delete(void*, unsigned int)>
   16dc0:	e1a00005 	mov	r0, r5
   16dc4:	eb002ec5 	bl	228e0 <operator new[](unsigned int)>
   16dc8:	e5840004 	str	r0, [r4, #4]
   16dcc:	e5940000 	ldr	r0, [r4]
   16dd0:	ebffda47 	bl	d6f4 <CUSBDevice::GetHost() const>
   16dd4:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
   16dd8:	e5940000 	ldr	r0, [r4]
   16ddc:	ebffda33 	bl	d6b0 <CUSBDevice::GetEndpoint0() const>
   16de0:	e594c004 	ldr	ip, [r4, #4]
   16de4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   16de8:	e1a01000 	mov	r1, r0
   16dec:	e58d700c 	str	r7, [sp, #12]
   16df0:	e1a00003 	mov	r0, r3
   16df4:	e98d0120 	stmib	sp, {r5, r8}
   16df8:	e1a03006 	mov	r3, r6
   16dfc:	e1a0200a 	mov	r2, sl
   16e00:	e58dc000 	str	ip, [sp]
   16e04:	ebffde32 	bl	e6d4 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   16e08:	e1550000 	cmp	r5, r0
   16e0c:	1affffae 	bne	16ccc <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xb0>
   16e10:	e5940004 	ldr	r0, [r4, #4]
   16e14:	e5d03000 	ldrb	r3, [r0]
   16e18:	e1530005 	cmp	r3, r5
   16e1c:	1affffaa 	bne	16ccc <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xb0>
   16e20:	e5d03001 	ldrb	r3, [r0, #1]
   16e24:	e3530003 	cmp	r3, #3
   16e28:	1affffa7 	bne	16ccc <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xb0>
   16e2c:	e3590000 	cmp	r9, #0
   16e30:	01a03005 	moveq	r3, r5
   16e34:	0affffab 	beq	16ce8 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xcc>
   16e38:	e59f0068 	ldr	r0, [pc, #104]	; 16ea8 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x28c>
   16e3c:	e3a02076 	mov	r2, #118	; 0x76
   16e40:	e59f1054 	ldr	r1, [pc, #84]	; 16e9c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x280>
   16e44:	eb000dd3 	bl	1a598 <assertion_failed>
   16e48:	e5940004 	ldr	r0, [r4, #4]
   16e4c:	e5d03000 	ldrb	r3, [r0]
   16e50:	eaffffa4 	b	16ce8 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xcc>
   16e54:	e59f0050 	ldr	r0, [pc, #80]	; 16eac <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x290>
   16e58:	e3a02079 	mov	r2, #121	; 0x79
   16e5c:	e59f1038 	ldr	r1, [pc, #56]	; 16e9c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x280>
   16e60:	eb000dcc 	bl	1a598 <assertion_failed>
   16e64:	e2863008 	add	r3, r6, #8
   16e68:	e3c33007 	bic	r3, r3, #7
   16e6c:	e04dd003 	sub	sp, sp, r3
   16e70:	e28d7010 	add	r7, sp, #16
   16e74:	e5940004 	ldr	r0, [r4, #4]
   16e78:	eaffffa5 	b	16d14 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xf8>
   16e7c:	e59f002c 	ldr	r0, [pc, #44]	; 16eb0 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x294>
   16e80:	e3a02075 	mov	r2, #117	; 0x75
   16e84:	e59f1010 	ldr	r1, [pc, #16]	; 16e9c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x280>
   16e88:	eb000dc2 	bl	1a598 <assertion_failed>
   16e8c:	e5940004 	ldr	r0, [r4, #4]
   16e90:	e5d05000 	ldrb	r5, [r0]
   16e94:	e2059001 	and	r9, r5, #1
   16e98:	eaffffe3 	b	16e2c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x210>
   16e9c:	00026388 	.word	0x00026388
   16ea0:	000263c0 	.word	0x000263c0
   16ea4:	0002475c 	.word	0x0002475c
   16ea8:	000263e8 	.word	0x000263e8
   16eac:	0002640c 	.word	0x0002640c
   16eb0:	000263cc 	.word	0x000263cc

00016eb4 <CUSBString::Get() const>:
   16eb4:	e5900008 	ldr	r0, [r0, #8]
   16eb8:	ea002289 	b	1f8e4 <CString::operator char const*() const>

00016ebc <CUSBString::GetLanguageID()>:
   16ebc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16ec0:	e1a05000 	mov	r5, r0
   16ec4:	e24dd010 	sub	sp, sp, #16
   16ec8:	e3a00004 	mov	r0, #4
   16ecc:	eb002e83 	bl	228e0 <operator new[](unsigned int)>
   16ed0:	e1a04000 	mov	r4, r0
   16ed4:	e5950000 	ldr	r0, [r5]
   16ed8:	e3500000 	cmp	r0, #0
   16edc:	0a000035 	beq	16fb8 <CUSBString::GetLanguageID()+0xfc>
   16ee0:	ebffda03 	bl	d6f4 <CUSBDevice::GetHost() const>
   16ee4:	e1a06000 	mov	r6, r0
   16ee8:	e5950000 	ldr	r0, [r5]
   16eec:	ebffd9ef 	bl	d6b0 <CUSBDevice::GetEndpoint0() const>
   16ef0:	e3a07080 	mov	r7, #128	; 0x80
   16ef4:	e3a03000 	mov	r3, #0
   16ef8:	e3a02004 	mov	r2, #4
   16efc:	e1a01000 	mov	r1, r0
   16f00:	e98d0084 	stmib	sp, {r2, r7}
   16f04:	e58d4000 	str	r4, [sp]
   16f08:	e1a00006 	mov	r0, r6
   16f0c:	e58d300c 	str	r3, [sp, #12]
   16f10:	e3a02003 	mov	r2, #3
   16f14:	ebffddee 	bl	e6d4 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   16f18:	e3500000 	cmp	r0, #0
   16f1c:	ba000002 	blt	16f2c <CUSBString::GetLanguageID()+0x70>
   16f20:	e5d46000 	ldrb	r6, [r4]
   16f24:	e3560003 	cmp	r6, #3
   16f28:	ca000005 	bgt	16f44 <CUSBString::GetLanguageID()+0x88>
   16f2c:	e1a00004 	mov	r0, r4
   16f30:	eb002e6c 	bl	228e8 <operator delete[](void*)>
   16f34:	e59f5100 	ldr	r5, [pc, #256]	; 1703c <CUSBString::GetLanguageID()+0x180>
   16f38:	e1a00005 	mov	r0, r5
   16f3c:	e28dd010 	add	sp, sp, #16
   16f40:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16f44:	e2168001 	ands	r8, r6, #1
   16f48:	1afffff7 	bne	16f2c <CUSBString::GetLanguageID()+0x70>
   16f4c:	e5d49001 	ldrb	r9, [r4, #1]
   16f50:	e3590003 	cmp	r9, #3
   16f54:	1afffff4 	bne	16f2c <CUSBString::GetLanguageID()+0x70>
   16f58:	e3560004 	cmp	r6, #4
   16f5c:	1a00001b 	bne	16fd0 <CUSBString::GetLanguageID()+0x114>
   16f60:	e5d45002 	ldrb	r5, [r4, #2]
   16f64:	e5d43003 	ldrb	r3, [r4, #3]
   16f68:	e59f00cc 	ldr	r0, [pc, #204]	; 1703c <CUSBString::GetLanguageID()+0x180>
   16f6c:	e1855403 	orr	r5, r5, r3, lsl #8
   16f70:	e2466002 	sub	r6, r6, #2
   16f74:	e1550000 	cmp	r5, r0
   16f78:	e1a060c6 	asr	r6, r6, #1
   16f7c:	0affffea 	beq	16f2c <CUSBString::GetLanguageID()+0x70>
   16f80:	e3a03000 	mov	r3, #0
   16f84:	ea000004 	b	16f9c <CUSBString::GetLanguageID()+0xe0>
   16f88:	e5d12002 	ldrb	r2, [r1, #2]
   16f8c:	e5d11003 	ldrb	r1, [r1, #3]
   16f90:	e1822401 	orr	r2, r2, r1, lsl #8
   16f94:	e1520000 	cmp	r2, r0
   16f98:	0affffe3 	beq	16f2c <CUSBString::GetLanguageID()+0x70>
   16f9c:	e2833001 	add	r3, r3, #1
   16fa0:	e1560003 	cmp	r6, r3
   16fa4:	e0841083 	add	r1, r4, r3, lsl #1
   16fa8:	1afffff6 	bne	16f88 <CUSBString::GetLanguageID()+0xcc>
   16fac:	e1a00004 	mov	r0, r4
   16fb0:	eb002e4c 	bl	228e8 <operator delete[](void*)>
   16fb4:	eaffffdf 	b	16f38 <CUSBString::GetLanguageID()+0x7c>
   16fb8:	e59f0080 	ldr	r0, [pc, #128]	; 17040 <CUSBString::GetLanguageID()+0x184>
   16fbc:	e3a0209a 	mov	r2, #154	; 0x9a
   16fc0:	e59f107c 	ldr	r1, [pc, #124]	; 17044 <CUSBString::GetLanguageID()+0x188>
   16fc4:	eb000d73 	bl	1a598 <assertion_failed>
   16fc8:	e5950000 	ldr	r0, [r5]
   16fcc:	eaffffc3 	b	16ee0 <CUSBString::GetLanguageID()+0x24>
   16fd0:	e1a00004 	mov	r0, r4
   16fd4:	eb002e43 	bl	228e8 <operator delete[](void*)>
   16fd8:	e1a00006 	mov	r0, r6
   16fdc:	eb002e3f 	bl	228e0 <operator new[](unsigned int)>
   16fe0:	e1a04000 	mov	r4, r0
   16fe4:	e5950000 	ldr	r0, [r5]
   16fe8:	ebffd9c1 	bl	d6f4 <CUSBDevice::GetHost() const>
   16fec:	e1a0a000 	mov	sl, r0
   16ff0:	e5950000 	ldr	r0, [r5]
   16ff4:	ebffd9ad 	bl	d6b0 <CUSBDevice::GetEndpoint0() const>
   16ff8:	e58d4000 	str	r4, [sp]
   16ffc:	e1a01000 	mov	r1, r0
   17000:	e58d800c 	str	r8, [sp, #12]
   17004:	e1a0000a 	mov	r0, sl
   17008:	e98d00c0 	stmib	sp, {r6, r7}
   1700c:	e1a03008 	mov	r3, r8
   17010:	e1a02009 	mov	r2, r9
   17014:	ebffddae 	bl	e6d4 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   17018:	e1560000 	cmp	r6, r0
   1701c:	1affffc2 	bne	16f2c <CUSBString::GetLanguageID()+0x70>
   17020:	e5d43000 	ldrb	r3, [r4]
   17024:	e1530006 	cmp	r3, r6
   17028:	1affffbf 	bne	16f2c <CUSBString::GetLanguageID()+0x70>
   1702c:	e5d43001 	ldrb	r3, [r4, #1]
   17030:	e3530003 	cmp	r3, #3
   17034:	1affffbc 	bne	16f2c <CUSBString::GetLanguageID()+0x70>
   17038:	eaffffc8 	b	16f60 <CUSBString::GetLanguageID()+0xa4>
   1703c:	00000409 	.word	0x00000409
   17040:	0002475c 	.word	0x0002475c
   17044:	00026388 	.word	0x00026388

00017048 <CSMSC951xDevice::GetMACAddress() const>:
   17048:	e2800018 	add	r0, r0, #24
   1704c:	e12fff1e 	bx	lr

00017050 <CSMSC951xDevice::~CSMSC951xDevice()>:
   17050:	e92d4070 	push	{r4, r5, r6, lr}
   17054:	e5905014 	ldr	r5, [r0, #20]
   17058:	e59f3068 	ldr	r3, [pc, #104]	; 170c8 <CSMSC951xDevice::~CSMSC951xDevice()+0x78>
   1705c:	e3550000 	cmp	r5, #0
   17060:	e1a04000 	mov	r4, r0
   17064:	e5803000 	str	r3, [r0]
   17068:	0a000004 	beq	17080 <CSMSC951xDevice::~CSMSC951xDevice()+0x30>
   1706c:	e1a00005 	mov	r0, r5
   17070:	ebffdce1 	bl	e3fc <CUSBEndpoint::~CUSBEndpoint()>
   17074:	e1a00005 	mov	r0, r5
   17078:	e3a01014 	mov	r1, #20
   1707c:	eb002e1a 	bl	228ec <operator delete(void*, unsigned int)>
   17080:	e3a03000 	mov	r3, #0
   17084:	e5945010 	ldr	r5, [r4, #16]
   17088:	e5843014 	str	r3, [r4, #20]
   1708c:	e1550003 	cmp	r5, r3
   17090:	0a000004 	beq	170a8 <CSMSC951xDevice::~CSMSC951xDevice()+0x58>
   17094:	e1a00005 	mov	r0, r5
   17098:	ebffdcd7 	bl	e3fc <CUSBEndpoint::~CUSBEndpoint()>
   1709c:	e1a00005 	mov	r0, r5
   170a0:	e3a01014 	mov	r1, #20
   170a4:	eb002e10 	bl	228ec <operator delete(void*, unsigned int)>
   170a8:	e3a03000 	mov	r3, #0
   170ac:	e2840018 	add	r0, r4, #24
   170b0:	e5843010 	str	r3, [r4, #16]
   170b4:	eb000653 	bl	18a08 <CMACAddress::~CMACAddress()>
   170b8:	e1a00004 	mov	r0, r4
   170bc:	eb000701 	bl	18cc8 <CNetDevice::~CNetDevice()>
   170c0:	e1a00004 	mov	r0, r4
   170c4:	e8bd8070 	pop	{r4, r5, r6, pc}
   170c8:	0002642c 	.word	0x0002642c

000170cc <CSMSC951xDevice::~CSMSC951xDevice()>:
   170cc:	e92d4010 	push	{r4, lr}
   170d0:	e1a04000 	mov	r4, r0
   170d4:	ebffffdd 	bl	17050 <CSMSC951xDevice::~CSMSC951xDevice()>
   170d8:	e1a00004 	mov	r0, r4
   170dc:	e3a01020 	mov	r1, #32
   170e0:	eb002e01 	bl	228ec <operator delete(void*, unsigned int)>
   170e4:	e1a00004 	mov	r0, r4
   170e8:	e8bd8010 	pop	{r4, pc}

000170ec <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)>:
   170ec:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   170f0:	e5903010 	ldr	r3, [r0, #16]
   170f4:	e24dd030 	sub	sp, sp, #48	; 0x30
   170f8:	e3530000 	cmp	r3, #0
   170fc:	e1a04000 	mov	r4, r0
   17100:	e1a05001 	mov	r5, r1
   17104:	e1a07002 	mov	r7, r2
   17108:	0a000034 	beq	171e0 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0xf4>
   1710c:	e3550000 	cmp	r5, #0
   17110:	0a000037 	beq	171f4 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x108>
   17114:	e3a06000 	mov	r6, #0
   17118:	e5941010 	ldr	r1, [r4, #16]
   1711c:	e3a03d19 	mov	r3, #1600	; 0x640
   17120:	e1a02005 	mov	r2, r5
   17124:	e58d6000 	str	r6, [sp]
   17128:	e28d0008 	add	r0, sp, #8
   1712c:	ebffddb5 	bl	e808 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   17130:	e1a00004 	mov	r0, r4
   17134:	ebfff625 	bl	149d0 <CUSBFunction::GetHost() const>
   17138:	e5903000 	ldr	r3, [r0]
   1713c:	e1a02006 	mov	r2, r6
   17140:	e5933008 	ldr	r3, [r3, #8]
   17144:	e28d1008 	add	r1, sp, #8
   17148:	e12fff33 	blx	r3
   1714c:	e2504000 	subs	r4, r0, #0
   17150:	1a000005 	bne	1716c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x80>
   17154:	e3a04000 	mov	r4, #0
   17158:	e28d0008 	add	r0, sp, #8
   1715c:	ebffddce 	bl	e89c <CUSBRequest::~CUSBRequest()>
   17160:	e1a00004 	mov	r0, r4
   17164:	e28dd030 	add	sp, sp, #48	; 0x30
   17168:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1716c:	e28d0008 	add	r0, sp, #8
   17170:	ebffdde0 	bl	e8f8 <CUSBRequest::GetResultLength() const>
   17174:	e3500003 	cmp	r0, #3
   17178:	9afffff5 	bls	17154 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x68>
   1717c:	e5958000 	ldr	r8, [r5]
   17180:	e59f30c8 	ldr	r3, [pc, #200]	; 17250 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x164>
   17184:	e0033008 	and	r3, r3, r8
   17188:	e3530000 	cmp	r3, #0
   1718c:	1a000022 	bne	1721c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x130>
   17190:	e59f60bc 	ldr	r6, [pc, #188]	; 17254 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x168>
   17194:	e2400004 	sub	r0, r0, #4
   17198:	e0066828 	and	r6, r6, r8, lsr #16
   1719c:	e1560000 	cmp	r6, r0
   171a0:	0a000003 	beq	171b4 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0xc8>
   171a4:	e59f20ac 	ldr	r2, [pc, #172]	; 17258 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x16c>
   171a8:	e59f10ac 	ldr	r1, [pc, #172]	; 1725c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x170>
   171ac:	e59f00ac 	ldr	r0, [pc, #172]	; 17260 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x174>
   171b0:	eb000cf8 	bl	1a598 <assertion_failed>
   171b4:	e3560004 	cmp	r6, #4
   171b8:	9a000012 	bls	17208 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x11c>
   171bc:	e2466004 	sub	r6, r6, #4
   171c0:	e1a02006 	mov	r2, r6
   171c4:	e2851004 	add	r1, r5, #4
   171c8:	e1a00005 	mov	r0, r5
   171cc:	eb002ac6 	bl	21cec <memcpy>
   171d0:	e3570000 	cmp	r7, #0
   171d4:	0a000018 	beq	1723c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x150>
   171d8:	e5876000 	str	r6, [r7]
   171dc:	eaffffdd 	b	17158 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x6c>
   171e0:	e59f207c 	ldr	r2, [pc, #124]	; 17264 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x178>
   171e4:	e59f1070 	ldr	r1, [pc, #112]	; 1725c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x170>
   171e8:	e59f0078 	ldr	r0, [pc, #120]	; 17268 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x17c>
   171ec:	eb000ce9 	bl	1a598 <assertion_failed>
   171f0:	eaffffc5 	b	1710c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x20>
   171f4:	e3a02f45 	mov	r2, #276	; 0x114
   171f8:	e59f105c 	ldr	r1, [pc, #92]	; 1725c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x170>
   171fc:	e59f0068 	ldr	r0, [pc, #104]	; 1726c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x180>
   17200:	eb000ce4 	bl	1a598 <assertion_failed>
   17204:	eaffffc2 	b	17114 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x28>
   17208:	e3a02f4b 	mov	r2, #300	; 0x12c
   1720c:	e59f1048 	ldr	r1, [pc, #72]	; 1725c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x170>
   17210:	e59f0058 	ldr	r0, [pc, #88]	; 17270 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x184>
   17214:	eb000cdf 	bl	1a598 <assertion_failed>
   17218:	eaffffcd 	b	17154 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x68>
   1721c:	eb0016d0 	bl	1cd64 <CLogger::Get()>
   17220:	e58d8000 	str	r8, [sp]
   17224:	e59f3048 	ldr	r3, [pc, #72]	; 17274 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x188>
   17228:	e3a02002 	mov	r2, #2
   1722c:	e59f1044 	ldr	r1, [pc, #68]	; 17278 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x18c>
   17230:	e1a04006 	mov	r4, r6
   17234:	eb001873 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17238:	eaffffc6 	b	17158 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x6c>
   1723c:	e59f2038 	ldr	r2, [pc, #56]	; 1727c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x190>
   17240:	e59f1014 	ldr	r1, [pc, #20]	; 1725c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x170>
   17244:	e59f0034 	ldr	r0, [pc, #52]	; 17280 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x194>
   17248:	eb000cd2 	bl	1a598 <assertion_failed>
   1724c:	eaffffe1 	b	171d8 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0xec>
   17250:	400090de 	.word	0x400090de
   17254:	00003fff 	.word	0x00003fff
   17258:	0000012b 	.word	0x0000012b
   1725c:	00026470 	.word	0x00026470
   17260:	00026498 	.word	0x00026498
   17264:	00000113 	.word	0x00000113
   17268:	00026284 	.word	0x00026284
   1726c:	0002526c 	.word	0x0002526c
   17270:	000264b8 	.word	0x000264b8
   17274:	00026480 	.word	0x00026480
   17278:	0002645c 	.word	0x0002645c
   1727c:	00000137 	.word	0x00000137
   17280:	0002629c 	.word	0x0002629c

00017284 <CSMSC951xDevice::SendFrame(void const*, unsigned int) [clone .part.0]>:
   17284:	e92d4070 	push	{r4, r5, r6, lr}
   17288:	e2516000 	subs	r6, r1, #0
   1728c:	e24dde65 	sub	sp, sp, #1616	; 0x650
   17290:	e1a05000 	mov	r5, r0
   17294:	e1a04002 	mov	r4, r2
   17298:	0a000015 	beq	172f4 <CSMSC951xDevice::SendFrame(void const*, unsigned int) [clone .part.0]+0x70>
   1729c:	e1a02004 	mov	r2, r4
   172a0:	e1a01006 	mov	r1, r6
   172a4:	e28d0010 	add	r0, sp, #16
   172a8:	eb002a8f 	bl	21cec <memcpy>
   172ac:	e5952014 	ldr	r2, [r5, #20]
   172b0:	e3843a03 	orr	r3, r4, #12288	; 0x3000
   172b4:	e3520000 	cmp	r2, #0
   172b8:	e58d400c 	str	r4, [sp, #12]
   172bc:	e58d3008 	str	r3, [sp, #8]
   172c0:	0a000010 	beq	17308 <CSMSC951xDevice::SendFrame(void const*, unsigned int) [clone .part.0]+0x84>
   172c4:	e1a00005 	mov	r0, r5
   172c8:	ebfff5c0 	bl	149d0 <CUSBFunction::GetHost() const>
   172cc:	e3a0c000 	mov	ip, #0
   172d0:	e5951014 	ldr	r1, [r5, #20]
   172d4:	e2843008 	add	r3, r4, #8
   172d8:	e28d2008 	add	r2, sp, #8
   172dc:	e58dc000 	str	ip, [sp]
   172e0:	ebffdd2f 	bl	e7a4 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   172e4:	e1e00000 	mvn	r0, r0
   172e8:	e1a00fa0 	lsr	r0, r0, #31
   172ec:	e28dde65 	add	sp, sp, #1616	; 0x650
   172f0:	e8bd8070 	pop	{r4, r5, r6, pc}
   172f4:	e59f2020 	ldr	r2, [pc, #32]	; 1731c <CSMSC951xDevice::SendFrame(void const*, unsigned int) [clone .part.0]+0x98>
   172f8:	e59f1020 	ldr	r1, [pc, #32]	; 17320 <CSMSC951xDevice::SendFrame(void const*, unsigned int) [clone .part.0]+0x9c>
   172fc:	e59f0020 	ldr	r0, [pc, #32]	; 17324 <CSMSC951xDevice::SendFrame(void const*, unsigned int) [clone .part.0]+0xa0>
   17300:	eb000ca4 	bl	1a598 <assertion_failed>
   17304:	eaffffe4 	b	1729c <CSMSC951xDevice::SendFrame(void const*, unsigned int) [clone .part.0]+0x18>
   17308:	e59f2018 	ldr	r2, [pc, #24]	; 17328 <CSMSC951xDevice::SendFrame(void const*, unsigned int) [clone .part.0]+0xa4>
   1730c:	e59f100c 	ldr	r1, [pc, #12]	; 17320 <CSMSC951xDevice::SendFrame(void const*, unsigned int) [clone .part.0]+0x9c>
   17310:	e59f0014 	ldr	r0, [pc, #20]	; 1732c <CSMSC951xDevice::SendFrame(void const*, unsigned int) [clone .part.0]+0xa8>
   17314:	eb000c9f 	bl	1a598 <assertion_failed>
   17318:	eaffffe9 	b	172c4 <CSMSC951xDevice::SendFrame(void const*, unsigned int) [clone .part.0]+0x40>
   1731c:	00000106 	.word	0x00000106
   17320:	00026470 	.word	0x00026470
   17324:	0002526c 	.word	0x0002526c
   17328:	0000010d 	.word	0x0000010d
   1732c:	0002624c 	.word	0x0002624c

00017330 <CSMSC951xDevice::SendFrame(void const*, unsigned int)>:
   17330:	e3520d19 	cmp	r2, #1600	; 0x640
   17334:	8a000000 	bhi	1733c <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0xc>
   17338:	eaffffd1 	b	17284 <CSMSC951xDevice::SendFrame(void const*, unsigned int) [clone .part.0]>
   1733c:	e3a00000 	mov	r0, #0
   17340:	e12fff1e 	bx	lr

00017344 <CSMSC951xDevice::CSMSC951xDevice(CUSBFunction*)>:
   17344:	e92d4010 	push	{r4, lr}
   17348:	e1a04000 	mov	r4, r0
   1734c:	eb000655 	bl	18ca8 <CNetDevice::CNetDevice(CUSBFunction*)>
   17350:	e3a03000 	mov	r3, #0
   17354:	e59f2018 	ldr	r2, [pc, #24]	; 17374 <CSMSC951xDevice::CSMSC951xDevice(CUSBFunction*)+0x30>
   17358:	e5843010 	str	r3, [r4, #16]
   1735c:	e5842000 	str	r2, [r4]
   17360:	e5843014 	str	r3, [r4, #20]
   17364:	e2840018 	add	r0, r4, #24
   17368:	eb0005a3 	bl	189fc <CMACAddress::CMACAddress()>
   1736c:	e1a00004 	mov	r0, r4
   17370:	e8bd8010 	pop	{r4, pc}
   17374:	0002642c 	.word	0x0002642c

00017378 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>:
   17378:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1737c:	e24dd01c 	sub	sp, sp, #28
   17380:	e28d5018 	add	r5, sp, #24
   17384:	e5252004 	str	r2, [r5, #-4]!
   17388:	e1a04001 	mov	r4, r1
   1738c:	e1a07000 	mov	r7, r0
   17390:	ebfff58e 	bl	149d0 <CUSBFunction::GetHost() const>
   17394:	e1a06000 	mov	r6, r0
   17398:	e1a00007 	mov	r0, r7
   1739c:	ebfff57a 	bl	1498c <CUSBFunction::GetEndpoint0() const>
   173a0:	e3a02004 	mov	r2, #4
   173a4:	e3a03000 	mov	r3, #0
   173a8:	e6ff4074 	uxth	r4, r4
   173ac:	e1a01000 	mov	r1, r0
   173b0:	e58d200c 	str	r2, [sp, #12]
   173b4:	e58d3000 	str	r3, [sp]
   173b8:	e58d5008 	str	r5, [sp, #8]
   173bc:	e58d4004 	str	r4, [sp, #4]
   173c0:	e1a00006 	mov	r0, r6
   173c4:	e3a030a0 	mov	r3, #160	; 0xa0
   173c8:	e3a02040 	mov	r2, #64	; 0x40
   173cc:	ebffdc8e 	bl	e60c <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   173d0:	e1e00000 	mvn	r0, r0
   173d4:	e1a00fa0 	lsr	r0, r0, #31
   173d8:	e28dd01c 	add	sp, sp, #28
   173dc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

000173e0 <CSMSC951xDevice::ReadReg(unsigned int, unsigned int*)>:
   173e0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   173e4:	e24dd014 	sub	sp, sp, #20
   173e8:	e1a06002 	mov	r6, r2
   173ec:	e1a04001 	mov	r4, r1
   173f0:	e1a07000 	mov	r7, r0
   173f4:	ebfff575 	bl	149d0 <CUSBFunction::GetHost() const>
   173f8:	e1a05000 	mov	r5, r0
   173fc:	e1a00007 	mov	r0, r7
   17400:	ebfff561 	bl	1498c <CUSBFunction::GetEndpoint0() const>
   17404:	e3a0c004 	mov	ip, #4
   17408:	e3a03000 	mov	r3, #0
   1740c:	e6ff4074 	uxth	r4, r4
   17410:	e1a01000 	mov	r1, r0
   17414:	e58d3000 	str	r3, [sp]
   17418:	e58d6008 	str	r6, [sp, #8]
   1741c:	e58d4004 	str	r4, [sp, #4]
   17420:	e1a00005 	mov	r0, r5
   17424:	e58dc00c 	str	ip, [sp, #12]
   17428:	e3a030a1 	mov	r3, #161	; 0xa1
   1742c:	e3a020c0 	mov	r2, #192	; 0xc0
   17430:	ebffdc75 	bl	e60c <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   17434:	e2400004 	sub	r0, r0, #4
   17438:	e16f0f10 	clz	r0, r0
   1743c:	e1a002a0 	lsr	r0, r0, #5
   17440:	e28dd014 	add	sp, sp, #20
   17444:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00017448 <CSMSC951xDevice::PHYWaitNotBusy()>:
   17448:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1744c:	e24dd00c 	sub	sp, sp, #12
   17450:	e1a07000 	mov	r7, r0
   17454:	eb0028a3 	bl	216e8 <CTimer::Get()>
   17458:	e2504000 	subs	r4, r0, #0
   1745c:	0a000015 	beq	174b8 <CSMSC951xDevice::PHYWaitNotBusy()+0x70>
   17460:	e1a00004 	mov	r0, r4
   17464:	eb0025d8 	bl	20bcc <CTimer::GetTicks() const>
   17468:	e3a06f45 	mov	r6, #276	; 0x114
   1746c:	e1a05000 	mov	r5, r0
   17470:	ea000008 	b	17498 <CSMSC951xDevice::PHYWaitNotBusy()+0x50>
   17474:	e28d2004 	add	r2, sp, #4
   17478:	e1a01006 	mov	r1, r6
   1747c:	e1a00007 	mov	r0, r7
   17480:	ebffffd6 	bl	173e0 <CSMSC951xDevice::ReadReg(unsigned int, unsigned int*)>
   17484:	e3500000 	cmp	r0, #0
   17488:	0a000007 	beq	174ac <CSMSC951xDevice::PHYWaitNotBusy()+0x64>
   1748c:	e59d3004 	ldr	r3, [sp, #4]
   17490:	e3130001 	tst	r3, #1
   17494:	0a000005 	beq	174b0 <CSMSC951xDevice::PHYWaitNotBusy()+0x68>
   17498:	e1a00004 	mov	r0, r4
   1749c:	eb0025ca 	bl	20bcc <CTimer::GetTicks() const>
   174a0:	e0400005 	sub	r0, r0, r5
   174a4:	e3500063 	cmp	r0, #99	; 0x63
   174a8:	9afffff1 	bls	17474 <CSMSC951xDevice::PHYWaitNotBusy()+0x2c>
   174ac:	e3a00000 	mov	r0, #0
   174b0:	e28dd00c 	add	sp, sp, #12
   174b4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   174b8:	e59f200c 	ldr	r2, [pc, #12]	; 174cc <CSMSC951xDevice::PHYWaitNotBusy()+0x84>
   174bc:	e59f100c 	ldr	r1, [pc, #12]	; 174d0 <CSMSC951xDevice::PHYWaitNotBusy()+0x88>
   174c0:	e59f000c 	ldr	r0, [pc, #12]	; 174d4 <CSMSC951xDevice::PHYWaitNotBusy()+0x8c>
   174c4:	eb000c33 	bl	1a598 <assertion_failed>
   174c8:	eaffffe4 	b	17460 <CSMSC951xDevice::PHYWaitNotBusy()+0x18>
   174cc:	0000018e 	.word	0x0000018e
   174d0:	00026470 	.word	0x00026470
   174d4:	000264cc 	.word	0x000264cc

000174d8 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)>:
   174d8:	e351001f 	cmp	r1, #31
   174dc:	e92d4070 	push	{r4, r5, r6, lr}
   174e0:	e1a05001 	mov	r5, r1
   174e4:	e1a04000 	mov	r4, r0
   174e8:	e1a06002 	mov	r6, r2
   174ec:	ca000005 	bgt	17508 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x30>
   174f0:	e1a00004 	mov	r0, r4
   174f4:	ebffffd3 	bl	17448 <CSMSC951xDevice::PHYWaitNotBusy()>
   174f8:	e3500000 	cmp	r0, #0
   174fc:	1a000009 	bne	17528 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x50>
   17500:	e3a00000 	mov	r0, #0
   17504:	e8bd8070 	pop	{r4, r5, r6, pc}
   17508:	e59f2058 	ldr	r2, [pc, #88]	; 17568 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x90>
   1750c:	e59f1058 	ldr	r1, [pc, #88]	; 1756c <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x94>
   17510:	e59f0058 	ldr	r0, [pc, #88]	; 17570 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x98>
   17514:	eb000c1f 	bl	1a598 <assertion_failed>
   17518:	e1a00004 	mov	r0, r4
   1751c:	ebffffc9 	bl	17448 <CSMSC951xDevice::PHYWaitNotBusy()>
   17520:	e3500000 	cmp	r0, #0
   17524:	0afffff5 	beq	17500 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x28>
   17528:	e1a02006 	mov	r2, r6
   1752c:	e3a01f46 	mov	r1, #280	; 0x118
   17530:	e1a00004 	mov	r0, r4
   17534:	ebffff8f 	bl	17378 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   17538:	e3500000 	cmp	r0, #0
   1753c:	0affffef 	beq	17500 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x28>
   17540:	e59f202c 	ldr	r2, [pc, #44]	; 17574 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x9c>
   17544:	e3a01f45 	mov	r1, #276	; 0x114
   17548:	e1822305 	orr	r2, r2, r5, lsl #6
   1754c:	e1a00004 	mov	r0, r4
   17550:	ebffff88 	bl	17378 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   17554:	e3500000 	cmp	r0, #0
   17558:	0affffe8 	beq	17500 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x28>
   1755c:	e1a00004 	mov	r0, r4
   17560:	e8bd4070 	pop	{r4, r5, r6, lr}
   17564:	eaffffb7 	b	17448 <CSMSC951xDevice::PHYWaitNotBusy()>
   17568:	00000162 	.word	0x00000162
   1756c:	00026470 	.word	0x00026470
   17570:	000264d8 	.word	0x000264d8
   17574:	00000803 	.word	0x00000803

00017578 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)>:
   17578:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1757c:	e351001f 	cmp	r1, #31
   17580:	e24dd00c 	sub	sp, sp, #12
   17584:	e1a06001 	mov	r6, r1
   17588:	e1a04000 	mov	r4, r0
   1758c:	e1a07002 	mov	r7, r2
   17590:	ca000011 	bgt	175dc <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x64>
   17594:	e1a00004 	mov	r0, r4
   17598:	ebffffaa 	bl	17448 <CSMSC951xDevice::PHYWaitNotBusy()>
   1759c:	e2505000 	subs	r5, r0, #0
   175a0:	1a000002 	bne	175b0 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x38>
   175a4:	e1a00005 	mov	r0, r5
   175a8:	e28dd00c 	add	sp, sp, #12
   175ac:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   175b0:	e59f2090 	ldr	r2, [pc, #144]	; 17648 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xd0>
   175b4:	e3a01f45 	mov	r1, #276	; 0x114
   175b8:	e1822306 	orr	r2, r2, r6, lsl #6
   175bc:	e1a00004 	mov	r0, r4
   175c0:	ebffff6c 	bl	17378 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   175c4:	e3500000 	cmp	r0, #0
   175c8:	1a000008 	bne	175f0 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x78>
   175cc:	e3a05000 	mov	r5, #0
   175d0:	e1a00005 	mov	r0, r5
   175d4:	e28dd00c 	add	sp, sp, #12
   175d8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   175dc:	e59f2068 	ldr	r2, [pc, #104]	; 1764c <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xd4>
   175e0:	e59f1068 	ldr	r1, [pc, #104]	; 17650 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xd8>
   175e4:	e59f0068 	ldr	r0, [pc, #104]	; 17654 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xdc>
   175e8:	eb000bea 	bl	1a598 <assertion_failed>
   175ec:	eaffffe8 	b	17594 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x1c>
   175f0:	e1a00004 	mov	r0, r4
   175f4:	ebffff93 	bl	17448 <CSMSC951xDevice::PHYWaitNotBusy()>
   175f8:	e3500000 	cmp	r0, #0
   175fc:	0afffff2 	beq	175cc <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x54>
   17600:	e1a00004 	mov	r0, r4
   17604:	e28d2004 	add	r2, sp, #4
   17608:	e3a01f46 	mov	r1, #280	; 0x118
   1760c:	ebffff73 	bl	173e0 <CSMSC951xDevice::ReadReg(unsigned int, unsigned int*)>
   17610:	e2505000 	subs	r5, r0, #0
   17614:	0affffec 	beq	175cc <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x54>
   17618:	e3570000 	cmp	r7, #0
   1761c:	0a000004 	beq	17634 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xbc>
   17620:	e1a00005 	mov	r0, r5
   17624:	e59d3004 	ldr	r3, [sp, #4]
   17628:	e1c730b0 	strh	r3, [r7]
   1762c:	e28dd00c 	add	sp, sp, #12
   17630:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   17634:	e59f201c 	ldr	r2, [pc, #28]	; 17658 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xe0>
   17638:	e59f1010 	ldr	r1, [pc, #16]	; 17650 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xd8>
   1763c:	e59f0018 	ldr	r0, [pc, #24]	; 1765c <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xe4>
   17640:	eb000bd4 	bl	1a598 <assertion_failed>
   17644:	eafffff5 	b	17620 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xa8>
   17648:	00000801 	.word	0x00000801
   1764c:	00000175 	.word	0x00000175
   17650:	00026470 	.word	0x00026470
   17654:	000264d8 	.word	0x000264d8
   17658:	00000185 	.word	0x00000185
   1765c:	000264e8 	.word	0x000264e8

00017660 <CSMSC951xDevice::IsLinkUp()>:
   17660:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   17664:	e24dd00c 	sub	sp, sp, #12
   17668:	e28d2006 	add	r2, sp, #6
   1766c:	e3a01001 	mov	r1, #1
   17670:	ebffffc0 	bl	17578 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)>
   17674:	e3500000 	cmp	r0, #0
   17678:	11dd00b6 	ldrhne	r0, [sp, #6]
   1767c:	11a00120 	lsrne	r0, r0, #2
   17680:	12000001 	andne	r0, r0, #1
   17684:	e28dd00c 	add	sp, sp, #12
   17688:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0001768c <CSMSC951xDevice::GetLinkSpeed()>:
   1768c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   17690:	e24dd00c 	sub	sp, sp, #12
   17694:	e28d2006 	add	r2, sp, #6
   17698:	e3a0101f 	mov	r1, #31
   1769c:	ebffffb5 	bl	17578 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)>
   176a0:	e3500000 	cmp	r0, #0
   176a4:	1a000002 	bne	176b4 <CSMSC951xDevice::GetLinkSpeed()+0x28>
   176a8:	e3a00006 	mov	r0, #6
   176ac:	e28dd00c 	add	sp, sp, #12
   176b0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   176b4:	e1dd30b6 	ldrh	r3, [sp, #6]
   176b8:	e3130a01 	tst	r3, #4096	; 0x1000
   176bc:	0afffff9 	beq	176a8 <CSMSC951xDevice::GetLinkSpeed()+0x1c>
   176c0:	e1a03143 	asr	r3, r3, #2
   176c4:	e2033007 	and	r3, r3, #7
   176c8:	e2433001 	sub	r3, r3, #1
   176cc:	e3530005 	cmp	r3, #5
   176d0:	8afffff4 	bhi	176a8 <CSMSC951xDevice::GetLinkSpeed()+0x1c>
   176d4:	e59f2008 	ldr	r2, [pc, #8]	; 176e4 <CSMSC951xDevice::GetLinkSpeed()+0x58>
   176d8:	e0823003 	add	r3, r2, r3
   176dc:	e5d30044 	ldrb	r0, [r3, #68]	; 0x44
   176e0:	eafffff1 	b	176ac <CSMSC951xDevice::GetLinkSpeed()+0x20>
   176e4:	00026424 	.word	0x00026424

000176e8 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>:
   176e8:	e92d4030 	push	{r4, r5, lr}
   176ec:	e1a04002 	mov	r4, r2
   176f0:	e24dd014 	sub	sp, sp, #20
   176f4:	e1a05001 	mov	r5, r1
   176f8:	e28d200c 	add	r2, sp, #12
   176fc:	e1a01004 	mov	r1, r4
   17700:	ebffff36 	bl	173e0 <CSMSC951xDevice::ReadReg(unsigned int, unsigned int*)>
   17704:	e3500000 	cmp	r0, #0
   17708:	0a000008 	beq	17730 <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0x48>
   1770c:	eb001594 	bl	1cd64 <CLogger::Get()>
   17710:	e59d300c 	ldr	r3, [sp, #12]
   17714:	e3a02004 	mov	r2, #4
   17718:	e88d0028 	stm	sp, {r3, r5}
   1771c:	e59f102c 	ldr	r1, [pc, #44]	; 17750 <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0x68>
   17720:	e59f302c 	ldr	r3, [pc, #44]	; 17754 <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0x6c>
   17724:	eb001737 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17728:	e28dd014 	add	sp, sp, #20
   1772c:	e8bd8030 	pop	{r4, r5, pc}
   17730:	eb00158b 	bl	1cd64 <CLogger::Get()>
   17734:	e58d4000 	str	r4, [sp]
   17738:	e59f3018 	ldr	r3, [pc, #24]	; 17758 <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0x70>
   1773c:	e3a02001 	mov	r2, #1
   17740:	e59f1008 	ldr	r1, [pc, #8]	; 17750 <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0x68>
   17744:	eb00172f 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17748:	e28dd014 	add	sp, sp, #20
   1774c:	e8bd8030 	pop	{r4, r5, pc}
   17750:	0002645c 	.word	0x0002645c
   17754:	00026510 	.word	0x00026510
   17758:	000264f4 	.word	0x000264f4

0001775c <CSMSC951xDevice::DumpRegs()>:
   1775c:	e92d4010 	push	{r4, lr}
   17760:	e1a04000 	mov	r4, r0
   17764:	e3a02000 	mov	r2, #0
   17768:	e59f1134 	ldr	r1, [pc, #308]	; 178a4 <CSMSC951xDevice::DumpRegs()+0x148>
   1776c:	ebffffdd 	bl	176e8 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   17770:	e1a00004 	mov	r0, r4
   17774:	e3a02008 	mov	r2, #8
   17778:	e59f1128 	ldr	r1, [pc, #296]	; 178a8 <CSMSC951xDevice::DumpRegs()+0x14c>
   1777c:	ebffffd9 	bl	176e8 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   17780:	e1a00004 	mov	r0, r4
   17784:	e3a0200c 	mov	r2, #12
   17788:	e59f111c 	ldr	r1, [pc, #284]	; 178ac <CSMSC951xDevice::DumpRegs()+0x150>
   1778c:	ebffffd5 	bl	176e8 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   17790:	e1a00004 	mov	r0, r4
   17794:	e3a02010 	mov	r2, #16
   17798:	e59f1110 	ldr	r1, [pc, #272]	; 178b0 <CSMSC951xDevice::DumpRegs()+0x154>
   1779c:	ebffffd1 	bl	176e8 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   177a0:	e1a00004 	mov	r0, r4
   177a4:	e3a02014 	mov	r2, #20
   177a8:	e59f1104 	ldr	r1, [pc, #260]	; 178b4 <CSMSC951xDevice::DumpRegs()+0x158>
   177ac:	ebffffcd 	bl	176e8 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   177b0:	e1a00004 	mov	r0, r4
   177b4:	e3a02018 	mov	r2, #24
   177b8:	e59f10f8 	ldr	r1, [pc, #248]	; 178b8 <CSMSC951xDevice::DumpRegs()+0x15c>
   177bc:	ebffffc9 	bl	176e8 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   177c0:	e1a00004 	mov	r0, r4
   177c4:	e3a02020 	mov	r2, #32
   177c8:	e59f10ec 	ldr	r1, [pc, #236]	; 178bc <CSMSC951xDevice::DumpRegs()+0x160>
   177cc:	ebffffc5 	bl	176e8 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   177d0:	e1a00004 	mov	r0, r4
   177d4:	e3a02024 	mov	r2, #36	; 0x24
   177d8:	e59f10e0 	ldr	r1, [pc, #224]	; 178c0 <CSMSC951xDevice::DumpRegs()+0x164>
   177dc:	ebffffc1 	bl	176e8 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   177e0:	e1a00004 	mov	r0, r4
   177e4:	e3a02028 	mov	r2, #40	; 0x28
   177e8:	e59f10d4 	ldr	r1, [pc, #212]	; 178c4 <CSMSC951xDevice::DumpRegs()+0x168>
   177ec:	ebffffbd 	bl	176e8 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   177f0:	e1a00004 	mov	r0, r4
   177f4:	e3a0202c 	mov	r2, #44	; 0x2c
   177f8:	e59f10c8 	ldr	r1, [pc, #200]	; 178c8 <CSMSC951xDevice::DumpRegs()+0x16c>
   177fc:	ebffffb9 	bl	176e8 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   17800:	e1a00004 	mov	r0, r4
   17804:	e3a02038 	mov	r2, #56	; 0x38
   17808:	e59f10bc 	ldr	r1, [pc, #188]	; 178cc <CSMSC951xDevice::DumpRegs()+0x170>
   1780c:	ebffffb5 	bl	176e8 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   17810:	e1a00004 	mov	r0, r4
   17814:	e3a02068 	mov	r2, #104	; 0x68
   17818:	e59f10b0 	ldr	r1, [pc, #176]	; 178d0 <CSMSC951xDevice::DumpRegs()+0x174>
   1781c:	ebffffb1 	bl	176e8 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   17820:	e1a00004 	mov	r0, r4
   17824:	e3a0206c 	mov	r2, #108	; 0x6c
   17828:	e59f10a4 	ldr	r1, [pc, #164]	; 178d4 <CSMSC951xDevice::DumpRegs()+0x178>
   1782c:	ebffffad 	bl	176e8 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   17830:	e1a00004 	mov	r0, r4
   17834:	e3a02c01 	mov	r2, #256	; 0x100
   17838:	e59f1098 	ldr	r1, [pc, #152]	; 178d8 <CSMSC951xDevice::DumpRegs()+0x17c>
   1783c:	ebffffa9 	bl	176e8 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   17840:	e1a00004 	mov	r0, r4
   17844:	e3a02f41 	mov	r2, #260	; 0x104
   17848:	e59f108c 	ldr	r1, [pc, #140]	; 178dc <CSMSC951xDevice::DumpRegs()+0x180>
   1784c:	ebffffa5 	bl	176e8 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   17850:	e1a00004 	mov	r0, r4
   17854:	e3a02f42 	mov	r2, #264	; 0x108
   17858:	e59f1080 	ldr	r1, [pc, #128]	; 178e0 <CSMSC951xDevice::DumpRegs()+0x184>
   1785c:	ebffffa1 	bl	176e8 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   17860:	e1a00004 	mov	r0, r4
   17864:	e3a02f43 	mov	r2, #268	; 0x10c
   17868:	e59f1074 	ldr	r1, [pc, #116]	; 178e4 <CSMSC951xDevice::DumpRegs()+0x188>
   1786c:	ebffff9d 	bl	176e8 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   17870:	e1a00004 	mov	r0, r4
   17874:	e3a02e11 	mov	r2, #272	; 0x110
   17878:	e59f1068 	ldr	r1, [pc, #104]	; 178e8 <CSMSC951xDevice::DumpRegs()+0x18c>
   1787c:	ebffff99 	bl	176e8 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   17880:	e1a00004 	mov	r0, r4
   17884:	e3a02f47 	mov	r2, #284	; 0x11c
   17888:	e59f105c 	ldr	r1, [pc, #92]	; 178ec <CSMSC951xDevice::DumpRegs()+0x190>
   1788c:	ebffff95 	bl	176e8 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   17890:	e1a00004 	mov	r0, r4
   17894:	e8bd4010 	pop	{r4, lr}
   17898:	e3a02f4b 	mov	r2, #300	; 0x12c
   1789c:	e59f104c 	ldr	r1, [pc, #76]	; 178f0 <CSMSC951xDevice::DumpRegs()+0x194>
   178a0:	eaffff90 	b	176e8 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   178a4:	00026518 	.word	0x00026518
   178a8:	00026520 	.word	0x00026520
   178ac:	00026528 	.word	0x00026528
   178b0:	00026530 	.word	0x00026530
   178b4:	00026538 	.word	0x00026538
   178b8:	00026540 	.word	0x00026540
   178bc:	0002654c 	.word	0x0002654c
   178c0:	00026554 	.word	0x00026554
   178c4:	00026558 	.word	0x00026558
   178c8:	00026564 	.word	0x00026564
   178cc:	0002656c 	.word	0x0002656c
   178d0:	00026578 	.word	0x00026578
   178d4:	00026584 	.word	0x00026584
   178d8:	00026590 	.word	0x00026590
   178dc:	00026598 	.word	0x00026598
   178e0:	000265a0 	.word	0x000265a0
   178e4:	000265a8 	.word	0x000265a8
   178e8:	000265b0 	.word	0x000265b0
   178ec:	000265b8 	.word	0x000265b8
   178f0:	000265c0 	.word	0x000265c0

000178f4 <CSMSC951xDevice::Configure()>:
   178f4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   178f8:	e3a06000 	mov	r6, #0
   178fc:	e24dd038 	sub	sp, sp, #56	; 0x38
   17900:	e1a05000 	mov	r5, r0
   17904:	e28d0008 	add	r0, sp, #8
   17908:	eb000b46 	bl	1a628 <CBcmPropertyTags::CBcmPropertyTags()>
   1790c:	e28d0008 	add	r0, sp, #8
   17910:	e58d6000 	str	r6, [sp]
   17914:	e3a03014 	mov	r3, #20
   17918:	e28d2024 	add	r2, sp, #36	; 0x24
   1791c:	e59f1274 	ldr	r1, [pc, #628]	; 17b98 <CSMSC951xDevice::Configure()+0x2a4>
   17920:	eb000b97 	bl	1a784 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   17924:	e2504000 	subs	r4, r0, #0
   17928:	0a00003c 	beq	17a20 <CSMSC951xDevice::Configure()+0x12c>
   1792c:	e2857018 	add	r7, r5, #24
   17930:	e28d1030 	add	r1, sp, #48	; 0x30
   17934:	e1a00007 	mov	r0, r7
   17938:	eb000454 	bl	18a90 <CMACAddress::Set(unsigned char const*)>
   1793c:	e28d0014 	add	r0, sp, #20
   17940:	eb001fd1 	bl	1f88c <CString::CString()>
   17944:	e28d1014 	add	r1, sp, #20
   17948:	e1a00007 	mov	r0, r7
   1794c:	eb0004b0 	bl	18c14 <CMACAddress::Format(CString*) const>
   17950:	eb001503 	bl	1cd64 <CLogger::Get()>
   17954:	e1a04000 	mov	r4, r0
   17958:	e28d0014 	add	r0, sp, #20
   1795c:	eb001fe0 	bl	1f8e4 <CString::operator char const*() const>
   17960:	e59f3234 	ldr	r3, [pc, #564]	; 17b9c <CSMSC951xDevice::Configure()+0x2a8>
   17964:	e58d0000 	str	r0, [sp]
   17968:	e3a02004 	mov	r2, #4
   1796c:	e1a00004 	mov	r0, r4
   17970:	e59f1228 	ldr	r1, [pc, #552]	; 17ba0 <CSMSC951xDevice::Configure()+0x2ac>
   17974:	eb0016a3 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17978:	e1a00005 	mov	r0, r5
   1797c:	ebfff3e2 	bl	1490c <CUSBFunction::GetNumEndpoints() const>
   17980:	e3500003 	cmp	r0, #3
   17984:	03a06005 	moveq	r6, #5
   17988:	03a08014 	moveq	r8, #20
   1798c:	0a00000e 	beq	179cc <CSMSC951xDevice::Configure()+0xd8>
   17990:	e1a00005 	mov	r0, r5
   17994:	e59f1204 	ldr	r1, [pc, #516]	; 17ba0 <CSMSC951xDevice::Configure()+0x2ac>
   17998:	e1a04006 	mov	r4, r6
   1799c:	ebfff460 	bl	14b24 <CUSBFunction::ConfigurationError(char const*) const>
   179a0:	e28d0014 	add	r0, sp, #20
   179a4:	eb001f85 	bl	1f7c0 <CString::~CString()>
   179a8:	e28d0008 	add	r0, sp, #8
   179ac:	eb000b23 	bl	1a640 <CBcmPropertyTags::~CBcmPropertyTags()>
   179b0:	e1a00004 	mov	r0, r4
   179b4:	e28dd038 	add	sp, sp, #56	; 0x38
   179b8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   179bc:	e5d43003 	ldrb	r3, [r4, #3]
   179c0:	e203303f 	and	r3, r3, #63	; 0x3f
   179c4:	e3530002 	cmp	r3, #2
   179c8:	0a00001a 	beq	17a38 <CSMSC951xDevice::Configure()+0x144>
   179cc:	e1a01006 	mov	r1, r6
   179d0:	e1a00005 	mov	r0, r5
   179d4:	ebfff43f 	bl	14ad8 <CUSBFunction::GetDescriptor(unsigned char)>
   179d8:	e2504000 	subs	r4, r0, #0
   179dc:	1afffff6 	bne	179bc <CSMSC951xDevice::Configure()+0xc8>
   179e0:	e5953010 	ldr	r3, [r5, #16]
   179e4:	e1a00005 	mov	r0, r5
   179e8:	e3530000 	cmp	r3, #0
   179ec:	0a000022 	beq	17a7c <CSMSC951xDevice::Configure()+0x188>
   179f0:	e5953014 	ldr	r3, [r5, #20]
   179f4:	e3530000 	cmp	r3, #0
   179f8:	0a00001f 	beq	17a7c <CSMSC951xDevice::Configure()+0x188>
   179fc:	ebfff404 	bl	14a14 <CUSBFunction::Configure()>
   17a00:	e2504000 	subs	r4, r0, #0
   17a04:	1a000020 	bne	17a8c <CSMSC951xDevice::Configure()+0x198>
   17a08:	eb0014d5 	bl	1cd64 <CLogger::Get()>
   17a0c:	e59f3190 	ldr	r3, [pc, #400]	; 17ba4 <CSMSC951xDevice::Configure()+0x2b0>
   17a10:	e3a02001 	mov	r2, #1
   17a14:	e59f1184 	ldr	r1, [pc, #388]	; 17ba0 <CSMSC951xDevice::Configure()+0x2ac>
   17a18:	eb00167a 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17a1c:	eaffffdf 	b	179a0 <CSMSC951xDevice::Configure()+0xac>
   17a20:	eb0014cf 	bl	1cd64 <CLogger::Get()>
   17a24:	e59f317c 	ldr	r3, [pc, #380]	; 17ba8 <CSMSC951xDevice::Configure()+0x2b4>
   17a28:	e3a02001 	mov	r2, #1
   17a2c:	e59f116c 	ldr	r1, [pc, #364]	; 17ba0 <CSMSC951xDevice::Configure()+0x2ac>
   17a30:	eb001674 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17a34:	eaffffdb 	b	179a8 <CSMSC951xDevice::Configure()+0xb4>
   17a38:	e1d430d2 	ldrsb	r3, [r4, #2]
   17a3c:	e3530000 	cmp	r3, #0
   17a40:	ba000024 	blt	17ad8 <CSMSC951xDevice::Configure()+0x1e4>
   17a44:	e5953014 	ldr	r3, [r5, #20]
   17a48:	e1a00005 	mov	r0, r5
   17a4c:	e3530000 	cmp	r3, #0
   17a50:	1a000009 	bne	17a7c <CSMSC951xDevice::Configure()+0x188>
   17a54:	ebfff3bc 	bl	1494c <CUSBFunction::GetDevice() const>
   17a58:	e1a0a000 	mov	sl, r0
   17a5c:	e1a00008 	mov	r0, r8
   17a60:	eb002b9d 	bl	228dc <operator new(unsigned int)>
   17a64:	e1a09000 	mov	r9, r0
   17a68:	e1a02004 	mov	r2, r4
   17a6c:	e1a0100a 	mov	r1, sl
   17a70:	ebffd9cf 	bl	e1b4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   17a74:	e5859014 	str	r9, [r5, #20]
   17a78:	eaffffd3 	b	179cc <CSMSC951xDevice::Configure()+0xd8>
   17a7c:	e59f111c 	ldr	r1, [pc, #284]	; 17ba0 <CSMSC951xDevice::Configure()+0x2ac>
   17a80:	ebfff427 	bl	14b24 <CUSBFunction::ConfigurationError(char const*) const>
   17a84:	e3a04000 	mov	r4, #0
   17a88:	eaffffc4 	b	179a0 <CSMSC951xDevice::Configure()+0xac>
   17a8c:	e1a00007 	mov	r0, r7
   17a90:	e28d100c 	add	r1, sp, #12
   17a94:	eb00042a 	bl	18b44 <CMACAddress::CopyTo(unsigned char*) const>
   17a98:	e5dd2011 	ldrb	r2, [sp, #17]
   17a9c:	e5dd3010 	ldrb	r3, [sp, #16]
   17aa0:	e3a01f41 	mov	r1, #260	; 0x104
   17aa4:	e1832402 	orr	r2, r3, r2, lsl #8
   17aa8:	e1a00005 	mov	r0, r5
   17aac:	e59d400c 	ldr	r4, [sp, #12]
   17ab0:	ebfffe30 	bl	17378 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   17ab4:	e3500000 	cmp	r0, #0
   17ab8:	1a000014 	bne	17b10 <CSMSC951xDevice::Configure()+0x21c>
   17abc:	eb0014a8 	bl	1cd64 <CLogger::Get()>
   17ac0:	e59f30e4 	ldr	r3, [pc, #228]	; 17bac <CSMSC951xDevice::Configure()+0x2b8>
   17ac4:	e3a02001 	mov	r2, #1
   17ac8:	e59f10d0 	ldr	r1, [pc, #208]	; 17ba0 <CSMSC951xDevice::Configure()+0x2ac>
   17acc:	eb00164d 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17ad0:	e3a04000 	mov	r4, #0
   17ad4:	eaffffb1 	b	179a0 <CSMSC951xDevice::Configure()+0xac>
   17ad8:	e5953010 	ldr	r3, [r5, #16]
   17adc:	e1a00005 	mov	r0, r5
   17ae0:	e3530000 	cmp	r3, #0
   17ae4:	1affffe4 	bne	17a7c <CSMSC951xDevice::Configure()+0x188>
   17ae8:	ebfff397 	bl	1494c <CUSBFunction::GetDevice() const>
   17aec:	e1a0a000 	mov	sl, r0
   17af0:	e1a00008 	mov	r0, r8
   17af4:	eb002b78 	bl	228dc <operator new(unsigned int)>
   17af8:	e1a09000 	mov	r9, r0
   17afc:	e1a02004 	mov	r2, r4
   17b00:	e1a0100a 	mov	r1, sl
   17b04:	ebffd9aa 	bl	e1b4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   17b08:	e5859010 	str	r9, [r5, #16]
   17b0c:	eaffffae 	b	179cc <CSMSC951xDevice::Configure()+0xd8>
   17b10:	e1a02004 	mov	r2, r4
   17b14:	e3a01f42 	mov	r1, #264	; 0x108
   17b18:	e1a00005 	mov	r0, r5
   17b1c:	ebfffe15 	bl	17378 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   17b20:	e3500000 	cmp	r0, #0
   17b24:	0affffe4 	beq	17abc <CSMSC951xDevice::Configure()+0x1c8>
   17b28:	e59f2080 	ldr	r2, [pc, #128]	; 17bb0 <CSMSC951xDevice::Configure()+0x2bc>
   17b2c:	e3a01024 	mov	r1, #36	; 0x24
   17b30:	e1a00005 	mov	r0, r5
   17b34:	ebfffe0f 	bl	17378 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   17b38:	e3500000 	cmp	r0, #0
   17b3c:	1a000006 	bne	17b5c <CSMSC951xDevice::Configure()+0x268>
   17b40:	eb001487 	bl	1cd64 <CLogger::Get()>
   17b44:	e59f3068 	ldr	r3, [pc, #104]	; 17bb4 <CSMSC951xDevice::Configure()+0x2c0>
   17b48:	e3a02001 	mov	r2, #1
   17b4c:	e59f104c 	ldr	r1, [pc, #76]	; 17ba0 <CSMSC951xDevice::Configure()+0x2ac>
   17b50:	eb00162c 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17b54:	e3a04000 	mov	r4, #0
   17b58:	eaffff90 	b	179a0 <CSMSC951xDevice::Configure()+0xac>
   17b5c:	e59f2054 	ldr	r2, [pc, #84]	; 17bb8 <CSMSC951xDevice::Configure()+0x2c4>
   17b60:	e3a01c01 	mov	r1, #256	; 0x100
   17b64:	e1a00005 	mov	r0, r5
   17b68:	ebfffe02 	bl	17378 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   17b6c:	e3500000 	cmp	r0, #0
   17b70:	0afffff2 	beq	17b40 <CSMSC951xDevice::Configure()+0x24c>
   17b74:	e3a02004 	mov	r2, #4
   17b78:	e3a01010 	mov	r1, #16
   17b7c:	e1a00005 	mov	r0, r5
   17b80:	ebfffdfc 	bl	17378 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   17b84:	e2504000 	subs	r4, r0, #0
   17b88:	0affffec 	beq	17b40 <CSMSC951xDevice::Configure()+0x24c>
   17b8c:	e1a00005 	mov	r0, r5
   17b90:	eb000466 	bl	18d30 <CNetDevice::AddNetDevice()>
   17b94:	eaffff81 	b	179a0 <CSMSC951xDevice::Configure()+0xac>
   17b98:	00010003 	.word	0x00010003
   17b9c:	000262d8 	.word	0x000262d8
   17ba0:	0002645c 	.word	0x0002645c
   17ba4:	00025170 	.word	0x00025170
   17ba8:	000262c0 	.word	0x000262c0
   17bac:	000265c8 	.word	0x000265c8
   17bb0:	01110000 	.word	0x01110000
   17bb4:	000265e0 	.word	0x000265e0
   17bb8:	0080000c 	.word	0x0080000c

00017bbc <CLAN7800Device::GetMACAddress() const>:
   17bbc:	e2800018 	add	r0, r0, #24
   17bc0:	e12fff1e 	bx	lr

00017bc4 <CLAN7800Device::~CLAN7800Device()>:
   17bc4:	e92d4070 	push	{r4, r5, r6, lr}
   17bc8:	e5905014 	ldr	r5, [r0, #20]
   17bcc:	e59f3068 	ldr	r3, [pc, #104]	; 17c3c <CLAN7800Device::~CLAN7800Device()+0x78>
   17bd0:	e3550000 	cmp	r5, #0
   17bd4:	e1a04000 	mov	r4, r0
   17bd8:	e5803000 	str	r3, [r0]
   17bdc:	0a000004 	beq	17bf4 <CLAN7800Device::~CLAN7800Device()+0x30>
   17be0:	e1a00005 	mov	r0, r5
   17be4:	ebffda04 	bl	e3fc <CUSBEndpoint::~CUSBEndpoint()>
   17be8:	e1a00005 	mov	r0, r5
   17bec:	e3a01014 	mov	r1, #20
   17bf0:	eb002b3d 	bl	228ec <operator delete(void*, unsigned int)>
   17bf4:	e3a03000 	mov	r3, #0
   17bf8:	e5945010 	ldr	r5, [r4, #16]
   17bfc:	e5843014 	str	r3, [r4, #20]
   17c00:	e1550003 	cmp	r5, r3
   17c04:	0a000004 	beq	17c1c <CLAN7800Device::~CLAN7800Device()+0x58>
   17c08:	e1a00005 	mov	r0, r5
   17c0c:	ebffd9fa 	bl	e3fc <CUSBEndpoint::~CUSBEndpoint()>
   17c10:	e1a00005 	mov	r0, r5
   17c14:	e3a01014 	mov	r1, #20
   17c18:	eb002b33 	bl	228ec <operator delete(void*, unsigned int)>
   17c1c:	e3a03000 	mov	r3, #0
   17c20:	e2840018 	add	r0, r4, #24
   17c24:	e5843010 	str	r3, [r4, #16]
   17c28:	eb000376 	bl	18a08 <CMACAddress::~CMACAddress()>
   17c2c:	e1a00004 	mov	r0, r4
   17c30:	eb000424 	bl	18cc8 <CNetDevice::~CNetDevice()>
   17c34:	e1a00004 	mov	r0, r4
   17c38:	e8bd8070 	pop	{r4, r5, r6, pc}
   17c3c:	000265fc 	.word	0x000265fc

00017c40 <CLAN7800Device::~CLAN7800Device()>:
   17c40:	e92d4010 	push	{r4, lr}
   17c44:	e1a04000 	mov	r4, r0
   17c48:	ebffffdd 	bl	17bc4 <CLAN7800Device::~CLAN7800Device()>
   17c4c:	e1a00004 	mov	r0, r4
   17c50:	e3a01020 	mov	r1, #32
   17c54:	eb002b24 	bl	228ec <operator delete(void*, unsigned int)>
   17c58:	e1a00004 	mov	r0, r4
   17c5c:	e8bd8010 	pop	{r4, pc}

00017c60 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)>:
   17c60:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   17c64:	e5903010 	ldr	r3, [r0, #16]
   17c68:	e24dd030 	sub	sp, sp, #48	; 0x30
   17c6c:	e3530000 	cmp	r3, #0
   17c70:	e1a04000 	mov	r4, r0
   17c74:	e1a05001 	mov	r5, r1
   17c78:	e1a08002 	mov	r8, r2
   17c7c:	0a000032 	beq	17d4c <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0xec>
   17c80:	e3550000 	cmp	r5, #0
   17c84:	0a000035 	beq	17d60 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x100>
   17c88:	e3a06000 	mov	r6, #0
   17c8c:	e5941010 	ldr	r1, [r4, #16]
   17c90:	e3a03d19 	mov	r3, #1600	; 0x640
   17c94:	e1a02005 	mov	r2, r5
   17c98:	e58d6000 	str	r6, [sp]
   17c9c:	e28d0008 	add	r0, sp, #8
   17ca0:	ebffdad8 	bl	e808 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   17ca4:	e1a00004 	mov	r0, r4
   17ca8:	ebfff348 	bl	149d0 <CUSBFunction::GetHost() const>
   17cac:	e5903000 	ldr	r3, [r0]
   17cb0:	e1a02006 	mov	r2, r6
   17cb4:	e5933008 	ldr	r3, [r3, #8]
   17cb8:	e28d1008 	add	r1, sp, #8
   17cbc:	e12fff33 	blx	r3
   17cc0:	e2504000 	subs	r4, r0, #0
   17cc4:	1a000005 	bne	17ce0 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x80>
   17cc8:	e3a04000 	mov	r4, #0
   17ccc:	e28d0008 	add	r0, sp, #8
   17cd0:	ebffdaf1 	bl	e89c <CUSBRequest::~CUSBRequest()>
   17cd4:	e1a00004 	mov	r0, r4
   17cd8:	e28dd030 	add	sp, sp, #48	; 0x30
   17cdc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   17ce0:	e28d0008 	add	r0, sp, #8
   17ce4:	ebffdb03 	bl	e8f8 <CUSBRequest::GetResultLength() const>
   17ce8:	e3500009 	cmp	r0, #9
   17cec:	9afffff5 	bls	17cc8 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x68>
   17cf0:	e5957000 	ldr	r7, [r5]
   17cf4:	e3170501 	tst	r7, #4194304	; 0x400000
   17cf8:	1a000022 	bne	17d88 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x128>
   17cfc:	e1a07907 	lsl	r7, r7, #18
   17d00:	e1a07927 	lsr	r7, r7, #18
   17d04:	e240000a 	sub	r0, r0, #10
   17d08:	e1570000 	cmp	r7, r0
   17d0c:	0a000003 	beq	17d20 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0xc0>
   17d10:	e59f20a4 	ldr	r2, [pc, #164]	; 17dbc <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x15c>
   17d14:	e59f10a4 	ldr	r1, [pc, #164]	; 17dc0 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x160>
   17d18:	e59f00a4 	ldr	r0, [pc, #164]	; 17dc4 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x164>
   17d1c:	eb000a1d 	bl	1a598 <assertion_failed>
   17d20:	e3570004 	cmp	r7, #4
   17d24:	9a000012 	bls	17d74 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x114>
   17d28:	e2476004 	sub	r6, r7, #4
   17d2c:	e1a02006 	mov	r2, r6
   17d30:	e285100a 	add	r1, r5, #10
   17d34:	e1a00005 	mov	r0, r5
   17d38:	eb0027eb 	bl	21cec <memcpy>
   17d3c:	e3580000 	cmp	r8, #0
   17d40:	0a000018 	beq	17da8 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x148>
   17d44:	e5886000 	str	r6, [r8]
   17d48:	eaffffdf 	b	17ccc <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x6c>
   17d4c:	e59f2074 	ldr	r2, [pc, #116]	; 17dc8 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x168>
   17d50:	e59f1068 	ldr	r1, [pc, #104]	; 17dc0 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x160>
   17d54:	e59f0070 	ldr	r0, [pc, #112]	; 17dcc <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x16c>
   17d58:	eb000a0e 	bl	1a598 <assertion_failed>
   17d5c:	eaffffc7 	b	17c80 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x20>
   17d60:	e3a02d07 	mov	r2, #448	; 0x1c0
   17d64:	e59f1054 	ldr	r1, [pc, #84]	; 17dc0 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x160>
   17d68:	e59f0060 	ldr	r0, [pc, #96]	; 17dd0 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x170>
   17d6c:	eb000a09 	bl	1a598 <assertion_failed>
   17d70:	eaffffc4 	b	17c88 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x28>
   17d74:	e3a02f76 	mov	r2, #472	; 0x1d8
   17d78:	e59f1040 	ldr	r1, [pc, #64]	; 17dc0 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x160>
   17d7c:	e59f0050 	ldr	r0, [pc, #80]	; 17dd4 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x174>
   17d80:	eb000a04 	bl	1a598 <assertion_failed>
   17d84:	eaffffcf 	b	17cc8 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x68>
   17d88:	eb0013f5 	bl	1cd64 <CLogger::Get()>
   17d8c:	e58d7000 	str	r7, [sp]
   17d90:	e59f3040 	ldr	r3, [pc, #64]	; 17dd8 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x178>
   17d94:	e3a02002 	mov	r2, #2
   17d98:	e59f103c 	ldr	r1, [pc, #60]	; 17ddc <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x17c>
   17d9c:	e1a04006 	mov	r4, r6
   17da0:	eb001598 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17da4:	eaffffc8 	b	17ccc <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x6c>
   17da8:	e59f2030 	ldr	r2, [pc, #48]	; 17de0 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x180>
   17dac:	e59f100c 	ldr	r1, [pc, #12]	; 17dc0 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x160>
   17db0:	e59f002c 	ldr	r0, [pc, #44]	; 17de4 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x184>
   17db4:	eb0009f7 	bl	1a598 <assertion_failed>
   17db8:	eaffffe1 	b	17d44 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0xe4>
   17dbc:	000001d7 	.word	0x000001d7
   17dc0:	00026634 	.word	0x00026634
   17dc4:	00026640 	.word	0x00026640
   17dc8:	000001bf 	.word	0x000001bf
   17dcc:	00026284 	.word	0x00026284
   17dd0:	0002526c 	.word	0x0002526c
   17dd4:	000264b8 	.word	0x000264b8
   17dd8:	00026480 	.word	0x00026480
   17ddc:	0002662c 	.word	0x0002662c
   17de0:	000001e3 	.word	0x000001e3
   17de4:	0002629c 	.word	0x0002629c

00017de8 <CLAN7800Device::SendFrame(void const*, unsigned int) [clone .part.0]>:
   17de8:	e92d4070 	push	{r4, r5, r6, lr}
   17dec:	e2516000 	subs	r6, r1, #0
   17df0:	e24dde65 	sub	sp, sp, #1616	; 0x650
   17df4:	e1a05000 	mov	r5, r0
   17df8:	e1a04002 	mov	r4, r2
   17dfc:	0a000018 	beq	17e64 <CLAN7800Device::SendFrame(void const*, unsigned int) [clone .part.0]+0x7c>
   17e00:	e1a01006 	mov	r1, r6
   17e04:	e1a02004 	mov	r2, r4
   17e08:	e28d0010 	add	r0, sp, #16
   17e0c:	eb0027b6 	bl	21cec <memcpy>
   17e10:	e3a02000 	mov	r2, #0
   17e14:	e3c434ff 	bic	r3, r4, #-16777216	; 0xff000000
   17e18:	e5951014 	ldr	r1, [r5, #20]
   17e1c:	e3c3360f 	bic	r3, r3, #15728640	; 0xf00000
   17e20:	e3833501 	orr	r3, r3, #4194304	; 0x400000
   17e24:	e1510002 	cmp	r1, r2
   17e28:	e58d3008 	str	r3, [sp, #8]
   17e2c:	e58d200c 	str	r2, [sp, #12]
   17e30:	0a000010 	beq	17e78 <CLAN7800Device::SendFrame(void const*, unsigned int) [clone .part.0]+0x90>
   17e34:	e1a00005 	mov	r0, r5
   17e38:	ebfff2e4 	bl	149d0 <CUSBFunction::GetHost() const>
   17e3c:	e3a0c000 	mov	ip, #0
   17e40:	e5951014 	ldr	r1, [r5, #20]
   17e44:	e2843008 	add	r3, r4, #8
   17e48:	e28d2008 	add	r2, sp, #8
   17e4c:	e58dc000 	str	ip, [sp]
   17e50:	ebffda53 	bl	e7a4 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   17e54:	e1e00000 	mvn	r0, r0
   17e58:	e1a00fa0 	lsr	r0, r0, #31
   17e5c:	e28dde65 	add	sp, sp, #1616	; 0x650
   17e60:	e8bd8070 	pop	{r4, r5, r6, pc}
   17e64:	e59f2020 	ldr	r2, [pc, #32]	; 17e8c <CLAN7800Device::SendFrame(void const*, unsigned int) [clone .part.0]+0xa4>
   17e68:	e59f1020 	ldr	r1, [pc, #32]	; 17e90 <CLAN7800Device::SendFrame(void const*, unsigned int) [clone .part.0]+0xa8>
   17e6c:	e59f0020 	ldr	r0, [pc, #32]	; 17e94 <CLAN7800Device::SendFrame(void const*, unsigned int) [clone .part.0]+0xac>
   17e70:	eb0009c8 	bl	1a598 <assertion_failed>
   17e74:	eaffffe1 	b	17e00 <CLAN7800Device::SendFrame(void const*, unsigned int) [clone .part.0]+0x18>
   17e78:	e59f2018 	ldr	r2, [pc, #24]	; 17e98 <CLAN7800Device::SendFrame(void const*, unsigned int) [clone .part.0]+0xb0>
   17e7c:	e59f100c 	ldr	r1, [pc, #12]	; 17e90 <CLAN7800Device::SendFrame(void const*, unsigned int) [clone .part.0]+0xa8>
   17e80:	e59f0014 	ldr	r0, [pc, #20]	; 17e9c <CLAN7800Device::SendFrame(void const*, unsigned int) [clone .part.0]+0xb4>
   17e84:	eb0009c3 	bl	1a598 <assertion_failed>
   17e88:	eaffffe9 	b	17e34 <CLAN7800Device::SendFrame(void const*, unsigned int) [clone .part.0]+0x4c>
   17e8c:	000001b2 	.word	0x000001b2
   17e90:	00026634 	.word	0x00026634
   17e94:	0002526c 	.word	0x0002526c
   17e98:	000001b9 	.word	0x000001b9
   17e9c:	0002624c 	.word	0x0002624c

00017ea0 <CLAN7800Device::SendFrame(void const*, unsigned int)>:
   17ea0:	e3520d19 	cmp	r2, #1600	; 0x640
   17ea4:	8a000000 	bhi	17eac <CLAN7800Device::SendFrame(void const*, unsigned int)+0xc>
   17ea8:	eaffffce 	b	17de8 <CLAN7800Device::SendFrame(void const*, unsigned int) [clone .part.0]>
   17eac:	e3a00000 	mov	r0, #0
   17eb0:	e12fff1e 	bx	lr

00017eb4 <CLAN7800Device::CLAN7800Device(CUSBFunction*)>:
   17eb4:	e92d4010 	push	{r4, lr}
   17eb8:	e1a04000 	mov	r4, r0
   17ebc:	eb000379 	bl	18ca8 <CNetDevice::CNetDevice(CUSBFunction*)>
   17ec0:	e3a03000 	mov	r3, #0
   17ec4:	e59f2018 	ldr	r2, [pc, #24]	; 17ee4 <CLAN7800Device::CLAN7800Device(CUSBFunction*)+0x30>
   17ec8:	e5843010 	str	r3, [r4, #16]
   17ecc:	e5842000 	str	r2, [r4]
   17ed0:	e5843014 	str	r3, [r4, #20]
   17ed4:	e2840018 	add	r0, r4, #24
   17ed8:	eb0002c7 	bl	189fc <CMACAddress::CMACAddress()>
   17edc:	e1a00004 	mov	r0, r4
   17ee0:	e8bd8010 	pop	{r4, pc}
   17ee4:	000265fc 	.word	0x000265fc

00017ee8 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>:
   17ee8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   17eec:	e24dd01c 	sub	sp, sp, #28
   17ef0:	e28d5018 	add	r5, sp, #24
   17ef4:	e1a06001 	mov	r6, r1
   17ef8:	e5252004 	str	r2, [r5, #-4]!
   17efc:	e1a04000 	mov	r4, r0
   17f00:	ebfff2b2 	bl	149d0 <CUSBFunction::GetHost() const>
   17f04:	e1a07000 	mov	r7, r0
   17f08:	e1a00004 	mov	r0, r4
   17f0c:	ebfff29e 	bl	1498c <CUSBFunction::GetEndpoint0() const>
   17f10:	e3a04000 	mov	r4, #0
   17f14:	e3a03004 	mov	r3, #4
   17f18:	e6ff2076 	uxth	r2, r6
   17f1c:	e1a01000 	mov	r1, r0
   17f20:	e58d2004 	str	r2, [sp, #4]
   17f24:	e58d300c 	str	r3, [sp, #12]
   17f28:	e58d5008 	str	r5, [sp, #8]
   17f2c:	e1a00007 	mov	r0, r7
   17f30:	e58d4000 	str	r4, [sp]
   17f34:	e3a030a0 	mov	r3, #160	; 0xa0
   17f38:	e3a02040 	mov	r2, #64	; 0x40
   17f3c:	ebffd9b2 	bl	e60c <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   17f40:	e1500004 	cmp	r0, r4
   17f44:	a3a00001 	movge	r0, #1
   17f48:	ba000001 	blt	17f54 <CLAN7800Device::WriteReg(unsigned int, unsigned int)+0x6c>
   17f4c:	e28dd01c 	add	sp, sp, #28
   17f50:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   17f54:	eb001382 	bl	1cd64 <CLogger::Get()>
   17f58:	e58d6000 	str	r6, [sp]
   17f5c:	e59f3014 	ldr	r3, [pc, #20]	; 17f78 <CLAN7800Device::WriteReg(unsigned int, unsigned int)+0x90>
   17f60:	e3a02002 	mov	r2, #2
   17f64:	e59f1010 	ldr	r1, [pc, #16]	; 17f7c <CLAN7800Device::WriteReg(unsigned int, unsigned int)+0x94>
   17f68:	eb001526 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17f6c:	e1a00004 	mov	r0, r4
   17f70:	e28dd01c 	add	sp, sp, #28
   17f74:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   17f78:	00026670 	.word	0x00026670
   17f7c:	0002662c 	.word	0x0002662c

00017f80 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>:
   17f80:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   17f84:	e24dd014 	sub	sp, sp, #20
   17f88:	e1a05001 	mov	r5, r1
   17f8c:	e1a07002 	mov	r7, r2
   17f90:	e1a04000 	mov	r4, r0
   17f94:	ebfff28d 	bl	149d0 <CUSBFunction::GetHost() const>
   17f98:	e1a06000 	mov	r6, r0
   17f9c:	e1a00004 	mov	r0, r4
   17fa0:	ebfff279 	bl	1498c <CUSBFunction::GetEndpoint0() const>
   17fa4:	e3a04000 	mov	r4, #0
   17fa8:	e3a03004 	mov	r3, #4
   17fac:	e6ffc075 	uxth	ip, r5
   17fb0:	e1a01000 	mov	r1, r0
   17fb4:	e58d300c 	str	r3, [sp, #12]
   17fb8:	e58d7008 	str	r7, [sp, #8]
   17fbc:	e58dc004 	str	ip, [sp, #4]
   17fc0:	e1a00006 	mov	r0, r6
   17fc4:	e58d4000 	str	r4, [sp]
   17fc8:	e3a030a1 	mov	r3, #161	; 0xa1
   17fcc:	e3a020c0 	mov	r2, #192	; 0xc0
   17fd0:	ebffd98d 	bl	e60c <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   17fd4:	e3500004 	cmp	r0, #4
   17fd8:	03a00001 	moveq	r0, #1
   17fdc:	0a000006 	beq	17ffc <CLAN7800Device::ReadReg(unsigned int, unsigned int*)+0x7c>
   17fe0:	eb00135f 	bl	1cd64 <CLogger::Get()>
   17fe4:	e58d5000 	str	r5, [sp]
   17fe8:	e59f3014 	ldr	r3, [pc, #20]	; 18004 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)+0x84>
   17fec:	e3a02002 	mov	r2, #2
   17ff0:	e59f1010 	ldr	r1, [pc, #16]	; 18008 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)+0x88>
   17ff4:	eb001503 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17ff8:	e1a00004 	mov	r0, r4
   17ffc:	e28dd014 	add	sp, sp, #20
   18000:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   18004:	000264f4 	.word	0x000264f4
   18008:	0002662c 	.word	0x0002662c

0001800c <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
   1800c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18010:	e24dd00c 	sub	sp, sp, #12
   18014:	e1a08000 	mov	r8, r0
   18018:	e1a09001 	mov	r9, r1
   1801c:	e1a0a002 	mov	sl, r2
   18020:	e1a0b003 	mov	fp, r3
   18024:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
   18028:	e59d7034 	ldr	r7, [sp, #52]	; 0x34
   1802c:	eb0025ad 	bl	216e8 <CTimer::Get()>
   18030:	e2505000 	subs	r5, r0, #0
   18034:	0a00001a 	beq	180a4 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x98>
   18038:	e1a00005 	mov	r0, r5
   1803c:	eb0022e2 	bl	20bcc <CTimer::GetTicks() const>
   18040:	e1a06000 	mov	r6, r0
   18044:	ea00000e 	b	18084 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x78>
   18048:	e1a00005 	mov	r0, r5
   1804c:	eb0022de 	bl	20bcc <CTimer::GetTicks() const>
   18050:	e0400006 	sub	r0, r0, r6
   18054:	e1500007 	cmp	r0, r7
   18058:	2a00000e 	bcs	18098 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x8c>
   1805c:	e28d2004 	add	r2, sp, #4
   18060:	e1a01009 	mov	r1, r9
   18064:	e1a00008 	mov	r0, r8
   18068:	ebffffc4 	bl	17f80 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   1806c:	e3500000 	cmp	r0, #0
   18070:	0a000008 	beq	18098 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x8c>
   18074:	e59d3004 	ldr	r3, [sp, #4]
   18078:	e003300a 	and	r3, r3, sl
   1807c:	e153000b 	cmp	r3, fp
   18080:	0a000005 	beq	1809c <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x90>
   18084:	e3540000 	cmp	r4, #0
   18088:	0affffee 	beq	18048 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x3c>
   1808c:	e1a00004 	mov	r0, r4
   18090:	eb002562 	bl	21620 <CTimer::SimpleusDelay(unsigned int)>
   18094:	eaffffeb 	b	18048 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x3c>
   18098:	e3a00000 	mov	r0, #0
   1809c:	e28dd00c 	add	sp, sp, #12
   180a0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   180a4:	e59f200c 	ldr	r2, [pc, #12]	; 180b8 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xac>
   180a8:	e59f100c 	ldr	r1, [pc, #12]	; 180bc <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xb0>
   180ac:	e59f000c 	ldr	r0, [pc, #12]	; 180c0 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xb4>
   180b0:	eb000938 	bl	1a598 <assertion_failed>
   180b4:	eaffffdf 	b	18038 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x2c>
   180b8:	0000028e 	.word	0x0000028e
   180bc:	00026634 	.word	0x00026634
   180c0:	000264cc 	.word	0x000264cc

000180c4 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)>:
   180c4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   180c8:	e351001f 	cmp	r1, #31
   180cc:	e24dd008 	sub	sp, sp, #8
   180d0:	e1a04001 	mov	r4, r1
   180d4:	e1a06000 	mov	r6, r0
   180d8:	e1a08002 	mov	r8, r2
   180dc:	ca00000c 	bgt	18114 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0x50>
   180e0:	e3a05000 	mov	r5, #0
   180e4:	e3a07064 	mov	r7, #100	; 0x64
   180e8:	e1a03005 	mov	r3, r5
   180ec:	e88d00a0 	stm	sp, {r5, r7}
   180f0:	e3a02001 	mov	r2, #1
   180f4:	e3a01e12 	mov	r1, #288	; 0x120
   180f8:	e1a00006 	mov	r0, r6
   180fc:	ebffffc2 	bl	1800c <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   18100:	e1500005 	cmp	r0, r5
   18104:	1a000007 	bne	18128 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0x64>
   18108:	e3a00000 	mov	r0, #0
   1810c:	e28dd008 	add	sp, sp, #8
   18110:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   18114:	e59f2068 	ldr	r2, [pc, #104]	; 18184 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0xc0>
   18118:	e59f1068 	ldr	r1, [pc, #104]	; 18188 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0xc4>
   1811c:	e59f0068 	ldr	r0, [pc, #104]	; 1818c <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0xc8>
   18120:	eb00091c 	bl	1a598 <assertion_failed>
   18124:	eaffffed 	b	180e0 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0x1c>
   18128:	e1a02008 	mov	r2, r8
   1812c:	e3a01f49 	mov	r1, #292	; 0x124
   18130:	e1a00006 	mov	r0, r6
   18134:	ebffff6b 	bl	17ee8 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   18138:	e3500000 	cmp	r0, #0
   1813c:	0afffff1 	beq	18108 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0x44>
   18140:	e1a02304 	lsl	r2, r4, #6
   18144:	e2022d1f 	and	r2, r2, #1984	; 0x7c0
   18148:	e3822b02 	orr	r2, r2, #2048	; 0x800
   1814c:	e3822003 	orr	r2, r2, #3
   18150:	e3a01e12 	mov	r1, #288	; 0x120
   18154:	e1a00006 	mov	r0, r6
   18158:	ebffff62 	bl	17ee8 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   1815c:	e3500000 	cmp	r0, #0
   18160:	0affffe8 	beq	18108 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0x44>
   18164:	e88d00a0 	stm	sp, {r5, r7}
   18168:	e1a03005 	mov	r3, r5
   1816c:	e1a00006 	mov	r0, r6
   18170:	e3a02001 	mov	r2, #1
   18174:	e3a01e12 	mov	r1, #288	; 0x120
   18178:	ebffffa3 	bl	1800c <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   1817c:	e28dd008 	add	sp, sp, #8
   18180:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   18184:	00000259 	.word	0x00000259
   18188:	00026634 	.word	0x00026634
   1818c:	000264d8 	.word	0x000264d8

00018190 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>:
   18190:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   18194:	e351001f 	cmp	r1, #31
   18198:	e24dd014 	sub	sp, sp, #20
   1819c:	e1a04001 	mov	r4, r1
   181a0:	e1a06000 	mov	r6, r0
   181a4:	e1a09002 	mov	r9, r2
   181a8:	ca000019 	bgt	18214 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x84>
   181ac:	e3a05000 	mov	r5, #0
   181b0:	e3a08064 	mov	r8, #100	; 0x64
   181b4:	e1a03005 	mov	r3, r5
   181b8:	e88d0120 	stm	sp, {r5, r8}
   181bc:	e3a02001 	mov	r2, #1
   181c0:	e3a01e12 	mov	r1, #288	; 0x120
   181c4:	e1a00006 	mov	r0, r6
   181c8:	ebffff8f 	bl	1800c <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   181cc:	e2507000 	subs	r7, r0, #0
   181d0:	1a000002 	bne	181e0 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x50>
   181d4:	e1a00007 	mov	r0, r7
   181d8:	e28dd014 	add	sp, sp, #20
   181dc:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   181e0:	e1a02304 	lsl	r2, r4, #6
   181e4:	e2022d1f 	and	r2, r2, #1984	; 0x7c0
   181e8:	e3822b02 	orr	r2, r2, #2048	; 0x800
   181ec:	e3822001 	orr	r2, r2, #1
   181f0:	e3a01e12 	mov	r1, #288	; 0x120
   181f4:	e1a00006 	mov	r0, r6
   181f8:	ebffff3a 	bl	17ee8 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   181fc:	e1500005 	cmp	r0, r5
   18200:	1a000008 	bne	18228 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x98>
   18204:	e3a07000 	mov	r7, #0
   18208:	e1a00007 	mov	r0, r7
   1820c:	e28dd014 	add	sp, sp, #20
   18210:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   18214:	e3a02e27 	mov	r2, #624	; 0x270
   18218:	e59f1070 	ldr	r1, [pc, #112]	; 18290 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x100>
   1821c:	e59f0070 	ldr	r0, [pc, #112]	; 18294 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x104>
   18220:	eb0008dc 	bl	1a598 <assertion_failed>
   18224:	eaffffe0 	b	181ac <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x1c>
   18228:	e88d0120 	stm	sp, {r5, r8}
   1822c:	e1a03005 	mov	r3, r5
   18230:	e3a02001 	mov	r2, #1
   18234:	e3a01e12 	mov	r1, #288	; 0x120
   18238:	e1a00006 	mov	r0, r6
   1823c:	ebffff72 	bl	1800c <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   18240:	e3500000 	cmp	r0, #0
   18244:	0affffee 	beq	18204 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x74>
   18248:	e1a00006 	mov	r0, r6
   1824c:	e28d200c 	add	r2, sp, #12
   18250:	e3a01f49 	mov	r1, #292	; 0x124
   18254:	ebffff49 	bl	17f80 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   18258:	e2507000 	subs	r7, r0, #0
   1825c:	0affffe8 	beq	18204 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x74>
   18260:	e3590000 	cmp	r9, #0
   18264:	0a000004 	beq	1827c <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0xec>
   18268:	e1a00007 	mov	r0, r7
   1826c:	e59d300c 	ldr	r3, [sp, #12]
   18270:	e1c930b0 	strh	r3, [r9]
   18274:	e28dd014 	add	sp, sp, #20
   18278:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1827c:	e3a02fa1 	mov	r2, #644	; 0x284
   18280:	e59f1008 	ldr	r1, [pc, #8]	; 18290 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x100>
   18284:	e59f000c 	ldr	r0, [pc, #12]	; 18298 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x108>
   18288:	eb0008c2 	bl	1a598 <assertion_failed>
   1828c:	eafffff5 	b	18268 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0xd8>
   18290:	00026634 	.word	0x00026634
   18294:	000264d8 	.word	0x000264d8
   18298:	000264e8 	.word	0x000264e8

0001829c <CLAN7800Device::IsLinkUp()>:
   1829c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   182a0:	e24dd00c 	sub	sp, sp, #12
   182a4:	e28d2006 	add	r2, sp, #6
   182a8:	e3a01001 	mov	r1, #1
   182ac:	ebffffb7 	bl	18190 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>
   182b0:	e3500000 	cmp	r0, #0
   182b4:	11dd00b6 	ldrhne	r0, [sp, #6]
   182b8:	11a00120 	lsrne	r0, r0, #2
   182bc:	12000001 	andne	r0, r0, #1
   182c0:	e28dd00c 	add	sp, sp, #12
   182c4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

000182c8 <CLAN7800Device::GetLinkSpeed()>:
   182c8:	e92d4010 	push	{r4, lr}
   182cc:	e3a02000 	mov	r2, #0
   182d0:	e24dd008 	sub	sp, sp, #8
   182d4:	e3a0101f 	mov	r1, #31
   182d8:	e1a04000 	mov	r4, r0
   182dc:	ebffff78 	bl	180c4 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)>
   182e0:	e3500000 	cmp	r0, #0
   182e4:	1a000002 	bne	182f4 <CLAN7800Device::GetLinkSpeed()+0x2c>
   182e8:	e3a00006 	mov	r0, #6
   182ec:	e28dd008 	add	sp, sp, #8
   182f0:	e8bd8010 	pop	{r4, pc}
   182f4:	e1a00004 	mov	r0, r4
   182f8:	e28d2006 	add	r2, sp, #6
   182fc:	e3a0101c 	mov	r1, #28
   18300:	ebffffa2 	bl	18190 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>
   18304:	e3500000 	cmp	r0, #0
   18308:	0afffff6 	beq	182e8 <CLAN7800Device::GetLinkSpeed()+0x20>
   1830c:	e1dd30b6 	ldrh	r3, [sp, #6]
   18310:	e3130901 	tst	r3, #16384	; 0x4000
   18314:	1a00000d 	bne	18350 <CLAN7800Device::GetLinkSpeed()+0x88>
   18318:	e3130902 	tst	r3, #32768	; 0x8000
   1831c:	0afffff1 	beq	182e8 <CLAN7800Device::GetLinkSpeed()+0x20>
   18320:	e1a031c3 	asr	r3, r3, #3
   18324:	e2033007 	and	r3, r3, #7
   18328:	e3530006 	cmp	r3, #6
   1832c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   18330:	eaffffec 	b	182e8 <CLAN7800Device::GetLinkSpeed()+0x20>
   18334:	00018370 	.word	0x00018370
   18338:	00018368 	.word	0x00018368
   1833c:	00018390 	.word	0x00018390
   18340:	000182e8 	.word	0x000182e8
   18344:	00018388 	.word	0x00018388
   18348:	00018380 	.word	0x00018380
   1834c:	00018378 	.word	0x00018378
   18350:	e59f2040 	ldr	r2, [pc, #64]	; 18398 <CLAN7800Device::GetLinkSpeed()+0xd0>
   18354:	e59f1040 	ldr	r1, [pc, #64]	; 1839c <CLAN7800Device::GetLinkSpeed()+0xd4>
   18358:	e59f0040 	ldr	r0, [pc, #64]	; 183a0 <CLAN7800Device::GetLinkSpeed()+0xd8>
   1835c:	eb00088d 	bl	1a598 <assertion_failed>
   18360:	e1dd30b6 	ldrh	r3, [sp, #6]
   18364:	eaffffeb 	b	18318 <CLAN7800Device::GetLinkSpeed()+0x50>
   18368:	e3a00002 	mov	r0, #2
   1836c:	eaffffde 	b	182ec <CLAN7800Device::GetLinkSpeed()+0x24>
   18370:	e3a00000 	mov	r0, #0
   18374:	eaffffdc 	b	182ec <CLAN7800Device::GetLinkSpeed()+0x24>
   18378:	e3a00005 	mov	r0, #5
   1837c:	eaffffda 	b	182ec <CLAN7800Device::GetLinkSpeed()+0x24>
   18380:	e3a00003 	mov	r0, #3
   18384:	eaffffd8 	b	182ec <CLAN7800Device::GetLinkSpeed()+0x24>
   18388:	e3a00001 	mov	r0, #1
   1838c:	eaffffd6 	b	182ec <CLAN7800Device::GetLinkSpeed()+0x24>
   18390:	e3a00004 	mov	r0, #4
   18394:	eaffffd4 	b	182ec <CLAN7800Device::GetLinkSpeed()+0x24>
   18398:	00000203 	.word	0x00000203
   1839c:	00026634 	.word	0x00026634
   183a0:	0002668c 	.word	0x0002668c

000183a4 <CLAN7800Device::InitPHY()>:
   183a4:	e92d4010 	push	{r4, lr}
   183a8:	e3a02000 	mov	r2, #0
   183ac:	e24dd008 	sub	sp, sp, #8
   183b0:	e3a0101f 	mov	r1, #31
   183b4:	e1a04000 	mov	r4, r0
   183b8:	ebffff41 	bl	180c4 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)>
   183bc:	e3500000 	cmp	r0, #0
   183c0:	1a000001 	bne	183cc <CLAN7800Device::InitPHY()+0x28>
   183c4:	e28dd008 	add	sp, sp, #8
   183c8:	e8bd8010 	pop	{r4, pc}
   183cc:	e28d2006 	add	r2, sp, #6
   183d0:	e3a0101d 	mov	r1, #29
   183d4:	e1a00004 	mov	r0, r4
   183d8:	ebffff6c 	bl	18190 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>
   183dc:	e3500000 	cmp	r0, #0
   183e0:	0afffff7 	beq	183c4 <CLAN7800Device::InitPHY()+0x20>
   183e4:	e1dd30b6 	ldrh	r3, [sp, #6]
   183e8:	e1a00004 	mov	r0, r4
   183ec:	e3c330ff 	bic	r3, r3, #255	; 0xff
   183f0:	e3833061 	orr	r3, r3, #97	; 0x61
   183f4:	e1a02003 	mov	r2, r3
   183f8:	e3a0101d 	mov	r1, #29
   183fc:	e1cd30b6 	strh	r3, [sp, #6]
   18400:	ebffff2f 	bl	180c4 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)>
   18404:	e28dd008 	add	sp, sp, #8
   18408:	e8bd8010 	pop	{r4, pc}

0001840c <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>:
   1840c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   18410:	e24dd00c 	sub	sp, sp, #12
   18414:	e1a06002 	mov	r6, r2
   18418:	e28d2004 	add	r2, sp, #4
   1841c:	e1a04003 	mov	r4, r3
   18420:	e1a05000 	mov	r5, r0
   18424:	e1a07001 	mov	r7, r1
   18428:	ebfffed4 	bl	17f80 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   1842c:	e3500000 	cmp	r0, #0
   18430:	0a000007 	beq	18454 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)+0x48>
   18434:	e59d3004 	ldr	r3, [sp, #4]
   18438:	e1a01007 	mov	r1, r7
   1843c:	e0044003 	and	r4, r4, r3
   18440:	e1844006 	orr	r4, r4, r6
   18444:	e1a00005 	mov	r0, r5
   18448:	e1a02004 	mov	r2, r4
   1844c:	e58d4004 	str	r4, [sp, #4]
   18450:	ebfffea4 	bl	17ee8 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   18454:	e28dd00c 	add	sp, sp, #12
   18458:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0001845c <CLAN7800Device::InitMACAddress()>:
   1845c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   18460:	e24dd034 	sub	sp, sp, #52	; 0x34
   18464:	e1a04000 	mov	r4, r0
   18468:	e28d0008 	add	r0, sp, #8
   1846c:	eb00086d 	bl	1a628 <CBcmPropertyTags::CBcmPropertyTags()>
   18470:	e3a03000 	mov	r3, #0
   18474:	e28d0008 	add	r0, sp, #8
   18478:	e58d3000 	str	r3, [sp]
   1847c:	e28d201c 	add	r2, sp, #28
   18480:	e3a03014 	mov	r3, #20
   18484:	e59f10e0 	ldr	r1, [pc, #224]	; 1856c <CLAN7800Device::InitMACAddress()+0x110>
   18488:	eb0008bd 	bl	1a784 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   1848c:	e3500000 	cmp	r0, #0
   18490:	1a000005 	bne	184ac <CLAN7800Device::InitMACAddress()+0x50>
   18494:	e3a04000 	mov	r4, #0
   18498:	e28d0008 	add	r0, sp, #8
   1849c:	eb000867 	bl	1a640 <CBcmPropertyTags::~CBcmPropertyTags()>
   184a0:	e1a00004 	mov	r0, r4
   184a4:	e28dd034 	add	sp, sp, #52	; 0x34
   184a8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   184ac:	e2846018 	add	r6, r4, #24
   184b0:	e1a00006 	mov	r0, r6
   184b4:	e28d1028 	add	r1, sp, #40	; 0x28
   184b8:	eb000174 	bl	18a90 <CMACAddress::Set(unsigned char const*)>
   184bc:	e59d5028 	ldr	r5, [sp, #40]	; 0x28
   184c0:	e3a01f47 	mov	r1, #284	; 0x11c
   184c4:	e1a02005 	mov	r2, r5
   184c8:	e1a00004 	mov	r0, r4
   184cc:	e1dd72bc 	ldrh	r7, [sp, #44]	; 0x2c
   184d0:	ebfffe84 	bl	17ee8 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   184d4:	e3500000 	cmp	r0, #0
   184d8:	0affffed 	beq	18494 <CLAN7800Device::InitMACAddress()+0x38>
   184dc:	e1a02007 	mov	r2, r7
   184e0:	e3a01f46 	mov	r1, #280	; 0x118
   184e4:	e1a00004 	mov	r0, r4
   184e8:	ebfffe7e 	bl	17ee8 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   184ec:	e3500000 	cmp	r0, #0
   184f0:	0affffe7 	beq	18494 <CLAN7800Device::InitMACAddress()+0x38>
   184f4:	e1a02005 	mov	r2, r5
   184f8:	e59f1070 	ldr	r1, [pc, #112]	; 18570 <CLAN7800Device::InitMACAddress()+0x114>
   184fc:	e1a00004 	mov	r0, r4
   18500:	ebfffe78 	bl	17ee8 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   18504:	e3500000 	cmp	r0, #0
   18508:	0affffe1 	beq	18494 <CLAN7800Device::InitMACAddress()+0x38>
   1850c:	e1a00004 	mov	r0, r4
   18510:	e3872102 	orr	r2, r7, #-2147483648	; 0x80000000
   18514:	e3a01b01 	mov	r1, #1024	; 0x400
   18518:	ebfffe72 	bl	17ee8 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   1851c:	e2504000 	subs	r4, r0, #0
   18520:	0affffdb 	beq	18494 <CLAN7800Device::InitMACAddress()+0x38>
   18524:	e28d000c 	add	r0, sp, #12
   18528:	eb001cd7 	bl	1f88c <CString::CString()>
   1852c:	e28d100c 	add	r1, sp, #12
   18530:	e1a00006 	mov	r0, r6
   18534:	eb0001b6 	bl	18c14 <CMACAddress::Format(CString*) const>
   18538:	eb001209 	bl	1cd64 <CLogger::Get()>
   1853c:	e1a05000 	mov	r5, r0
   18540:	e28d000c 	add	r0, sp, #12
   18544:	eb001ce6 	bl	1f8e4 <CString::operator char const*() const>
   18548:	e59f3024 	ldr	r3, [pc, #36]	; 18574 <CLAN7800Device::InitMACAddress()+0x118>
   1854c:	e58d0000 	str	r0, [sp]
   18550:	e3a02004 	mov	r2, #4
   18554:	e1a00005 	mov	r0, r5
   18558:	e59f1018 	ldr	r1, [pc, #24]	; 18578 <CLAN7800Device::InitMACAddress()+0x11c>
   1855c:	eb0013a9 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18560:	e28d000c 	add	r0, sp, #12
   18564:	eb001c95 	bl	1f7c0 <CString::~CString()>
   18568:	eaffffca 	b	18498 <CLAN7800Device::InitMACAddress()+0x3c>
   1856c:	00010003 	.word	0x00010003
   18570:	00000404 	.word	0x00000404
   18574:	000262d8 	.word	0x000262d8
   18578:	0002662c 	.word	0x0002662c

0001857c <CLAN7800Device::Configure()>:
   1857c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   18580:	e24dd014 	sub	sp, sp, #20
   18584:	e1a05000 	mov	r5, r0
   18588:	ebfff0df 	bl	1490c <CUSBFunction::GetNumEndpoints() const>
   1858c:	e3500003 	cmp	r0, #3
   18590:	03a06005 	moveq	r6, #5
   18594:	03a07014 	moveq	r7, #20
   18598:	0a000004 	beq	185b0 <CLAN7800Device::Configure()+0x34>
   1859c:	ea000034 	b	18674 <CLAN7800Device::Configure()+0xf8>
   185a0:	e5d43003 	ldrb	r3, [r4, #3]
   185a4:	e203303f 	and	r3, r3, #63	; 0x3f
   185a8:	e3530002 	cmp	r3, #2
   185ac:	0a00001f 	beq	18630 <CLAN7800Device::Configure()+0xb4>
   185b0:	e1a01006 	mov	r1, r6
   185b4:	e1a00005 	mov	r0, r5
   185b8:	ebfff146 	bl	14ad8 <CUSBFunction::GetDescriptor(unsigned char)>
   185bc:	e2504000 	subs	r4, r0, #0
   185c0:	1afffff6 	bne	185a0 <CLAN7800Device::Configure()+0x24>
   185c4:	e5953010 	ldr	r3, [r5, #16]
   185c8:	e1a00005 	mov	r0, r5
   185cc:	e3530000 	cmp	r3, #0
   185d0:	0a00004f 	beq	18714 <CLAN7800Device::Configure()+0x198>
   185d4:	e5953014 	ldr	r3, [r5, #20]
   185d8:	e3530000 	cmp	r3, #0
   185dc:	0a00004c 	beq	18714 <CLAN7800Device::Configure()+0x198>
   185e0:	ebfff10b 	bl	14a14 <CUSBFunction::Configure()>
   185e4:	e2506000 	subs	r6, r0, #0
   185e8:	0a00004f 	beq	1872c <CLAN7800Device::Configure()+0x1b0>
   185ec:	e28d200c 	add	r2, sp, #12
   185f0:	e1a01004 	mov	r1, r4
   185f4:	e1a00005 	mov	r0, r5
   185f8:	ebfffe60 	bl	17f80 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   185fc:	e3500000 	cmp	r0, #0
   18600:	1a000030 	bne	186c8 <CLAN7800Device::Configure()+0x14c>
   18604:	eb0011d6 	bl	1cd64 <CLogger::Get()>
   18608:	e1dd20be 	ldrh	r2, [sp, #14]
   1860c:	e59f33c0 	ldr	r3, [pc, #960]	; 189d4 <CLAN7800Device::Configure()+0x458>
   18610:	e58d2000 	str	r2, [sp]
   18614:	e59f13bc 	ldr	r1, [pc, #956]	; 189d8 <CLAN7800Device::Configure()+0x45c>
   18618:	e3a02001 	mov	r2, #1
   1861c:	eb001379 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18620:	e3a06000 	mov	r6, #0
   18624:	e1a00006 	mov	r0, r6
   18628:	e28dd014 	add	sp, sp, #20
   1862c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   18630:	e1d430d2 	ldrsb	r3, [r4, #2]
   18634:	e3530000 	cmp	r3, #0
   18638:	ba000014 	blt	18690 <CLAN7800Device::Configure()+0x114>
   1863c:	e5953014 	ldr	r3, [r5, #20]
   18640:	e1a00005 	mov	r0, r5
   18644:	e3530000 	cmp	r3, #0
   18648:	1a000031 	bne	18714 <CLAN7800Device::Configure()+0x198>
   1864c:	ebfff0be 	bl	1494c <CUSBFunction::GetDevice() const>
   18650:	e1a09000 	mov	r9, r0
   18654:	e1a00007 	mov	r0, r7
   18658:	eb00289f 	bl	228dc <operator new(unsigned int)>
   1865c:	e1a08000 	mov	r8, r0
   18660:	e1a02004 	mov	r2, r4
   18664:	e1a01009 	mov	r1, r9
   18668:	ebffd6d1 	bl	e1b4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   1866c:	e5858014 	str	r8, [r5, #20]
   18670:	eaffffce 	b	185b0 <CLAN7800Device::Configure()+0x34>
   18674:	e3a06000 	mov	r6, #0
   18678:	e1a00005 	mov	r0, r5
   1867c:	e59f1354 	ldr	r1, [pc, #852]	; 189d8 <CLAN7800Device::Configure()+0x45c>
   18680:	ebfff127 	bl	14b24 <CUSBFunction::ConfigurationError(char const*) const>
   18684:	e1a00006 	mov	r0, r6
   18688:	e28dd014 	add	sp, sp, #20
   1868c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   18690:	e5953010 	ldr	r3, [r5, #16]
   18694:	e1a00005 	mov	r0, r5
   18698:	e3530000 	cmp	r3, #0
   1869c:	1a00001c 	bne	18714 <CLAN7800Device::Configure()+0x198>
   186a0:	ebfff0a9 	bl	1494c <CUSBFunction::GetDevice() const>
   186a4:	e1a09000 	mov	r9, r0
   186a8:	e1a00007 	mov	r0, r7
   186ac:	eb00288a 	bl	228dc <operator new(unsigned int)>
   186b0:	e1a08000 	mov	r8, r0
   186b4:	e1a02004 	mov	r2, r4
   186b8:	e1a01009 	mov	r1, r9
   186bc:	ebffd6bc 	bl	e1b4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   186c0:	e5858010 	str	r8, [r5, #16]
   186c4:	eaffffb9 	b	185b0 <CLAN7800Device::Configure()+0x34>
   186c8:	e1dd30be 	ldrh	r3, [sp, #14]
   186cc:	e3530b1e 	cmp	r3, #30720	; 0x7800
   186d0:	1affffcb 	bne	18604 <CLAN7800Device::Configure()+0x88>
   186d4:	e3e03000 	mvn	r3, #0
   186d8:	e3a02002 	mov	r2, #2
   186dc:	e3a01010 	mov	r1, #16
   186e0:	e1a00005 	mov	r0, r5
   186e4:	ebffff48 	bl	1840c <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   186e8:	e3500000 	cmp	r0, #0
   186ec:	1a000016 	bne	1874c <CLAN7800Device::Configure()+0x1d0>
   186f0:	e3a06000 	mov	r6, #0
   186f4:	eb00119a 	bl	1cd64 <CLogger::Get()>
   186f8:	e59f32dc 	ldr	r3, [pc, #732]	; 189dc <CLAN7800Device::Configure()+0x460>
   186fc:	e3a02001 	mov	r2, #1
   18700:	e59f12d0 	ldr	r1, [pc, #720]	; 189d8 <CLAN7800Device::Configure()+0x45c>
   18704:	eb00133f 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18708:	e1a00006 	mov	r0, r6
   1870c:	e28dd014 	add	sp, sp, #20
   18710:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   18714:	e3a06000 	mov	r6, #0
   18718:	e59f12b8 	ldr	r1, [pc, #696]	; 189d8 <CLAN7800Device::Configure()+0x45c>
   1871c:	ebfff100 	bl	14b24 <CUSBFunction::ConfigurationError(char const*) const>
   18720:	e1a00006 	mov	r0, r6
   18724:	e28dd014 	add	sp, sp, #20
   18728:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1872c:	eb00118c 	bl	1cd64 <CLogger::Get()>
   18730:	e59f32a8 	ldr	r3, [pc, #680]	; 189e0 <CLAN7800Device::Configure()+0x464>
   18734:	e3a02001 	mov	r2, #1
   18738:	e59f1298 	ldr	r1, [pc, #664]	; 189d8 <CLAN7800Device::Configure()+0x45c>
   1873c:	eb001331 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18740:	e1a00006 	mov	r0, r6
   18744:	e28dd014 	add	sp, sp, #20
   18748:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1874c:	e3a01064 	mov	r1, #100	; 0x64
   18750:	e3a02ffa 	mov	r2, #1000	; 0x3e8
   18754:	e58d1004 	str	r1, [sp, #4]
   18758:	e58d2000 	str	r2, [sp]
   1875c:	e1a03004 	mov	r3, r4
   18760:	e3a02002 	mov	r2, #2
   18764:	e3a01010 	mov	r1, #16
   18768:	e1a00005 	mov	r0, r5
   1876c:	ebfffe26 	bl	1800c <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   18770:	e3500000 	cmp	r0, #0
   18774:	0affffdd 	beq	186f0 <CLAN7800Device::Configure()+0x174>
   18778:	e1a00005 	mov	r0, r5
   1877c:	ebffff36 	bl	1845c <CLAN7800Device::InitMACAddress()>
   18780:	e2506000 	subs	r6, r0, #0
   18784:	0a000052 	beq	188d4 <CLAN7800Device::Configure()+0x358>
   18788:	e3a02018 	mov	r2, #24
   1878c:	e3a01090 	mov	r1, #144	; 0x90
   18790:	e1a00005 	mov	r0, r5
   18794:	ebfffdd3 	bl	17ee8 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   18798:	e3500000 	cmp	r0, #0
   1879c:	0affff9f 	beq	18620 <CLAN7800Device::Configure()+0xa4>
   187a0:	e3a02b02 	mov	r2, #2048	; 0x800
   187a4:	e3a01094 	mov	r1, #148	; 0x94
   187a8:	e1a00005 	mov	r0, r5
   187ac:	ebfffdcd 	bl	17ee8 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   187b0:	e3500000 	cmp	r0, #0
   187b4:	0affff99 	beq	18620 <CLAN7800Device::Configure()+0xa4>
   187b8:	e3e03010 	mvn	r3, #16
   187bc:	e3a02603 	mov	r2, #3145728	; 0x300000
   187c0:	e3a01010 	mov	r1, #16
   187c4:	e1a00005 	mov	r0, r5
   187c8:	ebffff0f 	bl	1840c <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   187cc:	e3500000 	cmp	r0, #0
   187d0:	0affff92 	beq	18620 <CLAN7800Device::Configure()+0xa4>
   187d4:	e3e03040 	mvn	r3, #64	; 0x40
   187d8:	e3a02020 	mov	r2, #32
   187dc:	e3a01080 	mov	r1, #128	; 0x80
   187e0:	e1a00005 	mov	r0, r5
   187e4:	ebffff08 	bl	1840c <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   187e8:	e3500000 	cmp	r0, #0
   187ec:	0affff8b 	beq	18620 <CLAN7800Device::Configure()+0xa4>
   187f0:	e3a02017 	mov	r2, #23
   187f4:	e3a010c8 	mov	r1, #200	; 0xc8
   187f8:	e1a00005 	mov	r0, r5
   187fc:	ebfffdb9 	bl	17ee8 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   18800:	e3500000 	cmp	r0, #0
   18804:	0affff85 	beq	18620 <CLAN7800Device::Configure()+0xa4>
   18808:	e3a02017 	mov	r2, #23
   1880c:	e3a010cc 	mov	r1, #204	; 0xcc
   18810:	e1a00005 	mov	r0, r5
   18814:	ebfffdb3 	bl	17ee8 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   18818:	e3500000 	cmp	r0, #0
   1881c:	0affff7f 	beq	18620 <CLAN7800Device::Configure()+0xa4>
   18820:	e3a02000 	mov	r2, #0
   18824:	e3a01098 	mov	r1, #152	; 0x98
   18828:	e1a00005 	mov	r0, r5
   1882c:	ebfffdad 	bl	17ee8 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   18830:	e3500000 	cmp	r0, #0
   18834:	0affff79 	beq	18620 <CLAN7800Device::Configure()+0xa4>
   18838:	e3e02000 	mvn	r2, #0
   1883c:	e3a0100c 	mov	r1, #12
   18840:	e1a00005 	mov	r0, r5
   18844:	ebfffda7 	bl	17ee8 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   18848:	e3500000 	cmp	r0, #0
   1884c:	0affff73 	beq	18620 <CLAN7800Device::Configure()+0xa4>
   18850:	e3a02000 	mov	r2, #0
   18854:	e3a01f43 	mov	r1, #268	; 0x10c
   18858:	e1a00005 	mov	r0, r5
   1885c:	ebfffda1 	bl	17ee8 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   18860:	e3500000 	cmp	r0, #0
   18864:	0affff6d 	beq	18620 <CLAN7800Device::Configure()+0xa4>
   18868:	e3a02000 	mov	r2, #0
   1886c:	e3a010d0 	mov	r1, #208	; 0xd0
   18870:	e1a00005 	mov	r0, r5
   18874:	ebfffd9b 	bl	17ee8 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   18878:	e3500000 	cmp	r0, #0
   1887c:	0affff67 	beq	18620 <CLAN7800Device::Configure()+0xa4>
   18880:	e3e03000 	mvn	r3, #0
   18884:	e59f2158 	ldr	r2, [pc, #344]	; 189e4 <CLAN7800Device::Configure()+0x468>
   18888:	e3a010b0 	mov	r1, #176	; 0xb0
   1888c:	e1a00005 	mov	r0, r5
   18890:	ebfffedd 	bl	1840c <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   18894:	e3500000 	cmp	r0, #0
   18898:	0affff60 	beq	18620 <CLAN7800Device::Configure()+0xa4>
   1889c:	e3e03000 	mvn	r3, #0
   188a0:	e3a02010 	mov	r2, #16
   188a4:	e3a01014 	mov	r1, #20
   188a8:	e1a00005 	mov	r0, r5
   188ac:	ebfffed6 	bl	1840c <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   188b0:	e3500000 	cmp	r0, #0
   188b4:	1a00000c 	bne	188ec <CLAN7800Device::Configure()+0x370>
   188b8:	eb001129 	bl	1cd64 <CLogger::Get()>
   188bc:	e59f3124 	ldr	r3, [pc, #292]	; 189e8 <CLAN7800Device::Configure()+0x46c>
   188c0:	e3a02001 	mov	r2, #1
   188c4:	e59f110c 	ldr	r1, [pc, #268]	; 189d8 <CLAN7800Device::Configure()+0x45c>
   188c8:	eb0012ce 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   188cc:	e3a06000 	mov	r6, #0
   188d0:	eaffff53 	b	18624 <CLAN7800Device::Configure()+0xa8>
   188d4:	eb001122 	bl	1cd64 <CLogger::Get()>
   188d8:	e59f310c 	ldr	r3, [pc, #268]	; 189ec <CLAN7800Device::Configure()+0x470>
   188dc:	e3a02001 	mov	r2, #1
   188e0:	e59f10f0 	ldr	r1, [pc, #240]	; 189d8 <CLAN7800Device::Configure()+0x45c>
   188e4:	eb0012c7 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   188e8:	eaffff4d 	b	18624 <CLAN7800Device::Configure()+0xa8>
   188ec:	e3a02ffa 	mov	r2, #1000	; 0x3e8
   188f0:	e3a03064 	mov	r3, #100	; 0x64
   188f4:	e3a01014 	mov	r1, #20
   188f8:	e88d000c 	stm	sp, {r2, r3}
   188fc:	e1a00005 	mov	r0, r5
   18900:	e3a03080 	mov	r3, #128	; 0x80
   18904:	e3a02090 	mov	r2, #144	; 0x90
   18908:	ebfffdbf 	bl	1800c <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   1890c:	e3500000 	cmp	r0, #0
   18910:	0affffe8 	beq	188b8 <CLAN7800Device::Configure()+0x33c>
   18914:	e3e03000 	mvn	r3, #0
   18918:	e3a02b06 	mov	r2, #6144	; 0x1800
   1891c:	e3a01c01 	mov	r1, #256	; 0x100
   18920:	e1a00005 	mov	r0, r5
   18924:	ebfffeb8 	bl	1840c <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   18928:	e3500000 	cmp	r0, #0
   1892c:	0affff3b 	beq	18620 <CLAN7800Device::Configure()+0xa4>
   18930:	e3e03000 	mvn	r3, #0
   18934:	e3a02001 	mov	r2, #1
   18938:	e3a01f42 	mov	r1, #264	; 0x108
   1893c:	e1a00005 	mov	r0, r5
   18940:	ebfffeb1 	bl	1840c <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   18944:	e3500000 	cmp	r0, #0
   18948:	0affff34 	beq	18620 <CLAN7800Device::Configure()+0xa4>
   1894c:	e3e03000 	mvn	r3, #0
   18950:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
   18954:	e3a010c4 	mov	r1, #196	; 0xc4
   18958:	e1a00005 	mov	r0, r5
   1895c:	ebfffeaa 	bl	1840c <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   18960:	e3500000 	cmp	r0, #0
   18964:	0affff2d 	beq	18620 <CLAN7800Device::Configure()+0xa4>
   18968:	e59f3080 	ldr	r3, [pc, #128]	; 189f0 <CLAN7800Device::Configure()+0x474>
   1896c:	e59f2080 	ldr	r2, [pc, #128]	; 189f4 <CLAN7800Device::Configure()+0x478>
   18970:	e3a01f41 	mov	r1, #260	; 0x104
   18974:	e1a00005 	mov	r0, r5
   18978:	ebfffea3 	bl	1840c <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   1897c:	e3500000 	cmp	r0, #0
   18980:	0affff26 	beq	18620 <CLAN7800Device::Configure()+0xa4>
   18984:	e3e03000 	mvn	r3, #0
   18988:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
   1898c:	e3a010c0 	mov	r1, #192	; 0xc0
   18990:	e1a00005 	mov	r0, r5
   18994:	ebfffe9c 	bl	1840c <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   18998:	e3500000 	cmp	r0, #0
   1899c:	0affff1f 	beq	18620 <CLAN7800Device::Configure()+0xa4>
   189a0:	e1a00005 	mov	r0, r5
   189a4:	ebfffe7e 	bl	183a4 <CLAN7800Device::InitPHY()>
   189a8:	e2506000 	subs	r6, r0, #0
   189ac:	0a000002 	beq	189bc <CLAN7800Device::Configure()+0x440>
   189b0:	e1a00005 	mov	r0, r5
   189b4:	eb0000dd 	bl	18d30 <CNetDevice::AddNetDevice()>
   189b8:	eaffff19 	b	18624 <CLAN7800Device::Configure()+0xa8>
   189bc:	eb0010e8 	bl	1cd64 <CLogger::Get()>
   189c0:	e59f3030 	ldr	r3, [pc, #48]	; 189f8 <CLAN7800Device::Configure()+0x47c>
   189c4:	e3a02001 	mov	r2, #1
   189c8:	e59f1008 	ldr	r1, [pc, #8]	; 189d8 <CLAN7800Device::Configure()+0x45c>
   189cc:	eb00128d 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   189d0:	eaffff13 	b	18624 <CLAN7800Device::Configure()+0xa8>
   189d4:	000266ec 	.word	0x000266ec
   189d8:	0002662c 	.word	0x0002662c
   189dc:	000266b4 	.word	0x000266b4
   189e0:	00025170 	.word	0x00025170
   189e4:	00000402 	.word	0x00000402
   189e8:	00026704 	.word	0x00026704
   189ec:	000266c4 	.word	0x000266c4
   189f0:	c000ffff 	.word	0xc000ffff
   189f4:	05ee0001 	.word	0x05ee0001
   189f8:	000266dc 	.word	0x000266dc

000189fc <CMACAddress::CMACAddress()>:
   189fc:	e3a02000 	mov	r2, #0
   18a00:	e5c02000 	strb	r2, [r0]
   18a04:	e12fff1e 	bx	lr

00018a08 <CMACAddress::~CMACAddress()>:
   18a08:	e12fff1e 	bx	lr

00018a0c <CMACAddress::operator==(CMACAddress const&) const>:
   18a0c:	e5d03000 	ldrb	r3, [r0]
   18a10:	e92d4070 	push	{r4, r5, r6, lr}
   18a14:	e3530000 	cmp	r3, #0
   18a18:	e1a04000 	mov	r4, r0
   18a1c:	e1a05001 	mov	r5, r1
   18a20:	0a00000e 	beq	18a60 <CMACAddress::operator==(CMACAddress const&) const+0x54>
   18a24:	e5d53000 	ldrb	r3, [r5]
   18a28:	e2844001 	add	r4, r4, #1
   18a2c:	e3530000 	cmp	r3, #0
   18a30:	1a000003 	bne	18a44 <CMACAddress::operator==(CMACAddress const&) const+0x38>
   18a34:	e3a02041 	mov	r2, #65	; 0x41
   18a38:	e59f1034 	ldr	r1, [pc, #52]	; 18a74 <CMACAddress::operator==(CMACAddress const&) const+0x68>
   18a3c:	e59f0034 	ldr	r0, [pc, #52]	; 18a78 <CMACAddress::operator==(CMACAddress const&) const+0x6c>
   18a40:	eb0006d4 	bl	1a598 <assertion_failed>
   18a44:	e2851001 	add	r1, r5, #1
   18a48:	e1a00004 	mov	r0, r4
   18a4c:	e3a02006 	mov	r2, #6
   18a50:	eb00233c 	bl	21748 <memcmp>
   18a54:	e16f0f10 	clz	r0, r0
   18a58:	e1a002a0 	lsr	r0, r0, #5
   18a5c:	e8bd8070 	pop	{r4, r5, r6, pc}
   18a60:	e3a02029 	mov	r2, #41	; 0x29
   18a64:	e59f1008 	ldr	r1, [pc, #8]	; 18a74 <CMACAddress::operator==(CMACAddress const&) const+0x68>
   18a68:	e59f0008 	ldr	r0, [pc, #8]	; 18a78 <CMACAddress::operator==(CMACAddress const&) const+0x6c>
   18a6c:	eb0006c9 	bl	1a598 <assertion_failed>
   18a70:	eaffffeb 	b	18a24 <CMACAddress::operator==(CMACAddress const&) const+0x18>
   18a74:	00026718 	.word	0x00026718
   18a78:	00024620 	.word	0x00024620

00018a7c <CMACAddress::operator!=(CMACAddress const&) const>:
   18a7c:	e92d4010 	push	{r4, lr}
   18a80:	ebffffe1 	bl	18a0c <CMACAddress::operator==(CMACAddress const&) const>
   18a84:	e2200001 	eor	r0, r0, #1
   18a88:	e6ef0070 	uxtb	r0, r0
   18a8c:	e8bd8010 	pop	{r4, pc}

00018a90 <CMACAddress::Set(unsigned char const*)>:
   18a90:	e92d4070 	push	{r4, r5, r6, lr}
   18a94:	e2515000 	subs	r5, r1, #0
   18a98:	e1a04000 	mov	r4, r0
   18a9c:	0a000006 	beq	18abc <CMACAddress::Set(unsigned char const*)+0x2c>
   18aa0:	e1a01005 	mov	r1, r5
   18aa4:	e3a02006 	mov	r2, #6
   18aa8:	e2840001 	add	r0, r4, #1
   18aac:	eb00248e 	bl	21cec <memcpy>
   18ab0:	e3a03001 	mov	r3, #1
   18ab4:	e5c43000 	strb	r3, [r4]
   18ab8:	e8bd8070 	pop	{r4, r5, r6, pc}
   18abc:	e3a02034 	mov	r2, #52	; 0x34
   18ac0:	e59f1008 	ldr	r1, [pc, #8]	; 18ad0 <CMACAddress::Set(unsigned char const*)+0x40>
   18ac4:	e59f0008 	ldr	r0, [pc, #8]	; 18ad4 <CMACAddress::Set(unsigned char const*)+0x44>
   18ac8:	eb0006b2 	bl	1a598 <assertion_failed>
   18acc:	eafffff3 	b	18aa0 <CMACAddress::Set(unsigned char const*)+0x10>
   18ad0:	00026718 	.word	0x00026718
   18ad4:	00026728 	.word	0x00026728

00018ad8 <CMACAddress::CMACAddress(unsigned char const*)>:
   18ad8:	e92d4010 	push	{r4, lr}
   18adc:	e1a04000 	mov	r4, r0
   18ae0:	ebffffea 	bl	18a90 <CMACAddress::Set(unsigned char const*)>
   18ae4:	e1a00004 	mov	r0, r4
   18ae8:	e8bd8010 	pop	{r4, pc}

00018aec <CMACAddress::SetBroadcast()>:
   18aec:	e92d4010 	push	{r4, lr}
   18af0:	e3a02006 	mov	r2, #6
   18af4:	e1a04000 	mov	r4, r0
   18af8:	e3a010ff 	mov	r1, #255	; 0xff
   18afc:	e2800001 	add	r0, r0, #1
   18b00:	eb002307 	bl	21724 <memset>
   18b04:	e3a03001 	mov	r3, #1
   18b08:	e5c43000 	strb	r3, [r4]
   18b0c:	e8bd8010 	pop	{r4, pc}

00018b10 <CMACAddress::Get() const>:
   18b10:	e5d03000 	ldrb	r3, [r0]
   18b14:	e92d4010 	push	{r4, lr}
   18b18:	e3530000 	cmp	r3, #0
   18b1c:	e1a04000 	mov	r4, r0
   18b20:	1a000003 	bne	18b34 <CMACAddress::Get() const+0x24>
   18b24:	e3a02041 	mov	r2, #65	; 0x41
   18b28:	e59f100c 	ldr	r1, [pc, #12]	; 18b3c <CMACAddress::Get() const+0x2c>
   18b2c:	e59f000c 	ldr	r0, [pc, #12]	; 18b40 <CMACAddress::Get() const+0x30>
   18b30:	eb000698 	bl	1a598 <assertion_failed>
   18b34:	e2840001 	add	r0, r4, #1
   18b38:	e8bd8010 	pop	{r4, pc}
   18b3c:	00026718 	.word	0x00026718
   18b40:	00024620 	.word	0x00024620

00018b44 <CMACAddress::CopyTo(unsigned char*) const>:
   18b44:	e5d03000 	ldrb	r3, [r0]
   18b48:	e92d4070 	push	{r4, r5, r6, lr}
   18b4c:	e3530000 	cmp	r3, #0
   18b50:	e1a05000 	mov	r5, r0
   18b54:	e1a04001 	mov	r4, r1
   18b58:	0a000006 	beq	18b78 <CMACAddress::CopyTo(unsigned char*) const+0x34>
   18b5c:	e3540000 	cmp	r4, #0
   18b60:	0a00000a 	beq	18b90 <CMACAddress::CopyTo(unsigned char*) const+0x4c>
   18b64:	e2851001 	add	r1, r5, #1
   18b68:	e1a00004 	mov	r0, r4
   18b6c:	e8bd4070 	pop	{r4, r5, r6, lr}
   18b70:	e3a02006 	mov	r2, #6
   18b74:	ea00245c 	b	21cec <memcpy>
   18b78:	e3a02047 	mov	r2, #71	; 0x47
   18b7c:	e59f1020 	ldr	r1, [pc, #32]	; 18ba4 <CMACAddress::CopyTo(unsigned char*) const+0x60>
   18b80:	e59f0020 	ldr	r0, [pc, #32]	; 18ba8 <CMACAddress::CopyTo(unsigned char*) const+0x64>
   18b84:	eb000683 	bl	1a598 <assertion_failed>
   18b88:	e3540000 	cmp	r4, #0
   18b8c:	1afffff4 	bne	18b64 <CMACAddress::CopyTo(unsigned char*) const+0x20>
   18b90:	e3a02048 	mov	r2, #72	; 0x48
   18b94:	e59f1008 	ldr	r1, [pc, #8]	; 18ba4 <CMACAddress::CopyTo(unsigned char*) const+0x60>
   18b98:	e59f000c 	ldr	r0, [pc, #12]	; 18bac <CMACAddress::CopyTo(unsigned char*) const+0x68>
   18b9c:	eb00067d 	bl	1a598 <assertion_failed>
   18ba0:	eaffffef 	b	18b64 <CMACAddress::CopyTo(unsigned char*) const+0x20>
   18ba4:	00026718 	.word	0x00026718
   18ba8:	00024620 	.word	0x00024620
   18bac:	0002526c 	.word	0x0002526c

00018bb0 <CMACAddress::IsBroadcast() const>:
   18bb0:	e5d03000 	ldrb	r3, [r0]
   18bb4:	e92d4010 	push	{r4, lr}
   18bb8:	e3530000 	cmp	r3, #0
   18bbc:	e1a04000 	mov	r4, r0
   18bc0:	0a000008 	beq	18be8 <CMACAddress::IsBroadcast() const+0x38>
   18bc4:	e2843001 	add	r3, r4, #1
   18bc8:	e2840007 	add	r0, r4, #7
   18bcc:	e4d32001 	ldrb	r2, [r3], #1
   18bd0:	e35200ff 	cmp	r2, #255	; 0xff
   18bd4:	1a000008 	bne	18bfc <CMACAddress::IsBroadcast() const+0x4c>
   18bd8:	e1530000 	cmp	r3, r0
   18bdc:	1afffffa 	bne	18bcc <CMACAddress::IsBroadcast() const+0x1c>
   18be0:	e3a00001 	mov	r0, #1
   18be4:	e8bd8010 	pop	{r4, pc}
   18be8:	e3a0204e 	mov	r2, #78	; 0x4e
   18bec:	e59f1010 	ldr	r1, [pc, #16]	; 18c04 <CMACAddress::IsBroadcast() const+0x54>
   18bf0:	e59f0010 	ldr	r0, [pc, #16]	; 18c08 <CMACAddress::IsBroadcast() const+0x58>
   18bf4:	eb000667 	bl	1a598 <assertion_failed>
   18bf8:	eafffff1 	b	18bc4 <CMACAddress::IsBroadcast() const+0x14>
   18bfc:	e3a00000 	mov	r0, #0
   18c00:	e8bd8010 	pop	{r4, pc}
   18c04:	00026718 	.word	0x00026718
   18c08:	00024620 	.word	0x00024620

00018c0c <CMACAddress::GetSize() const>:
   18c0c:	e3a00006 	mov	r0, #6
   18c10:	e12fff1e 	bx	lr

00018c14 <CMACAddress::Format(CString*) const>:
   18c14:	e92d4070 	push	{r4, r5, r6, lr}
   18c18:	e5d03000 	ldrb	r3, [r0]
   18c1c:	e24dd010 	sub	sp, sp, #16
   18c20:	e3530000 	cmp	r3, #0
   18c24:	e1a04000 	mov	r4, r0
   18c28:	e1a05001 	mov	r5, r1
   18c2c:	0a00000e 	beq	18c6c <CMACAddress::Format(CString*) const+0x58>
   18c30:	e3550000 	cmp	r5, #0
   18c34:	0a000012 	beq	18c84 <CMACAddress::Format(CString*) const+0x70>
   18c38:	e5d41003 	ldrb	r1, [r4, #3]
   18c3c:	e5d46006 	ldrb	r6, [r4, #6]
   18c40:	e5d4e005 	ldrb	lr, [r4, #5]
   18c44:	e5d4c004 	ldrb	ip, [r4, #4]
   18c48:	e5d43002 	ldrb	r3, [r4, #2]
   18c4c:	e5d42001 	ldrb	r2, [r4, #1]
   18c50:	e1a00005 	mov	r0, r5
   18c54:	e88d5002 	stm	sp, {r1, ip, lr}
   18c58:	e58d600c 	str	r6, [sp, #12]
   18c5c:	e59f1034 	ldr	r1, [pc, #52]	; 18c98 <CMACAddress::Format(CString*) const+0x84>
   18c60:	eb001ef7 	bl	20844 <CString::Format(char const*, ...)>
   18c64:	e28dd010 	add	sp, sp, #16
   18c68:	e8bd8070 	pop	{r4, r5, r6, pc}
   18c6c:	e3a02062 	mov	r2, #98	; 0x62
   18c70:	e59f1024 	ldr	r1, [pc, #36]	; 18c9c <CMACAddress::Format(CString*) const+0x88>
   18c74:	e59f0024 	ldr	r0, [pc, #36]	; 18ca0 <CMACAddress::Format(CString*) const+0x8c>
   18c78:	eb000646 	bl	1a598 <assertion_failed>
   18c7c:	e3550000 	cmp	r5, #0
   18c80:	1affffec 	bne	18c38 <CMACAddress::Format(CString*) const+0x24>
   18c84:	e3a02063 	mov	r2, #99	; 0x63
   18c88:	e59f100c 	ldr	r1, [pc, #12]	; 18c9c <CMACAddress::Format(CString*) const+0x88>
   18c8c:	e59f0010 	ldr	r0, [pc, #16]	; 18ca4 <CMACAddress::Format(CString*) const+0x90>
   18c90:	eb000640 	bl	1a598 <assertion_failed>
   18c94:	eaffffe7 	b	18c38 <CMACAddress::Format(CString*) const+0x24>
   18c98:	00026748 	.word	0x00026748
   18c9c:	00026718 	.word	0x00026718
   18ca0:	00024620 	.word	0x00024620
   18ca4:	00026738 	.word	0x00026738

00018ca8 <CNetDevice::CNetDevice(CUSBFunction*)>:
   18ca8:	e92d4010 	push	{r4, lr}
   18cac:	e1a04000 	mov	r4, r0
   18cb0:	ebffeeb9 	bl	1479c <CUSBFunction::CUSBFunction(CUSBFunction*)>
   18cb4:	e59f3008 	ldr	r3, [pc, #8]	; 18cc4 <CNetDevice::CNetDevice(CUSBFunction*)+0x1c>
   18cb8:	e1a00004 	mov	r0, r4
   18cbc:	e5843000 	str	r3, [r4]
   18cc0:	e8bd8010 	pop	{r4, pc}
   18cc4:	00026770 	.word	0x00026770

00018cc8 <CNetDevice::~CNetDevice()>:
   18cc8:	e92d4010 	push	{r4, lr}
   18ccc:	e1a04000 	mov	r4, r0
   18cd0:	e59f300c 	ldr	r3, [pc, #12]	; 18ce4 <CNetDevice::~CNetDevice()+0x1c>
   18cd4:	e5803000 	str	r3, [r0]
   18cd8:	ebffee61 	bl	14664 <CUSBFunction::~CUSBFunction()>
   18cdc:	e1a00004 	mov	r0, r4
   18ce0:	e8bd8010 	pop	{r4, pc}
   18ce4:	00026770 	.word	0x00026770

00018ce8 <CNetDevice::~CNetDevice()>:
   18ce8:	e92d4010 	push	{r4, lr}
   18cec:	e1a04000 	mov	r4, r0
   18cf0:	e59f3018 	ldr	r3, [pc, #24]	; 18d10 <CNetDevice::~CNetDevice()+0x28>
   18cf4:	e5803000 	str	r3, [r0]
   18cf8:	ebffee59 	bl	14664 <CUSBFunction::~CUSBFunction()>
   18cfc:	e1a00004 	mov	r0, r4
   18d00:	e3a01010 	mov	r1, #16
   18d04:	eb0026f8 	bl	228ec <operator delete(void*, unsigned int)>
   18d08:	e1a00004 	mov	r0, r4
   18d0c:	e8bd8010 	pop	{r4, pc}
   18d10:	00026770 	.word	0x00026770

00018d14 <CNetDevice::GetSpeedString(TNetDeviceSpeed)>:
   18d14:	e3500005 	cmp	r0, #5
   18d18:	d59f3008 	ldrle	r3, [pc, #8]	; 18d28 <CNetDevice::GetSpeedString(TNetDeviceSpeed)+0x14>
   18d1c:	d7930100 	ldrle	r0, [r3, r0, lsl #2]
   18d20:	c59f0004 	ldrgt	r0, [pc, #4]	; 18d2c <CNetDevice::GetSpeedString(TNetDeviceSpeed)+0x18>
   18d24:	e12fff1e 	bx	lr
   18d28:	0002b028 	.word	0x0002b028
   18d2c:	00028d0c 	.word	0x00028d0c

00018d30 <CNetDevice::AddNetDevice()>:
   18d30:	e92d4030 	push	{r4, r5, lr}
   18d34:	e24dd014 	sub	sp, sp, #20
   18d38:	e1a05000 	mov	r5, r0
   18d3c:	e1a0000d 	mov	r0, sp
   18d40:	eb001ad1 	bl	1f88c <CString::CString()>
   18d44:	e59f3048 	ldr	r3, [pc, #72]	; 18d94 <CNetDevice::AddNetDevice()+0x64>
   18d48:	e59f1048 	ldr	r1, [pc, #72]	; 18d98 <CNetDevice::AddNetDevice()+0x68>
   18d4c:	e5932000 	ldr	r2, [r3]
   18d50:	e1a0000d 	mov	r0, sp
   18d54:	e282c001 	add	ip, r2, #1
   18d58:	e583c000 	str	ip, [r3]
   18d5c:	eb001eb8 	bl	20844 <CString::Format(char const*, ...)>
   18d60:	eb000905 	bl	1b17c <CDeviceNameService::Get()>
   18d64:	e1a04000 	mov	r4, r0
   18d68:	e1a0000d 	mov	r0, sp
   18d6c:	eb001adc 	bl	1f8e4 <CString::operator char const*() const>
   18d70:	e1a02005 	mov	r2, r5
   18d74:	e1a01000 	mov	r1, r0
   18d78:	e3a03000 	mov	r3, #0
   18d7c:	e1a00004 	mov	r0, r4
   18d80:	eb00083d 	bl	1ae7c <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   18d84:	e1a0000d 	mov	r0, sp
   18d88:	eb001a8c 	bl	1f7c0 <CString::~CString()>
   18d8c:	e28dd014 	add	sp, sp, #20
   18d90:	e8bd8030 	pop	{r4, r5, pc}
   18d94:	0002b274 	.word	0x0002b274
   18d98:	000267a0 	.word	0x000267a0

00018d9c <CUSBGamePadDevice::GetInitialState()>:
   18d9c:	e2800024 	add	r0, r0, #36	; 0x24
   18da0:	e12fff1e 	bx	lr

00018da4 <CUSBGamePadDevice::ReportHandler(unsigned char const*, unsigned int)>:
   18da4:	e3510000 	cmp	r1, #0
   18da8:	012fff1e 	bxeq	lr
   18dac:	e280cf4a 	add	ip, r0, #296	; 0x128
   18db0:	e1dcc0b0 	ldrh	ip, [ip]
   18db4:	e92d4070 	push	{r4, r5, r6, lr}
   18db8:	e15c0002 	cmp	ip, r2
   18dbc:	e1a04000 	mov	r4, r0
   18dc0:	18bd8070 	popne	{r4, r5, r6, pc}
   18dc4:	e5902124 	ldr	r2, [r0, #292]	; 0x124
   18dc8:	e3520000 	cmp	r2, #0
   18dcc:	08bd8070 	popeq	{r4, r5, r6, pc}
   18dd0:	e1a05000 	mov	r5, r0
   18dd4:	e4953024 	ldr	r3, [r5], #36	; 0x24
   18dd8:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   18ddc:	e12fff33 	blx	r3
   18de0:	e594012c 	ldr	r0, [r4, #300]	; 0x12c
   18de4:	e1a01005 	mov	r1, r5
   18de8:	e5943124 	ldr	r3, [r4, #292]	; 0x124
   18dec:	e2400001 	sub	r0, r0, #1
   18df0:	e8bd4070 	pop	{r4, r5, r6, lr}
   18df4:	e12fff13 	bx	r3

00018df8 <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))>:
   18df8:	e5903124 	ldr	r3, [r0, #292]	; 0x124
   18dfc:	e92d4070 	push	{r4, r5, r6, lr}
   18e00:	e3530000 	cmp	r3, #0
   18e04:	e1a04000 	mov	r4, r0
   18e08:	e1a05001 	mov	r5, r1
   18e0c:	0a000003 	beq	18e20 <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))+0x28>
   18e10:	e3a0204b 	mov	r2, #75	; 0x4b
   18e14:	e59f1024 	ldr	r1, [pc, #36]	; 18e40 <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))+0x48>
   18e18:	e59f0024 	ldr	r0, [pc, #36]	; 18e44 <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))+0x4c>
   18e1c:	eb0005dd 	bl	1a598 <assertion_failed>
   18e20:	e3550000 	cmp	r5, #0
   18e24:	e5845124 	str	r5, [r4, #292]	; 0x124
   18e28:	18bd8070 	popne	{r4, r5, r6, pc}
   18e2c:	e3a0204d 	mov	r2, #77	; 0x4d
   18e30:	e8bd4070 	pop	{r4, r5, r6, lr}
   18e34:	e59f1004 	ldr	r1, [pc, #4]	; 18e40 <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))+0x48>
   18e38:	e59f0008 	ldr	r0, [pc, #8]	; 18e48 <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))+0x50>
   18e3c:	ea0005d5 	b	1a598 <assertion_failed>
   18e40:	0002688c 	.word	0x0002688c
   18e44:	0002689c 	.word	0x0002689c
   18e48:	000268b4 	.word	0x000268b4

00018e4c <CUSBGamePadDevice::Configure()>:
   18e4c:	e92d4030 	push	{r4, r5, lr}
   18e50:	e2805f4a 	add	r5, r0, #296	; 0x128
   18e54:	e1d510b0 	ldrh	r1, [r5]
   18e58:	e24dd00c 	sub	sp, sp, #12
   18e5c:	e3510000 	cmp	r1, #0
   18e60:	e1a04000 	mov	r4, r0
   18e64:	0a00001a 	beq	18ed4 <CUSBGamePadDevice::Configure()+0x88>
   18e68:	e1a00004 	mov	r0, r4
   18e6c:	ebffe26e 	bl	1182c <CUSBHIDDevice::Configure(unsigned int)>
   18e70:	e2505000 	subs	r5, r0, #0
   18e74:	0a00000e 	beq	18eb4 <CUSBGamePadDevice::Configure()+0x68>
   18e78:	e59f206c 	ldr	r2, [pc, #108]	; 18eec <CUSBGamePadDevice::Configure()+0xa0>
   18e7c:	e5923000 	ldr	r3, [r2]
   18e80:	e584312c 	str	r3, [r4, #300]	; 0x12c
   18e84:	e2833001 	add	r3, r3, #1
   18e88:	e5823000 	str	r3, [r2]
   18e8c:	eb0008ba 	bl	1b17c <CDeviceNameService::Get()>
   18e90:	e3a03000 	mov	r3, #0
   18e94:	e594212c 	ldr	r2, [r4, #300]	; 0x12c
   18e98:	e59f1050 	ldr	r1, [pc, #80]	; 18ef0 <CUSBGamePadDevice::Configure()+0xa4>
   18e9c:	e58d3000 	str	r3, [sp]
   18ea0:	e1a03004 	mov	r3, r4
   18ea4:	eb0008c2 	bl	1b1b4 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   18ea8:	e1a00005 	mov	r0, r5
   18eac:	e28dd00c 	add	sp, sp, #12
   18eb0:	e8bd8030 	pop	{r4, r5, pc}
   18eb4:	eb000faa 	bl	1cd64 <CLogger::Get()>
   18eb8:	e59f3034 	ldr	r3, [pc, #52]	; 18ef4 <CUSBGamePadDevice::Configure()+0xa8>
   18ebc:	e3a02001 	mov	r2, #1
   18ec0:	e59f1030 	ldr	r1, [pc, #48]	; 18ef8 <CUSBGamePadDevice::Configure()+0xac>
   18ec4:	eb00114f 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18ec8:	e1a00005 	mov	r0, r5
   18ecc:	e28dd00c 	add	sp, sp, #12
   18ed0:	e8bd8030 	pop	{r4, r5, pc}
   18ed4:	e59f1020 	ldr	r1, [pc, #32]	; 18efc <CUSBGamePadDevice::Configure()+0xb0>
   18ed8:	e3a02035 	mov	r2, #53	; 0x35
   18edc:	e59f001c 	ldr	r0, [pc, #28]	; 18f00 <CUSBGamePadDevice::Configure()+0xb4>
   18ee0:	eb0005ac 	bl	1a598 <assertion_failed>
   18ee4:	e1d510b0 	ldrh	r1, [r5]
   18ee8:	eaffffde 	b	18e68 <CUSBGamePadDevice::Configure()+0x1c>
   18eec:	0002b040 	.word	0x0002b040
   18ef0:	00026840 	.word	0x00026840
   18ef4:	00025644 	.word	0x00025644
   18ef8:	00026838 	.word	0x00026838
   18efc:	0002688c 	.word	0x0002688c
   18f00:	00025910 	.word	0x00025910

00018f04 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>:
   18f04:	e92d4010 	push	{r4, lr}
   18f08:	e3a02000 	mov	r2, #0
   18f0c:	e1a04000 	mov	r4, r0
   18f10:	ebffe206 	bl	11730 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>
   18f14:	e3a03000 	mov	r3, #0
   18f18:	e59f1028 	ldr	r1, [pc, #40]	; 18f48 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)+0x44>
   18f1c:	e2842f4a 	add	r2, r4, #296	; 0x128
   18f20:	e5841000 	str	r1, [r4]
   18f24:	e5843124 	str	r3, [r4, #292]	; 0x124
   18f28:	e1a01003 	mov	r1, r3
   18f2c:	e1c230b0 	strh	r3, [r2]
   18f30:	e2840024 	add	r0, r4, #36	; 0x24
   18f34:	e584312c 	str	r3, [r4, #300]	; 0x12c
   18f38:	e3a02c01 	mov	r2, #256	; 0x100
   18f3c:	eb0021f8 	bl	21724 <memset>
   18f40:	e1a00004 	mov	r0, r4
   18f44:	e8bd8010 	pop	{r4, pc}
   18f48:	00026850 	.word	0x00026850

00018f4c <CUSBGamePadDevice::~CUSBGamePadDevice()>:
   18f4c:	e92d4070 	push	{r4, r5, r6, lr}
   18f50:	e3a06000 	mov	r6, #0
   18f54:	e1a04000 	mov	r4, r0
   18f58:	e59f502c 	ldr	r5, [pc, #44]	; 18f8c <CUSBGamePadDevice::~CUSBGamePadDevice()+0x40>
   18f5c:	e5806124 	str	r6, [r0, #292]	; 0x124
   18f60:	e2853018 	add	r3, r5, #24
   18f64:	e5803000 	str	r3, [r0]
   18f68:	eb000883 	bl	1b17c <CDeviceNameService::Get()>
   18f6c:	e1a03006 	mov	r3, r6
   18f70:	e2851008 	add	r1, r5, #8
   18f74:	e594212c 	ldr	r2, [r4, #300]	; 0x12c
   18f78:	eb0008a7 	bl	1b21c <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   18f7c:	e1a00004 	mov	r0, r4
   18f80:	ebffe1fe 	bl	11780 <CUSBHIDDevice::~CUSBHIDDevice()>
   18f84:	e1a00004 	mov	r0, r4
   18f88:	e8bd8070 	pop	{r4, r5, r6, pc}
   18f8c:	00026838 	.word	0x00026838

00018f90 <CUSBGamePadDevice::~CUSBGamePadDevice()>:
   18f90:	e92d4010 	push	{r4, lr}
   18f94:	e1a04000 	mov	r4, r0
   18f98:	ebffffeb 	bl	18f4c <CUSBGamePadDevice::~CUSBGamePadDevice()>
   18f9c:	e1a00004 	mov	r0, r4
   18fa0:	e3a01e13 	mov	r1, #304	; 0x130
   18fa4:	eb002650 	bl	228ec <operator delete(void*, unsigned int)>
   18fa8:	e1a00004 	mov	r0, r4
   18fac:	e8bd8010 	pop	{r4, pc}

00018fb0 <CKeyboardBehaviour::CKeyboardBehaviour()>:
   18fb0:	e92d4010 	push	{r4, lr}
   18fb4:	e3a03000 	mov	r3, #0
   18fb8:	e1a04000 	mov	r4, r0
   18fbc:	e2800014 	add	r0, r0, #20
   18fc0:	e5843000 	str	r3, [r4]
   18fc4:	e5843004 	str	r3, [r4, #4]
   18fc8:	e5843008 	str	r3, [r4, #8]
   18fcc:	e5c4300c 	strb	r3, [r4, #12]
   18fd0:	e5c4300d 	strb	r3, [r4, #13]
   18fd4:	e5843010 	str	r3, [r4, #16]
   18fd8:	eb000197 	bl	1963c <CKeyMap::CKeyMap()>
   18fdc:	e1a00004 	mov	r0, r4
   18fe0:	e8bd8010 	pop	{r4, pc}

00018fe4 <CKeyboardBehaviour::~CKeyboardBehaviour()>:
   18fe4:	e92d4010 	push	{r4, lr}
   18fe8:	e3a03000 	mov	r3, #0
   18fec:	e1a04000 	mov	r4, r0
   18ff0:	e2800014 	add	r0, r0, #20
   18ff4:	e5843000 	str	r3, [r4]
   18ff8:	e5843004 	str	r3, [r4, #4]
   18ffc:	e5843008 	str	r3, [r4, #8]
   19000:	eb0000c4 	bl	19318 <CKeyMap::~CKeyMap()>
   19004:	e1a00004 	mov	r0, r4
   19008:	e8bd8010 	pop	{r4, pc}

0001900c <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))>:
   1900c:	e92d4070 	push	{r4, r5, r6, lr}
   19010:	e2515000 	subs	r5, r1, #0
   19014:	e1a04000 	mov	r4, r0
   19018:	0a000001 	beq	19024 <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))+0x18>
   1901c:	e5845000 	str	r5, [r4]
   19020:	e8bd8070 	pop	{r4, r5, r6, pc}
   19024:	e3a0202f 	mov	r2, #47	; 0x2f
   19028:	e59f100c 	ldr	r1, [pc, #12]	; 1903c <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))+0x30>
   1902c:	e59f000c 	ldr	r0, [pc, #12]	; 19040 <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))+0x34>
   19030:	eb000558 	bl	1a598 <assertion_failed>
   19034:	e5845000 	str	r5, [r4]
   19038:	e8bd8070 	pop	{r4, r5, r6, pc}
   1903c:	000268cc 	.word	0x000268cc
   19040:	000268e4 	.word	0x000268e4

00019044 <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))>:
   19044:	e92d4070 	push	{r4, r5, r6, lr}
   19048:	e2515000 	subs	r5, r1, #0
   1904c:	e1a04000 	mov	r4, r0
   19050:	0a000001 	beq	1905c <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))+0x18>
   19054:	e5845004 	str	r5, [r4, #4]
   19058:	e8bd8070 	pop	{r4, r5, r6, pc}
   1905c:	e3a02035 	mov	r2, #53	; 0x35
   19060:	e59f100c 	ldr	r1, [pc, #12]	; 19074 <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))+0x30>
   19064:	e59f000c 	ldr	r0, [pc, #12]	; 19078 <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))+0x34>
   19068:	eb00054a 	bl	1a598 <assertion_failed>
   1906c:	e5845004 	str	r5, [r4, #4]
   19070:	e8bd8070 	pop	{r4, r5, r6, pc}
   19074:	000268cc 	.word	0x000268cc
   19078:	000268fc 	.word	0x000268fc

0001907c <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())>:
   1907c:	e92d4070 	push	{r4, r5, r6, lr}
   19080:	e2515000 	subs	r5, r1, #0
   19084:	e1a04000 	mov	r4, r0
   19088:	0a000001 	beq	19094 <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())+0x18>
   1908c:	e5845008 	str	r5, [r4, #8]
   19090:	e8bd8070 	pop	{r4, r5, r6, pc}
   19094:	e3a0203b 	mov	r2, #59	; 0x3b
   19098:	e59f100c 	ldr	r1, [pc, #12]	; 190ac <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())+0x30>
   1909c:	e59f000c 	ldr	r0, [pc, #12]	; 190b0 <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())+0x34>
   190a0:	eb00053c 	bl	1a598 <assertion_failed>
   190a4:	e5845008 	str	r5, [r4, #8]
   190a8:	e8bd8070 	pop	{r4, r5, r6, pc}
   190ac:	000268cc 	.word	0x000268cc
   190b0:	00026918 	.word	0x00026918

000190b4 <CKeyboardBehaviour::GetLEDStatus() const>:
   190b4:	e2800014 	add	r0, r0, #20
   190b8:	ea00012d 	b	19574 <CKeyMap::GetLEDStatus() const>

000190bc <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)>:
   190bc:	e92d4070 	push	{r4, r5, r6, lr}
   190c0:	e5d0600c 	ldrb	r6, [r0, #12]
   190c4:	e2805014 	add	r5, r0, #20
   190c8:	e24dd008 	sub	sp, sp, #8
   190cc:	e1a04000 	mov	r4, r0
   190d0:	e1a02006 	mov	r2, r6
   190d4:	e1a00005 	mov	r0, r5
   190d8:	eb0000b2 	bl	193a8 <CKeyMap::Translate(unsigned char, unsigned char)>
   190dc:	e2403e13 	sub	r3, r0, #304	; 0x130
   190e0:	e2433003 	sub	r3, r3, #3
   190e4:	e353000f 	cmp	r3, #15
   190e8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   190ec:	ea00001d 	b	19168 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0xac>
   190f0:	00019148 	.word	0x00019148
   190f4:	00019148 	.word	0x00019148
   190f8:	00019148 	.word	0x00019148
   190fc:	00019130 	.word	0x00019130
   19100:	00019130 	.word	0x00019130
   19104:	00019130 	.word	0x00019130
   19108:	00019130 	.word	0x00019130
   1910c:	00019130 	.word	0x00019130
   19110:	00019130 	.word	0x00019130
   19114:	00019130 	.word	0x00019130
   19118:	00019130 	.word	0x00019130
   1911c:	00019130 	.word	0x00019130
   19120:	00019130 	.word	0x00019130
   19124:	00019130 	.word	0x00019130
   19128:	00019130 	.word	0x00019130
   1912c:	00019150 	.word	0x00019150
   19130:	e5943004 	ldr	r3, [r4, #4]
   19134:	e3530000 	cmp	r3, #0
   19138:	0a000002 	beq	19148 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x8c>
   1913c:	e2400f4d 	sub	r0, r0, #308	; 0x134
   19140:	e2400002 	sub	r0, r0, #2
   19144:	e12fff33 	blx	r3
   19148:	e28dd008 	add	sp, sp, #8
   1914c:	e8bd8070 	pop	{r4, r5, r6, pc}
   19150:	e5943008 	ldr	r3, [r4, #8]
   19154:	e3530000 	cmp	r3, #0
   19158:	0afffffa 	beq	19148 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x8c>
   1915c:	e12fff33 	blx	r3
   19160:	e28dd008 	add	sp, sp, #8
   19164:	e8bd8070 	pop	{r4, r5, r6, pc}
   19168:	e1a01000 	mov	r1, r0
   1916c:	e1a02006 	mov	r2, r6
   19170:	e1a00005 	mov	r0, r5
   19174:	e28d3004 	add	r3, sp, #4
   19178:	eb0000cd 	bl	194b4 <CKeyMap::GetString(unsigned short, unsigned char, char*) const>
   1917c:	e3500000 	cmp	r0, #0
   19180:	0afffff0 	beq	19148 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x8c>
   19184:	e5943000 	ldr	r3, [r4]
   19188:	e3530000 	cmp	r3, #0
   1918c:	0affffed 	beq	19148 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x8c>
   19190:	e12fff33 	blx	r3
   19194:	e28dd008 	add	sp, sp, #8
   19198:	e8bd8070 	pop	{r4, r5, r6, pc}

0001919c <CKeyboardBehaviour::KeyPressed(unsigned char)>:
   1919c:	e241c080 	sub	ip, r1, #128	; 0x80
   191a0:	e6ef307c 	uxtb	r3, ip
   191a4:	e3530007 	cmp	r3, #7
   191a8:	e1a03000 	mov	r3, r0
   191ac:	8a000004 	bhi	191c4 <CKeyboardBehaviour::KeyPressed(unsigned char)+0x28>
   191b0:	e3a01001 	mov	r1, #1
   191b4:	e5d0200c 	ldrb	r2, [r0, #12]
   191b8:	e182cc11 	orr	ip, r2, r1, lsl ip
   191bc:	e5c0c00c 	strb	ip, [r0, #12]
   191c0:	e12fff1e 	bx	lr
   191c4:	e5d0c00d 	ldrb	ip, [r0, #13]
   191c8:	e15c0001 	cmp	ip, r1
   191cc:	012fff1e 	bxeq	lr
   191d0:	e5c3100d 	strb	r1, [r3, #13]
   191d4:	eaffffb8 	b	190bc <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)>

000191d8 <CKeyboardBehaviour::KeyReleased(unsigned char)>:
   191d8:	e2413080 	sub	r3, r1, #128	; 0x80
   191dc:	e6ef2073 	uxtb	r2, r3
   191e0:	e3520007 	cmp	r2, #7
   191e4:	8a000004 	bhi	191fc <CKeyboardBehaviour::KeyReleased(unsigned char)+0x24>
   191e8:	e3a01001 	mov	r1, #1
   191ec:	e5d0200c 	ldrb	r2, [r0, #12]
   191f0:	e1c23311 	bic	r3, r2, r1, lsl r3
   191f4:	e5c0300c 	strb	r3, [r0, #12]
   191f8:	e12fff1e 	bx	lr
   191fc:	e5d0300d 	ldrb	r3, [r0, #13]
   19200:	e1530001 	cmp	r3, r1
   19204:	112fff1e 	bxne	lr
   19208:	e5903010 	ldr	r3, [r0, #16]
   1920c:	e92d4010 	push	{r4, lr}
   19210:	e3530000 	cmp	r3, #0
   19214:	e1a04000 	mov	r4, r0
   19218:	1a000002 	bne	19228 <CKeyboardBehaviour::KeyReleased(unsigned char)+0x50>
   1921c:	e3a03000 	mov	r3, #0
   19220:	e5c4300d 	strb	r3, [r4, #13]
   19224:	e8bd8010 	pop	{r4, pc}
   19228:	eb00212e 	bl	216e8 <CTimer::Get()>
   1922c:	e5941010 	ldr	r1, [r4, #16]
   19230:	eb001fb7 	bl	21114 <CTimer::CancelKernelTimer(unsigned int)>
   19234:	e3a03000 	mov	r3, #0
   19238:	e5843010 	str	r3, [r4, #16]
   1923c:	eafffff6 	b	1921c <CKeyboardBehaviour::KeyReleased(unsigned char)+0x44>

00019240 <CKeyboardBehaviour::TimerHandler(unsigned int)>:
   19240:	e92d4010 	push	{r4, lr}
   19244:	e5903010 	ldr	r3, [r0, #16]
   19248:	e24dd008 	sub	sp, sp, #8
   1924c:	e1530001 	cmp	r3, r1
   19250:	e1a04000 	mov	r4, r0
   19254:	0a000003 	beq	19268 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x28>
   19258:	e3a020b0 	mov	r2, #176	; 0xb0
   1925c:	e59f105c 	ldr	r1, [pc, #92]	; 192c0 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x80>
   19260:	e59f005c 	ldr	r0, [pc, #92]	; 192c4 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x84>
   19264:	eb0004cb 	bl	1a598 <assertion_failed>
   19268:	e5d4100d 	ldrb	r1, [r4, #13]
   1926c:	e3510000 	cmp	r1, #0
   19270:	1a000001 	bne	1927c <CKeyboardBehaviour::TimerHandler(unsigned int)+0x3c>
   19274:	e28dd008 	add	sp, sp, #8
   19278:	e8bd8010 	pop	{r4, pc}
   1927c:	e1a00004 	mov	r0, r4
   19280:	ebffff8d 	bl	190bc <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)>
   19284:	eb002117 	bl	216e8 <CTimer::Get()>
   19288:	e58d4000 	str	r4, [sp]
   1928c:	e3a03000 	mov	r3, #0
   19290:	e59f2030 	ldr	r2, [pc, #48]	; 192c8 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x88>
   19294:	e3a01008 	mov	r1, #8
   19298:	eb001f43 	bl	20fac <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
   1929c:	e3500000 	cmp	r0, #0
   192a0:	e5840010 	str	r0, [r4, #16]
   192a4:	1afffff2 	bne	19274 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x34>
   192a8:	e3a020b7 	mov	r2, #183	; 0xb7
   192ac:	e59f100c 	ldr	r1, [pc, #12]	; 192c0 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x80>
   192b0:	e59f0014 	ldr	r0, [pc, #20]	; 192cc <CKeyboardBehaviour::TimerHandler(unsigned int)+0x8c>
   192b4:	e28dd008 	add	sp, sp, #8
   192b8:	e8bd4010 	pop	{r4, lr}
   192bc:	ea0004b5 	b	1a598 <assertion_failed>
   192c0:	000268cc 	.word	0x000268cc
   192c4:	00026930 	.word	0x00026930
   192c8:	000192d0 	.word	0x000192d0
   192cc:	000261a0 	.word	0x000261a0

000192d0 <CKeyboardBehaviour::TimerStub(unsigned int, void*, void*)>:
   192d0:	e92d4070 	push	{r4, r5, r6, lr}
   192d4:	e2524000 	subs	r4, r2, #0
   192d8:	e1a05000 	mov	r5, r0
   192dc:	0a000003 	beq	192f0 <CKeyboardBehaviour::TimerStub(unsigned int, void*, void*)+0x20>
   192e0:	e1a01005 	mov	r1, r5
   192e4:	e1a00004 	mov	r0, r4
   192e8:	e8bd4070 	pop	{r4, r5, r6, lr}
   192ec:	eaffffd3 	b	19240 <CKeyboardBehaviour::TimerHandler(unsigned int)>
   192f0:	e59f1018 	ldr	r1, [pc, #24]	; 19310 <CKeyboardBehaviour::TimerStub(unsigned int, void*, void*)+0x40>
   192f4:	e59f0018 	ldr	r0, [pc, #24]	; 19314 <CKeyboardBehaviour::TimerStub(unsigned int, void*, void*)+0x44>
   192f8:	e3a020be 	mov	r2, #190	; 0xbe
   192fc:	eb0004a5 	bl	1a598 <assertion_failed>
   19300:	e1a01005 	mov	r1, r5
   19304:	e1a00004 	mov	r0, r4
   19308:	e8bd4070 	pop	{r4, r5, r6, lr}
   1930c:	eaffffcb 	b	19240 <CKeyboardBehaviour::TimerHandler(unsigned int)>
   19310:	000268cc 	.word	0x000268cc
   19314:	000240a0 	.word	0x000240a0

00019318 <CKeyMap::~CKeyMap()>:
   19318:	e12fff1e 	bx	lr

0001931c <CKeyMap::ClearTable(unsigned char)>:
   1931c:	e3510003 	cmp	r1, #3
   19320:	ca000009 	bgt	1934c <CKeyMap::ClearTable(unsigned char)+0x30>
   19324:	e3a0c000 	mov	ip, #0
   19328:	e1a03081 	lsl	r3, r1, #1
   1932c:	e2832b01 	add	r2, r3, #1024	; 0x400
   19330:	e0802002 	add	r2, r0, r2
   19334:	e0803003 	add	r3, r0, r3
   19338:	e0c3c0b8 	strh	ip, [r3], #8
   1933c:	e1530002 	cmp	r3, r2
   19340:	1afffffc 	bne	19338 <CKeyMap::ClearTable(unsigned char)+0x1c>
   19344:	e3a00001 	mov	r0, #1
   19348:	e12fff1e 	bx	lr
   1934c:	e3a00000 	mov	r0, #0
   19350:	e12fff1e 	bx	lr

00019354 <CKeyMap::SetEntry(unsigned char, unsigned char, unsigned short)>:
   19354:	e16fcf12 	clz	ip, r2
   19358:	e1a0c2ac 	lsr	ip, ip, #5
   1935c:	e3510003 	cmp	r1, #3
   19360:	c38cc001 	orrgt	ip, ip, #1
   19364:	e35c0000 	cmp	ip, #0
   19368:	1a00000a 	bne	19398 <CKeyMap::SetEntry(unsigned char, unsigned char, unsigned short)+0x44>
   1936c:	e352007f 	cmp	r2, #127	; 0x7f
   19370:	ca000009 	bgt	1939c <CKeyMap::SetEntry(unsigned char, unsigned char, unsigned short)+0x48>
   19374:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   19378:	e59fe024 	ldr	lr, [pc, #36]	; 193a4 <CKeyMap::SetEntry(unsigned char, unsigned char, unsigned short)+0x50>
   1937c:	e153000e 	cmp	r3, lr
   19380:	d3a0c001 	movle	ip, #1
   19384:	d0811102 	addle	r1, r1, r2, lsl #2
   19388:	d1a01081 	lslle	r1, r1, #1
   1938c:	d18030b1 	strhle	r3, [r0, r1]
   19390:	e1a0000c 	mov	r0, ip
   19394:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   19398:	e3a0c000 	mov	ip, #0
   1939c:	e1a0000c 	mov	r0, ip
   193a0:	e12fff1e 	bx	lr
   193a4:	00000132 	.word	0x00000132

000193a8 <CKeyMap::Translate(unsigned char, unsigned char)>:
   193a8:	e6af3071 	sxtb	r3, r1
   193ac:	e3530000 	cmp	r3, #0
   193b0:	da000023 	ble	19444 <CKeyMap::Translate(unsigned char, unsigned char)+0x9c>
   193b4:	e1a03181 	lsl	r3, r1, #3
   193b8:	e19030b3 	ldrh	r3, [r0, r3]
   193bc:	e3530f42 	cmp	r3, #264	; 0x108
   193c0:	0a000022 	beq	19450 <CKeyMap::Translate(unsigned char, unsigned char)+0xa8>
   193c4:	e243cf43 	sub	ip, r3, #268	; 0x10c
   193c8:	e24cc003 	sub	ip, ip, #3
   193cc:	e35c000b 	cmp	ip, #11
   193d0:	8a000003 	bhi	193e4 <CKeyMap::Translate(unsigned char, unsigned char)+0x3c>
   193d4:	e3120004 	tst	r2, #4
   193d8:	12833027 	addne	r3, r3, #39	; 0x27
   193dc:	16ff3073 	uxthne	r3, r3
   193e0:	1a000018 	bne	19448 <CKeyMap::Translate(unsigned char, unsigned char)+0xa0>
   193e4:	e312008c 	tst	r2, #140	; 0x8c
   193e8:	1a000015 	bne	19444 <CKeyMap::Translate(unsigned char, unsigned char)+0x9c>
   193ec:	e2413053 	sub	r3, r1, #83	; 0x53
   193f0:	e3530010 	cmp	r3, #16
   193f4:	9a00001b 	bls	19468 <CKeyMap::Translate(unsigned char, unsigned char)+0xc0>
   193f8:	e3120040 	tst	r2, #64	; 0x40
   193fc:	0a000025 	beq	19498 <CKeyMap::Translate(unsigned char, unsigned char)+0xf0>
   19400:	e3120022 	tst	r2, #34	; 0x22
   19404:	13a03003 	movne	r3, #3
   19408:	03a03002 	moveq	r3, #2
   1940c:	e0831101 	add	r1, r3, r1, lsl #2
   19410:	e1a01081 	lsl	r1, r1, #1
   19414:	e19030b1 	ldrh	r3, [r0, r1]
   19418:	e59f2088 	ldr	r2, [pc, #136]	; 194a8 <CKeyMap::Translate(unsigned char, unsigned char)+0x100>
   1941c:	e1530002 	cmp	r3, r2
   19420:	0a000017 	beq	19484 <CKeyMap::Translate(unsigned char, unsigned char)+0xdc>
   19424:	e3530e12 	cmp	r3, #288	; 0x120
   19428:	0a000010 	beq	19470 <CKeyMap::Translate(unsigned char, unsigned char)+0xc8>
   1942c:	e3530f47 	cmp	r3, #284	; 0x11c
   19430:	05d02400 	ldrbeq	r2, [r0, #1024]	; 0x400
   19434:	02833017 	addeq	r3, r3, #23
   19438:	02222001 	eoreq	r2, r2, #1
   1943c:	05c02400 	strbeq	r2, [r0, #1024]	; 0x400
   19440:	ea000000 	b	19448 <CKeyMap::Translate(unsigned char, unsigned char)+0xa0>
   19444:	e3a03000 	mov	r3, #0
   19448:	e1a00003 	mov	r0, r3
   1944c:	e12fff1e 	bx	lr
   19450:	e3120011 	tst	r2, #17
   19454:	0affffe2 	beq	193e4 <CKeyMap::Translate(unsigned char, unsigned char)+0x3c>
   19458:	e3120004 	tst	r2, #4
   1945c:	159f3048 	ldrne	r3, [pc, #72]	; 194ac <CKeyMap::Translate(unsigned char, unsigned char)+0x104>
   19460:	1afffff8 	bne	19448 <CKeyMap::Translate(unsigned char, unsigned char)+0xa0>
   19464:	eaffffde 	b	193e4 <CKeyMap::Translate(unsigned char, unsigned char)+0x3c>
   19468:	e5d03401 	ldrb	r3, [r0, #1025]	; 0x401
   1946c:	eaffffe6 	b	1940c <CKeyMap::Translate(unsigned char, unsigned char)+0x64>
   19470:	e5d02401 	ldrb	r2, [r0, #1025]	; 0x401
   19474:	e3a03f4d 	mov	r3, #308	; 0x134
   19478:	e2222001 	eor	r2, r2, #1
   1947c:	e5c02401 	strb	r2, [r0, #1025]	; 0x401
   19480:	eafffff0 	b	19448 <CKeyMap::Translate(unsigned char, unsigned char)+0xa0>
   19484:	e5d02402 	ldrb	r2, [r0, #1026]	; 0x402
   19488:	e59f3020 	ldr	r3, [pc, #32]	; 194b0 <CKeyMap::Translate(unsigned char, unsigned char)+0x108>
   1948c:	e2222001 	eor	r2, r2, #1
   19490:	e5c02402 	strb	r2, [r0, #1026]	; 0x402
   19494:	eaffffeb 	b	19448 <CKeyMap::Translate(unsigned char, unsigned char)+0xa0>
   19498:	e3120022 	tst	r2, #34	; 0x22
   1949c:	13a03001 	movne	r3, #1
   194a0:	03a03000 	moveq	r3, #0
   194a4:	eaffffd8 	b	1940c <CKeyMap::Translate(unsigned char, unsigned char)+0x64>
   194a8:	0000011e 	.word	0x0000011e
   194ac:	00000142 	.word	0x00000142
   194b0:	00000135 	.word	0x00000135

000194b4 <CKeyMap::GetString(unsigned short, unsigned char, char*) const>:
   194b4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   194b8:	e241c021 	sub	ip, r1, #33	; 0x21
   194bc:	e59fe0a8 	ldr	lr, [pc, #168]	; 1956c <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xb8>
   194c0:	e6ffc07c 	uxth	ip, ip
   194c4:	e15c000e 	cmp	ip, lr
   194c8:	8a000025 	bhi	19564 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xb0>
   194cc:	e241cc01 	sub	ip, r1, #256	; 0x100
   194d0:	e6ffe07c 	uxth	lr, ip
   194d4:	e35e0032 	cmp	lr, #50	; 0x32
   194d8:	9a00001e 	bls	19558 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xa4>
   194dc:	e3120011 	tst	r2, #17
   194e0:	e6af2071 	sxtb	r2, r1
   194e4:	0a000009 	beq	19510 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x5c>
   194e8:	e6ef1071 	uxtb	r1, r1
   194ec:	e2412061 	sub	r2, r1, #97	; 0x61
   194f0:	e3520019 	cmp	r2, #25
   194f4:	8a00001a 	bhi	19564 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xb0>
   194f8:	e3a02000 	mov	r2, #0
   194fc:	e2411060 	sub	r1, r1, #96	; 0x60
   19500:	e5c31000 	strb	r1, [r3]
   19504:	e5c32001 	strb	r2, [r3, #1]
   19508:	e1a00003 	mov	r0, r3
   1950c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   19510:	e5d00400 	ldrb	r0, [r0, #1024]	; 0x400
   19514:	e3500000 	cmp	r0, #0
   19518:	0a000009 	beq	19544 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x90>
   1951c:	e6ef1071 	uxtb	r1, r1
   19520:	e2410041 	sub	r0, r1, #65	; 0x41
   19524:	e3500019 	cmp	r0, #25
   19528:	92811020 	addls	r1, r1, #32
   1952c:	96af2071 	sxtbls	r2, r1
   19530:	9a000003 	bls	19544 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x90>
   19534:	e2410061 	sub	r0, r1, #97	; 0x61
   19538:	e3500019 	cmp	r0, #25
   1953c:	92411020 	subls	r1, r1, #32
   19540:	96af2071 	sxtbls	r2, r1
   19544:	e3a01000 	mov	r1, #0
   19548:	e5c32000 	strb	r2, [r3]
   1954c:	e5c31001 	strb	r1, [r3, #1]
   19550:	e1a00003 	mov	r0, r3
   19554:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   19558:	e59f3010 	ldr	r3, [pc, #16]	; 19570 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xbc>
   1955c:	e793010c 	ldr	r0, [r3, ip, lsl #2]
   19560:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   19564:	e3a00000 	mov	r0, #0
   19568:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   1956c:	00000111 	.word	0x00000111
   19570:	0002b044 	.word	0x0002b044

00019574 <CKeyMap::GetLEDStatus() const>:
   19574:	e5d03400 	ldrb	r3, [r0, #1024]	; 0x400
   19578:	e5d02401 	ldrb	r2, [r0, #1025]	; 0x401
   1957c:	e3530000 	cmp	r3, #0
   19580:	13a03002 	movne	r3, #2
   19584:	03a03000 	moveq	r3, #0
   19588:	e3520000 	cmp	r2, #0
   1958c:	e5d02402 	ldrb	r2, [r0, #1026]	; 0x402
   19590:	13833001 	orrne	r3, r3, #1
   19594:	e3520000 	cmp	r2, #0
   19598:	13833004 	orrne	r3, r3, #4
   1959c:	e1a00003 	mov	r0, r3
   195a0:	e12fff1e 	bx	lr

000195a4 <CKeyMap::LookupDefaultMap(char const*)>:
   195a4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   195a8:	e59f4078 	ldr	r4, [pc, #120]	; 19628 <CKeyMap::LookupDefaultMap(char const*)+0x84>
   195ac:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
   195b0:	e3530000 	cmp	r3, #0
   195b4:	0a000016 	beq	19614 <CKeyMap::LookupDefaultMap(char const*)+0x70>
   195b8:	e1a05000 	mov	r5, r0
   195bc:	e3a06000 	mov	r6, #0
   195c0:	e59f9064 	ldr	r9, [pc, #100]	; 1962c <CKeyMap::LookupDefaultMap(char const*)+0x88>
   195c4:	e59f8064 	ldr	r8, [pc, #100]	; 19630 <CKeyMap::LookupDefaultMap(char const*)+0x8c>
   195c8:	e59f7064 	ldr	r7, [pc, #100]	; 19634 <CKeyMap::LookupDefaultMap(char const*)+0x90>
   195cc:	e28440cc 	add	r4, r4, #204	; 0xcc
   195d0:	ea000008 	b	195f8 <CKeyMap::LookupDefaultMap(char const*)+0x54>
   195d4:	e1a01005 	mov	r1, r5
   195d8:	e4940004 	ldr	r0, [r4], #4
   195dc:	eb00207a 	bl	217cc <strcmp>
   195e0:	e3500000 	cmp	r0, #0
   195e4:	0a00000c 	beq	1961c <CKeyMap::LookupDefaultMap(char const*)+0x78>
   195e8:	e5943000 	ldr	r3, [r4]
   195ec:	e2866001 	add	r6, r6, #1
   195f0:	e3530000 	cmp	r3, #0
   195f4:	0a000006 	beq	19614 <CKeyMap::LookupDefaultMap(char const*)+0x70>
   195f8:	e3550000 	cmp	r5, #0
   195fc:	1afffff4 	bne	195d4 <CKeyMap::LookupDefaultMap(char const*)+0x30>
   19600:	e1a02009 	mov	r2, r9
   19604:	e1a01008 	mov	r1, r8
   19608:	e1a00007 	mov	r0, r7
   1960c:	eb0003e1 	bl	1a598 <assertion_failed>
   19610:	eaffffef 	b	195d4 <CKeyMap::LookupDefaultMap(char const*)+0x30>
   19614:	e3a00000 	mov	r0, #0
   19618:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1961c:	e59f0014 	ldr	r0, [pc, #20]	; 19638 <CKeyMap::LookupDefaultMap(char const*)+0x94>
   19620:	e0800506 	add	r0, r0, r6, lsl #10
   19624:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19628:	0002b044 	.word	0x0002b044
   1962c:	0000013f 	.word	0x0000013f
   19630:	00028144 	.word	0x00028144
   19634:	00028150 	.word	0x00028150
   19638:	00026944 	.word	0x00026944

0001963c <CKeyMap::CKeyMap()>:
   1963c:	e3a03000 	mov	r3, #0
   19640:	e3a02001 	mov	r2, #1
   19644:	e92d4070 	push	{r4, r5, r6, lr}
   19648:	e5c02401 	strb	r2, [r0, #1025]	; 0x401
   1964c:	e5c03400 	strb	r3, [r0, #1024]	; 0x400
   19650:	e5c03402 	strb	r3, [r0, #1026]	; 0x402
   19654:	e1a04000 	mov	r4, r0
   19658:	eb000c65 	bl	1c7f4 <CKernelOptions::Get()>
   1965c:	eb000c57 	bl	1c7c0 <CKernelOptions::GetKeyMap() const>
   19660:	e2505000 	subs	r5, r0, #0
   19664:	0a000012 	beq	196b4 <CKeyMap::CKeyMap()+0x78>
   19668:	e1a00005 	mov	r0, r5
   1966c:	ebffffcc 	bl	195a4 <CKeyMap::LookupDefaultMap(char const*)>
   19670:	e2501000 	subs	r1, r0, #0
   19674:	0a000004 	beq	1968c <CKeyMap::CKeyMap()+0x50>
   19678:	e3a02b01 	mov	r2, #1024	; 0x400
   1967c:	e1a00004 	mov	r0, r4
   19680:	eb002199 	bl	21cec <memcpy>
   19684:	e1a00004 	mov	r0, r4
   19688:	e8bd8070 	pop	{r4, r5, r6, pc}
   1968c:	e59f0034 	ldr	r0, [pc, #52]	; 196c8 <CKeyMap::CKeyMap()+0x8c>
   19690:	ebffffc3 	bl	195a4 <CKeyMap::LookupDefaultMap(char const*)>
   19694:	e2501000 	subs	r1, r0, #0
   19698:	1afffff6 	bne	19678 <CKeyMap::CKeyMap()+0x3c>
   1969c:	e59f1028 	ldr	r1, [pc, #40]	; 196cc <CKeyMap::CKeyMap()+0x90>
   196a0:	e3a02080 	mov	r2, #128	; 0x80
   196a4:	e59f0024 	ldr	r0, [pc, #36]	; 196d0 <CKeyMap::CKeyMap()+0x94>
   196a8:	eb0003ba 	bl	1a598 <assertion_failed>
   196ac:	e59f1020 	ldr	r1, [pc, #32]	; 196d4 <CKeyMap::CKeyMap()+0x98>
   196b0:	eafffff0 	b	19678 <CKeyMap::CKeyMap()+0x3c>
   196b4:	e3a0207a 	mov	r2, #122	; 0x7a
   196b8:	e59f100c 	ldr	r1, [pc, #12]	; 196cc <CKeyMap::CKeyMap()+0x90>
   196bc:	e59f0014 	ldr	r0, [pc, #20]	; 196d8 <CKeyMap::CKeyMap()+0x9c>
   196c0:	eb0003b4 	bl	1a598 <assertion_failed>
   196c4:	eaffffe7 	b	19668 <CKeyMap::CKeyMap()+0x2c>
   196c8:	00028160 	.word	0x00028160
   196cc:	00028144 	.word	0x00028144
   196d0:	00028164 	.word	0x00028164
   196d4:	00026944 	.word	0x00026944
   196d8:	00028150 	.word	0x00028150

000196dc <CMouseDevice::~CMouseDevice()>:
   196dc:	e92d4070 	push	{r4, r5, r6, lr}
   196e0:	e3a06000 	mov	r6, #0
   196e4:	e1a04000 	mov	r4, r0
   196e8:	e59f5034 	ldr	r5, [pc, #52]	; 19724 <CMouseDevice::~CMouseDevice()+0x48>
   196ec:	e5806020 	str	r6, [r0, #32]
   196f0:	e2853008 	add	r3, r5, #8
   196f4:	e5803000 	str	r3, [r0]
   196f8:	eb00069f 	bl	1b17c <CDeviceNameService::Get()>
   196fc:	e1a03006 	mov	r3, r6
   19700:	e285101c 	add	r1, r5, #28
   19704:	e5942024 	ldr	r2, [r4, #36]	; 0x24
   19708:	eb0006c3 	bl	1b21c <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   1970c:	e2840004 	add	r0, r4, #4
   19710:	eb000062 	bl	198a0 <CMouseBehaviour::~CMouseBehaviour()>
   19714:	e1a00004 	mov	r0, r4
   19718:	eb00059a 	bl	1ad88 <CDevice::~CDevice()>
   1971c:	e1a00004 	mov	r0, r4
   19720:	e8bd8070 	pop	{r4, r5, r6, pc}
   19724:	00028258 	.word	0x00028258

00019728 <CMouseDevice::~CMouseDevice()>:
   19728:	e92d4010 	push	{r4, lr}
   1972c:	e1a04000 	mov	r4, r0
   19730:	ebffffe9 	bl	196dc <CMouseDevice::~CMouseDevice()>
   19734:	e1a00004 	mov	r0, r4
   19738:	e3a01028 	mov	r1, #40	; 0x28
   1973c:	eb00246a 	bl	228ec <operator delete(void*, unsigned int)>
   19740:	e1a00004 	mov	r0, r4
   19744:	e8bd8010 	pop	{r4, pc}

00019748 <CMouseDevice::CMouseDevice()>:
   19748:	e92d4070 	push	{r4, r5, r6, lr}
   1974c:	e1a04000 	mov	r4, r0
   19750:	e24dd008 	sub	sp, sp, #8
   19754:	eb000597 	bl	1adb8 <CDevice::CDevice()>
   19758:	e1a00004 	mov	r0, r4
   1975c:	e3a06000 	mov	r6, #0
   19760:	e59f5044 	ldr	r5, [pc, #68]	; 197ac <CMouseDevice::CMouseDevice()+0x64>
   19764:	e2853008 	add	r3, r5, #8
   19768:	e4803004 	str	r3, [r0], #4
   1976c:	eb000041 	bl	19878 <CMouseBehaviour::CMouseBehaviour()>
   19770:	e59f2038 	ldr	r2, [pc, #56]	; 197b0 <CMouseDevice::CMouseDevice()+0x68>
   19774:	e5846020 	str	r6, [r4, #32]
   19778:	e5923000 	ldr	r3, [r2]
   1977c:	e5843024 	str	r3, [r4, #36]	; 0x24
   19780:	e2833001 	add	r3, r3, #1
   19784:	e5823000 	str	r3, [r2]
   19788:	eb00067b 	bl	1b17c <CDeviceNameService::Get()>
   1978c:	e5942024 	ldr	r2, [r4, #36]	; 0x24
   19790:	e285101c 	add	r1, r5, #28
   19794:	e58d6000 	str	r6, [sp]
   19798:	e1a03004 	mov	r3, r4
   1979c:	eb000684 	bl	1b1b4 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   197a0:	e1a00004 	mov	r0, r4
   197a4:	e28dd008 	add	sp, sp, #8
   197a8:	e8bd8070 	pop	{r4, r5, r6, pc}
   197ac:	00028258 	.word	0x00028258
   197b0:	0002b12c 	.word	0x0002b12c

000197b4 <CMouseDevice::Setup(unsigned int, unsigned int)>:
   197b4:	e2800004 	add	r0, r0, #4
   197b8:	ea000039 	b	198a4 <CMouseBehaviour::Setup(unsigned int, unsigned int)>

000197bc <CMouseDevice::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))>:
   197bc:	e2800004 	add	r0, r0, #4
   197c0:	ea00008e 	b	19a00 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))>

000197c4 <CMouseDevice::SetCursor(unsigned int, unsigned int)>:
   197c4:	e2800004 	add	r0, r0, #4
   197c8:	ea00011a 	b	19c38 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)>

000197cc <CMouseDevice::ShowCursor(bool)>:
   197cc:	e2800004 	add	r0, r0, #4
   197d0:	ea000143 	b	19ce4 <CMouseBehaviour::ShowCursor(bool)>

000197d4 <CMouseDevice::UpdateCursor()>:
   197d4:	e5903020 	ldr	r3, [r0, #32]
   197d8:	e3530000 	cmp	r3, #0
   197dc:	112fff1e 	bxne	lr
   197e0:	e2800004 	add	r0, r0, #4
   197e4:	ea00015c 	b	19d5c <CMouseBehaviour::UpdateCursor()>

000197e8 <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int))>:
   197e8:	e5903020 	ldr	r3, [r0, #32]
   197ec:	e92d4070 	push	{r4, r5, r6, lr}
   197f0:	e3530000 	cmp	r3, #0
   197f4:	e1a04000 	mov	r4, r0
   197f8:	e1a05001 	mov	r5, r1
   197fc:	0a000003 	beq	19810 <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int))+0x28>
   19800:	e3a02048 	mov	r2, #72	; 0x48
   19804:	e59f1024 	ldr	r1, [pc, #36]	; 19830 <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int))+0x48>
   19808:	e59f0024 	ldr	r0, [pc, #36]	; 19834 <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int))+0x4c>
   1980c:	eb000361 	bl	1a598 <assertion_failed>
   19810:	e3550000 	cmp	r5, #0
   19814:	e5845020 	str	r5, [r4, #32]
   19818:	18bd8070 	popne	{r4, r5, r6, pc}
   1981c:	e3a0204a 	mov	r2, #74	; 0x4a
   19820:	e8bd4070 	pop	{r4, r5, r6, lr}
   19824:	e59f1004 	ldr	r1, [pc, #4]	; 19830 <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int))+0x48>
   19828:	e59f0008 	ldr	r0, [pc, #8]	; 19838 <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int))+0x50>
   1982c:	ea000359 	b	1a598 <assertion_failed>
   19830:	0002827c 	.word	0x0002827c
   19834:	0002689c 	.word	0x0002689c
   19838:	000268b4 	.word	0x000268b4

0001983c <CMouseDevice::ReportHandler(unsigned int, int, int)>:
   1983c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   19840:	e1a04000 	mov	r4, r0
   19844:	e2800004 	add	r0, r0, #4
   19848:	e1a07003 	mov	r7, r3
   1984c:	e1a05001 	mov	r5, r1
   19850:	e1a06002 	mov	r6, r2
   19854:	eb00007e 	bl	19a54 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)>
   19858:	e5943020 	ldr	r3, [r4, #32]
   1985c:	e3530000 	cmp	r3, #0
   19860:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   19864:	e1a02007 	mov	r2, r7
   19868:	e1a01006 	mov	r1, r6
   1986c:	e1a00005 	mov	r0, r5
   19870:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   19874:	e12fff13 	bx	r3

00019878 <CMouseBehaviour::CMouseBehaviour()>:
   19878:	e3a02000 	mov	r2, #0
   1987c:	e5802000 	str	r2, [r0]
   19880:	e5802004 	str	r2, [r0, #4]
   19884:	e5802008 	str	r2, [r0, #8]
   19888:	e580200c 	str	r2, [r0, #12]
   1988c:	e5c02010 	strb	r2, [r0, #16]
   19890:	e5c02011 	strb	r2, [r0, #17]
   19894:	e5802014 	str	r2, [r0, #20]
   19898:	e5802018 	str	r2, [r0, #24]
   1989c:	e12fff1e 	bx	lr

000198a0 <CMouseBehaviour::~CMouseBehaviour()>:
   198a0:	e12fff1e 	bx	lr

000198a4 <CMouseBehaviour::Setup(unsigned int, unsigned int)>:
   198a4:	e92d4070 	push	{r4, r5, r6, lr}
   198a8:	e5903000 	ldr	r3, [r0]
   198ac:	e24dd030 	sub	sp, sp, #48	; 0x30
   198b0:	e3530000 	cmp	r3, #0
   198b4:	e1a04000 	mov	r4, r0
   198b8:	e1a06001 	mov	r6, r1
   198bc:	e1a05002 	mov	r5, r2
   198c0:	1a00002c 	bne	19978 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0xd4>
   198c4:	e3560000 	cmp	r6, #0
   198c8:	e5846000 	str	r6, [r4]
   198cc:	0a000030 	beq	19994 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0xf0>
   198d0:	e5943004 	ldr	r3, [r4, #4]
   198d4:	e3530000 	cmp	r3, #0
   198d8:	1a000034 	bne	199b0 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x10c>
   198dc:	e3550000 	cmp	r5, #0
   198e0:	e5845004 	str	r5, [r4, #4]
   198e4:	0a000038 	beq	199cc <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x128>
   198e8:	e5943000 	ldr	r3, [r4]
   198ec:	e2855001 	add	r5, r5, #1
   198f0:	e2833001 	add	r3, r3, #1
   198f4:	e1a030a3 	lsr	r3, r3, #1
   198f8:	e1a050a5 	lsr	r5, r5, #1
   198fc:	e584500c 	str	r5, [r4, #12]
   19900:	e5843008 	str	r3, [r4, #8]
   19904:	e28d0008 	add	r0, sp, #8
   19908:	eb000346 	bl	1a628 <CBcmPropertyTags::CBcmPropertyTags()>
   1990c:	e3a03018 	mov	r3, #24
   19910:	e3a0e000 	mov	lr, #0
   19914:	e3a04010 	mov	r4, #16
   19918:	e59fc0c4 	ldr	ip, [pc, #196]	; 199e4 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x140>
   1991c:	e58d3000 	str	r3, [sp]
   19920:	e3ccc103 	bic	ip, ip, #-1073741824	; 0xc0000000
   19924:	e38cc101 	orr	ip, ip, #1073741824	; 0x40000000
   19928:	e3a03024 	mov	r3, #36	; 0x24
   1992c:	e28d200c 	add	r2, sp, #12
   19930:	e59f10b0 	ldr	r1, [pc, #176]	; 199e8 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x144>
   19934:	e28d0008 	add	r0, sp, #8
   19938:	e58dc024 	str	ip, [sp, #36]	; 0x24
   1993c:	e58d4018 	str	r4, [sp, #24]
   19940:	e58d401c 	str	r4, [sp, #28]
   19944:	e58de020 	str	lr, [sp, #32]
   19948:	e58de028 	str	lr, [sp, #40]	; 0x28
   1994c:	e58de02c 	str	lr, [sp, #44]	; 0x2c
   19950:	eb00038b 	bl	1a784 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   19954:	e2504000 	subs	r4, r0, #0
   19958:	159d4018 	ldrne	r4, [sp, #24]
   1995c:	e28d0008 	add	r0, sp, #8
   19960:	116f4f14 	clzne	r4, r4
   19964:	11a042a4 	lsrne	r4, r4, #5
   19968:	eb000334 	bl	1a640 <CBcmPropertyTags::~CBcmPropertyTags()>
   1996c:	e1a00004 	mov	r0, r4
   19970:	e28dd030 	add	sp, sp, #48	; 0x30
   19974:	e8bd8070 	pop	{r4, r5, r6, pc}
   19978:	e3a0204c 	mov	r2, #76	; 0x4c
   1997c:	e59f1068 	ldr	r1, [pc, #104]	; 199ec <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x148>
   19980:	e59f0068 	ldr	r0, [pc, #104]	; 199f0 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x14c>
   19984:	eb000303 	bl	1a598 <assertion_failed>
   19988:	e3560000 	cmp	r6, #0
   1998c:	e5846000 	str	r6, [r4]
   19990:	1affffce 	bne	198d0 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x2c>
   19994:	e3a0204e 	mov	r2, #78	; 0x4e
   19998:	e59f104c 	ldr	r1, [pc, #76]	; 199ec <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x148>
   1999c:	e59f0050 	ldr	r0, [pc, #80]	; 199f4 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x150>
   199a0:	eb0002fc 	bl	1a598 <assertion_failed>
   199a4:	e5943004 	ldr	r3, [r4, #4]
   199a8:	e3530000 	cmp	r3, #0
   199ac:	0affffca 	beq	198dc <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x38>
   199b0:	e3a02050 	mov	r2, #80	; 0x50
   199b4:	e59f1030 	ldr	r1, [pc, #48]	; 199ec <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x148>
   199b8:	e59f0038 	ldr	r0, [pc, #56]	; 199f8 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x154>
   199bc:	eb0002f5 	bl	1a598 <assertion_failed>
   199c0:	e3550000 	cmp	r5, #0
   199c4:	e5845004 	str	r5, [r4, #4]
   199c8:	1affffc6 	bne	198e8 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x44>
   199cc:	e3a02052 	mov	r2, #82	; 0x52
   199d0:	e59f1014 	ldr	r1, [pc, #20]	; 199ec <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x148>
   199d4:	e59f0020 	ldr	r0, [pc, #32]	; 199fc <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x158>
   199d8:	eb0002ee 	bl	1a598 <assertion_failed>
   199dc:	e5945004 	ldr	r5, [r4, #4]
   199e0:	eaffffc0 	b	198e8 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x44>
   199e4:	00028288 	.word	0x00028288
   199e8:	00008010 	.word	0x00008010
   199ec:	00028688 	.word	0x00028688
   199f0:	0002869c 	.word	0x0002869c
   199f4:	000286b0 	.word	0x000286b0
   199f8:	000286c4 	.word	0x000286c4
   199fc:	000286dc 	.word	0x000286dc

00019a00 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))>:
   19a00:	e5903018 	ldr	r3, [r0, #24]
   19a04:	e92d4070 	push	{r4, r5, r6, lr}
   19a08:	e3530000 	cmp	r3, #0
   19a0c:	e1a04000 	mov	r4, r0
   19a10:	e1a05001 	mov	r5, r1
   19a14:	0a000003 	beq	19a28 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))+0x28>
   19a18:	e3a0206e 	mov	r2, #110	; 0x6e
   19a1c:	e59f1024 	ldr	r1, [pc, #36]	; 19a48 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))+0x48>
   19a20:	e59f0024 	ldr	r0, [pc, #36]	; 19a4c <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))+0x4c>
   19a24:	eb0002db 	bl	1a598 <assertion_failed>
   19a28:	e3550000 	cmp	r5, #0
   19a2c:	e5845018 	str	r5, [r4, #24]
   19a30:	18bd8070 	popne	{r4, r5, r6, pc}
   19a34:	e3a02070 	mov	r2, #112	; 0x70
   19a38:	e8bd4070 	pop	{r4, r5, r6, lr}
   19a3c:	e59f1004 	ldr	r1, [pc, #4]	; 19a48 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))+0x48>
   19a40:	e59f0008 	ldr	r0, [pc, #8]	; 19a50 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))+0x50>
   19a44:	ea0002d3 	b	1a598 <assertion_failed>
   19a48:	00028688 	.word	0x00028688
   19a4c:	000286f0 	.word	0x000286f0
   19a50:	00026054 	.word	0x00026054

00019a54 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)>:
   19a54:	e590c000 	ldr	ip, [r0]
   19a58:	e35c0000 	cmp	ip, #0
   19a5c:	012fff1e 	bxeq	lr
   19a60:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19a64:	e590e004 	ldr	lr, [r0, #4]
   19a68:	e35e0000 	cmp	lr, #0
   19a6c:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19a70:	e1a04000 	mov	r4, r0
   19a74:	e1a05001 	mov	r5, r1
   19a78:	e0822182 	add	r2, r2, r2, lsl #3
   19a7c:	e59f113c 	ldr	r1, [pc, #316]	; 19bc0 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x16c>
   19a80:	e1a02082 	lsl	r2, r2, #1
   19a84:	e0833183 	add	r3, r3, r3, lsl #3
   19a88:	e0c60291 	smull	r0, r6, r1, r2
   19a8c:	e1a03083 	lsl	r3, r3, #1
   19a90:	e0c10391 	smull	r0, r1, r1, r3
   19a94:	e1a02fc2 	asr	r2, r2, #31
   19a98:	e5940008 	ldr	r0, [r4, #8]
   19a9c:	e0622146 	rsb	r2, r2, r6, asr #2
   19aa0:	e1a03fc3 	asr	r3, r3, #31
   19aa4:	e0633141 	rsb	r3, r3, r1, asr #2
   19aa8:	e0822000 	add	r2, r2, r0
   19aac:	e594100c 	ldr	r1, [r4, #12]
   19ab0:	e15c0002 	cmp	ip, r2
   19ab4:	e0813003 	add	r3, r1, r3
   19ab8:	9a00002c 	bls	19b70 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x11c>
   19abc:	e15e0003 	cmp	lr, r3
   19ac0:	e584300c 	str	r3, [r4, #12]
   19ac4:	e5842008 	str	r2, [r4, #8]
   19ac8:	8a000037 	bhi	19bac <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x158>
   19acc:	e1500002 	cmp	r0, r2
   19ad0:	e584100c 	str	r1, [r4, #12]
   19ad4:	0a000008 	beq	19afc <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xa8>
   19ad8:	e3a03001 	mov	r3, #1
   19adc:	e5946018 	ldr	r6, [r4, #24]
   19ae0:	e5c43010 	strb	r3, [r4, #16]
   19ae4:	e3560000 	cmp	r6, #0
   19ae8:	0a000027 	beq	19b8c <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x138>
   19aec:	e594300c 	ldr	r3, [r4, #12]
   19af0:	e1a01005 	mov	r1, r5
   19af4:	e3a00000 	mov	r0, #0
   19af8:	e12fff36 	blx	r6
   19afc:	e5943014 	ldr	r3, [r4, #20]
   19b00:	e1550003 	cmp	r5, r3
   19b04:	0a000020 	beq	19b8c <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x138>
   19b08:	e5942018 	ldr	r2, [r4, #24]
   19b0c:	e3520000 	cmp	r2, #0
   19b10:	0a00001d 	beq	19b8c <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x138>
   19b14:	e3a06000 	mov	r6, #0
   19b18:	e3a07001 	mov	r7, #1
   19b1c:	e1a01617 	lsl	r1, r7, r6
   19b20:	e1110003 	tst	r1, r3
   19b24:	e3a08002 	mov	r8, #2
   19b28:	0a000008 	beq	19b50 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xfc>
   19b2c:	e1150001 	tst	r5, r1
   19b30:	0a000017 	beq	19b94 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x140>
   19b34:	e2866001 	add	r6, r6, #1
   19b38:	e3560003 	cmp	r6, #3
   19b3c:	0a000012 	beq	19b8c <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x138>
   19b40:	e5943014 	ldr	r3, [r4, #20]
   19b44:	e1a01617 	lsl	r1, r7, r6
   19b48:	e1110003 	tst	r1, r3
   19b4c:	1afffff6 	bne	19b2c <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xd8>
   19b50:	e1150001 	tst	r5, r1
   19b54:	0afffff6 	beq	19b34 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xe0>
   19b58:	e5949018 	ldr	r9, [r4, #24]
   19b5c:	e594300c 	ldr	r3, [r4, #12]
   19b60:	e5942008 	ldr	r2, [r4, #8]
   19b64:	e1a00007 	mov	r0, r7
   19b68:	e12fff39 	blx	r9
   19b6c:	eafffff0 	b	19b34 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xe0>
   19b70:	e15e0003 	cmp	lr, r3
   19b74:	e584300c 	str	r3, [r4, #12]
   19b78:	9a00000e 	bls	19bb8 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x164>
   19b7c:	e1510003 	cmp	r1, r3
   19b80:	11a02000 	movne	r2, r0
   19b84:	1affffd3 	bne	19ad8 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x84>
   19b88:	eaffffdb 	b	19afc <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xa8>
   19b8c:	e5845014 	str	r5, [r4, #20]
   19b90:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19b94:	e5949018 	ldr	r9, [r4, #24]
   19b98:	e594300c 	ldr	r3, [r4, #12]
   19b9c:	e5942008 	ldr	r2, [r4, #8]
   19ba0:	e1a00008 	mov	r0, r8
   19ba4:	e12fff39 	blx	r9
   19ba8:	eaffffe1 	b	19b34 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xe0>
   19bac:	e1500002 	cmp	r0, r2
   19bb0:	1affffc8 	bne	19ad8 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x84>
   19bb4:	eafffff0 	b	19b7c <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x128>
   19bb8:	e584100c 	str	r1, [r4, #12]
   19bbc:	eaffffce 	b	19afc <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xa8>
   19bc0:	66666667 	.word	0x66666667

00019bc4 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>:
   19bc4:	e92d4070 	push	{r4, r5, r6, lr}
   19bc8:	e24dd028 	sub	sp, sp, #40	; 0x28
   19bcc:	e1a05000 	mov	r5, r0
   19bd0:	e28d0008 	add	r0, sp, #8
   19bd4:	e1a04001 	mov	r4, r1
   19bd8:	e1a06002 	mov	r6, r2
   19bdc:	eb000291 	bl	1a628 <CBcmPropertyTags::CBcmPropertyTags()>
   19be0:	e3a03010 	mov	r3, #16
   19be4:	e3a0c001 	mov	ip, #1
   19be8:	e58d3000 	str	r3, [sp]
   19bec:	e28d200c 	add	r2, sp, #12
   19bf0:	e3a0301c 	mov	r3, #28
   19bf4:	e59f1038 	ldr	r1, [pc, #56]	; 19c34 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)+0x70>
   19bf8:	e28d0008 	add	r0, sp, #8
   19bfc:	e58d4020 	str	r4, [sp, #32]
   19c00:	e58dc024 	str	ip, [sp, #36]	; 0x24
   19c04:	e58d6018 	str	r6, [sp, #24]
   19c08:	e58d501c 	str	r5, [sp, #28]
   19c0c:	eb0002dc 	bl	1a784 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   19c10:	e2504000 	subs	r4, r0, #0
   19c14:	159d4018 	ldrne	r4, [sp, #24]
   19c18:	e28d0008 	add	r0, sp, #8
   19c1c:	116f4f14 	clzne	r4, r4
   19c20:	11a042a4 	lsrne	r4, r4, #5
   19c24:	eb000285 	bl	1a640 <CBcmPropertyTags::~CBcmPropertyTags()>
   19c28:	e1a00004 	mov	r0, r4
   19c2c:	e28dd028 	add	sp, sp, #40	; 0x28
   19c30:	e8bd8070 	pop	{r4, r5, r6, pc}
   19c34:	00008011 	.word	0x00008011

00019c38 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)>:
   19c38:	e5903000 	ldr	r3, [r0]
   19c3c:	e92d4070 	push	{r4, r5, r6, lr}
   19c40:	e3530000 	cmp	r3, #0
   19c44:	e1a04000 	mov	r4, r0
   19c48:	e1a05001 	mov	r5, r1
   19c4c:	e1a06002 	mov	r6, r2
   19c50:	0a000016 	beq	19cb0 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x78>
   19c54:	e5943004 	ldr	r3, [r4, #4]
   19c58:	e3530000 	cmp	r3, #0
   19c5c:	0a00000e 	beq	19c9c <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x64>
   19c60:	e5943000 	ldr	r3, [r4]
   19c64:	e1530005 	cmp	r3, r5
   19c68:	9a000009 	bls	19c94 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x5c>
   19c6c:	e5943004 	ldr	r3, [r4, #4]
   19c70:	e1530006 	cmp	r3, r6
   19c74:	9a000006 	bls	19c94 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x5c>
   19c78:	e5d43011 	ldrb	r3, [r4, #17]
   19c7c:	e5845008 	str	r5, [r4, #8]
   19c80:	e3530000 	cmp	r3, #0
   19c84:	e584600c 	str	r6, [r4, #12]
   19c88:	1a00000d 	bne	19cc4 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x8c>
   19c8c:	e3a00001 	mov	r0, #1
   19c90:	e8bd8070 	pop	{r4, r5, r6, pc}
   19c94:	e3a00000 	mov	r0, #0
   19c98:	e8bd8070 	pop	{r4, r5, r6, pc}
   19c9c:	e3a02076 	mov	r2, #118	; 0x76
   19ca0:	e59f1030 	ldr	r1, [pc, #48]	; 19cd8 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0xa0>
   19ca4:	e59f0030 	ldr	r0, [pc, #48]	; 19cdc <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0xa4>
   19ca8:	eb00023a 	bl	1a598 <assertion_failed>
   19cac:	eaffffeb 	b	19c60 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x28>
   19cb0:	e3a02075 	mov	r2, #117	; 0x75
   19cb4:	e59f101c 	ldr	r1, [pc, #28]	; 19cd8 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0xa0>
   19cb8:	e59f0020 	ldr	r0, [pc, #32]	; 19ce0 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0xa8>
   19cbc:	eb000235 	bl	1a598 <assertion_failed>
   19cc0:	eaffffe3 	b	19c54 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x1c>
   19cc4:	e1a01006 	mov	r1, r6
   19cc8:	e1a00005 	mov	r0, r5
   19ccc:	e8bd4070 	pop	{r4, r5, r6, lr}
   19cd0:	e3a02001 	mov	r2, #1
   19cd4:	eaffffba 	b	19bc4 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>
   19cd8:	00028688 	.word	0x00028688
   19cdc:	000286dc 	.word	0x000286dc
   19ce0:	000286b0 	.word	0x000286b0

00019ce4 <CMouseBehaviour::ShowCursor(bool)>:
   19ce4:	e5902008 	ldr	r2, [r0, #8]
   19ce8:	e5903000 	ldr	r3, [r0]
   19cec:	e92d4070 	push	{r4, r5, r6, lr}
   19cf0:	e1520003 	cmp	r2, r3
   19cf4:	e5d05011 	ldrb	r5, [r0, #17]
   19cf8:	e1a04000 	mov	r4, r0
   19cfc:	e5c01011 	strb	r1, [r0, #17]
   19d00:	2a00000d 	bcs	19d3c <CMouseBehaviour::ShowCursor(bool)+0x58>
   19d04:	e594100c 	ldr	r1, [r4, #12]
   19d08:	e5943004 	ldr	r3, [r4, #4]
   19d0c:	e1510003 	cmp	r1, r3
   19d10:	3a000004 	bcc	19d28 <CMouseBehaviour::ShowCursor(bool)+0x44>
   19d14:	e59f1034 	ldr	r1, [pc, #52]	; 19d50 <CMouseBehaviour::ShowCursor(bool)+0x6c>
   19d18:	e3a0208e 	mov	r2, #142	; 0x8e
   19d1c:	e59f0030 	ldr	r0, [pc, #48]	; 19d54 <CMouseBehaviour::ShowCursor(bool)+0x70>
   19d20:	eb00021c 	bl	1a598 <assertion_failed>
   19d24:	e594100c 	ldr	r1, [r4, #12]
   19d28:	e5d42011 	ldrb	r2, [r4, #17]
   19d2c:	e5940008 	ldr	r0, [r4, #8]
   19d30:	ebffffa3 	bl	19bc4 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>
   19d34:	e1a00005 	mov	r0, r5
   19d38:	e8bd8070 	pop	{r4, r5, r6, pc}
   19d3c:	e3a0208d 	mov	r2, #141	; 0x8d
   19d40:	e59f1008 	ldr	r1, [pc, #8]	; 19d50 <CMouseBehaviour::ShowCursor(bool)+0x6c>
   19d44:	e59f000c 	ldr	r0, [pc, #12]	; 19d58 <CMouseBehaviour::ShowCursor(bool)+0x74>
   19d48:	eb000212 	bl	1a598 <assertion_failed>
   19d4c:	eaffffec 	b	19d04 <CMouseBehaviour::ShowCursor(bool)+0x20>
   19d50:	00028688 	.word	0x00028688
   19d54:	00028724 	.word	0x00028724
   19d58:	00028708 	.word	0x00028708

00019d5c <CMouseBehaviour::UpdateCursor()>:
   19d5c:	e5d03011 	ldrb	r3, [r0, #17]
   19d60:	e3530000 	cmp	r3, #0
   19d64:	012fff1e 	bxeq	lr
   19d68:	e5d03010 	ldrb	r3, [r0, #16]
   19d6c:	e3530000 	cmp	r3, #0
   19d70:	012fff1e 	bxeq	lr
   19d74:	e3a03000 	mov	r3, #0
   19d78:	e590100c 	ldr	r1, [r0, #12]
   19d7c:	e5c03010 	strb	r3, [r0, #16]
   19d80:	e3a02001 	mov	r2, #1
   19d84:	e5900008 	ldr	r0, [r0, #8]
   19d88:	eaffff8d 	b	19bc4 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>

00019d8c <CPartitionManager::CPartitionManager(CDevice*, char const*)>:
   19d8c:	e92d4010 	push	{r4, lr}
   19d90:	e1a04000 	mov	r4, r0
   19d94:	e4801004 	str	r1, [r0], #4
   19d98:	e1a01002 	mov	r1, r2
   19d9c:	eb0016c0 	bl	1f8a4 <CString::CString(char const*)>
   19da0:	e3a03000 	mov	r3, #0
   19da4:	e1a00004 	mov	r0, r4
   19da8:	e5843014 	str	r3, [r4, #20]
   19dac:	e5843018 	str	r3, [r4, #24]
   19db0:	e584301c 	str	r3, [r4, #28]
   19db4:	e5843020 	str	r3, [r4, #32]
   19db8:	e8bd8010 	pop	{r4, pc}

00019dbc <CPartitionManager::~CPartitionManager()>:
   19dbc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   19dc0:	e1a06000 	mov	r6, r0
   19dc4:	e3a05000 	mov	r5, #0
   19dc8:	e2804014 	add	r4, r0, #20
   19dcc:	e2807024 	add	r7, r0, #36	; 0x24
   19dd0:	e5940000 	ldr	r0, [r4]
   19dd4:	e3500000 	cmp	r0, #0
   19dd8:	0a000002 	beq	19de8 <CPartitionManager::~CPartitionManager()+0x2c>
   19ddc:	e5903000 	ldr	r3, [r0]
   19de0:	e5933004 	ldr	r3, [r3, #4]
   19de4:	e12fff33 	blx	r3
   19de8:	e4845004 	str	r5, [r4], #4
   19dec:	e1540007 	cmp	r4, r7
   19df0:	1afffff6 	bne	19dd0 <CPartitionManager::~CPartitionManager()+0x14>
   19df4:	e1a00006 	mov	r0, r6
   19df8:	e4805004 	str	r5, [r0], #4
   19dfc:	eb00166f 	bl	1f7c0 <CString::~CString()>
   19e00:	e1a00006 	mov	r0, r6
   19e04:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00019e08 <CPartitionManager::Initialize()>:
   19e08:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19e0c:	e1a06000 	mov	r6, r0
   19e10:	e5900000 	ldr	r0, [r0]
   19e14:	e3a03000 	mov	r3, #0
   19e18:	e5901000 	ldr	r1, [r0]
   19e1c:	e24ddf87 	sub	sp, sp, #540	; 0x21c
   19e20:	e3a02000 	mov	r2, #0
   19e24:	e5911010 	ldr	r1, [r1, #16]
   19e28:	e12fff31 	blx	r1
   19e2c:	e1903001 	orrs	r3, r0, r1
   19e30:	0a000007 	beq	19e54 <CPartitionManager::Initialize()+0x4c>
   19e34:	eb000bca 	bl	1cd64 <CLogger::Get()>
   19e38:	e59f31f0 	ldr	r3, [pc, #496]	; 1a030 <CPartitionManager::Initialize()+0x228>
   19e3c:	e3a02001 	mov	r2, #1
   19e40:	e59f11ec 	ldr	r1, [pc, #492]	; 1a034 <CPartitionManager::Initialize()+0x22c>
   19e44:	eb000d6f 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   19e48:	e3a00000 	mov	r0, #0
   19e4c:	e28ddf87 	add	sp, sp, #540	; 0x21c
   19e50:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19e54:	e5960000 	ldr	r0, [r6]
   19e58:	e28d1018 	add	r1, sp, #24
   19e5c:	e5903000 	ldr	r3, [r0]
   19e60:	e3a02c02 	mov	r2, #512	; 0x200
   19e64:	e5933008 	ldr	r3, [r3, #8]
   19e68:	e12fff33 	blx	r3
   19e6c:	e3500c02 	cmp	r0, #512	; 0x200
   19e70:	1affffef 	bne	19e34 <CPartitionManager::Initialize()+0x2c>
   19e74:	e28d3f85 	add	r3, sp, #532	; 0x214
   19e78:	e2833002 	add	r3, r3, #2
   19e7c:	e1d320b0 	ldrh	r2, [r3]
   19e80:	e59f31b0 	ldr	r3, [pc, #432]	; 1a038 <CPartitionManager::Initialize()+0x230>
   19e84:	e1520003 	cmp	r2, r3
   19e88:	1a000060 	bne	1a010 <CPartitionManager::Initialize()+0x208>
   19e8c:	e3a04000 	mov	r4, #0
   19e90:	e1a09004 	mov	r9, r4
   19e94:	e1a08004 	mov	r8, r4
   19e98:	e59f719c 	ldr	r7, [pc, #412]	; 1a03c <CPartitionManager::Initialize()+0x234>
   19e9c:	e59fb19c 	ldr	fp, [pc, #412]	; 1a040 <CPartitionManager::Initialize()+0x238>
   19ea0:	e2865014 	add	r5, r6, #20
   19ea4:	e28d3018 	add	r3, sp, #24
   19ea8:	e0833204 	add	r3, r3, r4, lsl #4
   19eac:	e5d321c2 	ldrb	r2, [r3, #450]	; 0x1c2
   19eb0:	e28d1f86 	add	r1, sp, #536	; 0x218
   19eb4:	e352000f 	cmp	r2, #15
   19eb8:	91e03237 	mvnls	r3, r7, lsr r2
   19ebc:	81a03008 	movhi	r3, r8
   19ec0:	92033001 	andls	r3, r3, #1
   19ec4:	92233001 	eorls	r3, r3, #1
   19ec8:	e35200ef 	cmp	r2, #239	; 0xef
   19ecc:	11a02003 	movne	r2, r3
   19ed0:	03832001 	orreq	r2, r3, #1
   19ed4:	e284301c 	add	r3, r4, #28
   19ed8:	e0811203 	add	r1, r1, r3, lsl #4
   19edc:	e3520000 	cmp	r2, #0
   19ee0:	e2410f7e 	sub	r0, r1, #504	; 0x1f8
   19ee4:	e2844001 	add	r4, r4, #1
   19ee8:	1a00003a 	bne	19fd8 <CPartitionManager::Initialize()+0x1d0>
   19eec:	e15020b2 	ldrh	r2, [r0, #-2]
   19ef0:	e1d000b0 	ldrh	r0, [r0]
   19ef4:	e2411f7d 	sub	r1, r1, #500	; 0x1f4
   19ef8:	e1922800 	orrs	r2, r2, r0, lsl #16
   19efc:	0a000035 	beq	19fd8 <CPartitionManager::Initialize()+0x1d0>
   19f00:	e15120b2 	ldrh	r2, [r1, #-2]
   19f04:	e1d110b0 	ldrh	r1, [r1]
   19f08:	e1922801 	orrs	r2, r2, r1, lsl #16
   19f0c:	0a000031 	beq	19fd8 <CPartitionManager::Initialize()+0x1d0>
   19f10:	e5952000 	ldr	r2, [r5]
   19f14:	e1a0a006 	mov	sl, r6
   19f18:	e3520000 	cmp	r2, #0
   19f1c:	e2899001 	add	r9, r9, #1
   19f20:	0a000005 	beq	19f3c <CPartitionManager::Initialize()+0x134>
   19f24:	e3a02070 	mov	r2, #112	; 0x70
   19f28:	e59f1114 	ldr	r1, [pc, #276]	; 1a044 <CPartitionManager::Initialize()+0x23c>
   19f2c:	e59f0114 	ldr	r0, [pc, #276]	; 1a048 <CPartitionManager::Initialize()+0x240>
   19f30:	e58d3000 	str	r3, [sp]
   19f34:	eb000197 	bl	1a598 <assertion_failed>
   19f38:	e59d3000 	ldr	r3, [sp]
   19f3c:	e3a00020 	mov	r0, #32
   19f40:	e58d3004 	str	r3, [sp, #4]
   19f44:	eb002264 	bl	228dc <operator new(unsigned int)>
   19f48:	e59d3004 	ldr	r3, [sp, #4]
   19f4c:	e28d2f86 	add	r2, sp, #536	; 0x218
   19f50:	e0823203 	add	r3, r2, r3, lsl #4
   19f54:	e58d0000 	str	r0, [sp]
   19f58:	e2432f7d 	sub	r2, r3, #500	; 0x1f4
   19f5c:	e2431f7e 	sub	r1, r3, #504	; 0x1f8
   19f60:	e1d2c0b0 	ldrh	ip, [r2]
   19f64:	e15230b2 	ldrh	r3, [r2, #-2]
   19f68:	e15120b2 	ldrh	r2, [r1, #-2]
   19f6c:	e1d110b0 	ldrh	r1, [r1]
   19f70:	e183380c 	orr	r3, r3, ip, lsl #16
   19f74:	e1822801 	orr	r2, r2, r1, lsl #16
   19f78:	e49a1004 	ldr	r1, [sl], #4
   19f7c:	eb0000d8 	bl	1a2e4 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)>
   19f80:	e59d3000 	ldr	r3, [sp]
   19f84:	e28d0008 	add	r0, sp, #8
   19f88:	e5853000 	str	r3, [r5]
   19f8c:	eb00163e 	bl	1f88c <CString::CString()>
   19f90:	e1a0000a 	mov	r0, sl
   19f94:	eb001652 	bl	1f8e4 <CString::operator char const*() const>
   19f98:	e1a03009 	mov	r3, r9
   19f9c:	e1a02000 	mov	r2, r0
   19fa0:	e1a0100b 	mov	r1, fp
   19fa4:	e28d0008 	add	r0, sp, #8
   19fa8:	eb001a25 	bl	20844 <CString::Format(char const*, ...)>
   19fac:	eb000472 	bl	1b17c <CDeviceNameService::Get()>
   19fb0:	e1a0a000 	mov	sl, r0
   19fb4:	e28d0008 	add	r0, sp, #8
   19fb8:	eb001649 	bl	1f8e4 <CString::operator char const*() const>
   19fbc:	e3a03001 	mov	r3, #1
   19fc0:	e1a01000 	mov	r1, r0
   19fc4:	e5952000 	ldr	r2, [r5]
   19fc8:	e1a0000a 	mov	r0, sl
   19fcc:	eb0003aa 	bl	1ae7c <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   19fd0:	e28d0008 	add	r0, sp, #8
   19fd4:	eb0015f9 	bl	1f7c0 <CString::~CString()>
   19fd8:	e3540004 	cmp	r4, #4
   19fdc:	e2855004 	add	r5, r5, #4
   19fe0:	1affffaf 	bne	19ea4 <CPartitionManager::Initialize()+0x9c>
   19fe4:	e3590000 	cmp	r9, #0
   19fe8:	13a00001 	movne	r0, #1
   19fec:	1affff96 	bne	19e4c <CPartitionManager::Initialize()+0x44>
   19ff0:	eb000b5b 	bl	1cd64 <CLogger::Get()>
   19ff4:	e59f3050 	ldr	r3, [pc, #80]	; 1a04c <CPartitionManager::Initialize()+0x244>
   19ff8:	e3a02002 	mov	r2, #2
   19ffc:	e59f1030 	ldr	r1, [pc, #48]	; 1a034 <CPartitionManager::Initialize()+0x22c>
   1a000:	eb000d00 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1a004:	e3a00001 	mov	r0, #1
   1a008:	e28ddf87 	add	sp, sp, #540	; 0x21c
   1a00c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a010:	eb000b53 	bl	1cd64 <CLogger::Get()>
   1a014:	e59f3034 	ldr	r3, [pc, #52]	; 1a050 <CPartitionManager::Initialize()+0x248>
   1a018:	e3a02002 	mov	r2, #2
   1a01c:	e59f1010 	ldr	r1, [pc, #16]	; 1a034 <CPartitionManager::Initialize()+0x22c>
   1a020:	eb000cf8 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1a024:	e3a00001 	mov	r0, #1
   1a028:	e28ddf87 	add	sp, sp, #540	; 0x21c
   1a02c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a030:	000287b8 	.word	0x000287b8
   1a034:	00028740 	.word	0x00028740
   1a038:	0000aa55 	.word	0x0000aa55
   1a03c:	00008021 	.word	0x00008021
   1a040:	0002878c 	.word	0x0002878c
   1a044:	0002875c 	.word	0x0002875c
   1a048:	00028774 	.word	0x00028774
   1a04c:	00028794 	.word	0x00028794
   1a050:	00028748 	.word	0x00028748

0001a054 <CPartition::Read(void*, unsigned int)>:
   1a054:	e5d03018 	ldrb	r3, [r0, #24]
   1a058:	e3530000 	cmp	r3, #0
   1a05c:	1a000021 	bne	1a0e8 <CPartition::Read(void*, unsigned int)+0x94>
   1a060:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a064:	e1c061d0 	ldrd	r6, [r0, #16]
   1a068:	e3a05000 	mov	r5, #0
   1a06c:	e3a09000 	mov	r9, #0
   1a070:	e59f4080 	ldr	r4, [pc, #128]	; 1a0f8 <CPartition::Read(void*, unsigned int)+0xa4>
   1a074:	e590800c 	ldr	r8, [r0, #12]
   1a078:	e0944002 	adds	r4, r4, r2
   1a07c:	e2a55000 	adc	r5, r5, #0
   1a080:	e0944006 	adds	r4, r4, r6
   1a084:	e0a55007 	adc	r5, r5, r7
   1a088:	e1a064a4 	lsr	r6, r4, #9
   1a08c:	e1a074a5 	lsr	r7, r5, #9
   1a090:	e1866b85 	orr	r6, r6, r5, lsl #23
   1a094:	e1570009 	cmp	r7, r9
   1a098:	01560008 	cmpeq	r6, r8
   1a09c:	8a000013 	bhi	1a0f0 <CPartition::Read(void*, unsigned int)+0x9c>
   1a0a0:	e1a04000 	mov	r4, r0
   1a0a4:	e5900004 	ldr	r0, [r0, #4]
   1a0a8:	e1a05002 	mov	r5, r2
   1a0ac:	e3500000 	cmp	r0, #0
   1a0b0:	e1a06001 	mov	r6, r1
   1a0b4:	0a000005 	beq	1a0d0 <CPartition::Read(void*, unsigned int)+0x7c>
   1a0b8:	e5903000 	ldr	r3, [r0]
   1a0bc:	e1a02005 	mov	r2, r5
   1a0c0:	e1a01006 	mov	r1, r6
   1a0c4:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a0c8:	e5933008 	ldr	r3, [r3, #8]
   1a0cc:	e12fff13 	bx	r3
   1a0d0:	e59f0024 	ldr	r0, [pc, #36]	; 1a0fc <CPartition::Read(void*, unsigned int)+0xa8>
   1a0d4:	e3a02035 	mov	r2, #53	; 0x35
   1a0d8:	e59f1020 	ldr	r1, [pc, #32]	; 1a100 <CPartition::Read(void*, unsigned int)+0xac>
   1a0dc:	eb00012d 	bl	1a598 <assertion_failed>
   1a0e0:	e5940004 	ldr	r0, [r4, #4]
   1a0e4:	eafffff3 	b	1a0b8 <CPartition::Read(void*, unsigned int)+0x64>
   1a0e8:	e3e00000 	mvn	r0, #0
   1a0ec:	e12fff1e 	bx	lr
   1a0f0:	e3e00000 	mvn	r0, #0
   1a0f4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a0f8:	000001ff 	.word	0x000001ff
   1a0fc:	0002475c 	.word	0x0002475c
   1a100:	000287e4 	.word	0x000287e4

0001a104 <CPartition::Write(void const*, unsigned int)>:
   1a104:	e5d03018 	ldrb	r3, [r0, #24]
   1a108:	e3530000 	cmp	r3, #0
   1a10c:	1a000021 	bne	1a198 <CPartition::Write(void const*, unsigned int)+0x94>
   1a110:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a114:	e1c061d0 	ldrd	r6, [r0, #16]
   1a118:	e3a05000 	mov	r5, #0
   1a11c:	e3a09000 	mov	r9, #0
   1a120:	e59f4080 	ldr	r4, [pc, #128]	; 1a1a8 <CPartition::Write(void const*, unsigned int)+0xa4>
   1a124:	e590800c 	ldr	r8, [r0, #12]
   1a128:	e0944002 	adds	r4, r4, r2
   1a12c:	e2a55000 	adc	r5, r5, #0
   1a130:	e0944006 	adds	r4, r4, r6
   1a134:	e0a55007 	adc	r5, r5, r7
   1a138:	e1a064a4 	lsr	r6, r4, #9
   1a13c:	e1a074a5 	lsr	r7, r5, #9
   1a140:	e1866b85 	orr	r6, r6, r5, lsl #23
   1a144:	e1570009 	cmp	r7, r9
   1a148:	01560008 	cmpeq	r6, r8
   1a14c:	8a000013 	bhi	1a1a0 <CPartition::Write(void const*, unsigned int)+0x9c>
   1a150:	e1a04000 	mov	r4, r0
   1a154:	e5900004 	ldr	r0, [r0, #4]
   1a158:	e1a05002 	mov	r5, r2
   1a15c:	e3500000 	cmp	r0, #0
   1a160:	e1a06001 	mov	r6, r1
   1a164:	0a000005 	beq	1a180 <CPartition::Write(void const*, unsigned int)+0x7c>
   1a168:	e5903000 	ldr	r3, [r0]
   1a16c:	e1a02005 	mov	r2, r5
   1a170:	e1a01006 	mov	r1, r6
   1a174:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a178:	e593300c 	ldr	r3, [r3, #12]
   1a17c:	e12fff13 	bx	r3
   1a180:	e59f0024 	ldr	r0, [pc, #36]	; 1a1ac <CPartition::Write(void const*, unsigned int)+0xa8>
   1a184:	e3a02047 	mov	r2, #71	; 0x47
   1a188:	e59f1020 	ldr	r1, [pc, #32]	; 1a1b0 <CPartition::Write(void const*, unsigned int)+0xac>
   1a18c:	eb000101 	bl	1a598 <assertion_failed>
   1a190:	e5940004 	ldr	r0, [r4, #4]
   1a194:	eafffff3 	b	1a168 <CPartition::Write(void const*, unsigned int)+0x64>
   1a198:	e3e00000 	mvn	r0, #0
   1a19c:	e12fff1e 	bx	lr
   1a1a0:	e3e00000 	mvn	r0, #0
   1a1a4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a1a8:	000001ff 	.word	0x000001ff
   1a1ac:	0002475c 	.word	0x0002475c
   1a1b0:	000287e4 	.word	0x000287e4

0001a1b4 <CPartition::~CPartition()>:
   1a1b4:	e3a02000 	mov	r2, #0
   1a1b8:	e92d4010 	push	{r4, lr}
   1a1bc:	e1a04000 	mov	r4, r0
   1a1c0:	e59f3010 	ldr	r3, [pc, #16]	; 1a1d8 <CPartition::~CPartition()+0x24>
   1a1c4:	e5802004 	str	r2, [r0, #4]
   1a1c8:	e5803000 	str	r3, [r0]
   1a1cc:	eb0002ed 	bl	1ad88 <CDevice::~CDevice()>
   1a1d0:	e1a00004 	mov	r0, r4
   1a1d4:	e8bd8010 	pop	{r4, pc}
   1a1d8:	000287d0 	.word	0x000287d0

0001a1dc <CPartition::~CPartition()>:
   1a1dc:	e3a02000 	mov	r2, #0
   1a1e0:	e92d4010 	push	{r4, lr}
   1a1e4:	e1a04000 	mov	r4, r0
   1a1e8:	e59f301c 	ldr	r3, [pc, #28]	; 1a20c <CPartition::~CPartition()+0x30>
   1a1ec:	e5802004 	str	r2, [r0, #4]
   1a1f0:	e5803000 	str	r3, [r0]
   1a1f4:	eb0002e3 	bl	1ad88 <CDevice::~CDevice()>
   1a1f8:	e1a00004 	mov	r0, r4
   1a1fc:	e3a01020 	mov	r1, #32
   1a200:	eb0021b9 	bl	228ec <operator delete(void*, unsigned int)>
   1a204:	e1a00004 	mov	r0, r4
   1a208:	e8bd8010 	pop	{r4, pc}
   1a20c:	000287d0 	.word	0x000287d0

0001a210 <CPartition::Seek(unsigned long long)>:
   1a210:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a214:	e3a05000 	mov	r5, #0
   1a218:	e3a01001 	mov	r1, #1
   1a21c:	e59f40b4 	ldr	r4, [pc, #180]	; 1a2d8 <CPartition::Seek(unsigned long long)+0xc8>
   1a220:	e0055003 	and	r5, r5, r3
   1a224:	e0044002 	and	r4, r4, r2
   1a228:	e194c005 	orrs	ip, r4, r5
   1a22c:	e5c01018 	strb	r1, [r0, #24]
   1a230:	0a000002 	beq	1a240 <CPartition::Seek(unsigned long long)+0x30>
   1a234:	e3e00000 	mvn	r0, #0
   1a238:	e1a01000 	mov	r1, r0
   1a23c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a240:	e3a07000 	mov	r7, #0
   1a244:	e590600c 	ldr	r6, [r0, #12]
   1a248:	e1a044a2 	lsr	r4, r2, #9
   1a24c:	e1a054a3 	lsr	r5, r3, #9
   1a250:	e1844b83 	orr	r4, r4, r3, lsl #23
   1a254:	e1550007 	cmp	r5, r7
   1a258:	01540006 	cmpeq	r4, r6
   1a25c:	2afffff4 	bcs	1a234 <CPartition::Seek(unsigned long long)+0x24>
   1a260:	e1a07003 	mov	r7, r3
   1a264:	e1a04000 	mov	r4, r0
   1a268:	e9900009 	ldmib	r0, {r0, r3}
   1a26c:	e1a08483 	lsl	r8, r3, #9
   1a270:	e0988002 	adds	r8, r8, r2
   1a274:	e1a09ba3 	lsr	r9, r3, #23
   1a278:	e0a99007 	adc	r9, r9, r7
   1a27c:	e3500000 	cmp	r0, #0
   1a280:	e1a06002 	mov	r6, r2
   1a284:	0a00000d 	beq	1a2c0 <CPartition::Seek(unsigned long long)+0xb0>
   1a288:	e5903000 	ldr	r3, [r0]
   1a28c:	e1a02008 	mov	r2, r8
   1a290:	e5931010 	ldr	r1, [r3, #16]
   1a294:	e1a03009 	mov	r3, r9
   1a298:	e12fff31 	blx	r1
   1a29c:	e1590001 	cmp	r9, r1
   1a2a0:	01580000 	cmpeq	r8, r0
   1a2a4:	1affffe2 	bne	1a234 <CPartition::Seek(unsigned long long)+0x24>
   1a2a8:	e3a03000 	mov	r3, #0
   1a2ac:	e1a00006 	mov	r0, r6
   1a2b0:	e1a01007 	mov	r1, r7
   1a2b4:	e1c461f0 	strd	r6, [r4, #16]
   1a2b8:	e5c43018 	strb	r3, [r4, #24]
   1a2bc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a2c0:	e59f0014 	ldr	r0, [pc, #20]	; 1a2dc <CPartition::Seek(unsigned long long)+0xcc>
   1a2c4:	e3a02059 	mov	r2, #89	; 0x59
   1a2c8:	e59f1010 	ldr	r1, [pc, #16]	; 1a2e0 <CPartition::Seek(unsigned long long)+0xd0>
   1a2cc:	eb0000b1 	bl	1a598 <assertion_failed>
   1a2d0:	e5940004 	ldr	r0, [r4, #4]
   1a2d4:	eaffffeb 	b	1a288 <CPartition::Seek(unsigned long long)+0x78>
   1a2d8:	000001ff 	.word	0x000001ff
   1a2dc:	0002475c 	.word	0x0002475c
   1a2e0:	000287e4 	.word	0x000287e4

0001a2e4 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)>:
   1a2e4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a2e8:	e1a05001 	mov	r5, r1
   1a2ec:	e1a04000 	mov	r4, r0
   1a2f0:	e1a09002 	mov	r9, r2
   1a2f4:	e1a08003 	mov	r8, r3
   1a2f8:	e3a06000 	mov	r6, #0
   1a2fc:	eb0002ad 	bl	1adb8 <CDevice::CDevice()>
   1a300:	e3a07000 	mov	r7, #0
   1a304:	e3a01001 	mov	r1, #1
   1a308:	e59f0038 	ldr	r0, [pc, #56]	; 1a348 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)+0x64>
   1a30c:	e3550000 	cmp	r5, #0
   1a310:	e9840220 	stmib	r4, {r5, r9}
   1a314:	e584800c 	str	r8, [r4, #12]
   1a318:	e5840000 	str	r0, [r4]
   1a31c:	e1c461f0 	strd	r6, [r4, #16]
   1a320:	e5c41018 	strb	r1, [r4, #24]
   1a324:	0a000001 	beq	1a330 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)+0x4c>
   1a328:	e1a00004 	mov	r0, r4
   1a32c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a330:	e3a0201f 	mov	r2, #31
   1a334:	e59f1010 	ldr	r1, [pc, #16]	; 1a34c <CPartition::CPartition(CDevice*, unsigned int, unsigned int)+0x68>
   1a338:	e59f0010 	ldr	r0, [pc, #16]	; 1a350 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)+0x6c>
   1a33c:	eb000095 	bl	1a598 <assertion_failed>
   1a340:	e1a00004 	mov	r0, r4
   1a344:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a348:	000287d0 	.word	0x000287d0
   1a34c:	000287e4 	.word	0x000287e4
   1a350:	0002475c 	.word	0x0002475c

0001a354 <CActLED::~CActLED()>:
   1a354:	e3a02000 	mov	r2, #0
   1a358:	e59f3004 	ldr	r3, [pc, #4]	; 1a364 <CActLED::~CActLED()+0x10>
   1a35c:	e5832000 	str	r2, [r3]
   1a360:	e12fff1e 	bx	lr
   1a364:	0002b278 	.word	0x0002b278

0001a368 <CActLED::On()>:
   1a368:	e5903000 	ldr	r3, [r0]
   1a36c:	e3530000 	cmp	r3, #0
   1a370:	0a000002 	beq	1a380 <CActLED::On()+0x18>
   1a374:	e5d01008 	ldrb	r1, [r0, #8]
   1a378:	e1a00003 	mov	r0, r3
   1a37c:	ea000459 	b	1b4e8 <CGPIOPin::Write(unsigned int)>
   1a380:	e5903004 	ldr	r3, [r0, #4]
   1a384:	e3530000 	cmp	r3, #0
   1a388:	012fff1e 	bxeq	lr
   1a38c:	e5d01008 	ldrb	r1, [r0, #8]
   1a390:	e1a00003 	mov	r0, r3
   1a394:	ea001eec 	b	21f4c <CVirtualGPIOPin::Write(unsigned int)>

0001a398 <CActLED::Off()>:
   1a398:	e5903000 	ldr	r3, [r0]
   1a39c:	e3530000 	cmp	r3, #0
   1a3a0:	0a000003 	beq	1a3b4 <CActLED::Off()+0x1c>
   1a3a4:	e5d01008 	ldrb	r1, [r0, #8]
   1a3a8:	e1a00003 	mov	r0, r3
   1a3ac:	e2211001 	eor	r1, r1, #1
   1a3b0:	ea00044c 	b	1b4e8 <CGPIOPin::Write(unsigned int)>
   1a3b4:	e5903004 	ldr	r3, [r0, #4]
   1a3b8:	e3530000 	cmp	r3, #0
   1a3bc:	012fff1e 	bxeq	lr
   1a3c0:	e5d01008 	ldrb	r1, [r0, #8]
   1a3c4:	e1a00003 	mov	r0, r3
   1a3c8:	e2211001 	eor	r1, r1, #1
   1a3cc:	ea001ede 	b	21f4c <CVirtualGPIOPin::Write(unsigned int)>

0001a3d0 <CActLED::CActLED()>:
   1a3d0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1a3d4:	e3a05000 	mov	r5, #0
   1a3d8:	e1a04000 	mov	r4, r0
   1a3dc:	e24dd024 	sub	sp, sp, #36	; 0x24
   1a3e0:	e59f314c 	ldr	r3, [pc, #332]	; 1a534 <CActLED::CActLED()+0x164>
   1a3e4:	e5805000 	str	r5, [r0]
   1a3e8:	e5805004 	str	r5, [r0, #4]
   1a3ec:	e28d000c 	add	r0, sp, #12
   1a3f0:	e5834000 	str	r4, [r3]
   1a3f4:	eb00008b 	bl	1a628 <CBcmPropertyTags::CBcmPropertyTags()>
   1a3f8:	e3a03010 	mov	r3, #16
   1a3fc:	e58d5000 	str	r5, [sp]
   1a400:	e28d000c 	add	r0, sp, #12
   1a404:	e08d2003 	add	r2, sp, r3
   1a408:	e59f1128 	ldr	r1, [pc, #296]	; 1a538 <CActLED::CActLED()+0x168>
   1a40c:	eb0000dc 	bl	1a784 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   1a410:	e2506000 	subs	r6, r0, #0
   1a414:	0a00001f 	beq	1a498 <CActLED::CActLED()+0xc8>
   1a418:	e59d301c 	ldr	r3, [sp, #28]
   1a41c:	e3130502 	tst	r3, #8388608	; 0x800000
   1a420:	0a000021 	beq	1a4ac <CActLED::CActLED()+0xdc>
   1a424:	e1a03223 	lsr	r3, r3, #4
   1a428:	e6ef3073 	uxtb	r3, r3
   1a42c:	e243200d 	sub	r2, r3, #13
   1a430:	e3530008 	cmp	r3, #8
   1a434:	13520001 	cmpne	r2, #1
   1a438:	93a01001 	movls	r1, #1
   1a43c:	83a01000 	movhi	r1, #0
   1a440:	e353000c 	cmp	r3, #12
   1a444:	13530009 	cmpne	r3, #9
   1a448:	03a06001 	moveq	r6, #1
   1a44c:	13a06000 	movne	r6, #0
   1a450:	e3530001 	cmp	r3, #1
   1a454:	9a000017 	bls	1a4b8 <CActLED::CActLED()+0xe8>
   1a458:	e3510000 	cmp	r1, #0
   1a45c:	0a00002a 	beq	1a50c <CActLED::CActLED()+0x13c>
   1a460:	e3520001 	cmp	r2, #1
   1a464:	8a000020 	bhi	1a4ec <CActLED::CActLED()+0x11c>
   1a468:	e3a00028 	mov	r0, #40	; 0x28
   1a46c:	eb00211a 	bl	228dc <operator new(unsigned int)>
   1a470:	e3a02001 	mov	r2, #1
   1a474:	e1a07000 	mov	r7, r0
   1a478:	e1a03005 	mov	r3, r5
   1a47c:	e3a0101d 	mov	r1, #29
   1a480:	e0266002 	eor	r6, r6, r2
   1a484:	eb0006b9 	bl	1bf70 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
   1a488:	e5847000 	str	r7, [r4]
   1a48c:	e5c46008 	strb	r6, [r4, #8]
   1a490:	e1a00004 	mov	r0, r4
   1a494:	ebffffbf 	bl	1a398 <CActLED::Off()>
   1a498:	e28d000c 	add	r0, sp, #12
   1a49c:	eb000067 	bl	1a640 <CBcmPropertyTags::~CBcmPropertyTags()>
   1a4a0:	e1a00004 	mov	r0, r4
   1a4a4:	e28dd024 	add	sp, sp, #36	; 0x24
   1a4a8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1a4ac:	e6ff3073 	uxth	r3, r3
   1a4b0:	e353000f 	cmp	r3, #15
   1a4b4:	8a000015 	bhi	1a510 <CActLED::CActLED()+0x140>
   1a4b8:	e3a00028 	mov	r0, #40	; 0x28
   1a4bc:	eb002106 	bl	228dc <operator new(unsigned int)>
   1a4c0:	e3a03000 	mov	r3, #0
   1a4c4:	e3a02001 	mov	r2, #1
   1a4c8:	e3a01010 	mov	r1, #16
   1a4cc:	e1a05000 	mov	r5, r0
   1a4d0:	eb0006a6 	bl	1bf70 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
   1a4d4:	e3a03000 	mov	r3, #0
   1a4d8:	e5845000 	str	r5, [r4]
   1a4dc:	e5c43008 	strb	r3, [r4, #8]
   1a4e0:	e1a00004 	mov	r0, r4
   1a4e4:	ebffffab 	bl	1a398 <CActLED::Off()>
   1a4e8:	eaffffea 	b	1a498 <CActLED::CActLED()+0xc8>
   1a4ec:	e3a00010 	mov	r0, #16
   1a4f0:	eb0020f9 	bl	228dc <operator new(unsigned int)>
   1a4f4:	e1a07000 	mov	r7, r0
   1a4f8:	e1a01005 	mov	r1, r5
   1a4fc:	eb001e41 	bl	21e08 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)>
   1a500:	e2266001 	eor	r6, r6, #1
   1a504:	e5847004 	str	r7, [r4, #4]
   1a508:	eaffffdf 	b	1a48c <CActLED::CActLED()+0xbc>
   1a50c:	e2266001 	eor	r6, r6, #1
   1a510:	e3a00028 	mov	r0, #40	; 0x28
   1a514:	eb0020f0 	bl	228dc <operator new(unsigned int)>
   1a518:	e1a05000 	mov	r5, r0
   1a51c:	e3a03000 	mov	r3, #0
   1a520:	e3a02001 	mov	r2, #1
   1a524:	e3a0102f 	mov	r1, #47	; 0x2f
   1a528:	eb000690 	bl	1bf70 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
   1a52c:	e5845000 	str	r5, [r4]
   1a530:	eaffffd5 	b	1a48c <CActLED::CActLED()+0xbc>
   1a534:	0002b278 	.word	0x0002b278
   1a538:	00010002 	.word	0x00010002

0001a53c <CActLED::Blink(unsigned int, unsigned int, unsigned int)>:
   1a53c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1a540:	e2516000 	subs	r6, r1, #0
   1a544:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   1a548:	e1a08003 	mov	r8, r3
   1a54c:	e1a07002 	mov	r7, r2
   1a550:	e1a05000 	mov	r5, r0
   1a554:	e3a04001 	mov	r4, #1
   1a558:	e1a00005 	mov	r0, r5
   1a55c:	ebffff81 	bl	1a368 <CActLED::On()>
   1a560:	e1a00007 	mov	r0, r7
   1a564:	eb001c26 	bl	21604 <CTimer::SimpleMsDelay(unsigned int)>
   1a568:	e1a00005 	mov	r0, r5
   1a56c:	ebffff89 	bl	1a398 <CActLED::Off()>
   1a570:	e2844001 	add	r4, r4, #1
   1a574:	e1a00008 	mov	r0, r8
   1a578:	eb001c21 	bl	21604 <CTimer::SimpleMsDelay(unsigned int)>
   1a57c:	e1560004 	cmp	r6, r4
   1a580:	2afffff4 	bcs	1a558 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x1c>
   1a584:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0001a588 <CActLED::Get()>:
   1a588:	e59f3004 	ldr	r3, [pc, #4]	; 1a594 <CActLED::Get()+0xc>
   1a58c:	e5930000 	ldr	r0, [r3]
   1a590:	e12fff1e 	bx	lr
   1a594:	0002b278 	.word	0x0002b278

0001a598 <assertion_failed>:
   1a598:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1a59c:	e1a05000 	mov	r5, r0
   1a5a0:	e24dd01c 	sub	sp, sp, #28
   1a5a4:	e1a06001 	mov	r6, r1
   1a5a8:	e1a07002 	mov	r7, r2
   1a5ac:	e1a0400d 	mov	r4, sp
   1a5b0:	eb0007f4 	bl	1c588 <CInterruptSystem::DisableFIQ()>
   1a5b4:	f1080040 	cpsie	f
   1a5b8:	e28d0008 	add	r0, sp, #8
   1a5bc:	eb0014b2 	bl	1f88c <CString::CString()>
   1a5c0:	e1a03007 	mov	r3, r7
   1a5c4:	e1a02006 	mov	r2, r6
   1a5c8:	e28d0008 	add	r0, sp, #8
   1a5cc:	e59f104c 	ldr	r1, [pc, #76]	; 1a620 <assertion_failed+0x88>
   1a5d0:	eb00189b 	bl	20844 <CString::Format(char const*, ...)>
   1a5d4:	e28d0008 	add	r0, sp, #8
   1a5d8:	eb0014c1 	bl	1f8e4 <CString::operator char const*() const>
   1a5dc:	e1a01000 	mov	r1, r0
   1a5e0:	e1a00004 	mov	r0, r4
   1a5e4:	eb0001be 	bl	1ace4 <debug_stacktrace(unsigned int const*, char const*)>
   1a5e8:	eb0009dd 	bl	1cd64 <CLogger::Get()>
   1a5ec:	e1a04000 	mov	r4, r0
   1a5f0:	e28d0008 	add	r0, sp, #8
   1a5f4:	eb0014ba 	bl	1f8e4 <CString::operator char const*() const>
   1a5f8:	e59f3024 	ldr	r3, [pc, #36]	; 1a624 <assertion_failed+0x8c>
   1a5fc:	e1a01000 	mov	r1, r0
   1a600:	e3a02000 	mov	r2, #0
   1a604:	e1a00004 	mov	r0, r4
   1a608:	e58d5000 	str	r5, [sp]
   1a60c:	eb000b7d 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1a610:	e28d0008 	add	r0, sp, #8
   1a614:	eb001469 	bl	1f7c0 <CString::~CString()>
   1a618:	e28dd01c 	add	sp, sp, #28
   1a61c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1a620:	000287f4 	.word	0x000287f4
   1a624:	000287fc 	.word	0x000287fc

0001a628 <CBcmPropertyTags::CBcmPropertyTags()>:
   1a628:	e92d4010 	push	{r4, lr}
   1a62c:	e1a04000 	mov	r4, r0
   1a630:	e3a01008 	mov	r1, #8
   1a634:	eb00235a 	bl	233a4 <CBcmMailBox::CBcmMailBox(unsigned int)>
   1a638:	e1a00004 	mov	r0, r4
   1a63c:	e8bd8010 	pop	{r4, pc}

0001a640 <CBcmPropertyTags::~CBcmPropertyTags()>:
   1a640:	e92d4010 	push	{r4, lr}
   1a644:	e1a04000 	mov	r4, r0
   1a648:	eb002357 	bl	233ac <CBcmMailBox::~CBcmMailBox()>
   1a64c:	e1a00004 	mov	r0, r4
   1a650:	e8bd8010 	pop	{r4, pc}

0001a654 <CBcmPropertyTags::GetTags(void*, unsigned int)>:
   1a654:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a658:	e2519000 	subs	r9, r1, #0
   1a65c:	e1a0a000 	mov	sl, r0
   1a660:	e1a07002 	mov	r7, r2
   1a664:	0a00003d 	beq	1a760 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x10c>
   1a668:	e357000f 	cmp	r7, #15
   1a66c:	9a000036 	bls	1a74c <CBcmPropertyTags::GetTags(void*, unsigned int)+0xf8>
   1a670:	e287600c 	add	r6, r7, #12
   1a674:	e3160003 	tst	r6, #3
   1a678:	1a00002e 	bne	1a738 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xe4>
   1a67c:	e3a00000 	mov	r0, #0
   1a680:	eb002004 	bl	22698 <CMemorySystem::GetCoherentPage(unsigned int)>
   1a684:	e3a05000 	mov	r5, #0
   1a688:	e1a04000 	mov	r4, r0
   1a68c:	e1a01426 	lsr	r1, r6, #8
   1a690:	e1a02826 	lsr	r2, r6, #16
   1a694:	e1a03c26 	lsr	r3, r6, #24
   1a698:	e2808008 	add	r8, r0, #8
   1a69c:	e5c06000 	strb	r6, [r0]
   1a6a0:	e5c01001 	strb	r1, [r0, #1]
   1a6a4:	e5c02002 	strb	r2, [r0, #2]
   1a6a8:	e5c03003 	strb	r3, [r0, #3]
   1a6ac:	e1a02007 	mov	r2, r7
   1a6b0:	e1a00008 	mov	r0, r8
   1a6b4:	e5c45004 	strb	r5, [r4, #4]
   1a6b8:	e5c45005 	strb	r5, [r4, #5]
   1a6bc:	e5c45006 	strb	r5, [r4, #6]
   1a6c0:	e5c45007 	strb	r5, [r4, #7]
   1a6c4:	e1a01009 	mov	r1, r9
   1a6c8:	eb001d87 	bl	21cec <memcpy>
   1a6cc:	e7885007 	str	r5, [r8, r7]
   1a6d0:	ee075f9a 	mcr	15, 0, r5, cr7, cr10, {4}
   1a6d4:	e3c46103 	bic	r6, r4, #-1073741824	; 0xc0000000
   1a6d8:	e3866101 	orr	r6, r6, #1073741824	; 0x40000000
   1a6dc:	e1a0000a 	mov	r0, sl
   1a6e0:	e1a01006 	mov	r1, r6
   1a6e4:	eb002360 	bl	2346c <CBcmMailBox::WriteRead(unsigned int)>
   1a6e8:	e1560000 	cmp	r6, r0
   1a6ec:	0a000001 	beq	1a6f8 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xa4>
   1a6f0:	e3a00000 	mov	r0, #0
   1a6f4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a6f8:	ee075fba 	mcr	15, 0, r5, cr7, cr10, {5}
   1a6fc:	e5d42005 	ldrb	r2, [r4, #5]
   1a700:	e5d43004 	ldrb	r3, [r4, #4]
   1a704:	e5d41006 	ldrb	r1, [r4, #6]
   1a708:	e1833402 	orr	r3, r3, r2, lsl #8
   1a70c:	e5d42007 	ldrb	r2, [r4, #7]
   1a710:	e1833801 	orr	r3, r3, r1, lsl #16
   1a714:	e1833c02 	orr	r3, r3, r2, lsl #24
   1a718:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
   1a71c:	1afffff3 	bne	1a6f0 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x9c>
   1a720:	e1a02007 	mov	r2, r7
   1a724:	e1a01008 	mov	r1, r8
   1a728:	e1a00009 	mov	r0, r9
   1a72c:	eb001d6e 	bl	21cec <memcpy>
   1a730:	e3a00001 	mov	r0, #1
   1a734:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a738:	e3a02053 	mov	r2, #83	; 0x53
   1a73c:	e59f1030 	ldr	r1, [pc, #48]	; 1a774 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x120>
   1a740:	e59f0030 	ldr	r0, [pc, #48]	; 1a778 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x124>
   1a744:	ebffff93 	bl	1a598 <assertion_failed>
   1a748:	eaffffcb 	b	1a67c <CBcmPropertyTags::GetTags(void*, unsigned int)+0x28>
   1a74c:	e3a02051 	mov	r2, #81	; 0x51
   1a750:	e59f101c 	ldr	r1, [pc, #28]	; 1a774 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x120>
   1a754:	e59f0020 	ldr	r0, [pc, #32]	; 1a77c <CBcmPropertyTags::GetTags(void*, unsigned int)+0x128>
   1a758:	ebffff8e 	bl	1a598 <assertion_failed>
   1a75c:	eaffffc3 	b	1a670 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x1c>
   1a760:	e3a02050 	mov	r2, #80	; 0x50
   1a764:	e59f1008 	ldr	r1, [pc, #8]	; 1a774 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x120>
   1a768:	e59f0010 	ldr	r0, [pc, #16]	; 1a780 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x12c>
   1a76c:	ebffff89 	bl	1a598 <assertion_failed>
   1a770:	eaffffbc 	b	1a668 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x14>
   1a774:	00028814 	.word	0x00028814
   1a778:	00028860 	.word	0x00028860
   1a77c:	00028834 	.word	0x00028834
   1a780:	00028828 	.word	0x00028828

0001a784 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>:
   1a784:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1a788:	e2524000 	subs	r4, r2, #0
   1a78c:	e1a08000 	mov	r8, r0
   1a790:	e1a06001 	mov	r6, r1
   1a794:	e1a07003 	mov	r7, r3
   1a798:	e59d5018 	ldr	r5, [sp, #24]
   1a79c:	0a000038 	beq	1a884 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x100>
   1a7a0:	e357000f 	cmp	r7, #15
   1a7a4:	9a000031 	bls	1a870 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xec>
   1a7a8:	e3c52102 	bic	r2, r5, #-2147483648	; 0x80000000
   1a7ac:	e247100c 	sub	r1, r7, #12
   1a7b0:	e1a03422 	lsr	r3, r2, #8
   1a7b4:	e1a0c822 	lsr	ip, r2, #16
   1a7b8:	e5c43009 	strb	r3, [r4, #9]
   1a7bc:	e1a03421 	lsr	r3, r1, #8
   1a7c0:	e1a0e821 	lsr	lr, r1, #16
   1a7c4:	e5c42008 	strb	r2, [r4, #8]
   1a7c8:	e5c46000 	strb	r6, [r4]
   1a7cc:	e1a02c22 	lsr	r2, r2, #24
   1a7d0:	e5c4c00a 	strb	ip, [r4, #10]
   1a7d4:	e5c41004 	strb	r1, [r4, #4]
   1a7d8:	e1a0cc21 	lsr	ip, r1, #24
   1a7dc:	e5c43005 	strb	r3, [r4, #5]
   1a7e0:	e1a01426 	lsr	r1, r6, #8
   1a7e4:	e1a03826 	lsr	r3, r6, #16
   1a7e8:	e1a06c26 	lsr	r6, r6, #24
   1a7ec:	e5c4200b 	strb	r2, [r4, #11]
   1a7f0:	e5c41001 	strb	r1, [r4, #1]
   1a7f4:	e1a00008 	mov	r0, r8
   1a7f8:	e1a02007 	mov	r2, r7
   1a7fc:	e5c4e006 	strb	lr, [r4, #6]
   1a800:	e5c4c007 	strb	ip, [r4, #7]
   1a804:	e5c43002 	strb	r3, [r4, #2]
   1a808:	e5c46003 	strb	r6, [r4, #3]
   1a80c:	e1a01004 	mov	r1, r4
   1a810:	ebffff8f 	bl	1a654 <CBcmPropertyTags::GetTags(void*, unsigned int)>
   1a814:	e3500000 	cmp	r0, #0
   1a818:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   1a81c:	e5d43009 	ldrb	r3, [r4, #9]
   1a820:	e5d40008 	ldrb	r0, [r4, #8]
   1a824:	e5d4200a 	ldrb	r2, [r4, #10]
   1a828:	e1800403 	orr	r0, r0, r3, lsl #8
   1a82c:	e5d4300b 	ldrb	r3, [r4, #11]
   1a830:	e1800802 	orr	r0, r0, r2, lsl #16
   1a834:	e1900c03 	orrs	r0, r0, r3, lsl #24
   1a838:	4a000001 	bmi	1a844 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xc0>
   1a83c:	e3a00000 	mov	r0, #0
   1a840:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1a844:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
   1a848:	e1a01420 	lsr	r1, r0, #8
   1a84c:	e1a02820 	lsr	r2, r0, #16
   1a850:	e1a03c20 	lsr	r3, r0, #24
   1a854:	e5c40008 	strb	r0, [r4, #8]
   1a858:	e2900000 	adds	r0, r0, #0
   1a85c:	e5c41009 	strb	r1, [r4, #9]
   1a860:	e5c4200a 	strb	r2, [r4, #10]
   1a864:	e5c4300b 	strb	r3, [r4, #11]
   1a868:	13a00001 	movne	r0, #1
   1a86c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1a870:	e3a02034 	mov	r2, #52	; 0x34
   1a874:	e59f101c 	ldr	r1, [pc, #28]	; 1a898 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x114>
   1a878:	e59f001c 	ldr	r0, [pc, #28]	; 1a89c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x118>
   1a87c:	ebffff45 	bl	1a598 <assertion_failed>
   1a880:	eaffffc8 	b	1a7a8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x24>
   1a884:	e3a02033 	mov	r2, #51	; 0x33
   1a888:	e59f1008 	ldr	r1, [pc, #8]	; 1a898 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x114>
   1a88c:	e59f000c 	ldr	r0, [pc, #12]	; 1a8a0 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x11c>
   1a890:	ebffff40 	bl	1a598 <assertion_failed>
   1a894:	eaffffc1 	b	1a7a0 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x1c>
   1a898:	00028814 	.word	0x00028814
   1a89c:	00028884 	.word	0x00028884
   1a8a0:	00028878 	.word	0x00028878

0001a8a4 <CClassAllocator::~CClassAllocator()>:
   1a8a4:	e3a03000 	mov	r3, #0
   1a8a8:	e92d4010 	push	{r4, lr}
   1a8ac:	e1a04000 	mov	r4, r0
   1a8b0:	e590000c 	ldr	r0, [r0, #12]
   1a8b4:	e5843010 	str	r3, [r4, #16]
   1a8b8:	e1500003 	cmp	r0, r3
   1a8bc:	0a000000 	beq	1a8c4 <CClassAllocator::~CClassAllocator()+0x20>
   1a8c0:	eb0020a8 	bl	22b68 <free>
   1a8c4:	e1a00004 	mov	r0, r4
   1a8c8:	e8bd8010 	pop	{r4, pc}

0001a8cc <CClassAllocator::Init(unsigned int, unsigned int)>:
   1a8cc:	e3510000 	cmp	r1, #0
   1a8d0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1a8d4:	e1a05000 	mov	r5, r0
   1a8d8:	03a00020 	moveq	r0, #32
   1a8dc:	1281001f 	addne	r0, r1, #31
   1a8e0:	13c0000f 	bicne	r0, r0, #15
   1a8e4:	e3520000 	cmp	r2, #0
   1a8e8:	e1a04002 	mov	r4, r2
   1a8ec:	e5850000 	str	r0, [r5]
   1a8f0:	0a00001c 	beq	1a968 <CClassAllocator::Init(unsigned int, unsigned int)+0x9c>
   1a8f4:	e5854004 	str	r4, [r5, #4]
   1a8f8:	e0000490 	mul	r0, r0, r4
   1a8fc:	eb00201b 	bl	22970 <malloc>
   1a900:	e3500000 	cmp	r0, #0
   1a904:	e585000c 	str	r0, [r5, #12]
   1a908:	0a000021 	beq	1a994 <CClassAllocator::Init(unsigned int, unsigned int)+0xc8>
   1a90c:	e310000f 	tst	r0, #15
   1a910:	1a00001a 	bne	1a980 <CClassAllocator::Init(unsigned int, unsigned int)+0xb4>
   1a914:	e595e004 	ldr	lr, [r5, #4]
   1a918:	e35e0000 	cmp	lr, #0
   1a91c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   1a920:	e595700c 	ldr	r7, [r5, #12]
   1a924:	e5954000 	ldr	r4, [r5]
   1a928:	e1a03007 	mov	r3, r7
   1a92c:	e5950010 	ldr	r0, [r5, #16]
   1a930:	e3a01000 	mov	r1, #0
   1a934:	e59f6060 	ldr	r6, [pc, #96]	; 1a99c <CClassAllocator::Init(unsigned int, unsigned int)+0xd0>
   1a938:	ea000000 	b	1a940 <CClassAllocator::Init(unsigned int, unsigned int)+0x74>
   1a93c:	e1a01002 	mov	r1, r2
   1a940:	e2812001 	add	r2, r1, #1
   1a944:	e152000e 	cmp	r2, lr
   1a948:	e583000c 	str	r0, [r3, #12]
   1a94c:	e5836000 	str	r6, [r3]
   1a950:	e1a00003 	mov	r0, r3
   1a954:	e0833004 	add	r3, r3, r4
   1a958:	1afffff7 	bne	1a93c <CClassAllocator::Init(unsigned int, unsigned int)+0x70>
   1a95c:	e0217194 	mla	r1, r4, r1, r7
   1a960:	e5851010 	str	r1, [r5, #16]
   1a964:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1a968:	e59f0030 	ldr	r0, [pc, #48]	; 1a9a0 <CClassAllocator::Init(unsigned int, unsigned int)+0xd4>
   1a96c:	e3a02055 	mov	r2, #85	; 0x55
   1a970:	e59f102c 	ldr	r1, [pc, #44]	; 1a9a4 <CClassAllocator::Init(unsigned int, unsigned int)+0xd8>
   1a974:	ebffff07 	bl	1a598 <assertion_failed>
   1a978:	e5950000 	ldr	r0, [r5]
   1a97c:	eaffffdc 	b	1a8f4 <CClassAllocator::Init(unsigned int, unsigned int)+0x28>
   1a980:	e3a0205f 	mov	r2, #95	; 0x5f
   1a984:	e59f1018 	ldr	r1, [pc, #24]	; 1a9a4 <CClassAllocator::Init(unsigned int, unsigned int)+0xd8>
   1a988:	e59f0018 	ldr	r0, [pc, #24]	; 1a9a8 <CClassAllocator::Init(unsigned int, unsigned int)+0xdc>
   1a98c:	ebffff01 	bl	1a598 <assertion_failed>
   1a990:	eaffffdf 	b	1a914 <CClassAllocator::Init(unsigned int, unsigned int)+0x48>
   1a994:	e5850004 	str	r0, [r5, #4]
   1a998:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1a99c:	4f425350 	.word	0x4f425350
   1a9a0:	000288c0 	.word	0x000288c0
   1a9a4:	000288ac 	.word	0x000288ac
   1a9a8:	000288d8 	.word	0x000288d8

0001a9ac <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>:
   1a9ac:	e92d4010 	push	{r4, lr}
   1a9b0:	e3a0c000 	mov	ip, #0
   1a9b4:	e3a0e001 	mov	lr, #1
   1a9b8:	e1a04000 	mov	r4, r0
   1a9bc:	e5803008 	str	r3, [r0, #8]
   1a9c0:	e580e018 	str	lr, [r0, #24]
   1a9c4:	e580c00c 	str	ip, [r0, #12]
   1a9c8:	e580c010 	str	ip, [r0, #16]
   1a9cc:	e5c0c014 	strb	ip, [r0, #20]
   1a9d0:	ebffffbd 	bl	1a8cc <CClassAllocator::Init(unsigned int, unsigned int)>
   1a9d4:	e1a00004 	mov	r0, r4
   1a9d8:	e8bd8010 	pop	{r4, pc}

0001a9dc <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>:
   1a9dc:	e92d4070 	push	{r4, r5, r6, lr}
   1a9e0:	e3a0c000 	mov	ip, #0
   1a9e4:	e3a0e001 	mov	lr, #1
   1a9e8:	e1a04000 	mov	r4, r0
   1a9ec:	e59d5010 	ldr	r5, [sp, #16]
   1a9f0:	e5803018 	str	r3, [r0, #24]
   1a9f4:	e5805008 	str	r5, [r0, #8]
   1a9f8:	e5c0e014 	strb	lr, [r0, #20]
   1a9fc:	e580c00c 	str	ip, [r0, #12]
   1aa00:	e580c010 	str	ip, [r0, #16]
   1aa04:	ebffffb0 	bl	1a8cc <CClassAllocator::Init(unsigned int, unsigned int)>
   1aa08:	e1a00004 	mov	r0, r4
   1aa0c:	e8bd8070 	pop	{r4, r5, r6, pc}

0001aa10 <CClassAllocator::Allocate()>:
   1aa10:	e92d4030 	push	{r4, r5, lr}
   1aa14:	e5d03014 	ldrb	r3, [r0, #20]
   1aa18:	e24dd00c 	sub	sp, sp, #12
   1aa1c:	e3530000 	cmp	r3, #0
   1aa20:	e1a05000 	mov	r5, r0
   1aa24:	0a000002 	beq	1aa34 <CClassAllocator::Allocate()+0x24>
   1aa28:	e5900018 	ldr	r0, [r0, #24]
   1aa2c:	e3500000 	cmp	r0, #0
   1aa30:	1a000019 	bne	1aa9c <CClassAllocator::Allocate()+0x8c>
   1aa34:	e5954010 	ldr	r4, [r5, #16]
   1aa38:	e3540000 	cmp	r4, #0
   1aa3c:	0a000021 	beq	1aac8 <CClassAllocator::Allocate()+0xb8>
   1aa40:	e59f30a4 	ldr	r3, [pc, #164]	; 1aaec <CClassAllocator::Allocate()+0xdc>
   1aa44:	e5942000 	ldr	r2, [r4]
   1aa48:	e1520003 	cmp	r2, r3
   1aa4c:	0a000003 	beq	1aa60 <CClassAllocator::Allocate()+0x50>
   1aa50:	e3a02082 	mov	r2, #130	; 0x82
   1aa54:	e59f1094 	ldr	r1, [pc, #148]	; 1aaf0 <CClassAllocator::Allocate()+0xe0>
   1aa58:	e59f0094 	ldr	r0, [pc, #148]	; 1aaf4 <CClassAllocator::Allocate()+0xe4>
   1aa5c:	ebfffecd 	bl	1a598 <assertion_failed>
   1aa60:	e3a03000 	mov	r3, #0
   1aa64:	e5d51014 	ldrb	r1, [r5, #20]
   1aa68:	e594200c 	ldr	r2, [r4, #12]
   1aa6c:	e1510003 	cmp	r1, r3
   1aa70:	e5852010 	str	r2, [r5, #16]
   1aa74:	e584300c 	str	r3, [r4, #12]
   1aa78:	1a000002 	bne	1aa88 <CClassAllocator::Allocate()+0x78>
   1aa7c:	e2840010 	add	r0, r4, #16
   1aa80:	e28dd00c 	add	sp, sp, #12
   1aa84:	e8bd8030 	pop	{r4, r5, pc}
   1aa88:	e5953018 	ldr	r3, [r5, #24]
   1aa8c:	e3530000 	cmp	r3, #0
   1aa90:	0afffff9 	beq	1aa7c <CClassAllocator::Allocate()+0x6c>
   1aa94:	eb001f63 	bl	22828 <LeaveCritical>
   1aa98:	eafffff7 	b	1aa7c <CClassAllocator::Allocate()+0x6c>
   1aa9c:	eb001f34 	bl	22774 <EnterCritical>
   1aaa0:	e5954010 	ldr	r4, [r5, #16]
   1aaa4:	e3540000 	cmp	r4, #0
   1aaa8:	1affffe4 	bne	1aa40 <CClassAllocator::Allocate()+0x30>
   1aaac:	e5d53014 	ldrb	r3, [r5, #20]
   1aab0:	e3530000 	cmp	r3, #0
   1aab4:	0a000003 	beq	1aac8 <CClassAllocator::Allocate()+0xb8>
   1aab8:	e5953018 	ldr	r3, [r5, #24]
   1aabc:	e3530000 	cmp	r3, #0
   1aac0:	0a000000 	beq	1aac8 <CClassAllocator::Allocate()+0xb8>
   1aac4:	eb001f57 	bl	22828 <LeaveCritical>
   1aac8:	eb0008a5 	bl	1cd64 <CLogger::Get()>
   1aacc:	e5953004 	ldr	r3, [r5, #4]
   1aad0:	e5951008 	ldr	r1, [r5, #8]
   1aad4:	e3a02000 	mov	r2, #0
   1aad8:	e58d3000 	str	r3, [sp]
   1aadc:	e59f3014 	ldr	r3, [pc, #20]	; 1aaf8 <CClassAllocator::Allocate()+0xe8>
   1aae0:	eb000a48 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1aae4:	e3a00000 	mov	r0, #0
   1aae8:	eaffffe4 	b	1aa80 <CClassAllocator::Allocate()+0x70>
   1aaec:	4f425350 	.word	0x4f425350
   1aaf0:	000288ac 	.word	0x000288ac
   1aaf4:	00028940 	.word	0x00028940
   1aaf8:	00028914 	.word	0x00028914

0001aafc <CClassAllocator::Free(void*)>:
   1aafc:	e92d4070 	push	{r4, r5, r6, lr}
   1ab00:	e2514000 	subs	r4, r1, #0
   1ab04:	e1a05000 	mov	r5, r0
   1ab08:	0a000025 	beq	1aba4 <CClassAllocator::Free(void*)+0xa8>
   1ab0c:	e59f30a4 	ldr	r3, [pc, #164]	; 1abb8 <CClassAllocator::Free(void*)+0xbc>
   1ab10:	e5142010 	ldr	r2, [r4, #-16]
   1ab14:	e2446010 	sub	r6, r4, #16
   1ab18:	e1520003 	cmp	r2, r3
   1ab1c:	0a000003 	beq	1ab30 <CClassAllocator::Free(void*)+0x34>
   1ab20:	e3a02094 	mov	r2, #148	; 0x94
   1ab24:	e59f1090 	ldr	r1, [pc, #144]	; 1abbc <CClassAllocator::Free(void*)+0xc0>
   1ab28:	e59f0090 	ldr	r0, [pc, #144]	; 1abc0 <CClassAllocator::Free(void*)+0xc4>
   1ab2c:	ebfffe99 	bl	1a598 <assertion_failed>
   1ab30:	e5143004 	ldr	r3, [r4, #-4]
   1ab34:	e3530000 	cmp	r3, #0
   1ab38:	0a000003 	beq	1ab4c <CClassAllocator::Free(void*)+0x50>
   1ab3c:	e3a02095 	mov	r2, #149	; 0x95
   1ab40:	e59f1074 	ldr	r1, [pc, #116]	; 1abbc <CClassAllocator::Free(void*)+0xc0>
   1ab44:	e59f0078 	ldr	r0, [pc, #120]	; 1abc4 <CClassAllocator::Free(void*)+0xc8>
   1ab48:	ebfffe92 	bl	1a598 <assertion_failed>
   1ab4c:	e5d53014 	ldrb	r3, [r5, #20]
   1ab50:	e3530000 	cmp	r3, #0
   1ab54:	0a000002 	beq	1ab64 <CClassAllocator::Free(void*)+0x68>
   1ab58:	e5950018 	ldr	r0, [r5, #24]
   1ab5c:	e3500000 	cmp	r0, #0
   1ab60:	1a000003 	bne	1ab74 <CClassAllocator::Free(void*)+0x78>
   1ab64:	e5953010 	ldr	r3, [r5, #16]
   1ab68:	e5043004 	str	r3, [r4, #-4]
   1ab6c:	e5856010 	str	r6, [r5, #16]
   1ab70:	e8bd8070 	pop	{r4, r5, r6, pc}
   1ab74:	eb001efe 	bl	22774 <EnterCritical>
   1ab78:	e5d52014 	ldrb	r2, [r5, #20]
   1ab7c:	e5953010 	ldr	r3, [r5, #16]
   1ab80:	e3520000 	cmp	r2, #0
   1ab84:	e5043004 	str	r3, [r4, #-4]
   1ab88:	e5856010 	str	r6, [r5, #16]
   1ab8c:	08bd8070 	popeq	{r4, r5, r6, pc}
   1ab90:	e5950018 	ldr	r0, [r5, #24]
   1ab94:	e3500000 	cmp	r0, #0
   1ab98:	08bd8070 	popeq	{r4, r5, r6, pc}
   1ab9c:	e8bd4070 	pop	{r4, r5, r6, lr}
   1aba0:	ea001f20 	b	22828 <LeaveCritical>
   1aba4:	e3a02090 	mov	r2, #144	; 0x90
   1aba8:	e59f100c 	ldr	r1, [pc, #12]	; 1abbc <CClassAllocator::Free(void*)+0xc0>
   1abac:	e59f0014 	ldr	r0, [pc, #20]	; 1abc8 <CClassAllocator::Free(void*)+0xcc>
   1abb0:	ebfffe78 	bl	1a598 <assertion_failed>
   1abb4:	eaffffd4 	b	1ab0c <CClassAllocator::Free(void*)+0x10>
   1abb8:	4f425350 	.word	0x4f425350
   1abbc:	000288ac 	.word	0x000288ac
   1abc0:	0002896c 	.word	0x0002896c
   1abc4:	00028988 	.word	0x00028988
   1abc8:	00028960 	.word	0x00028960

0001abcc <debug_hexdump(void const*, unsigned int, char const*)>:
   1abcc:	e3520000 	cmp	r2, #0
   1abd0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1abd4:	e1a05001 	mov	r5, r1
   1abd8:	e59f60f4 	ldr	r6, [pc, #244]	; 1acd4 <debug_hexdump(void const*, unsigned int, char const*)+0x108>
   1abdc:	e1a04000 	mov	r4, r0
   1abe0:	11a06002 	movne	r6, r2
   1abe4:	e24dd04c 	sub	sp, sp, #76	; 0x4c
   1abe8:	eb00085d 	bl	1cd64 <CLogger::Get()>
   1abec:	e58d4004 	str	r4, [sp, #4]
   1abf0:	e58d5000 	str	r5, [sp]
   1abf4:	e1a01006 	mov	r1, r6
   1abf8:	e59f30d8 	ldr	r3, [pc, #216]	; 1acd8 <debug_hexdump(void const*, unsigned int, char const*)+0x10c>
   1abfc:	e3a02004 	mov	r2, #4
   1ac00:	eb000a00 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1ac04:	e3550000 	cmp	r5, #0
   1ac08:	0a00002b 	beq	1acbc <debug_hexdump(void const*, unsigned int, char const*)+0xf0>
   1ac0c:	e3a09004 	mov	r9, #4
   1ac10:	e59f80c4 	ldr	r8, [pc, #196]	; 1acdc <debug_hexdump(void const*, unsigned int, char const*)+0x110>
   1ac14:	e59f70c4 	ldr	r7, [pc, #196]	; 1ace0 <debug_hexdump(void const*, unsigned int, char const*)+0x114>
   1ac18:	eb000851 	bl	1cd64 <CLogger::Get()>
   1ac1c:	e5d4a00f 	ldrb	sl, [r4, #15]
   1ac20:	e5d4e00e 	ldrb	lr, [r4, #14]
   1ac24:	e5d4c00d 	ldrb	ip, [r4, #13]
   1ac28:	e5d4300c 	ldrb	r3, [r4, #12]
   1ac2c:	e5d4200b 	ldrb	r2, [r4, #11]
   1ac30:	e5d4100a 	ldrb	r1, [r4, #10]
   1ac34:	e5d4b009 	ldrb	fp, [r4, #9]
   1ac38:	e58da040 	str	sl, [sp, #64]	; 0x40
   1ac3c:	e5d4a008 	ldrb	sl, [r4, #8]
   1ac40:	e58de03c 	str	lr, [sp, #60]	; 0x3c
   1ac44:	e5d4e007 	ldrb	lr, [r4, #7]
   1ac48:	e58dc038 	str	ip, [sp, #56]	; 0x38
   1ac4c:	e5d4c006 	ldrb	ip, [r4, #6]
   1ac50:	e58d3034 	str	r3, [sp, #52]	; 0x34
   1ac54:	e5d43005 	ldrb	r3, [r4, #5]
   1ac58:	e58d2030 	str	r2, [sp, #48]	; 0x30
   1ac5c:	e5d42004 	ldrb	r2, [r4, #4]
   1ac60:	e58d102c 	str	r1, [sp, #44]	; 0x2c
   1ac64:	e5d41003 	ldrb	r1, [r4, #3]
   1ac68:	e58db028 	str	fp, [sp, #40]	; 0x28
   1ac6c:	e5d4b002 	ldrb	fp, [r4, #2]
   1ac70:	e58da024 	str	sl, [sp, #36]	; 0x24
   1ac74:	e5d4a001 	ldrb	sl, [r4, #1]
   1ac78:	e58de020 	str	lr, [sp, #32]
   1ac7c:	e5d4e000 	ldrb	lr, [r4]
   1ac80:	e58dc01c 	str	ip, [sp, #28]
   1ac84:	e58d3018 	str	r3, [sp, #24]
   1ac88:	e004c008 	and	ip, r4, r8
   1ac8c:	e58d2014 	str	r2, [sp, #20]
   1ac90:	e58d1010 	str	r1, [sp, #16]
   1ac94:	e1a03007 	mov	r3, r7
   1ac98:	e1a02009 	mov	r2, r9
   1ac9c:	e1a01006 	mov	r1, r6
   1aca0:	e58db00c 	str	fp, [sp, #12]
   1aca4:	e58da008 	str	sl, [sp, #8]
   1aca8:	e88d5000 	stm	sp, {ip, lr}
   1acac:	eb0009d5 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1acb0:	e355000f 	cmp	r5, #15
   1acb4:	e2844010 	add	r4, r4, #16
   1acb8:	8a000001 	bhi	1acc4 <debug_hexdump(void const*, unsigned int, char const*)+0xf8>
   1acbc:	e28dd04c 	add	sp, sp, #76	; 0x4c
   1acc0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1acc4:	e2555010 	subs	r5, r5, #16
   1acc8:	1affffd2 	bne	1ac18 <debug_hexdump(void const*, unsigned int, char const*)+0x4c>
   1accc:	e28dd04c 	add	sp, sp, #76	; 0x4c
   1acd0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1acd4:	0002899c 	.word	0x0002899c
   1acd8:	000289a4 	.word	0x000289a4
   1acdc:	0000ffff 	.word	0x0000ffff
   1ace0:	000289cc 	.word	0x000289cc

0001ace4 <debug_stacktrace(unsigned int const*, char const*)>:
   1ace4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ace8:	e3510000 	cmp	r1, #0
   1acec:	e59f8084 	ldr	r8, [pc, #132]	; 1ad78 <debug_stacktrace(unsigned int const*, char const*)+0x94>
   1acf0:	e24dd008 	sub	sp, sp, #8
   1acf4:	e1a05000 	mov	r5, r0
   1acf8:	11a08001 	movne	r8, r1
   1acfc:	e3a04000 	mov	r4, #0
   1ad00:	e3a0a004 	mov	sl, #4
   1ad04:	e59f6070 	ldr	r6, [pc, #112]	; 1ad7c <debug_stacktrace(unsigned int const*, char const*)+0x98>
   1ad08:	e59f7070 	ldr	r7, [pc, #112]	; 1ad80 <debug_stacktrace(unsigned int const*, char const*)+0x9c>
   1ad0c:	e59f9070 	ldr	r9, [pc, #112]	; 1ad84 <debug_stacktrace(unsigned int const*, char const*)+0xa0>
   1ad10:	ea000003 	b	1ad24 <debug_stacktrace(unsigned int const*, char const*)+0x40>
   1ad14:	e2844001 	add	r4, r4, #1
   1ad18:	e3540040 	cmp	r4, #64	; 0x40
   1ad1c:	e2855004 	add	r5, r5, #4
   1ad20:	0a000012 	beq	1ad70 <debug_stacktrace(unsigned int const*, char const*)+0x8c>
   1ad24:	e5953000 	ldr	r3, [r5]
   1ad28:	e1530006 	cmp	r3, r6
   1ad2c:	9afffff8 	bls	1ad14 <debug_stacktrace(unsigned int const*, char const*)+0x30>
   1ad30:	e1530007 	cmp	r3, r7
   1ad34:	2afffff6 	bcs	1ad14 <debug_stacktrace(unsigned int const*, char const*)+0x30>
   1ad38:	e3130003 	tst	r3, #3
   1ad3c:	1afffff4 	bne	1ad14 <debug_stacktrace(unsigned int const*, char const*)+0x30>
   1ad40:	eb000807 	bl	1cd64 <CLogger::Get()>
   1ad44:	e5953000 	ldr	r3, [r5]
   1ad48:	e1a0200a 	mov	r2, sl
   1ad4c:	e58d4000 	str	r4, [sp]
   1ad50:	e58d3004 	str	r3, [sp, #4]
   1ad54:	e1a01008 	mov	r1, r8
   1ad58:	e1a03009 	mov	r3, r9
   1ad5c:	e2844001 	add	r4, r4, #1
   1ad60:	eb0009a8 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1ad64:	e3540040 	cmp	r4, #64	; 0x40
   1ad68:	e2855004 	add	r5, r5, #4
   1ad6c:	1affffec 	bne	1ad24 <debug_stacktrace(unsigned int const*, char const*)+0x40>
   1ad70:	e28dd008 	add	sp, sp, #8
   1ad74:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ad78:	0002899c 	.word	0x0002899c
   1ad7c:	00007fff 	.word	0x00007fff
   1ad80:	00023f44 	.word	0x00023f44
   1ad84:	00028a24 	.word	0x00028a24

0001ad88 <CDevice::~CDevice()>:
   1ad88:	e12fff1e 	bx	lr

0001ad8c <CDevice::Read(void*, unsigned int)>:
   1ad8c:	e3e00000 	mvn	r0, #0
   1ad90:	e12fff1e 	bx	lr

0001ad94 <CDevice::Seek(unsigned long long)>:
   1ad94:	e3e00000 	mvn	r0, #0
   1ad98:	e3e01000 	mvn	r1, #0
   1ad9c:	e12fff1e 	bx	lr

0001ada0 <CDevice::~CDevice()>:
   1ada0:	e92d4010 	push	{r4, lr}
   1ada4:	e1a04000 	mov	r4, r0
   1ada8:	e3a01004 	mov	r1, #4
   1adac:	eb001ece 	bl	228ec <operator delete(void*, unsigned int)>
   1adb0:	e1a00004 	mov	r0, r4
   1adb4:	e8bd8010 	pop	{r4, pc}

0001adb8 <CDevice::CDevice()>:
   1adb8:	e59f3004 	ldr	r3, [pc, #4]	; 1adc4 <CDevice::CDevice()+0xc>
   1adbc:	e5803000 	str	r3, [r0]
   1adc0:	e12fff1e 	bx	lr
   1adc4:	00028a40 	.word	0x00028a40

0001adc8 <CDeviceNameService::CDeviceNameService()>:
   1adc8:	e3a03000 	mov	r3, #0
   1adcc:	e92d4070 	push	{r4, r5, r6, lr}
   1add0:	e59f5030 	ldr	r5, [pc, #48]	; 1ae08 <CDeviceNameService::CDeviceNameService()+0x40>
   1add4:	e1a04000 	mov	r4, r0
   1add8:	e5952000 	ldr	r2, [r5]
   1addc:	e5803000 	str	r3, [r0]
   1ade0:	e1520003 	cmp	r2, r3
   1ade4:	e5803004 	str	r3, [r0, #4]
   1ade8:	0a000003 	beq	1adfc <CDeviceNameService::CDeviceNameService()+0x34>
   1adec:	e3a0201f 	mov	r2, #31
   1adf0:	e59f1014 	ldr	r1, [pc, #20]	; 1ae0c <CDeviceNameService::CDeviceNameService()+0x44>
   1adf4:	e59f0014 	ldr	r0, [pc, #20]	; 1ae10 <CDeviceNameService::CDeviceNameService()+0x48>
   1adf8:	ebfffde6 	bl	1a598 <assertion_failed>
   1adfc:	e5854000 	str	r4, [r5]
   1ae00:	e1a00004 	mov	r0, r4
   1ae04:	e8bd8070 	pop	{r4, r5, r6, pc}
   1ae08:	0002b27c 	.word	0x0002b27c
   1ae0c:	00028a54 	.word	0x00028a54
   1ae10:	00028a6c 	.word	0x00028a6c

0001ae14 <CDeviceNameService::~CDeviceNameService()>:
   1ae14:	e5903000 	ldr	r3, [r0]
   1ae18:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1ae1c:	e3530000 	cmp	r3, #0
   1ae20:	e1a05000 	mov	r5, r0
   1ae24:	0a00000e 	beq	1ae64 <CDeviceNameService::~CDeviceNameService()+0x50>
   1ae28:	e3a06000 	mov	r6, #0
   1ae2c:	e3a07010 	mov	r7, #16
   1ae30:	e5930004 	ldr	r0, [r3, #4]
   1ae34:	e5934000 	ldr	r4, [r3]
   1ae38:	e3500000 	cmp	r0, #0
   1ae3c:	0a000000 	beq	1ae44 <CDeviceNameService::~CDeviceNameService()+0x30>
   1ae40:	eb001ea8 	bl	228e8 <operator delete[](void*)>
   1ae44:	e5950000 	ldr	r0, [r5]
   1ae48:	e1a01007 	mov	r1, r7
   1ae4c:	e5806004 	str	r6, [r0, #4]
   1ae50:	e5806008 	str	r6, [r0, #8]
   1ae54:	eb001ea4 	bl	228ec <operator delete(void*, unsigned int)>
   1ae58:	e2543000 	subs	r3, r4, #0
   1ae5c:	e5854000 	str	r4, [r5]
   1ae60:	1afffff2 	bne	1ae30 <CDeviceNameService::~CDeviceNameService()+0x1c>
   1ae64:	e3a02000 	mov	r2, #0
   1ae68:	e59f3008 	ldr	r3, [pc, #8]	; 1ae78 <CDeviceNameService::~CDeviceNameService()+0x64>
   1ae6c:	e1a00005 	mov	r0, r5
   1ae70:	e5832000 	str	r2, [r3]
   1ae74:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1ae78:	0002b27c 	.word	0x0002b27c

0001ae7c <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>:
   1ae7c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1ae80:	e1a05000 	mov	r5, r0
   1ae84:	e5900004 	ldr	r0, [r0, #4]
   1ae88:	e1a06001 	mov	r6, r1
   1ae8c:	e3500000 	cmp	r0, #0
   1ae90:	e1a07002 	mov	r7, r2
   1ae94:	e1a08003 	mov	r8, r3
   1ae98:	1a000017 	bne	1aefc <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x80>
   1ae9c:	e3a00010 	mov	r0, #16
   1aea0:	eb001e8d 	bl	228dc <operator new(unsigned int)>
   1aea4:	e3560000 	cmp	r6, #0
   1aea8:	e1a04000 	mov	r4, r0
   1aeac:	0a000019 	beq	1af18 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x9c>
   1aeb0:	e1a00006 	mov	r0, r6
   1aeb4:	eb001a3a 	bl	217a4 <strlen>
   1aeb8:	e2800001 	add	r0, r0, #1
   1aebc:	eb001e87 	bl	228e0 <operator new[](unsigned int)>
   1aec0:	e1a01006 	mov	r1, r6
   1aec4:	e5840004 	str	r0, [r4, #4]
   1aec8:	eb001ab3 	bl	2199c <strcpy>
   1aecc:	e3570000 	cmp	r7, #0
   1aed0:	0a00000b 	beq	1af04 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x88>
   1aed4:	e5952004 	ldr	r2, [r5, #4]
   1aed8:	e5953000 	ldr	r3, [r5]
   1aedc:	e3520000 	cmp	r2, #0
   1aee0:	e5847008 	str	r7, [r4, #8]
   1aee4:	e5c4800c 	strb	r8, [r4, #12]
   1aee8:	e5843000 	str	r3, [r4]
   1aeec:	e5854000 	str	r4, [r5]
   1aef0:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   1aef4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1aef8:	ea001e4a 	b	22828 <LeaveCritical>
   1aefc:	eb001e1c 	bl	22774 <EnterCritical>
   1af00:	eaffffe5 	b	1ae9c <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x20>
   1af04:	e3a02040 	mov	r2, #64	; 0x40
   1af08:	e59f101c 	ldr	r1, [pc, #28]	; 1af2c <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xb0>
   1af0c:	e59f001c 	ldr	r0, [pc, #28]	; 1af30 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xb4>
   1af10:	ebfffda0 	bl	1a598 <assertion_failed>
   1af14:	eaffffee 	b	1aed4 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x58>
   1af18:	e3a0203b 	mov	r2, #59	; 0x3b
   1af1c:	e59f1008 	ldr	r1, [pc, #8]	; 1af2c <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xb0>
   1af20:	e59f000c 	ldr	r0, [pc, #12]	; 1af34 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xb8>
   1af24:	ebfffd9b 	bl	1a598 <assertion_failed>
   1af28:	eaffffe0 	b	1aeb0 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x34>
   1af2c:	00028a54 	.word	0x00028a54
   1af30:	00028a78 	.word	0x00028a78
   1af34:	00024930 	.word	0x00024930

0001af38 <CDeviceNameService::RemoveDevice(char const*, bool)>:
   1af38:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1af3c:	e2516000 	subs	r6, r1, #0
   1af40:	e1a08000 	mov	r8, r0
   1af44:	e1a07002 	mov	r7, r2
   1af48:	0a000040 	beq	1b050 <CDeviceNameService::RemoveDevice(char const*, bool)+0x118>
   1af4c:	e5980004 	ldr	r0, [r8, #4]
   1af50:	e3500000 	cmp	r0, #0
   1af54:	1a00002e 	bne	1b014 <CDeviceNameService::RemoveDevice(char const*, bool)+0xdc>
   1af58:	e5984000 	ldr	r4, [r8]
   1af5c:	e3540000 	cmp	r4, #0
   1af60:	0a000039 	beq	1b04c <CDeviceNameService::RemoveDevice(char const*, bool)+0x114>
   1af64:	e3a05000 	mov	r5, #0
   1af68:	e3a0b05e 	mov	fp, #94	; 0x5e
   1af6c:	e59fa0f0 	ldr	sl, [pc, #240]	; 1b064 <CDeviceNameService::RemoveDevice(char const*, bool)+0x12c>
   1af70:	e59f90f0 	ldr	r9, [pc, #240]	; 1b068 <CDeviceNameService::RemoveDevice(char const*, bool)+0x130>
   1af74:	ea00000b 	b	1afa8 <CDeviceNameService::RemoveDevice(char const*, bool)+0x70>
   1af78:	e1a00006 	mov	r0, r6
   1af7c:	eb001a12 	bl	217cc <strcmp>
   1af80:	e3500000 	cmp	r0, #0
   1af84:	1a000002 	bne	1af94 <CDeviceNameService::RemoveDevice(char const*, bool)+0x5c>
   1af88:	e5d4300c 	ldrb	r3, [r4, #12]
   1af8c:	e1530007 	cmp	r3, r7
   1af90:	0a00000d 	beq	1afcc <CDeviceNameService::RemoveDevice(char const*, bool)+0x94>
   1af94:	e5943000 	ldr	r3, [r4]
   1af98:	e1a05004 	mov	r5, r4
   1af9c:	e3530000 	cmp	r3, #0
   1afa0:	0a00001f 	beq	1b024 <CDeviceNameService::RemoveDevice(char const*, bool)+0xec>
   1afa4:	e1a04003 	mov	r4, r3
   1afa8:	e5941004 	ldr	r1, [r4, #4]
   1afac:	e3510000 	cmp	r1, #0
   1afb0:	1afffff0 	bne	1af78 <CDeviceNameService::RemoveDevice(char const*, bool)+0x40>
   1afb4:	e1a0100a 	mov	r1, sl
   1afb8:	e1a0200b 	mov	r2, fp
   1afbc:	e1a00009 	mov	r0, r9
   1afc0:	ebfffd74 	bl	1a598 <assertion_failed>
   1afc4:	e5941004 	ldr	r1, [r4, #4]
   1afc8:	eaffffea 	b	1af78 <CDeviceNameService::RemoveDevice(char const*, bool)+0x40>
   1afcc:	e3550000 	cmp	r5, #0
   1afd0:	0a00001a 	beq	1b040 <CDeviceNameService::RemoveDevice(char const*, bool)+0x108>
   1afd4:	e5943000 	ldr	r3, [r4]
   1afd8:	e5853000 	str	r3, [r5]
   1afdc:	e5983004 	ldr	r3, [r8, #4]
   1afe0:	e3530000 	cmp	r3, #0
   1afe4:	1a000013 	bne	1b038 <CDeviceNameService::RemoveDevice(char const*, bool)+0x100>
   1afe8:	e5940004 	ldr	r0, [r4, #4]
   1afec:	e3500000 	cmp	r0, #0
   1aff0:	0a000000 	beq	1aff8 <CDeviceNameService::RemoveDevice(char const*, bool)+0xc0>
   1aff4:	eb001e3b 	bl	228e8 <operator delete[](void*)>
   1aff8:	e3a03000 	mov	r3, #0
   1affc:	e1a00004 	mov	r0, r4
   1b000:	e5843004 	str	r3, [r4, #4]
   1b004:	e5843008 	str	r3, [r4, #8]
   1b008:	e3a01010 	mov	r1, #16
   1b00c:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b010:	ea001e35 	b	228ec <operator delete(void*, unsigned int)>
   1b014:	eb001dd6 	bl	22774 <EnterCritical>
   1b018:	e5984000 	ldr	r4, [r8]
   1b01c:	e3540000 	cmp	r4, #0
   1b020:	1affffcf 	bne	1af64 <CDeviceNameService::RemoveDevice(char const*, bool)+0x2c>
   1b024:	e5983004 	ldr	r3, [r8, #4]
   1b028:	e3530000 	cmp	r3, #0
   1b02c:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b030:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b034:	ea001dfb 	b	22828 <LeaveCritical>
   1b038:	eb001dfa 	bl	22828 <LeaveCritical>
   1b03c:	eaffffe9 	b	1afe8 <CDeviceNameService::RemoveDevice(char const*, bool)+0xb0>
   1b040:	e5943000 	ldr	r3, [r4]
   1b044:	e5883000 	str	r3, [r8]
   1b048:	eaffffe3 	b	1afdc <CDeviceNameService::RemoveDevice(char const*, bool)+0xa4>
   1b04c:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b050:	e3a02056 	mov	r2, #86	; 0x56
   1b054:	e59f1008 	ldr	r1, [pc, #8]	; 1b064 <CDeviceNameService::RemoveDevice(char const*, bool)+0x12c>
   1b058:	e59f000c 	ldr	r0, [pc, #12]	; 1b06c <CDeviceNameService::RemoveDevice(char const*, bool)+0x134>
   1b05c:	ebfffd4d 	bl	1a598 <assertion_failed>
   1b060:	eaffffb9 	b	1af4c <CDeviceNameService::RemoveDevice(char const*, bool)+0x14>
   1b064:	00028a54 	.word	0x00028a54
   1b068:	00028a88 	.word	0x00028a88
   1b06c:	00024930 	.word	0x00024930

0001b070 <CDeviceNameService::GetDevice(char const*, bool)>:
   1b070:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b074:	e2515000 	subs	r5, r1, #0
   1b078:	e1a07000 	mov	r7, r0
   1b07c:	e1a06002 	mov	r6, r2
   1b080:	0a000034 	beq	1b158 <CDeviceNameService::GetDevice(char const*, bool)+0xe8>
   1b084:	e5970004 	ldr	r0, [r7, #4]
   1b088:	e3500000 	cmp	r0, #0
   1b08c:	1a000019 	bne	1b0f8 <CDeviceNameService::GetDevice(char const*, bool)+0x88>
   1b090:	e5974000 	ldr	r4, [r7]
   1b094:	e3540000 	cmp	r4, #0
   1b098:	0a00001e 	beq	1b118 <CDeviceNameService::GetDevice(char const*, bool)+0xa8>
   1b09c:	e3a0a092 	mov	sl, #146	; 0x92
   1b0a0:	e59f90c4 	ldr	r9, [pc, #196]	; 1b16c <CDeviceNameService::GetDevice(char const*, bool)+0xfc>
   1b0a4:	e59f80c4 	ldr	r8, [pc, #196]	; 1b170 <CDeviceNameService::GetDevice(char const*, bool)+0x100>
   1b0a8:	ea000009 	b	1b0d4 <CDeviceNameService::GetDevice(char const*, bool)+0x64>
   1b0ac:	e1a00005 	mov	r0, r5
   1b0b0:	eb0019c5 	bl	217cc <strcmp>
   1b0b4:	e3500000 	cmp	r0, #0
   1b0b8:	1a000002 	bne	1b0c8 <CDeviceNameService::GetDevice(char const*, bool)+0x58>
   1b0bc:	e5d4300c 	ldrb	r3, [r4, #12]
   1b0c0:	e1530006 	cmp	r3, r6
   1b0c4:	0a000016 	beq	1b124 <CDeviceNameService::GetDevice(char const*, bool)+0xb4>
   1b0c8:	e5944000 	ldr	r4, [r4]
   1b0cc:	e3540000 	cmp	r4, #0
   1b0d0:	0a00000c 	beq	1b108 <CDeviceNameService::GetDevice(char const*, bool)+0x98>
   1b0d4:	e5941004 	ldr	r1, [r4, #4]
   1b0d8:	e3510000 	cmp	r1, #0
   1b0dc:	1afffff2 	bne	1b0ac <CDeviceNameService::GetDevice(char const*, bool)+0x3c>
   1b0e0:	e1a01009 	mov	r1, r9
   1b0e4:	e1a0200a 	mov	r2, sl
   1b0e8:	e1a00008 	mov	r0, r8
   1b0ec:	ebfffd29 	bl	1a598 <assertion_failed>
   1b0f0:	e5941004 	ldr	r1, [r4, #4]
   1b0f4:	eaffffec 	b	1b0ac <CDeviceNameService::GetDevice(char const*, bool)+0x3c>
   1b0f8:	eb001d9d 	bl	22774 <EnterCritical>
   1b0fc:	e5974000 	ldr	r4, [r7]
   1b100:	e3540000 	cmp	r4, #0
   1b104:	1affffe4 	bne	1b09c <CDeviceNameService::GetDevice(char const*, bool)+0x2c>
   1b108:	e5973004 	ldr	r3, [r7, #4]
   1b10c:	e3530000 	cmp	r3, #0
   1b110:	0a000000 	beq	1b118 <CDeviceNameService::GetDevice(char const*, bool)+0xa8>
   1b114:	eb001dc3 	bl	22828 <LeaveCritical>
   1b118:	e3a04000 	mov	r4, #0
   1b11c:	e1a00004 	mov	r0, r4
   1b120:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b124:	e5973004 	ldr	r3, [r7, #4]
   1b128:	e5944008 	ldr	r4, [r4, #8]
   1b12c:	e3530000 	cmp	r3, #0
   1b130:	1a000006 	bne	1b150 <CDeviceNameService::GetDevice(char const*, bool)+0xe0>
   1b134:	e3540000 	cmp	r4, #0
   1b138:	1afffff7 	bne	1b11c <CDeviceNameService::GetDevice(char const*, bool)+0xac>
   1b13c:	e3a0209a 	mov	r2, #154	; 0x9a
   1b140:	e59f1024 	ldr	r1, [pc, #36]	; 1b16c <CDeviceNameService::GetDevice(char const*, bool)+0xfc>
   1b144:	e59f0028 	ldr	r0, [pc, #40]	; 1b174 <CDeviceNameService::GetDevice(char const*, bool)+0x104>
   1b148:	ebfffd12 	bl	1a598 <assertion_failed>
   1b14c:	eafffff2 	b	1b11c <CDeviceNameService::GetDevice(char const*, bool)+0xac>
   1b150:	eb001db4 	bl	22828 <LeaveCritical>
   1b154:	eafffff6 	b	1b134 <CDeviceNameService::GetDevice(char const*, bool)+0xc4>
   1b158:	e3a0208b 	mov	r2, #139	; 0x8b
   1b15c:	e59f1008 	ldr	r1, [pc, #8]	; 1b16c <CDeviceNameService::GetDevice(char const*, bool)+0xfc>
   1b160:	e59f0010 	ldr	r0, [pc, #16]	; 1b178 <CDeviceNameService::GetDevice(char const*, bool)+0x108>
   1b164:	ebfffd0b 	bl	1a598 <assertion_failed>
   1b168:	eaffffc5 	b	1b084 <CDeviceNameService::GetDevice(char const*, bool)+0x14>
   1b16c:	00028a54 	.word	0x00028a54
   1b170:	00028a88 	.word	0x00028a88
   1b174:	00028a9c 	.word	0x00028a9c
   1b178:	00024930 	.word	0x00024930

0001b17c <CDeviceNameService::Get()>:
   1b17c:	e92d4010 	push	{r4, lr}
   1b180:	e59f4020 	ldr	r4, [pc, #32]	; 1b1a8 <CDeviceNameService::Get()+0x2c>
   1b184:	e5940000 	ldr	r0, [r4]
   1b188:	e3500000 	cmp	r0, #0
   1b18c:	18bd8010 	popne	{r4, pc}
   1b190:	e3a020cc 	mov	r2, #204	; 0xcc
   1b194:	e59f1010 	ldr	r1, [pc, #16]	; 1b1ac <CDeviceNameService::Get()+0x30>
   1b198:	e59f0010 	ldr	r0, [pc, #16]	; 1b1b0 <CDeviceNameService::Get()+0x34>
   1b19c:	ebfffcfd 	bl	1a598 <assertion_failed>
   1b1a0:	e5940000 	ldr	r0, [r4]
   1b1a4:	e8bd8010 	pop	{r4, pc}
   1b1a8:	0002b27c 	.word	0x0002b27c
   1b1ac:	00028a54 	.word	0x00028a54
   1b1b0:	00028aac 	.word	0x00028aac

0001b1b4 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>:
   1b1b4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1b1b8:	e1a07001 	mov	r7, r1
   1b1bc:	e1a08002 	mov	r8, r2
   1b1c0:	e24dd010 	sub	sp, sp, #16
   1b1c4:	e1a04000 	mov	r4, r0
   1b1c8:	e1a0000d 	mov	r0, sp
   1b1cc:	e1a05003 	mov	r5, r3
   1b1d0:	e5dd6028 	ldrb	r6, [sp, #40]	; 0x28
   1b1d4:	eb0011ac 	bl	1f88c <CString::CString()>
   1b1d8:	e1a03008 	mov	r3, r8
   1b1dc:	e1a02007 	mov	r2, r7
   1b1e0:	e1a0000d 	mov	r0, sp
   1b1e4:	e59f102c 	ldr	r1, [pc, #44]	; 1b218 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)+0x64>
   1b1e8:	eb001595 	bl	20844 <CString::Format(char const*, ...)>
   1b1ec:	e1a0000d 	mov	r0, sp
   1b1f0:	eb0011bb 	bl	1f8e4 <CString::operator char const*() const>
   1b1f4:	e1a03006 	mov	r3, r6
   1b1f8:	e1a01000 	mov	r1, r0
   1b1fc:	e1a02005 	mov	r2, r5
   1b200:	e1a00004 	mov	r0, r4
   1b204:	ebffff1c 	bl	1ae7c <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   1b208:	e1a0000d 	mov	r0, sp
   1b20c:	eb00116b 	bl	1f7c0 <CString::~CString()>
   1b210:	e28dd010 	add	sp, sp, #16
   1b214:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1b218:	00028ab8 	.word	0x00028ab8

0001b21c <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>:
   1b21c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1b220:	e1a06001 	mov	r6, r1
   1b224:	e1a07002 	mov	r7, r2
   1b228:	e24dd014 	sub	sp, sp, #20
   1b22c:	e1a04000 	mov	r4, r0
   1b230:	e1a0000d 	mov	r0, sp
   1b234:	e1a05003 	mov	r5, r3
   1b238:	eb001193 	bl	1f88c <CString::CString()>
   1b23c:	e1a03007 	mov	r3, r7
   1b240:	e1a02006 	mov	r2, r6
   1b244:	e1a0000d 	mov	r0, sp
   1b248:	e59f1028 	ldr	r1, [pc, #40]	; 1b278 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)+0x5c>
   1b24c:	eb00157c 	bl	20844 <CString::Format(char const*, ...)>
   1b250:	e1a0000d 	mov	r0, sp
   1b254:	eb0011a2 	bl	1f8e4 <CString::operator char const*() const>
   1b258:	e1a02005 	mov	r2, r5
   1b25c:	e1a01000 	mov	r1, r0
   1b260:	e1a00004 	mov	r0, r4
   1b264:	ebffff33 	bl	1af38 <CDeviceNameService::RemoveDevice(char const*, bool)>
   1b268:	e1a0000d 	mov	r0, sp
   1b26c:	eb001153 	bl	1f7c0 <CString::~CString()>
   1b270:	e28dd014 	add	sp, sp, #20
   1b274:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1b278:	00028ab8 	.word	0x00028ab8

0001b27c <CDeviceNameService::GetDevice(char const*, unsigned int, bool)>:
   1b27c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1b280:	e1a06001 	mov	r6, r1
   1b284:	e1a07002 	mov	r7, r2
   1b288:	e24dd014 	sub	sp, sp, #20
   1b28c:	e1a04000 	mov	r4, r0
   1b290:	e1a0000d 	mov	r0, sp
   1b294:	e1a05003 	mov	r5, r3
   1b298:	eb00117b 	bl	1f88c <CString::CString()>
   1b29c:	e1a03007 	mov	r3, r7
   1b2a0:	e1a02006 	mov	r2, r6
   1b2a4:	e1a0000d 	mov	r0, sp
   1b2a8:	e59f1030 	ldr	r1, [pc, #48]	; 1b2e0 <CDeviceNameService::GetDevice(char const*, unsigned int, bool)+0x64>
   1b2ac:	eb001564 	bl	20844 <CString::Format(char const*, ...)>
   1b2b0:	e1a0000d 	mov	r0, sp
   1b2b4:	eb00118a 	bl	1f8e4 <CString::operator char const*() const>
   1b2b8:	e1a02005 	mov	r2, r5
   1b2bc:	e1a01000 	mov	r1, r0
   1b2c0:	e1a00004 	mov	r0, r4
   1b2c4:	ebffff69 	bl	1b070 <CDeviceNameService::GetDevice(char const*, bool)>
   1b2c8:	e1a04000 	mov	r4, r0
   1b2cc:	e1a0000d 	mov	r0, sp
   1b2d0:	eb00113a 	bl	1f7c0 <CString::~CString()>
   1b2d4:	e1a00004 	mov	r0, r4
   1b2d8:	e28dd014 	add	sp, sp, #20
   1b2dc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1b2e0:	00028ab8 	.word	0x00028ab8

0001b2e4 <CDeviceNameService::ListDevices(CDevice*)>:
   1b2e4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b2e8:	e2516000 	subs	r6, r1, #0
   1b2ec:	e24dd01c 	sub	sp, sp, #28
   1b2f0:	e1a04000 	mov	r4, r0
   1b2f4:	0a000036 	beq	1b3d4 <CDeviceNameService::ListDevices(CDevice*)+0xf0>
   1b2f8:	e5944000 	ldr	r4, [r4]
   1b2fc:	e3540000 	cmp	r4, #0
   1b300:	0a00002b 	beq	1b3b4 <CDeviceNameService::ListDevices(CDevice*)+0xd0>
   1b304:	e3a05000 	mov	r5, #0
   1b308:	e3a0b0b9 	mov	fp, #185	; 0xb9
   1b30c:	e59f80d4 	ldr	r8, [pc, #212]	; 1b3e8 <CDeviceNameService::ListDevices(CDevice*)+0x104>
   1b310:	e28d0008 	add	r0, sp, #8
   1b314:	eb00115c 	bl	1f88c <CString::CString()>
   1b318:	e5943004 	ldr	r3, [r4, #4]
   1b31c:	e2855001 	add	r5, r5, #1
   1b320:	e3530000 	cmp	r3, #0
   1b324:	0a000024 	beq	1b3bc <CDeviceNameService::ListDevices(CDevice*)+0xd8>
   1b328:	e2157003 	ands	r7, r5, #3
   1b32c:	13a01020 	movne	r1, #32
   1b330:	03a0100a 	moveq	r1, #10
   1b334:	e5d4200c 	ldrb	r2, [r4, #12]
   1b338:	e28d0008 	add	r0, sp, #8
   1b33c:	e3520000 	cmp	r2, #0
   1b340:	03a02063 	moveq	r2, #99	; 0x63
   1b344:	13a02062 	movne	r2, #98	; 0x62
   1b348:	e58d1000 	str	r1, [sp]
   1b34c:	e1a01008 	mov	r1, r8
   1b350:	eb00153b 	bl	20844 <CString::Format(char const*, ...)>
   1b354:	e5963000 	ldr	r3, [r6]
   1b358:	e28d0008 	add	r0, sp, #8
   1b35c:	e593900c 	ldr	r9, [r3, #12]
   1b360:	eb00115f 	bl	1f8e4 <CString::operator char const*() const>
   1b364:	e1a0a000 	mov	sl, r0
   1b368:	e28d0008 	add	r0, sp, #8
   1b36c:	eb00118a 	bl	1f99c <CString::GetLength() const>
   1b370:	e1a0100a 	mov	r1, sl
   1b374:	e1a02000 	mov	r2, r0
   1b378:	e1a00006 	mov	r0, r6
   1b37c:	e12fff39 	blx	r9
   1b380:	e5944000 	ldr	r4, [r4]
   1b384:	e28d0008 	add	r0, sp, #8
   1b388:	eb00110c 	bl	1f7c0 <CString::~CString()>
   1b38c:	e3540000 	cmp	r4, #0
   1b390:	1affffde 	bne	1b310 <CDeviceNameService::ListDevices(CDevice*)+0x2c>
   1b394:	e3570000 	cmp	r7, #0
   1b398:	0a000005 	beq	1b3b4 <CDeviceNameService::ListDevices(CDevice*)+0xd0>
   1b39c:	e5963000 	ldr	r3, [r6]
   1b3a0:	e1a00006 	mov	r0, r6
   1b3a4:	e593300c 	ldr	r3, [r3, #12]
   1b3a8:	e3a02001 	mov	r2, #1
   1b3ac:	e59f1038 	ldr	r1, [pc, #56]	; 1b3ec <CDeviceNameService::ListDevices(CDevice*)+0x108>
   1b3b0:	e12fff33 	blx	r3
   1b3b4:	e28dd01c 	add	sp, sp, #28
   1b3b8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b3bc:	e1a0200b 	mov	r2, fp
   1b3c0:	e59f1028 	ldr	r1, [pc, #40]	; 1b3f0 <CDeviceNameService::ListDevices(CDevice*)+0x10c>
   1b3c4:	e59f0028 	ldr	r0, [pc, #40]	; 1b3f4 <CDeviceNameService::ListDevices(CDevice*)+0x110>
   1b3c8:	ebfffc72 	bl	1a598 <assertion_failed>
   1b3cc:	e5943004 	ldr	r3, [r4, #4]
   1b3d0:	eaffffd4 	b	1b328 <CDeviceNameService::ListDevices(CDevice*)+0x44>
   1b3d4:	e3a020b0 	mov	r2, #176	; 0xb0
   1b3d8:	e59f1010 	ldr	r1, [pc, #16]	; 1b3f0 <CDeviceNameService::ListDevices(CDevice*)+0x10c>
   1b3dc:	e59f0014 	ldr	r0, [pc, #20]	; 1b3f8 <CDeviceNameService::ListDevices(CDevice*)+0x114>
   1b3e0:	ebfffc6c 	bl	1a598 <assertion_failed>
   1b3e4:	eaffffc3 	b	1b2f8 <CDeviceNameService::ListDevices(CDevice*)+0x14>
   1b3e8:	00028ad0 	.word	0x00028ad0
   1b3ec:	0002819c 	.word	0x0002819c
   1b3f0:	00028a54 	.word	0x00028a54
   1b3f4:	00028a88 	.word	0x00028a88
   1b3f8:	00028ac0 	.word	0x00028ac0

0001b3fc <CGPIOPin::~CGPIOPin()>:
   1b3fc:	e12fff1e 	bx	lr

0001b400 <CGPIOPin::~CGPIOPin()>:
   1b400:	e92d4010 	push	{r4, lr}
   1b404:	e1a04000 	mov	r4, r0
   1b408:	e3a01028 	mov	r1, #40	; 0x28
   1b40c:	eb001d36 	bl	228ec <operator delete(void*, unsigned int)>
   1b410:	e1a00004 	mov	r0, r4
   1b414:	e8bd8010 	pop	{r4, pc}

0001b418 <CGPIOPin::CGPIOPin()>:
   1b418:	e92d4010 	push	{r4, lr}
   1b41c:	e3a01000 	mov	r1, #0
   1b420:	e3a02006 	mov	r2, #6
   1b424:	e3a04036 	mov	r4, #54	; 0x36
   1b428:	e3a0c00a 	mov	ip, #10
   1b42c:	e59fe01c 	ldr	lr, [pc, #28]	; 1b450 <CGPIOPin::CGPIOPin()+0x38>
   1b430:	e5804004 	str	r4, [r0, #4]
   1b434:	e580e000 	str	lr, [r0]
   1b438:	e5c0c010 	strb	ip, [r0, #16]
   1b43c:	e5801018 	str	r1, [r0, #24]
   1b440:	e580101c 	str	r1, [r0, #28]
   1b444:	e5c02024 	strb	r2, [r0, #36]	; 0x24
   1b448:	e5c02025 	strb	r2, [r0, #37]	; 0x25
   1b44c:	e8bd8010 	pop	{r4, pc}
   1b450:	00028ae4 	.word	0x00028ae4

0001b454 <CGPIOPin::AssignPin(unsigned int)>:
   1b454:	e5903004 	ldr	r3, [r0, #4]
   1b458:	e92d4070 	push	{r4, r5, r6, lr}
   1b45c:	e3530036 	cmp	r3, #54	; 0x36
   1b460:	e1a05000 	mov	r5, r0
   1b464:	e1a04001 	mov	r4, r1
   1b468:	0a000003 	beq	1b47c <CGPIOPin::AssignPin(unsigned int)+0x28>
   1b46c:	e3a02040 	mov	r2, #64	; 0x40
   1b470:	e59f1064 	ldr	r1, [pc, #100]	; 1b4dc <CGPIOPin::AssignPin(unsigned int)+0x88>
   1b474:	e59f0064 	ldr	r0, [pc, #100]	; 1b4e0 <CGPIOPin::AssignPin(unsigned int)+0x8c>
   1b478:	ebfffc46 	bl	1a598 <assertion_failed>
   1b47c:	e3540035 	cmp	r4, #53	; 0x35
   1b480:	e5854004 	str	r4, [r5, #4]
   1b484:	8a000007 	bhi	1b4a8 <CGPIOPin::AssignPin(unsigned int)+0x54>
   1b488:	e3a03001 	mov	r3, #1
   1b48c:	e204201f 	and	r2, r4, #31
   1b490:	e1a042a4 	lsr	r4, r4, #5
   1b494:	e1a03213 	lsl	r3, r3, r2
   1b498:	e1a04104 	lsl	r4, r4, #2
   1b49c:	e585300c 	str	r3, [r5, #12]
   1b4a0:	e5854008 	str	r4, [r5, #8]
   1b4a4:	e8bd8070 	pop	{r4, r5, r6, pc}
   1b4a8:	eb0008fd 	bl	1d8a4 <CMachineInfo::Get()>
   1b4ac:	e6ef1074 	uxtb	r1, r4
   1b4b0:	eb0008ce 	bl	1d7f0 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>
   1b4b4:	e3500035 	cmp	r0, #53	; 0x35
   1b4b8:	e1a04000 	mov	r4, r0
   1b4bc:	e5850004 	str	r0, [r5, #4]
   1b4c0:	9afffff0 	bls	1b488 <CGPIOPin::AssignPin(unsigned int)+0x34>
   1b4c4:	e3a02047 	mov	r2, #71	; 0x47
   1b4c8:	e59f100c 	ldr	r1, [pc, #12]	; 1b4dc <CGPIOPin::AssignPin(unsigned int)+0x88>
   1b4cc:	e59f0010 	ldr	r0, [pc, #16]	; 1b4e4 <CGPIOPin::AssignPin(unsigned int)+0x90>
   1b4d0:	ebfffc30 	bl	1a598 <assertion_failed>
   1b4d4:	e5954004 	ldr	r4, [r5, #4]
   1b4d8:	eaffffea 	b	1b488 <CGPIOPin::AssignPin(unsigned int)+0x34>
   1b4dc:	00028b04 	.word	0x00028b04
   1b4e0:	00028b10 	.word	0x00028b10
   1b4e4:	00028b24 	.word	0x00028b24

0001b4e8 <CGPIOPin::Write(unsigned int)>:
   1b4e8:	e5903004 	ldr	r3, [r0, #4]
   1b4ec:	e92d4070 	push	{r4, r5, r6, lr}
   1b4f0:	e3530035 	cmp	r3, #53	; 0x35
   1b4f4:	e1a04000 	mov	r4, r0
   1b4f8:	e1a05001 	mov	r5, r1
   1b4fc:	8a00001e 	bhi	1b57c <CGPIOPin::Write(unsigned int)+0x94>
   1b500:	e5d43010 	ldrb	r3, [r4, #16]
   1b504:	e3530003 	cmp	r3, #3
   1b508:	ca000016 	bgt	1b568 <CGPIOPin::Write(unsigned int)+0x80>
   1b50c:	e3a03000 	mov	r3, #0
   1b510:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   1b514:	e3550001 	cmp	r5, #1
   1b518:	9a00000b 	bls	1b54c <CGPIOPin::Write(unsigned int)+0x64>
   1b51c:	e3a02098 	mov	r2, #152	; 0x98
   1b520:	e59f1068 	ldr	r1, [pc, #104]	; 1b590 <CGPIOPin::Write(unsigned int)+0xa8>
   1b524:	e59f0068 	ldr	r0, [pc, #104]	; 1b594 <CGPIOPin::Write(unsigned int)+0xac>
   1b528:	ebfffc1a 	bl	1a598 <assertion_failed>
   1b52c:	e5845014 	str	r5, [r4, #20]
   1b530:	e59f5060 	ldr	r5, [pc, #96]	; 1b598 <CGPIOPin::Write(unsigned int)+0xb0>
   1b534:	e594100c 	ldr	r1, [r4, #12]
   1b538:	e5942008 	ldr	r2, [r4, #8]
   1b53c:	e3a03000 	mov	r3, #0
   1b540:	e7851002 	str	r1, [r5, r2]
   1b544:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   1b548:	e8bd8070 	pop	{r4, r5, r6, pc}
   1b54c:	e59f3044 	ldr	r3, [pc, #68]	; 1b598 <CGPIOPin::Write(unsigned int)+0xb0>
   1b550:	e59f2044 	ldr	r2, [pc, #68]	; 1b59c <CGPIOPin::Write(unsigned int)+0xb4>
   1b554:	e3550000 	cmp	r5, #0
   1b558:	e5845014 	str	r5, [r4, #20]
   1b55c:	11a05003 	movne	r5, r3
   1b560:	01a05002 	moveq	r5, r2
   1b564:	eafffff2 	b	1b534 <CGPIOPin::Write(unsigned int)+0x4c>
   1b568:	e3a02094 	mov	r2, #148	; 0x94
   1b56c:	e59f101c 	ldr	r1, [pc, #28]	; 1b590 <CGPIOPin::Write(unsigned int)+0xa8>
   1b570:	e59f0028 	ldr	r0, [pc, #40]	; 1b5a0 <CGPIOPin::Write(unsigned int)+0xb8>
   1b574:	ebfffc07 	bl	1a598 <assertion_failed>
   1b578:	eaffffe3 	b	1b50c <CGPIOPin::Write(unsigned int)+0x24>
   1b57c:	e3a02091 	mov	r2, #145	; 0x91
   1b580:	e59f1008 	ldr	r1, [pc, #8]	; 1b590 <CGPIOPin::Write(unsigned int)+0xa8>
   1b584:	e59f0018 	ldr	r0, [pc, #24]	; 1b5a4 <CGPIOPin::Write(unsigned int)+0xbc>
   1b588:	ebfffc02 	bl	1a598 <assertion_failed>
   1b58c:	eaffffdb 	b	1b500 <CGPIOPin::Write(unsigned int)+0x18>
   1b590:	00028b04 	.word	0x00028b04
   1b594:	00028b5c 	.word	0x00028b5c
   1b598:	2020001c 	.word	0x2020001c
   1b59c:	20200028 	.word	0x20200028
   1b5a0:	00028b38 	.word	0x00028b38
   1b5a4:	00028b24 	.word	0x00028b24

0001b5a8 <CGPIOPin::Read() const>:
   1b5a8:	e5903004 	ldr	r3, [r0, #4]
   1b5ac:	e92d4010 	push	{r4, lr}
   1b5b0:	e3530035 	cmp	r3, #53	; 0x35
   1b5b4:	e1a04000 	mov	r4, r0
   1b5b8:	8a000013 	bhi	1b60c <CGPIOPin::Read() const+0x64>
   1b5bc:	e5d43010 	ldrb	r3, [r4, #16]
   1b5c0:	e2432002 	sub	r2, r3, #2
   1b5c4:	e3530000 	cmp	r3, #0
   1b5c8:	13520001 	cmpne	r2, #1
   1b5cc:	9a000003 	bls	1b5e0 <CGPIOPin::Read() const+0x38>
   1b5d0:	e3a020a8 	mov	r2, #168	; 0xa8
   1b5d4:	e59f1044 	ldr	r1, [pc, #68]	; 1b620 <CGPIOPin::Read() const+0x78>
   1b5d8:	e59f0044 	ldr	r0, [pc, #68]	; 1b624 <CGPIOPin::Read() const+0x7c>
   1b5dc:	ebfffbed 	bl	1a598 <assertion_failed>
   1b5e0:	e3a03000 	mov	r3, #0
   1b5e4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   1b5e8:	e59f1038 	ldr	r1, [pc, #56]	; 1b628 <CGPIOPin::Read() const+0x80>
   1b5ec:	e5940008 	ldr	r0, [r4, #8]
   1b5f0:	e594200c 	ldr	r2, [r4, #12]
   1b5f4:	e7901001 	ldr	r1, [r0, r1]
   1b5f8:	e1110002 	tst	r1, r2
   1b5fc:	13a00001 	movne	r0, #1
   1b600:	01a00003 	moveq	r0, r3
   1b604:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   1b608:	e8bd8010 	pop	{r4, pc}
   1b60c:	e3a020a4 	mov	r2, #164	; 0xa4
   1b610:	e59f1008 	ldr	r1, [pc, #8]	; 1b620 <CGPIOPin::Read() const+0x78>
   1b614:	e59f0010 	ldr	r0, [pc, #16]	; 1b62c <CGPIOPin::Read() const+0x84>
   1b618:	ebfffbde 	bl	1a598 <assertion_failed>
   1b61c:	eaffffe6 	b	1b5bc <CGPIOPin::Read() const+0x14>
   1b620:	00028b04 	.word	0x00028b04
   1b624:	00028b7c 	.word	0x00028b7c
   1b628:	20200034 	.word	0x20200034
   1b62c:	00028b24 	.word	0x00028b24

0001b630 <CGPIOPin::Invert()>:
   1b630:	e5d03010 	ldrb	r3, [r0, #16]
   1b634:	e92d4010 	push	{r4, lr}
   1b638:	e3530001 	cmp	r3, #1
   1b63c:	e1a04000 	mov	r4, r0
   1b640:	0a000003 	beq	1b654 <CGPIOPin::Invert()+0x24>
   1b644:	e3a020b5 	mov	r2, #181	; 0xb5
   1b648:	e59f1018 	ldr	r1, [pc, #24]	; 1b668 <CGPIOPin::Invert()+0x38>
   1b64c:	e59f0018 	ldr	r0, [pc, #24]	; 1b66c <CGPIOPin::Invert()+0x3c>
   1b650:	ebfffbd0 	bl	1a598 <assertion_failed>
   1b654:	e5941014 	ldr	r1, [r4, #20]
   1b658:	e1a00004 	mov	r0, r4
   1b65c:	e8bd4010 	pop	{r4, lr}
   1b660:	e2211001 	eor	r1, r1, #1
   1b664:	eaffff9f 	b	1b4e8 <CGPIOPin::Write(unsigned int)>
   1b668:	00028b04 	.word	0x00028b04
   1b66c:	00028bd8 	.word	0x00028bd8

0001b670 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)>:
   1b670:	e5d03010 	ldrb	r3, [r0, #16]
   1b674:	e92d4070 	push	{r4, r5, r6, lr}
   1b678:	e1a05001 	mov	r5, r1
   1b67c:	e2431002 	sub	r1, r3, #2
   1b680:	e3530000 	cmp	r3, #0
   1b684:	13510001 	cmpne	r1, #1
   1b688:	e1a04000 	mov	r4, r0
   1b68c:	e1a06002 	mov	r6, r2
   1b690:	9a000003 	bls	1b6a4 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x34>
   1b694:	e3a020be 	mov	r2, #190	; 0xbe
   1b698:	e59f10b4 	ldr	r1, [pc, #180]	; 1b754 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe4>
   1b69c:	e59f00b4 	ldr	r0, [pc, #180]	; 1b758 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe8>
   1b6a0:	ebfffbbc 	bl	1a598 <assertion_failed>
   1b6a4:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
   1b6a8:	e3530006 	cmp	r3, #6
   1b6ac:	0a000003 	beq	1b6c0 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x50>
   1b6b0:	e3a020c0 	mov	r2, #192	; 0xc0
   1b6b4:	e59f1098 	ldr	r1, [pc, #152]	; 1b754 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe4>
   1b6b8:	e59f009c 	ldr	r0, [pc, #156]	; 1b75c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xec>
   1b6bc:	ebfffbb5 	bl	1a598 <assertion_failed>
   1b6c0:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
   1b6c4:	e3530006 	cmp	r3, #6
   1b6c8:	0a000003 	beq	1b6dc <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x6c>
   1b6cc:	e3a020c1 	mov	r2, #193	; 0xc1
   1b6d0:	e59f107c 	ldr	r1, [pc, #124]	; 1b754 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe4>
   1b6d4:	e59f0084 	ldr	r0, [pc, #132]	; 1b760 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xf0>
   1b6d8:	ebfffbae 	bl	1a598 <assertion_failed>
   1b6dc:	e3550000 	cmp	r5, #0
   1b6e0:	0a000016 	beq	1b740 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xd0>
   1b6e4:	e594301c 	ldr	r3, [r4, #28]
   1b6e8:	e3530000 	cmp	r3, #0
   1b6ec:	0a000003 	beq	1b700 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x90>
   1b6f0:	e3a020c4 	mov	r2, #196	; 0xc4
   1b6f4:	e59f1058 	ldr	r1, [pc, #88]	; 1b754 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe4>
   1b6f8:	e59f0064 	ldr	r0, [pc, #100]	; 1b764 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xf4>
   1b6fc:	ebfffba5 	bl	1a598 <assertion_failed>
   1b700:	e5940018 	ldr	r0, [r4, #24]
   1b704:	e584501c 	str	r5, [r4, #28]
   1b708:	e3500000 	cmp	r0, #0
   1b70c:	e5846020 	str	r6, [r4, #32]
   1b710:	0a000002 	beq	1b720 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xb0>
   1b714:	e1a01004 	mov	r1, r4
   1b718:	e8bd4070 	pop	{r4, r5, r6, lr}
   1b71c:	ea002000 	b	23724 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
   1b720:	e59f102c 	ldr	r1, [pc, #44]	; 1b754 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe4>
   1b724:	e59f003c 	ldr	r0, [pc, #60]	; 1b768 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xf8>
   1b728:	e3a020c9 	mov	r2, #201	; 0xc9
   1b72c:	ebfffb99 	bl	1a598 <assertion_failed>
   1b730:	e5940018 	ldr	r0, [r4, #24]
   1b734:	e1a01004 	mov	r1, r4
   1b738:	e8bd4070 	pop	{r4, r5, r6, lr}
   1b73c:	ea001ff8 	b	23724 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
   1b740:	e3a020c3 	mov	r2, #195	; 0xc3
   1b744:	e59f1008 	ldr	r1, [pc, #8]	; 1b754 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe4>
   1b748:	e59f001c 	ldr	r0, [pc, #28]	; 1b76c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xfc>
   1b74c:	ebfffb91 	bl	1a598 <assertion_failed>
   1b750:	eaffffe3 	b	1b6e4 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x74>
   1b754:	00028b04 	.word	0x00028b04
   1b758:	00028b7c 	.word	0x00028b7c
   1b75c:	00028bf4 	.word	0x00028bf4
   1b760:	00028c18 	.word	0x00028c18
   1b764:	00028c40 	.word	0x00028c40
   1b768:	00028c50 	.word	0x00028c50
   1b76c:	00028dc0 	.word	0x00028dc0

0001b770 <CGPIOPin::DisconnectInterrupt()>:
   1b770:	e5d03010 	ldrb	r3, [r0, #16]
   1b774:	e92d4010 	push	{r4, lr}
   1b778:	e2432002 	sub	r2, r3, #2
   1b77c:	e3530000 	cmp	r3, #0
   1b780:	13520001 	cmpne	r2, #1
   1b784:	e1a04000 	mov	r4, r0
   1b788:	9a000003 	bls	1b79c <CGPIOPin::DisconnectInterrupt()+0x2c>
   1b78c:	e3a020d1 	mov	r2, #209	; 0xd1
   1b790:	e59f109c 	ldr	r1, [pc, #156]	; 1b834 <CGPIOPin::DisconnectInterrupt()+0xc4>
   1b794:	e59f009c 	ldr	r0, [pc, #156]	; 1b838 <CGPIOPin::DisconnectInterrupt()+0xc8>
   1b798:	ebfffb7e 	bl	1a598 <assertion_failed>
   1b79c:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
   1b7a0:	e3530006 	cmp	r3, #6
   1b7a4:	0a000003 	beq	1b7b8 <CGPIOPin::DisconnectInterrupt()+0x48>
   1b7a8:	e3a020d3 	mov	r2, #211	; 0xd3
   1b7ac:	e59f1080 	ldr	r1, [pc, #128]	; 1b834 <CGPIOPin::DisconnectInterrupt()+0xc4>
   1b7b0:	e59f0084 	ldr	r0, [pc, #132]	; 1b83c <CGPIOPin::DisconnectInterrupt()+0xcc>
   1b7b4:	ebfffb77 	bl	1a598 <assertion_failed>
   1b7b8:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
   1b7bc:	e3530006 	cmp	r3, #6
   1b7c0:	0a000003 	beq	1b7d4 <CGPIOPin::DisconnectInterrupt()+0x64>
   1b7c4:	e3a020d4 	mov	r2, #212	; 0xd4
   1b7c8:	e59f1064 	ldr	r1, [pc, #100]	; 1b834 <CGPIOPin::DisconnectInterrupt()+0xc4>
   1b7cc:	e59f006c 	ldr	r0, [pc, #108]	; 1b840 <CGPIOPin::DisconnectInterrupt()+0xd0>
   1b7d0:	ebfffb70 	bl	1a598 <assertion_failed>
   1b7d4:	e594301c 	ldr	r3, [r4, #28]
   1b7d8:	e3530000 	cmp	r3, #0
   1b7dc:	0a00000f 	beq	1b820 <CGPIOPin::DisconnectInterrupt()+0xb0>
   1b7e0:	e3a03000 	mov	r3, #0
   1b7e4:	e5940018 	ldr	r0, [r4, #24]
   1b7e8:	e584301c 	str	r3, [r4, #28]
   1b7ec:	e1500003 	cmp	r0, r3
   1b7f0:	0a000002 	beq	1b800 <CGPIOPin::DisconnectInterrupt()+0x90>
   1b7f4:	e1a01004 	mov	r1, r4
   1b7f8:	e8bd4010 	pop	{r4, lr}
   1b7fc:	ea001ff1 	b	237c8 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
   1b800:	e59f102c 	ldr	r1, [pc, #44]	; 1b834 <CGPIOPin::DisconnectInterrupt()+0xc4>
   1b804:	e59f0038 	ldr	r0, [pc, #56]	; 1b844 <CGPIOPin::DisconnectInterrupt()+0xd4>
   1b808:	e3a020d9 	mov	r2, #217	; 0xd9
   1b80c:	ebfffb61 	bl	1a598 <assertion_failed>
   1b810:	e5940018 	ldr	r0, [r4, #24]
   1b814:	e1a01004 	mov	r1, r4
   1b818:	e8bd4010 	pop	{r4, lr}
   1b81c:	ea001fe9 	b	237c8 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
   1b820:	e3a020d6 	mov	r2, #214	; 0xd6
   1b824:	e59f1008 	ldr	r1, [pc, #8]	; 1b834 <CGPIOPin::DisconnectInterrupt()+0xc4>
   1b828:	e59f0018 	ldr	r0, [pc, #24]	; 1b848 <CGPIOPin::DisconnectInterrupt()+0xd8>
   1b82c:	ebfffb59 	bl	1a598 <assertion_failed>
   1b830:	eaffffea 	b	1b7e0 <CGPIOPin::DisconnectInterrupt()+0x70>
   1b834:	00028b04 	.word	0x00028b04
   1b838:	00028b7c 	.word	0x00028b7c
   1b83c:	00028bf4 	.word	0x00028bf4
   1b840:	00028c18 	.word	0x00028c18
   1b844:	00028c50 	.word	0x00028c50
   1b848:	00028c60 	.word	0x00028c60

0001b84c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)>:
   1b84c:	e5d03010 	ldrb	r3, [r0, #16]
   1b850:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1b854:	e2432002 	sub	r2, r3, #2
   1b858:	e3530000 	cmp	r3, #0
   1b85c:	13520001 	cmpne	r2, #1
   1b860:	e1a04000 	mov	r4, r0
   1b864:	e1a05001 	mov	r5, r1
   1b868:	9a000003 	bls	1b87c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x30>
   1b86c:	e3a020e1 	mov	r2, #225	; 0xe1
   1b870:	e59f10d8 	ldr	r1, [pc, #216]	; 1b950 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x104>
   1b874:	e59f00d8 	ldr	r0, [pc, #216]	; 1b954 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x108>
   1b878:	ebfffb46 	bl	1a598 <assertion_failed>
   1b87c:	e594301c 	ldr	r3, [r4, #28]
   1b880:	e3530000 	cmp	r3, #0
   1b884:	0a00002c 	beq	1b93c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf0>
   1b888:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
   1b88c:	e3530006 	cmp	r3, #6
   1b890:	0a000003 	beq	1b8a4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x58>
   1b894:	e3a020e4 	mov	r2, #228	; 0xe4
   1b898:	e59f10b0 	ldr	r1, [pc, #176]	; 1b950 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x104>
   1b89c:	e59f00b4 	ldr	r0, [pc, #180]	; 1b958 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x10c>
   1b8a0:	ebfffb3c 	bl	1a598 <assertion_failed>
   1b8a4:	e3550005 	cmp	r5, #5
   1b8a8:	ca000017 	bgt	1b90c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xc0>
   1b8ac:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
   1b8b0:	e1530005 	cmp	r3, r5
   1b8b4:	0a00001b 	beq	1b928 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xdc>
   1b8b8:	e59f709c 	ldr	r7, [pc, #156]	; 1b95c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x110>
   1b8bc:	e5942008 	ldr	r2, [r4, #8]
   1b8c0:	e5970000 	ldr	r0, [r7]
   1b8c4:	e59f6094 	ldr	r6, [pc, #148]	; 1b960 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x114>
   1b8c8:	e0853085 	add	r3, r5, r5, lsl #1
   1b8cc:	e3500000 	cmp	r0, #0
   1b8d0:	e5c45024 	strb	r5, [r4, #36]	; 0x24
   1b8d4:	e0826006 	add	r6, r2, r6
   1b8d8:	e1a05103 	lsl	r5, r3, #2
   1b8dc:	1a000008 	bne	1b904 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xb8>
   1b8e0:	e594200c 	ldr	r2, [r4, #12]
   1b8e4:	e7963005 	ldr	r3, [r6, r5]
   1b8e8:	e1833002 	orr	r3, r3, r2
   1b8ec:	e7863005 	str	r3, [r6, r5]
   1b8f0:	e5973000 	ldr	r3, [r7]
   1b8f4:	e3530000 	cmp	r3, #0
   1b8f8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   1b8fc:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1b900:	ea001bc8 	b	22828 <LeaveCritical>
   1b904:	eb001b9a 	bl	22774 <EnterCritical>
   1b908:	eafffff4 	b	1b8e0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x94>
   1b90c:	e3a020e5 	mov	r2, #229	; 0xe5
   1b910:	e59f1038 	ldr	r1, [pc, #56]	; 1b950 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x104>
   1b914:	e59f0048 	ldr	r0, [pc, #72]	; 1b964 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x118>
   1b918:	ebfffb1e 	bl	1a598 <assertion_failed>
   1b91c:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
   1b920:	e1530005 	cmp	r3, r5
   1b924:	1affffe3 	bne	1b8b8 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x6c>
   1b928:	e3a020e6 	mov	r2, #230	; 0xe6
   1b92c:	e59f101c 	ldr	r1, [pc, #28]	; 1b950 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x104>
   1b930:	e59f0030 	ldr	r0, [pc, #48]	; 1b968 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x11c>
   1b934:	ebfffb17 	bl	1a598 <assertion_failed>
   1b938:	eaffffde 	b	1b8b8 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x6c>
   1b93c:	e3a020e2 	mov	r2, #226	; 0xe2
   1b940:	e59f1008 	ldr	r1, [pc, #8]	; 1b950 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x104>
   1b944:	e59f0020 	ldr	r0, [pc, #32]	; 1b96c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x120>
   1b948:	ebfffb12 	bl	1a598 <assertion_failed>
   1b94c:	eaffffcd 	b	1b888 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x3c>
   1b950:	00028b04 	.word	0x00028b04
   1b954:	00028b7c 	.word	0x00028b7c
   1b958:	00028bf4 	.word	0x00028bf4
   1b95c:	0002b280 	.word	0x0002b280
   1b960:	2020004c 	.word	0x2020004c
   1b964:	00028c70 	.word	0x00028c70
   1b968:	00028c94 	.word	0x00028c94
   1b96c:	00028c60 	.word	0x00028c60

0001b970 <CGPIOPin::DisableInterrupt()>:
   1b970:	e5d03010 	ldrb	r3, [r0, #16]
   1b974:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1b978:	e2432002 	sub	r2, r3, #2
   1b97c:	e3530000 	cmp	r3, #0
   1b980:	13520001 	cmpne	r2, #1
   1b984:	e1a05000 	mov	r5, r0
   1b988:	9a000003 	bls	1b99c <CGPIOPin::DisableInterrupt()+0x2c>
   1b98c:	e3a020f7 	mov	r2, #247	; 0xf7
   1b990:	e59f1080 	ldr	r1, [pc, #128]	; 1ba18 <CGPIOPin::DisableInterrupt()+0xa8>
   1b994:	e59f0080 	ldr	r0, [pc, #128]	; 1ba1c <CGPIOPin::DisableInterrupt()+0xac>
   1b998:	ebfffafe 	bl	1a598 <assertion_failed>
   1b99c:	e5d53024 	ldrb	r3, [r5, #36]	; 0x24
   1b9a0:	e3530005 	cmp	r3, #5
   1b9a4:	ca000015 	bgt	1ba00 <CGPIOPin::DisableInterrupt()+0x90>
   1b9a8:	e59f7070 	ldr	r7, [pc, #112]	; 1ba20 <CGPIOPin::DisableInterrupt()+0xb0>
   1b9ac:	e5952008 	ldr	r2, [r5, #8]
   1b9b0:	e5970000 	ldr	r0, [r7]
   1b9b4:	e59f6068 	ldr	r6, [pc, #104]	; 1ba24 <CGPIOPin::DisableInterrupt()+0xb4>
   1b9b8:	e0833083 	add	r3, r3, r3, lsl #1
   1b9bc:	e3500000 	cmp	r0, #0
   1b9c0:	e1a04103 	lsl	r4, r3, #2
   1b9c4:	e0826006 	add	r6, r2, r6
   1b9c8:	1a00000a 	bne	1b9f8 <CGPIOPin::DisableInterrupt()+0x88>
   1b9cc:	e7963004 	ldr	r3, [r6, r4]
   1b9d0:	e595200c 	ldr	r2, [r5, #12]
   1b9d4:	e1c33002 	bic	r3, r3, r2
   1b9d8:	e7863004 	str	r3, [r6, r4]
   1b9dc:	e5973000 	ldr	r3, [r7]
   1b9e0:	e3530000 	cmp	r3, #0
   1b9e4:	0a000000 	beq	1b9ec <CGPIOPin::DisableInterrupt()+0x7c>
   1b9e8:	eb001b8e 	bl	22828 <LeaveCritical>
   1b9ec:	e3a03006 	mov	r3, #6
   1b9f0:	e5c53024 	strb	r3, [r5, #36]	; 0x24
   1b9f4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1b9f8:	eb001b5d 	bl	22774 <EnterCritical>
   1b9fc:	eafffff2 	b	1b9cc <CGPIOPin::DisableInterrupt()+0x5c>
   1ba00:	e3a020f9 	mov	r2, #249	; 0xf9
   1ba04:	e59f100c 	ldr	r1, [pc, #12]	; 1ba18 <CGPIOPin::DisableInterrupt()+0xa8>
   1ba08:	e59f0018 	ldr	r0, [pc, #24]	; 1ba28 <CGPIOPin::DisableInterrupt()+0xb8>
   1ba0c:	ebfffae1 	bl	1a598 <assertion_failed>
   1ba10:	e5d53024 	ldrb	r3, [r5, #36]	; 0x24
   1ba14:	eaffffe3 	b	1b9a8 <CGPIOPin::DisableInterrupt()+0x38>
   1ba18:	00028b04 	.word	0x00028b04
   1ba1c:	00028b7c 	.word	0x00028b7c
   1ba20:	0002b280 	.word	0x0002b280
   1ba24:	2020004c 	.word	0x2020004c
   1ba28:	00028cb0 	.word	0x00028cb0

0001ba2c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)>:
   1ba2c:	e5d03010 	ldrb	r3, [r0, #16]
   1ba30:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1ba34:	e2432002 	sub	r2, r3, #2
   1ba38:	e3530000 	cmp	r3, #0
   1ba3c:	13520001 	cmpne	r2, #1
   1ba40:	e1a04000 	mov	r4, r0
   1ba44:	e1a05001 	mov	r5, r1
   1ba48:	9a000003 	bls	1ba5c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x30>
   1ba4c:	e59f20dc 	ldr	r2, [pc, #220]	; 1bb30 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x104>
   1ba50:	e59f10dc 	ldr	r1, [pc, #220]	; 1bb34 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x108>
   1ba54:	e59f00dc 	ldr	r0, [pc, #220]	; 1bb38 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x10c>
   1ba58:	ebffface 	bl	1a598 <assertion_failed>
   1ba5c:	e594301c 	ldr	r3, [r4, #28]
   1ba60:	e3530000 	cmp	r3, #0
   1ba64:	0a00002c 	beq	1bb1c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf0>
   1ba68:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
   1ba6c:	e3530006 	cmp	r3, #6
   1ba70:	0a000003 	beq	1ba84 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x58>
   1ba74:	e59f20c0 	ldr	r2, [pc, #192]	; 1bb3c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x110>
   1ba78:	e59f10b4 	ldr	r1, [pc, #180]	; 1bb34 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x108>
   1ba7c:	e59f00bc 	ldr	r0, [pc, #188]	; 1bb40 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x114>
   1ba80:	ebfffac4 	bl	1a598 <assertion_failed>
   1ba84:	e3550005 	cmp	r5, #5
   1ba88:	ca000017 	bgt	1baec <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xc0>
   1ba8c:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
   1ba90:	e1530005 	cmp	r3, r5
   1ba94:	0a00001b 	beq	1bb08 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xdc>
   1ba98:	e59f70a4 	ldr	r7, [pc, #164]	; 1bb44 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x118>
   1ba9c:	e5942008 	ldr	r2, [r4, #8]
   1baa0:	e5970000 	ldr	r0, [r7]
   1baa4:	e59f609c 	ldr	r6, [pc, #156]	; 1bb48 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x11c>
   1baa8:	e0853085 	add	r3, r5, r5, lsl #1
   1baac:	e3500000 	cmp	r0, #0
   1bab0:	e5c45025 	strb	r5, [r4, #37]	; 0x25
   1bab4:	e0826006 	add	r6, r2, r6
   1bab8:	e1a05103 	lsl	r5, r3, #2
   1babc:	1a000008 	bne	1bae4 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xb8>
   1bac0:	e594200c 	ldr	r2, [r4, #12]
   1bac4:	e7963005 	ldr	r3, [r6, r5]
   1bac8:	e1833002 	orr	r3, r3, r2
   1bacc:	e7863005 	str	r3, [r6, r5]
   1bad0:	e5973000 	ldr	r3, [r7]
   1bad4:	e3530000 	cmp	r3, #0
   1bad8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   1badc:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1bae0:	ea001b50 	b	22828 <LeaveCritical>
   1bae4:	eb001b22 	bl	22774 <EnterCritical>
   1bae8:	eafffff4 	b	1bac0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x94>
   1baec:	e59f2058 	ldr	r2, [pc, #88]	; 1bb4c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x120>
   1baf0:	e59f103c 	ldr	r1, [pc, #60]	; 1bb34 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x108>
   1baf4:	e59f0054 	ldr	r0, [pc, #84]	; 1bb50 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x124>
   1baf8:	ebfffaa6 	bl	1a598 <assertion_failed>
   1bafc:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
   1bb00:	e1530005 	cmp	r3, r5
   1bb04:	1affffe3 	bne	1ba98 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x6c>
   1bb08:	e59f2044 	ldr	r2, [pc, #68]	; 1bb54 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x128>
   1bb0c:	e59f1020 	ldr	r1, [pc, #32]	; 1bb34 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x108>
   1bb10:	e59f0040 	ldr	r0, [pc, #64]	; 1bb58 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x12c>
   1bb14:	ebfffa9f 	bl	1a598 <assertion_failed>
   1bb18:	eaffffde 	b	1ba98 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x6c>
   1bb1c:	e59f2038 	ldr	r2, [pc, #56]	; 1bb5c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x130>
   1bb20:	e59f100c 	ldr	r1, [pc, #12]	; 1bb34 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x108>
   1bb24:	e59f0034 	ldr	r0, [pc, #52]	; 1bb60 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x134>
   1bb28:	ebfffa9a 	bl	1a598 <assertion_failed>
   1bb2c:	eaffffcd 	b	1ba68 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x3c>
   1bb30:	0000010a 	.word	0x0000010a
   1bb34:	00028b04 	.word	0x00028b04
   1bb38:	00028b7c 	.word	0x00028b7c
   1bb3c:	0000010d 	.word	0x0000010d
   1bb40:	00028c18 	.word	0x00028c18
   1bb44:	0002b280 	.word	0x0002b280
   1bb48:	2020004c 	.word	0x2020004c
   1bb4c:	0000010e 	.word	0x0000010e
   1bb50:	00028c70 	.word	0x00028c70
   1bb54:	0000010f 	.word	0x0000010f
   1bb58:	00028cd4 	.word	0x00028cd4
   1bb5c:	0000010b 	.word	0x0000010b
   1bb60:	00028c60 	.word	0x00028c60

0001bb64 <CGPIOPin::DisableInterrupt2()>:
   1bb64:	e5d03010 	ldrb	r3, [r0, #16]
   1bb68:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1bb6c:	e2432002 	sub	r2, r3, #2
   1bb70:	e3530000 	cmp	r3, #0
   1bb74:	13520001 	cmpne	r2, #1
   1bb78:	e1a05000 	mov	r5, r0
   1bb7c:	9a000003 	bls	1bb90 <CGPIOPin::DisableInterrupt2()+0x2c>
   1bb80:	e3a02e12 	mov	r2, #288	; 0x120
   1bb84:	e59f1080 	ldr	r1, [pc, #128]	; 1bc0c <CGPIOPin::DisableInterrupt2()+0xa8>
   1bb88:	e59f0080 	ldr	r0, [pc, #128]	; 1bc10 <CGPIOPin::DisableInterrupt2()+0xac>
   1bb8c:	ebfffa81 	bl	1a598 <assertion_failed>
   1bb90:	e5d53025 	ldrb	r3, [r5, #37]	; 0x25
   1bb94:	e3530005 	cmp	r3, #5
   1bb98:	ca000015 	bgt	1bbf4 <CGPIOPin::DisableInterrupt2()+0x90>
   1bb9c:	e59f7070 	ldr	r7, [pc, #112]	; 1bc14 <CGPIOPin::DisableInterrupt2()+0xb0>
   1bba0:	e5952008 	ldr	r2, [r5, #8]
   1bba4:	e5970000 	ldr	r0, [r7]
   1bba8:	e59f6068 	ldr	r6, [pc, #104]	; 1bc18 <CGPIOPin::DisableInterrupt2()+0xb4>
   1bbac:	e0833083 	add	r3, r3, r3, lsl #1
   1bbb0:	e3500000 	cmp	r0, #0
   1bbb4:	e1a04103 	lsl	r4, r3, #2
   1bbb8:	e0826006 	add	r6, r2, r6
   1bbbc:	1a00000a 	bne	1bbec <CGPIOPin::DisableInterrupt2()+0x88>
   1bbc0:	e7963004 	ldr	r3, [r6, r4]
   1bbc4:	e595200c 	ldr	r2, [r5, #12]
   1bbc8:	e1c33002 	bic	r3, r3, r2
   1bbcc:	e7863004 	str	r3, [r6, r4]
   1bbd0:	e5973000 	ldr	r3, [r7]
   1bbd4:	e3530000 	cmp	r3, #0
   1bbd8:	0a000000 	beq	1bbe0 <CGPIOPin::DisableInterrupt2()+0x7c>
   1bbdc:	eb001b11 	bl	22828 <LeaveCritical>
   1bbe0:	e3a03006 	mov	r3, #6
   1bbe4:	e5c53025 	strb	r3, [r5, #37]	; 0x25
   1bbe8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1bbec:	eb001ae0 	bl	22774 <EnterCritical>
   1bbf0:	eafffff2 	b	1bbc0 <CGPIOPin::DisableInterrupt2()+0x5c>
   1bbf4:	e59f2020 	ldr	r2, [pc, #32]	; 1bc1c <CGPIOPin::DisableInterrupt2()+0xb8>
   1bbf8:	e59f100c 	ldr	r1, [pc, #12]	; 1bc0c <CGPIOPin::DisableInterrupt2()+0xa8>
   1bbfc:	e59f001c 	ldr	r0, [pc, #28]	; 1bc20 <CGPIOPin::DisableInterrupt2()+0xbc>
   1bc00:	ebfffa64 	bl	1a598 <assertion_failed>
   1bc04:	e5d53025 	ldrb	r3, [r5, #37]	; 0x25
   1bc08:	eaffffe3 	b	1bb9c <CGPIOPin::DisableInterrupt2()+0x38>
   1bc0c:	00028b04 	.word	0x00028b04
   1bc10:	00028b7c 	.word	0x00028b7c
   1bc14:	0002b280 	.word	0x0002b280
   1bc18:	2020004c 	.word	0x2020004c
   1bc1c:	00000122 	.word	0x00000122
   1bc20:	00028cf0 	.word	0x00028cf0

0001bc24 <CGPIOPin::ReadAll()>:
   1bc24:	e59f3004 	ldr	r3, [pc, #4]	; 1bc30 <CGPIOPin::ReadAll()+0xc>
   1bc28:	e5930034 	ldr	r0, [r3, #52]	; 0x34
   1bc2c:	e12fff1e 	bx	lr
   1bc30:	20200000 	.word	0x20200000

0001bc34 <CGPIOPin::SetPullUpMode(unsigned int)>:
   1bc34:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1bc38:	e1a08000 	mov	r8, r0
   1bc3c:	e59f4078 	ldr	r4, [pc, #120]	; 1bcbc <CGPIOPin::SetPullUpMode(unsigned int)+0x88>
   1bc40:	e1a09001 	mov	r9, r1
   1bc44:	e5940000 	ldr	r0, [r4]
   1bc48:	e5986008 	ldr	r6, [r8, #8]
   1bc4c:	e3500000 	cmp	r0, #0
   1bc50:	e59f5068 	ldr	r5, [pc, #104]	; 1bcc0 <CGPIOPin::SetPullUpMode(unsigned int)+0x8c>
   1bc54:	1a000016 	bne	1bcb4 <CGPIOPin::SetPullUpMode(unsigned int)+0x80>
   1bc58:	e3590002 	cmp	r9, #2
   1bc5c:	8a00000f 	bhi	1bca0 <CGPIOPin::SetPullUpMode(unsigned int)+0x6c>
   1bc60:	e59f705c 	ldr	r7, [pc, #92]	; 1bcc4 <CGPIOPin::SetPullUpMode(unsigned int)+0x90>
   1bc64:	e3a00005 	mov	r0, #5
   1bc68:	e5879094 	str	r9, [r7, #148]	; 0x94
   1bc6c:	eb00166b 	bl	21620 <CTimer::SimpleusDelay(unsigned int)>
   1bc70:	e598300c 	ldr	r3, [r8, #12]
   1bc74:	e3a00005 	mov	r0, #5
   1bc78:	e7863005 	str	r3, [r6, r5]
   1bc7c:	eb001667 	bl	21620 <CTimer::SimpleusDelay(unsigned int)>
   1bc80:	e3a03000 	mov	r3, #0
   1bc84:	e5873094 	str	r3, [r7, #148]	; 0x94
   1bc88:	e7863005 	str	r3, [r6, r5]
   1bc8c:	e5943000 	ldr	r3, [r4]
   1bc90:	e3530000 	cmp	r3, #0
   1bc94:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1bc98:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1bc9c:	ea001ae1 	b	22828 <LeaveCritical>
   1bca0:	e59f2020 	ldr	r2, [pc, #32]	; 1bcc8 <CGPIOPin::SetPullUpMode(unsigned int)+0x94>
   1bca4:	e59f1020 	ldr	r1, [pc, #32]	; 1bccc <CGPIOPin::SetPullUpMode(unsigned int)+0x98>
   1bca8:	e59f0020 	ldr	r0, [pc, #32]	; 1bcd0 <CGPIOPin::SetPullUpMode(unsigned int)+0x9c>
   1bcac:	ebfffa39 	bl	1a598 <assertion_failed>
   1bcb0:	eaffffea 	b	1bc60 <CGPIOPin::SetPullUpMode(unsigned int)+0x2c>
   1bcb4:	eb001aae 	bl	22774 <EnterCritical>
   1bcb8:	eaffffe6 	b	1bc58 <CGPIOPin::SetPullUpMode(unsigned int)+0x24>
   1bcbc:	0002b280 	.word	0x0002b280
   1bcc0:	20200098 	.word	0x20200098
   1bcc4:	20200000 	.word	0x20200000
   1bcc8:	0000013b 	.word	0x0000013b
   1bccc:	00028b04 	.word	0x00028b04
   1bcd0:	00028d14 	.word	0x00028d14

0001bcd4 <CGPIOPin::SetAlternateFunction(unsigned int)>:
   1bcd4:	e5902004 	ldr	r2, [r0, #4]
   1bcd8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1bcdc:	e3520035 	cmp	r2, #53	; 0x35
   1bce0:	e1a06001 	mov	r6, r1
   1bce4:	8a000022 	bhi	1bd74 <CGPIOPin::SetAlternateFunction(unsigned int)+0xa0>
   1bce8:	e59f30a0 	ldr	r3, [pc, #160]	; 1bd90 <CGPIOPin::SetAlternateFunction(unsigned int)+0xbc>
   1bcec:	e3560005 	cmp	r6, #5
   1bcf0:	e0831293 	umull	r1, r3, r3, r2
   1bcf4:	e1a031a3 	lsr	r3, r3, #3
   1bcf8:	e2835302 	add	r5, r3, #134217728	; 0x8000000
   1bcfc:	e0833103 	add	r3, r3, r3, lsl #2
   1bd00:	e2855702 	add	r5, r5, #524288	; 0x80000
   1bd04:	e0423083 	sub	r3, r2, r3, lsl #1
   1bd08:	e1a05105 	lsl	r5, r5, #2
   1bd0c:	e0834083 	add	r4, r3, r3, lsl #1
   1bd10:	8a000012 	bhi	1bd60 <CGPIOPin::SetAlternateFunction(unsigned int)+0x8c>
   1bd14:	e59f7078 	ldr	r7, [pc, #120]	; 1bd94 <CGPIOPin::SetAlternateFunction(unsigned int)+0xc0>
   1bd18:	e5970000 	ldr	r0, [r7]
   1bd1c:	e3500000 	cmp	r0, #0
   1bd20:	1a00000c 	bne	1bd58 <CGPIOPin::SetAlternateFunction(unsigned int)+0x84>
   1bd24:	e3a01007 	mov	r1, #7
   1bd28:	e59f3068 	ldr	r3, [pc, #104]	; 1bd98 <CGPIOPin::SetAlternateFunction(unsigned int)+0xc4>
   1bd2c:	e5952000 	ldr	r2, [r5]
   1bd30:	e0836106 	add	r6, r3, r6, lsl #2
   1bd34:	e5963010 	ldr	r3, [r6, #16]
   1bd38:	e1c22411 	bic	r2, r2, r1, lsl r4
   1bd3c:	e1824413 	orr	r4, r2, r3, lsl r4
   1bd40:	e5854000 	str	r4, [r5]
   1bd44:	e5973000 	ldr	r3, [r7]
   1bd48:	e3530000 	cmp	r3, #0
   1bd4c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   1bd50:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1bd54:	ea001ab3 	b	22828 <LeaveCritical>
   1bd58:	eb001a85 	bl	22774 <EnterCritical>
   1bd5c:	eafffff0 	b	1bd24 <CGPIOPin::SetAlternateFunction(unsigned int)+0x50>
   1bd60:	e3a02f53 	mov	r2, #332	; 0x14c
   1bd64:	e59f1030 	ldr	r1, [pc, #48]	; 1bd9c <CGPIOPin::SetAlternateFunction(unsigned int)+0xc8>
   1bd68:	e59f0030 	ldr	r0, [pc, #48]	; 1bda0 <CGPIOPin::SetAlternateFunction(unsigned int)+0xcc>
   1bd6c:	ebfffa09 	bl	1a598 <assertion_failed>
   1bd70:	eaffffe7 	b	1bd14 <CGPIOPin::SetAlternateFunction(unsigned int)+0x40>
   1bd74:	e1a04000 	mov	r4, r0
   1bd78:	e3a02f52 	mov	r2, #328	; 0x148
   1bd7c:	e59f1018 	ldr	r1, [pc, #24]	; 1bd9c <CGPIOPin::SetAlternateFunction(unsigned int)+0xc8>
   1bd80:	e59f001c 	ldr	r0, [pc, #28]	; 1bda4 <CGPIOPin::SetAlternateFunction(unsigned int)+0xd0>
   1bd84:	ebfffa03 	bl	1a598 <assertion_failed>
   1bd88:	e5942004 	ldr	r2, [r4, #4]
   1bd8c:	eaffffd5 	b	1bce8 <CGPIOPin::SetAlternateFunction(unsigned int)+0x14>
   1bd90:	cccccccd 	.word	0xcccccccd
   1bd94:	0002b280 	.word	0x0002b280
   1bd98:	00028adc 	.word	0x00028adc
   1bd9c:	00028b04 	.word	0x00028b04
   1bda0:	00028d20 	.word	0x00028d20
   1bda4:	00028b24 	.word	0x00028b24

0001bda8 <CGPIOPin::SetMode(TGPIOMode, bool)>:
   1bda8:	e3510009 	cmp	r1, #9
   1bdac:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1bdb0:	e1a05001 	mov	r5, r1
   1bdb4:	e1a04000 	mov	r4, r0
   1bdb8:	e1a06002 	mov	r6, r2
   1bdbc:	ca00003f 	bgt	1bec0 <CGPIOPin::SetMode(TGPIOMode, bool)+0x118>
   1bdc0:	e5c45010 	strb	r5, [r4, #16]
   1bdc4:	e3a02000 	mov	r2, #0
   1bdc8:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
   1bdcc:	e5d43010 	ldrb	r3, [r4, #16]
   1bdd0:	e2431004 	sub	r1, r3, #4
   1bdd4:	e6ef0071 	uxtb	r0, r1
   1bdd8:	e3500005 	cmp	r0, #5
   1bddc:	9a000030 	bls	1bea4 <CGPIOPin::SetMode(TGPIOMode, bool)+0xfc>
   1bde0:	e3530001 	cmp	r3, #1
   1bde4:	13a03000 	movne	r3, #0
   1bde8:	02063001 	andeq	r3, r6, #1
   1bdec:	e3530000 	cmp	r3, #0
   1bdf0:	1a000055 	bne	1bf4c <CGPIOPin::SetMode(TGPIOMode, bool)+0x1a4>
   1bdf4:	e5943004 	ldr	r3, [r4, #4]
   1bdf8:	e3530035 	cmp	r3, #53	; 0x35
   1bdfc:	8a00003a 	bhi	1beec <CGPIOPin::SetMode(TGPIOMode, bool)+0x144>
   1be00:	e59f5154 	ldr	r5, [pc, #340]	; 1bf5c <CGPIOPin::SetMode(TGPIOMode, bool)+0x1b4>
   1be04:	e59f8154 	ldr	r8, [pc, #340]	; 1bf60 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1b8>
   1be08:	e0852395 	umull	r2, r5, r5, r3
   1be0c:	e5980000 	ldr	r0, [r8]
   1be10:	e1a051a5 	lsr	r5, r5, #3
   1be14:	e2857302 	add	r7, r5, #134217728	; 0x8000000
   1be18:	e0855105 	add	r5, r5, r5, lsl #2
   1be1c:	e2877702 	add	r7, r7, #524288	; 0x80000
   1be20:	e0435085 	sub	r5, r3, r5, lsl #1
   1be24:	e3500000 	cmp	r0, #0
   1be28:	e1a07107 	lsl	r7, r7, #2
   1be2c:	e0855085 	add	r5, r5, r5, lsl #1
   1be30:	1a000033 	bne	1bf04 <CGPIOPin::SetMode(TGPIOMode, bool)+0x15c>
   1be34:	e5d42010 	ldrb	r2, [r4, #16]
   1be38:	e3a01007 	mov	r1, #7
   1be3c:	e2422001 	sub	r2, r2, #1
   1be40:	e16f2f12 	clz	r2, r2
   1be44:	e5973000 	ldr	r3, [r7]
   1be48:	e1a022a2 	lsr	r2, r2, #5
   1be4c:	e1c33511 	bic	r3, r3, r1, lsl r5
   1be50:	e1835512 	orr	r5, r3, r2, lsl r5
   1be54:	e5875000 	str	r5, [r7]
   1be58:	e5983000 	ldr	r3, [r8]
   1be5c:	e3530000 	cmp	r3, #0
   1be60:	1a000029 	bne	1bf0c <CGPIOPin::SetMode(TGPIOMode, bool)+0x164>
   1be64:	e3560000 	cmp	r6, #0
   1be68:	0a00000a 	beq	1be98 <CGPIOPin::SetMode(TGPIOMode, bool)+0xf0>
   1be6c:	e5d43010 	ldrb	r3, [r4, #16]
   1be70:	e3530003 	cmp	r3, #3
   1be74:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1be78:	ea000006 	b	1be98 <CGPIOPin::SetMode(TGPIOMode, bool)+0xf0>
   1be7c:	0001bf3c 	.word	0x0001bf3c
   1be80:	0001bf2c 	.word	0x0001bf2c
   1be84:	0001bf1c 	.word	0x0001bf1c
   1be88:	0001be8c 	.word	0x0001be8c
   1be8c:	e1a00004 	mov	r0, r4
   1be90:	e3a01001 	mov	r1, #1
   1be94:	ebffff66 	bl	1bc34 <CGPIOPin::SetPullUpMode(unsigned int)>
   1be98:	e3a03000 	mov	r3, #0
   1be9c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   1bea0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1bea4:	e1560002 	cmp	r6, r2
   1bea8:	1a000009 	bne	1bed4 <CGPIOPin::SetMode(TGPIOMode, bool)+0x12c>
   1beac:	e1a00004 	mov	r0, r4
   1beb0:	ebffff87 	bl	1bcd4 <CGPIOPin::SetAlternateFunction(unsigned int)>
   1beb4:	e3a03000 	mov	r3, #0
   1beb8:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   1bebc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1bec0:	e3a0204f 	mov	r2, #79	; 0x4f
   1bec4:	e59f1098 	ldr	r1, [pc, #152]	; 1bf64 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1bc>
   1bec8:	e59f0098 	ldr	r0, [pc, #152]	; 1bf68 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1c0>
   1becc:	ebfff9b1 	bl	1a598 <assertion_failed>
   1bed0:	eaffffba 	b	1bdc0 <CGPIOPin::SetMode(TGPIOMode, bool)+0x18>
   1bed4:	e1a01002 	mov	r1, r2
   1bed8:	e1a00004 	mov	r0, r4
   1bedc:	ebffff54 	bl	1bc34 <CGPIOPin::SetPullUpMode(unsigned int)>
   1bee0:	e5d43010 	ldrb	r3, [r4, #16]
   1bee4:	e2431004 	sub	r1, r3, #4
   1bee8:	eaffffef 	b	1beac <CGPIOPin::SetMode(TGPIOMode, bool)+0x104>
   1beec:	e3a02068 	mov	r2, #104	; 0x68
   1bef0:	e59f106c 	ldr	r1, [pc, #108]	; 1bf64 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1bc>
   1bef4:	e59f0070 	ldr	r0, [pc, #112]	; 1bf6c <CGPIOPin::SetMode(TGPIOMode, bool)+0x1c4>
   1bef8:	ebfff9a6 	bl	1a598 <assertion_failed>
   1befc:	e5943004 	ldr	r3, [r4, #4]
   1bf00:	eaffffbe 	b	1be00 <CGPIOPin::SetMode(TGPIOMode, bool)+0x58>
   1bf04:	eb001a1a 	bl	22774 <EnterCritical>
   1bf08:	eaffffc9 	b	1be34 <CGPIOPin::SetMode(TGPIOMode, bool)+0x8c>
   1bf0c:	eb001a45 	bl	22828 <LeaveCritical>
   1bf10:	e3560000 	cmp	r6, #0
   1bf14:	0affffdf 	beq	1be98 <CGPIOPin::SetMode(TGPIOMode, bool)+0xf0>
   1bf18:	eaffffd3 	b	1be6c <CGPIOPin::SetMode(TGPIOMode, bool)+0xc4>
   1bf1c:	e1a00004 	mov	r0, r4
   1bf20:	e3a01002 	mov	r1, #2
   1bf24:	ebffff42 	bl	1bc34 <CGPIOPin::SetPullUpMode(unsigned int)>
   1bf28:	eaffffda 	b	1be98 <CGPIOPin::SetMode(TGPIOMode, bool)+0xf0>
   1bf2c:	e1a00004 	mov	r0, r4
   1bf30:	e3a01000 	mov	r1, #0
   1bf34:	ebfffd6b 	bl	1b4e8 <CGPIOPin::Write(unsigned int)>
   1bf38:	eaffffd6 	b	1be98 <CGPIOPin::SetMode(TGPIOMode, bool)+0xf0>
   1bf3c:	e1a00004 	mov	r0, r4
   1bf40:	e3a01000 	mov	r1, #0
   1bf44:	ebffff3a 	bl	1bc34 <CGPIOPin::SetPullUpMode(unsigned int)>
   1bf48:	eaffffd2 	b	1be98 <CGPIOPin::SetMode(TGPIOMode, bool)+0xf0>
   1bf4c:	e1a01002 	mov	r1, r2
   1bf50:	e1a00004 	mov	r0, r4
   1bf54:	ebffff36 	bl	1bc34 <CGPIOPin::SetPullUpMode(unsigned int)>
   1bf58:	eaffffa5 	b	1bdf4 <CGPIOPin::SetMode(TGPIOMode, bool)+0x4c>
   1bf5c:	cccccccd 	.word	0xcccccccd
   1bf60:	0002b280 	.word	0x0002b280
   1bf64:	00028b04 	.word	0x00028b04
   1bf68:	00028d30 	.word	0x00028d30
   1bf6c:	00028b24 	.word	0x00028b24

0001bf70 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>:
   1bf70:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1bf74:	e3a0c006 	mov	ip, #6
   1bf78:	e3a0e000 	mov	lr, #0
   1bf7c:	e3a07036 	mov	r7, #54	; 0x36
   1bf80:	e3a0600a 	mov	r6, #10
   1bf84:	e1a04000 	mov	r4, r0
   1bf88:	e1a05002 	mov	r5, r2
   1bf8c:	e5803018 	str	r3, [r0, #24]
   1bf90:	e59f302c 	ldr	r3, [pc, #44]	; 1bfc4 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x54>
   1bf94:	e580e01c 	str	lr, [r0, #28]
   1bf98:	e8800088 	stm	r0, {r3, r7}
   1bf9c:	e5c0c024 	strb	ip, [r0, #36]	; 0x24
   1bfa0:	e5c0c025 	strb	ip, [r0, #37]	; 0x25
   1bfa4:	e5c06010 	strb	r6, [r0, #16]
   1bfa8:	ebfffd29 	bl	1b454 <CGPIOPin::AssignPin(unsigned int)>
   1bfac:	e1a00004 	mov	r0, r4
   1bfb0:	e1a01005 	mov	r1, r5
   1bfb4:	e3a02001 	mov	r2, #1
   1bfb8:	ebffff7a 	bl	1bda8 <CGPIOPin::SetMode(TGPIOMode, bool)>
   1bfbc:	e1a00004 	mov	r0, r4
   1bfc0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1bfc4:	00028ae4 	.word	0x00028ae4

0001bfc8 <CGPIOPin::InterruptHandler()>:
   1bfc8:	e5d03010 	ldrb	r3, [r0, #16]
   1bfcc:	e92d4010 	push	{r4, lr}
   1bfd0:	e2432002 	sub	r2, r3, #2
   1bfd4:	e3530000 	cmp	r3, #0
   1bfd8:	13520001 	cmpne	r2, #1
   1bfdc:	e1a04000 	mov	r4, r0
   1bfe0:	9a000003 	bls	1bff4 <CGPIOPin::InterruptHandler()+0x2c>
   1bfe4:	e59f2074 	ldr	r2, [pc, #116]	; 1c060 <CGPIOPin::InterruptHandler()+0x98>
   1bfe8:	e59f1074 	ldr	r1, [pc, #116]	; 1c064 <CGPIOPin::InterruptHandler()+0x9c>
   1bfec:	e59f0074 	ldr	r0, [pc, #116]	; 1c068 <CGPIOPin::InterruptHandler()+0xa0>
   1bff0:	ebfff968 	bl	1a598 <assertion_failed>
   1bff4:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
   1bff8:	e3530005 	cmp	r3, #5
   1bffc:	da000002 	ble	1c00c <CGPIOPin::InterruptHandler()+0x44>
   1c000:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
   1c004:	e3530005 	cmp	r3, #5
   1c008:	ca000005 	bgt	1c024 <CGPIOPin::InterruptHandler()+0x5c>
   1c00c:	e594301c 	ldr	r3, [r4, #28]
   1c010:	e3530000 	cmp	r3, #0
   1c014:	0a000009 	beq	1c040 <CGPIOPin::InterruptHandler()+0x78>
   1c018:	e5940020 	ldr	r0, [r4, #32]
   1c01c:	e8bd4010 	pop	{r4, lr}
   1c020:	e12fff13 	bx	r3
   1c024:	e59f2040 	ldr	r2, [pc, #64]	; 1c06c <CGPIOPin::InterruptHandler()+0xa4>
   1c028:	e59f1034 	ldr	r1, [pc, #52]	; 1c064 <CGPIOPin::InterruptHandler()+0x9c>
   1c02c:	e59f003c 	ldr	r0, [pc, #60]	; 1c070 <CGPIOPin::InterruptHandler()+0xa8>
   1c030:	ebfff958 	bl	1a598 <assertion_failed>
   1c034:	e594301c 	ldr	r3, [r4, #28]
   1c038:	e3530000 	cmp	r3, #0
   1c03c:	1afffff5 	bne	1c018 <CGPIOPin::InterruptHandler()+0x50>
   1c040:	e59f002c 	ldr	r0, [pc, #44]	; 1c074 <CGPIOPin::InterruptHandler()+0xac>
   1c044:	e59f202c 	ldr	r2, [pc, #44]	; 1c078 <CGPIOPin::InterruptHandler()+0xb0>
   1c048:	e59f1014 	ldr	r1, [pc, #20]	; 1c064 <CGPIOPin::InterruptHandler()+0x9c>
   1c04c:	ebfff951 	bl	1a598 <assertion_failed>
   1c050:	e594301c 	ldr	r3, [r4, #28]
   1c054:	e5940020 	ldr	r0, [r4, #32]
   1c058:	e8bd4010 	pop	{r4, lr}
   1c05c:	e12fff13 	bx	r3
   1c060:	0000015b 	.word	0x0000015b
   1c064:	00028b04 	.word	0x00028b04
   1c068:	00028b7c 	.word	0x00028b7c
   1c06c:	0000015d 	.word	0x0000015d
   1c070:	00028d48 	.word	0x00028d48
   1c074:	00028c60 	.word	0x00028c60
   1c078:	0000015f 	.word	0x0000015f

0001c07c <CGPIOPin::DisableAllInterrupts(unsigned int)>:
   1c07c:	e3500035 	cmp	r0, #53	; 0x35
   1c080:	e92d4070 	push	{r4, r5, r6, lr}
   1c084:	e1a05000 	mov	r5, r0
   1c088:	8a00001e 	bhi	1c108 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x8c>
   1c08c:	e3a02001 	mov	r2, #1
   1c090:	e59f6084 	ldr	r6, [pc, #132]	; 1c11c <CGPIOPin::DisableAllInterrupts(unsigned int)+0xa0>
   1c094:	e59f4084 	ldr	r4, [pc, #132]	; 1c120 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xa4>
   1c098:	e5960000 	ldr	r0, [r6]
   1c09c:	e08442a5 	add	r4, r4, r5, lsr #5
   1c0a0:	e3500000 	cmp	r0, #0
   1c0a4:	e205501f 	and	r5, r5, #31
   1c0a8:	e1a04104 	lsl	r4, r4, #2
   1c0ac:	e1a05512 	lsl	r5, r2, r5
   1c0b0:	1a00000f 	bne	1c0f4 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x78>
   1c0b4:	e59f3068 	ldr	r3, [pc, #104]	; 1c124 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xa8>
   1c0b8:	e1540003 	cmp	r4, r3
   1c0bc:	8a00000b 	bhi	1c0f0 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x74>
   1c0c0:	e1e02005 	mvn	r2, r5
   1c0c4:	e59f1058 	ldr	r1, [pc, #88]	; 1c124 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xa8>
   1c0c8:	e5943000 	ldr	r3, [r4]
   1c0cc:	e0033002 	and	r3, r3, r2
   1c0d0:	e484300c 	str	r3, [r4], #12
   1c0d4:	e1540001 	cmp	r4, r1
   1c0d8:	9afffffa 	bls	1c0c8 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x4c>
   1c0dc:	e5963000 	ldr	r3, [r6]
   1c0e0:	e3530000 	cmp	r3, #0
   1c0e4:	08bd8070 	popeq	{r4, r5, r6, pc}
   1c0e8:	e8bd4070 	pop	{r4, r5, r6, lr}
   1c0ec:	ea0019cd 	b	22828 <LeaveCritical>
   1c0f0:	e8bd8070 	pop	{r4, r5, r6, pc}
   1c0f4:	eb00199e 	bl	22774 <EnterCritical>
   1c0f8:	e59f3024 	ldr	r3, [pc, #36]	; 1c124 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xa8>
   1c0fc:	e1540003 	cmp	r4, r3
   1c100:	9affffee 	bls	1c0c0 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x44>
   1c104:	eafffff4 	b	1c0dc <CGPIOPin::DisableAllInterrupts(unsigned int)+0x60>
   1c108:	e59f2018 	ldr	r2, [pc, #24]	; 1c128 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xac>
   1c10c:	e59f1018 	ldr	r1, [pc, #24]	; 1c12c <CGPIOPin::DisableAllInterrupts(unsigned int)+0xb0>
   1c110:	e59f0018 	ldr	r0, [pc, #24]	; 1c130 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xb4>
   1c114:	ebfff91f 	bl	1a598 <assertion_failed>
   1c118:	eaffffdb 	b	1c08c <CGPIOPin::DisableAllInterrupts(unsigned int)+0x10>
   1c11c:	0002b280 	.word	0x0002b280
   1c120:	08080013 	.word	0x08080013
   1c124:	2020008b 	.word	0x2020008b
   1c128:	00000165 	.word	0x00000165
   1c12c:	00028b04 	.word	0x00028b04
   1c130:	00028d94 	.word	0x00028d94

0001c134 <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE>:
   1c134:	e3a02001 	mov	r2, #1
   1c138:	e59f3004 	ldr	r3, [pc, #4]	; 1c144 <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE+0x10>
   1c13c:	e5832000 	str	r2, [r3]
   1c140:	e12fff1e 	bx	lr
   1c144:	0002b280 	.word	0x0002b280

0001c148 <CInterruptSystem::CInterruptSystem()>:
   1c148:	e1a0c000 	mov	ip, r0
   1c14c:	e2802f47 	add	r2, r0, #284	; 0x11c
   1c150:	e1a00002 	mov	r0, r2
   1c154:	e3a01000 	mov	r1, #0
   1c158:	e24c3004 	sub	r3, ip, #4
   1c15c:	e5a31004 	str	r1, [r3, #4]!
   1c160:	e1530000 	cmp	r3, r0
   1c164:	e5a21004 	str	r1, [r2, #4]!
   1c168:	1afffffb 	bne	1c15c <CInterruptSystem::CInterruptSystem()+0x14>
   1c16c:	e59f3008 	ldr	r3, [pc, #8]	; 1c17c <CInterruptSystem::CInterruptSystem()+0x34>
   1c170:	e1a0000c 	mov	r0, ip
   1c174:	e583c000 	str	ip, [r3]
   1c178:	e12fff1e 	bx	lr
   1c17c:	0002b284 	.word	0x0002b284

0001c180 <CInterruptSystem::~CInterruptSystem()>:
   1c180:	e3a02000 	mov	r2, #0
   1c184:	e59f3004 	ldr	r3, [pc, #4]	; 1c190 <CInterruptSystem::~CInterruptSystem()+0x10>
   1c188:	e5832000 	str	r2, [r3]
   1c18c:	e12fff1e 	bx	lr
   1c190:	0002b284 	.word	0x0002b284

0001c194 <CInterruptSystem::Initialize()>:
   1c194:	e92d4010 	push	{r4, lr}
   1c198:	e3a04000 	mov	r4, #0
   1c19c:	e59f2050 	ldr	r2, [pc, #80]	; 1c1f4 <CInterruptSystem::Initialize()+0x60>
   1c1a0:	e59f3050 	ldr	r3, [pc, #80]	; 1c1f8 <CInterruptSystem::Initialize()+0x64>
   1c1a4:	e1a02142 	asr	r2, r2, #2
   1c1a8:	e1a03143 	asr	r3, r3, #2
   1c1ac:	e2422002 	sub	r2, r2, #2
   1c1b0:	e2433002 	sub	r3, r3, #2
   1c1b4:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
   1c1b8:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
   1c1bc:	e5842018 	str	r2, [r4, #24]
   1c1c0:	e584301c 	str	r3, [r4, #28]
   1c1c4:	eb0019bc 	bl	228bc <SyncDataAndInstructionCache>
   1c1c8:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   1c1cc:	e3e02000 	mvn	r2, #0
   1c1d0:	e59f3024 	ldr	r3, [pc, #36]	; 1c1fc <CInterruptSystem::Initialize()+0x68>
   1c1d4:	e583420c 	str	r4, [r3, #524]	; 0x20c
   1c1d8:	e583221c 	str	r2, [r3, #540]	; 0x21c
   1c1dc:	e5832220 	str	r2, [r3, #544]	; 0x220
   1c1e0:	e5832224 	str	r2, [r3, #548]	; 0x224
   1c1e4:	ee074fba 	mcr	15, 0, r4, cr7, cr10, {5}
   1c1e8:	f1080080 	cpsie	i
   1c1ec:	e3a00001 	mov	r0, #1
   1c1f0:	e8bd8010 	pop	{r4, pc}
   1c1f4:	00022350 	.word	0x00022350
   1c1f8:	0002235c 	.word	0x0002235c
   1c1fc:	2000b000 	.word	0x2000b000

0001c200 <CInterruptSystem::DisconnectFIQ()>:
   1c200:	e92d4010 	push	{r4, lr}
   1c204:	e59f4068 	ldr	r4, [pc, #104]	; 1c274 <CInterruptSystem::DisconnectFIQ()+0x74>
   1c208:	e5d42001 	ldrb	r2, [r4, #1]
   1c20c:	e5d43000 	ldrb	r3, [r4]
   1c210:	e5d41002 	ldrb	r1, [r4, #2]
   1c214:	e1833402 	orr	r3, r3, r2, lsl #8
   1c218:	e5d42003 	ldrb	r2, [r4, #3]
   1c21c:	e1833801 	orr	r3, r3, r1, lsl #16
   1c220:	e1933c02 	orrs	r3, r3, r2, lsl #24
   1c224:	0a00000d 	beq	1c260 <CInterruptSystem::DisconnectFIQ()+0x60>
   1c228:	e3a03000 	mov	r3, #0
   1c22c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   1c230:	e59f2040 	ldr	r2, [pc, #64]	; 1c278 <CInterruptSystem::DisconnectFIQ()+0x78>
   1c234:	e582320c 	str	r3, [r2, #524]	; 0x20c
   1c238:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   1c23c:	e5c43000 	strb	r3, [r4]
   1c240:	e5c43001 	strb	r3, [r4, #1]
   1c244:	e5c43002 	strb	r3, [r4, #2]
   1c248:	e5c43003 	strb	r3, [r4, #3]
   1c24c:	e5c43004 	strb	r3, [r4, #4]
   1c250:	e5c43005 	strb	r3, [r4, #5]
   1c254:	e5c43006 	strb	r3, [r4, #6]
   1c258:	e5c43007 	strb	r3, [r4, #7]
   1c25c:	e8bd8010 	pop	{r4, pc}
   1c260:	e3a02086 	mov	r2, #134	; 0x86
   1c264:	e59f1010 	ldr	r1, [pc, #16]	; 1c27c <CInterruptSystem::DisconnectFIQ()+0x7c>
   1c268:	e59f0010 	ldr	r0, [pc, #16]	; 1c280 <CInterruptSystem::DisconnectFIQ()+0x80>
   1c26c:	ebfff8c9 	bl	1a598 <assertion_failed>
   1c270:	eaffffec 	b	1c228 <CInterruptSystem::DisconnectFIQ()+0x28>
   1c274:	0002b174 	.word	0x0002b174
   1c278:	2000b000 	.word	0x2000b000
   1c27c:	00028da8 	.word	0x00028da8
   1c280:	00028db8 	.word	0x00028db8

0001c284 <CInterruptSystem::EnableIRQ(unsigned int)>:
   1c284:	e92d4010 	push	{r4, lr}
   1c288:	e3a03000 	mov	r3, #0
   1c28c:	e1a04000 	mov	r4, r0
   1c290:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   1c294:	e3500047 	cmp	r0, #71	; 0x47
   1c298:	8a00000d 	bhi	1c2d4 <CInterruptSystem::EnableIRQ(unsigned int)+0x50>
   1c29c:	e350001f 	cmp	r0, #31
   1c2a0:	8a000007 	bhi	1c2c4 <CInterruptSystem::EnableIRQ(unsigned int)+0x40>
   1c2a4:	e59f2040 	ldr	r2, [pc, #64]	; 1c2ec <CInterruptSystem::EnableIRQ(unsigned int)+0x68>
   1c2a8:	e3a03001 	mov	r3, #1
   1c2ac:	e204401f 	and	r4, r4, #31
   1c2b0:	e1a04413 	lsl	r4, r3, r4
   1c2b4:	e5824000 	str	r4, [r2]
   1c2b8:	e3a03000 	mov	r3, #0
   1c2bc:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   1c2c0:	e8bd8010 	pop	{r4, pc}
   1c2c4:	e350003f 	cmp	r0, #63	; 0x3f
   1c2c8:	959f2020 	ldrls	r2, [pc, #32]	; 1c2f0 <CInterruptSystem::EnableIRQ(unsigned int)+0x6c>
   1c2cc:	859f2020 	ldrhi	r2, [pc, #32]	; 1c2f4 <CInterruptSystem::EnableIRQ(unsigned int)+0x70>
   1c2d0:	eafffff4 	b	1c2a8 <CInterruptSystem::EnableIRQ(unsigned int)+0x24>
   1c2d4:	e3a02092 	mov	r2, #146	; 0x92
   1c2d8:	e59f1018 	ldr	r1, [pc, #24]	; 1c2f8 <CInterruptSystem::EnableIRQ(unsigned int)+0x74>
   1c2dc:	e59f0018 	ldr	r0, [pc, #24]	; 1c2fc <CInterruptSystem::EnableIRQ(unsigned int)+0x78>
   1c2e0:	ebfff8ac 	bl	1a598 <assertion_failed>
   1c2e4:	e59f2008 	ldr	r2, [pc, #8]	; 1c2f4 <CInterruptSystem::EnableIRQ(unsigned int)+0x70>
   1c2e8:	eaffffee 	b	1c2a8 <CInterruptSystem::EnableIRQ(unsigned int)+0x24>
   1c2ec:	2000b210 	.word	0x2000b210
   1c2f0:	2000b214 	.word	0x2000b214
   1c2f4:	2000b218 	.word	0x2000b218
   1c2f8:	00028da8 	.word	0x00028da8
   1c2fc:	00028dd0 	.word	0x00028dd0

0001c300 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>:
   1c300:	e3510047 	cmp	r1, #71	; 0x47
   1c304:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1c308:	e1a04001 	mov	r4, r1
   1c30c:	e1a05000 	mov	r5, r0
   1c310:	e1a08002 	mov	r8, r2
   1c314:	e1a07003 	mov	r7, r3
   1c318:	8a00000c 	bhi	1c350 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x50>
   1c31c:	e7953104 	ldr	r3, [r5, r4, lsl #2]
   1c320:	e0856104 	add	r6, r5, r4, lsl #2
   1c324:	e3530000 	cmp	r3, #0
   1c328:	0a000003 	beq	1c33c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x3c>
   1c32c:	e3a02062 	mov	r2, #98	; 0x62
   1c330:	e59f102c 	ldr	r1, [pc, #44]	; 1c364 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x64>
   1c334:	e59f002c 	ldr	r0, [pc, #44]	; 1c368 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x68>
   1c338:	ebfff896 	bl	1a598 <assertion_failed>
   1c33c:	e7858104 	str	r8, [r5, r4, lsl #2]
   1c340:	e1a00004 	mov	r0, r4
   1c344:	e5867120 	str	r7, [r6, #288]	; 0x120
   1c348:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1c34c:	eaffffcc 	b	1c284 <CInterruptSystem::EnableIRQ(unsigned int)>
   1c350:	e3a02061 	mov	r2, #97	; 0x61
   1c354:	e59f1008 	ldr	r1, [pc, #8]	; 1c364 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x64>
   1c358:	e59f000c 	ldr	r0, [pc, #12]	; 1c36c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x6c>
   1c35c:	ebfff88d 	bl	1a598 <assertion_failed>
   1c360:	eaffffed 	b	1c31c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x1c>
   1c364:	00028da8 	.word	0x00028da8
   1c368:	00028de4 	.word	0x00028de4
   1c36c:	00028dd0 	.word	0x00028dd0

0001c370 <CInterruptSystem::DisableIRQ(unsigned int)>:
   1c370:	e92d4010 	push	{r4, lr}
   1c374:	e3a03000 	mov	r3, #0
   1c378:	e1a04000 	mov	r4, r0
   1c37c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   1c380:	e3500047 	cmp	r0, #71	; 0x47
   1c384:	8a00000d 	bhi	1c3c0 <CInterruptSystem::DisableIRQ(unsigned int)+0x50>
   1c388:	e350001f 	cmp	r0, #31
   1c38c:	8a000007 	bhi	1c3b0 <CInterruptSystem::DisableIRQ(unsigned int)+0x40>
   1c390:	e59f2040 	ldr	r2, [pc, #64]	; 1c3d8 <CInterruptSystem::DisableIRQ(unsigned int)+0x68>
   1c394:	e3a03001 	mov	r3, #1
   1c398:	e204401f 	and	r4, r4, #31
   1c39c:	e1a04413 	lsl	r4, r3, r4
   1c3a0:	e5824000 	str	r4, [r2]
   1c3a4:	e3a03000 	mov	r3, #0
   1c3a8:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   1c3ac:	e8bd8010 	pop	{r4, pc}
   1c3b0:	e350003f 	cmp	r0, #63	; 0x3f
   1c3b4:	959f2020 	ldrls	r2, [pc, #32]	; 1c3dc <CInterruptSystem::DisableIRQ(unsigned int)+0x6c>
   1c3b8:	859f2020 	ldrhi	r2, [pc, #32]	; 1c3e0 <CInterruptSystem::DisableIRQ(unsigned int)+0x70>
   1c3bc:	eafffff4 	b	1c394 <CInterruptSystem::DisableIRQ(unsigned int)+0x24>
   1c3c0:	e3a0209d 	mov	r2, #157	; 0x9d
   1c3c4:	e59f1018 	ldr	r1, [pc, #24]	; 1c3e4 <CInterruptSystem::DisableIRQ(unsigned int)+0x74>
   1c3c8:	e59f0018 	ldr	r0, [pc, #24]	; 1c3e8 <CInterruptSystem::DisableIRQ(unsigned int)+0x78>
   1c3cc:	ebfff871 	bl	1a598 <assertion_failed>
   1c3d0:	e59f2008 	ldr	r2, [pc, #8]	; 1c3e0 <CInterruptSystem::DisableIRQ(unsigned int)+0x70>
   1c3d4:	eaffffee 	b	1c394 <CInterruptSystem::DisableIRQ(unsigned int)+0x24>
   1c3d8:	2000b21c 	.word	0x2000b21c
   1c3dc:	2000b220 	.word	0x2000b220
   1c3e0:	2000b224 	.word	0x2000b224
   1c3e4:	00028da8 	.word	0x00028da8
   1c3e8:	00028dd0 	.word	0x00028dd0

0001c3ec <CInterruptSystem::DisconnectIRQ(unsigned int)>:
   1c3ec:	e3510047 	cmp	r1, #71	; 0x47
   1c3f0:	e92d4070 	push	{r4, r5, r6, lr}
   1c3f4:	e1a04001 	mov	r4, r1
   1c3f8:	e1a05000 	mov	r5, r0
   1c3fc:	8a000009 	bhi	1c428 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x3c>
   1c400:	e7953104 	ldr	r3, [r5, r4, lsl #2]
   1c404:	e0856104 	add	r6, r5, r4, lsl #2
   1c408:	e3530000 	cmp	r3, #0
   1c40c:	0a00000d 	beq	1c448 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x5c>
   1c410:	e1a00004 	mov	r0, r4
   1c414:	ebffffd5 	bl	1c370 <CInterruptSystem::DisableIRQ(unsigned int)>
   1c418:	e3a03000 	mov	r3, #0
   1c41c:	e7853104 	str	r3, [r5, r4, lsl #2]
   1c420:	e5863120 	str	r3, [r6, #288]	; 0x120
   1c424:	e8bd8070 	pop	{r4, r5, r6, pc}
   1c428:	e3a0206c 	mov	r2, #108	; 0x6c
   1c42c:	e59f1028 	ldr	r1, [pc, #40]	; 1c45c <CInterruptSystem::DisconnectIRQ(unsigned int)+0x70>
   1c430:	e59f0028 	ldr	r0, [pc, #40]	; 1c460 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x74>
   1c434:	ebfff857 	bl	1a598 <assertion_failed>
   1c438:	e7953104 	ldr	r3, [r5, r4, lsl #2]
   1c43c:	e0856104 	add	r6, r5, r4, lsl #2
   1c440:	e3530000 	cmp	r3, #0
   1c444:	1afffff1 	bne	1c410 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x24>
   1c448:	e3a0206d 	mov	r2, #109	; 0x6d
   1c44c:	e59f1008 	ldr	r1, [pc, #8]	; 1c45c <CInterruptSystem::DisconnectIRQ(unsigned int)+0x70>
   1c450:	e59f000c 	ldr	r0, [pc, #12]	; 1c464 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x78>
   1c454:	ebfff84f 	bl	1a598 <assertion_failed>
   1c458:	eaffffec 	b	1c410 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x24>
   1c45c:	00028da8 	.word	0x00028da8
   1c460:	00028dd0 	.word	0x00028dd0
   1c464:	00028e00 	.word	0x00028e00

0001c468 <CInterruptSystem::EnableFIQ(unsigned int)>:
   1c468:	e92d4010 	push	{r4, lr}
   1c46c:	e3a03000 	mov	r3, #0
   1c470:	e1a04000 	mov	r4, r0
   1c474:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   1c478:	e3500047 	cmp	r0, #71	; 0x47
   1c47c:	9a000003 	bls	1c490 <CInterruptSystem::EnableFIQ(unsigned int)+0x28>
   1c480:	e3a020a8 	mov	r2, #168	; 0xa8
   1c484:	e59f101c 	ldr	r1, [pc, #28]	; 1c4a8 <CInterruptSystem::EnableFIQ(unsigned int)+0x40>
   1c488:	e59f001c 	ldr	r0, [pc, #28]	; 1c4ac <CInterruptSystem::EnableFIQ(unsigned int)+0x44>
   1c48c:	ebfff841 	bl	1a598 <assertion_failed>
   1c490:	e59f3018 	ldr	r3, [pc, #24]	; 1c4b0 <CInterruptSystem::EnableFIQ(unsigned int)+0x48>
   1c494:	e3844080 	orr	r4, r4, #128	; 0x80
   1c498:	e583420c 	str	r4, [r3, #524]	; 0x20c
   1c49c:	e3a03000 	mov	r3, #0
   1c4a0:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   1c4a4:	e8bd8010 	pop	{r4, pc}
   1c4a8:	00028da8 	.word	0x00028da8
   1c4ac:	00028e1c 	.word	0x00028e1c
   1c4b0:	2000b000 	.word	0x2000b000

0001c4b4 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>:
   1c4b4:	e3510047 	cmp	r1, #71	; 0x47
   1c4b8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1c4bc:	e1a07001 	mov	r7, r1
   1c4c0:	e1a06002 	mov	r6, r2
   1c4c4:	e1a05003 	mov	r5, r3
   1c4c8:	8a00001f 	bhi	1c54c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x98>
   1c4cc:	e3560000 	cmp	r6, #0
   1c4d0:	0a000022 	beq	1c560 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xac>
   1c4d4:	e59f4098 	ldr	r4, [pc, #152]	; 1c574 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc0>
   1c4d8:	e5d42001 	ldrb	r2, [r4, #1]
   1c4dc:	e5d43000 	ldrb	r3, [r4]
   1c4e0:	e5d41002 	ldrb	r1, [r4, #2]
   1c4e4:	e1833402 	orr	r3, r3, r2, lsl #8
   1c4e8:	e5d42003 	ldrb	r2, [r4, #3]
   1c4ec:	e1833801 	orr	r3, r3, r1, lsl #16
   1c4f0:	e1933c02 	orrs	r3, r3, r2, lsl #24
   1c4f4:	0a000003 	beq	1c508 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x54>
   1c4f8:	e3a0207c 	mov	r2, #124	; 0x7c
   1c4fc:	e59f1074 	ldr	r1, [pc, #116]	; 1c578 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc4>
   1c500:	e59f0074 	ldr	r0, [pc, #116]	; 1c57c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc8>
   1c504:	ebfff823 	bl	1a598 <assertion_failed>
   1c508:	e1a0e426 	lsr	lr, r6, #8
   1c50c:	e1a0c826 	lsr	ip, r6, #16
   1c510:	e1a01c26 	lsr	r1, r6, #24
   1c514:	e1a02425 	lsr	r2, r5, #8
   1c518:	e1a03825 	lsr	r3, r5, #16
   1c51c:	e5c45004 	strb	r5, [r4, #4]
   1c520:	e1a05c25 	lsr	r5, r5, #24
   1c524:	e1a00007 	mov	r0, r7
   1c528:	e5c46000 	strb	r6, [r4]
   1c52c:	e5c4e001 	strb	lr, [r4, #1]
   1c530:	e5c4c002 	strb	ip, [r4, #2]
   1c534:	e5c41003 	strb	r1, [r4, #3]
   1c538:	e5c42005 	strb	r2, [r4, #5]
   1c53c:	e5c43006 	strb	r3, [r4, #6]
   1c540:	e5c45007 	strb	r5, [r4, #7]
   1c544:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1c548:	eaffffc6 	b	1c468 <CInterruptSystem::EnableFIQ(unsigned int)>
   1c54c:	e3a0207a 	mov	r2, #122	; 0x7a
   1c550:	e59f1020 	ldr	r1, [pc, #32]	; 1c578 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc4>
   1c554:	e59f0024 	ldr	r0, [pc, #36]	; 1c580 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xcc>
   1c558:	ebfff80e 	bl	1a598 <assertion_failed>
   1c55c:	eaffffda 	b	1c4cc <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x18>
   1c560:	e3a0207b 	mov	r2, #123	; 0x7b
   1c564:	e59f100c 	ldr	r1, [pc, #12]	; 1c578 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc4>
   1c568:	e59f0014 	ldr	r0, [pc, #20]	; 1c584 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xd0>
   1c56c:	ebfff809 	bl	1a598 <assertion_failed>
   1c570:	eaffffd7 	b	1c4d4 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x20>
   1c574:	0002b174 	.word	0x0002b174
   1c578:	00028da8 	.word	0x00028da8
   1c57c:	00028e30 	.word	0x00028e30
   1c580:	00028e1c 	.word	0x00028e1c
   1c584:	00028dc0 	.word	0x00028dc0

0001c588 <CInterruptSystem::DisableFIQ()>:
   1c588:	e3a03000 	mov	r3, #0
   1c58c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   1c590:	e59f2008 	ldr	r2, [pc, #8]	; 1c5a0 <CInterruptSystem::DisableFIQ()+0x18>
   1c594:	e582320c 	str	r3, [r2, #524]	; 0x20c
   1c598:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   1c59c:	e12fff1e 	bx	lr
   1c5a0:	2000b000 	.word	0x2000b000

0001c5a4 <CInterruptSystem::Get()>:
   1c5a4:	e92d4010 	push	{r4, lr}
   1c5a8:	e59f4020 	ldr	r4, [pc, #32]	; 1c5d0 <CInterruptSystem::Get()+0x2c>
   1c5ac:	e5940000 	ldr	r0, [r4]
   1c5b0:	e3500000 	cmp	r0, #0
   1c5b4:	18bd8010 	popne	{r4, pc}
   1c5b8:	e3a020ba 	mov	r2, #186	; 0xba
   1c5bc:	e59f1010 	ldr	r1, [pc, #16]	; 1c5d4 <CInterruptSystem::Get()+0x30>
   1c5c0:	e59f0010 	ldr	r0, [pc, #16]	; 1c5d8 <CInterruptSystem::Get()+0x34>
   1c5c4:	ebfff7f3 	bl	1a598 <assertion_failed>
   1c5c8:	e5940000 	ldr	r0, [r4]
   1c5cc:	e8bd8010 	pop	{r4, pc}
   1c5d0:	0002b284 	.word	0x0002b284
   1c5d4:	00028da8 	.word	0x00028da8
   1c5d8:	00023f5c 	.word	0x00023f5c

0001c5dc <CInterruptSystem::CallIRQHandler(unsigned int)>:
   1c5dc:	e3510047 	cmp	r1, #71	; 0x47
   1c5e0:	e92d4070 	push	{r4, r5, r6, lr}
   1c5e4:	e1a06001 	mov	r6, r1
   1c5e8:	e1a05000 	mov	r5, r0
   1c5ec:	8a000007 	bhi	1c610 <CInterruptSystem::CallIRQHandler(unsigned int)+0x34>
   1c5f0:	e7954106 	ldr	r4, [r5, r6, lsl #2]
   1c5f4:	e0855106 	add	r5, r5, r6, lsl #2
   1c5f8:	e3540000 	cmp	r4, #0
   1c5fc:	0a00000b 	beq	1c630 <CInterruptSystem::CallIRQHandler(unsigned int)+0x54>
   1c600:	e5950120 	ldr	r0, [r5, #288]	; 0x120
   1c604:	e12fff34 	blx	r4
   1c608:	e3a00001 	mov	r0, #1
   1c60c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1c610:	e3a020c0 	mov	r2, #192	; 0xc0
   1c614:	e59f1024 	ldr	r1, [pc, #36]	; 1c640 <CInterruptSystem::CallIRQHandler(unsigned int)+0x64>
   1c618:	e59f0024 	ldr	r0, [pc, #36]	; 1c644 <CInterruptSystem::CallIRQHandler(unsigned int)+0x68>
   1c61c:	ebfff7dd 	bl	1a598 <assertion_failed>
   1c620:	e7954106 	ldr	r4, [r5, r6, lsl #2]
   1c624:	e0855106 	add	r5, r5, r6, lsl #2
   1c628:	e3540000 	cmp	r4, #0
   1c62c:	1afffff3 	bne	1c600 <CInterruptSystem::CallIRQHandler(unsigned int)+0x24>
   1c630:	e1a00006 	mov	r0, r6
   1c634:	ebffff4d 	bl	1c370 <CInterruptSystem::DisableIRQ(unsigned int)>
   1c638:	e1a00004 	mov	r0, r4
   1c63c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1c640:	00028da8 	.word	0x00028da8
   1c644:	00028dd0 	.word	0x00028dd0

0001c648 <CInterruptSystem::InterruptHandler()>:
   1c648:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1c64c:	e59f70a8 	ldr	r7, [pc, #168]	; 1c6fc <CInterruptSystem::InterruptHandler()+0xb4>
   1c650:	e24dd010 	sub	sp, sp, #16
   1c654:	e5973000 	ldr	r3, [r7]
   1c658:	e3530000 	cmp	r3, #0
   1c65c:	0a000021 	beq	1c6e8 <CInterruptSystem::InterruptHandler()+0xa0>
   1c660:	e3a06000 	mov	r6, #0
   1c664:	ee076f9a 	mcr	15, 0, r6, cr7, cr10, {4}
   1c668:	e59f3090 	ldr	r3, [pc, #144]	; 1c700 <CInterruptSystem::InterruptHandler()+0xb8>
   1c66c:	e5932204 	ldr	r2, [r3, #516]	; 0x204
   1c670:	e58d2004 	str	r2, [sp, #4]
   1c674:	e5932208 	ldr	r2, [r3, #520]	; 0x208
   1c678:	e58d2008 	str	r2, [sp, #8]
   1c67c:	e5933200 	ldr	r3, [r3, #512]	; 0x200
   1c680:	e6ef3073 	uxtb	r3, r3
   1c684:	e58d300c 	str	r3, [sp, #12]
   1c688:	ee076fba 	mcr	15, 0, r6, cr7, cr10, {5}
   1c68c:	e28d8004 	add	r8, sp, #4
   1c690:	e4984004 	ldr	r4, [r8], #4
   1c694:	e3540000 	cmp	r4, #0
   1c698:	0a00000d 	beq	1c6d4 <CInterruptSystem::InterruptHandler()+0x8c>
   1c69c:	e1a05006 	mov	r5, r6
   1c6a0:	ea000002 	b	1c6b0 <CInterruptSystem::InterruptHandler()+0x68>
   1c6a4:	e1b040a4 	lsrs	r4, r4, #1
   1c6a8:	e2855001 	add	r5, r5, #1
   1c6ac:	0a000008 	beq	1c6d4 <CInterruptSystem::InterruptHandler()+0x8c>
   1c6b0:	e3140001 	tst	r4, #1
   1c6b4:	0afffffa 	beq	1c6a4 <CInterruptSystem::InterruptHandler()+0x5c>
   1c6b8:	e1a01005 	mov	r1, r5
   1c6bc:	e5970000 	ldr	r0, [r7]
   1c6c0:	ebffffc5 	bl	1c5dc <CInterruptSystem::CallIRQHandler(unsigned int)>
   1c6c4:	e3500000 	cmp	r0, #0
   1c6c8:	0afffff5 	beq	1c6a4 <CInterruptSystem::InterruptHandler()+0x5c>
   1c6cc:	e28dd010 	add	sp, sp, #16
   1c6d0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1c6d4:	e2866020 	add	r6, r6, #32
   1c6d8:	e3560060 	cmp	r6, #96	; 0x60
   1c6dc:	1affffeb 	bne	1c690 <CInterruptSystem::InterruptHandler()+0x48>
   1c6e0:	e28dd010 	add	sp, sp, #16
   1c6e4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1c6e8:	e3a020d3 	mov	r2, #211	; 0xd3
   1c6ec:	e59f1010 	ldr	r1, [pc, #16]	; 1c704 <CInterruptSystem::InterruptHandler()+0xbc>
   1c6f0:	e59f0010 	ldr	r0, [pc, #16]	; 1c708 <CInterruptSystem::InterruptHandler()+0xc0>
   1c6f4:	ebfff7a7 	bl	1a598 <assertion_failed>
   1c6f8:	eaffffd8 	b	1c660 <CInterruptSystem::InterruptHandler()+0x18>
   1c6fc:	0002b284 	.word	0x0002b284
   1c700:	2000b000 	.word	0x2000b000
   1c704:	00028da8 	.word	0x00028da8
   1c708:	00023f5c 	.word	0x00023f5c

0001c70c <InterruptHandler>:
   1c70c:	e92d4010 	push	{r4, lr}
   1c710:	e3a04000 	mov	r4, #0
   1c714:	ee074fba 	mcr	15, 0, r4, cr7, cr10, {5}
   1c718:	ebffffca 	bl	1c648 <CInterruptSystem::InterruptHandler()>
   1c71c:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   1c720:	e8bd8010 	pop	{r4, pc}

0001c724 <CKernelOptions::GetDecimal(char*) [clone .part.0]>:
   1c724:	e3a01000 	mov	r1, #0
   1c728:	ea00000a 	b	1c758 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x34>
   1c72c:	e3520009 	cmp	r2, #9
   1c730:	8a000011 	bhi	1c77c <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x58>
   1c734:	e3730001 	cmn	r3, #1
   1c738:	13a02000 	movne	r2, #0
   1c73c:	03a02001 	moveq	r2, #1
   1c740:	e1510003 	cmp	r1, r3
   1c744:	91a01002 	movls	r1, r2
   1c748:	83821001 	orrhi	r1, r2, #1
   1c74c:	e3510000 	cmp	r1, #0
   1c750:	1a000009 	bne	1c77c <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x58>
   1c754:	e1a01003 	mov	r1, r3
   1c758:	e0d0c0d1 	ldrsb	ip, [r0], #1
   1c75c:	e0813101 	add	r3, r1, r1, lsl #2
   1c760:	e24c2030 	sub	r2, ip, #48	; 0x30
   1c764:	e35c0000 	cmp	ip, #0
   1c768:	e0823083 	add	r3, r2, r3, lsl #1
   1c76c:	e6ef2072 	uxtb	r2, r2
   1c770:	1affffed 	bne	1c72c <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x8>
   1c774:	e1a00001 	mov	r0, r1
   1c778:	e12fff1e 	bx	lr
   1c77c:	e3e01000 	mvn	r1, #0
   1c780:	e1a00001 	mov	r0, r1
   1c784:	e12fff1e 	bx	lr

0001c788 <CKernelOptions::~CKernelOptions()>:
   1c788:	e3a02000 	mov	r2, #0
   1c78c:	e59f3004 	ldr	r3, [pc, #4]	; 1c798 <CKernelOptions::~CKernelOptions()+0x10>
   1c790:	e5832000 	str	r2, [r3]
   1c794:	e12fff1e 	bx	lr
   1c798:	0002b288 	.word	0x0002b288

0001c79c <CKernelOptions::GetWidth() const>:
   1c79c:	e5900810 	ldr	r0, [r0, #2064]	; 0x810
   1c7a0:	e12fff1e 	bx	lr

0001c7a4 <CKernelOptions::GetHeight() const>:
   1c7a4:	e5900814 	ldr	r0, [r0, #2068]	; 0x814
   1c7a8:	e12fff1e 	bx	lr

0001c7ac <CKernelOptions::GetLogDevice() const>:
   1c7ac:	e2800e81 	add	r0, r0, #2064	; 0x810
   1c7b0:	e2800008 	add	r0, r0, #8
   1c7b4:	e12fff1e 	bx	lr

0001c7b8 <CKernelOptions::GetLogLevel() const>:
   1c7b8:	e590082c 	ldr	r0, [r0, #2092]	; 0x82c
   1c7bc:	e12fff1e 	bx	lr

0001c7c0 <CKernelOptions::GetKeyMap() const>:
   1c7c0:	e2800e83 	add	r0, r0, #2096	; 0x830
   1c7c4:	e12fff1e 	bx	lr

0001c7c8 <CKernelOptions::GetUSBPowerDelay() const>:
   1c7c8:	e5900834 	ldr	r0, [r0, #2100]	; 0x834
   1c7cc:	e12fff1e 	bx	lr

0001c7d0 <CKernelOptions::GetSoundDevice() const>:
   1c7d0:	e2800e83 	add	r0, r0, #2096	; 0x830
   1c7d4:	e2800008 	add	r0, r0, #8
   1c7d8:	e12fff1e 	bx	lr

0001c7dc <CKernelOptions::GetSoundOption() const>:
   1c7dc:	e590084c 	ldr	r0, [r0, #2124]	; 0x84c
   1c7e0:	e12fff1e 	bx	lr

0001c7e4 <CKernelOptions::GetCPUSpeed() const>:
   1c7e4:	e5d00850 	ldrb	r0, [r0, #2128]	; 0x850
   1c7e8:	e12fff1e 	bx	lr

0001c7ec <CKernelOptions::GetSoCMaxTemp() const>:
   1c7ec:	e5900854 	ldr	r0, [r0, #2132]	; 0x854
   1c7f0:	e12fff1e 	bx	lr

0001c7f4 <CKernelOptions::Get()>:
   1c7f4:	e59f3004 	ldr	r3, [pc, #4]	; 1c800 <CKernelOptions::Get()+0xc>
   1c7f8:	e5930000 	ldr	r0, [r3]
   1c7fc:	e12fff1e 	bx	lr
   1c800:	0002b288 	.word	0x0002b288

0001c804 <CKernelOptions::GetToken()>:
   1c804:	e590380c 	ldr	r3, [r0, #2060]	; 0x80c
   1c808:	e1d320d0 	ldrsb	r2, [r3]
   1c80c:	e3520000 	cmp	r2, #0
   1c810:	1a000005 	bne	1c82c <CKernelOptions::GetToken()+0x28>
   1c814:	ea000016 	b	1c874 <CKernelOptions::GetToken()+0x70>
   1c818:	e2833001 	add	r3, r3, #1
   1c81c:	e580380c 	str	r3, [r0, #2060]	; 0x80c
   1c820:	e1d320d0 	ldrsb	r2, [r3]
   1c824:	e3520000 	cmp	r2, #0
   1c828:	0a000011 	beq	1c874 <CKernelOptions::GetToken()+0x70>
   1c82c:	e3520020 	cmp	r2, #32
   1c830:	0afffff8 	beq	1c818 <CKernelOptions::GetToken()+0x14>
   1c834:	e1a02003 	mov	r2, r3
   1c838:	ea000000 	b	1c840 <CKernelOptions::GetToken()+0x3c>
   1c83c:	e1a02001 	mov	r2, r1
   1c840:	e2821001 	add	r1, r2, #1
   1c844:	e580180c 	str	r1, [r0, #2060]	; 0x80c
   1c848:	e1d2c0d1 	ldrsb	ip, [r2, #1]
   1c84c:	e35c0000 	cmp	ip, #0
   1c850:	0a000008 	beq	1c878 <CKernelOptions::GetToken()+0x74>
   1c854:	e35c0020 	cmp	ip, #32
   1c858:	1afffff7 	bne	1c83c <CKernelOptions::GetToken()+0x38>
   1c85c:	e3a0c000 	mov	ip, #0
   1c860:	e2822002 	add	r2, r2, #2
   1c864:	e580280c 	str	r2, [r0, #2060]	; 0x80c
   1c868:	e5c1c000 	strb	ip, [r1]
   1c86c:	e1a00003 	mov	r0, r3
   1c870:	e12fff1e 	bx	lr
   1c874:	e3a03000 	mov	r3, #0
   1c878:	e1a00003 	mov	r0, r3
   1c87c:	e12fff1e 	bx	lr

0001c880 <CKernelOptions::CKernelOptions()>:
   1c880:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c884:	e3a02004 	mov	r2, #4
   1c888:	e1a04000 	mov	r4, r0
   1c88c:	e3a05000 	mov	r5, #0
   1c890:	e3a0303c 	mov	r3, #60	; 0x3c
   1c894:	e2807e81 	add	r7, r0, #2064	; 0x810
   1c898:	e2877008 	add	r7, r7, #8
   1c89c:	e580282c 	str	r2, [r0, #2092]	; 0x82c
   1c8a0:	e5803854 	str	r3, [r0, #2132]	; 0x854
   1c8a4:	e24dd014 	sub	sp, sp, #20
   1c8a8:	e59f1348 	ldr	r1, [pc, #840]	; 1cbf8 <CKernelOptions::CKernelOptions()+0x378>
   1c8ac:	e1a00007 	mov	r0, r7
   1c8b0:	e5845810 	str	r5, [r4, #2064]	; 0x810
   1c8b4:	e5845814 	str	r5, [r4, #2068]	; 0x814
   1c8b8:	e5845834 	str	r5, [r4, #2100]	; 0x834
   1c8bc:	e584584c 	str	r5, [r4, #2124]	; 0x84c
   1c8c0:	e5c45850 	strb	r5, [r4, #2128]	; 0x850
   1c8c4:	e2849e83 	add	r9, r4, #2096	; 0x830
   1c8c8:	eb001433 	bl	2199c <strcpy>
   1c8cc:	e59f1328 	ldr	r1, [pc, #808]	; 1cbfc <CKernelOptions::CKernelOptions()+0x37c>
   1c8d0:	e1a00009 	mov	r0, r9
   1c8d4:	eb001430 	bl	2199c <strcpy>
   1c8d8:	e59f3320 	ldr	r3, [pc, #800]	; 1cc00 <CKernelOptions::CKernelOptions()+0x380>
   1c8dc:	e5c45838 	strb	r5, [r4, #2104]	; 0x838
   1c8e0:	e28d000c 	add	r0, sp, #12
   1c8e4:	e5834000 	str	r4, [r3]
   1c8e8:	ebfff74e 	bl	1a628 <CBcmPropertyTags::CBcmPropertyTags()>
   1c8ec:	e58d5000 	str	r5, [sp]
   1c8f0:	e1a02004 	mov	r2, r4
   1c8f4:	e28d000c 	add	r0, sp, #12
   1c8f8:	e59f3304 	ldr	r3, [pc, #772]	; 1cc04 <CKernelOptions::CKernelOptions()+0x384>
   1c8fc:	e59f1304 	ldr	r1, [pc, #772]	; 1cc08 <CKernelOptions::CKernelOptions()+0x388>
   1c900:	ebfff79f 	bl	1a784 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   1c904:	e1500005 	cmp	r0, r5
   1c908:	0a000037 	beq	1c9ec <CKernelOptions::CKernelOptions()+0x16c>
   1c90c:	e5943008 	ldr	r3, [r4, #8]
   1c910:	e3530b02 	cmp	r3, #2048	; 0x800
   1c914:	2a000034 	bcs	1c9ec <CKernelOptions::CKernelOptions()+0x16c>
   1c918:	e0843003 	add	r3, r4, r3
   1c91c:	e284200c 	add	r2, r4, #12
   1c920:	e59f82e4 	ldr	r8, [pc, #740]	; 1cc0c <CKernelOptions::CKernelOptions()+0x38c>
   1c924:	e59fa2e4 	ldr	sl, [pc, #740]	; 1cc10 <CKernelOptions::CKernelOptions()+0x390>
   1c928:	e5c3500c 	strb	r5, [r3, #12]
   1c92c:	e584280c 	str	r2, [r4, #2060]	; 0x80c
   1c930:	e1a00004 	mov	r0, r4
   1c934:	ebffffb2 	bl	1c804 <CKernelOptions::GetToken()>
   1c938:	e2506000 	subs	r6, r0, #0
   1c93c:	0a00002a 	beq	1c9ec <CKernelOptions::CKernelOptions()+0x16c>
   1c940:	e1d630d0 	ldrsb	r3, [r6]
   1c944:	e3530000 	cmp	r3, #0
   1c948:	0a000008 	beq	1c970 <CKernelOptions::CKernelOptions()+0xf0>
   1c94c:	e353003d 	cmp	r3, #61	; 0x3d
   1c950:	e1a05006 	mov	r5, r6
   1c954:	1a000002 	bne	1c964 <CKernelOptions::CKernelOptions()+0xe4>
   1c958:	ea000028 	b	1ca00 <CKernelOptions::CKernelOptions()+0x180>
   1c95c:	e353003d 	cmp	r3, #61	; 0x3d
   1c960:	0a000026 	beq	1ca00 <CKernelOptions::CKernelOptions()+0x180>
   1c964:	e1f530d1 	ldrsb	r3, [r5, #1]!
   1c968:	e3530000 	cmp	r3, #0
   1c96c:	1afffffa 	bne	1c95c <CKernelOptions::CKernelOptions()+0xdc>
   1c970:	e1a01008 	mov	r1, r8
   1c974:	e1a00006 	mov	r0, r6
   1c978:	eb001393 	bl	217cc <strcmp>
   1c97c:	e3500000 	cmp	r0, #0
   1c980:	0affffea 	beq	1c930 <CKernelOptions::CKernelOptions()+0xb0>
   1c984:	e1a0100a 	mov	r1, sl
   1c988:	e1a00006 	mov	r0, r6
   1c98c:	eb00138e 	bl	217cc <strcmp>
   1c990:	e3500000 	cmp	r0, #0
   1c994:	13a0b000 	movne	fp, #0
   1c998:	0affffe4 	beq	1c930 <CKernelOptions::CKernelOptions()+0xb0>
   1c99c:	e59f1270 	ldr	r1, [pc, #624]	; 1cc14 <CKernelOptions::CKernelOptions()+0x394>
   1c9a0:	e1a00006 	mov	r0, r6
   1c9a4:	eb001388 	bl	217cc <strcmp>
   1c9a8:	e2505000 	subs	r5, r0, #0
   1c9ac:	0a000027 	beq	1ca50 <CKernelOptions::CKernelOptions()+0x1d0>
   1c9b0:	e59f1260 	ldr	r1, [pc, #608]	; 1cc18 <CKernelOptions::CKernelOptions()+0x398>
   1c9b4:	e1a00006 	mov	r0, r6
   1c9b8:	eb001383 	bl	217cc <strcmp>
   1c9bc:	e3500000 	cmp	r0, #0
   1c9c0:	1a000028 	bne	1ca68 <CKernelOptions::CKernelOptions()+0x1e8>
   1c9c4:	e35b0000 	cmp	fp, #0
   1c9c8:	0affffd8 	beq	1c930 <CKernelOptions::CKernelOptions()+0xb0>
   1c9cc:	e1db30d0 	ldrsb	r3, [fp]
   1c9d0:	e3530000 	cmp	r3, #0
   1c9d4:	0affffd5 	beq	1c930 <CKernelOptions::CKernelOptions()+0xb0>
   1c9d8:	e1a0000b 	mov	r0, fp
   1c9dc:	ebffff50 	bl	1c724 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   1c9e0:	e3500004 	cmp	r0, #4
   1c9e4:	9584082c 	strls	r0, [r4, #2092]	; 0x82c
   1c9e8:	eaffffd0 	b	1c930 <CKernelOptions::CKernelOptions()+0xb0>
   1c9ec:	e28d000c 	add	r0, sp, #12
   1c9f0:	ebfff712 	bl	1a640 <CBcmPropertyTags::~CBcmPropertyTags()>
   1c9f4:	e1a00004 	mov	r0, r4
   1c9f8:	e28dd014 	add	sp, sp, #20
   1c9fc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ca00:	e3a03000 	mov	r3, #0
   1ca04:	e1a01008 	mov	r1, r8
   1ca08:	e5c53000 	strb	r3, [r5]
   1ca0c:	e1a00006 	mov	r0, r6
   1ca10:	eb00136d 	bl	217cc <strcmp>
   1ca14:	e3500000 	cmp	r0, #0
   1ca18:	e285b001 	add	fp, r5, #1
   1ca1c:	1a000047 	bne	1cb40 <CKernelOptions::CKernelOptions()+0x2c0>
   1ca20:	e35b0000 	cmp	fp, #0
   1ca24:	0affffc1 	beq	1c930 <CKernelOptions::CKernelOptions()+0xb0>
   1ca28:	e1d530d1 	ldrsb	r3, [r5, #1]
   1ca2c:	e3530000 	cmp	r3, #0
   1ca30:	0affffbe 	beq	1c930 <CKernelOptions::CKernelOptions()+0xb0>
   1ca34:	e1a0000b 	mov	r0, fp
   1ca38:	ebffff39 	bl	1c724 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   1ca3c:	e59f31d8 	ldr	r3, [pc, #472]	; 1cc1c <CKernelOptions::CKernelOptions()+0x39c>
   1ca40:	e2402d0a 	sub	r2, r0, #640	; 0x280
   1ca44:	e1520003 	cmp	r2, r3
   1ca48:	95840810 	strls	r0, [r4, #2064]	; 0x810
   1ca4c:	eaffffb7 	b	1c930 <CKernelOptions::CKernelOptions()+0xb0>
   1ca50:	e1a0100b 	mov	r1, fp
   1ca54:	e3a02013 	mov	r2, #19
   1ca58:	e1a00007 	mov	r0, r7
   1ca5c:	eb0013d9 	bl	219c8 <strncpy>
   1ca60:	e5c4582b 	strb	r5, [r4, #2091]	; 0x82b
   1ca64:	eaffffb1 	b	1c930 <CKernelOptions::CKernelOptions()+0xb0>
   1ca68:	e59f11b0 	ldr	r1, [pc, #432]	; 1cc20 <CKernelOptions::CKernelOptions()+0x3a0>
   1ca6c:	e1a00006 	mov	r0, r6
   1ca70:	eb001355 	bl	217cc <strcmp>
   1ca74:	e2505000 	subs	r5, r0, #0
   1ca78:	1a000005 	bne	1ca94 <CKernelOptions::CKernelOptions()+0x214>
   1ca7c:	e1a0100b 	mov	r1, fp
   1ca80:	e3a02002 	mov	r2, #2
   1ca84:	e1a00009 	mov	r0, r9
   1ca88:	eb0013ce 	bl	219c8 <strncpy>
   1ca8c:	e5c45832 	strb	r5, [r4, #2098]	; 0x832
   1ca90:	eaffffa6 	b	1c930 <CKernelOptions::CKernelOptions()+0xb0>
   1ca94:	e59f1188 	ldr	r1, [pc, #392]	; 1cc24 <CKernelOptions::CKernelOptions()+0x3a4>
   1ca98:	e1a00006 	mov	r0, r6
   1ca9c:	eb00134a 	bl	217cc <strcmp>
   1caa0:	e3500000 	cmp	r0, #0
   1caa4:	1a00000b 	bne	1cad8 <CKernelOptions::CKernelOptions()+0x258>
   1caa8:	e35b0000 	cmp	fp, #0
   1caac:	0affff9f 	beq	1c930 <CKernelOptions::CKernelOptions()+0xb0>
   1cab0:	e1db30d0 	ldrsb	r3, [fp]
   1cab4:	e3530000 	cmp	r3, #0
   1cab8:	0affff9c 	beq	1c930 <CKernelOptions::CKernelOptions()+0xb0>
   1cabc:	e1a0000b 	mov	r0, fp
   1cac0:	ebffff17 	bl	1c724 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   1cac4:	e59f315c 	ldr	r3, [pc, #348]	; 1cc28 <CKernelOptions::CKernelOptions()+0x3a8>
   1cac8:	e24020c8 	sub	r2, r0, #200	; 0xc8
   1cacc:	e1520003 	cmp	r2, r3
   1cad0:	95840834 	strls	r0, [r4, #2100]	; 0x834
   1cad4:	eaffff95 	b	1c930 <CKernelOptions::CKernelOptions()+0xb0>
   1cad8:	e59f114c 	ldr	r1, [pc, #332]	; 1cc2c <CKernelOptions::CKernelOptions()+0x3ac>
   1cadc:	e1a00006 	mov	r0, r6
   1cae0:	eb001339 	bl	217cc <strcmp>
   1cae4:	e2505000 	subs	r5, r0, #0
   1cae8:	1a000005 	bne	1cb04 <CKernelOptions::CKernelOptions()+0x284>
   1caec:	e1a0100b 	mov	r1, fp
   1caf0:	e3a02013 	mov	r2, #19
   1caf4:	e2890008 	add	r0, r9, #8
   1caf8:	eb0013b2 	bl	219c8 <strncpy>
   1cafc:	e5c4584b 	strb	r5, [r4, #2123]	; 0x84b
   1cb00:	eaffff8a 	b	1c930 <CKernelOptions::CKernelOptions()+0xb0>
   1cb04:	e59f1124 	ldr	r1, [pc, #292]	; 1cc30 <CKernelOptions::CKernelOptions()+0x3b0>
   1cb08:	e1a00006 	mov	r0, r6
   1cb0c:	eb00132e 	bl	217cc <strcmp>
   1cb10:	e3500000 	cmp	r0, #0
   1cb14:	1a000019 	bne	1cb80 <CKernelOptions::CKernelOptions()+0x300>
   1cb18:	e35b0000 	cmp	fp, #0
   1cb1c:	0affff83 	beq	1c930 <CKernelOptions::CKernelOptions()+0xb0>
   1cb20:	e1db30d0 	ldrsb	r3, [fp]
   1cb24:	e3530000 	cmp	r3, #0
   1cb28:	0affff80 	beq	1c930 <CKernelOptions::CKernelOptions()+0xb0>
   1cb2c:	e1a0000b 	mov	r0, fp
   1cb30:	ebfffefb 	bl	1c724 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   1cb34:	e3500002 	cmp	r0, #2
   1cb38:	9584084c 	strls	r0, [r4, #2124]	; 0x84c
   1cb3c:	eaffff7b 	b	1c930 <CKernelOptions::CKernelOptions()+0xb0>
   1cb40:	e1a0100a 	mov	r1, sl
   1cb44:	e1a00006 	mov	r0, r6
   1cb48:	eb00131f 	bl	217cc <strcmp>
   1cb4c:	e3500000 	cmp	r0, #0
   1cb50:	1affff91 	bne	1c99c <CKernelOptions::CKernelOptions()+0x11c>
   1cb54:	e35b0000 	cmp	fp, #0
   1cb58:	0affff74 	beq	1c930 <CKernelOptions::CKernelOptions()+0xb0>
   1cb5c:	e1d530d1 	ldrsb	r3, [r5, #1]
   1cb60:	e3530000 	cmp	r3, #0
   1cb64:	0affff71 	beq	1c930 <CKernelOptions::CKernelOptions()+0xb0>
   1cb68:	e1a0000b 	mov	r0, fp
   1cb6c:	ebfffeec 	bl	1c724 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   1cb70:	e2403e1e 	sub	r3, r0, #480	; 0x1e0
   1cb74:	e3530f96 	cmp	r3, #600	; 0x258
   1cb78:	95840814 	strls	r0, [r4, #2068]	; 0x814
   1cb7c:	eaffff6b 	b	1c930 <CKernelOptions::CKernelOptions()+0xb0>
   1cb80:	e59f10ac 	ldr	r1, [pc, #172]	; 1cc34 <CKernelOptions::CKernelOptions()+0x3b4>
   1cb84:	e1a00006 	mov	r0, r6
   1cb88:	eb00130f 	bl	217cc <strcmp>
   1cb8c:	e3500000 	cmp	r0, #0
   1cb90:	1a000006 	bne	1cbb0 <CKernelOptions::CKernelOptions()+0x330>
   1cb94:	e1a0000b 	mov	r0, fp
   1cb98:	e59f1098 	ldr	r1, [pc, #152]	; 1cc38 <CKernelOptions::CKernelOptions()+0x3b8>
   1cb9c:	eb00130a 	bl	217cc <strcmp>
   1cba0:	e3500000 	cmp	r0, #0
   1cba4:	03a03001 	moveq	r3, #1
   1cba8:	05c43850 	strbeq	r3, [r4, #2128]	; 0x850
   1cbac:	eaffff5f 	b	1c930 <CKernelOptions::CKernelOptions()+0xb0>
   1cbb0:	e1a00006 	mov	r0, r6
   1cbb4:	e59f1080 	ldr	r1, [pc, #128]	; 1cc3c <CKernelOptions::CKernelOptions()+0x3bc>
   1cbb8:	eb001303 	bl	217cc <strcmp>
   1cbbc:	e2903000 	adds	r3, r0, #0
   1cbc0:	13a03001 	movne	r3, #1
   1cbc4:	e35b0000 	cmp	fp, #0
   1cbc8:	03833001 	orreq	r3, r3, #1
   1cbcc:	e3530000 	cmp	r3, #0
   1cbd0:	1affff56 	bne	1c930 <CKernelOptions::CKernelOptions()+0xb0>
   1cbd4:	e1db30d0 	ldrsb	r3, [fp]
   1cbd8:	e3530000 	cmp	r3, #0
   1cbdc:	0affff53 	beq	1c930 <CKernelOptions::CKernelOptions()+0xb0>
   1cbe0:	e1a0000b 	mov	r0, fp
   1cbe4:	ebfffece 	bl	1c724 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   1cbe8:	e2403028 	sub	r3, r0, #40	; 0x28
   1cbec:	e3530026 	cmp	r3, #38	; 0x26
   1cbf0:	95840854 	strls	r0, [r4, #2132]	; 0x854
   1cbf4:	eaffff4d 	b	1c930 <CKernelOptions::CKernelOptions()+0xb0>
   1cbf8:	00028e48 	.word	0x00028e48
   1cbfc:	00028160 	.word	0x00028160
   1cc00:	0002b288 	.word	0x0002b288
   1cc04:	0000080c 	.word	0x0000080c
   1cc08:	00050001 	.word	0x00050001
   1cc0c:	00028eb8 	.word	0x00028eb8
   1cc10:	00028e50 	.word	0x00028e50
   1cc14:	00028e58 	.word	0x00028e58
   1cc18:	00028e60 	.word	0x00028e60
   1cc1c:	0000053c 	.word	0x0000053c
   1cc20:	00028e6c 	.word	0x00028e6c
   1cc24:	00028e74 	.word	0x00028e74
   1cc28:	00001e78 	.word	0x00001e78
   1cc2c:	00028e84 	.word	0x00028e84
   1cc30:	00028e90 	.word	0x00028e90
   1cc34:	00028e9c 	.word	0x00028e9c
   1cc38:	00028ea4 	.word	0x00028ea4
   1cc3c:	00028eac 	.word	0x00028eac

0001cc40 <CKernelOptions::GetOptionValue(char*)>:
   1cc40:	e1d030d0 	ldrsb	r3, [r0]
   1cc44:	e3530000 	cmp	r3, #0
   1cc48:	1a000003 	bne	1cc5c <CKernelOptions::GetOptionValue(char*)+0x1c>
   1cc4c:	ea000007 	b	1cc70 <CKernelOptions::GetOptionValue(char*)+0x30>
   1cc50:	e1f030d1 	ldrsb	r3, [r0, #1]!
   1cc54:	e3530000 	cmp	r3, #0
   1cc58:	0a000004 	beq	1cc70 <CKernelOptions::GetOptionValue(char*)+0x30>
   1cc5c:	e353003d 	cmp	r3, #61	; 0x3d
   1cc60:	1afffffa 	bne	1cc50 <CKernelOptions::GetOptionValue(char*)+0x10>
   1cc64:	e3a02000 	mov	r2, #0
   1cc68:	e2803001 	add	r3, r0, #1
   1cc6c:	e5c02000 	strb	r2, [r0]
   1cc70:	e1a00003 	mov	r0, r3
   1cc74:	e12fff1e 	bx	lr

0001cc78 <CKernelOptions::GetDecimal(char*)>:
   1cc78:	e2503000 	subs	r3, r0, #0
   1cc7c:	0a000002 	beq	1cc8c <CKernelOptions::GetDecimal(char*)+0x14>
   1cc80:	e1d330d0 	ldrsb	r3, [r3]
   1cc84:	e3530000 	cmp	r3, #0
   1cc88:	1a000001 	bne	1cc94 <CKernelOptions::GetDecimal(char*)+0x1c>
   1cc8c:	e3e00000 	mvn	r0, #0
   1cc90:	e12fff1e 	bx	lr
   1cc94:	eafffea2 	b	1c724 <CKernelOptions::GetDecimal(char*) [clone .part.0]>

0001cc98 <CLogger::CLogger(unsigned int, CTimer*)>:
   1cc98:	e92d4010 	push	{r4, lr}
   1cc9c:	e3a03000 	mov	r3, #0
   1cca0:	e1a04000 	mov	r4, r0
   1cca4:	e3a00001 	mov	r0, #1
   1cca8:	e884000e 	stm	r4, {r1, r2, r3}
   1ccac:	e584300c 	str	r3, [r4, #12]
   1ccb0:	e5843010 	str	r3, [r4, #16]
   1ccb4:	e5843014 	str	r3, [r4, #20]
   1ccb8:	e58430e4 	str	r3, [r4, #228]	; 0xe4
   1ccbc:	e58430e8 	str	r3, [r4, #232]	; 0xe8
   1ccc0:	e58430f0 	str	r3, [r4, #240]	; 0xf0
   1ccc4:	e58430f4 	str	r3, [r4, #244]	; 0xf4
   1ccc8:	e5840018 	str	r0, [r4, #24]
   1cccc:	e58400ec 	str	r0, [r4, #236]	; 0xec
   1ccd0:	e3a00901 	mov	r0, #16384	; 0x4000
   1ccd4:	eb001701 	bl	228e0 <operator new[](unsigned int)>
   1ccd8:	e59f300c 	ldr	r3, [pc, #12]	; 1ccec <CLogger::CLogger(unsigned int, CTimer*)+0x54>
   1ccdc:	e584000c 	str	r0, [r4, #12]
   1cce0:	e5834000 	str	r4, [r3]
   1cce4:	e1a00004 	mov	r0, r4
   1cce8:	e8bd8010 	pop	{r4, pc}
   1ccec:	0002b28c 	.word	0x0002b28c

0001ccf0 <CLogger::~CLogger()>:
   1ccf0:	e3a02000 	mov	r2, #0
   1ccf4:	e59f1064 	ldr	r1, [pc, #100]	; 1cd60 <CLogger::~CLogger()+0x70>
   1ccf8:	e92d4070 	push	{r4, r5, r6, lr}
   1ccfc:	e59030e8 	ldr	r3, [r0, #232]	; 0xe8
   1cd00:	e1a04000 	mov	r4, r0
   1cd04:	e1a06002 	mov	r6, r2
   1cd08:	e3a05f42 	mov	r5, #264	; 0x108
   1cd0c:	e5812000 	str	r2, [r1]
   1cd10:	ea000008 	b	1cd38 <CLogger::~CLogger()+0x48>
   1cd14:	e591001c 	ldr	r0, [r1, #28]
   1cd18:	e1a01005 	mov	r1, r5
   1cd1c:	eb0016f2 	bl	228ec <operator delete(void*, unsigned int)>
   1cd20:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
   1cd24:	e2833001 	add	r3, r3, #1
   1cd28:	e3530032 	cmp	r3, #50	; 0x32
   1cd2c:	e58430e8 	str	r3, [r4, #232]	; 0xe8
   1cd30:	03a03000 	moveq	r3, #0
   1cd34:	058460e8 	streq	r6, [r4, #232]	; 0xe8
   1cd38:	e59420e4 	ldr	r2, [r4, #228]	; 0xe4
   1cd3c:	e0841103 	add	r1, r4, r3, lsl #2
   1cd40:	e1520003 	cmp	r2, r3
   1cd44:	1afffff2 	bne	1cd14 <CLogger::~CLogger()+0x24>
   1cd48:	e594000c 	ldr	r0, [r4, #12]
   1cd4c:	e3500000 	cmp	r0, #0
   1cd50:	0a000000 	beq	1cd58 <CLogger::~CLogger()+0x68>
   1cd54:	eb0016e3 	bl	228e8 <operator delete[](void*)>
   1cd58:	e1a00004 	mov	r0, r4
   1cd5c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1cd60:	0002b28c 	.word	0x0002b28c

0001cd64 <CLogger::Get()>:
   1cd64:	e59f3004 	ldr	r3, [pc, #4]	; 1cd70 <CLogger::Get()+0xc>
   1cd68:	e5930000 	ldr	r0, [r3]
   1cd6c:	e12fff1e 	bx	lr
   1cd70:	0002b28c 	.word	0x0002b28c

0001cd74 <CLogger::Write(char const*)>:
   1cd74:	e92d4070 	push	{r4, r5, r6, lr}
   1cd78:	e1a04000 	mov	r4, r0
   1cd7c:	e1a00001 	mov	r0, r1
   1cd80:	e1a05001 	mov	r5, r1
   1cd84:	eb001286 	bl	217a4 <strlen>
   1cd88:	e1a06000 	mov	r6, r0
   1cd8c:	e5940008 	ldr	r0, [r4, #8]
   1cd90:	e1a02006 	mov	r2, r6
   1cd94:	e5903000 	ldr	r3, [r0]
   1cd98:	e1a01005 	mov	r1, r5
   1cd9c:	e593300c 	ldr	r3, [r3, #12]
   1cda0:	e12fff33 	blx	r3
   1cda4:	e5940018 	ldr	r0, [r4, #24]
   1cda8:	e3500000 	cmp	r0, #0
   1cdac:	1a000018 	bne	1ce14 <CLogger::Write(char const*)+0xa0>
   1cdb0:	e59f2064 	ldr	r2, [pc, #100]	; 1ce1c <CLogger::Write(char const*)+0xa8>
   1cdb4:	e0850006 	add	r0, r5, r6
   1cdb8:	e1550000 	cmp	r5, r0
   1cdbc:	0a00000f 	beq	1ce00 <CLogger::Write(char const*)+0x8c>
   1cdc0:	e0d510d1 	ldrsb	r1, [r5], #1
   1cdc4:	e351000d 	cmp	r1, #13
   1cdc8:	0afffffa 	beq	1cdb8 <CLogger::Write(char const*)+0x44>
   1cdcc:	e594c010 	ldr	ip, [r4, #16]
   1cdd0:	e594e00c 	ldr	lr, [r4, #12]
   1cdd4:	e7ce100c 	strb	r1, [lr, ip]
   1cdd8:	e5943010 	ldr	r3, [r4, #16]
   1cddc:	e5941014 	ldr	r1, [r4, #20]
   1cde0:	e2833001 	add	r3, r3, #1
   1cde4:	e0033002 	and	r3, r3, r2
   1cde8:	e1530001 	cmp	r3, r1
   1cdec:	e5843010 	str	r3, [r4, #16]
   1cdf0:	1afffff0 	bne	1cdb8 <CLogger::Write(char const*)+0x44>
   1cdf4:	e2433001 	sub	r3, r3, #1
   1cdf8:	e0033002 	and	r3, r3, r2
   1cdfc:	e5843010 	str	r3, [r4, #16]
   1ce00:	e5943018 	ldr	r3, [r4, #24]
   1ce04:	e3530000 	cmp	r3, #0
   1ce08:	08bd8070 	popeq	{r4, r5, r6, pc}
   1ce0c:	e8bd4070 	pop	{r4, r5, r6, lr}
   1ce10:	ea001684 	b	22828 <LeaveCritical>
   1ce14:	eb001656 	bl	22774 <EnterCritical>
   1ce18:	eaffffe4 	b	1cdb0 <CLogger::Write(char const*)+0x3c>
   1ce1c:	00003fff 	.word	0x00003fff

0001ce20 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)>:
   1ce20:	e590c000 	ldr	ip, [r0]
   1ce24:	e152000c 	cmp	r2, ip
   1ce28:	812fff1e 	bxhi	lr
   1ce2c:	e92d4070 	push	{r4, r5, r6, lr}
   1ce30:	e1a05003 	mov	r5, r3
   1ce34:	e3a03000 	mov	r3, #0
   1ce38:	e24dd0c8 	sub	sp, sp, #200	; 0xc8
   1ce3c:	e1520003 	cmp	r2, r3
   1ce40:	e1a04000 	mov	r4, r0
   1ce44:	e5cd3000 	strb	r3, [sp]
   1ce48:	0a00000f 	beq	1ce8c <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x6c>
   1ce4c:	e1a0000d 	mov	r0, sp
   1ce50:	eb0012ef 	bl	21a14 <strcat>
   1ce54:	e1a0000d 	mov	r0, sp
   1ce58:	e59f1088 	ldr	r1, [pc, #136]	; 1cee8 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xc8>
   1ce5c:	eb0012ec 	bl	21a14 <strcat>
   1ce60:	e1a01005 	mov	r1, r5
   1ce64:	e1a0000d 	mov	r0, sp
   1ce68:	eb0012e9 	bl	21a14 <strcat>
   1ce6c:	e1a0000d 	mov	r0, sp
   1ce70:	e59f1074 	ldr	r1, [pc, #116]	; 1ceec <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xcc>
   1ce74:	eb0012e6 	bl	21a14 <strcat>
   1ce78:	e1a0100d 	mov	r1, sp
   1ce7c:	e1a00004 	mov	r0, r4
   1ce80:	ebffffbb 	bl	1cd74 <CLogger::Write(char const*)>
   1ce84:	e28dd0c8 	add	sp, sp, #200	; 0xc8
   1ce88:	e8bd8070 	pop	{r4, r5, r6, pc}
   1ce8c:	e1a06001 	mov	r6, r1
   1ce90:	e1a0000d 	mov	r0, sp
   1ce94:	e59f1054 	ldr	r1, [pc, #84]	; 1cef0 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd0>
   1ce98:	eb0012bf 	bl	2199c <strcpy>
   1ce9c:	e1a01006 	mov	r1, r6
   1cea0:	e1a0000d 	mov	r0, sp
   1cea4:	eb0012da 	bl	21a14 <strcat>
   1cea8:	e59f1038 	ldr	r1, [pc, #56]	; 1cee8 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xc8>
   1ceac:	e1a0000d 	mov	r0, sp
   1ceb0:	eb0012d7 	bl	21a14 <strcat>
   1ceb4:	e1a01005 	mov	r1, r5
   1ceb8:	e1a0000d 	mov	r0, sp
   1cebc:	eb0012d4 	bl	21a14 <strcat>
   1cec0:	e59f102c 	ldr	r1, [pc, #44]	; 1cef4 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd4>
   1cec4:	e1a0000d 	mov	r0, sp
   1cec8:	eb0012d1 	bl	21a14 <strcat>
   1cecc:	e59f1018 	ldr	r1, [pc, #24]	; 1ceec <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xcc>
   1ced0:	e1a0000d 	mov	r0, sp
   1ced4:	eb0012ce 	bl	21a14 <strcat>
   1ced8:	e1a0100d 	mov	r1, sp
   1cedc:	e1a00004 	mov	r0, r4
   1cee0:	ebffffa3 	bl	1cd74 <CLogger::Write(char const*)>
   1cee4:	eb000e63 	bl	20878 <halt>
   1cee8:	00028ec8 	.word	0x00028ec8
   1ceec:	0002819c 	.word	0x0002819c
   1cef0:	00028ec0 	.word	0x00028ec0
   1cef4:	00028ecc 	.word	0x00028ecc

0001cef8 <CLogger::Read(void*, unsigned int)>:
   1cef8:	e92d4070 	push	{r4, r5, r6, lr}
   1cefc:	e1a04000 	mov	r4, r0
   1cf00:	e5900018 	ldr	r0, [r0, #24]
   1cf04:	e1a05001 	mov	r5, r1
   1cf08:	e3500000 	cmp	r0, #0
   1cf0c:	e1a06002 	mov	r6, r2
   1cf10:	1a00001c 	bne	1cf88 <CLogger::Read(void*, unsigned int)+0x90>
   1cf14:	e5942010 	ldr	r2, [r4, #16]
   1cf18:	e5943014 	ldr	r3, [r4, #20]
   1cf1c:	e1520003 	cmp	r2, r3
   1cf20:	0a000021 	beq	1cfac <CLogger::Read(void*, unsigned int)+0xb4>
   1cf24:	e1a01005 	mov	r1, r5
   1cf28:	e59f2088 	ldr	r2, [pc, #136]	; 1cfb8 <CLogger::Read(void*, unsigned int)+0xc0>
   1cf2c:	e3a05000 	mov	r5, #0
   1cf30:	ea00000a 	b	1cf60 <CLogger::Read(void*, unsigned int)+0x68>
   1cf34:	e594000c 	ldr	r0, [r4, #12]
   1cf38:	e2855001 	add	r5, r5, #1
   1cf3c:	e19030d3 	ldrsb	r3, [r0, r3]
   1cf40:	e4c13001 	strb	r3, [r1], #1
   1cf44:	e5943014 	ldr	r3, [r4, #20]
   1cf48:	e5940010 	ldr	r0, [r4, #16]
   1cf4c:	e2833001 	add	r3, r3, #1
   1cf50:	e0033002 	and	r3, r3, r2
   1cf54:	e1530000 	cmp	r3, r0
   1cf58:	e5843014 	str	r3, [r4, #20]
   1cf5c:	0a000001 	beq	1cf68 <CLogger::Read(void*, unsigned int)+0x70>
   1cf60:	e1550006 	cmp	r5, r6
   1cf64:	1afffff2 	bne	1cf34 <CLogger::Read(void*, unsigned int)+0x3c>
   1cf68:	e5943018 	ldr	r3, [r4, #24]
   1cf6c:	e3530000 	cmp	r3, #0
   1cf70:	1a000001 	bne	1cf7c <CLogger::Read(void*, unsigned int)+0x84>
   1cf74:	e1a00005 	mov	r0, r5
   1cf78:	e8bd8070 	pop	{r4, r5, r6, pc}
   1cf7c:	eb001629 	bl	22828 <LeaveCritical>
   1cf80:	e1a00005 	mov	r0, r5
   1cf84:	e8bd8070 	pop	{r4, r5, r6, pc}
   1cf88:	eb0015f9 	bl	22774 <EnterCritical>
   1cf8c:	e5942010 	ldr	r2, [r4, #16]
   1cf90:	e5943014 	ldr	r3, [r4, #20]
   1cf94:	e1520003 	cmp	r2, r3
   1cf98:	1affffe1 	bne	1cf24 <CLogger::Read(void*, unsigned int)+0x2c>
   1cf9c:	e5943018 	ldr	r3, [r4, #24]
   1cfa0:	e3530000 	cmp	r3, #0
   1cfa4:	0a000000 	beq	1cfac <CLogger::Read(void*, unsigned int)+0xb4>
   1cfa8:	eb00161e 	bl	22828 <LeaveCritical>
   1cfac:	e3e05000 	mvn	r5, #0
   1cfb0:	e1a00005 	mov	r0, r5
   1cfb4:	e8bd8070 	pop	{r4, r5, r6, pc}
   1cfb8:	00003fff 	.word	0x00003fff

0001cfbc <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>:
   1cfbc:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   1cfc0:	e1a05000 	mov	r5, r0
   1cfc4:	e24dd00c 	sub	sp, sp, #12
   1cfc8:	e3a00f42 	mov	r0, #264	; 0x108
   1cfcc:	e1a07003 	mov	r7, r3
   1cfd0:	e1a09002 	mov	r9, r2
   1cfd4:	e1a08001 	mov	r8, r1
   1cfd8:	eb00163f 	bl	228dc <operator new(unsigned int)>
   1cfdc:	e3a06000 	mov	r6, #0
   1cfe0:	e1a04000 	mov	r4, r0
   1cfe4:	e1a01008 	mov	r1, r8
   1cfe8:	e3a02032 	mov	r2, #50	; 0x32
   1cfec:	e4c09001 	strb	r9, [r0], #1
   1cff0:	eb001274 	bl	219c8 <strncpy>
   1cff4:	e1a01007 	mov	r1, r7
   1cff8:	e2840033 	add	r0, r4, #51	; 0x33
   1cffc:	e3a020c8 	mov	r2, #200	; 0xc8
   1d000:	e5c46032 	strb	r6, [r4, #50]	; 0x32
   1d004:	eb00126f 	bl	219c8 <strncpy>
   1d008:	e5950004 	ldr	r0, [r5, #4]
   1d00c:	e5c460fa 	strb	r6, [r4, #250]	; 0xfa
   1d010:	e1500006 	cmp	r0, r6
   1d014:	0a000004 	beq	1d02c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x70>
   1d018:	e28d2004 	add	r2, sp, #4
   1d01c:	e1a0100d 	mov	r1, sp
   1d020:	eb000eef 	bl	20be4 <CTimer::GetLocalTime(unsigned int*, unsigned int*)>
   1d024:	e1500006 	cmp	r0, r6
   1d028:	1a000021 	bne	1d0b4 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xf8>
   1d02c:	e3a03000 	mov	r3, #0
   1d030:	e59500ec 	ldr	r0, [r5, #236]	; 0xec
   1d034:	e58430fc 	str	r3, [r4, #252]	; 0xfc
   1d038:	e3500000 	cmp	r0, #0
   1d03c:	e5843100 	str	r3, [r4, #256]	; 0x100
   1d040:	e5843104 	str	r3, [r4, #260]	; 0x104
   1d044:	1a000027 	bne	1d0e8 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x12c>
   1d048:	e59520e4 	ldr	r2, [r5, #228]	; 0xe4
   1d04c:	e2823001 	add	r3, r2, #1
   1d050:	e3530032 	cmp	r3, #50	; 0x32
   1d054:	e0852102 	add	r2, r5, r2, lsl #2
   1d058:	e582401c 	str	r4, [r2, #28]
   1d05c:	03a02000 	moveq	r2, #0
   1d060:	01a03002 	moveq	r3, r2
   1d064:	058520e4 	streq	r2, [r5, #228]	; 0xe4
   1d068:	e59520e8 	ldr	r2, [r5, #232]	; 0xe8
   1d06c:	158530e4 	strne	r3, [r5, #228]	; 0xe4
   1d070:	e1520003 	cmp	r2, r3
   1d074:	0a00001e 	beq	1d0f4 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x138>
   1d078:	e3500000 	cmp	r0, #0
   1d07c:	13a04000 	movne	r4, #0
   1d080:	0a000005 	beq	1d09c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xe0>
   1d084:	eb0015e7 	bl	22828 <LeaveCritical>
   1d088:	e3540000 	cmp	r4, #0
   1d08c:	0a000002 	beq	1d09c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xe0>
   1d090:	e1a00004 	mov	r0, r4
   1d094:	e3a01f42 	mov	r1, #264	; 0x108
   1d098:	eb001613 	bl	228ec <operator delete(void*, unsigned int)>
   1d09c:	e59530f0 	ldr	r3, [r5, #240]	; 0xf0
   1d0a0:	e3530000 	cmp	r3, #0
   1d0a4:	0a000000 	beq	1d0ac <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xf0>
   1d0a8:	e12fff33 	blx	r3
   1d0ac:	e28dd00c 	add	sp, sp, #12
   1d0b0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1d0b4:	e59d3004 	ldr	r3, [sp, #4]
   1d0b8:	e59f105c 	ldr	r1, [pc, #92]	; 1d11c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x160>
   1d0bc:	e59d2000 	ldr	r2, [sp]
   1d0c0:	e0831391 	umull	r1, r3, r1, r3
   1d0c4:	e1a036a3 	lsr	r3, r3, #13
   1d0c8:	e5950004 	ldr	r0, [r5, #4]
   1d0cc:	e5843100 	str	r3, [r4, #256]	; 0x100
   1d0d0:	e58420fc 	str	r2, [r4, #252]	; 0xfc
   1d0d4:	eb000e94 	bl	20b2c <CTimer::GetTimeZone() const>
   1d0d8:	e5840104 	str	r0, [r4, #260]	; 0x104
   1d0dc:	e59500ec 	ldr	r0, [r5, #236]	; 0xec
   1d0e0:	e3500000 	cmp	r0, #0
   1d0e4:	0affffd7 	beq	1d048 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x8c>
   1d0e8:	eb0015a1 	bl	22774 <EnterCritical>
   1d0ec:	e59500ec 	ldr	r0, [r5, #236]	; 0xec
   1d0f0:	eaffffd4 	b	1d048 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x8c>
   1d0f4:	e2832001 	add	r2, r3, #1
   1d0f8:	e3520032 	cmp	r2, #50	; 0x32
   1d0fc:	e0853103 	add	r3, r5, r3, lsl #2
   1d100:	e593401c 	ldr	r4, [r3, #28]
   1d104:	03a03000 	moveq	r3, #0
   1d108:	158520e8 	strne	r2, [r5, #232]	; 0xe8
   1d10c:	058530e8 	streq	r3, [r5, #232]	; 0xe8
   1d110:	e3500000 	cmp	r0, #0
   1d114:	0affffdb 	beq	1d088 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xcc>
   1d118:	eaffffd9 	b	1d084 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xc8>
   1d11c:	d1b71759 	.word	0xd1b71759

0001d120 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)>:
   1d120:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1d124:	e1a04000 	mov	r4, r0
   1d128:	e59000ec 	ldr	r0, [r0, #236]	; 0xec
   1d12c:	e1a07001 	mov	r7, r1
   1d130:	e3500000 	cmp	r0, #0
   1d134:	e1a08002 	mov	r8, r2
   1d138:	e1a06003 	mov	r6, r3
   1d13c:	1a000022 	bne	1d1cc <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xac>
   1d140:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
   1d144:	e59420e4 	ldr	r2, [r4, #228]	; 0xe4
   1d148:	e1530002 	cmp	r3, r2
   1d14c:	0a000028 	beq	1d1f4 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xd4>
   1d150:	e283c001 	add	ip, r3, #1
   1d154:	e35c0032 	cmp	ip, #50	; 0x32
   1d158:	e0843103 	add	r3, r4, r3, lsl #2
   1d15c:	e593501c 	ldr	r5, [r3, #28]
   1d160:	03a03000 	moveq	r3, #0
   1d164:	1584c0e8 	strne	ip, [r4, #232]	; 0xe8
   1d168:	058430e8 	streq	r3, [r4, #232]	; 0xe8
   1d16c:	e3500000 	cmp	r0, #0
   1d170:	1a000021 	bne	1d1fc <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xdc>
   1d174:	e1a01005 	mov	r1, r5
   1d178:	e4d12001 	ldrb	r2, [r1], #1
   1d17c:	e1a00008 	mov	r0, r8
   1d180:	e5c72000 	strb	r2, [r7]
   1d184:	eb001204 	bl	2199c <strcpy>
   1d188:	e2851033 	add	r1, r5, #51	; 0x33
   1d18c:	e1a00006 	mov	r0, r6
   1d190:	eb001201 	bl	2199c <strcpy>
   1d194:	e59520fc 	ldr	r2, [r5, #252]	; 0xfc
   1d198:	e59d1018 	ldr	r1, [sp, #24]
   1d19c:	e5953100 	ldr	r3, [r5, #256]	; 0x100
   1d1a0:	e5812000 	str	r2, [r1]
   1d1a4:	e59d201c 	ldr	r2, [sp, #28]
   1d1a8:	e1a00005 	mov	r0, r5
   1d1ac:	e5823000 	str	r3, [r2]
   1d1b0:	e5953104 	ldr	r3, [r5, #260]	; 0x104
   1d1b4:	e59d2020 	ldr	r2, [sp, #32]
   1d1b8:	e3a01f42 	mov	r1, #264	; 0x108
   1d1bc:	e5823000 	str	r3, [r2]
   1d1c0:	eb0015c9 	bl	228ec <operator delete(void*, unsigned int)>
   1d1c4:	e3a00001 	mov	r0, #1
   1d1c8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1d1cc:	eb001568 	bl	22774 <EnterCritical>
   1d1d0:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
   1d1d4:	e59420e4 	ldr	r2, [r4, #228]	; 0xe4
   1d1d8:	e1520003 	cmp	r2, r3
   1d1dc:	159400ec 	ldrne	r0, [r4, #236]	; 0xec
   1d1e0:	1affffda 	bne	1d150 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x30>
   1d1e4:	e59430ec 	ldr	r3, [r4, #236]	; 0xec
   1d1e8:	e3530000 	cmp	r3, #0
   1d1ec:	0a000000 	beq	1d1f4 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xd4>
   1d1f0:	eb00158c 	bl	22828 <LeaveCritical>
   1d1f4:	e3a00000 	mov	r0, #0
   1d1f8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1d1fc:	eb001589 	bl	22828 <LeaveCritical>
   1d200:	eaffffdb 	b	1d174 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x54>

0001d204 <CLogger::RegisterEventNotificationHandler(void (*)())>:
   1d204:	e58010f0 	str	r1, [r0, #240]	; 0xf0
   1d208:	e12fff1e 	bx	lr

0001d20c <CLogger::RegisterPanicHandler(void (*)())>:
   1d20c:	e58010f4 	str	r1, [r0, #244]	; 0xf4
   1d210:	e12fff1e 	bx	lr

0001d214 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>:
   1d214:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1d218:	e1a07003 	mov	r7, r3
   1d21c:	e24dd024 	sub	sp, sp, #36	; 0x24
   1d220:	e1a04000 	mov	r4, r0
   1d224:	e1a0000d 	mov	r0, sp
   1d228:	e1a05002 	mov	r5, r2
   1d22c:	e1a06001 	mov	r6, r1
   1d230:	eb000995 	bl	1f88c <CString::CString()>
   1d234:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
   1d238:	e1a01007 	mov	r1, r7
   1d23c:	e1a0000d 	mov	r0, sp
   1d240:	eb000b5e 	bl	1ffc0 <CString::FormatV(char const*, std::__va_list)>
   1d244:	e1a0000d 	mov	r0, sp
   1d248:	eb0009a5 	bl	1f8e4 <CString::operator char const*() const>
   1d24c:	e1a02005 	mov	r2, r5
   1d250:	e1a03000 	mov	r3, r0
   1d254:	e1a01006 	mov	r1, r6
   1d258:	e1a00004 	mov	r0, r4
   1d25c:	ebffff56 	bl	1cfbc <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>
   1d260:	e5943000 	ldr	r3, [r4]
   1d264:	e1550003 	cmp	r5, r3
   1d268:	8a00002c 	bhi	1d320 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x10c>
   1d26c:	e28d0010 	add	r0, sp, #16
   1d270:	eb000985 	bl	1f88c <CString::CString()>
   1d274:	e3550000 	cmp	r5, #0
   1d278:	0a00002c 	beq	1d330 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x11c>
   1d27c:	e5940004 	ldr	r0, [r4, #4]
   1d280:	e3500000 	cmp	r0, #0
   1d284:	0a00004a 	beq	1d3b4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1a0>
   1d288:	eb000ec6 	bl	20da8 <CTimer::GetTimeString()>
   1d28c:	e2507000 	subs	r7, r0, #0
   1d290:	0a000047 	beq	1d3b4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1a0>
   1d294:	e1a00007 	mov	r0, r7
   1d298:	eb000991 	bl	1f8e4 <CString::operator char const*() const>
   1d29c:	e1a01000 	mov	r1, r0
   1d2a0:	e28d0010 	add	r0, sp, #16
   1d2a4:	eb0009c0 	bl	1f9ac <CString::Append(char const*)>
   1d2a8:	e59f1144 	ldr	r1, [pc, #324]	; 1d3f4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e0>
   1d2ac:	e28d0010 	add	r0, sp, #16
   1d2b0:	eb0009bd 	bl	1f9ac <CString::Append(char const*)>
   1d2b4:	e5973000 	ldr	r3, [r7]
   1d2b8:	e1a00007 	mov	r0, r7
   1d2bc:	e5933004 	ldr	r3, [r3, #4]
   1d2c0:	e12fff33 	blx	r3
   1d2c4:	e1a01006 	mov	r1, r6
   1d2c8:	e28d0010 	add	r0, sp, #16
   1d2cc:	eb0009b6 	bl	1f9ac <CString::Append(char const*)>
   1d2d0:	e59f1120 	ldr	r1, [pc, #288]	; 1d3f8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e4>
   1d2d4:	e28d0010 	add	r0, sp, #16
   1d2d8:	eb0009b3 	bl	1f9ac <CString::Append(char const*)>
   1d2dc:	e1a0000d 	mov	r0, sp
   1d2e0:	eb00097f 	bl	1f8e4 <CString::operator char const*() const>
   1d2e4:	e1a01000 	mov	r1, r0
   1d2e8:	e28d0010 	add	r0, sp, #16
   1d2ec:	eb0009ae 	bl	1f9ac <CString::Append(char const*)>
   1d2f0:	e3550000 	cmp	r5, #0
   1d2f4:	0a00001e 	beq	1d374 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x160>
   1d2f8:	e59f10fc 	ldr	r1, [pc, #252]	; 1d3fc <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e8>
   1d2fc:	e28d0010 	add	r0, sp, #16
   1d300:	eb0009a9 	bl	1f9ac <CString::Append(char const*)>
   1d304:	e28d0010 	add	r0, sp, #16
   1d308:	eb000975 	bl	1f8e4 <CString::operator char const*() const>
   1d30c:	e1a01000 	mov	r1, r0
   1d310:	e1a00004 	mov	r0, r4
   1d314:	ebfffe96 	bl	1cd74 <CLogger::Write(char const*)>
   1d318:	e28d0010 	add	r0, sp, #16
   1d31c:	eb000927 	bl	1f7c0 <CString::~CString()>
   1d320:	e1a0000d 	mov	r0, sp
   1d324:	eb000925 	bl	1f7c0 <CString::~CString()>
   1d328:	e28dd024 	add	sp, sp, #36	; 0x24
   1d32c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1d330:	e59f10c8 	ldr	r1, [pc, #200]	; 1d400 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1ec>
   1d334:	e28d0010 	add	r0, sp, #16
   1d338:	eb00096f 	bl	1f8fc <CString::operator=(char const*)>
   1d33c:	e5940004 	ldr	r0, [r4, #4]
   1d340:	e3500000 	cmp	r0, #0
   1d344:	1a000026 	bne	1d3e4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1d0>
   1d348:	e1a01006 	mov	r1, r6
   1d34c:	e28d0010 	add	r0, sp, #16
   1d350:	eb000995 	bl	1f9ac <CString::Append(char const*)>
   1d354:	e59f109c 	ldr	r1, [pc, #156]	; 1d3f8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e4>
   1d358:	e28d0010 	add	r0, sp, #16
   1d35c:	eb000992 	bl	1f9ac <CString::Append(char const*)>
   1d360:	e1a0000d 	mov	r0, sp
   1d364:	eb00095e 	bl	1f8e4 <CString::operator char const*() const>
   1d368:	e1a01000 	mov	r1, r0
   1d36c:	e28d0010 	add	r0, sp, #16
   1d370:	eb00098d 	bl	1f9ac <CString::Append(char const*)>
   1d374:	e59f1088 	ldr	r1, [pc, #136]	; 1d404 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1f0>
   1d378:	e28d0010 	add	r0, sp, #16
   1d37c:	eb00098a 	bl	1f9ac <CString::Append(char const*)>
   1d380:	e59f1074 	ldr	r1, [pc, #116]	; 1d3fc <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e8>
   1d384:	e28d0010 	add	r0, sp, #16
   1d388:	eb000987 	bl	1f9ac <CString::Append(char const*)>
   1d38c:	e28d0010 	add	r0, sp, #16
   1d390:	eb000953 	bl	1f8e4 <CString::operator char const*() const>
   1d394:	e1a01000 	mov	r1, r0
   1d398:	e1a00004 	mov	r0, r4
   1d39c:	ebfffe74 	bl	1cd74 <CLogger::Write(char const*)>
   1d3a0:	e59430f4 	ldr	r3, [r4, #244]	; 0xf4
   1d3a4:	e3530000 	cmp	r3, #0
   1d3a8:	0a000000 	beq	1d3b0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x19c>
   1d3ac:	e12fff33 	blx	r3
   1d3b0:	eb000d30 	bl	20878 <halt>
   1d3b4:	e1a01006 	mov	r1, r6
   1d3b8:	e28d0010 	add	r0, sp, #16
   1d3bc:	eb00097a 	bl	1f9ac <CString::Append(char const*)>
   1d3c0:	e59f1030 	ldr	r1, [pc, #48]	; 1d3f8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e4>
   1d3c4:	e28d0010 	add	r0, sp, #16
   1d3c8:	eb000977 	bl	1f9ac <CString::Append(char const*)>
   1d3cc:	e1a0000d 	mov	r0, sp
   1d3d0:	eb000943 	bl	1f8e4 <CString::operator char const*() const>
   1d3d4:	e1a01000 	mov	r1, r0
   1d3d8:	e28d0010 	add	r0, sp, #16
   1d3dc:	eb000972 	bl	1f9ac <CString::Append(char const*)>
   1d3e0:	eaffffc4 	b	1d2f8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xe4>
   1d3e4:	eb000e6f 	bl	20da8 <CTimer::GetTimeString()>
   1d3e8:	e2507000 	subs	r7, r0, #0
   1d3ec:	1affffa8 	bne	1d294 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x80>
   1d3f0:	eaffffd4 	b	1d348 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x134>
   1d3f4:	0002818c 	.word	0x0002818c
   1d3f8:	00028ec8 	.word	0x00028ec8
   1d3fc:	0002819c 	.word	0x0002819c
   1d400:	00028ec0 	.word	0x00028ec0
   1d404:	00028ecc 	.word	0x00028ecc

0001d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>:
   1d408:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)
   1d40c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   1d410:	e24dd010 	sub	sp, sp, #16
   1d414:	e28dc018 	add	ip, sp, #24
   1d418:	e58dc000 	str	ip, [sp]
   1d41c:	e59d3014 	ldr	r3, [sp, #20]
   1d420:	e58dc00c 	str	ip, [sp, #12]
   1d424:	ebffff7a 	bl	1d214 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
   1d428:	e28dd010 	add	sp, sp, #16
   1d42c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   1d430:	e28dd004 	add	sp, sp, #4
   1d434:	e12fff1e 	bx	lr

0001d438 <CLogger::Initialize(CDevice*)>:
   1d438:	e92d4010 	push	{r4, lr}
   1d43c:	e5801008 	str	r1, [r0, #8]
   1d440:	e24dd008 	sub	sp, sp, #8
   1d444:	e1a04000 	mov	r4, r0
   1d448:	eb000115 	bl	1d8a4 <CMachineInfo::Get()>
   1d44c:	eb00009e 	bl	1d6cc <CMachineInfo::GetMachineName() const>
   1d450:	e59f301c 	ldr	r3, [pc, #28]	; 1d474 <CLogger::Initialize(CDevice*)+0x3c>
   1d454:	e58d0000 	str	r0, [sp]
   1d458:	e3a02003 	mov	r2, #3
   1d45c:	e1a00004 	mov	r0, r4
   1d460:	e59f1010 	ldr	r1, [pc, #16]	; 1d478 <CLogger::Initialize(CDevice*)+0x40>
   1d464:	ebffffe7 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1d468:	e3a00001 	mov	r0, #1
   1d46c:	e28dd008 	add	sp, sp, #8
   1d470:	e8bd8010 	pop	{r4, pc}
   1d474:	00028ed4 	.word	0x00028ed4
   1d478:	00028eec 	.word	0x00028eec

0001d47c <CMachineInfo::CMachineInfo()>:
   1d47c:	e3a03000 	mov	r3, #0
   1d480:	e92d4030 	push	{r4, r5, lr}
   1d484:	e3a01003 	mov	r1, #3
   1d488:	e1a04000 	mov	r4, r0
   1d48c:	e3a0000e 	mov	r0, #14
   1d490:	e59f21f4 	ldr	r2, [pc, #500]	; 1d68c <CMachineInfo::CMachineInfo()+0x210>
   1d494:	e24dd024 	sub	sp, sp, #36	; 0x24
   1d498:	e5925000 	ldr	r5, [r2]
   1d49c:	e5c40004 	strb	r0, [r4, #4]
   1d4a0:	e1550003 	cmp	r5, r3
   1d4a4:	e5c41010 	strb	r1, [r4, #16]
   1d4a8:	e5843000 	str	r3, [r4]
   1d4ac:	e5843008 	str	r3, [r4, #8]
   1d4b0:	e584300c 	str	r3, [r4, #12]
   1d4b4:	e5843014 	str	r3, [r4, #20]
   1d4b8:	0a00000e 	beq	1d4f8 <CMachineInfo::CMachineInfo()+0x7c>
   1d4bc:	e595e000 	ldr	lr, [r5]
   1d4c0:	e5d5c004 	ldrb	ip, [r5, #4]
   1d4c4:	e5950008 	ldr	r0, [r5, #8]
   1d4c8:	e595100c 	ldr	r1, [r5, #12]
   1d4cc:	e5d52010 	ldrb	r2, [r5, #16]
   1d4d0:	e5953014 	ldr	r3, [r5, #20]
   1d4d4:	e584e000 	str	lr, [r4]
   1d4d8:	e5c4c004 	strb	ip, [r4, #4]
   1d4dc:	e5840008 	str	r0, [r4, #8]
   1d4e0:	e584100c 	str	r1, [r4, #12]
   1d4e4:	e5c42010 	strb	r2, [r4, #16]
   1d4e8:	e5843014 	str	r3, [r4, #20]
   1d4ec:	e1a00004 	mov	r0, r4
   1d4f0:	e28dd024 	add	sp, sp, #36	; 0x24
   1d4f4:	e8bd8030 	pop	{r4, r5, pc}
   1d4f8:	e28d000c 	add	r0, sp, #12
   1d4fc:	e5824000 	str	r4, [r2]
   1d500:	ebfff448 	bl	1a628 <CBcmPropertyTags::CBcmPropertyTags()>
   1d504:	e3a03010 	mov	r3, #16
   1d508:	e58d5000 	str	r5, [sp]
   1d50c:	e28d000c 	add	r0, sp, #12
   1d510:	e08d2003 	add	r2, sp, r3
   1d514:	e59f1174 	ldr	r1, [pc, #372]	; 1d690 <CMachineInfo::CMachineInfo()+0x214>
   1d518:	ebfff499 	bl	1a784 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   1d51c:	e3500000 	cmp	r0, #0
   1d520:	0a00000c 	beq	1d558 <CMachineInfo::CMachineInfo()+0xdc>
   1d524:	e59d101c 	ldr	r1, [sp, #28]
   1d528:	e2113502 	ands	r3, r1, #8388608	; 0x800000
   1d52c:	e5841000 	str	r1, [r4]
   1d530:	1a00000b 	bne	1d564 <CMachineInfo::CMachineInfo()+0xe8>
   1d534:	e3a02002 	mov	r2, #2
   1d538:	e59f0154 	ldr	r0, [pc, #340]	; 1d694 <CMachineInfo::CMachineInfo()+0x218>
   1d53c:	ea000000 	b	1d544 <CMachineInfo::CMachineInfo()+0xc8>
   1d540:	e7902203 	ldr	r2, [r0, r3, lsl #4]
   1d544:	e1510002 	cmp	r1, r2
   1d548:	0a000012 	beq	1d598 <CMachineInfo::CMachineInfo()+0x11c>
   1d54c:	e2833001 	add	r3, r3, #1
   1d550:	e3530011 	cmp	r3, #17
   1d554:	1afffff9 	bne	1d540 <CMachineInfo::CMachineInfo()+0xc4>
   1d558:	e28d000c 	add	r0, sp, #12
   1d55c:	ebfff437 	bl	1a640 <CBcmPropertyTags::~CBcmPropertyTags()>
   1d560:	eaffffe1 	b	1d4ec <CMachineInfo::CMachineInfo()+0x70>
   1d564:	e1a00221 	lsr	r0, r1, #4
   1d568:	e1a03005 	mov	r3, r5
   1d56c:	e59f2124 	ldr	r2, [pc, #292]	; 1d698 <CMachineInfo::CMachineInfo()+0x21c>
   1d570:	e6ef0070 	uxtb	r0, r0
   1d574:	ea000000 	b	1d57c <CMachineInfo::CMachineInfo()+0x100>
   1d578:	e512500c 	ldr	r5, [r2, #-12]
   1d57c:	e1500005 	cmp	r0, r5
   1d580:	0a000015 	beq	1d5dc <CMachineInfo::CMachineInfo()+0x160>
   1d584:	e2833001 	add	r3, r3, #1
   1d588:	e353000c 	cmp	r3, #12
   1d58c:	e282200c 	add	r2, r2, #12
   1d590:	1afffff8 	bne	1d578 <CMachineInfo::CMachineInfo()+0xfc>
   1d594:	eaffffef 	b	1d558 <CMachineInfo::CMachineInfo()+0xdc>
   1d598:	e59fc0fc 	ldr	ip, [pc, #252]	; 1d69c <CMachineInfo::CMachineInfo()+0x220>
   1d59c:	e1a03203 	lsl	r3, r3, #4
   1d5a0:	e08c2003 	add	r2, ip, r3
   1d5a4:	e5d22094 	ldrb	r2, [r2, #148]	; 0x94
   1d5a8:	e3a01001 	mov	r1, #1
   1d5ac:	e352000e 	cmp	r2, #14
   1d5b0:	c3a0200e 	movgt	r2, #14
   1d5b4:	e5c42004 	strb	r2, [r4, #4]
   1d5b8:	e3a02000 	mov	r2, #0
   1d5bc:	e08c3003 	add	r3, ip, r3
   1d5c0:	e5930098 	ldr	r0, [r3, #152]	; 0x98
   1d5c4:	e593309c 	ldr	r3, [r3, #156]	; 0x9c
   1d5c8:	e584000c 	str	r0, [r4, #12]
   1d5cc:	e5843014 	str	r3, [r4, #20]
   1d5d0:	e5841008 	str	r1, [r4, #8]
   1d5d4:	e5c42010 	strb	r2, [r4, #16]
   1d5d8:	eaffffde 	b	1d558 <CMachineInfo::CMachineInfo()+0xdc>
   1d5dc:	e1a02083 	lsl	r2, r3, #1
   1d5e0:	e59fc0b4 	ldr	ip, [pc, #180]	; 1d69c <CMachineInfo::CMachineInfo()+0x220>
   1d5e4:	e0820003 	add	r0, r2, r3
   1d5e8:	e08c0100 	add	r0, ip, r0, lsl #2
   1d5ec:	e5d00004 	ldrb	r0, [r0, #4]
   1d5f0:	e350000e 	cmp	r0, #14
   1d5f4:	ca00001e 	bgt	1d674 <CMachineInfo::CMachineInfo()+0x1f8>
   1d5f8:	e1a05a21 	lsr	r5, r1, #20
   1d5fc:	e2155007 	ands	r5, r5, #7
   1d600:	03a0e001 	moveq	lr, #1
   1d604:	13a0e000 	movne	lr, #0
   1d608:	e3500003 	cmp	r0, #3
   1d60c:	13a0e000 	movne	lr, #0
   1d610:	020ee001 	andeq	lr, lr, #1
   1d614:	e5c40004 	strb	r0, [r4, #4]
   1d618:	e0822003 	add	r2, r2, r3
   1d61c:	e1a03621 	lsr	r3, r1, #12
   1d620:	e203300f 	and	r3, r3, #15
   1d624:	e3530002 	cmp	r3, #2
   1d628:	e5c43010 	strb	r3, [r4, #16]
   1d62c:	e3a00c01 	mov	r0, #256	; 0x100
   1d630:	83a03003 	movhi	r3, #3
   1d634:	e08c2102 	add	r2, ip, r2, lsl #2
   1d638:	e592c008 	ldr	ip, [r2, #8]
   1d63c:	e201200f 	and	r2, r1, #15
   1d640:	e2822001 	add	r2, r2, #1
   1d644:	e1a01510 	lsl	r1, r0, r5
   1d648:	85c43010 	strbhi	r3, [r4, #16]
   1d64c:	e35e0000 	cmp	lr, #0
   1d650:	e584c008 	str	ip, [r4, #8]
   1d654:	e5841014 	str	r1, [r4, #20]
   1d658:	e584200c 	str	r2, [r4, #12]
   1d65c:	0affffbd 	beq	1d558 <CMachineInfo::CMachineInfo()+0xdc>
   1d660:	e3520001 	cmp	r2, #1
   1d664:	13a02002 	movne	r2, #2
   1d668:	03a02001 	moveq	r2, #1
   1d66c:	e5c42004 	strb	r2, [r4, #4]
   1d670:	eaffffb8 	b	1d558 <CMachineInfo::CMachineInfo()+0xdc>
   1d674:	e3a0000e 	mov	r0, #14
   1d678:	e1a05a21 	lsr	r5, r1, #20
   1d67c:	e3a0e000 	mov	lr, #0
   1d680:	e5c40004 	strb	r0, [r4, #4]
   1d684:	e2055007 	and	r5, r5, #7
   1d688:	eaffffe2 	b	1d618 <CMachineInfo::CMachineInfo()+0x19c>
   1d68c:	0002b290 	.word	0x0002b290
   1d690:	00010002 	.word	0x00010002
   1d694:	00028f84 	.word	0x00028f84
   1d698:	00028f00 	.word	0x00028f00
   1d69c:	00028ef4 	.word	0x00028ef4

0001d6a0 <CMachineInfo::~CMachineInfo()>:
   1d6a0:	e3a0200e 	mov	r2, #14
   1d6a4:	e59f3014 	ldr	r3, [pc, #20]	; 1d6c0 <CMachineInfo::~CMachineInfo()+0x20>
   1d6a8:	e5c02004 	strb	r2, [r0, #4]
   1d6ac:	e5932000 	ldr	r2, [r3]
   1d6b0:	e1500002 	cmp	r0, r2
   1d6b4:	03a02000 	moveq	r2, #0
   1d6b8:	05832000 	streq	r2, [r3]
   1d6bc:	e12fff1e 	bx	lr
   1d6c0:	0002b290 	.word	0x0002b290

0001d6c4 <CMachineInfo::GetMachineModel() const>:
   1d6c4:	e5d00004 	ldrb	r0, [r0, #4]
   1d6c8:	e12fff1e 	bx	lr

0001d6cc <CMachineInfo::GetMachineName() const>:
   1d6cc:	e5d02004 	ldrb	r2, [r0, #4]
   1d6d0:	e59f3008 	ldr	r3, [pc, #8]	; 1d6e0 <CMachineInfo::GetMachineName() const+0x14>
   1d6d4:	e0833102 	add	r3, r3, r2, lsl #2
   1d6d8:	e59301a0 	ldr	r0, [r3, #416]	; 0x1a0
   1d6dc:	e12fff1e 	bx	lr
   1d6e0:	00028ef4 	.word	0x00028ef4

0001d6e4 <CMachineInfo::GetModelMajor() const>:
   1d6e4:	e5900008 	ldr	r0, [r0, #8]
   1d6e8:	e12fff1e 	bx	lr

0001d6ec <CMachineInfo::GetModelRevision() const>:
   1d6ec:	e590000c 	ldr	r0, [r0, #12]
   1d6f0:	e12fff1e 	bx	lr

0001d6f4 <CMachineInfo::GetSoCType() const>:
   1d6f4:	e5d00010 	ldrb	r0, [r0, #16]
   1d6f8:	e12fff1e 	bx	lr

0001d6fc <CMachineInfo::GetRAMSize() const>:
   1d6fc:	e5900014 	ldr	r0, [r0, #20]
   1d700:	e12fff1e 	bx	lr

0001d704 <CMachineInfo::GetSoCName() const>:
   1d704:	e5d02010 	ldrb	r2, [r0, #16]
   1d708:	e59f3008 	ldr	r3, [pc, #8]	; 1d718 <CMachineInfo::GetSoCName() const+0x14>
   1d70c:	e0833102 	add	r3, r3, r2, lsl #2
   1d710:	e59301dc 	ldr	r0, [r3, #476]	; 0x1dc
   1d714:	e12fff1e 	bx	lr
   1d718:	00028ef4 	.word	0x00028ef4

0001d71c <CMachineInfo::GetRevisionRaw() const>:
   1d71c:	e5900000 	ldr	r0, [r0]
   1d720:	e12fff1e 	bx	lr

0001d724 <CMachineInfo::GetClockRate(unsigned int) const>:
   1d724:	e92d4070 	push	{r4, r5, r6, lr}
   1d728:	e24dd020 	sub	sp, sp, #32
   1d72c:	e1a06000 	mov	r6, r0
   1d730:	e28d0008 	add	r0, sp, #8
   1d734:	e1a05001 	mov	r5, r1
   1d738:	ebfff3ba 	bl	1a628 <CBcmPropertyTags::CBcmPropertyTags()>
   1d73c:	e3a03004 	mov	r3, #4
   1d740:	e28d0008 	add	r0, sp, #8
   1d744:	e58d3000 	str	r3, [sp]
   1d748:	e28d200c 	add	r2, sp, #12
   1d74c:	e3a03014 	mov	r3, #20
   1d750:	e59f1078 	ldr	r1, [pc, #120]	; 1d7d0 <CMachineInfo::GetClockRate(unsigned int) const+0xac>
   1d754:	e58d5018 	str	r5, [sp, #24]
   1d758:	ebfff409 	bl	1a784 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   1d75c:	e2504000 	subs	r4, r0, #0
   1d760:	1a00000e 	bne	1d7a0 <CMachineInfo::GetClockRate(unsigned int) const+0x7c>
   1d764:	e3550002 	cmp	r5, #2
   1d768:	0a00000e 	beq	1d7a8 <CMachineInfo::GetClockRate(unsigned int) const+0x84>
   1d76c:	e3550004 	cmp	r5, #4
   1d770:	0a000010 	beq	1d7b8 <CMachineInfo::GetClockRate(unsigned int) const+0x94>
   1d774:	e3550001 	cmp	r5, #1
   1d778:	0a00000c 	beq	1d7b0 <CMachineInfo::GetClockRate(unsigned int) const+0x8c>
   1d77c:	e59f2050 	ldr	r2, [pc, #80]	; 1d7d4 <CMachineInfo::GetClockRate(unsigned int) const+0xb0>
   1d780:	e59f1050 	ldr	r1, [pc, #80]	; 1d7d8 <CMachineInfo::GetClockRate(unsigned int) const+0xb4>
   1d784:	e59f0050 	ldr	r0, [pc, #80]	; 1d7dc <CMachineInfo::GetClockRate(unsigned int) const+0xb8>
   1d788:	ebfff382 	bl	1a598 <assertion_failed>
   1d78c:	e28d0008 	add	r0, sp, #8
   1d790:	ebfff3aa 	bl	1a640 <CBcmPropertyTags::~CBcmPropertyTags()>
   1d794:	e1a00004 	mov	r0, r4
   1d798:	e28dd020 	add	sp, sp, #32
   1d79c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1d7a0:	e59d401c 	ldr	r4, [sp, #28]
   1d7a4:	eafffff8 	b	1d78c <CMachineInfo::GetClockRate(unsigned int) const+0x68>
   1d7a8:	e59f4030 	ldr	r4, [pc, #48]	; 1d7e0 <CMachineInfo::GetClockRate(unsigned int) const+0xbc>
   1d7ac:	eafffff6 	b	1d78c <CMachineInfo::GetClockRate(unsigned int) const+0x68>
   1d7b0:	e59f402c 	ldr	r4, [pc, #44]	; 1d7e4 <CMachineInfo::GetClockRate(unsigned int) const+0xc0>
   1d7b4:	eafffff4 	b	1d78c <CMachineInfo::GetClockRate(unsigned int) const+0x68>
   1d7b8:	e5962008 	ldr	r2, [r6, #8]
   1d7bc:	e59f3024 	ldr	r3, [pc, #36]	; 1d7e8 <CMachineInfo::GetClockRate(unsigned int) const+0xc4>
   1d7c0:	e3520002 	cmp	r2, #2
   1d7c4:	e59f4020 	ldr	r4, [pc, #32]	; 1d7ec <CMachineInfo::GetClockRate(unsigned int) const+0xc8>
   1d7c8:	81a04003 	movhi	r4, r3
   1d7cc:	eaffffee 	b	1d78c <CMachineInfo::GetClockRate(unsigned int) const+0x68>
   1d7d0:	00030002 	.word	0x00030002
   1d7d4:	00000119 	.word	0x00000119
   1d7d8:	000290e0 	.word	0x000290e0
   1d7dc:	00024970 	.word	0x00024970
   1d7e0:	02dc6c00 	.word	0x02dc6c00
   1d7e4:	05f5e100 	.word	0x05f5e100
   1d7e8:	11e1a300 	.word	0x11e1a300
   1d7ec:	0ee6b280 	.word	0x0ee6b280

0001d7f0 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>:
   1d7f0:	e3510036 	cmp	r1, #54	; 0x36
   1d7f4:	0a00000d 	beq	1d830 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x40>
   1d7f8:	e3510037 	cmp	r1, #55	; 0x37
   1d7fc:	1a000004 	bne	1d814 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x24>
   1d800:	e5d00004 	ldrb	r0, [r0, #4]
   1d804:	e3500003 	cmp	r0, #3
   1d808:	c3a00028 	movgt	r0, #40	; 0x28
   1d80c:	d3a0002d 	movle	r0, #45	; 0x2d
   1d810:	e12fff1e 	bx	lr
   1d814:	e92d4010 	push	{r4, lr}
   1d818:	e59f2038 	ldr	r2, [pc, #56]	; 1d858 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x68>
   1d81c:	e59f1038 	ldr	r1, [pc, #56]	; 1d85c <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x6c>
   1d820:	e59f0038 	ldr	r0, [pc, #56]	; 1d860 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x70>
   1d824:	ebfff35b 	bl	1a598 <assertion_failed>
   1d828:	e3a00000 	mov	r0, #0
   1d82c:	e8bd8010 	pop	{r4, pc}
   1d830:	e5d03004 	ldrb	r3, [r0, #4]
   1d834:	e3530003 	cmp	r3, #3
   1d838:	ca000001 	bgt	1d844 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x54>
   1d83c:	e3a00028 	mov	r0, #40	; 0x28
   1d840:	e12fff1e 	bx	lr
   1d844:	e5900008 	ldr	r0, [r0, #8]
   1d848:	e3500002 	cmp	r0, #2
   1d84c:	93a0002d 	movls	r0, #45	; 0x2d
   1d850:	83a00029 	movhi	r0, #41	; 0x29
   1d854:	e12fff1e 	bx	lr
   1d858:	00000152 	.word	0x00000152
   1d85c:	000290e0 	.word	0x000290e0
   1d860:	00024970 	.word	0x00024970

0001d864 <CMachineInfo::GetDevice(TDeviceId) const>:
   1d864:	e3510000 	cmp	r1, #0
   1d868:	1a000003 	bne	1d87c <CMachineInfo::GetDevice(TDeviceId) const+0x18>
   1d86c:	e5d00004 	ldrb	r0, [r0, #4]
   1d870:	e2500001 	subs	r0, r0, #1
   1d874:	13a00001 	movne	r0, #1
   1d878:	e12fff1e 	bx	lr
   1d87c:	e92d4010 	push	{r4, lr}
   1d880:	e59f2010 	ldr	r2, [pc, #16]	; 1d898 <CMachineInfo::GetDevice(TDeviceId) const+0x34>
   1d884:	e59f1010 	ldr	r1, [pc, #16]	; 1d89c <CMachineInfo::GetDevice(TDeviceId) const+0x38>
   1d888:	e59f0010 	ldr	r0, [pc, #16]	; 1d8a0 <CMachineInfo::GetDevice(TDeviceId) const+0x3c>
   1d88c:	ebfff341 	bl	1a598 <assertion_failed>
   1d890:	e3a00000 	mov	r0, #0
   1d894:	e8bd8010 	pop	{r4, pc}
   1d898:	0000016b 	.word	0x0000016b
   1d89c:	000290e0 	.word	0x000290e0
   1d8a0:	00024970 	.word	0x00024970

0001d8a4 <CMachineInfo::Get()>:
   1d8a4:	e92d4010 	push	{r4, lr}
   1d8a8:	e59f4020 	ldr	r4, [pc, #32]	; 1d8d0 <CMachineInfo::Get()+0x2c>
   1d8ac:	e5940000 	ldr	r0, [r4]
   1d8b0:	e3500000 	cmp	r0, #0
   1d8b4:	18bd8010 	popne	{r4, pc}
   1d8b8:	e3a02f5d 	mov	r2, #372	; 0x174
   1d8bc:	e59f1010 	ldr	r1, [pc, #16]	; 1d8d4 <CMachineInfo::Get()+0x30>
   1d8c0:	e59f0010 	ldr	r0, [pc, #16]	; 1d8d8 <CMachineInfo::Get()+0x34>
   1d8c4:	ebfff333 	bl	1a598 <assertion_failed>
   1d8c8:	e5940000 	ldr	r0, [r4]
   1d8cc:	e8bd8010 	pop	{r4, pc}
   1d8d0:	0002b290 	.word	0x0002b290
   1d8d4:	000290e0 	.word	0x000290e0
   1d8d8:	00023f5c 	.word	0x00023f5c

0001d8dc <CScreenDevice::~CScreenDevice()>:
   1d8dc:	e5d0200c 	ldrb	r2, [r0, #12]
   1d8e0:	e59f3068 	ldr	r3, [pc, #104]	; 1d950 <CScreenDevice::~CScreenDevice()+0x74>
   1d8e4:	e3520000 	cmp	r2, #0
   1d8e8:	e92d4070 	push	{r4, r5, r6, lr}
   1d8ec:	e1a04000 	mov	r4, r0
   1d8f0:	e5803000 	str	r3, [r0]
   1d8f4:	0a000003 	beq	1d908 <CScreenDevice::~CScreenDevice()+0x2c>
   1d8f8:	e5900018 	ldr	r0, [r0, #24]
   1d8fc:	e3500000 	cmp	r0, #0
   1d900:	0a000000 	beq	1d908 <CScreenDevice::~CScreenDevice()+0x2c>
   1d904:	eb0013f7 	bl	228e8 <operator delete[](void*)>
   1d908:	e3a03000 	mov	r3, #0
   1d90c:	e5945010 	ldr	r5, [r4, #16]
   1d910:	e5843018 	str	r3, [r4, #24]
   1d914:	e1550003 	cmp	r5, r3
   1d918:	0a000004 	beq	1d930 <CScreenDevice::~CScreenDevice()+0x54>
   1d91c:	e1a00005 	mov	r0, r5
   1d920:	eb0015fe 	bl	23120 <CBcmFrameBuffer::~CBcmFrameBuffer()>
   1d924:	e1a00005 	mov	r0, r5
   1d928:	e3a01094 	mov	r1, #148	; 0x94
   1d92c:	eb0013ee 	bl	228ec <operator delete(void*, unsigned int)>
   1d930:	e3a03000 	mov	r3, #0
   1d934:	e2840014 	add	r0, r4, #20
   1d938:	e5843010 	str	r3, [r4, #16]
   1d93c:	eb0016ff 	bl	23540 <CCharGenerator::~CCharGenerator()>
   1d940:	e1a00004 	mov	r0, r4
   1d944:	ebfff50f 	bl	1ad88 <CDevice::~CDevice()>
   1d948:	e1a00004 	mov	r0, r4
   1d94c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1d950:	00029234 	.word	0x00029234

0001d954 <CScreenDevice::~CScreenDevice()>:
   1d954:	e92d4010 	push	{r4, lr}
   1d958:	e1a04000 	mov	r4, r0
   1d95c:	ebffffde 	bl	1d8dc <CScreenDevice::~CScreenDevice()>
   1d960:	e1a00004 	mov	r0, r4
   1d964:	e3a0105c 	mov	r1, #92	; 0x5c
   1d968:	eb0013df 	bl	228ec <operator delete(void*, unsigned int)>
   1d96c:	e1a00004 	mov	r0, r4
   1d970:	e8bd8010 	pop	{r4, pc}

0001d974 <CScreenDevice::InvertCursor() [clone .part.6]>:
   1d974:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1d978:	e2806014 	add	r6, r0, #20
   1d97c:	e1a05000 	mov	r5, r0
   1d980:	e1a00006 	mov	r0, r6
   1d984:	eb0016f2 	bl	23554 <CCharGenerator::GetUnderline() const>
   1d988:	e3a08000 	mov	r8, #0
   1d98c:	e1a07000 	mov	r7, r0
   1d990:	e1a00006 	mov	r0, r6
   1d994:	eb0016ec 	bl	2354c <CCharGenerator::GetCharHeight() const>
   1d998:	e1500007 	cmp	r0, r7
   1d99c:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
   1d9a0:	e3a04000 	mov	r4, #0
   1d9a4:	ea000013 	b	1d9f8 <CScreenDevice::InvertCursor() [clone .part.6]+0x84>
   1d9a8:	e595303c 	ldr	r3, [r5, #60]	; 0x3c
   1d9ac:	e5952024 	ldr	r2, [r5, #36]	; 0x24
   1d9b0:	e0843003 	add	r3, r4, r3
   1d9b4:	e1530002 	cmp	r3, r2
   1d9b8:	2a00000d 	bcs	1d9f4 <CScreenDevice::InvertCursor() [clone .part.6]+0x80>
   1d9bc:	e5952040 	ldr	r2, [r5, #64]	; 0x40
   1d9c0:	e5951028 	ldr	r1, [r5, #40]	; 0x28
   1d9c4:	e0872002 	add	r2, r7, r2
   1d9c8:	e1520001 	cmp	r2, r1
   1d9cc:	2a000008 	bcs	1d9f4 <CScreenDevice::InvertCursor() [clone .part.6]+0x80>
   1d9d0:	e5950020 	ldr	r0, [r5, #32]
   1d9d4:	e5951018 	ldr	r1, [r5, #24]
   1d9d8:	e0233290 	mla	r3, r0, r2, r3
   1d9dc:	e1a03083 	lsl	r3, r3, #1
   1d9e0:	e19120b3 	ldrh	r2, [r1, r3]
   1d9e4:	e3520000 	cmp	r2, #0
   1d9e8:	01d524b6 	ldrheq	r2, [r5, #70]	; 0x46
   1d9ec:	118180b3 	strhne	r8, [r1, r3]
   1d9f0:	018120b3 	strheq	r2, [r1, r3]
   1d9f4:	e2844001 	add	r4, r4, #1
   1d9f8:	e1a00006 	mov	r0, r6
   1d9fc:	eb0016d0 	bl	23544 <CCharGenerator::GetCharWidth() const>
   1da00:	e1500004 	cmp	r0, r4
   1da04:	8affffe7 	bhi	1d9a8 <CScreenDevice::InvertCursor() [clone .part.6]+0x34>
   1da08:	e2877001 	add	r7, r7, #1
   1da0c:	eaffffdf 	b	1d990 <CScreenDevice::InvertCursor() [clone .part.6]+0x1c>

0001da10 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool)>:
   1da10:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1da14:	e1a04000 	mov	r4, r0
   1da18:	e3a05000 	mov	r5, #0
   1da1c:	e1a07002 	mov	r7, r2
   1da20:	e1a06003 	mov	r6, r3
   1da24:	e1a08001 	mov	r8, r1
   1da28:	ebfff4e2 	bl	1adb8 <CDevice::CDevice()>
   1da2c:	e59f0050 	ldr	r0, [pc, #80]	; 1da84 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool)+0x74>
   1da30:	e5848004 	str	r8, [r4, #4]
   1da34:	e5840000 	str	r0, [r4]
   1da38:	e5847008 	str	r7, [r4, #8]
   1da3c:	e5c4600c 	strb	r6, [r4, #12]
   1da40:	e5845010 	str	r5, [r4, #16]
   1da44:	e2840014 	add	r0, r4, #20
   1da48:	eb0016b9 	bl	23534 <CCharGenerator::CCharGenerator()>
   1da4c:	e3a03001 	mov	r3, #1
   1da50:	e3e02020 	mvn	r2, #32
   1da54:	e5845018 	str	r5, [r4, #24]
   1da58:	e5845030 	str	r5, [r4, #48]	; 0x30
   1da5c:	e5845034 	str	r5, [r4, #52]	; 0x34
   1da60:	e584503c 	str	r5, [r4, #60]	; 0x3c
   1da64:	e5845040 	str	r5, [r4, #64]	; 0x40
   1da68:	e5c45048 	strb	r5, [r4, #72]	; 0x48
   1da6c:	e5c45054 	strb	r5, [r4, #84]	; 0x54
   1da70:	e1c424b6 	strh	r2, [r4, #70]	; 0x46
   1da74:	e5c43044 	strb	r3, [r4, #68]	; 0x44
   1da78:	e5843058 	str	r3, [r4, #88]	; 0x58
   1da7c:	e1a00004 	mov	r0, r4
   1da80:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1da84:	00029234 	.word	0x00029234

0001da88 <CScreenDevice::GetWidth() const>:
   1da88:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   1da8c:	e12fff1e 	bx	lr

0001da90 <CScreenDevice::GetHeight() const>:
   1da90:	e5900028 	ldr	r0, [r0, #40]	; 0x28
   1da94:	e12fff1e 	bx	lr

0001da98 <CScreenDevice::GetColumns() const>:
   1da98:	e92d4010 	push	{r4, lr}
   1da9c:	e2800014 	add	r0, r0, #20
   1daa0:	e5904010 	ldr	r4, [r0, #16]
   1daa4:	eb0016a6 	bl	23544 <CCharGenerator::GetCharWidth() const>
   1daa8:	e1a01000 	mov	r1, r0
   1daac:	e1a00004 	mov	r0, r4
   1dab0:	eb0018dd 	bl	23e2c <__aeabi_uidiv>
   1dab4:	e8bd8010 	pop	{r4, pc}

0001dab8 <CScreenDevice::GetRows() const>:
   1dab8:	e92d4010 	push	{r4, lr}
   1dabc:	e2800014 	add	r0, r0, #20
   1dac0:	e5904018 	ldr	r4, [r0, #24]
   1dac4:	eb0016a0 	bl	2354c <CCharGenerator::GetCharHeight() const>
   1dac8:	e1a01000 	mov	r1, r0
   1dacc:	e1a00004 	mov	r0, r4
   1dad0:	eb0018d5 	bl	23e2c <__aeabi_uidiv>
   1dad4:	e8bd8010 	pop	{r4, pc}

0001dad8 <CScreenDevice::GetStatus()>:
   1dad8:	e591c018 	ldr	ip, [r1, #24]
   1dadc:	e591201c 	ldr	r2, [r1, #28]
   1dae0:	e92d4070 	push	{r4, r5, r6, lr}
   1dae4:	e580c000 	str	ip, [r0]
   1dae8:	e5915030 	ldr	r5, [r1, #48]	; 0x30
   1daec:	e5914034 	ldr	r4, [r1, #52]	; 0x34
   1daf0:	e591e038 	ldr	lr, [r1, #56]	; 0x38
   1daf4:	e591c03c 	ldr	ip, [r1, #60]	; 0x3c
   1daf8:	e5802004 	str	r2, [r0, #4]
   1dafc:	e5912040 	ldr	r2, [r1, #64]	; 0x40
   1db00:	e5805008 	str	r5, [r0, #8]
   1db04:	e5d16044 	ldrb	r6, [r1, #68]	; 0x44
   1db08:	e580400c 	str	r4, [r0, #12]
   1db0c:	e1d154b6 	ldrh	r5, [r1, #70]	; 0x46
   1db10:	e580e010 	str	lr, [r0, #16]
   1db14:	e5d14048 	ldrb	r4, [r1, #72]	; 0x48
   1db18:	e580c014 	str	ip, [r0, #20]
   1db1c:	e591e04c 	ldr	lr, [r1, #76]	; 0x4c
   1db20:	e5802018 	str	r2, [r0, #24]
   1db24:	e591c050 	ldr	ip, [r1, #80]	; 0x50
   1db28:	e5d12054 	ldrb	r2, [r1, #84]	; 0x54
   1db2c:	e5c0601c 	strb	r6, [r0, #28]
   1db30:	e1c051be 	strh	r5, [r0, #30]
   1db34:	e5c04020 	strb	r4, [r0, #32]
   1db38:	e580e024 	str	lr, [r0, #36]	; 0x24
   1db3c:	e580c028 	str	ip, [r0, #40]	; 0x28
   1db40:	e5c0202c 	strb	r2, [r0, #44]	; 0x2c
   1db44:	e8bd8070 	pop	{r4, r5, r6, pc}

0001db48 <CScreenDevice::SetStatus(TScreenStatus const&)>:
   1db48:	e590201c 	ldr	r2, [r0, #28]
   1db4c:	e5913004 	ldr	r3, [r1, #4]
   1db50:	e1520003 	cmp	r2, r3
   1db54:	0a000001 	beq	1db60 <CScreenDevice::SetStatus(TScreenStatus const&)+0x18>
   1db58:	e3a00000 	mov	r0, #0
   1db5c:	e12fff1e 	bx	lr
   1db60:	e590c020 	ldr	ip, [r0, #32]
   1db64:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1db68:	e15c0003 	cmp	ip, r3
   1db6c:	1afffff9 	bne	1db58 <CScreenDevice::SetStatus(TScreenStatus const&)+0x10>
   1db70:	e92d4070 	push	{r4, r5, r6, lr}
   1db74:	e1a04000 	mov	r4, r0
   1db78:	e5900058 	ldr	r0, [r0, #88]	; 0x58
   1db7c:	e1a05001 	mov	r5, r1
   1db80:	e3500000 	cmp	r0, #0
   1db84:	1a000023 	bne	1dc18 <CScreenDevice::SetStatus(TScreenStatus const&)+0xd0>
   1db88:	e5d43054 	ldrb	r3, [r4, #84]	; 0x54
   1db8c:	e3530000 	cmp	r3, #0
   1db90:	1a000002 	bne	1dba0 <CScreenDevice::SetStatus(TScreenStatus const&)+0x58>
   1db94:	e5d1302c 	ldrb	r3, [r1, #44]	; 0x2c
   1db98:	e3530000 	cmp	r3, #0
   1db9c:	0a000001 	beq	1dba8 <CScreenDevice::SetStatus(TScreenStatus const&)+0x60>
   1dba0:	e3a00000 	mov	r0, #0
   1dba4:	e8bd8070 	pop	{r4, r5, r6, pc}
   1dba8:	e5951000 	ldr	r1, [r5]
   1dbac:	e5940018 	ldr	r0, [r4, #24]
   1dbb0:	eb00104d 	bl	21cec <memcpy>
   1dbb4:	e5940058 	ldr	r0, [r4, #88]	; 0x58
   1dbb8:	e2851008 	add	r1, r5, #8
   1dbbc:	e891004e 	ldm	r1, {r1, r2, r3, r6}
   1dbc0:	e595e018 	ldr	lr, [r5, #24]
   1dbc4:	e5d5c01c 	ldrb	ip, [r5, #28]
   1dbc8:	e3500000 	cmp	r0, #0
   1dbcc:	e5841030 	str	r1, [r4, #48]	; 0x30
   1dbd0:	e1d501be 	ldrh	r0, [r5, #30]
   1dbd4:	e5d51020 	ldrb	r1, [r5, #32]
   1dbd8:	e5842034 	str	r2, [r4, #52]	; 0x34
   1dbdc:	e5843038 	str	r3, [r4, #56]	; 0x38
   1dbe0:	e5952024 	ldr	r2, [r5, #36]	; 0x24
   1dbe4:	e5953028 	ldr	r3, [r5, #40]	; 0x28
   1dbe8:	e584603c 	str	r6, [r4, #60]	; 0x3c
   1dbec:	e584e040 	str	lr, [r4, #64]	; 0x40
   1dbf0:	e5c4c044 	strb	ip, [r4, #68]	; 0x44
   1dbf4:	e1c404b6 	strh	r0, [r4, #70]	; 0x46
   1dbf8:	e5c41048 	strb	r1, [r4, #72]	; 0x48
   1dbfc:	e584204c 	str	r2, [r4, #76]	; 0x4c
   1dc00:	e5843050 	str	r3, [r4, #80]	; 0x50
   1dc04:	1a000010 	bne	1dc4c <CScreenDevice::SetStatus(TScreenStatus const&)+0x104>
   1dc08:	e3a03000 	mov	r3, #0
   1dc0c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   1dc10:	e3a00001 	mov	r0, #1
   1dc14:	e8bd8070 	pop	{r4, r5, r6, pc}
   1dc18:	eb0012d5 	bl	22774 <EnterCritical>
   1dc1c:	e5d43054 	ldrb	r3, [r4, #84]	; 0x54
   1dc20:	e3530000 	cmp	r3, #0
   1dc24:	1a000003 	bne	1dc38 <CScreenDevice::SetStatus(TScreenStatus const&)+0xf0>
   1dc28:	e5d5302c 	ldrb	r3, [r5, #44]	; 0x2c
   1dc2c:	e3530000 	cmp	r3, #0
   1dc30:	0594201c 	ldreq	r2, [r4, #28]
   1dc34:	0affffdb 	beq	1dba8 <CScreenDevice::SetStatus(TScreenStatus const&)+0x60>
   1dc38:	e5943058 	ldr	r3, [r4, #88]	; 0x58
   1dc3c:	e3530000 	cmp	r3, #0
   1dc40:	0affffd6 	beq	1dba0 <CScreenDevice::SetStatus(TScreenStatus const&)+0x58>
   1dc44:	eb0012f7 	bl	22828 <LeaveCritical>
   1dc48:	eaffffd4 	b	1dba0 <CScreenDevice::SetStatus(TScreenStatus const&)+0x58>
   1dc4c:	eb0012f5 	bl	22828 <LeaveCritical>
   1dc50:	eaffffec 	b	1dc08 <CScreenDevice::SetStatus(TScreenStatus const&)+0xc0>

0001dc54 <CScreenDevice::CarriageReturn()>:
   1dc54:	e3a03000 	mov	r3, #0
   1dc58:	e580303c 	str	r3, [r0, #60]	; 0x3c
   1dc5c:	e12fff1e 	bx	lr

0001dc60 <CScreenDevice::CursorHome()>:
   1dc60:	e3a02000 	mov	r2, #0
   1dc64:	e5903034 	ldr	r3, [r0, #52]	; 0x34
   1dc68:	e580203c 	str	r2, [r0, #60]	; 0x3c
   1dc6c:	e5803040 	str	r3, [r0, #64]	; 0x40
   1dc70:	e12fff1e 	bx	lr

0001dc74 <CScreenDevice::CursorLeft()>:
   1dc74:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
   1dc78:	e92d4070 	push	{r4, r5, r6, lr}
   1dc7c:	e3530000 	cmp	r3, #0
   1dc80:	e1a04000 	mov	r4, r0
   1dc84:	1a00000f 	bne	1dcc8 <CScreenDevice::CursorLeft()+0x54>
   1dc88:	e5902040 	ldr	r2, [r0, #64]	; 0x40
   1dc8c:	e5903034 	ldr	r3, [r0, #52]	; 0x34
   1dc90:	e1520003 	cmp	r2, r3
   1dc94:	98bd8070 	popls	{r4, r5, r6, pc}
   1dc98:	e2806014 	add	r6, r0, #20
   1dc9c:	e1a00006 	mov	r0, r6
   1dca0:	e5945024 	ldr	r5, [r4, #36]	; 0x24
   1dca4:	eb001626 	bl	23544 <CCharGenerator::GetCharWidth() const>
   1dca8:	e0450000 	sub	r0, r5, r0
   1dcac:	e584003c 	str	r0, [r4, #60]	; 0x3c
   1dcb0:	e1a00006 	mov	r0, r6
   1dcb4:	eb001624 	bl	2354c <CCharGenerator::GetCharHeight() const>
   1dcb8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   1dcbc:	e0430000 	sub	r0, r3, r0
   1dcc0:	e5840040 	str	r0, [r4, #64]	; 0x40
   1dcc4:	e8bd8070 	pop	{r4, r5, r6, pc}
   1dcc8:	e2800014 	add	r0, r0, #20
   1dccc:	eb00161c 	bl	23544 <CCharGenerator::GetCharWidth() const>
   1dcd0:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
   1dcd4:	e0430000 	sub	r0, r3, r0
   1dcd8:	e584003c 	str	r0, [r4, #60]	; 0x3c
   1dcdc:	e8bd8070 	pop	{r4, r5, r6, pc}

0001dce0 <CScreenDevice::CursorMove(unsigned int, unsigned int)>:
   1dce0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1dce4:	e2806014 	add	r6, r0, #20
   1dce8:	e1a04002 	mov	r4, r2
   1dcec:	e1a05000 	mov	r5, r0
   1dcf0:	e1a00006 	mov	r0, r6
   1dcf4:	e1a07001 	mov	r7, r1
   1dcf8:	eb001611 	bl	23544 <CCharGenerator::GetCharWidth() const>
   1dcfc:	e2444001 	sub	r4, r4, #1
   1dd00:	e0040490 	mul	r4, r0, r4
   1dd04:	e1a00006 	mov	r0, r6
   1dd08:	eb00160f 	bl	2354c <CCharGenerator::GetCharHeight() const>
   1dd0c:	e5953024 	ldr	r3, [r5, #36]	; 0x24
   1dd10:	e1540003 	cmp	r4, r3
   1dd14:	28bd81f0 	popcs	{r4, r5, r6, r7, r8, pc}
   1dd18:	e2477001 	sub	r7, r7, #1
   1dd1c:	e0000790 	mul	r0, r0, r7
   1dd20:	e5953034 	ldr	r3, [r5, #52]	; 0x34
   1dd24:	e1500003 	cmp	r0, r3
   1dd28:	38bd81f0 	popcc	{r4, r5, r6, r7, r8, pc}
   1dd2c:	e5953038 	ldr	r3, [r5, #56]	; 0x38
   1dd30:	e1500003 	cmp	r0, r3
   1dd34:	3585403c 	strcc	r4, [r5, #60]	; 0x3c
   1dd38:	35850040 	strcc	r0, [r5, #64]	; 0x40
   1dd3c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0001dd40 <CScreenDevice::CursorUp()>:
   1dd40:	e5902040 	ldr	r2, [r0, #64]	; 0x40
   1dd44:	e5903034 	ldr	r3, [r0, #52]	; 0x34
   1dd48:	e1520003 	cmp	r2, r3
   1dd4c:	912fff1e 	bxls	lr
   1dd50:	e92d4010 	push	{r4, lr}
   1dd54:	e1a04000 	mov	r4, r0
   1dd58:	e2800014 	add	r0, r0, #20
   1dd5c:	eb0015fa 	bl	2354c <CCharGenerator::GetCharHeight() const>
   1dd60:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   1dd64:	e0430000 	sub	r0, r3, r0
   1dd68:	e5840040 	str	r0, [r4, #64]	; 0x40
   1dd6c:	e8bd8010 	pop	{r4, pc}

0001dd70 <CScreenDevice::DeleteChars(unsigned int)>:
   1dd70:	e12fff1e 	bx	lr

0001dd74 <CScreenDevice::DeleteLines(unsigned int)>:
   1dd74:	e12fff1e 	bx	lr

0001dd78 <CScreenDevice::InsertLines(unsigned int)>:
   1dd78:	e12fff1e 	bx	lr

0001dd7c <CScreenDevice::InsertMode(bool)>:
   1dd7c:	e5c01048 	strb	r1, [r0, #72]	; 0x48
   1dd80:	e12fff1e 	bx	lr

0001dd84 <CScreenDevice::ReverseScroll()>:
   1dd84:	e12fff1e 	bx	lr

0001dd88 <CScreenDevice::SetCursorMode(bool)>:
   1dd88:	e5c01044 	strb	r1, [r0, #68]	; 0x44
   1dd8c:	e12fff1e 	bx	lr

0001dd90 <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>:
   1dd90:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1dd94:	e2807014 	add	r7, r0, #20
   1dd98:	e1a06000 	mov	r6, r0
   1dd9c:	e1a04001 	mov	r4, r1
   1dda0:	e1a00007 	mov	r0, r7
   1dda4:	e1a05002 	mov	r5, r2
   1dda8:	eb0015e7 	bl	2354c <CCharGenerator::GetCharHeight() const>
   1ddac:	e2444001 	sub	r4, r4, #1
   1ddb0:	e0040490 	mul	r4, r0, r4
   1ddb4:	e1a00007 	mov	r0, r7
   1ddb8:	eb0015e3 	bl	2354c <CCharGenerator::GetCharHeight() const>
   1ddbc:	e0000095 	mul	r0, r5, r0
   1ddc0:	e596202c 	ldr	r2, [r6, #44]	; 0x2c
   1ddc4:	e3500000 	cmp	r0, #0
   1ddc8:	11540002 	cmpne	r4, r2
   1ddcc:	33a03001 	movcc	r3, #1
   1ddd0:	23a03000 	movcs	r3, #0
   1ddd4:	e1500002 	cmp	r0, r2
   1ddd8:	83a03000 	movhi	r3, #0
   1dddc:	92033001 	andls	r3, r3, #1
   1dde0:	e1540000 	cmp	r4, r0
   1dde4:	23a03000 	movcs	r3, #0
   1dde8:	32033001 	andcc	r3, r3, #1
   1ddec:	e3530000 	cmp	r3, #0
   1ddf0:	e3a03000 	mov	r3, #0
   1ddf4:	05964034 	ldreq	r4, [r6, #52]	; 0x34
   1ddf8:	15864034 	strne	r4, [r6, #52]	; 0x34
   1ddfc:	15860038 	strne	r0, [r6, #56]	; 0x38
   1de00:	e5864040 	str	r4, [r6, #64]	; 0x40
   1de04:	e586303c 	str	r3, [r6, #60]	; 0x3c
   1de08:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0001de0c <CScreenDevice::SetStandoutMode(unsigned int)>:
   1de0c:	e351001b 	cmp	r1, #27
   1de10:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
   1de14:	ea00001d 	b	1de90 <CScreenDevice::SetStandoutMode(unsigned int)+0x84>
   1de18:	0001dea0 	.word	0x0001dea0
   1de1c:	0001de94 	.word	0x0001de94
   1de20:	0001de88 	.word	0x0001de88
   1de24:	0001de90 	.word	0x0001de90
   1de28:	0001de90 	.word	0x0001de90
   1de2c:	0001de90 	.word	0x0001de90
   1de30:	0001de90 	.word	0x0001de90
   1de34:	0001de90 	.word	0x0001de90
   1de38:	0001de90 	.word	0x0001de90
   1de3c:	0001de90 	.word	0x0001de90
   1de40:	0001de90 	.word	0x0001de90
   1de44:	0001de90 	.word	0x0001de90
   1de48:	0001de90 	.word	0x0001de90
   1de4c:	0001de90 	.word	0x0001de90
   1de50:	0001de90 	.word	0x0001de90
   1de54:	0001de90 	.word	0x0001de90
   1de58:	0001de90 	.word	0x0001de90
   1de5c:	0001de90 	.word	0x0001de90
   1de60:	0001de90 	.word	0x0001de90
   1de64:	0001de90 	.word	0x0001de90
   1de68:	0001de90 	.word	0x0001de90
   1de6c:	0001de90 	.word	0x0001de90
   1de70:	0001de90 	.word	0x0001de90
   1de74:	0001de90 	.word	0x0001de90
   1de78:	0001de90 	.word	0x0001de90
   1de7c:	0001de90 	.word	0x0001de90
   1de80:	0001de90 	.word	0x0001de90
   1de84:	0001dea0 	.word	0x0001dea0
   1de88:	e3a0301f 	mov	r3, #31
   1de8c:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
   1de90:	e12fff1e 	bx	lr
   1de94:	e3a03b3e 	mov	r3, #63488	; 0xf800
   1de98:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
   1de9c:	e12fff1e 	bx	lr
   1dea0:	e3e03020 	mvn	r3, #32
   1dea4:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
   1dea8:	e12fff1e 	bx	lr

0001deac <CScreenDevice::Scroll()>:
   1deac:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1deb0:	e1a07000 	mov	r7, r0
   1deb4:	e2800014 	add	r0, r0, #20
   1deb8:	eb0015a3 	bl	2354c <CCharGenerator::GetCharHeight() const>
   1debc:	e5973034 	ldr	r3, [r7, #52]	; 0x34
   1dec0:	e5974038 	ldr	r4, [r7, #56]	; 0x38
   1dec4:	e5975020 	ldr	r5, [r7, #32]
   1dec8:	e0444003 	sub	r4, r4, r3
   1decc:	e1a02085 	lsl	r2, r5, #1
   1ded0:	e0444000 	sub	r4, r4, r0
   1ded4:	e0040492 	mul	r4, r2, r4
   1ded8:	e0050395 	mul	r5, r5, r3
   1dedc:	e5978018 	ldr	r8, [r7, #24]
   1dee0:	e3540000 	cmp	r4, #0
   1dee4:	e1a06000 	mov	r6, r0
   1dee8:	e0885085 	add	r5, r8, r5, lsl #1
   1deec:	1a000007 	bne	1df10 <CScreenDevice::Scroll()+0x64>
   1def0:	e0020692 	mul	r2, r2, r6
   1def4:	e1b02122 	lsrs	r2, r2, #2
   1def8:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1defc:	e1a00005 	mov	r0, r5
   1df00:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1df04:	e1a02102 	lsl	r2, r2, #2
   1df08:	e3a01000 	mov	r1, #0
   1df0c:	ea000e04 	b	21724 <memset>
   1df10:	e0803003 	add	r3, r0, r3
   1df14:	e0288392 	mla	r8, r2, r3, r8
   1df18:	e3c4900f 	bic	r9, r4, #15
   1df1c:	e1a01008 	mov	r1, r8
   1df20:	e1a02009 	mov	r2, r9
   1df24:	e1a00005 	mov	r0, r5
   1df28:	eb000f6f 	bl	21cec <memcpy>
   1df2c:	e204200e 	and	r2, r4, #14
   1df30:	e0850009 	add	r0, r5, r9
   1df34:	e0881009 	add	r1, r8, r9
   1df38:	eb000f6b 	bl	21cec <memcpy>
   1df3c:	e5972020 	ldr	r2, [r7, #32]
   1df40:	e3c44003 	bic	r4, r4, #3
   1df44:	e1a02082 	lsl	r2, r2, #1
   1df48:	e0855004 	add	r5, r5, r4
   1df4c:	eaffffe7 	b	1def0 <CScreenDevice::Scroll()+0x44>

0001df50 <CScreenDevice::CursorDown()>:
   1df50:	e92d4070 	push	{r4, r5, r6, lr}
   1df54:	e1a04000 	mov	r4, r0
   1df58:	e2805014 	add	r5, r0, #20
   1df5c:	e1a00005 	mov	r0, r5
   1df60:	eb001579 	bl	2354c <CCharGenerator::GetCharHeight() const>
   1df64:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   1df68:	e5942038 	ldr	r2, [r4, #56]	; 0x38
   1df6c:	e0800003 	add	r0, r0, r3
   1df70:	e1500002 	cmp	r0, r2
   1df74:	e5840040 	str	r0, [r4, #64]	; 0x40
   1df78:	38bd8070 	popcc	{r4, r5, r6, pc}
   1df7c:	e1a00004 	mov	r0, r4
   1df80:	ebffffc9 	bl	1deac <CScreenDevice::Scroll()>
   1df84:	e1a00005 	mov	r0, r5
   1df88:	eb00156f 	bl	2354c <CCharGenerator::GetCharHeight() const>
   1df8c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   1df90:	e0430000 	sub	r0, r3, r0
   1df94:	e5840040 	str	r0, [r4, #64]	; 0x40
   1df98:	e8bd8070 	pop	{r4, r5, r6, pc}

0001df9c <CScreenDevice::NewLine()>:
   1df9c:	e3a02000 	mov	r2, #0
   1dfa0:	e580203c 	str	r2, [r0, #60]	; 0x3c
   1dfa4:	eaffffe9 	b	1df50 <CScreenDevice::CursorDown()>

0001dfa8 <CScreenDevice::CursorRight()>:
   1dfa8:	e92d4010 	push	{r4, lr}
   1dfac:	e1a04000 	mov	r4, r0
   1dfb0:	e2800014 	add	r0, r0, #20
   1dfb4:	eb001562 	bl	23544 <CCharGenerator::GetCharWidth() const>
   1dfb8:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
   1dfbc:	e5942024 	ldr	r2, [r4, #36]	; 0x24
   1dfc0:	e0800003 	add	r0, r0, r3
   1dfc4:	e1500002 	cmp	r0, r2
   1dfc8:	e584003c 	str	r0, [r4, #60]	; 0x3c
   1dfcc:	38bd8010 	popcc	{r4, pc}
   1dfd0:	e3a03000 	mov	r3, #0
   1dfd4:	e1a00004 	mov	r0, r4
   1dfd8:	e584303c 	str	r3, [r4, #60]	; 0x3c
   1dfdc:	e8bd4010 	pop	{r4, lr}
   1dfe0:	eaffffda 	b	1df50 <CScreenDevice::CursorDown()>

0001dfe4 <CScreenDevice::Tabulator()>:
   1dfe4:	e92d4070 	push	{r4, r5, r6, lr}
   1dfe8:	e1a05000 	mov	r5, r0
   1dfec:	e2800014 	add	r0, r0, #20
   1dff0:	eb001553 	bl	23544 <CCharGenerator::GetCharWidth() const>
   1dff4:	e595303c 	ldr	r3, [r5, #60]	; 0x3c
   1dff8:	e1a04180 	lsl	r4, r0, #3
   1dffc:	e0840003 	add	r0, r4, r3
   1e000:	e1a01004 	mov	r1, r4
   1e004:	eb001788 	bl	23e2c <__aeabi_uidiv>
   1e008:	e0000094 	mul	r0, r4, r0
   1e00c:	e5953024 	ldr	r3, [r5, #36]	; 0x24
   1e010:	e585003c 	str	r0, [r5, #60]	; 0x3c
   1e014:	e1500003 	cmp	r0, r3
   1e018:	38bd8070 	popcc	{r4, r5, r6, pc}
   1e01c:	e3a03000 	mov	r3, #0
   1e020:	e1a00005 	mov	r0, r5
   1e024:	e585303c 	str	r3, [r5, #60]	; 0x3c
   1e028:	e8bd4070 	pop	{r4, r5, r6, lr}
   1e02c:	eaffffc7 	b	1df50 <CScreenDevice::CursorDown()>

0001e030 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>:
   1e030:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e034:	e2806014 	add	r6, r0, #20
   1e038:	e24dd00c 	sub	sp, sp, #12
   1e03c:	e1a07000 	mov	r7, r0
   1e040:	e1a00006 	mov	r0, r6
   1e044:	e1a0a001 	mov	sl, r1
   1e048:	e1a09002 	mov	r9, r2
   1e04c:	e58d3004 	str	r3, [sp, #4]
   1e050:	e3a08000 	mov	r8, #0
   1e054:	e1ddb3b0 	ldrh	fp, [sp, #48]	; 0x30
   1e058:	eb00153b 	bl	2354c <CCharGenerator::GetCharHeight() const>
   1e05c:	e1580000 	cmp	r8, r0
   1e060:	2a000025 	bcs	1e0fc <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xcc>
   1e064:	e59d3004 	ldr	r3, [sp, #4]
   1e068:	e3a04000 	mov	r4, #0
   1e06c:	e0883003 	add	r3, r8, r3
   1e070:	e58d3000 	str	r3, [sp]
   1e074:	ea000000 	b	1e07c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x4c>
   1e078:	e2844001 	add	r4, r4, #1
   1e07c:	e1a00006 	mov	r0, r6
   1e080:	eb00152f 	bl	23544 <CCharGenerator::GetCharWidth() const>
   1e084:	e1540000 	cmp	r4, r0
   1e088:	e0845009 	add	r5, r4, r9
   1e08c:	2a000015 	bcs	1e0e8 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xb8>
   1e090:	e1a03008 	mov	r3, r8
   1e094:	e1a02004 	mov	r2, r4
   1e098:	e1a0100a 	mov	r1, sl
   1e09c:	e1a00006 	mov	r0, r6
   1e0a0:	eb00152d 	bl	2355c <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>
   1e0a4:	e5973024 	ldr	r3, [r7, #36]	; 0x24
   1e0a8:	e3500000 	cmp	r0, #0
   1e0ac:	11a0000b 	movne	r0, fp
   1e0b0:	03a00000 	moveq	r0, #0
   1e0b4:	e1550003 	cmp	r5, r3
   1e0b8:	2affffee 	bcs	1e078 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x48>
   1e0bc:	e5973028 	ldr	r3, [r7, #40]	; 0x28
   1e0c0:	e59d2000 	ldr	r2, [sp]
   1e0c4:	e1520003 	cmp	r2, r3
   1e0c8:	2affffea 	bcs	1e078 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x48>
   1e0cc:	e5973020 	ldr	r3, [r7, #32]
   1e0d0:	e59d1000 	ldr	r1, [sp]
   1e0d4:	e5972018 	ldr	r2, [r7, #24]
   1e0d8:	e0255193 	mla	r5, r3, r1, r5
   1e0dc:	e1a05085 	lsl	r5, r5, #1
   1e0e0:	e18200b5 	strh	r0, [r2, r5]
   1e0e4:	eaffffe3 	b	1e078 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x48>
   1e0e8:	e1a00006 	mov	r0, r6
   1e0ec:	eb001516 	bl	2354c <CCharGenerator::GetCharHeight() const>
   1e0f0:	e2888001 	add	r8, r8, #1
   1e0f4:	e1580000 	cmp	r8, r0
   1e0f8:	3affffd9 	bcc	1e064 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x34>
   1e0fc:	e28dd00c 	add	sp, sp, #12
   1e100:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001e104 <CScreenDevice::DisplayChar(char)>:
   1e104:	e6ef3071 	uxtb	r3, r1
   1e108:	e353001f 	cmp	r3, #31
   1e10c:	912fff1e 	bxls	lr
   1e110:	e92d4010 	push	{r4, lr}
   1e114:	e1a04000 	mov	r4, r0
   1e118:	e1d0c4b6 	ldrh	ip, [r0, #70]	; 0x46
   1e11c:	e24dd008 	sub	sp, sp, #8
   1e120:	e5903040 	ldr	r3, [r0, #64]	; 0x40
   1e124:	e590203c 	ldr	r2, [r0, #60]	; 0x3c
   1e128:	e58dc000 	str	ip, [sp]
   1e12c:	ebffffbf 	bl	1e030 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
   1e130:	e1a00004 	mov	r0, r4
   1e134:	e28dd008 	add	sp, sp, #8
   1e138:	e8bd4010 	pop	{r4, lr}
   1e13c:	eaffff99 	b	1dfa8 <CScreenDevice::CursorRight()>

0001e140 <CScreenDevice::EraseChar(unsigned int, unsigned int)>:
   1e140:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e144:	e3a08000 	mov	r8, #0
   1e148:	e1a0b000 	mov	fp, r0
   1e14c:	e1a06001 	mov	r6, r1
   1e150:	e1a0a002 	mov	sl, r2
   1e154:	e1a09008 	mov	r9, r8
   1e158:	e2805014 	add	r5, r0, #20
   1e15c:	e1a00005 	mov	r0, r5
   1e160:	eb0014f9 	bl	2354c <CCharGenerator::GetCharHeight() const>
   1e164:	e1580000 	cmp	r8, r0
   1e168:	28bd8ff8 	popcs	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e16c:	e3a04000 	mov	r4, #0
   1e170:	e088700a 	add	r7, r8, sl
   1e174:	e1a00005 	mov	r0, r5
   1e178:	eb0014f1 	bl	23544 <CCharGenerator::GetCharWidth() const>
   1e17c:	e1540000 	cmp	r4, r0
   1e180:	e0843006 	add	r3, r4, r6
   1e184:	2a00000c 	bcs	1e1bc <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x7c>
   1e188:	e59b2024 	ldr	r2, [fp, #36]	; 0x24
   1e18c:	e2844001 	add	r4, r4, #1
   1e190:	e1530002 	cmp	r3, r2
   1e194:	2afffff6 	bcs	1e174 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x34>
   1e198:	e59b2028 	ldr	r2, [fp, #40]	; 0x28
   1e19c:	e1570002 	cmp	r7, r2
   1e1a0:	2afffff3 	bcs	1e174 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x34>
   1e1a4:	e59b2020 	ldr	r2, [fp, #32]
   1e1a8:	e59b1018 	ldr	r1, [fp, #24]
   1e1ac:	e0233792 	mla	r3, r2, r7, r3
   1e1b0:	e1a03083 	lsl	r3, r3, #1
   1e1b4:	e18190b3 	strh	r9, [r1, r3]
   1e1b8:	eaffffed 	b	1e174 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x34>
   1e1bc:	e2888001 	add	r8, r8, #1
   1e1c0:	eaffffe5 	b	1e15c <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x1c>

0001e1c4 <CScreenDevice::ClearLineEnd()>:
   1e1c4:	e92d4070 	push	{r4, r5, r6, lr}
   1e1c8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1e1cc:	e590403c 	ldr	r4, [r0, #60]	; 0x3c
   1e1d0:	e1540003 	cmp	r4, r3
   1e1d4:	28bd8070 	popcs	{r4, r5, r6, pc}
   1e1d8:	e1a05000 	mov	r5, r0
   1e1dc:	e2806014 	add	r6, r0, #20
   1e1e0:	e1a01004 	mov	r1, r4
   1e1e4:	e5952040 	ldr	r2, [r5, #64]	; 0x40
   1e1e8:	e1a00005 	mov	r0, r5
   1e1ec:	ebffffd3 	bl	1e140 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
   1e1f0:	e1a00006 	mov	r0, r6
   1e1f4:	eb0014d2 	bl	23544 <CCharGenerator::GetCharWidth() const>
   1e1f8:	e5953024 	ldr	r3, [r5, #36]	; 0x24
   1e1fc:	e0844000 	add	r4, r4, r0
   1e200:	e1530004 	cmp	r3, r4
   1e204:	8afffff5 	bhi	1e1e0 <CScreenDevice::ClearLineEnd()+0x1c>
   1e208:	e8bd8070 	pop	{r4, r5, r6, pc}

0001e20c <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>:
   1e20c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1e210:	e1a05000 	mov	r5, r0
   1e214:	e2807014 	add	r7, r0, #20
   1e218:	e1a00007 	mov	r0, r7
   1e21c:	e1a06001 	mov	r6, r1
   1e220:	e595403c 	ldr	r4, [r5, #60]	; 0x3c
   1e224:	eb0014c6 	bl	23544 <CCharGenerator::GetCharWidth() const>
   1e228:	e0204096 	mla	r0, r6, r0, r4
   1e22c:	e5956024 	ldr	r6, [r5, #36]	; 0x24
   1e230:	e595403c 	ldr	r4, [r5, #60]	; 0x3c
   1e234:	e1500006 	cmp	r0, r6
   1e238:	31a06000 	movcc	r6, r0
   1e23c:	e1540006 	cmp	r4, r6
   1e240:	28bd81f0 	popcs	{r4, r5, r6, r7, r8, pc}
   1e244:	e1a01004 	mov	r1, r4
   1e248:	e5952040 	ldr	r2, [r5, #64]	; 0x40
   1e24c:	e1a00005 	mov	r0, r5
   1e250:	ebffffba 	bl	1e140 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
   1e254:	e1a00007 	mov	r0, r7
   1e258:	eb0014b9 	bl	23544 <CCharGenerator::GetCharWidth() const>
   1e25c:	e0844000 	add	r4, r4, r0
   1e260:	e1540006 	cmp	r4, r6
   1e264:	3afffff6 	bcc	1e244 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]+0x38>
   1e268:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0001e26c <CScreenDevice::EraseChars(unsigned int)>:
   1e26c:	e3510000 	cmp	r1, #0
   1e270:	012fff1e 	bxeq	lr
   1e274:	eaffffe4 	b	1e20c <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>

0001e278 <CScreenDevice::ClearDisplayEnd()>:
   1e278:	e92d4070 	push	{r4, r5, r6, lr}
   1e27c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1e280:	e590403c 	ldr	r4, [r0, #60]	; 0x3c
   1e284:	e1a05000 	mov	r5, r0
   1e288:	e1540003 	cmp	r4, r3
   1e28c:	e2806014 	add	r6, r0, #20
   1e290:	2a000009 	bcs	1e2bc <CScreenDevice::ClearDisplayEnd()+0x44>
   1e294:	e1a01004 	mov	r1, r4
   1e298:	e5952040 	ldr	r2, [r5, #64]	; 0x40
   1e29c:	e1a00005 	mov	r0, r5
   1e2a0:	ebffffa6 	bl	1e140 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
   1e2a4:	e1a00006 	mov	r0, r6
   1e2a8:	eb0014a5 	bl	23544 <CCharGenerator::GetCharWidth() const>
   1e2ac:	e5953024 	ldr	r3, [r5, #36]	; 0x24
   1e2b0:	e0844000 	add	r4, r4, r0
   1e2b4:	e1530004 	cmp	r3, r4
   1e2b8:	8afffff5 	bhi	1e294 <CScreenDevice::ClearDisplayEnd()+0x1c>
   1e2bc:	e1a00006 	mov	r0, r6
   1e2c0:	e5954040 	ldr	r4, [r5, #64]	; 0x40
   1e2c4:	eb0014a0 	bl	2354c <CCharGenerator::GetCharHeight() const>
   1e2c8:	e5953020 	ldr	r3, [r5, #32]
   1e2cc:	e0840000 	add	r0, r4, r0
   1e2d0:	e0000093 	mul	r0, r3, r0
   1e2d4:	e595201c 	ldr	r2, [r5, #28]
   1e2d8:	e5953018 	ldr	r3, [r5, #24]
   1e2dc:	e07020a2 	rsbs	r2, r0, r2, lsr #1
   1e2e0:	0a000004 	beq	1e2f8 <CScreenDevice::ClearDisplayEnd()+0x80>
   1e2e4:	e8bd4070 	pop	{r4, r5, r6, lr}
   1e2e8:	e1a02082 	lsl	r2, r2, #1
   1e2ec:	e0830080 	add	r0, r3, r0, lsl #1
   1e2f0:	e3a01000 	mov	r1, #0
   1e2f4:	ea000d0a 	b	21724 <memset>
   1e2f8:	e8bd8070 	pop	{r4, r5, r6, pc}

0001e2fc <CScreenDevice::Write(char)>:
   1e2fc:	e92d4010 	push	{r4, lr}
   1e300:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   1e304:	e24dd008 	sub	sp, sp, #8
   1e308:	e1a04000 	mov	r4, r0
   1e30c:	e3530007 	cmp	r3, #7
   1e310:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1e314:	ea000010 	b	1e35c <CScreenDevice::Write(char)+0x60>
   1e318:	0001e3a8 	.word	0x0001e3a8
   1e31c:	0001e408 	.word	0x0001e408
   1e320:	0001e424 	.word	0x0001e424
   1e324:	0001e47c 	.word	0x0001e47c
   1e328:	0001e558 	.word	0x0001e558
   1e32c:	0001e578 	.word	0x0001e578
   1e330:	0001e598 	.word	0x0001e598
   1e334:	0001e36c 	.word	0x0001e36c
   1e338:	e5902034 	ldr	r2, [r0, #52]	; 0x34
   1e33c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
   1e340:	e1520003 	cmp	r2, r3
   1e344:	2a000004 	bcs	1e35c <CScreenDevice::Write(char)+0x60>
   1e348:	e2800014 	add	r0, r0, #20
   1e34c:	eb00147e 	bl	2354c <CCharGenerator::GetCharHeight() const>
   1e350:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   1e354:	e0433000 	sub	r3, r3, r0
   1e358:	e5843040 	str	r3, [r4, #64]	; 0x40
   1e35c:	e3a03000 	mov	r3, #0
   1e360:	e5843030 	str	r3, [r4, #48]	; 0x30
   1e364:	e28dd008 	add	sp, sp, #8
   1e368:	e8bd8010 	pop	{r4, pc}
   1e36c:	e3510068 	cmp	r1, #104	; 0x68
   1e370:	0a000097 	beq	1e5d4 <CScreenDevice::Write(char)+0x2d8>
   1e374:	e351006c 	cmp	r1, #108	; 0x6c
   1e378:	0a000095 	beq	1e5d4 <CScreenDevice::Write(char)+0x2d8>
   1e37c:	e2411030 	sub	r1, r1, #48	; 0x30
   1e380:	e6ef3071 	uxtb	r3, r1
   1e384:	e3530009 	cmp	r3, #9
   1e388:	8afffff3 	bhi	1e35c <CScreenDevice::Write(char)+0x60>
   1e38c:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   1e390:	e0833103 	add	r3, r3, r3, lsl #2
   1e394:	e0811083 	add	r1, r1, r3, lsl #1
   1e398:	e3510063 	cmp	r1, #99	; 0x63
   1e39c:	e584104c 	str	r1, [r4, #76]	; 0x4c
   1e3a0:	8affffed 	bhi	1e35c <CScreenDevice::Write(char)+0x60>
   1e3a4:	eaffffee 	b	1e364 <CScreenDevice::Write(char)+0x68>
   1e3a8:	e2413008 	sub	r3, r1, #8
   1e3ac:	e3530013 	cmp	r3, #19
   1e3b0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1e3b4:	ea0000d3 	b	1e708 <CScreenDevice::Write(char)+0x40c>
   1e3b8:	0001e640 	.word	0x0001e640
   1e3bc:	0001e634 	.word	0x0001e634
   1e3c0:	0001e620 	.word	0x0001e620
   1e3c4:	0001e708 	.word	0x0001e708
   1e3c8:	0001e708 	.word	0x0001e708
   1e3cc:	0001e614 	.word	0x0001e614
   1e3d0:	0001e708 	.word	0x0001e708
   1e3d4:	0001e708 	.word	0x0001e708
   1e3d8:	0001e708 	.word	0x0001e708
   1e3dc:	0001e708 	.word	0x0001e708
   1e3e0:	0001e708 	.word	0x0001e708
   1e3e4:	0001e708 	.word	0x0001e708
   1e3e8:	0001e708 	.word	0x0001e708
   1e3ec:	0001e708 	.word	0x0001e708
   1e3f0:	0001e708 	.word	0x0001e708
   1e3f4:	0001e708 	.word	0x0001e708
   1e3f8:	0001e708 	.word	0x0001e708
   1e3fc:	0001e708 	.word	0x0001e708
   1e400:	0001e708 	.word	0x0001e708
   1e404:	0001e608 	.word	0x0001e608
   1e408:	e351004d 	cmp	r1, #77	; 0x4d
   1e40c:	0affffd2 	beq	1e35c <CScreenDevice::Write(char)+0x60>
   1e410:	e351005b 	cmp	r1, #91	; 0x5b
   1e414:	03a03002 	moveq	r3, #2
   1e418:	05803030 	streq	r3, [r0, #48]	; 0x30
   1e41c:	0affffd0 	beq	1e364 <CScreenDevice::Write(char)+0x68>
   1e420:	eaffffcd 	b	1e35c <CScreenDevice::Write(char)+0x60>
   1e424:	e241303f 	sub	r3, r1, #63	; 0x3f
   1e428:	e3530011 	cmp	r3, #17
   1e42c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1e430:	ea0000de 	b	1e7b0 <CScreenDevice::Write(char)+0x4b4>
   1e434:	0001e764 	.word	0x0001e764
   1e438:	0001e7b0 	.word	0x0001e7b0
   1e43c:	0001e338 	.word	0x0001e338
   1e440:	0001e790 	.word	0x0001e790
   1e444:	0001e780 	.word	0x0001e780
   1e448:	0001e770 	.word	0x0001e770
   1e44c:	0001e7b0 	.word	0x0001e7b0
   1e450:	0001e7b0 	.word	0x0001e7b0
   1e454:	0001e7b0 	.word	0x0001e7b0
   1e458:	0001e74c 	.word	0x0001e74c
   1e45c:	0001e7b0 	.word	0x0001e7b0
   1e460:	0001e73c 	.word	0x0001e73c
   1e464:	0001e7a0 	.word	0x0001e7a0
   1e468:	0001e35c 	.word	0x0001e35c
   1e46c:	0001e35c 	.word	0x0001e35c
   1e470:	0001e7b0 	.word	0x0001e7b0
   1e474:	0001e7b0 	.word	0x0001e7b0
   1e478:	0001e35c 	.word	0x0001e35c
   1e47c:	e241303b 	sub	r3, r1, #59	; 0x3b
   1e480:	e3530032 	cmp	r3, #50	; 0x32
   1e484:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1e488:	eaffffbb 	b	1e37c <CScreenDevice::Write(char)+0x80>
   1e48c:	0001e6fc 	.word	0x0001e6fc
   1e490:	0001e37c 	.word	0x0001e37c
   1e494:	0001e37c 	.word	0x0001e37c
   1e498:	0001e37c 	.word	0x0001e37c
   1e49c:	0001e37c 	.word	0x0001e37c
   1e4a0:	0001e37c 	.word	0x0001e37c
   1e4a4:	0001e37c 	.word	0x0001e37c
   1e4a8:	0001e37c 	.word	0x0001e37c
   1e4ac:	0001e37c 	.word	0x0001e37c
   1e4b0:	0001e37c 	.word	0x0001e37c
   1e4b4:	0001e37c 	.word	0x0001e37c
   1e4b8:	0001e37c 	.word	0x0001e37c
   1e4bc:	0001e37c 	.word	0x0001e37c
   1e4c0:	0001e37c 	.word	0x0001e37c
   1e4c4:	0001e37c 	.word	0x0001e37c
   1e4c8:	0001e37c 	.word	0x0001e37c
   1e4cc:	0001e37c 	.word	0x0001e37c
   1e4d0:	0001e35c 	.word	0x0001e35c
   1e4d4:	0001e35c 	.word	0x0001e35c
   1e4d8:	0001e37c 	.word	0x0001e37c
   1e4dc:	0001e37c 	.word	0x0001e37c
   1e4e0:	0001e35c 	.word	0x0001e35c
   1e4e4:	0001e37c 	.word	0x0001e37c
   1e4e8:	0001e37c 	.word	0x0001e37c
   1e4ec:	0001e37c 	.word	0x0001e37c
   1e4f0:	0001e37c 	.word	0x0001e37c
   1e4f4:	0001e37c 	.word	0x0001e37c
   1e4f8:	0001e37c 	.word	0x0001e37c
   1e4fc:	0001e37c 	.word	0x0001e37c
   1e500:	0001e64c 	.word	0x0001e64c
   1e504:	0001e37c 	.word	0x0001e37c
   1e508:	0001e37c 	.word	0x0001e37c
   1e50c:	0001e37c 	.word	0x0001e37c
   1e510:	0001e37c 	.word	0x0001e37c
   1e514:	0001e37c 	.word	0x0001e37c
   1e518:	0001e37c 	.word	0x0001e37c
   1e51c:	0001e37c 	.word	0x0001e37c
   1e520:	0001e37c 	.word	0x0001e37c
   1e524:	0001e37c 	.word	0x0001e37c
   1e528:	0001e37c 	.word	0x0001e37c
   1e52c:	0001e37c 	.word	0x0001e37c
   1e530:	0001e37c 	.word	0x0001e37c
   1e534:	0001e37c 	.word	0x0001e37c
   1e538:	0001e37c 	.word	0x0001e37c
   1e53c:	0001e37c 	.word	0x0001e37c
   1e540:	0001e660 	.word	0x0001e660
   1e544:	0001e37c 	.word	0x0001e37c
   1e548:	0001e37c 	.word	0x0001e37c
   1e54c:	0001e37c 	.word	0x0001e37c
   1e550:	0001e660 	.word	0x0001e660
   1e554:	0001e67c 	.word	0x0001e67c
   1e558:	e2411030 	sub	r1, r1, #48	; 0x30
   1e55c:	e6ef3071 	uxtb	r3, r1
   1e560:	e3530009 	cmp	r3, #9
   1e564:	8affff7c 	bhi	1e35c <CScreenDevice::Write(char)+0x60>
   1e568:	e3a03007 	mov	r3, #7
   1e56c:	e580104c 	str	r1, [r0, #76]	; 0x4c
   1e570:	e5803030 	str	r3, [r0, #48]	; 0x30
   1e574:	eaffff7a 	b	1e364 <CScreenDevice::Write(char)+0x68>
   1e578:	e2411030 	sub	r1, r1, #48	; 0x30
   1e57c:	e6ef3071 	uxtb	r3, r1
   1e580:	e3530009 	cmp	r3, #9
   1e584:	8affff74 	bhi	1e35c <CScreenDevice::Write(char)+0x60>
   1e588:	e3a03006 	mov	r3, #6
   1e58c:	e5801050 	str	r1, [r0, #80]	; 0x50
   1e590:	e5803030 	str	r3, [r0, #48]	; 0x30
   1e594:	eaffff72 	b	1e364 <CScreenDevice::Write(char)+0x68>
   1e598:	e3510048 	cmp	r1, #72	; 0x48
   1e59c:	0a000094 	beq	1e7f4 <CScreenDevice::Write(char)+0x4f8>
   1e5a0:	e3510072 	cmp	r1, #114	; 0x72
   1e5a4:	0a000011 	beq	1e5f0 <CScreenDevice::Write(char)+0x2f4>
   1e5a8:	e2411030 	sub	r1, r1, #48	; 0x30
   1e5ac:	e6ef3071 	uxtb	r3, r1
   1e5b0:	e3530009 	cmp	r3, #9
   1e5b4:	8affff68 	bhi	1e35c <CScreenDevice::Write(char)+0x60>
   1e5b8:	e5903050 	ldr	r3, [r0, #80]	; 0x50
   1e5bc:	e0833103 	add	r3, r3, r3, lsl #2
   1e5c0:	e0811083 	add	r1, r1, r3, lsl #1
   1e5c4:	e35100c7 	cmp	r1, #199	; 0xc7
   1e5c8:	e5801050 	str	r1, [r0, #80]	; 0x50
   1e5cc:	8affff62 	bhi	1e35c <CScreenDevice::Write(char)+0x60>
   1e5d0:	eaffff63 	b	1e364 <CScreenDevice::Write(char)+0x68>
   1e5d4:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   1e5d8:	e3530019 	cmp	r3, #25
   1e5dc:	02411068 	subeq	r1, r1, #104	; 0x68
   1e5e0:	016f1f11 	clzeq	r1, r1
   1e5e4:	01a012a1 	lsreq	r1, r1, #5
   1e5e8:	05c41044 	strbeq	r1, [r4, #68]	; 0x44
   1e5ec:	eaffff5a 	b	1e35c <CScreenDevice::Write(char)+0x60>
   1e5f0:	e5902050 	ldr	r2, [r0, #80]	; 0x50
   1e5f4:	e590104c 	ldr	r1, [r0, #76]	; 0x4c
   1e5f8:	ebfffde4 	bl	1dd90 <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>
   1e5fc:	e3a03000 	mov	r3, #0
   1e600:	e5843030 	str	r3, [r4, #48]	; 0x30
   1e604:	eaffff56 	b	1e364 <CScreenDevice::Write(char)+0x68>
   1e608:	e3a03001 	mov	r3, #1
   1e60c:	e5803030 	str	r3, [r0, #48]	; 0x30
   1e610:	eaffff53 	b	1e364 <CScreenDevice::Write(char)+0x68>
   1e614:	e3a03000 	mov	r3, #0
   1e618:	e580303c 	str	r3, [r0, #60]	; 0x3c
   1e61c:	eaffff50 	b	1e364 <CScreenDevice::Write(char)+0x68>
   1e620:	e3a03000 	mov	r3, #0
   1e624:	e580303c 	str	r3, [r0, #60]	; 0x3c
   1e628:	e28dd008 	add	sp, sp, #8
   1e62c:	e8bd4010 	pop	{r4, lr}
   1e630:	eafffe46 	b	1df50 <CScreenDevice::CursorDown()>
   1e634:	e28dd008 	add	sp, sp, #8
   1e638:	e8bd4010 	pop	{r4, lr}
   1e63c:	eafffe68 	b	1dfe4 <CScreenDevice::Tabulator()>
   1e640:	e28dd008 	add	sp, sp, #8
   1e644:	e8bd4010 	pop	{r4, lr}
   1e648:	eafffd89 	b	1dc74 <CScreenDevice::CursorLeft()>
   1e64c:	e590104c 	ldr	r1, [r0, #76]	; 0x4c
   1e650:	e3510000 	cmp	r1, #0
   1e654:	0affff40 	beq	1e35c <CScreenDevice::Write(char)+0x60>
   1e658:	ebfffeeb 	bl	1e20c <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>
   1e65c:	eaffff3e 	b	1e35c <CScreenDevice::Write(char)+0x60>
   1e660:	e590304c 	ldr	r3, [r0, #76]	; 0x4c
   1e664:	e3530004 	cmp	r3, #4
   1e668:	02411068 	subeq	r1, r1, #104	; 0x68
   1e66c:	016f1f11 	clzeq	r1, r1
   1e670:	01a012a1 	lsreq	r1, r1, #5
   1e674:	05c01048 	strbeq	r1, [r0, #72]	; 0x48
   1e678:	eaffff37 	b	1e35c <CScreenDevice::Write(char)+0x60>
   1e67c:	e590304c 	ldr	r3, [r0, #76]	; 0x4c
   1e680:	e353001b 	cmp	r3, #27
   1e684:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1e688:	eaffff33 	b	1e35c <CScreenDevice::Write(char)+0x60>
   1e68c:	0001e7e8 	.word	0x0001e7e8
   1e690:	0001e7dc 	.word	0x0001e7dc
   1e694:	0001e7d0 	.word	0x0001e7d0
   1e698:	0001e35c 	.word	0x0001e35c
   1e69c:	0001e35c 	.word	0x0001e35c
   1e6a0:	0001e35c 	.word	0x0001e35c
   1e6a4:	0001e35c 	.word	0x0001e35c
   1e6a8:	0001e35c 	.word	0x0001e35c
   1e6ac:	0001e35c 	.word	0x0001e35c
   1e6b0:	0001e35c 	.word	0x0001e35c
   1e6b4:	0001e35c 	.word	0x0001e35c
   1e6b8:	0001e35c 	.word	0x0001e35c
   1e6bc:	0001e35c 	.word	0x0001e35c
   1e6c0:	0001e35c 	.word	0x0001e35c
   1e6c4:	0001e35c 	.word	0x0001e35c
   1e6c8:	0001e35c 	.word	0x0001e35c
   1e6cc:	0001e35c 	.word	0x0001e35c
   1e6d0:	0001e35c 	.word	0x0001e35c
   1e6d4:	0001e35c 	.word	0x0001e35c
   1e6d8:	0001e35c 	.word	0x0001e35c
   1e6dc:	0001e35c 	.word	0x0001e35c
   1e6e0:	0001e35c 	.word	0x0001e35c
   1e6e4:	0001e35c 	.word	0x0001e35c
   1e6e8:	0001e35c 	.word	0x0001e35c
   1e6ec:	0001e35c 	.word	0x0001e35c
   1e6f0:	0001e35c 	.word	0x0001e35c
   1e6f4:	0001e35c 	.word	0x0001e35c
   1e6f8:	0001e7e8 	.word	0x0001e7e8
   1e6fc:	e3a03005 	mov	r3, #5
   1e700:	e5803030 	str	r3, [r0, #48]	; 0x30
   1e704:	eaffff16 	b	1e364 <CScreenDevice::Write(char)+0x68>
   1e708:	e6ef3071 	uxtb	r3, r1
   1e70c:	e353001f 	cmp	r3, #31
   1e710:	9affff13 	bls	1e364 <CScreenDevice::Write(char)+0x68>
   1e714:	e5903040 	ldr	r3, [r0, #64]	; 0x40
   1e718:	e590203c 	ldr	r2, [r0, #60]	; 0x3c
   1e71c:	e1d004b6 	ldrh	r0, [r0, #70]	; 0x46
   1e720:	e58d0000 	str	r0, [sp]
   1e724:	e1a00004 	mov	r0, r4
   1e728:	ebfffe40 	bl	1e030 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
   1e72c:	e1a00004 	mov	r0, r4
   1e730:	e28dd008 	add	sp, sp, #8
   1e734:	e8bd4010 	pop	{r4, lr}
   1e738:	eafffe1a 	b	1dfa8 <CScreenDevice::CursorRight()>
   1e73c:	ebfffecd 	bl	1e278 <CScreenDevice::ClearDisplayEnd()>
   1e740:	e3a03000 	mov	r3, #0
   1e744:	e5843030 	str	r3, [r4, #48]	; 0x30
   1e748:	eaffff05 	b	1e364 <CScreenDevice::Write(char)+0x68>
   1e74c:	e3a03000 	mov	r3, #0
   1e750:	e5902034 	ldr	r2, [r0, #52]	; 0x34
   1e754:	e580303c 	str	r3, [r0, #60]	; 0x3c
   1e758:	e5803030 	str	r3, [r0, #48]	; 0x30
   1e75c:	e5802040 	str	r2, [r0, #64]	; 0x40
   1e760:	eafffeff 	b	1e364 <CScreenDevice::Write(char)+0x68>
   1e764:	e3a03004 	mov	r3, #4
   1e768:	e5803030 	str	r3, [r0, #48]	; 0x30
   1e76c:	eafffefc 	b	1e364 <CScreenDevice::Write(char)+0x68>
   1e770:	ebfffd3f 	bl	1dc74 <CScreenDevice::CursorLeft()>
   1e774:	e3a03000 	mov	r3, #0
   1e778:	e5843030 	str	r3, [r4, #48]	; 0x30
   1e77c:	eafffef8 	b	1e364 <CScreenDevice::Write(char)+0x68>
   1e780:	ebfffe08 	bl	1dfa8 <CScreenDevice::CursorRight()>
   1e784:	e3a03000 	mov	r3, #0
   1e788:	e5843030 	str	r3, [r4, #48]	; 0x30
   1e78c:	eafffef4 	b	1e364 <CScreenDevice::Write(char)+0x68>
   1e790:	ebfffdee 	bl	1df50 <CScreenDevice::CursorDown()>
   1e794:	e3a03000 	mov	r3, #0
   1e798:	e5843030 	str	r3, [r4, #48]	; 0x30
   1e79c:	eafffef0 	b	1e364 <CScreenDevice::Write(char)+0x68>
   1e7a0:	ebfffe87 	bl	1e1c4 <CScreenDevice::ClearLineEnd()>
   1e7a4:	e3a03000 	mov	r3, #0
   1e7a8:	e5843030 	str	r3, [r4, #48]	; 0x30
   1e7ac:	eafffeec 	b	1e364 <CScreenDevice::Write(char)+0x68>
   1e7b0:	e2411030 	sub	r1, r1, #48	; 0x30
   1e7b4:	e6ef3071 	uxtb	r3, r1
   1e7b8:	e3530009 	cmp	r3, #9
   1e7bc:	8afffee6 	bhi	1e35c <CScreenDevice::Write(char)+0x60>
   1e7c0:	e3a03003 	mov	r3, #3
   1e7c4:	e580104c 	str	r1, [r0, #76]	; 0x4c
   1e7c8:	e5803030 	str	r3, [r0, #48]	; 0x30
   1e7cc:	eafffee4 	b	1e364 <CScreenDevice::Write(char)+0x68>
   1e7d0:	e3a0301f 	mov	r3, #31
   1e7d4:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
   1e7d8:	eafffedf 	b	1e35c <CScreenDevice::Write(char)+0x60>
   1e7dc:	e3a03b3e 	mov	r3, #63488	; 0xf800
   1e7e0:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
   1e7e4:	eafffedc 	b	1e35c <CScreenDevice::Write(char)+0x60>
   1e7e8:	e3e03020 	mvn	r3, #32
   1e7ec:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
   1e7f0:	eafffed9 	b	1e35c <CScreenDevice::Write(char)+0x60>
   1e7f4:	e5902050 	ldr	r2, [r0, #80]	; 0x50
   1e7f8:	e590104c 	ldr	r1, [r0, #76]	; 0x4c
   1e7fc:	ebfffd37 	bl	1dce0 <CScreenDevice::CursorMove(unsigned int, unsigned int)>
   1e800:	e3a03000 	mov	r3, #0
   1e804:	e5843030 	str	r3, [r4, #48]	; 0x30
   1e808:	eafffed5 	b	1e364 <CScreenDevice::Write(char)+0x68>

0001e80c <CScreenDevice::Write(void const*, unsigned int)>:
   1e80c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1e810:	e1a05000 	mov	r5, r0
   1e814:	e5900058 	ldr	r0, [r0, #88]	; 0x58
   1e818:	e1a07001 	mov	r7, r1
   1e81c:	e3500000 	cmp	r0, #0
   1e820:	e1a04002 	mov	r4, r2
   1e824:	1a000028 	bne	1e8cc <CScreenDevice::Write(void const*, unsigned int)+0xc0>
   1e828:	e3a02001 	mov	r2, #1
   1e82c:	e5d53044 	ldrb	r3, [r5, #68]	; 0x44
   1e830:	e5c52054 	strb	r2, [r5, #84]	; 0x54
   1e834:	e3530000 	cmp	r3, #0
   1e838:	1a00001c 	bne	1e8b0 <CScreenDevice::Write(void const*, unsigned int)+0xa4>
   1e83c:	e3540000 	cmp	r4, #0
   1e840:	e2446001 	sub	r6, r4, #1
   1e844:	01a06004 	moveq	r6, r4
   1e848:	0a00000b 	beq	1e87c <CScreenDevice::Write(void const*, unsigned int)+0x70>
   1e84c:	e1a04007 	mov	r4, r7
   1e850:	e0d410d1 	ldrsb	r1, [r4], #1
   1e854:	e1a00005 	mov	r0, r5
   1e858:	ebfffea7 	bl	1e2fc <CScreenDevice::Write(char)>
   1e85c:	e2643001 	rsb	r3, r4, #1
   1e860:	e0833006 	add	r3, r3, r6
   1e864:	e1770003 	cmn	r7, r3
   1e868:	1afffff8 	bne	1e850 <CScreenDevice::Write(void const*, unsigned int)+0x44>
   1e86c:	e2866001 	add	r6, r6, #1
   1e870:	e5d53044 	ldrb	r3, [r5, #68]	; 0x44
   1e874:	e3530000 	cmp	r3, #0
   1e878:	1a000009 	bne	1e8a4 <CScreenDevice::Write(void const*, unsigned int)+0x98>
   1e87c:	e3a02000 	mov	r2, #0
   1e880:	e5953058 	ldr	r3, [r5, #88]	; 0x58
   1e884:	e5c52054 	strb	r2, [r5, #84]	; 0x54
   1e888:	e1530002 	cmp	r3, r2
   1e88c:	0a000000 	beq	1e894 <CScreenDevice::Write(void const*, unsigned int)+0x88>
   1e890:	eb000fe4 	bl	22828 <LeaveCritical>
   1e894:	e3a03000 	mov	r3, #0
   1e898:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   1e89c:	e1a00006 	mov	r0, r6
   1e8a0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1e8a4:	e1a00005 	mov	r0, r5
   1e8a8:	ebfffc31 	bl	1d974 <CScreenDevice::InvertCursor() [clone .part.6]>
   1e8ac:	eafffff2 	b	1e87c <CScreenDevice::Write(void const*, unsigned int)+0x70>
   1e8b0:	e1a00005 	mov	r0, r5
   1e8b4:	ebfffc2e 	bl	1d974 <CScreenDevice::InvertCursor() [clone .part.6]>
   1e8b8:	e3540000 	cmp	r4, #0
   1e8bc:	e2446001 	sub	r6, r4, #1
   1e8c0:	1affffe1 	bne	1e84c <CScreenDevice::Write(void const*, unsigned int)+0x40>
   1e8c4:	e1a06004 	mov	r6, r4
   1e8c8:	eaffffe8 	b	1e870 <CScreenDevice::Write(void const*, unsigned int)+0x64>
   1e8cc:	eb000fa8 	bl	22774 <EnterCritical>
   1e8d0:	eaffffd4 	b	1e828 <CScreenDevice::Write(void const*, unsigned int)+0x1c>

0001e8d4 <CScreenDevice::Initialize()>:
   1e8d4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1e8d8:	e5d0500c 	ldrb	r5, [r0, #12]
   1e8dc:	e24dd00c 	sub	sp, sp, #12
   1e8e0:	e3550000 	cmp	r5, #0
   1e8e4:	e1a04000 	mov	r4, r0
   1e8e8:	0a00002a 	beq	1e998 <CScreenDevice::Initialize()+0xc4>
   1e8ec:	e5903004 	ldr	r3, [r0, #4]
   1e8f0:	e5902008 	ldr	r2, [r0, #8]
   1e8f4:	e5803024 	str	r3, [r0, #36]	; 0x24
   1e8f8:	e0000392 	mul	r0, r2, r3
   1e8fc:	e370010f 	cmn	r0, #-1073741821	; 0xc0000003
   1e900:	e1a00080 	lsl	r0, r0, #1
   1e904:	e584001c 	str	r0, [r4, #28]
   1e908:	e5843020 	str	r3, [r4, #32]
   1e90c:	23e00000 	mvncs	r0, #0
   1e910:	e5842028 	str	r2, [r4, #40]	; 0x28
   1e914:	eb000ff1 	bl	228e0 <operator new[](unsigned int)>
   1e918:	e5947028 	ldr	r7, [r4, #40]	; 0x28
   1e91c:	e5840018 	str	r0, [r4, #24]
   1e920:	e2846014 	add	r6, r4, #20
   1e924:	e1a00006 	mov	r0, r6
   1e928:	eb001307 	bl	2354c <CCharGenerator::GetCharHeight() const>
   1e92c:	e1a01000 	mov	r1, r0
   1e930:	e1a00007 	mov	r0, r7
   1e934:	eb00153c 	bl	23e2c <__aeabi_uidiv>
   1e938:	e1a05000 	mov	r5, r0
   1e93c:	e1a00006 	mov	r0, r6
   1e940:	eb001301 	bl	2354c <CCharGenerator::GetCharHeight() const>
   1e944:	e3a02000 	mov	r2, #0
   1e948:	e0000590 	mul	r0, r0, r5
   1e94c:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   1e950:	e584002c 	str	r0, [r4, #44]	; 0x2c
   1e954:	e5840038 	str	r0, [r4, #56]	; 0x38
   1e958:	e5843040 	str	r3, [r4, #64]	; 0x40
   1e95c:	e584203c 	str	r2, [r4, #60]	; 0x3c
   1e960:	e1a00004 	mov	r0, r4
   1e964:	ebfffe43 	bl	1e278 <CScreenDevice::ClearDisplayEnd()>
   1e968:	e5d43044 	ldrb	r3, [r4, #68]	; 0x44
   1e96c:	e3530000 	cmp	r3, #0
   1e970:	1a00002f 	bne	1ea34 <CScreenDevice::Initialize()+0x160>
   1e974:	ebfff200 	bl	1b17c <CDeviceNameService::Get()>
   1e978:	e1a02004 	mov	r2, r4
   1e97c:	e3a03000 	mov	r3, #0
   1e980:	e59f10b8 	ldr	r1, [pc, #184]	; 1ea40 <CScreenDevice::Initialize()+0x16c>
   1e984:	ebfff13c 	bl	1ae7c <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   1e988:	e3a05001 	mov	r5, #1
   1e98c:	e1a00005 	mov	r0, r5
   1e990:	e28dd00c 	add	sp, sp, #12
   1e994:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1e998:	e3a00094 	mov	r0, #148	; 0x94
   1e99c:	eb000fce 	bl	228dc <operator new(unsigned int)>
   1e9a0:	e9940006 	ldmib	r4, {r1, r2}
   1e9a4:	e1a06000 	mov	r6, r0
   1e9a8:	e3a03010 	mov	r3, #16
   1e9ac:	e58d5004 	str	r5, [sp, #4]
   1e9b0:	e58d5000 	str	r5, [sp]
   1e9b4:	eb00118b 	bl	22fe8 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   1e9b8:	e5846010 	str	r6, [r4, #16]
   1e9bc:	e1a00006 	mov	r0, r6
   1e9c0:	eb001201 	bl	231cc <CBcmFrameBuffer::Initialize()>
   1e9c4:	e3500000 	cmp	r0, #0
   1e9c8:	0affffef 	beq	1e98c <CScreenDevice::Initialize()+0xb8>
   1e9cc:	e5940010 	ldr	r0, [r4, #16]
   1e9d0:	eb001237 	bl	232b4 <CBcmFrameBuffer::GetDepth() const>
   1e9d4:	e3500010 	cmp	r0, #16
   1e9d8:	1affffeb 	bne	1e98c <CScreenDevice::Initialize()+0xb8>
   1e9dc:	e5940010 	ldr	r0, [r4, #16]
   1e9e0:	eb001235 	bl	232bc <CBcmFrameBuffer::GetBuffer() const>
   1e9e4:	e5840018 	str	r0, [r4, #24]
   1e9e8:	e5940010 	ldr	r0, [r4, #16]
   1e9ec:	eb001234 	bl	232c4 <CBcmFrameBuffer::GetSize() const>
   1e9f0:	e584001c 	str	r0, [r4, #28]
   1e9f4:	e5940010 	ldr	r0, [r4, #16]
   1e9f8:	eb00122b 	bl	232ac <CBcmFrameBuffer::GetPitch() const>
   1e9fc:	e5840020 	str	r0, [r4, #32]
   1ea00:	e5940010 	ldr	r0, [r4, #16]
   1ea04:	eb001220 	bl	2328c <CBcmFrameBuffer::GetWidth() const>
   1ea08:	e5840024 	str	r0, [r4, #36]	; 0x24
   1ea0c:	e5940010 	ldr	r0, [r4, #16]
   1ea10:	eb00121f 	bl	23294 <CBcmFrameBuffer::GetHeight() const>
   1ea14:	e5943020 	ldr	r3, [r4, #32]
   1ea18:	e1a07000 	mov	r7, r0
   1ea1c:	e3130003 	tst	r3, #3
   1ea20:	01a030a3 	lsreq	r3, r3, #1
   1ea24:	e5840028 	str	r0, [r4, #40]	; 0x28
   1ea28:	05843020 	streq	r3, [r4, #32]
   1ea2c:	0affffbb 	beq	1e920 <CScreenDevice::Initialize()+0x4c>
   1ea30:	eaffffd5 	b	1e98c <CScreenDevice::Initialize()+0xb8>
   1ea34:	e1a00004 	mov	r0, r4
   1ea38:	ebfffbcd 	bl	1d974 <CScreenDevice::InvertCursor() [clone .part.6]>
   1ea3c:	eaffffcc 	b	1e974 <CScreenDevice::Initialize()+0xa0>
   1ea40:	00028e48 	.word	0x00028e48

0001ea44 <CScreenDevice::InvertCursor()>:
   1ea44:	e5d03044 	ldrb	r3, [r0, #68]	; 0x44
   1ea48:	e3530000 	cmp	r3, #0
   1ea4c:	012fff1e 	bxeq	lr
   1ea50:	eafffbc7 	b	1d974 <CScreenDevice::InvertCursor() [clone .part.6]>

0001ea54 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)>:
   1ea54:	e590c024 	ldr	ip, [r0, #36]	; 0x24
   1ea58:	e15c0001 	cmp	ip, r1
   1ea5c:	912fff1e 	bxls	lr
   1ea60:	e590c028 	ldr	ip, [r0, #40]	; 0x28
   1ea64:	e15c0002 	cmp	ip, r2
   1ea68:	8590c020 	ldrhi	ip, [r0, #32]
   1ea6c:	85900018 	ldrhi	r0, [r0, #24]
   1ea70:	8022129c 	mlahi	r2, ip, r2, r1
   1ea74:	81a02082 	lslhi	r2, r2, #1
   1ea78:	818030b2 	strhhi	r3, [r0, r2]
   1ea7c:	e12fff1e 	bx	lr

0001ea80 <CScreenDevice::GetPixel(unsigned int, unsigned int)>:
   1ea80:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1ea84:	e1530001 	cmp	r3, r1
   1ea88:	9a000008 	bls	1eab0 <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x30>
   1ea8c:	e5903028 	ldr	r3, [r0, #40]	; 0x28
   1ea90:	e1530002 	cmp	r3, r2
   1ea94:	9a000005 	bls	1eab0 <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x30>
   1ea98:	e590c020 	ldr	ip, [r0, #32]
   1ea9c:	e5903018 	ldr	r3, [r0, #24]
   1eaa0:	e022129c 	mla	r2, ip, r2, r1
   1eaa4:	e1a02082 	lsl	r2, r2, #1
   1eaa8:	e19300b2 	ldrh	r0, [r3, r2]
   1eaac:	e12fff1e 	bx	lr
   1eab0:	e3a00000 	mov	r0, #0
   1eab4:	e12fff1e 	bx	lr

0001eab8 <CScreenDevice::Rotor(unsigned int, unsigned int)>:
   1eab8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1eabc:	e1a05000 	mov	r5, r0
   1eac0:	e24dd00c 	sub	sp, sp, #12
   1eac4:	e1a04001 	mov	r4, r1
   1eac8:	e2800014 	add	r0, r0, #20
   1eacc:	e1a06002 	mov	r6, r2
   1ead0:	e5957024 	ldr	r7, [r5, #36]	; 0x24
   1ead4:	eb00129a 	bl	23544 <CCharGenerator::GetCharWidth() const>
   1ead8:	e3a0cb3e 	mov	ip, #63488	; 0xf800
   1eadc:	e2044003 	and	r4, r4, #3
   1eae0:	e0200094 	mla	r0, r4, r0, r0
   1eae4:	e59f3024 	ldr	r3, [pc, #36]	; 1eb10 <CScreenDevice::Rotor(unsigned int, unsigned int)+0x58>
   1eae8:	e2066003 	and	r6, r6, #3
   1eaec:	e0833006 	add	r3, r3, r6
   1eaf0:	e1d311dc 	ldrsb	r1, [r3, #28]
   1eaf4:	e0472000 	sub	r2, r7, r0
   1eaf8:	e58dc000 	str	ip, [sp]
   1eafc:	e1a00005 	mov	r0, r5
   1eb00:	e3a03000 	mov	r3, #0
   1eb04:	ebfffd49 	bl	1e030 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
   1eb08:	e28dd00c 	add	sp, sp, #12
   1eb0c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1eb10:	0002922c 	.word	0x0002922c

0001eb14 <CSerialDevice::Read(void*, unsigned int)>:
   1eb14:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1eb18:	e2515000 	subs	r5, r1, #0
   1eb1c:	e1a04000 	mov	r4, r0
   1eb20:	e1a07002 	mov	r7, r2
   1eb24:	0a000058 	beq	1ec8c <CSerialDevice::Read(void*, unsigned int)+0x178>
   1eb28:	e59430a4 	ldr	r3, [r4, #164]	; 0xa4
   1eb2c:	e3530000 	cmp	r3, #0
   1eb30:	0a000032 	beq	1ec00 <CSerialDevice::Read(void*, unsigned int)+0xec>
   1eb34:	e2846a01 	add	r6, r4, #4096	; 0x1000
   1eb38:	e59600d0 	ldr	r0, [r6, #208]	; 0xd0
   1eb3c:	e3500000 	cmp	r0, #0
   1eb40:	1a000021 	bne	1ebcc <CSerialDevice::Read(void*, unsigned int)+0xb8>
   1eb44:	e59438b4 	ldr	r3, [r4, #2228]	; 0x8b4
   1eb48:	e3530000 	cmp	r3, #0
   1eb4c:	ba000022 	blt	1ebdc <CSerialDevice::Read(void*, unsigned int)+0xc8>
   1eb50:	e3570000 	cmp	r7, #0
   1eb54:	0a000017 	beq	1ebb8 <CSerialDevice::Read(void*, unsigned int)+0xa4>
   1eb58:	e59438ac 	ldr	r3, [r4, #2220]	; 0x8ac
   1eb5c:	e59428b0 	ldr	r2, [r4, #2224]	; 0x8b0
   1eb60:	e1520003 	cmp	r2, r3
   1eb64:	0a000053 	beq	1ecb8 <CSerialDevice::Read(void*, unsigned int)+0x1a4>
   1eb68:	e0852007 	add	r2, r5, r7
   1eb6c:	e1a01005 	mov	r1, r5
   1eb70:	e59fe150 	ldr	lr, [pc, #336]	; 1ecc8 <CSerialDevice::Read(void*, unsigned int)+0x1b4>
   1eb74:	ea000003 	b	1eb88 <CSerialDevice::Read(void*, unsigned int)+0x74>
   1eb78:	e594c8ac 	ldr	ip, [r4, #2220]	; 0x8ac
   1eb7c:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
   1eb80:	e15c0003 	cmp	ip, r3
   1eb84:	0a00000b 	beq	1ebb8 <CSerialDevice::Read(void*, unsigned int)+0xa4>
   1eb88:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
   1eb8c:	e2830001 	add	r0, r3, #1
   1eb90:	e58408b0 	str	r0, [r4, #2224]	; 0x8b0
   1eb94:	e0843003 	add	r3, r4, r3
   1eb98:	e5d330aa 	ldrb	r3, [r3, #170]	; 0xaa
   1eb9c:	e4c13001 	strb	r3, [r1], #1
   1eba0:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
   1eba4:	e1510002 	cmp	r1, r2
   1eba8:	e003300e 	and	r3, r3, lr
   1ebac:	e58438b0 	str	r3, [r4, #2224]	; 0x8b0
   1ebb0:	e0417005 	sub	r7, r1, r5
   1ebb4:	1affffef 	bne	1eb78 <CSerialDevice::Read(void*, unsigned int)+0x64>
   1ebb8:	e59630d0 	ldr	r3, [r6, #208]	; 0xd0
   1ebbc:	e3530000 	cmp	r3, #0
   1ebc0:	1a00000b 	bne	1ebf4 <CSerialDevice::Read(void*, unsigned int)+0xe0>
   1ebc4:	e1a00007 	mov	r0, r7
   1ebc8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1ebcc:	eb000ee8 	bl	22774 <EnterCritical>
   1ebd0:	e59438b4 	ldr	r3, [r4, #2228]	; 0x8b4
   1ebd4:	e3530000 	cmp	r3, #0
   1ebd8:	aaffffdc 	bge	1eb50 <CSerialDevice::Read(void*, unsigned int)+0x3c>
   1ebdc:	e3a03000 	mov	r3, #0
   1ebe0:	e59478b4 	ldr	r7, [r4, #2228]	; 0x8b4
   1ebe4:	e58438b4 	str	r3, [r4, #2228]	; 0x8b4
   1ebe8:	e59630d0 	ldr	r3, [r6, #208]	; 0xd0
   1ebec:	e3530000 	cmp	r3, #0
   1ebf0:	0afffff3 	beq	1ebc4 <CSerialDevice::Read(void*, unsigned int)+0xb0>
   1ebf4:	eb000f0b 	bl	22828 <LeaveCritical>
   1ebf8:	e1a00007 	mov	r0, r7
   1ebfc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1ec00:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   1ec04:	e3570000 	cmp	r7, #0
   1ec08:	0a00001b 	beq	1ec7c <CSerialDevice::Read(void*, unsigned int)+0x168>
   1ec0c:	e59fc0b8 	ldr	ip, [pc, #184]	; 1eccc <CSerialDevice::Read(void*, unsigned int)+0x1b8>
   1ec10:	e59c2018 	ldr	r2, [ip, #24]
   1ec14:	e3120010 	tst	r2, #16
   1ec18:	1a000028 	bne	1ecc0 <CSerialDevice::Read(void*, unsigned int)+0x1ac>
   1ec1c:	e59c3000 	ldr	r3, [ip]
   1ec20:	e3130b01 	tst	r3, #1024	; 0x400
   1ec24:	1a00001d 	bne	1eca0 <CSerialDevice::Read(void*, unsigned int)+0x18c>
   1ec28:	e3130b02 	tst	r3, #2048	; 0x800
   1ec2c:	1a00001d 	bne	1eca8 <CSerialDevice::Read(void*, unsigned int)+0x194>
   1ec30:	e3130c01 	tst	r3, #256	; 0x100
   1ec34:	1a00001d 	bne	1ecb0 <CSerialDevice::Read(void*, unsigned int)+0x19c>
   1ec38:	e0852007 	add	r2, r5, r7
   1ec3c:	e1a01005 	mov	r1, r5
   1ec40:	ea000009 	b	1ec6c <CSerialDevice::Read(void*, unsigned int)+0x158>
   1ec44:	e59c3018 	ldr	r3, [ip, #24]
   1ec48:	e3130010 	tst	r3, #16
   1ec4c:	1a00000a 	bne	1ec7c <CSerialDevice::Read(void*, unsigned int)+0x168>
   1ec50:	e59c3000 	ldr	r3, [ip]
   1ec54:	e3130b01 	tst	r3, #1024	; 0x400
   1ec58:	1a000010 	bne	1eca0 <CSerialDevice::Read(void*, unsigned int)+0x18c>
   1ec5c:	e3130b02 	tst	r3, #2048	; 0x800
   1ec60:	1a000010 	bne	1eca8 <CSerialDevice::Read(void*, unsigned int)+0x194>
   1ec64:	e3130c01 	tst	r3, #256	; 0x100
   1ec68:	1a000010 	bne	1ecb0 <CSerialDevice::Read(void*, unsigned int)+0x19c>
   1ec6c:	e4c13001 	strb	r3, [r1], #1
   1ec70:	e1510002 	cmp	r1, r2
   1ec74:	e0417005 	sub	r7, r1, r5
   1ec78:	1afffff1 	bne	1ec44 <CSerialDevice::Read(void*, unsigned int)+0x130>
   1ec7c:	e3a03000 	mov	r3, #0
   1ec80:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   1ec84:	e1a00007 	mov	r0, r7
   1ec88:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1ec8c:	e59f203c 	ldr	r2, [pc, #60]	; 1ecd0 <CSerialDevice::Read(void*, unsigned int)+0x1bc>
   1ec90:	e59f103c 	ldr	r1, [pc, #60]	; 1ecd4 <CSerialDevice::Read(void*, unsigned int)+0x1c0>
   1ec94:	e59f003c 	ldr	r0, [pc, #60]	; 1ecd8 <CSerialDevice::Read(void*, unsigned int)+0x1c4>
   1ec98:	ebffee3e 	bl	1a598 <assertion_failed>
   1ec9c:	eaffffa1 	b	1eb28 <CSerialDevice::Read(void*, unsigned int)+0x14>
   1eca0:	e3e07000 	mvn	r7, #0
   1eca4:	eafffff4 	b	1ec7c <CSerialDevice::Read(void*, unsigned int)+0x168>
   1eca8:	e3e07001 	mvn	r7, #1
   1ecac:	eafffff2 	b	1ec7c <CSerialDevice::Read(void*, unsigned int)+0x168>
   1ecb0:	e3e07002 	mvn	r7, #2
   1ecb4:	eafffff0 	b	1ec7c <CSerialDevice::Read(void*, unsigned int)+0x168>
   1ecb8:	e3a07000 	mov	r7, #0
   1ecbc:	eaffffbd 	b	1ebb8 <CSerialDevice::Read(void*, unsigned int)+0xa4>
   1ecc0:	e1a07003 	mov	r7, r3
   1ecc4:	eaffffec 	b	1ec7c <CSerialDevice::Read(void*, unsigned int)+0x168>
   1ecc8:	000007ff 	.word	0x000007ff
   1eccc:	20201000 	.word	0x20201000
   1ecd0:	00000101 	.word	0x00000101
   1ecd4:	0002926c 	.word	0x0002926c
   1ecd8:	00029278 	.word	0x00029278

0001ecdc <CSerialDevice::CSerialDevice(CInterruptSystem*, bool)>:
   1ecdc:	e92d4070 	push	{r4, r5, r6, lr}
   1ece0:	e1a04000 	mov	r4, r0
   1ece4:	e1a05002 	mov	r5, r2
   1ece8:	e1a06001 	mov	r6, r1
   1ecec:	ebfff031 	bl	1adb8 <CDevice::CDevice()>
   1ecf0:	e1a00004 	mov	r0, r4
   1ecf4:	e3a03000 	mov	r3, #0
   1ecf8:	e59f1098 	ldr	r1, [pc, #152]	; 1ed98 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool)+0xbc>
   1ecfc:	e1a02003 	mov	r2, r3
   1ed00:	e4801004 	str	r1, [r0], #4
   1ed04:	e3a01020 	mov	r1, #32
   1ed08:	ebfff498 	bl	1bf70 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
   1ed0c:	e3a03000 	mov	r3, #0
   1ed10:	e284002c 	add	r0, r4, #44	; 0x2c
   1ed14:	e1a02003 	mov	r2, r3
   1ed18:	e3a01021 	mov	r1, #33	; 0x21
   1ed1c:	ebfff493 	bl	1bf70 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
   1ed20:	e2840054 	add	r0, r4, #84	; 0x54
   1ed24:	e3a03000 	mov	r3, #0
   1ed28:	e3a02004 	mov	r2, #4
   1ed2c:	e3a0100e 	mov	r1, #14
   1ed30:	ebfff48e 	bl	1bf70 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
   1ed34:	e284007c 	add	r0, r4, #124	; 0x7c
   1ed38:	e3a03000 	mov	r3, #0
   1ed3c:	e3a02004 	mov	r2, #4
   1ed40:	e3a0100f 	mov	r1, #15
   1ed44:	ebfff489 	bl	1bf70 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
   1ed48:	e3550000 	cmp	r5, #0
   1ed4c:	e3a03000 	mov	r3, #0
   1ed50:	e3a01001 	mov	r1, #1
   1ed54:	13a0c002 	movne	ip, #2
   1ed58:	03a0c001 	moveq	ip, #1
   1ed5c:	e2842a01 	add	r2, r4, #4096	; 0x1000
   1ed60:	e58438ac 	str	r3, [r4, #2220]	; 0x8ac
   1ed64:	e58460a4 	str	r6, [r4, #164]	; 0xa4
   1ed68:	e58438b0 	str	r3, [r4, #2224]	; 0x8b0
   1ed6c:	e5c450a8 	strb	r5, [r4, #168]	; 0xa8
   1ed70:	e5c430a9 	strb	r3, [r4, #169]	; 0xa9
   1ed74:	e58438b4 	str	r3, [r4, #2228]	; 0x8b4
   1ed78:	e1a00004 	mov	r0, r4
   1ed7c:	e58230b8 	str	r3, [r2, #184]	; 0xb8
   1ed80:	e582c0d0 	str	ip, [r2, #208]	; 0xd0
   1ed84:	e58230c4 	str	r3, [r2, #196]	; 0xc4
   1ed88:	e58230bc 	str	r3, [r2, #188]	; 0xbc
   1ed8c:	e58210c0 	str	r1, [r2, #192]	; 0xc0
   1ed90:	e58210d4 	str	r1, [r2, #212]	; 0xd4
   1ed94:	e8bd8070 	pop	{r4, r5, r6, pc}
   1ed98:	00029258 	.word	0x00029258

0001ed9c <CSerialDevice::Initialize(unsigned int)>:
   1ed9c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1eda0:	e1a07001 	mov	r7, r1
   1eda4:	e1a04000 	mov	r4, r0
   1eda8:	ebfffabd 	bl	1d8a4 <CMachineInfo::Get()>
   1edac:	e3a01002 	mov	r1, #2
   1edb0:	ebfffa5b 	bl	1d724 <CMachineInfo::GetClockRate(unsigned int) const>
   1edb4:	e2508000 	subs	r8, r0, #0
   1edb8:	0a000051 	beq	1ef04 <CSerialDevice::Initialize(unsigned int)+0x168>
   1edbc:	e59f3154 	ldr	r3, [pc, #340]	; 1ef18 <CSerialDevice::Initialize(unsigned int)+0x17c>
   1edc0:	e2472f4b 	sub	r2, r7, #300	; 0x12c
   1edc4:	e1520003 	cmp	r2, r3
   1edc8:	8a000048 	bhi	1eef0 <CSerialDevice::Initialize(unsigned int)+0x154>
   1edcc:	e1a05207 	lsl	r5, r7, #4
   1edd0:	e1a01005 	mov	r1, r5
   1edd4:	e1a00008 	mov	r0, r8
   1edd8:	eb001413 	bl	23e2c <__aeabi_uidiv>
   1eddc:	e59f3138 	ldr	r3, [pc, #312]	; 1ef1c <CSerialDevice::Initialize(unsigned int)+0x180>
   1ede0:	e2402001 	sub	r2, r0, #1
   1ede4:	e1520003 	cmp	r2, r3
   1ede8:	e1a06000 	mov	r6, r0
   1edec:	8a00003a 	bhi	1eedc <CSerialDevice::Initialize(unsigned int)+0x140>
   1edf0:	e1a01005 	mov	r1, r5
   1edf4:	e1a00008 	mov	r0, r8
   1edf8:	eb001448 	bl	23f20 <__aeabi_uidivmod>
   1edfc:	e1a00181 	lsl	r0, r1, #3
   1ee00:	e1a01007 	mov	r1, r7
   1ee04:	eb001408 	bl	23e2c <__aeabi_uidiv>
   1ee08:	e2005001 	and	r5, r0, #1
   1ee0c:	e08550a0 	add	r5, r5, r0, lsr #1
   1ee10:	e355003f 	cmp	r5, #63	; 0x3f
   1ee14:	8a00002b 	bhi	1eec8 <CSerialDevice::Initialize(unsigned int)+0x12c>
   1ee18:	e59400a4 	ldr	r0, [r4, #164]	; 0xa4
   1ee1c:	e3500000 	cmp	r0, #0
   1ee20:	0a000008 	beq	1ee48 <CSerialDevice::Initialize(unsigned int)+0xac>
   1ee24:	e5d430a8 	ldrb	r3, [r4, #168]	; 0xa8
   1ee28:	e59f20f0 	ldr	r2, [pc, #240]	; 1ef20 <CSerialDevice::Initialize(unsigned int)+0x184>
   1ee2c:	e3530000 	cmp	r3, #0
   1ee30:	e3a01039 	mov	r1, #57	; 0x39
   1ee34:	e1a03004 	mov	r3, r4
   1ee38:	0a000020 	beq	1eec0 <CSerialDevice::Initialize(unsigned int)+0x124>
   1ee3c:	ebfff59c 	bl	1c4b4 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>
   1ee40:	e3a03001 	mov	r3, #1
   1ee44:	e5c430a9 	strb	r3, [r4, #169]	; 0xa9
   1ee48:	e3a02000 	mov	r2, #0
   1ee4c:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
   1ee50:	e59400a4 	ldr	r0, [r4, #164]	; 0xa4
   1ee54:	e59f30c8 	ldr	r3, [pc, #200]	; 1ef24 <CSerialDevice::Initialize(unsigned int)+0x188>
   1ee58:	e59f10c8 	ldr	r1, [pc, #200]	; 1ef28 <CSerialDevice::Initialize(unsigned int)+0x18c>
   1ee5c:	e1500002 	cmp	r0, r2
   1ee60:	e5832038 	str	r2, [r3, #56]	; 0x38
   1ee64:	13a00009 	movne	r0, #9
   1ee68:	e5831044 	str	r1, [r3, #68]	; 0x44
   1ee6c:	13a02e45 	movne	r2, #1104	; 0x450
   1ee70:	03a02060 	moveq	r2, #96	; 0x60
   1ee74:	13a01070 	movne	r1, #112	; 0x70
   1ee78:	e5836024 	str	r6, [r3, #36]	; 0x24
   1ee7c:	e5835028 	str	r5, [r3, #40]	; 0x28
   1ee80:	15830034 	strne	r0, [r3, #52]	; 0x34
   1ee84:	0583202c 	streq	r2, [r3, #44]	; 0x2c
   1ee88:	1583102c 	strne	r1, [r3, #44]	; 0x2c
   1ee8c:	15832038 	strne	r2, [r3, #56]	; 0x38
   1ee90:	e59f308c 	ldr	r3, [pc, #140]	; 1ef24 <CSerialDevice::Initialize(unsigned int)+0x188>
   1ee94:	e59f2090 	ldr	r2, [pc, #144]	; 1ef2c <CSerialDevice::Initialize(unsigned int)+0x190>
   1ee98:	e3a05000 	mov	r5, #0
   1ee9c:	e5832030 	str	r2, [r3, #48]	; 0x30
   1eea0:	ee075fba 	mcr	15, 0, r5, cr7, cr10, {5}
   1eea4:	ebfff0b4 	bl	1b17c <CDeviceNameService::Get()>
   1eea8:	e1a03005 	mov	r3, r5
   1eeac:	e1a02004 	mov	r2, r4
   1eeb0:	e59f1078 	ldr	r1, [pc, #120]	; 1ef30 <CSerialDevice::Initialize(unsigned int)+0x194>
   1eeb4:	ebffeff0 	bl	1ae7c <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   1eeb8:	e3a00001 	mov	r0, #1
   1eebc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1eec0:	ebfff50e 	bl	1c300 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   1eec4:	eaffffdd 	b	1ee40 <CSerialDevice::Initialize(unsigned int)+0xa4>
   1eec8:	e3a02092 	mov	r2, #146	; 0x92
   1eecc:	e59f1060 	ldr	r1, [pc, #96]	; 1ef34 <CSerialDevice::Initialize(unsigned int)+0x198>
   1eed0:	e59f0060 	ldr	r0, [pc, #96]	; 1ef38 <CSerialDevice::Initialize(unsigned int)+0x19c>
   1eed4:	ebffedaf 	bl	1a598 <assertion_failed>
   1eed8:	eaffffce 	b	1ee18 <CSerialDevice::Initialize(unsigned int)+0x7c>
   1eedc:	e3a0208f 	mov	r2, #143	; 0x8f
   1eee0:	e59f104c 	ldr	r1, [pc, #76]	; 1ef34 <CSerialDevice::Initialize(unsigned int)+0x198>
   1eee4:	e59f0050 	ldr	r0, [pc, #80]	; 1ef3c <CSerialDevice::Initialize(unsigned int)+0x1a0>
   1eee8:	ebffedaa 	bl	1a598 <assertion_failed>
   1eeec:	eaffffbf 	b	1edf0 <CSerialDevice::Initialize(unsigned int)+0x54>
   1eef0:	e3a0208c 	mov	r2, #140	; 0x8c
   1eef4:	e59f1038 	ldr	r1, [pc, #56]	; 1ef34 <CSerialDevice::Initialize(unsigned int)+0x198>
   1eef8:	e59f0040 	ldr	r0, [pc, #64]	; 1ef40 <CSerialDevice::Initialize(unsigned int)+0x1a4>
   1eefc:	ebffeda5 	bl	1a598 <assertion_failed>
   1ef00:	eaffffb1 	b	1edcc <CSerialDevice::Initialize(unsigned int)+0x30>
   1ef04:	e3a0208a 	mov	r2, #138	; 0x8a
   1ef08:	e59f1024 	ldr	r1, [pc, #36]	; 1ef34 <CSerialDevice::Initialize(unsigned int)+0x198>
   1ef0c:	e59f0030 	ldr	r0, [pc, #48]	; 1ef44 <CSerialDevice::Initialize(unsigned int)+0x1a8>
   1ef10:	ebffeda0 	bl	1a598 <assertion_failed>
   1ef14:	eaffffa8 	b	1edbc <CSerialDevice::Initialize(unsigned int)+0x20>
   1ef18:	003d07d4 	.word	0x003d07d4
   1ef1c:	0000fffe 	.word	0x0000fffe
   1ef20:	0001f6a0 	.word	0x0001f6a0
   1ef24:	20201000 	.word	0x20201000
   1ef28:	000007ff 	.word	0x000007ff
   1ef2c:	00000301 	.word	0x00000301
   1ef30:	000292f8 	.word	0x000292f8
   1ef34:	0002926c 	.word	0x0002926c
   1ef38:	000292e4 	.word	0x000292e4
   1ef3c:	000292c0 	.word	0x000292c0
   1ef40:	00029294 	.word	0x00029294
   1ef44:	00029284 	.word	0x00029284

0001ef48 <CSerialDevice::GetOptions() const>:
   1ef48:	e2800a01 	add	r0, r0, #4096	; 0x1000
   1ef4c:	e59000c0 	ldr	r0, [r0, #192]	; 0xc0
   1ef50:	e12fff1e 	bx	lr

0001ef54 <CSerialDevice::SetOptions(unsigned int)>:
   1ef54:	e2800a01 	add	r0, r0, #4096	; 0x1000
   1ef58:	e58010c0 	str	r1, [r0, #192]	; 0xc0
   1ef5c:	e12fff1e 	bx	lr

0001ef60 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())>:
   1ef60:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
   1ef64:	e92d4070 	push	{r4, r5, r6, lr}
   1ef68:	e3530000 	cmp	r3, #0
   1ef6c:	e1a04000 	mov	r4, r0
   1ef70:	e1a05001 	mov	r5, r1
   1ef74:	e1a06002 	mov	r6, r2
   1ef78:	0a00001d 	beq	1eff4 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x94>
   1ef7c:	e2844a01 	add	r4, r4, #4096	; 0x1000
   1ef80:	e59430c4 	ldr	r3, [r4, #196]	; 0xc4
   1ef84:	e3530000 	cmp	r3, #0
   1ef88:	0a000003 	beq	1ef9c <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x3c>
   1ef8c:	e59f2088 	ldr	r2, [pc, #136]	; 1f01c <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xbc>
   1ef90:	e59f1088 	ldr	r1, [pc, #136]	; 1f020 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc0>
   1ef94:	e59f0088 	ldr	r0, [pc, #136]	; 1f024 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc4>
   1ef98:	ebffed7e 	bl	1a598 <assertion_failed>
   1ef9c:	e3550000 	cmp	r5, #0
   1efa0:	0a000018 	beq	1f008 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xa8>
   1efa4:	e1d530d0 	ldrsb	r3, [r5]
   1efa8:	e3530000 	cmp	r3, #0
   1efac:	0a000005 	beq	1efc8 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x68>
   1efb0:	e3560000 	cmp	r6, #0
   1efb4:	0a000009 	beq	1efe0 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x80>
   1efb8:	e58460cc 	str	r6, [r4, #204]	; 0xcc
   1efbc:	e58450c8 	str	r5, [r4, #200]	; 0xc8
   1efc0:	e58450c4 	str	r5, [r4, #196]	; 0xc4
   1efc4:	e8bd8070 	pop	{r4, r5, r6, pc}
   1efc8:	e3a02f57 	mov	r2, #348	; 0x15c
   1efcc:	e59f104c 	ldr	r1, [pc, #76]	; 1f020 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc0>
   1efd0:	e59f0050 	ldr	r0, [pc, #80]	; 1f028 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc8>
   1efd4:	ebffed6f 	bl	1a598 <assertion_failed>
   1efd8:	e3560000 	cmp	r6, #0
   1efdc:	1afffff5 	bne	1efb8 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x58>
   1efe0:	e59f2044 	ldr	r2, [pc, #68]	; 1f02c <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xcc>
   1efe4:	e59f1034 	ldr	r1, [pc, #52]	; 1f020 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc0>
   1efe8:	e59f0040 	ldr	r0, [pc, #64]	; 1f030 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xd0>
   1efec:	ebffed69 	bl	1a598 <assertion_failed>
   1eff0:	eafffff0 	b	1efb8 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x58>
   1eff4:	e3a02f56 	mov	r2, #344	; 0x158
   1eff8:	e59f1020 	ldr	r1, [pc, #32]	; 1f020 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc0>
   1effc:	e59f0030 	ldr	r0, [pc, #48]	; 1f034 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xd4>
   1f000:	ebffed64 	bl	1a598 <assertion_failed>
   1f004:	eaffffdc 	b	1ef7c <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x1c>
   1f008:	e59f2028 	ldr	r2, [pc, #40]	; 1f038 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xd8>
   1f00c:	e59f100c 	ldr	r1, [pc, #12]	; 1f020 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc0>
   1f010:	e59f0024 	ldr	r0, [pc, #36]	; 1f03c <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xdc>
   1f014:	ebffed5f 	bl	1a598 <assertion_failed>
   1f018:	eaffffe1 	b	1efa4 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x44>
   1f01c:	00000159 	.word	0x00000159
   1f020:	0002926c 	.word	0x0002926c
   1f024:	00029300 	.word	0x00029300
   1f028:	0002931c 	.word	0x0002931c
   1f02c:	0000015d 	.word	0x0000015d
   1f030:	00028dc0 	.word	0x00028dc0
   1f034:	000240d8 	.word	0x000240d8
   1f038:	0000015b 	.word	0x0000015b
   1f03c:	00029310 	.word	0x00029310

0001f040 <CSerialDevice::AvailableForWrite()>:
   1f040:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
   1f044:	e92d4010 	push	{r4, lr}
   1f048:	e3530000 	cmp	r3, #0
   1f04c:	e1a04000 	mov	r4, r0
   1f050:	0a000014 	beq	1f0a8 <CSerialDevice::AvailableForWrite()+0x68>
   1f054:	e2844a01 	add	r4, r4, #4096	; 0x1000
   1f058:	e59400d0 	ldr	r0, [r4, #208]	; 0xd0
   1f05c:	e3500000 	cmp	r0, #0
   1f060:	1a00000d 	bne	1f09c <CSerialDevice::AvailableForWrite()+0x5c>
   1f064:	e59420bc 	ldr	r2, [r4, #188]	; 0xbc
   1f068:	e59430b8 	ldr	r3, [r4, #184]	; 0xb8
   1f06c:	e1520003 	cmp	r2, r3
   1f070:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
   1f074:	e59420b8 	ldr	r2, [r4, #184]	; 0xb8
   1f078:	92834e7f 	addls	r4, r3, #2032	; 0x7f0
   1f07c:	9284400f 	addls	r4, r4, #15
   1f080:	82434001 	subhi	r4, r3, #1
   1f084:	e3500000 	cmp	r0, #0
   1f088:	e0444002 	sub	r4, r4, r2
   1f08c:	0a000000 	beq	1f094 <CSerialDevice::AvailableForWrite()+0x54>
   1f090:	eb000de4 	bl	22828 <LeaveCritical>
   1f094:	e1a00004 	mov	r0, r4
   1f098:	e8bd8010 	pop	{r4, pc}
   1f09c:	eb000db4 	bl	22774 <EnterCritical>
   1f0a0:	e59400d0 	ldr	r0, [r4, #208]	; 0xd0
   1f0a4:	eaffffee 	b	1f064 <CSerialDevice::AvailableForWrite()+0x24>
   1f0a8:	e59f200c 	ldr	r2, [pc, #12]	; 1f0bc <CSerialDevice::AvailableForWrite()+0x7c>
   1f0ac:	e59f100c 	ldr	r1, [pc, #12]	; 1f0c0 <CSerialDevice::AvailableForWrite()+0x80>
   1f0b0:	e59f000c 	ldr	r0, [pc, #12]	; 1f0c4 <CSerialDevice::AvailableForWrite()+0x84>
   1f0b4:	ebffed37 	bl	1a598 <assertion_failed>
   1f0b8:	eaffffe5 	b	1f054 <CSerialDevice::AvailableForWrite()+0x14>
   1f0bc:	00000167 	.word	0x00000167
   1f0c0:	0002926c 	.word	0x0002926c
   1f0c4:	000240d8 	.word	0x000240d8

0001f0c8 <CSerialDevice::AvailableForRead()>:
   1f0c8:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
   1f0cc:	e92d4070 	push	{r4, r5, r6, lr}
   1f0d0:	e3530000 	cmp	r3, #0
   1f0d4:	e1a04000 	mov	r4, r0
   1f0d8:	0a000014 	beq	1f130 <CSerialDevice::AvailableForRead()+0x68>
   1f0dc:	e2845a01 	add	r5, r4, #4096	; 0x1000
   1f0e0:	e59500d0 	ldr	r0, [r5, #208]	; 0xd0
   1f0e4:	e3500000 	cmp	r0, #0
   1f0e8:	1a00000d 	bne	1f124 <CSerialDevice::AvailableForRead()+0x5c>
   1f0ec:	e59428ac 	ldr	r2, [r4, #2220]	; 0x8ac
   1f0f0:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
   1f0f4:	e1520003 	cmp	r2, r3
   1f0f8:	e59438ac 	ldr	r3, [r4, #2220]	; 0x8ac
   1f0fc:	359428b0 	ldrcc	r2, [r4, #2224]	; 0x8b0
   1f100:	259448b0 	ldrcs	r4, [r4, #2224]	; 0x8b0
   1f104:	32834b02 	addcc	r4, r3, #2048	; 0x800
   1f108:	30444002 	subcc	r4, r4, r2
   1f10c:	20434004 	subcs	r4, r3, r4
   1f110:	e3500000 	cmp	r0, #0
   1f114:	0a000000 	beq	1f11c <CSerialDevice::AvailableForRead()+0x54>
   1f118:	eb000dc2 	bl	22828 <LeaveCritical>
   1f11c:	e1a00004 	mov	r0, r4
   1f120:	e8bd8070 	pop	{r4, r5, r6, pc}
   1f124:	eb000d92 	bl	22774 <EnterCritical>
   1f128:	e59500d0 	ldr	r0, [r5, #208]	; 0xd0
   1f12c:	eaffffee 	b	1f0ec <CSerialDevice::AvailableForRead()+0x24>
   1f130:	e3a02f5f 	mov	r2, #380	; 0x17c
   1f134:	e59f1008 	ldr	r1, [pc, #8]	; 1f144 <CSerialDevice::AvailableForRead()+0x7c>
   1f138:	e59f0008 	ldr	r0, [pc, #8]	; 1f148 <CSerialDevice::AvailableForRead()+0x80>
   1f13c:	ebffed15 	bl	1a598 <assertion_failed>
   1f140:	eaffffe5 	b	1f0dc <CSerialDevice::AvailableForRead()+0x14>
   1f144:	0002926c 	.word	0x0002926c
   1f148:	000240d8 	.word	0x000240d8

0001f14c <CSerialDevice::Peek()>:
   1f14c:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
   1f150:	e92d4070 	push	{r4, r5, r6, lr}
   1f154:	e3530000 	cmp	r3, #0
   1f158:	e1a04000 	mov	r4, r0
   1f15c:	0a000017 	beq	1f1c0 <CSerialDevice::Peek()+0x74>
   1f160:	e2845a01 	add	r5, r4, #4096	; 0x1000
   1f164:	e59500d0 	ldr	r0, [r5, #208]	; 0xd0
   1f168:	e3500000 	cmp	r0, #0
   1f16c:	1a00000b 	bne	1f1a0 <CSerialDevice::Peek()+0x54>
   1f170:	e59418ac 	ldr	r1, [r4, #2220]	; 0x8ac
   1f174:	e59428b0 	ldr	r2, [r4, #2224]	; 0x8b0
   1f178:	e1510002 	cmp	r1, r2
   1f17c:	0a000014 	beq	1f1d4 <CSerialDevice::Peek()+0x88>
   1f180:	e59428b0 	ldr	r2, [r4, #2224]	; 0x8b0
   1f184:	e0844002 	add	r4, r4, r2
   1f188:	e5d440aa 	ldrb	r4, [r4, #170]	; 0xaa
   1f18c:	e3500000 	cmp	r0, #0
   1f190:	0a000000 	beq	1f198 <CSerialDevice::Peek()+0x4c>
   1f194:	eb000da3 	bl	22828 <LeaveCritical>
   1f198:	e1a00004 	mov	r0, r4
   1f19c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1f1a0:	eb000d73 	bl	22774 <EnterCritical>
   1f1a4:	e59428ac 	ldr	r2, [r4, #2220]	; 0x8ac
   1f1a8:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
   1f1ac:	e59500d0 	ldr	r0, [r5, #208]	; 0xd0
   1f1b0:	e1520003 	cmp	r2, r3
   1f1b4:	03e04000 	mvneq	r4, #0
   1f1b8:	1afffff0 	bne	1f180 <CSerialDevice::Peek()+0x34>
   1f1bc:	eafffff2 	b	1f18c <CSerialDevice::Peek()+0x40>
   1f1c0:	e59f2014 	ldr	r2, [pc, #20]	; 1f1dc <CSerialDevice::Peek()+0x90>
   1f1c4:	e59f1014 	ldr	r1, [pc, #20]	; 1f1e0 <CSerialDevice::Peek()+0x94>
   1f1c8:	e59f0014 	ldr	r0, [pc, #20]	; 1f1e4 <CSerialDevice::Peek()+0x98>
   1f1cc:	ebffecf1 	bl	1a598 <assertion_failed>
   1f1d0:	eaffffe2 	b	1f160 <CSerialDevice::Peek()+0x14>
   1f1d4:	e3e04000 	mvn	r4, #0
   1f1d8:	eaffffee 	b	1f198 <CSerialDevice::Peek()+0x4c>
   1f1dc:	00000191 	.word	0x00000191
   1f1e0:	0002926c 	.word	0x0002926c
   1f1e4:	000240d8 	.word	0x000240d8

0001f1e8 <CSerialDevice::Flush()>:
   1f1e8:	e3a03000 	mov	r3, #0
   1f1ec:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   1f1f0:	e59f2010 	ldr	r2, [pc, #16]	; 1f208 <CSerialDevice::Flush()+0x20>
   1f1f4:	e5923018 	ldr	r3, [r2, #24]
   1f1f8:	e2133008 	ands	r3, r3, #8
   1f1fc:	1afffffc 	bne	1f1f4 <CSerialDevice::Flush()+0xc>
   1f200:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   1f204:	e12fff1e 	bx	lr
   1f208:	20201000 	.word	0x20201000

0001f20c <CSerialDevice::Write(unsigned char)>:
   1f20c:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
   1f210:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1f214:	e3530000 	cmp	r3, #0
   1f218:	0a00002c 	beq	1f2d0 <CSerialDevice::Write(unsigned char)+0xc4>
   1f21c:	e2805a01 	add	r5, r0, #4096	; 0x1000
   1f220:	e59520d0 	ldr	r2, [r5, #208]	; 0xd0
   1f224:	e1a06001 	mov	r6, r1
   1f228:	e3520000 	cmp	r2, #0
   1f22c:	e1a04000 	mov	r4, r0
   1f230:	1a000017 	bne	1f294 <CSerialDevice::Write(unsigned char)+0x88>
   1f234:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
   1f238:	e59510bc 	ldr	r1, [r5, #188]	; 0xbc
   1f23c:	e2833001 	add	r3, r3, #1
   1f240:	e1a03a83 	lsl	r3, r3, #21
   1f244:	e1a03aa3 	lsr	r3, r3, #21
   1f248:	e1530001 	cmp	r3, r1
   1f24c:	0a00001c 	beq	1f2c4 <CSerialDevice::Write(unsigned char)+0xb8>
   1f250:	e3a07001 	mov	r7, #1
   1f254:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
   1f258:	e0840003 	add	r0, r4, r3
   1f25c:	e0833007 	add	r3, r3, r7
   1f260:	e58530b8 	str	r3, [r5, #184]	; 0xb8
   1f264:	e5c068b8 	strb	r6, [r0, #2232]	; 0x8b8
   1f268:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
   1f26c:	e1a03a83 	lsl	r3, r3, #21
   1f270:	e1a03aa3 	lsr	r3, r3, #21
   1f274:	e58530b8 	str	r3, [r5, #184]	; 0xb8
   1f278:	e3520000 	cmp	r2, #0
   1f27c:	1a000001 	bne	1f288 <CSerialDevice::Write(unsigned char)+0x7c>
   1f280:	e1a00007 	mov	r0, r7
   1f284:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1f288:	eb000d66 	bl	22828 <LeaveCritical>
   1f28c:	e1a00007 	mov	r0, r7
   1f290:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1f294:	e1a00002 	mov	r0, r2
   1f298:	eb000d35 	bl	22774 <EnterCritical>
   1f29c:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
   1f2a0:	e59520bc 	ldr	r2, [r5, #188]	; 0xbc
   1f2a4:	e2833001 	add	r3, r3, #1
   1f2a8:	e1a03a83 	lsl	r3, r3, #21
   1f2ac:	e1a03aa3 	lsr	r3, r3, #21
   1f2b0:	e1530002 	cmp	r3, r2
   1f2b4:	03a07000 	moveq	r7, #0
   1f2b8:	e59520d0 	ldr	r2, [r5, #208]	; 0xd0
   1f2bc:	1affffe3 	bne	1f250 <CSerialDevice::Write(unsigned char)+0x44>
   1f2c0:	eaffffec 	b	1f278 <CSerialDevice::Write(unsigned char)+0x6c>
   1f2c4:	e1a07002 	mov	r7, r2
   1f2c8:	e1a00007 	mov	r0, r7
   1f2cc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1f2d0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   1f2d4:	e59f201c 	ldr	r2, [pc, #28]	; 1f2f8 <CSerialDevice::Write(unsigned char)+0xec>
   1f2d8:	e5923018 	ldr	r3, [r2, #24]
   1f2dc:	e2133020 	ands	r3, r3, #32
   1f2e0:	1afffffc 	bne	1f2d8 <CSerialDevice::Write(unsigned char)+0xcc>
   1f2e4:	e5821000 	str	r1, [r2]
   1f2e8:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   1f2ec:	e3a07001 	mov	r7, #1
   1f2f0:	e1a00007 	mov	r0, r7
   1f2f4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1f2f8:	20201000 	.word	0x20201000

0001f2fc <CSerialDevice::Write(void const*, unsigned int)>:
   1f2fc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1f300:	e2804a01 	add	r4, r0, #4096	; 0x1000
   1f304:	e1a07000 	mov	r7, r0
   1f308:	e59400d4 	ldr	r0, [r4, #212]	; 0xd4
   1f30c:	e1a05001 	mov	r5, r1
   1f310:	e3500000 	cmp	r0, #0
   1f314:	e1a08002 	mov	r8, r2
   1f318:	1a000053 	bne	1f46c <CSerialDevice::Write(void const*, unsigned int)+0x170>
   1f31c:	e3550000 	cmp	r5, #0
   1f320:	0a000059 	beq	1f48c <CSerialDevice::Write(void const*, unsigned int)+0x190>
   1f324:	e3580000 	cmp	r8, #0
   1f328:	0a00005c 	beq	1f4a0 <CSerialDevice::Write(void const*, unsigned int)+0x1a4>
   1f32c:	e3a06000 	mov	r6, #0
   1f330:	e3a0900d 	mov	r9, #13
   1f334:	ea000002 	b	1f344 <CSerialDevice::Write(void const*, unsigned int)+0x48>
   1f338:	e2866001 	add	r6, r6, #1
   1f33c:	e1560008 	cmp	r6, r8
   1f340:	0a00000f 	beq	1f384 <CSerialDevice::Write(void const*, unsigned int)+0x88>
   1f344:	e5d51000 	ldrb	r1, [r5]
   1f348:	e1a00007 	mov	r0, r7
   1f34c:	ebffffae 	bl	1f20c <CSerialDevice::Write(unsigned char)>
   1f350:	e3500000 	cmp	r0, #0
   1f354:	0a00000a 	beq	1f384 <CSerialDevice::Write(void const*, unsigned int)+0x88>
   1f358:	e4d53001 	ldrb	r3, [r5], #1
   1f35c:	e353000a 	cmp	r3, #10
   1f360:	1afffff4 	bne	1f338 <CSerialDevice::Write(void const*, unsigned int)+0x3c>
   1f364:	e59430c0 	ldr	r3, [r4, #192]	; 0xc0
   1f368:	e3130001 	tst	r3, #1
   1f36c:	0afffff1 	beq	1f338 <CSerialDevice::Write(void const*, unsigned int)+0x3c>
   1f370:	e1a01009 	mov	r1, r9
   1f374:	e1a00007 	mov	r0, r7
   1f378:	ebffffa3 	bl	1f20c <CSerialDevice::Write(unsigned char)>
   1f37c:	e3500000 	cmp	r0, #0
   1f380:	1affffec 	bne	1f338 <CSerialDevice::Write(void const*, unsigned int)+0x3c>
   1f384:	e59430d4 	ldr	r3, [r4, #212]	; 0xd4
   1f388:	e3530000 	cmp	r3, #0
   1f38c:	1a000034 	bne	1f464 <CSerialDevice::Write(void const*, unsigned int)+0x168>
   1f390:	e59730a4 	ldr	r3, [r7, #164]	; 0xa4
   1f394:	e3530000 	cmp	r3, #0
   1f398:	0a000027 	beq	1f43c <CSerialDevice::Write(void const*, unsigned int)+0x140>
   1f39c:	e59400d0 	ldr	r0, [r4, #208]	; 0xd0
   1f3a0:	e3500000 	cmp	r0, #0
   1f3a4:	1a000032 	bne	1f474 <CSerialDevice::Write(void const*, unsigned int)+0x178>
   1f3a8:	e59420b8 	ldr	r2, [r4, #184]	; 0xb8
   1f3ac:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
   1f3b0:	e1520003 	cmp	r2, r3
   1f3b4:	0a000020 	beq	1f43c <CSerialDevice::Write(void const*, unsigned int)+0x140>
   1f3b8:	e3a03000 	mov	r3, #0
   1f3bc:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   1f3c0:	e59430b8 	ldr	r3, [r4, #184]	; 0xb8
   1f3c4:	e59420bc 	ldr	r2, [r4, #188]	; 0xbc
   1f3c8:	e1520003 	cmp	r2, r3
   1f3cc:	0a000015 	beq	1f428 <CSerialDevice::Write(void const*, unsigned int)+0x12c>
   1f3d0:	e59f20d0 	ldr	r2, [pc, #208]	; 1f4a8 <CSerialDevice::Write(void const*, unsigned int)+0x1ac>
   1f3d4:	e5923018 	ldr	r3, [r2, #24]
   1f3d8:	e3130020 	tst	r3, #32
   1f3dc:	1a00001b 	bne	1f450 <CSerialDevice::Write(void const*, unsigned int)+0x154>
   1f3e0:	e59f00c4 	ldr	r0, [pc, #196]	; 1f4ac <CSerialDevice::Write(void const*, unsigned int)+0x1b0>
   1f3e4:	ea000002 	b	1f3f4 <CSerialDevice::Write(void const*, unsigned int)+0xf8>
   1f3e8:	e5923018 	ldr	r3, [r2, #24]
   1f3ec:	e3130020 	tst	r3, #32
   1f3f0:	1a000016 	bne	1f450 <CSerialDevice::Write(void const*, unsigned int)+0x154>
   1f3f4:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
   1f3f8:	e2831001 	add	r1, r3, #1
   1f3fc:	e58410bc 	str	r1, [r4, #188]	; 0xbc
   1f400:	e0873003 	add	r3, r7, r3
   1f404:	e5d338b8 	ldrb	r3, [r3, #2232]	; 0x8b8
   1f408:	e5823000 	str	r3, [r2]
   1f40c:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
   1f410:	e0033000 	and	r3, r3, r0
   1f414:	e58430bc 	str	r3, [r4, #188]	; 0xbc
   1f418:	e59410b8 	ldr	r1, [r4, #184]	; 0xb8
   1f41c:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
   1f420:	e1510003 	cmp	r1, r3
   1f424:	1affffef 	bne	1f3e8 <CSerialDevice::Write(void const*, unsigned int)+0xec>
   1f428:	e3a03000 	mov	r3, #0
   1f42c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   1f430:	e59430d0 	ldr	r3, [r4, #208]	; 0xd0
   1f434:	e3530000 	cmp	r3, #0
   1f438:	1a000001 	bne	1f444 <CSerialDevice::Write(void const*, unsigned int)+0x148>
   1f43c:	e1a00006 	mov	r0, r6
   1f440:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f444:	eb000cf7 	bl	22828 <LeaveCritical>
   1f448:	e1a00006 	mov	r0, r6
   1f44c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f450:	e59f2050 	ldr	r2, [pc, #80]	; 1f4a8 <CSerialDevice::Write(void const*, unsigned int)+0x1ac>
   1f454:	e5923038 	ldr	r3, [r2, #56]	; 0x38
   1f458:	e3833020 	orr	r3, r3, #32
   1f45c:	e5823038 	str	r3, [r2, #56]	; 0x38
   1f460:	eafffff0 	b	1f428 <CSerialDevice::Write(void const*, unsigned int)+0x12c>
   1f464:	eb000cef 	bl	22828 <LeaveCritical>
   1f468:	eaffffc8 	b	1f390 <CSerialDevice::Write(void const*, unsigned int)+0x94>
   1f46c:	eb000cc0 	bl	22774 <EnterCritical>
   1f470:	eaffffa9 	b	1f31c <CSerialDevice::Write(void const*, unsigned int)+0x20>
   1f474:	eb000cbe 	bl	22774 <EnterCritical>
   1f478:	e59420b8 	ldr	r2, [r4, #184]	; 0xb8
   1f47c:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
   1f480:	e1520003 	cmp	r2, r3
   1f484:	1affffcb 	bne	1f3b8 <CSerialDevice::Write(void const*, unsigned int)+0xbc>
   1f488:	eaffffe8 	b	1f430 <CSerialDevice::Write(void const*, unsigned int)+0x134>
   1f48c:	e3a020c3 	mov	r2, #195	; 0xc3
   1f490:	e59f1018 	ldr	r1, [pc, #24]	; 1f4b0 <CSerialDevice::Write(void const*, unsigned int)+0x1b4>
   1f494:	e59f0018 	ldr	r0, [pc, #24]	; 1f4b4 <CSerialDevice::Write(void const*, unsigned int)+0x1b8>
   1f498:	ebffec3e 	bl	1a598 <assertion_failed>
   1f49c:	eaffffa0 	b	1f324 <CSerialDevice::Write(void const*, unsigned int)+0x28>
   1f4a0:	e1a06008 	mov	r6, r8
   1f4a4:	eaffffb6 	b	1f384 <CSerialDevice::Write(void const*, unsigned int)+0x88>
   1f4a8:	20201000 	.word	0x20201000
   1f4ac:	000007ff 	.word	0x000007ff
   1f4b0:	0002926c 	.word	0x0002926c
   1f4b4:	00029278 	.word	0x00029278

0001f4b8 <CSerialDevice::InterruptHandler()>:
   1f4b8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1f4bc:	e2804a01 	add	r4, r0, #4096	; 0x1000
   1f4c0:	e1a05000 	mov	r5, r0
   1f4c4:	e59400d0 	ldr	r0, [r4, #208]	; 0xd0
   1f4c8:	e3500000 	cmp	r0, #0
   1f4cc:	1a00006f 	bne	1f690 <CSerialDevice::InterruptHandler()+0x1d8>
   1f4d0:	e3a06000 	mov	r6, #0
   1f4d4:	ee076f9a 	mcr	15, 0, r6, cr7, cr10, {4}
   1f4d8:	e59f31b8 	ldr	r3, [pc, #440]	; 1f698 <CSerialDevice::InterruptHandler()+0x1e0>
   1f4dc:	e3e07002 	mvn	r7, #2
   1f4e0:	e1a01003 	mov	r1, r3
   1f4e4:	e3e0c001 	mvn	ip, #1
   1f4e8:	e3e0e000 	mvn	lr, #0
   1f4ec:	e5932040 	ldr	r2, [r3, #64]	; 0x40
   1f4f0:	e59f01a4 	ldr	r0, [pc, #420]	; 1f69c <CSerialDevice::InterruptHandler()+0x1e4>
   1f4f4:	e5832044 	str	r2, [r3, #68]	; 0x44
   1f4f8:	e5913018 	ldr	r3, [r1, #24]
   1f4fc:	e3130010 	tst	r3, #16
   1f500:	1a00001f 	bne	1f584 <CSerialDevice::InterruptHandler()+0xcc>
   1f504:	e5912000 	ldr	r2, [r1]
   1f508:	e3120b01 	tst	r2, #1024	; 0x400
   1f50c:	0a000040 	beq	1f614 <CSerialDevice::InterruptHandler()+0x15c>
   1f510:	e59538b4 	ldr	r3, [r5, #2228]	; 0x8b4
   1f514:	e3530000 	cmp	r3, #0
   1f518:	0585e8b4 	streq	lr, [r5, #2228]	; 0x8b4
   1f51c:	e59480c4 	ldr	r8, [r4, #196]	; 0xc4
   1f520:	e3580000 	cmp	r8, #0
   1f524:	0a000005 	beq	1f540 <CSerialDevice::InterruptHandler()+0x88>
   1f528:	e59490c8 	ldr	r9, [r4, #200]	; 0xc8
   1f52c:	e6af3072 	sxtb	r3, r2
   1f530:	e1d9a0d0 	ldrsb	sl, [r9]
   1f534:	e15a0003 	cmp	sl, r3
   1f538:	158480c8 	strne	r8, [r4, #200]	; 0xc8
   1f53c:	0a000044 	beq	1f654 <CSerialDevice::InterruptHandler()+0x19c>
   1f540:	e59538ac 	ldr	r3, [r5, #2220]	; 0x8ac
   1f544:	e59588b0 	ldr	r8, [r5, #2224]	; 0x8b0
   1f548:	e2833001 	add	r3, r3, #1
   1f54c:	e0033000 	and	r3, r3, r0
   1f550:	e1530008 	cmp	r3, r8
   1f554:	0a000034 	beq	1f62c <CSerialDevice::InterruptHandler()+0x174>
   1f558:	e59538ac 	ldr	r3, [r5, #2220]	; 0x8ac
   1f55c:	e2838001 	add	r8, r3, #1
   1f560:	e0853003 	add	r3, r5, r3
   1f564:	e58588ac 	str	r8, [r5, #2220]	; 0x8ac
   1f568:	e5c320aa 	strb	r2, [r3, #170]	; 0xaa
   1f56c:	e59538ac 	ldr	r3, [r5, #2220]	; 0x8ac
   1f570:	e0033000 	and	r3, r3, r0
   1f574:	e58538ac 	str	r3, [r5, #2220]	; 0x8ac
   1f578:	e5913018 	ldr	r3, [r1, #24]
   1f57c:	e3130010 	tst	r3, #16
   1f580:	0affffdf 	beq	1f504 <CSerialDevice::InterruptHandler()+0x4c>
   1f584:	e5913018 	ldr	r3, [r1, #24]
   1f588:	e3130020 	tst	r3, #32
   1f58c:	1a000016 	bne	1f5ec <CSerialDevice::InterruptHandler()+0x134>
   1f590:	e59420b8 	ldr	r2, [r4, #184]	; 0xb8
   1f594:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
   1f598:	e1520003 	cmp	r2, r3
   1f59c:	0a000032 	beq	1f66c <CSerialDevice::InterruptHandler()+0x1b4>
   1f5a0:	e59f20f0 	ldr	r2, [pc, #240]	; 1f698 <CSerialDevice::InterruptHandler()+0x1e0>
   1f5a4:	e59f00f0 	ldr	r0, [pc, #240]	; 1f69c <CSerialDevice::InterruptHandler()+0x1e4>
   1f5a8:	ea000003 	b	1f5bc <CSerialDevice::InterruptHandler()+0x104>
   1f5ac:	e59410b8 	ldr	r1, [r4, #184]	; 0xb8
   1f5b0:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
   1f5b4:	e1510003 	cmp	r1, r3
   1f5b8:	0a00002b 	beq	1f66c <CSerialDevice::InterruptHandler()+0x1b4>
   1f5bc:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
   1f5c0:	e2831001 	add	r1, r3, #1
   1f5c4:	e58410bc 	str	r1, [r4, #188]	; 0xbc
   1f5c8:	e0853003 	add	r3, r5, r3
   1f5cc:	e5d338b8 	ldrb	r3, [r3, #2232]	; 0x8b8
   1f5d0:	e5823000 	str	r3, [r2]
   1f5d4:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
   1f5d8:	e0033000 	and	r3, r3, r0
   1f5dc:	e58430bc 	str	r3, [r4, #188]	; 0xbc
   1f5e0:	e5923018 	ldr	r3, [r2, #24]
   1f5e4:	e3130020 	tst	r3, #32
   1f5e8:	0affffef 	beq	1f5ac <CSerialDevice::InterruptHandler()+0xf4>
   1f5ec:	e3a03000 	mov	r3, #0
   1f5f0:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   1f5f4:	e59430d0 	ldr	r3, [r4, #208]	; 0xd0
   1f5f8:	e3530000 	cmp	r3, #0
   1f5fc:	1a00001f 	bne	1f680 <CSerialDevice::InterruptHandler()+0x1c8>
   1f600:	e3560000 	cmp	r6, #0
   1f604:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f608:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
   1f60c:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1f610:	e12fff13 	bx	r3
   1f614:	e3120b02 	tst	r2, #2048	; 0x800
   1f618:	0a000007 	beq	1f63c <CSerialDevice::InterruptHandler()+0x184>
   1f61c:	e59538b4 	ldr	r3, [r5, #2228]	; 0x8b4
   1f620:	e3530000 	cmp	r3, #0
   1f624:	0585c8b4 	streq	ip, [r5, #2228]	; 0x8b4
   1f628:	eaffffbb 	b	1f51c <CSerialDevice::InterruptHandler()+0x64>
   1f62c:	e59538b4 	ldr	r3, [r5, #2228]	; 0x8b4
   1f630:	e3530000 	cmp	r3, #0
   1f634:	0585c8b4 	streq	ip, [r5, #2228]	; 0x8b4
   1f638:	eaffffae 	b	1f4f8 <CSerialDevice::InterruptHandler()+0x40>
   1f63c:	e3120c01 	tst	r2, #256	; 0x100
   1f640:	0affffb5 	beq	1f51c <CSerialDevice::InterruptHandler()+0x64>
   1f644:	e59538b4 	ldr	r3, [r5, #2228]	; 0x8b4
   1f648:	e3530000 	cmp	r3, #0
   1f64c:	058578b4 	streq	r7, [r5, #2228]	; 0x8b4
   1f650:	eaffffb1 	b	1f51c <CSerialDevice::InterruptHandler()+0x64>
   1f654:	e2893001 	add	r3, r9, #1
   1f658:	e58430c8 	str	r3, [r4, #200]	; 0xc8
   1f65c:	e1d930d1 	ldrsb	r3, [r9, #1]
   1f660:	e3530000 	cmp	r3, #0
   1f664:	03a06001 	moveq	r6, #1
   1f668:	eaffffb4 	b	1f540 <CSerialDevice::InterruptHandler()+0x88>
   1f66c:	e59f2024 	ldr	r2, [pc, #36]	; 1f698 <CSerialDevice::InterruptHandler()+0x1e0>
   1f670:	e5923038 	ldr	r3, [r2, #56]	; 0x38
   1f674:	e3c33020 	bic	r3, r3, #32
   1f678:	e5823038 	str	r3, [r2, #56]	; 0x38
   1f67c:	eaffffda 	b	1f5ec <CSerialDevice::InterruptHandler()+0x134>
   1f680:	eb000c68 	bl	22828 <LeaveCritical>
   1f684:	e3560000 	cmp	r6, #0
   1f688:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f68c:	eaffffdd 	b	1f608 <CSerialDevice::InterruptHandler()+0x150>
   1f690:	eb000c37 	bl	22774 <EnterCritical>
   1f694:	eaffff8d 	b	1f4d0 <CSerialDevice::InterruptHandler()+0x18>
   1f698:	20201000 	.word	0x20201000
   1f69c:	000007ff 	.word	0x000007ff

0001f6a0 <CSerialDevice::InterruptStub(void*)>:
   1f6a0:	e92d4010 	push	{r4, lr}
   1f6a4:	e2504000 	subs	r4, r0, #0
   1f6a8:	0a000002 	beq	1f6b8 <CSerialDevice::InterruptStub(void*)+0x18>
   1f6ac:	e1a00004 	mov	r0, r4
   1f6b0:	e8bd4010 	pop	{r4, lr}
   1f6b4:	eaffff7f 	b	1f4b8 <CSerialDevice::InterruptHandler()>
   1f6b8:	e59f0014 	ldr	r0, [pc, #20]	; 1f6d4 <CSerialDevice::InterruptStub(void*)+0x34>
   1f6bc:	e59f2014 	ldr	r2, [pc, #20]	; 1f6d8 <CSerialDevice::InterruptStub(void*)+0x38>
   1f6c0:	e59f1014 	ldr	r1, [pc, #20]	; 1f6dc <CSerialDevice::InterruptStub(void*)+0x3c>
   1f6c4:	ebffebb3 	bl	1a598 <assertion_failed>
   1f6c8:	e1a00004 	mov	r0, r4
   1f6cc:	e8bd4010 	pop	{r4, lr}
   1f6d0:	eaffff78 	b	1f4b8 <CSerialDevice::InterruptHandler()>
   1f6d4:	000240a0 	.word	0x000240a0
   1f6d8:	0000022e 	.word	0x0000022e
   1f6dc:	0002926c 	.word	0x0002926c

0001f6e0 <CSerialDevice::~CSerialDevice()>:
   1f6e0:	e59f20a4 	ldr	r2, [pc, #164]	; 1f78c <CSerialDevice::~CSerialDevice()+0xac>
   1f6e4:	e92d4010 	push	{r4, lr}
   1f6e8:	e3a03000 	mov	r3, #0
   1f6ec:	e1a04000 	mov	r4, r0
   1f6f0:	e5802000 	str	r2, [r0]
   1f6f4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   1f6f8:	e59f2090 	ldr	r2, [pc, #144]	; 1f790 <CSerialDevice::~CSerialDevice()+0xb0>
   1f6fc:	e5823038 	str	r3, [r2, #56]	; 0x38
   1f700:	e5823030 	str	r3, [r2, #48]	; 0x30
   1f704:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   1f708:	e5d030a9 	ldrb	r3, [r0, #169]	; 0xa9
   1f70c:	e3530000 	cmp	r3, #0
   1f710:	0a000006 	beq	1f730 <CSerialDevice::~CSerialDevice()+0x50>
   1f714:	e59000a4 	ldr	r0, [r0, #164]	; 0xa4
   1f718:	e3500000 	cmp	r0, #0
   1f71c:	0a000014 	beq	1f774 <CSerialDevice::~CSerialDevice()+0x94>
   1f720:	e5d430a8 	ldrb	r3, [r4, #168]	; 0xa8
   1f724:	e3530000 	cmp	r3, #0
   1f728:	0a00000e 	beq	1f768 <CSerialDevice::~CSerialDevice()+0x88>
   1f72c:	ebfff2b3 	bl	1c200 <CInterruptSystem::DisconnectFIQ()>
   1f730:	e3a03000 	mov	r3, #0
   1f734:	e284007c 	add	r0, r4, #124	; 0x7c
   1f738:	e58430a4 	str	r3, [r4, #164]	; 0xa4
   1f73c:	ebffef2e 	bl	1b3fc <CGPIOPin::~CGPIOPin()>
   1f740:	e2840054 	add	r0, r4, #84	; 0x54
   1f744:	ebffef2c 	bl	1b3fc <CGPIOPin::~CGPIOPin()>
   1f748:	e284002c 	add	r0, r4, #44	; 0x2c
   1f74c:	ebffef2a 	bl	1b3fc <CGPIOPin::~CGPIOPin()>
   1f750:	e2840004 	add	r0, r4, #4
   1f754:	ebffef28 	bl	1b3fc <CGPIOPin::~CGPIOPin()>
   1f758:	e1a00004 	mov	r0, r4
   1f75c:	ebffed89 	bl	1ad88 <CDevice::~CDevice()>
   1f760:	e1a00004 	mov	r0, r4
   1f764:	e8bd8010 	pop	{r4, pc}
   1f768:	e3a01039 	mov	r1, #57	; 0x39
   1f76c:	ebfff31e 	bl	1c3ec <CInterruptSystem::DisconnectIRQ(unsigned int)>
   1f770:	eaffffee 	b	1f730 <CSerialDevice::~CSerialDevice()+0x50>
   1f774:	e59f0018 	ldr	r0, [pc, #24]	; 1f794 <CSerialDevice::~CSerialDevice()+0xb4>
   1f778:	e3a02079 	mov	r2, #121	; 0x79
   1f77c:	e59f1014 	ldr	r1, [pc, #20]	; 1f798 <CSerialDevice::~CSerialDevice()+0xb8>
   1f780:	ebffeb84 	bl	1a598 <assertion_failed>
   1f784:	e59400a4 	ldr	r0, [r4, #164]	; 0xa4
   1f788:	eaffffe4 	b	1f720 <CSerialDevice::~CSerialDevice()+0x40>
   1f78c:	00029258 	.word	0x00029258
   1f790:	20201000 	.word	0x20201000
   1f794:	000240d8 	.word	0x000240d8
   1f798:	0002926c 	.word	0x0002926c

0001f79c <CSerialDevice::~CSerialDevice()>:
   1f79c:	e92d4010 	push	{r4, lr}
   1f7a0:	e1a04000 	mov	r4, r0
   1f7a4:	ebffffcd 	bl	1f6e0 <CSerialDevice::~CSerialDevice()>
   1f7a8:	e1a00004 	mov	r0, r4
   1f7ac:	e59f1008 	ldr	r1, [pc, #8]	; 1f7bc <CSerialDevice::~CSerialDevice()+0x20>
   1f7b0:	eb000c4d 	bl	228ec <operator delete(void*, unsigned int)>
   1f7b4:	e1a00004 	mov	r0, r4
   1f7b8:	e8bd8010 	pop	{r4, pc}
   1f7bc:	000010d8 	.word	0x000010d8

0001f7c0 <CString::~CString()>:
   1f7c0:	e92d4010 	push	{r4, lr}
   1f7c4:	e1a04000 	mov	r4, r0
   1f7c8:	e5900004 	ldr	r0, [r0, #4]
   1f7cc:	e59f3014 	ldr	r3, [pc, #20]	; 1f7e8 <CString::~CString()+0x28>
   1f7d0:	e3500000 	cmp	r0, #0
   1f7d4:	e5843000 	str	r3, [r4]
   1f7d8:	0a000000 	beq	1f7e0 <CString::~CString()+0x20>
   1f7dc:	eb000c41 	bl	228e8 <operator delete[](void*)>
   1f7e0:	e1a00004 	mov	r0, r4
   1f7e4:	e8bd8010 	pop	{r4, pc}
   1f7e8:	00029334 	.word	0x00029334

0001f7ec <CString::~CString()>:
   1f7ec:	e92d4010 	push	{r4, lr}
   1f7f0:	e1a04000 	mov	r4, r0
   1f7f4:	e5900004 	ldr	r0, [r0, #4]
   1f7f8:	e59f3020 	ldr	r3, [pc, #32]	; 1f820 <CString::~CString()+0x34>
   1f7fc:	e3500000 	cmp	r0, #0
   1f800:	e5843000 	str	r3, [r4]
   1f804:	0a000000 	beq	1f80c <CString::~CString()+0x20>
   1f808:	eb000c36 	bl	228e8 <operator delete[](void*)>
   1f80c:	e1a00004 	mov	r0, r4
   1f810:	e3a01010 	mov	r1, #16
   1f814:	eb000c34 	bl	228ec <operator delete(void*, unsigned int)>
   1f818:	e1a00004 	mov	r0, r4
   1f81c:	e8bd8010 	pop	{r4, pc}
   1f820:	00029334 	.word	0x00029334

0001f824 <CString::ReserveSpace(unsigned int) [clone .part.0]>:
   1f824:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1f828:	e990002c 	ldmib	r0, {r2, r3, r5}
   1f82c:	e0455002 	sub	r5, r5, r2
   1f830:	e0851001 	add	r1, r5, r1
   1f834:	e2812001 	add	r2, r1, #1
   1f838:	e1520003 	cmp	r2, r3
   1f83c:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
   1f840:	e1a04000 	mov	r4, r0
   1f844:	e2816041 	add	r6, r1, #65	; 0x41
   1f848:	e1a00006 	mov	r0, r6
   1f84c:	eb000c23 	bl	228e0 <operator new[](unsigned int)>
   1f850:	e3a02000 	mov	r2, #0
   1f854:	e594300c 	ldr	r3, [r4, #12]
   1f858:	e1a07000 	mov	r7, r0
   1f85c:	e5c32000 	strb	r2, [r3]
   1f860:	e5941004 	ldr	r1, [r4, #4]
   1f864:	eb00084c 	bl	2199c <strcpy>
   1f868:	e5940004 	ldr	r0, [r4, #4]
   1f86c:	e3500000 	cmp	r0, #0
   1f870:	0a000000 	beq	1f878 <CString::ReserveSpace(unsigned int) [clone .part.0]+0x54>
   1f874:	eb000c1b 	bl	228e8 <operator delete[](void*)>
   1f878:	e0875005 	add	r5, r7, r5
   1f87c:	e584500c 	str	r5, [r4, #12]
   1f880:	e5847004 	str	r7, [r4, #4]
   1f884:	e5846008 	str	r6, [r4, #8]
   1f888:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0001f88c <CString::CString()>:
   1f88c:	e3a02000 	mov	r2, #0
   1f890:	e59f1008 	ldr	r1, [pc, #8]	; 1f8a0 <CString::CString()+0x14>
   1f894:	e5802008 	str	r2, [r0, #8]
   1f898:	e8800006 	stm	r0, {r1, r2}
   1f89c:	e12fff1e 	bx	lr
   1f8a0:	00029334 	.word	0x00029334

0001f8a4 <CString::CString(char const*)>:
   1f8a4:	e92d4070 	push	{r4, r5, r6, lr}
   1f8a8:	e1a04000 	mov	r4, r0
   1f8ac:	e59f302c 	ldr	r3, [pc, #44]	; 1f8e0 <CString::CString(char const*)+0x3c>
   1f8b0:	e1a00001 	mov	r0, r1
   1f8b4:	e5843000 	str	r3, [r4]
   1f8b8:	e1a05001 	mov	r5, r1
   1f8bc:	eb0007b8 	bl	217a4 <strlen>
   1f8c0:	e2800001 	add	r0, r0, #1
   1f8c4:	e5840008 	str	r0, [r4, #8]
   1f8c8:	eb000c04 	bl	228e0 <operator new[](unsigned int)>
   1f8cc:	e1a01005 	mov	r1, r5
   1f8d0:	e5840004 	str	r0, [r4, #4]
   1f8d4:	eb000830 	bl	2199c <strcpy>
   1f8d8:	e1a00004 	mov	r0, r4
   1f8dc:	e8bd8070 	pop	{r4, r5, r6, pc}
   1f8e0:	00029334 	.word	0x00029334

0001f8e4 <CString::operator char const*() const>:
   1f8e4:	e5900004 	ldr	r0, [r0, #4]
   1f8e8:	e59f3008 	ldr	r3, [pc, #8]	; 1f8f8 <CString::operator char const*() const+0x14>
   1f8ec:	e3500000 	cmp	r0, #0
   1f8f0:	01a00003 	moveq	r0, r3
   1f8f4:	e12fff1e 	bx	lr
   1f8f8:	00025c98 	.word	0x00025c98

0001f8fc <CString::operator=(char const*)>:
   1f8fc:	e92d4070 	push	{r4, r5, r6, lr}
   1f900:	e1a04000 	mov	r4, r0
   1f904:	e5900004 	ldr	r0, [r0, #4]
   1f908:	e1a05001 	mov	r5, r1
   1f90c:	e3500000 	cmp	r0, #0
   1f910:	0a000000 	beq	1f918 <CString::operator=(char const*)+0x1c>
   1f914:	eb000bf3 	bl	228e8 <operator delete[](void*)>
   1f918:	e1a00005 	mov	r0, r5
   1f91c:	eb0007a0 	bl	217a4 <strlen>
   1f920:	e2800001 	add	r0, r0, #1
   1f924:	e5840008 	str	r0, [r4, #8]
   1f928:	eb000bec 	bl	228e0 <operator new[](unsigned int)>
   1f92c:	e1a01005 	mov	r1, r5
   1f930:	e5840004 	str	r0, [r4, #4]
   1f934:	eb000818 	bl	2199c <strcpy>
   1f938:	e5940004 	ldr	r0, [r4, #4]
   1f93c:	e8bd8070 	pop	{r4, r5, r6, pc}

0001f940 <CString::operator=(CString const&)>:
   1f940:	e92d4070 	push	{r4, r5, r6, lr}
   1f944:	e1a04000 	mov	r4, r0
   1f948:	e5900004 	ldr	r0, [r0, #4]
   1f94c:	e1a06001 	mov	r6, r1
   1f950:	e3500000 	cmp	r0, #0
   1f954:	0a000000 	beq	1f95c <CString::operator=(CString const&)+0x1c>
   1f958:	eb000be2 	bl	228e8 <operator delete[](void*)>
   1f95c:	e5960004 	ldr	r0, [r6, #4]
   1f960:	e59f5030 	ldr	r5, [pc, #48]	; 1f998 <CString::operator=(CString const&)+0x58>
   1f964:	e3500000 	cmp	r0, #0
   1f968:	01a00005 	moveq	r0, r5
   1f96c:	eb00078c 	bl	217a4 <strlen>
   1f970:	e2800001 	add	r0, r0, #1
   1f974:	e5840008 	str	r0, [r4, #8]
   1f978:	eb000bd8 	bl	228e0 <operator new[](unsigned int)>
   1f97c:	e5840004 	str	r0, [r4, #4]
   1f980:	e5961004 	ldr	r1, [r6, #4]
   1f984:	e3510000 	cmp	r1, #0
   1f988:	01a01005 	moveq	r1, r5
   1f98c:	eb000802 	bl	2199c <strcpy>
   1f990:	e1a00004 	mov	r0, r4
   1f994:	e8bd8070 	pop	{r4, r5, r6, pc}
   1f998:	00025c98 	.word	0x00025c98

0001f99c <CString::GetLength() const>:
   1f99c:	e5900004 	ldr	r0, [r0, #4]
   1f9a0:	e3500000 	cmp	r0, #0
   1f9a4:	012fff1e 	bxeq	lr
   1f9a8:	ea00077d 	b	217a4 <strlen>

0001f9ac <CString::Append(char const*)>:
   1f9ac:	e92d4070 	push	{r4, r5, r6, lr}
   1f9b0:	e3a03001 	mov	r3, #1
   1f9b4:	e1a04000 	mov	r4, r0
   1f9b8:	e5900004 	ldr	r0, [r0, #4]
   1f9bc:	e1a06001 	mov	r6, r1
   1f9c0:	e3500000 	cmp	r0, #0
   1f9c4:	e5843008 	str	r3, [r4, #8]
   1f9c8:	0a000003 	beq	1f9dc <CString::Append(char const*)+0x30>
   1f9cc:	eb000774 	bl	217a4 <strlen>
   1f9d0:	e5943008 	ldr	r3, [r4, #8]
   1f9d4:	e0830000 	add	r0, r3, r0
   1f9d8:	e5840008 	str	r0, [r4, #8]
   1f9dc:	e1a00006 	mov	r0, r6
   1f9e0:	eb00076f 	bl	217a4 <strlen>
   1f9e4:	e5943008 	ldr	r3, [r4, #8]
   1f9e8:	e0800003 	add	r0, r0, r3
   1f9ec:	e5840008 	str	r0, [r4, #8]
   1f9f0:	eb000bba 	bl	228e0 <operator new[](unsigned int)>
   1f9f4:	e5941004 	ldr	r1, [r4, #4]
   1f9f8:	e1a05000 	mov	r5, r0
   1f9fc:	e3510000 	cmp	r1, #0
   1fa00:	05c01000 	strbeq	r1, [r0]
   1fa04:	0a000004 	beq	1fa1c <CString::Append(char const*)+0x70>
   1fa08:	eb0007e3 	bl	2199c <strcpy>
   1fa0c:	e5940004 	ldr	r0, [r4, #4]
   1fa10:	e3500000 	cmp	r0, #0
   1fa14:	0a000000 	beq	1fa1c <CString::Append(char const*)+0x70>
   1fa18:	eb000bb2 	bl	228e8 <operator delete[](void*)>
   1fa1c:	e1a01006 	mov	r1, r6
   1fa20:	e1a00005 	mov	r0, r5
   1fa24:	eb0007fa 	bl	21a14 <strcat>
   1fa28:	e5845004 	str	r5, [r4, #4]
   1fa2c:	e8bd8070 	pop	{r4, r5, r6, pc}

0001fa30 <CString::Compare(char const*) const>:
   1fa30:	e5900004 	ldr	r0, [r0, #4]
   1fa34:	ea000764 	b	217cc <strcmp>

0001fa38 <CString::Find(char) const>:
   1fa38:	e5902004 	ldr	r2, [r0, #4]
   1fa3c:	e1d230d0 	ldrsb	r3, [r2]
   1fa40:	e3530000 	cmp	r3, #0
   1fa44:	0a000009 	beq	1fa70 <CString::Find(char) const+0x38>
   1fa48:	e1510003 	cmp	r1, r3
   1fa4c:	e3a00000 	mov	r0, #0
   1fa50:	1a000002 	bne	1fa60 <CString::Find(char) const+0x28>
   1fa54:	ea000007 	b	1fa78 <CString::Find(char) const+0x40>
   1fa58:	e1530001 	cmp	r3, r1
   1fa5c:	012fff1e 	bxeq	lr
   1fa60:	e1f230d1 	ldrsb	r3, [r2, #1]!
   1fa64:	e2800001 	add	r0, r0, #1
   1fa68:	e3530000 	cmp	r3, #0
   1fa6c:	1afffff9 	bne	1fa58 <CString::Find(char) const+0x20>
   1fa70:	e3e00000 	mvn	r0, #0
   1fa74:	e12fff1e 	bx	lr
   1fa78:	e12fff1e 	bx	lr

0001fa7c <CString::PutChar(char, unsigned int)>:
   1fa7c:	e92d4070 	push	{r4, r5, r6, lr}
   1fa80:	e2524000 	subs	r4, r2, #0
   1fa84:	08bd8070 	popeq	{r4, r5, r6, pc}
   1fa88:	e1a06001 	mov	r6, r1
   1fa8c:	e1a01004 	mov	r1, r4
   1fa90:	e1a05000 	mov	r5, r0
   1fa94:	ebffff62 	bl	1f824 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   1fa98:	e2443001 	sub	r3, r4, #1
   1fa9c:	e595200c 	ldr	r2, [r5, #12]
   1faa0:	e2433001 	sub	r3, r3, #1
   1faa4:	e2820001 	add	r0, r2, #1
   1faa8:	e3730001 	cmn	r3, #1
   1faac:	e585000c 	str	r0, [r5, #12]
   1fab0:	e5c26000 	strb	r6, [r2]
   1fab4:	1afffff8 	bne	1fa9c <CString::PutChar(char, unsigned int)+0x20>
   1fab8:	e8bd8070 	pop	{r4, r5, r6, pc}

0001fabc <CString::PutString(char const*)>:
   1fabc:	e92d4070 	push	{r4, r5, r6, lr}
   1fac0:	e1a04000 	mov	r4, r0
   1fac4:	e1a00001 	mov	r0, r1
   1fac8:	e1a05001 	mov	r5, r1
   1facc:	eb000734 	bl	217a4 <strlen>
   1fad0:	e2506000 	subs	r6, r0, #0
   1fad4:	0a000002 	beq	1fae4 <CString::PutString(char const*)+0x28>
   1fad8:	e1a01006 	mov	r1, r6
   1fadc:	e1a00004 	mov	r0, r4
   1fae0:	ebffff4f 	bl	1f824 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   1fae4:	e1a01005 	mov	r1, r5
   1fae8:	e594000c 	ldr	r0, [r4, #12]
   1faec:	eb0007aa 	bl	2199c <strcpy>
   1faf0:	e594100c 	ldr	r1, [r4, #12]
   1faf4:	e0811006 	add	r1, r1, r6
   1faf8:	e584100c 	str	r1, [r4, #12]
   1fafc:	e8bd8070 	pop	{r4, r5, r6, pc}

0001fb00 <CString::Replace(char const*, char const*)>:
   1fb00:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fb04:	e1d180d0 	ldrsb	r8, [r1]
   1fb08:	e24dd014 	sub	sp, sp, #20
   1fb0c:	e3580000 	cmp	r8, #0
   1fb10:	1a000002 	bne	1fb20 <CString::Replace(char const*, char const*)+0x20>
   1fb14:	e1a00008 	mov	r0, r8
   1fb18:	e28dd014 	add	sp, sp, #20
   1fb1c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fb20:	e1a0a000 	mov	sl, r0
   1fb24:	e1a07001 	mov	r7, r1
   1fb28:	e5901004 	ldr	r1, [r0, #4]
   1fb2c:	e1a0000d 	mov	r0, sp
   1fb30:	e1a09002 	mov	r9, r2
   1fb34:	ebffff5a 	bl	1f8a4 <CString::CString(char const*)>
   1fb38:	e59a0004 	ldr	r0, [sl, #4]
   1fb3c:	e3500000 	cmp	r0, #0
   1fb40:	0a000000 	beq	1fb48 <CString::Replace(char const*, char const*)+0x48>
   1fb44:	eb000b67 	bl	228e8 <operator delete[](void*)>
   1fb48:	e3a00040 	mov	r0, #64	; 0x40
   1fb4c:	e58a0008 	str	r0, [sl, #8]
   1fb50:	eb000b62 	bl	228e0 <operator new[](unsigned int)>
   1fb54:	e3a08000 	mov	r8, #0
   1fb58:	e3a06001 	mov	r6, #1
   1fb5c:	e59d4004 	ldr	r4, [sp, #4]
   1fb60:	e58a0004 	str	r0, [sl, #4]
   1fb64:	e58a000c 	str	r0, [sl, #12]
   1fb68:	e1d710d0 	ldrsb	r1, [r7]
   1fb6c:	e1a00004 	mov	r0, r4
   1fb70:	eb0007b8 	bl	21a58 <strchr>
   1fb74:	e2505000 	subs	r5, r0, #0
   1fb78:	0a00002d 	beq	1fc34 <CString::Replace(char const*, char const*)+0x134>
   1fb7c:	e1540005 	cmp	r4, r5
   1fb80:	2a000039 	bcs	1fc6c <CString::Replace(char const*, char const*)+0x16c>
   1fb84:	e1a01006 	mov	r1, r6
   1fb88:	e1a0000a 	mov	r0, sl
   1fb8c:	e0d4b0d1 	ldrsb	fp, [r4], #1
   1fb90:	ebffff23 	bl	1f824 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   1fb94:	e59a300c 	ldr	r3, [sl, #12]
   1fb98:	e1550004 	cmp	r5, r4
   1fb9c:	e2832001 	add	r2, r3, #1
   1fba0:	e58a200c 	str	r2, [sl, #12]
   1fba4:	e5c3b000 	strb	fp, [r3]
   1fba8:	1afffff5 	bne	1fb84 <CString::Replace(char const*, char const*)+0x84>
   1fbac:	e1a0c005 	mov	ip, r5
   1fbb0:	e2854001 	add	r4, r5, #1
   1fbb4:	e1d730d1 	ldrsb	r3, [r7, #1]
   1fbb8:	e2871001 	add	r1, r7, #1
   1fbbc:	e3530000 	cmp	r3, #0
   1fbc0:	0a00000c 	beq	1fbf8 <CString::Replace(char const*, char const*)+0xf8>
   1fbc4:	e1d520d1 	ldrsb	r2, [r5, #1]
   1fbc8:	e1520003 	cmp	r2, r3
   1fbcc:	1a00000e 	bne	1fc0c <CString::Replace(char const*, char const*)+0x10c>
   1fbd0:	e2853002 	add	r3, r5, #2
   1fbd4:	ea000003 	b	1fbe8 <CString::Replace(char const*, char const*)+0xe8>
   1fbd8:	e1d400d0 	ldrsb	r0, [r4]
   1fbdc:	e2833001 	add	r3, r3, #1
   1fbe0:	e1500002 	cmp	r0, r2
   1fbe4:	1a000008 	bne	1fc0c <CString::Replace(char const*, char const*)+0x10c>
   1fbe8:	e1f120d1 	ldrsb	r2, [r1, #1]!
   1fbec:	e1a04003 	mov	r4, r3
   1fbf0:	e3520000 	cmp	r2, #0
   1fbf4:	1afffff7 	bne	1fbd8 <CString::Replace(char const*, char const*)+0xd8>
   1fbf8:	e1a01009 	mov	r1, r9
   1fbfc:	e1a0000a 	mov	r0, sl
   1fc00:	e2888001 	add	r8, r8, #1
   1fc04:	ebffffac 	bl	1fabc <CString::PutString(char const*)>
   1fc08:	eaffffd6 	b	1fb68 <CString::Replace(char const*, char const*)+0x68>
   1fc0c:	e1a01006 	mov	r1, r6
   1fc10:	e1a0000a 	mov	r0, sl
   1fc14:	e1dc50d0 	ldrsb	r5, [ip]
   1fc18:	e28c4001 	add	r4, ip, #1
   1fc1c:	ebffff00 	bl	1f824 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   1fc20:	e59a300c 	ldr	r3, [sl, #12]
   1fc24:	e2832001 	add	r2, r3, #1
   1fc28:	e58a200c 	str	r2, [sl, #12]
   1fc2c:	e5c35000 	strb	r5, [r3]
   1fc30:	eaffffcc 	b	1fb68 <CString::Replace(char const*, char const*)+0x68>
   1fc34:	e1a0000a 	mov	r0, sl
   1fc38:	e1a01004 	mov	r1, r4
   1fc3c:	ebffff9e 	bl	1fabc <CString::PutString(char const*)>
   1fc40:	e59a200c 	ldr	r2, [sl, #12]
   1fc44:	e59f302c 	ldr	r3, [pc, #44]	; 1fc78 <CString::Replace(char const*, char const*)+0x178>
   1fc48:	e5c25000 	strb	r5, [r2]
   1fc4c:	e59d0004 	ldr	r0, [sp, #4]
   1fc50:	e58d3000 	str	r3, [sp]
   1fc54:	e3500000 	cmp	r0, #0
   1fc58:	0affffad 	beq	1fb14 <CString::Replace(char const*, char const*)+0x14>
   1fc5c:	eb000b21 	bl	228e8 <operator delete[](void*)>
   1fc60:	e1a00008 	mov	r0, r8
   1fc64:	e28dd014 	add	sp, sp, #20
   1fc68:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fc6c:	e1a0c004 	mov	ip, r4
   1fc70:	e2854001 	add	r4, r5, #1
   1fc74:	eaffffce 	b	1fbb4 <CString::Replace(char const*, char const*)+0xb4>
   1fc78:	00029334 	.word	0x00029334

0001fc7c <CString::ReserveSpace(unsigned int)>:
   1fc7c:	e3510000 	cmp	r1, #0
   1fc80:	012fff1e 	bxeq	lr
   1fc84:	eafffee6 	b	1f824 <CString::ReserveSpace(unsigned int) [clone .part.0]>

0001fc88 <CString::ntoa(char*, unsigned long, unsigned int, bool)>:
   1fc88:	e1510002 	cmp	r1, r2
   1fc8c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1fc90:	e1a05001 	mov	r5, r1
   1fc94:	e1a07002 	mov	r7, r2
   1fc98:	e1a09000 	mov	r9, r0
   1fc9c:	e1a08003 	mov	r8, r3
   1fca0:	23a0a001 	movcs	sl, #1
   1fca4:	3a000022 	bcc	1fd34 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0xac>
   1fca8:	e00a0a97 	mul	sl, r7, sl
   1fcac:	e1a00005 	mov	r0, r5
   1fcb0:	e1a0100a 	mov	r1, sl
   1fcb4:	eb00105c 	bl	23e2c <__aeabi_uidiv>
   1fcb8:	e1500007 	cmp	r0, r7
   1fcbc:	e1a04000 	mov	r4, r0
   1fcc0:	2afffff8 	bcs	1fca8 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x20>
   1fcc4:	e3580000 	cmp	r8, #0
   1fcc8:	13a08037 	movne	r8, #55	; 0x37
   1fccc:	03a08057 	moveq	r8, #87	; 0x57
   1fcd0:	e1a06009 	mov	r6, r9
   1fcd4:	ea000003 	b	1fce8 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x60>
   1fcd8:	e1a0100a 	mov	r1, sl
   1fcdc:	e1a00005 	mov	r0, r5
   1fce0:	eb001051 	bl	23e2c <__aeabi_uidiv>
   1fce4:	e1a04000 	mov	r4, r0
   1fce8:	e1a00005 	mov	r0, r5
   1fcec:	e1a0100a 	mov	r1, sl
   1fcf0:	eb00108a 	bl	23f20 <__aeabi_uidivmod>
   1fcf4:	e3540009 	cmp	r4, #9
   1fcf8:	e2843030 	add	r3, r4, #48	; 0x30
   1fcfc:	80884004 	addhi	r4, r8, r4
   1fd00:	96af4073 	sxtbls	r4, r3
   1fd04:	86af4074 	sxtbhi	r4, r4
   1fd08:	e2866001 	add	r6, r6, #1
   1fd0c:	e1a0000a 	mov	r0, sl
   1fd10:	e1a05001 	mov	r5, r1
   1fd14:	e5464001 	strb	r4, [r6, #-1]
   1fd18:	e1a01007 	mov	r1, r7
   1fd1c:	eb001042 	bl	23e2c <__aeabi_uidiv>
   1fd20:	e250a000 	subs	sl, r0, #0
   1fd24:	1affffeb 	bne	1fcd8 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x50>
   1fd28:	e5c6a000 	strb	sl, [r6]
   1fd2c:	e1a00009 	mov	r0, r9
   1fd30:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1fd34:	e1a04001 	mov	r4, r1
   1fd38:	e3a0a001 	mov	sl, #1
   1fd3c:	eaffffe0 	b	1fcc4 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x3c>

0001fd40 <CString::ftoa(char*, double, unsigned int)>:
   1fd40:	eeb50bc0 	vcmpe.f64	d0, #0.0
   1fd44:	eef1fa10 	vmrs	APSR_nzcv, fpscr
   1fd48:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fd4c:	ed9f7b95 	vldr	d7, [pc, #596]	; 1ffa8 <CString::ftoa(char*, double, unsigned int)+0x268>
   1fd50:	ed2d8b02 	vpush	{d8}
   1fd54:	eeb08b40 	vmov.f64	d8, d0
   1fd58:	4eb18b40 	vnegmi.f64	d8, d0
   1fd5c:	43a0302d 	movmi	r3, #45	; 0x2d
   1fd60:	eeb48bc7 	vcmpe.f64	d8, d7
   1fd64:	45c03000 	strbmi	r3, [r0]
   1fd68:	4280b001 	addmi	fp, r0, #1
   1fd6c:	51a0b000 	movpl	fp, r0
   1fd70:	eef1fa10 	vmrs	APSR_nzcv, fpscr
   1fd74:	e24dd01c 	sub	sp, sp, #28
   1fd78:	e1a0a000 	mov	sl, r0
   1fd7c:	e58d1004 	str	r1, [sp, #4]
   1fd80:	ca000079 	bgt	1ff6c <CString::ftoa(char*, double, unsigned int)+0x22c>
   1fd84:	eefc7bc8 	vcvt.u32.f64	s15, d8
   1fd88:	ee177a90 	vmov	r7, s15
   1fd8c:	e3570009 	cmp	r7, #9
   1fd90:	83a04001 	movhi	r4, #1
   1fd94:	9a00007b 	bls	1ff88 <CString::ftoa(char*, double, unsigned int)+0x248>
   1fd98:	e0844104 	add	r4, r4, r4, lsl #2
   1fd9c:	e1a04084 	lsl	r4, r4, #1
   1fda0:	e1a01004 	mov	r1, r4
   1fda4:	e1a00007 	mov	r0, r7
   1fda8:	eb00101f 	bl	23e2c <__aeabi_uidiv>
   1fdac:	e3500009 	cmp	r0, #9
   1fdb0:	e1a05000 	mov	r5, r0
   1fdb4:	8afffff7 	bhi	1fd98 <CString::ftoa(char*, double, unsigned int)+0x58>
   1fdb8:	e1a0600b 	mov	r6, fp
   1fdbc:	e1a09007 	mov	r9, r7
   1fdc0:	e59f81f0 	ldr	r8, [pc, #496]	; 1ffb8 <CString::ftoa(char*, double, unsigned int)+0x278>
   1fdc4:	ea000003 	b	1fdd8 <CString::ftoa(char*, double, unsigned int)+0x98>
   1fdc8:	e1a01004 	mov	r1, r4
   1fdcc:	e1a00009 	mov	r0, r9
   1fdd0:	eb001015 	bl	23e2c <__aeabi_uidiv>
   1fdd4:	e1a05000 	mov	r5, r0
   1fdd8:	e1a00009 	mov	r0, r9
   1fddc:	e1a01004 	mov	r1, r4
   1fde0:	eb00104e 	bl	23f20 <__aeabi_uidivmod>
   1fde4:	e0843498 	umull	r3, r4, r8, r4
   1fde8:	e3550009 	cmp	r5, #9
   1fdec:	e2852030 	add	r2, r5, #48	; 0x30
   1fdf0:	82855057 	addhi	r5, r5, #87	; 0x57
   1fdf4:	96af5072 	sxtbls	r5, r2
   1fdf8:	86af5075 	sxtbhi	r5, r5
   1fdfc:	e2866001 	add	r6, r6, #1
   1fe00:	e1b041a4 	lsrs	r4, r4, #3
   1fe04:	e1a09001 	mov	r9, r1
   1fe08:	e5465001 	strb	r5, [r6, #-1]
   1fe0c:	1affffed 	bne	1fdc8 <CString::ftoa(char*, double, unsigned int)+0x88>
   1fe10:	e59d3004 	ldr	r3, [sp, #4]
   1fe14:	e5c64000 	strb	r4, [r6]
   1fe18:	e3530000 	cmp	r3, #0
   1fe1c:	1a000003 	bne	1fe30 <CString::ftoa(char*, double, unsigned int)+0xf0>
   1fe20:	e1a0000a 	mov	r0, sl
   1fe24:	e28dd01c 	add	sp, sp, #28
   1fe28:	ecbd8b02 	vpop	{d8}
   1fe2c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fe30:	e1a0000b 	mov	r0, fp
   1fe34:	eb00065a 	bl	217a4 <strlen>
   1fe38:	e59d3004 	ldr	r3, [sp, #4]
   1fe3c:	e08b2000 	add	r2, fp, r0
   1fe40:	e3530009 	cmp	r3, #9
   1fe44:	31a09003 	movcc	r9, r3
   1fe48:	23a09009 	movcs	r9, #9
   1fe4c:	e3a0302e 	mov	r3, #46	; 0x2e
   1fe50:	e3590001 	cmp	r9, #1
   1fe54:	e7cb3000 	strb	r3, [fp, r0]
   1fe58:	e58d2004 	str	r2, [sp, #4]
   1fe5c:	e282b001 	add	fp, r2, #1
   1fe60:	0a00004e 	beq	1ffa0 <CString::ftoa(char*, double, unsigned int)+0x260>
   1fe64:	e3a02002 	mov	r2, #2
   1fe68:	e3a0300a 	mov	r3, #10
   1fe6c:	e2822001 	add	r2, r2, #1
   1fe70:	e0833103 	add	r3, r3, r3, lsl #2
   1fe74:	e1520009 	cmp	r2, r9
   1fe78:	e1a03083 	lsl	r3, r3, #1
   1fe7c:	9afffffa 	bls	1fe6c <CString::ftoa(char*, double, unsigned int)+0x12c>
   1fe80:	ee073a90 	vmov	s15, r3
   1fe84:	eeb87b67 	vcvt.f64.u32	d7, s15
   1fe88:	ee067a90 	vmov	s13, r7
   1fe8c:	eeb86b66 	vcvt.f64.u32	d6, s13
   1fe90:	ee386b46 	vsub.f64	d6, d8, d6
   1fe94:	ee267b07 	vmul.f64	d7, d6, d7
   1fe98:	eefc7bc7 	vcvt.u32.f64	s15, d7
   1fe9c:	ee178a90 	vmov	r8, s15
   1fea0:	e3580009 	cmp	r8, #9
   1fea4:	83a04001 	movhi	r4, #1
   1fea8:	9a000039 	bls	1ff94 <CString::ftoa(char*, double, unsigned int)+0x254>
   1feac:	e0844104 	add	r4, r4, r4, lsl #2
   1feb0:	e1a04084 	lsl	r4, r4, #1
   1feb4:	e1a01004 	mov	r1, r4
   1feb8:	e1a00008 	mov	r0, r8
   1febc:	eb000fda 	bl	23e2c <__aeabi_uidiv>
   1fec0:	e3500009 	cmp	r0, #9
   1fec4:	e1a05000 	mov	r5, r0
   1fec8:	8afffff7 	bhi	1feac <CString::ftoa(char*, double, unsigned int)+0x16c>
   1fecc:	e28d600c 	add	r6, sp, #12
   1fed0:	e59f70e0 	ldr	r7, [pc, #224]	; 1ffb8 <CString::ftoa(char*, double, unsigned int)+0x278>
   1fed4:	ea000003 	b	1fee8 <CString::ftoa(char*, double, unsigned int)+0x1a8>
   1fed8:	e1a01004 	mov	r1, r4
   1fedc:	e1a00008 	mov	r0, r8
   1fee0:	eb000fd1 	bl	23e2c <__aeabi_uidiv>
   1fee4:	e1a05000 	mov	r5, r0
   1fee8:	e1a00008 	mov	r0, r8
   1feec:	e1a01004 	mov	r1, r4
   1fef0:	eb00100a 	bl	23f20 <__aeabi_uidivmod>
   1fef4:	e0843497 	umull	r3, r4, r7, r4
   1fef8:	e3550009 	cmp	r5, #9
   1fefc:	e2852030 	add	r2, r5, #48	; 0x30
   1ff00:	82855057 	addhi	r5, r5, #87	; 0x57
   1ff04:	96af5072 	sxtbls	r5, r2
   1ff08:	86af5075 	sxtbhi	r5, r5
   1ff0c:	e2866001 	add	r6, r6, #1
   1ff10:	e1b041a4 	lsrs	r4, r4, #3
   1ff14:	e1a08001 	mov	r8, r1
   1ff18:	e5465001 	strb	r5, [r6, #-1]
   1ff1c:	1affffed 	bne	1fed8 <CString::ftoa(char*, double, unsigned int)+0x198>
   1ff20:	e28d000c 	add	r0, sp, #12
   1ff24:	e5c64000 	strb	r4, [r6]
   1ff28:	eb00061d 	bl	217a4 <strlen>
   1ff2c:	e0599000 	subs	r9, r9, r0
   1ff30:	0a000006 	beq	1ff50 <CString::ftoa(char*, double, unsigned int)+0x210>
   1ff34:	e3a02030 	mov	r2, #48	; 0x30
   1ff38:	e59d8004 	ldr	r8, [sp, #4]
   1ff3c:	e0883009 	add	r3, r8, r9
   1ff40:	e5e82001 	strb	r2, [r8, #1]!
   1ff44:	e1580003 	cmp	r8, r3
   1ff48:	1afffffc 	bne	1ff40 <CString::ftoa(char*, double, unsigned int)+0x200>
   1ff4c:	e08bb009 	add	fp, fp, r9
   1ff50:	e28d100c 	add	r1, sp, #12
   1ff54:	e1a0000b 	mov	r0, fp
   1ff58:	eb00068f 	bl	2199c <strcpy>
   1ff5c:	e1a0000a 	mov	r0, sl
   1ff60:	e28dd01c 	add	sp, sp, #28
   1ff64:	ecbd8b02 	vpop	{d8}
   1ff68:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ff6c:	e1a0000b 	mov	r0, fp
   1ff70:	e59f1044 	ldr	r1, [pc, #68]	; 1ffbc <CString::ftoa(char*, double, unsigned int)+0x27c>
   1ff74:	eb000688 	bl	2199c <strcpy>
   1ff78:	e1a0000a 	mov	r0, sl
   1ff7c:	e28dd01c 	add	sp, sp, #28
   1ff80:	ecbd8b02 	vpop	{d8}
   1ff84:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ff88:	ee175a90 	vmov	r5, s15
   1ff8c:	e3a04001 	mov	r4, #1
   1ff90:	eaffff88 	b	1fdb8 <CString::ftoa(char*, double, unsigned int)+0x78>
   1ff94:	ee175a90 	vmov	r5, s15
   1ff98:	e3a04001 	mov	r4, #1
   1ff9c:	eaffffca 	b	1fecc <CString::ftoa(char*, double, unsigned int)+0x18c>
   1ffa0:	ed9f7b02 	vldr	d7, [pc, #8]	; 1ffb0 <CString::ftoa(char*, double, unsigned int)+0x270>
   1ffa4:	eaffffb7 	b	1fe88 <CString::ftoa(char*, double, unsigned int)+0x148>
   1ffa8:	ffe00000 	.word	0xffe00000
   1ffac:	41efffff 	.word	0x41efffff
   1ffb0:	00000000 	.word	0x00000000
   1ffb4:	40240000 	.word	0x40240000
   1ffb8:	cccccccd 	.word	0xcccccccd
   1ffbc:	0002933c 	.word	0x0002933c

0001ffc0 <CString::FormatV(char const*, std::__va_list)>:
   1ffc0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ffc4:	e1a0b000 	mov	fp, r0
   1ffc8:	e5900004 	ldr	r0, [r0, #4]
   1ffcc:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   1ffd0:	e3500000 	cmp	r0, #0
   1ffd4:	e1a05001 	mov	r5, r1
   1ffd8:	e58d2000 	str	r2, [sp]
   1ffdc:	0a000000 	beq	1ffe4 <CString::FormatV(char const*, std::__va_list)+0x24>
   1ffe0:	eb000a40 	bl	228e8 <operator delete[](void*)>
   1ffe4:	e3a00040 	mov	r0, #64	; 0x40
   1ffe8:	e58b0008 	str	r0, [fp, #8]
   1ffec:	eb000a3b 	bl	228e0 <operator new[](unsigned int)>
   1fff0:	e58b0004 	str	r0, [fp, #4]
   1fff4:	e58b000c 	str	r0, [fp, #12]
   1fff8:	e1d540d0 	ldrsb	r4, [r5]
   1fffc:	e3540000 	cmp	r4, #0
   20000:	0a0000a2 	beq	20290 <CString::FormatV(char const*, std::__va_list)+0x2d0>
   20004:	e3540025 	cmp	r4, #37	; 0x25
   20008:	13a01001 	movne	r1, #1
   2000c:	11a0000b 	movne	r0, fp
   20010:	1a000152 	bne	20560 <CString::FormatV(char const*, std::__va_list)+0x5a0>
   20014:	e1d560d1 	ldrsb	r6, [r5, #1]
   20018:	e3560025 	cmp	r6, #37	; 0x25
   2001c:	0a000165 	beq	205b8 <CString::FormatV(char const*, std::__va_list)+0x5f8>
   20020:	e356002d 	cmp	r6, #45	; 0x2d
   20024:	03a03001 	moveq	r3, #1
   20028:	13a03000 	movne	r3, #0
   2002c:	01d560d2 	ldrsbeq	r6, [r5, #2]
   20030:	158d3004 	strne	r3, [sp, #4]
   20034:	058d3004 	streq	r3, [sp, #4]
   20038:	02855002 	addeq	r5, r5, #2
   2003c:	12855001 	addne	r5, r5, #1
   20040:	e3560030 	cmp	r6, #48	; 0x30
   20044:	03a03001 	moveq	r3, #1
   20048:	13a03000 	movne	r3, #0
   2004c:	01d560d1 	ldrsbeq	r6, [r5, #1]
   20050:	058d3008 	streq	r3, [sp, #8]
   20054:	00855003 	addeq	r5, r5, r3
   20058:	158d3008 	strne	r3, [sp, #8]
   2005c:	e2463030 	sub	r3, r6, #48	; 0x30
   20060:	e6ef3073 	uxtb	r3, r3
   20064:	e3530009 	cmp	r3, #9
   20068:	e3a04000 	mov	r4, #0
   2006c:	8a000007 	bhi	20090 <CString::FormatV(char const*, std::__va_list)+0xd0>
   20070:	e0844104 	add	r4, r4, r4, lsl #2
   20074:	e0864084 	add	r4, r6, r4, lsl #1
   20078:	e1f560d1 	ldrsb	r6, [r5, #1]!
   2007c:	e2444030 	sub	r4, r4, #48	; 0x30
   20080:	e2463030 	sub	r3, r6, #48	; 0x30
   20084:	e6ef3073 	uxtb	r3, r3
   20088:	e3530009 	cmp	r3, #9
   2008c:	9afffff7 	bls	20070 <CString::FormatV(char const*, std::__va_list)+0xb0>
   20090:	e356002e 	cmp	r6, #46	; 0x2e
   20094:	0a000137 	beq	20578 <CString::FormatV(char const*, std::__va_list)+0x5b8>
   20098:	e3a01006 	mov	r1, #6
   2009c:	e1d570d0 	ldrsb	r7, [r5]
   200a0:	e357006c 	cmp	r7, #108	; 0x6c
   200a4:	03a02001 	moveq	r2, #1
   200a8:	01d570d1 	ldrsbeq	r7, [r5, #1]
   200ac:	00855002 	addeq	r5, r5, r2
   200b0:	e2473058 	sub	r3, r7, #88	; 0x58
   200b4:	e3530020 	cmp	r3, #32
   200b8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   200bc:	ea00011c 	b	20534 <CString::FormatV(char const*, std::__va_list)+0x574>
   200c0:	000204b0 	.word	0x000204b0
   200c4:	00020534 	.word	0x00020534
   200c8:	00020534 	.word	0x00020534
   200cc:	00020534 	.word	0x00020534
   200d0:	00020534 	.word	0x00020534
   200d4:	00020534 	.word	0x00020534
   200d8:	00020534 	.word	0x00020534
   200dc:	00020534 	.word	0x00020534
   200e0:	00020534 	.word	0x00020534
   200e4:	00020534 	.word	0x00020534
   200e8:	00020534 	.word	0x00020534
   200ec:	0002043c 	.word	0x0002043c
   200f0:	00020318 	.word	0x00020318
   200f4:	00020534 	.word	0x00020534
   200f8:	000202a0 	.word	0x000202a0
   200fc:	00020534 	.word	0x00020534
   20100:	00020534 	.word	0x00020534
   20104:	00020318 	.word	0x00020318
   20108:	00020534 	.word	0x00020534
   2010c:	00020534 	.word	0x00020534
   20110:	00020534 	.word	0x00020534
   20114:	00020534 	.word	0x00020534
   20118:	00020534 	.word	0x00020534
   2011c:	00020144 	.word	0x00020144
   20120:	000204b0 	.word	0x000204b0
   20124:	00020534 	.word	0x00020534
   20128:	00020534 	.word	0x00020534
   2012c:	000204c0 	.word	0x000204c0
   20130:	00020534 	.word	0x00020534
   20134:	000204b8 	.word	0x000204b8
   20138:	00020534 	.word	0x00020534
   2013c:	00020534 	.word	0x00020534
   20140:	000204b0 	.word	0x000204b0
   20144:	e3a09008 	mov	r9, #8
   20148:	e59d3000 	ldr	r3, [sp]
   2014c:	e5936000 	ldr	r6, [r3]
   20150:	e2833004 	add	r3, r3, #4
   20154:	e1560009 	cmp	r6, r9
   20158:	e58d3000 	str	r3, [sp]
   2015c:	23a0a001 	movcs	sl, #1
   20160:	3a0001aa 	bcc	20810 <CString::FormatV(char const*, std::__va_list)+0x850>
   20164:	e00a0a99 	mul	sl, r9, sl
   20168:	e1a00006 	mov	r0, r6
   2016c:	e1a0100a 	mov	r1, sl
   20170:	eb000f2d 	bl	23e2c <__aeabi_uidiv>
   20174:	e1590000 	cmp	r9, r0
   20178:	9afffff9 	bls	20164 <CString::FormatV(char const*, std::__va_list)+0x1a4>
   2017c:	e1a03000 	mov	r3, r0
   20180:	e3570058 	cmp	r7, #88	; 0x58
   20184:	13a07057 	movne	r7, #87	; 0x57
   20188:	03a07037 	moveq	r7, #55	; 0x37
   2018c:	e1a02005 	mov	r2, r5
   20190:	e58d400c 	str	r4, [sp, #12]
   20194:	e1a0500a 	mov	r5, sl
   20198:	e1a04007 	mov	r4, r7
   2019c:	e28d8010 	add	r8, sp, #16
   201a0:	e1a07006 	mov	r7, r6
   201a4:	e1a0a002 	mov	sl, r2
   201a8:	e1a06003 	mov	r6, r3
   201ac:	ea000003 	b	201c0 <CString::FormatV(char const*, std::__va_list)+0x200>
   201b0:	e1a01005 	mov	r1, r5
   201b4:	e1a00007 	mov	r0, r7
   201b8:	eb000f1b 	bl	23e2c <__aeabi_uidiv>
   201bc:	e1a06000 	mov	r6, r0
   201c0:	e1a00007 	mov	r0, r7
   201c4:	e1a01005 	mov	r1, r5
   201c8:	eb000f54 	bl	23f20 <__aeabi_uidivmod>
   201cc:	e3560009 	cmp	r6, #9
   201d0:	e2862030 	add	r2, r6, #48	; 0x30
   201d4:	80846006 	addhi	r6, r4, r6
   201d8:	96af6072 	sxtbls	r6, r2
   201dc:	86af6076 	sxtbhi	r6, r6
   201e0:	e2888001 	add	r8, r8, #1
   201e4:	e1a00005 	mov	r0, r5
   201e8:	e1a07001 	mov	r7, r1
   201ec:	e5486001 	strb	r6, [r8, #-1]
   201f0:	e1a01009 	mov	r1, r9
   201f4:	eb000f0c 	bl	23e2c <__aeabi_uidiv>
   201f8:	e2505000 	subs	r5, r0, #0
   201fc:	1affffeb 	bne	201b0 <CString::FormatV(char const*, std::__va_list)+0x1f0>
   20200:	e1a0300a 	mov	r3, sl
   20204:	e1a0a005 	mov	sl, r5
   20208:	e28d0010 	add	r0, sp, #16
   2020c:	e5c8a000 	strb	sl, [r8]
   20210:	e1a05003 	mov	r5, r3
   20214:	e59d400c 	ldr	r4, [sp, #12]
   20218:	eb000561 	bl	217a4 <strlen>
   2021c:	e59d3004 	ldr	r3, [sp, #4]
   20220:	e1a06000 	mov	r6, r0
   20224:	e3530000 	cmp	r3, #0
   20228:	1a0000eb 	bne	205dc <CString::FormatV(char const*, std::__va_list)+0x61c>
   2022c:	e1500004 	cmp	r0, r4
   20230:	2a00000f 	bcs	20274 <CString::FormatV(char const*, std::__va_list)+0x2b4>
   20234:	e59d3008 	ldr	r3, [sp, #8]
   20238:	e0444000 	sub	r4, r4, r0
   2023c:	e3530000 	cmp	r3, #0
   20240:	e1a01004 	mov	r1, r4
   20244:	e1a0000b 	mov	r0, fp
   20248:	03a07020 	moveq	r7, #32
   2024c:	13a07030 	movne	r7, #48	; 0x30
   20250:	ebfffd73 	bl	1f824 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   20254:	e2443001 	sub	r3, r4, #1
   20258:	e59b200c 	ldr	r2, [fp, #12]
   2025c:	e2433001 	sub	r3, r3, #1
   20260:	e2821001 	add	r1, r2, #1
   20264:	e3730001 	cmn	r3, #1
   20268:	e58b100c 	str	r1, [fp, #12]
   2026c:	e5c27000 	strb	r7, [r2]
   20270:	1afffff8 	bne	20258 <CString::FormatV(char const*, std::__va_list)+0x298>
   20274:	e28d1010 	add	r1, sp, #16
   20278:	e1a0000b 	mov	r0, fp
   2027c:	ebfffe0e 	bl	1fabc <CString::PutString(char const*)>
   20280:	e2855001 	add	r5, r5, #1
   20284:	e1d540d0 	ldrsb	r4, [r5]
   20288:	e3540000 	cmp	r4, #0
   2028c:	1affff5c 	bne	20004 <CString::FormatV(char const*, std::__va_list)+0x44>
   20290:	e59b300c 	ldr	r3, [fp, #12]
   20294:	e5c34000 	strb	r4, [r3]
   20298:	e28dd02c 	add	sp, sp, #44	; 0x2c
   2029c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   202a0:	e59d3000 	ldr	r3, [sp]
   202a4:	e28d0010 	add	r0, sp, #16
   202a8:	e2833007 	add	r3, r3, #7
   202ac:	e3c33007 	bic	r3, r3, #7
   202b0:	ed930b00 	vldr	d0, [r3]
   202b4:	e2833008 	add	r3, r3, #8
   202b8:	e58d3000 	str	r3, [sp]
   202bc:	ebfffe9f 	bl	1fd40 <CString::ftoa(char*, double, unsigned int)>
   202c0:	e28d0010 	add	r0, sp, #16
   202c4:	eb000536 	bl	217a4 <strlen>
   202c8:	e59d3004 	ldr	r3, [sp, #4]
   202cc:	e1a06000 	mov	r6, r0
   202d0:	e3530000 	cmp	r3, #0
   202d4:	1a000108 	bne	206fc <CString::FormatV(char const*, std::__va_list)+0x73c>
   202d8:	e1500004 	cmp	r0, r4
   202dc:	2affffe4 	bcs	20274 <CString::FormatV(char const*, std::__va_list)+0x2b4>
   202e0:	e0444000 	sub	r4, r4, r0
   202e4:	e1a01004 	mov	r1, r4
   202e8:	e1a0000b 	mov	r0, fp
   202ec:	ebfffd4c 	bl	1f824 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   202f0:	e2443001 	sub	r3, r4, #1
   202f4:	e59b200c 	ldr	r2, [fp, #12]
   202f8:	e2433001 	sub	r3, r3, #1
   202fc:	e2821001 	add	r1, r2, #1
   20300:	e58b100c 	str	r1, [fp, #12]
   20304:	e3a01020 	mov	r1, #32
   20308:	e3730001 	cmn	r3, #1
   2030c:	e5c21000 	strb	r1, [r2]
   20310:	1afffff7 	bne	202f4 <CString::FormatV(char const*, std::__va_list)+0x334>
   20314:	eaffffd6 	b	20274 <CString::FormatV(char const*, std::__va_list)+0x2b4>
   20318:	e59d3000 	ldr	r3, [sp]
   2031c:	e5936000 	ldr	r6, [r3]
   20320:	e2833004 	add	r3, r3, #4
   20324:	e3560000 	cmp	r6, #0
   20328:	b3a08001 	movlt	r8, #1
   2032c:	a3a08000 	movge	r8, #0
   20330:	e58d3000 	str	r3, [sp]
   20334:	b1a03008 	movlt	r3, r8
   20338:	b2666000 	rsblt	r6, r6, #0
   2033c:	b58d300c 	strlt	r3, [sp, #12]
   20340:	a58d800c 	strge	r8, [sp, #12]
   20344:	e3560009 	cmp	r6, #9
   20348:	e1a07006 	mov	r7, r6
   2034c:	c3a0a001 	movgt	sl, #1
   20350:	da00012b 	ble	20804 <CString::FormatV(char const*, std::__va_list)+0x844>
   20354:	e08aa10a 	add	sl, sl, sl, lsl #2
   20358:	e1a0a08a 	lsl	sl, sl, #1
   2035c:	e1a0100a 	mov	r1, sl
   20360:	e1a00006 	mov	r0, r6
   20364:	eb000eb0 	bl	23e2c <__aeabi_uidiv>
   20368:	e3500009 	cmp	r0, #9
   2036c:	8afffff8 	bhi	20354 <CString::FormatV(char const*, std::__va_list)+0x394>
   20370:	e1a09000 	mov	r9, r0
   20374:	e28d6010 	add	r6, sp, #16
   20378:	ea000003 	b	2038c <CString::FormatV(char const*, std::__va_list)+0x3cc>
   2037c:	e1a0100a 	mov	r1, sl
   20380:	e1a00007 	mov	r0, r7
   20384:	eb000ea8 	bl	23e2c <__aeabi_uidiv>
   20388:	e1a09000 	mov	r9, r0
   2038c:	e1a00007 	mov	r0, r7
   20390:	e1a0100a 	mov	r1, sl
   20394:	eb000ee1 	bl	23f20 <__aeabi_uidivmod>
   20398:	e3590009 	cmp	r9, #9
   2039c:	e2893030 	add	r3, r9, #48	; 0x30
   203a0:	96af9073 	sxtbls	r9, r3
   203a4:	e59f3494 	ldr	r3, [pc, #1172]	; 20840 <CString::FormatV(char const*, std::__va_list)+0x880>
   203a8:	82899057 	addhi	r9, r9, #87	; 0x57
   203ac:	e08a3a93 	umull	r3, sl, r3, sl
   203b0:	86af9079 	sxtbhi	r9, r9
   203b4:	e2866001 	add	r6, r6, #1
   203b8:	e1b0a1aa 	lsrs	sl, sl, #3
   203bc:	e1a07001 	mov	r7, r1
   203c0:	e5469001 	strb	r9, [r6, #-1]
   203c4:	1affffec 	bne	2037c <CString::FormatV(char const*, std::__va_list)+0x3bc>
   203c8:	e28d0010 	add	r0, sp, #16
   203cc:	e5c6a000 	strb	sl, [r6]
   203d0:	eb0004f3 	bl	217a4 <strlen>
   203d4:	e59d3004 	ldr	r3, [sp, #4]
   203d8:	e0888000 	add	r8, r8, r0
   203dc:	e3530000 	cmp	r3, #0
   203e0:	0a000090 	beq	20628 <CString::FormatV(char const*, std::__va_list)+0x668>
   203e4:	e59d300c 	ldr	r3, [sp, #12]
   203e8:	e3530000 	cmp	r3, #0
   203ec:	1a0000fb 	bne	207e0 <CString::FormatV(char const*, std::__va_list)+0x820>
   203f0:	e28d1010 	add	r1, sp, #16
   203f4:	e1a0000b 	mov	r0, fp
   203f8:	ebfffdaf 	bl	1fabc <CString::PutString(char const*)>
   203fc:	e1580004 	cmp	r8, r4
   20400:	2affff9e 	bcs	20280 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   20404:	e0444008 	sub	r4, r4, r8
   20408:	e1a01004 	mov	r1, r4
   2040c:	e1a0000b 	mov	r0, fp
   20410:	ebfffd03 	bl	1f824 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   20414:	e2443001 	sub	r3, r4, #1
   20418:	e59b200c 	ldr	r2, [fp, #12]
   2041c:	e2433001 	sub	r3, r3, #1
   20420:	e2821001 	add	r1, r2, #1
   20424:	e58b100c 	str	r1, [fp, #12]
   20428:	e3a01020 	mov	r1, #32
   2042c:	e3730001 	cmn	r3, #1
   20430:	e5c21000 	strb	r1, [r2]
   20434:	1afffff7 	bne	20418 <CString::FormatV(char const*, std::__va_list)+0x458>
   20438:	eaffff90 	b	20280 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   2043c:	e59d3004 	ldr	r3, [sp, #4]
   20440:	e3530000 	cmp	r3, #0
   20444:	e59d3000 	ldr	r3, [sp]
   20448:	e2836004 	add	r6, r3, #4
   2044c:	e1d370d0 	ldrsb	r7, [r3]
   20450:	1a000092 	bne	206a0 <CString::FormatV(char const*, std::__va_list)+0x6e0>
   20454:	e3540001 	cmp	r4, #1
   20458:	9a00000b 	bls	2048c <CString::FormatV(char const*, std::__va_list)+0x4cc>
   2045c:	e2441001 	sub	r1, r4, #1
   20460:	e1a0000b 	mov	r0, fp
   20464:	ebfffcee 	bl	1f824 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   20468:	e2444002 	sub	r4, r4, #2
   2046c:	e59b300c 	ldr	r3, [fp, #12]
   20470:	e2444001 	sub	r4, r4, #1
   20474:	e2832001 	add	r2, r3, #1
   20478:	e58b200c 	str	r2, [fp, #12]
   2047c:	e3a02020 	mov	r2, #32
   20480:	e3740001 	cmn	r4, #1
   20484:	e5c32000 	strb	r2, [r3]
   20488:	1afffff7 	bne	2046c <CString::FormatV(char const*, std::__va_list)+0x4ac>
   2048c:	e3a01001 	mov	r1, #1
   20490:	e1a0000b 	mov	r0, fp
   20494:	ebfffce2 	bl	1f824 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   20498:	e59b300c 	ldr	r3, [fp, #12]
   2049c:	e58d6000 	str	r6, [sp]
   204a0:	e2832001 	add	r2, r3, #1
   204a4:	e58b200c 	str	r2, [fp, #12]
   204a8:	e5c37000 	strb	r7, [r3]
   204ac:	eaffff73 	b	20280 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   204b0:	e3a09010 	mov	r9, #16
   204b4:	eaffff23 	b	20148 <CString::FormatV(char const*, std::__va_list)+0x188>
   204b8:	e3a0900a 	mov	r9, #10
   204bc:	eaffff21 	b	20148 <CString::FormatV(char const*, std::__va_list)+0x188>
   204c0:	e59d3000 	ldr	r3, [sp]
   204c4:	e5938000 	ldr	r8, [r3]
   204c8:	e2836004 	add	r6, r3, #4
   204cc:	e1a00008 	mov	r0, r8
   204d0:	eb0004b3 	bl	217a4 <strlen>
   204d4:	e59d3004 	ldr	r3, [sp, #4]
   204d8:	e1a07000 	mov	r7, r0
   204dc:	e3530000 	cmp	r3, #0
   204e0:	1a000098 	bne	20748 <CString::FormatV(char const*, std::__va_list)+0x788>
   204e4:	e1500004 	cmp	r0, r4
   204e8:	2a00000c 	bcs	20520 <CString::FormatV(char const*, std::__va_list)+0x560>
   204ec:	e0444000 	sub	r4, r4, r0
   204f0:	e1a01004 	mov	r1, r4
   204f4:	e1a0000b 	mov	r0, fp
   204f8:	ebfffcc9 	bl	1f824 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   204fc:	e2443001 	sub	r3, r4, #1
   20500:	e59b200c 	ldr	r2, [fp, #12]
   20504:	e2433001 	sub	r3, r3, #1
   20508:	e2821001 	add	r1, r2, #1
   2050c:	e58b100c 	str	r1, [fp, #12]
   20510:	e3a01020 	mov	r1, #32
   20514:	e3730001 	cmn	r3, #1
   20518:	e5c21000 	strb	r1, [r2]
   2051c:	1afffff7 	bne	20500 <CString::FormatV(char const*, std::__va_list)+0x540>
   20520:	e1a01008 	mov	r1, r8
   20524:	e1a0000b 	mov	r0, fp
   20528:	e58d6000 	str	r6, [sp]
   2052c:	ebfffd62 	bl	1fabc <CString::PutString(char const*)>
   20530:	eaffff52 	b	20280 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   20534:	e3a01001 	mov	r1, #1
   20538:	e1a0000b 	mov	r0, fp
   2053c:	ebfffcb8 	bl	1f824 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   20540:	e3a01001 	mov	r1, #1
   20544:	e59b300c 	ldr	r3, [fp, #12]
   20548:	e1a0000b 	mov	r0, fp
   2054c:	e0832001 	add	r2, r3, r1
   20550:	e58b200c 	str	r2, [fp, #12]
   20554:	e3a02025 	mov	r2, #37	; 0x25
   20558:	e5c32000 	strb	r2, [r3]
   2055c:	e1d540d0 	ldrsb	r4, [r5]
   20560:	ebfffcaf 	bl	1f824 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   20564:	e59b300c 	ldr	r3, [fp, #12]
   20568:	e2832001 	add	r2, r3, #1
   2056c:	e58b200c 	str	r2, [fp, #12]
   20570:	e5c34000 	strb	r4, [r3]
   20574:	eaffff41 	b	20280 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   20578:	e1d570d1 	ldrsb	r7, [r5, #1]
   2057c:	e3a01000 	mov	r1, #0
   20580:	e2473030 	sub	r3, r7, #48	; 0x30
   20584:	e6ef3073 	uxtb	r3, r3
   20588:	e3530009 	cmp	r3, #9
   2058c:	e2855001 	add	r5, r5, #1
   20590:	8afffec2 	bhi	200a0 <CString::FormatV(char const*, std::__va_list)+0xe0>
   20594:	e0811101 	add	r1, r1, r1, lsl #2
   20598:	e0871081 	add	r1, r7, r1, lsl #1
   2059c:	e1f570d1 	ldrsb	r7, [r5, #1]!
   205a0:	e2411030 	sub	r1, r1, #48	; 0x30
   205a4:	e2473030 	sub	r3, r7, #48	; 0x30
   205a8:	e6ef3073 	uxtb	r3, r3
   205ac:	e3530009 	cmp	r3, #9
   205b0:	9afffff7 	bls	20594 <CString::FormatV(char const*, std::__va_list)+0x5d4>
   205b4:	eafffeb9 	b	200a0 <CString::FormatV(char const*, std::__va_list)+0xe0>
   205b8:	e3a01001 	mov	r1, #1
   205bc:	e1a0000b 	mov	r0, fp
   205c0:	ebfffc97 	bl	1f824 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   205c4:	e59b300c 	ldr	r3, [fp, #12]
   205c8:	e2855002 	add	r5, r5, #2
   205cc:	e2832001 	add	r2, r3, #1
   205d0:	e58b200c 	str	r2, [fp, #12]
   205d4:	e5c36000 	strb	r6, [r3]
   205d8:	eafffe86 	b	1fff8 <CString::FormatV(char const*, std::__va_list)+0x38>
   205dc:	e28d1010 	add	r1, sp, #16
   205e0:	e1a0000b 	mov	r0, fp
   205e4:	ebfffd34 	bl	1fabc <CString::PutString(char const*)>
   205e8:	e1560004 	cmp	r6, r4
   205ec:	2affff23 	bcs	20280 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   205f0:	e0444006 	sub	r4, r4, r6
   205f4:	e1a01004 	mov	r1, r4
   205f8:	e1a0000b 	mov	r0, fp
   205fc:	ebfffc88 	bl	1f824 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   20600:	e2443001 	sub	r3, r4, #1
   20604:	e59b200c 	ldr	r2, [fp, #12]
   20608:	e2433001 	sub	r3, r3, #1
   2060c:	e2821001 	add	r1, r2, #1
   20610:	e58b100c 	str	r1, [fp, #12]
   20614:	e3a01020 	mov	r1, #32
   20618:	e3730001 	cmn	r3, #1
   2061c:	e5c21000 	strb	r1, [r2]
   20620:	1afffff7 	bne	20604 <CString::FormatV(char const*, std::__va_list)+0x644>
   20624:	eaffff15 	b	20280 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   20628:	e59d3008 	ldr	r3, [sp, #8]
   2062c:	e3530000 	cmp	r3, #0
   20630:	1a000057 	bne	20794 <CString::FormatV(char const*, std::__va_list)+0x7d4>
   20634:	e1580004 	cmp	r8, r4
   20638:	2a00000c 	bcs	20670 <CString::FormatV(char const*, std::__va_list)+0x6b0>
   2063c:	e0444008 	sub	r4, r4, r8
   20640:	e1a01004 	mov	r1, r4
   20644:	e1a0000b 	mov	r0, fp
   20648:	ebfffc75 	bl	1f824 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   2064c:	e2443001 	sub	r3, r4, #1
   20650:	e59b200c 	ldr	r2, [fp, #12]
   20654:	e2433001 	sub	r3, r3, #1
   20658:	e2821001 	add	r1, r2, #1
   2065c:	e58b100c 	str	r1, [fp, #12]
   20660:	e3a01020 	mov	r1, #32
   20664:	e3730001 	cmn	r3, #1
   20668:	e5c21000 	strb	r1, [r2]
   2066c:	1afffff7 	bne	20650 <CString::FormatV(char const*, std::__va_list)+0x690>
   20670:	e59d300c 	ldr	r3, [sp, #12]
   20674:	e3530000 	cmp	r3, #0
   20678:	0afffefd 	beq	20274 <CString::FormatV(char const*, std::__va_list)+0x2b4>
   2067c:	e3a01001 	mov	r1, #1
   20680:	e1a0000b 	mov	r0, fp
   20684:	ebfffc66 	bl	1f824 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   20688:	e3a0202d 	mov	r2, #45	; 0x2d
   2068c:	e59b300c 	ldr	r3, [fp, #12]
   20690:	e2831001 	add	r1, r3, #1
   20694:	e58b100c 	str	r1, [fp, #12]
   20698:	e5c32000 	strb	r2, [r3]
   2069c:	eafffef4 	b	20274 <CString::FormatV(char const*, std::__va_list)+0x2b4>
   206a0:	e3a01001 	mov	r1, #1
   206a4:	e1a0000b 	mov	r0, fp
   206a8:	ebfffc5d 	bl	1f824 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   206ac:	e59b300c 	ldr	r3, [fp, #12]
   206b0:	e3540001 	cmp	r4, #1
   206b4:	e2832001 	add	r2, r3, #1
   206b8:	e58b200c 	str	r2, [fp, #12]
   206bc:	e5c37000 	strb	r7, [r3]
   206c0:	9a00000b 	bls	206f4 <CString::FormatV(char const*, std::__va_list)+0x734>
   206c4:	e2441001 	sub	r1, r4, #1
   206c8:	e1a0000b 	mov	r0, fp
   206cc:	ebfffc54 	bl	1f824 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   206d0:	e2444002 	sub	r4, r4, #2
   206d4:	e59b300c 	ldr	r3, [fp, #12]
   206d8:	e2444001 	sub	r4, r4, #1
   206dc:	e2832001 	add	r2, r3, #1
   206e0:	e58b200c 	str	r2, [fp, #12]
   206e4:	e3a02020 	mov	r2, #32
   206e8:	e3740001 	cmn	r4, #1
   206ec:	e5c32000 	strb	r2, [r3]
   206f0:	1afffff7 	bne	206d4 <CString::FormatV(char const*, std::__va_list)+0x714>
   206f4:	e58d6000 	str	r6, [sp]
   206f8:	eafffee0 	b	20280 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   206fc:	e28d1010 	add	r1, sp, #16
   20700:	e1a0000b 	mov	r0, fp
   20704:	ebfffcec 	bl	1fabc <CString::PutString(char const*)>
   20708:	e1560004 	cmp	r6, r4
   2070c:	2afffedb 	bcs	20280 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   20710:	e0444006 	sub	r4, r4, r6
   20714:	e1a01004 	mov	r1, r4
   20718:	e1a0000b 	mov	r0, fp
   2071c:	ebfffc40 	bl	1f824 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   20720:	e2443001 	sub	r3, r4, #1
   20724:	e59b200c 	ldr	r2, [fp, #12]
   20728:	e2433001 	sub	r3, r3, #1
   2072c:	e2821001 	add	r1, r2, #1
   20730:	e58b100c 	str	r1, [fp, #12]
   20734:	e3a01020 	mov	r1, #32
   20738:	e3730001 	cmn	r3, #1
   2073c:	e5c21000 	strb	r1, [r2]
   20740:	1afffff7 	bne	20724 <CString::FormatV(char const*, std::__va_list)+0x764>
   20744:	eafffecd 	b	20280 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   20748:	e1a01008 	mov	r1, r8
   2074c:	e1a0000b 	mov	r0, fp
   20750:	ebfffcd9 	bl	1fabc <CString::PutString(char const*)>
   20754:	e1570004 	cmp	r7, r4
   20758:	2affffe5 	bcs	206f4 <CString::FormatV(char const*, std::__va_list)+0x734>
   2075c:	e0444007 	sub	r4, r4, r7
   20760:	e1a01004 	mov	r1, r4
   20764:	e1a0000b 	mov	r0, fp
   20768:	ebfffc2d 	bl	1f824 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   2076c:	e2443001 	sub	r3, r4, #1
   20770:	e59b200c 	ldr	r2, [fp, #12]
   20774:	e2433001 	sub	r3, r3, #1
   20778:	e2821001 	add	r1, r2, #1
   2077c:	e58b100c 	str	r1, [fp, #12]
   20780:	e3a01020 	mov	r1, #32
   20784:	e3730001 	cmn	r3, #1
   20788:	e5c21000 	strb	r1, [r2]
   2078c:	1afffff7 	bne	20770 <CString::FormatV(char const*, std::__va_list)+0x7b0>
   20790:	eaffffd7 	b	206f4 <CString::FormatV(char const*, std::__va_list)+0x734>
   20794:	e59d300c 	ldr	r3, [sp, #12]
   20798:	e3530000 	cmp	r3, #0
   2079c:	1a00001e 	bne	2081c <CString::FormatV(char const*, std::__va_list)+0x85c>
   207a0:	e1580004 	cmp	r8, r4
   207a4:	2afffeb2 	bcs	20274 <CString::FormatV(char const*, std::__va_list)+0x2b4>
   207a8:	e0444008 	sub	r4, r4, r8
   207ac:	e1a0000b 	mov	r0, fp
   207b0:	e1a01004 	mov	r1, r4
   207b4:	ebfffc1a 	bl	1f824 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   207b8:	e3a00030 	mov	r0, #48	; 0x30
   207bc:	e2443001 	sub	r3, r4, #1
   207c0:	e59b200c 	ldr	r2, [fp, #12]
   207c4:	e2433001 	sub	r3, r3, #1
   207c8:	e2821001 	add	r1, r2, #1
   207cc:	e3730001 	cmn	r3, #1
   207d0:	e58b100c 	str	r1, [fp, #12]
   207d4:	e5c20000 	strb	r0, [r2]
   207d8:	1afffff8 	bne	207c0 <CString::FormatV(char const*, std::__va_list)+0x800>
   207dc:	eafffea4 	b	20274 <CString::FormatV(char const*, std::__va_list)+0x2b4>
   207e0:	e3a01001 	mov	r1, #1
   207e4:	e1a0000b 	mov	r0, fp
   207e8:	ebfffc0d 	bl	1f824 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   207ec:	e3a0202d 	mov	r2, #45	; 0x2d
   207f0:	e59b300c 	ldr	r3, [fp, #12]
   207f4:	e2831001 	add	r1, r3, #1
   207f8:	e58b100c 	str	r1, [fp, #12]
   207fc:	e5c32000 	strb	r2, [r3]
   20800:	eafffefa 	b	203f0 <CString::FormatV(char const*, std::__va_list)+0x430>
   20804:	e1a09006 	mov	r9, r6
   20808:	e3a0a001 	mov	sl, #1
   2080c:	eafffed8 	b	20374 <CString::FormatV(char const*, std::__va_list)+0x3b4>
   20810:	e1a03006 	mov	r3, r6
   20814:	e3a0a001 	mov	sl, #1
   20818:	eafffe58 	b	20180 <CString::FormatV(char const*, std::__va_list)+0x1c0>
   2081c:	e3a01001 	mov	r1, #1
   20820:	e1a0000b 	mov	r0, fp
   20824:	ebfffbfe 	bl	1f824 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   20828:	e3a0202d 	mov	r2, #45	; 0x2d
   2082c:	e59b300c 	ldr	r3, [fp, #12]
   20830:	e2831001 	add	r1, r3, #1
   20834:	e58b100c 	str	r1, [fp, #12]
   20838:	e5c32000 	strb	r2, [r3]
   2083c:	eaffffd7 	b	207a0 <CString::FormatV(char const*, std::__va_list)+0x7e0>
   20840:	cccccccd 	.word	0xcccccccd

00020844 <CString::Format(char const*, ...)>:
   20844:	e92d000e 	push	{r1, r2, r3}
   20848:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   2084c:	e24dd008 	sub	sp, sp, #8
   20850:	e28d3010 	add	r3, sp, #16
   20854:	e1a02003 	mov	r2, r3
   20858:	e59d100c 	ldr	r1, [sp, #12]
   2085c:	e58d3004 	str	r3, [sp, #4]
   20860:	ebfffdd6 	bl	1ffc0 <CString::FormatV(char const*, std::__va_list)>
   20864:	e28dd008 	add	sp, sp, #8
   20868:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   2086c:	e28dd00c 	add	sp, sp, #12
   20870:	e12fff1e 	bx	lr

00020874 <__aeabi_atexit>:
   20874:	e12fff1e 	bx	lr

00020878 <halt>:
   20878:	f10c0080 	cpsid	i
   2087c:	f10c0040 	cpsid	f
   20880:	eafffffe 	b	20880 <halt+0x8>

00020884 <reboot>:
   20884:	e3a03000 	mov	r3, #0
   20888:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2088c:	e59f3010 	ldr	r3, [pc, #16]	; 208a4 <reboot+0x20>
   20890:	e59f1010 	ldr	r1, [pc, #16]	; 208a8 <reboot+0x24>
   20894:	e59f2010 	ldr	r2, [pc, #16]	; 208ac <reboot+0x28>
   20898:	e5831024 	str	r1, [r3, #36]	; 0x24
   2089c:	e583201c 	str	r2, [r3, #28]
   208a0:	eafffffe 	b	208a0 <reboot+0x1c>
   208a4:	20100000 	.word	0x20100000
   208a8:	5a000001 	.word	0x5a000001
   208ac:	5a000020 	.word	0x5a000020

000208b0 <sysinit>:
   208b0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   208b4:	e24dd01c 	sub	sp, sp, #28
   208b8:	f1080040 	cpsie	f
   208bc:	ee113f50 	mrc	15, 0, r3, cr1, cr0, {2}
   208c0:	e383360f 	orr	r3, r3, #15728640	; 0xf00000
   208c4:	ee013f50 	mcr	15, 0, r3, cr1, cr0, {2}
   208c8:	e3a02000 	mov	r2, #0
   208cc:	ee072f95 	mcr	15, 0, r2, cr7, cr5, {4}
   208d0:	e3a03101 	mov	r3, #1073741824	; 0x40000000
   208d4:	eee83a10 	vmsr	fpexc, r3
   208d8:	e3a03402 	mov	r3, #33554432	; 0x2000000
   208dc:	eee13a10 	vmsr	fpscr, r3
   208e0:	e59f3068 	ldr	r3, [pc, #104]	; 20950 <sysinit+0xa0>
   208e4:	e59f1068 	ldr	r1, [pc, #104]	; 20954 <sysinit+0xa4>
   208e8:	e1530001 	cmp	r3, r1
   208ec:	2a000002 	bcs	208fc <sysinit+0x4c>
   208f0:	e4c32001 	strb	r2, [r3], #1
   208f4:	e1530001 	cmp	r3, r1
   208f8:	1afffffc 	bne	208f0 <sysinit+0x40>
   208fc:	e1a0000d 	mov	r0, sp
   20900:	ebfff2dd 	bl	1d47c <CMachineInfo::CMachineInfo()>
   20904:	e59f504c 	ldr	r5, [pc, #76]	; 20958 <sysinit+0xa8>
   20908:	e59f304c 	ldr	r3, [pc, #76]	; 2095c <sysinit+0xac>
   2090c:	e1550003 	cmp	r5, r3
   20910:	2a000009 	bcs	2093c <sysinit+0x8c>
   20914:	e1e06005 	mvn	r6, r5
   20918:	e3a04000 	mov	r4, #0
   2091c:	e0866003 	add	r6, r6, r3
   20920:	e1a06126 	lsr	r6, r6, #2
   20924:	e2866001 	add	r6, r6, #1
   20928:	e2844001 	add	r4, r4, #1
   2092c:	e4953004 	ldr	r3, [r5], #4
   20930:	e12fff33 	blx	r3
   20934:	e1540006 	cmp	r4, r6
   20938:	1afffffa 	bne	20928 <sysinit+0x78>
   2093c:	ebff9dc9 	bl	8068 <main>
   20940:	e3500001 	cmp	r0, #1
   20944:	0a000000 	beq	2094c <sysinit+0x9c>
   20948:	ebffffca 	bl	20878 <halt>
   2094c:	ebffffcc 	bl	20884 <reboot>
   20950:	0002b230 	.word	0x0002b230
   20954:	0002b320 	.word	0x0002b320
   20958:	0002a7e4 	.word	0x0002a7e4
   2095c:	0002a7f8 	.word	0x0002a7f8

00020960 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]>:
   20960:	e2800001 	add	r0, r0, #1
   20964:	e3a03000 	mov	r3, #0
   20968:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2096c:	e59f3020 	ldr	r3, [pc, #32]	; 20994 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]+0x34>
   20970:	e1a01003 	mov	r1, r3
   20974:	e5932004 	ldr	r2, [r3, #4]
   20978:	e5913004 	ldr	r3, [r1, #4]
   2097c:	e0433002 	sub	r3, r3, r2
   20980:	e1500003 	cmp	r0, r3
   20984:	8afffffb 	bhi	20978 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]+0x18>
   20988:	e3a03000 	mov	r3, #0
   2098c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   20990:	e12fff1e 	bx	lr
   20994:	20003000 	.word	0x20003000

00020998 <CTimer::CTimer(CInterruptSystem*)>:
   20998:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2099c:	e3a05000 	mov	r5, #0
   209a0:	e3a07001 	mov	r7, #1
   209a4:	e1a04000 	mov	r4, r0
   209a8:	e59f605c 	ldr	r6, [pc, #92]	; 20a0c <CTimer::CTimer(CInterruptSystem*)+0x74>
   209ac:	e5805004 	str	r5, [r0, #4]
   209b0:	e5801000 	str	r1, [r0]
   209b4:	e5805008 	str	r5, [r0, #8]
   209b8:	e5805014 	str	r5, [r0, #20]
   209bc:	e5807010 	str	r7, [r0, #16]
   209c0:	e580500c 	str	r5, [r0, #12]
   209c4:	e2800018 	add	r0, r0, #24
   209c8:	eb000be8 	bl	23970 <CPtrList::CPtrList()>
   209cc:	e5961000 	ldr	r1, [r6]
   209d0:	e59f2038 	ldr	r2, [pc, #56]	; 20a10 <CTimer::CTimer(CInterruptSystem*)+0x78>
   209d4:	e59f3038 	ldr	r3, [pc, #56]	; 20a14 <CTimer::CTimer(CInterruptSystem*)+0x7c>
   209d8:	e1510005 	cmp	r1, r5
   209dc:	e584701c 	str	r7, [r4, #28]
   209e0:	e5845028 	str	r5, [r4, #40]	; 0x28
   209e4:	e5842020 	str	r2, [r4, #32]
   209e8:	e5843024 	str	r3, [r4, #36]	; 0x24
   209ec:	0a000003 	beq	20a00 <CTimer::CTimer(CInterruptSystem*)+0x68>
   209f0:	e3a0203d 	mov	r2, #61	; 0x3d
   209f4:	e59f101c 	ldr	r1, [pc, #28]	; 20a18 <CTimer::CTimer(CInterruptSystem*)+0x80>
   209f8:	e59f001c 	ldr	r0, [pc, #28]	; 20a1c <CTimer::CTimer(CInterruptSystem*)+0x84>
   209fc:	ebffe6e5 	bl	1a598 <assertion_failed>
   20a00:	e5864000 	str	r4, [r6]
   20a04:	e1a00004 	mov	r0, r4
   20a08:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   20a0c:	0002b298 	.word	0x0002b298
   20a10:	00055730 	.word	0x00055730
   20a14:	0000015e 	.word	0x0000015e
   20a18:	00029380 	.word	0x00029380
   20a1c:	0002938c 	.word	0x0002938c

00020a20 <CTimer::~CTimer()>:
   20a20:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20a24:	e1a0a000 	mov	sl, r0
   20a28:	e5900000 	ldr	r0, [r0]
   20a2c:	e3500000 	cmp	r0, #0
   20a30:	0a000028 	beq	20ad8 <CTimer::~CTimer()+0xb8>
   20a34:	e3a01003 	mov	r1, #3
   20a38:	ebffee6b 	bl	1c3ec <CInterruptSystem::DisconnectIRQ(unsigned int)>
   20a3c:	e3a0904b 	mov	r9, #75	; 0x4b
   20a40:	e59f70a8 	ldr	r7, [pc, #168]	; 20af0 <CTimer::~CTimer()+0xd0>
   20a44:	e59f60a8 	ldr	r6, [pc, #168]	; 20af4 <CTimer::~CTimer()+0xd4>
   20a48:	e59f80a8 	ldr	r8, [pc, #168]	; 20af8 <CTimer::~CTimer()+0xd8>
   20a4c:	e28a4018 	add	r4, sl, #24
   20a50:	ea000011 	b	20a9c <CTimer::~CTimer()+0x7c>
   20a54:	e1a01005 	mov	r1, r5
   20a58:	e1a00004 	mov	r0, r4
   20a5c:	eb000beb 	bl	23a10 <CPtrList::GetPtr(TPtrListElement*)>
   20a60:	e250b000 	subs	fp, r0, #0
   20a64:	0a000016 	beq	20ac4 <CTimer::~CTimer()+0xa4>
   20a68:	e59b3000 	ldr	r3, [fp]
   20a6c:	e1530006 	cmp	r3, r6
   20a70:	0a000003 	beq	20a84 <CTimer::~CTimer()+0x64>
   20a74:	e1a02009 	mov	r2, r9
   20a78:	e1a01007 	mov	r1, r7
   20a7c:	e1a00008 	mov	r0, r8
   20a80:	ebffe6c4 	bl	1a598 <assertion_failed>
   20a84:	e1a01005 	mov	r1, r5
   20a88:	e1a00004 	mov	r0, r4
   20a8c:	eb000c74 	bl	23c64 <CPtrList::Remove(TPtrListElement*)>
   20a90:	e1a0000b 	mov	r0, fp
   20a94:	e3a01014 	mov	r1, #20
   20a98:	eb000793 	bl	228ec <operator delete(void*, unsigned int)>
   20a9c:	e1a00004 	mov	r0, r4
   20aa0:	eb000bc2 	bl	239b0 <CPtrList::GetFirst()>
   20aa4:	e2505000 	subs	r5, r0, #0
   20aa8:	1affffe9 	bne	20a54 <CTimer::~CTimer()+0x34>
   20aac:	e59f3048 	ldr	r3, [pc, #72]	; 20afc <CTimer::~CTimer()+0xdc>
   20ab0:	e1a00004 	mov	r0, r4
   20ab4:	e5835000 	str	r5, [r3]
   20ab8:	eb000baf 	bl	2397c <CPtrList::~CPtrList()>
   20abc:	e1a0000a 	mov	r0, sl
   20ac0:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20ac4:	e3a0204a 	mov	r2, #74	; 0x4a
   20ac8:	e1a01007 	mov	r1, r7
   20acc:	e59f002c 	ldr	r0, [pc, #44]	; 20b00 <CTimer::~CTimer()+0xe0>
   20ad0:	ebffe6b0 	bl	1a598 <assertion_failed>
   20ad4:	eaffffe3 	b	20a68 <CTimer::~CTimer()+0x48>
   20ad8:	e59f0024 	ldr	r0, [pc, #36]	; 20b04 <CTimer::~CTimer()+0xe4>
   20adc:	e3a02043 	mov	r2, #67	; 0x43
   20ae0:	e59f1008 	ldr	r1, [pc, #8]	; 20af0 <CTimer::~CTimer()+0xd0>
   20ae4:	ebffe6ab 	bl	1a598 <assertion_failed>
   20ae8:	e59a0000 	ldr	r0, [sl]
   20aec:	eaffffd0 	b	20a34 <CTimer::~CTimer()+0x14>
   20af0:	00029380 	.word	0x00029380
   20af4:	4b544d43 	.word	0x4b544d43
   20af8:	0002939c 	.word	0x0002939c
   20afc:	0002b298 	.word	0x0002b298
   20b00:	000264cc 	.word	0x000264cc
   20b04:	000240d8 	.word	0x000240d8

00020b08 <CTimer::SetTimeZone(int)>:
   20b08:	e59f2018 	ldr	r2, [pc, #24]	; 20b28 <CTimer::SetTimeZone(int)+0x20>
   20b0c:	e2813e59 	add	r3, r1, #1424	; 0x590
   20b10:	e283300f 	add	r3, r3, #15
   20b14:	e1530002 	cmp	r3, r2
   20b18:	95801014 	strls	r1, [r0, #20]
   20b1c:	93a00001 	movls	r0, #1
   20b20:	83a00000 	movhi	r0, #0
   20b24:	e12fff1e 	bx	lr
   20b28:	00000b3e 	.word	0x00000b3e

00020b2c <CTimer::GetTimeZone() const>:
   20b2c:	e5900014 	ldr	r0, [r0, #20]
   20b30:	e12fff1e 	bx	lr

00020b34 <CTimer::SetTime(unsigned int, bool)>:
   20b34:	e3520000 	cmp	r2, #0
   20b38:	e92d4070 	push	{r4, r5, r6, lr}
   20b3c:	e1a04000 	mov	r4, r0
   20b40:	e1a05001 	mov	r5, r1
   20b44:	1a000004 	bne	20b5c <CTimer::SetTime(unsigned int, bool)+0x28>
   20b48:	e5903014 	ldr	r3, [r0, #20]
   20b4c:	e0633203 	rsb	r3, r3, r3, lsl #4
   20b50:	e1b03103 	lsls	r3, r3, #2
   20b54:	4a00000e 	bmi	20b94 <CTimer::SetTime(unsigned int, bool)+0x60>
   20b58:	e0855003 	add	r5, r5, r3
   20b5c:	e5940010 	ldr	r0, [r4, #16]
   20b60:	e3500000 	cmp	r0, #0
   20b64:	1a000002 	bne	20b74 <CTimer::SetTime(unsigned int, bool)+0x40>
   20b68:	e3a00001 	mov	r0, #1
   20b6c:	e584500c 	str	r5, [r4, #12]
   20b70:	e8bd8070 	pop	{r4, r5, r6, pc}
   20b74:	eb0006fe 	bl	22774 <EnterCritical>
   20b78:	e5943010 	ldr	r3, [r4, #16]
   20b7c:	e584500c 	str	r5, [r4, #12]
   20b80:	e3530000 	cmp	r3, #0
   20b84:	0a000007 	beq	20ba8 <CTimer::SetTime(unsigned int, bool)+0x74>
   20b88:	eb000726 	bl	22828 <LeaveCritical>
   20b8c:	e3a00001 	mov	r0, #1
   20b90:	e8bd8070 	pop	{r4, r5, r6, pc}
   20b94:	e2631000 	rsb	r1, r3, #0
   20b98:	e1510005 	cmp	r1, r5
   20b9c:	daffffed 	ble	20b58 <CTimer::SetTime(unsigned int, bool)+0x24>
   20ba0:	e1a00002 	mov	r0, r2
   20ba4:	e8bd8070 	pop	{r4, r5, r6, pc}
   20ba8:	e3a00001 	mov	r0, #1
   20bac:	e8bd8070 	pop	{r4, r5, r6, pc}

00020bb0 <CTimer::GetClockTicks()>:
   20bb0:	e3a03000 	mov	r3, #0
   20bb4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   20bb8:	e59f2008 	ldr	r2, [pc, #8]	; 20bc8 <CTimer::GetClockTicks()+0x18>
   20bbc:	e5920004 	ldr	r0, [r2, #4]
   20bc0:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   20bc4:	e12fff1e 	bx	lr
   20bc8:	20003000 	.word	0x20003000

00020bcc <CTimer::GetTicks() const>:
   20bcc:	e5900004 	ldr	r0, [r0, #4]
   20bd0:	e12fff1e 	bx	lr

00020bd4 <CTimer::GetUptime() const>:
   20bd4:	e5900008 	ldr	r0, [r0, #8]
   20bd8:	e12fff1e 	bx	lr

00020bdc <CTimer::GetTime() const>:
   20bdc:	e590000c 	ldr	r0, [r0, #12]
   20be0:	e12fff1e 	bx	lr

00020be4 <CTimer::GetLocalTime(unsigned int*, unsigned int*)>:
   20be4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   20be8:	e1a04000 	mov	r4, r0
   20bec:	e5900010 	ldr	r0, [r0, #16]
   20bf0:	e1a06001 	mov	r6, r1
   20bf4:	e3500000 	cmp	r0, #0
   20bf8:	e1a05002 	mov	r5, r2
   20bfc:	1a000011 	bne	20c48 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x64>
   20c00:	e594700c 	ldr	r7, [r4, #12]
   20c04:	e5944004 	ldr	r4, [r4, #4]
   20c08:	e3560000 	cmp	r6, #0
   20c0c:	0a00001a 	beq	20c7c <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x98>
   20c10:	e3550000 	cmp	r5, #0
   20c14:	e5867000 	str	r7, [r6]
   20c18:	0a000012 	beq	20c68 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x84>
   20c1c:	e3a03064 	mov	r3, #100	; 0x64
   20c20:	e59f2068 	ldr	r2, [pc, #104]	; 20c90 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xac>
   20c24:	e59f1068 	ldr	r1, [pc, #104]	; 20c94 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb0>
   20c28:	e0820492 	umull	r0, r2, r2, r4
   20c2c:	e1a022a2 	lsr	r2, r2, #5
   20c30:	e0030293 	mul	r3, r3, r2
   20c34:	e0443003 	sub	r3, r4, r3
   20c38:	e0030391 	mul	r3, r1, r3
   20c3c:	e3a00001 	mov	r0, #1
   20c40:	e5853000 	str	r3, [r5]
   20c44:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   20c48:	eb0006c9 	bl	22774 <EnterCritical>
   20c4c:	e5943010 	ldr	r3, [r4, #16]
   20c50:	e594700c 	ldr	r7, [r4, #12]
   20c54:	e3530000 	cmp	r3, #0
   20c58:	e5944004 	ldr	r4, [r4, #4]
   20c5c:	0affffe9 	beq	20c08 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x24>
   20c60:	eb0006f0 	bl	22828 <LeaveCritical>
   20c64:	eaffffe7 	b	20c08 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x24>
   20c68:	e3a020dd 	mov	r2, #221	; 0xdd
   20c6c:	e59f1024 	ldr	r1, [pc, #36]	; 20c98 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb4>
   20c70:	e59f0024 	ldr	r0, [pc, #36]	; 20c9c <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb8>
   20c74:	ebffe647 	bl	1a598 <assertion_failed>
   20c78:	eaffffe7 	b	20c1c <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x38>
   20c7c:	e3a020da 	mov	r2, #218	; 0xda
   20c80:	e59f1010 	ldr	r1, [pc, #16]	; 20c98 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb4>
   20c84:	e59f0014 	ldr	r0, [pc, #20]	; 20ca0 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xbc>
   20c88:	ebffe642 	bl	1a598 <assertion_failed>
   20c8c:	eaffffdf 	b	20c10 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x2c>
   20c90:	51eb851f 	.word	0x51eb851f
   20c94:	00002710 	.word	0x00002710
   20c98:	00029380 	.word	0x00029380
   20c9c:	000293d4 	.word	0x000293d4
   20ca0:	000293c4 	.word	0x000293c4

00020ca4 <CTimer::GetUniversalTime() const>:
   20ca4:	e5903014 	ldr	r3, [r0, #20]
   20ca8:	e590000c 	ldr	r0, [r0, #12]
   20cac:	e0633203 	rsb	r3, r3, r3, lsl #4
   20cb0:	e1a03103 	lsl	r3, r3, #2
   20cb4:	e1530000 	cmp	r3, r0
   20cb8:	d0400003 	suble	r0, r0, r3
   20cbc:	c3a00000 	movgt	r0, #0
   20cc0:	e12fff1e 	bx	lr

00020cc4 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)>:
   20cc4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   20cc8:	e1a05000 	mov	r5, r0
   20ccc:	e5900010 	ldr	r0, [r0, #16]
   20cd0:	e1a09001 	mov	r9, r1
   20cd4:	e3500000 	cmp	r0, #0
   20cd8:	e1a07002 	mov	r7, r2
   20cdc:	1a000019 	bne	20d48 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x84>
   20ce0:	e595600c 	ldr	r6, [r5, #12]
   20ce4:	e5958004 	ldr	r8, [r5, #4]
   20ce8:	e5953014 	ldr	r3, [r5, #20]
   20cec:	e0633203 	rsb	r3, r3, r3, lsl #4
   20cf0:	e1a04103 	lsl	r4, r3, #2
   20cf4:	e1540006 	cmp	r4, r6
   20cf8:	ca000010 	bgt	20d40 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x7c>
   20cfc:	e3590000 	cmp	r9, #0
   20d00:	0a00001d 	beq	20d7c <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xb8>
   20d04:	e0464004 	sub	r4, r6, r4
   20d08:	e3570000 	cmp	r7, #0
   20d0c:	e5894000 	str	r4, [r9]
   20d10:	0a000014 	beq	20d68 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xa4>
   20d14:	e3a03064 	mov	r3, #100	; 0x64
   20d18:	e59f2070 	ldr	r2, [pc, #112]	; 20d90 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xcc>
   20d1c:	e59f1070 	ldr	r1, [pc, #112]	; 20d94 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd0>
   20d20:	e0820892 	umull	r0, r2, r2, r8
   20d24:	e1a022a2 	lsr	r2, r2, #5
   20d28:	e0030293 	mul	r3, r3, r2
   20d2c:	e0483003 	sub	r3, r8, r3
   20d30:	e0030391 	mul	r3, r1, r3
   20d34:	e3a00001 	mov	r0, #1
   20d38:	e5873000 	str	r3, [r7]
   20d3c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   20d40:	e3a00000 	mov	r0, #0
   20d44:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   20d48:	eb000689 	bl	22774 <EnterCritical>
   20d4c:	e5953010 	ldr	r3, [r5, #16]
   20d50:	e595600c 	ldr	r6, [r5, #12]
   20d54:	e3530000 	cmp	r3, #0
   20d58:	e5958004 	ldr	r8, [r5, #4]
   20d5c:	0affffe1 	beq	20ce8 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x24>
   20d60:	eb0006b0 	bl	22828 <LeaveCritical>
   20d64:	eaffffdf 	b	20ce8 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x24>
   20d68:	e59f2028 	ldr	r2, [pc, #40]	; 20d98 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd4>
   20d6c:	e59f1028 	ldr	r1, [pc, #40]	; 20d9c <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd8>
   20d70:	e59f0028 	ldr	r0, [pc, #40]	; 20da0 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xdc>
   20d74:	ebffe607 	bl	1a598 <assertion_failed>
   20d78:	eaffffe5 	b	20d14 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x50>
   20d7c:	e3a020ff 	mov	r2, #255	; 0xff
   20d80:	e59f1014 	ldr	r1, [pc, #20]	; 20d9c <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd8>
   20d84:	e59f0018 	ldr	r0, [pc, #24]	; 20da4 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xe0>
   20d88:	ebffe602 	bl	1a598 <assertion_failed>
   20d8c:	eaffffdc 	b	20d04 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x40>
   20d90:	51eb851f 	.word	0x51eb851f
   20d94:	00002710 	.word	0x00002710
   20d98:	00000102 	.word	0x00000102
   20d9c:	00029380 	.word	0x00029380
   20da0:	000293d4 	.word	0x000293d4
   20da4:	000293c4 	.word	0x000293c4

00020da8 <CTimer::GetTimeString()>:
   20da8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20dac:	e1a05000 	mov	r5, r0
   20db0:	e5900010 	ldr	r0, [r0, #16]
   20db4:	e24dd014 	sub	sp, sp, #20
   20db8:	e3500000 	cmp	r0, #0
   20dbc:	1a000065 	bne	20f58 <CTimer::GetTimeString()+0x1b0>
   20dc0:	e595400c 	ldr	r4, [r5, #12]
   20dc4:	e5959004 	ldr	r9, [r5, #4]
   20dc8:	e1940009 	orrs	r0, r4, r9
   20dcc:	0a00003e 	beq	20ecc <CTimer::GetTimeString()+0x124>
   20dd0:	e59f61a0 	ldr	r6, [pc, #416]	; 20f78 <CTimer::GetTimeString()+0x1d0>
   20dd4:	e59f81a0 	ldr	r8, [pc, #416]	; 20f7c <CTimer::GetTimeString()+0x1d4>
   20dd8:	e0873496 	umull	r3, r7, r6, r4
   20ddc:	e1a072a7 	lsr	r7, r7, #5
   20de0:	e0863796 	umull	r3, r6, r6, r7
   20de4:	e59f3194 	ldr	r3, [pc, #404]	; 20f80 <CTimer::GetTimeString()+0x1d8>
   20de8:	e0882498 	umull	r2, r8, r8, r4
   20dec:	e0832493 	umull	r2, r3, r3, r4
   20df0:	e1a062a6 	lsr	r6, r6, #5
   20df4:	e0666206 	rsb	r6, r6, r6, lsl #4
   20df8:	e0672207 	rsb	r2, r7, r7, lsl #4
   20dfc:	e0476106 	sub	r6, r7, r6, lsl #2
   20e00:	e3a0a064 	mov	sl, #100	; 0x64
   20e04:	e0447102 	sub	r7, r4, r2, lsl #2
   20e08:	e3a0be19 	mov	fp, #400	; 0x190
   20e0c:	e59f5170 	ldr	r5, [pc, #368]	; 20f84 <CTimer::GetTimeString()+0x1dc>
   20e10:	e59fe170 	ldr	lr, [pc, #368]	; 20f88 <CTimer::GetTimeString()+0x1e0>
   20e14:	e59fc170 	ldr	ip, [pc, #368]	; 20f8c <CTimer::GetTimeString()+0x1e4>
   20e18:	e59f0170 	ldr	r0, [pc, #368]	; 20f90 <CTimer::GetTimeString()+0x1e8>
   20e1c:	e1a085a8 	lsr	r8, r8, #11
   20e20:	e1a04823 	lsr	r4, r3, #16
   20e24:	ea00000a 	b	20e54 <CTimer::GetTimeString()+0xac>
   20e28:	e001019b 	mul	r1, fp, r1
   20e2c:	e0451001 	sub	r1, r5, r1
   20e30:	e16f1f11 	clz	r1, r1
   20e34:	e1a012a1 	lsr	r1, r1, #5
   20e38:	e3510000 	cmp	r1, #0
   20e3c:	01a0300c 	moveq	r3, ip
   20e40:	11a03000 	movne	r3, r0
   20e44:	e1540003 	cmp	r4, r3
   20e48:	3a000021 	bcc	20ed4 <CTimer::GetTimeString()+0x12c>
   20e4c:	e0444003 	sub	r4, r4, r3
   20e50:	e2855001 	add	r5, r5, #1
   20e54:	e081359e 	umull	r3, r1, lr, r5
   20e58:	e1a032a1 	lsr	r3, r1, #5
   20e5c:	e003039a 	mul	r3, sl, r3
   20e60:	e1550003 	cmp	r5, r3
   20e64:	e1a013a1 	lsr	r1, r1, #7
   20e68:	0affffee 	beq	20e28 <CTimer::GetTimeString()+0x80>
   20e6c:	e3150003 	tst	r5, #3
   20e70:	03a01001 	moveq	r1, #1
   20e74:	13a01000 	movne	r1, #0
   20e78:	eaffffee 	b	20e38 <CTimer::GetTimeString()+0x90>
   20e7c:	e3a03064 	mov	r3, #100	; 0x64
   20e80:	e59fb100 	ldr	fp, [pc, #256]	; 20f88 <CTimer::GetTimeString()+0x1e0>
   20e84:	e3a00010 	mov	r0, #16
   20e88:	e08b299b 	umull	r2, fp, fp, r9
   20e8c:	e1a0b2ab 	lsr	fp, fp, #5
   20e90:	e00b0b93 	mul	fp, r3, fp
   20e94:	eb000690 	bl	228dc <operator new(unsigned int)>
   20e98:	e049b00b 	sub	fp, r9, fp
   20e9c:	e1a09000 	mov	r9, r0
   20ea0:	ebfffa79 	bl	1f88c <CString::CString()>
   20ea4:	e59f30e8 	ldr	r3, [pc, #232]	; 20f94 <CTimer::GetTimeString()+0x1ec>
   20ea8:	e1550003 	cmp	r5, r3
   20eac:	8a000018 	bhi	20f14 <CTimer::GetTimeString()+0x16c>
   20eb0:	e1a00009 	mov	r0, r9
   20eb4:	e88d0880 	stm	sp, {r7, fp}
   20eb8:	e1a03006 	mov	r3, r6
   20ebc:	e1a02008 	mov	r2, r8
   20ec0:	e59f10d0 	ldr	r1, [pc, #208]	; 20f98 <CTimer::GetTimeString()+0x1f0>
   20ec4:	ebfffe5e 	bl	20844 <CString::Format(char const*, ...)>
   20ec8:	e1a00009 	mov	r0, r9
   20ecc:	e28dd014 	add	sp, sp, #20
   20ed0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20ed4:	e3a0a000 	mov	sl, #0
   20ed8:	e3a0001d 	mov	r0, #29
   20edc:	e59f20b8 	ldr	r2, [pc, #184]	; 20f9c <CTimer::GetTimeString()+0x1f4>
   20ee0:	ea000004 	b	20ef8 <CTimer::GetTimeString()+0x150>
   20ee4:	e1a03000 	mov	r3, r0
   20ee8:	e1540003 	cmp	r4, r3
   20eec:	3affffe2 	bcc	20e7c <CTimer::GetTimeString()+0xd4>
   20ef0:	e0444003 	sub	r4, r4, r3
   20ef4:	e28aa001 	add	sl, sl, #1
   20ef8:	e35a0001 	cmp	sl, #1
   20efc:	13a03000 	movne	r3, #0
   20f00:	02013001 	andeq	r3, r1, #1
   20f04:	e3530000 	cmp	r3, #0
   20f08:	1afffff5 	bne	20ee4 <CTimer::GetTimeString()+0x13c>
   20f0c:	e792310a 	ldr	r3, [r2, sl, lsl #2]
   20f10:	eafffff4 	b	20ee8 <CTimer::GetTimeString()+0x140>
   20f14:	e59f3084 	ldr	r3, [pc, #132]	; 20fa0 <CTimer::GetTimeString()+0x1f8>
   20f18:	e58db00c 	str	fp, [sp, #12]
   20f1c:	e0832893 	umull	r2, r3, r3, r8
   20f20:	e1a03223 	lsr	r3, r3, #4
   20f24:	e0833083 	add	r3, r3, r3, lsl #1
   20f28:	e59f2074 	ldr	r2, [pc, #116]	; 20fa4 <CTimer::GetTimeString()+0x1fc>
   20f2c:	e0488183 	sub	r8, r8, r3, lsl #3
   20f30:	e792210a 	ldr	r2, [r2, sl, lsl #2]
   20f34:	e1a00009 	mov	r0, r9
   20f38:	e98d00c0 	stmib	sp, {r6, r7}
   20f3c:	e2843001 	add	r3, r4, #1
   20f40:	e58d8000 	str	r8, [sp]
   20f44:	e59f105c 	ldr	r1, [pc, #92]	; 20fa8 <CTimer::GetTimeString()+0x200>
   20f48:	ebfffe3d 	bl	20844 <CString::Format(char const*, ...)>
   20f4c:	e1a00009 	mov	r0, r9
   20f50:	e28dd014 	add	sp, sp, #20
   20f54:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20f58:	eb000605 	bl	22774 <EnterCritical>
   20f5c:	e5953010 	ldr	r3, [r5, #16]
   20f60:	e595400c 	ldr	r4, [r5, #12]
   20f64:	e3530000 	cmp	r3, #0
   20f68:	e5959004 	ldr	r9, [r5, #4]
   20f6c:	0affff95 	beq	20dc8 <CTimer::GetTimeString()+0x20>
   20f70:	eb00062c 	bl	22828 <LeaveCritical>
   20f74:	eaffff93 	b	20dc8 <CTimer::GetTimeString()+0x20>
   20f78:	88888889 	.word	0x88888889
   20f7c:	91a2b3c5 	.word	0x91a2b3c5
   20f80:	c22e4507 	.word	0xc22e4507
   20f84:	000007b2 	.word	0x000007b2
   20f88:	51eb851f 	.word	0x51eb851f
   20f8c:	0000016d 	.word	0x0000016d
   20f90:	0000016e 	.word	0x0000016e
   20f94:	000007b7 	.word	0x000007b7
   20f98:	00029404 	.word	0x00029404
   20f9c:	00029348 	.word	0x00029348
   20fa0:	aaaaaaab 	.word	0xaaaaaaab
   20fa4:	0002b130 	.word	0x0002b130
   20fa8:	000293e8 	.word	0x000293e8

00020fac <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>:
   20fac:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20fb0:	e1a09000 	mov	r9, r0
   20fb4:	e24dd00c 	sub	sp, sp, #12
   20fb8:	e58d0004 	str	r0, [sp, #4]
   20fbc:	e1a04002 	mov	r4, r2
   20fc0:	e3a00014 	mov	r0, #20
   20fc4:	e1a06001 	mov	r6, r1
   20fc8:	e1a07003 	mov	r7, r3
   20fcc:	e59d5030 	ldr	r5, [sp, #48]	; 0x30
   20fd0:	eb000641 	bl	228dc <operator new(unsigned int)>
   20fd4:	e5991004 	ldr	r1, [r9, #4]
   20fd8:	e3540000 	cmp	r4, #0
   20fdc:	e1a08000 	mov	r8, r0
   20fe0:	e0816006 	add	r6, r1, r6
   20fe4:	0a00003d 	beq	210e0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x134>
   20fe8:	e59d3004 	ldr	r3, [sp, #4]
   20fec:	e59f2100 	ldr	r2, [pc, #256]	; 210f4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x148>
   20ff0:	e593001c 	ldr	r0, [r3, #28]
   20ff4:	e98800d0 	stmib	r8, {r4, r6, r7}
   20ff8:	e3500000 	cmp	r0, #0
   20ffc:	e5885010 	str	r5, [r8, #16]
   21000:	e5882000 	str	r2, [r8]
   21004:	1a000033 	bne	210d8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x12c>
   21008:	e59d3004 	ldr	r3, [sp, #4]
   2100c:	e2835018 	add	r5, r3, #24
   21010:	e1a00005 	mov	r0, r5
   21014:	eb000a65 	bl	239b0 <CPtrList::GetFirst()>
   21018:	e2504000 	subs	r4, r0, #0
   2101c:	0a000028 	beq	210c4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x118>
   21020:	e59f90d0 	ldr	r9, [pc, #208]	; 210f8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x14c>
   21024:	e59f70c8 	ldr	r7, [pc, #200]	; 210f4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x148>
   21028:	e59fb0cc 	ldr	fp, [pc, #204]	; 210fc <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x150>
   2102c:	ea000010 	b	21074 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xc8>
   21030:	e59a3000 	ldr	r3, [sl]
   21034:	e1530007 	cmp	r3, r7
   21038:	0a000003 	beq	2104c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xa0>
   2103c:	e1a0200b 	mov	r2, fp
   21040:	e1a01009 	mov	r1, r9
   21044:	e59f00b4 	ldr	r0, [pc, #180]	; 21100 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x154>
   21048:	ebffe552 	bl	1a598 <assertion_failed>
   2104c:	e59a3008 	ldr	r3, [sl, #8]
   21050:	e1a01004 	mov	r1, r4
   21054:	e0433006 	sub	r3, r3, r6
   21058:	e3530000 	cmp	r3, #0
   2105c:	e1a00005 	mov	r0, r5
   21060:	ca00000d 	bgt	2109c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xf0>
   21064:	eb000a53 	bl	239b8 <CPtrList::GetNext(TPtrListElement*)>
   21068:	e3500000 	cmp	r0, #0
   2106c:	0a000014 	beq	210c4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x118>
   21070:	e1a04000 	mov	r4, r0
   21074:	e1a01004 	mov	r1, r4
   21078:	e1a00005 	mov	r0, r5
   2107c:	eb000a63 	bl	23a10 <CPtrList::GetPtr(TPtrListElement*)>
   21080:	e250a000 	subs	sl, r0, #0
   21084:	1affffe9 	bne	21030 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x84>
   21088:	e59f2074 	ldr	r2, [pc, #116]	; 21104 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x158>
   2108c:	e1a01009 	mov	r1, r9
   21090:	e59f0070 	ldr	r0, [pc, #112]	; 21108 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x15c>
   21094:	ebffe53f 	bl	1a598 <assertion_failed>
   21098:	eaffffe4 	b	21030 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x84>
   2109c:	e1a02008 	mov	r2, r8
   210a0:	eb000a70 	bl	23a68 <CPtrList::InsertBefore(TPtrListElement*, void*)>
   210a4:	e59d3004 	ldr	r3, [sp, #4]
   210a8:	e593301c 	ldr	r3, [r3, #28]
   210ac:	e3530000 	cmp	r3, #0
   210b0:	0a000000 	beq	210b8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x10c>
   210b4:	eb0005db 	bl	22828 <LeaveCritical>
   210b8:	e1a00008 	mov	r0, r8
   210bc:	e28dd00c 	add	sp, sp, #12
   210c0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   210c4:	e1a01004 	mov	r1, r4
   210c8:	e1a00005 	mov	r0, r5
   210cc:	e1a02008 	mov	r2, r8
   210d0:	eb000aa5 	bl	23b6c <CPtrList::InsertAfter(TPtrListElement*, void*)>
   210d4:	eafffff2 	b	210a4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xf8>
   210d8:	eb0005a5 	bl	22774 <EnterCritical>
   210dc:	eaffffc9 	b	21008 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x5c>
   210e0:	e59f2024 	ldr	r2, [pc, #36]	; 2110c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x160>
   210e4:	e59f100c 	ldr	r1, [pc, #12]	; 210f8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x14c>
   210e8:	e59f0020 	ldr	r0, [pc, #32]	; 21110 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x164>
   210ec:	ebffe529 	bl	1a598 <assertion_failed>
   210f0:	eaffffbc 	b	20fe8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x3c>
   210f4:	4b544d43 	.word	0x4b544d43
   210f8:	00029380 	.word	0x00029380
   210fc:	0000016a 	.word	0x0000016a
   21100:	00029428 	.word	0x00029428
   21104:	00000169 	.word	0x00000169
   21108:	00029418 	.word	0x00029418
   2110c:	00000159 	.word	0x00000159
   21110:	00028dc0 	.word	0x00028dc0

00021114 <CTimer::CancelKernelTimer(unsigned int)>:
   21114:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   21118:	e2514000 	subs	r4, r1, #0
   2111c:	e1a05000 	mov	r5, r0
   21120:	0a00001f 	beq	211a4 <CTimer::CancelKernelTimer(unsigned int)+0x90>
   21124:	e595001c 	ldr	r0, [r5, #28]
   21128:	e3500000 	cmp	r0, #0
   2112c:	1a00001a 	bne	2119c <CTimer::CancelKernelTimer(unsigned int)+0x88>
   21130:	e2856018 	add	r6, r5, #24
   21134:	e1a00006 	mov	r0, r6
   21138:	e1a01004 	mov	r1, r4
   2113c:	eb000b1b 	bl	23db0 <CPtrList::Find(void*)>
   21140:	e2507000 	subs	r7, r0, #0
   21144:	0a00000f 	beq	21188 <CTimer::CancelKernelTimer(unsigned int)+0x74>
   21148:	e59f3068 	ldr	r3, [pc, #104]	; 211b8 <CTimer::CancelKernelTimer(unsigned int)+0xa4>
   2114c:	e5942000 	ldr	r2, [r4]
   21150:	e1520003 	cmp	r2, r3
   21154:	0a000003 	beq	21168 <CTimer::CancelKernelTimer(unsigned int)+0x54>
   21158:	e59f205c 	ldr	r2, [pc, #92]	; 211bc <CTimer::CancelKernelTimer(unsigned int)+0xa8>
   2115c:	e59f105c 	ldr	r1, [pc, #92]	; 211c0 <CTimer::CancelKernelTimer(unsigned int)+0xac>
   21160:	e59f005c 	ldr	r0, [pc, #92]	; 211c4 <CTimer::CancelKernelTimer(unsigned int)+0xb0>
   21164:	ebffe50b 	bl	1a598 <assertion_failed>
   21168:	e1a01007 	mov	r1, r7
   2116c:	e1a00006 	mov	r0, r6
   21170:	eb000abb 	bl	23c64 <CPtrList::Remove(TPtrListElement*)>
   21174:	e3a03000 	mov	r3, #0
   21178:	e1a00004 	mov	r0, r4
   2117c:	e5843000 	str	r3, [r4]
   21180:	e3a01014 	mov	r1, #20
   21184:	eb0005d8 	bl	228ec <operator delete(void*, unsigned int)>
   21188:	e595301c 	ldr	r3, [r5, #28]
   2118c:	e3530000 	cmp	r3, #0
   21190:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   21194:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   21198:	ea0005a2 	b	22828 <LeaveCritical>
   2119c:	eb000574 	bl	22774 <EnterCritical>
   211a0:	eaffffe2 	b	21130 <CTimer::CancelKernelTimer(unsigned int)+0x1c>
   211a4:	e59f201c 	ldr	r2, [pc, #28]	; 211c8 <CTimer::CancelKernelTimer(unsigned int)+0xb4>
   211a8:	e59f1010 	ldr	r1, [pc, #16]	; 211c0 <CTimer::CancelKernelTimer(unsigned int)+0xac>
   211ac:	e59f0018 	ldr	r0, [pc, #24]	; 211cc <CTimer::CancelKernelTimer(unsigned int)+0xb8>
   211b0:	ebffe4f8 	bl	1a598 <assertion_failed>
   211b4:	eaffffda 	b	21124 <CTimer::CancelKernelTimer(unsigned int)+0x10>
   211b8:	4b544d43 	.word	0x4b544d43
   211bc:	0000018d 	.word	0x0000018d
   211c0:	00029380 	.word	0x00029380
   211c4:	0002939c 	.word	0x0002939c
   211c8:	00000186 	.word	0x00000186
   211cc:	000264cc 	.word	0x000264cc

000211d0 <CTimer::PollKernelTimers()>:
   211d0:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   211d4:	e1a05000 	mov	r5, r0
   211d8:	e590001c 	ldr	r0, [r0, #28]
   211dc:	e3500000 	cmp	r0, #0
   211e0:	1a00004a 	bne	21310 <CTimer::PollKernelTimers()+0x140>
   211e4:	e2856018 	add	r6, r5, #24
   211e8:	e1a00006 	mov	r0, r6
   211ec:	eb0009ef 	bl	239b0 <CPtrList::GetFirst()>
   211f0:	e2504000 	subs	r4, r0, #0
   211f4:	0a00003b 	beq	212e8 <CTimer::PollKernelTimers()+0x118>
   211f8:	e59f9118 	ldr	r9, [pc, #280]	; 21318 <CTimer::PollKernelTimers()+0x148>
   211fc:	e59f8118 	ldr	r8, [pc, #280]	; 2131c <CTimer::PollKernelTimers()+0x14c>
   21200:	e59fa118 	ldr	sl, [pc, #280]	; 21320 <CTimer::PollKernelTimers()+0x150>
   21204:	ea000010 	b	2124c <CTimer::PollKernelTimers()+0x7c>
   21208:	e5974004 	ldr	r4, [r7, #4]
   2120c:	e3540000 	cmp	r4, #0
   21210:	0a00002c 	beq	212c8 <CTimer::PollKernelTimers()+0xf8>
   21214:	e5972010 	ldr	r2, [r7, #16]
   21218:	e597100c 	ldr	r1, [r7, #12]
   2121c:	e1a00007 	mov	r0, r7
   21220:	e12fff34 	blx	r4
   21224:	e3a03000 	mov	r3, #0
   21228:	e1a00007 	mov	r0, r7
   2122c:	e5873000 	str	r3, [r7]
   21230:	e3a01014 	mov	r1, #20
   21234:	eb0005ac 	bl	228ec <operator delete(void*, unsigned int)>
   21238:	e595001c 	ldr	r0, [r5, #28]
   2123c:	e3500000 	cmp	r0, #0
   21240:	1a000025 	bne	212dc <CTimer::PollKernelTimers()+0x10c>
   21244:	e25b4000 	subs	r4, fp, #0
   21248:	0a000026 	beq	212e8 <CTimer::PollKernelTimers()+0x118>
   2124c:	e1a01004 	mov	r1, r4
   21250:	e1a00006 	mov	r0, r6
   21254:	eb0009ed 	bl	23a10 <CPtrList::GetPtr(TPtrListElement*)>
   21258:	e2507000 	subs	r7, r0, #0
   2125c:	0a000026 	beq	212fc <CTimer::PollKernelTimers()+0x12c>
   21260:	e5973000 	ldr	r3, [r7]
   21264:	e1530008 	cmp	r3, r8
   21268:	0a000003 	beq	2127c <CTimer::PollKernelTimers()+0xac>
   2126c:	e59f20b0 	ldr	r2, [pc, #176]	; 21324 <CTimer::PollKernelTimers()+0x154>
   21270:	e1a01009 	mov	r1, r9
   21274:	e1a0000a 	mov	r0, sl
   21278:	ebffe4c6 	bl	1a598 <assertion_failed>
   2127c:	e5952004 	ldr	r2, [r5, #4]
   21280:	e5973008 	ldr	r3, [r7, #8]
   21284:	e0433002 	sub	r3, r3, r2
   21288:	e3530000 	cmp	r3, #0
   2128c:	ca000015 	bgt	212e8 <CTimer::PollKernelTimers()+0x118>
   21290:	e1a01004 	mov	r1, r4
   21294:	e1a00006 	mov	r0, r6
   21298:	eb0009c6 	bl	239b8 <CPtrList::GetNext(TPtrListElement*)>
   2129c:	e1a01004 	mov	r1, r4
   212a0:	e1a0b000 	mov	fp, r0
   212a4:	e1a00006 	mov	r0, r6
   212a8:	eb000a6d 	bl	23c64 <CPtrList::Remove(TPtrListElement*)>
   212ac:	e595301c 	ldr	r3, [r5, #28]
   212b0:	e3530000 	cmp	r3, #0
   212b4:	0affffd3 	beq	21208 <CTimer::PollKernelTimers()+0x38>
   212b8:	eb00055a 	bl	22828 <LeaveCritical>
   212bc:	e5974004 	ldr	r4, [r7, #4]
   212c0:	e3540000 	cmp	r4, #0
   212c4:	1affffd2 	bne	21214 <CTimer::PollKernelTimers()+0x44>
   212c8:	e59f2058 	ldr	r2, [pc, #88]	; 21328 <CTimer::PollKernelTimers()+0x158>
   212cc:	e1a01009 	mov	r1, r9
   212d0:	e59f0054 	ldr	r0, [pc, #84]	; 2132c <CTimer::PollKernelTimers()+0x15c>
   212d4:	ebffe4af 	bl	1a598 <assertion_failed>
   212d8:	eaffffcd 	b	21214 <CTimer::PollKernelTimers()+0x44>
   212dc:	eb000524 	bl	22774 <EnterCritical>
   212e0:	e25b4000 	subs	r4, fp, #0
   212e4:	1affffd8 	bne	2124c <CTimer::PollKernelTimers()+0x7c>
   212e8:	e595301c 	ldr	r3, [r5, #28]
   212ec:	e3530000 	cmp	r3, #0
   212f0:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   212f4:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   212f8:	ea00054a 	b	22828 <LeaveCritical>
   212fc:	e59f202c 	ldr	r2, [pc, #44]	; 21330 <CTimer::PollKernelTimers()+0x160>
   21300:	e1a01009 	mov	r1, r9
   21304:	e59f0028 	ldr	r0, [pc, #40]	; 21334 <CTimer::PollKernelTimers()+0x164>
   21308:	ebffe4a2 	bl	1a598 <assertion_failed>
   2130c:	eaffffd3 	b	21260 <CTimer::PollKernelTimers()+0x90>
   21310:	eb000517 	bl	22774 <EnterCritical>
   21314:	eaffffb2 	b	211e4 <CTimer::PollKernelTimers()+0x14>
   21318:	00029380 	.word	0x00029380
   2131c:	4b544d43 	.word	0x4b544d43
   21320:	0002939c 	.word	0x0002939c
   21324:	000001a3 	.word	0x000001a3
   21328:	000001b1 	.word	0x000001b1
   2132c:	00028dc0 	.word	0x00028dc0
   21330:	000001a2 	.word	0x000001a2
   21334:	000264cc 	.word	0x000264cc

00021338 <CTimer::InterruptHandler()>:
   21338:	e92d4010 	push	{r4, lr}
   2133c:	e3a03000 	mov	r3, #0
   21340:	e1a04000 	mov	r4, r0
   21344:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   21348:	e59f20e4 	ldr	r2, [pc, #228]	; 21434 <CTimer::InterruptHandler()+0xfc>
   2134c:	e5923018 	ldr	r3, [r2, #24]
   21350:	e2833c27 	add	r3, r3, #9984	; 0x2700
   21354:	e2833010 	add	r3, r3, #16
   21358:	e5823018 	str	r3, [r2, #24]
   2135c:	e5921004 	ldr	r1, [r2, #4]
   21360:	e1530001 	cmp	r3, r1
   21364:	e3a01008 	mov	r1, #8
   21368:	35923004 	ldrcc	r3, [r2, #4]
   2136c:	32833c27 	addcc	r3, r3, #9984	; 0x2700
   21370:	32833010 	addcc	r3, r3, #16
   21374:	35823018 	strcc	r3, [r2, #24]
   21378:	e59f20b4 	ldr	r2, [pc, #180]	; 21434 <CTimer::InterruptHandler()+0xfc>
   2137c:	e3a03000 	mov	r3, #0
   21380:	e5821000 	str	r1, [r2]
   21384:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   21388:	e5900010 	ldr	r0, [r0, #16]
   2138c:	e1500003 	cmp	r0, r3
   21390:	1a00001a 	bne	21400 <CTimer::InterruptHandler()+0xc8>
   21394:	e3a01064 	mov	r1, #100	; 0x64
   21398:	e5942004 	ldr	r2, [r4, #4]
   2139c:	e59f3094 	ldr	r3, [pc, #148]	; 21438 <CTimer::InterruptHandler()+0x100>
   213a0:	e2822001 	add	r2, r2, #1
   213a4:	e0830293 	umull	r0, r3, r3, r2
   213a8:	e1a032a3 	lsr	r3, r3, #5
   213ac:	e0030391 	mul	r3, r1, r3
   213b0:	e0523003 	subs	r3, r2, r3
   213b4:	e5842004 	str	r2, [r4, #4]
   213b8:	1a000007 	bne	213dc <CTimer::InterruptHandler()+0xa4>
   213bc:	e5942008 	ldr	r2, [r4, #8]
   213c0:	e2822001 	add	r2, r2, #1
   213c4:	e5842008 	str	r2, [r4, #8]
   213c8:	e594200c 	ldr	r2, [r4, #12]
   213cc:	e2822001 	add	r2, r2, #1
   213d0:	e584200c 	str	r2, [r4, #12]
   213d4:	e3530000 	cmp	r3, #0
   213d8:	1a000006 	bne	213f8 <CTimer::InterruptHandler()+0xc0>
   213dc:	e1a00004 	mov	r0, r4
   213e0:	ebffff7a 	bl	211d0 <CTimer::PollKernelTimers()>
   213e4:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   213e8:	e3530000 	cmp	r3, #0
   213ec:	08bd8010 	popeq	{r4, pc}
   213f0:	e8bd4010 	pop	{r4, lr}
   213f4:	e12fff13 	bx	r3
   213f8:	eb00050a 	bl	22828 <LeaveCritical>
   213fc:	eafffff6 	b	213dc <CTimer::InterruptHandler()+0xa4>
   21400:	eb0004db 	bl	22774 <EnterCritical>
   21404:	e3a01064 	mov	r1, #100	; 0x64
   21408:	e5943004 	ldr	r3, [r4, #4]
   2140c:	e59f2024 	ldr	r2, [pc, #36]	; 21438 <CTimer::InterruptHandler()+0x100>
   21410:	e2833001 	add	r3, r3, #1
   21414:	e0820392 	umull	r0, r2, r2, r3
   21418:	e1a022a2 	lsr	r2, r2, #5
   2141c:	e0020291 	mul	r2, r1, r2
   21420:	e1530002 	cmp	r3, r2
   21424:	e5843004 	str	r3, [r4, #4]
   21428:	e5943010 	ldr	r3, [r4, #16]
   2142c:	1affffe8 	bne	213d4 <CTimer::InterruptHandler()+0x9c>
   21430:	eaffffe1 	b	213bc <CTimer::InterruptHandler()+0x84>
   21434:	20003000 	.word	0x20003000
   21438:	51eb851f 	.word	0x51eb851f

0002143c <CTimer::InterruptHandler(void*)>:
   2143c:	e92d4010 	push	{r4, lr}
   21440:	e2504000 	subs	r4, r0, #0
   21444:	0a000002 	beq	21454 <CTimer::InterruptHandler(void*)+0x18>
   21448:	e1a00004 	mov	r0, r4
   2144c:	e8bd4010 	pop	{r4, lr}
   21450:	eaffffb8 	b	21338 <CTimer::InterruptHandler()>
   21454:	e59f0014 	ldr	r0, [pc, #20]	; 21470 <CTimer::InterruptHandler(void*)+0x34>
   21458:	e59f2014 	ldr	r2, [pc, #20]	; 21474 <CTimer::InterruptHandler(void*)+0x38>
   2145c:	e59f1014 	ldr	r1, [pc, #20]	; 21478 <CTimer::InterruptHandler(void*)+0x3c>
   21460:	ebffe44c 	bl	1a598 <assertion_failed>
   21464:	e1a00004 	mov	r0, r4
   21468:	e8bd4010 	pop	{r4, lr}
   2146c:	eaffffb1 	b	21338 <CTimer::InterruptHandler()>
   21470:	000240a0 	.word	0x000240a0
   21474:	000001ea 	.word	0x000001ea
   21478:	00029380 	.word	0x00029380

0002147c <CTimer::TuneMsDelay()>:
   2147c:	e92d4070 	push	{r4, r5, r6, lr}
   21480:	e1a05000 	mov	r5, r0
   21484:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   21488:	e5953020 	ldr	r3, [r5, #32]
   2148c:	e24dd008 	sub	sp, sp, #8
   21490:	e0000390 	mul	r0, r0, r3
   21494:	e5954004 	ldr	r4, [r5, #4]
   21498:	eb000850 	bl	235e0 <DelayLoop>
   2149c:	e5951004 	ldr	r1, [r5, #4]
   214a0:	e59f0068 	ldr	r0, [pc, #104]	; 21510 <CTimer::TuneMsDelay()+0x94>
   214a4:	e0411004 	sub	r1, r1, r4
   214a8:	eb000a5f 	bl	23e2c <__aeabi_uidiv>
   214ac:	e5953020 	ldr	r3, [r5, #32]
   214b0:	e59f405c 	ldr	r4, [pc, #92]	; 21514 <CTimer::TuneMsDelay()+0x98>
   214b4:	e0030093 	mul	r3, r3, r0
   214b8:	e0832394 	umull	r2, r3, r4, r3
   214bc:	e59f1054 	ldr	r1, [pc, #84]	; 21518 <CTimer::TuneMsDelay()+0x9c>
   214c0:	e1a032a3 	lsr	r3, r3, #5
   214c4:	e2832f7d 	add	r2, r3, #500	; 0x1f4
   214c8:	e0821291 	umull	r1, r2, r1, r2
   214cc:	e1a06000 	mov	r6, r0
   214d0:	e1a02322 	lsr	r2, r2, #6
   214d4:	e5852024 	str	r2, [r5, #36]	; 0x24
   214d8:	e5853020 	str	r3, [r5, #32]
   214dc:	ebffee20 	bl	1cd64 <CLogger::Get()>
   214e0:	e3a03064 	mov	r3, #100	; 0x64
   214e4:	e0842694 	umull	r2, r4, r4, r6
   214e8:	e1a042a4 	lsr	r4, r4, #5
   214ec:	e0030493 	mul	r3, r3, r4
   214f0:	e0466003 	sub	r6, r6, r3
   214f4:	e88d0050 	stm	sp, {r4, r6}
   214f8:	e59f301c 	ldr	r3, [pc, #28]	; 2151c <CTimer::TuneMsDelay()+0xa0>
   214fc:	e3a02003 	mov	r2, #3
   21500:	e59f1018 	ldr	r1, [pc, #24]	; 21520 <CTimer::TuneMsDelay()+0xa4>
   21504:	ebffefbf 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   21508:	e28dd008 	add	sp, sp, #8
   2150c:	e8bd8070 	pop	{r4, r5, r6, pc}
   21510:	00002710 	.word	0x00002710
   21514:	51eb851f 	.word	0x51eb851f
   21518:	10624dd3 	.word	0x10624dd3
   2151c:	00029450 	.word	0x00029450
   21520:	00029378 	.word	0x00029378

00021524 <CTimer::Initialize()>:
   21524:	e92d4070 	push	{r4, r5, r6, lr}
   21528:	e1a04000 	mov	r4, r0
   2152c:	e5900000 	ldr	r0, [r0]
   21530:	e3500000 	cmp	r0, #0
   21534:	0a000011 	beq	21580 <CTimer::Initialize()+0x5c>
   21538:	e1a03004 	mov	r3, r4
   2153c:	e59f2054 	ldr	r2, [pc, #84]	; 21598 <CTimer::Initialize()+0x74>
   21540:	e3a01003 	mov	r1, #3
   21544:	ebffeb6d 	bl	1c300 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   21548:	e3a05000 	mov	r5, #0
   2154c:	ee075f9a 	mcr	15, 0, r5, cr7, cr10, {4}
   21550:	e59f2044 	ldr	r2, [pc, #68]	; 2159c <CTimer::Initialize()+0x78>
   21554:	e59f3044 	ldr	r3, [pc, #68]	; 215a0 <CTimer::Initialize()+0x7c>
   21558:	e1a00004 	mov	r0, r4
   2155c:	e5823004 	str	r3, [r2, #4]
   21560:	e5923004 	ldr	r3, [r2, #4]
   21564:	e2833c27 	add	r3, r3, #9984	; 0x2700
   21568:	e2833010 	add	r3, r3, #16
   2156c:	e5823018 	str	r3, [r2, #24]
   21570:	ebffffc1 	bl	2147c <CTimer::TuneMsDelay()>
   21574:	ee075fba 	mcr	15, 0, r5, cr7, cr10, {5}
   21578:	e3a00001 	mov	r0, #1
   2157c:	e8bd8070 	pop	{r4, r5, r6, pc}
   21580:	e59f001c 	ldr	r0, [pc, #28]	; 215a4 <CTimer::Initialize()+0x80>
   21584:	e3a02057 	mov	r2, #87	; 0x57
   21588:	e59f1018 	ldr	r1, [pc, #24]	; 215a8 <CTimer::Initialize()+0x84>
   2158c:	ebffe401 	bl	1a598 <assertion_failed>
   21590:	e5940000 	ldr	r0, [r4]
   21594:	eaffffe7 	b	21538 <CTimer::Initialize()+0x14>
   21598:	0002143c 	.word	0x0002143c
   2159c:	20003000 	.word	0x20003000
   215a0:	fe363c80 	.word	0xfe363c80
   215a4:	000240d8 	.word	0x000240d8
   215a8:	00029380 	.word	0x00029380

000215ac <CTimer::RegisterPeriodicHandler(void (*)())>:
   215ac:	e5903028 	ldr	r3, [r0, #40]	; 0x28
   215b0:	e92d4070 	push	{r4, r5, r6, lr}
   215b4:	e3530000 	cmp	r3, #0
   215b8:	e1a04000 	mov	r4, r0
   215bc:	e1a05001 	mov	r5, r1
   215c0:	0a000003 	beq	215d4 <CTimer::RegisterPeriodicHandler(void (*)())+0x28>
   215c4:	e3a02c02 	mov	r2, #512	; 0x200
   215c8:	e59f1024 	ldr	r1, [pc, #36]	; 215f4 <CTimer::RegisterPeriodicHandler(void (*)())+0x48>
   215cc:	e59f0024 	ldr	r0, [pc, #36]	; 215f8 <CTimer::RegisterPeriodicHandler(void (*)())+0x4c>
   215d0:	ebffe3f0 	bl	1a598 <assertion_failed>
   215d4:	e3550000 	cmp	r5, #0
   215d8:	e5845028 	str	r5, [r4, #40]	; 0x28
   215dc:	18bd8070 	popne	{r4, r5, r6, pc}
   215e0:	e59f2014 	ldr	r2, [pc, #20]	; 215fc <CTimer::RegisterPeriodicHandler(void (*)())+0x50>
   215e4:	e59f1008 	ldr	r1, [pc, #8]	; 215f4 <CTimer::RegisterPeriodicHandler(void (*)())+0x48>
   215e8:	e59f0010 	ldr	r0, [pc, #16]	; 21600 <CTimer::RegisterPeriodicHandler(void (*)())+0x54>
   215ec:	e8bd4070 	pop	{r4, r5, r6, lr}
   215f0:	eaffe3e8 	b	1a598 <assertion_failed>
   215f4:	00029380 	.word	0x00029380
   215f8:	00029468 	.word	0x00029468
   215fc:	00000202 	.word	0x00000202
   21600:	00029480 	.word	0x00029480

00021604 <CTimer::SimpleMsDelay(unsigned int)>:
   21604:	e3500000 	cmp	r0, #0
   21608:	012fff1e 	bxeq	lr
   2160c:	e3a03ffa 	mov	r3, #1000	; 0x3e8
   21610:	e0000093 	mul	r0, r3, r0
   21614:	e3500000 	cmp	r0, #0
   21618:	012fff1e 	bxeq	lr
   2161c:	eafffccf 	b	20960 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]>

00021620 <CTimer::SimpleusDelay(unsigned int)>:
   21620:	e3500000 	cmp	r0, #0
   21624:	012fff1e 	bxeq	lr
   21628:	eafffccc 	b	20960 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]>

0002162c <CTimer::IsLeapYear(unsigned int)>:
   2162c:	e3a02064 	mov	r2, #100	; 0x64
   21630:	e59f303c 	ldr	r3, [pc, #60]	; 21674 <CTimer::IsLeapYear(unsigned int)+0x48>
   21634:	e0831093 	umull	r1, r3, r3, r0
   21638:	e1a012a3 	lsr	r1, r3, #5
   2163c:	e0020192 	mul	r2, r2, r1
   21640:	e1500002 	cmp	r0, r2
   21644:	0a000003 	beq	21658 <CTimer::IsLeapYear(unsigned int)+0x2c>
   21648:	e3100003 	tst	r0, #3
   2164c:	03a00001 	moveq	r0, #1
   21650:	13a00000 	movne	r0, #0
   21654:	e12fff1e 	bx	lr
   21658:	e3a02e19 	mov	r2, #400	; 0x190
   2165c:	e1a033a3 	lsr	r3, r3, #7
   21660:	e0030392 	mul	r3, r2, r3
   21664:	e0400003 	sub	r0, r0, r3
   21668:	e16f0f10 	clz	r0, r0
   2166c:	e1a002a0 	lsr	r0, r0, #5
   21670:	e12fff1e 	bx	lr
   21674:	51eb851f 	.word	0x51eb851f

00021678 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)>:
   21678:	e3500001 	cmp	r0, #1
   2167c:	0a000002 	beq	2168c <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x14>
   21680:	e59f3058 	ldr	r3, [pc, #88]	; 216e0 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x68>
   21684:	e7930100 	ldr	r0, [r3, r0, lsl #2]
   21688:	e12fff1e 	bx	lr
   2168c:	e3a02064 	mov	r2, #100	; 0x64
   21690:	e59f304c 	ldr	r3, [pc, #76]	; 216e4 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x6c>
   21694:	e083c193 	umull	ip, r3, r3, r1
   21698:	e1a0c2a3 	lsr	ip, r3, #5
   2169c:	e0020c92 	mul	r2, r2, ip
   216a0:	e1510002 	cmp	r1, r2
   216a4:	0a000006 	beq	216c4 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x4c>
   216a8:	e3110003 	tst	r1, #3
   216ac:	03a01001 	moveq	r1, #1
   216b0:	13a01000 	movne	r1, #0
   216b4:	e3510000 	cmp	r1, #0
   216b8:	0afffff0 	beq	21680 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x8>
   216bc:	e3a0001d 	mov	r0, #29
   216c0:	e12fff1e 	bx	lr
   216c4:	e3a02e19 	mov	r2, #400	; 0x190
   216c8:	e1a033a3 	lsr	r3, r3, #7
   216cc:	e0030392 	mul	r3, r2, r3
   216d0:	e0411003 	sub	r1, r1, r3
   216d4:	e16f1f11 	clz	r1, r1
   216d8:	e1a012a1 	lsr	r1, r1, #5
   216dc:	eafffff4 	b	216b4 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x3c>
   216e0:	00029348 	.word	0x00029348
   216e4:	51eb851f 	.word	0x51eb851f

000216e8 <CTimer::Get()>:
   216e8:	e92d4010 	push	{r4, lr}
   216ec:	e59f4020 	ldr	r4, [pc, #32]	; 21714 <CTimer::Get()+0x2c>
   216f0:	e5940000 	ldr	r0, [r4]
   216f4:	e3500000 	cmp	r0, #0
   216f8:	18bd8010 	popne	{r4, pc}
   216fc:	e59f2014 	ldr	r2, [pc, #20]	; 21718 <CTimer::Get()+0x30>
   21700:	e59f1014 	ldr	r1, [pc, #20]	; 2171c <CTimer::Get()+0x34>
   21704:	e59f0014 	ldr	r0, [pc, #20]	; 21720 <CTimer::Get()+0x38>
   21708:	ebffe3a2 	bl	1a598 <assertion_failed>
   2170c:	e5940000 	ldr	r0, [r4]
   21710:	e8bd8010 	pop	{r4, pc}
   21714:	0002b298 	.word	0x0002b298
   21718:	0000023e 	.word	0x0000023e
   2171c:	00029380 	.word	0x00029380
   21720:	00023f5c 	.word	0x00023f5c

00021724 <memset>:
   21724:	e3520000 	cmp	r2, #0
   21728:	012fff1e 	bxeq	lr
   2172c:	e1a03000 	mov	r3, r0
   21730:	e6af1071 	sxtb	r1, r1
   21734:	e0802002 	add	r2, r0, r2
   21738:	e4c31001 	strb	r1, [r3], #1
   2173c:	e1530002 	cmp	r3, r2
   21740:	1afffffc 	bne	21738 <memset+0x14>
   21744:	e12fff1e 	bx	lr

00021748 <memcmp>:
   21748:	e3520000 	cmp	r2, #0
   2174c:	0a00000e 	beq	2178c <memcmp+0x44>
   21750:	e5d0c000 	ldrb	ip, [r0]
   21754:	e5d13000 	ldrb	r3, [r1]
   21758:	e15c0003 	cmp	ip, r3
   2175c:	ca00000c 	bgt	21794 <memcmp+0x4c>
   21760:	ba00000d 	blt	2179c <memcmp+0x54>
   21764:	e0812002 	add	r2, r1, r2
   21768:	e2811001 	add	r1, r1, #1
   2176c:	ea000004 	b	21784 <memcmp+0x3c>
   21770:	e5f0c001 	ldrb	ip, [r0, #1]!
   21774:	e4d13001 	ldrb	r3, [r1], #1
   21778:	e15c0003 	cmp	ip, r3
   2177c:	ca000004 	bgt	21794 <memcmp+0x4c>
   21780:	ba000005 	blt	2179c <memcmp+0x54>
   21784:	e1510002 	cmp	r1, r2
   21788:	1afffff8 	bne	21770 <memcmp+0x28>
   2178c:	e3a00000 	mov	r0, #0
   21790:	e12fff1e 	bx	lr
   21794:	e3a00001 	mov	r0, #1
   21798:	e12fff1e 	bx	lr
   2179c:	e3e00000 	mvn	r0, #0
   217a0:	e12fff1e 	bx	lr

000217a4 <strlen>:
   217a4:	e1d010d0 	ldrsb	r1, [r0]
   217a8:	e2803001 	add	r3, r0, #1
   217ac:	e3510000 	cmp	r1, #0
   217b0:	0a000003 	beq	217c4 <strlen+0x20>
   217b4:	e0431000 	sub	r1, r3, r0
   217b8:	e0d320d1 	ldrsb	r2, [r3], #1
   217bc:	e3520000 	cmp	r2, #0
   217c0:	1afffffb 	bne	217b4 <strlen+0x10>
   217c4:	e1a00001 	mov	r0, r1
   217c8:	e12fff1e 	bx	lr

000217cc <strcmp>:
   217cc:	e1d030d0 	ldrsb	r3, [r0]
   217d0:	e1d120d0 	ldrsb	r2, [r1]
   217d4:	e3530000 	cmp	r3, #0
   217d8:	1a000007 	bne	217fc <strcmp+0x30>
   217dc:	ea000008 	b	21804 <strcmp+0x38>
   217e0:	e1530002 	cmp	r3, r2
   217e4:	ca00000b 	bgt	21818 <strcmp+0x4c>
   217e8:	ba00000c 	blt	21820 <strcmp+0x54>
   217ec:	e1f030d1 	ldrsb	r3, [r0, #1]!
   217f0:	e3530000 	cmp	r3, #0
   217f4:	0a00000b 	beq	21828 <strcmp+0x5c>
   217f8:	e1f120d1 	ldrsb	r2, [r1, #1]!
   217fc:	e3520000 	cmp	r2, #0
   21800:	1afffff6 	bne	217e0 <strcmp+0x14>
   21804:	e1530002 	cmp	r3, r2
   21808:	ca000002 	bgt	21818 <strcmp+0x4c>
   2180c:	b3e00000 	mvnlt	r0, #0
   21810:	a3a00000 	movge	r0, #0
   21814:	e12fff1e 	bx	lr
   21818:	e3a00001 	mov	r0, #1
   2181c:	e12fff1e 	bx	lr
   21820:	e3e00000 	mvn	r0, #0
   21824:	e12fff1e 	bx	lr
   21828:	e1d120d1 	ldrsb	r2, [r1, #1]
   2182c:	e1530002 	cmp	r3, r2
   21830:	dafffff5 	ble	2180c <strcmp+0x40>
   21834:	eafffff7 	b	21818 <strcmp+0x4c>

00021838 <strcasecmp>:
   21838:	e2400001 	sub	r0, r0, #1
   2183c:	e1f030d1 	ldrsb	r3, [r0, #1]!
   21840:	e2432061 	sub	r2, r3, #97	; 0x61
   21844:	e3520019 	cmp	r2, #25
   21848:	92433020 	subls	r3, r3, #32
   2184c:	e3530000 	cmp	r3, #0
   21850:	0a00001f 	beq	218d4 <strcasecmp+0x9c>
   21854:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   21858:	e0d120d1 	ldrsb	r2, [r1], #1
   2185c:	e242c061 	sub	ip, r2, #97	; 0x61
   21860:	e35c0019 	cmp	ip, #25
   21864:	81a0e002 	movhi	lr, r2
   21868:	9242e020 	subls	lr, r2, #32
   2186c:	e35e0000 	cmp	lr, #0
   21870:	1a000006 	bne	21890 <strcasecmp+0x58>
   21874:	e35c0019 	cmp	ip, #25
   21878:	92422020 	subls	r2, r2, #32
   2187c:	e1530002 	cmp	r3, r2
   21880:	ca000011 	bgt	218cc <strcasecmp+0x94>
   21884:	b3e00000 	mvnlt	r0, #0
   21888:	a3a00000 	movge	r0, #0
   2188c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   21890:	e153000e 	cmp	r3, lr
   21894:	ca00000c 	bgt	218cc <strcasecmp+0x94>
   21898:	ba000016 	blt	218f8 <strcasecmp+0xc0>
   2189c:	e1f030d1 	ldrsb	r3, [r0, #1]!
   218a0:	e2432061 	sub	r2, r3, #97	; 0x61
   218a4:	e3520019 	cmp	r2, #25
   218a8:	92433020 	subls	r3, r3, #32
   218ac:	e3530000 	cmp	r3, #0
   218b0:	1affffe8 	bne	21858 <strcasecmp+0x20>
   218b4:	e1d120d0 	ldrsb	r2, [r1]
   218b8:	e242c061 	sub	ip, r2, #97	; 0x61
   218bc:	e35c0019 	cmp	ip, #25
   218c0:	92422020 	subls	r2, r2, #32
   218c4:	e1530002 	cmp	r3, r2
   218c8:	daffffed 	ble	21884 <strcasecmp+0x4c>
   218cc:	e3a00001 	mov	r0, #1
   218d0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   218d4:	e1d120d0 	ldrsb	r2, [r1]
   218d8:	e242c061 	sub	ip, r2, #97	; 0x61
   218dc:	e35c0019 	cmp	ip, #25
   218e0:	92422020 	subls	r2, r2, #32
   218e4:	e1530002 	cmp	r3, r2
   218e8:	ca000004 	bgt	21900 <strcasecmp+0xc8>
   218ec:	b3e00000 	mvnlt	r0, #0
   218f0:	a3a00000 	movge	r0, #0
   218f4:	e12fff1e 	bx	lr
   218f8:	e3e00000 	mvn	r0, #0
   218fc:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   21900:	e3a00001 	mov	r0, #1
   21904:	e12fff1e 	bx	lr

00021908 <strncmp>:
   21908:	e3520000 	cmp	r2, #0
   2190c:	0a000016 	beq	2196c <strncmp+0x64>
   21910:	e1d030d0 	ldrsb	r3, [r0]
   21914:	e1d1c0d0 	ldrsb	ip, [r1]
   21918:	e3530000 	cmp	r3, #0
   2191c:	0a000015 	beq	21978 <strncmp+0x70>
   21920:	e35c0000 	cmp	ip, #0
   21924:	0a000013 	beq	21978 <strncmp+0x70>
   21928:	e15c0003 	cmp	ip, r3
   2192c:	ba000016 	blt	2198c <strncmp+0x84>
   21930:	d0802002 	addle	r2, r0, r2
   21934:	d2800001 	addle	r0, r0, #1
   21938:	da000009 	ble	21964 <strncmp+0x5c>
   2193c:	ea000014 	b	21994 <strncmp+0x8c>
   21940:	e0d030d1 	ldrsb	r3, [r0], #1
   21944:	e3530000 	cmp	r3, #0
   21948:	0a000009 	beq	21974 <strncmp+0x6c>
   2194c:	e1f1c0d1 	ldrsb	ip, [r1, #1]!
   21950:	e35c0000 	cmp	ip, #0
   21954:	0a000007 	beq	21978 <strncmp+0x70>
   21958:	e153000c 	cmp	r3, ip
   2195c:	ca00000a 	bgt	2198c <strncmp+0x84>
   21960:	ba00000b 	blt	21994 <strncmp+0x8c>
   21964:	e1500002 	cmp	r0, r2
   21968:	1afffff4 	bne	21940 <strncmp+0x38>
   2196c:	e3a00000 	mov	r0, #0
   21970:	e12fff1e 	bx	lr
   21974:	e1d1c0d1 	ldrsb	ip, [r1, #1]
   21978:	e153000c 	cmp	r3, ip
   2197c:	ca000002 	bgt	2198c <strncmp+0x84>
   21980:	b3e00000 	mvnlt	r0, #0
   21984:	a3a00000 	movge	r0, #0
   21988:	e12fff1e 	bx	lr
   2198c:	e3a00001 	mov	r0, #1
   21990:	e12fff1e 	bx	lr
   21994:	e3e00000 	mvn	r0, #0
   21998:	e12fff1e 	bx	lr

0002199c <strcpy>:
   2199c:	e1d130d0 	ldrsb	r3, [r1]
   219a0:	e1a02000 	mov	r2, r0
   219a4:	e3530000 	cmp	r3, #0
   219a8:	0a000003 	beq	219bc <strcpy+0x20>
   219ac:	e4c23001 	strb	r3, [r2], #1
   219b0:	e1f130d1 	ldrsb	r3, [r1, #1]!
   219b4:	e3530000 	cmp	r3, #0
   219b8:	1afffffb 	bne	219ac <strcpy+0x10>
   219bc:	e3a03000 	mov	r3, #0
   219c0:	e5c23000 	strb	r3, [r2]
   219c4:	e12fff1e 	bx	lr

000219c8 <strncpy>:
   219c8:	e3520000 	cmp	r2, #0
   219cc:	012fff1e 	bxeq	lr
   219d0:	e1d1c0d0 	ldrsb	ip, [r1]
   219d4:	e35c0000 	cmp	ip, #0
   219d8:	0a000009 	beq	21a04 <strncpy+0x3c>
   219dc:	e0802002 	add	r2, r0, r2
   219e0:	e1a03000 	mov	r3, r0
   219e4:	ea000002 	b	219f4 <strncpy+0x2c>
   219e8:	e1f1c0d1 	ldrsb	ip, [r1, #1]!
   219ec:	e35c0000 	cmp	ip, #0
   219f0:	0a000004 	beq	21a08 <strncpy+0x40>
   219f4:	e4c3c001 	strb	ip, [r3], #1
   219f8:	e1530002 	cmp	r3, r2
   219fc:	1afffff9 	bne	219e8 <strncpy+0x20>
   21a00:	e12fff1e 	bx	lr
   21a04:	e1a03000 	mov	r3, r0
   21a08:	e3a02000 	mov	r2, #0
   21a0c:	e5c32000 	strb	r2, [r3]
   21a10:	e12fff1e 	bx	lr

00021a14 <strcat>:
   21a14:	e1d030d0 	ldrsb	r3, [r0]
   21a18:	e3530000 	cmp	r3, #0
   21a1c:	e1a03000 	mov	r3, r0
   21a20:	0a000002 	beq	21a30 <strcat+0x1c>
   21a24:	e1f320d1 	ldrsb	r2, [r3, #1]!
   21a28:	e3520000 	cmp	r2, #0
   21a2c:	1afffffc 	bne	21a24 <strcat+0x10>
   21a30:	e1d120d0 	ldrsb	r2, [r1]
   21a34:	e3520000 	cmp	r2, #0
   21a38:	0a000003 	beq	21a4c <strcat+0x38>
   21a3c:	e4c32001 	strb	r2, [r3], #1
   21a40:	e1f120d1 	ldrsb	r2, [r1, #1]!
   21a44:	e3520000 	cmp	r2, #0
   21a48:	1afffffb 	bne	21a3c <strcat+0x28>
   21a4c:	e3a02000 	mov	r2, #0
   21a50:	e5c32000 	strb	r2, [r3]
   21a54:	e12fff1e 	bx	lr

00021a58 <strchr>:
   21a58:	e1d020d0 	ldrsb	r2, [r0]
   21a5c:	e3520000 	cmp	r2, #0
   21a60:	0a000009 	beq	21a8c <strchr+0x34>
   21a64:	e1510002 	cmp	r1, r2
   21a68:	1a000002 	bne	21a78 <strchr+0x20>
   21a6c:	ea000008 	b	21a94 <strchr+0x3c>
   21a70:	e1530001 	cmp	r3, r1
   21a74:	012fff1e 	bxeq	lr
   21a78:	e1f030d1 	ldrsb	r3, [r0, #1]!
   21a7c:	e3530000 	cmp	r3, #0
   21a80:	1afffffa 	bne	21a70 <strchr+0x18>
   21a84:	e1a00003 	mov	r0, r3
   21a88:	e12fff1e 	bx	lr
   21a8c:	e1a00002 	mov	r0, r2
   21a90:	e12fff1e 	bx	lr
   21a94:	e12fff1e 	bx	lr

00021a98 <strtok_r>:
   21a98:	e3500000 	cmp	r0, #0
   21a9c:	0a00002c 	beq	21b54 <strtok_r+0xbc>
   21aa0:	e92d4030 	push	{r4, r5, lr}
   21aa4:	e1d0e0d0 	ldrsb	lr, [r0]
   21aa8:	e35e0000 	cmp	lr, #0
   21aac:	11d140d0 	ldrsbne	r4, [r1]
   21ab0:	0a000024 	beq	21b48 <strtok_r+0xb0>
   21ab4:	e3540000 	cmp	r4, #0
   21ab8:	0a000008 	beq	21ae0 <strtok_r+0x48>
   21abc:	e15e0004 	cmp	lr, r4
   21ac0:	0a000019 	beq	21b2c <strtok_r+0x94>
   21ac4:	e1a0c001 	mov	ip, r1
   21ac8:	ea000001 	b	21ad4 <strtok_r+0x3c>
   21acc:	e15e0003 	cmp	lr, r3
   21ad0:	0a000015 	beq	21b2c <strtok_r+0x94>
   21ad4:	e1fc30d1 	ldrsb	r3, [ip, #1]!
   21ad8:	e3530000 	cmp	r3, #0
   21adc:	1afffffa 	bne	21acc <strtok_r+0x34>
   21ae0:	e35e0000 	cmp	lr, #0
   21ae4:	0a000017 	beq	21b48 <strtok_r+0xb0>
   21ae8:	e1a05000 	mov	r5, r0
   21aec:	e3540000 	cmp	r4, #0
   21af0:	0a000008 	beq	21b18 <strtok_r+0x80>
   21af4:	e15e0004 	cmp	lr, r4
   21af8:	0a00000d 	beq	21b34 <strtok_r+0x9c>
   21afc:	e1a0c001 	mov	ip, r1
   21b00:	ea000001 	b	21b0c <strtok_r+0x74>
   21b04:	e15e0003 	cmp	lr, r3
   21b08:	0a000009 	beq	21b34 <strtok_r+0x9c>
   21b0c:	e1fc30d1 	ldrsb	r3, [ip, #1]!
   21b10:	e3530000 	cmp	r3, #0
   21b14:	1afffffa 	bne	21b04 <strtok_r+0x6c>
   21b18:	e1f5e0d1 	ldrsb	lr, [r5, #1]!
   21b1c:	e35e0000 	cmp	lr, #0
   21b20:	1afffff1 	bne	21aec <strtok_r+0x54>
   21b24:	e5825000 	str	r5, [r2]
   21b28:	e8bd8030 	pop	{r4, r5, pc}
   21b2c:	e1f0e0d1 	ldrsb	lr, [r0, #1]!
   21b30:	eaffffdf 	b	21ab4 <strtok_r+0x1c>
   21b34:	e3a03000 	mov	r3, #0
   21b38:	e2855001 	add	r5, r5, #1
   21b3c:	e5453001 	strb	r3, [r5, #-1]
   21b40:	e5825000 	str	r5, [r2]
   21b44:	e8bd8030 	pop	{r4, r5, pc}
   21b48:	e3a00000 	mov	r0, #0
   21b4c:	e5820000 	str	r0, [r2]
   21b50:	e8bd8030 	pop	{r4, r5, pc}
   21b54:	e5920000 	ldr	r0, [r2]
   21b58:	e3500000 	cmp	r0, #0
   21b5c:	1affffcf 	bne	21aa0 <strtok_r+0x8>
   21b60:	e12fff1e 	bx	lr

00021b64 <strtoul>:
   21b64:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   21b68:	e3510000 	cmp	r1, #0
   21b6c:	e2425002 	sub	r5, r2, #2
   21b70:	15810000 	strne	r0, [r1]
   21b74:	e3520000 	cmp	r2, #0
   21b78:	13550022 	cmpne	r5, #34	; 0x22
   21b7c:	e3c2e010 	bic	lr, r2, #16
   21b80:	83a05001 	movhi	r5, #1
   21b84:	93a05000 	movls	r5, #0
   21b88:	8a000037 	bhi	21c6c <strtoul+0x108>
   21b8c:	e1d0c0d0 	ldrsb	ip, [r0]
   21b90:	e1a04000 	mov	r4, r0
   21b94:	e24c3009 	sub	r3, ip, #9
   21b98:	e35c0020 	cmp	ip, #32
   21b9c:	e2800001 	add	r0, r0, #1
   21ba0:	e6ef3073 	uxtb	r3, r3
   21ba4:	0afffff8 	beq	21b8c <strtoul+0x28>
   21ba8:	e3530004 	cmp	r3, #4
   21bac:	9afffff6 	bls	21b8c <strtoul+0x28>
   21bb0:	e35c002b 	cmp	ip, #43	; 0x2b
   21bb4:	0a00002e 	beq	21c74 <strtoul+0x110>
   21bb8:	e35c002d 	cmp	ip, #45	; 0x2d
   21bbc:	01d4c0d1 	ldrsbeq	ip, [r4, #1]
   21bc0:	03a07001 	moveq	r7, #1
   21bc4:	01a04000 	moveq	r4, r0
   21bc8:	13a07000 	movne	r7, #0
   21bcc:	e35c0030 	cmp	ip, #48	; 0x30
   21bd0:	0a00002c 	beq	21c88 <strtoul+0x124>
   21bd4:	e3520000 	cmp	r2, #0
   21bd8:	03a0200a 	moveq	r2, #10
   21bdc:	e35c002f 	cmp	ip, #47	; 0x2f
   21be0:	e1a0300c 	mov	r3, ip
   21be4:	da00001d 	ble	21c60 <strtoul+0xfc>
   21be8:	e3a0e000 	mov	lr, #0
   21bec:	e3a05001 	mov	r5, #1
   21bf0:	e1a0600e 	mov	r6, lr
   21bf4:	ea000008 	b	21c1c <strtoul+0xb8>
   21bf8:	e020329e 	mla	r0, lr, r2, r3
   21bfc:	e150000e 	cmp	r0, lr
   21c00:	3a000029 	bcc	21cac <strtoul+0x148>
   21c04:	e1f430d1 	ldrsb	r3, [r4, #1]!
   21c08:	e1a05006 	mov	r5, r6
   21c0c:	e353002f 	cmp	r3, #47	; 0x2f
   21c10:	e1a0c003 	mov	ip, r3
   21c14:	da000029 	ble	21cc0 <strtoul+0x15c>
   21c18:	e1a0e000 	mov	lr, r0
   21c1c:	e24cc061 	sub	ip, ip, #97	; 0x61
   21c20:	e35c0019 	cmp	ip, #25
   21c24:	92433020 	subls	r3, r3, #32
   21c28:	e3530040 	cmp	r3, #64	; 0x40
   21c2c:	c2433007 	subgt	r3, r3, #7
   21c30:	e2433030 	sub	r3, r3, #48	; 0x30
   21c34:	e1520003 	cmp	r2, r3
   21c38:	caffffee 	bgt	21bf8 <strtoul+0x94>
   21c3c:	e1a0000e 	mov	r0, lr
   21c40:	e2255001 	eor	r5, r5, #1
   21c44:	e3510000 	cmp	r1, #0
   21c48:	e0055007 	and	r5, r5, r7
   21c4c:	0a000000 	beq	21c54 <strtoul+0xf0>
   21c50:	e5814000 	str	r4, [r1]
   21c54:	e3550000 	cmp	r5, #0
   21c58:	12600000 	rsbne	r0, r0, #0
   21c5c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   21c60:	e3510000 	cmp	r1, #0
   21c64:	13a00000 	movne	r0, #0
   21c68:	1afffff8 	bne	21c50 <strtoul+0xec>
   21c6c:	e3a00000 	mov	r0, #0
   21c70:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   21c74:	e1d4c0d1 	ldrsb	ip, [r4, #1]
   21c78:	e3a07000 	mov	r7, #0
   21c7c:	e35c0030 	cmp	ip, #48	; 0x30
   21c80:	e1a04000 	mov	r4, r0
   21c84:	1affffd2 	bne	21bd4 <strtoul+0x70>
   21c88:	e1d4c0d1 	ldrsb	ip, [r4, #1]
   21c8c:	e2840001 	add	r0, r4, #1
   21c90:	e3cc3020 	bic	r3, ip, #32
   21c94:	e3530058 	cmp	r3, #88	; 0x58
   21c98:	0a00000a 	beq	21cc8 <strtoul+0x164>
   21c9c:	e3520000 	cmp	r2, #0
   21ca0:	e1a04000 	mov	r4, r0
   21ca4:	03a02008 	moveq	r2, #8
   21ca8:	eaffffcb 	b	21bdc <strtoul+0x78>
   21cac:	e3510000 	cmp	r1, #0
   21cb0:	0a00000a 	beq	21ce0 <strtoul+0x17c>
   21cb4:	e5814000 	str	r4, [r1]
   21cb8:	e3e00000 	mvn	r0, #0
   21cbc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   21cc0:	e3a05001 	mov	r5, #1
   21cc4:	eaffffde 	b	21c44 <strtoul+0xe0>
   21cc8:	e35e0000 	cmp	lr, #0
   21ccc:	1affffe6 	bne	21c6c <strtoul+0x108>
   21cd0:	e1d4c0d2 	ldrsb	ip, [r4, #2]
   21cd4:	e3a02010 	mov	r2, #16
   21cd8:	e2844002 	add	r4, r4, #2
   21cdc:	eaffffbe 	b	21bdc <strtoul+0x78>
   21ce0:	e3e00000 	mvn	r0, #0
   21ce4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00021ce8 <char2int>:
   21ce8:	e12fff1e 	bx	lr

00021cec <memcpy>:
   21cec:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
   21cf0:	e352007f 	cmp	r2, #127	; 0x7f
   21cf4:	9a00000b 	bls	21d28 <memcpy+0x3c>
   21cf8:	e3110003 	tst	r1, #3
   21cfc:	1a000009 	bne	21d28 <memcpy+0x3c>
   21d00:	e3100003 	tst	r0, #3
   21d04:	1a000007 	bne	21d28 <memcpy+0x3c>
   21d08:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
   21d0c:	e8b107f8 	ldm	r1!, {r3, r4, r5, r6, r7, r8, r9, sl}
   21d10:	e2422020 	sub	r2, r2, #32
   21d14:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
   21d18:	f5d1f040 	pld	[r1, #64]	; 0x40
   21d1c:	e352001f 	cmp	r2, #31
   21d20:	8afffff9 	bhi	21d0c <memcpy+0x20>
   21d24:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
   21d28:	e3520000 	cmp	r2, #0
   21d2c:	0a000003 	beq	21d40 <memcpy+0x54>
   21d30:	e4d13001 	ldrb	r3, [r1], #1
   21d34:	e2522001 	subs	r2, r2, #1
   21d38:	e4c03001 	strb	r3, [r0], #1
   21d3c:	1afffffb 	bne	21d30 <memcpy+0x44>
   21d40:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
   21d44:	e12fff1e 	bx	lr

00021d48 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
   21d48:	e12fff1e 	bx	lr

00021d4c <CVirtualGPIOPin::~CVirtualGPIOPin()>:
   21d4c:	e92d4010 	push	{r4, lr}
   21d50:	e1a04000 	mov	r4, r0
   21d54:	e3a01010 	mov	r1, #16
   21d58:	eb0002e3 	bl	228ec <operator delete(void*, unsigned int)>
   21d5c:	e1a00004 	mov	r0, r4
   21d60:	e8bd8010 	pop	{r4, pc}

00021d64 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]>:
   21d64:	e92d4070 	push	{r4, r5, r6, lr}
   21d68:	e59f5094 	ldr	r5, [pc, #148]	; 21e04 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0xa0>
   21d6c:	e1a04000 	mov	r4, r0
   21d70:	e5950000 	ldr	r0, [r5]
   21d74:	e1a06001 	mov	r6, r1
   21d78:	e3500000 	cmp	r0, #0
   21d7c:	1a00001a 	bne	21dec <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x88>
   21d80:	e1d400bc 	ldrh	r0, [r4, #12]
   21d84:	e1d430be 	ldrh	r3, [r4, #14]
   21d88:	e5846008 	str	r6, [r4, #8]
   21d8c:	e0402003 	sub	r2, r0, r3
   21d90:	e6bf2072 	sxth	r2, r2
   21d94:	e3520000 	cmp	r2, #0
   21d98:	da00000c 	ble	21dd0 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x6c>
   21d9c:	e3560000 	cmp	r6, #0
   21da0:	1a00000c 	bne	21dd8 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x74>
   21da4:	e2833001 	add	r3, r3, #1
   21da8:	e6ff3073 	uxth	r3, r3
   21dac:	e1c430be 	strh	r3, [r4, #14]
   21db0:	e5941004 	ldr	r1, [r4, #4]
   21db4:	e5952004 	ldr	r2, [r5, #4]
   21db8:	e1833800 	orr	r3, r3, r0, lsl #16
   21dbc:	e7823101 	str	r3, [r2, r1, lsl #2]
   21dc0:	e5953000 	ldr	r3, [r5]
   21dc4:	e3530000 	cmp	r3, #0
   21dc8:	1a000005 	bne	21de4 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x80>
   21dcc:	e8bd8070 	pop	{r4, r5, r6, pc}
   21dd0:	e3560000 	cmp	r6, #0
   21dd4:	1a000006 	bne	21df4 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x90>
   21dd8:	e5953000 	ldr	r3, [r5]
   21ddc:	e3530000 	cmp	r3, #0
   21de0:	08bd8070 	popeq	{r4, r5, r6, pc}
   21de4:	e8bd4070 	pop	{r4, r5, r6, lr}
   21de8:	ea00028e 	b	22828 <LeaveCritical>
   21dec:	eb000260 	bl	22774 <EnterCritical>
   21df0:	eaffffe2 	b	21d80 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x1c>
   21df4:	e2800001 	add	r0, r0, #1
   21df8:	e6ff0070 	uxth	r0, r0
   21dfc:	e1c400bc 	strh	r0, [r4, #12]
   21e00:	eaffffea 	b	21db0 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x4c>
   21e04:	0002b29c 	.word	0x0002b29c

00021e08 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)>:
   21e08:	e3a03000 	mov	r3, #0
   21e0c:	e92d4030 	push	{r4, r5, lr}
   21e10:	e59f2124 	ldr	r2, [pc, #292]	; 21f3c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x134>
   21e14:	e3510001 	cmp	r1, #1
   21e18:	e24dd024 	sub	sp, sp, #36	; 0x24
   21e1c:	e1a04000 	mov	r4, r0
   21e20:	e5801004 	str	r1, [r0, #4]
   21e24:	e5802000 	str	r2, [r0]
   21e28:	e1c030bc 	strh	r3, [r0, #12]
   21e2c:	e1c030be 	strh	r3, [r0, #14]
   21e30:	9a000002 	bls	21e40 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x38>
   21e34:	e1a00004 	mov	r0, r4
   21e38:	e28dd024 	add	sp, sp, #36	; 0x24
   21e3c:	e8bd8030 	pop	{r4, r5, pc}
   21e40:	e59f50f8 	ldr	r5, [pc, #248]	; 21f40 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x138>
   21e44:	e5950000 	ldr	r0, [r5]
   21e48:	e1500003 	cmp	r0, r3
   21e4c:	1a00002c 	bne	21f04 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0xfc>
   21e50:	e5953004 	ldr	r3, [r5, #4]
   21e54:	e3530000 	cmp	r3, #0
   21e58:	0a000011 	beq	21ea4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x9c>
   21e5c:	e3a01000 	mov	r1, #0
   21e60:	e5942004 	ldr	r2, [r4, #4]
   21e64:	e7831102 	str	r1, [r3, r2, lsl #2]
   21e68:	e5953000 	ldr	r3, [r5]
   21e6c:	e3530000 	cmp	r3, #0
   21e70:	1a000009 	bne	21e9c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x94>
   21e74:	e5943004 	ldr	r3, [r4, #4]
   21e78:	e3530001 	cmp	r3, #1
   21e7c:	8affffec 	bhi	21e34 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x2c>
   21e80:	e5953004 	ldr	r3, [r5, #4]
   21e84:	e3530000 	cmp	r3, #0
   21e88:	0affffe9 	beq	21e34 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x2c>
   21e8c:	e3a01000 	mov	r1, #0
   21e90:	e1a00004 	mov	r0, r4
   21e94:	ebffffb2 	bl	21d64 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]>
   21e98:	eaffffe5 	b	21e34 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x2c>
   21e9c:	eb000261 	bl	22828 <LeaveCritical>
   21ea0:	eafffff3 	b	21e74 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x6c>
   21ea4:	e3a00001 	mov	r0, #1
   21ea8:	eb0001fa 	bl	22698 <CMemorySystem::GetCoherentPage(unsigned int)>
   21eac:	e5850004 	str	r0, [r5, #4]
   21eb0:	e28d000c 	add	r0, sp, #12
   21eb4:	ebffe1db 	bl	1a628 <CBcmPropertyTags::CBcmPropertyTags()>
   21eb8:	e3a03004 	mov	r3, #4
   21ebc:	e595c004 	ldr	ip, [r5, #4]
   21ec0:	e58d3000 	str	r3, [sp]
   21ec4:	e3ccc103 	bic	ip, ip, #-1073741824	; 0xc0000000
   21ec8:	e38cc101 	orr	ip, ip, #1073741824	; 0x40000000
   21ecc:	e28d000c 	add	r0, sp, #12
   21ed0:	e28d2010 	add	r2, sp, #16
   21ed4:	e3a03010 	mov	r3, #16
   21ed8:	e59f1064 	ldr	r1, [pc, #100]	; 21f44 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x13c>
   21edc:	e58dc01c 	str	ip, [sp, #28]
   21ee0:	ebffe227 	bl	1a784 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   21ee4:	e3500000 	cmp	r0, #0
   21ee8:	0a000007 	beq	21f0c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x104>
   21eec:	e28d000c 	add	r0, sp, #12
   21ef0:	ebffe1d2 	bl	1a640 <CBcmPropertyTags::~CBcmPropertyTags()>
   21ef4:	e5953004 	ldr	r3, [r5, #4]
   21ef8:	e3530000 	cmp	r3, #0
   21efc:	0affffd9 	beq	21e68 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x60>
   21f00:	eaffffd5 	b	21e5c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x54>
   21f04:	eb00021a 	bl	22774 <EnterCritical>
   21f08:	eaffffd0 	b	21e50 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x48>
   21f0c:	e3a03010 	mov	r3, #16
   21f10:	e58d0000 	str	r0, [sp]
   21f14:	e28d2010 	add	r2, sp, #16
   21f18:	e59f1028 	ldr	r1, [pc, #40]	; 21f48 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x140>
   21f1c:	e28d000c 	add	r0, sp, #12
   21f20:	ebffe217 	bl	1a784 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   21f24:	e3500000 	cmp	r0, #0
   21f28:	159d301c 	ldrne	r3, [sp, #28]
   21f2c:	05850004 	streq	r0, [r5, #4]
   21f30:	13c33103 	bicne	r3, r3, #-1073741824	; 0xc0000000
   21f34:	15853004 	strne	r3, [r5, #4]
   21f38:	eaffffeb 	b	21eec <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0xe4>
   21f3c:	000294d0 	.word	0x000294d0
   21f40:	0002b29c 	.word	0x0002b29c
   21f44:	00048020 	.word	0x00048020
   21f48:	00040010 	.word	0x00040010

00021f4c <CVirtualGPIOPin::Write(unsigned int)>:
   21f4c:	e5902004 	ldr	r2, [r0, #4]
   21f50:	e1a03001 	mov	r3, r1
   21f54:	e3520001 	cmp	r2, #1
   21f58:	812fff1e 	bxhi	lr
   21f5c:	e3510001 	cmp	r1, #1
   21f60:	93a03000 	movls	r3, #0
   21f64:	83a03001 	movhi	r3, #1
   21f68:	e59f2014 	ldr	r2, [pc, #20]	; 21f84 <CVirtualGPIOPin::Write(unsigned int)+0x38>
   21f6c:	e5922004 	ldr	r2, [r2, #4]
   21f70:	e3520000 	cmp	r2, #0
   21f74:	03833001 	orreq	r3, r3, #1
   21f78:	e3530000 	cmp	r3, #0
   21f7c:	112fff1e 	bxne	lr
   21f80:	eaffff77 	b	21d64 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]>
   21f84:	0002b29c 	.word	0x0002b29c

00021f88 <CVirtualGPIOPin::Invert()>:
   21f88:	e5901008 	ldr	r1, [r0, #8]
   21f8c:	e2211001 	eor	r1, r1, #1
   21f90:	eaffffed 	b	21f4c <CVirtualGPIOPin::Write(unsigned int)>

00021f94 <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE>:
   21f94:	e3a02000 	mov	r2, #0
   21f98:	e59f3004 	ldr	r3, [pc, #4]	; 21fa4 <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE+0x10>
   21f9c:	e5832000 	str	r2, [r3]
   21fa0:	e12fff1e 	bx	lr
   21fa4:	0002b29c 	.word	0x0002b29c

00021fa8 <CExceptionHandler::CExceptionHandler()>:
   21fa8:	e92d4070 	push	{r4, r5, r6, lr}
   21fac:	e59f506c 	ldr	r5, [pc, #108]	; 22020 <CExceptionHandler::CExceptionHandler()+0x78>
   21fb0:	e1a04000 	mov	r4, r0
   21fb4:	e5953000 	ldr	r3, [r5]
   21fb8:	e3530000 	cmp	r3, #0
   21fbc:	0a000003 	beq	21fd0 <CExceptionHandler::CExceptionHandler()+0x28>
   21fc0:	e3a02030 	mov	r2, #48	; 0x30
   21fc4:	e59f1058 	ldr	r1, [pc, #88]	; 22024 <CExceptionHandler::CExceptionHandler()+0x7c>
   21fc8:	e59f0058 	ldr	r0, [pc, #88]	; 22028 <CExceptionHandler::CExceptionHandler()+0x80>
   21fcc:	ebffe171 	bl	1a598 <assertion_failed>
   21fd0:	e3a00000 	mov	r0, #0
   21fd4:	e59f1050 	ldr	r1, [pc, #80]	; 2202c <CExceptionHandler::CExceptionHandler()+0x84>
   21fd8:	e59f2050 	ldr	r2, [pc, #80]	; 22030 <CExceptionHandler::CExceptionHandler()+0x88>
   21fdc:	e59f3050 	ldr	r3, [pc, #80]	; 22034 <CExceptionHandler::CExceptionHandler()+0x8c>
   21fe0:	e1a01141 	asr	r1, r1, #2
   21fe4:	e1a02142 	asr	r2, r2, #2
   21fe8:	e1a03143 	asr	r3, r3, #2
   21fec:	e2411002 	sub	r1, r1, #2
   21ff0:	e2422002 	sub	r2, r2, #2
   21ff4:	e2433002 	sub	r3, r3, #2
   21ff8:	e38114ea 	orr	r1, r1, #-369098752	; 0xea000000
   21ffc:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
   22000:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
   22004:	e5854000 	str	r4, [r5]
   22008:	e5801004 	str	r1, [r0, #4]
   2200c:	e580200c 	str	r2, [r0, #12]
   22010:	e5803010 	str	r3, [r0, #16]
   22014:	eb000228 	bl	228bc <SyncDataAndInstructionCache>
   22018:	e1a00004 	mov	r0, r4
   2201c:	e8bd8070 	pop	{r4, r5, r6, pc}
   22020:	0002b2a4 	.word	0x0002b2a4
   22024:	000294e0 	.word	0x000294e0
   22028:	0002938c 	.word	0x0002938c
   2202c:	00022348 	.word	0x00022348
   22030:	000222a8 	.word	0x000222a8
   22034:	000222f0 	.word	0x000222f0

00022038 <CExceptionHandler::~CExceptionHandler()>:
   22038:	e3a02000 	mov	r2, #0
   2203c:	e59f3004 	ldr	r3, [pc, #4]	; 22048 <CExceptionHandler::~CExceptionHandler()+0x10>
   22040:	e5832000 	str	r2, [r3]
   22044:	e12fff1e 	bx	lr
   22048:	0002b2a4 	.word	0x0002b2a4

0002204c <CExceptionHandler::Throw(unsigned int)>:
   2204c:	e92d4010 	push	{r4, lr}
   22050:	e1a04001 	mov	r4, r1
   22054:	e24dd008 	sub	sp, sp, #8
   22058:	ebffeb41 	bl	1cd64 <CLogger::Get()>
   2205c:	e59f201c 	ldr	r2, [pc, #28]	; 22080 <CExceptionHandler::Throw(unsigned int)+0x34>
   22060:	e59f301c 	ldr	r3, [pc, #28]	; 22084 <CExceptionHandler::Throw(unsigned int)+0x38>
   22064:	e7921104 	ldr	r1, [r2, r4, lsl #2]
   22068:	e3a02000 	mov	r2, #0
   2206c:	e58d1000 	str	r1, [sp]
   22070:	e59f1010 	ldr	r1, [pc, #16]	; 22088 <CExceptionHandler::Throw(unsigned int)+0x3c>
   22074:	ebffece3 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   22078:	e28dd008 	add	sp, sp, #8
   2207c:	e8bd8010 	pop	{r4, pc}
   22080:	0002b160 	.word	0x0002b160
   22084:	000294f8 	.word	0x000294f8
   22088:	000294d8 	.word	0x000294d8

0002208c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>:
   2208c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   22090:	e3510002 	cmp	r1, #2
   22094:	e24dd024 	sub	sp, sp, #36	; 0x24
   22098:	e1a05001 	mov	r5, r1
   2209c:	e1a04002 	mov	r4, r2
   220a0:	0a000028 	beq	22148 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xbc>
   220a4:	e3510003 	cmp	r1, #3
   220a8:	0a000020 	beq	22130 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xa4>
   220ac:	e3a08000 	mov	r8, #0
   220b0:	e1a09008 	mov	r9, r8
   220b4:	e3540000 	cmp	r4, #0
   220b8:	0a000025 	beq	22154 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xc8>
   220bc:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   220c0:	e5947048 	ldr	r7, [r4, #72]	; 0x48
   220c4:	e203301f 	and	r3, r3, #31
   220c8:	e3530011 	cmp	r3, #17
   220cc:	e5946044 	ldr	r6, [r4, #68]	; 0x44
   220d0:	0a000019 	beq	2213c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xb0>
   220d4:	e3530012 	cmp	r3, #18
   220d8:	089400c0 	ldmeq	r4, {r6, r7}
   220dc:	e59f1084 	ldr	r1, [pc, #132]	; 22168 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xdc>
   220e0:	e1a00006 	mov	r0, r6
   220e4:	ebffe2fe 	bl	1ace4 <debug_stacktrace(unsigned int const*, char const*)>
   220e8:	ebffeb1d 	bl	1cd64 <CLogger::Get()>
   220ec:	e59f3078 	ldr	r3, [pc, #120]	; 2216c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe0>
   220f0:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
   220f4:	e7931105 	ldr	r1, [r3, r5, lsl #2]
   220f8:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   220fc:	e58d1000 	str	r1, [sp]
   22100:	e58d2018 	str	r2, [sp, #24]
   22104:	e58d3004 	str	r3, [sp, #4]
   22108:	e58d7014 	str	r7, [sp, #20]
   2210c:	e58d6010 	str	r6, [sp, #16]
   22110:	e58d800c 	str	r8, [sp, #12]
   22114:	e58d9008 	str	r9, [sp, #8]
   22118:	e59f3050 	ldr	r3, [pc, #80]	; 22170 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe4>
   2211c:	e3a02000 	mov	r2, #0
   22120:	e59f1040 	ldr	r1, [pc, #64]	; 22168 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xdc>
   22124:	ebffecb7 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   22128:	e28dd024 	add	sp, sp, #36	; 0x24
   2212c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   22130:	ee159f10 	mrc	15, 0, r9, cr5, cr0, {0}
   22134:	ee168f10 	mrc	15, 0, r8, cr6, cr0, {0}
   22138:	eaffffdd 	b	220b4 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x28>
   2213c:	e594700c 	ldr	r7, [r4, #12]
   22140:	e5946008 	ldr	r6, [r4, #8]
   22144:	eaffffe4 	b	220dc <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x50>
   22148:	ee159f30 	mrc	15, 0, r9, cr5, cr0, {1}
   2214c:	ee168f50 	mrc	15, 0, r8, cr6, cr0, {2}
   22150:	eaffffd7 	b	220b4 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x28>
   22154:	e3a02069 	mov	r2, #105	; 0x69
   22158:	e59f1014 	ldr	r1, [pc, #20]	; 22174 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe8>
   2215c:	e59f0014 	ldr	r0, [pc, #20]	; 22178 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xec>
   22160:	ebffe10c 	bl	1a598 <assertion_failed>
   22164:	eaffffd4 	b	220bc <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x30>
   22168:	000294d8 	.word	0x000294d8
   2216c:	0002b160 	.word	0x0002b160
   22170:	00029514 	.word	0x00029514
   22174:	000294e0 	.word	0x000294e0
   22178:	00029508 	.word	0x00029508

0002217c <CExceptionHandler::Get()>:
   2217c:	e92d4010 	push	{r4, lr}
   22180:	e59f4020 	ldr	r4, [pc, #32]	; 221a8 <CExceptionHandler::Get()+0x2c>
   22184:	e5940000 	ldr	r0, [r4]
   22188:	e3500000 	cmp	r0, #0
   2218c:	18bd8010 	popne	{r4, pc}
   22190:	e3a02087 	mov	r2, #135	; 0x87
   22194:	e59f1010 	ldr	r1, [pc, #16]	; 221ac <CExceptionHandler::Get()+0x30>
   22198:	e59f0010 	ldr	r0, [pc, #16]	; 221b0 <CExceptionHandler::Get()+0x34>
   2219c:	ebffe0fd 	bl	1a598 <assertion_failed>
   221a0:	e5940000 	ldr	r0, [r4]
   221a4:	e8bd8010 	pop	{r4, pc}
   221a8:	0002b2a4 	.word	0x0002b2a4
   221ac:	000294e0 	.word	0x000294e0
   221b0:	00023f5c 	.word	0x00023f5c

000221b4 <ExceptionHandler>:
   221b4:	e92d4070 	push	{r4, r5, r6, lr}
   221b8:	e3a03000 	mov	r3, #0
   221bc:	e1a05000 	mov	r5, r0
   221c0:	e1a06001 	mov	r6, r1
   221c4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   221c8:	ebffe8ee 	bl	1c588 <CInterruptSystem::DisableFIQ()>
   221cc:	f1080040 	cpsie	f
   221d0:	e59f403c 	ldr	r4, [pc, #60]	; 22214 <ExceptionHandler+0x60>
   221d4:	e5940000 	ldr	r0, [r4]
   221d8:	e3500000 	cmp	r0, #0
   221dc:	0a000003 	beq	221f0 <ExceptionHandler+0x3c>
   221e0:	e1a02006 	mov	r2, r6
   221e4:	e1a01005 	mov	r1, r5
   221e8:	e8bd4070 	pop	{r4, r5, r6, lr}
   221ec:	eaffffa6 	b	2208c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>
   221f0:	e3a02087 	mov	r2, #135	; 0x87
   221f4:	e59f101c 	ldr	r1, [pc, #28]	; 22218 <ExceptionHandler+0x64>
   221f8:	e59f001c 	ldr	r0, [pc, #28]	; 2221c <ExceptionHandler+0x68>
   221fc:	ebffe0e5 	bl	1a598 <assertion_failed>
   22200:	e5940000 	ldr	r0, [r4]
   22204:	e1a02006 	mov	r2, r6
   22208:	e1a01005 	mov	r1, r5
   2220c:	e8bd4070 	pop	{r4, r5, r6, lr}
   22210:	eaffff9d 	b	2208c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>
   22214:	0002b2a4 	.word	0x0002b2a4
   22218:	000294e0 	.word	0x000294e0
   2221c:	00023f5c 	.word	0x00023f5c

00022220 <raise>:
   22220:	e92d4010 	push	{r4, lr}
   22224:	e59f4030 	ldr	r4, [pc, #48]	; 2225c <raise+0x3c>
   22228:	e5940000 	ldr	r0, [r4]
   2222c:	e3500000 	cmp	r0, #0
   22230:	0a000003 	beq	22244 <raise+0x24>
   22234:	e3a01004 	mov	r1, #4
   22238:	ebffff83 	bl	2204c <CExceptionHandler::Throw(unsigned int)>
   2223c:	e3a00000 	mov	r0, #0
   22240:	e8bd8010 	pop	{r4, pc}
   22244:	e59f0014 	ldr	r0, [pc, #20]	; 22260 <raise+0x40>
   22248:	e3a02087 	mov	r2, #135	; 0x87
   2224c:	e59f1010 	ldr	r1, [pc, #16]	; 22264 <raise+0x44>
   22250:	ebffe0d0 	bl	1a598 <assertion_failed>
   22254:	e5940000 	ldr	r0, [r4]
   22258:	eafffff5 	b	22234 <raise+0x14>
   2225c:	0002b2a4 	.word	0x0002b2a4
   22260:	00023f5c 	.word	0x00023f5c
   22264:	000294e0 	.word	0x000294e0

00022268 <UndefinedInstructionInternal>:
   22268:	e24ee004 	sub	lr, lr, #4
   2226c:	e92d4000 	stmfd	sp!, {lr}
   22270:	e14fe000 	mrs	lr, SPSR
   22274:	e92d4000 	stmfd	sp!, {lr}
   22278:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   2227c:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   22280:	e1a0100d 	mov	r1, sp
   22284:	f1020012 	cps	#18
   22288:	e1a0200d 	mov	r2, sp
   2228c:	e1a0300e 	mov	r3, lr
   22290:	f1020011 	cps	#17
   22294:	e1a0400d 	mov	r4, sp
   22298:	e1a0500e 	mov	r5, lr
   2229c:	f102001f 	cps	#31
   222a0:	e1a0d001 	mov	sp, r1
   222a4:	e92d003c 	push	{r2, r3, r4, r5}
   222a8:	e1a0100d 	mov	r1, sp
   222ac:	e3a00001 	mov	r0, #1
   222b0:	eaffffbf 	b	221b4 <ExceptionHandler>

000222b4 <PrefetchAbortStub>:
   222b4:	e24ee004 	sub	lr, lr, #4
   222b8:	e92d4000 	stmfd	sp!, {lr}
   222bc:	e14fe000 	mrs	lr, SPSR
   222c0:	e92d4000 	stmfd	sp!, {lr}
   222c4:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   222c8:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   222cc:	e1a0100d 	mov	r1, sp
   222d0:	f1020012 	cps	#18
   222d4:	e1a0200d 	mov	r2, sp
   222d8:	e1a0300e 	mov	r3, lr
   222dc:	f1020011 	cps	#17
   222e0:	e1a0400d 	mov	r4, sp
   222e4:	e1a0500e 	mov	r5, lr
   222e8:	f102001f 	cps	#31
   222ec:	e1a0d001 	mov	sp, r1
   222f0:	e92d003c 	push	{r2, r3, r4, r5}
   222f4:	e1a0100d 	mov	r1, sp
   222f8:	e3a00002 	mov	r0, #2
   222fc:	eaffffac 	b	221b4 <ExceptionHandler>

00022300 <DataAbortStub>:
   22300:	e24ee008 	sub	lr, lr, #8
   22304:	e92d4000 	stmfd	sp!, {lr}
   22308:	e14fe000 	mrs	lr, SPSR
   2230c:	e92d4000 	stmfd	sp!, {lr}
   22310:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   22314:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   22318:	e1a0100d 	mov	r1, sp
   2231c:	f1020012 	cps	#18
   22320:	e1a0200d 	mov	r2, sp
   22324:	e1a0300e 	mov	r3, lr
   22328:	f1020011 	cps	#17
   2232c:	e1a0400d 	mov	r4, sp
   22330:	e1a0500e 	mov	r5, lr
   22334:	f102001f 	cps	#31
   22338:	e1a0d001 	mov	sp, r1
   2233c:	e92d003c 	push	{r2, r3, r4, r5}
   22340:	e1a0100d 	mov	r1, sp
   22344:	e3a00003 	mov	r0, #3
   22348:	eaffff99 	b	221b4 <ExceptionHandler>

0002234c <UndefinedInstructionStub>:
   2234c:	e92d4001 	push	{r0, lr}
   22350:	eef80a10 	vmrs	r0, fpexc
   22354:	e3100102 	tst	r0, #-2147483648	; 0x80000000
   22358:	0affffc2 	beq	22268 <UndefinedInstructionInternal>
   2235c:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
   22360:	eee80a10 	vmsr	fpexc, r0
   22364:	e8fd8001 	ldm	sp!, {r0, pc}^

00022368 <IRQStub>:
   22368:	e24ee004 	sub	lr, lr, #4
   2236c:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
   22370:	ebffe8e5 	bl	1c70c <InterruptHandler>
   22374:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^

00022378 <FIQStub>:
   22378:	e24ee004 	sub	lr, lr, #4
   2237c:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
   22380:	e3a03000 	mov	r3, #0
   22384:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   22388:	e59f2040 	ldr	r2, [pc, #64]	; 223d0 <FIQStub+0x58>
   2238c:	e5921000 	ldr	r1, [r2]
   22390:	e3510000 	cmp	r1, #0
   22394:	0a000004 	beq	223ac <FIQStub+0x34>
   22398:	e5920004 	ldr	r0, [r2, #4]
   2239c:	e12fff31 	blx	r1
   223a0:	e3a03000 	mov	r3, #0
   223a4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   223a8:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^
   223ac:	e3a03000 	mov	r3, #0
   223b0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   223b4:	e59f1018 	ldr	r1, [pc, #24]	; 223d4 <FIQStub+0x5c>
   223b8:	e3a00000 	mov	r0, #0
   223bc:	e5810000 	str	r0, [r1]
   223c0:	e3a03000 	mov	r3, #0
   223c4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   223c8:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   223cc:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^
   223d0:	0002b174 	.word	0x0002b174
   223d4:	2000b20c 	.word	0x2000b20c

000223d8 <CMemorySystem::~CMemorySystem()>:
   223d8:	e59f3068 	ldr	r3, [pc, #104]	; 22448 <CMemorySystem::~CMemorySystem()+0x70>
   223dc:	e92d4070 	push	{r4, r5, r6, lr}
   223e0:	e5932000 	ldr	r2, [r3]
   223e4:	e1a04000 	mov	r4, r0
   223e8:	e1520000 	cmp	r2, r0
   223ec:	0a000001 	beq	223f8 <CMemorySystem::~CMemorySystem()+0x20>
   223f0:	e1a00004 	mov	r0, r4
   223f4:	e8bd8070 	pop	{r4, r5, r6, pc}
   223f8:	e3a02000 	mov	r2, #0
   223fc:	e5d01000 	ldrb	r1, [r0]
   22400:	e5832000 	str	r2, [r3]
   22404:	e1510002 	cmp	r1, r2
   22408:	0a000004 	beq	22420 <CMemorySystem::~CMemorySystem()+0x48>
   2240c:	ee111f10 	mrc	15, 0, r1, cr1, cr0, {0}
   22410:	e59f3034 	ldr	r3, [pc, #52]	; 2244c <CMemorySystem::~CMemorySystem()+0x74>
   22414:	e0033001 	and	r3, r3, r1
   22418:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
   2241c:	ee082f17 	mcr	15, 0, r2, cr8, cr7, {0}
   22420:	e5945008 	ldr	r5, [r4, #8]
   22424:	e3550000 	cmp	r5, #0
   22428:	0afffff0 	beq	223f0 <CMemorySystem::~CMemorySystem()+0x18>
   2242c:	e1a00005 	mov	r0, r5
   22430:	eb0000c5 	bl	2274c <CPageTable::~CPageTable()>
   22434:	e1a00005 	mov	r0, r5
   22438:	e3a01004 	mov	r1, #4
   2243c:	eb00012a 	bl	228ec <operator delete(void*, unsigned int)>
   22440:	e1a00004 	mov	r0, r4
   22444:	e8bd8070 	pop	{r4, r5, r6, pc}
   22448:	0002b2a8 	.word	0x0002b2a8
   2244c:	ff7fe7fa 	.word	0xff7fe7fa

00022450 <CMemorySystem::GetMemSize() const>:
   22450:	e92d4010 	push	{r4, lr}
   22454:	e59f402c 	ldr	r4, [pc, #44]	; 22488 <CMemorySystem::GetMemSize() const+0x38>
   22458:	e5943000 	ldr	r3, [r4]
   2245c:	e3530000 	cmp	r3, #0
   22460:	0a000001 	beq	2246c <CMemorySystem::GetMemSize() const+0x1c>
   22464:	e5930004 	ldr	r0, [r3, #4]
   22468:	e8bd8010 	pop	{r4, pc}
   2246c:	e3a02082 	mov	r2, #130	; 0x82
   22470:	e59f1014 	ldr	r1, [pc, #20]	; 2248c <CMemorySystem::GetMemSize() const+0x3c>
   22474:	e59f0014 	ldr	r0, [pc, #20]	; 22490 <CMemorySystem::GetMemSize() const+0x40>
   22478:	ebffe046 	bl	1a598 <assertion_failed>
   2247c:	e5943000 	ldr	r3, [r4]
   22480:	e5930004 	ldr	r0, [r3, #4]
   22484:	e8bd8010 	pop	{r4, pc}
   22488:	0002b2a8 	.word	0x0002b2a8
   2248c:	0002959c 	.word	0x0002959c
   22490:	00023f5c 	.word	0x00023f5c

00022494 <CMemorySystem::Get()>:
   22494:	e92d4010 	push	{r4, lr}
   22498:	e59f4020 	ldr	r4, [pc, #32]	; 224c0 <CMemorySystem::Get()+0x2c>
   2249c:	e5940000 	ldr	r0, [r4]
   224a0:	e3500000 	cmp	r0, #0
   224a4:	18bd8010 	popne	{r4, pc}
   224a8:	e3a02088 	mov	r2, #136	; 0x88
   224ac:	e59f1010 	ldr	r1, [pc, #16]	; 224c4 <CMemorySystem::Get()+0x30>
   224b0:	e59f0010 	ldr	r0, [pc, #16]	; 224c8 <CMemorySystem::Get()+0x34>
   224b4:	ebffe037 	bl	1a598 <assertion_failed>
   224b8:	e5940000 	ldr	r0, [r4]
   224bc:	e8bd8010 	pop	{r4, pc}
   224c0:	0002b2a8 	.word	0x0002b2a8
   224c4:	0002959c 	.word	0x0002959c
   224c8:	00023f5c 	.word	0x00023f5c

000224cc <CMemorySystem::EnableMMU()>:
   224cc:	e5d03000 	ldrb	r3, [r0]
   224d0:	e92d4010 	push	{r4, lr}
   224d4:	e3530000 	cmp	r3, #0
   224d8:	e1a04000 	mov	r4, r0
   224dc:	0a00001c 	beq	22554 <CMemorySystem::EnableMMU()+0x88>
   224e0:	ee113f30 	mrc	15, 0, r3, cr1, cr0, {1}
   224e4:	e3833040 	orr	r3, r3, #64	; 0x40
   224e8:	ee013f30 	mcr	15, 0, r3, cr1, cr0, {1}
   224ec:	ee103f70 	mrc	15, 0, r3, cr0, cr0, {3}
   224f0:	e3130001 	tst	r3, #1
   224f4:	1a00001b 	bne	22568 <CMemorySystem::EnableMMU()+0x9c>
   224f8:	e3a03000 	mov	r3, #0
   224fc:	ee023f50 	mcr	15, 0, r3, cr2, cr0, {2}
   22500:	e5940008 	ldr	r0, [r4, #8]
   22504:	e1500003 	cmp	r0, r3
   22508:	0a00001b 	beq	2257c <CMemorySystem::EnableMMU()+0xb0>
   2250c:	eb00008f 	bl	22750 <CPageTable::GetBaseAddress() const>
   22510:	ee020f10 	mcr	15, 0, r0, cr2, cr0, {0}
   22514:	e3a03001 	mov	r3, #1
   22518:	ee033f10 	mcr	15, 0, r3, cr3, cr0, {0}
   2251c:	e3a03000 	mov	r3, #0
   22520:	ee073f16 	mcr	15, 0, r3, cr7, cr6, {0}
   22524:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   22528:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   2252c:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   22530:	ee083f17 	mcr	15, 0, r3, cr8, cr7, {0}
   22534:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   22538:	ee073f95 	mcr	15, 0, r3, cr7, cr5, {4}
   2253c:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
   22540:	e59f204c 	ldr	r2, [pc, #76]	; 22594 <CMemorySystem::EnableMMU()+0xc8>
   22544:	e3c33002 	bic	r3, r3, #2
   22548:	e1832002 	orr	r2, r3, r2
   2254c:	ee012f10 	mcr	15, 0, r2, cr1, cr0, {0}
   22550:	e8bd8010 	pop	{r4, pc}
   22554:	e3a0208e 	mov	r2, #142	; 0x8e
   22558:	e59f1038 	ldr	r1, [pc, #56]	; 22598 <CMemorySystem::EnableMMU()+0xcc>
   2255c:	e59f0038 	ldr	r0, [pc, #56]	; 2259c <CMemorySystem::EnableMMU()+0xd0>
   22560:	ebffe00c 	bl	1a598 <assertion_failed>
   22564:	eaffffdd 	b	224e0 <CMemorySystem::EnableMMU()+0x14>
   22568:	e3a0209b 	mov	r2, #155	; 0x9b
   2256c:	e59f1024 	ldr	r1, [pc, #36]	; 22598 <CMemorySystem::EnableMMU()+0xcc>
   22570:	e59f0028 	ldr	r0, [pc, #40]	; 225a0 <CMemorySystem::EnableMMU()+0xd4>
   22574:	ebffe007 	bl	1a598 <assertion_failed>
   22578:	eaffffde 	b	224f8 <CMemorySystem::EnableMMU()+0x2c>
   2257c:	e59f0020 	ldr	r0, [pc, #32]	; 225a4 <CMemorySystem::EnableMMU()+0xd8>
   22580:	e3a020a1 	mov	r2, #161	; 0xa1
   22584:	e59f100c 	ldr	r1, [pc, #12]	; 22598 <CMemorySystem::EnableMMU()+0xcc>
   22588:	ebffe002 	bl	1a598 <assertion_failed>
   2258c:	e5940008 	ldr	r0, [r4, #8]
   22590:	eaffffdd 	b	2250c <CMemorySystem::EnableMMU()+0x40>
   22594:	00c01805 	.word	0x00c01805
   22598:	0002959c 	.word	0x0002959c
   2259c:	000295a8 	.word	0x000295a8
   225a0:	000295b8 	.word	0x000295b8
   225a4:	000295e4 	.word	0x000295e4

000225a8 <CMemorySystem::CMemorySystem(bool)>:
   225a8:	e3a03000 	mov	r3, #0
   225ac:	e92d4030 	push	{r4, r5, lr}
   225b0:	e59f20d0 	ldr	r2, [pc, #208]	; 22688 <CMemorySystem::CMemorySystem(bool)+0xe0>
   225b4:	e24dd024 	sub	sp, sp, #36	; 0x24
   225b8:	e5925000 	ldr	r5, [r2]
   225bc:	e1a04000 	mov	r4, r0
   225c0:	e1550003 	cmp	r5, r3
   225c4:	e5c01000 	strb	r1, [r0]
   225c8:	e5803004 	str	r3, [r0, #4]
   225cc:	e5803008 	str	r3, [r0, #8]
   225d0:	0a000002 	beq	225e0 <CMemorySystem::CMemorySystem(bool)+0x38>
   225d4:	e1a00004 	mov	r0, r4
   225d8:	e28dd024 	add	sp, sp, #36	; 0x24
   225dc:	e8bd8030 	pop	{r4, r5, pc}
   225e0:	e28d0008 	add	r0, sp, #8
   225e4:	e5824000 	str	r4, [r2]
   225e8:	ebffe00e 	bl	1a628 <CBcmPropertyTags::CBcmPropertyTags()>
   225ec:	e58d5000 	str	r5, [sp]
   225f0:	e28d0008 	add	r0, sp, #8
   225f4:	e3a03014 	mov	r3, #20
   225f8:	e28d200c 	add	r2, sp, #12
   225fc:	e59f1088 	ldr	r1, [pc, #136]	; 2268c <CMemorySystem::CMemorySystem(bool)+0xe4>
   22600:	ebffe05f 	bl	1a784 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   22604:	e3500000 	cmp	r0, #0
   22608:	0a000018 	beq	22670 <CMemorySystem::CMemorySystem(bool)+0xc8>
   2260c:	e59d0018 	ldr	r0, [sp, #24]
   22610:	e3500000 	cmp	r0, #0
   22614:	0a000019 	beq	22680 <CMemorySystem::CMemorySystem(bool)+0xd8>
   22618:	e59f1070 	ldr	r1, [pc, #112]	; 22690 <CMemorySystem::CMemorySystem(bool)+0xe8>
   2261c:	e59f0070 	ldr	r0, [pc, #112]	; 22694 <CMemorySystem::CMemorySystem(bool)+0xec>
   22620:	e3a02047 	mov	r2, #71	; 0x47
   22624:	ebffdfdb 	bl	1a598 <assertion_failed>
   22628:	e59d101c 	ldr	r1, [sp, #28]
   2262c:	e59d0018 	ldr	r0, [sp, #24]
   22630:	e5841004 	str	r1, [r4, #4]
   22634:	eb0000b4 	bl	2290c <mem_init>
   22638:	e5d43000 	ldrb	r3, [r4]
   2263c:	e3530000 	cmp	r3, #0
   22640:	0a000007 	beq	22664 <CMemorySystem::CMemorySystem(bool)+0xbc>
   22644:	e3a00004 	mov	r0, #4
   22648:	eb0000a3 	bl	228dc <operator new(unsigned int)>
   2264c:	e1a05000 	mov	r5, r0
   22650:	e5941004 	ldr	r1, [r4, #4]
   22654:	eb000012 	bl	226a4 <CPageTable::CPageTable(unsigned int)>
   22658:	e5845008 	str	r5, [r4, #8]
   2265c:	e1a00004 	mov	r0, r4
   22660:	ebffff99 	bl	224cc <CMemorySystem::EnableMMU()>
   22664:	e28d0008 	add	r0, sp, #8
   22668:	ebffdff4 	bl	1a640 <CBcmPropertyTags::~CBcmPropertyTags()>
   2266c:	eaffffd8 	b	225d4 <CMemorySystem::CMemorySystem(bool)+0x2c>
   22670:	e3a01303 	mov	r1, #201326592	; 0xc000000
   22674:	e58d0018 	str	r0, [sp, #24]
   22678:	e58d101c 	str	r1, [sp, #28]
   2267c:	eaffffeb 	b	22630 <CMemorySystem::CMemorySystem(bool)+0x88>
   22680:	e59d101c 	ldr	r1, [sp, #28]
   22684:	eaffffe9 	b	22630 <CMemorySystem::CMemorySystem(bool)+0x88>
   22688:	0002b2a8 	.word	0x0002b2a8
   2268c:	00010005 	.word	0x00010005
   22690:	0002959c 	.word	0x0002959c
   22694:	000295f8 	.word	0x000295f8

00022698 <CMemorySystem::GetCoherentPage(unsigned int)>:
   22698:	e1a00600 	lsl	r0, r0, #12
   2269c:	e2800501 	add	r0, r0, #4194304	; 0x400000
   226a0:	e12fff1e 	bx	lr

000226a4 <CPageTable::CPageTable(unsigned int)>:
   226a4:	e3a02709 	mov	r2, #2359296	; 0x240000
   226a8:	e3a03000 	mov	r3, #0
   226ac:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   226b0:	e59fc074 	ldr	ip, [pc, #116]	; 2272c <CPageTable::CPageTable(unsigned int)+0x88>
   226b4:	e59f4074 	ldr	r4, [pc, #116]	; 22730 <CPageTable::CPageTable(unsigned int)+0x8c>
   226b8:	e59f5074 	ldr	r5, [pc, #116]	; 22734 <CPageTable::CPageTable(unsigned int)+0x90>
   226bc:	e59f9074 	ldr	r9, [pc, #116]	; 22738 <CPageTable::CPageTable(unsigned int)+0x94>
   226c0:	e59f8074 	ldr	r8, [pc, #116]	; 2273c <CPageTable::CPageTable(unsigned int)+0x98>
   226c4:	e59f7074 	ldr	r7, [pc, #116]	; 22740 <CPageTable::CPageTable(unsigned int)+0x9c>
   226c8:	e59f6074 	ldr	r6, [pc, #116]	; 22744 <CPageTable::CPageTable(unsigned int)+0xa0>
   226cc:	e59fe074 	ldr	lr, [pc, #116]	; 22748 <CPageTable::CPageTable(unsigned int)+0xa4>
   226d0:	e5802000 	str	r2, [r0]
   226d4:	e1530004 	cmp	r3, r4
   226d8:	31a02005 	movcc	r2, r5
   226dc:	3a000007 	bcc	22700 <CPageTable::CPageTable(unsigned int)+0x5c>
   226e0:	e3530501 	cmp	r3, #4194304	; 0x400000
   226e4:	0a00000e 	beq	22724 <CPageTable::CPageTable(unsigned int)+0x80>
   226e8:	e1510003 	cmp	r1, r3
   226ec:	81a02008 	movhi	r2, r8
   226f0:	8a000002 	bhi	22700 <CPageTable::CPageTable(unsigned int)+0x5c>
   226f4:	e1530007 	cmp	r3, r7
   226f8:	91a02006 	movls	r2, r6
   226fc:	83a02000 	movhi	r2, #0
   22700:	e1822003 	orr	r2, r2, r3
   22704:	e5ac2004 	str	r2, [ip, #4]!
   22708:	e15c000e 	cmp	ip, lr
   2270c:	e2833601 	add	r3, r3, #1048576	; 0x100000
   22710:	1affffef 	bne	226d4 <CPageTable::CPageTable(unsigned int)+0x30>
   22714:	e3a03000 	mov	r3, #0
   22718:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
   2271c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   22720:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   22724:	e1a02009 	mov	r2, r9
   22728:	eafffff4 	b	22700 <CPageTable::CPageTable(unsigned int)+0x5c>
   2272c:	0023fffc 	.word	0x0023fffc
   22730:	00023f44 	.word	0x00023f44
   22734:	0000040e 	.word	0x0000040e
   22738:	00010412 	.word	0x00010412
   2273c:	0000041e 	.word	0x0000041e
   22740:	20fffffe 	.word	0x20fffffe
   22744:	00010416 	.word	0x00010416
   22748:	00243ffc 	.word	0x00243ffc

0002274c <CPageTable::~CPageTable()>:
   2274c:	e12fff1e 	bx	lr

00022750 <CPageTable::GetBaseAddress() const>:
   22750:	e5900000 	ldr	r0, [r0]
   22754:	e3800001 	orr	r0, r0, #1
   22758:	e12fff1e 	bx	lr

0002275c <CurrentExecutionLevel>:
   2275c:	e10f0000 	mrs	r0, CPSR
   22760:	e3100040 	tst	r0, #64	; 0x40
   22764:	01a003a0 	lsreq	r0, r0, #7
   22768:	02000001 	andeq	r0, r0, #1
   2276c:	13a00002 	movne	r0, #2
   22770:	e12fff1e 	bx	lr

00022774 <EnterCritical>:
   22774:	e2403001 	sub	r3, r0, #1
   22778:	e3530001 	cmp	r3, #1
   2277c:	e92d4070 	push	{r4, r5, r6, lr}
   22780:	e1a05000 	mov	r5, r0
   22784:	9a000003 	bls	22798 <EnterCritical+0x24>
   22788:	e3a02064 	mov	r2, #100	; 0x64
   2278c:	e59f1080 	ldr	r1, [pc, #128]	; 22814 <EnterCritical+0xa0>
   22790:	e59f0080 	ldr	r0, [pc, #128]	; 22818 <EnterCritical+0xa4>
   22794:	ebffdf7f 	bl	1a598 <assertion_failed>
   22798:	e10f6000 	mrs	r6, CPSR
   2279c:	e3550002 	cmp	r5, #2
   227a0:	0a000001 	beq	227ac <EnterCritical+0x38>
   227a4:	e3160040 	tst	r6, #64	; 0x40
   227a8:	1a000014 	bne	22800 <EnterCritical+0x8c>
   227ac:	f10c00c0 	cpsid	if
   227b0:	e59f4064 	ldr	r4, [pc, #100]	; 2281c <EnterCritical+0xa8>
   227b4:	e5943000 	ldr	r3, [r4]
   227b8:	e3530013 	cmp	r3, #19
   227bc:	8a00000a 	bhi	227ec <EnterCritical+0x78>
   227c0:	e5943000 	ldr	r3, [r4]
   227c4:	e3550001 	cmp	r5, #1
   227c8:	e2832001 	add	r2, r3, #1
   227cc:	e0843103 	add	r3, r4, r3, lsl #2
   227d0:	e5842000 	str	r2, [r4]
   227d4:	e5836004 	str	r6, [r3, #4]
   227d8:	1a000000 	bne	227e0 <EnterCritical+0x6c>
   227dc:	f1080040 	cpsie	f
   227e0:	e3a03000 	mov	r3, #0
   227e4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   227e8:	e8bd8070 	pop	{r4, r5, r6, pc}
   227ec:	e3a0206e 	mov	r2, #110	; 0x6e
   227f0:	e59f101c 	ldr	r1, [pc, #28]	; 22814 <EnterCritical+0xa0>
   227f4:	e59f0024 	ldr	r0, [pc, #36]	; 22820 <EnterCritical+0xac>
   227f8:	ebffdf66 	bl	1a598 <assertion_failed>
   227fc:	eaffffef 	b	227c0 <EnterCritical+0x4c>
   22800:	e3a0206a 	mov	r2, #106	; 0x6a
   22804:	e59f1008 	ldr	r1, [pc, #8]	; 22814 <EnterCritical+0xa0>
   22808:	e59f0014 	ldr	r0, [pc, #20]	; 22824 <EnterCritical+0xb0>
   2280c:	ebffdf61 	bl	1a598 <assertion_failed>
   22810:	eaffffe5 	b	227ac <EnterCritical+0x38>
   22814:	00029614 	.word	0x00029614
   22818:	00029624 	.word	0x00029624
   2281c:	0002b2ac 	.word	0x0002b2ac
   22820:	0002968c 	.word	0x0002968c
   22824:	0002965c 	.word	0x0002965c

00022828 <LeaveCritical>:
   22828:	e92d4010 	push	{r4, lr}
   2282c:	e3a03000 	mov	r3, #0
   22830:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   22834:	f10c0040 	cpsid	f
   22838:	e59f4034 	ldr	r4, [pc, #52]	; 22874 <LeaveCritical+0x4c>
   2283c:	e5943000 	ldr	r3, [r4]
   22840:	e3530000 	cmp	r3, #0
   22844:	1a000003 	bne	22858 <LeaveCritical+0x30>
   22848:	e3a0207f 	mov	r2, #127	; 0x7f
   2284c:	e59f1024 	ldr	r1, [pc, #36]	; 22878 <LeaveCritical+0x50>
   22850:	e59f0024 	ldr	r0, [pc, #36]	; 2287c <LeaveCritical+0x54>
   22854:	ebffdf4f 	bl	1a598 <assertion_failed>
   22858:	e5943000 	ldr	r3, [r4]
   2285c:	e2433001 	sub	r3, r3, #1
   22860:	e5843000 	str	r3, [r4]
   22864:	e0844103 	add	r4, r4, r3, lsl #2
   22868:	e5943004 	ldr	r3, [r4, #4]
   2286c:	e121f003 	msr	CPSR_c, r3
   22870:	e8bd8010 	pop	{r4, pc}
   22874:	0002b2ac 	.word	0x0002b2ac
   22878:	00029614 	.word	0x00029614
   2287c:	000296b4 	.word	0x000296b4

00022880 <CleanAndInvalidateDataCacheRange>:
   22880:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
   22884:	e2813020 	add	r3, r1, #32
   22888:	e353001f 	cmp	r3, #31
   2288c:	82800020 	addhi	r0, r0, #32
   22890:	83c1101f 	bichi	r1, r1, #31
   22894:	80801001 	addhi	r1, r0, r1
   22898:	8a000001 	bhi	228a4 <CleanAndInvalidateDataCacheRange+0x24>
   2289c:	ea000003 	b	228b0 <CleanAndInvalidateDataCacheRange+0x30>
   228a0:	e2800020 	add	r0, r0, #32
   228a4:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
   228a8:	e1510000 	cmp	r1, r0
   228ac:	1afffffb 	bne	228a0 <CleanAndInvalidateDataCacheRange+0x20>
   228b0:	e3a03000 	mov	r3, #0
   228b4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   228b8:	e12fff1e 	bx	lr

000228bc <SyncDataAndInstructionCache>:
   228bc:	e3a03000 	mov	r3, #0
   228c0:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
   228c4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   228c8:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   228cc:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   228d0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   228d4:	ee073f95 	mcr	15, 0, r3, cr7, cr5, {4}
   228d8:	e12fff1e 	bx	lr

000228dc <operator new(unsigned int)>:
   228dc:	ea000023 	b	22970 <malloc>

000228e0 <operator new[](unsigned int)>:
   228e0:	ea000022 	b	22970 <malloc>

000228e4 <operator delete(void*)>:
   228e4:	ea00009f 	b	22b68 <free>

000228e8 <operator delete[](void*)>:
   228e8:	ea00009e 	b	22b68 <free>

000228ec <operator delete(void*, unsigned int)>:
   228ec:	ea00009d 	b	22b68 <free>

000228f0 <operator delete[](void*, unsigned int)>:
   228f0:	ea00009c 	b	22b68 <free>

000228f4 <__cxa_pure_virtual>:
   228f4:	e3a02018 	mov	r2, #24
   228f8:	e59f1004 	ldr	r1, [pc, #4]	; 22904 <__cxa_pure_virtual+0x10>
   228fc:	e59f0004 	ldr	r0, [pc, #4]	; 22908 <__cxa_pure_virtual+0x14>
   22900:	eaffdf24 	b	1a598 <assertion_failed>
   22904:	000296cc 	.word	0x000296cc
   22908:	00024970 	.word	0x00024970

0002290c <mem_init>:
   2290c:	e3500605 	cmp	r0, #5242880	; 0x500000
   22910:	21a0c000 	movcs	ip, r0
   22914:	33a0c605 	movcc	ip, #5242880	; 0x500000
   22918:	e0801001 	add	r1, r0, r1
   2291c:	e24139ff 	sub	r3, r1, #4177920	; 0x3fc000
   22920:	e2433a03 	sub	r3, r3, #12288	; 0x3000
   22924:	e59f2018 	ldr	r2, [pc, #24]	; 22944 <mem_init+0x38>
   22928:	e3c33eff 	bic	r3, r3, #4080	; 0xff0
   2292c:	e2410501 	sub	r0, r1, #4194304	; 0x400000
   22930:	e3c3300f 	bic	r3, r3, #15
   22934:	e582c000 	str	ip, [r2]
   22938:	e582100c 	str	r1, [r2, #12]
   2293c:	e9820009 	stmib	r2, {r0, r3}
   22940:	e12fff1e 	bx	lr
   22944:	0002b300 	.word	0x0002b300

00022948 <mem_get_size>:
   22948:	e59f301c 	ldr	r3, [pc, #28]	; 2296c <mem_get_size+0x24>
   2294c:	e5930004 	ldr	r0, [r3, #4]
   22950:	e5931000 	ldr	r1, [r3]
   22954:	e593200c 	ldr	r2, [r3, #12]
   22958:	e5933008 	ldr	r3, [r3, #8]
   2295c:	e0400001 	sub	r0, r0, r1
   22960:	e0423003 	sub	r3, r2, r3
   22964:	e0800003 	add	r0, r0, r3
   22968:	e12fff1e 	bx	lr
   2296c:	0002b300 	.word	0x0002b300

00022970 <malloc>:
   22970:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   22974:	e59f71c8 	ldr	r7, [pc, #456]	; 22b44 <malloc+0x1d4>
   22978:	e1a05000 	mov	r5, r0
   2297c:	e5973000 	ldr	r3, [r7]
   22980:	e3530000 	cmp	r3, #0
   22984:	0a000069 	beq	22b30 <malloc+0x1c0>
   22988:	e5970010 	ldr	r0, [r7, #16]
   2298c:	e3500000 	cmp	r0, #0
   22990:	1a000057 	bne	22af4 <malloc+0x184>
   22994:	e59f21ac 	ldr	r2, [pc, #428]	; 22b48 <malloc+0x1d8>
   22998:	e5923000 	ldr	r3, [r2]
   2299c:	e3530000 	cmp	r3, #0
   229a0:	0a000008 	beq	229c8 <malloc+0x58>
   229a4:	e1550003 	cmp	r5, r3
   229a8:	e1a04002 	mov	r4, r2
   229ac:	8a000002 	bhi	229bc <malloc+0x4c>
   229b0:	ea000024 	b	22a48 <malloc+0xd8>
   229b4:	e1530005 	cmp	r3, r5
   229b8:	2a000022 	bcs	22a48 <malloc+0xd8>
   229bc:	e5b43008 	ldr	r3, [r4, #8]!
   229c0:	e3530000 	cmp	r3, #0
   229c4:	1afffffa 	bne	229b4 <malloc+0x44>
   229c8:	e5976000 	ldr	r6, [r7]
   229cc:	e285301f 	add	r3, r5, #31
   229d0:	e3c3300f 	bic	r3, r3, #15
   229d4:	e0863003 	add	r3, r6, r3
   229d8:	e1560003 	cmp	r6, r3
   229dc:	2a000046 	bcs	22afc <malloc+0x18c>
   229e0:	e5971004 	ldr	r1, [r7, #4]
   229e4:	e5920040 	ldr	r0, [r2, #64]	; 0x40
   229e8:	e0411000 	sub	r1, r1, r0
   229ec:	e1530001 	cmp	r3, r1
   229f0:	8a000041 	bhi	22afc <malloc+0x18c>
   229f4:	e3a0e043 	mov	lr, #67	; 0x43
   229f8:	e3a0c04d 	mov	ip, #77	; 0x4d
   229fc:	e3a0004c 	mov	r0, #76	; 0x4c
   22a00:	e3a01042 	mov	r1, #66	; 0x42
   22a04:	e5873000 	str	r3, [r7]
   22a08:	e1a03825 	lsr	r3, r5, #16
   22a0c:	e5c63006 	strb	r3, [r6, #6]
   22a10:	e5973010 	ldr	r3, [r7, #16]
   22a14:	e1a02425 	lsr	r2, r5, #8
   22a18:	e5c65004 	strb	r5, [r6, #4]
   22a1c:	e3530000 	cmp	r3, #0
   22a20:	e1a05c25 	lsr	r5, r5, #24
   22a24:	e5c6e000 	strb	lr, [r6]
   22a28:	e5c6c001 	strb	ip, [r6, #1]
   22a2c:	e5c60002 	strb	r0, [r6, #2]
   22a30:	e5c61003 	strb	r1, [r6, #3]
   22a34:	e5c62005 	strb	r2, [r6, #5]
   22a38:	e5c65007 	strb	r5, [r6, #7]
   22a3c:	0a00001e 	beq	22abc <malloc+0x14c>
   22a40:	ebffff78 	bl	22828 <LeaveCritical>
   22a44:	ea00001c 	b	22abc <malloc+0x14c>
   22a48:	e5946004 	ldr	r6, [r4, #4]
   22a4c:	e3560000 	cmp	r6, #0
   22a50:	01a05003 	moveq	r5, r3
   22a54:	0affffdb 	beq	229c8 <malloc+0x58>
   22a58:	e5d61001 	ldrb	r1, [r6, #1]
   22a5c:	e5d63000 	ldrb	r3, [r6]
   22a60:	e5d62002 	ldrb	r2, [r6, #2]
   22a64:	e1833401 	orr	r3, r3, r1, lsl #8
   22a68:	e5d61003 	ldrb	r1, [r6, #3]
   22a6c:	e1833802 	orr	r3, r3, r2, lsl #16
   22a70:	e59f20d4 	ldr	r2, [pc, #212]	; 22b4c <malloc+0x1dc>
   22a74:	e1833c01 	orr	r3, r3, r1, lsl #24
   22a78:	e1530002 	cmp	r3, r2
   22a7c:	0a000003 	beq	22a90 <malloc+0x120>
   22a80:	e3a0208a 	mov	r2, #138	; 0x8a
   22a84:	e59f10c4 	ldr	r1, [pc, #196]	; 22b50 <malloc+0x1e0>
   22a88:	e59f00c4 	ldr	r0, [pc, #196]	; 22b54 <malloc+0x1e4>
   22a8c:	ebffdec1 	bl	1a598 <assertion_failed>
   22a90:	e5d62009 	ldrb	r2, [r6, #9]
   22a94:	e5d63008 	ldrb	r3, [r6, #8]
   22a98:	e5d6100a 	ldrb	r1, [r6, #10]
   22a9c:	e1833402 	orr	r3, r3, r2, lsl #8
   22aa0:	e5d6200b 	ldrb	r2, [r6, #11]
   22aa4:	e1833801 	orr	r3, r3, r1, lsl #16
   22aa8:	e1833c02 	orr	r3, r3, r2, lsl #24
   22aac:	e5843004 	str	r3, [r4, #4]
   22ab0:	e5973010 	ldr	r3, [r7, #16]
   22ab4:	e3530000 	cmp	r3, #0
   22ab8:	1affffe0 	bne	22a40 <malloc+0xd0>
   22abc:	e3a03000 	mov	r3, #0
   22ac0:	e2864010 	add	r4, r6, #16
   22ac4:	e314000f 	tst	r4, #15
   22ac8:	e5c63008 	strb	r3, [r6, #8]
   22acc:	e5c63009 	strb	r3, [r6, #9]
   22ad0:	e5c6300a 	strb	r3, [r6, #10]
   22ad4:	e5c6300b 	strb	r3, [r6, #11]
   22ad8:	0a000003 	beq	22aec <malloc+0x17c>
   22adc:	e3a020b3 	mov	r2, #179	; 0xb3
   22ae0:	e59f1068 	ldr	r1, [pc, #104]	; 22b50 <malloc+0x1e0>
   22ae4:	e59f006c 	ldr	r0, [pc, #108]	; 22b58 <malloc+0x1e8>
   22ae8:	ebffdeaa 	bl	1a598 <assertion_failed>
   22aec:	e1a00004 	mov	r0, r4
   22af0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   22af4:	ebffff1e 	bl	22774 <EnterCritical>
   22af8:	eaffffa5 	b	22994 <malloc+0x24>
   22afc:	e3a01000 	mov	r1, #0
   22b00:	e5973010 	ldr	r3, [r7, #16]
   22b04:	e5821040 	str	r1, [r2, #64]	; 0x40
   22b08:	e1530001 	cmp	r3, r1
   22b0c:	0a000000 	beq	22b14 <malloc+0x1a4>
   22b10:	ebffff44 	bl	22828 <LeaveCritical>
   22b14:	ebffe892 	bl	1cd64 <CLogger::Get()>
   22b18:	e59f303c 	ldr	r3, [pc, #60]	; 22b5c <malloc+0x1ec>
   22b1c:	e3a02000 	mov	r2, #0
   22b20:	e59f1038 	ldr	r1, [pc, #56]	; 22b60 <malloc+0x1f0>
   22b24:	ebffea37 	bl	1d408 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   22b28:	e3a04000 	mov	r4, #0
   22b2c:	eaffffee 	b	22aec <malloc+0x17c>
   22b30:	e3a02070 	mov	r2, #112	; 0x70
   22b34:	e59f1014 	ldr	r1, [pc, #20]	; 22b50 <malloc+0x1e0>
   22b38:	e59f0024 	ldr	r0, [pc, #36]	; 22b64 <malloc+0x1f4>
   22b3c:	ebffde95 	bl	1a598 <assertion_failed>
   22b40:	eaffff90 	b	22988 <malloc+0x18>
   22b44:	0002b300 	.word	0x0002b300
   22b48:	0002b17c 	.word	0x0002b17c
   22b4c:	424c4d43 	.word	0x424c4d43
   22b50:	000296dc 	.word	0x000296dc
   22b54:	000296fc 	.word	0x000296fc
   22b58:	00029738 	.word	0x00029738
   22b5c:	00029720 	.word	0x00029720
   22b60:	00029730 	.word	0x00029730
   22b64:	000296e8 	.word	0x000296e8

00022b68 <free>:
   22b68:	e3500000 	cmp	r0, #0
   22b6c:	012fff1e 	bxeq	lr
   22b70:	e92d4070 	push	{r4, r5, r6, lr}
   22b74:	e2405010 	sub	r5, r0, #16
   22b78:	e5d51001 	ldrb	r1, [r5, #1]
   22b7c:	e5503010 	ldrb	r3, [r0, #-16]
   22b80:	e5d52002 	ldrb	r2, [r5, #2]
   22b84:	e1833401 	orr	r3, r3, r1, lsl #8
   22b88:	e5d51003 	ldrb	r1, [r5, #3]
   22b8c:	e1833802 	orr	r3, r3, r2, lsl #16
   22b90:	e59f20dc 	ldr	r2, [pc, #220]	; 22c74 <free+0x10c>
   22b94:	e1833c01 	orr	r3, r3, r1, lsl #24
   22b98:	e1530002 	cmp	r3, r2
   22b9c:	0a000003 	beq	22bb0 <free+0x48>
   22ba0:	e3a020c0 	mov	r2, #192	; 0xc0
   22ba4:	e59f10cc 	ldr	r1, [pc, #204]	; 22c78 <free+0x110>
   22ba8:	e59f00cc 	ldr	r0, [pc, #204]	; 22c7c <free+0x114>
   22bac:	ebffde79 	bl	1a598 <assertion_failed>
   22bb0:	e59f40c8 	ldr	r4, [pc, #200]	; 22c80 <free+0x118>
   22bb4:	e5943000 	ldr	r3, [r4]
   22bb8:	e3530000 	cmp	r3, #0
   22bbc:	08bd8070 	popeq	{r4, r5, r6, pc}
   22bc0:	e5d51005 	ldrb	r1, [r5, #5]
   22bc4:	e5d52004 	ldrb	r2, [r5, #4]
   22bc8:	e5d50006 	ldrb	r0, [r5, #6]
   22bcc:	e1822401 	orr	r2, r2, r1, lsl #8
   22bd0:	e5d51007 	ldrb	r1, [r5, #7]
   22bd4:	e1822800 	orr	r2, r2, r0, lsl #16
   22bd8:	e1822c01 	orr	r2, r2, r1, lsl #24
   22bdc:	e1520003 	cmp	r2, r3
   22be0:	1a000002 	bne	22bf0 <free+0x88>
   22be4:	ea000005 	b	22c00 <free+0x98>
   22be8:	e1530002 	cmp	r3, r2
   22bec:	0a000003 	beq	22c00 <free+0x98>
   22bf0:	e5b43008 	ldr	r3, [r4, #8]!
   22bf4:	e3530000 	cmp	r3, #0
   22bf8:	1afffffa 	bne	22be8 <free+0x80>
   22bfc:	e8bd8070 	pop	{r4, r5, r6, pc}
   22c00:	e59f607c 	ldr	r6, [pc, #124]	; 22c84 <free+0x11c>
   22c04:	e5960010 	ldr	r0, [r6, #16]
   22c08:	e3500000 	cmp	r0, #0
   22c0c:	1a000009 	bne	22c38 <free+0xd0>
   22c10:	e5d40004 	ldrb	r0, [r4, #4]
   22c14:	e5d41005 	ldrb	r1, [r4, #5]
   22c18:	e5d42006 	ldrb	r2, [r4, #6]
   22c1c:	e5d43007 	ldrb	r3, [r4, #7]
   22c20:	e5c50008 	strb	r0, [r5, #8]
   22c24:	e5c51009 	strb	r1, [r5, #9]
   22c28:	e5c5200a 	strb	r2, [r5, #10]
   22c2c:	e5c5300b 	strb	r3, [r5, #11]
   22c30:	e5845004 	str	r5, [r4, #4]
   22c34:	e8bd8070 	pop	{r4, r5, r6, pc}
   22c38:	ebfffecd 	bl	22774 <EnterCritical>
   22c3c:	e596c010 	ldr	ip, [r6, #16]
   22c40:	e5d40004 	ldrb	r0, [r4, #4]
   22c44:	e5d41005 	ldrb	r1, [r4, #5]
   22c48:	e5d42006 	ldrb	r2, [r4, #6]
   22c4c:	e5d43007 	ldrb	r3, [r4, #7]
   22c50:	e35c0000 	cmp	ip, #0
   22c54:	e5c50008 	strb	r0, [r5, #8]
   22c58:	e5c51009 	strb	r1, [r5, #9]
   22c5c:	e5c5200a 	strb	r2, [r5, #10]
   22c60:	e5c5300b 	strb	r3, [r5, #11]
   22c64:	e5845004 	str	r5, [r4, #4]
   22c68:	08bd8070 	popeq	{r4, r5, r6, pc}
   22c6c:	e8bd4070 	pop	{r4, r5, r6, lr}
   22c70:	eafffeec 	b	22828 <LeaveCritical>
   22c74:	424c4d43 	.word	0x424c4d43
   22c78:	000296dc 	.word	0x000296dc
   22c7c:	000296fc 	.word	0x000296fc
   22c80:	0002b17c 	.word	0x0002b17c
   22c84:	0002b300 	.word	0x0002b300

00022c88 <calloc>:
   22c88:	e92d4070 	push	{r4, r5, r6, lr}
   22c8c:	e0040190 	mul	r4, r0, r1
   22c90:	e3540000 	cmp	r4, #0
   22c94:	03a04001 	moveq	r4, #1
   22c98:	e1540000 	cmp	r4, r0
   22c9c:	3a000008 	bcc	22cc4 <calloc+0x3c>
   22ca0:	e1a00004 	mov	r0, r4
   22ca4:	ebffff31 	bl	22970 <malloc>
   22ca8:	e2505000 	subs	r5, r0, #0
   22cac:	0a000002 	beq	22cbc <calloc+0x34>
   22cb0:	e1a02004 	mov	r2, r4
   22cb4:	e3a01000 	mov	r1, #0
   22cb8:	ebfffa99 	bl	21724 <memset>
   22cbc:	e1a00005 	mov	r0, r5
   22cc0:	e8bd8070 	pop	{r4, r5, r6, pc}
   22cc4:	e3a020e2 	mov	r2, #226	; 0xe2
   22cc8:	e59f1008 	ldr	r1, [pc, #8]	; 22cd8 <calloc+0x50>
   22ccc:	e59f0008 	ldr	r0, [pc, #8]	; 22cdc <calloc+0x54>
   22cd0:	ebffde30 	bl	1a598 <assertion_failed>
   22cd4:	eafffff1 	b	22ca0 <calloc+0x18>
   22cd8:	000296dc 	.word	0x000296dc
   22cdc:	00029764 	.word	0x00029764

00022ce0 <realloc>:
   22ce0:	e92d4070 	push	{r4, r5, r6, lr}
   22ce4:	e2505000 	subs	r5, r0, #0
   22ce8:	e1a06001 	mov	r6, r1
   22cec:	0a00002d 	beq	22da8 <realloc+0xc8>
   22cf0:	e3510000 	cmp	r1, #0
   22cf4:	0a000027 	beq	22d98 <realloc+0xb8>
   22cf8:	e2454010 	sub	r4, r5, #16
   22cfc:	e5d41001 	ldrb	r1, [r4, #1]
   22d00:	e5553010 	ldrb	r3, [r5, #-16]
   22d04:	e5d42002 	ldrb	r2, [r4, #2]
   22d08:	e1833401 	orr	r3, r3, r1, lsl #8
   22d0c:	e5d41003 	ldrb	r1, [r4, #3]
   22d10:	e1833802 	orr	r3, r3, r2, lsl #16
   22d14:	e59f20a0 	ldr	r2, [pc, #160]	; 22dbc <realloc+0xdc>
   22d18:	e1833c01 	orr	r3, r3, r1, lsl #24
   22d1c:	e1530002 	cmp	r3, r2
   22d20:	0a000003 	beq	22d34 <realloc+0x54>
   22d24:	e3a020fc 	mov	r2, #252	; 0xfc
   22d28:	e59f1090 	ldr	r1, [pc, #144]	; 22dc0 <realloc+0xe0>
   22d2c:	e59f0090 	ldr	r0, [pc, #144]	; 22dc4 <realloc+0xe4>
   22d30:	ebffde18 	bl	1a598 <assertion_failed>
   22d34:	e5d42005 	ldrb	r2, [r4, #5]
   22d38:	e5d43004 	ldrb	r3, [r4, #4]
   22d3c:	e5d41006 	ldrb	r1, [r4, #6]
   22d40:	e1833402 	orr	r3, r3, r2, lsl #8
   22d44:	e5d42007 	ldrb	r2, [r4, #7]
   22d48:	e1833801 	orr	r3, r3, r1, lsl #16
   22d4c:	e1833c02 	orr	r3, r3, r2, lsl #24
   22d50:	e1560003 	cmp	r6, r3
   22d54:	8a000001 	bhi	22d60 <realloc+0x80>
   22d58:	e1a00005 	mov	r0, r5
   22d5c:	e8bd8070 	pop	{r4, r5, r6, pc}
   22d60:	e1a00006 	mov	r0, r6
   22d64:	ebffff01 	bl	22970 <malloc>
   22d68:	e2506000 	subs	r6, r0, #0
   22d6c:	0a000010 	beq	22db4 <realloc+0xd4>
   22d70:	e5d42005 	ldrb	r2, [r4, #5]
   22d74:	e5d43004 	ldrb	r3, [r4, #4]
   22d78:	e5d41006 	ldrb	r1, [r4, #6]
   22d7c:	e1833402 	orr	r3, r3, r2, lsl #8
   22d80:	e5d42007 	ldrb	r2, [r4, #7]
   22d84:	e1833801 	orr	r3, r3, r1, lsl #16
   22d88:	e1832c02 	orr	r2, r3, r2, lsl #24
   22d8c:	e1a01005 	mov	r1, r5
   22d90:	ebfffbd5 	bl	21cec <memcpy>
   22d94:	e1a00005 	mov	r0, r5
   22d98:	e1a05006 	mov	r5, r6
   22d9c:	ebffff71 	bl	22b68 <free>
   22da0:	e1a00005 	mov	r0, r5
   22da4:	e8bd8070 	pop	{r4, r5, r6, pc}
   22da8:	e1a00001 	mov	r0, r1
   22dac:	e8bd4070 	pop	{r4, r5, r6, lr}
   22db0:	eafffeee 	b	22970 <malloc>
   22db4:	e1a05006 	mov	r5, r6
   22db8:	eaffffe6 	b	22d58 <realloc+0x78>
   22dbc:	424c4d43 	.word	0x424c4d43
   22dc0:	000296dc 	.word	0x000296dc
   22dc4:	000296fc 	.word	0x000296fc

00022dc8 <palloc>:
   22dc8:	e92d4070 	push	{r4, r5, r6, lr}
   22dcc:	e59f50c4 	ldr	r5, [pc, #196]	; 22e98 <palloc+0xd0>
   22dd0:	e5953008 	ldr	r3, [r5, #8]
   22dd4:	e3530000 	cmp	r3, #0
   22dd8:	0a000029 	beq	22e84 <palloc+0xbc>
   22ddc:	e5950014 	ldr	r0, [r5, #20]
   22de0:	e3500000 	cmp	r0, #0
   22de4:	1a000016 	bne	22e44 <palloc+0x7c>
   22de8:	e5954018 	ldr	r4, [r5, #24]
   22dec:	e3540000 	cmp	r4, #0
   22df0:	0a000017 	beq	22e54 <palloc+0x8c>
   22df4:	e59f30a0 	ldr	r3, [pc, #160]	; 22e9c <palloc+0xd4>
   22df8:	e5942000 	ldr	r2, [r4]
   22dfc:	e1520003 	cmp	r2, r3
   22e00:	0a000003 	beq	22e14 <palloc+0x4c>
   22e04:	e59f2094 	ldr	r2, [pc, #148]	; 22ea0 <palloc+0xd8>
   22e08:	e59f1094 	ldr	r1, [pc, #148]	; 22ea4 <palloc+0xdc>
   22e0c:	e59f0094 	ldr	r0, [pc, #148]	; 22ea8 <palloc+0xe0>
   22e10:	ebffdde0 	bl	1a598 <assertion_failed>
   22e14:	e3a02000 	mov	r2, #0
   22e18:	e5943004 	ldr	r3, [r4, #4]
   22e1c:	e5842000 	str	r2, [r4]
   22e20:	e5853018 	str	r3, [r5, #24]
   22e24:	e5953014 	ldr	r3, [r5, #20]
   22e28:	e3530000 	cmp	r3, #0
   22e2c:	1a000001 	bne	22e38 <palloc+0x70>
   22e30:	e1a00004 	mov	r0, r4
   22e34:	e8bd8070 	pop	{r4, r5, r6, pc}
   22e38:	ebfffe7a 	bl	22828 <LeaveCritical>
   22e3c:	e1a00004 	mov	r0, r4
   22e40:	e8bd8070 	pop	{r4, r5, r6, pc}
   22e44:	ebfffe4a 	bl	22774 <EnterCritical>
   22e48:	e5954018 	ldr	r4, [r5, #24]
   22e4c:	e3540000 	cmp	r4, #0
   22e50:	1affffe7 	bne	22df4 <palloc+0x2c>
   22e54:	e5954008 	ldr	r4, [r5, #8]
   22e58:	e595200c 	ldr	r2, [r5, #12]
   22e5c:	e2843a01 	add	r3, r4, #4096	; 0x1000
   22e60:	e1530002 	cmp	r3, r2
   22e64:	e5853008 	str	r3, [r5, #8]
   22e68:	9affffed 	bls	22e24 <palloc+0x5c>
   22e6c:	e5954014 	ldr	r4, [r5, #20]
   22e70:	e3540000 	cmp	r4, #0
   22e74:	0affffed 	beq	22e30 <palloc+0x68>
   22e78:	ebfffe6a 	bl	22828 <LeaveCritical>
   22e7c:	e3a00000 	mov	r0, #0
   22e80:	e8bd8070 	pop	{r4, r5, r6, pc}
   22e84:	e59f2020 	ldr	r2, [pc, #32]	; 22eac <palloc+0xe4>
   22e88:	e59f1014 	ldr	r1, [pc, #20]	; 22ea4 <palloc+0xdc>
   22e8c:	e59f001c 	ldr	r0, [pc, #28]	; 22eb0 <palloc+0xe8>
   22e90:	ebffddc0 	bl	1a598 <assertion_failed>
   22e94:	eaffffd0 	b	22ddc <palloc+0x14>
   22e98:	0002b300 	.word	0x0002b300
   22e9c:	50474d43 	.word	0x50474d43
   22ea0:	0000011f 	.word	0x0000011f
   22ea4:	000296dc 	.word	0x000296dc
   22ea8:	0002978c 	.word	0x0002978c
   22eac:	00000111 	.word	0x00000111
   22eb0:	00029778 	.word	0x00029778

00022eb4 <pfree>:
   22eb4:	e92d4070 	push	{r4, r5, r6, lr}
   22eb8:	e2504000 	subs	r4, r0, #0
   22ebc:	08bd8070 	popeq	{r4, r5, r6, pc}
   22ec0:	e59f5044 	ldr	r5, [pc, #68]	; 22f0c <pfree+0x58>
   22ec4:	e5950014 	ldr	r0, [r5, #20]
   22ec8:	e3500000 	cmp	r0, #0
   22ecc:	1a000004 	bne	22ee4 <pfree+0x30>
   22ed0:	e5952018 	ldr	r2, [r5, #24]
   22ed4:	e59f1034 	ldr	r1, [pc, #52]	; 22f10 <pfree+0x5c>
   22ed8:	e5854018 	str	r4, [r5, #24]
   22edc:	e8840006 	stm	r4, {r1, r2}
   22ee0:	e8bd8070 	pop	{r4, r5, r6, pc}
   22ee4:	ebfffe22 	bl	22774 <EnterCritical>
   22ee8:	e5951014 	ldr	r1, [r5, #20]
   22eec:	e5953018 	ldr	r3, [r5, #24]
   22ef0:	e59f2018 	ldr	r2, [pc, #24]	; 22f10 <pfree+0x5c>
   22ef4:	e3510000 	cmp	r1, #0
   22ef8:	e884000c 	stm	r4, {r2, r3}
   22efc:	e5854018 	str	r4, [r5, #24]
   22f00:	08bd8070 	popeq	{r4, r5, r6, pc}
   22f04:	e8bd4070 	pop	{r4, r5, r6, lr}
   22f08:	eafffe46 	b	22828 <LeaveCritical>
   22f0c:	0002b300 	.word	0x0002b300
   22f10:	50474d43 	.word	0x50474d43

00022f14 <_GLOBAL__sub_I_mem_init>:
   22f14:	e3a02001 	mov	r2, #1
   22f18:	e59f3008 	ldr	r3, [pc, #8]	; 22f28 <_GLOBAL__sub_I_mem_init+0x14>
   22f1c:	e5832010 	str	r2, [r3, #16]
   22f20:	e5832014 	str	r2, [r3, #20]
   22f24:	e12fff1e 	bx	lr
   22f28:	0002b300 	.word	0x0002b300

00022f2c <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>:
   22f2c:	e3a02000 	mov	r2, #0
   22f30:	e3a01001 	mov	r1, #1
   22f34:	e92d4030 	push	{r4, r5, lr}
   22f38:	e1a04000 	mov	r4, r0
   22f3c:	e5903020 	ldr	r3, [r0, #32]
   22f40:	e24dd014 	sub	sp, sp, #20
   22f44:	e5c31011 	strb	r1, [r3, #17]
   22f48:	e5c3200c 	strb	r2, [r3, #12]
   22f4c:	e5c3200d 	strb	r2, [r3, #13]
   22f50:	e5c3200e 	strb	r2, [r3, #14]
   22f54:	e5c3200f 	strb	r2, [r3, #15]
   22f58:	e5c32010 	strb	r2, [r3, #16]
   22f5c:	e5c32012 	strb	r2, [r3, #18]
   22f60:	e5c32013 	strb	r2, [r3, #19]
   22f64:	e28d000c 	add	r0, sp, #12
   22f68:	ebffddae 	bl	1a628 <CBcmPropertyTags::CBcmPropertyTags()>
   22f6c:	e59f306c 	ldr	r3, [pc, #108]	; 22fe0 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0xb4>
   22f70:	e5942020 	ldr	r2, [r4, #32]
   22f74:	e28d000c 	add	r0, sp, #12
   22f78:	e58d3000 	str	r3, [sp]
   22f7c:	e59f1060 	ldr	r1, [pc, #96]	; 22fe4 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0xb8>
   22f80:	e283300c 	add	r3, r3, #12
   22f84:	ebffddfe 	bl	1a784 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   22f88:	e2505000 	subs	r5, r0, #0
   22f8c:	0a000008 	beq	22fb4 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x88>
   22f90:	e5942020 	ldr	r2, [r4, #32]
   22f94:	e5d2300c 	ldrb	r3, [r2, #12]
   22f98:	e5d2000d 	ldrb	r0, [r2, #13]
   22f9c:	e5d2100e 	ldrb	r1, [r2, #14]
   22fa0:	e1833400 	orr	r3, r3, r0, lsl #8
   22fa4:	e5d2200f 	ldrb	r2, [r2, #15]
   22fa8:	e1833801 	orr	r3, r3, r1, lsl #16
   22fac:	e1933c02 	orrs	r3, r3, r2, lsl #24
   22fb0:	0a000005 	beq	22fcc <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0xa0>
   22fb4:	e3a05000 	mov	r5, #0
   22fb8:	e28d000c 	add	r0, sp, #12
   22fbc:	ebffdd9f 	bl	1a640 <CBcmPropertyTags::~CBcmPropertyTags()>
   22fc0:	e1a00005 	mov	r0, r5
   22fc4:	e28dd014 	add	sp, sp, #20
   22fc8:	e8bd8030 	pop	{r4, r5, pc}
   22fcc:	e28d000c 	add	r0, sp, #12
   22fd0:	ebffdd9a 	bl	1a640 <CBcmPropertyTags::~CBcmPropertyTags()>
   22fd4:	e1a00005 	mov	r0, r5
   22fd8:	e28dd014 	add	sp, sp, #20
   22fdc:	e8bd8030 	pop	{r4, r5, pc}
   22fe0:	00000408 	.word	0x00000408
   22fe4:	0004800b 	.word	0x0004800b

00022fe8 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
   22fe8:	e92d4030 	push	{r4, r5, lr}
   22fec:	e3510000 	cmp	r1, #0
   22ff0:	13520000 	cmpne	r2, #0
   22ff4:	e1a04000 	mov	r4, r0
   22ff8:	e3a05000 	mov	r5, #0
   22ffc:	e24dd024 	sub	sp, sp, #36	; 0x24
   23000:	e59dc034 	ldr	ip, [sp, #52]	; 0x34
   23004:	e59d0030 	ldr	r0, [sp, #48]	; 0x30
   23008:	e8840006 	stm	r4, {r1, r2}
   2300c:	e5843010 	str	r3, [r4, #16]
   23010:	e584c00c 	str	ip, [r4, #12]
   23014:	e5840008 	str	r0, [r4, #8]
   23018:	e5845014 	str	r5, [r4, #20]
   2301c:	e5845018 	str	r5, [r4, #24]
   23020:	e584501c 	str	r5, [r4, #28]
   23024:	e5845020 	str	r5, [r4, #32]
   23028:	1a000010 	bne	23070 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x88>
   2302c:	e28d0008 	add	r0, sp, #8
   23030:	ebffdd7c 	bl	1a628 <CBcmPropertyTags::CBcmPropertyTags()>
   23034:	e58d5000 	str	r5, [sp]
   23038:	e28d0008 	add	r0, sp, #8
   2303c:	e3a03014 	mov	r3, #20
   23040:	e28d200c 	add	r2, sp, #12
   23044:	e59f10c8 	ldr	r1, [pc, #200]	; 23114 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x12c>
   23048:	ebffddcd 	bl	1a784 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   2304c:	e1500005 	cmp	r0, r5
   23050:	1a000026 	bne	230f0 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x108>
   23054:	e3a02d0a 	mov	r2, #640	; 0x280
   23058:	e3a03e1e 	mov	r3, #480	; 0x1e0
   2305c:	e884000c 	stm	r4, {r2, r3}
   23060:	e28d0008 	add	r0, sp, #8
   23064:	ebffdd75 	bl	1a640 <CBcmPropertyTags::~CBcmPropertyTags()>
   23068:	e5940008 	ldr	r0, [r4, #8]
   2306c:	e5943010 	ldr	r3, [r4, #16]
   23070:	e3500000 	cmp	r0, #0
   23074:	0a000019 	beq	230e0 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xf8>
   23078:	e594200c 	ldr	r2, [r4, #12]
   2307c:	e3520000 	cmp	r2, #0
   23080:	0a000016 	beq	230e0 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xf8>
   23084:	e3530008 	cmp	r3, #8
   23088:	8a000006 	bhi	230a8 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xc0>
   2308c:	e59f0084 	ldr	r0, [pc, #132]	; 23118 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x130>
   23090:	ebfffe12 	bl	228e0 <operator new[](unsigned int)>
   23094:	e3a02b01 	mov	r2, #1024	; 0x400
   23098:	e5840020 	str	r0, [r4, #32]
   2309c:	e3a01000 	mov	r1, #0
   230a0:	e2800014 	add	r0, r0, #20
   230a4:	ebfff99e 	bl	21724 <memset>
   230a8:	e3a02070 	mov	r2, #112	; 0x70
   230ac:	e59f1068 	ldr	r1, [pc, #104]	; 2311c <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x134>
   230b0:	e2840024 	add	r0, r4, #36	; 0x24
   230b4:	ebfffb0c 	bl	21cec <memcpy>
   230b8:	e994000f 	ldmib	r4, {r0, r1, r2, r3}
   230bc:	e5840034 	str	r0, [r4, #52]	; 0x34
   230c0:	e1a00004 	mov	r0, r4
   230c4:	e594c000 	ldr	ip, [r4]
   230c8:	e5841044 	str	r1, [r4, #68]	; 0x44
   230cc:	e584c030 	str	ip, [r4, #48]	; 0x30
   230d0:	e5842048 	str	r2, [r4, #72]	; 0x48
   230d4:	e5843058 	str	r3, [r4, #88]	; 0x58
   230d8:	e28dd024 	add	sp, sp, #36	; 0x24
   230dc:	e8bd8030 	pop	{r4, r5, pc}
   230e0:	e8940006 	ldm	r4, {r1, r2}
   230e4:	e5841008 	str	r1, [r4, #8]
   230e8:	e584200c 	str	r2, [r4, #12]
   230ec:	eaffffe4 	b	23084 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x9c>
   230f0:	e59d2018 	ldr	r2, [sp, #24]
   230f4:	e59d301c 	ldr	r3, [sp, #28]
   230f8:	e2420d0a 	sub	r0, r2, #640	; 0x280
   230fc:	e2431e1e 	sub	r1, r3, #480	; 0x1e0
   23100:	e3510f96 	cmp	r1, #600	; 0x258
   23104:	93500c05 	cmpls	r0, #1280	; 0x500
   23108:	e884000c 	stm	r4, {r2, r3}
   2310c:	9affffd3 	bls	23060 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x78>
   23110:	eaffffcf 	b	23054 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
   23114:	00040003 	.word	0x00040003
   23118:	00000414 	.word	0x00000414
   2311c:	0002b1c0 	.word	0x0002b1c0

00023120 <CBcmFrameBuffer::~CBcmFrameBuffer()>:
   23120:	e92d4010 	push	{r4, lr}
   23124:	e1a04000 	mov	r4, r0
   23128:	e3a01014 	mov	r1, #20
   2312c:	e5900020 	ldr	r0, [r0, #32]
   23130:	ebfffded 	bl	228ec <operator delete(void*, unsigned int)>
   23134:	e1a00004 	mov	r0, r4
   23138:	e8bd8010 	pop	{r4, pc}

0002313c <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)>:
   2313c:	e5903010 	ldr	r3, [r0, #16]
   23140:	e3530008 	cmp	r3, #8
   23144:	812fff1e 	bxhi	lr
   23148:	e1a03982 	lsl	r3, r2, #19
   2314c:	e1a0c5a2 	lsr	ip, r2, #11
   23150:	e203373e 	and	r3, r3, #16252928	; 0xf80000
   23154:	e183318c 	orr	r3, r3, ip, lsl #3
   23158:	e1a02282 	lsl	r2, r2, #5
   2315c:	e5900020 	ldr	r0, [r0, #32]
   23160:	e38334ff 	orr	r3, r3, #-16777216	; 0xff000000
   23164:	e2022b3f 	and	r2, r2, #64512	; 0xfc00
   23168:	e1822003 	orr	r2, r2, r3
   2316c:	e2811004 	add	r1, r1, #4
   23170:	e0801101 	add	r1, r0, r1, lsl #2
   23174:	e1a0c422 	lsr	ip, r2, #8
   23178:	e1a00822 	lsr	r0, r2, #16
   2317c:	e1a03c22 	lsr	r3, r2, #24
   23180:	e5c12004 	strb	r2, [r1, #4]
   23184:	e5c1c005 	strb	ip, [r1, #5]
   23188:	e5c10006 	strb	r0, [r1, #6]
   2318c:	e5c13007 	strb	r3, [r1, #7]
   23190:	e12fff1e 	bx	lr

00023194 <CBcmFrameBuffer::SetPalette32(unsigned char, unsigned int)>:
   23194:	e5903010 	ldr	r3, [r0, #16]
   23198:	e3530008 	cmp	r3, #8
   2319c:	812fff1e 	bxhi	lr
   231a0:	e5903020 	ldr	r3, [r0, #32]
   231a4:	e2811004 	add	r1, r1, #4
   231a8:	e0831101 	add	r1, r3, r1, lsl #2
   231ac:	e1a0c422 	lsr	ip, r2, #8
   231b0:	e1a00822 	lsr	r0, r2, #16
   231b4:	e1a03c22 	lsr	r3, r2, #24
   231b8:	e5c12004 	strb	r2, [r1, #4]
   231bc:	e5c1c005 	strb	ip, [r1, #5]
   231c0:	e5c10006 	strb	r0, [r1, #6]
   231c4:	e5c13007 	strb	r3, [r1, #7]
   231c8:	e12fff1e 	bx	lr

000231cc <CBcmFrameBuffer::Initialize()>:
   231cc:	e92d4030 	push	{r4, r5, lr}
   231d0:	e1a04000 	mov	r4, r0
   231d4:	e24dd00c 	sub	sp, sp, #12
   231d8:	e28d0004 	add	r0, sp, #4
   231dc:	ebffdd11 	bl	1a628 <CBcmPropertyTags::CBcmPropertyTags()>
   231e0:	e2841024 	add	r1, r4, #36	; 0x24
   231e4:	e28d0004 	add	r0, sp, #4
   231e8:	e3a02070 	mov	r2, #112	; 0x70
   231ec:	ebffdd18 	bl	1a654 <CBcmPropertyTags::GetTags(void*, unsigned int)>
   231f0:	e2505000 	subs	r5, r0, #0
   231f4:	0a00001f 	beq	23278 <CBcmFrameBuffer::Initialize()+0xac>
   231f8:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   231fc:	e3530000 	cmp	r3, #0
   23200:	0a00001b 	beq	23274 <CBcmFrameBuffer::Initialize()+0xa8>
   23204:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   23208:	e3530000 	cmp	r3, #0
   2320c:	0a000018 	beq	23274 <CBcmFrameBuffer::Initialize()+0xa8>
   23210:	e5943044 	ldr	r3, [r4, #68]	; 0x44
   23214:	e3530000 	cmp	r3, #0
   23218:	0a000015 	beq	23274 <CBcmFrameBuffer::Initialize()+0xa8>
   2321c:	e5943048 	ldr	r3, [r4, #72]	; 0x48
   23220:	e3530000 	cmp	r3, #0
   23224:	0a000012 	beq	23274 <CBcmFrameBuffer::Initialize()+0xa8>
   23228:	e5943058 	ldr	r3, [r4, #88]	; 0x58
   2322c:	e3530000 	cmp	r3, #0
   23230:	0a00000f 	beq	23274 <CBcmFrameBuffer::Initialize()+0xa8>
   23234:	e594307c 	ldr	r3, [r4, #124]	; 0x7c
   23238:	e3530000 	cmp	r3, #0
   2323c:	0a00000c 	beq	23274 <CBcmFrameBuffer::Initialize()+0xa8>
   23240:	e5940010 	ldr	r0, [r4, #16]
   23244:	e5941080 	ldr	r1, [r4, #128]	; 0x80
   23248:	e5942090 	ldr	r2, [r4, #144]	; 0x90
   2324c:	e3c33103 	bic	r3, r3, #-1073741824	; 0xc0000000
   23250:	e3500008 	cmp	r0, #8
   23254:	e5843014 	str	r3, [r4, #20]
   23258:	e5841018 	str	r1, [r4, #24]
   2325c:	e584201c 	str	r2, [r4, #28]
   23260:	8a000004 	bhi	23278 <CBcmFrameBuffer::Initialize()+0xac>
   23264:	e1a00004 	mov	r0, r4
   23268:	ebffff2f 	bl	22f2c <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>
   2326c:	e1a05000 	mov	r5, r0
   23270:	ea000000 	b	23278 <CBcmFrameBuffer::Initialize()+0xac>
   23274:	e1a05003 	mov	r5, r3
   23278:	e28d0004 	add	r0, sp, #4
   2327c:	ebffdcef 	bl	1a640 <CBcmPropertyTags::~CBcmPropertyTags()>
   23280:	e1a00005 	mov	r0, r5
   23284:	e28dd00c 	add	sp, sp, #12
   23288:	e8bd8030 	pop	{r4, r5, pc}

0002328c <CBcmFrameBuffer::GetWidth() const>:
   2328c:	e5900000 	ldr	r0, [r0]
   23290:	e12fff1e 	bx	lr

00023294 <CBcmFrameBuffer::GetHeight() const>:
   23294:	e5900004 	ldr	r0, [r0, #4]
   23298:	e12fff1e 	bx	lr

0002329c <CBcmFrameBuffer::GetVirtWidth() const>:
   2329c:	e5900008 	ldr	r0, [r0, #8]
   232a0:	e12fff1e 	bx	lr

000232a4 <CBcmFrameBuffer::GetVirtHeight() const>:
   232a4:	e590000c 	ldr	r0, [r0, #12]
   232a8:	e12fff1e 	bx	lr

000232ac <CBcmFrameBuffer::GetPitch() const>:
   232ac:	e590001c 	ldr	r0, [r0, #28]
   232b0:	e12fff1e 	bx	lr

000232b4 <CBcmFrameBuffer::GetDepth() const>:
   232b4:	e5900010 	ldr	r0, [r0, #16]
   232b8:	e12fff1e 	bx	lr

000232bc <CBcmFrameBuffer::GetBuffer() const>:
   232bc:	e5900014 	ldr	r0, [r0, #20]
   232c0:	e12fff1e 	bx	lr

000232c4 <CBcmFrameBuffer::GetSize() const>:
   232c4:	e5900018 	ldr	r0, [r0, #24]
   232c8:	e12fff1e 	bx	lr

000232cc <CBcmFrameBuffer::UpdatePalette()>:
   232cc:	e5903010 	ldr	r3, [r0, #16]
   232d0:	e3530008 	cmp	r3, #8
   232d4:	9a000001 	bls	232e0 <CBcmFrameBuffer::UpdatePalette()+0x14>
   232d8:	e3a00001 	mov	r0, #1
   232dc:	e12fff1e 	bx	lr
   232e0:	eaffff11 	b	22f2c <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>

000232e4 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)>:
   232e4:	e92d4070 	push	{r4, r5, r6, lr}
   232e8:	e24dd020 	sub	sp, sp, #32
   232ec:	e28d0008 	add	r0, sp, #8
   232f0:	e1a05001 	mov	r5, r1
   232f4:	e1a06002 	mov	r6, r2
   232f8:	ebffdcca 	bl	1a628 <CBcmPropertyTags::CBcmPropertyTags()>
   232fc:	e3a03008 	mov	r3, #8
   23300:	e28d200c 	add	r2, sp, #12
   23304:	e08d0003 	add	r0, sp, r3
   23308:	e58d3000 	str	r3, [sp]
   2330c:	e59f1044 	ldr	r1, [pc, #68]	; 23358 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x74>
   23310:	e3a03014 	mov	r3, #20
   23314:	e58d5018 	str	r5, [sp, #24]
   23318:	e58d601c 	str	r6, [sp, #28]
   2331c:	ebffdd18 	bl	1a784 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   23320:	e2504000 	subs	r4, r0, #0
   23324:	0a000006 	beq	23344 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x60>
   23328:	e59d3018 	ldr	r3, [sp, #24]
   2332c:	e1550003 	cmp	r5, r3
   23330:	059d401c 	ldreq	r4, [sp, #28]
   23334:	13a04000 	movne	r4, #0
   23338:	00444006 	subeq	r4, r4, r6
   2333c:	016f4f14 	clzeq	r4, r4
   23340:	01a042a4 	lsreq	r4, r4, #5
   23344:	e28d0008 	add	r0, sp, #8
   23348:	ebffdcbc 	bl	1a640 <CBcmPropertyTags::~CBcmPropertyTags()>
   2334c:	e1a00004 	mov	r0, r4
   23350:	e28dd020 	add	sp, sp, #32
   23354:	e8bd8070 	pop	{r4, r5, r6, pc}
   23358:	00048009 	.word	0x00048009

0002335c <CBcmFrameBuffer::WaitForVerticalSync()>:
   2335c:	e92d4010 	push	{r4, lr}
   23360:	e24dd020 	sub	sp, sp, #32
   23364:	e28d000c 	add	r0, sp, #12
   23368:	ebffdcae 	bl	1a628 <CBcmPropertyTags::CBcmPropertyTags()>
   2336c:	e3a03000 	mov	r3, #0
   23370:	e58d3000 	str	r3, [sp]
   23374:	e3a03010 	mov	r3, #16
   23378:	e59f1020 	ldr	r1, [pc, #32]	; 233a0 <CBcmFrameBuffer::WaitForVerticalSync()+0x44>
   2337c:	e08d2003 	add	r2, sp, r3
   23380:	e28d000c 	add	r0, sp, #12
   23384:	ebffdcfe 	bl	1a784 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   23388:	e1a04000 	mov	r4, r0
   2338c:	e28d000c 	add	r0, sp, #12
   23390:	ebffdcaa 	bl	1a640 <CBcmPropertyTags::~CBcmPropertyTags()>
   23394:	e1a00004 	mov	r0, r4
   23398:	e28dd020 	add	sp, sp, #32
   2339c:	e8bd8010 	pop	{r4, pc}
   233a0:	0004800e 	.word	0x0004800e

000233a4 <CBcmMailBox::CBcmMailBox(unsigned int)>:
   233a4:	e5801000 	str	r1, [r0]
   233a8:	e12fff1e 	bx	lr

000233ac <CBcmMailBox::~CBcmMailBox()>:
   233ac:	e12fff1e 	bx	lr

000233b0 <CBcmMailBox::Flush()>:
   233b0:	e92d4070 	push	{r4, r5, r6, lr}
   233b4:	e59f4028 	ldr	r4, [pc, #40]	; 233e4 <CBcmMailBox::Flush()+0x34>
   233b8:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   233bc:	e3130101 	tst	r3, #1073741824	; 0x40000000
   233c0:	18bd8070 	popne	{r4, r5, r6, pc}
   233c4:	e3a05014 	mov	r5, #20
   233c8:	e1a00005 	mov	r0, r5
   233cc:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
   233d0:	ebfff88b 	bl	21604 <CTimer::SimpleMsDelay(unsigned int)>
   233d4:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   233d8:	e3130101 	tst	r3, #1073741824	; 0x40000000
   233dc:	0afffff9 	beq	233c8 <CBcmMailBox::Flush()+0x18>
   233e0:	e8bd8070 	pop	{r4, r5, r6, pc}
   233e4:	2000b000 	.word	0x2000b000

000233e8 <CBcmMailBox::Read()>:
   233e8:	e5901000 	ldr	r1, [r0]
   233ec:	e59f2020 	ldr	r2, [pc, #32]	; 23414 <CBcmMailBox::Read()+0x2c>
   233f0:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   233f4:	e3130101 	tst	r3, #1073741824	; 0x40000000
   233f8:	1afffffc 	bne	233f0 <CBcmMailBox::Read()+0x8>
   233fc:	e5920880 	ldr	r0, [r2, #2176]	; 0x880
   23400:	e200300f 	and	r3, r0, #15
   23404:	e1510003 	cmp	r1, r3
   23408:	1afffff8 	bne	233f0 <CBcmMailBox::Read()+0x8>
   2340c:	e3c0000f 	bic	r0, r0, #15
   23410:	e12fff1e 	bx	lr
   23414:	2000b000 	.word	0x2000b000

00023418 <CBcmMailBox::Write(unsigned int)>:
   23418:	e92d4070 	push	{r4, r5, r6, lr}
   2341c:	e1a05000 	mov	r5, r0
   23420:	e1a04001 	mov	r4, r1
   23424:	e59f2034 	ldr	r2, [pc, #52]	; 23460 <CBcmMailBox::Write(unsigned int)+0x48>
   23428:	e59238b8 	ldr	r3, [r2, #2232]	; 0x8b8
   2342c:	e3530000 	cmp	r3, #0
   23430:	bafffffc 	blt	23428 <CBcmMailBox::Write(unsigned int)+0x10>
   23434:	e314000f 	tst	r4, #15
   23438:	0a000003 	beq	2344c <CBcmMailBox::Write(unsigned int)+0x34>
   2343c:	e3a0205b 	mov	r2, #91	; 0x5b
   23440:	e59f101c 	ldr	r1, [pc, #28]	; 23464 <CBcmMailBox::Write(unsigned int)+0x4c>
   23444:	e59f001c 	ldr	r0, [pc, #28]	; 23468 <CBcmMailBox::Write(unsigned int)+0x50>
   23448:	ebffdc52 	bl	1a598 <assertion_failed>
   2344c:	e5952000 	ldr	r2, [r5]
   23450:	e59f3008 	ldr	r3, [pc, #8]	; 23460 <CBcmMailBox::Write(unsigned int)+0x48>
   23454:	e1844002 	orr	r4, r4, r2
   23458:	e58348a0 	str	r4, [r3, #2208]	; 0x8a0
   2345c:	e8bd8070 	pop	{r4, r5, r6, pc}
   23460:	2000b000 	.word	0x2000b000
   23464:	000297b0 	.word	0x000297b0
   23468:	000297c0 	.word	0x000297c0

0002346c <CBcmMailBox::WriteRead(unsigned int)>:
   2346c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   23470:	e3a03000 	mov	r3, #0
   23474:	e1a07000 	mov	r7, r0
   23478:	e1a08001 	mov	r8, r1
   2347c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   23480:	e59f5090 	ldr	r5, [pc, #144]	; 23518 <CBcmMailBox::WriteRead(unsigned int)+0xac>
   23484:	e5950000 	ldr	r0, [r5]
   23488:	e1500003 	cmp	r0, r3
   2348c:	1a00001f 	bne	23510 <CBcmMailBox::WriteRead(unsigned int)+0xa4>
   23490:	e59f4084 	ldr	r4, [pc, #132]	; 2351c <CBcmMailBox::WriteRead(unsigned int)+0xb0>
   23494:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   23498:	e3130101 	tst	r3, #1073741824	; 0x40000000
   2349c:	1a000006 	bne	234bc <CBcmMailBox::WriteRead(unsigned int)+0x50>
   234a0:	e3a06014 	mov	r6, #20
   234a4:	e1a00006 	mov	r0, r6
   234a8:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
   234ac:	ebfff854 	bl	21604 <CTimer::SimpleMsDelay(unsigned int)>
   234b0:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   234b4:	e3130101 	tst	r3, #1073741824	; 0x40000000
   234b8:	0afffff9 	beq	234a4 <CBcmMailBox::WriteRead(unsigned int)+0x38>
   234bc:	e1a00007 	mov	r0, r7
   234c0:	e1a01008 	mov	r1, r8
   234c4:	ebffffd3 	bl	23418 <CBcmMailBox::Write(unsigned int)>
   234c8:	e5970000 	ldr	r0, [r7]
   234cc:	e59f2048 	ldr	r2, [pc, #72]	; 2351c <CBcmMailBox::WriteRead(unsigned int)+0xb0>
   234d0:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   234d4:	e3130101 	tst	r3, #1073741824	; 0x40000000
   234d8:	1afffffc 	bne	234d0 <CBcmMailBox::WriteRead(unsigned int)+0x64>
   234dc:	e5923880 	ldr	r3, [r2, #2176]	; 0x880
   234e0:	e203100f 	and	r1, r3, #15
   234e4:	e1510000 	cmp	r1, r0
   234e8:	1afffff8 	bne	234d0 <CBcmMailBox::WriteRead(unsigned int)+0x64>
   234ec:	e5952000 	ldr	r2, [r5]
   234f0:	e3c3400f 	bic	r4, r3, #15
   234f4:	e3520000 	cmp	r2, #0
   234f8:	0a000000 	beq	23500 <CBcmMailBox::WriteRead(unsigned int)+0x94>
   234fc:	ebfffcc9 	bl	22828 <LeaveCritical>
   23500:	e3a03000 	mov	r3, #0
   23504:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   23508:	e1a00004 	mov	r0, r4
   2350c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   23510:	ebfffc97 	bl	22774 <EnterCritical>
   23514:	eaffffdd 	b	23490 <CBcmMailBox::WriteRead(unsigned int)+0x24>
   23518:	0002b31c 	.word	0x0002b31c
   2351c:	2000b000 	.word	0x2000b000

00023520 <_GLOBAL__sub_I__ZN11CBcmMailBox10s_SpinLockE>:
   23520:	e3a02000 	mov	r2, #0
   23524:	e59f3004 	ldr	r3, [pc, #4]	; 23530 <_GLOBAL__sub_I__ZN11CBcmMailBox10s_SpinLockE+0x10>
   23528:	e5832000 	str	r2, [r3]
   2352c:	e12fff1e 	bx	lr
   23530:	0002b31c 	.word	0x0002b31c

00023534 <CCharGenerator::CCharGenerator()>:
   23534:	e3a03008 	mov	r3, #8
   23538:	e5803000 	str	r3, [r0]
   2353c:	e12fff1e 	bx	lr

00023540 <CCharGenerator::~CCharGenerator()>:
   23540:	e12fff1e 	bx	lr

00023544 <CCharGenerator::GetCharWidth() const>:
   23544:	e5900000 	ldr	r0, [r0]
   23548:	e12fff1e 	bx	lr

0002354c <CCharGenerator::GetCharHeight() const>:
   2354c:	e3a00013 	mov	r0, #19
   23550:	e12fff1e 	bx	lr

00023554 <CCharGenerator::GetUnderline() const>:
   23554:	e3a00010 	mov	r0, #16
   23558:	e12fff1e 	bx	lr

0002355c <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>:
   2355c:	e6ef1071 	uxtb	r1, r1
   23560:	e92d4070 	push	{r4, r5, r6, lr}
   23564:	e2414021 	sub	r4, r1, #33	; 0x21
   23568:	e35400de 	cmp	r4, #222	; 0xde
   2356c:	8a00000e 	bhi	235ac <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x50>
   23570:	e1a06003 	mov	r6, r3
   23574:	e5903000 	ldr	r3, [r0]
   23578:	e1a05002 	mov	r5, r2
   2357c:	e1530002 	cmp	r3, r2
   23580:	9a00000b 	bls	235b4 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x58>
   23584:	e356000f 	cmp	r6, #15
   23588:	8a000007 	bhi	235ac <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x50>
   2358c:	e3a02080 	mov	r2, #128	; 0x80
   23590:	e59f1038 	ldr	r1, [pc, #56]	; 235d0 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x74>
   23594:	e0814204 	add	r4, r1, r4, lsl #4
   23598:	e7d43006 	ldrb	r3, [r4, r6]
   2359c:	e0133552 	ands	r3, r3, r2, asr r5
   235a0:	13a00001 	movne	r0, #1
   235a4:	03a00000 	moveq	r0, #0
   235a8:	e8bd8070 	pop	{r4, r5, r6, pc}
   235ac:	e3a00000 	mov	r0, #0
   235b0:	e8bd8070 	pop	{r4, r5, r6, pc}
   235b4:	e3a0204e 	mov	r2, #78	; 0x4e
   235b8:	e59f1014 	ldr	r1, [pc, #20]	; 235d4 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x78>
   235bc:	e59f0014 	ldr	r0, [pc, #20]	; 235d8 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x7c>
   235c0:	ebffdbf4 	bl	1a598 <assertion_failed>
   235c4:	e356000f 	cmp	r6, #15
   235c8:	9affffef 	bls	2358c <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x30>
   235cc:	eafffff6 	b	235ac <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x50>
   235d0:	000297d4 	.word	0x000297d4
   235d4:	0002a5c4 	.word	0x0002a5c4
   235d8:	0002a5d8 	.word	0x0002a5d8
   235dc:	00000000 	.word	0x00000000

000235e0 <DelayLoop>:
   235e0:	e2500001 	subs	r0, r0, #1
   235e4:	8afffffd 	bhi	235e0 <DelayLoop>
   235e8:	e1a0f00e 	mov	pc, lr

000235ec <CGPIOManager::CGPIOManager(CInterruptSystem*)>:
   235ec:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   235f0:	e3a0e000 	mov	lr, #0
   235f4:	e1a03000 	mov	r3, r0
   235f8:	e1a0c00e 	mov	ip, lr
   235fc:	e5801000 	str	r1, [r0]
   23600:	e28020dc 	add	r2, r0, #220	; 0xdc
   23604:	e5e3e004 	strb	lr, [r3, #4]!
   23608:	e5a3c004 	str	ip, [r3, #4]!
   2360c:	e1530002 	cmp	r3, r2
   23610:	1afffffc 	bne	23608 <CGPIOManager::CGPIOManager(CInterruptSystem*)+0x1c>
   23614:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00023618 <CGPIOManager::~CGPIOManager()>:
   23618:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2361c:	e1a09000 	mov	r9, r0
   23620:	e3a0802c 	mov	r8, #44	; 0x2c
   23624:	e59f706c 	ldr	r7, [pc, #108]	; 23698 <CGPIOManager::~CGPIOManager()+0x80>
   23628:	e59f606c 	ldr	r6, [pc, #108]	; 2369c <CGPIOManager::~CGPIOManager()+0x84>
   2362c:	e2804004 	add	r4, r0, #4
   23630:	e28050dc 	add	r5, r0, #220	; 0xdc
   23634:	e5b43004 	ldr	r3, [r4, #4]!
   23638:	e3530000 	cmp	r3, #0
   2363c:	0a000003 	beq	23650 <CGPIOManager::~CGPIOManager()+0x38>
   23640:	e1a02008 	mov	r2, r8
   23644:	e1a01007 	mov	r1, r7
   23648:	e1a00006 	mov	r0, r6
   2364c:	ebffdbd1 	bl	1a598 <assertion_failed>
   23650:	e1540005 	cmp	r4, r5
   23654:	1afffff6 	bne	23634 <CGPIOManager::~CGPIOManager()+0x1c>
   23658:	e5d93004 	ldrb	r3, [r9, #4]
   2365c:	e3530000 	cmp	r3, #0
   23660:	0a000004 	beq	23678 <CGPIOManager::~CGPIOManager()+0x60>
   23664:	e5990000 	ldr	r0, [r9]
   23668:	e3500000 	cmp	r0, #0
   2366c:	0a000003 	beq	23680 <CGPIOManager::~CGPIOManager()+0x68>
   23670:	e3a01034 	mov	r1, #52	; 0x34
   23674:	ebffe35c 	bl	1c3ec <CInterruptSystem::DisconnectIRQ(unsigned int)>
   23678:	e1a00009 	mov	r0, r9
   2367c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   23680:	e59f0018 	ldr	r0, [pc, #24]	; 236a0 <CGPIOManager::~CGPIOManager()+0x88>
   23684:	e3a02032 	mov	r2, #50	; 0x32
   23688:	e59f1008 	ldr	r1, [pc, #8]	; 23698 <CGPIOManager::~CGPIOManager()+0x80>
   2368c:	ebffdbc1 	bl	1a598 <assertion_failed>
   23690:	e5990000 	ldr	r0, [r9]
   23694:	eafffff5 	b	23670 <CGPIOManager::~CGPIOManager()+0x58>
   23698:	0002a5f0 	.word	0x0002a5f0
   2369c:	0002a600 	.word	0x0002a600
   236a0:	0002a614 	.word	0x0002a614

000236a4 <CGPIOManager::Initialize()>:
   236a4:	e5d03004 	ldrb	r3, [r0, #4]
   236a8:	e92d4010 	push	{r4, lr}
   236ac:	e3530000 	cmp	r3, #0
   236b0:	e1a04000 	mov	r4, r0
   236b4:	1a000009 	bne	236e0 <CGPIOManager::Initialize()+0x3c>
   236b8:	e5940000 	ldr	r0, [r4]
   236bc:	e3500000 	cmp	r0, #0
   236c0:	0a00000d 	beq	236fc <CGPIOManager::Initialize()+0x58>
   236c4:	e1a03004 	mov	r3, r4
   236c8:	e59f2044 	ldr	r2, [pc, #68]	; 23714 <CGPIOManager::Initialize()+0x70>
   236cc:	e3a01034 	mov	r1, #52	; 0x34
   236d0:	ebffe30a 	bl	1c300 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   236d4:	e3a00001 	mov	r0, #1
   236d8:	e5c40004 	strb	r0, [r4, #4]
   236dc:	e8bd8010 	pop	{r4, pc}
   236e0:	e59f0030 	ldr	r0, [pc, #48]	; 23718 <CGPIOManager::Initialize()+0x74>
   236e4:	e3a0203b 	mov	r2, #59	; 0x3b
   236e8:	e59f102c 	ldr	r1, [pc, #44]	; 2371c <CGPIOManager::Initialize()+0x78>
   236ec:	ebffdba9 	bl	1a598 <assertion_failed>
   236f0:	e5940000 	ldr	r0, [r4]
   236f4:	e3500000 	cmp	r0, #0
   236f8:	1afffff1 	bne	236c4 <CGPIOManager::Initialize()+0x20>
   236fc:	e59f001c 	ldr	r0, [pc, #28]	; 23720 <CGPIOManager::Initialize()+0x7c>
   23700:	e3a0203c 	mov	r2, #60	; 0x3c
   23704:	e59f1010 	ldr	r1, [pc, #16]	; 2371c <CGPIOManager::Initialize()+0x78>
   23708:	ebffdba2 	bl	1a598 <assertion_failed>
   2370c:	e5940000 	ldr	r0, [r4]
   23710:	eaffffeb 	b	236c4 <CGPIOManager::Initialize()+0x20>
   23714:	00023934 	.word	0x00023934
   23718:	0002a628 	.word	0x0002a628
   2371c:	0002a5f0 	.word	0x0002a5f0
   23720:	0002a614 	.word	0x0002a614

00023724 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>:
   23724:	e5d03004 	ldrb	r3, [r0, #4]
   23728:	e92d4070 	push	{r4, r5, r6, lr}
   2372c:	e3530000 	cmp	r3, #0
   23730:	e1a04000 	mov	r4, r0
   23734:	e1a05001 	mov	r5, r1
   23738:	0a00000e 	beq	23778 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x54>
   2373c:	e3550000 	cmp	r5, #0
   23740:	0a000016 	beq	237a0 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x7c>
   23744:	e5956004 	ldr	r6, [r5, #4]
   23748:	e3560035 	cmp	r6, #53	; 0x35
   2374c:	8a00000e 	bhi	2378c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x68>
   23750:	e0844106 	add	r4, r4, r6, lsl #2
   23754:	e5943008 	ldr	r3, [r4, #8]
   23758:	e3530000 	cmp	r3, #0
   2375c:	0a000003 	beq	23770 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x4c>
   23760:	e3a0204b 	mov	r2, #75	; 0x4b
   23764:	e59f1048 	ldr	r1, [pc, #72]	; 237b4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x90>
   23768:	e59f0048 	ldr	r0, [pc, #72]	; 237b8 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x94>
   2376c:	ebffdb89 	bl	1a598 <assertion_failed>
   23770:	e5845008 	str	r5, [r4, #8]
   23774:	e8bd8070 	pop	{r4, r5, r6, pc}
   23778:	e3a02045 	mov	r2, #69	; 0x45
   2377c:	e59f1030 	ldr	r1, [pc, #48]	; 237b4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x90>
   23780:	e59f0034 	ldr	r0, [pc, #52]	; 237bc <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x98>
   23784:	ebffdb83 	bl	1a598 <assertion_failed>
   23788:	eaffffeb 	b	2373c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x18>
   2378c:	e3a02049 	mov	r2, #73	; 0x49
   23790:	e59f101c 	ldr	r1, [pc, #28]	; 237b4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x90>
   23794:	e59f0024 	ldr	r0, [pc, #36]	; 237c0 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x9c>
   23798:	ebffdb7e 	bl	1a598 <assertion_failed>
   2379c:	eaffffeb 	b	23750 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x2c>
   237a0:	e3a02047 	mov	r2, #71	; 0x47
   237a4:	e59f1008 	ldr	r1, [pc, #8]	; 237b4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x90>
   237a8:	e59f0014 	ldr	r0, [pc, #20]	; 237c4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0xa0>
   237ac:	ebffdb79 	bl	1a598 <assertion_failed>
   237b0:	eaffffe3 	b	23744 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x20>
   237b4:	0002a5f0 	.word	0x0002a5f0
   237b8:	0002a600 	.word	0x0002a600
   237bc:	0002a63c 	.word	0x0002a63c
   237c0:	00028d94 	.word	0x00028d94
   237c4:	0002a64c 	.word	0x0002a64c

000237c8 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>:
   237c8:	e5d03004 	ldrb	r3, [r0, #4]
   237cc:	e92d4070 	push	{r4, r5, r6, lr}
   237d0:	e3530000 	cmp	r3, #0
   237d4:	e1a04000 	mov	r4, r0
   237d8:	e1a05001 	mov	r5, r1
   237dc:	0a00000b 	beq	23810 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x48>
   237e0:	e3550000 	cmp	r5, #0
   237e4:	0a00001b 	beq	23858 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x90>
   237e8:	e5955004 	ldr	r5, [r5, #4]
   237ec:	e3550035 	cmp	r5, #53	; 0x35
   237f0:	8a00000b 	bhi	23824 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x5c>
   237f4:	e0844105 	add	r4, r4, r5, lsl #2
   237f8:	e5943008 	ldr	r3, [r4, #8]
   237fc:	e3530000 	cmp	r3, #0
   23800:	0a00000f 	beq	23844 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x7c>
   23804:	e3a03000 	mov	r3, #0
   23808:	e5843008 	str	r3, [r4, #8]
   2380c:	e8bd8070 	pop	{r4, r5, r6, pc}
   23810:	e3a02052 	mov	r2, #82	; 0x52
   23814:	e59f1050 	ldr	r1, [pc, #80]	; 2386c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xa4>
   23818:	e59f0050 	ldr	r0, [pc, #80]	; 23870 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xa8>
   2381c:	ebffdb5d 	bl	1a598 <assertion_failed>
   23820:	eaffffee 	b	237e0 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x18>
   23824:	e3a02056 	mov	r2, #86	; 0x56
   23828:	e59f103c 	ldr	r1, [pc, #60]	; 2386c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xa4>
   2382c:	e59f0040 	ldr	r0, [pc, #64]	; 23874 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xac>
   23830:	e0844105 	add	r4, r4, r5, lsl #2
   23834:	ebffdb57 	bl	1a598 <assertion_failed>
   23838:	e5943008 	ldr	r3, [r4, #8]
   2383c:	e3530000 	cmp	r3, #0
   23840:	1affffef 	bne	23804 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x3c>
   23844:	e3a02058 	mov	r2, #88	; 0x58
   23848:	e59f101c 	ldr	r1, [pc, #28]	; 2386c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xa4>
   2384c:	e59f0024 	ldr	r0, [pc, #36]	; 23878 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xb0>
   23850:	ebffdb50 	bl	1a598 <assertion_failed>
   23854:	eaffffea 	b	23804 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x3c>
   23858:	e3a02054 	mov	r2, #84	; 0x54
   2385c:	e59f1008 	ldr	r1, [pc, #8]	; 2386c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xa4>
   23860:	e59f0014 	ldr	r0, [pc, #20]	; 2387c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xb4>
   23864:	ebffdb4b 	bl	1a598 <assertion_failed>
   23868:	eaffffde 	b	237e8 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x20>
   2386c:	0002a5f0 	.word	0x0002a5f0
   23870:	0002a63c 	.word	0x0002a63c
   23874:	00028d94 	.word	0x00028d94
   23878:	0002a658 	.word	0x0002a658
   2387c:	0002a64c 	.word	0x0002a64c

00023880 <CGPIOManager::InterruptHandler()>:
   23880:	e5d03004 	ldrb	r3, [r0, #4]
   23884:	e92d4070 	push	{r4, r5, r6, lr}
   23888:	e3530000 	cmp	r3, #0
   2388c:	e1a05000 	mov	r5, r0
   23890:	0a00001b 	beq	23904 <CGPIOManager::InterruptHandler()+0x84>
   23894:	e3a04000 	mov	r4, #0
   23898:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   2389c:	e59f2080 	ldr	r2, [pc, #128]	; 23924 <CGPIOManager::InterruptHandler()+0xa4>
   238a0:	e5923040 	ldr	r3, [r2, #64]	; 0x40
   238a4:	ea000005 	b	238c0 <CGPIOManager::InterruptHandler()+0x40>
   238a8:	e2844001 	add	r4, r4, #1
   238ac:	e314001f 	tst	r4, #31
   238b0:	11a030a3 	lsrne	r3, r3, #1
   238b4:	05923044 	ldreq	r3, [r2, #68]	; 0x44
   238b8:	e3540036 	cmp	r4, #54	; 0x36
   238bc:	0a00000d 	beq	238f8 <CGPIOManager::InterruptHandler()+0x78>
   238c0:	e3130001 	tst	r3, #1
   238c4:	0afffff7 	beq	238a8 <CGPIOManager::InterruptHandler()+0x28>
   238c8:	e3a03001 	mov	r3, #1
   238cc:	e2842002 	add	r2, r4, #2
   238d0:	e7950102 	ldr	r0, [r5, r2, lsl #2]
   238d4:	e204501f 	and	r5, r4, #31
   238d8:	e3500000 	cmp	r0, #0
   238dc:	e1a05513 	lsl	r5, r3, r5
   238e0:	0a00000c 	beq	23918 <CGPIOManager::InterruptHandler()+0x98>
   238e4:	ebffe1b7 	bl	1bfc8 <CGPIOPin::InterruptHandler()>
   238e8:	e59f3038 	ldr	r3, [pc, #56]	; 23928 <CGPIOManager::InterruptHandler()+0xa8>
   238ec:	e08342a4 	add	r4, r3, r4, lsr #5
   238f0:	e1a04104 	lsl	r4, r4, #2
   238f4:	e5845000 	str	r5, [r4]
   238f8:	e3a03000 	mov	r3, #0
   238fc:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   23900:	e8bd8070 	pop	{r4, r5, r6, pc}
   23904:	e3a0205e 	mov	r2, #94	; 0x5e
   23908:	e59f101c 	ldr	r1, [pc, #28]	; 2392c <CGPIOManager::InterruptHandler()+0xac>
   2390c:	e59f001c 	ldr	r0, [pc, #28]	; 23930 <CGPIOManager::InterruptHandler()+0xb0>
   23910:	ebffdb20 	bl	1a598 <assertion_failed>
   23914:	eaffffde 	b	23894 <CGPIOManager::InterruptHandler()+0x14>
   23918:	e1a00004 	mov	r0, r4
   2391c:	ebffe1d6 	bl	1c07c <CGPIOPin::DisableAllInterrupts(unsigned int)>
   23920:	eafffff0 	b	238e8 <CGPIOManager::InterruptHandler()+0x68>
   23924:	20200000 	.word	0x20200000
   23928:	08080010 	.word	0x08080010
   2392c:	0002a5f0 	.word	0x0002a5f0
   23930:	0002a63c 	.word	0x0002a63c

00023934 <CGPIOManager::InterruptStub(void*)>:
   23934:	e92d4010 	push	{r4, lr}
   23938:	e2504000 	subs	r4, r0, #0
   2393c:	0a000002 	beq	2394c <CGPIOManager::InterruptStub(void*)+0x18>
   23940:	e1a00004 	mov	r0, r4
   23944:	e8bd4010 	pop	{r4, lr}
   23948:	eaffffcc 	b	23880 <CGPIOManager::InterruptHandler()>
   2394c:	e59f0014 	ldr	r0, [pc, #20]	; 23968 <CGPIOManager::InterruptStub(void*)+0x34>
   23950:	e3a0208a 	mov	r2, #138	; 0x8a
   23954:	e59f1010 	ldr	r1, [pc, #16]	; 2396c <CGPIOManager::InterruptStub(void*)+0x38>
   23958:	ebffdb0e 	bl	1a598 <assertion_failed>
   2395c:	e1a00004 	mov	r0, r4
   23960:	e8bd4010 	pop	{r4, lr}
   23964:	eaffffc5 	b	23880 <CGPIOManager::InterruptHandler()>
   23968:	0002415c 	.word	0x0002415c
   2396c:	0002a5f0 	.word	0x0002a5f0

00023970 <CPtrList::CPtrList()>:
   23970:	e3a02000 	mov	r2, #0
   23974:	e5802000 	str	r2, [r0]
   23978:	e12fff1e 	bx	lr

0002397c <CPtrList::~CPtrList()>:
   2397c:	e5903000 	ldr	r3, [r0]
   23980:	e92d4010 	push	{r4, lr}
   23984:	e3530000 	cmp	r3, #0
   23988:	e1a04000 	mov	r4, r0
   2398c:	0a000003 	beq	239a0 <CPtrList::~CPtrList()+0x24>
   23990:	e3a0202a 	mov	r2, #42	; 0x2a
   23994:	e59f100c 	ldr	r1, [pc, #12]	; 239a8 <CPtrList::~CPtrList()+0x2c>
   23998:	e59f000c 	ldr	r0, [pc, #12]	; 239ac <CPtrList::~CPtrList()+0x30>
   2399c:	ebffdafd 	bl	1a598 <assertion_failed>
   239a0:	e1a00004 	mov	r0, r4
   239a4:	e8bd8010 	pop	{r4, pc}
   239a8:	0002a66c 	.word	0x0002a66c
   239ac:	0002a678 	.word	0x0002a678

000239b0 <CPtrList::GetFirst()>:
   239b0:	e5900000 	ldr	r0, [r0]
   239b4:	e12fff1e 	bx	lr

000239b8 <CPtrList::GetNext(TPtrListElement*)>:
   239b8:	e92d4010 	push	{r4, lr}
   239bc:	e2514000 	subs	r4, r1, #0
   239c0:	0a000009 	beq	239ec <CPtrList::GetNext(TPtrListElement*)+0x34>
   239c4:	e59f3034 	ldr	r3, [pc, #52]	; 23a00 <CPtrList::GetNext(TPtrListElement*)+0x48>
   239c8:	e5942000 	ldr	r2, [r4]
   239cc:	e1520003 	cmp	r2, r3
   239d0:	0a000003 	beq	239e4 <CPtrList::GetNext(TPtrListElement*)+0x2c>
   239d4:	e3a02035 	mov	r2, #53	; 0x35
   239d8:	e59f1024 	ldr	r1, [pc, #36]	; 23a04 <CPtrList::GetNext(TPtrListElement*)+0x4c>
   239dc:	e59f0024 	ldr	r0, [pc, #36]	; 23a08 <CPtrList::GetNext(TPtrListElement*)+0x50>
   239e0:	ebffdaec 	bl	1a598 <assertion_failed>
   239e4:	e5940008 	ldr	r0, [r4, #8]
   239e8:	e8bd8010 	pop	{r4, pc}
   239ec:	e3a02034 	mov	r2, #52	; 0x34
   239f0:	e59f100c 	ldr	r1, [pc, #12]	; 23a04 <CPtrList::GetNext(TPtrListElement*)+0x4c>
   239f4:	e59f0010 	ldr	r0, [pc, #16]	; 23a0c <CPtrList::GetNext(TPtrListElement*)+0x54>
   239f8:	ebffdae6 	bl	1a598 <assertion_failed>
   239fc:	eafffff0 	b	239c4 <CPtrList::GetNext(TPtrListElement*)+0xc>
   23a00:	504c4d43 	.word	0x504c4d43
   23a04:	0002a66c 	.word	0x0002a66c
   23a08:	0002a698 	.word	0x0002a698
   23a0c:	0002a688 	.word	0x0002a688

00023a10 <CPtrList::GetPtr(TPtrListElement*)>:
   23a10:	e92d4010 	push	{r4, lr}
   23a14:	e2514000 	subs	r4, r1, #0
   23a18:	0a000009 	beq	23a44 <CPtrList::GetPtr(TPtrListElement*)+0x34>
   23a1c:	e59f3034 	ldr	r3, [pc, #52]	; 23a58 <CPtrList::GetPtr(TPtrListElement*)+0x48>
   23a20:	e5942000 	ldr	r2, [r4]
   23a24:	e1520003 	cmp	r2, r3
   23a28:	0a000003 	beq	23a3c <CPtrList::GetPtr(TPtrListElement*)+0x2c>
   23a2c:	e3a0203d 	mov	r2, #61	; 0x3d
   23a30:	e59f1024 	ldr	r1, [pc, #36]	; 23a5c <CPtrList::GetPtr(TPtrListElement*)+0x4c>
   23a34:	e59f0024 	ldr	r0, [pc, #36]	; 23a60 <CPtrList::GetPtr(TPtrListElement*)+0x50>
   23a38:	ebffdad6 	bl	1a598 <assertion_failed>
   23a3c:	e594000c 	ldr	r0, [r4, #12]
   23a40:	e8bd8010 	pop	{r4, pc}
   23a44:	e3a0203c 	mov	r2, #60	; 0x3c
   23a48:	e59f100c 	ldr	r1, [pc, #12]	; 23a5c <CPtrList::GetPtr(TPtrListElement*)+0x4c>
   23a4c:	e59f0010 	ldr	r0, [pc, #16]	; 23a64 <CPtrList::GetPtr(TPtrListElement*)+0x54>
   23a50:	ebffdad0 	bl	1a598 <assertion_failed>
   23a54:	eafffff0 	b	23a1c <CPtrList::GetPtr(TPtrListElement*)+0xc>
   23a58:	504c4d43 	.word	0x504c4d43
   23a5c:	0002a66c 	.word	0x0002a66c
   23a60:	0002a698 	.word	0x0002a698
   23a64:	0002a688 	.word	0x0002a688

00023a68 <CPtrList::InsertBefore(TPtrListElement*, void*)>:
   23a68:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   23a6c:	e1a06000 	mov	r6, r0
   23a70:	e3a00010 	mov	r0, #16
   23a74:	e1a07002 	mov	r7, r2
   23a78:	e1a04001 	mov	r4, r1
   23a7c:	ebfffb96 	bl	228dc <operator new(unsigned int)>
   23a80:	e5962000 	ldr	r2, [r6]
   23a84:	e59f30c8 	ldr	r3, [pc, #200]	; 23b54 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xec>
   23a88:	e3520000 	cmp	r2, #0
   23a8c:	e1a05000 	mov	r5, r0
   23a90:	e580700c 	str	r7, [r0, #12]
   23a94:	e5803000 	str	r3, [r0]
   23a98:	0a000023 	beq	23b2c <CPtrList::InsertBefore(TPtrListElement*, void*)+0xc4>
   23a9c:	e3540000 	cmp	r4, #0
   23aa0:	0a000026 	beq	23b40 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd8>
   23aa4:	e59f30a8 	ldr	r3, [pc, #168]	; 23b54 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xec>
   23aa8:	e5942000 	ldr	r2, [r4]
   23aac:	e1520003 	cmp	r2, r3
   23ab0:	0a000003 	beq	23ac4 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x5c>
   23ab4:	e3a0204e 	mov	r2, #78	; 0x4e
   23ab8:	e59f1098 	ldr	r1, [pc, #152]	; 23b58 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf0>
   23abc:	e59f0098 	ldr	r0, [pc, #152]	; 23b5c <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf4>
   23ac0:	ebffdab4 	bl	1a598 <assertion_failed>
   23ac4:	e5963000 	ldr	r3, [r6]
   23ac8:	e1540003 	cmp	r4, r3
   23acc:	0a000010 	beq	23b14 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xac>
   23ad0:	e5943004 	ldr	r3, [r4, #4]
   23ad4:	e5854008 	str	r4, [r5, #8]
   23ad8:	e3530000 	cmp	r3, #0
   23adc:	e5853004 	str	r3, [r5, #4]
   23ae0:	0a000009 	beq	23b0c <CPtrList::InsertBefore(TPtrListElement*, void*)+0xa4>
   23ae4:	e59f2068 	ldr	r2, [pc, #104]	; 23b54 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xec>
   23ae8:	e5931000 	ldr	r1, [r3]
   23aec:	e1510002 	cmp	r1, r2
   23af0:	0a000004 	beq	23b08 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xa0>
   23af4:	e3a02060 	mov	r2, #96	; 0x60
   23af8:	e59f1058 	ldr	r1, [pc, #88]	; 23b58 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf0>
   23afc:	e59f005c 	ldr	r0, [pc, #92]	; 23b60 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf8>
   23b00:	ebffdaa4 	bl	1a598 <assertion_failed>
   23b04:	e5943004 	ldr	r3, [r4, #4]
   23b08:	e5835008 	str	r5, [r3, #8]
   23b0c:	e5845004 	str	r5, [r4, #4]
   23b10:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   23b14:	e3a03000 	mov	r3, #0
   23b18:	e5845004 	str	r5, [r4, #4]
   23b1c:	e5854008 	str	r4, [r5, #8]
   23b20:	e5865000 	str	r5, [r6]
   23b24:	e5853004 	str	r3, [r5, #4]
   23b28:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   23b2c:	e3a0204c 	mov	r2, #76	; 0x4c
   23b30:	e59f1020 	ldr	r1, [pc, #32]	; 23b58 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf0>
   23b34:	e59f0028 	ldr	r0, [pc, #40]	; 23b64 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xfc>
   23b38:	ebffda96 	bl	1a598 <assertion_failed>
   23b3c:	eaffffd6 	b	23a9c <CPtrList::InsertBefore(TPtrListElement*, void*)+0x34>
   23b40:	e3a0204d 	mov	r2, #77	; 0x4d
   23b44:	e59f100c 	ldr	r1, [pc, #12]	; 23b58 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf0>
   23b48:	e59f0018 	ldr	r0, [pc, #24]	; 23b68 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x100>
   23b4c:	ebffda91 	bl	1a598 <assertion_failed>
   23b50:	eaffffd3 	b	23aa4 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x3c>
   23b54:	504c4d43 	.word	0x504c4d43
   23b58:	0002a66c 	.word	0x0002a66c
   23b5c:	0002a6d8 	.word	0x0002a6d8
   23b60:	0002a6fc 	.word	0x0002a6fc
   23b64:	0002a6bc 	.word	0x0002a6bc
   23b68:	0002a6cc 	.word	0x0002a6cc

00023b6c <CPtrList::InsertAfter(TPtrListElement*, void*)>:
   23b6c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   23b70:	e1a06000 	mov	r6, r0
   23b74:	e1a05001 	mov	r5, r1
   23b78:	e3a00010 	mov	r0, #16
   23b7c:	e1a07002 	mov	r7, r2
   23b80:	ebfffb55 	bl	228dc <operator new(unsigned int)>
   23b84:	e59f30c0 	ldr	r3, [pc, #192]	; 23c4c <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe0>
   23b88:	e3550000 	cmp	r5, #0
   23b8c:	e5803000 	str	r3, [r0]
   23b90:	e1a04000 	mov	r4, r0
   23b94:	e580700c 	str	r7, [r0, #12]
   23b98:	e5963000 	ldr	r3, [r6]
   23b9c:	0a00001a 	beq	23c0c <CPtrList::InsertAfter(TPtrListElement*, void*)+0xa0>
   23ba0:	e3530000 	cmp	r3, #0
   23ba4:	0a000023 	beq	23c38 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xcc>
   23ba8:	e59f309c 	ldr	r3, [pc, #156]	; 23c4c <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe0>
   23bac:	e5952000 	ldr	r2, [r5]
   23bb0:	e1520003 	cmp	r2, r3
   23bb4:	0a000003 	beq	23bc8 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x5c>
   23bb8:	e3a0207e 	mov	r2, #126	; 0x7e
   23bbc:	e59f108c 	ldr	r1, [pc, #140]	; 23c50 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe4>
   23bc0:	e59f008c 	ldr	r0, [pc, #140]	; 23c54 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe8>
   23bc4:	ebffda73 	bl	1a598 <assertion_failed>
   23bc8:	e5953008 	ldr	r3, [r5, #8]
   23bcc:	e5845004 	str	r5, [r4, #4]
   23bd0:	e3530000 	cmp	r3, #0
   23bd4:	e5843008 	str	r3, [r4, #8]
   23bd8:	0a000009 	beq	23c04 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x98>
   23bdc:	e59f2068 	ldr	r2, [pc, #104]	; 23c4c <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe0>
   23be0:	e5931000 	ldr	r1, [r3]
   23be4:	e1510002 	cmp	r1, r2
   23be8:	0a000004 	beq	23c00 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x94>
   23bec:	e3a02085 	mov	r2, #133	; 0x85
   23bf0:	e59f1058 	ldr	r1, [pc, #88]	; 23c50 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe4>
   23bf4:	e59f005c 	ldr	r0, [pc, #92]	; 23c58 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xec>
   23bf8:	ebffda66 	bl	1a598 <assertion_failed>
   23bfc:	e5953008 	ldr	r3, [r5, #8]
   23c00:	e5834004 	str	r4, [r3, #4]
   23c04:	e5854008 	str	r4, [r5, #8]
   23c08:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   23c0c:	e3530000 	cmp	r3, #0
   23c10:	0a000003 	beq	23c24 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xb8>
   23c14:	e3a02074 	mov	r2, #116	; 0x74
   23c18:	e59f1030 	ldr	r1, [pc, #48]	; 23c50 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe4>
   23c1c:	e59f0038 	ldr	r0, [pc, #56]	; 23c5c <CPtrList::InsertAfter(TPtrListElement*, void*)+0xf0>
   23c20:	ebffda5c 	bl	1a598 <assertion_failed>
   23c24:	e3a03000 	mov	r3, #0
   23c28:	e5864000 	str	r4, [r6]
   23c2c:	e5843004 	str	r3, [r4, #4]
   23c30:	e5843008 	str	r3, [r4, #8]
   23c34:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   23c38:	e3a0207d 	mov	r2, #125	; 0x7d
   23c3c:	e59f100c 	ldr	r1, [pc, #12]	; 23c50 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe4>
   23c40:	e59f0018 	ldr	r0, [pc, #24]	; 23c60 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xf4>
   23c44:	ebffda53 	bl	1a598 <assertion_failed>
   23c48:	eaffffd6 	b	23ba8 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x3c>
   23c4c:	504c4d43 	.word	0x504c4d43
   23c50:	0002a66c 	.word	0x0002a66c
   23c54:	0002a724 	.word	0x0002a724
   23c58:	0002a748 	.word	0x0002a748
   23c5c:	0002a678 	.word	0x0002a678
   23c60:	0002a6bc 	.word	0x0002a6bc

00023c64 <CPtrList::Remove(TPtrListElement*)>:
   23c64:	e92d4070 	push	{r4, r5, r6, lr}
   23c68:	e2514000 	subs	r4, r1, #0
   23c6c:	e1a05000 	mov	r5, r0
   23c70:	0a00003c 	beq	23d68 <CPtrList::Remove(TPtrListElement*)+0x104>
   23c74:	e59f3118 	ldr	r3, [pc, #280]	; 23d94 <CPtrList::Remove(TPtrListElement*)+0x130>
   23c78:	e5942000 	ldr	r2, [r4]
   23c7c:	e1520003 	cmp	r2, r3
   23c80:	0a000003 	beq	23c94 <CPtrList::Remove(TPtrListElement*)+0x30>
   23c84:	e3a02090 	mov	r2, #144	; 0x90
   23c88:	e59f1108 	ldr	r1, [pc, #264]	; 23d98 <CPtrList::Remove(TPtrListElement*)+0x134>
   23c8c:	e59f0108 	ldr	r0, [pc, #264]	; 23d9c <CPtrList::Remove(TPtrListElement*)+0x138>
   23c90:	ebffda40 	bl	1a598 <assertion_failed>
   23c94:	e5953000 	ldr	r3, [r5]
   23c98:	e1540003 	cmp	r4, r3
   23c9c:	0a000021 	beq	23d28 <CPtrList::Remove(TPtrListElement*)+0xc4>
   23ca0:	e5943004 	ldr	r3, [r4, #4]
   23ca4:	e3530000 	cmp	r3, #0
   23ca8:	0a000033 	beq	23d7c <CPtrList::Remove(TPtrListElement*)+0x118>
   23cac:	e59f20e0 	ldr	r2, [pc, #224]	; 23d94 <CPtrList::Remove(TPtrListElement*)+0x130>
   23cb0:	e5931000 	ldr	r1, [r3]
   23cb4:	e1510002 	cmp	r1, r2
   23cb8:	0a000004 	beq	23cd0 <CPtrList::Remove(TPtrListElement*)+0x6c>
   23cbc:	e3a0209f 	mov	r2, #159	; 0x9f
   23cc0:	e59f10d0 	ldr	r1, [pc, #208]	; 23d98 <CPtrList::Remove(TPtrListElement*)+0x134>
   23cc4:	e59f00d4 	ldr	r0, [pc, #212]	; 23da0 <CPtrList::Remove(TPtrListElement*)+0x13c>
   23cc8:	ebffda32 	bl	1a598 <assertion_failed>
   23ccc:	e5943004 	ldr	r3, [r4, #4]
   23cd0:	e5942008 	ldr	r2, [r4, #8]
   23cd4:	e5832008 	str	r2, [r3, #8]
   23cd8:	e5942008 	ldr	r2, [r4, #8]
   23cdc:	e3520000 	cmp	r2, #0
   23ce0:	0a00000a 	beq	23d10 <CPtrList::Remove(TPtrListElement*)+0xac>
   23ce4:	e59f10a8 	ldr	r1, [pc, #168]	; 23d94 <CPtrList::Remove(TPtrListElement*)+0x130>
   23ce8:	e5920000 	ldr	r0, [r2]
   23cec:	e1500001 	cmp	r0, r1
   23cf0:	0a000005 	beq	23d0c <CPtrList::Remove(TPtrListElement*)+0xa8>
   23cf4:	e3a020a4 	mov	r2, #164	; 0xa4
   23cf8:	e59f1098 	ldr	r1, [pc, #152]	; 23d98 <CPtrList::Remove(TPtrListElement*)+0x134>
   23cfc:	e59f00a0 	ldr	r0, [pc, #160]	; 23da4 <CPtrList::Remove(TPtrListElement*)+0x140>
   23d00:	ebffda24 	bl	1a598 <assertion_failed>
   23d04:	e5942008 	ldr	r2, [r4, #8]
   23d08:	e5943004 	ldr	r3, [r4, #4]
   23d0c:	e5823004 	str	r3, [r2, #4]
   23d10:	e3a03000 	mov	r3, #0
   23d14:	e1a00004 	mov	r0, r4
   23d18:	e5843000 	str	r3, [r4]
   23d1c:	e3a01010 	mov	r1, #16
   23d20:	e8bd4070 	pop	{r4, r5, r6, lr}
   23d24:	eafffaf0 	b	228ec <operator delete(void*, unsigned int)>
   23d28:	e5943008 	ldr	r3, [r4, #8]
   23d2c:	e3530000 	cmp	r3, #0
   23d30:	e5853000 	str	r3, [r5]
   23d34:	0afffff5 	beq	23d10 <CPtrList::Remove(TPtrListElement*)+0xac>
   23d38:	e59f2054 	ldr	r2, [pc, #84]	; 23d94 <CPtrList::Remove(TPtrListElement*)+0x130>
   23d3c:	e5931000 	ldr	r1, [r3]
   23d40:	e1510002 	cmp	r1, r2
   23d44:	0a000004 	beq	23d5c <CPtrList::Remove(TPtrListElement*)+0xf8>
   23d48:	e3a02098 	mov	r2, #152	; 0x98
   23d4c:	e59f1044 	ldr	r1, [pc, #68]	; 23d98 <CPtrList::Remove(TPtrListElement*)+0x134>
   23d50:	e59f004c 	ldr	r0, [pc, #76]	; 23da4 <CPtrList::Remove(TPtrListElement*)+0x140>
   23d54:	ebffda0f 	bl	1a598 <assertion_failed>
   23d58:	e5943008 	ldr	r3, [r4, #8]
   23d5c:	e3a02000 	mov	r2, #0
   23d60:	e5832004 	str	r2, [r3, #4]
   23d64:	eaffffe9 	b	23d10 <CPtrList::Remove(TPtrListElement*)+0xac>
   23d68:	e3a0208f 	mov	r2, #143	; 0x8f
   23d6c:	e59f1024 	ldr	r1, [pc, #36]	; 23d98 <CPtrList::Remove(TPtrListElement*)+0x134>
   23d70:	e59f0030 	ldr	r0, [pc, #48]	; 23da8 <CPtrList::Remove(TPtrListElement*)+0x144>
   23d74:	ebffda07 	bl	1a598 <assertion_failed>
   23d78:	eaffffbd 	b	23c74 <CPtrList::Remove(TPtrListElement*)+0x10>
   23d7c:	e3a0209e 	mov	r2, #158	; 0x9e
   23d80:	e59f1010 	ldr	r1, [pc, #16]	; 23d98 <CPtrList::Remove(TPtrListElement*)+0x134>
   23d84:	e59f0020 	ldr	r0, [pc, #32]	; 23dac <CPtrList::Remove(TPtrListElement*)+0x148>
   23d88:	ebffda02 	bl	1a598 <assertion_failed>
   23d8c:	e5943004 	ldr	r3, [r4, #4]
   23d90:	eaffffc5 	b	23cac <CPtrList::Remove(TPtrListElement*)+0x48>
   23d94:	504c4d43 	.word	0x504c4d43
   23d98:	0002a66c 	.word	0x0002a66c
   23d9c:	0002a698 	.word	0x0002a698
   23da0:	0002a7b8 	.word	0x0002a7b8
   23da4:	0002a774 	.word	0x0002a774
   23da8:	0002a688 	.word	0x0002a688
   23dac:	0002a7a0 	.word	0x0002a7a0

00023db0 <CPtrList::Find(void*)>:
   23db0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   23db4:	e5904000 	ldr	r4, [r0]
   23db8:	e3540000 	cmp	r4, #0
   23dbc:	0a000014 	beq	23e14 <CPtrList::Find(void*)+0x64>
   23dc0:	e1a05001 	mov	r5, r1
   23dc4:	e3a090b3 	mov	r9, #179	; 0xb3
   23dc8:	e59f6050 	ldr	r6, [pc, #80]	; 23e20 <CPtrList::Find(void*)+0x70>
   23dcc:	e59f8050 	ldr	r8, [pc, #80]	; 23e24 <CPtrList::Find(void*)+0x74>
   23dd0:	e59f7050 	ldr	r7, [pc, #80]	; 23e28 <CPtrList::Find(void*)+0x78>
   23dd4:	ea000002 	b	23de4 <CPtrList::Find(void*)+0x34>
   23dd8:	e5944008 	ldr	r4, [r4, #8]
   23ddc:	e3540000 	cmp	r4, #0
   23de0:	0a00000b 	beq	23e14 <CPtrList::Find(void*)+0x64>
   23de4:	e5943000 	ldr	r3, [r4]
   23de8:	e1530006 	cmp	r3, r6
   23dec:	0a000003 	beq	23e00 <CPtrList::Find(void*)+0x50>
   23df0:	e1a02009 	mov	r2, r9
   23df4:	e1a01008 	mov	r1, r8
   23df8:	e1a00007 	mov	r0, r7
   23dfc:	ebffd9e5 	bl	1a598 <assertion_failed>
   23e00:	e594300c 	ldr	r3, [r4, #12]
   23e04:	e1530005 	cmp	r3, r5
   23e08:	1afffff2 	bne	23dd8 <CPtrList::Find(void*)+0x28>
   23e0c:	e1a00004 	mov	r0, r4
   23e10:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   23e14:	e3a04000 	mov	r4, #0
   23e18:	e1a00004 	mov	r0, r4
   23e1c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   23e20:	504c4d43 	.word	0x504c4d43
   23e24:	0002a66c 	.word	0x0002a66c
   23e28:	0002a698 	.word	0x0002a698

00023e2c <__aeabi_uidiv>:
   23e2c:	e2512001 	subs	r2, r1, #1
   23e30:	012fff1e 	bxeq	lr
   23e34:	3a000036 	bcc	23f14 <__aeabi_uidiv+0xe8>
   23e38:	e1500001 	cmp	r0, r1
   23e3c:	9a000022 	bls	23ecc <__aeabi_uidiv+0xa0>
   23e40:	e1110002 	tst	r1, r2
   23e44:	0a000023 	beq	23ed8 <__aeabi_uidiv+0xac>
   23e48:	e311020e 	tst	r1, #-536870912	; 0xe0000000
   23e4c:	01a01181 	lsleq	r1, r1, #3
   23e50:	03a03008 	moveq	r3, #8
   23e54:	13a03001 	movne	r3, #1
   23e58:	e3510201 	cmp	r1, #268435456	; 0x10000000
   23e5c:	31510000 	cmpcc	r1, r0
   23e60:	31a01201 	lslcc	r1, r1, #4
   23e64:	31a03203 	lslcc	r3, r3, #4
   23e68:	3afffffa 	bcc	23e58 <__aeabi_uidiv+0x2c>
   23e6c:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
   23e70:	31510000 	cmpcc	r1, r0
   23e74:	31a01081 	lslcc	r1, r1, #1
   23e78:	31a03083 	lslcc	r3, r3, #1
   23e7c:	3afffffa 	bcc	23e6c <__aeabi_uidiv+0x40>
   23e80:	e3a02000 	mov	r2, #0
   23e84:	e1500001 	cmp	r0, r1
   23e88:	20400001 	subcs	r0, r0, r1
   23e8c:	21822003 	orrcs	r2, r2, r3
   23e90:	e15000a1 	cmp	r0, r1, lsr #1
   23e94:	204000a1 	subcs	r0, r0, r1, lsr #1
   23e98:	218220a3 	orrcs	r2, r2, r3, lsr #1
   23e9c:	e1500121 	cmp	r0, r1, lsr #2
   23ea0:	20400121 	subcs	r0, r0, r1, lsr #2
   23ea4:	21822123 	orrcs	r2, r2, r3, lsr #2
   23ea8:	e15001a1 	cmp	r0, r1, lsr #3
   23eac:	204001a1 	subcs	r0, r0, r1, lsr #3
   23eb0:	218221a3 	orrcs	r2, r2, r3, lsr #3
   23eb4:	e3500000 	cmp	r0, #0
   23eb8:	11b03223 	lsrsne	r3, r3, #4
   23ebc:	11a01221 	lsrne	r1, r1, #4
   23ec0:	1affffef 	bne	23e84 <__aeabi_uidiv+0x58>
   23ec4:	e1a00002 	mov	r0, r2
   23ec8:	e12fff1e 	bx	lr
   23ecc:	03a00001 	moveq	r0, #1
   23ed0:	13a00000 	movne	r0, #0
   23ed4:	e12fff1e 	bx	lr
   23ed8:	e3510801 	cmp	r1, #65536	; 0x10000
   23edc:	21a01821 	lsrcs	r1, r1, #16
   23ee0:	23a02010 	movcs	r2, #16
   23ee4:	33a02000 	movcc	r2, #0
   23ee8:	e3510c01 	cmp	r1, #256	; 0x100
   23eec:	21a01421 	lsrcs	r1, r1, #8
   23ef0:	22822008 	addcs	r2, r2, #8
   23ef4:	e3510010 	cmp	r1, #16
   23ef8:	21a01221 	lsrcs	r1, r1, #4
   23efc:	22822004 	addcs	r2, r2, #4
   23f00:	e3510004 	cmp	r1, #4
   23f04:	82822003 	addhi	r2, r2, #3
   23f08:	908220a1 	addls	r2, r2, r1, lsr #1
   23f0c:	e1a00230 	lsr	r0, r0, r2
   23f10:	e12fff1e 	bx	lr
   23f14:	e3500000 	cmp	r0, #0
   23f18:	13e00000 	mvnne	r0, #0
   23f1c:	ea000007 	b	23f40 <__aeabi_idiv0>

00023f20 <__aeabi_uidivmod>:
   23f20:	e3510000 	cmp	r1, #0
   23f24:	0afffffa 	beq	23f14 <__aeabi_uidiv+0xe8>
   23f28:	e92d4003 	push	{r0, r1, lr}
   23f2c:	ebffffbe 	bl	23e2c <__aeabi_uidiv>
   23f30:	e8bd4006 	pop	{r1, r2, lr}
   23f34:	e0030092 	mul	r3, r2, r0
   23f38:	e0411003 	sub	r1, r1, r3
   23f3c:	e12fff1e 	bx	lr

00023f40 <__aeabi_idiv0>:
   23f40:	e12fff1e 	bx	lr
