
kernel.elf:     file format elf32-littlearm


Disassembly of section .init:

00008000 <_start>:
    8000:	e10f0000 	mrs	r0, CPSR
    8004:	e220001a 	eor	r0, r0, #26
    8008:	e310001f 	tst	r0, #31
    800c:	e3c0001f 	bic	r0, r0, #31
    8010:	e38000d3 	orr	r0, r0, #211	; 0xd3
    8014:	1a000004 	bne	802c <_start+0x2c>
    8018:	e3800c01 	orr	r0, r0, #256	; 0x100
    801c:	e28fe00c 	add	lr, pc, #12
    8020:	e16ff000 	msr	SPSR_fsxc, r0
    8024:	e12ef30e 	.word	0xe12ef30e
    8028:	e160006e 	.word	0xe160006e
    802c:	e121f000 	msr	CPSR_c, r0
    8030:	e3a00000 	mov	r0, #0
    8034:	ee0c0f10 	mcr	15, 0, r0, cr12, cr0, {0}
    8038:	f1020011 	cps	#17
    803c:	e3a0d709 	mov	sp, #2359296	; 0x240000
    8040:	f1020012 	cps	#18
    8044:	e3a0d98e 	mov	sp, #2326528	; 0x238000
    8048:	f1020017 	cps	#23
    804c:	e3a0d823 	mov	sp, #2293760	; 0x230000
    8050:	f102001b 	cps	#27
    8054:	e3a0d823 	mov	sp, #2293760	; 0x230000
    8058:	f102001f 	cps	#31
    805c:	e3a0d98a 	mov	sp, #2260992	; 0x228000
    8060:	ea00210c 	b	10498 <sysinit>

Disassembly of section .text:

00008068 <main>:
    8068:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    806c:	e24dda22 	sub	sp, sp, #139264	; 0x22000
    8070:	e24dd0cc 	sub	sp, sp, #204	; 0xcc
    8074:	e28d0004 	add	r0, sp, #4
    8078:	eb000009 	bl	80a4 <CKernel::CKernel()>
    807c:	e28d0004 	add	r0, sp, #4
    8080:	eb00003d 	bl	817c <CKernel::Initialize()>
    8084:	e3500000 	cmp	r0, #0
    8088:	0a000004 	beq	80a0 <main+0x38>
    808c:	e28d0004 	add	r0, sp, #4
    8090:	eb000080 	bl	8298 <CKernel::Run()>
    8094:	e3500002 	cmp	r0, #2
    8098:	1a000000 	bne	80a0 <main+0x38>
    809c:	eb0020f2 	bl	1046c <reboot>
    80a0:	eb0020ee 	bl	10460 <halt>

000080a4 <CKernel::CKernel()>:
    80a4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    80a8:	e1a04000 	mov	r4, r0
    80ac:	e3a01001 	mov	r1, #1
    80b0:	eb002836 	bl	12190 <CMemorySystem::CMemorySystem(bool)>
    80b4:	e2846018 	add	r6, r4, #24
    80b8:	e284000c 	add	r0, r4, #12
    80bc:	eb000893 	bl	a310 <CActLED::CActLED()>
    80c0:	e2847e87 	add	r7, r4, #2160	; 0x870
    80c4:	e1a00006 	mov	r0, r6
    80c8:	eb0010f2 	bl	c498 <CKernelOptions::CKernelOptions()>
    80cc:	e1a00007 	mov	r0, r7
    80d0:	eb000a42 	bl	a9e0 <CDeviceNameService::CDeviceNameService()>
    80d4:	e1a00006 	mov	r0, r6
    80d8:	eb0010b5 	bl	c3b4 <CKernelOptions::GetWidth() const>
    80dc:	e1a08000 	mov	r8, r0
    80e0:	e1a00006 	mov	r0, r6
    80e4:	eb0010b4 	bl	c3bc <CKernelOptions::GetHeight() const>
    80e8:	e2845b82 	add	r5, r4, #133120	; 0x20800
    80ec:	e3a03000 	mov	r3, #0
    80f0:	e1a02000 	mov	r2, r0
    80f4:	e1a01008 	mov	r1, r8
    80f8:	e2870008 	add	r0, r7, #8
    80fc:	eb001536 	bl	d5dc <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool)>
    8100:	e2857e1b 	add	r7, r5, #432	; 0x1b0
    8104:	e2840e8d 	add	r0, r4, #2256	; 0x8d0
    8108:	e3a02000 	mov	r2, #0
    810c:	e1a01007 	mov	r1, r7
    8110:	e2800004 	add	r0, r0, #4
    8114:	eb0019e5 	bl	e8b0 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool)>
    8118:	e2850f6b 	add	r0, r5, #428	; 0x1ac
    811c:	eb00269b 	bl	11b90 <CExceptionHandler::CExceptionHandler()>
    8120:	e2855e3f 	add	r5, r5, #1008	; 0x3f0
    8124:	e1a00007 	mov	r0, r7
    8128:	eb000f0c 	bl	bd60 <CInterruptSystem::CInterruptSystem()>
    812c:	e1a01007 	mov	r1, r7
    8130:	e1a00005 	mov	r0, r5
    8134:	eb002111 	bl	10580 <CTimer::CTimer(CInterruptSystem*)>
    8138:	e1a00006 	mov	r0, r6
    813c:	eb0010a3 	bl	c3d0 <CKernelOptions::GetLogLevel() const>
    8140:	e2846b83 	add	r6, r4, #134144	; 0x20c00
    8144:	e1a01000 	mov	r1, r0
    8148:	e1a02005 	mov	r2, r5
    814c:	e286001c 	add	r0, r6, #28
    8150:	eb0011d6 	bl	c8b0 <CLogger::CLogger(unsigned int, CTimer*)>
    8154:	e3a02000 	mov	r2, #0
    8158:	e2843802 	add	r3, r4, #131072	; 0x20000
    815c:	e5c32d14 	strb	r2, [r3, #3348]	; 0xd14
    8160:	e2860f46 	add	r0, r6, #280	; 0x118
    8164:	eb0003d4 	bl	90bc <BusRaider::BusRaider()>
    8168:	e59f3008 	ldr	r3, [pc, #8]	; 8178 <CKernel::CKernel()+0xd4>
    816c:	e1a00004 	mov	r0, r4
    8170:	e5834000 	str	r4, [r3]
    8174:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8178:	00015e80 	.word	0x00015e80

0000817c <CKernel::Initialize()>:
    817c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8180:	e2805b82 	add	r5, r0, #133120	; 0x20800
    8184:	e1a04000 	mov	r4, r0
    8188:	e2850e1b 	add	r0, r5, #432	; 0x1b0
    818c:	eb000f06 	bl	bdac <CInterruptSystem::Initialize()>
    8190:	e3500000 	cmp	r0, #0
    8194:	1a000001 	bne	81a0 <CKernel::Initialize()+0x24>
    8198:	e3a00000 	mov	r0, #0
    819c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    81a0:	e2847e87 	add	r7, r4, #2160	; 0x870
    81a4:	e2870008 	add	r0, r7, #8
    81a8:	eb0018bc 	bl	e4a0 <CScreenDevice::Initialize()>
    81ac:	e3500000 	cmp	r0, #0
    81b0:	0afffff8 	beq	8198 <CKernel::Initialize()+0x1c>
    81b4:	e2846e8d 	add	r6, r4, #2256	; 0x8d0
    81b8:	e2866004 	add	r6, r6, #4
    81bc:	e1a00006 	mov	r0, r6
    81c0:	e59f1044 	ldr	r1, [pc, #68]	; 820c <CKernel::Initialize()+0x90>
    81c4:	eb0019ea 	bl	e974 <CSerialDevice::Initialize(unsigned int)>
    81c8:	e3500000 	cmp	r0, #0
    81cc:	0afffff1 	beq	8198 <CKernel::Initialize()+0x1c>
    81d0:	e2840018 	add	r0, r4, #24
    81d4:	eb00107a 	bl	c3c4 <CKernelOptions::GetLogDevice() const>
    81d8:	e3a02000 	mov	r2, #0
    81dc:	e1a01000 	mov	r1, r0
    81e0:	e1a00007 	mov	r0, r7
    81e4:	eb000aa7 	bl	ac88 <CDeviceNameService::GetDevice(char const*, bool)>
    81e8:	e2840b83 	add	r0, r4, #134144	; 0x20c00
    81ec:	e1a01006 	mov	r1, r6
    81f0:	e280001c 	add	r0, r0, #28
    81f4:	eb001395 	bl	d050 <CLogger::Initialize(CDevice*)>
    81f8:	e3500000 	cmp	r0, #0
    81fc:	0affffe5 	beq	8198 <CKernel::Initialize()+0x1c>
    8200:	e2850e3f 	add	r0, r5, #1008	; 0x3f0
    8204:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    8208:	ea0023bf 	b	1110c <CTimer::Initialize()>
    820c:	0001c200 	.word	0x0001c200

00008210 <CKernel::~CKernel()>:
    8210:	e92d4070 	push	{r4, r5, r6, lr}
    8214:	e3a02000 	mov	r2, #0
    8218:	e1a04000 	mov	r4, r0
    821c:	e59f3070 	ldr	r3, [pc, #112]	; 8294 <CKernel::~CKernel()+0x84>
    8220:	e2806b83 	add	r6, r0, #134144	; 0x20c00
    8224:	e2860f46 	add	r0, r6, #280	; 0x118
    8228:	e5832000 	str	r2, [r3]
    822c:	e2845b82 	add	r5, r4, #133120	; 0x20800
    8230:	eb0003b3 	bl	9104 <BusRaider::~BusRaider()>
    8234:	e286001c 	add	r0, r6, #28
    8238:	eb0011b2 	bl	c908 <CLogger::~CLogger()>
    823c:	e2850e3f 	add	r0, r5, #1008	; 0x3f0
    8240:	eb0020f0 	bl	10608 <CTimer::~CTimer()>
    8244:	e2850e1b 	add	r0, r5, #432	; 0x1b0
    8248:	eb000ed2 	bl	bd98 <CInterruptSystem::~CInterruptSystem()>
    824c:	e2850f6b 	add	r0, r5, #428	; 0x1ac
    8250:	eb002672 	bl	11c20 <CExceptionHandler::~CExceptionHandler()>
    8254:	e2840e8d 	add	r0, r4, #2256	; 0x8d0
    8258:	e2845e87 	add	r5, r4, #2160	; 0x870
    825c:	e2800004 	add	r0, r0, #4
    8260:	eb001c18 	bl	f2c8 <CSerialDevice::~CSerialDevice()>
    8264:	e2850008 	add	r0, r5, #8
    8268:	eb00148e 	bl	d4a8 <CScreenDevice::~CScreenDevice()>
    826c:	e1a00005 	mov	r0, r5
    8270:	eb0009ed 	bl	aa2c <CDeviceNameService::~CDeviceNameService()>
    8274:	e2840018 	add	r0, r4, #24
    8278:	eb001048 	bl	c3a0 <CKernelOptions::~CKernelOptions()>
    827c:	e284000c 	add	r0, r4, #12
    8280:	eb000803 	bl	a294 <CActLED::~CActLED()>
    8284:	e1a00004 	mov	r0, r4
    8288:	eb00274c 	bl	11fc0 <CMemorySystem::~CMemorySystem()>
    828c:	e1a00004 	mov	r0, r4
    8290:	e8bd8070 	pop	{r4, r5, r6, pc}
    8294:	00015e80 	.word	0x00015e80

00008298 <CKernel::Run()>:
    8298:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    829c:	e3a09000 	mov	r9, #0
    82a0:	e1a08009 	mov	r8, r9
    82a4:	e24ddb01 	sub	sp, sp, #1024	; 0x400
    82a8:	e280bb83 	add	fp, r0, #134144	; 0x20c00
    82ac:	e24dd004 	sub	sp, sp, #4
    82b0:	e2804b82 	add	r4, r0, #133120	; 0x20800
    82b4:	e2805e8d 	add	r5, r0, #2256	; 0x8d0
    82b8:	e28b301c 	add	r3, fp, #28
    82bc:	e2844e3f 	add	r4, r4, #1008	; 0x3f0
    82c0:	e2855004 	add	r5, r5, #4
    82c4:	e58d3014 	str	r3, [sp, #20]
    82c8:	e1a00004 	mov	r0, r4
    82cc:	eb002138 	bl	107b4 <CTimer::GetTicks() const>
    82d0:	e3a06000 	mov	r6, #0
    82d4:	e2807ffa 	add	r7, r0, #1000	; 0x3e8
    82d8:	e28baf46 	add	sl, fp, #280	; 0x118
    82dc:	e3a02ffa 	mov	r2, #1000	; 0x3e8
    82e0:	e28d1018 	add	r1, sp, #24
    82e4:	e1a00005 	mov	r0, r5
    82e8:	eb0018fc 	bl	e6e0 <CSerialDevice::Read(void*, unsigned int)>
    82ec:	e2503000 	subs	r3, r0, #0
    82f0:	da000005 	ble	830c <CKernel::Run()+0x74>
    82f4:	e1a02003 	mov	r2, r3
    82f8:	e28d1018 	add	r1, sp, #24
    82fc:	e1a0000a 	mov	r0, sl
    8300:	e0888003 	add	r8, r8, r3
    8304:	e0866003 	add	r6, r6, r3
    8308:	eb00038e 	bl	9148 <BusRaider::handleSerialRxBuffer(unsigned char const*, int)>
    830c:	e1a00004 	mov	r0, r4
    8310:	eb002127 	bl	107b4 <CTimer::GetTicks() const>
    8314:	e1500007 	cmp	r0, r7
    8318:	9affffef 	bls	82dc <CKernel::Run()+0x44>
    831c:	e28d0018 	add	r0, sp, #24
    8320:	eb001c53 	bl	f474 <CString::CString()>
    8324:	e59f3090 	ldr	r3, [pc, #144]	; 83bc <CKernel::Run()+0x124>
    8328:	e3a02003 	mov	r2, #3
    832c:	e59f108c 	ldr	r1, [pc, #140]	; 83c0 <CKernel::Run()+0x128>
    8330:	e59d0014 	ldr	r0, [sp, #20]
    8334:	eb001339 	bl	d020 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8338:	e1a00004 	mov	r0, r4
    833c:	eb00211c 	bl	107b4 <CTimer::GetTicks() const>
    8340:	e2899001 	add	r9, r9, #1
    8344:	e3a03003 	mov	r3, #3
    8348:	e1a02009 	mov	r2, r9
    834c:	e59f1070 	ldr	r1, [pc, #112]	; 83c4 <CKernel::Run()+0x12c>
    8350:	e58d0008 	str	r0, [sp, #8]
    8354:	e88d0140 	stm	sp, {r6, r8}
    8358:	e28d0018 	add	r0, sp, #24
    835c:	eb002032 	bl	1042c <CString::Format(char const*, ...)>
    8360:	e28d0018 	add	r0, sp, #24
    8364:	eb001c58 	bl	f4cc <CString::operator char const*() const>
    8368:	e1a06000 	mov	r6, r0
    836c:	e28d0018 	add	r0, sp, #24
    8370:	eb001c83 	bl	f584 <CString::GetLength() const>
    8374:	e1a01006 	mov	r1, r6
    8378:	e1a02000 	mov	r2, r0
    837c:	e1a00005 	mov	r0, r5
    8380:	eb001ad2 	bl	eed0 <CSerialDevice::Write(void const*, unsigned int)>
    8384:	e28d0018 	add	r0, sp, #24
    8388:	eb001c06 	bl	f3a8 <CString::~CString()>
    838c:	e3590003 	cmp	r9, #3
    8390:	1affffcc 	bne	82c8 <CKernel::Run()+0x30>
    8394:	e3a0200b 	mov	r2, #11
    8398:	e59f1028 	ldr	r1, [pc, #40]	; 83c8 <CKernel::Run()+0x130>
    839c:	e1a00005 	mov	r0, r5
    83a0:	eb001aca 	bl	eed0 <CSerialDevice::Write(void const*, unsigned int)>
    83a4:	e3a00ffa 	mov	r0, #1000	; 0x3e8
    83a8:	eb00238f 	bl	111ec <CTimer::SimpleMsDelay(unsigned int)>
    83ac:	e3a00002 	mov	r0, #2
    83b0:	e28ddb01 	add	sp, sp, #1024	; 0x400
    83b4:	e28dd004 	add	sp, sp, #4
    83b8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    83bc:	00013a04 	.word	0x00013a04
    83c0:	000139fc 	.word	0x000139fc
    83c4:	00013a10 	.word	0x00013a10
    83c8:	00013a54 	.word	0x00013a54

000083cc <CRdSerialDevice::Read(void*, unsigned int)>:
    83cc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    83d0:	e2516000 	subs	r6, r1, #0
    83d4:	e1a04000 	mov	r4, r0
    83d8:	e1a05002 	mov	r5, r2
    83dc:	0a000059 	beq	8548 <CRdSerialDevice::Read(void*, unsigned int)+0x17c>
    83e0:	e59430a4 	ldr	r3, [r4, #164]	; 0xa4
    83e4:	e3530000 	cmp	r3, #0
    83e8:	0a000033 	beq	84bc <CRdSerialDevice::Read(void*, unsigned int)+0xf0>
    83ec:	e2847a01 	add	r7, r4, #4096	; 0x1000
    83f0:	e59700d0 	ldr	r0, [r7, #208]	; 0xd0
    83f4:	e3500000 	cmp	r0, #0
    83f8:	1a00002a 	bne	84a8 <CRdSerialDevice::Read(void*, unsigned int)+0xdc>
    83fc:	e59438b4 	ldr	r3, [r4, #2228]	; 0x8b4
    8400:	e3530000 	cmp	r3, #0
    8404:	ba00001f 	blt	8488 <CRdSerialDevice::Read(void*, unsigned int)+0xbc>
    8408:	e3550000 	cmp	r5, #0
    840c:	0a000020 	beq	8494 <CRdSerialDevice::Read(void*, unsigned int)+0xc8>
    8410:	e59438ac 	ldr	r3, [r4, #2220]	; 0x8ac
    8414:	e59428b0 	ldr	r2, [r4, #2224]	; 0x8b0
    8418:	e1520003 	cmp	r2, r3
    841c:	0a000054 	beq	8574 <CRdSerialDevice::Read(void*, unsigned int)+0x1a8>
    8420:	e0862005 	add	r2, r6, r5
    8424:	e1a01006 	mov	r1, r6
    8428:	e59fc154 	ldr	ip, [pc, #340]	; 8584 <CRdSerialDevice::Read(void*, unsigned int)+0x1b8>
    842c:	ea000003 	b	8440 <CRdSerialDevice::Read(void*, unsigned int)+0x74>
    8430:	e59408ac 	ldr	r0, [r4, #2220]	; 0x8ac
    8434:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
    8438:	e1500003 	cmp	r0, r3
    843c:	0a000014 	beq	8494 <CRdSerialDevice::Read(void*, unsigned int)+0xc8>
    8440:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
    8444:	e2830001 	add	r0, r3, #1
    8448:	e58408b0 	str	r0, [r4, #2224]	; 0x8b0
    844c:	e0843003 	add	r3, r4, r3
    8450:	e5d330aa 	ldrb	r3, [r3, #170]	; 0xaa
    8454:	e4c13001 	strb	r3, [r1], #1
    8458:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
    845c:	e1510002 	cmp	r1, r2
    8460:	e003300c 	and	r3, r3, ip
    8464:	e58438b0 	str	r3, [r4, #2224]	; 0x8b0
    8468:	e0415006 	sub	r5, r1, r6
    846c:	1affffef 	bne	8430 <CRdSerialDevice::Read(void*, unsigned int)+0x64>
    8470:	e59730d0 	ldr	r3, [r7, #208]	; 0xd0
    8474:	e3530000 	cmp	r3, #0
    8478:	0a000008 	beq	84a0 <CRdSerialDevice::Read(void*, unsigned int)+0xd4>
    847c:	eb0027e3 	bl	12410 <LeaveCritical>
    8480:	e1a00005 	mov	r0, r5
    8484:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8488:	e3a03000 	mov	r3, #0
    848c:	e59458b4 	ldr	r5, [r4, #2228]	; 0x8b4
    8490:	e58438b4 	str	r3, [r4, #2228]	; 0x8b4
    8494:	e59730d0 	ldr	r3, [r7, #208]	; 0xd0
    8498:	e3530000 	cmp	r3, #0
    849c:	1afffff6 	bne	847c <CRdSerialDevice::Read(void*, unsigned int)+0xb0>
    84a0:	e1a00005 	mov	r0, r5
    84a4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    84a8:	eb0027ab 	bl	1235c <EnterCritical>
    84ac:	e59438b4 	ldr	r3, [r4, #2228]	; 0x8b4
    84b0:	e3530000 	cmp	r3, #0
    84b4:	aaffffd3 	bge	8408 <CRdSerialDevice::Read(void*, unsigned int)+0x3c>
    84b8:	eafffff2 	b	8488 <CRdSerialDevice::Read(void*, unsigned int)+0xbc>
    84bc:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    84c0:	e3550000 	cmp	r5, #0
    84c4:	0a00001b 	beq	8538 <CRdSerialDevice::Read(void*, unsigned int)+0x16c>
    84c8:	e59f00b8 	ldr	r0, [pc, #184]	; 8588 <CRdSerialDevice::Read(void*, unsigned int)+0x1bc>
    84cc:	e5902018 	ldr	r2, [r0, #24]
    84d0:	e3120010 	tst	r2, #16
    84d4:	1a000028 	bne	857c <CRdSerialDevice::Read(void*, unsigned int)+0x1b0>
    84d8:	e5903000 	ldr	r3, [r0]
    84dc:	e3130b01 	tst	r3, #1024	; 0x400
    84e0:	1a00001d 	bne	855c <CRdSerialDevice::Read(void*, unsigned int)+0x190>
    84e4:	e3130b02 	tst	r3, #2048	; 0x800
    84e8:	1a00001d 	bne	8564 <CRdSerialDevice::Read(void*, unsigned int)+0x198>
    84ec:	e3130c01 	tst	r3, #256	; 0x100
    84f0:	00862005 	addeq	r2, r6, r5
    84f4:	01a01006 	moveq	r1, r6
    84f8:	0a00000a 	beq	8528 <CRdSerialDevice::Read(void*, unsigned int)+0x15c>
    84fc:	ea00001a 	b	856c <CRdSerialDevice::Read(void*, unsigned int)+0x1a0>
    8500:	e5903018 	ldr	r3, [r0, #24]
    8504:	e3130010 	tst	r3, #16
    8508:	1a00000a 	bne	8538 <CRdSerialDevice::Read(void*, unsigned int)+0x16c>
    850c:	e5903000 	ldr	r3, [r0]
    8510:	e3130b01 	tst	r3, #1024	; 0x400
    8514:	1a000010 	bne	855c <CRdSerialDevice::Read(void*, unsigned int)+0x190>
    8518:	e3130b02 	tst	r3, #2048	; 0x800
    851c:	1a000010 	bne	8564 <CRdSerialDevice::Read(void*, unsigned int)+0x198>
    8520:	e3130c01 	tst	r3, #256	; 0x100
    8524:	1a000010 	bne	856c <CRdSerialDevice::Read(void*, unsigned int)+0x1a0>
    8528:	e4c13001 	strb	r3, [r1], #1
    852c:	e1510002 	cmp	r1, r2
    8530:	e0415006 	sub	r5, r1, r6
    8534:	1afffff1 	bne	8500 <CRdSerialDevice::Read(void*, unsigned int)+0x134>
    8538:	e3a03000 	mov	r3, #0
    853c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    8540:	e1a00005 	mov	r0, r5
    8544:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8548:	e59f203c 	ldr	r2, [pc, #60]	; 858c <CRdSerialDevice::Read(void*, unsigned int)+0x1c0>
    854c:	e59f103c 	ldr	r1, [pc, #60]	; 8590 <CRdSerialDevice::Read(void*, unsigned int)+0x1c4>
    8550:	e59f003c 	ldr	r0, [pc, #60]	; 8594 <CRdSerialDevice::Read(void*, unsigned int)+0x1c8>
    8554:	eb0007df 	bl	a4d8 <assertion_failed>
    8558:	eaffffa0 	b	83e0 <CRdSerialDevice::Read(void*, unsigned int)+0x14>
    855c:	e3e05000 	mvn	r5, #0
    8560:	eafffff4 	b	8538 <CRdSerialDevice::Read(void*, unsigned int)+0x16c>
    8564:	e3e05001 	mvn	r5, #1
    8568:	eafffff2 	b	8538 <CRdSerialDevice::Read(void*, unsigned int)+0x16c>
    856c:	e3e05002 	mvn	r5, #2
    8570:	eafffff0 	b	8538 <CRdSerialDevice::Read(void*, unsigned int)+0x16c>
    8574:	e3a05000 	mov	r5, #0
    8578:	eaffffc5 	b	8494 <CRdSerialDevice::Read(void*, unsigned int)+0xc8>
    857c:	e1a05003 	mov	r5, r3
    8580:	eaffffec 	b	8538 <CRdSerialDevice::Read(void*, unsigned int)+0x16c>
    8584:	000007ff 	.word	0x000007ff
    8588:	20201000 	.word	0x20201000
    858c:	00000101 	.word	0x00000101
    8590:	00013a7c 	.word	0x00013a7c
    8594:	00013a90 	.word	0x00013a90

00008598 <CRdSerialDevice::CRdSerialDevice(CInterruptSystem*, bool)>:
    8598:	e92d4070 	push	{r4, r5, r6, lr}
    859c:	e1a04000 	mov	r4, r0
    85a0:	e1a05002 	mov	r5, r2
    85a4:	e1a06001 	mov	r6, r1
    85a8:	eb000908 	bl	a9d0 <CDevice::CDevice()>
    85ac:	e1a00004 	mov	r0, r4
    85b0:	e3a03000 	mov	r3, #0
    85b4:	e59f1098 	ldr	r1, [pc, #152]	; 8654 <CRdSerialDevice::CRdSerialDevice(CInterruptSystem*, bool)+0xbc>
    85b8:	e1a02003 	mov	r2, r3
    85bc:	e4801004 	str	r1, [r0], #4
    85c0:	e3a01020 	mov	r1, #32
    85c4:	eb000d6f 	bl	bb88 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    85c8:	e3a03000 	mov	r3, #0
    85cc:	e284002c 	add	r0, r4, #44	; 0x2c
    85d0:	e1a02003 	mov	r2, r3
    85d4:	e3a01021 	mov	r1, #33	; 0x21
    85d8:	eb000d6a 	bl	bb88 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    85dc:	e2840054 	add	r0, r4, #84	; 0x54
    85e0:	e3a03000 	mov	r3, #0
    85e4:	e3a02004 	mov	r2, #4
    85e8:	e3a0100e 	mov	r1, #14
    85ec:	eb000d65 	bl	bb88 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    85f0:	e284007c 	add	r0, r4, #124	; 0x7c
    85f4:	e3a03000 	mov	r3, #0
    85f8:	e3a02004 	mov	r2, #4
    85fc:	e3a0100f 	mov	r1, #15
    8600:	eb000d60 	bl	bb88 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    8604:	e3550000 	cmp	r5, #0
    8608:	e3a03000 	mov	r3, #0
    860c:	e3a01001 	mov	r1, #1
    8610:	13a0c002 	movne	ip, #2
    8614:	03a0c001 	moveq	ip, #1
    8618:	e2842a01 	add	r2, r4, #4096	; 0x1000
    861c:	e58438ac 	str	r3, [r4, #2220]	; 0x8ac
    8620:	e58460a4 	str	r6, [r4, #164]	; 0xa4
    8624:	e58438b0 	str	r3, [r4, #2224]	; 0x8b0
    8628:	e5c450a8 	strb	r5, [r4, #168]	; 0xa8
    862c:	e5c430a9 	strb	r3, [r4, #169]	; 0xa9
    8630:	e58438b4 	str	r3, [r4, #2228]	; 0x8b4
    8634:	e1a00004 	mov	r0, r4
    8638:	e58230b8 	str	r3, [r2, #184]	; 0xb8
    863c:	e582c0d0 	str	ip, [r2, #208]	; 0xd0
    8640:	e58230c4 	str	r3, [r2, #196]	; 0xc4
    8644:	e58230bc 	str	r3, [r2, #188]	; 0xbc
    8648:	e58210c0 	str	r1, [r2, #192]	; 0xc0
    864c:	e58210d4 	str	r1, [r2, #212]	; 0xd4
    8650:	e8bd8070 	pop	{r4, r5, r6, pc}
    8654:	00013a68 	.word	0x00013a68

00008658 <CRdSerialDevice::Initialize(unsigned int)>:
    8658:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    865c:	e1a08001 	mov	r8, r1
    8660:	e1a04000 	mov	r4, r0
    8664:	eb001381 	bl	d470 <CMachineInfo::Get()>
    8668:	e3a01002 	mov	r1, #2
    866c:	eb00131f 	bl	d2f0 <CMachineInfo::GetClockRate(unsigned int) const>
    8670:	e2505000 	subs	r5, r0, #0
    8674:	e2487f4b 	sub	r7, r8, #300	; 0x12c
    8678:	e1a06208 	lsl	r6, r8, #4
    867c:	0a000045 	beq	8798 <CRdSerialDevice::Initialize(unsigned int)+0x140>
    8680:	e59f3158 	ldr	r3, [pc, #344]	; 87e0 <CRdSerialDevice::Initialize(unsigned int)+0x188>
    8684:	e1570003 	cmp	r7, r3
    8688:	8a00003d 	bhi	8784 <CRdSerialDevice::Initialize(unsigned int)+0x12c>
    868c:	e1a01006 	mov	r1, r6
    8690:	e1a00005 	mov	r0, r5
    8694:	eb0006b8 	bl	a17c <__udivsi3>
    8698:	e59f3144 	ldr	r3, [pc, #324]	; 87e4 <CRdSerialDevice::Initialize(unsigned int)+0x18c>
    869c:	e2402001 	sub	r2, r0, #1
    86a0:	e1520003 	cmp	r2, r3
    86a4:	e1a07000 	mov	r7, r0
    86a8:	8a000042 	bhi	87b8 <CRdSerialDevice::Initialize(unsigned int)+0x160>
    86ac:	e1a00005 	mov	r0, r5
    86b0:	e1a01006 	mov	r1, r6
    86b4:	eb0006ed 	bl	a270 <__aeabi_uidivmod>
    86b8:	e1a00181 	lsl	r0, r1, #3
    86bc:	e1a01008 	mov	r1, r8
    86c0:	eb0006ad 	bl	a17c <__udivsi3>
    86c4:	e2005001 	and	r5, r0, #1
    86c8:	e08550a0 	add	r5, r5, r0, lsr #1
    86cc:	e355003f 	cmp	r5, #63	; 0x3f
    86d0:	8a00003d 	bhi	87cc <CRdSerialDevice::Initialize(unsigned int)+0x174>
    86d4:	e59400a4 	ldr	r0, [r4, #164]	; 0xa4
    86d8:	e3500000 	cmp	r0, #0
    86dc:	0a000008 	beq	8704 <CRdSerialDevice::Initialize(unsigned int)+0xac>
    86e0:	e5d430a8 	ldrb	r3, [r4, #168]	; 0xa8
    86e4:	e59f20fc 	ldr	r2, [pc, #252]	; 87e8 <CRdSerialDevice::Initialize(unsigned int)+0x190>
    86e8:	e3530000 	cmp	r3, #0
    86ec:	e3a01039 	mov	r1, #57	; 0x39
    86f0:	e1a03004 	mov	r3, r4
    86f4:	0a000020 	beq	877c <CRdSerialDevice::Initialize(unsigned int)+0x124>
    86f8:	eb000e73 	bl	c0cc <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>
    86fc:	e3a03001 	mov	r3, #1
    8700:	e5c430a9 	strb	r3, [r4, #169]	; 0xa9
    8704:	e3a02000 	mov	r2, #0
    8708:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
    870c:	e59f30d8 	ldr	r3, [pc, #216]	; 87ec <CRdSerialDevice::Initialize(unsigned int)+0x194>
    8710:	e59f10d8 	ldr	r1, [pc, #216]	; 87f0 <CRdSerialDevice::Initialize(unsigned int)+0x198>
    8714:	e5832038 	str	r2, [r3, #56]	; 0x38
    8718:	e5831044 	str	r1, [r3, #68]	; 0x44
    871c:	e5837024 	str	r7, [r3, #36]	; 0x24
    8720:	e5835028 	str	r5, [r3, #40]	; 0x28
    8724:	e59420a4 	ldr	r2, [r4, #164]	; 0xa4
    8728:	e3a05000 	mov	r5, #0
    872c:	e3520000 	cmp	r2, #0
    8730:	13a02e45 	movne	r2, #1104	; 0x450
    8734:	03a02060 	moveq	r2, #96	; 0x60
    8738:	13a00009 	movne	r0, #9
    873c:	13a01070 	movne	r1, #112	; 0x70
    8740:	15830034 	strne	r0, [r3, #52]	; 0x34
    8744:	0583202c 	streq	r2, [r3, #44]	; 0x2c
    8748:	1583102c 	strne	r1, [r3, #44]	; 0x2c
    874c:	15832038 	strne	r2, [r3, #56]	; 0x38
    8750:	e59f3094 	ldr	r3, [pc, #148]	; 87ec <CRdSerialDevice::Initialize(unsigned int)+0x194>
    8754:	e59f2098 	ldr	r2, [pc, #152]	; 87f4 <CRdSerialDevice::Initialize(unsigned int)+0x19c>
    8758:	e5832030 	str	r2, [r3, #48]	; 0x30
    875c:	ee075fba 	mcr	15, 0, r5, cr7, cr10, {5}
    8760:	eb00098b 	bl	ad94 <CDeviceNameService::Get()>
    8764:	e1a03005 	mov	r3, r5
    8768:	e1a02004 	mov	r2, r4
    876c:	e59f1084 	ldr	r1, [pc, #132]	; 87f8 <CRdSerialDevice::Initialize(unsigned int)+0x1a0>
    8770:	eb0008c7 	bl	aa94 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
    8774:	e3a00001 	mov	r0, #1
    8778:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    877c:	eb000de5 	bl	bf18 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    8780:	eaffffdd 	b	86fc <CRdSerialDevice::Initialize(unsigned int)+0xa4>
    8784:	e3a0208c 	mov	r2, #140	; 0x8c
    8788:	e59f106c 	ldr	r1, [pc, #108]	; 87fc <CRdSerialDevice::Initialize(unsigned int)+0x1a4>
    878c:	e59f006c 	ldr	r0, [pc, #108]	; 8800 <CRdSerialDevice::Initialize(unsigned int)+0x1a8>
    8790:	eb000750 	bl	a4d8 <assertion_failed>
    8794:	eaffffbc 	b	868c <CRdSerialDevice::Initialize(unsigned int)+0x34>
    8798:	e3a0208a 	mov	r2, #138	; 0x8a
    879c:	e59f1058 	ldr	r1, [pc, #88]	; 87fc <CRdSerialDevice::Initialize(unsigned int)+0x1a4>
    87a0:	e59f005c 	ldr	r0, [pc, #92]	; 8804 <CRdSerialDevice::Initialize(unsigned int)+0x1ac>
    87a4:	eb00074b 	bl	a4d8 <assertion_failed>
    87a8:	e59f3030 	ldr	r3, [pc, #48]	; 87e0 <CRdSerialDevice::Initialize(unsigned int)+0x188>
    87ac:	e1570003 	cmp	r7, r3
    87b0:	91a07005 	movls	r7, r5
    87b4:	8afffff2 	bhi	8784 <CRdSerialDevice::Initialize(unsigned int)+0x12c>
    87b8:	e3a0208f 	mov	r2, #143	; 0x8f
    87bc:	e59f1038 	ldr	r1, [pc, #56]	; 87fc <CRdSerialDevice::Initialize(unsigned int)+0x1a4>
    87c0:	e59f0040 	ldr	r0, [pc, #64]	; 8808 <CRdSerialDevice::Initialize(unsigned int)+0x1b0>
    87c4:	eb000743 	bl	a4d8 <assertion_failed>
    87c8:	eaffffb7 	b	86ac <CRdSerialDevice::Initialize(unsigned int)+0x54>
    87cc:	e3a02092 	mov	r2, #146	; 0x92
    87d0:	e59f1024 	ldr	r1, [pc, #36]	; 87fc <CRdSerialDevice::Initialize(unsigned int)+0x1a4>
    87d4:	e59f0030 	ldr	r0, [pc, #48]	; 880c <CRdSerialDevice::Initialize(unsigned int)+0x1b4>
    87d8:	eb00073e 	bl	a4d8 <assertion_failed>
    87dc:	eaffffbc 	b	86d4 <CRdSerialDevice::Initialize(unsigned int)+0x7c>
    87e0:	003d07d4 	.word	0x003d07d4
    87e4:	0000fffe 	.word	0x0000fffe
    87e8:	00008f68 	.word	0x00008f68
    87ec:	20201000 	.word	0x20201000
    87f0:	000007ff 	.word	0x000007ff
    87f4:	00000301 	.word	0x00000301
    87f8:	00013b10 	.word	0x00013b10
    87fc:	00013a7c 	.word	0x00013a7c
    8800:	00013aac 	.word	0x00013aac
    8804:	00013a9c 	.word	0x00013a9c
    8808:	00013ad8 	.word	0x00013ad8
    880c:	00013afc 	.word	0x00013afc

00008810 <CRdSerialDevice::GetOptions() const>:
    8810:	e2800a01 	add	r0, r0, #4096	; 0x1000
    8814:	e59000c0 	ldr	r0, [r0, #192]	; 0xc0
    8818:	e12fff1e 	bx	lr

0000881c <CRdSerialDevice::SetOptions(unsigned int)>:
    881c:	e2800a01 	add	r0, r0, #4096	; 0x1000
    8820:	e58010c0 	str	r1, [r0, #192]	; 0xc0
    8824:	e12fff1e 	bx	lr

00008828 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())>:
    8828:	e92d4070 	push	{r4, r5, r6, lr}
    882c:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
    8830:	e1a04000 	mov	r4, r0
    8834:	e3530000 	cmp	r3, #0
    8838:	e1a05001 	mov	r5, r1
    883c:	e1a06002 	mov	r6, r2
    8840:	0a00001d 	beq	88bc <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x94>
    8844:	e2844a01 	add	r4, r4, #4096	; 0x1000
    8848:	e59430c4 	ldr	r3, [r4, #196]	; 0xc4
    884c:	e3530000 	cmp	r3, #0
    8850:	0a000003 	beq	8864 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x3c>
    8854:	e59f2088 	ldr	r2, [pc, #136]	; 88e4 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xbc>
    8858:	e59f1088 	ldr	r1, [pc, #136]	; 88e8 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc0>
    885c:	e59f0088 	ldr	r0, [pc, #136]	; 88ec <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc4>
    8860:	eb00071c 	bl	a4d8 <assertion_failed>
    8864:	e3550000 	cmp	r5, #0
    8868:	0a000018 	beq	88d0 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xa8>
    886c:	e1d530d0 	ldrsb	r3, [r5]
    8870:	e3530000 	cmp	r3, #0
    8874:	0a000005 	beq	8890 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x68>
    8878:	e3560000 	cmp	r6, #0
    887c:	0a000009 	beq	88a8 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x80>
    8880:	e58460cc 	str	r6, [r4, #204]	; 0xcc
    8884:	e58450c8 	str	r5, [r4, #200]	; 0xc8
    8888:	e58450c4 	str	r5, [r4, #196]	; 0xc4
    888c:	e8bd8070 	pop	{r4, r5, r6, pc}
    8890:	e3a02f57 	mov	r2, #348	; 0x15c
    8894:	e59f104c 	ldr	r1, [pc, #76]	; 88e8 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc0>
    8898:	e59f0050 	ldr	r0, [pc, #80]	; 88f0 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc8>
    889c:	eb00070d 	bl	a4d8 <assertion_failed>
    88a0:	e3560000 	cmp	r6, #0
    88a4:	1afffff5 	bne	8880 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x58>
    88a8:	e59f2044 	ldr	r2, [pc, #68]	; 88f4 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xcc>
    88ac:	e59f1034 	ldr	r1, [pc, #52]	; 88e8 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc0>
    88b0:	e59f0040 	ldr	r0, [pc, #64]	; 88f8 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xd0>
    88b4:	eb000707 	bl	a4d8 <assertion_failed>
    88b8:	eafffff0 	b	8880 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x58>
    88bc:	e3a02f56 	mov	r2, #344	; 0x158
    88c0:	e59f1020 	ldr	r1, [pc, #32]	; 88e8 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc0>
    88c4:	e59f0030 	ldr	r0, [pc, #48]	; 88fc <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xd4>
    88c8:	eb000702 	bl	a4d8 <assertion_failed>
    88cc:	eaffffdc 	b	8844 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x1c>
    88d0:	e59f2028 	ldr	r2, [pc, #40]	; 8900 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xd8>
    88d4:	e59f100c 	ldr	r1, [pc, #12]	; 88e8 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc0>
    88d8:	e59f0024 	ldr	r0, [pc, #36]	; 8904 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xdc>
    88dc:	eb0006fd 	bl	a4d8 <assertion_failed>
    88e0:	eaffffe1 	b	886c <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x44>
    88e4:	00000159 	.word	0x00000159
    88e8:	00013a7c 	.word	0x00013a7c
    88ec:	00013b30 	.word	0x00013b30
    88f0:	00013b4c 	.word	0x00013b4c
    88f4:	0000015d 	.word	0x0000015d
    88f8:	000143e0 	.word	0x000143e0
    88fc:	00013b18 	.word	0x00013b18
    8900:	0000015b 	.word	0x0000015b
    8904:	00013b40 	.word	0x00013b40

00008908 <CRdSerialDevice::AvailableForWrite()>:
    8908:	e92d4010 	push	{r4, lr}
    890c:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
    8910:	e1a04000 	mov	r4, r0
    8914:	e3530000 	cmp	r3, #0
    8918:	0a000014 	beq	8970 <CRdSerialDevice::AvailableForWrite()+0x68>
    891c:	e2844a01 	add	r4, r4, #4096	; 0x1000
    8920:	e59400d0 	ldr	r0, [r4, #208]	; 0xd0
    8924:	e3500000 	cmp	r0, #0
    8928:	1a00000d 	bne	8964 <CRdSerialDevice::AvailableForWrite()+0x5c>
    892c:	e59420bc 	ldr	r2, [r4, #188]	; 0xbc
    8930:	e59430b8 	ldr	r3, [r4, #184]	; 0xb8
    8934:	e1520003 	cmp	r2, r3
    8938:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    893c:	e59420b8 	ldr	r2, [r4, #184]	; 0xb8
    8940:	92834e7f 	addls	r4, r3, #2032	; 0x7f0
    8944:	9284400f 	addls	r4, r4, #15
    8948:	82434001 	subhi	r4, r3, #1
    894c:	e3500000 	cmp	r0, #0
    8950:	e0444002 	sub	r4, r4, r2
    8954:	0a000000 	beq	895c <CRdSerialDevice::AvailableForWrite()+0x54>
    8958:	eb0026ac 	bl	12410 <LeaveCritical>
    895c:	e1a00004 	mov	r0, r4
    8960:	e8bd8010 	pop	{r4, pc}
    8964:	eb00267c 	bl	1235c <EnterCritical>
    8968:	e59400d0 	ldr	r0, [r4, #208]	; 0xd0
    896c:	eaffffee 	b	892c <CRdSerialDevice::AvailableForWrite()+0x24>
    8970:	e59f200c 	ldr	r2, [pc, #12]	; 8984 <CRdSerialDevice::AvailableForWrite()+0x7c>
    8974:	e59f100c 	ldr	r1, [pc, #12]	; 8988 <CRdSerialDevice::AvailableForWrite()+0x80>
    8978:	e59f000c 	ldr	r0, [pc, #12]	; 898c <CRdSerialDevice::AvailableForWrite()+0x84>
    897c:	eb0006d5 	bl	a4d8 <assertion_failed>
    8980:	eaffffe5 	b	891c <CRdSerialDevice::AvailableForWrite()+0x14>
    8984:	00000167 	.word	0x00000167
    8988:	00013a7c 	.word	0x00013a7c
    898c:	00013b18 	.word	0x00013b18

00008990 <CRdSerialDevice::AvailableForRead()>:
    8990:	e92d4070 	push	{r4, r5, r6, lr}
    8994:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
    8998:	e1a04000 	mov	r4, r0
    899c:	e3530000 	cmp	r3, #0
    89a0:	0a000014 	beq	89f8 <CRdSerialDevice::AvailableForRead()+0x68>
    89a4:	e2845a01 	add	r5, r4, #4096	; 0x1000
    89a8:	e59500d0 	ldr	r0, [r5, #208]	; 0xd0
    89ac:	e3500000 	cmp	r0, #0
    89b0:	1a00000d 	bne	89ec <CRdSerialDevice::AvailableForRead()+0x5c>
    89b4:	e59428ac 	ldr	r2, [r4, #2220]	; 0x8ac
    89b8:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
    89bc:	e1520003 	cmp	r2, r3
    89c0:	e59438ac 	ldr	r3, [r4, #2220]	; 0x8ac
    89c4:	359428b0 	ldrcc	r2, [r4, #2224]	; 0x8b0
    89c8:	259448b0 	ldrcs	r4, [r4, #2224]	; 0x8b0
    89cc:	32834b02 	addcc	r4, r3, #2048	; 0x800
    89d0:	30444002 	subcc	r4, r4, r2
    89d4:	20434004 	subcs	r4, r3, r4
    89d8:	e3500000 	cmp	r0, #0
    89dc:	0a000000 	beq	89e4 <CRdSerialDevice::AvailableForRead()+0x54>
    89e0:	eb00268a 	bl	12410 <LeaveCritical>
    89e4:	e1a00004 	mov	r0, r4
    89e8:	e8bd8070 	pop	{r4, r5, r6, pc}
    89ec:	eb00265a 	bl	1235c <EnterCritical>
    89f0:	e59500d0 	ldr	r0, [r5, #208]	; 0xd0
    89f4:	eaffffee 	b	89b4 <CRdSerialDevice::AvailableForRead()+0x24>
    89f8:	e3a02f5f 	mov	r2, #380	; 0x17c
    89fc:	e59f1008 	ldr	r1, [pc, #8]	; 8a0c <CRdSerialDevice::AvailableForRead()+0x7c>
    8a00:	e59f0008 	ldr	r0, [pc, #8]	; 8a10 <CRdSerialDevice::AvailableForRead()+0x80>
    8a04:	eb0006b3 	bl	a4d8 <assertion_failed>
    8a08:	eaffffe5 	b	89a4 <CRdSerialDevice::AvailableForRead()+0x14>
    8a0c:	00013a7c 	.word	0x00013a7c
    8a10:	00013b18 	.word	0x00013b18

00008a14 <CRdSerialDevice::Peek()>:
    8a14:	e92d4070 	push	{r4, r5, r6, lr}
    8a18:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
    8a1c:	e1a04000 	mov	r4, r0
    8a20:	e3530000 	cmp	r3, #0
    8a24:	0a00001b 	beq	8a98 <CRdSerialDevice::Peek()+0x84>
    8a28:	e2845a01 	add	r5, r4, #4096	; 0x1000
    8a2c:	e59500d0 	ldr	r0, [r5, #208]	; 0xd0
    8a30:	e3500000 	cmp	r0, #0
    8a34:	1a000008 	bne	8a5c <CRdSerialDevice::Peek()+0x48>
    8a38:	e59428ac 	ldr	r2, [r4, #2220]	; 0x8ac
    8a3c:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
    8a40:	e1520003 	cmp	r2, r3
    8a44:	0a000018 	beq	8aac <CRdSerialDevice::Peek()+0x98>
    8a48:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
    8a4c:	e0844003 	add	r4, r4, r3
    8a50:	e5d440aa 	ldrb	r4, [r4, #170]	; 0xaa
    8a54:	e1a00004 	mov	r0, r4
    8a58:	e8bd8070 	pop	{r4, r5, r6, pc}
    8a5c:	eb00263e 	bl	1235c <EnterCritical>
    8a60:	e59428ac 	ldr	r2, [r4, #2220]	; 0x8ac
    8a64:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
    8a68:	e1520003 	cmp	r2, r3
    8a6c:	159438b0 	ldrne	r3, [r4, #2224]	; 0x8b0
    8a70:	059520d0 	ldreq	r2, [r5, #208]	; 0xd0
    8a74:	159520d0 	ldrne	r2, [r5, #208]	; 0xd0
    8a78:	10844003 	addne	r4, r4, r3
    8a7c:	03e04000 	mvneq	r4, #0
    8a80:	15d440aa 	ldrbne	r4, [r4, #170]	; 0xaa
    8a84:	e3520000 	cmp	r2, #0
    8a88:	0afffff1 	beq	8a54 <CRdSerialDevice::Peek()+0x40>
    8a8c:	eb00265f 	bl	12410 <LeaveCritical>
    8a90:	e1a00004 	mov	r0, r4
    8a94:	e8bd8070 	pop	{r4, r5, r6, pc}
    8a98:	e59f2014 	ldr	r2, [pc, #20]	; 8ab4 <CRdSerialDevice::Peek()+0xa0>
    8a9c:	e59f1014 	ldr	r1, [pc, #20]	; 8ab8 <CRdSerialDevice::Peek()+0xa4>
    8aa0:	e59f0014 	ldr	r0, [pc, #20]	; 8abc <CRdSerialDevice::Peek()+0xa8>
    8aa4:	eb00068b 	bl	a4d8 <assertion_failed>
    8aa8:	eaffffde 	b	8a28 <CRdSerialDevice::Peek()+0x14>
    8aac:	e3e04000 	mvn	r4, #0
    8ab0:	eaffffe7 	b	8a54 <CRdSerialDevice::Peek()+0x40>
    8ab4:	00000191 	.word	0x00000191
    8ab8:	00013a7c 	.word	0x00013a7c
    8abc:	00013b18 	.word	0x00013b18

00008ac0 <CRdSerialDevice::Flush()>:
    8ac0:	e3a03000 	mov	r3, #0
    8ac4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    8ac8:	e59f2010 	ldr	r2, [pc, #16]	; 8ae0 <CRdSerialDevice::Flush()+0x20>
    8acc:	e5923018 	ldr	r3, [r2, #24]
    8ad0:	e2133008 	ands	r3, r3, #8
    8ad4:	1afffffc 	bne	8acc <CRdSerialDevice::Flush()+0xc>
    8ad8:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    8adc:	e12fff1e 	bx	lr
    8ae0:	20201000 	.word	0x20201000

00008ae4 <CRdSerialDevice::Write(unsigned char)>:
    8ae4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8ae8:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
    8aec:	e3530000 	cmp	r3, #0
    8af0:	0a000027 	beq	8b94 <CRdSerialDevice::Write(unsigned char)+0xb0>
    8af4:	e2805a01 	add	r5, r0, #4096	; 0x1000
    8af8:	e59520d0 	ldr	r2, [r5, #208]	; 0xd0
    8afc:	e1a06001 	mov	r6, r1
    8b00:	e3520000 	cmp	r2, #0
    8b04:	e1a04000 	mov	r4, r0
    8b08:	1a000015 	bne	8b64 <CRdSerialDevice::Write(unsigned char)+0x80>
    8b0c:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
    8b10:	e59510bc 	ldr	r1, [r5, #188]	; 0xbc
    8b14:	e2833001 	add	r3, r3, #1
    8b18:	e1a03a83 	lsl	r3, r3, #21
    8b1c:	e1a03aa3 	lsr	r3, r3, #21
    8b20:	e1530001 	cmp	r3, r1
    8b24:	0a000024 	beq	8bbc <CRdSerialDevice::Write(unsigned char)+0xd8>
    8b28:	e3a07001 	mov	r7, #1
    8b2c:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
    8b30:	e0840003 	add	r0, r4, r3
    8b34:	e0833007 	add	r3, r3, r7
    8b38:	e58530b8 	str	r3, [r5, #184]	; 0xb8
    8b3c:	e5c068b8 	strb	r6, [r0, #2232]	; 0x8b8
    8b40:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
    8b44:	e1a03a83 	lsl	r3, r3, #21
    8b48:	e1a03aa3 	lsr	r3, r3, #21
    8b4c:	e58530b8 	str	r3, [r5, #184]	; 0xb8
    8b50:	e3520000 	cmp	r2, #0
    8b54:	0a000000 	beq	8b5c <CRdSerialDevice::Write(unsigned char)+0x78>
    8b58:	eb00262c 	bl	12410 <LeaveCritical>
    8b5c:	e1a00007 	mov	r0, r7
    8b60:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8b64:	e1a00002 	mov	r0, r2
    8b68:	eb0025fb 	bl	1235c <EnterCritical>
    8b6c:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
    8b70:	e59520bc 	ldr	r2, [r5, #188]	; 0xbc
    8b74:	e2833001 	add	r3, r3, #1
    8b78:	e1a03a83 	lsl	r3, r3, #21
    8b7c:	e1a03aa3 	lsr	r3, r3, #21
    8b80:	e1530002 	cmp	r3, r2
    8b84:	03a07000 	moveq	r7, #0
    8b88:	e59520d0 	ldr	r2, [r5, #208]	; 0xd0
    8b8c:	1affffe5 	bne	8b28 <CRdSerialDevice::Write(unsigned char)+0x44>
    8b90:	eaffffee 	b	8b50 <CRdSerialDevice::Write(unsigned char)+0x6c>
    8b94:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    8b98:	e59f2028 	ldr	r2, [pc, #40]	; 8bc8 <CRdSerialDevice::Write(unsigned char)+0xe4>
    8b9c:	e5923018 	ldr	r3, [r2, #24]
    8ba0:	e2133020 	ands	r3, r3, #32
    8ba4:	1afffffc 	bne	8b9c <CRdSerialDevice::Write(unsigned char)+0xb8>
    8ba8:	e5821000 	str	r1, [r2]
    8bac:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    8bb0:	e3a07001 	mov	r7, #1
    8bb4:	e1a00007 	mov	r0, r7
    8bb8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8bbc:	e1a07002 	mov	r7, r2
    8bc0:	e1a00007 	mov	r0, r7
    8bc4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8bc8:	20201000 	.word	0x20201000

00008bcc <CRdSerialDevice::Write(void const*, unsigned int)>:
    8bcc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8bd0:	e2806a01 	add	r6, r0, #4096	; 0x1000
    8bd4:	e1a07000 	mov	r7, r0
    8bd8:	e59600d4 	ldr	r0, [r6, #212]	; 0xd4
    8bdc:	e1a04001 	mov	r4, r1
    8be0:	e3500000 	cmp	r0, #0
    8be4:	e1a08002 	mov	r8, r2
    8be8:	1a000052 	bne	8d38 <CRdSerialDevice::Write(void const*, unsigned int)+0x16c>
    8bec:	e3540000 	cmp	r4, #0
    8bf0:	0a000053 	beq	8d44 <CRdSerialDevice::Write(void const*, unsigned int)+0x178>
    8bf4:	e3580000 	cmp	r8, #0
    8bf8:	0a00005b 	beq	8d6c <CRdSerialDevice::Write(void const*, unsigned int)+0x1a0>
    8bfc:	e3a05000 	mov	r5, #0
    8c00:	e2444001 	sub	r4, r4, #1
    8c04:	ea000002 	b	8c14 <CRdSerialDevice::Write(void const*, unsigned int)+0x48>
    8c08:	e2855001 	add	r5, r5, #1
    8c0c:	e1550008 	cmp	r5, r8
    8c10:	0a00000f 	beq	8c54 <CRdSerialDevice::Write(void const*, unsigned int)+0x88>
    8c14:	e5f41001 	ldrb	r1, [r4, #1]!
    8c18:	e1a00007 	mov	r0, r7
    8c1c:	ebffffb0 	bl	8ae4 <CRdSerialDevice::Write(unsigned char)>
    8c20:	e3500000 	cmp	r0, #0
    8c24:	0a00000a 	beq	8c54 <CRdSerialDevice::Write(void const*, unsigned int)+0x88>
    8c28:	e5d43000 	ldrb	r3, [r4]
    8c2c:	e353000a 	cmp	r3, #10
    8c30:	1afffff4 	bne	8c08 <CRdSerialDevice::Write(void const*, unsigned int)+0x3c>
    8c34:	e59630c0 	ldr	r3, [r6, #192]	; 0xc0
    8c38:	e3130001 	tst	r3, #1
    8c3c:	0afffff1 	beq	8c08 <CRdSerialDevice::Write(void const*, unsigned int)+0x3c>
    8c40:	e3a0100d 	mov	r1, #13
    8c44:	e1a00007 	mov	r0, r7
    8c48:	ebffffa5 	bl	8ae4 <CRdSerialDevice::Write(unsigned char)>
    8c4c:	e3500000 	cmp	r0, #0
    8c50:	1affffec 	bne	8c08 <CRdSerialDevice::Write(void const*, unsigned int)+0x3c>
    8c54:	e59630d4 	ldr	r3, [r6, #212]	; 0xd4
    8c58:	e3530000 	cmp	r3, #0
    8c5c:	1a000033 	bne	8d30 <CRdSerialDevice::Write(void const*, unsigned int)+0x164>
    8c60:	e59730a4 	ldr	r3, [r7, #164]	; 0xa4
    8c64:	e3530000 	cmp	r3, #0
    8c68:	0a000028 	beq	8d10 <CRdSerialDevice::Write(void const*, unsigned int)+0x144>
    8c6c:	e59600d0 	ldr	r0, [r6, #208]	; 0xd0
    8c70:	e3500000 	cmp	r0, #0
    8c74:	1a000027 	bne	8d18 <CRdSerialDevice::Write(void const*, unsigned int)+0x14c>
    8c78:	e59630b8 	ldr	r3, [r6, #184]	; 0xb8
    8c7c:	e59620bc 	ldr	r2, [r6, #188]	; 0xbc
    8c80:	e1520003 	cmp	r2, r3
    8c84:	0a000021 	beq	8d10 <CRdSerialDevice::Write(void const*, unsigned int)+0x144>
    8c88:	e3a03000 	mov	r3, #0
    8c8c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    8c90:	e59630b8 	ldr	r3, [r6, #184]	; 0xb8
    8c94:	e59620bc 	ldr	r2, [r6, #188]	; 0xbc
    8c98:	e1520003 	cmp	r2, r3
    8c9c:	0a000015 	beq	8cf8 <CRdSerialDevice::Write(void const*, unsigned int)+0x12c>
    8ca0:	e59f20cc 	ldr	r2, [pc, #204]	; 8d74 <CRdSerialDevice::Write(void const*, unsigned int)+0x1a8>
    8ca4:	e5923018 	ldr	r3, [r2, #24]
    8ca8:	e3130020 	tst	r3, #32
    8cac:	1a000029 	bne	8d58 <CRdSerialDevice::Write(void const*, unsigned int)+0x18c>
    8cb0:	e59f00c0 	ldr	r0, [pc, #192]	; 8d78 <CRdSerialDevice::Write(void const*, unsigned int)+0x1ac>
    8cb4:	ea000002 	b	8cc4 <CRdSerialDevice::Write(void const*, unsigned int)+0xf8>
    8cb8:	e5923018 	ldr	r3, [r2, #24]
    8cbc:	e3130020 	tst	r3, #32
    8cc0:	1a000024 	bne	8d58 <CRdSerialDevice::Write(void const*, unsigned int)+0x18c>
    8cc4:	e59630bc 	ldr	r3, [r6, #188]	; 0xbc
    8cc8:	e2831001 	add	r1, r3, #1
    8ccc:	e58610bc 	str	r1, [r6, #188]	; 0xbc
    8cd0:	e0873003 	add	r3, r7, r3
    8cd4:	e5d338b8 	ldrb	r3, [r3, #2232]	; 0x8b8
    8cd8:	e5823000 	str	r3, [r2]
    8cdc:	e59630bc 	ldr	r3, [r6, #188]	; 0xbc
    8ce0:	e0033000 	and	r3, r3, r0
    8ce4:	e58630bc 	str	r3, [r6, #188]	; 0xbc
    8ce8:	e59610b8 	ldr	r1, [r6, #184]	; 0xb8
    8cec:	e59630bc 	ldr	r3, [r6, #188]	; 0xbc
    8cf0:	e1510003 	cmp	r1, r3
    8cf4:	1affffef 	bne	8cb8 <CRdSerialDevice::Write(void const*, unsigned int)+0xec>
    8cf8:	e3a03000 	mov	r3, #0
    8cfc:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    8d00:	e59630d0 	ldr	r3, [r6, #208]	; 0xd0
    8d04:	e3530000 	cmp	r3, #0
    8d08:	0a000000 	beq	8d10 <CRdSerialDevice::Write(void const*, unsigned int)+0x144>
    8d0c:	eb0025bf 	bl	12410 <LeaveCritical>
    8d10:	e1a00005 	mov	r0, r5
    8d14:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8d18:	eb00258f 	bl	1235c <EnterCritical>
    8d1c:	e59620b8 	ldr	r2, [r6, #184]	; 0xb8
    8d20:	e59630bc 	ldr	r3, [r6, #188]	; 0xbc
    8d24:	e1520003 	cmp	r2, r3
    8d28:	1affffd6 	bne	8c88 <CRdSerialDevice::Write(void const*, unsigned int)+0xbc>
    8d2c:	eafffff3 	b	8d00 <CRdSerialDevice::Write(void const*, unsigned int)+0x134>
    8d30:	eb0025b6 	bl	12410 <LeaveCritical>
    8d34:	eaffffc9 	b	8c60 <CRdSerialDevice::Write(void const*, unsigned int)+0x94>
    8d38:	eb002587 	bl	1235c <EnterCritical>
    8d3c:	e3540000 	cmp	r4, #0
    8d40:	1affffab 	bne	8bf4 <CRdSerialDevice::Write(void const*, unsigned int)+0x28>
    8d44:	e3a020c3 	mov	r2, #195	; 0xc3
    8d48:	e59f102c 	ldr	r1, [pc, #44]	; 8d7c <CRdSerialDevice::Write(void const*, unsigned int)+0x1b0>
    8d4c:	e59f002c 	ldr	r0, [pc, #44]	; 8d80 <CRdSerialDevice::Write(void const*, unsigned int)+0x1b4>
    8d50:	eb0005e0 	bl	a4d8 <assertion_failed>
    8d54:	eaffffa6 	b	8bf4 <CRdSerialDevice::Write(void const*, unsigned int)+0x28>
    8d58:	e59f2014 	ldr	r2, [pc, #20]	; 8d74 <CRdSerialDevice::Write(void const*, unsigned int)+0x1a8>
    8d5c:	e5923038 	ldr	r3, [r2, #56]	; 0x38
    8d60:	e3833020 	orr	r3, r3, #32
    8d64:	e5823038 	str	r3, [r2, #56]	; 0x38
    8d68:	eaffffe2 	b	8cf8 <CRdSerialDevice::Write(void const*, unsigned int)+0x12c>
    8d6c:	e1a05008 	mov	r5, r8
    8d70:	eaffffb7 	b	8c54 <CRdSerialDevice::Write(void const*, unsigned int)+0x88>
    8d74:	20201000 	.word	0x20201000
    8d78:	000007ff 	.word	0x000007ff
    8d7c:	00013a7c 	.word	0x00013a7c
    8d80:	00013a90 	.word	0x00013a90

00008d84 <CRdSerialDevice::InterruptHandler()>:
    8d84:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    8d88:	e2804a01 	add	r4, r0, #4096	; 0x1000
    8d8c:	e1a05000 	mov	r5, r0
    8d90:	e59400d0 	ldr	r0, [r4, #208]	; 0xd0
    8d94:	e3500000 	cmp	r0, #0
    8d98:	1a00006a 	bne	8f48 <CRdSerialDevice::InterruptHandler()+0x1c4>
    8d9c:	e3a06000 	mov	r6, #0
    8da0:	ee076f9a 	mcr	15, 0, r6, cr7, cr10, {4}
    8da4:	e59f31b4 	ldr	r3, [pc, #436]	; 8f60 <CRdSerialDevice::InterruptHandler()+0x1dc>
    8da8:	e3e07002 	mvn	r7, #2
    8dac:	e1a01003 	mov	r1, r3
    8db0:	e3e0c001 	mvn	ip, #1
    8db4:	e3e0e000 	mvn	lr, #0
    8db8:	e5932040 	ldr	r2, [r3, #64]	; 0x40
    8dbc:	e59f01a0 	ldr	r0, [pc, #416]	; 8f64 <CRdSerialDevice::InterruptHandler()+0x1e0>
    8dc0:	e5832044 	str	r2, [r3, #68]	; 0x44
    8dc4:	e5913018 	ldr	r3, [r1, #24]
    8dc8:	e3130010 	tst	r3, #16
    8dcc:	1a000024 	bne	8e64 <CRdSerialDevice::InterruptHandler()+0xe0>
    8dd0:	e5912000 	ldr	r2, [r1]
    8dd4:	e3120b01 	tst	r2, #1024	; 0x400
    8dd8:	0a000045 	beq	8ef4 <CRdSerialDevice::InterruptHandler()+0x170>
    8ddc:	e59538b4 	ldr	r3, [r5, #2228]	; 0x8b4
    8de0:	e3530000 	cmp	r3, #0
    8de4:	0585e8b4 	streq	lr, [r5, #2228]	; 0x8b4
    8de8:	e59480c4 	ldr	r8, [r4, #196]	; 0xc4
    8dec:	e3580000 	cmp	r8, #0
    8df0:	0a00000a 	beq	8e20 <CRdSerialDevice::InterruptHandler()+0x9c>
    8df4:	e59490c8 	ldr	r9, [r4, #200]	; 0xc8
    8df8:	e6af3072 	sxtb	r3, r2
    8dfc:	e1d9a0d0 	ldrsb	sl, [r9]
    8e00:	e15a0003 	cmp	sl, r3
    8e04:	158480c8 	strne	r8, [r4, #200]	; 0xc8
    8e08:	1a000004 	bne	8e20 <CRdSerialDevice::InterruptHandler()+0x9c>
    8e0c:	e2893001 	add	r3, r9, #1
    8e10:	e58430c8 	str	r3, [r4, #200]	; 0xc8
    8e14:	e1d930d1 	ldrsb	r3, [r9, #1]
    8e18:	e3530000 	cmp	r3, #0
    8e1c:	03a06001 	moveq	r6, #1
    8e20:	e59538ac 	ldr	r3, [r5, #2220]	; 0x8ac
    8e24:	e59588b0 	ldr	r8, [r5, #2224]	; 0x8b0
    8e28:	e2833001 	add	r3, r3, #1
    8e2c:	e0033000 	and	r3, r3, r0
    8e30:	e1530008 	cmp	r3, r8
    8e34:	0a000034 	beq	8f0c <CRdSerialDevice::InterruptHandler()+0x188>
    8e38:	e59538ac 	ldr	r3, [r5, #2220]	; 0x8ac
    8e3c:	e2838001 	add	r8, r3, #1
    8e40:	e0853003 	add	r3, r5, r3
    8e44:	e58588ac 	str	r8, [r5, #2220]	; 0x8ac
    8e48:	e5c320aa 	strb	r2, [r3, #170]	; 0xaa
    8e4c:	e59538ac 	ldr	r3, [r5, #2220]	; 0x8ac
    8e50:	e0033000 	and	r3, r3, r0
    8e54:	e58538ac 	str	r3, [r5, #2220]	; 0x8ac
    8e58:	e5913018 	ldr	r3, [r1, #24]
    8e5c:	e3130010 	tst	r3, #16
    8e60:	0affffda 	beq	8dd0 <CRdSerialDevice::InterruptHandler()+0x4c>
    8e64:	e5913018 	ldr	r3, [r1, #24]
    8e68:	e3130020 	tst	r3, #32
    8e6c:	1a000016 	bne	8ecc <CRdSerialDevice::InterruptHandler()+0x148>
    8e70:	e59430b8 	ldr	r3, [r4, #184]	; 0xb8
    8e74:	e59420bc 	ldr	r2, [r4, #188]	; 0xbc
    8e78:	e1520003 	cmp	r2, r3
    8e7c:	0a00002c 	beq	8f34 <CRdSerialDevice::InterruptHandler()+0x1b0>
    8e80:	e59f20d8 	ldr	r2, [pc, #216]	; 8f60 <CRdSerialDevice::InterruptHandler()+0x1dc>
    8e84:	e59f00d8 	ldr	r0, [pc, #216]	; 8f64 <CRdSerialDevice::InterruptHandler()+0x1e0>
    8e88:	ea000003 	b	8e9c <CRdSerialDevice::InterruptHandler()+0x118>
    8e8c:	e59410b8 	ldr	r1, [r4, #184]	; 0xb8
    8e90:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    8e94:	e1510003 	cmp	r1, r3
    8e98:	0a000025 	beq	8f34 <CRdSerialDevice::InterruptHandler()+0x1b0>
    8e9c:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    8ea0:	e2831001 	add	r1, r3, #1
    8ea4:	e58410bc 	str	r1, [r4, #188]	; 0xbc
    8ea8:	e0853003 	add	r3, r5, r3
    8eac:	e5d338b8 	ldrb	r3, [r3, #2232]	; 0x8b8
    8eb0:	e5823000 	str	r3, [r2]
    8eb4:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    8eb8:	e0033000 	and	r3, r3, r0
    8ebc:	e58430bc 	str	r3, [r4, #188]	; 0xbc
    8ec0:	e5923018 	ldr	r3, [r2, #24]
    8ec4:	e3130020 	tst	r3, #32
    8ec8:	0affffef 	beq	8e8c <CRdSerialDevice::InterruptHandler()+0x108>
    8ecc:	e3a03000 	mov	r3, #0
    8ed0:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    8ed4:	e59430d0 	ldr	r3, [r4, #208]	; 0xd0
    8ed8:	e3530000 	cmp	r3, #0
    8edc:	1a00001b 	bne	8f50 <CRdSerialDevice::InterruptHandler()+0x1cc>
    8ee0:	e3560000 	cmp	r6, #0
    8ee4:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    8ee8:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
    8eec:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    8ef0:	e12fff13 	bx	r3
    8ef4:	e3120b02 	tst	r2, #2048	; 0x800
    8ef8:	0a000007 	beq	8f1c <CRdSerialDevice::InterruptHandler()+0x198>
    8efc:	e59538b4 	ldr	r3, [r5, #2228]	; 0x8b4
    8f00:	e3530000 	cmp	r3, #0
    8f04:	0585c8b4 	streq	ip, [r5, #2228]	; 0x8b4
    8f08:	eaffffb6 	b	8de8 <CRdSerialDevice::InterruptHandler()+0x64>
    8f0c:	e59538b4 	ldr	r3, [r5, #2228]	; 0x8b4
    8f10:	e3530000 	cmp	r3, #0
    8f14:	0585c8b4 	streq	ip, [r5, #2228]	; 0x8b4
    8f18:	eaffffa9 	b	8dc4 <CRdSerialDevice::InterruptHandler()+0x40>
    8f1c:	e3120c01 	tst	r2, #256	; 0x100
    8f20:	0affffb0 	beq	8de8 <CRdSerialDevice::InterruptHandler()+0x64>
    8f24:	e59538b4 	ldr	r3, [r5, #2228]	; 0x8b4
    8f28:	e3530000 	cmp	r3, #0
    8f2c:	058578b4 	streq	r7, [r5, #2228]	; 0x8b4
    8f30:	eaffffac 	b	8de8 <CRdSerialDevice::InterruptHandler()+0x64>
    8f34:	e59f2024 	ldr	r2, [pc, #36]	; 8f60 <CRdSerialDevice::InterruptHandler()+0x1dc>
    8f38:	e5923038 	ldr	r3, [r2, #56]	; 0x38
    8f3c:	e3c33020 	bic	r3, r3, #32
    8f40:	e5823038 	str	r3, [r2, #56]	; 0x38
    8f44:	eaffffe0 	b	8ecc <CRdSerialDevice::InterruptHandler()+0x148>
    8f48:	eb002503 	bl	1235c <EnterCritical>
    8f4c:	eaffff92 	b	8d9c <CRdSerialDevice::InterruptHandler()+0x18>
    8f50:	eb00252e 	bl	12410 <LeaveCritical>
    8f54:	e3560000 	cmp	r6, #0
    8f58:	1affffe2 	bne	8ee8 <CRdSerialDevice::InterruptHandler()+0x164>
    8f5c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    8f60:	20201000 	.word	0x20201000
    8f64:	000007ff 	.word	0x000007ff

00008f68 <CRdSerialDevice::InterruptStub(void*)>:
    8f68:	e92d4010 	push	{r4, lr}
    8f6c:	e2504000 	subs	r4, r0, #0
    8f70:	0a000002 	beq	8f80 <CRdSerialDevice::InterruptStub(void*)+0x18>
    8f74:	e1a00004 	mov	r0, r4
    8f78:	e8bd4010 	pop	{r4, lr}
    8f7c:	eaffff80 	b	8d84 <CRdSerialDevice::InterruptHandler()>
    8f80:	e59f0014 	ldr	r0, [pc, #20]	; 8f9c <CRdSerialDevice::InterruptStub(void*)+0x34>
    8f84:	e59f2014 	ldr	r2, [pc, #20]	; 8fa0 <CRdSerialDevice::InterruptStub(void*)+0x38>
    8f88:	e59f1014 	ldr	r1, [pc, #20]	; 8fa4 <CRdSerialDevice::InterruptStub(void*)+0x3c>
    8f8c:	eb000551 	bl	a4d8 <assertion_failed>
    8f90:	e1a00004 	mov	r0, r4
    8f94:	e8bd4010 	pop	{r4, lr}
    8f98:	eaffff79 	b	8d84 <CRdSerialDevice::InterruptHandler()>
    8f9c:	00013b5c 	.word	0x00013b5c
    8fa0:	0000022e 	.word	0x0000022e
    8fa4:	00013a7c 	.word	0x00013a7c

00008fa8 <CRdSerialDevice::~CRdSerialDevice()>:
    8fa8:	e59f20a4 	ldr	r2, [pc, #164]	; 9054 <CRdSerialDevice::~CRdSerialDevice()+0xac>
    8fac:	e92d4010 	push	{r4, lr}
    8fb0:	e3a03000 	mov	r3, #0
    8fb4:	e1a04000 	mov	r4, r0
    8fb8:	e5802000 	str	r2, [r0]
    8fbc:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    8fc0:	e59f2090 	ldr	r2, [pc, #144]	; 9058 <CRdSerialDevice::~CRdSerialDevice()+0xb0>
    8fc4:	e5823038 	str	r3, [r2, #56]	; 0x38
    8fc8:	e5823030 	str	r3, [r2, #48]	; 0x30
    8fcc:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    8fd0:	e5d030a9 	ldrb	r3, [r0, #169]	; 0xa9
    8fd4:	e3530000 	cmp	r3, #0
    8fd8:	0a000006 	beq	8ff8 <CRdSerialDevice::~CRdSerialDevice()+0x50>
    8fdc:	e59000a4 	ldr	r0, [r0, #164]	; 0xa4
    8fe0:	e3500000 	cmp	r0, #0
    8fe4:	0a000014 	beq	903c <CRdSerialDevice::~CRdSerialDevice()+0x94>
    8fe8:	e5d430a8 	ldrb	r3, [r4, #168]	; 0xa8
    8fec:	e3530000 	cmp	r3, #0
    8ff0:	0a00000e 	beq	9030 <CRdSerialDevice::~CRdSerialDevice()+0x88>
    8ff4:	eb000b87 	bl	be18 <CInterruptSystem::DisconnectFIQ()>
    8ff8:	e3a03000 	mov	r3, #0
    8ffc:	e284007c 	add	r0, r4, #124	; 0x7c
    9000:	e58430a4 	str	r3, [r4, #164]	; 0xa4
    9004:	eb000802 	bl	b014 <CGPIOPin::~CGPIOPin()>
    9008:	e2840054 	add	r0, r4, #84	; 0x54
    900c:	eb000800 	bl	b014 <CGPIOPin::~CGPIOPin()>
    9010:	e284002c 	add	r0, r4, #44	; 0x2c
    9014:	eb0007fe 	bl	b014 <CGPIOPin::~CGPIOPin()>
    9018:	e2840004 	add	r0, r4, #4
    901c:	eb0007fc 	bl	b014 <CGPIOPin::~CGPIOPin()>
    9020:	e1a00004 	mov	r0, r4
    9024:	eb00065d 	bl	a9a0 <CDevice::~CDevice()>
    9028:	e1a00004 	mov	r0, r4
    902c:	e8bd8010 	pop	{r4, pc}
    9030:	e3a01039 	mov	r1, #57	; 0x39
    9034:	eb000bf2 	bl	c004 <CInterruptSystem::DisconnectIRQ(unsigned int)>
    9038:	eaffffee 	b	8ff8 <CRdSerialDevice::~CRdSerialDevice()+0x50>
    903c:	e59f0018 	ldr	r0, [pc, #24]	; 905c <CRdSerialDevice::~CRdSerialDevice()+0xb4>
    9040:	e3a02079 	mov	r2, #121	; 0x79
    9044:	e59f1014 	ldr	r1, [pc, #20]	; 9060 <CRdSerialDevice::~CRdSerialDevice()+0xb8>
    9048:	eb000522 	bl	a4d8 <assertion_failed>
    904c:	e59400a4 	ldr	r0, [r4, #164]	; 0xa4
    9050:	eaffffe4 	b	8fe8 <CRdSerialDevice::~CRdSerialDevice()+0x40>
    9054:	00013a68 	.word	0x00013a68
    9058:	20201000 	.word	0x20201000
    905c:	00013b18 	.word	0x00013b18
    9060:	00013a7c 	.word	0x00013a7c

00009064 <CRdSerialDevice::~CRdSerialDevice()>:
    9064:	e92d4010 	push	{r4, lr}
    9068:	e1a04000 	mov	r4, r0
    906c:	ebffffcd 	bl	8fa8 <CRdSerialDevice::~CRdSerialDevice()>
    9070:	e1a00004 	mov	r0, r4
    9074:	e59f1008 	ldr	r1, [pc, #8]	; 9084 <CRdSerialDevice::~CRdSerialDevice()+0x20>
    9078:	eb002515 	bl	124d4 <operator delete(void*, unsigned int)>
    907c:	e1a00004 	mov	r0, r4
    9080:	e8bd8010 	pop	{r4, pc}
    9084:	000010d8 	.word	0x000010d8

00009088 <BusRaider::static_putBytesToSerial(unsigned char const*, int)>:
    9088:	e12fff1e 	bx	lr

0000908c <BusRaider::static_doChangeMachine(char const*)>:
    908c:	e59f201c 	ldr	r2, [pc, #28]	; 90b0 <BusRaider::static_doChangeMachine(char const*)+0x24>
    9090:	e5922000 	ldr	r2, [r2]
    9094:	e3520000 	cmp	r2, #0
    9098:	012fff1e 	bxeq	lr
    909c:	e1a03000 	mov	r3, r0
    90a0:	e59f200c 	ldr	r2, [pc, #12]	; 90b4 <BusRaider::static_doChangeMachine(char const*)+0x28>
    90a4:	e3a01003 	mov	r1, #3
    90a8:	e59f0008 	ldr	r0, [pc, #8]	; 90b8 <BusRaider::static_doChangeMachine(char const*)+0x2c>
    90ac:	ea000026 	b	914c <LogWrite(char const*, unsigned int, char const*, ...)>
    90b0:	00015e84 	.word	0x00015e84
    90b4:	00013b74 	.word	0x00013b74
    90b8:	00013b68 	.word	0x00013b68

000090bc <BusRaider::BusRaider()>:
    90bc:	e92d4010 	push	{r4, lr}
    90c0:	e1a04000 	mov	r4, r0
    90c4:	eb0002ba 	bl	9bb4 <CommandHandler::CommandHandler()>
    90c8:	e59f0020 	ldr	r0, [pc, #32]	; 90f0 <BusRaider::BusRaider()+0x34>
    90cc:	e59f1020 	ldr	r1, [pc, #32]	; 90f4 <BusRaider::BusRaider()+0x38>
    90d0:	e59fc020 	ldr	ip, [pc, #32]	; 90f8 <BusRaider::BusRaider()+0x3c>
    90d4:	e59f3020 	ldr	r3, [pc, #32]	; 90fc <BusRaider::BusRaider()+0x40>
    90d8:	e59f2020 	ldr	r2, [pc, #32]	; 9100 <BusRaider::BusRaider()+0x44>
    90dc:	e5804000 	str	r4, [r0]
    90e0:	e581c000 	str	ip, [r1]
    90e4:	e1a00004 	mov	r0, r4
    90e8:	e5832000 	str	r2, [r3]
    90ec:	e8bd8010 	pop	{r4, pc}
    90f0:	00015e84 	.word	0x00015e84
    90f4:	00015e8c 	.word	0x00015e8c
    90f8:	00009088 	.word	0x00009088
    90fc:	00015e90 	.word	0x00015e90
    9100:	0000908c 	.word	0x0000908c

00009104 <BusRaider::~BusRaider()>:
    9104:	e92d4010 	push	{r4, lr}
    9108:	e3a02000 	mov	r2, #0
    910c:	e1a04000 	mov	r4, r0
    9110:	e59f300c 	ldr	r3, [pc, #12]	; 9124 <BusRaider::~BusRaider()+0x20>
    9114:	e5832000 	str	r2, [r3]
    9118:	eb0002bb 	bl	9c0c <CommandHandler::~CommandHandler()>
    911c:	e1a00004 	mov	r0, r4
    9120:	e8bd8010 	pop	{r4, pc}
    9124:	00015e84 	.word	0x00015e84

00009128 <BusRaider::putBytesToSerial(unsigned char const*, int)>:
    9128:	e12fff1e 	bx	lr

0000912c <BusRaider::doChangeMachine(char const*)>:
    912c:	e1a03001 	mov	r3, r1
    9130:	e59f2008 	ldr	r2, [pc, #8]	; 9140 <BusRaider::doChangeMachine(char const*)+0x14>
    9134:	e3a01003 	mov	r1, #3
    9138:	e59f0004 	ldr	r0, [pc, #4]	; 9144 <BusRaider::doChangeMachine(char const*)+0x18>
    913c:	ea000002 	b	914c <LogWrite(char const*, unsigned int, char const*, ...)>
    9140:	00013b74 	.word	0x00013b74
    9144:	00013b68 	.word	0x00013b68

00009148 <BusRaider::handleSerialRxBuffer(unsigned char const*, int)>:
    9148:	ea0002b0 	b	9c10 <CommandHandler::handleBuffer(unsigned char const*, int)>

0000914c <LogWrite(char const*, unsigned int, char const*, ...)>:
    914c:	e92d000c 	push	{r2, r3}
    9150:	e92d4030 	push	{r4, r5, lr}
    9154:	e24dd014 	sub	sp, sp, #20
    9158:	e1a05000 	mov	r5, r0
    915c:	e1a04001 	mov	r4, r1
    9160:	eb000e05 	bl	c97c <CLogger::Get()>
    9164:	e3500000 	cmp	r0, #0
    9168:	0a00000d 	beq	91a4 <LogWrite(char const*, unsigned int, char const*, ...)+0x58>
    916c:	e2441002 	sub	r1, r4, #2
    9170:	e3510002 	cmp	r1, #2
    9174:	83a04001 	movhi	r4, #1
    9178:	959f3034 	ldrls	r3, [pc, #52]	; 91b4 <LogWrite(char const*, unsigned int, char const*, ...)+0x68>
    917c:	97d34001 	ldrbls	r4, [r3, r1]
    9180:	e28d3024 	add	r3, sp, #36	; 0x24
    9184:	e58d300c 	str	r3, [sp, #12]
    9188:	eb000dfb 	bl	c97c <CLogger::Get()>
    918c:	e59d300c 	ldr	r3, [sp, #12]
    9190:	e1a02004 	mov	r2, r4
    9194:	e58d3000 	str	r3, [sp]
    9198:	e1a01005 	mov	r1, r5
    919c:	e59d3020 	ldr	r3, [sp, #32]
    91a0:	eb000f21 	bl	ce2c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
    91a4:	e28dd014 	add	sp, sp, #20
    91a8:	e8bd4030 	pop	{r4, r5, lr}
    91ac:	e28dd008 	add	sp, sp, #8
    91b0:	e12fff1e 	bx	lr
    91b4:	00013b8c 	.word	0x00013b8c

000091b8 <strlcat(char*, char const*, unsigned int)>:
    91b8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    91bc:	e1a04002 	mov	r4, r2
    91c0:	e1a07001 	mov	r7, r1
    91c4:	e1a06000 	mov	r6, r0
    91c8:	eb00206f 	bl	1138c <strlen>
    91cc:	e2442001 	sub	r2, r4, #1
    91d0:	e0524000 	subs	r4, r2, r0
    91d4:	e1a05000 	mov	r5, r0
    91d8:	0a00000a 	beq	9208 <strlcat(char*, char const*, unsigned int)+0x50>
    91dc:	e1a00007 	mov	r0, r7
    91e0:	eb002069 	bl	1138c <strlen>
    91e4:	e1540000 	cmp	r4, r0
    91e8:	21a04000 	movcs	r4, r0
    91ec:	e1a01007 	mov	r1, r7
    91f0:	e0860005 	add	r0, r6, r5
    91f4:	e1a02004 	mov	r2, r4
    91f8:	eb0021b5 	bl	118d4 <memcpy>
    91fc:	e3a03000 	mov	r3, #0
    9200:	e0855004 	add	r5, r5, r4
    9204:	e7c63005 	strb	r3, [r6, r5]
    9208:	e1a00005 	mov	r0, r5
    920c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00009210 <strlcpy(char*, char const*, unsigned int)>:
    9210:	e92d4070 	push	{r4, r5, r6, lr}
    9214:	e1a05000 	mov	r5, r0
    9218:	e1a04002 	mov	r4, r2
    921c:	e1a00001 	mov	r0, r1
    9220:	e1a06001 	mov	r6, r1
    9224:	eb002058 	bl	1138c <strlen>
    9228:	e2444001 	sub	r4, r4, #1
    922c:	e1540000 	cmp	r4, r0
    9230:	21a04000 	movcs	r4, r0
    9234:	e1a01006 	mov	r1, r6
    9238:	e1a02004 	mov	r2, r4
    923c:	e1a00005 	mov	r0, r5
    9240:	eb0021a3 	bl	118d4 <memcpy>
    9244:	e3a03000 	mov	r3, #0
    9248:	e1a00004 	mov	r0, r4
    924c:	e7c53004 	strb	r3, [r5, r4]
    9250:	e8bd8070 	pop	{r4, r5, r6, pc}

00009254 <jsonGetValueForKey(char const*, char const*, char*, int)>:
    9254:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    9258:	e1a07001 	mov	r7, r1
    925c:	e24ddf56 	sub	sp, sp, #344	; 0x158
    9260:	e1a08000 	mov	r8, r0
    9264:	e28d000c 	add	r0, sp, #12
    9268:	e1a0a002 	mov	sl, r2
    926c:	e1a09003 	mov	r9, r3
    9270:	eb00003d 	bl	936c <JSMNR_init(JSMNR_parser*)>
    9274:	e1a00007 	mov	r0, r7
    9278:	eb002043 	bl	1138c <strlen>
    927c:	e3a04014 	mov	r4, #20
    9280:	e1a02000 	mov	r2, r0
    9284:	e1a01007 	mov	r1, r7
    9288:	e28d000c 	add	r0, sp, #12
    928c:	e58d4000 	str	r4, [sp]
    9290:	e28d3018 	add	r3, sp, #24
    9294:	eb00005e 	bl	9414 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)>
    9298:	e2506000 	subs	r6, r0, #0
    929c:	ba000024 	blt	9334 <jsonGetValueForKey(char const*, char const*, char*, int)+0xe0>
    92a0:	128d4018 	addne	r4, sp, #24
    92a4:	13a05000 	movne	r5, #0
    92a8:	1a000003 	bne	92bc <jsonGetValueForKey(char const*, char const*, char*, int)+0x68>
    92ac:	ea00001d 	b	9328 <jsonGetValueForKey(char const*, char const*, char*, int)+0xd4>
    92b0:	e1560005 	cmp	r6, r5
    92b4:	e2844010 	add	r4, r4, #16
    92b8:	0a00001a 	beq	9328 <jsonGetValueForKey(char const*, char const*, char*, int)+0xd4>
    92bc:	e5d42000 	ldrb	r2, [r4]
    92c0:	e2855001 	add	r5, r5, #1
    92c4:	e3520003 	cmp	r2, #3
    92c8:	1afffff8 	bne	92b0 <jsonGetValueForKey(char const*, char const*, char*, int)+0x5c>
    92cc:	e1a00008 	mov	r0, r8
    92d0:	eb00202d 	bl	1138c <strlen>
    92d4:	e994000a 	ldmib	r4, {r1, r3}
    92d8:	e0433001 	sub	r3, r3, r1
    92dc:	e1500003 	cmp	r0, r3
    92e0:	1afffff2 	bne	92b0 <jsonGetValueForKey(char const*, char const*, char*, int)+0x5c>
    92e4:	e1a02000 	mov	r2, r0
    92e8:	e0870001 	add	r0, r7, r1
    92ec:	e1a01008 	mov	r1, r8
    92f0:	eb00207e 	bl	114f0 <strncmp>
    92f4:	e3500000 	cmp	r0, #0
    92f8:	1affffec 	bne	92b0 <jsonGetValueForKey(char const*, char const*, char*, int)+0x5c>
    92fc:	e5941014 	ldr	r1, [r4, #20]
    9300:	e5942018 	ldr	r2, [r4, #24]
    9304:	e0422001 	sub	r2, r2, r1
    9308:	e1520009 	cmp	r2, r9
    930c:	aa000005 	bge	9328 <jsonGetValueForKey(char const*, char const*, char*, int)+0xd4>
    9310:	e2822001 	add	r2, r2, #1
    9314:	e0871001 	add	r1, r7, r1
    9318:	e1a0000a 	mov	r0, sl
    931c:	ebffffbb 	bl	9210 <strlcpy(char*, char const*, unsigned int)>
    9320:	e3a00001 	mov	r0, #1
    9324:	ea000000 	b	932c <jsonGetValueForKey(char const*, char const*, char*, int)+0xd8>
    9328:	e3a00000 	mov	r0, #0
    932c:	e28ddf56 	add	sp, sp, #344	; 0x158
    9330:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    9334:	e1a00007 	mov	r0, r7
    9338:	eb002013 	bl	1138c <strlen>
    933c:	e58d4000 	str	r4, [sp]
    9340:	e58d0004 	str	r0, [sp, #4]
    9344:	e1a03006 	mov	r3, r6
    9348:	e59f2014 	ldr	r2, [pc, #20]	; 9364 <jsonGetValueForKey(char const*, char const*, char*, int)+0x110>
    934c:	e3a01004 	mov	r1, #4
    9350:	e59f0010 	ldr	r0, [pc, #16]	; 9368 <jsonGetValueForKey(char const*, char const*, char*, int)+0x114>
    9354:	ebffff7c 	bl	914c <LogWrite(char const*, unsigned int, char const*, ...)>
    9358:	e3a00000 	mov	r0, #0
    935c:	e28ddf56 	add	sp, sp, #344	; 0x158
    9360:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    9364:	00013b90 	.word	0x00013b90
    9368:	00013bbc 	.word	0x00013bbc

0000936c <JSMNR_init(JSMNR_parser*)>:
    936c:	e3a03000 	mov	r3, #0
    9370:	e3e02000 	mvn	r2, #0
    9374:	e5803000 	str	r3, [r0]
    9378:	e5802008 	str	r2, [r0, #8]
    937c:	e5803004 	str	r3, [r0, #4]
    9380:	e12fff1e 	bx	lr

00009384 <JSMNR_logLongStr(char const*, char const*, bool)>:
    9384:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    9388:	e2526000 	subs	r6, r2, #0
    938c:	e24dd05c 	sub	sp, sp, #92	; 0x5c
    9390:	e1a02000 	mov	r2, r0
    9394:	e1a05001 	mov	r5, r1
    9398:	0a000018 	beq	9400 <JSMNR_logLongStr(char const*, char const*, bool)+0x7c>
    939c:	e3a01003 	mov	r1, #3
    93a0:	e59f0068 	ldr	r0, [pc, #104]	; 9410 <JSMNR_logLongStr(char const*, char const*, bool)+0x8c>
    93a4:	ebffff68 	bl	914c <LogWrite(char const*, unsigned int, char const*, ...)>
    93a8:	e3a04000 	mov	r4, #0
    93ac:	e59f705c 	ldr	r7, [pc, #92]	; 9410 <JSMNR_logLongStr(char const*, char const*, bool)+0x8c>
    93b0:	ea00000b 	b	93e4 <JSMNR_logLongStr(char const*, char const*, bool)+0x60>
    93b4:	e3a02051 	mov	r2, #81	; 0x51
    93b8:	e28d0004 	add	r0, sp, #4
    93bc:	ebffff93 	bl	9210 <strlcpy(char*, char const*, unsigned int)>
    93c0:	e3a03000 	mov	r3, #0
    93c4:	e1560003 	cmp	r6, r3
    93c8:	e28d2004 	add	r2, sp, #4
    93cc:	13a01003 	movne	r1, #3
    93d0:	03a01004 	moveq	r1, #4
    93d4:	e1a00007 	mov	r0, r7
    93d8:	e5cd3054 	strb	r3, [sp, #84]	; 0x54
    93dc:	ebffff5a 	bl	914c <LogWrite(char const*, unsigned int, char const*, ...)>
    93e0:	e2844050 	add	r4, r4, #80	; 0x50
    93e4:	e1a00005 	mov	r0, r5
    93e8:	eb001fe7 	bl	1138c <strlen>
    93ec:	e1500004 	cmp	r0, r4
    93f0:	e0851004 	add	r1, r5, r4
    93f4:	8affffee 	bhi	93b4 <JSMNR_logLongStr(char const*, char const*, bool)+0x30>
    93f8:	e28dd05c 	add	sp, sp, #92	; 0x5c
    93fc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    9400:	e3a01004 	mov	r1, #4
    9404:	e59f0004 	ldr	r0, [pc, #4]	; 9410 <JSMNR_logLongStr(char const*, char const*, bool)+0x8c>
    9408:	ebffff4f 	bl	914c <LogWrite(char const*, unsigned int, char const*, ...)>
    940c:	eaffffe5 	b	93a8 <JSMNR_logLongStr(char const*, char const*, bool)+0x24>
    9410:	00013bc4 	.word	0x00013bc4

00009414 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)>:
    9414:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9418:	e5905000 	ldr	r5, [r0]
    941c:	e24dd01c 	sub	sp, sp, #28
    9420:	e1520005 	cmp	r2, r5
    9424:	e58d3010 	str	r3, [sp, #16]
    9428:	e5908004 	ldr	r8, [r0, #4]
    942c:	9a0000bc 	bls	9724 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x310>
    9430:	e1a07003 	mov	r7, r3
    9434:	e19130d5 	ldrsb	r3, [r1, r5]
    9438:	e081e005 	add	lr, r1, r5
    943c:	e3530000 	cmp	r3, #0
    9440:	0a0000b7 	beq	9724 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x310>
    9444:	e1a04000 	mov	r4, r0
    9448:	e58d0014 	str	r0, [sp, #20]
    944c:	e1a06001 	mov	r6, r1
    9450:	e59d0040 	ldr	r0, [sp, #64]	; 0x40
    9454:	ea000010 	b	949c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x88>
    9458:	e353005d 	cmp	r3, #93	; 0x5d
    945c:	0a0000ca 	beq	978c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x378>
    9460:	ca0000c5 	bgt	977c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x368>
    9464:	e353003a 	cmp	r3, #58	; 0x3a
    9468:	1a00013f 	bne	996c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x558>
    946c:	e5943004 	ldr	r3, [r4, #4]
    9470:	e594e000 	ldr	lr, [r4]
    9474:	e2433001 	sub	r3, r3, #1
    9478:	e5843008 	str	r3, [r4, #8]
    947c:	e28e5001 	add	r5, lr, #1
    9480:	e1550002 	cmp	r5, r2
    9484:	e5845000 	str	r5, [r4]
    9488:	2a0000a4 	bcs	9720 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x30c>
    948c:	e19630d5 	ldrsb	r3, [r6, r5]
    9490:	e086e005 	add	lr, r6, r5
    9494:	e3530000 	cmp	r3, #0
    9498:	0a0000a0 	beq	9720 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x30c>
    949c:	e353002c 	cmp	r3, #44	; 0x2c
    94a0:	0a00014f 	beq	99e4 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x5d0>
    94a4:	caffffeb 	bgt	9458 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x44>
    94a8:	e353000d 	cmp	r3, #13
    94ac:	0a000096 	beq	970c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x2f8>
    94b0:	da0000e4 	ble	9848 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x434>
    94b4:	e3530020 	cmp	r3, #32
    94b8:	0a000093 	beq	970c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x2f8>
    94bc:	e3530022 	cmp	r3, #34	; 0x22
    94c0:	1a0000e3 	bne	9854 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x440>
    94c4:	e2859001 	add	r9, r5, #1
    94c8:	e1520009 	cmp	r2, r9
    94cc:	e5849000 	str	r9, [r4]
    94d0:	e1a01009 	mov	r1, r9
    94d4:	9a0000d6 	bls	9834 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x420>
    94d8:	e19630d9 	ldrsb	r3, [r6, r9]
    94dc:	e3530000 	cmp	r3, #0
    94e0:	1a000008 	bne	9508 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0xf4>
    94e4:	ea0000d2 	b	9834 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x420>
    94e8:	e594e000 	ldr	lr, [r4]
    94ec:	e28e1001 	add	r1, lr, #1
    94f0:	e1520001 	cmp	r2, r1
    94f4:	e5841000 	str	r1, [r4]
    94f8:	9a0000cd 	bls	9834 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x420>
    94fc:	e19630d1 	ldrsb	r3, [r6, r1]
    9500:	e3530000 	cmp	r3, #0
    9504:	0a0000ca 	beq	9834 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x420>
    9508:	e3530022 	cmp	r3, #34	; 0x22
    950c:	0a000168 	beq	9ab4 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x6a0>
    9510:	e353005c 	cmp	r3, #92	; 0x5c
    9514:	1afffff3 	bne	94e8 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0xd4>
    9518:	e281e001 	add	lr, r1, #1
    951c:	e152000e 	cmp	r2, lr
    9520:	9afffff0 	bls	94e8 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0xd4>
    9524:	e584e000 	str	lr, [r4]
    9528:	e19630de 	ldrsb	r3, [r6, lr]
    952c:	e086a00e 	add	sl, r6, lr
    9530:	e243c022 	sub	ip, r3, #34	; 0x22
    9534:	e35c0053 	cmp	ip, #83	; 0x53
    9538:	979ff10c 	ldrls	pc, [pc, ip, lsl #2]
    953c:	ea00006d 	b	96f8 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x2e4>
    9540:	000094ec 	.word	0x000094ec
    9544:	000096f8 	.word	0x000096f8
    9548:	000096f8 	.word	0x000096f8
    954c:	000096f8 	.word	0x000096f8
    9550:	000096f8 	.word	0x000096f8
    9554:	000096f8 	.word	0x000096f8
    9558:	000096f8 	.word	0x000096f8
    955c:	000096f8 	.word	0x000096f8
    9560:	000096f8 	.word	0x000096f8
    9564:	000096f8 	.word	0x000096f8
    9568:	000096f8 	.word	0x000096f8
    956c:	000096f8 	.word	0x000096f8
    9570:	000096f8 	.word	0x000096f8
    9574:	000094ec 	.word	0x000094ec
    9578:	000096f8 	.word	0x000096f8
    957c:	000096f8 	.word	0x000096f8
    9580:	000096f8 	.word	0x000096f8
    9584:	000096f8 	.word	0x000096f8
    9588:	000096f8 	.word	0x000096f8
    958c:	000096f8 	.word	0x000096f8
    9590:	000096f8 	.word	0x000096f8
    9594:	000096f8 	.word	0x000096f8
    9598:	000096f8 	.word	0x000096f8
    959c:	000096f8 	.word	0x000096f8
    95a0:	000096f8 	.word	0x000096f8
    95a4:	000096f8 	.word	0x000096f8
    95a8:	000096f8 	.word	0x000096f8
    95ac:	000096f8 	.word	0x000096f8
    95b0:	000096f8 	.word	0x000096f8
    95b4:	000096f8 	.word	0x000096f8
    95b8:	000096f8 	.word	0x000096f8
    95bc:	000096f8 	.word	0x000096f8
    95c0:	000096f8 	.word	0x000096f8
    95c4:	000096f8 	.word	0x000096f8
    95c8:	000096f8 	.word	0x000096f8
    95cc:	000096f8 	.word	0x000096f8
    95d0:	000096f8 	.word	0x000096f8
    95d4:	000096f8 	.word	0x000096f8
    95d8:	000096f8 	.word	0x000096f8
    95dc:	000096f8 	.word	0x000096f8
    95e0:	000096f8 	.word	0x000096f8
    95e4:	000096f8 	.word	0x000096f8
    95e8:	000096f8 	.word	0x000096f8
    95ec:	000096f8 	.word	0x000096f8
    95f0:	000096f8 	.word	0x000096f8
    95f4:	000096f8 	.word	0x000096f8
    95f8:	000096f8 	.word	0x000096f8
    95fc:	000096f8 	.word	0x000096f8
    9600:	000096f8 	.word	0x000096f8
    9604:	000096f8 	.word	0x000096f8
    9608:	000096f8 	.word	0x000096f8
    960c:	000096f8 	.word	0x000096f8
    9610:	000096f8 	.word	0x000096f8
    9614:	000096f8 	.word	0x000096f8
    9618:	000096f8 	.word	0x000096f8
    961c:	000096f8 	.word	0x000096f8
    9620:	000096f8 	.word	0x000096f8
    9624:	000096f8 	.word	0x000096f8
    9628:	000094ec 	.word	0x000094ec
    962c:	000096f8 	.word	0x000096f8
    9630:	000096f8 	.word	0x000096f8
    9634:	000096f8 	.word	0x000096f8
    9638:	000096f8 	.word	0x000096f8
    963c:	000096f8 	.word	0x000096f8
    9640:	000094ec 	.word	0x000094ec
    9644:	000096f8 	.word	0x000096f8
    9648:	000096f8 	.word	0x000096f8
    964c:	000096f8 	.word	0x000096f8
    9650:	000094ec 	.word	0x000094ec
    9654:	000096f8 	.word	0x000096f8
    9658:	000096f8 	.word	0x000096f8
    965c:	000096f8 	.word	0x000096f8
    9660:	000096f8 	.word	0x000096f8
    9664:	000096f8 	.word	0x000096f8
    9668:	000096f8 	.word	0x000096f8
    966c:	000096f8 	.word	0x000096f8
    9670:	000094ec 	.word	0x000094ec
    9674:	000096f8 	.word	0x000096f8
    9678:	000096f8 	.word	0x000096f8
    967c:	000096f8 	.word	0x000096f8
    9680:	000094ec 	.word	0x000094ec
    9684:	000096f8 	.word	0x000096f8
    9688:	000094ec 	.word	0x000094ec
    968c:	00009690 	.word	0x00009690
    9690:	e281e002 	add	lr, r1, #2
    9694:	e584e000 	str	lr, [r4]
    9698:	e2811006 	add	r1, r1, #6
    969c:	e152000e 	cmp	r2, lr
    96a0:	0a00005e 	beq	9820 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x40c>
    96a4:	e1fa30d1 	ldrsb	r3, [sl, #1]!
    96a8:	e6efc073 	uxtb	ip, r3
    96ac:	e3ccb020 	bic	fp, ip, #32
    96b0:	e3530000 	cmp	r3, #0
    96b4:	e24cc030 	sub	ip, ip, #48	; 0x30
    96b8:	e24bb041 	sub	fp, fp, #65	; 0x41
    96bc:	0a000057 	beq	9820 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x40c>
    96c0:	e35c0009 	cmp	ip, #9
    96c4:	9a000051 	bls	9810 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x3fc>
    96c8:	e35b0005 	cmp	fp, #5
    96cc:	9a00004f 	bls	9810 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x3fc>
    96d0:	e59f247c 	ldr	r2, [pc, #1148]	; 9b54 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x740>
    96d4:	e58de000 	str	lr, [sp]
    96d8:	e3e08001 	mvn	r8, #1
    96dc:	e3a01004 	mov	r1, #4
    96e0:	e59f0470 	ldr	r0, [pc, #1136]	; 9b58 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x744>
    96e4:	ebfffe98 	bl	914c <LogWrite(char const*, unsigned int, char const*, ...)>
    96e8:	e5845000 	str	r5, [r4]
    96ec:	e1a00008 	mov	r0, r8
    96f0:	e28dd01c 	add	sp, sp, #28
    96f4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    96f8:	e58de000 	str	lr, [sp]
    96fc:	e59f2458 	ldr	r2, [pc, #1112]	; 9b5c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x748>
    9700:	eafffff4 	b	96d8 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x2c4>
    9704:	e3710001 	cmn	r1, #1
    9708:	0a000033 	beq	97dc <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x3c8>
    970c:	e594e000 	ldr	lr, [r4]
    9710:	e28e5001 	add	r5, lr, #1
    9714:	e1550002 	cmp	r5, r2
    9718:	e5845000 	str	r5, [r4]
    971c:	3affff5a 	bcc	948c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x78>
    9720:	e59d0014 	ldr	r0, [sp, #20]
    9724:	e59d1010 	ldr	r1, [sp, #16]
    9728:	e3510000 	cmp	r1, #0
    972c:	0affffee 	beq	96ec <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x2d8>
    9730:	e5903004 	ldr	r3, [r0, #4]
    9734:	e2532001 	subs	r2, r3, #1
    9738:	4affffeb 	bmi	96ec <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x2d8>
    973c:	e0813203 	add	r3, r1, r3, lsl #4
    9740:	ea000002 	b	9750 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x33c>
    9744:	e3720001 	cmn	r2, #1
    9748:	e2433010 	sub	r3, r3, #16
    974c:	0affffe6 	beq	96ec <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x2d8>
    9750:	e513100c 	ldr	r1, [r3, #-12]
    9754:	e2422001 	sub	r2, r2, #1
    9758:	e3710001 	cmn	r1, #1
    975c:	0afffff8 	beq	9744 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x330>
    9760:	e5131008 	ldr	r1, [r3, #-8]
    9764:	e3710001 	cmn	r1, #1
    9768:	1afffff5 	bne	9744 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x330>
    976c:	e3e08002 	mvn	r8, #2
    9770:	e1a00008 	mov	r0, r8
    9774:	e28dd01c 	add	sp, sp, #28
    9778:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    977c:	e353007b 	cmp	r3, #123	; 0x7b
    9780:	0a00007b 	beq	9974 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x560>
    9784:	e353007d 	cmp	r3, #125	; 0x7d
    9788:	1a000031 	bne	9854 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x440>
    978c:	e3570000 	cmp	r7, #0
    9790:	0affffdd 	beq	970c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x2f8>
    9794:	e594a004 	ldr	sl, [r4, #4]
    9798:	e353007d 	cmp	r3, #125	; 0x7d
    979c:	13a0b002 	movne	fp, #2
    97a0:	03a0b001 	moveq	fp, #1
    97a4:	e25a1001 	subs	r1, sl, #1
    97a8:	4affffd5 	bmi	9704 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x2f0>
    97ac:	e24ac21f 	sub	ip, sl, #-268435455	; 0xf0000001
    97b0:	e087c20c 	add	ip, r7, ip, lsl #4
    97b4:	e59c3004 	ldr	r3, [ip, #4]
    97b8:	e3730001 	cmn	r3, #1
    97bc:	0a000002 	beq	97cc <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x3b8>
    97c0:	e59c9008 	ldr	r9, [ip, #8]
    97c4:	e3790001 	cmn	r9, #1
    97c8:	0a0000a4 	beq	9a60 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x64c>
    97cc:	e2411001 	sub	r1, r1, #1
    97d0:	e3710001 	cmn	r1, #1
    97d4:	e24cc010 	sub	ip, ip, #16
    97d8:	1afffff5 	bne	97b4 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x3a0>
    97dc:	e1de30d0 	ldrsb	r3, [lr]
    97e0:	e59f2378 	ldr	r2, [pc, #888]	; 9b60 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x74c>
    97e4:	e88d0c08 	stm	sp, {r3, sl, fp}
    97e8:	e3a01003 	mov	r1, #3
    97ec:	e1a03005 	mov	r3, r5
    97f0:	e59f0360 	ldr	r0, [pc, #864]	; 9b58 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x744>
    97f4:	ebfffe54 	bl	914c <LogWrite(char const*, unsigned int, char const*, ...)>
    97f8:	e1a01006 	mov	r1, r6
    97fc:	e3a02001 	mov	r2, #1
    9800:	e59f035c 	ldr	r0, [pc, #860]	; 9b64 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x750>
    9804:	ebfffede 	bl	9384 <JSMNR_logLongStr(char const*, char const*, bool)>
    9808:	e3e08001 	mvn	r8, #1
    980c:	eaffffb6 	b	96ec <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x2d8>
    9810:	e28ee001 	add	lr, lr, #1
    9814:	e15e0001 	cmp	lr, r1
    9818:	e584e000 	str	lr, [r4]
    981c:	1affff9e 	bne	969c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x288>
    9820:	e24ee001 	sub	lr, lr, #1
    9824:	e28e1001 	add	r1, lr, #1
    9828:	e1520001 	cmp	r2, r1
    982c:	e5841000 	str	r1, [r4]
    9830:	8affff31 	bhi	94fc <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0xe8>
    9834:	e3e08002 	mvn	r8, #2
    9838:	e1a00008 	mov	r0, r8
    983c:	e5845000 	str	r5, [r4]
    9840:	e28dd01c 	add	sp, sp, #28
    9844:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9848:	e2433009 	sub	r3, r3, #9
    984c:	e3530001 	cmp	r3, #1
    9850:	9affffad 	bls	970c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x2f8>
    9854:	e5941000 	ldr	r1, [r4]
    9858:	e1520001 	cmp	r2, r1
    985c:	9a00001d 	bls	98d8 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x4c4>
    9860:	e19630d1 	ldrsb	r3, [r6, r1]
    9864:	e086e001 	add	lr, r6, r1
    9868:	e3530000 	cmp	r3, #0
    986c:	1a000011 	bne	98b8 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x4a4>
    9870:	ea000018 	b	98d8 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x4c4>
    9874:	e3530009 	cmp	r3, #9
    9878:	ba000003 	blt	988c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x478>
    987c:	e353000a 	cmp	r3, #10
    9880:	da000014 	ble	98d8 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x4c4>
    9884:	e353000d 	cmp	r3, #13
    9888:	0a000012 	beq	98d8 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x4c4>
    988c:	e243c020 	sub	ip, r3, #32
    9890:	e6efc07c 	uxtb	ip, ip
    9894:	e35c005e 	cmp	ip, #94	; 0x5e
    9898:	8a000030 	bhi	9960 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x54c>
    989c:	e2811001 	add	r1, r1, #1
    98a0:	e1520001 	cmp	r2, r1
    98a4:	e5841000 	str	r1, [r4]
    98a8:	0a00000a 	beq	98d8 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x4c4>
    98ac:	e1fe30d1 	ldrsb	r3, [lr, #1]!
    98b0:	e3530000 	cmp	r3, #0
    98b4:	0a000007 	beq	98d8 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x4c4>
    98b8:	e3530020 	cmp	r3, #32
    98bc:	0a000005 	beq	98d8 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x4c4>
    98c0:	daffffeb 	ble	9874 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x460>
    98c4:	e353003a 	cmp	r3, #58	; 0x3a
    98c8:	0a000002 	beq	98d8 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x4c4>
    98cc:	ca00001b 	bgt	9940 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x52c>
    98d0:	e353002c 	cmp	r3, #44	; 0x2c
    98d4:	1affffec 	bne	988c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x478>
    98d8:	e3570000 	cmp	r7, #0
    98dc:	0241e001 	subeq	lr, r1, #1
    98e0:	02888001 	addeq	r8, r8, #1
    98e4:	0afffee4 	beq	947c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x68>
    98e8:	e594c004 	ldr	ip, [r4, #4]
    98ec:	e150000c 	cmp	r0, ip
    98f0:	9a00008c 	bls	9b28 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x714>
    98f4:	e28ce001 	add	lr, ip, #1
    98f8:	e584e004 	str	lr, [r4, #4]
    98fc:	e3a0e000 	mov	lr, #0
    9900:	e087920c 	add	r9, r7, ip, lsl #4
    9904:	e5943008 	ldr	r3, [r4, #8]
    9908:	e589e00c 	str	lr, [r9, #12]
    990c:	e3a0e004 	mov	lr, #4
    9910:	e3730001 	cmn	r3, #1
    9914:	10873203 	addne	r3, r7, r3, lsl #4
    9918:	e7c7e20c 	strb	lr, [r7, ip, lsl #4]
    991c:	e5891008 	str	r1, [r9, #8]
    9920:	e241e001 	sub	lr, r1, #1
    9924:	1593100c 	ldrne	r1, [r3, #12]
    9928:	e5895004 	str	r5, [r9, #4]
    992c:	12811001 	addne	r1, r1, #1
    9930:	e584e000 	str	lr, [r4]
    9934:	e2888001 	add	r8, r8, #1
    9938:	1583100c 	strne	r1, [r3, #12]
    993c:	eafffece 	b	947c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x68>
    9940:	e353005d 	cmp	r3, #93	; 0x5d
    9944:	0affffe3 	beq	98d8 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x4c4>
    9948:	e353007d 	cmp	r3, #125	; 0x7d
    994c:	0affffe1 	beq	98d8 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x4c4>
    9950:	e243c020 	sub	ip, r3, #32
    9954:	e6efc07c 	uxtb	ip, ip
    9958:	e35c005e 	cmp	ip, #94	; 0x5e
    995c:	9affffce 	bls	989c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x488>
    9960:	e58d1000 	str	r1, [sp]
    9964:	e59f21fc 	ldr	r2, [pc, #508]	; 9b68 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x754>
    9968:	eaffff5a 	b	96d8 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x2c4>
    996c:	e353005b 	cmp	r3, #91	; 0x5b
    9970:	1affffb7 	bne	9854 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x440>
    9974:	e3570000 	cmp	r7, #0
    9978:	e2888001 	add	r8, r8, #1
    997c:	0affff62 	beq	970c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x2f8>
    9980:	e5941004 	ldr	r1, [r4, #4]
    9984:	e1500001 	cmp	r0, r1
    9988:	9a000064 	bls	9b20 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x70c>
    998c:	e2819001 	add	r9, r1, #1
    9990:	e5849004 	str	r9, [r4, #4]
    9994:	e3e09000 	mvn	r9, #0
    9998:	e087c201 	add	ip, r7, r1, lsl #4
    999c:	e594e008 	ldr	lr, [r4, #8]
    99a0:	e58c9004 	str	r9, [ip, #4]
    99a4:	e58c9008 	str	r9, [ip, #8]
    99a8:	e3a09000 	mov	r9, #0
    99ac:	e37e0001 	cmn	lr, #1
    99b0:	e58c900c 	str	r9, [ip, #12]
    99b4:	1087e20e 	addne	lr, r7, lr, lsl #4
    99b8:	159e900c 	ldrne	r9, [lr, #12]
    99bc:	12899001 	addne	r9, r9, #1
    99c0:	158e900c 	strne	r9, [lr, #12]
    99c4:	e353007b 	cmp	r3, #123	; 0x7b
    99c8:	13a03002 	movne	r3, #2
    99cc:	03a03001 	moveq	r3, #1
    99d0:	e594e000 	ldr	lr, [r4]
    99d4:	e7c73201 	strb	r3, [r7, r1, lsl #4]
    99d8:	e58c5004 	str	r5, [ip, #4]
    99dc:	e5841008 	str	r1, [r4, #8]
    99e0:	eafffea5 	b	947c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x68>
    99e4:	e3570000 	cmp	r7, #0
    99e8:	e594e000 	ldr	lr, [r4]
    99ec:	0afffea2 	beq	947c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x68>
    99f0:	e5943008 	ldr	r3, [r4, #8]
    99f4:	e3730001 	cmn	r3, #1
    99f8:	0afffe9f 	beq	947c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x68>
    99fc:	e7d73203 	ldrb	r3, [r7, r3, lsl #4]
    9a00:	e2433001 	sub	r3, r3, #1
    9a04:	e3530001 	cmp	r3, #1
    9a08:	9afffe9b 	bls	947c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x68>
    9a0c:	e5943004 	ldr	r3, [r4, #4]
    9a10:	e253c001 	subs	ip, r3, #1
    9a14:	4afffe98 	bmi	947c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x68>
    9a18:	e0873203 	add	r3, r7, r3, lsl #4
    9a1c:	ea000003 	b	9a30 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x61c>
    9a20:	e24cc001 	sub	ip, ip, #1
    9a24:	e37c0001 	cmn	ip, #1
    9a28:	e2433010 	sub	r3, r3, #16
    9a2c:	0afffe92 	beq	947c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x68>
    9a30:	e5531010 	ldrb	r1, [r3, #-16]
    9a34:	e2411001 	sub	r1, r1, #1
    9a38:	e3510001 	cmp	r1, #1
    9a3c:	8afffff7 	bhi	9a20 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x60c>
    9a40:	e513100c 	ldr	r1, [r3, #-12]
    9a44:	e3710001 	cmn	r1, #1
    9a48:	0afffff4 	beq	9a20 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x60c>
    9a4c:	e5131008 	ldr	r1, [r3, #-8]
    9a50:	e3710001 	cmn	r1, #1
    9a54:	1afffff1 	bne	9a20 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x60c>
    9a58:	e584c008 	str	ip, [r4, #8]
    9a5c:	eafffe86 	b	947c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x68>
    9a60:	e5dce000 	ldrb	lr, [ip]
    9a64:	e15e000b 	cmp	lr, fp
    9a68:	1a000031 	bne	9b34 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x720>
    9a6c:	e2855001 	add	r5, r5, #1
    9a70:	e5849008 	str	r9, [r4, #8]
    9a74:	e594e000 	ldr	lr, [r4]
    9a78:	e0873201 	add	r3, r7, r1, lsl #4
    9a7c:	e58c5008 	str	r5, [ip, #8]
    9a80:	ea000003 	b	9a94 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x680>
    9a84:	e2411001 	sub	r1, r1, #1
    9a88:	e3710001 	cmn	r1, #1
    9a8c:	e2433010 	sub	r3, r3, #16
    9a90:	0afffe79 	beq	947c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x68>
    9a94:	e593c004 	ldr	ip, [r3, #4]
    9a98:	e37c0001 	cmn	ip, #1
    9a9c:	0afffff8 	beq	9a84 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x670>
    9aa0:	e593c008 	ldr	ip, [r3, #8]
    9aa4:	e37c0001 	cmn	ip, #1
    9aa8:	1afffff5 	bne	9a84 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x670>
    9aac:	e5841008 	str	r1, [r4, #8]
    9ab0:	eafffe71 	b	947c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x68>
    9ab4:	e3570000 	cmp	r7, #0
    9ab8:	0a000015 	beq	9b14 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x700>
    9abc:	e594c004 	ldr	ip, [r4, #4]
    9ac0:	e150000c 	cmp	r0, ip
    9ac4:	9a000017 	bls	9b28 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x714>
    9ac8:	e3a05000 	mov	r5, #0
    9acc:	e28ce001 	add	lr, ip, #1
    9ad0:	e584e004 	str	lr, [r4, #4]
    9ad4:	e087e20c 	add	lr, r7, ip, lsl #4
    9ad8:	e5943008 	ldr	r3, [r4, #8]
    9adc:	e58e500c 	str	r5, [lr, #12]
    9ae0:	e3a05003 	mov	r5, #3
    9ae4:	e3730001 	cmn	r3, #1
    9ae8:	e7c7520c 	strb	r5, [r7, ip, lsl #4]
    9aec:	e2888001 	add	r8, r8, #1
    9af0:	e58e9004 	str	r9, [lr, #4]
    9af4:	e58e1008 	str	r1, [lr, #8]
    9af8:	0affff03 	beq	970c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x2f8>
    9afc:	e0873203 	add	r3, r7, r3, lsl #4
    9b00:	e593100c 	ldr	r1, [r3, #12]
    9b04:	e594e000 	ldr	lr, [r4]
    9b08:	e2811001 	add	r1, r1, #1
    9b0c:	e583100c 	str	r1, [r3, #12]
    9b10:	eafffe59 	b	947c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x68>
    9b14:	e2888001 	add	r8, r8, #1
    9b18:	e594e000 	ldr	lr, [r4]
    9b1c:	eafffe56 	b	947c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x68>
    9b20:	e3e08000 	mvn	r8, #0
    9b24:	eafffef0 	b	96ec <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x2d8>
    9b28:	e5845000 	str	r5, [r4]
    9b2c:	e3e08000 	mvn	r8, #0
    9b30:	eafffeed 	b	96ec <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x2d8>
    9b34:	e58db004 	str	fp, [sp, #4]
    9b38:	e58de000 	str	lr, [sp]
    9b3c:	e59f2028 	ldr	r2, [pc, #40]	; 9b6c <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x758>
    9b40:	e3a01003 	mov	r1, #3
    9b44:	e59f000c 	ldr	r0, [pc, #12]	; 9b58 <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x744>
    9b48:	ebfffd7f 	bl	914c <LogWrite(char const*, unsigned int, char const*, ...)>
    9b4c:	e3e08001 	mvn	r8, #1
    9b50:	eafffee5 	b	96ec <JSMNR_parse(JSMNR_parser*, char const*, unsigned int, jsmnrtok_t*, unsigned int)+0x2d8>
    9b54:	00013c44 	.word	0x00013c44
    9b58:	00013bc4 	.word	0x00013bc4
    9b5c:	00013c6c 	.word	0x00013c6c
    9b60:	00013bec 	.word	0x00013bec
    9b64:	00013c30 	.word	0x00013c30
    9b68:	00013c94 	.word	0x00013c94
    9b6c:	00013bcc 	.word	0x00013bcc

00009b70 <CommandHandler::static_hdlcPutCh(unsigned char)>:
    9b70:	e59f3038 	ldr	r3, [pc, #56]	; 9bb0 <CommandHandler::static_hdlcPutCh(unsigned char)+0x40>
    9b74:	e5932000 	ldr	r2, [r3]
    9b78:	e3520000 	cmp	r2, #0
    9b7c:	012fff1e 	bxeq	lr
    9b80:	e5932004 	ldr	r2, [r3, #4]
    9b84:	e3520000 	cmp	r2, #0
    9b88:	012fff1e 	bxeq	lr
    9b8c:	e1a03000 	mov	r3, r0
    9b90:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    9b94:	e24dd00c 	sub	sp, sp, #12
    9b98:	e28d0008 	add	r0, sp, #8
    9b9c:	e5603004 	strb	r3, [r0, #-4]!
    9ba0:	e3a01001 	mov	r1, #1
    9ba4:	e12fff32 	blx	r2
    9ba8:	e28dd00c 	add	sp, sp, #12
    9bac:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    9bb0:	00015e88 	.word	0x00015e88

00009bb4 <CommandHandler::CommandHandler()>:
    9bb4:	e92d4030 	push	{r4, r5, lr}
    9bb8:	e3a05000 	mov	r5, #0
    9bbc:	e1a04000 	mov	r4, r0
    9bc0:	e24dd00c 	sub	sp, sp, #12
    9bc4:	e58d5000 	str	r5, [sp]
    9bc8:	e3a03001 	mov	r3, #1
    9bcc:	e59f202c 	ldr	r2, [pc, #44]	; 9c00 <CommandHandler::CommandHandler()+0x4c>
    9bd0:	e59f102c 	ldr	r1, [pc, #44]	; 9c04 <CommandHandler::CommandHandler()+0x50>
    9bd4:	e2800008 	add	r0, r0, #8
    9bd8:	eb000080 	bl	9de0 <MiniHDLC::MiniHDLC(void (*)(unsigned char), void (*)(unsigned char const*, int), bool, bool)>
    9bdc:	e1a00004 	mov	r0, r4
    9be0:	e59f3020 	ldr	r3, [pc, #32]	; 9c08 <CommandHandler::CommandHandler()+0x54>
    9be4:	e5845004 	str	r5, [r4, #4]
    9be8:	e5835004 	str	r5, [r3, #4]
    9bec:	e5835008 	str	r5, [r3, #8]
    9bf0:	e5834000 	str	r4, [r3]
    9bf4:	e5845000 	str	r5, [r4]
    9bf8:	e28dd00c 	add	sp, sp, #12
    9bfc:	e8bd8030 	pop	{r4, r5, pc}
    9c00:	00009d2c 	.word	0x00009d2c
    9c04:	00009b70 	.word	0x00009b70
    9c08:	00015e88 	.word	0x00015e88

00009c0c <CommandHandler::~CommandHandler()>:
    9c0c:	e12fff1e 	bx	lr

00009c10 <CommandHandler::handleBuffer(unsigned char const*, int)>:
    9c10:	e2800008 	add	r0, r0, #8
    9c14:	ea0000cc 	b	9f4c <MiniHDLC::handleBuffer(unsigned char const*, int)>

00009c18 <CommandHandler::hdlcPutCh(unsigned char)>:
    9c18:	e59f3028 	ldr	r3, [pc, #40]	; 9c48 <CommandHandler::hdlcPutCh(unsigned char)+0x30>
    9c1c:	e5933004 	ldr	r3, [r3, #4]
    9c20:	e3530000 	cmp	r3, #0
    9c24:	012fff1e 	bxeq	lr
    9c28:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    9c2c:	e24dd00c 	sub	sp, sp, #12
    9c30:	e28d0008 	add	r0, sp, #8
    9c34:	e5601004 	strb	r1, [r0, #-4]!
    9c38:	e3a01001 	mov	r1, #1
    9c3c:	e12fff33 	blx	r3
    9c40:	e28dd00c 	add	sp, sp, #12
    9c44:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    9c48:	00015e88 	.word	0x00015e88

00009c4c <CommandHandler::processCommand(char const*, unsigned char const*, int)>:
    9c4c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    9c50:	e24dd024 	sub	sp, sp, #36	; 0x24
    9c54:	e1a0200d 	mov	r2, sp
    9c58:	e3a0301e 	mov	r3, #30
    9c5c:	e59f003c 	ldr	r0, [pc, #60]	; 9ca0 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x54>
    9c60:	ebfffd7b 	bl	9254 <jsonGetValueForKey(char const*, char const*, char*, int)>
    9c64:	e3500000 	cmp	r0, #0
    9c68:	1a000001 	bne	9c74 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x28>
    9c6c:	e28dd024 	add	sp, sp, #36	; 0x24
    9c70:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    9c74:	e1a0000d 	mov	r0, sp
    9c78:	e59f1024 	ldr	r1, [pc, #36]	; 9ca4 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x58>
    9c7c:	eb001de7 	bl	11420 <strcasecmp>
    9c80:	e3500000 	cmp	r0, #0
    9c84:	1afffff8 	bne	9c6c <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x20>
    9c88:	e59f2014 	ldr	r2, [pc, #20]	; 9ca4 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x58>
    9c8c:	e3a01003 	mov	r1, #3
    9c90:	e59f0010 	ldr	r0, [pc, #16]	; 9ca8 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x5c>
    9c94:	ebfffd2c 	bl	914c <LogWrite(char const*, unsigned int, char const*, ...)>
    9c98:	e28dd024 	add	sp, sp, #36	; 0x24
    9c9c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    9ca0:	00013ccc 	.word	0x00013ccc
    9ca4:	00013cd4 	.word	0x00013cd4
    9ca8:	00013cbc 	.word	0x00013cbc

00009cac <CommandHandler::hdlcFrameRx(unsigned char const*, int)>:
    9cac:	e92d4070 	push	{r4, r5, r6, lr}
    9cb0:	e1a04002 	mov	r4, r2
    9cb4:	e1c020d0 	ldrd	r2, [r0]
    9cb8:	e1a06001 	mov	r6, r1
    9cbc:	e24dd0d8 	sub	sp, sp, #216	; 0xd8
    9cc0:	e0843003 	add	r3, r4, r3
    9cc4:	e2822001 	add	r2, r2, #1
    9cc8:	e1c020f0 	strd	r2, [r0]
    9ccc:	e1a05000 	mov	r5, r0
    9cd0:	e58d2000 	str	r2, [sp]
    9cd4:	e3a01003 	mov	r1, #3
    9cd8:	e59f2044 	ldr	r2, [pc, #68]	; 9d24 <CommandHandler::hdlcFrameRx(unsigned char const*, int)+0x78>
    9cdc:	e59f0044 	ldr	r0, [pc, #68]	; 9d28 <CommandHandler::hdlcFrameRx(unsigned char const*, int)+0x7c>
    9ce0:	ebfffd19 	bl	914c <LogWrite(char const*, unsigned int, char const*, ...)>
    9ce4:	e1a01006 	mov	r1, r6
    9ce8:	e3a020c8 	mov	r2, #200	; 0xc8
    9cec:	e28d000c 	add	r0, sp, #12
    9cf0:	ebfffd46 	bl	9210 <strlcpy(char*, char const*, unsigned int)>
    9cf4:	e28d000c 	add	r0, sp, #12
    9cf8:	eb001da3 	bl	1138c <strlen>
    9cfc:	e0443000 	sub	r3, r4, r0
    9d00:	e2802001 	add	r2, r0, #1
    9d04:	e2433001 	sub	r3, r3, #1
    9d08:	e0862002 	add	r2, r6, r2
    9d0c:	e1c33fc3 	bic	r3, r3, r3, asr #31
    9d10:	e28d100c 	add	r1, sp, #12
    9d14:	e1a00005 	mov	r0, r5
    9d18:	ebffffcb 	bl	9c4c <CommandHandler::processCommand(char const*, unsigned char const*, int)>
    9d1c:	e28dd0d8 	add	sp, sp, #216	; 0xd8
    9d20:	e8bd8070 	pop	{r4, r5, r6, pc}
    9d24:	00013cdc 	.word	0x00013cdc
    9d28:	00013cbc 	.word	0x00013cbc

00009d2c <CommandHandler::static_hdlcFrameRx(unsigned char const*, int)>:
    9d2c:	e59f3018 	ldr	r3, [pc, #24]	; 9d4c <CommandHandler::static_hdlcFrameRx(unsigned char const*, int)+0x20>
    9d30:	e5933000 	ldr	r3, [r3]
    9d34:	e3530000 	cmp	r3, #0
    9d38:	012fff1e 	bxeq	lr
    9d3c:	e1a02001 	mov	r2, r1
    9d40:	e1a01000 	mov	r1, r0
    9d44:	e1a00003 	mov	r0, r3
    9d48:	eaffffd7 	b	9cac <CommandHandler::hdlcFrameRx(unsigned char const*, int)>
    9d4c:	00015e88 	.word	0x00015e88

00009d50 <CommandHandler::service()>:
    9d50:	e12fff1e 	bx	lr

00009d54 <MiniHDLC::handleChar(unsigned char) [clone .part.0]>:
    9d54:	e92d4010 	push	{r4, lr}
    9d58:	e5903004 	ldr	r3, [r0, #4]
    9d5c:	e1a04000 	mov	r4, r0
    9d60:	e3530001 	cmp	r3, #1
    9d64:	da00000d 	ble	9da0 <MiniHDLC::handleChar(unsigned char) [clone .part.0]+0x4c>
    9d68:	e5d02001 	ldrb	r2, [r0, #1]
    9d6c:	e2431002 	sub	r1, r3, #2
    9d70:	e0803003 	add	r3, r0, r3
    9d74:	e0800001 	add	r0, r0, r1
    9d78:	e3520000 	cmp	r2, #0
    9d7c:	e5d33017 	ldrb	r3, [r3, #23]
    9d80:	e5d02018 	ldrb	r2, [r0, #24]
    9d84:	01823403 	orreq	r3, r2, r3, lsl #8
    9d88:	11833402 	orrne	r3, r3, r2, lsl #8
    9d8c:	e6bf3073 	sxth	r3, r3
    9d90:	e1d420b8 	ldrh	r2, [r4, #8]
    9d94:	e6ff3073 	uxth	r3, r3
    9d98:	e1520003 	cmp	r2, r3
    9d9c:	0a000005 	beq	9db8 <MiniHDLC::handleChar(unsigned char) [clone .part.0]+0x64>
    9da0:	e3a03000 	mov	r3, #0
    9da4:	e3e02000 	mvn	r2, #0
    9da8:	e5c4300a 	strb	r3, [r4, #10]
    9dac:	e5843004 	str	r3, [r4, #4]
    9db0:	e1c420b8 	strh	r2, [r4, #8]
    9db4:	e8bd8010 	pop	{r4, pc}
    9db8:	e3a02000 	mov	r2, #0
    9dbc:	e59f3018 	ldr	r3, [pc, #24]	; 9ddc <MiniHDLC::handleChar(unsigned char) [clone .part.0]+0x88>
    9dc0:	e5c02018 	strb	r2, [r0, #24]
    9dc4:	e5933000 	ldr	r3, [r3]
    9dc8:	e1530002 	cmp	r3, r2
    9dcc:	0afffff3 	beq	9da0 <MiniHDLC::handleChar(unsigned char) [clone .part.0]+0x4c>
    9dd0:	e2840018 	add	r0, r4, #24
    9dd4:	e12fff33 	blx	r3
    9dd8:	eafffff0 	b	9da0 <MiniHDLC::handleChar(unsigned char) [clone .part.0]+0x4c>
    9ddc:	00015e94 	.word	0x00015e94

00009de0 <MiniHDLC::MiniHDLC(void (*)(unsigned char), void (*)(unsigned char const*, int), bool, bool)>:
    9de0:	e92d4030 	push	{r4, r5, lr}
    9de4:	e3a0e000 	mov	lr, #0
    9de8:	e3e05000 	mvn	r5, #0
    9dec:	e59f4030 	ldr	r4, [pc, #48]	; 9e24 <MiniHDLC::MiniHDLC(void (*)(unsigned char), void (*)(unsigned char const*, int), bool, bool)+0x44>
    9df0:	e1c050b8 	strh	r5, [r0, #8]
    9df4:	e5842000 	str	r2, [r4]
    9df8:	e5dd200c 	ldrb	r2, [sp, #12]
    9dfc:	e5841004 	str	r1, [r4, #4]
    9e00:	e580e004 	str	lr, [r0, #4]
    9e04:	e5c03001 	strb	r3, [r0, #1]
    9e08:	e5c02000 	strb	r2, [r0]
    9e0c:	e5c0e00a 	strb	lr, [r0, #10]
    9e10:	e5c0e00b 	strb	lr, [r0, #11]
    9e14:	e5c0e00c 	strb	lr, [r0, #12]
    9e18:	e580e010 	str	lr, [r0, #16]
    9e1c:	e580e014 	str	lr, [r0, #20]
    9e20:	e8bd8030 	pop	{r4, r5, pc}
    9e24:	00015e94 	.word	0x00015e94

00009e28 <MiniHDLC::handleChar(unsigned char)>:
    9e28:	e351007e 	cmp	r1, #126	; 0x7e
    9e2c:	e1a03000 	mov	r3, r0
    9e30:	0a00001e 	beq	9eb0 <MiniHDLC::handleChar(unsigned char)+0x88>
    9e34:	e5d0200a 	ldrb	r2, [r0, #10]
    9e38:	e3520000 	cmp	r2, #0
    9e3c:	1a000017 	bne	9ea0 <MiniHDLC::handleChar(unsigned char)+0x78>
    9e40:	e351007d 	cmp	r1, #125	; 0x7d
    9e44:	0a00001a 	beq	9eb4 <MiniHDLC::handleChar(unsigned char)+0x8c>
    9e48:	e5932004 	ldr	r2, [r3, #4]
    9e4c:	e0830002 	add	r0, r3, r2
    9e50:	e3520001 	cmp	r2, #1
    9e54:	e5c01018 	strb	r1, [r0, #24]
    9e58:	da000007 	ble	9e7c <MiniHDLC::handleChar(unsigned char)+0x54>
    9e5c:	e5d01016 	ldrb	r1, [r0, #22]
    9e60:	e1d300b8 	ldrh	r0, [r3, #8]
    9e64:	e59fc054 	ldr	ip, [pc, #84]	; 9ec0 <MiniHDLC::handleChar(unsigned char)+0x98>
    9e68:	e0211420 	eor	r1, r1, r0, lsr #8
    9e6c:	e1a01081 	lsl	r1, r1, #1
    9e70:	e19c10b1 	ldrh	r1, [ip, r1]
    9e74:	e0211400 	eor	r1, r1, r0, lsl #8
    9e78:	e1c310b8 	strh	r1, [r3, #8]
    9e7c:	e59f1040 	ldr	r1, [pc, #64]	; 9ec4 <MiniHDLC::handleChar(unsigned char)+0x9c>
    9e80:	e2822001 	add	r2, r2, #1
    9e84:	e1520001 	cmp	r2, r1
    9e88:	03a01000 	moveq	r1, #0
    9e8c:	03e02000 	mvneq	r2, #0
    9e90:	15832004 	strne	r2, [r3, #4]
    9e94:	05831004 	streq	r1, [r3, #4]
    9e98:	01c320b8 	strheq	r2, [r3, #8]
    9e9c:	e12fff1e 	bx	lr
    9ea0:	e3a02000 	mov	r2, #0
    9ea4:	e2211020 	eor	r1, r1, #32
    9ea8:	e5c0200a 	strb	r2, [r0, #10]
    9eac:	eaffffe5 	b	9e48 <MiniHDLC::handleChar(unsigned char)+0x20>
    9eb0:	eaffffa7 	b	9d54 <MiniHDLC::handleChar(unsigned char) [clone .part.0]>
    9eb4:	e3a02001 	mov	r2, #1
    9eb8:	e5c0200a 	strb	r2, [r0, #10]
    9ebc:	e12fff1e 	bx	lr
    9ec0:	00013cf4 	.word	0x00013cf4
    9ec4:	00001388 	.word	0x00001388

00009ec8 <MiniHDLC::handleBit(unsigned char)>:
    9ec8:	e3510000 	cmp	r1, #0
    9ecc:	13e0107f 	mvnne	r1, #127	; 0x7f
    9ed0:	e5d0300b 	ldrb	r3, [r0, #11]
    9ed4:	e92d4010 	push	{r4, lr}
    9ed8:	e1a030a3 	lsr	r3, r3, #1
    9edc:	11833001 	orrne	r3, r3, r1
    9ee0:	e6ef3073 	uxtb	r3, r3
    9ee4:	e353007e 	cmp	r3, #126	; 0x7e
    9ee8:	e1a04000 	mov	r4, r0
    9eec:	e5c0300b 	strb	r3, [r0, #11]
    9ef0:	0a000010 	beq	9f38 <MiniHDLC::handleBit(unsigned char)+0x70>
    9ef4:	e20330fc 	and	r3, r3, #252	; 0xfc
    9ef8:	e353007c 	cmp	r3, #124	; 0x7c
    9efc:	08bd8010 	popeq	{r4, pc}
    9f00:	e5d0200c 	ldrb	r2, [r0, #12]
    9f04:	e5903010 	ldr	r3, [r0, #16]
    9f08:	e18110a2 	orr	r1, r1, r2, lsr #1
    9f0c:	e2833001 	add	r3, r3, #1
    9f10:	e6ef1071 	uxtb	r1, r1
    9f14:	e3530008 	cmp	r3, #8
    9f18:	e5c0100c 	strb	r1, [r0, #12]
    9f1c:	e5803010 	str	r3, [r0, #16]
    9f20:	18bd8010 	popne	{r4, pc}
    9f24:	ebffffbf 	bl	9e28 <MiniHDLC::handleChar(unsigned char)>
    9f28:	e3a03000 	mov	r3, #0
    9f2c:	e5c4300c 	strb	r3, [r4, #12]
    9f30:	e5843010 	str	r3, [r4, #16]
    9f34:	e8bd8010 	pop	{r4, pc}
    9f38:	ebffff85 	bl	9d54 <MiniHDLC::handleChar(unsigned char) [clone .part.0]>
    9f3c:	e3a03000 	mov	r3, #0
    9f40:	e5c4300c 	strb	r3, [r4, #12]
    9f44:	e5843010 	str	r3, [r4, #16]
    9f48:	e8bd8010 	pop	{r4, pc}

00009f4c <MiniHDLC::handleBuffer(unsigned char const*, int)>:
    9f4c:	e92d4070 	push	{r4, r5, r6, lr}
    9f50:	e2525000 	subs	r5, r2, #0
    9f54:	d8bd8070 	pople	{r4, r5, r6, pc}
    9f58:	e1a06000 	mov	r6, r0
    9f5c:	e2414001 	sub	r4, r1, #1
    9f60:	e0845005 	add	r5, r4, r5
    9f64:	e5f41001 	ldrb	r1, [r4, #1]!
    9f68:	e1a00006 	mov	r0, r6
    9f6c:	ebffffad 	bl	9e28 <MiniHDLC::handleChar(unsigned char)>
    9f70:	e1540005 	cmp	r4, r5
    9f74:	1afffffa 	bne	9f64 <MiniHDLC::handleBuffer(unsigned char const*, int)+0x18>
    9f78:	e8bd8070 	pop	{r4, r5, r6, pc}

00009f7c <MiniHDLC::crcUpdateCCITT(unsigned short, unsigned char)>:
    9f7c:	e59f3014 	ldr	r3, [pc, #20]	; 9f98 <MiniHDLC::crcUpdateCCITT(unsigned short, unsigned char)+0x1c>
    9f80:	e0222421 	eor	r2, r2, r1, lsr #8
    9f84:	e1a02082 	lsl	r2, r2, #1
    9f88:	e19300b2 	ldrh	r0, [r3, r2]
    9f8c:	e0200401 	eor	r0, r0, r1, lsl #8
    9f90:	e6ff0070 	uxth	r0, r0
    9f94:	e12fff1e 	bx	lr
    9f98:	00013cf4 	.word	0x00013cf4

00009f9c <MiniHDLC::sendChar(unsigned char)>:
    9f9c:	e92d4070 	push	{r4, r5, r6, lr}
    9fa0:	e5d03000 	ldrb	r3, [r0]
    9fa4:	e59f6048 	ldr	r6, [pc, #72]	; 9ff4 <MiniHDLC::sendChar(unsigned char)+0x58>
    9fa8:	e3530000 	cmp	r3, #0
    9fac:	e1a04001 	mov	r4, r1
    9fb0:	e5963004 	ldr	r3, [r6, #4]
    9fb4:	0a000009 	beq	9fe0 <MiniHDLC::sendChar(unsigned char)+0x44>
    9fb8:	e3a05008 	mov	r5, #8
    9fbc:	e3530000 	cmp	r3, #0
    9fc0:	e2040001 	and	r0, r4, #1
    9fc4:	0a000000 	beq	9fcc <MiniHDLC::sendChar(unsigned char)+0x30>
    9fc8:	e12fff33 	blx	r3
    9fcc:	e2555001 	subs	r5, r5, #1
    9fd0:	e1a040a4 	lsr	r4, r4, #1
    9fd4:	08bd8070 	popeq	{r4, r5, r6, pc}
    9fd8:	e5963004 	ldr	r3, [r6, #4]
    9fdc:	eafffff6 	b	9fbc <MiniHDLC::sendChar(unsigned char)+0x20>
    9fe0:	e3530000 	cmp	r3, #0
    9fe4:	08bd8070 	popeq	{r4, r5, r6, pc}
    9fe8:	e1a00001 	mov	r0, r1
    9fec:	e8bd4070 	pop	{r4, r5, r6, lr}
    9ff0:	e12fff13 	bx	r3
    9ff4:	00015e94 	.word	0x00015e94

00009ff8 <MiniHDLC::sendCharWithStuffing(unsigned char)>:
    9ff8:	e5d03000 	ldrb	r3, [r0]
    9ffc:	e3530000 	cmp	r3, #0
    a000:	0a00001f 	beq	a084 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x8c>
    a004:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    a008:	e1a09000 	mov	r9, r0
    a00c:	e1a04001 	mov	r4, r1
    a010:	e3a05008 	mov	r5, #8
    a014:	e3a08000 	mov	r8, #0
    a018:	e59f7068 	ldr	r7, [pc, #104]	; a088 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x90>
    a01c:	ea000007 	b	a040 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x48>
    a020:	e5993014 	ldr	r3, [r9, #20]
    a024:	e2833001 	add	r3, r3, #1
    a028:	e3530005 	cmp	r3, #5
    a02c:	e5893014 	str	r3, [r9, #20]
    a030:	0a00000c 	beq	a068 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x70>
    a034:	e2555001 	subs	r5, r5, #1
    a038:	e1a040a4 	lsr	r4, r4, #1
    a03c:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    a040:	e5973004 	ldr	r3, [r7, #4]
    a044:	e2046001 	and	r6, r4, #1
    a048:	e3530000 	cmp	r3, #0
    a04c:	0a000001 	beq	a058 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x60>
    a050:	e1a00006 	mov	r0, r6
    a054:	e12fff33 	blx	r3
    a058:	e3560000 	cmp	r6, #0
    a05c:	1affffef 	bne	a020 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x28>
    a060:	e5898014 	str	r8, [r9, #20]
    a064:	eafffff2 	b	a034 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x3c>
    a068:	e5973004 	ldr	r3, [r7, #4]
    a06c:	e3530000 	cmp	r3, #0
    a070:	0afffffa 	beq	a060 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x68>
    a074:	e3a00000 	mov	r0, #0
    a078:	e12fff33 	blx	r3
    a07c:	e5898014 	str	r8, [r9, #20]
    a080:	eaffffeb 	b	a034 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x3c>
    a084:	eaffffc4 	b	9f9c <MiniHDLC::sendChar(unsigned char)>
    a088:	00015e94 	.word	0x00015e94

0000a08c <MiniHDLC::sendEscaped(unsigned char)>:
    a08c:	e241307d 	sub	r3, r1, #125	; 0x7d
    a090:	e3530001 	cmp	r3, #1
    a094:	e92d4070 	push	{r4, r5, r6, lr}
    a098:	e1a04001 	mov	r4, r1
    a09c:	e1a05000 	mov	r5, r0
    a0a0:	9a000003 	bls	a0b4 <MiniHDLC::sendEscaped(unsigned char)+0x28>
    a0a4:	e1a01004 	mov	r1, r4
    a0a8:	e1a00005 	mov	r0, r5
    a0ac:	e8bd4070 	pop	{r4, r5, r6, lr}
    a0b0:	eaffffd0 	b	9ff8 <MiniHDLC::sendCharWithStuffing(unsigned char)>
    a0b4:	e3a0107d 	mov	r1, #125	; 0x7d
    a0b8:	e2244020 	eor	r4, r4, #32
    a0bc:	ebffffcd 	bl	9ff8 <MiniHDLC::sendCharWithStuffing(unsigned char)>
    a0c0:	e1a01004 	mov	r1, r4
    a0c4:	e1a00005 	mov	r0, r5
    a0c8:	e8bd4070 	pop	{r4, r5, r6, lr}
    a0cc:	eaffffc9 	b	9ff8 <MiniHDLC::sendCharWithStuffing(unsigned char)>

0000a0d0 <MiniHDLC::sendFrame(unsigned char const*, int)>:
    a0d0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a0d4:	e1a06002 	mov	r6, r2
    a0d8:	e1a08001 	mov	r8, r1
    a0dc:	e3a0107e 	mov	r1, #126	; 0x7e
    a0e0:	e1a05000 	mov	r5, r0
    a0e4:	ebffffac 	bl	9f9c <MiniHDLC::sendChar(unsigned char)>
    a0e8:	e3560000 	cmp	r6, #0
    a0ec:	0a00001d 	beq	a168 <MiniHDLC::sendFrame(unsigned char const*, int)+0x98>
    a0f0:	e59fc07c 	ldr	ip, [pc, #124]	; a174 <MiniHDLC::sendFrame(unsigned char const*, int)+0xa4>
    a0f4:	e59f707c 	ldr	r7, [pc, #124]	; a178 <MiniHDLC::sendFrame(unsigned char const*, int)+0xa8>
    a0f8:	e0886006 	add	r6, r8, r6
    a0fc:	e4d81001 	ldrb	r1, [r8], #1
    a100:	e1a00005 	mov	r0, r5
    a104:	e021342c 	eor	r3, r1, ip, lsr #8
    a108:	e1a03083 	lsl	r3, r3, #1
    a10c:	e19740b3 	ldrh	r4, [r7, r3]
    a110:	e024440c 	eor	r4, r4, ip, lsl #8
    a114:	e6bf4074 	sxth	r4, r4
    a118:	ebffffdb 	bl	a08c <MiniHDLC::sendEscaped(unsigned char)>
    a11c:	e1580006 	cmp	r8, r6
    a120:	e6ffc074 	uxth	ip, r4
    a124:	1afffff4 	bne	a0fc <MiniHDLC::sendFrame(unsigned char const*, int)+0x2c>
    a128:	e6ef1074 	uxtb	r1, r4
    a12c:	e1a0c42c 	lsr	ip, ip, #8
    a130:	e5d53001 	ldrb	r3, [r5, #1]
    a134:	e1a00005 	mov	r0, r5
    a138:	e3530000 	cmp	r3, #0
    a13c:	11a06001 	movne	r6, r1
    a140:	01a0600c 	moveq	r6, ip
    a144:	11a0100c 	movne	r1, ip
    a148:	ebffffcf 	bl	a08c <MiniHDLC::sendEscaped(unsigned char)>
    a14c:	e1a01006 	mov	r1, r6
    a150:	e1a00005 	mov	r0, r5
    a154:	ebffffcc 	bl	a08c <MiniHDLC::sendEscaped(unsigned char)>
    a158:	e1a00005 	mov	r0, r5
    a15c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    a160:	e3a0107e 	mov	r1, #126	; 0x7e
    a164:	eaffff8c 	b	9f9c <MiniHDLC::sendChar(unsigned char)>
    a168:	e3a0c0ff 	mov	ip, #255	; 0xff
    a16c:	e1a0100c 	mov	r1, ip
    a170:	eaffffee 	b	a130 <MiniHDLC::sendFrame(unsigned char const*, int)+0x60>
    a174:	0000ffff 	.word	0x0000ffff
    a178:	00013cf4 	.word	0x00013cf4

0000a17c <__udivsi3>:
    a17c:	e2512001 	subs	r2, r1, #1
    a180:	012fff1e 	bxeq	lr
    a184:	3a000036 	bcc	a264 <__udivsi3+0xe8>
    a188:	e1500001 	cmp	r0, r1
    a18c:	9a000022 	bls	a21c <__udivsi3+0xa0>
    a190:	e1110002 	tst	r1, r2
    a194:	0a000023 	beq	a228 <__udivsi3+0xac>
    a198:	e311020e 	tst	r1, #-536870912	; 0xe0000000
    a19c:	01a01181 	lsleq	r1, r1, #3
    a1a0:	03a03008 	moveq	r3, #8
    a1a4:	13a03001 	movne	r3, #1
    a1a8:	e3510201 	cmp	r1, #268435456	; 0x10000000
    a1ac:	31510000 	cmpcc	r1, r0
    a1b0:	31a01201 	lslcc	r1, r1, #4
    a1b4:	31a03203 	lslcc	r3, r3, #4
    a1b8:	3afffffa 	bcc	a1a8 <__udivsi3+0x2c>
    a1bc:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    a1c0:	31510000 	cmpcc	r1, r0
    a1c4:	31a01081 	lslcc	r1, r1, #1
    a1c8:	31a03083 	lslcc	r3, r3, #1
    a1cc:	3afffffa 	bcc	a1bc <__udivsi3+0x40>
    a1d0:	e3a02000 	mov	r2, #0
    a1d4:	e1500001 	cmp	r0, r1
    a1d8:	20400001 	subcs	r0, r0, r1
    a1dc:	21822003 	orrcs	r2, r2, r3
    a1e0:	e15000a1 	cmp	r0, r1, lsr #1
    a1e4:	204000a1 	subcs	r0, r0, r1, lsr #1
    a1e8:	218220a3 	orrcs	r2, r2, r3, lsr #1
    a1ec:	e1500121 	cmp	r0, r1, lsr #2
    a1f0:	20400121 	subcs	r0, r0, r1, lsr #2
    a1f4:	21822123 	orrcs	r2, r2, r3, lsr #2
    a1f8:	e15001a1 	cmp	r0, r1, lsr #3
    a1fc:	204001a1 	subcs	r0, r0, r1, lsr #3
    a200:	218221a3 	orrcs	r2, r2, r3, lsr #3
    a204:	e3500000 	cmp	r0, #0
    a208:	11b03223 	lsrsne	r3, r3, #4
    a20c:	11a01221 	lsrne	r1, r1, #4
    a210:	1affffef 	bne	a1d4 <__udivsi3+0x58>
    a214:	e1a00002 	mov	r0, r2
    a218:	e12fff1e 	bx	lr
    a21c:	03a00001 	moveq	r0, #1
    a220:	13a00000 	movne	r0, #0
    a224:	e12fff1e 	bx	lr
    a228:	e3510801 	cmp	r1, #65536	; 0x10000
    a22c:	21a01821 	lsrcs	r1, r1, #16
    a230:	23a02010 	movcs	r2, #16
    a234:	33a02000 	movcc	r2, #0
    a238:	e3510c01 	cmp	r1, #256	; 0x100
    a23c:	21a01421 	lsrcs	r1, r1, #8
    a240:	22822008 	addcs	r2, r2, #8
    a244:	e3510010 	cmp	r1, #16
    a248:	21a01221 	lsrcs	r1, r1, #4
    a24c:	22822004 	addcs	r2, r2, #4
    a250:	e3510004 	cmp	r1, #4
    a254:	82822003 	addhi	r2, r2, #3
    a258:	908220a1 	addls	r2, r2, r1, lsr #1
    a25c:	e1a00230 	lsr	r0, r0, r2
    a260:	e12fff1e 	bx	lr
    a264:	e3500000 	cmp	r0, #0
    a268:	13e00000 	mvnne	r0, #0
    a26c:	ea000007 	b	a290 <__aeabi_idiv0>

0000a270 <__aeabi_uidivmod>:
    a270:	e3510000 	cmp	r1, #0
    a274:	0afffffa 	beq	a264 <__udivsi3+0xe8>
    a278:	e92d4003 	push	{r0, r1, lr}
    a27c:	ebffffbe 	bl	a17c <__udivsi3>
    a280:	e8bd4006 	pop	{r1, r2, lr}
    a284:	e0030092 	mul	r3, r2, r0
    a288:	e0411003 	sub	r1, r1, r3
    a28c:	e12fff1e 	bx	lr

0000a290 <__aeabi_idiv0>:
    a290:	e12fff1e 	bx	lr

0000a294 <CActLED::~CActLED()>:
    a294:	e3a02000 	mov	r2, #0
    a298:	e59f3004 	ldr	r3, [pc, #4]	; a2a4 <CActLED::~CActLED()+0x10>
    a29c:	e5832000 	str	r2, [r3]
    a2a0:	e12fff1e 	bx	lr
    a2a4:	00015e9c 	.word	0x00015e9c

0000a2a8 <CActLED::On()>:
    a2a8:	e5903000 	ldr	r3, [r0]
    a2ac:	e3530000 	cmp	r3, #0
    a2b0:	0a000002 	beq	a2c0 <CActLED::On()+0x18>
    a2b4:	e5d01008 	ldrb	r1, [r0, #8]
    a2b8:	e1a00003 	mov	r0, r3
    a2bc:	ea00038f 	b	b100 <CGPIOPin::Write(unsigned int)>
    a2c0:	e5903004 	ldr	r3, [r0, #4]
    a2c4:	e3530000 	cmp	r3, #0
    a2c8:	012fff1e 	bxeq	lr
    a2cc:	e5d01008 	ldrb	r1, [r0, #8]
    a2d0:	e1a00003 	mov	r0, r3
    a2d4:	ea001e16 	b	11b34 <CVirtualGPIOPin::Write(unsigned int)>

0000a2d8 <CActLED::Off()>:
    a2d8:	e5903000 	ldr	r3, [r0]
    a2dc:	e3530000 	cmp	r3, #0
    a2e0:	0a000003 	beq	a2f4 <CActLED::Off()+0x1c>
    a2e4:	e5d01008 	ldrb	r1, [r0, #8]
    a2e8:	e1a00003 	mov	r0, r3
    a2ec:	e2211001 	eor	r1, r1, #1
    a2f0:	ea000382 	b	b100 <CGPIOPin::Write(unsigned int)>
    a2f4:	e5903004 	ldr	r3, [r0, #4]
    a2f8:	e3530000 	cmp	r3, #0
    a2fc:	012fff1e 	bxeq	lr
    a300:	e5d01008 	ldrb	r1, [r0, #8]
    a304:	e1a00003 	mov	r0, r3
    a308:	e2211001 	eor	r1, r1, #1
    a30c:	ea001e08 	b	11b34 <CVirtualGPIOPin::Write(unsigned int)>

0000a310 <CActLED::CActLED()>:
    a310:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    a314:	e3a05000 	mov	r5, #0
    a318:	e1a04000 	mov	r4, r0
    a31c:	e24dd024 	sub	sp, sp, #36	; 0x24
    a320:	e59f314c 	ldr	r3, [pc, #332]	; a474 <CActLED::CActLED()+0x164>
    a324:	e5805000 	str	r5, [r0]
    a328:	e5805004 	str	r5, [r0, #4]
    a32c:	e28d000c 	add	r0, sp, #12
    a330:	e5834000 	str	r4, [r3]
    a334:	eb00008b 	bl	a568 <CBcmPropertyTags::CBcmPropertyTags()>
    a338:	e3a03010 	mov	r3, #16
    a33c:	e58d5000 	str	r5, [sp]
    a340:	e28d000c 	add	r0, sp, #12
    a344:	e08d2003 	add	r2, sp, r3
    a348:	e59f1128 	ldr	r1, [pc, #296]	; a478 <CActLED::CActLED()+0x168>
    a34c:	eb0000dc 	bl	a6c4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    a350:	e2506000 	subs	r6, r0, #0
    a354:	0a00001f 	beq	a3d8 <CActLED::CActLED()+0xc8>
    a358:	e59d301c 	ldr	r3, [sp, #28]
    a35c:	e3130502 	tst	r3, #8388608	; 0x800000
    a360:	0a000021 	beq	a3ec <CActLED::CActLED()+0xdc>
    a364:	e1a03223 	lsr	r3, r3, #4
    a368:	e6ef3073 	uxtb	r3, r3
    a36c:	e243200d 	sub	r2, r3, #13
    a370:	e3530008 	cmp	r3, #8
    a374:	13520001 	cmpne	r2, #1
    a378:	93a01001 	movls	r1, #1
    a37c:	83a01000 	movhi	r1, #0
    a380:	e353000c 	cmp	r3, #12
    a384:	13530009 	cmpne	r3, #9
    a388:	03a06001 	moveq	r6, #1
    a38c:	13a06000 	movne	r6, #0
    a390:	e3530001 	cmp	r3, #1
    a394:	9a000017 	bls	a3f8 <CActLED::CActLED()+0xe8>
    a398:	e3510000 	cmp	r1, #0
    a39c:	0a00002a 	beq	a44c <CActLED::CActLED()+0x13c>
    a3a0:	e3520001 	cmp	r2, #1
    a3a4:	8a000020 	bhi	a42c <CActLED::CActLED()+0x11c>
    a3a8:	e3a00028 	mov	r0, #40	; 0x28
    a3ac:	eb002044 	bl	124c4 <operator new(unsigned int)>
    a3b0:	e3a02001 	mov	r2, #1
    a3b4:	e1a07000 	mov	r7, r0
    a3b8:	e1a03005 	mov	r3, r5
    a3bc:	e3a0101d 	mov	r1, #29
    a3c0:	e0266002 	eor	r6, r6, r2
    a3c4:	eb0005ef 	bl	bb88 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    a3c8:	e5847000 	str	r7, [r4]
    a3cc:	e5c46008 	strb	r6, [r4, #8]
    a3d0:	e1a00004 	mov	r0, r4
    a3d4:	ebffffbf 	bl	a2d8 <CActLED::Off()>
    a3d8:	e28d000c 	add	r0, sp, #12
    a3dc:	eb000067 	bl	a580 <CBcmPropertyTags::~CBcmPropertyTags()>
    a3e0:	e1a00004 	mov	r0, r4
    a3e4:	e28dd024 	add	sp, sp, #36	; 0x24
    a3e8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    a3ec:	e6ff3073 	uxth	r3, r3
    a3f0:	e353000f 	cmp	r3, #15
    a3f4:	8a000015 	bhi	a450 <CActLED::CActLED()+0x140>
    a3f8:	e3a00028 	mov	r0, #40	; 0x28
    a3fc:	eb002030 	bl	124c4 <operator new(unsigned int)>
    a400:	e3a03000 	mov	r3, #0
    a404:	e3a02001 	mov	r2, #1
    a408:	e3a01010 	mov	r1, #16
    a40c:	e1a05000 	mov	r5, r0
    a410:	eb0005dc 	bl	bb88 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    a414:	e3a03000 	mov	r3, #0
    a418:	e5845000 	str	r5, [r4]
    a41c:	e5c43008 	strb	r3, [r4, #8]
    a420:	e1a00004 	mov	r0, r4
    a424:	ebffffab 	bl	a2d8 <CActLED::Off()>
    a428:	eaffffea 	b	a3d8 <CActLED::CActLED()+0xc8>
    a42c:	e3a00010 	mov	r0, #16
    a430:	eb002023 	bl	124c4 <operator new(unsigned int)>
    a434:	e1a07000 	mov	r7, r0
    a438:	e1a01005 	mov	r1, r5
    a43c:	eb001d6b 	bl	119f0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)>
    a440:	e2266001 	eor	r6, r6, #1
    a444:	e5847004 	str	r7, [r4, #4]
    a448:	eaffffdf 	b	a3cc <CActLED::CActLED()+0xbc>
    a44c:	e2266001 	eor	r6, r6, #1
    a450:	e3a00028 	mov	r0, #40	; 0x28
    a454:	eb00201a 	bl	124c4 <operator new(unsigned int)>
    a458:	e1a05000 	mov	r5, r0
    a45c:	e3a03000 	mov	r3, #0
    a460:	e3a02001 	mov	r2, #1
    a464:	e3a0102f 	mov	r1, #47	; 0x2f
    a468:	eb0005c6 	bl	bb88 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    a46c:	e5845000 	str	r5, [r4]
    a470:	eaffffd5 	b	a3cc <CActLED::CActLED()+0xbc>
    a474:	00015e9c 	.word	0x00015e9c
    a478:	00010002 	.word	0x00010002

0000a47c <CActLED::Blink(unsigned int, unsigned int, unsigned int)>:
    a47c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a480:	e2516000 	subs	r6, r1, #0
    a484:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    a488:	e1a08003 	mov	r8, r3
    a48c:	e1a07002 	mov	r7, r2
    a490:	e1a05000 	mov	r5, r0
    a494:	e3a04001 	mov	r4, #1
    a498:	e1a00005 	mov	r0, r5
    a49c:	ebffff81 	bl	a2a8 <CActLED::On()>
    a4a0:	e1a00007 	mov	r0, r7
    a4a4:	eb001b50 	bl	111ec <CTimer::SimpleMsDelay(unsigned int)>
    a4a8:	e1a00005 	mov	r0, r5
    a4ac:	ebffff89 	bl	a2d8 <CActLED::Off()>
    a4b0:	e2844001 	add	r4, r4, #1
    a4b4:	e1a00008 	mov	r0, r8
    a4b8:	eb001b4b 	bl	111ec <CTimer::SimpleMsDelay(unsigned int)>
    a4bc:	e1560004 	cmp	r6, r4
    a4c0:	2afffff4 	bcs	a498 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x1c>
    a4c4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000a4c8 <CActLED::Get()>:
    a4c8:	e59f3004 	ldr	r3, [pc, #4]	; a4d4 <CActLED::Get()+0xc>
    a4cc:	e5930000 	ldr	r0, [r3]
    a4d0:	e12fff1e 	bx	lr
    a4d4:	00015e9c 	.word	0x00015e9c

0000a4d8 <assertion_failed>:
    a4d8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    a4dc:	e1a05000 	mov	r5, r0
    a4e0:	e24dd01c 	sub	sp, sp, #28
    a4e4:	e1a06001 	mov	r6, r1
    a4e8:	e1a07002 	mov	r7, r2
    a4ec:	e1a0400d 	mov	r4, sp
    a4f0:	eb00072a 	bl	c1a0 <CInterruptSystem::DisableFIQ()>
    a4f4:	f1080040 	cpsie	f
    a4f8:	e28d0008 	add	r0, sp, #8
    a4fc:	eb0013dc 	bl	f474 <CString::CString()>
    a500:	e1a03007 	mov	r3, r7
    a504:	e1a02006 	mov	r2, r6
    a508:	e28d0008 	add	r0, sp, #8
    a50c:	e59f104c 	ldr	r1, [pc, #76]	; a560 <assertion_failed+0x88>
    a510:	eb0017c5 	bl	1042c <CString::Format(char const*, ...)>
    a514:	e28d0008 	add	r0, sp, #8
    a518:	eb0013eb 	bl	f4cc <CString::operator char const*() const>
    a51c:	e1a01000 	mov	r1, r0
    a520:	e1a00004 	mov	r0, r4
    a524:	eb0000f4 	bl	a8fc <debug_stacktrace(unsigned int const*, char const*)>
    a528:	eb000913 	bl	c97c <CLogger::Get()>
    a52c:	e1a04000 	mov	r4, r0
    a530:	e28d0008 	add	r0, sp, #8
    a534:	eb0013e4 	bl	f4cc <CString::operator char const*() const>
    a538:	e59f3024 	ldr	r3, [pc, #36]	; a564 <assertion_failed+0x8c>
    a53c:	e1a01000 	mov	r1, r0
    a540:	e3a02000 	mov	r2, #0
    a544:	e1a00004 	mov	r0, r4
    a548:	e58d5000 	str	r5, [sp]
    a54c:	eb000ab3 	bl	d020 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    a550:	e28d0008 	add	r0, sp, #8
    a554:	eb001393 	bl	f3a8 <CString::~CString()>
    a558:	e28dd01c 	add	sp, sp, #28
    a55c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    a560:	00013ef4 	.word	0x00013ef4
    a564:	00013efc 	.word	0x00013efc

0000a568 <CBcmPropertyTags::CBcmPropertyTags()>:
    a568:	e92d4010 	push	{r4, lr}
    a56c:	e1a04000 	mov	r4, r0
    a570:	e3a01008 	mov	r1, #8
    a574:	eb00227e 	bl	12f74 <CBcmMailBox::CBcmMailBox(unsigned int)>
    a578:	e1a00004 	mov	r0, r4
    a57c:	e8bd8010 	pop	{r4, pc}

0000a580 <CBcmPropertyTags::~CBcmPropertyTags()>:
    a580:	e92d4010 	push	{r4, lr}
    a584:	e1a04000 	mov	r4, r0
    a588:	eb00227b 	bl	12f7c <CBcmMailBox::~CBcmMailBox()>
    a58c:	e1a00004 	mov	r0, r4
    a590:	e8bd8010 	pop	{r4, pc}

0000a594 <CBcmPropertyTags::GetTags(void*, unsigned int)>:
    a594:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    a598:	e2519000 	subs	r9, r1, #0
    a59c:	e1a0a000 	mov	sl, r0
    a5a0:	e1a07002 	mov	r7, r2
    a5a4:	0a00003d 	beq	a6a0 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x10c>
    a5a8:	e357000f 	cmp	r7, #15
    a5ac:	9a000036 	bls	a68c <CBcmPropertyTags::GetTags(void*, unsigned int)+0xf8>
    a5b0:	e287600c 	add	r6, r7, #12
    a5b4:	e3160003 	tst	r6, #3
    a5b8:	1a00002e 	bne	a678 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xe4>
    a5bc:	e3a00000 	mov	r0, #0
    a5c0:	eb001f2e 	bl	12280 <CMemorySystem::GetCoherentPage(unsigned int)>
    a5c4:	e3a05000 	mov	r5, #0
    a5c8:	e1a04000 	mov	r4, r0
    a5cc:	e1a01426 	lsr	r1, r6, #8
    a5d0:	e1a02826 	lsr	r2, r6, #16
    a5d4:	e1a03c26 	lsr	r3, r6, #24
    a5d8:	e2808008 	add	r8, r0, #8
    a5dc:	e5c06000 	strb	r6, [r0]
    a5e0:	e5c01001 	strb	r1, [r0, #1]
    a5e4:	e5c02002 	strb	r2, [r0, #2]
    a5e8:	e5c03003 	strb	r3, [r0, #3]
    a5ec:	e1a02007 	mov	r2, r7
    a5f0:	e1a00008 	mov	r0, r8
    a5f4:	e5c45004 	strb	r5, [r4, #4]
    a5f8:	e5c45005 	strb	r5, [r4, #5]
    a5fc:	e5c45006 	strb	r5, [r4, #6]
    a600:	e5c45007 	strb	r5, [r4, #7]
    a604:	e1a01009 	mov	r1, r9
    a608:	eb001cb1 	bl	118d4 <memcpy>
    a60c:	e7885007 	str	r5, [r8, r7]
    a610:	ee075f9a 	mcr	15, 0, r5, cr7, cr10, {4}
    a614:	e3c46103 	bic	r6, r4, #-1073741824	; 0xc0000000
    a618:	e3866101 	orr	r6, r6, #1073741824	; 0x40000000
    a61c:	e1a0000a 	mov	r0, sl
    a620:	e1a01006 	mov	r1, r6
    a624:	eb002284 	bl	1303c <CBcmMailBox::WriteRead(unsigned int)>
    a628:	e1560000 	cmp	r6, r0
    a62c:	0a000001 	beq	a638 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xa4>
    a630:	e3a00000 	mov	r0, #0
    a634:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    a638:	ee075fba 	mcr	15, 0, r5, cr7, cr10, {5}
    a63c:	e5d42005 	ldrb	r2, [r4, #5]
    a640:	e5d43004 	ldrb	r3, [r4, #4]
    a644:	e5d41006 	ldrb	r1, [r4, #6]
    a648:	e1833402 	orr	r3, r3, r2, lsl #8
    a64c:	e5d42007 	ldrb	r2, [r4, #7]
    a650:	e1833801 	orr	r3, r3, r1, lsl #16
    a654:	e1833c02 	orr	r3, r3, r2, lsl #24
    a658:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
    a65c:	1afffff3 	bne	a630 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x9c>
    a660:	e1a02007 	mov	r2, r7
    a664:	e1a01008 	mov	r1, r8
    a668:	e1a00009 	mov	r0, r9
    a66c:	eb001c98 	bl	118d4 <memcpy>
    a670:	e3a00001 	mov	r0, #1
    a674:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    a678:	e3a02053 	mov	r2, #83	; 0x53
    a67c:	e59f1030 	ldr	r1, [pc, #48]	; a6b4 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x120>
    a680:	e59f0030 	ldr	r0, [pc, #48]	; a6b8 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x124>
    a684:	ebffff93 	bl	a4d8 <assertion_failed>
    a688:	eaffffcb 	b	a5bc <CBcmPropertyTags::GetTags(void*, unsigned int)+0x28>
    a68c:	e3a02051 	mov	r2, #81	; 0x51
    a690:	e59f101c 	ldr	r1, [pc, #28]	; a6b4 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x120>
    a694:	e59f0020 	ldr	r0, [pc, #32]	; a6bc <CBcmPropertyTags::GetTags(void*, unsigned int)+0x128>
    a698:	ebffff8e 	bl	a4d8 <assertion_failed>
    a69c:	eaffffc3 	b	a5b0 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x1c>
    a6a0:	e3a02050 	mov	r2, #80	; 0x50
    a6a4:	e59f1008 	ldr	r1, [pc, #8]	; a6b4 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x120>
    a6a8:	e59f0010 	ldr	r0, [pc, #16]	; a6c0 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x12c>
    a6ac:	ebffff89 	bl	a4d8 <assertion_failed>
    a6b0:	eaffffbc 	b	a5a8 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x14>
    a6b4:	00013f14 	.word	0x00013f14
    a6b8:	00013f60 	.word	0x00013f60
    a6bc:	00013f34 	.word	0x00013f34
    a6c0:	00013f28 	.word	0x00013f28

0000a6c4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>:
    a6c4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a6c8:	e2524000 	subs	r4, r2, #0
    a6cc:	e1a08000 	mov	r8, r0
    a6d0:	e1a06001 	mov	r6, r1
    a6d4:	e1a07003 	mov	r7, r3
    a6d8:	e59d5018 	ldr	r5, [sp, #24]
    a6dc:	0a000038 	beq	a7c4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x100>
    a6e0:	e357000f 	cmp	r7, #15
    a6e4:	9a000031 	bls	a7b0 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xec>
    a6e8:	e3c52102 	bic	r2, r5, #-2147483648	; 0x80000000
    a6ec:	e247100c 	sub	r1, r7, #12
    a6f0:	e1a03422 	lsr	r3, r2, #8
    a6f4:	e1a0c822 	lsr	ip, r2, #16
    a6f8:	e5c43009 	strb	r3, [r4, #9]
    a6fc:	e1a03421 	lsr	r3, r1, #8
    a700:	e1a0e821 	lsr	lr, r1, #16
    a704:	e5c42008 	strb	r2, [r4, #8]
    a708:	e5c46000 	strb	r6, [r4]
    a70c:	e1a02c22 	lsr	r2, r2, #24
    a710:	e5c4c00a 	strb	ip, [r4, #10]
    a714:	e5c41004 	strb	r1, [r4, #4]
    a718:	e1a0cc21 	lsr	ip, r1, #24
    a71c:	e5c43005 	strb	r3, [r4, #5]
    a720:	e1a01426 	lsr	r1, r6, #8
    a724:	e1a03826 	lsr	r3, r6, #16
    a728:	e1a06c26 	lsr	r6, r6, #24
    a72c:	e5c4200b 	strb	r2, [r4, #11]
    a730:	e5c41001 	strb	r1, [r4, #1]
    a734:	e1a00008 	mov	r0, r8
    a738:	e1a02007 	mov	r2, r7
    a73c:	e5c4e006 	strb	lr, [r4, #6]
    a740:	e5c4c007 	strb	ip, [r4, #7]
    a744:	e5c43002 	strb	r3, [r4, #2]
    a748:	e5c46003 	strb	r6, [r4, #3]
    a74c:	e1a01004 	mov	r1, r4
    a750:	ebffff8f 	bl	a594 <CBcmPropertyTags::GetTags(void*, unsigned int)>
    a754:	e3500000 	cmp	r0, #0
    a758:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    a75c:	e5d43009 	ldrb	r3, [r4, #9]
    a760:	e5d40008 	ldrb	r0, [r4, #8]
    a764:	e5d4200a 	ldrb	r2, [r4, #10]
    a768:	e1800403 	orr	r0, r0, r3, lsl #8
    a76c:	e5d4300b 	ldrb	r3, [r4, #11]
    a770:	e1800802 	orr	r0, r0, r2, lsl #16
    a774:	e1900c03 	orrs	r0, r0, r3, lsl #24
    a778:	4a000001 	bmi	a784 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xc0>
    a77c:	e3a00000 	mov	r0, #0
    a780:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    a784:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
    a788:	e1a01420 	lsr	r1, r0, #8
    a78c:	e1a02820 	lsr	r2, r0, #16
    a790:	e1a03c20 	lsr	r3, r0, #24
    a794:	e5c40008 	strb	r0, [r4, #8]
    a798:	e2900000 	adds	r0, r0, #0
    a79c:	e5c41009 	strb	r1, [r4, #9]
    a7a0:	e5c4200a 	strb	r2, [r4, #10]
    a7a4:	e5c4300b 	strb	r3, [r4, #11]
    a7a8:	13a00001 	movne	r0, #1
    a7ac:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    a7b0:	e3a02034 	mov	r2, #52	; 0x34
    a7b4:	e59f101c 	ldr	r1, [pc, #28]	; a7d8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x114>
    a7b8:	e59f001c 	ldr	r0, [pc, #28]	; a7dc <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x118>
    a7bc:	ebffff45 	bl	a4d8 <assertion_failed>
    a7c0:	eaffffc8 	b	a6e8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x24>
    a7c4:	e3a02033 	mov	r2, #51	; 0x33
    a7c8:	e59f1008 	ldr	r1, [pc, #8]	; a7d8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x114>
    a7cc:	e59f000c 	ldr	r0, [pc, #12]	; a7e0 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x11c>
    a7d0:	ebffff40 	bl	a4d8 <assertion_failed>
    a7d4:	eaffffc1 	b	a6e0 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x1c>
    a7d8:	00013f14 	.word	0x00013f14
    a7dc:	00013f84 	.word	0x00013f84
    a7e0:	00013f78 	.word	0x00013f78

0000a7e4 <debug_hexdump(void const*, unsigned int, char const*)>:
    a7e4:	e3520000 	cmp	r2, #0
    a7e8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a7ec:	e1a05001 	mov	r5, r1
    a7f0:	e59f60f4 	ldr	r6, [pc, #244]	; a8ec <debug_hexdump(void const*, unsigned int, char const*)+0x108>
    a7f4:	e1a04000 	mov	r4, r0
    a7f8:	11a06002 	movne	r6, r2
    a7fc:	e24dd04c 	sub	sp, sp, #76	; 0x4c
    a800:	eb00085d 	bl	c97c <CLogger::Get()>
    a804:	e58d4004 	str	r4, [sp, #4]
    a808:	e58d5000 	str	r5, [sp]
    a80c:	e1a01006 	mov	r1, r6
    a810:	e59f30d8 	ldr	r3, [pc, #216]	; a8f0 <debug_hexdump(void const*, unsigned int, char const*)+0x10c>
    a814:	e3a02004 	mov	r2, #4
    a818:	eb000a00 	bl	d020 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    a81c:	e3550000 	cmp	r5, #0
    a820:	0a00002b 	beq	a8d4 <debug_hexdump(void const*, unsigned int, char const*)+0xf0>
    a824:	e3a09004 	mov	r9, #4
    a828:	e59f80c4 	ldr	r8, [pc, #196]	; a8f4 <debug_hexdump(void const*, unsigned int, char const*)+0x110>
    a82c:	e59f70c4 	ldr	r7, [pc, #196]	; a8f8 <debug_hexdump(void const*, unsigned int, char const*)+0x114>
    a830:	eb000851 	bl	c97c <CLogger::Get()>
    a834:	e5d4a00f 	ldrb	sl, [r4, #15]
    a838:	e5d4e00e 	ldrb	lr, [r4, #14]
    a83c:	e5d4c00d 	ldrb	ip, [r4, #13]
    a840:	e5d4300c 	ldrb	r3, [r4, #12]
    a844:	e5d4200b 	ldrb	r2, [r4, #11]
    a848:	e5d4100a 	ldrb	r1, [r4, #10]
    a84c:	e5d4b009 	ldrb	fp, [r4, #9]
    a850:	e58da040 	str	sl, [sp, #64]	; 0x40
    a854:	e5d4a008 	ldrb	sl, [r4, #8]
    a858:	e58de03c 	str	lr, [sp, #60]	; 0x3c
    a85c:	e5d4e007 	ldrb	lr, [r4, #7]
    a860:	e58dc038 	str	ip, [sp, #56]	; 0x38
    a864:	e5d4c006 	ldrb	ip, [r4, #6]
    a868:	e58d3034 	str	r3, [sp, #52]	; 0x34
    a86c:	e5d43005 	ldrb	r3, [r4, #5]
    a870:	e58d2030 	str	r2, [sp, #48]	; 0x30
    a874:	e5d42004 	ldrb	r2, [r4, #4]
    a878:	e58d102c 	str	r1, [sp, #44]	; 0x2c
    a87c:	e5d41003 	ldrb	r1, [r4, #3]
    a880:	e58db028 	str	fp, [sp, #40]	; 0x28
    a884:	e5d4b002 	ldrb	fp, [r4, #2]
    a888:	e58da024 	str	sl, [sp, #36]	; 0x24
    a88c:	e5d4a001 	ldrb	sl, [r4, #1]
    a890:	e58de020 	str	lr, [sp, #32]
    a894:	e5d4e000 	ldrb	lr, [r4]
    a898:	e58dc01c 	str	ip, [sp, #28]
    a89c:	e58d3018 	str	r3, [sp, #24]
    a8a0:	e004c008 	and	ip, r4, r8
    a8a4:	e58d2014 	str	r2, [sp, #20]
    a8a8:	e58d1010 	str	r1, [sp, #16]
    a8ac:	e1a03007 	mov	r3, r7
    a8b0:	e1a02009 	mov	r2, r9
    a8b4:	e1a01006 	mov	r1, r6
    a8b8:	e58db00c 	str	fp, [sp, #12]
    a8bc:	e58da008 	str	sl, [sp, #8]
    a8c0:	e88d5000 	stm	sp, {ip, lr}
    a8c4:	eb0009d5 	bl	d020 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    a8c8:	e355000f 	cmp	r5, #15
    a8cc:	e2844010 	add	r4, r4, #16
    a8d0:	8a000001 	bhi	a8dc <debug_hexdump(void const*, unsigned int, char const*)+0xf8>
    a8d4:	e28dd04c 	add	sp, sp, #76	; 0x4c
    a8d8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a8dc:	e2555010 	subs	r5, r5, #16
    a8e0:	1affffd2 	bne	a830 <debug_hexdump(void const*, unsigned int, char const*)+0x4c>
    a8e4:	e28dd04c 	add	sp, sp, #76	; 0x4c
    a8e8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a8ec:	00013fac 	.word	0x00013fac
    a8f0:	00013fb4 	.word	0x00013fb4
    a8f4:	0000ffff 	.word	0x0000ffff
    a8f8:	00013fdc 	.word	0x00013fdc

0000a8fc <debug_stacktrace(unsigned int const*, char const*)>:
    a8fc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    a900:	e3510000 	cmp	r1, #0
    a904:	e59f8084 	ldr	r8, [pc, #132]	; a990 <debug_stacktrace(unsigned int const*, char const*)+0x94>
    a908:	e24dd008 	sub	sp, sp, #8
    a90c:	e1a05000 	mov	r5, r0
    a910:	11a08001 	movne	r8, r1
    a914:	e3a04000 	mov	r4, #0
    a918:	e3a0a004 	mov	sl, #4
    a91c:	e59f6070 	ldr	r6, [pc, #112]	; a994 <debug_stacktrace(unsigned int const*, char const*)+0x98>
    a920:	e59f7070 	ldr	r7, [pc, #112]	; a998 <debug_stacktrace(unsigned int const*, char const*)+0x9c>
    a924:	e59f9070 	ldr	r9, [pc, #112]	; a99c <debug_stacktrace(unsigned int const*, char const*)+0xa0>
    a928:	ea000003 	b	a93c <debug_stacktrace(unsigned int const*, char const*)+0x40>
    a92c:	e2844001 	add	r4, r4, #1
    a930:	e3540040 	cmp	r4, #64	; 0x40
    a934:	e2855004 	add	r5, r5, #4
    a938:	0a000012 	beq	a988 <debug_stacktrace(unsigned int const*, char const*)+0x8c>
    a93c:	e5953000 	ldr	r3, [r5]
    a940:	e1530006 	cmp	r3, r6
    a944:	9afffff8 	bls	a92c <debug_stacktrace(unsigned int const*, char const*)+0x30>
    a948:	e1530007 	cmp	r3, r7
    a94c:	2afffff6 	bcs	a92c <debug_stacktrace(unsigned int const*, char const*)+0x30>
    a950:	e3130003 	tst	r3, #3
    a954:	1afffff4 	bne	a92c <debug_stacktrace(unsigned int const*, char const*)+0x30>
    a958:	eb000807 	bl	c97c <CLogger::Get()>
    a95c:	e5953000 	ldr	r3, [r5]
    a960:	e1a0200a 	mov	r2, sl
    a964:	e58d4000 	str	r4, [sp]
    a968:	e58d3004 	str	r3, [sp, #4]
    a96c:	e1a01008 	mov	r1, r8
    a970:	e1a03009 	mov	r3, r9
    a974:	e2844001 	add	r4, r4, #1
    a978:	eb0009a8 	bl	d020 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    a97c:	e3540040 	cmp	r4, #64	; 0x40
    a980:	e2855004 	add	r5, r5, #4
    a984:	1affffec 	bne	a93c <debug_stacktrace(unsigned int const*, char const*)+0x40>
    a988:	e28dd008 	add	sp, sp, #8
    a98c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    a990:	00013fac 	.word	0x00013fac
    a994:	00007fff 	.word	0x00007fff
    a998:	000139fc 	.word	0x000139fc
    a99c:	00014034 	.word	0x00014034

0000a9a0 <CDevice::~CDevice()>:
    a9a0:	e12fff1e 	bx	lr

0000a9a4 <CDevice::Read(void*, unsigned int)>:
    a9a4:	e3e00000 	mvn	r0, #0
    a9a8:	e12fff1e 	bx	lr

0000a9ac <CDevice::Seek(unsigned long long)>:
    a9ac:	e3e00000 	mvn	r0, #0
    a9b0:	e3e01000 	mvn	r1, #0
    a9b4:	e12fff1e 	bx	lr

0000a9b8 <CDevice::~CDevice()>:
    a9b8:	e92d4010 	push	{r4, lr}
    a9bc:	e1a04000 	mov	r4, r0
    a9c0:	e3a01004 	mov	r1, #4
    a9c4:	eb001ec2 	bl	124d4 <operator delete(void*, unsigned int)>
    a9c8:	e1a00004 	mov	r0, r4
    a9cc:	e8bd8010 	pop	{r4, pc}

0000a9d0 <CDevice::CDevice()>:
    a9d0:	e59f3004 	ldr	r3, [pc, #4]	; a9dc <CDevice::CDevice()+0xc>
    a9d4:	e5803000 	str	r3, [r0]
    a9d8:	e12fff1e 	bx	lr
    a9dc:	00014050 	.word	0x00014050

0000a9e0 <CDeviceNameService::CDeviceNameService()>:
    a9e0:	e3a03000 	mov	r3, #0
    a9e4:	e92d4070 	push	{r4, r5, r6, lr}
    a9e8:	e59f5030 	ldr	r5, [pc, #48]	; aa20 <CDeviceNameService::CDeviceNameService()+0x40>
    a9ec:	e1a04000 	mov	r4, r0
    a9f0:	e5952000 	ldr	r2, [r5]
    a9f4:	e5803000 	str	r3, [r0]
    a9f8:	e1520003 	cmp	r2, r3
    a9fc:	e5803004 	str	r3, [r0, #4]
    aa00:	0a000003 	beq	aa14 <CDeviceNameService::CDeviceNameService()+0x34>
    aa04:	e3a0201f 	mov	r2, #31
    aa08:	e59f1014 	ldr	r1, [pc, #20]	; aa24 <CDeviceNameService::CDeviceNameService()+0x44>
    aa0c:	e59f0014 	ldr	r0, [pc, #20]	; aa28 <CDeviceNameService::CDeviceNameService()+0x48>
    aa10:	ebfffeb0 	bl	a4d8 <assertion_failed>
    aa14:	e5854000 	str	r4, [r5]
    aa18:	e1a00004 	mov	r0, r4
    aa1c:	e8bd8070 	pop	{r4, r5, r6, pc}
    aa20:	00015ea0 	.word	0x00015ea0
    aa24:	00014064 	.word	0x00014064
    aa28:	0001407c 	.word	0x0001407c

0000aa2c <CDeviceNameService::~CDeviceNameService()>:
    aa2c:	e5903000 	ldr	r3, [r0]
    aa30:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    aa34:	e3530000 	cmp	r3, #0
    aa38:	e1a05000 	mov	r5, r0
    aa3c:	0a00000e 	beq	aa7c <CDeviceNameService::~CDeviceNameService()+0x50>
    aa40:	e3a06000 	mov	r6, #0
    aa44:	e3a07010 	mov	r7, #16
    aa48:	e5930004 	ldr	r0, [r3, #4]
    aa4c:	e5934000 	ldr	r4, [r3]
    aa50:	e3500000 	cmp	r0, #0
    aa54:	0a000000 	beq	aa5c <CDeviceNameService::~CDeviceNameService()+0x30>
    aa58:	eb001e9c 	bl	124d0 <operator delete[](void*)>
    aa5c:	e5950000 	ldr	r0, [r5]
    aa60:	e1a01007 	mov	r1, r7
    aa64:	e5806004 	str	r6, [r0, #4]
    aa68:	e5806008 	str	r6, [r0, #8]
    aa6c:	eb001e98 	bl	124d4 <operator delete(void*, unsigned int)>
    aa70:	e2543000 	subs	r3, r4, #0
    aa74:	e5854000 	str	r4, [r5]
    aa78:	1afffff2 	bne	aa48 <CDeviceNameService::~CDeviceNameService()+0x1c>
    aa7c:	e3a02000 	mov	r2, #0
    aa80:	e59f3008 	ldr	r3, [pc, #8]	; aa90 <CDeviceNameService::~CDeviceNameService()+0x64>
    aa84:	e1a00005 	mov	r0, r5
    aa88:	e5832000 	str	r2, [r3]
    aa8c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    aa90:	00015ea0 	.word	0x00015ea0

0000aa94 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>:
    aa94:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    aa98:	e1a05000 	mov	r5, r0
    aa9c:	e5900004 	ldr	r0, [r0, #4]
    aaa0:	e1a06001 	mov	r6, r1
    aaa4:	e3500000 	cmp	r0, #0
    aaa8:	e1a07002 	mov	r7, r2
    aaac:	e1a08003 	mov	r8, r3
    aab0:	1a000017 	bne	ab14 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x80>
    aab4:	e3a00010 	mov	r0, #16
    aab8:	eb001e81 	bl	124c4 <operator new(unsigned int)>
    aabc:	e3560000 	cmp	r6, #0
    aac0:	e1a04000 	mov	r4, r0
    aac4:	0a000019 	beq	ab30 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x9c>
    aac8:	e1a00006 	mov	r0, r6
    aacc:	eb001a2e 	bl	1138c <strlen>
    aad0:	e2800001 	add	r0, r0, #1
    aad4:	eb001e7b 	bl	124c8 <operator new[](unsigned int)>
    aad8:	e1a01006 	mov	r1, r6
    aadc:	e5840004 	str	r0, [r4, #4]
    aae0:	eb001aa7 	bl	11584 <strcpy>
    aae4:	e3570000 	cmp	r7, #0
    aae8:	0a00000b 	beq	ab1c <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x88>
    aaec:	e5952004 	ldr	r2, [r5, #4]
    aaf0:	e5953000 	ldr	r3, [r5]
    aaf4:	e3520000 	cmp	r2, #0
    aaf8:	e5847008 	str	r7, [r4, #8]
    aafc:	e5c4800c 	strb	r8, [r4, #12]
    ab00:	e5843000 	str	r3, [r4]
    ab04:	e5854000 	str	r4, [r5]
    ab08:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    ab0c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    ab10:	ea001e3e 	b	12410 <LeaveCritical>
    ab14:	eb001e10 	bl	1235c <EnterCritical>
    ab18:	eaffffe5 	b	aab4 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x20>
    ab1c:	e3a02040 	mov	r2, #64	; 0x40
    ab20:	e59f101c 	ldr	r1, [pc, #28]	; ab44 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xb0>
    ab24:	e59f001c 	ldr	r0, [pc, #28]	; ab48 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xb4>
    ab28:	ebfffe6a 	bl	a4d8 <assertion_failed>
    ab2c:	eaffffee 	b	aaec <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x58>
    ab30:	e3a0203b 	mov	r2, #59	; 0x3b
    ab34:	e59f1008 	ldr	r1, [pc, #8]	; ab44 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xb0>
    ab38:	e59f000c 	ldr	r0, [pc, #12]	; ab4c <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xb8>
    ab3c:	ebfffe65 	bl	a4d8 <assertion_failed>
    ab40:	eaffffe0 	b	aac8 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x34>
    ab44:	00014064 	.word	0x00014064
    ab48:	00014094 	.word	0x00014094
    ab4c:	00014088 	.word	0x00014088

0000ab50 <CDeviceNameService::RemoveDevice(char const*, bool)>:
    ab50:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ab54:	e2516000 	subs	r6, r1, #0
    ab58:	e1a08000 	mov	r8, r0
    ab5c:	e1a07002 	mov	r7, r2
    ab60:	0a000040 	beq	ac68 <CDeviceNameService::RemoveDevice(char const*, bool)+0x118>
    ab64:	e5980004 	ldr	r0, [r8, #4]
    ab68:	e3500000 	cmp	r0, #0
    ab6c:	1a00002e 	bne	ac2c <CDeviceNameService::RemoveDevice(char const*, bool)+0xdc>
    ab70:	e5984000 	ldr	r4, [r8]
    ab74:	e3540000 	cmp	r4, #0
    ab78:	0a000039 	beq	ac64 <CDeviceNameService::RemoveDevice(char const*, bool)+0x114>
    ab7c:	e3a05000 	mov	r5, #0
    ab80:	e3a0b05e 	mov	fp, #94	; 0x5e
    ab84:	e59fa0f0 	ldr	sl, [pc, #240]	; ac7c <CDeviceNameService::RemoveDevice(char const*, bool)+0x12c>
    ab88:	e59f90f0 	ldr	r9, [pc, #240]	; ac80 <CDeviceNameService::RemoveDevice(char const*, bool)+0x130>
    ab8c:	ea00000b 	b	abc0 <CDeviceNameService::RemoveDevice(char const*, bool)+0x70>
    ab90:	e1a00006 	mov	r0, r6
    ab94:	eb001a06 	bl	113b4 <strcmp>
    ab98:	e3500000 	cmp	r0, #0
    ab9c:	1a000002 	bne	abac <CDeviceNameService::RemoveDevice(char const*, bool)+0x5c>
    aba0:	e5d4300c 	ldrb	r3, [r4, #12]
    aba4:	e1530007 	cmp	r3, r7
    aba8:	0a00000d 	beq	abe4 <CDeviceNameService::RemoveDevice(char const*, bool)+0x94>
    abac:	e5943000 	ldr	r3, [r4]
    abb0:	e1a05004 	mov	r5, r4
    abb4:	e3530000 	cmp	r3, #0
    abb8:	0a00001f 	beq	ac3c <CDeviceNameService::RemoveDevice(char const*, bool)+0xec>
    abbc:	e1a04003 	mov	r4, r3
    abc0:	e5941004 	ldr	r1, [r4, #4]
    abc4:	e3510000 	cmp	r1, #0
    abc8:	1afffff0 	bne	ab90 <CDeviceNameService::RemoveDevice(char const*, bool)+0x40>
    abcc:	e1a0100a 	mov	r1, sl
    abd0:	e1a0200b 	mov	r2, fp
    abd4:	e1a00009 	mov	r0, r9
    abd8:	ebfffe3e 	bl	a4d8 <assertion_failed>
    abdc:	e5941004 	ldr	r1, [r4, #4]
    abe0:	eaffffea 	b	ab90 <CDeviceNameService::RemoveDevice(char const*, bool)+0x40>
    abe4:	e3550000 	cmp	r5, #0
    abe8:	0a00001a 	beq	ac58 <CDeviceNameService::RemoveDevice(char const*, bool)+0x108>
    abec:	e5943000 	ldr	r3, [r4]
    abf0:	e5853000 	str	r3, [r5]
    abf4:	e5983004 	ldr	r3, [r8, #4]
    abf8:	e3530000 	cmp	r3, #0
    abfc:	1a000013 	bne	ac50 <CDeviceNameService::RemoveDevice(char const*, bool)+0x100>
    ac00:	e5940004 	ldr	r0, [r4, #4]
    ac04:	e3500000 	cmp	r0, #0
    ac08:	0a000000 	beq	ac10 <CDeviceNameService::RemoveDevice(char const*, bool)+0xc0>
    ac0c:	eb001e2f 	bl	124d0 <operator delete[](void*)>
    ac10:	e3a03000 	mov	r3, #0
    ac14:	e1a00004 	mov	r0, r4
    ac18:	e5843004 	str	r3, [r4, #4]
    ac1c:	e5843008 	str	r3, [r4, #8]
    ac20:	e3a01010 	mov	r1, #16
    ac24:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ac28:	ea001e29 	b	124d4 <operator delete(void*, unsigned int)>
    ac2c:	eb001dca 	bl	1235c <EnterCritical>
    ac30:	e5984000 	ldr	r4, [r8]
    ac34:	e3540000 	cmp	r4, #0
    ac38:	1affffcf 	bne	ab7c <CDeviceNameService::RemoveDevice(char const*, bool)+0x2c>
    ac3c:	e5983004 	ldr	r3, [r8, #4]
    ac40:	e3530000 	cmp	r3, #0
    ac44:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ac48:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ac4c:	ea001def 	b	12410 <LeaveCritical>
    ac50:	eb001dee 	bl	12410 <LeaveCritical>
    ac54:	eaffffe9 	b	ac00 <CDeviceNameService::RemoveDevice(char const*, bool)+0xb0>
    ac58:	e5943000 	ldr	r3, [r4]
    ac5c:	e5883000 	str	r3, [r8]
    ac60:	eaffffe3 	b	abf4 <CDeviceNameService::RemoveDevice(char const*, bool)+0xa4>
    ac64:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ac68:	e3a02056 	mov	r2, #86	; 0x56
    ac6c:	e59f1008 	ldr	r1, [pc, #8]	; ac7c <CDeviceNameService::RemoveDevice(char const*, bool)+0x12c>
    ac70:	e59f000c 	ldr	r0, [pc, #12]	; ac84 <CDeviceNameService::RemoveDevice(char const*, bool)+0x134>
    ac74:	ebfffe17 	bl	a4d8 <assertion_failed>
    ac78:	eaffffb9 	b	ab64 <CDeviceNameService::RemoveDevice(char const*, bool)+0x14>
    ac7c:	00014064 	.word	0x00014064
    ac80:	000140a4 	.word	0x000140a4
    ac84:	00014088 	.word	0x00014088

0000ac88 <CDeviceNameService::GetDevice(char const*, bool)>:
    ac88:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    ac8c:	e2515000 	subs	r5, r1, #0
    ac90:	e1a07000 	mov	r7, r0
    ac94:	e1a06002 	mov	r6, r2
    ac98:	0a000034 	beq	ad70 <CDeviceNameService::GetDevice(char const*, bool)+0xe8>
    ac9c:	e5970004 	ldr	r0, [r7, #4]
    aca0:	e3500000 	cmp	r0, #0
    aca4:	1a000019 	bne	ad10 <CDeviceNameService::GetDevice(char const*, bool)+0x88>
    aca8:	e5974000 	ldr	r4, [r7]
    acac:	e3540000 	cmp	r4, #0
    acb0:	0a00001e 	beq	ad30 <CDeviceNameService::GetDevice(char const*, bool)+0xa8>
    acb4:	e3a0a092 	mov	sl, #146	; 0x92
    acb8:	e59f90c4 	ldr	r9, [pc, #196]	; ad84 <CDeviceNameService::GetDevice(char const*, bool)+0xfc>
    acbc:	e59f80c4 	ldr	r8, [pc, #196]	; ad88 <CDeviceNameService::GetDevice(char const*, bool)+0x100>
    acc0:	ea000009 	b	acec <CDeviceNameService::GetDevice(char const*, bool)+0x64>
    acc4:	e1a00005 	mov	r0, r5
    acc8:	eb0019b9 	bl	113b4 <strcmp>
    accc:	e3500000 	cmp	r0, #0
    acd0:	1a000002 	bne	ace0 <CDeviceNameService::GetDevice(char const*, bool)+0x58>
    acd4:	e5d4300c 	ldrb	r3, [r4, #12]
    acd8:	e1530006 	cmp	r3, r6
    acdc:	0a000016 	beq	ad3c <CDeviceNameService::GetDevice(char const*, bool)+0xb4>
    ace0:	e5944000 	ldr	r4, [r4]
    ace4:	e3540000 	cmp	r4, #0
    ace8:	0a00000c 	beq	ad20 <CDeviceNameService::GetDevice(char const*, bool)+0x98>
    acec:	e5941004 	ldr	r1, [r4, #4]
    acf0:	e3510000 	cmp	r1, #0
    acf4:	1afffff2 	bne	acc4 <CDeviceNameService::GetDevice(char const*, bool)+0x3c>
    acf8:	e1a01009 	mov	r1, r9
    acfc:	e1a0200a 	mov	r2, sl
    ad00:	e1a00008 	mov	r0, r8
    ad04:	ebfffdf3 	bl	a4d8 <assertion_failed>
    ad08:	e5941004 	ldr	r1, [r4, #4]
    ad0c:	eaffffec 	b	acc4 <CDeviceNameService::GetDevice(char const*, bool)+0x3c>
    ad10:	eb001d91 	bl	1235c <EnterCritical>
    ad14:	e5974000 	ldr	r4, [r7]
    ad18:	e3540000 	cmp	r4, #0
    ad1c:	1affffe4 	bne	acb4 <CDeviceNameService::GetDevice(char const*, bool)+0x2c>
    ad20:	e5973004 	ldr	r3, [r7, #4]
    ad24:	e3530000 	cmp	r3, #0
    ad28:	0a000000 	beq	ad30 <CDeviceNameService::GetDevice(char const*, bool)+0xa8>
    ad2c:	eb001db7 	bl	12410 <LeaveCritical>
    ad30:	e3a04000 	mov	r4, #0
    ad34:	e1a00004 	mov	r0, r4
    ad38:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    ad3c:	e5973004 	ldr	r3, [r7, #4]
    ad40:	e5944008 	ldr	r4, [r4, #8]
    ad44:	e3530000 	cmp	r3, #0
    ad48:	1a000006 	bne	ad68 <CDeviceNameService::GetDevice(char const*, bool)+0xe0>
    ad4c:	e3540000 	cmp	r4, #0
    ad50:	1afffff7 	bne	ad34 <CDeviceNameService::GetDevice(char const*, bool)+0xac>
    ad54:	e3a0209a 	mov	r2, #154	; 0x9a
    ad58:	e59f1024 	ldr	r1, [pc, #36]	; ad84 <CDeviceNameService::GetDevice(char const*, bool)+0xfc>
    ad5c:	e59f0028 	ldr	r0, [pc, #40]	; ad8c <CDeviceNameService::GetDevice(char const*, bool)+0x104>
    ad60:	ebfffddc 	bl	a4d8 <assertion_failed>
    ad64:	eafffff2 	b	ad34 <CDeviceNameService::GetDevice(char const*, bool)+0xac>
    ad68:	eb001da8 	bl	12410 <LeaveCritical>
    ad6c:	eafffff6 	b	ad4c <CDeviceNameService::GetDevice(char const*, bool)+0xc4>
    ad70:	e3a0208b 	mov	r2, #139	; 0x8b
    ad74:	e59f1008 	ldr	r1, [pc, #8]	; ad84 <CDeviceNameService::GetDevice(char const*, bool)+0xfc>
    ad78:	e59f0010 	ldr	r0, [pc, #16]	; ad90 <CDeviceNameService::GetDevice(char const*, bool)+0x108>
    ad7c:	ebfffdd5 	bl	a4d8 <assertion_failed>
    ad80:	eaffffc5 	b	ac9c <CDeviceNameService::GetDevice(char const*, bool)+0x14>
    ad84:	00014064 	.word	0x00014064
    ad88:	000140a4 	.word	0x000140a4
    ad8c:	000140b8 	.word	0x000140b8
    ad90:	00014088 	.word	0x00014088

0000ad94 <CDeviceNameService::Get()>:
    ad94:	e92d4010 	push	{r4, lr}
    ad98:	e59f4020 	ldr	r4, [pc, #32]	; adc0 <CDeviceNameService::Get()+0x2c>
    ad9c:	e5940000 	ldr	r0, [r4]
    ada0:	e3500000 	cmp	r0, #0
    ada4:	18bd8010 	popne	{r4, pc}
    ada8:	e3a020cc 	mov	r2, #204	; 0xcc
    adac:	e59f1010 	ldr	r1, [pc, #16]	; adc4 <CDeviceNameService::Get()+0x30>
    adb0:	e59f0010 	ldr	r0, [pc, #16]	; adc8 <CDeviceNameService::Get()+0x34>
    adb4:	ebfffdc7 	bl	a4d8 <assertion_failed>
    adb8:	e5940000 	ldr	r0, [r4]
    adbc:	e8bd8010 	pop	{r4, pc}
    adc0:	00015ea0 	.word	0x00015ea0
    adc4:	00014064 	.word	0x00014064
    adc8:	000140c8 	.word	0x000140c8

0000adcc <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>:
    adcc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    add0:	e1a07001 	mov	r7, r1
    add4:	e1a08002 	mov	r8, r2
    add8:	e24dd010 	sub	sp, sp, #16
    addc:	e1a04000 	mov	r4, r0
    ade0:	e1a0000d 	mov	r0, sp
    ade4:	e1a05003 	mov	r5, r3
    ade8:	e5dd6028 	ldrb	r6, [sp, #40]	; 0x28
    adec:	eb0011a0 	bl	f474 <CString::CString()>
    adf0:	e1a03008 	mov	r3, r8
    adf4:	e1a02007 	mov	r2, r7
    adf8:	e1a0000d 	mov	r0, sp
    adfc:	e59f102c 	ldr	r1, [pc, #44]	; ae30 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)+0x64>
    ae00:	eb001589 	bl	1042c <CString::Format(char const*, ...)>
    ae04:	e1a0000d 	mov	r0, sp
    ae08:	eb0011af 	bl	f4cc <CString::operator char const*() const>
    ae0c:	e1a03006 	mov	r3, r6
    ae10:	e1a01000 	mov	r1, r0
    ae14:	e1a02005 	mov	r2, r5
    ae18:	e1a00004 	mov	r0, r4
    ae1c:	ebffff1c 	bl	aa94 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
    ae20:	e1a0000d 	mov	r0, sp
    ae24:	eb00115f 	bl	f3a8 <CString::~CString()>
    ae28:	e28dd010 	add	sp, sp, #16
    ae2c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ae30:	000140d4 	.word	0x000140d4

0000ae34 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>:
    ae34:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    ae38:	e1a06001 	mov	r6, r1
    ae3c:	e1a07002 	mov	r7, r2
    ae40:	e24dd014 	sub	sp, sp, #20
    ae44:	e1a04000 	mov	r4, r0
    ae48:	e1a0000d 	mov	r0, sp
    ae4c:	e1a05003 	mov	r5, r3
    ae50:	eb001187 	bl	f474 <CString::CString()>
    ae54:	e1a03007 	mov	r3, r7
    ae58:	e1a02006 	mov	r2, r6
    ae5c:	e1a0000d 	mov	r0, sp
    ae60:	e59f1028 	ldr	r1, [pc, #40]	; ae90 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)+0x5c>
    ae64:	eb001570 	bl	1042c <CString::Format(char const*, ...)>
    ae68:	e1a0000d 	mov	r0, sp
    ae6c:	eb001196 	bl	f4cc <CString::operator char const*() const>
    ae70:	e1a02005 	mov	r2, r5
    ae74:	e1a01000 	mov	r1, r0
    ae78:	e1a00004 	mov	r0, r4
    ae7c:	ebffff33 	bl	ab50 <CDeviceNameService::RemoveDevice(char const*, bool)>
    ae80:	e1a0000d 	mov	r0, sp
    ae84:	eb001147 	bl	f3a8 <CString::~CString()>
    ae88:	e28dd014 	add	sp, sp, #20
    ae8c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    ae90:	000140d4 	.word	0x000140d4

0000ae94 <CDeviceNameService::GetDevice(char const*, unsigned int, bool)>:
    ae94:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    ae98:	e1a06001 	mov	r6, r1
    ae9c:	e1a07002 	mov	r7, r2
    aea0:	e24dd014 	sub	sp, sp, #20
    aea4:	e1a04000 	mov	r4, r0
    aea8:	e1a0000d 	mov	r0, sp
    aeac:	e1a05003 	mov	r5, r3
    aeb0:	eb00116f 	bl	f474 <CString::CString()>
    aeb4:	e1a03007 	mov	r3, r7
    aeb8:	e1a02006 	mov	r2, r6
    aebc:	e1a0000d 	mov	r0, sp
    aec0:	e59f1030 	ldr	r1, [pc, #48]	; aef8 <CDeviceNameService::GetDevice(char const*, unsigned int, bool)+0x64>
    aec4:	eb001558 	bl	1042c <CString::Format(char const*, ...)>
    aec8:	e1a0000d 	mov	r0, sp
    aecc:	eb00117e 	bl	f4cc <CString::operator char const*() const>
    aed0:	e1a02005 	mov	r2, r5
    aed4:	e1a01000 	mov	r1, r0
    aed8:	e1a00004 	mov	r0, r4
    aedc:	ebffff69 	bl	ac88 <CDeviceNameService::GetDevice(char const*, bool)>
    aee0:	e1a04000 	mov	r4, r0
    aee4:	e1a0000d 	mov	r0, sp
    aee8:	eb00112e 	bl	f3a8 <CString::~CString()>
    aeec:	e1a00004 	mov	r0, r4
    aef0:	e28dd014 	add	sp, sp, #20
    aef4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    aef8:	000140d4 	.word	0x000140d4

0000aefc <CDeviceNameService::ListDevices(CDevice*)>:
    aefc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    af00:	e2516000 	subs	r6, r1, #0
    af04:	e24dd01c 	sub	sp, sp, #28
    af08:	e1a04000 	mov	r4, r0
    af0c:	0a000036 	beq	afec <CDeviceNameService::ListDevices(CDevice*)+0xf0>
    af10:	e5944000 	ldr	r4, [r4]
    af14:	e3540000 	cmp	r4, #0
    af18:	0a00002b 	beq	afcc <CDeviceNameService::ListDevices(CDevice*)+0xd0>
    af1c:	e3a05000 	mov	r5, #0
    af20:	e3a0b0b9 	mov	fp, #185	; 0xb9
    af24:	e59f80d4 	ldr	r8, [pc, #212]	; b000 <CDeviceNameService::ListDevices(CDevice*)+0x104>
    af28:	e28d0008 	add	r0, sp, #8
    af2c:	eb001150 	bl	f474 <CString::CString()>
    af30:	e5943004 	ldr	r3, [r4, #4]
    af34:	e2855001 	add	r5, r5, #1
    af38:	e3530000 	cmp	r3, #0
    af3c:	0a000024 	beq	afd4 <CDeviceNameService::ListDevices(CDevice*)+0xd8>
    af40:	e2157003 	ands	r7, r5, #3
    af44:	13a01020 	movne	r1, #32
    af48:	03a0100a 	moveq	r1, #10
    af4c:	e5d4200c 	ldrb	r2, [r4, #12]
    af50:	e28d0008 	add	r0, sp, #8
    af54:	e3520000 	cmp	r2, #0
    af58:	03a02063 	moveq	r2, #99	; 0x63
    af5c:	13a02062 	movne	r2, #98	; 0x62
    af60:	e58d1000 	str	r1, [sp]
    af64:	e1a01008 	mov	r1, r8
    af68:	eb00152f 	bl	1042c <CString::Format(char const*, ...)>
    af6c:	e5963000 	ldr	r3, [r6]
    af70:	e28d0008 	add	r0, sp, #8
    af74:	e593900c 	ldr	r9, [r3, #12]
    af78:	eb001153 	bl	f4cc <CString::operator char const*() const>
    af7c:	e1a0a000 	mov	sl, r0
    af80:	e28d0008 	add	r0, sp, #8
    af84:	eb00117e 	bl	f584 <CString::GetLength() const>
    af88:	e1a0100a 	mov	r1, sl
    af8c:	e1a02000 	mov	r2, r0
    af90:	e1a00006 	mov	r0, r6
    af94:	e12fff39 	blx	r9
    af98:	e5944000 	ldr	r4, [r4]
    af9c:	e28d0008 	add	r0, sp, #8
    afa0:	eb001100 	bl	f3a8 <CString::~CString()>
    afa4:	e3540000 	cmp	r4, #0
    afa8:	1affffde 	bne	af28 <CDeviceNameService::ListDevices(CDevice*)+0x2c>
    afac:	e3570000 	cmp	r7, #0
    afb0:	0a000005 	beq	afcc <CDeviceNameService::ListDevices(CDevice*)+0xd0>
    afb4:	e5963000 	ldr	r3, [r6]
    afb8:	e1a00006 	mov	r0, r6
    afbc:	e593300c 	ldr	r3, [r3, #12]
    afc0:	e3a02001 	mov	r2, #1
    afc4:	e59f1038 	ldr	r1, [pc, #56]	; b004 <CDeviceNameService::ListDevices(CDevice*)+0x108>
    afc8:	e12fff33 	blx	r3
    afcc:	e28dd01c 	add	sp, sp, #28
    afd0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    afd4:	e1a0200b 	mov	r2, fp
    afd8:	e59f1028 	ldr	r1, [pc, #40]	; b008 <CDeviceNameService::ListDevices(CDevice*)+0x10c>
    afdc:	e59f0028 	ldr	r0, [pc, #40]	; b00c <CDeviceNameService::ListDevices(CDevice*)+0x110>
    afe0:	ebfffd3c 	bl	a4d8 <assertion_failed>
    afe4:	e5943004 	ldr	r3, [r4, #4]
    afe8:	eaffffd4 	b	af40 <CDeviceNameService::ListDevices(CDevice*)+0x44>
    afec:	e3a020b0 	mov	r2, #176	; 0xb0
    aff0:	e59f1010 	ldr	r1, [pc, #16]	; b008 <CDeviceNameService::ListDevices(CDevice*)+0x10c>
    aff4:	e59f0014 	ldr	r0, [pc, #20]	; b010 <CDeviceNameService::ListDevices(CDevice*)+0x114>
    aff8:	ebfffd36 	bl	a4d8 <assertion_failed>
    affc:	eaffffc3 	b	af10 <CDeviceNameService::ListDevices(CDevice*)+0x14>
    b000:	000140ec 	.word	0x000140ec
    b004:	000140f8 	.word	0x000140f8
    b008:	00014064 	.word	0x00014064
    b00c:	000140a4 	.word	0x000140a4
    b010:	000140dc 	.word	0x000140dc

0000b014 <CGPIOPin::~CGPIOPin()>:
    b014:	e12fff1e 	bx	lr

0000b018 <CGPIOPin::~CGPIOPin()>:
    b018:	e92d4010 	push	{r4, lr}
    b01c:	e1a04000 	mov	r4, r0
    b020:	e3a01028 	mov	r1, #40	; 0x28
    b024:	eb001d2a 	bl	124d4 <operator delete(void*, unsigned int)>
    b028:	e1a00004 	mov	r0, r4
    b02c:	e8bd8010 	pop	{r4, pc}

0000b030 <CGPIOPin::CGPIOPin()>:
    b030:	e92d4010 	push	{r4, lr}
    b034:	e3a01000 	mov	r1, #0
    b038:	e3a02006 	mov	r2, #6
    b03c:	e3a04036 	mov	r4, #54	; 0x36
    b040:	e3a0c00a 	mov	ip, #10
    b044:	e59fe01c 	ldr	lr, [pc, #28]	; b068 <CGPIOPin::CGPIOPin()+0x38>
    b048:	e5804004 	str	r4, [r0, #4]
    b04c:	e580e000 	str	lr, [r0]
    b050:	e5c0c010 	strb	ip, [r0, #16]
    b054:	e5801018 	str	r1, [r0, #24]
    b058:	e580101c 	str	r1, [r0, #28]
    b05c:	e5c02024 	strb	r2, [r0, #36]	; 0x24
    b060:	e5c02025 	strb	r2, [r0, #37]	; 0x25
    b064:	e8bd8010 	pop	{r4, pc}
    b068:	00014104 	.word	0x00014104

0000b06c <CGPIOPin::AssignPin(unsigned int)>:
    b06c:	e5903004 	ldr	r3, [r0, #4]
    b070:	e92d4070 	push	{r4, r5, r6, lr}
    b074:	e3530036 	cmp	r3, #54	; 0x36
    b078:	e1a05000 	mov	r5, r0
    b07c:	e1a04001 	mov	r4, r1
    b080:	0a000003 	beq	b094 <CGPIOPin::AssignPin(unsigned int)+0x28>
    b084:	e3a02040 	mov	r2, #64	; 0x40
    b088:	e59f1064 	ldr	r1, [pc, #100]	; b0f4 <CGPIOPin::AssignPin(unsigned int)+0x88>
    b08c:	e59f0064 	ldr	r0, [pc, #100]	; b0f8 <CGPIOPin::AssignPin(unsigned int)+0x8c>
    b090:	ebfffd10 	bl	a4d8 <assertion_failed>
    b094:	e3540035 	cmp	r4, #53	; 0x35
    b098:	e5854004 	str	r4, [r5, #4]
    b09c:	8a000007 	bhi	b0c0 <CGPIOPin::AssignPin(unsigned int)+0x54>
    b0a0:	e3a03001 	mov	r3, #1
    b0a4:	e204201f 	and	r2, r4, #31
    b0a8:	e1a042a4 	lsr	r4, r4, #5
    b0ac:	e1a03213 	lsl	r3, r3, r2
    b0b0:	e1a04104 	lsl	r4, r4, #2
    b0b4:	e585300c 	str	r3, [r5, #12]
    b0b8:	e5854008 	str	r4, [r5, #8]
    b0bc:	e8bd8070 	pop	{r4, r5, r6, pc}
    b0c0:	eb0008ea 	bl	d470 <CMachineInfo::Get()>
    b0c4:	e6ef1074 	uxtb	r1, r4
    b0c8:	eb0008bb 	bl	d3bc <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>
    b0cc:	e3500035 	cmp	r0, #53	; 0x35
    b0d0:	e1a04000 	mov	r4, r0
    b0d4:	e5850004 	str	r0, [r5, #4]
    b0d8:	9afffff0 	bls	b0a0 <CGPIOPin::AssignPin(unsigned int)+0x34>
    b0dc:	e3a02047 	mov	r2, #71	; 0x47
    b0e0:	e59f100c 	ldr	r1, [pc, #12]	; b0f4 <CGPIOPin::AssignPin(unsigned int)+0x88>
    b0e4:	e59f0010 	ldr	r0, [pc, #16]	; b0fc <CGPIOPin::AssignPin(unsigned int)+0x90>
    b0e8:	ebfffcfa 	bl	a4d8 <assertion_failed>
    b0ec:	e5954004 	ldr	r4, [r5, #4]
    b0f0:	eaffffea 	b	b0a0 <CGPIOPin::AssignPin(unsigned int)+0x34>
    b0f4:	00014124 	.word	0x00014124
    b0f8:	00014130 	.word	0x00014130
    b0fc:	00014144 	.word	0x00014144

0000b100 <CGPIOPin::Write(unsigned int)>:
    b100:	e5903004 	ldr	r3, [r0, #4]
    b104:	e92d4070 	push	{r4, r5, r6, lr}
    b108:	e3530035 	cmp	r3, #53	; 0x35
    b10c:	e1a04000 	mov	r4, r0
    b110:	e1a05001 	mov	r5, r1
    b114:	8a00001e 	bhi	b194 <CGPIOPin::Write(unsigned int)+0x94>
    b118:	e5d43010 	ldrb	r3, [r4, #16]
    b11c:	e3530003 	cmp	r3, #3
    b120:	ca000016 	bgt	b180 <CGPIOPin::Write(unsigned int)+0x80>
    b124:	e3a03000 	mov	r3, #0
    b128:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    b12c:	e3550001 	cmp	r5, #1
    b130:	9a00000b 	bls	b164 <CGPIOPin::Write(unsigned int)+0x64>
    b134:	e3a02098 	mov	r2, #152	; 0x98
    b138:	e59f1068 	ldr	r1, [pc, #104]	; b1a8 <CGPIOPin::Write(unsigned int)+0xa8>
    b13c:	e59f0068 	ldr	r0, [pc, #104]	; b1ac <CGPIOPin::Write(unsigned int)+0xac>
    b140:	ebfffce4 	bl	a4d8 <assertion_failed>
    b144:	e5845014 	str	r5, [r4, #20]
    b148:	e59f5060 	ldr	r5, [pc, #96]	; b1b0 <CGPIOPin::Write(unsigned int)+0xb0>
    b14c:	e594100c 	ldr	r1, [r4, #12]
    b150:	e5942008 	ldr	r2, [r4, #8]
    b154:	e3a03000 	mov	r3, #0
    b158:	e7851002 	str	r1, [r5, r2]
    b15c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    b160:	e8bd8070 	pop	{r4, r5, r6, pc}
    b164:	e59f3044 	ldr	r3, [pc, #68]	; b1b0 <CGPIOPin::Write(unsigned int)+0xb0>
    b168:	e59f2044 	ldr	r2, [pc, #68]	; b1b4 <CGPIOPin::Write(unsigned int)+0xb4>
    b16c:	e3550000 	cmp	r5, #0
    b170:	e5845014 	str	r5, [r4, #20]
    b174:	11a05003 	movne	r5, r3
    b178:	01a05002 	moveq	r5, r2
    b17c:	eafffff2 	b	b14c <CGPIOPin::Write(unsigned int)+0x4c>
    b180:	e3a02094 	mov	r2, #148	; 0x94
    b184:	e59f101c 	ldr	r1, [pc, #28]	; b1a8 <CGPIOPin::Write(unsigned int)+0xa8>
    b188:	e59f0028 	ldr	r0, [pc, #40]	; b1b8 <CGPIOPin::Write(unsigned int)+0xb8>
    b18c:	ebfffcd1 	bl	a4d8 <assertion_failed>
    b190:	eaffffe3 	b	b124 <CGPIOPin::Write(unsigned int)+0x24>
    b194:	e3a02091 	mov	r2, #145	; 0x91
    b198:	e59f1008 	ldr	r1, [pc, #8]	; b1a8 <CGPIOPin::Write(unsigned int)+0xa8>
    b19c:	e59f0018 	ldr	r0, [pc, #24]	; b1bc <CGPIOPin::Write(unsigned int)+0xbc>
    b1a0:	ebfffccc 	bl	a4d8 <assertion_failed>
    b1a4:	eaffffdb 	b	b118 <CGPIOPin::Write(unsigned int)+0x18>
    b1a8:	00014124 	.word	0x00014124
    b1ac:	0001417c 	.word	0x0001417c
    b1b0:	2020001c 	.word	0x2020001c
    b1b4:	20200028 	.word	0x20200028
    b1b8:	00014158 	.word	0x00014158
    b1bc:	00014144 	.word	0x00014144

0000b1c0 <CGPIOPin::Read() const>:
    b1c0:	e5903004 	ldr	r3, [r0, #4]
    b1c4:	e92d4010 	push	{r4, lr}
    b1c8:	e3530035 	cmp	r3, #53	; 0x35
    b1cc:	e1a04000 	mov	r4, r0
    b1d0:	8a000013 	bhi	b224 <CGPIOPin::Read() const+0x64>
    b1d4:	e5d43010 	ldrb	r3, [r4, #16]
    b1d8:	e2432002 	sub	r2, r3, #2
    b1dc:	e3530000 	cmp	r3, #0
    b1e0:	13520001 	cmpne	r2, #1
    b1e4:	9a000003 	bls	b1f8 <CGPIOPin::Read() const+0x38>
    b1e8:	e3a020a8 	mov	r2, #168	; 0xa8
    b1ec:	e59f1044 	ldr	r1, [pc, #68]	; b238 <CGPIOPin::Read() const+0x78>
    b1f0:	e59f0044 	ldr	r0, [pc, #68]	; b23c <CGPIOPin::Read() const+0x7c>
    b1f4:	ebfffcb7 	bl	a4d8 <assertion_failed>
    b1f8:	e3a03000 	mov	r3, #0
    b1fc:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    b200:	e59f1038 	ldr	r1, [pc, #56]	; b240 <CGPIOPin::Read() const+0x80>
    b204:	e5940008 	ldr	r0, [r4, #8]
    b208:	e594200c 	ldr	r2, [r4, #12]
    b20c:	e7901001 	ldr	r1, [r0, r1]
    b210:	e1110002 	tst	r1, r2
    b214:	13a00001 	movne	r0, #1
    b218:	01a00003 	moveq	r0, r3
    b21c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    b220:	e8bd8010 	pop	{r4, pc}
    b224:	e3a020a4 	mov	r2, #164	; 0xa4
    b228:	e59f1008 	ldr	r1, [pc, #8]	; b238 <CGPIOPin::Read() const+0x78>
    b22c:	e59f0010 	ldr	r0, [pc, #16]	; b244 <CGPIOPin::Read() const+0x84>
    b230:	ebfffca8 	bl	a4d8 <assertion_failed>
    b234:	eaffffe6 	b	b1d4 <CGPIOPin::Read() const+0x14>
    b238:	00014124 	.word	0x00014124
    b23c:	0001419c 	.word	0x0001419c
    b240:	20200034 	.word	0x20200034
    b244:	00014144 	.word	0x00014144

0000b248 <CGPIOPin::Invert()>:
    b248:	e5d03010 	ldrb	r3, [r0, #16]
    b24c:	e92d4010 	push	{r4, lr}
    b250:	e3530001 	cmp	r3, #1
    b254:	e1a04000 	mov	r4, r0
    b258:	0a000003 	beq	b26c <CGPIOPin::Invert()+0x24>
    b25c:	e3a020b5 	mov	r2, #181	; 0xb5
    b260:	e59f1018 	ldr	r1, [pc, #24]	; b280 <CGPIOPin::Invert()+0x38>
    b264:	e59f0018 	ldr	r0, [pc, #24]	; b284 <CGPIOPin::Invert()+0x3c>
    b268:	ebfffc9a 	bl	a4d8 <assertion_failed>
    b26c:	e5941014 	ldr	r1, [r4, #20]
    b270:	e1a00004 	mov	r0, r4
    b274:	e8bd4010 	pop	{r4, lr}
    b278:	e2211001 	eor	r1, r1, #1
    b27c:	eaffff9f 	b	b100 <CGPIOPin::Write(unsigned int)>
    b280:	00014124 	.word	0x00014124
    b284:	000141f8 	.word	0x000141f8

0000b288 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)>:
    b288:	e5d03010 	ldrb	r3, [r0, #16]
    b28c:	e92d4070 	push	{r4, r5, r6, lr}
    b290:	e1a05001 	mov	r5, r1
    b294:	e2431002 	sub	r1, r3, #2
    b298:	e3530000 	cmp	r3, #0
    b29c:	13510001 	cmpne	r1, #1
    b2a0:	e1a04000 	mov	r4, r0
    b2a4:	e1a06002 	mov	r6, r2
    b2a8:	9a000003 	bls	b2bc <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x34>
    b2ac:	e3a020be 	mov	r2, #190	; 0xbe
    b2b0:	e59f10b4 	ldr	r1, [pc, #180]	; b36c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe4>
    b2b4:	e59f00b4 	ldr	r0, [pc, #180]	; b370 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe8>
    b2b8:	ebfffc86 	bl	a4d8 <assertion_failed>
    b2bc:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    b2c0:	e3530006 	cmp	r3, #6
    b2c4:	0a000003 	beq	b2d8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x50>
    b2c8:	e3a020c0 	mov	r2, #192	; 0xc0
    b2cc:	e59f1098 	ldr	r1, [pc, #152]	; b36c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe4>
    b2d0:	e59f009c 	ldr	r0, [pc, #156]	; b374 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xec>
    b2d4:	ebfffc7f 	bl	a4d8 <assertion_failed>
    b2d8:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    b2dc:	e3530006 	cmp	r3, #6
    b2e0:	0a000003 	beq	b2f4 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x6c>
    b2e4:	e3a020c1 	mov	r2, #193	; 0xc1
    b2e8:	e59f107c 	ldr	r1, [pc, #124]	; b36c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe4>
    b2ec:	e59f0084 	ldr	r0, [pc, #132]	; b378 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xf0>
    b2f0:	ebfffc78 	bl	a4d8 <assertion_failed>
    b2f4:	e3550000 	cmp	r5, #0
    b2f8:	0a000016 	beq	b358 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xd0>
    b2fc:	e594301c 	ldr	r3, [r4, #28]
    b300:	e3530000 	cmp	r3, #0
    b304:	0a000003 	beq	b318 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x90>
    b308:	e3a020c4 	mov	r2, #196	; 0xc4
    b30c:	e59f1058 	ldr	r1, [pc, #88]	; b36c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe4>
    b310:	e59f0064 	ldr	r0, [pc, #100]	; b37c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xf4>
    b314:	ebfffc6f 	bl	a4d8 <assertion_failed>
    b318:	e5940018 	ldr	r0, [r4, #24]
    b31c:	e584501c 	str	r5, [r4, #28]
    b320:	e3500000 	cmp	r0, #0
    b324:	e5846020 	str	r6, [r4, #32]
    b328:	0a000002 	beq	b338 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xb0>
    b32c:	e1a01004 	mov	r1, r4
    b330:	e8bd4070 	pop	{r4, r5, r6, lr}
    b334:	ea001fee 	b	132f4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
    b338:	e59f102c 	ldr	r1, [pc, #44]	; b36c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe4>
    b33c:	e59f003c 	ldr	r0, [pc, #60]	; b380 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xf8>
    b340:	e3a020c9 	mov	r2, #201	; 0xc9
    b344:	ebfffc63 	bl	a4d8 <assertion_failed>
    b348:	e5940018 	ldr	r0, [r4, #24]
    b34c:	e1a01004 	mov	r1, r4
    b350:	e8bd4070 	pop	{r4, r5, r6, lr}
    b354:	ea001fe6 	b	132f4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
    b358:	e3a020c3 	mov	r2, #195	; 0xc3
    b35c:	e59f1008 	ldr	r1, [pc, #8]	; b36c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe4>
    b360:	e59f001c 	ldr	r0, [pc, #28]	; b384 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xfc>
    b364:	ebfffc5b 	bl	a4d8 <assertion_failed>
    b368:	eaffffe3 	b	b2fc <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x74>
    b36c:	00014124 	.word	0x00014124
    b370:	0001419c 	.word	0x0001419c
    b374:	00014214 	.word	0x00014214
    b378:	00014238 	.word	0x00014238
    b37c:	00014260 	.word	0x00014260
    b380:	00014270 	.word	0x00014270
    b384:	000143e0 	.word	0x000143e0

0000b388 <CGPIOPin::DisconnectInterrupt()>:
    b388:	e5d03010 	ldrb	r3, [r0, #16]
    b38c:	e92d4010 	push	{r4, lr}
    b390:	e2432002 	sub	r2, r3, #2
    b394:	e3530000 	cmp	r3, #0
    b398:	13520001 	cmpne	r2, #1
    b39c:	e1a04000 	mov	r4, r0
    b3a0:	9a000003 	bls	b3b4 <CGPIOPin::DisconnectInterrupt()+0x2c>
    b3a4:	e3a020d1 	mov	r2, #209	; 0xd1
    b3a8:	e59f109c 	ldr	r1, [pc, #156]	; b44c <CGPIOPin::DisconnectInterrupt()+0xc4>
    b3ac:	e59f009c 	ldr	r0, [pc, #156]	; b450 <CGPIOPin::DisconnectInterrupt()+0xc8>
    b3b0:	ebfffc48 	bl	a4d8 <assertion_failed>
    b3b4:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    b3b8:	e3530006 	cmp	r3, #6
    b3bc:	0a000003 	beq	b3d0 <CGPIOPin::DisconnectInterrupt()+0x48>
    b3c0:	e3a020d3 	mov	r2, #211	; 0xd3
    b3c4:	e59f1080 	ldr	r1, [pc, #128]	; b44c <CGPIOPin::DisconnectInterrupt()+0xc4>
    b3c8:	e59f0084 	ldr	r0, [pc, #132]	; b454 <CGPIOPin::DisconnectInterrupt()+0xcc>
    b3cc:	ebfffc41 	bl	a4d8 <assertion_failed>
    b3d0:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    b3d4:	e3530006 	cmp	r3, #6
    b3d8:	0a000003 	beq	b3ec <CGPIOPin::DisconnectInterrupt()+0x64>
    b3dc:	e3a020d4 	mov	r2, #212	; 0xd4
    b3e0:	e59f1064 	ldr	r1, [pc, #100]	; b44c <CGPIOPin::DisconnectInterrupt()+0xc4>
    b3e4:	e59f006c 	ldr	r0, [pc, #108]	; b458 <CGPIOPin::DisconnectInterrupt()+0xd0>
    b3e8:	ebfffc3a 	bl	a4d8 <assertion_failed>
    b3ec:	e594301c 	ldr	r3, [r4, #28]
    b3f0:	e3530000 	cmp	r3, #0
    b3f4:	0a00000f 	beq	b438 <CGPIOPin::DisconnectInterrupt()+0xb0>
    b3f8:	e3a03000 	mov	r3, #0
    b3fc:	e5940018 	ldr	r0, [r4, #24]
    b400:	e584301c 	str	r3, [r4, #28]
    b404:	e1500003 	cmp	r0, r3
    b408:	0a000002 	beq	b418 <CGPIOPin::DisconnectInterrupt()+0x90>
    b40c:	e1a01004 	mov	r1, r4
    b410:	e8bd4010 	pop	{r4, lr}
    b414:	ea001fdf 	b	13398 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
    b418:	e59f102c 	ldr	r1, [pc, #44]	; b44c <CGPIOPin::DisconnectInterrupt()+0xc4>
    b41c:	e59f0038 	ldr	r0, [pc, #56]	; b45c <CGPIOPin::DisconnectInterrupt()+0xd4>
    b420:	e3a020d9 	mov	r2, #217	; 0xd9
    b424:	ebfffc2b 	bl	a4d8 <assertion_failed>
    b428:	e5940018 	ldr	r0, [r4, #24]
    b42c:	e1a01004 	mov	r1, r4
    b430:	e8bd4010 	pop	{r4, lr}
    b434:	ea001fd7 	b	13398 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
    b438:	e3a020d6 	mov	r2, #214	; 0xd6
    b43c:	e59f1008 	ldr	r1, [pc, #8]	; b44c <CGPIOPin::DisconnectInterrupt()+0xc4>
    b440:	e59f0018 	ldr	r0, [pc, #24]	; b460 <CGPIOPin::DisconnectInterrupt()+0xd8>
    b444:	ebfffc23 	bl	a4d8 <assertion_failed>
    b448:	eaffffea 	b	b3f8 <CGPIOPin::DisconnectInterrupt()+0x70>
    b44c:	00014124 	.word	0x00014124
    b450:	0001419c 	.word	0x0001419c
    b454:	00014214 	.word	0x00014214
    b458:	00014238 	.word	0x00014238
    b45c:	00014270 	.word	0x00014270
    b460:	00014280 	.word	0x00014280

0000b464 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)>:
    b464:	e5d03010 	ldrb	r3, [r0, #16]
    b468:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b46c:	e2432002 	sub	r2, r3, #2
    b470:	e3530000 	cmp	r3, #0
    b474:	13520001 	cmpne	r2, #1
    b478:	e1a04000 	mov	r4, r0
    b47c:	e1a05001 	mov	r5, r1
    b480:	9a000003 	bls	b494 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x30>
    b484:	e3a020e1 	mov	r2, #225	; 0xe1
    b488:	e59f10d8 	ldr	r1, [pc, #216]	; b568 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x104>
    b48c:	e59f00d8 	ldr	r0, [pc, #216]	; b56c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x108>
    b490:	ebfffc10 	bl	a4d8 <assertion_failed>
    b494:	e594301c 	ldr	r3, [r4, #28]
    b498:	e3530000 	cmp	r3, #0
    b49c:	0a00002c 	beq	b554 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf0>
    b4a0:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    b4a4:	e3530006 	cmp	r3, #6
    b4a8:	0a000003 	beq	b4bc <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x58>
    b4ac:	e3a020e4 	mov	r2, #228	; 0xe4
    b4b0:	e59f10b0 	ldr	r1, [pc, #176]	; b568 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x104>
    b4b4:	e59f00b4 	ldr	r0, [pc, #180]	; b570 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x10c>
    b4b8:	ebfffc06 	bl	a4d8 <assertion_failed>
    b4bc:	e3550005 	cmp	r5, #5
    b4c0:	ca000017 	bgt	b524 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xc0>
    b4c4:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    b4c8:	e1530005 	cmp	r3, r5
    b4cc:	0a00001b 	beq	b540 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xdc>
    b4d0:	e59f709c 	ldr	r7, [pc, #156]	; b574 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x110>
    b4d4:	e5942008 	ldr	r2, [r4, #8]
    b4d8:	e5970000 	ldr	r0, [r7]
    b4dc:	e59f6094 	ldr	r6, [pc, #148]	; b578 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x114>
    b4e0:	e0853085 	add	r3, r5, r5, lsl #1
    b4e4:	e3500000 	cmp	r0, #0
    b4e8:	e5c45024 	strb	r5, [r4, #36]	; 0x24
    b4ec:	e0826006 	add	r6, r2, r6
    b4f0:	e1a05103 	lsl	r5, r3, #2
    b4f4:	1a000008 	bne	b51c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xb8>
    b4f8:	e594200c 	ldr	r2, [r4, #12]
    b4fc:	e7963005 	ldr	r3, [r6, r5]
    b500:	e1833002 	orr	r3, r3, r2
    b504:	e7863005 	str	r3, [r6, r5]
    b508:	e5973000 	ldr	r3, [r7]
    b50c:	e3530000 	cmp	r3, #0
    b510:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    b514:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    b518:	ea001bbc 	b	12410 <LeaveCritical>
    b51c:	eb001b8e 	bl	1235c <EnterCritical>
    b520:	eafffff4 	b	b4f8 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x94>
    b524:	e3a020e5 	mov	r2, #229	; 0xe5
    b528:	e59f1038 	ldr	r1, [pc, #56]	; b568 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x104>
    b52c:	e59f0048 	ldr	r0, [pc, #72]	; b57c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x118>
    b530:	ebfffbe8 	bl	a4d8 <assertion_failed>
    b534:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    b538:	e1530005 	cmp	r3, r5
    b53c:	1affffe3 	bne	b4d0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x6c>
    b540:	e3a020e6 	mov	r2, #230	; 0xe6
    b544:	e59f101c 	ldr	r1, [pc, #28]	; b568 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x104>
    b548:	e59f0030 	ldr	r0, [pc, #48]	; b580 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x11c>
    b54c:	ebfffbe1 	bl	a4d8 <assertion_failed>
    b550:	eaffffde 	b	b4d0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x6c>
    b554:	e3a020e2 	mov	r2, #226	; 0xe2
    b558:	e59f1008 	ldr	r1, [pc, #8]	; b568 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x104>
    b55c:	e59f0020 	ldr	r0, [pc, #32]	; b584 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x120>
    b560:	ebfffbdc 	bl	a4d8 <assertion_failed>
    b564:	eaffffcd 	b	b4a0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x3c>
    b568:	00014124 	.word	0x00014124
    b56c:	0001419c 	.word	0x0001419c
    b570:	00014214 	.word	0x00014214
    b574:	00015ea4 	.word	0x00015ea4
    b578:	2020004c 	.word	0x2020004c
    b57c:	00014290 	.word	0x00014290
    b580:	000142b4 	.word	0x000142b4
    b584:	00014280 	.word	0x00014280

0000b588 <CGPIOPin::DisableInterrupt()>:
    b588:	e5d03010 	ldrb	r3, [r0, #16]
    b58c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b590:	e2432002 	sub	r2, r3, #2
    b594:	e3530000 	cmp	r3, #0
    b598:	13520001 	cmpne	r2, #1
    b59c:	e1a05000 	mov	r5, r0
    b5a0:	9a000003 	bls	b5b4 <CGPIOPin::DisableInterrupt()+0x2c>
    b5a4:	e3a020f7 	mov	r2, #247	; 0xf7
    b5a8:	e59f1080 	ldr	r1, [pc, #128]	; b630 <CGPIOPin::DisableInterrupt()+0xa8>
    b5ac:	e59f0080 	ldr	r0, [pc, #128]	; b634 <CGPIOPin::DisableInterrupt()+0xac>
    b5b0:	ebfffbc8 	bl	a4d8 <assertion_failed>
    b5b4:	e5d53024 	ldrb	r3, [r5, #36]	; 0x24
    b5b8:	e3530005 	cmp	r3, #5
    b5bc:	ca000015 	bgt	b618 <CGPIOPin::DisableInterrupt()+0x90>
    b5c0:	e59f7070 	ldr	r7, [pc, #112]	; b638 <CGPIOPin::DisableInterrupt()+0xb0>
    b5c4:	e5952008 	ldr	r2, [r5, #8]
    b5c8:	e5970000 	ldr	r0, [r7]
    b5cc:	e59f6068 	ldr	r6, [pc, #104]	; b63c <CGPIOPin::DisableInterrupt()+0xb4>
    b5d0:	e0833083 	add	r3, r3, r3, lsl #1
    b5d4:	e3500000 	cmp	r0, #0
    b5d8:	e1a04103 	lsl	r4, r3, #2
    b5dc:	e0826006 	add	r6, r2, r6
    b5e0:	1a00000a 	bne	b610 <CGPIOPin::DisableInterrupt()+0x88>
    b5e4:	e7963004 	ldr	r3, [r6, r4]
    b5e8:	e595200c 	ldr	r2, [r5, #12]
    b5ec:	e1c33002 	bic	r3, r3, r2
    b5f0:	e7863004 	str	r3, [r6, r4]
    b5f4:	e5973000 	ldr	r3, [r7]
    b5f8:	e3530000 	cmp	r3, #0
    b5fc:	0a000000 	beq	b604 <CGPIOPin::DisableInterrupt()+0x7c>
    b600:	eb001b82 	bl	12410 <LeaveCritical>
    b604:	e3a03006 	mov	r3, #6
    b608:	e5c53024 	strb	r3, [r5, #36]	; 0x24
    b60c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    b610:	eb001b51 	bl	1235c <EnterCritical>
    b614:	eafffff2 	b	b5e4 <CGPIOPin::DisableInterrupt()+0x5c>
    b618:	e3a020f9 	mov	r2, #249	; 0xf9
    b61c:	e59f100c 	ldr	r1, [pc, #12]	; b630 <CGPIOPin::DisableInterrupt()+0xa8>
    b620:	e59f0018 	ldr	r0, [pc, #24]	; b640 <CGPIOPin::DisableInterrupt()+0xb8>
    b624:	ebfffbab 	bl	a4d8 <assertion_failed>
    b628:	e5d53024 	ldrb	r3, [r5, #36]	; 0x24
    b62c:	eaffffe3 	b	b5c0 <CGPIOPin::DisableInterrupt()+0x38>
    b630:	00014124 	.word	0x00014124
    b634:	0001419c 	.word	0x0001419c
    b638:	00015ea4 	.word	0x00015ea4
    b63c:	2020004c 	.word	0x2020004c
    b640:	000142d0 	.word	0x000142d0

0000b644 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)>:
    b644:	e5d03010 	ldrb	r3, [r0, #16]
    b648:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b64c:	e2432002 	sub	r2, r3, #2
    b650:	e3530000 	cmp	r3, #0
    b654:	13520001 	cmpne	r2, #1
    b658:	e1a04000 	mov	r4, r0
    b65c:	e1a05001 	mov	r5, r1
    b660:	9a000003 	bls	b674 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x30>
    b664:	e59f20dc 	ldr	r2, [pc, #220]	; b748 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x104>
    b668:	e59f10dc 	ldr	r1, [pc, #220]	; b74c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x108>
    b66c:	e59f00dc 	ldr	r0, [pc, #220]	; b750 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x10c>
    b670:	ebfffb98 	bl	a4d8 <assertion_failed>
    b674:	e594301c 	ldr	r3, [r4, #28]
    b678:	e3530000 	cmp	r3, #0
    b67c:	0a00002c 	beq	b734 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf0>
    b680:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    b684:	e3530006 	cmp	r3, #6
    b688:	0a000003 	beq	b69c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x58>
    b68c:	e59f20c0 	ldr	r2, [pc, #192]	; b754 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x110>
    b690:	e59f10b4 	ldr	r1, [pc, #180]	; b74c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x108>
    b694:	e59f00bc 	ldr	r0, [pc, #188]	; b758 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x114>
    b698:	ebfffb8e 	bl	a4d8 <assertion_failed>
    b69c:	e3550005 	cmp	r5, #5
    b6a0:	ca000017 	bgt	b704 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xc0>
    b6a4:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    b6a8:	e1530005 	cmp	r3, r5
    b6ac:	0a00001b 	beq	b720 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xdc>
    b6b0:	e59f70a4 	ldr	r7, [pc, #164]	; b75c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x118>
    b6b4:	e5942008 	ldr	r2, [r4, #8]
    b6b8:	e5970000 	ldr	r0, [r7]
    b6bc:	e59f609c 	ldr	r6, [pc, #156]	; b760 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x11c>
    b6c0:	e0853085 	add	r3, r5, r5, lsl #1
    b6c4:	e3500000 	cmp	r0, #0
    b6c8:	e5c45025 	strb	r5, [r4, #37]	; 0x25
    b6cc:	e0826006 	add	r6, r2, r6
    b6d0:	e1a05103 	lsl	r5, r3, #2
    b6d4:	1a000008 	bne	b6fc <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xb8>
    b6d8:	e594200c 	ldr	r2, [r4, #12]
    b6dc:	e7963005 	ldr	r3, [r6, r5]
    b6e0:	e1833002 	orr	r3, r3, r2
    b6e4:	e7863005 	str	r3, [r6, r5]
    b6e8:	e5973000 	ldr	r3, [r7]
    b6ec:	e3530000 	cmp	r3, #0
    b6f0:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    b6f4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    b6f8:	ea001b44 	b	12410 <LeaveCritical>
    b6fc:	eb001b16 	bl	1235c <EnterCritical>
    b700:	eafffff4 	b	b6d8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x94>
    b704:	e59f2058 	ldr	r2, [pc, #88]	; b764 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x120>
    b708:	e59f103c 	ldr	r1, [pc, #60]	; b74c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x108>
    b70c:	e59f0054 	ldr	r0, [pc, #84]	; b768 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x124>
    b710:	ebfffb70 	bl	a4d8 <assertion_failed>
    b714:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    b718:	e1530005 	cmp	r3, r5
    b71c:	1affffe3 	bne	b6b0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x6c>
    b720:	e59f2044 	ldr	r2, [pc, #68]	; b76c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x128>
    b724:	e59f1020 	ldr	r1, [pc, #32]	; b74c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x108>
    b728:	e59f0040 	ldr	r0, [pc, #64]	; b770 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x12c>
    b72c:	ebfffb69 	bl	a4d8 <assertion_failed>
    b730:	eaffffde 	b	b6b0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x6c>
    b734:	e59f2038 	ldr	r2, [pc, #56]	; b774 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x130>
    b738:	e59f100c 	ldr	r1, [pc, #12]	; b74c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x108>
    b73c:	e59f0034 	ldr	r0, [pc, #52]	; b778 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x134>
    b740:	ebfffb64 	bl	a4d8 <assertion_failed>
    b744:	eaffffcd 	b	b680 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x3c>
    b748:	0000010a 	.word	0x0000010a
    b74c:	00014124 	.word	0x00014124
    b750:	0001419c 	.word	0x0001419c
    b754:	0000010d 	.word	0x0000010d
    b758:	00014238 	.word	0x00014238
    b75c:	00015ea4 	.word	0x00015ea4
    b760:	2020004c 	.word	0x2020004c
    b764:	0000010e 	.word	0x0000010e
    b768:	00014290 	.word	0x00014290
    b76c:	0000010f 	.word	0x0000010f
    b770:	000142f4 	.word	0x000142f4
    b774:	0000010b 	.word	0x0000010b
    b778:	00014280 	.word	0x00014280

0000b77c <CGPIOPin::DisableInterrupt2()>:
    b77c:	e5d03010 	ldrb	r3, [r0, #16]
    b780:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b784:	e2432002 	sub	r2, r3, #2
    b788:	e3530000 	cmp	r3, #0
    b78c:	13520001 	cmpne	r2, #1
    b790:	e1a05000 	mov	r5, r0
    b794:	9a000003 	bls	b7a8 <CGPIOPin::DisableInterrupt2()+0x2c>
    b798:	e3a02e12 	mov	r2, #288	; 0x120
    b79c:	e59f1080 	ldr	r1, [pc, #128]	; b824 <CGPIOPin::DisableInterrupt2()+0xa8>
    b7a0:	e59f0080 	ldr	r0, [pc, #128]	; b828 <CGPIOPin::DisableInterrupt2()+0xac>
    b7a4:	ebfffb4b 	bl	a4d8 <assertion_failed>
    b7a8:	e5d53025 	ldrb	r3, [r5, #37]	; 0x25
    b7ac:	e3530005 	cmp	r3, #5
    b7b0:	ca000015 	bgt	b80c <CGPIOPin::DisableInterrupt2()+0x90>
    b7b4:	e59f7070 	ldr	r7, [pc, #112]	; b82c <CGPIOPin::DisableInterrupt2()+0xb0>
    b7b8:	e5952008 	ldr	r2, [r5, #8]
    b7bc:	e5970000 	ldr	r0, [r7]
    b7c0:	e59f6068 	ldr	r6, [pc, #104]	; b830 <CGPIOPin::DisableInterrupt2()+0xb4>
    b7c4:	e0833083 	add	r3, r3, r3, lsl #1
    b7c8:	e3500000 	cmp	r0, #0
    b7cc:	e1a04103 	lsl	r4, r3, #2
    b7d0:	e0826006 	add	r6, r2, r6
    b7d4:	1a00000a 	bne	b804 <CGPIOPin::DisableInterrupt2()+0x88>
    b7d8:	e7963004 	ldr	r3, [r6, r4]
    b7dc:	e595200c 	ldr	r2, [r5, #12]
    b7e0:	e1c33002 	bic	r3, r3, r2
    b7e4:	e7863004 	str	r3, [r6, r4]
    b7e8:	e5973000 	ldr	r3, [r7]
    b7ec:	e3530000 	cmp	r3, #0
    b7f0:	0a000000 	beq	b7f8 <CGPIOPin::DisableInterrupt2()+0x7c>
    b7f4:	eb001b05 	bl	12410 <LeaveCritical>
    b7f8:	e3a03006 	mov	r3, #6
    b7fc:	e5c53025 	strb	r3, [r5, #37]	; 0x25
    b800:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    b804:	eb001ad4 	bl	1235c <EnterCritical>
    b808:	eafffff2 	b	b7d8 <CGPIOPin::DisableInterrupt2()+0x5c>
    b80c:	e59f2020 	ldr	r2, [pc, #32]	; b834 <CGPIOPin::DisableInterrupt2()+0xb8>
    b810:	e59f100c 	ldr	r1, [pc, #12]	; b824 <CGPIOPin::DisableInterrupt2()+0xa8>
    b814:	e59f001c 	ldr	r0, [pc, #28]	; b838 <CGPIOPin::DisableInterrupt2()+0xbc>
    b818:	ebfffb2e 	bl	a4d8 <assertion_failed>
    b81c:	e5d53025 	ldrb	r3, [r5, #37]	; 0x25
    b820:	eaffffe3 	b	b7b4 <CGPIOPin::DisableInterrupt2()+0x38>
    b824:	00014124 	.word	0x00014124
    b828:	0001419c 	.word	0x0001419c
    b82c:	00015ea4 	.word	0x00015ea4
    b830:	2020004c 	.word	0x2020004c
    b834:	00000122 	.word	0x00000122
    b838:	00014310 	.word	0x00014310

0000b83c <CGPIOPin::ReadAll()>:
    b83c:	e59f3004 	ldr	r3, [pc, #4]	; b848 <CGPIOPin::ReadAll()+0xc>
    b840:	e5930034 	ldr	r0, [r3, #52]	; 0x34
    b844:	e12fff1e 	bx	lr
    b848:	20200000 	.word	0x20200000

0000b84c <CGPIOPin::SetPullUpMode(unsigned int)>:
    b84c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    b850:	e1a08000 	mov	r8, r0
    b854:	e59f4078 	ldr	r4, [pc, #120]	; b8d4 <CGPIOPin::SetPullUpMode(unsigned int)+0x88>
    b858:	e1a09001 	mov	r9, r1
    b85c:	e5940000 	ldr	r0, [r4]
    b860:	e5986008 	ldr	r6, [r8, #8]
    b864:	e3500000 	cmp	r0, #0
    b868:	e59f5068 	ldr	r5, [pc, #104]	; b8d8 <CGPIOPin::SetPullUpMode(unsigned int)+0x8c>
    b86c:	1a000016 	bne	b8cc <CGPIOPin::SetPullUpMode(unsigned int)+0x80>
    b870:	e3590002 	cmp	r9, #2
    b874:	8a00000f 	bhi	b8b8 <CGPIOPin::SetPullUpMode(unsigned int)+0x6c>
    b878:	e59f705c 	ldr	r7, [pc, #92]	; b8dc <CGPIOPin::SetPullUpMode(unsigned int)+0x90>
    b87c:	e3a00005 	mov	r0, #5
    b880:	e5879094 	str	r9, [r7, #148]	; 0x94
    b884:	eb00165f 	bl	11208 <CTimer::SimpleusDelay(unsigned int)>
    b888:	e598300c 	ldr	r3, [r8, #12]
    b88c:	e3a00005 	mov	r0, #5
    b890:	e7863005 	str	r3, [r6, r5]
    b894:	eb00165b 	bl	11208 <CTimer::SimpleusDelay(unsigned int)>
    b898:	e3a03000 	mov	r3, #0
    b89c:	e5873094 	str	r3, [r7, #148]	; 0x94
    b8a0:	e7863005 	str	r3, [r6, r5]
    b8a4:	e5943000 	ldr	r3, [r4]
    b8a8:	e3530000 	cmp	r3, #0
    b8ac:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    b8b0:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    b8b4:	ea001ad5 	b	12410 <LeaveCritical>
    b8b8:	e59f2020 	ldr	r2, [pc, #32]	; b8e0 <CGPIOPin::SetPullUpMode(unsigned int)+0x94>
    b8bc:	e59f1020 	ldr	r1, [pc, #32]	; b8e4 <CGPIOPin::SetPullUpMode(unsigned int)+0x98>
    b8c0:	e59f0020 	ldr	r0, [pc, #32]	; b8e8 <CGPIOPin::SetPullUpMode(unsigned int)+0x9c>
    b8c4:	ebfffb03 	bl	a4d8 <assertion_failed>
    b8c8:	eaffffea 	b	b878 <CGPIOPin::SetPullUpMode(unsigned int)+0x2c>
    b8cc:	eb001aa2 	bl	1235c <EnterCritical>
    b8d0:	eaffffe6 	b	b870 <CGPIOPin::SetPullUpMode(unsigned int)+0x24>
    b8d4:	00015ea4 	.word	0x00015ea4
    b8d8:	20200098 	.word	0x20200098
    b8dc:	20200000 	.word	0x20200000
    b8e0:	0000013b 	.word	0x0000013b
    b8e4:	00014124 	.word	0x00014124
    b8e8:	00014334 	.word	0x00014334

0000b8ec <CGPIOPin::SetAlternateFunction(unsigned int)>:
    b8ec:	e5902004 	ldr	r2, [r0, #4]
    b8f0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b8f4:	e3520035 	cmp	r2, #53	; 0x35
    b8f8:	e1a06001 	mov	r6, r1
    b8fc:	8a000022 	bhi	b98c <CGPIOPin::SetAlternateFunction(unsigned int)+0xa0>
    b900:	e59f30a0 	ldr	r3, [pc, #160]	; b9a8 <CGPIOPin::SetAlternateFunction(unsigned int)+0xbc>
    b904:	e3560005 	cmp	r6, #5
    b908:	e0831293 	umull	r1, r3, r3, r2
    b90c:	e1a031a3 	lsr	r3, r3, #3
    b910:	e2835302 	add	r5, r3, #134217728	; 0x8000000
    b914:	e0833103 	add	r3, r3, r3, lsl #2
    b918:	e2855702 	add	r5, r5, #524288	; 0x80000
    b91c:	e0423083 	sub	r3, r2, r3, lsl #1
    b920:	e1a05105 	lsl	r5, r5, #2
    b924:	e0834083 	add	r4, r3, r3, lsl #1
    b928:	8a000012 	bhi	b978 <CGPIOPin::SetAlternateFunction(unsigned int)+0x8c>
    b92c:	e59f7078 	ldr	r7, [pc, #120]	; b9ac <CGPIOPin::SetAlternateFunction(unsigned int)+0xc0>
    b930:	e5970000 	ldr	r0, [r7]
    b934:	e3500000 	cmp	r0, #0
    b938:	1a00000c 	bne	b970 <CGPIOPin::SetAlternateFunction(unsigned int)+0x84>
    b93c:	e3a01007 	mov	r1, #7
    b940:	e59f3068 	ldr	r3, [pc, #104]	; b9b0 <CGPIOPin::SetAlternateFunction(unsigned int)+0xc4>
    b944:	e5952000 	ldr	r2, [r5]
    b948:	e0836106 	add	r6, r3, r6, lsl #2
    b94c:	e5963010 	ldr	r3, [r6, #16]
    b950:	e1c22411 	bic	r2, r2, r1, lsl r4
    b954:	e1824413 	orr	r4, r2, r3, lsl r4
    b958:	e5854000 	str	r4, [r5]
    b95c:	e5973000 	ldr	r3, [r7]
    b960:	e3530000 	cmp	r3, #0
    b964:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    b968:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    b96c:	ea001aa7 	b	12410 <LeaveCritical>
    b970:	eb001a79 	bl	1235c <EnterCritical>
    b974:	eafffff0 	b	b93c <CGPIOPin::SetAlternateFunction(unsigned int)+0x50>
    b978:	e3a02f53 	mov	r2, #332	; 0x14c
    b97c:	e59f1030 	ldr	r1, [pc, #48]	; b9b4 <CGPIOPin::SetAlternateFunction(unsigned int)+0xc8>
    b980:	e59f0030 	ldr	r0, [pc, #48]	; b9b8 <CGPIOPin::SetAlternateFunction(unsigned int)+0xcc>
    b984:	ebfffad3 	bl	a4d8 <assertion_failed>
    b988:	eaffffe7 	b	b92c <CGPIOPin::SetAlternateFunction(unsigned int)+0x40>
    b98c:	e1a04000 	mov	r4, r0
    b990:	e3a02f52 	mov	r2, #328	; 0x148
    b994:	e59f1018 	ldr	r1, [pc, #24]	; b9b4 <CGPIOPin::SetAlternateFunction(unsigned int)+0xc8>
    b998:	e59f001c 	ldr	r0, [pc, #28]	; b9bc <CGPIOPin::SetAlternateFunction(unsigned int)+0xd0>
    b99c:	ebfffacd 	bl	a4d8 <assertion_failed>
    b9a0:	e5942004 	ldr	r2, [r4, #4]
    b9a4:	eaffffd5 	b	b900 <CGPIOPin::SetAlternateFunction(unsigned int)+0x14>
    b9a8:	cccccccd 	.word	0xcccccccd
    b9ac:	00015ea4 	.word	0x00015ea4
    b9b0:	000140fc 	.word	0x000140fc
    b9b4:	00014124 	.word	0x00014124
    b9b8:	00014340 	.word	0x00014340
    b9bc:	00014144 	.word	0x00014144

0000b9c0 <CGPIOPin::SetMode(TGPIOMode, bool)>:
    b9c0:	e3510009 	cmp	r1, #9
    b9c4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b9c8:	e1a05001 	mov	r5, r1
    b9cc:	e1a04000 	mov	r4, r0
    b9d0:	e1a06002 	mov	r6, r2
    b9d4:	ca00003f 	bgt	bad8 <CGPIOPin::SetMode(TGPIOMode, bool)+0x118>
    b9d8:	e5c45010 	strb	r5, [r4, #16]
    b9dc:	e3a02000 	mov	r2, #0
    b9e0:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
    b9e4:	e5d43010 	ldrb	r3, [r4, #16]
    b9e8:	e2431004 	sub	r1, r3, #4
    b9ec:	e6ef0071 	uxtb	r0, r1
    b9f0:	e3500005 	cmp	r0, #5
    b9f4:	9a000030 	bls	babc <CGPIOPin::SetMode(TGPIOMode, bool)+0xfc>
    b9f8:	e3530001 	cmp	r3, #1
    b9fc:	13a03000 	movne	r3, #0
    ba00:	02063001 	andeq	r3, r6, #1
    ba04:	e3530000 	cmp	r3, #0
    ba08:	1a000055 	bne	bb64 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1a4>
    ba0c:	e5943004 	ldr	r3, [r4, #4]
    ba10:	e3530035 	cmp	r3, #53	; 0x35
    ba14:	8a00003a 	bhi	bb04 <CGPIOPin::SetMode(TGPIOMode, bool)+0x144>
    ba18:	e59f5154 	ldr	r5, [pc, #340]	; bb74 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1b4>
    ba1c:	e59f8154 	ldr	r8, [pc, #340]	; bb78 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1b8>
    ba20:	e0852395 	umull	r2, r5, r5, r3
    ba24:	e5980000 	ldr	r0, [r8]
    ba28:	e1a051a5 	lsr	r5, r5, #3
    ba2c:	e2857302 	add	r7, r5, #134217728	; 0x8000000
    ba30:	e0855105 	add	r5, r5, r5, lsl #2
    ba34:	e2877702 	add	r7, r7, #524288	; 0x80000
    ba38:	e0435085 	sub	r5, r3, r5, lsl #1
    ba3c:	e3500000 	cmp	r0, #0
    ba40:	e1a07107 	lsl	r7, r7, #2
    ba44:	e0855085 	add	r5, r5, r5, lsl #1
    ba48:	1a000033 	bne	bb1c <CGPIOPin::SetMode(TGPIOMode, bool)+0x15c>
    ba4c:	e5d42010 	ldrb	r2, [r4, #16]
    ba50:	e3a01007 	mov	r1, #7
    ba54:	e2422001 	sub	r2, r2, #1
    ba58:	e16f2f12 	clz	r2, r2
    ba5c:	e5973000 	ldr	r3, [r7]
    ba60:	e1a022a2 	lsr	r2, r2, #5
    ba64:	e1c33511 	bic	r3, r3, r1, lsl r5
    ba68:	e1835512 	orr	r5, r3, r2, lsl r5
    ba6c:	e5875000 	str	r5, [r7]
    ba70:	e5983000 	ldr	r3, [r8]
    ba74:	e3530000 	cmp	r3, #0
    ba78:	1a000029 	bne	bb24 <CGPIOPin::SetMode(TGPIOMode, bool)+0x164>
    ba7c:	e3560000 	cmp	r6, #0
    ba80:	0a00000a 	beq	bab0 <CGPIOPin::SetMode(TGPIOMode, bool)+0xf0>
    ba84:	e5d43010 	ldrb	r3, [r4, #16]
    ba88:	e3530003 	cmp	r3, #3
    ba8c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    ba90:	ea000006 	b	bab0 <CGPIOPin::SetMode(TGPIOMode, bool)+0xf0>
    ba94:	0000bb54 	.word	0x0000bb54
    ba98:	0000bb44 	.word	0x0000bb44
    ba9c:	0000bb34 	.word	0x0000bb34
    baa0:	0000baa4 	.word	0x0000baa4
    baa4:	e1a00004 	mov	r0, r4
    baa8:	e3a01001 	mov	r1, #1
    baac:	ebffff66 	bl	b84c <CGPIOPin::SetPullUpMode(unsigned int)>
    bab0:	e3a03000 	mov	r3, #0
    bab4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    bab8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    babc:	e1560002 	cmp	r6, r2
    bac0:	1a000009 	bne	baec <CGPIOPin::SetMode(TGPIOMode, bool)+0x12c>
    bac4:	e1a00004 	mov	r0, r4
    bac8:	ebffff87 	bl	b8ec <CGPIOPin::SetAlternateFunction(unsigned int)>
    bacc:	e3a03000 	mov	r3, #0
    bad0:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    bad4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    bad8:	e3a0204f 	mov	r2, #79	; 0x4f
    badc:	e59f1098 	ldr	r1, [pc, #152]	; bb7c <CGPIOPin::SetMode(TGPIOMode, bool)+0x1bc>
    bae0:	e59f0098 	ldr	r0, [pc, #152]	; bb80 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1c0>
    bae4:	ebfffa7b 	bl	a4d8 <assertion_failed>
    bae8:	eaffffba 	b	b9d8 <CGPIOPin::SetMode(TGPIOMode, bool)+0x18>
    baec:	e1a01002 	mov	r1, r2
    baf0:	e1a00004 	mov	r0, r4
    baf4:	ebffff54 	bl	b84c <CGPIOPin::SetPullUpMode(unsigned int)>
    baf8:	e5d43010 	ldrb	r3, [r4, #16]
    bafc:	e2431004 	sub	r1, r3, #4
    bb00:	eaffffef 	b	bac4 <CGPIOPin::SetMode(TGPIOMode, bool)+0x104>
    bb04:	e3a02068 	mov	r2, #104	; 0x68
    bb08:	e59f106c 	ldr	r1, [pc, #108]	; bb7c <CGPIOPin::SetMode(TGPIOMode, bool)+0x1bc>
    bb0c:	e59f0070 	ldr	r0, [pc, #112]	; bb84 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1c4>
    bb10:	ebfffa70 	bl	a4d8 <assertion_failed>
    bb14:	e5943004 	ldr	r3, [r4, #4]
    bb18:	eaffffbe 	b	ba18 <CGPIOPin::SetMode(TGPIOMode, bool)+0x58>
    bb1c:	eb001a0e 	bl	1235c <EnterCritical>
    bb20:	eaffffc9 	b	ba4c <CGPIOPin::SetMode(TGPIOMode, bool)+0x8c>
    bb24:	eb001a39 	bl	12410 <LeaveCritical>
    bb28:	e3560000 	cmp	r6, #0
    bb2c:	0affffdf 	beq	bab0 <CGPIOPin::SetMode(TGPIOMode, bool)+0xf0>
    bb30:	eaffffd3 	b	ba84 <CGPIOPin::SetMode(TGPIOMode, bool)+0xc4>
    bb34:	e1a00004 	mov	r0, r4
    bb38:	e3a01002 	mov	r1, #2
    bb3c:	ebffff42 	bl	b84c <CGPIOPin::SetPullUpMode(unsigned int)>
    bb40:	eaffffda 	b	bab0 <CGPIOPin::SetMode(TGPIOMode, bool)+0xf0>
    bb44:	e1a00004 	mov	r0, r4
    bb48:	e3a01000 	mov	r1, #0
    bb4c:	ebfffd6b 	bl	b100 <CGPIOPin::Write(unsigned int)>
    bb50:	eaffffd6 	b	bab0 <CGPIOPin::SetMode(TGPIOMode, bool)+0xf0>
    bb54:	e1a00004 	mov	r0, r4
    bb58:	e3a01000 	mov	r1, #0
    bb5c:	ebffff3a 	bl	b84c <CGPIOPin::SetPullUpMode(unsigned int)>
    bb60:	eaffffd2 	b	bab0 <CGPIOPin::SetMode(TGPIOMode, bool)+0xf0>
    bb64:	e1a01002 	mov	r1, r2
    bb68:	e1a00004 	mov	r0, r4
    bb6c:	ebffff36 	bl	b84c <CGPIOPin::SetPullUpMode(unsigned int)>
    bb70:	eaffffa5 	b	ba0c <CGPIOPin::SetMode(TGPIOMode, bool)+0x4c>
    bb74:	cccccccd 	.word	0xcccccccd
    bb78:	00015ea4 	.word	0x00015ea4
    bb7c:	00014124 	.word	0x00014124
    bb80:	00014350 	.word	0x00014350
    bb84:	00014144 	.word	0x00014144

0000bb88 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>:
    bb88:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    bb8c:	e3a0c006 	mov	ip, #6
    bb90:	e3a0e000 	mov	lr, #0
    bb94:	e3a07036 	mov	r7, #54	; 0x36
    bb98:	e3a0600a 	mov	r6, #10
    bb9c:	e1a04000 	mov	r4, r0
    bba0:	e1a05002 	mov	r5, r2
    bba4:	e5803018 	str	r3, [r0, #24]
    bba8:	e59f302c 	ldr	r3, [pc, #44]	; bbdc <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x54>
    bbac:	e580e01c 	str	lr, [r0, #28]
    bbb0:	e8800088 	stm	r0, {r3, r7}
    bbb4:	e5c0c024 	strb	ip, [r0, #36]	; 0x24
    bbb8:	e5c0c025 	strb	ip, [r0, #37]	; 0x25
    bbbc:	e5c06010 	strb	r6, [r0, #16]
    bbc0:	ebfffd29 	bl	b06c <CGPIOPin::AssignPin(unsigned int)>
    bbc4:	e1a00004 	mov	r0, r4
    bbc8:	e1a01005 	mov	r1, r5
    bbcc:	e3a02001 	mov	r2, #1
    bbd0:	ebffff7a 	bl	b9c0 <CGPIOPin::SetMode(TGPIOMode, bool)>
    bbd4:	e1a00004 	mov	r0, r4
    bbd8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    bbdc:	00014104 	.word	0x00014104

0000bbe0 <CGPIOPin::InterruptHandler()>:
    bbe0:	e5d03010 	ldrb	r3, [r0, #16]
    bbe4:	e92d4010 	push	{r4, lr}
    bbe8:	e2432002 	sub	r2, r3, #2
    bbec:	e3530000 	cmp	r3, #0
    bbf0:	13520001 	cmpne	r2, #1
    bbf4:	e1a04000 	mov	r4, r0
    bbf8:	9a000003 	bls	bc0c <CGPIOPin::InterruptHandler()+0x2c>
    bbfc:	e59f2074 	ldr	r2, [pc, #116]	; bc78 <CGPIOPin::InterruptHandler()+0x98>
    bc00:	e59f1074 	ldr	r1, [pc, #116]	; bc7c <CGPIOPin::InterruptHandler()+0x9c>
    bc04:	e59f0074 	ldr	r0, [pc, #116]	; bc80 <CGPIOPin::InterruptHandler()+0xa0>
    bc08:	ebfffa32 	bl	a4d8 <assertion_failed>
    bc0c:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    bc10:	e3530005 	cmp	r3, #5
    bc14:	da000002 	ble	bc24 <CGPIOPin::InterruptHandler()+0x44>
    bc18:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    bc1c:	e3530005 	cmp	r3, #5
    bc20:	ca000005 	bgt	bc3c <CGPIOPin::InterruptHandler()+0x5c>
    bc24:	e594301c 	ldr	r3, [r4, #28]
    bc28:	e3530000 	cmp	r3, #0
    bc2c:	0a000009 	beq	bc58 <CGPIOPin::InterruptHandler()+0x78>
    bc30:	e5940020 	ldr	r0, [r4, #32]
    bc34:	e8bd4010 	pop	{r4, lr}
    bc38:	e12fff13 	bx	r3
    bc3c:	e59f2040 	ldr	r2, [pc, #64]	; bc84 <CGPIOPin::InterruptHandler()+0xa4>
    bc40:	e59f1034 	ldr	r1, [pc, #52]	; bc7c <CGPIOPin::InterruptHandler()+0x9c>
    bc44:	e59f003c 	ldr	r0, [pc, #60]	; bc88 <CGPIOPin::InterruptHandler()+0xa8>
    bc48:	ebfffa22 	bl	a4d8 <assertion_failed>
    bc4c:	e594301c 	ldr	r3, [r4, #28]
    bc50:	e3530000 	cmp	r3, #0
    bc54:	1afffff5 	bne	bc30 <CGPIOPin::InterruptHandler()+0x50>
    bc58:	e59f002c 	ldr	r0, [pc, #44]	; bc8c <CGPIOPin::InterruptHandler()+0xac>
    bc5c:	e59f202c 	ldr	r2, [pc, #44]	; bc90 <CGPIOPin::InterruptHandler()+0xb0>
    bc60:	e59f1014 	ldr	r1, [pc, #20]	; bc7c <CGPIOPin::InterruptHandler()+0x9c>
    bc64:	ebfffa1b 	bl	a4d8 <assertion_failed>
    bc68:	e594301c 	ldr	r3, [r4, #28]
    bc6c:	e5940020 	ldr	r0, [r4, #32]
    bc70:	e8bd4010 	pop	{r4, lr}
    bc74:	e12fff13 	bx	r3
    bc78:	0000015b 	.word	0x0000015b
    bc7c:	00014124 	.word	0x00014124
    bc80:	0001419c 	.word	0x0001419c
    bc84:	0000015d 	.word	0x0000015d
    bc88:	00014368 	.word	0x00014368
    bc8c:	00014280 	.word	0x00014280
    bc90:	0000015f 	.word	0x0000015f

0000bc94 <CGPIOPin::DisableAllInterrupts(unsigned int)>:
    bc94:	e3500035 	cmp	r0, #53	; 0x35
    bc98:	e92d4070 	push	{r4, r5, r6, lr}
    bc9c:	e1a05000 	mov	r5, r0
    bca0:	8a00001e 	bhi	bd20 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x8c>
    bca4:	e3a02001 	mov	r2, #1
    bca8:	e59f6084 	ldr	r6, [pc, #132]	; bd34 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xa0>
    bcac:	e59f4084 	ldr	r4, [pc, #132]	; bd38 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xa4>
    bcb0:	e5960000 	ldr	r0, [r6]
    bcb4:	e08442a5 	add	r4, r4, r5, lsr #5
    bcb8:	e3500000 	cmp	r0, #0
    bcbc:	e205501f 	and	r5, r5, #31
    bcc0:	e1a04104 	lsl	r4, r4, #2
    bcc4:	e1a05512 	lsl	r5, r2, r5
    bcc8:	1a00000f 	bne	bd0c <CGPIOPin::DisableAllInterrupts(unsigned int)+0x78>
    bccc:	e59f3068 	ldr	r3, [pc, #104]	; bd3c <CGPIOPin::DisableAllInterrupts(unsigned int)+0xa8>
    bcd0:	e1540003 	cmp	r4, r3
    bcd4:	8a00000b 	bhi	bd08 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x74>
    bcd8:	e1e02005 	mvn	r2, r5
    bcdc:	e59f1058 	ldr	r1, [pc, #88]	; bd3c <CGPIOPin::DisableAllInterrupts(unsigned int)+0xa8>
    bce0:	e5943000 	ldr	r3, [r4]
    bce4:	e0033002 	and	r3, r3, r2
    bce8:	e484300c 	str	r3, [r4], #12
    bcec:	e1540001 	cmp	r4, r1
    bcf0:	9afffffa 	bls	bce0 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x4c>
    bcf4:	e5963000 	ldr	r3, [r6]
    bcf8:	e3530000 	cmp	r3, #0
    bcfc:	08bd8070 	popeq	{r4, r5, r6, pc}
    bd00:	e8bd4070 	pop	{r4, r5, r6, lr}
    bd04:	ea0019c1 	b	12410 <LeaveCritical>
    bd08:	e8bd8070 	pop	{r4, r5, r6, pc}
    bd0c:	eb001992 	bl	1235c <EnterCritical>
    bd10:	e59f3024 	ldr	r3, [pc, #36]	; bd3c <CGPIOPin::DisableAllInterrupts(unsigned int)+0xa8>
    bd14:	e1540003 	cmp	r4, r3
    bd18:	9affffee 	bls	bcd8 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x44>
    bd1c:	eafffff4 	b	bcf4 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x60>
    bd20:	e59f2018 	ldr	r2, [pc, #24]	; bd40 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xac>
    bd24:	e59f1018 	ldr	r1, [pc, #24]	; bd44 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xb0>
    bd28:	e59f0018 	ldr	r0, [pc, #24]	; bd48 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xb4>
    bd2c:	ebfff9e9 	bl	a4d8 <assertion_failed>
    bd30:	eaffffdb 	b	bca4 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x10>
    bd34:	00015ea4 	.word	0x00015ea4
    bd38:	08080013 	.word	0x08080013
    bd3c:	2020008b 	.word	0x2020008b
    bd40:	00000165 	.word	0x00000165
    bd44:	00014124 	.word	0x00014124
    bd48:	000143b4 	.word	0x000143b4

0000bd4c <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE>:
    bd4c:	e3a02001 	mov	r2, #1
    bd50:	e59f3004 	ldr	r3, [pc, #4]	; bd5c <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE+0x10>
    bd54:	e5832000 	str	r2, [r3]
    bd58:	e12fff1e 	bx	lr
    bd5c:	00015ea4 	.word	0x00015ea4

0000bd60 <CInterruptSystem::CInterruptSystem()>:
    bd60:	e1a0c000 	mov	ip, r0
    bd64:	e2802f47 	add	r2, r0, #284	; 0x11c
    bd68:	e1a00002 	mov	r0, r2
    bd6c:	e3a01000 	mov	r1, #0
    bd70:	e24c3004 	sub	r3, ip, #4
    bd74:	e5a31004 	str	r1, [r3, #4]!
    bd78:	e1530000 	cmp	r3, r0
    bd7c:	e5a21004 	str	r1, [r2, #4]!
    bd80:	1afffffb 	bne	bd74 <CInterruptSystem::CInterruptSystem()+0x14>
    bd84:	e59f3008 	ldr	r3, [pc, #8]	; bd94 <CInterruptSystem::CInterruptSystem()+0x34>
    bd88:	e1a0000c 	mov	r0, ip
    bd8c:	e583c000 	str	ip, [r3]
    bd90:	e12fff1e 	bx	lr
    bd94:	00015ea8 	.word	0x00015ea8

0000bd98 <CInterruptSystem::~CInterruptSystem()>:
    bd98:	e3a02000 	mov	r2, #0
    bd9c:	e59f3004 	ldr	r3, [pc, #4]	; bda8 <CInterruptSystem::~CInterruptSystem()+0x10>
    bda0:	e5832000 	str	r2, [r3]
    bda4:	e12fff1e 	bx	lr
    bda8:	00015ea8 	.word	0x00015ea8

0000bdac <CInterruptSystem::Initialize()>:
    bdac:	e92d4010 	push	{r4, lr}
    bdb0:	e3a04000 	mov	r4, #0
    bdb4:	e59f2050 	ldr	r2, [pc, #80]	; be0c <CInterruptSystem::Initialize()+0x60>
    bdb8:	e59f3050 	ldr	r3, [pc, #80]	; be10 <CInterruptSystem::Initialize()+0x64>
    bdbc:	e1a02142 	asr	r2, r2, #2
    bdc0:	e1a03143 	asr	r3, r3, #2
    bdc4:	e2422002 	sub	r2, r2, #2
    bdc8:	e2433002 	sub	r3, r3, #2
    bdcc:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
    bdd0:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
    bdd4:	e5842018 	str	r2, [r4, #24]
    bdd8:	e584301c 	str	r3, [r4, #28]
    bddc:	eb0019b0 	bl	124a4 <SyncDataAndInstructionCache>
    bde0:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
    bde4:	e3e02000 	mvn	r2, #0
    bde8:	e59f3024 	ldr	r3, [pc, #36]	; be14 <CInterruptSystem::Initialize()+0x68>
    bdec:	e583420c 	str	r4, [r3, #524]	; 0x20c
    bdf0:	e583221c 	str	r2, [r3, #540]	; 0x21c
    bdf4:	e5832220 	str	r2, [r3, #544]	; 0x220
    bdf8:	e5832224 	str	r2, [r3, #548]	; 0x224
    bdfc:	ee074fba 	mcr	15, 0, r4, cr7, cr10, {5}
    be00:	f1080080 	cpsie	i
    be04:	e3a00001 	mov	r0, #1
    be08:	e8bd8010 	pop	{r4, pc}
    be0c:	00011f38 	.word	0x00011f38
    be10:	00011f44 	.word	0x00011f44
    be14:	2000b000 	.word	0x2000b000

0000be18 <CInterruptSystem::DisconnectFIQ()>:
    be18:	e92d4010 	push	{r4, lr}
    be1c:	e59f4068 	ldr	r4, [pc, #104]	; be8c <CInterruptSystem::DisconnectFIQ()+0x74>
    be20:	e5d42001 	ldrb	r2, [r4, #1]
    be24:	e5d43000 	ldrb	r3, [r4]
    be28:	e5d41002 	ldrb	r1, [r4, #2]
    be2c:	e1833402 	orr	r3, r3, r2, lsl #8
    be30:	e5d42003 	ldrb	r2, [r4, #3]
    be34:	e1833801 	orr	r3, r3, r1, lsl #16
    be38:	e1933c02 	orrs	r3, r3, r2, lsl #24
    be3c:	0a00000d 	beq	be78 <CInterruptSystem::DisconnectFIQ()+0x60>
    be40:	e3a03000 	mov	r3, #0
    be44:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    be48:	e59f2040 	ldr	r2, [pc, #64]	; be90 <CInterruptSystem::DisconnectFIQ()+0x78>
    be4c:	e582320c 	str	r3, [r2, #524]	; 0x20c
    be50:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    be54:	e5c43000 	strb	r3, [r4]
    be58:	e5c43001 	strb	r3, [r4, #1]
    be5c:	e5c43002 	strb	r3, [r4, #2]
    be60:	e5c43003 	strb	r3, [r4, #3]
    be64:	e5c43004 	strb	r3, [r4, #4]
    be68:	e5c43005 	strb	r3, [r4, #5]
    be6c:	e5c43006 	strb	r3, [r4, #6]
    be70:	e5c43007 	strb	r3, [r4, #7]
    be74:	e8bd8010 	pop	{r4, pc}
    be78:	e3a02086 	mov	r2, #134	; 0x86
    be7c:	e59f1010 	ldr	r1, [pc, #16]	; be94 <CInterruptSystem::DisconnectFIQ()+0x7c>
    be80:	e59f0010 	ldr	r0, [pc, #16]	; be98 <CInterruptSystem::DisconnectFIQ()+0x80>
    be84:	ebfff993 	bl	a4d8 <assertion_failed>
    be88:	eaffffec 	b	be40 <CInterruptSystem::DisconnectFIQ()+0x28>
    be8c:	00015dc4 	.word	0x00015dc4
    be90:	2000b000 	.word	0x2000b000
    be94:	000143c8 	.word	0x000143c8
    be98:	000143d8 	.word	0x000143d8

0000be9c <CInterruptSystem::EnableIRQ(unsigned int)>:
    be9c:	e92d4010 	push	{r4, lr}
    bea0:	e3a03000 	mov	r3, #0
    bea4:	e1a04000 	mov	r4, r0
    bea8:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    beac:	e3500047 	cmp	r0, #71	; 0x47
    beb0:	8a00000d 	bhi	beec <CInterruptSystem::EnableIRQ(unsigned int)+0x50>
    beb4:	e350001f 	cmp	r0, #31
    beb8:	8a000007 	bhi	bedc <CInterruptSystem::EnableIRQ(unsigned int)+0x40>
    bebc:	e59f2040 	ldr	r2, [pc, #64]	; bf04 <CInterruptSystem::EnableIRQ(unsigned int)+0x68>
    bec0:	e3a03001 	mov	r3, #1
    bec4:	e204401f 	and	r4, r4, #31
    bec8:	e1a04413 	lsl	r4, r3, r4
    becc:	e5824000 	str	r4, [r2]
    bed0:	e3a03000 	mov	r3, #0
    bed4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    bed8:	e8bd8010 	pop	{r4, pc}
    bedc:	e350003f 	cmp	r0, #63	; 0x3f
    bee0:	959f2020 	ldrls	r2, [pc, #32]	; bf08 <CInterruptSystem::EnableIRQ(unsigned int)+0x6c>
    bee4:	859f2020 	ldrhi	r2, [pc, #32]	; bf0c <CInterruptSystem::EnableIRQ(unsigned int)+0x70>
    bee8:	eafffff4 	b	bec0 <CInterruptSystem::EnableIRQ(unsigned int)+0x24>
    beec:	e3a02092 	mov	r2, #146	; 0x92
    bef0:	e59f1018 	ldr	r1, [pc, #24]	; bf10 <CInterruptSystem::EnableIRQ(unsigned int)+0x74>
    bef4:	e59f0018 	ldr	r0, [pc, #24]	; bf14 <CInterruptSystem::EnableIRQ(unsigned int)+0x78>
    bef8:	ebfff976 	bl	a4d8 <assertion_failed>
    befc:	e59f2008 	ldr	r2, [pc, #8]	; bf0c <CInterruptSystem::EnableIRQ(unsigned int)+0x70>
    bf00:	eaffffee 	b	bec0 <CInterruptSystem::EnableIRQ(unsigned int)+0x24>
    bf04:	2000b210 	.word	0x2000b210
    bf08:	2000b214 	.word	0x2000b214
    bf0c:	2000b218 	.word	0x2000b218
    bf10:	000143c8 	.word	0x000143c8
    bf14:	000143f0 	.word	0x000143f0

0000bf18 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>:
    bf18:	e3510047 	cmp	r1, #71	; 0x47
    bf1c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    bf20:	e1a04001 	mov	r4, r1
    bf24:	e1a05000 	mov	r5, r0
    bf28:	e1a08002 	mov	r8, r2
    bf2c:	e1a07003 	mov	r7, r3
    bf30:	8a00000c 	bhi	bf68 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x50>
    bf34:	e7953104 	ldr	r3, [r5, r4, lsl #2]
    bf38:	e0856104 	add	r6, r5, r4, lsl #2
    bf3c:	e3530000 	cmp	r3, #0
    bf40:	0a000003 	beq	bf54 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x3c>
    bf44:	e3a02062 	mov	r2, #98	; 0x62
    bf48:	e59f102c 	ldr	r1, [pc, #44]	; bf7c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x64>
    bf4c:	e59f002c 	ldr	r0, [pc, #44]	; bf80 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x68>
    bf50:	ebfff960 	bl	a4d8 <assertion_failed>
    bf54:	e7858104 	str	r8, [r5, r4, lsl #2]
    bf58:	e1a00004 	mov	r0, r4
    bf5c:	e5867120 	str	r7, [r6, #288]	; 0x120
    bf60:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    bf64:	eaffffcc 	b	be9c <CInterruptSystem::EnableIRQ(unsigned int)>
    bf68:	e3a02061 	mov	r2, #97	; 0x61
    bf6c:	e59f1008 	ldr	r1, [pc, #8]	; bf7c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x64>
    bf70:	e59f000c 	ldr	r0, [pc, #12]	; bf84 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x6c>
    bf74:	ebfff957 	bl	a4d8 <assertion_failed>
    bf78:	eaffffed 	b	bf34 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x1c>
    bf7c:	000143c8 	.word	0x000143c8
    bf80:	00014404 	.word	0x00014404
    bf84:	000143f0 	.word	0x000143f0

0000bf88 <CInterruptSystem::DisableIRQ(unsigned int)>:
    bf88:	e92d4010 	push	{r4, lr}
    bf8c:	e3a03000 	mov	r3, #0
    bf90:	e1a04000 	mov	r4, r0
    bf94:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    bf98:	e3500047 	cmp	r0, #71	; 0x47
    bf9c:	8a00000d 	bhi	bfd8 <CInterruptSystem::DisableIRQ(unsigned int)+0x50>
    bfa0:	e350001f 	cmp	r0, #31
    bfa4:	8a000007 	bhi	bfc8 <CInterruptSystem::DisableIRQ(unsigned int)+0x40>
    bfa8:	e59f2040 	ldr	r2, [pc, #64]	; bff0 <CInterruptSystem::DisableIRQ(unsigned int)+0x68>
    bfac:	e3a03001 	mov	r3, #1
    bfb0:	e204401f 	and	r4, r4, #31
    bfb4:	e1a04413 	lsl	r4, r3, r4
    bfb8:	e5824000 	str	r4, [r2]
    bfbc:	e3a03000 	mov	r3, #0
    bfc0:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    bfc4:	e8bd8010 	pop	{r4, pc}
    bfc8:	e350003f 	cmp	r0, #63	; 0x3f
    bfcc:	959f2020 	ldrls	r2, [pc, #32]	; bff4 <CInterruptSystem::DisableIRQ(unsigned int)+0x6c>
    bfd0:	859f2020 	ldrhi	r2, [pc, #32]	; bff8 <CInterruptSystem::DisableIRQ(unsigned int)+0x70>
    bfd4:	eafffff4 	b	bfac <CInterruptSystem::DisableIRQ(unsigned int)+0x24>
    bfd8:	e3a0209d 	mov	r2, #157	; 0x9d
    bfdc:	e59f1018 	ldr	r1, [pc, #24]	; bffc <CInterruptSystem::DisableIRQ(unsigned int)+0x74>
    bfe0:	e59f0018 	ldr	r0, [pc, #24]	; c000 <CInterruptSystem::DisableIRQ(unsigned int)+0x78>
    bfe4:	ebfff93b 	bl	a4d8 <assertion_failed>
    bfe8:	e59f2008 	ldr	r2, [pc, #8]	; bff8 <CInterruptSystem::DisableIRQ(unsigned int)+0x70>
    bfec:	eaffffee 	b	bfac <CInterruptSystem::DisableIRQ(unsigned int)+0x24>
    bff0:	2000b21c 	.word	0x2000b21c
    bff4:	2000b220 	.word	0x2000b220
    bff8:	2000b224 	.word	0x2000b224
    bffc:	000143c8 	.word	0x000143c8
    c000:	000143f0 	.word	0x000143f0

0000c004 <CInterruptSystem::DisconnectIRQ(unsigned int)>:
    c004:	e3510047 	cmp	r1, #71	; 0x47
    c008:	e92d4070 	push	{r4, r5, r6, lr}
    c00c:	e1a04001 	mov	r4, r1
    c010:	e1a05000 	mov	r5, r0
    c014:	8a000009 	bhi	c040 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x3c>
    c018:	e7953104 	ldr	r3, [r5, r4, lsl #2]
    c01c:	e0856104 	add	r6, r5, r4, lsl #2
    c020:	e3530000 	cmp	r3, #0
    c024:	0a00000d 	beq	c060 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x5c>
    c028:	e1a00004 	mov	r0, r4
    c02c:	ebffffd5 	bl	bf88 <CInterruptSystem::DisableIRQ(unsigned int)>
    c030:	e3a03000 	mov	r3, #0
    c034:	e7853104 	str	r3, [r5, r4, lsl #2]
    c038:	e5863120 	str	r3, [r6, #288]	; 0x120
    c03c:	e8bd8070 	pop	{r4, r5, r6, pc}
    c040:	e3a0206c 	mov	r2, #108	; 0x6c
    c044:	e59f1028 	ldr	r1, [pc, #40]	; c074 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x70>
    c048:	e59f0028 	ldr	r0, [pc, #40]	; c078 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x74>
    c04c:	ebfff921 	bl	a4d8 <assertion_failed>
    c050:	e7953104 	ldr	r3, [r5, r4, lsl #2]
    c054:	e0856104 	add	r6, r5, r4, lsl #2
    c058:	e3530000 	cmp	r3, #0
    c05c:	1afffff1 	bne	c028 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x24>
    c060:	e3a0206d 	mov	r2, #109	; 0x6d
    c064:	e59f1008 	ldr	r1, [pc, #8]	; c074 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x70>
    c068:	e59f000c 	ldr	r0, [pc, #12]	; c07c <CInterruptSystem::DisconnectIRQ(unsigned int)+0x78>
    c06c:	ebfff919 	bl	a4d8 <assertion_failed>
    c070:	eaffffec 	b	c028 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x24>
    c074:	000143c8 	.word	0x000143c8
    c078:	000143f0 	.word	0x000143f0
    c07c:	00014420 	.word	0x00014420

0000c080 <CInterruptSystem::EnableFIQ(unsigned int)>:
    c080:	e92d4010 	push	{r4, lr}
    c084:	e3a03000 	mov	r3, #0
    c088:	e1a04000 	mov	r4, r0
    c08c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    c090:	e3500047 	cmp	r0, #71	; 0x47
    c094:	9a000003 	bls	c0a8 <CInterruptSystem::EnableFIQ(unsigned int)+0x28>
    c098:	e3a020a8 	mov	r2, #168	; 0xa8
    c09c:	e59f101c 	ldr	r1, [pc, #28]	; c0c0 <CInterruptSystem::EnableFIQ(unsigned int)+0x40>
    c0a0:	e59f001c 	ldr	r0, [pc, #28]	; c0c4 <CInterruptSystem::EnableFIQ(unsigned int)+0x44>
    c0a4:	ebfff90b 	bl	a4d8 <assertion_failed>
    c0a8:	e59f3018 	ldr	r3, [pc, #24]	; c0c8 <CInterruptSystem::EnableFIQ(unsigned int)+0x48>
    c0ac:	e3844080 	orr	r4, r4, #128	; 0x80
    c0b0:	e583420c 	str	r4, [r3, #524]	; 0x20c
    c0b4:	e3a03000 	mov	r3, #0
    c0b8:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    c0bc:	e8bd8010 	pop	{r4, pc}
    c0c0:	000143c8 	.word	0x000143c8
    c0c4:	0001443c 	.word	0x0001443c
    c0c8:	2000b000 	.word	0x2000b000

0000c0cc <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>:
    c0cc:	e3510047 	cmp	r1, #71	; 0x47
    c0d0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c0d4:	e1a07001 	mov	r7, r1
    c0d8:	e1a06002 	mov	r6, r2
    c0dc:	e1a05003 	mov	r5, r3
    c0e0:	8a00001f 	bhi	c164 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x98>
    c0e4:	e3560000 	cmp	r6, #0
    c0e8:	0a000022 	beq	c178 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xac>
    c0ec:	e59f4098 	ldr	r4, [pc, #152]	; c18c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc0>
    c0f0:	e5d42001 	ldrb	r2, [r4, #1]
    c0f4:	e5d43000 	ldrb	r3, [r4]
    c0f8:	e5d41002 	ldrb	r1, [r4, #2]
    c0fc:	e1833402 	orr	r3, r3, r2, lsl #8
    c100:	e5d42003 	ldrb	r2, [r4, #3]
    c104:	e1833801 	orr	r3, r3, r1, lsl #16
    c108:	e1933c02 	orrs	r3, r3, r2, lsl #24
    c10c:	0a000003 	beq	c120 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x54>
    c110:	e3a0207c 	mov	r2, #124	; 0x7c
    c114:	e59f1074 	ldr	r1, [pc, #116]	; c190 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc4>
    c118:	e59f0074 	ldr	r0, [pc, #116]	; c194 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc8>
    c11c:	ebfff8ed 	bl	a4d8 <assertion_failed>
    c120:	e1a0e426 	lsr	lr, r6, #8
    c124:	e1a0c826 	lsr	ip, r6, #16
    c128:	e1a01c26 	lsr	r1, r6, #24
    c12c:	e1a02425 	lsr	r2, r5, #8
    c130:	e1a03825 	lsr	r3, r5, #16
    c134:	e5c45004 	strb	r5, [r4, #4]
    c138:	e1a05c25 	lsr	r5, r5, #24
    c13c:	e1a00007 	mov	r0, r7
    c140:	e5c46000 	strb	r6, [r4]
    c144:	e5c4e001 	strb	lr, [r4, #1]
    c148:	e5c4c002 	strb	ip, [r4, #2]
    c14c:	e5c41003 	strb	r1, [r4, #3]
    c150:	e5c42005 	strb	r2, [r4, #5]
    c154:	e5c43006 	strb	r3, [r4, #6]
    c158:	e5c45007 	strb	r5, [r4, #7]
    c15c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    c160:	eaffffc6 	b	c080 <CInterruptSystem::EnableFIQ(unsigned int)>
    c164:	e3a0207a 	mov	r2, #122	; 0x7a
    c168:	e59f1020 	ldr	r1, [pc, #32]	; c190 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc4>
    c16c:	e59f0024 	ldr	r0, [pc, #36]	; c198 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xcc>
    c170:	ebfff8d8 	bl	a4d8 <assertion_failed>
    c174:	eaffffda 	b	c0e4 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x18>
    c178:	e3a0207b 	mov	r2, #123	; 0x7b
    c17c:	e59f100c 	ldr	r1, [pc, #12]	; c190 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc4>
    c180:	e59f0014 	ldr	r0, [pc, #20]	; c19c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xd0>
    c184:	ebfff8d3 	bl	a4d8 <assertion_failed>
    c188:	eaffffd7 	b	c0ec <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x20>
    c18c:	00015dc4 	.word	0x00015dc4
    c190:	000143c8 	.word	0x000143c8
    c194:	00014450 	.word	0x00014450
    c198:	0001443c 	.word	0x0001443c
    c19c:	000143e0 	.word	0x000143e0

0000c1a0 <CInterruptSystem::DisableFIQ()>:
    c1a0:	e3a03000 	mov	r3, #0
    c1a4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    c1a8:	e59f2008 	ldr	r2, [pc, #8]	; c1b8 <CInterruptSystem::DisableFIQ()+0x18>
    c1ac:	e582320c 	str	r3, [r2, #524]	; 0x20c
    c1b0:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    c1b4:	e12fff1e 	bx	lr
    c1b8:	2000b000 	.word	0x2000b000

0000c1bc <CInterruptSystem::Get()>:
    c1bc:	e92d4010 	push	{r4, lr}
    c1c0:	e59f4020 	ldr	r4, [pc, #32]	; c1e8 <CInterruptSystem::Get()+0x2c>
    c1c4:	e5940000 	ldr	r0, [r4]
    c1c8:	e3500000 	cmp	r0, #0
    c1cc:	18bd8010 	popne	{r4, pc}
    c1d0:	e3a020ba 	mov	r2, #186	; 0xba
    c1d4:	e59f1010 	ldr	r1, [pc, #16]	; c1ec <CInterruptSystem::Get()+0x30>
    c1d8:	e59f0010 	ldr	r0, [pc, #16]	; c1f0 <CInterruptSystem::Get()+0x34>
    c1dc:	ebfff8bd 	bl	a4d8 <assertion_failed>
    c1e0:	e5940000 	ldr	r0, [r4]
    c1e4:	e8bd8010 	pop	{r4, pc}
    c1e8:	00015ea8 	.word	0x00015ea8
    c1ec:	000143c8 	.word	0x000143c8
    c1f0:	00014468 	.word	0x00014468

0000c1f4 <CInterruptSystem::CallIRQHandler(unsigned int)>:
    c1f4:	e3510047 	cmp	r1, #71	; 0x47
    c1f8:	e92d4070 	push	{r4, r5, r6, lr}
    c1fc:	e1a06001 	mov	r6, r1
    c200:	e1a05000 	mov	r5, r0
    c204:	8a000007 	bhi	c228 <CInterruptSystem::CallIRQHandler(unsigned int)+0x34>
    c208:	e7954106 	ldr	r4, [r5, r6, lsl #2]
    c20c:	e0855106 	add	r5, r5, r6, lsl #2
    c210:	e3540000 	cmp	r4, #0
    c214:	0a00000b 	beq	c248 <CInterruptSystem::CallIRQHandler(unsigned int)+0x54>
    c218:	e5950120 	ldr	r0, [r5, #288]	; 0x120
    c21c:	e12fff34 	blx	r4
    c220:	e3a00001 	mov	r0, #1
    c224:	e8bd8070 	pop	{r4, r5, r6, pc}
    c228:	e3a020c0 	mov	r2, #192	; 0xc0
    c22c:	e59f1024 	ldr	r1, [pc, #36]	; c258 <CInterruptSystem::CallIRQHandler(unsigned int)+0x64>
    c230:	e59f0024 	ldr	r0, [pc, #36]	; c25c <CInterruptSystem::CallIRQHandler(unsigned int)+0x68>
    c234:	ebfff8a7 	bl	a4d8 <assertion_failed>
    c238:	e7954106 	ldr	r4, [r5, r6, lsl #2]
    c23c:	e0855106 	add	r5, r5, r6, lsl #2
    c240:	e3540000 	cmp	r4, #0
    c244:	1afffff3 	bne	c218 <CInterruptSystem::CallIRQHandler(unsigned int)+0x24>
    c248:	e1a00006 	mov	r0, r6
    c24c:	ebffff4d 	bl	bf88 <CInterruptSystem::DisableIRQ(unsigned int)>
    c250:	e1a00004 	mov	r0, r4
    c254:	e8bd8070 	pop	{r4, r5, r6, pc}
    c258:	000143c8 	.word	0x000143c8
    c25c:	000143f0 	.word	0x000143f0

0000c260 <CInterruptSystem::InterruptHandler()>:
    c260:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c264:	e59f70a8 	ldr	r7, [pc, #168]	; c314 <CInterruptSystem::InterruptHandler()+0xb4>
    c268:	e24dd010 	sub	sp, sp, #16
    c26c:	e5973000 	ldr	r3, [r7]
    c270:	e3530000 	cmp	r3, #0
    c274:	0a000021 	beq	c300 <CInterruptSystem::InterruptHandler()+0xa0>
    c278:	e3a06000 	mov	r6, #0
    c27c:	ee076f9a 	mcr	15, 0, r6, cr7, cr10, {4}
    c280:	e59f3090 	ldr	r3, [pc, #144]	; c318 <CInterruptSystem::InterruptHandler()+0xb8>
    c284:	e5932204 	ldr	r2, [r3, #516]	; 0x204
    c288:	e58d2004 	str	r2, [sp, #4]
    c28c:	e5932208 	ldr	r2, [r3, #520]	; 0x208
    c290:	e58d2008 	str	r2, [sp, #8]
    c294:	e5933200 	ldr	r3, [r3, #512]	; 0x200
    c298:	e6ef3073 	uxtb	r3, r3
    c29c:	e58d300c 	str	r3, [sp, #12]
    c2a0:	ee076fba 	mcr	15, 0, r6, cr7, cr10, {5}
    c2a4:	e28d8004 	add	r8, sp, #4
    c2a8:	e4984004 	ldr	r4, [r8], #4
    c2ac:	e3540000 	cmp	r4, #0
    c2b0:	0a00000d 	beq	c2ec <CInterruptSystem::InterruptHandler()+0x8c>
    c2b4:	e1a05006 	mov	r5, r6
    c2b8:	ea000002 	b	c2c8 <CInterruptSystem::InterruptHandler()+0x68>
    c2bc:	e1b040a4 	lsrs	r4, r4, #1
    c2c0:	e2855001 	add	r5, r5, #1
    c2c4:	0a000008 	beq	c2ec <CInterruptSystem::InterruptHandler()+0x8c>
    c2c8:	e3140001 	tst	r4, #1
    c2cc:	0afffffa 	beq	c2bc <CInterruptSystem::InterruptHandler()+0x5c>
    c2d0:	e1a01005 	mov	r1, r5
    c2d4:	e5970000 	ldr	r0, [r7]
    c2d8:	ebffffc5 	bl	c1f4 <CInterruptSystem::CallIRQHandler(unsigned int)>
    c2dc:	e3500000 	cmp	r0, #0
    c2e0:	0afffff5 	beq	c2bc <CInterruptSystem::InterruptHandler()+0x5c>
    c2e4:	e28dd010 	add	sp, sp, #16
    c2e8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    c2ec:	e2866020 	add	r6, r6, #32
    c2f0:	e3560060 	cmp	r6, #96	; 0x60
    c2f4:	1affffeb 	bne	c2a8 <CInterruptSystem::InterruptHandler()+0x48>
    c2f8:	e28dd010 	add	sp, sp, #16
    c2fc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    c300:	e3a020d3 	mov	r2, #211	; 0xd3
    c304:	e59f1010 	ldr	r1, [pc, #16]	; c31c <CInterruptSystem::InterruptHandler()+0xbc>
    c308:	e59f0010 	ldr	r0, [pc, #16]	; c320 <CInterruptSystem::InterruptHandler()+0xc0>
    c30c:	ebfff871 	bl	a4d8 <assertion_failed>
    c310:	eaffffd8 	b	c278 <CInterruptSystem::InterruptHandler()+0x18>
    c314:	00015ea8 	.word	0x00015ea8
    c318:	2000b000 	.word	0x2000b000
    c31c:	000143c8 	.word	0x000143c8
    c320:	00014468 	.word	0x00014468

0000c324 <InterruptHandler>:
    c324:	e92d4010 	push	{r4, lr}
    c328:	e3a04000 	mov	r4, #0
    c32c:	ee074fba 	mcr	15, 0, r4, cr7, cr10, {5}
    c330:	ebffffca 	bl	c260 <CInterruptSystem::InterruptHandler()>
    c334:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
    c338:	e8bd8010 	pop	{r4, pc}

0000c33c <CKernelOptions::GetDecimal(char*) [clone .part.0]>:
    c33c:	e3a01000 	mov	r1, #0
    c340:	ea00000a 	b	c370 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x34>
    c344:	e3520009 	cmp	r2, #9
    c348:	8a000011 	bhi	c394 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x58>
    c34c:	e3730001 	cmn	r3, #1
    c350:	13a02000 	movne	r2, #0
    c354:	03a02001 	moveq	r2, #1
    c358:	e1510003 	cmp	r1, r3
    c35c:	91a01002 	movls	r1, r2
    c360:	83821001 	orrhi	r1, r2, #1
    c364:	e3510000 	cmp	r1, #0
    c368:	1a000009 	bne	c394 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x58>
    c36c:	e1a01003 	mov	r1, r3
    c370:	e0d0c0d1 	ldrsb	ip, [r0], #1
    c374:	e0813101 	add	r3, r1, r1, lsl #2
    c378:	e24c2030 	sub	r2, ip, #48	; 0x30
    c37c:	e35c0000 	cmp	ip, #0
    c380:	e0823083 	add	r3, r2, r3, lsl #1
    c384:	e6ef2072 	uxtb	r2, r2
    c388:	1affffed 	bne	c344 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x8>
    c38c:	e1a00001 	mov	r0, r1
    c390:	e12fff1e 	bx	lr
    c394:	e3e01000 	mvn	r1, #0
    c398:	e1a00001 	mov	r0, r1
    c39c:	e12fff1e 	bx	lr

0000c3a0 <CKernelOptions::~CKernelOptions()>:
    c3a0:	e3a02000 	mov	r2, #0
    c3a4:	e59f3004 	ldr	r3, [pc, #4]	; c3b0 <CKernelOptions::~CKernelOptions()+0x10>
    c3a8:	e5832000 	str	r2, [r3]
    c3ac:	e12fff1e 	bx	lr
    c3b0:	00015eac 	.word	0x00015eac

0000c3b4 <CKernelOptions::GetWidth() const>:
    c3b4:	e5900810 	ldr	r0, [r0, #2064]	; 0x810
    c3b8:	e12fff1e 	bx	lr

0000c3bc <CKernelOptions::GetHeight() const>:
    c3bc:	e5900814 	ldr	r0, [r0, #2068]	; 0x814
    c3c0:	e12fff1e 	bx	lr

0000c3c4 <CKernelOptions::GetLogDevice() const>:
    c3c4:	e2800e81 	add	r0, r0, #2064	; 0x810
    c3c8:	e2800008 	add	r0, r0, #8
    c3cc:	e12fff1e 	bx	lr

0000c3d0 <CKernelOptions::GetLogLevel() const>:
    c3d0:	e590082c 	ldr	r0, [r0, #2092]	; 0x82c
    c3d4:	e12fff1e 	bx	lr

0000c3d8 <CKernelOptions::GetKeyMap() const>:
    c3d8:	e2800e83 	add	r0, r0, #2096	; 0x830
    c3dc:	e12fff1e 	bx	lr

0000c3e0 <CKernelOptions::GetUSBPowerDelay() const>:
    c3e0:	e5900834 	ldr	r0, [r0, #2100]	; 0x834
    c3e4:	e12fff1e 	bx	lr

0000c3e8 <CKernelOptions::GetSoundDevice() const>:
    c3e8:	e2800e83 	add	r0, r0, #2096	; 0x830
    c3ec:	e2800008 	add	r0, r0, #8
    c3f0:	e12fff1e 	bx	lr

0000c3f4 <CKernelOptions::GetSoundOption() const>:
    c3f4:	e590084c 	ldr	r0, [r0, #2124]	; 0x84c
    c3f8:	e12fff1e 	bx	lr

0000c3fc <CKernelOptions::GetCPUSpeed() const>:
    c3fc:	e5d00850 	ldrb	r0, [r0, #2128]	; 0x850
    c400:	e12fff1e 	bx	lr

0000c404 <CKernelOptions::GetSoCMaxTemp() const>:
    c404:	e5900854 	ldr	r0, [r0, #2132]	; 0x854
    c408:	e12fff1e 	bx	lr

0000c40c <CKernelOptions::Get()>:
    c40c:	e59f3004 	ldr	r3, [pc, #4]	; c418 <CKernelOptions::Get()+0xc>
    c410:	e5930000 	ldr	r0, [r3]
    c414:	e12fff1e 	bx	lr
    c418:	00015eac 	.word	0x00015eac

0000c41c <CKernelOptions::GetToken()>:
    c41c:	e590380c 	ldr	r3, [r0, #2060]	; 0x80c
    c420:	e1d320d0 	ldrsb	r2, [r3]
    c424:	e3520000 	cmp	r2, #0
    c428:	1a000005 	bne	c444 <CKernelOptions::GetToken()+0x28>
    c42c:	ea000016 	b	c48c <CKernelOptions::GetToken()+0x70>
    c430:	e2833001 	add	r3, r3, #1
    c434:	e580380c 	str	r3, [r0, #2060]	; 0x80c
    c438:	e1d320d0 	ldrsb	r2, [r3]
    c43c:	e3520000 	cmp	r2, #0
    c440:	0a000011 	beq	c48c <CKernelOptions::GetToken()+0x70>
    c444:	e3520020 	cmp	r2, #32
    c448:	0afffff8 	beq	c430 <CKernelOptions::GetToken()+0x14>
    c44c:	e1a02003 	mov	r2, r3
    c450:	ea000000 	b	c458 <CKernelOptions::GetToken()+0x3c>
    c454:	e1a02001 	mov	r2, r1
    c458:	e2821001 	add	r1, r2, #1
    c45c:	e580180c 	str	r1, [r0, #2060]	; 0x80c
    c460:	e1d2c0d1 	ldrsb	ip, [r2, #1]
    c464:	e35c0000 	cmp	ip, #0
    c468:	0a000008 	beq	c490 <CKernelOptions::GetToken()+0x74>
    c46c:	e35c0020 	cmp	ip, #32
    c470:	1afffff7 	bne	c454 <CKernelOptions::GetToken()+0x38>
    c474:	e3a0c000 	mov	ip, #0
    c478:	e2822002 	add	r2, r2, #2
    c47c:	e580280c 	str	r2, [r0, #2060]	; 0x80c
    c480:	e5c1c000 	strb	ip, [r1]
    c484:	e1a00003 	mov	r0, r3
    c488:	e12fff1e 	bx	lr
    c48c:	e3a03000 	mov	r3, #0
    c490:	e1a00003 	mov	r0, r3
    c494:	e12fff1e 	bx	lr

0000c498 <CKernelOptions::CKernelOptions()>:
    c498:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c49c:	e3a02004 	mov	r2, #4
    c4a0:	e1a04000 	mov	r4, r0
    c4a4:	e3a05000 	mov	r5, #0
    c4a8:	e3a0303c 	mov	r3, #60	; 0x3c
    c4ac:	e2807e81 	add	r7, r0, #2064	; 0x810
    c4b0:	e2877008 	add	r7, r7, #8
    c4b4:	e580282c 	str	r2, [r0, #2092]	; 0x82c
    c4b8:	e5803854 	str	r3, [r0, #2132]	; 0x854
    c4bc:	e24dd014 	sub	sp, sp, #20
    c4c0:	e59f1348 	ldr	r1, [pc, #840]	; c810 <CKernelOptions::CKernelOptions()+0x378>
    c4c4:	e1a00007 	mov	r0, r7
    c4c8:	e5845810 	str	r5, [r4, #2064]	; 0x810
    c4cc:	e5845814 	str	r5, [r4, #2068]	; 0x814
    c4d0:	e5845834 	str	r5, [r4, #2100]	; 0x834
    c4d4:	e584584c 	str	r5, [r4, #2124]	; 0x84c
    c4d8:	e5c45850 	strb	r5, [r4, #2128]	; 0x850
    c4dc:	e2849e83 	add	r9, r4, #2096	; 0x830
    c4e0:	eb001427 	bl	11584 <strcpy>
    c4e4:	e59f1328 	ldr	r1, [pc, #808]	; c814 <CKernelOptions::CKernelOptions()+0x37c>
    c4e8:	e1a00009 	mov	r0, r9
    c4ec:	eb001424 	bl	11584 <strcpy>
    c4f0:	e59f3320 	ldr	r3, [pc, #800]	; c818 <CKernelOptions::CKernelOptions()+0x380>
    c4f4:	e5c45838 	strb	r5, [r4, #2104]	; 0x838
    c4f8:	e28d000c 	add	r0, sp, #12
    c4fc:	e5834000 	str	r4, [r3]
    c500:	ebfff818 	bl	a568 <CBcmPropertyTags::CBcmPropertyTags()>
    c504:	e58d5000 	str	r5, [sp]
    c508:	e1a02004 	mov	r2, r4
    c50c:	e28d000c 	add	r0, sp, #12
    c510:	e59f3304 	ldr	r3, [pc, #772]	; c81c <CKernelOptions::CKernelOptions()+0x384>
    c514:	e59f1304 	ldr	r1, [pc, #772]	; c820 <CKernelOptions::CKernelOptions()+0x388>
    c518:	ebfff869 	bl	a6c4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    c51c:	e1500005 	cmp	r0, r5
    c520:	0a000037 	beq	c604 <CKernelOptions::CKernelOptions()+0x16c>
    c524:	e5943008 	ldr	r3, [r4, #8]
    c528:	e3530b02 	cmp	r3, #2048	; 0x800
    c52c:	2a000034 	bcs	c604 <CKernelOptions::CKernelOptions()+0x16c>
    c530:	e0843003 	add	r3, r4, r3
    c534:	e284200c 	add	r2, r4, #12
    c538:	e59f82e4 	ldr	r8, [pc, #740]	; c824 <CKernelOptions::CKernelOptions()+0x38c>
    c53c:	e59fa2e4 	ldr	sl, [pc, #740]	; c828 <CKernelOptions::CKernelOptions()+0x390>
    c540:	e5c3500c 	strb	r5, [r3, #12]
    c544:	e584280c 	str	r2, [r4, #2060]	; 0x80c
    c548:	e1a00004 	mov	r0, r4
    c54c:	ebffffb2 	bl	c41c <CKernelOptions::GetToken()>
    c550:	e2506000 	subs	r6, r0, #0
    c554:	0a00002a 	beq	c604 <CKernelOptions::CKernelOptions()+0x16c>
    c558:	e1d630d0 	ldrsb	r3, [r6]
    c55c:	e3530000 	cmp	r3, #0
    c560:	0a000008 	beq	c588 <CKernelOptions::CKernelOptions()+0xf0>
    c564:	e353003d 	cmp	r3, #61	; 0x3d
    c568:	e1a05006 	mov	r5, r6
    c56c:	1a000002 	bne	c57c <CKernelOptions::CKernelOptions()+0xe4>
    c570:	ea000028 	b	c618 <CKernelOptions::CKernelOptions()+0x180>
    c574:	e353003d 	cmp	r3, #61	; 0x3d
    c578:	0a000026 	beq	c618 <CKernelOptions::CKernelOptions()+0x180>
    c57c:	e1f530d1 	ldrsb	r3, [r5, #1]!
    c580:	e3530000 	cmp	r3, #0
    c584:	1afffffa 	bne	c574 <CKernelOptions::CKernelOptions()+0xdc>
    c588:	e1a01008 	mov	r1, r8
    c58c:	e1a00006 	mov	r0, r6
    c590:	eb001387 	bl	113b4 <strcmp>
    c594:	e3500000 	cmp	r0, #0
    c598:	0affffea 	beq	c548 <CKernelOptions::CKernelOptions()+0xb0>
    c59c:	e1a0100a 	mov	r1, sl
    c5a0:	e1a00006 	mov	r0, r6
    c5a4:	eb001382 	bl	113b4 <strcmp>
    c5a8:	e3500000 	cmp	r0, #0
    c5ac:	13a0b000 	movne	fp, #0
    c5b0:	0affffe4 	beq	c548 <CKernelOptions::CKernelOptions()+0xb0>
    c5b4:	e59f1270 	ldr	r1, [pc, #624]	; c82c <CKernelOptions::CKernelOptions()+0x394>
    c5b8:	e1a00006 	mov	r0, r6
    c5bc:	eb00137c 	bl	113b4 <strcmp>
    c5c0:	e2505000 	subs	r5, r0, #0
    c5c4:	0a000027 	beq	c668 <CKernelOptions::CKernelOptions()+0x1d0>
    c5c8:	e59f1260 	ldr	r1, [pc, #608]	; c830 <CKernelOptions::CKernelOptions()+0x398>
    c5cc:	e1a00006 	mov	r0, r6
    c5d0:	eb001377 	bl	113b4 <strcmp>
    c5d4:	e3500000 	cmp	r0, #0
    c5d8:	1a000028 	bne	c680 <CKernelOptions::CKernelOptions()+0x1e8>
    c5dc:	e35b0000 	cmp	fp, #0
    c5e0:	0affffd8 	beq	c548 <CKernelOptions::CKernelOptions()+0xb0>
    c5e4:	e1db30d0 	ldrsb	r3, [fp]
    c5e8:	e3530000 	cmp	r3, #0
    c5ec:	0affffd5 	beq	c548 <CKernelOptions::CKernelOptions()+0xb0>
    c5f0:	e1a0000b 	mov	r0, fp
    c5f4:	ebffff50 	bl	c33c <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    c5f8:	e3500004 	cmp	r0, #4
    c5fc:	9584082c 	strls	r0, [r4, #2092]	; 0x82c
    c600:	eaffffd0 	b	c548 <CKernelOptions::CKernelOptions()+0xb0>
    c604:	e28d000c 	add	r0, sp, #12
    c608:	ebfff7dc 	bl	a580 <CBcmPropertyTags::~CBcmPropertyTags()>
    c60c:	e1a00004 	mov	r0, r4
    c610:	e28dd014 	add	sp, sp, #20
    c614:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c618:	e3a03000 	mov	r3, #0
    c61c:	e1a01008 	mov	r1, r8
    c620:	e5c53000 	strb	r3, [r5]
    c624:	e1a00006 	mov	r0, r6
    c628:	eb001361 	bl	113b4 <strcmp>
    c62c:	e3500000 	cmp	r0, #0
    c630:	e285b001 	add	fp, r5, #1
    c634:	1a000047 	bne	c758 <CKernelOptions::CKernelOptions()+0x2c0>
    c638:	e35b0000 	cmp	fp, #0
    c63c:	0affffc1 	beq	c548 <CKernelOptions::CKernelOptions()+0xb0>
    c640:	e1d530d1 	ldrsb	r3, [r5, #1]
    c644:	e3530000 	cmp	r3, #0
    c648:	0affffbe 	beq	c548 <CKernelOptions::CKernelOptions()+0xb0>
    c64c:	e1a0000b 	mov	r0, fp
    c650:	ebffff39 	bl	c33c <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    c654:	e59f31d8 	ldr	r3, [pc, #472]	; c834 <CKernelOptions::CKernelOptions()+0x39c>
    c658:	e2402d0a 	sub	r2, r0, #640	; 0x280
    c65c:	e1520003 	cmp	r2, r3
    c660:	95840810 	strls	r0, [r4, #2064]	; 0x810
    c664:	eaffffb7 	b	c548 <CKernelOptions::CKernelOptions()+0xb0>
    c668:	e1a0100b 	mov	r1, fp
    c66c:	e3a02013 	mov	r2, #19
    c670:	e1a00007 	mov	r0, r7
    c674:	eb0013cd 	bl	115b0 <strncpy>
    c678:	e5c4582b 	strb	r5, [r4, #2091]	; 0x82b
    c67c:	eaffffb1 	b	c548 <CKernelOptions::CKernelOptions()+0xb0>
    c680:	e59f11b0 	ldr	r1, [pc, #432]	; c838 <CKernelOptions::CKernelOptions()+0x3a0>
    c684:	e1a00006 	mov	r0, r6
    c688:	eb001349 	bl	113b4 <strcmp>
    c68c:	e2505000 	subs	r5, r0, #0
    c690:	1a000005 	bne	c6ac <CKernelOptions::CKernelOptions()+0x214>
    c694:	e1a0100b 	mov	r1, fp
    c698:	e3a02002 	mov	r2, #2
    c69c:	e1a00009 	mov	r0, r9
    c6a0:	eb0013c2 	bl	115b0 <strncpy>
    c6a4:	e5c45832 	strb	r5, [r4, #2098]	; 0x832
    c6a8:	eaffffa6 	b	c548 <CKernelOptions::CKernelOptions()+0xb0>
    c6ac:	e59f1188 	ldr	r1, [pc, #392]	; c83c <CKernelOptions::CKernelOptions()+0x3a4>
    c6b0:	e1a00006 	mov	r0, r6
    c6b4:	eb00133e 	bl	113b4 <strcmp>
    c6b8:	e3500000 	cmp	r0, #0
    c6bc:	1a00000b 	bne	c6f0 <CKernelOptions::CKernelOptions()+0x258>
    c6c0:	e35b0000 	cmp	fp, #0
    c6c4:	0affff9f 	beq	c548 <CKernelOptions::CKernelOptions()+0xb0>
    c6c8:	e1db30d0 	ldrsb	r3, [fp]
    c6cc:	e3530000 	cmp	r3, #0
    c6d0:	0affff9c 	beq	c548 <CKernelOptions::CKernelOptions()+0xb0>
    c6d4:	e1a0000b 	mov	r0, fp
    c6d8:	ebffff17 	bl	c33c <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    c6dc:	e59f315c 	ldr	r3, [pc, #348]	; c840 <CKernelOptions::CKernelOptions()+0x3a8>
    c6e0:	e24020c8 	sub	r2, r0, #200	; 0xc8
    c6e4:	e1520003 	cmp	r2, r3
    c6e8:	95840834 	strls	r0, [r4, #2100]	; 0x834
    c6ec:	eaffff95 	b	c548 <CKernelOptions::CKernelOptions()+0xb0>
    c6f0:	e59f114c 	ldr	r1, [pc, #332]	; c844 <CKernelOptions::CKernelOptions()+0x3ac>
    c6f4:	e1a00006 	mov	r0, r6
    c6f8:	eb00132d 	bl	113b4 <strcmp>
    c6fc:	e2505000 	subs	r5, r0, #0
    c700:	1a000005 	bne	c71c <CKernelOptions::CKernelOptions()+0x284>
    c704:	e1a0100b 	mov	r1, fp
    c708:	e3a02013 	mov	r2, #19
    c70c:	e2890008 	add	r0, r9, #8
    c710:	eb0013a6 	bl	115b0 <strncpy>
    c714:	e5c4584b 	strb	r5, [r4, #2123]	; 0x84b
    c718:	eaffff8a 	b	c548 <CKernelOptions::CKernelOptions()+0xb0>
    c71c:	e59f1124 	ldr	r1, [pc, #292]	; c848 <CKernelOptions::CKernelOptions()+0x3b0>
    c720:	e1a00006 	mov	r0, r6
    c724:	eb001322 	bl	113b4 <strcmp>
    c728:	e3500000 	cmp	r0, #0
    c72c:	1a000019 	bne	c798 <CKernelOptions::CKernelOptions()+0x300>
    c730:	e35b0000 	cmp	fp, #0
    c734:	0affff83 	beq	c548 <CKernelOptions::CKernelOptions()+0xb0>
    c738:	e1db30d0 	ldrsb	r3, [fp]
    c73c:	e3530000 	cmp	r3, #0
    c740:	0affff80 	beq	c548 <CKernelOptions::CKernelOptions()+0xb0>
    c744:	e1a0000b 	mov	r0, fp
    c748:	ebfffefb 	bl	c33c <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    c74c:	e3500002 	cmp	r0, #2
    c750:	9584084c 	strls	r0, [r4, #2124]	; 0x84c
    c754:	eaffff7b 	b	c548 <CKernelOptions::CKernelOptions()+0xb0>
    c758:	e1a0100a 	mov	r1, sl
    c75c:	e1a00006 	mov	r0, r6
    c760:	eb001313 	bl	113b4 <strcmp>
    c764:	e3500000 	cmp	r0, #0
    c768:	1affff91 	bne	c5b4 <CKernelOptions::CKernelOptions()+0x11c>
    c76c:	e35b0000 	cmp	fp, #0
    c770:	0affff74 	beq	c548 <CKernelOptions::CKernelOptions()+0xb0>
    c774:	e1d530d1 	ldrsb	r3, [r5, #1]
    c778:	e3530000 	cmp	r3, #0
    c77c:	0affff71 	beq	c548 <CKernelOptions::CKernelOptions()+0xb0>
    c780:	e1a0000b 	mov	r0, fp
    c784:	ebfffeec 	bl	c33c <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    c788:	e2403e1e 	sub	r3, r0, #480	; 0x1e0
    c78c:	e3530f96 	cmp	r3, #600	; 0x258
    c790:	95840814 	strls	r0, [r4, #2068]	; 0x814
    c794:	eaffff6b 	b	c548 <CKernelOptions::CKernelOptions()+0xb0>
    c798:	e59f10ac 	ldr	r1, [pc, #172]	; c84c <CKernelOptions::CKernelOptions()+0x3b4>
    c79c:	e1a00006 	mov	r0, r6
    c7a0:	eb001303 	bl	113b4 <strcmp>
    c7a4:	e3500000 	cmp	r0, #0
    c7a8:	1a000006 	bne	c7c8 <CKernelOptions::CKernelOptions()+0x330>
    c7ac:	e1a0000b 	mov	r0, fp
    c7b0:	e59f1098 	ldr	r1, [pc, #152]	; c850 <CKernelOptions::CKernelOptions()+0x3b8>
    c7b4:	eb0012fe 	bl	113b4 <strcmp>
    c7b8:	e3500000 	cmp	r0, #0
    c7bc:	03a03001 	moveq	r3, #1
    c7c0:	05c43850 	strbeq	r3, [r4, #2128]	; 0x850
    c7c4:	eaffff5f 	b	c548 <CKernelOptions::CKernelOptions()+0xb0>
    c7c8:	e1a00006 	mov	r0, r6
    c7cc:	e59f1080 	ldr	r1, [pc, #128]	; c854 <CKernelOptions::CKernelOptions()+0x3bc>
    c7d0:	eb0012f7 	bl	113b4 <strcmp>
    c7d4:	e2903000 	adds	r3, r0, #0
    c7d8:	13a03001 	movne	r3, #1
    c7dc:	e35b0000 	cmp	fp, #0
    c7e0:	03833001 	orreq	r3, r3, #1
    c7e4:	e3530000 	cmp	r3, #0
    c7e8:	1affff56 	bne	c548 <CKernelOptions::CKernelOptions()+0xb0>
    c7ec:	e1db30d0 	ldrsb	r3, [fp]
    c7f0:	e3530000 	cmp	r3, #0
    c7f4:	0affff53 	beq	c548 <CKernelOptions::CKernelOptions()+0xb0>
    c7f8:	e1a0000b 	mov	r0, fp
    c7fc:	ebfffece 	bl	c33c <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    c800:	e2403028 	sub	r3, r0, #40	; 0x28
    c804:	e3530026 	cmp	r3, #38	; 0x26
    c808:	95840854 	strls	r0, [r4, #2132]	; 0x854
    c80c:	eaffff4d 	b	c548 <CKernelOptions::CKernelOptions()+0xb0>
    c810:	00014478 	.word	0x00014478
    c814:	00014480 	.word	0x00014480
    c818:	00015eac 	.word	0x00015eac
    c81c:	0000080c 	.word	0x0000080c
    c820:	00050001 	.word	0x00050001
    c824:	000144ec 	.word	0x000144ec
    c828:	00014484 	.word	0x00014484
    c82c:	0001448c 	.word	0x0001448c
    c830:	00014494 	.word	0x00014494
    c834:	0000053c 	.word	0x0000053c
    c838:	000144a0 	.word	0x000144a0
    c83c:	000144a8 	.word	0x000144a8
    c840:	00001e78 	.word	0x00001e78
    c844:	000144b8 	.word	0x000144b8
    c848:	000144c4 	.word	0x000144c4
    c84c:	000144d0 	.word	0x000144d0
    c850:	000144d8 	.word	0x000144d8
    c854:	000144e0 	.word	0x000144e0

0000c858 <CKernelOptions::GetOptionValue(char*)>:
    c858:	e1d030d0 	ldrsb	r3, [r0]
    c85c:	e3530000 	cmp	r3, #0
    c860:	1a000003 	bne	c874 <CKernelOptions::GetOptionValue(char*)+0x1c>
    c864:	ea000007 	b	c888 <CKernelOptions::GetOptionValue(char*)+0x30>
    c868:	e1f030d1 	ldrsb	r3, [r0, #1]!
    c86c:	e3530000 	cmp	r3, #0
    c870:	0a000004 	beq	c888 <CKernelOptions::GetOptionValue(char*)+0x30>
    c874:	e353003d 	cmp	r3, #61	; 0x3d
    c878:	1afffffa 	bne	c868 <CKernelOptions::GetOptionValue(char*)+0x10>
    c87c:	e3a02000 	mov	r2, #0
    c880:	e2803001 	add	r3, r0, #1
    c884:	e5c02000 	strb	r2, [r0]
    c888:	e1a00003 	mov	r0, r3
    c88c:	e12fff1e 	bx	lr

0000c890 <CKernelOptions::GetDecimal(char*)>:
    c890:	e2503000 	subs	r3, r0, #0
    c894:	0a000002 	beq	c8a4 <CKernelOptions::GetDecimal(char*)+0x14>
    c898:	e1d330d0 	ldrsb	r3, [r3]
    c89c:	e3530000 	cmp	r3, #0
    c8a0:	1a000001 	bne	c8ac <CKernelOptions::GetDecimal(char*)+0x1c>
    c8a4:	e3e00000 	mvn	r0, #0
    c8a8:	e12fff1e 	bx	lr
    c8ac:	eafffea2 	b	c33c <CKernelOptions::GetDecimal(char*) [clone .part.0]>

0000c8b0 <CLogger::CLogger(unsigned int, CTimer*)>:
    c8b0:	e92d4010 	push	{r4, lr}
    c8b4:	e3a03000 	mov	r3, #0
    c8b8:	e1a04000 	mov	r4, r0
    c8bc:	e3a00001 	mov	r0, #1
    c8c0:	e884000e 	stm	r4, {r1, r2, r3}
    c8c4:	e584300c 	str	r3, [r4, #12]
    c8c8:	e5843010 	str	r3, [r4, #16]
    c8cc:	e5843014 	str	r3, [r4, #20]
    c8d0:	e58430e4 	str	r3, [r4, #228]	; 0xe4
    c8d4:	e58430e8 	str	r3, [r4, #232]	; 0xe8
    c8d8:	e58430f0 	str	r3, [r4, #240]	; 0xf0
    c8dc:	e58430f4 	str	r3, [r4, #244]	; 0xf4
    c8e0:	e5840018 	str	r0, [r4, #24]
    c8e4:	e58400ec 	str	r0, [r4, #236]	; 0xec
    c8e8:	e3a00901 	mov	r0, #16384	; 0x4000
    c8ec:	eb0016f5 	bl	124c8 <operator new[](unsigned int)>
    c8f0:	e59f300c 	ldr	r3, [pc, #12]	; c904 <CLogger::CLogger(unsigned int, CTimer*)+0x54>
    c8f4:	e584000c 	str	r0, [r4, #12]
    c8f8:	e5834000 	str	r4, [r3]
    c8fc:	e1a00004 	mov	r0, r4
    c900:	e8bd8010 	pop	{r4, pc}
    c904:	00015eb0 	.word	0x00015eb0

0000c908 <CLogger::~CLogger()>:
    c908:	e3a02000 	mov	r2, #0
    c90c:	e59f1064 	ldr	r1, [pc, #100]	; c978 <CLogger::~CLogger()+0x70>
    c910:	e92d4070 	push	{r4, r5, r6, lr}
    c914:	e59030e8 	ldr	r3, [r0, #232]	; 0xe8
    c918:	e1a04000 	mov	r4, r0
    c91c:	e1a06002 	mov	r6, r2
    c920:	e3a05f42 	mov	r5, #264	; 0x108
    c924:	e5812000 	str	r2, [r1]
    c928:	ea000008 	b	c950 <CLogger::~CLogger()+0x48>
    c92c:	e591001c 	ldr	r0, [r1, #28]
    c930:	e1a01005 	mov	r1, r5
    c934:	eb0016e6 	bl	124d4 <operator delete(void*, unsigned int)>
    c938:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
    c93c:	e2833001 	add	r3, r3, #1
    c940:	e3530032 	cmp	r3, #50	; 0x32
    c944:	e58430e8 	str	r3, [r4, #232]	; 0xe8
    c948:	03a03000 	moveq	r3, #0
    c94c:	058460e8 	streq	r6, [r4, #232]	; 0xe8
    c950:	e59420e4 	ldr	r2, [r4, #228]	; 0xe4
    c954:	e0841103 	add	r1, r4, r3, lsl #2
    c958:	e1520003 	cmp	r2, r3
    c95c:	1afffff2 	bne	c92c <CLogger::~CLogger()+0x24>
    c960:	e594000c 	ldr	r0, [r4, #12]
    c964:	e3500000 	cmp	r0, #0
    c968:	0a000000 	beq	c970 <CLogger::~CLogger()+0x68>
    c96c:	eb0016d7 	bl	124d0 <operator delete[](void*)>
    c970:	e1a00004 	mov	r0, r4
    c974:	e8bd8070 	pop	{r4, r5, r6, pc}
    c978:	00015eb0 	.word	0x00015eb0

0000c97c <CLogger::Get()>:
    c97c:	e59f3004 	ldr	r3, [pc, #4]	; c988 <CLogger::Get()+0xc>
    c980:	e5930000 	ldr	r0, [r3]
    c984:	e12fff1e 	bx	lr
    c988:	00015eb0 	.word	0x00015eb0

0000c98c <CLogger::Write(char const*)>:
    c98c:	e92d4070 	push	{r4, r5, r6, lr}
    c990:	e1a04000 	mov	r4, r0
    c994:	e1a00001 	mov	r0, r1
    c998:	e1a05001 	mov	r5, r1
    c99c:	eb00127a 	bl	1138c <strlen>
    c9a0:	e1a06000 	mov	r6, r0
    c9a4:	e5940008 	ldr	r0, [r4, #8]
    c9a8:	e1a02006 	mov	r2, r6
    c9ac:	e5903000 	ldr	r3, [r0]
    c9b0:	e1a01005 	mov	r1, r5
    c9b4:	e593300c 	ldr	r3, [r3, #12]
    c9b8:	e12fff33 	blx	r3
    c9bc:	e5940018 	ldr	r0, [r4, #24]
    c9c0:	e3500000 	cmp	r0, #0
    c9c4:	1a000018 	bne	ca2c <CLogger::Write(char const*)+0xa0>
    c9c8:	e59f2064 	ldr	r2, [pc, #100]	; ca34 <CLogger::Write(char const*)+0xa8>
    c9cc:	e0850006 	add	r0, r5, r6
    c9d0:	e1550000 	cmp	r5, r0
    c9d4:	0a00000f 	beq	ca18 <CLogger::Write(char const*)+0x8c>
    c9d8:	e0d510d1 	ldrsb	r1, [r5], #1
    c9dc:	e351000d 	cmp	r1, #13
    c9e0:	0afffffa 	beq	c9d0 <CLogger::Write(char const*)+0x44>
    c9e4:	e594c010 	ldr	ip, [r4, #16]
    c9e8:	e594e00c 	ldr	lr, [r4, #12]
    c9ec:	e7ce100c 	strb	r1, [lr, ip]
    c9f0:	e5943010 	ldr	r3, [r4, #16]
    c9f4:	e5941014 	ldr	r1, [r4, #20]
    c9f8:	e2833001 	add	r3, r3, #1
    c9fc:	e0033002 	and	r3, r3, r2
    ca00:	e1530001 	cmp	r3, r1
    ca04:	e5843010 	str	r3, [r4, #16]
    ca08:	1afffff0 	bne	c9d0 <CLogger::Write(char const*)+0x44>
    ca0c:	e2433001 	sub	r3, r3, #1
    ca10:	e0033002 	and	r3, r3, r2
    ca14:	e5843010 	str	r3, [r4, #16]
    ca18:	e5943018 	ldr	r3, [r4, #24]
    ca1c:	e3530000 	cmp	r3, #0
    ca20:	08bd8070 	popeq	{r4, r5, r6, pc}
    ca24:	e8bd4070 	pop	{r4, r5, r6, lr}
    ca28:	ea001678 	b	12410 <LeaveCritical>
    ca2c:	eb00164a 	bl	1235c <EnterCritical>
    ca30:	eaffffe4 	b	c9c8 <CLogger::Write(char const*)+0x3c>
    ca34:	00003fff 	.word	0x00003fff

0000ca38 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)>:
    ca38:	e590c000 	ldr	ip, [r0]
    ca3c:	e152000c 	cmp	r2, ip
    ca40:	812fff1e 	bxhi	lr
    ca44:	e92d4070 	push	{r4, r5, r6, lr}
    ca48:	e1a05003 	mov	r5, r3
    ca4c:	e3a03000 	mov	r3, #0
    ca50:	e24dd0c8 	sub	sp, sp, #200	; 0xc8
    ca54:	e1520003 	cmp	r2, r3
    ca58:	e1a04000 	mov	r4, r0
    ca5c:	e5cd3000 	strb	r3, [sp]
    ca60:	0a00000f 	beq	caa4 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x6c>
    ca64:	e1a0000d 	mov	r0, sp
    ca68:	eb0012e3 	bl	115fc <strcat>
    ca6c:	e1a0000d 	mov	r0, sp
    ca70:	e59f1088 	ldr	r1, [pc, #136]	; cb00 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xc8>
    ca74:	eb0012e0 	bl	115fc <strcat>
    ca78:	e1a01005 	mov	r1, r5
    ca7c:	e1a0000d 	mov	r0, sp
    ca80:	eb0012dd 	bl	115fc <strcat>
    ca84:	e1a0000d 	mov	r0, sp
    ca88:	e59f1074 	ldr	r1, [pc, #116]	; cb04 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xcc>
    ca8c:	eb0012da 	bl	115fc <strcat>
    ca90:	e1a0100d 	mov	r1, sp
    ca94:	e1a00004 	mov	r0, r4
    ca98:	ebffffbb 	bl	c98c <CLogger::Write(char const*)>
    ca9c:	e28dd0c8 	add	sp, sp, #200	; 0xc8
    caa0:	e8bd8070 	pop	{r4, r5, r6, pc}
    caa4:	e1a06001 	mov	r6, r1
    caa8:	e1a0000d 	mov	r0, sp
    caac:	e59f1054 	ldr	r1, [pc, #84]	; cb08 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd0>
    cab0:	eb0012b3 	bl	11584 <strcpy>
    cab4:	e1a01006 	mov	r1, r6
    cab8:	e1a0000d 	mov	r0, sp
    cabc:	eb0012ce 	bl	115fc <strcat>
    cac0:	e59f1038 	ldr	r1, [pc, #56]	; cb00 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xc8>
    cac4:	e1a0000d 	mov	r0, sp
    cac8:	eb0012cb 	bl	115fc <strcat>
    cacc:	e1a01005 	mov	r1, r5
    cad0:	e1a0000d 	mov	r0, sp
    cad4:	eb0012c8 	bl	115fc <strcat>
    cad8:	e59f102c 	ldr	r1, [pc, #44]	; cb0c <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd4>
    cadc:	e1a0000d 	mov	r0, sp
    cae0:	eb0012c5 	bl	115fc <strcat>
    cae4:	e59f1018 	ldr	r1, [pc, #24]	; cb04 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xcc>
    cae8:	e1a0000d 	mov	r0, sp
    caec:	eb0012c2 	bl	115fc <strcat>
    caf0:	e1a0100d 	mov	r1, sp
    caf4:	e1a00004 	mov	r0, r4
    caf8:	ebffffa3 	bl	c98c <CLogger::Write(char const*)>
    cafc:	eb000e57 	bl	10460 <halt>
    cb00:	000144fc 	.word	0x000144fc
    cb04:	000140f8 	.word	0x000140f8
    cb08:	000144f4 	.word	0x000144f4
    cb0c:	00014500 	.word	0x00014500

0000cb10 <CLogger::Read(void*, unsigned int)>:
    cb10:	e92d4070 	push	{r4, r5, r6, lr}
    cb14:	e1a04000 	mov	r4, r0
    cb18:	e5900018 	ldr	r0, [r0, #24]
    cb1c:	e1a05001 	mov	r5, r1
    cb20:	e3500000 	cmp	r0, #0
    cb24:	e1a06002 	mov	r6, r2
    cb28:	1a00001c 	bne	cba0 <CLogger::Read(void*, unsigned int)+0x90>
    cb2c:	e5942010 	ldr	r2, [r4, #16]
    cb30:	e5943014 	ldr	r3, [r4, #20]
    cb34:	e1520003 	cmp	r2, r3
    cb38:	0a000021 	beq	cbc4 <CLogger::Read(void*, unsigned int)+0xb4>
    cb3c:	e1a01005 	mov	r1, r5
    cb40:	e59f2088 	ldr	r2, [pc, #136]	; cbd0 <CLogger::Read(void*, unsigned int)+0xc0>
    cb44:	e3a05000 	mov	r5, #0
    cb48:	ea00000a 	b	cb78 <CLogger::Read(void*, unsigned int)+0x68>
    cb4c:	e594000c 	ldr	r0, [r4, #12]
    cb50:	e2855001 	add	r5, r5, #1
    cb54:	e19030d3 	ldrsb	r3, [r0, r3]
    cb58:	e4c13001 	strb	r3, [r1], #1
    cb5c:	e5943014 	ldr	r3, [r4, #20]
    cb60:	e5940010 	ldr	r0, [r4, #16]
    cb64:	e2833001 	add	r3, r3, #1
    cb68:	e0033002 	and	r3, r3, r2
    cb6c:	e1530000 	cmp	r3, r0
    cb70:	e5843014 	str	r3, [r4, #20]
    cb74:	0a000001 	beq	cb80 <CLogger::Read(void*, unsigned int)+0x70>
    cb78:	e1550006 	cmp	r5, r6
    cb7c:	1afffff2 	bne	cb4c <CLogger::Read(void*, unsigned int)+0x3c>
    cb80:	e5943018 	ldr	r3, [r4, #24]
    cb84:	e3530000 	cmp	r3, #0
    cb88:	1a000001 	bne	cb94 <CLogger::Read(void*, unsigned int)+0x84>
    cb8c:	e1a00005 	mov	r0, r5
    cb90:	e8bd8070 	pop	{r4, r5, r6, pc}
    cb94:	eb00161d 	bl	12410 <LeaveCritical>
    cb98:	e1a00005 	mov	r0, r5
    cb9c:	e8bd8070 	pop	{r4, r5, r6, pc}
    cba0:	eb0015ed 	bl	1235c <EnterCritical>
    cba4:	e5942010 	ldr	r2, [r4, #16]
    cba8:	e5943014 	ldr	r3, [r4, #20]
    cbac:	e1520003 	cmp	r2, r3
    cbb0:	1affffe1 	bne	cb3c <CLogger::Read(void*, unsigned int)+0x2c>
    cbb4:	e5943018 	ldr	r3, [r4, #24]
    cbb8:	e3530000 	cmp	r3, #0
    cbbc:	0a000000 	beq	cbc4 <CLogger::Read(void*, unsigned int)+0xb4>
    cbc0:	eb001612 	bl	12410 <LeaveCritical>
    cbc4:	e3e05000 	mvn	r5, #0
    cbc8:	e1a00005 	mov	r0, r5
    cbcc:	e8bd8070 	pop	{r4, r5, r6, pc}
    cbd0:	00003fff 	.word	0x00003fff

0000cbd4 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>:
    cbd4:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    cbd8:	e1a05000 	mov	r5, r0
    cbdc:	e24dd00c 	sub	sp, sp, #12
    cbe0:	e3a00f42 	mov	r0, #264	; 0x108
    cbe4:	e1a07003 	mov	r7, r3
    cbe8:	e1a09002 	mov	r9, r2
    cbec:	e1a08001 	mov	r8, r1
    cbf0:	eb001633 	bl	124c4 <operator new(unsigned int)>
    cbf4:	e3a06000 	mov	r6, #0
    cbf8:	e1a04000 	mov	r4, r0
    cbfc:	e1a01008 	mov	r1, r8
    cc00:	e3a02032 	mov	r2, #50	; 0x32
    cc04:	e4c09001 	strb	r9, [r0], #1
    cc08:	eb001268 	bl	115b0 <strncpy>
    cc0c:	e1a01007 	mov	r1, r7
    cc10:	e2840033 	add	r0, r4, #51	; 0x33
    cc14:	e3a020c8 	mov	r2, #200	; 0xc8
    cc18:	e5c46032 	strb	r6, [r4, #50]	; 0x32
    cc1c:	eb001263 	bl	115b0 <strncpy>
    cc20:	e5950004 	ldr	r0, [r5, #4]
    cc24:	e5c460fa 	strb	r6, [r4, #250]	; 0xfa
    cc28:	e1500006 	cmp	r0, r6
    cc2c:	0a000004 	beq	cc44 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x70>
    cc30:	e28d2004 	add	r2, sp, #4
    cc34:	e1a0100d 	mov	r1, sp
    cc38:	eb000ee3 	bl	107cc <CTimer::GetLocalTime(unsigned int*, unsigned int*)>
    cc3c:	e1500006 	cmp	r0, r6
    cc40:	1a000021 	bne	cccc <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xf8>
    cc44:	e3a03000 	mov	r3, #0
    cc48:	e59500ec 	ldr	r0, [r5, #236]	; 0xec
    cc4c:	e58430fc 	str	r3, [r4, #252]	; 0xfc
    cc50:	e3500000 	cmp	r0, #0
    cc54:	e5843100 	str	r3, [r4, #256]	; 0x100
    cc58:	e5843104 	str	r3, [r4, #260]	; 0x104
    cc5c:	1a000027 	bne	cd00 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x12c>
    cc60:	e59520e4 	ldr	r2, [r5, #228]	; 0xe4
    cc64:	e2823001 	add	r3, r2, #1
    cc68:	e3530032 	cmp	r3, #50	; 0x32
    cc6c:	e0852102 	add	r2, r5, r2, lsl #2
    cc70:	e582401c 	str	r4, [r2, #28]
    cc74:	03a02000 	moveq	r2, #0
    cc78:	01a03002 	moveq	r3, r2
    cc7c:	058520e4 	streq	r2, [r5, #228]	; 0xe4
    cc80:	e59520e8 	ldr	r2, [r5, #232]	; 0xe8
    cc84:	158530e4 	strne	r3, [r5, #228]	; 0xe4
    cc88:	e1520003 	cmp	r2, r3
    cc8c:	0a00001e 	beq	cd0c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x138>
    cc90:	e3500000 	cmp	r0, #0
    cc94:	13a04000 	movne	r4, #0
    cc98:	0a000005 	beq	ccb4 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xe0>
    cc9c:	eb0015db 	bl	12410 <LeaveCritical>
    cca0:	e3540000 	cmp	r4, #0
    cca4:	0a000002 	beq	ccb4 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xe0>
    cca8:	e1a00004 	mov	r0, r4
    ccac:	e3a01f42 	mov	r1, #264	; 0x108
    ccb0:	eb001607 	bl	124d4 <operator delete(void*, unsigned int)>
    ccb4:	e59530f0 	ldr	r3, [r5, #240]	; 0xf0
    ccb8:	e3530000 	cmp	r3, #0
    ccbc:	0a000000 	beq	ccc4 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xf0>
    ccc0:	e12fff33 	blx	r3
    ccc4:	e28dd00c 	add	sp, sp, #12
    ccc8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    cccc:	e59d3004 	ldr	r3, [sp, #4]
    ccd0:	e59f105c 	ldr	r1, [pc, #92]	; cd34 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x160>
    ccd4:	e59d2000 	ldr	r2, [sp]
    ccd8:	e0831391 	umull	r1, r3, r1, r3
    ccdc:	e1a036a3 	lsr	r3, r3, #13
    cce0:	e5950004 	ldr	r0, [r5, #4]
    cce4:	e5843100 	str	r3, [r4, #256]	; 0x100
    cce8:	e58420fc 	str	r2, [r4, #252]	; 0xfc
    ccec:	eb000e88 	bl	10714 <CTimer::GetTimeZone() const>
    ccf0:	e5840104 	str	r0, [r4, #260]	; 0x104
    ccf4:	e59500ec 	ldr	r0, [r5, #236]	; 0xec
    ccf8:	e3500000 	cmp	r0, #0
    ccfc:	0affffd7 	beq	cc60 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x8c>
    cd00:	eb001595 	bl	1235c <EnterCritical>
    cd04:	e59500ec 	ldr	r0, [r5, #236]	; 0xec
    cd08:	eaffffd4 	b	cc60 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x8c>
    cd0c:	e2832001 	add	r2, r3, #1
    cd10:	e3520032 	cmp	r2, #50	; 0x32
    cd14:	e0853103 	add	r3, r5, r3, lsl #2
    cd18:	e593401c 	ldr	r4, [r3, #28]
    cd1c:	03a03000 	moveq	r3, #0
    cd20:	158520e8 	strne	r2, [r5, #232]	; 0xe8
    cd24:	058530e8 	streq	r3, [r5, #232]	; 0xe8
    cd28:	e3500000 	cmp	r0, #0
    cd2c:	0affffdb 	beq	cca0 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xcc>
    cd30:	eaffffd9 	b	cc9c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xc8>
    cd34:	d1b71759 	.word	0xd1b71759

0000cd38 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)>:
    cd38:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    cd3c:	e1a04000 	mov	r4, r0
    cd40:	e59000ec 	ldr	r0, [r0, #236]	; 0xec
    cd44:	e1a07001 	mov	r7, r1
    cd48:	e3500000 	cmp	r0, #0
    cd4c:	e1a08002 	mov	r8, r2
    cd50:	e1a06003 	mov	r6, r3
    cd54:	1a000022 	bne	cde4 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xac>
    cd58:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
    cd5c:	e59420e4 	ldr	r2, [r4, #228]	; 0xe4
    cd60:	e1530002 	cmp	r3, r2
    cd64:	0a000028 	beq	ce0c <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xd4>
    cd68:	e283c001 	add	ip, r3, #1
    cd6c:	e35c0032 	cmp	ip, #50	; 0x32
    cd70:	e0843103 	add	r3, r4, r3, lsl #2
    cd74:	e593501c 	ldr	r5, [r3, #28]
    cd78:	03a03000 	moveq	r3, #0
    cd7c:	1584c0e8 	strne	ip, [r4, #232]	; 0xe8
    cd80:	058430e8 	streq	r3, [r4, #232]	; 0xe8
    cd84:	e3500000 	cmp	r0, #0
    cd88:	1a000021 	bne	ce14 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xdc>
    cd8c:	e1a01005 	mov	r1, r5
    cd90:	e4d12001 	ldrb	r2, [r1], #1
    cd94:	e1a00008 	mov	r0, r8
    cd98:	e5c72000 	strb	r2, [r7]
    cd9c:	eb0011f8 	bl	11584 <strcpy>
    cda0:	e2851033 	add	r1, r5, #51	; 0x33
    cda4:	e1a00006 	mov	r0, r6
    cda8:	eb0011f5 	bl	11584 <strcpy>
    cdac:	e59520fc 	ldr	r2, [r5, #252]	; 0xfc
    cdb0:	e59d1018 	ldr	r1, [sp, #24]
    cdb4:	e5953100 	ldr	r3, [r5, #256]	; 0x100
    cdb8:	e5812000 	str	r2, [r1]
    cdbc:	e59d201c 	ldr	r2, [sp, #28]
    cdc0:	e1a00005 	mov	r0, r5
    cdc4:	e5823000 	str	r3, [r2]
    cdc8:	e5953104 	ldr	r3, [r5, #260]	; 0x104
    cdcc:	e59d2020 	ldr	r2, [sp, #32]
    cdd0:	e3a01f42 	mov	r1, #264	; 0x108
    cdd4:	e5823000 	str	r3, [r2]
    cdd8:	eb0015bd 	bl	124d4 <operator delete(void*, unsigned int)>
    cddc:	e3a00001 	mov	r0, #1
    cde0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    cde4:	eb00155c 	bl	1235c <EnterCritical>
    cde8:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
    cdec:	e59420e4 	ldr	r2, [r4, #228]	; 0xe4
    cdf0:	e1520003 	cmp	r2, r3
    cdf4:	159400ec 	ldrne	r0, [r4, #236]	; 0xec
    cdf8:	1affffda 	bne	cd68 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x30>
    cdfc:	e59430ec 	ldr	r3, [r4, #236]	; 0xec
    ce00:	e3530000 	cmp	r3, #0
    ce04:	0a000000 	beq	ce0c <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xd4>
    ce08:	eb001580 	bl	12410 <LeaveCritical>
    ce0c:	e3a00000 	mov	r0, #0
    ce10:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ce14:	eb00157d 	bl	12410 <LeaveCritical>
    ce18:	eaffffdb 	b	cd8c <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x54>

0000ce1c <CLogger::RegisterEventNotificationHandler(void (*)())>:
    ce1c:	e58010f0 	str	r1, [r0, #240]	; 0xf0
    ce20:	e12fff1e 	bx	lr

0000ce24 <CLogger::RegisterPanicHandler(void (*)())>:
    ce24:	e58010f4 	str	r1, [r0, #244]	; 0xf4
    ce28:	e12fff1e 	bx	lr

0000ce2c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>:
    ce2c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    ce30:	e1a07003 	mov	r7, r3
    ce34:	e24dd024 	sub	sp, sp, #36	; 0x24
    ce38:	e1a04000 	mov	r4, r0
    ce3c:	e1a0000d 	mov	r0, sp
    ce40:	e1a05002 	mov	r5, r2
    ce44:	e1a06001 	mov	r6, r1
    ce48:	eb000989 	bl	f474 <CString::CString()>
    ce4c:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
    ce50:	e1a01007 	mov	r1, r7
    ce54:	e1a0000d 	mov	r0, sp
    ce58:	eb000b52 	bl	fba8 <CString::FormatV(char const*, std::__va_list)>
    ce5c:	e1a0000d 	mov	r0, sp
    ce60:	eb000999 	bl	f4cc <CString::operator char const*() const>
    ce64:	e1a02005 	mov	r2, r5
    ce68:	e1a03000 	mov	r3, r0
    ce6c:	e1a01006 	mov	r1, r6
    ce70:	e1a00004 	mov	r0, r4
    ce74:	ebffff56 	bl	cbd4 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>
    ce78:	e5943000 	ldr	r3, [r4]
    ce7c:	e1550003 	cmp	r5, r3
    ce80:	8a00002c 	bhi	cf38 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x10c>
    ce84:	e28d0010 	add	r0, sp, #16
    ce88:	eb000979 	bl	f474 <CString::CString()>
    ce8c:	e3550000 	cmp	r5, #0
    ce90:	0a00002c 	beq	cf48 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x11c>
    ce94:	e5940004 	ldr	r0, [r4, #4]
    ce98:	e3500000 	cmp	r0, #0
    ce9c:	0a00004a 	beq	cfcc <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1a0>
    cea0:	eb000eba 	bl	10990 <CTimer::GetTimeString()>
    cea4:	e2507000 	subs	r7, r0, #0
    cea8:	0a000047 	beq	cfcc <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1a0>
    ceac:	e1a00007 	mov	r0, r7
    ceb0:	eb000985 	bl	f4cc <CString::operator char const*() const>
    ceb4:	e1a01000 	mov	r1, r0
    ceb8:	e28d0010 	add	r0, sp, #16
    cebc:	eb0009b4 	bl	f594 <CString::Append(char const*)>
    cec0:	e59f1144 	ldr	r1, [pc, #324]	; d00c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e0>
    cec4:	e28d0010 	add	r0, sp, #16
    cec8:	eb0009b1 	bl	f594 <CString::Append(char const*)>
    cecc:	e5973000 	ldr	r3, [r7]
    ced0:	e1a00007 	mov	r0, r7
    ced4:	e5933004 	ldr	r3, [r3, #4]
    ced8:	e12fff33 	blx	r3
    cedc:	e1a01006 	mov	r1, r6
    cee0:	e28d0010 	add	r0, sp, #16
    cee4:	eb0009aa 	bl	f594 <CString::Append(char const*)>
    cee8:	e59f1120 	ldr	r1, [pc, #288]	; d010 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e4>
    ceec:	e28d0010 	add	r0, sp, #16
    cef0:	eb0009a7 	bl	f594 <CString::Append(char const*)>
    cef4:	e1a0000d 	mov	r0, sp
    cef8:	eb000973 	bl	f4cc <CString::operator char const*() const>
    cefc:	e1a01000 	mov	r1, r0
    cf00:	e28d0010 	add	r0, sp, #16
    cf04:	eb0009a2 	bl	f594 <CString::Append(char const*)>
    cf08:	e3550000 	cmp	r5, #0
    cf0c:	0a00001e 	beq	cf8c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x160>
    cf10:	e59f10fc 	ldr	r1, [pc, #252]	; d014 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e8>
    cf14:	e28d0010 	add	r0, sp, #16
    cf18:	eb00099d 	bl	f594 <CString::Append(char const*)>
    cf1c:	e28d0010 	add	r0, sp, #16
    cf20:	eb000969 	bl	f4cc <CString::operator char const*() const>
    cf24:	e1a01000 	mov	r1, r0
    cf28:	e1a00004 	mov	r0, r4
    cf2c:	ebfffe96 	bl	c98c <CLogger::Write(char const*)>
    cf30:	e28d0010 	add	r0, sp, #16
    cf34:	eb00091b 	bl	f3a8 <CString::~CString()>
    cf38:	e1a0000d 	mov	r0, sp
    cf3c:	eb000919 	bl	f3a8 <CString::~CString()>
    cf40:	e28dd024 	add	sp, sp, #36	; 0x24
    cf44:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    cf48:	e59f10c8 	ldr	r1, [pc, #200]	; d018 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1ec>
    cf4c:	e28d0010 	add	r0, sp, #16
    cf50:	eb000963 	bl	f4e4 <CString::operator=(char const*)>
    cf54:	e5940004 	ldr	r0, [r4, #4]
    cf58:	e3500000 	cmp	r0, #0
    cf5c:	1a000026 	bne	cffc <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1d0>
    cf60:	e1a01006 	mov	r1, r6
    cf64:	e28d0010 	add	r0, sp, #16
    cf68:	eb000989 	bl	f594 <CString::Append(char const*)>
    cf6c:	e59f109c 	ldr	r1, [pc, #156]	; d010 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e4>
    cf70:	e28d0010 	add	r0, sp, #16
    cf74:	eb000986 	bl	f594 <CString::Append(char const*)>
    cf78:	e1a0000d 	mov	r0, sp
    cf7c:	eb000952 	bl	f4cc <CString::operator char const*() const>
    cf80:	e1a01000 	mov	r1, r0
    cf84:	e28d0010 	add	r0, sp, #16
    cf88:	eb000981 	bl	f594 <CString::Append(char const*)>
    cf8c:	e59f1088 	ldr	r1, [pc, #136]	; d01c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1f0>
    cf90:	e28d0010 	add	r0, sp, #16
    cf94:	eb00097e 	bl	f594 <CString::Append(char const*)>
    cf98:	e59f1074 	ldr	r1, [pc, #116]	; d014 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e8>
    cf9c:	e28d0010 	add	r0, sp, #16
    cfa0:	eb00097b 	bl	f594 <CString::Append(char const*)>
    cfa4:	e28d0010 	add	r0, sp, #16
    cfa8:	eb000947 	bl	f4cc <CString::operator char const*() const>
    cfac:	e1a01000 	mov	r1, r0
    cfb0:	e1a00004 	mov	r0, r4
    cfb4:	ebfffe74 	bl	c98c <CLogger::Write(char const*)>
    cfb8:	e59430f4 	ldr	r3, [r4, #244]	; 0xf4
    cfbc:	e3530000 	cmp	r3, #0
    cfc0:	0a000000 	beq	cfc8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x19c>
    cfc4:	e12fff33 	blx	r3
    cfc8:	eb000d24 	bl	10460 <halt>
    cfcc:	e1a01006 	mov	r1, r6
    cfd0:	e28d0010 	add	r0, sp, #16
    cfd4:	eb00096e 	bl	f594 <CString::Append(char const*)>
    cfd8:	e59f1030 	ldr	r1, [pc, #48]	; d010 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e4>
    cfdc:	e28d0010 	add	r0, sp, #16
    cfe0:	eb00096b 	bl	f594 <CString::Append(char const*)>
    cfe4:	e1a0000d 	mov	r0, sp
    cfe8:	eb000937 	bl	f4cc <CString::operator char const*() const>
    cfec:	e1a01000 	mov	r1, r0
    cff0:	e28d0010 	add	r0, sp, #16
    cff4:	eb000966 	bl	f594 <CString::Append(char const*)>
    cff8:	eaffffc4 	b	cf10 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xe4>
    cffc:	eb000e63 	bl	10990 <CTimer::GetTimeString()>
    d000:	e2507000 	subs	r7, r0, #0
    d004:	1affffa8 	bne	ceac <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x80>
    d008:	eaffffd4 	b	cf60 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x134>
    d00c:	00014508 	.word	0x00014508
    d010:	000144fc 	.word	0x000144fc
    d014:	000140f8 	.word	0x000140f8
    d018:	000144f4 	.word	0x000144f4
    d01c:	00014500 	.word	0x00014500

0000d020 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>:
    d020:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)
    d024:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    d028:	e24dd010 	sub	sp, sp, #16
    d02c:	e28dc018 	add	ip, sp, #24
    d030:	e58dc000 	str	ip, [sp]
    d034:	e59d3014 	ldr	r3, [sp, #20]
    d038:	e58dc00c 	str	ip, [sp, #12]
    d03c:	ebffff7a 	bl	ce2c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
    d040:	e28dd010 	add	sp, sp, #16
    d044:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    d048:	e28dd004 	add	sp, sp, #4
    d04c:	e12fff1e 	bx	lr

0000d050 <CLogger::Initialize(CDevice*)>:
    d050:	e92d4010 	push	{r4, lr}
    d054:	e5801008 	str	r1, [r0, #8]
    d058:	e24dd008 	sub	sp, sp, #8
    d05c:	e1a04000 	mov	r4, r0
    d060:	eb000102 	bl	d470 <CMachineInfo::Get()>
    d064:	eb00008b 	bl	d298 <CMachineInfo::GetMachineName() const>
    d068:	e59f301c 	ldr	r3, [pc, #28]	; d08c <CLogger::Initialize(CDevice*)+0x3c>
    d06c:	e58d0000 	str	r0, [sp]
    d070:	e3a02003 	mov	r2, #3
    d074:	e1a00004 	mov	r0, r4
    d078:	e59f1010 	ldr	r1, [pc, #16]	; d090 <CLogger::Initialize(CDevice*)+0x40>
    d07c:	ebffffe7 	bl	d020 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    d080:	e3a00001 	mov	r0, #1
    d084:	e28dd008 	add	sp, sp, #8
    d088:	e8bd8010 	pop	{r4, pc}
    d08c:	0001450c 	.word	0x0001450c
    d090:	00014524 	.word	0x00014524

0000d094 <CMachineInfo::CMachineInfo()>:
    d094:	e3a03000 	mov	r3, #0
    d098:	e92d4030 	push	{r4, r5, lr}
    d09c:	e3a01003 	mov	r1, #3
    d0a0:	e1a04000 	mov	r4, r0
    d0a4:	e3a0000e 	mov	r0, #14
    d0a8:	e59f21a8 	ldr	r2, [pc, #424]	; d258 <CMachineInfo::CMachineInfo()+0x1c4>
    d0ac:	e24dd024 	sub	sp, sp, #36	; 0x24
    d0b0:	e5925000 	ldr	r5, [r2]
    d0b4:	e5c40004 	strb	r0, [r4, #4]
    d0b8:	e1550003 	cmp	r5, r3
    d0bc:	e5c41010 	strb	r1, [r4, #16]
    d0c0:	e5843000 	str	r3, [r4]
    d0c4:	e5843008 	str	r3, [r4, #8]
    d0c8:	e584300c 	str	r3, [r4, #12]
    d0cc:	e5843014 	str	r3, [r4, #20]
    d0d0:	0a00000e 	beq	d110 <CMachineInfo::CMachineInfo()+0x7c>
    d0d4:	e595e000 	ldr	lr, [r5]
    d0d8:	e5d5c004 	ldrb	ip, [r5, #4]
    d0dc:	e5950008 	ldr	r0, [r5, #8]
    d0e0:	e595100c 	ldr	r1, [r5, #12]
    d0e4:	e5d52010 	ldrb	r2, [r5, #16]
    d0e8:	e5953014 	ldr	r3, [r5, #20]
    d0ec:	e584e000 	str	lr, [r4]
    d0f0:	e5c4c004 	strb	ip, [r4, #4]
    d0f4:	e5840008 	str	r0, [r4, #8]
    d0f8:	e584100c 	str	r1, [r4, #12]
    d0fc:	e5c42010 	strb	r2, [r4, #16]
    d100:	e5843014 	str	r3, [r4, #20]
    d104:	e1a00004 	mov	r0, r4
    d108:	e28dd024 	add	sp, sp, #36	; 0x24
    d10c:	e8bd8030 	pop	{r4, r5, pc}
    d110:	e28d000c 	add	r0, sp, #12
    d114:	e5824000 	str	r4, [r2]
    d118:	ebfff512 	bl	a568 <CBcmPropertyTags::CBcmPropertyTags()>
    d11c:	e3a03010 	mov	r3, #16
    d120:	e58d5000 	str	r5, [sp]
    d124:	e28d000c 	add	r0, sp, #12
    d128:	e08d2003 	add	r2, sp, r3
    d12c:	e59f1128 	ldr	r1, [pc, #296]	; d25c <CMachineInfo::CMachineInfo()+0x1c8>
    d130:	ebfff563 	bl	a6c4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    d134:	e3500000 	cmp	r0, #0
    d138:	0a00000c 	beq	d170 <CMachineInfo::CMachineInfo()+0xdc>
    d13c:	e59d101c 	ldr	r1, [sp, #28]
    d140:	e2113502 	ands	r3, r1, #8388608	; 0x800000
    d144:	e5841000 	str	r1, [r4]
    d148:	1a00000b 	bne	d17c <CMachineInfo::CMachineInfo()+0xe8>
    d14c:	e3a02002 	mov	r2, #2
    d150:	e59f0108 	ldr	r0, [pc, #264]	; d260 <CMachineInfo::CMachineInfo()+0x1cc>
    d154:	ea000000 	b	d15c <CMachineInfo::CMachineInfo()+0xc8>
    d158:	e7902203 	ldr	r2, [r0, r3, lsl #4]
    d15c:	e1510002 	cmp	r1, r2
    d160:	0a000012 	beq	d1b0 <CMachineInfo::CMachineInfo()+0x11c>
    d164:	e2833001 	add	r3, r3, #1
    d168:	e3530011 	cmp	r3, #17
    d16c:	1afffff9 	bne	d158 <CMachineInfo::CMachineInfo()+0xc4>
    d170:	e28d000c 	add	r0, sp, #12
    d174:	ebfff501 	bl	a580 <CBcmPropertyTags::~CBcmPropertyTags()>
    d178:	eaffffe1 	b	d104 <CMachineInfo::CMachineInfo()+0x70>
    d17c:	e1a00221 	lsr	r0, r1, #4
    d180:	e1a03005 	mov	r3, r5
    d184:	e59f20d8 	ldr	r2, [pc, #216]	; d264 <CMachineInfo::CMachineInfo()+0x1d0>
    d188:	e6ef0070 	uxtb	r0, r0
    d18c:	ea000000 	b	d194 <CMachineInfo::CMachineInfo()+0x100>
    d190:	e512500c 	ldr	r5, [r2, #-12]
    d194:	e1550000 	cmp	r5, r0
    d198:	0a000011 	beq	d1e4 <CMachineInfo::CMachineInfo()+0x150>
    d19c:	e2833001 	add	r3, r3, #1
    d1a0:	e353000c 	cmp	r3, #12
    d1a4:	e282200c 	add	r2, r2, #12
    d1a8:	1afffff8 	bne	d190 <CMachineInfo::CMachineInfo()+0xfc>
    d1ac:	eaffffef 	b	d170 <CMachineInfo::CMachineInfo()+0xdc>
    d1b0:	e3a00001 	mov	r0, #1
    d1b4:	e3a01000 	mov	r1, #0
    d1b8:	e59f20a8 	ldr	r2, [pc, #168]	; d268 <CMachineInfo::CMachineInfo()+0x1d4>
    d1bc:	e5840008 	str	r0, [r4, #8]
    d1c0:	e0823203 	add	r3, r2, r3, lsl #4
    d1c4:	e5d30094 	ldrb	r0, [r3, #148]	; 0x94
    d1c8:	e5932098 	ldr	r2, [r3, #152]	; 0x98
    d1cc:	e593309c 	ldr	r3, [r3, #156]	; 0x9c
    d1d0:	e5c40004 	strb	r0, [r4, #4]
    d1d4:	e584200c 	str	r2, [r4, #12]
    d1d8:	e5843014 	str	r3, [r4, #20]
    d1dc:	e5c41010 	strb	r1, [r4, #16]
    d1e0:	eaffffe2 	b	d170 <CMachineInfo::CMachineInfo()+0xdc>
    d1e4:	e3a0cc01 	mov	ip, #256	; 0x100
    d1e8:	e59f2078 	ldr	r2, [pc, #120]	; d268 <CMachineInfo::CMachineInfo()+0x1d4>
    d1ec:	e0833083 	add	r3, r3, r3, lsl #1
    d1f0:	e0823103 	add	r3, r2, r3, lsl #2
    d1f4:	e1a00621 	lsr	r0, r1, #12
    d1f8:	e1a02a21 	lsr	r2, r1, #20
    d1fc:	e2022007 	and	r2, r2, #7
    d200:	e200000f 	and	r0, r0, #15
    d204:	e5d3e004 	ldrb	lr, [r3, #4]
    d208:	e3500002 	cmp	r0, #2
    d20c:	e5935008 	ldr	r5, [r3, #8]
    d210:	e201300f 	and	r3, r1, #15
    d214:	e1a0121c 	lsl	r1, ip, r2
    d218:	e5841014 	str	r1, [r4, #20]
    d21c:	83a01003 	movhi	r1, #3
    d220:	e5c40010 	strb	r0, [r4, #16]
    d224:	85c41010 	strbhi	r1, [r4, #16]
    d228:	e3520000 	cmp	r2, #0
    d22c:	035e0003 	cmpeq	lr, #3
    d230:	e2833001 	add	r3, r3, #1
    d234:	e5c4e004 	strb	lr, [r4, #4]
    d238:	e5845008 	str	r5, [r4, #8]
    d23c:	e584300c 	str	r3, [r4, #12]
    d240:	1affffca 	bne	d170 <CMachineInfo::CMachineInfo()+0xdc>
    d244:	e3530001 	cmp	r3, #1
    d248:	13a03002 	movne	r3, #2
    d24c:	03a03001 	moveq	r3, #1
    d250:	e5c43004 	strb	r3, [r4, #4]
    d254:	eaffffc5 	b	d170 <CMachineInfo::CMachineInfo()+0xdc>
    d258:	00015eb4 	.word	0x00015eb4
    d25c:	00010002 	.word	0x00010002
    d260:	000145bc 	.word	0x000145bc
    d264:	00014538 	.word	0x00014538
    d268:	0001452c 	.word	0x0001452c

0000d26c <CMachineInfo::~CMachineInfo()>:
    d26c:	e3a0200e 	mov	r2, #14
    d270:	e59f3014 	ldr	r3, [pc, #20]	; d28c <CMachineInfo::~CMachineInfo()+0x20>
    d274:	e5c02004 	strb	r2, [r0, #4]
    d278:	e5932000 	ldr	r2, [r3]
    d27c:	e1500002 	cmp	r0, r2
    d280:	03a02000 	moveq	r2, #0
    d284:	05832000 	streq	r2, [r3]
    d288:	e12fff1e 	bx	lr
    d28c:	00015eb4 	.word	0x00015eb4

0000d290 <CMachineInfo::GetMachineModel() const>:
    d290:	e5d00004 	ldrb	r0, [r0, #4]
    d294:	e12fff1e 	bx	lr

0000d298 <CMachineInfo::GetMachineName() const>:
    d298:	e5d02004 	ldrb	r2, [r0, #4]
    d29c:	e59f3008 	ldr	r3, [pc, #8]	; d2ac <CMachineInfo::GetMachineName() const+0x14>
    d2a0:	e0833102 	add	r3, r3, r2, lsl #2
    d2a4:	e59301a0 	ldr	r0, [r3, #416]	; 0x1a0
    d2a8:	e12fff1e 	bx	lr
    d2ac:	0001452c 	.word	0x0001452c

0000d2b0 <CMachineInfo::GetModelMajor() const>:
    d2b0:	e5900008 	ldr	r0, [r0, #8]
    d2b4:	e12fff1e 	bx	lr

0000d2b8 <CMachineInfo::GetModelRevision() const>:
    d2b8:	e590000c 	ldr	r0, [r0, #12]
    d2bc:	e12fff1e 	bx	lr

0000d2c0 <CMachineInfo::GetSoCType() const>:
    d2c0:	e5d00010 	ldrb	r0, [r0, #16]
    d2c4:	e12fff1e 	bx	lr

0000d2c8 <CMachineInfo::GetRAMSize() const>:
    d2c8:	e5900014 	ldr	r0, [r0, #20]
    d2cc:	e12fff1e 	bx	lr

0000d2d0 <CMachineInfo::GetSoCName() const>:
    d2d0:	e5d02010 	ldrb	r2, [r0, #16]
    d2d4:	e59f3008 	ldr	r3, [pc, #8]	; d2e4 <CMachineInfo::GetSoCName() const+0x14>
    d2d8:	e0833102 	add	r3, r3, r2, lsl #2
    d2dc:	e59301dc 	ldr	r0, [r3, #476]	; 0x1dc
    d2e0:	e12fff1e 	bx	lr
    d2e4:	0001452c 	.word	0x0001452c

0000d2e8 <CMachineInfo::GetRevisionRaw() const>:
    d2e8:	e5900000 	ldr	r0, [r0]
    d2ec:	e12fff1e 	bx	lr

0000d2f0 <CMachineInfo::GetClockRate(unsigned int) const>:
    d2f0:	e92d4070 	push	{r4, r5, r6, lr}
    d2f4:	e24dd020 	sub	sp, sp, #32
    d2f8:	e1a06000 	mov	r6, r0
    d2fc:	e28d0008 	add	r0, sp, #8
    d300:	e1a05001 	mov	r5, r1
    d304:	ebfff497 	bl	a568 <CBcmPropertyTags::CBcmPropertyTags()>
    d308:	e3a03004 	mov	r3, #4
    d30c:	e28d0008 	add	r0, sp, #8
    d310:	e58d3000 	str	r3, [sp]
    d314:	e28d200c 	add	r2, sp, #12
    d318:	e3a03014 	mov	r3, #20
    d31c:	e59f1078 	ldr	r1, [pc, #120]	; d39c <CMachineInfo::GetClockRate(unsigned int) const+0xac>
    d320:	e58d5018 	str	r5, [sp, #24]
    d324:	ebfff4e6 	bl	a6c4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    d328:	e2504000 	subs	r4, r0, #0
    d32c:	1a00000e 	bne	d36c <CMachineInfo::GetClockRate(unsigned int) const+0x7c>
    d330:	e3550002 	cmp	r5, #2
    d334:	0a00000e 	beq	d374 <CMachineInfo::GetClockRate(unsigned int) const+0x84>
    d338:	e3550004 	cmp	r5, #4
    d33c:	0a000010 	beq	d384 <CMachineInfo::GetClockRate(unsigned int) const+0x94>
    d340:	e3550001 	cmp	r5, #1
    d344:	0a00000c 	beq	d37c <CMachineInfo::GetClockRate(unsigned int) const+0x8c>
    d348:	e59f2050 	ldr	r2, [pc, #80]	; d3a0 <CMachineInfo::GetClockRate(unsigned int) const+0xb0>
    d34c:	e59f1050 	ldr	r1, [pc, #80]	; d3a4 <CMachineInfo::GetClockRate(unsigned int) const+0xb4>
    d350:	e59f0050 	ldr	r0, [pc, #80]	; d3a8 <CMachineInfo::GetClockRate(unsigned int) const+0xb8>
    d354:	ebfff45f 	bl	a4d8 <assertion_failed>
    d358:	e28d0008 	add	r0, sp, #8
    d35c:	ebfff487 	bl	a580 <CBcmPropertyTags::~CBcmPropertyTags()>
    d360:	e1a00004 	mov	r0, r4
    d364:	e28dd020 	add	sp, sp, #32
    d368:	e8bd8070 	pop	{r4, r5, r6, pc}
    d36c:	e59d401c 	ldr	r4, [sp, #28]
    d370:	eafffff8 	b	d358 <CMachineInfo::GetClockRate(unsigned int) const+0x68>
    d374:	e59f4030 	ldr	r4, [pc, #48]	; d3ac <CMachineInfo::GetClockRate(unsigned int) const+0xbc>
    d378:	eafffff6 	b	d358 <CMachineInfo::GetClockRate(unsigned int) const+0x68>
    d37c:	e59f402c 	ldr	r4, [pc, #44]	; d3b0 <CMachineInfo::GetClockRate(unsigned int) const+0xc0>
    d380:	eafffff4 	b	d358 <CMachineInfo::GetClockRate(unsigned int) const+0x68>
    d384:	e5962008 	ldr	r2, [r6, #8]
    d388:	e59f3024 	ldr	r3, [pc, #36]	; d3b4 <CMachineInfo::GetClockRate(unsigned int) const+0xc4>
    d38c:	e3520002 	cmp	r2, #2
    d390:	e59f4020 	ldr	r4, [pc, #32]	; d3b8 <CMachineInfo::GetClockRate(unsigned int) const+0xc8>
    d394:	81a04003 	movhi	r4, r3
    d398:	eaffffee 	b	d358 <CMachineInfo::GetClockRate(unsigned int) const+0x68>
    d39c:	00030002 	.word	0x00030002
    d3a0:	00000115 	.word	0x00000115
    d3a4:	00014718 	.word	0x00014718
    d3a8:	00014438 	.word	0x00014438
    d3ac:	02dc6c00 	.word	0x02dc6c00
    d3b0:	05f5e100 	.word	0x05f5e100
    d3b4:	11e1a300 	.word	0x11e1a300
    d3b8:	0ee6b280 	.word	0x0ee6b280

0000d3bc <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>:
    d3bc:	e3510036 	cmp	r1, #54	; 0x36
    d3c0:	0a00000d 	beq	d3fc <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x40>
    d3c4:	e3510037 	cmp	r1, #55	; 0x37
    d3c8:	1a000004 	bne	d3e0 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x24>
    d3cc:	e5d00004 	ldrb	r0, [r0, #4]
    d3d0:	e3500003 	cmp	r0, #3
    d3d4:	c3a00028 	movgt	r0, #40	; 0x28
    d3d8:	d3a0002d 	movle	r0, #45	; 0x2d
    d3dc:	e12fff1e 	bx	lr
    d3e0:	e92d4010 	push	{r4, lr}
    d3e4:	e59f2038 	ldr	r2, [pc, #56]	; d424 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x68>
    d3e8:	e59f1038 	ldr	r1, [pc, #56]	; d428 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x6c>
    d3ec:	e59f0038 	ldr	r0, [pc, #56]	; d42c <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x70>
    d3f0:	ebfff438 	bl	a4d8 <assertion_failed>
    d3f4:	e3a00000 	mov	r0, #0
    d3f8:	e8bd8010 	pop	{r4, pc}
    d3fc:	e5d03004 	ldrb	r3, [r0, #4]
    d400:	e3530003 	cmp	r3, #3
    d404:	ca000001 	bgt	d410 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x54>
    d408:	e3a00028 	mov	r0, #40	; 0x28
    d40c:	e12fff1e 	bx	lr
    d410:	e5900008 	ldr	r0, [r0, #8]
    d414:	e3500002 	cmp	r0, #2
    d418:	93a0002d 	movls	r0, #45	; 0x2d
    d41c:	83a00029 	movhi	r0, #41	; 0x29
    d420:	e12fff1e 	bx	lr
    d424:	0000014e 	.word	0x0000014e
    d428:	00014718 	.word	0x00014718
    d42c:	00014438 	.word	0x00014438

0000d430 <CMachineInfo::GetDevice(TDeviceId) const>:
    d430:	e3510000 	cmp	r1, #0
    d434:	1a000003 	bne	d448 <CMachineInfo::GetDevice(TDeviceId) const+0x18>
    d438:	e5d00004 	ldrb	r0, [r0, #4]
    d43c:	e2500001 	subs	r0, r0, #1
    d440:	13a00001 	movne	r0, #1
    d444:	e12fff1e 	bx	lr
    d448:	e92d4010 	push	{r4, lr}
    d44c:	e59f2010 	ldr	r2, [pc, #16]	; d464 <CMachineInfo::GetDevice(TDeviceId) const+0x34>
    d450:	e59f1010 	ldr	r1, [pc, #16]	; d468 <CMachineInfo::GetDevice(TDeviceId) const+0x38>
    d454:	e59f0010 	ldr	r0, [pc, #16]	; d46c <CMachineInfo::GetDevice(TDeviceId) const+0x3c>
    d458:	ebfff41e 	bl	a4d8 <assertion_failed>
    d45c:	e3a00000 	mov	r0, #0
    d460:	e8bd8010 	pop	{r4, pc}
    d464:	00000167 	.word	0x00000167
    d468:	00014718 	.word	0x00014718
    d46c:	00014438 	.word	0x00014438

0000d470 <CMachineInfo::Get()>:
    d470:	e92d4010 	push	{r4, lr}
    d474:	e59f4020 	ldr	r4, [pc, #32]	; d49c <CMachineInfo::Get()+0x2c>
    d478:	e5940000 	ldr	r0, [r4]
    d47c:	e3500000 	cmp	r0, #0
    d480:	18bd8010 	popne	{r4, pc}
    d484:	e3a02e17 	mov	r2, #368	; 0x170
    d488:	e59f1010 	ldr	r1, [pc, #16]	; d4a0 <CMachineInfo::Get()+0x30>
    d48c:	e59f0010 	ldr	r0, [pc, #16]	; d4a4 <CMachineInfo::Get()+0x34>
    d490:	ebfff410 	bl	a4d8 <assertion_failed>
    d494:	e5940000 	ldr	r0, [r4]
    d498:	e8bd8010 	pop	{r4, pc}
    d49c:	00015eb4 	.word	0x00015eb4
    d4a0:	00014718 	.word	0x00014718
    d4a4:	00014468 	.word	0x00014468

0000d4a8 <CScreenDevice::~CScreenDevice()>:
    d4a8:	e5d0200c 	ldrb	r2, [r0, #12]
    d4ac:	e59f3068 	ldr	r3, [pc, #104]	; d51c <CScreenDevice::~CScreenDevice()+0x74>
    d4b0:	e3520000 	cmp	r2, #0
    d4b4:	e92d4070 	push	{r4, r5, r6, lr}
    d4b8:	e1a04000 	mov	r4, r0
    d4bc:	e5803000 	str	r3, [r0]
    d4c0:	0a000003 	beq	d4d4 <CScreenDevice::~CScreenDevice()+0x2c>
    d4c4:	e5900018 	ldr	r0, [r0, #24]
    d4c8:	e3500000 	cmp	r0, #0
    d4cc:	0a000000 	beq	d4d4 <CScreenDevice::~CScreenDevice()+0x2c>
    d4d0:	eb0013fe 	bl	124d0 <operator delete[](void*)>
    d4d4:	e3a03000 	mov	r3, #0
    d4d8:	e5945010 	ldr	r5, [r4, #16]
    d4dc:	e5843018 	str	r3, [r4, #24]
    d4e0:	e1550003 	cmp	r5, r3
    d4e4:	0a000004 	beq	d4fc <CScreenDevice::~CScreenDevice()+0x54>
    d4e8:	e1a00005 	mov	r0, r5
    d4ec:	eb0015ff 	bl	12cf0 <CBcmFrameBuffer::~CBcmFrameBuffer()>
    d4f0:	e1a00005 	mov	r0, r5
    d4f4:	e3a01094 	mov	r1, #148	; 0x94
    d4f8:	eb0013f5 	bl	124d4 <operator delete(void*, unsigned int)>
    d4fc:	e3a03000 	mov	r3, #0
    d500:	e2840014 	add	r0, r4, #20
    d504:	e5843010 	str	r3, [r4, #16]
    d508:	eb001700 	bl	13110 <CCharGenerator::~CCharGenerator()>
    d50c:	e1a00004 	mov	r0, r4
    d510:	ebfff522 	bl	a9a0 <CDevice::~CDevice()>
    d514:	e1a00004 	mov	r0, r4
    d518:	e8bd8070 	pop	{r4, r5, r6, pc}
    d51c:	0001486c 	.word	0x0001486c

0000d520 <CScreenDevice::~CScreenDevice()>:
    d520:	e92d4010 	push	{r4, lr}
    d524:	e1a04000 	mov	r4, r0
    d528:	ebffffde 	bl	d4a8 <CScreenDevice::~CScreenDevice()>
    d52c:	e1a00004 	mov	r0, r4
    d530:	e3a0105c 	mov	r1, #92	; 0x5c
    d534:	eb0013e6 	bl	124d4 <operator delete(void*, unsigned int)>
    d538:	e1a00004 	mov	r0, r4
    d53c:	e8bd8010 	pop	{r4, pc}

0000d540 <CScreenDevice::InvertCursor() [clone .part.6]>:
    d540:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d544:	e2806014 	add	r6, r0, #20
    d548:	e1a05000 	mov	r5, r0
    d54c:	e1a00006 	mov	r0, r6
    d550:	eb0016f3 	bl	13124 <CCharGenerator::GetUnderline() const>
    d554:	e3a08000 	mov	r8, #0
    d558:	e1a07000 	mov	r7, r0
    d55c:	e1a00006 	mov	r0, r6
    d560:	eb0016ed 	bl	1311c <CCharGenerator::GetCharHeight() const>
    d564:	e1500007 	cmp	r0, r7
    d568:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
    d56c:	e3a04000 	mov	r4, #0
    d570:	ea000013 	b	d5c4 <CScreenDevice::InvertCursor() [clone .part.6]+0x84>
    d574:	e595303c 	ldr	r3, [r5, #60]	; 0x3c
    d578:	e5952024 	ldr	r2, [r5, #36]	; 0x24
    d57c:	e0843003 	add	r3, r4, r3
    d580:	e1530002 	cmp	r3, r2
    d584:	2a00000d 	bcs	d5c0 <CScreenDevice::InvertCursor() [clone .part.6]+0x80>
    d588:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    d58c:	e5951028 	ldr	r1, [r5, #40]	; 0x28
    d590:	e0872002 	add	r2, r7, r2
    d594:	e1520001 	cmp	r2, r1
    d598:	2a000008 	bcs	d5c0 <CScreenDevice::InvertCursor() [clone .part.6]+0x80>
    d59c:	e5950020 	ldr	r0, [r5, #32]
    d5a0:	e5951018 	ldr	r1, [r5, #24]
    d5a4:	e0233290 	mla	r3, r0, r2, r3
    d5a8:	e1a03083 	lsl	r3, r3, #1
    d5ac:	e19120b3 	ldrh	r2, [r1, r3]
    d5b0:	e3520000 	cmp	r2, #0
    d5b4:	01d524b6 	ldrheq	r2, [r5, #70]	; 0x46
    d5b8:	118180b3 	strhne	r8, [r1, r3]
    d5bc:	018120b3 	strheq	r2, [r1, r3]
    d5c0:	e2844001 	add	r4, r4, #1
    d5c4:	e1a00006 	mov	r0, r6
    d5c8:	eb0016d1 	bl	13114 <CCharGenerator::GetCharWidth() const>
    d5cc:	e1500004 	cmp	r0, r4
    d5d0:	8affffe7 	bhi	d574 <CScreenDevice::InvertCursor() [clone .part.6]+0x34>
    d5d4:	e2877001 	add	r7, r7, #1
    d5d8:	eaffffdf 	b	d55c <CScreenDevice::InvertCursor() [clone .part.6]+0x1c>

0000d5dc <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool)>:
    d5dc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d5e0:	e1a04000 	mov	r4, r0
    d5e4:	e3a05000 	mov	r5, #0
    d5e8:	e1a07002 	mov	r7, r2
    d5ec:	e1a06003 	mov	r6, r3
    d5f0:	e1a08001 	mov	r8, r1
    d5f4:	ebfff4f5 	bl	a9d0 <CDevice::CDevice()>
    d5f8:	e59f0050 	ldr	r0, [pc, #80]	; d650 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool)+0x74>
    d5fc:	e5848004 	str	r8, [r4, #4]
    d600:	e5840000 	str	r0, [r4]
    d604:	e5847008 	str	r7, [r4, #8]
    d608:	e5c4600c 	strb	r6, [r4, #12]
    d60c:	e5845010 	str	r5, [r4, #16]
    d610:	e2840014 	add	r0, r4, #20
    d614:	eb0016ba 	bl	13104 <CCharGenerator::CCharGenerator()>
    d618:	e3a03001 	mov	r3, #1
    d61c:	e3e02020 	mvn	r2, #32
    d620:	e5845018 	str	r5, [r4, #24]
    d624:	e5845030 	str	r5, [r4, #48]	; 0x30
    d628:	e5845034 	str	r5, [r4, #52]	; 0x34
    d62c:	e584503c 	str	r5, [r4, #60]	; 0x3c
    d630:	e5845040 	str	r5, [r4, #64]	; 0x40
    d634:	e5c45048 	strb	r5, [r4, #72]	; 0x48
    d638:	e5c45054 	strb	r5, [r4, #84]	; 0x54
    d63c:	e1c424b6 	strh	r2, [r4, #70]	; 0x46
    d640:	e5c43044 	strb	r3, [r4, #68]	; 0x44
    d644:	e5843058 	str	r3, [r4, #88]	; 0x58
    d648:	e1a00004 	mov	r0, r4
    d64c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    d650:	0001486c 	.word	0x0001486c

0000d654 <CScreenDevice::GetWidth() const>:
    d654:	e5900024 	ldr	r0, [r0, #36]	; 0x24
    d658:	e12fff1e 	bx	lr

0000d65c <CScreenDevice::GetHeight() const>:
    d65c:	e5900028 	ldr	r0, [r0, #40]	; 0x28
    d660:	e12fff1e 	bx	lr

0000d664 <CScreenDevice::GetColumns() const>:
    d664:	e92d4010 	push	{r4, lr}
    d668:	e2800014 	add	r0, r0, #20
    d66c:	e5904010 	ldr	r4, [r0, #16]
    d670:	eb0016a7 	bl	13114 <CCharGenerator::GetCharWidth() const>
    d674:	e1a01000 	mov	r1, r0
    d678:	e1a00004 	mov	r0, r4
    d67c:	ebfff2be 	bl	a17c <__udivsi3>
    d680:	e8bd8010 	pop	{r4, pc}

0000d684 <CScreenDevice::GetRows() const>:
    d684:	e92d4010 	push	{r4, lr}
    d688:	e2800014 	add	r0, r0, #20
    d68c:	e5904018 	ldr	r4, [r0, #24]
    d690:	eb0016a1 	bl	1311c <CCharGenerator::GetCharHeight() const>
    d694:	e1a01000 	mov	r1, r0
    d698:	e1a00004 	mov	r0, r4
    d69c:	ebfff2b6 	bl	a17c <__udivsi3>
    d6a0:	e8bd8010 	pop	{r4, pc}

0000d6a4 <CScreenDevice::GetStatus()>:
    d6a4:	e591c018 	ldr	ip, [r1, #24]
    d6a8:	e591201c 	ldr	r2, [r1, #28]
    d6ac:	e92d4070 	push	{r4, r5, r6, lr}
    d6b0:	e580c000 	str	ip, [r0]
    d6b4:	e5915030 	ldr	r5, [r1, #48]	; 0x30
    d6b8:	e5914034 	ldr	r4, [r1, #52]	; 0x34
    d6bc:	e591e038 	ldr	lr, [r1, #56]	; 0x38
    d6c0:	e591c03c 	ldr	ip, [r1, #60]	; 0x3c
    d6c4:	e5802004 	str	r2, [r0, #4]
    d6c8:	e5912040 	ldr	r2, [r1, #64]	; 0x40
    d6cc:	e5805008 	str	r5, [r0, #8]
    d6d0:	e5d16044 	ldrb	r6, [r1, #68]	; 0x44
    d6d4:	e580400c 	str	r4, [r0, #12]
    d6d8:	e1d154b6 	ldrh	r5, [r1, #70]	; 0x46
    d6dc:	e580e010 	str	lr, [r0, #16]
    d6e0:	e5d14048 	ldrb	r4, [r1, #72]	; 0x48
    d6e4:	e580c014 	str	ip, [r0, #20]
    d6e8:	e591e04c 	ldr	lr, [r1, #76]	; 0x4c
    d6ec:	e5802018 	str	r2, [r0, #24]
    d6f0:	e591c050 	ldr	ip, [r1, #80]	; 0x50
    d6f4:	e5d12054 	ldrb	r2, [r1, #84]	; 0x54
    d6f8:	e5c0601c 	strb	r6, [r0, #28]
    d6fc:	e1c051be 	strh	r5, [r0, #30]
    d700:	e5c04020 	strb	r4, [r0, #32]
    d704:	e580e024 	str	lr, [r0, #36]	; 0x24
    d708:	e580c028 	str	ip, [r0, #40]	; 0x28
    d70c:	e5c0202c 	strb	r2, [r0, #44]	; 0x2c
    d710:	e8bd8070 	pop	{r4, r5, r6, pc}

0000d714 <CScreenDevice::SetStatus(TScreenStatus const&)>:
    d714:	e590201c 	ldr	r2, [r0, #28]
    d718:	e5913004 	ldr	r3, [r1, #4]
    d71c:	e1520003 	cmp	r2, r3
    d720:	0a000001 	beq	d72c <CScreenDevice::SetStatus(TScreenStatus const&)+0x18>
    d724:	e3a00000 	mov	r0, #0
    d728:	e12fff1e 	bx	lr
    d72c:	e590c020 	ldr	ip, [r0, #32]
    d730:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    d734:	e15c0003 	cmp	ip, r3
    d738:	1afffff9 	bne	d724 <CScreenDevice::SetStatus(TScreenStatus const&)+0x10>
    d73c:	e92d4070 	push	{r4, r5, r6, lr}
    d740:	e1a04000 	mov	r4, r0
    d744:	e5900058 	ldr	r0, [r0, #88]	; 0x58
    d748:	e1a05001 	mov	r5, r1
    d74c:	e3500000 	cmp	r0, #0
    d750:	1a000023 	bne	d7e4 <CScreenDevice::SetStatus(TScreenStatus const&)+0xd0>
    d754:	e5d43054 	ldrb	r3, [r4, #84]	; 0x54
    d758:	e3530000 	cmp	r3, #0
    d75c:	1a000002 	bne	d76c <CScreenDevice::SetStatus(TScreenStatus const&)+0x58>
    d760:	e5d1302c 	ldrb	r3, [r1, #44]	; 0x2c
    d764:	e3530000 	cmp	r3, #0
    d768:	0a000001 	beq	d774 <CScreenDevice::SetStatus(TScreenStatus const&)+0x60>
    d76c:	e3a00000 	mov	r0, #0
    d770:	e8bd8070 	pop	{r4, r5, r6, pc}
    d774:	e5951000 	ldr	r1, [r5]
    d778:	e5940018 	ldr	r0, [r4, #24]
    d77c:	eb001054 	bl	118d4 <memcpy>
    d780:	e5940058 	ldr	r0, [r4, #88]	; 0x58
    d784:	e2851008 	add	r1, r5, #8
    d788:	e891004e 	ldm	r1, {r1, r2, r3, r6}
    d78c:	e595e018 	ldr	lr, [r5, #24]
    d790:	e5d5c01c 	ldrb	ip, [r5, #28]
    d794:	e3500000 	cmp	r0, #0
    d798:	e5841030 	str	r1, [r4, #48]	; 0x30
    d79c:	e1d501be 	ldrh	r0, [r5, #30]
    d7a0:	e5d51020 	ldrb	r1, [r5, #32]
    d7a4:	e5842034 	str	r2, [r4, #52]	; 0x34
    d7a8:	e5843038 	str	r3, [r4, #56]	; 0x38
    d7ac:	e5952024 	ldr	r2, [r5, #36]	; 0x24
    d7b0:	e5953028 	ldr	r3, [r5, #40]	; 0x28
    d7b4:	e584603c 	str	r6, [r4, #60]	; 0x3c
    d7b8:	e584e040 	str	lr, [r4, #64]	; 0x40
    d7bc:	e5c4c044 	strb	ip, [r4, #68]	; 0x44
    d7c0:	e1c404b6 	strh	r0, [r4, #70]	; 0x46
    d7c4:	e5c41048 	strb	r1, [r4, #72]	; 0x48
    d7c8:	e584204c 	str	r2, [r4, #76]	; 0x4c
    d7cc:	e5843050 	str	r3, [r4, #80]	; 0x50
    d7d0:	1a000010 	bne	d818 <CScreenDevice::SetStatus(TScreenStatus const&)+0x104>
    d7d4:	e3a03000 	mov	r3, #0
    d7d8:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    d7dc:	e3a00001 	mov	r0, #1
    d7e0:	e8bd8070 	pop	{r4, r5, r6, pc}
    d7e4:	eb0012dc 	bl	1235c <EnterCritical>
    d7e8:	e5d43054 	ldrb	r3, [r4, #84]	; 0x54
    d7ec:	e3530000 	cmp	r3, #0
    d7f0:	1a000003 	bne	d804 <CScreenDevice::SetStatus(TScreenStatus const&)+0xf0>
    d7f4:	e5d5302c 	ldrb	r3, [r5, #44]	; 0x2c
    d7f8:	e3530000 	cmp	r3, #0
    d7fc:	0594201c 	ldreq	r2, [r4, #28]
    d800:	0affffdb 	beq	d774 <CScreenDevice::SetStatus(TScreenStatus const&)+0x60>
    d804:	e5943058 	ldr	r3, [r4, #88]	; 0x58
    d808:	e3530000 	cmp	r3, #0
    d80c:	0affffd6 	beq	d76c <CScreenDevice::SetStatus(TScreenStatus const&)+0x58>
    d810:	eb0012fe 	bl	12410 <LeaveCritical>
    d814:	eaffffd4 	b	d76c <CScreenDevice::SetStatus(TScreenStatus const&)+0x58>
    d818:	eb0012fc 	bl	12410 <LeaveCritical>
    d81c:	eaffffec 	b	d7d4 <CScreenDevice::SetStatus(TScreenStatus const&)+0xc0>

0000d820 <CScreenDevice::CarriageReturn()>:
    d820:	e3a03000 	mov	r3, #0
    d824:	e580303c 	str	r3, [r0, #60]	; 0x3c
    d828:	e12fff1e 	bx	lr

0000d82c <CScreenDevice::CursorHome()>:
    d82c:	e3a02000 	mov	r2, #0
    d830:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    d834:	e580203c 	str	r2, [r0, #60]	; 0x3c
    d838:	e5803040 	str	r3, [r0, #64]	; 0x40
    d83c:	e12fff1e 	bx	lr

0000d840 <CScreenDevice::CursorLeft()>:
    d840:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    d844:	e92d4070 	push	{r4, r5, r6, lr}
    d848:	e3530000 	cmp	r3, #0
    d84c:	e1a04000 	mov	r4, r0
    d850:	1a00000f 	bne	d894 <CScreenDevice::CursorLeft()+0x54>
    d854:	e5902040 	ldr	r2, [r0, #64]	; 0x40
    d858:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    d85c:	e1520003 	cmp	r2, r3
    d860:	98bd8070 	popls	{r4, r5, r6, pc}
    d864:	e2806014 	add	r6, r0, #20
    d868:	e1a00006 	mov	r0, r6
    d86c:	e5945024 	ldr	r5, [r4, #36]	; 0x24
    d870:	eb001627 	bl	13114 <CCharGenerator::GetCharWidth() const>
    d874:	e0450000 	sub	r0, r5, r0
    d878:	e584003c 	str	r0, [r4, #60]	; 0x3c
    d87c:	e1a00006 	mov	r0, r6
    d880:	eb001625 	bl	1311c <CCharGenerator::GetCharHeight() const>
    d884:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    d888:	e0430000 	sub	r0, r3, r0
    d88c:	e5840040 	str	r0, [r4, #64]	; 0x40
    d890:	e8bd8070 	pop	{r4, r5, r6, pc}
    d894:	e2800014 	add	r0, r0, #20
    d898:	eb00161d 	bl	13114 <CCharGenerator::GetCharWidth() const>
    d89c:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    d8a0:	e0430000 	sub	r0, r3, r0
    d8a4:	e584003c 	str	r0, [r4, #60]	; 0x3c
    d8a8:	e8bd8070 	pop	{r4, r5, r6, pc}

0000d8ac <CScreenDevice::CursorMove(unsigned int, unsigned int)>:
    d8ac:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d8b0:	e2806014 	add	r6, r0, #20
    d8b4:	e1a04002 	mov	r4, r2
    d8b8:	e1a05000 	mov	r5, r0
    d8bc:	e1a00006 	mov	r0, r6
    d8c0:	e1a07001 	mov	r7, r1
    d8c4:	eb001612 	bl	13114 <CCharGenerator::GetCharWidth() const>
    d8c8:	e2444001 	sub	r4, r4, #1
    d8cc:	e0040490 	mul	r4, r0, r4
    d8d0:	e1a00006 	mov	r0, r6
    d8d4:	eb001610 	bl	1311c <CCharGenerator::GetCharHeight() const>
    d8d8:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    d8dc:	e1540003 	cmp	r4, r3
    d8e0:	28bd81f0 	popcs	{r4, r5, r6, r7, r8, pc}
    d8e4:	e2477001 	sub	r7, r7, #1
    d8e8:	e0000790 	mul	r0, r0, r7
    d8ec:	e5953034 	ldr	r3, [r5, #52]	; 0x34
    d8f0:	e1500003 	cmp	r0, r3
    d8f4:	38bd81f0 	popcc	{r4, r5, r6, r7, r8, pc}
    d8f8:	e5953038 	ldr	r3, [r5, #56]	; 0x38
    d8fc:	e1500003 	cmp	r0, r3
    d900:	3585403c 	strcc	r4, [r5, #60]	; 0x3c
    d904:	35850040 	strcc	r0, [r5, #64]	; 0x40
    d908:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000d90c <CScreenDevice::CursorUp()>:
    d90c:	e5902040 	ldr	r2, [r0, #64]	; 0x40
    d910:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    d914:	e1520003 	cmp	r2, r3
    d918:	912fff1e 	bxls	lr
    d91c:	e92d4010 	push	{r4, lr}
    d920:	e1a04000 	mov	r4, r0
    d924:	e2800014 	add	r0, r0, #20
    d928:	eb0015fb 	bl	1311c <CCharGenerator::GetCharHeight() const>
    d92c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    d930:	e0430000 	sub	r0, r3, r0
    d934:	e5840040 	str	r0, [r4, #64]	; 0x40
    d938:	e8bd8010 	pop	{r4, pc}

0000d93c <CScreenDevice::DeleteChars(unsigned int)>:
    d93c:	e12fff1e 	bx	lr

0000d940 <CScreenDevice::DeleteLines(unsigned int)>:
    d940:	e12fff1e 	bx	lr

0000d944 <CScreenDevice::InsertLines(unsigned int)>:
    d944:	e12fff1e 	bx	lr

0000d948 <CScreenDevice::InsertMode(bool)>:
    d948:	e5c01048 	strb	r1, [r0, #72]	; 0x48
    d94c:	e12fff1e 	bx	lr

0000d950 <CScreenDevice::ReverseScroll()>:
    d950:	e12fff1e 	bx	lr

0000d954 <CScreenDevice::SetCursorMode(bool)>:
    d954:	e5c01044 	strb	r1, [r0, #68]	; 0x44
    d958:	e12fff1e 	bx	lr

0000d95c <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>:
    d95c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d960:	e2807014 	add	r7, r0, #20
    d964:	e1a06000 	mov	r6, r0
    d968:	e1a04001 	mov	r4, r1
    d96c:	e1a00007 	mov	r0, r7
    d970:	e1a05002 	mov	r5, r2
    d974:	eb0015e8 	bl	1311c <CCharGenerator::GetCharHeight() const>
    d978:	e2444001 	sub	r4, r4, #1
    d97c:	e0040490 	mul	r4, r0, r4
    d980:	e1a00007 	mov	r0, r7
    d984:	eb0015e4 	bl	1311c <CCharGenerator::GetCharHeight() const>
    d988:	e0000095 	mul	r0, r5, r0
    d98c:	e596202c 	ldr	r2, [r6, #44]	; 0x2c
    d990:	e3500000 	cmp	r0, #0
    d994:	11540002 	cmpne	r4, r2
    d998:	33a03001 	movcc	r3, #1
    d99c:	23a03000 	movcs	r3, #0
    d9a0:	e1500002 	cmp	r0, r2
    d9a4:	83a03000 	movhi	r3, #0
    d9a8:	92033001 	andls	r3, r3, #1
    d9ac:	e1540000 	cmp	r4, r0
    d9b0:	23a03000 	movcs	r3, #0
    d9b4:	32033001 	andcc	r3, r3, #1
    d9b8:	e3530000 	cmp	r3, #0
    d9bc:	e3a03000 	mov	r3, #0
    d9c0:	05964034 	ldreq	r4, [r6, #52]	; 0x34
    d9c4:	15864034 	strne	r4, [r6, #52]	; 0x34
    d9c8:	15860038 	strne	r0, [r6, #56]	; 0x38
    d9cc:	e5864040 	str	r4, [r6, #64]	; 0x40
    d9d0:	e586303c 	str	r3, [r6, #60]	; 0x3c
    d9d4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000d9d8 <CScreenDevice::SetStandoutMode(unsigned int)>:
    d9d8:	e351001b 	cmp	r1, #27
    d9dc:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
    d9e0:	ea00001d 	b	da5c <CScreenDevice::SetStandoutMode(unsigned int)+0x84>
    d9e4:	0000da6c 	.word	0x0000da6c
    d9e8:	0000da60 	.word	0x0000da60
    d9ec:	0000da54 	.word	0x0000da54
    d9f0:	0000da5c 	.word	0x0000da5c
    d9f4:	0000da5c 	.word	0x0000da5c
    d9f8:	0000da5c 	.word	0x0000da5c
    d9fc:	0000da5c 	.word	0x0000da5c
    da00:	0000da5c 	.word	0x0000da5c
    da04:	0000da5c 	.word	0x0000da5c
    da08:	0000da5c 	.word	0x0000da5c
    da0c:	0000da5c 	.word	0x0000da5c
    da10:	0000da5c 	.word	0x0000da5c
    da14:	0000da5c 	.word	0x0000da5c
    da18:	0000da5c 	.word	0x0000da5c
    da1c:	0000da5c 	.word	0x0000da5c
    da20:	0000da5c 	.word	0x0000da5c
    da24:	0000da5c 	.word	0x0000da5c
    da28:	0000da5c 	.word	0x0000da5c
    da2c:	0000da5c 	.word	0x0000da5c
    da30:	0000da5c 	.word	0x0000da5c
    da34:	0000da5c 	.word	0x0000da5c
    da38:	0000da5c 	.word	0x0000da5c
    da3c:	0000da5c 	.word	0x0000da5c
    da40:	0000da5c 	.word	0x0000da5c
    da44:	0000da5c 	.word	0x0000da5c
    da48:	0000da5c 	.word	0x0000da5c
    da4c:	0000da5c 	.word	0x0000da5c
    da50:	0000da6c 	.word	0x0000da6c
    da54:	e3a0301f 	mov	r3, #31
    da58:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
    da5c:	e12fff1e 	bx	lr
    da60:	e3a03b3e 	mov	r3, #63488	; 0xf800
    da64:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
    da68:	e12fff1e 	bx	lr
    da6c:	e3e03020 	mvn	r3, #32
    da70:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
    da74:	e12fff1e 	bx	lr

0000da78 <CScreenDevice::Scroll()>:
    da78:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    da7c:	e1a07000 	mov	r7, r0
    da80:	e2800014 	add	r0, r0, #20
    da84:	eb0015a4 	bl	1311c <CCharGenerator::GetCharHeight() const>
    da88:	e5973034 	ldr	r3, [r7, #52]	; 0x34
    da8c:	e5974038 	ldr	r4, [r7, #56]	; 0x38
    da90:	e5975020 	ldr	r5, [r7, #32]
    da94:	e0444003 	sub	r4, r4, r3
    da98:	e1a02085 	lsl	r2, r5, #1
    da9c:	e0444000 	sub	r4, r4, r0
    daa0:	e0040492 	mul	r4, r2, r4
    daa4:	e0050395 	mul	r5, r5, r3
    daa8:	e5978018 	ldr	r8, [r7, #24]
    daac:	e3540000 	cmp	r4, #0
    dab0:	e1a06000 	mov	r6, r0
    dab4:	e0885085 	add	r5, r8, r5, lsl #1
    dab8:	1a000007 	bne	dadc <CScreenDevice::Scroll()+0x64>
    dabc:	e0020692 	mul	r2, r2, r6
    dac0:	e1b02122 	lsrs	r2, r2, #2
    dac4:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    dac8:	e1a00005 	mov	r0, r5
    dacc:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    dad0:	e1a02102 	lsl	r2, r2, #2
    dad4:	e3a01000 	mov	r1, #0
    dad8:	ea000e0b 	b	1130c <memset>
    dadc:	e0803003 	add	r3, r0, r3
    dae0:	e0288392 	mla	r8, r2, r3, r8
    dae4:	e3c4900f 	bic	r9, r4, #15
    dae8:	e1a01008 	mov	r1, r8
    daec:	e1a02009 	mov	r2, r9
    daf0:	e1a00005 	mov	r0, r5
    daf4:	eb000f76 	bl	118d4 <memcpy>
    daf8:	e204200e 	and	r2, r4, #14
    dafc:	e0850009 	add	r0, r5, r9
    db00:	e0881009 	add	r1, r8, r9
    db04:	eb000f72 	bl	118d4 <memcpy>
    db08:	e5972020 	ldr	r2, [r7, #32]
    db0c:	e3c44003 	bic	r4, r4, #3
    db10:	e1a02082 	lsl	r2, r2, #1
    db14:	e0855004 	add	r5, r5, r4
    db18:	eaffffe7 	b	dabc <CScreenDevice::Scroll()+0x44>

0000db1c <CScreenDevice::CursorDown()>:
    db1c:	e92d4070 	push	{r4, r5, r6, lr}
    db20:	e1a04000 	mov	r4, r0
    db24:	e2805014 	add	r5, r0, #20
    db28:	e1a00005 	mov	r0, r5
    db2c:	eb00157a 	bl	1311c <CCharGenerator::GetCharHeight() const>
    db30:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    db34:	e5942038 	ldr	r2, [r4, #56]	; 0x38
    db38:	e0800003 	add	r0, r0, r3
    db3c:	e1500002 	cmp	r0, r2
    db40:	e5840040 	str	r0, [r4, #64]	; 0x40
    db44:	38bd8070 	popcc	{r4, r5, r6, pc}
    db48:	e1a00004 	mov	r0, r4
    db4c:	ebffffc9 	bl	da78 <CScreenDevice::Scroll()>
    db50:	e1a00005 	mov	r0, r5
    db54:	eb001570 	bl	1311c <CCharGenerator::GetCharHeight() const>
    db58:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    db5c:	e0430000 	sub	r0, r3, r0
    db60:	e5840040 	str	r0, [r4, #64]	; 0x40
    db64:	e8bd8070 	pop	{r4, r5, r6, pc}

0000db68 <CScreenDevice::NewLine()>:
    db68:	e3a02000 	mov	r2, #0
    db6c:	e580203c 	str	r2, [r0, #60]	; 0x3c
    db70:	eaffffe9 	b	db1c <CScreenDevice::CursorDown()>

0000db74 <CScreenDevice::CursorRight()>:
    db74:	e92d4010 	push	{r4, lr}
    db78:	e1a04000 	mov	r4, r0
    db7c:	e2800014 	add	r0, r0, #20
    db80:	eb001563 	bl	13114 <CCharGenerator::GetCharWidth() const>
    db84:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    db88:	e5942024 	ldr	r2, [r4, #36]	; 0x24
    db8c:	e0800003 	add	r0, r0, r3
    db90:	e1500002 	cmp	r0, r2
    db94:	e584003c 	str	r0, [r4, #60]	; 0x3c
    db98:	38bd8010 	popcc	{r4, pc}
    db9c:	e3a03000 	mov	r3, #0
    dba0:	e1a00004 	mov	r0, r4
    dba4:	e584303c 	str	r3, [r4, #60]	; 0x3c
    dba8:	e8bd4010 	pop	{r4, lr}
    dbac:	eaffffda 	b	db1c <CScreenDevice::CursorDown()>

0000dbb0 <CScreenDevice::Tabulator()>:
    dbb0:	e92d4070 	push	{r4, r5, r6, lr}
    dbb4:	e1a05000 	mov	r5, r0
    dbb8:	e2800014 	add	r0, r0, #20
    dbbc:	eb001554 	bl	13114 <CCharGenerator::GetCharWidth() const>
    dbc0:	e595303c 	ldr	r3, [r5, #60]	; 0x3c
    dbc4:	e1a04180 	lsl	r4, r0, #3
    dbc8:	e0840003 	add	r0, r4, r3
    dbcc:	e1a01004 	mov	r1, r4
    dbd0:	ebfff169 	bl	a17c <__udivsi3>
    dbd4:	e0000094 	mul	r0, r4, r0
    dbd8:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    dbdc:	e585003c 	str	r0, [r5, #60]	; 0x3c
    dbe0:	e1500003 	cmp	r0, r3
    dbe4:	38bd8070 	popcc	{r4, r5, r6, pc}
    dbe8:	e3a03000 	mov	r3, #0
    dbec:	e1a00005 	mov	r0, r5
    dbf0:	e585303c 	str	r3, [r5, #60]	; 0x3c
    dbf4:	e8bd4070 	pop	{r4, r5, r6, lr}
    dbf8:	eaffffc7 	b	db1c <CScreenDevice::CursorDown()>

0000dbfc <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>:
    dbfc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dc00:	e2806014 	add	r6, r0, #20
    dc04:	e24dd00c 	sub	sp, sp, #12
    dc08:	e1a07000 	mov	r7, r0
    dc0c:	e1a00006 	mov	r0, r6
    dc10:	e1a0a001 	mov	sl, r1
    dc14:	e1a09002 	mov	r9, r2
    dc18:	e58d3004 	str	r3, [sp, #4]
    dc1c:	e3a08000 	mov	r8, #0
    dc20:	e1ddb3b0 	ldrh	fp, [sp, #48]	; 0x30
    dc24:	eb00153c 	bl	1311c <CCharGenerator::GetCharHeight() const>
    dc28:	e1580000 	cmp	r8, r0
    dc2c:	2a000025 	bcs	dcc8 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xcc>
    dc30:	e59d3004 	ldr	r3, [sp, #4]
    dc34:	e3a04000 	mov	r4, #0
    dc38:	e0883003 	add	r3, r8, r3
    dc3c:	e58d3000 	str	r3, [sp]
    dc40:	ea000000 	b	dc48 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x4c>
    dc44:	e2844001 	add	r4, r4, #1
    dc48:	e1a00006 	mov	r0, r6
    dc4c:	eb001530 	bl	13114 <CCharGenerator::GetCharWidth() const>
    dc50:	e1540000 	cmp	r4, r0
    dc54:	e0845009 	add	r5, r4, r9
    dc58:	2a000015 	bcs	dcb4 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xb8>
    dc5c:	e1a03008 	mov	r3, r8
    dc60:	e1a02004 	mov	r2, r4
    dc64:	e1a0100a 	mov	r1, sl
    dc68:	e1a00006 	mov	r0, r6
    dc6c:	eb00152e 	bl	1312c <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>
    dc70:	e5973024 	ldr	r3, [r7, #36]	; 0x24
    dc74:	e3500000 	cmp	r0, #0
    dc78:	11a0000b 	movne	r0, fp
    dc7c:	03a00000 	moveq	r0, #0
    dc80:	e1550003 	cmp	r5, r3
    dc84:	2affffee 	bcs	dc44 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x48>
    dc88:	e5973028 	ldr	r3, [r7, #40]	; 0x28
    dc8c:	e59d2000 	ldr	r2, [sp]
    dc90:	e1520003 	cmp	r2, r3
    dc94:	2affffea 	bcs	dc44 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x48>
    dc98:	e5973020 	ldr	r3, [r7, #32]
    dc9c:	e59d1000 	ldr	r1, [sp]
    dca0:	e5972018 	ldr	r2, [r7, #24]
    dca4:	e0255193 	mla	r5, r3, r1, r5
    dca8:	e1a05085 	lsl	r5, r5, #1
    dcac:	e18200b5 	strh	r0, [r2, r5]
    dcb0:	eaffffe3 	b	dc44 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x48>
    dcb4:	e1a00006 	mov	r0, r6
    dcb8:	eb001517 	bl	1311c <CCharGenerator::GetCharHeight() const>
    dcbc:	e2888001 	add	r8, r8, #1
    dcc0:	e1580000 	cmp	r8, r0
    dcc4:	3affffd9 	bcc	dc30 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x34>
    dcc8:	e28dd00c 	add	sp, sp, #12
    dccc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000dcd0 <CScreenDevice::DisplayChar(char)>:
    dcd0:	e6ef3071 	uxtb	r3, r1
    dcd4:	e353001f 	cmp	r3, #31
    dcd8:	912fff1e 	bxls	lr
    dcdc:	e92d4010 	push	{r4, lr}
    dce0:	e1a04000 	mov	r4, r0
    dce4:	e1d0c4b6 	ldrh	ip, [r0, #70]	; 0x46
    dce8:	e24dd008 	sub	sp, sp, #8
    dcec:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    dcf0:	e590203c 	ldr	r2, [r0, #60]	; 0x3c
    dcf4:	e58dc000 	str	ip, [sp]
    dcf8:	ebffffbf 	bl	dbfc <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
    dcfc:	e1a00004 	mov	r0, r4
    dd00:	e28dd008 	add	sp, sp, #8
    dd04:	e8bd4010 	pop	{r4, lr}
    dd08:	eaffff99 	b	db74 <CScreenDevice::CursorRight()>

0000dd0c <CScreenDevice::EraseChar(unsigned int, unsigned int)>:
    dd0c:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dd10:	e3a08000 	mov	r8, #0
    dd14:	e1a0b000 	mov	fp, r0
    dd18:	e1a06001 	mov	r6, r1
    dd1c:	e1a0a002 	mov	sl, r2
    dd20:	e1a09008 	mov	r9, r8
    dd24:	e2805014 	add	r5, r0, #20
    dd28:	e1a00005 	mov	r0, r5
    dd2c:	eb0014fa 	bl	1311c <CCharGenerator::GetCharHeight() const>
    dd30:	e1580000 	cmp	r8, r0
    dd34:	28bd8ff8 	popcs	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dd38:	e3a04000 	mov	r4, #0
    dd3c:	e088700a 	add	r7, r8, sl
    dd40:	e1a00005 	mov	r0, r5
    dd44:	eb0014f2 	bl	13114 <CCharGenerator::GetCharWidth() const>
    dd48:	e1540000 	cmp	r4, r0
    dd4c:	e0843006 	add	r3, r4, r6
    dd50:	2a00000c 	bcs	dd88 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x7c>
    dd54:	e59b2024 	ldr	r2, [fp, #36]	; 0x24
    dd58:	e2844001 	add	r4, r4, #1
    dd5c:	e1530002 	cmp	r3, r2
    dd60:	2afffff6 	bcs	dd40 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x34>
    dd64:	e59b2028 	ldr	r2, [fp, #40]	; 0x28
    dd68:	e1570002 	cmp	r7, r2
    dd6c:	2afffff3 	bcs	dd40 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x34>
    dd70:	e59b2020 	ldr	r2, [fp, #32]
    dd74:	e59b1018 	ldr	r1, [fp, #24]
    dd78:	e0233792 	mla	r3, r2, r7, r3
    dd7c:	e1a03083 	lsl	r3, r3, #1
    dd80:	e18190b3 	strh	r9, [r1, r3]
    dd84:	eaffffed 	b	dd40 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x34>
    dd88:	e2888001 	add	r8, r8, #1
    dd8c:	eaffffe5 	b	dd28 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x1c>

0000dd90 <CScreenDevice::ClearLineEnd()>:
    dd90:	e92d4070 	push	{r4, r5, r6, lr}
    dd94:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    dd98:	e590403c 	ldr	r4, [r0, #60]	; 0x3c
    dd9c:	e1540003 	cmp	r4, r3
    dda0:	28bd8070 	popcs	{r4, r5, r6, pc}
    dda4:	e1a05000 	mov	r5, r0
    dda8:	e2806014 	add	r6, r0, #20
    ddac:	e1a01004 	mov	r1, r4
    ddb0:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    ddb4:	e1a00005 	mov	r0, r5
    ddb8:	ebffffd3 	bl	dd0c <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    ddbc:	e1a00006 	mov	r0, r6
    ddc0:	eb0014d3 	bl	13114 <CCharGenerator::GetCharWidth() const>
    ddc4:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    ddc8:	e0844000 	add	r4, r4, r0
    ddcc:	e1530004 	cmp	r3, r4
    ddd0:	8afffff5 	bhi	ddac <CScreenDevice::ClearLineEnd()+0x1c>
    ddd4:	e8bd8070 	pop	{r4, r5, r6, pc}

0000ddd8 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>:
    ddd8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    dddc:	e1a05000 	mov	r5, r0
    dde0:	e2807014 	add	r7, r0, #20
    dde4:	e1a00007 	mov	r0, r7
    dde8:	e1a06001 	mov	r6, r1
    ddec:	e595403c 	ldr	r4, [r5, #60]	; 0x3c
    ddf0:	eb0014c7 	bl	13114 <CCharGenerator::GetCharWidth() const>
    ddf4:	e0204096 	mla	r0, r6, r0, r4
    ddf8:	e5956024 	ldr	r6, [r5, #36]	; 0x24
    ddfc:	e595403c 	ldr	r4, [r5, #60]	; 0x3c
    de00:	e1500006 	cmp	r0, r6
    de04:	31a06000 	movcc	r6, r0
    de08:	e1540006 	cmp	r4, r6
    de0c:	28bd81f0 	popcs	{r4, r5, r6, r7, r8, pc}
    de10:	e1a01004 	mov	r1, r4
    de14:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    de18:	e1a00005 	mov	r0, r5
    de1c:	ebffffba 	bl	dd0c <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    de20:	e1a00007 	mov	r0, r7
    de24:	eb0014ba 	bl	13114 <CCharGenerator::GetCharWidth() const>
    de28:	e0844000 	add	r4, r4, r0
    de2c:	e1540006 	cmp	r4, r6
    de30:	3afffff6 	bcc	de10 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]+0x38>
    de34:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000de38 <CScreenDevice::EraseChars(unsigned int)>:
    de38:	e3510000 	cmp	r1, #0
    de3c:	012fff1e 	bxeq	lr
    de40:	eaffffe4 	b	ddd8 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>

0000de44 <CScreenDevice::ClearDisplayEnd()>:
    de44:	e92d4070 	push	{r4, r5, r6, lr}
    de48:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    de4c:	e590403c 	ldr	r4, [r0, #60]	; 0x3c
    de50:	e1a05000 	mov	r5, r0
    de54:	e1540003 	cmp	r4, r3
    de58:	e2806014 	add	r6, r0, #20
    de5c:	2a000009 	bcs	de88 <CScreenDevice::ClearDisplayEnd()+0x44>
    de60:	e1a01004 	mov	r1, r4
    de64:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    de68:	e1a00005 	mov	r0, r5
    de6c:	ebffffa6 	bl	dd0c <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    de70:	e1a00006 	mov	r0, r6
    de74:	eb0014a6 	bl	13114 <CCharGenerator::GetCharWidth() const>
    de78:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    de7c:	e0844000 	add	r4, r4, r0
    de80:	e1530004 	cmp	r3, r4
    de84:	8afffff5 	bhi	de60 <CScreenDevice::ClearDisplayEnd()+0x1c>
    de88:	e1a00006 	mov	r0, r6
    de8c:	e5954040 	ldr	r4, [r5, #64]	; 0x40
    de90:	eb0014a1 	bl	1311c <CCharGenerator::GetCharHeight() const>
    de94:	e5953020 	ldr	r3, [r5, #32]
    de98:	e0840000 	add	r0, r4, r0
    de9c:	e0000093 	mul	r0, r3, r0
    dea0:	e595201c 	ldr	r2, [r5, #28]
    dea4:	e5953018 	ldr	r3, [r5, #24]
    dea8:	e07020a2 	rsbs	r2, r0, r2, lsr #1
    deac:	0a000004 	beq	dec4 <CScreenDevice::ClearDisplayEnd()+0x80>
    deb0:	e8bd4070 	pop	{r4, r5, r6, lr}
    deb4:	e1a02082 	lsl	r2, r2, #1
    deb8:	e0830080 	add	r0, r3, r0, lsl #1
    debc:	e3a01000 	mov	r1, #0
    dec0:	ea000d11 	b	1130c <memset>
    dec4:	e8bd8070 	pop	{r4, r5, r6, pc}

0000dec8 <CScreenDevice::Write(char)>:
    dec8:	e92d4010 	push	{r4, lr}
    decc:	e5903030 	ldr	r3, [r0, #48]	; 0x30
    ded0:	e24dd008 	sub	sp, sp, #8
    ded4:	e1a04000 	mov	r4, r0
    ded8:	e3530007 	cmp	r3, #7
    dedc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    dee0:	ea000010 	b	df28 <CScreenDevice::Write(char)+0x60>
    dee4:	0000df74 	.word	0x0000df74
    dee8:	0000dfd4 	.word	0x0000dfd4
    deec:	0000dff0 	.word	0x0000dff0
    def0:	0000e048 	.word	0x0000e048
    def4:	0000e124 	.word	0x0000e124
    def8:	0000e144 	.word	0x0000e144
    defc:	0000e164 	.word	0x0000e164
    df00:	0000df38 	.word	0x0000df38
    df04:	e5902034 	ldr	r2, [r0, #52]	; 0x34
    df08:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    df0c:	e1520003 	cmp	r2, r3
    df10:	2a000004 	bcs	df28 <CScreenDevice::Write(char)+0x60>
    df14:	e2800014 	add	r0, r0, #20
    df18:	eb00147f 	bl	1311c <CCharGenerator::GetCharHeight() const>
    df1c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    df20:	e0433000 	sub	r3, r3, r0
    df24:	e5843040 	str	r3, [r4, #64]	; 0x40
    df28:	e3a03000 	mov	r3, #0
    df2c:	e5843030 	str	r3, [r4, #48]	; 0x30
    df30:	e28dd008 	add	sp, sp, #8
    df34:	e8bd8010 	pop	{r4, pc}
    df38:	e3510068 	cmp	r1, #104	; 0x68
    df3c:	0a000097 	beq	e1a0 <CScreenDevice::Write(char)+0x2d8>
    df40:	e351006c 	cmp	r1, #108	; 0x6c
    df44:	0a000095 	beq	e1a0 <CScreenDevice::Write(char)+0x2d8>
    df48:	e2411030 	sub	r1, r1, #48	; 0x30
    df4c:	e6ef3071 	uxtb	r3, r1
    df50:	e3530009 	cmp	r3, #9
    df54:	8afffff3 	bhi	df28 <CScreenDevice::Write(char)+0x60>
    df58:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    df5c:	e0833103 	add	r3, r3, r3, lsl #2
    df60:	e0811083 	add	r1, r1, r3, lsl #1
    df64:	e3510063 	cmp	r1, #99	; 0x63
    df68:	e584104c 	str	r1, [r4, #76]	; 0x4c
    df6c:	8affffed 	bhi	df28 <CScreenDevice::Write(char)+0x60>
    df70:	eaffffee 	b	df30 <CScreenDevice::Write(char)+0x68>
    df74:	e2413008 	sub	r3, r1, #8
    df78:	e3530013 	cmp	r3, #19
    df7c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    df80:	ea0000d3 	b	e2d4 <CScreenDevice::Write(char)+0x40c>
    df84:	0000e20c 	.word	0x0000e20c
    df88:	0000e200 	.word	0x0000e200
    df8c:	0000e1ec 	.word	0x0000e1ec
    df90:	0000e2d4 	.word	0x0000e2d4
    df94:	0000e2d4 	.word	0x0000e2d4
    df98:	0000e1e0 	.word	0x0000e1e0
    df9c:	0000e2d4 	.word	0x0000e2d4
    dfa0:	0000e2d4 	.word	0x0000e2d4
    dfa4:	0000e2d4 	.word	0x0000e2d4
    dfa8:	0000e2d4 	.word	0x0000e2d4
    dfac:	0000e2d4 	.word	0x0000e2d4
    dfb0:	0000e2d4 	.word	0x0000e2d4
    dfb4:	0000e2d4 	.word	0x0000e2d4
    dfb8:	0000e2d4 	.word	0x0000e2d4
    dfbc:	0000e2d4 	.word	0x0000e2d4
    dfc0:	0000e2d4 	.word	0x0000e2d4
    dfc4:	0000e2d4 	.word	0x0000e2d4
    dfc8:	0000e2d4 	.word	0x0000e2d4
    dfcc:	0000e2d4 	.word	0x0000e2d4
    dfd0:	0000e1d4 	.word	0x0000e1d4
    dfd4:	e351004d 	cmp	r1, #77	; 0x4d
    dfd8:	0affffd2 	beq	df28 <CScreenDevice::Write(char)+0x60>
    dfdc:	e351005b 	cmp	r1, #91	; 0x5b
    dfe0:	03a03002 	moveq	r3, #2
    dfe4:	05803030 	streq	r3, [r0, #48]	; 0x30
    dfe8:	0affffd0 	beq	df30 <CScreenDevice::Write(char)+0x68>
    dfec:	eaffffcd 	b	df28 <CScreenDevice::Write(char)+0x60>
    dff0:	e241303f 	sub	r3, r1, #63	; 0x3f
    dff4:	e3530011 	cmp	r3, #17
    dff8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    dffc:	ea0000de 	b	e37c <CScreenDevice::Write(char)+0x4b4>
    e000:	0000e330 	.word	0x0000e330
    e004:	0000e37c 	.word	0x0000e37c
    e008:	0000df04 	.word	0x0000df04
    e00c:	0000e35c 	.word	0x0000e35c
    e010:	0000e34c 	.word	0x0000e34c
    e014:	0000e33c 	.word	0x0000e33c
    e018:	0000e37c 	.word	0x0000e37c
    e01c:	0000e37c 	.word	0x0000e37c
    e020:	0000e37c 	.word	0x0000e37c
    e024:	0000e318 	.word	0x0000e318
    e028:	0000e37c 	.word	0x0000e37c
    e02c:	0000e308 	.word	0x0000e308
    e030:	0000e36c 	.word	0x0000e36c
    e034:	0000df28 	.word	0x0000df28
    e038:	0000df28 	.word	0x0000df28
    e03c:	0000e37c 	.word	0x0000e37c
    e040:	0000e37c 	.word	0x0000e37c
    e044:	0000df28 	.word	0x0000df28
    e048:	e241303b 	sub	r3, r1, #59	; 0x3b
    e04c:	e3530032 	cmp	r3, #50	; 0x32
    e050:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    e054:	eaffffbb 	b	df48 <CScreenDevice::Write(char)+0x80>
    e058:	0000e2c8 	.word	0x0000e2c8
    e05c:	0000df48 	.word	0x0000df48
    e060:	0000df48 	.word	0x0000df48
    e064:	0000df48 	.word	0x0000df48
    e068:	0000df48 	.word	0x0000df48
    e06c:	0000df48 	.word	0x0000df48
    e070:	0000df48 	.word	0x0000df48
    e074:	0000df48 	.word	0x0000df48
    e078:	0000df48 	.word	0x0000df48
    e07c:	0000df48 	.word	0x0000df48
    e080:	0000df48 	.word	0x0000df48
    e084:	0000df48 	.word	0x0000df48
    e088:	0000df48 	.word	0x0000df48
    e08c:	0000df48 	.word	0x0000df48
    e090:	0000df48 	.word	0x0000df48
    e094:	0000df48 	.word	0x0000df48
    e098:	0000df48 	.word	0x0000df48
    e09c:	0000df28 	.word	0x0000df28
    e0a0:	0000df28 	.word	0x0000df28
    e0a4:	0000df48 	.word	0x0000df48
    e0a8:	0000df48 	.word	0x0000df48
    e0ac:	0000df28 	.word	0x0000df28
    e0b0:	0000df48 	.word	0x0000df48
    e0b4:	0000df48 	.word	0x0000df48
    e0b8:	0000df48 	.word	0x0000df48
    e0bc:	0000df48 	.word	0x0000df48
    e0c0:	0000df48 	.word	0x0000df48
    e0c4:	0000df48 	.word	0x0000df48
    e0c8:	0000df48 	.word	0x0000df48
    e0cc:	0000e218 	.word	0x0000e218
    e0d0:	0000df48 	.word	0x0000df48
    e0d4:	0000df48 	.word	0x0000df48
    e0d8:	0000df48 	.word	0x0000df48
    e0dc:	0000df48 	.word	0x0000df48
    e0e0:	0000df48 	.word	0x0000df48
    e0e4:	0000df48 	.word	0x0000df48
    e0e8:	0000df48 	.word	0x0000df48
    e0ec:	0000df48 	.word	0x0000df48
    e0f0:	0000df48 	.word	0x0000df48
    e0f4:	0000df48 	.word	0x0000df48
    e0f8:	0000df48 	.word	0x0000df48
    e0fc:	0000df48 	.word	0x0000df48
    e100:	0000df48 	.word	0x0000df48
    e104:	0000df48 	.word	0x0000df48
    e108:	0000df48 	.word	0x0000df48
    e10c:	0000e22c 	.word	0x0000e22c
    e110:	0000df48 	.word	0x0000df48
    e114:	0000df48 	.word	0x0000df48
    e118:	0000df48 	.word	0x0000df48
    e11c:	0000e22c 	.word	0x0000e22c
    e120:	0000e248 	.word	0x0000e248
    e124:	e2411030 	sub	r1, r1, #48	; 0x30
    e128:	e6ef3071 	uxtb	r3, r1
    e12c:	e3530009 	cmp	r3, #9
    e130:	8affff7c 	bhi	df28 <CScreenDevice::Write(char)+0x60>
    e134:	e3a03007 	mov	r3, #7
    e138:	e580104c 	str	r1, [r0, #76]	; 0x4c
    e13c:	e5803030 	str	r3, [r0, #48]	; 0x30
    e140:	eaffff7a 	b	df30 <CScreenDevice::Write(char)+0x68>
    e144:	e2411030 	sub	r1, r1, #48	; 0x30
    e148:	e6ef3071 	uxtb	r3, r1
    e14c:	e3530009 	cmp	r3, #9
    e150:	8affff74 	bhi	df28 <CScreenDevice::Write(char)+0x60>
    e154:	e3a03006 	mov	r3, #6
    e158:	e5801050 	str	r1, [r0, #80]	; 0x50
    e15c:	e5803030 	str	r3, [r0, #48]	; 0x30
    e160:	eaffff72 	b	df30 <CScreenDevice::Write(char)+0x68>
    e164:	e3510048 	cmp	r1, #72	; 0x48
    e168:	0a000094 	beq	e3c0 <CScreenDevice::Write(char)+0x4f8>
    e16c:	e3510072 	cmp	r1, #114	; 0x72
    e170:	0a000011 	beq	e1bc <CScreenDevice::Write(char)+0x2f4>
    e174:	e2411030 	sub	r1, r1, #48	; 0x30
    e178:	e6ef3071 	uxtb	r3, r1
    e17c:	e3530009 	cmp	r3, #9
    e180:	8affff68 	bhi	df28 <CScreenDevice::Write(char)+0x60>
    e184:	e5903050 	ldr	r3, [r0, #80]	; 0x50
    e188:	e0833103 	add	r3, r3, r3, lsl #2
    e18c:	e0811083 	add	r1, r1, r3, lsl #1
    e190:	e35100c7 	cmp	r1, #199	; 0xc7
    e194:	e5801050 	str	r1, [r0, #80]	; 0x50
    e198:	8affff62 	bhi	df28 <CScreenDevice::Write(char)+0x60>
    e19c:	eaffff63 	b	df30 <CScreenDevice::Write(char)+0x68>
    e1a0:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    e1a4:	e3530019 	cmp	r3, #25
    e1a8:	02411068 	subeq	r1, r1, #104	; 0x68
    e1ac:	016f1f11 	clzeq	r1, r1
    e1b0:	01a012a1 	lsreq	r1, r1, #5
    e1b4:	05c41044 	strbeq	r1, [r4, #68]	; 0x44
    e1b8:	eaffff5a 	b	df28 <CScreenDevice::Write(char)+0x60>
    e1bc:	e5902050 	ldr	r2, [r0, #80]	; 0x50
    e1c0:	e590104c 	ldr	r1, [r0, #76]	; 0x4c
    e1c4:	ebfffde4 	bl	d95c <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>
    e1c8:	e3a03000 	mov	r3, #0
    e1cc:	e5843030 	str	r3, [r4, #48]	; 0x30
    e1d0:	eaffff56 	b	df30 <CScreenDevice::Write(char)+0x68>
    e1d4:	e3a03001 	mov	r3, #1
    e1d8:	e5803030 	str	r3, [r0, #48]	; 0x30
    e1dc:	eaffff53 	b	df30 <CScreenDevice::Write(char)+0x68>
    e1e0:	e3a03000 	mov	r3, #0
    e1e4:	e580303c 	str	r3, [r0, #60]	; 0x3c
    e1e8:	eaffff50 	b	df30 <CScreenDevice::Write(char)+0x68>
    e1ec:	e3a03000 	mov	r3, #0
    e1f0:	e580303c 	str	r3, [r0, #60]	; 0x3c
    e1f4:	e28dd008 	add	sp, sp, #8
    e1f8:	e8bd4010 	pop	{r4, lr}
    e1fc:	eafffe46 	b	db1c <CScreenDevice::CursorDown()>
    e200:	e28dd008 	add	sp, sp, #8
    e204:	e8bd4010 	pop	{r4, lr}
    e208:	eafffe68 	b	dbb0 <CScreenDevice::Tabulator()>
    e20c:	e28dd008 	add	sp, sp, #8
    e210:	e8bd4010 	pop	{r4, lr}
    e214:	eafffd89 	b	d840 <CScreenDevice::CursorLeft()>
    e218:	e590104c 	ldr	r1, [r0, #76]	; 0x4c
    e21c:	e3510000 	cmp	r1, #0
    e220:	0affff40 	beq	df28 <CScreenDevice::Write(char)+0x60>
    e224:	ebfffeeb 	bl	ddd8 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>
    e228:	eaffff3e 	b	df28 <CScreenDevice::Write(char)+0x60>
    e22c:	e590304c 	ldr	r3, [r0, #76]	; 0x4c
    e230:	e3530004 	cmp	r3, #4
    e234:	02411068 	subeq	r1, r1, #104	; 0x68
    e238:	016f1f11 	clzeq	r1, r1
    e23c:	01a012a1 	lsreq	r1, r1, #5
    e240:	05c01048 	strbeq	r1, [r0, #72]	; 0x48
    e244:	eaffff37 	b	df28 <CScreenDevice::Write(char)+0x60>
    e248:	e590304c 	ldr	r3, [r0, #76]	; 0x4c
    e24c:	e353001b 	cmp	r3, #27
    e250:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    e254:	eaffff33 	b	df28 <CScreenDevice::Write(char)+0x60>
    e258:	0000e3b4 	.word	0x0000e3b4
    e25c:	0000e3a8 	.word	0x0000e3a8
    e260:	0000e39c 	.word	0x0000e39c
    e264:	0000df28 	.word	0x0000df28
    e268:	0000df28 	.word	0x0000df28
    e26c:	0000df28 	.word	0x0000df28
    e270:	0000df28 	.word	0x0000df28
    e274:	0000df28 	.word	0x0000df28
    e278:	0000df28 	.word	0x0000df28
    e27c:	0000df28 	.word	0x0000df28
    e280:	0000df28 	.word	0x0000df28
    e284:	0000df28 	.word	0x0000df28
    e288:	0000df28 	.word	0x0000df28
    e28c:	0000df28 	.word	0x0000df28
    e290:	0000df28 	.word	0x0000df28
    e294:	0000df28 	.word	0x0000df28
    e298:	0000df28 	.word	0x0000df28
    e29c:	0000df28 	.word	0x0000df28
    e2a0:	0000df28 	.word	0x0000df28
    e2a4:	0000df28 	.word	0x0000df28
    e2a8:	0000df28 	.word	0x0000df28
    e2ac:	0000df28 	.word	0x0000df28
    e2b0:	0000df28 	.word	0x0000df28
    e2b4:	0000df28 	.word	0x0000df28
    e2b8:	0000df28 	.word	0x0000df28
    e2bc:	0000df28 	.word	0x0000df28
    e2c0:	0000df28 	.word	0x0000df28
    e2c4:	0000e3b4 	.word	0x0000e3b4
    e2c8:	e3a03005 	mov	r3, #5
    e2cc:	e5803030 	str	r3, [r0, #48]	; 0x30
    e2d0:	eaffff16 	b	df30 <CScreenDevice::Write(char)+0x68>
    e2d4:	e6ef3071 	uxtb	r3, r1
    e2d8:	e353001f 	cmp	r3, #31
    e2dc:	9affff13 	bls	df30 <CScreenDevice::Write(char)+0x68>
    e2e0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    e2e4:	e590203c 	ldr	r2, [r0, #60]	; 0x3c
    e2e8:	e1d004b6 	ldrh	r0, [r0, #70]	; 0x46
    e2ec:	e58d0000 	str	r0, [sp]
    e2f0:	e1a00004 	mov	r0, r4
    e2f4:	ebfffe40 	bl	dbfc <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
    e2f8:	e1a00004 	mov	r0, r4
    e2fc:	e28dd008 	add	sp, sp, #8
    e300:	e8bd4010 	pop	{r4, lr}
    e304:	eafffe1a 	b	db74 <CScreenDevice::CursorRight()>
    e308:	ebfffecd 	bl	de44 <CScreenDevice::ClearDisplayEnd()>
    e30c:	e3a03000 	mov	r3, #0
    e310:	e5843030 	str	r3, [r4, #48]	; 0x30
    e314:	eaffff05 	b	df30 <CScreenDevice::Write(char)+0x68>
    e318:	e3a03000 	mov	r3, #0
    e31c:	e5902034 	ldr	r2, [r0, #52]	; 0x34
    e320:	e580303c 	str	r3, [r0, #60]	; 0x3c
    e324:	e5803030 	str	r3, [r0, #48]	; 0x30
    e328:	e5802040 	str	r2, [r0, #64]	; 0x40
    e32c:	eafffeff 	b	df30 <CScreenDevice::Write(char)+0x68>
    e330:	e3a03004 	mov	r3, #4
    e334:	e5803030 	str	r3, [r0, #48]	; 0x30
    e338:	eafffefc 	b	df30 <CScreenDevice::Write(char)+0x68>
    e33c:	ebfffd3f 	bl	d840 <CScreenDevice::CursorLeft()>
    e340:	e3a03000 	mov	r3, #0
    e344:	e5843030 	str	r3, [r4, #48]	; 0x30
    e348:	eafffef8 	b	df30 <CScreenDevice::Write(char)+0x68>
    e34c:	ebfffe08 	bl	db74 <CScreenDevice::CursorRight()>
    e350:	e3a03000 	mov	r3, #0
    e354:	e5843030 	str	r3, [r4, #48]	; 0x30
    e358:	eafffef4 	b	df30 <CScreenDevice::Write(char)+0x68>
    e35c:	ebfffdee 	bl	db1c <CScreenDevice::CursorDown()>
    e360:	e3a03000 	mov	r3, #0
    e364:	e5843030 	str	r3, [r4, #48]	; 0x30
    e368:	eafffef0 	b	df30 <CScreenDevice::Write(char)+0x68>
    e36c:	ebfffe87 	bl	dd90 <CScreenDevice::ClearLineEnd()>
    e370:	e3a03000 	mov	r3, #0
    e374:	e5843030 	str	r3, [r4, #48]	; 0x30
    e378:	eafffeec 	b	df30 <CScreenDevice::Write(char)+0x68>
    e37c:	e2411030 	sub	r1, r1, #48	; 0x30
    e380:	e6ef3071 	uxtb	r3, r1
    e384:	e3530009 	cmp	r3, #9
    e388:	8afffee6 	bhi	df28 <CScreenDevice::Write(char)+0x60>
    e38c:	e3a03003 	mov	r3, #3
    e390:	e580104c 	str	r1, [r0, #76]	; 0x4c
    e394:	e5803030 	str	r3, [r0, #48]	; 0x30
    e398:	eafffee4 	b	df30 <CScreenDevice::Write(char)+0x68>
    e39c:	e3a0301f 	mov	r3, #31
    e3a0:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
    e3a4:	eafffedf 	b	df28 <CScreenDevice::Write(char)+0x60>
    e3a8:	e3a03b3e 	mov	r3, #63488	; 0xf800
    e3ac:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
    e3b0:	eafffedc 	b	df28 <CScreenDevice::Write(char)+0x60>
    e3b4:	e3e03020 	mvn	r3, #32
    e3b8:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
    e3bc:	eafffed9 	b	df28 <CScreenDevice::Write(char)+0x60>
    e3c0:	e5902050 	ldr	r2, [r0, #80]	; 0x50
    e3c4:	e590104c 	ldr	r1, [r0, #76]	; 0x4c
    e3c8:	ebfffd37 	bl	d8ac <CScreenDevice::CursorMove(unsigned int, unsigned int)>
    e3cc:	e3a03000 	mov	r3, #0
    e3d0:	e5843030 	str	r3, [r4, #48]	; 0x30
    e3d4:	eafffed5 	b	df30 <CScreenDevice::Write(char)+0x68>

0000e3d8 <CScreenDevice::Write(void const*, unsigned int)>:
    e3d8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    e3dc:	e1a05000 	mov	r5, r0
    e3e0:	e5900058 	ldr	r0, [r0, #88]	; 0x58
    e3e4:	e1a07001 	mov	r7, r1
    e3e8:	e3500000 	cmp	r0, #0
    e3ec:	e1a04002 	mov	r4, r2
    e3f0:	1a000028 	bne	e498 <CScreenDevice::Write(void const*, unsigned int)+0xc0>
    e3f4:	e3a02001 	mov	r2, #1
    e3f8:	e5d53044 	ldrb	r3, [r5, #68]	; 0x44
    e3fc:	e5c52054 	strb	r2, [r5, #84]	; 0x54
    e400:	e3530000 	cmp	r3, #0
    e404:	1a00001c 	bne	e47c <CScreenDevice::Write(void const*, unsigned int)+0xa4>
    e408:	e3540000 	cmp	r4, #0
    e40c:	e2446001 	sub	r6, r4, #1
    e410:	01a06004 	moveq	r6, r4
    e414:	0a00000b 	beq	e448 <CScreenDevice::Write(void const*, unsigned int)+0x70>
    e418:	e1a04007 	mov	r4, r7
    e41c:	e0d410d1 	ldrsb	r1, [r4], #1
    e420:	e1a00005 	mov	r0, r5
    e424:	ebfffea7 	bl	dec8 <CScreenDevice::Write(char)>
    e428:	e2643001 	rsb	r3, r4, #1
    e42c:	e0833006 	add	r3, r3, r6
    e430:	e1770003 	cmn	r7, r3
    e434:	1afffff8 	bne	e41c <CScreenDevice::Write(void const*, unsigned int)+0x44>
    e438:	e2866001 	add	r6, r6, #1
    e43c:	e5d53044 	ldrb	r3, [r5, #68]	; 0x44
    e440:	e3530000 	cmp	r3, #0
    e444:	1a000009 	bne	e470 <CScreenDevice::Write(void const*, unsigned int)+0x98>
    e448:	e3a02000 	mov	r2, #0
    e44c:	e5953058 	ldr	r3, [r5, #88]	; 0x58
    e450:	e5c52054 	strb	r2, [r5, #84]	; 0x54
    e454:	e1530002 	cmp	r3, r2
    e458:	0a000000 	beq	e460 <CScreenDevice::Write(void const*, unsigned int)+0x88>
    e45c:	eb000feb 	bl	12410 <LeaveCritical>
    e460:	e3a03000 	mov	r3, #0
    e464:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    e468:	e1a00006 	mov	r0, r6
    e46c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e470:	e1a00005 	mov	r0, r5
    e474:	ebfffc31 	bl	d540 <CScreenDevice::InvertCursor() [clone .part.6]>
    e478:	eafffff2 	b	e448 <CScreenDevice::Write(void const*, unsigned int)+0x70>
    e47c:	e1a00005 	mov	r0, r5
    e480:	ebfffc2e 	bl	d540 <CScreenDevice::InvertCursor() [clone .part.6]>
    e484:	e3540000 	cmp	r4, #0
    e488:	e2446001 	sub	r6, r4, #1
    e48c:	1affffe1 	bne	e418 <CScreenDevice::Write(void const*, unsigned int)+0x40>
    e490:	e1a06004 	mov	r6, r4
    e494:	eaffffe8 	b	e43c <CScreenDevice::Write(void const*, unsigned int)+0x64>
    e498:	eb000faf 	bl	1235c <EnterCritical>
    e49c:	eaffffd4 	b	e3f4 <CScreenDevice::Write(void const*, unsigned int)+0x1c>

0000e4a0 <CScreenDevice::Initialize()>:
    e4a0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    e4a4:	e5d0500c 	ldrb	r5, [r0, #12]
    e4a8:	e24dd00c 	sub	sp, sp, #12
    e4ac:	e3550000 	cmp	r5, #0
    e4b0:	e1a04000 	mov	r4, r0
    e4b4:	0a00002a 	beq	e564 <CScreenDevice::Initialize()+0xc4>
    e4b8:	e5903004 	ldr	r3, [r0, #4]
    e4bc:	e5902008 	ldr	r2, [r0, #8]
    e4c0:	e5803024 	str	r3, [r0, #36]	; 0x24
    e4c4:	e0000392 	mul	r0, r2, r3
    e4c8:	e370010f 	cmn	r0, #-1073741821	; 0xc0000003
    e4cc:	e1a00080 	lsl	r0, r0, #1
    e4d0:	e584001c 	str	r0, [r4, #28]
    e4d4:	e5843020 	str	r3, [r4, #32]
    e4d8:	23e00000 	mvncs	r0, #0
    e4dc:	e5842028 	str	r2, [r4, #40]	; 0x28
    e4e0:	eb000ff8 	bl	124c8 <operator new[](unsigned int)>
    e4e4:	e5947028 	ldr	r7, [r4, #40]	; 0x28
    e4e8:	e5840018 	str	r0, [r4, #24]
    e4ec:	e2846014 	add	r6, r4, #20
    e4f0:	e1a00006 	mov	r0, r6
    e4f4:	eb001308 	bl	1311c <CCharGenerator::GetCharHeight() const>
    e4f8:	e1a01000 	mov	r1, r0
    e4fc:	e1a00007 	mov	r0, r7
    e500:	ebffef1d 	bl	a17c <__udivsi3>
    e504:	e1a05000 	mov	r5, r0
    e508:	e1a00006 	mov	r0, r6
    e50c:	eb001302 	bl	1311c <CCharGenerator::GetCharHeight() const>
    e510:	e3a02000 	mov	r2, #0
    e514:	e0000590 	mul	r0, r0, r5
    e518:	e5943034 	ldr	r3, [r4, #52]	; 0x34
    e51c:	e584002c 	str	r0, [r4, #44]	; 0x2c
    e520:	e5840038 	str	r0, [r4, #56]	; 0x38
    e524:	e5843040 	str	r3, [r4, #64]	; 0x40
    e528:	e584203c 	str	r2, [r4, #60]	; 0x3c
    e52c:	e1a00004 	mov	r0, r4
    e530:	ebfffe43 	bl	de44 <CScreenDevice::ClearDisplayEnd()>
    e534:	e5d43044 	ldrb	r3, [r4, #68]	; 0x44
    e538:	e3530000 	cmp	r3, #0
    e53c:	1a00002f 	bne	e600 <CScreenDevice::Initialize()+0x160>
    e540:	ebfff213 	bl	ad94 <CDeviceNameService::Get()>
    e544:	e1a02004 	mov	r2, r4
    e548:	e3a03000 	mov	r3, #0
    e54c:	e59f10b8 	ldr	r1, [pc, #184]	; e60c <CScreenDevice::Initialize()+0x16c>
    e550:	ebfff14f 	bl	aa94 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
    e554:	e3a05001 	mov	r5, #1
    e558:	e1a00005 	mov	r0, r5
    e55c:	e28dd00c 	add	sp, sp, #12
    e560:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    e564:	e3a00094 	mov	r0, #148	; 0x94
    e568:	eb000fd5 	bl	124c4 <operator new(unsigned int)>
    e56c:	e9940006 	ldmib	r4, {r1, r2}
    e570:	e1a06000 	mov	r6, r0
    e574:	e3a03010 	mov	r3, #16
    e578:	e58d5004 	str	r5, [sp, #4]
    e57c:	e58d5000 	str	r5, [sp]
    e580:	eb00118c 	bl	12bb8 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    e584:	e5846010 	str	r6, [r4, #16]
    e588:	e1a00006 	mov	r0, r6
    e58c:	eb001202 	bl	12d9c <CBcmFrameBuffer::Initialize()>
    e590:	e3500000 	cmp	r0, #0
    e594:	0affffef 	beq	e558 <CScreenDevice::Initialize()+0xb8>
    e598:	e5940010 	ldr	r0, [r4, #16]
    e59c:	eb001238 	bl	12e84 <CBcmFrameBuffer::GetDepth() const>
    e5a0:	e3500010 	cmp	r0, #16
    e5a4:	1affffeb 	bne	e558 <CScreenDevice::Initialize()+0xb8>
    e5a8:	e5940010 	ldr	r0, [r4, #16]
    e5ac:	eb001236 	bl	12e8c <CBcmFrameBuffer::GetBuffer() const>
    e5b0:	e5840018 	str	r0, [r4, #24]
    e5b4:	e5940010 	ldr	r0, [r4, #16]
    e5b8:	eb001235 	bl	12e94 <CBcmFrameBuffer::GetSize() const>
    e5bc:	e584001c 	str	r0, [r4, #28]
    e5c0:	e5940010 	ldr	r0, [r4, #16]
    e5c4:	eb00122c 	bl	12e7c <CBcmFrameBuffer::GetPitch() const>
    e5c8:	e5840020 	str	r0, [r4, #32]
    e5cc:	e5940010 	ldr	r0, [r4, #16]
    e5d0:	eb001221 	bl	12e5c <CBcmFrameBuffer::GetWidth() const>
    e5d4:	e5840024 	str	r0, [r4, #36]	; 0x24
    e5d8:	e5940010 	ldr	r0, [r4, #16]
    e5dc:	eb001220 	bl	12e64 <CBcmFrameBuffer::GetHeight() const>
    e5e0:	e5943020 	ldr	r3, [r4, #32]
    e5e4:	e1a07000 	mov	r7, r0
    e5e8:	e3130003 	tst	r3, #3
    e5ec:	01a030a3 	lsreq	r3, r3, #1
    e5f0:	e5840028 	str	r0, [r4, #40]	; 0x28
    e5f4:	05843020 	streq	r3, [r4, #32]
    e5f8:	0affffbb 	beq	e4ec <CScreenDevice::Initialize()+0x4c>
    e5fc:	eaffffd5 	b	e558 <CScreenDevice::Initialize()+0xb8>
    e600:	e1a00004 	mov	r0, r4
    e604:	ebfffbcd 	bl	d540 <CScreenDevice::InvertCursor() [clone .part.6]>
    e608:	eaffffcc 	b	e540 <CScreenDevice::Initialize()+0xa0>
    e60c:	00014478 	.word	0x00014478

0000e610 <CScreenDevice::InvertCursor()>:
    e610:	e5d03044 	ldrb	r3, [r0, #68]	; 0x44
    e614:	e3530000 	cmp	r3, #0
    e618:	012fff1e 	bxeq	lr
    e61c:	eafffbc7 	b	d540 <CScreenDevice::InvertCursor() [clone .part.6]>

0000e620 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)>:
    e620:	e590c024 	ldr	ip, [r0, #36]	; 0x24
    e624:	e15c0001 	cmp	ip, r1
    e628:	912fff1e 	bxls	lr
    e62c:	e590c028 	ldr	ip, [r0, #40]	; 0x28
    e630:	e15c0002 	cmp	ip, r2
    e634:	8590c020 	ldrhi	ip, [r0, #32]
    e638:	85900018 	ldrhi	r0, [r0, #24]
    e63c:	8022129c 	mlahi	r2, ip, r2, r1
    e640:	81a02082 	lslhi	r2, r2, #1
    e644:	818030b2 	strhhi	r3, [r0, r2]
    e648:	e12fff1e 	bx	lr

0000e64c <CScreenDevice::GetPixel(unsigned int, unsigned int)>:
    e64c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    e650:	e1530001 	cmp	r3, r1
    e654:	9a000008 	bls	e67c <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x30>
    e658:	e5903028 	ldr	r3, [r0, #40]	; 0x28
    e65c:	e1530002 	cmp	r3, r2
    e660:	9a000005 	bls	e67c <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x30>
    e664:	e590c020 	ldr	ip, [r0, #32]
    e668:	e5903018 	ldr	r3, [r0, #24]
    e66c:	e022129c 	mla	r2, ip, r2, r1
    e670:	e1a02082 	lsl	r2, r2, #1
    e674:	e19300b2 	ldrh	r0, [r3, r2]
    e678:	e12fff1e 	bx	lr
    e67c:	e3a00000 	mov	r0, #0
    e680:	e12fff1e 	bx	lr

0000e684 <CScreenDevice::Rotor(unsigned int, unsigned int)>:
    e684:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    e688:	e1a05000 	mov	r5, r0
    e68c:	e24dd00c 	sub	sp, sp, #12
    e690:	e1a04001 	mov	r4, r1
    e694:	e2800014 	add	r0, r0, #20
    e698:	e1a06002 	mov	r6, r2
    e69c:	e5957024 	ldr	r7, [r5, #36]	; 0x24
    e6a0:	eb00129b 	bl	13114 <CCharGenerator::GetCharWidth() const>
    e6a4:	e3a0cb3e 	mov	ip, #63488	; 0xf800
    e6a8:	e2044003 	and	r4, r4, #3
    e6ac:	e0200094 	mla	r0, r4, r0, r0
    e6b0:	e59f3024 	ldr	r3, [pc, #36]	; e6dc <CScreenDevice::Rotor(unsigned int, unsigned int)+0x58>
    e6b4:	e2066003 	and	r6, r6, #3
    e6b8:	e0833006 	add	r3, r3, r6
    e6bc:	e1d311dc 	ldrsb	r1, [r3, #28]
    e6c0:	e0472000 	sub	r2, r7, r0
    e6c4:	e58dc000 	str	ip, [sp]
    e6c8:	e1a00005 	mov	r0, r5
    e6cc:	e3a03000 	mov	r3, #0
    e6d0:	ebfffd49 	bl	dbfc <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
    e6d4:	e28dd00c 	add	sp, sp, #12
    e6d8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    e6dc:	00014864 	.word	0x00014864

0000e6e0 <CSerialDevice::Read(void*, unsigned int)>:
    e6e0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    e6e4:	e2514000 	subs	r4, r1, #0
    e6e8:	e1a05000 	mov	r5, r0
    e6ec:	e1a08002 	mov	r8, r2
    e6f0:	0a00005a 	beq	e860 <CSerialDevice::Read(void*, unsigned int)+0x180>
    e6f4:	e59530a4 	ldr	r3, [r5, #164]	; 0xa4
    e6f8:	e3530000 	cmp	r3, #0
    e6fc:	0a000034 	beq	e7d4 <CSerialDevice::Read(void*, unsigned int)+0xf4>
    e700:	e2856802 	add	r6, r5, #131072	; 0x20000
    e704:	e59600d0 	ldr	r0, [r6, #208]	; 0xd0
    e708:	e3500000 	cmp	r0, #0
    e70c:	1a000022 	bne	e79c <CSerialDevice::Read(void*, unsigned int)+0xbc>
    e710:	e2853801 	add	r3, r5, #65536	; 0x10000
    e714:	e59320b4 	ldr	r2, [r3, #180]	; 0xb4
    e718:	e3520000 	cmp	r2, #0
    e71c:	ba000023 	blt	e7b0 <CSerialDevice::Read(void*, unsigned int)+0xd0>
    e720:	e3580000 	cmp	r8, #0
    e724:	0a000017 	beq	e788 <CSerialDevice::Read(void*, unsigned int)+0xa8>
    e728:	e59320ac 	ldr	r2, [r3, #172]	; 0xac
    e72c:	e59310b0 	ldr	r1, [r3, #176]	; 0xb0
    e730:	e1510002 	cmp	r1, r2
    e734:	0a000054 	beq	e88c <CSerialDevice::Read(void*, unsigned int)+0x1ac>
    e738:	e0842008 	add	r2, r4, r8
    e73c:	e1a0c004 	mov	ip, r4
    e740:	e59fe154 	ldr	lr, [pc, #340]	; e89c <CSerialDevice::Read(void*, unsigned int)+0x1bc>
    e744:	ea000003 	b	e758 <CSerialDevice::Read(void*, unsigned int)+0x78>
    e748:	e59370ac 	ldr	r7, [r3, #172]	; 0xac
    e74c:	e59310b0 	ldr	r1, [r3, #176]	; 0xb0
    e750:	e1570001 	cmp	r7, r1
    e754:	0a00000b 	beq	e788 <CSerialDevice::Read(void*, unsigned int)+0xa8>
    e758:	e59310b0 	ldr	r1, [r3, #176]	; 0xb0
    e75c:	e2810001 	add	r0, r1, #1
    e760:	e58300b0 	str	r0, [r3, #176]	; 0xb0
    e764:	e0851001 	add	r1, r5, r1
    e768:	e5d110aa 	ldrb	r1, [r1, #170]	; 0xaa
    e76c:	e4cc1001 	strb	r1, [ip], #1
    e770:	e59310b0 	ldr	r1, [r3, #176]	; 0xb0
    e774:	e15c0002 	cmp	ip, r2
    e778:	e001100e 	and	r1, r1, lr
    e77c:	e58310b0 	str	r1, [r3, #176]	; 0xb0
    e780:	e04c8004 	sub	r8, ip, r4
    e784:	1affffef 	bne	e748 <CSerialDevice::Read(void*, unsigned int)+0x68>
    e788:	e59630d0 	ldr	r3, [r6, #208]	; 0xd0
    e78c:	e3530000 	cmp	r3, #0
    e790:	1a00000c 	bne	e7c8 <CSerialDevice::Read(void*, unsigned int)+0xe8>
    e794:	e1a00008 	mov	r0, r8
    e798:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e79c:	eb000eee 	bl	1235c <EnterCritical>
    e7a0:	e2853801 	add	r3, r5, #65536	; 0x10000
    e7a4:	e59320b4 	ldr	r2, [r3, #180]	; 0xb4
    e7a8:	e3520000 	cmp	r2, #0
    e7ac:	aaffffdb 	bge	e720 <CSerialDevice::Read(void*, unsigned int)+0x40>
    e7b0:	e3a02000 	mov	r2, #0
    e7b4:	e59380b4 	ldr	r8, [r3, #180]	; 0xb4
    e7b8:	e58320b4 	str	r2, [r3, #180]	; 0xb4
    e7bc:	e59630d0 	ldr	r3, [r6, #208]	; 0xd0
    e7c0:	e3530000 	cmp	r3, #0
    e7c4:	0afffff2 	beq	e794 <CSerialDevice::Read(void*, unsigned int)+0xb4>
    e7c8:	eb000f10 	bl	12410 <LeaveCritical>
    e7cc:	e1a00008 	mov	r0, r8
    e7d0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e7d4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    e7d8:	e3580000 	cmp	r8, #0
    e7dc:	0a00001b 	beq	e850 <CSerialDevice::Read(void*, unsigned int)+0x170>
    e7e0:	e59fc0b8 	ldr	ip, [pc, #184]	; e8a0 <CSerialDevice::Read(void*, unsigned int)+0x1c0>
    e7e4:	e59c2018 	ldr	r2, [ip, #24]
    e7e8:	e3120010 	tst	r2, #16
    e7ec:	1a000028 	bne	e894 <CSerialDevice::Read(void*, unsigned int)+0x1b4>
    e7f0:	e59c3000 	ldr	r3, [ip]
    e7f4:	e3130b01 	tst	r3, #1024	; 0x400
    e7f8:	1a00001d 	bne	e874 <CSerialDevice::Read(void*, unsigned int)+0x194>
    e7fc:	e3130b02 	tst	r3, #2048	; 0x800
    e800:	1a00001d 	bne	e87c <CSerialDevice::Read(void*, unsigned int)+0x19c>
    e804:	e3130c01 	tst	r3, #256	; 0x100
    e808:	1a00001d 	bne	e884 <CSerialDevice::Read(void*, unsigned int)+0x1a4>
    e80c:	e0842008 	add	r2, r4, r8
    e810:	e1a01004 	mov	r1, r4
    e814:	ea000009 	b	e840 <CSerialDevice::Read(void*, unsigned int)+0x160>
    e818:	e59c3018 	ldr	r3, [ip, #24]
    e81c:	e3130010 	tst	r3, #16
    e820:	1a00000a 	bne	e850 <CSerialDevice::Read(void*, unsigned int)+0x170>
    e824:	e59c3000 	ldr	r3, [ip]
    e828:	e3130b01 	tst	r3, #1024	; 0x400
    e82c:	1a000010 	bne	e874 <CSerialDevice::Read(void*, unsigned int)+0x194>
    e830:	e3130b02 	tst	r3, #2048	; 0x800
    e834:	1a000010 	bne	e87c <CSerialDevice::Read(void*, unsigned int)+0x19c>
    e838:	e3130c01 	tst	r3, #256	; 0x100
    e83c:	1a000010 	bne	e884 <CSerialDevice::Read(void*, unsigned int)+0x1a4>
    e840:	e4c13001 	strb	r3, [r1], #1
    e844:	e1510002 	cmp	r1, r2
    e848:	e0418004 	sub	r8, r1, r4
    e84c:	1afffff1 	bne	e818 <CSerialDevice::Read(void*, unsigned int)+0x138>
    e850:	e3a03000 	mov	r3, #0
    e854:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    e858:	e1a00008 	mov	r0, r8
    e85c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e860:	e59f203c 	ldr	r2, [pc, #60]	; e8a4 <CSerialDevice::Read(void*, unsigned int)+0x1c4>
    e864:	e59f103c 	ldr	r1, [pc, #60]	; e8a8 <CSerialDevice::Read(void*, unsigned int)+0x1c8>
    e868:	e59f003c 	ldr	r0, [pc, #60]	; e8ac <CSerialDevice::Read(void*, unsigned int)+0x1cc>
    e86c:	ebffef19 	bl	a4d8 <assertion_failed>
    e870:	eaffff9f 	b	e6f4 <CSerialDevice::Read(void*, unsigned int)+0x14>
    e874:	e3e08000 	mvn	r8, #0
    e878:	eafffff4 	b	e850 <CSerialDevice::Read(void*, unsigned int)+0x170>
    e87c:	e3e08001 	mvn	r8, #1
    e880:	eafffff2 	b	e850 <CSerialDevice::Read(void*, unsigned int)+0x170>
    e884:	e3e08002 	mvn	r8, #2
    e888:	eafffff0 	b	e850 <CSerialDevice::Read(void*, unsigned int)+0x170>
    e88c:	e3a08000 	mov	r8, #0
    e890:	eaffffbc 	b	e788 <CSerialDevice::Read(void*, unsigned int)+0xa8>
    e894:	e1a08003 	mov	r8, r3
    e898:	eaffffec 	b	e850 <CSerialDevice::Read(void*, unsigned int)+0x170>
    e89c:	0000ffff 	.word	0x0000ffff
    e8a0:	20201000 	.word	0x20201000
    e8a4:	00000101 	.word	0x00000101
    e8a8:	000148a4 	.word	0x000148a4
    e8ac:	00013a90 	.word	0x00013a90

0000e8b0 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool)>:
    e8b0:	e92d4070 	push	{r4, r5, r6, lr}
    e8b4:	e1a04000 	mov	r4, r0
    e8b8:	e1a05002 	mov	r5, r2
    e8bc:	e1a06001 	mov	r6, r1
    e8c0:	ebfff042 	bl	a9d0 <CDevice::CDevice()>
    e8c4:	e1a00004 	mov	r0, r4
    e8c8:	e3a03000 	mov	r3, #0
    e8cc:	e59f109c 	ldr	r1, [pc, #156]	; e970 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool)+0xc0>
    e8d0:	e1a02003 	mov	r2, r3
    e8d4:	e4801004 	str	r1, [r0], #4
    e8d8:	e3a01020 	mov	r1, #32
    e8dc:	ebfff4a9 	bl	bb88 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    e8e0:	e3a03000 	mov	r3, #0
    e8e4:	e284002c 	add	r0, r4, #44	; 0x2c
    e8e8:	e1a02003 	mov	r2, r3
    e8ec:	e3a01021 	mov	r1, #33	; 0x21
    e8f0:	ebfff4a4 	bl	bb88 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    e8f4:	e2840054 	add	r0, r4, #84	; 0x54
    e8f8:	e3a03000 	mov	r3, #0
    e8fc:	e3a02004 	mov	r2, #4
    e900:	e3a0100e 	mov	r1, #14
    e904:	ebfff49f 	bl	bb88 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    e908:	e284007c 	add	r0, r4, #124	; 0x7c
    e90c:	e3a03000 	mov	r3, #0
    e910:	e3a02004 	mov	r2, #4
    e914:	e3a0100f 	mov	r1, #15
    e918:	ebfff49a 	bl	bb88 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    e91c:	e3550000 	cmp	r5, #0
    e920:	e3a03000 	mov	r3, #0
    e924:	e3a0c001 	mov	ip, #1
    e928:	13a0e002 	movne	lr, #2
    e92c:	03a0e001 	moveq	lr, #1
    e930:	e2842802 	add	r2, r4, #131072	; 0x20000
    e934:	e2841801 	add	r1, r4, #65536	; 0x10000
    e938:	e58460a4 	str	r6, [r4, #164]	; 0xa4
    e93c:	e5c450a8 	strb	r5, [r4, #168]	; 0xa8
    e940:	e5c430a9 	strb	r3, [r4, #169]	; 0xa9
    e944:	e1a00004 	mov	r0, r4
    e948:	e58130ac 	str	r3, [r1, #172]	; 0xac
    e94c:	e58130b0 	str	r3, [r1, #176]	; 0xb0
    e950:	e58130b4 	str	r3, [r1, #180]	; 0xb4
    e954:	e58230b8 	str	r3, [r2, #184]	; 0xb8
    e958:	e582e0d0 	str	lr, [r2, #208]	; 0xd0
    e95c:	e58230c4 	str	r3, [r2, #196]	; 0xc4
    e960:	e58230bc 	str	r3, [r2, #188]	; 0xbc
    e964:	e582c0c0 	str	ip, [r2, #192]	; 0xc0
    e968:	e582c0d4 	str	ip, [r2, #212]	; 0xd4
    e96c:	e8bd8070 	pop	{r4, r5, r6, pc}
    e970:	00014890 	.word	0x00014890

0000e974 <CSerialDevice::Initialize(unsigned int)>:
    e974:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    e978:	e1a07001 	mov	r7, r1
    e97c:	e1a04000 	mov	r4, r0
    e980:	ebfffaba 	bl	d470 <CMachineInfo::Get()>
    e984:	e3a01002 	mov	r1, #2
    e988:	ebfffa58 	bl	d2f0 <CMachineInfo::GetClockRate(unsigned int) const>
    e98c:	e2508000 	subs	r8, r0, #0
    e990:	0a000051 	beq	eadc <CSerialDevice::Initialize(unsigned int)+0x168>
    e994:	e59f3154 	ldr	r3, [pc, #340]	; eaf0 <CSerialDevice::Initialize(unsigned int)+0x17c>
    e998:	e2472f4b 	sub	r2, r7, #300	; 0x12c
    e99c:	e1520003 	cmp	r2, r3
    e9a0:	8a000048 	bhi	eac8 <CSerialDevice::Initialize(unsigned int)+0x154>
    e9a4:	e1a05207 	lsl	r5, r7, #4
    e9a8:	e1a01005 	mov	r1, r5
    e9ac:	e1a00008 	mov	r0, r8
    e9b0:	ebffedf1 	bl	a17c <__udivsi3>
    e9b4:	e59f3138 	ldr	r3, [pc, #312]	; eaf4 <CSerialDevice::Initialize(unsigned int)+0x180>
    e9b8:	e2402001 	sub	r2, r0, #1
    e9bc:	e1520003 	cmp	r2, r3
    e9c0:	e1a06000 	mov	r6, r0
    e9c4:	8a00003a 	bhi	eab4 <CSerialDevice::Initialize(unsigned int)+0x140>
    e9c8:	e1a01005 	mov	r1, r5
    e9cc:	e1a00008 	mov	r0, r8
    e9d0:	ebffee26 	bl	a270 <__aeabi_uidivmod>
    e9d4:	e1a00181 	lsl	r0, r1, #3
    e9d8:	e1a01007 	mov	r1, r7
    e9dc:	ebffede6 	bl	a17c <__udivsi3>
    e9e0:	e2005001 	and	r5, r0, #1
    e9e4:	e08550a0 	add	r5, r5, r0, lsr #1
    e9e8:	e355003f 	cmp	r5, #63	; 0x3f
    e9ec:	8a00002b 	bhi	eaa0 <CSerialDevice::Initialize(unsigned int)+0x12c>
    e9f0:	e59400a4 	ldr	r0, [r4, #164]	; 0xa4
    e9f4:	e3500000 	cmp	r0, #0
    e9f8:	0a000008 	beq	ea20 <CSerialDevice::Initialize(unsigned int)+0xac>
    e9fc:	e5d430a8 	ldrb	r3, [r4, #168]	; 0xa8
    ea00:	e59f20f0 	ldr	r2, [pc, #240]	; eaf8 <CSerialDevice::Initialize(unsigned int)+0x184>
    ea04:	e3530000 	cmp	r3, #0
    ea08:	e3a01039 	mov	r1, #57	; 0x39
    ea0c:	e1a03004 	mov	r3, r4
    ea10:	0a000020 	beq	ea98 <CSerialDevice::Initialize(unsigned int)+0x124>
    ea14:	ebfff5ac 	bl	c0cc <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>
    ea18:	e3a03001 	mov	r3, #1
    ea1c:	e5c430a9 	strb	r3, [r4, #169]	; 0xa9
    ea20:	e3a02000 	mov	r2, #0
    ea24:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
    ea28:	e59400a4 	ldr	r0, [r4, #164]	; 0xa4
    ea2c:	e59f30c8 	ldr	r3, [pc, #200]	; eafc <CSerialDevice::Initialize(unsigned int)+0x188>
    ea30:	e59f10c8 	ldr	r1, [pc, #200]	; eb00 <CSerialDevice::Initialize(unsigned int)+0x18c>
    ea34:	e1500002 	cmp	r0, r2
    ea38:	e5832038 	str	r2, [r3, #56]	; 0x38
    ea3c:	13a00009 	movne	r0, #9
    ea40:	e5831044 	str	r1, [r3, #68]	; 0x44
    ea44:	13a02e45 	movne	r2, #1104	; 0x450
    ea48:	03a02060 	moveq	r2, #96	; 0x60
    ea4c:	13a01070 	movne	r1, #112	; 0x70
    ea50:	e5836024 	str	r6, [r3, #36]	; 0x24
    ea54:	e5835028 	str	r5, [r3, #40]	; 0x28
    ea58:	15830034 	strne	r0, [r3, #52]	; 0x34
    ea5c:	0583202c 	streq	r2, [r3, #44]	; 0x2c
    ea60:	1583102c 	strne	r1, [r3, #44]	; 0x2c
    ea64:	15832038 	strne	r2, [r3, #56]	; 0x38
    ea68:	e59f308c 	ldr	r3, [pc, #140]	; eafc <CSerialDevice::Initialize(unsigned int)+0x188>
    ea6c:	e59f2090 	ldr	r2, [pc, #144]	; eb04 <CSerialDevice::Initialize(unsigned int)+0x190>
    ea70:	e3a05000 	mov	r5, #0
    ea74:	e5832030 	str	r2, [r3, #48]	; 0x30
    ea78:	ee075fba 	mcr	15, 0, r5, cr7, cr10, {5}
    ea7c:	ebfff0c4 	bl	ad94 <CDeviceNameService::Get()>
    ea80:	e1a03005 	mov	r3, r5
    ea84:	e1a02004 	mov	r2, r4
    ea88:	e59f1078 	ldr	r1, [pc, #120]	; eb08 <CSerialDevice::Initialize(unsigned int)+0x194>
    ea8c:	ebfff000 	bl	aa94 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
    ea90:	e3a00001 	mov	r0, #1
    ea94:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ea98:	ebfff51e 	bl	bf18 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    ea9c:	eaffffdd 	b	ea18 <CSerialDevice::Initialize(unsigned int)+0xa4>
    eaa0:	e3a02092 	mov	r2, #146	; 0x92
    eaa4:	e59f1060 	ldr	r1, [pc, #96]	; eb0c <CSerialDevice::Initialize(unsigned int)+0x198>
    eaa8:	e59f0060 	ldr	r0, [pc, #96]	; eb10 <CSerialDevice::Initialize(unsigned int)+0x19c>
    eaac:	ebffee89 	bl	a4d8 <assertion_failed>
    eab0:	eaffffce 	b	e9f0 <CSerialDevice::Initialize(unsigned int)+0x7c>
    eab4:	e3a0208f 	mov	r2, #143	; 0x8f
    eab8:	e59f104c 	ldr	r1, [pc, #76]	; eb0c <CSerialDevice::Initialize(unsigned int)+0x198>
    eabc:	e59f0050 	ldr	r0, [pc, #80]	; eb14 <CSerialDevice::Initialize(unsigned int)+0x1a0>
    eac0:	ebffee84 	bl	a4d8 <assertion_failed>
    eac4:	eaffffbf 	b	e9c8 <CSerialDevice::Initialize(unsigned int)+0x54>
    eac8:	e3a0208c 	mov	r2, #140	; 0x8c
    eacc:	e59f1038 	ldr	r1, [pc, #56]	; eb0c <CSerialDevice::Initialize(unsigned int)+0x198>
    ead0:	e59f0040 	ldr	r0, [pc, #64]	; eb18 <CSerialDevice::Initialize(unsigned int)+0x1a4>
    ead4:	ebffee7f 	bl	a4d8 <assertion_failed>
    ead8:	eaffffb1 	b	e9a4 <CSerialDevice::Initialize(unsigned int)+0x30>
    eadc:	e3a0208a 	mov	r2, #138	; 0x8a
    eae0:	e59f1024 	ldr	r1, [pc, #36]	; eb0c <CSerialDevice::Initialize(unsigned int)+0x198>
    eae4:	e59f0030 	ldr	r0, [pc, #48]	; eb1c <CSerialDevice::Initialize(unsigned int)+0x1a8>
    eae8:	ebffee7a 	bl	a4d8 <assertion_failed>
    eaec:	eaffffa8 	b	e994 <CSerialDevice::Initialize(unsigned int)+0x20>
    eaf0:	003d07d4 	.word	0x003d07d4
    eaf4:	0000fffe 	.word	0x0000fffe
    eaf8:	0000f288 	.word	0x0000f288
    eafc:	20201000 	.word	0x20201000
    eb00:	000007ff 	.word	0x000007ff
    eb04:	00000301 	.word	0x00000301
    eb08:	00013b10 	.word	0x00013b10
    eb0c:	000148a4 	.word	0x000148a4
    eb10:	00013afc 	.word	0x00013afc
    eb14:	00013ad8 	.word	0x00013ad8
    eb18:	00013aac 	.word	0x00013aac
    eb1c:	00013a9c 	.word	0x00013a9c

0000eb20 <CSerialDevice::GetOptions() const>:
    eb20:	e2800802 	add	r0, r0, #131072	; 0x20000
    eb24:	e59000c0 	ldr	r0, [r0, #192]	; 0xc0
    eb28:	e12fff1e 	bx	lr

0000eb2c <CSerialDevice::SetOptions(unsigned int)>:
    eb2c:	e2800802 	add	r0, r0, #131072	; 0x20000
    eb30:	e58010c0 	str	r1, [r0, #192]	; 0xc0
    eb34:	e12fff1e 	bx	lr

0000eb38 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())>:
    eb38:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
    eb3c:	e92d4070 	push	{r4, r5, r6, lr}
    eb40:	e3530000 	cmp	r3, #0
    eb44:	e1a04000 	mov	r4, r0
    eb48:	e1a05001 	mov	r5, r1
    eb4c:	e1a06002 	mov	r6, r2
    eb50:	0a00001d 	beq	ebcc <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x94>
    eb54:	e2844802 	add	r4, r4, #131072	; 0x20000
    eb58:	e59430c4 	ldr	r3, [r4, #196]	; 0xc4
    eb5c:	e3530000 	cmp	r3, #0
    eb60:	0a000003 	beq	eb74 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x3c>
    eb64:	e59f2088 	ldr	r2, [pc, #136]	; ebf4 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xbc>
    eb68:	e59f1088 	ldr	r1, [pc, #136]	; ebf8 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc0>
    eb6c:	e59f0088 	ldr	r0, [pc, #136]	; ebfc <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc4>
    eb70:	ebffee58 	bl	a4d8 <assertion_failed>
    eb74:	e3550000 	cmp	r5, #0
    eb78:	0a000018 	beq	ebe0 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xa8>
    eb7c:	e1d530d0 	ldrsb	r3, [r5]
    eb80:	e3530000 	cmp	r3, #0
    eb84:	0a000005 	beq	eba0 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x68>
    eb88:	e3560000 	cmp	r6, #0
    eb8c:	0a000009 	beq	ebb8 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x80>
    eb90:	e58460cc 	str	r6, [r4, #204]	; 0xcc
    eb94:	e58450c8 	str	r5, [r4, #200]	; 0xc8
    eb98:	e58450c4 	str	r5, [r4, #196]	; 0xc4
    eb9c:	e8bd8070 	pop	{r4, r5, r6, pc}
    eba0:	e3a02f57 	mov	r2, #348	; 0x15c
    eba4:	e59f104c 	ldr	r1, [pc, #76]	; ebf8 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc0>
    eba8:	e59f0050 	ldr	r0, [pc, #80]	; ec00 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc8>
    ebac:	ebffee49 	bl	a4d8 <assertion_failed>
    ebb0:	e3560000 	cmp	r6, #0
    ebb4:	1afffff5 	bne	eb90 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x58>
    ebb8:	e59f2044 	ldr	r2, [pc, #68]	; ec04 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xcc>
    ebbc:	e59f1034 	ldr	r1, [pc, #52]	; ebf8 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc0>
    ebc0:	e59f0040 	ldr	r0, [pc, #64]	; ec08 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xd0>
    ebc4:	ebffee43 	bl	a4d8 <assertion_failed>
    ebc8:	eafffff0 	b	eb90 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x58>
    ebcc:	e3a02f56 	mov	r2, #344	; 0x158
    ebd0:	e59f1020 	ldr	r1, [pc, #32]	; ebf8 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc0>
    ebd4:	e59f0030 	ldr	r0, [pc, #48]	; ec0c <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xd4>
    ebd8:	ebffee3e 	bl	a4d8 <assertion_failed>
    ebdc:	eaffffdc 	b	eb54 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x1c>
    ebe0:	e59f2028 	ldr	r2, [pc, #40]	; ec10 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xd8>
    ebe4:	e59f100c 	ldr	r1, [pc, #12]	; ebf8 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc0>
    ebe8:	e59f0024 	ldr	r0, [pc, #36]	; ec14 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xdc>
    ebec:	ebffee39 	bl	a4d8 <assertion_failed>
    ebf0:	eaffffe1 	b	eb7c <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x44>
    ebf4:	00000159 	.word	0x00000159
    ebf8:	000148a4 	.word	0x000148a4
    ebfc:	00013b30 	.word	0x00013b30
    ec00:	00013b4c 	.word	0x00013b4c
    ec04:	0000015d 	.word	0x0000015d
    ec08:	000143e0 	.word	0x000143e0
    ec0c:	00013b18 	.word	0x00013b18
    ec10:	0000015b 	.word	0x0000015b
    ec14:	00013b40 	.word	0x00013b40

0000ec18 <CSerialDevice::AvailableForWrite()>:
    ec18:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
    ec1c:	e92d4010 	push	{r4, lr}
    ec20:	e3530000 	cmp	r3, #0
    ec24:	e1a04000 	mov	r4, r0
    ec28:	0a000014 	beq	ec80 <CSerialDevice::AvailableForWrite()+0x68>
    ec2c:	e2844802 	add	r4, r4, #131072	; 0x20000
    ec30:	e59400d0 	ldr	r0, [r4, #208]	; 0xd0
    ec34:	e3500000 	cmp	r0, #0
    ec38:	1a00000d 	bne	ec74 <CSerialDevice::AvailableForWrite()+0x5c>
    ec3c:	e59420bc 	ldr	r2, [r4, #188]	; 0xbc
    ec40:	e59430b8 	ldr	r3, [r4, #184]	; 0xb8
    ec44:	e1520003 	cmp	r2, r3
    ec48:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    ec4c:	e59420b8 	ldr	r2, [r4, #184]	; 0xb8
    ec50:	92834cff 	addls	r4, r3, #65280	; 0xff00
    ec54:	928440ff 	addls	r4, r4, #255	; 0xff
    ec58:	82434001 	subhi	r4, r3, #1
    ec5c:	e3500000 	cmp	r0, #0
    ec60:	e0444002 	sub	r4, r4, r2
    ec64:	0a000000 	beq	ec6c <CSerialDevice::AvailableForWrite()+0x54>
    ec68:	eb000de8 	bl	12410 <LeaveCritical>
    ec6c:	e1a00004 	mov	r0, r4
    ec70:	e8bd8010 	pop	{r4, pc}
    ec74:	eb000db8 	bl	1235c <EnterCritical>
    ec78:	e59400d0 	ldr	r0, [r4, #208]	; 0xd0
    ec7c:	eaffffee 	b	ec3c <CSerialDevice::AvailableForWrite()+0x24>
    ec80:	e59f200c 	ldr	r2, [pc, #12]	; ec94 <CSerialDevice::AvailableForWrite()+0x7c>
    ec84:	e59f100c 	ldr	r1, [pc, #12]	; ec98 <CSerialDevice::AvailableForWrite()+0x80>
    ec88:	e59f000c 	ldr	r0, [pc, #12]	; ec9c <CSerialDevice::AvailableForWrite()+0x84>
    ec8c:	ebffee11 	bl	a4d8 <assertion_failed>
    ec90:	eaffffe5 	b	ec2c <CSerialDevice::AvailableForWrite()+0x14>
    ec94:	00000167 	.word	0x00000167
    ec98:	000148a4 	.word	0x000148a4
    ec9c:	00013b18 	.word	0x00013b18

0000eca0 <CSerialDevice::AvailableForRead()>:
    eca0:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
    eca4:	e92d4070 	push	{r4, r5, r6, lr}
    eca8:	e3530000 	cmp	r3, #0
    ecac:	e1a04000 	mov	r4, r0
    ecb0:	0a000013 	beq	ed04 <CSerialDevice::AvailableForRead()+0x64>
    ecb4:	e2845802 	add	r5, r4, #131072	; 0x20000
    ecb8:	e59500d0 	ldr	r0, [r5, #208]	; 0xd0
    ecbc:	e3500000 	cmp	r0, #0
    ecc0:	1a00000c 	bne	ecf8 <CSerialDevice::AvailableForRead()+0x58>
    ecc4:	e2843801 	add	r3, r4, #65536	; 0x10000
    ecc8:	e59310ac 	ldr	r1, [r3, #172]	; 0xac
    eccc:	e59320b0 	ldr	r2, [r3, #176]	; 0xb0
    ecd0:	e59340ac 	ldr	r4, [r3, #172]	; 0xac
    ecd4:	e1510002 	cmp	r1, r2
    ecd8:	e59330b0 	ldr	r3, [r3, #176]	; 0xb0
    ecdc:	32844801 	addcc	r4, r4, #65536	; 0x10000
    ece0:	e3500000 	cmp	r0, #0
    ece4:	e0444003 	sub	r4, r4, r3
    ece8:	0a000000 	beq	ecf0 <CSerialDevice::AvailableForRead()+0x50>
    ecec:	eb000dc7 	bl	12410 <LeaveCritical>
    ecf0:	e1a00004 	mov	r0, r4
    ecf4:	e8bd8070 	pop	{r4, r5, r6, pc}
    ecf8:	eb000d97 	bl	1235c <EnterCritical>
    ecfc:	e59500d0 	ldr	r0, [r5, #208]	; 0xd0
    ed00:	eaffffef 	b	ecc4 <CSerialDevice::AvailableForRead()+0x24>
    ed04:	e3a02f5f 	mov	r2, #380	; 0x17c
    ed08:	e59f1008 	ldr	r1, [pc, #8]	; ed18 <CSerialDevice::AvailableForRead()+0x78>
    ed0c:	e59f0008 	ldr	r0, [pc, #8]	; ed1c <CSerialDevice::AvailableForRead()+0x7c>
    ed10:	ebffedf0 	bl	a4d8 <assertion_failed>
    ed14:	eaffffe6 	b	ecb4 <CSerialDevice::AvailableForRead()+0x14>
    ed18:	000148a4 	.word	0x000148a4
    ed1c:	00013b18 	.word	0x00013b18

0000ed20 <CSerialDevice::Peek()>:
    ed20:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
    ed24:	e92d4070 	push	{r4, r5, r6, lr}
    ed28:	e3530000 	cmp	r3, #0
    ed2c:	e1a04000 	mov	r4, r0
    ed30:	0a00001a 	beq	eda0 <CSerialDevice::Peek()+0x80>
    ed34:	e2845802 	add	r5, r4, #131072	; 0x20000
    ed38:	e59520d0 	ldr	r2, [r5, #208]	; 0xd0
    ed3c:	e3520000 	cmp	r2, #0
    ed40:	1a00000c 	bne	ed78 <CSerialDevice::Peek()+0x58>
    ed44:	e2843801 	add	r3, r4, #65536	; 0x10000
    ed48:	e59300ac 	ldr	r0, [r3, #172]	; 0xac
    ed4c:	e59310b0 	ldr	r1, [r3, #176]	; 0xb0
    ed50:	e1500001 	cmp	r0, r1
    ed54:	0a000016 	beq	edb4 <CSerialDevice::Peek()+0x94>
    ed58:	e59330b0 	ldr	r3, [r3, #176]	; 0xb0
    ed5c:	e0844003 	add	r4, r4, r3
    ed60:	e5d440aa 	ldrb	r4, [r4, #170]	; 0xaa
    ed64:	e3520000 	cmp	r2, #0
    ed68:	0a000000 	beq	ed70 <CSerialDevice::Peek()+0x50>
    ed6c:	eb000da7 	bl	12410 <LeaveCritical>
    ed70:	e1a00004 	mov	r0, r4
    ed74:	e8bd8070 	pop	{r4, r5, r6, pc}
    ed78:	e1a00002 	mov	r0, r2
    ed7c:	eb000d76 	bl	1235c <EnterCritical>
    ed80:	e2843801 	add	r3, r4, #65536	; 0x10000
    ed84:	e59310ac 	ldr	r1, [r3, #172]	; 0xac
    ed88:	e59320b0 	ldr	r2, [r3, #176]	; 0xb0
    ed8c:	e1510002 	cmp	r1, r2
    ed90:	03e04000 	mvneq	r4, #0
    ed94:	e59520d0 	ldr	r2, [r5, #208]	; 0xd0
    ed98:	1affffee 	bne	ed58 <CSerialDevice::Peek()+0x38>
    ed9c:	eafffff0 	b	ed64 <CSerialDevice::Peek()+0x44>
    eda0:	e59f2014 	ldr	r2, [pc, #20]	; edbc <CSerialDevice::Peek()+0x9c>
    eda4:	e59f1014 	ldr	r1, [pc, #20]	; edc0 <CSerialDevice::Peek()+0xa0>
    eda8:	e59f0014 	ldr	r0, [pc, #20]	; edc4 <CSerialDevice::Peek()+0xa4>
    edac:	ebffedc9 	bl	a4d8 <assertion_failed>
    edb0:	eaffffdf 	b	ed34 <CSerialDevice::Peek()+0x14>
    edb4:	e3e04000 	mvn	r4, #0
    edb8:	eaffffec 	b	ed70 <CSerialDevice::Peek()+0x50>
    edbc:	00000191 	.word	0x00000191
    edc0:	000148a4 	.word	0x000148a4
    edc4:	00013b18 	.word	0x00013b18

0000edc8 <CSerialDevice::Flush()>:
    edc8:	e3a03000 	mov	r3, #0
    edcc:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    edd0:	e59f2010 	ldr	r2, [pc, #16]	; ede8 <CSerialDevice::Flush()+0x20>
    edd4:	e5923018 	ldr	r3, [r2, #24]
    edd8:	e2133008 	ands	r3, r3, #8
    eddc:	1afffffc 	bne	edd4 <CSerialDevice::Flush()+0xc>
    ede0:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    ede4:	e12fff1e 	bx	lr
    ede8:	20201000 	.word	0x20201000

0000edec <CSerialDevice::Write(unsigned char)>:
    edec:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
    edf0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    edf4:	e3530000 	cmp	r3, #0
    edf8:	0a000029 	beq	eea4 <CSerialDevice::Write(unsigned char)+0xb8>
    edfc:	e2805802 	add	r5, r0, #131072	; 0x20000
    ee00:	e1a04000 	mov	r4, r0
    ee04:	e59500d0 	ldr	r0, [r5, #208]	; 0xd0
    ee08:	e1a06001 	mov	r6, r1
    ee0c:	e3500000 	cmp	r0, #0
    ee10:	1a000016 	bne	ee70 <CSerialDevice::Write(unsigned char)+0x84>
    ee14:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
    ee18:	e59510bc 	ldr	r1, [r5, #188]	; 0xbc
    ee1c:	e2833001 	add	r3, r3, #1
    ee20:	e6ff3073 	uxth	r3, r3
    ee24:	e1530001 	cmp	r3, r1
    ee28:	0a00001a 	beq	ee98 <CSerialDevice::Write(unsigned char)+0xac>
    ee2c:	e3a07001 	mov	r7, #1
    ee30:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
    ee34:	e0844003 	add	r4, r4, r3
    ee38:	e2844801 	add	r4, r4, #65536	; 0x10000
    ee3c:	e0833007 	add	r3, r3, r7
    ee40:	e58530b8 	str	r3, [r5, #184]	; 0xb8
    ee44:	e5c460b8 	strb	r6, [r4, #184]	; 0xb8
    ee48:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
    ee4c:	e6ff3073 	uxth	r3, r3
    ee50:	e58530b8 	str	r3, [r5, #184]	; 0xb8
    ee54:	e3500000 	cmp	r0, #0
    ee58:	1a000001 	bne	ee64 <CSerialDevice::Write(unsigned char)+0x78>
    ee5c:	e1a00007 	mov	r0, r7
    ee60:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ee64:	eb000d69 	bl	12410 <LeaveCritical>
    ee68:	e1a00007 	mov	r0, r7
    ee6c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ee70:	eb000d39 	bl	1235c <EnterCritical>
    ee74:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
    ee78:	e59520bc 	ldr	r2, [r5, #188]	; 0xbc
    ee7c:	e2833001 	add	r3, r3, #1
    ee80:	e6ff3073 	uxth	r3, r3
    ee84:	e1530002 	cmp	r3, r2
    ee88:	e59500d0 	ldr	r0, [r5, #208]	; 0xd0
    ee8c:	03a07000 	moveq	r7, #0
    ee90:	1affffe5 	bne	ee2c <CSerialDevice::Write(unsigned char)+0x40>
    ee94:	eaffffee 	b	ee54 <CSerialDevice::Write(unsigned char)+0x68>
    ee98:	e1a07000 	mov	r7, r0
    ee9c:	e1a00007 	mov	r0, r7
    eea0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    eea4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    eea8:	e59f201c 	ldr	r2, [pc, #28]	; eecc <CSerialDevice::Write(unsigned char)+0xe0>
    eeac:	e5923018 	ldr	r3, [r2, #24]
    eeb0:	e2133020 	ands	r3, r3, #32
    eeb4:	1afffffc 	bne	eeac <CSerialDevice::Write(unsigned char)+0xc0>
    eeb8:	e5821000 	str	r1, [r2]
    eebc:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    eec0:	e3a07001 	mov	r7, #1
    eec4:	e1a00007 	mov	r0, r7
    eec8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    eecc:	20201000 	.word	0x20201000

0000eed0 <CSerialDevice::Write(void const*, unsigned int)>:
    eed0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    eed4:	e2804802 	add	r4, r0, #131072	; 0x20000
    eed8:	e1a07000 	mov	r7, r0
    eedc:	e59400d4 	ldr	r0, [r4, #212]	; 0xd4
    eee0:	e1a05001 	mov	r5, r1
    eee4:	e3500000 	cmp	r0, #0
    eee8:	e1a08002 	mov	r8, r2
    eeec:	1a000054 	bne	f044 <CSerialDevice::Write(void const*, unsigned int)+0x174>
    eef0:	e3550000 	cmp	r5, #0
    eef4:	0a00005a 	beq	f064 <CSerialDevice::Write(void const*, unsigned int)+0x194>
    eef8:	e3580000 	cmp	r8, #0
    eefc:	0a00005d 	beq	f078 <CSerialDevice::Write(void const*, unsigned int)+0x1a8>
    ef00:	e3a06000 	mov	r6, #0
    ef04:	e3a0900d 	mov	r9, #13
    ef08:	ea000002 	b	ef18 <CSerialDevice::Write(void const*, unsigned int)+0x48>
    ef0c:	e2866001 	add	r6, r6, #1
    ef10:	e1560008 	cmp	r6, r8
    ef14:	0a00000f 	beq	ef58 <CSerialDevice::Write(void const*, unsigned int)+0x88>
    ef18:	e5d51000 	ldrb	r1, [r5]
    ef1c:	e1a00007 	mov	r0, r7
    ef20:	ebffffb1 	bl	edec <CSerialDevice::Write(unsigned char)>
    ef24:	e3500000 	cmp	r0, #0
    ef28:	0a00000a 	beq	ef58 <CSerialDevice::Write(void const*, unsigned int)+0x88>
    ef2c:	e4d53001 	ldrb	r3, [r5], #1
    ef30:	e353000a 	cmp	r3, #10
    ef34:	1afffff4 	bne	ef0c <CSerialDevice::Write(void const*, unsigned int)+0x3c>
    ef38:	e59430c0 	ldr	r3, [r4, #192]	; 0xc0
    ef3c:	e3130001 	tst	r3, #1
    ef40:	0afffff1 	beq	ef0c <CSerialDevice::Write(void const*, unsigned int)+0x3c>
    ef44:	e1a01009 	mov	r1, r9
    ef48:	e1a00007 	mov	r0, r7
    ef4c:	ebffffa6 	bl	edec <CSerialDevice::Write(unsigned char)>
    ef50:	e3500000 	cmp	r0, #0
    ef54:	1affffec 	bne	ef0c <CSerialDevice::Write(void const*, unsigned int)+0x3c>
    ef58:	e59430d4 	ldr	r3, [r4, #212]	; 0xd4
    ef5c:	e3530000 	cmp	r3, #0
    ef60:	1a000035 	bne	f03c <CSerialDevice::Write(void const*, unsigned int)+0x16c>
    ef64:	e59730a4 	ldr	r3, [r7, #164]	; 0xa4
    ef68:	e3530000 	cmp	r3, #0
    ef6c:	0a000028 	beq	f014 <CSerialDevice::Write(void const*, unsigned int)+0x144>
    ef70:	e59400d0 	ldr	r0, [r4, #208]	; 0xd0
    ef74:	e3500000 	cmp	r0, #0
    ef78:	1a000033 	bne	f04c <CSerialDevice::Write(void const*, unsigned int)+0x17c>
    ef7c:	e59420b8 	ldr	r2, [r4, #184]	; 0xb8
    ef80:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    ef84:	e1520003 	cmp	r2, r3
    ef88:	0a000021 	beq	f014 <CSerialDevice::Write(void const*, unsigned int)+0x144>
    ef8c:	e3a03000 	mov	r3, #0
    ef90:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    ef94:	e59430b8 	ldr	r3, [r4, #184]	; 0xb8
    ef98:	e59420bc 	ldr	r2, [r4, #188]	; 0xbc
    ef9c:	e1520003 	cmp	r2, r3
    efa0:	0a000016 	beq	f000 <CSerialDevice::Write(void const*, unsigned int)+0x130>
    efa4:	e59f20d4 	ldr	r2, [pc, #212]	; f080 <CSerialDevice::Write(void const*, unsigned int)+0x1b0>
    efa8:	e5923018 	ldr	r3, [r2, #24]
    efac:	e3130020 	tst	r3, #32
    efb0:	1a00001c 	bne	f028 <CSerialDevice::Write(void const*, unsigned int)+0x158>
    efb4:	e59f00c8 	ldr	r0, [pc, #200]	; f084 <CSerialDevice::Write(void const*, unsigned int)+0x1b4>
    efb8:	ea000002 	b	efc8 <CSerialDevice::Write(void const*, unsigned int)+0xf8>
    efbc:	e5923018 	ldr	r3, [r2, #24]
    efc0:	e3130020 	tst	r3, #32
    efc4:	1a000017 	bne	f028 <CSerialDevice::Write(void const*, unsigned int)+0x158>
    efc8:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    efcc:	e2831001 	add	r1, r3, #1
    efd0:	e0873003 	add	r3, r7, r3
    efd4:	e58410bc 	str	r1, [r4, #188]	; 0xbc
    efd8:	e2833801 	add	r3, r3, #65536	; 0x10000
    efdc:	e5d330b8 	ldrb	r3, [r3, #184]	; 0xb8
    efe0:	e5823000 	str	r3, [r2]
    efe4:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    efe8:	e0033000 	and	r3, r3, r0
    efec:	e58430bc 	str	r3, [r4, #188]	; 0xbc
    eff0:	e59410b8 	ldr	r1, [r4, #184]	; 0xb8
    eff4:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    eff8:	e1510003 	cmp	r1, r3
    effc:	1affffee 	bne	efbc <CSerialDevice::Write(void const*, unsigned int)+0xec>
    f000:	e3a03000 	mov	r3, #0
    f004:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    f008:	e59430d0 	ldr	r3, [r4, #208]	; 0xd0
    f00c:	e3530000 	cmp	r3, #0
    f010:	1a000001 	bne	f01c <CSerialDevice::Write(void const*, unsigned int)+0x14c>
    f014:	e1a00006 	mov	r0, r6
    f018:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    f01c:	eb000cfb 	bl	12410 <LeaveCritical>
    f020:	e1a00006 	mov	r0, r6
    f024:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    f028:	e59f2050 	ldr	r2, [pc, #80]	; f080 <CSerialDevice::Write(void const*, unsigned int)+0x1b0>
    f02c:	e5923038 	ldr	r3, [r2, #56]	; 0x38
    f030:	e3833020 	orr	r3, r3, #32
    f034:	e5823038 	str	r3, [r2, #56]	; 0x38
    f038:	eafffff0 	b	f000 <CSerialDevice::Write(void const*, unsigned int)+0x130>
    f03c:	eb000cf3 	bl	12410 <LeaveCritical>
    f040:	eaffffc7 	b	ef64 <CSerialDevice::Write(void const*, unsigned int)+0x94>
    f044:	eb000cc4 	bl	1235c <EnterCritical>
    f048:	eaffffa8 	b	eef0 <CSerialDevice::Write(void const*, unsigned int)+0x20>
    f04c:	eb000cc2 	bl	1235c <EnterCritical>
    f050:	e59420b8 	ldr	r2, [r4, #184]	; 0xb8
    f054:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    f058:	e1520003 	cmp	r2, r3
    f05c:	1affffca 	bne	ef8c <CSerialDevice::Write(void const*, unsigned int)+0xbc>
    f060:	eaffffe8 	b	f008 <CSerialDevice::Write(void const*, unsigned int)+0x138>
    f064:	e3a020c3 	mov	r2, #195	; 0xc3
    f068:	e59f1018 	ldr	r1, [pc, #24]	; f088 <CSerialDevice::Write(void const*, unsigned int)+0x1b8>
    f06c:	e59f0018 	ldr	r0, [pc, #24]	; f08c <CSerialDevice::Write(void const*, unsigned int)+0x1bc>
    f070:	ebffed18 	bl	a4d8 <assertion_failed>
    f074:	eaffff9f 	b	eef8 <CSerialDevice::Write(void const*, unsigned int)+0x28>
    f078:	e1a06008 	mov	r6, r8
    f07c:	eaffffb5 	b	ef58 <CSerialDevice::Write(void const*, unsigned int)+0x88>
    f080:	20201000 	.word	0x20201000
    f084:	0000ffff 	.word	0x0000ffff
    f088:	000148a4 	.word	0x000148a4
    f08c:	00013a90 	.word	0x00013a90

0000f090 <CSerialDevice::InterruptHandler()>:
    f090:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f094:	e2804802 	add	r4, r0, #131072	; 0x20000
    f098:	e1a05000 	mov	r5, r0
    f09c:	e59400d0 	ldr	r0, [r4, #208]	; 0xd0
    f0a0:	e24dd004 	sub	sp, sp, #4
    f0a4:	e3500000 	cmp	r0, #0
    f0a8:	1a000070 	bne	f270 <CSerialDevice::InterruptHandler()+0x1e0>
    f0ac:	e3a06000 	mov	r6, #0
    f0b0:	ee076f9a 	mcr	15, 0, r6, cr7, cr10, {4}
    f0b4:	e59f21c4 	ldr	r2, [pc, #452]	; f280 <CSerialDevice::InterruptHandler()+0x1f0>
    f0b8:	e3e08002 	mvn	r8, #2
    f0bc:	e1a00002 	mov	r0, r2
    f0c0:	e3e0e001 	mvn	lr, #1
    f0c4:	e3e07000 	mvn	r7, #0
    f0c8:	e5921040 	ldr	r1, [r2, #64]	; 0x40
    f0cc:	e59fc1b0 	ldr	ip, [pc, #432]	; f284 <CSerialDevice::InterruptHandler()+0x1f4>
    f0d0:	e2853801 	add	r3, r5, #65536	; 0x10000
    f0d4:	e5821044 	str	r1, [r2, #68]	; 0x44
    f0d8:	e5902018 	ldr	r2, [r0, #24]
    f0dc:	e3120010 	tst	r2, #16
    f0e0:	1a00001f 	bne	f164 <CSerialDevice::InterruptHandler()+0xd4>
    f0e4:	e5901000 	ldr	r1, [r0]
    f0e8:	e3110b01 	tst	r1, #1024	; 0x400
    f0ec:	0a000040 	beq	f1f4 <CSerialDevice::InterruptHandler()+0x164>
    f0f0:	e59320b4 	ldr	r2, [r3, #180]	; 0xb4
    f0f4:	e3520000 	cmp	r2, #0
    f0f8:	058370b4 	streq	r7, [r3, #180]	; 0xb4
    f0fc:	e59490c4 	ldr	r9, [r4, #196]	; 0xc4
    f100:	e3590000 	cmp	r9, #0
    f104:	0a000005 	beq	f120 <CSerialDevice::InterruptHandler()+0x90>
    f108:	e594a0c8 	ldr	sl, [r4, #200]	; 0xc8
    f10c:	e6af2071 	sxtb	r2, r1
    f110:	e1dab0d0 	ldrsb	fp, [sl]
    f114:	e15b0002 	cmp	fp, r2
    f118:	158490c8 	strne	r9, [r4, #200]	; 0xc8
    f11c:	0a000044 	beq	f234 <CSerialDevice::InterruptHandler()+0x1a4>
    f120:	e59320ac 	ldr	r2, [r3, #172]	; 0xac
    f124:	e59390b0 	ldr	r9, [r3, #176]	; 0xb0
    f128:	e2822001 	add	r2, r2, #1
    f12c:	e002200c 	and	r2, r2, ip
    f130:	e1520009 	cmp	r2, r9
    f134:	0a000034 	beq	f20c <CSerialDevice::InterruptHandler()+0x17c>
    f138:	e59320ac 	ldr	r2, [r3, #172]	; 0xac
    f13c:	e2829001 	add	r9, r2, #1
    f140:	e0852002 	add	r2, r5, r2
    f144:	e58390ac 	str	r9, [r3, #172]	; 0xac
    f148:	e5c210aa 	strb	r1, [r2, #170]	; 0xaa
    f14c:	e59320ac 	ldr	r2, [r3, #172]	; 0xac
    f150:	e002200c 	and	r2, r2, ip
    f154:	e58320ac 	str	r2, [r3, #172]	; 0xac
    f158:	e5902018 	ldr	r2, [r0, #24]
    f15c:	e3120010 	tst	r2, #16
    f160:	0affffdf 	beq	f0e4 <CSerialDevice::InterruptHandler()+0x54>
    f164:	e5903018 	ldr	r3, [r0, #24]
    f168:	e3130020 	tst	r3, #32
    f16c:	1a000017 	bne	f1d0 <CSerialDevice::InterruptHandler()+0x140>
    f170:	e59420b8 	ldr	r2, [r4, #184]	; 0xb8
    f174:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    f178:	e1520003 	cmp	r2, r3
    f17c:	0a000032 	beq	f24c <CSerialDevice::InterruptHandler()+0x1bc>
    f180:	e59f20f8 	ldr	r2, [pc, #248]	; f280 <CSerialDevice::InterruptHandler()+0x1f0>
    f184:	e59f00f8 	ldr	r0, [pc, #248]	; f284 <CSerialDevice::InterruptHandler()+0x1f4>
    f188:	ea000003 	b	f19c <CSerialDevice::InterruptHandler()+0x10c>
    f18c:	e59410b8 	ldr	r1, [r4, #184]	; 0xb8
    f190:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    f194:	e1510003 	cmp	r1, r3
    f198:	0a00002b 	beq	f24c <CSerialDevice::InterruptHandler()+0x1bc>
    f19c:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    f1a0:	e2831001 	add	r1, r3, #1
    f1a4:	e0853003 	add	r3, r5, r3
    f1a8:	e58410bc 	str	r1, [r4, #188]	; 0xbc
    f1ac:	e2833801 	add	r3, r3, #65536	; 0x10000
    f1b0:	e5d330b8 	ldrb	r3, [r3, #184]	; 0xb8
    f1b4:	e5823000 	str	r3, [r2]
    f1b8:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    f1bc:	e0033000 	and	r3, r3, r0
    f1c0:	e58430bc 	str	r3, [r4, #188]	; 0xbc
    f1c4:	e5923018 	ldr	r3, [r2, #24]
    f1c8:	e3130020 	tst	r3, #32
    f1cc:	0affffee 	beq	f18c <CSerialDevice::InterruptHandler()+0xfc>
    f1d0:	e3a03000 	mov	r3, #0
    f1d4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    f1d8:	e59430d0 	ldr	r3, [r4, #208]	; 0xd0
    f1dc:	e3530000 	cmp	r3, #0
    f1e0:	1a000024 	bne	f278 <CSerialDevice::InterruptHandler()+0x1e8>
    f1e4:	e3560000 	cmp	r6, #0
    f1e8:	1a00001c 	bne	f260 <CSerialDevice::InterruptHandler()+0x1d0>
    f1ec:	e28dd004 	add	sp, sp, #4
    f1f0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f1f4:	e3110b02 	tst	r1, #2048	; 0x800
    f1f8:	0a000007 	beq	f21c <CSerialDevice::InterruptHandler()+0x18c>
    f1fc:	e59320b4 	ldr	r2, [r3, #180]	; 0xb4
    f200:	e3520000 	cmp	r2, #0
    f204:	0583e0b4 	streq	lr, [r3, #180]	; 0xb4
    f208:	eaffffbb 	b	f0fc <CSerialDevice::InterruptHandler()+0x6c>
    f20c:	e59320b4 	ldr	r2, [r3, #180]	; 0xb4
    f210:	e3520000 	cmp	r2, #0
    f214:	0583e0b4 	streq	lr, [r3, #180]	; 0xb4
    f218:	eaffffae 	b	f0d8 <CSerialDevice::InterruptHandler()+0x48>
    f21c:	e3110c01 	tst	r1, #256	; 0x100
    f220:	0affffb5 	beq	f0fc <CSerialDevice::InterruptHandler()+0x6c>
    f224:	e59320b4 	ldr	r2, [r3, #180]	; 0xb4
    f228:	e3520000 	cmp	r2, #0
    f22c:	058380b4 	streq	r8, [r3, #180]	; 0xb4
    f230:	eaffffb1 	b	f0fc <CSerialDevice::InterruptHandler()+0x6c>
    f234:	e28a2001 	add	r2, sl, #1
    f238:	e58420c8 	str	r2, [r4, #200]	; 0xc8
    f23c:	e1da20d1 	ldrsb	r2, [sl, #1]
    f240:	e3520000 	cmp	r2, #0
    f244:	03a06001 	moveq	r6, #1
    f248:	eaffffb4 	b	f120 <CSerialDevice::InterruptHandler()+0x90>
    f24c:	e59f202c 	ldr	r2, [pc, #44]	; f280 <CSerialDevice::InterruptHandler()+0x1f0>
    f250:	e5923038 	ldr	r3, [r2, #56]	; 0x38
    f254:	e3c33020 	bic	r3, r3, #32
    f258:	e5823038 	str	r3, [r2, #56]	; 0x38
    f25c:	eaffffdb 	b	f1d0 <CSerialDevice::InterruptHandler()+0x140>
    f260:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
    f264:	e28dd004 	add	sp, sp, #4
    f268:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f26c:	e12fff13 	bx	r3
    f270:	eb000c39 	bl	1235c <EnterCritical>
    f274:	eaffff8c 	b	f0ac <CSerialDevice::InterruptHandler()+0x1c>
    f278:	eb000c64 	bl	12410 <LeaveCritical>
    f27c:	eaffffd8 	b	f1e4 <CSerialDevice::InterruptHandler()+0x154>
    f280:	20201000 	.word	0x20201000
    f284:	0000ffff 	.word	0x0000ffff

0000f288 <CSerialDevice::InterruptStub(void*)>:
    f288:	e92d4010 	push	{r4, lr}
    f28c:	e2504000 	subs	r4, r0, #0
    f290:	0a000002 	beq	f2a0 <CSerialDevice::InterruptStub(void*)+0x18>
    f294:	e1a00004 	mov	r0, r4
    f298:	e8bd4010 	pop	{r4, lr}
    f29c:	eaffff7b 	b	f090 <CSerialDevice::InterruptHandler()>
    f2a0:	e59f0014 	ldr	r0, [pc, #20]	; f2bc <CSerialDevice::InterruptStub(void*)+0x34>
    f2a4:	e59f2014 	ldr	r2, [pc, #20]	; f2c0 <CSerialDevice::InterruptStub(void*)+0x38>
    f2a8:	e59f1014 	ldr	r1, [pc, #20]	; f2c4 <CSerialDevice::InterruptStub(void*)+0x3c>
    f2ac:	ebffec89 	bl	a4d8 <assertion_failed>
    f2b0:	e1a00004 	mov	r0, r4
    f2b4:	e8bd4010 	pop	{r4, lr}
    f2b8:	eaffff74 	b	f090 <CSerialDevice::InterruptHandler()>
    f2bc:	00013b5c 	.word	0x00013b5c
    f2c0:	0000022e 	.word	0x0000022e
    f2c4:	000148a4 	.word	0x000148a4

0000f2c8 <CSerialDevice::~CSerialDevice()>:
    f2c8:	e59f20a4 	ldr	r2, [pc, #164]	; f374 <CSerialDevice::~CSerialDevice()+0xac>
    f2cc:	e92d4010 	push	{r4, lr}
    f2d0:	e3a03000 	mov	r3, #0
    f2d4:	e1a04000 	mov	r4, r0
    f2d8:	e5802000 	str	r2, [r0]
    f2dc:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    f2e0:	e59f2090 	ldr	r2, [pc, #144]	; f378 <CSerialDevice::~CSerialDevice()+0xb0>
    f2e4:	e5823038 	str	r3, [r2, #56]	; 0x38
    f2e8:	e5823030 	str	r3, [r2, #48]	; 0x30
    f2ec:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    f2f0:	e5d030a9 	ldrb	r3, [r0, #169]	; 0xa9
    f2f4:	e3530000 	cmp	r3, #0
    f2f8:	0a000006 	beq	f318 <CSerialDevice::~CSerialDevice()+0x50>
    f2fc:	e59000a4 	ldr	r0, [r0, #164]	; 0xa4
    f300:	e3500000 	cmp	r0, #0
    f304:	0a000014 	beq	f35c <CSerialDevice::~CSerialDevice()+0x94>
    f308:	e5d430a8 	ldrb	r3, [r4, #168]	; 0xa8
    f30c:	e3530000 	cmp	r3, #0
    f310:	0a00000e 	beq	f350 <CSerialDevice::~CSerialDevice()+0x88>
    f314:	ebfff2bf 	bl	be18 <CInterruptSystem::DisconnectFIQ()>
    f318:	e3a03000 	mov	r3, #0
    f31c:	e284007c 	add	r0, r4, #124	; 0x7c
    f320:	e58430a4 	str	r3, [r4, #164]	; 0xa4
    f324:	ebffef3a 	bl	b014 <CGPIOPin::~CGPIOPin()>
    f328:	e2840054 	add	r0, r4, #84	; 0x54
    f32c:	ebffef38 	bl	b014 <CGPIOPin::~CGPIOPin()>
    f330:	e284002c 	add	r0, r4, #44	; 0x2c
    f334:	ebffef36 	bl	b014 <CGPIOPin::~CGPIOPin()>
    f338:	e2840004 	add	r0, r4, #4
    f33c:	ebffef34 	bl	b014 <CGPIOPin::~CGPIOPin()>
    f340:	e1a00004 	mov	r0, r4
    f344:	ebffed95 	bl	a9a0 <CDevice::~CDevice()>
    f348:	e1a00004 	mov	r0, r4
    f34c:	e8bd8010 	pop	{r4, pc}
    f350:	e3a01039 	mov	r1, #57	; 0x39
    f354:	ebfff32a 	bl	c004 <CInterruptSystem::DisconnectIRQ(unsigned int)>
    f358:	eaffffee 	b	f318 <CSerialDevice::~CSerialDevice()+0x50>
    f35c:	e59f0018 	ldr	r0, [pc, #24]	; f37c <CSerialDevice::~CSerialDevice()+0xb4>
    f360:	e3a02079 	mov	r2, #121	; 0x79
    f364:	e59f1014 	ldr	r1, [pc, #20]	; f380 <CSerialDevice::~CSerialDevice()+0xb8>
    f368:	ebffec5a 	bl	a4d8 <assertion_failed>
    f36c:	e59400a4 	ldr	r0, [r4, #164]	; 0xa4
    f370:	eaffffe4 	b	f308 <CSerialDevice::~CSerialDevice()+0x40>
    f374:	00014890 	.word	0x00014890
    f378:	20201000 	.word	0x20201000
    f37c:	00013b18 	.word	0x00013b18
    f380:	000148a4 	.word	0x000148a4

0000f384 <CSerialDevice::~CSerialDevice()>:
    f384:	e92d4010 	push	{r4, lr}
    f388:	e1a04000 	mov	r4, r0
    f38c:	ebffffcd 	bl	f2c8 <CSerialDevice::~CSerialDevice()>
    f390:	e1a00004 	mov	r0, r4
    f394:	e59f1008 	ldr	r1, [pc, #8]	; f3a4 <CSerialDevice::~CSerialDevice()+0x20>
    f398:	eb000c4d 	bl	124d4 <operator delete(void*, unsigned int)>
    f39c:	e1a00004 	mov	r0, r4
    f3a0:	e8bd8010 	pop	{r4, pc}
    f3a4:	000200d8 	.word	0x000200d8

0000f3a8 <CString::~CString()>:
    f3a8:	e92d4010 	push	{r4, lr}
    f3ac:	e1a04000 	mov	r4, r0
    f3b0:	e5900004 	ldr	r0, [r0, #4]
    f3b4:	e59f3014 	ldr	r3, [pc, #20]	; f3d0 <CString::~CString()+0x28>
    f3b8:	e3500000 	cmp	r0, #0
    f3bc:	e5843000 	str	r3, [r4]
    f3c0:	0a000000 	beq	f3c8 <CString::~CString()+0x20>
    f3c4:	eb000c41 	bl	124d0 <operator delete[](void*)>
    f3c8:	e1a00004 	mov	r0, r4
    f3cc:	e8bd8010 	pop	{r4, pc}
    f3d0:	000148b8 	.word	0x000148b8

0000f3d4 <CString::~CString()>:
    f3d4:	e92d4010 	push	{r4, lr}
    f3d8:	e1a04000 	mov	r4, r0
    f3dc:	e5900004 	ldr	r0, [r0, #4]
    f3e0:	e59f3020 	ldr	r3, [pc, #32]	; f408 <CString::~CString()+0x34>
    f3e4:	e3500000 	cmp	r0, #0
    f3e8:	e5843000 	str	r3, [r4]
    f3ec:	0a000000 	beq	f3f4 <CString::~CString()+0x20>
    f3f0:	eb000c36 	bl	124d0 <operator delete[](void*)>
    f3f4:	e1a00004 	mov	r0, r4
    f3f8:	e3a01010 	mov	r1, #16
    f3fc:	eb000c34 	bl	124d4 <operator delete(void*, unsigned int)>
    f400:	e1a00004 	mov	r0, r4
    f404:	e8bd8010 	pop	{r4, pc}
    f408:	000148b8 	.word	0x000148b8

0000f40c <CString::ReserveSpace(unsigned int) [clone .part.0]>:
    f40c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    f410:	e990002c 	ldmib	r0, {r2, r3, r5}
    f414:	e0455002 	sub	r5, r5, r2
    f418:	e0851001 	add	r1, r5, r1
    f41c:	e2812001 	add	r2, r1, #1
    f420:	e1520003 	cmp	r2, r3
    f424:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
    f428:	e1a04000 	mov	r4, r0
    f42c:	e2816041 	add	r6, r1, #65	; 0x41
    f430:	e1a00006 	mov	r0, r6
    f434:	eb000c23 	bl	124c8 <operator new[](unsigned int)>
    f438:	e3a02000 	mov	r2, #0
    f43c:	e594300c 	ldr	r3, [r4, #12]
    f440:	e1a07000 	mov	r7, r0
    f444:	e5c32000 	strb	r2, [r3]
    f448:	e5941004 	ldr	r1, [r4, #4]
    f44c:	eb00084c 	bl	11584 <strcpy>
    f450:	e5940004 	ldr	r0, [r4, #4]
    f454:	e3500000 	cmp	r0, #0
    f458:	0a000000 	beq	f460 <CString::ReserveSpace(unsigned int) [clone .part.0]+0x54>
    f45c:	eb000c1b 	bl	124d0 <operator delete[](void*)>
    f460:	e0875005 	add	r5, r7, r5
    f464:	e584500c 	str	r5, [r4, #12]
    f468:	e5847004 	str	r7, [r4, #4]
    f46c:	e5846008 	str	r6, [r4, #8]
    f470:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000f474 <CString::CString()>:
    f474:	e3a02000 	mov	r2, #0
    f478:	e59f1008 	ldr	r1, [pc, #8]	; f488 <CString::CString()+0x14>
    f47c:	e5802008 	str	r2, [r0, #8]
    f480:	e8800006 	stm	r0, {r1, r2}
    f484:	e12fff1e 	bx	lr
    f488:	000148b8 	.word	0x000148b8

0000f48c <CString::CString(char const*)>:
    f48c:	e92d4070 	push	{r4, r5, r6, lr}
    f490:	e1a04000 	mov	r4, r0
    f494:	e59f302c 	ldr	r3, [pc, #44]	; f4c8 <CString::CString(char const*)+0x3c>
    f498:	e1a00001 	mov	r0, r1
    f49c:	e5843000 	str	r3, [r4]
    f4a0:	e1a05001 	mov	r5, r1
    f4a4:	eb0007b8 	bl	1138c <strlen>
    f4a8:	e2800001 	add	r0, r0, #1
    f4ac:	e5840008 	str	r0, [r4, #8]
    f4b0:	eb000c04 	bl	124c8 <operator new[](unsigned int)>
    f4b4:	e1a01005 	mov	r1, r5
    f4b8:	e5840004 	str	r0, [r4, #4]
    f4bc:	eb000830 	bl	11584 <strcpy>
    f4c0:	e1a00004 	mov	r0, r4
    f4c4:	e8bd8070 	pop	{r4, r5, r6, pc}
    f4c8:	000148b8 	.word	0x000148b8

0000f4cc <CString::operator char const*() const>:
    f4cc:	e5900004 	ldr	r0, [r0, #4]
    f4d0:	e59f3008 	ldr	r3, [pc, #8]	; f4e0 <CString::operator char const*() const+0x14>
    f4d4:	e3500000 	cmp	r0, #0
    f4d8:	01a00003 	moveq	r0, r3
    f4dc:	e12fff1e 	bx	lr
    f4e0:	00014c18 	.word	0x00014c18

0000f4e4 <CString::operator=(char const*)>:
    f4e4:	e92d4070 	push	{r4, r5, r6, lr}
    f4e8:	e1a04000 	mov	r4, r0
    f4ec:	e5900004 	ldr	r0, [r0, #4]
    f4f0:	e1a05001 	mov	r5, r1
    f4f4:	e3500000 	cmp	r0, #0
    f4f8:	0a000000 	beq	f500 <CString::operator=(char const*)+0x1c>
    f4fc:	eb000bf3 	bl	124d0 <operator delete[](void*)>
    f500:	e1a00005 	mov	r0, r5
    f504:	eb0007a0 	bl	1138c <strlen>
    f508:	e2800001 	add	r0, r0, #1
    f50c:	e5840008 	str	r0, [r4, #8]
    f510:	eb000bec 	bl	124c8 <operator new[](unsigned int)>
    f514:	e1a01005 	mov	r1, r5
    f518:	e5840004 	str	r0, [r4, #4]
    f51c:	eb000818 	bl	11584 <strcpy>
    f520:	e5940004 	ldr	r0, [r4, #4]
    f524:	e8bd8070 	pop	{r4, r5, r6, pc}

0000f528 <CString::operator=(CString const&)>:
    f528:	e92d4070 	push	{r4, r5, r6, lr}
    f52c:	e1a04000 	mov	r4, r0
    f530:	e5900004 	ldr	r0, [r0, #4]
    f534:	e1a06001 	mov	r6, r1
    f538:	e3500000 	cmp	r0, #0
    f53c:	0a000000 	beq	f544 <CString::operator=(CString const&)+0x1c>
    f540:	eb000be2 	bl	124d0 <operator delete[](void*)>
    f544:	e5960004 	ldr	r0, [r6, #4]
    f548:	e59f5030 	ldr	r5, [pc, #48]	; f580 <CString::operator=(CString const&)+0x58>
    f54c:	e3500000 	cmp	r0, #0
    f550:	01a00005 	moveq	r0, r5
    f554:	eb00078c 	bl	1138c <strlen>
    f558:	e2800001 	add	r0, r0, #1
    f55c:	e5840008 	str	r0, [r4, #8]
    f560:	eb000bd8 	bl	124c8 <operator new[](unsigned int)>
    f564:	e5840004 	str	r0, [r4, #4]
    f568:	e5961004 	ldr	r1, [r6, #4]
    f56c:	e3510000 	cmp	r1, #0
    f570:	01a01005 	moveq	r1, r5
    f574:	eb000802 	bl	11584 <strcpy>
    f578:	e1a00004 	mov	r0, r4
    f57c:	e8bd8070 	pop	{r4, r5, r6, pc}
    f580:	00014c18 	.word	0x00014c18

0000f584 <CString::GetLength() const>:
    f584:	e5900004 	ldr	r0, [r0, #4]
    f588:	e3500000 	cmp	r0, #0
    f58c:	012fff1e 	bxeq	lr
    f590:	ea00077d 	b	1138c <strlen>

0000f594 <CString::Append(char const*)>:
    f594:	e92d4070 	push	{r4, r5, r6, lr}
    f598:	e3a03001 	mov	r3, #1
    f59c:	e1a04000 	mov	r4, r0
    f5a0:	e5900004 	ldr	r0, [r0, #4]
    f5a4:	e1a06001 	mov	r6, r1
    f5a8:	e3500000 	cmp	r0, #0
    f5ac:	e5843008 	str	r3, [r4, #8]
    f5b0:	0a000003 	beq	f5c4 <CString::Append(char const*)+0x30>
    f5b4:	eb000774 	bl	1138c <strlen>
    f5b8:	e5943008 	ldr	r3, [r4, #8]
    f5bc:	e0830000 	add	r0, r3, r0
    f5c0:	e5840008 	str	r0, [r4, #8]
    f5c4:	e1a00006 	mov	r0, r6
    f5c8:	eb00076f 	bl	1138c <strlen>
    f5cc:	e5943008 	ldr	r3, [r4, #8]
    f5d0:	e0800003 	add	r0, r0, r3
    f5d4:	e5840008 	str	r0, [r4, #8]
    f5d8:	eb000bba 	bl	124c8 <operator new[](unsigned int)>
    f5dc:	e5941004 	ldr	r1, [r4, #4]
    f5e0:	e1a05000 	mov	r5, r0
    f5e4:	e3510000 	cmp	r1, #0
    f5e8:	05c01000 	strbeq	r1, [r0]
    f5ec:	0a000004 	beq	f604 <CString::Append(char const*)+0x70>
    f5f0:	eb0007e3 	bl	11584 <strcpy>
    f5f4:	e5940004 	ldr	r0, [r4, #4]
    f5f8:	e3500000 	cmp	r0, #0
    f5fc:	0a000000 	beq	f604 <CString::Append(char const*)+0x70>
    f600:	eb000bb2 	bl	124d0 <operator delete[](void*)>
    f604:	e1a01006 	mov	r1, r6
    f608:	e1a00005 	mov	r0, r5
    f60c:	eb0007fa 	bl	115fc <strcat>
    f610:	e5845004 	str	r5, [r4, #4]
    f614:	e8bd8070 	pop	{r4, r5, r6, pc}

0000f618 <CString::Compare(char const*) const>:
    f618:	e5900004 	ldr	r0, [r0, #4]
    f61c:	ea000764 	b	113b4 <strcmp>

0000f620 <CString::Find(char) const>:
    f620:	e5902004 	ldr	r2, [r0, #4]
    f624:	e1d230d0 	ldrsb	r3, [r2]
    f628:	e3530000 	cmp	r3, #0
    f62c:	0a000009 	beq	f658 <CString::Find(char) const+0x38>
    f630:	e1510003 	cmp	r1, r3
    f634:	e3a00000 	mov	r0, #0
    f638:	1a000002 	bne	f648 <CString::Find(char) const+0x28>
    f63c:	ea000007 	b	f660 <CString::Find(char) const+0x40>
    f640:	e1530001 	cmp	r3, r1
    f644:	012fff1e 	bxeq	lr
    f648:	e1f230d1 	ldrsb	r3, [r2, #1]!
    f64c:	e2800001 	add	r0, r0, #1
    f650:	e3530000 	cmp	r3, #0
    f654:	1afffff9 	bne	f640 <CString::Find(char) const+0x20>
    f658:	e3e00000 	mvn	r0, #0
    f65c:	e12fff1e 	bx	lr
    f660:	e12fff1e 	bx	lr

0000f664 <CString::PutChar(char, unsigned int)>:
    f664:	e92d4070 	push	{r4, r5, r6, lr}
    f668:	e2524000 	subs	r4, r2, #0
    f66c:	08bd8070 	popeq	{r4, r5, r6, pc}
    f670:	e1a06001 	mov	r6, r1
    f674:	e1a01004 	mov	r1, r4
    f678:	e1a05000 	mov	r5, r0
    f67c:	ebffff62 	bl	f40c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f680:	e2443001 	sub	r3, r4, #1
    f684:	e595200c 	ldr	r2, [r5, #12]
    f688:	e2433001 	sub	r3, r3, #1
    f68c:	e2820001 	add	r0, r2, #1
    f690:	e3730001 	cmn	r3, #1
    f694:	e585000c 	str	r0, [r5, #12]
    f698:	e5c26000 	strb	r6, [r2]
    f69c:	1afffff8 	bne	f684 <CString::PutChar(char, unsigned int)+0x20>
    f6a0:	e8bd8070 	pop	{r4, r5, r6, pc}

0000f6a4 <CString::PutString(char const*)>:
    f6a4:	e92d4070 	push	{r4, r5, r6, lr}
    f6a8:	e1a04000 	mov	r4, r0
    f6ac:	e1a00001 	mov	r0, r1
    f6b0:	e1a05001 	mov	r5, r1
    f6b4:	eb000734 	bl	1138c <strlen>
    f6b8:	e2506000 	subs	r6, r0, #0
    f6bc:	0a000002 	beq	f6cc <CString::PutString(char const*)+0x28>
    f6c0:	e1a01006 	mov	r1, r6
    f6c4:	e1a00004 	mov	r0, r4
    f6c8:	ebffff4f 	bl	f40c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f6cc:	e1a01005 	mov	r1, r5
    f6d0:	e594000c 	ldr	r0, [r4, #12]
    f6d4:	eb0007aa 	bl	11584 <strcpy>
    f6d8:	e594100c 	ldr	r1, [r4, #12]
    f6dc:	e0811006 	add	r1, r1, r6
    f6e0:	e584100c 	str	r1, [r4, #12]
    f6e4:	e8bd8070 	pop	{r4, r5, r6, pc}

0000f6e8 <CString::Replace(char const*, char const*)>:
    f6e8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f6ec:	e1d180d0 	ldrsb	r8, [r1]
    f6f0:	e24dd014 	sub	sp, sp, #20
    f6f4:	e3580000 	cmp	r8, #0
    f6f8:	1a000002 	bne	f708 <CString::Replace(char const*, char const*)+0x20>
    f6fc:	e1a00008 	mov	r0, r8
    f700:	e28dd014 	add	sp, sp, #20
    f704:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f708:	e1a0a000 	mov	sl, r0
    f70c:	e1a07001 	mov	r7, r1
    f710:	e5901004 	ldr	r1, [r0, #4]
    f714:	e1a0000d 	mov	r0, sp
    f718:	e1a09002 	mov	r9, r2
    f71c:	ebffff5a 	bl	f48c <CString::CString(char const*)>
    f720:	e59a0004 	ldr	r0, [sl, #4]
    f724:	e3500000 	cmp	r0, #0
    f728:	0a000000 	beq	f730 <CString::Replace(char const*, char const*)+0x48>
    f72c:	eb000b67 	bl	124d0 <operator delete[](void*)>
    f730:	e3a00040 	mov	r0, #64	; 0x40
    f734:	e58a0008 	str	r0, [sl, #8]
    f738:	eb000b62 	bl	124c8 <operator new[](unsigned int)>
    f73c:	e3a08000 	mov	r8, #0
    f740:	e3a06001 	mov	r6, #1
    f744:	e59d4004 	ldr	r4, [sp, #4]
    f748:	e58a0004 	str	r0, [sl, #4]
    f74c:	e58a000c 	str	r0, [sl, #12]
    f750:	e1d710d0 	ldrsb	r1, [r7]
    f754:	e1a00004 	mov	r0, r4
    f758:	eb0007b8 	bl	11640 <strchr>
    f75c:	e2505000 	subs	r5, r0, #0
    f760:	0a00002d 	beq	f81c <CString::Replace(char const*, char const*)+0x134>
    f764:	e1540005 	cmp	r4, r5
    f768:	2a000039 	bcs	f854 <CString::Replace(char const*, char const*)+0x16c>
    f76c:	e1a01006 	mov	r1, r6
    f770:	e1a0000a 	mov	r0, sl
    f774:	e0d4b0d1 	ldrsb	fp, [r4], #1
    f778:	ebffff23 	bl	f40c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f77c:	e59a300c 	ldr	r3, [sl, #12]
    f780:	e1550004 	cmp	r5, r4
    f784:	e2832001 	add	r2, r3, #1
    f788:	e58a200c 	str	r2, [sl, #12]
    f78c:	e5c3b000 	strb	fp, [r3]
    f790:	1afffff5 	bne	f76c <CString::Replace(char const*, char const*)+0x84>
    f794:	e1a0c005 	mov	ip, r5
    f798:	e2854001 	add	r4, r5, #1
    f79c:	e1d730d1 	ldrsb	r3, [r7, #1]
    f7a0:	e2871001 	add	r1, r7, #1
    f7a4:	e3530000 	cmp	r3, #0
    f7a8:	0a00000c 	beq	f7e0 <CString::Replace(char const*, char const*)+0xf8>
    f7ac:	e1d520d1 	ldrsb	r2, [r5, #1]
    f7b0:	e1520003 	cmp	r2, r3
    f7b4:	1a00000e 	bne	f7f4 <CString::Replace(char const*, char const*)+0x10c>
    f7b8:	e2853002 	add	r3, r5, #2
    f7bc:	ea000003 	b	f7d0 <CString::Replace(char const*, char const*)+0xe8>
    f7c0:	e1d400d0 	ldrsb	r0, [r4]
    f7c4:	e2833001 	add	r3, r3, #1
    f7c8:	e1500002 	cmp	r0, r2
    f7cc:	1a000008 	bne	f7f4 <CString::Replace(char const*, char const*)+0x10c>
    f7d0:	e1f120d1 	ldrsb	r2, [r1, #1]!
    f7d4:	e1a04003 	mov	r4, r3
    f7d8:	e3520000 	cmp	r2, #0
    f7dc:	1afffff7 	bne	f7c0 <CString::Replace(char const*, char const*)+0xd8>
    f7e0:	e1a01009 	mov	r1, r9
    f7e4:	e1a0000a 	mov	r0, sl
    f7e8:	e2888001 	add	r8, r8, #1
    f7ec:	ebffffac 	bl	f6a4 <CString::PutString(char const*)>
    f7f0:	eaffffd6 	b	f750 <CString::Replace(char const*, char const*)+0x68>
    f7f4:	e1a01006 	mov	r1, r6
    f7f8:	e1a0000a 	mov	r0, sl
    f7fc:	e1dc50d0 	ldrsb	r5, [ip]
    f800:	e28c4001 	add	r4, ip, #1
    f804:	ebffff00 	bl	f40c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f808:	e59a300c 	ldr	r3, [sl, #12]
    f80c:	e2832001 	add	r2, r3, #1
    f810:	e58a200c 	str	r2, [sl, #12]
    f814:	e5c35000 	strb	r5, [r3]
    f818:	eaffffcc 	b	f750 <CString::Replace(char const*, char const*)+0x68>
    f81c:	e1a0000a 	mov	r0, sl
    f820:	e1a01004 	mov	r1, r4
    f824:	ebffff9e 	bl	f6a4 <CString::PutString(char const*)>
    f828:	e59a200c 	ldr	r2, [sl, #12]
    f82c:	e59f302c 	ldr	r3, [pc, #44]	; f860 <CString::Replace(char const*, char const*)+0x178>
    f830:	e5c25000 	strb	r5, [r2]
    f834:	e59d0004 	ldr	r0, [sp, #4]
    f838:	e58d3000 	str	r3, [sp]
    f83c:	e3500000 	cmp	r0, #0
    f840:	0affffad 	beq	f6fc <CString::Replace(char const*, char const*)+0x14>
    f844:	eb000b21 	bl	124d0 <operator delete[](void*)>
    f848:	e1a00008 	mov	r0, r8
    f84c:	e28dd014 	add	sp, sp, #20
    f850:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f854:	e1a0c004 	mov	ip, r4
    f858:	e2854001 	add	r4, r5, #1
    f85c:	eaffffce 	b	f79c <CString::Replace(char const*, char const*)+0xb4>
    f860:	000148b8 	.word	0x000148b8

0000f864 <CString::ReserveSpace(unsigned int)>:
    f864:	e3510000 	cmp	r1, #0
    f868:	012fff1e 	bxeq	lr
    f86c:	eafffee6 	b	f40c <CString::ReserveSpace(unsigned int) [clone .part.0]>

0000f870 <CString::ntoa(char*, unsigned long, unsigned int, bool)>:
    f870:	e1510002 	cmp	r1, r2
    f874:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    f878:	e1a05001 	mov	r5, r1
    f87c:	e1a07002 	mov	r7, r2
    f880:	e1a09000 	mov	r9, r0
    f884:	e1a08003 	mov	r8, r3
    f888:	23a0a001 	movcs	sl, #1
    f88c:	3a000022 	bcc	f91c <CString::ntoa(char*, unsigned long, unsigned int, bool)+0xac>
    f890:	e00a0a97 	mul	sl, r7, sl
    f894:	e1a00005 	mov	r0, r5
    f898:	e1a0100a 	mov	r1, sl
    f89c:	ebffea36 	bl	a17c <__udivsi3>
    f8a0:	e1500007 	cmp	r0, r7
    f8a4:	e1a04000 	mov	r4, r0
    f8a8:	2afffff8 	bcs	f890 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x20>
    f8ac:	e3580000 	cmp	r8, #0
    f8b0:	13a08037 	movne	r8, #55	; 0x37
    f8b4:	03a08057 	moveq	r8, #87	; 0x57
    f8b8:	e1a06009 	mov	r6, r9
    f8bc:	ea000003 	b	f8d0 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x60>
    f8c0:	e1a0100a 	mov	r1, sl
    f8c4:	e1a00005 	mov	r0, r5
    f8c8:	ebffea2b 	bl	a17c <__udivsi3>
    f8cc:	e1a04000 	mov	r4, r0
    f8d0:	e1a00005 	mov	r0, r5
    f8d4:	e1a0100a 	mov	r1, sl
    f8d8:	ebffea64 	bl	a270 <__aeabi_uidivmod>
    f8dc:	e3540009 	cmp	r4, #9
    f8e0:	e2843030 	add	r3, r4, #48	; 0x30
    f8e4:	80884004 	addhi	r4, r8, r4
    f8e8:	96af4073 	sxtbls	r4, r3
    f8ec:	86af4074 	sxtbhi	r4, r4
    f8f0:	e2866001 	add	r6, r6, #1
    f8f4:	e1a0000a 	mov	r0, sl
    f8f8:	e1a05001 	mov	r5, r1
    f8fc:	e5464001 	strb	r4, [r6, #-1]
    f900:	e1a01007 	mov	r1, r7
    f904:	ebffea1c 	bl	a17c <__udivsi3>
    f908:	e250a000 	subs	sl, r0, #0
    f90c:	1affffeb 	bne	f8c0 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x50>
    f910:	e5c6a000 	strb	sl, [r6]
    f914:	e1a00009 	mov	r0, r9
    f918:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    f91c:	e1a04001 	mov	r4, r1
    f920:	e3a0a001 	mov	sl, #1
    f924:	eaffffe0 	b	f8ac <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x3c>

0000f928 <CString::ftoa(char*, double, unsigned int)>:
    f928:	eeb50bc0 	vcmpe.f64	d0, #0.0
    f92c:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    f930:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f934:	ed9f7b95 	vldr	d7, [pc, #596]	; fb90 <CString::ftoa(char*, double, unsigned int)+0x268>
    f938:	ed2d8b02 	vpush	{d8}
    f93c:	eeb08b40 	vmov.f64	d8, d0
    f940:	4eb18b40 	vnegmi.f64	d8, d0
    f944:	43a0302d 	movmi	r3, #45	; 0x2d
    f948:	eeb48bc7 	vcmpe.f64	d8, d7
    f94c:	45c03000 	strbmi	r3, [r0]
    f950:	4280b001 	addmi	fp, r0, #1
    f954:	51a0b000 	movpl	fp, r0
    f958:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    f95c:	e24dd01c 	sub	sp, sp, #28
    f960:	e1a0a000 	mov	sl, r0
    f964:	e58d1004 	str	r1, [sp, #4]
    f968:	ca000079 	bgt	fb54 <CString::ftoa(char*, double, unsigned int)+0x22c>
    f96c:	eefc7bc8 	vcvt.u32.f64	s15, d8
    f970:	ee177a90 	vmov	r7, s15
    f974:	e3570009 	cmp	r7, #9
    f978:	83a04001 	movhi	r4, #1
    f97c:	9a00007b 	bls	fb70 <CString::ftoa(char*, double, unsigned int)+0x248>
    f980:	e0844104 	add	r4, r4, r4, lsl #2
    f984:	e1a04084 	lsl	r4, r4, #1
    f988:	e1a01004 	mov	r1, r4
    f98c:	e1a00007 	mov	r0, r7
    f990:	ebffe9f9 	bl	a17c <__udivsi3>
    f994:	e3500009 	cmp	r0, #9
    f998:	e1a05000 	mov	r5, r0
    f99c:	8afffff7 	bhi	f980 <CString::ftoa(char*, double, unsigned int)+0x58>
    f9a0:	e1a0600b 	mov	r6, fp
    f9a4:	e1a09007 	mov	r9, r7
    f9a8:	e59f81f0 	ldr	r8, [pc, #496]	; fba0 <CString::ftoa(char*, double, unsigned int)+0x278>
    f9ac:	ea000003 	b	f9c0 <CString::ftoa(char*, double, unsigned int)+0x98>
    f9b0:	e1a01004 	mov	r1, r4
    f9b4:	e1a00009 	mov	r0, r9
    f9b8:	ebffe9ef 	bl	a17c <__udivsi3>
    f9bc:	e1a05000 	mov	r5, r0
    f9c0:	e1a00009 	mov	r0, r9
    f9c4:	e1a01004 	mov	r1, r4
    f9c8:	ebffea28 	bl	a270 <__aeabi_uidivmod>
    f9cc:	e0843498 	umull	r3, r4, r8, r4
    f9d0:	e3550009 	cmp	r5, #9
    f9d4:	e2852030 	add	r2, r5, #48	; 0x30
    f9d8:	82855057 	addhi	r5, r5, #87	; 0x57
    f9dc:	96af5072 	sxtbls	r5, r2
    f9e0:	86af5075 	sxtbhi	r5, r5
    f9e4:	e2866001 	add	r6, r6, #1
    f9e8:	e1b041a4 	lsrs	r4, r4, #3
    f9ec:	e1a09001 	mov	r9, r1
    f9f0:	e5465001 	strb	r5, [r6, #-1]
    f9f4:	1affffed 	bne	f9b0 <CString::ftoa(char*, double, unsigned int)+0x88>
    f9f8:	e59d3004 	ldr	r3, [sp, #4]
    f9fc:	e5c64000 	strb	r4, [r6]
    fa00:	e3530000 	cmp	r3, #0
    fa04:	1a000003 	bne	fa18 <CString::ftoa(char*, double, unsigned int)+0xf0>
    fa08:	e1a0000a 	mov	r0, sl
    fa0c:	e28dd01c 	add	sp, sp, #28
    fa10:	ecbd8b02 	vpop	{d8}
    fa14:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fa18:	e1a0000b 	mov	r0, fp
    fa1c:	eb00065a 	bl	1138c <strlen>
    fa20:	e59d3004 	ldr	r3, [sp, #4]
    fa24:	e08b2000 	add	r2, fp, r0
    fa28:	e3530009 	cmp	r3, #9
    fa2c:	31a09003 	movcc	r9, r3
    fa30:	23a09009 	movcs	r9, #9
    fa34:	e3a0302e 	mov	r3, #46	; 0x2e
    fa38:	e3590001 	cmp	r9, #1
    fa3c:	e7cb3000 	strb	r3, [fp, r0]
    fa40:	e58d2004 	str	r2, [sp, #4]
    fa44:	e282b001 	add	fp, r2, #1
    fa48:	0a00004e 	beq	fb88 <CString::ftoa(char*, double, unsigned int)+0x260>
    fa4c:	e3a02002 	mov	r2, #2
    fa50:	e3a0300a 	mov	r3, #10
    fa54:	e2822001 	add	r2, r2, #1
    fa58:	e0833103 	add	r3, r3, r3, lsl #2
    fa5c:	e1520009 	cmp	r2, r9
    fa60:	e1a03083 	lsl	r3, r3, #1
    fa64:	9afffffa 	bls	fa54 <CString::ftoa(char*, double, unsigned int)+0x12c>
    fa68:	ee073a90 	vmov	s15, r3
    fa6c:	eeb87b67 	vcvt.f64.u32	d7, s15
    fa70:	ee067a90 	vmov	s13, r7
    fa74:	eeb86b66 	vcvt.f64.u32	d6, s13
    fa78:	ee386b46 	vsub.f64	d6, d8, d6
    fa7c:	ee267b07 	vmul.f64	d7, d6, d7
    fa80:	eefc7bc7 	vcvt.u32.f64	s15, d7
    fa84:	ee178a90 	vmov	r8, s15
    fa88:	e3580009 	cmp	r8, #9
    fa8c:	83a04001 	movhi	r4, #1
    fa90:	9a000039 	bls	fb7c <CString::ftoa(char*, double, unsigned int)+0x254>
    fa94:	e0844104 	add	r4, r4, r4, lsl #2
    fa98:	e1a04084 	lsl	r4, r4, #1
    fa9c:	e1a01004 	mov	r1, r4
    faa0:	e1a00008 	mov	r0, r8
    faa4:	ebffe9b4 	bl	a17c <__udivsi3>
    faa8:	e3500009 	cmp	r0, #9
    faac:	e1a05000 	mov	r5, r0
    fab0:	8afffff7 	bhi	fa94 <CString::ftoa(char*, double, unsigned int)+0x16c>
    fab4:	e28d600c 	add	r6, sp, #12
    fab8:	e59f70e0 	ldr	r7, [pc, #224]	; fba0 <CString::ftoa(char*, double, unsigned int)+0x278>
    fabc:	ea000003 	b	fad0 <CString::ftoa(char*, double, unsigned int)+0x1a8>
    fac0:	e1a01004 	mov	r1, r4
    fac4:	e1a00008 	mov	r0, r8
    fac8:	ebffe9ab 	bl	a17c <__udivsi3>
    facc:	e1a05000 	mov	r5, r0
    fad0:	e1a00008 	mov	r0, r8
    fad4:	e1a01004 	mov	r1, r4
    fad8:	ebffe9e4 	bl	a270 <__aeabi_uidivmod>
    fadc:	e0843497 	umull	r3, r4, r7, r4
    fae0:	e3550009 	cmp	r5, #9
    fae4:	e2852030 	add	r2, r5, #48	; 0x30
    fae8:	82855057 	addhi	r5, r5, #87	; 0x57
    faec:	96af5072 	sxtbls	r5, r2
    faf0:	86af5075 	sxtbhi	r5, r5
    faf4:	e2866001 	add	r6, r6, #1
    faf8:	e1b041a4 	lsrs	r4, r4, #3
    fafc:	e1a08001 	mov	r8, r1
    fb00:	e5465001 	strb	r5, [r6, #-1]
    fb04:	1affffed 	bne	fac0 <CString::ftoa(char*, double, unsigned int)+0x198>
    fb08:	e28d000c 	add	r0, sp, #12
    fb0c:	e5c64000 	strb	r4, [r6]
    fb10:	eb00061d 	bl	1138c <strlen>
    fb14:	e0599000 	subs	r9, r9, r0
    fb18:	0a000006 	beq	fb38 <CString::ftoa(char*, double, unsigned int)+0x210>
    fb1c:	e3a02030 	mov	r2, #48	; 0x30
    fb20:	e59d8004 	ldr	r8, [sp, #4]
    fb24:	e0883009 	add	r3, r8, r9
    fb28:	e5e82001 	strb	r2, [r8, #1]!
    fb2c:	e1580003 	cmp	r8, r3
    fb30:	1afffffc 	bne	fb28 <CString::ftoa(char*, double, unsigned int)+0x200>
    fb34:	e08bb009 	add	fp, fp, r9
    fb38:	e28d100c 	add	r1, sp, #12
    fb3c:	e1a0000b 	mov	r0, fp
    fb40:	eb00068f 	bl	11584 <strcpy>
    fb44:	e1a0000a 	mov	r0, sl
    fb48:	e28dd01c 	add	sp, sp, #28
    fb4c:	ecbd8b02 	vpop	{d8}
    fb50:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fb54:	e1a0000b 	mov	r0, fp
    fb58:	e59f1044 	ldr	r1, [pc, #68]	; fba4 <CString::ftoa(char*, double, unsigned int)+0x27c>
    fb5c:	eb000688 	bl	11584 <strcpy>
    fb60:	e1a0000a 	mov	r0, sl
    fb64:	e28dd01c 	add	sp, sp, #28
    fb68:	ecbd8b02 	vpop	{d8}
    fb6c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fb70:	ee175a90 	vmov	r5, s15
    fb74:	e3a04001 	mov	r4, #1
    fb78:	eaffff88 	b	f9a0 <CString::ftoa(char*, double, unsigned int)+0x78>
    fb7c:	ee175a90 	vmov	r5, s15
    fb80:	e3a04001 	mov	r4, #1
    fb84:	eaffffca 	b	fab4 <CString::ftoa(char*, double, unsigned int)+0x18c>
    fb88:	ed9f7b02 	vldr	d7, [pc, #8]	; fb98 <CString::ftoa(char*, double, unsigned int)+0x270>
    fb8c:	eaffffb7 	b	fa70 <CString::ftoa(char*, double, unsigned int)+0x148>
    fb90:	ffe00000 	.word	0xffe00000
    fb94:	41efffff 	.word	0x41efffff
    fb98:	00000000 	.word	0x00000000
    fb9c:	40240000 	.word	0x40240000
    fba0:	cccccccd 	.word	0xcccccccd
    fba4:	000148c0 	.word	0x000148c0

0000fba8 <CString::FormatV(char const*, std::__va_list)>:
    fba8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fbac:	e1a0b000 	mov	fp, r0
    fbb0:	e5900004 	ldr	r0, [r0, #4]
    fbb4:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    fbb8:	e3500000 	cmp	r0, #0
    fbbc:	e1a05001 	mov	r5, r1
    fbc0:	e58d2000 	str	r2, [sp]
    fbc4:	0a000000 	beq	fbcc <CString::FormatV(char const*, std::__va_list)+0x24>
    fbc8:	eb000a40 	bl	124d0 <operator delete[](void*)>
    fbcc:	e3a00040 	mov	r0, #64	; 0x40
    fbd0:	e58b0008 	str	r0, [fp, #8]
    fbd4:	eb000a3b 	bl	124c8 <operator new[](unsigned int)>
    fbd8:	e58b0004 	str	r0, [fp, #4]
    fbdc:	e58b000c 	str	r0, [fp, #12]
    fbe0:	e1d540d0 	ldrsb	r4, [r5]
    fbe4:	e3540000 	cmp	r4, #0
    fbe8:	0a0000a2 	beq	fe78 <CString::FormatV(char const*, std::__va_list)+0x2d0>
    fbec:	e3540025 	cmp	r4, #37	; 0x25
    fbf0:	13a01001 	movne	r1, #1
    fbf4:	11a0000b 	movne	r0, fp
    fbf8:	1a000152 	bne	10148 <CString::FormatV(char const*, std::__va_list)+0x5a0>
    fbfc:	e1d560d1 	ldrsb	r6, [r5, #1]
    fc00:	e3560025 	cmp	r6, #37	; 0x25
    fc04:	0a000165 	beq	101a0 <CString::FormatV(char const*, std::__va_list)+0x5f8>
    fc08:	e356002d 	cmp	r6, #45	; 0x2d
    fc0c:	03a03001 	moveq	r3, #1
    fc10:	13a03000 	movne	r3, #0
    fc14:	01d560d2 	ldrsbeq	r6, [r5, #2]
    fc18:	158d3004 	strne	r3, [sp, #4]
    fc1c:	058d3004 	streq	r3, [sp, #4]
    fc20:	02855002 	addeq	r5, r5, #2
    fc24:	12855001 	addne	r5, r5, #1
    fc28:	e3560030 	cmp	r6, #48	; 0x30
    fc2c:	03a03001 	moveq	r3, #1
    fc30:	13a03000 	movne	r3, #0
    fc34:	01d560d1 	ldrsbeq	r6, [r5, #1]
    fc38:	058d3008 	streq	r3, [sp, #8]
    fc3c:	00855003 	addeq	r5, r5, r3
    fc40:	158d3008 	strne	r3, [sp, #8]
    fc44:	e2463030 	sub	r3, r6, #48	; 0x30
    fc48:	e6ef3073 	uxtb	r3, r3
    fc4c:	e3530009 	cmp	r3, #9
    fc50:	e3a04000 	mov	r4, #0
    fc54:	8a000007 	bhi	fc78 <CString::FormatV(char const*, std::__va_list)+0xd0>
    fc58:	e0844104 	add	r4, r4, r4, lsl #2
    fc5c:	e0864084 	add	r4, r6, r4, lsl #1
    fc60:	e1f560d1 	ldrsb	r6, [r5, #1]!
    fc64:	e2444030 	sub	r4, r4, #48	; 0x30
    fc68:	e2463030 	sub	r3, r6, #48	; 0x30
    fc6c:	e6ef3073 	uxtb	r3, r3
    fc70:	e3530009 	cmp	r3, #9
    fc74:	9afffff7 	bls	fc58 <CString::FormatV(char const*, std::__va_list)+0xb0>
    fc78:	e356002e 	cmp	r6, #46	; 0x2e
    fc7c:	0a000137 	beq	10160 <CString::FormatV(char const*, std::__va_list)+0x5b8>
    fc80:	e3a01006 	mov	r1, #6
    fc84:	e1d570d0 	ldrsb	r7, [r5]
    fc88:	e357006c 	cmp	r7, #108	; 0x6c
    fc8c:	03a02001 	moveq	r2, #1
    fc90:	01d570d1 	ldrsbeq	r7, [r5, #1]
    fc94:	00855002 	addeq	r5, r5, r2
    fc98:	e2473058 	sub	r3, r7, #88	; 0x58
    fc9c:	e3530020 	cmp	r3, #32
    fca0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    fca4:	ea00011c 	b	1011c <CString::FormatV(char const*, std::__va_list)+0x574>
    fca8:	00010098 	.word	0x00010098
    fcac:	0001011c 	.word	0x0001011c
    fcb0:	0001011c 	.word	0x0001011c
    fcb4:	0001011c 	.word	0x0001011c
    fcb8:	0001011c 	.word	0x0001011c
    fcbc:	0001011c 	.word	0x0001011c
    fcc0:	0001011c 	.word	0x0001011c
    fcc4:	0001011c 	.word	0x0001011c
    fcc8:	0001011c 	.word	0x0001011c
    fccc:	0001011c 	.word	0x0001011c
    fcd0:	0001011c 	.word	0x0001011c
    fcd4:	00010024 	.word	0x00010024
    fcd8:	0000ff00 	.word	0x0000ff00
    fcdc:	0001011c 	.word	0x0001011c
    fce0:	0000fe88 	.word	0x0000fe88
    fce4:	0001011c 	.word	0x0001011c
    fce8:	0001011c 	.word	0x0001011c
    fcec:	0000ff00 	.word	0x0000ff00
    fcf0:	0001011c 	.word	0x0001011c
    fcf4:	0001011c 	.word	0x0001011c
    fcf8:	0001011c 	.word	0x0001011c
    fcfc:	0001011c 	.word	0x0001011c
    fd00:	0001011c 	.word	0x0001011c
    fd04:	0000fd2c 	.word	0x0000fd2c
    fd08:	00010098 	.word	0x00010098
    fd0c:	0001011c 	.word	0x0001011c
    fd10:	0001011c 	.word	0x0001011c
    fd14:	000100a8 	.word	0x000100a8
    fd18:	0001011c 	.word	0x0001011c
    fd1c:	000100a0 	.word	0x000100a0
    fd20:	0001011c 	.word	0x0001011c
    fd24:	0001011c 	.word	0x0001011c
    fd28:	00010098 	.word	0x00010098
    fd2c:	e3a09008 	mov	r9, #8
    fd30:	e59d3000 	ldr	r3, [sp]
    fd34:	e5936000 	ldr	r6, [r3]
    fd38:	e2833004 	add	r3, r3, #4
    fd3c:	e1560009 	cmp	r6, r9
    fd40:	e58d3000 	str	r3, [sp]
    fd44:	23a0a001 	movcs	sl, #1
    fd48:	3a0001aa 	bcc	103f8 <CString::FormatV(char const*, std::__va_list)+0x850>
    fd4c:	e00a0a99 	mul	sl, r9, sl
    fd50:	e1a00006 	mov	r0, r6
    fd54:	e1a0100a 	mov	r1, sl
    fd58:	ebffe907 	bl	a17c <__udivsi3>
    fd5c:	e1590000 	cmp	r9, r0
    fd60:	9afffff9 	bls	fd4c <CString::FormatV(char const*, std::__va_list)+0x1a4>
    fd64:	e1a03000 	mov	r3, r0
    fd68:	e3570058 	cmp	r7, #88	; 0x58
    fd6c:	13a07057 	movne	r7, #87	; 0x57
    fd70:	03a07037 	moveq	r7, #55	; 0x37
    fd74:	e1a02005 	mov	r2, r5
    fd78:	e58d400c 	str	r4, [sp, #12]
    fd7c:	e1a0500a 	mov	r5, sl
    fd80:	e1a04007 	mov	r4, r7
    fd84:	e28d8010 	add	r8, sp, #16
    fd88:	e1a07006 	mov	r7, r6
    fd8c:	e1a0a002 	mov	sl, r2
    fd90:	e1a06003 	mov	r6, r3
    fd94:	ea000003 	b	fda8 <CString::FormatV(char const*, std::__va_list)+0x200>
    fd98:	e1a01005 	mov	r1, r5
    fd9c:	e1a00007 	mov	r0, r7
    fda0:	ebffe8f5 	bl	a17c <__udivsi3>
    fda4:	e1a06000 	mov	r6, r0
    fda8:	e1a00007 	mov	r0, r7
    fdac:	e1a01005 	mov	r1, r5
    fdb0:	ebffe92e 	bl	a270 <__aeabi_uidivmod>
    fdb4:	e3560009 	cmp	r6, #9
    fdb8:	e2862030 	add	r2, r6, #48	; 0x30
    fdbc:	80846006 	addhi	r6, r4, r6
    fdc0:	96af6072 	sxtbls	r6, r2
    fdc4:	86af6076 	sxtbhi	r6, r6
    fdc8:	e2888001 	add	r8, r8, #1
    fdcc:	e1a00005 	mov	r0, r5
    fdd0:	e1a07001 	mov	r7, r1
    fdd4:	e5486001 	strb	r6, [r8, #-1]
    fdd8:	e1a01009 	mov	r1, r9
    fddc:	ebffe8e6 	bl	a17c <__udivsi3>
    fde0:	e2505000 	subs	r5, r0, #0
    fde4:	1affffeb 	bne	fd98 <CString::FormatV(char const*, std::__va_list)+0x1f0>
    fde8:	e1a0300a 	mov	r3, sl
    fdec:	e1a0a005 	mov	sl, r5
    fdf0:	e28d0010 	add	r0, sp, #16
    fdf4:	e5c8a000 	strb	sl, [r8]
    fdf8:	e1a05003 	mov	r5, r3
    fdfc:	e59d400c 	ldr	r4, [sp, #12]
    fe00:	eb000561 	bl	1138c <strlen>
    fe04:	e59d3004 	ldr	r3, [sp, #4]
    fe08:	e1a06000 	mov	r6, r0
    fe0c:	e3530000 	cmp	r3, #0
    fe10:	1a0000eb 	bne	101c4 <CString::FormatV(char const*, std::__va_list)+0x61c>
    fe14:	e1500004 	cmp	r0, r4
    fe18:	2a00000f 	bcs	fe5c <CString::FormatV(char const*, std::__va_list)+0x2b4>
    fe1c:	e59d3008 	ldr	r3, [sp, #8]
    fe20:	e0444000 	sub	r4, r4, r0
    fe24:	e3530000 	cmp	r3, #0
    fe28:	e1a01004 	mov	r1, r4
    fe2c:	e1a0000b 	mov	r0, fp
    fe30:	03a07020 	moveq	r7, #32
    fe34:	13a07030 	movne	r7, #48	; 0x30
    fe38:	ebfffd73 	bl	f40c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    fe3c:	e2443001 	sub	r3, r4, #1
    fe40:	e59b200c 	ldr	r2, [fp, #12]
    fe44:	e2433001 	sub	r3, r3, #1
    fe48:	e2821001 	add	r1, r2, #1
    fe4c:	e3730001 	cmn	r3, #1
    fe50:	e58b100c 	str	r1, [fp, #12]
    fe54:	e5c27000 	strb	r7, [r2]
    fe58:	1afffff8 	bne	fe40 <CString::FormatV(char const*, std::__va_list)+0x298>
    fe5c:	e28d1010 	add	r1, sp, #16
    fe60:	e1a0000b 	mov	r0, fp
    fe64:	ebfffe0e 	bl	f6a4 <CString::PutString(char const*)>
    fe68:	e2855001 	add	r5, r5, #1
    fe6c:	e1d540d0 	ldrsb	r4, [r5]
    fe70:	e3540000 	cmp	r4, #0
    fe74:	1affff5c 	bne	fbec <CString::FormatV(char const*, std::__va_list)+0x44>
    fe78:	e59b300c 	ldr	r3, [fp, #12]
    fe7c:	e5c34000 	strb	r4, [r3]
    fe80:	e28dd02c 	add	sp, sp, #44	; 0x2c
    fe84:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fe88:	e59d3000 	ldr	r3, [sp]
    fe8c:	e28d0010 	add	r0, sp, #16
    fe90:	e2833007 	add	r3, r3, #7
    fe94:	e3c33007 	bic	r3, r3, #7
    fe98:	ed930b00 	vldr	d0, [r3]
    fe9c:	e2833008 	add	r3, r3, #8
    fea0:	e58d3000 	str	r3, [sp]
    fea4:	ebfffe9f 	bl	f928 <CString::ftoa(char*, double, unsigned int)>
    fea8:	e28d0010 	add	r0, sp, #16
    feac:	eb000536 	bl	1138c <strlen>
    feb0:	e59d3004 	ldr	r3, [sp, #4]
    feb4:	e1a06000 	mov	r6, r0
    feb8:	e3530000 	cmp	r3, #0
    febc:	1a000108 	bne	102e4 <CString::FormatV(char const*, std::__va_list)+0x73c>
    fec0:	e1500004 	cmp	r0, r4
    fec4:	2affffe4 	bcs	fe5c <CString::FormatV(char const*, std::__va_list)+0x2b4>
    fec8:	e0444000 	sub	r4, r4, r0
    fecc:	e1a01004 	mov	r1, r4
    fed0:	e1a0000b 	mov	r0, fp
    fed4:	ebfffd4c 	bl	f40c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    fed8:	e2443001 	sub	r3, r4, #1
    fedc:	e59b200c 	ldr	r2, [fp, #12]
    fee0:	e2433001 	sub	r3, r3, #1
    fee4:	e2821001 	add	r1, r2, #1
    fee8:	e58b100c 	str	r1, [fp, #12]
    feec:	e3a01020 	mov	r1, #32
    fef0:	e3730001 	cmn	r3, #1
    fef4:	e5c21000 	strb	r1, [r2]
    fef8:	1afffff7 	bne	fedc <CString::FormatV(char const*, std::__va_list)+0x334>
    fefc:	eaffffd6 	b	fe5c <CString::FormatV(char const*, std::__va_list)+0x2b4>
    ff00:	e59d3000 	ldr	r3, [sp]
    ff04:	e5936000 	ldr	r6, [r3]
    ff08:	e2833004 	add	r3, r3, #4
    ff0c:	e3560000 	cmp	r6, #0
    ff10:	b3a08001 	movlt	r8, #1
    ff14:	a3a08000 	movge	r8, #0
    ff18:	e58d3000 	str	r3, [sp]
    ff1c:	b1a03008 	movlt	r3, r8
    ff20:	b2666000 	rsblt	r6, r6, #0
    ff24:	b58d300c 	strlt	r3, [sp, #12]
    ff28:	a58d800c 	strge	r8, [sp, #12]
    ff2c:	e3560009 	cmp	r6, #9
    ff30:	e1a07006 	mov	r7, r6
    ff34:	c3a0a001 	movgt	sl, #1
    ff38:	da00012b 	ble	103ec <CString::FormatV(char const*, std::__va_list)+0x844>
    ff3c:	e08aa10a 	add	sl, sl, sl, lsl #2
    ff40:	e1a0a08a 	lsl	sl, sl, #1
    ff44:	e1a0100a 	mov	r1, sl
    ff48:	e1a00006 	mov	r0, r6
    ff4c:	ebffe88a 	bl	a17c <__udivsi3>
    ff50:	e3500009 	cmp	r0, #9
    ff54:	8afffff8 	bhi	ff3c <CString::FormatV(char const*, std::__va_list)+0x394>
    ff58:	e1a09000 	mov	r9, r0
    ff5c:	e28d6010 	add	r6, sp, #16
    ff60:	ea000003 	b	ff74 <CString::FormatV(char const*, std::__va_list)+0x3cc>
    ff64:	e1a0100a 	mov	r1, sl
    ff68:	e1a00007 	mov	r0, r7
    ff6c:	ebffe882 	bl	a17c <__udivsi3>
    ff70:	e1a09000 	mov	r9, r0
    ff74:	e1a00007 	mov	r0, r7
    ff78:	e1a0100a 	mov	r1, sl
    ff7c:	ebffe8bb 	bl	a270 <__aeabi_uidivmod>
    ff80:	e3590009 	cmp	r9, #9
    ff84:	e2893030 	add	r3, r9, #48	; 0x30
    ff88:	96af9073 	sxtbls	r9, r3
    ff8c:	e59f3494 	ldr	r3, [pc, #1172]	; 10428 <CString::FormatV(char const*, std::__va_list)+0x880>
    ff90:	82899057 	addhi	r9, r9, #87	; 0x57
    ff94:	e08a3a93 	umull	r3, sl, r3, sl
    ff98:	86af9079 	sxtbhi	r9, r9
    ff9c:	e2866001 	add	r6, r6, #1
    ffa0:	e1b0a1aa 	lsrs	sl, sl, #3
    ffa4:	e1a07001 	mov	r7, r1
    ffa8:	e5469001 	strb	r9, [r6, #-1]
    ffac:	1affffec 	bne	ff64 <CString::FormatV(char const*, std::__va_list)+0x3bc>
    ffb0:	e28d0010 	add	r0, sp, #16
    ffb4:	e5c6a000 	strb	sl, [r6]
    ffb8:	eb0004f3 	bl	1138c <strlen>
    ffbc:	e59d3004 	ldr	r3, [sp, #4]
    ffc0:	e0888000 	add	r8, r8, r0
    ffc4:	e3530000 	cmp	r3, #0
    ffc8:	0a000090 	beq	10210 <CString::FormatV(char const*, std::__va_list)+0x668>
    ffcc:	e59d300c 	ldr	r3, [sp, #12]
    ffd0:	e3530000 	cmp	r3, #0
    ffd4:	1a0000fb 	bne	103c8 <CString::FormatV(char const*, std::__va_list)+0x820>
    ffd8:	e28d1010 	add	r1, sp, #16
    ffdc:	e1a0000b 	mov	r0, fp
    ffe0:	ebfffdaf 	bl	f6a4 <CString::PutString(char const*)>
    ffe4:	e1580004 	cmp	r8, r4
    ffe8:	2affff9e 	bcs	fe68 <CString::FormatV(char const*, std::__va_list)+0x2c0>
    ffec:	e0444008 	sub	r4, r4, r8
    fff0:	e1a01004 	mov	r1, r4
    fff4:	e1a0000b 	mov	r0, fp
    fff8:	ebfffd03 	bl	f40c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    fffc:	e2443001 	sub	r3, r4, #1
   10000:	e59b200c 	ldr	r2, [fp, #12]
   10004:	e2433001 	sub	r3, r3, #1
   10008:	e2821001 	add	r1, r2, #1
   1000c:	e58b100c 	str	r1, [fp, #12]
   10010:	e3a01020 	mov	r1, #32
   10014:	e3730001 	cmn	r3, #1
   10018:	e5c21000 	strb	r1, [r2]
   1001c:	1afffff7 	bne	10000 <CString::FormatV(char const*, std::__va_list)+0x458>
   10020:	eaffff90 	b	fe68 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   10024:	e59d3004 	ldr	r3, [sp, #4]
   10028:	e3530000 	cmp	r3, #0
   1002c:	e59d3000 	ldr	r3, [sp]
   10030:	e2836004 	add	r6, r3, #4
   10034:	e1d370d0 	ldrsb	r7, [r3]
   10038:	1a000092 	bne	10288 <CString::FormatV(char const*, std::__va_list)+0x6e0>
   1003c:	e3540001 	cmp	r4, #1
   10040:	9a00000b 	bls	10074 <CString::FormatV(char const*, std::__va_list)+0x4cc>
   10044:	e2441001 	sub	r1, r4, #1
   10048:	e1a0000b 	mov	r0, fp
   1004c:	ebfffcee 	bl	f40c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   10050:	e2444002 	sub	r4, r4, #2
   10054:	e59b300c 	ldr	r3, [fp, #12]
   10058:	e2444001 	sub	r4, r4, #1
   1005c:	e2832001 	add	r2, r3, #1
   10060:	e58b200c 	str	r2, [fp, #12]
   10064:	e3a02020 	mov	r2, #32
   10068:	e3740001 	cmn	r4, #1
   1006c:	e5c32000 	strb	r2, [r3]
   10070:	1afffff7 	bne	10054 <CString::FormatV(char const*, std::__va_list)+0x4ac>
   10074:	e3a01001 	mov	r1, #1
   10078:	e1a0000b 	mov	r0, fp
   1007c:	ebfffce2 	bl	f40c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   10080:	e59b300c 	ldr	r3, [fp, #12]
   10084:	e58d6000 	str	r6, [sp]
   10088:	e2832001 	add	r2, r3, #1
   1008c:	e58b200c 	str	r2, [fp, #12]
   10090:	e5c37000 	strb	r7, [r3]
   10094:	eaffff73 	b	fe68 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   10098:	e3a09010 	mov	r9, #16
   1009c:	eaffff23 	b	fd30 <CString::FormatV(char const*, std::__va_list)+0x188>
   100a0:	e3a0900a 	mov	r9, #10
   100a4:	eaffff21 	b	fd30 <CString::FormatV(char const*, std::__va_list)+0x188>
   100a8:	e59d3000 	ldr	r3, [sp]
   100ac:	e5938000 	ldr	r8, [r3]
   100b0:	e2836004 	add	r6, r3, #4
   100b4:	e1a00008 	mov	r0, r8
   100b8:	eb0004b3 	bl	1138c <strlen>
   100bc:	e59d3004 	ldr	r3, [sp, #4]
   100c0:	e1a07000 	mov	r7, r0
   100c4:	e3530000 	cmp	r3, #0
   100c8:	1a000098 	bne	10330 <CString::FormatV(char const*, std::__va_list)+0x788>
   100cc:	e1500004 	cmp	r0, r4
   100d0:	2a00000c 	bcs	10108 <CString::FormatV(char const*, std::__va_list)+0x560>
   100d4:	e0444000 	sub	r4, r4, r0
   100d8:	e1a01004 	mov	r1, r4
   100dc:	e1a0000b 	mov	r0, fp
   100e0:	ebfffcc9 	bl	f40c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   100e4:	e2443001 	sub	r3, r4, #1
   100e8:	e59b200c 	ldr	r2, [fp, #12]
   100ec:	e2433001 	sub	r3, r3, #1
   100f0:	e2821001 	add	r1, r2, #1
   100f4:	e58b100c 	str	r1, [fp, #12]
   100f8:	e3a01020 	mov	r1, #32
   100fc:	e3730001 	cmn	r3, #1
   10100:	e5c21000 	strb	r1, [r2]
   10104:	1afffff7 	bne	100e8 <CString::FormatV(char const*, std::__va_list)+0x540>
   10108:	e1a01008 	mov	r1, r8
   1010c:	e1a0000b 	mov	r0, fp
   10110:	e58d6000 	str	r6, [sp]
   10114:	ebfffd62 	bl	f6a4 <CString::PutString(char const*)>
   10118:	eaffff52 	b	fe68 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   1011c:	e3a01001 	mov	r1, #1
   10120:	e1a0000b 	mov	r0, fp
   10124:	ebfffcb8 	bl	f40c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   10128:	e3a01001 	mov	r1, #1
   1012c:	e59b300c 	ldr	r3, [fp, #12]
   10130:	e1a0000b 	mov	r0, fp
   10134:	e0832001 	add	r2, r3, r1
   10138:	e58b200c 	str	r2, [fp, #12]
   1013c:	e3a02025 	mov	r2, #37	; 0x25
   10140:	e5c32000 	strb	r2, [r3]
   10144:	e1d540d0 	ldrsb	r4, [r5]
   10148:	ebfffcaf 	bl	f40c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   1014c:	e59b300c 	ldr	r3, [fp, #12]
   10150:	e2832001 	add	r2, r3, #1
   10154:	e58b200c 	str	r2, [fp, #12]
   10158:	e5c34000 	strb	r4, [r3]
   1015c:	eaffff41 	b	fe68 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   10160:	e1d570d1 	ldrsb	r7, [r5, #1]
   10164:	e3a01000 	mov	r1, #0
   10168:	e2473030 	sub	r3, r7, #48	; 0x30
   1016c:	e6ef3073 	uxtb	r3, r3
   10170:	e3530009 	cmp	r3, #9
   10174:	e2855001 	add	r5, r5, #1
   10178:	8afffec2 	bhi	fc88 <CString::FormatV(char const*, std::__va_list)+0xe0>
   1017c:	e0811101 	add	r1, r1, r1, lsl #2
   10180:	e0871081 	add	r1, r7, r1, lsl #1
   10184:	e1f570d1 	ldrsb	r7, [r5, #1]!
   10188:	e2411030 	sub	r1, r1, #48	; 0x30
   1018c:	e2473030 	sub	r3, r7, #48	; 0x30
   10190:	e6ef3073 	uxtb	r3, r3
   10194:	e3530009 	cmp	r3, #9
   10198:	9afffff7 	bls	1017c <CString::FormatV(char const*, std::__va_list)+0x5d4>
   1019c:	eafffeb9 	b	fc88 <CString::FormatV(char const*, std::__va_list)+0xe0>
   101a0:	e3a01001 	mov	r1, #1
   101a4:	e1a0000b 	mov	r0, fp
   101a8:	ebfffc97 	bl	f40c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   101ac:	e59b300c 	ldr	r3, [fp, #12]
   101b0:	e2855002 	add	r5, r5, #2
   101b4:	e2832001 	add	r2, r3, #1
   101b8:	e58b200c 	str	r2, [fp, #12]
   101bc:	e5c36000 	strb	r6, [r3]
   101c0:	eafffe86 	b	fbe0 <CString::FormatV(char const*, std::__va_list)+0x38>
   101c4:	e28d1010 	add	r1, sp, #16
   101c8:	e1a0000b 	mov	r0, fp
   101cc:	ebfffd34 	bl	f6a4 <CString::PutString(char const*)>
   101d0:	e1560004 	cmp	r6, r4
   101d4:	2affff23 	bcs	fe68 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   101d8:	e0444006 	sub	r4, r4, r6
   101dc:	e1a01004 	mov	r1, r4
   101e0:	e1a0000b 	mov	r0, fp
   101e4:	ebfffc88 	bl	f40c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   101e8:	e2443001 	sub	r3, r4, #1
   101ec:	e59b200c 	ldr	r2, [fp, #12]
   101f0:	e2433001 	sub	r3, r3, #1
   101f4:	e2821001 	add	r1, r2, #1
   101f8:	e58b100c 	str	r1, [fp, #12]
   101fc:	e3a01020 	mov	r1, #32
   10200:	e3730001 	cmn	r3, #1
   10204:	e5c21000 	strb	r1, [r2]
   10208:	1afffff7 	bne	101ec <CString::FormatV(char const*, std::__va_list)+0x644>
   1020c:	eaffff15 	b	fe68 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   10210:	e59d3008 	ldr	r3, [sp, #8]
   10214:	e3530000 	cmp	r3, #0
   10218:	1a000057 	bne	1037c <CString::FormatV(char const*, std::__va_list)+0x7d4>
   1021c:	e1580004 	cmp	r8, r4
   10220:	2a00000c 	bcs	10258 <CString::FormatV(char const*, std::__va_list)+0x6b0>
   10224:	e0444008 	sub	r4, r4, r8
   10228:	e1a01004 	mov	r1, r4
   1022c:	e1a0000b 	mov	r0, fp
   10230:	ebfffc75 	bl	f40c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   10234:	e2443001 	sub	r3, r4, #1
   10238:	e59b200c 	ldr	r2, [fp, #12]
   1023c:	e2433001 	sub	r3, r3, #1
   10240:	e2821001 	add	r1, r2, #1
   10244:	e58b100c 	str	r1, [fp, #12]
   10248:	e3a01020 	mov	r1, #32
   1024c:	e3730001 	cmn	r3, #1
   10250:	e5c21000 	strb	r1, [r2]
   10254:	1afffff7 	bne	10238 <CString::FormatV(char const*, std::__va_list)+0x690>
   10258:	e59d300c 	ldr	r3, [sp, #12]
   1025c:	e3530000 	cmp	r3, #0
   10260:	0afffefd 	beq	fe5c <CString::FormatV(char const*, std::__va_list)+0x2b4>
   10264:	e3a01001 	mov	r1, #1
   10268:	e1a0000b 	mov	r0, fp
   1026c:	ebfffc66 	bl	f40c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   10270:	e3a0202d 	mov	r2, #45	; 0x2d
   10274:	e59b300c 	ldr	r3, [fp, #12]
   10278:	e2831001 	add	r1, r3, #1
   1027c:	e58b100c 	str	r1, [fp, #12]
   10280:	e5c32000 	strb	r2, [r3]
   10284:	eafffef4 	b	fe5c <CString::FormatV(char const*, std::__va_list)+0x2b4>
   10288:	e3a01001 	mov	r1, #1
   1028c:	e1a0000b 	mov	r0, fp
   10290:	ebfffc5d 	bl	f40c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   10294:	e59b300c 	ldr	r3, [fp, #12]
   10298:	e3540001 	cmp	r4, #1
   1029c:	e2832001 	add	r2, r3, #1
   102a0:	e58b200c 	str	r2, [fp, #12]
   102a4:	e5c37000 	strb	r7, [r3]
   102a8:	9a00000b 	bls	102dc <CString::FormatV(char const*, std::__va_list)+0x734>
   102ac:	e2441001 	sub	r1, r4, #1
   102b0:	e1a0000b 	mov	r0, fp
   102b4:	ebfffc54 	bl	f40c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   102b8:	e2444002 	sub	r4, r4, #2
   102bc:	e59b300c 	ldr	r3, [fp, #12]
   102c0:	e2444001 	sub	r4, r4, #1
   102c4:	e2832001 	add	r2, r3, #1
   102c8:	e58b200c 	str	r2, [fp, #12]
   102cc:	e3a02020 	mov	r2, #32
   102d0:	e3740001 	cmn	r4, #1
   102d4:	e5c32000 	strb	r2, [r3]
   102d8:	1afffff7 	bne	102bc <CString::FormatV(char const*, std::__va_list)+0x714>
   102dc:	e58d6000 	str	r6, [sp]
   102e0:	eafffee0 	b	fe68 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   102e4:	e28d1010 	add	r1, sp, #16
   102e8:	e1a0000b 	mov	r0, fp
   102ec:	ebfffcec 	bl	f6a4 <CString::PutString(char const*)>
   102f0:	e1560004 	cmp	r6, r4
   102f4:	2afffedb 	bcs	fe68 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   102f8:	e0444006 	sub	r4, r4, r6
   102fc:	e1a01004 	mov	r1, r4
   10300:	e1a0000b 	mov	r0, fp
   10304:	ebfffc40 	bl	f40c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   10308:	e2443001 	sub	r3, r4, #1
   1030c:	e59b200c 	ldr	r2, [fp, #12]
   10310:	e2433001 	sub	r3, r3, #1
   10314:	e2821001 	add	r1, r2, #1
   10318:	e58b100c 	str	r1, [fp, #12]
   1031c:	e3a01020 	mov	r1, #32
   10320:	e3730001 	cmn	r3, #1
   10324:	e5c21000 	strb	r1, [r2]
   10328:	1afffff7 	bne	1030c <CString::FormatV(char const*, std::__va_list)+0x764>
   1032c:	eafffecd 	b	fe68 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   10330:	e1a01008 	mov	r1, r8
   10334:	e1a0000b 	mov	r0, fp
   10338:	ebfffcd9 	bl	f6a4 <CString::PutString(char const*)>
   1033c:	e1570004 	cmp	r7, r4
   10340:	2affffe5 	bcs	102dc <CString::FormatV(char const*, std::__va_list)+0x734>
   10344:	e0444007 	sub	r4, r4, r7
   10348:	e1a01004 	mov	r1, r4
   1034c:	e1a0000b 	mov	r0, fp
   10350:	ebfffc2d 	bl	f40c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   10354:	e2443001 	sub	r3, r4, #1
   10358:	e59b200c 	ldr	r2, [fp, #12]
   1035c:	e2433001 	sub	r3, r3, #1
   10360:	e2821001 	add	r1, r2, #1
   10364:	e58b100c 	str	r1, [fp, #12]
   10368:	e3a01020 	mov	r1, #32
   1036c:	e3730001 	cmn	r3, #1
   10370:	e5c21000 	strb	r1, [r2]
   10374:	1afffff7 	bne	10358 <CString::FormatV(char const*, std::__va_list)+0x7b0>
   10378:	eaffffd7 	b	102dc <CString::FormatV(char const*, std::__va_list)+0x734>
   1037c:	e59d300c 	ldr	r3, [sp, #12]
   10380:	e3530000 	cmp	r3, #0
   10384:	1a00001e 	bne	10404 <CString::FormatV(char const*, std::__va_list)+0x85c>
   10388:	e1580004 	cmp	r8, r4
   1038c:	2afffeb2 	bcs	fe5c <CString::FormatV(char const*, std::__va_list)+0x2b4>
   10390:	e0444008 	sub	r4, r4, r8
   10394:	e1a0000b 	mov	r0, fp
   10398:	e1a01004 	mov	r1, r4
   1039c:	ebfffc1a 	bl	f40c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   103a0:	e3a00030 	mov	r0, #48	; 0x30
   103a4:	e2443001 	sub	r3, r4, #1
   103a8:	e59b200c 	ldr	r2, [fp, #12]
   103ac:	e2433001 	sub	r3, r3, #1
   103b0:	e2821001 	add	r1, r2, #1
   103b4:	e3730001 	cmn	r3, #1
   103b8:	e58b100c 	str	r1, [fp, #12]
   103bc:	e5c20000 	strb	r0, [r2]
   103c0:	1afffff8 	bne	103a8 <CString::FormatV(char const*, std::__va_list)+0x800>
   103c4:	eafffea4 	b	fe5c <CString::FormatV(char const*, std::__va_list)+0x2b4>
   103c8:	e3a01001 	mov	r1, #1
   103cc:	e1a0000b 	mov	r0, fp
   103d0:	ebfffc0d 	bl	f40c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   103d4:	e3a0202d 	mov	r2, #45	; 0x2d
   103d8:	e59b300c 	ldr	r3, [fp, #12]
   103dc:	e2831001 	add	r1, r3, #1
   103e0:	e58b100c 	str	r1, [fp, #12]
   103e4:	e5c32000 	strb	r2, [r3]
   103e8:	eafffefa 	b	ffd8 <CString::FormatV(char const*, std::__va_list)+0x430>
   103ec:	e1a09006 	mov	r9, r6
   103f0:	e3a0a001 	mov	sl, #1
   103f4:	eafffed8 	b	ff5c <CString::FormatV(char const*, std::__va_list)+0x3b4>
   103f8:	e1a03006 	mov	r3, r6
   103fc:	e3a0a001 	mov	sl, #1
   10400:	eafffe58 	b	fd68 <CString::FormatV(char const*, std::__va_list)+0x1c0>
   10404:	e3a01001 	mov	r1, #1
   10408:	e1a0000b 	mov	r0, fp
   1040c:	ebfffbfe 	bl	f40c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   10410:	e3a0202d 	mov	r2, #45	; 0x2d
   10414:	e59b300c 	ldr	r3, [fp, #12]
   10418:	e2831001 	add	r1, r3, #1
   1041c:	e58b100c 	str	r1, [fp, #12]
   10420:	e5c32000 	strb	r2, [r3]
   10424:	eaffffd7 	b	10388 <CString::FormatV(char const*, std::__va_list)+0x7e0>
   10428:	cccccccd 	.word	0xcccccccd

0001042c <CString::Format(char const*, ...)>:
   1042c:	e92d000e 	push	{r1, r2, r3}
   10430:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   10434:	e24dd008 	sub	sp, sp, #8
   10438:	e28d3010 	add	r3, sp, #16
   1043c:	e1a02003 	mov	r2, r3
   10440:	e59d100c 	ldr	r1, [sp, #12]
   10444:	e58d3004 	str	r3, [sp, #4]
   10448:	ebfffdd6 	bl	fba8 <CString::FormatV(char const*, std::__va_list)>
   1044c:	e28dd008 	add	sp, sp, #8
   10450:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   10454:	e28dd00c 	add	sp, sp, #12
   10458:	e12fff1e 	bx	lr

0001045c <__aeabi_atexit>:
   1045c:	e12fff1e 	bx	lr

00010460 <halt>:
   10460:	f10c0080 	cpsid	i
   10464:	f10c0040 	cpsid	f
   10468:	eafffffe 	b	10468 <halt+0x8>

0001046c <reboot>:
   1046c:	e3a03000 	mov	r3, #0
   10470:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   10474:	e59f3010 	ldr	r3, [pc, #16]	; 1048c <reboot+0x20>
   10478:	e59f1010 	ldr	r1, [pc, #16]	; 10490 <reboot+0x24>
   1047c:	e59f2010 	ldr	r2, [pc, #16]	; 10494 <reboot+0x28>
   10480:	e5831024 	str	r1, [r3, #36]	; 0x24
   10484:	e583201c 	str	r2, [r3, #28]
   10488:	eafffffe 	b	10488 <reboot+0x1c>
   1048c:	20100000 	.word	0x20100000
   10490:	5a000001 	.word	0x5a000001
   10494:	5a000020 	.word	0x5a000020

00010498 <sysinit>:
   10498:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   1049c:	e24dd01c 	sub	sp, sp, #28
   104a0:	f1080040 	cpsie	f
   104a4:	ee113f50 	mrc	15, 0, r3, cr1, cr0, {2}
   104a8:	e383360f 	orr	r3, r3, #15728640	; 0xf00000
   104ac:	ee013f50 	mcr	15, 0, r3, cr1, cr0, {2}
   104b0:	e3a02000 	mov	r2, #0
   104b4:	ee072f95 	mcr	15, 0, r2, cr7, cr5, {4}
   104b8:	e3a03101 	mov	r3, #1073741824	; 0x40000000
   104bc:	eee83a10 	vmsr	fpexc, r3
   104c0:	e3a03402 	mov	r3, #33554432	; 0x2000000
   104c4:	eee13a10 	vmsr	fpscr, r3
   104c8:	e59f3068 	ldr	r3, [pc, #104]	; 10538 <sysinit+0xa0>
   104cc:	e59f1068 	ldr	r1, [pc, #104]	; 1053c <sysinit+0xa4>
   104d0:	e1530001 	cmp	r3, r1
   104d4:	2a000002 	bcs	104e4 <sysinit+0x4c>
   104d8:	e4c32001 	strb	r2, [r3], #1
   104dc:	e1530001 	cmp	r3, r1
   104e0:	1afffffc 	bne	104d8 <sysinit+0x40>
   104e4:	e1a0000d 	mov	r0, sp
   104e8:	ebfff2e9 	bl	d094 <CMachineInfo::CMachineInfo()>
   104ec:	e59f504c 	ldr	r5, [pc, #76]	; 10540 <sysinit+0xa8>
   104f0:	e59f304c 	ldr	r3, [pc, #76]	; 10544 <sysinit+0xac>
   104f4:	e1550003 	cmp	r5, r3
   104f8:	2a000009 	bcs	10524 <sysinit+0x8c>
   104fc:	e1e06005 	mvn	r6, r5
   10500:	e3a04000 	mov	r4, #0
   10504:	e0866003 	add	r6, r6, r3
   10508:	e1a06126 	lsr	r6, r6, #2
   1050c:	e2866001 	add	r6, r6, #1
   10510:	e2844001 	add	r4, r4, #1
   10514:	e4953004 	ldr	r3, [r5], #4
   10518:	e12fff33 	blx	r3
   1051c:	e1540006 	cmp	r4, r6
   10520:	1afffffa 	bne	10510 <sysinit+0x78>
   10524:	ebffdecf 	bl	8068 <main>
   10528:	e3500001 	cmp	r0, #1
   1052c:	0a000000 	beq	10534 <sysinit+0x9c>
   10530:	ebffffca 	bl	10460 <halt>
   10534:	ebffffcc 	bl	1046c <reboot>
   10538:	00015e80 	.word	0x00015e80
   1053c:	00015f44 	.word	0x00015f44
   10540:	00015d70 	.word	0x00015d70
   10544:	00015d80 	.word	0x00015d80

00010548 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]>:
   10548:	e2800001 	add	r0, r0, #1
   1054c:	e3a03000 	mov	r3, #0
   10550:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   10554:	e59f3020 	ldr	r3, [pc, #32]	; 1057c <CTimer::SimpleusDelay(unsigned int) [clone .part.0]+0x34>
   10558:	e1a01003 	mov	r1, r3
   1055c:	e5932004 	ldr	r2, [r3, #4]
   10560:	e5913004 	ldr	r3, [r1, #4]
   10564:	e0433002 	sub	r3, r3, r2
   10568:	e1500003 	cmp	r0, r3
   1056c:	8afffffb 	bhi	10560 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]+0x18>
   10570:	e3a03000 	mov	r3, #0
   10574:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   10578:	e12fff1e 	bx	lr
   1057c:	20003000 	.word	0x20003000

00010580 <CTimer::CTimer(CInterruptSystem*)>:
   10580:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   10584:	e3a05000 	mov	r5, #0
   10588:	e3a07001 	mov	r7, #1
   1058c:	e1a04000 	mov	r4, r0
   10590:	e59f605c 	ldr	r6, [pc, #92]	; 105f4 <CTimer::CTimer(CInterruptSystem*)+0x74>
   10594:	e5805004 	str	r5, [r0, #4]
   10598:	e5801000 	str	r1, [r0]
   1059c:	e5805008 	str	r5, [r0, #8]
   105a0:	e5805014 	str	r5, [r0, #20]
   105a4:	e5807010 	str	r7, [r0, #16]
   105a8:	e580500c 	str	r5, [r0, #12]
   105ac:	e2800018 	add	r0, r0, #24
   105b0:	eb000be2 	bl	13540 <CPtrList::CPtrList()>
   105b4:	e5961000 	ldr	r1, [r6]
   105b8:	e59f2038 	ldr	r2, [pc, #56]	; 105f8 <CTimer::CTimer(CInterruptSystem*)+0x78>
   105bc:	e59f3038 	ldr	r3, [pc, #56]	; 105fc <CTimer::CTimer(CInterruptSystem*)+0x7c>
   105c0:	e1510005 	cmp	r1, r5
   105c4:	e584701c 	str	r7, [r4, #28]
   105c8:	e5845028 	str	r5, [r4, #40]	; 0x28
   105cc:	e5842020 	str	r2, [r4, #32]
   105d0:	e5843024 	str	r3, [r4, #36]	; 0x24
   105d4:	0a000003 	beq	105e8 <CTimer::CTimer(CInterruptSystem*)+0x68>
   105d8:	e3a0203d 	mov	r2, #61	; 0x3d
   105dc:	e59f101c 	ldr	r1, [pc, #28]	; 10600 <CTimer::CTimer(CInterruptSystem*)+0x80>
   105e0:	e59f001c 	ldr	r0, [pc, #28]	; 10604 <CTimer::CTimer(CInterruptSystem*)+0x84>
   105e4:	ebffe7bb 	bl	a4d8 <assertion_failed>
   105e8:	e5864000 	str	r4, [r6]
   105ec:	e1a00004 	mov	r0, r4
   105f0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   105f4:	00015ebc 	.word	0x00015ebc
   105f8:	00055730 	.word	0x00055730
   105fc:	0000015e 	.word	0x0000015e
   10600:	00014904 	.word	0x00014904
   10604:	00014910 	.word	0x00014910

00010608 <CTimer::~CTimer()>:
   10608:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1060c:	e1a0a000 	mov	sl, r0
   10610:	e5900000 	ldr	r0, [r0]
   10614:	e3500000 	cmp	r0, #0
   10618:	0a000028 	beq	106c0 <CTimer::~CTimer()+0xb8>
   1061c:	e3a01003 	mov	r1, #3
   10620:	ebffee77 	bl	c004 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   10624:	e3a0904b 	mov	r9, #75	; 0x4b
   10628:	e59f70a8 	ldr	r7, [pc, #168]	; 106d8 <CTimer::~CTimer()+0xd0>
   1062c:	e59f60a8 	ldr	r6, [pc, #168]	; 106dc <CTimer::~CTimer()+0xd4>
   10630:	e59f80a8 	ldr	r8, [pc, #168]	; 106e0 <CTimer::~CTimer()+0xd8>
   10634:	e28a4018 	add	r4, sl, #24
   10638:	ea000011 	b	10684 <CTimer::~CTimer()+0x7c>
   1063c:	e1a01005 	mov	r1, r5
   10640:	e1a00004 	mov	r0, r4
   10644:	eb000be5 	bl	135e0 <CPtrList::GetPtr(TPtrListElement*)>
   10648:	e250b000 	subs	fp, r0, #0
   1064c:	0a000016 	beq	106ac <CTimer::~CTimer()+0xa4>
   10650:	e59b3000 	ldr	r3, [fp]
   10654:	e1530006 	cmp	r3, r6
   10658:	0a000003 	beq	1066c <CTimer::~CTimer()+0x64>
   1065c:	e1a02009 	mov	r2, r9
   10660:	e1a01007 	mov	r1, r7
   10664:	e1a00008 	mov	r0, r8
   10668:	ebffe79a 	bl	a4d8 <assertion_failed>
   1066c:	e1a01005 	mov	r1, r5
   10670:	e1a00004 	mov	r0, r4
   10674:	eb000c6e 	bl	13834 <CPtrList::Remove(TPtrListElement*)>
   10678:	e1a0000b 	mov	r0, fp
   1067c:	e3a01014 	mov	r1, #20
   10680:	eb000793 	bl	124d4 <operator delete(void*, unsigned int)>
   10684:	e1a00004 	mov	r0, r4
   10688:	eb000bbc 	bl	13580 <CPtrList::GetFirst()>
   1068c:	e2505000 	subs	r5, r0, #0
   10690:	1affffe9 	bne	1063c <CTimer::~CTimer()+0x34>
   10694:	e59f3048 	ldr	r3, [pc, #72]	; 106e4 <CTimer::~CTimer()+0xdc>
   10698:	e1a00004 	mov	r0, r4
   1069c:	e5835000 	str	r5, [r3]
   106a0:	eb000ba9 	bl	1354c <CPtrList::~CPtrList()>
   106a4:	e1a0000a 	mov	r0, sl
   106a8:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   106ac:	e3a0204a 	mov	r2, #74	; 0x4a
   106b0:	e1a01007 	mov	r1, r7
   106b4:	e59f002c 	ldr	r0, [pc, #44]	; 106e8 <CTimer::~CTimer()+0xe0>
   106b8:	ebffe786 	bl	a4d8 <assertion_failed>
   106bc:	eaffffe3 	b	10650 <CTimer::~CTimer()+0x48>
   106c0:	e59f0024 	ldr	r0, [pc, #36]	; 106ec <CTimer::~CTimer()+0xe4>
   106c4:	e3a02043 	mov	r2, #67	; 0x43
   106c8:	e59f1008 	ldr	r1, [pc, #8]	; 106d8 <CTimer::~CTimer()+0xd0>
   106cc:	ebffe781 	bl	a4d8 <assertion_failed>
   106d0:	e59a0000 	ldr	r0, [sl]
   106d4:	eaffffd0 	b	1061c <CTimer::~CTimer()+0x14>
   106d8:	00014904 	.word	0x00014904
   106dc:	4b544d43 	.word	0x4b544d43
   106e0:	0001492c 	.word	0x0001492c
   106e4:	00015ebc 	.word	0x00015ebc
   106e8:	00014920 	.word	0x00014920
   106ec:	00013b18 	.word	0x00013b18

000106f0 <CTimer::SetTimeZone(int)>:
   106f0:	e59f2018 	ldr	r2, [pc, #24]	; 10710 <CTimer::SetTimeZone(int)+0x20>
   106f4:	e2813e59 	add	r3, r1, #1424	; 0x590
   106f8:	e283300f 	add	r3, r3, #15
   106fc:	e1530002 	cmp	r3, r2
   10700:	95801014 	strls	r1, [r0, #20]
   10704:	93a00001 	movls	r0, #1
   10708:	83a00000 	movhi	r0, #0
   1070c:	e12fff1e 	bx	lr
   10710:	00000b3e 	.word	0x00000b3e

00010714 <CTimer::GetTimeZone() const>:
   10714:	e5900014 	ldr	r0, [r0, #20]
   10718:	e12fff1e 	bx	lr

0001071c <CTimer::SetTime(unsigned int, bool)>:
   1071c:	e3520000 	cmp	r2, #0
   10720:	e92d4070 	push	{r4, r5, r6, lr}
   10724:	e1a04000 	mov	r4, r0
   10728:	e1a05001 	mov	r5, r1
   1072c:	1a000004 	bne	10744 <CTimer::SetTime(unsigned int, bool)+0x28>
   10730:	e5903014 	ldr	r3, [r0, #20]
   10734:	e0633203 	rsb	r3, r3, r3, lsl #4
   10738:	e1b03103 	lsls	r3, r3, #2
   1073c:	4a00000e 	bmi	1077c <CTimer::SetTime(unsigned int, bool)+0x60>
   10740:	e0855003 	add	r5, r5, r3
   10744:	e5940010 	ldr	r0, [r4, #16]
   10748:	e3500000 	cmp	r0, #0
   1074c:	1a000002 	bne	1075c <CTimer::SetTime(unsigned int, bool)+0x40>
   10750:	e3a00001 	mov	r0, #1
   10754:	e584500c 	str	r5, [r4, #12]
   10758:	e8bd8070 	pop	{r4, r5, r6, pc}
   1075c:	eb0006fe 	bl	1235c <EnterCritical>
   10760:	e5943010 	ldr	r3, [r4, #16]
   10764:	e584500c 	str	r5, [r4, #12]
   10768:	e3530000 	cmp	r3, #0
   1076c:	0a000007 	beq	10790 <CTimer::SetTime(unsigned int, bool)+0x74>
   10770:	eb000726 	bl	12410 <LeaveCritical>
   10774:	e3a00001 	mov	r0, #1
   10778:	e8bd8070 	pop	{r4, r5, r6, pc}
   1077c:	e2631000 	rsb	r1, r3, #0
   10780:	e1510005 	cmp	r1, r5
   10784:	daffffed 	ble	10740 <CTimer::SetTime(unsigned int, bool)+0x24>
   10788:	e1a00002 	mov	r0, r2
   1078c:	e8bd8070 	pop	{r4, r5, r6, pc}
   10790:	e3a00001 	mov	r0, #1
   10794:	e8bd8070 	pop	{r4, r5, r6, pc}

00010798 <CTimer::GetClockTicks()>:
   10798:	e3a03000 	mov	r3, #0
   1079c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   107a0:	e59f2008 	ldr	r2, [pc, #8]	; 107b0 <CTimer::GetClockTicks()+0x18>
   107a4:	e5920004 	ldr	r0, [r2, #4]
   107a8:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   107ac:	e12fff1e 	bx	lr
   107b0:	20003000 	.word	0x20003000

000107b4 <CTimer::GetTicks() const>:
   107b4:	e5900004 	ldr	r0, [r0, #4]
   107b8:	e12fff1e 	bx	lr

000107bc <CTimer::GetUptime() const>:
   107bc:	e5900008 	ldr	r0, [r0, #8]
   107c0:	e12fff1e 	bx	lr

000107c4 <CTimer::GetTime() const>:
   107c4:	e590000c 	ldr	r0, [r0, #12]
   107c8:	e12fff1e 	bx	lr

000107cc <CTimer::GetLocalTime(unsigned int*, unsigned int*)>:
   107cc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   107d0:	e1a04000 	mov	r4, r0
   107d4:	e5900010 	ldr	r0, [r0, #16]
   107d8:	e1a06001 	mov	r6, r1
   107dc:	e3500000 	cmp	r0, #0
   107e0:	e1a05002 	mov	r5, r2
   107e4:	1a000011 	bne	10830 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x64>
   107e8:	e594700c 	ldr	r7, [r4, #12]
   107ec:	e5944004 	ldr	r4, [r4, #4]
   107f0:	e3560000 	cmp	r6, #0
   107f4:	0a00001a 	beq	10864 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x98>
   107f8:	e3550000 	cmp	r5, #0
   107fc:	e5867000 	str	r7, [r6]
   10800:	0a000012 	beq	10850 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x84>
   10804:	e3a03064 	mov	r3, #100	; 0x64
   10808:	e59f2068 	ldr	r2, [pc, #104]	; 10878 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xac>
   1080c:	e59f1068 	ldr	r1, [pc, #104]	; 1087c <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb0>
   10810:	e0820492 	umull	r0, r2, r2, r4
   10814:	e1a022a2 	lsr	r2, r2, #5
   10818:	e0030293 	mul	r3, r3, r2
   1081c:	e0443003 	sub	r3, r4, r3
   10820:	e0030391 	mul	r3, r1, r3
   10824:	e3a00001 	mov	r0, #1
   10828:	e5853000 	str	r3, [r5]
   1082c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   10830:	eb0006c9 	bl	1235c <EnterCritical>
   10834:	e5943010 	ldr	r3, [r4, #16]
   10838:	e594700c 	ldr	r7, [r4, #12]
   1083c:	e3530000 	cmp	r3, #0
   10840:	e5944004 	ldr	r4, [r4, #4]
   10844:	0affffe9 	beq	107f0 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x24>
   10848:	eb0006f0 	bl	12410 <LeaveCritical>
   1084c:	eaffffe7 	b	107f0 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x24>
   10850:	e3a020dd 	mov	r2, #221	; 0xdd
   10854:	e59f1024 	ldr	r1, [pc, #36]	; 10880 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb4>
   10858:	e59f0024 	ldr	r0, [pc, #36]	; 10884 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb8>
   1085c:	ebffe71d 	bl	a4d8 <assertion_failed>
   10860:	eaffffe7 	b	10804 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x38>
   10864:	e3a020da 	mov	r2, #218	; 0xda
   10868:	e59f1010 	ldr	r1, [pc, #16]	; 10880 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb4>
   1086c:	e59f0014 	ldr	r0, [pc, #20]	; 10888 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xbc>
   10870:	ebffe718 	bl	a4d8 <assertion_failed>
   10874:	eaffffdf 	b	107f8 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x2c>
   10878:	51eb851f 	.word	0x51eb851f
   1087c:	00002710 	.word	0x00002710
   10880:	00014904 	.word	0x00014904
   10884:	00014964 	.word	0x00014964
   10888:	00014954 	.word	0x00014954

0001088c <CTimer::GetUniversalTime() const>:
   1088c:	e5903014 	ldr	r3, [r0, #20]
   10890:	e590000c 	ldr	r0, [r0, #12]
   10894:	e0633203 	rsb	r3, r3, r3, lsl #4
   10898:	e1a03103 	lsl	r3, r3, #2
   1089c:	e1530000 	cmp	r3, r0
   108a0:	d0400003 	suble	r0, r0, r3
   108a4:	c3a00000 	movgt	r0, #0
   108a8:	e12fff1e 	bx	lr

000108ac <CTimer::GetUniversalTime(unsigned int*, unsigned int*)>:
   108ac:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   108b0:	e1a05000 	mov	r5, r0
   108b4:	e5900010 	ldr	r0, [r0, #16]
   108b8:	e1a09001 	mov	r9, r1
   108bc:	e3500000 	cmp	r0, #0
   108c0:	e1a07002 	mov	r7, r2
   108c4:	1a000019 	bne	10930 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x84>
   108c8:	e595600c 	ldr	r6, [r5, #12]
   108cc:	e5958004 	ldr	r8, [r5, #4]
   108d0:	e5953014 	ldr	r3, [r5, #20]
   108d4:	e0633203 	rsb	r3, r3, r3, lsl #4
   108d8:	e1a04103 	lsl	r4, r3, #2
   108dc:	e1540006 	cmp	r4, r6
   108e0:	ca000010 	bgt	10928 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x7c>
   108e4:	e3590000 	cmp	r9, #0
   108e8:	0a00001d 	beq	10964 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xb8>
   108ec:	e0464004 	sub	r4, r6, r4
   108f0:	e3570000 	cmp	r7, #0
   108f4:	e5894000 	str	r4, [r9]
   108f8:	0a000014 	beq	10950 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xa4>
   108fc:	e3a03064 	mov	r3, #100	; 0x64
   10900:	e59f2070 	ldr	r2, [pc, #112]	; 10978 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xcc>
   10904:	e59f1070 	ldr	r1, [pc, #112]	; 1097c <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd0>
   10908:	e0820892 	umull	r0, r2, r2, r8
   1090c:	e1a022a2 	lsr	r2, r2, #5
   10910:	e0030293 	mul	r3, r3, r2
   10914:	e0483003 	sub	r3, r8, r3
   10918:	e0030391 	mul	r3, r1, r3
   1091c:	e3a00001 	mov	r0, #1
   10920:	e5873000 	str	r3, [r7]
   10924:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10928:	e3a00000 	mov	r0, #0
   1092c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10930:	eb000689 	bl	1235c <EnterCritical>
   10934:	e5953010 	ldr	r3, [r5, #16]
   10938:	e595600c 	ldr	r6, [r5, #12]
   1093c:	e3530000 	cmp	r3, #0
   10940:	e5958004 	ldr	r8, [r5, #4]
   10944:	0affffe1 	beq	108d0 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x24>
   10948:	eb0006b0 	bl	12410 <LeaveCritical>
   1094c:	eaffffdf 	b	108d0 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x24>
   10950:	e59f2028 	ldr	r2, [pc, #40]	; 10980 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd4>
   10954:	e59f1028 	ldr	r1, [pc, #40]	; 10984 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd8>
   10958:	e59f0028 	ldr	r0, [pc, #40]	; 10988 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xdc>
   1095c:	ebffe6dd 	bl	a4d8 <assertion_failed>
   10960:	eaffffe5 	b	108fc <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x50>
   10964:	e3a020ff 	mov	r2, #255	; 0xff
   10968:	e59f1014 	ldr	r1, [pc, #20]	; 10984 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd8>
   1096c:	e59f0018 	ldr	r0, [pc, #24]	; 1098c <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xe0>
   10970:	ebffe6d8 	bl	a4d8 <assertion_failed>
   10974:	eaffffdc 	b	108ec <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x40>
   10978:	51eb851f 	.word	0x51eb851f
   1097c:	00002710 	.word	0x00002710
   10980:	00000102 	.word	0x00000102
   10984:	00014904 	.word	0x00014904
   10988:	00014964 	.word	0x00014964
   1098c:	00014954 	.word	0x00014954

00010990 <CTimer::GetTimeString()>:
   10990:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10994:	e1a05000 	mov	r5, r0
   10998:	e5900010 	ldr	r0, [r0, #16]
   1099c:	e24dd014 	sub	sp, sp, #20
   109a0:	e3500000 	cmp	r0, #0
   109a4:	1a000065 	bne	10b40 <CTimer::GetTimeString()+0x1b0>
   109a8:	e595400c 	ldr	r4, [r5, #12]
   109ac:	e5959004 	ldr	r9, [r5, #4]
   109b0:	e1940009 	orrs	r0, r4, r9
   109b4:	0a00003e 	beq	10ab4 <CTimer::GetTimeString()+0x124>
   109b8:	e59f61a0 	ldr	r6, [pc, #416]	; 10b60 <CTimer::GetTimeString()+0x1d0>
   109bc:	e59f81a0 	ldr	r8, [pc, #416]	; 10b64 <CTimer::GetTimeString()+0x1d4>
   109c0:	e0873496 	umull	r3, r7, r6, r4
   109c4:	e1a072a7 	lsr	r7, r7, #5
   109c8:	e0863796 	umull	r3, r6, r6, r7
   109cc:	e59f3194 	ldr	r3, [pc, #404]	; 10b68 <CTimer::GetTimeString()+0x1d8>
   109d0:	e0882498 	umull	r2, r8, r8, r4
   109d4:	e0832493 	umull	r2, r3, r3, r4
   109d8:	e1a062a6 	lsr	r6, r6, #5
   109dc:	e0666206 	rsb	r6, r6, r6, lsl #4
   109e0:	e0672207 	rsb	r2, r7, r7, lsl #4
   109e4:	e0476106 	sub	r6, r7, r6, lsl #2
   109e8:	e3a0a064 	mov	sl, #100	; 0x64
   109ec:	e0447102 	sub	r7, r4, r2, lsl #2
   109f0:	e3a0be19 	mov	fp, #400	; 0x190
   109f4:	e59f5170 	ldr	r5, [pc, #368]	; 10b6c <CTimer::GetTimeString()+0x1dc>
   109f8:	e59fe170 	ldr	lr, [pc, #368]	; 10b70 <CTimer::GetTimeString()+0x1e0>
   109fc:	e59fc170 	ldr	ip, [pc, #368]	; 10b74 <CTimer::GetTimeString()+0x1e4>
   10a00:	e59f0170 	ldr	r0, [pc, #368]	; 10b78 <CTimer::GetTimeString()+0x1e8>
   10a04:	e1a085a8 	lsr	r8, r8, #11
   10a08:	e1a04823 	lsr	r4, r3, #16
   10a0c:	ea00000a 	b	10a3c <CTimer::GetTimeString()+0xac>
   10a10:	e001019b 	mul	r1, fp, r1
   10a14:	e0451001 	sub	r1, r5, r1
   10a18:	e16f1f11 	clz	r1, r1
   10a1c:	e1a012a1 	lsr	r1, r1, #5
   10a20:	e3510000 	cmp	r1, #0
   10a24:	01a0300c 	moveq	r3, ip
   10a28:	11a03000 	movne	r3, r0
   10a2c:	e1540003 	cmp	r4, r3
   10a30:	3a000021 	bcc	10abc <CTimer::GetTimeString()+0x12c>
   10a34:	e0444003 	sub	r4, r4, r3
   10a38:	e2855001 	add	r5, r5, #1
   10a3c:	e081359e 	umull	r3, r1, lr, r5
   10a40:	e1a032a1 	lsr	r3, r1, #5
   10a44:	e003039a 	mul	r3, sl, r3
   10a48:	e1550003 	cmp	r5, r3
   10a4c:	e1a013a1 	lsr	r1, r1, #7
   10a50:	0affffee 	beq	10a10 <CTimer::GetTimeString()+0x80>
   10a54:	e3150003 	tst	r5, #3
   10a58:	03a01001 	moveq	r1, #1
   10a5c:	13a01000 	movne	r1, #0
   10a60:	eaffffee 	b	10a20 <CTimer::GetTimeString()+0x90>
   10a64:	e3a03064 	mov	r3, #100	; 0x64
   10a68:	e59fb100 	ldr	fp, [pc, #256]	; 10b70 <CTimer::GetTimeString()+0x1e0>
   10a6c:	e3a00010 	mov	r0, #16
   10a70:	e08b299b 	umull	r2, fp, fp, r9
   10a74:	e1a0b2ab 	lsr	fp, fp, #5
   10a78:	e00b0b93 	mul	fp, r3, fp
   10a7c:	eb000690 	bl	124c4 <operator new(unsigned int)>
   10a80:	e049b00b 	sub	fp, r9, fp
   10a84:	e1a09000 	mov	r9, r0
   10a88:	ebfffa79 	bl	f474 <CString::CString()>
   10a8c:	e59f30e8 	ldr	r3, [pc, #232]	; 10b7c <CTimer::GetTimeString()+0x1ec>
   10a90:	e1550003 	cmp	r5, r3
   10a94:	8a000018 	bhi	10afc <CTimer::GetTimeString()+0x16c>
   10a98:	e1a00009 	mov	r0, r9
   10a9c:	e88d0880 	stm	sp, {r7, fp}
   10aa0:	e1a03006 	mov	r3, r6
   10aa4:	e1a02008 	mov	r2, r8
   10aa8:	e59f10d0 	ldr	r1, [pc, #208]	; 10b80 <CTimer::GetTimeString()+0x1f0>
   10aac:	ebfffe5e 	bl	1042c <CString::Format(char const*, ...)>
   10ab0:	e1a00009 	mov	r0, r9
   10ab4:	e28dd014 	add	sp, sp, #20
   10ab8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10abc:	e3a0a000 	mov	sl, #0
   10ac0:	e3a0001d 	mov	r0, #29
   10ac4:	e59f20b8 	ldr	r2, [pc, #184]	; 10b84 <CTimer::GetTimeString()+0x1f4>
   10ac8:	ea000004 	b	10ae0 <CTimer::GetTimeString()+0x150>
   10acc:	e1a03000 	mov	r3, r0
   10ad0:	e1540003 	cmp	r4, r3
   10ad4:	3affffe2 	bcc	10a64 <CTimer::GetTimeString()+0xd4>
   10ad8:	e0444003 	sub	r4, r4, r3
   10adc:	e28aa001 	add	sl, sl, #1
   10ae0:	e35a0001 	cmp	sl, #1
   10ae4:	13a03000 	movne	r3, #0
   10ae8:	02013001 	andeq	r3, r1, #1
   10aec:	e3530000 	cmp	r3, #0
   10af0:	1afffff5 	bne	10acc <CTimer::GetTimeString()+0x13c>
   10af4:	e792310a 	ldr	r3, [r2, sl, lsl #2]
   10af8:	eafffff4 	b	10ad0 <CTimer::GetTimeString()+0x140>
   10afc:	e59f3084 	ldr	r3, [pc, #132]	; 10b88 <CTimer::GetTimeString()+0x1f8>
   10b00:	e58db00c 	str	fp, [sp, #12]
   10b04:	e0832893 	umull	r2, r3, r3, r8
   10b08:	e1a03223 	lsr	r3, r3, #4
   10b0c:	e0833083 	add	r3, r3, r3, lsl #1
   10b10:	e59f2074 	ldr	r2, [pc, #116]	; 10b8c <CTimer::GetTimeString()+0x1fc>
   10b14:	e0488183 	sub	r8, r8, r3, lsl #3
   10b18:	e792210a 	ldr	r2, [r2, sl, lsl #2]
   10b1c:	e1a00009 	mov	r0, r9
   10b20:	e98d00c0 	stmib	sp, {r6, r7}
   10b24:	e2843001 	add	r3, r4, #1
   10b28:	e58d8000 	str	r8, [sp]
   10b2c:	e59f105c 	ldr	r1, [pc, #92]	; 10b90 <CTimer::GetTimeString()+0x200>
   10b30:	ebfffe3d 	bl	1042c <CString::Format(char const*, ...)>
   10b34:	e1a00009 	mov	r0, r9
   10b38:	e28dd014 	add	sp, sp, #20
   10b3c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10b40:	eb000605 	bl	1235c <EnterCritical>
   10b44:	e5953010 	ldr	r3, [r5, #16]
   10b48:	e595400c 	ldr	r4, [r5, #12]
   10b4c:	e3530000 	cmp	r3, #0
   10b50:	e5959004 	ldr	r9, [r5, #4]
   10b54:	0affff95 	beq	109b0 <CTimer::GetTimeString()+0x20>
   10b58:	eb00062c 	bl	12410 <LeaveCritical>
   10b5c:	eaffff93 	b	109b0 <CTimer::GetTimeString()+0x20>
   10b60:	88888889 	.word	0x88888889
   10b64:	91a2b3c5 	.word	0x91a2b3c5
   10b68:	c22e4507 	.word	0xc22e4507
   10b6c:	000007b2 	.word	0x000007b2
   10b70:	51eb851f 	.word	0x51eb851f
   10b74:	0000016d 	.word	0x0000016d
   10b78:	0000016e 	.word	0x0000016e
   10b7c:	000007b7 	.word	0x000007b7
   10b80:	00014994 	.word	0x00014994
   10b84:	000148cc 	.word	0x000148cc
   10b88:	aaaaaaab 	.word	0xaaaaaaab
   10b8c:	00015d80 	.word	0x00015d80
   10b90:	00014978 	.word	0x00014978

00010b94 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>:
   10b94:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10b98:	e1a09000 	mov	r9, r0
   10b9c:	e24dd00c 	sub	sp, sp, #12
   10ba0:	e58d0004 	str	r0, [sp, #4]
   10ba4:	e1a04002 	mov	r4, r2
   10ba8:	e3a00014 	mov	r0, #20
   10bac:	e1a06001 	mov	r6, r1
   10bb0:	e1a07003 	mov	r7, r3
   10bb4:	e59d5030 	ldr	r5, [sp, #48]	; 0x30
   10bb8:	eb000641 	bl	124c4 <operator new(unsigned int)>
   10bbc:	e5991004 	ldr	r1, [r9, #4]
   10bc0:	e3540000 	cmp	r4, #0
   10bc4:	e1a08000 	mov	r8, r0
   10bc8:	e0816006 	add	r6, r1, r6
   10bcc:	0a00003d 	beq	10cc8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x134>
   10bd0:	e59d3004 	ldr	r3, [sp, #4]
   10bd4:	e59f2100 	ldr	r2, [pc, #256]	; 10cdc <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x148>
   10bd8:	e593001c 	ldr	r0, [r3, #28]
   10bdc:	e98800d0 	stmib	r8, {r4, r6, r7}
   10be0:	e3500000 	cmp	r0, #0
   10be4:	e5885010 	str	r5, [r8, #16]
   10be8:	e5882000 	str	r2, [r8]
   10bec:	1a000033 	bne	10cc0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x12c>
   10bf0:	e59d3004 	ldr	r3, [sp, #4]
   10bf4:	e2835018 	add	r5, r3, #24
   10bf8:	e1a00005 	mov	r0, r5
   10bfc:	eb000a5f 	bl	13580 <CPtrList::GetFirst()>
   10c00:	e2504000 	subs	r4, r0, #0
   10c04:	0a000028 	beq	10cac <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x118>
   10c08:	e59f90d0 	ldr	r9, [pc, #208]	; 10ce0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x14c>
   10c0c:	e59f70c8 	ldr	r7, [pc, #200]	; 10cdc <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x148>
   10c10:	e59fb0cc 	ldr	fp, [pc, #204]	; 10ce4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x150>
   10c14:	ea000010 	b	10c5c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xc8>
   10c18:	e59a3000 	ldr	r3, [sl]
   10c1c:	e1530007 	cmp	r3, r7
   10c20:	0a000003 	beq	10c34 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xa0>
   10c24:	e1a0200b 	mov	r2, fp
   10c28:	e1a01009 	mov	r1, r9
   10c2c:	e59f00b4 	ldr	r0, [pc, #180]	; 10ce8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x154>
   10c30:	ebffe628 	bl	a4d8 <assertion_failed>
   10c34:	e59a3008 	ldr	r3, [sl, #8]
   10c38:	e1a01004 	mov	r1, r4
   10c3c:	e0433006 	sub	r3, r3, r6
   10c40:	e3530000 	cmp	r3, #0
   10c44:	e1a00005 	mov	r0, r5
   10c48:	ca00000d 	bgt	10c84 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xf0>
   10c4c:	eb000a4d 	bl	13588 <CPtrList::GetNext(TPtrListElement*)>
   10c50:	e3500000 	cmp	r0, #0
   10c54:	0a000014 	beq	10cac <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x118>
   10c58:	e1a04000 	mov	r4, r0
   10c5c:	e1a01004 	mov	r1, r4
   10c60:	e1a00005 	mov	r0, r5
   10c64:	eb000a5d 	bl	135e0 <CPtrList::GetPtr(TPtrListElement*)>
   10c68:	e250a000 	subs	sl, r0, #0
   10c6c:	1affffe9 	bne	10c18 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x84>
   10c70:	e59f2074 	ldr	r2, [pc, #116]	; 10cec <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x158>
   10c74:	e1a01009 	mov	r1, r9
   10c78:	e59f0070 	ldr	r0, [pc, #112]	; 10cf0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x15c>
   10c7c:	ebffe615 	bl	a4d8 <assertion_failed>
   10c80:	eaffffe4 	b	10c18 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x84>
   10c84:	e1a02008 	mov	r2, r8
   10c88:	eb000a6a 	bl	13638 <CPtrList::InsertBefore(TPtrListElement*, void*)>
   10c8c:	e59d3004 	ldr	r3, [sp, #4]
   10c90:	e593301c 	ldr	r3, [r3, #28]
   10c94:	e3530000 	cmp	r3, #0
   10c98:	0a000000 	beq	10ca0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x10c>
   10c9c:	eb0005db 	bl	12410 <LeaveCritical>
   10ca0:	e1a00008 	mov	r0, r8
   10ca4:	e28dd00c 	add	sp, sp, #12
   10ca8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10cac:	e1a01004 	mov	r1, r4
   10cb0:	e1a00005 	mov	r0, r5
   10cb4:	e1a02008 	mov	r2, r8
   10cb8:	eb000a9f 	bl	1373c <CPtrList::InsertAfter(TPtrListElement*, void*)>
   10cbc:	eafffff2 	b	10c8c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xf8>
   10cc0:	eb0005a5 	bl	1235c <EnterCritical>
   10cc4:	eaffffc9 	b	10bf0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x5c>
   10cc8:	e59f2024 	ldr	r2, [pc, #36]	; 10cf4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x160>
   10ccc:	e59f100c 	ldr	r1, [pc, #12]	; 10ce0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x14c>
   10cd0:	e59f0020 	ldr	r0, [pc, #32]	; 10cf8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x164>
   10cd4:	ebffe5ff 	bl	a4d8 <assertion_failed>
   10cd8:	eaffffbc 	b	10bd0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x3c>
   10cdc:	4b544d43 	.word	0x4b544d43
   10ce0:	00014904 	.word	0x00014904
   10ce4:	0000016a 	.word	0x0000016a
   10ce8:	000149b8 	.word	0x000149b8
   10cec:	00000169 	.word	0x00000169
   10cf0:	000149a8 	.word	0x000149a8
   10cf4:	00000159 	.word	0x00000159
   10cf8:	000143e0 	.word	0x000143e0

00010cfc <CTimer::CancelKernelTimer(unsigned int)>:
   10cfc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   10d00:	e2514000 	subs	r4, r1, #0
   10d04:	e1a05000 	mov	r5, r0
   10d08:	0a00001f 	beq	10d8c <CTimer::CancelKernelTimer(unsigned int)+0x90>
   10d0c:	e595001c 	ldr	r0, [r5, #28]
   10d10:	e3500000 	cmp	r0, #0
   10d14:	1a00001a 	bne	10d84 <CTimer::CancelKernelTimer(unsigned int)+0x88>
   10d18:	e2856018 	add	r6, r5, #24
   10d1c:	e1a00006 	mov	r0, r6
   10d20:	e1a01004 	mov	r1, r4
   10d24:	eb000b15 	bl	13980 <CPtrList::Find(void*)>
   10d28:	e2507000 	subs	r7, r0, #0
   10d2c:	0a00000f 	beq	10d70 <CTimer::CancelKernelTimer(unsigned int)+0x74>
   10d30:	e59f3068 	ldr	r3, [pc, #104]	; 10da0 <CTimer::CancelKernelTimer(unsigned int)+0xa4>
   10d34:	e5942000 	ldr	r2, [r4]
   10d38:	e1520003 	cmp	r2, r3
   10d3c:	0a000003 	beq	10d50 <CTimer::CancelKernelTimer(unsigned int)+0x54>
   10d40:	e59f205c 	ldr	r2, [pc, #92]	; 10da4 <CTimer::CancelKernelTimer(unsigned int)+0xa8>
   10d44:	e59f105c 	ldr	r1, [pc, #92]	; 10da8 <CTimer::CancelKernelTimer(unsigned int)+0xac>
   10d48:	e59f005c 	ldr	r0, [pc, #92]	; 10dac <CTimer::CancelKernelTimer(unsigned int)+0xb0>
   10d4c:	ebffe5e1 	bl	a4d8 <assertion_failed>
   10d50:	e1a01007 	mov	r1, r7
   10d54:	e1a00006 	mov	r0, r6
   10d58:	eb000ab5 	bl	13834 <CPtrList::Remove(TPtrListElement*)>
   10d5c:	e3a03000 	mov	r3, #0
   10d60:	e1a00004 	mov	r0, r4
   10d64:	e5843000 	str	r3, [r4]
   10d68:	e3a01014 	mov	r1, #20
   10d6c:	eb0005d8 	bl	124d4 <operator delete(void*, unsigned int)>
   10d70:	e595301c 	ldr	r3, [r5, #28]
   10d74:	e3530000 	cmp	r3, #0
   10d78:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   10d7c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   10d80:	ea0005a2 	b	12410 <LeaveCritical>
   10d84:	eb000574 	bl	1235c <EnterCritical>
   10d88:	eaffffe2 	b	10d18 <CTimer::CancelKernelTimer(unsigned int)+0x1c>
   10d8c:	e59f201c 	ldr	r2, [pc, #28]	; 10db0 <CTimer::CancelKernelTimer(unsigned int)+0xb4>
   10d90:	e59f1010 	ldr	r1, [pc, #16]	; 10da8 <CTimer::CancelKernelTimer(unsigned int)+0xac>
   10d94:	e59f0018 	ldr	r0, [pc, #24]	; 10db4 <CTimer::CancelKernelTimer(unsigned int)+0xb8>
   10d98:	ebffe5ce 	bl	a4d8 <assertion_failed>
   10d9c:	eaffffda 	b	10d0c <CTimer::CancelKernelTimer(unsigned int)+0x10>
   10da0:	4b544d43 	.word	0x4b544d43
   10da4:	0000018d 	.word	0x0000018d
   10da8:	00014904 	.word	0x00014904
   10dac:	0001492c 	.word	0x0001492c
   10db0:	00000186 	.word	0x00000186
   10db4:	00014920 	.word	0x00014920

00010db8 <CTimer::PollKernelTimers()>:
   10db8:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10dbc:	e1a05000 	mov	r5, r0
   10dc0:	e590001c 	ldr	r0, [r0, #28]
   10dc4:	e3500000 	cmp	r0, #0
   10dc8:	1a00004a 	bne	10ef8 <CTimer::PollKernelTimers()+0x140>
   10dcc:	e2856018 	add	r6, r5, #24
   10dd0:	e1a00006 	mov	r0, r6
   10dd4:	eb0009e9 	bl	13580 <CPtrList::GetFirst()>
   10dd8:	e2504000 	subs	r4, r0, #0
   10ddc:	0a00003b 	beq	10ed0 <CTimer::PollKernelTimers()+0x118>
   10de0:	e59f9118 	ldr	r9, [pc, #280]	; 10f00 <CTimer::PollKernelTimers()+0x148>
   10de4:	e59f8118 	ldr	r8, [pc, #280]	; 10f04 <CTimer::PollKernelTimers()+0x14c>
   10de8:	e59fa118 	ldr	sl, [pc, #280]	; 10f08 <CTimer::PollKernelTimers()+0x150>
   10dec:	ea000010 	b	10e34 <CTimer::PollKernelTimers()+0x7c>
   10df0:	e5974004 	ldr	r4, [r7, #4]
   10df4:	e3540000 	cmp	r4, #0
   10df8:	0a00002c 	beq	10eb0 <CTimer::PollKernelTimers()+0xf8>
   10dfc:	e5972010 	ldr	r2, [r7, #16]
   10e00:	e597100c 	ldr	r1, [r7, #12]
   10e04:	e1a00007 	mov	r0, r7
   10e08:	e12fff34 	blx	r4
   10e0c:	e3a03000 	mov	r3, #0
   10e10:	e1a00007 	mov	r0, r7
   10e14:	e5873000 	str	r3, [r7]
   10e18:	e3a01014 	mov	r1, #20
   10e1c:	eb0005ac 	bl	124d4 <operator delete(void*, unsigned int)>
   10e20:	e595001c 	ldr	r0, [r5, #28]
   10e24:	e3500000 	cmp	r0, #0
   10e28:	1a000025 	bne	10ec4 <CTimer::PollKernelTimers()+0x10c>
   10e2c:	e25b4000 	subs	r4, fp, #0
   10e30:	0a000026 	beq	10ed0 <CTimer::PollKernelTimers()+0x118>
   10e34:	e1a01004 	mov	r1, r4
   10e38:	e1a00006 	mov	r0, r6
   10e3c:	eb0009e7 	bl	135e0 <CPtrList::GetPtr(TPtrListElement*)>
   10e40:	e2507000 	subs	r7, r0, #0
   10e44:	0a000026 	beq	10ee4 <CTimer::PollKernelTimers()+0x12c>
   10e48:	e5973000 	ldr	r3, [r7]
   10e4c:	e1530008 	cmp	r3, r8
   10e50:	0a000003 	beq	10e64 <CTimer::PollKernelTimers()+0xac>
   10e54:	e59f20b0 	ldr	r2, [pc, #176]	; 10f0c <CTimer::PollKernelTimers()+0x154>
   10e58:	e1a01009 	mov	r1, r9
   10e5c:	e1a0000a 	mov	r0, sl
   10e60:	ebffe59c 	bl	a4d8 <assertion_failed>
   10e64:	e5952004 	ldr	r2, [r5, #4]
   10e68:	e5973008 	ldr	r3, [r7, #8]
   10e6c:	e0433002 	sub	r3, r3, r2
   10e70:	e3530000 	cmp	r3, #0
   10e74:	ca000015 	bgt	10ed0 <CTimer::PollKernelTimers()+0x118>
   10e78:	e1a01004 	mov	r1, r4
   10e7c:	e1a00006 	mov	r0, r6
   10e80:	eb0009c0 	bl	13588 <CPtrList::GetNext(TPtrListElement*)>
   10e84:	e1a01004 	mov	r1, r4
   10e88:	e1a0b000 	mov	fp, r0
   10e8c:	e1a00006 	mov	r0, r6
   10e90:	eb000a67 	bl	13834 <CPtrList::Remove(TPtrListElement*)>
   10e94:	e595301c 	ldr	r3, [r5, #28]
   10e98:	e3530000 	cmp	r3, #0
   10e9c:	0affffd3 	beq	10df0 <CTimer::PollKernelTimers()+0x38>
   10ea0:	eb00055a 	bl	12410 <LeaveCritical>
   10ea4:	e5974004 	ldr	r4, [r7, #4]
   10ea8:	e3540000 	cmp	r4, #0
   10eac:	1affffd2 	bne	10dfc <CTimer::PollKernelTimers()+0x44>
   10eb0:	e59f2058 	ldr	r2, [pc, #88]	; 10f10 <CTimer::PollKernelTimers()+0x158>
   10eb4:	e1a01009 	mov	r1, r9
   10eb8:	e59f0054 	ldr	r0, [pc, #84]	; 10f14 <CTimer::PollKernelTimers()+0x15c>
   10ebc:	ebffe585 	bl	a4d8 <assertion_failed>
   10ec0:	eaffffcd 	b	10dfc <CTimer::PollKernelTimers()+0x44>
   10ec4:	eb000524 	bl	1235c <EnterCritical>
   10ec8:	e25b4000 	subs	r4, fp, #0
   10ecc:	1affffd8 	bne	10e34 <CTimer::PollKernelTimers()+0x7c>
   10ed0:	e595301c 	ldr	r3, [r5, #28]
   10ed4:	e3530000 	cmp	r3, #0
   10ed8:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10edc:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10ee0:	ea00054a 	b	12410 <LeaveCritical>
   10ee4:	e59f202c 	ldr	r2, [pc, #44]	; 10f18 <CTimer::PollKernelTimers()+0x160>
   10ee8:	e1a01009 	mov	r1, r9
   10eec:	e59f0028 	ldr	r0, [pc, #40]	; 10f1c <CTimer::PollKernelTimers()+0x164>
   10ef0:	ebffe578 	bl	a4d8 <assertion_failed>
   10ef4:	eaffffd3 	b	10e48 <CTimer::PollKernelTimers()+0x90>
   10ef8:	eb000517 	bl	1235c <EnterCritical>
   10efc:	eaffffb2 	b	10dcc <CTimer::PollKernelTimers()+0x14>
   10f00:	00014904 	.word	0x00014904
   10f04:	4b544d43 	.word	0x4b544d43
   10f08:	0001492c 	.word	0x0001492c
   10f0c:	000001a3 	.word	0x000001a3
   10f10:	000001b1 	.word	0x000001b1
   10f14:	000143e0 	.word	0x000143e0
   10f18:	000001a2 	.word	0x000001a2
   10f1c:	00014920 	.word	0x00014920

00010f20 <CTimer::InterruptHandler()>:
   10f20:	e92d4010 	push	{r4, lr}
   10f24:	e3a03000 	mov	r3, #0
   10f28:	e1a04000 	mov	r4, r0
   10f2c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   10f30:	e59f20e4 	ldr	r2, [pc, #228]	; 1101c <CTimer::InterruptHandler()+0xfc>
   10f34:	e5923018 	ldr	r3, [r2, #24]
   10f38:	e2833c27 	add	r3, r3, #9984	; 0x2700
   10f3c:	e2833010 	add	r3, r3, #16
   10f40:	e5823018 	str	r3, [r2, #24]
   10f44:	e5921004 	ldr	r1, [r2, #4]
   10f48:	e1530001 	cmp	r3, r1
   10f4c:	e3a01008 	mov	r1, #8
   10f50:	35923004 	ldrcc	r3, [r2, #4]
   10f54:	32833c27 	addcc	r3, r3, #9984	; 0x2700
   10f58:	32833010 	addcc	r3, r3, #16
   10f5c:	35823018 	strcc	r3, [r2, #24]
   10f60:	e59f20b4 	ldr	r2, [pc, #180]	; 1101c <CTimer::InterruptHandler()+0xfc>
   10f64:	e3a03000 	mov	r3, #0
   10f68:	e5821000 	str	r1, [r2]
   10f6c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   10f70:	e5900010 	ldr	r0, [r0, #16]
   10f74:	e1500003 	cmp	r0, r3
   10f78:	1a00001a 	bne	10fe8 <CTimer::InterruptHandler()+0xc8>
   10f7c:	e3a01064 	mov	r1, #100	; 0x64
   10f80:	e5942004 	ldr	r2, [r4, #4]
   10f84:	e59f3094 	ldr	r3, [pc, #148]	; 11020 <CTimer::InterruptHandler()+0x100>
   10f88:	e2822001 	add	r2, r2, #1
   10f8c:	e0830293 	umull	r0, r3, r3, r2
   10f90:	e1a032a3 	lsr	r3, r3, #5
   10f94:	e0030391 	mul	r3, r1, r3
   10f98:	e0523003 	subs	r3, r2, r3
   10f9c:	e5842004 	str	r2, [r4, #4]
   10fa0:	1a000007 	bne	10fc4 <CTimer::InterruptHandler()+0xa4>
   10fa4:	e5942008 	ldr	r2, [r4, #8]
   10fa8:	e2822001 	add	r2, r2, #1
   10fac:	e5842008 	str	r2, [r4, #8]
   10fb0:	e594200c 	ldr	r2, [r4, #12]
   10fb4:	e2822001 	add	r2, r2, #1
   10fb8:	e584200c 	str	r2, [r4, #12]
   10fbc:	e3530000 	cmp	r3, #0
   10fc0:	1a000006 	bne	10fe0 <CTimer::InterruptHandler()+0xc0>
   10fc4:	e1a00004 	mov	r0, r4
   10fc8:	ebffff7a 	bl	10db8 <CTimer::PollKernelTimers()>
   10fcc:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   10fd0:	e3530000 	cmp	r3, #0
   10fd4:	08bd8010 	popeq	{r4, pc}
   10fd8:	e8bd4010 	pop	{r4, lr}
   10fdc:	e12fff13 	bx	r3
   10fe0:	eb00050a 	bl	12410 <LeaveCritical>
   10fe4:	eafffff6 	b	10fc4 <CTimer::InterruptHandler()+0xa4>
   10fe8:	eb0004db 	bl	1235c <EnterCritical>
   10fec:	e3a01064 	mov	r1, #100	; 0x64
   10ff0:	e5943004 	ldr	r3, [r4, #4]
   10ff4:	e59f2024 	ldr	r2, [pc, #36]	; 11020 <CTimer::InterruptHandler()+0x100>
   10ff8:	e2833001 	add	r3, r3, #1
   10ffc:	e0820392 	umull	r0, r2, r2, r3
   11000:	e1a022a2 	lsr	r2, r2, #5
   11004:	e0020291 	mul	r2, r1, r2
   11008:	e1530002 	cmp	r3, r2
   1100c:	e5843004 	str	r3, [r4, #4]
   11010:	e5943010 	ldr	r3, [r4, #16]
   11014:	1affffe8 	bne	10fbc <CTimer::InterruptHandler()+0x9c>
   11018:	eaffffe1 	b	10fa4 <CTimer::InterruptHandler()+0x84>
   1101c:	20003000 	.word	0x20003000
   11020:	51eb851f 	.word	0x51eb851f

00011024 <CTimer::InterruptHandler(void*)>:
   11024:	e92d4010 	push	{r4, lr}
   11028:	e2504000 	subs	r4, r0, #0
   1102c:	0a000002 	beq	1103c <CTimer::InterruptHandler(void*)+0x18>
   11030:	e1a00004 	mov	r0, r4
   11034:	e8bd4010 	pop	{r4, lr}
   11038:	eaffffb8 	b	10f20 <CTimer::InterruptHandler()>
   1103c:	e59f0014 	ldr	r0, [pc, #20]	; 11058 <CTimer::InterruptHandler(void*)+0x34>
   11040:	e59f2014 	ldr	r2, [pc, #20]	; 1105c <CTimer::InterruptHandler(void*)+0x38>
   11044:	e59f1014 	ldr	r1, [pc, #20]	; 11060 <CTimer::InterruptHandler(void*)+0x3c>
   11048:	ebffe522 	bl	a4d8 <assertion_failed>
   1104c:	e1a00004 	mov	r0, r4
   11050:	e8bd4010 	pop	{r4, lr}
   11054:	eaffffb1 	b	10f20 <CTimer::InterruptHandler()>
   11058:	00013b5c 	.word	0x00013b5c
   1105c:	000001ea 	.word	0x000001ea
   11060:	00014904 	.word	0x00014904

00011064 <CTimer::TuneMsDelay()>:
   11064:	e92d4070 	push	{r4, r5, r6, lr}
   11068:	e1a05000 	mov	r5, r0
   1106c:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   11070:	e5953020 	ldr	r3, [r5, #32]
   11074:	e24dd008 	sub	sp, sp, #8
   11078:	e0000390 	mul	r0, r0, r3
   1107c:	e5954004 	ldr	r4, [r5, #4]
   11080:	eb00084a 	bl	131b0 <DelayLoop>
   11084:	e5951004 	ldr	r1, [r5, #4]
   11088:	e59f0068 	ldr	r0, [pc, #104]	; 110f8 <CTimer::TuneMsDelay()+0x94>
   1108c:	e0411004 	sub	r1, r1, r4
   11090:	ebffe439 	bl	a17c <__udivsi3>
   11094:	e5953020 	ldr	r3, [r5, #32]
   11098:	e59f405c 	ldr	r4, [pc, #92]	; 110fc <CTimer::TuneMsDelay()+0x98>
   1109c:	e0030093 	mul	r3, r3, r0
   110a0:	e0832394 	umull	r2, r3, r4, r3
   110a4:	e59f1054 	ldr	r1, [pc, #84]	; 11100 <CTimer::TuneMsDelay()+0x9c>
   110a8:	e1a032a3 	lsr	r3, r3, #5
   110ac:	e2832f7d 	add	r2, r3, #500	; 0x1f4
   110b0:	e0821291 	umull	r1, r2, r1, r2
   110b4:	e1a06000 	mov	r6, r0
   110b8:	e1a02322 	lsr	r2, r2, #6
   110bc:	e5852024 	str	r2, [r5, #36]	; 0x24
   110c0:	e5853020 	str	r3, [r5, #32]
   110c4:	ebffee2c 	bl	c97c <CLogger::Get()>
   110c8:	e3a03064 	mov	r3, #100	; 0x64
   110cc:	e0842694 	umull	r2, r4, r4, r6
   110d0:	e1a042a4 	lsr	r4, r4, #5
   110d4:	e0030493 	mul	r3, r3, r4
   110d8:	e0466003 	sub	r6, r6, r3
   110dc:	e88d0050 	stm	sp, {r4, r6}
   110e0:	e59f301c 	ldr	r3, [pc, #28]	; 11104 <CTimer::TuneMsDelay()+0xa0>
   110e4:	e3a02003 	mov	r2, #3
   110e8:	e59f1018 	ldr	r1, [pc, #24]	; 11108 <CTimer::TuneMsDelay()+0xa4>
   110ec:	ebffefcb 	bl	d020 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   110f0:	e28dd008 	add	sp, sp, #8
   110f4:	e8bd8070 	pop	{r4, r5, r6, pc}
   110f8:	00002710 	.word	0x00002710
   110fc:	51eb851f 	.word	0x51eb851f
   11100:	10624dd3 	.word	0x10624dd3
   11104:	000149e0 	.word	0x000149e0
   11108:	000148fc 	.word	0x000148fc

0001110c <CTimer::Initialize()>:
   1110c:	e92d4070 	push	{r4, r5, r6, lr}
   11110:	e1a04000 	mov	r4, r0
   11114:	e5900000 	ldr	r0, [r0]
   11118:	e3500000 	cmp	r0, #0
   1111c:	0a000011 	beq	11168 <CTimer::Initialize()+0x5c>
   11120:	e1a03004 	mov	r3, r4
   11124:	e59f2054 	ldr	r2, [pc, #84]	; 11180 <CTimer::Initialize()+0x74>
   11128:	e3a01003 	mov	r1, #3
   1112c:	ebffeb79 	bl	bf18 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   11130:	e3a05000 	mov	r5, #0
   11134:	ee075f9a 	mcr	15, 0, r5, cr7, cr10, {4}
   11138:	e59f2044 	ldr	r2, [pc, #68]	; 11184 <CTimer::Initialize()+0x78>
   1113c:	e59f3044 	ldr	r3, [pc, #68]	; 11188 <CTimer::Initialize()+0x7c>
   11140:	e1a00004 	mov	r0, r4
   11144:	e5823004 	str	r3, [r2, #4]
   11148:	e5923004 	ldr	r3, [r2, #4]
   1114c:	e2833c27 	add	r3, r3, #9984	; 0x2700
   11150:	e2833010 	add	r3, r3, #16
   11154:	e5823018 	str	r3, [r2, #24]
   11158:	ebffffc1 	bl	11064 <CTimer::TuneMsDelay()>
   1115c:	ee075fba 	mcr	15, 0, r5, cr7, cr10, {5}
   11160:	e3a00001 	mov	r0, #1
   11164:	e8bd8070 	pop	{r4, r5, r6, pc}
   11168:	e59f001c 	ldr	r0, [pc, #28]	; 1118c <CTimer::Initialize()+0x80>
   1116c:	e3a02057 	mov	r2, #87	; 0x57
   11170:	e59f1018 	ldr	r1, [pc, #24]	; 11190 <CTimer::Initialize()+0x84>
   11174:	ebffe4d7 	bl	a4d8 <assertion_failed>
   11178:	e5940000 	ldr	r0, [r4]
   1117c:	eaffffe7 	b	11120 <CTimer::Initialize()+0x14>
   11180:	00011024 	.word	0x00011024
   11184:	20003000 	.word	0x20003000
   11188:	fe363c80 	.word	0xfe363c80
   1118c:	00013b18 	.word	0x00013b18
   11190:	00014904 	.word	0x00014904

00011194 <CTimer::RegisterPeriodicHandler(void (*)())>:
   11194:	e5903028 	ldr	r3, [r0, #40]	; 0x28
   11198:	e92d4070 	push	{r4, r5, r6, lr}
   1119c:	e3530000 	cmp	r3, #0
   111a0:	e1a04000 	mov	r4, r0
   111a4:	e1a05001 	mov	r5, r1
   111a8:	0a000003 	beq	111bc <CTimer::RegisterPeriodicHandler(void (*)())+0x28>
   111ac:	e3a02c02 	mov	r2, #512	; 0x200
   111b0:	e59f1024 	ldr	r1, [pc, #36]	; 111dc <CTimer::RegisterPeriodicHandler(void (*)())+0x48>
   111b4:	e59f0024 	ldr	r0, [pc, #36]	; 111e0 <CTimer::RegisterPeriodicHandler(void (*)())+0x4c>
   111b8:	ebffe4c6 	bl	a4d8 <assertion_failed>
   111bc:	e3550000 	cmp	r5, #0
   111c0:	e5845028 	str	r5, [r4, #40]	; 0x28
   111c4:	18bd8070 	popne	{r4, r5, r6, pc}
   111c8:	e59f2014 	ldr	r2, [pc, #20]	; 111e4 <CTimer::RegisterPeriodicHandler(void (*)())+0x50>
   111cc:	e59f1008 	ldr	r1, [pc, #8]	; 111dc <CTimer::RegisterPeriodicHandler(void (*)())+0x48>
   111d0:	e59f0010 	ldr	r0, [pc, #16]	; 111e8 <CTimer::RegisterPeriodicHandler(void (*)())+0x54>
   111d4:	e8bd4070 	pop	{r4, r5, r6, lr}
   111d8:	eaffe4be 	b	a4d8 <assertion_failed>
   111dc:	00014904 	.word	0x00014904
   111e0:	000149f8 	.word	0x000149f8
   111e4:	00000202 	.word	0x00000202
   111e8:	00014a10 	.word	0x00014a10

000111ec <CTimer::SimpleMsDelay(unsigned int)>:
   111ec:	e3500000 	cmp	r0, #0
   111f0:	012fff1e 	bxeq	lr
   111f4:	e3a03ffa 	mov	r3, #1000	; 0x3e8
   111f8:	e0000093 	mul	r0, r3, r0
   111fc:	e3500000 	cmp	r0, #0
   11200:	012fff1e 	bxeq	lr
   11204:	eafffccf 	b	10548 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]>

00011208 <CTimer::SimpleusDelay(unsigned int)>:
   11208:	e3500000 	cmp	r0, #0
   1120c:	012fff1e 	bxeq	lr
   11210:	eafffccc 	b	10548 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]>

00011214 <CTimer::IsLeapYear(unsigned int)>:
   11214:	e3a02064 	mov	r2, #100	; 0x64
   11218:	e59f303c 	ldr	r3, [pc, #60]	; 1125c <CTimer::IsLeapYear(unsigned int)+0x48>
   1121c:	e0831093 	umull	r1, r3, r3, r0
   11220:	e1a012a3 	lsr	r1, r3, #5
   11224:	e0020192 	mul	r2, r2, r1
   11228:	e1500002 	cmp	r0, r2
   1122c:	0a000003 	beq	11240 <CTimer::IsLeapYear(unsigned int)+0x2c>
   11230:	e3100003 	tst	r0, #3
   11234:	03a00001 	moveq	r0, #1
   11238:	13a00000 	movne	r0, #0
   1123c:	e12fff1e 	bx	lr
   11240:	e3a02e19 	mov	r2, #400	; 0x190
   11244:	e1a033a3 	lsr	r3, r3, #7
   11248:	e0030392 	mul	r3, r2, r3
   1124c:	e0400003 	sub	r0, r0, r3
   11250:	e16f0f10 	clz	r0, r0
   11254:	e1a002a0 	lsr	r0, r0, #5
   11258:	e12fff1e 	bx	lr
   1125c:	51eb851f 	.word	0x51eb851f

00011260 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)>:
   11260:	e3500001 	cmp	r0, #1
   11264:	0a000002 	beq	11274 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x14>
   11268:	e59f3058 	ldr	r3, [pc, #88]	; 112c8 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x68>
   1126c:	e7930100 	ldr	r0, [r3, r0, lsl #2]
   11270:	e12fff1e 	bx	lr
   11274:	e3a02064 	mov	r2, #100	; 0x64
   11278:	e59f304c 	ldr	r3, [pc, #76]	; 112cc <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x6c>
   1127c:	e083c193 	umull	ip, r3, r3, r1
   11280:	e1a0c2a3 	lsr	ip, r3, #5
   11284:	e0020c92 	mul	r2, r2, ip
   11288:	e1510002 	cmp	r1, r2
   1128c:	0a000006 	beq	112ac <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x4c>
   11290:	e3110003 	tst	r1, #3
   11294:	03a01001 	moveq	r1, #1
   11298:	13a01000 	movne	r1, #0
   1129c:	e3510000 	cmp	r1, #0
   112a0:	0afffff0 	beq	11268 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x8>
   112a4:	e3a0001d 	mov	r0, #29
   112a8:	e12fff1e 	bx	lr
   112ac:	e3a02e19 	mov	r2, #400	; 0x190
   112b0:	e1a033a3 	lsr	r3, r3, #7
   112b4:	e0030392 	mul	r3, r2, r3
   112b8:	e0411003 	sub	r1, r1, r3
   112bc:	e16f1f11 	clz	r1, r1
   112c0:	e1a012a1 	lsr	r1, r1, #5
   112c4:	eafffff4 	b	1129c <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x3c>
   112c8:	000148cc 	.word	0x000148cc
   112cc:	51eb851f 	.word	0x51eb851f

000112d0 <CTimer::Get()>:
   112d0:	e92d4010 	push	{r4, lr}
   112d4:	e59f4020 	ldr	r4, [pc, #32]	; 112fc <CTimer::Get()+0x2c>
   112d8:	e5940000 	ldr	r0, [r4]
   112dc:	e3500000 	cmp	r0, #0
   112e0:	18bd8010 	popne	{r4, pc}
   112e4:	e59f2014 	ldr	r2, [pc, #20]	; 11300 <CTimer::Get()+0x30>
   112e8:	e59f1014 	ldr	r1, [pc, #20]	; 11304 <CTimer::Get()+0x34>
   112ec:	e59f0014 	ldr	r0, [pc, #20]	; 11308 <CTimer::Get()+0x38>
   112f0:	ebffe478 	bl	a4d8 <assertion_failed>
   112f4:	e5940000 	ldr	r0, [r4]
   112f8:	e8bd8010 	pop	{r4, pc}
   112fc:	00015ebc 	.word	0x00015ebc
   11300:	0000023e 	.word	0x0000023e
   11304:	00014904 	.word	0x00014904
   11308:	00014468 	.word	0x00014468

0001130c <memset>:
   1130c:	e3520000 	cmp	r2, #0
   11310:	012fff1e 	bxeq	lr
   11314:	e1a03000 	mov	r3, r0
   11318:	e6af1071 	sxtb	r1, r1
   1131c:	e0802002 	add	r2, r0, r2
   11320:	e4c31001 	strb	r1, [r3], #1
   11324:	e1530002 	cmp	r3, r2
   11328:	1afffffc 	bne	11320 <memset+0x14>
   1132c:	e12fff1e 	bx	lr

00011330 <memcmp>:
   11330:	e3520000 	cmp	r2, #0
   11334:	0a00000e 	beq	11374 <memcmp+0x44>
   11338:	e5d0c000 	ldrb	ip, [r0]
   1133c:	e5d13000 	ldrb	r3, [r1]
   11340:	e15c0003 	cmp	ip, r3
   11344:	ca00000c 	bgt	1137c <memcmp+0x4c>
   11348:	ba00000d 	blt	11384 <memcmp+0x54>
   1134c:	e0812002 	add	r2, r1, r2
   11350:	e2811001 	add	r1, r1, #1
   11354:	ea000004 	b	1136c <memcmp+0x3c>
   11358:	e5f0c001 	ldrb	ip, [r0, #1]!
   1135c:	e4d13001 	ldrb	r3, [r1], #1
   11360:	e15c0003 	cmp	ip, r3
   11364:	ca000004 	bgt	1137c <memcmp+0x4c>
   11368:	ba000005 	blt	11384 <memcmp+0x54>
   1136c:	e1510002 	cmp	r1, r2
   11370:	1afffff8 	bne	11358 <memcmp+0x28>
   11374:	e3a00000 	mov	r0, #0
   11378:	e12fff1e 	bx	lr
   1137c:	e3a00001 	mov	r0, #1
   11380:	e12fff1e 	bx	lr
   11384:	e3e00000 	mvn	r0, #0
   11388:	e12fff1e 	bx	lr

0001138c <strlen>:
   1138c:	e1d010d0 	ldrsb	r1, [r0]
   11390:	e2803001 	add	r3, r0, #1
   11394:	e3510000 	cmp	r1, #0
   11398:	0a000003 	beq	113ac <strlen+0x20>
   1139c:	e0431000 	sub	r1, r3, r0
   113a0:	e0d320d1 	ldrsb	r2, [r3], #1
   113a4:	e3520000 	cmp	r2, #0
   113a8:	1afffffb 	bne	1139c <strlen+0x10>
   113ac:	e1a00001 	mov	r0, r1
   113b0:	e12fff1e 	bx	lr

000113b4 <strcmp>:
   113b4:	e1d030d0 	ldrsb	r3, [r0]
   113b8:	e1d120d0 	ldrsb	r2, [r1]
   113bc:	e3530000 	cmp	r3, #0
   113c0:	1a000007 	bne	113e4 <strcmp+0x30>
   113c4:	ea000008 	b	113ec <strcmp+0x38>
   113c8:	e1530002 	cmp	r3, r2
   113cc:	ca00000b 	bgt	11400 <strcmp+0x4c>
   113d0:	ba00000c 	blt	11408 <strcmp+0x54>
   113d4:	e1f030d1 	ldrsb	r3, [r0, #1]!
   113d8:	e3530000 	cmp	r3, #0
   113dc:	0a00000b 	beq	11410 <strcmp+0x5c>
   113e0:	e1f120d1 	ldrsb	r2, [r1, #1]!
   113e4:	e3520000 	cmp	r2, #0
   113e8:	1afffff6 	bne	113c8 <strcmp+0x14>
   113ec:	e1530002 	cmp	r3, r2
   113f0:	ca000002 	bgt	11400 <strcmp+0x4c>
   113f4:	b3e00000 	mvnlt	r0, #0
   113f8:	a3a00000 	movge	r0, #0
   113fc:	e12fff1e 	bx	lr
   11400:	e3a00001 	mov	r0, #1
   11404:	e12fff1e 	bx	lr
   11408:	e3e00000 	mvn	r0, #0
   1140c:	e12fff1e 	bx	lr
   11410:	e1d120d1 	ldrsb	r2, [r1, #1]
   11414:	e1530002 	cmp	r3, r2
   11418:	dafffff5 	ble	113f4 <strcmp+0x40>
   1141c:	eafffff7 	b	11400 <strcmp+0x4c>

00011420 <strcasecmp>:
   11420:	e2400001 	sub	r0, r0, #1
   11424:	e1f030d1 	ldrsb	r3, [r0, #1]!
   11428:	e2432061 	sub	r2, r3, #97	; 0x61
   1142c:	e3520019 	cmp	r2, #25
   11430:	92433020 	subls	r3, r3, #32
   11434:	e3530000 	cmp	r3, #0
   11438:	0a00001f 	beq	114bc <strcasecmp+0x9c>
   1143c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   11440:	e0d120d1 	ldrsb	r2, [r1], #1
   11444:	e242c061 	sub	ip, r2, #97	; 0x61
   11448:	e35c0019 	cmp	ip, #25
   1144c:	81a0e002 	movhi	lr, r2
   11450:	9242e020 	subls	lr, r2, #32
   11454:	e35e0000 	cmp	lr, #0
   11458:	1a000006 	bne	11478 <strcasecmp+0x58>
   1145c:	e35c0019 	cmp	ip, #25
   11460:	92422020 	subls	r2, r2, #32
   11464:	e1530002 	cmp	r3, r2
   11468:	ca000011 	bgt	114b4 <strcasecmp+0x94>
   1146c:	b3e00000 	mvnlt	r0, #0
   11470:	a3a00000 	movge	r0, #0
   11474:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   11478:	e153000e 	cmp	r3, lr
   1147c:	ca00000c 	bgt	114b4 <strcasecmp+0x94>
   11480:	ba000016 	blt	114e0 <strcasecmp+0xc0>
   11484:	e1f030d1 	ldrsb	r3, [r0, #1]!
   11488:	e2432061 	sub	r2, r3, #97	; 0x61
   1148c:	e3520019 	cmp	r2, #25
   11490:	92433020 	subls	r3, r3, #32
   11494:	e3530000 	cmp	r3, #0
   11498:	1affffe8 	bne	11440 <strcasecmp+0x20>
   1149c:	e1d120d0 	ldrsb	r2, [r1]
   114a0:	e242c061 	sub	ip, r2, #97	; 0x61
   114a4:	e35c0019 	cmp	ip, #25
   114a8:	92422020 	subls	r2, r2, #32
   114ac:	e1530002 	cmp	r3, r2
   114b0:	daffffed 	ble	1146c <strcasecmp+0x4c>
   114b4:	e3a00001 	mov	r0, #1
   114b8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   114bc:	e1d120d0 	ldrsb	r2, [r1]
   114c0:	e242c061 	sub	ip, r2, #97	; 0x61
   114c4:	e35c0019 	cmp	ip, #25
   114c8:	92422020 	subls	r2, r2, #32
   114cc:	e1530002 	cmp	r3, r2
   114d0:	ca000004 	bgt	114e8 <strcasecmp+0xc8>
   114d4:	b3e00000 	mvnlt	r0, #0
   114d8:	a3a00000 	movge	r0, #0
   114dc:	e12fff1e 	bx	lr
   114e0:	e3e00000 	mvn	r0, #0
   114e4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   114e8:	e3a00001 	mov	r0, #1
   114ec:	e12fff1e 	bx	lr

000114f0 <strncmp>:
   114f0:	e3520000 	cmp	r2, #0
   114f4:	0a000016 	beq	11554 <strncmp+0x64>
   114f8:	e1d030d0 	ldrsb	r3, [r0]
   114fc:	e1d1c0d0 	ldrsb	ip, [r1]
   11500:	e3530000 	cmp	r3, #0
   11504:	0a000015 	beq	11560 <strncmp+0x70>
   11508:	e35c0000 	cmp	ip, #0
   1150c:	0a000013 	beq	11560 <strncmp+0x70>
   11510:	e15c0003 	cmp	ip, r3
   11514:	ba000016 	blt	11574 <strncmp+0x84>
   11518:	d0802002 	addle	r2, r0, r2
   1151c:	d2800001 	addle	r0, r0, #1
   11520:	da000009 	ble	1154c <strncmp+0x5c>
   11524:	ea000014 	b	1157c <strncmp+0x8c>
   11528:	e0d030d1 	ldrsb	r3, [r0], #1
   1152c:	e3530000 	cmp	r3, #0
   11530:	0a000009 	beq	1155c <strncmp+0x6c>
   11534:	e1f1c0d1 	ldrsb	ip, [r1, #1]!
   11538:	e35c0000 	cmp	ip, #0
   1153c:	0a000007 	beq	11560 <strncmp+0x70>
   11540:	e153000c 	cmp	r3, ip
   11544:	ca00000a 	bgt	11574 <strncmp+0x84>
   11548:	ba00000b 	blt	1157c <strncmp+0x8c>
   1154c:	e1500002 	cmp	r0, r2
   11550:	1afffff4 	bne	11528 <strncmp+0x38>
   11554:	e3a00000 	mov	r0, #0
   11558:	e12fff1e 	bx	lr
   1155c:	e1d1c0d1 	ldrsb	ip, [r1, #1]
   11560:	e153000c 	cmp	r3, ip
   11564:	ca000002 	bgt	11574 <strncmp+0x84>
   11568:	b3e00000 	mvnlt	r0, #0
   1156c:	a3a00000 	movge	r0, #0
   11570:	e12fff1e 	bx	lr
   11574:	e3a00001 	mov	r0, #1
   11578:	e12fff1e 	bx	lr
   1157c:	e3e00000 	mvn	r0, #0
   11580:	e12fff1e 	bx	lr

00011584 <strcpy>:
   11584:	e1d130d0 	ldrsb	r3, [r1]
   11588:	e1a02000 	mov	r2, r0
   1158c:	e3530000 	cmp	r3, #0
   11590:	0a000003 	beq	115a4 <strcpy+0x20>
   11594:	e4c23001 	strb	r3, [r2], #1
   11598:	e1f130d1 	ldrsb	r3, [r1, #1]!
   1159c:	e3530000 	cmp	r3, #0
   115a0:	1afffffb 	bne	11594 <strcpy+0x10>
   115a4:	e3a03000 	mov	r3, #0
   115a8:	e5c23000 	strb	r3, [r2]
   115ac:	e12fff1e 	bx	lr

000115b0 <strncpy>:
   115b0:	e3520000 	cmp	r2, #0
   115b4:	012fff1e 	bxeq	lr
   115b8:	e1d1c0d0 	ldrsb	ip, [r1]
   115bc:	e35c0000 	cmp	ip, #0
   115c0:	0a000009 	beq	115ec <strncpy+0x3c>
   115c4:	e0802002 	add	r2, r0, r2
   115c8:	e1a03000 	mov	r3, r0
   115cc:	ea000002 	b	115dc <strncpy+0x2c>
   115d0:	e1f1c0d1 	ldrsb	ip, [r1, #1]!
   115d4:	e35c0000 	cmp	ip, #0
   115d8:	0a000004 	beq	115f0 <strncpy+0x40>
   115dc:	e4c3c001 	strb	ip, [r3], #1
   115e0:	e1530002 	cmp	r3, r2
   115e4:	1afffff9 	bne	115d0 <strncpy+0x20>
   115e8:	e12fff1e 	bx	lr
   115ec:	e1a03000 	mov	r3, r0
   115f0:	e3a02000 	mov	r2, #0
   115f4:	e5c32000 	strb	r2, [r3]
   115f8:	e12fff1e 	bx	lr

000115fc <strcat>:
   115fc:	e1d030d0 	ldrsb	r3, [r0]
   11600:	e3530000 	cmp	r3, #0
   11604:	e1a03000 	mov	r3, r0
   11608:	0a000002 	beq	11618 <strcat+0x1c>
   1160c:	e1f320d1 	ldrsb	r2, [r3, #1]!
   11610:	e3520000 	cmp	r2, #0
   11614:	1afffffc 	bne	1160c <strcat+0x10>
   11618:	e1d120d0 	ldrsb	r2, [r1]
   1161c:	e3520000 	cmp	r2, #0
   11620:	0a000003 	beq	11634 <strcat+0x38>
   11624:	e4c32001 	strb	r2, [r3], #1
   11628:	e1f120d1 	ldrsb	r2, [r1, #1]!
   1162c:	e3520000 	cmp	r2, #0
   11630:	1afffffb 	bne	11624 <strcat+0x28>
   11634:	e3a02000 	mov	r2, #0
   11638:	e5c32000 	strb	r2, [r3]
   1163c:	e12fff1e 	bx	lr

00011640 <strchr>:
   11640:	e1d020d0 	ldrsb	r2, [r0]
   11644:	e3520000 	cmp	r2, #0
   11648:	0a000009 	beq	11674 <strchr+0x34>
   1164c:	e1510002 	cmp	r1, r2
   11650:	1a000002 	bne	11660 <strchr+0x20>
   11654:	ea000008 	b	1167c <strchr+0x3c>
   11658:	e1530001 	cmp	r3, r1
   1165c:	012fff1e 	bxeq	lr
   11660:	e1f030d1 	ldrsb	r3, [r0, #1]!
   11664:	e3530000 	cmp	r3, #0
   11668:	1afffffa 	bne	11658 <strchr+0x18>
   1166c:	e1a00003 	mov	r0, r3
   11670:	e12fff1e 	bx	lr
   11674:	e1a00002 	mov	r0, r2
   11678:	e12fff1e 	bx	lr
   1167c:	e12fff1e 	bx	lr

00011680 <strtok_r>:
   11680:	e3500000 	cmp	r0, #0
   11684:	0a00002c 	beq	1173c <strtok_r+0xbc>
   11688:	e92d4030 	push	{r4, r5, lr}
   1168c:	e1d0e0d0 	ldrsb	lr, [r0]
   11690:	e35e0000 	cmp	lr, #0
   11694:	11d140d0 	ldrsbne	r4, [r1]
   11698:	0a000024 	beq	11730 <strtok_r+0xb0>
   1169c:	e3540000 	cmp	r4, #0
   116a0:	0a000008 	beq	116c8 <strtok_r+0x48>
   116a4:	e15e0004 	cmp	lr, r4
   116a8:	0a000019 	beq	11714 <strtok_r+0x94>
   116ac:	e1a0c001 	mov	ip, r1
   116b0:	ea000001 	b	116bc <strtok_r+0x3c>
   116b4:	e15e0003 	cmp	lr, r3
   116b8:	0a000015 	beq	11714 <strtok_r+0x94>
   116bc:	e1fc30d1 	ldrsb	r3, [ip, #1]!
   116c0:	e3530000 	cmp	r3, #0
   116c4:	1afffffa 	bne	116b4 <strtok_r+0x34>
   116c8:	e35e0000 	cmp	lr, #0
   116cc:	0a000017 	beq	11730 <strtok_r+0xb0>
   116d0:	e1a05000 	mov	r5, r0
   116d4:	e3540000 	cmp	r4, #0
   116d8:	0a000008 	beq	11700 <strtok_r+0x80>
   116dc:	e15e0004 	cmp	lr, r4
   116e0:	0a00000d 	beq	1171c <strtok_r+0x9c>
   116e4:	e1a0c001 	mov	ip, r1
   116e8:	ea000001 	b	116f4 <strtok_r+0x74>
   116ec:	e15e0003 	cmp	lr, r3
   116f0:	0a000009 	beq	1171c <strtok_r+0x9c>
   116f4:	e1fc30d1 	ldrsb	r3, [ip, #1]!
   116f8:	e3530000 	cmp	r3, #0
   116fc:	1afffffa 	bne	116ec <strtok_r+0x6c>
   11700:	e1f5e0d1 	ldrsb	lr, [r5, #1]!
   11704:	e35e0000 	cmp	lr, #0
   11708:	1afffff1 	bne	116d4 <strtok_r+0x54>
   1170c:	e5825000 	str	r5, [r2]
   11710:	e8bd8030 	pop	{r4, r5, pc}
   11714:	e1f0e0d1 	ldrsb	lr, [r0, #1]!
   11718:	eaffffdf 	b	1169c <strtok_r+0x1c>
   1171c:	e3a03000 	mov	r3, #0
   11720:	e2855001 	add	r5, r5, #1
   11724:	e5453001 	strb	r3, [r5, #-1]
   11728:	e5825000 	str	r5, [r2]
   1172c:	e8bd8030 	pop	{r4, r5, pc}
   11730:	e3a00000 	mov	r0, #0
   11734:	e5820000 	str	r0, [r2]
   11738:	e8bd8030 	pop	{r4, r5, pc}
   1173c:	e5920000 	ldr	r0, [r2]
   11740:	e3500000 	cmp	r0, #0
   11744:	1affffcf 	bne	11688 <strtok_r+0x8>
   11748:	e12fff1e 	bx	lr

0001174c <strtoul>:
   1174c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   11750:	e3510000 	cmp	r1, #0
   11754:	e2425002 	sub	r5, r2, #2
   11758:	15810000 	strne	r0, [r1]
   1175c:	e3520000 	cmp	r2, #0
   11760:	13550022 	cmpne	r5, #34	; 0x22
   11764:	e3c2e010 	bic	lr, r2, #16
   11768:	83a05001 	movhi	r5, #1
   1176c:	93a05000 	movls	r5, #0
   11770:	8a000037 	bhi	11854 <strtoul+0x108>
   11774:	e1d0c0d0 	ldrsb	ip, [r0]
   11778:	e1a04000 	mov	r4, r0
   1177c:	e24c3009 	sub	r3, ip, #9
   11780:	e35c0020 	cmp	ip, #32
   11784:	e2800001 	add	r0, r0, #1
   11788:	e6ef3073 	uxtb	r3, r3
   1178c:	0afffff8 	beq	11774 <strtoul+0x28>
   11790:	e3530004 	cmp	r3, #4
   11794:	9afffff6 	bls	11774 <strtoul+0x28>
   11798:	e35c002b 	cmp	ip, #43	; 0x2b
   1179c:	0a00002e 	beq	1185c <strtoul+0x110>
   117a0:	e35c002d 	cmp	ip, #45	; 0x2d
   117a4:	01d4c0d1 	ldrsbeq	ip, [r4, #1]
   117a8:	03a07001 	moveq	r7, #1
   117ac:	01a04000 	moveq	r4, r0
   117b0:	13a07000 	movne	r7, #0
   117b4:	e35c0030 	cmp	ip, #48	; 0x30
   117b8:	0a00002c 	beq	11870 <strtoul+0x124>
   117bc:	e3520000 	cmp	r2, #0
   117c0:	03a0200a 	moveq	r2, #10
   117c4:	e35c002f 	cmp	ip, #47	; 0x2f
   117c8:	e1a0300c 	mov	r3, ip
   117cc:	da00001d 	ble	11848 <strtoul+0xfc>
   117d0:	e3a0e000 	mov	lr, #0
   117d4:	e3a05001 	mov	r5, #1
   117d8:	e1a0600e 	mov	r6, lr
   117dc:	ea000008 	b	11804 <strtoul+0xb8>
   117e0:	e020329e 	mla	r0, lr, r2, r3
   117e4:	e150000e 	cmp	r0, lr
   117e8:	3a000029 	bcc	11894 <strtoul+0x148>
   117ec:	e1f430d1 	ldrsb	r3, [r4, #1]!
   117f0:	e1a05006 	mov	r5, r6
   117f4:	e353002f 	cmp	r3, #47	; 0x2f
   117f8:	e1a0c003 	mov	ip, r3
   117fc:	da000029 	ble	118a8 <strtoul+0x15c>
   11800:	e1a0e000 	mov	lr, r0
   11804:	e24cc061 	sub	ip, ip, #97	; 0x61
   11808:	e35c0019 	cmp	ip, #25
   1180c:	92433020 	subls	r3, r3, #32
   11810:	e3530040 	cmp	r3, #64	; 0x40
   11814:	c2433007 	subgt	r3, r3, #7
   11818:	e2433030 	sub	r3, r3, #48	; 0x30
   1181c:	e1520003 	cmp	r2, r3
   11820:	caffffee 	bgt	117e0 <strtoul+0x94>
   11824:	e1a0000e 	mov	r0, lr
   11828:	e2255001 	eor	r5, r5, #1
   1182c:	e3510000 	cmp	r1, #0
   11830:	e0055007 	and	r5, r5, r7
   11834:	0a000000 	beq	1183c <strtoul+0xf0>
   11838:	e5814000 	str	r4, [r1]
   1183c:	e3550000 	cmp	r5, #0
   11840:	12600000 	rsbne	r0, r0, #0
   11844:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   11848:	e3510000 	cmp	r1, #0
   1184c:	13a00000 	movne	r0, #0
   11850:	1afffff8 	bne	11838 <strtoul+0xec>
   11854:	e3a00000 	mov	r0, #0
   11858:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1185c:	e1d4c0d1 	ldrsb	ip, [r4, #1]
   11860:	e3a07000 	mov	r7, #0
   11864:	e35c0030 	cmp	ip, #48	; 0x30
   11868:	e1a04000 	mov	r4, r0
   1186c:	1affffd2 	bne	117bc <strtoul+0x70>
   11870:	e1d4c0d1 	ldrsb	ip, [r4, #1]
   11874:	e2840001 	add	r0, r4, #1
   11878:	e3cc3020 	bic	r3, ip, #32
   1187c:	e3530058 	cmp	r3, #88	; 0x58
   11880:	0a00000a 	beq	118b0 <strtoul+0x164>
   11884:	e3520000 	cmp	r2, #0
   11888:	e1a04000 	mov	r4, r0
   1188c:	03a02008 	moveq	r2, #8
   11890:	eaffffcb 	b	117c4 <strtoul+0x78>
   11894:	e3510000 	cmp	r1, #0
   11898:	0a00000a 	beq	118c8 <strtoul+0x17c>
   1189c:	e5814000 	str	r4, [r1]
   118a0:	e3e00000 	mvn	r0, #0
   118a4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   118a8:	e3a05001 	mov	r5, #1
   118ac:	eaffffde 	b	1182c <strtoul+0xe0>
   118b0:	e35e0000 	cmp	lr, #0
   118b4:	1affffe6 	bne	11854 <strtoul+0x108>
   118b8:	e1d4c0d2 	ldrsb	ip, [r4, #2]
   118bc:	e3a02010 	mov	r2, #16
   118c0:	e2844002 	add	r4, r4, #2
   118c4:	eaffffbe 	b	117c4 <strtoul+0x78>
   118c8:	e3e00000 	mvn	r0, #0
   118cc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

000118d0 <char2int>:
   118d0:	e12fff1e 	bx	lr

000118d4 <memcpy>:
   118d4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
   118d8:	e352007f 	cmp	r2, #127	; 0x7f
   118dc:	9a00000b 	bls	11910 <memcpy+0x3c>
   118e0:	e3110003 	tst	r1, #3
   118e4:	1a000009 	bne	11910 <memcpy+0x3c>
   118e8:	e3100003 	tst	r0, #3
   118ec:	1a000007 	bne	11910 <memcpy+0x3c>
   118f0:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
   118f4:	e8b107f8 	ldm	r1!, {r3, r4, r5, r6, r7, r8, r9, sl}
   118f8:	e2422020 	sub	r2, r2, #32
   118fc:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
   11900:	f5d1f040 	pld	[r1, #64]	; 0x40
   11904:	e352001f 	cmp	r2, #31
   11908:	8afffff9 	bhi	118f4 <memcpy+0x20>
   1190c:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
   11910:	e3520000 	cmp	r2, #0
   11914:	0a000003 	beq	11928 <memcpy+0x54>
   11918:	e4d13001 	ldrb	r3, [r1], #1
   1191c:	e2522001 	subs	r2, r2, #1
   11920:	e4c03001 	strb	r3, [r0], #1
   11924:	1afffffb 	bne	11918 <memcpy+0x44>
   11928:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
   1192c:	e12fff1e 	bx	lr

00011930 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
   11930:	e12fff1e 	bx	lr

00011934 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
   11934:	e92d4010 	push	{r4, lr}
   11938:	e1a04000 	mov	r4, r0
   1193c:	e3a01010 	mov	r1, #16
   11940:	eb0002e3 	bl	124d4 <operator delete(void*, unsigned int)>
   11944:	e1a00004 	mov	r0, r4
   11948:	e8bd8010 	pop	{r4, pc}

0001194c <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]>:
   1194c:	e92d4070 	push	{r4, r5, r6, lr}
   11950:	e59f5094 	ldr	r5, [pc, #148]	; 119ec <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0xa0>
   11954:	e1a04000 	mov	r4, r0
   11958:	e5950000 	ldr	r0, [r5]
   1195c:	e1a06001 	mov	r6, r1
   11960:	e3500000 	cmp	r0, #0
   11964:	1a00001a 	bne	119d4 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x88>
   11968:	e1d400bc 	ldrh	r0, [r4, #12]
   1196c:	e1d430be 	ldrh	r3, [r4, #14]
   11970:	e5846008 	str	r6, [r4, #8]
   11974:	e0402003 	sub	r2, r0, r3
   11978:	e6bf2072 	sxth	r2, r2
   1197c:	e3520000 	cmp	r2, #0
   11980:	da00000c 	ble	119b8 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x6c>
   11984:	e3560000 	cmp	r6, #0
   11988:	1a00000c 	bne	119c0 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x74>
   1198c:	e2833001 	add	r3, r3, #1
   11990:	e6ff3073 	uxth	r3, r3
   11994:	e1c430be 	strh	r3, [r4, #14]
   11998:	e5941004 	ldr	r1, [r4, #4]
   1199c:	e5952004 	ldr	r2, [r5, #4]
   119a0:	e1833800 	orr	r3, r3, r0, lsl #16
   119a4:	e7823101 	str	r3, [r2, r1, lsl #2]
   119a8:	e5953000 	ldr	r3, [r5]
   119ac:	e3530000 	cmp	r3, #0
   119b0:	1a000005 	bne	119cc <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x80>
   119b4:	e8bd8070 	pop	{r4, r5, r6, pc}
   119b8:	e3560000 	cmp	r6, #0
   119bc:	1a000006 	bne	119dc <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x90>
   119c0:	e5953000 	ldr	r3, [r5]
   119c4:	e3530000 	cmp	r3, #0
   119c8:	08bd8070 	popeq	{r4, r5, r6, pc}
   119cc:	e8bd4070 	pop	{r4, r5, r6, lr}
   119d0:	ea00028e 	b	12410 <LeaveCritical>
   119d4:	eb000260 	bl	1235c <EnterCritical>
   119d8:	eaffffe2 	b	11968 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x1c>
   119dc:	e2800001 	add	r0, r0, #1
   119e0:	e6ff0070 	uxth	r0, r0
   119e4:	e1c400bc 	strh	r0, [r4, #12]
   119e8:	eaffffea 	b	11998 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x4c>
   119ec:	00015ec0 	.word	0x00015ec0

000119f0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)>:
   119f0:	e3a03000 	mov	r3, #0
   119f4:	e92d4030 	push	{r4, r5, lr}
   119f8:	e59f2124 	ldr	r2, [pc, #292]	; 11b24 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x134>
   119fc:	e3510001 	cmp	r1, #1
   11a00:	e24dd024 	sub	sp, sp, #36	; 0x24
   11a04:	e1a04000 	mov	r4, r0
   11a08:	e5801004 	str	r1, [r0, #4]
   11a0c:	e5802000 	str	r2, [r0]
   11a10:	e1c030bc 	strh	r3, [r0, #12]
   11a14:	e1c030be 	strh	r3, [r0, #14]
   11a18:	9a000002 	bls	11a28 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x38>
   11a1c:	e1a00004 	mov	r0, r4
   11a20:	e28dd024 	add	sp, sp, #36	; 0x24
   11a24:	e8bd8030 	pop	{r4, r5, pc}
   11a28:	e59f50f8 	ldr	r5, [pc, #248]	; 11b28 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x138>
   11a2c:	e5950000 	ldr	r0, [r5]
   11a30:	e1500003 	cmp	r0, r3
   11a34:	1a00002c 	bne	11aec <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0xfc>
   11a38:	e5953004 	ldr	r3, [r5, #4]
   11a3c:	e3530000 	cmp	r3, #0
   11a40:	0a000011 	beq	11a8c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x9c>
   11a44:	e3a01000 	mov	r1, #0
   11a48:	e5942004 	ldr	r2, [r4, #4]
   11a4c:	e7831102 	str	r1, [r3, r2, lsl #2]
   11a50:	e5953000 	ldr	r3, [r5]
   11a54:	e3530000 	cmp	r3, #0
   11a58:	1a000009 	bne	11a84 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x94>
   11a5c:	e5943004 	ldr	r3, [r4, #4]
   11a60:	e3530001 	cmp	r3, #1
   11a64:	8affffec 	bhi	11a1c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x2c>
   11a68:	e5953004 	ldr	r3, [r5, #4]
   11a6c:	e3530000 	cmp	r3, #0
   11a70:	0affffe9 	beq	11a1c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x2c>
   11a74:	e3a01000 	mov	r1, #0
   11a78:	e1a00004 	mov	r0, r4
   11a7c:	ebffffb2 	bl	1194c <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]>
   11a80:	eaffffe5 	b	11a1c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x2c>
   11a84:	eb000261 	bl	12410 <LeaveCritical>
   11a88:	eafffff3 	b	11a5c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x6c>
   11a8c:	e3a00001 	mov	r0, #1
   11a90:	eb0001fa 	bl	12280 <CMemorySystem::GetCoherentPage(unsigned int)>
   11a94:	e5850004 	str	r0, [r5, #4]
   11a98:	e28d000c 	add	r0, sp, #12
   11a9c:	ebffe2b1 	bl	a568 <CBcmPropertyTags::CBcmPropertyTags()>
   11aa0:	e3a03004 	mov	r3, #4
   11aa4:	e595c004 	ldr	ip, [r5, #4]
   11aa8:	e58d3000 	str	r3, [sp]
   11aac:	e3ccc103 	bic	ip, ip, #-1073741824	; 0xc0000000
   11ab0:	e38cc101 	orr	ip, ip, #1073741824	; 0x40000000
   11ab4:	e28d000c 	add	r0, sp, #12
   11ab8:	e28d2010 	add	r2, sp, #16
   11abc:	e3a03010 	mov	r3, #16
   11ac0:	e59f1064 	ldr	r1, [pc, #100]	; 11b2c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x13c>
   11ac4:	e58dc01c 	str	ip, [sp, #28]
   11ac8:	ebffe2fd 	bl	a6c4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   11acc:	e3500000 	cmp	r0, #0
   11ad0:	0a000007 	beq	11af4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x104>
   11ad4:	e28d000c 	add	r0, sp, #12
   11ad8:	ebffe2a8 	bl	a580 <CBcmPropertyTags::~CBcmPropertyTags()>
   11adc:	e5953004 	ldr	r3, [r5, #4]
   11ae0:	e3530000 	cmp	r3, #0
   11ae4:	0affffd9 	beq	11a50 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x60>
   11ae8:	eaffffd5 	b	11a44 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x54>
   11aec:	eb00021a 	bl	1235c <EnterCritical>
   11af0:	eaffffd0 	b	11a38 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x48>
   11af4:	e3a03010 	mov	r3, #16
   11af8:	e58d0000 	str	r0, [sp]
   11afc:	e28d2010 	add	r2, sp, #16
   11b00:	e59f1028 	ldr	r1, [pc, #40]	; 11b30 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x140>
   11b04:	e28d000c 	add	r0, sp, #12
   11b08:	ebffe2ed 	bl	a6c4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   11b0c:	e3500000 	cmp	r0, #0
   11b10:	159d301c 	ldrne	r3, [sp, #28]
   11b14:	05850004 	streq	r0, [r5, #4]
   11b18:	13c33103 	bicne	r3, r3, #-1073741824	; 0xc0000000
   11b1c:	15853004 	strne	r3, [r5, #4]
   11b20:	eaffffeb 	b	11ad4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0xe4>
   11b24:	00014a60 	.word	0x00014a60
   11b28:	00015ec0 	.word	0x00015ec0
   11b2c:	00048020 	.word	0x00048020
   11b30:	00040010 	.word	0x00040010

00011b34 <CVirtualGPIOPin::Write(unsigned int)>:
   11b34:	e5902004 	ldr	r2, [r0, #4]
   11b38:	e1a03001 	mov	r3, r1
   11b3c:	e3520001 	cmp	r2, #1
   11b40:	812fff1e 	bxhi	lr
   11b44:	e3510001 	cmp	r1, #1
   11b48:	93a03000 	movls	r3, #0
   11b4c:	83a03001 	movhi	r3, #1
   11b50:	e59f2014 	ldr	r2, [pc, #20]	; 11b6c <CVirtualGPIOPin::Write(unsigned int)+0x38>
   11b54:	e5922004 	ldr	r2, [r2, #4]
   11b58:	e3520000 	cmp	r2, #0
   11b5c:	03833001 	orreq	r3, r3, #1
   11b60:	e3530000 	cmp	r3, #0
   11b64:	112fff1e 	bxne	lr
   11b68:	eaffff77 	b	1194c <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]>
   11b6c:	00015ec0 	.word	0x00015ec0

00011b70 <CVirtualGPIOPin::Invert()>:
   11b70:	e5901008 	ldr	r1, [r0, #8]
   11b74:	e2211001 	eor	r1, r1, #1
   11b78:	eaffffed 	b	11b34 <CVirtualGPIOPin::Write(unsigned int)>

00011b7c <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE>:
   11b7c:	e3a02000 	mov	r2, #0
   11b80:	e59f3004 	ldr	r3, [pc, #4]	; 11b8c <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE+0x10>
   11b84:	e5832000 	str	r2, [r3]
   11b88:	e12fff1e 	bx	lr
   11b8c:	00015ec0 	.word	0x00015ec0

00011b90 <CExceptionHandler::CExceptionHandler()>:
   11b90:	e92d4070 	push	{r4, r5, r6, lr}
   11b94:	e59f506c 	ldr	r5, [pc, #108]	; 11c08 <CExceptionHandler::CExceptionHandler()+0x78>
   11b98:	e1a04000 	mov	r4, r0
   11b9c:	e5953000 	ldr	r3, [r5]
   11ba0:	e3530000 	cmp	r3, #0
   11ba4:	0a000003 	beq	11bb8 <CExceptionHandler::CExceptionHandler()+0x28>
   11ba8:	e3a02030 	mov	r2, #48	; 0x30
   11bac:	e59f1058 	ldr	r1, [pc, #88]	; 11c0c <CExceptionHandler::CExceptionHandler()+0x7c>
   11bb0:	e59f0058 	ldr	r0, [pc, #88]	; 11c10 <CExceptionHandler::CExceptionHandler()+0x80>
   11bb4:	ebffe247 	bl	a4d8 <assertion_failed>
   11bb8:	e3a00000 	mov	r0, #0
   11bbc:	e59f1050 	ldr	r1, [pc, #80]	; 11c14 <CExceptionHandler::CExceptionHandler()+0x84>
   11bc0:	e59f2050 	ldr	r2, [pc, #80]	; 11c18 <CExceptionHandler::CExceptionHandler()+0x88>
   11bc4:	e59f3050 	ldr	r3, [pc, #80]	; 11c1c <CExceptionHandler::CExceptionHandler()+0x8c>
   11bc8:	e1a01141 	asr	r1, r1, #2
   11bcc:	e1a02142 	asr	r2, r2, #2
   11bd0:	e1a03143 	asr	r3, r3, #2
   11bd4:	e2411002 	sub	r1, r1, #2
   11bd8:	e2422002 	sub	r2, r2, #2
   11bdc:	e2433002 	sub	r3, r3, #2
   11be0:	e38114ea 	orr	r1, r1, #-369098752	; 0xea000000
   11be4:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
   11be8:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
   11bec:	e5854000 	str	r4, [r5]
   11bf0:	e5801004 	str	r1, [r0, #4]
   11bf4:	e580200c 	str	r2, [r0, #12]
   11bf8:	e5803010 	str	r3, [r0, #16]
   11bfc:	eb000228 	bl	124a4 <SyncDataAndInstructionCache>
   11c00:	e1a00004 	mov	r0, r4
   11c04:	e8bd8070 	pop	{r4, r5, r6, pc}
   11c08:	00015ec8 	.word	0x00015ec8
   11c0c:	00014a70 	.word	0x00014a70
   11c10:	00014910 	.word	0x00014910
   11c14:	00011f30 	.word	0x00011f30
   11c18:	00011e90 	.word	0x00011e90
   11c1c:	00011ed8 	.word	0x00011ed8

00011c20 <CExceptionHandler::~CExceptionHandler()>:
   11c20:	e3a02000 	mov	r2, #0
   11c24:	e59f3004 	ldr	r3, [pc, #4]	; 11c30 <CExceptionHandler::~CExceptionHandler()+0x10>
   11c28:	e5832000 	str	r2, [r3]
   11c2c:	e12fff1e 	bx	lr
   11c30:	00015ec8 	.word	0x00015ec8

00011c34 <CExceptionHandler::Throw(unsigned int)>:
   11c34:	e92d4010 	push	{r4, lr}
   11c38:	e1a04001 	mov	r4, r1
   11c3c:	e24dd008 	sub	sp, sp, #8
   11c40:	ebffeb4d 	bl	c97c <CLogger::Get()>
   11c44:	e59f201c 	ldr	r2, [pc, #28]	; 11c68 <CExceptionHandler::Throw(unsigned int)+0x34>
   11c48:	e59f301c 	ldr	r3, [pc, #28]	; 11c6c <CExceptionHandler::Throw(unsigned int)+0x38>
   11c4c:	e7921104 	ldr	r1, [r2, r4, lsl #2]
   11c50:	e3a02000 	mov	r2, #0
   11c54:	e58d1000 	str	r1, [sp]
   11c58:	e59f1010 	ldr	r1, [pc, #16]	; 11c70 <CExceptionHandler::Throw(unsigned int)+0x3c>
   11c5c:	ebffecef 	bl	d020 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11c60:	e28dd008 	add	sp, sp, #8
   11c64:	e8bd8010 	pop	{r4, pc}
   11c68:	00015db0 	.word	0x00015db0
   11c6c:	00014a88 	.word	0x00014a88
   11c70:	00014a68 	.word	0x00014a68

00011c74 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>:
   11c74:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   11c78:	e3510002 	cmp	r1, #2
   11c7c:	e24dd024 	sub	sp, sp, #36	; 0x24
   11c80:	e1a05001 	mov	r5, r1
   11c84:	e1a04002 	mov	r4, r2
   11c88:	0a000028 	beq	11d30 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xbc>
   11c8c:	e3510003 	cmp	r1, #3
   11c90:	0a000020 	beq	11d18 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xa4>
   11c94:	e3a08000 	mov	r8, #0
   11c98:	e1a09008 	mov	r9, r8
   11c9c:	e3540000 	cmp	r4, #0
   11ca0:	0a000025 	beq	11d3c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xc8>
   11ca4:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   11ca8:	e5947048 	ldr	r7, [r4, #72]	; 0x48
   11cac:	e203301f 	and	r3, r3, #31
   11cb0:	e3530011 	cmp	r3, #17
   11cb4:	e5946044 	ldr	r6, [r4, #68]	; 0x44
   11cb8:	0a000019 	beq	11d24 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xb0>
   11cbc:	e3530012 	cmp	r3, #18
   11cc0:	089400c0 	ldmeq	r4, {r6, r7}
   11cc4:	e59f1084 	ldr	r1, [pc, #132]	; 11d50 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xdc>
   11cc8:	e1a00006 	mov	r0, r6
   11ccc:	ebffe30a 	bl	a8fc <debug_stacktrace(unsigned int const*, char const*)>
   11cd0:	ebffeb29 	bl	c97c <CLogger::Get()>
   11cd4:	e59f3078 	ldr	r3, [pc, #120]	; 11d54 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe0>
   11cd8:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
   11cdc:	e7931105 	ldr	r1, [r3, r5, lsl #2]
   11ce0:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   11ce4:	e58d1000 	str	r1, [sp]
   11ce8:	e58d2018 	str	r2, [sp, #24]
   11cec:	e58d3004 	str	r3, [sp, #4]
   11cf0:	e58d7014 	str	r7, [sp, #20]
   11cf4:	e58d6010 	str	r6, [sp, #16]
   11cf8:	e58d800c 	str	r8, [sp, #12]
   11cfc:	e58d9008 	str	r9, [sp, #8]
   11d00:	e59f3050 	ldr	r3, [pc, #80]	; 11d58 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe4>
   11d04:	e3a02000 	mov	r2, #0
   11d08:	e59f1040 	ldr	r1, [pc, #64]	; 11d50 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xdc>
   11d0c:	ebffecc3 	bl	d020 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11d10:	e28dd024 	add	sp, sp, #36	; 0x24
   11d14:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   11d18:	ee159f10 	mrc	15, 0, r9, cr5, cr0, {0}
   11d1c:	ee168f10 	mrc	15, 0, r8, cr6, cr0, {0}
   11d20:	eaffffdd 	b	11c9c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x28>
   11d24:	e594700c 	ldr	r7, [r4, #12]
   11d28:	e5946008 	ldr	r6, [r4, #8]
   11d2c:	eaffffe4 	b	11cc4 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x50>
   11d30:	ee159f30 	mrc	15, 0, r9, cr5, cr0, {1}
   11d34:	ee168f50 	mrc	15, 0, r8, cr6, cr0, {2}
   11d38:	eaffffd7 	b	11c9c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x28>
   11d3c:	e3a02069 	mov	r2, #105	; 0x69
   11d40:	e59f1014 	ldr	r1, [pc, #20]	; 11d5c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe8>
   11d44:	e59f0014 	ldr	r0, [pc, #20]	; 11d60 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xec>
   11d48:	ebffe1e2 	bl	a4d8 <assertion_failed>
   11d4c:	eaffffd4 	b	11ca4 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x30>
   11d50:	00014a68 	.word	0x00014a68
   11d54:	00015db0 	.word	0x00015db0
   11d58:	00014aa4 	.word	0x00014aa4
   11d5c:	00014a70 	.word	0x00014a70
   11d60:	00014a98 	.word	0x00014a98

00011d64 <CExceptionHandler::Get()>:
   11d64:	e92d4010 	push	{r4, lr}
   11d68:	e59f4020 	ldr	r4, [pc, #32]	; 11d90 <CExceptionHandler::Get()+0x2c>
   11d6c:	e5940000 	ldr	r0, [r4]
   11d70:	e3500000 	cmp	r0, #0
   11d74:	18bd8010 	popne	{r4, pc}
   11d78:	e3a02087 	mov	r2, #135	; 0x87
   11d7c:	e59f1010 	ldr	r1, [pc, #16]	; 11d94 <CExceptionHandler::Get()+0x30>
   11d80:	e59f0010 	ldr	r0, [pc, #16]	; 11d98 <CExceptionHandler::Get()+0x34>
   11d84:	ebffe1d3 	bl	a4d8 <assertion_failed>
   11d88:	e5940000 	ldr	r0, [r4]
   11d8c:	e8bd8010 	pop	{r4, pc}
   11d90:	00015ec8 	.word	0x00015ec8
   11d94:	00014a70 	.word	0x00014a70
   11d98:	00014468 	.word	0x00014468

00011d9c <ExceptionHandler>:
   11d9c:	e92d4070 	push	{r4, r5, r6, lr}
   11da0:	e3a03000 	mov	r3, #0
   11da4:	e1a05000 	mov	r5, r0
   11da8:	e1a06001 	mov	r6, r1
   11dac:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   11db0:	ebffe8fa 	bl	c1a0 <CInterruptSystem::DisableFIQ()>
   11db4:	f1080040 	cpsie	f
   11db8:	e59f403c 	ldr	r4, [pc, #60]	; 11dfc <ExceptionHandler+0x60>
   11dbc:	e5940000 	ldr	r0, [r4]
   11dc0:	e3500000 	cmp	r0, #0
   11dc4:	0a000003 	beq	11dd8 <ExceptionHandler+0x3c>
   11dc8:	e1a02006 	mov	r2, r6
   11dcc:	e1a01005 	mov	r1, r5
   11dd0:	e8bd4070 	pop	{r4, r5, r6, lr}
   11dd4:	eaffffa6 	b	11c74 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>
   11dd8:	e3a02087 	mov	r2, #135	; 0x87
   11ddc:	e59f101c 	ldr	r1, [pc, #28]	; 11e00 <ExceptionHandler+0x64>
   11de0:	e59f001c 	ldr	r0, [pc, #28]	; 11e04 <ExceptionHandler+0x68>
   11de4:	ebffe1bb 	bl	a4d8 <assertion_failed>
   11de8:	e5940000 	ldr	r0, [r4]
   11dec:	e1a02006 	mov	r2, r6
   11df0:	e1a01005 	mov	r1, r5
   11df4:	e8bd4070 	pop	{r4, r5, r6, lr}
   11df8:	eaffff9d 	b	11c74 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>
   11dfc:	00015ec8 	.word	0x00015ec8
   11e00:	00014a70 	.word	0x00014a70
   11e04:	00014468 	.word	0x00014468

00011e08 <raise>:
   11e08:	e92d4010 	push	{r4, lr}
   11e0c:	e59f4030 	ldr	r4, [pc, #48]	; 11e44 <raise+0x3c>
   11e10:	e5940000 	ldr	r0, [r4]
   11e14:	e3500000 	cmp	r0, #0
   11e18:	0a000003 	beq	11e2c <raise+0x24>
   11e1c:	e3a01004 	mov	r1, #4
   11e20:	ebffff83 	bl	11c34 <CExceptionHandler::Throw(unsigned int)>
   11e24:	e3a00000 	mov	r0, #0
   11e28:	e8bd8010 	pop	{r4, pc}
   11e2c:	e59f0014 	ldr	r0, [pc, #20]	; 11e48 <raise+0x40>
   11e30:	e3a02087 	mov	r2, #135	; 0x87
   11e34:	e59f1010 	ldr	r1, [pc, #16]	; 11e4c <raise+0x44>
   11e38:	ebffe1a6 	bl	a4d8 <assertion_failed>
   11e3c:	e5940000 	ldr	r0, [r4]
   11e40:	eafffff5 	b	11e1c <raise+0x14>
   11e44:	00015ec8 	.word	0x00015ec8
   11e48:	00014468 	.word	0x00014468
   11e4c:	00014a70 	.word	0x00014a70

00011e50 <UndefinedInstructionInternal>:
   11e50:	e24ee004 	sub	lr, lr, #4
   11e54:	e92d4000 	stmfd	sp!, {lr}
   11e58:	e14fe000 	mrs	lr, SPSR
   11e5c:	e92d4000 	stmfd	sp!, {lr}
   11e60:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   11e64:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   11e68:	e1a0100d 	mov	r1, sp
   11e6c:	f1020012 	cps	#18
   11e70:	e1a0200d 	mov	r2, sp
   11e74:	e1a0300e 	mov	r3, lr
   11e78:	f1020011 	cps	#17
   11e7c:	e1a0400d 	mov	r4, sp
   11e80:	e1a0500e 	mov	r5, lr
   11e84:	f102001f 	cps	#31
   11e88:	e1a0d001 	mov	sp, r1
   11e8c:	e92d003c 	push	{r2, r3, r4, r5}
   11e90:	e1a0100d 	mov	r1, sp
   11e94:	e3a00001 	mov	r0, #1
   11e98:	eaffffbf 	b	11d9c <ExceptionHandler>

00011e9c <PrefetchAbortStub>:
   11e9c:	e24ee004 	sub	lr, lr, #4
   11ea0:	e92d4000 	stmfd	sp!, {lr}
   11ea4:	e14fe000 	mrs	lr, SPSR
   11ea8:	e92d4000 	stmfd	sp!, {lr}
   11eac:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   11eb0:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   11eb4:	e1a0100d 	mov	r1, sp
   11eb8:	f1020012 	cps	#18
   11ebc:	e1a0200d 	mov	r2, sp
   11ec0:	e1a0300e 	mov	r3, lr
   11ec4:	f1020011 	cps	#17
   11ec8:	e1a0400d 	mov	r4, sp
   11ecc:	e1a0500e 	mov	r5, lr
   11ed0:	f102001f 	cps	#31
   11ed4:	e1a0d001 	mov	sp, r1
   11ed8:	e92d003c 	push	{r2, r3, r4, r5}
   11edc:	e1a0100d 	mov	r1, sp
   11ee0:	e3a00002 	mov	r0, #2
   11ee4:	eaffffac 	b	11d9c <ExceptionHandler>

00011ee8 <DataAbortStub>:
   11ee8:	e24ee008 	sub	lr, lr, #8
   11eec:	e92d4000 	stmfd	sp!, {lr}
   11ef0:	e14fe000 	mrs	lr, SPSR
   11ef4:	e92d4000 	stmfd	sp!, {lr}
   11ef8:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   11efc:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   11f00:	e1a0100d 	mov	r1, sp
   11f04:	f1020012 	cps	#18
   11f08:	e1a0200d 	mov	r2, sp
   11f0c:	e1a0300e 	mov	r3, lr
   11f10:	f1020011 	cps	#17
   11f14:	e1a0400d 	mov	r4, sp
   11f18:	e1a0500e 	mov	r5, lr
   11f1c:	f102001f 	cps	#31
   11f20:	e1a0d001 	mov	sp, r1
   11f24:	e92d003c 	push	{r2, r3, r4, r5}
   11f28:	e1a0100d 	mov	r1, sp
   11f2c:	e3a00003 	mov	r0, #3
   11f30:	eaffff99 	b	11d9c <ExceptionHandler>

00011f34 <UndefinedInstructionStub>:
   11f34:	e92d4001 	push	{r0, lr}
   11f38:	eef80a10 	vmrs	r0, fpexc
   11f3c:	e3100102 	tst	r0, #-2147483648	; 0x80000000
   11f40:	0affffc2 	beq	11e50 <UndefinedInstructionInternal>
   11f44:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
   11f48:	eee80a10 	vmsr	fpexc, r0
   11f4c:	e8fd8001 	ldm	sp!, {r0, pc}^

00011f50 <IRQStub>:
   11f50:	e24ee004 	sub	lr, lr, #4
   11f54:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
   11f58:	ebffe8f1 	bl	c324 <InterruptHandler>
   11f5c:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^

00011f60 <FIQStub>:
   11f60:	e24ee004 	sub	lr, lr, #4
   11f64:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
   11f68:	e3a03000 	mov	r3, #0
   11f6c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   11f70:	e59f2040 	ldr	r2, [pc, #64]	; 11fb8 <FIQStub+0x58>
   11f74:	e5921000 	ldr	r1, [r2]
   11f78:	e3510000 	cmp	r1, #0
   11f7c:	0a000004 	beq	11f94 <FIQStub+0x34>
   11f80:	e5920004 	ldr	r0, [r2, #4]
   11f84:	e12fff31 	blx	r1
   11f88:	e3a03000 	mov	r3, #0
   11f8c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   11f90:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^
   11f94:	e3a03000 	mov	r3, #0
   11f98:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   11f9c:	e59f1018 	ldr	r1, [pc, #24]	; 11fbc <FIQStub+0x5c>
   11fa0:	e3a00000 	mov	r0, #0
   11fa4:	e5810000 	str	r0, [r1]
   11fa8:	e3a03000 	mov	r3, #0
   11fac:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   11fb0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   11fb4:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^
   11fb8:	00015dc4 	.word	0x00015dc4
   11fbc:	2000b20c 	.word	0x2000b20c

00011fc0 <CMemorySystem::~CMemorySystem()>:
   11fc0:	e59f3068 	ldr	r3, [pc, #104]	; 12030 <CMemorySystem::~CMemorySystem()+0x70>
   11fc4:	e92d4070 	push	{r4, r5, r6, lr}
   11fc8:	e5932000 	ldr	r2, [r3]
   11fcc:	e1a04000 	mov	r4, r0
   11fd0:	e1520000 	cmp	r2, r0
   11fd4:	0a000001 	beq	11fe0 <CMemorySystem::~CMemorySystem()+0x20>
   11fd8:	e1a00004 	mov	r0, r4
   11fdc:	e8bd8070 	pop	{r4, r5, r6, pc}
   11fe0:	e3a02000 	mov	r2, #0
   11fe4:	e5d01000 	ldrb	r1, [r0]
   11fe8:	e5832000 	str	r2, [r3]
   11fec:	e1510002 	cmp	r1, r2
   11ff0:	0a000004 	beq	12008 <CMemorySystem::~CMemorySystem()+0x48>
   11ff4:	ee111f10 	mrc	15, 0, r1, cr1, cr0, {0}
   11ff8:	e59f3034 	ldr	r3, [pc, #52]	; 12034 <CMemorySystem::~CMemorySystem()+0x74>
   11ffc:	e0033001 	and	r3, r3, r1
   12000:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
   12004:	ee082f17 	mcr	15, 0, r2, cr8, cr7, {0}
   12008:	e5945008 	ldr	r5, [r4, #8]
   1200c:	e3550000 	cmp	r5, #0
   12010:	0afffff0 	beq	11fd8 <CMemorySystem::~CMemorySystem()+0x18>
   12014:	e1a00005 	mov	r0, r5
   12018:	eb0000c5 	bl	12334 <CPageTable::~CPageTable()>
   1201c:	e1a00005 	mov	r0, r5
   12020:	e3a01004 	mov	r1, #4
   12024:	eb00012a 	bl	124d4 <operator delete(void*, unsigned int)>
   12028:	e1a00004 	mov	r0, r4
   1202c:	e8bd8070 	pop	{r4, r5, r6, pc}
   12030:	00015ecc 	.word	0x00015ecc
   12034:	ff7fe7fa 	.word	0xff7fe7fa

00012038 <CMemorySystem::GetMemSize() const>:
   12038:	e92d4010 	push	{r4, lr}
   1203c:	e59f402c 	ldr	r4, [pc, #44]	; 12070 <CMemorySystem::GetMemSize() const+0x38>
   12040:	e5943000 	ldr	r3, [r4]
   12044:	e3530000 	cmp	r3, #0
   12048:	0a000001 	beq	12054 <CMemorySystem::GetMemSize() const+0x1c>
   1204c:	e5930004 	ldr	r0, [r3, #4]
   12050:	e8bd8010 	pop	{r4, pc}
   12054:	e3a02082 	mov	r2, #130	; 0x82
   12058:	e59f1014 	ldr	r1, [pc, #20]	; 12074 <CMemorySystem::GetMemSize() const+0x3c>
   1205c:	e59f0014 	ldr	r0, [pc, #20]	; 12078 <CMemorySystem::GetMemSize() const+0x40>
   12060:	ebffe11c 	bl	a4d8 <assertion_failed>
   12064:	e5943000 	ldr	r3, [r4]
   12068:	e5930004 	ldr	r0, [r3, #4]
   1206c:	e8bd8010 	pop	{r4, pc}
   12070:	00015ecc 	.word	0x00015ecc
   12074:	00014b2c 	.word	0x00014b2c
   12078:	00014468 	.word	0x00014468

0001207c <CMemorySystem::Get()>:
   1207c:	e92d4010 	push	{r4, lr}
   12080:	e59f4020 	ldr	r4, [pc, #32]	; 120a8 <CMemorySystem::Get()+0x2c>
   12084:	e5940000 	ldr	r0, [r4]
   12088:	e3500000 	cmp	r0, #0
   1208c:	18bd8010 	popne	{r4, pc}
   12090:	e3a02088 	mov	r2, #136	; 0x88
   12094:	e59f1010 	ldr	r1, [pc, #16]	; 120ac <CMemorySystem::Get()+0x30>
   12098:	e59f0010 	ldr	r0, [pc, #16]	; 120b0 <CMemorySystem::Get()+0x34>
   1209c:	ebffe10d 	bl	a4d8 <assertion_failed>
   120a0:	e5940000 	ldr	r0, [r4]
   120a4:	e8bd8010 	pop	{r4, pc}
   120a8:	00015ecc 	.word	0x00015ecc
   120ac:	00014b2c 	.word	0x00014b2c
   120b0:	00014468 	.word	0x00014468

000120b4 <CMemorySystem::EnableMMU()>:
   120b4:	e5d03000 	ldrb	r3, [r0]
   120b8:	e92d4010 	push	{r4, lr}
   120bc:	e3530000 	cmp	r3, #0
   120c0:	e1a04000 	mov	r4, r0
   120c4:	0a00001c 	beq	1213c <CMemorySystem::EnableMMU()+0x88>
   120c8:	ee113f30 	mrc	15, 0, r3, cr1, cr0, {1}
   120cc:	e3833040 	orr	r3, r3, #64	; 0x40
   120d0:	ee013f30 	mcr	15, 0, r3, cr1, cr0, {1}
   120d4:	ee103f70 	mrc	15, 0, r3, cr0, cr0, {3}
   120d8:	e3130001 	tst	r3, #1
   120dc:	1a00001b 	bne	12150 <CMemorySystem::EnableMMU()+0x9c>
   120e0:	e3a03000 	mov	r3, #0
   120e4:	ee023f50 	mcr	15, 0, r3, cr2, cr0, {2}
   120e8:	e5940008 	ldr	r0, [r4, #8]
   120ec:	e1500003 	cmp	r0, r3
   120f0:	0a00001b 	beq	12164 <CMemorySystem::EnableMMU()+0xb0>
   120f4:	eb00008f 	bl	12338 <CPageTable::GetBaseAddress() const>
   120f8:	ee020f10 	mcr	15, 0, r0, cr2, cr0, {0}
   120fc:	e3a03001 	mov	r3, #1
   12100:	ee033f10 	mcr	15, 0, r3, cr3, cr0, {0}
   12104:	e3a03000 	mov	r3, #0
   12108:	ee073f16 	mcr	15, 0, r3, cr7, cr6, {0}
   1210c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   12110:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   12114:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   12118:	ee083f17 	mcr	15, 0, r3, cr8, cr7, {0}
   1211c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   12120:	ee073f95 	mcr	15, 0, r3, cr7, cr5, {4}
   12124:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
   12128:	e59f204c 	ldr	r2, [pc, #76]	; 1217c <CMemorySystem::EnableMMU()+0xc8>
   1212c:	e3c33002 	bic	r3, r3, #2
   12130:	e1832002 	orr	r2, r3, r2
   12134:	ee012f10 	mcr	15, 0, r2, cr1, cr0, {0}
   12138:	e8bd8010 	pop	{r4, pc}
   1213c:	e3a0208e 	mov	r2, #142	; 0x8e
   12140:	e59f1038 	ldr	r1, [pc, #56]	; 12180 <CMemorySystem::EnableMMU()+0xcc>
   12144:	e59f0038 	ldr	r0, [pc, #56]	; 12184 <CMemorySystem::EnableMMU()+0xd0>
   12148:	ebffe0e2 	bl	a4d8 <assertion_failed>
   1214c:	eaffffdd 	b	120c8 <CMemorySystem::EnableMMU()+0x14>
   12150:	e3a0209b 	mov	r2, #155	; 0x9b
   12154:	e59f1024 	ldr	r1, [pc, #36]	; 12180 <CMemorySystem::EnableMMU()+0xcc>
   12158:	e59f0028 	ldr	r0, [pc, #40]	; 12188 <CMemorySystem::EnableMMU()+0xd4>
   1215c:	ebffe0dd 	bl	a4d8 <assertion_failed>
   12160:	eaffffde 	b	120e0 <CMemorySystem::EnableMMU()+0x2c>
   12164:	e59f0020 	ldr	r0, [pc, #32]	; 1218c <CMemorySystem::EnableMMU()+0xd8>
   12168:	e3a020a1 	mov	r2, #161	; 0xa1
   1216c:	e59f100c 	ldr	r1, [pc, #12]	; 12180 <CMemorySystem::EnableMMU()+0xcc>
   12170:	ebffe0d8 	bl	a4d8 <assertion_failed>
   12174:	e5940008 	ldr	r0, [r4, #8]
   12178:	eaffffdd 	b	120f4 <CMemorySystem::EnableMMU()+0x40>
   1217c:	00c01805 	.word	0x00c01805
   12180:	00014b2c 	.word	0x00014b2c
   12184:	00014b38 	.word	0x00014b38
   12188:	00014b48 	.word	0x00014b48
   1218c:	00014b74 	.word	0x00014b74

00012190 <CMemorySystem::CMemorySystem(bool)>:
   12190:	e3a03000 	mov	r3, #0
   12194:	e92d4030 	push	{r4, r5, lr}
   12198:	e59f20d0 	ldr	r2, [pc, #208]	; 12270 <CMemorySystem::CMemorySystem(bool)+0xe0>
   1219c:	e24dd024 	sub	sp, sp, #36	; 0x24
   121a0:	e5925000 	ldr	r5, [r2]
   121a4:	e1a04000 	mov	r4, r0
   121a8:	e1550003 	cmp	r5, r3
   121ac:	e5c01000 	strb	r1, [r0]
   121b0:	e5803004 	str	r3, [r0, #4]
   121b4:	e5803008 	str	r3, [r0, #8]
   121b8:	0a000002 	beq	121c8 <CMemorySystem::CMemorySystem(bool)+0x38>
   121bc:	e1a00004 	mov	r0, r4
   121c0:	e28dd024 	add	sp, sp, #36	; 0x24
   121c4:	e8bd8030 	pop	{r4, r5, pc}
   121c8:	e28d0008 	add	r0, sp, #8
   121cc:	e5824000 	str	r4, [r2]
   121d0:	ebffe0e4 	bl	a568 <CBcmPropertyTags::CBcmPropertyTags()>
   121d4:	e58d5000 	str	r5, [sp]
   121d8:	e28d0008 	add	r0, sp, #8
   121dc:	e3a03014 	mov	r3, #20
   121e0:	e28d200c 	add	r2, sp, #12
   121e4:	e59f1088 	ldr	r1, [pc, #136]	; 12274 <CMemorySystem::CMemorySystem(bool)+0xe4>
   121e8:	ebffe135 	bl	a6c4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   121ec:	e3500000 	cmp	r0, #0
   121f0:	0a000018 	beq	12258 <CMemorySystem::CMemorySystem(bool)+0xc8>
   121f4:	e59d0018 	ldr	r0, [sp, #24]
   121f8:	e3500000 	cmp	r0, #0
   121fc:	0a000019 	beq	12268 <CMemorySystem::CMemorySystem(bool)+0xd8>
   12200:	e59f1070 	ldr	r1, [pc, #112]	; 12278 <CMemorySystem::CMemorySystem(bool)+0xe8>
   12204:	e59f0070 	ldr	r0, [pc, #112]	; 1227c <CMemorySystem::CMemorySystem(bool)+0xec>
   12208:	e3a02047 	mov	r2, #71	; 0x47
   1220c:	ebffe0b1 	bl	a4d8 <assertion_failed>
   12210:	e59d101c 	ldr	r1, [sp, #28]
   12214:	e59d0018 	ldr	r0, [sp, #24]
   12218:	e5841004 	str	r1, [r4, #4]
   1221c:	eb0000ae 	bl	124dc <mem_init>
   12220:	e5d43000 	ldrb	r3, [r4]
   12224:	e3530000 	cmp	r3, #0
   12228:	0a000007 	beq	1224c <CMemorySystem::CMemorySystem(bool)+0xbc>
   1222c:	e3a00004 	mov	r0, #4
   12230:	eb0000a3 	bl	124c4 <operator new(unsigned int)>
   12234:	e1a05000 	mov	r5, r0
   12238:	e5941004 	ldr	r1, [r4, #4]
   1223c:	eb000012 	bl	1228c <CPageTable::CPageTable(unsigned int)>
   12240:	e5845008 	str	r5, [r4, #8]
   12244:	e1a00004 	mov	r0, r4
   12248:	ebffff99 	bl	120b4 <CMemorySystem::EnableMMU()>
   1224c:	e28d0008 	add	r0, sp, #8
   12250:	ebffe0ca 	bl	a580 <CBcmPropertyTags::~CBcmPropertyTags()>
   12254:	eaffffd8 	b	121bc <CMemorySystem::CMemorySystem(bool)+0x2c>
   12258:	e3a01303 	mov	r1, #201326592	; 0xc000000
   1225c:	e58d0018 	str	r0, [sp, #24]
   12260:	e58d101c 	str	r1, [sp, #28]
   12264:	eaffffeb 	b	12218 <CMemorySystem::CMemorySystem(bool)+0x88>
   12268:	e59d101c 	ldr	r1, [sp, #28]
   1226c:	eaffffe9 	b	12218 <CMemorySystem::CMemorySystem(bool)+0x88>
   12270:	00015ecc 	.word	0x00015ecc
   12274:	00010005 	.word	0x00010005
   12278:	00014b2c 	.word	0x00014b2c
   1227c:	00014b88 	.word	0x00014b88

00012280 <CMemorySystem::GetCoherentPage(unsigned int)>:
   12280:	e1a00600 	lsl	r0, r0, #12
   12284:	e2800501 	add	r0, r0, #4194304	; 0x400000
   12288:	e12fff1e 	bx	lr

0001228c <CPageTable::CPageTable(unsigned int)>:
   1228c:	e3a02709 	mov	r2, #2359296	; 0x240000
   12290:	e3a03000 	mov	r3, #0
   12294:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   12298:	e59fc074 	ldr	ip, [pc, #116]	; 12314 <CPageTable::CPageTable(unsigned int)+0x88>
   1229c:	e59f4074 	ldr	r4, [pc, #116]	; 12318 <CPageTable::CPageTable(unsigned int)+0x8c>
   122a0:	e59f5074 	ldr	r5, [pc, #116]	; 1231c <CPageTable::CPageTable(unsigned int)+0x90>
   122a4:	e59f9074 	ldr	r9, [pc, #116]	; 12320 <CPageTable::CPageTable(unsigned int)+0x94>
   122a8:	e59f8074 	ldr	r8, [pc, #116]	; 12324 <CPageTable::CPageTable(unsigned int)+0x98>
   122ac:	e59f7074 	ldr	r7, [pc, #116]	; 12328 <CPageTable::CPageTable(unsigned int)+0x9c>
   122b0:	e59f6074 	ldr	r6, [pc, #116]	; 1232c <CPageTable::CPageTable(unsigned int)+0xa0>
   122b4:	e59fe074 	ldr	lr, [pc, #116]	; 12330 <CPageTable::CPageTable(unsigned int)+0xa4>
   122b8:	e5802000 	str	r2, [r0]
   122bc:	e1530004 	cmp	r3, r4
   122c0:	31a02005 	movcc	r2, r5
   122c4:	3a000007 	bcc	122e8 <CPageTable::CPageTable(unsigned int)+0x5c>
   122c8:	e3530501 	cmp	r3, #4194304	; 0x400000
   122cc:	0a00000e 	beq	1230c <CPageTable::CPageTable(unsigned int)+0x80>
   122d0:	e1510003 	cmp	r1, r3
   122d4:	81a02008 	movhi	r2, r8
   122d8:	8a000002 	bhi	122e8 <CPageTable::CPageTable(unsigned int)+0x5c>
   122dc:	e1530007 	cmp	r3, r7
   122e0:	91a02006 	movls	r2, r6
   122e4:	83a02000 	movhi	r2, #0
   122e8:	e1822003 	orr	r2, r2, r3
   122ec:	e5ac2004 	str	r2, [ip, #4]!
   122f0:	e15c000e 	cmp	ip, lr
   122f4:	e2833601 	add	r3, r3, #1048576	; 0x100000
   122f8:	1affffef 	bne	122bc <CPageTable::CPageTable(unsigned int)+0x30>
   122fc:	e3a03000 	mov	r3, #0
   12300:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
   12304:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   12308:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1230c:	e1a02009 	mov	r2, r9
   12310:	eafffff4 	b	122e8 <CPageTable::CPageTable(unsigned int)+0x5c>
   12314:	0023fffc 	.word	0x0023fffc
   12318:	000139fc 	.word	0x000139fc
   1231c:	0000040e 	.word	0x0000040e
   12320:	00010412 	.word	0x00010412
   12324:	0000041e 	.word	0x0000041e
   12328:	20fffffe 	.word	0x20fffffe
   1232c:	00010416 	.word	0x00010416
   12330:	00243ffc 	.word	0x00243ffc

00012334 <CPageTable::~CPageTable()>:
   12334:	e12fff1e 	bx	lr

00012338 <CPageTable::GetBaseAddress() const>:
   12338:	e5900000 	ldr	r0, [r0]
   1233c:	e3800001 	orr	r0, r0, #1
   12340:	e12fff1e 	bx	lr

00012344 <CurrentExecutionLevel>:
   12344:	e10f0000 	mrs	r0, CPSR
   12348:	e3100040 	tst	r0, #64	; 0x40
   1234c:	01a003a0 	lsreq	r0, r0, #7
   12350:	02000001 	andeq	r0, r0, #1
   12354:	13a00002 	movne	r0, #2
   12358:	e12fff1e 	bx	lr

0001235c <EnterCritical>:
   1235c:	e2403001 	sub	r3, r0, #1
   12360:	e3530001 	cmp	r3, #1
   12364:	e92d4070 	push	{r4, r5, r6, lr}
   12368:	e1a05000 	mov	r5, r0
   1236c:	9a000003 	bls	12380 <EnterCritical+0x24>
   12370:	e3a02064 	mov	r2, #100	; 0x64
   12374:	e59f1080 	ldr	r1, [pc, #128]	; 123fc <EnterCritical+0xa0>
   12378:	e59f0080 	ldr	r0, [pc, #128]	; 12400 <EnterCritical+0xa4>
   1237c:	ebffe055 	bl	a4d8 <assertion_failed>
   12380:	e10f6000 	mrs	r6, CPSR
   12384:	e3550002 	cmp	r5, #2
   12388:	0a000001 	beq	12394 <EnterCritical+0x38>
   1238c:	e3160040 	tst	r6, #64	; 0x40
   12390:	1a000014 	bne	123e8 <EnterCritical+0x8c>
   12394:	f10c00c0 	cpsid	if
   12398:	e59f4064 	ldr	r4, [pc, #100]	; 12404 <EnterCritical+0xa8>
   1239c:	e5943000 	ldr	r3, [r4]
   123a0:	e3530013 	cmp	r3, #19
   123a4:	8a00000a 	bhi	123d4 <EnterCritical+0x78>
   123a8:	e5943000 	ldr	r3, [r4]
   123ac:	e3550001 	cmp	r5, #1
   123b0:	e2832001 	add	r2, r3, #1
   123b4:	e0843103 	add	r3, r4, r3, lsl #2
   123b8:	e5842000 	str	r2, [r4]
   123bc:	e5836004 	str	r6, [r3, #4]
   123c0:	1a000000 	bne	123c8 <EnterCritical+0x6c>
   123c4:	f1080040 	cpsie	f
   123c8:	e3a03000 	mov	r3, #0
   123cc:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   123d0:	e8bd8070 	pop	{r4, r5, r6, pc}
   123d4:	e3a0206e 	mov	r2, #110	; 0x6e
   123d8:	e59f101c 	ldr	r1, [pc, #28]	; 123fc <EnterCritical+0xa0>
   123dc:	e59f0024 	ldr	r0, [pc, #36]	; 12408 <EnterCritical+0xac>
   123e0:	ebffe03c 	bl	a4d8 <assertion_failed>
   123e4:	eaffffef 	b	123a8 <EnterCritical+0x4c>
   123e8:	e3a0206a 	mov	r2, #106	; 0x6a
   123ec:	e59f1008 	ldr	r1, [pc, #8]	; 123fc <EnterCritical+0xa0>
   123f0:	e59f0014 	ldr	r0, [pc, #20]	; 1240c <EnterCritical+0xb0>
   123f4:	ebffe037 	bl	a4d8 <assertion_failed>
   123f8:	eaffffe5 	b	12394 <EnterCritical+0x38>
   123fc:	00014ba4 	.word	0x00014ba4
   12400:	00014bb4 	.word	0x00014bb4
   12404:	00015ed0 	.word	0x00015ed0
   12408:	00014c1c 	.word	0x00014c1c
   1240c:	00014bec 	.word	0x00014bec

00012410 <LeaveCritical>:
   12410:	e92d4010 	push	{r4, lr}
   12414:	e3a03000 	mov	r3, #0
   12418:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   1241c:	f10c0040 	cpsid	f
   12420:	e59f4034 	ldr	r4, [pc, #52]	; 1245c <LeaveCritical+0x4c>
   12424:	e5943000 	ldr	r3, [r4]
   12428:	e3530000 	cmp	r3, #0
   1242c:	1a000003 	bne	12440 <LeaveCritical+0x30>
   12430:	e3a0207f 	mov	r2, #127	; 0x7f
   12434:	e59f1024 	ldr	r1, [pc, #36]	; 12460 <LeaveCritical+0x50>
   12438:	e59f0024 	ldr	r0, [pc, #36]	; 12464 <LeaveCritical+0x54>
   1243c:	ebffe025 	bl	a4d8 <assertion_failed>
   12440:	e5943000 	ldr	r3, [r4]
   12444:	e2433001 	sub	r3, r3, #1
   12448:	e5843000 	str	r3, [r4]
   1244c:	e0844103 	add	r4, r4, r3, lsl #2
   12450:	e5943004 	ldr	r3, [r4, #4]
   12454:	e121f003 	msr	CPSR_c, r3
   12458:	e8bd8010 	pop	{r4, pc}
   1245c:	00015ed0 	.word	0x00015ed0
   12460:	00014ba4 	.word	0x00014ba4
   12464:	00014c44 	.word	0x00014c44

00012468 <CleanAndInvalidateDataCacheRange>:
   12468:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
   1246c:	e2813020 	add	r3, r1, #32
   12470:	e353001f 	cmp	r3, #31
   12474:	82800020 	addhi	r0, r0, #32
   12478:	83c1101f 	bichi	r1, r1, #31
   1247c:	80801001 	addhi	r1, r0, r1
   12480:	8a000001 	bhi	1248c <CleanAndInvalidateDataCacheRange+0x24>
   12484:	ea000003 	b	12498 <CleanAndInvalidateDataCacheRange+0x30>
   12488:	e2800020 	add	r0, r0, #32
   1248c:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
   12490:	e1510000 	cmp	r1, r0
   12494:	1afffffb 	bne	12488 <CleanAndInvalidateDataCacheRange+0x20>
   12498:	e3a03000 	mov	r3, #0
   1249c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   124a0:	e12fff1e 	bx	lr

000124a4 <SyncDataAndInstructionCache>:
   124a4:	e3a03000 	mov	r3, #0
   124a8:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
   124ac:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   124b0:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   124b4:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   124b8:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   124bc:	ee073f95 	mcr	15, 0, r3, cr7, cr5, {4}
   124c0:	e12fff1e 	bx	lr

000124c4 <operator new(unsigned int)>:
   124c4:	ea00001d 	b	12540 <malloc>

000124c8 <operator new[](unsigned int)>:
   124c8:	ea00001c 	b	12540 <malloc>

000124cc <operator delete(void*)>:
   124cc:	ea000099 	b	12738 <free>

000124d0 <operator delete[](void*)>:
   124d0:	ea000098 	b	12738 <free>

000124d4 <operator delete(void*, unsigned int)>:
   124d4:	ea000097 	b	12738 <free>

000124d8 <operator delete[](void*, unsigned int)>:
   124d8:	ea000096 	b	12738 <free>

000124dc <mem_init>:
   124dc:	e3500605 	cmp	r0, #5242880	; 0x500000
   124e0:	21a0c000 	movcs	ip, r0
   124e4:	33a0c605 	movcc	ip, #5242880	; 0x500000
   124e8:	e0801001 	add	r1, r0, r1
   124ec:	e24139ff 	sub	r3, r1, #4177920	; 0x3fc000
   124f0:	e2433a03 	sub	r3, r3, #12288	; 0x3000
   124f4:	e59f2018 	ldr	r2, [pc, #24]	; 12514 <mem_init+0x38>
   124f8:	e3c33eff 	bic	r3, r3, #4080	; 0xff0
   124fc:	e2410501 	sub	r0, r1, #4194304	; 0x400000
   12500:	e3c3300f 	bic	r3, r3, #15
   12504:	e582c000 	str	ip, [r2]
   12508:	e582100c 	str	r1, [r2, #12]
   1250c:	e9820009 	stmib	r2, {r0, r3}
   12510:	e12fff1e 	bx	lr
   12514:	00015f24 	.word	0x00015f24

00012518 <mem_get_size>:
   12518:	e59f301c 	ldr	r3, [pc, #28]	; 1253c <mem_get_size+0x24>
   1251c:	e5930004 	ldr	r0, [r3, #4]
   12520:	e5931000 	ldr	r1, [r3]
   12524:	e593200c 	ldr	r2, [r3, #12]
   12528:	e5933008 	ldr	r3, [r3, #8]
   1252c:	e0400001 	sub	r0, r0, r1
   12530:	e0423003 	sub	r3, r2, r3
   12534:	e0800003 	add	r0, r0, r3
   12538:	e12fff1e 	bx	lr
   1253c:	00015f24 	.word	0x00015f24

00012540 <malloc>:
   12540:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   12544:	e59f71c8 	ldr	r7, [pc, #456]	; 12714 <malloc+0x1d4>
   12548:	e1a05000 	mov	r5, r0
   1254c:	e5973000 	ldr	r3, [r7]
   12550:	e3530000 	cmp	r3, #0
   12554:	0a000069 	beq	12700 <malloc+0x1c0>
   12558:	e5970010 	ldr	r0, [r7, #16]
   1255c:	e3500000 	cmp	r0, #0
   12560:	1a000057 	bne	126c4 <malloc+0x184>
   12564:	e59f21ac 	ldr	r2, [pc, #428]	; 12718 <malloc+0x1d8>
   12568:	e5923000 	ldr	r3, [r2]
   1256c:	e3530000 	cmp	r3, #0
   12570:	0a000008 	beq	12598 <malloc+0x58>
   12574:	e1550003 	cmp	r5, r3
   12578:	e1a04002 	mov	r4, r2
   1257c:	8a000002 	bhi	1258c <malloc+0x4c>
   12580:	ea000024 	b	12618 <malloc+0xd8>
   12584:	e1530005 	cmp	r3, r5
   12588:	2a000022 	bcs	12618 <malloc+0xd8>
   1258c:	e5b43008 	ldr	r3, [r4, #8]!
   12590:	e3530000 	cmp	r3, #0
   12594:	1afffffa 	bne	12584 <malloc+0x44>
   12598:	e5976000 	ldr	r6, [r7]
   1259c:	e285301f 	add	r3, r5, #31
   125a0:	e3c3300f 	bic	r3, r3, #15
   125a4:	e0863003 	add	r3, r6, r3
   125a8:	e1560003 	cmp	r6, r3
   125ac:	2a000046 	bcs	126cc <malloc+0x18c>
   125b0:	e5971004 	ldr	r1, [r7, #4]
   125b4:	e5920040 	ldr	r0, [r2, #64]	; 0x40
   125b8:	e0411000 	sub	r1, r1, r0
   125bc:	e1530001 	cmp	r3, r1
   125c0:	8a000041 	bhi	126cc <malloc+0x18c>
   125c4:	e3a0e043 	mov	lr, #67	; 0x43
   125c8:	e3a0c04d 	mov	ip, #77	; 0x4d
   125cc:	e3a0004c 	mov	r0, #76	; 0x4c
   125d0:	e3a01042 	mov	r1, #66	; 0x42
   125d4:	e5873000 	str	r3, [r7]
   125d8:	e1a03825 	lsr	r3, r5, #16
   125dc:	e5c63006 	strb	r3, [r6, #6]
   125e0:	e5973010 	ldr	r3, [r7, #16]
   125e4:	e1a02425 	lsr	r2, r5, #8
   125e8:	e5c65004 	strb	r5, [r6, #4]
   125ec:	e3530000 	cmp	r3, #0
   125f0:	e1a05c25 	lsr	r5, r5, #24
   125f4:	e5c6e000 	strb	lr, [r6]
   125f8:	e5c6c001 	strb	ip, [r6, #1]
   125fc:	e5c60002 	strb	r0, [r6, #2]
   12600:	e5c61003 	strb	r1, [r6, #3]
   12604:	e5c62005 	strb	r2, [r6, #5]
   12608:	e5c65007 	strb	r5, [r6, #7]
   1260c:	0a00001e 	beq	1268c <malloc+0x14c>
   12610:	ebffff7e 	bl	12410 <LeaveCritical>
   12614:	ea00001c 	b	1268c <malloc+0x14c>
   12618:	e5946004 	ldr	r6, [r4, #4]
   1261c:	e3560000 	cmp	r6, #0
   12620:	01a05003 	moveq	r5, r3
   12624:	0affffdb 	beq	12598 <malloc+0x58>
   12628:	e5d61001 	ldrb	r1, [r6, #1]
   1262c:	e5d63000 	ldrb	r3, [r6]
   12630:	e5d62002 	ldrb	r2, [r6, #2]
   12634:	e1833401 	orr	r3, r3, r1, lsl #8
   12638:	e5d61003 	ldrb	r1, [r6, #3]
   1263c:	e1833802 	orr	r3, r3, r2, lsl #16
   12640:	e59f20d4 	ldr	r2, [pc, #212]	; 1271c <malloc+0x1dc>
   12644:	e1833c01 	orr	r3, r3, r1, lsl #24
   12648:	e1530002 	cmp	r3, r2
   1264c:	0a000003 	beq	12660 <malloc+0x120>
   12650:	e3a0208a 	mov	r2, #138	; 0x8a
   12654:	e59f10c4 	ldr	r1, [pc, #196]	; 12720 <malloc+0x1e0>
   12658:	e59f00c4 	ldr	r0, [pc, #196]	; 12724 <malloc+0x1e4>
   1265c:	ebffdf9d 	bl	a4d8 <assertion_failed>
   12660:	e5d62009 	ldrb	r2, [r6, #9]
   12664:	e5d63008 	ldrb	r3, [r6, #8]
   12668:	e5d6100a 	ldrb	r1, [r6, #10]
   1266c:	e1833402 	orr	r3, r3, r2, lsl #8
   12670:	e5d6200b 	ldrb	r2, [r6, #11]
   12674:	e1833801 	orr	r3, r3, r1, lsl #16
   12678:	e1833c02 	orr	r3, r3, r2, lsl #24
   1267c:	e5843004 	str	r3, [r4, #4]
   12680:	e5973010 	ldr	r3, [r7, #16]
   12684:	e3530000 	cmp	r3, #0
   12688:	1affffe0 	bne	12610 <malloc+0xd0>
   1268c:	e3a03000 	mov	r3, #0
   12690:	e2864010 	add	r4, r6, #16
   12694:	e314000f 	tst	r4, #15
   12698:	e5c63008 	strb	r3, [r6, #8]
   1269c:	e5c63009 	strb	r3, [r6, #9]
   126a0:	e5c6300a 	strb	r3, [r6, #10]
   126a4:	e5c6300b 	strb	r3, [r6, #11]
   126a8:	0a000003 	beq	126bc <malloc+0x17c>
   126ac:	e3a020b3 	mov	r2, #179	; 0xb3
   126b0:	e59f1068 	ldr	r1, [pc, #104]	; 12720 <malloc+0x1e0>
   126b4:	e59f006c 	ldr	r0, [pc, #108]	; 12728 <malloc+0x1e8>
   126b8:	ebffdf86 	bl	a4d8 <assertion_failed>
   126bc:	e1a00004 	mov	r0, r4
   126c0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   126c4:	ebffff24 	bl	1235c <EnterCritical>
   126c8:	eaffffa5 	b	12564 <malloc+0x24>
   126cc:	e3a01000 	mov	r1, #0
   126d0:	e5973010 	ldr	r3, [r7, #16]
   126d4:	e5821040 	str	r1, [r2, #64]	; 0x40
   126d8:	e1530001 	cmp	r3, r1
   126dc:	0a000000 	beq	126e4 <malloc+0x1a4>
   126e0:	ebffff4a 	bl	12410 <LeaveCritical>
   126e4:	ebffe8a4 	bl	c97c <CLogger::Get()>
   126e8:	e59f303c 	ldr	r3, [pc, #60]	; 1272c <malloc+0x1ec>
   126ec:	e3a02000 	mov	r2, #0
   126f0:	e59f1038 	ldr	r1, [pc, #56]	; 12730 <malloc+0x1f0>
   126f4:	ebffea49 	bl	d020 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   126f8:	e3a04000 	mov	r4, #0
   126fc:	eaffffee 	b	126bc <malloc+0x17c>
   12700:	e3a02070 	mov	r2, #112	; 0x70
   12704:	e59f1014 	ldr	r1, [pc, #20]	; 12720 <malloc+0x1e0>
   12708:	e59f0024 	ldr	r0, [pc, #36]	; 12734 <malloc+0x1f4>
   1270c:	ebffdf71 	bl	a4d8 <assertion_failed>
   12710:	eaffff90 	b	12558 <malloc+0x18>
   12714:	00015f24 	.word	0x00015f24
   12718:	00015dcc 	.word	0x00015dcc
   1271c:	424c4d43 	.word	0x424c4d43
   12720:	00014c5c 	.word	0x00014c5c
   12724:	00014c7c 	.word	0x00014c7c
   12728:	00014cb8 	.word	0x00014cb8
   1272c:	00014ca0 	.word	0x00014ca0
   12730:	00014cb0 	.word	0x00014cb0
   12734:	00014c68 	.word	0x00014c68

00012738 <free>:
   12738:	e3500000 	cmp	r0, #0
   1273c:	012fff1e 	bxeq	lr
   12740:	e92d4070 	push	{r4, r5, r6, lr}
   12744:	e2405010 	sub	r5, r0, #16
   12748:	e5d51001 	ldrb	r1, [r5, #1]
   1274c:	e5503010 	ldrb	r3, [r0, #-16]
   12750:	e5d52002 	ldrb	r2, [r5, #2]
   12754:	e1833401 	orr	r3, r3, r1, lsl #8
   12758:	e5d51003 	ldrb	r1, [r5, #3]
   1275c:	e1833802 	orr	r3, r3, r2, lsl #16
   12760:	e59f20dc 	ldr	r2, [pc, #220]	; 12844 <free+0x10c>
   12764:	e1833c01 	orr	r3, r3, r1, lsl #24
   12768:	e1530002 	cmp	r3, r2
   1276c:	0a000003 	beq	12780 <free+0x48>
   12770:	e3a020c0 	mov	r2, #192	; 0xc0
   12774:	e59f10cc 	ldr	r1, [pc, #204]	; 12848 <free+0x110>
   12778:	e59f00cc 	ldr	r0, [pc, #204]	; 1284c <free+0x114>
   1277c:	ebffdf55 	bl	a4d8 <assertion_failed>
   12780:	e59f40c8 	ldr	r4, [pc, #200]	; 12850 <free+0x118>
   12784:	e5943000 	ldr	r3, [r4]
   12788:	e3530000 	cmp	r3, #0
   1278c:	08bd8070 	popeq	{r4, r5, r6, pc}
   12790:	e5d51005 	ldrb	r1, [r5, #5]
   12794:	e5d52004 	ldrb	r2, [r5, #4]
   12798:	e5d50006 	ldrb	r0, [r5, #6]
   1279c:	e1822401 	orr	r2, r2, r1, lsl #8
   127a0:	e5d51007 	ldrb	r1, [r5, #7]
   127a4:	e1822800 	orr	r2, r2, r0, lsl #16
   127a8:	e1822c01 	orr	r2, r2, r1, lsl #24
   127ac:	e1520003 	cmp	r2, r3
   127b0:	1a000002 	bne	127c0 <free+0x88>
   127b4:	ea000005 	b	127d0 <free+0x98>
   127b8:	e1530002 	cmp	r3, r2
   127bc:	0a000003 	beq	127d0 <free+0x98>
   127c0:	e5b43008 	ldr	r3, [r4, #8]!
   127c4:	e3530000 	cmp	r3, #0
   127c8:	1afffffa 	bne	127b8 <free+0x80>
   127cc:	e8bd8070 	pop	{r4, r5, r6, pc}
   127d0:	e59f607c 	ldr	r6, [pc, #124]	; 12854 <free+0x11c>
   127d4:	e5960010 	ldr	r0, [r6, #16]
   127d8:	e3500000 	cmp	r0, #0
   127dc:	1a000009 	bne	12808 <free+0xd0>
   127e0:	e5d40004 	ldrb	r0, [r4, #4]
   127e4:	e5d41005 	ldrb	r1, [r4, #5]
   127e8:	e5d42006 	ldrb	r2, [r4, #6]
   127ec:	e5d43007 	ldrb	r3, [r4, #7]
   127f0:	e5c50008 	strb	r0, [r5, #8]
   127f4:	e5c51009 	strb	r1, [r5, #9]
   127f8:	e5c5200a 	strb	r2, [r5, #10]
   127fc:	e5c5300b 	strb	r3, [r5, #11]
   12800:	e5845004 	str	r5, [r4, #4]
   12804:	e8bd8070 	pop	{r4, r5, r6, pc}
   12808:	ebfffed3 	bl	1235c <EnterCritical>
   1280c:	e596c010 	ldr	ip, [r6, #16]
   12810:	e5d40004 	ldrb	r0, [r4, #4]
   12814:	e5d41005 	ldrb	r1, [r4, #5]
   12818:	e5d42006 	ldrb	r2, [r4, #6]
   1281c:	e5d43007 	ldrb	r3, [r4, #7]
   12820:	e35c0000 	cmp	ip, #0
   12824:	e5c50008 	strb	r0, [r5, #8]
   12828:	e5c51009 	strb	r1, [r5, #9]
   1282c:	e5c5200a 	strb	r2, [r5, #10]
   12830:	e5c5300b 	strb	r3, [r5, #11]
   12834:	e5845004 	str	r5, [r4, #4]
   12838:	08bd8070 	popeq	{r4, r5, r6, pc}
   1283c:	e8bd4070 	pop	{r4, r5, r6, lr}
   12840:	eafffef2 	b	12410 <LeaveCritical>
   12844:	424c4d43 	.word	0x424c4d43
   12848:	00014c5c 	.word	0x00014c5c
   1284c:	00014c7c 	.word	0x00014c7c
   12850:	00015dcc 	.word	0x00015dcc
   12854:	00015f24 	.word	0x00015f24

00012858 <calloc>:
   12858:	e92d4070 	push	{r4, r5, r6, lr}
   1285c:	e0040190 	mul	r4, r0, r1
   12860:	e3540000 	cmp	r4, #0
   12864:	03a04001 	moveq	r4, #1
   12868:	e1540000 	cmp	r4, r0
   1286c:	3a000008 	bcc	12894 <calloc+0x3c>
   12870:	e1a00004 	mov	r0, r4
   12874:	ebffff31 	bl	12540 <malloc>
   12878:	e2505000 	subs	r5, r0, #0
   1287c:	0a000002 	beq	1288c <calloc+0x34>
   12880:	e1a02004 	mov	r2, r4
   12884:	e3a01000 	mov	r1, #0
   12888:	ebfffa9f 	bl	1130c <memset>
   1288c:	e1a00005 	mov	r0, r5
   12890:	e8bd8070 	pop	{r4, r5, r6, pc}
   12894:	e3a020e2 	mov	r2, #226	; 0xe2
   12898:	e59f1008 	ldr	r1, [pc, #8]	; 128a8 <calloc+0x50>
   1289c:	e59f0008 	ldr	r0, [pc, #8]	; 128ac <calloc+0x54>
   128a0:	ebffdf0c 	bl	a4d8 <assertion_failed>
   128a4:	eafffff1 	b	12870 <calloc+0x18>
   128a8:	00014c5c 	.word	0x00014c5c
   128ac:	00014ce4 	.word	0x00014ce4

000128b0 <realloc>:
   128b0:	e92d4070 	push	{r4, r5, r6, lr}
   128b4:	e2505000 	subs	r5, r0, #0
   128b8:	e1a06001 	mov	r6, r1
   128bc:	0a00002d 	beq	12978 <realloc+0xc8>
   128c0:	e3510000 	cmp	r1, #0
   128c4:	0a000027 	beq	12968 <realloc+0xb8>
   128c8:	e2454010 	sub	r4, r5, #16
   128cc:	e5d41001 	ldrb	r1, [r4, #1]
   128d0:	e5553010 	ldrb	r3, [r5, #-16]
   128d4:	e5d42002 	ldrb	r2, [r4, #2]
   128d8:	e1833401 	orr	r3, r3, r1, lsl #8
   128dc:	e5d41003 	ldrb	r1, [r4, #3]
   128e0:	e1833802 	orr	r3, r3, r2, lsl #16
   128e4:	e59f20a0 	ldr	r2, [pc, #160]	; 1298c <realloc+0xdc>
   128e8:	e1833c01 	orr	r3, r3, r1, lsl #24
   128ec:	e1530002 	cmp	r3, r2
   128f0:	0a000003 	beq	12904 <realloc+0x54>
   128f4:	e3a020fc 	mov	r2, #252	; 0xfc
   128f8:	e59f1090 	ldr	r1, [pc, #144]	; 12990 <realloc+0xe0>
   128fc:	e59f0090 	ldr	r0, [pc, #144]	; 12994 <realloc+0xe4>
   12900:	ebffdef4 	bl	a4d8 <assertion_failed>
   12904:	e5d42005 	ldrb	r2, [r4, #5]
   12908:	e5d43004 	ldrb	r3, [r4, #4]
   1290c:	e5d41006 	ldrb	r1, [r4, #6]
   12910:	e1833402 	orr	r3, r3, r2, lsl #8
   12914:	e5d42007 	ldrb	r2, [r4, #7]
   12918:	e1833801 	orr	r3, r3, r1, lsl #16
   1291c:	e1833c02 	orr	r3, r3, r2, lsl #24
   12920:	e1560003 	cmp	r6, r3
   12924:	8a000001 	bhi	12930 <realloc+0x80>
   12928:	e1a00005 	mov	r0, r5
   1292c:	e8bd8070 	pop	{r4, r5, r6, pc}
   12930:	e1a00006 	mov	r0, r6
   12934:	ebffff01 	bl	12540 <malloc>
   12938:	e2506000 	subs	r6, r0, #0
   1293c:	0a000010 	beq	12984 <realloc+0xd4>
   12940:	e5d42005 	ldrb	r2, [r4, #5]
   12944:	e5d43004 	ldrb	r3, [r4, #4]
   12948:	e5d41006 	ldrb	r1, [r4, #6]
   1294c:	e1833402 	orr	r3, r3, r2, lsl #8
   12950:	e5d42007 	ldrb	r2, [r4, #7]
   12954:	e1833801 	orr	r3, r3, r1, lsl #16
   12958:	e1832c02 	orr	r2, r3, r2, lsl #24
   1295c:	e1a01005 	mov	r1, r5
   12960:	ebfffbdb 	bl	118d4 <memcpy>
   12964:	e1a00005 	mov	r0, r5
   12968:	e1a05006 	mov	r5, r6
   1296c:	ebffff71 	bl	12738 <free>
   12970:	e1a00005 	mov	r0, r5
   12974:	e8bd8070 	pop	{r4, r5, r6, pc}
   12978:	e1a00001 	mov	r0, r1
   1297c:	e8bd4070 	pop	{r4, r5, r6, lr}
   12980:	eafffeee 	b	12540 <malloc>
   12984:	e1a05006 	mov	r5, r6
   12988:	eaffffe6 	b	12928 <realloc+0x78>
   1298c:	424c4d43 	.word	0x424c4d43
   12990:	00014c5c 	.word	0x00014c5c
   12994:	00014c7c 	.word	0x00014c7c

00012998 <palloc>:
   12998:	e92d4070 	push	{r4, r5, r6, lr}
   1299c:	e59f50c4 	ldr	r5, [pc, #196]	; 12a68 <palloc+0xd0>
   129a0:	e5953008 	ldr	r3, [r5, #8]
   129a4:	e3530000 	cmp	r3, #0
   129a8:	0a000029 	beq	12a54 <palloc+0xbc>
   129ac:	e5950014 	ldr	r0, [r5, #20]
   129b0:	e3500000 	cmp	r0, #0
   129b4:	1a000016 	bne	12a14 <palloc+0x7c>
   129b8:	e5954018 	ldr	r4, [r5, #24]
   129bc:	e3540000 	cmp	r4, #0
   129c0:	0a000017 	beq	12a24 <palloc+0x8c>
   129c4:	e59f30a0 	ldr	r3, [pc, #160]	; 12a6c <palloc+0xd4>
   129c8:	e5942000 	ldr	r2, [r4]
   129cc:	e1520003 	cmp	r2, r3
   129d0:	0a000003 	beq	129e4 <palloc+0x4c>
   129d4:	e59f2094 	ldr	r2, [pc, #148]	; 12a70 <palloc+0xd8>
   129d8:	e59f1094 	ldr	r1, [pc, #148]	; 12a74 <palloc+0xdc>
   129dc:	e59f0094 	ldr	r0, [pc, #148]	; 12a78 <palloc+0xe0>
   129e0:	ebffdebc 	bl	a4d8 <assertion_failed>
   129e4:	e3a02000 	mov	r2, #0
   129e8:	e5943004 	ldr	r3, [r4, #4]
   129ec:	e5842000 	str	r2, [r4]
   129f0:	e5853018 	str	r3, [r5, #24]
   129f4:	e5953014 	ldr	r3, [r5, #20]
   129f8:	e3530000 	cmp	r3, #0
   129fc:	1a000001 	bne	12a08 <palloc+0x70>
   12a00:	e1a00004 	mov	r0, r4
   12a04:	e8bd8070 	pop	{r4, r5, r6, pc}
   12a08:	ebfffe80 	bl	12410 <LeaveCritical>
   12a0c:	e1a00004 	mov	r0, r4
   12a10:	e8bd8070 	pop	{r4, r5, r6, pc}
   12a14:	ebfffe50 	bl	1235c <EnterCritical>
   12a18:	e5954018 	ldr	r4, [r5, #24]
   12a1c:	e3540000 	cmp	r4, #0
   12a20:	1affffe7 	bne	129c4 <palloc+0x2c>
   12a24:	e5954008 	ldr	r4, [r5, #8]
   12a28:	e595200c 	ldr	r2, [r5, #12]
   12a2c:	e2843a01 	add	r3, r4, #4096	; 0x1000
   12a30:	e1530002 	cmp	r3, r2
   12a34:	e5853008 	str	r3, [r5, #8]
   12a38:	9affffed 	bls	129f4 <palloc+0x5c>
   12a3c:	e5954014 	ldr	r4, [r5, #20]
   12a40:	e3540000 	cmp	r4, #0
   12a44:	0affffed 	beq	12a00 <palloc+0x68>
   12a48:	ebfffe70 	bl	12410 <LeaveCritical>
   12a4c:	e3a00000 	mov	r0, #0
   12a50:	e8bd8070 	pop	{r4, r5, r6, pc}
   12a54:	e59f2020 	ldr	r2, [pc, #32]	; 12a7c <palloc+0xe4>
   12a58:	e59f1014 	ldr	r1, [pc, #20]	; 12a74 <palloc+0xdc>
   12a5c:	e59f001c 	ldr	r0, [pc, #28]	; 12a80 <palloc+0xe8>
   12a60:	ebffde9c 	bl	a4d8 <assertion_failed>
   12a64:	eaffffd0 	b	129ac <palloc+0x14>
   12a68:	00015f24 	.word	0x00015f24
   12a6c:	50474d43 	.word	0x50474d43
   12a70:	0000011f 	.word	0x0000011f
   12a74:	00014c5c 	.word	0x00014c5c
   12a78:	00014d0c 	.word	0x00014d0c
   12a7c:	00000111 	.word	0x00000111
   12a80:	00014cf8 	.word	0x00014cf8

00012a84 <pfree>:
   12a84:	e92d4070 	push	{r4, r5, r6, lr}
   12a88:	e2504000 	subs	r4, r0, #0
   12a8c:	08bd8070 	popeq	{r4, r5, r6, pc}
   12a90:	e59f5044 	ldr	r5, [pc, #68]	; 12adc <pfree+0x58>
   12a94:	e5950014 	ldr	r0, [r5, #20]
   12a98:	e3500000 	cmp	r0, #0
   12a9c:	1a000004 	bne	12ab4 <pfree+0x30>
   12aa0:	e5952018 	ldr	r2, [r5, #24]
   12aa4:	e59f1034 	ldr	r1, [pc, #52]	; 12ae0 <pfree+0x5c>
   12aa8:	e5854018 	str	r4, [r5, #24]
   12aac:	e8840006 	stm	r4, {r1, r2}
   12ab0:	e8bd8070 	pop	{r4, r5, r6, pc}
   12ab4:	ebfffe28 	bl	1235c <EnterCritical>
   12ab8:	e5951014 	ldr	r1, [r5, #20]
   12abc:	e5953018 	ldr	r3, [r5, #24]
   12ac0:	e59f2018 	ldr	r2, [pc, #24]	; 12ae0 <pfree+0x5c>
   12ac4:	e3510000 	cmp	r1, #0
   12ac8:	e884000c 	stm	r4, {r2, r3}
   12acc:	e5854018 	str	r4, [r5, #24]
   12ad0:	08bd8070 	popeq	{r4, r5, r6, pc}
   12ad4:	e8bd4070 	pop	{r4, r5, r6, lr}
   12ad8:	eafffe4c 	b	12410 <LeaveCritical>
   12adc:	00015f24 	.word	0x00015f24
   12ae0:	50474d43 	.word	0x50474d43

00012ae4 <_GLOBAL__sub_I_mem_init>:
   12ae4:	e3a02001 	mov	r2, #1
   12ae8:	e59f3008 	ldr	r3, [pc, #8]	; 12af8 <_GLOBAL__sub_I_mem_init+0x14>
   12aec:	e5832010 	str	r2, [r3, #16]
   12af0:	e5832014 	str	r2, [r3, #20]
   12af4:	e12fff1e 	bx	lr
   12af8:	00015f24 	.word	0x00015f24

00012afc <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>:
   12afc:	e3a02000 	mov	r2, #0
   12b00:	e3a01001 	mov	r1, #1
   12b04:	e92d4030 	push	{r4, r5, lr}
   12b08:	e1a04000 	mov	r4, r0
   12b0c:	e5903020 	ldr	r3, [r0, #32]
   12b10:	e24dd014 	sub	sp, sp, #20
   12b14:	e5c31011 	strb	r1, [r3, #17]
   12b18:	e5c3200c 	strb	r2, [r3, #12]
   12b1c:	e5c3200d 	strb	r2, [r3, #13]
   12b20:	e5c3200e 	strb	r2, [r3, #14]
   12b24:	e5c3200f 	strb	r2, [r3, #15]
   12b28:	e5c32010 	strb	r2, [r3, #16]
   12b2c:	e5c32012 	strb	r2, [r3, #18]
   12b30:	e5c32013 	strb	r2, [r3, #19]
   12b34:	e28d000c 	add	r0, sp, #12
   12b38:	ebffde8a 	bl	a568 <CBcmPropertyTags::CBcmPropertyTags()>
   12b3c:	e59f306c 	ldr	r3, [pc, #108]	; 12bb0 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0xb4>
   12b40:	e5942020 	ldr	r2, [r4, #32]
   12b44:	e28d000c 	add	r0, sp, #12
   12b48:	e58d3000 	str	r3, [sp]
   12b4c:	e59f1060 	ldr	r1, [pc, #96]	; 12bb4 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0xb8>
   12b50:	e283300c 	add	r3, r3, #12
   12b54:	ebffdeda 	bl	a6c4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   12b58:	e2505000 	subs	r5, r0, #0
   12b5c:	0a000008 	beq	12b84 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x88>
   12b60:	e5942020 	ldr	r2, [r4, #32]
   12b64:	e5d2300c 	ldrb	r3, [r2, #12]
   12b68:	e5d2000d 	ldrb	r0, [r2, #13]
   12b6c:	e5d2100e 	ldrb	r1, [r2, #14]
   12b70:	e1833400 	orr	r3, r3, r0, lsl #8
   12b74:	e5d2200f 	ldrb	r2, [r2, #15]
   12b78:	e1833801 	orr	r3, r3, r1, lsl #16
   12b7c:	e1933c02 	orrs	r3, r3, r2, lsl #24
   12b80:	0a000005 	beq	12b9c <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0xa0>
   12b84:	e3a05000 	mov	r5, #0
   12b88:	e28d000c 	add	r0, sp, #12
   12b8c:	ebffde7b 	bl	a580 <CBcmPropertyTags::~CBcmPropertyTags()>
   12b90:	e1a00005 	mov	r0, r5
   12b94:	e28dd014 	add	sp, sp, #20
   12b98:	e8bd8030 	pop	{r4, r5, pc}
   12b9c:	e28d000c 	add	r0, sp, #12
   12ba0:	ebffde76 	bl	a580 <CBcmPropertyTags::~CBcmPropertyTags()>
   12ba4:	e1a00005 	mov	r0, r5
   12ba8:	e28dd014 	add	sp, sp, #20
   12bac:	e8bd8030 	pop	{r4, r5, pc}
   12bb0:	00000408 	.word	0x00000408
   12bb4:	0004800b 	.word	0x0004800b

00012bb8 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
   12bb8:	e92d4030 	push	{r4, r5, lr}
   12bbc:	e3510000 	cmp	r1, #0
   12bc0:	13520000 	cmpne	r2, #0
   12bc4:	e1a04000 	mov	r4, r0
   12bc8:	e3a05000 	mov	r5, #0
   12bcc:	e24dd024 	sub	sp, sp, #36	; 0x24
   12bd0:	e59dc034 	ldr	ip, [sp, #52]	; 0x34
   12bd4:	e59d0030 	ldr	r0, [sp, #48]	; 0x30
   12bd8:	e8840006 	stm	r4, {r1, r2}
   12bdc:	e5843010 	str	r3, [r4, #16]
   12be0:	e584c00c 	str	ip, [r4, #12]
   12be4:	e5840008 	str	r0, [r4, #8]
   12be8:	e5845014 	str	r5, [r4, #20]
   12bec:	e5845018 	str	r5, [r4, #24]
   12bf0:	e584501c 	str	r5, [r4, #28]
   12bf4:	e5845020 	str	r5, [r4, #32]
   12bf8:	1a000010 	bne	12c40 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x88>
   12bfc:	e28d0008 	add	r0, sp, #8
   12c00:	ebffde58 	bl	a568 <CBcmPropertyTags::CBcmPropertyTags()>
   12c04:	e58d5000 	str	r5, [sp]
   12c08:	e28d0008 	add	r0, sp, #8
   12c0c:	e3a03014 	mov	r3, #20
   12c10:	e28d200c 	add	r2, sp, #12
   12c14:	e59f10c8 	ldr	r1, [pc, #200]	; 12ce4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x12c>
   12c18:	ebffdea9 	bl	a6c4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   12c1c:	e1500005 	cmp	r0, r5
   12c20:	1a000026 	bne	12cc0 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x108>
   12c24:	e3a02d0a 	mov	r2, #640	; 0x280
   12c28:	e3a03e1e 	mov	r3, #480	; 0x1e0
   12c2c:	e884000c 	stm	r4, {r2, r3}
   12c30:	e28d0008 	add	r0, sp, #8
   12c34:	ebffde51 	bl	a580 <CBcmPropertyTags::~CBcmPropertyTags()>
   12c38:	e5940008 	ldr	r0, [r4, #8]
   12c3c:	e5943010 	ldr	r3, [r4, #16]
   12c40:	e3500000 	cmp	r0, #0
   12c44:	0a000019 	beq	12cb0 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xf8>
   12c48:	e594200c 	ldr	r2, [r4, #12]
   12c4c:	e3520000 	cmp	r2, #0
   12c50:	0a000016 	beq	12cb0 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xf8>
   12c54:	e3530008 	cmp	r3, #8
   12c58:	8a000006 	bhi	12c78 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xc0>
   12c5c:	e59f0084 	ldr	r0, [pc, #132]	; 12ce8 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x130>
   12c60:	ebfffe18 	bl	124c8 <operator new[](unsigned int)>
   12c64:	e3a02b01 	mov	r2, #1024	; 0x400
   12c68:	e5840020 	str	r0, [r4, #32]
   12c6c:	e3a01000 	mov	r1, #0
   12c70:	e2800014 	add	r0, r0, #20
   12c74:	ebfff9a4 	bl	1130c <memset>
   12c78:	e3a02070 	mov	r2, #112	; 0x70
   12c7c:	e59f1068 	ldr	r1, [pc, #104]	; 12cec <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x134>
   12c80:	e2840024 	add	r0, r4, #36	; 0x24
   12c84:	ebfffb12 	bl	118d4 <memcpy>
   12c88:	e994000f 	ldmib	r4, {r0, r1, r2, r3}
   12c8c:	e5840034 	str	r0, [r4, #52]	; 0x34
   12c90:	e1a00004 	mov	r0, r4
   12c94:	e594c000 	ldr	ip, [r4]
   12c98:	e5841044 	str	r1, [r4, #68]	; 0x44
   12c9c:	e584c030 	str	ip, [r4, #48]	; 0x30
   12ca0:	e5842048 	str	r2, [r4, #72]	; 0x48
   12ca4:	e5843058 	str	r3, [r4, #88]	; 0x58
   12ca8:	e28dd024 	add	sp, sp, #36	; 0x24
   12cac:	e8bd8030 	pop	{r4, r5, pc}
   12cb0:	e8940006 	ldm	r4, {r1, r2}
   12cb4:	e5841008 	str	r1, [r4, #8]
   12cb8:	e584200c 	str	r2, [r4, #12]
   12cbc:	eaffffe4 	b	12c54 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x9c>
   12cc0:	e59d2018 	ldr	r2, [sp, #24]
   12cc4:	e59d301c 	ldr	r3, [sp, #28]
   12cc8:	e2420d0a 	sub	r0, r2, #640	; 0x280
   12ccc:	e2431e1e 	sub	r1, r3, #480	; 0x1e0
   12cd0:	e3510f96 	cmp	r1, #600	; 0x258
   12cd4:	93500c05 	cmpls	r0, #1280	; 0x500
   12cd8:	e884000c 	stm	r4, {r2, r3}
   12cdc:	9affffd3 	bls	12c30 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x78>
   12ce0:	eaffffcf 	b	12c24 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
   12ce4:	00040003 	.word	0x00040003
   12ce8:	00000414 	.word	0x00000414
   12cec:	00015e10 	.word	0x00015e10

00012cf0 <CBcmFrameBuffer::~CBcmFrameBuffer()>:
   12cf0:	e92d4010 	push	{r4, lr}
   12cf4:	e1a04000 	mov	r4, r0
   12cf8:	e3a01014 	mov	r1, #20
   12cfc:	e5900020 	ldr	r0, [r0, #32]
   12d00:	ebfffdf3 	bl	124d4 <operator delete(void*, unsigned int)>
   12d04:	e1a00004 	mov	r0, r4
   12d08:	e8bd8010 	pop	{r4, pc}

00012d0c <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)>:
   12d0c:	e5903010 	ldr	r3, [r0, #16]
   12d10:	e3530008 	cmp	r3, #8
   12d14:	812fff1e 	bxhi	lr
   12d18:	e1a03982 	lsl	r3, r2, #19
   12d1c:	e1a0c5a2 	lsr	ip, r2, #11
   12d20:	e203373e 	and	r3, r3, #16252928	; 0xf80000
   12d24:	e183318c 	orr	r3, r3, ip, lsl #3
   12d28:	e1a02282 	lsl	r2, r2, #5
   12d2c:	e5900020 	ldr	r0, [r0, #32]
   12d30:	e38334ff 	orr	r3, r3, #-16777216	; 0xff000000
   12d34:	e2022b3f 	and	r2, r2, #64512	; 0xfc00
   12d38:	e1822003 	orr	r2, r2, r3
   12d3c:	e2811004 	add	r1, r1, #4
   12d40:	e0801101 	add	r1, r0, r1, lsl #2
   12d44:	e1a0c422 	lsr	ip, r2, #8
   12d48:	e1a00822 	lsr	r0, r2, #16
   12d4c:	e1a03c22 	lsr	r3, r2, #24
   12d50:	e5c12004 	strb	r2, [r1, #4]
   12d54:	e5c1c005 	strb	ip, [r1, #5]
   12d58:	e5c10006 	strb	r0, [r1, #6]
   12d5c:	e5c13007 	strb	r3, [r1, #7]
   12d60:	e12fff1e 	bx	lr

00012d64 <CBcmFrameBuffer::SetPalette32(unsigned char, unsigned int)>:
   12d64:	e5903010 	ldr	r3, [r0, #16]
   12d68:	e3530008 	cmp	r3, #8
   12d6c:	812fff1e 	bxhi	lr
   12d70:	e5903020 	ldr	r3, [r0, #32]
   12d74:	e2811004 	add	r1, r1, #4
   12d78:	e0831101 	add	r1, r3, r1, lsl #2
   12d7c:	e1a0c422 	lsr	ip, r2, #8
   12d80:	e1a00822 	lsr	r0, r2, #16
   12d84:	e1a03c22 	lsr	r3, r2, #24
   12d88:	e5c12004 	strb	r2, [r1, #4]
   12d8c:	e5c1c005 	strb	ip, [r1, #5]
   12d90:	e5c10006 	strb	r0, [r1, #6]
   12d94:	e5c13007 	strb	r3, [r1, #7]
   12d98:	e12fff1e 	bx	lr

00012d9c <CBcmFrameBuffer::Initialize()>:
   12d9c:	e92d4030 	push	{r4, r5, lr}
   12da0:	e1a04000 	mov	r4, r0
   12da4:	e24dd00c 	sub	sp, sp, #12
   12da8:	e28d0004 	add	r0, sp, #4
   12dac:	ebffdded 	bl	a568 <CBcmPropertyTags::CBcmPropertyTags()>
   12db0:	e2841024 	add	r1, r4, #36	; 0x24
   12db4:	e28d0004 	add	r0, sp, #4
   12db8:	e3a02070 	mov	r2, #112	; 0x70
   12dbc:	ebffddf4 	bl	a594 <CBcmPropertyTags::GetTags(void*, unsigned int)>
   12dc0:	e2505000 	subs	r5, r0, #0
   12dc4:	0a00001f 	beq	12e48 <CBcmFrameBuffer::Initialize()+0xac>
   12dc8:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   12dcc:	e3530000 	cmp	r3, #0
   12dd0:	0a00001b 	beq	12e44 <CBcmFrameBuffer::Initialize()+0xa8>
   12dd4:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   12dd8:	e3530000 	cmp	r3, #0
   12ddc:	0a000018 	beq	12e44 <CBcmFrameBuffer::Initialize()+0xa8>
   12de0:	e5943044 	ldr	r3, [r4, #68]	; 0x44
   12de4:	e3530000 	cmp	r3, #0
   12de8:	0a000015 	beq	12e44 <CBcmFrameBuffer::Initialize()+0xa8>
   12dec:	e5943048 	ldr	r3, [r4, #72]	; 0x48
   12df0:	e3530000 	cmp	r3, #0
   12df4:	0a000012 	beq	12e44 <CBcmFrameBuffer::Initialize()+0xa8>
   12df8:	e5943058 	ldr	r3, [r4, #88]	; 0x58
   12dfc:	e3530000 	cmp	r3, #0
   12e00:	0a00000f 	beq	12e44 <CBcmFrameBuffer::Initialize()+0xa8>
   12e04:	e594307c 	ldr	r3, [r4, #124]	; 0x7c
   12e08:	e3530000 	cmp	r3, #0
   12e0c:	0a00000c 	beq	12e44 <CBcmFrameBuffer::Initialize()+0xa8>
   12e10:	e5940010 	ldr	r0, [r4, #16]
   12e14:	e5941080 	ldr	r1, [r4, #128]	; 0x80
   12e18:	e5942090 	ldr	r2, [r4, #144]	; 0x90
   12e1c:	e3c33103 	bic	r3, r3, #-1073741824	; 0xc0000000
   12e20:	e3500008 	cmp	r0, #8
   12e24:	e5843014 	str	r3, [r4, #20]
   12e28:	e5841018 	str	r1, [r4, #24]
   12e2c:	e584201c 	str	r2, [r4, #28]
   12e30:	8a000004 	bhi	12e48 <CBcmFrameBuffer::Initialize()+0xac>
   12e34:	e1a00004 	mov	r0, r4
   12e38:	ebffff2f 	bl	12afc <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>
   12e3c:	e1a05000 	mov	r5, r0
   12e40:	ea000000 	b	12e48 <CBcmFrameBuffer::Initialize()+0xac>
   12e44:	e1a05003 	mov	r5, r3
   12e48:	e28d0004 	add	r0, sp, #4
   12e4c:	ebffddcb 	bl	a580 <CBcmPropertyTags::~CBcmPropertyTags()>
   12e50:	e1a00005 	mov	r0, r5
   12e54:	e28dd00c 	add	sp, sp, #12
   12e58:	e8bd8030 	pop	{r4, r5, pc}

00012e5c <CBcmFrameBuffer::GetWidth() const>:
   12e5c:	e5900000 	ldr	r0, [r0]
   12e60:	e12fff1e 	bx	lr

00012e64 <CBcmFrameBuffer::GetHeight() const>:
   12e64:	e5900004 	ldr	r0, [r0, #4]
   12e68:	e12fff1e 	bx	lr

00012e6c <CBcmFrameBuffer::GetVirtWidth() const>:
   12e6c:	e5900008 	ldr	r0, [r0, #8]
   12e70:	e12fff1e 	bx	lr

00012e74 <CBcmFrameBuffer::GetVirtHeight() const>:
   12e74:	e590000c 	ldr	r0, [r0, #12]
   12e78:	e12fff1e 	bx	lr

00012e7c <CBcmFrameBuffer::GetPitch() const>:
   12e7c:	e590001c 	ldr	r0, [r0, #28]
   12e80:	e12fff1e 	bx	lr

00012e84 <CBcmFrameBuffer::GetDepth() const>:
   12e84:	e5900010 	ldr	r0, [r0, #16]
   12e88:	e12fff1e 	bx	lr

00012e8c <CBcmFrameBuffer::GetBuffer() const>:
   12e8c:	e5900014 	ldr	r0, [r0, #20]
   12e90:	e12fff1e 	bx	lr

00012e94 <CBcmFrameBuffer::GetSize() const>:
   12e94:	e5900018 	ldr	r0, [r0, #24]
   12e98:	e12fff1e 	bx	lr

00012e9c <CBcmFrameBuffer::UpdatePalette()>:
   12e9c:	e5903010 	ldr	r3, [r0, #16]
   12ea0:	e3530008 	cmp	r3, #8
   12ea4:	9a000001 	bls	12eb0 <CBcmFrameBuffer::UpdatePalette()+0x14>
   12ea8:	e3a00001 	mov	r0, #1
   12eac:	e12fff1e 	bx	lr
   12eb0:	eaffff11 	b	12afc <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>

00012eb4 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)>:
   12eb4:	e92d4070 	push	{r4, r5, r6, lr}
   12eb8:	e24dd020 	sub	sp, sp, #32
   12ebc:	e28d0008 	add	r0, sp, #8
   12ec0:	e1a05001 	mov	r5, r1
   12ec4:	e1a06002 	mov	r6, r2
   12ec8:	ebffdda6 	bl	a568 <CBcmPropertyTags::CBcmPropertyTags()>
   12ecc:	e3a03008 	mov	r3, #8
   12ed0:	e28d200c 	add	r2, sp, #12
   12ed4:	e08d0003 	add	r0, sp, r3
   12ed8:	e58d3000 	str	r3, [sp]
   12edc:	e59f1044 	ldr	r1, [pc, #68]	; 12f28 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x74>
   12ee0:	e3a03014 	mov	r3, #20
   12ee4:	e58d5018 	str	r5, [sp, #24]
   12ee8:	e58d601c 	str	r6, [sp, #28]
   12eec:	ebffddf4 	bl	a6c4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   12ef0:	e2504000 	subs	r4, r0, #0
   12ef4:	0a000006 	beq	12f14 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x60>
   12ef8:	e59d3018 	ldr	r3, [sp, #24]
   12efc:	e1550003 	cmp	r5, r3
   12f00:	059d401c 	ldreq	r4, [sp, #28]
   12f04:	13a04000 	movne	r4, #0
   12f08:	00444006 	subeq	r4, r4, r6
   12f0c:	016f4f14 	clzeq	r4, r4
   12f10:	01a042a4 	lsreq	r4, r4, #5
   12f14:	e28d0008 	add	r0, sp, #8
   12f18:	ebffdd98 	bl	a580 <CBcmPropertyTags::~CBcmPropertyTags()>
   12f1c:	e1a00004 	mov	r0, r4
   12f20:	e28dd020 	add	sp, sp, #32
   12f24:	e8bd8070 	pop	{r4, r5, r6, pc}
   12f28:	00048009 	.word	0x00048009

00012f2c <CBcmFrameBuffer::WaitForVerticalSync()>:
   12f2c:	e92d4010 	push	{r4, lr}
   12f30:	e24dd020 	sub	sp, sp, #32
   12f34:	e28d000c 	add	r0, sp, #12
   12f38:	ebffdd8a 	bl	a568 <CBcmPropertyTags::CBcmPropertyTags()>
   12f3c:	e3a03000 	mov	r3, #0
   12f40:	e58d3000 	str	r3, [sp]
   12f44:	e3a03010 	mov	r3, #16
   12f48:	e59f1020 	ldr	r1, [pc, #32]	; 12f70 <CBcmFrameBuffer::WaitForVerticalSync()+0x44>
   12f4c:	e08d2003 	add	r2, sp, r3
   12f50:	e28d000c 	add	r0, sp, #12
   12f54:	ebffddda 	bl	a6c4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   12f58:	e1a04000 	mov	r4, r0
   12f5c:	e28d000c 	add	r0, sp, #12
   12f60:	ebffdd86 	bl	a580 <CBcmPropertyTags::~CBcmPropertyTags()>
   12f64:	e1a00004 	mov	r0, r4
   12f68:	e28dd020 	add	sp, sp, #32
   12f6c:	e8bd8010 	pop	{r4, pc}
   12f70:	0004800e 	.word	0x0004800e

00012f74 <CBcmMailBox::CBcmMailBox(unsigned int)>:
   12f74:	e5801000 	str	r1, [r0]
   12f78:	e12fff1e 	bx	lr

00012f7c <CBcmMailBox::~CBcmMailBox()>:
   12f7c:	e12fff1e 	bx	lr

00012f80 <CBcmMailBox::Flush()>:
   12f80:	e92d4070 	push	{r4, r5, r6, lr}
   12f84:	e59f4028 	ldr	r4, [pc, #40]	; 12fb4 <CBcmMailBox::Flush()+0x34>
   12f88:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   12f8c:	e3130101 	tst	r3, #1073741824	; 0x40000000
   12f90:	18bd8070 	popne	{r4, r5, r6, pc}
   12f94:	e3a05014 	mov	r5, #20
   12f98:	e1a00005 	mov	r0, r5
   12f9c:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
   12fa0:	ebfff891 	bl	111ec <CTimer::SimpleMsDelay(unsigned int)>
   12fa4:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   12fa8:	e3130101 	tst	r3, #1073741824	; 0x40000000
   12fac:	0afffff9 	beq	12f98 <CBcmMailBox::Flush()+0x18>
   12fb0:	e8bd8070 	pop	{r4, r5, r6, pc}
   12fb4:	2000b000 	.word	0x2000b000

00012fb8 <CBcmMailBox::Read()>:
   12fb8:	e5901000 	ldr	r1, [r0]
   12fbc:	e59f2020 	ldr	r2, [pc, #32]	; 12fe4 <CBcmMailBox::Read()+0x2c>
   12fc0:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   12fc4:	e3130101 	tst	r3, #1073741824	; 0x40000000
   12fc8:	1afffffc 	bne	12fc0 <CBcmMailBox::Read()+0x8>
   12fcc:	e5920880 	ldr	r0, [r2, #2176]	; 0x880
   12fd0:	e200300f 	and	r3, r0, #15
   12fd4:	e1510003 	cmp	r1, r3
   12fd8:	1afffff8 	bne	12fc0 <CBcmMailBox::Read()+0x8>
   12fdc:	e3c0000f 	bic	r0, r0, #15
   12fe0:	e12fff1e 	bx	lr
   12fe4:	2000b000 	.word	0x2000b000

00012fe8 <CBcmMailBox::Write(unsigned int)>:
   12fe8:	e92d4070 	push	{r4, r5, r6, lr}
   12fec:	e1a05000 	mov	r5, r0
   12ff0:	e1a04001 	mov	r4, r1
   12ff4:	e59f2034 	ldr	r2, [pc, #52]	; 13030 <CBcmMailBox::Write(unsigned int)+0x48>
   12ff8:	e59238b8 	ldr	r3, [r2, #2232]	; 0x8b8
   12ffc:	e3530000 	cmp	r3, #0
   13000:	bafffffc 	blt	12ff8 <CBcmMailBox::Write(unsigned int)+0x10>
   13004:	e314000f 	tst	r4, #15
   13008:	0a000003 	beq	1301c <CBcmMailBox::Write(unsigned int)+0x34>
   1300c:	e3a0205b 	mov	r2, #91	; 0x5b
   13010:	e59f101c 	ldr	r1, [pc, #28]	; 13034 <CBcmMailBox::Write(unsigned int)+0x4c>
   13014:	e59f001c 	ldr	r0, [pc, #28]	; 13038 <CBcmMailBox::Write(unsigned int)+0x50>
   13018:	ebffdd2e 	bl	a4d8 <assertion_failed>
   1301c:	e5952000 	ldr	r2, [r5]
   13020:	e59f3008 	ldr	r3, [pc, #8]	; 13030 <CBcmMailBox::Write(unsigned int)+0x48>
   13024:	e1844002 	orr	r4, r4, r2
   13028:	e58348a0 	str	r4, [r3, #2208]	; 0x8a0
   1302c:	e8bd8070 	pop	{r4, r5, r6, pc}
   13030:	2000b000 	.word	0x2000b000
   13034:	00014d30 	.word	0x00014d30
   13038:	00014d40 	.word	0x00014d40

0001303c <CBcmMailBox::WriteRead(unsigned int)>:
   1303c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   13040:	e3a03000 	mov	r3, #0
   13044:	e1a07000 	mov	r7, r0
   13048:	e1a08001 	mov	r8, r1
   1304c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   13050:	e59f5090 	ldr	r5, [pc, #144]	; 130e8 <CBcmMailBox::WriteRead(unsigned int)+0xac>
   13054:	e5950000 	ldr	r0, [r5]
   13058:	e1500003 	cmp	r0, r3
   1305c:	1a00001f 	bne	130e0 <CBcmMailBox::WriteRead(unsigned int)+0xa4>
   13060:	e59f4084 	ldr	r4, [pc, #132]	; 130ec <CBcmMailBox::WriteRead(unsigned int)+0xb0>
   13064:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   13068:	e3130101 	tst	r3, #1073741824	; 0x40000000
   1306c:	1a000006 	bne	1308c <CBcmMailBox::WriteRead(unsigned int)+0x50>
   13070:	e3a06014 	mov	r6, #20
   13074:	e1a00006 	mov	r0, r6
   13078:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
   1307c:	ebfff85a 	bl	111ec <CTimer::SimpleMsDelay(unsigned int)>
   13080:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   13084:	e3130101 	tst	r3, #1073741824	; 0x40000000
   13088:	0afffff9 	beq	13074 <CBcmMailBox::WriteRead(unsigned int)+0x38>
   1308c:	e1a00007 	mov	r0, r7
   13090:	e1a01008 	mov	r1, r8
   13094:	ebffffd3 	bl	12fe8 <CBcmMailBox::Write(unsigned int)>
   13098:	e5970000 	ldr	r0, [r7]
   1309c:	e59f2048 	ldr	r2, [pc, #72]	; 130ec <CBcmMailBox::WriteRead(unsigned int)+0xb0>
   130a0:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   130a4:	e3130101 	tst	r3, #1073741824	; 0x40000000
   130a8:	1afffffc 	bne	130a0 <CBcmMailBox::WriteRead(unsigned int)+0x64>
   130ac:	e5923880 	ldr	r3, [r2, #2176]	; 0x880
   130b0:	e203100f 	and	r1, r3, #15
   130b4:	e1510000 	cmp	r1, r0
   130b8:	1afffff8 	bne	130a0 <CBcmMailBox::WriteRead(unsigned int)+0x64>
   130bc:	e5952000 	ldr	r2, [r5]
   130c0:	e3c3400f 	bic	r4, r3, #15
   130c4:	e3520000 	cmp	r2, #0
   130c8:	0a000000 	beq	130d0 <CBcmMailBox::WriteRead(unsigned int)+0x94>
   130cc:	ebfffccf 	bl	12410 <LeaveCritical>
   130d0:	e3a03000 	mov	r3, #0
   130d4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   130d8:	e1a00004 	mov	r0, r4
   130dc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   130e0:	ebfffc9d 	bl	1235c <EnterCritical>
   130e4:	eaffffdd 	b	13060 <CBcmMailBox::WriteRead(unsigned int)+0x24>
   130e8:	00015f40 	.word	0x00015f40
   130ec:	2000b000 	.word	0x2000b000

000130f0 <_GLOBAL__sub_I__ZN11CBcmMailBox10s_SpinLockE>:
   130f0:	e3a02000 	mov	r2, #0
   130f4:	e59f3004 	ldr	r3, [pc, #4]	; 13100 <_GLOBAL__sub_I__ZN11CBcmMailBox10s_SpinLockE+0x10>
   130f8:	e5832000 	str	r2, [r3]
   130fc:	e12fff1e 	bx	lr
   13100:	00015f40 	.word	0x00015f40

00013104 <CCharGenerator::CCharGenerator()>:
   13104:	e3a03008 	mov	r3, #8
   13108:	e5803000 	str	r3, [r0]
   1310c:	e12fff1e 	bx	lr

00013110 <CCharGenerator::~CCharGenerator()>:
   13110:	e12fff1e 	bx	lr

00013114 <CCharGenerator::GetCharWidth() const>:
   13114:	e5900000 	ldr	r0, [r0]
   13118:	e12fff1e 	bx	lr

0001311c <CCharGenerator::GetCharHeight() const>:
   1311c:	e3a00013 	mov	r0, #19
   13120:	e12fff1e 	bx	lr

00013124 <CCharGenerator::GetUnderline() const>:
   13124:	e3a00010 	mov	r0, #16
   13128:	e12fff1e 	bx	lr

0001312c <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>:
   1312c:	e6ef1071 	uxtb	r1, r1
   13130:	e92d4070 	push	{r4, r5, r6, lr}
   13134:	e2414021 	sub	r4, r1, #33	; 0x21
   13138:	e35400de 	cmp	r4, #222	; 0xde
   1313c:	8a00000e 	bhi	1317c <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x50>
   13140:	e1a06003 	mov	r6, r3
   13144:	e5903000 	ldr	r3, [r0]
   13148:	e1a05002 	mov	r5, r2
   1314c:	e1530002 	cmp	r3, r2
   13150:	9a00000b 	bls	13184 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x58>
   13154:	e356000f 	cmp	r6, #15
   13158:	8a000007 	bhi	1317c <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x50>
   1315c:	e3a02080 	mov	r2, #128	; 0x80
   13160:	e59f1038 	ldr	r1, [pc, #56]	; 131a0 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x74>
   13164:	e0814204 	add	r4, r1, r4, lsl #4
   13168:	e7d43006 	ldrb	r3, [r4, r6]
   1316c:	e0133552 	ands	r3, r3, r2, asr r5
   13170:	13a00001 	movne	r0, #1
   13174:	03a00000 	moveq	r0, #0
   13178:	e8bd8070 	pop	{r4, r5, r6, pc}
   1317c:	e3a00000 	mov	r0, #0
   13180:	e8bd8070 	pop	{r4, r5, r6, pc}
   13184:	e3a0204e 	mov	r2, #78	; 0x4e
   13188:	e59f1014 	ldr	r1, [pc, #20]	; 131a4 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x78>
   1318c:	e59f0014 	ldr	r0, [pc, #20]	; 131a8 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x7c>
   13190:	ebffdcd0 	bl	a4d8 <assertion_failed>
   13194:	e356000f 	cmp	r6, #15
   13198:	9affffef 	bls	1315c <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x30>
   1319c:	eafffff6 	b	1317c <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x50>
   131a0:	00014d54 	.word	0x00014d54
   131a4:	00015b44 	.word	0x00015b44
   131a8:	00015b58 	.word	0x00015b58
   131ac:	00000000 	.word	0x00000000

000131b0 <DelayLoop>:
   131b0:	e2500001 	subs	r0, r0, #1
   131b4:	8afffffd 	bhi	131b0 <DelayLoop>
   131b8:	e1a0f00e 	mov	pc, lr

000131bc <CGPIOManager::CGPIOManager(CInterruptSystem*)>:
   131bc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   131c0:	e3a0e000 	mov	lr, #0
   131c4:	e1a03000 	mov	r3, r0
   131c8:	e1a0c00e 	mov	ip, lr
   131cc:	e5801000 	str	r1, [r0]
   131d0:	e28020dc 	add	r2, r0, #220	; 0xdc
   131d4:	e5e3e004 	strb	lr, [r3, #4]!
   131d8:	e5a3c004 	str	ip, [r3, #4]!
   131dc:	e1530002 	cmp	r3, r2
   131e0:	1afffffc 	bne	131d8 <CGPIOManager::CGPIOManager(CInterruptSystem*)+0x1c>
   131e4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

000131e8 <CGPIOManager::~CGPIOManager()>:
   131e8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   131ec:	e1a09000 	mov	r9, r0
   131f0:	e3a0802c 	mov	r8, #44	; 0x2c
   131f4:	e59f706c 	ldr	r7, [pc, #108]	; 13268 <CGPIOManager::~CGPIOManager()+0x80>
   131f8:	e59f606c 	ldr	r6, [pc, #108]	; 1326c <CGPIOManager::~CGPIOManager()+0x84>
   131fc:	e2804004 	add	r4, r0, #4
   13200:	e28050dc 	add	r5, r0, #220	; 0xdc
   13204:	e5b43004 	ldr	r3, [r4, #4]!
   13208:	e3530000 	cmp	r3, #0
   1320c:	0a000003 	beq	13220 <CGPIOManager::~CGPIOManager()+0x38>
   13210:	e1a02008 	mov	r2, r8
   13214:	e1a01007 	mov	r1, r7
   13218:	e1a00006 	mov	r0, r6
   1321c:	ebffdcad 	bl	a4d8 <assertion_failed>
   13220:	e1540005 	cmp	r4, r5
   13224:	1afffff6 	bne	13204 <CGPIOManager::~CGPIOManager()+0x1c>
   13228:	e5d93004 	ldrb	r3, [r9, #4]
   1322c:	e3530000 	cmp	r3, #0
   13230:	0a000004 	beq	13248 <CGPIOManager::~CGPIOManager()+0x60>
   13234:	e5990000 	ldr	r0, [r9]
   13238:	e3500000 	cmp	r0, #0
   1323c:	0a000003 	beq	13250 <CGPIOManager::~CGPIOManager()+0x68>
   13240:	e3a01034 	mov	r1, #52	; 0x34
   13244:	ebffe36e 	bl	c004 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   13248:	e1a00009 	mov	r0, r9
   1324c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13250:	e59f0018 	ldr	r0, [pc, #24]	; 13270 <CGPIOManager::~CGPIOManager()+0x88>
   13254:	e3a02032 	mov	r2, #50	; 0x32
   13258:	e59f1008 	ldr	r1, [pc, #8]	; 13268 <CGPIOManager::~CGPIOManager()+0x80>
   1325c:	ebffdc9d 	bl	a4d8 <assertion_failed>
   13260:	e5990000 	ldr	r0, [r9]
   13264:	eafffff5 	b	13240 <CGPIOManager::~CGPIOManager()+0x58>
   13268:	00015b70 	.word	0x00015b70
   1326c:	00015b80 	.word	0x00015b80
   13270:	00015b94 	.word	0x00015b94

00013274 <CGPIOManager::Initialize()>:
   13274:	e5d03004 	ldrb	r3, [r0, #4]
   13278:	e92d4010 	push	{r4, lr}
   1327c:	e3530000 	cmp	r3, #0
   13280:	e1a04000 	mov	r4, r0
   13284:	1a000009 	bne	132b0 <CGPIOManager::Initialize()+0x3c>
   13288:	e5940000 	ldr	r0, [r4]
   1328c:	e3500000 	cmp	r0, #0
   13290:	0a00000d 	beq	132cc <CGPIOManager::Initialize()+0x58>
   13294:	e1a03004 	mov	r3, r4
   13298:	e59f2044 	ldr	r2, [pc, #68]	; 132e4 <CGPIOManager::Initialize()+0x70>
   1329c:	e3a01034 	mov	r1, #52	; 0x34
   132a0:	ebffe31c 	bl	bf18 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   132a4:	e3a00001 	mov	r0, #1
   132a8:	e5c40004 	strb	r0, [r4, #4]
   132ac:	e8bd8010 	pop	{r4, pc}
   132b0:	e59f0030 	ldr	r0, [pc, #48]	; 132e8 <CGPIOManager::Initialize()+0x74>
   132b4:	e3a0203b 	mov	r2, #59	; 0x3b
   132b8:	e59f102c 	ldr	r1, [pc, #44]	; 132ec <CGPIOManager::Initialize()+0x78>
   132bc:	ebffdc85 	bl	a4d8 <assertion_failed>
   132c0:	e5940000 	ldr	r0, [r4]
   132c4:	e3500000 	cmp	r0, #0
   132c8:	1afffff1 	bne	13294 <CGPIOManager::Initialize()+0x20>
   132cc:	e59f001c 	ldr	r0, [pc, #28]	; 132f0 <CGPIOManager::Initialize()+0x7c>
   132d0:	e3a0203c 	mov	r2, #60	; 0x3c
   132d4:	e59f1010 	ldr	r1, [pc, #16]	; 132ec <CGPIOManager::Initialize()+0x78>
   132d8:	ebffdc7e 	bl	a4d8 <assertion_failed>
   132dc:	e5940000 	ldr	r0, [r4]
   132e0:	eaffffeb 	b	13294 <CGPIOManager::Initialize()+0x20>
   132e4:	00013504 	.word	0x00013504
   132e8:	00015ba8 	.word	0x00015ba8
   132ec:	00015b70 	.word	0x00015b70
   132f0:	00015b94 	.word	0x00015b94

000132f4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>:
   132f4:	e5d03004 	ldrb	r3, [r0, #4]
   132f8:	e92d4070 	push	{r4, r5, r6, lr}
   132fc:	e3530000 	cmp	r3, #0
   13300:	e1a04000 	mov	r4, r0
   13304:	e1a05001 	mov	r5, r1
   13308:	0a00000e 	beq	13348 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x54>
   1330c:	e3550000 	cmp	r5, #0
   13310:	0a000016 	beq	13370 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x7c>
   13314:	e5956004 	ldr	r6, [r5, #4]
   13318:	e3560035 	cmp	r6, #53	; 0x35
   1331c:	8a00000e 	bhi	1335c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x68>
   13320:	e0844106 	add	r4, r4, r6, lsl #2
   13324:	e5943008 	ldr	r3, [r4, #8]
   13328:	e3530000 	cmp	r3, #0
   1332c:	0a000003 	beq	13340 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x4c>
   13330:	e3a0204b 	mov	r2, #75	; 0x4b
   13334:	e59f1048 	ldr	r1, [pc, #72]	; 13384 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x90>
   13338:	e59f0048 	ldr	r0, [pc, #72]	; 13388 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x94>
   1333c:	ebffdc65 	bl	a4d8 <assertion_failed>
   13340:	e5845008 	str	r5, [r4, #8]
   13344:	e8bd8070 	pop	{r4, r5, r6, pc}
   13348:	e3a02045 	mov	r2, #69	; 0x45
   1334c:	e59f1030 	ldr	r1, [pc, #48]	; 13384 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x90>
   13350:	e59f0034 	ldr	r0, [pc, #52]	; 1338c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x98>
   13354:	ebffdc5f 	bl	a4d8 <assertion_failed>
   13358:	eaffffeb 	b	1330c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x18>
   1335c:	e3a02049 	mov	r2, #73	; 0x49
   13360:	e59f101c 	ldr	r1, [pc, #28]	; 13384 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x90>
   13364:	e59f0024 	ldr	r0, [pc, #36]	; 13390 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x9c>
   13368:	ebffdc5a 	bl	a4d8 <assertion_failed>
   1336c:	eaffffeb 	b	13320 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x2c>
   13370:	e3a02047 	mov	r2, #71	; 0x47
   13374:	e59f1008 	ldr	r1, [pc, #8]	; 13384 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x90>
   13378:	e59f0014 	ldr	r0, [pc, #20]	; 13394 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0xa0>
   1337c:	ebffdc55 	bl	a4d8 <assertion_failed>
   13380:	eaffffe3 	b	13314 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x20>
   13384:	00015b70 	.word	0x00015b70
   13388:	00015b80 	.word	0x00015b80
   1338c:	00015bbc 	.word	0x00015bbc
   13390:	000143b4 	.word	0x000143b4
   13394:	00015bcc 	.word	0x00015bcc

00013398 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>:
   13398:	e5d03004 	ldrb	r3, [r0, #4]
   1339c:	e92d4070 	push	{r4, r5, r6, lr}
   133a0:	e3530000 	cmp	r3, #0
   133a4:	e1a04000 	mov	r4, r0
   133a8:	e1a05001 	mov	r5, r1
   133ac:	0a00000b 	beq	133e0 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x48>
   133b0:	e3550000 	cmp	r5, #0
   133b4:	0a00001b 	beq	13428 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x90>
   133b8:	e5955004 	ldr	r5, [r5, #4]
   133bc:	e3550035 	cmp	r5, #53	; 0x35
   133c0:	8a00000b 	bhi	133f4 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x5c>
   133c4:	e0844105 	add	r4, r4, r5, lsl #2
   133c8:	e5943008 	ldr	r3, [r4, #8]
   133cc:	e3530000 	cmp	r3, #0
   133d0:	0a00000f 	beq	13414 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x7c>
   133d4:	e3a03000 	mov	r3, #0
   133d8:	e5843008 	str	r3, [r4, #8]
   133dc:	e8bd8070 	pop	{r4, r5, r6, pc}
   133e0:	e3a02052 	mov	r2, #82	; 0x52
   133e4:	e59f1050 	ldr	r1, [pc, #80]	; 1343c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xa4>
   133e8:	e59f0050 	ldr	r0, [pc, #80]	; 13440 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xa8>
   133ec:	ebffdc39 	bl	a4d8 <assertion_failed>
   133f0:	eaffffee 	b	133b0 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x18>
   133f4:	e3a02056 	mov	r2, #86	; 0x56
   133f8:	e59f103c 	ldr	r1, [pc, #60]	; 1343c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xa4>
   133fc:	e59f0040 	ldr	r0, [pc, #64]	; 13444 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xac>
   13400:	e0844105 	add	r4, r4, r5, lsl #2
   13404:	ebffdc33 	bl	a4d8 <assertion_failed>
   13408:	e5943008 	ldr	r3, [r4, #8]
   1340c:	e3530000 	cmp	r3, #0
   13410:	1affffef 	bne	133d4 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x3c>
   13414:	e3a02058 	mov	r2, #88	; 0x58
   13418:	e59f101c 	ldr	r1, [pc, #28]	; 1343c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xa4>
   1341c:	e59f0024 	ldr	r0, [pc, #36]	; 13448 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xb0>
   13420:	ebffdc2c 	bl	a4d8 <assertion_failed>
   13424:	eaffffea 	b	133d4 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x3c>
   13428:	e3a02054 	mov	r2, #84	; 0x54
   1342c:	e59f1008 	ldr	r1, [pc, #8]	; 1343c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xa4>
   13430:	e59f0014 	ldr	r0, [pc, #20]	; 1344c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xb4>
   13434:	ebffdc27 	bl	a4d8 <assertion_failed>
   13438:	eaffffde 	b	133b8 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x20>
   1343c:	00015b70 	.word	0x00015b70
   13440:	00015bbc 	.word	0x00015bbc
   13444:	000143b4 	.word	0x000143b4
   13448:	00015bd8 	.word	0x00015bd8
   1344c:	00015bcc 	.word	0x00015bcc

00013450 <CGPIOManager::InterruptHandler()>:
   13450:	e5d03004 	ldrb	r3, [r0, #4]
   13454:	e92d4070 	push	{r4, r5, r6, lr}
   13458:	e3530000 	cmp	r3, #0
   1345c:	e1a05000 	mov	r5, r0
   13460:	0a00001b 	beq	134d4 <CGPIOManager::InterruptHandler()+0x84>
   13464:	e3a04000 	mov	r4, #0
   13468:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   1346c:	e59f2080 	ldr	r2, [pc, #128]	; 134f4 <CGPIOManager::InterruptHandler()+0xa4>
   13470:	e5923040 	ldr	r3, [r2, #64]	; 0x40
   13474:	ea000005 	b	13490 <CGPIOManager::InterruptHandler()+0x40>
   13478:	e2844001 	add	r4, r4, #1
   1347c:	e314001f 	tst	r4, #31
   13480:	11a030a3 	lsrne	r3, r3, #1
   13484:	05923044 	ldreq	r3, [r2, #68]	; 0x44
   13488:	e3540036 	cmp	r4, #54	; 0x36
   1348c:	0a00000d 	beq	134c8 <CGPIOManager::InterruptHandler()+0x78>
   13490:	e3130001 	tst	r3, #1
   13494:	0afffff7 	beq	13478 <CGPIOManager::InterruptHandler()+0x28>
   13498:	e3a03001 	mov	r3, #1
   1349c:	e2842002 	add	r2, r4, #2
   134a0:	e7950102 	ldr	r0, [r5, r2, lsl #2]
   134a4:	e204501f 	and	r5, r4, #31
   134a8:	e3500000 	cmp	r0, #0
   134ac:	e1a05513 	lsl	r5, r3, r5
   134b0:	0a00000c 	beq	134e8 <CGPIOManager::InterruptHandler()+0x98>
   134b4:	ebffe1c9 	bl	bbe0 <CGPIOPin::InterruptHandler()>
   134b8:	e59f3038 	ldr	r3, [pc, #56]	; 134f8 <CGPIOManager::InterruptHandler()+0xa8>
   134bc:	e08342a4 	add	r4, r3, r4, lsr #5
   134c0:	e1a04104 	lsl	r4, r4, #2
   134c4:	e5845000 	str	r5, [r4]
   134c8:	e3a03000 	mov	r3, #0
   134cc:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   134d0:	e8bd8070 	pop	{r4, r5, r6, pc}
   134d4:	e3a0205e 	mov	r2, #94	; 0x5e
   134d8:	e59f101c 	ldr	r1, [pc, #28]	; 134fc <CGPIOManager::InterruptHandler()+0xac>
   134dc:	e59f001c 	ldr	r0, [pc, #28]	; 13500 <CGPIOManager::InterruptHandler()+0xb0>
   134e0:	ebffdbfc 	bl	a4d8 <assertion_failed>
   134e4:	eaffffde 	b	13464 <CGPIOManager::InterruptHandler()+0x14>
   134e8:	e1a00004 	mov	r0, r4
   134ec:	ebffe1e8 	bl	bc94 <CGPIOPin::DisableAllInterrupts(unsigned int)>
   134f0:	eafffff0 	b	134b8 <CGPIOManager::InterruptHandler()+0x68>
   134f4:	20200000 	.word	0x20200000
   134f8:	08080010 	.word	0x08080010
   134fc:	00015b70 	.word	0x00015b70
   13500:	00015bbc 	.word	0x00015bbc

00013504 <CGPIOManager::InterruptStub(void*)>:
   13504:	e92d4010 	push	{r4, lr}
   13508:	e2504000 	subs	r4, r0, #0
   1350c:	0a000002 	beq	1351c <CGPIOManager::InterruptStub(void*)+0x18>
   13510:	e1a00004 	mov	r0, r4
   13514:	e8bd4010 	pop	{r4, lr}
   13518:	eaffffcc 	b	13450 <CGPIOManager::InterruptHandler()>
   1351c:	e59f0014 	ldr	r0, [pc, #20]	; 13538 <CGPIOManager::InterruptStub(void*)+0x34>
   13520:	e3a0208a 	mov	r2, #138	; 0x8a
   13524:	e59f1010 	ldr	r1, [pc, #16]	; 1353c <CGPIOManager::InterruptStub(void*)+0x38>
   13528:	ebffdbea 	bl	a4d8 <assertion_failed>
   1352c:	e1a00004 	mov	r0, r4
   13530:	e8bd4010 	pop	{r4, lr}
   13534:	eaffffc5 	b	13450 <CGPIOManager::InterruptHandler()>
   13538:	00015bec 	.word	0x00015bec
   1353c:	00015b70 	.word	0x00015b70

00013540 <CPtrList::CPtrList()>:
   13540:	e3a02000 	mov	r2, #0
   13544:	e5802000 	str	r2, [r0]
   13548:	e12fff1e 	bx	lr

0001354c <CPtrList::~CPtrList()>:
   1354c:	e5903000 	ldr	r3, [r0]
   13550:	e92d4010 	push	{r4, lr}
   13554:	e3530000 	cmp	r3, #0
   13558:	e1a04000 	mov	r4, r0
   1355c:	0a000003 	beq	13570 <CPtrList::~CPtrList()+0x24>
   13560:	e3a0202a 	mov	r2, #42	; 0x2a
   13564:	e59f100c 	ldr	r1, [pc, #12]	; 13578 <CPtrList::~CPtrList()+0x2c>
   13568:	e59f000c 	ldr	r0, [pc, #12]	; 1357c <CPtrList::~CPtrList()+0x30>
   1356c:	ebffdbd9 	bl	a4d8 <assertion_failed>
   13570:	e1a00004 	mov	r0, r4
   13574:	e8bd8010 	pop	{r4, pc}
   13578:	00015bf8 	.word	0x00015bf8
   1357c:	00015c04 	.word	0x00015c04

00013580 <CPtrList::GetFirst()>:
   13580:	e5900000 	ldr	r0, [r0]
   13584:	e12fff1e 	bx	lr

00013588 <CPtrList::GetNext(TPtrListElement*)>:
   13588:	e92d4010 	push	{r4, lr}
   1358c:	e2514000 	subs	r4, r1, #0
   13590:	0a000009 	beq	135bc <CPtrList::GetNext(TPtrListElement*)+0x34>
   13594:	e59f3034 	ldr	r3, [pc, #52]	; 135d0 <CPtrList::GetNext(TPtrListElement*)+0x48>
   13598:	e5942000 	ldr	r2, [r4]
   1359c:	e1520003 	cmp	r2, r3
   135a0:	0a000003 	beq	135b4 <CPtrList::GetNext(TPtrListElement*)+0x2c>
   135a4:	e3a02035 	mov	r2, #53	; 0x35
   135a8:	e59f1024 	ldr	r1, [pc, #36]	; 135d4 <CPtrList::GetNext(TPtrListElement*)+0x4c>
   135ac:	e59f0024 	ldr	r0, [pc, #36]	; 135d8 <CPtrList::GetNext(TPtrListElement*)+0x50>
   135b0:	ebffdbc8 	bl	a4d8 <assertion_failed>
   135b4:	e5940008 	ldr	r0, [r4, #8]
   135b8:	e8bd8010 	pop	{r4, pc}
   135bc:	e3a02034 	mov	r2, #52	; 0x34
   135c0:	e59f100c 	ldr	r1, [pc, #12]	; 135d4 <CPtrList::GetNext(TPtrListElement*)+0x4c>
   135c4:	e59f0010 	ldr	r0, [pc, #16]	; 135dc <CPtrList::GetNext(TPtrListElement*)+0x54>
   135c8:	ebffdbc2 	bl	a4d8 <assertion_failed>
   135cc:	eafffff0 	b	13594 <CPtrList::GetNext(TPtrListElement*)+0xc>
   135d0:	504c4d43 	.word	0x504c4d43
   135d4:	00015bf8 	.word	0x00015bf8
   135d8:	00015c24 	.word	0x00015c24
   135dc:	00015c14 	.word	0x00015c14

000135e0 <CPtrList::GetPtr(TPtrListElement*)>:
   135e0:	e92d4010 	push	{r4, lr}
   135e4:	e2514000 	subs	r4, r1, #0
   135e8:	0a000009 	beq	13614 <CPtrList::GetPtr(TPtrListElement*)+0x34>
   135ec:	e59f3034 	ldr	r3, [pc, #52]	; 13628 <CPtrList::GetPtr(TPtrListElement*)+0x48>
   135f0:	e5942000 	ldr	r2, [r4]
   135f4:	e1520003 	cmp	r2, r3
   135f8:	0a000003 	beq	1360c <CPtrList::GetPtr(TPtrListElement*)+0x2c>
   135fc:	e3a0203d 	mov	r2, #61	; 0x3d
   13600:	e59f1024 	ldr	r1, [pc, #36]	; 1362c <CPtrList::GetPtr(TPtrListElement*)+0x4c>
   13604:	e59f0024 	ldr	r0, [pc, #36]	; 13630 <CPtrList::GetPtr(TPtrListElement*)+0x50>
   13608:	ebffdbb2 	bl	a4d8 <assertion_failed>
   1360c:	e594000c 	ldr	r0, [r4, #12]
   13610:	e8bd8010 	pop	{r4, pc}
   13614:	e3a0203c 	mov	r2, #60	; 0x3c
   13618:	e59f100c 	ldr	r1, [pc, #12]	; 1362c <CPtrList::GetPtr(TPtrListElement*)+0x4c>
   1361c:	e59f0010 	ldr	r0, [pc, #16]	; 13634 <CPtrList::GetPtr(TPtrListElement*)+0x54>
   13620:	ebffdbac 	bl	a4d8 <assertion_failed>
   13624:	eafffff0 	b	135ec <CPtrList::GetPtr(TPtrListElement*)+0xc>
   13628:	504c4d43 	.word	0x504c4d43
   1362c:	00015bf8 	.word	0x00015bf8
   13630:	00015c24 	.word	0x00015c24
   13634:	00015c14 	.word	0x00015c14

00013638 <CPtrList::InsertBefore(TPtrListElement*, void*)>:
   13638:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1363c:	e1a06000 	mov	r6, r0
   13640:	e3a00010 	mov	r0, #16
   13644:	e1a07002 	mov	r7, r2
   13648:	e1a04001 	mov	r4, r1
   1364c:	ebfffb9c 	bl	124c4 <operator new(unsigned int)>
   13650:	e5962000 	ldr	r2, [r6]
   13654:	e59f30c8 	ldr	r3, [pc, #200]	; 13724 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xec>
   13658:	e3520000 	cmp	r2, #0
   1365c:	e1a05000 	mov	r5, r0
   13660:	e580700c 	str	r7, [r0, #12]
   13664:	e5803000 	str	r3, [r0]
   13668:	0a000023 	beq	136fc <CPtrList::InsertBefore(TPtrListElement*, void*)+0xc4>
   1366c:	e3540000 	cmp	r4, #0
   13670:	0a000026 	beq	13710 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd8>
   13674:	e59f30a8 	ldr	r3, [pc, #168]	; 13724 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xec>
   13678:	e5942000 	ldr	r2, [r4]
   1367c:	e1520003 	cmp	r2, r3
   13680:	0a000003 	beq	13694 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x5c>
   13684:	e3a0204e 	mov	r2, #78	; 0x4e
   13688:	e59f1098 	ldr	r1, [pc, #152]	; 13728 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf0>
   1368c:	e59f0098 	ldr	r0, [pc, #152]	; 1372c <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf4>
   13690:	ebffdb90 	bl	a4d8 <assertion_failed>
   13694:	e5963000 	ldr	r3, [r6]
   13698:	e1540003 	cmp	r4, r3
   1369c:	0a000010 	beq	136e4 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xac>
   136a0:	e5943004 	ldr	r3, [r4, #4]
   136a4:	e5854008 	str	r4, [r5, #8]
   136a8:	e3530000 	cmp	r3, #0
   136ac:	e5853004 	str	r3, [r5, #4]
   136b0:	0a000009 	beq	136dc <CPtrList::InsertBefore(TPtrListElement*, void*)+0xa4>
   136b4:	e59f2068 	ldr	r2, [pc, #104]	; 13724 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xec>
   136b8:	e5931000 	ldr	r1, [r3]
   136bc:	e1510002 	cmp	r1, r2
   136c0:	0a000004 	beq	136d8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xa0>
   136c4:	e3a02060 	mov	r2, #96	; 0x60
   136c8:	e59f1058 	ldr	r1, [pc, #88]	; 13728 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf0>
   136cc:	e59f005c 	ldr	r0, [pc, #92]	; 13730 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf8>
   136d0:	ebffdb80 	bl	a4d8 <assertion_failed>
   136d4:	e5943004 	ldr	r3, [r4, #4]
   136d8:	e5835008 	str	r5, [r3, #8]
   136dc:	e5845004 	str	r5, [r4, #4]
   136e0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   136e4:	e3a03000 	mov	r3, #0
   136e8:	e5845004 	str	r5, [r4, #4]
   136ec:	e5854008 	str	r4, [r5, #8]
   136f0:	e5865000 	str	r5, [r6]
   136f4:	e5853004 	str	r3, [r5, #4]
   136f8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   136fc:	e3a0204c 	mov	r2, #76	; 0x4c
   13700:	e59f1020 	ldr	r1, [pc, #32]	; 13728 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf0>
   13704:	e59f0028 	ldr	r0, [pc, #40]	; 13734 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xfc>
   13708:	ebffdb72 	bl	a4d8 <assertion_failed>
   1370c:	eaffffd6 	b	1366c <CPtrList::InsertBefore(TPtrListElement*, void*)+0x34>
   13710:	e3a0204d 	mov	r2, #77	; 0x4d
   13714:	e59f100c 	ldr	r1, [pc, #12]	; 13728 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf0>
   13718:	e59f0018 	ldr	r0, [pc, #24]	; 13738 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x100>
   1371c:	ebffdb6d 	bl	a4d8 <assertion_failed>
   13720:	eaffffd3 	b	13674 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x3c>
   13724:	504c4d43 	.word	0x504c4d43
   13728:	00015bf8 	.word	0x00015bf8
   1372c:	00015c64 	.word	0x00015c64
   13730:	00015c88 	.word	0x00015c88
   13734:	00015c48 	.word	0x00015c48
   13738:	00015c58 	.word	0x00015c58

0001373c <CPtrList::InsertAfter(TPtrListElement*, void*)>:
   1373c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   13740:	e1a06000 	mov	r6, r0
   13744:	e1a05001 	mov	r5, r1
   13748:	e3a00010 	mov	r0, #16
   1374c:	e1a07002 	mov	r7, r2
   13750:	ebfffb5b 	bl	124c4 <operator new(unsigned int)>
   13754:	e59f30c0 	ldr	r3, [pc, #192]	; 1381c <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe0>
   13758:	e3550000 	cmp	r5, #0
   1375c:	e5803000 	str	r3, [r0]
   13760:	e1a04000 	mov	r4, r0
   13764:	e580700c 	str	r7, [r0, #12]
   13768:	e5963000 	ldr	r3, [r6]
   1376c:	0a00001a 	beq	137dc <CPtrList::InsertAfter(TPtrListElement*, void*)+0xa0>
   13770:	e3530000 	cmp	r3, #0
   13774:	0a000023 	beq	13808 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xcc>
   13778:	e59f309c 	ldr	r3, [pc, #156]	; 1381c <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe0>
   1377c:	e5952000 	ldr	r2, [r5]
   13780:	e1520003 	cmp	r2, r3
   13784:	0a000003 	beq	13798 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x5c>
   13788:	e3a0207e 	mov	r2, #126	; 0x7e
   1378c:	e59f108c 	ldr	r1, [pc, #140]	; 13820 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe4>
   13790:	e59f008c 	ldr	r0, [pc, #140]	; 13824 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe8>
   13794:	ebffdb4f 	bl	a4d8 <assertion_failed>
   13798:	e5953008 	ldr	r3, [r5, #8]
   1379c:	e5845004 	str	r5, [r4, #4]
   137a0:	e3530000 	cmp	r3, #0
   137a4:	e5843008 	str	r3, [r4, #8]
   137a8:	0a000009 	beq	137d4 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x98>
   137ac:	e59f2068 	ldr	r2, [pc, #104]	; 1381c <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe0>
   137b0:	e5931000 	ldr	r1, [r3]
   137b4:	e1510002 	cmp	r1, r2
   137b8:	0a000004 	beq	137d0 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x94>
   137bc:	e3a02085 	mov	r2, #133	; 0x85
   137c0:	e59f1058 	ldr	r1, [pc, #88]	; 13820 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe4>
   137c4:	e59f005c 	ldr	r0, [pc, #92]	; 13828 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xec>
   137c8:	ebffdb42 	bl	a4d8 <assertion_failed>
   137cc:	e5953008 	ldr	r3, [r5, #8]
   137d0:	e5834004 	str	r4, [r3, #4]
   137d4:	e5854008 	str	r4, [r5, #8]
   137d8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   137dc:	e3530000 	cmp	r3, #0
   137e0:	0a000003 	beq	137f4 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xb8>
   137e4:	e3a02074 	mov	r2, #116	; 0x74
   137e8:	e59f1030 	ldr	r1, [pc, #48]	; 13820 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe4>
   137ec:	e59f0038 	ldr	r0, [pc, #56]	; 1382c <CPtrList::InsertAfter(TPtrListElement*, void*)+0xf0>
   137f0:	ebffdb38 	bl	a4d8 <assertion_failed>
   137f4:	e3a03000 	mov	r3, #0
   137f8:	e5864000 	str	r4, [r6]
   137fc:	e5843004 	str	r3, [r4, #4]
   13800:	e5843008 	str	r3, [r4, #8]
   13804:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   13808:	e3a0207d 	mov	r2, #125	; 0x7d
   1380c:	e59f100c 	ldr	r1, [pc, #12]	; 13820 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe4>
   13810:	e59f0018 	ldr	r0, [pc, #24]	; 13830 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xf4>
   13814:	ebffdb2f 	bl	a4d8 <assertion_failed>
   13818:	eaffffd6 	b	13778 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x3c>
   1381c:	504c4d43 	.word	0x504c4d43
   13820:	00015bf8 	.word	0x00015bf8
   13824:	00015cb0 	.word	0x00015cb0
   13828:	00015cd4 	.word	0x00015cd4
   1382c:	00015c04 	.word	0x00015c04
   13830:	00015c48 	.word	0x00015c48

00013834 <CPtrList::Remove(TPtrListElement*)>:
   13834:	e92d4070 	push	{r4, r5, r6, lr}
   13838:	e2514000 	subs	r4, r1, #0
   1383c:	e1a05000 	mov	r5, r0
   13840:	0a00003c 	beq	13938 <CPtrList::Remove(TPtrListElement*)+0x104>
   13844:	e59f3118 	ldr	r3, [pc, #280]	; 13964 <CPtrList::Remove(TPtrListElement*)+0x130>
   13848:	e5942000 	ldr	r2, [r4]
   1384c:	e1520003 	cmp	r2, r3
   13850:	0a000003 	beq	13864 <CPtrList::Remove(TPtrListElement*)+0x30>
   13854:	e3a02090 	mov	r2, #144	; 0x90
   13858:	e59f1108 	ldr	r1, [pc, #264]	; 13968 <CPtrList::Remove(TPtrListElement*)+0x134>
   1385c:	e59f0108 	ldr	r0, [pc, #264]	; 1396c <CPtrList::Remove(TPtrListElement*)+0x138>
   13860:	ebffdb1c 	bl	a4d8 <assertion_failed>
   13864:	e5953000 	ldr	r3, [r5]
   13868:	e1540003 	cmp	r4, r3
   1386c:	0a000021 	beq	138f8 <CPtrList::Remove(TPtrListElement*)+0xc4>
   13870:	e5943004 	ldr	r3, [r4, #4]
   13874:	e3530000 	cmp	r3, #0
   13878:	0a000033 	beq	1394c <CPtrList::Remove(TPtrListElement*)+0x118>
   1387c:	e59f20e0 	ldr	r2, [pc, #224]	; 13964 <CPtrList::Remove(TPtrListElement*)+0x130>
   13880:	e5931000 	ldr	r1, [r3]
   13884:	e1510002 	cmp	r1, r2
   13888:	0a000004 	beq	138a0 <CPtrList::Remove(TPtrListElement*)+0x6c>
   1388c:	e3a0209f 	mov	r2, #159	; 0x9f
   13890:	e59f10d0 	ldr	r1, [pc, #208]	; 13968 <CPtrList::Remove(TPtrListElement*)+0x134>
   13894:	e59f00d4 	ldr	r0, [pc, #212]	; 13970 <CPtrList::Remove(TPtrListElement*)+0x13c>
   13898:	ebffdb0e 	bl	a4d8 <assertion_failed>
   1389c:	e5943004 	ldr	r3, [r4, #4]
   138a0:	e5942008 	ldr	r2, [r4, #8]
   138a4:	e5832008 	str	r2, [r3, #8]
   138a8:	e5942008 	ldr	r2, [r4, #8]
   138ac:	e3520000 	cmp	r2, #0
   138b0:	0a00000a 	beq	138e0 <CPtrList::Remove(TPtrListElement*)+0xac>
   138b4:	e59f10a8 	ldr	r1, [pc, #168]	; 13964 <CPtrList::Remove(TPtrListElement*)+0x130>
   138b8:	e5920000 	ldr	r0, [r2]
   138bc:	e1500001 	cmp	r0, r1
   138c0:	0a000005 	beq	138dc <CPtrList::Remove(TPtrListElement*)+0xa8>
   138c4:	e3a020a4 	mov	r2, #164	; 0xa4
   138c8:	e59f1098 	ldr	r1, [pc, #152]	; 13968 <CPtrList::Remove(TPtrListElement*)+0x134>
   138cc:	e59f00a0 	ldr	r0, [pc, #160]	; 13974 <CPtrList::Remove(TPtrListElement*)+0x140>
   138d0:	ebffdb00 	bl	a4d8 <assertion_failed>
   138d4:	e5942008 	ldr	r2, [r4, #8]
   138d8:	e5943004 	ldr	r3, [r4, #4]
   138dc:	e5823004 	str	r3, [r2, #4]
   138e0:	e3a03000 	mov	r3, #0
   138e4:	e1a00004 	mov	r0, r4
   138e8:	e5843000 	str	r3, [r4]
   138ec:	e3a01010 	mov	r1, #16
   138f0:	e8bd4070 	pop	{r4, r5, r6, lr}
   138f4:	eafffaf6 	b	124d4 <operator delete(void*, unsigned int)>
   138f8:	e5943008 	ldr	r3, [r4, #8]
   138fc:	e3530000 	cmp	r3, #0
   13900:	e5853000 	str	r3, [r5]
   13904:	0afffff5 	beq	138e0 <CPtrList::Remove(TPtrListElement*)+0xac>
   13908:	e59f2054 	ldr	r2, [pc, #84]	; 13964 <CPtrList::Remove(TPtrListElement*)+0x130>
   1390c:	e5931000 	ldr	r1, [r3]
   13910:	e1510002 	cmp	r1, r2
   13914:	0a000004 	beq	1392c <CPtrList::Remove(TPtrListElement*)+0xf8>
   13918:	e3a02098 	mov	r2, #152	; 0x98
   1391c:	e59f1044 	ldr	r1, [pc, #68]	; 13968 <CPtrList::Remove(TPtrListElement*)+0x134>
   13920:	e59f004c 	ldr	r0, [pc, #76]	; 13974 <CPtrList::Remove(TPtrListElement*)+0x140>
   13924:	ebffdaeb 	bl	a4d8 <assertion_failed>
   13928:	e5943008 	ldr	r3, [r4, #8]
   1392c:	e3a02000 	mov	r2, #0
   13930:	e5832004 	str	r2, [r3, #4]
   13934:	eaffffe9 	b	138e0 <CPtrList::Remove(TPtrListElement*)+0xac>
   13938:	e3a0208f 	mov	r2, #143	; 0x8f
   1393c:	e59f1024 	ldr	r1, [pc, #36]	; 13968 <CPtrList::Remove(TPtrListElement*)+0x134>
   13940:	e59f0030 	ldr	r0, [pc, #48]	; 13978 <CPtrList::Remove(TPtrListElement*)+0x144>
   13944:	ebffdae3 	bl	a4d8 <assertion_failed>
   13948:	eaffffbd 	b	13844 <CPtrList::Remove(TPtrListElement*)+0x10>
   1394c:	e3a0209e 	mov	r2, #158	; 0x9e
   13950:	e59f1010 	ldr	r1, [pc, #16]	; 13968 <CPtrList::Remove(TPtrListElement*)+0x134>
   13954:	e59f0020 	ldr	r0, [pc, #32]	; 1397c <CPtrList::Remove(TPtrListElement*)+0x148>
   13958:	ebffdade 	bl	a4d8 <assertion_failed>
   1395c:	e5943004 	ldr	r3, [r4, #4]
   13960:	eaffffc5 	b	1387c <CPtrList::Remove(TPtrListElement*)+0x48>
   13964:	504c4d43 	.word	0x504c4d43
   13968:	00015bf8 	.word	0x00015bf8
   1396c:	00015c24 	.word	0x00015c24
   13970:	00015d44 	.word	0x00015d44
   13974:	00015d00 	.word	0x00015d00
   13978:	00015c14 	.word	0x00015c14
   1397c:	00015d2c 	.word	0x00015d2c

00013980 <CPtrList::Find(void*)>:
   13980:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13984:	e5904000 	ldr	r4, [r0]
   13988:	e3540000 	cmp	r4, #0
   1398c:	0a000014 	beq	139e4 <CPtrList::Find(void*)+0x64>
   13990:	e1a05001 	mov	r5, r1
   13994:	e3a090b3 	mov	r9, #179	; 0xb3
   13998:	e59f6050 	ldr	r6, [pc, #80]	; 139f0 <CPtrList::Find(void*)+0x70>
   1399c:	e59f8050 	ldr	r8, [pc, #80]	; 139f4 <CPtrList::Find(void*)+0x74>
   139a0:	e59f7050 	ldr	r7, [pc, #80]	; 139f8 <CPtrList::Find(void*)+0x78>
   139a4:	ea000002 	b	139b4 <CPtrList::Find(void*)+0x34>
   139a8:	e5944008 	ldr	r4, [r4, #8]
   139ac:	e3540000 	cmp	r4, #0
   139b0:	0a00000b 	beq	139e4 <CPtrList::Find(void*)+0x64>
   139b4:	e5943000 	ldr	r3, [r4]
   139b8:	e1530006 	cmp	r3, r6
   139bc:	0a000003 	beq	139d0 <CPtrList::Find(void*)+0x50>
   139c0:	e1a02009 	mov	r2, r9
   139c4:	e1a01008 	mov	r1, r8
   139c8:	e1a00007 	mov	r0, r7
   139cc:	ebffdac1 	bl	a4d8 <assertion_failed>
   139d0:	e594300c 	ldr	r3, [r4, #12]
   139d4:	e1530005 	cmp	r3, r5
   139d8:	1afffff2 	bne	139a8 <CPtrList::Find(void*)+0x28>
   139dc:	e1a00004 	mov	r0, r4
   139e0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   139e4:	e3a04000 	mov	r4, #0
   139e8:	e1a00004 	mov	r0, r4
   139ec:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   139f0:	504c4d43 	.word	0x504c4d43
   139f4:	00015bf8 	.word	0x00015bf8
   139f8:	00015c24 	.word	0x00015c24
