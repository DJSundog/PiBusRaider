
kernel.elf:     file format elf32-littlearm


Disassembly of section .init:

00008000 <_start>:
    8000:	e10f0000 	mrs	r0, CPSR
    8004:	e220001a 	eor	r0, r0, #26
    8008:	e310001f 	tst	r0, #31
    800c:	e3c0001f 	bic	r0, r0, #31
    8010:	e38000d3 	orr	r0, r0, #211	; 0xd3
    8014:	1a000004 	bne	802c <_start+0x2c>
    8018:	e3800c01 	orr	r0, r0, #256	; 0x100
    801c:	e28fe00c 	add	lr, pc, #12
    8020:	e16ff000 	msr	SPSR_fsxc, r0
    8024:	e12ef30e 	.word	0xe12ef30e
    8028:	e160006e 	.word	0xe160006e
    802c:	e121f000 	msr	CPSR_c, r0
    8030:	e3a00000 	mov	r0, #0
    8034:	ee0c0f10 	mcr	15, 0, r0, cr12, cr0, {0}
    8038:	f1020011 	cps	#17
    803c:	e3a0d709 	mov	sp, #2359296	; 0x240000
    8040:	f1020012 	cps	#18
    8044:	e3a0d98e 	mov	sp, #2326528	; 0x238000
    8048:	f1020017 	cps	#23
    804c:	e3a0d823 	mov	sp, #2293760	; 0x230000
    8050:	f102001b 	cps	#27
    8054:	e3a0d823 	mov	sp, #2293760	; 0x230000
    8058:	f102001f 	cps	#31
    805c:	e3a0d98a 	mov	sp, #2260992	; 0x228000
    8060:	ea001e80 	b	fa68 <sysinit>

Disassembly of section .text:

00008068 <main>:
    8068:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    806c:	e24dda22 	sub	sp, sp, #139264	; 0x22000
    8070:	e24dd0cc 	sub	sp, sp, #204	; 0xcc
    8074:	e28d0004 	add	r0, sp, #4
    8078:	eb000009 	bl	80a4 <CKernel::CKernel()>
    807c:	e28d0004 	add	r0, sp, #4
    8080:	eb00003d 	bl	817c <CKernel::Initialize()>
    8084:	e3500000 	cmp	r0, #0
    8088:	0a000004 	beq	80a0 <main+0x38>
    808c:	e28d0004 	add	r0, sp, #4
    8090:	eb000080 	bl	8298 <CKernel::Run()>
    8094:	e3500002 	cmp	r0, #2
    8098:	1a000000 	bne	80a0 <main+0x38>
    809c:	eb001e66 	bl	fa3c <reboot>
    80a0:	eb001e62 	bl	fa30 <halt>

000080a4 <CKernel::CKernel()>:
    80a4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    80a8:	e1a04000 	mov	r4, r0
    80ac:	e3a01001 	mov	r1, #1
    80b0:	eb0025aa 	bl	11760 <CMemorySystem::CMemorySystem(bool)>
    80b4:	e2846018 	add	r6, r4, #24
    80b8:	e284000c 	add	r0, r4, #12
    80bc:	eb000607 	bl	98e0 <CActLED::CActLED()>
    80c0:	e2847e87 	add	r7, r4, #2160	; 0x870
    80c4:	e1a00006 	mov	r0, r6
    80c8:	eb000e66 	bl	ba68 <CKernelOptions::CKernelOptions()>
    80cc:	e1a00007 	mov	r0, r7
    80d0:	eb0007b6 	bl	9fb0 <CDeviceNameService::CDeviceNameService()>
    80d4:	e1a00006 	mov	r0, r6
    80d8:	eb000e29 	bl	b984 <CKernelOptions::GetWidth() const>
    80dc:	e1a08000 	mov	r8, r0
    80e0:	e1a00006 	mov	r0, r6
    80e4:	eb000e28 	bl	b98c <CKernelOptions::GetHeight() const>
    80e8:	e2845b82 	add	r5, r4, #133120	; 0x20800
    80ec:	e3a03000 	mov	r3, #0
    80f0:	e1a02000 	mov	r2, r0
    80f4:	e1a01008 	mov	r1, r8
    80f8:	e2870008 	add	r0, r7, #8
    80fc:	eb0012aa 	bl	cbac <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool)>
    8100:	e2857e1b 	add	r7, r5, #432	; 0x1b0
    8104:	e2840e8d 	add	r0, r4, #2256	; 0x8d0
    8108:	e3a02000 	mov	r2, #0
    810c:	e1a01007 	mov	r1, r7
    8110:	e2800004 	add	r0, r0, #4
    8114:	eb001759 	bl	de80 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool)>
    8118:	e2850f6b 	add	r0, r5, #428	; 0x1ac
    811c:	eb00240f 	bl	11160 <CExceptionHandler::CExceptionHandler()>
    8120:	e2855e3f 	add	r5, r5, #1008	; 0x3f0
    8124:	e1a00007 	mov	r0, r7
    8128:	eb000c80 	bl	b330 <CInterruptSystem::CInterruptSystem()>
    812c:	e1a01007 	mov	r1, r7
    8130:	e1a00005 	mov	r0, r5
    8134:	eb001e85 	bl	fb50 <CTimer::CTimer(CInterruptSystem*)>
    8138:	e1a00006 	mov	r0, r6
    813c:	eb000e17 	bl	b9a0 <CKernelOptions::GetLogLevel() const>
    8140:	e2846b83 	add	r6, r4, #134144	; 0x20c00
    8144:	e1a01000 	mov	r1, r0
    8148:	e1a02005 	mov	r2, r5
    814c:	e286001c 	add	r0, r6, #28
    8150:	eb000f4a 	bl	be80 <CLogger::CLogger(unsigned int, CTimer*)>
    8154:	e3a02000 	mov	r2, #0
    8158:	e2843802 	add	r3, r4, #131072	; 0x20000
    815c:	e5c32d14 	strb	r2, [r3, #3348]	; 0xd14
    8160:	e2860f46 	add	r0, r6, #280	; 0x118
    8164:	eb0003d4 	bl	90bc <BusRaider::BusRaider()>
    8168:	e59f3008 	ldr	r3, [pc, #8]	; 8178 <CKernel::CKernel()+0xd4>
    816c:	e1a00004 	mov	r0, r4
    8170:	e5834000 	str	r4, [r3]
    8174:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8178:	00015314 	.word	0x00015314

0000817c <CKernel::Initialize()>:
    817c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8180:	e2805b82 	add	r5, r0, #133120	; 0x20800
    8184:	e1a04000 	mov	r4, r0
    8188:	e2850e1b 	add	r0, r5, #432	; 0x1b0
    818c:	eb000c7a 	bl	b37c <CInterruptSystem::Initialize()>
    8190:	e3500000 	cmp	r0, #0
    8194:	1a000001 	bne	81a0 <CKernel::Initialize()+0x24>
    8198:	e3a00000 	mov	r0, #0
    819c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    81a0:	e2847e87 	add	r7, r4, #2160	; 0x870
    81a4:	e2870008 	add	r0, r7, #8
    81a8:	eb001630 	bl	da70 <CScreenDevice::Initialize()>
    81ac:	e3500000 	cmp	r0, #0
    81b0:	0afffff8 	beq	8198 <CKernel::Initialize()+0x1c>
    81b4:	e2846e8d 	add	r6, r4, #2256	; 0x8d0
    81b8:	e2866004 	add	r6, r6, #4
    81bc:	e1a00006 	mov	r0, r6
    81c0:	e59f1044 	ldr	r1, [pc, #68]	; 820c <CKernel::Initialize()+0x90>
    81c4:	eb00175e 	bl	df44 <CSerialDevice::Initialize(unsigned int)>
    81c8:	e3500000 	cmp	r0, #0
    81cc:	0afffff1 	beq	8198 <CKernel::Initialize()+0x1c>
    81d0:	e2840018 	add	r0, r4, #24
    81d4:	eb000dee 	bl	b994 <CKernelOptions::GetLogDevice() const>
    81d8:	e3a02000 	mov	r2, #0
    81dc:	e1a01000 	mov	r1, r0
    81e0:	e1a00007 	mov	r0, r7
    81e4:	eb00081b 	bl	a258 <CDeviceNameService::GetDevice(char const*, bool)>
    81e8:	e2840b83 	add	r0, r4, #134144	; 0x20c00
    81ec:	e1a01006 	mov	r1, r6
    81f0:	e280001c 	add	r0, r0, #28
    81f4:	eb001109 	bl	c620 <CLogger::Initialize(CDevice*)>
    81f8:	e3500000 	cmp	r0, #0
    81fc:	0affffe5 	beq	8198 <CKernel::Initialize()+0x1c>
    8200:	e2850e3f 	add	r0, r5, #1008	; 0x3f0
    8204:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    8208:	ea002133 	b	106dc <CTimer::Initialize()>
    820c:	0001c200 	.word	0x0001c200

00008210 <CKernel::~CKernel()>:
    8210:	e92d4070 	push	{r4, r5, r6, lr}
    8214:	e3a02000 	mov	r2, #0
    8218:	e1a04000 	mov	r4, r0
    821c:	e59f3070 	ldr	r3, [pc, #112]	; 8294 <CKernel::~CKernel()+0x84>
    8220:	e2806b83 	add	r6, r0, #134144	; 0x20c00
    8224:	e2860f46 	add	r0, r6, #280	; 0x118
    8228:	e5832000 	str	r2, [r3]
    822c:	e2845b82 	add	r5, r4, #133120	; 0x20800
    8230:	eb0003b3 	bl	9104 <BusRaider::~BusRaider()>
    8234:	e286001c 	add	r0, r6, #28
    8238:	eb000f26 	bl	bed8 <CLogger::~CLogger()>
    823c:	e2850e3f 	add	r0, r5, #1008	; 0x3f0
    8240:	eb001e64 	bl	fbd8 <CTimer::~CTimer()>
    8244:	e2850e1b 	add	r0, r5, #432	; 0x1b0
    8248:	eb000c46 	bl	b368 <CInterruptSystem::~CInterruptSystem()>
    824c:	e2850f6b 	add	r0, r5, #428	; 0x1ac
    8250:	eb0023e6 	bl	111f0 <CExceptionHandler::~CExceptionHandler()>
    8254:	e2840e8d 	add	r0, r4, #2256	; 0x8d0
    8258:	e2845e87 	add	r5, r4, #2160	; 0x870
    825c:	e2800004 	add	r0, r0, #4
    8260:	eb00198c 	bl	e898 <CSerialDevice::~CSerialDevice()>
    8264:	e2850008 	add	r0, r5, #8
    8268:	eb001202 	bl	ca78 <CScreenDevice::~CScreenDevice()>
    826c:	e1a00005 	mov	r0, r5
    8270:	eb000761 	bl	9ffc <CDeviceNameService::~CDeviceNameService()>
    8274:	e2840018 	add	r0, r4, #24
    8278:	eb000dbc 	bl	b970 <CKernelOptions::~CKernelOptions()>
    827c:	e284000c 	add	r0, r4, #12
    8280:	eb000577 	bl	9864 <CActLED::~CActLED()>
    8284:	e1a00004 	mov	r0, r4
    8288:	eb0024c0 	bl	11590 <CMemorySystem::~CMemorySystem()>
    828c:	e1a00004 	mov	r0, r4
    8290:	e8bd8070 	pop	{r4, r5, r6, pc}
    8294:	00015314 	.word	0x00015314

00008298 <CKernel::Run()>:
    8298:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    829c:	e3a09000 	mov	r9, #0
    82a0:	e1a08009 	mov	r8, r9
    82a4:	e24ddb01 	sub	sp, sp, #1024	; 0x400
    82a8:	e280bb83 	add	fp, r0, #134144	; 0x20c00
    82ac:	e24dd004 	sub	sp, sp, #4
    82b0:	e2804b82 	add	r4, r0, #133120	; 0x20800
    82b4:	e2805e8d 	add	r5, r0, #2256	; 0x8d0
    82b8:	e28b301c 	add	r3, fp, #28
    82bc:	e2844e3f 	add	r4, r4, #1008	; 0x3f0
    82c0:	e2855004 	add	r5, r5, #4
    82c4:	e58d3014 	str	r3, [sp, #20]
    82c8:	e1a00004 	mov	r0, r4
    82cc:	eb001eac 	bl	fd84 <CTimer::GetTicks() const>
    82d0:	e3a06000 	mov	r6, #0
    82d4:	e2807ffa 	add	r7, r0, #1000	; 0x3e8
    82d8:	e28baf46 	add	sl, fp, #280	; 0x118
    82dc:	e3a02ffa 	mov	r2, #1000	; 0x3e8
    82e0:	e28d1018 	add	r1, sp, #24
    82e4:	e1a00005 	mov	r0, r5
    82e8:	eb001670 	bl	dcb0 <CSerialDevice::Read(void*, unsigned int)>
    82ec:	e2503000 	subs	r3, r0, #0
    82f0:	da000005 	ble	830c <CKernel::Run()+0x74>
    82f4:	e1a02003 	mov	r2, r3
    82f8:	e28d1018 	add	r1, sp, #24
    82fc:	e1a0000a 	mov	r0, sl
    8300:	e0888003 	add	r8, r8, r3
    8304:	e0866003 	add	r6, r6, r3
    8308:	eb00038e 	bl	9148 <BusRaider::handleSerialRxBuffer(unsigned char const*, int)>
    830c:	e1a00004 	mov	r0, r4
    8310:	eb001e9b 	bl	fd84 <CTimer::GetTicks() const>
    8314:	e1500007 	cmp	r0, r7
    8318:	9affffef 	bls	82dc <CKernel::Run()+0x44>
    831c:	e28d0018 	add	r0, sp, #24
    8320:	eb0019c7 	bl	ea44 <CString::CString()>
    8324:	e59f3090 	ldr	r3, [pc, #144]	; 83bc <CKernel::Run()+0x124>
    8328:	e3a02003 	mov	r2, #3
    832c:	e59f108c 	ldr	r1, [pc, #140]	; 83c0 <CKernel::Run()+0x128>
    8330:	e59d0014 	ldr	r0, [sp, #20]
    8334:	eb0010ad 	bl	c5f0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8338:	e1a00004 	mov	r0, r4
    833c:	eb001e90 	bl	fd84 <CTimer::GetTicks() const>
    8340:	e2899001 	add	r9, r9, #1
    8344:	e3a03003 	mov	r3, #3
    8348:	e1a02009 	mov	r2, r9
    834c:	e59f1070 	ldr	r1, [pc, #112]	; 83c4 <CKernel::Run()+0x12c>
    8350:	e58d0008 	str	r0, [sp, #8]
    8354:	e88d0140 	stm	sp, {r6, r8}
    8358:	e28d0018 	add	r0, sp, #24
    835c:	eb001da6 	bl	f9fc <CString::Format(char const*, ...)>
    8360:	e28d0018 	add	r0, sp, #24
    8364:	eb0019cc 	bl	ea9c <CString::operator char const*() const>
    8368:	e1a06000 	mov	r6, r0
    836c:	e28d0018 	add	r0, sp, #24
    8370:	eb0019f7 	bl	eb54 <CString::GetLength() const>
    8374:	e1a01006 	mov	r1, r6
    8378:	e1a02000 	mov	r2, r0
    837c:	e1a00005 	mov	r0, r5
    8380:	eb001846 	bl	e4a0 <CSerialDevice::Write(void const*, unsigned int)>
    8384:	e28d0018 	add	r0, sp, #24
    8388:	eb00197a 	bl	e978 <CString::~CString()>
    838c:	e3590003 	cmp	r9, #3
    8390:	1affffcc 	bne	82c8 <CKernel::Run()+0x30>
    8394:	e3a0200b 	mov	r2, #11
    8398:	e59f1028 	ldr	r1, [pc, #40]	; 83c8 <CKernel::Run()+0x130>
    839c:	e1a00005 	mov	r0, r5
    83a0:	eb00183e 	bl	e4a0 <CSerialDevice::Write(void const*, unsigned int)>
    83a4:	e3a00ffa 	mov	r0, #1000	; 0x3e8
    83a8:	eb002103 	bl	107bc <CTimer::SimpleMsDelay(unsigned int)>
    83ac:	e3a00002 	mov	r0, #2
    83b0:	e28ddb01 	add	sp, sp, #1024	; 0x400
    83b4:	e28dd004 	add	sp, sp, #4
    83b8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    83bc:	00012fd4 	.word	0x00012fd4
    83c0:	00012fcc 	.word	0x00012fcc
    83c4:	00012fe0 	.word	0x00012fe0
    83c8:	00013024 	.word	0x00013024

000083cc <CRdSerialDevice::Read(void*, unsigned int)>:
    83cc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    83d0:	e2516000 	subs	r6, r1, #0
    83d4:	e1a04000 	mov	r4, r0
    83d8:	e1a05002 	mov	r5, r2
    83dc:	0a000059 	beq	8548 <CRdSerialDevice::Read(void*, unsigned int)+0x17c>
    83e0:	e59430a4 	ldr	r3, [r4, #164]	; 0xa4
    83e4:	e3530000 	cmp	r3, #0
    83e8:	0a000033 	beq	84bc <CRdSerialDevice::Read(void*, unsigned int)+0xf0>
    83ec:	e2847a01 	add	r7, r4, #4096	; 0x1000
    83f0:	e59700d0 	ldr	r0, [r7, #208]	; 0xd0
    83f4:	e3500000 	cmp	r0, #0
    83f8:	1a00002a 	bne	84a8 <CRdSerialDevice::Read(void*, unsigned int)+0xdc>
    83fc:	e59438b4 	ldr	r3, [r4, #2228]	; 0x8b4
    8400:	e3530000 	cmp	r3, #0
    8404:	ba00001f 	blt	8488 <CRdSerialDevice::Read(void*, unsigned int)+0xbc>
    8408:	e3550000 	cmp	r5, #0
    840c:	0a000020 	beq	8494 <CRdSerialDevice::Read(void*, unsigned int)+0xc8>
    8410:	e59438ac 	ldr	r3, [r4, #2220]	; 0x8ac
    8414:	e59428b0 	ldr	r2, [r4, #2224]	; 0x8b0
    8418:	e1520003 	cmp	r2, r3
    841c:	0a000054 	beq	8574 <CRdSerialDevice::Read(void*, unsigned int)+0x1a8>
    8420:	e0862005 	add	r2, r6, r5
    8424:	e1a01006 	mov	r1, r6
    8428:	e59fc154 	ldr	ip, [pc, #340]	; 8584 <CRdSerialDevice::Read(void*, unsigned int)+0x1b8>
    842c:	ea000003 	b	8440 <CRdSerialDevice::Read(void*, unsigned int)+0x74>
    8430:	e59408ac 	ldr	r0, [r4, #2220]	; 0x8ac
    8434:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
    8438:	e1500003 	cmp	r0, r3
    843c:	0a000014 	beq	8494 <CRdSerialDevice::Read(void*, unsigned int)+0xc8>
    8440:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
    8444:	e2830001 	add	r0, r3, #1
    8448:	e58408b0 	str	r0, [r4, #2224]	; 0x8b0
    844c:	e0843003 	add	r3, r4, r3
    8450:	e5d330aa 	ldrb	r3, [r3, #170]	; 0xaa
    8454:	e4c13001 	strb	r3, [r1], #1
    8458:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
    845c:	e1510002 	cmp	r1, r2
    8460:	e003300c 	and	r3, r3, ip
    8464:	e58438b0 	str	r3, [r4, #2224]	; 0x8b0
    8468:	e0415006 	sub	r5, r1, r6
    846c:	1affffef 	bne	8430 <CRdSerialDevice::Read(void*, unsigned int)+0x64>
    8470:	e59730d0 	ldr	r3, [r7, #208]	; 0xd0
    8474:	e3530000 	cmp	r3, #0
    8478:	0a000008 	beq	84a0 <CRdSerialDevice::Read(void*, unsigned int)+0xd4>
    847c:	eb002557 	bl	119e0 <LeaveCritical>
    8480:	e1a00005 	mov	r0, r5
    8484:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8488:	e3a03000 	mov	r3, #0
    848c:	e59458b4 	ldr	r5, [r4, #2228]	; 0x8b4
    8490:	e58438b4 	str	r3, [r4, #2228]	; 0x8b4
    8494:	e59730d0 	ldr	r3, [r7, #208]	; 0xd0
    8498:	e3530000 	cmp	r3, #0
    849c:	1afffff6 	bne	847c <CRdSerialDevice::Read(void*, unsigned int)+0xb0>
    84a0:	e1a00005 	mov	r0, r5
    84a4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    84a8:	eb00251f 	bl	1192c <EnterCritical>
    84ac:	e59438b4 	ldr	r3, [r4, #2228]	; 0x8b4
    84b0:	e3530000 	cmp	r3, #0
    84b4:	aaffffd3 	bge	8408 <CRdSerialDevice::Read(void*, unsigned int)+0x3c>
    84b8:	eafffff2 	b	8488 <CRdSerialDevice::Read(void*, unsigned int)+0xbc>
    84bc:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    84c0:	e3550000 	cmp	r5, #0
    84c4:	0a00001b 	beq	8538 <CRdSerialDevice::Read(void*, unsigned int)+0x16c>
    84c8:	e59f00b8 	ldr	r0, [pc, #184]	; 8588 <CRdSerialDevice::Read(void*, unsigned int)+0x1bc>
    84cc:	e5902018 	ldr	r2, [r0, #24]
    84d0:	e3120010 	tst	r2, #16
    84d4:	1a000028 	bne	857c <CRdSerialDevice::Read(void*, unsigned int)+0x1b0>
    84d8:	e5903000 	ldr	r3, [r0]
    84dc:	e3130b01 	tst	r3, #1024	; 0x400
    84e0:	1a00001d 	bne	855c <CRdSerialDevice::Read(void*, unsigned int)+0x190>
    84e4:	e3130b02 	tst	r3, #2048	; 0x800
    84e8:	1a00001d 	bne	8564 <CRdSerialDevice::Read(void*, unsigned int)+0x198>
    84ec:	e3130c01 	tst	r3, #256	; 0x100
    84f0:	00862005 	addeq	r2, r6, r5
    84f4:	01a01006 	moveq	r1, r6
    84f8:	0a00000a 	beq	8528 <CRdSerialDevice::Read(void*, unsigned int)+0x15c>
    84fc:	ea00001a 	b	856c <CRdSerialDevice::Read(void*, unsigned int)+0x1a0>
    8500:	e5903018 	ldr	r3, [r0, #24]
    8504:	e3130010 	tst	r3, #16
    8508:	1a00000a 	bne	8538 <CRdSerialDevice::Read(void*, unsigned int)+0x16c>
    850c:	e5903000 	ldr	r3, [r0]
    8510:	e3130b01 	tst	r3, #1024	; 0x400
    8514:	1a000010 	bne	855c <CRdSerialDevice::Read(void*, unsigned int)+0x190>
    8518:	e3130b02 	tst	r3, #2048	; 0x800
    851c:	1a000010 	bne	8564 <CRdSerialDevice::Read(void*, unsigned int)+0x198>
    8520:	e3130c01 	tst	r3, #256	; 0x100
    8524:	1a000010 	bne	856c <CRdSerialDevice::Read(void*, unsigned int)+0x1a0>
    8528:	e4c13001 	strb	r3, [r1], #1
    852c:	e1510002 	cmp	r1, r2
    8530:	e0415006 	sub	r5, r1, r6
    8534:	1afffff1 	bne	8500 <CRdSerialDevice::Read(void*, unsigned int)+0x134>
    8538:	e3a03000 	mov	r3, #0
    853c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    8540:	e1a00005 	mov	r0, r5
    8544:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8548:	e59f203c 	ldr	r2, [pc, #60]	; 858c <CRdSerialDevice::Read(void*, unsigned int)+0x1c0>
    854c:	e59f103c 	ldr	r1, [pc, #60]	; 8590 <CRdSerialDevice::Read(void*, unsigned int)+0x1c4>
    8550:	e59f003c 	ldr	r0, [pc, #60]	; 8594 <CRdSerialDevice::Read(void*, unsigned int)+0x1c8>
    8554:	eb000553 	bl	9aa8 <assertion_failed>
    8558:	eaffffa0 	b	83e0 <CRdSerialDevice::Read(void*, unsigned int)+0x14>
    855c:	e3e05000 	mvn	r5, #0
    8560:	eafffff4 	b	8538 <CRdSerialDevice::Read(void*, unsigned int)+0x16c>
    8564:	e3e05001 	mvn	r5, #1
    8568:	eafffff2 	b	8538 <CRdSerialDevice::Read(void*, unsigned int)+0x16c>
    856c:	e3e05002 	mvn	r5, #2
    8570:	eafffff0 	b	8538 <CRdSerialDevice::Read(void*, unsigned int)+0x16c>
    8574:	e3a05000 	mov	r5, #0
    8578:	eaffffc5 	b	8494 <CRdSerialDevice::Read(void*, unsigned int)+0xc8>
    857c:	e1a05003 	mov	r5, r3
    8580:	eaffffec 	b	8538 <CRdSerialDevice::Read(void*, unsigned int)+0x16c>
    8584:	000007ff 	.word	0x000007ff
    8588:	20201000 	.word	0x20201000
    858c:	00000101 	.word	0x00000101
    8590:	0001304c 	.word	0x0001304c
    8594:	00013060 	.word	0x00013060

00008598 <CRdSerialDevice::CRdSerialDevice(CInterruptSystem*, bool)>:
    8598:	e92d4070 	push	{r4, r5, r6, lr}
    859c:	e1a04000 	mov	r4, r0
    85a0:	e1a05002 	mov	r5, r2
    85a4:	e1a06001 	mov	r6, r1
    85a8:	eb00067c 	bl	9fa0 <CDevice::CDevice()>
    85ac:	e1a00004 	mov	r0, r4
    85b0:	e3a03000 	mov	r3, #0
    85b4:	e59f1098 	ldr	r1, [pc, #152]	; 8654 <CRdSerialDevice::CRdSerialDevice(CInterruptSystem*, bool)+0xbc>
    85b8:	e1a02003 	mov	r2, r3
    85bc:	e4801004 	str	r1, [r0], #4
    85c0:	e3a01020 	mov	r1, #32
    85c4:	eb000ae3 	bl	b158 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    85c8:	e3a03000 	mov	r3, #0
    85cc:	e284002c 	add	r0, r4, #44	; 0x2c
    85d0:	e1a02003 	mov	r2, r3
    85d4:	e3a01021 	mov	r1, #33	; 0x21
    85d8:	eb000ade 	bl	b158 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    85dc:	e2840054 	add	r0, r4, #84	; 0x54
    85e0:	e3a03000 	mov	r3, #0
    85e4:	e3a02004 	mov	r2, #4
    85e8:	e3a0100e 	mov	r1, #14
    85ec:	eb000ad9 	bl	b158 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    85f0:	e284007c 	add	r0, r4, #124	; 0x7c
    85f4:	e3a03000 	mov	r3, #0
    85f8:	e3a02004 	mov	r2, #4
    85fc:	e3a0100f 	mov	r1, #15
    8600:	eb000ad4 	bl	b158 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    8604:	e3550000 	cmp	r5, #0
    8608:	e3a03000 	mov	r3, #0
    860c:	e3a01001 	mov	r1, #1
    8610:	13a0c002 	movne	ip, #2
    8614:	03a0c001 	moveq	ip, #1
    8618:	e2842a01 	add	r2, r4, #4096	; 0x1000
    861c:	e58438ac 	str	r3, [r4, #2220]	; 0x8ac
    8620:	e58460a4 	str	r6, [r4, #164]	; 0xa4
    8624:	e58438b0 	str	r3, [r4, #2224]	; 0x8b0
    8628:	e5c450a8 	strb	r5, [r4, #168]	; 0xa8
    862c:	e5c430a9 	strb	r3, [r4, #169]	; 0xa9
    8630:	e58438b4 	str	r3, [r4, #2228]	; 0x8b4
    8634:	e1a00004 	mov	r0, r4
    8638:	e58230b8 	str	r3, [r2, #184]	; 0xb8
    863c:	e582c0d0 	str	ip, [r2, #208]	; 0xd0
    8640:	e58230c4 	str	r3, [r2, #196]	; 0xc4
    8644:	e58230bc 	str	r3, [r2, #188]	; 0xbc
    8648:	e58210c0 	str	r1, [r2, #192]	; 0xc0
    864c:	e58210d4 	str	r1, [r2, #212]	; 0xd4
    8650:	e8bd8070 	pop	{r4, r5, r6, pc}
    8654:	00013038 	.word	0x00013038

00008658 <CRdSerialDevice::Initialize(unsigned int)>:
    8658:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    865c:	e1a08001 	mov	r8, r1
    8660:	e1a04000 	mov	r4, r0
    8664:	eb0010f5 	bl	ca40 <CMachineInfo::Get()>
    8668:	e3a01002 	mov	r1, #2
    866c:	eb001093 	bl	c8c0 <CMachineInfo::GetClockRate(unsigned int) const>
    8670:	e2505000 	subs	r5, r0, #0
    8674:	e2487f4b 	sub	r7, r8, #300	; 0x12c
    8678:	e1a06208 	lsl	r6, r8, #4
    867c:	0a000045 	beq	8798 <CRdSerialDevice::Initialize(unsigned int)+0x140>
    8680:	e59f3158 	ldr	r3, [pc, #344]	; 87e0 <CRdSerialDevice::Initialize(unsigned int)+0x188>
    8684:	e1570003 	cmp	r7, r3
    8688:	8a00003d 	bhi	8784 <CRdSerialDevice::Initialize(unsigned int)+0x12c>
    868c:	e1a01006 	mov	r1, r6
    8690:	e1a00005 	mov	r0, r5
    8694:	eb00042c 	bl	974c <__udivsi3>
    8698:	e59f3144 	ldr	r3, [pc, #324]	; 87e4 <CRdSerialDevice::Initialize(unsigned int)+0x18c>
    869c:	e2402001 	sub	r2, r0, #1
    86a0:	e1520003 	cmp	r2, r3
    86a4:	e1a07000 	mov	r7, r0
    86a8:	8a000042 	bhi	87b8 <CRdSerialDevice::Initialize(unsigned int)+0x160>
    86ac:	e1a00005 	mov	r0, r5
    86b0:	e1a01006 	mov	r1, r6
    86b4:	eb000461 	bl	9840 <__aeabi_uidivmod>
    86b8:	e1a00181 	lsl	r0, r1, #3
    86bc:	e1a01008 	mov	r1, r8
    86c0:	eb000421 	bl	974c <__udivsi3>
    86c4:	e2005001 	and	r5, r0, #1
    86c8:	e08550a0 	add	r5, r5, r0, lsr #1
    86cc:	e355003f 	cmp	r5, #63	; 0x3f
    86d0:	8a00003d 	bhi	87cc <CRdSerialDevice::Initialize(unsigned int)+0x174>
    86d4:	e59400a4 	ldr	r0, [r4, #164]	; 0xa4
    86d8:	e3500000 	cmp	r0, #0
    86dc:	0a000008 	beq	8704 <CRdSerialDevice::Initialize(unsigned int)+0xac>
    86e0:	e5d430a8 	ldrb	r3, [r4, #168]	; 0xa8
    86e4:	e59f20fc 	ldr	r2, [pc, #252]	; 87e8 <CRdSerialDevice::Initialize(unsigned int)+0x190>
    86e8:	e3530000 	cmp	r3, #0
    86ec:	e3a01039 	mov	r1, #57	; 0x39
    86f0:	e1a03004 	mov	r3, r4
    86f4:	0a000020 	beq	877c <CRdSerialDevice::Initialize(unsigned int)+0x124>
    86f8:	eb000be7 	bl	b69c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>
    86fc:	e3a03001 	mov	r3, #1
    8700:	e5c430a9 	strb	r3, [r4, #169]	; 0xa9
    8704:	e3a02000 	mov	r2, #0
    8708:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
    870c:	e59f30d8 	ldr	r3, [pc, #216]	; 87ec <CRdSerialDevice::Initialize(unsigned int)+0x194>
    8710:	e59f10d8 	ldr	r1, [pc, #216]	; 87f0 <CRdSerialDevice::Initialize(unsigned int)+0x198>
    8714:	e5832038 	str	r2, [r3, #56]	; 0x38
    8718:	e5831044 	str	r1, [r3, #68]	; 0x44
    871c:	e5837024 	str	r7, [r3, #36]	; 0x24
    8720:	e5835028 	str	r5, [r3, #40]	; 0x28
    8724:	e59420a4 	ldr	r2, [r4, #164]	; 0xa4
    8728:	e3a05000 	mov	r5, #0
    872c:	e3520000 	cmp	r2, #0
    8730:	13a02e45 	movne	r2, #1104	; 0x450
    8734:	03a02060 	moveq	r2, #96	; 0x60
    8738:	13a00009 	movne	r0, #9
    873c:	13a01070 	movne	r1, #112	; 0x70
    8740:	15830034 	strne	r0, [r3, #52]	; 0x34
    8744:	0583202c 	streq	r2, [r3, #44]	; 0x2c
    8748:	1583102c 	strne	r1, [r3, #44]	; 0x2c
    874c:	15832038 	strne	r2, [r3, #56]	; 0x38
    8750:	e59f3094 	ldr	r3, [pc, #148]	; 87ec <CRdSerialDevice::Initialize(unsigned int)+0x194>
    8754:	e59f2098 	ldr	r2, [pc, #152]	; 87f4 <CRdSerialDevice::Initialize(unsigned int)+0x19c>
    8758:	e5832030 	str	r2, [r3, #48]	; 0x30
    875c:	ee075fba 	mcr	15, 0, r5, cr7, cr10, {5}
    8760:	eb0006ff 	bl	a364 <CDeviceNameService::Get()>
    8764:	e1a03005 	mov	r3, r5
    8768:	e1a02004 	mov	r2, r4
    876c:	e59f1084 	ldr	r1, [pc, #132]	; 87f8 <CRdSerialDevice::Initialize(unsigned int)+0x1a0>
    8770:	eb00063b 	bl	a064 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
    8774:	e3a00001 	mov	r0, #1
    8778:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    877c:	eb000b59 	bl	b4e8 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    8780:	eaffffdd 	b	86fc <CRdSerialDevice::Initialize(unsigned int)+0xa4>
    8784:	e3a0208c 	mov	r2, #140	; 0x8c
    8788:	e59f106c 	ldr	r1, [pc, #108]	; 87fc <CRdSerialDevice::Initialize(unsigned int)+0x1a4>
    878c:	e59f006c 	ldr	r0, [pc, #108]	; 8800 <CRdSerialDevice::Initialize(unsigned int)+0x1a8>
    8790:	eb0004c4 	bl	9aa8 <assertion_failed>
    8794:	eaffffbc 	b	868c <CRdSerialDevice::Initialize(unsigned int)+0x34>
    8798:	e3a0208a 	mov	r2, #138	; 0x8a
    879c:	e59f1058 	ldr	r1, [pc, #88]	; 87fc <CRdSerialDevice::Initialize(unsigned int)+0x1a4>
    87a0:	e59f005c 	ldr	r0, [pc, #92]	; 8804 <CRdSerialDevice::Initialize(unsigned int)+0x1ac>
    87a4:	eb0004bf 	bl	9aa8 <assertion_failed>
    87a8:	e59f3030 	ldr	r3, [pc, #48]	; 87e0 <CRdSerialDevice::Initialize(unsigned int)+0x188>
    87ac:	e1570003 	cmp	r7, r3
    87b0:	91a07005 	movls	r7, r5
    87b4:	8afffff2 	bhi	8784 <CRdSerialDevice::Initialize(unsigned int)+0x12c>
    87b8:	e3a0208f 	mov	r2, #143	; 0x8f
    87bc:	e59f1038 	ldr	r1, [pc, #56]	; 87fc <CRdSerialDevice::Initialize(unsigned int)+0x1a4>
    87c0:	e59f0040 	ldr	r0, [pc, #64]	; 8808 <CRdSerialDevice::Initialize(unsigned int)+0x1b0>
    87c4:	eb0004b7 	bl	9aa8 <assertion_failed>
    87c8:	eaffffb7 	b	86ac <CRdSerialDevice::Initialize(unsigned int)+0x54>
    87cc:	e3a02092 	mov	r2, #146	; 0x92
    87d0:	e59f1024 	ldr	r1, [pc, #36]	; 87fc <CRdSerialDevice::Initialize(unsigned int)+0x1a4>
    87d4:	e59f0030 	ldr	r0, [pc, #48]	; 880c <CRdSerialDevice::Initialize(unsigned int)+0x1b4>
    87d8:	eb0004b2 	bl	9aa8 <assertion_failed>
    87dc:	eaffffbc 	b	86d4 <CRdSerialDevice::Initialize(unsigned int)+0x7c>
    87e0:	003d07d4 	.word	0x003d07d4
    87e4:	0000fffe 	.word	0x0000fffe
    87e8:	00008f68 	.word	0x00008f68
    87ec:	20201000 	.word	0x20201000
    87f0:	000007ff 	.word	0x000007ff
    87f4:	00000301 	.word	0x00000301
    87f8:	000130e0 	.word	0x000130e0
    87fc:	0001304c 	.word	0x0001304c
    8800:	0001307c 	.word	0x0001307c
    8804:	0001306c 	.word	0x0001306c
    8808:	000130a8 	.word	0x000130a8
    880c:	000130cc 	.word	0x000130cc

00008810 <CRdSerialDevice::GetOptions() const>:
    8810:	e2800a01 	add	r0, r0, #4096	; 0x1000
    8814:	e59000c0 	ldr	r0, [r0, #192]	; 0xc0
    8818:	e12fff1e 	bx	lr

0000881c <CRdSerialDevice::SetOptions(unsigned int)>:
    881c:	e2800a01 	add	r0, r0, #4096	; 0x1000
    8820:	e58010c0 	str	r1, [r0, #192]	; 0xc0
    8824:	e12fff1e 	bx	lr

00008828 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())>:
    8828:	e92d4070 	push	{r4, r5, r6, lr}
    882c:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
    8830:	e1a04000 	mov	r4, r0
    8834:	e3530000 	cmp	r3, #0
    8838:	e1a05001 	mov	r5, r1
    883c:	e1a06002 	mov	r6, r2
    8840:	0a00001d 	beq	88bc <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x94>
    8844:	e2844a01 	add	r4, r4, #4096	; 0x1000
    8848:	e59430c4 	ldr	r3, [r4, #196]	; 0xc4
    884c:	e3530000 	cmp	r3, #0
    8850:	0a000003 	beq	8864 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x3c>
    8854:	e59f2088 	ldr	r2, [pc, #136]	; 88e4 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xbc>
    8858:	e59f1088 	ldr	r1, [pc, #136]	; 88e8 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc0>
    885c:	e59f0088 	ldr	r0, [pc, #136]	; 88ec <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc4>
    8860:	eb000490 	bl	9aa8 <assertion_failed>
    8864:	e3550000 	cmp	r5, #0
    8868:	0a000018 	beq	88d0 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xa8>
    886c:	e1d530d0 	ldrsb	r3, [r5]
    8870:	e3530000 	cmp	r3, #0
    8874:	0a000005 	beq	8890 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x68>
    8878:	e3560000 	cmp	r6, #0
    887c:	0a000009 	beq	88a8 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x80>
    8880:	e58460cc 	str	r6, [r4, #204]	; 0xcc
    8884:	e58450c8 	str	r5, [r4, #200]	; 0xc8
    8888:	e58450c4 	str	r5, [r4, #196]	; 0xc4
    888c:	e8bd8070 	pop	{r4, r5, r6, pc}
    8890:	e3a02f57 	mov	r2, #348	; 0x15c
    8894:	e59f104c 	ldr	r1, [pc, #76]	; 88e8 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc0>
    8898:	e59f0050 	ldr	r0, [pc, #80]	; 88f0 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc8>
    889c:	eb000481 	bl	9aa8 <assertion_failed>
    88a0:	e3560000 	cmp	r6, #0
    88a4:	1afffff5 	bne	8880 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x58>
    88a8:	e59f2044 	ldr	r2, [pc, #68]	; 88f4 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xcc>
    88ac:	e59f1034 	ldr	r1, [pc, #52]	; 88e8 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc0>
    88b0:	e59f0040 	ldr	r0, [pc, #64]	; 88f8 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xd0>
    88b4:	eb00047b 	bl	9aa8 <assertion_failed>
    88b8:	eafffff0 	b	8880 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x58>
    88bc:	e3a02f56 	mov	r2, #344	; 0x158
    88c0:	e59f1020 	ldr	r1, [pc, #32]	; 88e8 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc0>
    88c4:	e59f0030 	ldr	r0, [pc, #48]	; 88fc <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xd4>
    88c8:	eb000476 	bl	9aa8 <assertion_failed>
    88cc:	eaffffdc 	b	8844 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x1c>
    88d0:	e59f2028 	ldr	r2, [pc, #40]	; 8900 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xd8>
    88d4:	e59f100c 	ldr	r1, [pc, #12]	; 88e8 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc0>
    88d8:	e59f0024 	ldr	r0, [pc, #36]	; 8904 <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xdc>
    88dc:	eb000471 	bl	9aa8 <assertion_failed>
    88e0:	eaffffe1 	b	886c <CRdSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x44>
    88e4:	00000159 	.word	0x00000159
    88e8:	0001304c 	.word	0x0001304c
    88ec:	00013100 	.word	0x00013100
    88f0:	0001311c 	.word	0x0001311c
    88f4:	0000015d 	.word	0x0000015d
    88f8:	00013874 	.word	0x00013874
    88fc:	000130e8 	.word	0x000130e8
    8900:	0000015b 	.word	0x0000015b
    8904:	00013110 	.word	0x00013110

00008908 <CRdSerialDevice::AvailableForWrite()>:
    8908:	e92d4010 	push	{r4, lr}
    890c:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
    8910:	e1a04000 	mov	r4, r0
    8914:	e3530000 	cmp	r3, #0
    8918:	0a000014 	beq	8970 <CRdSerialDevice::AvailableForWrite()+0x68>
    891c:	e2844a01 	add	r4, r4, #4096	; 0x1000
    8920:	e59400d0 	ldr	r0, [r4, #208]	; 0xd0
    8924:	e3500000 	cmp	r0, #0
    8928:	1a00000d 	bne	8964 <CRdSerialDevice::AvailableForWrite()+0x5c>
    892c:	e59420bc 	ldr	r2, [r4, #188]	; 0xbc
    8930:	e59430b8 	ldr	r3, [r4, #184]	; 0xb8
    8934:	e1520003 	cmp	r2, r3
    8938:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    893c:	e59420b8 	ldr	r2, [r4, #184]	; 0xb8
    8940:	92834e7f 	addls	r4, r3, #2032	; 0x7f0
    8944:	9284400f 	addls	r4, r4, #15
    8948:	82434001 	subhi	r4, r3, #1
    894c:	e3500000 	cmp	r0, #0
    8950:	e0444002 	sub	r4, r4, r2
    8954:	0a000000 	beq	895c <CRdSerialDevice::AvailableForWrite()+0x54>
    8958:	eb002420 	bl	119e0 <LeaveCritical>
    895c:	e1a00004 	mov	r0, r4
    8960:	e8bd8010 	pop	{r4, pc}
    8964:	eb0023f0 	bl	1192c <EnterCritical>
    8968:	e59400d0 	ldr	r0, [r4, #208]	; 0xd0
    896c:	eaffffee 	b	892c <CRdSerialDevice::AvailableForWrite()+0x24>
    8970:	e59f200c 	ldr	r2, [pc, #12]	; 8984 <CRdSerialDevice::AvailableForWrite()+0x7c>
    8974:	e59f100c 	ldr	r1, [pc, #12]	; 8988 <CRdSerialDevice::AvailableForWrite()+0x80>
    8978:	e59f000c 	ldr	r0, [pc, #12]	; 898c <CRdSerialDevice::AvailableForWrite()+0x84>
    897c:	eb000449 	bl	9aa8 <assertion_failed>
    8980:	eaffffe5 	b	891c <CRdSerialDevice::AvailableForWrite()+0x14>
    8984:	00000167 	.word	0x00000167
    8988:	0001304c 	.word	0x0001304c
    898c:	000130e8 	.word	0x000130e8

00008990 <CRdSerialDevice::AvailableForRead()>:
    8990:	e92d4070 	push	{r4, r5, r6, lr}
    8994:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
    8998:	e1a04000 	mov	r4, r0
    899c:	e3530000 	cmp	r3, #0
    89a0:	0a000014 	beq	89f8 <CRdSerialDevice::AvailableForRead()+0x68>
    89a4:	e2845a01 	add	r5, r4, #4096	; 0x1000
    89a8:	e59500d0 	ldr	r0, [r5, #208]	; 0xd0
    89ac:	e3500000 	cmp	r0, #0
    89b0:	1a00000d 	bne	89ec <CRdSerialDevice::AvailableForRead()+0x5c>
    89b4:	e59428ac 	ldr	r2, [r4, #2220]	; 0x8ac
    89b8:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
    89bc:	e1520003 	cmp	r2, r3
    89c0:	e59438ac 	ldr	r3, [r4, #2220]	; 0x8ac
    89c4:	359428b0 	ldrcc	r2, [r4, #2224]	; 0x8b0
    89c8:	259448b0 	ldrcs	r4, [r4, #2224]	; 0x8b0
    89cc:	32834b02 	addcc	r4, r3, #2048	; 0x800
    89d0:	30444002 	subcc	r4, r4, r2
    89d4:	20434004 	subcs	r4, r3, r4
    89d8:	e3500000 	cmp	r0, #0
    89dc:	0a000000 	beq	89e4 <CRdSerialDevice::AvailableForRead()+0x54>
    89e0:	eb0023fe 	bl	119e0 <LeaveCritical>
    89e4:	e1a00004 	mov	r0, r4
    89e8:	e8bd8070 	pop	{r4, r5, r6, pc}
    89ec:	eb0023ce 	bl	1192c <EnterCritical>
    89f0:	e59500d0 	ldr	r0, [r5, #208]	; 0xd0
    89f4:	eaffffee 	b	89b4 <CRdSerialDevice::AvailableForRead()+0x24>
    89f8:	e3a02f5f 	mov	r2, #380	; 0x17c
    89fc:	e59f1008 	ldr	r1, [pc, #8]	; 8a0c <CRdSerialDevice::AvailableForRead()+0x7c>
    8a00:	e59f0008 	ldr	r0, [pc, #8]	; 8a10 <CRdSerialDevice::AvailableForRead()+0x80>
    8a04:	eb000427 	bl	9aa8 <assertion_failed>
    8a08:	eaffffe5 	b	89a4 <CRdSerialDevice::AvailableForRead()+0x14>
    8a0c:	0001304c 	.word	0x0001304c
    8a10:	000130e8 	.word	0x000130e8

00008a14 <CRdSerialDevice::Peek()>:
    8a14:	e92d4070 	push	{r4, r5, r6, lr}
    8a18:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
    8a1c:	e1a04000 	mov	r4, r0
    8a20:	e3530000 	cmp	r3, #0
    8a24:	0a00001b 	beq	8a98 <CRdSerialDevice::Peek()+0x84>
    8a28:	e2845a01 	add	r5, r4, #4096	; 0x1000
    8a2c:	e59500d0 	ldr	r0, [r5, #208]	; 0xd0
    8a30:	e3500000 	cmp	r0, #0
    8a34:	1a000008 	bne	8a5c <CRdSerialDevice::Peek()+0x48>
    8a38:	e59428ac 	ldr	r2, [r4, #2220]	; 0x8ac
    8a3c:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
    8a40:	e1520003 	cmp	r2, r3
    8a44:	0a000018 	beq	8aac <CRdSerialDevice::Peek()+0x98>
    8a48:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
    8a4c:	e0844003 	add	r4, r4, r3
    8a50:	e5d440aa 	ldrb	r4, [r4, #170]	; 0xaa
    8a54:	e1a00004 	mov	r0, r4
    8a58:	e8bd8070 	pop	{r4, r5, r6, pc}
    8a5c:	eb0023b2 	bl	1192c <EnterCritical>
    8a60:	e59428ac 	ldr	r2, [r4, #2220]	; 0x8ac
    8a64:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
    8a68:	e1520003 	cmp	r2, r3
    8a6c:	159438b0 	ldrne	r3, [r4, #2224]	; 0x8b0
    8a70:	059520d0 	ldreq	r2, [r5, #208]	; 0xd0
    8a74:	159520d0 	ldrne	r2, [r5, #208]	; 0xd0
    8a78:	10844003 	addne	r4, r4, r3
    8a7c:	03e04000 	mvneq	r4, #0
    8a80:	15d440aa 	ldrbne	r4, [r4, #170]	; 0xaa
    8a84:	e3520000 	cmp	r2, #0
    8a88:	0afffff1 	beq	8a54 <CRdSerialDevice::Peek()+0x40>
    8a8c:	eb0023d3 	bl	119e0 <LeaveCritical>
    8a90:	e1a00004 	mov	r0, r4
    8a94:	e8bd8070 	pop	{r4, r5, r6, pc}
    8a98:	e59f2014 	ldr	r2, [pc, #20]	; 8ab4 <CRdSerialDevice::Peek()+0xa0>
    8a9c:	e59f1014 	ldr	r1, [pc, #20]	; 8ab8 <CRdSerialDevice::Peek()+0xa4>
    8aa0:	e59f0014 	ldr	r0, [pc, #20]	; 8abc <CRdSerialDevice::Peek()+0xa8>
    8aa4:	eb0003ff 	bl	9aa8 <assertion_failed>
    8aa8:	eaffffde 	b	8a28 <CRdSerialDevice::Peek()+0x14>
    8aac:	e3e04000 	mvn	r4, #0
    8ab0:	eaffffe7 	b	8a54 <CRdSerialDevice::Peek()+0x40>
    8ab4:	00000191 	.word	0x00000191
    8ab8:	0001304c 	.word	0x0001304c
    8abc:	000130e8 	.word	0x000130e8

00008ac0 <CRdSerialDevice::Flush()>:
    8ac0:	e3a03000 	mov	r3, #0
    8ac4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    8ac8:	e59f2010 	ldr	r2, [pc, #16]	; 8ae0 <CRdSerialDevice::Flush()+0x20>
    8acc:	e5923018 	ldr	r3, [r2, #24]
    8ad0:	e2133008 	ands	r3, r3, #8
    8ad4:	1afffffc 	bne	8acc <CRdSerialDevice::Flush()+0xc>
    8ad8:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    8adc:	e12fff1e 	bx	lr
    8ae0:	20201000 	.word	0x20201000

00008ae4 <CRdSerialDevice::Write(unsigned char)>:
    8ae4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8ae8:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
    8aec:	e3530000 	cmp	r3, #0
    8af0:	0a000027 	beq	8b94 <CRdSerialDevice::Write(unsigned char)+0xb0>
    8af4:	e2805a01 	add	r5, r0, #4096	; 0x1000
    8af8:	e59520d0 	ldr	r2, [r5, #208]	; 0xd0
    8afc:	e1a06001 	mov	r6, r1
    8b00:	e3520000 	cmp	r2, #0
    8b04:	e1a04000 	mov	r4, r0
    8b08:	1a000015 	bne	8b64 <CRdSerialDevice::Write(unsigned char)+0x80>
    8b0c:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
    8b10:	e59510bc 	ldr	r1, [r5, #188]	; 0xbc
    8b14:	e2833001 	add	r3, r3, #1
    8b18:	e1a03a83 	lsl	r3, r3, #21
    8b1c:	e1a03aa3 	lsr	r3, r3, #21
    8b20:	e1530001 	cmp	r3, r1
    8b24:	0a000024 	beq	8bbc <CRdSerialDevice::Write(unsigned char)+0xd8>
    8b28:	e3a07001 	mov	r7, #1
    8b2c:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
    8b30:	e0840003 	add	r0, r4, r3
    8b34:	e0833007 	add	r3, r3, r7
    8b38:	e58530b8 	str	r3, [r5, #184]	; 0xb8
    8b3c:	e5c068b8 	strb	r6, [r0, #2232]	; 0x8b8
    8b40:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
    8b44:	e1a03a83 	lsl	r3, r3, #21
    8b48:	e1a03aa3 	lsr	r3, r3, #21
    8b4c:	e58530b8 	str	r3, [r5, #184]	; 0xb8
    8b50:	e3520000 	cmp	r2, #0
    8b54:	0a000000 	beq	8b5c <CRdSerialDevice::Write(unsigned char)+0x78>
    8b58:	eb0023a0 	bl	119e0 <LeaveCritical>
    8b5c:	e1a00007 	mov	r0, r7
    8b60:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8b64:	e1a00002 	mov	r0, r2
    8b68:	eb00236f 	bl	1192c <EnterCritical>
    8b6c:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
    8b70:	e59520bc 	ldr	r2, [r5, #188]	; 0xbc
    8b74:	e2833001 	add	r3, r3, #1
    8b78:	e1a03a83 	lsl	r3, r3, #21
    8b7c:	e1a03aa3 	lsr	r3, r3, #21
    8b80:	e1530002 	cmp	r3, r2
    8b84:	03a07000 	moveq	r7, #0
    8b88:	e59520d0 	ldr	r2, [r5, #208]	; 0xd0
    8b8c:	1affffe5 	bne	8b28 <CRdSerialDevice::Write(unsigned char)+0x44>
    8b90:	eaffffee 	b	8b50 <CRdSerialDevice::Write(unsigned char)+0x6c>
    8b94:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    8b98:	e59f2028 	ldr	r2, [pc, #40]	; 8bc8 <CRdSerialDevice::Write(unsigned char)+0xe4>
    8b9c:	e5923018 	ldr	r3, [r2, #24]
    8ba0:	e2133020 	ands	r3, r3, #32
    8ba4:	1afffffc 	bne	8b9c <CRdSerialDevice::Write(unsigned char)+0xb8>
    8ba8:	e5821000 	str	r1, [r2]
    8bac:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    8bb0:	e3a07001 	mov	r7, #1
    8bb4:	e1a00007 	mov	r0, r7
    8bb8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8bbc:	e1a07002 	mov	r7, r2
    8bc0:	e1a00007 	mov	r0, r7
    8bc4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8bc8:	20201000 	.word	0x20201000

00008bcc <CRdSerialDevice::Write(void const*, unsigned int)>:
    8bcc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8bd0:	e2806a01 	add	r6, r0, #4096	; 0x1000
    8bd4:	e1a07000 	mov	r7, r0
    8bd8:	e59600d4 	ldr	r0, [r6, #212]	; 0xd4
    8bdc:	e1a04001 	mov	r4, r1
    8be0:	e3500000 	cmp	r0, #0
    8be4:	e1a08002 	mov	r8, r2
    8be8:	1a000052 	bne	8d38 <CRdSerialDevice::Write(void const*, unsigned int)+0x16c>
    8bec:	e3540000 	cmp	r4, #0
    8bf0:	0a000053 	beq	8d44 <CRdSerialDevice::Write(void const*, unsigned int)+0x178>
    8bf4:	e3580000 	cmp	r8, #0
    8bf8:	0a00005b 	beq	8d6c <CRdSerialDevice::Write(void const*, unsigned int)+0x1a0>
    8bfc:	e3a05000 	mov	r5, #0
    8c00:	e2444001 	sub	r4, r4, #1
    8c04:	ea000002 	b	8c14 <CRdSerialDevice::Write(void const*, unsigned int)+0x48>
    8c08:	e2855001 	add	r5, r5, #1
    8c0c:	e1550008 	cmp	r5, r8
    8c10:	0a00000f 	beq	8c54 <CRdSerialDevice::Write(void const*, unsigned int)+0x88>
    8c14:	e5f41001 	ldrb	r1, [r4, #1]!
    8c18:	e1a00007 	mov	r0, r7
    8c1c:	ebffffb0 	bl	8ae4 <CRdSerialDevice::Write(unsigned char)>
    8c20:	e3500000 	cmp	r0, #0
    8c24:	0a00000a 	beq	8c54 <CRdSerialDevice::Write(void const*, unsigned int)+0x88>
    8c28:	e5d43000 	ldrb	r3, [r4]
    8c2c:	e353000a 	cmp	r3, #10
    8c30:	1afffff4 	bne	8c08 <CRdSerialDevice::Write(void const*, unsigned int)+0x3c>
    8c34:	e59630c0 	ldr	r3, [r6, #192]	; 0xc0
    8c38:	e3130001 	tst	r3, #1
    8c3c:	0afffff1 	beq	8c08 <CRdSerialDevice::Write(void const*, unsigned int)+0x3c>
    8c40:	e3a0100d 	mov	r1, #13
    8c44:	e1a00007 	mov	r0, r7
    8c48:	ebffffa5 	bl	8ae4 <CRdSerialDevice::Write(unsigned char)>
    8c4c:	e3500000 	cmp	r0, #0
    8c50:	1affffec 	bne	8c08 <CRdSerialDevice::Write(void const*, unsigned int)+0x3c>
    8c54:	e59630d4 	ldr	r3, [r6, #212]	; 0xd4
    8c58:	e3530000 	cmp	r3, #0
    8c5c:	1a000033 	bne	8d30 <CRdSerialDevice::Write(void const*, unsigned int)+0x164>
    8c60:	e59730a4 	ldr	r3, [r7, #164]	; 0xa4
    8c64:	e3530000 	cmp	r3, #0
    8c68:	0a000028 	beq	8d10 <CRdSerialDevice::Write(void const*, unsigned int)+0x144>
    8c6c:	e59600d0 	ldr	r0, [r6, #208]	; 0xd0
    8c70:	e3500000 	cmp	r0, #0
    8c74:	1a000027 	bne	8d18 <CRdSerialDevice::Write(void const*, unsigned int)+0x14c>
    8c78:	e59630b8 	ldr	r3, [r6, #184]	; 0xb8
    8c7c:	e59620bc 	ldr	r2, [r6, #188]	; 0xbc
    8c80:	e1520003 	cmp	r2, r3
    8c84:	0a000021 	beq	8d10 <CRdSerialDevice::Write(void const*, unsigned int)+0x144>
    8c88:	e3a03000 	mov	r3, #0
    8c8c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    8c90:	e59630b8 	ldr	r3, [r6, #184]	; 0xb8
    8c94:	e59620bc 	ldr	r2, [r6, #188]	; 0xbc
    8c98:	e1520003 	cmp	r2, r3
    8c9c:	0a000015 	beq	8cf8 <CRdSerialDevice::Write(void const*, unsigned int)+0x12c>
    8ca0:	e59f20cc 	ldr	r2, [pc, #204]	; 8d74 <CRdSerialDevice::Write(void const*, unsigned int)+0x1a8>
    8ca4:	e5923018 	ldr	r3, [r2, #24]
    8ca8:	e3130020 	tst	r3, #32
    8cac:	1a000029 	bne	8d58 <CRdSerialDevice::Write(void const*, unsigned int)+0x18c>
    8cb0:	e59f00c0 	ldr	r0, [pc, #192]	; 8d78 <CRdSerialDevice::Write(void const*, unsigned int)+0x1ac>
    8cb4:	ea000002 	b	8cc4 <CRdSerialDevice::Write(void const*, unsigned int)+0xf8>
    8cb8:	e5923018 	ldr	r3, [r2, #24]
    8cbc:	e3130020 	tst	r3, #32
    8cc0:	1a000024 	bne	8d58 <CRdSerialDevice::Write(void const*, unsigned int)+0x18c>
    8cc4:	e59630bc 	ldr	r3, [r6, #188]	; 0xbc
    8cc8:	e2831001 	add	r1, r3, #1
    8ccc:	e58610bc 	str	r1, [r6, #188]	; 0xbc
    8cd0:	e0873003 	add	r3, r7, r3
    8cd4:	e5d338b8 	ldrb	r3, [r3, #2232]	; 0x8b8
    8cd8:	e5823000 	str	r3, [r2]
    8cdc:	e59630bc 	ldr	r3, [r6, #188]	; 0xbc
    8ce0:	e0033000 	and	r3, r3, r0
    8ce4:	e58630bc 	str	r3, [r6, #188]	; 0xbc
    8ce8:	e59610b8 	ldr	r1, [r6, #184]	; 0xb8
    8cec:	e59630bc 	ldr	r3, [r6, #188]	; 0xbc
    8cf0:	e1510003 	cmp	r1, r3
    8cf4:	1affffef 	bne	8cb8 <CRdSerialDevice::Write(void const*, unsigned int)+0xec>
    8cf8:	e3a03000 	mov	r3, #0
    8cfc:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    8d00:	e59630d0 	ldr	r3, [r6, #208]	; 0xd0
    8d04:	e3530000 	cmp	r3, #0
    8d08:	0a000000 	beq	8d10 <CRdSerialDevice::Write(void const*, unsigned int)+0x144>
    8d0c:	eb002333 	bl	119e0 <LeaveCritical>
    8d10:	e1a00005 	mov	r0, r5
    8d14:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8d18:	eb002303 	bl	1192c <EnterCritical>
    8d1c:	e59620b8 	ldr	r2, [r6, #184]	; 0xb8
    8d20:	e59630bc 	ldr	r3, [r6, #188]	; 0xbc
    8d24:	e1520003 	cmp	r2, r3
    8d28:	1affffd6 	bne	8c88 <CRdSerialDevice::Write(void const*, unsigned int)+0xbc>
    8d2c:	eafffff3 	b	8d00 <CRdSerialDevice::Write(void const*, unsigned int)+0x134>
    8d30:	eb00232a 	bl	119e0 <LeaveCritical>
    8d34:	eaffffc9 	b	8c60 <CRdSerialDevice::Write(void const*, unsigned int)+0x94>
    8d38:	eb0022fb 	bl	1192c <EnterCritical>
    8d3c:	e3540000 	cmp	r4, #0
    8d40:	1affffab 	bne	8bf4 <CRdSerialDevice::Write(void const*, unsigned int)+0x28>
    8d44:	e3a020c3 	mov	r2, #195	; 0xc3
    8d48:	e59f102c 	ldr	r1, [pc, #44]	; 8d7c <CRdSerialDevice::Write(void const*, unsigned int)+0x1b0>
    8d4c:	e59f002c 	ldr	r0, [pc, #44]	; 8d80 <CRdSerialDevice::Write(void const*, unsigned int)+0x1b4>
    8d50:	eb000354 	bl	9aa8 <assertion_failed>
    8d54:	eaffffa6 	b	8bf4 <CRdSerialDevice::Write(void const*, unsigned int)+0x28>
    8d58:	e59f2014 	ldr	r2, [pc, #20]	; 8d74 <CRdSerialDevice::Write(void const*, unsigned int)+0x1a8>
    8d5c:	e5923038 	ldr	r3, [r2, #56]	; 0x38
    8d60:	e3833020 	orr	r3, r3, #32
    8d64:	e5823038 	str	r3, [r2, #56]	; 0x38
    8d68:	eaffffe2 	b	8cf8 <CRdSerialDevice::Write(void const*, unsigned int)+0x12c>
    8d6c:	e1a05008 	mov	r5, r8
    8d70:	eaffffb7 	b	8c54 <CRdSerialDevice::Write(void const*, unsigned int)+0x88>
    8d74:	20201000 	.word	0x20201000
    8d78:	000007ff 	.word	0x000007ff
    8d7c:	0001304c 	.word	0x0001304c
    8d80:	00013060 	.word	0x00013060

00008d84 <CRdSerialDevice::InterruptHandler()>:
    8d84:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    8d88:	e2804a01 	add	r4, r0, #4096	; 0x1000
    8d8c:	e1a05000 	mov	r5, r0
    8d90:	e59400d0 	ldr	r0, [r4, #208]	; 0xd0
    8d94:	e3500000 	cmp	r0, #0
    8d98:	1a00006a 	bne	8f48 <CRdSerialDevice::InterruptHandler()+0x1c4>
    8d9c:	e3a06000 	mov	r6, #0
    8da0:	ee076f9a 	mcr	15, 0, r6, cr7, cr10, {4}
    8da4:	e59f31b4 	ldr	r3, [pc, #436]	; 8f60 <CRdSerialDevice::InterruptHandler()+0x1dc>
    8da8:	e3e07002 	mvn	r7, #2
    8dac:	e1a01003 	mov	r1, r3
    8db0:	e3e0c001 	mvn	ip, #1
    8db4:	e3e0e000 	mvn	lr, #0
    8db8:	e5932040 	ldr	r2, [r3, #64]	; 0x40
    8dbc:	e59f01a0 	ldr	r0, [pc, #416]	; 8f64 <CRdSerialDevice::InterruptHandler()+0x1e0>
    8dc0:	e5832044 	str	r2, [r3, #68]	; 0x44
    8dc4:	e5913018 	ldr	r3, [r1, #24]
    8dc8:	e3130010 	tst	r3, #16
    8dcc:	1a000024 	bne	8e64 <CRdSerialDevice::InterruptHandler()+0xe0>
    8dd0:	e5912000 	ldr	r2, [r1]
    8dd4:	e3120b01 	tst	r2, #1024	; 0x400
    8dd8:	0a000045 	beq	8ef4 <CRdSerialDevice::InterruptHandler()+0x170>
    8ddc:	e59538b4 	ldr	r3, [r5, #2228]	; 0x8b4
    8de0:	e3530000 	cmp	r3, #0
    8de4:	0585e8b4 	streq	lr, [r5, #2228]	; 0x8b4
    8de8:	e59480c4 	ldr	r8, [r4, #196]	; 0xc4
    8dec:	e3580000 	cmp	r8, #0
    8df0:	0a00000a 	beq	8e20 <CRdSerialDevice::InterruptHandler()+0x9c>
    8df4:	e59490c8 	ldr	r9, [r4, #200]	; 0xc8
    8df8:	e6af3072 	sxtb	r3, r2
    8dfc:	e1d9a0d0 	ldrsb	sl, [r9]
    8e00:	e15a0003 	cmp	sl, r3
    8e04:	158480c8 	strne	r8, [r4, #200]	; 0xc8
    8e08:	1a000004 	bne	8e20 <CRdSerialDevice::InterruptHandler()+0x9c>
    8e0c:	e2893001 	add	r3, r9, #1
    8e10:	e58430c8 	str	r3, [r4, #200]	; 0xc8
    8e14:	e1d930d1 	ldrsb	r3, [r9, #1]
    8e18:	e3530000 	cmp	r3, #0
    8e1c:	03a06001 	moveq	r6, #1
    8e20:	e59538ac 	ldr	r3, [r5, #2220]	; 0x8ac
    8e24:	e59588b0 	ldr	r8, [r5, #2224]	; 0x8b0
    8e28:	e2833001 	add	r3, r3, #1
    8e2c:	e0033000 	and	r3, r3, r0
    8e30:	e1530008 	cmp	r3, r8
    8e34:	0a000034 	beq	8f0c <CRdSerialDevice::InterruptHandler()+0x188>
    8e38:	e59538ac 	ldr	r3, [r5, #2220]	; 0x8ac
    8e3c:	e2838001 	add	r8, r3, #1
    8e40:	e0853003 	add	r3, r5, r3
    8e44:	e58588ac 	str	r8, [r5, #2220]	; 0x8ac
    8e48:	e5c320aa 	strb	r2, [r3, #170]	; 0xaa
    8e4c:	e59538ac 	ldr	r3, [r5, #2220]	; 0x8ac
    8e50:	e0033000 	and	r3, r3, r0
    8e54:	e58538ac 	str	r3, [r5, #2220]	; 0x8ac
    8e58:	e5913018 	ldr	r3, [r1, #24]
    8e5c:	e3130010 	tst	r3, #16
    8e60:	0affffda 	beq	8dd0 <CRdSerialDevice::InterruptHandler()+0x4c>
    8e64:	e5913018 	ldr	r3, [r1, #24]
    8e68:	e3130020 	tst	r3, #32
    8e6c:	1a000016 	bne	8ecc <CRdSerialDevice::InterruptHandler()+0x148>
    8e70:	e59430b8 	ldr	r3, [r4, #184]	; 0xb8
    8e74:	e59420bc 	ldr	r2, [r4, #188]	; 0xbc
    8e78:	e1520003 	cmp	r2, r3
    8e7c:	0a00002c 	beq	8f34 <CRdSerialDevice::InterruptHandler()+0x1b0>
    8e80:	e59f20d8 	ldr	r2, [pc, #216]	; 8f60 <CRdSerialDevice::InterruptHandler()+0x1dc>
    8e84:	e59f00d8 	ldr	r0, [pc, #216]	; 8f64 <CRdSerialDevice::InterruptHandler()+0x1e0>
    8e88:	ea000003 	b	8e9c <CRdSerialDevice::InterruptHandler()+0x118>
    8e8c:	e59410b8 	ldr	r1, [r4, #184]	; 0xb8
    8e90:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    8e94:	e1510003 	cmp	r1, r3
    8e98:	0a000025 	beq	8f34 <CRdSerialDevice::InterruptHandler()+0x1b0>
    8e9c:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    8ea0:	e2831001 	add	r1, r3, #1
    8ea4:	e58410bc 	str	r1, [r4, #188]	; 0xbc
    8ea8:	e0853003 	add	r3, r5, r3
    8eac:	e5d338b8 	ldrb	r3, [r3, #2232]	; 0x8b8
    8eb0:	e5823000 	str	r3, [r2]
    8eb4:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    8eb8:	e0033000 	and	r3, r3, r0
    8ebc:	e58430bc 	str	r3, [r4, #188]	; 0xbc
    8ec0:	e5923018 	ldr	r3, [r2, #24]
    8ec4:	e3130020 	tst	r3, #32
    8ec8:	0affffef 	beq	8e8c <CRdSerialDevice::InterruptHandler()+0x108>
    8ecc:	e3a03000 	mov	r3, #0
    8ed0:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    8ed4:	e59430d0 	ldr	r3, [r4, #208]	; 0xd0
    8ed8:	e3530000 	cmp	r3, #0
    8edc:	1a00001b 	bne	8f50 <CRdSerialDevice::InterruptHandler()+0x1cc>
    8ee0:	e3560000 	cmp	r6, #0
    8ee4:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    8ee8:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
    8eec:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    8ef0:	e12fff13 	bx	r3
    8ef4:	e3120b02 	tst	r2, #2048	; 0x800
    8ef8:	0a000007 	beq	8f1c <CRdSerialDevice::InterruptHandler()+0x198>
    8efc:	e59538b4 	ldr	r3, [r5, #2228]	; 0x8b4
    8f00:	e3530000 	cmp	r3, #0
    8f04:	0585c8b4 	streq	ip, [r5, #2228]	; 0x8b4
    8f08:	eaffffb6 	b	8de8 <CRdSerialDevice::InterruptHandler()+0x64>
    8f0c:	e59538b4 	ldr	r3, [r5, #2228]	; 0x8b4
    8f10:	e3530000 	cmp	r3, #0
    8f14:	0585c8b4 	streq	ip, [r5, #2228]	; 0x8b4
    8f18:	eaffffa9 	b	8dc4 <CRdSerialDevice::InterruptHandler()+0x40>
    8f1c:	e3120c01 	tst	r2, #256	; 0x100
    8f20:	0affffb0 	beq	8de8 <CRdSerialDevice::InterruptHandler()+0x64>
    8f24:	e59538b4 	ldr	r3, [r5, #2228]	; 0x8b4
    8f28:	e3530000 	cmp	r3, #0
    8f2c:	058578b4 	streq	r7, [r5, #2228]	; 0x8b4
    8f30:	eaffffac 	b	8de8 <CRdSerialDevice::InterruptHandler()+0x64>
    8f34:	e59f2024 	ldr	r2, [pc, #36]	; 8f60 <CRdSerialDevice::InterruptHandler()+0x1dc>
    8f38:	e5923038 	ldr	r3, [r2, #56]	; 0x38
    8f3c:	e3c33020 	bic	r3, r3, #32
    8f40:	e5823038 	str	r3, [r2, #56]	; 0x38
    8f44:	eaffffe0 	b	8ecc <CRdSerialDevice::InterruptHandler()+0x148>
    8f48:	eb002277 	bl	1192c <EnterCritical>
    8f4c:	eaffff92 	b	8d9c <CRdSerialDevice::InterruptHandler()+0x18>
    8f50:	eb0022a2 	bl	119e0 <LeaveCritical>
    8f54:	e3560000 	cmp	r6, #0
    8f58:	1affffe2 	bne	8ee8 <CRdSerialDevice::InterruptHandler()+0x164>
    8f5c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    8f60:	20201000 	.word	0x20201000
    8f64:	000007ff 	.word	0x000007ff

00008f68 <CRdSerialDevice::InterruptStub(void*)>:
    8f68:	e92d4010 	push	{r4, lr}
    8f6c:	e2504000 	subs	r4, r0, #0
    8f70:	0a000002 	beq	8f80 <CRdSerialDevice::InterruptStub(void*)+0x18>
    8f74:	e1a00004 	mov	r0, r4
    8f78:	e8bd4010 	pop	{r4, lr}
    8f7c:	eaffff80 	b	8d84 <CRdSerialDevice::InterruptHandler()>
    8f80:	e59f0014 	ldr	r0, [pc, #20]	; 8f9c <CRdSerialDevice::InterruptStub(void*)+0x34>
    8f84:	e59f2014 	ldr	r2, [pc, #20]	; 8fa0 <CRdSerialDevice::InterruptStub(void*)+0x38>
    8f88:	e59f1014 	ldr	r1, [pc, #20]	; 8fa4 <CRdSerialDevice::InterruptStub(void*)+0x3c>
    8f8c:	eb0002c5 	bl	9aa8 <assertion_failed>
    8f90:	e1a00004 	mov	r0, r4
    8f94:	e8bd4010 	pop	{r4, lr}
    8f98:	eaffff79 	b	8d84 <CRdSerialDevice::InterruptHandler()>
    8f9c:	0001312c 	.word	0x0001312c
    8fa0:	0000022e 	.word	0x0000022e
    8fa4:	0001304c 	.word	0x0001304c

00008fa8 <CRdSerialDevice::~CRdSerialDevice()>:
    8fa8:	e59f20a4 	ldr	r2, [pc, #164]	; 9054 <CRdSerialDevice::~CRdSerialDevice()+0xac>
    8fac:	e92d4010 	push	{r4, lr}
    8fb0:	e3a03000 	mov	r3, #0
    8fb4:	e1a04000 	mov	r4, r0
    8fb8:	e5802000 	str	r2, [r0]
    8fbc:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    8fc0:	e59f2090 	ldr	r2, [pc, #144]	; 9058 <CRdSerialDevice::~CRdSerialDevice()+0xb0>
    8fc4:	e5823038 	str	r3, [r2, #56]	; 0x38
    8fc8:	e5823030 	str	r3, [r2, #48]	; 0x30
    8fcc:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    8fd0:	e5d030a9 	ldrb	r3, [r0, #169]	; 0xa9
    8fd4:	e3530000 	cmp	r3, #0
    8fd8:	0a000006 	beq	8ff8 <CRdSerialDevice::~CRdSerialDevice()+0x50>
    8fdc:	e59000a4 	ldr	r0, [r0, #164]	; 0xa4
    8fe0:	e3500000 	cmp	r0, #0
    8fe4:	0a000014 	beq	903c <CRdSerialDevice::~CRdSerialDevice()+0x94>
    8fe8:	e5d430a8 	ldrb	r3, [r4, #168]	; 0xa8
    8fec:	e3530000 	cmp	r3, #0
    8ff0:	0a00000e 	beq	9030 <CRdSerialDevice::~CRdSerialDevice()+0x88>
    8ff4:	eb0008fb 	bl	b3e8 <CInterruptSystem::DisconnectFIQ()>
    8ff8:	e3a03000 	mov	r3, #0
    8ffc:	e284007c 	add	r0, r4, #124	; 0x7c
    9000:	e58430a4 	str	r3, [r4, #164]	; 0xa4
    9004:	eb000576 	bl	a5e4 <CGPIOPin::~CGPIOPin()>
    9008:	e2840054 	add	r0, r4, #84	; 0x54
    900c:	eb000574 	bl	a5e4 <CGPIOPin::~CGPIOPin()>
    9010:	e284002c 	add	r0, r4, #44	; 0x2c
    9014:	eb000572 	bl	a5e4 <CGPIOPin::~CGPIOPin()>
    9018:	e2840004 	add	r0, r4, #4
    901c:	eb000570 	bl	a5e4 <CGPIOPin::~CGPIOPin()>
    9020:	e1a00004 	mov	r0, r4
    9024:	eb0003d1 	bl	9f70 <CDevice::~CDevice()>
    9028:	e1a00004 	mov	r0, r4
    902c:	e8bd8010 	pop	{r4, pc}
    9030:	e3a01039 	mov	r1, #57	; 0x39
    9034:	eb000966 	bl	b5d4 <CInterruptSystem::DisconnectIRQ(unsigned int)>
    9038:	eaffffee 	b	8ff8 <CRdSerialDevice::~CRdSerialDevice()+0x50>
    903c:	e59f0018 	ldr	r0, [pc, #24]	; 905c <CRdSerialDevice::~CRdSerialDevice()+0xb4>
    9040:	e3a02079 	mov	r2, #121	; 0x79
    9044:	e59f1014 	ldr	r1, [pc, #20]	; 9060 <CRdSerialDevice::~CRdSerialDevice()+0xb8>
    9048:	eb000296 	bl	9aa8 <assertion_failed>
    904c:	e59400a4 	ldr	r0, [r4, #164]	; 0xa4
    9050:	eaffffe4 	b	8fe8 <CRdSerialDevice::~CRdSerialDevice()+0x40>
    9054:	00013038 	.word	0x00013038
    9058:	20201000 	.word	0x20201000
    905c:	000130e8 	.word	0x000130e8
    9060:	0001304c 	.word	0x0001304c

00009064 <CRdSerialDevice::~CRdSerialDevice()>:
    9064:	e92d4010 	push	{r4, lr}
    9068:	e1a04000 	mov	r4, r0
    906c:	ebffffcd 	bl	8fa8 <CRdSerialDevice::~CRdSerialDevice()>
    9070:	e1a00004 	mov	r0, r4
    9074:	e59f1008 	ldr	r1, [pc, #8]	; 9084 <CRdSerialDevice::~CRdSerialDevice()+0x20>
    9078:	eb002289 	bl	11aa4 <operator delete(void*, unsigned int)>
    907c:	e1a00004 	mov	r0, r4
    9080:	e8bd8010 	pop	{r4, pc}
    9084:	000010d8 	.word	0x000010d8

00009088 <BusRaider::static_putBytesToSerial(unsigned char const*, int)>:
    9088:	e12fff1e 	bx	lr

0000908c <BusRaider::static_doChangeMachine(char const*)>:
    908c:	e59f201c 	ldr	r2, [pc, #28]	; 90b0 <BusRaider::static_doChangeMachine(char const*)+0x24>
    9090:	e5922000 	ldr	r2, [r2]
    9094:	e3520000 	cmp	r2, #0
    9098:	012fff1e 	bxeq	lr
    909c:	e1a03000 	mov	r3, r0
    90a0:	e59f200c 	ldr	r2, [pc, #12]	; 90b4 <BusRaider::static_doChangeMachine(char const*)+0x28>
    90a4:	e3a01003 	mov	r1, #3
    90a8:	e59f0008 	ldr	r0, [pc, #8]	; 90b8 <BusRaider::static_doChangeMachine(char const*)+0x2c>
    90ac:	ea000026 	b	914c <LogWrite(char const*, unsigned int, char const*, ...)>
    90b0:	00015318 	.word	0x00015318
    90b4:	00013144 	.word	0x00013144
    90b8:	00013138 	.word	0x00013138

000090bc <BusRaider::BusRaider()>:
    90bc:	e92d4010 	push	{r4, lr}
    90c0:	e1a04000 	mov	r4, r0
    90c4:	eb000060 	bl	924c <CommandHandler::CommandHandler()>
    90c8:	e59f0020 	ldr	r0, [pc, #32]	; 90f0 <BusRaider::BusRaider()+0x34>
    90cc:	e59f1020 	ldr	r1, [pc, #32]	; 90f4 <BusRaider::BusRaider()+0x38>
    90d0:	e59fc020 	ldr	ip, [pc, #32]	; 90f8 <BusRaider::BusRaider()+0x3c>
    90d4:	e59f3020 	ldr	r3, [pc, #32]	; 90fc <BusRaider::BusRaider()+0x40>
    90d8:	e59f2020 	ldr	r2, [pc, #32]	; 9100 <BusRaider::BusRaider()+0x44>
    90dc:	e5804000 	str	r4, [r0]
    90e0:	e581c000 	str	ip, [r1]
    90e4:	e1a00004 	mov	r0, r4
    90e8:	e5832000 	str	r2, [r3]
    90ec:	e8bd8010 	pop	{r4, pc}
    90f0:	00015318 	.word	0x00015318
    90f4:	00015320 	.word	0x00015320
    90f8:	00009088 	.word	0x00009088
    90fc:	00015324 	.word	0x00015324
    9100:	0000908c 	.word	0x0000908c

00009104 <BusRaider::~BusRaider()>:
    9104:	e92d4010 	push	{r4, lr}
    9108:	e3a02000 	mov	r2, #0
    910c:	e1a04000 	mov	r4, r0
    9110:	e59f300c 	ldr	r3, [pc, #12]	; 9124 <BusRaider::~BusRaider()+0x20>
    9114:	e5832000 	str	r2, [r3]
    9118:	eb000061 	bl	92a4 <CommandHandler::~CommandHandler()>
    911c:	e1a00004 	mov	r0, r4
    9120:	e8bd8010 	pop	{r4, pc}
    9124:	00015318 	.word	0x00015318

00009128 <BusRaider::putBytesToSerial(unsigned char const*, int)>:
    9128:	e12fff1e 	bx	lr

0000912c <BusRaider::doChangeMachine(char const*)>:
    912c:	e1a03001 	mov	r3, r1
    9130:	e59f2008 	ldr	r2, [pc, #8]	; 9140 <BusRaider::doChangeMachine(char const*)+0x14>
    9134:	e3a01003 	mov	r1, #3
    9138:	e59f0004 	ldr	r0, [pc, #4]	; 9144 <BusRaider::doChangeMachine(char const*)+0x18>
    913c:	ea000002 	b	914c <LogWrite(char const*, unsigned int, char const*, ...)>
    9140:	00013144 	.word	0x00013144
    9144:	00013138 	.word	0x00013138

00009148 <BusRaider::handleSerialRxBuffer(unsigned char const*, int)>:
    9148:	ea000056 	b	92a8 <CommandHandler::handleBuffer(unsigned char const*, int)>

0000914c <LogWrite(char const*, unsigned int, char const*, ...)>:
    914c:	e92d000c 	push	{r2, r3}
    9150:	e92d4030 	push	{r4, r5, lr}
    9154:	e24dd014 	sub	sp, sp, #20
    9158:	e1a05000 	mov	r5, r0
    915c:	e1a04001 	mov	r4, r1
    9160:	eb000b79 	bl	bf4c <CLogger::Get()>
    9164:	e3500000 	cmp	r0, #0
    9168:	0a00000d 	beq	91a4 <LogWrite(char const*, unsigned int, char const*, ...)+0x58>
    916c:	e2441002 	sub	r1, r4, #2
    9170:	e3510002 	cmp	r1, #2
    9174:	83a04001 	movhi	r4, #1
    9178:	959f3034 	ldrls	r3, [pc, #52]	; 91b4 <LogWrite(char const*, unsigned int, char const*, ...)+0x68>
    917c:	97d34001 	ldrbls	r4, [r3, r1]
    9180:	e28d3024 	add	r3, sp, #36	; 0x24
    9184:	e58d300c 	str	r3, [sp, #12]
    9188:	eb000b6f 	bl	bf4c <CLogger::Get()>
    918c:	e59d300c 	ldr	r3, [sp, #12]
    9190:	e1a02004 	mov	r2, r4
    9194:	e58d3000 	str	r3, [sp]
    9198:	e1a01005 	mov	r1, r5
    919c:	e59d3020 	ldr	r3, [sp, #32]
    91a0:	eb000c95 	bl	c3fc <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
    91a4:	e28dd014 	add	sp, sp, #20
    91a8:	e8bd4030 	pop	{r4, r5, lr}
    91ac:	e28dd008 	add	sp, sp, #8
    91b0:	e12fff1e 	bx	lr
    91b4:	0001315c 	.word	0x0001315c

000091b8 <CommandHandler::static_hdlcPutCh(unsigned char)>:
    91b8:	e59f3038 	ldr	r3, [pc, #56]	; 91f8 <CommandHandler::static_hdlcPutCh(unsigned char)+0x40>
    91bc:	e5932000 	ldr	r2, [r3]
    91c0:	e3520000 	cmp	r2, #0
    91c4:	012fff1e 	bxeq	lr
    91c8:	e5932004 	ldr	r2, [r3, #4]
    91cc:	e3520000 	cmp	r2, #0
    91d0:	012fff1e 	bxeq	lr
    91d4:	e1a03000 	mov	r3, r0
    91d8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    91dc:	e24dd00c 	sub	sp, sp, #12
    91e0:	e28d0008 	add	r0, sp, #8
    91e4:	e5603004 	strb	r3, [r0, #-4]!
    91e8:	e3a01001 	mov	r1, #1
    91ec:	e12fff32 	blx	r2
    91f0:	e28dd00c 	add	sp, sp, #12
    91f4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    91f8:	0001531c 	.word	0x0001531c

000091fc <CommandHandler::static_hdlcFrameRx(unsigned char const*, int)>:
    91fc:	e59f303c 	ldr	r3, [pc, #60]	; 9240 <CommandHandler::static_hdlcFrameRx(unsigned char const*, int)+0x44>
    9200:	e5932000 	ldr	r2, [r3]
    9204:	e3520000 	cmp	r2, #0
    9208:	012fff1e 	bxeq	lr
    920c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    9210:	e8920009 	ldm	r2, {r0, r3}
    9214:	e24dd00c 	sub	sp, sp, #12
    9218:	e0813003 	add	r3, r1, r3
    921c:	e2801001 	add	r1, r0, #1
    9220:	e882000a 	stm	r2, {r1, r3}
    9224:	e59f0018 	ldr	r0, [pc, #24]	; 9244 <CommandHandler::static_hdlcFrameRx(unsigned char const*, int)+0x48>
    9228:	e58d1000 	str	r1, [sp]
    922c:	e59f2014 	ldr	r2, [pc, #20]	; 9248 <CommandHandler::static_hdlcFrameRx(unsigned char const*, int)+0x4c>
    9230:	e3a01003 	mov	r1, #3
    9234:	ebffffc4 	bl	914c <LogWrite(char const*, unsigned int, char const*, ...)>
    9238:	e28dd00c 	add	sp, sp, #12
    923c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    9240:	0001531c 	.word	0x0001531c
    9244:	00013160 	.word	0x00013160
    9248:	00013170 	.word	0x00013170

0000924c <CommandHandler::CommandHandler()>:
    924c:	e92d4030 	push	{r4, r5, lr}
    9250:	e3a05000 	mov	r5, #0
    9254:	e1a04000 	mov	r4, r0
    9258:	e24dd00c 	sub	sp, sp, #12
    925c:	e58d5000 	str	r5, [sp]
    9260:	e3a03001 	mov	r3, #1
    9264:	e59f202c 	ldr	r2, [pc, #44]	; 9298 <CommandHandler::CommandHandler()+0x4c>
    9268:	e59f102c 	ldr	r1, [pc, #44]	; 929c <CommandHandler::CommandHandler()+0x50>
    926c:	e2800008 	add	r0, r0, #8
    9270:	eb00004e 	bl	93b0 <MiniHDLC::MiniHDLC(void (*)(unsigned char), void (*)(unsigned char const*, int), bool, bool)>
    9274:	e1a00004 	mov	r0, r4
    9278:	e59f3020 	ldr	r3, [pc, #32]	; 92a0 <CommandHandler::CommandHandler()+0x54>
    927c:	e5845004 	str	r5, [r4, #4]
    9280:	e5835004 	str	r5, [r3, #4]
    9284:	e5835008 	str	r5, [r3, #8]
    9288:	e5834000 	str	r4, [r3]
    928c:	e5845000 	str	r5, [r4]
    9290:	e28dd00c 	add	sp, sp, #12
    9294:	e8bd8030 	pop	{r4, r5, pc}
    9298:	000091fc 	.word	0x000091fc
    929c:	000091b8 	.word	0x000091b8
    92a0:	0001531c 	.word	0x0001531c

000092a4 <CommandHandler::~CommandHandler()>:
    92a4:	e12fff1e 	bx	lr

000092a8 <CommandHandler::handleBuffer(unsigned char const*, int)>:
    92a8:	e2800008 	add	r0, r0, #8
    92ac:	ea00009a 	b	951c <MiniHDLC::handleBuffer(unsigned char const*, int)>

000092b0 <CommandHandler::hdlcPutCh(unsigned char)>:
    92b0:	e59f3028 	ldr	r3, [pc, #40]	; 92e0 <CommandHandler::hdlcPutCh(unsigned char)+0x30>
    92b4:	e5933004 	ldr	r3, [r3, #4]
    92b8:	e3530000 	cmp	r3, #0
    92bc:	012fff1e 	bxeq	lr
    92c0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    92c4:	e24dd00c 	sub	sp, sp, #12
    92c8:	e28d0008 	add	r0, sp, #8
    92cc:	e5601004 	strb	r1, [r0, #-4]!
    92d0:	e3a01001 	mov	r1, #1
    92d4:	e12fff33 	blx	r3
    92d8:	e28dd00c 	add	sp, sp, #12
    92dc:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    92e0:	0001531c 	.word	0x0001531c

000092e4 <CommandHandler::hdlcFrameRx(unsigned char const*, int)>:
    92e4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    92e8:	e890000a 	ldm	r0, {r1, r3}
    92ec:	e24dd00c 	sub	sp, sp, #12
    92f0:	e0823003 	add	r3, r2, r3
    92f4:	e2811001 	add	r1, r1, #1
    92f8:	e880000a 	stm	r0, {r1, r3}
    92fc:	e59f2014 	ldr	r2, [pc, #20]	; 9318 <CommandHandler::hdlcFrameRx(unsigned char const*, int)+0x34>
    9300:	e58d1000 	str	r1, [sp]
    9304:	e59f0010 	ldr	r0, [pc, #16]	; 931c <CommandHandler::hdlcFrameRx(unsigned char const*, int)+0x38>
    9308:	e3a01003 	mov	r1, #3
    930c:	ebffff8e 	bl	914c <LogWrite(char const*, unsigned int, char const*, ...)>
    9310:	e28dd00c 	add	sp, sp, #12
    9314:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    9318:	00013170 	.word	0x00013170
    931c:	00013160 	.word	0x00013160

00009320 <CommandHandler::service()>:
    9320:	e12fff1e 	bx	lr

00009324 <MiniHDLC::handleChar(unsigned char) [clone .part.0]>:
    9324:	e92d4010 	push	{r4, lr}
    9328:	e5903004 	ldr	r3, [r0, #4]
    932c:	e1a04000 	mov	r4, r0
    9330:	e3530001 	cmp	r3, #1
    9334:	da00000d 	ble	9370 <MiniHDLC::handleChar(unsigned char) [clone .part.0]+0x4c>
    9338:	e5d02001 	ldrb	r2, [r0, #1]
    933c:	e2431002 	sub	r1, r3, #2
    9340:	e0803003 	add	r3, r0, r3
    9344:	e0800001 	add	r0, r0, r1
    9348:	e3520000 	cmp	r2, #0
    934c:	e5d33017 	ldrb	r3, [r3, #23]
    9350:	e5d02018 	ldrb	r2, [r0, #24]
    9354:	01823403 	orreq	r3, r2, r3, lsl #8
    9358:	11833402 	orrne	r3, r3, r2, lsl #8
    935c:	e6bf3073 	sxth	r3, r3
    9360:	e1d420b8 	ldrh	r2, [r4, #8]
    9364:	e6ff3073 	uxth	r3, r3
    9368:	e1520003 	cmp	r2, r3
    936c:	0a000005 	beq	9388 <MiniHDLC::handleChar(unsigned char) [clone .part.0]+0x64>
    9370:	e3a03000 	mov	r3, #0
    9374:	e3e02000 	mvn	r2, #0
    9378:	e5c4300a 	strb	r3, [r4, #10]
    937c:	e5843004 	str	r3, [r4, #4]
    9380:	e1c420b8 	strh	r2, [r4, #8]
    9384:	e8bd8010 	pop	{r4, pc}
    9388:	e3a02000 	mov	r2, #0
    938c:	e59f3018 	ldr	r3, [pc, #24]	; 93ac <MiniHDLC::handleChar(unsigned char) [clone .part.0]+0x88>
    9390:	e5c02018 	strb	r2, [r0, #24]
    9394:	e5933000 	ldr	r3, [r3]
    9398:	e1530002 	cmp	r3, r2
    939c:	0afffff3 	beq	9370 <MiniHDLC::handleChar(unsigned char) [clone .part.0]+0x4c>
    93a0:	e2840018 	add	r0, r4, #24
    93a4:	e12fff33 	blx	r3
    93a8:	eafffff0 	b	9370 <MiniHDLC::handleChar(unsigned char) [clone .part.0]+0x4c>
    93ac:	00015328 	.word	0x00015328

000093b0 <MiniHDLC::MiniHDLC(void (*)(unsigned char), void (*)(unsigned char const*, int), bool, bool)>:
    93b0:	e92d4030 	push	{r4, r5, lr}
    93b4:	e3a0e000 	mov	lr, #0
    93b8:	e3e05000 	mvn	r5, #0
    93bc:	e59f4030 	ldr	r4, [pc, #48]	; 93f4 <MiniHDLC::MiniHDLC(void (*)(unsigned char), void (*)(unsigned char const*, int), bool, bool)+0x44>
    93c0:	e1c050b8 	strh	r5, [r0, #8]
    93c4:	e5842000 	str	r2, [r4]
    93c8:	e5dd200c 	ldrb	r2, [sp, #12]
    93cc:	e5841004 	str	r1, [r4, #4]
    93d0:	e580e004 	str	lr, [r0, #4]
    93d4:	e5c03001 	strb	r3, [r0, #1]
    93d8:	e5c02000 	strb	r2, [r0]
    93dc:	e5c0e00a 	strb	lr, [r0, #10]
    93e0:	e5c0e00b 	strb	lr, [r0, #11]
    93e4:	e5c0e00c 	strb	lr, [r0, #12]
    93e8:	e580e010 	str	lr, [r0, #16]
    93ec:	e580e014 	str	lr, [r0, #20]
    93f0:	e8bd8030 	pop	{r4, r5, pc}
    93f4:	00015328 	.word	0x00015328

000093f8 <MiniHDLC::handleChar(unsigned char)>:
    93f8:	e351007e 	cmp	r1, #126	; 0x7e
    93fc:	e1a03000 	mov	r3, r0
    9400:	0a00001e 	beq	9480 <MiniHDLC::handleChar(unsigned char)+0x88>
    9404:	e5d0200a 	ldrb	r2, [r0, #10]
    9408:	e3520000 	cmp	r2, #0
    940c:	1a000017 	bne	9470 <MiniHDLC::handleChar(unsigned char)+0x78>
    9410:	e351007d 	cmp	r1, #125	; 0x7d
    9414:	0a00001a 	beq	9484 <MiniHDLC::handleChar(unsigned char)+0x8c>
    9418:	e5932004 	ldr	r2, [r3, #4]
    941c:	e0830002 	add	r0, r3, r2
    9420:	e3520001 	cmp	r2, #1
    9424:	e5c01018 	strb	r1, [r0, #24]
    9428:	da000007 	ble	944c <MiniHDLC::handleChar(unsigned char)+0x54>
    942c:	e5d01016 	ldrb	r1, [r0, #22]
    9430:	e1d300b8 	ldrh	r0, [r3, #8]
    9434:	e59fc054 	ldr	ip, [pc, #84]	; 9490 <MiniHDLC::handleChar(unsigned char)+0x98>
    9438:	e0211420 	eor	r1, r1, r0, lsr #8
    943c:	e1a01081 	lsl	r1, r1, #1
    9440:	e19c10b1 	ldrh	r1, [ip, r1]
    9444:	e0211400 	eor	r1, r1, r0, lsl #8
    9448:	e1c310b8 	strh	r1, [r3, #8]
    944c:	e59f1040 	ldr	r1, [pc, #64]	; 9494 <MiniHDLC::handleChar(unsigned char)+0x9c>
    9450:	e2822001 	add	r2, r2, #1
    9454:	e1520001 	cmp	r2, r1
    9458:	03a01000 	moveq	r1, #0
    945c:	03e02000 	mvneq	r2, #0
    9460:	15832004 	strne	r2, [r3, #4]
    9464:	05831004 	streq	r1, [r3, #4]
    9468:	01c320b8 	strheq	r2, [r3, #8]
    946c:	e12fff1e 	bx	lr
    9470:	e3a02000 	mov	r2, #0
    9474:	e2211020 	eor	r1, r1, #32
    9478:	e5c0200a 	strb	r2, [r0, #10]
    947c:	eaffffe5 	b	9418 <MiniHDLC::handleChar(unsigned char)+0x20>
    9480:	eaffffa7 	b	9324 <MiniHDLC::handleChar(unsigned char) [clone .part.0]>
    9484:	e3a02001 	mov	r2, #1
    9488:	e5c0200a 	strb	r2, [r0, #10]
    948c:	e12fff1e 	bx	lr
    9490:	00013188 	.word	0x00013188
    9494:	00001388 	.word	0x00001388

00009498 <MiniHDLC::handleBit(unsigned char)>:
    9498:	e3510000 	cmp	r1, #0
    949c:	13e0107f 	mvnne	r1, #127	; 0x7f
    94a0:	e5d0300b 	ldrb	r3, [r0, #11]
    94a4:	e92d4010 	push	{r4, lr}
    94a8:	e1a030a3 	lsr	r3, r3, #1
    94ac:	11833001 	orrne	r3, r3, r1
    94b0:	e6ef3073 	uxtb	r3, r3
    94b4:	e353007e 	cmp	r3, #126	; 0x7e
    94b8:	e1a04000 	mov	r4, r0
    94bc:	e5c0300b 	strb	r3, [r0, #11]
    94c0:	0a000010 	beq	9508 <MiniHDLC::handleBit(unsigned char)+0x70>
    94c4:	e20330fc 	and	r3, r3, #252	; 0xfc
    94c8:	e353007c 	cmp	r3, #124	; 0x7c
    94cc:	08bd8010 	popeq	{r4, pc}
    94d0:	e5d0200c 	ldrb	r2, [r0, #12]
    94d4:	e5903010 	ldr	r3, [r0, #16]
    94d8:	e18110a2 	orr	r1, r1, r2, lsr #1
    94dc:	e2833001 	add	r3, r3, #1
    94e0:	e6ef1071 	uxtb	r1, r1
    94e4:	e3530008 	cmp	r3, #8
    94e8:	e5c0100c 	strb	r1, [r0, #12]
    94ec:	e5803010 	str	r3, [r0, #16]
    94f0:	18bd8010 	popne	{r4, pc}
    94f4:	ebffffbf 	bl	93f8 <MiniHDLC::handleChar(unsigned char)>
    94f8:	e3a03000 	mov	r3, #0
    94fc:	e5c4300c 	strb	r3, [r4, #12]
    9500:	e5843010 	str	r3, [r4, #16]
    9504:	e8bd8010 	pop	{r4, pc}
    9508:	ebffff85 	bl	9324 <MiniHDLC::handleChar(unsigned char) [clone .part.0]>
    950c:	e3a03000 	mov	r3, #0
    9510:	e5c4300c 	strb	r3, [r4, #12]
    9514:	e5843010 	str	r3, [r4, #16]
    9518:	e8bd8010 	pop	{r4, pc}

0000951c <MiniHDLC::handleBuffer(unsigned char const*, int)>:
    951c:	e92d4070 	push	{r4, r5, r6, lr}
    9520:	e2525000 	subs	r5, r2, #0
    9524:	d8bd8070 	pople	{r4, r5, r6, pc}
    9528:	e1a06000 	mov	r6, r0
    952c:	e2414001 	sub	r4, r1, #1
    9530:	e0845005 	add	r5, r4, r5
    9534:	e5f41001 	ldrb	r1, [r4, #1]!
    9538:	e1a00006 	mov	r0, r6
    953c:	ebffffad 	bl	93f8 <MiniHDLC::handleChar(unsigned char)>
    9540:	e1540005 	cmp	r4, r5
    9544:	1afffffa 	bne	9534 <MiniHDLC::handleBuffer(unsigned char const*, int)+0x18>
    9548:	e8bd8070 	pop	{r4, r5, r6, pc}

0000954c <MiniHDLC::crcUpdateCCITT(unsigned short, unsigned char)>:
    954c:	e59f3014 	ldr	r3, [pc, #20]	; 9568 <MiniHDLC::crcUpdateCCITT(unsigned short, unsigned char)+0x1c>
    9550:	e0222421 	eor	r2, r2, r1, lsr #8
    9554:	e1a02082 	lsl	r2, r2, #1
    9558:	e19300b2 	ldrh	r0, [r3, r2]
    955c:	e0200401 	eor	r0, r0, r1, lsl #8
    9560:	e6ff0070 	uxth	r0, r0
    9564:	e12fff1e 	bx	lr
    9568:	00013188 	.word	0x00013188

0000956c <MiniHDLC::sendChar(unsigned char)>:
    956c:	e92d4070 	push	{r4, r5, r6, lr}
    9570:	e5d03000 	ldrb	r3, [r0]
    9574:	e59f6048 	ldr	r6, [pc, #72]	; 95c4 <MiniHDLC::sendChar(unsigned char)+0x58>
    9578:	e3530000 	cmp	r3, #0
    957c:	e1a04001 	mov	r4, r1
    9580:	e5963004 	ldr	r3, [r6, #4]
    9584:	0a000009 	beq	95b0 <MiniHDLC::sendChar(unsigned char)+0x44>
    9588:	e3a05008 	mov	r5, #8
    958c:	e3530000 	cmp	r3, #0
    9590:	e2040001 	and	r0, r4, #1
    9594:	0a000000 	beq	959c <MiniHDLC::sendChar(unsigned char)+0x30>
    9598:	e12fff33 	blx	r3
    959c:	e2555001 	subs	r5, r5, #1
    95a0:	e1a040a4 	lsr	r4, r4, #1
    95a4:	08bd8070 	popeq	{r4, r5, r6, pc}
    95a8:	e5963004 	ldr	r3, [r6, #4]
    95ac:	eafffff6 	b	958c <MiniHDLC::sendChar(unsigned char)+0x20>
    95b0:	e3530000 	cmp	r3, #0
    95b4:	08bd8070 	popeq	{r4, r5, r6, pc}
    95b8:	e1a00001 	mov	r0, r1
    95bc:	e8bd4070 	pop	{r4, r5, r6, lr}
    95c0:	e12fff13 	bx	r3
    95c4:	00015328 	.word	0x00015328

000095c8 <MiniHDLC::sendCharWithStuffing(unsigned char)>:
    95c8:	e5d03000 	ldrb	r3, [r0]
    95cc:	e3530000 	cmp	r3, #0
    95d0:	0a00001f 	beq	9654 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x8c>
    95d4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    95d8:	e1a09000 	mov	r9, r0
    95dc:	e1a04001 	mov	r4, r1
    95e0:	e3a05008 	mov	r5, #8
    95e4:	e3a08000 	mov	r8, #0
    95e8:	e59f7068 	ldr	r7, [pc, #104]	; 9658 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x90>
    95ec:	ea000007 	b	9610 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x48>
    95f0:	e5993014 	ldr	r3, [r9, #20]
    95f4:	e2833001 	add	r3, r3, #1
    95f8:	e3530005 	cmp	r3, #5
    95fc:	e5893014 	str	r3, [r9, #20]
    9600:	0a00000c 	beq	9638 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x70>
    9604:	e2555001 	subs	r5, r5, #1
    9608:	e1a040a4 	lsr	r4, r4, #1
    960c:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    9610:	e5973004 	ldr	r3, [r7, #4]
    9614:	e2046001 	and	r6, r4, #1
    9618:	e3530000 	cmp	r3, #0
    961c:	0a000001 	beq	9628 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x60>
    9620:	e1a00006 	mov	r0, r6
    9624:	e12fff33 	blx	r3
    9628:	e3560000 	cmp	r6, #0
    962c:	1affffef 	bne	95f0 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x28>
    9630:	e5898014 	str	r8, [r9, #20]
    9634:	eafffff2 	b	9604 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x3c>
    9638:	e5973004 	ldr	r3, [r7, #4]
    963c:	e3530000 	cmp	r3, #0
    9640:	0afffffa 	beq	9630 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x68>
    9644:	e3a00000 	mov	r0, #0
    9648:	e12fff33 	blx	r3
    964c:	e5898014 	str	r8, [r9, #20]
    9650:	eaffffeb 	b	9604 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x3c>
    9654:	eaffffc4 	b	956c <MiniHDLC::sendChar(unsigned char)>
    9658:	00015328 	.word	0x00015328

0000965c <MiniHDLC::sendEscaped(unsigned char)>:
    965c:	e241307d 	sub	r3, r1, #125	; 0x7d
    9660:	e3530001 	cmp	r3, #1
    9664:	e92d4070 	push	{r4, r5, r6, lr}
    9668:	e1a04001 	mov	r4, r1
    966c:	e1a05000 	mov	r5, r0
    9670:	9a000003 	bls	9684 <MiniHDLC::sendEscaped(unsigned char)+0x28>
    9674:	e1a01004 	mov	r1, r4
    9678:	e1a00005 	mov	r0, r5
    967c:	e8bd4070 	pop	{r4, r5, r6, lr}
    9680:	eaffffd0 	b	95c8 <MiniHDLC::sendCharWithStuffing(unsigned char)>
    9684:	e3a0107d 	mov	r1, #125	; 0x7d
    9688:	e2244020 	eor	r4, r4, #32
    968c:	ebffffcd 	bl	95c8 <MiniHDLC::sendCharWithStuffing(unsigned char)>
    9690:	e1a01004 	mov	r1, r4
    9694:	e1a00005 	mov	r0, r5
    9698:	e8bd4070 	pop	{r4, r5, r6, lr}
    969c:	eaffffc9 	b	95c8 <MiniHDLC::sendCharWithStuffing(unsigned char)>

000096a0 <MiniHDLC::sendFrame(unsigned char const*, int)>:
    96a0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    96a4:	e1a06002 	mov	r6, r2
    96a8:	e1a08001 	mov	r8, r1
    96ac:	e3a0107e 	mov	r1, #126	; 0x7e
    96b0:	e1a05000 	mov	r5, r0
    96b4:	ebffffac 	bl	956c <MiniHDLC::sendChar(unsigned char)>
    96b8:	e3560000 	cmp	r6, #0
    96bc:	0a00001d 	beq	9738 <MiniHDLC::sendFrame(unsigned char const*, int)+0x98>
    96c0:	e59fc07c 	ldr	ip, [pc, #124]	; 9744 <MiniHDLC::sendFrame(unsigned char const*, int)+0xa4>
    96c4:	e59f707c 	ldr	r7, [pc, #124]	; 9748 <MiniHDLC::sendFrame(unsigned char const*, int)+0xa8>
    96c8:	e0886006 	add	r6, r8, r6
    96cc:	e4d81001 	ldrb	r1, [r8], #1
    96d0:	e1a00005 	mov	r0, r5
    96d4:	e021342c 	eor	r3, r1, ip, lsr #8
    96d8:	e1a03083 	lsl	r3, r3, #1
    96dc:	e19740b3 	ldrh	r4, [r7, r3]
    96e0:	e024440c 	eor	r4, r4, ip, lsl #8
    96e4:	e6bf4074 	sxth	r4, r4
    96e8:	ebffffdb 	bl	965c <MiniHDLC::sendEscaped(unsigned char)>
    96ec:	e1580006 	cmp	r8, r6
    96f0:	e6ffc074 	uxth	ip, r4
    96f4:	1afffff4 	bne	96cc <MiniHDLC::sendFrame(unsigned char const*, int)+0x2c>
    96f8:	e6ef1074 	uxtb	r1, r4
    96fc:	e1a0c42c 	lsr	ip, ip, #8
    9700:	e5d53001 	ldrb	r3, [r5, #1]
    9704:	e1a00005 	mov	r0, r5
    9708:	e3530000 	cmp	r3, #0
    970c:	11a06001 	movne	r6, r1
    9710:	01a0600c 	moveq	r6, ip
    9714:	11a0100c 	movne	r1, ip
    9718:	ebffffcf 	bl	965c <MiniHDLC::sendEscaped(unsigned char)>
    971c:	e1a01006 	mov	r1, r6
    9720:	e1a00005 	mov	r0, r5
    9724:	ebffffcc 	bl	965c <MiniHDLC::sendEscaped(unsigned char)>
    9728:	e1a00005 	mov	r0, r5
    972c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9730:	e3a0107e 	mov	r1, #126	; 0x7e
    9734:	eaffff8c 	b	956c <MiniHDLC::sendChar(unsigned char)>
    9738:	e3a0c0ff 	mov	ip, #255	; 0xff
    973c:	e1a0100c 	mov	r1, ip
    9740:	eaffffee 	b	9700 <MiniHDLC::sendFrame(unsigned char const*, int)+0x60>
    9744:	0000ffff 	.word	0x0000ffff
    9748:	00013188 	.word	0x00013188

0000974c <__udivsi3>:
    974c:	e2512001 	subs	r2, r1, #1
    9750:	012fff1e 	bxeq	lr
    9754:	3a000036 	bcc	9834 <__udivsi3+0xe8>
    9758:	e1500001 	cmp	r0, r1
    975c:	9a000022 	bls	97ec <__udivsi3+0xa0>
    9760:	e1110002 	tst	r1, r2
    9764:	0a000023 	beq	97f8 <__udivsi3+0xac>
    9768:	e311020e 	tst	r1, #-536870912	; 0xe0000000
    976c:	01a01181 	lsleq	r1, r1, #3
    9770:	03a03008 	moveq	r3, #8
    9774:	13a03001 	movne	r3, #1
    9778:	e3510201 	cmp	r1, #268435456	; 0x10000000
    977c:	31510000 	cmpcc	r1, r0
    9780:	31a01201 	lslcc	r1, r1, #4
    9784:	31a03203 	lslcc	r3, r3, #4
    9788:	3afffffa 	bcc	9778 <__udivsi3+0x2c>
    978c:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    9790:	31510000 	cmpcc	r1, r0
    9794:	31a01081 	lslcc	r1, r1, #1
    9798:	31a03083 	lslcc	r3, r3, #1
    979c:	3afffffa 	bcc	978c <__udivsi3+0x40>
    97a0:	e3a02000 	mov	r2, #0
    97a4:	e1500001 	cmp	r0, r1
    97a8:	20400001 	subcs	r0, r0, r1
    97ac:	21822003 	orrcs	r2, r2, r3
    97b0:	e15000a1 	cmp	r0, r1, lsr #1
    97b4:	204000a1 	subcs	r0, r0, r1, lsr #1
    97b8:	218220a3 	orrcs	r2, r2, r3, lsr #1
    97bc:	e1500121 	cmp	r0, r1, lsr #2
    97c0:	20400121 	subcs	r0, r0, r1, lsr #2
    97c4:	21822123 	orrcs	r2, r2, r3, lsr #2
    97c8:	e15001a1 	cmp	r0, r1, lsr #3
    97cc:	204001a1 	subcs	r0, r0, r1, lsr #3
    97d0:	218221a3 	orrcs	r2, r2, r3, lsr #3
    97d4:	e3500000 	cmp	r0, #0
    97d8:	11b03223 	lsrsne	r3, r3, #4
    97dc:	11a01221 	lsrne	r1, r1, #4
    97e0:	1affffef 	bne	97a4 <__udivsi3+0x58>
    97e4:	e1a00002 	mov	r0, r2
    97e8:	e12fff1e 	bx	lr
    97ec:	03a00001 	moveq	r0, #1
    97f0:	13a00000 	movne	r0, #0
    97f4:	e12fff1e 	bx	lr
    97f8:	e3510801 	cmp	r1, #65536	; 0x10000
    97fc:	21a01821 	lsrcs	r1, r1, #16
    9800:	23a02010 	movcs	r2, #16
    9804:	33a02000 	movcc	r2, #0
    9808:	e3510c01 	cmp	r1, #256	; 0x100
    980c:	21a01421 	lsrcs	r1, r1, #8
    9810:	22822008 	addcs	r2, r2, #8
    9814:	e3510010 	cmp	r1, #16
    9818:	21a01221 	lsrcs	r1, r1, #4
    981c:	22822004 	addcs	r2, r2, #4
    9820:	e3510004 	cmp	r1, #4
    9824:	82822003 	addhi	r2, r2, #3
    9828:	908220a1 	addls	r2, r2, r1, lsr #1
    982c:	e1a00230 	lsr	r0, r0, r2
    9830:	e12fff1e 	bx	lr
    9834:	e3500000 	cmp	r0, #0
    9838:	13e00000 	mvnne	r0, #0
    983c:	ea000007 	b	9860 <__aeabi_idiv0>

00009840 <__aeabi_uidivmod>:
    9840:	e3510000 	cmp	r1, #0
    9844:	0afffffa 	beq	9834 <__udivsi3+0xe8>
    9848:	e92d4003 	push	{r0, r1, lr}
    984c:	ebffffbe 	bl	974c <__udivsi3>
    9850:	e8bd4006 	pop	{r1, r2, lr}
    9854:	e0030092 	mul	r3, r2, r0
    9858:	e0411003 	sub	r1, r1, r3
    985c:	e12fff1e 	bx	lr

00009860 <__aeabi_idiv0>:
    9860:	e12fff1e 	bx	lr

00009864 <CActLED::~CActLED()>:
    9864:	e3a02000 	mov	r2, #0
    9868:	e59f3004 	ldr	r3, [pc, #4]	; 9874 <CActLED::~CActLED()+0x10>
    986c:	e5832000 	str	r2, [r3]
    9870:	e12fff1e 	bx	lr
    9874:	00015330 	.word	0x00015330

00009878 <CActLED::On()>:
    9878:	e5903000 	ldr	r3, [r0]
    987c:	e3530000 	cmp	r3, #0
    9880:	0a000002 	beq	9890 <CActLED::On()+0x18>
    9884:	e5d01008 	ldrb	r1, [r0, #8]
    9888:	e1a00003 	mov	r0, r3
    988c:	ea00038f 	b	a6d0 <CGPIOPin::Write(unsigned int)>
    9890:	e5903004 	ldr	r3, [r0, #4]
    9894:	e3530000 	cmp	r3, #0
    9898:	012fff1e 	bxeq	lr
    989c:	e5d01008 	ldrb	r1, [r0, #8]
    98a0:	e1a00003 	mov	r0, r3
    98a4:	ea001e16 	b	11104 <CVirtualGPIOPin::Write(unsigned int)>

000098a8 <CActLED::Off()>:
    98a8:	e5903000 	ldr	r3, [r0]
    98ac:	e3530000 	cmp	r3, #0
    98b0:	0a000003 	beq	98c4 <CActLED::Off()+0x1c>
    98b4:	e5d01008 	ldrb	r1, [r0, #8]
    98b8:	e1a00003 	mov	r0, r3
    98bc:	e2211001 	eor	r1, r1, #1
    98c0:	ea000382 	b	a6d0 <CGPIOPin::Write(unsigned int)>
    98c4:	e5903004 	ldr	r3, [r0, #4]
    98c8:	e3530000 	cmp	r3, #0
    98cc:	012fff1e 	bxeq	lr
    98d0:	e5d01008 	ldrb	r1, [r0, #8]
    98d4:	e1a00003 	mov	r0, r3
    98d8:	e2211001 	eor	r1, r1, #1
    98dc:	ea001e08 	b	11104 <CVirtualGPIOPin::Write(unsigned int)>

000098e0 <CActLED::CActLED()>:
    98e0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    98e4:	e3a05000 	mov	r5, #0
    98e8:	e1a04000 	mov	r4, r0
    98ec:	e24dd024 	sub	sp, sp, #36	; 0x24
    98f0:	e59f314c 	ldr	r3, [pc, #332]	; 9a44 <CActLED::CActLED()+0x164>
    98f4:	e5805000 	str	r5, [r0]
    98f8:	e5805004 	str	r5, [r0, #4]
    98fc:	e28d000c 	add	r0, sp, #12
    9900:	e5834000 	str	r4, [r3]
    9904:	eb00008b 	bl	9b38 <CBcmPropertyTags::CBcmPropertyTags()>
    9908:	e3a03010 	mov	r3, #16
    990c:	e58d5000 	str	r5, [sp]
    9910:	e28d000c 	add	r0, sp, #12
    9914:	e08d2003 	add	r2, sp, r3
    9918:	e59f1128 	ldr	r1, [pc, #296]	; 9a48 <CActLED::CActLED()+0x168>
    991c:	eb0000dc 	bl	9c94 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    9920:	e2506000 	subs	r6, r0, #0
    9924:	0a00001f 	beq	99a8 <CActLED::CActLED()+0xc8>
    9928:	e59d301c 	ldr	r3, [sp, #28]
    992c:	e3130502 	tst	r3, #8388608	; 0x800000
    9930:	0a000021 	beq	99bc <CActLED::CActLED()+0xdc>
    9934:	e1a03223 	lsr	r3, r3, #4
    9938:	e6ef3073 	uxtb	r3, r3
    993c:	e243200d 	sub	r2, r3, #13
    9940:	e3530008 	cmp	r3, #8
    9944:	13520001 	cmpne	r2, #1
    9948:	93a01001 	movls	r1, #1
    994c:	83a01000 	movhi	r1, #0
    9950:	e353000c 	cmp	r3, #12
    9954:	13530009 	cmpne	r3, #9
    9958:	03a06001 	moveq	r6, #1
    995c:	13a06000 	movne	r6, #0
    9960:	e3530001 	cmp	r3, #1
    9964:	9a000017 	bls	99c8 <CActLED::CActLED()+0xe8>
    9968:	e3510000 	cmp	r1, #0
    996c:	0a00002a 	beq	9a1c <CActLED::CActLED()+0x13c>
    9970:	e3520001 	cmp	r2, #1
    9974:	8a000020 	bhi	99fc <CActLED::CActLED()+0x11c>
    9978:	e3a00028 	mov	r0, #40	; 0x28
    997c:	eb002044 	bl	11a94 <operator new(unsigned int)>
    9980:	e3a02001 	mov	r2, #1
    9984:	e1a07000 	mov	r7, r0
    9988:	e1a03005 	mov	r3, r5
    998c:	e3a0101d 	mov	r1, #29
    9990:	e0266002 	eor	r6, r6, r2
    9994:	eb0005ef 	bl	b158 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    9998:	e5847000 	str	r7, [r4]
    999c:	e5c46008 	strb	r6, [r4, #8]
    99a0:	e1a00004 	mov	r0, r4
    99a4:	ebffffbf 	bl	98a8 <CActLED::Off()>
    99a8:	e28d000c 	add	r0, sp, #12
    99ac:	eb000067 	bl	9b50 <CBcmPropertyTags::~CBcmPropertyTags()>
    99b0:	e1a00004 	mov	r0, r4
    99b4:	e28dd024 	add	sp, sp, #36	; 0x24
    99b8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    99bc:	e6ff3073 	uxth	r3, r3
    99c0:	e353000f 	cmp	r3, #15
    99c4:	8a000015 	bhi	9a20 <CActLED::CActLED()+0x140>
    99c8:	e3a00028 	mov	r0, #40	; 0x28
    99cc:	eb002030 	bl	11a94 <operator new(unsigned int)>
    99d0:	e3a03000 	mov	r3, #0
    99d4:	e3a02001 	mov	r2, #1
    99d8:	e3a01010 	mov	r1, #16
    99dc:	e1a05000 	mov	r5, r0
    99e0:	eb0005dc 	bl	b158 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    99e4:	e3a03000 	mov	r3, #0
    99e8:	e5845000 	str	r5, [r4]
    99ec:	e5c43008 	strb	r3, [r4, #8]
    99f0:	e1a00004 	mov	r0, r4
    99f4:	ebffffab 	bl	98a8 <CActLED::Off()>
    99f8:	eaffffea 	b	99a8 <CActLED::CActLED()+0xc8>
    99fc:	e3a00010 	mov	r0, #16
    9a00:	eb002023 	bl	11a94 <operator new(unsigned int)>
    9a04:	e1a07000 	mov	r7, r0
    9a08:	e1a01005 	mov	r1, r5
    9a0c:	eb001d6b 	bl	10fc0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)>
    9a10:	e2266001 	eor	r6, r6, #1
    9a14:	e5847004 	str	r7, [r4, #4]
    9a18:	eaffffdf 	b	999c <CActLED::CActLED()+0xbc>
    9a1c:	e2266001 	eor	r6, r6, #1
    9a20:	e3a00028 	mov	r0, #40	; 0x28
    9a24:	eb00201a 	bl	11a94 <operator new(unsigned int)>
    9a28:	e1a05000 	mov	r5, r0
    9a2c:	e3a03000 	mov	r3, #0
    9a30:	e3a02001 	mov	r2, #1
    9a34:	e3a0102f 	mov	r1, #47	; 0x2f
    9a38:	eb0005c6 	bl	b158 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    9a3c:	e5845000 	str	r5, [r4]
    9a40:	eaffffd5 	b	999c <CActLED::CActLED()+0xbc>
    9a44:	00015330 	.word	0x00015330
    9a48:	00010002 	.word	0x00010002

00009a4c <CActLED::Blink(unsigned int, unsigned int, unsigned int)>:
    9a4c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9a50:	e2516000 	subs	r6, r1, #0
    9a54:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    9a58:	e1a08003 	mov	r8, r3
    9a5c:	e1a07002 	mov	r7, r2
    9a60:	e1a05000 	mov	r5, r0
    9a64:	e3a04001 	mov	r4, #1
    9a68:	e1a00005 	mov	r0, r5
    9a6c:	ebffff81 	bl	9878 <CActLED::On()>
    9a70:	e1a00007 	mov	r0, r7
    9a74:	eb001b50 	bl	107bc <CTimer::SimpleMsDelay(unsigned int)>
    9a78:	e1a00005 	mov	r0, r5
    9a7c:	ebffff89 	bl	98a8 <CActLED::Off()>
    9a80:	e2844001 	add	r4, r4, #1
    9a84:	e1a00008 	mov	r0, r8
    9a88:	eb001b4b 	bl	107bc <CTimer::SimpleMsDelay(unsigned int)>
    9a8c:	e1560004 	cmp	r6, r4
    9a90:	2afffff4 	bcs	9a68 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x1c>
    9a94:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00009a98 <CActLED::Get()>:
    9a98:	e59f3004 	ldr	r3, [pc, #4]	; 9aa4 <CActLED::Get()+0xc>
    9a9c:	e5930000 	ldr	r0, [r3]
    9aa0:	e12fff1e 	bx	lr
    9aa4:	00015330 	.word	0x00015330

00009aa8 <assertion_failed>:
    9aa8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    9aac:	e1a05000 	mov	r5, r0
    9ab0:	e24dd01c 	sub	sp, sp, #28
    9ab4:	e1a06001 	mov	r6, r1
    9ab8:	e1a07002 	mov	r7, r2
    9abc:	e1a0400d 	mov	r4, sp
    9ac0:	eb00072a 	bl	b770 <CInterruptSystem::DisableFIQ()>
    9ac4:	f1080040 	cpsie	f
    9ac8:	e28d0008 	add	r0, sp, #8
    9acc:	eb0013dc 	bl	ea44 <CString::CString()>
    9ad0:	e1a03007 	mov	r3, r7
    9ad4:	e1a02006 	mov	r2, r6
    9ad8:	e28d0008 	add	r0, sp, #8
    9adc:	e59f104c 	ldr	r1, [pc, #76]	; 9b30 <assertion_failed+0x88>
    9ae0:	eb0017c5 	bl	f9fc <CString::Format(char const*, ...)>
    9ae4:	e28d0008 	add	r0, sp, #8
    9ae8:	eb0013eb 	bl	ea9c <CString::operator char const*() const>
    9aec:	e1a01000 	mov	r1, r0
    9af0:	e1a00004 	mov	r0, r4
    9af4:	eb0000f4 	bl	9ecc <debug_stacktrace(unsigned int const*, char const*)>
    9af8:	eb000913 	bl	bf4c <CLogger::Get()>
    9afc:	e1a04000 	mov	r4, r0
    9b00:	e28d0008 	add	r0, sp, #8
    9b04:	eb0013e4 	bl	ea9c <CString::operator char const*() const>
    9b08:	e59f3024 	ldr	r3, [pc, #36]	; 9b34 <assertion_failed+0x8c>
    9b0c:	e1a01000 	mov	r1, r0
    9b10:	e3a02000 	mov	r2, #0
    9b14:	e1a00004 	mov	r0, r4
    9b18:	e58d5000 	str	r5, [sp]
    9b1c:	eb000ab3 	bl	c5f0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    9b20:	e28d0008 	add	r0, sp, #8
    9b24:	eb001393 	bl	e978 <CString::~CString()>
    9b28:	e28dd01c 	add	sp, sp, #28
    9b2c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    9b30:	00013388 	.word	0x00013388
    9b34:	00013390 	.word	0x00013390

00009b38 <CBcmPropertyTags::CBcmPropertyTags()>:
    9b38:	e92d4010 	push	{r4, lr}
    9b3c:	e1a04000 	mov	r4, r0
    9b40:	e3a01008 	mov	r1, #8
    9b44:	eb00227e 	bl	12544 <CBcmMailBox::CBcmMailBox(unsigned int)>
    9b48:	e1a00004 	mov	r0, r4
    9b4c:	e8bd8010 	pop	{r4, pc}

00009b50 <CBcmPropertyTags::~CBcmPropertyTags()>:
    9b50:	e92d4010 	push	{r4, lr}
    9b54:	e1a04000 	mov	r4, r0
    9b58:	eb00227b 	bl	1254c <CBcmMailBox::~CBcmMailBox()>
    9b5c:	e1a00004 	mov	r0, r4
    9b60:	e8bd8010 	pop	{r4, pc}

00009b64 <CBcmPropertyTags::GetTags(void*, unsigned int)>:
    9b64:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    9b68:	e2519000 	subs	r9, r1, #0
    9b6c:	e1a0a000 	mov	sl, r0
    9b70:	e1a07002 	mov	r7, r2
    9b74:	0a00003d 	beq	9c70 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x10c>
    9b78:	e357000f 	cmp	r7, #15
    9b7c:	9a000036 	bls	9c5c <CBcmPropertyTags::GetTags(void*, unsigned int)+0xf8>
    9b80:	e287600c 	add	r6, r7, #12
    9b84:	e3160003 	tst	r6, #3
    9b88:	1a00002e 	bne	9c48 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xe4>
    9b8c:	e3a00000 	mov	r0, #0
    9b90:	eb001f2e 	bl	11850 <CMemorySystem::GetCoherentPage(unsigned int)>
    9b94:	e3a05000 	mov	r5, #0
    9b98:	e1a04000 	mov	r4, r0
    9b9c:	e1a01426 	lsr	r1, r6, #8
    9ba0:	e1a02826 	lsr	r2, r6, #16
    9ba4:	e1a03c26 	lsr	r3, r6, #24
    9ba8:	e2808008 	add	r8, r0, #8
    9bac:	e5c06000 	strb	r6, [r0]
    9bb0:	e5c01001 	strb	r1, [r0, #1]
    9bb4:	e5c02002 	strb	r2, [r0, #2]
    9bb8:	e5c03003 	strb	r3, [r0, #3]
    9bbc:	e1a02007 	mov	r2, r7
    9bc0:	e1a00008 	mov	r0, r8
    9bc4:	e5c45004 	strb	r5, [r4, #4]
    9bc8:	e5c45005 	strb	r5, [r4, #5]
    9bcc:	e5c45006 	strb	r5, [r4, #6]
    9bd0:	e5c45007 	strb	r5, [r4, #7]
    9bd4:	e1a01009 	mov	r1, r9
    9bd8:	eb001cb1 	bl	10ea4 <memcpy>
    9bdc:	e7885007 	str	r5, [r8, r7]
    9be0:	ee075f9a 	mcr	15, 0, r5, cr7, cr10, {4}
    9be4:	e3c46103 	bic	r6, r4, #-1073741824	; 0xc0000000
    9be8:	e3866101 	orr	r6, r6, #1073741824	; 0x40000000
    9bec:	e1a0000a 	mov	r0, sl
    9bf0:	e1a01006 	mov	r1, r6
    9bf4:	eb002284 	bl	1260c <CBcmMailBox::WriteRead(unsigned int)>
    9bf8:	e1560000 	cmp	r6, r0
    9bfc:	0a000001 	beq	9c08 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xa4>
    9c00:	e3a00000 	mov	r0, #0
    9c04:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    9c08:	ee075fba 	mcr	15, 0, r5, cr7, cr10, {5}
    9c0c:	e5d42005 	ldrb	r2, [r4, #5]
    9c10:	e5d43004 	ldrb	r3, [r4, #4]
    9c14:	e5d41006 	ldrb	r1, [r4, #6]
    9c18:	e1833402 	orr	r3, r3, r2, lsl #8
    9c1c:	e5d42007 	ldrb	r2, [r4, #7]
    9c20:	e1833801 	orr	r3, r3, r1, lsl #16
    9c24:	e1833c02 	orr	r3, r3, r2, lsl #24
    9c28:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
    9c2c:	1afffff3 	bne	9c00 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x9c>
    9c30:	e1a02007 	mov	r2, r7
    9c34:	e1a01008 	mov	r1, r8
    9c38:	e1a00009 	mov	r0, r9
    9c3c:	eb001c98 	bl	10ea4 <memcpy>
    9c40:	e3a00001 	mov	r0, #1
    9c44:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    9c48:	e3a02053 	mov	r2, #83	; 0x53
    9c4c:	e59f1030 	ldr	r1, [pc, #48]	; 9c84 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x120>
    9c50:	e59f0030 	ldr	r0, [pc, #48]	; 9c88 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x124>
    9c54:	ebffff93 	bl	9aa8 <assertion_failed>
    9c58:	eaffffcb 	b	9b8c <CBcmPropertyTags::GetTags(void*, unsigned int)+0x28>
    9c5c:	e3a02051 	mov	r2, #81	; 0x51
    9c60:	e59f101c 	ldr	r1, [pc, #28]	; 9c84 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x120>
    9c64:	e59f0020 	ldr	r0, [pc, #32]	; 9c8c <CBcmPropertyTags::GetTags(void*, unsigned int)+0x128>
    9c68:	ebffff8e 	bl	9aa8 <assertion_failed>
    9c6c:	eaffffc3 	b	9b80 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x1c>
    9c70:	e3a02050 	mov	r2, #80	; 0x50
    9c74:	e59f1008 	ldr	r1, [pc, #8]	; 9c84 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x120>
    9c78:	e59f0010 	ldr	r0, [pc, #16]	; 9c90 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x12c>
    9c7c:	ebffff89 	bl	9aa8 <assertion_failed>
    9c80:	eaffffbc 	b	9b78 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x14>
    9c84:	000133a8 	.word	0x000133a8
    9c88:	000133f4 	.word	0x000133f4
    9c8c:	000133c8 	.word	0x000133c8
    9c90:	000133bc 	.word	0x000133bc

00009c94 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>:
    9c94:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9c98:	e2524000 	subs	r4, r2, #0
    9c9c:	e1a08000 	mov	r8, r0
    9ca0:	e1a06001 	mov	r6, r1
    9ca4:	e1a07003 	mov	r7, r3
    9ca8:	e59d5018 	ldr	r5, [sp, #24]
    9cac:	0a000038 	beq	9d94 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x100>
    9cb0:	e357000f 	cmp	r7, #15
    9cb4:	9a000031 	bls	9d80 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xec>
    9cb8:	e3c52102 	bic	r2, r5, #-2147483648	; 0x80000000
    9cbc:	e247100c 	sub	r1, r7, #12
    9cc0:	e1a03422 	lsr	r3, r2, #8
    9cc4:	e1a0c822 	lsr	ip, r2, #16
    9cc8:	e5c43009 	strb	r3, [r4, #9]
    9ccc:	e1a03421 	lsr	r3, r1, #8
    9cd0:	e1a0e821 	lsr	lr, r1, #16
    9cd4:	e5c42008 	strb	r2, [r4, #8]
    9cd8:	e5c46000 	strb	r6, [r4]
    9cdc:	e1a02c22 	lsr	r2, r2, #24
    9ce0:	e5c4c00a 	strb	ip, [r4, #10]
    9ce4:	e5c41004 	strb	r1, [r4, #4]
    9ce8:	e1a0cc21 	lsr	ip, r1, #24
    9cec:	e5c43005 	strb	r3, [r4, #5]
    9cf0:	e1a01426 	lsr	r1, r6, #8
    9cf4:	e1a03826 	lsr	r3, r6, #16
    9cf8:	e1a06c26 	lsr	r6, r6, #24
    9cfc:	e5c4200b 	strb	r2, [r4, #11]
    9d00:	e5c41001 	strb	r1, [r4, #1]
    9d04:	e1a00008 	mov	r0, r8
    9d08:	e1a02007 	mov	r2, r7
    9d0c:	e5c4e006 	strb	lr, [r4, #6]
    9d10:	e5c4c007 	strb	ip, [r4, #7]
    9d14:	e5c43002 	strb	r3, [r4, #2]
    9d18:	e5c46003 	strb	r6, [r4, #3]
    9d1c:	e1a01004 	mov	r1, r4
    9d20:	ebffff8f 	bl	9b64 <CBcmPropertyTags::GetTags(void*, unsigned int)>
    9d24:	e3500000 	cmp	r0, #0
    9d28:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    9d2c:	e5d43009 	ldrb	r3, [r4, #9]
    9d30:	e5d40008 	ldrb	r0, [r4, #8]
    9d34:	e5d4200a 	ldrb	r2, [r4, #10]
    9d38:	e1800403 	orr	r0, r0, r3, lsl #8
    9d3c:	e5d4300b 	ldrb	r3, [r4, #11]
    9d40:	e1800802 	orr	r0, r0, r2, lsl #16
    9d44:	e1900c03 	orrs	r0, r0, r3, lsl #24
    9d48:	4a000001 	bmi	9d54 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xc0>
    9d4c:	e3a00000 	mov	r0, #0
    9d50:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9d54:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
    9d58:	e1a01420 	lsr	r1, r0, #8
    9d5c:	e1a02820 	lsr	r2, r0, #16
    9d60:	e1a03c20 	lsr	r3, r0, #24
    9d64:	e5c40008 	strb	r0, [r4, #8]
    9d68:	e2900000 	adds	r0, r0, #0
    9d6c:	e5c41009 	strb	r1, [r4, #9]
    9d70:	e5c4200a 	strb	r2, [r4, #10]
    9d74:	e5c4300b 	strb	r3, [r4, #11]
    9d78:	13a00001 	movne	r0, #1
    9d7c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9d80:	e3a02034 	mov	r2, #52	; 0x34
    9d84:	e59f101c 	ldr	r1, [pc, #28]	; 9da8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x114>
    9d88:	e59f001c 	ldr	r0, [pc, #28]	; 9dac <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x118>
    9d8c:	ebffff45 	bl	9aa8 <assertion_failed>
    9d90:	eaffffc8 	b	9cb8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x24>
    9d94:	e3a02033 	mov	r2, #51	; 0x33
    9d98:	e59f1008 	ldr	r1, [pc, #8]	; 9da8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x114>
    9d9c:	e59f000c 	ldr	r0, [pc, #12]	; 9db0 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x11c>
    9da0:	ebffff40 	bl	9aa8 <assertion_failed>
    9da4:	eaffffc1 	b	9cb0 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x1c>
    9da8:	000133a8 	.word	0x000133a8
    9dac:	00013418 	.word	0x00013418
    9db0:	0001340c 	.word	0x0001340c

00009db4 <debug_hexdump(void const*, unsigned int, char const*)>:
    9db4:	e3520000 	cmp	r2, #0
    9db8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9dbc:	e1a05001 	mov	r5, r1
    9dc0:	e59f60f4 	ldr	r6, [pc, #244]	; 9ebc <debug_hexdump(void const*, unsigned int, char const*)+0x108>
    9dc4:	e1a04000 	mov	r4, r0
    9dc8:	11a06002 	movne	r6, r2
    9dcc:	e24dd04c 	sub	sp, sp, #76	; 0x4c
    9dd0:	eb00085d 	bl	bf4c <CLogger::Get()>
    9dd4:	e58d4004 	str	r4, [sp, #4]
    9dd8:	e58d5000 	str	r5, [sp]
    9ddc:	e1a01006 	mov	r1, r6
    9de0:	e59f30d8 	ldr	r3, [pc, #216]	; 9ec0 <debug_hexdump(void const*, unsigned int, char const*)+0x10c>
    9de4:	e3a02004 	mov	r2, #4
    9de8:	eb000a00 	bl	c5f0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    9dec:	e3550000 	cmp	r5, #0
    9df0:	0a00002b 	beq	9ea4 <debug_hexdump(void const*, unsigned int, char const*)+0xf0>
    9df4:	e3a09004 	mov	r9, #4
    9df8:	e59f80c4 	ldr	r8, [pc, #196]	; 9ec4 <debug_hexdump(void const*, unsigned int, char const*)+0x110>
    9dfc:	e59f70c4 	ldr	r7, [pc, #196]	; 9ec8 <debug_hexdump(void const*, unsigned int, char const*)+0x114>
    9e00:	eb000851 	bl	bf4c <CLogger::Get()>
    9e04:	e5d4a00f 	ldrb	sl, [r4, #15]
    9e08:	e5d4e00e 	ldrb	lr, [r4, #14]
    9e0c:	e5d4c00d 	ldrb	ip, [r4, #13]
    9e10:	e5d4300c 	ldrb	r3, [r4, #12]
    9e14:	e5d4200b 	ldrb	r2, [r4, #11]
    9e18:	e5d4100a 	ldrb	r1, [r4, #10]
    9e1c:	e5d4b009 	ldrb	fp, [r4, #9]
    9e20:	e58da040 	str	sl, [sp, #64]	; 0x40
    9e24:	e5d4a008 	ldrb	sl, [r4, #8]
    9e28:	e58de03c 	str	lr, [sp, #60]	; 0x3c
    9e2c:	e5d4e007 	ldrb	lr, [r4, #7]
    9e30:	e58dc038 	str	ip, [sp, #56]	; 0x38
    9e34:	e5d4c006 	ldrb	ip, [r4, #6]
    9e38:	e58d3034 	str	r3, [sp, #52]	; 0x34
    9e3c:	e5d43005 	ldrb	r3, [r4, #5]
    9e40:	e58d2030 	str	r2, [sp, #48]	; 0x30
    9e44:	e5d42004 	ldrb	r2, [r4, #4]
    9e48:	e58d102c 	str	r1, [sp, #44]	; 0x2c
    9e4c:	e5d41003 	ldrb	r1, [r4, #3]
    9e50:	e58db028 	str	fp, [sp, #40]	; 0x28
    9e54:	e5d4b002 	ldrb	fp, [r4, #2]
    9e58:	e58da024 	str	sl, [sp, #36]	; 0x24
    9e5c:	e5d4a001 	ldrb	sl, [r4, #1]
    9e60:	e58de020 	str	lr, [sp, #32]
    9e64:	e5d4e000 	ldrb	lr, [r4]
    9e68:	e58dc01c 	str	ip, [sp, #28]
    9e6c:	e58d3018 	str	r3, [sp, #24]
    9e70:	e004c008 	and	ip, r4, r8
    9e74:	e58d2014 	str	r2, [sp, #20]
    9e78:	e58d1010 	str	r1, [sp, #16]
    9e7c:	e1a03007 	mov	r3, r7
    9e80:	e1a02009 	mov	r2, r9
    9e84:	e1a01006 	mov	r1, r6
    9e88:	e58db00c 	str	fp, [sp, #12]
    9e8c:	e58da008 	str	sl, [sp, #8]
    9e90:	e88d5000 	stm	sp, {ip, lr}
    9e94:	eb0009d5 	bl	c5f0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    9e98:	e355000f 	cmp	r5, #15
    9e9c:	e2844010 	add	r4, r4, #16
    9ea0:	8a000001 	bhi	9eac <debug_hexdump(void const*, unsigned int, char const*)+0xf8>
    9ea4:	e28dd04c 	add	sp, sp, #76	; 0x4c
    9ea8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9eac:	e2555010 	subs	r5, r5, #16
    9eb0:	1affffd2 	bne	9e00 <debug_hexdump(void const*, unsigned int, char const*)+0x4c>
    9eb4:	e28dd04c 	add	sp, sp, #76	; 0x4c
    9eb8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9ebc:	00013440 	.word	0x00013440
    9ec0:	00013448 	.word	0x00013448
    9ec4:	0000ffff 	.word	0x0000ffff
    9ec8:	00013470 	.word	0x00013470

00009ecc <debug_stacktrace(unsigned int const*, char const*)>:
    9ecc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    9ed0:	e3510000 	cmp	r1, #0
    9ed4:	e59f8084 	ldr	r8, [pc, #132]	; 9f60 <debug_stacktrace(unsigned int const*, char const*)+0x94>
    9ed8:	e24dd008 	sub	sp, sp, #8
    9edc:	e1a05000 	mov	r5, r0
    9ee0:	11a08001 	movne	r8, r1
    9ee4:	e3a04000 	mov	r4, #0
    9ee8:	e3a0a004 	mov	sl, #4
    9eec:	e59f6070 	ldr	r6, [pc, #112]	; 9f64 <debug_stacktrace(unsigned int const*, char const*)+0x98>
    9ef0:	e59f7070 	ldr	r7, [pc, #112]	; 9f68 <debug_stacktrace(unsigned int const*, char const*)+0x9c>
    9ef4:	e59f9070 	ldr	r9, [pc, #112]	; 9f6c <debug_stacktrace(unsigned int const*, char const*)+0xa0>
    9ef8:	ea000003 	b	9f0c <debug_stacktrace(unsigned int const*, char const*)+0x40>
    9efc:	e2844001 	add	r4, r4, #1
    9f00:	e3540040 	cmp	r4, #64	; 0x40
    9f04:	e2855004 	add	r5, r5, #4
    9f08:	0a000012 	beq	9f58 <debug_stacktrace(unsigned int const*, char const*)+0x8c>
    9f0c:	e5953000 	ldr	r3, [r5]
    9f10:	e1530006 	cmp	r3, r6
    9f14:	9afffff8 	bls	9efc <debug_stacktrace(unsigned int const*, char const*)+0x30>
    9f18:	e1530007 	cmp	r3, r7
    9f1c:	2afffff6 	bcs	9efc <debug_stacktrace(unsigned int const*, char const*)+0x30>
    9f20:	e3130003 	tst	r3, #3
    9f24:	1afffff4 	bne	9efc <debug_stacktrace(unsigned int const*, char const*)+0x30>
    9f28:	eb000807 	bl	bf4c <CLogger::Get()>
    9f2c:	e5953000 	ldr	r3, [r5]
    9f30:	e1a0200a 	mov	r2, sl
    9f34:	e58d4000 	str	r4, [sp]
    9f38:	e58d3004 	str	r3, [sp, #4]
    9f3c:	e1a01008 	mov	r1, r8
    9f40:	e1a03009 	mov	r3, r9
    9f44:	e2844001 	add	r4, r4, #1
    9f48:	eb0009a8 	bl	c5f0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    9f4c:	e3540040 	cmp	r4, #64	; 0x40
    9f50:	e2855004 	add	r5, r5, #4
    9f54:	1affffec 	bne	9f0c <debug_stacktrace(unsigned int const*, char const*)+0x40>
    9f58:	e28dd008 	add	sp, sp, #8
    9f5c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    9f60:	00013440 	.word	0x00013440
    9f64:	00007fff 	.word	0x00007fff
    9f68:	00012fcc 	.word	0x00012fcc
    9f6c:	000134c8 	.word	0x000134c8

00009f70 <CDevice::~CDevice()>:
    9f70:	e12fff1e 	bx	lr

00009f74 <CDevice::Read(void*, unsigned int)>:
    9f74:	e3e00000 	mvn	r0, #0
    9f78:	e12fff1e 	bx	lr

00009f7c <CDevice::Seek(unsigned long long)>:
    9f7c:	e3e00000 	mvn	r0, #0
    9f80:	e3e01000 	mvn	r1, #0
    9f84:	e12fff1e 	bx	lr

00009f88 <CDevice::~CDevice()>:
    9f88:	e92d4010 	push	{r4, lr}
    9f8c:	e1a04000 	mov	r4, r0
    9f90:	e3a01004 	mov	r1, #4
    9f94:	eb001ec2 	bl	11aa4 <operator delete(void*, unsigned int)>
    9f98:	e1a00004 	mov	r0, r4
    9f9c:	e8bd8010 	pop	{r4, pc}

00009fa0 <CDevice::CDevice()>:
    9fa0:	e59f3004 	ldr	r3, [pc, #4]	; 9fac <CDevice::CDevice()+0xc>
    9fa4:	e5803000 	str	r3, [r0]
    9fa8:	e12fff1e 	bx	lr
    9fac:	000134e4 	.word	0x000134e4

00009fb0 <CDeviceNameService::CDeviceNameService()>:
    9fb0:	e3a03000 	mov	r3, #0
    9fb4:	e92d4070 	push	{r4, r5, r6, lr}
    9fb8:	e59f5030 	ldr	r5, [pc, #48]	; 9ff0 <CDeviceNameService::CDeviceNameService()+0x40>
    9fbc:	e1a04000 	mov	r4, r0
    9fc0:	e5952000 	ldr	r2, [r5]
    9fc4:	e5803000 	str	r3, [r0]
    9fc8:	e1520003 	cmp	r2, r3
    9fcc:	e5803004 	str	r3, [r0, #4]
    9fd0:	0a000003 	beq	9fe4 <CDeviceNameService::CDeviceNameService()+0x34>
    9fd4:	e3a0201f 	mov	r2, #31
    9fd8:	e59f1014 	ldr	r1, [pc, #20]	; 9ff4 <CDeviceNameService::CDeviceNameService()+0x44>
    9fdc:	e59f0014 	ldr	r0, [pc, #20]	; 9ff8 <CDeviceNameService::CDeviceNameService()+0x48>
    9fe0:	ebfffeb0 	bl	9aa8 <assertion_failed>
    9fe4:	e5854000 	str	r4, [r5]
    9fe8:	e1a00004 	mov	r0, r4
    9fec:	e8bd8070 	pop	{r4, r5, r6, pc}
    9ff0:	00015334 	.word	0x00015334
    9ff4:	000134f8 	.word	0x000134f8
    9ff8:	00013510 	.word	0x00013510

00009ffc <CDeviceNameService::~CDeviceNameService()>:
    9ffc:	e5903000 	ldr	r3, [r0]
    a000:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a004:	e3530000 	cmp	r3, #0
    a008:	e1a05000 	mov	r5, r0
    a00c:	0a00000e 	beq	a04c <CDeviceNameService::~CDeviceNameService()+0x50>
    a010:	e3a06000 	mov	r6, #0
    a014:	e3a07010 	mov	r7, #16
    a018:	e5930004 	ldr	r0, [r3, #4]
    a01c:	e5934000 	ldr	r4, [r3]
    a020:	e3500000 	cmp	r0, #0
    a024:	0a000000 	beq	a02c <CDeviceNameService::~CDeviceNameService()+0x30>
    a028:	eb001e9c 	bl	11aa0 <operator delete[](void*)>
    a02c:	e5950000 	ldr	r0, [r5]
    a030:	e1a01007 	mov	r1, r7
    a034:	e5806004 	str	r6, [r0, #4]
    a038:	e5806008 	str	r6, [r0, #8]
    a03c:	eb001e98 	bl	11aa4 <operator delete(void*, unsigned int)>
    a040:	e2543000 	subs	r3, r4, #0
    a044:	e5854000 	str	r4, [r5]
    a048:	1afffff2 	bne	a018 <CDeviceNameService::~CDeviceNameService()+0x1c>
    a04c:	e3a02000 	mov	r2, #0
    a050:	e59f3008 	ldr	r3, [pc, #8]	; a060 <CDeviceNameService::~CDeviceNameService()+0x64>
    a054:	e1a00005 	mov	r0, r5
    a058:	e5832000 	str	r2, [r3]
    a05c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    a060:	00015334 	.word	0x00015334

0000a064 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>:
    a064:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a068:	e1a05000 	mov	r5, r0
    a06c:	e5900004 	ldr	r0, [r0, #4]
    a070:	e1a06001 	mov	r6, r1
    a074:	e3500000 	cmp	r0, #0
    a078:	e1a07002 	mov	r7, r2
    a07c:	e1a08003 	mov	r8, r3
    a080:	1a000017 	bne	a0e4 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x80>
    a084:	e3a00010 	mov	r0, #16
    a088:	eb001e81 	bl	11a94 <operator new(unsigned int)>
    a08c:	e3560000 	cmp	r6, #0
    a090:	e1a04000 	mov	r4, r0
    a094:	0a000019 	beq	a100 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x9c>
    a098:	e1a00006 	mov	r0, r6
    a09c:	eb001a2e 	bl	1095c <strlen>
    a0a0:	e2800001 	add	r0, r0, #1
    a0a4:	eb001e7b 	bl	11a98 <operator new[](unsigned int)>
    a0a8:	e1a01006 	mov	r1, r6
    a0ac:	e5840004 	str	r0, [r4, #4]
    a0b0:	eb001aa7 	bl	10b54 <strcpy>
    a0b4:	e3570000 	cmp	r7, #0
    a0b8:	0a00000b 	beq	a0ec <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x88>
    a0bc:	e5952004 	ldr	r2, [r5, #4]
    a0c0:	e5953000 	ldr	r3, [r5]
    a0c4:	e3520000 	cmp	r2, #0
    a0c8:	e5847008 	str	r7, [r4, #8]
    a0cc:	e5c4800c 	strb	r8, [r4, #12]
    a0d0:	e5843000 	str	r3, [r4]
    a0d4:	e5854000 	str	r4, [r5]
    a0d8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    a0dc:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    a0e0:	ea001e3e 	b	119e0 <LeaveCritical>
    a0e4:	eb001e10 	bl	1192c <EnterCritical>
    a0e8:	eaffffe5 	b	a084 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x20>
    a0ec:	e3a02040 	mov	r2, #64	; 0x40
    a0f0:	e59f101c 	ldr	r1, [pc, #28]	; a114 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xb0>
    a0f4:	e59f001c 	ldr	r0, [pc, #28]	; a118 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xb4>
    a0f8:	ebfffe6a 	bl	9aa8 <assertion_failed>
    a0fc:	eaffffee 	b	a0bc <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x58>
    a100:	e3a0203b 	mov	r2, #59	; 0x3b
    a104:	e59f1008 	ldr	r1, [pc, #8]	; a114 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xb0>
    a108:	e59f000c 	ldr	r0, [pc, #12]	; a11c <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xb8>
    a10c:	ebfffe65 	bl	9aa8 <assertion_failed>
    a110:	eaffffe0 	b	a098 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x34>
    a114:	000134f8 	.word	0x000134f8
    a118:	00013528 	.word	0x00013528
    a11c:	0001351c 	.word	0x0001351c

0000a120 <CDeviceNameService::RemoveDevice(char const*, bool)>:
    a120:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a124:	e2516000 	subs	r6, r1, #0
    a128:	e1a08000 	mov	r8, r0
    a12c:	e1a07002 	mov	r7, r2
    a130:	0a000040 	beq	a238 <CDeviceNameService::RemoveDevice(char const*, bool)+0x118>
    a134:	e5980004 	ldr	r0, [r8, #4]
    a138:	e3500000 	cmp	r0, #0
    a13c:	1a00002e 	bne	a1fc <CDeviceNameService::RemoveDevice(char const*, bool)+0xdc>
    a140:	e5984000 	ldr	r4, [r8]
    a144:	e3540000 	cmp	r4, #0
    a148:	0a000039 	beq	a234 <CDeviceNameService::RemoveDevice(char const*, bool)+0x114>
    a14c:	e3a05000 	mov	r5, #0
    a150:	e3a0b05e 	mov	fp, #94	; 0x5e
    a154:	e59fa0f0 	ldr	sl, [pc, #240]	; a24c <CDeviceNameService::RemoveDevice(char const*, bool)+0x12c>
    a158:	e59f90f0 	ldr	r9, [pc, #240]	; a250 <CDeviceNameService::RemoveDevice(char const*, bool)+0x130>
    a15c:	ea00000b 	b	a190 <CDeviceNameService::RemoveDevice(char const*, bool)+0x70>
    a160:	e1a00006 	mov	r0, r6
    a164:	eb001a06 	bl	10984 <strcmp>
    a168:	e3500000 	cmp	r0, #0
    a16c:	1a000002 	bne	a17c <CDeviceNameService::RemoveDevice(char const*, bool)+0x5c>
    a170:	e5d4300c 	ldrb	r3, [r4, #12]
    a174:	e1530007 	cmp	r3, r7
    a178:	0a00000d 	beq	a1b4 <CDeviceNameService::RemoveDevice(char const*, bool)+0x94>
    a17c:	e5943000 	ldr	r3, [r4]
    a180:	e1a05004 	mov	r5, r4
    a184:	e3530000 	cmp	r3, #0
    a188:	0a00001f 	beq	a20c <CDeviceNameService::RemoveDevice(char const*, bool)+0xec>
    a18c:	e1a04003 	mov	r4, r3
    a190:	e5941004 	ldr	r1, [r4, #4]
    a194:	e3510000 	cmp	r1, #0
    a198:	1afffff0 	bne	a160 <CDeviceNameService::RemoveDevice(char const*, bool)+0x40>
    a19c:	e1a0100a 	mov	r1, sl
    a1a0:	e1a0200b 	mov	r2, fp
    a1a4:	e1a00009 	mov	r0, r9
    a1a8:	ebfffe3e 	bl	9aa8 <assertion_failed>
    a1ac:	e5941004 	ldr	r1, [r4, #4]
    a1b0:	eaffffea 	b	a160 <CDeviceNameService::RemoveDevice(char const*, bool)+0x40>
    a1b4:	e3550000 	cmp	r5, #0
    a1b8:	0a00001a 	beq	a228 <CDeviceNameService::RemoveDevice(char const*, bool)+0x108>
    a1bc:	e5943000 	ldr	r3, [r4]
    a1c0:	e5853000 	str	r3, [r5]
    a1c4:	e5983004 	ldr	r3, [r8, #4]
    a1c8:	e3530000 	cmp	r3, #0
    a1cc:	1a000013 	bne	a220 <CDeviceNameService::RemoveDevice(char const*, bool)+0x100>
    a1d0:	e5940004 	ldr	r0, [r4, #4]
    a1d4:	e3500000 	cmp	r0, #0
    a1d8:	0a000000 	beq	a1e0 <CDeviceNameService::RemoveDevice(char const*, bool)+0xc0>
    a1dc:	eb001e2f 	bl	11aa0 <operator delete[](void*)>
    a1e0:	e3a03000 	mov	r3, #0
    a1e4:	e1a00004 	mov	r0, r4
    a1e8:	e5843004 	str	r3, [r4, #4]
    a1ec:	e5843008 	str	r3, [r4, #8]
    a1f0:	e3a01010 	mov	r1, #16
    a1f4:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a1f8:	ea001e29 	b	11aa4 <operator delete(void*, unsigned int)>
    a1fc:	eb001dca 	bl	1192c <EnterCritical>
    a200:	e5984000 	ldr	r4, [r8]
    a204:	e3540000 	cmp	r4, #0
    a208:	1affffcf 	bne	a14c <CDeviceNameService::RemoveDevice(char const*, bool)+0x2c>
    a20c:	e5983004 	ldr	r3, [r8, #4]
    a210:	e3530000 	cmp	r3, #0
    a214:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a218:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a21c:	ea001def 	b	119e0 <LeaveCritical>
    a220:	eb001dee 	bl	119e0 <LeaveCritical>
    a224:	eaffffe9 	b	a1d0 <CDeviceNameService::RemoveDevice(char const*, bool)+0xb0>
    a228:	e5943000 	ldr	r3, [r4]
    a22c:	e5883000 	str	r3, [r8]
    a230:	eaffffe3 	b	a1c4 <CDeviceNameService::RemoveDevice(char const*, bool)+0xa4>
    a234:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a238:	e3a02056 	mov	r2, #86	; 0x56
    a23c:	e59f1008 	ldr	r1, [pc, #8]	; a24c <CDeviceNameService::RemoveDevice(char const*, bool)+0x12c>
    a240:	e59f000c 	ldr	r0, [pc, #12]	; a254 <CDeviceNameService::RemoveDevice(char const*, bool)+0x134>
    a244:	ebfffe17 	bl	9aa8 <assertion_failed>
    a248:	eaffffb9 	b	a134 <CDeviceNameService::RemoveDevice(char const*, bool)+0x14>
    a24c:	000134f8 	.word	0x000134f8
    a250:	00013538 	.word	0x00013538
    a254:	0001351c 	.word	0x0001351c

0000a258 <CDeviceNameService::GetDevice(char const*, bool)>:
    a258:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    a25c:	e2515000 	subs	r5, r1, #0
    a260:	e1a07000 	mov	r7, r0
    a264:	e1a06002 	mov	r6, r2
    a268:	0a000034 	beq	a340 <CDeviceNameService::GetDevice(char const*, bool)+0xe8>
    a26c:	e5970004 	ldr	r0, [r7, #4]
    a270:	e3500000 	cmp	r0, #0
    a274:	1a000019 	bne	a2e0 <CDeviceNameService::GetDevice(char const*, bool)+0x88>
    a278:	e5974000 	ldr	r4, [r7]
    a27c:	e3540000 	cmp	r4, #0
    a280:	0a00001e 	beq	a300 <CDeviceNameService::GetDevice(char const*, bool)+0xa8>
    a284:	e3a0a092 	mov	sl, #146	; 0x92
    a288:	e59f90c4 	ldr	r9, [pc, #196]	; a354 <CDeviceNameService::GetDevice(char const*, bool)+0xfc>
    a28c:	e59f80c4 	ldr	r8, [pc, #196]	; a358 <CDeviceNameService::GetDevice(char const*, bool)+0x100>
    a290:	ea000009 	b	a2bc <CDeviceNameService::GetDevice(char const*, bool)+0x64>
    a294:	e1a00005 	mov	r0, r5
    a298:	eb0019b9 	bl	10984 <strcmp>
    a29c:	e3500000 	cmp	r0, #0
    a2a0:	1a000002 	bne	a2b0 <CDeviceNameService::GetDevice(char const*, bool)+0x58>
    a2a4:	e5d4300c 	ldrb	r3, [r4, #12]
    a2a8:	e1530006 	cmp	r3, r6
    a2ac:	0a000016 	beq	a30c <CDeviceNameService::GetDevice(char const*, bool)+0xb4>
    a2b0:	e5944000 	ldr	r4, [r4]
    a2b4:	e3540000 	cmp	r4, #0
    a2b8:	0a00000c 	beq	a2f0 <CDeviceNameService::GetDevice(char const*, bool)+0x98>
    a2bc:	e5941004 	ldr	r1, [r4, #4]
    a2c0:	e3510000 	cmp	r1, #0
    a2c4:	1afffff2 	bne	a294 <CDeviceNameService::GetDevice(char const*, bool)+0x3c>
    a2c8:	e1a01009 	mov	r1, r9
    a2cc:	e1a0200a 	mov	r2, sl
    a2d0:	e1a00008 	mov	r0, r8
    a2d4:	ebfffdf3 	bl	9aa8 <assertion_failed>
    a2d8:	e5941004 	ldr	r1, [r4, #4]
    a2dc:	eaffffec 	b	a294 <CDeviceNameService::GetDevice(char const*, bool)+0x3c>
    a2e0:	eb001d91 	bl	1192c <EnterCritical>
    a2e4:	e5974000 	ldr	r4, [r7]
    a2e8:	e3540000 	cmp	r4, #0
    a2ec:	1affffe4 	bne	a284 <CDeviceNameService::GetDevice(char const*, bool)+0x2c>
    a2f0:	e5973004 	ldr	r3, [r7, #4]
    a2f4:	e3530000 	cmp	r3, #0
    a2f8:	0a000000 	beq	a300 <CDeviceNameService::GetDevice(char const*, bool)+0xa8>
    a2fc:	eb001db7 	bl	119e0 <LeaveCritical>
    a300:	e3a04000 	mov	r4, #0
    a304:	e1a00004 	mov	r0, r4
    a308:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    a30c:	e5973004 	ldr	r3, [r7, #4]
    a310:	e5944008 	ldr	r4, [r4, #8]
    a314:	e3530000 	cmp	r3, #0
    a318:	1a000006 	bne	a338 <CDeviceNameService::GetDevice(char const*, bool)+0xe0>
    a31c:	e3540000 	cmp	r4, #0
    a320:	1afffff7 	bne	a304 <CDeviceNameService::GetDevice(char const*, bool)+0xac>
    a324:	e3a0209a 	mov	r2, #154	; 0x9a
    a328:	e59f1024 	ldr	r1, [pc, #36]	; a354 <CDeviceNameService::GetDevice(char const*, bool)+0xfc>
    a32c:	e59f0028 	ldr	r0, [pc, #40]	; a35c <CDeviceNameService::GetDevice(char const*, bool)+0x104>
    a330:	ebfffddc 	bl	9aa8 <assertion_failed>
    a334:	eafffff2 	b	a304 <CDeviceNameService::GetDevice(char const*, bool)+0xac>
    a338:	eb001da8 	bl	119e0 <LeaveCritical>
    a33c:	eafffff6 	b	a31c <CDeviceNameService::GetDevice(char const*, bool)+0xc4>
    a340:	e3a0208b 	mov	r2, #139	; 0x8b
    a344:	e59f1008 	ldr	r1, [pc, #8]	; a354 <CDeviceNameService::GetDevice(char const*, bool)+0xfc>
    a348:	e59f0010 	ldr	r0, [pc, #16]	; a360 <CDeviceNameService::GetDevice(char const*, bool)+0x108>
    a34c:	ebfffdd5 	bl	9aa8 <assertion_failed>
    a350:	eaffffc5 	b	a26c <CDeviceNameService::GetDevice(char const*, bool)+0x14>
    a354:	000134f8 	.word	0x000134f8
    a358:	00013538 	.word	0x00013538
    a35c:	0001354c 	.word	0x0001354c
    a360:	0001351c 	.word	0x0001351c

0000a364 <CDeviceNameService::Get()>:
    a364:	e92d4010 	push	{r4, lr}
    a368:	e59f4020 	ldr	r4, [pc, #32]	; a390 <CDeviceNameService::Get()+0x2c>
    a36c:	e5940000 	ldr	r0, [r4]
    a370:	e3500000 	cmp	r0, #0
    a374:	18bd8010 	popne	{r4, pc}
    a378:	e3a020cc 	mov	r2, #204	; 0xcc
    a37c:	e59f1010 	ldr	r1, [pc, #16]	; a394 <CDeviceNameService::Get()+0x30>
    a380:	e59f0010 	ldr	r0, [pc, #16]	; a398 <CDeviceNameService::Get()+0x34>
    a384:	ebfffdc7 	bl	9aa8 <assertion_failed>
    a388:	e5940000 	ldr	r0, [r4]
    a38c:	e8bd8010 	pop	{r4, pc}
    a390:	00015334 	.word	0x00015334
    a394:	000134f8 	.word	0x000134f8
    a398:	0001355c 	.word	0x0001355c

0000a39c <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>:
    a39c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a3a0:	e1a07001 	mov	r7, r1
    a3a4:	e1a08002 	mov	r8, r2
    a3a8:	e24dd010 	sub	sp, sp, #16
    a3ac:	e1a04000 	mov	r4, r0
    a3b0:	e1a0000d 	mov	r0, sp
    a3b4:	e1a05003 	mov	r5, r3
    a3b8:	e5dd6028 	ldrb	r6, [sp, #40]	; 0x28
    a3bc:	eb0011a0 	bl	ea44 <CString::CString()>
    a3c0:	e1a03008 	mov	r3, r8
    a3c4:	e1a02007 	mov	r2, r7
    a3c8:	e1a0000d 	mov	r0, sp
    a3cc:	e59f102c 	ldr	r1, [pc, #44]	; a400 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)+0x64>
    a3d0:	eb001589 	bl	f9fc <CString::Format(char const*, ...)>
    a3d4:	e1a0000d 	mov	r0, sp
    a3d8:	eb0011af 	bl	ea9c <CString::operator char const*() const>
    a3dc:	e1a03006 	mov	r3, r6
    a3e0:	e1a01000 	mov	r1, r0
    a3e4:	e1a02005 	mov	r2, r5
    a3e8:	e1a00004 	mov	r0, r4
    a3ec:	ebffff1c 	bl	a064 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
    a3f0:	e1a0000d 	mov	r0, sp
    a3f4:	eb00115f 	bl	e978 <CString::~CString()>
    a3f8:	e28dd010 	add	sp, sp, #16
    a3fc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    a400:	00013568 	.word	0x00013568

0000a404 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>:
    a404:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    a408:	e1a06001 	mov	r6, r1
    a40c:	e1a07002 	mov	r7, r2
    a410:	e24dd014 	sub	sp, sp, #20
    a414:	e1a04000 	mov	r4, r0
    a418:	e1a0000d 	mov	r0, sp
    a41c:	e1a05003 	mov	r5, r3
    a420:	eb001187 	bl	ea44 <CString::CString()>
    a424:	e1a03007 	mov	r3, r7
    a428:	e1a02006 	mov	r2, r6
    a42c:	e1a0000d 	mov	r0, sp
    a430:	e59f1028 	ldr	r1, [pc, #40]	; a460 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)+0x5c>
    a434:	eb001570 	bl	f9fc <CString::Format(char const*, ...)>
    a438:	e1a0000d 	mov	r0, sp
    a43c:	eb001196 	bl	ea9c <CString::operator char const*() const>
    a440:	e1a02005 	mov	r2, r5
    a444:	e1a01000 	mov	r1, r0
    a448:	e1a00004 	mov	r0, r4
    a44c:	ebffff33 	bl	a120 <CDeviceNameService::RemoveDevice(char const*, bool)>
    a450:	e1a0000d 	mov	r0, sp
    a454:	eb001147 	bl	e978 <CString::~CString()>
    a458:	e28dd014 	add	sp, sp, #20
    a45c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    a460:	00013568 	.word	0x00013568

0000a464 <CDeviceNameService::GetDevice(char const*, unsigned int, bool)>:
    a464:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    a468:	e1a06001 	mov	r6, r1
    a46c:	e1a07002 	mov	r7, r2
    a470:	e24dd014 	sub	sp, sp, #20
    a474:	e1a04000 	mov	r4, r0
    a478:	e1a0000d 	mov	r0, sp
    a47c:	e1a05003 	mov	r5, r3
    a480:	eb00116f 	bl	ea44 <CString::CString()>
    a484:	e1a03007 	mov	r3, r7
    a488:	e1a02006 	mov	r2, r6
    a48c:	e1a0000d 	mov	r0, sp
    a490:	e59f1030 	ldr	r1, [pc, #48]	; a4c8 <CDeviceNameService::GetDevice(char const*, unsigned int, bool)+0x64>
    a494:	eb001558 	bl	f9fc <CString::Format(char const*, ...)>
    a498:	e1a0000d 	mov	r0, sp
    a49c:	eb00117e 	bl	ea9c <CString::operator char const*() const>
    a4a0:	e1a02005 	mov	r2, r5
    a4a4:	e1a01000 	mov	r1, r0
    a4a8:	e1a00004 	mov	r0, r4
    a4ac:	ebffff69 	bl	a258 <CDeviceNameService::GetDevice(char const*, bool)>
    a4b0:	e1a04000 	mov	r4, r0
    a4b4:	e1a0000d 	mov	r0, sp
    a4b8:	eb00112e 	bl	e978 <CString::~CString()>
    a4bc:	e1a00004 	mov	r0, r4
    a4c0:	e28dd014 	add	sp, sp, #20
    a4c4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    a4c8:	00013568 	.word	0x00013568

0000a4cc <CDeviceNameService::ListDevices(CDevice*)>:
    a4cc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a4d0:	e2516000 	subs	r6, r1, #0
    a4d4:	e24dd01c 	sub	sp, sp, #28
    a4d8:	e1a04000 	mov	r4, r0
    a4dc:	0a000036 	beq	a5bc <CDeviceNameService::ListDevices(CDevice*)+0xf0>
    a4e0:	e5944000 	ldr	r4, [r4]
    a4e4:	e3540000 	cmp	r4, #0
    a4e8:	0a00002b 	beq	a59c <CDeviceNameService::ListDevices(CDevice*)+0xd0>
    a4ec:	e3a05000 	mov	r5, #0
    a4f0:	e3a0b0b9 	mov	fp, #185	; 0xb9
    a4f4:	e59f80d4 	ldr	r8, [pc, #212]	; a5d0 <CDeviceNameService::ListDevices(CDevice*)+0x104>
    a4f8:	e28d0008 	add	r0, sp, #8
    a4fc:	eb001150 	bl	ea44 <CString::CString()>
    a500:	e5943004 	ldr	r3, [r4, #4]
    a504:	e2855001 	add	r5, r5, #1
    a508:	e3530000 	cmp	r3, #0
    a50c:	0a000024 	beq	a5a4 <CDeviceNameService::ListDevices(CDevice*)+0xd8>
    a510:	e2157003 	ands	r7, r5, #3
    a514:	13a01020 	movne	r1, #32
    a518:	03a0100a 	moveq	r1, #10
    a51c:	e5d4200c 	ldrb	r2, [r4, #12]
    a520:	e28d0008 	add	r0, sp, #8
    a524:	e3520000 	cmp	r2, #0
    a528:	03a02063 	moveq	r2, #99	; 0x63
    a52c:	13a02062 	movne	r2, #98	; 0x62
    a530:	e58d1000 	str	r1, [sp]
    a534:	e1a01008 	mov	r1, r8
    a538:	eb00152f 	bl	f9fc <CString::Format(char const*, ...)>
    a53c:	e5963000 	ldr	r3, [r6]
    a540:	e28d0008 	add	r0, sp, #8
    a544:	e593900c 	ldr	r9, [r3, #12]
    a548:	eb001153 	bl	ea9c <CString::operator char const*() const>
    a54c:	e1a0a000 	mov	sl, r0
    a550:	e28d0008 	add	r0, sp, #8
    a554:	eb00117e 	bl	eb54 <CString::GetLength() const>
    a558:	e1a0100a 	mov	r1, sl
    a55c:	e1a02000 	mov	r2, r0
    a560:	e1a00006 	mov	r0, r6
    a564:	e12fff39 	blx	r9
    a568:	e5944000 	ldr	r4, [r4]
    a56c:	e28d0008 	add	r0, sp, #8
    a570:	eb001100 	bl	e978 <CString::~CString()>
    a574:	e3540000 	cmp	r4, #0
    a578:	1affffde 	bne	a4f8 <CDeviceNameService::ListDevices(CDevice*)+0x2c>
    a57c:	e3570000 	cmp	r7, #0
    a580:	0a000005 	beq	a59c <CDeviceNameService::ListDevices(CDevice*)+0xd0>
    a584:	e5963000 	ldr	r3, [r6]
    a588:	e1a00006 	mov	r0, r6
    a58c:	e593300c 	ldr	r3, [r3, #12]
    a590:	e3a02001 	mov	r2, #1
    a594:	e59f1038 	ldr	r1, [pc, #56]	; a5d4 <CDeviceNameService::ListDevices(CDevice*)+0x108>
    a598:	e12fff33 	blx	r3
    a59c:	e28dd01c 	add	sp, sp, #28
    a5a0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a5a4:	e1a0200b 	mov	r2, fp
    a5a8:	e59f1028 	ldr	r1, [pc, #40]	; a5d8 <CDeviceNameService::ListDevices(CDevice*)+0x10c>
    a5ac:	e59f0028 	ldr	r0, [pc, #40]	; a5dc <CDeviceNameService::ListDevices(CDevice*)+0x110>
    a5b0:	ebfffd3c 	bl	9aa8 <assertion_failed>
    a5b4:	e5943004 	ldr	r3, [r4, #4]
    a5b8:	eaffffd4 	b	a510 <CDeviceNameService::ListDevices(CDevice*)+0x44>
    a5bc:	e3a020b0 	mov	r2, #176	; 0xb0
    a5c0:	e59f1010 	ldr	r1, [pc, #16]	; a5d8 <CDeviceNameService::ListDevices(CDevice*)+0x10c>
    a5c4:	e59f0014 	ldr	r0, [pc, #20]	; a5e0 <CDeviceNameService::ListDevices(CDevice*)+0x114>
    a5c8:	ebfffd36 	bl	9aa8 <assertion_failed>
    a5cc:	eaffffc3 	b	a4e0 <CDeviceNameService::ListDevices(CDevice*)+0x14>
    a5d0:	00013580 	.word	0x00013580
    a5d4:	0001358c 	.word	0x0001358c
    a5d8:	000134f8 	.word	0x000134f8
    a5dc:	00013538 	.word	0x00013538
    a5e0:	00013570 	.word	0x00013570

0000a5e4 <CGPIOPin::~CGPIOPin()>:
    a5e4:	e12fff1e 	bx	lr

0000a5e8 <CGPIOPin::~CGPIOPin()>:
    a5e8:	e92d4010 	push	{r4, lr}
    a5ec:	e1a04000 	mov	r4, r0
    a5f0:	e3a01028 	mov	r1, #40	; 0x28
    a5f4:	eb001d2a 	bl	11aa4 <operator delete(void*, unsigned int)>
    a5f8:	e1a00004 	mov	r0, r4
    a5fc:	e8bd8010 	pop	{r4, pc}

0000a600 <CGPIOPin::CGPIOPin()>:
    a600:	e92d4010 	push	{r4, lr}
    a604:	e3a01000 	mov	r1, #0
    a608:	e3a02006 	mov	r2, #6
    a60c:	e3a04036 	mov	r4, #54	; 0x36
    a610:	e3a0c00a 	mov	ip, #10
    a614:	e59fe01c 	ldr	lr, [pc, #28]	; a638 <CGPIOPin::CGPIOPin()+0x38>
    a618:	e5804004 	str	r4, [r0, #4]
    a61c:	e580e000 	str	lr, [r0]
    a620:	e5c0c010 	strb	ip, [r0, #16]
    a624:	e5801018 	str	r1, [r0, #24]
    a628:	e580101c 	str	r1, [r0, #28]
    a62c:	e5c02024 	strb	r2, [r0, #36]	; 0x24
    a630:	e5c02025 	strb	r2, [r0, #37]	; 0x25
    a634:	e8bd8010 	pop	{r4, pc}
    a638:	00013598 	.word	0x00013598

0000a63c <CGPIOPin::AssignPin(unsigned int)>:
    a63c:	e5903004 	ldr	r3, [r0, #4]
    a640:	e92d4070 	push	{r4, r5, r6, lr}
    a644:	e3530036 	cmp	r3, #54	; 0x36
    a648:	e1a05000 	mov	r5, r0
    a64c:	e1a04001 	mov	r4, r1
    a650:	0a000003 	beq	a664 <CGPIOPin::AssignPin(unsigned int)+0x28>
    a654:	e3a02040 	mov	r2, #64	; 0x40
    a658:	e59f1064 	ldr	r1, [pc, #100]	; a6c4 <CGPIOPin::AssignPin(unsigned int)+0x88>
    a65c:	e59f0064 	ldr	r0, [pc, #100]	; a6c8 <CGPIOPin::AssignPin(unsigned int)+0x8c>
    a660:	ebfffd10 	bl	9aa8 <assertion_failed>
    a664:	e3540035 	cmp	r4, #53	; 0x35
    a668:	e5854004 	str	r4, [r5, #4]
    a66c:	8a000007 	bhi	a690 <CGPIOPin::AssignPin(unsigned int)+0x54>
    a670:	e3a03001 	mov	r3, #1
    a674:	e204201f 	and	r2, r4, #31
    a678:	e1a042a4 	lsr	r4, r4, #5
    a67c:	e1a03213 	lsl	r3, r3, r2
    a680:	e1a04104 	lsl	r4, r4, #2
    a684:	e585300c 	str	r3, [r5, #12]
    a688:	e5854008 	str	r4, [r5, #8]
    a68c:	e8bd8070 	pop	{r4, r5, r6, pc}
    a690:	eb0008ea 	bl	ca40 <CMachineInfo::Get()>
    a694:	e6ef1074 	uxtb	r1, r4
    a698:	eb0008bb 	bl	c98c <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>
    a69c:	e3500035 	cmp	r0, #53	; 0x35
    a6a0:	e1a04000 	mov	r4, r0
    a6a4:	e5850004 	str	r0, [r5, #4]
    a6a8:	9afffff0 	bls	a670 <CGPIOPin::AssignPin(unsigned int)+0x34>
    a6ac:	e3a02047 	mov	r2, #71	; 0x47
    a6b0:	e59f100c 	ldr	r1, [pc, #12]	; a6c4 <CGPIOPin::AssignPin(unsigned int)+0x88>
    a6b4:	e59f0010 	ldr	r0, [pc, #16]	; a6cc <CGPIOPin::AssignPin(unsigned int)+0x90>
    a6b8:	ebfffcfa 	bl	9aa8 <assertion_failed>
    a6bc:	e5954004 	ldr	r4, [r5, #4]
    a6c0:	eaffffea 	b	a670 <CGPIOPin::AssignPin(unsigned int)+0x34>
    a6c4:	000135b8 	.word	0x000135b8
    a6c8:	000135c4 	.word	0x000135c4
    a6cc:	000135d8 	.word	0x000135d8

0000a6d0 <CGPIOPin::Write(unsigned int)>:
    a6d0:	e5903004 	ldr	r3, [r0, #4]
    a6d4:	e92d4070 	push	{r4, r5, r6, lr}
    a6d8:	e3530035 	cmp	r3, #53	; 0x35
    a6dc:	e1a04000 	mov	r4, r0
    a6e0:	e1a05001 	mov	r5, r1
    a6e4:	8a00001e 	bhi	a764 <CGPIOPin::Write(unsigned int)+0x94>
    a6e8:	e5d43010 	ldrb	r3, [r4, #16]
    a6ec:	e3530003 	cmp	r3, #3
    a6f0:	ca000016 	bgt	a750 <CGPIOPin::Write(unsigned int)+0x80>
    a6f4:	e3a03000 	mov	r3, #0
    a6f8:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    a6fc:	e3550001 	cmp	r5, #1
    a700:	9a00000b 	bls	a734 <CGPIOPin::Write(unsigned int)+0x64>
    a704:	e3a02098 	mov	r2, #152	; 0x98
    a708:	e59f1068 	ldr	r1, [pc, #104]	; a778 <CGPIOPin::Write(unsigned int)+0xa8>
    a70c:	e59f0068 	ldr	r0, [pc, #104]	; a77c <CGPIOPin::Write(unsigned int)+0xac>
    a710:	ebfffce4 	bl	9aa8 <assertion_failed>
    a714:	e5845014 	str	r5, [r4, #20]
    a718:	e59f5060 	ldr	r5, [pc, #96]	; a780 <CGPIOPin::Write(unsigned int)+0xb0>
    a71c:	e594100c 	ldr	r1, [r4, #12]
    a720:	e5942008 	ldr	r2, [r4, #8]
    a724:	e3a03000 	mov	r3, #0
    a728:	e7851002 	str	r1, [r5, r2]
    a72c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    a730:	e8bd8070 	pop	{r4, r5, r6, pc}
    a734:	e59f3044 	ldr	r3, [pc, #68]	; a780 <CGPIOPin::Write(unsigned int)+0xb0>
    a738:	e59f2044 	ldr	r2, [pc, #68]	; a784 <CGPIOPin::Write(unsigned int)+0xb4>
    a73c:	e3550000 	cmp	r5, #0
    a740:	e5845014 	str	r5, [r4, #20]
    a744:	11a05003 	movne	r5, r3
    a748:	01a05002 	moveq	r5, r2
    a74c:	eafffff2 	b	a71c <CGPIOPin::Write(unsigned int)+0x4c>
    a750:	e3a02094 	mov	r2, #148	; 0x94
    a754:	e59f101c 	ldr	r1, [pc, #28]	; a778 <CGPIOPin::Write(unsigned int)+0xa8>
    a758:	e59f0028 	ldr	r0, [pc, #40]	; a788 <CGPIOPin::Write(unsigned int)+0xb8>
    a75c:	ebfffcd1 	bl	9aa8 <assertion_failed>
    a760:	eaffffe3 	b	a6f4 <CGPIOPin::Write(unsigned int)+0x24>
    a764:	e3a02091 	mov	r2, #145	; 0x91
    a768:	e59f1008 	ldr	r1, [pc, #8]	; a778 <CGPIOPin::Write(unsigned int)+0xa8>
    a76c:	e59f0018 	ldr	r0, [pc, #24]	; a78c <CGPIOPin::Write(unsigned int)+0xbc>
    a770:	ebfffccc 	bl	9aa8 <assertion_failed>
    a774:	eaffffdb 	b	a6e8 <CGPIOPin::Write(unsigned int)+0x18>
    a778:	000135b8 	.word	0x000135b8
    a77c:	00013610 	.word	0x00013610
    a780:	2020001c 	.word	0x2020001c
    a784:	20200028 	.word	0x20200028
    a788:	000135ec 	.word	0x000135ec
    a78c:	000135d8 	.word	0x000135d8

0000a790 <CGPIOPin::Read() const>:
    a790:	e5903004 	ldr	r3, [r0, #4]
    a794:	e92d4010 	push	{r4, lr}
    a798:	e3530035 	cmp	r3, #53	; 0x35
    a79c:	e1a04000 	mov	r4, r0
    a7a0:	8a000013 	bhi	a7f4 <CGPIOPin::Read() const+0x64>
    a7a4:	e5d43010 	ldrb	r3, [r4, #16]
    a7a8:	e2432002 	sub	r2, r3, #2
    a7ac:	e3530000 	cmp	r3, #0
    a7b0:	13520001 	cmpne	r2, #1
    a7b4:	9a000003 	bls	a7c8 <CGPIOPin::Read() const+0x38>
    a7b8:	e3a020a8 	mov	r2, #168	; 0xa8
    a7bc:	e59f1044 	ldr	r1, [pc, #68]	; a808 <CGPIOPin::Read() const+0x78>
    a7c0:	e59f0044 	ldr	r0, [pc, #68]	; a80c <CGPIOPin::Read() const+0x7c>
    a7c4:	ebfffcb7 	bl	9aa8 <assertion_failed>
    a7c8:	e3a03000 	mov	r3, #0
    a7cc:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    a7d0:	e59f1038 	ldr	r1, [pc, #56]	; a810 <CGPIOPin::Read() const+0x80>
    a7d4:	e5940008 	ldr	r0, [r4, #8]
    a7d8:	e594200c 	ldr	r2, [r4, #12]
    a7dc:	e7901001 	ldr	r1, [r0, r1]
    a7e0:	e1110002 	tst	r1, r2
    a7e4:	13a00001 	movne	r0, #1
    a7e8:	01a00003 	moveq	r0, r3
    a7ec:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    a7f0:	e8bd8010 	pop	{r4, pc}
    a7f4:	e3a020a4 	mov	r2, #164	; 0xa4
    a7f8:	e59f1008 	ldr	r1, [pc, #8]	; a808 <CGPIOPin::Read() const+0x78>
    a7fc:	e59f0010 	ldr	r0, [pc, #16]	; a814 <CGPIOPin::Read() const+0x84>
    a800:	ebfffca8 	bl	9aa8 <assertion_failed>
    a804:	eaffffe6 	b	a7a4 <CGPIOPin::Read() const+0x14>
    a808:	000135b8 	.word	0x000135b8
    a80c:	00013630 	.word	0x00013630
    a810:	20200034 	.word	0x20200034
    a814:	000135d8 	.word	0x000135d8

0000a818 <CGPIOPin::Invert()>:
    a818:	e5d03010 	ldrb	r3, [r0, #16]
    a81c:	e92d4010 	push	{r4, lr}
    a820:	e3530001 	cmp	r3, #1
    a824:	e1a04000 	mov	r4, r0
    a828:	0a000003 	beq	a83c <CGPIOPin::Invert()+0x24>
    a82c:	e3a020b5 	mov	r2, #181	; 0xb5
    a830:	e59f1018 	ldr	r1, [pc, #24]	; a850 <CGPIOPin::Invert()+0x38>
    a834:	e59f0018 	ldr	r0, [pc, #24]	; a854 <CGPIOPin::Invert()+0x3c>
    a838:	ebfffc9a 	bl	9aa8 <assertion_failed>
    a83c:	e5941014 	ldr	r1, [r4, #20]
    a840:	e1a00004 	mov	r0, r4
    a844:	e8bd4010 	pop	{r4, lr}
    a848:	e2211001 	eor	r1, r1, #1
    a84c:	eaffff9f 	b	a6d0 <CGPIOPin::Write(unsigned int)>
    a850:	000135b8 	.word	0x000135b8
    a854:	0001368c 	.word	0x0001368c

0000a858 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)>:
    a858:	e5d03010 	ldrb	r3, [r0, #16]
    a85c:	e92d4070 	push	{r4, r5, r6, lr}
    a860:	e1a05001 	mov	r5, r1
    a864:	e2431002 	sub	r1, r3, #2
    a868:	e3530000 	cmp	r3, #0
    a86c:	13510001 	cmpne	r1, #1
    a870:	e1a04000 	mov	r4, r0
    a874:	e1a06002 	mov	r6, r2
    a878:	9a000003 	bls	a88c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x34>
    a87c:	e3a020be 	mov	r2, #190	; 0xbe
    a880:	e59f10b4 	ldr	r1, [pc, #180]	; a93c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe4>
    a884:	e59f00b4 	ldr	r0, [pc, #180]	; a940 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe8>
    a888:	ebfffc86 	bl	9aa8 <assertion_failed>
    a88c:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    a890:	e3530006 	cmp	r3, #6
    a894:	0a000003 	beq	a8a8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x50>
    a898:	e3a020c0 	mov	r2, #192	; 0xc0
    a89c:	e59f1098 	ldr	r1, [pc, #152]	; a93c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe4>
    a8a0:	e59f009c 	ldr	r0, [pc, #156]	; a944 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xec>
    a8a4:	ebfffc7f 	bl	9aa8 <assertion_failed>
    a8a8:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    a8ac:	e3530006 	cmp	r3, #6
    a8b0:	0a000003 	beq	a8c4 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x6c>
    a8b4:	e3a020c1 	mov	r2, #193	; 0xc1
    a8b8:	e59f107c 	ldr	r1, [pc, #124]	; a93c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe4>
    a8bc:	e59f0084 	ldr	r0, [pc, #132]	; a948 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xf0>
    a8c0:	ebfffc78 	bl	9aa8 <assertion_failed>
    a8c4:	e3550000 	cmp	r5, #0
    a8c8:	0a000016 	beq	a928 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xd0>
    a8cc:	e594301c 	ldr	r3, [r4, #28]
    a8d0:	e3530000 	cmp	r3, #0
    a8d4:	0a000003 	beq	a8e8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x90>
    a8d8:	e3a020c4 	mov	r2, #196	; 0xc4
    a8dc:	e59f1058 	ldr	r1, [pc, #88]	; a93c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe4>
    a8e0:	e59f0064 	ldr	r0, [pc, #100]	; a94c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xf4>
    a8e4:	ebfffc6f 	bl	9aa8 <assertion_failed>
    a8e8:	e5940018 	ldr	r0, [r4, #24]
    a8ec:	e584501c 	str	r5, [r4, #28]
    a8f0:	e3500000 	cmp	r0, #0
    a8f4:	e5846020 	str	r6, [r4, #32]
    a8f8:	0a000002 	beq	a908 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xb0>
    a8fc:	e1a01004 	mov	r1, r4
    a900:	e8bd4070 	pop	{r4, r5, r6, lr}
    a904:	ea001fee 	b	128c4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
    a908:	e59f102c 	ldr	r1, [pc, #44]	; a93c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe4>
    a90c:	e59f003c 	ldr	r0, [pc, #60]	; a950 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xf8>
    a910:	e3a020c9 	mov	r2, #201	; 0xc9
    a914:	ebfffc63 	bl	9aa8 <assertion_failed>
    a918:	e5940018 	ldr	r0, [r4, #24]
    a91c:	e1a01004 	mov	r1, r4
    a920:	e8bd4070 	pop	{r4, r5, r6, lr}
    a924:	ea001fe6 	b	128c4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
    a928:	e3a020c3 	mov	r2, #195	; 0xc3
    a92c:	e59f1008 	ldr	r1, [pc, #8]	; a93c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe4>
    a930:	e59f001c 	ldr	r0, [pc, #28]	; a954 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xfc>
    a934:	ebfffc5b 	bl	9aa8 <assertion_failed>
    a938:	eaffffe3 	b	a8cc <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x74>
    a93c:	000135b8 	.word	0x000135b8
    a940:	00013630 	.word	0x00013630
    a944:	000136a8 	.word	0x000136a8
    a948:	000136cc 	.word	0x000136cc
    a94c:	000136f4 	.word	0x000136f4
    a950:	00013704 	.word	0x00013704
    a954:	00013874 	.word	0x00013874

0000a958 <CGPIOPin::DisconnectInterrupt()>:
    a958:	e5d03010 	ldrb	r3, [r0, #16]
    a95c:	e92d4010 	push	{r4, lr}
    a960:	e2432002 	sub	r2, r3, #2
    a964:	e3530000 	cmp	r3, #0
    a968:	13520001 	cmpne	r2, #1
    a96c:	e1a04000 	mov	r4, r0
    a970:	9a000003 	bls	a984 <CGPIOPin::DisconnectInterrupt()+0x2c>
    a974:	e3a020d1 	mov	r2, #209	; 0xd1
    a978:	e59f109c 	ldr	r1, [pc, #156]	; aa1c <CGPIOPin::DisconnectInterrupt()+0xc4>
    a97c:	e59f009c 	ldr	r0, [pc, #156]	; aa20 <CGPIOPin::DisconnectInterrupt()+0xc8>
    a980:	ebfffc48 	bl	9aa8 <assertion_failed>
    a984:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    a988:	e3530006 	cmp	r3, #6
    a98c:	0a000003 	beq	a9a0 <CGPIOPin::DisconnectInterrupt()+0x48>
    a990:	e3a020d3 	mov	r2, #211	; 0xd3
    a994:	e59f1080 	ldr	r1, [pc, #128]	; aa1c <CGPIOPin::DisconnectInterrupt()+0xc4>
    a998:	e59f0084 	ldr	r0, [pc, #132]	; aa24 <CGPIOPin::DisconnectInterrupt()+0xcc>
    a99c:	ebfffc41 	bl	9aa8 <assertion_failed>
    a9a0:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    a9a4:	e3530006 	cmp	r3, #6
    a9a8:	0a000003 	beq	a9bc <CGPIOPin::DisconnectInterrupt()+0x64>
    a9ac:	e3a020d4 	mov	r2, #212	; 0xd4
    a9b0:	e59f1064 	ldr	r1, [pc, #100]	; aa1c <CGPIOPin::DisconnectInterrupt()+0xc4>
    a9b4:	e59f006c 	ldr	r0, [pc, #108]	; aa28 <CGPIOPin::DisconnectInterrupt()+0xd0>
    a9b8:	ebfffc3a 	bl	9aa8 <assertion_failed>
    a9bc:	e594301c 	ldr	r3, [r4, #28]
    a9c0:	e3530000 	cmp	r3, #0
    a9c4:	0a00000f 	beq	aa08 <CGPIOPin::DisconnectInterrupt()+0xb0>
    a9c8:	e3a03000 	mov	r3, #0
    a9cc:	e5940018 	ldr	r0, [r4, #24]
    a9d0:	e584301c 	str	r3, [r4, #28]
    a9d4:	e1500003 	cmp	r0, r3
    a9d8:	0a000002 	beq	a9e8 <CGPIOPin::DisconnectInterrupt()+0x90>
    a9dc:	e1a01004 	mov	r1, r4
    a9e0:	e8bd4010 	pop	{r4, lr}
    a9e4:	ea001fdf 	b	12968 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
    a9e8:	e59f102c 	ldr	r1, [pc, #44]	; aa1c <CGPIOPin::DisconnectInterrupt()+0xc4>
    a9ec:	e59f0038 	ldr	r0, [pc, #56]	; aa2c <CGPIOPin::DisconnectInterrupt()+0xd4>
    a9f0:	e3a020d9 	mov	r2, #217	; 0xd9
    a9f4:	ebfffc2b 	bl	9aa8 <assertion_failed>
    a9f8:	e5940018 	ldr	r0, [r4, #24]
    a9fc:	e1a01004 	mov	r1, r4
    aa00:	e8bd4010 	pop	{r4, lr}
    aa04:	ea001fd7 	b	12968 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
    aa08:	e3a020d6 	mov	r2, #214	; 0xd6
    aa0c:	e59f1008 	ldr	r1, [pc, #8]	; aa1c <CGPIOPin::DisconnectInterrupt()+0xc4>
    aa10:	e59f0018 	ldr	r0, [pc, #24]	; aa30 <CGPIOPin::DisconnectInterrupt()+0xd8>
    aa14:	ebfffc23 	bl	9aa8 <assertion_failed>
    aa18:	eaffffea 	b	a9c8 <CGPIOPin::DisconnectInterrupt()+0x70>
    aa1c:	000135b8 	.word	0x000135b8
    aa20:	00013630 	.word	0x00013630
    aa24:	000136a8 	.word	0x000136a8
    aa28:	000136cc 	.word	0x000136cc
    aa2c:	00013704 	.word	0x00013704
    aa30:	00013714 	.word	0x00013714

0000aa34 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)>:
    aa34:	e5d03010 	ldrb	r3, [r0, #16]
    aa38:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    aa3c:	e2432002 	sub	r2, r3, #2
    aa40:	e3530000 	cmp	r3, #0
    aa44:	13520001 	cmpne	r2, #1
    aa48:	e1a04000 	mov	r4, r0
    aa4c:	e1a05001 	mov	r5, r1
    aa50:	9a000003 	bls	aa64 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x30>
    aa54:	e3a020e1 	mov	r2, #225	; 0xe1
    aa58:	e59f10d8 	ldr	r1, [pc, #216]	; ab38 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x104>
    aa5c:	e59f00d8 	ldr	r0, [pc, #216]	; ab3c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x108>
    aa60:	ebfffc10 	bl	9aa8 <assertion_failed>
    aa64:	e594301c 	ldr	r3, [r4, #28]
    aa68:	e3530000 	cmp	r3, #0
    aa6c:	0a00002c 	beq	ab24 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf0>
    aa70:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    aa74:	e3530006 	cmp	r3, #6
    aa78:	0a000003 	beq	aa8c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x58>
    aa7c:	e3a020e4 	mov	r2, #228	; 0xe4
    aa80:	e59f10b0 	ldr	r1, [pc, #176]	; ab38 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x104>
    aa84:	e59f00b4 	ldr	r0, [pc, #180]	; ab40 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x10c>
    aa88:	ebfffc06 	bl	9aa8 <assertion_failed>
    aa8c:	e3550005 	cmp	r5, #5
    aa90:	ca000017 	bgt	aaf4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xc0>
    aa94:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    aa98:	e1530005 	cmp	r3, r5
    aa9c:	0a00001b 	beq	ab10 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xdc>
    aaa0:	e59f709c 	ldr	r7, [pc, #156]	; ab44 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x110>
    aaa4:	e5942008 	ldr	r2, [r4, #8]
    aaa8:	e5970000 	ldr	r0, [r7]
    aaac:	e59f6094 	ldr	r6, [pc, #148]	; ab48 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x114>
    aab0:	e0853085 	add	r3, r5, r5, lsl #1
    aab4:	e3500000 	cmp	r0, #0
    aab8:	e5c45024 	strb	r5, [r4, #36]	; 0x24
    aabc:	e0826006 	add	r6, r2, r6
    aac0:	e1a05103 	lsl	r5, r3, #2
    aac4:	1a000008 	bne	aaec <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xb8>
    aac8:	e594200c 	ldr	r2, [r4, #12]
    aacc:	e7963005 	ldr	r3, [r6, r5]
    aad0:	e1833002 	orr	r3, r3, r2
    aad4:	e7863005 	str	r3, [r6, r5]
    aad8:	e5973000 	ldr	r3, [r7]
    aadc:	e3530000 	cmp	r3, #0
    aae0:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    aae4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    aae8:	ea001bbc 	b	119e0 <LeaveCritical>
    aaec:	eb001b8e 	bl	1192c <EnterCritical>
    aaf0:	eafffff4 	b	aac8 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x94>
    aaf4:	e3a020e5 	mov	r2, #229	; 0xe5
    aaf8:	e59f1038 	ldr	r1, [pc, #56]	; ab38 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x104>
    aafc:	e59f0048 	ldr	r0, [pc, #72]	; ab4c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x118>
    ab00:	ebfffbe8 	bl	9aa8 <assertion_failed>
    ab04:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    ab08:	e1530005 	cmp	r3, r5
    ab0c:	1affffe3 	bne	aaa0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x6c>
    ab10:	e3a020e6 	mov	r2, #230	; 0xe6
    ab14:	e59f101c 	ldr	r1, [pc, #28]	; ab38 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x104>
    ab18:	e59f0030 	ldr	r0, [pc, #48]	; ab50 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x11c>
    ab1c:	ebfffbe1 	bl	9aa8 <assertion_failed>
    ab20:	eaffffde 	b	aaa0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x6c>
    ab24:	e3a020e2 	mov	r2, #226	; 0xe2
    ab28:	e59f1008 	ldr	r1, [pc, #8]	; ab38 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x104>
    ab2c:	e59f0020 	ldr	r0, [pc, #32]	; ab54 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x120>
    ab30:	ebfffbdc 	bl	9aa8 <assertion_failed>
    ab34:	eaffffcd 	b	aa70 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x3c>
    ab38:	000135b8 	.word	0x000135b8
    ab3c:	00013630 	.word	0x00013630
    ab40:	000136a8 	.word	0x000136a8
    ab44:	00015338 	.word	0x00015338
    ab48:	2020004c 	.word	0x2020004c
    ab4c:	00013724 	.word	0x00013724
    ab50:	00013748 	.word	0x00013748
    ab54:	00013714 	.word	0x00013714

0000ab58 <CGPIOPin::DisableInterrupt()>:
    ab58:	e5d03010 	ldrb	r3, [r0, #16]
    ab5c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    ab60:	e2432002 	sub	r2, r3, #2
    ab64:	e3530000 	cmp	r3, #0
    ab68:	13520001 	cmpne	r2, #1
    ab6c:	e1a05000 	mov	r5, r0
    ab70:	9a000003 	bls	ab84 <CGPIOPin::DisableInterrupt()+0x2c>
    ab74:	e3a020f7 	mov	r2, #247	; 0xf7
    ab78:	e59f1080 	ldr	r1, [pc, #128]	; ac00 <CGPIOPin::DisableInterrupt()+0xa8>
    ab7c:	e59f0080 	ldr	r0, [pc, #128]	; ac04 <CGPIOPin::DisableInterrupt()+0xac>
    ab80:	ebfffbc8 	bl	9aa8 <assertion_failed>
    ab84:	e5d53024 	ldrb	r3, [r5, #36]	; 0x24
    ab88:	e3530005 	cmp	r3, #5
    ab8c:	ca000015 	bgt	abe8 <CGPIOPin::DisableInterrupt()+0x90>
    ab90:	e59f7070 	ldr	r7, [pc, #112]	; ac08 <CGPIOPin::DisableInterrupt()+0xb0>
    ab94:	e5952008 	ldr	r2, [r5, #8]
    ab98:	e5970000 	ldr	r0, [r7]
    ab9c:	e59f6068 	ldr	r6, [pc, #104]	; ac0c <CGPIOPin::DisableInterrupt()+0xb4>
    aba0:	e0833083 	add	r3, r3, r3, lsl #1
    aba4:	e3500000 	cmp	r0, #0
    aba8:	e1a04103 	lsl	r4, r3, #2
    abac:	e0826006 	add	r6, r2, r6
    abb0:	1a00000a 	bne	abe0 <CGPIOPin::DisableInterrupt()+0x88>
    abb4:	e7963004 	ldr	r3, [r6, r4]
    abb8:	e595200c 	ldr	r2, [r5, #12]
    abbc:	e1c33002 	bic	r3, r3, r2
    abc0:	e7863004 	str	r3, [r6, r4]
    abc4:	e5973000 	ldr	r3, [r7]
    abc8:	e3530000 	cmp	r3, #0
    abcc:	0a000000 	beq	abd4 <CGPIOPin::DisableInterrupt()+0x7c>
    abd0:	eb001b82 	bl	119e0 <LeaveCritical>
    abd4:	e3a03006 	mov	r3, #6
    abd8:	e5c53024 	strb	r3, [r5, #36]	; 0x24
    abdc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    abe0:	eb001b51 	bl	1192c <EnterCritical>
    abe4:	eafffff2 	b	abb4 <CGPIOPin::DisableInterrupt()+0x5c>
    abe8:	e3a020f9 	mov	r2, #249	; 0xf9
    abec:	e59f100c 	ldr	r1, [pc, #12]	; ac00 <CGPIOPin::DisableInterrupt()+0xa8>
    abf0:	e59f0018 	ldr	r0, [pc, #24]	; ac10 <CGPIOPin::DisableInterrupt()+0xb8>
    abf4:	ebfffbab 	bl	9aa8 <assertion_failed>
    abf8:	e5d53024 	ldrb	r3, [r5, #36]	; 0x24
    abfc:	eaffffe3 	b	ab90 <CGPIOPin::DisableInterrupt()+0x38>
    ac00:	000135b8 	.word	0x000135b8
    ac04:	00013630 	.word	0x00013630
    ac08:	00015338 	.word	0x00015338
    ac0c:	2020004c 	.word	0x2020004c
    ac10:	00013764 	.word	0x00013764

0000ac14 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)>:
    ac14:	e5d03010 	ldrb	r3, [r0, #16]
    ac18:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    ac1c:	e2432002 	sub	r2, r3, #2
    ac20:	e3530000 	cmp	r3, #0
    ac24:	13520001 	cmpne	r2, #1
    ac28:	e1a04000 	mov	r4, r0
    ac2c:	e1a05001 	mov	r5, r1
    ac30:	9a000003 	bls	ac44 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x30>
    ac34:	e59f20dc 	ldr	r2, [pc, #220]	; ad18 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x104>
    ac38:	e59f10dc 	ldr	r1, [pc, #220]	; ad1c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x108>
    ac3c:	e59f00dc 	ldr	r0, [pc, #220]	; ad20 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x10c>
    ac40:	ebfffb98 	bl	9aa8 <assertion_failed>
    ac44:	e594301c 	ldr	r3, [r4, #28]
    ac48:	e3530000 	cmp	r3, #0
    ac4c:	0a00002c 	beq	ad04 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf0>
    ac50:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    ac54:	e3530006 	cmp	r3, #6
    ac58:	0a000003 	beq	ac6c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x58>
    ac5c:	e59f20c0 	ldr	r2, [pc, #192]	; ad24 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x110>
    ac60:	e59f10b4 	ldr	r1, [pc, #180]	; ad1c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x108>
    ac64:	e59f00bc 	ldr	r0, [pc, #188]	; ad28 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x114>
    ac68:	ebfffb8e 	bl	9aa8 <assertion_failed>
    ac6c:	e3550005 	cmp	r5, #5
    ac70:	ca000017 	bgt	acd4 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xc0>
    ac74:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    ac78:	e1530005 	cmp	r3, r5
    ac7c:	0a00001b 	beq	acf0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xdc>
    ac80:	e59f70a4 	ldr	r7, [pc, #164]	; ad2c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x118>
    ac84:	e5942008 	ldr	r2, [r4, #8]
    ac88:	e5970000 	ldr	r0, [r7]
    ac8c:	e59f609c 	ldr	r6, [pc, #156]	; ad30 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x11c>
    ac90:	e0853085 	add	r3, r5, r5, lsl #1
    ac94:	e3500000 	cmp	r0, #0
    ac98:	e5c45025 	strb	r5, [r4, #37]	; 0x25
    ac9c:	e0826006 	add	r6, r2, r6
    aca0:	e1a05103 	lsl	r5, r3, #2
    aca4:	1a000008 	bne	accc <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xb8>
    aca8:	e594200c 	ldr	r2, [r4, #12]
    acac:	e7963005 	ldr	r3, [r6, r5]
    acb0:	e1833002 	orr	r3, r3, r2
    acb4:	e7863005 	str	r3, [r6, r5]
    acb8:	e5973000 	ldr	r3, [r7]
    acbc:	e3530000 	cmp	r3, #0
    acc0:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    acc4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    acc8:	ea001b44 	b	119e0 <LeaveCritical>
    accc:	eb001b16 	bl	1192c <EnterCritical>
    acd0:	eafffff4 	b	aca8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x94>
    acd4:	e59f2058 	ldr	r2, [pc, #88]	; ad34 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x120>
    acd8:	e59f103c 	ldr	r1, [pc, #60]	; ad1c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x108>
    acdc:	e59f0054 	ldr	r0, [pc, #84]	; ad38 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x124>
    ace0:	ebfffb70 	bl	9aa8 <assertion_failed>
    ace4:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    ace8:	e1530005 	cmp	r3, r5
    acec:	1affffe3 	bne	ac80 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x6c>
    acf0:	e59f2044 	ldr	r2, [pc, #68]	; ad3c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x128>
    acf4:	e59f1020 	ldr	r1, [pc, #32]	; ad1c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x108>
    acf8:	e59f0040 	ldr	r0, [pc, #64]	; ad40 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x12c>
    acfc:	ebfffb69 	bl	9aa8 <assertion_failed>
    ad00:	eaffffde 	b	ac80 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x6c>
    ad04:	e59f2038 	ldr	r2, [pc, #56]	; ad44 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x130>
    ad08:	e59f100c 	ldr	r1, [pc, #12]	; ad1c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x108>
    ad0c:	e59f0034 	ldr	r0, [pc, #52]	; ad48 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x134>
    ad10:	ebfffb64 	bl	9aa8 <assertion_failed>
    ad14:	eaffffcd 	b	ac50 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x3c>
    ad18:	0000010a 	.word	0x0000010a
    ad1c:	000135b8 	.word	0x000135b8
    ad20:	00013630 	.word	0x00013630
    ad24:	0000010d 	.word	0x0000010d
    ad28:	000136cc 	.word	0x000136cc
    ad2c:	00015338 	.word	0x00015338
    ad30:	2020004c 	.word	0x2020004c
    ad34:	0000010e 	.word	0x0000010e
    ad38:	00013724 	.word	0x00013724
    ad3c:	0000010f 	.word	0x0000010f
    ad40:	00013788 	.word	0x00013788
    ad44:	0000010b 	.word	0x0000010b
    ad48:	00013714 	.word	0x00013714

0000ad4c <CGPIOPin::DisableInterrupt2()>:
    ad4c:	e5d03010 	ldrb	r3, [r0, #16]
    ad50:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    ad54:	e2432002 	sub	r2, r3, #2
    ad58:	e3530000 	cmp	r3, #0
    ad5c:	13520001 	cmpne	r2, #1
    ad60:	e1a05000 	mov	r5, r0
    ad64:	9a000003 	bls	ad78 <CGPIOPin::DisableInterrupt2()+0x2c>
    ad68:	e3a02e12 	mov	r2, #288	; 0x120
    ad6c:	e59f1080 	ldr	r1, [pc, #128]	; adf4 <CGPIOPin::DisableInterrupt2()+0xa8>
    ad70:	e59f0080 	ldr	r0, [pc, #128]	; adf8 <CGPIOPin::DisableInterrupt2()+0xac>
    ad74:	ebfffb4b 	bl	9aa8 <assertion_failed>
    ad78:	e5d53025 	ldrb	r3, [r5, #37]	; 0x25
    ad7c:	e3530005 	cmp	r3, #5
    ad80:	ca000015 	bgt	addc <CGPIOPin::DisableInterrupt2()+0x90>
    ad84:	e59f7070 	ldr	r7, [pc, #112]	; adfc <CGPIOPin::DisableInterrupt2()+0xb0>
    ad88:	e5952008 	ldr	r2, [r5, #8]
    ad8c:	e5970000 	ldr	r0, [r7]
    ad90:	e59f6068 	ldr	r6, [pc, #104]	; ae00 <CGPIOPin::DisableInterrupt2()+0xb4>
    ad94:	e0833083 	add	r3, r3, r3, lsl #1
    ad98:	e3500000 	cmp	r0, #0
    ad9c:	e1a04103 	lsl	r4, r3, #2
    ada0:	e0826006 	add	r6, r2, r6
    ada4:	1a00000a 	bne	add4 <CGPIOPin::DisableInterrupt2()+0x88>
    ada8:	e7963004 	ldr	r3, [r6, r4]
    adac:	e595200c 	ldr	r2, [r5, #12]
    adb0:	e1c33002 	bic	r3, r3, r2
    adb4:	e7863004 	str	r3, [r6, r4]
    adb8:	e5973000 	ldr	r3, [r7]
    adbc:	e3530000 	cmp	r3, #0
    adc0:	0a000000 	beq	adc8 <CGPIOPin::DisableInterrupt2()+0x7c>
    adc4:	eb001b05 	bl	119e0 <LeaveCritical>
    adc8:	e3a03006 	mov	r3, #6
    adcc:	e5c53025 	strb	r3, [r5, #37]	; 0x25
    add0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    add4:	eb001ad4 	bl	1192c <EnterCritical>
    add8:	eafffff2 	b	ada8 <CGPIOPin::DisableInterrupt2()+0x5c>
    addc:	e59f2020 	ldr	r2, [pc, #32]	; ae04 <CGPIOPin::DisableInterrupt2()+0xb8>
    ade0:	e59f100c 	ldr	r1, [pc, #12]	; adf4 <CGPIOPin::DisableInterrupt2()+0xa8>
    ade4:	e59f001c 	ldr	r0, [pc, #28]	; ae08 <CGPIOPin::DisableInterrupt2()+0xbc>
    ade8:	ebfffb2e 	bl	9aa8 <assertion_failed>
    adec:	e5d53025 	ldrb	r3, [r5, #37]	; 0x25
    adf0:	eaffffe3 	b	ad84 <CGPIOPin::DisableInterrupt2()+0x38>
    adf4:	000135b8 	.word	0x000135b8
    adf8:	00013630 	.word	0x00013630
    adfc:	00015338 	.word	0x00015338
    ae00:	2020004c 	.word	0x2020004c
    ae04:	00000122 	.word	0x00000122
    ae08:	000137a4 	.word	0x000137a4

0000ae0c <CGPIOPin::ReadAll()>:
    ae0c:	e59f3004 	ldr	r3, [pc, #4]	; ae18 <CGPIOPin::ReadAll()+0xc>
    ae10:	e5930034 	ldr	r0, [r3, #52]	; 0x34
    ae14:	e12fff1e 	bx	lr
    ae18:	20200000 	.word	0x20200000

0000ae1c <CGPIOPin::SetPullUpMode(unsigned int)>:
    ae1c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    ae20:	e1a08000 	mov	r8, r0
    ae24:	e59f4078 	ldr	r4, [pc, #120]	; aea4 <CGPIOPin::SetPullUpMode(unsigned int)+0x88>
    ae28:	e1a09001 	mov	r9, r1
    ae2c:	e5940000 	ldr	r0, [r4]
    ae30:	e5986008 	ldr	r6, [r8, #8]
    ae34:	e3500000 	cmp	r0, #0
    ae38:	e59f5068 	ldr	r5, [pc, #104]	; aea8 <CGPIOPin::SetPullUpMode(unsigned int)+0x8c>
    ae3c:	1a000016 	bne	ae9c <CGPIOPin::SetPullUpMode(unsigned int)+0x80>
    ae40:	e3590002 	cmp	r9, #2
    ae44:	8a00000f 	bhi	ae88 <CGPIOPin::SetPullUpMode(unsigned int)+0x6c>
    ae48:	e59f705c 	ldr	r7, [pc, #92]	; aeac <CGPIOPin::SetPullUpMode(unsigned int)+0x90>
    ae4c:	e3a00005 	mov	r0, #5
    ae50:	e5879094 	str	r9, [r7, #148]	; 0x94
    ae54:	eb00165f 	bl	107d8 <CTimer::SimpleusDelay(unsigned int)>
    ae58:	e598300c 	ldr	r3, [r8, #12]
    ae5c:	e3a00005 	mov	r0, #5
    ae60:	e7863005 	str	r3, [r6, r5]
    ae64:	eb00165b 	bl	107d8 <CTimer::SimpleusDelay(unsigned int)>
    ae68:	e3a03000 	mov	r3, #0
    ae6c:	e5873094 	str	r3, [r7, #148]	; 0x94
    ae70:	e7863005 	str	r3, [r6, r5]
    ae74:	e5943000 	ldr	r3, [r4]
    ae78:	e3530000 	cmp	r3, #0
    ae7c:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    ae80:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    ae84:	ea001ad5 	b	119e0 <LeaveCritical>
    ae88:	e59f2020 	ldr	r2, [pc, #32]	; aeb0 <CGPIOPin::SetPullUpMode(unsigned int)+0x94>
    ae8c:	e59f1020 	ldr	r1, [pc, #32]	; aeb4 <CGPIOPin::SetPullUpMode(unsigned int)+0x98>
    ae90:	e59f0020 	ldr	r0, [pc, #32]	; aeb8 <CGPIOPin::SetPullUpMode(unsigned int)+0x9c>
    ae94:	ebfffb03 	bl	9aa8 <assertion_failed>
    ae98:	eaffffea 	b	ae48 <CGPIOPin::SetPullUpMode(unsigned int)+0x2c>
    ae9c:	eb001aa2 	bl	1192c <EnterCritical>
    aea0:	eaffffe6 	b	ae40 <CGPIOPin::SetPullUpMode(unsigned int)+0x24>
    aea4:	00015338 	.word	0x00015338
    aea8:	20200098 	.word	0x20200098
    aeac:	20200000 	.word	0x20200000
    aeb0:	0000013b 	.word	0x0000013b
    aeb4:	000135b8 	.word	0x000135b8
    aeb8:	000137c8 	.word	0x000137c8

0000aebc <CGPIOPin::SetAlternateFunction(unsigned int)>:
    aebc:	e5902004 	ldr	r2, [r0, #4]
    aec0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    aec4:	e3520035 	cmp	r2, #53	; 0x35
    aec8:	e1a06001 	mov	r6, r1
    aecc:	8a000022 	bhi	af5c <CGPIOPin::SetAlternateFunction(unsigned int)+0xa0>
    aed0:	e59f30a0 	ldr	r3, [pc, #160]	; af78 <CGPIOPin::SetAlternateFunction(unsigned int)+0xbc>
    aed4:	e3560005 	cmp	r6, #5
    aed8:	e0831293 	umull	r1, r3, r3, r2
    aedc:	e1a031a3 	lsr	r3, r3, #3
    aee0:	e2835302 	add	r5, r3, #134217728	; 0x8000000
    aee4:	e0833103 	add	r3, r3, r3, lsl #2
    aee8:	e2855702 	add	r5, r5, #524288	; 0x80000
    aeec:	e0423083 	sub	r3, r2, r3, lsl #1
    aef0:	e1a05105 	lsl	r5, r5, #2
    aef4:	e0834083 	add	r4, r3, r3, lsl #1
    aef8:	8a000012 	bhi	af48 <CGPIOPin::SetAlternateFunction(unsigned int)+0x8c>
    aefc:	e59f7078 	ldr	r7, [pc, #120]	; af7c <CGPIOPin::SetAlternateFunction(unsigned int)+0xc0>
    af00:	e5970000 	ldr	r0, [r7]
    af04:	e3500000 	cmp	r0, #0
    af08:	1a00000c 	bne	af40 <CGPIOPin::SetAlternateFunction(unsigned int)+0x84>
    af0c:	e3a01007 	mov	r1, #7
    af10:	e59f3068 	ldr	r3, [pc, #104]	; af80 <CGPIOPin::SetAlternateFunction(unsigned int)+0xc4>
    af14:	e5952000 	ldr	r2, [r5]
    af18:	e0836106 	add	r6, r3, r6, lsl #2
    af1c:	e5963010 	ldr	r3, [r6, #16]
    af20:	e1c22411 	bic	r2, r2, r1, lsl r4
    af24:	e1824413 	orr	r4, r2, r3, lsl r4
    af28:	e5854000 	str	r4, [r5]
    af2c:	e5973000 	ldr	r3, [r7]
    af30:	e3530000 	cmp	r3, #0
    af34:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    af38:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    af3c:	ea001aa7 	b	119e0 <LeaveCritical>
    af40:	eb001a79 	bl	1192c <EnterCritical>
    af44:	eafffff0 	b	af0c <CGPIOPin::SetAlternateFunction(unsigned int)+0x50>
    af48:	e3a02f53 	mov	r2, #332	; 0x14c
    af4c:	e59f1030 	ldr	r1, [pc, #48]	; af84 <CGPIOPin::SetAlternateFunction(unsigned int)+0xc8>
    af50:	e59f0030 	ldr	r0, [pc, #48]	; af88 <CGPIOPin::SetAlternateFunction(unsigned int)+0xcc>
    af54:	ebfffad3 	bl	9aa8 <assertion_failed>
    af58:	eaffffe7 	b	aefc <CGPIOPin::SetAlternateFunction(unsigned int)+0x40>
    af5c:	e1a04000 	mov	r4, r0
    af60:	e3a02f52 	mov	r2, #328	; 0x148
    af64:	e59f1018 	ldr	r1, [pc, #24]	; af84 <CGPIOPin::SetAlternateFunction(unsigned int)+0xc8>
    af68:	e59f001c 	ldr	r0, [pc, #28]	; af8c <CGPIOPin::SetAlternateFunction(unsigned int)+0xd0>
    af6c:	ebfffacd 	bl	9aa8 <assertion_failed>
    af70:	e5942004 	ldr	r2, [r4, #4]
    af74:	eaffffd5 	b	aed0 <CGPIOPin::SetAlternateFunction(unsigned int)+0x14>
    af78:	cccccccd 	.word	0xcccccccd
    af7c:	00015338 	.word	0x00015338
    af80:	00013590 	.word	0x00013590
    af84:	000135b8 	.word	0x000135b8
    af88:	000137d4 	.word	0x000137d4
    af8c:	000135d8 	.word	0x000135d8

0000af90 <CGPIOPin::SetMode(TGPIOMode, bool)>:
    af90:	e3510009 	cmp	r1, #9
    af94:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    af98:	e1a05001 	mov	r5, r1
    af9c:	e1a04000 	mov	r4, r0
    afa0:	e1a06002 	mov	r6, r2
    afa4:	ca00003f 	bgt	b0a8 <CGPIOPin::SetMode(TGPIOMode, bool)+0x118>
    afa8:	e5c45010 	strb	r5, [r4, #16]
    afac:	e3a02000 	mov	r2, #0
    afb0:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
    afb4:	e5d43010 	ldrb	r3, [r4, #16]
    afb8:	e2431004 	sub	r1, r3, #4
    afbc:	e6ef0071 	uxtb	r0, r1
    afc0:	e3500005 	cmp	r0, #5
    afc4:	9a000030 	bls	b08c <CGPIOPin::SetMode(TGPIOMode, bool)+0xfc>
    afc8:	e3530001 	cmp	r3, #1
    afcc:	13a03000 	movne	r3, #0
    afd0:	02063001 	andeq	r3, r6, #1
    afd4:	e3530000 	cmp	r3, #0
    afd8:	1a000055 	bne	b134 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1a4>
    afdc:	e5943004 	ldr	r3, [r4, #4]
    afe0:	e3530035 	cmp	r3, #53	; 0x35
    afe4:	8a00003a 	bhi	b0d4 <CGPIOPin::SetMode(TGPIOMode, bool)+0x144>
    afe8:	e59f5154 	ldr	r5, [pc, #340]	; b144 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1b4>
    afec:	e59f8154 	ldr	r8, [pc, #340]	; b148 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1b8>
    aff0:	e0852395 	umull	r2, r5, r5, r3
    aff4:	e5980000 	ldr	r0, [r8]
    aff8:	e1a051a5 	lsr	r5, r5, #3
    affc:	e2857302 	add	r7, r5, #134217728	; 0x8000000
    b000:	e0855105 	add	r5, r5, r5, lsl #2
    b004:	e2877702 	add	r7, r7, #524288	; 0x80000
    b008:	e0435085 	sub	r5, r3, r5, lsl #1
    b00c:	e3500000 	cmp	r0, #0
    b010:	e1a07107 	lsl	r7, r7, #2
    b014:	e0855085 	add	r5, r5, r5, lsl #1
    b018:	1a000033 	bne	b0ec <CGPIOPin::SetMode(TGPIOMode, bool)+0x15c>
    b01c:	e5d42010 	ldrb	r2, [r4, #16]
    b020:	e3a01007 	mov	r1, #7
    b024:	e2422001 	sub	r2, r2, #1
    b028:	e16f2f12 	clz	r2, r2
    b02c:	e5973000 	ldr	r3, [r7]
    b030:	e1a022a2 	lsr	r2, r2, #5
    b034:	e1c33511 	bic	r3, r3, r1, lsl r5
    b038:	e1835512 	orr	r5, r3, r2, lsl r5
    b03c:	e5875000 	str	r5, [r7]
    b040:	e5983000 	ldr	r3, [r8]
    b044:	e3530000 	cmp	r3, #0
    b048:	1a000029 	bne	b0f4 <CGPIOPin::SetMode(TGPIOMode, bool)+0x164>
    b04c:	e3560000 	cmp	r6, #0
    b050:	0a00000a 	beq	b080 <CGPIOPin::SetMode(TGPIOMode, bool)+0xf0>
    b054:	e5d43010 	ldrb	r3, [r4, #16]
    b058:	e3530003 	cmp	r3, #3
    b05c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    b060:	ea000006 	b	b080 <CGPIOPin::SetMode(TGPIOMode, bool)+0xf0>
    b064:	0000b124 	.word	0x0000b124
    b068:	0000b114 	.word	0x0000b114
    b06c:	0000b104 	.word	0x0000b104
    b070:	0000b074 	.word	0x0000b074
    b074:	e1a00004 	mov	r0, r4
    b078:	e3a01001 	mov	r1, #1
    b07c:	ebffff66 	bl	ae1c <CGPIOPin::SetPullUpMode(unsigned int)>
    b080:	e3a03000 	mov	r3, #0
    b084:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    b088:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    b08c:	e1560002 	cmp	r6, r2
    b090:	1a000009 	bne	b0bc <CGPIOPin::SetMode(TGPIOMode, bool)+0x12c>
    b094:	e1a00004 	mov	r0, r4
    b098:	ebffff87 	bl	aebc <CGPIOPin::SetAlternateFunction(unsigned int)>
    b09c:	e3a03000 	mov	r3, #0
    b0a0:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    b0a4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    b0a8:	e3a0204f 	mov	r2, #79	; 0x4f
    b0ac:	e59f1098 	ldr	r1, [pc, #152]	; b14c <CGPIOPin::SetMode(TGPIOMode, bool)+0x1bc>
    b0b0:	e59f0098 	ldr	r0, [pc, #152]	; b150 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1c0>
    b0b4:	ebfffa7b 	bl	9aa8 <assertion_failed>
    b0b8:	eaffffba 	b	afa8 <CGPIOPin::SetMode(TGPIOMode, bool)+0x18>
    b0bc:	e1a01002 	mov	r1, r2
    b0c0:	e1a00004 	mov	r0, r4
    b0c4:	ebffff54 	bl	ae1c <CGPIOPin::SetPullUpMode(unsigned int)>
    b0c8:	e5d43010 	ldrb	r3, [r4, #16]
    b0cc:	e2431004 	sub	r1, r3, #4
    b0d0:	eaffffef 	b	b094 <CGPIOPin::SetMode(TGPIOMode, bool)+0x104>
    b0d4:	e3a02068 	mov	r2, #104	; 0x68
    b0d8:	e59f106c 	ldr	r1, [pc, #108]	; b14c <CGPIOPin::SetMode(TGPIOMode, bool)+0x1bc>
    b0dc:	e59f0070 	ldr	r0, [pc, #112]	; b154 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1c4>
    b0e0:	ebfffa70 	bl	9aa8 <assertion_failed>
    b0e4:	e5943004 	ldr	r3, [r4, #4]
    b0e8:	eaffffbe 	b	afe8 <CGPIOPin::SetMode(TGPIOMode, bool)+0x58>
    b0ec:	eb001a0e 	bl	1192c <EnterCritical>
    b0f0:	eaffffc9 	b	b01c <CGPIOPin::SetMode(TGPIOMode, bool)+0x8c>
    b0f4:	eb001a39 	bl	119e0 <LeaveCritical>
    b0f8:	e3560000 	cmp	r6, #0
    b0fc:	0affffdf 	beq	b080 <CGPIOPin::SetMode(TGPIOMode, bool)+0xf0>
    b100:	eaffffd3 	b	b054 <CGPIOPin::SetMode(TGPIOMode, bool)+0xc4>
    b104:	e1a00004 	mov	r0, r4
    b108:	e3a01002 	mov	r1, #2
    b10c:	ebffff42 	bl	ae1c <CGPIOPin::SetPullUpMode(unsigned int)>
    b110:	eaffffda 	b	b080 <CGPIOPin::SetMode(TGPIOMode, bool)+0xf0>
    b114:	e1a00004 	mov	r0, r4
    b118:	e3a01000 	mov	r1, #0
    b11c:	ebfffd6b 	bl	a6d0 <CGPIOPin::Write(unsigned int)>
    b120:	eaffffd6 	b	b080 <CGPIOPin::SetMode(TGPIOMode, bool)+0xf0>
    b124:	e1a00004 	mov	r0, r4
    b128:	e3a01000 	mov	r1, #0
    b12c:	ebffff3a 	bl	ae1c <CGPIOPin::SetPullUpMode(unsigned int)>
    b130:	eaffffd2 	b	b080 <CGPIOPin::SetMode(TGPIOMode, bool)+0xf0>
    b134:	e1a01002 	mov	r1, r2
    b138:	e1a00004 	mov	r0, r4
    b13c:	ebffff36 	bl	ae1c <CGPIOPin::SetPullUpMode(unsigned int)>
    b140:	eaffffa5 	b	afdc <CGPIOPin::SetMode(TGPIOMode, bool)+0x4c>
    b144:	cccccccd 	.word	0xcccccccd
    b148:	00015338 	.word	0x00015338
    b14c:	000135b8 	.word	0x000135b8
    b150:	000137e4 	.word	0x000137e4
    b154:	000135d8 	.word	0x000135d8

0000b158 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>:
    b158:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b15c:	e3a0c006 	mov	ip, #6
    b160:	e3a0e000 	mov	lr, #0
    b164:	e3a07036 	mov	r7, #54	; 0x36
    b168:	e3a0600a 	mov	r6, #10
    b16c:	e1a04000 	mov	r4, r0
    b170:	e1a05002 	mov	r5, r2
    b174:	e5803018 	str	r3, [r0, #24]
    b178:	e59f302c 	ldr	r3, [pc, #44]	; b1ac <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x54>
    b17c:	e580e01c 	str	lr, [r0, #28]
    b180:	e8800088 	stm	r0, {r3, r7}
    b184:	e5c0c024 	strb	ip, [r0, #36]	; 0x24
    b188:	e5c0c025 	strb	ip, [r0, #37]	; 0x25
    b18c:	e5c06010 	strb	r6, [r0, #16]
    b190:	ebfffd29 	bl	a63c <CGPIOPin::AssignPin(unsigned int)>
    b194:	e1a00004 	mov	r0, r4
    b198:	e1a01005 	mov	r1, r5
    b19c:	e3a02001 	mov	r2, #1
    b1a0:	ebffff7a 	bl	af90 <CGPIOPin::SetMode(TGPIOMode, bool)>
    b1a4:	e1a00004 	mov	r0, r4
    b1a8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    b1ac:	00013598 	.word	0x00013598

0000b1b0 <CGPIOPin::InterruptHandler()>:
    b1b0:	e5d03010 	ldrb	r3, [r0, #16]
    b1b4:	e92d4010 	push	{r4, lr}
    b1b8:	e2432002 	sub	r2, r3, #2
    b1bc:	e3530000 	cmp	r3, #0
    b1c0:	13520001 	cmpne	r2, #1
    b1c4:	e1a04000 	mov	r4, r0
    b1c8:	9a000003 	bls	b1dc <CGPIOPin::InterruptHandler()+0x2c>
    b1cc:	e59f2074 	ldr	r2, [pc, #116]	; b248 <CGPIOPin::InterruptHandler()+0x98>
    b1d0:	e59f1074 	ldr	r1, [pc, #116]	; b24c <CGPIOPin::InterruptHandler()+0x9c>
    b1d4:	e59f0074 	ldr	r0, [pc, #116]	; b250 <CGPIOPin::InterruptHandler()+0xa0>
    b1d8:	ebfffa32 	bl	9aa8 <assertion_failed>
    b1dc:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    b1e0:	e3530005 	cmp	r3, #5
    b1e4:	da000002 	ble	b1f4 <CGPIOPin::InterruptHandler()+0x44>
    b1e8:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    b1ec:	e3530005 	cmp	r3, #5
    b1f0:	ca000005 	bgt	b20c <CGPIOPin::InterruptHandler()+0x5c>
    b1f4:	e594301c 	ldr	r3, [r4, #28]
    b1f8:	e3530000 	cmp	r3, #0
    b1fc:	0a000009 	beq	b228 <CGPIOPin::InterruptHandler()+0x78>
    b200:	e5940020 	ldr	r0, [r4, #32]
    b204:	e8bd4010 	pop	{r4, lr}
    b208:	e12fff13 	bx	r3
    b20c:	e59f2040 	ldr	r2, [pc, #64]	; b254 <CGPIOPin::InterruptHandler()+0xa4>
    b210:	e59f1034 	ldr	r1, [pc, #52]	; b24c <CGPIOPin::InterruptHandler()+0x9c>
    b214:	e59f003c 	ldr	r0, [pc, #60]	; b258 <CGPIOPin::InterruptHandler()+0xa8>
    b218:	ebfffa22 	bl	9aa8 <assertion_failed>
    b21c:	e594301c 	ldr	r3, [r4, #28]
    b220:	e3530000 	cmp	r3, #0
    b224:	1afffff5 	bne	b200 <CGPIOPin::InterruptHandler()+0x50>
    b228:	e59f002c 	ldr	r0, [pc, #44]	; b25c <CGPIOPin::InterruptHandler()+0xac>
    b22c:	e59f202c 	ldr	r2, [pc, #44]	; b260 <CGPIOPin::InterruptHandler()+0xb0>
    b230:	e59f1014 	ldr	r1, [pc, #20]	; b24c <CGPIOPin::InterruptHandler()+0x9c>
    b234:	ebfffa1b 	bl	9aa8 <assertion_failed>
    b238:	e594301c 	ldr	r3, [r4, #28]
    b23c:	e5940020 	ldr	r0, [r4, #32]
    b240:	e8bd4010 	pop	{r4, lr}
    b244:	e12fff13 	bx	r3
    b248:	0000015b 	.word	0x0000015b
    b24c:	000135b8 	.word	0x000135b8
    b250:	00013630 	.word	0x00013630
    b254:	0000015d 	.word	0x0000015d
    b258:	000137fc 	.word	0x000137fc
    b25c:	00013714 	.word	0x00013714
    b260:	0000015f 	.word	0x0000015f

0000b264 <CGPIOPin::DisableAllInterrupts(unsigned int)>:
    b264:	e3500035 	cmp	r0, #53	; 0x35
    b268:	e92d4070 	push	{r4, r5, r6, lr}
    b26c:	e1a05000 	mov	r5, r0
    b270:	8a00001e 	bhi	b2f0 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x8c>
    b274:	e3a02001 	mov	r2, #1
    b278:	e59f6084 	ldr	r6, [pc, #132]	; b304 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xa0>
    b27c:	e59f4084 	ldr	r4, [pc, #132]	; b308 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xa4>
    b280:	e5960000 	ldr	r0, [r6]
    b284:	e08442a5 	add	r4, r4, r5, lsr #5
    b288:	e3500000 	cmp	r0, #0
    b28c:	e205501f 	and	r5, r5, #31
    b290:	e1a04104 	lsl	r4, r4, #2
    b294:	e1a05512 	lsl	r5, r2, r5
    b298:	1a00000f 	bne	b2dc <CGPIOPin::DisableAllInterrupts(unsigned int)+0x78>
    b29c:	e59f3068 	ldr	r3, [pc, #104]	; b30c <CGPIOPin::DisableAllInterrupts(unsigned int)+0xa8>
    b2a0:	e1540003 	cmp	r4, r3
    b2a4:	8a00000b 	bhi	b2d8 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x74>
    b2a8:	e1e02005 	mvn	r2, r5
    b2ac:	e59f1058 	ldr	r1, [pc, #88]	; b30c <CGPIOPin::DisableAllInterrupts(unsigned int)+0xa8>
    b2b0:	e5943000 	ldr	r3, [r4]
    b2b4:	e0033002 	and	r3, r3, r2
    b2b8:	e484300c 	str	r3, [r4], #12
    b2bc:	e1540001 	cmp	r4, r1
    b2c0:	9afffffa 	bls	b2b0 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x4c>
    b2c4:	e5963000 	ldr	r3, [r6]
    b2c8:	e3530000 	cmp	r3, #0
    b2cc:	08bd8070 	popeq	{r4, r5, r6, pc}
    b2d0:	e8bd4070 	pop	{r4, r5, r6, lr}
    b2d4:	ea0019c1 	b	119e0 <LeaveCritical>
    b2d8:	e8bd8070 	pop	{r4, r5, r6, pc}
    b2dc:	eb001992 	bl	1192c <EnterCritical>
    b2e0:	e59f3024 	ldr	r3, [pc, #36]	; b30c <CGPIOPin::DisableAllInterrupts(unsigned int)+0xa8>
    b2e4:	e1540003 	cmp	r4, r3
    b2e8:	9affffee 	bls	b2a8 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x44>
    b2ec:	eafffff4 	b	b2c4 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x60>
    b2f0:	e59f2018 	ldr	r2, [pc, #24]	; b310 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xac>
    b2f4:	e59f1018 	ldr	r1, [pc, #24]	; b314 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xb0>
    b2f8:	e59f0018 	ldr	r0, [pc, #24]	; b318 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xb4>
    b2fc:	ebfff9e9 	bl	9aa8 <assertion_failed>
    b300:	eaffffdb 	b	b274 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x10>
    b304:	00015338 	.word	0x00015338
    b308:	08080013 	.word	0x08080013
    b30c:	2020008b 	.word	0x2020008b
    b310:	00000165 	.word	0x00000165
    b314:	000135b8 	.word	0x000135b8
    b318:	00013848 	.word	0x00013848

0000b31c <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE>:
    b31c:	e3a02001 	mov	r2, #1
    b320:	e59f3004 	ldr	r3, [pc, #4]	; b32c <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE+0x10>
    b324:	e5832000 	str	r2, [r3]
    b328:	e12fff1e 	bx	lr
    b32c:	00015338 	.word	0x00015338

0000b330 <CInterruptSystem::CInterruptSystem()>:
    b330:	e1a0c000 	mov	ip, r0
    b334:	e2802f47 	add	r2, r0, #284	; 0x11c
    b338:	e1a00002 	mov	r0, r2
    b33c:	e3a01000 	mov	r1, #0
    b340:	e24c3004 	sub	r3, ip, #4
    b344:	e5a31004 	str	r1, [r3, #4]!
    b348:	e1530000 	cmp	r3, r0
    b34c:	e5a21004 	str	r1, [r2, #4]!
    b350:	1afffffb 	bne	b344 <CInterruptSystem::CInterruptSystem()+0x14>
    b354:	e59f3008 	ldr	r3, [pc, #8]	; b364 <CInterruptSystem::CInterruptSystem()+0x34>
    b358:	e1a0000c 	mov	r0, ip
    b35c:	e583c000 	str	ip, [r3]
    b360:	e12fff1e 	bx	lr
    b364:	0001533c 	.word	0x0001533c

0000b368 <CInterruptSystem::~CInterruptSystem()>:
    b368:	e3a02000 	mov	r2, #0
    b36c:	e59f3004 	ldr	r3, [pc, #4]	; b378 <CInterruptSystem::~CInterruptSystem()+0x10>
    b370:	e5832000 	str	r2, [r3]
    b374:	e12fff1e 	bx	lr
    b378:	0001533c 	.word	0x0001533c

0000b37c <CInterruptSystem::Initialize()>:
    b37c:	e92d4010 	push	{r4, lr}
    b380:	e3a04000 	mov	r4, #0
    b384:	e59f2050 	ldr	r2, [pc, #80]	; b3dc <CInterruptSystem::Initialize()+0x60>
    b388:	e59f3050 	ldr	r3, [pc, #80]	; b3e0 <CInterruptSystem::Initialize()+0x64>
    b38c:	e1a02142 	asr	r2, r2, #2
    b390:	e1a03143 	asr	r3, r3, #2
    b394:	e2422002 	sub	r2, r2, #2
    b398:	e2433002 	sub	r3, r3, #2
    b39c:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
    b3a0:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
    b3a4:	e5842018 	str	r2, [r4, #24]
    b3a8:	e584301c 	str	r3, [r4, #28]
    b3ac:	eb0019b0 	bl	11a74 <SyncDataAndInstructionCache>
    b3b0:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
    b3b4:	e3e02000 	mvn	r2, #0
    b3b8:	e59f3024 	ldr	r3, [pc, #36]	; b3e4 <CInterruptSystem::Initialize()+0x68>
    b3bc:	e583420c 	str	r4, [r3, #524]	; 0x20c
    b3c0:	e583221c 	str	r2, [r3, #540]	; 0x21c
    b3c4:	e5832220 	str	r2, [r3, #544]	; 0x220
    b3c8:	e5832224 	str	r2, [r3, #548]	; 0x224
    b3cc:	ee074fba 	mcr	15, 0, r4, cr7, cr10, {5}
    b3d0:	f1080080 	cpsie	i
    b3d4:	e3a00001 	mov	r0, #1
    b3d8:	e8bd8010 	pop	{r4, pc}
    b3dc:	00011508 	.word	0x00011508
    b3e0:	00011514 	.word	0x00011514
    b3e4:	2000b000 	.word	0x2000b000

0000b3e8 <CInterruptSystem::DisconnectFIQ()>:
    b3e8:	e92d4010 	push	{r4, lr}
    b3ec:	e59f4068 	ldr	r4, [pc, #104]	; b45c <CInterruptSystem::DisconnectFIQ()+0x74>
    b3f0:	e5d42001 	ldrb	r2, [r4, #1]
    b3f4:	e5d43000 	ldrb	r3, [r4]
    b3f8:	e5d41002 	ldrb	r1, [r4, #2]
    b3fc:	e1833402 	orr	r3, r3, r2, lsl #8
    b400:	e5d42003 	ldrb	r2, [r4, #3]
    b404:	e1833801 	orr	r3, r3, r1, lsl #16
    b408:	e1933c02 	orrs	r3, r3, r2, lsl #24
    b40c:	0a00000d 	beq	b448 <CInterruptSystem::DisconnectFIQ()+0x60>
    b410:	e3a03000 	mov	r3, #0
    b414:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    b418:	e59f2040 	ldr	r2, [pc, #64]	; b460 <CInterruptSystem::DisconnectFIQ()+0x78>
    b41c:	e582320c 	str	r3, [r2, #524]	; 0x20c
    b420:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    b424:	e5c43000 	strb	r3, [r4]
    b428:	e5c43001 	strb	r3, [r4, #1]
    b42c:	e5c43002 	strb	r3, [r4, #2]
    b430:	e5c43003 	strb	r3, [r4, #3]
    b434:	e5c43004 	strb	r3, [r4, #4]
    b438:	e5c43005 	strb	r3, [r4, #5]
    b43c:	e5c43006 	strb	r3, [r4, #6]
    b440:	e5c43007 	strb	r3, [r4, #7]
    b444:	e8bd8010 	pop	{r4, pc}
    b448:	e3a02086 	mov	r2, #134	; 0x86
    b44c:	e59f1010 	ldr	r1, [pc, #16]	; b464 <CInterruptSystem::DisconnectFIQ()+0x7c>
    b450:	e59f0010 	ldr	r0, [pc, #16]	; b468 <CInterruptSystem::DisconnectFIQ()+0x80>
    b454:	ebfff993 	bl	9aa8 <assertion_failed>
    b458:	eaffffec 	b	b410 <CInterruptSystem::DisconnectFIQ()+0x28>
    b45c:	00015258 	.word	0x00015258
    b460:	2000b000 	.word	0x2000b000
    b464:	0001385c 	.word	0x0001385c
    b468:	0001386c 	.word	0x0001386c

0000b46c <CInterruptSystem::EnableIRQ(unsigned int)>:
    b46c:	e92d4010 	push	{r4, lr}
    b470:	e3a03000 	mov	r3, #0
    b474:	e1a04000 	mov	r4, r0
    b478:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    b47c:	e3500047 	cmp	r0, #71	; 0x47
    b480:	8a00000d 	bhi	b4bc <CInterruptSystem::EnableIRQ(unsigned int)+0x50>
    b484:	e350001f 	cmp	r0, #31
    b488:	8a000007 	bhi	b4ac <CInterruptSystem::EnableIRQ(unsigned int)+0x40>
    b48c:	e59f2040 	ldr	r2, [pc, #64]	; b4d4 <CInterruptSystem::EnableIRQ(unsigned int)+0x68>
    b490:	e3a03001 	mov	r3, #1
    b494:	e204401f 	and	r4, r4, #31
    b498:	e1a04413 	lsl	r4, r3, r4
    b49c:	e5824000 	str	r4, [r2]
    b4a0:	e3a03000 	mov	r3, #0
    b4a4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    b4a8:	e8bd8010 	pop	{r4, pc}
    b4ac:	e350003f 	cmp	r0, #63	; 0x3f
    b4b0:	959f2020 	ldrls	r2, [pc, #32]	; b4d8 <CInterruptSystem::EnableIRQ(unsigned int)+0x6c>
    b4b4:	859f2020 	ldrhi	r2, [pc, #32]	; b4dc <CInterruptSystem::EnableIRQ(unsigned int)+0x70>
    b4b8:	eafffff4 	b	b490 <CInterruptSystem::EnableIRQ(unsigned int)+0x24>
    b4bc:	e3a02092 	mov	r2, #146	; 0x92
    b4c0:	e59f1018 	ldr	r1, [pc, #24]	; b4e0 <CInterruptSystem::EnableIRQ(unsigned int)+0x74>
    b4c4:	e59f0018 	ldr	r0, [pc, #24]	; b4e4 <CInterruptSystem::EnableIRQ(unsigned int)+0x78>
    b4c8:	ebfff976 	bl	9aa8 <assertion_failed>
    b4cc:	e59f2008 	ldr	r2, [pc, #8]	; b4dc <CInterruptSystem::EnableIRQ(unsigned int)+0x70>
    b4d0:	eaffffee 	b	b490 <CInterruptSystem::EnableIRQ(unsigned int)+0x24>
    b4d4:	2000b210 	.word	0x2000b210
    b4d8:	2000b214 	.word	0x2000b214
    b4dc:	2000b218 	.word	0x2000b218
    b4e0:	0001385c 	.word	0x0001385c
    b4e4:	00013884 	.word	0x00013884

0000b4e8 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>:
    b4e8:	e3510047 	cmp	r1, #71	; 0x47
    b4ec:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b4f0:	e1a04001 	mov	r4, r1
    b4f4:	e1a05000 	mov	r5, r0
    b4f8:	e1a08002 	mov	r8, r2
    b4fc:	e1a07003 	mov	r7, r3
    b500:	8a00000c 	bhi	b538 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x50>
    b504:	e7953104 	ldr	r3, [r5, r4, lsl #2]
    b508:	e0856104 	add	r6, r5, r4, lsl #2
    b50c:	e3530000 	cmp	r3, #0
    b510:	0a000003 	beq	b524 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x3c>
    b514:	e3a02062 	mov	r2, #98	; 0x62
    b518:	e59f102c 	ldr	r1, [pc, #44]	; b54c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x64>
    b51c:	e59f002c 	ldr	r0, [pc, #44]	; b550 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x68>
    b520:	ebfff960 	bl	9aa8 <assertion_failed>
    b524:	e7858104 	str	r8, [r5, r4, lsl #2]
    b528:	e1a00004 	mov	r0, r4
    b52c:	e5867120 	str	r7, [r6, #288]	; 0x120
    b530:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    b534:	eaffffcc 	b	b46c <CInterruptSystem::EnableIRQ(unsigned int)>
    b538:	e3a02061 	mov	r2, #97	; 0x61
    b53c:	e59f1008 	ldr	r1, [pc, #8]	; b54c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x64>
    b540:	e59f000c 	ldr	r0, [pc, #12]	; b554 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x6c>
    b544:	ebfff957 	bl	9aa8 <assertion_failed>
    b548:	eaffffed 	b	b504 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x1c>
    b54c:	0001385c 	.word	0x0001385c
    b550:	00013898 	.word	0x00013898
    b554:	00013884 	.word	0x00013884

0000b558 <CInterruptSystem::DisableIRQ(unsigned int)>:
    b558:	e92d4010 	push	{r4, lr}
    b55c:	e3a03000 	mov	r3, #0
    b560:	e1a04000 	mov	r4, r0
    b564:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    b568:	e3500047 	cmp	r0, #71	; 0x47
    b56c:	8a00000d 	bhi	b5a8 <CInterruptSystem::DisableIRQ(unsigned int)+0x50>
    b570:	e350001f 	cmp	r0, #31
    b574:	8a000007 	bhi	b598 <CInterruptSystem::DisableIRQ(unsigned int)+0x40>
    b578:	e59f2040 	ldr	r2, [pc, #64]	; b5c0 <CInterruptSystem::DisableIRQ(unsigned int)+0x68>
    b57c:	e3a03001 	mov	r3, #1
    b580:	e204401f 	and	r4, r4, #31
    b584:	e1a04413 	lsl	r4, r3, r4
    b588:	e5824000 	str	r4, [r2]
    b58c:	e3a03000 	mov	r3, #0
    b590:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    b594:	e8bd8010 	pop	{r4, pc}
    b598:	e350003f 	cmp	r0, #63	; 0x3f
    b59c:	959f2020 	ldrls	r2, [pc, #32]	; b5c4 <CInterruptSystem::DisableIRQ(unsigned int)+0x6c>
    b5a0:	859f2020 	ldrhi	r2, [pc, #32]	; b5c8 <CInterruptSystem::DisableIRQ(unsigned int)+0x70>
    b5a4:	eafffff4 	b	b57c <CInterruptSystem::DisableIRQ(unsigned int)+0x24>
    b5a8:	e3a0209d 	mov	r2, #157	; 0x9d
    b5ac:	e59f1018 	ldr	r1, [pc, #24]	; b5cc <CInterruptSystem::DisableIRQ(unsigned int)+0x74>
    b5b0:	e59f0018 	ldr	r0, [pc, #24]	; b5d0 <CInterruptSystem::DisableIRQ(unsigned int)+0x78>
    b5b4:	ebfff93b 	bl	9aa8 <assertion_failed>
    b5b8:	e59f2008 	ldr	r2, [pc, #8]	; b5c8 <CInterruptSystem::DisableIRQ(unsigned int)+0x70>
    b5bc:	eaffffee 	b	b57c <CInterruptSystem::DisableIRQ(unsigned int)+0x24>
    b5c0:	2000b21c 	.word	0x2000b21c
    b5c4:	2000b220 	.word	0x2000b220
    b5c8:	2000b224 	.word	0x2000b224
    b5cc:	0001385c 	.word	0x0001385c
    b5d0:	00013884 	.word	0x00013884

0000b5d4 <CInterruptSystem::DisconnectIRQ(unsigned int)>:
    b5d4:	e3510047 	cmp	r1, #71	; 0x47
    b5d8:	e92d4070 	push	{r4, r5, r6, lr}
    b5dc:	e1a04001 	mov	r4, r1
    b5e0:	e1a05000 	mov	r5, r0
    b5e4:	8a000009 	bhi	b610 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x3c>
    b5e8:	e7953104 	ldr	r3, [r5, r4, lsl #2]
    b5ec:	e0856104 	add	r6, r5, r4, lsl #2
    b5f0:	e3530000 	cmp	r3, #0
    b5f4:	0a00000d 	beq	b630 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x5c>
    b5f8:	e1a00004 	mov	r0, r4
    b5fc:	ebffffd5 	bl	b558 <CInterruptSystem::DisableIRQ(unsigned int)>
    b600:	e3a03000 	mov	r3, #0
    b604:	e7853104 	str	r3, [r5, r4, lsl #2]
    b608:	e5863120 	str	r3, [r6, #288]	; 0x120
    b60c:	e8bd8070 	pop	{r4, r5, r6, pc}
    b610:	e3a0206c 	mov	r2, #108	; 0x6c
    b614:	e59f1028 	ldr	r1, [pc, #40]	; b644 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x70>
    b618:	e59f0028 	ldr	r0, [pc, #40]	; b648 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x74>
    b61c:	ebfff921 	bl	9aa8 <assertion_failed>
    b620:	e7953104 	ldr	r3, [r5, r4, lsl #2]
    b624:	e0856104 	add	r6, r5, r4, lsl #2
    b628:	e3530000 	cmp	r3, #0
    b62c:	1afffff1 	bne	b5f8 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x24>
    b630:	e3a0206d 	mov	r2, #109	; 0x6d
    b634:	e59f1008 	ldr	r1, [pc, #8]	; b644 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x70>
    b638:	e59f000c 	ldr	r0, [pc, #12]	; b64c <CInterruptSystem::DisconnectIRQ(unsigned int)+0x78>
    b63c:	ebfff919 	bl	9aa8 <assertion_failed>
    b640:	eaffffec 	b	b5f8 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x24>
    b644:	0001385c 	.word	0x0001385c
    b648:	00013884 	.word	0x00013884
    b64c:	000138b4 	.word	0x000138b4

0000b650 <CInterruptSystem::EnableFIQ(unsigned int)>:
    b650:	e92d4010 	push	{r4, lr}
    b654:	e3a03000 	mov	r3, #0
    b658:	e1a04000 	mov	r4, r0
    b65c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    b660:	e3500047 	cmp	r0, #71	; 0x47
    b664:	9a000003 	bls	b678 <CInterruptSystem::EnableFIQ(unsigned int)+0x28>
    b668:	e3a020a8 	mov	r2, #168	; 0xa8
    b66c:	e59f101c 	ldr	r1, [pc, #28]	; b690 <CInterruptSystem::EnableFIQ(unsigned int)+0x40>
    b670:	e59f001c 	ldr	r0, [pc, #28]	; b694 <CInterruptSystem::EnableFIQ(unsigned int)+0x44>
    b674:	ebfff90b 	bl	9aa8 <assertion_failed>
    b678:	e59f3018 	ldr	r3, [pc, #24]	; b698 <CInterruptSystem::EnableFIQ(unsigned int)+0x48>
    b67c:	e3844080 	orr	r4, r4, #128	; 0x80
    b680:	e583420c 	str	r4, [r3, #524]	; 0x20c
    b684:	e3a03000 	mov	r3, #0
    b688:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    b68c:	e8bd8010 	pop	{r4, pc}
    b690:	0001385c 	.word	0x0001385c
    b694:	000138d0 	.word	0x000138d0
    b698:	2000b000 	.word	0x2000b000

0000b69c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>:
    b69c:	e3510047 	cmp	r1, #71	; 0x47
    b6a0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b6a4:	e1a07001 	mov	r7, r1
    b6a8:	e1a06002 	mov	r6, r2
    b6ac:	e1a05003 	mov	r5, r3
    b6b0:	8a00001f 	bhi	b734 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x98>
    b6b4:	e3560000 	cmp	r6, #0
    b6b8:	0a000022 	beq	b748 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xac>
    b6bc:	e59f4098 	ldr	r4, [pc, #152]	; b75c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc0>
    b6c0:	e5d42001 	ldrb	r2, [r4, #1]
    b6c4:	e5d43000 	ldrb	r3, [r4]
    b6c8:	e5d41002 	ldrb	r1, [r4, #2]
    b6cc:	e1833402 	orr	r3, r3, r2, lsl #8
    b6d0:	e5d42003 	ldrb	r2, [r4, #3]
    b6d4:	e1833801 	orr	r3, r3, r1, lsl #16
    b6d8:	e1933c02 	orrs	r3, r3, r2, lsl #24
    b6dc:	0a000003 	beq	b6f0 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x54>
    b6e0:	e3a0207c 	mov	r2, #124	; 0x7c
    b6e4:	e59f1074 	ldr	r1, [pc, #116]	; b760 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc4>
    b6e8:	e59f0074 	ldr	r0, [pc, #116]	; b764 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc8>
    b6ec:	ebfff8ed 	bl	9aa8 <assertion_failed>
    b6f0:	e1a0e426 	lsr	lr, r6, #8
    b6f4:	e1a0c826 	lsr	ip, r6, #16
    b6f8:	e1a01c26 	lsr	r1, r6, #24
    b6fc:	e1a02425 	lsr	r2, r5, #8
    b700:	e1a03825 	lsr	r3, r5, #16
    b704:	e5c45004 	strb	r5, [r4, #4]
    b708:	e1a05c25 	lsr	r5, r5, #24
    b70c:	e1a00007 	mov	r0, r7
    b710:	e5c46000 	strb	r6, [r4]
    b714:	e5c4e001 	strb	lr, [r4, #1]
    b718:	e5c4c002 	strb	ip, [r4, #2]
    b71c:	e5c41003 	strb	r1, [r4, #3]
    b720:	e5c42005 	strb	r2, [r4, #5]
    b724:	e5c43006 	strb	r3, [r4, #6]
    b728:	e5c45007 	strb	r5, [r4, #7]
    b72c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    b730:	eaffffc6 	b	b650 <CInterruptSystem::EnableFIQ(unsigned int)>
    b734:	e3a0207a 	mov	r2, #122	; 0x7a
    b738:	e59f1020 	ldr	r1, [pc, #32]	; b760 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc4>
    b73c:	e59f0024 	ldr	r0, [pc, #36]	; b768 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xcc>
    b740:	ebfff8d8 	bl	9aa8 <assertion_failed>
    b744:	eaffffda 	b	b6b4 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x18>
    b748:	e3a0207b 	mov	r2, #123	; 0x7b
    b74c:	e59f100c 	ldr	r1, [pc, #12]	; b760 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc4>
    b750:	e59f0014 	ldr	r0, [pc, #20]	; b76c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xd0>
    b754:	ebfff8d3 	bl	9aa8 <assertion_failed>
    b758:	eaffffd7 	b	b6bc <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x20>
    b75c:	00015258 	.word	0x00015258
    b760:	0001385c 	.word	0x0001385c
    b764:	000138e4 	.word	0x000138e4
    b768:	000138d0 	.word	0x000138d0
    b76c:	00013874 	.word	0x00013874

0000b770 <CInterruptSystem::DisableFIQ()>:
    b770:	e3a03000 	mov	r3, #0
    b774:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    b778:	e59f2008 	ldr	r2, [pc, #8]	; b788 <CInterruptSystem::DisableFIQ()+0x18>
    b77c:	e582320c 	str	r3, [r2, #524]	; 0x20c
    b780:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    b784:	e12fff1e 	bx	lr
    b788:	2000b000 	.word	0x2000b000

0000b78c <CInterruptSystem::Get()>:
    b78c:	e92d4010 	push	{r4, lr}
    b790:	e59f4020 	ldr	r4, [pc, #32]	; b7b8 <CInterruptSystem::Get()+0x2c>
    b794:	e5940000 	ldr	r0, [r4]
    b798:	e3500000 	cmp	r0, #0
    b79c:	18bd8010 	popne	{r4, pc}
    b7a0:	e3a020ba 	mov	r2, #186	; 0xba
    b7a4:	e59f1010 	ldr	r1, [pc, #16]	; b7bc <CInterruptSystem::Get()+0x30>
    b7a8:	e59f0010 	ldr	r0, [pc, #16]	; b7c0 <CInterruptSystem::Get()+0x34>
    b7ac:	ebfff8bd 	bl	9aa8 <assertion_failed>
    b7b0:	e5940000 	ldr	r0, [r4]
    b7b4:	e8bd8010 	pop	{r4, pc}
    b7b8:	0001533c 	.word	0x0001533c
    b7bc:	0001385c 	.word	0x0001385c
    b7c0:	000138fc 	.word	0x000138fc

0000b7c4 <CInterruptSystem::CallIRQHandler(unsigned int)>:
    b7c4:	e3510047 	cmp	r1, #71	; 0x47
    b7c8:	e92d4070 	push	{r4, r5, r6, lr}
    b7cc:	e1a06001 	mov	r6, r1
    b7d0:	e1a05000 	mov	r5, r0
    b7d4:	8a000007 	bhi	b7f8 <CInterruptSystem::CallIRQHandler(unsigned int)+0x34>
    b7d8:	e7954106 	ldr	r4, [r5, r6, lsl #2]
    b7dc:	e0855106 	add	r5, r5, r6, lsl #2
    b7e0:	e3540000 	cmp	r4, #0
    b7e4:	0a00000b 	beq	b818 <CInterruptSystem::CallIRQHandler(unsigned int)+0x54>
    b7e8:	e5950120 	ldr	r0, [r5, #288]	; 0x120
    b7ec:	e12fff34 	blx	r4
    b7f0:	e3a00001 	mov	r0, #1
    b7f4:	e8bd8070 	pop	{r4, r5, r6, pc}
    b7f8:	e3a020c0 	mov	r2, #192	; 0xc0
    b7fc:	e59f1024 	ldr	r1, [pc, #36]	; b828 <CInterruptSystem::CallIRQHandler(unsigned int)+0x64>
    b800:	e59f0024 	ldr	r0, [pc, #36]	; b82c <CInterruptSystem::CallIRQHandler(unsigned int)+0x68>
    b804:	ebfff8a7 	bl	9aa8 <assertion_failed>
    b808:	e7954106 	ldr	r4, [r5, r6, lsl #2]
    b80c:	e0855106 	add	r5, r5, r6, lsl #2
    b810:	e3540000 	cmp	r4, #0
    b814:	1afffff3 	bne	b7e8 <CInterruptSystem::CallIRQHandler(unsigned int)+0x24>
    b818:	e1a00006 	mov	r0, r6
    b81c:	ebffff4d 	bl	b558 <CInterruptSystem::DisableIRQ(unsigned int)>
    b820:	e1a00004 	mov	r0, r4
    b824:	e8bd8070 	pop	{r4, r5, r6, pc}
    b828:	0001385c 	.word	0x0001385c
    b82c:	00013884 	.word	0x00013884

0000b830 <CInterruptSystem::InterruptHandler()>:
    b830:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b834:	e59f70a8 	ldr	r7, [pc, #168]	; b8e4 <CInterruptSystem::InterruptHandler()+0xb4>
    b838:	e24dd010 	sub	sp, sp, #16
    b83c:	e5973000 	ldr	r3, [r7]
    b840:	e3530000 	cmp	r3, #0
    b844:	0a000021 	beq	b8d0 <CInterruptSystem::InterruptHandler()+0xa0>
    b848:	e3a06000 	mov	r6, #0
    b84c:	ee076f9a 	mcr	15, 0, r6, cr7, cr10, {4}
    b850:	e59f3090 	ldr	r3, [pc, #144]	; b8e8 <CInterruptSystem::InterruptHandler()+0xb8>
    b854:	e5932204 	ldr	r2, [r3, #516]	; 0x204
    b858:	e58d2004 	str	r2, [sp, #4]
    b85c:	e5932208 	ldr	r2, [r3, #520]	; 0x208
    b860:	e58d2008 	str	r2, [sp, #8]
    b864:	e5933200 	ldr	r3, [r3, #512]	; 0x200
    b868:	e6ef3073 	uxtb	r3, r3
    b86c:	e58d300c 	str	r3, [sp, #12]
    b870:	ee076fba 	mcr	15, 0, r6, cr7, cr10, {5}
    b874:	e28d8004 	add	r8, sp, #4
    b878:	e4984004 	ldr	r4, [r8], #4
    b87c:	e3540000 	cmp	r4, #0
    b880:	0a00000d 	beq	b8bc <CInterruptSystem::InterruptHandler()+0x8c>
    b884:	e1a05006 	mov	r5, r6
    b888:	ea000002 	b	b898 <CInterruptSystem::InterruptHandler()+0x68>
    b88c:	e1b040a4 	lsrs	r4, r4, #1
    b890:	e2855001 	add	r5, r5, #1
    b894:	0a000008 	beq	b8bc <CInterruptSystem::InterruptHandler()+0x8c>
    b898:	e3140001 	tst	r4, #1
    b89c:	0afffffa 	beq	b88c <CInterruptSystem::InterruptHandler()+0x5c>
    b8a0:	e1a01005 	mov	r1, r5
    b8a4:	e5970000 	ldr	r0, [r7]
    b8a8:	ebffffc5 	bl	b7c4 <CInterruptSystem::CallIRQHandler(unsigned int)>
    b8ac:	e3500000 	cmp	r0, #0
    b8b0:	0afffff5 	beq	b88c <CInterruptSystem::InterruptHandler()+0x5c>
    b8b4:	e28dd010 	add	sp, sp, #16
    b8b8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    b8bc:	e2866020 	add	r6, r6, #32
    b8c0:	e3560060 	cmp	r6, #96	; 0x60
    b8c4:	1affffeb 	bne	b878 <CInterruptSystem::InterruptHandler()+0x48>
    b8c8:	e28dd010 	add	sp, sp, #16
    b8cc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    b8d0:	e3a020d3 	mov	r2, #211	; 0xd3
    b8d4:	e59f1010 	ldr	r1, [pc, #16]	; b8ec <CInterruptSystem::InterruptHandler()+0xbc>
    b8d8:	e59f0010 	ldr	r0, [pc, #16]	; b8f0 <CInterruptSystem::InterruptHandler()+0xc0>
    b8dc:	ebfff871 	bl	9aa8 <assertion_failed>
    b8e0:	eaffffd8 	b	b848 <CInterruptSystem::InterruptHandler()+0x18>
    b8e4:	0001533c 	.word	0x0001533c
    b8e8:	2000b000 	.word	0x2000b000
    b8ec:	0001385c 	.word	0x0001385c
    b8f0:	000138fc 	.word	0x000138fc

0000b8f4 <InterruptHandler>:
    b8f4:	e92d4010 	push	{r4, lr}
    b8f8:	e3a04000 	mov	r4, #0
    b8fc:	ee074fba 	mcr	15, 0, r4, cr7, cr10, {5}
    b900:	ebffffca 	bl	b830 <CInterruptSystem::InterruptHandler()>
    b904:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
    b908:	e8bd8010 	pop	{r4, pc}

0000b90c <CKernelOptions::GetDecimal(char*) [clone .part.0]>:
    b90c:	e3a01000 	mov	r1, #0
    b910:	ea00000a 	b	b940 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x34>
    b914:	e3520009 	cmp	r2, #9
    b918:	8a000011 	bhi	b964 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x58>
    b91c:	e3730001 	cmn	r3, #1
    b920:	13a02000 	movne	r2, #0
    b924:	03a02001 	moveq	r2, #1
    b928:	e1510003 	cmp	r1, r3
    b92c:	91a01002 	movls	r1, r2
    b930:	83821001 	orrhi	r1, r2, #1
    b934:	e3510000 	cmp	r1, #0
    b938:	1a000009 	bne	b964 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x58>
    b93c:	e1a01003 	mov	r1, r3
    b940:	e0d0c0d1 	ldrsb	ip, [r0], #1
    b944:	e0813101 	add	r3, r1, r1, lsl #2
    b948:	e24c2030 	sub	r2, ip, #48	; 0x30
    b94c:	e35c0000 	cmp	ip, #0
    b950:	e0823083 	add	r3, r2, r3, lsl #1
    b954:	e6ef2072 	uxtb	r2, r2
    b958:	1affffed 	bne	b914 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x8>
    b95c:	e1a00001 	mov	r0, r1
    b960:	e12fff1e 	bx	lr
    b964:	e3e01000 	mvn	r1, #0
    b968:	e1a00001 	mov	r0, r1
    b96c:	e12fff1e 	bx	lr

0000b970 <CKernelOptions::~CKernelOptions()>:
    b970:	e3a02000 	mov	r2, #0
    b974:	e59f3004 	ldr	r3, [pc, #4]	; b980 <CKernelOptions::~CKernelOptions()+0x10>
    b978:	e5832000 	str	r2, [r3]
    b97c:	e12fff1e 	bx	lr
    b980:	00015340 	.word	0x00015340

0000b984 <CKernelOptions::GetWidth() const>:
    b984:	e5900810 	ldr	r0, [r0, #2064]	; 0x810
    b988:	e12fff1e 	bx	lr

0000b98c <CKernelOptions::GetHeight() const>:
    b98c:	e5900814 	ldr	r0, [r0, #2068]	; 0x814
    b990:	e12fff1e 	bx	lr

0000b994 <CKernelOptions::GetLogDevice() const>:
    b994:	e2800e81 	add	r0, r0, #2064	; 0x810
    b998:	e2800008 	add	r0, r0, #8
    b99c:	e12fff1e 	bx	lr

0000b9a0 <CKernelOptions::GetLogLevel() const>:
    b9a0:	e590082c 	ldr	r0, [r0, #2092]	; 0x82c
    b9a4:	e12fff1e 	bx	lr

0000b9a8 <CKernelOptions::GetKeyMap() const>:
    b9a8:	e2800e83 	add	r0, r0, #2096	; 0x830
    b9ac:	e12fff1e 	bx	lr

0000b9b0 <CKernelOptions::GetUSBPowerDelay() const>:
    b9b0:	e5900834 	ldr	r0, [r0, #2100]	; 0x834
    b9b4:	e12fff1e 	bx	lr

0000b9b8 <CKernelOptions::GetSoundDevice() const>:
    b9b8:	e2800e83 	add	r0, r0, #2096	; 0x830
    b9bc:	e2800008 	add	r0, r0, #8
    b9c0:	e12fff1e 	bx	lr

0000b9c4 <CKernelOptions::GetSoundOption() const>:
    b9c4:	e590084c 	ldr	r0, [r0, #2124]	; 0x84c
    b9c8:	e12fff1e 	bx	lr

0000b9cc <CKernelOptions::GetCPUSpeed() const>:
    b9cc:	e5d00850 	ldrb	r0, [r0, #2128]	; 0x850
    b9d0:	e12fff1e 	bx	lr

0000b9d4 <CKernelOptions::GetSoCMaxTemp() const>:
    b9d4:	e5900854 	ldr	r0, [r0, #2132]	; 0x854
    b9d8:	e12fff1e 	bx	lr

0000b9dc <CKernelOptions::Get()>:
    b9dc:	e59f3004 	ldr	r3, [pc, #4]	; b9e8 <CKernelOptions::Get()+0xc>
    b9e0:	e5930000 	ldr	r0, [r3]
    b9e4:	e12fff1e 	bx	lr
    b9e8:	00015340 	.word	0x00015340

0000b9ec <CKernelOptions::GetToken()>:
    b9ec:	e590380c 	ldr	r3, [r0, #2060]	; 0x80c
    b9f0:	e1d320d0 	ldrsb	r2, [r3]
    b9f4:	e3520000 	cmp	r2, #0
    b9f8:	1a000005 	bne	ba14 <CKernelOptions::GetToken()+0x28>
    b9fc:	ea000016 	b	ba5c <CKernelOptions::GetToken()+0x70>
    ba00:	e2833001 	add	r3, r3, #1
    ba04:	e580380c 	str	r3, [r0, #2060]	; 0x80c
    ba08:	e1d320d0 	ldrsb	r2, [r3]
    ba0c:	e3520000 	cmp	r2, #0
    ba10:	0a000011 	beq	ba5c <CKernelOptions::GetToken()+0x70>
    ba14:	e3520020 	cmp	r2, #32
    ba18:	0afffff8 	beq	ba00 <CKernelOptions::GetToken()+0x14>
    ba1c:	e1a02003 	mov	r2, r3
    ba20:	ea000000 	b	ba28 <CKernelOptions::GetToken()+0x3c>
    ba24:	e1a02001 	mov	r2, r1
    ba28:	e2821001 	add	r1, r2, #1
    ba2c:	e580180c 	str	r1, [r0, #2060]	; 0x80c
    ba30:	e1d2c0d1 	ldrsb	ip, [r2, #1]
    ba34:	e35c0000 	cmp	ip, #0
    ba38:	0a000008 	beq	ba60 <CKernelOptions::GetToken()+0x74>
    ba3c:	e35c0020 	cmp	ip, #32
    ba40:	1afffff7 	bne	ba24 <CKernelOptions::GetToken()+0x38>
    ba44:	e3a0c000 	mov	ip, #0
    ba48:	e2822002 	add	r2, r2, #2
    ba4c:	e580280c 	str	r2, [r0, #2060]	; 0x80c
    ba50:	e5c1c000 	strb	ip, [r1]
    ba54:	e1a00003 	mov	r0, r3
    ba58:	e12fff1e 	bx	lr
    ba5c:	e3a03000 	mov	r3, #0
    ba60:	e1a00003 	mov	r0, r3
    ba64:	e12fff1e 	bx	lr

0000ba68 <CKernelOptions::CKernelOptions()>:
    ba68:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ba6c:	e3a02004 	mov	r2, #4
    ba70:	e1a04000 	mov	r4, r0
    ba74:	e3a05000 	mov	r5, #0
    ba78:	e3a0303c 	mov	r3, #60	; 0x3c
    ba7c:	e2807e81 	add	r7, r0, #2064	; 0x810
    ba80:	e2877008 	add	r7, r7, #8
    ba84:	e580282c 	str	r2, [r0, #2092]	; 0x82c
    ba88:	e5803854 	str	r3, [r0, #2132]	; 0x854
    ba8c:	e24dd014 	sub	sp, sp, #20
    ba90:	e59f1348 	ldr	r1, [pc, #840]	; bde0 <CKernelOptions::CKernelOptions()+0x378>
    ba94:	e1a00007 	mov	r0, r7
    ba98:	e5845810 	str	r5, [r4, #2064]	; 0x810
    ba9c:	e5845814 	str	r5, [r4, #2068]	; 0x814
    baa0:	e5845834 	str	r5, [r4, #2100]	; 0x834
    baa4:	e584584c 	str	r5, [r4, #2124]	; 0x84c
    baa8:	e5c45850 	strb	r5, [r4, #2128]	; 0x850
    baac:	e2849e83 	add	r9, r4, #2096	; 0x830
    bab0:	eb001427 	bl	10b54 <strcpy>
    bab4:	e59f1328 	ldr	r1, [pc, #808]	; bde4 <CKernelOptions::CKernelOptions()+0x37c>
    bab8:	e1a00009 	mov	r0, r9
    babc:	eb001424 	bl	10b54 <strcpy>
    bac0:	e59f3320 	ldr	r3, [pc, #800]	; bde8 <CKernelOptions::CKernelOptions()+0x380>
    bac4:	e5c45838 	strb	r5, [r4, #2104]	; 0x838
    bac8:	e28d000c 	add	r0, sp, #12
    bacc:	e5834000 	str	r4, [r3]
    bad0:	ebfff818 	bl	9b38 <CBcmPropertyTags::CBcmPropertyTags()>
    bad4:	e58d5000 	str	r5, [sp]
    bad8:	e1a02004 	mov	r2, r4
    badc:	e28d000c 	add	r0, sp, #12
    bae0:	e59f3304 	ldr	r3, [pc, #772]	; bdec <CKernelOptions::CKernelOptions()+0x384>
    bae4:	e59f1304 	ldr	r1, [pc, #772]	; bdf0 <CKernelOptions::CKernelOptions()+0x388>
    bae8:	ebfff869 	bl	9c94 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    baec:	e1500005 	cmp	r0, r5
    baf0:	0a000037 	beq	bbd4 <CKernelOptions::CKernelOptions()+0x16c>
    baf4:	e5943008 	ldr	r3, [r4, #8]
    baf8:	e3530b02 	cmp	r3, #2048	; 0x800
    bafc:	2a000034 	bcs	bbd4 <CKernelOptions::CKernelOptions()+0x16c>
    bb00:	e0843003 	add	r3, r4, r3
    bb04:	e284200c 	add	r2, r4, #12
    bb08:	e59f82e4 	ldr	r8, [pc, #740]	; bdf4 <CKernelOptions::CKernelOptions()+0x38c>
    bb0c:	e59fa2e4 	ldr	sl, [pc, #740]	; bdf8 <CKernelOptions::CKernelOptions()+0x390>
    bb10:	e5c3500c 	strb	r5, [r3, #12]
    bb14:	e584280c 	str	r2, [r4, #2060]	; 0x80c
    bb18:	e1a00004 	mov	r0, r4
    bb1c:	ebffffb2 	bl	b9ec <CKernelOptions::GetToken()>
    bb20:	e2506000 	subs	r6, r0, #0
    bb24:	0a00002a 	beq	bbd4 <CKernelOptions::CKernelOptions()+0x16c>
    bb28:	e1d630d0 	ldrsb	r3, [r6]
    bb2c:	e3530000 	cmp	r3, #0
    bb30:	0a000008 	beq	bb58 <CKernelOptions::CKernelOptions()+0xf0>
    bb34:	e353003d 	cmp	r3, #61	; 0x3d
    bb38:	e1a05006 	mov	r5, r6
    bb3c:	1a000002 	bne	bb4c <CKernelOptions::CKernelOptions()+0xe4>
    bb40:	ea000028 	b	bbe8 <CKernelOptions::CKernelOptions()+0x180>
    bb44:	e353003d 	cmp	r3, #61	; 0x3d
    bb48:	0a000026 	beq	bbe8 <CKernelOptions::CKernelOptions()+0x180>
    bb4c:	e1f530d1 	ldrsb	r3, [r5, #1]!
    bb50:	e3530000 	cmp	r3, #0
    bb54:	1afffffa 	bne	bb44 <CKernelOptions::CKernelOptions()+0xdc>
    bb58:	e1a01008 	mov	r1, r8
    bb5c:	e1a00006 	mov	r0, r6
    bb60:	eb001387 	bl	10984 <strcmp>
    bb64:	e3500000 	cmp	r0, #0
    bb68:	0affffea 	beq	bb18 <CKernelOptions::CKernelOptions()+0xb0>
    bb6c:	e1a0100a 	mov	r1, sl
    bb70:	e1a00006 	mov	r0, r6
    bb74:	eb001382 	bl	10984 <strcmp>
    bb78:	e3500000 	cmp	r0, #0
    bb7c:	13a0b000 	movne	fp, #0
    bb80:	0affffe4 	beq	bb18 <CKernelOptions::CKernelOptions()+0xb0>
    bb84:	e59f1270 	ldr	r1, [pc, #624]	; bdfc <CKernelOptions::CKernelOptions()+0x394>
    bb88:	e1a00006 	mov	r0, r6
    bb8c:	eb00137c 	bl	10984 <strcmp>
    bb90:	e2505000 	subs	r5, r0, #0
    bb94:	0a000027 	beq	bc38 <CKernelOptions::CKernelOptions()+0x1d0>
    bb98:	e59f1260 	ldr	r1, [pc, #608]	; be00 <CKernelOptions::CKernelOptions()+0x398>
    bb9c:	e1a00006 	mov	r0, r6
    bba0:	eb001377 	bl	10984 <strcmp>
    bba4:	e3500000 	cmp	r0, #0
    bba8:	1a000028 	bne	bc50 <CKernelOptions::CKernelOptions()+0x1e8>
    bbac:	e35b0000 	cmp	fp, #0
    bbb0:	0affffd8 	beq	bb18 <CKernelOptions::CKernelOptions()+0xb0>
    bbb4:	e1db30d0 	ldrsb	r3, [fp]
    bbb8:	e3530000 	cmp	r3, #0
    bbbc:	0affffd5 	beq	bb18 <CKernelOptions::CKernelOptions()+0xb0>
    bbc0:	e1a0000b 	mov	r0, fp
    bbc4:	ebffff50 	bl	b90c <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    bbc8:	e3500004 	cmp	r0, #4
    bbcc:	9584082c 	strls	r0, [r4, #2092]	; 0x82c
    bbd0:	eaffffd0 	b	bb18 <CKernelOptions::CKernelOptions()+0xb0>
    bbd4:	e28d000c 	add	r0, sp, #12
    bbd8:	ebfff7dc 	bl	9b50 <CBcmPropertyTags::~CBcmPropertyTags()>
    bbdc:	e1a00004 	mov	r0, r4
    bbe0:	e28dd014 	add	sp, sp, #20
    bbe4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bbe8:	e3a03000 	mov	r3, #0
    bbec:	e1a01008 	mov	r1, r8
    bbf0:	e5c53000 	strb	r3, [r5]
    bbf4:	e1a00006 	mov	r0, r6
    bbf8:	eb001361 	bl	10984 <strcmp>
    bbfc:	e3500000 	cmp	r0, #0
    bc00:	e285b001 	add	fp, r5, #1
    bc04:	1a000047 	bne	bd28 <CKernelOptions::CKernelOptions()+0x2c0>
    bc08:	e35b0000 	cmp	fp, #0
    bc0c:	0affffc1 	beq	bb18 <CKernelOptions::CKernelOptions()+0xb0>
    bc10:	e1d530d1 	ldrsb	r3, [r5, #1]
    bc14:	e3530000 	cmp	r3, #0
    bc18:	0affffbe 	beq	bb18 <CKernelOptions::CKernelOptions()+0xb0>
    bc1c:	e1a0000b 	mov	r0, fp
    bc20:	ebffff39 	bl	b90c <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    bc24:	e59f31d8 	ldr	r3, [pc, #472]	; be04 <CKernelOptions::CKernelOptions()+0x39c>
    bc28:	e2402d0a 	sub	r2, r0, #640	; 0x280
    bc2c:	e1520003 	cmp	r2, r3
    bc30:	95840810 	strls	r0, [r4, #2064]	; 0x810
    bc34:	eaffffb7 	b	bb18 <CKernelOptions::CKernelOptions()+0xb0>
    bc38:	e1a0100b 	mov	r1, fp
    bc3c:	e3a02013 	mov	r2, #19
    bc40:	e1a00007 	mov	r0, r7
    bc44:	eb0013cd 	bl	10b80 <strncpy>
    bc48:	e5c4582b 	strb	r5, [r4, #2091]	; 0x82b
    bc4c:	eaffffb1 	b	bb18 <CKernelOptions::CKernelOptions()+0xb0>
    bc50:	e59f11b0 	ldr	r1, [pc, #432]	; be08 <CKernelOptions::CKernelOptions()+0x3a0>
    bc54:	e1a00006 	mov	r0, r6
    bc58:	eb001349 	bl	10984 <strcmp>
    bc5c:	e2505000 	subs	r5, r0, #0
    bc60:	1a000005 	bne	bc7c <CKernelOptions::CKernelOptions()+0x214>
    bc64:	e1a0100b 	mov	r1, fp
    bc68:	e3a02002 	mov	r2, #2
    bc6c:	e1a00009 	mov	r0, r9
    bc70:	eb0013c2 	bl	10b80 <strncpy>
    bc74:	e5c45832 	strb	r5, [r4, #2098]	; 0x832
    bc78:	eaffffa6 	b	bb18 <CKernelOptions::CKernelOptions()+0xb0>
    bc7c:	e59f1188 	ldr	r1, [pc, #392]	; be0c <CKernelOptions::CKernelOptions()+0x3a4>
    bc80:	e1a00006 	mov	r0, r6
    bc84:	eb00133e 	bl	10984 <strcmp>
    bc88:	e3500000 	cmp	r0, #0
    bc8c:	1a00000b 	bne	bcc0 <CKernelOptions::CKernelOptions()+0x258>
    bc90:	e35b0000 	cmp	fp, #0
    bc94:	0affff9f 	beq	bb18 <CKernelOptions::CKernelOptions()+0xb0>
    bc98:	e1db30d0 	ldrsb	r3, [fp]
    bc9c:	e3530000 	cmp	r3, #0
    bca0:	0affff9c 	beq	bb18 <CKernelOptions::CKernelOptions()+0xb0>
    bca4:	e1a0000b 	mov	r0, fp
    bca8:	ebffff17 	bl	b90c <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    bcac:	e59f315c 	ldr	r3, [pc, #348]	; be10 <CKernelOptions::CKernelOptions()+0x3a8>
    bcb0:	e24020c8 	sub	r2, r0, #200	; 0xc8
    bcb4:	e1520003 	cmp	r2, r3
    bcb8:	95840834 	strls	r0, [r4, #2100]	; 0x834
    bcbc:	eaffff95 	b	bb18 <CKernelOptions::CKernelOptions()+0xb0>
    bcc0:	e59f114c 	ldr	r1, [pc, #332]	; be14 <CKernelOptions::CKernelOptions()+0x3ac>
    bcc4:	e1a00006 	mov	r0, r6
    bcc8:	eb00132d 	bl	10984 <strcmp>
    bccc:	e2505000 	subs	r5, r0, #0
    bcd0:	1a000005 	bne	bcec <CKernelOptions::CKernelOptions()+0x284>
    bcd4:	e1a0100b 	mov	r1, fp
    bcd8:	e3a02013 	mov	r2, #19
    bcdc:	e2890008 	add	r0, r9, #8
    bce0:	eb0013a6 	bl	10b80 <strncpy>
    bce4:	e5c4584b 	strb	r5, [r4, #2123]	; 0x84b
    bce8:	eaffff8a 	b	bb18 <CKernelOptions::CKernelOptions()+0xb0>
    bcec:	e59f1124 	ldr	r1, [pc, #292]	; be18 <CKernelOptions::CKernelOptions()+0x3b0>
    bcf0:	e1a00006 	mov	r0, r6
    bcf4:	eb001322 	bl	10984 <strcmp>
    bcf8:	e3500000 	cmp	r0, #0
    bcfc:	1a000019 	bne	bd68 <CKernelOptions::CKernelOptions()+0x300>
    bd00:	e35b0000 	cmp	fp, #0
    bd04:	0affff83 	beq	bb18 <CKernelOptions::CKernelOptions()+0xb0>
    bd08:	e1db30d0 	ldrsb	r3, [fp]
    bd0c:	e3530000 	cmp	r3, #0
    bd10:	0affff80 	beq	bb18 <CKernelOptions::CKernelOptions()+0xb0>
    bd14:	e1a0000b 	mov	r0, fp
    bd18:	ebfffefb 	bl	b90c <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    bd1c:	e3500002 	cmp	r0, #2
    bd20:	9584084c 	strls	r0, [r4, #2124]	; 0x84c
    bd24:	eaffff7b 	b	bb18 <CKernelOptions::CKernelOptions()+0xb0>
    bd28:	e1a0100a 	mov	r1, sl
    bd2c:	e1a00006 	mov	r0, r6
    bd30:	eb001313 	bl	10984 <strcmp>
    bd34:	e3500000 	cmp	r0, #0
    bd38:	1affff91 	bne	bb84 <CKernelOptions::CKernelOptions()+0x11c>
    bd3c:	e35b0000 	cmp	fp, #0
    bd40:	0affff74 	beq	bb18 <CKernelOptions::CKernelOptions()+0xb0>
    bd44:	e1d530d1 	ldrsb	r3, [r5, #1]
    bd48:	e3530000 	cmp	r3, #0
    bd4c:	0affff71 	beq	bb18 <CKernelOptions::CKernelOptions()+0xb0>
    bd50:	e1a0000b 	mov	r0, fp
    bd54:	ebfffeec 	bl	b90c <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    bd58:	e2403e1e 	sub	r3, r0, #480	; 0x1e0
    bd5c:	e3530f96 	cmp	r3, #600	; 0x258
    bd60:	95840814 	strls	r0, [r4, #2068]	; 0x814
    bd64:	eaffff6b 	b	bb18 <CKernelOptions::CKernelOptions()+0xb0>
    bd68:	e59f10ac 	ldr	r1, [pc, #172]	; be1c <CKernelOptions::CKernelOptions()+0x3b4>
    bd6c:	e1a00006 	mov	r0, r6
    bd70:	eb001303 	bl	10984 <strcmp>
    bd74:	e3500000 	cmp	r0, #0
    bd78:	1a000006 	bne	bd98 <CKernelOptions::CKernelOptions()+0x330>
    bd7c:	e1a0000b 	mov	r0, fp
    bd80:	e59f1098 	ldr	r1, [pc, #152]	; be20 <CKernelOptions::CKernelOptions()+0x3b8>
    bd84:	eb0012fe 	bl	10984 <strcmp>
    bd88:	e3500000 	cmp	r0, #0
    bd8c:	03a03001 	moveq	r3, #1
    bd90:	05c43850 	strbeq	r3, [r4, #2128]	; 0x850
    bd94:	eaffff5f 	b	bb18 <CKernelOptions::CKernelOptions()+0xb0>
    bd98:	e1a00006 	mov	r0, r6
    bd9c:	e59f1080 	ldr	r1, [pc, #128]	; be24 <CKernelOptions::CKernelOptions()+0x3bc>
    bda0:	eb0012f7 	bl	10984 <strcmp>
    bda4:	e2903000 	adds	r3, r0, #0
    bda8:	13a03001 	movne	r3, #1
    bdac:	e35b0000 	cmp	fp, #0
    bdb0:	03833001 	orreq	r3, r3, #1
    bdb4:	e3530000 	cmp	r3, #0
    bdb8:	1affff56 	bne	bb18 <CKernelOptions::CKernelOptions()+0xb0>
    bdbc:	e1db30d0 	ldrsb	r3, [fp]
    bdc0:	e3530000 	cmp	r3, #0
    bdc4:	0affff53 	beq	bb18 <CKernelOptions::CKernelOptions()+0xb0>
    bdc8:	e1a0000b 	mov	r0, fp
    bdcc:	ebfffece 	bl	b90c <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    bdd0:	e2403028 	sub	r3, r0, #40	; 0x28
    bdd4:	e3530026 	cmp	r3, #38	; 0x26
    bdd8:	95840854 	strls	r0, [r4, #2132]	; 0x854
    bddc:	eaffff4d 	b	bb18 <CKernelOptions::CKernelOptions()+0xb0>
    bde0:	0001390c 	.word	0x0001390c
    bde4:	00013914 	.word	0x00013914
    bde8:	00015340 	.word	0x00015340
    bdec:	0000080c 	.word	0x0000080c
    bdf0:	00050001 	.word	0x00050001
    bdf4:	00013980 	.word	0x00013980
    bdf8:	00013918 	.word	0x00013918
    bdfc:	00013920 	.word	0x00013920
    be00:	00013928 	.word	0x00013928
    be04:	0000053c 	.word	0x0000053c
    be08:	00013934 	.word	0x00013934
    be0c:	0001393c 	.word	0x0001393c
    be10:	00001e78 	.word	0x00001e78
    be14:	0001394c 	.word	0x0001394c
    be18:	00013958 	.word	0x00013958
    be1c:	00013964 	.word	0x00013964
    be20:	0001396c 	.word	0x0001396c
    be24:	00013974 	.word	0x00013974

0000be28 <CKernelOptions::GetOptionValue(char*)>:
    be28:	e1d030d0 	ldrsb	r3, [r0]
    be2c:	e3530000 	cmp	r3, #0
    be30:	1a000003 	bne	be44 <CKernelOptions::GetOptionValue(char*)+0x1c>
    be34:	ea000007 	b	be58 <CKernelOptions::GetOptionValue(char*)+0x30>
    be38:	e1f030d1 	ldrsb	r3, [r0, #1]!
    be3c:	e3530000 	cmp	r3, #0
    be40:	0a000004 	beq	be58 <CKernelOptions::GetOptionValue(char*)+0x30>
    be44:	e353003d 	cmp	r3, #61	; 0x3d
    be48:	1afffffa 	bne	be38 <CKernelOptions::GetOptionValue(char*)+0x10>
    be4c:	e3a02000 	mov	r2, #0
    be50:	e2803001 	add	r3, r0, #1
    be54:	e5c02000 	strb	r2, [r0]
    be58:	e1a00003 	mov	r0, r3
    be5c:	e12fff1e 	bx	lr

0000be60 <CKernelOptions::GetDecimal(char*)>:
    be60:	e2503000 	subs	r3, r0, #0
    be64:	0a000002 	beq	be74 <CKernelOptions::GetDecimal(char*)+0x14>
    be68:	e1d330d0 	ldrsb	r3, [r3]
    be6c:	e3530000 	cmp	r3, #0
    be70:	1a000001 	bne	be7c <CKernelOptions::GetDecimal(char*)+0x1c>
    be74:	e3e00000 	mvn	r0, #0
    be78:	e12fff1e 	bx	lr
    be7c:	eafffea2 	b	b90c <CKernelOptions::GetDecimal(char*) [clone .part.0]>

0000be80 <CLogger::CLogger(unsigned int, CTimer*)>:
    be80:	e92d4010 	push	{r4, lr}
    be84:	e3a03000 	mov	r3, #0
    be88:	e1a04000 	mov	r4, r0
    be8c:	e3a00001 	mov	r0, #1
    be90:	e884000e 	stm	r4, {r1, r2, r3}
    be94:	e584300c 	str	r3, [r4, #12]
    be98:	e5843010 	str	r3, [r4, #16]
    be9c:	e5843014 	str	r3, [r4, #20]
    bea0:	e58430e4 	str	r3, [r4, #228]	; 0xe4
    bea4:	e58430e8 	str	r3, [r4, #232]	; 0xe8
    bea8:	e58430f0 	str	r3, [r4, #240]	; 0xf0
    beac:	e58430f4 	str	r3, [r4, #244]	; 0xf4
    beb0:	e5840018 	str	r0, [r4, #24]
    beb4:	e58400ec 	str	r0, [r4, #236]	; 0xec
    beb8:	e3a00901 	mov	r0, #16384	; 0x4000
    bebc:	eb0016f5 	bl	11a98 <operator new[](unsigned int)>
    bec0:	e59f300c 	ldr	r3, [pc, #12]	; bed4 <CLogger::CLogger(unsigned int, CTimer*)+0x54>
    bec4:	e584000c 	str	r0, [r4, #12]
    bec8:	e5834000 	str	r4, [r3]
    becc:	e1a00004 	mov	r0, r4
    bed0:	e8bd8010 	pop	{r4, pc}
    bed4:	00015344 	.word	0x00015344

0000bed8 <CLogger::~CLogger()>:
    bed8:	e3a02000 	mov	r2, #0
    bedc:	e59f1064 	ldr	r1, [pc, #100]	; bf48 <CLogger::~CLogger()+0x70>
    bee0:	e92d4070 	push	{r4, r5, r6, lr}
    bee4:	e59030e8 	ldr	r3, [r0, #232]	; 0xe8
    bee8:	e1a04000 	mov	r4, r0
    beec:	e1a06002 	mov	r6, r2
    bef0:	e3a05f42 	mov	r5, #264	; 0x108
    bef4:	e5812000 	str	r2, [r1]
    bef8:	ea000008 	b	bf20 <CLogger::~CLogger()+0x48>
    befc:	e591001c 	ldr	r0, [r1, #28]
    bf00:	e1a01005 	mov	r1, r5
    bf04:	eb0016e6 	bl	11aa4 <operator delete(void*, unsigned int)>
    bf08:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
    bf0c:	e2833001 	add	r3, r3, #1
    bf10:	e3530032 	cmp	r3, #50	; 0x32
    bf14:	e58430e8 	str	r3, [r4, #232]	; 0xe8
    bf18:	03a03000 	moveq	r3, #0
    bf1c:	058460e8 	streq	r6, [r4, #232]	; 0xe8
    bf20:	e59420e4 	ldr	r2, [r4, #228]	; 0xe4
    bf24:	e0841103 	add	r1, r4, r3, lsl #2
    bf28:	e1520003 	cmp	r2, r3
    bf2c:	1afffff2 	bne	befc <CLogger::~CLogger()+0x24>
    bf30:	e594000c 	ldr	r0, [r4, #12]
    bf34:	e3500000 	cmp	r0, #0
    bf38:	0a000000 	beq	bf40 <CLogger::~CLogger()+0x68>
    bf3c:	eb0016d7 	bl	11aa0 <operator delete[](void*)>
    bf40:	e1a00004 	mov	r0, r4
    bf44:	e8bd8070 	pop	{r4, r5, r6, pc}
    bf48:	00015344 	.word	0x00015344

0000bf4c <CLogger::Get()>:
    bf4c:	e59f3004 	ldr	r3, [pc, #4]	; bf58 <CLogger::Get()+0xc>
    bf50:	e5930000 	ldr	r0, [r3]
    bf54:	e12fff1e 	bx	lr
    bf58:	00015344 	.word	0x00015344

0000bf5c <CLogger::Write(char const*)>:
    bf5c:	e92d4070 	push	{r4, r5, r6, lr}
    bf60:	e1a04000 	mov	r4, r0
    bf64:	e1a00001 	mov	r0, r1
    bf68:	e1a05001 	mov	r5, r1
    bf6c:	eb00127a 	bl	1095c <strlen>
    bf70:	e1a06000 	mov	r6, r0
    bf74:	e5940008 	ldr	r0, [r4, #8]
    bf78:	e1a02006 	mov	r2, r6
    bf7c:	e5903000 	ldr	r3, [r0]
    bf80:	e1a01005 	mov	r1, r5
    bf84:	e593300c 	ldr	r3, [r3, #12]
    bf88:	e12fff33 	blx	r3
    bf8c:	e5940018 	ldr	r0, [r4, #24]
    bf90:	e3500000 	cmp	r0, #0
    bf94:	1a000018 	bne	bffc <CLogger::Write(char const*)+0xa0>
    bf98:	e59f2064 	ldr	r2, [pc, #100]	; c004 <CLogger::Write(char const*)+0xa8>
    bf9c:	e0850006 	add	r0, r5, r6
    bfa0:	e1550000 	cmp	r5, r0
    bfa4:	0a00000f 	beq	bfe8 <CLogger::Write(char const*)+0x8c>
    bfa8:	e0d510d1 	ldrsb	r1, [r5], #1
    bfac:	e351000d 	cmp	r1, #13
    bfb0:	0afffffa 	beq	bfa0 <CLogger::Write(char const*)+0x44>
    bfb4:	e594c010 	ldr	ip, [r4, #16]
    bfb8:	e594e00c 	ldr	lr, [r4, #12]
    bfbc:	e7ce100c 	strb	r1, [lr, ip]
    bfc0:	e5943010 	ldr	r3, [r4, #16]
    bfc4:	e5941014 	ldr	r1, [r4, #20]
    bfc8:	e2833001 	add	r3, r3, #1
    bfcc:	e0033002 	and	r3, r3, r2
    bfd0:	e1530001 	cmp	r3, r1
    bfd4:	e5843010 	str	r3, [r4, #16]
    bfd8:	1afffff0 	bne	bfa0 <CLogger::Write(char const*)+0x44>
    bfdc:	e2433001 	sub	r3, r3, #1
    bfe0:	e0033002 	and	r3, r3, r2
    bfe4:	e5843010 	str	r3, [r4, #16]
    bfe8:	e5943018 	ldr	r3, [r4, #24]
    bfec:	e3530000 	cmp	r3, #0
    bff0:	08bd8070 	popeq	{r4, r5, r6, pc}
    bff4:	e8bd4070 	pop	{r4, r5, r6, lr}
    bff8:	ea001678 	b	119e0 <LeaveCritical>
    bffc:	eb00164a 	bl	1192c <EnterCritical>
    c000:	eaffffe4 	b	bf98 <CLogger::Write(char const*)+0x3c>
    c004:	00003fff 	.word	0x00003fff

0000c008 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)>:
    c008:	e590c000 	ldr	ip, [r0]
    c00c:	e152000c 	cmp	r2, ip
    c010:	812fff1e 	bxhi	lr
    c014:	e92d4070 	push	{r4, r5, r6, lr}
    c018:	e1a05003 	mov	r5, r3
    c01c:	e3a03000 	mov	r3, #0
    c020:	e24dd0c8 	sub	sp, sp, #200	; 0xc8
    c024:	e1520003 	cmp	r2, r3
    c028:	e1a04000 	mov	r4, r0
    c02c:	e5cd3000 	strb	r3, [sp]
    c030:	0a00000f 	beq	c074 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x6c>
    c034:	e1a0000d 	mov	r0, sp
    c038:	eb0012e3 	bl	10bcc <strcat>
    c03c:	e1a0000d 	mov	r0, sp
    c040:	e59f1088 	ldr	r1, [pc, #136]	; c0d0 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xc8>
    c044:	eb0012e0 	bl	10bcc <strcat>
    c048:	e1a01005 	mov	r1, r5
    c04c:	e1a0000d 	mov	r0, sp
    c050:	eb0012dd 	bl	10bcc <strcat>
    c054:	e1a0000d 	mov	r0, sp
    c058:	e59f1074 	ldr	r1, [pc, #116]	; c0d4 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xcc>
    c05c:	eb0012da 	bl	10bcc <strcat>
    c060:	e1a0100d 	mov	r1, sp
    c064:	e1a00004 	mov	r0, r4
    c068:	ebffffbb 	bl	bf5c <CLogger::Write(char const*)>
    c06c:	e28dd0c8 	add	sp, sp, #200	; 0xc8
    c070:	e8bd8070 	pop	{r4, r5, r6, pc}
    c074:	e1a06001 	mov	r6, r1
    c078:	e1a0000d 	mov	r0, sp
    c07c:	e59f1054 	ldr	r1, [pc, #84]	; c0d8 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd0>
    c080:	eb0012b3 	bl	10b54 <strcpy>
    c084:	e1a01006 	mov	r1, r6
    c088:	e1a0000d 	mov	r0, sp
    c08c:	eb0012ce 	bl	10bcc <strcat>
    c090:	e59f1038 	ldr	r1, [pc, #56]	; c0d0 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xc8>
    c094:	e1a0000d 	mov	r0, sp
    c098:	eb0012cb 	bl	10bcc <strcat>
    c09c:	e1a01005 	mov	r1, r5
    c0a0:	e1a0000d 	mov	r0, sp
    c0a4:	eb0012c8 	bl	10bcc <strcat>
    c0a8:	e59f102c 	ldr	r1, [pc, #44]	; c0dc <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd4>
    c0ac:	e1a0000d 	mov	r0, sp
    c0b0:	eb0012c5 	bl	10bcc <strcat>
    c0b4:	e59f1018 	ldr	r1, [pc, #24]	; c0d4 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xcc>
    c0b8:	e1a0000d 	mov	r0, sp
    c0bc:	eb0012c2 	bl	10bcc <strcat>
    c0c0:	e1a0100d 	mov	r1, sp
    c0c4:	e1a00004 	mov	r0, r4
    c0c8:	ebffffa3 	bl	bf5c <CLogger::Write(char const*)>
    c0cc:	eb000e57 	bl	fa30 <halt>
    c0d0:	00013990 	.word	0x00013990
    c0d4:	0001358c 	.word	0x0001358c
    c0d8:	00013988 	.word	0x00013988
    c0dc:	00013994 	.word	0x00013994

0000c0e0 <CLogger::Read(void*, unsigned int)>:
    c0e0:	e92d4070 	push	{r4, r5, r6, lr}
    c0e4:	e1a04000 	mov	r4, r0
    c0e8:	e5900018 	ldr	r0, [r0, #24]
    c0ec:	e1a05001 	mov	r5, r1
    c0f0:	e3500000 	cmp	r0, #0
    c0f4:	e1a06002 	mov	r6, r2
    c0f8:	1a00001c 	bne	c170 <CLogger::Read(void*, unsigned int)+0x90>
    c0fc:	e5942010 	ldr	r2, [r4, #16]
    c100:	e5943014 	ldr	r3, [r4, #20]
    c104:	e1520003 	cmp	r2, r3
    c108:	0a000021 	beq	c194 <CLogger::Read(void*, unsigned int)+0xb4>
    c10c:	e1a01005 	mov	r1, r5
    c110:	e59f2088 	ldr	r2, [pc, #136]	; c1a0 <CLogger::Read(void*, unsigned int)+0xc0>
    c114:	e3a05000 	mov	r5, #0
    c118:	ea00000a 	b	c148 <CLogger::Read(void*, unsigned int)+0x68>
    c11c:	e594000c 	ldr	r0, [r4, #12]
    c120:	e2855001 	add	r5, r5, #1
    c124:	e19030d3 	ldrsb	r3, [r0, r3]
    c128:	e4c13001 	strb	r3, [r1], #1
    c12c:	e5943014 	ldr	r3, [r4, #20]
    c130:	e5940010 	ldr	r0, [r4, #16]
    c134:	e2833001 	add	r3, r3, #1
    c138:	e0033002 	and	r3, r3, r2
    c13c:	e1530000 	cmp	r3, r0
    c140:	e5843014 	str	r3, [r4, #20]
    c144:	0a000001 	beq	c150 <CLogger::Read(void*, unsigned int)+0x70>
    c148:	e1550006 	cmp	r5, r6
    c14c:	1afffff2 	bne	c11c <CLogger::Read(void*, unsigned int)+0x3c>
    c150:	e5943018 	ldr	r3, [r4, #24]
    c154:	e3530000 	cmp	r3, #0
    c158:	1a000001 	bne	c164 <CLogger::Read(void*, unsigned int)+0x84>
    c15c:	e1a00005 	mov	r0, r5
    c160:	e8bd8070 	pop	{r4, r5, r6, pc}
    c164:	eb00161d 	bl	119e0 <LeaveCritical>
    c168:	e1a00005 	mov	r0, r5
    c16c:	e8bd8070 	pop	{r4, r5, r6, pc}
    c170:	eb0015ed 	bl	1192c <EnterCritical>
    c174:	e5942010 	ldr	r2, [r4, #16]
    c178:	e5943014 	ldr	r3, [r4, #20]
    c17c:	e1520003 	cmp	r2, r3
    c180:	1affffe1 	bne	c10c <CLogger::Read(void*, unsigned int)+0x2c>
    c184:	e5943018 	ldr	r3, [r4, #24]
    c188:	e3530000 	cmp	r3, #0
    c18c:	0a000000 	beq	c194 <CLogger::Read(void*, unsigned int)+0xb4>
    c190:	eb001612 	bl	119e0 <LeaveCritical>
    c194:	e3e05000 	mvn	r5, #0
    c198:	e1a00005 	mov	r0, r5
    c19c:	e8bd8070 	pop	{r4, r5, r6, pc}
    c1a0:	00003fff 	.word	0x00003fff

0000c1a4 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>:
    c1a4:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    c1a8:	e1a05000 	mov	r5, r0
    c1ac:	e24dd00c 	sub	sp, sp, #12
    c1b0:	e3a00f42 	mov	r0, #264	; 0x108
    c1b4:	e1a07003 	mov	r7, r3
    c1b8:	e1a09002 	mov	r9, r2
    c1bc:	e1a08001 	mov	r8, r1
    c1c0:	eb001633 	bl	11a94 <operator new(unsigned int)>
    c1c4:	e3a06000 	mov	r6, #0
    c1c8:	e1a04000 	mov	r4, r0
    c1cc:	e1a01008 	mov	r1, r8
    c1d0:	e3a02032 	mov	r2, #50	; 0x32
    c1d4:	e4c09001 	strb	r9, [r0], #1
    c1d8:	eb001268 	bl	10b80 <strncpy>
    c1dc:	e1a01007 	mov	r1, r7
    c1e0:	e2840033 	add	r0, r4, #51	; 0x33
    c1e4:	e3a020c8 	mov	r2, #200	; 0xc8
    c1e8:	e5c46032 	strb	r6, [r4, #50]	; 0x32
    c1ec:	eb001263 	bl	10b80 <strncpy>
    c1f0:	e5950004 	ldr	r0, [r5, #4]
    c1f4:	e5c460fa 	strb	r6, [r4, #250]	; 0xfa
    c1f8:	e1500006 	cmp	r0, r6
    c1fc:	0a000004 	beq	c214 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x70>
    c200:	e28d2004 	add	r2, sp, #4
    c204:	e1a0100d 	mov	r1, sp
    c208:	eb000ee3 	bl	fd9c <CTimer::GetLocalTime(unsigned int*, unsigned int*)>
    c20c:	e1500006 	cmp	r0, r6
    c210:	1a000021 	bne	c29c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xf8>
    c214:	e3a03000 	mov	r3, #0
    c218:	e59500ec 	ldr	r0, [r5, #236]	; 0xec
    c21c:	e58430fc 	str	r3, [r4, #252]	; 0xfc
    c220:	e3500000 	cmp	r0, #0
    c224:	e5843100 	str	r3, [r4, #256]	; 0x100
    c228:	e5843104 	str	r3, [r4, #260]	; 0x104
    c22c:	1a000027 	bne	c2d0 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x12c>
    c230:	e59520e4 	ldr	r2, [r5, #228]	; 0xe4
    c234:	e2823001 	add	r3, r2, #1
    c238:	e3530032 	cmp	r3, #50	; 0x32
    c23c:	e0852102 	add	r2, r5, r2, lsl #2
    c240:	e582401c 	str	r4, [r2, #28]
    c244:	03a02000 	moveq	r2, #0
    c248:	01a03002 	moveq	r3, r2
    c24c:	058520e4 	streq	r2, [r5, #228]	; 0xe4
    c250:	e59520e8 	ldr	r2, [r5, #232]	; 0xe8
    c254:	158530e4 	strne	r3, [r5, #228]	; 0xe4
    c258:	e1520003 	cmp	r2, r3
    c25c:	0a00001e 	beq	c2dc <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x138>
    c260:	e3500000 	cmp	r0, #0
    c264:	13a04000 	movne	r4, #0
    c268:	0a000005 	beq	c284 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xe0>
    c26c:	eb0015db 	bl	119e0 <LeaveCritical>
    c270:	e3540000 	cmp	r4, #0
    c274:	0a000002 	beq	c284 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xe0>
    c278:	e1a00004 	mov	r0, r4
    c27c:	e3a01f42 	mov	r1, #264	; 0x108
    c280:	eb001607 	bl	11aa4 <operator delete(void*, unsigned int)>
    c284:	e59530f0 	ldr	r3, [r5, #240]	; 0xf0
    c288:	e3530000 	cmp	r3, #0
    c28c:	0a000000 	beq	c294 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xf0>
    c290:	e12fff33 	blx	r3
    c294:	e28dd00c 	add	sp, sp, #12
    c298:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    c29c:	e59d3004 	ldr	r3, [sp, #4]
    c2a0:	e59f105c 	ldr	r1, [pc, #92]	; c304 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x160>
    c2a4:	e59d2000 	ldr	r2, [sp]
    c2a8:	e0831391 	umull	r1, r3, r1, r3
    c2ac:	e1a036a3 	lsr	r3, r3, #13
    c2b0:	e5950004 	ldr	r0, [r5, #4]
    c2b4:	e5843100 	str	r3, [r4, #256]	; 0x100
    c2b8:	e58420fc 	str	r2, [r4, #252]	; 0xfc
    c2bc:	eb000e88 	bl	fce4 <CTimer::GetTimeZone() const>
    c2c0:	e5840104 	str	r0, [r4, #260]	; 0x104
    c2c4:	e59500ec 	ldr	r0, [r5, #236]	; 0xec
    c2c8:	e3500000 	cmp	r0, #0
    c2cc:	0affffd7 	beq	c230 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x8c>
    c2d0:	eb001595 	bl	1192c <EnterCritical>
    c2d4:	e59500ec 	ldr	r0, [r5, #236]	; 0xec
    c2d8:	eaffffd4 	b	c230 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x8c>
    c2dc:	e2832001 	add	r2, r3, #1
    c2e0:	e3520032 	cmp	r2, #50	; 0x32
    c2e4:	e0853103 	add	r3, r5, r3, lsl #2
    c2e8:	e593401c 	ldr	r4, [r3, #28]
    c2ec:	03a03000 	moveq	r3, #0
    c2f0:	158520e8 	strne	r2, [r5, #232]	; 0xe8
    c2f4:	058530e8 	streq	r3, [r5, #232]	; 0xe8
    c2f8:	e3500000 	cmp	r0, #0
    c2fc:	0affffdb 	beq	c270 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xcc>
    c300:	eaffffd9 	b	c26c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xc8>
    c304:	d1b71759 	.word	0xd1b71759

0000c308 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)>:
    c308:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c30c:	e1a04000 	mov	r4, r0
    c310:	e59000ec 	ldr	r0, [r0, #236]	; 0xec
    c314:	e1a07001 	mov	r7, r1
    c318:	e3500000 	cmp	r0, #0
    c31c:	e1a08002 	mov	r8, r2
    c320:	e1a06003 	mov	r6, r3
    c324:	1a000022 	bne	c3b4 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xac>
    c328:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
    c32c:	e59420e4 	ldr	r2, [r4, #228]	; 0xe4
    c330:	e1530002 	cmp	r3, r2
    c334:	0a000028 	beq	c3dc <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xd4>
    c338:	e283c001 	add	ip, r3, #1
    c33c:	e35c0032 	cmp	ip, #50	; 0x32
    c340:	e0843103 	add	r3, r4, r3, lsl #2
    c344:	e593501c 	ldr	r5, [r3, #28]
    c348:	03a03000 	moveq	r3, #0
    c34c:	1584c0e8 	strne	ip, [r4, #232]	; 0xe8
    c350:	058430e8 	streq	r3, [r4, #232]	; 0xe8
    c354:	e3500000 	cmp	r0, #0
    c358:	1a000021 	bne	c3e4 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xdc>
    c35c:	e1a01005 	mov	r1, r5
    c360:	e4d12001 	ldrb	r2, [r1], #1
    c364:	e1a00008 	mov	r0, r8
    c368:	e5c72000 	strb	r2, [r7]
    c36c:	eb0011f8 	bl	10b54 <strcpy>
    c370:	e2851033 	add	r1, r5, #51	; 0x33
    c374:	e1a00006 	mov	r0, r6
    c378:	eb0011f5 	bl	10b54 <strcpy>
    c37c:	e59520fc 	ldr	r2, [r5, #252]	; 0xfc
    c380:	e59d1018 	ldr	r1, [sp, #24]
    c384:	e5953100 	ldr	r3, [r5, #256]	; 0x100
    c388:	e5812000 	str	r2, [r1]
    c38c:	e59d201c 	ldr	r2, [sp, #28]
    c390:	e1a00005 	mov	r0, r5
    c394:	e5823000 	str	r3, [r2]
    c398:	e5953104 	ldr	r3, [r5, #260]	; 0x104
    c39c:	e59d2020 	ldr	r2, [sp, #32]
    c3a0:	e3a01f42 	mov	r1, #264	; 0x108
    c3a4:	e5823000 	str	r3, [r2]
    c3a8:	eb0015bd 	bl	11aa4 <operator delete(void*, unsigned int)>
    c3ac:	e3a00001 	mov	r0, #1
    c3b0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    c3b4:	eb00155c 	bl	1192c <EnterCritical>
    c3b8:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
    c3bc:	e59420e4 	ldr	r2, [r4, #228]	; 0xe4
    c3c0:	e1520003 	cmp	r2, r3
    c3c4:	159400ec 	ldrne	r0, [r4, #236]	; 0xec
    c3c8:	1affffda 	bne	c338 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x30>
    c3cc:	e59430ec 	ldr	r3, [r4, #236]	; 0xec
    c3d0:	e3530000 	cmp	r3, #0
    c3d4:	0a000000 	beq	c3dc <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xd4>
    c3d8:	eb001580 	bl	119e0 <LeaveCritical>
    c3dc:	e3a00000 	mov	r0, #0
    c3e0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    c3e4:	eb00157d 	bl	119e0 <LeaveCritical>
    c3e8:	eaffffdb 	b	c35c <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x54>

0000c3ec <CLogger::RegisterEventNotificationHandler(void (*)())>:
    c3ec:	e58010f0 	str	r1, [r0, #240]	; 0xf0
    c3f0:	e12fff1e 	bx	lr

0000c3f4 <CLogger::RegisterPanicHandler(void (*)())>:
    c3f4:	e58010f4 	str	r1, [r0, #244]	; 0xf4
    c3f8:	e12fff1e 	bx	lr

0000c3fc <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>:
    c3fc:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    c400:	e1a07003 	mov	r7, r3
    c404:	e24dd024 	sub	sp, sp, #36	; 0x24
    c408:	e1a04000 	mov	r4, r0
    c40c:	e1a0000d 	mov	r0, sp
    c410:	e1a05002 	mov	r5, r2
    c414:	e1a06001 	mov	r6, r1
    c418:	eb000989 	bl	ea44 <CString::CString()>
    c41c:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
    c420:	e1a01007 	mov	r1, r7
    c424:	e1a0000d 	mov	r0, sp
    c428:	eb000b52 	bl	f178 <CString::FormatV(char const*, std::__va_list)>
    c42c:	e1a0000d 	mov	r0, sp
    c430:	eb000999 	bl	ea9c <CString::operator char const*() const>
    c434:	e1a02005 	mov	r2, r5
    c438:	e1a03000 	mov	r3, r0
    c43c:	e1a01006 	mov	r1, r6
    c440:	e1a00004 	mov	r0, r4
    c444:	ebffff56 	bl	c1a4 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>
    c448:	e5943000 	ldr	r3, [r4]
    c44c:	e1550003 	cmp	r5, r3
    c450:	8a00002c 	bhi	c508 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x10c>
    c454:	e28d0010 	add	r0, sp, #16
    c458:	eb000979 	bl	ea44 <CString::CString()>
    c45c:	e3550000 	cmp	r5, #0
    c460:	0a00002c 	beq	c518 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x11c>
    c464:	e5940004 	ldr	r0, [r4, #4]
    c468:	e3500000 	cmp	r0, #0
    c46c:	0a00004a 	beq	c59c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1a0>
    c470:	eb000eba 	bl	ff60 <CTimer::GetTimeString()>
    c474:	e2507000 	subs	r7, r0, #0
    c478:	0a000047 	beq	c59c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1a0>
    c47c:	e1a00007 	mov	r0, r7
    c480:	eb000985 	bl	ea9c <CString::operator char const*() const>
    c484:	e1a01000 	mov	r1, r0
    c488:	e28d0010 	add	r0, sp, #16
    c48c:	eb0009b4 	bl	eb64 <CString::Append(char const*)>
    c490:	e59f1144 	ldr	r1, [pc, #324]	; c5dc <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e0>
    c494:	e28d0010 	add	r0, sp, #16
    c498:	eb0009b1 	bl	eb64 <CString::Append(char const*)>
    c49c:	e5973000 	ldr	r3, [r7]
    c4a0:	e1a00007 	mov	r0, r7
    c4a4:	e5933004 	ldr	r3, [r3, #4]
    c4a8:	e12fff33 	blx	r3
    c4ac:	e1a01006 	mov	r1, r6
    c4b0:	e28d0010 	add	r0, sp, #16
    c4b4:	eb0009aa 	bl	eb64 <CString::Append(char const*)>
    c4b8:	e59f1120 	ldr	r1, [pc, #288]	; c5e0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e4>
    c4bc:	e28d0010 	add	r0, sp, #16
    c4c0:	eb0009a7 	bl	eb64 <CString::Append(char const*)>
    c4c4:	e1a0000d 	mov	r0, sp
    c4c8:	eb000973 	bl	ea9c <CString::operator char const*() const>
    c4cc:	e1a01000 	mov	r1, r0
    c4d0:	e28d0010 	add	r0, sp, #16
    c4d4:	eb0009a2 	bl	eb64 <CString::Append(char const*)>
    c4d8:	e3550000 	cmp	r5, #0
    c4dc:	0a00001e 	beq	c55c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x160>
    c4e0:	e59f10fc 	ldr	r1, [pc, #252]	; c5e4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e8>
    c4e4:	e28d0010 	add	r0, sp, #16
    c4e8:	eb00099d 	bl	eb64 <CString::Append(char const*)>
    c4ec:	e28d0010 	add	r0, sp, #16
    c4f0:	eb000969 	bl	ea9c <CString::operator char const*() const>
    c4f4:	e1a01000 	mov	r1, r0
    c4f8:	e1a00004 	mov	r0, r4
    c4fc:	ebfffe96 	bl	bf5c <CLogger::Write(char const*)>
    c500:	e28d0010 	add	r0, sp, #16
    c504:	eb00091b 	bl	e978 <CString::~CString()>
    c508:	e1a0000d 	mov	r0, sp
    c50c:	eb000919 	bl	e978 <CString::~CString()>
    c510:	e28dd024 	add	sp, sp, #36	; 0x24
    c514:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    c518:	e59f10c8 	ldr	r1, [pc, #200]	; c5e8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1ec>
    c51c:	e28d0010 	add	r0, sp, #16
    c520:	eb000963 	bl	eab4 <CString::operator=(char const*)>
    c524:	e5940004 	ldr	r0, [r4, #4]
    c528:	e3500000 	cmp	r0, #0
    c52c:	1a000026 	bne	c5cc <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1d0>
    c530:	e1a01006 	mov	r1, r6
    c534:	e28d0010 	add	r0, sp, #16
    c538:	eb000989 	bl	eb64 <CString::Append(char const*)>
    c53c:	e59f109c 	ldr	r1, [pc, #156]	; c5e0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e4>
    c540:	e28d0010 	add	r0, sp, #16
    c544:	eb000986 	bl	eb64 <CString::Append(char const*)>
    c548:	e1a0000d 	mov	r0, sp
    c54c:	eb000952 	bl	ea9c <CString::operator char const*() const>
    c550:	e1a01000 	mov	r1, r0
    c554:	e28d0010 	add	r0, sp, #16
    c558:	eb000981 	bl	eb64 <CString::Append(char const*)>
    c55c:	e59f1088 	ldr	r1, [pc, #136]	; c5ec <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1f0>
    c560:	e28d0010 	add	r0, sp, #16
    c564:	eb00097e 	bl	eb64 <CString::Append(char const*)>
    c568:	e59f1074 	ldr	r1, [pc, #116]	; c5e4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e8>
    c56c:	e28d0010 	add	r0, sp, #16
    c570:	eb00097b 	bl	eb64 <CString::Append(char const*)>
    c574:	e28d0010 	add	r0, sp, #16
    c578:	eb000947 	bl	ea9c <CString::operator char const*() const>
    c57c:	e1a01000 	mov	r1, r0
    c580:	e1a00004 	mov	r0, r4
    c584:	ebfffe74 	bl	bf5c <CLogger::Write(char const*)>
    c588:	e59430f4 	ldr	r3, [r4, #244]	; 0xf4
    c58c:	e3530000 	cmp	r3, #0
    c590:	0a000000 	beq	c598 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x19c>
    c594:	e12fff33 	blx	r3
    c598:	eb000d24 	bl	fa30 <halt>
    c59c:	e1a01006 	mov	r1, r6
    c5a0:	e28d0010 	add	r0, sp, #16
    c5a4:	eb00096e 	bl	eb64 <CString::Append(char const*)>
    c5a8:	e59f1030 	ldr	r1, [pc, #48]	; c5e0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e4>
    c5ac:	e28d0010 	add	r0, sp, #16
    c5b0:	eb00096b 	bl	eb64 <CString::Append(char const*)>
    c5b4:	e1a0000d 	mov	r0, sp
    c5b8:	eb000937 	bl	ea9c <CString::operator char const*() const>
    c5bc:	e1a01000 	mov	r1, r0
    c5c0:	e28d0010 	add	r0, sp, #16
    c5c4:	eb000966 	bl	eb64 <CString::Append(char const*)>
    c5c8:	eaffffc4 	b	c4e0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xe4>
    c5cc:	eb000e63 	bl	ff60 <CTimer::GetTimeString()>
    c5d0:	e2507000 	subs	r7, r0, #0
    c5d4:	1affffa8 	bne	c47c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x80>
    c5d8:	eaffffd4 	b	c530 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x134>
    c5dc:	0001399c 	.word	0x0001399c
    c5e0:	00013990 	.word	0x00013990
    c5e4:	0001358c 	.word	0x0001358c
    c5e8:	00013988 	.word	0x00013988
    c5ec:	00013994 	.word	0x00013994

0000c5f0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>:
    c5f0:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)
    c5f4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    c5f8:	e24dd010 	sub	sp, sp, #16
    c5fc:	e28dc018 	add	ip, sp, #24
    c600:	e58dc000 	str	ip, [sp]
    c604:	e59d3014 	ldr	r3, [sp, #20]
    c608:	e58dc00c 	str	ip, [sp, #12]
    c60c:	ebffff7a 	bl	c3fc <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
    c610:	e28dd010 	add	sp, sp, #16
    c614:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    c618:	e28dd004 	add	sp, sp, #4
    c61c:	e12fff1e 	bx	lr

0000c620 <CLogger::Initialize(CDevice*)>:
    c620:	e92d4010 	push	{r4, lr}
    c624:	e5801008 	str	r1, [r0, #8]
    c628:	e24dd008 	sub	sp, sp, #8
    c62c:	e1a04000 	mov	r4, r0
    c630:	eb000102 	bl	ca40 <CMachineInfo::Get()>
    c634:	eb00008b 	bl	c868 <CMachineInfo::GetMachineName() const>
    c638:	e59f301c 	ldr	r3, [pc, #28]	; c65c <CLogger::Initialize(CDevice*)+0x3c>
    c63c:	e58d0000 	str	r0, [sp]
    c640:	e3a02003 	mov	r2, #3
    c644:	e1a00004 	mov	r0, r4
    c648:	e59f1010 	ldr	r1, [pc, #16]	; c660 <CLogger::Initialize(CDevice*)+0x40>
    c64c:	ebffffe7 	bl	c5f0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c650:	e3a00001 	mov	r0, #1
    c654:	e28dd008 	add	sp, sp, #8
    c658:	e8bd8010 	pop	{r4, pc}
    c65c:	000139a0 	.word	0x000139a0
    c660:	000139b8 	.word	0x000139b8

0000c664 <CMachineInfo::CMachineInfo()>:
    c664:	e3a03000 	mov	r3, #0
    c668:	e92d4030 	push	{r4, r5, lr}
    c66c:	e3a01003 	mov	r1, #3
    c670:	e1a04000 	mov	r4, r0
    c674:	e3a0000e 	mov	r0, #14
    c678:	e59f21a8 	ldr	r2, [pc, #424]	; c828 <CMachineInfo::CMachineInfo()+0x1c4>
    c67c:	e24dd024 	sub	sp, sp, #36	; 0x24
    c680:	e5925000 	ldr	r5, [r2]
    c684:	e5c40004 	strb	r0, [r4, #4]
    c688:	e1550003 	cmp	r5, r3
    c68c:	e5c41010 	strb	r1, [r4, #16]
    c690:	e5843000 	str	r3, [r4]
    c694:	e5843008 	str	r3, [r4, #8]
    c698:	e584300c 	str	r3, [r4, #12]
    c69c:	e5843014 	str	r3, [r4, #20]
    c6a0:	0a00000e 	beq	c6e0 <CMachineInfo::CMachineInfo()+0x7c>
    c6a4:	e595e000 	ldr	lr, [r5]
    c6a8:	e5d5c004 	ldrb	ip, [r5, #4]
    c6ac:	e5950008 	ldr	r0, [r5, #8]
    c6b0:	e595100c 	ldr	r1, [r5, #12]
    c6b4:	e5d52010 	ldrb	r2, [r5, #16]
    c6b8:	e5953014 	ldr	r3, [r5, #20]
    c6bc:	e584e000 	str	lr, [r4]
    c6c0:	e5c4c004 	strb	ip, [r4, #4]
    c6c4:	e5840008 	str	r0, [r4, #8]
    c6c8:	e584100c 	str	r1, [r4, #12]
    c6cc:	e5c42010 	strb	r2, [r4, #16]
    c6d0:	e5843014 	str	r3, [r4, #20]
    c6d4:	e1a00004 	mov	r0, r4
    c6d8:	e28dd024 	add	sp, sp, #36	; 0x24
    c6dc:	e8bd8030 	pop	{r4, r5, pc}
    c6e0:	e28d000c 	add	r0, sp, #12
    c6e4:	e5824000 	str	r4, [r2]
    c6e8:	ebfff512 	bl	9b38 <CBcmPropertyTags::CBcmPropertyTags()>
    c6ec:	e3a03010 	mov	r3, #16
    c6f0:	e58d5000 	str	r5, [sp]
    c6f4:	e28d000c 	add	r0, sp, #12
    c6f8:	e08d2003 	add	r2, sp, r3
    c6fc:	e59f1128 	ldr	r1, [pc, #296]	; c82c <CMachineInfo::CMachineInfo()+0x1c8>
    c700:	ebfff563 	bl	9c94 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    c704:	e3500000 	cmp	r0, #0
    c708:	0a00000c 	beq	c740 <CMachineInfo::CMachineInfo()+0xdc>
    c70c:	e59d101c 	ldr	r1, [sp, #28]
    c710:	e2113502 	ands	r3, r1, #8388608	; 0x800000
    c714:	e5841000 	str	r1, [r4]
    c718:	1a00000b 	bne	c74c <CMachineInfo::CMachineInfo()+0xe8>
    c71c:	e3a02002 	mov	r2, #2
    c720:	e59f0108 	ldr	r0, [pc, #264]	; c830 <CMachineInfo::CMachineInfo()+0x1cc>
    c724:	ea000000 	b	c72c <CMachineInfo::CMachineInfo()+0xc8>
    c728:	e7902203 	ldr	r2, [r0, r3, lsl #4]
    c72c:	e1510002 	cmp	r1, r2
    c730:	0a000012 	beq	c780 <CMachineInfo::CMachineInfo()+0x11c>
    c734:	e2833001 	add	r3, r3, #1
    c738:	e3530011 	cmp	r3, #17
    c73c:	1afffff9 	bne	c728 <CMachineInfo::CMachineInfo()+0xc4>
    c740:	e28d000c 	add	r0, sp, #12
    c744:	ebfff501 	bl	9b50 <CBcmPropertyTags::~CBcmPropertyTags()>
    c748:	eaffffe1 	b	c6d4 <CMachineInfo::CMachineInfo()+0x70>
    c74c:	e1a00221 	lsr	r0, r1, #4
    c750:	e1a03005 	mov	r3, r5
    c754:	e59f20d8 	ldr	r2, [pc, #216]	; c834 <CMachineInfo::CMachineInfo()+0x1d0>
    c758:	e6ef0070 	uxtb	r0, r0
    c75c:	ea000000 	b	c764 <CMachineInfo::CMachineInfo()+0x100>
    c760:	e512500c 	ldr	r5, [r2, #-12]
    c764:	e1550000 	cmp	r5, r0
    c768:	0a000011 	beq	c7b4 <CMachineInfo::CMachineInfo()+0x150>
    c76c:	e2833001 	add	r3, r3, #1
    c770:	e353000c 	cmp	r3, #12
    c774:	e282200c 	add	r2, r2, #12
    c778:	1afffff8 	bne	c760 <CMachineInfo::CMachineInfo()+0xfc>
    c77c:	eaffffef 	b	c740 <CMachineInfo::CMachineInfo()+0xdc>
    c780:	e3a00001 	mov	r0, #1
    c784:	e3a01000 	mov	r1, #0
    c788:	e59f20a8 	ldr	r2, [pc, #168]	; c838 <CMachineInfo::CMachineInfo()+0x1d4>
    c78c:	e5840008 	str	r0, [r4, #8]
    c790:	e0823203 	add	r3, r2, r3, lsl #4
    c794:	e5d30094 	ldrb	r0, [r3, #148]	; 0x94
    c798:	e5932098 	ldr	r2, [r3, #152]	; 0x98
    c79c:	e593309c 	ldr	r3, [r3, #156]	; 0x9c
    c7a0:	e5c40004 	strb	r0, [r4, #4]
    c7a4:	e584200c 	str	r2, [r4, #12]
    c7a8:	e5843014 	str	r3, [r4, #20]
    c7ac:	e5c41010 	strb	r1, [r4, #16]
    c7b0:	eaffffe2 	b	c740 <CMachineInfo::CMachineInfo()+0xdc>
    c7b4:	e3a0cc01 	mov	ip, #256	; 0x100
    c7b8:	e59f2078 	ldr	r2, [pc, #120]	; c838 <CMachineInfo::CMachineInfo()+0x1d4>
    c7bc:	e0833083 	add	r3, r3, r3, lsl #1
    c7c0:	e0823103 	add	r3, r2, r3, lsl #2
    c7c4:	e1a00621 	lsr	r0, r1, #12
    c7c8:	e1a02a21 	lsr	r2, r1, #20
    c7cc:	e2022007 	and	r2, r2, #7
    c7d0:	e200000f 	and	r0, r0, #15
    c7d4:	e5d3e004 	ldrb	lr, [r3, #4]
    c7d8:	e3500002 	cmp	r0, #2
    c7dc:	e5935008 	ldr	r5, [r3, #8]
    c7e0:	e201300f 	and	r3, r1, #15
    c7e4:	e1a0121c 	lsl	r1, ip, r2
    c7e8:	e5841014 	str	r1, [r4, #20]
    c7ec:	83a01003 	movhi	r1, #3
    c7f0:	e5c40010 	strb	r0, [r4, #16]
    c7f4:	85c41010 	strbhi	r1, [r4, #16]
    c7f8:	e3520000 	cmp	r2, #0
    c7fc:	035e0003 	cmpeq	lr, #3
    c800:	e2833001 	add	r3, r3, #1
    c804:	e5c4e004 	strb	lr, [r4, #4]
    c808:	e5845008 	str	r5, [r4, #8]
    c80c:	e584300c 	str	r3, [r4, #12]
    c810:	1affffca 	bne	c740 <CMachineInfo::CMachineInfo()+0xdc>
    c814:	e3530001 	cmp	r3, #1
    c818:	13a03002 	movne	r3, #2
    c81c:	03a03001 	moveq	r3, #1
    c820:	e5c43004 	strb	r3, [r4, #4]
    c824:	eaffffc5 	b	c740 <CMachineInfo::CMachineInfo()+0xdc>
    c828:	00015348 	.word	0x00015348
    c82c:	00010002 	.word	0x00010002
    c830:	00013a50 	.word	0x00013a50
    c834:	000139cc 	.word	0x000139cc
    c838:	000139c0 	.word	0x000139c0

0000c83c <CMachineInfo::~CMachineInfo()>:
    c83c:	e3a0200e 	mov	r2, #14
    c840:	e59f3014 	ldr	r3, [pc, #20]	; c85c <CMachineInfo::~CMachineInfo()+0x20>
    c844:	e5c02004 	strb	r2, [r0, #4]
    c848:	e5932000 	ldr	r2, [r3]
    c84c:	e1500002 	cmp	r0, r2
    c850:	03a02000 	moveq	r2, #0
    c854:	05832000 	streq	r2, [r3]
    c858:	e12fff1e 	bx	lr
    c85c:	00015348 	.word	0x00015348

0000c860 <CMachineInfo::GetMachineModel() const>:
    c860:	e5d00004 	ldrb	r0, [r0, #4]
    c864:	e12fff1e 	bx	lr

0000c868 <CMachineInfo::GetMachineName() const>:
    c868:	e5d02004 	ldrb	r2, [r0, #4]
    c86c:	e59f3008 	ldr	r3, [pc, #8]	; c87c <CMachineInfo::GetMachineName() const+0x14>
    c870:	e0833102 	add	r3, r3, r2, lsl #2
    c874:	e59301a0 	ldr	r0, [r3, #416]	; 0x1a0
    c878:	e12fff1e 	bx	lr
    c87c:	000139c0 	.word	0x000139c0

0000c880 <CMachineInfo::GetModelMajor() const>:
    c880:	e5900008 	ldr	r0, [r0, #8]
    c884:	e12fff1e 	bx	lr

0000c888 <CMachineInfo::GetModelRevision() const>:
    c888:	e590000c 	ldr	r0, [r0, #12]
    c88c:	e12fff1e 	bx	lr

0000c890 <CMachineInfo::GetSoCType() const>:
    c890:	e5d00010 	ldrb	r0, [r0, #16]
    c894:	e12fff1e 	bx	lr

0000c898 <CMachineInfo::GetRAMSize() const>:
    c898:	e5900014 	ldr	r0, [r0, #20]
    c89c:	e12fff1e 	bx	lr

0000c8a0 <CMachineInfo::GetSoCName() const>:
    c8a0:	e5d02010 	ldrb	r2, [r0, #16]
    c8a4:	e59f3008 	ldr	r3, [pc, #8]	; c8b4 <CMachineInfo::GetSoCName() const+0x14>
    c8a8:	e0833102 	add	r3, r3, r2, lsl #2
    c8ac:	e59301dc 	ldr	r0, [r3, #476]	; 0x1dc
    c8b0:	e12fff1e 	bx	lr
    c8b4:	000139c0 	.word	0x000139c0

0000c8b8 <CMachineInfo::GetRevisionRaw() const>:
    c8b8:	e5900000 	ldr	r0, [r0]
    c8bc:	e12fff1e 	bx	lr

0000c8c0 <CMachineInfo::GetClockRate(unsigned int) const>:
    c8c0:	e92d4070 	push	{r4, r5, r6, lr}
    c8c4:	e24dd020 	sub	sp, sp, #32
    c8c8:	e1a06000 	mov	r6, r0
    c8cc:	e28d0008 	add	r0, sp, #8
    c8d0:	e1a05001 	mov	r5, r1
    c8d4:	ebfff497 	bl	9b38 <CBcmPropertyTags::CBcmPropertyTags()>
    c8d8:	e3a03004 	mov	r3, #4
    c8dc:	e28d0008 	add	r0, sp, #8
    c8e0:	e58d3000 	str	r3, [sp]
    c8e4:	e28d200c 	add	r2, sp, #12
    c8e8:	e3a03014 	mov	r3, #20
    c8ec:	e59f1078 	ldr	r1, [pc, #120]	; c96c <CMachineInfo::GetClockRate(unsigned int) const+0xac>
    c8f0:	e58d5018 	str	r5, [sp, #24]
    c8f4:	ebfff4e6 	bl	9c94 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    c8f8:	e2504000 	subs	r4, r0, #0
    c8fc:	1a00000e 	bne	c93c <CMachineInfo::GetClockRate(unsigned int) const+0x7c>
    c900:	e3550002 	cmp	r5, #2
    c904:	0a00000e 	beq	c944 <CMachineInfo::GetClockRate(unsigned int) const+0x84>
    c908:	e3550004 	cmp	r5, #4
    c90c:	0a000010 	beq	c954 <CMachineInfo::GetClockRate(unsigned int) const+0x94>
    c910:	e3550001 	cmp	r5, #1
    c914:	0a00000c 	beq	c94c <CMachineInfo::GetClockRate(unsigned int) const+0x8c>
    c918:	e59f2050 	ldr	r2, [pc, #80]	; c970 <CMachineInfo::GetClockRate(unsigned int) const+0xb0>
    c91c:	e59f1050 	ldr	r1, [pc, #80]	; c974 <CMachineInfo::GetClockRate(unsigned int) const+0xb4>
    c920:	e59f0050 	ldr	r0, [pc, #80]	; c978 <CMachineInfo::GetClockRate(unsigned int) const+0xb8>
    c924:	ebfff45f 	bl	9aa8 <assertion_failed>
    c928:	e28d0008 	add	r0, sp, #8
    c92c:	ebfff487 	bl	9b50 <CBcmPropertyTags::~CBcmPropertyTags()>
    c930:	e1a00004 	mov	r0, r4
    c934:	e28dd020 	add	sp, sp, #32
    c938:	e8bd8070 	pop	{r4, r5, r6, pc}
    c93c:	e59d401c 	ldr	r4, [sp, #28]
    c940:	eafffff8 	b	c928 <CMachineInfo::GetClockRate(unsigned int) const+0x68>
    c944:	e59f4030 	ldr	r4, [pc, #48]	; c97c <CMachineInfo::GetClockRate(unsigned int) const+0xbc>
    c948:	eafffff6 	b	c928 <CMachineInfo::GetClockRate(unsigned int) const+0x68>
    c94c:	e59f402c 	ldr	r4, [pc, #44]	; c980 <CMachineInfo::GetClockRate(unsigned int) const+0xc0>
    c950:	eafffff4 	b	c928 <CMachineInfo::GetClockRate(unsigned int) const+0x68>
    c954:	e5962008 	ldr	r2, [r6, #8]
    c958:	e59f3024 	ldr	r3, [pc, #36]	; c984 <CMachineInfo::GetClockRate(unsigned int) const+0xc4>
    c95c:	e3520002 	cmp	r2, #2
    c960:	e59f4020 	ldr	r4, [pc, #32]	; c988 <CMachineInfo::GetClockRate(unsigned int) const+0xc8>
    c964:	81a04003 	movhi	r4, r3
    c968:	eaffffee 	b	c928 <CMachineInfo::GetClockRate(unsigned int) const+0x68>
    c96c:	00030002 	.word	0x00030002
    c970:	00000115 	.word	0x00000115
    c974:	00013bac 	.word	0x00013bac
    c978:	000138cc 	.word	0x000138cc
    c97c:	02dc6c00 	.word	0x02dc6c00
    c980:	05f5e100 	.word	0x05f5e100
    c984:	11e1a300 	.word	0x11e1a300
    c988:	0ee6b280 	.word	0x0ee6b280

0000c98c <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>:
    c98c:	e3510036 	cmp	r1, #54	; 0x36
    c990:	0a00000d 	beq	c9cc <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x40>
    c994:	e3510037 	cmp	r1, #55	; 0x37
    c998:	1a000004 	bne	c9b0 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x24>
    c99c:	e5d00004 	ldrb	r0, [r0, #4]
    c9a0:	e3500003 	cmp	r0, #3
    c9a4:	c3a00028 	movgt	r0, #40	; 0x28
    c9a8:	d3a0002d 	movle	r0, #45	; 0x2d
    c9ac:	e12fff1e 	bx	lr
    c9b0:	e92d4010 	push	{r4, lr}
    c9b4:	e59f2038 	ldr	r2, [pc, #56]	; c9f4 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x68>
    c9b8:	e59f1038 	ldr	r1, [pc, #56]	; c9f8 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x6c>
    c9bc:	e59f0038 	ldr	r0, [pc, #56]	; c9fc <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x70>
    c9c0:	ebfff438 	bl	9aa8 <assertion_failed>
    c9c4:	e3a00000 	mov	r0, #0
    c9c8:	e8bd8010 	pop	{r4, pc}
    c9cc:	e5d03004 	ldrb	r3, [r0, #4]
    c9d0:	e3530003 	cmp	r3, #3
    c9d4:	ca000001 	bgt	c9e0 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x54>
    c9d8:	e3a00028 	mov	r0, #40	; 0x28
    c9dc:	e12fff1e 	bx	lr
    c9e0:	e5900008 	ldr	r0, [r0, #8]
    c9e4:	e3500002 	cmp	r0, #2
    c9e8:	93a0002d 	movls	r0, #45	; 0x2d
    c9ec:	83a00029 	movhi	r0, #41	; 0x29
    c9f0:	e12fff1e 	bx	lr
    c9f4:	0000014e 	.word	0x0000014e
    c9f8:	00013bac 	.word	0x00013bac
    c9fc:	000138cc 	.word	0x000138cc

0000ca00 <CMachineInfo::GetDevice(TDeviceId) const>:
    ca00:	e3510000 	cmp	r1, #0
    ca04:	1a000003 	bne	ca18 <CMachineInfo::GetDevice(TDeviceId) const+0x18>
    ca08:	e5d00004 	ldrb	r0, [r0, #4]
    ca0c:	e2500001 	subs	r0, r0, #1
    ca10:	13a00001 	movne	r0, #1
    ca14:	e12fff1e 	bx	lr
    ca18:	e92d4010 	push	{r4, lr}
    ca1c:	e59f2010 	ldr	r2, [pc, #16]	; ca34 <CMachineInfo::GetDevice(TDeviceId) const+0x34>
    ca20:	e59f1010 	ldr	r1, [pc, #16]	; ca38 <CMachineInfo::GetDevice(TDeviceId) const+0x38>
    ca24:	e59f0010 	ldr	r0, [pc, #16]	; ca3c <CMachineInfo::GetDevice(TDeviceId) const+0x3c>
    ca28:	ebfff41e 	bl	9aa8 <assertion_failed>
    ca2c:	e3a00000 	mov	r0, #0
    ca30:	e8bd8010 	pop	{r4, pc}
    ca34:	00000167 	.word	0x00000167
    ca38:	00013bac 	.word	0x00013bac
    ca3c:	000138cc 	.word	0x000138cc

0000ca40 <CMachineInfo::Get()>:
    ca40:	e92d4010 	push	{r4, lr}
    ca44:	e59f4020 	ldr	r4, [pc, #32]	; ca6c <CMachineInfo::Get()+0x2c>
    ca48:	e5940000 	ldr	r0, [r4]
    ca4c:	e3500000 	cmp	r0, #0
    ca50:	18bd8010 	popne	{r4, pc}
    ca54:	e3a02e17 	mov	r2, #368	; 0x170
    ca58:	e59f1010 	ldr	r1, [pc, #16]	; ca70 <CMachineInfo::Get()+0x30>
    ca5c:	e59f0010 	ldr	r0, [pc, #16]	; ca74 <CMachineInfo::Get()+0x34>
    ca60:	ebfff410 	bl	9aa8 <assertion_failed>
    ca64:	e5940000 	ldr	r0, [r4]
    ca68:	e8bd8010 	pop	{r4, pc}
    ca6c:	00015348 	.word	0x00015348
    ca70:	00013bac 	.word	0x00013bac
    ca74:	000138fc 	.word	0x000138fc

0000ca78 <CScreenDevice::~CScreenDevice()>:
    ca78:	e5d0200c 	ldrb	r2, [r0, #12]
    ca7c:	e59f3068 	ldr	r3, [pc, #104]	; caec <CScreenDevice::~CScreenDevice()+0x74>
    ca80:	e3520000 	cmp	r2, #0
    ca84:	e92d4070 	push	{r4, r5, r6, lr}
    ca88:	e1a04000 	mov	r4, r0
    ca8c:	e5803000 	str	r3, [r0]
    ca90:	0a000003 	beq	caa4 <CScreenDevice::~CScreenDevice()+0x2c>
    ca94:	e5900018 	ldr	r0, [r0, #24]
    ca98:	e3500000 	cmp	r0, #0
    ca9c:	0a000000 	beq	caa4 <CScreenDevice::~CScreenDevice()+0x2c>
    caa0:	eb0013fe 	bl	11aa0 <operator delete[](void*)>
    caa4:	e3a03000 	mov	r3, #0
    caa8:	e5945010 	ldr	r5, [r4, #16]
    caac:	e5843018 	str	r3, [r4, #24]
    cab0:	e1550003 	cmp	r5, r3
    cab4:	0a000004 	beq	cacc <CScreenDevice::~CScreenDevice()+0x54>
    cab8:	e1a00005 	mov	r0, r5
    cabc:	eb0015ff 	bl	122c0 <CBcmFrameBuffer::~CBcmFrameBuffer()>
    cac0:	e1a00005 	mov	r0, r5
    cac4:	e3a01094 	mov	r1, #148	; 0x94
    cac8:	eb0013f5 	bl	11aa4 <operator delete(void*, unsigned int)>
    cacc:	e3a03000 	mov	r3, #0
    cad0:	e2840014 	add	r0, r4, #20
    cad4:	e5843010 	str	r3, [r4, #16]
    cad8:	eb001700 	bl	126e0 <CCharGenerator::~CCharGenerator()>
    cadc:	e1a00004 	mov	r0, r4
    cae0:	ebfff522 	bl	9f70 <CDevice::~CDevice()>
    cae4:	e1a00004 	mov	r0, r4
    cae8:	e8bd8070 	pop	{r4, r5, r6, pc}
    caec:	00013d00 	.word	0x00013d00

0000caf0 <CScreenDevice::~CScreenDevice()>:
    caf0:	e92d4010 	push	{r4, lr}
    caf4:	e1a04000 	mov	r4, r0
    caf8:	ebffffde 	bl	ca78 <CScreenDevice::~CScreenDevice()>
    cafc:	e1a00004 	mov	r0, r4
    cb00:	e3a0105c 	mov	r1, #92	; 0x5c
    cb04:	eb0013e6 	bl	11aa4 <operator delete(void*, unsigned int)>
    cb08:	e1a00004 	mov	r0, r4
    cb0c:	e8bd8010 	pop	{r4, pc}

0000cb10 <CScreenDevice::InvertCursor() [clone .part.6]>:
    cb10:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    cb14:	e2806014 	add	r6, r0, #20
    cb18:	e1a05000 	mov	r5, r0
    cb1c:	e1a00006 	mov	r0, r6
    cb20:	eb0016f3 	bl	126f4 <CCharGenerator::GetUnderline() const>
    cb24:	e3a08000 	mov	r8, #0
    cb28:	e1a07000 	mov	r7, r0
    cb2c:	e1a00006 	mov	r0, r6
    cb30:	eb0016ed 	bl	126ec <CCharGenerator::GetCharHeight() const>
    cb34:	e1500007 	cmp	r0, r7
    cb38:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
    cb3c:	e3a04000 	mov	r4, #0
    cb40:	ea000013 	b	cb94 <CScreenDevice::InvertCursor() [clone .part.6]+0x84>
    cb44:	e595303c 	ldr	r3, [r5, #60]	; 0x3c
    cb48:	e5952024 	ldr	r2, [r5, #36]	; 0x24
    cb4c:	e0843003 	add	r3, r4, r3
    cb50:	e1530002 	cmp	r3, r2
    cb54:	2a00000d 	bcs	cb90 <CScreenDevice::InvertCursor() [clone .part.6]+0x80>
    cb58:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    cb5c:	e5951028 	ldr	r1, [r5, #40]	; 0x28
    cb60:	e0872002 	add	r2, r7, r2
    cb64:	e1520001 	cmp	r2, r1
    cb68:	2a000008 	bcs	cb90 <CScreenDevice::InvertCursor() [clone .part.6]+0x80>
    cb6c:	e5950020 	ldr	r0, [r5, #32]
    cb70:	e5951018 	ldr	r1, [r5, #24]
    cb74:	e0233290 	mla	r3, r0, r2, r3
    cb78:	e1a03083 	lsl	r3, r3, #1
    cb7c:	e19120b3 	ldrh	r2, [r1, r3]
    cb80:	e3520000 	cmp	r2, #0
    cb84:	01d524b6 	ldrheq	r2, [r5, #70]	; 0x46
    cb88:	118180b3 	strhne	r8, [r1, r3]
    cb8c:	018120b3 	strheq	r2, [r1, r3]
    cb90:	e2844001 	add	r4, r4, #1
    cb94:	e1a00006 	mov	r0, r6
    cb98:	eb0016d1 	bl	126e4 <CCharGenerator::GetCharWidth() const>
    cb9c:	e1500004 	cmp	r0, r4
    cba0:	8affffe7 	bhi	cb44 <CScreenDevice::InvertCursor() [clone .part.6]+0x34>
    cba4:	e2877001 	add	r7, r7, #1
    cba8:	eaffffdf 	b	cb2c <CScreenDevice::InvertCursor() [clone .part.6]+0x1c>

0000cbac <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool)>:
    cbac:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    cbb0:	e1a04000 	mov	r4, r0
    cbb4:	e3a05000 	mov	r5, #0
    cbb8:	e1a07002 	mov	r7, r2
    cbbc:	e1a06003 	mov	r6, r3
    cbc0:	e1a08001 	mov	r8, r1
    cbc4:	ebfff4f5 	bl	9fa0 <CDevice::CDevice()>
    cbc8:	e59f0050 	ldr	r0, [pc, #80]	; cc20 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool)+0x74>
    cbcc:	e5848004 	str	r8, [r4, #4]
    cbd0:	e5840000 	str	r0, [r4]
    cbd4:	e5847008 	str	r7, [r4, #8]
    cbd8:	e5c4600c 	strb	r6, [r4, #12]
    cbdc:	e5845010 	str	r5, [r4, #16]
    cbe0:	e2840014 	add	r0, r4, #20
    cbe4:	eb0016ba 	bl	126d4 <CCharGenerator::CCharGenerator()>
    cbe8:	e3a03001 	mov	r3, #1
    cbec:	e3e02020 	mvn	r2, #32
    cbf0:	e5845018 	str	r5, [r4, #24]
    cbf4:	e5845030 	str	r5, [r4, #48]	; 0x30
    cbf8:	e5845034 	str	r5, [r4, #52]	; 0x34
    cbfc:	e584503c 	str	r5, [r4, #60]	; 0x3c
    cc00:	e5845040 	str	r5, [r4, #64]	; 0x40
    cc04:	e5c45048 	strb	r5, [r4, #72]	; 0x48
    cc08:	e5c45054 	strb	r5, [r4, #84]	; 0x54
    cc0c:	e1c424b6 	strh	r2, [r4, #70]	; 0x46
    cc10:	e5c43044 	strb	r3, [r4, #68]	; 0x44
    cc14:	e5843058 	str	r3, [r4, #88]	; 0x58
    cc18:	e1a00004 	mov	r0, r4
    cc1c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    cc20:	00013d00 	.word	0x00013d00

0000cc24 <CScreenDevice::GetWidth() const>:
    cc24:	e5900024 	ldr	r0, [r0, #36]	; 0x24
    cc28:	e12fff1e 	bx	lr

0000cc2c <CScreenDevice::GetHeight() const>:
    cc2c:	e5900028 	ldr	r0, [r0, #40]	; 0x28
    cc30:	e12fff1e 	bx	lr

0000cc34 <CScreenDevice::GetColumns() const>:
    cc34:	e92d4010 	push	{r4, lr}
    cc38:	e2800014 	add	r0, r0, #20
    cc3c:	e5904010 	ldr	r4, [r0, #16]
    cc40:	eb0016a7 	bl	126e4 <CCharGenerator::GetCharWidth() const>
    cc44:	e1a01000 	mov	r1, r0
    cc48:	e1a00004 	mov	r0, r4
    cc4c:	ebfff2be 	bl	974c <__udivsi3>
    cc50:	e8bd8010 	pop	{r4, pc}

0000cc54 <CScreenDevice::GetRows() const>:
    cc54:	e92d4010 	push	{r4, lr}
    cc58:	e2800014 	add	r0, r0, #20
    cc5c:	e5904018 	ldr	r4, [r0, #24]
    cc60:	eb0016a1 	bl	126ec <CCharGenerator::GetCharHeight() const>
    cc64:	e1a01000 	mov	r1, r0
    cc68:	e1a00004 	mov	r0, r4
    cc6c:	ebfff2b6 	bl	974c <__udivsi3>
    cc70:	e8bd8010 	pop	{r4, pc}

0000cc74 <CScreenDevice::GetStatus()>:
    cc74:	e591c018 	ldr	ip, [r1, #24]
    cc78:	e591201c 	ldr	r2, [r1, #28]
    cc7c:	e92d4070 	push	{r4, r5, r6, lr}
    cc80:	e580c000 	str	ip, [r0]
    cc84:	e5915030 	ldr	r5, [r1, #48]	; 0x30
    cc88:	e5914034 	ldr	r4, [r1, #52]	; 0x34
    cc8c:	e591e038 	ldr	lr, [r1, #56]	; 0x38
    cc90:	e591c03c 	ldr	ip, [r1, #60]	; 0x3c
    cc94:	e5802004 	str	r2, [r0, #4]
    cc98:	e5912040 	ldr	r2, [r1, #64]	; 0x40
    cc9c:	e5805008 	str	r5, [r0, #8]
    cca0:	e5d16044 	ldrb	r6, [r1, #68]	; 0x44
    cca4:	e580400c 	str	r4, [r0, #12]
    cca8:	e1d154b6 	ldrh	r5, [r1, #70]	; 0x46
    ccac:	e580e010 	str	lr, [r0, #16]
    ccb0:	e5d14048 	ldrb	r4, [r1, #72]	; 0x48
    ccb4:	e580c014 	str	ip, [r0, #20]
    ccb8:	e591e04c 	ldr	lr, [r1, #76]	; 0x4c
    ccbc:	e5802018 	str	r2, [r0, #24]
    ccc0:	e591c050 	ldr	ip, [r1, #80]	; 0x50
    ccc4:	e5d12054 	ldrb	r2, [r1, #84]	; 0x54
    ccc8:	e5c0601c 	strb	r6, [r0, #28]
    cccc:	e1c051be 	strh	r5, [r0, #30]
    ccd0:	e5c04020 	strb	r4, [r0, #32]
    ccd4:	e580e024 	str	lr, [r0, #36]	; 0x24
    ccd8:	e580c028 	str	ip, [r0, #40]	; 0x28
    ccdc:	e5c0202c 	strb	r2, [r0, #44]	; 0x2c
    cce0:	e8bd8070 	pop	{r4, r5, r6, pc}

0000cce4 <CScreenDevice::SetStatus(TScreenStatus const&)>:
    cce4:	e590201c 	ldr	r2, [r0, #28]
    cce8:	e5913004 	ldr	r3, [r1, #4]
    ccec:	e1520003 	cmp	r2, r3
    ccf0:	0a000001 	beq	ccfc <CScreenDevice::SetStatus(TScreenStatus const&)+0x18>
    ccf4:	e3a00000 	mov	r0, #0
    ccf8:	e12fff1e 	bx	lr
    ccfc:	e590c020 	ldr	ip, [r0, #32]
    cd00:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    cd04:	e15c0003 	cmp	ip, r3
    cd08:	1afffff9 	bne	ccf4 <CScreenDevice::SetStatus(TScreenStatus const&)+0x10>
    cd0c:	e92d4070 	push	{r4, r5, r6, lr}
    cd10:	e1a04000 	mov	r4, r0
    cd14:	e5900058 	ldr	r0, [r0, #88]	; 0x58
    cd18:	e1a05001 	mov	r5, r1
    cd1c:	e3500000 	cmp	r0, #0
    cd20:	1a000023 	bne	cdb4 <CScreenDevice::SetStatus(TScreenStatus const&)+0xd0>
    cd24:	e5d43054 	ldrb	r3, [r4, #84]	; 0x54
    cd28:	e3530000 	cmp	r3, #0
    cd2c:	1a000002 	bne	cd3c <CScreenDevice::SetStatus(TScreenStatus const&)+0x58>
    cd30:	e5d1302c 	ldrb	r3, [r1, #44]	; 0x2c
    cd34:	e3530000 	cmp	r3, #0
    cd38:	0a000001 	beq	cd44 <CScreenDevice::SetStatus(TScreenStatus const&)+0x60>
    cd3c:	e3a00000 	mov	r0, #0
    cd40:	e8bd8070 	pop	{r4, r5, r6, pc}
    cd44:	e5951000 	ldr	r1, [r5]
    cd48:	e5940018 	ldr	r0, [r4, #24]
    cd4c:	eb001054 	bl	10ea4 <memcpy>
    cd50:	e5940058 	ldr	r0, [r4, #88]	; 0x58
    cd54:	e2851008 	add	r1, r5, #8
    cd58:	e891004e 	ldm	r1, {r1, r2, r3, r6}
    cd5c:	e595e018 	ldr	lr, [r5, #24]
    cd60:	e5d5c01c 	ldrb	ip, [r5, #28]
    cd64:	e3500000 	cmp	r0, #0
    cd68:	e5841030 	str	r1, [r4, #48]	; 0x30
    cd6c:	e1d501be 	ldrh	r0, [r5, #30]
    cd70:	e5d51020 	ldrb	r1, [r5, #32]
    cd74:	e5842034 	str	r2, [r4, #52]	; 0x34
    cd78:	e5843038 	str	r3, [r4, #56]	; 0x38
    cd7c:	e5952024 	ldr	r2, [r5, #36]	; 0x24
    cd80:	e5953028 	ldr	r3, [r5, #40]	; 0x28
    cd84:	e584603c 	str	r6, [r4, #60]	; 0x3c
    cd88:	e584e040 	str	lr, [r4, #64]	; 0x40
    cd8c:	e5c4c044 	strb	ip, [r4, #68]	; 0x44
    cd90:	e1c404b6 	strh	r0, [r4, #70]	; 0x46
    cd94:	e5c41048 	strb	r1, [r4, #72]	; 0x48
    cd98:	e584204c 	str	r2, [r4, #76]	; 0x4c
    cd9c:	e5843050 	str	r3, [r4, #80]	; 0x50
    cda0:	1a000010 	bne	cde8 <CScreenDevice::SetStatus(TScreenStatus const&)+0x104>
    cda4:	e3a03000 	mov	r3, #0
    cda8:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    cdac:	e3a00001 	mov	r0, #1
    cdb0:	e8bd8070 	pop	{r4, r5, r6, pc}
    cdb4:	eb0012dc 	bl	1192c <EnterCritical>
    cdb8:	e5d43054 	ldrb	r3, [r4, #84]	; 0x54
    cdbc:	e3530000 	cmp	r3, #0
    cdc0:	1a000003 	bne	cdd4 <CScreenDevice::SetStatus(TScreenStatus const&)+0xf0>
    cdc4:	e5d5302c 	ldrb	r3, [r5, #44]	; 0x2c
    cdc8:	e3530000 	cmp	r3, #0
    cdcc:	0594201c 	ldreq	r2, [r4, #28]
    cdd0:	0affffdb 	beq	cd44 <CScreenDevice::SetStatus(TScreenStatus const&)+0x60>
    cdd4:	e5943058 	ldr	r3, [r4, #88]	; 0x58
    cdd8:	e3530000 	cmp	r3, #0
    cddc:	0affffd6 	beq	cd3c <CScreenDevice::SetStatus(TScreenStatus const&)+0x58>
    cde0:	eb0012fe 	bl	119e0 <LeaveCritical>
    cde4:	eaffffd4 	b	cd3c <CScreenDevice::SetStatus(TScreenStatus const&)+0x58>
    cde8:	eb0012fc 	bl	119e0 <LeaveCritical>
    cdec:	eaffffec 	b	cda4 <CScreenDevice::SetStatus(TScreenStatus const&)+0xc0>

0000cdf0 <CScreenDevice::CarriageReturn()>:
    cdf0:	e3a03000 	mov	r3, #0
    cdf4:	e580303c 	str	r3, [r0, #60]	; 0x3c
    cdf8:	e12fff1e 	bx	lr

0000cdfc <CScreenDevice::CursorHome()>:
    cdfc:	e3a02000 	mov	r2, #0
    ce00:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    ce04:	e580203c 	str	r2, [r0, #60]	; 0x3c
    ce08:	e5803040 	str	r3, [r0, #64]	; 0x40
    ce0c:	e12fff1e 	bx	lr

0000ce10 <CScreenDevice::CursorLeft()>:
    ce10:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    ce14:	e92d4070 	push	{r4, r5, r6, lr}
    ce18:	e3530000 	cmp	r3, #0
    ce1c:	e1a04000 	mov	r4, r0
    ce20:	1a00000f 	bne	ce64 <CScreenDevice::CursorLeft()+0x54>
    ce24:	e5902040 	ldr	r2, [r0, #64]	; 0x40
    ce28:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    ce2c:	e1520003 	cmp	r2, r3
    ce30:	98bd8070 	popls	{r4, r5, r6, pc}
    ce34:	e2806014 	add	r6, r0, #20
    ce38:	e1a00006 	mov	r0, r6
    ce3c:	e5945024 	ldr	r5, [r4, #36]	; 0x24
    ce40:	eb001627 	bl	126e4 <CCharGenerator::GetCharWidth() const>
    ce44:	e0450000 	sub	r0, r5, r0
    ce48:	e584003c 	str	r0, [r4, #60]	; 0x3c
    ce4c:	e1a00006 	mov	r0, r6
    ce50:	eb001625 	bl	126ec <CCharGenerator::GetCharHeight() const>
    ce54:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    ce58:	e0430000 	sub	r0, r3, r0
    ce5c:	e5840040 	str	r0, [r4, #64]	; 0x40
    ce60:	e8bd8070 	pop	{r4, r5, r6, pc}
    ce64:	e2800014 	add	r0, r0, #20
    ce68:	eb00161d 	bl	126e4 <CCharGenerator::GetCharWidth() const>
    ce6c:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    ce70:	e0430000 	sub	r0, r3, r0
    ce74:	e584003c 	str	r0, [r4, #60]	; 0x3c
    ce78:	e8bd8070 	pop	{r4, r5, r6, pc}

0000ce7c <CScreenDevice::CursorMove(unsigned int, unsigned int)>:
    ce7c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    ce80:	e2806014 	add	r6, r0, #20
    ce84:	e1a04002 	mov	r4, r2
    ce88:	e1a05000 	mov	r5, r0
    ce8c:	e1a00006 	mov	r0, r6
    ce90:	e1a07001 	mov	r7, r1
    ce94:	eb001612 	bl	126e4 <CCharGenerator::GetCharWidth() const>
    ce98:	e2444001 	sub	r4, r4, #1
    ce9c:	e0040490 	mul	r4, r0, r4
    cea0:	e1a00006 	mov	r0, r6
    cea4:	eb001610 	bl	126ec <CCharGenerator::GetCharHeight() const>
    cea8:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    ceac:	e1540003 	cmp	r4, r3
    ceb0:	28bd81f0 	popcs	{r4, r5, r6, r7, r8, pc}
    ceb4:	e2477001 	sub	r7, r7, #1
    ceb8:	e0000790 	mul	r0, r0, r7
    cebc:	e5953034 	ldr	r3, [r5, #52]	; 0x34
    cec0:	e1500003 	cmp	r0, r3
    cec4:	38bd81f0 	popcc	{r4, r5, r6, r7, r8, pc}
    cec8:	e5953038 	ldr	r3, [r5, #56]	; 0x38
    cecc:	e1500003 	cmp	r0, r3
    ced0:	3585403c 	strcc	r4, [r5, #60]	; 0x3c
    ced4:	35850040 	strcc	r0, [r5, #64]	; 0x40
    ced8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000cedc <CScreenDevice::CursorUp()>:
    cedc:	e5902040 	ldr	r2, [r0, #64]	; 0x40
    cee0:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    cee4:	e1520003 	cmp	r2, r3
    cee8:	912fff1e 	bxls	lr
    ceec:	e92d4010 	push	{r4, lr}
    cef0:	e1a04000 	mov	r4, r0
    cef4:	e2800014 	add	r0, r0, #20
    cef8:	eb0015fb 	bl	126ec <CCharGenerator::GetCharHeight() const>
    cefc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    cf00:	e0430000 	sub	r0, r3, r0
    cf04:	e5840040 	str	r0, [r4, #64]	; 0x40
    cf08:	e8bd8010 	pop	{r4, pc}

0000cf0c <CScreenDevice::DeleteChars(unsigned int)>:
    cf0c:	e12fff1e 	bx	lr

0000cf10 <CScreenDevice::DeleteLines(unsigned int)>:
    cf10:	e12fff1e 	bx	lr

0000cf14 <CScreenDevice::InsertLines(unsigned int)>:
    cf14:	e12fff1e 	bx	lr

0000cf18 <CScreenDevice::InsertMode(bool)>:
    cf18:	e5c01048 	strb	r1, [r0, #72]	; 0x48
    cf1c:	e12fff1e 	bx	lr

0000cf20 <CScreenDevice::ReverseScroll()>:
    cf20:	e12fff1e 	bx	lr

0000cf24 <CScreenDevice::SetCursorMode(bool)>:
    cf24:	e5c01044 	strb	r1, [r0, #68]	; 0x44
    cf28:	e12fff1e 	bx	lr

0000cf2c <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>:
    cf2c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    cf30:	e2807014 	add	r7, r0, #20
    cf34:	e1a06000 	mov	r6, r0
    cf38:	e1a04001 	mov	r4, r1
    cf3c:	e1a00007 	mov	r0, r7
    cf40:	e1a05002 	mov	r5, r2
    cf44:	eb0015e8 	bl	126ec <CCharGenerator::GetCharHeight() const>
    cf48:	e2444001 	sub	r4, r4, #1
    cf4c:	e0040490 	mul	r4, r0, r4
    cf50:	e1a00007 	mov	r0, r7
    cf54:	eb0015e4 	bl	126ec <CCharGenerator::GetCharHeight() const>
    cf58:	e0000095 	mul	r0, r5, r0
    cf5c:	e596202c 	ldr	r2, [r6, #44]	; 0x2c
    cf60:	e3500000 	cmp	r0, #0
    cf64:	11540002 	cmpne	r4, r2
    cf68:	33a03001 	movcc	r3, #1
    cf6c:	23a03000 	movcs	r3, #0
    cf70:	e1500002 	cmp	r0, r2
    cf74:	83a03000 	movhi	r3, #0
    cf78:	92033001 	andls	r3, r3, #1
    cf7c:	e1540000 	cmp	r4, r0
    cf80:	23a03000 	movcs	r3, #0
    cf84:	32033001 	andcc	r3, r3, #1
    cf88:	e3530000 	cmp	r3, #0
    cf8c:	e3a03000 	mov	r3, #0
    cf90:	05964034 	ldreq	r4, [r6, #52]	; 0x34
    cf94:	15864034 	strne	r4, [r6, #52]	; 0x34
    cf98:	15860038 	strne	r0, [r6, #56]	; 0x38
    cf9c:	e5864040 	str	r4, [r6, #64]	; 0x40
    cfa0:	e586303c 	str	r3, [r6, #60]	; 0x3c
    cfa4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000cfa8 <CScreenDevice::SetStandoutMode(unsigned int)>:
    cfa8:	e351001b 	cmp	r1, #27
    cfac:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
    cfb0:	ea00001d 	b	d02c <CScreenDevice::SetStandoutMode(unsigned int)+0x84>
    cfb4:	0000d03c 	.word	0x0000d03c
    cfb8:	0000d030 	.word	0x0000d030
    cfbc:	0000d024 	.word	0x0000d024
    cfc0:	0000d02c 	.word	0x0000d02c
    cfc4:	0000d02c 	.word	0x0000d02c
    cfc8:	0000d02c 	.word	0x0000d02c
    cfcc:	0000d02c 	.word	0x0000d02c
    cfd0:	0000d02c 	.word	0x0000d02c
    cfd4:	0000d02c 	.word	0x0000d02c
    cfd8:	0000d02c 	.word	0x0000d02c
    cfdc:	0000d02c 	.word	0x0000d02c
    cfe0:	0000d02c 	.word	0x0000d02c
    cfe4:	0000d02c 	.word	0x0000d02c
    cfe8:	0000d02c 	.word	0x0000d02c
    cfec:	0000d02c 	.word	0x0000d02c
    cff0:	0000d02c 	.word	0x0000d02c
    cff4:	0000d02c 	.word	0x0000d02c
    cff8:	0000d02c 	.word	0x0000d02c
    cffc:	0000d02c 	.word	0x0000d02c
    d000:	0000d02c 	.word	0x0000d02c
    d004:	0000d02c 	.word	0x0000d02c
    d008:	0000d02c 	.word	0x0000d02c
    d00c:	0000d02c 	.word	0x0000d02c
    d010:	0000d02c 	.word	0x0000d02c
    d014:	0000d02c 	.word	0x0000d02c
    d018:	0000d02c 	.word	0x0000d02c
    d01c:	0000d02c 	.word	0x0000d02c
    d020:	0000d03c 	.word	0x0000d03c
    d024:	e3a0301f 	mov	r3, #31
    d028:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
    d02c:	e12fff1e 	bx	lr
    d030:	e3a03b3e 	mov	r3, #63488	; 0xf800
    d034:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
    d038:	e12fff1e 	bx	lr
    d03c:	e3e03020 	mvn	r3, #32
    d040:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
    d044:	e12fff1e 	bx	lr

0000d048 <CScreenDevice::Scroll()>:
    d048:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    d04c:	e1a07000 	mov	r7, r0
    d050:	e2800014 	add	r0, r0, #20
    d054:	eb0015a4 	bl	126ec <CCharGenerator::GetCharHeight() const>
    d058:	e5973034 	ldr	r3, [r7, #52]	; 0x34
    d05c:	e5974038 	ldr	r4, [r7, #56]	; 0x38
    d060:	e5975020 	ldr	r5, [r7, #32]
    d064:	e0444003 	sub	r4, r4, r3
    d068:	e1a02085 	lsl	r2, r5, #1
    d06c:	e0444000 	sub	r4, r4, r0
    d070:	e0040492 	mul	r4, r2, r4
    d074:	e0050395 	mul	r5, r5, r3
    d078:	e5978018 	ldr	r8, [r7, #24]
    d07c:	e3540000 	cmp	r4, #0
    d080:	e1a06000 	mov	r6, r0
    d084:	e0885085 	add	r5, r8, r5, lsl #1
    d088:	1a000007 	bne	d0ac <CScreenDevice::Scroll()+0x64>
    d08c:	e0020692 	mul	r2, r2, r6
    d090:	e1b02122 	lsrs	r2, r2, #2
    d094:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    d098:	e1a00005 	mov	r0, r5
    d09c:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    d0a0:	e1a02102 	lsl	r2, r2, #2
    d0a4:	e3a01000 	mov	r1, #0
    d0a8:	ea000e0b 	b	108dc <memset>
    d0ac:	e0803003 	add	r3, r0, r3
    d0b0:	e0288392 	mla	r8, r2, r3, r8
    d0b4:	e3c4900f 	bic	r9, r4, #15
    d0b8:	e1a01008 	mov	r1, r8
    d0bc:	e1a02009 	mov	r2, r9
    d0c0:	e1a00005 	mov	r0, r5
    d0c4:	eb000f76 	bl	10ea4 <memcpy>
    d0c8:	e204200e 	and	r2, r4, #14
    d0cc:	e0850009 	add	r0, r5, r9
    d0d0:	e0881009 	add	r1, r8, r9
    d0d4:	eb000f72 	bl	10ea4 <memcpy>
    d0d8:	e5972020 	ldr	r2, [r7, #32]
    d0dc:	e3c44003 	bic	r4, r4, #3
    d0e0:	e1a02082 	lsl	r2, r2, #1
    d0e4:	e0855004 	add	r5, r5, r4
    d0e8:	eaffffe7 	b	d08c <CScreenDevice::Scroll()+0x44>

0000d0ec <CScreenDevice::CursorDown()>:
    d0ec:	e92d4070 	push	{r4, r5, r6, lr}
    d0f0:	e1a04000 	mov	r4, r0
    d0f4:	e2805014 	add	r5, r0, #20
    d0f8:	e1a00005 	mov	r0, r5
    d0fc:	eb00157a 	bl	126ec <CCharGenerator::GetCharHeight() const>
    d100:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    d104:	e5942038 	ldr	r2, [r4, #56]	; 0x38
    d108:	e0800003 	add	r0, r0, r3
    d10c:	e1500002 	cmp	r0, r2
    d110:	e5840040 	str	r0, [r4, #64]	; 0x40
    d114:	38bd8070 	popcc	{r4, r5, r6, pc}
    d118:	e1a00004 	mov	r0, r4
    d11c:	ebffffc9 	bl	d048 <CScreenDevice::Scroll()>
    d120:	e1a00005 	mov	r0, r5
    d124:	eb001570 	bl	126ec <CCharGenerator::GetCharHeight() const>
    d128:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    d12c:	e0430000 	sub	r0, r3, r0
    d130:	e5840040 	str	r0, [r4, #64]	; 0x40
    d134:	e8bd8070 	pop	{r4, r5, r6, pc}

0000d138 <CScreenDevice::NewLine()>:
    d138:	e3a02000 	mov	r2, #0
    d13c:	e580203c 	str	r2, [r0, #60]	; 0x3c
    d140:	eaffffe9 	b	d0ec <CScreenDevice::CursorDown()>

0000d144 <CScreenDevice::CursorRight()>:
    d144:	e92d4010 	push	{r4, lr}
    d148:	e1a04000 	mov	r4, r0
    d14c:	e2800014 	add	r0, r0, #20
    d150:	eb001563 	bl	126e4 <CCharGenerator::GetCharWidth() const>
    d154:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    d158:	e5942024 	ldr	r2, [r4, #36]	; 0x24
    d15c:	e0800003 	add	r0, r0, r3
    d160:	e1500002 	cmp	r0, r2
    d164:	e584003c 	str	r0, [r4, #60]	; 0x3c
    d168:	38bd8010 	popcc	{r4, pc}
    d16c:	e3a03000 	mov	r3, #0
    d170:	e1a00004 	mov	r0, r4
    d174:	e584303c 	str	r3, [r4, #60]	; 0x3c
    d178:	e8bd4010 	pop	{r4, lr}
    d17c:	eaffffda 	b	d0ec <CScreenDevice::CursorDown()>

0000d180 <CScreenDevice::Tabulator()>:
    d180:	e92d4070 	push	{r4, r5, r6, lr}
    d184:	e1a05000 	mov	r5, r0
    d188:	e2800014 	add	r0, r0, #20
    d18c:	eb001554 	bl	126e4 <CCharGenerator::GetCharWidth() const>
    d190:	e595303c 	ldr	r3, [r5, #60]	; 0x3c
    d194:	e1a04180 	lsl	r4, r0, #3
    d198:	e0840003 	add	r0, r4, r3
    d19c:	e1a01004 	mov	r1, r4
    d1a0:	ebfff169 	bl	974c <__udivsi3>
    d1a4:	e0000094 	mul	r0, r4, r0
    d1a8:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    d1ac:	e585003c 	str	r0, [r5, #60]	; 0x3c
    d1b0:	e1500003 	cmp	r0, r3
    d1b4:	38bd8070 	popcc	{r4, r5, r6, pc}
    d1b8:	e3a03000 	mov	r3, #0
    d1bc:	e1a00005 	mov	r0, r5
    d1c0:	e585303c 	str	r3, [r5, #60]	; 0x3c
    d1c4:	e8bd4070 	pop	{r4, r5, r6, lr}
    d1c8:	eaffffc7 	b	d0ec <CScreenDevice::CursorDown()>

0000d1cc <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>:
    d1cc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d1d0:	e2806014 	add	r6, r0, #20
    d1d4:	e24dd00c 	sub	sp, sp, #12
    d1d8:	e1a07000 	mov	r7, r0
    d1dc:	e1a00006 	mov	r0, r6
    d1e0:	e1a0a001 	mov	sl, r1
    d1e4:	e1a09002 	mov	r9, r2
    d1e8:	e58d3004 	str	r3, [sp, #4]
    d1ec:	e3a08000 	mov	r8, #0
    d1f0:	e1ddb3b0 	ldrh	fp, [sp, #48]	; 0x30
    d1f4:	eb00153c 	bl	126ec <CCharGenerator::GetCharHeight() const>
    d1f8:	e1580000 	cmp	r8, r0
    d1fc:	2a000025 	bcs	d298 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xcc>
    d200:	e59d3004 	ldr	r3, [sp, #4]
    d204:	e3a04000 	mov	r4, #0
    d208:	e0883003 	add	r3, r8, r3
    d20c:	e58d3000 	str	r3, [sp]
    d210:	ea000000 	b	d218 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x4c>
    d214:	e2844001 	add	r4, r4, #1
    d218:	e1a00006 	mov	r0, r6
    d21c:	eb001530 	bl	126e4 <CCharGenerator::GetCharWidth() const>
    d220:	e1540000 	cmp	r4, r0
    d224:	e0845009 	add	r5, r4, r9
    d228:	2a000015 	bcs	d284 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xb8>
    d22c:	e1a03008 	mov	r3, r8
    d230:	e1a02004 	mov	r2, r4
    d234:	e1a0100a 	mov	r1, sl
    d238:	e1a00006 	mov	r0, r6
    d23c:	eb00152e 	bl	126fc <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>
    d240:	e5973024 	ldr	r3, [r7, #36]	; 0x24
    d244:	e3500000 	cmp	r0, #0
    d248:	11a0000b 	movne	r0, fp
    d24c:	03a00000 	moveq	r0, #0
    d250:	e1550003 	cmp	r5, r3
    d254:	2affffee 	bcs	d214 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x48>
    d258:	e5973028 	ldr	r3, [r7, #40]	; 0x28
    d25c:	e59d2000 	ldr	r2, [sp]
    d260:	e1520003 	cmp	r2, r3
    d264:	2affffea 	bcs	d214 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x48>
    d268:	e5973020 	ldr	r3, [r7, #32]
    d26c:	e59d1000 	ldr	r1, [sp]
    d270:	e5972018 	ldr	r2, [r7, #24]
    d274:	e0255193 	mla	r5, r3, r1, r5
    d278:	e1a05085 	lsl	r5, r5, #1
    d27c:	e18200b5 	strh	r0, [r2, r5]
    d280:	eaffffe3 	b	d214 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x48>
    d284:	e1a00006 	mov	r0, r6
    d288:	eb001517 	bl	126ec <CCharGenerator::GetCharHeight() const>
    d28c:	e2888001 	add	r8, r8, #1
    d290:	e1580000 	cmp	r8, r0
    d294:	3affffd9 	bcc	d200 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x34>
    d298:	e28dd00c 	add	sp, sp, #12
    d29c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000d2a0 <CScreenDevice::DisplayChar(char)>:
    d2a0:	e6ef3071 	uxtb	r3, r1
    d2a4:	e353001f 	cmp	r3, #31
    d2a8:	912fff1e 	bxls	lr
    d2ac:	e92d4010 	push	{r4, lr}
    d2b0:	e1a04000 	mov	r4, r0
    d2b4:	e1d0c4b6 	ldrh	ip, [r0, #70]	; 0x46
    d2b8:	e24dd008 	sub	sp, sp, #8
    d2bc:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    d2c0:	e590203c 	ldr	r2, [r0, #60]	; 0x3c
    d2c4:	e58dc000 	str	ip, [sp]
    d2c8:	ebffffbf 	bl	d1cc <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
    d2cc:	e1a00004 	mov	r0, r4
    d2d0:	e28dd008 	add	sp, sp, #8
    d2d4:	e8bd4010 	pop	{r4, lr}
    d2d8:	eaffff99 	b	d144 <CScreenDevice::CursorRight()>

0000d2dc <CScreenDevice::EraseChar(unsigned int, unsigned int)>:
    d2dc:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d2e0:	e3a08000 	mov	r8, #0
    d2e4:	e1a0b000 	mov	fp, r0
    d2e8:	e1a06001 	mov	r6, r1
    d2ec:	e1a0a002 	mov	sl, r2
    d2f0:	e1a09008 	mov	r9, r8
    d2f4:	e2805014 	add	r5, r0, #20
    d2f8:	e1a00005 	mov	r0, r5
    d2fc:	eb0014fa 	bl	126ec <CCharGenerator::GetCharHeight() const>
    d300:	e1580000 	cmp	r8, r0
    d304:	28bd8ff8 	popcs	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d308:	e3a04000 	mov	r4, #0
    d30c:	e088700a 	add	r7, r8, sl
    d310:	e1a00005 	mov	r0, r5
    d314:	eb0014f2 	bl	126e4 <CCharGenerator::GetCharWidth() const>
    d318:	e1540000 	cmp	r4, r0
    d31c:	e0843006 	add	r3, r4, r6
    d320:	2a00000c 	bcs	d358 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x7c>
    d324:	e59b2024 	ldr	r2, [fp, #36]	; 0x24
    d328:	e2844001 	add	r4, r4, #1
    d32c:	e1530002 	cmp	r3, r2
    d330:	2afffff6 	bcs	d310 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x34>
    d334:	e59b2028 	ldr	r2, [fp, #40]	; 0x28
    d338:	e1570002 	cmp	r7, r2
    d33c:	2afffff3 	bcs	d310 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x34>
    d340:	e59b2020 	ldr	r2, [fp, #32]
    d344:	e59b1018 	ldr	r1, [fp, #24]
    d348:	e0233792 	mla	r3, r2, r7, r3
    d34c:	e1a03083 	lsl	r3, r3, #1
    d350:	e18190b3 	strh	r9, [r1, r3]
    d354:	eaffffed 	b	d310 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x34>
    d358:	e2888001 	add	r8, r8, #1
    d35c:	eaffffe5 	b	d2f8 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x1c>

0000d360 <CScreenDevice::ClearLineEnd()>:
    d360:	e92d4070 	push	{r4, r5, r6, lr}
    d364:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    d368:	e590403c 	ldr	r4, [r0, #60]	; 0x3c
    d36c:	e1540003 	cmp	r4, r3
    d370:	28bd8070 	popcs	{r4, r5, r6, pc}
    d374:	e1a05000 	mov	r5, r0
    d378:	e2806014 	add	r6, r0, #20
    d37c:	e1a01004 	mov	r1, r4
    d380:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    d384:	e1a00005 	mov	r0, r5
    d388:	ebffffd3 	bl	d2dc <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    d38c:	e1a00006 	mov	r0, r6
    d390:	eb0014d3 	bl	126e4 <CCharGenerator::GetCharWidth() const>
    d394:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    d398:	e0844000 	add	r4, r4, r0
    d39c:	e1530004 	cmp	r3, r4
    d3a0:	8afffff5 	bhi	d37c <CScreenDevice::ClearLineEnd()+0x1c>
    d3a4:	e8bd8070 	pop	{r4, r5, r6, pc}

0000d3a8 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>:
    d3a8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d3ac:	e1a05000 	mov	r5, r0
    d3b0:	e2807014 	add	r7, r0, #20
    d3b4:	e1a00007 	mov	r0, r7
    d3b8:	e1a06001 	mov	r6, r1
    d3bc:	e595403c 	ldr	r4, [r5, #60]	; 0x3c
    d3c0:	eb0014c7 	bl	126e4 <CCharGenerator::GetCharWidth() const>
    d3c4:	e0204096 	mla	r0, r6, r0, r4
    d3c8:	e5956024 	ldr	r6, [r5, #36]	; 0x24
    d3cc:	e595403c 	ldr	r4, [r5, #60]	; 0x3c
    d3d0:	e1500006 	cmp	r0, r6
    d3d4:	31a06000 	movcc	r6, r0
    d3d8:	e1540006 	cmp	r4, r6
    d3dc:	28bd81f0 	popcs	{r4, r5, r6, r7, r8, pc}
    d3e0:	e1a01004 	mov	r1, r4
    d3e4:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    d3e8:	e1a00005 	mov	r0, r5
    d3ec:	ebffffba 	bl	d2dc <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    d3f0:	e1a00007 	mov	r0, r7
    d3f4:	eb0014ba 	bl	126e4 <CCharGenerator::GetCharWidth() const>
    d3f8:	e0844000 	add	r4, r4, r0
    d3fc:	e1540006 	cmp	r4, r6
    d400:	3afffff6 	bcc	d3e0 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]+0x38>
    d404:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000d408 <CScreenDevice::EraseChars(unsigned int)>:
    d408:	e3510000 	cmp	r1, #0
    d40c:	012fff1e 	bxeq	lr
    d410:	eaffffe4 	b	d3a8 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>

0000d414 <CScreenDevice::ClearDisplayEnd()>:
    d414:	e92d4070 	push	{r4, r5, r6, lr}
    d418:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    d41c:	e590403c 	ldr	r4, [r0, #60]	; 0x3c
    d420:	e1a05000 	mov	r5, r0
    d424:	e1540003 	cmp	r4, r3
    d428:	e2806014 	add	r6, r0, #20
    d42c:	2a000009 	bcs	d458 <CScreenDevice::ClearDisplayEnd()+0x44>
    d430:	e1a01004 	mov	r1, r4
    d434:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    d438:	e1a00005 	mov	r0, r5
    d43c:	ebffffa6 	bl	d2dc <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    d440:	e1a00006 	mov	r0, r6
    d444:	eb0014a6 	bl	126e4 <CCharGenerator::GetCharWidth() const>
    d448:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    d44c:	e0844000 	add	r4, r4, r0
    d450:	e1530004 	cmp	r3, r4
    d454:	8afffff5 	bhi	d430 <CScreenDevice::ClearDisplayEnd()+0x1c>
    d458:	e1a00006 	mov	r0, r6
    d45c:	e5954040 	ldr	r4, [r5, #64]	; 0x40
    d460:	eb0014a1 	bl	126ec <CCharGenerator::GetCharHeight() const>
    d464:	e5953020 	ldr	r3, [r5, #32]
    d468:	e0840000 	add	r0, r4, r0
    d46c:	e0000093 	mul	r0, r3, r0
    d470:	e595201c 	ldr	r2, [r5, #28]
    d474:	e5953018 	ldr	r3, [r5, #24]
    d478:	e07020a2 	rsbs	r2, r0, r2, lsr #1
    d47c:	0a000004 	beq	d494 <CScreenDevice::ClearDisplayEnd()+0x80>
    d480:	e8bd4070 	pop	{r4, r5, r6, lr}
    d484:	e1a02082 	lsl	r2, r2, #1
    d488:	e0830080 	add	r0, r3, r0, lsl #1
    d48c:	e3a01000 	mov	r1, #0
    d490:	ea000d11 	b	108dc <memset>
    d494:	e8bd8070 	pop	{r4, r5, r6, pc}

0000d498 <CScreenDevice::Write(char)>:
    d498:	e92d4010 	push	{r4, lr}
    d49c:	e5903030 	ldr	r3, [r0, #48]	; 0x30
    d4a0:	e24dd008 	sub	sp, sp, #8
    d4a4:	e1a04000 	mov	r4, r0
    d4a8:	e3530007 	cmp	r3, #7
    d4ac:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    d4b0:	ea000010 	b	d4f8 <CScreenDevice::Write(char)+0x60>
    d4b4:	0000d544 	.word	0x0000d544
    d4b8:	0000d5a4 	.word	0x0000d5a4
    d4bc:	0000d5c0 	.word	0x0000d5c0
    d4c0:	0000d618 	.word	0x0000d618
    d4c4:	0000d6f4 	.word	0x0000d6f4
    d4c8:	0000d714 	.word	0x0000d714
    d4cc:	0000d734 	.word	0x0000d734
    d4d0:	0000d508 	.word	0x0000d508
    d4d4:	e5902034 	ldr	r2, [r0, #52]	; 0x34
    d4d8:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    d4dc:	e1520003 	cmp	r2, r3
    d4e0:	2a000004 	bcs	d4f8 <CScreenDevice::Write(char)+0x60>
    d4e4:	e2800014 	add	r0, r0, #20
    d4e8:	eb00147f 	bl	126ec <CCharGenerator::GetCharHeight() const>
    d4ec:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    d4f0:	e0433000 	sub	r3, r3, r0
    d4f4:	e5843040 	str	r3, [r4, #64]	; 0x40
    d4f8:	e3a03000 	mov	r3, #0
    d4fc:	e5843030 	str	r3, [r4, #48]	; 0x30
    d500:	e28dd008 	add	sp, sp, #8
    d504:	e8bd8010 	pop	{r4, pc}
    d508:	e3510068 	cmp	r1, #104	; 0x68
    d50c:	0a000097 	beq	d770 <CScreenDevice::Write(char)+0x2d8>
    d510:	e351006c 	cmp	r1, #108	; 0x6c
    d514:	0a000095 	beq	d770 <CScreenDevice::Write(char)+0x2d8>
    d518:	e2411030 	sub	r1, r1, #48	; 0x30
    d51c:	e6ef3071 	uxtb	r3, r1
    d520:	e3530009 	cmp	r3, #9
    d524:	8afffff3 	bhi	d4f8 <CScreenDevice::Write(char)+0x60>
    d528:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    d52c:	e0833103 	add	r3, r3, r3, lsl #2
    d530:	e0811083 	add	r1, r1, r3, lsl #1
    d534:	e3510063 	cmp	r1, #99	; 0x63
    d538:	e584104c 	str	r1, [r4, #76]	; 0x4c
    d53c:	8affffed 	bhi	d4f8 <CScreenDevice::Write(char)+0x60>
    d540:	eaffffee 	b	d500 <CScreenDevice::Write(char)+0x68>
    d544:	e2413008 	sub	r3, r1, #8
    d548:	e3530013 	cmp	r3, #19
    d54c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    d550:	ea0000d3 	b	d8a4 <CScreenDevice::Write(char)+0x40c>
    d554:	0000d7dc 	.word	0x0000d7dc
    d558:	0000d7d0 	.word	0x0000d7d0
    d55c:	0000d7bc 	.word	0x0000d7bc
    d560:	0000d8a4 	.word	0x0000d8a4
    d564:	0000d8a4 	.word	0x0000d8a4
    d568:	0000d7b0 	.word	0x0000d7b0
    d56c:	0000d8a4 	.word	0x0000d8a4
    d570:	0000d8a4 	.word	0x0000d8a4
    d574:	0000d8a4 	.word	0x0000d8a4
    d578:	0000d8a4 	.word	0x0000d8a4
    d57c:	0000d8a4 	.word	0x0000d8a4
    d580:	0000d8a4 	.word	0x0000d8a4
    d584:	0000d8a4 	.word	0x0000d8a4
    d588:	0000d8a4 	.word	0x0000d8a4
    d58c:	0000d8a4 	.word	0x0000d8a4
    d590:	0000d8a4 	.word	0x0000d8a4
    d594:	0000d8a4 	.word	0x0000d8a4
    d598:	0000d8a4 	.word	0x0000d8a4
    d59c:	0000d8a4 	.word	0x0000d8a4
    d5a0:	0000d7a4 	.word	0x0000d7a4
    d5a4:	e351004d 	cmp	r1, #77	; 0x4d
    d5a8:	0affffd2 	beq	d4f8 <CScreenDevice::Write(char)+0x60>
    d5ac:	e351005b 	cmp	r1, #91	; 0x5b
    d5b0:	03a03002 	moveq	r3, #2
    d5b4:	05803030 	streq	r3, [r0, #48]	; 0x30
    d5b8:	0affffd0 	beq	d500 <CScreenDevice::Write(char)+0x68>
    d5bc:	eaffffcd 	b	d4f8 <CScreenDevice::Write(char)+0x60>
    d5c0:	e241303f 	sub	r3, r1, #63	; 0x3f
    d5c4:	e3530011 	cmp	r3, #17
    d5c8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    d5cc:	ea0000de 	b	d94c <CScreenDevice::Write(char)+0x4b4>
    d5d0:	0000d900 	.word	0x0000d900
    d5d4:	0000d94c 	.word	0x0000d94c
    d5d8:	0000d4d4 	.word	0x0000d4d4
    d5dc:	0000d92c 	.word	0x0000d92c
    d5e0:	0000d91c 	.word	0x0000d91c
    d5e4:	0000d90c 	.word	0x0000d90c
    d5e8:	0000d94c 	.word	0x0000d94c
    d5ec:	0000d94c 	.word	0x0000d94c
    d5f0:	0000d94c 	.word	0x0000d94c
    d5f4:	0000d8e8 	.word	0x0000d8e8
    d5f8:	0000d94c 	.word	0x0000d94c
    d5fc:	0000d8d8 	.word	0x0000d8d8
    d600:	0000d93c 	.word	0x0000d93c
    d604:	0000d4f8 	.word	0x0000d4f8
    d608:	0000d4f8 	.word	0x0000d4f8
    d60c:	0000d94c 	.word	0x0000d94c
    d610:	0000d94c 	.word	0x0000d94c
    d614:	0000d4f8 	.word	0x0000d4f8
    d618:	e241303b 	sub	r3, r1, #59	; 0x3b
    d61c:	e3530032 	cmp	r3, #50	; 0x32
    d620:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    d624:	eaffffbb 	b	d518 <CScreenDevice::Write(char)+0x80>
    d628:	0000d898 	.word	0x0000d898
    d62c:	0000d518 	.word	0x0000d518
    d630:	0000d518 	.word	0x0000d518
    d634:	0000d518 	.word	0x0000d518
    d638:	0000d518 	.word	0x0000d518
    d63c:	0000d518 	.word	0x0000d518
    d640:	0000d518 	.word	0x0000d518
    d644:	0000d518 	.word	0x0000d518
    d648:	0000d518 	.word	0x0000d518
    d64c:	0000d518 	.word	0x0000d518
    d650:	0000d518 	.word	0x0000d518
    d654:	0000d518 	.word	0x0000d518
    d658:	0000d518 	.word	0x0000d518
    d65c:	0000d518 	.word	0x0000d518
    d660:	0000d518 	.word	0x0000d518
    d664:	0000d518 	.word	0x0000d518
    d668:	0000d518 	.word	0x0000d518
    d66c:	0000d4f8 	.word	0x0000d4f8
    d670:	0000d4f8 	.word	0x0000d4f8
    d674:	0000d518 	.word	0x0000d518
    d678:	0000d518 	.word	0x0000d518
    d67c:	0000d4f8 	.word	0x0000d4f8
    d680:	0000d518 	.word	0x0000d518
    d684:	0000d518 	.word	0x0000d518
    d688:	0000d518 	.word	0x0000d518
    d68c:	0000d518 	.word	0x0000d518
    d690:	0000d518 	.word	0x0000d518
    d694:	0000d518 	.word	0x0000d518
    d698:	0000d518 	.word	0x0000d518
    d69c:	0000d7e8 	.word	0x0000d7e8
    d6a0:	0000d518 	.word	0x0000d518
    d6a4:	0000d518 	.word	0x0000d518
    d6a8:	0000d518 	.word	0x0000d518
    d6ac:	0000d518 	.word	0x0000d518
    d6b0:	0000d518 	.word	0x0000d518
    d6b4:	0000d518 	.word	0x0000d518
    d6b8:	0000d518 	.word	0x0000d518
    d6bc:	0000d518 	.word	0x0000d518
    d6c0:	0000d518 	.word	0x0000d518
    d6c4:	0000d518 	.word	0x0000d518
    d6c8:	0000d518 	.word	0x0000d518
    d6cc:	0000d518 	.word	0x0000d518
    d6d0:	0000d518 	.word	0x0000d518
    d6d4:	0000d518 	.word	0x0000d518
    d6d8:	0000d518 	.word	0x0000d518
    d6dc:	0000d7fc 	.word	0x0000d7fc
    d6e0:	0000d518 	.word	0x0000d518
    d6e4:	0000d518 	.word	0x0000d518
    d6e8:	0000d518 	.word	0x0000d518
    d6ec:	0000d7fc 	.word	0x0000d7fc
    d6f0:	0000d818 	.word	0x0000d818
    d6f4:	e2411030 	sub	r1, r1, #48	; 0x30
    d6f8:	e6ef3071 	uxtb	r3, r1
    d6fc:	e3530009 	cmp	r3, #9
    d700:	8affff7c 	bhi	d4f8 <CScreenDevice::Write(char)+0x60>
    d704:	e3a03007 	mov	r3, #7
    d708:	e580104c 	str	r1, [r0, #76]	; 0x4c
    d70c:	e5803030 	str	r3, [r0, #48]	; 0x30
    d710:	eaffff7a 	b	d500 <CScreenDevice::Write(char)+0x68>
    d714:	e2411030 	sub	r1, r1, #48	; 0x30
    d718:	e6ef3071 	uxtb	r3, r1
    d71c:	e3530009 	cmp	r3, #9
    d720:	8affff74 	bhi	d4f8 <CScreenDevice::Write(char)+0x60>
    d724:	e3a03006 	mov	r3, #6
    d728:	e5801050 	str	r1, [r0, #80]	; 0x50
    d72c:	e5803030 	str	r3, [r0, #48]	; 0x30
    d730:	eaffff72 	b	d500 <CScreenDevice::Write(char)+0x68>
    d734:	e3510048 	cmp	r1, #72	; 0x48
    d738:	0a000094 	beq	d990 <CScreenDevice::Write(char)+0x4f8>
    d73c:	e3510072 	cmp	r1, #114	; 0x72
    d740:	0a000011 	beq	d78c <CScreenDevice::Write(char)+0x2f4>
    d744:	e2411030 	sub	r1, r1, #48	; 0x30
    d748:	e6ef3071 	uxtb	r3, r1
    d74c:	e3530009 	cmp	r3, #9
    d750:	8affff68 	bhi	d4f8 <CScreenDevice::Write(char)+0x60>
    d754:	e5903050 	ldr	r3, [r0, #80]	; 0x50
    d758:	e0833103 	add	r3, r3, r3, lsl #2
    d75c:	e0811083 	add	r1, r1, r3, lsl #1
    d760:	e35100c7 	cmp	r1, #199	; 0xc7
    d764:	e5801050 	str	r1, [r0, #80]	; 0x50
    d768:	8affff62 	bhi	d4f8 <CScreenDevice::Write(char)+0x60>
    d76c:	eaffff63 	b	d500 <CScreenDevice::Write(char)+0x68>
    d770:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    d774:	e3530019 	cmp	r3, #25
    d778:	02411068 	subeq	r1, r1, #104	; 0x68
    d77c:	016f1f11 	clzeq	r1, r1
    d780:	01a012a1 	lsreq	r1, r1, #5
    d784:	05c41044 	strbeq	r1, [r4, #68]	; 0x44
    d788:	eaffff5a 	b	d4f8 <CScreenDevice::Write(char)+0x60>
    d78c:	e5902050 	ldr	r2, [r0, #80]	; 0x50
    d790:	e590104c 	ldr	r1, [r0, #76]	; 0x4c
    d794:	ebfffde4 	bl	cf2c <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>
    d798:	e3a03000 	mov	r3, #0
    d79c:	e5843030 	str	r3, [r4, #48]	; 0x30
    d7a0:	eaffff56 	b	d500 <CScreenDevice::Write(char)+0x68>
    d7a4:	e3a03001 	mov	r3, #1
    d7a8:	e5803030 	str	r3, [r0, #48]	; 0x30
    d7ac:	eaffff53 	b	d500 <CScreenDevice::Write(char)+0x68>
    d7b0:	e3a03000 	mov	r3, #0
    d7b4:	e580303c 	str	r3, [r0, #60]	; 0x3c
    d7b8:	eaffff50 	b	d500 <CScreenDevice::Write(char)+0x68>
    d7bc:	e3a03000 	mov	r3, #0
    d7c0:	e580303c 	str	r3, [r0, #60]	; 0x3c
    d7c4:	e28dd008 	add	sp, sp, #8
    d7c8:	e8bd4010 	pop	{r4, lr}
    d7cc:	eafffe46 	b	d0ec <CScreenDevice::CursorDown()>
    d7d0:	e28dd008 	add	sp, sp, #8
    d7d4:	e8bd4010 	pop	{r4, lr}
    d7d8:	eafffe68 	b	d180 <CScreenDevice::Tabulator()>
    d7dc:	e28dd008 	add	sp, sp, #8
    d7e0:	e8bd4010 	pop	{r4, lr}
    d7e4:	eafffd89 	b	ce10 <CScreenDevice::CursorLeft()>
    d7e8:	e590104c 	ldr	r1, [r0, #76]	; 0x4c
    d7ec:	e3510000 	cmp	r1, #0
    d7f0:	0affff40 	beq	d4f8 <CScreenDevice::Write(char)+0x60>
    d7f4:	ebfffeeb 	bl	d3a8 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>
    d7f8:	eaffff3e 	b	d4f8 <CScreenDevice::Write(char)+0x60>
    d7fc:	e590304c 	ldr	r3, [r0, #76]	; 0x4c
    d800:	e3530004 	cmp	r3, #4
    d804:	02411068 	subeq	r1, r1, #104	; 0x68
    d808:	016f1f11 	clzeq	r1, r1
    d80c:	01a012a1 	lsreq	r1, r1, #5
    d810:	05c01048 	strbeq	r1, [r0, #72]	; 0x48
    d814:	eaffff37 	b	d4f8 <CScreenDevice::Write(char)+0x60>
    d818:	e590304c 	ldr	r3, [r0, #76]	; 0x4c
    d81c:	e353001b 	cmp	r3, #27
    d820:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    d824:	eaffff33 	b	d4f8 <CScreenDevice::Write(char)+0x60>
    d828:	0000d984 	.word	0x0000d984
    d82c:	0000d978 	.word	0x0000d978
    d830:	0000d96c 	.word	0x0000d96c
    d834:	0000d4f8 	.word	0x0000d4f8
    d838:	0000d4f8 	.word	0x0000d4f8
    d83c:	0000d4f8 	.word	0x0000d4f8
    d840:	0000d4f8 	.word	0x0000d4f8
    d844:	0000d4f8 	.word	0x0000d4f8
    d848:	0000d4f8 	.word	0x0000d4f8
    d84c:	0000d4f8 	.word	0x0000d4f8
    d850:	0000d4f8 	.word	0x0000d4f8
    d854:	0000d4f8 	.word	0x0000d4f8
    d858:	0000d4f8 	.word	0x0000d4f8
    d85c:	0000d4f8 	.word	0x0000d4f8
    d860:	0000d4f8 	.word	0x0000d4f8
    d864:	0000d4f8 	.word	0x0000d4f8
    d868:	0000d4f8 	.word	0x0000d4f8
    d86c:	0000d4f8 	.word	0x0000d4f8
    d870:	0000d4f8 	.word	0x0000d4f8
    d874:	0000d4f8 	.word	0x0000d4f8
    d878:	0000d4f8 	.word	0x0000d4f8
    d87c:	0000d4f8 	.word	0x0000d4f8
    d880:	0000d4f8 	.word	0x0000d4f8
    d884:	0000d4f8 	.word	0x0000d4f8
    d888:	0000d4f8 	.word	0x0000d4f8
    d88c:	0000d4f8 	.word	0x0000d4f8
    d890:	0000d4f8 	.word	0x0000d4f8
    d894:	0000d984 	.word	0x0000d984
    d898:	e3a03005 	mov	r3, #5
    d89c:	e5803030 	str	r3, [r0, #48]	; 0x30
    d8a0:	eaffff16 	b	d500 <CScreenDevice::Write(char)+0x68>
    d8a4:	e6ef3071 	uxtb	r3, r1
    d8a8:	e353001f 	cmp	r3, #31
    d8ac:	9affff13 	bls	d500 <CScreenDevice::Write(char)+0x68>
    d8b0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    d8b4:	e590203c 	ldr	r2, [r0, #60]	; 0x3c
    d8b8:	e1d004b6 	ldrh	r0, [r0, #70]	; 0x46
    d8bc:	e58d0000 	str	r0, [sp]
    d8c0:	e1a00004 	mov	r0, r4
    d8c4:	ebfffe40 	bl	d1cc <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
    d8c8:	e1a00004 	mov	r0, r4
    d8cc:	e28dd008 	add	sp, sp, #8
    d8d0:	e8bd4010 	pop	{r4, lr}
    d8d4:	eafffe1a 	b	d144 <CScreenDevice::CursorRight()>
    d8d8:	ebfffecd 	bl	d414 <CScreenDevice::ClearDisplayEnd()>
    d8dc:	e3a03000 	mov	r3, #0
    d8e0:	e5843030 	str	r3, [r4, #48]	; 0x30
    d8e4:	eaffff05 	b	d500 <CScreenDevice::Write(char)+0x68>
    d8e8:	e3a03000 	mov	r3, #0
    d8ec:	e5902034 	ldr	r2, [r0, #52]	; 0x34
    d8f0:	e580303c 	str	r3, [r0, #60]	; 0x3c
    d8f4:	e5803030 	str	r3, [r0, #48]	; 0x30
    d8f8:	e5802040 	str	r2, [r0, #64]	; 0x40
    d8fc:	eafffeff 	b	d500 <CScreenDevice::Write(char)+0x68>
    d900:	e3a03004 	mov	r3, #4
    d904:	e5803030 	str	r3, [r0, #48]	; 0x30
    d908:	eafffefc 	b	d500 <CScreenDevice::Write(char)+0x68>
    d90c:	ebfffd3f 	bl	ce10 <CScreenDevice::CursorLeft()>
    d910:	e3a03000 	mov	r3, #0
    d914:	e5843030 	str	r3, [r4, #48]	; 0x30
    d918:	eafffef8 	b	d500 <CScreenDevice::Write(char)+0x68>
    d91c:	ebfffe08 	bl	d144 <CScreenDevice::CursorRight()>
    d920:	e3a03000 	mov	r3, #0
    d924:	e5843030 	str	r3, [r4, #48]	; 0x30
    d928:	eafffef4 	b	d500 <CScreenDevice::Write(char)+0x68>
    d92c:	ebfffdee 	bl	d0ec <CScreenDevice::CursorDown()>
    d930:	e3a03000 	mov	r3, #0
    d934:	e5843030 	str	r3, [r4, #48]	; 0x30
    d938:	eafffef0 	b	d500 <CScreenDevice::Write(char)+0x68>
    d93c:	ebfffe87 	bl	d360 <CScreenDevice::ClearLineEnd()>
    d940:	e3a03000 	mov	r3, #0
    d944:	e5843030 	str	r3, [r4, #48]	; 0x30
    d948:	eafffeec 	b	d500 <CScreenDevice::Write(char)+0x68>
    d94c:	e2411030 	sub	r1, r1, #48	; 0x30
    d950:	e6ef3071 	uxtb	r3, r1
    d954:	e3530009 	cmp	r3, #9
    d958:	8afffee6 	bhi	d4f8 <CScreenDevice::Write(char)+0x60>
    d95c:	e3a03003 	mov	r3, #3
    d960:	e580104c 	str	r1, [r0, #76]	; 0x4c
    d964:	e5803030 	str	r3, [r0, #48]	; 0x30
    d968:	eafffee4 	b	d500 <CScreenDevice::Write(char)+0x68>
    d96c:	e3a0301f 	mov	r3, #31
    d970:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
    d974:	eafffedf 	b	d4f8 <CScreenDevice::Write(char)+0x60>
    d978:	e3a03b3e 	mov	r3, #63488	; 0xf800
    d97c:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
    d980:	eafffedc 	b	d4f8 <CScreenDevice::Write(char)+0x60>
    d984:	e3e03020 	mvn	r3, #32
    d988:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
    d98c:	eafffed9 	b	d4f8 <CScreenDevice::Write(char)+0x60>
    d990:	e5902050 	ldr	r2, [r0, #80]	; 0x50
    d994:	e590104c 	ldr	r1, [r0, #76]	; 0x4c
    d998:	ebfffd37 	bl	ce7c <CScreenDevice::CursorMove(unsigned int, unsigned int)>
    d99c:	e3a03000 	mov	r3, #0
    d9a0:	e5843030 	str	r3, [r4, #48]	; 0x30
    d9a4:	eafffed5 	b	d500 <CScreenDevice::Write(char)+0x68>

0000d9a8 <CScreenDevice::Write(void const*, unsigned int)>:
    d9a8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d9ac:	e1a05000 	mov	r5, r0
    d9b0:	e5900058 	ldr	r0, [r0, #88]	; 0x58
    d9b4:	e1a07001 	mov	r7, r1
    d9b8:	e3500000 	cmp	r0, #0
    d9bc:	e1a04002 	mov	r4, r2
    d9c0:	1a000028 	bne	da68 <CScreenDevice::Write(void const*, unsigned int)+0xc0>
    d9c4:	e3a02001 	mov	r2, #1
    d9c8:	e5d53044 	ldrb	r3, [r5, #68]	; 0x44
    d9cc:	e5c52054 	strb	r2, [r5, #84]	; 0x54
    d9d0:	e3530000 	cmp	r3, #0
    d9d4:	1a00001c 	bne	da4c <CScreenDevice::Write(void const*, unsigned int)+0xa4>
    d9d8:	e3540000 	cmp	r4, #0
    d9dc:	e2446001 	sub	r6, r4, #1
    d9e0:	01a06004 	moveq	r6, r4
    d9e4:	0a00000b 	beq	da18 <CScreenDevice::Write(void const*, unsigned int)+0x70>
    d9e8:	e1a04007 	mov	r4, r7
    d9ec:	e0d410d1 	ldrsb	r1, [r4], #1
    d9f0:	e1a00005 	mov	r0, r5
    d9f4:	ebfffea7 	bl	d498 <CScreenDevice::Write(char)>
    d9f8:	e2643001 	rsb	r3, r4, #1
    d9fc:	e0833006 	add	r3, r3, r6
    da00:	e1770003 	cmn	r7, r3
    da04:	1afffff8 	bne	d9ec <CScreenDevice::Write(void const*, unsigned int)+0x44>
    da08:	e2866001 	add	r6, r6, #1
    da0c:	e5d53044 	ldrb	r3, [r5, #68]	; 0x44
    da10:	e3530000 	cmp	r3, #0
    da14:	1a000009 	bne	da40 <CScreenDevice::Write(void const*, unsigned int)+0x98>
    da18:	e3a02000 	mov	r2, #0
    da1c:	e5953058 	ldr	r3, [r5, #88]	; 0x58
    da20:	e5c52054 	strb	r2, [r5, #84]	; 0x54
    da24:	e1530002 	cmp	r3, r2
    da28:	0a000000 	beq	da30 <CScreenDevice::Write(void const*, unsigned int)+0x88>
    da2c:	eb000feb 	bl	119e0 <LeaveCritical>
    da30:	e3a03000 	mov	r3, #0
    da34:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    da38:	e1a00006 	mov	r0, r6
    da3c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    da40:	e1a00005 	mov	r0, r5
    da44:	ebfffc31 	bl	cb10 <CScreenDevice::InvertCursor() [clone .part.6]>
    da48:	eafffff2 	b	da18 <CScreenDevice::Write(void const*, unsigned int)+0x70>
    da4c:	e1a00005 	mov	r0, r5
    da50:	ebfffc2e 	bl	cb10 <CScreenDevice::InvertCursor() [clone .part.6]>
    da54:	e3540000 	cmp	r4, #0
    da58:	e2446001 	sub	r6, r4, #1
    da5c:	1affffe1 	bne	d9e8 <CScreenDevice::Write(void const*, unsigned int)+0x40>
    da60:	e1a06004 	mov	r6, r4
    da64:	eaffffe8 	b	da0c <CScreenDevice::Write(void const*, unsigned int)+0x64>
    da68:	eb000faf 	bl	1192c <EnterCritical>
    da6c:	eaffffd4 	b	d9c4 <CScreenDevice::Write(void const*, unsigned int)+0x1c>

0000da70 <CScreenDevice::Initialize()>:
    da70:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    da74:	e5d0500c 	ldrb	r5, [r0, #12]
    da78:	e24dd00c 	sub	sp, sp, #12
    da7c:	e3550000 	cmp	r5, #0
    da80:	e1a04000 	mov	r4, r0
    da84:	0a00002a 	beq	db34 <CScreenDevice::Initialize()+0xc4>
    da88:	e5903004 	ldr	r3, [r0, #4]
    da8c:	e5902008 	ldr	r2, [r0, #8]
    da90:	e5803024 	str	r3, [r0, #36]	; 0x24
    da94:	e0000392 	mul	r0, r2, r3
    da98:	e370010f 	cmn	r0, #-1073741821	; 0xc0000003
    da9c:	e1a00080 	lsl	r0, r0, #1
    daa0:	e584001c 	str	r0, [r4, #28]
    daa4:	e5843020 	str	r3, [r4, #32]
    daa8:	23e00000 	mvncs	r0, #0
    daac:	e5842028 	str	r2, [r4, #40]	; 0x28
    dab0:	eb000ff8 	bl	11a98 <operator new[](unsigned int)>
    dab4:	e5947028 	ldr	r7, [r4, #40]	; 0x28
    dab8:	e5840018 	str	r0, [r4, #24]
    dabc:	e2846014 	add	r6, r4, #20
    dac0:	e1a00006 	mov	r0, r6
    dac4:	eb001308 	bl	126ec <CCharGenerator::GetCharHeight() const>
    dac8:	e1a01000 	mov	r1, r0
    dacc:	e1a00007 	mov	r0, r7
    dad0:	ebffef1d 	bl	974c <__udivsi3>
    dad4:	e1a05000 	mov	r5, r0
    dad8:	e1a00006 	mov	r0, r6
    dadc:	eb001302 	bl	126ec <CCharGenerator::GetCharHeight() const>
    dae0:	e3a02000 	mov	r2, #0
    dae4:	e0000590 	mul	r0, r0, r5
    dae8:	e5943034 	ldr	r3, [r4, #52]	; 0x34
    daec:	e584002c 	str	r0, [r4, #44]	; 0x2c
    daf0:	e5840038 	str	r0, [r4, #56]	; 0x38
    daf4:	e5843040 	str	r3, [r4, #64]	; 0x40
    daf8:	e584203c 	str	r2, [r4, #60]	; 0x3c
    dafc:	e1a00004 	mov	r0, r4
    db00:	ebfffe43 	bl	d414 <CScreenDevice::ClearDisplayEnd()>
    db04:	e5d43044 	ldrb	r3, [r4, #68]	; 0x44
    db08:	e3530000 	cmp	r3, #0
    db0c:	1a00002f 	bne	dbd0 <CScreenDevice::Initialize()+0x160>
    db10:	ebfff213 	bl	a364 <CDeviceNameService::Get()>
    db14:	e1a02004 	mov	r2, r4
    db18:	e3a03000 	mov	r3, #0
    db1c:	e59f10b8 	ldr	r1, [pc, #184]	; dbdc <CScreenDevice::Initialize()+0x16c>
    db20:	ebfff14f 	bl	a064 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
    db24:	e3a05001 	mov	r5, #1
    db28:	e1a00005 	mov	r0, r5
    db2c:	e28dd00c 	add	sp, sp, #12
    db30:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    db34:	e3a00094 	mov	r0, #148	; 0x94
    db38:	eb000fd5 	bl	11a94 <operator new(unsigned int)>
    db3c:	e9940006 	ldmib	r4, {r1, r2}
    db40:	e1a06000 	mov	r6, r0
    db44:	e3a03010 	mov	r3, #16
    db48:	e58d5004 	str	r5, [sp, #4]
    db4c:	e58d5000 	str	r5, [sp]
    db50:	eb00118c 	bl	12188 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    db54:	e5846010 	str	r6, [r4, #16]
    db58:	e1a00006 	mov	r0, r6
    db5c:	eb001202 	bl	1236c <CBcmFrameBuffer::Initialize()>
    db60:	e3500000 	cmp	r0, #0
    db64:	0affffef 	beq	db28 <CScreenDevice::Initialize()+0xb8>
    db68:	e5940010 	ldr	r0, [r4, #16]
    db6c:	eb001238 	bl	12454 <CBcmFrameBuffer::GetDepth() const>
    db70:	e3500010 	cmp	r0, #16
    db74:	1affffeb 	bne	db28 <CScreenDevice::Initialize()+0xb8>
    db78:	e5940010 	ldr	r0, [r4, #16]
    db7c:	eb001236 	bl	1245c <CBcmFrameBuffer::GetBuffer() const>
    db80:	e5840018 	str	r0, [r4, #24]
    db84:	e5940010 	ldr	r0, [r4, #16]
    db88:	eb001235 	bl	12464 <CBcmFrameBuffer::GetSize() const>
    db8c:	e584001c 	str	r0, [r4, #28]
    db90:	e5940010 	ldr	r0, [r4, #16]
    db94:	eb00122c 	bl	1244c <CBcmFrameBuffer::GetPitch() const>
    db98:	e5840020 	str	r0, [r4, #32]
    db9c:	e5940010 	ldr	r0, [r4, #16]
    dba0:	eb001221 	bl	1242c <CBcmFrameBuffer::GetWidth() const>
    dba4:	e5840024 	str	r0, [r4, #36]	; 0x24
    dba8:	e5940010 	ldr	r0, [r4, #16]
    dbac:	eb001220 	bl	12434 <CBcmFrameBuffer::GetHeight() const>
    dbb0:	e5943020 	ldr	r3, [r4, #32]
    dbb4:	e1a07000 	mov	r7, r0
    dbb8:	e3130003 	tst	r3, #3
    dbbc:	01a030a3 	lsreq	r3, r3, #1
    dbc0:	e5840028 	str	r0, [r4, #40]	; 0x28
    dbc4:	05843020 	streq	r3, [r4, #32]
    dbc8:	0affffbb 	beq	dabc <CScreenDevice::Initialize()+0x4c>
    dbcc:	eaffffd5 	b	db28 <CScreenDevice::Initialize()+0xb8>
    dbd0:	e1a00004 	mov	r0, r4
    dbd4:	ebfffbcd 	bl	cb10 <CScreenDevice::InvertCursor() [clone .part.6]>
    dbd8:	eaffffcc 	b	db10 <CScreenDevice::Initialize()+0xa0>
    dbdc:	0001390c 	.word	0x0001390c

0000dbe0 <CScreenDevice::InvertCursor()>:
    dbe0:	e5d03044 	ldrb	r3, [r0, #68]	; 0x44
    dbe4:	e3530000 	cmp	r3, #0
    dbe8:	012fff1e 	bxeq	lr
    dbec:	eafffbc7 	b	cb10 <CScreenDevice::InvertCursor() [clone .part.6]>

0000dbf0 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)>:
    dbf0:	e590c024 	ldr	ip, [r0, #36]	; 0x24
    dbf4:	e15c0001 	cmp	ip, r1
    dbf8:	912fff1e 	bxls	lr
    dbfc:	e590c028 	ldr	ip, [r0, #40]	; 0x28
    dc00:	e15c0002 	cmp	ip, r2
    dc04:	8590c020 	ldrhi	ip, [r0, #32]
    dc08:	85900018 	ldrhi	r0, [r0, #24]
    dc0c:	8022129c 	mlahi	r2, ip, r2, r1
    dc10:	81a02082 	lslhi	r2, r2, #1
    dc14:	818030b2 	strhhi	r3, [r0, r2]
    dc18:	e12fff1e 	bx	lr

0000dc1c <CScreenDevice::GetPixel(unsigned int, unsigned int)>:
    dc1c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    dc20:	e1530001 	cmp	r3, r1
    dc24:	9a000008 	bls	dc4c <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x30>
    dc28:	e5903028 	ldr	r3, [r0, #40]	; 0x28
    dc2c:	e1530002 	cmp	r3, r2
    dc30:	9a000005 	bls	dc4c <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x30>
    dc34:	e590c020 	ldr	ip, [r0, #32]
    dc38:	e5903018 	ldr	r3, [r0, #24]
    dc3c:	e022129c 	mla	r2, ip, r2, r1
    dc40:	e1a02082 	lsl	r2, r2, #1
    dc44:	e19300b2 	ldrh	r0, [r3, r2]
    dc48:	e12fff1e 	bx	lr
    dc4c:	e3a00000 	mov	r0, #0
    dc50:	e12fff1e 	bx	lr

0000dc54 <CScreenDevice::Rotor(unsigned int, unsigned int)>:
    dc54:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    dc58:	e1a05000 	mov	r5, r0
    dc5c:	e24dd00c 	sub	sp, sp, #12
    dc60:	e1a04001 	mov	r4, r1
    dc64:	e2800014 	add	r0, r0, #20
    dc68:	e1a06002 	mov	r6, r2
    dc6c:	e5957024 	ldr	r7, [r5, #36]	; 0x24
    dc70:	eb00129b 	bl	126e4 <CCharGenerator::GetCharWidth() const>
    dc74:	e3a0cb3e 	mov	ip, #63488	; 0xf800
    dc78:	e2044003 	and	r4, r4, #3
    dc7c:	e0200094 	mla	r0, r4, r0, r0
    dc80:	e59f3024 	ldr	r3, [pc, #36]	; dcac <CScreenDevice::Rotor(unsigned int, unsigned int)+0x58>
    dc84:	e2066003 	and	r6, r6, #3
    dc88:	e0833006 	add	r3, r3, r6
    dc8c:	e1d311dc 	ldrsb	r1, [r3, #28]
    dc90:	e0472000 	sub	r2, r7, r0
    dc94:	e58dc000 	str	ip, [sp]
    dc98:	e1a00005 	mov	r0, r5
    dc9c:	e3a03000 	mov	r3, #0
    dca0:	ebfffd49 	bl	d1cc <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
    dca4:	e28dd00c 	add	sp, sp, #12
    dca8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    dcac:	00013cf8 	.word	0x00013cf8

0000dcb0 <CSerialDevice::Read(void*, unsigned int)>:
    dcb0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    dcb4:	e2514000 	subs	r4, r1, #0
    dcb8:	e1a05000 	mov	r5, r0
    dcbc:	e1a08002 	mov	r8, r2
    dcc0:	0a00005a 	beq	de30 <CSerialDevice::Read(void*, unsigned int)+0x180>
    dcc4:	e59530a4 	ldr	r3, [r5, #164]	; 0xa4
    dcc8:	e3530000 	cmp	r3, #0
    dccc:	0a000034 	beq	dda4 <CSerialDevice::Read(void*, unsigned int)+0xf4>
    dcd0:	e2856802 	add	r6, r5, #131072	; 0x20000
    dcd4:	e59600d0 	ldr	r0, [r6, #208]	; 0xd0
    dcd8:	e3500000 	cmp	r0, #0
    dcdc:	1a000022 	bne	dd6c <CSerialDevice::Read(void*, unsigned int)+0xbc>
    dce0:	e2853801 	add	r3, r5, #65536	; 0x10000
    dce4:	e59320b4 	ldr	r2, [r3, #180]	; 0xb4
    dce8:	e3520000 	cmp	r2, #0
    dcec:	ba000023 	blt	dd80 <CSerialDevice::Read(void*, unsigned int)+0xd0>
    dcf0:	e3580000 	cmp	r8, #0
    dcf4:	0a000017 	beq	dd58 <CSerialDevice::Read(void*, unsigned int)+0xa8>
    dcf8:	e59320ac 	ldr	r2, [r3, #172]	; 0xac
    dcfc:	e59310b0 	ldr	r1, [r3, #176]	; 0xb0
    dd00:	e1510002 	cmp	r1, r2
    dd04:	0a000054 	beq	de5c <CSerialDevice::Read(void*, unsigned int)+0x1ac>
    dd08:	e0842008 	add	r2, r4, r8
    dd0c:	e1a0c004 	mov	ip, r4
    dd10:	e59fe154 	ldr	lr, [pc, #340]	; de6c <CSerialDevice::Read(void*, unsigned int)+0x1bc>
    dd14:	ea000003 	b	dd28 <CSerialDevice::Read(void*, unsigned int)+0x78>
    dd18:	e59370ac 	ldr	r7, [r3, #172]	; 0xac
    dd1c:	e59310b0 	ldr	r1, [r3, #176]	; 0xb0
    dd20:	e1570001 	cmp	r7, r1
    dd24:	0a00000b 	beq	dd58 <CSerialDevice::Read(void*, unsigned int)+0xa8>
    dd28:	e59310b0 	ldr	r1, [r3, #176]	; 0xb0
    dd2c:	e2810001 	add	r0, r1, #1
    dd30:	e58300b0 	str	r0, [r3, #176]	; 0xb0
    dd34:	e0851001 	add	r1, r5, r1
    dd38:	e5d110aa 	ldrb	r1, [r1, #170]	; 0xaa
    dd3c:	e4cc1001 	strb	r1, [ip], #1
    dd40:	e59310b0 	ldr	r1, [r3, #176]	; 0xb0
    dd44:	e15c0002 	cmp	ip, r2
    dd48:	e001100e 	and	r1, r1, lr
    dd4c:	e58310b0 	str	r1, [r3, #176]	; 0xb0
    dd50:	e04c8004 	sub	r8, ip, r4
    dd54:	1affffef 	bne	dd18 <CSerialDevice::Read(void*, unsigned int)+0x68>
    dd58:	e59630d0 	ldr	r3, [r6, #208]	; 0xd0
    dd5c:	e3530000 	cmp	r3, #0
    dd60:	1a00000c 	bne	dd98 <CSerialDevice::Read(void*, unsigned int)+0xe8>
    dd64:	e1a00008 	mov	r0, r8
    dd68:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    dd6c:	eb000eee 	bl	1192c <EnterCritical>
    dd70:	e2853801 	add	r3, r5, #65536	; 0x10000
    dd74:	e59320b4 	ldr	r2, [r3, #180]	; 0xb4
    dd78:	e3520000 	cmp	r2, #0
    dd7c:	aaffffdb 	bge	dcf0 <CSerialDevice::Read(void*, unsigned int)+0x40>
    dd80:	e3a02000 	mov	r2, #0
    dd84:	e59380b4 	ldr	r8, [r3, #180]	; 0xb4
    dd88:	e58320b4 	str	r2, [r3, #180]	; 0xb4
    dd8c:	e59630d0 	ldr	r3, [r6, #208]	; 0xd0
    dd90:	e3530000 	cmp	r3, #0
    dd94:	0afffff2 	beq	dd64 <CSerialDevice::Read(void*, unsigned int)+0xb4>
    dd98:	eb000f10 	bl	119e0 <LeaveCritical>
    dd9c:	e1a00008 	mov	r0, r8
    dda0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    dda4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    dda8:	e3580000 	cmp	r8, #0
    ddac:	0a00001b 	beq	de20 <CSerialDevice::Read(void*, unsigned int)+0x170>
    ddb0:	e59fc0b8 	ldr	ip, [pc, #184]	; de70 <CSerialDevice::Read(void*, unsigned int)+0x1c0>
    ddb4:	e59c2018 	ldr	r2, [ip, #24]
    ddb8:	e3120010 	tst	r2, #16
    ddbc:	1a000028 	bne	de64 <CSerialDevice::Read(void*, unsigned int)+0x1b4>
    ddc0:	e59c3000 	ldr	r3, [ip]
    ddc4:	e3130b01 	tst	r3, #1024	; 0x400
    ddc8:	1a00001d 	bne	de44 <CSerialDevice::Read(void*, unsigned int)+0x194>
    ddcc:	e3130b02 	tst	r3, #2048	; 0x800
    ddd0:	1a00001d 	bne	de4c <CSerialDevice::Read(void*, unsigned int)+0x19c>
    ddd4:	e3130c01 	tst	r3, #256	; 0x100
    ddd8:	1a00001d 	bne	de54 <CSerialDevice::Read(void*, unsigned int)+0x1a4>
    dddc:	e0842008 	add	r2, r4, r8
    dde0:	e1a01004 	mov	r1, r4
    dde4:	ea000009 	b	de10 <CSerialDevice::Read(void*, unsigned int)+0x160>
    dde8:	e59c3018 	ldr	r3, [ip, #24]
    ddec:	e3130010 	tst	r3, #16
    ddf0:	1a00000a 	bne	de20 <CSerialDevice::Read(void*, unsigned int)+0x170>
    ddf4:	e59c3000 	ldr	r3, [ip]
    ddf8:	e3130b01 	tst	r3, #1024	; 0x400
    ddfc:	1a000010 	bne	de44 <CSerialDevice::Read(void*, unsigned int)+0x194>
    de00:	e3130b02 	tst	r3, #2048	; 0x800
    de04:	1a000010 	bne	de4c <CSerialDevice::Read(void*, unsigned int)+0x19c>
    de08:	e3130c01 	tst	r3, #256	; 0x100
    de0c:	1a000010 	bne	de54 <CSerialDevice::Read(void*, unsigned int)+0x1a4>
    de10:	e4c13001 	strb	r3, [r1], #1
    de14:	e1510002 	cmp	r1, r2
    de18:	e0418004 	sub	r8, r1, r4
    de1c:	1afffff1 	bne	dde8 <CSerialDevice::Read(void*, unsigned int)+0x138>
    de20:	e3a03000 	mov	r3, #0
    de24:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    de28:	e1a00008 	mov	r0, r8
    de2c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    de30:	e59f203c 	ldr	r2, [pc, #60]	; de74 <CSerialDevice::Read(void*, unsigned int)+0x1c4>
    de34:	e59f103c 	ldr	r1, [pc, #60]	; de78 <CSerialDevice::Read(void*, unsigned int)+0x1c8>
    de38:	e59f003c 	ldr	r0, [pc, #60]	; de7c <CSerialDevice::Read(void*, unsigned int)+0x1cc>
    de3c:	ebffef19 	bl	9aa8 <assertion_failed>
    de40:	eaffff9f 	b	dcc4 <CSerialDevice::Read(void*, unsigned int)+0x14>
    de44:	e3e08000 	mvn	r8, #0
    de48:	eafffff4 	b	de20 <CSerialDevice::Read(void*, unsigned int)+0x170>
    de4c:	e3e08001 	mvn	r8, #1
    de50:	eafffff2 	b	de20 <CSerialDevice::Read(void*, unsigned int)+0x170>
    de54:	e3e08002 	mvn	r8, #2
    de58:	eafffff0 	b	de20 <CSerialDevice::Read(void*, unsigned int)+0x170>
    de5c:	e3a08000 	mov	r8, #0
    de60:	eaffffbc 	b	dd58 <CSerialDevice::Read(void*, unsigned int)+0xa8>
    de64:	e1a08003 	mov	r8, r3
    de68:	eaffffec 	b	de20 <CSerialDevice::Read(void*, unsigned int)+0x170>
    de6c:	0000ffff 	.word	0x0000ffff
    de70:	20201000 	.word	0x20201000
    de74:	00000101 	.word	0x00000101
    de78:	00013d38 	.word	0x00013d38
    de7c:	00013060 	.word	0x00013060

0000de80 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool)>:
    de80:	e92d4070 	push	{r4, r5, r6, lr}
    de84:	e1a04000 	mov	r4, r0
    de88:	e1a05002 	mov	r5, r2
    de8c:	e1a06001 	mov	r6, r1
    de90:	ebfff042 	bl	9fa0 <CDevice::CDevice()>
    de94:	e1a00004 	mov	r0, r4
    de98:	e3a03000 	mov	r3, #0
    de9c:	e59f109c 	ldr	r1, [pc, #156]	; df40 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool)+0xc0>
    dea0:	e1a02003 	mov	r2, r3
    dea4:	e4801004 	str	r1, [r0], #4
    dea8:	e3a01020 	mov	r1, #32
    deac:	ebfff4a9 	bl	b158 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    deb0:	e3a03000 	mov	r3, #0
    deb4:	e284002c 	add	r0, r4, #44	; 0x2c
    deb8:	e1a02003 	mov	r2, r3
    debc:	e3a01021 	mov	r1, #33	; 0x21
    dec0:	ebfff4a4 	bl	b158 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    dec4:	e2840054 	add	r0, r4, #84	; 0x54
    dec8:	e3a03000 	mov	r3, #0
    decc:	e3a02004 	mov	r2, #4
    ded0:	e3a0100e 	mov	r1, #14
    ded4:	ebfff49f 	bl	b158 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    ded8:	e284007c 	add	r0, r4, #124	; 0x7c
    dedc:	e3a03000 	mov	r3, #0
    dee0:	e3a02004 	mov	r2, #4
    dee4:	e3a0100f 	mov	r1, #15
    dee8:	ebfff49a 	bl	b158 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    deec:	e3550000 	cmp	r5, #0
    def0:	e3a03000 	mov	r3, #0
    def4:	e3a0c001 	mov	ip, #1
    def8:	13a0e002 	movne	lr, #2
    defc:	03a0e001 	moveq	lr, #1
    df00:	e2842802 	add	r2, r4, #131072	; 0x20000
    df04:	e2841801 	add	r1, r4, #65536	; 0x10000
    df08:	e58460a4 	str	r6, [r4, #164]	; 0xa4
    df0c:	e5c450a8 	strb	r5, [r4, #168]	; 0xa8
    df10:	e5c430a9 	strb	r3, [r4, #169]	; 0xa9
    df14:	e1a00004 	mov	r0, r4
    df18:	e58130ac 	str	r3, [r1, #172]	; 0xac
    df1c:	e58130b0 	str	r3, [r1, #176]	; 0xb0
    df20:	e58130b4 	str	r3, [r1, #180]	; 0xb4
    df24:	e58230b8 	str	r3, [r2, #184]	; 0xb8
    df28:	e582e0d0 	str	lr, [r2, #208]	; 0xd0
    df2c:	e58230c4 	str	r3, [r2, #196]	; 0xc4
    df30:	e58230bc 	str	r3, [r2, #188]	; 0xbc
    df34:	e582c0c0 	str	ip, [r2, #192]	; 0xc0
    df38:	e582c0d4 	str	ip, [r2, #212]	; 0xd4
    df3c:	e8bd8070 	pop	{r4, r5, r6, pc}
    df40:	00013d24 	.word	0x00013d24

0000df44 <CSerialDevice::Initialize(unsigned int)>:
    df44:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    df48:	e1a07001 	mov	r7, r1
    df4c:	e1a04000 	mov	r4, r0
    df50:	ebfffaba 	bl	ca40 <CMachineInfo::Get()>
    df54:	e3a01002 	mov	r1, #2
    df58:	ebfffa58 	bl	c8c0 <CMachineInfo::GetClockRate(unsigned int) const>
    df5c:	e2508000 	subs	r8, r0, #0
    df60:	0a000051 	beq	e0ac <CSerialDevice::Initialize(unsigned int)+0x168>
    df64:	e59f3154 	ldr	r3, [pc, #340]	; e0c0 <CSerialDevice::Initialize(unsigned int)+0x17c>
    df68:	e2472f4b 	sub	r2, r7, #300	; 0x12c
    df6c:	e1520003 	cmp	r2, r3
    df70:	8a000048 	bhi	e098 <CSerialDevice::Initialize(unsigned int)+0x154>
    df74:	e1a05207 	lsl	r5, r7, #4
    df78:	e1a01005 	mov	r1, r5
    df7c:	e1a00008 	mov	r0, r8
    df80:	ebffedf1 	bl	974c <__udivsi3>
    df84:	e59f3138 	ldr	r3, [pc, #312]	; e0c4 <CSerialDevice::Initialize(unsigned int)+0x180>
    df88:	e2402001 	sub	r2, r0, #1
    df8c:	e1520003 	cmp	r2, r3
    df90:	e1a06000 	mov	r6, r0
    df94:	8a00003a 	bhi	e084 <CSerialDevice::Initialize(unsigned int)+0x140>
    df98:	e1a01005 	mov	r1, r5
    df9c:	e1a00008 	mov	r0, r8
    dfa0:	ebffee26 	bl	9840 <__aeabi_uidivmod>
    dfa4:	e1a00181 	lsl	r0, r1, #3
    dfa8:	e1a01007 	mov	r1, r7
    dfac:	ebffede6 	bl	974c <__udivsi3>
    dfb0:	e2005001 	and	r5, r0, #1
    dfb4:	e08550a0 	add	r5, r5, r0, lsr #1
    dfb8:	e355003f 	cmp	r5, #63	; 0x3f
    dfbc:	8a00002b 	bhi	e070 <CSerialDevice::Initialize(unsigned int)+0x12c>
    dfc0:	e59400a4 	ldr	r0, [r4, #164]	; 0xa4
    dfc4:	e3500000 	cmp	r0, #0
    dfc8:	0a000008 	beq	dff0 <CSerialDevice::Initialize(unsigned int)+0xac>
    dfcc:	e5d430a8 	ldrb	r3, [r4, #168]	; 0xa8
    dfd0:	e59f20f0 	ldr	r2, [pc, #240]	; e0c8 <CSerialDevice::Initialize(unsigned int)+0x184>
    dfd4:	e3530000 	cmp	r3, #0
    dfd8:	e3a01039 	mov	r1, #57	; 0x39
    dfdc:	e1a03004 	mov	r3, r4
    dfe0:	0a000020 	beq	e068 <CSerialDevice::Initialize(unsigned int)+0x124>
    dfe4:	ebfff5ac 	bl	b69c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>
    dfe8:	e3a03001 	mov	r3, #1
    dfec:	e5c430a9 	strb	r3, [r4, #169]	; 0xa9
    dff0:	e3a02000 	mov	r2, #0
    dff4:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
    dff8:	e59400a4 	ldr	r0, [r4, #164]	; 0xa4
    dffc:	e59f30c8 	ldr	r3, [pc, #200]	; e0cc <CSerialDevice::Initialize(unsigned int)+0x188>
    e000:	e59f10c8 	ldr	r1, [pc, #200]	; e0d0 <CSerialDevice::Initialize(unsigned int)+0x18c>
    e004:	e1500002 	cmp	r0, r2
    e008:	e5832038 	str	r2, [r3, #56]	; 0x38
    e00c:	13a00009 	movne	r0, #9
    e010:	e5831044 	str	r1, [r3, #68]	; 0x44
    e014:	13a02e45 	movne	r2, #1104	; 0x450
    e018:	03a02060 	moveq	r2, #96	; 0x60
    e01c:	13a01070 	movne	r1, #112	; 0x70
    e020:	e5836024 	str	r6, [r3, #36]	; 0x24
    e024:	e5835028 	str	r5, [r3, #40]	; 0x28
    e028:	15830034 	strne	r0, [r3, #52]	; 0x34
    e02c:	0583202c 	streq	r2, [r3, #44]	; 0x2c
    e030:	1583102c 	strne	r1, [r3, #44]	; 0x2c
    e034:	15832038 	strne	r2, [r3, #56]	; 0x38
    e038:	e59f308c 	ldr	r3, [pc, #140]	; e0cc <CSerialDevice::Initialize(unsigned int)+0x188>
    e03c:	e59f2090 	ldr	r2, [pc, #144]	; e0d4 <CSerialDevice::Initialize(unsigned int)+0x190>
    e040:	e3a05000 	mov	r5, #0
    e044:	e5832030 	str	r2, [r3, #48]	; 0x30
    e048:	ee075fba 	mcr	15, 0, r5, cr7, cr10, {5}
    e04c:	ebfff0c4 	bl	a364 <CDeviceNameService::Get()>
    e050:	e1a03005 	mov	r3, r5
    e054:	e1a02004 	mov	r2, r4
    e058:	e59f1078 	ldr	r1, [pc, #120]	; e0d8 <CSerialDevice::Initialize(unsigned int)+0x194>
    e05c:	ebfff000 	bl	a064 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
    e060:	e3a00001 	mov	r0, #1
    e064:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e068:	ebfff51e 	bl	b4e8 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    e06c:	eaffffdd 	b	dfe8 <CSerialDevice::Initialize(unsigned int)+0xa4>
    e070:	e3a02092 	mov	r2, #146	; 0x92
    e074:	e59f1060 	ldr	r1, [pc, #96]	; e0dc <CSerialDevice::Initialize(unsigned int)+0x198>
    e078:	e59f0060 	ldr	r0, [pc, #96]	; e0e0 <CSerialDevice::Initialize(unsigned int)+0x19c>
    e07c:	ebffee89 	bl	9aa8 <assertion_failed>
    e080:	eaffffce 	b	dfc0 <CSerialDevice::Initialize(unsigned int)+0x7c>
    e084:	e3a0208f 	mov	r2, #143	; 0x8f
    e088:	e59f104c 	ldr	r1, [pc, #76]	; e0dc <CSerialDevice::Initialize(unsigned int)+0x198>
    e08c:	e59f0050 	ldr	r0, [pc, #80]	; e0e4 <CSerialDevice::Initialize(unsigned int)+0x1a0>
    e090:	ebffee84 	bl	9aa8 <assertion_failed>
    e094:	eaffffbf 	b	df98 <CSerialDevice::Initialize(unsigned int)+0x54>
    e098:	e3a0208c 	mov	r2, #140	; 0x8c
    e09c:	e59f1038 	ldr	r1, [pc, #56]	; e0dc <CSerialDevice::Initialize(unsigned int)+0x198>
    e0a0:	e59f0040 	ldr	r0, [pc, #64]	; e0e8 <CSerialDevice::Initialize(unsigned int)+0x1a4>
    e0a4:	ebffee7f 	bl	9aa8 <assertion_failed>
    e0a8:	eaffffb1 	b	df74 <CSerialDevice::Initialize(unsigned int)+0x30>
    e0ac:	e3a0208a 	mov	r2, #138	; 0x8a
    e0b0:	e59f1024 	ldr	r1, [pc, #36]	; e0dc <CSerialDevice::Initialize(unsigned int)+0x198>
    e0b4:	e59f0030 	ldr	r0, [pc, #48]	; e0ec <CSerialDevice::Initialize(unsigned int)+0x1a8>
    e0b8:	ebffee7a 	bl	9aa8 <assertion_failed>
    e0bc:	eaffffa8 	b	df64 <CSerialDevice::Initialize(unsigned int)+0x20>
    e0c0:	003d07d4 	.word	0x003d07d4
    e0c4:	0000fffe 	.word	0x0000fffe
    e0c8:	0000e858 	.word	0x0000e858
    e0cc:	20201000 	.word	0x20201000
    e0d0:	000007ff 	.word	0x000007ff
    e0d4:	00000301 	.word	0x00000301
    e0d8:	000130e0 	.word	0x000130e0
    e0dc:	00013d38 	.word	0x00013d38
    e0e0:	000130cc 	.word	0x000130cc
    e0e4:	000130a8 	.word	0x000130a8
    e0e8:	0001307c 	.word	0x0001307c
    e0ec:	0001306c 	.word	0x0001306c

0000e0f0 <CSerialDevice::GetOptions() const>:
    e0f0:	e2800802 	add	r0, r0, #131072	; 0x20000
    e0f4:	e59000c0 	ldr	r0, [r0, #192]	; 0xc0
    e0f8:	e12fff1e 	bx	lr

0000e0fc <CSerialDevice::SetOptions(unsigned int)>:
    e0fc:	e2800802 	add	r0, r0, #131072	; 0x20000
    e100:	e58010c0 	str	r1, [r0, #192]	; 0xc0
    e104:	e12fff1e 	bx	lr

0000e108 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())>:
    e108:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
    e10c:	e92d4070 	push	{r4, r5, r6, lr}
    e110:	e3530000 	cmp	r3, #0
    e114:	e1a04000 	mov	r4, r0
    e118:	e1a05001 	mov	r5, r1
    e11c:	e1a06002 	mov	r6, r2
    e120:	0a00001d 	beq	e19c <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x94>
    e124:	e2844802 	add	r4, r4, #131072	; 0x20000
    e128:	e59430c4 	ldr	r3, [r4, #196]	; 0xc4
    e12c:	e3530000 	cmp	r3, #0
    e130:	0a000003 	beq	e144 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x3c>
    e134:	e59f2088 	ldr	r2, [pc, #136]	; e1c4 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xbc>
    e138:	e59f1088 	ldr	r1, [pc, #136]	; e1c8 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc0>
    e13c:	e59f0088 	ldr	r0, [pc, #136]	; e1cc <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc4>
    e140:	ebffee58 	bl	9aa8 <assertion_failed>
    e144:	e3550000 	cmp	r5, #0
    e148:	0a000018 	beq	e1b0 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xa8>
    e14c:	e1d530d0 	ldrsb	r3, [r5]
    e150:	e3530000 	cmp	r3, #0
    e154:	0a000005 	beq	e170 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x68>
    e158:	e3560000 	cmp	r6, #0
    e15c:	0a000009 	beq	e188 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x80>
    e160:	e58460cc 	str	r6, [r4, #204]	; 0xcc
    e164:	e58450c8 	str	r5, [r4, #200]	; 0xc8
    e168:	e58450c4 	str	r5, [r4, #196]	; 0xc4
    e16c:	e8bd8070 	pop	{r4, r5, r6, pc}
    e170:	e3a02f57 	mov	r2, #348	; 0x15c
    e174:	e59f104c 	ldr	r1, [pc, #76]	; e1c8 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc0>
    e178:	e59f0050 	ldr	r0, [pc, #80]	; e1d0 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc8>
    e17c:	ebffee49 	bl	9aa8 <assertion_failed>
    e180:	e3560000 	cmp	r6, #0
    e184:	1afffff5 	bne	e160 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x58>
    e188:	e59f2044 	ldr	r2, [pc, #68]	; e1d4 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xcc>
    e18c:	e59f1034 	ldr	r1, [pc, #52]	; e1c8 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc0>
    e190:	e59f0040 	ldr	r0, [pc, #64]	; e1d8 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xd0>
    e194:	ebffee43 	bl	9aa8 <assertion_failed>
    e198:	eafffff0 	b	e160 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x58>
    e19c:	e3a02f56 	mov	r2, #344	; 0x158
    e1a0:	e59f1020 	ldr	r1, [pc, #32]	; e1c8 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc0>
    e1a4:	e59f0030 	ldr	r0, [pc, #48]	; e1dc <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xd4>
    e1a8:	ebffee3e 	bl	9aa8 <assertion_failed>
    e1ac:	eaffffdc 	b	e124 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x1c>
    e1b0:	e59f2028 	ldr	r2, [pc, #40]	; e1e0 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xd8>
    e1b4:	e59f100c 	ldr	r1, [pc, #12]	; e1c8 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc0>
    e1b8:	e59f0024 	ldr	r0, [pc, #36]	; e1e4 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xdc>
    e1bc:	ebffee39 	bl	9aa8 <assertion_failed>
    e1c0:	eaffffe1 	b	e14c <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x44>
    e1c4:	00000159 	.word	0x00000159
    e1c8:	00013d38 	.word	0x00013d38
    e1cc:	00013100 	.word	0x00013100
    e1d0:	0001311c 	.word	0x0001311c
    e1d4:	0000015d 	.word	0x0000015d
    e1d8:	00013874 	.word	0x00013874
    e1dc:	000130e8 	.word	0x000130e8
    e1e0:	0000015b 	.word	0x0000015b
    e1e4:	00013110 	.word	0x00013110

0000e1e8 <CSerialDevice::AvailableForWrite()>:
    e1e8:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
    e1ec:	e92d4010 	push	{r4, lr}
    e1f0:	e3530000 	cmp	r3, #0
    e1f4:	e1a04000 	mov	r4, r0
    e1f8:	0a000014 	beq	e250 <CSerialDevice::AvailableForWrite()+0x68>
    e1fc:	e2844802 	add	r4, r4, #131072	; 0x20000
    e200:	e59400d0 	ldr	r0, [r4, #208]	; 0xd0
    e204:	e3500000 	cmp	r0, #0
    e208:	1a00000d 	bne	e244 <CSerialDevice::AvailableForWrite()+0x5c>
    e20c:	e59420bc 	ldr	r2, [r4, #188]	; 0xbc
    e210:	e59430b8 	ldr	r3, [r4, #184]	; 0xb8
    e214:	e1520003 	cmp	r2, r3
    e218:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    e21c:	e59420b8 	ldr	r2, [r4, #184]	; 0xb8
    e220:	92834cff 	addls	r4, r3, #65280	; 0xff00
    e224:	928440ff 	addls	r4, r4, #255	; 0xff
    e228:	82434001 	subhi	r4, r3, #1
    e22c:	e3500000 	cmp	r0, #0
    e230:	e0444002 	sub	r4, r4, r2
    e234:	0a000000 	beq	e23c <CSerialDevice::AvailableForWrite()+0x54>
    e238:	eb000de8 	bl	119e0 <LeaveCritical>
    e23c:	e1a00004 	mov	r0, r4
    e240:	e8bd8010 	pop	{r4, pc}
    e244:	eb000db8 	bl	1192c <EnterCritical>
    e248:	e59400d0 	ldr	r0, [r4, #208]	; 0xd0
    e24c:	eaffffee 	b	e20c <CSerialDevice::AvailableForWrite()+0x24>
    e250:	e59f200c 	ldr	r2, [pc, #12]	; e264 <CSerialDevice::AvailableForWrite()+0x7c>
    e254:	e59f100c 	ldr	r1, [pc, #12]	; e268 <CSerialDevice::AvailableForWrite()+0x80>
    e258:	e59f000c 	ldr	r0, [pc, #12]	; e26c <CSerialDevice::AvailableForWrite()+0x84>
    e25c:	ebffee11 	bl	9aa8 <assertion_failed>
    e260:	eaffffe5 	b	e1fc <CSerialDevice::AvailableForWrite()+0x14>
    e264:	00000167 	.word	0x00000167
    e268:	00013d38 	.word	0x00013d38
    e26c:	000130e8 	.word	0x000130e8

0000e270 <CSerialDevice::AvailableForRead()>:
    e270:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
    e274:	e92d4070 	push	{r4, r5, r6, lr}
    e278:	e3530000 	cmp	r3, #0
    e27c:	e1a04000 	mov	r4, r0
    e280:	0a000013 	beq	e2d4 <CSerialDevice::AvailableForRead()+0x64>
    e284:	e2845802 	add	r5, r4, #131072	; 0x20000
    e288:	e59500d0 	ldr	r0, [r5, #208]	; 0xd0
    e28c:	e3500000 	cmp	r0, #0
    e290:	1a00000c 	bne	e2c8 <CSerialDevice::AvailableForRead()+0x58>
    e294:	e2843801 	add	r3, r4, #65536	; 0x10000
    e298:	e59310ac 	ldr	r1, [r3, #172]	; 0xac
    e29c:	e59320b0 	ldr	r2, [r3, #176]	; 0xb0
    e2a0:	e59340ac 	ldr	r4, [r3, #172]	; 0xac
    e2a4:	e1510002 	cmp	r1, r2
    e2a8:	e59330b0 	ldr	r3, [r3, #176]	; 0xb0
    e2ac:	32844801 	addcc	r4, r4, #65536	; 0x10000
    e2b0:	e3500000 	cmp	r0, #0
    e2b4:	e0444003 	sub	r4, r4, r3
    e2b8:	0a000000 	beq	e2c0 <CSerialDevice::AvailableForRead()+0x50>
    e2bc:	eb000dc7 	bl	119e0 <LeaveCritical>
    e2c0:	e1a00004 	mov	r0, r4
    e2c4:	e8bd8070 	pop	{r4, r5, r6, pc}
    e2c8:	eb000d97 	bl	1192c <EnterCritical>
    e2cc:	e59500d0 	ldr	r0, [r5, #208]	; 0xd0
    e2d0:	eaffffef 	b	e294 <CSerialDevice::AvailableForRead()+0x24>
    e2d4:	e3a02f5f 	mov	r2, #380	; 0x17c
    e2d8:	e59f1008 	ldr	r1, [pc, #8]	; e2e8 <CSerialDevice::AvailableForRead()+0x78>
    e2dc:	e59f0008 	ldr	r0, [pc, #8]	; e2ec <CSerialDevice::AvailableForRead()+0x7c>
    e2e0:	ebffedf0 	bl	9aa8 <assertion_failed>
    e2e4:	eaffffe6 	b	e284 <CSerialDevice::AvailableForRead()+0x14>
    e2e8:	00013d38 	.word	0x00013d38
    e2ec:	000130e8 	.word	0x000130e8

0000e2f0 <CSerialDevice::Peek()>:
    e2f0:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
    e2f4:	e92d4070 	push	{r4, r5, r6, lr}
    e2f8:	e3530000 	cmp	r3, #0
    e2fc:	e1a04000 	mov	r4, r0
    e300:	0a00001a 	beq	e370 <CSerialDevice::Peek()+0x80>
    e304:	e2845802 	add	r5, r4, #131072	; 0x20000
    e308:	e59520d0 	ldr	r2, [r5, #208]	; 0xd0
    e30c:	e3520000 	cmp	r2, #0
    e310:	1a00000c 	bne	e348 <CSerialDevice::Peek()+0x58>
    e314:	e2843801 	add	r3, r4, #65536	; 0x10000
    e318:	e59300ac 	ldr	r0, [r3, #172]	; 0xac
    e31c:	e59310b0 	ldr	r1, [r3, #176]	; 0xb0
    e320:	e1500001 	cmp	r0, r1
    e324:	0a000016 	beq	e384 <CSerialDevice::Peek()+0x94>
    e328:	e59330b0 	ldr	r3, [r3, #176]	; 0xb0
    e32c:	e0844003 	add	r4, r4, r3
    e330:	e5d440aa 	ldrb	r4, [r4, #170]	; 0xaa
    e334:	e3520000 	cmp	r2, #0
    e338:	0a000000 	beq	e340 <CSerialDevice::Peek()+0x50>
    e33c:	eb000da7 	bl	119e0 <LeaveCritical>
    e340:	e1a00004 	mov	r0, r4
    e344:	e8bd8070 	pop	{r4, r5, r6, pc}
    e348:	e1a00002 	mov	r0, r2
    e34c:	eb000d76 	bl	1192c <EnterCritical>
    e350:	e2843801 	add	r3, r4, #65536	; 0x10000
    e354:	e59310ac 	ldr	r1, [r3, #172]	; 0xac
    e358:	e59320b0 	ldr	r2, [r3, #176]	; 0xb0
    e35c:	e1510002 	cmp	r1, r2
    e360:	03e04000 	mvneq	r4, #0
    e364:	e59520d0 	ldr	r2, [r5, #208]	; 0xd0
    e368:	1affffee 	bne	e328 <CSerialDevice::Peek()+0x38>
    e36c:	eafffff0 	b	e334 <CSerialDevice::Peek()+0x44>
    e370:	e59f2014 	ldr	r2, [pc, #20]	; e38c <CSerialDevice::Peek()+0x9c>
    e374:	e59f1014 	ldr	r1, [pc, #20]	; e390 <CSerialDevice::Peek()+0xa0>
    e378:	e59f0014 	ldr	r0, [pc, #20]	; e394 <CSerialDevice::Peek()+0xa4>
    e37c:	ebffedc9 	bl	9aa8 <assertion_failed>
    e380:	eaffffdf 	b	e304 <CSerialDevice::Peek()+0x14>
    e384:	e3e04000 	mvn	r4, #0
    e388:	eaffffec 	b	e340 <CSerialDevice::Peek()+0x50>
    e38c:	00000191 	.word	0x00000191
    e390:	00013d38 	.word	0x00013d38
    e394:	000130e8 	.word	0x000130e8

0000e398 <CSerialDevice::Flush()>:
    e398:	e3a03000 	mov	r3, #0
    e39c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    e3a0:	e59f2010 	ldr	r2, [pc, #16]	; e3b8 <CSerialDevice::Flush()+0x20>
    e3a4:	e5923018 	ldr	r3, [r2, #24]
    e3a8:	e2133008 	ands	r3, r3, #8
    e3ac:	1afffffc 	bne	e3a4 <CSerialDevice::Flush()+0xc>
    e3b0:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    e3b4:	e12fff1e 	bx	lr
    e3b8:	20201000 	.word	0x20201000

0000e3bc <CSerialDevice::Write(unsigned char)>:
    e3bc:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
    e3c0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    e3c4:	e3530000 	cmp	r3, #0
    e3c8:	0a000029 	beq	e474 <CSerialDevice::Write(unsigned char)+0xb8>
    e3cc:	e2805802 	add	r5, r0, #131072	; 0x20000
    e3d0:	e1a04000 	mov	r4, r0
    e3d4:	e59500d0 	ldr	r0, [r5, #208]	; 0xd0
    e3d8:	e1a06001 	mov	r6, r1
    e3dc:	e3500000 	cmp	r0, #0
    e3e0:	1a000016 	bne	e440 <CSerialDevice::Write(unsigned char)+0x84>
    e3e4:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
    e3e8:	e59510bc 	ldr	r1, [r5, #188]	; 0xbc
    e3ec:	e2833001 	add	r3, r3, #1
    e3f0:	e6ff3073 	uxth	r3, r3
    e3f4:	e1530001 	cmp	r3, r1
    e3f8:	0a00001a 	beq	e468 <CSerialDevice::Write(unsigned char)+0xac>
    e3fc:	e3a07001 	mov	r7, #1
    e400:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
    e404:	e0844003 	add	r4, r4, r3
    e408:	e2844801 	add	r4, r4, #65536	; 0x10000
    e40c:	e0833007 	add	r3, r3, r7
    e410:	e58530b8 	str	r3, [r5, #184]	; 0xb8
    e414:	e5c460b8 	strb	r6, [r4, #184]	; 0xb8
    e418:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
    e41c:	e6ff3073 	uxth	r3, r3
    e420:	e58530b8 	str	r3, [r5, #184]	; 0xb8
    e424:	e3500000 	cmp	r0, #0
    e428:	1a000001 	bne	e434 <CSerialDevice::Write(unsigned char)+0x78>
    e42c:	e1a00007 	mov	r0, r7
    e430:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e434:	eb000d69 	bl	119e0 <LeaveCritical>
    e438:	e1a00007 	mov	r0, r7
    e43c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e440:	eb000d39 	bl	1192c <EnterCritical>
    e444:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
    e448:	e59520bc 	ldr	r2, [r5, #188]	; 0xbc
    e44c:	e2833001 	add	r3, r3, #1
    e450:	e6ff3073 	uxth	r3, r3
    e454:	e1530002 	cmp	r3, r2
    e458:	e59500d0 	ldr	r0, [r5, #208]	; 0xd0
    e45c:	03a07000 	moveq	r7, #0
    e460:	1affffe5 	bne	e3fc <CSerialDevice::Write(unsigned char)+0x40>
    e464:	eaffffee 	b	e424 <CSerialDevice::Write(unsigned char)+0x68>
    e468:	e1a07000 	mov	r7, r0
    e46c:	e1a00007 	mov	r0, r7
    e470:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e474:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    e478:	e59f201c 	ldr	r2, [pc, #28]	; e49c <CSerialDevice::Write(unsigned char)+0xe0>
    e47c:	e5923018 	ldr	r3, [r2, #24]
    e480:	e2133020 	ands	r3, r3, #32
    e484:	1afffffc 	bne	e47c <CSerialDevice::Write(unsigned char)+0xc0>
    e488:	e5821000 	str	r1, [r2]
    e48c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    e490:	e3a07001 	mov	r7, #1
    e494:	e1a00007 	mov	r0, r7
    e498:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e49c:	20201000 	.word	0x20201000

0000e4a0 <CSerialDevice::Write(void const*, unsigned int)>:
    e4a0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    e4a4:	e2804802 	add	r4, r0, #131072	; 0x20000
    e4a8:	e1a07000 	mov	r7, r0
    e4ac:	e59400d4 	ldr	r0, [r4, #212]	; 0xd4
    e4b0:	e1a05001 	mov	r5, r1
    e4b4:	e3500000 	cmp	r0, #0
    e4b8:	e1a08002 	mov	r8, r2
    e4bc:	1a000054 	bne	e614 <CSerialDevice::Write(void const*, unsigned int)+0x174>
    e4c0:	e3550000 	cmp	r5, #0
    e4c4:	0a00005a 	beq	e634 <CSerialDevice::Write(void const*, unsigned int)+0x194>
    e4c8:	e3580000 	cmp	r8, #0
    e4cc:	0a00005d 	beq	e648 <CSerialDevice::Write(void const*, unsigned int)+0x1a8>
    e4d0:	e3a06000 	mov	r6, #0
    e4d4:	e3a0900d 	mov	r9, #13
    e4d8:	ea000002 	b	e4e8 <CSerialDevice::Write(void const*, unsigned int)+0x48>
    e4dc:	e2866001 	add	r6, r6, #1
    e4e0:	e1560008 	cmp	r6, r8
    e4e4:	0a00000f 	beq	e528 <CSerialDevice::Write(void const*, unsigned int)+0x88>
    e4e8:	e5d51000 	ldrb	r1, [r5]
    e4ec:	e1a00007 	mov	r0, r7
    e4f0:	ebffffb1 	bl	e3bc <CSerialDevice::Write(unsigned char)>
    e4f4:	e3500000 	cmp	r0, #0
    e4f8:	0a00000a 	beq	e528 <CSerialDevice::Write(void const*, unsigned int)+0x88>
    e4fc:	e4d53001 	ldrb	r3, [r5], #1
    e500:	e353000a 	cmp	r3, #10
    e504:	1afffff4 	bne	e4dc <CSerialDevice::Write(void const*, unsigned int)+0x3c>
    e508:	e59430c0 	ldr	r3, [r4, #192]	; 0xc0
    e50c:	e3130001 	tst	r3, #1
    e510:	0afffff1 	beq	e4dc <CSerialDevice::Write(void const*, unsigned int)+0x3c>
    e514:	e1a01009 	mov	r1, r9
    e518:	e1a00007 	mov	r0, r7
    e51c:	ebffffa6 	bl	e3bc <CSerialDevice::Write(unsigned char)>
    e520:	e3500000 	cmp	r0, #0
    e524:	1affffec 	bne	e4dc <CSerialDevice::Write(void const*, unsigned int)+0x3c>
    e528:	e59430d4 	ldr	r3, [r4, #212]	; 0xd4
    e52c:	e3530000 	cmp	r3, #0
    e530:	1a000035 	bne	e60c <CSerialDevice::Write(void const*, unsigned int)+0x16c>
    e534:	e59730a4 	ldr	r3, [r7, #164]	; 0xa4
    e538:	e3530000 	cmp	r3, #0
    e53c:	0a000028 	beq	e5e4 <CSerialDevice::Write(void const*, unsigned int)+0x144>
    e540:	e59400d0 	ldr	r0, [r4, #208]	; 0xd0
    e544:	e3500000 	cmp	r0, #0
    e548:	1a000033 	bne	e61c <CSerialDevice::Write(void const*, unsigned int)+0x17c>
    e54c:	e59420b8 	ldr	r2, [r4, #184]	; 0xb8
    e550:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    e554:	e1520003 	cmp	r2, r3
    e558:	0a000021 	beq	e5e4 <CSerialDevice::Write(void const*, unsigned int)+0x144>
    e55c:	e3a03000 	mov	r3, #0
    e560:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    e564:	e59430b8 	ldr	r3, [r4, #184]	; 0xb8
    e568:	e59420bc 	ldr	r2, [r4, #188]	; 0xbc
    e56c:	e1520003 	cmp	r2, r3
    e570:	0a000016 	beq	e5d0 <CSerialDevice::Write(void const*, unsigned int)+0x130>
    e574:	e59f20d4 	ldr	r2, [pc, #212]	; e650 <CSerialDevice::Write(void const*, unsigned int)+0x1b0>
    e578:	e5923018 	ldr	r3, [r2, #24]
    e57c:	e3130020 	tst	r3, #32
    e580:	1a00001c 	bne	e5f8 <CSerialDevice::Write(void const*, unsigned int)+0x158>
    e584:	e59f00c8 	ldr	r0, [pc, #200]	; e654 <CSerialDevice::Write(void const*, unsigned int)+0x1b4>
    e588:	ea000002 	b	e598 <CSerialDevice::Write(void const*, unsigned int)+0xf8>
    e58c:	e5923018 	ldr	r3, [r2, #24]
    e590:	e3130020 	tst	r3, #32
    e594:	1a000017 	bne	e5f8 <CSerialDevice::Write(void const*, unsigned int)+0x158>
    e598:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    e59c:	e2831001 	add	r1, r3, #1
    e5a0:	e0873003 	add	r3, r7, r3
    e5a4:	e58410bc 	str	r1, [r4, #188]	; 0xbc
    e5a8:	e2833801 	add	r3, r3, #65536	; 0x10000
    e5ac:	e5d330b8 	ldrb	r3, [r3, #184]	; 0xb8
    e5b0:	e5823000 	str	r3, [r2]
    e5b4:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    e5b8:	e0033000 	and	r3, r3, r0
    e5bc:	e58430bc 	str	r3, [r4, #188]	; 0xbc
    e5c0:	e59410b8 	ldr	r1, [r4, #184]	; 0xb8
    e5c4:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    e5c8:	e1510003 	cmp	r1, r3
    e5cc:	1affffee 	bne	e58c <CSerialDevice::Write(void const*, unsigned int)+0xec>
    e5d0:	e3a03000 	mov	r3, #0
    e5d4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    e5d8:	e59430d0 	ldr	r3, [r4, #208]	; 0xd0
    e5dc:	e3530000 	cmp	r3, #0
    e5e0:	1a000001 	bne	e5ec <CSerialDevice::Write(void const*, unsigned int)+0x14c>
    e5e4:	e1a00006 	mov	r0, r6
    e5e8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    e5ec:	eb000cfb 	bl	119e0 <LeaveCritical>
    e5f0:	e1a00006 	mov	r0, r6
    e5f4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    e5f8:	e59f2050 	ldr	r2, [pc, #80]	; e650 <CSerialDevice::Write(void const*, unsigned int)+0x1b0>
    e5fc:	e5923038 	ldr	r3, [r2, #56]	; 0x38
    e600:	e3833020 	orr	r3, r3, #32
    e604:	e5823038 	str	r3, [r2, #56]	; 0x38
    e608:	eafffff0 	b	e5d0 <CSerialDevice::Write(void const*, unsigned int)+0x130>
    e60c:	eb000cf3 	bl	119e0 <LeaveCritical>
    e610:	eaffffc7 	b	e534 <CSerialDevice::Write(void const*, unsigned int)+0x94>
    e614:	eb000cc4 	bl	1192c <EnterCritical>
    e618:	eaffffa8 	b	e4c0 <CSerialDevice::Write(void const*, unsigned int)+0x20>
    e61c:	eb000cc2 	bl	1192c <EnterCritical>
    e620:	e59420b8 	ldr	r2, [r4, #184]	; 0xb8
    e624:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    e628:	e1520003 	cmp	r2, r3
    e62c:	1affffca 	bne	e55c <CSerialDevice::Write(void const*, unsigned int)+0xbc>
    e630:	eaffffe8 	b	e5d8 <CSerialDevice::Write(void const*, unsigned int)+0x138>
    e634:	e3a020c3 	mov	r2, #195	; 0xc3
    e638:	e59f1018 	ldr	r1, [pc, #24]	; e658 <CSerialDevice::Write(void const*, unsigned int)+0x1b8>
    e63c:	e59f0018 	ldr	r0, [pc, #24]	; e65c <CSerialDevice::Write(void const*, unsigned int)+0x1bc>
    e640:	ebffed18 	bl	9aa8 <assertion_failed>
    e644:	eaffff9f 	b	e4c8 <CSerialDevice::Write(void const*, unsigned int)+0x28>
    e648:	e1a06008 	mov	r6, r8
    e64c:	eaffffb5 	b	e528 <CSerialDevice::Write(void const*, unsigned int)+0x88>
    e650:	20201000 	.word	0x20201000
    e654:	0000ffff 	.word	0x0000ffff
    e658:	00013d38 	.word	0x00013d38
    e65c:	00013060 	.word	0x00013060

0000e660 <CSerialDevice::InterruptHandler()>:
    e660:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e664:	e2804802 	add	r4, r0, #131072	; 0x20000
    e668:	e1a05000 	mov	r5, r0
    e66c:	e59400d0 	ldr	r0, [r4, #208]	; 0xd0
    e670:	e24dd004 	sub	sp, sp, #4
    e674:	e3500000 	cmp	r0, #0
    e678:	1a000070 	bne	e840 <CSerialDevice::InterruptHandler()+0x1e0>
    e67c:	e3a06000 	mov	r6, #0
    e680:	ee076f9a 	mcr	15, 0, r6, cr7, cr10, {4}
    e684:	e59f21c4 	ldr	r2, [pc, #452]	; e850 <CSerialDevice::InterruptHandler()+0x1f0>
    e688:	e3e08002 	mvn	r8, #2
    e68c:	e1a00002 	mov	r0, r2
    e690:	e3e0e001 	mvn	lr, #1
    e694:	e3e07000 	mvn	r7, #0
    e698:	e5921040 	ldr	r1, [r2, #64]	; 0x40
    e69c:	e59fc1b0 	ldr	ip, [pc, #432]	; e854 <CSerialDevice::InterruptHandler()+0x1f4>
    e6a0:	e2853801 	add	r3, r5, #65536	; 0x10000
    e6a4:	e5821044 	str	r1, [r2, #68]	; 0x44
    e6a8:	e5902018 	ldr	r2, [r0, #24]
    e6ac:	e3120010 	tst	r2, #16
    e6b0:	1a00001f 	bne	e734 <CSerialDevice::InterruptHandler()+0xd4>
    e6b4:	e5901000 	ldr	r1, [r0]
    e6b8:	e3110b01 	tst	r1, #1024	; 0x400
    e6bc:	0a000040 	beq	e7c4 <CSerialDevice::InterruptHandler()+0x164>
    e6c0:	e59320b4 	ldr	r2, [r3, #180]	; 0xb4
    e6c4:	e3520000 	cmp	r2, #0
    e6c8:	058370b4 	streq	r7, [r3, #180]	; 0xb4
    e6cc:	e59490c4 	ldr	r9, [r4, #196]	; 0xc4
    e6d0:	e3590000 	cmp	r9, #0
    e6d4:	0a000005 	beq	e6f0 <CSerialDevice::InterruptHandler()+0x90>
    e6d8:	e594a0c8 	ldr	sl, [r4, #200]	; 0xc8
    e6dc:	e6af2071 	sxtb	r2, r1
    e6e0:	e1dab0d0 	ldrsb	fp, [sl]
    e6e4:	e15b0002 	cmp	fp, r2
    e6e8:	158490c8 	strne	r9, [r4, #200]	; 0xc8
    e6ec:	0a000044 	beq	e804 <CSerialDevice::InterruptHandler()+0x1a4>
    e6f0:	e59320ac 	ldr	r2, [r3, #172]	; 0xac
    e6f4:	e59390b0 	ldr	r9, [r3, #176]	; 0xb0
    e6f8:	e2822001 	add	r2, r2, #1
    e6fc:	e002200c 	and	r2, r2, ip
    e700:	e1520009 	cmp	r2, r9
    e704:	0a000034 	beq	e7dc <CSerialDevice::InterruptHandler()+0x17c>
    e708:	e59320ac 	ldr	r2, [r3, #172]	; 0xac
    e70c:	e2829001 	add	r9, r2, #1
    e710:	e0852002 	add	r2, r5, r2
    e714:	e58390ac 	str	r9, [r3, #172]	; 0xac
    e718:	e5c210aa 	strb	r1, [r2, #170]	; 0xaa
    e71c:	e59320ac 	ldr	r2, [r3, #172]	; 0xac
    e720:	e002200c 	and	r2, r2, ip
    e724:	e58320ac 	str	r2, [r3, #172]	; 0xac
    e728:	e5902018 	ldr	r2, [r0, #24]
    e72c:	e3120010 	tst	r2, #16
    e730:	0affffdf 	beq	e6b4 <CSerialDevice::InterruptHandler()+0x54>
    e734:	e5903018 	ldr	r3, [r0, #24]
    e738:	e3130020 	tst	r3, #32
    e73c:	1a000017 	bne	e7a0 <CSerialDevice::InterruptHandler()+0x140>
    e740:	e59420b8 	ldr	r2, [r4, #184]	; 0xb8
    e744:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    e748:	e1520003 	cmp	r2, r3
    e74c:	0a000032 	beq	e81c <CSerialDevice::InterruptHandler()+0x1bc>
    e750:	e59f20f8 	ldr	r2, [pc, #248]	; e850 <CSerialDevice::InterruptHandler()+0x1f0>
    e754:	e59f00f8 	ldr	r0, [pc, #248]	; e854 <CSerialDevice::InterruptHandler()+0x1f4>
    e758:	ea000003 	b	e76c <CSerialDevice::InterruptHandler()+0x10c>
    e75c:	e59410b8 	ldr	r1, [r4, #184]	; 0xb8
    e760:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    e764:	e1510003 	cmp	r1, r3
    e768:	0a00002b 	beq	e81c <CSerialDevice::InterruptHandler()+0x1bc>
    e76c:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    e770:	e2831001 	add	r1, r3, #1
    e774:	e0853003 	add	r3, r5, r3
    e778:	e58410bc 	str	r1, [r4, #188]	; 0xbc
    e77c:	e2833801 	add	r3, r3, #65536	; 0x10000
    e780:	e5d330b8 	ldrb	r3, [r3, #184]	; 0xb8
    e784:	e5823000 	str	r3, [r2]
    e788:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    e78c:	e0033000 	and	r3, r3, r0
    e790:	e58430bc 	str	r3, [r4, #188]	; 0xbc
    e794:	e5923018 	ldr	r3, [r2, #24]
    e798:	e3130020 	tst	r3, #32
    e79c:	0affffee 	beq	e75c <CSerialDevice::InterruptHandler()+0xfc>
    e7a0:	e3a03000 	mov	r3, #0
    e7a4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    e7a8:	e59430d0 	ldr	r3, [r4, #208]	; 0xd0
    e7ac:	e3530000 	cmp	r3, #0
    e7b0:	1a000024 	bne	e848 <CSerialDevice::InterruptHandler()+0x1e8>
    e7b4:	e3560000 	cmp	r6, #0
    e7b8:	1a00001c 	bne	e830 <CSerialDevice::InterruptHandler()+0x1d0>
    e7bc:	e28dd004 	add	sp, sp, #4
    e7c0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e7c4:	e3110b02 	tst	r1, #2048	; 0x800
    e7c8:	0a000007 	beq	e7ec <CSerialDevice::InterruptHandler()+0x18c>
    e7cc:	e59320b4 	ldr	r2, [r3, #180]	; 0xb4
    e7d0:	e3520000 	cmp	r2, #0
    e7d4:	0583e0b4 	streq	lr, [r3, #180]	; 0xb4
    e7d8:	eaffffbb 	b	e6cc <CSerialDevice::InterruptHandler()+0x6c>
    e7dc:	e59320b4 	ldr	r2, [r3, #180]	; 0xb4
    e7e0:	e3520000 	cmp	r2, #0
    e7e4:	0583e0b4 	streq	lr, [r3, #180]	; 0xb4
    e7e8:	eaffffae 	b	e6a8 <CSerialDevice::InterruptHandler()+0x48>
    e7ec:	e3110c01 	tst	r1, #256	; 0x100
    e7f0:	0affffb5 	beq	e6cc <CSerialDevice::InterruptHandler()+0x6c>
    e7f4:	e59320b4 	ldr	r2, [r3, #180]	; 0xb4
    e7f8:	e3520000 	cmp	r2, #0
    e7fc:	058380b4 	streq	r8, [r3, #180]	; 0xb4
    e800:	eaffffb1 	b	e6cc <CSerialDevice::InterruptHandler()+0x6c>
    e804:	e28a2001 	add	r2, sl, #1
    e808:	e58420c8 	str	r2, [r4, #200]	; 0xc8
    e80c:	e1da20d1 	ldrsb	r2, [sl, #1]
    e810:	e3520000 	cmp	r2, #0
    e814:	03a06001 	moveq	r6, #1
    e818:	eaffffb4 	b	e6f0 <CSerialDevice::InterruptHandler()+0x90>
    e81c:	e59f202c 	ldr	r2, [pc, #44]	; e850 <CSerialDevice::InterruptHandler()+0x1f0>
    e820:	e5923038 	ldr	r3, [r2, #56]	; 0x38
    e824:	e3c33020 	bic	r3, r3, #32
    e828:	e5823038 	str	r3, [r2, #56]	; 0x38
    e82c:	eaffffdb 	b	e7a0 <CSerialDevice::InterruptHandler()+0x140>
    e830:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
    e834:	e28dd004 	add	sp, sp, #4
    e838:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e83c:	e12fff13 	bx	r3
    e840:	eb000c39 	bl	1192c <EnterCritical>
    e844:	eaffff8c 	b	e67c <CSerialDevice::InterruptHandler()+0x1c>
    e848:	eb000c64 	bl	119e0 <LeaveCritical>
    e84c:	eaffffd8 	b	e7b4 <CSerialDevice::InterruptHandler()+0x154>
    e850:	20201000 	.word	0x20201000
    e854:	0000ffff 	.word	0x0000ffff

0000e858 <CSerialDevice::InterruptStub(void*)>:
    e858:	e92d4010 	push	{r4, lr}
    e85c:	e2504000 	subs	r4, r0, #0
    e860:	0a000002 	beq	e870 <CSerialDevice::InterruptStub(void*)+0x18>
    e864:	e1a00004 	mov	r0, r4
    e868:	e8bd4010 	pop	{r4, lr}
    e86c:	eaffff7b 	b	e660 <CSerialDevice::InterruptHandler()>
    e870:	e59f0014 	ldr	r0, [pc, #20]	; e88c <CSerialDevice::InterruptStub(void*)+0x34>
    e874:	e59f2014 	ldr	r2, [pc, #20]	; e890 <CSerialDevice::InterruptStub(void*)+0x38>
    e878:	e59f1014 	ldr	r1, [pc, #20]	; e894 <CSerialDevice::InterruptStub(void*)+0x3c>
    e87c:	ebffec89 	bl	9aa8 <assertion_failed>
    e880:	e1a00004 	mov	r0, r4
    e884:	e8bd4010 	pop	{r4, lr}
    e888:	eaffff74 	b	e660 <CSerialDevice::InterruptHandler()>
    e88c:	0001312c 	.word	0x0001312c
    e890:	0000022e 	.word	0x0000022e
    e894:	00013d38 	.word	0x00013d38

0000e898 <CSerialDevice::~CSerialDevice()>:
    e898:	e59f20a4 	ldr	r2, [pc, #164]	; e944 <CSerialDevice::~CSerialDevice()+0xac>
    e89c:	e92d4010 	push	{r4, lr}
    e8a0:	e3a03000 	mov	r3, #0
    e8a4:	e1a04000 	mov	r4, r0
    e8a8:	e5802000 	str	r2, [r0]
    e8ac:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    e8b0:	e59f2090 	ldr	r2, [pc, #144]	; e948 <CSerialDevice::~CSerialDevice()+0xb0>
    e8b4:	e5823038 	str	r3, [r2, #56]	; 0x38
    e8b8:	e5823030 	str	r3, [r2, #48]	; 0x30
    e8bc:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    e8c0:	e5d030a9 	ldrb	r3, [r0, #169]	; 0xa9
    e8c4:	e3530000 	cmp	r3, #0
    e8c8:	0a000006 	beq	e8e8 <CSerialDevice::~CSerialDevice()+0x50>
    e8cc:	e59000a4 	ldr	r0, [r0, #164]	; 0xa4
    e8d0:	e3500000 	cmp	r0, #0
    e8d4:	0a000014 	beq	e92c <CSerialDevice::~CSerialDevice()+0x94>
    e8d8:	e5d430a8 	ldrb	r3, [r4, #168]	; 0xa8
    e8dc:	e3530000 	cmp	r3, #0
    e8e0:	0a00000e 	beq	e920 <CSerialDevice::~CSerialDevice()+0x88>
    e8e4:	ebfff2bf 	bl	b3e8 <CInterruptSystem::DisconnectFIQ()>
    e8e8:	e3a03000 	mov	r3, #0
    e8ec:	e284007c 	add	r0, r4, #124	; 0x7c
    e8f0:	e58430a4 	str	r3, [r4, #164]	; 0xa4
    e8f4:	ebffef3a 	bl	a5e4 <CGPIOPin::~CGPIOPin()>
    e8f8:	e2840054 	add	r0, r4, #84	; 0x54
    e8fc:	ebffef38 	bl	a5e4 <CGPIOPin::~CGPIOPin()>
    e900:	e284002c 	add	r0, r4, #44	; 0x2c
    e904:	ebffef36 	bl	a5e4 <CGPIOPin::~CGPIOPin()>
    e908:	e2840004 	add	r0, r4, #4
    e90c:	ebffef34 	bl	a5e4 <CGPIOPin::~CGPIOPin()>
    e910:	e1a00004 	mov	r0, r4
    e914:	ebffed95 	bl	9f70 <CDevice::~CDevice()>
    e918:	e1a00004 	mov	r0, r4
    e91c:	e8bd8010 	pop	{r4, pc}
    e920:	e3a01039 	mov	r1, #57	; 0x39
    e924:	ebfff32a 	bl	b5d4 <CInterruptSystem::DisconnectIRQ(unsigned int)>
    e928:	eaffffee 	b	e8e8 <CSerialDevice::~CSerialDevice()+0x50>
    e92c:	e59f0018 	ldr	r0, [pc, #24]	; e94c <CSerialDevice::~CSerialDevice()+0xb4>
    e930:	e3a02079 	mov	r2, #121	; 0x79
    e934:	e59f1014 	ldr	r1, [pc, #20]	; e950 <CSerialDevice::~CSerialDevice()+0xb8>
    e938:	ebffec5a 	bl	9aa8 <assertion_failed>
    e93c:	e59400a4 	ldr	r0, [r4, #164]	; 0xa4
    e940:	eaffffe4 	b	e8d8 <CSerialDevice::~CSerialDevice()+0x40>
    e944:	00013d24 	.word	0x00013d24
    e948:	20201000 	.word	0x20201000
    e94c:	000130e8 	.word	0x000130e8
    e950:	00013d38 	.word	0x00013d38

0000e954 <CSerialDevice::~CSerialDevice()>:
    e954:	e92d4010 	push	{r4, lr}
    e958:	e1a04000 	mov	r4, r0
    e95c:	ebffffcd 	bl	e898 <CSerialDevice::~CSerialDevice()>
    e960:	e1a00004 	mov	r0, r4
    e964:	e59f1008 	ldr	r1, [pc, #8]	; e974 <CSerialDevice::~CSerialDevice()+0x20>
    e968:	eb000c4d 	bl	11aa4 <operator delete(void*, unsigned int)>
    e96c:	e1a00004 	mov	r0, r4
    e970:	e8bd8010 	pop	{r4, pc}
    e974:	000200d8 	.word	0x000200d8

0000e978 <CString::~CString()>:
    e978:	e92d4010 	push	{r4, lr}
    e97c:	e1a04000 	mov	r4, r0
    e980:	e5900004 	ldr	r0, [r0, #4]
    e984:	e59f3014 	ldr	r3, [pc, #20]	; e9a0 <CString::~CString()+0x28>
    e988:	e3500000 	cmp	r0, #0
    e98c:	e5843000 	str	r3, [r4]
    e990:	0a000000 	beq	e998 <CString::~CString()+0x20>
    e994:	eb000c41 	bl	11aa0 <operator delete[](void*)>
    e998:	e1a00004 	mov	r0, r4
    e99c:	e8bd8010 	pop	{r4, pc}
    e9a0:	00013d4c 	.word	0x00013d4c

0000e9a4 <CString::~CString()>:
    e9a4:	e92d4010 	push	{r4, lr}
    e9a8:	e1a04000 	mov	r4, r0
    e9ac:	e5900004 	ldr	r0, [r0, #4]
    e9b0:	e59f3020 	ldr	r3, [pc, #32]	; e9d8 <CString::~CString()+0x34>
    e9b4:	e3500000 	cmp	r0, #0
    e9b8:	e5843000 	str	r3, [r4]
    e9bc:	0a000000 	beq	e9c4 <CString::~CString()+0x20>
    e9c0:	eb000c36 	bl	11aa0 <operator delete[](void*)>
    e9c4:	e1a00004 	mov	r0, r4
    e9c8:	e3a01010 	mov	r1, #16
    e9cc:	eb000c34 	bl	11aa4 <operator delete(void*, unsigned int)>
    e9d0:	e1a00004 	mov	r0, r4
    e9d4:	e8bd8010 	pop	{r4, pc}
    e9d8:	00013d4c 	.word	0x00013d4c

0000e9dc <CString::ReserveSpace(unsigned int) [clone .part.0]>:
    e9dc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    e9e0:	e990002c 	ldmib	r0, {r2, r3, r5}
    e9e4:	e0455002 	sub	r5, r5, r2
    e9e8:	e0851001 	add	r1, r5, r1
    e9ec:	e2812001 	add	r2, r1, #1
    e9f0:	e1520003 	cmp	r2, r3
    e9f4:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
    e9f8:	e1a04000 	mov	r4, r0
    e9fc:	e2816041 	add	r6, r1, #65	; 0x41
    ea00:	e1a00006 	mov	r0, r6
    ea04:	eb000c23 	bl	11a98 <operator new[](unsigned int)>
    ea08:	e3a02000 	mov	r2, #0
    ea0c:	e594300c 	ldr	r3, [r4, #12]
    ea10:	e1a07000 	mov	r7, r0
    ea14:	e5c32000 	strb	r2, [r3]
    ea18:	e5941004 	ldr	r1, [r4, #4]
    ea1c:	eb00084c 	bl	10b54 <strcpy>
    ea20:	e5940004 	ldr	r0, [r4, #4]
    ea24:	e3500000 	cmp	r0, #0
    ea28:	0a000000 	beq	ea30 <CString::ReserveSpace(unsigned int) [clone .part.0]+0x54>
    ea2c:	eb000c1b 	bl	11aa0 <operator delete[](void*)>
    ea30:	e0875005 	add	r5, r7, r5
    ea34:	e584500c 	str	r5, [r4, #12]
    ea38:	e5847004 	str	r7, [r4, #4]
    ea3c:	e5846008 	str	r6, [r4, #8]
    ea40:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000ea44 <CString::CString()>:
    ea44:	e3a02000 	mov	r2, #0
    ea48:	e59f1008 	ldr	r1, [pc, #8]	; ea58 <CString::CString()+0x14>
    ea4c:	e5802008 	str	r2, [r0, #8]
    ea50:	e8800006 	stm	r0, {r1, r2}
    ea54:	e12fff1e 	bx	lr
    ea58:	00013d4c 	.word	0x00013d4c

0000ea5c <CString::CString(char const*)>:
    ea5c:	e92d4070 	push	{r4, r5, r6, lr}
    ea60:	e1a04000 	mov	r4, r0
    ea64:	e59f302c 	ldr	r3, [pc, #44]	; ea98 <CString::CString(char const*)+0x3c>
    ea68:	e1a00001 	mov	r0, r1
    ea6c:	e5843000 	str	r3, [r4]
    ea70:	e1a05001 	mov	r5, r1
    ea74:	eb0007b8 	bl	1095c <strlen>
    ea78:	e2800001 	add	r0, r0, #1
    ea7c:	e5840008 	str	r0, [r4, #8]
    ea80:	eb000c04 	bl	11a98 <operator new[](unsigned int)>
    ea84:	e1a01005 	mov	r1, r5
    ea88:	e5840004 	str	r0, [r4, #4]
    ea8c:	eb000830 	bl	10b54 <strcpy>
    ea90:	e1a00004 	mov	r0, r4
    ea94:	e8bd8070 	pop	{r4, r5, r6, pc}
    ea98:	00013d4c 	.word	0x00013d4c

0000ea9c <CString::operator char const*() const>:
    ea9c:	e5900004 	ldr	r0, [r0, #4]
    eaa0:	e59f3008 	ldr	r3, [pc, #8]	; eab0 <CString::operator char const*() const+0x14>
    eaa4:	e3500000 	cmp	r0, #0
    eaa8:	01a00003 	moveq	r0, r3
    eaac:	e12fff1e 	bx	lr
    eab0:	000140ac 	.word	0x000140ac

0000eab4 <CString::operator=(char const*)>:
    eab4:	e92d4070 	push	{r4, r5, r6, lr}
    eab8:	e1a04000 	mov	r4, r0
    eabc:	e5900004 	ldr	r0, [r0, #4]
    eac0:	e1a05001 	mov	r5, r1
    eac4:	e3500000 	cmp	r0, #0
    eac8:	0a000000 	beq	ead0 <CString::operator=(char const*)+0x1c>
    eacc:	eb000bf3 	bl	11aa0 <operator delete[](void*)>
    ead0:	e1a00005 	mov	r0, r5
    ead4:	eb0007a0 	bl	1095c <strlen>
    ead8:	e2800001 	add	r0, r0, #1
    eadc:	e5840008 	str	r0, [r4, #8]
    eae0:	eb000bec 	bl	11a98 <operator new[](unsigned int)>
    eae4:	e1a01005 	mov	r1, r5
    eae8:	e5840004 	str	r0, [r4, #4]
    eaec:	eb000818 	bl	10b54 <strcpy>
    eaf0:	e5940004 	ldr	r0, [r4, #4]
    eaf4:	e8bd8070 	pop	{r4, r5, r6, pc}

0000eaf8 <CString::operator=(CString const&)>:
    eaf8:	e92d4070 	push	{r4, r5, r6, lr}
    eafc:	e1a04000 	mov	r4, r0
    eb00:	e5900004 	ldr	r0, [r0, #4]
    eb04:	e1a06001 	mov	r6, r1
    eb08:	e3500000 	cmp	r0, #0
    eb0c:	0a000000 	beq	eb14 <CString::operator=(CString const&)+0x1c>
    eb10:	eb000be2 	bl	11aa0 <operator delete[](void*)>
    eb14:	e5960004 	ldr	r0, [r6, #4]
    eb18:	e59f5030 	ldr	r5, [pc, #48]	; eb50 <CString::operator=(CString const&)+0x58>
    eb1c:	e3500000 	cmp	r0, #0
    eb20:	01a00005 	moveq	r0, r5
    eb24:	eb00078c 	bl	1095c <strlen>
    eb28:	e2800001 	add	r0, r0, #1
    eb2c:	e5840008 	str	r0, [r4, #8]
    eb30:	eb000bd8 	bl	11a98 <operator new[](unsigned int)>
    eb34:	e5840004 	str	r0, [r4, #4]
    eb38:	e5961004 	ldr	r1, [r6, #4]
    eb3c:	e3510000 	cmp	r1, #0
    eb40:	01a01005 	moveq	r1, r5
    eb44:	eb000802 	bl	10b54 <strcpy>
    eb48:	e1a00004 	mov	r0, r4
    eb4c:	e8bd8070 	pop	{r4, r5, r6, pc}
    eb50:	000140ac 	.word	0x000140ac

0000eb54 <CString::GetLength() const>:
    eb54:	e5900004 	ldr	r0, [r0, #4]
    eb58:	e3500000 	cmp	r0, #0
    eb5c:	012fff1e 	bxeq	lr
    eb60:	ea00077d 	b	1095c <strlen>

0000eb64 <CString::Append(char const*)>:
    eb64:	e92d4070 	push	{r4, r5, r6, lr}
    eb68:	e3a03001 	mov	r3, #1
    eb6c:	e1a04000 	mov	r4, r0
    eb70:	e5900004 	ldr	r0, [r0, #4]
    eb74:	e1a06001 	mov	r6, r1
    eb78:	e3500000 	cmp	r0, #0
    eb7c:	e5843008 	str	r3, [r4, #8]
    eb80:	0a000003 	beq	eb94 <CString::Append(char const*)+0x30>
    eb84:	eb000774 	bl	1095c <strlen>
    eb88:	e5943008 	ldr	r3, [r4, #8]
    eb8c:	e0830000 	add	r0, r3, r0
    eb90:	e5840008 	str	r0, [r4, #8]
    eb94:	e1a00006 	mov	r0, r6
    eb98:	eb00076f 	bl	1095c <strlen>
    eb9c:	e5943008 	ldr	r3, [r4, #8]
    eba0:	e0800003 	add	r0, r0, r3
    eba4:	e5840008 	str	r0, [r4, #8]
    eba8:	eb000bba 	bl	11a98 <operator new[](unsigned int)>
    ebac:	e5941004 	ldr	r1, [r4, #4]
    ebb0:	e1a05000 	mov	r5, r0
    ebb4:	e3510000 	cmp	r1, #0
    ebb8:	05c01000 	strbeq	r1, [r0]
    ebbc:	0a000004 	beq	ebd4 <CString::Append(char const*)+0x70>
    ebc0:	eb0007e3 	bl	10b54 <strcpy>
    ebc4:	e5940004 	ldr	r0, [r4, #4]
    ebc8:	e3500000 	cmp	r0, #0
    ebcc:	0a000000 	beq	ebd4 <CString::Append(char const*)+0x70>
    ebd0:	eb000bb2 	bl	11aa0 <operator delete[](void*)>
    ebd4:	e1a01006 	mov	r1, r6
    ebd8:	e1a00005 	mov	r0, r5
    ebdc:	eb0007fa 	bl	10bcc <strcat>
    ebe0:	e5845004 	str	r5, [r4, #4]
    ebe4:	e8bd8070 	pop	{r4, r5, r6, pc}

0000ebe8 <CString::Compare(char const*) const>:
    ebe8:	e5900004 	ldr	r0, [r0, #4]
    ebec:	ea000764 	b	10984 <strcmp>

0000ebf0 <CString::Find(char) const>:
    ebf0:	e5902004 	ldr	r2, [r0, #4]
    ebf4:	e1d230d0 	ldrsb	r3, [r2]
    ebf8:	e3530000 	cmp	r3, #0
    ebfc:	0a000009 	beq	ec28 <CString::Find(char) const+0x38>
    ec00:	e1510003 	cmp	r1, r3
    ec04:	e3a00000 	mov	r0, #0
    ec08:	1a000002 	bne	ec18 <CString::Find(char) const+0x28>
    ec0c:	ea000007 	b	ec30 <CString::Find(char) const+0x40>
    ec10:	e1530001 	cmp	r3, r1
    ec14:	012fff1e 	bxeq	lr
    ec18:	e1f230d1 	ldrsb	r3, [r2, #1]!
    ec1c:	e2800001 	add	r0, r0, #1
    ec20:	e3530000 	cmp	r3, #0
    ec24:	1afffff9 	bne	ec10 <CString::Find(char) const+0x20>
    ec28:	e3e00000 	mvn	r0, #0
    ec2c:	e12fff1e 	bx	lr
    ec30:	e12fff1e 	bx	lr

0000ec34 <CString::PutChar(char, unsigned int)>:
    ec34:	e92d4070 	push	{r4, r5, r6, lr}
    ec38:	e2524000 	subs	r4, r2, #0
    ec3c:	08bd8070 	popeq	{r4, r5, r6, pc}
    ec40:	e1a06001 	mov	r6, r1
    ec44:	e1a01004 	mov	r1, r4
    ec48:	e1a05000 	mov	r5, r0
    ec4c:	ebffff62 	bl	e9dc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ec50:	e2443001 	sub	r3, r4, #1
    ec54:	e595200c 	ldr	r2, [r5, #12]
    ec58:	e2433001 	sub	r3, r3, #1
    ec5c:	e2820001 	add	r0, r2, #1
    ec60:	e3730001 	cmn	r3, #1
    ec64:	e585000c 	str	r0, [r5, #12]
    ec68:	e5c26000 	strb	r6, [r2]
    ec6c:	1afffff8 	bne	ec54 <CString::PutChar(char, unsigned int)+0x20>
    ec70:	e8bd8070 	pop	{r4, r5, r6, pc}

0000ec74 <CString::PutString(char const*)>:
    ec74:	e92d4070 	push	{r4, r5, r6, lr}
    ec78:	e1a04000 	mov	r4, r0
    ec7c:	e1a00001 	mov	r0, r1
    ec80:	e1a05001 	mov	r5, r1
    ec84:	eb000734 	bl	1095c <strlen>
    ec88:	e2506000 	subs	r6, r0, #0
    ec8c:	0a000002 	beq	ec9c <CString::PutString(char const*)+0x28>
    ec90:	e1a01006 	mov	r1, r6
    ec94:	e1a00004 	mov	r0, r4
    ec98:	ebffff4f 	bl	e9dc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ec9c:	e1a01005 	mov	r1, r5
    eca0:	e594000c 	ldr	r0, [r4, #12]
    eca4:	eb0007aa 	bl	10b54 <strcpy>
    eca8:	e594100c 	ldr	r1, [r4, #12]
    ecac:	e0811006 	add	r1, r1, r6
    ecb0:	e584100c 	str	r1, [r4, #12]
    ecb4:	e8bd8070 	pop	{r4, r5, r6, pc}

0000ecb8 <CString::Replace(char const*, char const*)>:
    ecb8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ecbc:	e1d180d0 	ldrsb	r8, [r1]
    ecc0:	e24dd014 	sub	sp, sp, #20
    ecc4:	e3580000 	cmp	r8, #0
    ecc8:	1a000002 	bne	ecd8 <CString::Replace(char const*, char const*)+0x20>
    eccc:	e1a00008 	mov	r0, r8
    ecd0:	e28dd014 	add	sp, sp, #20
    ecd4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ecd8:	e1a0a000 	mov	sl, r0
    ecdc:	e1a07001 	mov	r7, r1
    ece0:	e5901004 	ldr	r1, [r0, #4]
    ece4:	e1a0000d 	mov	r0, sp
    ece8:	e1a09002 	mov	r9, r2
    ecec:	ebffff5a 	bl	ea5c <CString::CString(char const*)>
    ecf0:	e59a0004 	ldr	r0, [sl, #4]
    ecf4:	e3500000 	cmp	r0, #0
    ecf8:	0a000000 	beq	ed00 <CString::Replace(char const*, char const*)+0x48>
    ecfc:	eb000b67 	bl	11aa0 <operator delete[](void*)>
    ed00:	e3a00040 	mov	r0, #64	; 0x40
    ed04:	e58a0008 	str	r0, [sl, #8]
    ed08:	eb000b62 	bl	11a98 <operator new[](unsigned int)>
    ed0c:	e3a08000 	mov	r8, #0
    ed10:	e3a06001 	mov	r6, #1
    ed14:	e59d4004 	ldr	r4, [sp, #4]
    ed18:	e58a0004 	str	r0, [sl, #4]
    ed1c:	e58a000c 	str	r0, [sl, #12]
    ed20:	e1d710d0 	ldrsb	r1, [r7]
    ed24:	e1a00004 	mov	r0, r4
    ed28:	eb0007b8 	bl	10c10 <strchr>
    ed2c:	e2505000 	subs	r5, r0, #0
    ed30:	0a00002d 	beq	edec <CString::Replace(char const*, char const*)+0x134>
    ed34:	e1540005 	cmp	r4, r5
    ed38:	2a000039 	bcs	ee24 <CString::Replace(char const*, char const*)+0x16c>
    ed3c:	e1a01006 	mov	r1, r6
    ed40:	e1a0000a 	mov	r0, sl
    ed44:	e0d4b0d1 	ldrsb	fp, [r4], #1
    ed48:	ebffff23 	bl	e9dc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ed4c:	e59a300c 	ldr	r3, [sl, #12]
    ed50:	e1550004 	cmp	r5, r4
    ed54:	e2832001 	add	r2, r3, #1
    ed58:	e58a200c 	str	r2, [sl, #12]
    ed5c:	e5c3b000 	strb	fp, [r3]
    ed60:	1afffff5 	bne	ed3c <CString::Replace(char const*, char const*)+0x84>
    ed64:	e1a0c005 	mov	ip, r5
    ed68:	e2854001 	add	r4, r5, #1
    ed6c:	e1d730d1 	ldrsb	r3, [r7, #1]
    ed70:	e2871001 	add	r1, r7, #1
    ed74:	e3530000 	cmp	r3, #0
    ed78:	0a00000c 	beq	edb0 <CString::Replace(char const*, char const*)+0xf8>
    ed7c:	e1d520d1 	ldrsb	r2, [r5, #1]
    ed80:	e1520003 	cmp	r2, r3
    ed84:	1a00000e 	bne	edc4 <CString::Replace(char const*, char const*)+0x10c>
    ed88:	e2853002 	add	r3, r5, #2
    ed8c:	ea000003 	b	eda0 <CString::Replace(char const*, char const*)+0xe8>
    ed90:	e1d400d0 	ldrsb	r0, [r4]
    ed94:	e2833001 	add	r3, r3, #1
    ed98:	e1500002 	cmp	r0, r2
    ed9c:	1a000008 	bne	edc4 <CString::Replace(char const*, char const*)+0x10c>
    eda0:	e1f120d1 	ldrsb	r2, [r1, #1]!
    eda4:	e1a04003 	mov	r4, r3
    eda8:	e3520000 	cmp	r2, #0
    edac:	1afffff7 	bne	ed90 <CString::Replace(char const*, char const*)+0xd8>
    edb0:	e1a01009 	mov	r1, r9
    edb4:	e1a0000a 	mov	r0, sl
    edb8:	e2888001 	add	r8, r8, #1
    edbc:	ebffffac 	bl	ec74 <CString::PutString(char const*)>
    edc0:	eaffffd6 	b	ed20 <CString::Replace(char const*, char const*)+0x68>
    edc4:	e1a01006 	mov	r1, r6
    edc8:	e1a0000a 	mov	r0, sl
    edcc:	e1dc50d0 	ldrsb	r5, [ip]
    edd0:	e28c4001 	add	r4, ip, #1
    edd4:	ebffff00 	bl	e9dc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    edd8:	e59a300c 	ldr	r3, [sl, #12]
    eddc:	e2832001 	add	r2, r3, #1
    ede0:	e58a200c 	str	r2, [sl, #12]
    ede4:	e5c35000 	strb	r5, [r3]
    ede8:	eaffffcc 	b	ed20 <CString::Replace(char const*, char const*)+0x68>
    edec:	e1a0000a 	mov	r0, sl
    edf0:	e1a01004 	mov	r1, r4
    edf4:	ebffff9e 	bl	ec74 <CString::PutString(char const*)>
    edf8:	e59a200c 	ldr	r2, [sl, #12]
    edfc:	e59f302c 	ldr	r3, [pc, #44]	; ee30 <CString::Replace(char const*, char const*)+0x178>
    ee00:	e5c25000 	strb	r5, [r2]
    ee04:	e59d0004 	ldr	r0, [sp, #4]
    ee08:	e58d3000 	str	r3, [sp]
    ee0c:	e3500000 	cmp	r0, #0
    ee10:	0affffad 	beq	eccc <CString::Replace(char const*, char const*)+0x14>
    ee14:	eb000b21 	bl	11aa0 <operator delete[](void*)>
    ee18:	e1a00008 	mov	r0, r8
    ee1c:	e28dd014 	add	sp, sp, #20
    ee20:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ee24:	e1a0c004 	mov	ip, r4
    ee28:	e2854001 	add	r4, r5, #1
    ee2c:	eaffffce 	b	ed6c <CString::Replace(char const*, char const*)+0xb4>
    ee30:	00013d4c 	.word	0x00013d4c

0000ee34 <CString::ReserveSpace(unsigned int)>:
    ee34:	e3510000 	cmp	r1, #0
    ee38:	012fff1e 	bxeq	lr
    ee3c:	eafffee6 	b	e9dc <CString::ReserveSpace(unsigned int) [clone .part.0]>

0000ee40 <CString::ntoa(char*, unsigned long, unsigned int, bool)>:
    ee40:	e1510002 	cmp	r1, r2
    ee44:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    ee48:	e1a05001 	mov	r5, r1
    ee4c:	e1a07002 	mov	r7, r2
    ee50:	e1a09000 	mov	r9, r0
    ee54:	e1a08003 	mov	r8, r3
    ee58:	23a0a001 	movcs	sl, #1
    ee5c:	3a000022 	bcc	eeec <CString::ntoa(char*, unsigned long, unsigned int, bool)+0xac>
    ee60:	e00a0a97 	mul	sl, r7, sl
    ee64:	e1a00005 	mov	r0, r5
    ee68:	e1a0100a 	mov	r1, sl
    ee6c:	ebffea36 	bl	974c <__udivsi3>
    ee70:	e1500007 	cmp	r0, r7
    ee74:	e1a04000 	mov	r4, r0
    ee78:	2afffff8 	bcs	ee60 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x20>
    ee7c:	e3580000 	cmp	r8, #0
    ee80:	13a08037 	movne	r8, #55	; 0x37
    ee84:	03a08057 	moveq	r8, #87	; 0x57
    ee88:	e1a06009 	mov	r6, r9
    ee8c:	ea000003 	b	eea0 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x60>
    ee90:	e1a0100a 	mov	r1, sl
    ee94:	e1a00005 	mov	r0, r5
    ee98:	ebffea2b 	bl	974c <__udivsi3>
    ee9c:	e1a04000 	mov	r4, r0
    eea0:	e1a00005 	mov	r0, r5
    eea4:	e1a0100a 	mov	r1, sl
    eea8:	ebffea64 	bl	9840 <__aeabi_uidivmod>
    eeac:	e3540009 	cmp	r4, #9
    eeb0:	e2843030 	add	r3, r4, #48	; 0x30
    eeb4:	80884004 	addhi	r4, r8, r4
    eeb8:	96af4073 	sxtbls	r4, r3
    eebc:	86af4074 	sxtbhi	r4, r4
    eec0:	e2866001 	add	r6, r6, #1
    eec4:	e1a0000a 	mov	r0, sl
    eec8:	e1a05001 	mov	r5, r1
    eecc:	e5464001 	strb	r4, [r6, #-1]
    eed0:	e1a01007 	mov	r1, r7
    eed4:	ebffea1c 	bl	974c <__udivsi3>
    eed8:	e250a000 	subs	sl, r0, #0
    eedc:	1affffeb 	bne	ee90 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x50>
    eee0:	e5c6a000 	strb	sl, [r6]
    eee4:	e1a00009 	mov	r0, r9
    eee8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    eeec:	e1a04001 	mov	r4, r1
    eef0:	e3a0a001 	mov	sl, #1
    eef4:	eaffffe0 	b	ee7c <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x3c>

0000eef8 <CString::ftoa(char*, double, unsigned int)>:
    eef8:	eeb50bc0 	vcmpe.f64	d0, #0.0
    eefc:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    ef00:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ef04:	ed9f7b95 	vldr	d7, [pc, #596]	; f160 <CString::ftoa(char*, double, unsigned int)+0x268>
    ef08:	ed2d8b02 	vpush	{d8}
    ef0c:	eeb08b40 	vmov.f64	d8, d0
    ef10:	4eb18b40 	vnegmi.f64	d8, d0
    ef14:	43a0302d 	movmi	r3, #45	; 0x2d
    ef18:	eeb48bc7 	vcmpe.f64	d8, d7
    ef1c:	45c03000 	strbmi	r3, [r0]
    ef20:	4280b001 	addmi	fp, r0, #1
    ef24:	51a0b000 	movpl	fp, r0
    ef28:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    ef2c:	e24dd01c 	sub	sp, sp, #28
    ef30:	e1a0a000 	mov	sl, r0
    ef34:	e58d1004 	str	r1, [sp, #4]
    ef38:	ca000079 	bgt	f124 <CString::ftoa(char*, double, unsigned int)+0x22c>
    ef3c:	eefc7bc8 	vcvt.u32.f64	s15, d8
    ef40:	ee177a90 	vmov	r7, s15
    ef44:	e3570009 	cmp	r7, #9
    ef48:	83a04001 	movhi	r4, #1
    ef4c:	9a00007b 	bls	f140 <CString::ftoa(char*, double, unsigned int)+0x248>
    ef50:	e0844104 	add	r4, r4, r4, lsl #2
    ef54:	e1a04084 	lsl	r4, r4, #1
    ef58:	e1a01004 	mov	r1, r4
    ef5c:	e1a00007 	mov	r0, r7
    ef60:	ebffe9f9 	bl	974c <__udivsi3>
    ef64:	e3500009 	cmp	r0, #9
    ef68:	e1a05000 	mov	r5, r0
    ef6c:	8afffff7 	bhi	ef50 <CString::ftoa(char*, double, unsigned int)+0x58>
    ef70:	e1a0600b 	mov	r6, fp
    ef74:	e1a09007 	mov	r9, r7
    ef78:	e59f81f0 	ldr	r8, [pc, #496]	; f170 <CString::ftoa(char*, double, unsigned int)+0x278>
    ef7c:	ea000003 	b	ef90 <CString::ftoa(char*, double, unsigned int)+0x98>
    ef80:	e1a01004 	mov	r1, r4
    ef84:	e1a00009 	mov	r0, r9
    ef88:	ebffe9ef 	bl	974c <__udivsi3>
    ef8c:	e1a05000 	mov	r5, r0
    ef90:	e1a00009 	mov	r0, r9
    ef94:	e1a01004 	mov	r1, r4
    ef98:	ebffea28 	bl	9840 <__aeabi_uidivmod>
    ef9c:	e0843498 	umull	r3, r4, r8, r4
    efa0:	e3550009 	cmp	r5, #9
    efa4:	e2852030 	add	r2, r5, #48	; 0x30
    efa8:	82855057 	addhi	r5, r5, #87	; 0x57
    efac:	96af5072 	sxtbls	r5, r2
    efb0:	86af5075 	sxtbhi	r5, r5
    efb4:	e2866001 	add	r6, r6, #1
    efb8:	e1b041a4 	lsrs	r4, r4, #3
    efbc:	e1a09001 	mov	r9, r1
    efc0:	e5465001 	strb	r5, [r6, #-1]
    efc4:	1affffed 	bne	ef80 <CString::ftoa(char*, double, unsigned int)+0x88>
    efc8:	e59d3004 	ldr	r3, [sp, #4]
    efcc:	e5c64000 	strb	r4, [r6]
    efd0:	e3530000 	cmp	r3, #0
    efd4:	1a000003 	bne	efe8 <CString::ftoa(char*, double, unsigned int)+0xf0>
    efd8:	e1a0000a 	mov	r0, sl
    efdc:	e28dd01c 	add	sp, sp, #28
    efe0:	ecbd8b02 	vpop	{d8}
    efe4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    efe8:	e1a0000b 	mov	r0, fp
    efec:	eb00065a 	bl	1095c <strlen>
    eff0:	e59d3004 	ldr	r3, [sp, #4]
    eff4:	e08b2000 	add	r2, fp, r0
    eff8:	e3530009 	cmp	r3, #9
    effc:	31a09003 	movcc	r9, r3
    f000:	23a09009 	movcs	r9, #9
    f004:	e3a0302e 	mov	r3, #46	; 0x2e
    f008:	e3590001 	cmp	r9, #1
    f00c:	e7cb3000 	strb	r3, [fp, r0]
    f010:	e58d2004 	str	r2, [sp, #4]
    f014:	e282b001 	add	fp, r2, #1
    f018:	0a00004e 	beq	f158 <CString::ftoa(char*, double, unsigned int)+0x260>
    f01c:	e3a02002 	mov	r2, #2
    f020:	e3a0300a 	mov	r3, #10
    f024:	e2822001 	add	r2, r2, #1
    f028:	e0833103 	add	r3, r3, r3, lsl #2
    f02c:	e1520009 	cmp	r2, r9
    f030:	e1a03083 	lsl	r3, r3, #1
    f034:	9afffffa 	bls	f024 <CString::ftoa(char*, double, unsigned int)+0x12c>
    f038:	ee073a90 	vmov	s15, r3
    f03c:	eeb87b67 	vcvt.f64.u32	d7, s15
    f040:	ee067a90 	vmov	s13, r7
    f044:	eeb86b66 	vcvt.f64.u32	d6, s13
    f048:	ee386b46 	vsub.f64	d6, d8, d6
    f04c:	ee267b07 	vmul.f64	d7, d6, d7
    f050:	eefc7bc7 	vcvt.u32.f64	s15, d7
    f054:	ee178a90 	vmov	r8, s15
    f058:	e3580009 	cmp	r8, #9
    f05c:	83a04001 	movhi	r4, #1
    f060:	9a000039 	bls	f14c <CString::ftoa(char*, double, unsigned int)+0x254>
    f064:	e0844104 	add	r4, r4, r4, lsl #2
    f068:	e1a04084 	lsl	r4, r4, #1
    f06c:	e1a01004 	mov	r1, r4
    f070:	e1a00008 	mov	r0, r8
    f074:	ebffe9b4 	bl	974c <__udivsi3>
    f078:	e3500009 	cmp	r0, #9
    f07c:	e1a05000 	mov	r5, r0
    f080:	8afffff7 	bhi	f064 <CString::ftoa(char*, double, unsigned int)+0x16c>
    f084:	e28d600c 	add	r6, sp, #12
    f088:	e59f70e0 	ldr	r7, [pc, #224]	; f170 <CString::ftoa(char*, double, unsigned int)+0x278>
    f08c:	ea000003 	b	f0a0 <CString::ftoa(char*, double, unsigned int)+0x1a8>
    f090:	e1a01004 	mov	r1, r4
    f094:	e1a00008 	mov	r0, r8
    f098:	ebffe9ab 	bl	974c <__udivsi3>
    f09c:	e1a05000 	mov	r5, r0
    f0a0:	e1a00008 	mov	r0, r8
    f0a4:	e1a01004 	mov	r1, r4
    f0a8:	ebffe9e4 	bl	9840 <__aeabi_uidivmod>
    f0ac:	e0843497 	umull	r3, r4, r7, r4
    f0b0:	e3550009 	cmp	r5, #9
    f0b4:	e2852030 	add	r2, r5, #48	; 0x30
    f0b8:	82855057 	addhi	r5, r5, #87	; 0x57
    f0bc:	96af5072 	sxtbls	r5, r2
    f0c0:	86af5075 	sxtbhi	r5, r5
    f0c4:	e2866001 	add	r6, r6, #1
    f0c8:	e1b041a4 	lsrs	r4, r4, #3
    f0cc:	e1a08001 	mov	r8, r1
    f0d0:	e5465001 	strb	r5, [r6, #-1]
    f0d4:	1affffed 	bne	f090 <CString::ftoa(char*, double, unsigned int)+0x198>
    f0d8:	e28d000c 	add	r0, sp, #12
    f0dc:	e5c64000 	strb	r4, [r6]
    f0e0:	eb00061d 	bl	1095c <strlen>
    f0e4:	e0599000 	subs	r9, r9, r0
    f0e8:	0a000006 	beq	f108 <CString::ftoa(char*, double, unsigned int)+0x210>
    f0ec:	e3a02030 	mov	r2, #48	; 0x30
    f0f0:	e59d8004 	ldr	r8, [sp, #4]
    f0f4:	e0883009 	add	r3, r8, r9
    f0f8:	e5e82001 	strb	r2, [r8, #1]!
    f0fc:	e1580003 	cmp	r8, r3
    f100:	1afffffc 	bne	f0f8 <CString::ftoa(char*, double, unsigned int)+0x200>
    f104:	e08bb009 	add	fp, fp, r9
    f108:	e28d100c 	add	r1, sp, #12
    f10c:	e1a0000b 	mov	r0, fp
    f110:	eb00068f 	bl	10b54 <strcpy>
    f114:	e1a0000a 	mov	r0, sl
    f118:	e28dd01c 	add	sp, sp, #28
    f11c:	ecbd8b02 	vpop	{d8}
    f120:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f124:	e1a0000b 	mov	r0, fp
    f128:	e59f1044 	ldr	r1, [pc, #68]	; f174 <CString::ftoa(char*, double, unsigned int)+0x27c>
    f12c:	eb000688 	bl	10b54 <strcpy>
    f130:	e1a0000a 	mov	r0, sl
    f134:	e28dd01c 	add	sp, sp, #28
    f138:	ecbd8b02 	vpop	{d8}
    f13c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f140:	ee175a90 	vmov	r5, s15
    f144:	e3a04001 	mov	r4, #1
    f148:	eaffff88 	b	ef70 <CString::ftoa(char*, double, unsigned int)+0x78>
    f14c:	ee175a90 	vmov	r5, s15
    f150:	e3a04001 	mov	r4, #1
    f154:	eaffffca 	b	f084 <CString::ftoa(char*, double, unsigned int)+0x18c>
    f158:	ed9f7b02 	vldr	d7, [pc, #8]	; f168 <CString::ftoa(char*, double, unsigned int)+0x270>
    f15c:	eaffffb7 	b	f040 <CString::ftoa(char*, double, unsigned int)+0x148>
    f160:	ffe00000 	.word	0xffe00000
    f164:	41efffff 	.word	0x41efffff
    f168:	00000000 	.word	0x00000000
    f16c:	40240000 	.word	0x40240000
    f170:	cccccccd 	.word	0xcccccccd
    f174:	00013d54 	.word	0x00013d54

0000f178 <CString::FormatV(char const*, std::__va_list)>:
    f178:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f17c:	e1a0b000 	mov	fp, r0
    f180:	e5900004 	ldr	r0, [r0, #4]
    f184:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    f188:	e3500000 	cmp	r0, #0
    f18c:	e1a05001 	mov	r5, r1
    f190:	e58d2000 	str	r2, [sp]
    f194:	0a000000 	beq	f19c <CString::FormatV(char const*, std::__va_list)+0x24>
    f198:	eb000a40 	bl	11aa0 <operator delete[](void*)>
    f19c:	e3a00040 	mov	r0, #64	; 0x40
    f1a0:	e58b0008 	str	r0, [fp, #8]
    f1a4:	eb000a3b 	bl	11a98 <operator new[](unsigned int)>
    f1a8:	e58b0004 	str	r0, [fp, #4]
    f1ac:	e58b000c 	str	r0, [fp, #12]
    f1b0:	e1d540d0 	ldrsb	r4, [r5]
    f1b4:	e3540000 	cmp	r4, #0
    f1b8:	0a0000a2 	beq	f448 <CString::FormatV(char const*, std::__va_list)+0x2d0>
    f1bc:	e3540025 	cmp	r4, #37	; 0x25
    f1c0:	13a01001 	movne	r1, #1
    f1c4:	11a0000b 	movne	r0, fp
    f1c8:	1a000152 	bne	f718 <CString::FormatV(char const*, std::__va_list)+0x5a0>
    f1cc:	e1d560d1 	ldrsb	r6, [r5, #1]
    f1d0:	e3560025 	cmp	r6, #37	; 0x25
    f1d4:	0a000165 	beq	f770 <CString::FormatV(char const*, std::__va_list)+0x5f8>
    f1d8:	e356002d 	cmp	r6, #45	; 0x2d
    f1dc:	03a03001 	moveq	r3, #1
    f1e0:	13a03000 	movne	r3, #0
    f1e4:	01d560d2 	ldrsbeq	r6, [r5, #2]
    f1e8:	158d3004 	strne	r3, [sp, #4]
    f1ec:	058d3004 	streq	r3, [sp, #4]
    f1f0:	02855002 	addeq	r5, r5, #2
    f1f4:	12855001 	addne	r5, r5, #1
    f1f8:	e3560030 	cmp	r6, #48	; 0x30
    f1fc:	03a03001 	moveq	r3, #1
    f200:	13a03000 	movne	r3, #0
    f204:	01d560d1 	ldrsbeq	r6, [r5, #1]
    f208:	058d3008 	streq	r3, [sp, #8]
    f20c:	00855003 	addeq	r5, r5, r3
    f210:	158d3008 	strne	r3, [sp, #8]
    f214:	e2463030 	sub	r3, r6, #48	; 0x30
    f218:	e6ef3073 	uxtb	r3, r3
    f21c:	e3530009 	cmp	r3, #9
    f220:	e3a04000 	mov	r4, #0
    f224:	8a000007 	bhi	f248 <CString::FormatV(char const*, std::__va_list)+0xd0>
    f228:	e0844104 	add	r4, r4, r4, lsl #2
    f22c:	e0864084 	add	r4, r6, r4, lsl #1
    f230:	e1f560d1 	ldrsb	r6, [r5, #1]!
    f234:	e2444030 	sub	r4, r4, #48	; 0x30
    f238:	e2463030 	sub	r3, r6, #48	; 0x30
    f23c:	e6ef3073 	uxtb	r3, r3
    f240:	e3530009 	cmp	r3, #9
    f244:	9afffff7 	bls	f228 <CString::FormatV(char const*, std::__va_list)+0xb0>
    f248:	e356002e 	cmp	r6, #46	; 0x2e
    f24c:	0a000137 	beq	f730 <CString::FormatV(char const*, std::__va_list)+0x5b8>
    f250:	e3a01006 	mov	r1, #6
    f254:	e1d570d0 	ldrsb	r7, [r5]
    f258:	e357006c 	cmp	r7, #108	; 0x6c
    f25c:	03a02001 	moveq	r2, #1
    f260:	01d570d1 	ldrsbeq	r7, [r5, #1]
    f264:	00855002 	addeq	r5, r5, r2
    f268:	e2473058 	sub	r3, r7, #88	; 0x58
    f26c:	e3530020 	cmp	r3, #32
    f270:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    f274:	ea00011c 	b	f6ec <CString::FormatV(char const*, std::__va_list)+0x574>
    f278:	0000f668 	.word	0x0000f668
    f27c:	0000f6ec 	.word	0x0000f6ec
    f280:	0000f6ec 	.word	0x0000f6ec
    f284:	0000f6ec 	.word	0x0000f6ec
    f288:	0000f6ec 	.word	0x0000f6ec
    f28c:	0000f6ec 	.word	0x0000f6ec
    f290:	0000f6ec 	.word	0x0000f6ec
    f294:	0000f6ec 	.word	0x0000f6ec
    f298:	0000f6ec 	.word	0x0000f6ec
    f29c:	0000f6ec 	.word	0x0000f6ec
    f2a0:	0000f6ec 	.word	0x0000f6ec
    f2a4:	0000f5f4 	.word	0x0000f5f4
    f2a8:	0000f4d0 	.word	0x0000f4d0
    f2ac:	0000f6ec 	.word	0x0000f6ec
    f2b0:	0000f458 	.word	0x0000f458
    f2b4:	0000f6ec 	.word	0x0000f6ec
    f2b8:	0000f6ec 	.word	0x0000f6ec
    f2bc:	0000f4d0 	.word	0x0000f4d0
    f2c0:	0000f6ec 	.word	0x0000f6ec
    f2c4:	0000f6ec 	.word	0x0000f6ec
    f2c8:	0000f6ec 	.word	0x0000f6ec
    f2cc:	0000f6ec 	.word	0x0000f6ec
    f2d0:	0000f6ec 	.word	0x0000f6ec
    f2d4:	0000f2fc 	.word	0x0000f2fc
    f2d8:	0000f668 	.word	0x0000f668
    f2dc:	0000f6ec 	.word	0x0000f6ec
    f2e0:	0000f6ec 	.word	0x0000f6ec
    f2e4:	0000f678 	.word	0x0000f678
    f2e8:	0000f6ec 	.word	0x0000f6ec
    f2ec:	0000f670 	.word	0x0000f670
    f2f0:	0000f6ec 	.word	0x0000f6ec
    f2f4:	0000f6ec 	.word	0x0000f6ec
    f2f8:	0000f668 	.word	0x0000f668
    f2fc:	e3a09008 	mov	r9, #8
    f300:	e59d3000 	ldr	r3, [sp]
    f304:	e5936000 	ldr	r6, [r3]
    f308:	e2833004 	add	r3, r3, #4
    f30c:	e1560009 	cmp	r6, r9
    f310:	e58d3000 	str	r3, [sp]
    f314:	23a0a001 	movcs	sl, #1
    f318:	3a0001aa 	bcc	f9c8 <CString::FormatV(char const*, std::__va_list)+0x850>
    f31c:	e00a0a99 	mul	sl, r9, sl
    f320:	e1a00006 	mov	r0, r6
    f324:	e1a0100a 	mov	r1, sl
    f328:	ebffe907 	bl	974c <__udivsi3>
    f32c:	e1590000 	cmp	r9, r0
    f330:	9afffff9 	bls	f31c <CString::FormatV(char const*, std::__va_list)+0x1a4>
    f334:	e1a03000 	mov	r3, r0
    f338:	e3570058 	cmp	r7, #88	; 0x58
    f33c:	13a07057 	movne	r7, #87	; 0x57
    f340:	03a07037 	moveq	r7, #55	; 0x37
    f344:	e1a02005 	mov	r2, r5
    f348:	e58d400c 	str	r4, [sp, #12]
    f34c:	e1a0500a 	mov	r5, sl
    f350:	e1a04007 	mov	r4, r7
    f354:	e28d8010 	add	r8, sp, #16
    f358:	e1a07006 	mov	r7, r6
    f35c:	e1a0a002 	mov	sl, r2
    f360:	e1a06003 	mov	r6, r3
    f364:	ea000003 	b	f378 <CString::FormatV(char const*, std::__va_list)+0x200>
    f368:	e1a01005 	mov	r1, r5
    f36c:	e1a00007 	mov	r0, r7
    f370:	ebffe8f5 	bl	974c <__udivsi3>
    f374:	e1a06000 	mov	r6, r0
    f378:	e1a00007 	mov	r0, r7
    f37c:	e1a01005 	mov	r1, r5
    f380:	ebffe92e 	bl	9840 <__aeabi_uidivmod>
    f384:	e3560009 	cmp	r6, #9
    f388:	e2862030 	add	r2, r6, #48	; 0x30
    f38c:	80846006 	addhi	r6, r4, r6
    f390:	96af6072 	sxtbls	r6, r2
    f394:	86af6076 	sxtbhi	r6, r6
    f398:	e2888001 	add	r8, r8, #1
    f39c:	e1a00005 	mov	r0, r5
    f3a0:	e1a07001 	mov	r7, r1
    f3a4:	e5486001 	strb	r6, [r8, #-1]
    f3a8:	e1a01009 	mov	r1, r9
    f3ac:	ebffe8e6 	bl	974c <__udivsi3>
    f3b0:	e2505000 	subs	r5, r0, #0
    f3b4:	1affffeb 	bne	f368 <CString::FormatV(char const*, std::__va_list)+0x1f0>
    f3b8:	e1a0300a 	mov	r3, sl
    f3bc:	e1a0a005 	mov	sl, r5
    f3c0:	e28d0010 	add	r0, sp, #16
    f3c4:	e5c8a000 	strb	sl, [r8]
    f3c8:	e1a05003 	mov	r5, r3
    f3cc:	e59d400c 	ldr	r4, [sp, #12]
    f3d0:	eb000561 	bl	1095c <strlen>
    f3d4:	e59d3004 	ldr	r3, [sp, #4]
    f3d8:	e1a06000 	mov	r6, r0
    f3dc:	e3530000 	cmp	r3, #0
    f3e0:	1a0000eb 	bne	f794 <CString::FormatV(char const*, std::__va_list)+0x61c>
    f3e4:	e1500004 	cmp	r0, r4
    f3e8:	2a00000f 	bcs	f42c <CString::FormatV(char const*, std::__va_list)+0x2b4>
    f3ec:	e59d3008 	ldr	r3, [sp, #8]
    f3f0:	e0444000 	sub	r4, r4, r0
    f3f4:	e3530000 	cmp	r3, #0
    f3f8:	e1a01004 	mov	r1, r4
    f3fc:	e1a0000b 	mov	r0, fp
    f400:	03a07020 	moveq	r7, #32
    f404:	13a07030 	movne	r7, #48	; 0x30
    f408:	ebfffd73 	bl	e9dc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f40c:	e2443001 	sub	r3, r4, #1
    f410:	e59b200c 	ldr	r2, [fp, #12]
    f414:	e2433001 	sub	r3, r3, #1
    f418:	e2821001 	add	r1, r2, #1
    f41c:	e3730001 	cmn	r3, #1
    f420:	e58b100c 	str	r1, [fp, #12]
    f424:	e5c27000 	strb	r7, [r2]
    f428:	1afffff8 	bne	f410 <CString::FormatV(char const*, std::__va_list)+0x298>
    f42c:	e28d1010 	add	r1, sp, #16
    f430:	e1a0000b 	mov	r0, fp
    f434:	ebfffe0e 	bl	ec74 <CString::PutString(char const*)>
    f438:	e2855001 	add	r5, r5, #1
    f43c:	e1d540d0 	ldrsb	r4, [r5]
    f440:	e3540000 	cmp	r4, #0
    f444:	1affff5c 	bne	f1bc <CString::FormatV(char const*, std::__va_list)+0x44>
    f448:	e59b300c 	ldr	r3, [fp, #12]
    f44c:	e5c34000 	strb	r4, [r3]
    f450:	e28dd02c 	add	sp, sp, #44	; 0x2c
    f454:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f458:	e59d3000 	ldr	r3, [sp]
    f45c:	e28d0010 	add	r0, sp, #16
    f460:	e2833007 	add	r3, r3, #7
    f464:	e3c33007 	bic	r3, r3, #7
    f468:	ed930b00 	vldr	d0, [r3]
    f46c:	e2833008 	add	r3, r3, #8
    f470:	e58d3000 	str	r3, [sp]
    f474:	ebfffe9f 	bl	eef8 <CString::ftoa(char*, double, unsigned int)>
    f478:	e28d0010 	add	r0, sp, #16
    f47c:	eb000536 	bl	1095c <strlen>
    f480:	e59d3004 	ldr	r3, [sp, #4]
    f484:	e1a06000 	mov	r6, r0
    f488:	e3530000 	cmp	r3, #0
    f48c:	1a000108 	bne	f8b4 <CString::FormatV(char const*, std::__va_list)+0x73c>
    f490:	e1500004 	cmp	r0, r4
    f494:	2affffe4 	bcs	f42c <CString::FormatV(char const*, std::__va_list)+0x2b4>
    f498:	e0444000 	sub	r4, r4, r0
    f49c:	e1a01004 	mov	r1, r4
    f4a0:	e1a0000b 	mov	r0, fp
    f4a4:	ebfffd4c 	bl	e9dc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f4a8:	e2443001 	sub	r3, r4, #1
    f4ac:	e59b200c 	ldr	r2, [fp, #12]
    f4b0:	e2433001 	sub	r3, r3, #1
    f4b4:	e2821001 	add	r1, r2, #1
    f4b8:	e58b100c 	str	r1, [fp, #12]
    f4bc:	e3a01020 	mov	r1, #32
    f4c0:	e3730001 	cmn	r3, #1
    f4c4:	e5c21000 	strb	r1, [r2]
    f4c8:	1afffff7 	bne	f4ac <CString::FormatV(char const*, std::__va_list)+0x334>
    f4cc:	eaffffd6 	b	f42c <CString::FormatV(char const*, std::__va_list)+0x2b4>
    f4d0:	e59d3000 	ldr	r3, [sp]
    f4d4:	e5936000 	ldr	r6, [r3]
    f4d8:	e2833004 	add	r3, r3, #4
    f4dc:	e3560000 	cmp	r6, #0
    f4e0:	b3a08001 	movlt	r8, #1
    f4e4:	a3a08000 	movge	r8, #0
    f4e8:	e58d3000 	str	r3, [sp]
    f4ec:	b1a03008 	movlt	r3, r8
    f4f0:	b2666000 	rsblt	r6, r6, #0
    f4f4:	b58d300c 	strlt	r3, [sp, #12]
    f4f8:	a58d800c 	strge	r8, [sp, #12]
    f4fc:	e3560009 	cmp	r6, #9
    f500:	e1a07006 	mov	r7, r6
    f504:	c3a0a001 	movgt	sl, #1
    f508:	da00012b 	ble	f9bc <CString::FormatV(char const*, std::__va_list)+0x844>
    f50c:	e08aa10a 	add	sl, sl, sl, lsl #2
    f510:	e1a0a08a 	lsl	sl, sl, #1
    f514:	e1a0100a 	mov	r1, sl
    f518:	e1a00006 	mov	r0, r6
    f51c:	ebffe88a 	bl	974c <__udivsi3>
    f520:	e3500009 	cmp	r0, #9
    f524:	8afffff8 	bhi	f50c <CString::FormatV(char const*, std::__va_list)+0x394>
    f528:	e1a09000 	mov	r9, r0
    f52c:	e28d6010 	add	r6, sp, #16
    f530:	ea000003 	b	f544 <CString::FormatV(char const*, std::__va_list)+0x3cc>
    f534:	e1a0100a 	mov	r1, sl
    f538:	e1a00007 	mov	r0, r7
    f53c:	ebffe882 	bl	974c <__udivsi3>
    f540:	e1a09000 	mov	r9, r0
    f544:	e1a00007 	mov	r0, r7
    f548:	e1a0100a 	mov	r1, sl
    f54c:	ebffe8bb 	bl	9840 <__aeabi_uidivmod>
    f550:	e3590009 	cmp	r9, #9
    f554:	e2893030 	add	r3, r9, #48	; 0x30
    f558:	96af9073 	sxtbls	r9, r3
    f55c:	e59f3494 	ldr	r3, [pc, #1172]	; f9f8 <CString::FormatV(char const*, std::__va_list)+0x880>
    f560:	82899057 	addhi	r9, r9, #87	; 0x57
    f564:	e08a3a93 	umull	r3, sl, r3, sl
    f568:	86af9079 	sxtbhi	r9, r9
    f56c:	e2866001 	add	r6, r6, #1
    f570:	e1b0a1aa 	lsrs	sl, sl, #3
    f574:	e1a07001 	mov	r7, r1
    f578:	e5469001 	strb	r9, [r6, #-1]
    f57c:	1affffec 	bne	f534 <CString::FormatV(char const*, std::__va_list)+0x3bc>
    f580:	e28d0010 	add	r0, sp, #16
    f584:	e5c6a000 	strb	sl, [r6]
    f588:	eb0004f3 	bl	1095c <strlen>
    f58c:	e59d3004 	ldr	r3, [sp, #4]
    f590:	e0888000 	add	r8, r8, r0
    f594:	e3530000 	cmp	r3, #0
    f598:	0a000090 	beq	f7e0 <CString::FormatV(char const*, std::__va_list)+0x668>
    f59c:	e59d300c 	ldr	r3, [sp, #12]
    f5a0:	e3530000 	cmp	r3, #0
    f5a4:	1a0000fb 	bne	f998 <CString::FormatV(char const*, std::__va_list)+0x820>
    f5a8:	e28d1010 	add	r1, sp, #16
    f5ac:	e1a0000b 	mov	r0, fp
    f5b0:	ebfffdaf 	bl	ec74 <CString::PutString(char const*)>
    f5b4:	e1580004 	cmp	r8, r4
    f5b8:	2affff9e 	bcs	f438 <CString::FormatV(char const*, std::__va_list)+0x2c0>
    f5bc:	e0444008 	sub	r4, r4, r8
    f5c0:	e1a01004 	mov	r1, r4
    f5c4:	e1a0000b 	mov	r0, fp
    f5c8:	ebfffd03 	bl	e9dc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f5cc:	e2443001 	sub	r3, r4, #1
    f5d0:	e59b200c 	ldr	r2, [fp, #12]
    f5d4:	e2433001 	sub	r3, r3, #1
    f5d8:	e2821001 	add	r1, r2, #1
    f5dc:	e58b100c 	str	r1, [fp, #12]
    f5e0:	e3a01020 	mov	r1, #32
    f5e4:	e3730001 	cmn	r3, #1
    f5e8:	e5c21000 	strb	r1, [r2]
    f5ec:	1afffff7 	bne	f5d0 <CString::FormatV(char const*, std::__va_list)+0x458>
    f5f0:	eaffff90 	b	f438 <CString::FormatV(char const*, std::__va_list)+0x2c0>
    f5f4:	e59d3004 	ldr	r3, [sp, #4]
    f5f8:	e3530000 	cmp	r3, #0
    f5fc:	e59d3000 	ldr	r3, [sp]
    f600:	e2836004 	add	r6, r3, #4
    f604:	e1d370d0 	ldrsb	r7, [r3]
    f608:	1a000092 	bne	f858 <CString::FormatV(char const*, std::__va_list)+0x6e0>
    f60c:	e3540001 	cmp	r4, #1
    f610:	9a00000b 	bls	f644 <CString::FormatV(char const*, std::__va_list)+0x4cc>
    f614:	e2441001 	sub	r1, r4, #1
    f618:	e1a0000b 	mov	r0, fp
    f61c:	ebfffcee 	bl	e9dc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f620:	e2444002 	sub	r4, r4, #2
    f624:	e59b300c 	ldr	r3, [fp, #12]
    f628:	e2444001 	sub	r4, r4, #1
    f62c:	e2832001 	add	r2, r3, #1
    f630:	e58b200c 	str	r2, [fp, #12]
    f634:	e3a02020 	mov	r2, #32
    f638:	e3740001 	cmn	r4, #1
    f63c:	e5c32000 	strb	r2, [r3]
    f640:	1afffff7 	bne	f624 <CString::FormatV(char const*, std::__va_list)+0x4ac>
    f644:	e3a01001 	mov	r1, #1
    f648:	e1a0000b 	mov	r0, fp
    f64c:	ebfffce2 	bl	e9dc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f650:	e59b300c 	ldr	r3, [fp, #12]
    f654:	e58d6000 	str	r6, [sp]
    f658:	e2832001 	add	r2, r3, #1
    f65c:	e58b200c 	str	r2, [fp, #12]
    f660:	e5c37000 	strb	r7, [r3]
    f664:	eaffff73 	b	f438 <CString::FormatV(char const*, std::__va_list)+0x2c0>
    f668:	e3a09010 	mov	r9, #16
    f66c:	eaffff23 	b	f300 <CString::FormatV(char const*, std::__va_list)+0x188>
    f670:	e3a0900a 	mov	r9, #10
    f674:	eaffff21 	b	f300 <CString::FormatV(char const*, std::__va_list)+0x188>
    f678:	e59d3000 	ldr	r3, [sp]
    f67c:	e5938000 	ldr	r8, [r3]
    f680:	e2836004 	add	r6, r3, #4
    f684:	e1a00008 	mov	r0, r8
    f688:	eb0004b3 	bl	1095c <strlen>
    f68c:	e59d3004 	ldr	r3, [sp, #4]
    f690:	e1a07000 	mov	r7, r0
    f694:	e3530000 	cmp	r3, #0
    f698:	1a000098 	bne	f900 <CString::FormatV(char const*, std::__va_list)+0x788>
    f69c:	e1500004 	cmp	r0, r4
    f6a0:	2a00000c 	bcs	f6d8 <CString::FormatV(char const*, std::__va_list)+0x560>
    f6a4:	e0444000 	sub	r4, r4, r0
    f6a8:	e1a01004 	mov	r1, r4
    f6ac:	e1a0000b 	mov	r0, fp
    f6b0:	ebfffcc9 	bl	e9dc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f6b4:	e2443001 	sub	r3, r4, #1
    f6b8:	e59b200c 	ldr	r2, [fp, #12]
    f6bc:	e2433001 	sub	r3, r3, #1
    f6c0:	e2821001 	add	r1, r2, #1
    f6c4:	e58b100c 	str	r1, [fp, #12]
    f6c8:	e3a01020 	mov	r1, #32
    f6cc:	e3730001 	cmn	r3, #1
    f6d0:	e5c21000 	strb	r1, [r2]
    f6d4:	1afffff7 	bne	f6b8 <CString::FormatV(char const*, std::__va_list)+0x540>
    f6d8:	e1a01008 	mov	r1, r8
    f6dc:	e1a0000b 	mov	r0, fp
    f6e0:	e58d6000 	str	r6, [sp]
    f6e4:	ebfffd62 	bl	ec74 <CString::PutString(char const*)>
    f6e8:	eaffff52 	b	f438 <CString::FormatV(char const*, std::__va_list)+0x2c0>
    f6ec:	e3a01001 	mov	r1, #1
    f6f0:	e1a0000b 	mov	r0, fp
    f6f4:	ebfffcb8 	bl	e9dc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f6f8:	e3a01001 	mov	r1, #1
    f6fc:	e59b300c 	ldr	r3, [fp, #12]
    f700:	e1a0000b 	mov	r0, fp
    f704:	e0832001 	add	r2, r3, r1
    f708:	e58b200c 	str	r2, [fp, #12]
    f70c:	e3a02025 	mov	r2, #37	; 0x25
    f710:	e5c32000 	strb	r2, [r3]
    f714:	e1d540d0 	ldrsb	r4, [r5]
    f718:	ebfffcaf 	bl	e9dc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f71c:	e59b300c 	ldr	r3, [fp, #12]
    f720:	e2832001 	add	r2, r3, #1
    f724:	e58b200c 	str	r2, [fp, #12]
    f728:	e5c34000 	strb	r4, [r3]
    f72c:	eaffff41 	b	f438 <CString::FormatV(char const*, std::__va_list)+0x2c0>
    f730:	e1d570d1 	ldrsb	r7, [r5, #1]
    f734:	e3a01000 	mov	r1, #0
    f738:	e2473030 	sub	r3, r7, #48	; 0x30
    f73c:	e6ef3073 	uxtb	r3, r3
    f740:	e3530009 	cmp	r3, #9
    f744:	e2855001 	add	r5, r5, #1
    f748:	8afffec2 	bhi	f258 <CString::FormatV(char const*, std::__va_list)+0xe0>
    f74c:	e0811101 	add	r1, r1, r1, lsl #2
    f750:	e0871081 	add	r1, r7, r1, lsl #1
    f754:	e1f570d1 	ldrsb	r7, [r5, #1]!
    f758:	e2411030 	sub	r1, r1, #48	; 0x30
    f75c:	e2473030 	sub	r3, r7, #48	; 0x30
    f760:	e6ef3073 	uxtb	r3, r3
    f764:	e3530009 	cmp	r3, #9
    f768:	9afffff7 	bls	f74c <CString::FormatV(char const*, std::__va_list)+0x5d4>
    f76c:	eafffeb9 	b	f258 <CString::FormatV(char const*, std::__va_list)+0xe0>
    f770:	e3a01001 	mov	r1, #1
    f774:	e1a0000b 	mov	r0, fp
    f778:	ebfffc97 	bl	e9dc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f77c:	e59b300c 	ldr	r3, [fp, #12]
    f780:	e2855002 	add	r5, r5, #2
    f784:	e2832001 	add	r2, r3, #1
    f788:	e58b200c 	str	r2, [fp, #12]
    f78c:	e5c36000 	strb	r6, [r3]
    f790:	eafffe86 	b	f1b0 <CString::FormatV(char const*, std::__va_list)+0x38>
    f794:	e28d1010 	add	r1, sp, #16
    f798:	e1a0000b 	mov	r0, fp
    f79c:	ebfffd34 	bl	ec74 <CString::PutString(char const*)>
    f7a0:	e1560004 	cmp	r6, r4
    f7a4:	2affff23 	bcs	f438 <CString::FormatV(char const*, std::__va_list)+0x2c0>
    f7a8:	e0444006 	sub	r4, r4, r6
    f7ac:	e1a01004 	mov	r1, r4
    f7b0:	e1a0000b 	mov	r0, fp
    f7b4:	ebfffc88 	bl	e9dc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f7b8:	e2443001 	sub	r3, r4, #1
    f7bc:	e59b200c 	ldr	r2, [fp, #12]
    f7c0:	e2433001 	sub	r3, r3, #1
    f7c4:	e2821001 	add	r1, r2, #1
    f7c8:	e58b100c 	str	r1, [fp, #12]
    f7cc:	e3a01020 	mov	r1, #32
    f7d0:	e3730001 	cmn	r3, #1
    f7d4:	e5c21000 	strb	r1, [r2]
    f7d8:	1afffff7 	bne	f7bc <CString::FormatV(char const*, std::__va_list)+0x644>
    f7dc:	eaffff15 	b	f438 <CString::FormatV(char const*, std::__va_list)+0x2c0>
    f7e0:	e59d3008 	ldr	r3, [sp, #8]
    f7e4:	e3530000 	cmp	r3, #0
    f7e8:	1a000057 	bne	f94c <CString::FormatV(char const*, std::__va_list)+0x7d4>
    f7ec:	e1580004 	cmp	r8, r4
    f7f0:	2a00000c 	bcs	f828 <CString::FormatV(char const*, std::__va_list)+0x6b0>
    f7f4:	e0444008 	sub	r4, r4, r8
    f7f8:	e1a01004 	mov	r1, r4
    f7fc:	e1a0000b 	mov	r0, fp
    f800:	ebfffc75 	bl	e9dc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f804:	e2443001 	sub	r3, r4, #1
    f808:	e59b200c 	ldr	r2, [fp, #12]
    f80c:	e2433001 	sub	r3, r3, #1
    f810:	e2821001 	add	r1, r2, #1
    f814:	e58b100c 	str	r1, [fp, #12]
    f818:	e3a01020 	mov	r1, #32
    f81c:	e3730001 	cmn	r3, #1
    f820:	e5c21000 	strb	r1, [r2]
    f824:	1afffff7 	bne	f808 <CString::FormatV(char const*, std::__va_list)+0x690>
    f828:	e59d300c 	ldr	r3, [sp, #12]
    f82c:	e3530000 	cmp	r3, #0
    f830:	0afffefd 	beq	f42c <CString::FormatV(char const*, std::__va_list)+0x2b4>
    f834:	e3a01001 	mov	r1, #1
    f838:	e1a0000b 	mov	r0, fp
    f83c:	ebfffc66 	bl	e9dc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f840:	e3a0202d 	mov	r2, #45	; 0x2d
    f844:	e59b300c 	ldr	r3, [fp, #12]
    f848:	e2831001 	add	r1, r3, #1
    f84c:	e58b100c 	str	r1, [fp, #12]
    f850:	e5c32000 	strb	r2, [r3]
    f854:	eafffef4 	b	f42c <CString::FormatV(char const*, std::__va_list)+0x2b4>
    f858:	e3a01001 	mov	r1, #1
    f85c:	e1a0000b 	mov	r0, fp
    f860:	ebfffc5d 	bl	e9dc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f864:	e59b300c 	ldr	r3, [fp, #12]
    f868:	e3540001 	cmp	r4, #1
    f86c:	e2832001 	add	r2, r3, #1
    f870:	e58b200c 	str	r2, [fp, #12]
    f874:	e5c37000 	strb	r7, [r3]
    f878:	9a00000b 	bls	f8ac <CString::FormatV(char const*, std::__va_list)+0x734>
    f87c:	e2441001 	sub	r1, r4, #1
    f880:	e1a0000b 	mov	r0, fp
    f884:	ebfffc54 	bl	e9dc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f888:	e2444002 	sub	r4, r4, #2
    f88c:	e59b300c 	ldr	r3, [fp, #12]
    f890:	e2444001 	sub	r4, r4, #1
    f894:	e2832001 	add	r2, r3, #1
    f898:	e58b200c 	str	r2, [fp, #12]
    f89c:	e3a02020 	mov	r2, #32
    f8a0:	e3740001 	cmn	r4, #1
    f8a4:	e5c32000 	strb	r2, [r3]
    f8a8:	1afffff7 	bne	f88c <CString::FormatV(char const*, std::__va_list)+0x714>
    f8ac:	e58d6000 	str	r6, [sp]
    f8b0:	eafffee0 	b	f438 <CString::FormatV(char const*, std::__va_list)+0x2c0>
    f8b4:	e28d1010 	add	r1, sp, #16
    f8b8:	e1a0000b 	mov	r0, fp
    f8bc:	ebfffcec 	bl	ec74 <CString::PutString(char const*)>
    f8c0:	e1560004 	cmp	r6, r4
    f8c4:	2afffedb 	bcs	f438 <CString::FormatV(char const*, std::__va_list)+0x2c0>
    f8c8:	e0444006 	sub	r4, r4, r6
    f8cc:	e1a01004 	mov	r1, r4
    f8d0:	e1a0000b 	mov	r0, fp
    f8d4:	ebfffc40 	bl	e9dc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f8d8:	e2443001 	sub	r3, r4, #1
    f8dc:	e59b200c 	ldr	r2, [fp, #12]
    f8e0:	e2433001 	sub	r3, r3, #1
    f8e4:	e2821001 	add	r1, r2, #1
    f8e8:	e58b100c 	str	r1, [fp, #12]
    f8ec:	e3a01020 	mov	r1, #32
    f8f0:	e3730001 	cmn	r3, #1
    f8f4:	e5c21000 	strb	r1, [r2]
    f8f8:	1afffff7 	bne	f8dc <CString::FormatV(char const*, std::__va_list)+0x764>
    f8fc:	eafffecd 	b	f438 <CString::FormatV(char const*, std::__va_list)+0x2c0>
    f900:	e1a01008 	mov	r1, r8
    f904:	e1a0000b 	mov	r0, fp
    f908:	ebfffcd9 	bl	ec74 <CString::PutString(char const*)>
    f90c:	e1570004 	cmp	r7, r4
    f910:	2affffe5 	bcs	f8ac <CString::FormatV(char const*, std::__va_list)+0x734>
    f914:	e0444007 	sub	r4, r4, r7
    f918:	e1a01004 	mov	r1, r4
    f91c:	e1a0000b 	mov	r0, fp
    f920:	ebfffc2d 	bl	e9dc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f924:	e2443001 	sub	r3, r4, #1
    f928:	e59b200c 	ldr	r2, [fp, #12]
    f92c:	e2433001 	sub	r3, r3, #1
    f930:	e2821001 	add	r1, r2, #1
    f934:	e58b100c 	str	r1, [fp, #12]
    f938:	e3a01020 	mov	r1, #32
    f93c:	e3730001 	cmn	r3, #1
    f940:	e5c21000 	strb	r1, [r2]
    f944:	1afffff7 	bne	f928 <CString::FormatV(char const*, std::__va_list)+0x7b0>
    f948:	eaffffd7 	b	f8ac <CString::FormatV(char const*, std::__va_list)+0x734>
    f94c:	e59d300c 	ldr	r3, [sp, #12]
    f950:	e3530000 	cmp	r3, #0
    f954:	1a00001e 	bne	f9d4 <CString::FormatV(char const*, std::__va_list)+0x85c>
    f958:	e1580004 	cmp	r8, r4
    f95c:	2afffeb2 	bcs	f42c <CString::FormatV(char const*, std::__va_list)+0x2b4>
    f960:	e0444008 	sub	r4, r4, r8
    f964:	e1a0000b 	mov	r0, fp
    f968:	e1a01004 	mov	r1, r4
    f96c:	ebfffc1a 	bl	e9dc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f970:	e3a00030 	mov	r0, #48	; 0x30
    f974:	e2443001 	sub	r3, r4, #1
    f978:	e59b200c 	ldr	r2, [fp, #12]
    f97c:	e2433001 	sub	r3, r3, #1
    f980:	e2821001 	add	r1, r2, #1
    f984:	e3730001 	cmn	r3, #1
    f988:	e58b100c 	str	r1, [fp, #12]
    f98c:	e5c20000 	strb	r0, [r2]
    f990:	1afffff8 	bne	f978 <CString::FormatV(char const*, std::__va_list)+0x800>
    f994:	eafffea4 	b	f42c <CString::FormatV(char const*, std::__va_list)+0x2b4>
    f998:	e3a01001 	mov	r1, #1
    f99c:	e1a0000b 	mov	r0, fp
    f9a0:	ebfffc0d 	bl	e9dc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f9a4:	e3a0202d 	mov	r2, #45	; 0x2d
    f9a8:	e59b300c 	ldr	r3, [fp, #12]
    f9ac:	e2831001 	add	r1, r3, #1
    f9b0:	e58b100c 	str	r1, [fp, #12]
    f9b4:	e5c32000 	strb	r2, [r3]
    f9b8:	eafffefa 	b	f5a8 <CString::FormatV(char const*, std::__va_list)+0x430>
    f9bc:	e1a09006 	mov	r9, r6
    f9c0:	e3a0a001 	mov	sl, #1
    f9c4:	eafffed8 	b	f52c <CString::FormatV(char const*, std::__va_list)+0x3b4>
    f9c8:	e1a03006 	mov	r3, r6
    f9cc:	e3a0a001 	mov	sl, #1
    f9d0:	eafffe58 	b	f338 <CString::FormatV(char const*, std::__va_list)+0x1c0>
    f9d4:	e3a01001 	mov	r1, #1
    f9d8:	e1a0000b 	mov	r0, fp
    f9dc:	ebfffbfe 	bl	e9dc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f9e0:	e3a0202d 	mov	r2, #45	; 0x2d
    f9e4:	e59b300c 	ldr	r3, [fp, #12]
    f9e8:	e2831001 	add	r1, r3, #1
    f9ec:	e58b100c 	str	r1, [fp, #12]
    f9f0:	e5c32000 	strb	r2, [r3]
    f9f4:	eaffffd7 	b	f958 <CString::FormatV(char const*, std::__va_list)+0x7e0>
    f9f8:	cccccccd 	.word	0xcccccccd

0000f9fc <CString::Format(char const*, ...)>:
    f9fc:	e92d000e 	push	{r1, r2, r3}
    fa00:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    fa04:	e24dd008 	sub	sp, sp, #8
    fa08:	e28d3010 	add	r3, sp, #16
    fa0c:	e1a02003 	mov	r2, r3
    fa10:	e59d100c 	ldr	r1, [sp, #12]
    fa14:	e58d3004 	str	r3, [sp, #4]
    fa18:	ebfffdd6 	bl	f178 <CString::FormatV(char const*, std::__va_list)>
    fa1c:	e28dd008 	add	sp, sp, #8
    fa20:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    fa24:	e28dd00c 	add	sp, sp, #12
    fa28:	e12fff1e 	bx	lr

0000fa2c <__aeabi_atexit>:
    fa2c:	e12fff1e 	bx	lr

0000fa30 <halt>:
    fa30:	f10c0080 	cpsid	i
    fa34:	f10c0040 	cpsid	f
    fa38:	eafffffe 	b	fa38 <halt+0x8>

0000fa3c <reboot>:
    fa3c:	e3a03000 	mov	r3, #0
    fa40:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    fa44:	e59f3010 	ldr	r3, [pc, #16]	; fa5c <reboot+0x20>
    fa48:	e59f1010 	ldr	r1, [pc, #16]	; fa60 <reboot+0x24>
    fa4c:	e59f2010 	ldr	r2, [pc, #16]	; fa64 <reboot+0x28>
    fa50:	e5831024 	str	r1, [r3, #36]	; 0x24
    fa54:	e583201c 	str	r2, [r3, #28]
    fa58:	eafffffe 	b	fa58 <reboot+0x1c>
    fa5c:	20100000 	.word	0x20100000
    fa60:	5a000001 	.word	0x5a000001
    fa64:	5a000020 	.word	0x5a000020

0000fa68 <sysinit>:
    fa68:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    fa6c:	e24dd01c 	sub	sp, sp, #28
    fa70:	f1080040 	cpsie	f
    fa74:	ee113f50 	mrc	15, 0, r3, cr1, cr0, {2}
    fa78:	e383360f 	orr	r3, r3, #15728640	; 0xf00000
    fa7c:	ee013f50 	mcr	15, 0, r3, cr1, cr0, {2}
    fa80:	e3a02000 	mov	r2, #0
    fa84:	ee072f95 	mcr	15, 0, r2, cr7, cr5, {4}
    fa88:	e3a03101 	mov	r3, #1073741824	; 0x40000000
    fa8c:	eee83a10 	vmsr	fpexc, r3
    fa90:	e3a03402 	mov	r3, #33554432	; 0x2000000
    fa94:	eee13a10 	vmsr	fpscr, r3
    fa98:	e59f3068 	ldr	r3, [pc, #104]	; fb08 <sysinit+0xa0>
    fa9c:	e59f1068 	ldr	r1, [pc, #104]	; fb0c <sysinit+0xa4>
    faa0:	e1530001 	cmp	r3, r1
    faa4:	2a000002 	bcs	fab4 <sysinit+0x4c>
    faa8:	e4c32001 	strb	r2, [r3], #1
    faac:	e1530001 	cmp	r3, r1
    fab0:	1afffffc 	bne	faa8 <sysinit+0x40>
    fab4:	e1a0000d 	mov	r0, sp
    fab8:	ebfff2e9 	bl	c664 <CMachineInfo::CMachineInfo()>
    fabc:	e59f504c 	ldr	r5, [pc, #76]	; fb10 <sysinit+0xa8>
    fac0:	e59f304c 	ldr	r3, [pc, #76]	; fb14 <sysinit+0xac>
    fac4:	e1550003 	cmp	r5, r3
    fac8:	2a000009 	bcs	faf4 <sysinit+0x8c>
    facc:	e1e06005 	mvn	r6, r5
    fad0:	e3a04000 	mov	r4, #0
    fad4:	e0866003 	add	r6, r6, r3
    fad8:	e1a06126 	lsr	r6, r6, #2
    fadc:	e2866001 	add	r6, r6, #1
    fae0:	e2844001 	add	r4, r4, #1
    fae4:	e4953004 	ldr	r3, [r5], #4
    fae8:	e12fff33 	blx	r3
    faec:	e1540006 	cmp	r4, r6
    faf0:	1afffffa 	bne	fae0 <sysinit+0x78>
    faf4:	ebffe15b 	bl	8068 <main>
    faf8:	e3500001 	cmp	r0, #1
    fafc:	0a000000 	beq	fb04 <sysinit+0x9c>
    fb00:	ebffffca 	bl	fa30 <halt>
    fb04:	ebffffcc 	bl	fa3c <reboot>
    fb08:	00015314 	.word	0x00015314
    fb0c:	000153d8 	.word	0x000153d8
    fb10:	00015204 	.word	0x00015204
    fb14:	00015214 	.word	0x00015214

0000fb18 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]>:
    fb18:	e2800001 	add	r0, r0, #1
    fb1c:	e3a03000 	mov	r3, #0
    fb20:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    fb24:	e59f3020 	ldr	r3, [pc, #32]	; fb4c <CTimer::SimpleusDelay(unsigned int) [clone .part.0]+0x34>
    fb28:	e1a01003 	mov	r1, r3
    fb2c:	e5932004 	ldr	r2, [r3, #4]
    fb30:	e5913004 	ldr	r3, [r1, #4]
    fb34:	e0433002 	sub	r3, r3, r2
    fb38:	e1500003 	cmp	r0, r3
    fb3c:	8afffffb 	bhi	fb30 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]+0x18>
    fb40:	e3a03000 	mov	r3, #0
    fb44:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    fb48:	e12fff1e 	bx	lr
    fb4c:	20003000 	.word	0x20003000

0000fb50 <CTimer::CTimer(CInterruptSystem*)>:
    fb50:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    fb54:	e3a05000 	mov	r5, #0
    fb58:	e3a07001 	mov	r7, #1
    fb5c:	e1a04000 	mov	r4, r0
    fb60:	e59f605c 	ldr	r6, [pc, #92]	; fbc4 <CTimer::CTimer(CInterruptSystem*)+0x74>
    fb64:	e5805004 	str	r5, [r0, #4]
    fb68:	e5801000 	str	r1, [r0]
    fb6c:	e5805008 	str	r5, [r0, #8]
    fb70:	e5805014 	str	r5, [r0, #20]
    fb74:	e5807010 	str	r7, [r0, #16]
    fb78:	e580500c 	str	r5, [r0, #12]
    fb7c:	e2800018 	add	r0, r0, #24
    fb80:	eb000be2 	bl	12b10 <CPtrList::CPtrList()>
    fb84:	e5961000 	ldr	r1, [r6]
    fb88:	e59f2038 	ldr	r2, [pc, #56]	; fbc8 <CTimer::CTimer(CInterruptSystem*)+0x78>
    fb8c:	e59f3038 	ldr	r3, [pc, #56]	; fbcc <CTimer::CTimer(CInterruptSystem*)+0x7c>
    fb90:	e1510005 	cmp	r1, r5
    fb94:	e584701c 	str	r7, [r4, #28]
    fb98:	e5845028 	str	r5, [r4, #40]	; 0x28
    fb9c:	e5842020 	str	r2, [r4, #32]
    fba0:	e5843024 	str	r3, [r4, #36]	; 0x24
    fba4:	0a000003 	beq	fbb8 <CTimer::CTimer(CInterruptSystem*)+0x68>
    fba8:	e3a0203d 	mov	r2, #61	; 0x3d
    fbac:	e59f101c 	ldr	r1, [pc, #28]	; fbd0 <CTimer::CTimer(CInterruptSystem*)+0x80>
    fbb0:	e59f001c 	ldr	r0, [pc, #28]	; fbd4 <CTimer::CTimer(CInterruptSystem*)+0x84>
    fbb4:	ebffe7bb 	bl	9aa8 <assertion_failed>
    fbb8:	e5864000 	str	r4, [r6]
    fbbc:	e1a00004 	mov	r0, r4
    fbc0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    fbc4:	00015350 	.word	0x00015350
    fbc8:	00055730 	.word	0x00055730
    fbcc:	0000015e 	.word	0x0000015e
    fbd0:	00013d98 	.word	0x00013d98
    fbd4:	00013da4 	.word	0x00013da4

0000fbd8 <CTimer::~CTimer()>:
    fbd8:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fbdc:	e1a0a000 	mov	sl, r0
    fbe0:	e5900000 	ldr	r0, [r0]
    fbe4:	e3500000 	cmp	r0, #0
    fbe8:	0a000028 	beq	fc90 <CTimer::~CTimer()+0xb8>
    fbec:	e3a01003 	mov	r1, #3
    fbf0:	ebffee77 	bl	b5d4 <CInterruptSystem::DisconnectIRQ(unsigned int)>
    fbf4:	e3a0904b 	mov	r9, #75	; 0x4b
    fbf8:	e59f70a8 	ldr	r7, [pc, #168]	; fca8 <CTimer::~CTimer()+0xd0>
    fbfc:	e59f60a8 	ldr	r6, [pc, #168]	; fcac <CTimer::~CTimer()+0xd4>
    fc00:	e59f80a8 	ldr	r8, [pc, #168]	; fcb0 <CTimer::~CTimer()+0xd8>
    fc04:	e28a4018 	add	r4, sl, #24
    fc08:	ea000011 	b	fc54 <CTimer::~CTimer()+0x7c>
    fc0c:	e1a01005 	mov	r1, r5
    fc10:	e1a00004 	mov	r0, r4
    fc14:	eb000be5 	bl	12bb0 <CPtrList::GetPtr(TPtrListElement*)>
    fc18:	e250b000 	subs	fp, r0, #0
    fc1c:	0a000016 	beq	fc7c <CTimer::~CTimer()+0xa4>
    fc20:	e59b3000 	ldr	r3, [fp]
    fc24:	e1530006 	cmp	r3, r6
    fc28:	0a000003 	beq	fc3c <CTimer::~CTimer()+0x64>
    fc2c:	e1a02009 	mov	r2, r9
    fc30:	e1a01007 	mov	r1, r7
    fc34:	e1a00008 	mov	r0, r8
    fc38:	ebffe79a 	bl	9aa8 <assertion_failed>
    fc3c:	e1a01005 	mov	r1, r5
    fc40:	e1a00004 	mov	r0, r4
    fc44:	eb000c6e 	bl	12e04 <CPtrList::Remove(TPtrListElement*)>
    fc48:	e1a0000b 	mov	r0, fp
    fc4c:	e3a01014 	mov	r1, #20
    fc50:	eb000793 	bl	11aa4 <operator delete(void*, unsigned int)>
    fc54:	e1a00004 	mov	r0, r4
    fc58:	eb000bbc 	bl	12b50 <CPtrList::GetFirst()>
    fc5c:	e2505000 	subs	r5, r0, #0
    fc60:	1affffe9 	bne	fc0c <CTimer::~CTimer()+0x34>
    fc64:	e59f3048 	ldr	r3, [pc, #72]	; fcb4 <CTimer::~CTimer()+0xdc>
    fc68:	e1a00004 	mov	r0, r4
    fc6c:	e5835000 	str	r5, [r3]
    fc70:	eb000ba9 	bl	12b1c <CPtrList::~CPtrList()>
    fc74:	e1a0000a 	mov	r0, sl
    fc78:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fc7c:	e3a0204a 	mov	r2, #74	; 0x4a
    fc80:	e1a01007 	mov	r1, r7
    fc84:	e59f002c 	ldr	r0, [pc, #44]	; fcb8 <CTimer::~CTimer()+0xe0>
    fc88:	ebffe786 	bl	9aa8 <assertion_failed>
    fc8c:	eaffffe3 	b	fc20 <CTimer::~CTimer()+0x48>
    fc90:	e59f0024 	ldr	r0, [pc, #36]	; fcbc <CTimer::~CTimer()+0xe4>
    fc94:	e3a02043 	mov	r2, #67	; 0x43
    fc98:	e59f1008 	ldr	r1, [pc, #8]	; fca8 <CTimer::~CTimer()+0xd0>
    fc9c:	ebffe781 	bl	9aa8 <assertion_failed>
    fca0:	e59a0000 	ldr	r0, [sl]
    fca4:	eaffffd0 	b	fbec <CTimer::~CTimer()+0x14>
    fca8:	00013d98 	.word	0x00013d98
    fcac:	4b544d43 	.word	0x4b544d43
    fcb0:	00013dc0 	.word	0x00013dc0
    fcb4:	00015350 	.word	0x00015350
    fcb8:	00013db4 	.word	0x00013db4
    fcbc:	000130e8 	.word	0x000130e8

0000fcc0 <CTimer::SetTimeZone(int)>:
    fcc0:	e59f2018 	ldr	r2, [pc, #24]	; fce0 <CTimer::SetTimeZone(int)+0x20>
    fcc4:	e2813e59 	add	r3, r1, #1424	; 0x590
    fcc8:	e283300f 	add	r3, r3, #15
    fccc:	e1530002 	cmp	r3, r2
    fcd0:	95801014 	strls	r1, [r0, #20]
    fcd4:	93a00001 	movls	r0, #1
    fcd8:	83a00000 	movhi	r0, #0
    fcdc:	e12fff1e 	bx	lr
    fce0:	00000b3e 	.word	0x00000b3e

0000fce4 <CTimer::GetTimeZone() const>:
    fce4:	e5900014 	ldr	r0, [r0, #20]
    fce8:	e12fff1e 	bx	lr

0000fcec <CTimer::SetTime(unsigned int, bool)>:
    fcec:	e3520000 	cmp	r2, #0
    fcf0:	e92d4070 	push	{r4, r5, r6, lr}
    fcf4:	e1a04000 	mov	r4, r0
    fcf8:	e1a05001 	mov	r5, r1
    fcfc:	1a000004 	bne	fd14 <CTimer::SetTime(unsigned int, bool)+0x28>
    fd00:	e5903014 	ldr	r3, [r0, #20]
    fd04:	e0633203 	rsb	r3, r3, r3, lsl #4
    fd08:	e1b03103 	lsls	r3, r3, #2
    fd0c:	4a00000e 	bmi	fd4c <CTimer::SetTime(unsigned int, bool)+0x60>
    fd10:	e0855003 	add	r5, r5, r3
    fd14:	e5940010 	ldr	r0, [r4, #16]
    fd18:	e3500000 	cmp	r0, #0
    fd1c:	1a000002 	bne	fd2c <CTimer::SetTime(unsigned int, bool)+0x40>
    fd20:	e3a00001 	mov	r0, #1
    fd24:	e584500c 	str	r5, [r4, #12]
    fd28:	e8bd8070 	pop	{r4, r5, r6, pc}
    fd2c:	eb0006fe 	bl	1192c <EnterCritical>
    fd30:	e5943010 	ldr	r3, [r4, #16]
    fd34:	e584500c 	str	r5, [r4, #12]
    fd38:	e3530000 	cmp	r3, #0
    fd3c:	0a000007 	beq	fd60 <CTimer::SetTime(unsigned int, bool)+0x74>
    fd40:	eb000726 	bl	119e0 <LeaveCritical>
    fd44:	e3a00001 	mov	r0, #1
    fd48:	e8bd8070 	pop	{r4, r5, r6, pc}
    fd4c:	e2631000 	rsb	r1, r3, #0
    fd50:	e1510005 	cmp	r1, r5
    fd54:	daffffed 	ble	fd10 <CTimer::SetTime(unsigned int, bool)+0x24>
    fd58:	e1a00002 	mov	r0, r2
    fd5c:	e8bd8070 	pop	{r4, r5, r6, pc}
    fd60:	e3a00001 	mov	r0, #1
    fd64:	e8bd8070 	pop	{r4, r5, r6, pc}

0000fd68 <CTimer::GetClockTicks()>:
    fd68:	e3a03000 	mov	r3, #0
    fd6c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    fd70:	e59f2008 	ldr	r2, [pc, #8]	; fd80 <CTimer::GetClockTicks()+0x18>
    fd74:	e5920004 	ldr	r0, [r2, #4]
    fd78:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    fd7c:	e12fff1e 	bx	lr
    fd80:	20003000 	.word	0x20003000

0000fd84 <CTimer::GetTicks() const>:
    fd84:	e5900004 	ldr	r0, [r0, #4]
    fd88:	e12fff1e 	bx	lr

0000fd8c <CTimer::GetUptime() const>:
    fd8c:	e5900008 	ldr	r0, [r0, #8]
    fd90:	e12fff1e 	bx	lr

0000fd94 <CTimer::GetTime() const>:
    fd94:	e590000c 	ldr	r0, [r0, #12]
    fd98:	e12fff1e 	bx	lr

0000fd9c <CTimer::GetLocalTime(unsigned int*, unsigned int*)>:
    fd9c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    fda0:	e1a04000 	mov	r4, r0
    fda4:	e5900010 	ldr	r0, [r0, #16]
    fda8:	e1a06001 	mov	r6, r1
    fdac:	e3500000 	cmp	r0, #0
    fdb0:	e1a05002 	mov	r5, r2
    fdb4:	1a000011 	bne	fe00 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x64>
    fdb8:	e594700c 	ldr	r7, [r4, #12]
    fdbc:	e5944004 	ldr	r4, [r4, #4]
    fdc0:	e3560000 	cmp	r6, #0
    fdc4:	0a00001a 	beq	fe34 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x98>
    fdc8:	e3550000 	cmp	r5, #0
    fdcc:	e5867000 	str	r7, [r6]
    fdd0:	0a000012 	beq	fe20 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x84>
    fdd4:	e3a03064 	mov	r3, #100	; 0x64
    fdd8:	e59f2068 	ldr	r2, [pc, #104]	; fe48 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xac>
    fddc:	e59f1068 	ldr	r1, [pc, #104]	; fe4c <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb0>
    fde0:	e0820492 	umull	r0, r2, r2, r4
    fde4:	e1a022a2 	lsr	r2, r2, #5
    fde8:	e0030293 	mul	r3, r3, r2
    fdec:	e0443003 	sub	r3, r4, r3
    fdf0:	e0030391 	mul	r3, r1, r3
    fdf4:	e3a00001 	mov	r0, #1
    fdf8:	e5853000 	str	r3, [r5]
    fdfc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    fe00:	eb0006c9 	bl	1192c <EnterCritical>
    fe04:	e5943010 	ldr	r3, [r4, #16]
    fe08:	e594700c 	ldr	r7, [r4, #12]
    fe0c:	e3530000 	cmp	r3, #0
    fe10:	e5944004 	ldr	r4, [r4, #4]
    fe14:	0affffe9 	beq	fdc0 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x24>
    fe18:	eb0006f0 	bl	119e0 <LeaveCritical>
    fe1c:	eaffffe7 	b	fdc0 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x24>
    fe20:	e3a020dd 	mov	r2, #221	; 0xdd
    fe24:	e59f1024 	ldr	r1, [pc, #36]	; fe50 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb4>
    fe28:	e59f0024 	ldr	r0, [pc, #36]	; fe54 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb8>
    fe2c:	ebffe71d 	bl	9aa8 <assertion_failed>
    fe30:	eaffffe7 	b	fdd4 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x38>
    fe34:	e3a020da 	mov	r2, #218	; 0xda
    fe38:	e59f1010 	ldr	r1, [pc, #16]	; fe50 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb4>
    fe3c:	e59f0014 	ldr	r0, [pc, #20]	; fe58 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xbc>
    fe40:	ebffe718 	bl	9aa8 <assertion_failed>
    fe44:	eaffffdf 	b	fdc8 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x2c>
    fe48:	51eb851f 	.word	0x51eb851f
    fe4c:	00002710 	.word	0x00002710
    fe50:	00013d98 	.word	0x00013d98
    fe54:	00013df8 	.word	0x00013df8
    fe58:	00013de8 	.word	0x00013de8

0000fe5c <CTimer::GetUniversalTime() const>:
    fe5c:	e5903014 	ldr	r3, [r0, #20]
    fe60:	e590000c 	ldr	r0, [r0, #12]
    fe64:	e0633203 	rsb	r3, r3, r3, lsl #4
    fe68:	e1a03103 	lsl	r3, r3, #2
    fe6c:	e1530000 	cmp	r3, r0
    fe70:	d0400003 	suble	r0, r0, r3
    fe74:	c3a00000 	movgt	r0, #0
    fe78:	e12fff1e 	bx	lr

0000fe7c <CTimer::GetUniversalTime(unsigned int*, unsigned int*)>:
    fe7c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    fe80:	e1a05000 	mov	r5, r0
    fe84:	e5900010 	ldr	r0, [r0, #16]
    fe88:	e1a09001 	mov	r9, r1
    fe8c:	e3500000 	cmp	r0, #0
    fe90:	e1a07002 	mov	r7, r2
    fe94:	1a000019 	bne	ff00 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x84>
    fe98:	e595600c 	ldr	r6, [r5, #12]
    fe9c:	e5958004 	ldr	r8, [r5, #4]
    fea0:	e5953014 	ldr	r3, [r5, #20]
    fea4:	e0633203 	rsb	r3, r3, r3, lsl #4
    fea8:	e1a04103 	lsl	r4, r3, #2
    feac:	e1540006 	cmp	r4, r6
    feb0:	ca000010 	bgt	fef8 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x7c>
    feb4:	e3590000 	cmp	r9, #0
    feb8:	0a00001d 	beq	ff34 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xb8>
    febc:	e0464004 	sub	r4, r6, r4
    fec0:	e3570000 	cmp	r7, #0
    fec4:	e5894000 	str	r4, [r9]
    fec8:	0a000014 	beq	ff20 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xa4>
    fecc:	e3a03064 	mov	r3, #100	; 0x64
    fed0:	e59f2070 	ldr	r2, [pc, #112]	; ff48 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xcc>
    fed4:	e59f1070 	ldr	r1, [pc, #112]	; ff4c <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd0>
    fed8:	e0820892 	umull	r0, r2, r2, r8
    fedc:	e1a022a2 	lsr	r2, r2, #5
    fee0:	e0030293 	mul	r3, r3, r2
    fee4:	e0483003 	sub	r3, r8, r3
    fee8:	e0030391 	mul	r3, r1, r3
    feec:	e3a00001 	mov	r0, #1
    fef0:	e5873000 	str	r3, [r7]
    fef4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    fef8:	e3a00000 	mov	r0, #0
    fefc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    ff00:	eb000689 	bl	1192c <EnterCritical>
    ff04:	e5953010 	ldr	r3, [r5, #16]
    ff08:	e595600c 	ldr	r6, [r5, #12]
    ff0c:	e3530000 	cmp	r3, #0
    ff10:	e5958004 	ldr	r8, [r5, #4]
    ff14:	0affffe1 	beq	fea0 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x24>
    ff18:	eb0006b0 	bl	119e0 <LeaveCritical>
    ff1c:	eaffffdf 	b	fea0 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x24>
    ff20:	e59f2028 	ldr	r2, [pc, #40]	; ff50 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd4>
    ff24:	e59f1028 	ldr	r1, [pc, #40]	; ff54 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd8>
    ff28:	e59f0028 	ldr	r0, [pc, #40]	; ff58 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xdc>
    ff2c:	ebffe6dd 	bl	9aa8 <assertion_failed>
    ff30:	eaffffe5 	b	fecc <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x50>
    ff34:	e3a020ff 	mov	r2, #255	; 0xff
    ff38:	e59f1014 	ldr	r1, [pc, #20]	; ff54 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd8>
    ff3c:	e59f0018 	ldr	r0, [pc, #24]	; ff5c <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xe0>
    ff40:	ebffe6d8 	bl	9aa8 <assertion_failed>
    ff44:	eaffffdc 	b	febc <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x40>
    ff48:	51eb851f 	.word	0x51eb851f
    ff4c:	00002710 	.word	0x00002710
    ff50:	00000102 	.word	0x00000102
    ff54:	00013d98 	.word	0x00013d98
    ff58:	00013df8 	.word	0x00013df8
    ff5c:	00013de8 	.word	0x00013de8

0000ff60 <CTimer::GetTimeString()>:
    ff60:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ff64:	e1a05000 	mov	r5, r0
    ff68:	e5900010 	ldr	r0, [r0, #16]
    ff6c:	e24dd014 	sub	sp, sp, #20
    ff70:	e3500000 	cmp	r0, #0
    ff74:	1a000065 	bne	10110 <CTimer::GetTimeString()+0x1b0>
    ff78:	e595400c 	ldr	r4, [r5, #12]
    ff7c:	e5959004 	ldr	r9, [r5, #4]
    ff80:	e1940009 	orrs	r0, r4, r9
    ff84:	0a00003e 	beq	10084 <CTimer::GetTimeString()+0x124>
    ff88:	e59f61a0 	ldr	r6, [pc, #416]	; 10130 <CTimer::GetTimeString()+0x1d0>
    ff8c:	e59f81a0 	ldr	r8, [pc, #416]	; 10134 <CTimer::GetTimeString()+0x1d4>
    ff90:	e0873496 	umull	r3, r7, r6, r4
    ff94:	e1a072a7 	lsr	r7, r7, #5
    ff98:	e0863796 	umull	r3, r6, r6, r7
    ff9c:	e59f3194 	ldr	r3, [pc, #404]	; 10138 <CTimer::GetTimeString()+0x1d8>
    ffa0:	e0882498 	umull	r2, r8, r8, r4
    ffa4:	e0832493 	umull	r2, r3, r3, r4
    ffa8:	e1a062a6 	lsr	r6, r6, #5
    ffac:	e0666206 	rsb	r6, r6, r6, lsl #4
    ffb0:	e0672207 	rsb	r2, r7, r7, lsl #4
    ffb4:	e0476106 	sub	r6, r7, r6, lsl #2
    ffb8:	e3a0a064 	mov	sl, #100	; 0x64
    ffbc:	e0447102 	sub	r7, r4, r2, lsl #2
    ffc0:	e3a0be19 	mov	fp, #400	; 0x190
    ffc4:	e59f5170 	ldr	r5, [pc, #368]	; 1013c <CTimer::GetTimeString()+0x1dc>
    ffc8:	e59fe170 	ldr	lr, [pc, #368]	; 10140 <CTimer::GetTimeString()+0x1e0>
    ffcc:	e59fc170 	ldr	ip, [pc, #368]	; 10144 <CTimer::GetTimeString()+0x1e4>
    ffd0:	e59f0170 	ldr	r0, [pc, #368]	; 10148 <CTimer::GetTimeString()+0x1e8>
    ffd4:	e1a085a8 	lsr	r8, r8, #11
    ffd8:	e1a04823 	lsr	r4, r3, #16
    ffdc:	ea00000a 	b	1000c <CTimer::GetTimeString()+0xac>
    ffe0:	e001019b 	mul	r1, fp, r1
    ffe4:	e0451001 	sub	r1, r5, r1
    ffe8:	e16f1f11 	clz	r1, r1
    ffec:	e1a012a1 	lsr	r1, r1, #5
    fff0:	e3510000 	cmp	r1, #0
    fff4:	01a0300c 	moveq	r3, ip
    fff8:	11a03000 	movne	r3, r0
    fffc:	e1540003 	cmp	r4, r3
   10000:	3a000021 	bcc	1008c <CTimer::GetTimeString()+0x12c>
   10004:	e0444003 	sub	r4, r4, r3
   10008:	e2855001 	add	r5, r5, #1
   1000c:	e081359e 	umull	r3, r1, lr, r5
   10010:	e1a032a1 	lsr	r3, r1, #5
   10014:	e003039a 	mul	r3, sl, r3
   10018:	e1550003 	cmp	r5, r3
   1001c:	e1a013a1 	lsr	r1, r1, #7
   10020:	0affffee 	beq	ffe0 <CTimer::GetTimeString()+0x80>
   10024:	e3150003 	tst	r5, #3
   10028:	03a01001 	moveq	r1, #1
   1002c:	13a01000 	movne	r1, #0
   10030:	eaffffee 	b	fff0 <CTimer::GetTimeString()+0x90>
   10034:	e3a03064 	mov	r3, #100	; 0x64
   10038:	e59fb100 	ldr	fp, [pc, #256]	; 10140 <CTimer::GetTimeString()+0x1e0>
   1003c:	e3a00010 	mov	r0, #16
   10040:	e08b299b 	umull	r2, fp, fp, r9
   10044:	e1a0b2ab 	lsr	fp, fp, #5
   10048:	e00b0b93 	mul	fp, r3, fp
   1004c:	eb000690 	bl	11a94 <operator new(unsigned int)>
   10050:	e049b00b 	sub	fp, r9, fp
   10054:	e1a09000 	mov	r9, r0
   10058:	ebfffa79 	bl	ea44 <CString::CString()>
   1005c:	e59f30e8 	ldr	r3, [pc, #232]	; 1014c <CTimer::GetTimeString()+0x1ec>
   10060:	e1550003 	cmp	r5, r3
   10064:	8a000018 	bhi	100cc <CTimer::GetTimeString()+0x16c>
   10068:	e1a00009 	mov	r0, r9
   1006c:	e88d0880 	stm	sp, {r7, fp}
   10070:	e1a03006 	mov	r3, r6
   10074:	e1a02008 	mov	r2, r8
   10078:	e59f10d0 	ldr	r1, [pc, #208]	; 10150 <CTimer::GetTimeString()+0x1f0>
   1007c:	ebfffe5e 	bl	f9fc <CString::Format(char const*, ...)>
   10080:	e1a00009 	mov	r0, r9
   10084:	e28dd014 	add	sp, sp, #20
   10088:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1008c:	e3a0a000 	mov	sl, #0
   10090:	e3a0001d 	mov	r0, #29
   10094:	e59f20b8 	ldr	r2, [pc, #184]	; 10154 <CTimer::GetTimeString()+0x1f4>
   10098:	ea000004 	b	100b0 <CTimer::GetTimeString()+0x150>
   1009c:	e1a03000 	mov	r3, r0
   100a0:	e1540003 	cmp	r4, r3
   100a4:	3affffe2 	bcc	10034 <CTimer::GetTimeString()+0xd4>
   100a8:	e0444003 	sub	r4, r4, r3
   100ac:	e28aa001 	add	sl, sl, #1
   100b0:	e35a0001 	cmp	sl, #1
   100b4:	13a03000 	movne	r3, #0
   100b8:	02013001 	andeq	r3, r1, #1
   100bc:	e3530000 	cmp	r3, #0
   100c0:	1afffff5 	bne	1009c <CTimer::GetTimeString()+0x13c>
   100c4:	e792310a 	ldr	r3, [r2, sl, lsl #2]
   100c8:	eafffff4 	b	100a0 <CTimer::GetTimeString()+0x140>
   100cc:	e59f3084 	ldr	r3, [pc, #132]	; 10158 <CTimer::GetTimeString()+0x1f8>
   100d0:	e58db00c 	str	fp, [sp, #12]
   100d4:	e0832893 	umull	r2, r3, r3, r8
   100d8:	e1a03223 	lsr	r3, r3, #4
   100dc:	e0833083 	add	r3, r3, r3, lsl #1
   100e0:	e59f2074 	ldr	r2, [pc, #116]	; 1015c <CTimer::GetTimeString()+0x1fc>
   100e4:	e0488183 	sub	r8, r8, r3, lsl #3
   100e8:	e792210a 	ldr	r2, [r2, sl, lsl #2]
   100ec:	e1a00009 	mov	r0, r9
   100f0:	e98d00c0 	stmib	sp, {r6, r7}
   100f4:	e2843001 	add	r3, r4, #1
   100f8:	e58d8000 	str	r8, [sp]
   100fc:	e59f105c 	ldr	r1, [pc, #92]	; 10160 <CTimer::GetTimeString()+0x200>
   10100:	ebfffe3d 	bl	f9fc <CString::Format(char const*, ...)>
   10104:	e1a00009 	mov	r0, r9
   10108:	e28dd014 	add	sp, sp, #20
   1010c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10110:	eb000605 	bl	1192c <EnterCritical>
   10114:	e5953010 	ldr	r3, [r5, #16]
   10118:	e595400c 	ldr	r4, [r5, #12]
   1011c:	e3530000 	cmp	r3, #0
   10120:	e5959004 	ldr	r9, [r5, #4]
   10124:	0affff95 	beq	ff80 <CTimer::GetTimeString()+0x20>
   10128:	eb00062c 	bl	119e0 <LeaveCritical>
   1012c:	eaffff93 	b	ff80 <CTimer::GetTimeString()+0x20>
   10130:	88888889 	.word	0x88888889
   10134:	91a2b3c5 	.word	0x91a2b3c5
   10138:	c22e4507 	.word	0xc22e4507
   1013c:	000007b2 	.word	0x000007b2
   10140:	51eb851f 	.word	0x51eb851f
   10144:	0000016d 	.word	0x0000016d
   10148:	0000016e 	.word	0x0000016e
   1014c:	000007b7 	.word	0x000007b7
   10150:	00013e28 	.word	0x00013e28
   10154:	00013d60 	.word	0x00013d60
   10158:	aaaaaaab 	.word	0xaaaaaaab
   1015c:	00015214 	.word	0x00015214
   10160:	00013e0c 	.word	0x00013e0c

00010164 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>:
   10164:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10168:	e1a09000 	mov	r9, r0
   1016c:	e24dd00c 	sub	sp, sp, #12
   10170:	e58d0004 	str	r0, [sp, #4]
   10174:	e1a04002 	mov	r4, r2
   10178:	e3a00014 	mov	r0, #20
   1017c:	e1a06001 	mov	r6, r1
   10180:	e1a07003 	mov	r7, r3
   10184:	e59d5030 	ldr	r5, [sp, #48]	; 0x30
   10188:	eb000641 	bl	11a94 <operator new(unsigned int)>
   1018c:	e5991004 	ldr	r1, [r9, #4]
   10190:	e3540000 	cmp	r4, #0
   10194:	e1a08000 	mov	r8, r0
   10198:	e0816006 	add	r6, r1, r6
   1019c:	0a00003d 	beq	10298 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x134>
   101a0:	e59d3004 	ldr	r3, [sp, #4]
   101a4:	e59f2100 	ldr	r2, [pc, #256]	; 102ac <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x148>
   101a8:	e593001c 	ldr	r0, [r3, #28]
   101ac:	e98800d0 	stmib	r8, {r4, r6, r7}
   101b0:	e3500000 	cmp	r0, #0
   101b4:	e5885010 	str	r5, [r8, #16]
   101b8:	e5882000 	str	r2, [r8]
   101bc:	1a000033 	bne	10290 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x12c>
   101c0:	e59d3004 	ldr	r3, [sp, #4]
   101c4:	e2835018 	add	r5, r3, #24
   101c8:	e1a00005 	mov	r0, r5
   101cc:	eb000a5f 	bl	12b50 <CPtrList::GetFirst()>
   101d0:	e2504000 	subs	r4, r0, #0
   101d4:	0a000028 	beq	1027c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x118>
   101d8:	e59f90d0 	ldr	r9, [pc, #208]	; 102b0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x14c>
   101dc:	e59f70c8 	ldr	r7, [pc, #200]	; 102ac <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x148>
   101e0:	e59fb0cc 	ldr	fp, [pc, #204]	; 102b4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x150>
   101e4:	ea000010 	b	1022c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xc8>
   101e8:	e59a3000 	ldr	r3, [sl]
   101ec:	e1530007 	cmp	r3, r7
   101f0:	0a000003 	beq	10204 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xa0>
   101f4:	e1a0200b 	mov	r2, fp
   101f8:	e1a01009 	mov	r1, r9
   101fc:	e59f00b4 	ldr	r0, [pc, #180]	; 102b8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x154>
   10200:	ebffe628 	bl	9aa8 <assertion_failed>
   10204:	e59a3008 	ldr	r3, [sl, #8]
   10208:	e1a01004 	mov	r1, r4
   1020c:	e0433006 	sub	r3, r3, r6
   10210:	e3530000 	cmp	r3, #0
   10214:	e1a00005 	mov	r0, r5
   10218:	ca00000d 	bgt	10254 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xf0>
   1021c:	eb000a4d 	bl	12b58 <CPtrList::GetNext(TPtrListElement*)>
   10220:	e3500000 	cmp	r0, #0
   10224:	0a000014 	beq	1027c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x118>
   10228:	e1a04000 	mov	r4, r0
   1022c:	e1a01004 	mov	r1, r4
   10230:	e1a00005 	mov	r0, r5
   10234:	eb000a5d 	bl	12bb0 <CPtrList::GetPtr(TPtrListElement*)>
   10238:	e250a000 	subs	sl, r0, #0
   1023c:	1affffe9 	bne	101e8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x84>
   10240:	e59f2074 	ldr	r2, [pc, #116]	; 102bc <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x158>
   10244:	e1a01009 	mov	r1, r9
   10248:	e59f0070 	ldr	r0, [pc, #112]	; 102c0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x15c>
   1024c:	ebffe615 	bl	9aa8 <assertion_failed>
   10250:	eaffffe4 	b	101e8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x84>
   10254:	e1a02008 	mov	r2, r8
   10258:	eb000a6a 	bl	12c08 <CPtrList::InsertBefore(TPtrListElement*, void*)>
   1025c:	e59d3004 	ldr	r3, [sp, #4]
   10260:	e593301c 	ldr	r3, [r3, #28]
   10264:	e3530000 	cmp	r3, #0
   10268:	0a000000 	beq	10270 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x10c>
   1026c:	eb0005db 	bl	119e0 <LeaveCritical>
   10270:	e1a00008 	mov	r0, r8
   10274:	e28dd00c 	add	sp, sp, #12
   10278:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1027c:	e1a01004 	mov	r1, r4
   10280:	e1a00005 	mov	r0, r5
   10284:	e1a02008 	mov	r2, r8
   10288:	eb000a9f 	bl	12d0c <CPtrList::InsertAfter(TPtrListElement*, void*)>
   1028c:	eafffff2 	b	1025c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xf8>
   10290:	eb0005a5 	bl	1192c <EnterCritical>
   10294:	eaffffc9 	b	101c0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x5c>
   10298:	e59f2024 	ldr	r2, [pc, #36]	; 102c4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x160>
   1029c:	e59f100c 	ldr	r1, [pc, #12]	; 102b0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x14c>
   102a0:	e59f0020 	ldr	r0, [pc, #32]	; 102c8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x164>
   102a4:	ebffe5ff 	bl	9aa8 <assertion_failed>
   102a8:	eaffffbc 	b	101a0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x3c>
   102ac:	4b544d43 	.word	0x4b544d43
   102b0:	00013d98 	.word	0x00013d98
   102b4:	0000016a 	.word	0x0000016a
   102b8:	00013e4c 	.word	0x00013e4c
   102bc:	00000169 	.word	0x00000169
   102c0:	00013e3c 	.word	0x00013e3c
   102c4:	00000159 	.word	0x00000159
   102c8:	00013874 	.word	0x00013874

000102cc <CTimer::CancelKernelTimer(unsigned int)>:
   102cc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   102d0:	e2514000 	subs	r4, r1, #0
   102d4:	e1a05000 	mov	r5, r0
   102d8:	0a00001f 	beq	1035c <CTimer::CancelKernelTimer(unsigned int)+0x90>
   102dc:	e595001c 	ldr	r0, [r5, #28]
   102e0:	e3500000 	cmp	r0, #0
   102e4:	1a00001a 	bne	10354 <CTimer::CancelKernelTimer(unsigned int)+0x88>
   102e8:	e2856018 	add	r6, r5, #24
   102ec:	e1a00006 	mov	r0, r6
   102f0:	e1a01004 	mov	r1, r4
   102f4:	eb000b15 	bl	12f50 <CPtrList::Find(void*)>
   102f8:	e2507000 	subs	r7, r0, #0
   102fc:	0a00000f 	beq	10340 <CTimer::CancelKernelTimer(unsigned int)+0x74>
   10300:	e59f3068 	ldr	r3, [pc, #104]	; 10370 <CTimer::CancelKernelTimer(unsigned int)+0xa4>
   10304:	e5942000 	ldr	r2, [r4]
   10308:	e1520003 	cmp	r2, r3
   1030c:	0a000003 	beq	10320 <CTimer::CancelKernelTimer(unsigned int)+0x54>
   10310:	e59f205c 	ldr	r2, [pc, #92]	; 10374 <CTimer::CancelKernelTimer(unsigned int)+0xa8>
   10314:	e59f105c 	ldr	r1, [pc, #92]	; 10378 <CTimer::CancelKernelTimer(unsigned int)+0xac>
   10318:	e59f005c 	ldr	r0, [pc, #92]	; 1037c <CTimer::CancelKernelTimer(unsigned int)+0xb0>
   1031c:	ebffe5e1 	bl	9aa8 <assertion_failed>
   10320:	e1a01007 	mov	r1, r7
   10324:	e1a00006 	mov	r0, r6
   10328:	eb000ab5 	bl	12e04 <CPtrList::Remove(TPtrListElement*)>
   1032c:	e3a03000 	mov	r3, #0
   10330:	e1a00004 	mov	r0, r4
   10334:	e5843000 	str	r3, [r4]
   10338:	e3a01014 	mov	r1, #20
   1033c:	eb0005d8 	bl	11aa4 <operator delete(void*, unsigned int)>
   10340:	e595301c 	ldr	r3, [r5, #28]
   10344:	e3530000 	cmp	r3, #0
   10348:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   1034c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   10350:	ea0005a2 	b	119e0 <LeaveCritical>
   10354:	eb000574 	bl	1192c <EnterCritical>
   10358:	eaffffe2 	b	102e8 <CTimer::CancelKernelTimer(unsigned int)+0x1c>
   1035c:	e59f201c 	ldr	r2, [pc, #28]	; 10380 <CTimer::CancelKernelTimer(unsigned int)+0xb4>
   10360:	e59f1010 	ldr	r1, [pc, #16]	; 10378 <CTimer::CancelKernelTimer(unsigned int)+0xac>
   10364:	e59f0018 	ldr	r0, [pc, #24]	; 10384 <CTimer::CancelKernelTimer(unsigned int)+0xb8>
   10368:	ebffe5ce 	bl	9aa8 <assertion_failed>
   1036c:	eaffffda 	b	102dc <CTimer::CancelKernelTimer(unsigned int)+0x10>
   10370:	4b544d43 	.word	0x4b544d43
   10374:	0000018d 	.word	0x0000018d
   10378:	00013d98 	.word	0x00013d98
   1037c:	00013dc0 	.word	0x00013dc0
   10380:	00000186 	.word	0x00000186
   10384:	00013db4 	.word	0x00013db4

00010388 <CTimer::PollKernelTimers()>:
   10388:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1038c:	e1a05000 	mov	r5, r0
   10390:	e590001c 	ldr	r0, [r0, #28]
   10394:	e3500000 	cmp	r0, #0
   10398:	1a00004a 	bne	104c8 <CTimer::PollKernelTimers()+0x140>
   1039c:	e2856018 	add	r6, r5, #24
   103a0:	e1a00006 	mov	r0, r6
   103a4:	eb0009e9 	bl	12b50 <CPtrList::GetFirst()>
   103a8:	e2504000 	subs	r4, r0, #0
   103ac:	0a00003b 	beq	104a0 <CTimer::PollKernelTimers()+0x118>
   103b0:	e59f9118 	ldr	r9, [pc, #280]	; 104d0 <CTimer::PollKernelTimers()+0x148>
   103b4:	e59f8118 	ldr	r8, [pc, #280]	; 104d4 <CTimer::PollKernelTimers()+0x14c>
   103b8:	e59fa118 	ldr	sl, [pc, #280]	; 104d8 <CTimer::PollKernelTimers()+0x150>
   103bc:	ea000010 	b	10404 <CTimer::PollKernelTimers()+0x7c>
   103c0:	e5974004 	ldr	r4, [r7, #4]
   103c4:	e3540000 	cmp	r4, #0
   103c8:	0a00002c 	beq	10480 <CTimer::PollKernelTimers()+0xf8>
   103cc:	e5972010 	ldr	r2, [r7, #16]
   103d0:	e597100c 	ldr	r1, [r7, #12]
   103d4:	e1a00007 	mov	r0, r7
   103d8:	e12fff34 	blx	r4
   103dc:	e3a03000 	mov	r3, #0
   103e0:	e1a00007 	mov	r0, r7
   103e4:	e5873000 	str	r3, [r7]
   103e8:	e3a01014 	mov	r1, #20
   103ec:	eb0005ac 	bl	11aa4 <operator delete(void*, unsigned int)>
   103f0:	e595001c 	ldr	r0, [r5, #28]
   103f4:	e3500000 	cmp	r0, #0
   103f8:	1a000025 	bne	10494 <CTimer::PollKernelTimers()+0x10c>
   103fc:	e25b4000 	subs	r4, fp, #0
   10400:	0a000026 	beq	104a0 <CTimer::PollKernelTimers()+0x118>
   10404:	e1a01004 	mov	r1, r4
   10408:	e1a00006 	mov	r0, r6
   1040c:	eb0009e7 	bl	12bb0 <CPtrList::GetPtr(TPtrListElement*)>
   10410:	e2507000 	subs	r7, r0, #0
   10414:	0a000026 	beq	104b4 <CTimer::PollKernelTimers()+0x12c>
   10418:	e5973000 	ldr	r3, [r7]
   1041c:	e1530008 	cmp	r3, r8
   10420:	0a000003 	beq	10434 <CTimer::PollKernelTimers()+0xac>
   10424:	e59f20b0 	ldr	r2, [pc, #176]	; 104dc <CTimer::PollKernelTimers()+0x154>
   10428:	e1a01009 	mov	r1, r9
   1042c:	e1a0000a 	mov	r0, sl
   10430:	ebffe59c 	bl	9aa8 <assertion_failed>
   10434:	e5952004 	ldr	r2, [r5, #4]
   10438:	e5973008 	ldr	r3, [r7, #8]
   1043c:	e0433002 	sub	r3, r3, r2
   10440:	e3530000 	cmp	r3, #0
   10444:	ca000015 	bgt	104a0 <CTimer::PollKernelTimers()+0x118>
   10448:	e1a01004 	mov	r1, r4
   1044c:	e1a00006 	mov	r0, r6
   10450:	eb0009c0 	bl	12b58 <CPtrList::GetNext(TPtrListElement*)>
   10454:	e1a01004 	mov	r1, r4
   10458:	e1a0b000 	mov	fp, r0
   1045c:	e1a00006 	mov	r0, r6
   10460:	eb000a67 	bl	12e04 <CPtrList::Remove(TPtrListElement*)>
   10464:	e595301c 	ldr	r3, [r5, #28]
   10468:	e3530000 	cmp	r3, #0
   1046c:	0affffd3 	beq	103c0 <CTimer::PollKernelTimers()+0x38>
   10470:	eb00055a 	bl	119e0 <LeaveCritical>
   10474:	e5974004 	ldr	r4, [r7, #4]
   10478:	e3540000 	cmp	r4, #0
   1047c:	1affffd2 	bne	103cc <CTimer::PollKernelTimers()+0x44>
   10480:	e59f2058 	ldr	r2, [pc, #88]	; 104e0 <CTimer::PollKernelTimers()+0x158>
   10484:	e1a01009 	mov	r1, r9
   10488:	e59f0054 	ldr	r0, [pc, #84]	; 104e4 <CTimer::PollKernelTimers()+0x15c>
   1048c:	ebffe585 	bl	9aa8 <assertion_failed>
   10490:	eaffffcd 	b	103cc <CTimer::PollKernelTimers()+0x44>
   10494:	eb000524 	bl	1192c <EnterCritical>
   10498:	e25b4000 	subs	r4, fp, #0
   1049c:	1affffd8 	bne	10404 <CTimer::PollKernelTimers()+0x7c>
   104a0:	e595301c 	ldr	r3, [r5, #28]
   104a4:	e3530000 	cmp	r3, #0
   104a8:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   104ac:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   104b0:	ea00054a 	b	119e0 <LeaveCritical>
   104b4:	e59f202c 	ldr	r2, [pc, #44]	; 104e8 <CTimer::PollKernelTimers()+0x160>
   104b8:	e1a01009 	mov	r1, r9
   104bc:	e59f0028 	ldr	r0, [pc, #40]	; 104ec <CTimer::PollKernelTimers()+0x164>
   104c0:	ebffe578 	bl	9aa8 <assertion_failed>
   104c4:	eaffffd3 	b	10418 <CTimer::PollKernelTimers()+0x90>
   104c8:	eb000517 	bl	1192c <EnterCritical>
   104cc:	eaffffb2 	b	1039c <CTimer::PollKernelTimers()+0x14>
   104d0:	00013d98 	.word	0x00013d98
   104d4:	4b544d43 	.word	0x4b544d43
   104d8:	00013dc0 	.word	0x00013dc0
   104dc:	000001a3 	.word	0x000001a3
   104e0:	000001b1 	.word	0x000001b1
   104e4:	00013874 	.word	0x00013874
   104e8:	000001a2 	.word	0x000001a2
   104ec:	00013db4 	.word	0x00013db4

000104f0 <CTimer::InterruptHandler()>:
   104f0:	e92d4010 	push	{r4, lr}
   104f4:	e3a03000 	mov	r3, #0
   104f8:	e1a04000 	mov	r4, r0
   104fc:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   10500:	e59f20e4 	ldr	r2, [pc, #228]	; 105ec <CTimer::InterruptHandler()+0xfc>
   10504:	e5923018 	ldr	r3, [r2, #24]
   10508:	e2833c27 	add	r3, r3, #9984	; 0x2700
   1050c:	e2833010 	add	r3, r3, #16
   10510:	e5823018 	str	r3, [r2, #24]
   10514:	e5921004 	ldr	r1, [r2, #4]
   10518:	e1530001 	cmp	r3, r1
   1051c:	e3a01008 	mov	r1, #8
   10520:	35923004 	ldrcc	r3, [r2, #4]
   10524:	32833c27 	addcc	r3, r3, #9984	; 0x2700
   10528:	32833010 	addcc	r3, r3, #16
   1052c:	35823018 	strcc	r3, [r2, #24]
   10530:	e59f20b4 	ldr	r2, [pc, #180]	; 105ec <CTimer::InterruptHandler()+0xfc>
   10534:	e3a03000 	mov	r3, #0
   10538:	e5821000 	str	r1, [r2]
   1053c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   10540:	e5900010 	ldr	r0, [r0, #16]
   10544:	e1500003 	cmp	r0, r3
   10548:	1a00001a 	bne	105b8 <CTimer::InterruptHandler()+0xc8>
   1054c:	e3a01064 	mov	r1, #100	; 0x64
   10550:	e5942004 	ldr	r2, [r4, #4]
   10554:	e59f3094 	ldr	r3, [pc, #148]	; 105f0 <CTimer::InterruptHandler()+0x100>
   10558:	e2822001 	add	r2, r2, #1
   1055c:	e0830293 	umull	r0, r3, r3, r2
   10560:	e1a032a3 	lsr	r3, r3, #5
   10564:	e0030391 	mul	r3, r1, r3
   10568:	e0523003 	subs	r3, r2, r3
   1056c:	e5842004 	str	r2, [r4, #4]
   10570:	1a000007 	bne	10594 <CTimer::InterruptHandler()+0xa4>
   10574:	e5942008 	ldr	r2, [r4, #8]
   10578:	e2822001 	add	r2, r2, #1
   1057c:	e5842008 	str	r2, [r4, #8]
   10580:	e594200c 	ldr	r2, [r4, #12]
   10584:	e2822001 	add	r2, r2, #1
   10588:	e584200c 	str	r2, [r4, #12]
   1058c:	e3530000 	cmp	r3, #0
   10590:	1a000006 	bne	105b0 <CTimer::InterruptHandler()+0xc0>
   10594:	e1a00004 	mov	r0, r4
   10598:	ebffff7a 	bl	10388 <CTimer::PollKernelTimers()>
   1059c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   105a0:	e3530000 	cmp	r3, #0
   105a4:	08bd8010 	popeq	{r4, pc}
   105a8:	e8bd4010 	pop	{r4, lr}
   105ac:	e12fff13 	bx	r3
   105b0:	eb00050a 	bl	119e0 <LeaveCritical>
   105b4:	eafffff6 	b	10594 <CTimer::InterruptHandler()+0xa4>
   105b8:	eb0004db 	bl	1192c <EnterCritical>
   105bc:	e3a01064 	mov	r1, #100	; 0x64
   105c0:	e5943004 	ldr	r3, [r4, #4]
   105c4:	e59f2024 	ldr	r2, [pc, #36]	; 105f0 <CTimer::InterruptHandler()+0x100>
   105c8:	e2833001 	add	r3, r3, #1
   105cc:	e0820392 	umull	r0, r2, r2, r3
   105d0:	e1a022a2 	lsr	r2, r2, #5
   105d4:	e0020291 	mul	r2, r1, r2
   105d8:	e1530002 	cmp	r3, r2
   105dc:	e5843004 	str	r3, [r4, #4]
   105e0:	e5943010 	ldr	r3, [r4, #16]
   105e4:	1affffe8 	bne	1058c <CTimer::InterruptHandler()+0x9c>
   105e8:	eaffffe1 	b	10574 <CTimer::InterruptHandler()+0x84>
   105ec:	20003000 	.word	0x20003000
   105f0:	51eb851f 	.word	0x51eb851f

000105f4 <CTimer::InterruptHandler(void*)>:
   105f4:	e92d4010 	push	{r4, lr}
   105f8:	e2504000 	subs	r4, r0, #0
   105fc:	0a000002 	beq	1060c <CTimer::InterruptHandler(void*)+0x18>
   10600:	e1a00004 	mov	r0, r4
   10604:	e8bd4010 	pop	{r4, lr}
   10608:	eaffffb8 	b	104f0 <CTimer::InterruptHandler()>
   1060c:	e59f0014 	ldr	r0, [pc, #20]	; 10628 <CTimer::InterruptHandler(void*)+0x34>
   10610:	e59f2014 	ldr	r2, [pc, #20]	; 1062c <CTimer::InterruptHandler(void*)+0x38>
   10614:	e59f1014 	ldr	r1, [pc, #20]	; 10630 <CTimer::InterruptHandler(void*)+0x3c>
   10618:	ebffe522 	bl	9aa8 <assertion_failed>
   1061c:	e1a00004 	mov	r0, r4
   10620:	e8bd4010 	pop	{r4, lr}
   10624:	eaffffb1 	b	104f0 <CTimer::InterruptHandler()>
   10628:	0001312c 	.word	0x0001312c
   1062c:	000001ea 	.word	0x000001ea
   10630:	00013d98 	.word	0x00013d98

00010634 <CTimer::TuneMsDelay()>:
   10634:	e92d4070 	push	{r4, r5, r6, lr}
   10638:	e1a05000 	mov	r5, r0
   1063c:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   10640:	e5953020 	ldr	r3, [r5, #32]
   10644:	e24dd008 	sub	sp, sp, #8
   10648:	e0000390 	mul	r0, r0, r3
   1064c:	e5954004 	ldr	r4, [r5, #4]
   10650:	eb00084a 	bl	12780 <DelayLoop>
   10654:	e5951004 	ldr	r1, [r5, #4]
   10658:	e59f0068 	ldr	r0, [pc, #104]	; 106c8 <CTimer::TuneMsDelay()+0x94>
   1065c:	e0411004 	sub	r1, r1, r4
   10660:	ebffe439 	bl	974c <__udivsi3>
   10664:	e5953020 	ldr	r3, [r5, #32]
   10668:	e59f405c 	ldr	r4, [pc, #92]	; 106cc <CTimer::TuneMsDelay()+0x98>
   1066c:	e0030093 	mul	r3, r3, r0
   10670:	e0832394 	umull	r2, r3, r4, r3
   10674:	e59f1054 	ldr	r1, [pc, #84]	; 106d0 <CTimer::TuneMsDelay()+0x9c>
   10678:	e1a032a3 	lsr	r3, r3, #5
   1067c:	e2832f7d 	add	r2, r3, #500	; 0x1f4
   10680:	e0821291 	umull	r1, r2, r1, r2
   10684:	e1a06000 	mov	r6, r0
   10688:	e1a02322 	lsr	r2, r2, #6
   1068c:	e5852024 	str	r2, [r5, #36]	; 0x24
   10690:	e5853020 	str	r3, [r5, #32]
   10694:	ebffee2c 	bl	bf4c <CLogger::Get()>
   10698:	e3a03064 	mov	r3, #100	; 0x64
   1069c:	e0842694 	umull	r2, r4, r4, r6
   106a0:	e1a042a4 	lsr	r4, r4, #5
   106a4:	e0030493 	mul	r3, r3, r4
   106a8:	e0466003 	sub	r6, r6, r3
   106ac:	e88d0050 	stm	sp, {r4, r6}
   106b0:	e59f301c 	ldr	r3, [pc, #28]	; 106d4 <CTimer::TuneMsDelay()+0xa0>
   106b4:	e3a02003 	mov	r2, #3
   106b8:	e59f1018 	ldr	r1, [pc, #24]	; 106d8 <CTimer::TuneMsDelay()+0xa4>
   106bc:	ebffefcb 	bl	c5f0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   106c0:	e28dd008 	add	sp, sp, #8
   106c4:	e8bd8070 	pop	{r4, r5, r6, pc}
   106c8:	00002710 	.word	0x00002710
   106cc:	51eb851f 	.word	0x51eb851f
   106d0:	10624dd3 	.word	0x10624dd3
   106d4:	00013e74 	.word	0x00013e74
   106d8:	00013d90 	.word	0x00013d90

000106dc <CTimer::Initialize()>:
   106dc:	e92d4070 	push	{r4, r5, r6, lr}
   106e0:	e1a04000 	mov	r4, r0
   106e4:	e5900000 	ldr	r0, [r0]
   106e8:	e3500000 	cmp	r0, #0
   106ec:	0a000011 	beq	10738 <CTimer::Initialize()+0x5c>
   106f0:	e1a03004 	mov	r3, r4
   106f4:	e59f2054 	ldr	r2, [pc, #84]	; 10750 <CTimer::Initialize()+0x74>
   106f8:	e3a01003 	mov	r1, #3
   106fc:	ebffeb79 	bl	b4e8 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   10700:	e3a05000 	mov	r5, #0
   10704:	ee075f9a 	mcr	15, 0, r5, cr7, cr10, {4}
   10708:	e59f2044 	ldr	r2, [pc, #68]	; 10754 <CTimer::Initialize()+0x78>
   1070c:	e59f3044 	ldr	r3, [pc, #68]	; 10758 <CTimer::Initialize()+0x7c>
   10710:	e1a00004 	mov	r0, r4
   10714:	e5823004 	str	r3, [r2, #4]
   10718:	e5923004 	ldr	r3, [r2, #4]
   1071c:	e2833c27 	add	r3, r3, #9984	; 0x2700
   10720:	e2833010 	add	r3, r3, #16
   10724:	e5823018 	str	r3, [r2, #24]
   10728:	ebffffc1 	bl	10634 <CTimer::TuneMsDelay()>
   1072c:	ee075fba 	mcr	15, 0, r5, cr7, cr10, {5}
   10730:	e3a00001 	mov	r0, #1
   10734:	e8bd8070 	pop	{r4, r5, r6, pc}
   10738:	e59f001c 	ldr	r0, [pc, #28]	; 1075c <CTimer::Initialize()+0x80>
   1073c:	e3a02057 	mov	r2, #87	; 0x57
   10740:	e59f1018 	ldr	r1, [pc, #24]	; 10760 <CTimer::Initialize()+0x84>
   10744:	ebffe4d7 	bl	9aa8 <assertion_failed>
   10748:	e5940000 	ldr	r0, [r4]
   1074c:	eaffffe7 	b	106f0 <CTimer::Initialize()+0x14>
   10750:	000105f4 	.word	0x000105f4
   10754:	20003000 	.word	0x20003000
   10758:	fe363c80 	.word	0xfe363c80
   1075c:	000130e8 	.word	0x000130e8
   10760:	00013d98 	.word	0x00013d98

00010764 <CTimer::RegisterPeriodicHandler(void (*)())>:
   10764:	e5903028 	ldr	r3, [r0, #40]	; 0x28
   10768:	e92d4070 	push	{r4, r5, r6, lr}
   1076c:	e3530000 	cmp	r3, #0
   10770:	e1a04000 	mov	r4, r0
   10774:	e1a05001 	mov	r5, r1
   10778:	0a000003 	beq	1078c <CTimer::RegisterPeriodicHandler(void (*)())+0x28>
   1077c:	e3a02c02 	mov	r2, #512	; 0x200
   10780:	e59f1024 	ldr	r1, [pc, #36]	; 107ac <CTimer::RegisterPeriodicHandler(void (*)())+0x48>
   10784:	e59f0024 	ldr	r0, [pc, #36]	; 107b0 <CTimer::RegisterPeriodicHandler(void (*)())+0x4c>
   10788:	ebffe4c6 	bl	9aa8 <assertion_failed>
   1078c:	e3550000 	cmp	r5, #0
   10790:	e5845028 	str	r5, [r4, #40]	; 0x28
   10794:	18bd8070 	popne	{r4, r5, r6, pc}
   10798:	e59f2014 	ldr	r2, [pc, #20]	; 107b4 <CTimer::RegisterPeriodicHandler(void (*)())+0x50>
   1079c:	e59f1008 	ldr	r1, [pc, #8]	; 107ac <CTimer::RegisterPeriodicHandler(void (*)())+0x48>
   107a0:	e59f0010 	ldr	r0, [pc, #16]	; 107b8 <CTimer::RegisterPeriodicHandler(void (*)())+0x54>
   107a4:	e8bd4070 	pop	{r4, r5, r6, lr}
   107a8:	eaffe4be 	b	9aa8 <assertion_failed>
   107ac:	00013d98 	.word	0x00013d98
   107b0:	00013e8c 	.word	0x00013e8c
   107b4:	00000202 	.word	0x00000202
   107b8:	00013ea4 	.word	0x00013ea4

000107bc <CTimer::SimpleMsDelay(unsigned int)>:
   107bc:	e3500000 	cmp	r0, #0
   107c0:	012fff1e 	bxeq	lr
   107c4:	e3a03ffa 	mov	r3, #1000	; 0x3e8
   107c8:	e0000093 	mul	r0, r3, r0
   107cc:	e3500000 	cmp	r0, #0
   107d0:	012fff1e 	bxeq	lr
   107d4:	eafffccf 	b	fb18 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]>

000107d8 <CTimer::SimpleusDelay(unsigned int)>:
   107d8:	e3500000 	cmp	r0, #0
   107dc:	012fff1e 	bxeq	lr
   107e0:	eafffccc 	b	fb18 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]>

000107e4 <CTimer::IsLeapYear(unsigned int)>:
   107e4:	e3a02064 	mov	r2, #100	; 0x64
   107e8:	e59f303c 	ldr	r3, [pc, #60]	; 1082c <CTimer::IsLeapYear(unsigned int)+0x48>
   107ec:	e0831093 	umull	r1, r3, r3, r0
   107f0:	e1a012a3 	lsr	r1, r3, #5
   107f4:	e0020192 	mul	r2, r2, r1
   107f8:	e1500002 	cmp	r0, r2
   107fc:	0a000003 	beq	10810 <CTimer::IsLeapYear(unsigned int)+0x2c>
   10800:	e3100003 	tst	r0, #3
   10804:	03a00001 	moveq	r0, #1
   10808:	13a00000 	movne	r0, #0
   1080c:	e12fff1e 	bx	lr
   10810:	e3a02e19 	mov	r2, #400	; 0x190
   10814:	e1a033a3 	lsr	r3, r3, #7
   10818:	e0030392 	mul	r3, r2, r3
   1081c:	e0400003 	sub	r0, r0, r3
   10820:	e16f0f10 	clz	r0, r0
   10824:	e1a002a0 	lsr	r0, r0, #5
   10828:	e12fff1e 	bx	lr
   1082c:	51eb851f 	.word	0x51eb851f

00010830 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)>:
   10830:	e3500001 	cmp	r0, #1
   10834:	0a000002 	beq	10844 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x14>
   10838:	e59f3058 	ldr	r3, [pc, #88]	; 10898 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x68>
   1083c:	e7930100 	ldr	r0, [r3, r0, lsl #2]
   10840:	e12fff1e 	bx	lr
   10844:	e3a02064 	mov	r2, #100	; 0x64
   10848:	e59f304c 	ldr	r3, [pc, #76]	; 1089c <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x6c>
   1084c:	e083c193 	umull	ip, r3, r3, r1
   10850:	e1a0c2a3 	lsr	ip, r3, #5
   10854:	e0020c92 	mul	r2, r2, ip
   10858:	e1510002 	cmp	r1, r2
   1085c:	0a000006 	beq	1087c <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x4c>
   10860:	e3110003 	tst	r1, #3
   10864:	03a01001 	moveq	r1, #1
   10868:	13a01000 	movne	r1, #0
   1086c:	e3510000 	cmp	r1, #0
   10870:	0afffff0 	beq	10838 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x8>
   10874:	e3a0001d 	mov	r0, #29
   10878:	e12fff1e 	bx	lr
   1087c:	e3a02e19 	mov	r2, #400	; 0x190
   10880:	e1a033a3 	lsr	r3, r3, #7
   10884:	e0030392 	mul	r3, r2, r3
   10888:	e0411003 	sub	r1, r1, r3
   1088c:	e16f1f11 	clz	r1, r1
   10890:	e1a012a1 	lsr	r1, r1, #5
   10894:	eafffff4 	b	1086c <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x3c>
   10898:	00013d60 	.word	0x00013d60
   1089c:	51eb851f 	.word	0x51eb851f

000108a0 <CTimer::Get()>:
   108a0:	e92d4010 	push	{r4, lr}
   108a4:	e59f4020 	ldr	r4, [pc, #32]	; 108cc <CTimer::Get()+0x2c>
   108a8:	e5940000 	ldr	r0, [r4]
   108ac:	e3500000 	cmp	r0, #0
   108b0:	18bd8010 	popne	{r4, pc}
   108b4:	e59f2014 	ldr	r2, [pc, #20]	; 108d0 <CTimer::Get()+0x30>
   108b8:	e59f1014 	ldr	r1, [pc, #20]	; 108d4 <CTimer::Get()+0x34>
   108bc:	e59f0014 	ldr	r0, [pc, #20]	; 108d8 <CTimer::Get()+0x38>
   108c0:	ebffe478 	bl	9aa8 <assertion_failed>
   108c4:	e5940000 	ldr	r0, [r4]
   108c8:	e8bd8010 	pop	{r4, pc}
   108cc:	00015350 	.word	0x00015350
   108d0:	0000023e 	.word	0x0000023e
   108d4:	00013d98 	.word	0x00013d98
   108d8:	000138fc 	.word	0x000138fc

000108dc <memset>:
   108dc:	e3520000 	cmp	r2, #0
   108e0:	012fff1e 	bxeq	lr
   108e4:	e1a03000 	mov	r3, r0
   108e8:	e6af1071 	sxtb	r1, r1
   108ec:	e0802002 	add	r2, r0, r2
   108f0:	e4c31001 	strb	r1, [r3], #1
   108f4:	e1530002 	cmp	r3, r2
   108f8:	1afffffc 	bne	108f0 <memset+0x14>
   108fc:	e12fff1e 	bx	lr

00010900 <memcmp>:
   10900:	e3520000 	cmp	r2, #0
   10904:	0a00000e 	beq	10944 <memcmp+0x44>
   10908:	e5d0c000 	ldrb	ip, [r0]
   1090c:	e5d13000 	ldrb	r3, [r1]
   10910:	e15c0003 	cmp	ip, r3
   10914:	ca00000c 	bgt	1094c <memcmp+0x4c>
   10918:	ba00000d 	blt	10954 <memcmp+0x54>
   1091c:	e0812002 	add	r2, r1, r2
   10920:	e2811001 	add	r1, r1, #1
   10924:	ea000004 	b	1093c <memcmp+0x3c>
   10928:	e5f0c001 	ldrb	ip, [r0, #1]!
   1092c:	e4d13001 	ldrb	r3, [r1], #1
   10930:	e15c0003 	cmp	ip, r3
   10934:	ca000004 	bgt	1094c <memcmp+0x4c>
   10938:	ba000005 	blt	10954 <memcmp+0x54>
   1093c:	e1510002 	cmp	r1, r2
   10940:	1afffff8 	bne	10928 <memcmp+0x28>
   10944:	e3a00000 	mov	r0, #0
   10948:	e12fff1e 	bx	lr
   1094c:	e3a00001 	mov	r0, #1
   10950:	e12fff1e 	bx	lr
   10954:	e3e00000 	mvn	r0, #0
   10958:	e12fff1e 	bx	lr

0001095c <strlen>:
   1095c:	e1d010d0 	ldrsb	r1, [r0]
   10960:	e2803001 	add	r3, r0, #1
   10964:	e3510000 	cmp	r1, #0
   10968:	0a000003 	beq	1097c <strlen+0x20>
   1096c:	e0431000 	sub	r1, r3, r0
   10970:	e0d320d1 	ldrsb	r2, [r3], #1
   10974:	e3520000 	cmp	r2, #0
   10978:	1afffffb 	bne	1096c <strlen+0x10>
   1097c:	e1a00001 	mov	r0, r1
   10980:	e12fff1e 	bx	lr

00010984 <strcmp>:
   10984:	e1d030d0 	ldrsb	r3, [r0]
   10988:	e1d120d0 	ldrsb	r2, [r1]
   1098c:	e3530000 	cmp	r3, #0
   10990:	1a000007 	bne	109b4 <strcmp+0x30>
   10994:	ea000008 	b	109bc <strcmp+0x38>
   10998:	e1530002 	cmp	r3, r2
   1099c:	ca00000b 	bgt	109d0 <strcmp+0x4c>
   109a0:	ba00000c 	blt	109d8 <strcmp+0x54>
   109a4:	e1f030d1 	ldrsb	r3, [r0, #1]!
   109a8:	e3530000 	cmp	r3, #0
   109ac:	0a00000b 	beq	109e0 <strcmp+0x5c>
   109b0:	e1f120d1 	ldrsb	r2, [r1, #1]!
   109b4:	e3520000 	cmp	r2, #0
   109b8:	1afffff6 	bne	10998 <strcmp+0x14>
   109bc:	e1530002 	cmp	r3, r2
   109c0:	ca000002 	bgt	109d0 <strcmp+0x4c>
   109c4:	b3e00000 	mvnlt	r0, #0
   109c8:	a3a00000 	movge	r0, #0
   109cc:	e12fff1e 	bx	lr
   109d0:	e3a00001 	mov	r0, #1
   109d4:	e12fff1e 	bx	lr
   109d8:	e3e00000 	mvn	r0, #0
   109dc:	e12fff1e 	bx	lr
   109e0:	e1d120d1 	ldrsb	r2, [r1, #1]
   109e4:	e1530002 	cmp	r3, r2
   109e8:	dafffff5 	ble	109c4 <strcmp+0x40>
   109ec:	eafffff7 	b	109d0 <strcmp+0x4c>

000109f0 <strcasecmp>:
   109f0:	e2400001 	sub	r0, r0, #1
   109f4:	e1f030d1 	ldrsb	r3, [r0, #1]!
   109f8:	e2432061 	sub	r2, r3, #97	; 0x61
   109fc:	e3520019 	cmp	r2, #25
   10a00:	92433020 	subls	r3, r3, #32
   10a04:	e3530000 	cmp	r3, #0
   10a08:	0a00001f 	beq	10a8c <strcasecmp+0x9c>
   10a0c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   10a10:	e0d120d1 	ldrsb	r2, [r1], #1
   10a14:	e242c061 	sub	ip, r2, #97	; 0x61
   10a18:	e35c0019 	cmp	ip, #25
   10a1c:	81a0e002 	movhi	lr, r2
   10a20:	9242e020 	subls	lr, r2, #32
   10a24:	e35e0000 	cmp	lr, #0
   10a28:	1a000006 	bne	10a48 <strcasecmp+0x58>
   10a2c:	e35c0019 	cmp	ip, #25
   10a30:	92422020 	subls	r2, r2, #32
   10a34:	e1530002 	cmp	r3, r2
   10a38:	ca000011 	bgt	10a84 <strcasecmp+0x94>
   10a3c:	b3e00000 	mvnlt	r0, #0
   10a40:	a3a00000 	movge	r0, #0
   10a44:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   10a48:	e153000e 	cmp	r3, lr
   10a4c:	ca00000c 	bgt	10a84 <strcasecmp+0x94>
   10a50:	ba000016 	blt	10ab0 <strcasecmp+0xc0>
   10a54:	e1f030d1 	ldrsb	r3, [r0, #1]!
   10a58:	e2432061 	sub	r2, r3, #97	; 0x61
   10a5c:	e3520019 	cmp	r2, #25
   10a60:	92433020 	subls	r3, r3, #32
   10a64:	e3530000 	cmp	r3, #0
   10a68:	1affffe8 	bne	10a10 <strcasecmp+0x20>
   10a6c:	e1d120d0 	ldrsb	r2, [r1]
   10a70:	e242c061 	sub	ip, r2, #97	; 0x61
   10a74:	e35c0019 	cmp	ip, #25
   10a78:	92422020 	subls	r2, r2, #32
   10a7c:	e1530002 	cmp	r3, r2
   10a80:	daffffed 	ble	10a3c <strcasecmp+0x4c>
   10a84:	e3a00001 	mov	r0, #1
   10a88:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   10a8c:	e1d120d0 	ldrsb	r2, [r1]
   10a90:	e242c061 	sub	ip, r2, #97	; 0x61
   10a94:	e35c0019 	cmp	ip, #25
   10a98:	92422020 	subls	r2, r2, #32
   10a9c:	e1530002 	cmp	r3, r2
   10aa0:	ca000004 	bgt	10ab8 <strcasecmp+0xc8>
   10aa4:	b3e00000 	mvnlt	r0, #0
   10aa8:	a3a00000 	movge	r0, #0
   10aac:	e12fff1e 	bx	lr
   10ab0:	e3e00000 	mvn	r0, #0
   10ab4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   10ab8:	e3a00001 	mov	r0, #1
   10abc:	e12fff1e 	bx	lr

00010ac0 <strncmp>:
   10ac0:	e3520000 	cmp	r2, #0
   10ac4:	0a000016 	beq	10b24 <strncmp+0x64>
   10ac8:	e1d030d0 	ldrsb	r3, [r0]
   10acc:	e1d1c0d0 	ldrsb	ip, [r1]
   10ad0:	e3530000 	cmp	r3, #0
   10ad4:	0a000015 	beq	10b30 <strncmp+0x70>
   10ad8:	e35c0000 	cmp	ip, #0
   10adc:	0a000013 	beq	10b30 <strncmp+0x70>
   10ae0:	e15c0003 	cmp	ip, r3
   10ae4:	ba000016 	blt	10b44 <strncmp+0x84>
   10ae8:	d0802002 	addle	r2, r0, r2
   10aec:	d2800001 	addle	r0, r0, #1
   10af0:	da000009 	ble	10b1c <strncmp+0x5c>
   10af4:	ea000014 	b	10b4c <strncmp+0x8c>
   10af8:	e0d030d1 	ldrsb	r3, [r0], #1
   10afc:	e3530000 	cmp	r3, #0
   10b00:	0a000009 	beq	10b2c <strncmp+0x6c>
   10b04:	e1f1c0d1 	ldrsb	ip, [r1, #1]!
   10b08:	e35c0000 	cmp	ip, #0
   10b0c:	0a000007 	beq	10b30 <strncmp+0x70>
   10b10:	e153000c 	cmp	r3, ip
   10b14:	ca00000a 	bgt	10b44 <strncmp+0x84>
   10b18:	ba00000b 	blt	10b4c <strncmp+0x8c>
   10b1c:	e1500002 	cmp	r0, r2
   10b20:	1afffff4 	bne	10af8 <strncmp+0x38>
   10b24:	e3a00000 	mov	r0, #0
   10b28:	e12fff1e 	bx	lr
   10b2c:	e1d1c0d1 	ldrsb	ip, [r1, #1]
   10b30:	e153000c 	cmp	r3, ip
   10b34:	ca000002 	bgt	10b44 <strncmp+0x84>
   10b38:	b3e00000 	mvnlt	r0, #0
   10b3c:	a3a00000 	movge	r0, #0
   10b40:	e12fff1e 	bx	lr
   10b44:	e3a00001 	mov	r0, #1
   10b48:	e12fff1e 	bx	lr
   10b4c:	e3e00000 	mvn	r0, #0
   10b50:	e12fff1e 	bx	lr

00010b54 <strcpy>:
   10b54:	e1d130d0 	ldrsb	r3, [r1]
   10b58:	e1a02000 	mov	r2, r0
   10b5c:	e3530000 	cmp	r3, #0
   10b60:	0a000003 	beq	10b74 <strcpy+0x20>
   10b64:	e4c23001 	strb	r3, [r2], #1
   10b68:	e1f130d1 	ldrsb	r3, [r1, #1]!
   10b6c:	e3530000 	cmp	r3, #0
   10b70:	1afffffb 	bne	10b64 <strcpy+0x10>
   10b74:	e3a03000 	mov	r3, #0
   10b78:	e5c23000 	strb	r3, [r2]
   10b7c:	e12fff1e 	bx	lr

00010b80 <strncpy>:
   10b80:	e3520000 	cmp	r2, #0
   10b84:	012fff1e 	bxeq	lr
   10b88:	e1d1c0d0 	ldrsb	ip, [r1]
   10b8c:	e35c0000 	cmp	ip, #0
   10b90:	0a000009 	beq	10bbc <strncpy+0x3c>
   10b94:	e0802002 	add	r2, r0, r2
   10b98:	e1a03000 	mov	r3, r0
   10b9c:	ea000002 	b	10bac <strncpy+0x2c>
   10ba0:	e1f1c0d1 	ldrsb	ip, [r1, #1]!
   10ba4:	e35c0000 	cmp	ip, #0
   10ba8:	0a000004 	beq	10bc0 <strncpy+0x40>
   10bac:	e4c3c001 	strb	ip, [r3], #1
   10bb0:	e1530002 	cmp	r3, r2
   10bb4:	1afffff9 	bne	10ba0 <strncpy+0x20>
   10bb8:	e12fff1e 	bx	lr
   10bbc:	e1a03000 	mov	r3, r0
   10bc0:	e3a02000 	mov	r2, #0
   10bc4:	e5c32000 	strb	r2, [r3]
   10bc8:	e12fff1e 	bx	lr

00010bcc <strcat>:
   10bcc:	e1d030d0 	ldrsb	r3, [r0]
   10bd0:	e3530000 	cmp	r3, #0
   10bd4:	e1a03000 	mov	r3, r0
   10bd8:	0a000002 	beq	10be8 <strcat+0x1c>
   10bdc:	e1f320d1 	ldrsb	r2, [r3, #1]!
   10be0:	e3520000 	cmp	r2, #0
   10be4:	1afffffc 	bne	10bdc <strcat+0x10>
   10be8:	e1d120d0 	ldrsb	r2, [r1]
   10bec:	e3520000 	cmp	r2, #0
   10bf0:	0a000003 	beq	10c04 <strcat+0x38>
   10bf4:	e4c32001 	strb	r2, [r3], #1
   10bf8:	e1f120d1 	ldrsb	r2, [r1, #1]!
   10bfc:	e3520000 	cmp	r2, #0
   10c00:	1afffffb 	bne	10bf4 <strcat+0x28>
   10c04:	e3a02000 	mov	r2, #0
   10c08:	e5c32000 	strb	r2, [r3]
   10c0c:	e12fff1e 	bx	lr

00010c10 <strchr>:
   10c10:	e1d020d0 	ldrsb	r2, [r0]
   10c14:	e3520000 	cmp	r2, #0
   10c18:	0a000009 	beq	10c44 <strchr+0x34>
   10c1c:	e1510002 	cmp	r1, r2
   10c20:	1a000002 	bne	10c30 <strchr+0x20>
   10c24:	ea000008 	b	10c4c <strchr+0x3c>
   10c28:	e1530001 	cmp	r3, r1
   10c2c:	012fff1e 	bxeq	lr
   10c30:	e1f030d1 	ldrsb	r3, [r0, #1]!
   10c34:	e3530000 	cmp	r3, #0
   10c38:	1afffffa 	bne	10c28 <strchr+0x18>
   10c3c:	e1a00003 	mov	r0, r3
   10c40:	e12fff1e 	bx	lr
   10c44:	e1a00002 	mov	r0, r2
   10c48:	e12fff1e 	bx	lr
   10c4c:	e12fff1e 	bx	lr

00010c50 <strtok_r>:
   10c50:	e3500000 	cmp	r0, #0
   10c54:	0a00002c 	beq	10d0c <strtok_r+0xbc>
   10c58:	e92d4030 	push	{r4, r5, lr}
   10c5c:	e1d0e0d0 	ldrsb	lr, [r0]
   10c60:	e35e0000 	cmp	lr, #0
   10c64:	11d140d0 	ldrsbne	r4, [r1]
   10c68:	0a000024 	beq	10d00 <strtok_r+0xb0>
   10c6c:	e3540000 	cmp	r4, #0
   10c70:	0a000008 	beq	10c98 <strtok_r+0x48>
   10c74:	e15e0004 	cmp	lr, r4
   10c78:	0a000019 	beq	10ce4 <strtok_r+0x94>
   10c7c:	e1a0c001 	mov	ip, r1
   10c80:	ea000001 	b	10c8c <strtok_r+0x3c>
   10c84:	e15e0003 	cmp	lr, r3
   10c88:	0a000015 	beq	10ce4 <strtok_r+0x94>
   10c8c:	e1fc30d1 	ldrsb	r3, [ip, #1]!
   10c90:	e3530000 	cmp	r3, #0
   10c94:	1afffffa 	bne	10c84 <strtok_r+0x34>
   10c98:	e35e0000 	cmp	lr, #0
   10c9c:	0a000017 	beq	10d00 <strtok_r+0xb0>
   10ca0:	e1a05000 	mov	r5, r0
   10ca4:	e3540000 	cmp	r4, #0
   10ca8:	0a000008 	beq	10cd0 <strtok_r+0x80>
   10cac:	e15e0004 	cmp	lr, r4
   10cb0:	0a00000d 	beq	10cec <strtok_r+0x9c>
   10cb4:	e1a0c001 	mov	ip, r1
   10cb8:	ea000001 	b	10cc4 <strtok_r+0x74>
   10cbc:	e15e0003 	cmp	lr, r3
   10cc0:	0a000009 	beq	10cec <strtok_r+0x9c>
   10cc4:	e1fc30d1 	ldrsb	r3, [ip, #1]!
   10cc8:	e3530000 	cmp	r3, #0
   10ccc:	1afffffa 	bne	10cbc <strtok_r+0x6c>
   10cd0:	e1f5e0d1 	ldrsb	lr, [r5, #1]!
   10cd4:	e35e0000 	cmp	lr, #0
   10cd8:	1afffff1 	bne	10ca4 <strtok_r+0x54>
   10cdc:	e5825000 	str	r5, [r2]
   10ce0:	e8bd8030 	pop	{r4, r5, pc}
   10ce4:	e1f0e0d1 	ldrsb	lr, [r0, #1]!
   10ce8:	eaffffdf 	b	10c6c <strtok_r+0x1c>
   10cec:	e3a03000 	mov	r3, #0
   10cf0:	e2855001 	add	r5, r5, #1
   10cf4:	e5453001 	strb	r3, [r5, #-1]
   10cf8:	e5825000 	str	r5, [r2]
   10cfc:	e8bd8030 	pop	{r4, r5, pc}
   10d00:	e3a00000 	mov	r0, #0
   10d04:	e5820000 	str	r0, [r2]
   10d08:	e8bd8030 	pop	{r4, r5, pc}
   10d0c:	e5920000 	ldr	r0, [r2]
   10d10:	e3500000 	cmp	r0, #0
   10d14:	1affffcf 	bne	10c58 <strtok_r+0x8>
   10d18:	e12fff1e 	bx	lr

00010d1c <strtoul>:
   10d1c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   10d20:	e3510000 	cmp	r1, #0
   10d24:	e2425002 	sub	r5, r2, #2
   10d28:	15810000 	strne	r0, [r1]
   10d2c:	e3520000 	cmp	r2, #0
   10d30:	13550022 	cmpne	r5, #34	; 0x22
   10d34:	e3c2e010 	bic	lr, r2, #16
   10d38:	83a05001 	movhi	r5, #1
   10d3c:	93a05000 	movls	r5, #0
   10d40:	8a000037 	bhi	10e24 <strtoul+0x108>
   10d44:	e1d0c0d0 	ldrsb	ip, [r0]
   10d48:	e1a04000 	mov	r4, r0
   10d4c:	e24c3009 	sub	r3, ip, #9
   10d50:	e35c0020 	cmp	ip, #32
   10d54:	e2800001 	add	r0, r0, #1
   10d58:	e6ef3073 	uxtb	r3, r3
   10d5c:	0afffff8 	beq	10d44 <strtoul+0x28>
   10d60:	e3530004 	cmp	r3, #4
   10d64:	9afffff6 	bls	10d44 <strtoul+0x28>
   10d68:	e35c002b 	cmp	ip, #43	; 0x2b
   10d6c:	0a00002e 	beq	10e2c <strtoul+0x110>
   10d70:	e35c002d 	cmp	ip, #45	; 0x2d
   10d74:	01d4c0d1 	ldrsbeq	ip, [r4, #1]
   10d78:	03a07001 	moveq	r7, #1
   10d7c:	01a04000 	moveq	r4, r0
   10d80:	13a07000 	movne	r7, #0
   10d84:	e35c0030 	cmp	ip, #48	; 0x30
   10d88:	0a00002c 	beq	10e40 <strtoul+0x124>
   10d8c:	e3520000 	cmp	r2, #0
   10d90:	03a0200a 	moveq	r2, #10
   10d94:	e35c002f 	cmp	ip, #47	; 0x2f
   10d98:	e1a0300c 	mov	r3, ip
   10d9c:	da00001d 	ble	10e18 <strtoul+0xfc>
   10da0:	e3a0e000 	mov	lr, #0
   10da4:	e3a05001 	mov	r5, #1
   10da8:	e1a0600e 	mov	r6, lr
   10dac:	ea000008 	b	10dd4 <strtoul+0xb8>
   10db0:	e020329e 	mla	r0, lr, r2, r3
   10db4:	e150000e 	cmp	r0, lr
   10db8:	3a000029 	bcc	10e64 <strtoul+0x148>
   10dbc:	e1f430d1 	ldrsb	r3, [r4, #1]!
   10dc0:	e1a05006 	mov	r5, r6
   10dc4:	e353002f 	cmp	r3, #47	; 0x2f
   10dc8:	e1a0c003 	mov	ip, r3
   10dcc:	da000029 	ble	10e78 <strtoul+0x15c>
   10dd0:	e1a0e000 	mov	lr, r0
   10dd4:	e24cc061 	sub	ip, ip, #97	; 0x61
   10dd8:	e35c0019 	cmp	ip, #25
   10ddc:	92433020 	subls	r3, r3, #32
   10de0:	e3530040 	cmp	r3, #64	; 0x40
   10de4:	c2433007 	subgt	r3, r3, #7
   10de8:	e2433030 	sub	r3, r3, #48	; 0x30
   10dec:	e1520003 	cmp	r2, r3
   10df0:	caffffee 	bgt	10db0 <strtoul+0x94>
   10df4:	e1a0000e 	mov	r0, lr
   10df8:	e2255001 	eor	r5, r5, #1
   10dfc:	e3510000 	cmp	r1, #0
   10e00:	e0055007 	and	r5, r5, r7
   10e04:	0a000000 	beq	10e0c <strtoul+0xf0>
   10e08:	e5814000 	str	r4, [r1]
   10e0c:	e3550000 	cmp	r5, #0
   10e10:	12600000 	rsbne	r0, r0, #0
   10e14:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   10e18:	e3510000 	cmp	r1, #0
   10e1c:	13a00000 	movne	r0, #0
   10e20:	1afffff8 	bne	10e08 <strtoul+0xec>
   10e24:	e3a00000 	mov	r0, #0
   10e28:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   10e2c:	e1d4c0d1 	ldrsb	ip, [r4, #1]
   10e30:	e3a07000 	mov	r7, #0
   10e34:	e35c0030 	cmp	ip, #48	; 0x30
   10e38:	e1a04000 	mov	r4, r0
   10e3c:	1affffd2 	bne	10d8c <strtoul+0x70>
   10e40:	e1d4c0d1 	ldrsb	ip, [r4, #1]
   10e44:	e2840001 	add	r0, r4, #1
   10e48:	e3cc3020 	bic	r3, ip, #32
   10e4c:	e3530058 	cmp	r3, #88	; 0x58
   10e50:	0a00000a 	beq	10e80 <strtoul+0x164>
   10e54:	e3520000 	cmp	r2, #0
   10e58:	e1a04000 	mov	r4, r0
   10e5c:	03a02008 	moveq	r2, #8
   10e60:	eaffffcb 	b	10d94 <strtoul+0x78>
   10e64:	e3510000 	cmp	r1, #0
   10e68:	0a00000a 	beq	10e98 <strtoul+0x17c>
   10e6c:	e5814000 	str	r4, [r1]
   10e70:	e3e00000 	mvn	r0, #0
   10e74:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   10e78:	e3a05001 	mov	r5, #1
   10e7c:	eaffffde 	b	10dfc <strtoul+0xe0>
   10e80:	e35e0000 	cmp	lr, #0
   10e84:	1affffe6 	bne	10e24 <strtoul+0x108>
   10e88:	e1d4c0d2 	ldrsb	ip, [r4, #2]
   10e8c:	e3a02010 	mov	r2, #16
   10e90:	e2844002 	add	r4, r4, #2
   10e94:	eaffffbe 	b	10d94 <strtoul+0x78>
   10e98:	e3e00000 	mvn	r0, #0
   10e9c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00010ea0 <char2int>:
   10ea0:	e12fff1e 	bx	lr

00010ea4 <memcpy>:
   10ea4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
   10ea8:	e352007f 	cmp	r2, #127	; 0x7f
   10eac:	9a00000b 	bls	10ee0 <memcpy+0x3c>
   10eb0:	e3110003 	tst	r1, #3
   10eb4:	1a000009 	bne	10ee0 <memcpy+0x3c>
   10eb8:	e3100003 	tst	r0, #3
   10ebc:	1a000007 	bne	10ee0 <memcpy+0x3c>
   10ec0:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
   10ec4:	e8b107f8 	ldm	r1!, {r3, r4, r5, r6, r7, r8, r9, sl}
   10ec8:	e2422020 	sub	r2, r2, #32
   10ecc:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
   10ed0:	f5d1f040 	pld	[r1, #64]	; 0x40
   10ed4:	e352001f 	cmp	r2, #31
   10ed8:	8afffff9 	bhi	10ec4 <memcpy+0x20>
   10edc:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
   10ee0:	e3520000 	cmp	r2, #0
   10ee4:	0a000003 	beq	10ef8 <memcpy+0x54>
   10ee8:	e4d13001 	ldrb	r3, [r1], #1
   10eec:	e2522001 	subs	r2, r2, #1
   10ef0:	e4c03001 	strb	r3, [r0], #1
   10ef4:	1afffffb 	bne	10ee8 <memcpy+0x44>
   10ef8:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
   10efc:	e12fff1e 	bx	lr

00010f00 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
   10f00:	e12fff1e 	bx	lr

00010f04 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
   10f04:	e92d4010 	push	{r4, lr}
   10f08:	e1a04000 	mov	r4, r0
   10f0c:	e3a01010 	mov	r1, #16
   10f10:	eb0002e3 	bl	11aa4 <operator delete(void*, unsigned int)>
   10f14:	e1a00004 	mov	r0, r4
   10f18:	e8bd8010 	pop	{r4, pc}

00010f1c <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]>:
   10f1c:	e92d4070 	push	{r4, r5, r6, lr}
   10f20:	e59f5094 	ldr	r5, [pc, #148]	; 10fbc <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0xa0>
   10f24:	e1a04000 	mov	r4, r0
   10f28:	e5950000 	ldr	r0, [r5]
   10f2c:	e1a06001 	mov	r6, r1
   10f30:	e3500000 	cmp	r0, #0
   10f34:	1a00001a 	bne	10fa4 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x88>
   10f38:	e1d400bc 	ldrh	r0, [r4, #12]
   10f3c:	e1d430be 	ldrh	r3, [r4, #14]
   10f40:	e5846008 	str	r6, [r4, #8]
   10f44:	e0402003 	sub	r2, r0, r3
   10f48:	e6bf2072 	sxth	r2, r2
   10f4c:	e3520000 	cmp	r2, #0
   10f50:	da00000c 	ble	10f88 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x6c>
   10f54:	e3560000 	cmp	r6, #0
   10f58:	1a00000c 	bne	10f90 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x74>
   10f5c:	e2833001 	add	r3, r3, #1
   10f60:	e6ff3073 	uxth	r3, r3
   10f64:	e1c430be 	strh	r3, [r4, #14]
   10f68:	e5941004 	ldr	r1, [r4, #4]
   10f6c:	e5952004 	ldr	r2, [r5, #4]
   10f70:	e1833800 	orr	r3, r3, r0, lsl #16
   10f74:	e7823101 	str	r3, [r2, r1, lsl #2]
   10f78:	e5953000 	ldr	r3, [r5]
   10f7c:	e3530000 	cmp	r3, #0
   10f80:	1a000005 	bne	10f9c <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x80>
   10f84:	e8bd8070 	pop	{r4, r5, r6, pc}
   10f88:	e3560000 	cmp	r6, #0
   10f8c:	1a000006 	bne	10fac <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x90>
   10f90:	e5953000 	ldr	r3, [r5]
   10f94:	e3530000 	cmp	r3, #0
   10f98:	08bd8070 	popeq	{r4, r5, r6, pc}
   10f9c:	e8bd4070 	pop	{r4, r5, r6, lr}
   10fa0:	ea00028e 	b	119e0 <LeaveCritical>
   10fa4:	eb000260 	bl	1192c <EnterCritical>
   10fa8:	eaffffe2 	b	10f38 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x1c>
   10fac:	e2800001 	add	r0, r0, #1
   10fb0:	e6ff0070 	uxth	r0, r0
   10fb4:	e1c400bc 	strh	r0, [r4, #12]
   10fb8:	eaffffea 	b	10f68 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x4c>
   10fbc:	00015354 	.word	0x00015354

00010fc0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)>:
   10fc0:	e3a03000 	mov	r3, #0
   10fc4:	e92d4030 	push	{r4, r5, lr}
   10fc8:	e59f2124 	ldr	r2, [pc, #292]	; 110f4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x134>
   10fcc:	e3510001 	cmp	r1, #1
   10fd0:	e24dd024 	sub	sp, sp, #36	; 0x24
   10fd4:	e1a04000 	mov	r4, r0
   10fd8:	e5801004 	str	r1, [r0, #4]
   10fdc:	e5802000 	str	r2, [r0]
   10fe0:	e1c030bc 	strh	r3, [r0, #12]
   10fe4:	e1c030be 	strh	r3, [r0, #14]
   10fe8:	9a000002 	bls	10ff8 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x38>
   10fec:	e1a00004 	mov	r0, r4
   10ff0:	e28dd024 	add	sp, sp, #36	; 0x24
   10ff4:	e8bd8030 	pop	{r4, r5, pc}
   10ff8:	e59f50f8 	ldr	r5, [pc, #248]	; 110f8 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x138>
   10ffc:	e5950000 	ldr	r0, [r5]
   11000:	e1500003 	cmp	r0, r3
   11004:	1a00002c 	bne	110bc <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0xfc>
   11008:	e5953004 	ldr	r3, [r5, #4]
   1100c:	e3530000 	cmp	r3, #0
   11010:	0a000011 	beq	1105c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x9c>
   11014:	e3a01000 	mov	r1, #0
   11018:	e5942004 	ldr	r2, [r4, #4]
   1101c:	e7831102 	str	r1, [r3, r2, lsl #2]
   11020:	e5953000 	ldr	r3, [r5]
   11024:	e3530000 	cmp	r3, #0
   11028:	1a000009 	bne	11054 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x94>
   1102c:	e5943004 	ldr	r3, [r4, #4]
   11030:	e3530001 	cmp	r3, #1
   11034:	8affffec 	bhi	10fec <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x2c>
   11038:	e5953004 	ldr	r3, [r5, #4]
   1103c:	e3530000 	cmp	r3, #0
   11040:	0affffe9 	beq	10fec <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x2c>
   11044:	e3a01000 	mov	r1, #0
   11048:	e1a00004 	mov	r0, r4
   1104c:	ebffffb2 	bl	10f1c <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]>
   11050:	eaffffe5 	b	10fec <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x2c>
   11054:	eb000261 	bl	119e0 <LeaveCritical>
   11058:	eafffff3 	b	1102c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x6c>
   1105c:	e3a00001 	mov	r0, #1
   11060:	eb0001fa 	bl	11850 <CMemorySystem::GetCoherentPage(unsigned int)>
   11064:	e5850004 	str	r0, [r5, #4]
   11068:	e28d000c 	add	r0, sp, #12
   1106c:	ebffe2b1 	bl	9b38 <CBcmPropertyTags::CBcmPropertyTags()>
   11070:	e3a03004 	mov	r3, #4
   11074:	e595c004 	ldr	ip, [r5, #4]
   11078:	e58d3000 	str	r3, [sp]
   1107c:	e3ccc103 	bic	ip, ip, #-1073741824	; 0xc0000000
   11080:	e38cc101 	orr	ip, ip, #1073741824	; 0x40000000
   11084:	e28d000c 	add	r0, sp, #12
   11088:	e28d2010 	add	r2, sp, #16
   1108c:	e3a03010 	mov	r3, #16
   11090:	e59f1064 	ldr	r1, [pc, #100]	; 110fc <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x13c>
   11094:	e58dc01c 	str	ip, [sp, #28]
   11098:	ebffe2fd 	bl	9c94 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   1109c:	e3500000 	cmp	r0, #0
   110a0:	0a000007 	beq	110c4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x104>
   110a4:	e28d000c 	add	r0, sp, #12
   110a8:	ebffe2a8 	bl	9b50 <CBcmPropertyTags::~CBcmPropertyTags()>
   110ac:	e5953004 	ldr	r3, [r5, #4]
   110b0:	e3530000 	cmp	r3, #0
   110b4:	0affffd9 	beq	11020 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x60>
   110b8:	eaffffd5 	b	11014 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x54>
   110bc:	eb00021a 	bl	1192c <EnterCritical>
   110c0:	eaffffd0 	b	11008 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x48>
   110c4:	e3a03010 	mov	r3, #16
   110c8:	e58d0000 	str	r0, [sp]
   110cc:	e28d2010 	add	r2, sp, #16
   110d0:	e59f1028 	ldr	r1, [pc, #40]	; 11100 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x140>
   110d4:	e28d000c 	add	r0, sp, #12
   110d8:	ebffe2ed 	bl	9c94 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   110dc:	e3500000 	cmp	r0, #0
   110e0:	159d301c 	ldrne	r3, [sp, #28]
   110e4:	05850004 	streq	r0, [r5, #4]
   110e8:	13c33103 	bicne	r3, r3, #-1073741824	; 0xc0000000
   110ec:	15853004 	strne	r3, [r5, #4]
   110f0:	eaffffeb 	b	110a4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0xe4>
   110f4:	00013ef4 	.word	0x00013ef4
   110f8:	00015354 	.word	0x00015354
   110fc:	00048020 	.word	0x00048020
   11100:	00040010 	.word	0x00040010

00011104 <CVirtualGPIOPin::Write(unsigned int)>:
   11104:	e5902004 	ldr	r2, [r0, #4]
   11108:	e1a03001 	mov	r3, r1
   1110c:	e3520001 	cmp	r2, #1
   11110:	812fff1e 	bxhi	lr
   11114:	e3510001 	cmp	r1, #1
   11118:	93a03000 	movls	r3, #0
   1111c:	83a03001 	movhi	r3, #1
   11120:	e59f2014 	ldr	r2, [pc, #20]	; 1113c <CVirtualGPIOPin::Write(unsigned int)+0x38>
   11124:	e5922004 	ldr	r2, [r2, #4]
   11128:	e3520000 	cmp	r2, #0
   1112c:	03833001 	orreq	r3, r3, #1
   11130:	e3530000 	cmp	r3, #0
   11134:	112fff1e 	bxne	lr
   11138:	eaffff77 	b	10f1c <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]>
   1113c:	00015354 	.word	0x00015354

00011140 <CVirtualGPIOPin::Invert()>:
   11140:	e5901008 	ldr	r1, [r0, #8]
   11144:	e2211001 	eor	r1, r1, #1
   11148:	eaffffed 	b	11104 <CVirtualGPIOPin::Write(unsigned int)>

0001114c <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE>:
   1114c:	e3a02000 	mov	r2, #0
   11150:	e59f3004 	ldr	r3, [pc, #4]	; 1115c <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE+0x10>
   11154:	e5832000 	str	r2, [r3]
   11158:	e12fff1e 	bx	lr
   1115c:	00015354 	.word	0x00015354

00011160 <CExceptionHandler::CExceptionHandler()>:
   11160:	e92d4070 	push	{r4, r5, r6, lr}
   11164:	e59f506c 	ldr	r5, [pc, #108]	; 111d8 <CExceptionHandler::CExceptionHandler()+0x78>
   11168:	e1a04000 	mov	r4, r0
   1116c:	e5953000 	ldr	r3, [r5]
   11170:	e3530000 	cmp	r3, #0
   11174:	0a000003 	beq	11188 <CExceptionHandler::CExceptionHandler()+0x28>
   11178:	e3a02030 	mov	r2, #48	; 0x30
   1117c:	e59f1058 	ldr	r1, [pc, #88]	; 111dc <CExceptionHandler::CExceptionHandler()+0x7c>
   11180:	e59f0058 	ldr	r0, [pc, #88]	; 111e0 <CExceptionHandler::CExceptionHandler()+0x80>
   11184:	ebffe247 	bl	9aa8 <assertion_failed>
   11188:	e3a00000 	mov	r0, #0
   1118c:	e59f1050 	ldr	r1, [pc, #80]	; 111e4 <CExceptionHandler::CExceptionHandler()+0x84>
   11190:	e59f2050 	ldr	r2, [pc, #80]	; 111e8 <CExceptionHandler::CExceptionHandler()+0x88>
   11194:	e59f3050 	ldr	r3, [pc, #80]	; 111ec <CExceptionHandler::CExceptionHandler()+0x8c>
   11198:	e1a01141 	asr	r1, r1, #2
   1119c:	e1a02142 	asr	r2, r2, #2
   111a0:	e1a03143 	asr	r3, r3, #2
   111a4:	e2411002 	sub	r1, r1, #2
   111a8:	e2422002 	sub	r2, r2, #2
   111ac:	e2433002 	sub	r3, r3, #2
   111b0:	e38114ea 	orr	r1, r1, #-369098752	; 0xea000000
   111b4:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
   111b8:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
   111bc:	e5854000 	str	r4, [r5]
   111c0:	e5801004 	str	r1, [r0, #4]
   111c4:	e580200c 	str	r2, [r0, #12]
   111c8:	e5803010 	str	r3, [r0, #16]
   111cc:	eb000228 	bl	11a74 <SyncDataAndInstructionCache>
   111d0:	e1a00004 	mov	r0, r4
   111d4:	e8bd8070 	pop	{r4, r5, r6, pc}
   111d8:	0001535c 	.word	0x0001535c
   111dc:	00013f04 	.word	0x00013f04
   111e0:	00013da4 	.word	0x00013da4
   111e4:	00011500 	.word	0x00011500
   111e8:	00011460 	.word	0x00011460
   111ec:	000114a8 	.word	0x000114a8

000111f0 <CExceptionHandler::~CExceptionHandler()>:
   111f0:	e3a02000 	mov	r2, #0
   111f4:	e59f3004 	ldr	r3, [pc, #4]	; 11200 <CExceptionHandler::~CExceptionHandler()+0x10>
   111f8:	e5832000 	str	r2, [r3]
   111fc:	e12fff1e 	bx	lr
   11200:	0001535c 	.word	0x0001535c

00011204 <CExceptionHandler::Throw(unsigned int)>:
   11204:	e92d4010 	push	{r4, lr}
   11208:	e1a04001 	mov	r4, r1
   1120c:	e24dd008 	sub	sp, sp, #8
   11210:	ebffeb4d 	bl	bf4c <CLogger::Get()>
   11214:	e59f201c 	ldr	r2, [pc, #28]	; 11238 <CExceptionHandler::Throw(unsigned int)+0x34>
   11218:	e59f301c 	ldr	r3, [pc, #28]	; 1123c <CExceptionHandler::Throw(unsigned int)+0x38>
   1121c:	e7921104 	ldr	r1, [r2, r4, lsl #2]
   11220:	e3a02000 	mov	r2, #0
   11224:	e58d1000 	str	r1, [sp]
   11228:	e59f1010 	ldr	r1, [pc, #16]	; 11240 <CExceptionHandler::Throw(unsigned int)+0x3c>
   1122c:	ebffecef 	bl	c5f0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11230:	e28dd008 	add	sp, sp, #8
   11234:	e8bd8010 	pop	{r4, pc}
   11238:	00015244 	.word	0x00015244
   1123c:	00013f1c 	.word	0x00013f1c
   11240:	00013efc 	.word	0x00013efc

00011244 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>:
   11244:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   11248:	e3510002 	cmp	r1, #2
   1124c:	e24dd024 	sub	sp, sp, #36	; 0x24
   11250:	e1a05001 	mov	r5, r1
   11254:	e1a04002 	mov	r4, r2
   11258:	0a000028 	beq	11300 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xbc>
   1125c:	e3510003 	cmp	r1, #3
   11260:	0a000020 	beq	112e8 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xa4>
   11264:	e3a08000 	mov	r8, #0
   11268:	e1a09008 	mov	r9, r8
   1126c:	e3540000 	cmp	r4, #0
   11270:	0a000025 	beq	1130c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xc8>
   11274:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   11278:	e5947048 	ldr	r7, [r4, #72]	; 0x48
   1127c:	e203301f 	and	r3, r3, #31
   11280:	e3530011 	cmp	r3, #17
   11284:	e5946044 	ldr	r6, [r4, #68]	; 0x44
   11288:	0a000019 	beq	112f4 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xb0>
   1128c:	e3530012 	cmp	r3, #18
   11290:	089400c0 	ldmeq	r4, {r6, r7}
   11294:	e59f1084 	ldr	r1, [pc, #132]	; 11320 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xdc>
   11298:	e1a00006 	mov	r0, r6
   1129c:	ebffe30a 	bl	9ecc <debug_stacktrace(unsigned int const*, char const*)>
   112a0:	ebffeb29 	bl	bf4c <CLogger::Get()>
   112a4:	e59f3078 	ldr	r3, [pc, #120]	; 11324 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe0>
   112a8:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
   112ac:	e7931105 	ldr	r1, [r3, r5, lsl #2]
   112b0:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   112b4:	e58d1000 	str	r1, [sp]
   112b8:	e58d2018 	str	r2, [sp, #24]
   112bc:	e58d3004 	str	r3, [sp, #4]
   112c0:	e58d7014 	str	r7, [sp, #20]
   112c4:	e58d6010 	str	r6, [sp, #16]
   112c8:	e58d800c 	str	r8, [sp, #12]
   112cc:	e58d9008 	str	r9, [sp, #8]
   112d0:	e59f3050 	ldr	r3, [pc, #80]	; 11328 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe4>
   112d4:	e3a02000 	mov	r2, #0
   112d8:	e59f1040 	ldr	r1, [pc, #64]	; 11320 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xdc>
   112dc:	ebffecc3 	bl	c5f0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   112e0:	e28dd024 	add	sp, sp, #36	; 0x24
   112e4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   112e8:	ee159f10 	mrc	15, 0, r9, cr5, cr0, {0}
   112ec:	ee168f10 	mrc	15, 0, r8, cr6, cr0, {0}
   112f0:	eaffffdd 	b	1126c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x28>
   112f4:	e594700c 	ldr	r7, [r4, #12]
   112f8:	e5946008 	ldr	r6, [r4, #8]
   112fc:	eaffffe4 	b	11294 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x50>
   11300:	ee159f30 	mrc	15, 0, r9, cr5, cr0, {1}
   11304:	ee168f50 	mrc	15, 0, r8, cr6, cr0, {2}
   11308:	eaffffd7 	b	1126c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x28>
   1130c:	e3a02069 	mov	r2, #105	; 0x69
   11310:	e59f1014 	ldr	r1, [pc, #20]	; 1132c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe8>
   11314:	e59f0014 	ldr	r0, [pc, #20]	; 11330 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xec>
   11318:	ebffe1e2 	bl	9aa8 <assertion_failed>
   1131c:	eaffffd4 	b	11274 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x30>
   11320:	00013efc 	.word	0x00013efc
   11324:	00015244 	.word	0x00015244
   11328:	00013f38 	.word	0x00013f38
   1132c:	00013f04 	.word	0x00013f04
   11330:	00013f2c 	.word	0x00013f2c

00011334 <CExceptionHandler::Get()>:
   11334:	e92d4010 	push	{r4, lr}
   11338:	e59f4020 	ldr	r4, [pc, #32]	; 11360 <CExceptionHandler::Get()+0x2c>
   1133c:	e5940000 	ldr	r0, [r4]
   11340:	e3500000 	cmp	r0, #0
   11344:	18bd8010 	popne	{r4, pc}
   11348:	e3a02087 	mov	r2, #135	; 0x87
   1134c:	e59f1010 	ldr	r1, [pc, #16]	; 11364 <CExceptionHandler::Get()+0x30>
   11350:	e59f0010 	ldr	r0, [pc, #16]	; 11368 <CExceptionHandler::Get()+0x34>
   11354:	ebffe1d3 	bl	9aa8 <assertion_failed>
   11358:	e5940000 	ldr	r0, [r4]
   1135c:	e8bd8010 	pop	{r4, pc}
   11360:	0001535c 	.word	0x0001535c
   11364:	00013f04 	.word	0x00013f04
   11368:	000138fc 	.word	0x000138fc

0001136c <ExceptionHandler>:
   1136c:	e92d4070 	push	{r4, r5, r6, lr}
   11370:	e3a03000 	mov	r3, #0
   11374:	e1a05000 	mov	r5, r0
   11378:	e1a06001 	mov	r6, r1
   1137c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   11380:	ebffe8fa 	bl	b770 <CInterruptSystem::DisableFIQ()>
   11384:	f1080040 	cpsie	f
   11388:	e59f403c 	ldr	r4, [pc, #60]	; 113cc <ExceptionHandler+0x60>
   1138c:	e5940000 	ldr	r0, [r4]
   11390:	e3500000 	cmp	r0, #0
   11394:	0a000003 	beq	113a8 <ExceptionHandler+0x3c>
   11398:	e1a02006 	mov	r2, r6
   1139c:	e1a01005 	mov	r1, r5
   113a0:	e8bd4070 	pop	{r4, r5, r6, lr}
   113a4:	eaffffa6 	b	11244 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>
   113a8:	e3a02087 	mov	r2, #135	; 0x87
   113ac:	e59f101c 	ldr	r1, [pc, #28]	; 113d0 <ExceptionHandler+0x64>
   113b0:	e59f001c 	ldr	r0, [pc, #28]	; 113d4 <ExceptionHandler+0x68>
   113b4:	ebffe1bb 	bl	9aa8 <assertion_failed>
   113b8:	e5940000 	ldr	r0, [r4]
   113bc:	e1a02006 	mov	r2, r6
   113c0:	e1a01005 	mov	r1, r5
   113c4:	e8bd4070 	pop	{r4, r5, r6, lr}
   113c8:	eaffff9d 	b	11244 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>
   113cc:	0001535c 	.word	0x0001535c
   113d0:	00013f04 	.word	0x00013f04
   113d4:	000138fc 	.word	0x000138fc

000113d8 <raise>:
   113d8:	e92d4010 	push	{r4, lr}
   113dc:	e59f4030 	ldr	r4, [pc, #48]	; 11414 <raise+0x3c>
   113e0:	e5940000 	ldr	r0, [r4]
   113e4:	e3500000 	cmp	r0, #0
   113e8:	0a000003 	beq	113fc <raise+0x24>
   113ec:	e3a01004 	mov	r1, #4
   113f0:	ebffff83 	bl	11204 <CExceptionHandler::Throw(unsigned int)>
   113f4:	e3a00000 	mov	r0, #0
   113f8:	e8bd8010 	pop	{r4, pc}
   113fc:	e59f0014 	ldr	r0, [pc, #20]	; 11418 <raise+0x40>
   11400:	e3a02087 	mov	r2, #135	; 0x87
   11404:	e59f1010 	ldr	r1, [pc, #16]	; 1141c <raise+0x44>
   11408:	ebffe1a6 	bl	9aa8 <assertion_failed>
   1140c:	e5940000 	ldr	r0, [r4]
   11410:	eafffff5 	b	113ec <raise+0x14>
   11414:	0001535c 	.word	0x0001535c
   11418:	000138fc 	.word	0x000138fc
   1141c:	00013f04 	.word	0x00013f04

00011420 <UndefinedInstructionInternal>:
   11420:	e24ee004 	sub	lr, lr, #4
   11424:	e92d4000 	stmfd	sp!, {lr}
   11428:	e14fe000 	mrs	lr, SPSR
   1142c:	e92d4000 	stmfd	sp!, {lr}
   11430:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   11434:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   11438:	e1a0100d 	mov	r1, sp
   1143c:	f1020012 	cps	#18
   11440:	e1a0200d 	mov	r2, sp
   11444:	e1a0300e 	mov	r3, lr
   11448:	f1020011 	cps	#17
   1144c:	e1a0400d 	mov	r4, sp
   11450:	e1a0500e 	mov	r5, lr
   11454:	f102001f 	cps	#31
   11458:	e1a0d001 	mov	sp, r1
   1145c:	e92d003c 	push	{r2, r3, r4, r5}
   11460:	e1a0100d 	mov	r1, sp
   11464:	e3a00001 	mov	r0, #1
   11468:	eaffffbf 	b	1136c <ExceptionHandler>

0001146c <PrefetchAbortStub>:
   1146c:	e24ee004 	sub	lr, lr, #4
   11470:	e92d4000 	stmfd	sp!, {lr}
   11474:	e14fe000 	mrs	lr, SPSR
   11478:	e92d4000 	stmfd	sp!, {lr}
   1147c:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   11480:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   11484:	e1a0100d 	mov	r1, sp
   11488:	f1020012 	cps	#18
   1148c:	e1a0200d 	mov	r2, sp
   11490:	e1a0300e 	mov	r3, lr
   11494:	f1020011 	cps	#17
   11498:	e1a0400d 	mov	r4, sp
   1149c:	e1a0500e 	mov	r5, lr
   114a0:	f102001f 	cps	#31
   114a4:	e1a0d001 	mov	sp, r1
   114a8:	e92d003c 	push	{r2, r3, r4, r5}
   114ac:	e1a0100d 	mov	r1, sp
   114b0:	e3a00002 	mov	r0, #2
   114b4:	eaffffac 	b	1136c <ExceptionHandler>

000114b8 <DataAbortStub>:
   114b8:	e24ee008 	sub	lr, lr, #8
   114bc:	e92d4000 	stmfd	sp!, {lr}
   114c0:	e14fe000 	mrs	lr, SPSR
   114c4:	e92d4000 	stmfd	sp!, {lr}
   114c8:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   114cc:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   114d0:	e1a0100d 	mov	r1, sp
   114d4:	f1020012 	cps	#18
   114d8:	e1a0200d 	mov	r2, sp
   114dc:	e1a0300e 	mov	r3, lr
   114e0:	f1020011 	cps	#17
   114e4:	e1a0400d 	mov	r4, sp
   114e8:	e1a0500e 	mov	r5, lr
   114ec:	f102001f 	cps	#31
   114f0:	e1a0d001 	mov	sp, r1
   114f4:	e92d003c 	push	{r2, r3, r4, r5}
   114f8:	e1a0100d 	mov	r1, sp
   114fc:	e3a00003 	mov	r0, #3
   11500:	eaffff99 	b	1136c <ExceptionHandler>

00011504 <UndefinedInstructionStub>:
   11504:	e92d4001 	push	{r0, lr}
   11508:	eef80a10 	vmrs	r0, fpexc
   1150c:	e3100102 	tst	r0, #-2147483648	; 0x80000000
   11510:	0affffc2 	beq	11420 <UndefinedInstructionInternal>
   11514:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
   11518:	eee80a10 	vmsr	fpexc, r0
   1151c:	e8fd8001 	ldm	sp!, {r0, pc}^

00011520 <IRQStub>:
   11520:	e24ee004 	sub	lr, lr, #4
   11524:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
   11528:	ebffe8f1 	bl	b8f4 <InterruptHandler>
   1152c:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^

00011530 <FIQStub>:
   11530:	e24ee004 	sub	lr, lr, #4
   11534:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
   11538:	e3a03000 	mov	r3, #0
   1153c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   11540:	e59f2040 	ldr	r2, [pc, #64]	; 11588 <FIQStub+0x58>
   11544:	e5921000 	ldr	r1, [r2]
   11548:	e3510000 	cmp	r1, #0
   1154c:	0a000004 	beq	11564 <FIQStub+0x34>
   11550:	e5920004 	ldr	r0, [r2, #4]
   11554:	e12fff31 	blx	r1
   11558:	e3a03000 	mov	r3, #0
   1155c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   11560:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^
   11564:	e3a03000 	mov	r3, #0
   11568:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   1156c:	e59f1018 	ldr	r1, [pc, #24]	; 1158c <FIQStub+0x5c>
   11570:	e3a00000 	mov	r0, #0
   11574:	e5810000 	str	r0, [r1]
   11578:	e3a03000 	mov	r3, #0
   1157c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   11580:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   11584:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^
   11588:	00015258 	.word	0x00015258
   1158c:	2000b20c 	.word	0x2000b20c

00011590 <CMemorySystem::~CMemorySystem()>:
   11590:	e59f3068 	ldr	r3, [pc, #104]	; 11600 <CMemorySystem::~CMemorySystem()+0x70>
   11594:	e92d4070 	push	{r4, r5, r6, lr}
   11598:	e5932000 	ldr	r2, [r3]
   1159c:	e1a04000 	mov	r4, r0
   115a0:	e1520000 	cmp	r2, r0
   115a4:	0a000001 	beq	115b0 <CMemorySystem::~CMemorySystem()+0x20>
   115a8:	e1a00004 	mov	r0, r4
   115ac:	e8bd8070 	pop	{r4, r5, r6, pc}
   115b0:	e3a02000 	mov	r2, #0
   115b4:	e5d01000 	ldrb	r1, [r0]
   115b8:	e5832000 	str	r2, [r3]
   115bc:	e1510002 	cmp	r1, r2
   115c0:	0a000004 	beq	115d8 <CMemorySystem::~CMemorySystem()+0x48>
   115c4:	ee111f10 	mrc	15, 0, r1, cr1, cr0, {0}
   115c8:	e59f3034 	ldr	r3, [pc, #52]	; 11604 <CMemorySystem::~CMemorySystem()+0x74>
   115cc:	e0033001 	and	r3, r3, r1
   115d0:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
   115d4:	ee082f17 	mcr	15, 0, r2, cr8, cr7, {0}
   115d8:	e5945008 	ldr	r5, [r4, #8]
   115dc:	e3550000 	cmp	r5, #0
   115e0:	0afffff0 	beq	115a8 <CMemorySystem::~CMemorySystem()+0x18>
   115e4:	e1a00005 	mov	r0, r5
   115e8:	eb0000c5 	bl	11904 <CPageTable::~CPageTable()>
   115ec:	e1a00005 	mov	r0, r5
   115f0:	e3a01004 	mov	r1, #4
   115f4:	eb00012a 	bl	11aa4 <operator delete(void*, unsigned int)>
   115f8:	e1a00004 	mov	r0, r4
   115fc:	e8bd8070 	pop	{r4, r5, r6, pc}
   11600:	00015360 	.word	0x00015360
   11604:	ff7fe7fa 	.word	0xff7fe7fa

00011608 <CMemorySystem::GetMemSize() const>:
   11608:	e92d4010 	push	{r4, lr}
   1160c:	e59f402c 	ldr	r4, [pc, #44]	; 11640 <CMemorySystem::GetMemSize() const+0x38>
   11610:	e5943000 	ldr	r3, [r4]
   11614:	e3530000 	cmp	r3, #0
   11618:	0a000001 	beq	11624 <CMemorySystem::GetMemSize() const+0x1c>
   1161c:	e5930004 	ldr	r0, [r3, #4]
   11620:	e8bd8010 	pop	{r4, pc}
   11624:	e3a02082 	mov	r2, #130	; 0x82
   11628:	e59f1014 	ldr	r1, [pc, #20]	; 11644 <CMemorySystem::GetMemSize() const+0x3c>
   1162c:	e59f0014 	ldr	r0, [pc, #20]	; 11648 <CMemorySystem::GetMemSize() const+0x40>
   11630:	ebffe11c 	bl	9aa8 <assertion_failed>
   11634:	e5943000 	ldr	r3, [r4]
   11638:	e5930004 	ldr	r0, [r3, #4]
   1163c:	e8bd8010 	pop	{r4, pc}
   11640:	00015360 	.word	0x00015360
   11644:	00013fc0 	.word	0x00013fc0
   11648:	000138fc 	.word	0x000138fc

0001164c <CMemorySystem::Get()>:
   1164c:	e92d4010 	push	{r4, lr}
   11650:	e59f4020 	ldr	r4, [pc, #32]	; 11678 <CMemorySystem::Get()+0x2c>
   11654:	e5940000 	ldr	r0, [r4]
   11658:	e3500000 	cmp	r0, #0
   1165c:	18bd8010 	popne	{r4, pc}
   11660:	e3a02088 	mov	r2, #136	; 0x88
   11664:	e59f1010 	ldr	r1, [pc, #16]	; 1167c <CMemorySystem::Get()+0x30>
   11668:	e59f0010 	ldr	r0, [pc, #16]	; 11680 <CMemorySystem::Get()+0x34>
   1166c:	ebffe10d 	bl	9aa8 <assertion_failed>
   11670:	e5940000 	ldr	r0, [r4]
   11674:	e8bd8010 	pop	{r4, pc}
   11678:	00015360 	.word	0x00015360
   1167c:	00013fc0 	.word	0x00013fc0
   11680:	000138fc 	.word	0x000138fc

00011684 <CMemorySystem::EnableMMU()>:
   11684:	e5d03000 	ldrb	r3, [r0]
   11688:	e92d4010 	push	{r4, lr}
   1168c:	e3530000 	cmp	r3, #0
   11690:	e1a04000 	mov	r4, r0
   11694:	0a00001c 	beq	1170c <CMemorySystem::EnableMMU()+0x88>
   11698:	ee113f30 	mrc	15, 0, r3, cr1, cr0, {1}
   1169c:	e3833040 	orr	r3, r3, #64	; 0x40
   116a0:	ee013f30 	mcr	15, 0, r3, cr1, cr0, {1}
   116a4:	ee103f70 	mrc	15, 0, r3, cr0, cr0, {3}
   116a8:	e3130001 	tst	r3, #1
   116ac:	1a00001b 	bne	11720 <CMemorySystem::EnableMMU()+0x9c>
   116b0:	e3a03000 	mov	r3, #0
   116b4:	ee023f50 	mcr	15, 0, r3, cr2, cr0, {2}
   116b8:	e5940008 	ldr	r0, [r4, #8]
   116bc:	e1500003 	cmp	r0, r3
   116c0:	0a00001b 	beq	11734 <CMemorySystem::EnableMMU()+0xb0>
   116c4:	eb00008f 	bl	11908 <CPageTable::GetBaseAddress() const>
   116c8:	ee020f10 	mcr	15, 0, r0, cr2, cr0, {0}
   116cc:	e3a03001 	mov	r3, #1
   116d0:	ee033f10 	mcr	15, 0, r3, cr3, cr0, {0}
   116d4:	e3a03000 	mov	r3, #0
   116d8:	ee073f16 	mcr	15, 0, r3, cr7, cr6, {0}
   116dc:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   116e0:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   116e4:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   116e8:	ee083f17 	mcr	15, 0, r3, cr8, cr7, {0}
   116ec:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   116f0:	ee073f95 	mcr	15, 0, r3, cr7, cr5, {4}
   116f4:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
   116f8:	e59f204c 	ldr	r2, [pc, #76]	; 1174c <CMemorySystem::EnableMMU()+0xc8>
   116fc:	e3c33002 	bic	r3, r3, #2
   11700:	e1832002 	orr	r2, r3, r2
   11704:	ee012f10 	mcr	15, 0, r2, cr1, cr0, {0}
   11708:	e8bd8010 	pop	{r4, pc}
   1170c:	e3a0208e 	mov	r2, #142	; 0x8e
   11710:	e59f1038 	ldr	r1, [pc, #56]	; 11750 <CMemorySystem::EnableMMU()+0xcc>
   11714:	e59f0038 	ldr	r0, [pc, #56]	; 11754 <CMemorySystem::EnableMMU()+0xd0>
   11718:	ebffe0e2 	bl	9aa8 <assertion_failed>
   1171c:	eaffffdd 	b	11698 <CMemorySystem::EnableMMU()+0x14>
   11720:	e3a0209b 	mov	r2, #155	; 0x9b
   11724:	e59f1024 	ldr	r1, [pc, #36]	; 11750 <CMemorySystem::EnableMMU()+0xcc>
   11728:	e59f0028 	ldr	r0, [pc, #40]	; 11758 <CMemorySystem::EnableMMU()+0xd4>
   1172c:	ebffe0dd 	bl	9aa8 <assertion_failed>
   11730:	eaffffde 	b	116b0 <CMemorySystem::EnableMMU()+0x2c>
   11734:	e59f0020 	ldr	r0, [pc, #32]	; 1175c <CMemorySystem::EnableMMU()+0xd8>
   11738:	e3a020a1 	mov	r2, #161	; 0xa1
   1173c:	e59f100c 	ldr	r1, [pc, #12]	; 11750 <CMemorySystem::EnableMMU()+0xcc>
   11740:	ebffe0d8 	bl	9aa8 <assertion_failed>
   11744:	e5940008 	ldr	r0, [r4, #8]
   11748:	eaffffdd 	b	116c4 <CMemorySystem::EnableMMU()+0x40>
   1174c:	00c01805 	.word	0x00c01805
   11750:	00013fc0 	.word	0x00013fc0
   11754:	00013fcc 	.word	0x00013fcc
   11758:	00013fdc 	.word	0x00013fdc
   1175c:	00014008 	.word	0x00014008

00011760 <CMemorySystem::CMemorySystem(bool)>:
   11760:	e3a03000 	mov	r3, #0
   11764:	e92d4030 	push	{r4, r5, lr}
   11768:	e59f20d0 	ldr	r2, [pc, #208]	; 11840 <CMemorySystem::CMemorySystem(bool)+0xe0>
   1176c:	e24dd024 	sub	sp, sp, #36	; 0x24
   11770:	e5925000 	ldr	r5, [r2]
   11774:	e1a04000 	mov	r4, r0
   11778:	e1550003 	cmp	r5, r3
   1177c:	e5c01000 	strb	r1, [r0]
   11780:	e5803004 	str	r3, [r0, #4]
   11784:	e5803008 	str	r3, [r0, #8]
   11788:	0a000002 	beq	11798 <CMemorySystem::CMemorySystem(bool)+0x38>
   1178c:	e1a00004 	mov	r0, r4
   11790:	e28dd024 	add	sp, sp, #36	; 0x24
   11794:	e8bd8030 	pop	{r4, r5, pc}
   11798:	e28d0008 	add	r0, sp, #8
   1179c:	e5824000 	str	r4, [r2]
   117a0:	ebffe0e4 	bl	9b38 <CBcmPropertyTags::CBcmPropertyTags()>
   117a4:	e58d5000 	str	r5, [sp]
   117a8:	e28d0008 	add	r0, sp, #8
   117ac:	e3a03014 	mov	r3, #20
   117b0:	e28d200c 	add	r2, sp, #12
   117b4:	e59f1088 	ldr	r1, [pc, #136]	; 11844 <CMemorySystem::CMemorySystem(bool)+0xe4>
   117b8:	ebffe135 	bl	9c94 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   117bc:	e3500000 	cmp	r0, #0
   117c0:	0a000018 	beq	11828 <CMemorySystem::CMemorySystem(bool)+0xc8>
   117c4:	e59d0018 	ldr	r0, [sp, #24]
   117c8:	e3500000 	cmp	r0, #0
   117cc:	0a000019 	beq	11838 <CMemorySystem::CMemorySystem(bool)+0xd8>
   117d0:	e59f1070 	ldr	r1, [pc, #112]	; 11848 <CMemorySystem::CMemorySystem(bool)+0xe8>
   117d4:	e59f0070 	ldr	r0, [pc, #112]	; 1184c <CMemorySystem::CMemorySystem(bool)+0xec>
   117d8:	e3a02047 	mov	r2, #71	; 0x47
   117dc:	ebffe0b1 	bl	9aa8 <assertion_failed>
   117e0:	e59d101c 	ldr	r1, [sp, #28]
   117e4:	e59d0018 	ldr	r0, [sp, #24]
   117e8:	e5841004 	str	r1, [r4, #4]
   117ec:	eb0000ae 	bl	11aac <mem_init>
   117f0:	e5d43000 	ldrb	r3, [r4]
   117f4:	e3530000 	cmp	r3, #0
   117f8:	0a000007 	beq	1181c <CMemorySystem::CMemorySystem(bool)+0xbc>
   117fc:	e3a00004 	mov	r0, #4
   11800:	eb0000a3 	bl	11a94 <operator new(unsigned int)>
   11804:	e1a05000 	mov	r5, r0
   11808:	e5941004 	ldr	r1, [r4, #4]
   1180c:	eb000012 	bl	1185c <CPageTable::CPageTable(unsigned int)>
   11810:	e5845008 	str	r5, [r4, #8]
   11814:	e1a00004 	mov	r0, r4
   11818:	ebffff99 	bl	11684 <CMemorySystem::EnableMMU()>
   1181c:	e28d0008 	add	r0, sp, #8
   11820:	ebffe0ca 	bl	9b50 <CBcmPropertyTags::~CBcmPropertyTags()>
   11824:	eaffffd8 	b	1178c <CMemorySystem::CMemorySystem(bool)+0x2c>
   11828:	e3a01303 	mov	r1, #201326592	; 0xc000000
   1182c:	e58d0018 	str	r0, [sp, #24]
   11830:	e58d101c 	str	r1, [sp, #28]
   11834:	eaffffeb 	b	117e8 <CMemorySystem::CMemorySystem(bool)+0x88>
   11838:	e59d101c 	ldr	r1, [sp, #28]
   1183c:	eaffffe9 	b	117e8 <CMemorySystem::CMemorySystem(bool)+0x88>
   11840:	00015360 	.word	0x00015360
   11844:	00010005 	.word	0x00010005
   11848:	00013fc0 	.word	0x00013fc0
   1184c:	0001401c 	.word	0x0001401c

00011850 <CMemorySystem::GetCoherentPage(unsigned int)>:
   11850:	e1a00600 	lsl	r0, r0, #12
   11854:	e2800501 	add	r0, r0, #4194304	; 0x400000
   11858:	e12fff1e 	bx	lr

0001185c <CPageTable::CPageTable(unsigned int)>:
   1185c:	e3a02709 	mov	r2, #2359296	; 0x240000
   11860:	e3a03000 	mov	r3, #0
   11864:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   11868:	e59fc074 	ldr	ip, [pc, #116]	; 118e4 <CPageTable::CPageTable(unsigned int)+0x88>
   1186c:	e59f4074 	ldr	r4, [pc, #116]	; 118e8 <CPageTable::CPageTable(unsigned int)+0x8c>
   11870:	e59f5074 	ldr	r5, [pc, #116]	; 118ec <CPageTable::CPageTable(unsigned int)+0x90>
   11874:	e59f9074 	ldr	r9, [pc, #116]	; 118f0 <CPageTable::CPageTable(unsigned int)+0x94>
   11878:	e59f8074 	ldr	r8, [pc, #116]	; 118f4 <CPageTable::CPageTable(unsigned int)+0x98>
   1187c:	e59f7074 	ldr	r7, [pc, #116]	; 118f8 <CPageTable::CPageTable(unsigned int)+0x9c>
   11880:	e59f6074 	ldr	r6, [pc, #116]	; 118fc <CPageTable::CPageTable(unsigned int)+0xa0>
   11884:	e59fe074 	ldr	lr, [pc, #116]	; 11900 <CPageTable::CPageTable(unsigned int)+0xa4>
   11888:	e5802000 	str	r2, [r0]
   1188c:	e1530004 	cmp	r3, r4
   11890:	31a02005 	movcc	r2, r5
   11894:	3a000007 	bcc	118b8 <CPageTable::CPageTable(unsigned int)+0x5c>
   11898:	e3530501 	cmp	r3, #4194304	; 0x400000
   1189c:	0a00000e 	beq	118dc <CPageTable::CPageTable(unsigned int)+0x80>
   118a0:	e1510003 	cmp	r1, r3
   118a4:	81a02008 	movhi	r2, r8
   118a8:	8a000002 	bhi	118b8 <CPageTable::CPageTable(unsigned int)+0x5c>
   118ac:	e1530007 	cmp	r3, r7
   118b0:	91a02006 	movls	r2, r6
   118b4:	83a02000 	movhi	r2, #0
   118b8:	e1822003 	orr	r2, r2, r3
   118bc:	e5ac2004 	str	r2, [ip, #4]!
   118c0:	e15c000e 	cmp	ip, lr
   118c4:	e2833601 	add	r3, r3, #1048576	; 0x100000
   118c8:	1affffef 	bne	1188c <CPageTable::CPageTable(unsigned int)+0x30>
   118cc:	e3a03000 	mov	r3, #0
   118d0:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
   118d4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   118d8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   118dc:	e1a02009 	mov	r2, r9
   118e0:	eafffff4 	b	118b8 <CPageTable::CPageTable(unsigned int)+0x5c>
   118e4:	0023fffc 	.word	0x0023fffc
   118e8:	00012fcc 	.word	0x00012fcc
   118ec:	0000040e 	.word	0x0000040e
   118f0:	00010412 	.word	0x00010412
   118f4:	0000041e 	.word	0x0000041e
   118f8:	20fffffe 	.word	0x20fffffe
   118fc:	00010416 	.word	0x00010416
   11900:	00243ffc 	.word	0x00243ffc

00011904 <CPageTable::~CPageTable()>:
   11904:	e12fff1e 	bx	lr

00011908 <CPageTable::GetBaseAddress() const>:
   11908:	e5900000 	ldr	r0, [r0]
   1190c:	e3800001 	orr	r0, r0, #1
   11910:	e12fff1e 	bx	lr

00011914 <CurrentExecutionLevel>:
   11914:	e10f0000 	mrs	r0, CPSR
   11918:	e3100040 	tst	r0, #64	; 0x40
   1191c:	01a003a0 	lsreq	r0, r0, #7
   11920:	02000001 	andeq	r0, r0, #1
   11924:	13a00002 	movne	r0, #2
   11928:	e12fff1e 	bx	lr

0001192c <EnterCritical>:
   1192c:	e2403001 	sub	r3, r0, #1
   11930:	e3530001 	cmp	r3, #1
   11934:	e92d4070 	push	{r4, r5, r6, lr}
   11938:	e1a05000 	mov	r5, r0
   1193c:	9a000003 	bls	11950 <EnterCritical+0x24>
   11940:	e3a02064 	mov	r2, #100	; 0x64
   11944:	e59f1080 	ldr	r1, [pc, #128]	; 119cc <EnterCritical+0xa0>
   11948:	e59f0080 	ldr	r0, [pc, #128]	; 119d0 <EnterCritical+0xa4>
   1194c:	ebffe055 	bl	9aa8 <assertion_failed>
   11950:	e10f6000 	mrs	r6, CPSR
   11954:	e3550002 	cmp	r5, #2
   11958:	0a000001 	beq	11964 <EnterCritical+0x38>
   1195c:	e3160040 	tst	r6, #64	; 0x40
   11960:	1a000014 	bne	119b8 <EnterCritical+0x8c>
   11964:	f10c00c0 	cpsid	if
   11968:	e59f4064 	ldr	r4, [pc, #100]	; 119d4 <EnterCritical+0xa8>
   1196c:	e5943000 	ldr	r3, [r4]
   11970:	e3530013 	cmp	r3, #19
   11974:	8a00000a 	bhi	119a4 <EnterCritical+0x78>
   11978:	e5943000 	ldr	r3, [r4]
   1197c:	e3550001 	cmp	r5, #1
   11980:	e2832001 	add	r2, r3, #1
   11984:	e0843103 	add	r3, r4, r3, lsl #2
   11988:	e5842000 	str	r2, [r4]
   1198c:	e5836004 	str	r6, [r3, #4]
   11990:	1a000000 	bne	11998 <EnterCritical+0x6c>
   11994:	f1080040 	cpsie	f
   11998:	e3a03000 	mov	r3, #0
   1199c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   119a0:	e8bd8070 	pop	{r4, r5, r6, pc}
   119a4:	e3a0206e 	mov	r2, #110	; 0x6e
   119a8:	e59f101c 	ldr	r1, [pc, #28]	; 119cc <EnterCritical+0xa0>
   119ac:	e59f0024 	ldr	r0, [pc, #36]	; 119d8 <EnterCritical+0xac>
   119b0:	ebffe03c 	bl	9aa8 <assertion_failed>
   119b4:	eaffffef 	b	11978 <EnterCritical+0x4c>
   119b8:	e3a0206a 	mov	r2, #106	; 0x6a
   119bc:	e59f1008 	ldr	r1, [pc, #8]	; 119cc <EnterCritical+0xa0>
   119c0:	e59f0014 	ldr	r0, [pc, #20]	; 119dc <EnterCritical+0xb0>
   119c4:	ebffe037 	bl	9aa8 <assertion_failed>
   119c8:	eaffffe5 	b	11964 <EnterCritical+0x38>
   119cc:	00014038 	.word	0x00014038
   119d0:	00014048 	.word	0x00014048
   119d4:	00015364 	.word	0x00015364
   119d8:	000140b0 	.word	0x000140b0
   119dc:	00014080 	.word	0x00014080

000119e0 <LeaveCritical>:
   119e0:	e92d4010 	push	{r4, lr}
   119e4:	e3a03000 	mov	r3, #0
   119e8:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   119ec:	f10c0040 	cpsid	f
   119f0:	e59f4034 	ldr	r4, [pc, #52]	; 11a2c <LeaveCritical+0x4c>
   119f4:	e5943000 	ldr	r3, [r4]
   119f8:	e3530000 	cmp	r3, #0
   119fc:	1a000003 	bne	11a10 <LeaveCritical+0x30>
   11a00:	e3a0207f 	mov	r2, #127	; 0x7f
   11a04:	e59f1024 	ldr	r1, [pc, #36]	; 11a30 <LeaveCritical+0x50>
   11a08:	e59f0024 	ldr	r0, [pc, #36]	; 11a34 <LeaveCritical+0x54>
   11a0c:	ebffe025 	bl	9aa8 <assertion_failed>
   11a10:	e5943000 	ldr	r3, [r4]
   11a14:	e2433001 	sub	r3, r3, #1
   11a18:	e5843000 	str	r3, [r4]
   11a1c:	e0844103 	add	r4, r4, r3, lsl #2
   11a20:	e5943004 	ldr	r3, [r4, #4]
   11a24:	e121f003 	msr	CPSR_c, r3
   11a28:	e8bd8010 	pop	{r4, pc}
   11a2c:	00015364 	.word	0x00015364
   11a30:	00014038 	.word	0x00014038
   11a34:	000140d8 	.word	0x000140d8

00011a38 <CleanAndInvalidateDataCacheRange>:
   11a38:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
   11a3c:	e2813020 	add	r3, r1, #32
   11a40:	e353001f 	cmp	r3, #31
   11a44:	82800020 	addhi	r0, r0, #32
   11a48:	83c1101f 	bichi	r1, r1, #31
   11a4c:	80801001 	addhi	r1, r0, r1
   11a50:	8a000001 	bhi	11a5c <CleanAndInvalidateDataCacheRange+0x24>
   11a54:	ea000003 	b	11a68 <CleanAndInvalidateDataCacheRange+0x30>
   11a58:	e2800020 	add	r0, r0, #32
   11a5c:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
   11a60:	e1510000 	cmp	r1, r0
   11a64:	1afffffb 	bne	11a58 <CleanAndInvalidateDataCacheRange+0x20>
   11a68:	e3a03000 	mov	r3, #0
   11a6c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   11a70:	e12fff1e 	bx	lr

00011a74 <SyncDataAndInstructionCache>:
   11a74:	e3a03000 	mov	r3, #0
   11a78:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
   11a7c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   11a80:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   11a84:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   11a88:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   11a8c:	ee073f95 	mcr	15, 0, r3, cr7, cr5, {4}
   11a90:	e12fff1e 	bx	lr

00011a94 <operator new(unsigned int)>:
   11a94:	ea00001d 	b	11b10 <malloc>

00011a98 <operator new[](unsigned int)>:
   11a98:	ea00001c 	b	11b10 <malloc>

00011a9c <operator delete(void*)>:
   11a9c:	ea000099 	b	11d08 <free>

00011aa0 <operator delete[](void*)>:
   11aa0:	ea000098 	b	11d08 <free>

00011aa4 <operator delete(void*, unsigned int)>:
   11aa4:	ea000097 	b	11d08 <free>

00011aa8 <operator delete[](void*, unsigned int)>:
   11aa8:	ea000096 	b	11d08 <free>

00011aac <mem_init>:
   11aac:	e3500605 	cmp	r0, #5242880	; 0x500000
   11ab0:	21a0c000 	movcs	ip, r0
   11ab4:	33a0c605 	movcc	ip, #5242880	; 0x500000
   11ab8:	e0801001 	add	r1, r0, r1
   11abc:	e24139ff 	sub	r3, r1, #4177920	; 0x3fc000
   11ac0:	e2433a03 	sub	r3, r3, #12288	; 0x3000
   11ac4:	e59f2018 	ldr	r2, [pc, #24]	; 11ae4 <mem_init+0x38>
   11ac8:	e3c33eff 	bic	r3, r3, #4080	; 0xff0
   11acc:	e2410501 	sub	r0, r1, #4194304	; 0x400000
   11ad0:	e3c3300f 	bic	r3, r3, #15
   11ad4:	e582c000 	str	ip, [r2]
   11ad8:	e582100c 	str	r1, [r2, #12]
   11adc:	e9820009 	stmib	r2, {r0, r3}
   11ae0:	e12fff1e 	bx	lr
   11ae4:	000153b8 	.word	0x000153b8

00011ae8 <mem_get_size>:
   11ae8:	e59f301c 	ldr	r3, [pc, #28]	; 11b0c <mem_get_size+0x24>
   11aec:	e5930004 	ldr	r0, [r3, #4]
   11af0:	e5931000 	ldr	r1, [r3]
   11af4:	e593200c 	ldr	r2, [r3, #12]
   11af8:	e5933008 	ldr	r3, [r3, #8]
   11afc:	e0400001 	sub	r0, r0, r1
   11b00:	e0423003 	sub	r3, r2, r3
   11b04:	e0800003 	add	r0, r0, r3
   11b08:	e12fff1e 	bx	lr
   11b0c:	000153b8 	.word	0x000153b8

00011b10 <malloc>:
   11b10:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   11b14:	e59f71c8 	ldr	r7, [pc, #456]	; 11ce4 <malloc+0x1d4>
   11b18:	e1a05000 	mov	r5, r0
   11b1c:	e5973000 	ldr	r3, [r7]
   11b20:	e3530000 	cmp	r3, #0
   11b24:	0a000069 	beq	11cd0 <malloc+0x1c0>
   11b28:	e5970010 	ldr	r0, [r7, #16]
   11b2c:	e3500000 	cmp	r0, #0
   11b30:	1a000057 	bne	11c94 <malloc+0x184>
   11b34:	e59f21ac 	ldr	r2, [pc, #428]	; 11ce8 <malloc+0x1d8>
   11b38:	e5923000 	ldr	r3, [r2]
   11b3c:	e3530000 	cmp	r3, #0
   11b40:	0a000008 	beq	11b68 <malloc+0x58>
   11b44:	e1550003 	cmp	r5, r3
   11b48:	e1a04002 	mov	r4, r2
   11b4c:	8a000002 	bhi	11b5c <malloc+0x4c>
   11b50:	ea000024 	b	11be8 <malloc+0xd8>
   11b54:	e1530005 	cmp	r3, r5
   11b58:	2a000022 	bcs	11be8 <malloc+0xd8>
   11b5c:	e5b43008 	ldr	r3, [r4, #8]!
   11b60:	e3530000 	cmp	r3, #0
   11b64:	1afffffa 	bne	11b54 <malloc+0x44>
   11b68:	e5976000 	ldr	r6, [r7]
   11b6c:	e285301f 	add	r3, r5, #31
   11b70:	e3c3300f 	bic	r3, r3, #15
   11b74:	e0863003 	add	r3, r6, r3
   11b78:	e1560003 	cmp	r6, r3
   11b7c:	2a000046 	bcs	11c9c <malloc+0x18c>
   11b80:	e5971004 	ldr	r1, [r7, #4]
   11b84:	e5920040 	ldr	r0, [r2, #64]	; 0x40
   11b88:	e0411000 	sub	r1, r1, r0
   11b8c:	e1530001 	cmp	r3, r1
   11b90:	8a000041 	bhi	11c9c <malloc+0x18c>
   11b94:	e3a0e043 	mov	lr, #67	; 0x43
   11b98:	e3a0c04d 	mov	ip, #77	; 0x4d
   11b9c:	e3a0004c 	mov	r0, #76	; 0x4c
   11ba0:	e3a01042 	mov	r1, #66	; 0x42
   11ba4:	e5873000 	str	r3, [r7]
   11ba8:	e1a03825 	lsr	r3, r5, #16
   11bac:	e5c63006 	strb	r3, [r6, #6]
   11bb0:	e5973010 	ldr	r3, [r7, #16]
   11bb4:	e1a02425 	lsr	r2, r5, #8
   11bb8:	e5c65004 	strb	r5, [r6, #4]
   11bbc:	e3530000 	cmp	r3, #0
   11bc0:	e1a05c25 	lsr	r5, r5, #24
   11bc4:	e5c6e000 	strb	lr, [r6]
   11bc8:	e5c6c001 	strb	ip, [r6, #1]
   11bcc:	e5c60002 	strb	r0, [r6, #2]
   11bd0:	e5c61003 	strb	r1, [r6, #3]
   11bd4:	e5c62005 	strb	r2, [r6, #5]
   11bd8:	e5c65007 	strb	r5, [r6, #7]
   11bdc:	0a00001e 	beq	11c5c <malloc+0x14c>
   11be0:	ebffff7e 	bl	119e0 <LeaveCritical>
   11be4:	ea00001c 	b	11c5c <malloc+0x14c>
   11be8:	e5946004 	ldr	r6, [r4, #4]
   11bec:	e3560000 	cmp	r6, #0
   11bf0:	01a05003 	moveq	r5, r3
   11bf4:	0affffdb 	beq	11b68 <malloc+0x58>
   11bf8:	e5d61001 	ldrb	r1, [r6, #1]
   11bfc:	e5d63000 	ldrb	r3, [r6]
   11c00:	e5d62002 	ldrb	r2, [r6, #2]
   11c04:	e1833401 	orr	r3, r3, r1, lsl #8
   11c08:	e5d61003 	ldrb	r1, [r6, #3]
   11c0c:	e1833802 	orr	r3, r3, r2, lsl #16
   11c10:	e59f20d4 	ldr	r2, [pc, #212]	; 11cec <malloc+0x1dc>
   11c14:	e1833c01 	orr	r3, r3, r1, lsl #24
   11c18:	e1530002 	cmp	r3, r2
   11c1c:	0a000003 	beq	11c30 <malloc+0x120>
   11c20:	e3a0208a 	mov	r2, #138	; 0x8a
   11c24:	e59f10c4 	ldr	r1, [pc, #196]	; 11cf0 <malloc+0x1e0>
   11c28:	e59f00c4 	ldr	r0, [pc, #196]	; 11cf4 <malloc+0x1e4>
   11c2c:	ebffdf9d 	bl	9aa8 <assertion_failed>
   11c30:	e5d62009 	ldrb	r2, [r6, #9]
   11c34:	e5d63008 	ldrb	r3, [r6, #8]
   11c38:	e5d6100a 	ldrb	r1, [r6, #10]
   11c3c:	e1833402 	orr	r3, r3, r2, lsl #8
   11c40:	e5d6200b 	ldrb	r2, [r6, #11]
   11c44:	e1833801 	orr	r3, r3, r1, lsl #16
   11c48:	e1833c02 	orr	r3, r3, r2, lsl #24
   11c4c:	e5843004 	str	r3, [r4, #4]
   11c50:	e5973010 	ldr	r3, [r7, #16]
   11c54:	e3530000 	cmp	r3, #0
   11c58:	1affffe0 	bne	11be0 <malloc+0xd0>
   11c5c:	e3a03000 	mov	r3, #0
   11c60:	e2864010 	add	r4, r6, #16
   11c64:	e314000f 	tst	r4, #15
   11c68:	e5c63008 	strb	r3, [r6, #8]
   11c6c:	e5c63009 	strb	r3, [r6, #9]
   11c70:	e5c6300a 	strb	r3, [r6, #10]
   11c74:	e5c6300b 	strb	r3, [r6, #11]
   11c78:	0a000003 	beq	11c8c <malloc+0x17c>
   11c7c:	e3a020b3 	mov	r2, #179	; 0xb3
   11c80:	e59f1068 	ldr	r1, [pc, #104]	; 11cf0 <malloc+0x1e0>
   11c84:	e59f006c 	ldr	r0, [pc, #108]	; 11cf8 <malloc+0x1e8>
   11c88:	ebffdf86 	bl	9aa8 <assertion_failed>
   11c8c:	e1a00004 	mov	r0, r4
   11c90:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   11c94:	ebffff24 	bl	1192c <EnterCritical>
   11c98:	eaffffa5 	b	11b34 <malloc+0x24>
   11c9c:	e3a01000 	mov	r1, #0
   11ca0:	e5973010 	ldr	r3, [r7, #16]
   11ca4:	e5821040 	str	r1, [r2, #64]	; 0x40
   11ca8:	e1530001 	cmp	r3, r1
   11cac:	0a000000 	beq	11cb4 <malloc+0x1a4>
   11cb0:	ebffff4a 	bl	119e0 <LeaveCritical>
   11cb4:	ebffe8a4 	bl	bf4c <CLogger::Get()>
   11cb8:	e59f303c 	ldr	r3, [pc, #60]	; 11cfc <malloc+0x1ec>
   11cbc:	e3a02000 	mov	r2, #0
   11cc0:	e59f1038 	ldr	r1, [pc, #56]	; 11d00 <malloc+0x1f0>
   11cc4:	ebffea49 	bl	c5f0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11cc8:	e3a04000 	mov	r4, #0
   11ccc:	eaffffee 	b	11c8c <malloc+0x17c>
   11cd0:	e3a02070 	mov	r2, #112	; 0x70
   11cd4:	e59f1014 	ldr	r1, [pc, #20]	; 11cf0 <malloc+0x1e0>
   11cd8:	e59f0024 	ldr	r0, [pc, #36]	; 11d04 <malloc+0x1f4>
   11cdc:	ebffdf71 	bl	9aa8 <assertion_failed>
   11ce0:	eaffff90 	b	11b28 <malloc+0x18>
   11ce4:	000153b8 	.word	0x000153b8
   11ce8:	00015260 	.word	0x00015260
   11cec:	424c4d43 	.word	0x424c4d43
   11cf0:	000140f0 	.word	0x000140f0
   11cf4:	00014110 	.word	0x00014110
   11cf8:	0001414c 	.word	0x0001414c
   11cfc:	00014134 	.word	0x00014134
   11d00:	00014144 	.word	0x00014144
   11d04:	000140fc 	.word	0x000140fc

00011d08 <free>:
   11d08:	e3500000 	cmp	r0, #0
   11d0c:	012fff1e 	bxeq	lr
   11d10:	e92d4070 	push	{r4, r5, r6, lr}
   11d14:	e2405010 	sub	r5, r0, #16
   11d18:	e5d51001 	ldrb	r1, [r5, #1]
   11d1c:	e5503010 	ldrb	r3, [r0, #-16]
   11d20:	e5d52002 	ldrb	r2, [r5, #2]
   11d24:	e1833401 	orr	r3, r3, r1, lsl #8
   11d28:	e5d51003 	ldrb	r1, [r5, #3]
   11d2c:	e1833802 	orr	r3, r3, r2, lsl #16
   11d30:	e59f20dc 	ldr	r2, [pc, #220]	; 11e14 <free+0x10c>
   11d34:	e1833c01 	orr	r3, r3, r1, lsl #24
   11d38:	e1530002 	cmp	r3, r2
   11d3c:	0a000003 	beq	11d50 <free+0x48>
   11d40:	e3a020c0 	mov	r2, #192	; 0xc0
   11d44:	e59f10cc 	ldr	r1, [pc, #204]	; 11e18 <free+0x110>
   11d48:	e59f00cc 	ldr	r0, [pc, #204]	; 11e1c <free+0x114>
   11d4c:	ebffdf55 	bl	9aa8 <assertion_failed>
   11d50:	e59f40c8 	ldr	r4, [pc, #200]	; 11e20 <free+0x118>
   11d54:	e5943000 	ldr	r3, [r4]
   11d58:	e3530000 	cmp	r3, #0
   11d5c:	08bd8070 	popeq	{r4, r5, r6, pc}
   11d60:	e5d51005 	ldrb	r1, [r5, #5]
   11d64:	e5d52004 	ldrb	r2, [r5, #4]
   11d68:	e5d50006 	ldrb	r0, [r5, #6]
   11d6c:	e1822401 	orr	r2, r2, r1, lsl #8
   11d70:	e5d51007 	ldrb	r1, [r5, #7]
   11d74:	e1822800 	orr	r2, r2, r0, lsl #16
   11d78:	e1822c01 	orr	r2, r2, r1, lsl #24
   11d7c:	e1520003 	cmp	r2, r3
   11d80:	1a000002 	bne	11d90 <free+0x88>
   11d84:	ea000005 	b	11da0 <free+0x98>
   11d88:	e1530002 	cmp	r3, r2
   11d8c:	0a000003 	beq	11da0 <free+0x98>
   11d90:	e5b43008 	ldr	r3, [r4, #8]!
   11d94:	e3530000 	cmp	r3, #0
   11d98:	1afffffa 	bne	11d88 <free+0x80>
   11d9c:	e8bd8070 	pop	{r4, r5, r6, pc}
   11da0:	e59f607c 	ldr	r6, [pc, #124]	; 11e24 <free+0x11c>
   11da4:	e5960010 	ldr	r0, [r6, #16]
   11da8:	e3500000 	cmp	r0, #0
   11dac:	1a000009 	bne	11dd8 <free+0xd0>
   11db0:	e5d40004 	ldrb	r0, [r4, #4]
   11db4:	e5d41005 	ldrb	r1, [r4, #5]
   11db8:	e5d42006 	ldrb	r2, [r4, #6]
   11dbc:	e5d43007 	ldrb	r3, [r4, #7]
   11dc0:	e5c50008 	strb	r0, [r5, #8]
   11dc4:	e5c51009 	strb	r1, [r5, #9]
   11dc8:	e5c5200a 	strb	r2, [r5, #10]
   11dcc:	e5c5300b 	strb	r3, [r5, #11]
   11dd0:	e5845004 	str	r5, [r4, #4]
   11dd4:	e8bd8070 	pop	{r4, r5, r6, pc}
   11dd8:	ebfffed3 	bl	1192c <EnterCritical>
   11ddc:	e596c010 	ldr	ip, [r6, #16]
   11de0:	e5d40004 	ldrb	r0, [r4, #4]
   11de4:	e5d41005 	ldrb	r1, [r4, #5]
   11de8:	e5d42006 	ldrb	r2, [r4, #6]
   11dec:	e5d43007 	ldrb	r3, [r4, #7]
   11df0:	e35c0000 	cmp	ip, #0
   11df4:	e5c50008 	strb	r0, [r5, #8]
   11df8:	e5c51009 	strb	r1, [r5, #9]
   11dfc:	e5c5200a 	strb	r2, [r5, #10]
   11e00:	e5c5300b 	strb	r3, [r5, #11]
   11e04:	e5845004 	str	r5, [r4, #4]
   11e08:	08bd8070 	popeq	{r4, r5, r6, pc}
   11e0c:	e8bd4070 	pop	{r4, r5, r6, lr}
   11e10:	eafffef2 	b	119e0 <LeaveCritical>
   11e14:	424c4d43 	.word	0x424c4d43
   11e18:	000140f0 	.word	0x000140f0
   11e1c:	00014110 	.word	0x00014110
   11e20:	00015260 	.word	0x00015260
   11e24:	000153b8 	.word	0x000153b8

00011e28 <calloc>:
   11e28:	e92d4070 	push	{r4, r5, r6, lr}
   11e2c:	e0040190 	mul	r4, r0, r1
   11e30:	e3540000 	cmp	r4, #0
   11e34:	03a04001 	moveq	r4, #1
   11e38:	e1540000 	cmp	r4, r0
   11e3c:	3a000008 	bcc	11e64 <calloc+0x3c>
   11e40:	e1a00004 	mov	r0, r4
   11e44:	ebffff31 	bl	11b10 <malloc>
   11e48:	e2505000 	subs	r5, r0, #0
   11e4c:	0a000002 	beq	11e5c <calloc+0x34>
   11e50:	e1a02004 	mov	r2, r4
   11e54:	e3a01000 	mov	r1, #0
   11e58:	ebfffa9f 	bl	108dc <memset>
   11e5c:	e1a00005 	mov	r0, r5
   11e60:	e8bd8070 	pop	{r4, r5, r6, pc}
   11e64:	e3a020e2 	mov	r2, #226	; 0xe2
   11e68:	e59f1008 	ldr	r1, [pc, #8]	; 11e78 <calloc+0x50>
   11e6c:	e59f0008 	ldr	r0, [pc, #8]	; 11e7c <calloc+0x54>
   11e70:	ebffdf0c 	bl	9aa8 <assertion_failed>
   11e74:	eafffff1 	b	11e40 <calloc+0x18>
   11e78:	000140f0 	.word	0x000140f0
   11e7c:	00014178 	.word	0x00014178

00011e80 <realloc>:
   11e80:	e92d4070 	push	{r4, r5, r6, lr}
   11e84:	e2505000 	subs	r5, r0, #0
   11e88:	e1a06001 	mov	r6, r1
   11e8c:	0a00002d 	beq	11f48 <realloc+0xc8>
   11e90:	e3510000 	cmp	r1, #0
   11e94:	0a000027 	beq	11f38 <realloc+0xb8>
   11e98:	e2454010 	sub	r4, r5, #16
   11e9c:	e5d41001 	ldrb	r1, [r4, #1]
   11ea0:	e5553010 	ldrb	r3, [r5, #-16]
   11ea4:	e5d42002 	ldrb	r2, [r4, #2]
   11ea8:	e1833401 	orr	r3, r3, r1, lsl #8
   11eac:	e5d41003 	ldrb	r1, [r4, #3]
   11eb0:	e1833802 	orr	r3, r3, r2, lsl #16
   11eb4:	e59f20a0 	ldr	r2, [pc, #160]	; 11f5c <realloc+0xdc>
   11eb8:	e1833c01 	orr	r3, r3, r1, lsl #24
   11ebc:	e1530002 	cmp	r3, r2
   11ec0:	0a000003 	beq	11ed4 <realloc+0x54>
   11ec4:	e3a020fc 	mov	r2, #252	; 0xfc
   11ec8:	e59f1090 	ldr	r1, [pc, #144]	; 11f60 <realloc+0xe0>
   11ecc:	e59f0090 	ldr	r0, [pc, #144]	; 11f64 <realloc+0xe4>
   11ed0:	ebffdef4 	bl	9aa8 <assertion_failed>
   11ed4:	e5d42005 	ldrb	r2, [r4, #5]
   11ed8:	e5d43004 	ldrb	r3, [r4, #4]
   11edc:	e5d41006 	ldrb	r1, [r4, #6]
   11ee0:	e1833402 	orr	r3, r3, r2, lsl #8
   11ee4:	e5d42007 	ldrb	r2, [r4, #7]
   11ee8:	e1833801 	orr	r3, r3, r1, lsl #16
   11eec:	e1833c02 	orr	r3, r3, r2, lsl #24
   11ef0:	e1560003 	cmp	r6, r3
   11ef4:	8a000001 	bhi	11f00 <realloc+0x80>
   11ef8:	e1a00005 	mov	r0, r5
   11efc:	e8bd8070 	pop	{r4, r5, r6, pc}
   11f00:	e1a00006 	mov	r0, r6
   11f04:	ebffff01 	bl	11b10 <malloc>
   11f08:	e2506000 	subs	r6, r0, #0
   11f0c:	0a000010 	beq	11f54 <realloc+0xd4>
   11f10:	e5d42005 	ldrb	r2, [r4, #5]
   11f14:	e5d43004 	ldrb	r3, [r4, #4]
   11f18:	e5d41006 	ldrb	r1, [r4, #6]
   11f1c:	e1833402 	orr	r3, r3, r2, lsl #8
   11f20:	e5d42007 	ldrb	r2, [r4, #7]
   11f24:	e1833801 	orr	r3, r3, r1, lsl #16
   11f28:	e1832c02 	orr	r2, r3, r2, lsl #24
   11f2c:	e1a01005 	mov	r1, r5
   11f30:	ebfffbdb 	bl	10ea4 <memcpy>
   11f34:	e1a00005 	mov	r0, r5
   11f38:	e1a05006 	mov	r5, r6
   11f3c:	ebffff71 	bl	11d08 <free>
   11f40:	e1a00005 	mov	r0, r5
   11f44:	e8bd8070 	pop	{r4, r5, r6, pc}
   11f48:	e1a00001 	mov	r0, r1
   11f4c:	e8bd4070 	pop	{r4, r5, r6, lr}
   11f50:	eafffeee 	b	11b10 <malloc>
   11f54:	e1a05006 	mov	r5, r6
   11f58:	eaffffe6 	b	11ef8 <realloc+0x78>
   11f5c:	424c4d43 	.word	0x424c4d43
   11f60:	000140f0 	.word	0x000140f0
   11f64:	00014110 	.word	0x00014110

00011f68 <palloc>:
   11f68:	e92d4070 	push	{r4, r5, r6, lr}
   11f6c:	e59f50c4 	ldr	r5, [pc, #196]	; 12038 <palloc+0xd0>
   11f70:	e5953008 	ldr	r3, [r5, #8]
   11f74:	e3530000 	cmp	r3, #0
   11f78:	0a000029 	beq	12024 <palloc+0xbc>
   11f7c:	e5950014 	ldr	r0, [r5, #20]
   11f80:	e3500000 	cmp	r0, #0
   11f84:	1a000016 	bne	11fe4 <palloc+0x7c>
   11f88:	e5954018 	ldr	r4, [r5, #24]
   11f8c:	e3540000 	cmp	r4, #0
   11f90:	0a000017 	beq	11ff4 <palloc+0x8c>
   11f94:	e59f30a0 	ldr	r3, [pc, #160]	; 1203c <palloc+0xd4>
   11f98:	e5942000 	ldr	r2, [r4]
   11f9c:	e1520003 	cmp	r2, r3
   11fa0:	0a000003 	beq	11fb4 <palloc+0x4c>
   11fa4:	e59f2094 	ldr	r2, [pc, #148]	; 12040 <palloc+0xd8>
   11fa8:	e59f1094 	ldr	r1, [pc, #148]	; 12044 <palloc+0xdc>
   11fac:	e59f0094 	ldr	r0, [pc, #148]	; 12048 <palloc+0xe0>
   11fb0:	ebffdebc 	bl	9aa8 <assertion_failed>
   11fb4:	e3a02000 	mov	r2, #0
   11fb8:	e5943004 	ldr	r3, [r4, #4]
   11fbc:	e5842000 	str	r2, [r4]
   11fc0:	e5853018 	str	r3, [r5, #24]
   11fc4:	e5953014 	ldr	r3, [r5, #20]
   11fc8:	e3530000 	cmp	r3, #0
   11fcc:	1a000001 	bne	11fd8 <palloc+0x70>
   11fd0:	e1a00004 	mov	r0, r4
   11fd4:	e8bd8070 	pop	{r4, r5, r6, pc}
   11fd8:	ebfffe80 	bl	119e0 <LeaveCritical>
   11fdc:	e1a00004 	mov	r0, r4
   11fe0:	e8bd8070 	pop	{r4, r5, r6, pc}
   11fe4:	ebfffe50 	bl	1192c <EnterCritical>
   11fe8:	e5954018 	ldr	r4, [r5, #24]
   11fec:	e3540000 	cmp	r4, #0
   11ff0:	1affffe7 	bne	11f94 <palloc+0x2c>
   11ff4:	e5954008 	ldr	r4, [r5, #8]
   11ff8:	e595200c 	ldr	r2, [r5, #12]
   11ffc:	e2843a01 	add	r3, r4, #4096	; 0x1000
   12000:	e1530002 	cmp	r3, r2
   12004:	e5853008 	str	r3, [r5, #8]
   12008:	9affffed 	bls	11fc4 <palloc+0x5c>
   1200c:	e5954014 	ldr	r4, [r5, #20]
   12010:	e3540000 	cmp	r4, #0
   12014:	0affffed 	beq	11fd0 <palloc+0x68>
   12018:	ebfffe70 	bl	119e0 <LeaveCritical>
   1201c:	e3a00000 	mov	r0, #0
   12020:	e8bd8070 	pop	{r4, r5, r6, pc}
   12024:	e59f2020 	ldr	r2, [pc, #32]	; 1204c <palloc+0xe4>
   12028:	e59f1014 	ldr	r1, [pc, #20]	; 12044 <palloc+0xdc>
   1202c:	e59f001c 	ldr	r0, [pc, #28]	; 12050 <palloc+0xe8>
   12030:	ebffde9c 	bl	9aa8 <assertion_failed>
   12034:	eaffffd0 	b	11f7c <palloc+0x14>
   12038:	000153b8 	.word	0x000153b8
   1203c:	50474d43 	.word	0x50474d43
   12040:	0000011f 	.word	0x0000011f
   12044:	000140f0 	.word	0x000140f0
   12048:	000141a0 	.word	0x000141a0
   1204c:	00000111 	.word	0x00000111
   12050:	0001418c 	.word	0x0001418c

00012054 <pfree>:
   12054:	e92d4070 	push	{r4, r5, r6, lr}
   12058:	e2504000 	subs	r4, r0, #0
   1205c:	08bd8070 	popeq	{r4, r5, r6, pc}
   12060:	e59f5044 	ldr	r5, [pc, #68]	; 120ac <pfree+0x58>
   12064:	e5950014 	ldr	r0, [r5, #20]
   12068:	e3500000 	cmp	r0, #0
   1206c:	1a000004 	bne	12084 <pfree+0x30>
   12070:	e5952018 	ldr	r2, [r5, #24]
   12074:	e59f1034 	ldr	r1, [pc, #52]	; 120b0 <pfree+0x5c>
   12078:	e5854018 	str	r4, [r5, #24]
   1207c:	e8840006 	stm	r4, {r1, r2}
   12080:	e8bd8070 	pop	{r4, r5, r6, pc}
   12084:	ebfffe28 	bl	1192c <EnterCritical>
   12088:	e5951014 	ldr	r1, [r5, #20]
   1208c:	e5953018 	ldr	r3, [r5, #24]
   12090:	e59f2018 	ldr	r2, [pc, #24]	; 120b0 <pfree+0x5c>
   12094:	e3510000 	cmp	r1, #0
   12098:	e884000c 	stm	r4, {r2, r3}
   1209c:	e5854018 	str	r4, [r5, #24]
   120a0:	08bd8070 	popeq	{r4, r5, r6, pc}
   120a4:	e8bd4070 	pop	{r4, r5, r6, lr}
   120a8:	eafffe4c 	b	119e0 <LeaveCritical>
   120ac:	000153b8 	.word	0x000153b8
   120b0:	50474d43 	.word	0x50474d43

000120b4 <_GLOBAL__sub_I_mem_init>:
   120b4:	e3a02001 	mov	r2, #1
   120b8:	e59f3008 	ldr	r3, [pc, #8]	; 120c8 <_GLOBAL__sub_I_mem_init+0x14>
   120bc:	e5832010 	str	r2, [r3, #16]
   120c0:	e5832014 	str	r2, [r3, #20]
   120c4:	e12fff1e 	bx	lr
   120c8:	000153b8 	.word	0x000153b8

000120cc <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>:
   120cc:	e3a02000 	mov	r2, #0
   120d0:	e3a01001 	mov	r1, #1
   120d4:	e92d4030 	push	{r4, r5, lr}
   120d8:	e1a04000 	mov	r4, r0
   120dc:	e5903020 	ldr	r3, [r0, #32]
   120e0:	e24dd014 	sub	sp, sp, #20
   120e4:	e5c31011 	strb	r1, [r3, #17]
   120e8:	e5c3200c 	strb	r2, [r3, #12]
   120ec:	e5c3200d 	strb	r2, [r3, #13]
   120f0:	e5c3200e 	strb	r2, [r3, #14]
   120f4:	e5c3200f 	strb	r2, [r3, #15]
   120f8:	e5c32010 	strb	r2, [r3, #16]
   120fc:	e5c32012 	strb	r2, [r3, #18]
   12100:	e5c32013 	strb	r2, [r3, #19]
   12104:	e28d000c 	add	r0, sp, #12
   12108:	ebffde8a 	bl	9b38 <CBcmPropertyTags::CBcmPropertyTags()>
   1210c:	e59f306c 	ldr	r3, [pc, #108]	; 12180 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0xb4>
   12110:	e5942020 	ldr	r2, [r4, #32]
   12114:	e28d000c 	add	r0, sp, #12
   12118:	e58d3000 	str	r3, [sp]
   1211c:	e59f1060 	ldr	r1, [pc, #96]	; 12184 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0xb8>
   12120:	e283300c 	add	r3, r3, #12
   12124:	ebffdeda 	bl	9c94 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   12128:	e2505000 	subs	r5, r0, #0
   1212c:	0a000008 	beq	12154 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x88>
   12130:	e5942020 	ldr	r2, [r4, #32]
   12134:	e5d2300c 	ldrb	r3, [r2, #12]
   12138:	e5d2000d 	ldrb	r0, [r2, #13]
   1213c:	e5d2100e 	ldrb	r1, [r2, #14]
   12140:	e1833400 	orr	r3, r3, r0, lsl #8
   12144:	e5d2200f 	ldrb	r2, [r2, #15]
   12148:	e1833801 	orr	r3, r3, r1, lsl #16
   1214c:	e1933c02 	orrs	r3, r3, r2, lsl #24
   12150:	0a000005 	beq	1216c <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0xa0>
   12154:	e3a05000 	mov	r5, #0
   12158:	e28d000c 	add	r0, sp, #12
   1215c:	ebffde7b 	bl	9b50 <CBcmPropertyTags::~CBcmPropertyTags()>
   12160:	e1a00005 	mov	r0, r5
   12164:	e28dd014 	add	sp, sp, #20
   12168:	e8bd8030 	pop	{r4, r5, pc}
   1216c:	e28d000c 	add	r0, sp, #12
   12170:	ebffde76 	bl	9b50 <CBcmPropertyTags::~CBcmPropertyTags()>
   12174:	e1a00005 	mov	r0, r5
   12178:	e28dd014 	add	sp, sp, #20
   1217c:	e8bd8030 	pop	{r4, r5, pc}
   12180:	00000408 	.word	0x00000408
   12184:	0004800b 	.word	0x0004800b

00012188 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
   12188:	e92d4030 	push	{r4, r5, lr}
   1218c:	e3510000 	cmp	r1, #0
   12190:	13520000 	cmpne	r2, #0
   12194:	e1a04000 	mov	r4, r0
   12198:	e3a05000 	mov	r5, #0
   1219c:	e24dd024 	sub	sp, sp, #36	; 0x24
   121a0:	e59dc034 	ldr	ip, [sp, #52]	; 0x34
   121a4:	e59d0030 	ldr	r0, [sp, #48]	; 0x30
   121a8:	e8840006 	stm	r4, {r1, r2}
   121ac:	e5843010 	str	r3, [r4, #16]
   121b0:	e584c00c 	str	ip, [r4, #12]
   121b4:	e5840008 	str	r0, [r4, #8]
   121b8:	e5845014 	str	r5, [r4, #20]
   121bc:	e5845018 	str	r5, [r4, #24]
   121c0:	e584501c 	str	r5, [r4, #28]
   121c4:	e5845020 	str	r5, [r4, #32]
   121c8:	1a000010 	bne	12210 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x88>
   121cc:	e28d0008 	add	r0, sp, #8
   121d0:	ebffde58 	bl	9b38 <CBcmPropertyTags::CBcmPropertyTags()>
   121d4:	e58d5000 	str	r5, [sp]
   121d8:	e28d0008 	add	r0, sp, #8
   121dc:	e3a03014 	mov	r3, #20
   121e0:	e28d200c 	add	r2, sp, #12
   121e4:	e59f10c8 	ldr	r1, [pc, #200]	; 122b4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x12c>
   121e8:	ebffdea9 	bl	9c94 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   121ec:	e1500005 	cmp	r0, r5
   121f0:	1a000026 	bne	12290 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x108>
   121f4:	e3a02d0a 	mov	r2, #640	; 0x280
   121f8:	e3a03e1e 	mov	r3, #480	; 0x1e0
   121fc:	e884000c 	stm	r4, {r2, r3}
   12200:	e28d0008 	add	r0, sp, #8
   12204:	ebffde51 	bl	9b50 <CBcmPropertyTags::~CBcmPropertyTags()>
   12208:	e5940008 	ldr	r0, [r4, #8]
   1220c:	e5943010 	ldr	r3, [r4, #16]
   12210:	e3500000 	cmp	r0, #0
   12214:	0a000019 	beq	12280 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xf8>
   12218:	e594200c 	ldr	r2, [r4, #12]
   1221c:	e3520000 	cmp	r2, #0
   12220:	0a000016 	beq	12280 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xf8>
   12224:	e3530008 	cmp	r3, #8
   12228:	8a000006 	bhi	12248 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xc0>
   1222c:	e59f0084 	ldr	r0, [pc, #132]	; 122b8 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x130>
   12230:	ebfffe18 	bl	11a98 <operator new[](unsigned int)>
   12234:	e3a02b01 	mov	r2, #1024	; 0x400
   12238:	e5840020 	str	r0, [r4, #32]
   1223c:	e3a01000 	mov	r1, #0
   12240:	e2800014 	add	r0, r0, #20
   12244:	ebfff9a4 	bl	108dc <memset>
   12248:	e3a02070 	mov	r2, #112	; 0x70
   1224c:	e59f1068 	ldr	r1, [pc, #104]	; 122bc <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x134>
   12250:	e2840024 	add	r0, r4, #36	; 0x24
   12254:	ebfffb12 	bl	10ea4 <memcpy>
   12258:	e994000f 	ldmib	r4, {r0, r1, r2, r3}
   1225c:	e5840034 	str	r0, [r4, #52]	; 0x34
   12260:	e1a00004 	mov	r0, r4
   12264:	e594c000 	ldr	ip, [r4]
   12268:	e5841044 	str	r1, [r4, #68]	; 0x44
   1226c:	e584c030 	str	ip, [r4, #48]	; 0x30
   12270:	e5842048 	str	r2, [r4, #72]	; 0x48
   12274:	e5843058 	str	r3, [r4, #88]	; 0x58
   12278:	e28dd024 	add	sp, sp, #36	; 0x24
   1227c:	e8bd8030 	pop	{r4, r5, pc}
   12280:	e8940006 	ldm	r4, {r1, r2}
   12284:	e5841008 	str	r1, [r4, #8]
   12288:	e584200c 	str	r2, [r4, #12]
   1228c:	eaffffe4 	b	12224 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x9c>
   12290:	e59d2018 	ldr	r2, [sp, #24]
   12294:	e59d301c 	ldr	r3, [sp, #28]
   12298:	e2420d0a 	sub	r0, r2, #640	; 0x280
   1229c:	e2431e1e 	sub	r1, r3, #480	; 0x1e0
   122a0:	e3510f96 	cmp	r1, #600	; 0x258
   122a4:	93500c05 	cmpls	r0, #1280	; 0x500
   122a8:	e884000c 	stm	r4, {r2, r3}
   122ac:	9affffd3 	bls	12200 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x78>
   122b0:	eaffffcf 	b	121f4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
   122b4:	00040003 	.word	0x00040003
   122b8:	00000414 	.word	0x00000414
   122bc:	000152a4 	.word	0x000152a4

000122c0 <CBcmFrameBuffer::~CBcmFrameBuffer()>:
   122c0:	e92d4010 	push	{r4, lr}
   122c4:	e1a04000 	mov	r4, r0
   122c8:	e3a01014 	mov	r1, #20
   122cc:	e5900020 	ldr	r0, [r0, #32]
   122d0:	ebfffdf3 	bl	11aa4 <operator delete(void*, unsigned int)>
   122d4:	e1a00004 	mov	r0, r4
   122d8:	e8bd8010 	pop	{r4, pc}

000122dc <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)>:
   122dc:	e5903010 	ldr	r3, [r0, #16]
   122e0:	e3530008 	cmp	r3, #8
   122e4:	812fff1e 	bxhi	lr
   122e8:	e1a03982 	lsl	r3, r2, #19
   122ec:	e1a0c5a2 	lsr	ip, r2, #11
   122f0:	e203373e 	and	r3, r3, #16252928	; 0xf80000
   122f4:	e183318c 	orr	r3, r3, ip, lsl #3
   122f8:	e1a02282 	lsl	r2, r2, #5
   122fc:	e5900020 	ldr	r0, [r0, #32]
   12300:	e38334ff 	orr	r3, r3, #-16777216	; 0xff000000
   12304:	e2022b3f 	and	r2, r2, #64512	; 0xfc00
   12308:	e1822003 	orr	r2, r2, r3
   1230c:	e2811004 	add	r1, r1, #4
   12310:	e0801101 	add	r1, r0, r1, lsl #2
   12314:	e1a0c422 	lsr	ip, r2, #8
   12318:	e1a00822 	lsr	r0, r2, #16
   1231c:	e1a03c22 	lsr	r3, r2, #24
   12320:	e5c12004 	strb	r2, [r1, #4]
   12324:	e5c1c005 	strb	ip, [r1, #5]
   12328:	e5c10006 	strb	r0, [r1, #6]
   1232c:	e5c13007 	strb	r3, [r1, #7]
   12330:	e12fff1e 	bx	lr

00012334 <CBcmFrameBuffer::SetPalette32(unsigned char, unsigned int)>:
   12334:	e5903010 	ldr	r3, [r0, #16]
   12338:	e3530008 	cmp	r3, #8
   1233c:	812fff1e 	bxhi	lr
   12340:	e5903020 	ldr	r3, [r0, #32]
   12344:	e2811004 	add	r1, r1, #4
   12348:	e0831101 	add	r1, r3, r1, lsl #2
   1234c:	e1a0c422 	lsr	ip, r2, #8
   12350:	e1a00822 	lsr	r0, r2, #16
   12354:	e1a03c22 	lsr	r3, r2, #24
   12358:	e5c12004 	strb	r2, [r1, #4]
   1235c:	e5c1c005 	strb	ip, [r1, #5]
   12360:	e5c10006 	strb	r0, [r1, #6]
   12364:	e5c13007 	strb	r3, [r1, #7]
   12368:	e12fff1e 	bx	lr

0001236c <CBcmFrameBuffer::Initialize()>:
   1236c:	e92d4030 	push	{r4, r5, lr}
   12370:	e1a04000 	mov	r4, r0
   12374:	e24dd00c 	sub	sp, sp, #12
   12378:	e28d0004 	add	r0, sp, #4
   1237c:	ebffdded 	bl	9b38 <CBcmPropertyTags::CBcmPropertyTags()>
   12380:	e2841024 	add	r1, r4, #36	; 0x24
   12384:	e28d0004 	add	r0, sp, #4
   12388:	e3a02070 	mov	r2, #112	; 0x70
   1238c:	ebffddf4 	bl	9b64 <CBcmPropertyTags::GetTags(void*, unsigned int)>
   12390:	e2505000 	subs	r5, r0, #0
   12394:	0a00001f 	beq	12418 <CBcmFrameBuffer::Initialize()+0xac>
   12398:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   1239c:	e3530000 	cmp	r3, #0
   123a0:	0a00001b 	beq	12414 <CBcmFrameBuffer::Initialize()+0xa8>
   123a4:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   123a8:	e3530000 	cmp	r3, #0
   123ac:	0a000018 	beq	12414 <CBcmFrameBuffer::Initialize()+0xa8>
   123b0:	e5943044 	ldr	r3, [r4, #68]	; 0x44
   123b4:	e3530000 	cmp	r3, #0
   123b8:	0a000015 	beq	12414 <CBcmFrameBuffer::Initialize()+0xa8>
   123bc:	e5943048 	ldr	r3, [r4, #72]	; 0x48
   123c0:	e3530000 	cmp	r3, #0
   123c4:	0a000012 	beq	12414 <CBcmFrameBuffer::Initialize()+0xa8>
   123c8:	e5943058 	ldr	r3, [r4, #88]	; 0x58
   123cc:	e3530000 	cmp	r3, #0
   123d0:	0a00000f 	beq	12414 <CBcmFrameBuffer::Initialize()+0xa8>
   123d4:	e594307c 	ldr	r3, [r4, #124]	; 0x7c
   123d8:	e3530000 	cmp	r3, #0
   123dc:	0a00000c 	beq	12414 <CBcmFrameBuffer::Initialize()+0xa8>
   123e0:	e5940010 	ldr	r0, [r4, #16]
   123e4:	e5941080 	ldr	r1, [r4, #128]	; 0x80
   123e8:	e5942090 	ldr	r2, [r4, #144]	; 0x90
   123ec:	e3c33103 	bic	r3, r3, #-1073741824	; 0xc0000000
   123f0:	e3500008 	cmp	r0, #8
   123f4:	e5843014 	str	r3, [r4, #20]
   123f8:	e5841018 	str	r1, [r4, #24]
   123fc:	e584201c 	str	r2, [r4, #28]
   12400:	8a000004 	bhi	12418 <CBcmFrameBuffer::Initialize()+0xac>
   12404:	e1a00004 	mov	r0, r4
   12408:	ebffff2f 	bl	120cc <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>
   1240c:	e1a05000 	mov	r5, r0
   12410:	ea000000 	b	12418 <CBcmFrameBuffer::Initialize()+0xac>
   12414:	e1a05003 	mov	r5, r3
   12418:	e28d0004 	add	r0, sp, #4
   1241c:	ebffddcb 	bl	9b50 <CBcmPropertyTags::~CBcmPropertyTags()>
   12420:	e1a00005 	mov	r0, r5
   12424:	e28dd00c 	add	sp, sp, #12
   12428:	e8bd8030 	pop	{r4, r5, pc}

0001242c <CBcmFrameBuffer::GetWidth() const>:
   1242c:	e5900000 	ldr	r0, [r0]
   12430:	e12fff1e 	bx	lr

00012434 <CBcmFrameBuffer::GetHeight() const>:
   12434:	e5900004 	ldr	r0, [r0, #4]
   12438:	e12fff1e 	bx	lr

0001243c <CBcmFrameBuffer::GetVirtWidth() const>:
   1243c:	e5900008 	ldr	r0, [r0, #8]
   12440:	e12fff1e 	bx	lr

00012444 <CBcmFrameBuffer::GetVirtHeight() const>:
   12444:	e590000c 	ldr	r0, [r0, #12]
   12448:	e12fff1e 	bx	lr

0001244c <CBcmFrameBuffer::GetPitch() const>:
   1244c:	e590001c 	ldr	r0, [r0, #28]
   12450:	e12fff1e 	bx	lr

00012454 <CBcmFrameBuffer::GetDepth() const>:
   12454:	e5900010 	ldr	r0, [r0, #16]
   12458:	e12fff1e 	bx	lr

0001245c <CBcmFrameBuffer::GetBuffer() const>:
   1245c:	e5900014 	ldr	r0, [r0, #20]
   12460:	e12fff1e 	bx	lr

00012464 <CBcmFrameBuffer::GetSize() const>:
   12464:	e5900018 	ldr	r0, [r0, #24]
   12468:	e12fff1e 	bx	lr

0001246c <CBcmFrameBuffer::UpdatePalette()>:
   1246c:	e5903010 	ldr	r3, [r0, #16]
   12470:	e3530008 	cmp	r3, #8
   12474:	9a000001 	bls	12480 <CBcmFrameBuffer::UpdatePalette()+0x14>
   12478:	e3a00001 	mov	r0, #1
   1247c:	e12fff1e 	bx	lr
   12480:	eaffff11 	b	120cc <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>

00012484 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)>:
   12484:	e92d4070 	push	{r4, r5, r6, lr}
   12488:	e24dd020 	sub	sp, sp, #32
   1248c:	e28d0008 	add	r0, sp, #8
   12490:	e1a05001 	mov	r5, r1
   12494:	e1a06002 	mov	r6, r2
   12498:	ebffdda6 	bl	9b38 <CBcmPropertyTags::CBcmPropertyTags()>
   1249c:	e3a03008 	mov	r3, #8
   124a0:	e28d200c 	add	r2, sp, #12
   124a4:	e08d0003 	add	r0, sp, r3
   124a8:	e58d3000 	str	r3, [sp]
   124ac:	e59f1044 	ldr	r1, [pc, #68]	; 124f8 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x74>
   124b0:	e3a03014 	mov	r3, #20
   124b4:	e58d5018 	str	r5, [sp, #24]
   124b8:	e58d601c 	str	r6, [sp, #28]
   124bc:	ebffddf4 	bl	9c94 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   124c0:	e2504000 	subs	r4, r0, #0
   124c4:	0a000006 	beq	124e4 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x60>
   124c8:	e59d3018 	ldr	r3, [sp, #24]
   124cc:	e1550003 	cmp	r5, r3
   124d0:	059d401c 	ldreq	r4, [sp, #28]
   124d4:	13a04000 	movne	r4, #0
   124d8:	00444006 	subeq	r4, r4, r6
   124dc:	016f4f14 	clzeq	r4, r4
   124e0:	01a042a4 	lsreq	r4, r4, #5
   124e4:	e28d0008 	add	r0, sp, #8
   124e8:	ebffdd98 	bl	9b50 <CBcmPropertyTags::~CBcmPropertyTags()>
   124ec:	e1a00004 	mov	r0, r4
   124f0:	e28dd020 	add	sp, sp, #32
   124f4:	e8bd8070 	pop	{r4, r5, r6, pc}
   124f8:	00048009 	.word	0x00048009

000124fc <CBcmFrameBuffer::WaitForVerticalSync()>:
   124fc:	e92d4010 	push	{r4, lr}
   12500:	e24dd020 	sub	sp, sp, #32
   12504:	e28d000c 	add	r0, sp, #12
   12508:	ebffdd8a 	bl	9b38 <CBcmPropertyTags::CBcmPropertyTags()>
   1250c:	e3a03000 	mov	r3, #0
   12510:	e58d3000 	str	r3, [sp]
   12514:	e3a03010 	mov	r3, #16
   12518:	e59f1020 	ldr	r1, [pc, #32]	; 12540 <CBcmFrameBuffer::WaitForVerticalSync()+0x44>
   1251c:	e08d2003 	add	r2, sp, r3
   12520:	e28d000c 	add	r0, sp, #12
   12524:	ebffddda 	bl	9c94 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   12528:	e1a04000 	mov	r4, r0
   1252c:	e28d000c 	add	r0, sp, #12
   12530:	ebffdd86 	bl	9b50 <CBcmPropertyTags::~CBcmPropertyTags()>
   12534:	e1a00004 	mov	r0, r4
   12538:	e28dd020 	add	sp, sp, #32
   1253c:	e8bd8010 	pop	{r4, pc}
   12540:	0004800e 	.word	0x0004800e

00012544 <CBcmMailBox::CBcmMailBox(unsigned int)>:
   12544:	e5801000 	str	r1, [r0]
   12548:	e12fff1e 	bx	lr

0001254c <CBcmMailBox::~CBcmMailBox()>:
   1254c:	e12fff1e 	bx	lr

00012550 <CBcmMailBox::Flush()>:
   12550:	e92d4070 	push	{r4, r5, r6, lr}
   12554:	e59f4028 	ldr	r4, [pc, #40]	; 12584 <CBcmMailBox::Flush()+0x34>
   12558:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   1255c:	e3130101 	tst	r3, #1073741824	; 0x40000000
   12560:	18bd8070 	popne	{r4, r5, r6, pc}
   12564:	e3a05014 	mov	r5, #20
   12568:	e1a00005 	mov	r0, r5
   1256c:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
   12570:	ebfff891 	bl	107bc <CTimer::SimpleMsDelay(unsigned int)>
   12574:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   12578:	e3130101 	tst	r3, #1073741824	; 0x40000000
   1257c:	0afffff9 	beq	12568 <CBcmMailBox::Flush()+0x18>
   12580:	e8bd8070 	pop	{r4, r5, r6, pc}
   12584:	2000b000 	.word	0x2000b000

00012588 <CBcmMailBox::Read()>:
   12588:	e5901000 	ldr	r1, [r0]
   1258c:	e59f2020 	ldr	r2, [pc, #32]	; 125b4 <CBcmMailBox::Read()+0x2c>
   12590:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   12594:	e3130101 	tst	r3, #1073741824	; 0x40000000
   12598:	1afffffc 	bne	12590 <CBcmMailBox::Read()+0x8>
   1259c:	e5920880 	ldr	r0, [r2, #2176]	; 0x880
   125a0:	e200300f 	and	r3, r0, #15
   125a4:	e1510003 	cmp	r1, r3
   125a8:	1afffff8 	bne	12590 <CBcmMailBox::Read()+0x8>
   125ac:	e3c0000f 	bic	r0, r0, #15
   125b0:	e12fff1e 	bx	lr
   125b4:	2000b000 	.word	0x2000b000

000125b8 <CBcmMailBox::Write(unsigned int)>:
   125b8:	e92d4070 	push	{r4, r5, r6, lr}
   125bc:	e1a05000 	mov	r5, r0
   125c0:	e1a04001 	mov	r4, r1
   125c4:	e59f2034 	ldr	r2, [pc, #52]	; 12600 <CBcmMailBox::Write(unsigned int)+0x48>
   125c8:	e59238b8 	ldr	r3, [r2, #2232]	; 0x8b8
   125cc:	e3530000 	cmp	r3, #0
   125d0:	bafffffc 	blt	125c8 <CBcmMailBox::Write(unsigned int)+0x10>
   125d4:	e314000f 	tst	r4, #15
   125d8:	0a000003 	beq	125ec <CBcmMailBox::Write(unsigned int)+0x34>
   125dc:	e3a0205b 	mov	r2, #91	; 0x5b
   125e0:	e59f101c 	ldr	r1, [pc, #28]	; 12604 <CBcmMailBox::Write(unsigned int)+0x4c>
   125e4:	e59f001c 	ldr	r0, [pc, #28]	; 12608 <CBcmMailBox::Write(unsigned int)+0x50>
   125e8:	ebffdd2e 	bl	9aa8 <assertion_failed>
   125ec:	e5952000 	ldr	r2, [r5]
   125f0:	e59f3008 	ldr	r3, [pc, #8]	; 12600 <CBcmMailBox::Write(unsigned int)+0x48>
   125f4:	e1844002 	orr	r4, r4, r2
   125f8:	e58348a0 	str	r4, [r3, #2208]	; 0x8a0
   125fc:	e8bd8070 	pop	{r4, r5, r6, pc}
   12600:	2000b000 	.word	0x2000b000
   12604:	000141c4 	.word	0x000141c4
   12608:	000141d4 	.word	0x000141d4

0001260c <CBcmMailBox::WriteRead(unsigned int)>:
   1260c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   12610:	e3a03000 	mov	r3, #0
   12614:	e1a07000 	mov	r7, r0
   12618:	e1a08001 	mov	r8, r1
   1261c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   12620:	e59f5090 	ldr	r5, [pc, #144]	; 126b8 <CBcmMailBox::WriteRead(unsigned int)+0xac>
   12624:	e5950000 	ldr	r0, [r5]
   12628:	e1500003 	cmp	r0, r3
   1262c:	1a00001f 	bne	126b0 <CBcmMailBox::WriteRead(unsigned int)+0xa4>
   12630:	e59f4084 	ldr	r4, [pc, #132]	; 126bc <CBcmMailBox::WriteRead(unsigned int)+0xb0>
   12634:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   12638:	e3130101 	tst	r3, #1073741824	; 0x40000000
   1263c:	1a000006 	bne	1265c <CBcmMailBox::WriteRead(unsigned int)+0x50>
   12640:	e3a06014 	mov	r6, #20
   12644:	e1a00006 	mov	r0, r6
   12648:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
   1264c:	ebfff85a 	bl	107bc <CTimer::SimpleMsDelay(unsigned int)>
   12650:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   12654:	e3130101 	tst	r3, #1073741824	; 0x40000000
   12658:	0afffff9 	beq	12644 <CBcmMailBox::WriteRead(unsigned int)+0x38>
   1265c:	e1a00007 	mov	r0, r7
   12660:	e1a01008 	mov	r1, r8
   12664:	ebffffd3 	bl	125b8 <CBcmMailBox::Write(unsigned int)>
   12668:	e5970000 	ldr	r0, [r7]
   1266c:	e59f2048 	ldr	r2, [pc, #72]	; 126bc <CBcmMailBox::WriteRead(unsigned int)+0xb0>
   12670:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   12674:	e3130101 	tst	r3, #1073741824	; 0x40000000
   12678:	1afffffc 	bne	12670 <CBcmMailBox::WriteRead(unsigned int)+0x64>
   1267c:	e5923880 	ldr	r3, [r2, #2176]	; 0x880
   12680:	e203100f 	and	r1, r3, #15
   12684:	e1510000 	cmp	r1, r0
   12688:	1afffff8 	bne	12670 <CBcmMailBox::WriteRead(unsigned int)+0x64>
   1268c:	e5952000 	ldr	r2, [r5]
   12690:	e3c3400f 	bic	r4, r3, #15
   12694:	e3520000 	cmp	r2, #0
   12698:	0a000000 	beq	126a0 <CBcmMailBox::WriteRead(unsigned int)+0x94>
   1269c:	ebfffccf 	bl	119e0 <LeaveCritical>
   126a0:	e3a03000 	mov	r3, #0
   126a4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   126a8:	e1a00004 	mov	r0, r4
   126ac:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   126b0:	ebfffc9d 	bl	1192c <EnterCritical>
   126b4:	eaffffdd 	b	12630 <CBcmMailBox::WriteRead(unsigned int)+0x24>
   126b8:	000153d4 	.word	0x000153d4
   126bc:	2000b000 	.word	0x2000b000

000126c0 <_GLOBAL__sub_I__ZN11CBcmMailBox10s_SpinLockE>:
   126c0:	e3a02000 	mov	r2, #0
   126c4:	e59f3004 	ldr	r3, [pc, #4]	; 126d0 <_GLOBAL__sub_I__ZN11CBcmMailBox10s_SpinLockE+0x10>
   126c8:	e5832000 	str	r2, [r3]
   126cc:	e12fff1e 	bx	lr
   126d0:	000153d4 	.word	0x000153d4

000126d4 <CCharGenerator::CCharGenerator()>:
   126d4:	e3a03008 	mov	r3, #8
   126d8:	e5803000 	str	r3, [r0]
   126dc:	e12fff1e 	bx	lr

000126e0 <CCharGenerator::~CCharGenerator()>:
   126e0:	e12fff1e 	bx	lr

000126e4 <CCharGenerator::GetCharWidth() const>:
   126e4:	e5900000 	ldr	r0, [r0]
   126e8:	e12fff1e 	bx	lr

000126ec <CCharGenerator::GetCharHeight() const>:
   126ec:	e3a00013 	mov	r0, #19
   126f0:	e12fff1e 	bx	lr

000126f4 <CCharGenerator::GetUnderline() const>:
   126f4:	e3a00010 	mov	r0, #16
   126f8:	e12fff1e 	bx	lr

000126fc <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>:
   126fc:	e6ef1071 	uxtb	r1, r1
   12700:	e92d4070 	push	{r4, r5, r6, lr}
   12704:	e2414021 	sub	r4, r1, #33	; 0x21
   12708:	e35400de 	cmp	r4, #222	; 0xde
   1270c:	8a00000e 	bhi	1274c <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x50>
   12710:	e1a06003 	mov	r6, r3
   12714:	e5903000 	ldr	r3, [r0]
   12718:	e1a05002 	mov	r5, r2
   1271c:	e1530002 	cmp	r3, r2
   12720:	9a00000b 	bls	12754 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x58>
   12724:	e356000f 	cmp	r6, #15
   12728:	8a000007 	bhi	1274c <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x50>
   1272c:	e3a02080 	mov	r2, #128	; 0x80
   12730:	e59f1038 	ldr	r1, [pc, #56]	; 12770 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x74>
   12734:	e0814204 	add	r4, r1, r4, lsl #4
   12738:	e7d43006 	ldrb	r3, [r4, r6]
   1273c:	e0133552 	ands	r3, r3, r2, asr r5
   12740:	13a00001 	movne	r0, #1
   12744:	03a00000 	moveq	r0, #0
   12748:	e8bd8070 	pop	{r4, r5, r6, pc}
   1274c:	e3a00000 	mov	r0, #0
   12750:	e8bd8070 	pop	{r4, r5, r6, pc}
   12754:	e3a0204e 	mov	r2, #78	; 0x4e
   12758:	e59f1014 	ldr	r1, [pc, #20]	; 12774 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x78>
   1275c:	e59f0014 	ldr	r0, [pc, #20]	; 12778 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x7c>
   12760:	ebffdcd0 	bl	9aa8 <assertion_failed>
   12764:	e356000f 	cmp	r6, #15
   12768:	9affffef 	bls	1272c <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x30>
   1276c:	eafffff6 	b	1274c <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x50>
   12770:	000141e8 	.word	0x000141e8
   12774:	00014fd8 	.word	0x00014fd8
   12778:	00014fec 	.word	0x00014fec
   1277c:	00000000 	.word	0x00000000

00012780 <DelayLoop>:
   12780:	e2500001 	subs	r0, r0, #1
   12784:	8afffffd 	bhi	12780 <DelayLoop>
   12788:	e1a0f00e 	mov	pc, lr

0001278c <CGPIOManager::CGPIOManager(CInterruptSystem*)>:
   1278c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   12790:	e3a0e000 	mov	lr, #0
   12794:	e1a03000 	mov	r3, r0
   12798:	e1a0c00e 	mov	ip, lr
   1279c:	e5801000 	str	r1, [r0]
   127a0:	e28020dc 	add	r2, r0, #220	; 0xdc
   127a4:	e5e3e004 	strb	lr, [r3, #4]!
   127a8:	e5a3c004 	str	ip, [r3, #4]!
   127ac:	e1530002 	cmp	r3, r2
   127b0:	1afffffc 	bne	127a8 <CGPIOManager::CGPIOManager(CInterruptSystem*)+0x1c>
   127b4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

000127b8 <CGPIOManager::~CGPIOManager()>:
   127b8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   127bc:	e1a09000 	mov	r9, r0
   127c0:	e3a0802c 	mov	r8, #44	; 0x2c
   127c4:	e59f706c 	ldr	r7, [pc, #108]	; 12838 <CGPIOManager::~CGPIOManager()+0x80>
   127c8:	e59f606c 	ldr	r6, [pc, #108]	; 1283c <CGPIOManager::~CGPIOManager()+0x84>
   127cc:	e2804004 	add	r4, r0, #4
   127d0:	e28050dc 	add	r5, r0, #220	; 0xdc
   127d4:	e5b43004 	ldr	r3, [r4, #4]!
   127d8:	e3530000 	cmp	r3, #0
   127dc:	0a000003 	beq	127f0 <CGPIOManager::~CGPIOManager()+0x38>
   127e0:	e1a02008 	mov	r2, r8
   127e4:	e1a01007 	mov	r1, r7
   127e8:	e1a00006 	mov	r0, r6
   127ec:	ebffdcad 	bl	9aa8 <assertion_failed>
   127f0:	e1540005 	cmp	r4, r5
   127f4:	1afffff6 	bne	127d4 <CGPIOManager::~CGPIOManager()+0x1c>
   127f8:	e5d93004 	ldrb	r3, [r9, #4]
   127fc:	e3530000 	cmp	r3, #0
   12800:	0a000004 	beq	12818 <CGPIOManager::~CGPIOManager()+0x60>
   12804:	e5990000 	ldr	r0, [r9]
   12808:	e3500000 	cmp	r0, #0
   1280c:	0a000003 	beq	12820 <CGPIOManager::~CGPIOManager()+0x68>
   12810:	e3a01034 	mov	r1, #52	; 0x34
   12814:	ebffe36e 	bl	b5d4 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   12818:	e1a00009 	mov	r0, r9
   1281c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12820:	e59f0018 	ldr	r0, [pc, #24]	; 12840 <CGPIOManager::~CGPIOManager()+0x88>
   12824:	e3a02032 	mov	r2, #50	; 0x32
   12828:	e59f1008 	ldr	r1, [pc, #8]	; 12838 <CGPIOManager::~CGPIOManager()+0x80>
   1282c:	ebffdc9d 	bl	9aa8 <assertion_failed>
   12830:	e5990000 	ldr	r0, [r9]
   12834:	eafffff5 	b	12810 <CGPIOManager::~CGPIOManager()+0x58>
   12838:	00015004 	.word	0x00015004
   1283c:	00015014 	.word	0x00015014
   12840:	00015028 	.word	0x00015028

00012844 <CGPIOManager::Initialize()>:
   12844:	e5d03004 	ldrb	r3, [r0, #4]
   12848:	e92d4010 	push	{r4, lr}
   1284c:	e3530000 	cmp	r3, #0
   12850:	e1a04000 	mov	r4, r0
   12854:	1a000009 	bne	12880 <CGPIOManager::Initialize()+0x3c>
   12858:	e5940000 	ldr	r0, [r4]
   1285c:	e3500000 	cmp	r0, #0
   12860:	0a00000d 	beq	1289c <CGPIOManager::Initialize()+0x58>
   12864:	e1a03004 	mov	r3, r4
   12868:	e59f2044 	ldr	r2, [pc, #68]	; 128b4 <CGPIOManager::Initialize()+0x70>
   1286c:	e3a01034 	mov	r1, #52	; 0x34
   12870:	ebffe31c 	bl	b4e8 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   12874:	e3a00001 	mov	r0, #1
   12878:	e5c40004 	strb	r0, [r4, #4]
   1287c:	e8bd8010 	pop	{r4, pc}
   12880:	e59f0030 	ldr	r0, [pc, #48]	; 128b8 <CGPIOManager::Initialize()+0x74>
   12884:	e3a0203b 	mov	r2, #59	; 0x3b
   12888:	e59f102c 	ldr	r1, [pc, #44]	; 128bc <CGPIOManager::Initialize()+0x78>
   1288c:	ebffdc85 	bl	9aa8 <assertion_failed>
   12890:	e5940000 	ldr	r0, [r4]
   12894:	e3500000 	cmp	r0, #0
   12898:	1afffff1 	bne	12864 <CGPIOManager::Initialize()+0x20>
   1289c:	e59f001c 	ldr	r0, [pc, #28]	; 128c0 <CGPIOManager::Initialize()+0x7c>
   128a0:	e3a0203c 	mov	r2, #60	; 0x3c
   128a4:	e59f1010 	ldr	r1, [pc, #16]	; 128bc <CGPIOManager::Initialize()+0x78>
   128a8:	ebffdc7e 	bl	9aa8 <assertion_failed>
   128ac:	e5940000 	ldr	r0, [r4]
   128b0:	eaffffeb 	b	12864 <CGPIOManager::Initialize()+0x20>
   128b4:	00012ad4 	.word	0x00012ad4
   128b8:	0001503c 	.word	0x0001503c
   128bc:	00015004 	.word	0x00015004
   128c0:	00015028 	.word	0x00015028

000128c4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>:
   128c4:	e5d03004 	ldrb	r3, [r0, #4]
   128c8:	e92d4070 	push	{r4, r5, r6, lr}
   128cc:	e3530000 	cmp	r3, #0
   128d0:	e1a04000 	mov	r4, r0
   128d4:	e1a05001 	mov	r5, r1
   128d8:	0a00000e 	beq	12918 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x54>
   128dc:	e3550000 	cmp	r5, #0
   128e0:	0a000016 	beq	12940 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x7c>
   128e4:	e5956004 	ldr	r6, [r5, #4]
   128e8:	e3560035 	cmp	r6, #53	; 0x35
   128ec:	8a00000e 	bhi	1292c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x68>
   128f0:	e0844106 	add	r4, r4, r6, lsl #2
   128f4:	e5943008 	ldr	r3, [r4, #8]
   128f8:	e3530000 	cmp	r3, #0
   128fc:	0a000003 	beq	12910 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x4c>
   12900:	e3a0204b 	mov	r2, #75	; 0x4b
   12904:	e59f1048 	ldr	r1, [pc, #72]	; 12954 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x90>
   12908:	e59f0048 	ldr	r0, [pc, #72]	; 12958 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x94>
   1290c:	ebffdc65 	bl	9aa8 <assertion_failed>
   12910:	e5845008 	str	r5, [r4, #8]
   12914:	e8bd8070 	pop	{r4, r5, r6, pc}
   12918:	e3a02045 	mov	r2, #69	; 0x45
   1291c:	e59f1030 	ldr	r1, [pc, #48]	; 12954 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x90>
   12920:	e59f0034 	ldr	r0, [pc, #52]	; 1295c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x98>
   12924:	ebffdc5f 	bl	9aa8 <assertion_failed>
   12928:	eaffffeb 	b	128dc <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x18>
   1292c:	e3a02049 	mov	r2, #73	; 0x49
   12930:	e59f101c 	ldr	r1, [pc, #28]	; 12954 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x90>
   12934:	e59f0024 	ldr	r0, [pc, #36]	; 12960 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x9c>
   12938:	ebffdc5a 	bl	9aa8 <assertion_failed>
   1293c:	eaffffeb 	b	128f0 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x2c>
   12940:	e3a02047 	mov	r2, #71	; 0x47
   12944:	e59f1008 	ldr	r1, [pc, #8]	; 12954 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x90>
   12948:	e59f0014 	ldr	r0, [pc, #20]	; 12964 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0xa0>
   1294c:	ebffdc55 	bl	9aa8 <assertion_failed>
   12950:	eaffffe3 	b	128e4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x20>
   12954:	00015004 	.word	0x00015004
   12958:	00015014 	.word	0x00015014
   1295c:	00015050 	.word	0x00015050
   12960:	00013848 	.word	0x00013848
   12964:	00015060 	.word	0x00015060

00012968 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>:
   12968:	e5d03004 	ldrb	r3, [r0, #4]
   1296c:	e92d4070 	push	{r4, r5, r6, lr}
   12970:	e3530000 	cmp	r3, #0
   12974:	e1a04000 	mov	r4, r0
   12978:	e1a05001 	mov	r5, r1
   1297c:	0a00000b 	beq	129b0 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x48>
   12980:	e3550000 	cmp	r5, #0
   12984:	0a00001b 	beq	129f8 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x90>
   12988:	e5955004 	ldr	r5, [r5, #4]
   1298c:	e3550035 	cmp	r5, #53	; 0x35
   12990:	8a00000b 	bhi	129c4 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x5c>
   12994:	e0844105 	add	r4, r4, r5, lsl #2
   12998:	e5943008 	ldr	r3, [r4, #8]
   1299c:	e3530000 	cmp	r3, #0
   129a0:	0a00000f 	beq	129e4 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x7c>
   129a4:	e3a03000 	mov	r3, #0
   129a8:	e5843008 	str	r3, [r4, #8]
   129ac:	e8bd8070 	pop	{r4, r5, r6, pc}
   129b0:	e3a02052 	mov	r2, #82	; 0x52
   129b4:	e59f1050 	ldr	r1, [pc, #80]	; 12a0c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xa4>
   129b8:	e59f0050 	ldr	r0, [pc, #80]	; 12a10 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xa8>
   129bc:	ebffdc39 	bl	9aa8 <assertion_failed>
   129c0:	eaffffee 	b	12980 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x18>
   129c4:	e3a02056 	mov	r2, #86	; 0x56
   129c8:	e59f103c 	ldr	r1, [pc, #60]	; 12a0c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xa4>
   129cc:	e59f0040 	ldr	r0, [pc, #64]	; 12a14 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xac>
   129d0:	e0844105 	add	r4, r4, r5, lsl #2
   129d4:	ebffdc33 	bl	9aa8 <assertion_failed>
   129d8:	e5943008 	ldr	r3, [r4, #8]
   129dc:	e3530000 	cmp	r3, #0
   129e0:	1affffef 	bne	129a4 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x3c>
   129e4:	e3a02058 	mov	r2, #88	; 0x58
   129e8:	e59f101c 	ldr	r1, [pc, #28]	; 12a0c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xa4>
   129ec:	e59f0024 	ldr	r0, [pc, #36]	; 12a18 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xb0>
   129f0:	ebffdc2c 	bl	9aa8 <assertion_failed>
   129f4:	eaffffea 	b	129a4 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x3c>
   129f8:	e3a02054 	mov	r2, #84	; 0x54
   129fc:	e59f1008 	ldr	r1, [pc, #8]	; 12a0c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xa4>
   12a00:	e59f0014 	ldr	r0, [pc, #20]	; 12a1c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xb4>
   12a04:	ebffdc27 	bl	9aa8 <assertion_failed>
   12a08:	eaffffde 	b	12988 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x20>
   12a0c:	00015004 	.word	0x00015004
   12a10:	00015050 	.word	0x00015050
   12a14:	00013848 	.word	0x00013848
   12a18:	0001506c 	.word	0x0001506c
   12a1c:	00015060 	.word	0x00015060

00012a20 <CGPIOManager::InterruptHandler()>:
   12a20:	e5d03004 	ldrb	r3, [r0, #4]
   12a24:	e92d4070 	push	{r4, r5, r6, lr}
   12a28:	e3530000 	cmp	r3, #0
   12a2c:	e1a05000 	mov	r5, r0
   12a30:	0a00001b 	beq	12aa4 <CGPIOManager::InterruptHandler()+0x84>
   12a34:	e3a04000 	mov	r4, #0
   12a38:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   12a3c:	e59f2080 	ldr	r2, [pc, #128]	; 12ac4 <CGPIOManager::InterruptHandler()+0xa4>
   12a40:	e5923040 	ldr	r3, [r2, #64]	; 0x40
   12a44:	ea000005 	b	12a60 <CGPIOManager::InterruptHandler()+0x40>
   12a48:	e2844001 	add	r4, r4, #1
   12a4c:	e314001f 	tst	r4, #31
   12a50:	11a030a3 	lsrne	r3, r3, #1
   12a54:	05923044 	ldreq	r3, [r2, #68]	; 0x44
   12a58:	e3540036 	cmp	r4, #54	; 0x36
   12a5c:	0a00000d 	beq	12a98 <CGPIOManager::InterruptHandler()+0x78>
   12a60:	e3130001 	tst	r3, #1
   12a64:	0afffff7 	beq	12a48 <CGPIOManager::InterruptHandler()+0x28>
   12a68:	e3a03001 	mov	r3, #1
   12a6c:	e2842002 	add	r2, r4, #2
   12a70:	e7950102 	ldr	r0, [r5, r2, lsl #2]
   12a74:	e204501f 	and	r5, r4, #31
   12a78:	e3500000 	cmp	r0, #0
   12a7c:	e1a05513 	lsl	r5, r3, r5
   12a80:	0a00000c 	beq	12ab8 <CGPIOManager::InterruptHandler()+0x98>
   12a84:	ebffe1c9 	bl	b1b0 <CGPIOPin::InterruptHandler()>
   12a88:	e59f3038 	ldr	r3, [pc, #56]	; 12ac8 <CGPIOManager::InterruptHandler()+0xa8>
   12a8c:	e08342a4 	add	r4, r3, r4, lsr #5
   12a90:	e1a04104 	lsl	r4, r4, #2
   12a94:	e5845000 	str	r5, [r4]
   12a98:	e3a03000 	mov	r3, #0
   12a9c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   12aa0:	e8bd8070 	pop	{r4, r5, r6, pc}
   12aa4:	e3a0205e 	mov	r2, #94	; 0x5e
   12aa8:	e59f101c 	ldr	r1, [pc, #28]	; 12acc <CGPIOManager::InterruptHandler()+0xac>
   12aac:	e59f001c 	ldr	r0, [pc, #28]	; 12ad0 <CGPIOManager::InterruptHandler()+0xb0>
   12ab0:	ebffdbfc 	bl	9aa8 <assertion_failed>
   12ab4:	eaffffde 	b	12a34 <CGPIOManager::InterruptHandler()+0x14>
   12ab8:	e1a00004 	mov	r0, r4
   12abc:	ebffe1e8 	bl	b264 <CGPIOPin::DisableAllInterrupts(unsigned int)>
   12ac0:	eafffff0 	b	12a88 <CGPIOManager::InterruptHandler()+0x68>
   12ac4:	20200000 	.word	0x20200000
   12ac8:	08080010 	.word	0x08080010
   12acc:	00015004 	.word	0x00015004
   12ad0:	00015050 	.word	0x00015050

00012ad4 <CGPIOManager::InterruptStub(void*)>:
   12ad4:	e92d4010 	push	{r4, lr}
   12ad8:	e2504000 	subs	r4, r0, #0
   12adc:	0a000002 	beq	12aec <CGPIOManager::InterruptStub(void*)+0x18>
   12ae0:	e1a00004 	mov	r0, r4
   12ae4:	e8bd4010 	pop	{r4, lr}
   12ae8:	eaffffcc 	b	12a20 <CGPIOManager::InterruptHandler()>
   12aec:	e59f0014 	ldr	r0, [pc, #20]	; 12b08 <CGPIOManager::InterruptStub(void*)+0x34>
   12af0:	e3a0208a 	mov	r2, #138	; 0x8a
   12af4:	e59f1010 	ldr	r1, [pc, #16]	; 12b0c <CGPIOManager::InterruptStub(void*)+0x38>
   12af8:	ebffdbea 	bl	9aa8 <assertion_failed>
   12afc:	e1a00004 	mov	r0, r4
   12b00:	e8bd4010 	pop	{r4, lr}
   12b04:	eaffffc5 	b	12a20 <CGPIOManager::InterruptHandler()>
   12b08:	00015080 	.word	0x00015080
   12b0c:	00015004 	.word	0x00015004

00012b10 <CPtrList::CPtrList()>:
   12b10:	e3a02000 	mov	r2, #0
   12b14:	e5802000 	str	r2, [r0]
   12b18:	e12fff1e 	bx	lr

00012b1c <CPtrList::~CPtrList()>:
   12b1c:	e5903000 	ldr	r3, [r0]
   12b20:	e92d4010 	push	{r4, lr}
   12b24:	e3530000 	cmp	r3, #0
   12b28:	e1a04000 	mov	r4, r0
   12b2c:	0a000003 	beq	12b40 <CPtrList::~CPtrList()+0x24>
   12b30:	e3a0202a 	mov	r2, #42	; 0x2a
   12b34:	e59f100c 	ldr	r1, [pc, #12]	; 12b48 <CPtrList::~CPtrList()+0x2c>
   12b38:	e59f000c 	ldr	r0, [pc, #12]	; 12b4c <CPtrList::~CPtrList()+0x30>
   12b3c:	ebffdbd9 	bl	9aa8 <assertion_failed>
   12b40:	e1a00004 	mov	r0, r4
   12b44:	e8bd8010 	pop	{r4, pc}
   12b48:	0001508c 	.word	0x0001508c
   12b4c:	00015098 	.word	0x00015098

00012b50 <CPtrList::GetFirst()>:
   12b50:	e5900000 	ldr	r0, [r0]
   12b54:	e12fff1e 	bx	lr

00012b58 <CPtrList::GetNext(TPtrListElement*)>:
   12b58:	e92d4010 	push	{r4, lr}
   12b5c:	e2514000 	subs	r4, r1, #0
   12b60:	0a000009 	beq	12b8c <CPtrList::GetNext(TPtrListElement*)+0x34>
   12b64:	e59f3034 	ldr	r3, [pc, #52]	; 12ba0 <CPtrList::GetNext(TPtrListElement*)+0x48>
   12b68:	e5942000 	ldr	r2, [r4]
   12b6c:	e1520003 	cmp	r2, r3
   12b70:	0a000003 	beq	12b84 <CPtrList::GetNext(TPtrListElement*)+0x2c>
   12b74:	e3a02035 	mov	r2, #53	; 0x35
   12b78:	e59f1024 	ldr	r1, [pc, #36]	; 12ba4 <CPtrList::GetNext(TPtrListElement*)+0x4c>
   12b7c:	e59f0024 	ldr	r0, [pc, #36]	; 12ba8 <CPtrList::GetNext(TPtrListElement*)+0x50>
   12b80:	ebffdbc8 	bl	9aa8 <assertion_failed>
   12b84:	e5940008 	ldr	r0, [r4, #8]
   12b88:	e8bd8010 	pop	{r4, pc}
   12b8c:	e3a02034 	mov	r2, #52	; 0x34
   12b90:	e59f100c 	ldr	r1, [pc, #12]	; 12ba4 <CPtrList::GetNext(TPtrListElement*)+0x4c>
   12b94:	e59f0010 	ldr	r0, [pc, #16]	; 12bac <CPtrList::GetNext(TPtrListElement*)+0x54>
   12b98:	ebffdbc2 	bl	9aa8 <assertion_failed>
   12b9c:	eafffff0 	b	12b64 <CPtrList::GetNext(TPtrListElement*)+0xc>
   12ba0:	504c4d43 	.word	0x504c4d43
   12ba4:	0001508c 	.word	0x0001508c
   12ba8:	000150b8 	.word	0x000150b8
   12bac:	000150a8 	.word	0x000150a8

00012bb0 <CPtrList::GetPtr(TPtrListElement*)>:
   12bb0:	e92d4010 	push	{r4, lr}
   12bb4:	e2514000 	subs	r4, r1, #0
   12bb8:	0a000009 	beq	12be4 <CPtrList::GetPtr(TPtrListElement*)+0x34>
   12bbc:	e59f3034 	ldr	r3, [pc, #52]	; 12bf8 <CPtrList::GetPtr(TPtrListElement*)+0x48>
   12bc0:	e5942000 	ldr	r2, [r4]
   12bc4:	e1520003 	cmp	r2, r3
   12bc8:	0a000003 	beq	12bdc <CPtrList::GetPtr(TPtrListElement*)+0x2c>
   12bcc:	e3a0203d 	mov	r2, #61	; 0x3d
   12bd0:	e59f1024 	ldr	r1, [pc, #36]	; 12bfc <CPtrList::GetPtr(TPtrListElement*)+0x4c>
   12bd4:	e59f0024 	ldr	r0, [pc, #36]	; 12c00 <CPtrList::GetPtr(TPtrListElement*)+0x50>
   12bd8:	ebffdbb2 	bl	9aa8 <assertion_failed>
   12bdc:	e594000c 	ldr	r0, [r4, #12]
   12be0:	e8bd8010 	pop	{r4, pc}
   12be4:	e3a0203c 	mov	r2, #60	; 0x3c
   12be8:	e59f100c 	ldr	r1, [pc, #12]	; 12bfc <CPtrList::GetPtr(TPtrListElement*)+0x4c>
   12bec:	e59f0010 	ldr	r0, [pc, #16]	; 12c04 <CPtrList::GetPtr(TPtrListElement*)+0x54>
   12bf0:	ebffdbac 	bl	9aa8 <assertion_failed>
   12bf4:	eafffff0 	b	12bbc <CPtrList::GetPtr(TPtrListElement*)+0xc>
   12bf8:	504c4d43 	.word	0x504c4d43
   12bfc:	0001508c 	.word	0x0001508c
   12c00:	000150b8 	.word	0x000150b8
   12c04:	000150a8 	.word	0x000150a8

00012c08 <CPtrList::InsertBefore(TPtrListElement*, void*)>:
   12c08:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   12c0c:	e1a06000 	mov	r6, r0
   12c10:	e3a00010 	mov	r0, #16
   12c14:	e1a07002 	mov	r7, r2
   12c18:	e1a04001 	mov	r4, r1
   12c1c:	ebfffb9c 	bl	11a94 <operator new(unsigned int)>
   12c20:	e5962000 	ldr	r2, [r6]
   12c24:	e59f30c8 	ldr	r3, [pc, #200]	; 12cf4 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xec>
   12c28:	e3520000 	cmp	r2, #0
   12c2c:	e1a05000 	mov	r5, r0
   12c30:	e580700c 	str	r7, [r0, #12]
   12c34:	e5803000 	str	r3, [r0]
   12c38:	0a000023 	beq	12ccc <CPtrList::InsertBefore(TPtrListElement*, void*)+0xc4>
   12c3c:	e3540000 	cmp	r4, #0
   12c40:	0a000026 	beq	12ce0 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd8>
   12c44:	e59f30a8 	ldr	r3, [pc, #168]	; 12cf4 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xec>
   12c48:	e5942000 	ldr	r2, [r4]
   12c4c:	e1520003 	cmp	r2, r3
   12c50:	0a000003 	beq	12c64 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x5c>
   12c54:	e3a0204e 	mov	r2, #78	; 0x4e
   12c58:	e59f1098 	ldr	r1, [pc, #152]	; 12cf8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf0>
   12c5c:	e59f0098 	ldr	r0, [pc, #152]	; 12cfc <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf4>
   12c60:	ebffdb90 	bl	9aa8 <assertion_failed>
   12c64:	e5963000 	ldr	r3, [r6]
   12c68:	e1540003 	cmp	r4, r3
   12c6c:	0a000010 	beq	12cb4 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xac>
   12c70:	e5943004 	ldr	r3, [r4, #4]
   12c74:	e5854008 	str	r4, [r5, #8]
   12c78:	e3530000 	cmp	r3, #0
   12c7c:	e5853004 	str	r3, [r5, #4]
   12c80:	0a000009 	beq	12cac <CPtrList::InsertBefore(TPtrListElement*, void*)+0xa4>
   12c84:	e59f2068 	ldr	r2, [pc, #104]	; 12cf4 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xec>
   12c88:	e5931000 	ldr	r1, [r3]
   12c8c:	e1510002 	cmp	r1, r2
   12c90:	0a000004 	beq	12ca8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xa0>
   12c94:	e3a02060 	mov	r2, #96	; 0x60
   12c98:	e59f1058 	ldr	r1, [pc, #88]	; 12cf8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf0>
   12c9c:	e59f005c 	ldr	r0, [pc, #92]	; 12d00 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf8>
   12ca0:	ebffdb80 	bl	9aa8 <assertion_failed>
   12ca4:	e5943004 	ldr	r3, [r4, #4]
   12ca8:	e5835008 	str	r5, [r3, #8]
   12cac:	e5845004 	str	r5, [r4, #4]
   12cb0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   12cb4:	e3a03000 	mov	r3, #0
   12cb8:	e5845004 	str	r5, [r4, #4]
   12cbc:	e5854008 	str	r4, [r5, #8]
   12cc0:	e5865000 	str	r5, [r6]
   12cc4:	e5853004 	str	r3, [r5, #4]
   12cc8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   12ccc:	e3a0204c 	mov	r2, #76	; 0x4c
   12cd0:	e59f1020 	ldr	r1, [pc, #32]	; 12cf8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf0>
   12cd4:	e59f0028 	ldr	r0, [pc, #40]	; 12d04 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xfc>
   12cd8:	ebffdb72 	bl	9aa8 <assertion_failed>
   12cdc:	eaffffd6 	b	12c3c <CPtrList::InsertBefore(TPtrListElement*, void*)+0x34>
   12ce0:	e3a0204d 	mov	r2, #77	; 0x4d
   12ce4:	e59f100c 	ldr	r1, [pc, #12]	; 12cf8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf0>
   12ce8:	e59f0018 	ldr	r0, [pc, #24]	; 12d08 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x100>
   12cec:	ebffdb6d 	bl	9aa8 <assertion_failed>
   12cf0:	eaffffd3 	b	12c44 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x3c>
   12cf4:	504c4d43 	.word	0x504c4d43
   12cf8:	0001508c 	.word	0x0001508c
   12cfc:	000150f8 	.word	0x000150f8
   12d00:	0001511c 	.word	0x0001511c
   12d04:	000150dc 	.word	0x000150dc
   12d08:	000150ec 	.word	0x000150ec

00012d0c <CPtrList::InsertAfter(TPtrListElement*, void*)>:
   12d0c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   12d10:	e1a06000 	mov	r6, r0
   12d14:	e1a05001 	mov	r5, r1
   12d18:	e3a00010 	mov	r0, #16
   12d1c:	e1a07002 	mov	r7, r2
   12d20:	ebfffb5b 	bl	11a94 <operator new(unsigned int)>
   12d24:	e59f30c0 	ldr	r3, [pc, #192]	; 12dec <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe0>
   12d28:	e3550000 	cmp	r5, #0
   12d2c:	e5803000 	str	r3, [r0]
   12d30:	e1a04000 	mov	r4, r0
   12d34:	e580700c 	str	r7, [r0, #12]
   12d38:	e5963000 	ldr	r3, [r6]
   12d3c:	0a00001a 	beq	12dac <CPtrList::InsertAfter(TPtrListElement*, void*)+0xa0>
   12d40:	e3530000 	cmp	r3, #0
   12d44:	0a000023 	beq	12dd8 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xcc>
   12d48:	e59f309c 	ldr	r3, [pc, #156]	; 12dec <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe0>
   12d4c:	e5952000 	ldr	r2, [r5]
   12d50:	e1520003 	cmp	r2, r3
   12d54:	0a000003 	beq	12d68 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x5c>
   12d58:	e3a0207e 	mov	r2, #126	; 0x7e
   12d5c:	e59f108c 	ldr	r1, [pc, #140]	; 12df0 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe4>
   12d60:	e59f008c 	ldr	r0, [pc, #140]	; 12df4 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe8>
   12d64:	ebffdb4f 	bl	9aa8 <assertion_failed>
   12d68:	e5953008 	ldr	r3, [r5, #8]
   12d6c:	e5845004 	str	r5, [r4, #4]
   12d70:	e3530000 	cmp	r3, #0
   12d74:	e5843008 	str	r3, [r4, #8]
   12d78:	0a000009 	beq	12da4 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x98>
   12d7c:	e59f2068 	ldr	r2, [pc, #104]	; 12dec <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe0>
   12d80:	e5931000 	ldr	r1, [r3]
   12d84:	e1510002 	cmp	r1, r2
   12d88:	0a000004 	beq	12da0 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x94>
   12d8c:	e3a02085 	mov	r2, #133	; 0x85
   12d90:	e59f1058 	ldr	r1, [pc, #88]	; 12df0 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe4>
   12d94:	e59f005c 	ldr	r0, [pc, #92]	; 12df8 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xec>
   12d98:	ebffdb42 	bl	9aa8 <assertion_failed>
   12d9c:	e5953008 	ldr	r3, [r5, #8]
   12da0:	e5834004 	str	r4, [r3, #4]
   12da4:	e5854008 	str	r4, [r5, #8]
   12da8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   12dac:	e3530000 	cmp	r3, #0
   12db0:	0a000003 	beq	12dc4 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xb8>
   12db4:	e3a02074 	mov	r2, #116	; 0x74
   12db8:	e59f1030 	ldr	r1, [pc, #48]	; 12df0 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe4>
   12dbc:	e59f0038 	ldr	r0, [pc, #56]	; 12dfc <CPtrList::InsertAfter(TPtrListElement*, void*)+0xf0>
   12dc0:	ebffdb38 	bl	9aa8 <assertion_failed>
   12dc4:	e3a03000 	mov	r3, #0
   12dc8:	e5864000 	str	r4, [r6]
   12dcc:	e5843004 	str	r3, [r4, #4]
   12dd0:	e5843008 	str	r3, [r4, #8]
   12dd4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   12dd8:	e3a0207d 	mov	r2, #125	; 0x7d
   12ddc:	e59f100c 	ldr	r1, [pc, #12]	; 12df0 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe4>
   12de0:	e59f0018 	ldr	r0, [pc, #24]	; 12e00 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xf4>
   12de4:	ebffdb2f 	bl	9aa8 <assertion_failed>
   12de8:	eaffffd6 	b	12d48 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x3c>
   12dec:	504c4d43 	.word	0x504c4d43
   12df0:	0001508c 	.word	0x0001508c
   12df4:	00015144 	.word	0x00015144
   12df8:	00015168 	.word	0x00015168
   12dfc:	00015098 	.word	0x00015098
   12e00:	000150dc 	.word	0x000150dc

00012e04 <CPtrList::Remove(TPtrListElement*)>:
   12e04:	e92d4070 	push	{r4, r5, r6, lr}
   12e08:	e2514000 	subs	r4, r1, #0
   12e0c:	e1a05000 	mov	r5, r0
   12e10:	0a00003c 	beq	12f08 <CPtrList::Remove(TPtrListElement*)+0x104>
   12e14:	e59f3118 	ldr	r3, [pc, #280]	; 12f34 <CPtrList::Remove(TPtrListElement*)+0x130>
   12e18:	e5942000 	ldr	r2, [r4]
   12e1c:	e1520003 	cmp	r2, r3
   12e20:	0a000003 	beq	12e34 <CPtrList::Remove(TPtrListElement*)+0x30>
   12e24:	e3a02090 	mov	r2, #144	; 0x90
   12e28:	e59f1108 	ldr	r1, [pc, #264]	; 12f38 <CPtrList::Remove(TPtrListElement*)+0x134>
   12e2c:	e59f0108 	ldr	r0, [pc, #264]	; 12f3c <CPtrList::Remove(TPtrListElement*)+0x138>
   12e30:	ebffdb1c 	bl	9aa8 <assertion_failed>
   12e34:	e5953000 	ldr	r3, [r5]
   12e38:	e1540003 	cmp	r4, r3
   12e3c:	0a000021 	beq	12ec8 <CPtrList::Remove(TPtrListElement*)+0xc4>
   12e40:	e5943004 	ldr	r3, [r4, #4]
   12e44:	e3530000 	cmp	r3, #0
   12e48:	0a000033 	beq	12f1c <CPtrList::Remove(TPtrListElement*)+0x118>
   12e4c:	e59f20e0 	ldr	r2, [pc, #224]	; 12f34 <CPtrList::Remove(TPtrListElement*)+0x130>
   12e50:	e5931000 	ldr	r1, [r3]
   12e54:	e1510002 	cmp	r1, r2
   12e58:	0a000004 	beq	12e70 <CPtrList::Remove(TPtrListElement*)+0x6c>
   12e5c:	e3a0209f 	mov	r2, #159	; 0x9f
   12e60:	e59f10d0 	ldr	r1, [pc, #208]	; 12f38 <CPtrList::Remove(TPtrListElement*)+0x134>
   12e64:	e59f00d4 	ldr	r0, [pc, #212]	; 12f40 <CPtrList::Remove(TPtrListElement*)+0x13c>
   12e68:	ebffdb0e 	bl	9aa8 <assertion_failed>
   12e6c:	e5943004 	ldr	r3, [r4, #4]
   12e70:	e5942008 	ldr	r2, [r4, #8]
   12e74:	e5832008 	str	r2, [r3, #8]
   12e78:	e5942008 	ldr	r2, [r4, #8]
   12e7c:	e3520000 	cmp	r2, #0
   12e80:	0a00000a 	beq	12eb0 <CPtrList::Remove(TPtrListElement*)+0xac>
   12e84:	e59f10a8 	ldr	r1, [pc, #168]	; 12f34 <CPtrList::Remove(TPtrListElement*)+0x130>
   12e88:	e5920000 	ldr	r0, [r2]
   12e8c:	e1500001 	cmp	r0, r1
   12e90:	0a000005 	beq	12eac <CPtrList::Remove(TPtrListElement*)+0xa8>
   12e94:	e3a020a4 	mov	r2, #164	; 0xa4
   12e98:	e59f1098 	ldr	r1, [pc, #152]	; 12f38 <CPtrList::Remove(TPtrListElement*)+0x134>
   12e9c:	e59f00a0 	ldr	r0, [pc, #160]	; 12f44 <CPtrList::Remove(TPtrListElement*)+0x140>
   12ea0:	ebffdb00 	bl	9aa8 <assertion_failed>
   12ea4:	e5942008 	ldr	r2, [r4, #8]
   12ea8:	e5943004 	ldr	r3, [r4, #4]
   12eac:	e5823004 	str	r3, [r2, #4]
   12eb0:	e3a03000 	mov	r3, #0
   12eb4:	e1a00004 	mov	r0, r4
   12eb8:	e5843000 	str	r3, [r4]
   12ebc:	e3a01010 	mov	r1, #16
   12ec0:	e8bd4070 	pop	{r4, r5, r6, lr}
   12ec4:	eafffaf6 	b	11aa4 <operator delete(void*, unsigned int)>
   12ec8:	e5943008 	ldr	r3, [r4, #8]
   12ecc:	e3530000 	cmp	r3, #0
   12ed0:	e5853000 	str	r3, [r5]
   12ed4:	0afffff5 	beq	12eb0 <CPtrList::Remove(TPtrListElement*)+0xac>
   12ed8:	e59f2054 	ldr	r2, [pc, #84]	; 12f34 <CPtrList::Remove(TPtrListElement*)+0x130>
   12edc:	e5931000 	ldr	r1, [r3]
   12ee0:	e1510002 	cmp	r1, r2
   12ee4:	0a000004 	beq	12efc <CPtrList::Remove(TPtrListElement*)+0xf8>
   12ee8:	e3a02098 	mov	r2, #152	; 0x98
   12eec:	e59f1044 	ldr	r1, [pc, #68]	; 12f38 <CPtrList::Remove(TPtrListElement*)+0x134>
   12ef0:	e59f004c 	ldr	r0, [pc, #76]	; 12f44 <CPtrList::Remove(TPtrListElement*)+0x140>
   12ef4:	ebffdaeb 	bl	9aa8 <assertion_failed>
   12ef8:	e5943008 	ldr	r3, [r4, #8]
   12efc:	e3a02000 	mov	r2, #0
   12f00:	e5832004 	str	r2, [r3, #4]
   12f04:	eaffffe9 	b	12eb0 <CPtrList::Remove(TPtrListElement*)+0xac>
   12f08:	e3a0208f 	mov	r2, #143	; 0x8f
   12f0c:	e59f1024 	ldr	r1, [pc, #36]	; 12f38 <CPtrList::Remove(TPtrListElement*)+0x134>
   12f10:	e59f0030 	ldr	r0, [pc, #48]	; 12f48 <CPtrList::Remove(TPtrListElement*)+0x144>
   12f14:	ebffdae3 	bl	9aa8 <assertion_failed>
   12f18:	eaffffbd 	b	12e14 <CPtrList::Remove(TPtrListElement*)+0x10>
   12f1c:	e3a0209e 	mov	r2, #158	; 0x9e
   12f20:	e59f1010 	ldr	r1, [pc, #16]	; 12f38 <CPtrList::Remove(TPtrListElement*)+0x134>
   12f24:	e59f0020 	ldr	r0, [pc, #32]	; 12f4c <CPtrList::Remove(TPtrListElement*)+0x148>
   12f28:	ebffdade 	bl	9aa8 <assertion_failed>
   12f2c:	e5943004 	ldr	r3, [r4, #4]
   12f30:	eaffffc5 	b	12e4c <CPtrList::Remove(TPtrListElement*)+0x48>
   12f34:	504c4d43 	.word	0x504c4d43
   12f38:	0001508c 	.word	0x0001508c
   12f3c:	000150b8 	.word	0x000150b8
   12f40:	000151d8 	.word	0x000151d8
   12f44:	00015194 	.word	0x00015194
   12f48:	000150a8 	.word	0x000150a8
   12f4c:	000151c0 	.word	0x000151c0

00012f50 <CPtrList::Find(void*)>:
   12f50:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12f54:	e5904000 	ldr	r4, [r0]
   12f58:	e3540000 	cmp	r4, #0
   12f5c:	0a000014 	beq	12fb4 <CPtrList::Find(void*)+0x64>
   12f60:	e1a05001 	mov	r5, r1
   12f64:	e3a090b3 	mov	r9, #179	; 0xb3
   12f68:	e59f6050 	ldr	r6, [pc, #80]	; 12fc0 <CPtrList::Find(void*)+0x70>
   12f6c:	e59f8050 	ldr	r8, [pc, #80]	; 12fc4 <CPtrList::Find(void*)+0x74>
   12f70:	e59f7050 	ldr	r7, [pc, #80]	; 12fc8 <CPtrList::Find(void*)+0x78>
   12f74:	ea000002 	b	12f84 <CPtrList::Find(void*)+0x34>
   12f78:	e5944008 	ldr	r4, [r4, #8]
   12f7c:	e3540000 	cmp	r4, #0
   12f80:	0a00000b 	beq	12fb4 <CPtrList::Find(void*)+0x64>
   12f84:	e5943000 	ldr	r3, [r4]
   12f88:	e1530006 	cmp	r3, r6
   12f8c:	0a000003 	beq	12fa0 <CPtrList::Find(void*)+0x50>
   12f90:	e1a02009 	mov	r2, r9
   12f94:	e1a01008 	mov	r1, r8
   12f98:	e1a00007 	mov	r0, r7
   12f9c:	ebffdac1 	bl	9aa8 <assertion_failed>
   12fa0:	e594300c 	ldr	r3, [r4, #12]
   12fa4:	e1530005 	cmp	r3, r5
   12fa8:	1afffff2 	bne	12f78 <CPtrList::Find(void*)+0x28>
   12fac:	e1a00004 	mov	r0, r4
   12fb0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12fb4:	e3a04000 	mov	r4, #0
   12fb8:	e1a00004 	mov	r0, r4
   12fbc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12fc0:	504c4d43 	.word	0x504c4d43
   12fc4:	0001508c 	.word	0x0001508c
   12fc8:	000150b8 	.word	0x000150b8
